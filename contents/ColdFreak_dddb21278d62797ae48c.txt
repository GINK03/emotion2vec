{"context": " More than 1 year has passed since last update.handle_info/2\n\nIf the gen_server should be able to receive other messages than requests, the callback function handle_info(Info, State) must be implemented to handle them. Examples of other messages are exit messages, if the gen_server is linked to other processes (than the supervisor) and trapping exit signals.\n\nhandle_info({'EXIT', Pid, Reason}, State) ->\n    ..code to handle exits here..\n    {noreply, State1}.\n\n\nio_lib:format, float_to_list\u3092\u4f7f\u3063\u3066\u5c0f\u6570\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n6> F = 5/3.\n1.6666666666666667\n7> io_lib:format(\"~.1f\", [F]).\n[\"1.7\"]\n8> io_lib:format(\"~.2f\", [F]).\n[\"1.67\"]\n9> io_lib:format(\"~.3f\", [F]).\n[\"1.667\"]\n10> F1 = 5/2.\n2.5\n11> io_lib:format(\"~.3f\", [F1]).\n[\"2.500\"]\n14> float_to_list(223.665, [{decimals, 0}]).\n\"224\"\n15> list_to_integer(float_to_list(223.665, [{decimals, 0}])).\n224\n16> float_to_list(223.665, [{decimals, 2}]).\n\"223.67\"\n17> float_to_list(5/2, [{decimals, 2}]).\n\"2.50\"\n18> list_to_integer(float_to_list(5/2, [{decimals, 0}])).\n3\n\n\n\nmnesia:create_table(employee,[{disc_copies, [node()]}, {attributes, record_info(fields, employee)}])\n\u30c6\u30fc\u30d6\u30eb\u306fdisc_copies\u3068\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u518d\u8d77\u52d5\u3059\u308b\u3068\u304d\u306b\u30c7\u30a3\u30b9\u30af\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3057\u305f\u3044\u3068\u304d\u306bwait_for_tables/2\u3092\u4f7f\u3044\u307e\u3059\uff0e\n$ erl -mnesia dir '\"./Mnesia.Company\"'\n4> mnesia:start()\n5> mnesia:wait_for_tables([employee, dept, project, manager, at_dep, in_proj], 5000).\n6> company:select_gender(male).\n\n\ncalendar:datetime_to_gregorian_seconds(DateTime) -> Seconds\n\nThis function computes the number of gregorian seconds starting with year 0 and ending at the given date and time.\n\n3> calendar:datetime_to_gregorian_seconds({{2015, 2, 9}, {16,32, 12}}).\n63590718732\n\n4> calendar:datetime_to_gregorian_seconds({{2015, 2, 9}, {16,32, 14}}).\n63590718734\n\n11> calendar:datetime_to_gregorian_seconds({{0, 1, 1}, {0,0, 1}}).\n1\n\n12> calendar:datetime_to_gregorian_seconds({{0, 1, 1}, {0,1, 0}}).\n60\n\n13> calendar:datetime_to_gregorian_seconds({{0, 1, 1}, {1,0, 0}}).\n3600\n\n\nlists:subtract(List1, List2) -> List3\n\nlists:subtract(A, B) is equivalent to A -- B. Returns a new list List3 which is a copy of List1, subjected to the following procedure: for each element in List2, its first occurrence in List1 is deleted.\n\n1> lists:subtract(\"123212\", \"212\").\n\"312\"\n\n\ndict:fetch_keys\u306f\u8f9e\u66f8\u306e\u4e2d\u306e\u3059\u3079\u3066\u306ekey\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3059\n1> D = dict:from_list([{k1,v1}, {k2, v2}, {k3, v3}]).\n{dict,3,16,16,8,80,48,\n      {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},\n      {{[],\n        [[k1|v1]],\n        [[k2|v2]],\n        [[k3|v3]],\n        [],[],[],[],[],[],[],[],[],[],[],[]}}}\n3> L = dict:fetch_keys(D).\n[k1,k2,k3]\n4> L.\n[k1,k2,k3]\n\n\ntimer:sleep(Time|infinity) -> ok\n\nSuspends the process calling this function for Time amount of milliseconds and then returns ok, or suspend the process forever if Time is the atom infinity. Naturally, this function does not return immediately.\n\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u306e\u65e5\u672c\u8a9e\u3092\u8aad\u307f\u51fa\u3059\n$ erl +pc unicode\n1>  {R, Data} = file:open(\"file\", [read, {encoding, utf8}]).\n{ok,<0.35.0>}\n2> io:get_line(Data, \"\").\n\"\u3053\u3093\u306b\u3061\u306f\\n\"\n3>\n\n\nstring:to_integer(String) -> {Int, Rest} | {error, Reason}\n\ntuple\u3092\u8fd4\u3059\u3053\u3068\u306b\u6ce8\u610f\n\n3> {I1, Is} = string:to_integer(\"33+22\").\n{33,\"+22\"}\n4> {I2, I3} = string:to_integer(Is).\n{22,[]}\n5> f().\nok\n6> {I1, Is} = string:to_integer(\"33/22\").\n{33,\"/22\"}\n7> {I2, I3} = string:to_integer(Is).\n{error,no_integer}\n\n\nSub protocols are used for creating new types of handlers that provide extra functionality in a reusable way. Cowboy uses this mechanism to provide its loop, REST and Websocket handlers.\nTo switch to a sub protocol, the init/2 callback must return the name of the sub protocol module. Everything past this point is handled by the sub protocol.\ninit(Req, Opts) ->\n    {cowboy_websocket, Req, Opts}.\n\n\ndict:from_list(L)\n\nKey-Value\u5f62\u306e\u30ea\u30b9\u30c8\u3092\u8f9e\u66f8\u306b\u5909\u63db\u3059\u308b\n\ndict:append(Key, Value, Dict1) -> Dict2\n1> L = [{keyA, \"A\"}, {keyB, \"B\"}, {keyC, \"C\"}].\n[{keyA,\"A\"},{keyB,\"B\"},{keyC,\"C\"}]\n\n3> D = dict:from_list(L).\n{dict,3,16,16,8,80,48,\n      {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},\n      {{[],\n        [[keyA,65]],\n        [[keyB,66]],\n        [[keyC,67]],\n        [],[],[],[],[],[],[],[],[],[],[],[]}}}\n\n4> D1 = dict:append(keyD, \"D\", D).\n{dict,4,16,16,8,80,48,\n      {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},\n      {{[],\n        [[keyA,65]],\n        [[keyB,66]],\n        [[keyC,67]],\n        [[keyD,\"D\"]],\n        [],[],[],[],[],[],[],[],[],[],[]}}}\n\n\n---\nHow to get N bits from binary\n> You'll need to use bitstring as the type as it will not be a multiple of 8 bits anymore (which the binary type requires). Rest is now 6 bits.\n\n```erlang\n23> <<B:2, Rest/bitstring>> = <<2#11000101>>.\n<<\"\u00c5\">>\n24> B.\n3\n25> Rest.\n<<5:6>>\n\n\nbinary:match(Subject, Pattern) -> Found | nomatch\n\n\u623b\u308a\u5024\u306b\u793a\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u7d50\u679c\u306eoffset\u306f0\u304b\u3089\u59cb\u307e\u308b\n\n6> binary:match(<<\"/etc/nginx/nginx.conf\">>, <<\"etc/\">>).\n{1,4}\n7> binary:match(<<\"/etc/nginx/nginx.conf\">>, <<\"etc//\">>).\nnomatch\n\n\ne(-1) \n\nreexecute expression on previous line\n\n29> L = filename:split(\"local/bin\").\n[\"local\",\"bin\"]\n30> e(-1).\n[\"local\",\"bin\"]\n\n\n9> filename:split(\"/usr/local/bin\").\n[\"/\",\"usr\",\"local\",\"bin\"]\n\n10> filename:split(\"/usr/local/bin/\").\n[\"/\",\"usr\",\"local\",\"bin\"]\n\n11> filename:split(\"local/bin\").\n[\"local\",\"bin\"]\n\n12> filename:split(\"local/bin/\").\n[\"local\",\"bin\"]\n\n14> filename:split(\"local/bin/foo\").\n[\"local\",\"bin\",\"foo\"]\n\n\nfilename:absname(Filename)\n\nConverts a relative Filename and returns an absolute name. No attempt is made to create the shortest absolute name,\nbecause this can give incorrect results on file systems which allow links.\n\n1> pwd().\n/home/ec2-user\nok\n\n2> filename:absname(\"foo\").\n\"/home/ec2-user/foo\"\n3> filename:absname(\"../X\").\n\"/home/ec2-user/../X\"\n4> filename:absname(\"/\").\n\"/\"\n\n5> cd(\"/etc\").\n/etc\nok\n6> filename:absname(\"foo\").\n\"/etc/foo\"\n\n7> X= <<\"foo\">>.\n<<\"foo\">>\n8> filename:absname(X).\n<<\"/etc/foo\">>\n\n\n19> base64:encode_to_string(\"wang zhijun\").\n\"d2FuZyB6aGlqdW4=\"\n20> base64:encode_to_string(ab).\n** exception error: no function clause matching\n                    base64:encode_to_string(ab) (base64.erl, line 46)\n\n21> base64:encode_to_string(<<\"wang zhijun\">>).\n\"d2FuZyB6aGlqdW4=\"\n\n23> base64:encode_to_string(crypto:rand_bytes(32)).\n\"h46fo7CSL4Q/94Ji7664Txpw++mgWsnZ2W9TR0tZdSc=\"\n\n\n8> lists:nth(5, [1,2,ab, \"mike\", <<\"binary\">>]).\n<<\"binary\">>\n9> lists:nth(0, [1,2,ab, \"mike\", <<\"binary\">>]).\n** exception error: no function clause matching\n                    lists:nth(0,[1,2,ab,\"mike\",<<\"binary\">>]) (lists.erl, line 168)\n\n10> lists:nthtail(0, [1,2,ab, \"mike\", <<\"binary\">>]).\n[1,2,ab,\"mike\",<<\"binary\">>]\n11> lists:nthtail(2, [1,2,ab, \"mike\", <<\"binary\">>]).\n[ab,\"mike\",<<\"binary\">>]\n12> lists:nthtail(5, [1,2,ab, \"mike\", <<\"binary\">>]).\n[]\n\n\ncrypto:rand_bytes(N).\n\nrand_bytes(N) -> binary()\nGenerates N bytes randomly uniform 0..255, and returns the result in a binary. Uses the crypto library pseudo-random number generator.\n\n6> crypto:rand_bytes(64).\n<<90,108,103,210,241,40,111,211,250,40,227,216,56,149,110,\n  182,219,237,182,157,194,81,207,85,121,56,224,201,18,...>>\n7> length(binary_to_list(crypto:rand_bytes(64))).\n64\n8>\n\n\n't' \n\nis the Unicode translation modifier\n\n's' \n\nPrints the argument with the string syntax. \nThe argument is, if no Unicode translation modifier \nis present, an iolist(), a binary(), or an atom(). \nIf the Unicode translation modifier (t) is in effect, \nthe argument is unicode:chardata(), meaning that binaries are in UTF-8. \n\n1> Bin = <<\"\u3053\u3093\u306b\u3061\u306f\"/utf8>>.\n<<227,129,147,227,130,147,227,129,171,227,129,161,227,129,\n  175>>\n2> lists:keyfind(encoding, 1, io:getopts()).\n{encoding,unicode}\n3> io:format(\"~ts~n\", [Bin]).\n\u3053\u3093\u306b\u3061\u306f\nok\n4>\n\n\nmnesia:delete_object(Record) -> transaction abort | ok\nDelete=#user{first_name = \"ryan\", _ = '_'},\nFun = fun() ->\n              List = mnesia:match_object(Delete)\n              lists:foreach(fun(X) ->\n                                    mnesia:delete_object(X)\n                            end, List)\n      end,\nmnesia:transaction(Fun).\n\n\nemployee\u30c6\u30fc\u30d6\u30eb\u306eEno\u30ec\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u3001\u8aad\u307f\u8fbc\u307f\u3092\u884c\u3063\u305f\u5f8c\u3001update\u3092\u884c\u3044\u305f\u3044\u5834\u5408\n mnesia:read/3\u306e\u4e09\u3064\u76ee\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306bwrite\u30ed\u30c3\u30af\u3092\u639b\u3051\u308b\n raise(Eno, Raise) ->\n     F = fun() ->\n                 [E] = mnesia:read(employee, Eno, write),\n                 Salary = E#employee.salary + Raise,\n                 New = E#employee{salary = Salary},\n                 mnesia:write(New)\n         end,\n     mnesia:transaction(F).\n\n\nmnesia:create_table\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067ram_copies\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u6700\u521d\u306b\u4f5c\u6210\u3055\u308c\u305fschema\u306fdisc_copies\n$ erl -mnesia dir '\"/tmp/funky\"'\n1> mnesia:create_schema([node()]).\nok\n2> mnesia:start().\nok\n4> mnesia:create_table(funky, []).\n{atomic,ok}\n5> mnesia:info().\n---> Processes holding locks <---\n---> Processes waiting for locks <---\n---> Participant transactions <---\n---> Coordinator transactions <---\n---> Uncertain transactions <---\n---> Active tables <---\nfunky          : with 0        records occupying 282      words of mem\nschema         : with 2        records occupying 506      words of mem\n===> System info in version \"4.12.1\", debug level = none <===\nopt_disc. Directory \"/tmp/funky\" is used.\nuse fallback at restart = false\nrunning db nodes   = [nonode@nohost]\nstopped db nodes   = []\nmaster node tables = []\nremote             = []\nram_copies         = [funky]\ndisc_copies        = [schema]\ndisc_only_copies   = []\n[{nonode@nohost,disc_copies}] = [schema]\n[{nonode@nohost,ram_copies}] = [funky]\n3 transactions committed, 0 aborted, 0 restarted, 2 logged to disc\n0 held locks, 0 in queue; 0 local transactions, 0 remote\n0 transactions waits for other nodes: []\nok\n\n\n\nfilelib:is_dir(Name) -> boolean()\n\nThe is_dir/1 function returns true if Name refers to a directory, and false otherwise.\n\nAirBox:Desktop wzj$ erl\n1> filelib:is_dir(\"~/Desktop\").\nfalse\n2> filelib:is_dir(\"/Users/wzj/Desktop\").\ntrue\n3> filelib:is_dir(\".\").\ntrue\n5> filelib:is_dir(\"..\").\ntrue\n\n\nlists:keyfind(Key, Nth, Tuplelist) -> Tuple | false\nSearches the list of tuples TupleList for a tuple whose Nth element compares equal to Key. Returns Tuple if such a tuple is found, otherwise false.\n\niolist_to_binary\u306e\u4f8b\n1> Bin1 = <<1,2,3>>.\n<<1,2,3>>\n2> Bin2 = <<4,5>>.\n<<4,5>>\n3> Bin3 = <<6>>.\n<<6>>\n4> B = iolist_to_binary([Bin1, 1, [2,3,Bin2], 4  | Bin3]).\n<<1,2,3,1,2,3,4,5,4,6>>\n5> B = iolist_to_binary([Bin1, 1, [2,3,Bin2], 4  | 9]).\n** exception error: bad argument\n     in function  iolist_to_binary/1\n        called as iolist_to_binary([<<1,2,3>>,1,[2,3,<<4,5>>],4|9])\n7> C = iolist_to_binary([Bin1, 1, [2,3,Bin2], 4  | <<9>>]).\n<<1,2,3,1,2,3,4,5,4,9>>\n\n\nlist_to_binary\u306e\u4f8b\n2> list_to_binary([\"abcdefg\", $h]).\n<<\"abcdefgh\">>\n3> list_to_binary([\"abcdefg\" | <<\"h\">>]).\n<<\"abcdefgh\">>\n4> list_to_binary([\"abcdefg\" | $h ]).\n** exception error: bad argument\n     in function  list_to_binary/1\n        called as list_to_binary([\"abcdefg\"|104])\n5> list_to_binary([\"abcdefg\" | <<66>> ]).\n<<\"abcdefgB\">>\n\n\nlist comprehension\u306e\u4e2d\u306b\u8907\u6570\u306e\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002begin\u3068end\u3092\u4f7f\u7528\n1> [begin erlang:display(N), N*10 end || N <- lists:seq(1,5)].\n1\n2\n3\n4\n5\n[10,20,30,40,50]\n\n\nErlang\u306erun time system\u306e\u4e2d\u306b\u3069\u3093\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u52d5\u3044\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u306b\u306f\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3059\u308b\n6> application:which_applications().\n[{rpn,\"Reverse Polish Notation\",\"1\"},\n {stdlib,\"ERTS  CXC 138 10\",\"2.1\"},\n {kernel,\"ERTS  CXC 138 10\",\"3.0.1\"}]\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u59cb\u3068\u505c\u6b62\u306fstart\u3068stop\u3067\u5236\u5fa1\u3059\u308b\napplication:start(ApplicationName).\napplication:stop(ApplicationName).\n1> application:start(rpn).\n{local,rpn_sup} (<0.37.0>) starting...\nok\n2> rpn_server:cal_rpn(\"2 3 4 5 6 sum\").\n20\n3> application:stop(rpn).\nok\n4>\n=INFO REPORT==== 30-Dec-2014::11:20:14 ===\n    application: rpn\n    exited: stopped\n    type: temporary\n\n4> rpn_server:cal_rpn(\"2 3 4 5 6 sum\").\n** exception exit: {noproc,\n                       {gen_server,call,\n                           [rpn_server,{cal_rpn,\"2 3 4 5 6 sum\"}]}}\n     in function  gen_server:call/2 (gen_server.erl, line 182)\n\n\nstring:to_lower(String) -> Result\n2> string:to_lower(\"STRING\").\n\"string\"\n3> string:to_lower(\"STRI\u3053\u3093\u306b\u3061\u306f\").\n[115,116,114,105,12371,12435,12395,12385,12399]\n\n\nlists:zip(List1, List2) -> List3\n\"Zips\" two lists of equal length into one list of two-tuples\n\u8fd4\u3059\u30ea\u30b9\u30c8\u306e\u4e2d\u306e\u8981\u7d20\u306ftuple\u3067\u3042\u308b\u3053\u3068\u3092\u6ce8\u610f\n2> lists:zip([1,2,3], [4,5,6]).\n[{1,4},{2,5},{3,6}]\n3> lists:zip([1,2,3], [4,5,6,7]).\n** exception error: no function clause matching lists:zip([],[7]) (lists.erl, line 385)\n     in function  lists:zip/2 (lists.erl, line 385)\n     in call from lists:zip/2 (lists.erl, line 385)\n\n\n\nmnesia:read({Tab, Key}) -> transaction abort | RecordList\nInvokes mnesia:read(Tab, Key, read).\n\u4e3b\u30ad\u30fc\u304cKey\u306b\u4e00\u81f4\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u8fd4\u3059\u3002ets:lookup/2\u3068\u540c\u69d8\u306b\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002\nset \u306e\u30c6\u30fc\u30d6\u30eb\u306e\u3088\u3046\u306b\u4e3b\u30ad\u30fc\u306b\u4e00\u81f4\u3059\u308b\u7d50\u679c\u304c\u7d76\u5bfe\u306b1\u3064\u3057\u304b\u306a\u3044\u3088\u3046\u306a\u30c6\u30fc\u30d6\u30eb\n\u3067\u3082\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002 \u30ec\u30b3\u30fc\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001\u7a7a\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n\u884c\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u8868\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8ID(OID)\u304c\u5fc5\u8981\u306b\u306a\u308b\uff0eOID\u306f\u30c6\u30fc\u30d6\u30eb\u540d\u3068\u4e3b\u30ad\u30fc\u306e\u5024\u3067\u69cb\u6210\u3055\u308c\u308b\uff0e\ndelete({Tab, Key}) -> transaction abort | ok\nInvokes mnesia:delete(Tab, Key, write)\nremove_shop_item(Item) ->\n    Oid = {shop, Item},\n    F = fun() ->\n        mnesia:delete(Oid)\n        end,\n    mnesia:transaction(F).\n\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\nadd_shop_item(Name, Quantity, Cost) ->\n    Row = #shop{item=Name, quantity=Quantity, cost=Cost},\n    F = fun() ->\n        mnesia:write(Row)\n    end,\n    mnesia:transaction(F).\n\n\u5b9f\u884c\n1> test_mnesia:do_this_once().\nstopped\n\n=INFO REPORT==== 25-Dec-2014::23:25:19 ===\n    application: mnesia\n    exited: stopped\n    type: temporary\n2>\n2> test_mnesia:start().\nok\n3> test_mnesia:reset_tables().\n{atomic,ok}\n4> test_mnesia:demo(select_shop).\n[{shop,potato,2456,1.2},\n {shop,apple,20,2.3},\n {shop,orange,100,3.8},\n {shop,pear,200,3.6},\n {shop,banana,420,4.5}]\n5> test_mnesia:add_shop_item(orange, 236, 2.8).\n{atomic,ok}\n6> test_mnesia:demo(select_shop).\n[{shop,potato,2456,1.2},\n {shop,apple,20,2.3},\n {shop,orange,236,2.8},\n {shop,pear,200,3.6},\n {shop,banana,420,4.5}]\n\n\nqlc:q()\u3067\u554f\u3044\u5408\u308f\u305b\u308b\u3068\u304d\u306b\u7c21\u5358\u306ejoin\u306e\u4f8b\u3092\u3057\u305f\u306e\u56f3\u3067\u793a\u3057\u3066\u3044\u308b\n\n\n\u6539\u3081\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u30c7\u30fc\u30bf\u3092mnesia\u306b\u66f8\u304d\u8fbc\u307f\u305f\u3044\u3068\u304d\u306b\u3001\u4e0b\u306e\u3084\u308a\u65b9\u3067\n start() ->\n     mnesia:start(),\n     mnesia:wait_for_tables([shop,cost], 20000).\n\n example_tables() ->\n     [%% The shop table\n      {shop, apple,   20,   2.3},\n      {shop, orange,  100,  3.8},\n      {shop, pear,    200,  3.6},\n      {shop, banana,  420,  4.5},\n      {shop, potato,  2456, 1.2},\n      %% The cost table\n      {cost, apple,   1.5},\n      {cost, orange,  2.4},\n      {cost, pear,    2.2},\n      {cost, banana,  1.5},\n      {cost, potato,  0.6}\n     ].\n\n reset_tables() ->\n     mnesia:clear_table(shop),\n     mnesia:clear_table(cost),\n     F = fun() ->\n         foreach(fun mnesia:write/1, example_tables())\n     end,\n     mnesia:transaction(F).\n\n\u5b9f\u884c\u3059\u308b\u3068\n1> test_mnesia:start().\nok\n2> test_mnesia:reset_tables().\n{atomic, ok}\n\nmnesia:transaction(Fun) -> {aborted, Reason} |{atomic, Value}. This function executes one transaction with the functional object Fun as the single parameter.\n\nmnesia\u3092\u4f7f\u3046\u524d\u306b\u4e00\u56de\u3084\u3063\u3066\u304a\u304f\u3053\u3068\u306f\u3042\u3063\u3066\u3001\n\u30b9\u30ad\u30fc\u30de\u3092\u4f5c\u3063\u3066\u304b\u3089mnesia\u3092\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u308b\n\u305d\u3057\u3066\u3001\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u3001mnesia\u3092\u30b9\u30c8\u30c3\u30d7\n\n\nmnesia:is_transaction() -> boolean\nWhen this function is executed inside a transaction context it returns true, otherwise false.\n\u4f8b\ntraverse_table_and_show(Table_name)->\n    Iterator =  fun(Rec,_)->\n                    io:format(\"~p~n\",[Rec]),\n                    []\n                end,\n    case mnesia:is_transaction() of\n        true -> mnesia:foldl(Iterator,[],Table_name);\n        false -> \n            Exec = fun({Fun,Tab}) -> mnesia:foldl(Fun, [],Tab) end,\n            mnesia:activity(transaction,Exec,[{Iterator,Table_name}],mnesia_frag)\n    end.\n\nmnesia:foldl(Function, Acc, Table) -> NewAcc | transaction abort \nIterates over the table Table and calls Function(Record, NewAcc) for each Record in the table. The term returned from Function will be used as the second argument in the next call to the Function.\nfoldl returns the same term as the last call to Function returned.\n\n\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u304b\u3089\uff0c\u66f8\u304d\u8fbc\u3080\n7> {ok, S} = file:open(\"/Users/wzj/testfile\", [write]).\n{ok,<0.40.0>}\n8> io:format(S, \"~s~n\", [\"Hello world from wang\"]).\nok\n9> io:format(S, \"~s~n\", [\"sorry for the delay\"]).\nok\n10> file:close(S).\nok\n\n\nmnesia:write(Record) -> transaction abort | ok \nwrite/1\u306fmnesia:write(Tab, Record, write)\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\n\nclear_table(Tab) -> {aborted, R} | {atomic, ok}\nclear_table\u306f\u30c6\u30fc\u30d6\u30eb\u306e\u3059\u3079\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u524a\u9664\u3059\u308b\n\nqlc\u306fMnesia\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4e00\u3064\u3067\u3042\u308b\uff0e\nqlc:q([X || X <- mnesia:table(shop) ])\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u306fshop\u3068\u3044\u3046Mnesia\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u3063\u3066\u6765\u305fX\u3092\u8981\u7d20\u3068\u3059\u308b\u30ea\u30b9\u30c8\uff0cX\u306e\u5024\u306fErlang\u306eshop\u30ec\u30b3\u30fc\u30c9\u306b\u306a\u308b\n\nmnesia\u306eqlc:q()\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u306b\u306f\u4e0b\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n-include_lib(\"stdlib/include/qlc.hrl\").\n\n\nA common mistake is to have a unique gen_server to handle queries from many processes. This generally becomes the biggest bottleneck you'll want to fix. You should try to avoid relying on a single process, using a pool if you can.\n\nDefining a Schema\nThe configuration of a Mnesia system is described in the schema. The schema is a special table which contains information such as the table names and each table's storage type, (i.e. whether a table should be stored in RAM, on disc or possibly on both, as well as its location).\nit is possible to move a table and simultaneously perform write operations to the same table. This feature is essential for applications that require continuous service.\n\nstring\u30e2\u30b8\u30e5\u30fc\u30eb\u306estr\u95a2\u6570\nstr(String, SubString) -> Index\nSubString\u304cString\u306e\u4e2d\u306b\u73fe\u308c\u308b\u6700\u521d\u306eIndex\u3092\u8fd4\u3059\nIndex\u304c1\u304b\u3089\u59cb\u307e\u308b\u3002\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f0\u3092\u8fd4\u3059\n1> string:str(\" Hello Hello World World \", \"Hello World\").\n8\n2> string:str(\" Hello Hello World World \", \"not exist\").\n0\n\n\nets:new(Name, Options) -> tid() | atom()\nOptions\u306e\u4e2d\u306b\u30a2\u30af\u30bb\u30b9\u6a29\u9650\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308bpublic\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u3063\u3066\n\u3059\u3079\u3066\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u3053\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3057\u3066\uff0cread\u3068write\u304c\u53ef\u80fd\n\n\nrecord_info(fields, Record) -> [Field]\ntest.erl\u3092\u4f5c\u6210\u3057\u3066\uff0crecord_info\u306e\u4f7f\u3044\u65b9\u3092\u30c6\u30b9\u30c8\u3059\u308b\n-module(test).\n-record(paint, {index, artist, title}).\n\n\u5b9f\u884c\u3059\u308b\n$ erlc test.erl\ntest.erl:2: Warning: record paint is unused\n$ erl\n1> rr(test).\n[paint]\n2> record_info(fields, paint).\n[index,artist,title]\n3> record_info(size, paint).\n4\n\n\ncreate_table(Name, TabDef) -> {atomic, ok} | {aborted, Reason}\nmnesia\u30e2\u30b8\u30e5\u30fc\u30eb\u306ecreate_table\u95a2\u6570\u304c\u6210\u529f\u3059\u308b\u3068{atomic, ok}\u304c\u623b\u308a\u5024\u3068\u3057\u3066\uff0c\u8fd4\u3055\u308c\u308b\n\u4e8c\u500b\u76ee\u306e\u5f15\u6570TabDef\u306f{Item, Value}\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u30ea\u30b9\u30c8.\n\u4f8b\n\n{disc_copies, Nodelist}, where Nodelist is a list of the nodes where this table is supposed to have disc copies. If a table replica is of type disc_copies, all write operations on this particular replica of the table are written to disc as well as to the RAM copy of the table.\n\nprocess_flag(Flag :: trap_exit, Boolean) -> OldBoolean\nWhen trap_exit is set to true, exit signals arriving to a process are converted to {'EXIT', From, Reason} messages, which can be received as ordinary messages.\n\nets:info(Tab) -> InfoList | undefined\n\u30c6\u30fc\u30d6\u30eb\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306bundefined\u304c\u8fd4\u3059\n56> ets:new(ingredients, [set, named_table]).\ningredients\n57> ets:info(ingredients).\n[{compressed,false},\n {memory,305},\n {owner,<0.93.0>},\n {heir,none},\n {name,ingredients},\n {size,0},\n {node,nonode@nohost},\n {named_table,true},\n {type,set},\n {keypos,1},\n {protection,protected}]\n58> ets:info(nonexist).\nundefined\n\n\nio:get_line(IoDevice, Prompt) -> Data | server_no_data()\n53> {ok, IoDevice} = file:open(\"event.erl\", [read]).\n{ok,<0.96.0>}\n54> io:get_line(IoDevice, \"\").\n\"-module(event).\\n\"\n55> io:get_line(IoDevice, \"\").\n\"-compile(export_all).\\n\"\n\n\nuniform/0\u95a2\u6570\u306f0.0~1.0\u7bc4\u56f2\u5185\u306e\u5c11\u6570\u3092\u8fd4\u3059\n26> random:uniform().\n0.989293905914232\n\nuniform(N) -> integer() >= 1\n1\u3088\u308a\u5927\u304d\u3044\u6574\u6570\u3092\u6e21\u3059\u30681~4\u7bc4\u56f2\u5185\u306e\u6574\u6570\u3092\u8fd4\u3059\n32> random:uniform(4).\n1\n33> random:uniform(4).\n4\n\n\nfile:open(File, Modes) -> {ok, IoDevice} | {error, Reason}\nfile:open/2\u95a2\u6570\u306f\u6210\u529f\u3059\u308b\u3068\u304d\u306b{ok, IoDevice}\u3092\u8fd4\u3057\u307e\u3059\u3002\u5931\u6557\u3059\u308b\u3068\u304d\u306b {error, Reason}\u3092\u8fd4\u3057\u307e\u3059\u3002\u4f8b\nfile:open(Fname, [read, raw, binary])\n\nfile:read(IoDevice, Number) -> {ok, Data} | eof | {error, Reason}\nfile:read/3\u95a2\u6570\u306e\u623b\u308a\u5024\u306f\u4e09\u3064\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308a\u307e\u3059\u3002{ok, Data}\u3001 eof \u3068 {error, Reason}\u3067\u3059\u3002\u4f8b\nfile:read(Fd, 1024)\n\n\nlists\u30e2\u30b8\u30e5\u30fc\u30eb\u306eflatmap/2\u306e\u52d5\u304d\u306f\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\nflatmap(Fun, List1) ->\n    append(map(Fun, List1)).\n\n\u4f8b\n4> lists:flatmap(fun(X) -> [X, X] end, [1,a, \"abc\"]).\n[1,1,a,a,\"abc\",\"abc\"]\n\n\nstring\u30e2\u30b8\u30e5\u30fc\u30eb\u306eto_float\u95a2\u6570\u3067\u6587\u5b57\u5217\u3092float\u306b\u5909\u66f4\u3059\u308b\u3068\u304d\u306b\u3001\u5931\u6557\u3059\u308b\u3068\n{error, Reason}\u304c\u8fd4\u3055\u308c\u308b\n\u3053\u306e\u95a2\u6570\u306e\u5f62\u3068\u3057\u3066\u306f\nto_float(String) -> {Float, Rest} | {error, Reason}\n13> {Float, Rest} = string:to_float(\"1.12e2X\").\n{112.0,\"X\"}\n14> f().\n16> {Float, Rest} = string:to_float(\"a+b\").\n{error,no_float}\n\n\u6700\u5f8c\u306eX\u304c\u5909\u63db\u3067\u304d\u306a\u3044\u306e\u3067\u3001Rest\u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u308b\n\nstring\u30e2\u30b8\u30e5\u30fc\u30eb\u306etokens/2\u95a2\u6570\ntokens(String, SeparatorList) -> Tokens\nString\u306b\u5bfe\u3057\u3066\u3001SeparatorList\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u6587\u5b57\u3067\u533a\u5207\u3089\u308c\u308b\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n4> string:tokens(\"abc defxxghix jkl\", \"x \").\n[\"abc\",\"def\",\"ghi\",\"jkl\"]\n5> string:tokens(\"10 4 3 + 2 * -\", \" \").\n[\"10\",\"4\",\"3\",\"+\",\"2\",\"*\",\"-\"]\n\n\ngen_server:handle_call(Request, From, State)\u95a2\u6570\u306fgen_server:call/2,3\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\uff0c\u51e6\u7406\u3092\u884c\u3046\u95a2\u6570\uff0e\nRequest = term()\nFrom = {pid(), Tag}\n\u623b\u308a\u5024\u3068\u3057\u3066\uff0c\n{reply,Reply,NewState} | {reply,Reply,NewState,Timeout}\u306a\u3069\u304c\u8fd4\u3055\u308c\u308b\uff0e\n\u4e0b\u306f\u4f8b\n\n\ngen_server:start_link/3,4\u304c\u547c\u3070\u308c\u308b\u3068\uff0cinit(Args)\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\uff0einit\u306e\u623b\u308a\u5024\u3068\u3057\u3066\uff0c{ok, State}, {ok, State, TimeOut}\u3042\u308b\u3044\u306f{ok, State, hibernate}\u304c\u8fd4\u3055\u308c\u308b\n\njoin(StringList, Separator) -> String\nReturns a string with the elements of StringList separated by the string in Separator.\n5> string:join([\"This\",\"is\",\"a\",\"string\",\"list\"], \", \").\n\"This, is, a, string, list\"\n\n\n\u30ed\u30fc\u30ab\u30ebnode\u306e\u4e2d\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u30d7\u30ed\u30bb\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u3066\u3001\u4e00\u500b\u4e00\u500b\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u3001\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n3> erlang:processes().\n[<0.0.0>,<0.3.0>,<0.6.0>,<0.7.0>,<0.9.0>,<0.10.0>,<0.11.0>,\n <0.12.0>,f<0.13.0>,<0.14.0>,<0.15.0>,<0.16.0>,<0.18.0>,\n <0.19.0>,<0.20.0>,<0.21.0>,<0.22.0>,<0.23.0>,<0.24.0>,\n <0.25.0>,<0.26.0>,<0.27.0>,<0.28.0>,<0.29.0>,<0.33.0>]\n4> erlang:process_info(pid(0,33,0)).\n[{current_function,{erl_eval,do_apply,6}},\n {initial_call,{erlang,apply,2}},\n {status,running},\n {message_queue_len,0},\n {messages,[]},\n {links,[<0.27.0>]},\n {dictionary,[]},\n {trap_exit,false},\n {error_handler,error_handler},\n {priority,normal},\n {group_leader,<0.26.0>},\n {total_heap_size,3196},\n {heap_size,1598},\n {stack_size,24},\n {reductions,49451},\n {garbage_collection,[{min_bin_vheap_size,46422},\n                      {min_heap_size,233},\n                      {fullsweep_after,65535},\n                      {minor_gcs,30}]},\n {suspending,[]}]\n5>\n\n\n\u30ea\u30b9\u30c8\u306e\u4e2d\u306b\u30e6\u30cb\u30fc\u30af\u306e\u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3059\u308b\n2> lists:usort([2,1,3,4,2,3,8,9,[a,c,q,m,x],a,v,c]).\n[1,2,3,4,8,9,a,c,v,[a,c,q,m,x]]\n\n\nConcatenates the text representation of the elements of Things. The elements of Things can be atoms, integers, floats or strings.\nconcat(Things) -> string()\n1> lists:concat([doc, '/', file, '.', 3]).\n\"doc/file.3\"\n\n\n\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u7d44\u307f\u7acb\u3066\u308b\n29> filename:join([\"/usr\", \"local\", \"bin\"]).\n\"/usr/local/bin\"\n\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u53d6\u5f97\u3059\u308b\n19> inet:getifaddrs().\n{ok,[{\"lo\",\n      [{flags,[up,loopback,running]},\n       {hwaddr,[0,0,0,0,0,0]},\n       {addr,{127,0,0,1}},\n       {netmask,{255,0,0,0}},\n       {addr,{0,0,0,0,0,0,0,1}},\n       {netmask,{65535,65535,65535,65535,65535,65535,65535,\n                 65535}}]},\n     {\"eth0\",\n      [{flags,[up,broadcast,running,multicast]},\n       {hwaddr,[10,150,197,9,125,48]},\n       {addr,{172,31,21,248}},\n       {netmask,{255,255,240,0}},\n       {broadaddr,{172,31,31,255}},\n       {addr,{65152,0,0,0,2198,50687,65033,32048}},\n       {netmask,{65535,65535,65535,65535,0,0,0,0}}]}]}\n\n\n'=:=' \u3068 '=='\u306e\u533a\u5225\n16> 1 =:= 1.0.\nfalse\n17> 1 == 1.0.\ntrue\n18> [65] =:= \"A\".\ntrue\n\n\nfolds\u95a2\u6570\nfoldl(Fun, Acc0, List) -> Acc1\n2> lists:foldl(fun(X, Sum) -> X+Sum end, 3, [2,4,6,8]).\n23\n\n\u5f8c\u308d\u306e\u30ea\u30b9\u30c8\u4e00\u500b\u4e00\u500b\u306e\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3001\u95a2\u6570\u3092\u9069\u5fdc\u3057\u3066\u884c\u304f\n2\u756a\u76ee\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f3\u3068\u3044\u3046\u521d\u671f\u306e\u30a2\u30ad\u30e5\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u6307\u5b9a\u3057\u3066\u3044\u308b\n\npriv_dir(Name)\u306flib_dir(Name, priv)\u3068\u4e00\u7dd2\u3067\u30e9\u30a4\u30d6\u30e9\u30eaName\u306epriv\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3059\n11> code:lib_dir(mnesia, priv).\n\"/usr/local/lib/erlang/lib/mnesia-4.12.1/priv\"\n12> code:priv_dir(mnesia).\n\"/usr/local/lib/erlang/lib/mnesia-4.12.1/priv\"\n13> code:priv_dir(eunit).\n\"/usr/local/lib/erlang/lib/eunit-2.2.7/priv\"\n14> code:priv_dir(kernel).\n\"/usr/local/lib/erlang/lib/kernel-3.0.1/priv\"\n\n\ntuple\u306e\u30b5\u30a4\u30ba\u306ftuple_size/1\u3067\u53d6\u5f97\u3059\u308b\nelement/2\u3067tuple\u306en\u500b\u76ee\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n3> Tuple1 = {number, 42}.\n{number,42}\n4> tuple_size(Tuple1).\n2\n5> element(1, Tuple1).\nnumber\n6> element(2, Tuple1).\n42\n7> setelement(2, Tuple1, 43).\n{number,43}\n8> Tuple1.\n{number,42}\n9> Tuple2 = setelement(2, Tuple1, 43).\n{number,43}\n10> Tuple2.\n{number,43}\n\n\nK1\u306e\u4e00\u500b\u4e00\u500b\u306etuple\u306b\u5bfe\u3057\u3066\u3001\nkeysearch()\u306e\u5834\u5408\u306f2\u500b\u76ee\u306e\u8981\u7d20\u306fk2\u3068\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u3066\u3044\u308c\u3070\u8fd4\u3059\u3002\n12> K1 = [{a, k1, a}, {b, k2, b}, {c, k3, c}, {e, k5, e}].\n[{a,k1,a},{b,k2,b},{c,k3,c},{e,k5,e}]\n13> lists:keysearch(k2, 2, K1).\n{value,{b,k2,b}}\n15> lists:keydelete(k3, 2, K1).\n[{a,k1,a},{b,k2,b},{e,k5,e}]\n16> lists:keyreplace(k1, 2, K1, {new, tuple}).\n[{new,tuple},{b,k2,b},{c,k3,c},{e,k5,e}]\n\n\nlists\u30e2\u30b8\u30e5\u30fc\u30eb\u306esplit/2\u95a2\u6570split(N, List1) -> {List2, List3}\nList1\u306e\u524dN\u500b\u3068\u6b8b\u308a\u306e\u8981\u7d20\u3001\u3053\u306e\u4e8c\u3064\u306e\u30ea\u30b9\u30c8\u3092tuple\u3068\u3057\u3066\u3001\u8fd4\u3059\n1> L = [\"This\",\"is\", \"a\", \"list\"].\n[\"This\",\"is\",\"a\",\"list\"]\n2> lists:split(3, L).\n{[\"This\",\"is\",\"a\"],[\"list\"]}\n\n\nfunction_exported/3\u95a2\u6570\u306e\u610f\u5473\u306fModule\u306f\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3001\u305d\u3057\u3066\u3001\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u6570Arity)\u3055\u308c\u3066\u3044\u308b\u95a2\u6570Fucntion\u304c\u3042\u308c\u3070\u3001true\u3092\u8fd4\u3057\u3066\u3001\u305d\u308c\u4ee5\u5916\u306ffalse\u3092\u8fd4\u3059\n    erlang:function_exported(Module, Function, Arity) -> bool()\n\n\ntimer\u30e2\u30b8\u30e5\u30fc\u30eb\u306esend_interval/3\u95a2\u6570\n    send_interval(Time, Pid, Message) -> {ok, TRef} | {error, Reason}\n\nTime\u6642\u9593\u904e\u304e\u308b\u3068\n    Pid ! Message\n\n\u3092\u5b9a\u671f\u7684\u306b\u5b9f\u884c\u3059\u308b\u3002send_interval/2\u306e\u5834\u5408\u306fsend_interval(Time, self(), Message).\u3068\u4e00\u7dd2\u3067\u3042\u308b\n\n\u4e00\u9031\u9593\u306e\u9593\u306e\u66dc\u65e5\u3092\u8abf\u3079\u308b\u306b\u306fcalendar\u30e2\u30b8\u30e5\u30fc\u30eb\u306eday_of_the_week()\u95a2\u6570\u3092\u4f7f\u3046\n1> calendar:day_of_the_week({2014,12,17}).\n3\n\n\nETS\u30c6\u30fc\u30d6\u30eb\u306ftuple\u3092\u4fdd\u5b58\u3059\u308b\u3002\u30c6\u30fc\u30d6\u30eb\u3092\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u308b\u305f\u3081\u306bets:new/2\u3092\u4f7f\u3046\n\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u4e2d\u306bset\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3067\u3001key\u306f\u91cd\u8907\u3057\u306a\u3044\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3046\ntuple\u306e\u4e00\u90e8\u3060\u3051\u3092\u8abf\u3079\u308b\u3068\u304d\u306blookup_element()\u95a2\u6570\u3092\u4f7f\u3046\n\u4e0b\u306e\u4f8b\u3060\u3068orange\u306fkey\u3067\u306f\u306a\u3044\u306e\u3067\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\n1> ets:new(ingredients, [set, named_table]).\n6> ets:insert(ingredients, {orange, good, nice, delicious}).\n7> ets:lookup_element(ingredients, orange, 2).\ngood\n8> ets:lookup_element(ingredients, orange, 3).\nnice\n9> ets:lookup_element(ingredients, orange, 4).\n12> ets:lookup_element(ingredients, orange, 1).\n** exception error: bad argument\n     in function  ets:lookup_element/3\n        called as ets:lookup_element(ingredients,good,1)\n\n\n\norddict:new()\u306f\u65b0\u3057\u3044Key-Value\u30da\u30a2\u306e\u8f9e\u66f8\u3092\u4f5c\u308b\norddict\u306e\u4f5c\u3089\u308c\u3066\u3044\u308b\u8f9e\u66f8\u306f\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3002\ndict\u3068\u540c\u3058\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\nstore(Key, Value, Orddict1) -> Orddict2\nfind(Key, Orddict) -> {ok, Value} | error\nfetch(Key, Orddict) -> Value\nerase(Key, Orddict1) -> Orddict2\nmap(Fun, Orddict1) -> Orddict2\n\n\nfetch\u306e\u5834\u5408\u306f\n\nreturns the value associated with Key in the dictionary Orddict. fetch assumes that the Key is present in the dictionary and an exception is generated if Key is not in the dictionary.\n\nfind\u306e\u5834\u5408\n\nThis function searches for a key in a dictionary. Returns {ok, Value} where Value is the value associated with Key, or error if the key is not present in the dictionary.\n\n\n\u65e5\u4ed8\u4e0d\u6cd5\u3067\u3042\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306bcalendar\u30e2\u30b8\u30e5\u30fc\u30eb\u306evalid_date()\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\nvalid_date(Date) -> boolean()\nDate = date()\nvalid_date(Year, Month, Day) -> boolean()\nYear = Month = Day = integer()\n11> calendar:valid_date(2014,2,28).\ntrue\n12> calendar:valid_date({2014,2,28}).\ntrue\n13> calendar:valid_date(2014,2,29).\nfalse\n14> calendar:valid_date({2014,2,29}).\nfalse\n\n\n\nclash\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u540c\u3058\u540d\u524d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u885d\u7a81\u3057\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n1> code:clash().\n** Found 0 name clashes in code paths\nok\n\n\ncode:lib_dir\u3092\u4f7f\u3063\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d1\u30b9\u3092\u63a2\u3059\n1> code:lib_dir(mnesia).\n\"/usr/local/lib/erlang/lib/mnesia-4.12.1\"\n2> code:lib_dir(eunit).\n\"/usr/local/lib/erlang/lib/eunit-2.2.7\"\n3> code:lib_dir(kernel).\n\"/usr/local/lib/erlang/lib/kernel-3.0.1\"\n4>\n\n-include_lib()\u3092\u4f7f\u3046\u3068\u304d\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082\u3088\u3044\n-include_lib(\"kernel/include/file.hrl\").\n-include_lib(\"eunit/include/eunit.hrl\").\n\n\nErlang\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\n5> erlang:system_info(otp_release).\n\"17\"\n\n\n\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u9023\u7d50\u3059\u308b\u65b9\u6cd5\n1> B1 = <<1,2>>.\n<<1,2>>\n2> B2 = <<3,4>>.\n<<3,4>>\n3> B3 = <<B1/binary, B2/binary>>.\n<<1,2,3,4>>\n\n\nErlang\u306breturn\u6587\u304c\u306a\u3044\u7406\u7531\n\u3000Erlang has no statements, it only has expressions. All expressions\n\u3000return a value. So there is no need for a \"return\" instruction, the last\n\u3000expression executed gives the return value of the function.\n\n\u6587\u5b57\u5217\u306f\u30c0\u30d6\u30eb\u30af\u30aa\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u56f2\u307e\u308c\u3066\u3001Erlang\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3067\u306f\u306a\u3044, \"hello\"\u306f\u305f\u3060\u306e\u30ea\u30b9\u30c8\u3067\u3042\u308b\u3001[\\$h,\\$e,\\$l,\\$l,\\$o]\u3001\u3064\u307e\u308a[104,101,108,108,111].\n> integer_to_list(123).  \n\"123\"\n> is_list(integer_to_list(323)).\ntrue\n\n\n\nErlang\u30b7\u30a7\u30eb\u306e\u4e2d\u306bcd\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u3001\u79fb\u52d5\u3059\u308b. pwd()\u306f\u73fe\u5728\u306e\u5834\u6240\u3092\u8abf\u3079\u308b\n2> cd(\"/etc\").\n/etc\nok\n3> pwd().\n/etc\nok\n\n\nCalling demonitor(MonitorRef, [flush]) is equivalent to the following, but more efficient:\ndemonitor(MonitorRef),\n    receive\n        {_, MonitorRef, _, _, _} ->\n            true\n    after 0 ->\n            true\n    end\n\n\nThis function returns the local time reported by the underlying operating system.\nlocal_time() \u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f\n\nlocal_time()-> datetime()\ndatetime()\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306f\u3057\u305f\u306e\u3088\u3046\u306b\ndatetime() = {date(), time()}\ndate() = {year(), month(), day()}\ntime() = {hour(), minute(), second()}\n\n1> calendar:local_time().\n{{2014,12,16},{11,22,27}}\n\n\n\n`handle_info/2`\n> If the gen_server should be able to receive other messages than requests, the callback function handle_info(Info, State) must be implemented to handle them. Examples of other messages are exit messages, if the gen_server is linked to other processes (than the supervisor) and trapping exit signals.\n\n```erlang\nhandle_info({'EXIT', Pid, Reason}, State) ->\n    ..code to handle exits here..\n    {noreply, State1}.\n```\n---\nio_lib:format, float_to_list\u3092\u4f7f\u3063\u3066\u5c0f\u6570\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n\n```erlang\n6> F = 5/3.\n1.6666666666666667\n7> io_lib:format(\"~.1f\", [F]).\n[\"1.7\"]\n8> io_lib:format(\"~.2f\", [F]).\n[\"1.67\"]\n9> io_lib:format(\"~.3f\", [F]).\n[\"1.667\"]\n10> F1 = 5/2.\n2.5\n11> io_lib:format(\"~.3f\", [F1]).\n[\"2.500\"]\n14> float_to_list(223.665, [{decimals, 0}]).\n\"224\"\n15> list_to_integer(float_to_list(223.665, [{decimals, 0}])).\n224\n16> float_to_list(223.665, [{decimals, 2}]).\n\"223.67\"\n17> float_to_list(5/2, [{decimals, 2}]).\n\"2.50\"\n18> list_to_integer(float_to_list(5/2, [{decimals, 0}])).\n3\n\n```\n\n----\n`mnesia:create_table(employee,[{disc_copies, [node()]}, {attributes, record_info(fields, employee)}])`\n\n\u30c6\u30fc\u30d6\u30eb\u306fdisc_copies\u3068\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u518d\u8d77\u52d5\u3059\u308b\u3068\u304d\u306b\u30c7\u30a3\u30b9\u30af\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3057\u305f\u3044\u3068\u304d\u306bwait_for_tables/2\u3092\u4f7f\u3044\u307e\u3059\uff0e\n\n```erlang\n$ erl -mnesia dir '\"./Mnesia.Company\"'\n4> mnesia:start()\n5> mnesia:wait_for_tables([employee, dept, project, manager, at_dep, in_proj], 5000).\n6> company:select_gender(male).\n```\n\n----\n`calendar:datetime_to_gregorian_seconds(DateTime) -> Seconds`\n> This function computes the number of gregorian seconds starting with year 0 and ending at the given date and time.\n\n```erlang\n3> calendar:datetime_to_gregorian_seconds({{2015, 2, 9}, {16,32, 12}}).\n63590718732\n\n4> calendar:datetime_to_gregorian_seconds({{2015, 2, 9}, {16,32, 14}}).\n63590718734\n\n11> calendar:datetime_to_gregorian_seconds({{0, 1, 1}, {0,0, 1}}).\n1\n\n12> calendar:datetime_to_gregorian_seconds({{0, 1, 1}, {0,1, 0}}).\n60\n\n13> calendar:datetime_to_gregorian_seconds({{0, 1, 1}, {1,0, 0}}).\n3600\n```\n\n\n\n--------\n`lists:subtract(List1, List2) -> List3`\n\n> lists:subtract(A, B) is equivalent to A -- B. Returns a new list List3 which is a copy of List1, subjected to the following procedure: for each element in List2, its first occurrence in List1 is deleted.\n\n```erlang\n1> lists:subtract(\"123212\", \"212\").\n\"312\"\n```\n---\ndict:fetch_keys\u306f\u8f9e\u66f8\u306e\u4e2d\u306e\u3059\u3079\u3066\u306ekey\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3059\n\n```erlang\n1> D = dict:from_list([{k1,v1}, {k2, v2}, {k3, v3}]).\n{dict,3,16,16,8,80,48,\n      {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},\n      {{[],\n        [[k1|v1]],\n        [[k2|v2]],\n        [[k3|v3]],\n        [],[],[],[],[],[],[],[],[],[],[],[]}}}\n3> L = dict:fetch_keys(D).\n[k1,k2,k3]\n4> L.\n[k1,k2,k3]\n```\n\n---\n`timer:sleep(Time|infinity) -> ok`\n> Suspends the process calling this function for Time amount of milliseconds and then returns ok, or suspend the process forever if Time is the atom infinity. Naturally, this function does not return immediately.\n\n---\n\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u306e\u65e5\u672c\u8a9e\u3092\u8aad\u307f\u51fa\u3059\n\n```erlang\n$ erl +pc unicode\n1>  {R, Data} = file:open(\"file\", [read, {encoding, utf8}]).\n{ok,<0.35.0>}\n2> io:get_line(Data, \"\").\n\"\u3053\u3093\u306b\u3061\u306f\\n\"\n3>\n```\n\n---\nstring:to_integer(String) -> {Int, Rest} | {error, Reason}\n> tuple\u3092\u8fd4\u3059\u3053\u3068\u306b\u6ce8\u610f\n\n```erlang\n3> {I1, Is} = string:to_integer(\"33+22\").\n{33,\"+22\"}\n4> {I2, I3} = string:to_integer(Is).\n{22,[]}\n5> f().\nok\n6> {I1, Is} = string:to_integer(\"33/22\").\n{33,\"/22\"}\n7> {I2, I3} = string:to_integer(Is).\n{error,no_integer}\n```\n\n----\nSub protocols are used for creating new types of handlers that provide extra functionality in a reusable way. Cowboy uses this mechanism to provide its loop, REST and Websocket handlers.\nTo switch to a sub protocol, the init/2 callback must return the name of the sub protocol module. Everything past this point is handled by the sub protocol.\n\n```erlang\ninit(Req, Opts) ->\n    {cowboy_websocket, Req, Opts}.\n```\n---\ndict:from_list(L)\n> Key-Value\u5f62\u306e\u30ea\u30b9\u30c8\u3092\u8f9e\u66f8\u306b\u5909\u63db\u3059\u308b\n\ndict:append(Key, Value, Dict1) -> Dict2\n\n```erlang\n1> L = [{keyA, \"A\"}, {keyB, \"B\"}, {keyC, \"C\"}].\n[{keyA,\"A\"},{keyB,\"B\"},{keyC,\"C\"}]\n\n3> D = dict:from_list(L).\n{dict,3,16,16,8,80,48,\n      {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},\n      {{[],\n        [[keyA,65]],\n        [[keyB,66]],\n        [[keyC,67]],\n        [],[],[],[],[],[],[],[],[],[],[],[]}}}\n\n4> D1 = dict:append(keyD, \"D\", D).\n{dict,4,16,16,8,80,48,\n      {[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]},\n      {{[],\n        [[keyA,65]],\n        [[keyB,66]],\n        [[keyC,67]],\n        [[keyD,\"D\"]],\n        [],[],[],[],[],[],[],[],[],[],[]}}}\n\n\n---\nHow to get N bits from binary\n> You'll need to use bitstring as the type as it will not be a multiple of 8 bits anymore (which the binary type requires). Rest is now 6 bits.\n\n```erlang\n23> <<B:2, Rest/bitstring>> = <<2#11000101>>.\n<<\"\u00c5\">>\n24> B.\n3\n25> Rest.\n<<5:6>>\n```\n\n---\n`binary:match(Subject, Pattern) -> Found | nomatch`\n> \u623b\u308a\u5024\u306b\u793a\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u7d50\u679c\u306eoffset\u306f0\u304b\u3089\u59cb\u307e\u308b\n\n```erlang\n6> binary:match(<<\"/etc/nginx/nginx.conf\">>, <<\"etc/\">>).\n{1,4}\n7> binary:match(<<\"/etc/nginx/nginx.conf\">>, <<\"etc//\">>).\nnomatch\n```\n----\n\n `e(-1)` \n> reexecute expression on previous line\n\n```erlang\n29> L = filename:split(\"local/bin\").\n[\"local\",\"bin\"]\n30> e(-1).\n[\"local\",\"bin\"]\n```\n\n---\n```erlang\n9> filename:split(\"/usr/local/bin\").\n[\"/\",\"usr\",\"local\",\"bin\"]\n\n10> filename:split(\"/usr/local/bin/\").\n[\"/\",\"usr\",\"local\",\"bin\"]\n\n11> filename:split(\"local/bin\").\n[\"local\",\"bin\"]\n\n12> filename:split(\"local/bin/\").\n[\"local\",\"bin\"]\n\n14> filename:split(\"local/bin/foo\").\n[\"local\",\"bin\",\"foo\"]\n```\n\n---\nfilename:absname(Filename)\n> Converts a relative Filename and returns an absolute name. No attempt is made to create the shortest absolute name,\nbecause this can give incorrect results on file systems which allow links.\n\n```erlang\n1> pwd().\n/home/ec2-user\nok\n\n2> filename:absname(\"foo\").\n\"/home/ec2-user/foo\"\n3> filename:absname(\"../X\").\n\"/home/ec2-user/../X\"\n4> filename:absname(\"/\").\n\"/\"\n\n5> cd(\"/etc\").\n/etc\nok\n6> filename:absname(\"foo\").\n\"/etc/foo\"\n\n7> X= <<\"foo\">>.\n<<\"foo\">>\n8> filename:absname(X).\n<<\"/etc/foo\">>\n```\n\n\n---\n```erlang\n19> base64:encode_to_string(\"wang zhijun\").\n\"d2FuZyB6aGlqdW4=\"\n20> base64:encode_to_string(ab).\n** exception error: no function clause matching\n                    base64:encode_to_string(ab) (base64.erl, line 46)\n\n21> base64:encode_to_string(<<\"wang zhijun\">>).\n\"d2FuZyB6aGlqdW4=\"\n\n23> base64:encode_to_string(crypto:rand_bytes(32)).\n\"h46fo7CSL4Q/94Ji7664Txpw++mgWsnZ2W9TR0tZdSc=\"\n```\n\n-------------\n```erlang\n8> lists:nth(5, [1,2,ab, \"mike\", <<\"binary\">>]).\n<<\"binary\">>\n9> lists:nth(0, [1,2,ab, \"mike\", <<\"binary\">>]).\n** exception error: no function clause matching\n                    lists:nth(0,[1,2,ab,\"mike\",<<\"binary\">>]) (lists.erl, line 168)\n\n10> lists:nthtail(0, [1,2,ab, \"mike\", <<\"binary\">>]).\n[1,2,ab,\"mike\",<<\"binary\">>]\n11> lists:nthtail(2, [1,2,ab, \"mike\", <<\"binary\">>]).\n[ab,\"mike\",<<\"binary\">>]\n12> lists:nthtail(5, [1,2,ab, \"mike\", <<\"binary\">>]).\n[]\n```\n\n\n----\n`crypto:rand_bytes(N).`\n> rand_bytes(N) -> binary()\nGenerates N bytes randomly uniform 0..255, and returns the result in a binary. Uses the crypto library pseudo-random number generator.\n\n```erlang\n6> crypto:rand_bytes(64).\n<<90,108,103,210,241,40,111,211,250,40,227,216,56,149,110,\n  182,219,237,182,157,194,81,207,85,121,56,224,201,18,...>>\n7> length(binary_to_list(crypto:rand_bytes(64))).\n64\n8>\n```\n\n----\n't' \n> is the Unicode translation modifier\n\n's' \n> Prints the argument with the string syntax. \nThe argument is, if no Unicode translation modifier \nis present, an iolist(), a binary(), or an atom(). \nIf the Unicode translation modifier (t) is in effect, \nthe argument is unicode:chardata(), meaning that binaries are in UTF-8. \n\n```erlang\n1> Bin = <<\"\u3053\u3093\u306b\u3061\u306f\"/utf8>>.\n<<227,129,147,227,130,147,227,129,171,227,129,161,227,129,\n  175>>\n2> lists:keyfind(encoding, 1, io:getopts()).\n{encoding,unicode}\n3> io:format(\"~ts~n\", [Bin]).\n\u3053\u3093\u306b\u3061\u306f\nok\n4>\n```\n\n---\nmnesia:delete_object(Record) -> transaction abort | ok\n\n```erlang\nDelete=#user{first_name = \"ryan\", _ = '_'},\nFun = fun() ->\n              List = mnesia:match_object(Delete)\n              lists:foreach(fun(X) ->\n                                    mnesia:delete_object(X)\n                            end, List)\n      end,\nmnesia:transaction(Fun).\n```\n \n---\nemployee\u30c6\u30fc\u30d6\u30eb\u306eEno\u30ec\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u3001\u8aad\u307f\u8fbc\u307f\u3092\u884c\u3063\u305f\u5f8c\u3001update\u3092\u884c\u3044\u305f\u3044\u5834\u5408\n mnesia:read/3\u306e\u4e09\u3064\u76ee\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306bwrite\u30ed\u30c3\u30af\u3092\u639b\u3051\u308b\n\n ```erlang\n raise(Eno, Raise) ->\n     F = fun() ->\n                 [E] = mnesia:read(employee, Eno, write),\n                 Salary = E#employee.salary + Raise,\n                 New = E#employee{salary = Salary},\n                 mnesia:write(New)\n         end,\n     mnesia:transaction(F).\n ```\n\n\n---\nmnesia:create_table\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067ram_copies\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u6700\u521d\u306b\u4f5c\u6210\u3055\u308c\u305fschema\u306fdisc_copies\n\n```erlang\n$ erl -mnesia dir '\"/tmp/funky\"'\n1> mnesia:create_schema([node()]).\nok\n2> mnesia:start().\nok\n4> mnesia:create_table(funky, []).\n{atomic,ok}\n5> mnesia:info().\n---> Processes holding locks <---\n---> Processes waiting for locks <---\n---> Participant transactions <---\n---> Coordinator transactions <---\n---> Uncertain transactions <---\n---> Active tables <---\nfunky          : with 0        records occupying 282      words of mem\nschema         : with 2        records occupying 506      words of mem\n===> System info in version \"4.12.1\", debug level = none <===\nopt_disc. Directory \"/tmp/funky\" is used.\nuse fallback at restart = false\nrunning db nodes   = [nonode@nohost]\nstopped db nodes   = []\nmaster node tables = []\nremote             = []\nram_copies         = [funky]\ndisc_copies        = [schema]\ndisc_only_copies   = []\n[{nonode@nohost,disc_copies}] = [schema]\n[{nonode@nohost,ram_copies}] = [funky]\n3 transactions committed, 0 aborted, 0 restarted, 2 logged to disc\n0 held locks, 0 in queue; 0 local transactions, 0 remote\n0 transactions waits for other nodes: []\nok\n\n```\n\n---\n**filelib:is_dir(Name) -> boolean()**\n> The is_dir/1 function returns true if Name refers to a directory, and false otherwise.\n\n```erlang\nAirBox:Desktop wzj$ erl\n1> filelib:is_dir(\"~/Desktop\").\nfalse\n2> filelib:is_dir(\"/Users/wzj/Desktop\").\ntrue\n3> filelib:is_dir(\".\").\ntrue\n5> filelib:is_dir(\"..\").\ntrue\n```\n---\n`lists:keyfind(Key, Nth, Tuplelist) -> Tuple | false`\nSearches the list of tuples TupleList for a tuple whose Nth element compares equal to Key. Returns Tuple if such a tuple is found, otherwise false.\n\n---\niolist_to_binary\u306e\u4f8b\n\n```erlang\n1> Bin1 = <<1,2,3>>.\n<<1,2,3>>\n2> Bin2 = <<4,5>>.\n<<4,5>>\n3> Bin3 = <<6>>.\n<<6>>\n4> B = iolist_to_binary([Bin1, 1, [2,3,Bin2], 4  | Bin3]).\n<<1,2,3,1,2,3,4,5,4,6>>\n5> B = iolist_to_binary([Bin1, 1, [2,3,Bin2], 4  | 9]).\n** exception error: bad argument\n     in function  iolist_to_binary/1\n        called as iolist_to_binary([<<1,2,3>>,1,[2,3,<<4,5>>],4|9])\n7> C = iolist_to_binary([Bin1, 1, [2,3,Bin2], 4  | <<9>>]).\n<<1,2,3,1,2,3,4,5,4,9>>\n```\n\n---\nlist_to_binary\u306e\u4f8b\n\n```erlang\n2> list_to_binary([\"abcdefg\", $h]).\n<<\"abcdefgh\">>\n3> list_to_binary([\"abcdefg\" | <<\"h\">>]).\n<<\"abcdefgh\">>\n4> list_to_binary([\"abcdefg\" | $h ]).\n** exception error: bad argument\n     in function  list_to_binary/1\n        called as list_to_binary([\"abcdefg\"|104])\n5> list_to_binary([\"abcdefg\" | <<66>> ]).\n<<\"abcdefgB\">>\n```\n\n---\nlist comprehension\u306e\u4e2d\u306b\u8907\u6570\u306e\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002begin\u3068end\u3092\u4f7f\u7528\n\n```erlang\n1> [begin erlang:display(N), N*10 end || N <- lists:seq(1,5)].\n1\n2\n3\n4\n5\n[10,20,30,40,50]\n```\n\n---\nErlang\u306erun time system\u306e\u4e2d\u306b\u3069\u3093\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u52d5\u3044\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u306b\u306f\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3059\u308b\n\n```erlang\n6> application:which_applications().\n[{rpn,\"Reverse Polish Notation\",\"1\"},\n {stdlib,\"ERTS  CXC 138 10\",\"2.1\"},\n {kernel,\"ERTS  CXC 138 10\",\"3.0.1\"}]\n```\n---\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u59cb\u3068\u505c\u6b62\u306fstart\u3068stop\u3067\u5236\u5fa1\u3059\u308b\n`application:start(ApplicationName).`\n`application:stop(ApplicationName).`\n\n```erlang\n1> application:start(rpn).\n{local,rpn_sup} (<0.37.0>) starting...\nok\n2> rpn_server:cal_rpn(\"2 3 4 5 6 sum\").\n20\n3> application:stop(rpn).\nok\n4>\n=INFO REPORT==== 30-Dec-2014::11:20:14 ===\n    application: rpn\n    exited: stopped\n    type: temporary\n\n4> rpn_server:cal_rpn(\"2 3 4 5 6 sum\").\n** exception exit: {noproc,\n                       {gen_server,call,\n                           [rpn_server,{cal_rpn,\"2 3 4 5 6 sum\"}]}}\n     in function  gen_server:call/2 (gen_server.erl, line 182)\n```\n---\nstring:to_lower(String) -> Result\n\n```erlang\n2> string:to_lower(\"STRING\").\n\"string\"\n3> string:to_lower(\"STRI\u3053\u3093\u306b\u3061\u306f\").\n[115,116,114,105,12371,12435,12395,12385,12399]\n```\n\n---\nlists:zip(List1, List2) -> List3\n\"Zips\" two lists of equal length into one list of two-tuples\n\u8fd4\u3059\u30ea\u30b9\u30c8\u306e\u4e2d\u306e\u8981\u7d20\u306ftuple\u3067\u3042\u308b\u3053\u3068\u3092\u6ce8\u610f\n\n```erlang\n2> lists:zip([1,2,3], [4,5,6]).\n[{1,4},{2,5},{3,6}]\n3> lists:zip([1,2,3], [4,5,6,7]).\n** exception error: no function clause matching lists:zip([],[7]) (lists.erl, line 385)\n     in function  lists:zip/2 (lists.erl, line 385)\n     in call from lists:zip/2 (lists.erl, line 385)\n\n```\n---\n**mnesia:read({Tab, Key}) -> transaction abort | RecordList**\nInvokes mnesia:read(Tab, Key, read).\n\u4e3b\u30ad\u30fc\u304cKey\u306b\u4e00\u81f4\u3059\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u8fd4\u3059\u3002ets:lookup/2\u3068\u540c\u69d8\u306b\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002\nset \u306e\u30c6\u30fc\u30d6\u30eb\u306e\u3088\u3046\u306b\u4e3b\u30ad\u30fc\u306b\u4e00\u81f4\u3059\u308b\u7d50\u679c\u304c\u7d76\u5bfe\u306b1\u3064\u3057\u304b\u306a\u3044\u3088\u3046\u306a\u30c6\u30fc\u30d6\u30eb\n\u3067\u3082\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002 \u30ec\u30b3\u30fc\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001\u7a7a\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u3055\u308c\u307e\u3059\u3002\n\n---\n\u884c\u3092\u524a\u9664\u3059\u308b\u306b\u306f\u8868\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8ID(OID)\u304c\u5fc5\u8981\u306b\u306a\u308b\uff0eOID\u306f\u30c6\u30fc\u30d6\u30eb\u540d\u3068\u4e3b\u30ad\u30fc\u306e\u5024\u3067\u69cb\u6210\u3055\u308c\u308b\uff0e\n\n**delete({Tab, Key}) -> transaction abort | ok**\n\nInvokes mnesia:delete(Tab, Key, write)\n\n```erlang\nremove_shop_item(Item) ->\n    Oid = {shop, Item},\n    F = fun() ->\n        mnesia:delete(Oid)\n        end,\n    mnesia:transaction(F).\n```\n\n---\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\n\n```erlang\nadd_shop_item(Name, Quantity, Cost) ->\n    Row = #shop{item=Name, quantity=Quantity, cost=Cost},\n    F = fun() ->\n        mnesia:write(Row)\n    end,\n    mnesia:transaction(F).\n```\n\u5b9f\u884c\n\n```erlang\n1> test_mnesia:do_this_once().\nstopped\n\n=INFO REPORT==== 25-Dec-2014::23:25:19 ===\n    application: mnesia\n    exited: stopped\n    type: temporary\n2>\n2> test_mnesia:start().\nok\n3> test_mnesia:reset_tables().\n{atomic,ok}\n4> test_mnesia:demo(select_shop).\n[{shop,potato,2456,1.2},\n {shop,apple,20,2.3},\n {shop,orange,100,3.8},\n {shop,pear,200,3.6},\n {shop,banana,420,4.5}]\n5> test_mnesia:add_shop_item(orange, 236, 2.8).\n{atomic,ok}\n6> test_mnesia:demo(select_shop).\n[{shop,potato,2456,1.2},\n {shop,apple,20,2.3},\n {shop,orange,236,2.8},\n {shop,pear,200,3.6},\n {shop,banana,420,4.5}]\n```\n\n---\nqlc:q()\u3067\u554f\u3044\u5408\u308f\u305b\u308b\u3068\u304d\u306b\u7c21\u5358\u306ejoin\u306e\u4f8b\u3092\u3057\u305f\u306e\u56f3\u3067\u793a\u3057\u3066\u3044\u308b\n\n![5.png](https://qiita-image-store.s3.amazonaws.com/0/54698/4eaf0d43-9b04-8711-b05c-a7f1fe7efcd9.png)\n\n----\n\u6539\u3081\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u30c7\u30fc\u30bf\u3092mnesia\u306b\u66f8\u304d\u8fbc\u307f\u305f\u3044\u3068\u304d\u306b\u3001\u4e0b\u306e\u3084\u308a\u65b9\u3067\n\n```erlang\n start() ->\n     mnesia:start(),\n     mnesia:wait_for_tables([shop,cost], 20000).\n\n example_tables() ->\n     [%% The shop table\n      {shop, apple,   20,   2.3},\n      {shop, orange,  100,  3.8},\n      {shop, pear,    200,  3.6},\n      {shop, banana,  420,  4.5},\n      {shop, potato,  2456, 1.2},\n      %% The cost table\n      {cost, apple,   1.5},\n      {cost, orange,  2.4},\n      {cost, pear,    2.2},\n      {cost, banana,  1.5},\n      {cost, potato,  0.6}\n     ].\n\n reset_tables() ->\n     mnesia:clear_table(shop),\n     mnesia:clear_table(cost),\n     F = fun() ->\n         foreach(fun mnesia:write/1, example_tables())\n     end,\n     mnesia:transaction(F).\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\n\n```erlang\n1> test_mnesia:start().\nok\n2> test_mnesia:reset_tables().\n{atomic, ok}\n```\n**mnesia:transaction(Fun) -> {aborted, Reason} |{atomic, Value}.** This function executes one transaction with the functional object Fun as the single parameter.\n\n---\nmnesia\u3092\u4f7f\u3046\u524d\u306b\u4e00\u56de\u3084\u3063\u3066\u304a\u304f\u3053\u3068\u306f\u3042\u3063\u3066\u3001\n\u30b9\u30ad\u30fc\u30de\u3092\u4f5c\u3063\u3066\u304b\u3089mnesia\u3092\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u308b\n\u305d\u3057\u3066\u3001\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u3001mnesia\u3092\u30b9\u30c8\u30c3\u30d7\n\n![4.png](https://qiita-image-store.s3.amazonaws.com/0/54698/89894c8c-6b56-0041-1b76-337684db97bd.png)\n\n\n\n---\n__mnesia:is_transaction() -> boolean__\n\nWhen this function is executed __inside a transaction context__ it returns **true**, otherwise false.\n\u4f8b\n\n```erlang\ntraverse_table_and_show(Table_name)->\n    Iterator =  fun(Rec,_)->\n                    io:format(\"~p~n\",[Rec]),\n                    []\n                end,\n    case mnesia:is_transaction() of\n        true -> mnesia:foldl(Iterator,[],Table_name);\n        false -> \n            Exec = fun({Fun,Tab}) -> mnesia:foldl(Fun, [],Tab) end,\n            mnesia:activity(transaction,Exec,[{Iterator,Table_name}],mnesia_frag)\n    end.\n```\n\nmnesia:foldl(Function, Acc, Table) -> NewAcc | transaction abort \nIterates over the table Table and calls Function(Record, NewAcc) for each Record in the table. The term returned from Function will be used as the second argument in the next call to the Function.\n\n__foldl returns the same term as the last call to Function returned.__\n\n----\n\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u304b\u3089\uff0c\u66f8\u304d\u8fbc\u3080\n\n```erlang\n7> {ok, S} = file:open(\"/Users/wzj/testfile\", [write]).\n{ok,<0.40.0>}\n8> io:format(S, \"~s~n\", [\"Hello world from wang\"]).\nok\n9> io:format(S, \"~s~n\", [\"sorry for the delay\"]).\nok\n10> file:close(S).\nok\n```\n\n\n---\nmnesia:write(Record) -> transaction abort | ok \n\nwrite/1\u306fmnesia:write(Tab, Record, write)\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\n\n![Screen Shot 2014-12-22 at 1.12.09 PM.png](https://qiita-image-store.s3.amazonaws.com/0/54698/467c5c0b-349c-fd81-4835-9d3a2e6f7e82.png)\n\nclear_table(Tab) -> {aborted, R} | {atomic, ok}\nclear_table\u306f\u30c6\u30fc\u30d6\u30eb\u306e\u3059\u3079\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u524a\u9664\u3059\u308b\n\n---\nqlc\u306fMnesia\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u4f7f\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4e00\u3064\u3067\u3042\u308b\uff0e\n\n```erlang\nqlc:q([X || X <- mnesia:table(shop) ])\n```\n\u4e0a\u306e\u30b3\u30fc\u30c9\u306fshop\u3068\u3044\u3046Mnesia\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u3063\u3066\u6765\u305fX\u3092\u8981\u7d20\u3068\u3059\u308b\u30ea\u30b9\u30c8\uff0cX\u306e\u5024\u306fErlang\u306eshop\u30ec\u30b3\u30fc\u30c9\u306b\u306a\u308b\n\n\n---\nmnesia\u306eqlc:q()\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u306b\u306f\u4e0b\u306e\u30d8\u30c3\u30c0\u30fc\u30d5\u30a1\u30a4\u30eb\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n```erlang\n-include_lib(\"stdlib/include/qlc.hrl\").\n```\n---\nA common mistake is to have a unique gen_server to handle queries from many processes. This generally becomes the biggest bottleneck you'll want to fix. You should try to avoid relying on a single process, using a pool if you can.\n\n---\n**Defining a Schema**\nThe configuration of a Mnesia system is described in the schema. The schema is a **special table** which contains information such as the table names and each table's storage type, (i.e. whether a table should be stored in RAM, on disc or possibly on both, as well as its location).\n\nit is possible to move a table and simultaneously perform write operations to the same table. This feature is essential for applications that require continuous service.\n\n---\nstring\u30e2\u30b8\u30e5\u30fc\u30eb\u306estr\u95a2\u6570\nstr(String, SubString) -> Index\nSubString\u304cString\u306e\u4e2d\u306b\u73fe\u308c\u308b\u6700\u521d\u306eIndex\u3092\u8fd4\u3059\nIndex\u304c1\u304b\u3089\u59cb\u307e\u308b\u3002\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f0\u3092\u8fd4\u3059\n\n```erlang\n1> string:str(\" Hello Hello World World \", \"Hello World\").\n8\n2> string:str(\" Hello Hello World World \", \"not exist\").\n0\n```\n\n----\nets:new(Name, Options) -> tid() | atom()\nOptions\u306e\u4e2d\u306b\u30a2\u30af\u30bb\u30b9\u6a29\u9650\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308bpublic\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u3063\u3066\n\u3059\u3079\u3066\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u3053\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3057\u3066\uff0cread\u3068write\u304c\u53ef\u80fd\n\n![Screen Shot 2014-12-21 at 12.46.24 PM.png](https://qiita-image-store.s3.amazonaws.com/0/54698/5fa10d77-eb96-9b57-ba5d-56573c76dbb2.png)\n\n\n---\nrecord_info(fields, Record) -> [Field]\ntest.erl\u3092\u4f5c\u6210\u3057\u3066\uff0crecord_info\u306e\u4f7f\u3044\u65b9\u3092\u30c6\u30b9\u30c8\u3059\u308b\n\n```erlang\n-module(test).\n-record(paint, {index, artist, title}).\n```\n\u5b9f\u884c\u3059\u308b\n\n```erl\n$ erlc test.erl\ntest.erl:2: Warning: record paint is unused\n$ erl\n1> rr(test).\n[paint]\n2> record_info(fields, paint).\n[index,artist,title]\n3> record_info(size, paint).\n4\n```\n\n---\ncreate_table(Name, TabDef) -> {atomic, ok} | {aborted, Reason}\nmnesia\u30e2\u30b8\u30e5\u30fc\u30eb\u306ecreate_table\u95a2\u6570\u304c\u6210\u529f\u3059\u308b\u3068{atomic, ok}\u304c\u623b\u308a\u5024\u3068\u3057\u3066\uff0c\u8fd4\u3055\u308c\u308b\n\u4e8c\u500b\u76ee\u306e\u5f15\u6570TabDef\u306f{Item, Value}\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u30ea\u30b9\u30c8.\n[\u4f8b](https://github.com/ColdFreak/Web-Programming/blob/master/Erlang/art.erl)\n\n![Screen Shot 2014-12-21 at 11.47.56 AM.png](https://qiita-image-store.s3.amazonaws.com/0/54698/4d864cd4-e1e0-7a2f-e959-eb5156f5edea.png)\n\n{disc_copies, Nodelist}, where Nodelist is a list of the nodes where this table is supposed to have disc copies. If a table replica is of type disc_copies, all write operations on this particular replica of the table are written to disc as well as to the RAM copy of the table.\n\n----\nprocess_flag(Flag :: trap_exit, Boolean) -> OldBoolean\nWhen trap_exit is set to **true**, exit signals arriving to a process are **converted to {'EXIT', From, Reason} messages**, which can be received as ordinary messages.\n\n---\nets:info(Tab) -> InfoList | undefined\n\u30c6\u30fc\u30d6\u30eb\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306bundefined\u304c\u8fd4\u3059\n\n```erlang\n56> ets:new(ingredients, [set, named_table]).\ningredients\n57> ets:info(ingredients).\n[{compressed,false},\n {memory,305},\n {owner,<0.93.0>},\n {heir,none},\n {name,ingredients},\n {size,0},\n {node,nonode@nohost},\n {named_table,true},\n {type,set},\n {keypos,1},\n {protection,protected}]\n58> ets:info(nonexist).\nundefined\n```\n\n---\nio:get_line(IoDevice, Prompt) -> Data | server_no_data()\n\n```erlang\n53> {ok, IoDevice} = file:open(\"event.erl\", [read]).\n{ok,<0.96.0>}\n54> io:get_line(IoDevice, \"\").\n\"-module(event).\\n\"\n55> io:get_line(IoDevice, \"\").\n\"-compile(export_all).\\n\"\n```\n---\nuniform/0\u95a2\u6570\u306f0.0~1.0\u7bc4\u56f2\u5185\u306e\u5c11\u6570\u3092\u8fd4\u3059\n\n```erlang\n26> random:uniform().\n0.989293905914232\n```\n\nuniform(N) -> integer() >= 1\n1\u3088\u308a\u5927\u304d\u3044\u6574\u6570\u3092\u6e21\u3059\u30681~4\u7bc4\u56f2\u5185\u306e\u6574\u6570\u3092\u8fd4\u3059\n\n```erlang\n32> random:uniform(4).\n1\n33> random:uniform(4).\n4\n```\n\n---\nfile:open(File, Modes) -> {ok, IoDevice} | {error, Reason}\nfile:open/2\u95a2\u6570\u306f\u6210\u529f\u3059\u308b\u3068\u304d\u306b{ok, IoDevice}\u3092\u8fd4\u3057\u307e\u3059\u3002\u5931\u6557\u3059\u308b\u3068\u304d\u306b {error, Reason}\u3092\u8fd4\u3057\u307e\u3059\u3002\u4f8b\n\n```erlang\nfile:open(Fname, [read, raw, binary])\n```\n\nfile:read(IoDevice, Number) -> {ok, Data} | eof | {error, Reason}\nfile:read/3\u95a2\u6570\u306e\u623b\u308a\u5024\u306f\u4e09\u3064\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308a\u307e\u3059\u3002{ok, Data}\u3001 eof \u3068 {error, Reason}\u3067\u3059\u3002\u4f8b\n\n```erlang\nfile:read(Fd, 1024)\n```\n\n---\nlists\u30e2\u30b8\u30e5\u30fc\u30eb\u306eflatmap/2\u306e\u52d5\u304d\u306f\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\n\n```erlang\nflatmap(Fun, List1) ->\n    append(map(Fun, List1)).\n```\n\u4f8b\n\n```erlang\n4> lists:flatmap(fun(X) -> [X, X] end, [1,a, \"abc\"]).\n[1,1,a,a,\"abc\",\"abc\"]\n```\n---\n\nstring\u30e2\u30b8\u30e5\u30fc\u30eb\u306eto_float\u95a2\u6570\u3067\u6587\u5b57\u5217\u3092float\u306b\u5909\u66f4\u3059\u308b\u3068\u304d\u306b\u3001\u5931\u6557\u3059\u308b\u3068\n{error, Reason}\u304c\u8fd4\u3055\u308c\u308b\n\u3053\u306e\u95a2\u6570\u306e\u5f62\u3068\u3057\u3066\u306f\n\nto_float(String) -> {Float, Rest} | {error, Reason}\n\n```erlang\n13> {Float, Rest} = string:to_float(\"1.12e2X\").\n{112.0,\"X\"}\n14> f().\n16> {Float, Rest} = string:to_float(\"a+b\").\n{error,no_float}\n```\n\u6700\u5f8c\u306eX\u304c\u5909\u63db\u3067\u304d\u306a\u3044\u306e\u3067\u3001Rest\u3068\u3057\u3066\u4fdd\u5b58\u3055\u308c\u308b\n\n----\nstring\u30e2\u30b8\u30e5\u30fc\u30eb\u306etokens/2\u95a2\u6570\ntokens(String, SeparatorList) -> Tokens\n\nString\u306b\u5bfe\u3057\u3066\u3001SeparatorList\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u6587\u5b57\u3067\u533a\u5207\u3089\u308c\u308b\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n```erlang\n4> string:tokens(\"abc defxxghix jkl\", \"x \").\n[\"abc\",\"def\",\"ghi\",\"jkl\"]\n5> string:tokens(\"10 4 3 + 2 * -\", \" \").\n[\"10\",\"4\",\"3\",\"+\",\"2\",\"*\",\"-\"]\n```\n\n---\ngen_server:handle_call(Request, From, State)\u95a2\u6570\u306fgen_server:call/2,3\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\uff0c\u51e6\u7406\u3092\u884c\u3046\u95a2\u6570\uff0e\nRequest = term()\nFrom = {pid(), Tag}\n\u623b\u308a\u5024\u3068\u3057\u3066\uff0c\n{reply,Reply,NewState} | {reply,Reply,NewState,Timeout}\u306a\u3069\u304c\u8fd4\u3055\u308c\u308b\uff0e\n\u4e0b\u306f\u4f8b\n\n![Screen Shot 2014-12-20 at 1.54.45 PM.png](https://qiita-image-store.s3.amazonaws.com/0/54698/51db67ae-714d-9819-5365-b44f8e0f9fbf.png)\n\n---\ngen_server:start_link/3,4\u304c\u547c\u3070\u308c\u308b\u3068\uff0cinit(Args)\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\uff0einit\u306e\u623b\u308a\u5024\u3068\u3057\u3066\uff0c{ok, State}, {ok, State, TimeOut}\u3042\u308b\u3044\u306f{ok, State, hibernate}\u304c\u8fd4\u3055\u308c\u308b\n\n---\njoin(StringList, Separator) -> String\nReturns a string with the elements of StringList separated by the string in Separator.\n\n```erlang\n5> string:join([\"This\",\"is\",\"a\",\"string\",\"list\"], \", \").\n\"This, is, a, string, list\"\n```\n\n---\n\u30ed\u30fc\u30ab\u30ebnode\u306e\u4e2d\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u30d7\u30ed\u30bb\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u3066\u3001\u4e00\u500b\u4e00\u500b\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u3001\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\n```erlang\n3> erlang:processes().\n[<0.0.0>,<0.3.0>,<0.6.0>,<0.7.0>,<0.9.0>,<0.10.0>,<0.11.0>,\n <0.12.0>,f<0.13.0>,<0.14.0>,<0.15.0>,<0.16.0>,<0.18.0>,\n <0.19.0>,<0.20.0>,<0.21.0>,<0.22.0>,<0.23.0>,<0.24.0>,\n <0.25.0>,<0.26.0>,<0.27.0>,<0.28.0>,<0.29.0>,<0.33.0>]\n4> erlang:process_info(pid(0,33,0)).\n[{current_function,{erl_eval,do_apply,6}},\n {initial_call,{erlang,apply,2}},\n {status,running},\n {message_queue_len,0},\n {messages,[]},\n {links,[<0.27.0>]},\n {dictionary,[]},\n {trap_exit,false},\n {error_handler,error_handler},\n {priority,normal},\n {group_leader,<0.26.0>},\n {total_heap_size,3196},\n {heap_size,1598},\n {stack_size,24},\n {reductions,49451},\n {garbage_collection,[{min_bin_vheap_size,46422},\n                      {min_heap_size,233},\n                      {fullsweep_after,65535},\n                      {minor_gcs,30}]},\n {suspending,[]}]\n5>\n```\n----\n\u30ea\u30b9\u30c8\u306e\u4e2d\u306b\u30e6\u30cb\u30fc\u30af\u306e\u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3059\u308b\n\n```erlang\n2> lists:usort([2,1,3,4,2,3,8,9,[a,c,q,m,x],a,v,c]).\n[1,2,3,4,8,9,a,c,v,[a,c,q,m,x]]\n```\n\n\n----\nConcatenates the text representation of the elements of Things. The elements of Things can be atoms, integers, floats or strings.\nconcat(Things) -> string()\n\n```erlang\n1> lists:concat([doc, '/', file, '.', 3]).\n\"doc/file.3\"\n```\n---\n\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u7d44\u307f\u7acb\u3066\u308b\n\n```erlang\n29> filename:join([\"/usr\", \"local\", \"bin\"]).\n\"/usr/local/bin\"\n```\n\n---\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u53d6\u5f97\u3059\u308b\n\n```erlang\n19> inet:getifaddrs().\n{ok,[{\"lo\",\n      [{flags,[up,loopback,running]},\n       {hwaddr,[0,0,0,0,0,0]},\n       {addr,{127,0,0,1}},\n       {netmask,{255,0,0,0}},\n       {addr,{0,0,0,0,0,0,0,1}},\n       {netmask,{65535,65535,65535,65535,65535,65535,65535,\n                 65535}}]},\n     {\"eth0\",\n      [{flags,[up,broadcast,running,multicast]},\n       {hwaddr,[10,150,197,9,125,48]},\n       {addr,{172,31,21,248}},\n       {netmask,{255,255,240,0}},\n       {broadaddr,{172,31,31,255}},\n       {addr,{65152,0,0,0,2198,50687,65033,32048}},\n       {netmask,{65535,65535,65535,65535,0,0,0,0}}]}]}\n```\n\n---\n'=:=' \u3068 '=='\u306e\u533a\u5225\n\n```erlang\n16> 1 =:= 1.0.\nfalse\n17> 1 == 1.0.\ntrue\n18> [65] =:= \"A\".\ntrue\n```\n\n---\nfolds\u95a2\u6570\nfoldl(Fun, Acc0, List) -> Acc1\n\n```erlang\n2> lists:foldl(fun(X, Sum) -> X+Sum end, 3, [2,4,6,8]).\n23\n```\n\u5f8c\u308d\u306e\u30ea\u30b9\u30c8\u4e00\u500b\u4e00\u500b\u306e\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3001\u95a2\u6570\u3092\u9069\u5fdc\u3057\u3066\u884c\u304f\n2\u756a\u76ee\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f3\u3068\u3044\u3046\u521d\u671f\u306e\u30a2\u30ad\u30e5\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u6307\u5b9a\u3057\u3066\u3044\u308b\n\n---\npriv_dir(Name)\u306flib_dir(Name, priv)\u3068\u4e00\u7dd2\u3067\u30e9\u30a4\u30d6\u30e9\u30eaName\u306epriv\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8fd4\u3059\n\n```erlang\n11> code:lib_dir(mnesia, priv).\n\"/usr/local/lib/erlang/lib/mnesia-4.12.1/priv\"\n12> code:priv_dir(mnesia).\n\"/usr/local/lib/erlang/lib/mnesia-4.12.1/priv\"\n13> code:priv_dir(eunit).\n\"/usr/local/lib/erlang/lib/eunit-2.2.7/priv\"\n14> code:priv_dir(kernel).\n\"/usr/local/lib/erlang/lib/kernel-3.0.1/priv\"\n```\n\n---\ntuple\u306e\u30b5\u30a4\u30ba\u306ftuple_size/1\u3067\u53d6\u5f97\u3059\u308b\nelement/2\u3067tuple\u306en\u500b\u76ee\u306e\u8981\u7d20\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n```erlang\n3> Tuple1 = {number, 42}.\n{number,42}\n4> tuple_size(Tuple1).\n2\n5> element(1, Tuple1).\nnumber\n6> element(2, Tuple1).\n42\n7> setelement(2, Tuple1, 43).\n{number,43}\n8> Tuple1.\n{number,42}\n9> Tuple2 = setelement(2, Tuple1, 43).\n{number,43}\n10> Tuple2.\n{number,43}\n```\n\n---\nK1\u306e\u4e00\u500b\u4e00\u500b\u306etuple\u306b\u5bfe\u3057\u3066\u3001\nkeysearch()\u306e\u5834\u5408\u306f2\u500b\u76ee\u306e\u8981\u7d20\u306fk2\u3068\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u3066\u3044\u308c\u3070\u8fd4\u3059\u3002\n\n```erlang\n12> K1 = [{a, k1, a}, {b, k2, b}, {c, k3, c}, {e, k5, e}].\n[{a,k1,a},{b,k2,b},{c,k3,c},{e,k5,e}]\n13> lists:keysearch(k2, 2, K1).\n{value,{b,k2,b}}\n15> lists:keydelete(k3, 2, K1).\n[{a,k1,a},{b,k2,b},{e,k5,e}]\n16> lists:keyreplace(k1, 2, K1, {new, tuple}).\n[{new,tuple},{b,k2,b},{c,k3,c},{e,k5,e}]\n```\n\n----\nlists\u30e2\u30b8\u30e5\u30fc\u30eb\u306esplit/2\u95a2\u6570split(N, List1) -> {List2, List3}\nList1\u306e\u524dN\u500b\u3068\u6b8b\u308a\u306e\u8981\u7d20\u3001\u3053\u306e\u4e8c\u3064\u306e\u30ea\u30b9\u30c8\u3092tuple\u3068\u3057\u3066\u3001\u8fd4\u3059\n\n```erlang\n1> L = [\"This\",\"is\", \"a\", \"list\"].\n[\"This\",\"is\",\"a\",\"list\"]\n2> lists:split(3, L).\n{[\"This\",\"is\",\"a\"],[\"list\"]}\n```\n\n---\nfunction_exported/3\u95a2\u6570\u306e\u610f\u5473\u306fModule\u306f\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3001\u305d\u3057\u3066\u3001\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u6570Arity)\u3055\u308c\u3066\u3044\u308b\u95a2\u6570Fucntion\u304c\u3042\u308c\u3070\u3001true\u3092\u8fd4\u3057\u3066\u3001\u305d\u308c\u4ee5\u5916\u306ffalse\u3092\u8fd4\u3059\n        \n        erlang:function_exported(Module, Function, Arity) -> bool()\n----\ntimer\u30e2\u30b8\u30e5\u30fc\u30eb\u306esend_interval/3\u95a2\u6570\n\n        send_interval(Time, Pid, Message) -> {ok, TRef} | {error, Reason}\n\nTime\u6642\u9593\u904e\u304e\u308b\u3068\n\n        Pid ! Message\n\n\u3092\u5b9a\u671f\u7684\u306b\u5b9f\u884c\u3059\u308b\u3002send_interval/2\u306e\u5834\u5408\u306fsend_interval(Time, self(), Message).\u3068\u4e00\u7dd2\u3067\u3042\u308b\n\n---\n\u4e00\u9031\u9593\u306e\u9593\u306e\u66dc\u65e5\u3092\u8abf\u3079\u308b\u306b\u306fcalendar\u30e2\u30b8\u30e5\u30fc\u30eb\u306eday_of_the_week()\u95a2\u6570\u3092\u4f7f\u3046\n\n```erlang\n1> calendar:day_of_the_week({2014,12,17}).\n3\n```\n\n----\nETS\u30c6\u30fc\u30d6\u30eb\u306ftuple\u3092\u4fdd\u5b58\u3059\u308b\u3002\u30c6\u30fc\u30d6\u30eb\u3092\u30b9\u30bf\u30fc\u30c8\u3055\u305b\u308b\u305f\u3081\u306bets:new/2\u3092\u4f7f\u3046\n\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u4e2d\u306bset\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3067\u3001key\u306f\u91cd\u8907\u3057\u306a\u3044\u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3046\ntuple\u306e\u4e00\u90e8\u3060\u3051\u3092\u8abf\u3079\u308b\u3068\u304d\u306blookup_element()\u95a2\u6570\u3092\u4f7f\u3046\n\u4e0b\u306e\u4f8b\u3060\u3068orange\u306fkey\u3067\u306f\u306a\u3044\u306e\u3067\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\n\n```erlang\n1> ets:new(ingredients, [set, named_table]).\n6> ets:insert(ingredients, {orange, good, nice, delicious}).\n7> ets:lookup_element(ingredients, orange, 2).\ngood\n8> ets:lookup_element(ingredients, orange, 3).\nnice\n9> ets:lookup_element(ingredients, orange, 4).\n12> ets:lookup_element(ingredients, orange, 1).\n** exception error: bad argument\n     in function  ets:lookup_element/3\n        called as ets:lookup_element(ingredients,good,1)\n\n```   \n\n\n---\norddict:new()\u306f\u65b0\u3057\u3044Key-Value\u30da\u30a2\u306e\u8f9e\u66f8\u3092\u4f5c\u308b\norddict\u306e\u4f5c\u3089\u308c\u3066\u3044\u308b\u8f9e\u66f8\u306f\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3002\ndict\u3068\u540c\u3058\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\n\n```erlang\nstore(Key, Value, Orddict1) -> Orddict2\nfind(Key, Orddict) -> {ok, Value} | error\nfetch(Key, Orddict) -> Value\nerase(Key, Orddict1) -> Orddict2\nmap(Fun, Orddict1) -> Orddict2\n\n```\nfetch\u306e\u5834\u5408\u306f\n\n> returns the value associated with Key in the dictionary Orddict. fetch assumes that the Key is present in the dictionary and an exception is generated if Key is not in the dictionary.\n\nfind\u306e\u5834\u5408\n\n> This function searches for a key in a dictionary. Returns {ok, Value} where Value is the value associated with Key, or error if the key is not present in the dictionary.\n\n----\n\u65e5\u4ed8\u4e0d\u6cd5\u3067\u3042\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306bcalendar\u30e2\u30b8\u30e5\u30fc\u30eb\u306evalid_date()\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\n\nvalid_date(Date) -> boolean()\nDate = date()\n\nvalid_date(Year, Month, Day) -> boolean()\nYear = Month = Day = integer()\n\n```erlang\n11> calendar:valid_date(2014,2,28).\ntrue\n12> calendar:valid_date({2014,2,28}).\ntrue\n13> calendar:valid_date(2014,2,29).\nfalse\n14> calendar:valid_date({2014,2,29}).\nfalse\n\n```\n\n----\n[clash](http://erldocs.com/17.3/kernel/code.html#clash/0)\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3001\u540c\u3058\u540d\u524d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u885d\u7a81\u3057\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n```erlang\n1> code:clash().\n** Found 0 name clashes in code paths\nok\n```\n\n---\ncode:lib_dir\u3092\u4f7f\u3063\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d1\u30b9\u3092\u63a2\u3059\n\n```erlang\n1> code:lib_dir(mnesia).\n\"/usr/local/lib/erlang/lib/mnesia-4.12.1\"\n2> code:lib_dir(eunit).\n\"/usr/local/lib/erlang/lib/eunit-2.2.7\"\n3> code:lib_dir(kernel).\n\"/usr/local/lib/erlang/lib/kernel-3.0.1\"\n4>\n```\n-include_lib()\u3092\u4f7f\u3046\u3068\u304d\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082\u3088\u3044\n\n```erlang\n-include_lib(\"kernel/include/file.hrl\").\n-include_lib(\"eunit/include/eunit.hrl\").\n```\n----\nErlang\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\n\n```erlang\n5> erlang:system_info(otp_release).\n\"17\"\n```\n\n----\n\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u9023\u7d50\u3059\u308b\u65b9\u6cd5\n\n```erlang\n1> B1 = <<1,2>>.\n<<1,2>>\n2> B2 = <<3,4>>.\n<<3,4>>\n3> B3 = <<B1/binary, B2/binary>>.\n<<1,2,3,4>>\n```\n---\nErlang\u306breturn\u6587\u304c\u306a\u3044\u7406\u7531\n\n\u3000Erlang has no statements, it only has expressions. All expressions\n\u3000return a value. So there is no need for a \"return\" instruction, the last\n\u3000expression executed gives the return value of the function.\n\n----\n\u6587\u5b57\u5217\u306f\u30c0\u30d6\u30eb\u30af\u30aa\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u56f2\u307e\u308c\u3066\u3001Erlang\u306e\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u3067\u306f\u306a\u3044, \"hello\"\u306f\u305f\u3060\u306e\u30ea\u30b9\u30c8\u3067\u3042\u308b\u3001[\\$h,\\$e,\\$l,\\$l,\\$o]\u3001\u3064\u307e\u308a[104,101,108,108,111].\n   \n```erlang  \n> integer_to_list(123).  \n\"123\"\n> is_list(integer_to_list(323)).\ntrue\n\n```\n----\n\nErlang\u30b7\u30a7\u30eb\u306e\u4e2d\u306bcd\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u3001\u79fb\u52d5\u3059\u308b. pwd()\u306f\u73fe\u5728\u306e\u5834\u6240\u3092\u8abf\u3079\u308b\n        \n```erlang\n2> cd(\"/etc\").\n/etc\nok\n3> pwd().\n/etc\nok\n```\n\n----\nCalling demonitor(MonitorRef, [flush]) is equivalent to the following, but more efficient:\n\n```erlang\ndemonitor(MonitorRef),\n    receive\n        {_, MonitorRef, _, _, _} ->\n            true\n    after 0 ->\n            true\n    end\n```\n----\nThis function returns the local time reported by the underlying operating system.\n[local_time()](http://www.erlang.org/doc/man/calendar.html#local_time-0) \u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f\n```\nlocal_time()-> datetime()\ndatetime()\u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306f\u3057\u305f\u306e\u3088\u3046\u306b\ndatetime() = {date(), time()}\ndate() = {year(), month(), day()}\ntime() = {hour(), minute(), second()}\n```\n\n```erlang\n1> calendar:local_time().\n{{2014,12,16},{11,22,27}}\n```\n----\n", "tags": ["Erlang1.0"]}