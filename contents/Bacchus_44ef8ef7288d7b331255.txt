{"context": "\n\n\u306f\u3058\u3081\u306b\nLINE\u304b\u3089Bluemix\u306eConversation\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nLambda\u306b\u66f8\u304f\u30b3\u30fc\u30c9\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u306b\u3059\u308b\u305f\u3081\u3001Watson SDK\u306f\u4f7f\u308f\u305a\u306b\u6a19\u6e96\u306ehttps\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\n\u74b0\u5883\n\nLINE@\u306eMessagingAPI\nBluemix\u306eConversation\nAWS Lambda\n\n\nNode.js v4.3\n\n\n\n\n\u624b\u9806\n\nAWS\u767b\u9332\u3001Lambda Function\u4f5c\u6210\u3001\u8a2d\u5b9a\nLINE@\u767b\u9332\u3001Messaging API\u8a2d\u5b9a\nBluemix Conversation\u767b\u9332\u3001\u4f1a\u8a71\u306e\u8a2d\u5b9a\n\n\u8aac\u660e\u306f\u5272\u611b\u3057\u307e\u3059...\n\nLambda\u74b0\u5883\u5909\u6570\nLamuba\u306b\u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\nLINE_SIGNATURE\nLINE_TOKEN\nWATSON_USERNAME\nWATSON_PASSWORD\nWATSON_WORKSPACE_ID\n\n\u305d\u308c\u305e\u308c\u3001\u74b0\u5883\u5909\u6570\u306b\u8a2d\u5b9a\u3057\u3066\u3001\u30b3\u30fc\u30c9\u4e2d\u304b\u3089\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nLambda\u306e\u30b3\u30fc\u30c9\n\nindex.js\n'use strict';\n\nvar crypto = require('crypto');\nvar https = require('https');\n\nvar gTbl = {};\n\nfunction putVal(pKey, key, val){\n  var mTbl = gTbl[pKey];\n  if(mTbl == null){\n    mTbl = {};\n    mTbl[key] = val;\n    gTbl[pKey] = mTbl;\n  }else{\n    mTbl[key] = val;\n  }\n}\n\nfunction getVal(pKey, key){\n  if(gTbl[pKey] == null || gTbl[pKey][key] == null){\n    return null;\n  }\n  return gTbl[pKey][key];\n}\n\nfunction validateSignature(signature, body){\n    return signature == crypto.createHmac('sha256', process.env.LINE_SIGNATURE).update(new Buffer(body, 'utf8')).digest('base64');\n}\n\nexports.handler = function(event, context) {\n//    console.log(event);\n    if(!validateSignature(event.headers[\"X-Line-Signature\"], event.body)){\n        console.log(\"validate NG\");\n        return;\n    }\n    var body = JSON.parse(event.body);\n    var data = body.events[0];\n    if(data.type !== 'message'){\n      console.log(data.type);\n      return;\n    }\n    var replyToken = data.replyToken;\n    var userId = data.source.userId;\n    var message = data.message.text;\n    message = message.replace(/\\n/g,' ');\n\n    var reqStr = JSON.stringify({\n        context: getVal(userId, \"watson_context\"),\n        input: {text: message }\n    });\n    var watsonOpts = {\n        headers:{\n          'Content-type': 'application/json; charset=utf-8'\n        },\n        hostname:'gateway.watsonplatform.net',\n        path: '/conversation/api/v1/workspaces/' + process.env.WATSON_WORKSPACE_ID + '/message?version=2016-09-20',\n        auth: process.env.WATSON_USERNAME + ':' + process.env.WATSON_PASSWORD,\n        method: 'POST'\n    };\n    var watsonReq = https.request(watsonOpts, function(response) {\n        var body = '';\n        response.setEncoding('utf8');\n        response.on('data', function(chunk) {\n            body += chunk;\n        }).on('end', function() {\n            var watsonRes = JSON.parse(body);\n            putVal(userId, \"watson_context\", watsonRes.context);\n            var resMsg = \"\";\n            if(watsonRes.output && watsonRes.output.text){\n                resMsg = watsonRes.output.text[0].replace(/(<br>|<br\\/>/gi, '\\n');\n            }\n\n            var resStr = JSON.stringify({\n                replyToken: replyToken,\n                messages: [\n                  {type: \"text\", text: resMsg}\n            ]});\n            var lineOpts = {\n                hostname: 'api.line.me',\n                path: '/v2/bot/message/reply',\n                headers: {\n                    \"Content-type\": \"application/json; charset=UTF-8\",\n                    \"Authorization\": \"Bearer \" + process.env.LINE_TOKEN\n                },\n                method: 'POST'\n            };\n            var req = https.request(lineOpts, function(res) {\n                res.on('data', function(res) {\n                }).on('error', function(e) {\n                    console.log('ERROR: ' + e.stack);\n                });\n            });\n            req.write(resStr);\n            req.end();\n        }).on('error', function(e) {\n            console.log('ERROR: ' + e.stack);\n        });\n    });\n    watsonReq.write(reqStr);\n    watsonReq.end();\n};\n\n\n\nLINE\u306euserId\u3054\u3068\u306bConversation\u306econtext\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u3001\u9023\u60f3\u914d\u5217\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\n\u6700\u521d\u306e\u65b9\u306eputVal()\u3001getVal()\u306e\u3042\u305f\u308a\n\n\nLINE\u306e\u6539\u884c\u30b3\u30fc\u30c9'\\n'\u306fConversation\u306b\u9001\u308b\u969b\u3001\u30b9\u30da\u30fc\u30b9\u306b\u7f6e\u63db\u3057\u307e\u3057\u305f\u3002\nConversation\u306e\u6539\u884c\u30b3\u30fc\u30c9\u306f<br>\u3084<br/>\u3092\u81ea\u5206\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u305f\u306e\u3067\u3001LINE\u306e\u6539\u884c\u30b3\u30fc\u30c9'\\n'\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\n\n\n\u611f\u60f3\n\nBluemix\u306eCoversation\u3082LINE\u3082\u7c21\u5358\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3001\u9762\u767d\u3044\u3067\u3059\u306d\u3002AWS Lambda\u3082\u30b5\u30fc\u30d0\u3092\u6e96\u5099\u305b\u305a\u306b\u4f7f\u3048\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\u3057\u304b\u3057\u3001\u30b5\u30fc\u30d0\u3082\u4f55\u3082\u6e96\u5099\u305b\u305a\u306b\u3053\u3093\u306a\u3082\u306e\u304c100\u884c\u7a0b\u5ea6\u306e\u30b3\u30fc\u30c9\u3067\u4f5c\u308c\u308b\u6642\u4ee3\u3001\u30a2\u30d7\u30ea\u90e8\u5206\u306b\u6ce8\u529b\u51fa\u6765\u308b\u53cd\u9762\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30ac\u30ea\u30ac\u30ea\u66f8\u3044\u3066\u3044\u305f\u6280\u8853\u8005\u306e\u4ed5\u4e8b\u306f\u306a\u304f\u306a\u3063\u3066\u3044\u304d\u307e\u3059\u306d\u3002\n\u4eca\u306e\u3068\u3053\u308d\u3001Lambda\u306e\u30b3\u30fc\u30c9\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046\u969b\u306e\u30c7\u30d0\u30c3\u30b0\u65b9\u6cd5\u304c\u5206\u304b\u308a\u307e\u305b\u3093\u3002\u304a\u304b\u3052\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u3067\u66f8\u304f\u305f\u3081\u306b\u3001\u4fbf\u5229\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u308f\u305a\u306b\u82e6\u52b4\u3057\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u30fb\u30fb\u30fb\n\n\n\u53c2\u8003\n\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n\nAPI Gateway + Lambda + nodejs\u3067LINE BOT (Messaging API\u7248\uff09\nLINE Messaging API\u3067X-Line-Signature\u306e\u7f72\u540d\u691c\u8a3c\u3092\u884c\u3046(AzureFunctions/Node.js\uff09\nConversation \u30b5\u30fc\u30d3\u30b9\u3067\u306e\u4f1a\u8a71\u30d5\u30ed\u30fc\u4f5c\u6210\u5b9f\u7fd2\n\n\n\u5909\u66f4\u5c65\u6b74\n2017/1/20 \u516c\u958b\n#\u306f\u3058\u3081\u306b\nLINE\u304b\u3089Bluemix\u306eConversation\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nLambda\u306b\u66f8\u304f\u30b3\u30fc\u30c9\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u306b\u3059\u308b\u305f\u3081\u3001Watson SDK\u306f\u4f7f\u308f\u305a\u306b\u6a19\u6e96\u306ehttps\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\n#\u74b0\u5883\n- LINE@\u306eMessagingAPI\n- Bluemix\u306eConversation\n- AWS Lambda\n    - Node.js v4.3\n\n#\u624b\u9806\n\n- AWS\u767b\u9332\u3001Lambda Function\u4f5c\u6210\u3001\u8a2d\u5b9a\n- LINE@\u767b\u9332\u3001Messaging API\u8a2d\u5b9a\n- Bluemix Conversation\u767b\u9332\u3001\u4f1a\u8a71\u306e\u8a2d\u5b9a\n\n\u8aac\u660e\u306f\u5272\u611b\u3057\u307e\u3059...\n\n#Lambda\u74b0\u5883\u5909\u6570\nLamuba\u306b\u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n<img width=\"798\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-21 0.05.56.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/155165/d8bd1aa9-df99-1077-edbb-b45dc64b7ac1.png\">\n\n- LINE_SIGNATURE\n- LINE_TOKEN\n- WATSON_USERNAME\n- WATSON_PASSWORD\n- WATSON_WORKSPACE_ID\n\n\u305d\u308c\u305e\u308c\u3001\u74b0\u5883\u5909\u6570\u306b\u8a2d\u5b9a\u3057\u3066\u3001\u30b3\u30fc\u30c9\u4e2d\u304b\u3089\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n#Lambda\u306e\u30b3\u30fc\u30c9\n```js:index.js\n'use strict';\n\nvar crypto = require('crypto');\nvar https = require('https');\n\nvar gTbl = {};\n\nfunction putVal(pKey, key, val){\n  var mTbl = gTbl[pKey];\n  if(mTbl == null){\n    mTbl = {};\n    mTbl[key] = val;\n    gTbl[pKey] = mTbl;\n  }else{\n    mTbl[key] = val;\n  }\n}\n\nfunction getVal(pKey, key){\n  if(gTbl[pKey] == null || gTbl[pKey][key] == null){\n    return null;\n  }\n  return gTbl[pKey][key];\n}\n\nfunction validateSignature(signature, body){\n    return signature == crypto.createHmac('sha256', process.env.LINE_SIGNATURE).update(new Buffer(body, 'utf8')).digest('base64');\n}\n\nexports.handler = function(event, context) {\n//    console.log(event);\n    if(!validateSignature(event.headers[\"X-Line-Signature\"], event.body)){\n        console.log(\"validate NG\");\n        return;\n    }\n    var body = JSON.parse(event.body);\n    var data = body.events[0];\n    if(data.type !== 'message'){\n      console.log(data.type);\n      return;\n    }\n    var replyToken = data.replyToken;\n    var userId = data.source.userId;\n    var message = data.message.text;\n    message = message.replace(/\\n/g,' ');\n\n    var reqStr = JSON.stringify({\n        context: getVal(userId, \"watson_context\"),\n        input: {text: message }\n    });\n    var watsonOpts = {\n        headers:{\n          'Content-type': 'application/json; charset=utf-8'\n        },\n        hostname:'gateway.watsonplatform.net',\n        path: '/conversation/api/v1/workspaces/' + process.env.WATSON_WORKSPACE_ID + '/message?version=2016-09-20',\n        auth: process.env.WATSON_USERNAME + ':' + process.env.WATSON_PASSWORD,\n        method: 'POST'\n    };\n    var watsonReq = https.request(watsonOpts, function(response) {\n        var body = '';\n        response.setEncoding('utf8');\n        response.on('data', function(chunk) {\n            body += chunk;\n        }).on('end', function() {\n            var watsonRes = JSON.parse(body);\n            putVal(userId, \"watson_context\", watsonRes.context);\n            var resMsg = \"\";\n            if(watsonRes.output && watsonRes.output.text){\n                resMsg = watsonRes.output.text[0].replace(/(<br>|<br\\/>/gi, '\\n');\n            }\n\n            var resStr = JSON.stringify({\n                replyToken: replyToken,\n                messages: [\n                  {type: \"text\", text: resMsg}\n            ]});\n            var lineOpts = {\n                hostname: 'api.line.me',\n                path: '/v2/bot/message/reply',\n                headers: {\n                    \"Content-type\": \"application/json; charset=UTF-8\",\n                    \"Authorization\": \"Bearer \" + process.env.LINE_TOKEN\n                },\n                method: 'POST'\n            };\n            var req = https.request(lineOpts, function(res) {\n                res.on('data', function(res) {\n                }).on('error', function(e) {\n                    console.log('ERROR: ' + e.stack);\n                });\n            });\n            req.write(resStr);\n            req.end();\n        }).on('error', function(e) {\n            console.log('ERROR: ' + e.stack);\n        });\n    });\n    watsonReq.write(reqStr);\n    watsonReq.end();\n};\n```\n\n- LINE\u306euserId\u3054\u3068\u306bConversation\u306econtext\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u3001\u9023\u60f3\u914d\u5217\u3092\u4f7f\u3044\u307e\u3059\u3002\n    - \u6700\u521d\u306e\u65b9\u306eputVal()\u3001getVal()\u306e\u3042\u305f\u308a\n- LINE\u306e\u6539\u884c\u30b3\u30fc\u30c9'\\n'\u306fConversation\u306b\u9001\u308b\u969b\u3001\u30b9\u30da\u30fc\u30b9\u306b\u7f6e\u63db\u3057\u307e\u3057\u305f\u3002\n- Conversation\u306e\u6539\u884c\u30b3\u30fc\u30c9\u306f\\<br>\u3084\\<br/>\u3092\u81ea\u5206\u3067\u8a2d\u5b9a\u3057\u3066\u3044\u305f\u306e\u3067\u3001LINE\u306e\u6539\u884c\u30b3\u30fc\u30c9'\\n'\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002\n\n#\u611f\u60f3\n- Bluemix\u306eCoversation\u3082LINE\u3082\u7c21\u5358\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3001\u9762\u767d\u3044\u3067\u3059\u306d\u3002AWS Lambda\u3082\u30b5\u30fc\u30d0\u3092\u6e96\u5099\u305b\u305a\u306b\u4f7f\u3048\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n- \u3057\u304b\u3057\u3001\u30b5\u30fc\u30d0\u3082\u4f55\u3082\u6e96\u5099\u305b\u305a\u306b\u3053\u3093\u306a\u3082\u306e\u304c100\u884c\u7a0b\u5ea6\u306e\u30b3\u30fc\u30c9\u3067\u4f5c\u308c\u308b\u6642\u4ee3\u3001\u30a2\u30d7\u30ea\u90e8\u5206\u306b\u6ce8\u529b\u51fa\u6765\u308b\u53cd\u9762\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30ac\u30ea\u30ac\u30ea\u66f8\u3044\u3066\u3044\u305f\u6280\u8853\u8005\u306e\u4ed5\u4e8b\u306f\u306a\u304f\u306a\u3063\u3066\u3044\u304d\u307e\u3059\u306d\u3002\n- \u4eca\u306e\u3068\u3053\u308d\u3001Lambda\u306e\u30b3\u30fc\u30c9\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3046\u969b\u306e\u30c7\u30d0\u30c3\u30b0\u65b9\u6cd5\u304c\u5206\u304b\u308a\u307e\u305b\u3093\u3002\u304a\u304b\u3052\u3067\u30a4\u30f3\u30e9\u30a4\u30f3\u3067\u66f8\u304f\u305f\u3081\u306b\u3001\u4fbf\u5229\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u308f\u305a\u306b\u82e6\u52b4\u3057\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u30fb\u30fb\u30fb\n\n#\u53c2\u8003\n\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n\n- [API Gateway + Lambda + nodejs\u3067LINE BOT (Messaging API\u7248\uff09](http://qiita.com/saitoryc/items/9f5833495d1e0453e052)\n- [LINE Messaging API\u3067X-Line-Signature\u306e\u7f72\u540d\u691c\u8a3c\u3092\u884c\u3046(AzureFunctions/Node.js\uff09](http://qiita.com/yorifuji/items/71e31baf896adb69f567)\n- [Conversation \u30b5\u30fc\u30d3\u30b9\u3067\u306e\u4f1a\u8a71\u30d5\u30ed\u30fc\u4f5c\u6210\u5b9f\u7fd2](https://www.ibm.com/developerworks/community/wikis/home?lang=ja#!/wiki/\u3053\u307f\u306d\u306e\u6280\u8853\u30e1\u30e2/page/Conversation%20\u30b5\u30fc\u30d3\u30b9\u3067\u306e\u4f1a\u8a71\u30d5\u30ed\u30fc\u4f5c\u6210\u5b9f\u7fd2)\n\n#\u5909\u66f4\u5c65\u6b74\n2017/1/20 \u516c\u958b\n", "tags": ["Node.js", "Line", "Bluemix", "lambda"]}