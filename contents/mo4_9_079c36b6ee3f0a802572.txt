{"context": "\n\nGLSL\u306e\u30b3\u30fc\u30c9\u3092\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u3066\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\nShaderLoader.js\u3092\u4f7f\u7528\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8aad\u307f\u8fbc\u3080script\u30bf\u30b0\u3068\u3001\nShaderLoader.min.js\u3092\u7528\u610f\n\nindex.html\n<script data-src=\"shader/vertex.js\" charset=\"utf-8\" data-name=\"myShader\" type=\"x-shader/x-vertex\"></script>\n<script data-src=\"shader/fragment.js\" charset=\"utf-8\"  data-name=\"myShader\" type=\"x-shader/x-fragment\"></script>\n\n<script src=\"./js/libs/ShaderLoader.min.js\"></script>\n\n\n\nscript.js\uff08ES6\u30af\u30e9\u30b9\u5185\u90e8\u304b\u3089\u4e00\u90e8\u629c\u7c8b\uff09\npreload() {\n  SHADER_LOADER.load( (data) => {\n\n    const vs = data.myShader.vertex; // `myShader`\u306fdata-name\u306b\u5408\u308f\u305b\u308b\n    const fs = data.myShader.fragment;\n\n    this.initListener(vs, fs);\n  })\n}\n\ninitListener(vs, fs) {\n\n  \u30fb\u30fb\u30fb\uff08\u4e2d\u7565\uff09\u30fb\u30fb\u30fb\n\n  const material = new THREE.ShaderMaterial( {\n    vertexShader: vs,\n    fragmentShader: fs,\n    uniforms : this.uniforms\n  });\n\n}\n\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d30\u304b\u304f\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u305f\n\nshader/vertex.js\nvarying vec2 vUv;\nvoid main(void){\n vUv = uv;\n   gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n\n\n\nshader/fragment.js\nuniform float time;\nvarying vec2 vUv;\nvoid main(void){\n    vec2 position = -1.0 + 2.0 * vUv;\n    float r = abs( sin( position.x * position.y + time / 3.0 ) );\n    float g = abs( sin( position.x * position.y + time / 2.0 ) );\n    float b = abs( sin( position.x * position.y + time / 1.0 ) );\n        vec3 color = time == 0.0 ? vec3( 1.0, 0.0, 0.0 ) : vec3( r, g, b ) ;\n        gl_FragColor = vec4( color, 1.0 );\n}\n\n\n\n\u53c2\u8003\nGLSL\u3092\u4f7f\u3063\u3066\u30ef\u30f3\u30e9\u30f3\u30af\u4e0a\u306e\u8868\u73fe\u3092\uff01 three.js\u3067\u306e\u3077\u308b\u3077\u308b\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u4f5c\u308a\u65b9\n\n\n\n## GLSL\u306e\u30b3\u30fc\u30c9\u3092\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u3066\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\n\n[ShaderLoader.js](https://github.com/codecruzer/webgl-shader-loader-js)\u3092\u4f7f\u7528\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8aad\u307f\u8fbc\u3080script\u30bf\u30b0\u3068\u3001\nShaderLoader.min.js\u3092\u7528\u610f\n\n```html:index.html\n<script data-src=\"shader/vertex.js\" charset=\"utf-8\" data-name=\"myShader\" type=\"x-shader/x-vertex\"></script>\n<script data-src=\"shader/fragment.js\" charset=\"utf-8\"  data-name=\"myShader\" type=\"x-shader/x-fragment\"></script>\n\n<script src=\"./js/libs/ShaderLoader.min.js\"></script>\n```\n\n\n\n\n```javascript:script.js\uff08ES6\u30af\u30e9\u30b9\u5185\u90e8\u304b\u3089\u4e00\u90e8\u629c\u7c8b\uff09\npreload() {\n  SHADER_LOADER.load( (data) => {\n\n    const vs = data.myShader.vertex; // `myShader`\u306fdata-name\u306b\u5408\u308f\u305b\u308b\n    const fs = data.myShader.fragment;\n\n    this.initListener(vs, fs);\n  })\n}\n\ninitListener(vs, fs) {\n\n  \u30fb\u30fb\u30fb\uff08\u4e2d\u7565\uff09\u30fb\u30fb\u30fb\n\n  const material = new THREE.ShaderMaterial( {\n    vertexShader: vs,\n    fragmentShader: fs,\n    uniforms : this.uniforms\n  });\n  \n}\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d30\u304b\u304f\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u305f\n\n```javascript:shader/vertex.js\nvarying vec2 vUv;\nvoid main(void){\n vUv = uv;\n   gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n```\n\n```javascript:shader/fragment.js\nuniform float time;\nvarying vec2 vUv;\nvoid main(void){\n    vec2 position = -1.0 + 2.0 * vUv;\n    float r = abs( sin( position.x * position.y + time / 3.0 ) );\n    float g = abs( sin( position.x * position.y + time / 2.0 ) );\n    float b = abs( sin( position.x * position.y + time / 1.0 ) );\n        vec3 color = time == 0.0 ? vec3( 1.0, 0.0, 0.0 ) : vec3( r, g, b ) ;\n        gl_FragColor = vec4( color, 1.0 );\n}\n```\n\n\n\n> \u53c2\u8003\n[GLSL\u3092\u4f7f\u3063\u3066\u30ef\u30f3\u30e9\u30f3\u30af\u4e0a\u306e\u8868\u73fe\u3092\uff01 three.js\u3067\u306e\u3077\u308b\u3077\u308b\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u4f5c\u308a\u65b9](https://ics.media/entry/3228)\n", "tags": ["JavaScript", "WebGL", "GLSL", "three.js"]}