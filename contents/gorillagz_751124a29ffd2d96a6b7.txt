{"context": "\n\n-- coding: utf-8 --\n\nimport cv2.cv as cv\nimport cv2\nimport numpy as np\nMAX_FEATURES = 500      #\nRADIUS2 = 25\nDETECT_TURM = 20 #\u4f55\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306b\u3059\u308b\u304b\u306e\u6c7a\u5b9a\nWINDOW_NAME = u'\u7269\u4f53\u8ffd\u8de1'.encode('cp932')\n\n\u53cd\u5fa9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7d42\u4e86\u6761\u4ef6\ncriteria = (cv2.TERM_CRITERIA_MAX_ITER | cv2.TERM_CRITERIA_EPS , 20 , 0.03)\nclass App:\ndef __init__(self):\n\n\n\n    cv2.namedWindow(WINDOW_NAME)\n\n    cv2.setMouseCallback(WINDOW_NAME , self.on_mouse)\n\n\n    self.src = cv2.VideoCapture('crossing_accident.avi')\n    if not self.src.isOpened():\n        print u'\u51fa\u529b\u4e0d\u53ef'\n        import sys\n        sys.exit()\n\n    self.points_now = None\n    self.detect_count = DETECT_TURM #DETECT_TURM\u306e\u6570\u3060\u3051\u6570\u3092\u6570\u3048\u308b\n\n\ndef auto_detect(self):\n\n\n    self.points_now = cv2.goodFeaturesToTrack(self.img_now , MAX_FEATURES , 0.01 , 10)\n\n\n    cv2.cornerSubPix(self.img_now , self.points_now , (10 , 10) , (-1 , -1) , criteria)\n\n\ndef remove_points(self):\n    index = 0\n\n    while index < len(self.points_now):\n\n        if self.status[index] == 0:\n            self.points_now = np.delete(self.points_now , index , 0)\n            self.status = np.delete(self.status , index , 0)\n            index -= 1\n\n        index += 1\n\n\ndef on_mouse(self , event , x , y , flags , param):\n\n    if event != cv2.EVENT_LBUTTONDOWN:\n        return\n\n\n\n    index = -1\n    mini = RADIUS2\n    count = 0\n    if self.points_now != None:\n        for point in self.points_now:\n            dx = x - point[0][0]\n            dy = y - point[0][1]\n            r2 = dx * dx + dy * dy\n            if r2 <= mini:\n                index = count\n                mini = r2\n                break\n            count += 1\n\n    if index >= 0:\n        self.points_now = np.delete(self.points_now , index , 0)\n        self.status = np.delete(self.status , index , 0)\n\n    else:\n        if self.points_now != None and len(self.points_now) >= MAX_FEATURES:\n            print u'\u3053\u308c\u4ee5\u4e0a\u7279\u5fb4\u70b9\u306e\u62bd\u51fa\u306f\u4e0d\u53ef\u80fd'\n            return\n\n        if self.points_now == None:\n            self.points_now = np.array([[[x , y]]] , np.float32)\n        else:\n            self.points_now = np.append(self.points_now , [[[x , y]]] , axis = 0).astype(np.float32)\n\n\n        cv2.cornerSubPix(self.img_now , self.points_now , (10 , 10) , (-1 , -1) , criteria)\n\n\ndef chk_detect(self): \n    self.detect_count -= 1 #self.detect_count\u306b\u4ee3\u5165\u3055\u308c\u305fDETECT_TURM\u306e\u6570\u304b\u30891\u305a\u3064\u5f15\u3044\u3066\u3044\u304f\n    if self.detect_count == 0: #\u3082\u3057\u3001self.detect_count\u304c0\u306b\u306a\u3063\u305f\u5834\u5408\n        self.detect_count = DETECT_TURM #self.detect_count\u3092\u6700\u521d\u306eDETECT_TURM\u306e\u5024\u306b\u623b\u3059\n        self.auto_detect() #\u81ea\u52d5\u3067\u306e\u7279\u5fb4\u70b9\u306e\u62bd\u51fa\u3092\u884c\u3046\n\ndef run(self):\n    while True:\n        self.chk_detect() #\u52d5\u753b\u304c\u518d\u751f\u3055\u308c\u3066\u308b\u3042\u3044\u3060\u3001DETECT_TURM\u3067\u6307\u5b9a\u3057\u305f\u6570\u306e\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306b\u81ea\u52d5\u3067\u306e\u7279\u5fb4\u70b9\u62bd\u51fa\u3092\u884c\u3046\n        retval , frame = self.src.read()\n\n        if frame is None:\n            break\n\n\n        self.img_now = cv2.cvtColor(frame , cv2.COLOR_BGR2GRAY)\n\n\n        if self.points_now != None and len(self.points_now) > 0:\n\n\n            points_pre = self.points_now\n\n\n            self.points_now , self.status , err = \\\n                cv2.calcOpticalFlowPyrLK(self.img_pre , self.img_now , points_pre , winSize = (10 , 10) , maxLevel = 3 , criteria = criteria , flags = 0 , minEigThreshold = 0.01)\n\n            print 'aaaa'\n            print len(points_pre)\n            print len(self.points_now)\n\n            #self.remove_points()\n\n\n            #for point in self.points_now:\n            for i in range(len(points_pre)): #points_pre\u306e\u300c\uff10~\u914d\u5217\u306e\u8981\u7d20\u306e\u6570\u300d\u3092i\u306b\u4ee3\u5165\u3057\u3001\u300c\uff10~\u914d\u5217\u306e\u8981\u7d20\u306e\u6570\u300d\u306e\u9593\u3001\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\n                diff_x = points_pre[i][0][0] - self.points_now[i][0][0] #\u524d\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u3068\u73fe\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u306ex\u5ea7\u6a19\u306e\u5dee\u5206\u3092\u53d6\u308b\n                diff_y = points_pre[i][0][1] - self.points_now[i][0][1] #\u524d\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u3068\u73fe\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u306ey\u5ea7\u6a19\u306e\u5dee\u5206\u3092\u53d6\u308b\n                point = self.points_now[i] #\n                diff   = diff_x*diff_x + diff_y*diff_y #\u4e09\u5e73\u65b9\u306e\u5b9a\u7406\u306e\u8981\u9818\u3067\u3001\u524d\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u3068\u73fe\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u306e\u9593\u306e\u8ddd\u96e2\u3092\u53d6\u308b\n                if diff > 1 and diff < 2: #\u524d\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u3068\u73fe\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u306e\u9593\u306e\u8ddd\u96e2\u304c1\u3088\u308a\u5927\u304d\u304f\u30012\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070\n                    cv2.circle(frame , (point[0][0] , point[0][1]) , 4 , (0 , 0 , 255 - 255*-(1 - diff)) , -1 , 8 , 0) #\u70b9\u3092\u63cf\u753b\u3059\u308b\u3002\u70b9\u306e\u8272\u306f\u3001\u7269\u4f53\u306e\u79fb\u52d5\u901f\u5ea6\u306b\u3088\u3063\u3066\u5909\u5316\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\u65e9\u3044\u3068\u8d64\u3001\u9045\u3044\u3068\u9ed2\u8272\u306e\u70b9\u3068\u306a\u308b\u3002 \n                #cv2.circle(frame , (point[0][0] , point[0][1]) , 4 , (0 , 0 , 255*random.random()) , -1 , 8 , 0)\n\n            self.remove_points()\n\n\n\n\n        cv2.imshow(WINDOW_NAME , frame)\n        self.img_pre = self.img_now.copy()\n\n\n        key = cv2.waitKey(33)\n        if key == 27:\n            break\n        elif key == 67 or key == 99:\n            self.points_now = None\n        elif key == 32:\n            self.auto_detect()\n\n\n    cv2.destroyAllWindows()\n    self.src.release()\n\nif name == 'main':\n    App().run()\n\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092Spyder\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\nrunfile('C:/Users/tatomi/Desktop/chase/chasing.py', wdir='C:/Users/tatomi/Desktop/chase')\n\u51fa\u529b\u4e0d\u53ef\nAn exception has occurred, use %tb to see the full traceback.\nSystemExit\n\u3069\u3046\u3082\u30d1\u30b9\u304b\u4f55\u304b\u304c\u3068\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3059\u304c\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n# -*- coding: utf-8 -*-\n\n#import cv2.cv as cv\nimport cv2\nimport numpy as np\n\n\nMAX_FEATURES = 500      #\nRADIUS2 = 25\nDETECT_TURM = 20 #\u4f55\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306b\u3059\u308b\u304b\u306e\u6c7a\u5b9a\nWINDOW_NAME = u'\u7269\u4f53\u8ffd\u8de1'.encode('cp932')\n#\u53cd\u5fa9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7d42\u4e86\u6761\u4ef6\n\ncriteria = (cv2.TERM_CRITERIA_MAX_ITER | cv2.TERM_CRITERIA_EPS , 20 , 0.03)\n\n\nclass App:\n    \n    def __init__(self):\n        \n       \n        \n        cv2.namedWindow(WINDOW_NAME)\n        \n        cv2.setMouseCallback(WINDOW_NAME , self.on_mouse)\n        \n        \n        self.src = cv2.VideoCapture('crossing_accident.avi')\n        if not self.src.isOpened():\n            print u'\u51fa\u529b\u4e0d\u53ef'\n            import sys\n            sys.exit()\n            \n        self.points_now = None\n        self.detect_count = DETECT_TURM #DETECT_TURM\u306e\u6570\u3060\u3051\u6570\u3092\u6570\u3048\u308b\n        \n        \n    def auto_detect(self):\n        \n        \n        self.points_now = cv2.goodFeaturesToTrack(self.img_now , MAX_FEATURES , 0.01 , 10)\n        \n        \n        cv2.cornerSubPix(self.img_now , self.points_now , (10 , 10) , (-1 , -1) , criteria)\n        \n        \n    def remove_points(self):\n        index = 0\n        \n        while index < len(self.points_now):\n            \n            if self.status[index] == 0:\n                self.points_now = np.delete(self.points_now , index , 0)\n                self.status = np.delete(self.status , index , 0)\n                index -= 1\n                \n            index += 1\n            \n            \n    def on_mouse(self , event , x , y , flags , param):\n            \n        if event != cv2.EVENT_LBUTTONDOWN:\n            return\n                \n                \n                \n        index = -1\n        mini = RADIUS2\n        count = 0\n        if self.points_now != None:\n            for point in self.points_now:\n                dx = x - point[0][0]\n                dy = y - point[0][1]\n                r2 = dx * dx + dy * dy\n                if r2 <= mini:\n                    index = count\n                    mini = r2\n                    break\n                count += 1\n                    \n        if index >= 0:\n            self.points_now = np.delete(self.points_now , index , 0)\n            self.status = np.delete(self.status , index , 0)\n                    \n        else:\n            if self.points_now != None and len(self.points_now) >= MAX_FEATURES:\n                print u'\u3053\u308c\u4ee5\u4e0a\u7279\u5fb4\u70b9\u306e\u62bd\u51fa\u306f\u4e0d\u53ef\u80fd'\n                return\n                        \n            if self.points_now == None:\n                self.points_now = np.array([[[x , y]]] , np.float32)\n            else:\n                self.points_now = np.append(self.points_now , [[[x , y]]] , axis = 0).astype(np.float32)\n                        \n                        \n            cv2.cornerSubPix(self.img_now , self.points_now , (10 , 10) , (-1 , -1) , criteria)\n                    \n                    \n    def chk_detect(self): \n        self.detect_count -= 1 #self.detect_count\u306b\u4ee3\u5165\u3055\u308c\u305fDETECT_TURM\u306e\u6570\u304b\u30891\u305a\u3064\u5f15\u3044\u3066\u3044\u304f\n        if self.detect_count == 0: #\u3082\u3057\u3001self.detect_count\u304c0\u306b\u306a\u3063\u305f\u5834\u5408\n            self.detect_count = DETECT_TURM #self.detect_count\u3092\u6700\u521d\u306eDETECT_TURM\u306e\u5024\u306b\u623b\u3059\n            self.auto_detect() #\u81ea\u52d5\u3067\u306e\u7279\u5fb4\u70b9\u306e\u62bd\u51fa\u3092\u884c\u3046\n            \n    def run(self):\n        while True:\n            self.chk_detect() #\u52d5\u753b\u304c\u518d\u751f\u3055\u308c\u3066\u308b\u3042\u3044\u3060\u3001DETECT_TURM\u3067\u6307\u5b9a\u3057\u305f\u6570\u306e\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306b\u81ea\u52d5\u3067\u306e\u7279\u5fb4\u70b9\u62bd\u51fa\u3092\u884c\u3046\n            retval , frame = self.src.read()\n            \n            if frame is None:\n                break\n            \n            \n            self.img_now = cv2.cvtColor(frame , cv2.COLOR_BGR2GRAY)\n            \n            \n            if self.points_now != None and len(self.points_now) > 0:\n                \n                \n                points_pre = self.points_now\n            \n            \n                self.points_now , self.status , err = \\\n                    cv2.calcOpticalFlowPyrLK(self.img_pre , self.img_now , points_pre , winSize = (10 , 10) , maxLevel = 3 , criteria = criteria , flags = 0 , minEigThreshold = 0.01)\n                \n                print 'aaaa'\n                print len(points_pre)\n                print len(self.points_now)\n                \n                #self.remove_points()\n                \n                \n                #for point in self.points_now:\n                for i in range(len(points_pre)): #points_pre\u306e\u300c\uff10~\u914d\u5217\u306e\u8981\u7d20\u306e\u6570\u300d\u3092i\u306b\u4ee3\u5165\u3057\u3001\u300c\uff10~\u914d\u5217\u306e\u8981\u7d20\u306e\u6570\u300d\u306e\u9593\u3001\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\n                    diff_x = points_pre[i][0][0] - self.points_now[i][0][0] #\u524d\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u3068\u73fe\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u306ex\u5ea7\u6a19\u306e\u5dee\u5206\u3092\u53d6\u308b\n                    diff_y = points_pre[i][0][1] - self.points_now[i][0][1] #\u524d\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u3068\u73fe\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u306ey\u5ea7\u6a19\u306e\u5dee\u5206\u3092\u53d6\u308b\n                    point = self.points_now[i] #\n                    diff   = diff_x*diff_x + diff_y*diff_y #\u4e09\u5e73\u65b9\u306e\u5b9a\u7406\u306e\u8981\u9818\u3067\u3001\u524d\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u3068\u73fe\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u306e\u9593\u306e\u8ddd\u96e2\u3092\u53d6\u308b\n                    if diff > 1 and diff < 2: #\u524d\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u3068\u73fe\u30d5\u30ec\u30fc\u30e0\u306e\u70b9\u306e\u9593\u306e\u8ddd\u96e2\u304c1\u3088\u308a\u5927\u304d\u304f\u30012\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070\n                        cv2.circle(frame , (point[0][0] , point[0][1]) , 4 , (0 , 0 , 255 - 255*-(1 - diff)) , -1 , 8 , 0) #\u70b9\u3092\u63cf\u753b\u3059\u308b\u3002\u70b9\u306e\u8272\u306f\u3001\u7269\u4f53\u306e\u79fb\u52d5\u901f\u5ea6\u306b\u3088\u3063\u3066\u5909\u5316\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\u65e9\u3044\u3068\u8d64\u3001\u9045\u3044\u3068\u9ed2\u8272\u306e\u70b9\u3068\u306a\u308b\u3002 \n                    #cv2.circle(frame , (point[0][0] , point[0][1]) , 4 , (0 , 0 , 255*random.random()) , -1 , 8 , 0)\n                    \n                self.remove_points()\n                    \n                    \n                    \n                    \n            cv2.imshow(WINDOW_NAME , frame)\n            self.img_pre = self.img_now.copy()\n            \n            \n            key = cv2.waitKey(33)\n            if key == 27:\n                break\n            elif key == 67 or key == 99:\n                self.points_now = None\n            elif key == 32:\n                self.auto_detect()\n                \n                \n        cv2.destroyAllWindows()\n        self.src.release()\n        \n        \n        \nif __name__ == '__main__':\n    App().run()\n\n\n\n\n\n\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092Spyder\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\nrunfile('C:/Users/tatomi/Desktop/chase/chasing.py', wdir='C:/Users/tatomi/Desktop/chase')\n\u51fa\u529b\u4e0d\u53ef\nAn exception has occurred, use %tb to see the full traceback.\n\nSystemExit\n\n\n\n\u3069\u3046\u3082\u30d1\u30b9\u304b\u4f55\u304b\u304c\u3068\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3059\u304c\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n", "tags": ["Python", "Spyder", "OpenCV"]}