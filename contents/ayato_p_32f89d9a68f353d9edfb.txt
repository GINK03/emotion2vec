{"context": " More than 1 year has passed since last update.Clojure \u3084\u3063\u3066\u308b\u4eba\u305f\u3061\u306b Web \u30a2\u30d7\u30ea\u4f5c\u308b\u3068\u304d\u4f55\u4f7f\u3063\u3066\u307e\u3059?\u3068\u805e\u304f\u3068\u7d50\u69cb\u306a\u5272\u5408\u3067 Luminus \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4f7f\u3063\u3066\u308b\u3068\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\u3067\u3059\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u3042\u3093\u307e\u308a ClojureScript \u306e\u958b\u767a\u74b0\u5883\u304c\u826f\u304f\u306a\u3044\u6c17\u304c\u3059\u308b\u306e\u3067\u3001 Figwheel \u3092\u3082\u3063\u3068\u4fbf\u5229\u306b\u4f7f\u3046\u8a2d\u5b9a\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b ClojureScript \u306e\u958b\u767a\u3059\u308b\u306a\u3089 Chestnut \u3068\u3044\u3046\u6709\u540d\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5e7e\u3064\u304b\u306e\u7406\u7531\u3067 Chestnut \u3088\u308a Luminus \u3092\u4f7f\u3044\u305f\u3044\u306e\u3067\u4eca\u56de\u306f Luminus \u3067\u3059\u3002\nlein new luminus luminus-app +cljs \u3092\u5b9f\u884c\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u3072\u306a\u5f62\u3092\u4f5c\u3063\u305f\u4f8b\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u307e\u305a luminus-app/env/dev/clj/luminus_app/dev.clj \u3092\u4f5c\u6210\u3057\u3066\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3059\u3002\n(ns luminus-app.dev\n  (:require [clojure.edn :as edn]\n            [clojurescript-build.auto :as auto]\n            [figwheel-sidecar.auto-builder :as fig-auto]\n            [figwheel-sidecar.config :as conf]\n            [figwheel-sidecar.core :as fig]))\n\n(defonce fig-server (atom {}))\n\n(defn start-figwheel []\n  (let [server (fig/start-server { :css-dirs [\"resources/public/css\"] })\n        builder (fig-auto/autobuild*\n                 {:builds [{:id \"dev\"\n                            :source-paths [\"src-cljs\" \"env/dev/cljs\"]\n                            :compiler {:output-to            \"resources/public/js/app.js\"\n                                       :output-dir           \"resources/public/js/out\"\n                                       :source-map           true\n                                       :optimizations        :none\n                                       :source-map-timestamp true\n                                       :externs [\"react/externs/react.js\"]}}]\n                  :figwheel-server server})]\n    (reset! fig-server {:figwheel-server server :cljs-builder builder})))\n\n(defn stop-figwheel []\n  (let [server (:figwheel-server @fig-server)\n        builder (:cljs-builder @fig-server)]\n    (when builder\n      (auto/stop-autobuild! builder))\n    (when server\n      (fig/stop-server server))\n    (reset! fig-server {:figwheel-server nil :cljs-builder nil})))\n\n\u6b21\u306b project.clj \u306e :project/dev \u306b :source-paths [\"env/dev/clj\"] \u3092\u8db3\u3057\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3068 :project/dev \u306e\u90e8\u5206\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n:project/dev  {:source-paths [\"env/dev/clj\"] ;; \u4eca\u56de\u8db3\u3057\u305f\u90e8\u5206\u306f\u30b3\u30b3\u3060\u3051!!\n               :dependencies [[ring/ring-mock \"0.2.0\"]\n                              [ring/ring-devel \"1.4.0\"]\n                              [pjstadig/humane-test-output \"0.7.0\"]\n                              [lein-figwheel \"0.3.7\"]\n                              [org.clojure/tools.nrepl \"0.2.10\"]]\n               :plugins [[lein-figwheel \"0.3.7\"]]\n               :cljsbuild\n               {:builds\n                {:app\n                 {:source-paths [\"env/dev/cljs\"] :compiler {:source-map true}}}}\n\n               :figwheel\n               {:resource-paths \"resources\"\n                :http-server-root \"public\"\n                :server-port 3449\n                :nrepl-port 7002\n                :css-dirs [\"resources/public/css\"]\n                :ring-handler luminus-app.handler/app}\n\n               :repl-options {:init-ns luminus-app.core}\n               :injections [(require 'pjstadig.humane-test-output)\n                            (pjstadig.humane-test-output/activate!)]\n               ;;when :nrepl-port is set the application starts the nREPL server on load\n               :env {:dev        true\n                     :port       3000\n                     :nrepl-port 7000}}\n\n\u3055\u3089\u306b luminus-app/src/luminus_app/handler.clj \u306e init \u95a2\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\n(defn init\n  \"init will be called once when\n   app is deployed as a servlet on\n   an app server such as Tomcat\n   put any initialization code here\"\n  []\n\n  (timbre/merge-config!\n    {:level     (if (env :dev) :trace :info)\n     :appenders {:rotor (rotor/rotor-appender\n                          {:path \"luminus_app.log\"\n                           :max-size (* 512 1024)\n                           :backlog 10})}})\n  (when (env :dev)\n    (parser/cache-off!)\n    (require 'luminus-app.dev)\n    ((resolve 'luminus-app.dev/start-figwheel)))\n\n  (start-nrepl)\n  (timbre/info (str\n                 \"\\n-=[luminus-app started successfully\"\n                 (when (env :dev) \" using the development profile\")\n                 \"]=-\")))\n\n\u3053\u3046\u3059\u308c\u3070\u958b\u767a\u6642\u306b\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067 Figwheel \u306e\u81ea\u52d5\u30d3\u30eb\u30c9/\u30ea\u30ed\u30fc\u30c9\u304c\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u3061\u306a\u307f\u306b figwheel-sidecar \u3092\u4f7f\u3048\u3070\u3044\u3044\u3060\u3051\u306a\u306e\u3067\u3001\u5225\u306b Luminus \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3058\u3083\u306a\u304f\u3066\u3082\u4f3c\u305f\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u81ea\u529b\u3067\u51fa\u6765\u308b\u306a\u3089\u4f55\u3092\u4f7f\u3063\u3066\u3082\u540c\u3058\u3088\u3046\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u306f\u3044\u3002\nSee also: Let\u2019s start ClojureScript with Luminus template and Figwheel / (def ayalog '())\nClojure \u3084\u3063\u3066\u308b\u4eba\u305f\u3061\u306b Web \u30a2\u30d7\u30ea\u4f5c\u308b\u3068\u304d\u4f55\u4f7f\u3063\u3066\u307e\u3059?\u3068\u805e\u304f\u3068\u7d50\u69cb\u306a\u5272\u5408\u3067 Luminus \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4f7f\u3063\u3066\u308b\u3068\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\u3067\u3059\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u3042\u3093\u307e\u308a ClojureScript \u306e\u958b\u767a\u74b0\u5883\u304c\u826f\u304f\u306a\u3044\u6c17\u304c\u3059\u308b\u306e\u3067\u3001 Figwheel \u3092\u3082\u3063\u3068\u4fbf\u5229\u306b\u4f7f\u3046\u8a2d\u5b9a\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b ClojureScript \u306e\u958b\u767a\u3059\u308b\u306a\u3089 Chestnut \u3068\u3044\u3046\u6709\u540d\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u5e7e\u3064\u304b\u306e\u7406\u7531\u3067 Chestnut \u3088\u308a Luminus \u3092\u4f7f\u3044\u305f\u3044\u306e\u3067\u4eca\u56de\u306f Luminus \u3067\u3059\u3002\n\n`lein new luminus luminus-app +cljs` \u3092\u5b9f\u884c\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u3072\u306a\u5f62\u3092\u4f5c\u3063\u305f\u4f8b\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u307e\u305a `luminus-app/env/dev/clj/luminus_app/dev.clj` \u3092\u4f5c\u6210\u3057\u3066\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3059\u3002\n\n``` clojure\n(ns luminus-app.dev\n  (:require [clojure.edn :as edn]\n            [clojurescript-build.auto :as auto]\n            [figwheel-sidecar.auto-builder :as fig-auto]\n            [figwheel-sidecar.config :as conf]\n            [figwheel-sidecar.core :as fig]))\n\n(defonce fig-server (atom {}))\n\n(defn start-figwheel []\n  (let [server (fig/start-server { :css-dirs [\"resources/public/css\"] })\n        builder (fig-auto/autobuild*\n                 {:builds [{:id \"dev\"\n                            :source-paths [\"src-cljs\" \"env/dev/cljs\"]\n                            :compiler {:output-to            \"resources/public/js/app.js\"\n                                       :output-dir           \"resources/public/js/out\"\n                                       :source-map           true\n                                       :optimizations        :none\n                                       :source-map-timestamp true\n                                       :externs [\"react/externs/react.js\"]}}]\n                  :figwheel-server server})]\n    (reset! fig-server {:figwheel-server server :cljs-builder builder})))\n\n(defn stop-figwheel []\n  (let [server (:figwheel-server @fig-server)\n        builder (:cljs-builder @fig-server)]\n    (when builder\n      (auto/stop-autobuild! builder))\n    (when server\n      (fig/stop-server server))\n    (reset! fig-server {:figwheel-server nil :cljs-builder nil})))\n```\n\n\u6b21\u306b `project.clj` \u306e `:project/dev` \u306b `:source-paths [\"env/dev/clj\"]` \u3092\u8db3\u3057\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3068 `:project/dev` \u306e\u90e8\u5206\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` clojure\n:project/dev  {:source-paths [\"env/dev/clj\"] ;; \u4eca\u56de\u8db3\u3057\u305f\u90e8\u5206\u306f\u30b3\u30b3\u3060\u3051!!\n               :dependencies [[ring/ring-mock \"0.2.0\"]\n                              [ring/ring-devel \"1.4.0\"]\n                              [pjstadig/humane-test-output \"0.7.0\"]\n                              [lein-figwheel \"0.3.7\"]\n                              [org.clojure/tools.nrepl \"0.2.10\"]]\n               :plugins [[lein-figwheel \"0.3.7\"]]\n               :cljsbuild\n               {:builds\n                {:app\n                 {:source-paths [\"env/dev/cljs\"] :compiler {:source-map true}}}}\n\n               :figwheel\n               {:resource-paths \"resources\"\n                :http-server-root \"public\"\n                :server-port 3449\n                :nrepl-port 7002\n                :css-dirs [\"resources/public/css\"]\n                :ring-handler luminus-app.handler/app}\n\n               :repl-options {:init-ns luminus-app.core}\n               :injections [(require 'pjstadig.humane-test-output)\n                            (pjstadig.humane-test-output/activate!)]\n               ;;when :nrepl-port is set the application starts the nREPL server on load\n               :env {:dev        true\n                     :port       3000\n                     :nrepl-port 7000}}\n```\n\n\u3055\u3089\u306b `luminus-app/src/luminus_app/handler.clj` \u306e `init` \u95a2\u6570\u3092\u6b21\u306e\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n``` clojure\n(defn init\n  \"init will be called once when\n   app is deployed as a servlet on\n   an app server such as Tomcat\n   put any initialization code here\"\n  []\n\n  (timbre/merge-config!\n    {:level     (if (env :dev) :trace :info)\n     :appenders {:rotor (rotor/rotor-appender\n                          {:path \"luminus_app.log\"\n                           :max-size (* 512 1024)\n                           :backlog 10})}})\n  (when (env :dev)\n    (parser/cache-off!)\n    (require 'luminus-app.dev)\n    ((resolve 'luminus-app.dev/start-figwheel)))\n\n  (start-nrepl)\n  (timbre/info (str\n                 \"\\n-=[luminus-app started successfully\"\n                 (when (env :dev) \" using the development profile\")\n                 \"]=-\")))\n```\n\n\u3053\u3046\u3059\u308c\u3070\u958b\u767a\u6642\u306b\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067 Figwheel \u306e\u81ea\u52d5\u30d3\u30eb\u30c9/\u30ea\u30ed\u30fc\u30c9\u304c\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4fbf\u5229\u3067\u3059\u306d\u3002\n\n\u3061\u306a\u307f\u306b figwheel-sidecar \u3092\u4f7f\u3048\u3070\u3044\u3044\u3060\u3051\u306a\u306e\u3067\u3001\u5225\u306b Luminus \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3058\u3083\u306a\u304f\u3066\u3082\u4f3c\u305f\u3088\u3046\u306a\u8a2d\u5b9a\u3092\u81ea\u529b\u3067\u51fa\u6765\u308b\u306a\u3089\u4f55\u3092\u4f7f\u3063\u3066\u3082\u540c\u3058\u3088\u3046\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u306f\u3044\u3002\n\nSee also: [Let\u2019s start ClojureScript with Luminus template and Figwheel / (def ayalog '())](http://ayato-p.github.io/blog/2015/08/03/let_s_start_clojurescript_with_luminus_template.html)\n", "tags": ["Clojure", "ClojureScript"]}