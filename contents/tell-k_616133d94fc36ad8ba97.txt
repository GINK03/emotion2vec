{"context": "\n\n\u6982\u8981\n\n\u540c\u50da\u304c\u767a\u8868\u3057\u3066\u305f\u5185\u5bb9\u3092\u898b\u3066\u81ea\u5206\u7528\u306b\u8abf\u3079\u3066\u30e1\u30e2\u3063\u305f\u3002\nDjango\u306e\u30e2\u30c7\u30eb\u3067\u30af\u30e9\u30b9\u5909\u6570\u3067\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u30af\u30e9\u30b9\u304b\u3089\u6d88\u3048\u308b\u306e\u306a\u3093\u3067\uff1f\u3068\u3044\u3046\u8a71\u304c\u3042\u3063\u305f\n\u4f55\u6545\u305d\u3046\u306a\u308b\u306e\u304b\u3068\u3044\u3046\u8a71\u3092\u9806\u3092\u8ffd\u3063\u3066\u7c21\u6f54(\u96d1)\u306b\u6b8b\u3059\n\n\n\u30af\u30e9\u30b9\u5909\u6570\n\n\u307e\u305a\u30af\u30e9\u30b9\u5909\u6570\u306e\u8a71\u304b\u3089\n\u30af\u30e9\u30b9\u5909\u6570\u306f\u3001\u5168\u3066\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5171\u6709\u3055\u308c\u308b\u3002\nhttp://docs.python.jp/3/tutorial/classes.html#class-and-instance-variables\n\nclass Person:\n    name = 'takanory'\n\nPerson.name # => takanory\n\np1 = Person()\np1.name # => takanory\n\nassert Person.name is p1.name  # same object\n\n\nDjango\u30e2\u30c7\u30eb\u304b\u3089\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u6d88\u3048\u308b\n\n\u6b21\u306bDjango\u306e\u30e2\u30c7\u30eb\u5b9a\u7fa9\u3092\u898b\u308b\n\nmodels.Model \u3092\u7d99\u627f\u3057\u3066\u306f\u3044\u308b\u304c\u3001\u666e\u901a\u306ePython\u306e\u30af\u30e9\u30b9\u5b9a\u7fa9\u3067\u3042\u308b\n\u3060\u304c\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30af\u30e9\u30b9\u5909\u6570\u304c\u5b58\u5728\u3057\u306a\u3044\n\nclass Person(models.Model):\n    name = models.CharField(max_length=255, default='takanory')\n    age = 37\n\n# \u666e\u901a\u306e\u30af\u30e9\u30b9\u5909\u6570\u306f\u5b58\u5728\u3059\u308b\nPerson.age # => 37\n\n# Field\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30af\u30e9\u30b9\u5909\u6570 \u300cname\u300d \u304c\u306a\u3044\nPerson.name \n# => AttributeError: type object 'Person' has no attribute 'name'\n\n# \u5b9f\u306f\u300cname\u300d\u306f\u300c_meta.fields\u300d\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\nPerson._meta.fields\n# => (<django.db.models.fields.AutoField: id>, <django.db.models.fields.CharField: name>)\n\n\n\u666e\u6bb5\u3001Django\u3092\u4f7f\u3063\u3066\u308b\u4eba\u306b\u3068\u3063\u3066\u306f\u4f55\u3082\u4e0d\u601d\u8b70\u3067\u306f\u306a\u3044\n\u3051\u3069\u3088\u304f\u8003\u3048\u305f\u3089Python\u306e\u6319\u52d5\u3068\u3057\u3066\u3053\u308c\u304a\u304b\u3057\u304f\u306a\u3044\u3067\u3059\u304b\uff1f \u3068\u3044\u3046\u7591\u554f\n\n\n\u30af\u30e9\u30b9\u3068\u30e1\u30bf\u30af\u30e9\u30b9\n\n\u3053\u306e\u7591\u554f\u306b\u7b54\u3048\u308b\u305f\u3081\u306b\u306f\u3001\u30e1\u30bf\u30af\u30e9\u30b9\u306e\u8a71\u304c\u5fc5\u8981\u306b\u306a\u308b\n\ntype \u3067\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b \n\u30af\u30e9\u30b9\u5b9a\u7fa9\u3068\u306f type \u3067\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3068\u540c\u7fa9\u3067\u3042\u308b\n\u30af\u30e9\u30b9\u306f type \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\n\n# \u666e\u901a\u306e\u30af\u30e9\u30b9\u5b9a\u7fa9\nclass Person:\n    name = 'takanory`\n\n# \u4e0a\u8a18\u30af\u30e9\u30b9\u5b9a\u7fa9\u3068\u540c\u3058\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u300cPerson\u300d\u3092\u751f\u6210\u3059\u308b\nPerson = type('Person', tuple(), {'name': 'takanory'})\n\n# \u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f type \u306e \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\nassert isinstance(Person, type) is True \n\n\n\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u3001\u5143\u3068\u306a\u308b\u30af\u30e9\u30b9\u306e\u3053\u3068\u3092\u30e1\u30bf\u30af\u30e9\u30b9\u3068\u547c\u3076\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f type \u3092\u30e1\u30bf\u30af\u30e9\u30b9\u3068\u3057\u3066\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n\nmetaclass \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5225\u306e\u30e1\u30bf\u30af\u30e9\u30b9\u3092\u5229\u7528\u3067\u304d\u308b\u3002\n\u3064\u307e\u308a\u30af\u30e9\u30b9\u5b9a\u7fa9\u306e\u4ed5\u65b9\u305d\u306e\u3082\u306e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u53ef\u80fd\n\nclass Taka22(type):\n    \"\"\" \n    name \u304c 'takanory' \u306e\u5834\u5408\u306e\u307f\n    nickname \uff1d 'taka22' \u3068\u3044\u3046\u30af\u30e9\u30b9\u5909\u6570\u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30bf\u30af\u30e9\u30b9\n    \"\"\"\n    def __new__(cls, name, bases, attrs):\n        if attrs.get('name') == 'takanory':\n            attrs['nickname'] = 'taka22'\n        return super().__new__(cls, name, bases, attrs)  \n\nclass Person(metaclass=Taka22):\n    name = 'takanory'\n\nPerson.nickname # => 'taka22'\n\n\nDjango\u306e\u30bd\u30fc\u30b9\u3092\u8ffd\u3046\n\n\u3053\u3053\u307e\u3067\u6765\u308b\u3068\u30af\u30e9\u30b9\u304b\u3089\u300c\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u6d88\u3048\u3066\u308b\u300d\u306e\u306f\u3001\u30e1\u30bf\u30af\u30e9\u30b9\u304c\u3084\u3063\u3066\u308b\u3093\u3060\u308d\u3046\u3068\u3044\u3046\u60f3\u50cf\u304c\u3064\u304f\n\u5b9f\u969b\u306b\u8a72\u5f53\u7b87\u6240\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n\n\nModel\u30af\u30e9\u30b9\u306e\u30e1\u30bf\u30af\u30e9\u30b9\u3092\u78ba\u8a8d\n\n\nModel \u30af\u30e9\u30b9\u306f ModelBase \u3068\u3044\u3046\u30e1\u30bf\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u3066\u308b\n\nclass Model(six.with_metaclass(ModelBase)):\n    _deferred = False\n\n    def __init__(self, *args, **kwargs):\n\n# refs https://github.com/django/django/blob/master/django/db/models/base.py#L355\n\n\n\nsix \u306f Python2 \u3068 Python3\u306e\u4e92\u63db\u6027\u3092\u4fdd\u3064\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n Python2\u3068Python3\u3067\u306f metaclass \u306e\u6307\u5b9a\u306e\u4ed5\u65b9\u306b\u5dee\u7570\u304c\u3042\u308b\u306e\u3067\u305d\u308c\u57cb\u3081\u3066\u304f\u308c\u308b\n\n# python3\nclass Hoge(metaclass=NewMeta):\n\n# python2\nclass Hoge(object):\n    __metaclass__ = NewMeta\n\n# python3 and python2\nclass Hoge(six.with_metaclass(NewMeta):\n\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6d88\u3057\u3066\u3044\u308b\u5834\u6240\n\n\u30e1\u30bf\u30af\u30e9\u30b9 ModelBase \u306e\u4e2d\u3067\u306f\u3001attrs(\u30af\u30e9\u30b9\u5909\u6570\u304c\u5165\u3063\u3066\u3044\u308b) \u3092 \u89aa\u30af\u30e9\u30b9( type )\u306e new(super_new) \u306b\u6e21\u3057\u3066\u3044\u306a\u3044\n\nmodule \u3060\u3051\u3092 attrs \u3068\u3057\u3066\u6e21\u3057\u3066\u308b\u3002\u3053\u306e\u6642\u70b9\u3067\u30af\u30e9\u30b9\u5b9a\u7fa9\u304b\u3089\u306f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306a\u3069\u306e\u30af\u30e9\u30b9\u5909\u6570\u304c\u5168\u3066\u4e00\u65e6\u6d88\u3048\u3066\u3044\u308b\n\nclass ModelBase(type):\n    \"\"\"\n    Metaclass for all models.\n    \"\"\"\n    def __new__(cls, name, bases, attrs):\n        # \u89aa\u30af\u30e9\u30b9(type)\u306e __new__ \u30e1\u30bd\u30c3\u30c9\n        super_new = super(ModelBase, cls).__new__\n\n        # ~ \u7701\u7565 ~\n\n        # Create the class.\n        module = attrs.pop('__module__')\n        # module \u3060\u3051\u3092 attr \u3068\u3057\u3066\u6e21\u3057\u3066 new_class \u3092\u751f\u6210\u3057\u3066\u3044\u308b\n        # \u3053\u306e\u6642\u70b9\u3067\u30af\u30e9\u30b9\u5909\u6570\u306f\u6d88\u3048\u3066\u3044\u308b\n        new_class = super_new(cls, name, bases, {'__module__': module})\n\n# refs https://github.com/django/django/blob/master/django/db/models/base.py#L67             \n\n\n\u30d5\u30a3\u30fc\u30eb\u30c9 \u3092 _meta.fields \u306b\u79fb\u52d5\n\n\u3053\u306e\u5f8c\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u81ea\u8eab\u306e contribute_to_class \u3067 \u30e2\u30c7\u30eb\u306e  _meta.fields \u306b\u30bb\u30c3\u30c8\u3055\u308c\u308b \n \u5168\u3066\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f contribute_to_class \u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u671f\u5f85\u3059\u308b\n \u3064\u307e\u308a _meta.fields \u306b\u30bb\u30c3\u30c8\u3059\u308b\u304b\u5426\u304b\u306f Model \u3067\u306f\u306a\u304f Field \u306b\u8cac\u4efb\u304c\u79fb\u8b72\u3055\u308c\u3066\u3044\u308b \n contribute_to_class \u3092\u3082\u3063\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u5909\u6570\u306f\u305d\u306e\u307e\u307e\u30bb\u30c3\u30c8\u3055\u308c\u308b\n\ndef add_to_class(cls, name, value):\n    # We should call the contribute_to_class method only if it's bound\n    if not inspect.isclass(value) and hasattr(value, 'contribute_to_class'):\n        value.contribute_to_class(cls, name) # value \u306f \u30d5\u30a3\u30fc\u30eb\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n    else:\n        # contribute_to_class\u3092\u6301\u3063\u3066\u306a\u3044\n        # attr\u306f\u305d\u306e\u307e\u307e\u30af\u30e9\u30b9\u5b9a\u7fa9\u306b\u3068\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u308b(\u623b\u3055\u308c\u308b)\n        setattr(cls, name, value)\n\n# refs https://github.com/django/django/blob/c339a5a6f72690cd90d5a653dc108fbb60274a20/django/db/models/base.py#L303\n\n\n\nField \u306e contribute_to_class \u306e\u306a\u304b\u3067 Model._meta.fields \u306b\u30bb\u30c3\u30c8\u3055\u308c\u308b\n\ndef contribute_to_class(self, cls, name, private_only=False, virtual_only=NOT_PROVIDED):\n    # ~ \u7701\u7565\n\n    # \u3060\u3044\u305f\u3044\u3053\u306e\u8fba\u3067\u3001\u53d7\u3051\u53d6\u3063\u305fcls(=model)\u306e _meta \u306b fields \u3068\u3057\u3066\u81ea\u3089\u3092\u8ffd\u52a0\u3057\u3066\u308b.\n    self.model = cls\n    if private_only:\n        cls._meta.add_field(self, private=True)\n    else:\n        cls._meta.add_field(self)\n    if self.choices:\n        setattr(cls, 'get_%s_display' % self.name,\n                    curry(cls._get_FIELD_display, field=self))\n\n# refs https://github.com/django/django/blob/master/django/db/models/fields/__init__.py#L678\n\n\n\u307e\u3068\u3081\n\nDjango\u306e\u30e2\u30c7\u30eb\u304b\u3089\u30d5\u30a3\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30af\u30e9\u30b9\u5909\u6570\u304c\u3069\u3046\u3084\u3063\u3066\u6d88\u3048\u3066\u3044\u308b\u306e\u304b\uff1f\n\u305d\u308c\u306f Django \u306e Model \u304c\u72ec\u81ea\u306e\u30e1\u30bf\u30af\u30e9\u30b9(ModelBase) \u306e\u4e2d\u3067\u610f\u56f3\u7684\u306b\u3001\u30af\u30e9\u30b9\u5909\u6570\u304b\u3089\u6d88\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3042\u308b\n\u3053\u3053\u304b\u3089\u306f\u5b8c\u5168\u306a\u63a8\u6e2c\u3060\u304c\u3001\u3053\u3046\u3044\u3046\u5b9f\u88c5\u306b\u3057\u305f\u610f\u56f3\u306f\u3001\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u3068\u304d\u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u8b77\u3057\u305f\u304b\u3063\u305f\u3093\u3060\u308d\u3046\u306a\u601d\u3063\u305f\u3002\n\nclass Person(models.Model):\n    name = models.CharField(max_length=255, default='takanory')\n\np1 = Person()\np1.name # => 'takanory'\n\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u76f4\u63a5\u5024\u306e\u6587\u5b57\u5217\u300ctakanory\u300d\u53c2\u7167\u3067\u304d\u308b\n# Person\u30e2\u30c7\u30eb\u304c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3001self.name\u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u300c\u5024\u300d\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\n# \u3068\u540c\u6642\u306b\u3001\u30af\u30e9\u30b9\u5909\u6570\u300cPerson.name\u300d\u306f\u300cself.name\u300d\u3067\u306f\u53c2\u7167\u3067\u304d\u306a\u304f\u306a\u308b\n# \u305d\u306e\u305f\u3081\u300cPerson._meta.fields\u300d\u306b\u9000\u907f\u3057\u3066\u308b\u3093\u3058\u3083\u306a\u304b\u308d\u3046\u304b?\n\n\n\u53c2\u8003\n\nPython\u306e\u30e1\u30bf\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\nPython \u306e \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 (metaclass, \u30e1\u30bf\u30af\u30e9\u30b9) \u3092\u7406\u89e3\u3059\u308b\nDjango \u306e\u30e2\u30c7\u30eb\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30af\u30e9\u30b9\u5909\u6570\u306b\u3064\u3044\u3066\nMetaprogramming \u2014 Python 3 Patterns, Recipes and Idioms\nPython\u306b\u3088\u308b\u9ed2\u9b54\u8853\u5165\u9580\n[python]\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e(init, new, metaclass)\n[Python] \u30e1\u30bf\u30af\u30e9\u30b9\u3092\u305f\u304a\u3057\u305f\npython - \u30e1\u30bf\u30af\u30e9\u30b9\u3068\u7d99\u627f\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u6559\u3048\u3066\u304f\u3060\u3055\u3044 - \u30b9\u30bf\u30c3\u30af\u30fb\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\n[\u66f8\u7c4d] \u30a8\u30ad\u30b9\u30d1\u30fc\u30c8Python - 3.5.2-metaclass--\u30e1\u30bd\u30c3\u30c8\u3099\n[\u66f8\u7c4d] Python\u6587\u6cd5\u8a73\u89e3 - 6.4.7 \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\n# \u6982\u8981\n\n- \u540c\u50da\u304c\u767a\u8868\u3057\u3066\u305f\u5185\u5bb9\u3092\u898b\u3066\u81ea\u5206\u7528\u306b\u8abf\u3079\u3066\u30e1\u30e2\u3063\u305f\u3002\n- Django\u306e\u30e2\u30c7\u30eb\u3067\u30af\u30e9\u30b9\u5909\u6570\u3067\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u30af\u30e9\u30b9\u304b\u3089\u6d88\u3048\u308b\u306e\u306a\u3093\u3067\uff1f\u3068\u3044\u3046\u8a71\u304c\u3042\u3063\u305f\n- \u4f55\u6545\u305d\u3046\u306a\u308b\u306e\u304b\u3068\u3044\u3046\u8a71\u3092\u9806\u3092\u8ffd\u3063\u3066\u7c21\u6f54(\u96d1)\u306b\u6b8b\u3059\n\n# \u30af\u30e9\u30b9\u5909\u6570\n\n- \u307e\u305a\u30af\u30e9\u30b9\u5909\u6570\u306e\u8a71\u304b\u3089\n- \u30af\u30e9\u30b9\u5909\u6570\u306f\u3001\u5168\u3066\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5171\u6709\u3055\u308c\u308b\u3002\n- http://docs.python.jp/3/tutorial/classes.html#class-and-instance-variables\n\n```py3\nclass Person:\n    name = 'takanory'\n    \nPerson.name # => takanory\n\np1 = Person()\np1.name # => takanory\n\nassert Person.name is p1.name  # same object\n```\n\n# Django\u30e2\u30c7\u30eb\u304b\u3089\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u6d88\u3048\u308b\n\n- \u6b21\u306bDjango\u306e\u30e2\u30c7\u30eb\u5b9a\u7fa9\u3092\u898b\u308b\n- **models.Model** \u3092\u7d99\u627f\u3057\u3066\u306f\u3044\u308b\u304c\u3001\u666e\u901a\u306ePython\u306e\u30af\u30e9\u30b9\u5b9a\u7fa9\u3067\u3042\u308b\n- \u3060\u304c\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30af\u30e9\u30b9\u5909\u6570\u304c\u5b58\u5728\u3057\u306a\u3044\n\n```py3\nclass Person(models.Model):\n    name = models.CharField(max_length=255, default='takanory')\n    age = 37\n\n# \u666e\u901a\u306e\u30af\u30e9\u30b9\u5909\u6570\u306f\u5b58\u5728\u3059\u308b\nPerson.age # => 37\n    \n# Field\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30af\u30e9\u30b9\u5909\u6570 \u300cname\u300d \u304c\u306a\u3044\nPerson.name \n# => AttributeError: type object 'Person' has no attribute 'name'\n\n# \u5b9f\u306f\u300cname\u300d\u306f\u300c_meta.fields\u300d\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\nPerson._meta.fields\n# => (<django.db.models.fields.AutoField: id>, <django.db.models.fields.CharField: name>)\n```\n\n- \u666e\u6bb5\u3001Django\u3092\u4f7f\u3063\u3066\u308b\u4eba\u306b\u3068\u3063\u3066\u306f\u4f55\u3082\u4e0d\u601d\u8b70\u3067\u306f\u306a\u3044\n- **\u3051\u3069\u3088\u304f\u8003\u3048\u305f\u3089Python\u306e\u6319\u52d5\u3068\u3057\u3066\u3053\u308c\u304a\u304b\u3057\u304f\u306a\u3044\u3067\u3059\u304b\uff1f \u3068\u3044\u3046\u7591\u554f**\n\n# \u30af\u30e9\u30b9\u3068\u30e1\u30bf\u30af\u30e9\u30b9\n\n- \u3053\u306e\u7591\u554f\u306b\u7b54\u3048\u308b\u305f\u3081\u306b\u306f\u3001\u30e1\u30bf\u30af\u30e9\u30b9\u306e\u8a71\u304c\u5fc5\u8981\u306b\u306a\u308b\n- **type** \u3067\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b \n- \u30af\u30e9\u30b9\u5b9a\u7fa9\u3068\u306f **type** \u3067\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3068\u540c\u7fa9\u3067\u3042\u308b\n- \u30af\u30e9\u30b9\u306f **type** \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\n\n```py3\n# \u666e\u901a\u306e\u30af\u30e9\u30b9\u5b9a\u7fa9\nclass Person:\n    name = 'takanory`\n\n# \u4e0a\u8a18\u30af\u30e9\u30b9\u5b9a\u7fa9\u3068\u540c\u3058\u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u300cPerson\u300d\u3092\u751f\u6210\u3059\u308b\nPerson = type('Person', tuple(), {'name': 'takanory'})\n\n# \u30af\u30e9\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f type \u306e \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\nassert isinstance(Person, type) is True \n```\n\n- \u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u3001\u5143\u3068\u306a\u308b\u30af\u30e9\u30b9\u306e\u3053\u3068\u3092**\u30e1\u30bf\u30af\u30e9\u30b9**\u3068\u547c\u3076\n- \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f **type** \u3092**\u30e1\u30bf\u30af\u30e9\u30b9**\u3068\u3057\u3066\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n- **metaclass** \u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5225\u306e**\u30e1\u30bf\u30af\u30e9\u30b9**\u3092\u5229\u7528\u3067\u304d\u308b\u3002\n- \u3064\u307e\u308a\u30af\u30e9\u30b9\u5b9a\u7fa9\u306e\u4ed5\u65b9\u305d\u306e\u3082\u306e\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u53ef\u80fd\n\n```py3\nclass Taka22(type):\n    \"\"\" \n    name \u304c 'takanory' \u306e\u5834\u5408\u306e\u307f\n    nickname \uff1d 'taka22' \u3068\u3044\u3046\u30af\u30e9\u30b9\u5909\u6570\u3092\u8ffd\u52a0\u3059\u308b\u30e1\u30bf\u30af\u30e9\u30b9\n    \"\"\"\n    def __new__(cls, name, bases, attrs):\n        if attrs.get('name') == 'takanory':\n            attrs['nickname'] = 'taka22'\n        return super().__new__(cls, name, bases, attrs)  \n\nclass Person(metaclass=Taka22):\n    name = 'takanory'\n \nPerson.nickname # => 'taka22'\n```\n\n# Django\u306e\u30bd\u30fc\u30b9\u3092\u8ffd\u3046\n\n- \u3053\u3053\u307e\u3067\u6765\u308b\u3068\u30af\u30e9\u30b9\u304b\u3089\u300c\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u6d88\u3048\u3066\u308b\u300d\u306e\u306f\u3001\u30e1\u30bf\u30af\u30e9\u30b9\u304c\u3084\u3063\u3066\u308b\u3093\u3060\u308d\u3046\u3068\u3044\u3046\u60f3\u50cf\u304c\u3064\u304f\n- \u5b9f\u969b\u306b\u8a72\u5f53\u7b87\u6240\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n\n## Model\u30af\u30e9\u30b9\u306e\u30e1\u30bf\u30af\u30e9\u30b9\u3092\u78ba\u8a8d\n\n- **Model** \u30af\u30e9\u30b9\u306f **ModelBase** \u3068\u3044\u3046\u30e1\u30bf\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u3066\u308b\n\n```py3\nclass Model(six.with_metaclass(ModelBase)):\n    _deferred = False\n\n    def __init__(self, *args, **kwargs):\n\n# refs https://github.com/django/django/blob/master/django/db/models/base.py#L355\n```\n\n- [six](https://pypi.python.org/pypi/six) \u306f Python2 \u3068 Python3\u306e\u4e92\u63db\u6027\u3092\u4fdd\u3064\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n-  Python2\u3068Python3\u3067\u306f **metaclass** \u306e\u6307\u5b9a\u306e\u4ed5\u65b9\u306b\u5dee\u7570\u304c\u3042\u308b\u306e\u3067\u305d\u308c\u57cb\u3081\u3066\u304f\u308c\u308b\n\n```py3\n# python3\nclass Hoge(metaclass=NewMeta):\n\n# python2\nclass Hoge(object):\n    __metaclass__ = NewMeta\n\n# python3 and python2\nclass Hoge(six.with_metaclass(NewMeta):\n```\n\n## \u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6d88\u3057\u3066\u3044\u308b\u5834\u6240\n\n- \u30e1\u30bf\u30af\u30e9\u30b9 **ModelBase** \u306e\u4e2d\u3067\u306f\u3001attrs(\u30af\u30e9\u30b9\u5909\u6570\u304c\u5165\u3063\u3066\u3044\u308b) \u3092 \u89aa\u30af\u30e9\u30b9( **type** )\u306e new(super_new) \u306b\u6e21\u3057\u3066\u3044\u306a\u3044\n- **__module__** \u3060\u3051\u3092 attrs \u3068\u3057\u3066\u6e21\u3057\u3066\u308b\u3002\u3053\u306e\u6642\u70b9\u3067\u30af\u30e9\u30b9\u5b9a\u7fa9\u304b\u3089\u306f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306a\u3069\u306e\u30af\u30e9\u30b9\u5909\u6570\u304c\u5168\u3066\u4e00\u65e6\u6d88\u3048\u3066\u3044\u308b\n\n```py3\nclass ModelBase(type):\n    \"\"\"\n    Metaclass for all models.\n    \"\"\"\n    def __new__(cls, name, bases, attrs):\n        # \u89aa\u30af\u30e9\u30b9(type)\u306e __new__ \u30e1\u30bd\u30c3\u30c9\n        super_new = super(ModelBase, cls).__new__\n\n        # ~ \u7701\u7565 ~\n\n        # Create the class.\n        module = attrs.pop('__module__')\n        # module \u3060\u3051\u3092 attr \u3068\u3057\u3066\u6e21\u3057\u3066 new_class \u3092\u751f\u6210\u3057\u3066\u3044\u308b\n        # \u3053\u306e\u6642\u70b9\u3067\u30af\u30e9\u30b9\u5909\u6570\u306f\u6d88\u3048\u3066\u3044\u308b\n        new_class = super_new(cls, name, bases, {'__module__': module})\n\n# refs https://github.com/django/django/blob/master/django/db/models/base.py#L67             \n```\n\n## \u30d5\u30a3\u30fc\u30eb\u30c9 \u3092 **_meta.fields** \u306b\u79fb\u52d5\n\n- \u3053\u306e\u5f8c\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u81ea\u8eab\u306e **contribute_to_class** \u3067 \u30e2\u30c7\u30eb\u306e  **_meta.fields** \u306b\u30bb\u30c3\u30c8\u3055\u308c\u308b \n-  \u5168\u3066\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f **contribute_to_class** \u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u671f\u5f85\u3059\u308b\n-  \u3064\u307e\u308a **_meta.fields** \u306b\u30bb\u30c3\u30c8\u3059\u308b\u304b\u5426\u304b\u306f **Model** \u3067\u306f\u306a\u304f **Field** \u306b\u8cac\u4efb\u304c\u79fb\u8b72\u3055\u308c\u3066\u3044\u308b \n-  **contribute_to_class** \u3092\u3082\u3063\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u5909\u6570\u306f\u305d\u306e\u307e\u307e\u30bb\u30c3\u30c8\u3055\u308c\u308b\n\n```py3\ndef add_to_class(cls, name, value):\n    # We should call the contribute_to_class method only if it's bound\n    if not inspect.isclass(value) and hasattr(value, 'contribute_to_class'):\n        value.contribute_to_class(cls, name) # value \u306f \u30d5\u30a3\u30fc\u30eb\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n    else:\n        # contribute_to_class\u3092\u6301\u3063\u3066\u306a\u3044\n        # attr\u306f\u305d\u306e\u307e\u307e\u30af\u30e9\u30b9\u5b9a\u7fa9\u306b\u3068\u3057\u3066\u30bb\u30c3\u30c8\u3055\u308c\u308b(\u623b\u3055\u308c\u308b)\n        setattr(cls, name, value)\n\n# refs https://github.com/django/django/blob/c339a5a6f72690cd90d5a653dc108fbb60274a20/django/db/models/base.py#L303\n```\n\n- **Field** \u306e **contribute_to_class** \u306e\u306a\u304b\u3067 **Model._meta.fields** \u306b\u30bb\u30c3\u30c8\u3055\u308c\u308b\n\n```py3\ndef contribute_to_class(self, cls, name, private_only=False, virtual_only=NOT_PROVIDED):\n    # ~ \u7701\u7565\n\n    # \u3060\u3044\u305f\u3044\u3053\u306e\u8fba\u3067\u3001\u53d7\u3051\u53d6\u3063\u305fcls(=model)\u306e _meta \u306b fields \u3068\u3057\u3066\u81ea\u3089\u3092\u8ffd\u52a0\u3057\u3066\u308b.\n    self.model = cls\n    if private_only:\n        cls._meta.add_field(self, private=True)\n    else:\n        cls._meta.add_field(self)\n    if self.choices:\n        setattr(cls, 'get_%s_display' % self.name,\n                    curry(cls._get_FIELD_display, field=self))\n\n# refs https://github.com/django/django/blob/master/django/db/models/fields/__init__.py#L678\n```\n\n\n# \u307e\u3068\u3081\n\n- Django\u306e\u30e2\u30c7\u30eb\u304b\u3089\u30d5\u30a3\u30fc\u30eb\u30c9\u306a\u3069\u306e\u30af\u30e9\u30b9\u5909\u6570\u304c\u3069\u3046\u3084\u3063\u3066\u6d88\u3048\u3066\u3044\u308b\u306e\u304b\uff1f\n- **\u305d\u308c\u306f Django \u306e Model \u304c\u72ec\u81ea\u306e\u30e1\u30bf\u30af\u30e9\u30b9(ModelBase) \u306e\u4e2d\u3067\u610f\u56f3\u7684\u306b\u3001\u30af\u30e9\u30b9\u5909\u6570\u304b\u3089\u6d88\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3042\u308b**\n- \u3053\u3053\u304b\u3089\u306f\u5b8c\u5168\u306a\u63a8\u6e2c\u3060\u304c\u3001\u3053\u3046\u3044\u3046\u5b9f\u88c5\u306b\u3057\u305f\u610f\u56f3\u306f\u3001\u30e2\u30c7\u30eb\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u3068\u304d\u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u8b77\u3057\u305f\u304b\u3063\u305f\u3093\u3060\u308d\u3046\u306a\u601d\u3063\u305f\u3002\n\n```py3\nclass Person(models.Model):\n    name = models.CharField(max_length=255, default='takanory')\n    \np1 = Person()\np1.name # => 'takanory'\n\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u76f4\u63a5\u5024\u306e\u6587\u5b57\u5217\u300ctakanory\u300d\u53c2\u7167\u3067\u304d\u308b\n# Person\u30e2\u30c7\u30eb\u304c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u3001self.name\u306b\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u300c\u5024\u300d\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\n# \u3068\u540c\u6642\u306b\u3001\u30af\u30e9\u30b9\u5909\u6570\u300cPerson.name\u300d\u306f\u300cself.name\u300d\u3067\u306f\u53c2\u7167\u3067\u304d\u306a\u304f\u306a\u308b\n# \u305d\u306e\u305f\u3081\u300cPerson._meta.fields\u300d\u306b\u9000\u907f\u3057\u3066\u308b\u3093\u3058\u3083\u306a\u304b\u308d\u3046\u304b?\n```\n\n# \u53c2\u8003\n\n- [Python\u306e\u30e1\u30bf\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066](http://aodag.bitbucket.org/meta_class.html)\n- [Python \u306e \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 (__metaclass__, \u30e1\u30bf\u30af\u30e9\u30b9) \u3092\u7406\u89e3\u3059\u308b](http://www.yunabe.jp/docs/python_metaclass.html)\n- [Django \u306e\u30e2\u30c7\u30eb\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30af\u30e9\u30b9\u5909\u6570\u306b\u3064\u3044\u3066](http://atas.hatenablog.jp/entry/2016/04/21/203242)\n- [Metaprogramming &mdash; Python 3 Patterns, Recipes and Idioms](http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Metaprogramming.html)\n- [Python\u306b\u3088\u308b\u9ed2\u9b54\u8853\u5165\u9580](http://www.slideshare.net/ssuser38b704/ll-lang-blackmagic)\n- [[python]\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e(__init__, __new__, __metaclass__)](http://dackdive.hateblo.jp/entry/2015/08/02/100000)\n- [[Python] \u30e1\u30bf\u30af\u30e9\u30b9\u3092\u305f\u304a\u3057\u305f](http://note.crohaco.net/2016/python-metaclass/)\n- [python - \u30e1\u30bf\u30af\u30e9\u30b9\u3068\u7d99\u627f\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u6559\u3048\u3066\u304f\u3060\u3055\u3044 - \u30b9\u30bf\u30c3\u30af\u30fb\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc](http://ja.stackoverflow.com/a/16605)\n- [[\u66f8\u7c4d] \u30a8\u30ad\u30b9\u30d1\u30fc\u30c8Python - 3.5.2-metaclass--\u30e1\u30bd\u30c3\u30c8\u3099](http://www.amazon.co.jp/dp/4048686291?tag=study02-22)\n- [[\u66f8\u7c4d] Python\u6587\u6cd5\u8a73\u89e3 - 6.4.7 \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://www.amazon.co.jp/dp/4873116880?tag=study02-22)\n", "tags": ["Python", "Django"]}