{"context": "Django\u306eRESTframework\u3092\u4f7f\u3063\u3066\u3044\u308b\u969b\u306b\u8abf\u3079\u305f\u5185\u5bb9\u3067\u500b\u4eba\u7684\u306b\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u305f\u3044\u9805\u76ee\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\u8abf\u3079\u305f\u3089\u5f53\u305f\u308a\u524d\u306e\u5185\u5bb9\u3084\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u305f\u9805\u76ee\u307e\u3067\u3042\u308a\u307e\u3059\u3002\u672c\u8a18\u4e8b\u306e\u5185\u5bb9\u3067\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u3063\u305f\u308a\u3001\u305d\u3082\u305d\u3082\u3053\u3093\u306a\u554f\u984c\u306b\u76f4\u9762\u3059\u308b\u3053\u3068\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306a\u3069\u306e\u6307\u6458\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u30b3\u30e1\u30f3\u30c8\u7b49\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u30cd\u30b9\u30c8\u3057\u305fURL\u3092\u8868\u73fe\u3057\u305f\u3044\nrestframework\u306erouter\u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306arest api\u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u5bb9\u6613\u3067\u3059\u3002\n/api/v1/groups/ GET POST\n/api/v1/groups/1/ GET PUT PATCH DELETE\n/api/v1/members/ GET POST\n/api/v1/members/1/ GET PUT PATCH DELETE\n\n\u3057\u304b\u3057\u4ee5\u4e0b\u306e\u3088\u3046\u306burl\u304c\u30cd\u30b9\u30c8\u3057\u305fapi\u3092restframework\u306erouter\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u56f0\u96e3\u3067\u3059\u3002\n/api/v1/groups/ GET POST\n/api/v1/groups/1/ GET PUT PATCH DELETE\n/api/v1/groups/1/members/ GET POST\n/api/v1/groups/1/members/1/ GET PUT PATCH DELETE\n\n\n\u89e3\u6c7a\u65b9\u6cd5\n\u89e3\u6c7a\u65b9\u6cd5\u306fdrf-nested-routers\u3092\u4f7f\u3044\u307e\u3059\u3002\ndrf-nested-routers\u306f\u30cd\u30b9\u30c8\u3057\u305furl\u3092restframework\u4e0a\u3067\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n\u5c0e\u5165\u65b9\u6cd5\npip\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u884c\u3044\u307e\u3059\u3002\n$ pip install drf-nested-routers\n\n\n\u5b9f\u88c5\n\n\u4e00\u968e\u5c64\u76ee\u306erouter\u306frestframewrok\u6a19\u6e96\u306e\u3082\u306e\u3067\u306f\u306a\u304f\u3001drf-nested-routers\u5c02\u7528\u306erouter(SimpleRouter)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u4e00\u968e\u5c64\u76ee\u306eView\u3092register()\u30e1\u30bd\u30c3\u30c9\u3067\u767b\u9332\u3057\u307e\u3059\u3002\n\u4e8c\u968e\u5c64\u76ee\u306erouter\u3092\u7528\u610f\u3057\u307e\u3059\u3002\u4e8c\u968e\u5c64\u76ee\u3067\u306fNestedSimpleRouter\u3092\u4f7f\u7528\u3057\u3066\u4e00\u968e\u5c64\u76ee\u3068\u4e8c\u968e\u5c64\u76ee\u306erouter\u3092\u7d10\u4ed8\u3051\u307e\u3059\u3002\nNestedSimpleRouter\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9(groups_router)\u306eregister()\u30e1\u30bd\u30c3\u30c9\u3067\u4e8c\u968e\u5c64\u76ee\u306eView\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u6700\u5f8c\u306burlpatterns\u306e\u4e2d\u306b\u4e00\u968e\u5c64\u76ee\u306erouter.urls\n\n# urls.py\n\nfrom restframework_nested import routers\nfrom .views import *\n\nrouter = routers.SimpleRouter()\n\nrouter.register(r'groups', GroupViewSet)\ngroups_router = routers.NestedSimpleRouter(router, r'groups', lookup='group')\ngroups_router.register(r'members', MemberViewSet, base_name='groups-members')\n\nurlpatterns = [\n    url(r'^api/v1/', include(router.urls)),\n    url(r'^api/v1/', include(groups_router.urls)),\n]\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5f15\u6570\u3067\u305d\u308c\u305e\u308c\u306eprimary_key\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u5f15\u6570\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u540d\u306furls.py\u3067\u6307\u5b9a\u3057\u305flookup\u540d+_pk\u3067\u3059\u3002\n# views.py\nclass GroupViewSet(viewsets.ViewSet):\n    def list(self, request):\n        (...)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None):\n        group = self.queryset.get(pk=pk)\n        (...)\n        return Response(serializer.data)\n\n\nclass MemberViewSet(viewsets.ViewSet):\n    def list(self, request, group_pk=None):\n        members = self.queryset.filter(group=group_pk)\n        (...)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None, group_pk=None):\n        member = self.queryset.get(pk=pk, group=group_pk)\n        (...)\n        return Response(serializer.data)\n\n\nModelViewSet\u3067\u5b9f\u88c5\u3055\u308c\u305fREST API\u306ePOST\u3067\u4e00\u5ea6\u306b\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3044\n\u5b9f\u306f\u6a19\u6e96\u306eviews.ModelViewSet\u306ecreate()\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u4e00\u5ea6\u306b\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u304b\u3063\u305f\u3089\u305d\u306e\u5206\u3060\u3051API\u3092\u53e9\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n\u89e3\u6c7a\u65b9\u6cd5\n\n\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\n\u305d\u3053\u3067\u3001views.ModelViewSet\u3067\u5358\u4f53\u304a\u3088\u3073\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3067\u304d\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u3057\u3066\u9069\u5f53\u306a\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\ndef multi_create(serializer_class=None):\n    def __multi_create(function):\n        def __wrapper(self, request, *args, **kwargs):\n            many = False\n            if isinstance(request.data, list):\n                many = True\n            serializer = serializer_class(data=request.data, many=many)\n            if serializer.is_valid():\n                serializer.save()\n                headers = self.get_success_headers(serializer.data)\n                data = serializer.data\n                result = function(self, request, *args, **kwargs)\n                if result is not None:\n                    return result\n                if many:\n                    data = list(data)\n                return Response(data,\n                                status=status.HTTP_201_CREATED,\n                                headers=headers)\n            else:\n                return Response(serializer.errors,\n                                status=status.HTTP_400_BAD_REQUEST)\n        return __wrapper\n    return __multi_create\n\n\n\u4f7f\u3044\u65b9\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bmulti_create\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u5148\u307b\u3069\u4fdd\u5b58\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304b\u3089import\u3057\u3066ViewSet\u306ecreate()\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3051\u307e\u3059\u3002\u5f15\u6570\u306f\u4f5c\u6210\u3057\u305f\u3044\u30e2\u30c7\u30eb\u306b\u5bfe\u5fdc\u3057\u305fSerializer\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n# views.py\n\nfrom .decorators import multi_create\n\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n\n    @multi_create(serializer_class=MySerializer)\n    def create(self, request):\n        pass\n\n\u3042\u3068\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u5f62\u5f0f\u306eJSON\u30c7\u30fc\u30bf\u3092POST\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n[\n    {\"name\": \"hoge\"},\n    {\"name\": \"fuga\"}\n]\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n[\n    {\n        \"id\": 1,\n        \"name\": \"hoge\"\n    },\n    {\n        \"id\": 2,\n        \"name\": \"fuga\"\n    }\n]\n\n\nSerializer\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u52d5\u7684\u306b\u6c7a\u3081\u305f\u3044\nSerializer\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u52d5\u7684\u306b\u6c7a\u3081\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u89e3\u6c7a\n\u4eca\u56de\u306fserializers.SerializerMethodField()\u3092\u4f7f\u3044\u307e\u3059\u3002\nserializers.SerializerMethodField()\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u306b\u3088\u3063\u3066\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u6c7a\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306aModel\u30af\u30e9\u30b9\u3068name + _hoge\u3092\u8fd4\u3059hoge()\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n# modles.py\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    def hoge(self):\n        return \"{}_hoge\".format(self.name)\n\nSerializer\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bserializers.SerializerMethodField()\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u306e\u3088\u308avalue\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u52d5\u7684\u306b\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u9069\u7528\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u540d\u306fget_ + \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u3059\u3002\u4eca\u56de\u306fget_value()\u30e1\u30bd\u30c3\u30c9\u306e\u8fd4\u5374\u5024\u304cvalue\u306e\u5024\u3068\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u9069\u7528\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u540d\u3092SerializerMethodField()\u306emethod_name\u3068\u3044\u3046\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n# serializer.py\nclass MySerializer(serializers.ModelSerializer):\n    value = serializers.SerializerMethodField()\n\n    class Meta:\n        model = MyModel\n\n    def get_value(self, obj):\n        return obj.hoge()\n\n\nModel\u3084Selializer\u306a\u3069\u3067\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u8fd4\u3057\u305f\u3044\nAPI\u304c\u53e9\u304b\u308cViewSet\u306ecreate()\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u3068\u3057\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306aModel\u30af\u30e9\u30b9\u306esave()\u30e1\u30bd\u30c3\u30c9\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u3084\u3063\u3066\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u884c\u3048\u3070\u3044\u3044\u306e\u3067\u3057\u3087\u3046\u304b\u3002\ntry except\u3067\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3059\u308b\u306b\u3082MyViewSet\u30af\u30e9\u30b9\u306b\u306f\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306f\u306a\u304f\u3001MyModel\u306esave()\u30e1\u30bd\u30c3\u30c9\u306f\u5b8c\u5168\u306b\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u3067\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n# views.py\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n\n# models.py\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    def save(self, force_insert=False, force_update=False,\n             using=None, update_fields=None):\n        if self.hoge():\n            raise HogeError('hoge error.')\n        super(MyModel, self).save(*args, **kwargs)\n\n    def hoge():\n        (...)\n\n\n\u89e3\u6c7a\u65b9\u6cd5\n\n\uff11\u3064\u76ee\n\u4e00\u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bcreate()\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3057\u3066\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u3053\u3068\u3067\u3059\u3002\n# views.py\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n\n    def create(self, request):\n        try:\n           super(MyViewSet, self).create(*args, **kwargs) \n        except HogeError:\n            (....)\n            return Response(content, status=status.HTTP_400_BAD_REQUEST)\n\n    def update(self, request):\n        try:\n           super(MyViewSet, self).update(*args, **kwargs) \n        except HogeError:\n            (....)\n            return Response(content, status=status.HTTP_400_BAD_REQUEST)\n\n\u3053\u306e\u65b9\u6cd5\u3067\u306fcreate\u3068update\u306e\u969b\u306b\u305d\u308c\u305e\u308c\u540c\u3058\u3088\u3046\u306bError\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n\uff12\u3064\u76ee\n\u305d\u3053\u3067\u3082\u3046\u4e00\u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\u3068\u3057\u3066handle_exception()\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\nhandle_exception\u306frestframework\u306e\u6a19\u6e96\u3067\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044HTTP\u30e1\u30bd\u30c3\u30c9\u3092\u53e9\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\nHTTP/1.1 405 Method Not Allowed\nContent-Type: application/json\nContent-Length: 42\n\n{\"detail\": \"Method 'DELETE' not allowed.\"}\n\n\u3053\u306e\u65b9\u6cd5\u3067\u306fhandler_exception\u3067except\u3055\u308c\u3066\u3044\u306a\u3044\u30a8\u30e9\u30fc\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u5148\u3067except\u3057\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3059\u3002\n# views.py\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n\n    def handle_exception(self, exc):\n        try:\n            return super(MyViewSet, self).handle_exception(exc)\n        except HogeError:\n            content = {'detail': '{}'.format(exc.args)}\n            return Response(content, status=status.HTTP_400_BAD_REQUEST)\n\n\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u3063\u3066\u3053\u306eMyViewSet\u5185\u3067\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u3092\u5168\u3066\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306btry except\u3067\u306f\u306a\u304f\u3001exc\u306e\u578b\u3092isinstance\u3067\u5224\u5b9a\u3059\u308b\u65b9\u6cd5\u3067\u3082\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\uff13\u3064\u76ee\n\uff13\u3064\u76ee\u304ccustom_exceptin_handler()\u3092\u4f7f\u3046\u65b9\u6cd5\u3067\u3059\u3002\nsettings.py\u306b\u3053\u308c\u304b\u3089\u5b9f\u88c5\u3059\u308bcustom_exception_handler\u306epath\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n# settings.py\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler'\n}\n\n\u5148\u307b\u3069\u306epath\u3067\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306bcustom_exception_handler()\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n# utils.py\nfrom rest_framework.views import exception_handler\n\ndef custom_exception_handler(exc, context):\n\n    response = exception_handler(exc, context)\n    if isinstance(exc, HogeError):\n        content = {'detail': '{}'.format(exc.args)}\n        return Response(content, status=status.HTTP_400_BAD_REQUEST)\n    return response\n\n\u3053\u306e\u65b9\u6cd5\u306e\u7279\u5fb4\u3068\u3057\u3066\u306f\u3059\u3079\u3066\u306eView\u3067\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u304c\u3053\u306ecustom_exception_handler\u306b\u96c6\u7d04\u3055\u308c\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u65b9\u6cd5\u306f\u305d\u308c\u305e\u308c\u30b9\u30b3\u30fc\u30d7\u304c\u7570\u306a\u308b\u306e\u3067\u72b6\u6cc1\u306b\u3088\u3063\u3066\u4f7f\u3044\u5206\u3051\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\nView\u306e\u5024\u3092Serializer\u306b\u6e21\u3057\u305f\u3044\n\n\u89e3\u6c7a\u65b9\u6cd5\n\u89e3\u6c7a\u65b9\u6cd5\u306f\u8003\u3048\u3066\u307f\u308c\u3070\u5f53\u305f\u308a\u524d\u306e\u8a71\u3067Serializer\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf(init)\u306b\u6e21\u3057\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u3002\n\u4eca\u56de\u306e\u4f8b\u3067\u306fuser_data\u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n# views.py\nclass MyViewSet(views.ModelViewSet):\n    def retrieve(self, request):\n        user_data = request.GET['user_data']\n        (...)\n        serializer = MySerializer(My_list, many=True, user_data=user_data)\n\n\u53d7\u3051\u53d6\u308b\u5074\u3067\u306finit\u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3057\u3066\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u304b\u3089\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n# serializer.py\nclass MySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = MyModel\n\n    def __init__(self, *args, **kwargs):\n        self.user_data = kwargs.pop('user_data', '')\n        super(MySerializer, self).__init__(*args, **kwargs)\n\nView\u306e\u5024\u3092Serializer\u306b\u6e21\u3059\u3053\u3068\u306f\u3042\u307e\u308a\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001serializers.SerializersMethodFiels()\u306a\u3069\u3092\u4f7f\u7528\u3059\u308b\u969b\u306f\u4f7f\u3046\u3053\u3068\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u4ee5\u4e0a\u3067\u3059\u3002\n\n\u53c2\u8003\n\ndrf-nested-routers\nhttps://github.com/alanjds/drf-nested-routers\n\nSerializer fields - Django REST framework\nhttp://www.django-rest-framework.org/api-guide/fields/#serializermethodfield\n\nCustom throttling response in django rest framework - CodeDump\nhttps://codedump.io/share/vqgOBceUoFXC/1/custom-throttling-response-in-django-rest-framework\n\nExceptions - Django REST framework\nhttp://www.django-rest-framework.org/api-guide/exceptions/\n\n\nDjango\u306eRESTframework\u3092\u4f7f\u3063\u3066\u3044\u308b\u969b\u306b\u8abf\u3079\u305f\u5185\u5bb9\u3067\u500b\u4eba\u7684\u306b\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304d\u305f\u3044\u9805\u76ee\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\u8abf\u3079\u305f\u3089\u5f53\u305f\u308a\u524d\u306e\u5185\u5bb9\u3084\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u305f\u9805\u76ee\u307e\u3067\u3042\u308a\u307e\u3059\u3002\u672c\u8a18\u4e8b\u306e\u5185\u5bb9\u3067\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u3063\u305f\u308a\u3001\u305d\u3082\u305d\u3082\u3053\u3093\u306a\u554f\u984c\u306b\u76f4\u9762\u3059\u308b\u3053\u3068\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306a\u3069\u306e\u6307\u6458\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u30b3\u30e1\u30f3\u30c8\u7b49\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\n# \u30cd\u30b9\u30c8\u3057\u305fURL\u3092\u8868\u73fe\u3057\u305f\u3044\nrestframework\u306erouter\u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306arest api\u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u5bb9\u6613\u3067\u3059\u3002\n\n```\n/api/v1/groups/ GET POST\n/api/v1/groups/1/ GET PUT PATCH DELETE\n/api/v1/members/ GET POST\n/api/v1/members/1/ GET PUT PATCH DELETE\n```\n\n\u3057\u304b\u3057\u4ee5\u4e0b\u306e\u3088\u3046\u306burl\u304c\u30cd\u30b9\u30c8\u3057\u305fapi\u3092restframework\u306erouter\u3067\u4f5c\u6210\u3059\u308b\u306e\u306f\u56f0\u96e3\u3067\u3059\u3002\n\n```\n/api/v1/groups/ GET POST\n/api/v1/groups/1/ GET PUT PATCH DELETE\n/api/v1/groups/1/members/ GET POST\n/api/v1/groups/1/members/1/ GET PUT PATCH DELETE\n```\n\n## \u89e3\u6c7a\u65b9\u6cd5\n\u89e3\u6c7a\u65b9\u6cd5\u306fdrf-nested-routers\u3092\u4f7f\u3044\u307e\u3059\u3002\ndrf-nested-routers\u306f\u30cd\u30b9\u30c8\u3057\u305furl\u3092restframework\u4e0a\u3067\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n### \u5c0e\u5165\u65b9\u6cd5\npip\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u884c\u3044\u307e\u3059\u3002\n\n```bash\n$ pip install drf-nested-routers\n```\n\n### \u5b9f\u88c5\n* \u4e00\u968e\u5c64\u76ee\u306erouter\u306frestframewrok\u6a19\u6e96\u306e\u3082\u306e\u3067\u306f\u306a\u304f\u3001drf-nested-routers\u5c02\u7528\u306erouter(SimpleRouter)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n* \u4e00\u968e\u5c64\u76ee\u306eView\u3092register()\u30e1\u30bd\u30c3\u30c9\u3067\u767b\u9332\u3057\u307e\u3059\u3002\n* \u4e8c\u968e\u5c64\u76ee\u306erouter\u3092\u7528\u610f\u3057\u307e\u3059\u3002\u4e8c\u968e\u5c64\u76ee\u3067\u306fNestedSimpleRouter\u3092\u4f7f\u7528\u3057\u3066\u4e00\u968e\u5c64\u76ee\u3068\u4e8c\u968e\u5c64\u76ee\u306erouter\u3092\u7d10\u4ed8\u3051\u307e\u3059\u3002\n* NestedSimpleRouter\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9(groups_router)\u306eregister()\u30e1\u30bd\u30c3\u30c9\u3067\u4e8c\u968e\u5c64\u76ee\u306eView\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n* \u6700\u5f8c\u306burlpatterns\u306e\u4e2d\u306b\u4e00\u968e\u5c64\u76ee\u306erouter.urls\n\n```py3\n# urls.py\n\nfrom restframework_nested import routers\nfrom .views import *\n\nrouter = routers.SimpleRouter()\n\nrouter.register(r'groups', GroupViewSet)\ngroups_router = routers.NestedSimpleRouter(router, r'groups', lookup='group')\ngroups_router.register(r'members', MemberViewSet, base_name='groups-members')\n\nurlpatterns = [\n\turl(r'^api/v1/', include(router.urls)),\n\turl(r'^api/v1/', include(groups_router.urls)),\n]\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5f15\u6570\u3067\u305d\u308c\u305e\u308c\u306eprimary_key\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\u5f15\u6570\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u540d\u306furls.py\u3067\u6307\u5b9a\u3057\u305flookup\u540d+_pk\u3067\u3059\u3002\n\n```py3\n# views.py\nclass GroupViewSet(viewsets.ViewSet):\n    def list(self, request):\n        (...)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None):\n        group = self.queryset.get(pk=pk)\n        (...)\n        return Response(serializer.data)\n\n\nclass MemberViewSet(viewsets.ViewSet):\n    def list(self, request, group_pk=None):\n        members = self.queryset.filter(group=group_pk)\n        (...)\n        return Response(serializer.data)\n\n    def retrieve(self, request, pk=None, group_pk=None):\n        member = self.queryset.get(pk=pk, group=group_pk)\n        (...)\n        return Response(serializer.data)\n```\n\n# ModelViewSet\u3067\u5b9f\u88c5\u3055\u308c\u305fREST API\u306ePOST\u3067\u4e00\u5ea6\u306b\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3044\n\n\u5b9f\u306f\u6a19\u6e96\u306eviews.ModelViewSet\u306ecreate()\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u4e00\u5ea6\u306b\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u305f\u304b\u3063\u305f\u3089\u305d\u306e\u5206\u3060\u3051API\u3092\u53e9\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n## \u89e3\u6c7a\u65b9\u6cd5\n\n### \u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\n\u305d\u3053\u3067\u3001views.ModelViewSet\u3067\u5358\u4f53\u304a\u3088\u3073\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3067\u304d\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30fc\u3057\u3066\u9069\u5f53\u306a\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n```py3\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\ndef multi_create(serializer_class=None):\n    def __multi_create(function):\n        def __wrapper(self, request, *args, **kwargs):\n            many = False\n            if isinstance(request.data, list):\n                many = True\n            serializer = serializer_class(data=request.data, many=many)\n            if serializer.is_valid():\n                serializer.save()\n                headers = self.get_success_headers(serializer.data)\n                data = serializer.data\n                result = function(self, request, *args, **kwargs)\n                if result is not None:\n                    return result\n                if many:\n                    data = list(data)\n                return Response(data,\n                                status=status.HTTP_201_CREATED,\n                                headers=headers)\n            else:\n                return Response(serializer.errors,\n                                status=status.HTTP_400_BAD_REQUEST)\n        return __wrapper\n    return __multi_create\n```\n\n### \u4f7f\u3044\u65b9\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bmulti_create\u30c7\u30b3\u30ec\u30fc\u30bf\u30fc\u3092\u5148\u307b\u3069\u4fdd\u5b58\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304b\u3089import\u3057\u3066ViewSet\u306ecreate()\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3051\u307e\u3059\u3002\u5f15\u6570\u306f\u4f5c\u6210\u3057\u305f\u3044\u30e2\u30c7\u30eb\u306b\u5bfe\u5fdc\u3057\u305fSerializer\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n```python\n# views.py\n\nfrom .decorators import multi_create\n\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n  \n\t@multi_create(serializer_class=MySerializer)\n    def create(self, request):\n        pass\n```\n\n\u3042\u3068\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u5f62\u5f0f\u306eJSON\u30c7\u30fc\u30bf\u3092POST\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\n```json\n[\n\t{\"name\": \"hoge\"},\n\t{\"name\": \"fuga\"}\n]\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\n```json\n[\n\t{\n\t\t\"id\": 1,\n\t\t\"name\": \"hoge\"\n\t},\n\t{\n\t\t\"id\": 2,\n\t\t\"name\": \"fuga\"\n\t}\n]\n```\n\n\n\n# Serializer\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u52d5\u7684\u306b\u6c7a\u3081\u305f\u3044\nSerializer\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u5024\u3092\u52d5\u7684\u306b\u6c7a\u3081\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n## \u89e3\u6c7a\n\u4eca\u56de\u306fserializers.SerializerMethodField()\u3092\u4f7f\u3044\u307e\u3059\u3002\nserializers.SerializerMethodField()\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u306b\u3088\u3063\u3066\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u6c7a\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306aModel\u30af\u30e9\u30b9\u3068name + _hoge\u3092\u8fd4\u3059hoge()\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\n```py3\n# modles.py\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n    \n    def hoge(self):\n        return \"{}_hoge\".format(self.name)\n```\n\nSerializer\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bserializers.SerializerMethodField()\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u306e\u3088\u308avalue\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u52d5\u7684\u306b\u6c7a\u5b9a\u3057\u307e\u3059\u3002\u9069\u7528\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u540d\u306fget_ + \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u3059\u3002\u4eca\u56de\u306fget_value()\u30e1\u30bd\u30c3\u30c9\u306e\u8fd4\u5374\u5024\u304cvalue\u306e\u5024\u3068\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u9069\u7528\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u540d\u3092SerializerMethodField()\u306emethod_name\u3068\u3044\u3046\u5f15\u6570\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n```py3\n# serializer.py\nclass MySerializer(serializers.ModelSerializer):\n    value = serializers.SerializerMethodField()\n    \n    class Meta:\n        model = MyModel\n    \n    def get_value(self, obj):\n        return obj.hoge()\n```\n\n# Model\u3084Selializer\u306a\u3069\u3067\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u8fd4\u3057\u305f\u3044\nAPI\u304c\u53e9\u304b\u308cViewSet\u306ecreate()\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u3068\u3057\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306aModel\u30af\u30e9\u30b9\u306esave()\u30e1\u30bd\u30c3\u30c9\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u3084\u3063\u3066\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u884c\u3048\u3070\u3044\u3044\u306e\u3067\u3057\u3087\u3046\u304b\u3002\ntry except\u3067\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3059\u308b\u306b\u3082MyViewSet\u30af\u30e9\u30b9\u306b\u306f\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306f\u306a\u304f\u3001MyModel\u306esave()\u30e1\u30bd\u30c3\u30c9\u306f\u5b8c\u5168\u306b\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u306e\u4e2d\u3067\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\n```py3\n# views.py\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n```\n\n```py3\n# models.py\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n\n    def save(self, force_insert=False, force_update=False,\n             using=None, update_fields=None):\n        if self.hoge():\n            raise HogeError('hoge error.')\n        super(MyModel, self).save(*args, **kwargs)\n\n    def hoge():\n        (...)\n```\n\n## \u89e3\u6c7a\u65b9\u6cd5\n\n### \uff11\u3064\u76ee\n\u4e00\u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bcreate()\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3057\u3066\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u3053\u3068\u3067\u3059\u3002\n\n```py3\n# views.py\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n\n    def create(self, request):\n        try:\n           super(MyViewSet, self).create(*args, **kwargs) \n        except HogeError:\n            (....)\n            return Response(content, status=status.HTTP_400_BAD_REQUEST)\n\n    def update(self, request):\n        try:\n           super(MyViewSet, self).update(*args, **kwargs) \n        except HogeError:\n            (....)\n            return Response(content, status=status.HTTP_400_BAD_REQUEST)\n```\n\u3053\u306e\u65b9\u6cd5\u3067\u306fcreate\u3068update\u306e\u969b\u306b\u305d\u308c\u305e\u308c\u540c\u3058\u3088\u3046\u306bError\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n### \uff12\u3064\u76ee\n\u305d\u3053\u3067\u3082\u3046\u4e00\u3064\u306e\u89e3\u6c7a\u65b9\u6cd5\u3068\u3057\u3066handle_exception()\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\nhandle_exception\u306frestframework\u306e\u6a19\u6e96\u3067\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044HTTP\u30e1\u30bd\u30c3\u30c9\u3092\u53e9\u304f\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```\nHTTP/1.1 405 Method Not Allowed\nContent-Type: application/json\nContent-Length: 42\n\n{\"detail\": \"Method 'DELETE' not allowed.\"}\n```\n\n\u3053\u306e\u65b9\u6cd5\u3067\u306fhandler_exception\u3067except\u3055\u308c\u3066\u3044\u306a\u3044\u30a8\u30e9\u30fc\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u5148\u3067except\u3057\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\n```py3\n# views.py\nclass MyViewSet(viewsets.ModelViewSet):\n    queryset = MyModel.objects.all()\n    serializer_class = MySerializer\n\n    def handle_exception(self, exc):\n        try:\n            return super(MyViewSet, self).handle_exception(exc)\n        except HogeError:\n            content = {'detail': '{}'.format(exc.args)}\n            return Response(content, status=status.HTTP_400_BAD_REQUEST)\n```\n\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u3063\u3066\u3053\u306eMyViewSet\u5185\u3067\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u3092\u5168\u3066\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306btry except\u3067\u306f\u306a\u304f\u3001exc\u306e\u578b\u3092isinstance\u3067\u5224\u5b9a\u3059\u308b\u65b9\u6cd5\u3067\u3082\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n### \uff13\u3064\u76ee\n\uff13\u3064\u76ee\u304ccustom_exceptin_handler()\u3092\u4f7f\u3046\u65b9\u6cd5\u3067\u3059\u3002\n\nsettings.py\u306b\u3053\u308c\u304b\u3089\u5b9f\u88c5\u3059\u308bcustom_exception_handler\u306epath\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n```py3\n# settings.py\nREST_FRAMEWORK = {\n    'EXCEPTION_HANDLER': 'my_project.my_app.utils.custom_exception_handler'\n}\n```\n\n\u5148\u307b\u3069\u306epath\u3067\u6307\u5b9a\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306bcustom_exception_handler()\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```py3\n# utils.py\nfrom rest_framework.views import exception_handler\n\ndef custom_exception_handler(exc, context):\n\n    response = exception_handler(exc, context)\n    if isinstance(exc, HogeError):\n        content = {'detail': '{}'.format(exc.args)}\n        return Response(content, status=status.HTTP_400_BAD_REQUEST)\n    return response\n```\n\n\u3053\u306e\u65b9\u6cd5\u306e\u7279\u5fb4\u3068\u3057\u3066\u306f\u3059\u3079\u3066\u306eView\u3067\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u304c\u3053\u306ecustom_exception_handler\u306b\u96c6\u7d04\u3055\u308c\u307e\u3059\u3002\n\n\u3053\u308c\u3089\u306e\u65b9\u6cd5\u306f\u305d\u308c\u305e\u308c\u30b9\u30b3\u30fc\u30d7\u304c\u7570\u306a\u308b\u306e\u3067\u72b6\u6cc1\u306b\u3088\u3063\u3066\u4f7f\u3044\u5206\u3051\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\n# View\u306e\u5024\u3092Serializer\u306b\u6e21\u3057\u305f\u3044\n## \u89e3\u6c7a\u65b9\u6cd5\n\u89e3\u6c7a\u65b9\u6cd5\u306f\u8003\u3048\u3066\u307f\u308c\u3070\u5f53\u305f\u308a\u524d\u306e\u8a71\u3067Serializer\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf(__init__)\u306b\u6e21\u3057\u3066\u3042\u3052\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u3002\n\u4eca\u56de\u306e\u4f8b\u3067\u306fuser_data\u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u306b\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py3\n# views.py\nclass MyViewSet(views.ModelViewSet):\n    def retrieve(self, request):\n        user_data = request.GET['user_data']\n        (...)\n        serializer = MySerializer(My_list, many=True, user_data=user_data)\n```\n\n\u53d7\u3051\u53d6\u308b\u5074\u3067\u306f__init__\u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3057\u3066\u30ad\u30fc\u30ef\u30fc\u30c9\u5f15\u6570\u304b\u3089\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n\n```py3\n# serializer.py\nclass MySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = MyModel\n\n    def __init__(self, *args, **kwargs):\n        self.user_data = kwargs.pop('user_data', '')\n        super(MySerializer, self).__init__(*args, **kwargs)\n```\n\nView\u306e\u5024\u3092Serializer\u306b\u6e21\u3059\u3053\u3068\u306f\u3042\u307e\u308a\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001serializers.SerializersMethodFiels()\u306a\u3069\u3092\u4f7f\u7528\u3059\u308b\u969b\u306f\u4f7f\u3046\u3053\u3068\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\n\n\u4ee5\u4e0a\u3067\u3059\u3002\n\n\n\n# \u53c2\u8003\n* drf-nested-routers  \nhttps://github.com/alanjds/drf-nested-routers\n* Serializer fields - Django REST framework  \nhttp://www.django-rest-framework.org/api-guide/fields/#serializermethodfield\n* Custom throttling response in django rest framework - CodeDump  \nhttps://codedump.io/share/vqgOBceUoFXC/1/custom-throttling-response-in-django-rest-framework\n* Exceptions - Django REST framework  \nhttp://www.django-rest-framework.org/api-guide/exceptions/\n", "tags": ["Django", "REST-API", "RESTful", "Python", "django-rest-framework"]}