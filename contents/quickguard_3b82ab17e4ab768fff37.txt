{"context": "\n\n\u6982\u8981\nCloudFormation \u3092 \u4f7f\u7528\u3057\u305f Kubernetes \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30c4\u30fc\u30eb kube-aws \u3067 AWS \u4e0a\u306b Kubernetes \u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\n\u7279\u5fb4\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u6a5f\u80fd\u304c\u3042\u308b\n\nELB integration for Kubernetes Services allows for traffic ingress to selected microservices\nWorker machines are deployed in an Auto Scaling group for effortless scaling\nFull TLS is set up between Kubernetes components and users interacting with kubectl\n\n\u53c2\u8003\nhttps://coreos.com/kubernetes/docs/latest/kubernetes-on-aws.html\n\n\u74b0\u5883\n2016/01/14 \u6642\u70b9\u3067\u69cb\u7bc9\u3055\u308c\u308b\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\nCoreOS-alpha-891.0.0\nDocker version 1.9.1, build 4419fdb-dirty\nkubernetes v1.1.2\n\nVisualOps \u3067 VPC Import \u3057\u305f\u969b\u306e\u69cb\u6210\u56f3\n\nmaster node 1\u53f0\u3001worker node \u7528 AutoScalingGroup \u304c\u4f5c\u6210\u3055\u308c\u308b\n\n\u624b\u9806\nkube-aws \u3092\u9069\u5f53\u306a\u5834\u6240\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u89e3\u51cd\n$ wget https://github.com/coreos/coreos-kubernetes/releases/download/v0.3.0/kube-aws-linux-amd64.tar.gz\n$ tar zxvf kube-aws-linux-amd64.tar.gz\n\nkube-aws \u306e\u4f7f\u3044\u65b9\n$ ./kube-aws --help\nManage Kubernetes clusters on AWS\n\nUsage:\n  kube-aws [command]\n\nAvailable Commands:\n  destroy     Destroy an existing Kubernetes cluster\n  render      Render a CloudFormation template\n  status      Describe an existing Kubernetes cluster\n  up          Create a new Kubernetes cluster\n  version     Print version information and exit\n  help        Help about any command\n\nFlags:\n      --aws-debug[=false]: Log debug information from aws-sdk-go library\n      --config=\"cluster.yaml\": Location of kube-aws cluster config file\n\n\nUse \"kube-aws [command] --help\" for more information about a command.\n\nAWS Credentials \u3092\u8a2d\u5b9a\n$ export AWS_ACCESS_KEY_ID=\"AKXXXXXXXXXXXXXXXXXX\"\n$ export AWS_SECRET_ACCESS_KEY=\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n\n\u30b5\u30f3\u30d7\u30eb\u306e kubenetes \u30af\u30e9\u30b9\u30bf\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n$ curl --silent --location https://raw.githubusercontent.com/coreos/coreos-kubernetes/master/multi-node/aws/cluster.yaml.example > cluster.yaml\n\n\u30af\u30e9\u30b9\u30bf\u8a2d\u5b9a\n$ vi cluster.yaml\n\n\ncluster.yaml\n# Unique name of Kubernetes cluster. In order to deploy\n# more than one cluster into the same AWS account, this\n# name must not conflict with an existing cluster.\nclusterName: \"kubernetes\"\n\n# Name of the SSH keypair already loaded into the AWS\n# account being used to deploy this cluster.\nkeyName: \"\uff5bAWS\u306b\u767b\u9332\u3057\u305f Key pair name\uff5d\"\n\n# Region to provision Kubernetes cluster\nregion: \"ap-northeast-1\"\n\n# Availability Zone to provision Kubernetes cluster\navailabilityZone: \"ap-northeast-1a\"\n\n# DNS name routable to the Kubernetes controller nodes\n# from worker nodes and external clients. The deployer\n# is responsible for making this name routable\nexternalDNSName: \"\uff5bKubernetes API \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306e\u30c9\u30e1\u30a4\u30f3\u540d\uff5d\"\n\n# Instance type for controller node\ncontrollerInstanceType: \"t2.micro\"\n\n# Disk size (GiB) for controller node\ncontrollerRootVolumeSize: 10\n\n# Number of worker nodes to create\nworkerCount: 3\n\n# Instance type for worker nodes\nworkerInstanceType: \"t2.micro\"\n\n# Disk size (GiB) for worker nodes\nworkerRootVolumeSize: 10\n\n# Location of kube-aws artifacts used to deploy a new\n# Kubernetes cluster. The necessary artifacts are already\n# available in a public S3 bucket matching the version\n# of the kube-aws tool. This parameter is typically\n# overwritten only for development purposes.\n#artifactURL: https://coreos-kubernetes.s3.amazonaws.com/<VERSION>\n\n# CIDR for Kubernetes VPC\nvpcCIDR: \"10.0.0.0/16\"\n\n# CIDR for Kubernetes subnet\ninstanceCIDR: \"10.0.0.0/24\"\n\n# IP Address for controller in Kubernetes subnet\ncontrollerIP: 10.0.0.50\n\n# CIDR for all service IP addresses\nserviceCIDR: \"10.3.0.0/24\"\n\n# CIDR for all pod IP addresses\npodCIDR: \"10.2.0.0/16\"\n\n# IP address of Kubernetes controller service (must be contained by serviceCIDR)\nkubernetesServiceIP: \"10.3.0.1\"\n\n# IP address of Kubernetes dns service (must be contained by serviceCIDR)\ndnsServiceIP: \"10.3.0.10\"\n\n\n4\u53f0\u3067\u30af\u30e9\u30b9\u30bf\u69cb\u7bc9\n - mster :1\u53f0\n - worker node:3\u53f0 (AutoScalingGroup)\n\u30c7\u30d7\u30ed\u30a4\n$ ./kube-aws up\nInitialized TLS infrastructure\nWrote kubeconfig to /home/***/kube-aws/clusters/kubernetes/kubeconfig\nWaiting for cluster creation...\nSuccessfully created cluster\n\nCluster Name:   kubernetes\nController IP:  xxx.xxx.xxx.xxx(EIP \u304c\u8868\u793a\u3055\u308c\u308b)\n\nkube-aws \u306b\u3088\u3063\u3066\u4f5c\u6210\u3055\u308c\u308b kubernetes \u8a8d\u8a3c\u7528\u306e\u9375\u3068\u8a3c\u660e\u66f8\u306f90\u65e5\u9593\u3057\u304b\u4f7f\u3048\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\nPRODUCTION NOTE: the TLS keys and certificates generated by kube-aws should not be used to deploy a production Kubernetes cluster. Each component certificate is only valid for 90 days, while the CA is valid for 365 days. If deploying a production Kubernetes cluster, consider establishing PKI independently of this tool first.\n\u30c9\u30e1\u30a4\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n$ sudo vi /etc/hosts\n\n\u4ee5\u4e0b\u3092\u8ffd\u8a18\n\n/etc/hosts\n\uff5bController IP\uff5d    \uff5bcluster.yaml \u306b\u8a2d\u5b9a\u3057\u305f externalDNSName\uff5d\n\n\nkubectl \u306f\u4f5c\u6210\u3055\u308c\u305f clusters/\uff5bclusterName\uff5d/kubeconfig \u3092\u6307\u5b9a\u3057\u3066\u5b9f\u884c\u3059\u308b\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig cluster-info\nKubernetes master is running at https://\uff5bexternalDNSName\uff5d\nKubeDNS is running at https://\uff5bexternalDNSName\uff5d/api/v1/proxy/namespaces/kube-system/services/kube-dns\n\nnode \u78ba\u8a8d\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig get nodes\nNAME                                            LABELS                                                                 STATUS    AGE\nip-10-0-0-171.ap-northeast-1.compute.internal   kubernetes.io/hostname=ip-10-0-0-171.ap-northeast-1.compute.internal   Ready     7m\nip-10-0-0-172.ap-northeast-1.compute.internal   kubernetes.io/hostname=ip-10-0-0-172.ap-northeast-1.compute.internal   Ready     7m\nip-10-0-0-173.ap-northeast-1.compute.internal   kubernetes.io/hostname=ip-10-0-0-173.ap-northeast-1.compute.internal   Ready     7m\n\n\u4ee5\u4e0b\u30b3\u30de\u30f3\u30c9\u3067 CloudFormation template \u304c\u8868\u793a\u3055\u308c\u308b\n$ ./kube-aws render\n\n{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Conditions\": {\n        \"EmptyAvailabilityZone\": {\n            \"Fn::Equals\": [\n                {\n                    \"Ref\": \"AvailabilityZone\"\n                },\n                \"\"\n            ]\n        }\n    },\n    \"Description\": \"kube-aws Kubernetes cluster\",\n    \"Mappings\": {\n        \"RegionMap\": {\n            \"ap-northeast-1\": {\n\n...snip...\n\n\nKubernetes \u3067 Wordpress \u3092\u69cb\u7bc9\u3057\u3066\u307f\u308b\n\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306f\u3001example \u3092\u30d9\u30fc\u30b9\u306b\u4f5c\u6210\nmysql \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7528\u306e EBS Volume \u4f5c\u6210\n$ aws ec2 create-volume --availability-zone ap-northeast-1a --size 10 --volume-type gp2\n\n\u8868\u793a\u3055\u308c\u308b VolumeId \u3092\u30e1\u30e2\u3063\u3066\u304a\u304f\nMySQL Pod \u4f5c\u6210\n\nmysql.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mysql\n  labels:\n    name: mysql\nspec:\n  containers:\n    - resources:\n        limits :\n          cpu: 0.5\n      image: mysql:5.6\n      name: mysql\n      env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: yourpassword\n      ports:\n        - containerPort: 3306\n          name: mysql\n      volumeMounts:\n        - name: mysql-persistent-storage\n          mountPath: /var/lib/mysql\n  volumes:\n    - name: mysql-persistent-storage\n      awsElasticBlockStore:\n        volumeID: aws://ap-northeast-1a/\uff5b\u4e0a\u3067\u4f5c\u6210\u3057\u305f VolumeID\uff5d\n        fsType: ext4\n\n\nPod \u4f5c\u6210\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig create -f mysql.yaml\npod \"mysql\" created\n\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig get pod\nNAME        READY     STATUS    RESTARTS   AGE\nmysql       1/1       Running   0          5m\n\nMySQL Service \u4f5c\u6210\n\nmysql-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    name: mysql\n  name: mysql\nspec:\n  ports:\n    - port: 3306\n  selector:\n    name: mysql\n\n\nService \u4f5c\u6210\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig create -f mysql-service.yaml\nservice \"mysql\" created\n\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig get svc\nNAME         CLUSTER_IP   EXTERNAL_IP   PORT(S)    SELECTOR         AGE\nkubernetes   10.3.0.1     <none>        443/TCP    <none>           1h\nmysql        10.3.0.170   <none>        3306/TCP   name=mysql       5m\n\nwordpress \u30c7\u30fc\u30bf\u7528\u306e EBS Volume \u4f5c\u6210\n$ aws ec2 create-volume --availability-zone ap-northeast-1a --size 10 --volume-type gp2\n\n\u8868\u793a\u3055\u308c\u308b VolumeId \u3092\u30e1\u30e2\u3063\u3066\u304a\u304f\nWordpress Pod \u4f5c\u6210\n\nwordpress.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: wordpress\n  labels:\n    name: wordpress\nspec:\n  containers:\n    - image: wordpress\n      name: wordpress\n      env:\n        - name: WORDPRESS_DB_PASSWORD\n          value: yourpassword\n      ports:\n        - containerPort: 80\n          name: wordpress\n      volumeMounts:\n        - name: wordpress-persistent-storage\n          mountPath: /var/www/html\n  volumes:\n    - name: wordpress-persistent-storage\n      awsElasticBlockStore:\n        volumeID: aws://ap-northeast-1a/\uff5b\u4e0a\u3067\u4f5c\u6210\u3057\u305f VolumeID\uff5d\n        fsType: ext4\n\n\nPod \u4f5c\u6210\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig create -f wordpress.yaml\npod \"mysql\" wordpress\n\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig get pod\nNAME        READY     STATUS    RESTARTS   AGE\nmysql       1/1       Running   0          8m\nwordpress   1/1       Running   0          5m\n\nWordpress Service \u4f5c\u6210\n\nwordpress-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    name: wpfrontend\n  name: wpfrontend\nspec:\n  ports:\n    - port: 80\n  selector:\n    name: wordpress\n  type: LoadBalancer\n\n\nService \u4f5c\u6210\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig create -f wordpress-service.yaml\nservice \"mysql\" created\n\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig get svc\nNAME         CLUSTER_IP   EXTERNAL_IP   PORT(S)    SELECTOR         AGE\nkubernetes   10.3.0.1     <none>        443/TCP    <none>           55m\nmysql        10.3.0.170   <none>        3306/TCP   name=mysql       9m\nwpfrontend   10.3.0.130                 80/TCP     name=wordpress   5m\n\nService \u4f5c\u6210\u306e\u969b\u306b type: LoadBalancer \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u81ea\u52d5\u3067 ELB \u304c\u4f5c\u6210\u3055\u308c\u308b\u306e\u3067\u78ba\u8a8d\n$ aws elb describe-load-balancers\n{\n    \"LoadBalancerDescriptions\": [\n        {\n            \"Subnets\": [\n...snip...\n\n\u8868\u793a\u3055\u308c\u305f DNSName \u306b\u30d6\u30e9\u30a6\u30b6\u3067\u30a2\u30af\u30bb\u30b9\n\nWordpress \u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u305f\u3089OK\n\u6383\u9664\nkubernetes \u3067\u4f5c\u6210\u3055\u308c\u305f LoadBalancer(ELB)\u3001ELB \u7528 SecurityGroup \u306f CloudFormation \u7ba1\u7406\u5916\u3068\u306a\u308a\u3001\u524a\u9664\u3055\u308c\u306a\u3044\u306e\u3067\u624b\u52d5\u3067\u5b9f\u884c\n$ aws elb delete-load-balancer --load-balancer-name=\uff5bLoadBalancerName\uff5d\n\nVolume \u3082\u540c\u69d8\u306b\u524a\u9664\n$ aws ec2 delete-volume --volume-id=\uff5bVolumeID\uff5d\n\ndestroy\n$ ./kube-aws destroy\nDestroyed cluster\n\n# \u6982\u8981\nCloudFormation \u3092 \u4f7f\u7528\u3057\u305f Kubernetes \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30c4\u30fc\u30eb [kube-aws](https://github.com/coreos/coreos-kubernetes/tree/master/multi-node/aws) \u3067 AWS \u4e0a\u306b Kubernetes \u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\n\n\u7279\u5fb4\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u6a5f\u80fd\u304c\u3042\u308b\n\n- ELB integration for Kubernetes Services allows for traffic ingress to selected microservices\n- Worker machines are deployed in an Auto Scaling group for effortless scaling\n- Full TLS is set up between Kubernetes components and users interacting with kubectl\n\n\u53c2\u8003\nhttps://coreos.com/kubernetes/docs/latest/kubernetes-on-aws.html\n\n\n# \u74b0\u5883\n2016/01/14 \u6642\u70b9\u3067\u69cb\u7bc9\u3055\u308c\u308b\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n- CoreOS-alpha-891.0.0\n- Docker version 1.9.1, build 4419fdb-dirty\n- kubernetes v1.1.2\n\n[VisualOps](https://www.visualops.io/) \u3067 VPC Import \u3057\u305f\u969b\u306e\u69cb\u6210\u56f3\n![01.png](https://qiita-image-store.s3.amazonaws.com/0/105824/c9102164-8022-319a-e3bf-243c81cca476.png)\n\nmaster node 1\u53f0\u3001worker node \u7528 AutoScalingGroup \u304c\u4f5c\u6210\u3055\u308c\u308b\n\n# \u624b\u9806\n\n**kube-aws \u3092\u9069\u5f53\u306a\u5834\u6240\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u89e3\u51cd**\n\n```\n$ wget https://github.com/coreos/coreos-kubernetes/releases/download/v0.3.0/kube-aws-linux-amd64.tar.gz\n$ tar zxvf kube-aws-linux-amd64.tar.gz\n```\n\n**kube-aws \u306e\u4f7f\u3044\u65b9**\n\n```\n$ ./kube-aws --help\nManage Kubernetes clusters on AWS\n\nUsage:\n  kube-aws [command]\n\nAvailable Commands:\n  destroy     Destroy an existing Kubernetes cluster\n  render      Render a CloudFormation template\n  status      Describe an existing Kubernetes cluster\n  up          Create a new Kubernetes cluster\n  version     Print version information and exit\n  help        Help about any command\n\nFlags:\n      --aws-debug[=false]: Log debug information from aws-sdk-go library\n      --config=\"cluster.yaml\": Location of kube-aws cluster config file\n\n\nUse \"kube-aws [command] --help\" for more information about a command.\n```\n\n**AWS Credentials \u3092\u8a2d\u5b9a**\n\n```\n$ export AWS_ACCESS_KEY_ID=\"AKXXXXXXXXXXXXXXXXXX\"\n$ export AWS_SECRET_ACCESS_KEY=\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n```\n\n**\u30b5\u30f3\u30d7\u30eb\u306e kubenetes \u30af\u30e9\u30b9\u30bf\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9**\n\n```\n$ curl --silent --location https://raw.githubusercontent.com/coreos/coreos-kubernetes/master/multi-node/aws/cluster.yaml.example > cluster.yaml\n```\n\n**\u30af\u30e9\u30b9\u30bf\u8a2d\u5b9a**\n\n```\n$ vi cluster.yaml\n```\n\n```:cluster.yaml\n# Unique name of Kubernetes cluster. In order to deploy\n# more than one cluster into the same AWS account, this\n# name must not conflict with an existing cluster.\nclusterName: \"kubernetes\"\n\n# Name of the SSH keypair already loaded into the AWS\n# account being used to deploy this cluster.\nkeyName: \"\uff5bAWS\u306b\u767b\u9332\u3057\u305f Key pair name\uff5d\"\n\n# Region to provision Kubernetes cluster\nregion: \"ap-northeast-1\"\n\n# Availability Zone to provision Kubernetes cluster\navailabilityZone: \"ap-northeast-1a\"\n\n# DNS name routable to the Kubernetes controller nodes\n# from worker nodes and external clients. The deployer\n# is responsible for making this name routable\nexternalDNSName: \"\uff5bKubernetes API \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306e\u30c9\u30e1\u30a4\u30f3\u540d\uff5d\"\n\n# Instance type for controller node\ncontrollerInstanceType: \"t2.micro\"\n\n# Disk size (GiB) for controller node\ncontrollerRootVolumeSize: 10\n\n# Number of worker nodes to create\nworkerCount: 3\n\n# Instance type for worker nodes\nworkerInstanceType: \"t2.micro\"\n\n# Disk size (GiB) for worker nodes\nworkerRootVolumeSize: 10\n\n# Location of kube-aws artifacts used to deploy a new\n# Kubernetes cluster. The necessary artifacts are already\n# available in a public S3 bucket matching the version\n# of the kube-aws tool. This parameter is typically\n# overwritten only for development purposes.\n#artifactURL: https://coreos-kubernetes.s3.amazonaws.com/<VERSION>\n\n# CIDR for Kubernetes VPC\nvpcCIDR: \"10.0.0.0/16\"\n\n# CIDR for Kubernetes subnet\ninstanceCIDR: \"10.0.0.0/24\"\n\n# IP Address for controller in Kubernetes subnet\ncontrollerIP: 10.0.0.50\n\n# CIDR for all service IP addresses\nserviceCIDR: \"10.3.0.0/24\"\n\n# CIDR for all pod IP addresses\npodCIDR: \"10.2.0.0/16\"\n\n# IP address of Kubernetes controller service (must be contained by serviceCIDR)\nkubernetesServiceIP: \"10.3.0.1\"\n\n# IP address of Kubernetes dns service (must be contained by serviceCIDR)\ndnsServiceIP: \"10.3.0.10\"\n```\n\n4\u53f0\u3067\u30af\u30e9\u30b9\u30bf\u69cb\u7bc9\n - mster :1\u53f0\n - worker node:3\u53f0 (AutoScalingGroup)\n\n**\u30c7\u30d7\u30ed\u30a4**\n\n```\n$ ./kube-aws up\nInitialized TLS infrastructure\nWrote kubeconfig to /home/***/kube-aws/clusters/kubernetes/kubeconfig\nWaiting for cluster creation...\nSuccessfully created cluster\n\nCluster Name:   kubernetes\nController IP:  xxx.xxx.xxx.xxx(EIP \u304c\u8868\u793a\u3055\u308c\u308b)\n```\n\nkube-aws \u306b\u3088\u3063\u3066\u4f5c\u6210\u3055\u308c\u308b kubernetes \u8a8d\u8a3c\u7528\u306e\u9375\u3068\u8a3c\u660e\u66f8\u306f90\u65e5\u9593\u3057\u304b\u4f7f\u3048\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\n\n\n*PRODUCTION NOTE*: the TLS keys and certificates generated by kube-aws should not be used to deploy a production Kubernetes cluster. Each component certificate is only valid for 90 days, while the CA is valid for 365 days. If deploying a production Kubernetes cluster, consider establishing PKI independently of this tool first.\n\n\n\n**\u30c9\u30e1\u30a4\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b**\n\n```\n$ sudo vi /etc/hosts\n```\n\n\u4ee5\u4e0b\u3092\u8ffd\u8a18\n\n```:/etc/hosts\n\uff5bController IP\uff5d    \uff5bcluster.yaml \u306b\u8a2d\u5b9a\u3057\u305f externalDNSName\uff5d\n```\n\nkubectl \u306f\u4f5c\u6210\u3055\u308c\u305f clusters/\uff5bclusterName\uff5d/kubeconfig \u3092\u6307\u5b9a\u3057\u3066\u5b9f\u884c\u3059\u308b\n\n```\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig cluster-info\nKubernetes master is running at https://\uff5bexternalDNSName\uff5d\nKubeDNS is running at https://\uff5bexternalDNSName\uff5d/api/v1/proxy/namespaces/kube-system/services/kube-dns\n```\n\nnode \u78ba\u8a8d\n\n```\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig get nodes\nNAME                                            LABELS                                                                 STATUS    AGE\nip-10-0-0-171.ap-northeast-1.compute.internal   kubernetes.io/hostname=ip-10-0-0-171.ap-northeast-1.compute.internal   Ready     7m\nip-10-0-0-172.ap-northeast-1.compute.internal   kubernetes.io/hostname=ip-10-0-0-172.ap-northeast-1.compute.internal   Ready     7m\nip-10-0-0-173.ap-northeast-1.compute.internal   kubernetes.io/hostname=ip-10-0-0-173.ap-northeast-1.compute.internal   Ready     7m\n```\n\n\u4ee5\u4e0b\u30b3\u30de\u30f3\u30c9\u3067 CloudFormation template \u304c\u8868\u793a\u3055\u308c\u308b\n\n```\n$ ./kube-aws render\n```\n\n```\n{\n    \"AWSTemplateFormatVersion\": \"2010-09-09\",\n    \"Conditions\": {\n        \"EmptyAvailabilityZone\": {\n            \"Fn::Equals\": [\n                {\n                    \"Ref\": \"AvailabilityZone\"\n                },\n                \"\"\n            ]\n        }\n    },\n    \"Description\": \"kube-aws Kubernetes cluster\",\n    \"Mappings\": {\n        \"RegionMap\": {\n            \"ap-northeast-1\": {\n\n...snip...\n```\n\n# Kubernetes \u3067 Wordpress \u3092\u69cb\u7bc9\u3057\u3066\u307f\u308b\n\n\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306f\u3001[example](https://github.com/kubernetes/kubernetes/tree/release-1.1/examples/mysql-wordpress-pd) \u3092\u30d9\u30fc\u30b9\u306b\u4f5c\u6210\n\n**mysql \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u7528\u306e EBS Volume \u4f5c\u6210**\n\n```\n$ aws ec2 create-volume --availability-zone ap-northeast-1a --size 10 --volume-type gp2\n```\n\n\u8868\u793a\u3055\u308c\u308b VolumeId \u3092\u30e1\u30e2\u3063\u3066\u304a\u304f\n\n**MySQL Pod \u4f5c\u6210**\n\n```:mysql.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: mysql\n  labels:\n    name: mysql\nspec:\n  containers:\n    - resources:\n        limits :\n          cpu: 0.5\n      image: mysql:5.6\n      name: mysql\n      env:\n        - name: MYSQL_ROOT_PASSWORD\n          value: yourpassword\n      ports:\n        - containerPort: 3306\n          name: mysql\n      volumeMounts:\n        - name: mysql-persistent-storage\n          mountPath: /var/lib/mysql\n  volumes:\n    - name: mysql-persistent-storage\n      awsElasticBlockStore:\n        volumeID: aws://ap-northeast-1a/\uff5b\u4e0a\u3067\u4f5c\u6210\u3057\u305f VolumeID\uff5d\n        fsType: ext4\n```\n\nPod \u4f5c\u6210\n\n```\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig create -f mysql.yaml\npod \"mysql\" created\n```\n\n```\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig get pod\nNAME        READY     STATUS    RESTARTS   AGE\nmysql       1/1       Running   0          5m\n```\n\n**MySQL Service \u4f5c\u6210**\n\n```:mysql-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    name: mysql\n  name: mysql\nspec:\n  ports:\n    - port: 3306\n  selector:\n    name: mysql\n```\n\nService \u4f5c\u6210\n\n```\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig create -f mysql-service.yaml\nservice \"mysql\" created\n```\n\n```\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig get svc\nNAME         CLUSTER_IP   EXTERNAL_IP   PORT(S)    SELECTOR         AGE\nkubernetes   10.3.0.1     <none>        443/TCP    <none>           1h\nmysql        10.3.0.170   <none>        3306/TCP   name=mysql       5m\n```\n\n**wordpress \u30c7\u30fc\u30bf\u7528\u306e EBS Volume \u4f5c\u6210**\n\n```\n$ aws ec2 create-volume --availability-zone ap-northeast-1a --size 10 --volume-type gp2\n```\n\n\u8868\u793a\u3055\u308c\u308b VolumeId \u3092\u30e1\u30e2\u3063\u3066\u304a\u304f\n\n**Wordpress Pod \u4f5c\u6210**\n\n\n```:wordpress.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: wordpress\n  labels:\n    name: wordpress\nspec:\n  containers:\n    - image: wordpress\n      name: wordpress\n      env:\n        - name: WORDPRESS_DB_PASSWORD\n          value: yourpassword\n      ports:\n        - containerPort: 80\n          name: wordpress\n      volumeMounts:\n        - name: wordpress-persistent-storage\n          mountPath: /var/www/html\n  volumes:\n    - name: wordpress-persistent-storage\n      awsElasticBlockStore:\n        volumeID: aws://ap-northeast-1a/\uff5b\u4e0a\u3067\u4f5c\u6210\u3057\u305f VolumeID\uff5d\n        fsType: ext4\n```\n\nPod \u4f5c\u6210\n\n```\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig create -f wordpress.yaml\npod \"mysql\" wordpress\n```\n\n```\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig get pod\nNAME        READY     STATUS    RESTARTS   AGE\nmysql       1/1       Running   0          8m\nwordpress   1/1       Running   0          5m\n```\n\n**Wordpress Service \u4f5c\u6210**\n\n```:wordpress-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    name: wpfrontend\n  name: wpfrontend\nspec:\n  ports:\n    - port: 80\n  selector:\n    name: wordpress\n  type: LoadBalancer\n```\n\nService \u4f5c\u6210\n\n```\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig create -f wordpress-service.yaml\nservice \"mysql\" created\n```\n\n```\n$ kubectl --kubeconfig=clusters/kubernetes/kubeconfig get svc\nNAME         CLUSTER_IP   EXTERNAL_IP   PORT(S)    SELECTOR         AGE\nkubernetes   10.3.0.1     <none>        443/TCP    <none>           55m\nmysql        10.3.0.170   <none>        3306/TCP   name=mysql       9m\nwpfrontend   10.3.0.130                 80/TCP     name=wordpress   5m\n```\n\nService \u4f5c\u6210\u306e\u969b\u306b type: LoadBalancer \u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u81ea\u52d5\u3067 ELB \u304c\u4f5c\u6210\u3055\u308c\u308b\u306e\u3067\u78ba\u8a8d\n\n```\n$ aws elb describe-load-balancers\n{\n    \"LoadBalancerDescriptions\": [\n        {\n            \"Subnets\": [\n...snip...\n```\n\n\u8868\u793a\u3055\u308c\u305f DNSName \u306b\u30d6\u30e9\u30a6\u30b6\u3067\u30a2\u30af\u30bb\u30b9\n\n![01.png](https://qiita-image-store.s3.amazonaws.com/0/105824/7162469e-74ea-8942-3263-7e7b54ef4285.png)\n\n\nWordpress \u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u305f\u3089OK\n\n\n**\u6383\u9664**\n\nkubernetes \u3067\u4f5c\u6210\u3055\u308c\u305f LoadBalancer(ELB)\u3001ELB \u7528 SecurityGroup \u306f CloudFormation \u7ba1\u7406\u5916\u3068\u306a\u308a\u3001\u524a\u9664\u3055\u308c\u306a\u3044\u306e\u3067\u624b\u52d5\u3067\u5b9f\u884c\n\n```\n$ aws elb delete-load-balancer --load-balancer-name=\uff5bLoadBalancerName\uff5d\n```\n\nVolume \u3082\u540c\u69d8\u306b\u524a\u9664\n\n```\n$ aws ec2 delete-volume --volume-id=\uff5bVolumeID\uff5d\n```\n\ndestroy\n\n```\n$ ./kube-aws destroy\nDestroyed cluster\n```\n\n\n", "tags": ["AWS", "kubernetes", "CloudFormation", "CoreOS", "docker"]}