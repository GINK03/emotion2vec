{"context": " More than 1 year has passed since last update.\u666e\u6bb5\u30a2\u30d7\u30ea\u3057\u304b\u66f8\u3044\u3066\u306a\u304f\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u304b\u5fd8\u308c\u304c\u3061\u306a\u30a8\u30bbCS student\u3067\u3059\u304c\u3001\u4eca\u307e\u3067\u4e00\u756a\u30b7\u30f3\u30d7\u30eb\u3067\u7dba\u9e97\u306aquicksort\u306e\u8aac\u660e\u898b\u3064\u3051\u305f\u306e\u3067\u30e1\u30e2\u3063\u3068\u304f\u3002(\u5e38\u8b58...)\nhttps://www.youtube.com/watch?v=aQiWF4E8flQ\n\u5b9f\u88c5\u3059\u308b\u3068\u3053\u3046\u306a\u308b\nclass QuickSort\n  def initialize(numbers)\n    @numbers = numbers\n  end\n  def numbers\n    @numbers\n  end\n  def partition(start_i, end_i)\n    pivot = (start_i + end_i)/2\n    wall_index = start_i - 1\n    swap(pivot, end_i)\n    for i in (start_i..end_i-1)\n      if @numbers[i] < @numbers[end_i]\n        swap(wall_index+1, i)\n        wall_index += 1\n      end\n    end\n    swap(wall_index+1, end_i)\n    wall_index+1\n  end\n  def quicksort(start_i, end_i)\n    return if start_i >= end_i\n    partition_i = partition(start_i, end_i)\n    quicksort(start_i, partition_i-1)\n    quicksort(partition_i+1, end_i)\n  end\n  def swap(index_1, index_2)\n    temp = @numbers[index_1]\n    @numbers[index_1] = @numbers[index_2]\n    @numbers[index_2] = temp\n  end\nend\n\nwhile str = STDIN.gets\n  break if str.chomp == \"exit\"\n  array = str.chomp.split(' ').map{|x| x.to_i}\nend\n\nquick_sort = QuickSort.new(array)\nquick_sort.quicksort(0, array.size-1)\np quick_sort.numbers\n\n\n\u203b\u5e38\u8b58......\n\u3053\u306e\u671f\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7cfb\u5fa9\u7fd2\u3059\u308b\u305e\uff01\u76ee\u6307\u305b\u30c8\u30c3\u30d7\u30b3\u30fc\u30c0\u30fc(\u9060\u3044)\n\u666e\u6bb5\u30a2\u30d7\u30ea\u3057\u304b\u66f8\u3044\u3066\u306a\u304f\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u304b\u5fd8\u308c\u304c\u3061\u306a\u30a8\u30bbCS student\u3067\u3059\u304c\u3001\u4eca\u307e\u3067\u4e00\u756a\u30b7\u30f3\u30d7\u30eb\u3067\u7dba\u9e97\u306aquicksort\u306e\u8aac\u660e\u898b\u3064\u3051\u305f\u306e\u3067\u30e1\u30e2\u3063\u3068\u304f\u3002(\u5e38\u8b58...)\n\nhttps://www.youtube.com/watch?v=aQiWF4E8flQ\n\n\n\u5b9f\u88c5\u3059\u308b\u3068\u3053\u3046\u306a\u308b\n\n```.rb\nclass QuickSort\n  def initialize(numbers)\n    @numbers = numbers\n  end\n  def numbers\n    @numbers\n  end\n  def partition(start_i, end_i)\n    pivot = (start_i + end_i)/2\n    wall_index = start_i - 1\n    swap(pivot, end_i)\n    for i in (start_i..end_i-1)\n      if @numbers[i] < @numbers[end_i]\n        swap(wall_index+1, i)\n        wall_index += 1\n      end\n    end\n    swap(wall_index+1, end_i)\n    wall_index+1\n  end\n  def quicksort(start_i, end_i)\n    return if start_i >= end_i\n    partition_i = partition(start_i, end_i)\n    quicksort(start_i, partition_i-1)\n    quicksort(partition_i+1, end_i)\n  end\n  def swap(index_1, index_2)\n    temp = @numbers[index_1]\n    @numbers[index_1] = @numbers[index_2]\n    @numbers[index_2] = temp\n  end\nend\n\nwhile str = STDIN.gets\n  break if str.chomp == \"exit\"\n  array = str.chomp.split(' ').map{|x| x.to_i}\nend\n\nquick_sort = QuickSort.new(array)\nquick_sort.quicksort(0, array.size-1)\np quick_sort.numbers\n\n```\n\n\u203b\u5e38\u8b58......\n\n\u3053\u306e\u671f\u306b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7cfb\u5fa9\u7fd2\u3059\u308b\u305e\uff01\u76ee\u6307\u305b\u30c8\u30c3\u30d7\u30b3\u30fc\u30c0\u30fc(\u9060\u3044)\n", "tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}