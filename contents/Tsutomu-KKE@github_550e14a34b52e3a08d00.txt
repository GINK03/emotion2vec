{"context": "\n\n \u3084\u308a\u305f\u3044\u3053\u3068\n\u4e0b\u56f3\u306e\u3088\u3046\u306a\u30a8\u30ea\u30a2\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\u3053\u306e\u4e09\u89d2\u5f62\u306e\u4e2d\u592e\u306b\u30bb\u30f3\u30b5\u30fc\u3092\u8a2d\u7f6e\u3057\u3066\u3001\u30c7\u30fc\u30bf\u53ce\u96c6\u3092\u3057\u307e\u3059\u3002\n\n\u7dcf\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\u3092\u6700\u5927\u5316\u3059\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3059\u3002\n1\u3064\u306e\u4e09\u89d2\u5f62\u306b1\u3064\u307e\u3067\u3057\u304b\u30bb\u30f3\u30b5\u30fc\u306f\u7f6e\u3051\u307e\u305b\u3093\u3002\n1\u3064\u306e\u30bb\u30f3\u30b5\u30fc\u3092\u7f6e\u304f\u3068\u3001\u30c7\u30fc\u30bf\u91cf 3 \u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u4e88\u3081\u3001\u30bb\u30f3\u30b5\u30fc\u3092\u8a2d\u7f6e\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u7b87\u6240\u3068\u3001\u30bb\u30f3\u30b5\u30fc\u3092\u8a2d\u7f6e\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u7b87\u6240\u304c\u6c7a\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\u4e0b\u8868\u306e\u3088\u3046\u306b\u3001\u96a3\u308a\u306b\u5225\u306e\u30bb\u30f3\u30b5\u30fc\u304c\u3042\u308b\u3068\u3001\u5e72\u6e09\u3092\u8d77\u3053\u3057\u3066\u3001\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\u304c\u5404\u3005 1 \u6e1b\u308a\u307e\u3059\u3002(\u5408\u8a08 2 \u6e1b\u5c11)\n\n\n\u5f93\u3063\u3066\u3001\u5468\u308a\u306b2\u4ee5\u4e0a\u306e\u30bb\u30f3\u30b5\u30fc\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u8a2d\u7f6e\u3057\u306a\u3044\u65b9\u304c\u3088\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\n\n\n\n\u5468\u308a\u306e\u30bb\u30f3\u30b5\u30fc\u6570\n\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\n\u5e72\u6e09\u30c7\u30fc\u30bf\u91cf\n\u5168\u4f53\u3068\u3057\u3066\u5897\u3048\u308b\u30c7\u30fc\u30bf\u91cf\n\n\n\n\n0\n3\n0\n3\n\n\n1\n3\n2\n1\n\n\n2\n3\n4\n-1\n\n\n3\n3\n6\n-3\n\n\n\n\n \u6df7\u5408\u6574\u6570\u6700\u9069\u5316\u554f\u984c\u306b\u3088\u308b\u6700\u9069\u5316(\u6570\u7406\u554f\u984c\u306b\u3088\u308b\u30a2\u30d7\u30ed\u30fc\u30c1)\n\u6df7\u5408\u6574\u6570\u6700\u9069\u5316\u554f\u984c(Mixed Integer optimization Problem: MIP)\u3068\u3057\u3066\u30e2\u30c7\u30eb\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u5b9a\u5f0f\u5316\u3084\u8003\u3048\u65b9\u306b\u3064\u3044\u3066\u306f\u3001\u7d44\u5408\u305b\u6700\u9069\u5316\u3092\u4f7f\u304a\u3046\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5b9a\u5f0f\u5316\n\n\n\u6700\u5927\u5316\n\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf=3\u00d7\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b\u22122\u00d7\u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf=3\u00d7\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b\u22122\u00d7\u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf \\\\ = 3 \\times \u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b - 2 \\times \u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b\n\n\n\u5909\u6570\n(\u30bb\u30f3\u30b5\u30fc\u3092)\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b\u2208{0\uff0c1}\u2200\u8a2d\u7f6e\u7b87\u6240(\u30bb\u30f3\u30b5\u30fc\u3092)\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b\u2208{0\uff0c1}\u2200\u8a2d\u7f6e\u7b87\u6240(\u30bb\u30f3\u30b5\u30fc\u3092)\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b \\in\\{0\uff0c1\\} \\forall \u8a2d\u7f6e\u7b87\u6240\n\n\u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b\u22650\u2200\u96a3\u63a5\u7b87\u6240\u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b\u22650\u2200\u96a3\u63a5\u7b87\u6240\u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b \\ge 0 \\forall \u96a3\u63a5\u7b87\u6240\n\n\u5236\u7d04\u6761\u4ef6\n\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b1+\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b2\u2212\u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b\u22641\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b1+\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b2\u2212\u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b\u22641\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b_1 + \u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b_2 - \u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b \\le 1\n\n\n\n \u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u306b\u3088\u308b\u6700\u9069\u5316(\u6a19\u6e96\u554f\u984c\u306b\u3088\u308b\u30a2\u30d7\u30ed\u30fc\u30c1)\n\u30b0\u30e9\u30d5\u7406\u8ad6\u3067\u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306as-t\u30b0\u30e9\u30d5\u3092\u8003\u3048\u307e\u3059\u3002\u3053\u306e\u6709\u5411\u30b0\u30e9\u30d5\u306es-t\u6700\u5c0f\u30ab\u30c3\u30c8\u3092\u6c42\u3081\u308b\u3068\u3001\u5143\u306e\u30bb\u30f3\u30b5\u30fc\u8a2d\u7f6e\u554f\u984c\u306e\u6700\u9069\u89e3\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5143\u306e\u554f\u984c\u306f\u6700\u5927\u5316\u554f\u984c\u3067\u3059\u304c\u3001\"3 \uff0d \u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\"\u3092\u30b3\u30b9\u30c8\u3068\u8003\u3048\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u6700\u5c0f\u5316\u554f\u984c\u3068\u3057\u3066\u3068\u3089\u3048\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f\u3001\u5f8c\u8ff0\u306e\u53c2\u8003\u30b5\u30a4\u30c8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\ns-t\u30b0\u30e9\u30d5\n\n\n(0,0),(0,1),(1,0)\u306e3\u3064\u306e\u4f8b\u3092\u4e0a\u56f3\u306b\u793a\u3057\u307e\u3059\u3002\n\u59cb\u7aef\u30ce\u30fc\u30c9\"s\"\u304b\u3089\u3001\u5404\u7b87\u6240(\u4e09\u89d2\u5f62)\u306b\u8fba\u3092\u5f15\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u5404\u7b87\u6240\u304b\u3089\u7d42\u7aef\u30ce\u30fc\u30c9\"t\"\u306b\u3082\u8fba\u3092\u5f15\u304d\u307e\u3059\u3002\n\u4e0a\u4e09\u89d2\u306e\u7b87\u6240(\u4e0a\u56f3\u3067\u306f(0,0)\u3068(1,0))\u3067\u306f\u3001s\u304b\u3089\u306e\u8fba\u306f\"\u8a2d\u7f6e\"\u3092\u8868\u3057\u3001t\u3078\u306e\u8fba\u306f\"\u975e\u8a2d\u7f6e\"\u3092\u8868\u3057\u307e\u3059\u3002\n\u4e0b\u4e09\u89d2\u306e\u7b87\u6240(\u4e0a\u56f3\u3067\u306f(0,1))\u3067\u306f\u3001s\u304b\u3089\u306e\u8fba\u306f\"\u975e\u8a2d\u7f6e\"\u3092\u8868\u3057\u3001t\u3078\u306e\u8fba\u306f\"\u8a2d\u7f6e\"\u3092\u8868\u3057\u307e\u3059\u3002\n\u8a2d\u7f6e\u306e\u8fba\u306e\u91cd\u307f\u306f0\u3068\u3057\u3001\u975e\u8a2d\u7f6e\u306e\u8fba\u306e\u91cd\u307f\u306f3\u3068\u3057\u307e\u3059\u3002(\u91cd\u307f\u306f\u3001\"3 \uff0d \u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\"\u3067\u3059\u3002)\n\u5168\u3066\u306e\u96a3\u63a5\u7b87\u6240\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u4e09\u89d2\u304b\u3089\u4e0a\u4e09\u89d2\u306b\u3001\u91cd\u307f2\u306e\u8fba\u3092\u5f15\u304d\u307e\u3059\u3002\n\"\u8a2d\u7f6e\"\u3067\u56fa\u5b9a\u3059\u308b\u5834\u5408\u3001\"\u8a2d\u7f6e\"\u306e\u8fba\u306f\u524a\u9664(\u30ab\u30c3\u30c8\u6e08\u307f)\u3068\u3057\u3001\"\u975e\u8a2d\u7f6e\"\u306e\u8fba\u306e\u91cd\u307f\u3092\u5341\u5206\u5927\u304d\u304f\u3057\u307e\u3059\u3002\n\"\u975e\u8a2d\u7f6e\"\u3067\u56fa\u5b9a\u3059\u308b\u5834\u5408\u3001\"\u975e\u8a2d\u7f6e\"\u306e\u8fba\u306f\u524a\u9664(\u30ab\u30c3\u30c8\u6e08\u307f)\u3068\u3057\u3001\"\u8a2d\u7f6e\"\u306e\u8fba\u306e\u91cd\u307f\u3092\u5341\u5206\u5927\u304d\u304f\u3057\u307e\u3059\u3002\n\n\ns-t\u30b0\u30e9\u30d5\u306e\u610f\u5473\n\ns-t\u30ab\u30c3\u30c8\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u5404\u3005\u306e\u7b87\u6240\u306b\u304a\u3044\u3066\u3001\u8a2d\u7f6e\u307e\u305f\u306f\u975e\u8a2d\u7f6e\u306e\u8fba\u306e\u3069\u3061\u3089\u304b\u3092\u30ab\u30c3\u30c8\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u30ab\u30c3\u30c8\u3055\u308c\u305f\u65b9\u3092\u9078\u3093\u3060\u3082\u306e\u3068\u307f\u306a\u3057\u307e\u3059\u3002\ns-t\u30ab\u30c3\u30c8\u304c\u6210\u308a\u7acb\u3064\u305f\u3081\u306b\u306f\u3001\u96a3\u63a5\u7b87\u6240\u5171\u306b\u8a2d\u7f6e\u3057\u305f\u5834\u5408\u3001\u5e72\u6e09\u306e\u8fba\u3082\u30ab\u30c3\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5e72\u6e09\u91cf\u3092\u8868\u73fe\u3067\u304d\u307e\u3059\u3002(\u4e0a\u4e09\u89d2\u3068\u4e0b\u4e09\u89d2\u3067\u5206\u3051\u305f\u3053\u3068\u3067\u4e0a\u624b\u304f\u3044\u304d\u307e\u3059\u3002)\n\n\n\u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u306b\u3064\u3044\u3066\n\u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u306f\u3001\u591a\u9805\u5f0f\u6642\u9593\u3067\u89e3\u3051\u308b\u89e3\u304d\u3084\u3059\u3044\u554f\u984c\u3067\u3059\u3002\u5f8c\u8ff0\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001Python\u306enetworkx\u3092\u7528\u3044\u3066\u89e3\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u306e\u53cc\u5bfe\u554f\u984c\u306f\u3001\u6700\u5927\u6d41\u554f\u984c\u3067\u3059\u3002\n\n python\u306b\u3088\u308b\u5b9f\u884c\u4f8b\n\u6e96\u5099\u3092\u3057\u307e\u3059\u3002\n\npython3\nimport numpy as np, networkx as nx\nfrom pulp import *\ndef addvar(lowBound=0, var_count=[0], *args, **kwargs):\n    \"\"\"\u5909\u6570\u4f5c\u6210\u7528\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\"\"\"\n    var_count[0] += 1\n    return LpVariable('v%d' % var_count[0], lowBound=lowBound, *args, **kwargs)\ndef calc(a, r):\n    \"\"\"r\u3092\u8a2d\u7f6e\u7b87\u6240\u3068\u3057\u3066\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\u3092\u8a08\u7b97\"\"\"\n    b = a.copy()\n    b[b > 1] = 0\n    for x, y in r:\n        b[y, x] = 1\n    s = b.sum() * 3\n    for y in range(0, b.shape[0], 2):\n        for x in range(b.shape[1]):\n            s -= 2 * b[y, x] * b[y+1,x]\n            if x:\n                s -= 2 * b[y, x] * b[y+1,x-1]\n            if y:\n                s -= 2 * b[y, x] * b[y-1,x]\n    return s\n\n\nsolve_by_mip\u306f\u3001MIP\u306b\u3088\u308b\u89e3\u6cd5\u3067\u3059\u3002\u8a2d\u7f6e\u7b87\u6240\u3092\u8fd4\u3057\u307e\u3059\u3002\n\npython3\ndef solve_by_mip(a):\n    \"\"\"MIP\u3067\u554f\u984c\u3092\u89e3\u304d\u3001\u8a2d\u7f6e\u7b87\u6240\u3092\u8fd4\u3059\"\"\"\n    nm, nn = a.shape\n    b = a.astype(object)\n    vv1 = [addvar(cat=LpBinary) for _ in range((b > 1).sum())]\n    b[b > 1] = vv1\n    vv2 = []\n    m = LpProblem(sense=LpMaximize)\n    for y in range(0, nm, 2):\n        for x in range(nn):\n            chk(m, vv2, b[y,x] + b[y+1,x])\n            if x: chk(m, vv2, b[y,x] + b[y+1,x-1])\n            if y: chk(m, vv2, b[y,x] + b[y-1,x])\n    m += 3 * lpSum(vv1) - 2 * lpSum(vv2)\n    m.solve()\n    return [(x, y) for x in range(nn) for y in range(nm)\n            if isinstance(b[y,x], LpVariable) and value(b[y, x]) > 0.5]\ndef chk(m, vv2, e):\n    \"\"\"e\u304c\u5909\u6570\u3092\u542b\u3080\u306a\u3089\u3070\u3001\u5171\u306b1\u3067\u3042\u308c\u3070\u76ee\u7684\u95a2\u6570\u30922\u6e1b\u3089\u3059\u5236\u7d04\u3092\u8ffd\u52a0\"\"\"\n    if isinstance(e, LpAffineExpression):\n        v = addvar()\n        vv2.append(v)\n        m += e - v <= 1\n\n\nsolve_by_graph\u306f\u3001\u6700\u5c0f\u30ab\u30c3\u30c8\u306b\u3088\u308b\u89e3\u6cd5\u3067\u3059\u3002\u540c\u3058\u304f\u8a2d\u7f6e\u7b87\u6240\u3092\u8fd4\u3057\u307e\u3059\u3002\n\npython3\ndef solve_by_graph(a):\n    \"\"\"\u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u3067\u554f\u984c\u3092\u89e3\u304d\u3001\u8a2d\u7f6e\u7b87\u6240\u3092\u8fd4\u3059\"\"\"\n    nm, nn = a.shape\n    g = nx.DiGraph()\n    for y in range(0, nm, 2):\n        for x in range(nn):\n            if a[y, x] == 0: # off\n                g.add_edge('s', (x,y), capacity=7)\n            elif a[y, x] == 1: # on\n                g.add_edge((x,y), 't', capacity=7)\n            else:\n                g.add_edge('s', (x,y), capacity=0)\n                g.add_edge((x,y), 't', capacity=3)\n            if a[y+1, x] == 0: # off\n                g.add_edge((x,y+1), 't', capacity=7)\n            elif a[y+1, x] == 1: # on\n                g.add_edge('s', (x,y+1), capacity=7)\n            else:\n                g.add_edge('s', (x,y+1), capacity=3)\n                g.add_edge((x,y+1), 't', capacity=0)\n            g.add_edge((x,y+1), (x,y), capacity=2)\n            if x:\n                g.add_edge((x-1,y+1), (x,y), capacity=2)\n            if y:\n                g.add_edge((x,y-1), (x,y), capacity=2)\n    r = []\n    for s in nx.minimum_cut(g, 's', 't')[1]:\n        b = 's' in s\n        for t in s:\n            if isinstance(t, str): continue\n            x, y = t\n            if a[y, x] > 1 and b == (y%2 != 0):\n                r.append((x, y))\n    return sorted(r)\n\n\n40\u00d780\u306e\u30b5\u30a4\u30ba\u3067\u3001\u56fa\u5b9a\u7b87\u6240\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u7f6e\u3057\u3066\u3001\u7d50\u679c\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\npython3\nnn, nm = 40, 80 # \u6a2a\u3001\u7e26\nnp.random.seed(1)\na = np.random.randint(0, 6, (nm, nn)) # 0; fix off, 1: fix on, ow:select\n\n%time rmip = calc(a, solve_by_mip(a))\n%time rgrp = calc(a, solve_by_graph(a))\nprint(rmip == rgrp)\n>>>\nWall time: 455 ms\nWall time: 185 ms\n\nTrue\n\n\n\n\u3069\u3061\u3089\u306e\u624b\u6cd5\u3082\u540c\u3058\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\u306b\u306a\u3063\u3066\u3044\u308b(rmip == rgrp)\u306e\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nMIP\u306e\u65b9\u304c2\u500d\u5f37\u3001\u9045\u3044\u3067\u3059\u3002\n\n\n\u4e00\u822c\u306b\u3001\u6c4e\u7528\u30bd\u30eb\u30d0\u30fc\u3088\u308a\u5c02\u7528\u30bd\u30eb\u30d0\u30fc\u306e\u65b9\u304c\u8a08\u7b97\u304c\u901f\u3044\u3067\u3059\u3002\n\u5225\u9014\u78ba\u8a8d\u3057\u305f\u3068\u3053\u308d\u3001MIP\u30bd\u30eb\u30d0\u30fc\u5358\u4f53\u306e\u8a08\u7b97\u6642\u9593\u306f\u3001\u6700\u5c0f\u30ab\u30c3\u30c8\u306b\u3088\u308b\u8a08\u7b97\u6642\u9593\u3092\u5c11\u3057\u4e0a\u56de\u308b\u304f\u3089\u3044\u3067\u3057\u305f\u3002\n\n\n\u307e\u305f\u3001\u7406\u5c48\u306f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3067\u3059\u304c\u3001MIP\u3092\u7dda\u5f62\u7de9\u548c\u3057\u3066\u3082\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\u306f\u5909\u308f\u3089\u305a\u3001\u8a08\u7b97\u6642\u9593\u306f\u82e5\u5e72\u65e9\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\n\nProblem E. The Year of Code Jam: \u53c2\u8003\u306b\u3057\u305f\u554f\u984c\n\n\u6700\u5c0f\u30ab\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u300c\u71c3\u3084\u3059\u57cb\u3081\u308b\u554f\u984c\u300d\u3092\u89e3\u304f: \u53c2\u8003\u306b\u3057\u305f\u89e3\u6cd5\n\n\u4ee5\u4e0a\n# <i class='fa fa-building' /> \u3084\u308a\u305f\u3044\u3053\u3068\n\u4e0b\u56f3\u306e\u3088\u3046\u306a\u30a8\u30ea\u30a2\u304c\u3042\u308a\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/f5e1be52-1f8a-7c5f-12ae-ec5f408dfe74.png)\n\n- \u3053\u306e\u4e09\u89d2\u5f62\u306e\u4e2d\u592e\u306b\u30bb\u30f3\u30b5\u30fc\u3092\u8a2d\u7f6e\u3057\u3066\u3001\u30c7\u30fc\u30bf\u53ce\u96c6\u3092\u3057\u307e\u3059\u3002\n- **\u7dcf\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\u3092\u6700\u5927\u5316**\u3059\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3059\u3002\n- 1\u3064\u306e\u4e09\u89d2\u5f62\u306b1\u3064\u307e\u3067\u3057\u304b\u30bb\u30f3\u30b5\u30fc\u306f\u7f6e\u3051\u307e\u305b\u3093\u3002\n- 1\u3064\u306e\u30bb\u30f3\u30b5\u30fc\u3092\u7f6e\u304f\u3068\u3001\u30c7\u30fc\u30bf\u91cf **3** \u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n- \u4e88\u3081\u3001\u30bb\u30f3\u30b5\u30fc\u3092\u8a2d\u7f6e\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u7b87\u6240\u3068\u3001\u30bb\u30f3\u30b5\u30fc\u3092\u8a2d\u7f6e\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u7b87\u6240\u304c\u6c7a\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n- \u4e0b\u8868\u306e\u3088\u3046\u306b\u3001\u96a3\u308a\u306b\u5225\u306e\u30bb\u30f3\u30b5\u30fc\u304c\u3042\u308b\u3068\u3001\u5e72\u6e09\u3092\u8d77\u3053\u3057\u3066\u3001\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\u304c\u5404\u3005 **1** \u6e1b\u308a\u307e\u3059\u3002(\u5408\u8a08 **2** \u6e1b\u5c11)\n    - \u5f93\u3063\u3066\u3001\u5468\u308a\u306b2\u4ee5\u4e0a\u306e\u30bb\u30f3\u30b5\u30fc\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u8a2d\u7f6e\u3057\u306a\u3044\u65b9\u304c\u3088\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n|\u5468\u308a\u306e\u30bb\u30f3\u30b5\u30fc\u6570|\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf|\u5e72\u6e09\u30c7\u30fc\u30bf\u91cf|\u5168\u4f53\u3068\u3057\u3066\u5897\u3048\u308b\u30c7\u30fc\u30bf\u91cf|\n|:--|:--|:--|:--|\n|0|3|0|3|\n|1|3|2|1|\n|2|3|4|-1|\n|3|3|6|-3|\n\n# <i class='fa fa-building' /> \u6df7\u5408\u6574\u6570\u6700\u9069\u5316\u554f\u984c\u306b\u3088\u308b\u6700\u9069\u5316(\u6570\u7406\u554f\u984c\u306b\u3088\u308b\u30a2\u30d7\u30ed\u30fc\u30c1)\n\u6df7\u5408\u6574\u6570\u6700\u9069\u5316\u554f\u984c(Mixed Integer optimization Problem: MIP)\u3068\u3057\u3066\u30e2\u30c7\u30eb\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u5b9a\u5f0f\u5316\u3084\u8003\u3048\u65b9\u306b\u3064\u3044\u3066\u306f\u3001[\u7d44\u5408\u305b\u6700\u9069\u5316\u3092\u4f7f\u304a\u3046](http://qiita.com/Tsutomu-KKE@github/items/bfbf4c185ed7004b5721)\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u5b9a\u5f0f\u5316\n<table>\n<tr><td>\u6700\u5927\u5316</td><td>$\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf \\\\ = 3 \\times \u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b - 2 \\times \u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b$</td></tr>\n<tr><td rowspan=\"2\">\u5909\u6570</td><td>$(\u30bb\u30f3\u30b5\u30fc\u3092)\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b \\in\\{0\uff0c1\\} \\forall \u8a2d\u7f6e\u7b87\u6240$</td></tr>\n<tr><td>$\u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b \\ge 0 \\forall \u96a3\u63a5\u7b87\u6240$</td></tr>\n<tr><td>\u5236\u7d04\u6761\u4ef6</td><td>$\u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b_1 + \u8a2d\u7f6e\u3059\u308b\u304b\u3069\u3046\u304b_2 - \u5e72\u6e09\u3059\u308b\u304b\u3069\u3046\u304b \\le 1$</td></tr>\n</table>\n\n# <i class='fa fa-building' /> \u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u306b\u3088\u308b\u6700\u9069\u5316(\u6a19\u6e96\u554f\u984c\u306b\u3088\u308b\u30a2\u30d7\u30ed\u30fc\u30c1)\n\u30b0\u30e9\u30d5\u7406\u8ad6\u3067[\u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c](https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%83%E3%83%88_(%E3%82%B0%E3%83%A9%E3%83%95%E7%90%86%E8%AB%96)#.E6.9C.80.E5.B0.8F.E3.82.AB.E3.83.83.E3.83.88)\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306as-t\u30b0\u30e9\u30d5\u3092\u8003\u3048\u307e\u3059\u3002\u3053\u306e\u6709\u5411\u30b0\u30e9\u30d5\u306es-t\u6700\u5c0f\u30ab\u30c3\u30c8\u3092\u6c42\u3081\u308b\u3068\u3001\u5143\u306e\u30bb\u30f3\u30b5\u30fc\u8a2d\u7f6e\u554f\u984c\u306e\u6700\u9069\u89e3\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5143\u306e\u554f\u984c\u306f\u6700\u5927\u5316\u554f\u984c\u3067\u3059\u304c\u3001\"3 \uff0d \u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\"\u3092\u30b3\u30b9\u30c8\u3068\u8003\u3048\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u6700\u5c0f\u5316\u554f\u984c\u3068\u3057\u3066\u3068\u3089\u3048\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f\u3001\u5f8c\u8ff0\u306e\u53c2\u8003\u30b5\u30a4\u30c8\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n## s-t\u30b0\u30e9\u30d5\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/a083a4e6-4429-1763-6592-3dfb5932c1c5.png)\n\n- (0,0),(0,1),(1,0)\u306e3\u3064\u306e\u4f8b\u3092\u4e0a\u56f3\u306b\u793a\u3057\u307e\u3059\u3002\n- \u59cb\u7aef\u30ce\u30fc\u30c9\"s\"\u304b\u3089\u3001\u5404\u7b87\u6240(\u4e09\u89d2\u5f62)\u306b\u8fba\u3092\u5f15\u304d\u307e\u3059\u3002\u307e\u305f\u3001\u5404\u7b87\u6240\u304b\u3089\u7d42\u7aef\u30ce\u30fc\u30c9\"t\"\u306b\u3082\u8fba\u3092\u5f15\u304d\u307e\u3059\u3002\n- \u4e0a\u4e09\u89d2\u306e\u7b87\u6240(\u4e0a\u56f3\u3067\u306f(0,0)\u3068(1,0))\u3067\u306f\u3001s\u304b\u3089\u306e\u8fba\u306f\"\u8a2d\u7f6e\"\u3092\u8868\u3057\u3001t\u3078\u306e\u8fba\u306f\"\u975e\u8a2d\u7f6e\"\u3092\u8868\u3057\u307e\u3059\u3002\n- \u4e0b\u4e09\u89d2\u306e\u7b87\u6240(\u4e0a\u56f3\u3067\u306f(0,1))\u3067\u306f\u3001s\u304b\u3089\u306e\u8fba\u306f\"\u975e\u8a2d\u7f6e\"\u3092\u8868\u3057\u3001t\u3078\u306e\u8fba\u306f\"\u8a2d\u7f6e\"\u3092\u8868\u3057\u307e\u3059\u3002\n- \u8a2d\u7f6e\u306e\u8fba\u306e\u91cd\u307f\u306f0\u3068\u3057\u3001\u975e\u8a2d\u7f6e\u306e\u8fba\u306e\u91cd\u307f\u306f3\u3068\u3057\u307e\u3059\u3002(\u91cd\u307f\u306f\u3001\"3 \uff0d \u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\"\u3067\u3059\u3002)\n- \u5168\u3066\u306e\u96a3\u63a5\u7b87\u6240\u306b\u5bfe\u3057\u3066\u3001\u4e0b\u4e09\u89d2\u304b\u3089\u4e0a\u4e09\u89d2\u306b\u3001\u91cd\u307f2\u306e\u8fba\u3092\u5f15\u304d\u307e\u3059\u3002\n- \"\u8a2d\u7f6e\"\u3067\u56fa\u5b9a\u3059\u308b\u5834\u5408\u3001\"\u8a2d\u7f6e\"\u306e\u8fba\u306f\u524a\u9664(\u30ab\u30c3\u30c8\u6e08\u307f)\u3068\u3057\u3001\"\u975e\u8a2d\u7f6e\"\u306e\u8fba\u306e\u91cd\u307f\u3092\u5341\u5206\u5927\u304d\u304f\u3057\u307e\u3059\u3002\n- \"\u975e\u8a2d\u7f6e\"\u3067\u56fa\u5b9a\u3059\u308b\u5834\u5408\u3001\"\u975e\u8a2d\u7f6e\"\u306e\u8fba\u306f\u524a\u9664(\u30ab\u30c3\u30c8\u6e08\u307f)\u3068\u3057\u3001\"\u8a2d\u7f6e\"\u306e\u8fba\u306e\u91cd\u307f\u3092\u5341\u5206\u5927\u304d\u304f\u3057\u307e\u3059\u3002\n\n## s-t\u30b0\u30e9\u30d5\u306e\u610f\u5473\n\n- s-t\u30ab\u30c3\u30c8\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u5404\u3005\u306e\u7b87\u6240\u306b\u304a\u3044\u3066\u3001\u8a2d\u7f6e\u307e\u305f\u306f\u975e\u8a2d\u7f6e\u306e\u8fba\u306e\u3069\u3061\u3089\u304b\u3092\u30ab\u30c3\u30c8\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u30ab\u30c3\u30c8\u3055\u308c\u305f\u65b9\u3092\u9078\u3093\u3060\u3082\u306e\u3068\u307f\u306a\u3057\u307e\u3059\u3002\n- s-t\u30ab\u30c3\u30c8\u304c\u6210\u308a\u7acb\u3064\u305f\u3081\u306b\u306f\u3001\u96a3\u63a5\u7b87\u6240\u5171\u306b\u8a2d\u7f6e\u3057\u305f\u5834\u5408\u3001\u5e72\u6e09\u306e\u8fba\u3082\u30ab\u30c3\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u5e72\u6e09\u91cf\u3092\u8868\u73fe\u3067\u304d\u307e\u3059\u3002(\u4e0a\u4e09\u89d2\u3068\u4e0b\u4e09\u89d2\u3067\u5206\u3051\u305f\u3053\u3068\u3067\u4e0a\u624b\u304f\u3044\u304d\u307e\u3059\u3002)\n\n## \u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u306b\u3064\u3044\u3066\n\u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u306f\u3001\u591a\u9805\u5f0f\u6642\u9593\u3067\u89e3\u3051\u308b\u89e3\u304d\u3084\u3059\u3044\u554f\u984c\u3067\u3059\u3002\u5f8c\u8ff0\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001Python\u306enetworkx\u3092\u7528\u3044\u3066\u89e3\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u306e[\u53cc\u5bfe\u554f\u984c](http://qiita.com/Tsutomu-KKE@github/items/d1812ff9b5ccf0ecc716)\u306f\u3001[\u6700\u5927\u6d41\u554f\u984c](http://qiita.com/Tsutomu-KKE@github/items/80e70da6717acacefa00)\u3067\u3059\u3002\n\n# <i class='fa fa-building' /> python\u306b\u3088\u308b\u5b9f\u884c\u4f8b\n\u6e96\u5099\u3092\u3057\u307e\u3059\u3002\n\n```py3:python3\nimport numpy as np, networkx as nx\nfrom pulp import *\ndef addvar(lowBound=0, var_count=[0], *args, **kwargs):\n    \"\"\"\u5909\u6570\u4f5c\u6210\u7528\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\"\"\"\n    var_count[0] += 1\n    return LpVariable('v%d' % var_count[0], lowBound=lowBound, *args, **kwargs)\ndef calc(a, r):\n    \"\"\"r\u3092\u8a2d\u7f6e\u7b87\u6240\u3068\u3057\u3066\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\u3092\u8a08\u7b97\"\"\"\n    b = a.copy()\n    b[b > 1] = 0\n    for x, y in r:\n        b[y, x] = 1\n    s = b.sum() * 3\n    for y in range(0, b.shape[0], 2):\n        for x in range(b.shape[1]):\n            s -= 2 * b[y, x] * b[y+1,x]\n            if x:\n                s -= 2 * b[y, x] * b[y+1,x-1]\n            if y:\n                s -= 2 * b[y, x] * b[y-1,x]\n    return s\n```\n\nsolve_by_mip\u306f\u3001MIP\u306b\u3088\u308b\u89e3\u6cd5\u3067\u3059\u3002\u8a2d\u7f6e\u7b87\u6240\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```py3:python3\ndef solve_by_mip(a):\n    \"\"\"MIP\u3067\u554f\u984c\u3092\u89e3\u304d\u3001\u8a2d\u7f6e\u7b87\u6240\u3092\u8fd4\u3059\"\"\"\n    nm, nn = a.shape\n    b = a.astype(object)\n    vv1 = [addvar(cat=LpBinary) for _ in range((b > 1).sum())]\n    b[b > 1] = vv1\n    vv2 = []\n    m = LpProblem(sense=LpMaximize)\n    for y in range(0, nm, 2):\n        for x in range(nn):\n            chk(m, vv2, b[y,x] + b[y+1,x])\n            if x: chk(m, vv2, b[y,x] + b[y+1,x-1])\n            if y: chk(m, vv2, b[y,x] + b[y-1,x])\n    m += 3 * lpSum(vv1) - 2 * lpSum(vv2)\n    m.solve()\n    return [(x, y) for x in range(nn) for y in range(nm)\n            if isinstance(b[y,x], LpVariable) and value(b[y, x]) > 0.5]\ndef chk(m, vv2, e):\n    \"\"\"e\u304c\u5909\u6570\u3092\u542b\u3080\u306a\u3089\u3070\u3001\u5171\u306b1\u3067\u3042\u308c\u3070\u76ee\u7684\u95a2\u6570\u30922\u6e1b\u3089\u3059\u5236\u7d04\u3092\u8ffd\u52a0\"\"\"\n    if isinstance(e, LpAffineExpression):\n        v = addvar()\n        vv2.append(v)\n        m += e - v <= 1\n```\n\nsolve_by_graph\u306f\u3001\u6700\u5c0f\u30ab\u30c3\u30c8\u306b\u3088\u308b\u89e3\u6cd5\u3067\u3059\u3002\u540c\u3058\u304f\u8a2d\u7f6e\u7b87\u6240\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n```py3:python3\ndef solve_by_graph(a):\n    \"\"\"\u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c\u3067\u554f\u984c\u3092\u89e3\u304d\u3001\u8a2d\u7f6e\u7b87\u6240\u3092\u8fd4\u3059\"\"\"\n    nm, nn = a.shape\n    g = nx.DiGraph()\n    for y in range(0, nm, 2):\n        for x in range(nn):\n            if a[y, x] == 0: # off\n                g.add_edge('s', (x,y), capacity=7)\n            elif a[y, x] == 1: # on\n                g.add_edge((x,y), 't', capacity=7)\n            else:\n                g.add_edge('s', (x,y), capacity=0)\n                g.add_edge((x,y), 't', capacity=3)\n            if a[y+1, x] == 0: # off\n                g.add_edge((x,y+1), 't', capacity=7)\n            elif a[y+1, x] == 1: # on\n                g.add_edge('s', (x,y+1), capacity=7)\n            else:\n                g.add_edge('s', (x,y+1), capacity=3)\n                g.add_edge((x,y+1), 't', capacity=0)\n            g.add_edge((x,y+1), (x,y), capacity=2)\n            if x:\n                g.add_edge((x-1,y+1), (x,y), capacity=2)\n            if y:\n                g.add_edge((x,y-1), (x,y), capacity=2)\n    r = []\n    for s in nx.minimum_cut(g, 's', 't')[1]:\n        b = 's' in s\n        for t in s:\n            if isinstance(t, str): continue\n            x, y = t\n            if a[y, x] > 1 and b == (y%2 != 0):\n                r.append((x, y))\n    return sorted(r)\n```\n\n40\u00d780\u306e\u30b5\u30a4\u30ba\u3067\u3001\u56fa\u5b9a\u7b87\u6240\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u8a2d\u7f6e\u3057\u3066\u3001\u7d50\u679c\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3:python3\nnn, nm = 40, 80 # \u6a2a\u3001\u7e26\nnp.random.seed(1)\na = np.random.randint(0, 6, (nm, nn)) # 0; fix off, 1: fix on, ow:select\n\n%time rmip = calc(a, solve_by_mip(a))\n%time rgrp = calc(a, solve_by_graph(a))\nprint(rmip == rgrp)\n>>>\nWall time: 455 ms\nWall time: 185 ms\n\nTrue\n```\n\n- \u3069\u3061\u3089\u306e\u624b\u6cd5\u3082\u540c\u3058\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\u306b\u306a\u3063\u3066\u3044\u308b(rmip == rgrp)\u306e\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n- MIP\u306e\u65b9\u304c2\u500d\u5f37\u3001\u9045\u3044\u3067\u3059\u3002\n    - \u4e00\u822c\u306b\u3001\u6c4e\u7528\u30bd\u30eb\u30d0\u30fc\u3088\u308a\u5c02\u7528\u30bd\u30eb\u30d0\u30fc\u306e\u65b9\u304c\u8a08\u7b97\u304c\u901f\u3044\u3067\u3059\u3002\n    - \u5225\u9014\u78ba\u8a8d\u3057\u305f\u3068\u3053\u308d\u3001MIP\u30bd\u30eb\u30d0\u30fc\u5358\u4f53\u306e\u8a08\u7b97\u6642\u9593\u306f\u3001\u6700\u5c0f\u30ab\u30c3\u30c8\u306b\u3088\u308b\u8a08\u7b97\u6642\u9593\u3092\u5c11\u3057\u4e0a\u56de\u308b\u304f\u3089\u3044\u3067\u3057\u305f\u3002\n- \u307e\u305f\u3001\u7406\u5c48\u306f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3067\u3059\u304c\u3001MIP\u3092\u7dda\u5f62\u7de9\u548c\u3057\u3066\u3082\u53d6\u5f97\u30c7\u30fc\u30bf\u91cf\u306f\u5909\u308f\u3089\u305a\u3001\u8a08\u7b97\u6642\u9593\u306f\u82e5\u5e72\u65e9\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\n- [Problem E. The Year of Code Jam](https://code.google.com/codejam/contest/32011/dashboard#s=p4): \u53c2\u8003\u306b\u3057\u305f\u554f\u984c\n- [\u6700\u5c0f\u30ab\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u300c\u71c3\u3084\u3059\u57cb\u3081\u308b\u554f\u984c\u300d\u3092\u89e3\u304f](http://www.slideshare.net/shindannin/project-selection-problem): \u53c2\u8003\u306b\u3057\u305f\u89e3\u6cd5\n\n\u4ee5\u4e0a\n", "tags": ["\u7d44\u5408\u305b\u6700\u9069\u5316", "\u6700\u9069\u5316", "Python", "\u6700\u5c0f\u30ab\u30c3\u30c8\u554f\u984c"]}