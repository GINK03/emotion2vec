{"context": " More than 1 year has passed since last update.\u3053\u3053\u6570\u65e5\u306f\u4f55\u6545\u304b\u4ee5\u524d\u306bErlang\u3067\u5b9f\u88c5\u3057\u305fJSON\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6700\u9069\u5316\u3059\u308b\u306e\u306b\u306f\u307e\u3063\u3066\u3044\u305f\u3002\n\u3044\u304f\u3064\u304b\u77e5\u898b\u3082\u5f97\u3089\u308c\u305f\u306e\u3067\u3001\u8a66\u3057\u305f\u3053\u3068\u3092\u4f55\u56de\u304b\u306b\u5206\u3051\u3066\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304f\u3002\n\n\u5bfe\u8c61\nJSON\u306e\u30c7\u30b3\u30fc\u30c9\u51e6\u7406\u3092\u984c\u6750\u3068\u3059\u308b\u3002\n\u3084\u308b\u6c17\u304c\u7d9a\u3051\u3070\u3001\u30a8\u30f3\u30b3\u30fc\u30c9\u51e6\u7406\u306e\u8a71\u3082\u66f8\u304f\u4e88\u5b9a\u3002\n\u306a\u304a\u3001\u30b3\u30fc\u30c9\u3092\u7c21\u6f54\u306b\u3059\u308b\u305f\u3081\u306b\u4eca\u56de\u306e\u5b9f\u88c5\u3067\u306f\u300c\u6570\u5024\u306f\u975e\u8ca0\u306e\u6574\u6570\u306e\u307f\u300d\u304a\u3088\u3073\u300c\u6587\u5b57\u5217\u306fASCII\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u7bc4\u56f2\u5185\u306e\u307f\u300d\u3092\u6271\u3046\u3088\u3046\u306b\u3059\u308b\u3002\n\n\u30b7\u30f3\u30d7\u30eb\u306a\u5b9f\u88c5\n\u307e\u305a\u306f\u6700\u9069\u5316\u524d\u306e\u57fa\u672c\u5f62\u3068\u306a\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u5b9f\u88c5\u306eJSON\u30c7\u30b3\u30fc\u30c9\u95a2\u6570\u3092\u8f09\u305b\u3066\u304a\u304f\u3002\n\njson_decode_1.erl\n-module(json_decode_1).\n\n-export([decode/1]).\n\n-type json_value()  :: null | boolean() | json_number() |\n                       json_string() | json_array() | json_object().\n-type json_number() :: non_neg_integer().\n-type json_string() :: binary().\n-type json_array()  :: [json_value()].\n-type json_object() :: {[json_object_member()]}.\n-type json_object_member() :: {json_string(), json_value()}.\n\n%% @doc JSON\u6587\u5b57\u5217\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n%%\n%% \u4e0d\u6b63\u306aJSON\u6587\u5b57\u5217\u304c\u6e21\u3055\u308c\u305f\u5834\u5408\u306f\u3001badarg\u30a8\u30e9\u30fc\u304c\u9001\u51fa\u3055\u308c\u308b\n-spec decode(binary()) -> json_value().\ndecode(Json) ->\n    {Value, _RestBin} = value(skip_whitespace(Json)),\n    Value.\n\n-spec skip_whitespace(binary()) -> binary().\nskip_whitespace(<<$  , Bin/binary>>) -> skip_whitespace(Bin);\nskip_whitespace(<<$\\t, Bin/binary>>) -> skip_whitespace(Bin);\nskip_whitespace(<<$\\r, Bin/binary>>) -> skip_whitespace(Bin);\nskip_whitespace(<<$\\n, Bin/binary>>) -> skip_whitespace(Bin);\nskip_whitespace(Bin)                 -> Bin.\n\n-spec value(binary()) -> {json_value(), binary()}.\nvalue(<<\"null\", Bin/binary>>)                  -> {null, Bin};\nvalue(<<\"false\", Bin/binary>>)                 -> {false, Bin};\nvalue(<<\"true\", Bin/binary>>)                  -> {true, Bin};\nvalue(<<$[, Bin/binary>>)                      -> array(skip_whitespace(Bin));\nvalue(<<${, Bin/binary>>)                      -> object(skip_whitespace(Bin));\nvalue(<<$\", Bin/binary>>)                      -> string(Bin, \"\");\nvalue(<<C, Bin/binary>>) when $0 =< C, C =< $9 -> number(C - $0, Bin);\nvalue(Bin)                                     -> error(badarg, [Bin]).\n\n-spec array(binary()) -> {json_array(), binary()}.\narray(<<$], Bin/binary>>) -> {[], Bin};\narray(Bin)                -> array(Bin, []).\n\n-spec array(binary(), [json_value()]) -> {json_array(), binary()}.\narray(Bin, Values) ->\n    {Value, Bin2} = value(Bin),\n    Values2 = [Value | Values],\n    case skip_whitespace(Bin2) of\n        <<$], Bin3/binary>> -> {lists:reverse(Values2), Bin3};\n        <<$,, Bin3/binary>> -> array(skip_whitespace(Bin3), Values2);\n        _                   -> error(badarg, [Bin, Values])\n    end.\n\n-spec object(binary()) -> {json_object(), binary()}.\nobject(<<$}, Bin/binary>>) -> {{[]}, Bin};\nobject(Bin)                -> object(Bin, []).\n\n-spec object(binary(), [json_object_member()]) -> {json_object(), binary()}.\nobject(<<$\", Bin/binary>>, Members) ->\n    {Key, Bin2} = string(Bin, \"\"),\n    case skip_whitespace(Bin2) of\n        <<$:, Bin3/binary>> ->\n            {Value, Bin4} = value(skip_whitespace(Bin3)),\n            Members2 = [{Key, Value} | Members],\n            case skip_whitespace(Bin4) of\n                <<$}, Bin5/binary>> -> {{lists:reverse(Members2)}, Bin5};\n                <<$,, Bin5/binary>> -> object(skip_whitespace(Bin5), Members2);\n                _                   -> error(badarg, [<<$\", Bin/binary>>, Members])\n            end;\n        _ -> error(badarg, [<<$\", Bin/binary>>, Members])\n    end;\nobject(Bin, Members) -> error(badarg, [Bin, Members]).\n\n-spec string(binary(), string()) -> {json_string(), binary()}.\nstring(<<$\",       Bin/binary>>, Acc) -> {list_to_binary(lists:reverse(Acc)), Bin};\nstring(<<$\\\\, $\",  Bin/binary>>, Acc) -> string(Bin, [$\" | Acc]);\nstring(<<$\\\\, $/,  Bin/binary>>, Acc) -> string(Bin, [$/ | Acc]);\nstring(<<$\\\\, $\\\\, Bin/binary>>, Acc) -> string(Bin, [$\\\\ | Acc]);\nstring(<<$\\\\, $b,  Bin/binary>>, Acc) -> string(Bin, [$\\b | Acc]);\nstring(<<$\\\\, $f,  Bin/binary>>, Acc) -> string(Bin, [$\\f | Acc]);\nstring(<<$\\\\, $n,  Bin/binary>>, Acc) -> string(Bin, [$\\n | Acc]);\nstring(<<$\\\\, $r,  Bin/binary>>, Acc) -> string(Bin, [$\\r | Acc]);\nstring(<<$\\\\, $t,  Bin/binary>>, Acc) -> string(Bin, [$\\t | Acc]);\nstring(<<$\\\\,      Bin/binary>>, Acc) -> error(badarg, [<<$\\\\, Bin/binary>>, Acc]);\nstring(<<0:1, C:7, Bin/binary>>, Acc) -> string(Bin, [C | Acc]);\nstring(Bin,                      Acc) -> error(badarg, [Bin, Acc]).\n\n-spec number(json_number(), binary()) -> {json_number(), binary()}.\nnumber(N, <<C, Bin/binary>>) when $0 =< C, C =< $9 -> number(N * 10 + C - $0, Bin);\nnumber(N, Bin)                                     -> {N, Bin}.\n\n\n\u7db2\u7f85\u7684\u306a\u30c6\u30b9\u30c8\u3092\u884c\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u30d0\u30b0\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u3060\u3044\u305f\u3044\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u3068\u306a\u308b\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u304a\u3088\u3073\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\n\nshell\n$ erl\nErlang R16B03-1 (erts-5.10.4) [source] [64-bit] [smp:2:2] [async-threads:10] [hipe]\nEshell V5.10.4  (abort with ^G)\n\n%% \u30b3\u30f3\u30d1\u30a4\u30eb\n> c(json_decode_1).\n{ok, json_decode_1}\n\n%% \u30c7\u30b3\u30fc\u30c9: null\n> json_decode_1:decode(<<\"null\">>).\nnull\n\n%% \u30c7\u30b3\u30fc\u30c9: \u6587\u5b57\u5217\n> json_decode_1:decode(<<\"\\\"abc\\\\t123\\\"\">>).\n<<\"abc\\t123\">>\n\n%% \u30c7\u30b3\u30fc\u30c9: \u914d\u5217\n> json_decode_1:decode(<<\"[1, 2, 3]\">>).\n[1,2,3]\n\n%% \u30c7\u30b3\u30fc\u30c9: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n> json_decode_1:decode(<<\"{\\\"key\\\": \\\"value\\\", \\\"array\\\": [1, 2, 3]}\">>).\n{[{<<\"key\">>,<<\"value\">>},{<<\"array\">>,[1,2,3]}]}\n\n%% \u5165\u529b\u5024\u304c\u4e0d\u6b63\u306a\u5834\u5408\n> json_decode_1:decode(<<\"[1, abc, 2]\">>).  % abc \u304c\u4e0d\u6b63\n** exception error: bad argument\n     in function  json_decode_1:value/1\n        called as json_decode_1:value(<<\"abc, 2]\">>)\n     in call from json_decode_1:array/2 (json_decode_1.erl, line 44)\n     in call from json_decode_1:decode/1 (json_decode_1.erl, line 18)\n\n\n\u3068\u308a\u3042\u3048\u305a\u52d5\u3044\u3066\u3044\u308b\u3002\n\n\u8a08\u6642\n\u5f8c\u306e\u6700\u9069\u5316\u306e\u52b9\u679c\u3092\u56f3\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u5b9f\u88c5\u306e\u51e6\u7406\u901f\u5ea6\u3092\u8a08\u6e2c\u3057\u3066\u304a\u304f\u3002\n\u8a08\u6e2c\u306b\u306ferl_json_test\u3092\u5229\u7528\u3055\u305b\u3066\u8cb0\u3063\u305f\u3002 (commit: 7ae5a254943ce3e5d9e4d5eb9cd2e86b92ce8e83)\n\u3053\u306e\u30c6\u30b9\u30c8(\u8a08\u6642\u65b9\u6cd5)\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aJSON\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u30c7\u30b3\u30fc\u30c9\u95a2\u6570\u3092300\u56de\u9069\u7528\u3057\u3001\u305d\u306e\u5e73\u5747\u51e6\u7406\u6642\u9593\u3092\u6c42\u3081\u308b\u3001\u3068\u3044\u3046\u5185\u5bb9\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n(\u5165\u529bJSON\u306f\u3001500B\u304b\u3089122KB\u307e\u3067\u306e\u30b5\u30a4\u30ba\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b)\njson:erl_json_test/priv/1x.json\n{\n\"id\": 1,\n\"jsonrpc\": \"2.0\",\n\"total\": 1,\n\"result\": [\n{\n\"id\": 1,\n\"avatar\": \"images/user_1.png\",\n\"age\": 38,\n\"admin\": false,\n\"name\": \"\u0424\u0435\u043b\u0438\u043a\u0441 \u0428\u0432\u0435\u0446\",\n\"company\": \"Genland\",\n\"phone\": \"+70955600298\",\n\"email\": \"feliks@genland.com\",\n\"registerDate\": \"Tue, 18 Aug 2009 14:09:40 GMT\",\n\"friends\": [\n{\n\"id\": 1,\n\"name\": \"\u042f\u043a\u043e\u0432 \u041e\u043b\u0435\u0439\u043d\u0438\u043a\",\n\"phone\": \"+70950177368\"\n},\n{\n\"id\": 2,\n\"name\": \"\u0410\u043d\u0442\u043e\u043d \u041a\u043e\u0432\u0430\u043b\u0435\u043d\u043a\u043e\",\n\"phone\": \"+70958920708\"\n},\n{\n\"id\": 3,\n\"name\": \"\u041b\u0435\u043e\u043d\u0438\u0434 \u041f\u0440\u0438\u0445\u043e\u0434\u044c\u043a\u043e\",\n\"phone\": \"+70958423612\"\n}\n],\n\"field\": \"field value\"\n}\n]\n}\n\n\u307e\u305f\u3001\u4eca\u56de\u4f5c\u6210\u3057\u305fjson_decode_1\u30e2\u30b8\u30e5\u30fc\u30eb\u7528\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306epatch\u3092\u5f53\u3066\u3066\u3044\u308b\u3002\n\nerl_json_test/src/erl_json_test.erl.patch\ndiff --git src/erl_json_test.erl src/erl_json_test.erl\nindex a912a29..c5b634e 100644\n--- src/erl_json_test.erl\n+++ src/erl_json_test.erl\n@@ -4,6 +4,8 @@\n -define(NUM_TESTS, 300).\n -define(PARSERS,\n         [{\"jsonx\", fun jsonx:encode/1, fun jsonx:decode/1},\n+         %% json_decode_1\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30c6\u30b9\u30c8\u5bfe\u8c61\u306b\u767b\u9332\u3059\u308b\n+         {\"json_decode_1\", fun (_) -> ok end, fun json_decode_1:decode/1},\n          {\"yawsjson2\", fun json2:encode/1, fun json2:decode/1},\n          {\"jiffy\", fun jiffy:encode/1, fun jiffy:decode/1},\n          {\"jsonerl\", fun jsonerl:encode/1, fun jsonerl:decode/1},\n@@ -20,14 +22,20 @@\n start() ->\n     JSONs = [begin\n                  FullName = \"priv/\" ++ FileName,\n                  {ok, File} = file:read_file(FullName),\n-                 {Name, File}\n+\n+                 %% \u5165\u529bJSON\u306b \u8ca0\u306e\u6574\u6570 \u304a\u3088\u3073 \u975eASCII\u6587\u5b57 \u304c\u5165\u529b\u306b\u542b\u307e\u308c\u306a\u3044\u3088\u3046\u306b\u5909\u63db\u3059\u308b\n+                 File2 = [case C =:= $- orelse C >= 16#80 of\n+                              true  -> $ ;\n+                              false -> C\n+                          end || <<C>> <= File],\n+                 {Name, list_to_binary(File2)}\n              end\n              || {Name, FileName} <- ?TESTFILES],\n     _A = [ jsonx:encode(jsonx:decode(File)) || {_, File} <- JSONs],\n     _B = [ jiffy:encode(jiffy:decode(File)) || {_, File} <- JSONs],\n     _C = [ mochijson2:encode(mochijson2:decode(File)) || {_, File} <- JSONs],\n     _D = [ jsx:term_to_json(jsx:json_to_term(File)) || {_, File} <- JSONs],\n+    _E = [ json_decode_1:decode(File) || {_, File} <- JSONs],\n     ResultsDeep = [[begin\n                         T = {ParserName, TestName, size(JSON),\n                              bench(EncFun, DecFun, JSON)},\n\n\n\n\u8a08\u6642\u7d50\u679c\n\u5165\u529bJSON(\u30d5\u30a1\u30a4\u30eb)\u306e\u7a2e\u985e\u3068\u30b5\u30a4\u30ba:\n\n\n\n1x.json\n3x.json\n9x.json\n27x.json\n81x.json\n243x.json\n\n\n\n\n0.5KB\n1.5KB\n4.5KB\n13.5KB\n40.5KB\n121.8KB\n\n\n\n\u5404\u5165\u529b\u306b\u5bfe\u3059\u308b\u5e73\u5747\u30c7\u30b3\u30fc\u30c9\u51e6\u7406\u6642\u9593:\n\n\n\n\u5e73\u5747\u51e6\u7406\u6642\u9593\n1x.json\n3x.json\n9x.json\n27x.json\n81x.json\n243x.json\n\n\n\n\njson_decode_1:decode/1\n49\u03bcs\n153\u03bcs\n412\u03bcs\n1163\u03bcs\n4089\u03bcs\n11780\u03bcs\n\n\n\n\u3053\u306e\u8a08\u6642\u7d50\u679c\u3092\u57fa\u6e96\u306b\u3001\u6b21\u56de\u4ee5\u964d\u3067\u6700\u9069\u5316\u3092\u884c\u3044\u3001\u305d\u306e\u52b9\u679c\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3002\n\u3053\u3053\u6570\u65e5\u306f\u4f55\u6545\u304b\u4ee5\u524d\u306bErlang\u3067\u5b9f\u88c5\u3057\u305f[JSON\u30e9\u30a4\u30d6\u30e9\u30ea](https://github.com/sile/jsone)\u3092\u6700\u9069\u5316\u3059\u308b\u306e\u306b\u306f\u307e\u3063\u3066\u3044\u305f\u3002\n\n\u3044\u304f\u3064\u304b\u77e5\u898b\u3082\u5f97\u3089\u308c\u305f\u306e\u3067\u3001\u8a66\u3057\u305f\u3053\u3068\u3092\u4f55\u56de\u304b\u306b\u5206\u3051\u3066\u30e1\u30e2\u3068\u3057\u3066\u6b8b\u3057\u3066\u304a\u304f\u3002\n\n\u5bfe\u8c61\n====\n[JSON](http://www.json.org/json-ja.html)\u306e\u30c7\u30b3\u30fc\u30c9\u51e6\u7406\u3092\u984c\u6750\u3068\u3059\u308b\u3002\n\u3084\u308b\u6c17\u304c\u7d9a\u3051\u3070\u3001\u30a8\u30f3\u30b3\u30fc\u30c9\u51e6\u7406\u306e\u8a71\u3082\u66f8\u304f\u4e88\u5b9a\u3002\n\n\u306a\u304a\u3001\u30b3\u30fc\u30c9\u3092\u7c21\u6f54\u306b\u3059\u308b\u305f\u3081\u306b\u4eca\u56de\u306e\u5b9f\u88c5\u3067\u306f\u300c\u6570\u5024\u306f\u975e\u8ca0\u306e\u6574\u6570\u306e\u307f\u300d\u304a\u3088\u3073\u300c\u6587\u5b57\u5217\u306fASCII\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u7bc4\u56f2\u5185\u306e\u307f\u300d\u3092\u6271\u3046\u3088\u3046\u306b\u3059\u308b\u3002\n\n\u30b7\u30f3\u30d7\u30eb\u306a\u5b9f\u88c5\n============\n\u307e\u305a\u306f\u6700\u9069\u5316\u524d\u306e\u57fa\u672c\u5f62\u3068\u306a\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u5b9f\u88c5\u306eJSON\u30c7\u30b3\u30fc\u30c9\u95a2\u6570\u3092\u8f09\u305b\u3066\u304a\u304f\u3002\n\n```erlang:json_decode_1.erl\n-module(json_decode_1).\n\n-export([decode/1]).\n\n-type json_value()  :: null | boolean() | json_number() |\n                       json_string() | json_array() | json_object().\n-type json_number() :: non_neg_integer().\n-type json_string() :: binary().\n-type json_array()  :: [json_value()].\n-type json_object() :: {[json_object_member()]}.\n-type json_object_member() :: {json_string(), json_value()}.\n\n%% @doc JSON\u6587\u5b57\u5217\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n%%\n%% \u4e0d\u6b63\u306aJSON\u6587\u5b57\u5217\u304c\u6e21\u3055\u308c\u305f\u5834\u5408\u306f\u3001badarg\u30a8\u30e9\u30fc\u304c\u9001\u51fa\u3055\u308c\u308b\n-spec decode(binary()) -> json_value().\ndecode(Json) ->\n    {Value, _RestBin} = value(skip_whitespace(Json)),\n    Value.\n\n-spec skip_whitespace(binary()) -> binary().\nskip_whitespace(<<$  , Bin/binary>>) -> skip_whitespace(Bin);\nskip_whitespace(<<$\\t, Bin/binary>>) -> skip_whitespace(Bin);\nskip_whitespace(<<$\\r, Bin/binary>>) -> skip_whitespace(Bin);\nskip_whitespace(<<$\\n, Bin/binary>>) -> skip_whitespace(Bin);\nskip_whitespace(Bin)                 -> Bin.\n\n-spec value(binary()) -> {json_value(), binary()}.\nvalue(<<\"null\", Bin/binary>>)                  -> {null, Bin};\nvalue(<<\"false\", Bin/binary>>)                 -> {false, Bin};\nvalue(<<\"true\", Bin/binary>>)                  -> {true, Bin};\nvalue(<<$[, Bin/binary>>)                      -> array(skip_whitespace(Bin));\nvalue(<<${, Bin/binary>>)                      -> object(skip_whitespace(Bin));\nvalue(<<$\", Bin/binary>>)                      -> string(Bin, \"\");\nvalue(<<C, Bin/binary>>) when $0 =< C, C =< $9 -> number(C - $0, Bin);\nvalue(Bin)                                     -> error(badarg, [Bin]).\n\n-spec array(binary()) -> {json_array(), binary()}.\narray(<<$], Bin/binary>>) -> {[], Bin};\narray(Bin)                -> array(Bin, []).\n\n-spec array(binary(), [json_value()]) -> {json_array(), binary()}.\narray(Bin, Values) ->\n    {Value, Bin2} = value(Bin),\n    Values2 = [Value | Values],\n    case skip_whitespace(Bin2) of\n        <<$], Bin3/binary>> -> {lists:reverse(Values2), Bin3};\n        <<$,, Bin3/binary>> -> array(skip_whitespace(Bin3), Values2);\n        _                   -> error(badarg, [Bin, Values])\n    end.\n\n-spec object(binary()) -> {json_object(), binary()}.\nobject(<<$}, Bin/binary>>) -> {{[]}, Bin};\nobject(Bin)                -> object(Bin, []).\n\n-spec object(binary(), [json_object_member()]) -> {json_object(), binary()}.\nobject(<<$\", Bin/binary>>, Members) ->\n    {Key, Bin2} = string(Bin, \"\"),\n    case skip_whitespace(Bin2) of\n        <<$:, Bin3/binary>> ->\n            {Value, Bin4} = value(skip_whitespace(Bin3)),\n            Members2 = [{Key, Value} | Members],\n            case skip_whitespace(Bin4) of\n                <<$}, Bin5/binary>> -> {{lists:reverse(Members2)}, Bin5};\n                <<$,, Bin5/binary>> -> object(skip_whitespace(Bin5), Members2);\n                _                   -> error(badarg, [<<$\", Bin/binary>>, Members])\n            end;\n        _ -> error(badarg, [<<$\", Bin/binary>>, Members])\n    end;\nobject(Bin, Members) -> error(badarg, [Bin, Members]).\n\n-spec string(binary(), string()) -> {json_string(), binary()}.\nstring(<<$\",       Bin/binary>>, Acc) -> {list_to_binary(lists:reverse(Acc)), Bin};\nstring(<<$\\\\, $\",  Bin/binary>>, Acc) -> string(Bin, [$\" | Acc]);\nstring(<<$\\\\, $/,  Bin/binary>>, Acc) -> string(Bin, [$/ | Acc]);\nstring(<<$\\\\, $\\\\, Bin/binary>>, Acc) -> string(Bin, [$\\\\ | Acc]);\nstring(<<$\\\\, $b,  Bin/binary>>, Acc) -> string(Bin, [$\\b | Acc]);\nstring(<<$\\\\, $f,  Bin/binary>>, Acc) -> string(Bin, [$\\f | Acc]);\nstring(<<$\\\\, $n,  Bin/binary>>, Acc) -> string(Bin, [$\\n | Acc]);\nstring(<<$\\\\, $r,  Bin/binary>>, Acc) -> string(Bin, [$\\r | Acc]);\nstring(<<$\\\\, $t,  Bin/binary>>, Acc) -> string(Bin, [$\\t | Acc]);\nstring(<<$\\\\,      Bin/binary>>, Acc) -> error(badarg, [<<$\\\\, Bin/binary>>, Acc]);\nstring(<<0:1, C:7, Bin/binary>>, Acc) -> string(Bin, [C | Acc]);\nstring(Bin,                      Acc) -> error(badarg, [Bin, Acc]).\n\n-spec number(json_number(), binary()) -> {json_number(), binary()}.\nnumber(N, <<C, Bin/binary>>) when $0 =< C, C =< $9 -> number(N * 10 + C - $0, Bin);\nnumber(N, Bin)                                     -> {N, Bin}.\n```\n\u7db2\u7f85\u7684\u306a\u30c6\u30b9\u30c8\u3092\u884c\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u30d0\u30b0\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u3060\u3044\u305f\u3044\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u3068\u306a\u308b\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u304a\u3088\u3073\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\n\n```erlang:shell\n$ erl\nErlang R16B03-1 (erts-5.10.4) [source] [64-bit] [smp:2:2] [async-threads:10] [hipe]\nEshell V5.10.4  (abort with ^G)\n\n%% \u30b3\u30f3\u30d1\u30a4\u30eb\n> c(json_decode_1).\n{ok, json_decode_1}\n\n%% \u30c7\u30b3\u30fc\u30c9: null\n> json_decode_1:decode(<<\"null\">>).\nnull\n\n%% \u30c7\u30b3\u30fc\u30c9: \u6587\u5b57\u5217\n> json_decode_1:decode(<<\"\\\"abc\\\\t123\\\"\">>).\n<<\"abc\\t123\">>\n\n%% \u30c7\u30b3\u30fc\u30c9: \u914d\u5217\n> json_decode_1:decode(<<\"[1, 2, 3]\">>).\n[1,2,3]\n\n%% \u30c7\u30b3\u30fc\u30c9: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n> json_decode_1:decode(<<\"{\\\"key\\\": \\\"value\\\", \\\"array\\\": [1, 2, 3]}\">>).\n{[{<<\"key\">>,<<\"value\">>},{<<\"array\">>,[1,2,3]}]}\n\n%% \u5165\u529b\u5024\u304c\u4e0d\u6b63\u306a\u5834\u5408\n> json_decode_1:decode(<<\"[1, abc, 2]\">>).  % abc \u304c\u4e0d\u6b63\n** exception error: bad argument\n     in function  json_decode_1:value/1\n        called as json_decode_1:value(<<\"abc, 2]\">>)\n     in call from json_decode_1:array/2 (json_decode_1.erl, line 44)\n     in call from json_decode_1:decode/1 (json_decode_1.erl, line 18)\n```\n\u3068\u308a\u3042\u3048\u305a\u52d5\u3044\u3066\u3044\u308b\u3002\n\n\u8a08\u6642\n====\n\n\u5f8c\u306e\u6700\u9069\u5316\u306e\u52b9\u679c\u3092\u56f3\u308b\u305f\u3081\u306b\u3001\u3053\u306e\u5b9f\u88c5\u306e\u51e6\u7406\u901f\u5ea6\u3092\u8a08\u6e2c\u3057\u3066\u304a\u304f\u3002\n\n\u8a08\u6e2c\u306b\u306f[erl_json_test](https://github.com/si14/erl_json_test)\u3092\u5229\u7528\u3055\u305b\u3066\u8cb0\u3063\u305f\u3002 (commit: 7ae5a254943ce3e5d9e4d5eb9cd2e86b92ce8e83)\n\u3053\u306e\u30c6\u30b9\u30c8(\u8a08\u6642\u65b9\u6cd5)\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aJSON\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u30c7\u30b3\u30fc\u30c9\u95a2\u6570\u3092300\u56de\u9069\u7528\u3057\u3001\u305d\u306e\u5e73\u5747\u51e6\u7406\u6642\u9593\u3092\u6c42\u3081\u308b\u3001\u3068\u3044\u3046\u5185\u5bb9\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n(\u5165\u529bJSON\u306f\u3001500B\u304b\u3089122KB\u307e\u3067\u306e\u30b5\u30a4\u30ba\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b)\n```json:erl_json_test/priv/1x.json\n{\n\"id\": 1,\n\"jsonrpc\": \"2.0\",\n\"total\": 1,\n\"result\": [\n{\n\"id\": 1,\n\"avatar\": \"images/user_1.png\",\n\"age\": 38,\n\"admin\": false,\n\"name\": \"\u0424\u0435\u043b\u0438\u043a\u0441 \u0428\u0432\u0435\u0446\",\n\"company\": \"Genland\",\n\"phone\": \"+70955600298\",\n\"email\": \"feliks@genland.com\",\n\"registerDate\": \"Tue, 18 Aug 2009 14:09:40 GMT\",\n\"friends\": [\n{\n\"id\": 1,\n\"name\": \"\u042f\u043a\u043e\u0432 \u041e\u043b\u0435\u0439\u043d\u0438\u043a\",\n\"phone\": \"+70950177368\"\n},\n{\n\"id\": 2,\n\"name\": \"\u0410\u043d\u0442\u043e\u043d \u041a\u043e\u0432\u0430\u043b\u0435\u043d\u043a\u043e\",\n\"phone\": \"+70958920708\"\n},\n{\n\"id\": 3,\n\"name\": \"\u041b\u0435\u043e\u043d\u0438\u0434 \u041f\u0440\u0438\u0445\u043e\u0434\u044c\u043a\u043e\",\n\"phone\": \"+70958423612\"\n}\n],\n\"field\": \"field value\"\n}\n]\n}\n```\n\u307e\u305f\u3001\u4eca\u56de\u4f5c\u6210\u3057\u305fjson_decode_1\u30e2\u30b8\u30e5\u30fc\u30eb\u7528\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u306epatch\u3092\u5f53\u3066\u3066\u3044\u308b\u3002\n\n```diff:erl_json_test/src/erl_json_test.erl.patch\ndiff --git src/erl_json_test.erl src/erl_json_test.erl\nindex a912a29..c5b634e 100644\n--- src/erl_json_test.erl\n+++ src/erl_json_test.erl\n@@ -4,6 +4,8 @@\n -define(NUM_TESTS, 300).\n -define(PARSERS,\n         [{\"jsonx\", fun jsonx:encode/1, fun jsonx:decode/1},\n+         %% json_decode_1\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30c6\u30b9\u30c8\u5bfe\u8c61\u306b\u767b\u9332\u3059\u308b\n+         {\"json_decode_1\", fun (_) -> ok end, fun json_decode_1:decode/1},\n          {\"yawsjson2\", fun json2:encode/1, fun json2:decode/1},\n          {\"jiffy\", fun jiffy:encode/1, fun jiffy:decode/1},\n          {\"jsonerl\", fun jsonerl:encode/1, fun jsonerl:decode/1},\n@@ -20,14 +22,20 @@\n start() ->\n     JSONs = [begin\n                  FullName = \"priv/\" ++ FileName,\n                  {ok, File} = file:read_file(FullName),\n-                 {Name, File}\n+\n+                 %% \u5165\u529bJSON\u306b \u8ca0\u306e\u6574\u6570 \u304a\u3088\u3073 \u975eASCII\u6587\u5b57 \u304c\u5165\u529b\u306b\u542b\u307e\u308c\u306a\u3044\u3088\u3046\u306b\u5909\u63db\u3059\u308b\n+                 File2 = [case C =:= $- orelse C >= 16#80 of\n+                              true  -> $ ;\n+                              false -> C\n+                          end || <<C>> <= File],\n+                 {Name, list_to_binary(File2)}\n              end\n              || {Name, FileName} <- ?TESTFILES],\n     _A = [ jsonx:encode(jsonx:decode(File)) || {_, File} <- JSONs],\n     _B = [ jiffy:encode(jiffy:decode(File)) || {_, File} <- JSONs],\n     _C = [ mochijson2:encode(mochijson2:decode(File)) || {_, File} <- JSONs],\n     _D = [ jsx:term_to_json(jsx:json_to_term(File)) || {_, File} <- JSONs],\n+    _E = [ json_decode_1:decode(File) || {_, File} <- JSONs],\n     ResultsDeep = [[begin\n                         T = {ParserName, TestName, size(JSON),\n                              bench(EncFun, DecFun, JSON)},\n```\n\n\u8a08\u6642\u7d50\u679c\n-------\n\n\u5165\u529bJSON(\u30d5\u30a1\u30a4\u30eb)\u306e\u7a2e\u985e\u3068\u30b5\u30a4\u30ba:\n\n| 1x.json | 3x.json | 9x.json | 27x.json | 81x.json | 243x.json |\n|-------:|--------:|---------:|---------:|---------:|----------:|\n|  0.5KB |   1.5KB |    4.5KB |   13.5KB |   40.5KB |   121.8KB |\n\n\u5404\u5165\u529b\u306b\u5bfe\u3059\u308b\u5e73\u5747\u30c7\u30b3\u30fc\u30c9\u51e6\u7406\u6642\u9593:\n\n| \u5e73\u5747\u51e6\u7406\u6642\u9593             | 1x.json | 3x.json | 9x.json | 27x.json | 81x.json | 243x.json |\n|------------------------|--------:|--------:|--------:|---------:|---------:|----------:|\n| json_decode_1:decode/1 |    49\u03bcs |   153\u03bcs |   412\u03bcs |   1163\u03bcs |   4089\u03bcs |   11780\u03bcs |\n\n\u3053\u306e\u8a08\u6642\u7d50\u679c\u3092\u57fa\u6e96\u306b\u3001\u6b21\u56de\u4ee5\u964d\u3067\u6700\u9069\u5316\u3092\u884c\u3044\u3001\u305d\u306e\u52b9\u679c\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3002\n", "tags": ["Erlang"]}