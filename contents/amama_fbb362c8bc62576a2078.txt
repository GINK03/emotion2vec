{"tags": ["\u30a4\u30f3\u30d7\u30ea\u30e1\u30f3\u30c6\u30a3\u30f3\u30b0\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb\u30e9\u30f3\u30b2\u30fc\u30b8\u30ba"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\n13\u65e5\u76ee\n\u3084\u308b\u304d\u304c\u3067\u306a\u3044\n\n59\u30da\u30fc\u30b8\u76ee\n\u305f\u3060\u30b3\u30d4\u30da\u3057\u30662.3.5\u3092\u7d42\u308f\u3089\u305b\u305f.\u6587\u7ae0\u3092\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u660e\u65e5\u4ee5\u964d\u8aad\u3080.\ninstantiateConstr\u3068\u304bLet\u3068\u304b\u306e\u578b\u5ba3\u8a00\u304c\u306a\u3044\u306e\u306f\u3044\u3044\u306e\u3060\u308d\u3046\u304b\n\u306d\u3080\u3044\nscStep :: TiState -> Name -> [Name] -> CoreExpr -> TiState\nscStep (stack, dump, heap, globals, stats) sc_name arg_names body = (new_stack, dump, new_heap, globals, stats)\n    where\n    new_stack = result_addr : (drop (length arg_names+1) stack)\n    (new_heap, result_addr) = instantiate body heap env\n    env = arg_bindings ++ globals\n    arg_bindings = zip2 arg_names (getargs heap stack)\n\n-- now getargs since getArgs conflicts with Gofer standard.prelude\ngetargs :: TiHeap -> TiStack -> [Addr]\ngetargs heap (sc:stack) = map get_arg stack\n    where get_arg addr = arg where (NAp fun arg) = hLookup heap addr\n\ninstantiate :: CoreExpr -- Body of supercombinator\n    -> TiHeap -- Heap before instantiation\n    -> ASSOC Name Addr -- Association of names to addresses\n    -> (TiHeap, Addr) -- Heap after instantiation, and\n-- address of root of instance\n\ninstantiate (ENum n) heap env = hAlloc heap (NNum n)\ninstantiate (EAp e1 e2) heap env = hAlloc heap2 (NAp a1 a2)\n    where\n    (heap1, a1) = instantiate e1 heap env\n    (heap2, a2) = instantiate e2 heap1 env\ninstantiate (EVar v) heap env = (heap, aLookup env v (error (\"Undefined name \" ++ show v)))\ninstantiate (EConstr tag arity) heap env = instantiateConstr tag arity heap env\ninstantiate (ELet isrec defs body) heap env = instantiateLet isrec defs body heap env\ninstantiate (ECase e alts) heap env = error \"Can\u2019t instantiate case exprs\"\n\ninstantiateConstr tag arity heap env = error \"Can\u2019t instantiate constructors yet\"\ninstantiateLet isrec defs body heap env = error \"Can\u2019t instantiate let(rec)s yet\"\n\n2.3.5\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3057\u305f\n# 13\u65e5\u76ee\n\n\u3084\u308b\u304d\u304c\u3067\u306a\u3044\n\n## 59\u30da\u30fc\u30b8\u76ee\n\u305f\u3060\u30b3\u30d4\u30da\u3057\u30662.3.5\u3092\u7d42\u308f\u3089\u305b\u305f.\u6587\u7ae0\u3092\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u660e\u65e5\u4ee5\u964d\u8aad\u3080.\ninstantiateConstr\u3068\u304bLet\u3068\u304b\u306e\u578b\u5ba3\u8a00\u304c\u306a\u3044\u306e\u306f\u3044\u3044\u306e\u3060\u308d\u3046\u304b\n\u306d\u3080\u3044\n\n```hs\nscStep :: TiState -> Name -> [Name] -> CoreExpr -> TiState\nscStep (stack, dump, heap, globals, stats) sc_name arg_names body = (new_stack, dump, new_heap, globals, stats)\n    where\n    new_stack = result_addr : (drop (length arg_names+1) stack)\n    (new_heap, result_addr) = instantiate body heap env\n    env = arg_bindings ++ globals\n    arg_bindings = zip2 arg_names (getargs heap stack)\n\n-- now getargs since getArgs conflicts with Gofer standard.prelude\ngetargs :: TiHeap -> TiStack -> [Addr]\ngetargs heap (sc:stack) = map get_arg stack\n    where get_arg addr = arg where (NAp fun arg) = hLookup heap addr\n\ninstantiate :: CoreExpr -- Body of supercombinator\n    -> TiHeap -- Heap before instantiation\n    -> ASSOC Name Addr -- Association of names to addresses\n    -> (TiHeap, Addr) -- Heap after instantiation, and\n-- address of root of instance\n\ninstantiate (ENum n) heap env = hAlloc heap (NNum n)\ninstantiate (EAp e1 e2) heap env = hAlloc heap2 (NAp a1 a2)\n    where\n    (heap1, a1) = instantiate e1 heap env\n    (heap2, a2) = instantiate e2 heap1 env\ninstantiate (EVar v) heap env = (heap, aLookup env v (error (\"Undefined name \" ++ show v)))\ninstantiate (EConstr tag arity) heap env = instantiateConstr tag arity heap env\ninstantiate (ELet isrec defs body) heap env = instantiateLet isrec defs body heap env\ninstantiate (ECase e alts) heap env = error \"Can\u2019t instantiate case exprs\"\n\ninstantiateConstr tag arity heap env = error \"Can\u2019t instantiate constructors yet\"\ninstantiateLet isrec defs body heap env = error \"Can\u2019t instantiate let(rec)s yet\"\n```\n\n**2.3.5\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3057\u305f**\n"}