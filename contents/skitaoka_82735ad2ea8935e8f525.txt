{"context": " More than 1 year has passed since last update.\n\n\u3064\u304f\u308b\n\n\u65b0\u898f\u4f5c\u6210\n$ cargo new dll_example1\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n\n\n\nCargo.toml\n[package]\nname = \"dll_example1\"\nversion = \"0.1.0\"\nauthors = [\"Shinya Kitaoka <skitaoka@gmail.com>\"]\n\n[lib]\nname = \"dll_example1\"\ncrate-type = [\"dylib\"]\n\n\ncrate-type \u306b dylib \u3092\u6307\u5b9a\u3059\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3002\u3061\u306a\u307f\u306b\u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306f staticlib \u3092\u6307\u5b9a\u3059\u308b\u3002\n\nsrc/lib.rs\n#[no_mangle]\npub extern fn square(x: i32) -> i32 {\n  x * x\n}\n\n\nno_mangle \u5c5e\u6027\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3055\u308c\u306a\u304f\u306a\u308b\u3002\n\n\u30d3\u30eb\u30c9\n$ cargo build --release\n\n\ntarget/release/dll_example1.dll \u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\n\u660e\u793a\u7684\u306b\u8aad\u307f\u8fbc\u3080\n\n\u65b0\u898f\u4f5c\u6210\n$ cargo new dll_example2 --bin\n\n\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        main.rs\n\n\n\nCargo.toml\n[package]\nname = \"dll_example1\"\nversion = \"0.1.0\"\nauthors = [\"Shinya Kitaoka <skitaoka@gmail.com>\"]\n\n[dependencies]\nlibloading = \"0.2.0\"\n\n\n\u52d5\u7684\u30ea\u30f3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u660e\u793a\u7684\u306b\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306b dependencies \u306b libloading \u3092\u8ffd\u52a0\u3057\u3066\u304a\u304f\u3002\n\nsrc/main.rs\nextern crate libloading;\n\nfn main() {\n  let dylib_path = \"dll_example1.dll\";\n  let symbol_name = \"square\\0\"; // null-terminated\n\n  let dylib = libloading::Library::new(dylib_path);\n  match dylib {\n    Ok(lib) => {\n      let square_opt: Result<libloading::Symbol<extern fn(i32) -> i32>, _> = unsafe {\n        lib.get(symbol_name.as_bytes())\n      };\n      match square_opt {\n        Ok(square) => {\n          println!(\"square(2) = {}\", square(2))\n        }\n        Err(msg) => {\n          println!(\"{}: `{}`\", msg, symbol_name)\n        }\n      }\n    }\n    Err(msg) => {\n      println!(\"{}: {}\", msg, dylib_path)\n    }\n  }\n}\n\n\n\n\u5b9f\u884c\n$ cp ../target/release/dll_example1.dll .\n$ cargo run\nsquare(2) = 4\n\n\n\u5b9f\u884c\u3059\u308b\u524d\u306b dll_example1.dll \u3092\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\u3002\n# \u3064\u304f\u308b\n\n```bash:\u65b0\u898f\u4f5c\u6210\n$ cargo new dll_example1\n```\n\n```bash:\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        lib.rs\n```\n\n```text:Cargo.toml\n[package]\nname = \"dll_example1\"\nversion = \"0.1.0\"\nauthors = [\"Shinya Kitaoka <skitaoka@gmail.com>\"]\n\n[lib]\nname = \"dll_example1\"\ncrate-type = [\"dylib\"]\n```\n\n`crate-type` \u306b `dylib` \u3092\u6307\u5b9a\u3059\u308b\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3002\u3061\u306a\u307f\u306b\u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308b\u3068\u304d\u306f `staticlib` \u3092\u6307\u5b9a\u3059\u308b\u3002\n\n```rust:src/lib.rs\n#[no_mangle]\npub extern fn square(x: i32) -> i32 {\n  x * x\n}\n```\n\n`no_mangle` \u5c5e\u6027\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3055\u308c\u306a\u304f\u306a\u308b\u3002\n\n```bash:\u30d3\u30eb\u30c9\n$ cargo build --release\n```\n\n`target/release/dll_example1.dll` \u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\n# \u660e\u793a\u7684\u306b\u8aad\u307f\u8fbc\u3080\n\n```bash:\u65b0\u898f\u4f5c\u6210\n$ cargo new dll_example2 --bin\n```\n\n```bash:\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n$ tree\n|   Cargo.toml\n|\n\\---src\n        main.rs\n```\n\n```text:Cargo.toml\n[package]\nname = \"dll_example1\"\nversion = \"0.1.0\"\nauthors = [\"Shinya Kitaoka <skitaoka@gmail.com>\"]\n\n[dependencies]\nlibloading = \"0.2.0\"\n```\n\n\u52d5\u7684\u30ea\u30f3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u660e\u793a\u7684\u306b\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306b `dependencies` \u306b `libloading` \u3092\u8ffd\u52a0\u3057\u3066\u304a\u304f\u3002\n\n```rust:src/main.rs\nextern crate libloading;\n\nfn main() {\n  let dylib_path = \"dll_example1.dll\";\n  let symbol_name = \"square\\0\"; // null-terminated\n\n  let dylib = libloading::Library::new(dylib_path);\n  match dylib {\n    Ok(lib) => {\n      let square_opt: Result<libloading::Symbol<extern fn(i32) -> i32>, _> = unsafe {\n        lib.get(symbol_name.as_bytes())\n      };\n      match square_opt {\n        Ok(square) => {\n          println!(\"square(2) = {}\", square(2))\n        }\n        Err(msg) => {\n          println!(\"{}: `{}`\", msg, symbol_name)\n        }\n      }\n    }\n    Err(msg) => {\n      println!(\"{}: {}\", msg, dylib_path)\n    }\n  }\n}\n```\n\n```bash:\u5b9f\u884c\n$ cp ../target/release/dll_example1.dll .\n$ cargo run\nsquare(2) = 4\n```\n\n\u5b9f\u884c\u3059\u308b\u524d\u306b `dll_example1.dll` \u3092\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\u3002\n", "tags": ["rust"]}