{"context": " More than 1 year has passed since last update.\n\n\u524d\u63d0\u30fb\u4e0b\u6e96\u5099\n\n\nRubyGem\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3080(\u8a2d\u5b9a\u7de8) \u3092\u3061\u3087\u308d\u3063\u3068\u8aad\u3093\u3067\u3001\u8a2d\u5b9a\u3057\u3068\u304f\u3068\u826f\u3044\u3067\u3059\u3002\n\n\nUnicorn\u306e\u7279\u5fb4\n\nMaster\u306f\u4f55\u3082\u3057\u306a\u3044\u3053\u3068\u306f\u7121\u3044\u304c\u3001Worker\u304c\u4f55\u304b\u6b7b\u3093\u3060\u3089\u4f55\u304b\u3057\u3066\u304f\u308c\u308b\uff08\u3053\u308c\u3042\u3093\u307e\u308a\u5206\u304b\u3063\u3066\u306a\u3044\u3067\u3059\uff09\nWorker\u304c\u57fa\u672c\u7684\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\n\u30b9\u30ec\u30c3\u30c9\u3068\u304b\u30a4\u30d9\u30f3\u30c8\u30c9\u30ea\u30d6\u30f3\u3068\u304b\u96e3\u3057\u3044\u304b\u3089\u3001\u306a\u3041...\u30b7\u30f3\u30d7\u30eb\u306b\u3057\u3088\u3046\u3084...\u3063\u3066\u306e\u304c\u54f2\u5b66\u3063\u307d\u3044\u3067\u3059\u3002\n\n\n\u3082\u3063\u3068\u8a73\u3057\u304f\u54f2\u5b66\u3068\u304b\u77e5\u308a\u305f\u3044\u4eba\u5411\u3051\n\u4ee5\u4e0b\u3068\u304b\u53c2\u8003\u306b\u306a\u308b\u306e\u3067\u306f\u7121\u3044\u304b\u3068\u601d\u3044\u307e\u3059\n\nunicorn: Rack HTTP server for fast clients and Unix\nUnicorn!\n\n\n\u5b9f\u969b\u306b\u8aad\u3093\u3067\u898b\u308b\n\n\u8d77\u52d5\u307e\u3067\n\n\u3068\u308a\u3042\u3048\u305a git clone \u3057\u307e\u3059\n\n$ git clone git@github.com:r-fujiwara/django.git\n\n\n\u3068\u308a\u3042\u3048\u305a bundle install \u3057\u3066\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n$ bundle install --path vendor/bundle\n$ bundle exec unicorn -c config/unicorn.rb\n\n\n\u3046\u307e\u304f\u3044\u304f\u3068\u3053\u3093\u306a\u753b\u9762\u304c\u51fa\u307e\u3059 \u306a\u3093\u304b\u9069\u5f53\u306asinatra\u306e\u30bd\u30fc\u30b9\u304b\u3089\u30d1\u30af\u3063\u3066\u6765\u305f\u3093\u3067\u3059\u3051\u3069\u5fd8\u308c\u307e\u3057\u305f\u3002\n\n\n\n\n\u30ed\u30b0\u306f\u3001log/unicorn.stderr.log \u306b\u51fa\u307e\u3059\u306e\u3067\u3001\u4ee5\u4e0b\u307f\u305f\u3044\u306a\u611f\u3058\u306b\u66f8\u304d\u307e\u3057\u305f\u3002\n\n$ tail -f log/unicorn.stderr.log\nI, [2016-01-23T20:50:24.622132 #16518]  INFO -- : unlinking existing socket=/tmp/unicorn.sock\nI, [2016-01-23T20:50:24.622225 #16518]  INFO -- : listening on addr=/tmp/unicorn.sock fd=10\nI, [2016-01-23T20:50:24.622261 #16518]  INFO -- : worker=0 spawning...\nI, [2016-01-23T20:50:24.623837 #16518]  INFO -- : master process ready\nI, [2016-01-23T20:50:24.623922 #16545]  INFO -- : worker=0 spawned pid=16545\nI, [2016-01-23T20:50:24.624088 #16545]  INFO -- : Refreshing Gem list\nI, [2016-01-23T20:50:25.057550 #16545]  INFO -- : worker=0 ready\nI, [2016-01-23T20:50:26.810465 #16518]  INFO -- : SIGWINCH ignored because we're not daemonized\n192.168.33.1 - - [23/Jan/2016:20:50:38 +0900] \"GET / HTTP/1.1\" 200 1809 0.0244\n192.168.33.1 - - [23/Jan/2016:20:50:39 +0900] \"GET /favicon.ico HTTP/1.1\" 404 512 0.0012\n\n\n\u30bd\u30fc\u30b9\u8aad\u3080\u624b\u9806\n\n\u8d77\u52d5\n\u30ed\u30b0\u3092\u8aad\u3080\n\u6c17\u306b\u306a\u308b\u6240\u306b puts \u3092\u631f\u3080\n\u518d\u8d77\u52d5\n\u30ed\u30b0\u3092\u8aad\u3080\n\n\u5730\u9053\u306b\u3084\u308c\u3070\u4f55\u3068\u306a\u304f\u8272\u3005\u308f\u304b\u3063\u3066\u304f\u308b\u3068\u601d\u3044\u307e\u3059\n\n\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\n\n\u7d50\u69cb\u7d30\u304b\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u5834\u5408\u306e\u30bd\u30fc\u30b9\u306fbin/unicorn\u306e126\u884c\u76ee\u3067\u3059\u3002\n\nUnicorn::HttpServer.new(app, options).start.join\n\n\n\u4f55\u3068\u306a\u304f\u3053\u306e\u6642\u70b9\u3067\n\nUnicorn::HttpServer.new\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306estart\u3092\u8aad\u3093\u3067\u3044\u308b\nstart\u306b\u30c1\u30a7\u30fc\u30f3\u3057\u3066join\u3092\u8aad\u3093\u3067\u308b\n\u3060\u304b\u3089start\u306e\u8fd4\u308a\u5024\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8fd4\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5730\u9053\u306bstart\u3068join\u306e\u6319\u52d5\u3092\u8ffd\u3046\n\n\u3068\u304b\u52d8\u304c\u306f\u305f\u3089\u304f\u3068\u826f\u3044\u304b\u3082\u3067\u3059\u3002\n\u6700\u521d\u306f\u5730\u9053\u306b\u8aad\u3093\u3067\u307e\u3057\u305f\u3051\u3069\u3001\u3042\u308b\u7a0b\u5ea6\u30a2\u30bf\u30ea\u3092\u3064\u3051\u306a\u304c\u3089\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u308b\u3068\u3001\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u30b9\u30d4\u30fc\u30c9\u306f\u4e0a\u304c\u308b\u6c17\u304c\u3057\u307e\u3059\uff08\u6c17\u304c\u3059\u308b\u3060\u3051\uff09\n\n\n\u6642\u306f\u6765\u305f\uff01\u305d\u308c\u3060\u3051\u3060... \u3053\u308c\u304b\u3089\u304c\u672c\u756a\u3067\u3059\n\n\nUnicorn::HttpServer.new \u3067\u3059\u304c\u3001\u30bd\u30fc\u30b9\u306f vendor/bundle/ruby/2.2.0/gems/unicorn-4.9.0/ \u914d\u4e0b\u306e vendor/bundle/ruby/2.2.0/gems/unicorn-4.9.0/lib/unicorn/http_server.rb \u306b\u3042\u308a\u307e\u3059\u3002\n\u306a\u306e\u3067\u3053\u3053\u3092\u8aad\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n\n\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3059\u3079\u304d\u70b9\n\nhttp_server.rb#start\n\n\u8272\u3005\u5927\u4e8b\u306a\u3093\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u5927\u4e8b\u306a\u306e\u306f spawn_missing_workers \u3067\u3059\u3002\n\n\nhttp_server.rb#start\n  def start\n    inherit_listeners!\n    # this pipe is used to wake us up from select(2) in #join when signals\n    # are trapped.  See trap_deferred.\n    @self_pipe.replace(Unicorn.pipe)\n    @master_pid = $$\n\n    # setup signal handlers before writing pid file in case people get\n    # trigger happy and send signals as soon as the pid file exists.\n    # Note that signals don't actually get handled until the #join method\n    @queue_sigs.each { |sig| trap(sig) { @sig_queue << sig; awaken_master } }\n    trap(:CHLD) { awaken_master }\n\n    # write pid early for Mongrel compatibility if we're not inheriting sockets\n    # This is needed for compatibility some Monit setups at least.\n    # This unfortunately has the side effect of clobbering valid PID if\n    # we upgrade and the upgrade breaks during preload_app==true && build_app!\n    self.pid = config[:pid]\n\n    build_app! if preload_app\n    bind_new_listeners!\n\n    # \u3053\u3053\n    spawn_missing_workers\n    self\n  end\n\n\n\nhttp_server.rb#spawn_missing_workers\n\n\u3053\u3053\u3067\u3084\u3063\u3066\u3044\u308b\u306e\u306f\n\nWorker\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u751f\u6210\nMaster\u306e\u30d7\u30ed\u30bb\u30b9\u3092fork\nWorker\u306e\u30d7\u30ed\u30bb\u30b9\u3092loop\u3055\u305b\u308b(worker_loop)\n\nspawn_missing_workes.rb\n  def spawn_missing_workers\n    worker_nr = -1\n    until (worker_nr += 1) == @worker_processes\n      @workers.value?(worker_nr) and next\n      worker = Unicorn::Worker.new(worker_nr)\n      before_fork.call(self, worker)\n      if pid = fork\n        @workers[pid] = worker\n        worker.atfork_parent\n      else\n        after_fork_internal\n        worker_loop(worker)\n        exit\n      end\n    end\n    rescue => e\n      @logger.error(e) rescue nil\n      exit!\n  end\n\n\n\nfork\u304c\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u4eba\u306f\u30b0\u30b0\u308b\u304b\u3001\u5f8c\u8ff0\u3059\u308b\u306a\u308b\u307b\u3069Unix\u30d7\u30ed\u30bb\u30b9 \u2015 Ruby\u3067\u5b66\u3076Unix\u306e\u57fa\u790e \u3092\u8aad\u3080\u3068\u3044\u3044\u3067\u3059\u3002\n\u30da\u30fc\u30b8\u6570\u306f\u8584\u3044\u3067\u3059\u304c\u3001\u5206\u304b\u308a\u3084\u3059\u3044\u8a9e\u308a\u53e3\u3068\u77ed\u3044\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u500b\u4eba\u7684\u306b\u306f\u51c4\u304f\u826f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u4ed6\u306e\u8a00\u8a9e\u3067\u3082fork\u3084\u30d7\u30ed\u30bb\u30b9\u306e\u6982\u5ff5\u306f\u5fdc\u7528\u304c\u5229\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n\nhttp_server.rb#worker_loop\n\n\u3061\u3087\u3063\u3068\u30b3\u30b3\u3089\u3078\u3093\u306e\u7d30\u304b\u3044\u6319\u52d5\u306f\u5fd8\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001process_client \u304c\u5927\u4e8b\u3067\u3059\u3002\n\u3053\u3053\u304c Rack\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5165\u308a\u53e3\u306b\u306a\u308a\u307e\u3059\u3002\n\u7d30\u304b\u3044\u6319\u52d5\u306f\u30ac\u30c1\u3067puts\u30b2\u30fc\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u57fa\u672c\u7684\u306b\u306f\n\nWorker\u30d7\u30ed\u30bb\u30b9\u3092\u7121\u9650\u30eb\u30fc\u30d7\u3055\u305b\u308b\nprocess_client\u3092\u547c\u3076\n\nworker_loop.rb\n  # runs inside each forked worker, this sits around and waits\n  # for connections and doesn't die until the parent dies (or is\n  # given a INT, QUIT, or TERM signal)\n  def worker_loop(worker)\n    ppid = @master_pid\n    readers = init_worker_process(worker)\n    nr = 0 # this becomes negative if we need to reopen logs\n\n    # this only works immediately if the master sent us the signal\n    # (which is the normal case)\n    trap(:USR1) { nr = -65536 }\n\n    ready = readers.dup\n    @logger.info \"worker=#{worker.nr} ready\"\n\n    begin\n      nr < 0 and reopen_worker_logs(worker.nr)\n      nr = 0\n      worker.tick = time_now.to_i\n      tmp = ready.dup\n      while sock = tmp.shift\n        # Unicorn::Worker#kgio_tryaccept is not like accept(2) at all,\n        # but that will return false\n        if client = sock.kgio_tryaccept\n          # \u3053\u3053\n          process_client(client)\n          nr += 1\n          worker.tick = time_now.to_i\n        end\n        break if nr < 0\n      end\n\n      # make the following bet: if we accepted clients this round,\n      # we're probably reasonably busy, so avoid calling select()\n      # and do a speculative non-blocking accept() on ready listeners\n      # before we sleep again in select().\n      unless nr == 0\n        tmp = ready.dup\n        redo\n      end\n\n      ppid == Process.ppid or return\n\n      # timeout used so we can detect parent death:\n      worker.tick = time_now.to_i\n      ret = IO.select(readers, nil, nil, @timeout) and ready = ret[0]\n    rescue => e\n      redo if nr < 0 && readers[0]\n      Unicorn.log_error(@logger, \"listen loop error\", e) if readers[0]\n    end while readers[0]\n  end\n\n\n\nhttp_server.rb#process_client\n\n\u3053\u3053\u306f Rack\u30b5\u30fc\u30d0\uff08Unicorn\uff09\u304b\u3089Rack\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3(Rails\u3068\u304bSinatra\u3068\u304b)\u306b\u51e6\u7406\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f 562\u884c\u76ee\u3067\u3057\u3087\u3046\u304b\n\u3053\u308c\u306f\u591a\u5206Rack\u306b\u6e21\u3057\u3066\u3044\u308b\u306e\u306f\u30bd\u30fc\u30b9\u8aad\u3080\u306e\u3060\u3068\u5206\u304b\u308a\u3065\u3089\u3044\u306e\u3067\u3001\u307e\u305f\u5225\u9014\u8a18\u4e8b\u3092\u66f8\u3053\u3046\u304b\u306a\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n  # once a client is accepted, it is processed in its entirety here\n  # in 3 easy steps: read request, call app, write app response\n  def process_client(client)\n    # \u3053\u3053\n    status, headers, body = @app.call(env = @request.read(client))\n\n    begin\n      return if @request.hijacked?\n\n      if 100 == status.to_i\n        e100_response_write(client, env)\n        status, headers, body = @app.call(env)\n        return if @request.hijacked?\n      end\n      @request.headers? or headers = nil\n      http_response_write(client, status, headers, body,\n                          @request.response_start_sent)\n    ensure\n      body.respond_to?(:close) and body.close\n    end\n\n    unless client.closed? # rack.hijack may've close this for us\n      client.shutdown # in case of fork() in Rack app\n      client.close # flush and uncork socket immediately, no keepalive\n    end\n  rescue => e\n    handle_error(client, e)\n  end\n\n\nhttp_server.rb#join\n\n\u8a73\u3057\u304f\u306f\u8ffd\u3063\u3066\u7121\u3044\u3067\u3059\u304c\u3001\u30bd\u30fc\u30b9\u3092\u3056\u3063\u3068\u8aad\u3080\u611f\u3058\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u3051\u53d6\u3063\u305f\u6642\u306b\u3001worker\u306e\u6319\u52d5\u3092\u3069\u3046\u3044\u3046\u98a8\u306b\u5236\u5fa1\u3059\u308b\u304b\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u3053\u3089\u3078\u3093\u306f\u3042\u307e\u308a\u81ea\u4fe1\u304c\u3042\u308a\u307e\u305b\u3093...\n\n\nhttp_server.rb#join\n  # monitors children and receives signals forever\n  # (or until a termination signal is sent).  This handles signals\n  # one-at-a-time time and we'll happily drop signals in case somebody\n  # is signalling us too often.\n  def join\n    respawn = true\n    last_check = time_now\n\n    proc_name 'master'\n    logger.info \"master process ready\" # test_exec.rb relies on this message\n    if @ready_pipe\n      begin\n        @ready_pipe.syswrite($$.to_s)\n      rescue => e\n        logger.warn(\"grandparent died too soon?: #{e.message} (#{e.class})\")\n      end\n      @ready_pipe = @ready_pipe.close rescue nil\n    end\n    begin\n      reap_all_workers\n      case @sig_queue.shift\n      when nil\n        # avoid murdering workers after our master process (or the\n        # machine) comes out of suspend/hibernation\n        if (last_check + @timeout) >= (last_check = time_now)\n          sleep_time = murder_lazy_workers\n        else\n          sleep_time = @timeout/2.0 + 1\n          @logger.debug(\"waiting #{sleep_time}s after suspend/hibernation\")\n        end\n        maintain_worker_count if respawn\n        master_sleep(sleep_time)\n      when :QUIT # graceful shutdown\n        break\n      when :TERM, :INT # immediate shutdown\n        stop(false)\n        break\n      when :USR1 # rotate logs\n        logger.info \"master reopening logs...\"\n        Unicorn::Util.reopen_logs\n        logger.info \"master done reopening logs\"\n        soft_kill_each_worker(:USR1)\n      when :USR2 # exec binary, stay alive in case something went wrong\n        reexec\n      when :WINCH\n        if $stdin.tty?\n          logger.info \"SIGWINCH ignored because we're not daemonized\"\n        else\n          respawn = false\n          logger.info \"gracefully stopping all workers\"\n          soft_kill_each_worker(:QUIT)\n          self.worker_processes = 0\n        end\n      when :TTIN\n        respawn = true\n        self.worker_processes += 1\n      when :TTOU\n        self.worker_processes -= 1 if self.worker_processes > 0\n      when :HUP\n        respawn = true\n        if config.config_file\n          load_config!\n        else # exec binary and exit if there's no config file\n          logger.info \"config_file not present, reexecuting binary\"\n          reexec\n        end\n      end\n    rescue => e\n      Unicorn.log_error(@logger, \"master loop error\", e)\n    end while true\n    stop # gracefully shutdown all workers on our way out\n    logger.info \"master complete\"\n    unlink_pid_safe(pid) if pid\n  end\n\n\n\n\u8d85\u3048\u3089\u308c\u3066\u306a\u3044\u58c1\n\n\u30d3\u30eb\u30c9\u304cgithub\u306eUnicorn\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u901a\u3089\u306a\u3044\n\n\nbundler\u3067github\u4e0a\u306eunicorn\u3092\u5f37\u5f15\u306b\u5165\u308c\u308b \u3092\u8aad\u3093\u3067\u8a66\u3057\u305f\u308a\u3057\u305f\u3093\u3067\u3059\u304c\u3001\u30d3\u30eb\u30c9\u304c\u901a\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u4ffa\u306e\u610f\u8b58\u304c\u4f4e\u3059\u304e\u308b\u306e\u304c\u539f\u56e0\u3067\u3059\u306d\n\n\nkgio\u3068\u304b\u306e\u51e6\u7406\n\nUnicorn\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5468\u308a\u306e\u5177\u4f53\u7684\u306a\u51e6\u7406\u306f kgio\u304c\u3084\u3063\u3066\u308b\u307f\u305f\u3044\u3067\u3059\uff08\u591a\u5206\uff09\nUnicorn\u306eRuby\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u90e8\u5206\u306f\u7d50\u69cb\u5927\u307e\u304b\u306a\u30ed\u30b8\u30c3\u30af\u3092\u53f8\u3063\u3066\u3044\u308b\uff08\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u9593\u9055\u3063\u3066\u305f\u3089\u672c\u5f53\u306b\u3054\u3081\u3093\u306a\u3055\u3044\uff09\n\u3057\u304b\u3057\u306a\u304c\u3089\u5927\u5b66\u6642\u4ee3\u306b C\u8a00\u8a9e\u7cfb\u306e\u52c9\u5f37\u30b5\u30dc\u3063\u3066 \u5927\u5b66\u306b\u3042\u3063\u305fXbox \u3067 Call of Duty4 Modern Warfare\u306e\u30ad\u30e3\u30f3\u30da\u30fc\u30f3\u306e\u30d9\u30c6\u30e9\u30f3\u3092\u3084\u308a\u3053\u3093\u3067\u3001\u3057\u304b\u3082\u5168\u30af\u30ea\u51fa\u6765\u306a\u304b\u3063\u305f\u30b7\u30e7\u30dc\u3044\u30af\u30bd\u3060\u3063\u305f \u3044\u305f\u306e\u3067\u3001\u3042\u307e\u308a\u540c\u6642\u63a5\u7d9a\u6570\u304c\u3069\u3046\u305f\u3089\u3068\u304b\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n\u6094\u3057\u3044\u306e\u3067\u5f8c\u3005\u3061\u3083\u3093\u3068\u52c9\u5f37\u3057\u3066\u30bd\u30fc\u30b9\u8aad\u3093\u3067 printf \u3057\u307e\u304f\u3063\u3066\u6319\u52d5\u3092\u8ffd\u3044\u307e\u304f\u3063\u3066\u3084\u308a\u305f\u3044\u306a\u301c\u3068\u306f\u601d\u3063\u3066\u3044\u307e\u3059\n\n\nReference\n\nfork\u3068\u304b\u305d\u3046\u3044\u3046\u7cfb\n\u7d50\u69cbUnicorn\u306e\u30bd\u30fc\u30b9\u3084\u6319\u52d5\u3092\u8ffd\u3046\u4e0a\u3067\u53c2\u8003\u306b\u306a\u3063\u305f\u306e\u304c\n\n\n\u306a\u308b\u307b\u3069Unix\u30d7\u30ed\u30bb\u30b9 \u2015 Ruby\u3067\u5b66\u3076Unix\u306e\u57fa\u790e \u3067\u3059\u3002\nResque\u3068\u304b\u3082\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u30e2\u30c7\u30eb\u306a\u306e\u3067\u3001Unicorn\u3067\u5b66\u3093\u3060\u77e5\u8b58\u306f\u5fdc\u7528\u304c\u52b9\u304f\u306e\u3067\u306f\u7121\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\u30bd\u30fc\u30b9\u8aad\u3093\u3060\u307b\u3046\u304c\u3044\u3044\u52d5\u6a5f\u3068\u304b\n\n\n\u52c9\u5f37\u304c\u51fa\u6765\u306a\u3044\u5974\u306f\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u306a\u308c\uff01\uff08\u30d0\u30ab\u3060\u304b\u3089\u3067\u304d\u308b\u52c9\u5f37\u6cd5\uff09\n\n\u3053\u3053\u3067\u51fa\u3066\u304f\u308b\u30a4\u30e1\u30fc\u30b8\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3068\u304b\u3001\u624b\u5143\u306b\u30bd\u30fc\u30b9\u3092\u6301\u3063\u3066\u304f\u308b\u3068\u304b\u306f\u7d50\u5c40\u3084\u3063\u3066\u308b\u3053\u3068\u3042\u3093\u307e\u5909\u308f\u3093\u306a\u3044\u306e\u304b\u306a\u3041\u3068\u601d\u3044\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u66f8\u304d\u63db\u3048\u305f\u308a\u307e\u3067\u3057\u305f\u308a\u306f\u3057\u3066\u306a\u3044\u3057\u3001\u305d\u306e\u70b9\u3067\u8a00\u3048\u3070\u4ffa\u306f\u307e\u3060\u307e\u3060\u3067\u3059\u304c\u3002\n\n\n\n\n\u8b1d\u8f9e\n\n\u7d50\u69cb\u300c\u3053\u308c\u308f\u304b\u3093\u306a\u3044\u3067\u3059\u300d\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u76f8\u8ac7\u3057\u305f\u3089\u30a2\u30c9\u30d0\u30a4\u30b9\u304f\u308c\u305f\u5148\u8f29\u9054\u304c\u8907\u6570\u4eba\u3044\u307e\u3057\u305f\uff08\u4f55\u304b\u540d\u524d\u51fa\u3055\u3093\u3067\u304f\u308c\u3063\u3066\u8a00\u308f\u308c\u305f\u3093\u3067\u3042\u3048\u3066\u540d\u524d\u51fa\u3055\u306a\u3044\u3067\u3059\u304c\uff09\u3002\u52dd\u624b\u306b\u3053\u3053\u3067\u8b1d\u8f9e\u3057\u307e\u3059\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\n# \u524d\u63d0\u30fb\u4e0b\u6e96\u5099\n\n- [RubyGem\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3080(\u8a2d\u5b9a\u7de8)](http://qiita.com/r-fujiwara/items/faf643d6e8abf36cdff5) \u3092\u3061\u3087\u308d\u3063\u3068\u8aad\u3093\u3067\u3001\u8a2d\u5b9a\u3057\u3068\u304f\u3068\u826f\u3044\u3067\u3059\u3002\n\n# Unicorn\u306e\u7279\u5fb4\n\n- Master\u306f\u4f55\u3082\u3057\u306a\u3044\u3053\u3068\u306f\u7121\u3044\u304c\u3001Worker\u304c\u4f55\u304b\u6b7b\u3093\u3060\u3089\u4f55\u304b\u3057\u3066\u304f\u308c\u308b\uff08\u3053\u308c\u3042\u3093\u307e\u308a\u5206\u304b\u3063\u3066\u306a\u3044\u3067\u3059\uff09\n- Worker\u304c\u57fa\u672c\u7684\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\n- \u30b9\u30ec\u30c3\u30c9\u3068\u304b\u30a4\u30d9\u30f3\u30c8\u30c9\u30ea\u30d6\u30f3\u3068\u304b\u96e3\u3057\u3044\u304b\u3089\u3001\u306a\u3041...\u30b7\u30f3\u30d7\u30eb\u306b\u3057\u3088\u3046\u3084...\u3063\u3066\u306e\u304c\u54f2\u5b66\u3063\u307d\u3044\u3067\u3059\u3002\n\n### \u3082\u3063\u3068\u8a73\u3057\u304f\u54f2\u5b66\u3068\u304b\u77e5\u308a\u305f\u3044\u4eba\u5411\u3051\n\n\u4ee5\u4e0b\u3068\u304b\u53c2\u8003\u306b\u306a\u308b\u306e\u3067\u306f\u7121\u3044\u304b\u3068\u601d\u3044\u307e\u3059\n\n- [unicorn: Rack HTTP server for fast clients and Unix](http://unicorn.bogomips.org/)\n- [Unicorn!](https://github.com/blog/517-unicorn)\n\n# \u5b9f\u969b\u306b\u8aad\u3093\u3067\u898b\u308b\n\n## \u8d77\u52d5\u307e\u3067\n\n- \u3068\u308a\u3042\u3048\u305a `git clone` \u3057\u307e\u3059\n\n```\n$ git clone git@github.com:r-fujiwara/django.git\n```\n\n- \u3068\u308a\u3042\u3048\u305a `bundle install` \u3057\u3066\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n```\n$ bundle install --path vendor/bundle\n$ bundle exec unicorn -c config/unicorn.rb\n```\n\n- \u3046\u307e\u304f\u3044\u304f\u3068\u3053\u3093\u306a\u753b\u9762\u304c\u51fa\u307e\u3059 ~~\u306a\u3093\u304b\u9069\u5f53\u306asinatra\u306e\u30bd\u30fc\u30b9\u304b\u3089\u30d1\u30af\u3063\u3066\u6765\u305f\u3093\u3067\u3059\u3051\u3069\u5fd8\u308c\u307e\u3057\u305f\u3002~~\n\n![Screen Shot 2016-01-23 at 20.50.40.png](https://qiita-image-store.s3.amazonaws.com/0/46303/5f4e9b1c-603b-2b45-5d64-f4d8163d8597.png)\n\n- \u30ed\u30b0\u306f\u3001`log/unicorn.stderr.log` \u306b\u51fa\u307e\u3059\u306e\u3067\u3001\u4ee5\u4e0b\u307f\u305f\u3044\u306a\u611f\u3058\u306b\u66f8\u304d\u307e\u3057\u305f\u3002\n\n```\n$ tail -f log/unicorn.stderr.log\nI, [2016-01-23T20:50:24.622132 #16518]  INFO -- : unlinking existing socket=/tmp/unicorn.sock\nI, [2016-01-23T20:50:24.622225 #16518]  INFO -- : listening on addr=/tmp/unicorn.sock fd=10\nI, [2016-01-23T20:50:24.622261 #16518]  INFO -- : worker=0 spawning...\nI, [2016-01-23T20:50:24.623837 #16518]  INFO -- : master process ready\nI, [2016-01-23T20:50:24.623922 #16545]  INFO -- : worker=0 spawned pid=16545\nI, [2016-01-23T20:50:24.624088 #16545]  INFO -- : Refreshing Gem list\nI, [2016-01-23T20:50:25.057550 #16545]  INFO -- : worker=0 ready\nI, [2016-01-23T20:50:26.810465 #16518]  INFO -- : SIGWINCH ignored because we're not daemonized\n192.168.33.1 - - [23/Jan/2016:20:50:38 +0900] \"GET / HTTP/1.1\" 200 1809 0.0244\n192.168.33.1 - - [23/Jan/2016:20:50:39 +0900] \"GET /favicon.ico HTTP/1.1\" 404 512 0.0012\n```\n\n## \u30bd\u30fc\u30b9\u8aad\u3080\u624b\u9806\n\n- \u8d77\u52d5\n- \u30ed\u30b0\u3092\u8aad\u3080\n- \u6c17\u306b\u306a\u308b\u6240\u306b `puts` \u3092\u631f\u3080\n- \u518d\u8d77\u52d5\n- \u30ed\u30b0\u3092\u8aad\u3080\n\n\u5730\u9053\u306b\u3084\u308c\u3070\u4f55\u3068\u306a\u304f\u8272\u3005\u308f\u304b\u3063\u3066\u304f\u308b\u3068\u601d\u3044\u307e\u3059\n\n## \u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\n\n- \u7d50\u69cb\u7d30\u304b\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u5834\u5408\u306e\u30bd\u30fc\u30b9\u306f[bin/unicorn\u306e126\u884c\u76ee](https://github.com/defunkt/unicorn/blob/master/bin/unicorn#L126)\u3067\u3059\u3002\n\n```rb\nUnicorn::HttpServer.new(app, options).start.join\n```\n\n- \u4f55\u3068\u306a\u304f\u3053\u306e\u6642\u70b9\u3067\n\n**Unicorn::HttpServer.new\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210**\n**\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306estart\u3092\u8aad\u3093\u3067\u3044\u308b**\n**start\u306b\u30c1\u30a7\u30fc\u30f3\u3057\u3066join\u3092\u8aad\u3093\u3067\u308b**\n**\u3060\u304b\u3089start\u306e\u8fd4\u308a\u5024\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8fd4\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5730\u9053\u306bstart\u3068join\u306e\u6319\u52d5\u3092\u8ffd\u3046**\n\n- \u3068\u304b\u52d8\u304c\u306f\u305f\u3089\u304f\u3068\u826f\u3044\u304b\u3082\u3067\u3059\u3002\n- \u6700\u521d\u306f\u5730\u9053\u306b\u8aad\u3093\u3067\u307e\u3057\u305f\u3051\u3069\u3001\u3042\u308b\u7a0b\u5ea6\u30a2\u30bf\u30ea\u3092\u3064\u3051\u306a\u304c\u3089\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u308b\u3068\u3001\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u30b9\u30d4\u30fc\u30c9\u306f\u4e0a\u304c\u308b\u6c17\u304c\u3057\u307e\u3059\uff08\u6c17\u304c\u3059\u308b\u3060\u3051\uff09\n\n## ~~[\u6642\u306f\u6765\u305f\uff01\u305d\u308c\u3060\u3051\u3060...](https://www.youtube.com/watch?v=d17c_E7OhMM)~~ \u3053\u308c\u304b\u3089\u304c\u672c\u756a\u3067\u3059\n\n- `Unicorn::HttpServer.new` \u3067\u3059\u304c\u3001\u30bd\u30fc\u30b9\u306f `vendor/bundle/ruby/2.2.0/gems/unicorn-4.9.0/` \u914d\u4e0b\u306e `vendor/bundle/ruby/2.2.0/gems/unicorn-4.9.0/lib/unicorn/http_server.rb` \u306b\u3042\u308a\u307e\u3059\u3002\n- \u306a\u306e\u3067\u3053\u3053\u3092\u8aad\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n### \u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3059\u3079\u304d\u70b9\n\n#### http_server.rb#start\n\n- \u8272\u3005\u5927\u4e8b\u306a\u3093\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u5927\u4e8b\u306a\u306e\u306f `spawn_missing_workers` \u3067\u3059\u3002\n\n```rb:http_server.rb#start\n  def start\n    inherit_listeners!\n    # this pipe is used to wake us up from select(2) in #join when signals\n    # are trapped.  See trap_deferred.\n    @self_pipe.replace(Unicorn.pipe)\n    @master_pid = $$\n\n    # setup signal handlers before writing pid file in case people get\n    # trigger happy and send signals as soon as the pid file exists.\n    # Note that signals don't actually get handled until the #join method\n    @queue_sigs.each { |sig| trap(sig) { @sig_queue << sig; awaken_master } }\n    trap(:CHLD) { awaken_master }\n\n    # write pid early for Mongrel compatibility if we're not inheriting sockets\n    # This is needed for compatibility some Monit setups at least.\n    # This unfortunately has the side effect of clobbering valid PID if\n    # we upgrade and the upgrade breaks during preload_app==true && build_app!\n    self.pid = config[:pid]\n\n    build_app! if preload_app\n    bind_new_listeners!\n\n    # \u3053\u3053\n    spawn_missing_workers\n    self\n  end\n```\n\n#### http_server.rb#spawn_missing_workers\n\n- \u3053\u3053\u3067\u3084\u3063\u3066\u3044\u308b\u306e\u306f\n\n**Worker\u306e\u30d7\u30ed\u30bb\u30b9\u3092\u751f\u6210**\n**Master\u306e\u30d7\u30ed\u30bb\u30b9\u3092fork**\n**Worker\u306e\u30d7\u30ed\u30bb\u30b9\u3092loop\u3055\u305b\u308b(worker_loop)**\n\n```rb:spawn_missing_workes.rb\n  def spawn_missing_workers\n    worker_nr = -1\n    until (worker_nr += 1) == @worker_processes\n      @workers.value?(worker_nr) and next\n      worker = Unicorn::Worker.new(worker_nr)\n      before_fork.call(self, worker)\n      if pid = fork\n        @workers[pid] = worker\n        worker.atfork_parent\n      else\n        after_fork_internal\n        worker_loop(worker)\n        exit\n      end\n    end\n    rescue => e\n      @logger.error(e) rescue nil\n      exit!\n  end\n```\n\n- fork\u304c\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u4eba\u306f\u30b0\u30b0\u308b\u304b\u3001\u5f8c\u8ff0\u3059\u308b[\u306a\u308b\u307b\u3069Unix\u30d7\u30ed\u30bb\u30b9 \u2015 Ruby\u3067\u5b66\u3076Unix\u306e\u57fa\u790e](http://tatsu-zine.com/books/naruhounix) \u3092\u8aad\u3080\u3068\u3044\u3044\u3067\u3059\u3002\n- \u30da\u30fc\u30b8\u6570\u306f\u8584\u3044\u3067\u3059\u304c\u3001\u5206\u304b\u308a\u3084\u3059\u3044\u8a9e\u308a\u53e3\u3068\u77ed\u3044\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u500b\u4eba\u7684\u306b\u306f\u51c4\u304f\u826f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n- \u4ed6\u306e\u8a00\u8a9e\u3067\u3082fork\u3084\u30d7\u30ed\u30bb\u30b9\u306e\u6982\u5ff5\u306f\u5fdc\u7528\u304c\u5229\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n#### http_server.rb#worker_loop\n\n- \u3061\u3087\u3063\u3068\u30b3\u30b3\u3089\u3078\u3093\u306e\u7d30\u304b\u3044\u6319\u52d5\u306f\u5fd8\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001[process_client](https://github.com/defunkt/unicorn/blob/master/lib/unicorn/http_server.rb#L658) \u304c\u5927\u4e8b\u3067\u3059\u3002\n- \u3053\u3053\u304c Rack\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5165\u308a\u53e3\u306b\u306a\u308a\u307e\u3059\u3002\n- \u7d30\u304b\u3044\u6319\u52d5\u306f\u30ac\u30c1\u3067`puts`\u30b2\u30fc\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u57fa\u672c\u7684\u306b\u306f\n\n**Worker\u30d7\u30ed\u30bb\u30b9\u3092\u7121\u9650\u30eb\u30fc\u30d7\u3055\u305b\u308b**\n**process_client\u3092\u547c\u3076**\n\n```rb:worker_loop.rb\n  # runs inside each forked worker, this sits around and waits\n  # for connections and doesn't die until the parent dies (or is\n  # given a INT, QUIT, or TERM signal)\n  def worker_loop(worker)\n    ppid = @master_pid\n    readers = init_worker_process(worker)\n    nr = 0 # this becomes negative if we need to reopen logs\n\n    # this only works immediately if the master sent us the signal\n    # (which is the normal case)\n    trap(:USR1) { nr = -65536 }\n\n    ready = readers.dup\n    @logger.info \"worker=#{worker.nr} ready\"\n\n    begin\n      nr < 0 and reopen_worker_logs(worker.nr)\n      nr = 0\n      worker.tick = time_now.to_i\n      tmp = ready.dup\n      while sock = tmp.shift\n        # Unicorn::Worker#kgio_tryaccept is not like accept(2) at all,\n        # but that will return false\n        if client = sock.kgio_tryaccept\n          # \u3053\u3053\n          process_client(client)\n          nr += 1\n          worker.tick = time_now.to_i\n        end\n        break if nr < 0\n      end\n\n      # make the following bet: if we accepted clients this round,\n      # we're probably reasonably busy, so avoid calling select()\n      # and do a speculative non-blocking accept() on ready listeners\n      # before we sleep again in select().\n      unless nr == 0\n        tmp = ready.dup\n        redo\n      end\n\n      ppid == Process.ppid or return\n\n      # timeout used so we can detect parent death:\n      worker.tick = time_now.to_i\n      ret = IO.select(readers, nil, nil, @timeout) and ready = ret[0]\n    rescue => e\n      redo if nr < 0 && readers[0]\n      Unicorn.log_error(@logger, \"listen loop error\", e) if readers[0]\n    end while readers[0]\n  end\n```\n\n#### http_server.rb#process_client\n\n- \u3053\u3053\u306f Rack\u30b5\u30fc\u30d0\uff08Unicorn\uff09\u304b\u3089Rack\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3(Rails\u3068\u304bSinatra\u3068\u304b)\u306b\u51e6\u7406\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n- \u5177\u4f53\u7684\u306b\u306f [562\u884c\u76ee](https://github.com/defunkt/unicorn/blob/master/lib/unicorn/http_server.rb#L562)\u3067\u3057\u3087\u3046\u304b\n- \u3053\u308c\u306f\u591a\u5206Rack\u306b\u6e21\u3057\u3066\u3044\u308b\u306e\u306f\u30bd\u30fc\u30b9\u8aad\u3080\u306e\u3060\u3068\u5206\u304b\u308a\u3065\u3089\u3044\u306e\u3067\u3001\u307e\u305f\u5225\u9014\u8a18\u4e8b\u3092\u66f8\u3053\u3046\u304b\u306a\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n```rb\n  # once a client is accepted, it is processed in its entirety here\n  # in 3 easy steps: read request, call app, write app response\n  def process_client(client)\n    # \u3053\u3053\n    status, headers, body = @app.call(env = @request.read(client))\n\n    begin\n      return if @request.hijacked?\n\n      if 100 == status.to_i\n        e100_response_write(client, env)\n        status, headers, body = @app.call(env)\n        return if @request.hijacked?\n      end\n      @request.headers? or headers = nil\n      http_response_write(client, status, headers, body,\n                          @request.response_start_sent)\n    ensure\n      body.respond_to?(:close) and body.close\n    end\n\n    unless client.closed? # rack.hijack may've close this for us\n      client.shutdown # in case of fork() in Rack app\n      client.close # flush and uncork socket immediately, no keepalive\n    end\n  rescue => e\n    handle_error(client, e)\n  end\n```\n\n#### http_server.rb#join\n\n- \u8a73\u3057\u304f\u306f\u8ffd\u3063\u3066\u7121\u3044\u3067\u3059\u304c\u3001\u30bd\u30fc\u30b9\u3092\u3056\u3063\u3068\u8aad\u3080\u611f\u3058\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u3051\u53d6\u3063\u305f\u6642\u306b\u3001worker\u306e\u6319\u52d5\u3092\u3069\u3046\u3044\u3046\u98a8\u306b\u5236\u5fa1\u3059\u308b\u304b\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n- \u3053\u3053\u3089\u3078\u3093\u306f\u3042\u307e\u308a\u81ea\u4fe1\u304c\u3042\u308a\u307e\u305b\u3093...\n\n```rb:http_server.rb#join\n  # monitors children and receives signals forever\n  # (or until a termination signal is sent).  This handles signals\n  # one-at-a-time time and we'll happily drop signals in case somebody\n  # is signalling us too often.\n  def join\n    respawn = true\n    last_check = time_now\n\n    proc_name 'master'\n    logger.info \"master process ready\" # test_exec.rb relies on this message\n    if @ready_pipe\n      begin\n        @ready_pipe.syswrite($$.to_s)\n      rescue => e\n        logger.warn(\"grandparent died too soon?: #{e.message} (#{e.class})\")\n      end\n      @ready_pipe = @ready_pipe.close rescue nil\n    end\n    begin\n      reap_all_workers\n      case @sig_queue.shift\n      when nil\n        # avoid murdering workers after our master process (or the\n        # machine) comes out of suspend/hibernation\n        if (last_check + @timeout) >= (last_check = time_now)\n          sleep_time = murder_lazy_workers\n        else\n          sleep_time = @timeout/2.0 + 1\n          @logger.debug(\"waiting #{sleep_time}s after suspend/hibernation\")\n        end\n        maintain_worker_count if respawn\n        master_sleep(sleep_time)\n      when :QUIT # graceful shutdown\n        break\n      when :TERM, :INT # immediate shutdown\n        stop(false)\n        break\n      when :USR1 # rotate logs\n        logger.info \"master reopening logs...\"\n        Unicorn::Util.reopen_logs\n        logger.info \"master done reopening logs\"\n        soft_kill_each_worker(:USR1)\n      when :USR2 # exec binary, stay alive in case something went wrong\n        reexec\n      when :WINCH\n        if $stdin.tty?\n          logger.info \"SIGWINCH ignored because we're not daemonized\"\n        else\n          respawn = false\n          logger.info \"gracefully stopping all workers\"\n          soft_kill_each_worker(:QUIT)\n          self.worker_processes = 0\n        end\n      when :TTIN\n        respawn = true\n        self.worker_processes += 1\n      when :TTOU\n        self.worker_processes -= 1 if self.worker_processes > 0\n      when :HUP\n        respawn = true\n        if config.config_file\n          load_config!\n        else # exec binary and exit if there's no config file\n          logger.info \"config_file not present, reexecuting binary\"\n          reexec\n        end\n      end\n    rescue => e\n      Unicorn.log_error(@logger, \"master loop error\", e)\n    end while true\n    stop # gracefully shutdown all workers on our way out\n    logger.info \"master complete\"\n    unlink_pid_safe(pid) if pid\n  end\n```\n\n# \u8d85\u3048\u3089\u308c\u3066\u306a\u3044\u58c1\n\n## \u30d3\u30eb\u30c9\u304cgithub\u306eUnicorn\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u901a\u3089\u306a\u3044\n\n- [bundler\u3067github\u4e0a\u306eunicorn\u3092\u5f37\u5f15\u306b\u5165\u308c\u308b](http://blog.mirakui.com/entry/2012/01/31/145524) \u3092\u8aad\u3093\u3067\u8a66\u3057\u305f\u308a\u3057\u305f\u3093\u3067\u3059\u304c\u3001\u30d3\u30eb\u30c9\u304c\u901a\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n- \u4ffa\u306e\u610f\u8b58\u304c\u4f4e\u3059\u304e\u308b\u306e\u304c\u539f\u56e0\u3067\u3059\u306d\n\n## kgio\u3068\u304b\u306e\u51e6\u7406\n\n- Unicorn\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5468\u308a\u306e\u5177\u4f53\u7684\u306a\u51e6\u7406\u306f [kgio](https://github.com/wsylvest/kgio)\u304c\u3084\u3063\u3066\u308b\u307f\u305f\u3044\u3067\u3059\uff08\u591a\u5206\uff09\n- Unicorn\u306eRuby\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u90e8\u5206\u306f\u7d50\u69cb\u5927\u307e\u304b\u306a\u30ed\u30b8\u30c3\u30af\u3092\u53f8\u3063\u3066\u3044\u308b\uff08\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u9593\u9055\u3063\u3066\u305f\u3089\u672c\u5f53\u306b\u3054\u3081\u3093\u306a\u3055\u3044\uff09\n- \u3057\u304b\u3057\u306a\u304c\u3089\u5927\u5b66\u6642\u4ee3\u306b C\u8a00\u8a9e\u7cfb\u306e\u52c9\u5f37\u30b5\u30dc\u3063\u3066 ~~\u5927\u5b66\u306b\u3042\u3063\u305fXbox \u3067 Call of Duty4 Modern Warfare\u306e\u30ad\u30e3\u30f3\u30da\u30fc\u30f3\u306e\u30d9\u30c6\u30e9\u30f3\u3092\u3084\u308a\u3053\u3093\u3067\u3001\u3057\u304b\u3082\u5168\u30af\u30ea\u51fa\u6765\u306a\u304b\u3063\u305f\u30b7\u30e7\u30dc\u3044\u30af\u30bd\u3060\u3063\u305f~~ \u3044\u305f\u306e\u3067\u3001\u3042\u307e\u308a\u540c\u6642\u63a5\u7d9a\u6570\u304c\u3069\u3046\u305f\u3089\u3068\u304b\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n- \u6094\u3057\u3044\u306e\u3067\u5f8c\u3005\u3061\u3083\u3093\u3068\u52c9\u5f37\u3057\u3066\u30bd\u30fc\u30b9\u8aad\u3093\u3067 `printf` \u3057\u307e\u304f\u3063\u3066\u6319\u52d5\u3092\u8ffd\u3044\u307e\u304f\u3063\u3066\u3084\u308a\u305f\u3044\u306a\u301c\u3068\u306f\u601d\u3063\u3066\u3044\u307e\u3059\n\n# Reference\n\n## fork\u3068\u304b\u305d\u3046\u3044\u3046\u7cfb\n\n\u7d50\u69cbUnicorn\u306e\u30bd\u30fc\u30b9\u3084\u6319\u52d5\u3092\u8ffd\u3046\u4e0a\u3067\u53c2\u8003\u306b\u306a\u3063\u305f\u306e\u304c\n\n- [\u306a\u308b\u307b\u3069Unix\u30d7\u30ed\u30bb\u30b9 \u2015 Ruby\u3067\u5b66\u3076Unix\u306e\u57fa\u790e](http://tatsu-zine.com/books/naruhounix) \u3067\u3059\u3002\n- Resque\u3068\u304b\u3082\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30b9\u30e2\u30c7\u30eb\u306a\u306e\u3067\u3001Unicorn\u3067\u5b66\u3093\u3060\u77e5\u8b58\u306f\u5fdc\u7528\u304c\u52b9\u304f\u306e\u3067\u306f\u7121\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u30bd\u30fc\u30b9\u8aad\u3093\u3060\u307b\u3046\u304c\u3044\u3044\u52d5\u6a5f\u3068\u304b\n\n- [\u52c9\u5f37\u304c\u51fa\u6765\u306a\u3044\u5974\u306f\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u306a\u308c\uff01\uff08\u30d0\u30ab\u3060\u304b\u3089\u3067\u304d\u308b\u52c9\u5f37\u6cd5\uff09](http://d.hatena.ne.jp/amachang/20060804/1154679162)\n  - \u3053\u3053\u3067\u51fa\u3066\u304f\u308b\u30a4\u30e1\u30fc\u30b8\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3068\u304b\u3001\u624b\u5143\u306b\u30bd\u30fc\u30b9\u3092\u6301\u3063\u3066\u304f\u308b\u3068\u304b\u306f\u7d50\u5c40\u3084\u3063\u3066\u308b\u3053\u3068\u3042\u3093\u307e\u5909\u308f\u3093\u306a\u3044\u306e\u304b\u306a\u3041\u3068\u601d\u3044\u307e\u3059\u3002\n  - \u30bd\u30fc\u30b9\u66f8\u304d\u63db\u3048\u305f\u308a\u307e\u3067\u3057\u305f\u308a\u306f\u3057\u3066\u306a\u3044\u3057\u3001\u305d\u306e\u70b9\u3067\u8a00\u3048\u3070\u4ffa\u306f\u307e\u3060\u307e\u3060\u3067\u3059\u304c\u3002\n\n# \u8b1d\u8f9e\n\n- \u7d50\u69cb\u300c\u3053\u308c\u308f\u304b\u3093\u306a\u3044\u3067\u3059\u300d\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u76f8\u8ac7\u3057\u305f\u3089\u30a2\u30c9\u30d0\u30a4\u30b9\u304f\u308c\u305f\u5148\u8f29\u9054\u304c\u8907\u6570\u4eba\u3044\u307e\u3057\u305f\uff08\u4f55\u304b\u540d\u524d\u51fa\u3055\u3093\u3067\u304f\u308c\u3063\u3066\u8a00\u308f\u308c\u305f\u3093\u3067\u3042\u3048\u3066\u540d\u524d\u51fa\u3055\u306a\u3044\u3067\u3059\u304c\uff09\u3002\u52dd\u624b\u306b\u3053\u3053\u3067\u8b1d\u8f9e\u3057\u307e\u3059\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n", "tags": ["Ruby", "unicorn", "rack"]}