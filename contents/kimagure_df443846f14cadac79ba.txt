{"tags": ["JavaScript", "highcharts", "Ember.js"], "context": " More than 1 year has passed since last update.I've never used Ember Components before, so I wanted to try making something similar to my React Highcharts component in Ember. I wasn't quite a fan of the existing docs \nMistake I made here: instead of using the global $, this.$ needs to be used to specifically get the component jquery object.\n\nConclusion\nUsing the Ember.Component event cycle, I can manage the overall Highcharts instance fairly easily, and changes to the series data can be observed by using Ember.Observable. Really gets a lot of the crap out of the way.\n\nMethod\nJust the significant part here.\nApp.ChartComponent = Ember.Component.extend({\n  chartOptions: null,\n  series: null,\n\n  updateSeries: function () {\n    // TODO: a better updateSeries\n    this.initializeChart();\n  },\n\n  initializeChart: function () {\n    var chart = this.get('chartOptions');\n    chart.series = this.get('series');\n    $('.chart').highcharts(chart);\n  },\n\n  didInsertElement: function () {\n    console.log('didInsertElement');\n    this.initializeChart();\n    this.addObserver('series', this, this.updateSeries);\n  },\n\n  willDestroyElement: function () {\n    console.log('willDestroyElement');\n    this.removeObserver('series');\n    $('.chart').highcharts().destroy();\n  }\n\n\ndidInsertElement\ndidInsertElement is kind of like React's componentDidMount to me, in that it runs after the component has been rendered and inserted into the DOM. Good place for me to do my Highcharts init stuff, I think.\n\naddObserver\naddObserver is something I guess doesn't have an equivalent thing in React, but in React your entire component is constantly listening for any property and state changes anyway, so you could say React already has a 'global observer'. In this case, I just hooked up my callback method to it so that when the 'series' property of my component gets changed (most likely from the parent), I can have the proper updating take place. Of course, my implementation of series updating just defers to completely reinitializing the chart, so you'll have to dig further into doing diffs of the series or something.\n\nwillDestroyElement\nSame as what I said about didInsertElement above, except componentWillUnmount in this case.\n\nLinks\n\nJSBin demo\ngist link\n\n\n\nOther remarks / Ember events compared to React lifecycle\nIf I had to put into a table what I thought were analogues between Ember Component events and React Component lifecycle, it would be something like this:\n\n\n\nEmber.js event\nReact lifecycle\n\n\n\n\ndidInsertElement\nComponentDidMount\n\n\nwillDestroyElement\nComponentWillUnmount\n\n\nwillInsertElement\ncomponentWillMount\n\n\nwillClearRender\ncomponentWillUpdate\n\n\nparentViewDidChange\n???\n\n\n\nSmall example of how you can just mount a React component inside of a Ember component: http://emberjs.jsbin.com/yogop/1/edit\nProbably shouldn't take it from me, though.\n\nI've never used [Ember Components](http://emberjs.com/guides/components/) before, so I wanted to try making something similar to my React Highcharts component in Ember. I wasn't quite a fan of the existing docs \n\nMistake I made here: instead of using the global \\$, this.\\$ needs to be used to specifically get the component jquery object.\n\n# Conclusion\n\nUsing the Ember.Component event cycle, I can manage the overall Highcharts instance fairly easily, and changes to the series data can be observed by using Ember.Observable. Really gets a lot of the crap out of the way.\n\n# Method\n\nJust the significant part here.\n\n```js\nApp.ChartComponent = Ember.Component.extend({\n  chartOptions: null,\n  series: null,\n  \n  updateSeries: function () {\n    // TODO: a better updateSeries\n    this.initializeChart();\n  },\n\n  initializeChart: function () {\n    var chart = this.get('chartOptions');\n    chart.series = this.get('series');\n    $('.chart').highcharts(chart);\n  },\n\n  didInsertElement: function () {\n    console.log('didInsertElement');\n    this.initializeChart();\n    this.addObserver('series', this, this.updateSeries);\n  },\n\n  willDestroyElement: function () {\n    console.log('willDestroyElement');\n    this.removeObserver('series');\n    $('.chart').highcharts().destroy();\n  }\n```\n\n###didInsertElement\n\n[didInsertElement](http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement) is kind of like React's [componentDidMount](http://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount) to me, in that it runs after the component has been rendered and inserted into the DOM. Good place for me to do my Highcharts init stuff, I think.\n\n###addObserver\n\n[addObserver](http://emberjs.com/api/classes/Ember.Observable.html#method_addObserver) is something I guess doesn't have an equivalent thing in React, but in React your entire component is constantly listening for any property and state changes anyway, so you could say React already has a 'global observer'. In this case, I just hooked up my callback method to it so that when the 'series' property of my component gets changed (most likely from the parent), I can have the proper updating take place. Of course, my implementation of series updating just defers to completely reinitializing the chart, so you'll have to dig further into doing diffs of the series or something.\n\n###willDestroyElement\n\nSame as what I said about didInsertElement above, except componentWillUnmount in this case.\n\n# Links\n\n* [JSBin demo](http://emberjs.jsbin.com/datew/1/edit)\n\n* [gist link](https://gist.github.com/kimagure/58c2d257a991cfaf0c9e)\n\n-----\n\n\n# Other remarks / Ember events compared to React lifecycle\n\nIf I had to put into a table what I thought were analogues between Ember Component events and React Component lifecycle, it would be something like this:\n\n| Ember.js event| React lifecycle|\n|--------|--------|\n| [didInsertElement](http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement) | [ComponentDidMount](http://facebook.github.io/react/docs/component-specs.html#mounting-componentdidmount) |\n| [willDestroyElement](http://emberjs.com/api/classes/Ember.Component.html#event_willDestroyElement) | [ComponentWillUnmount](http://facebook.github.io/react/docs/component-specs.html#unmounting-componentwillunmount) |\n| [willInsertElement](http://emberjs.com/api/classes/Ember.Component.html#event_willInsertElement) | [componentWillMount](http://facebook.github.io/react/docs/component-specs.html#mounting-Componentwillmount) |\n| [willClearRender](http://emberjs.com/api/classes/Ember.Component.html#event_willClearRender) | [componentWillUpdate](http://facebook.github.io/react/docs/component-specs.html#updating-Componentwillupdate) |\n| [parentViewDidChange](http://emberjs.com/api/classes/Ember.Component.html#event_parentViewDidChange) | ??? |\n\nSmall example of how you can just mount a React component inside of a Ember component: http://emberjs.jsbin.com/yogop/1/edit\n\nProbably shouldn't take it from me, though.\n\n\n\n\n"}