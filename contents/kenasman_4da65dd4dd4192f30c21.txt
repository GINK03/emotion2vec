{"context": "\u3053\u3053\u3067\u306f\u3001PyQt5_Examples\u306e\u30b3\u30fc\u30c9\u3092\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u7248\u6a29\u306fRiverbank\u306a\u306e\u3067\u305d\u3053\u306f\u3054\u8a8d\u8b58\u304f\u3060\u3055\u3044\u3002\n\nStyleSheet\u3092\u307e\u305a\u306f\u4f7f\u3063\u3066\u307f\u308b\n\nStyleTest.py\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.Qt import *\nimport sys\nfrom ui_mainwindow import Ui_MainWindow\n\nclass StyleTest(QMainWindow):\n    def __init__(self, parent=None):\n        super(StyleTest, self).__init__(parent)\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n\n        self.loadStyleSheet('coffee')\n\n    def loadStyleSheet(self, sheetName):\n        file = QFile('%s.qss' % sheetName.lower())\n        file.open(QFile.ReadOnly)\n\n        styleSheet = file.readAll()\n        styleSheet = str(styleSheet, encoding='utf8')\n\n        print(styleSheet)\n        QApplication.instance().setStyleSheet(styleSheet)\n\nif __name__ == '__main__':\n\n\n    app = QApplication(sys.argv)\n\n    button = StyleTest()\n    button.show()\n    sys.exit(app.exec_())\n\n\n\nui_mainwindow.py\n# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file 'mainwindow.ui'\n#\n# Created: Fri Jul 26 06:49:55 2013\n#      by: PyQt5 UI code generator 5.0.1-snapshot-2a99e59669ee\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(400, 413)\n        self.centralwidget = QtWidgets.QWidget(MainWindow)\n        self.centralwidget.setObjectName(\"centralwidget\")\n        self.vboxlayout = QtWidgets.QVBoxLayout(self.centralwidget)\n        self.vboxlayout.setContentsMargins(9, 9, 9, 9)\n        self.vboxlayout.setSpacing(6)\n        self.vboxlayout.setObjectName(\"vboxlayout\")\n        self.mainFrame = QtWidgets.QFrame(self.centralwidget)\n        self.mainFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.mainFrame.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.mainFrame.setObjectName(\"mainFrame\")\n        self.gridlayout = QtWidgets.QGridLayout(self.mainFrame)\n        self.gridlayout.setContentsMargins(9, 9, 9, 9)\n        self.gridlayout.setSpacing(6)\n        self.gridlayout.setObjectName(\"gridlayout\")\n        self.agreeCheckBox = QtWidgets.QCheckBox(self.mainFrame)\n        self.agreeCheckBox.setObjectName(\"agreeCheckBox\")\n        self.gridlayout.addWidget(self.agreeCheckBox, 6, 0, 1, 5)\n        self.label = QtWidgets.QLabel(self.mainFrame)\n        self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTop|QtCore.Qt.AlignTrailing)\n        self.label.setObjectName(\"label\")\n        self.gridlayout.addWidget(self.label, 5, 0, 1, 1)\n        self.nameLabel = QtWidgets.QLabel(self.mainFrame)\n        self.nameLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)\n        self.nameLabel.setObjectName(\"nameLabel\")\n        self.gridlayout.addWidget(self.nameLabel, 0, 0, 1, 1)\n        self.maleRadioButton = QtWidgets.QRadioButton(self.mainFrame)\n        self.maleRadioButton.setObjectName(\"maleRadioButton\")\n        self.gridlayout.addWidget(self.maleRadioButton, 1, 1, 1, 1)\n        self.passwordLabel = QtWidgets.QLabel(self.mainFrame)\n        self.passwordLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)\n        self.passwordLabel.setObjectName(\"passwordLabel\")\n        self.gridlayout.addWidget(self.passwordLabel, 3, 0, 1, 1)\n        self.countryCombo = QtWidgets.QComboBox(self.mainFrame)\n        self.countryCombo.setObjectName(\"countryCombo\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.gridlayout.addWidget(self.countryCombo, 4, 1, 1, 4)\n        self.ageLabel = QtWidgets.QLabel(self.mainFrame)\n        self.ageLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)\n        self.ageLabel.setObjectName(\"ageLabel\")\n        self.gridlayout.addWidget(self.ageLabel, 2, 0, 1, 1)\n        self.countryLabel = QtWidgets.QLabel(self.mainFrame)\n        self.countryLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)\n        self.countryLabel.setObjectName(\"countryLabel\")\n        self.gridlayout.addWidget(self.countryLabel, 4, 0, 1, 1)\n        self.genderLabel = QtWidgets.QLabel(self.mainFrame)\n        self.genderLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)\n        self.genderLabel.setObjectName(\"genderLabel\")\n        self.gridlayout.addWidget(self.genderLabel, 1, 0, 1, 1)\n        self.passwordEdit = QtWidgets.QLineEdit(self.mainFrame)\n        self.passwordEdit.setEchoMode(QtWidgets.QLineEdit.Password)\n        self.passwordEdit.setObjectName(\"passwordEdit\")\n        self.gridlayout.addWidget(self.passwordEdit, 3, 1, 1, 4)\n        self.femaleRadioButton = QtWidgets.QRadioButton(self.mainFrame)\n        self.femaleRadioButton.setObjectName(\"femaleRadioButton\")\n        self.gridlayout.addWidget(self.femaleRadioButton, 1, 2, 1, 2)\n        self.ageSpinBox = QtWidgets.QSpinBox(self.mainFrame)\n        self.ageSpinBox.setMinimum(12)\n        self.ageSpinBox.setProperty(\"value\", 22)\n        self.ageSpinBox.setObjectName(\"ageSpinBox\")\n        self.gridlayout.addWidget(self.ageSpinBox, 2, 1, 1, 2)\n        self.nameCombo = QtWidgets.QComboBox(self.mainFrame)\n        self.nameCombo.setEditable(True)\n        self.nameCombo.setObjectName(\"nameCombo\")\n        self.gridlayout.addWidget(self.nameCombo, 0, 1, 1, 4)\n        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n        self.gridlayout.addItem(spacerItem, 1, 4, 1, 1)\n        spacerItem1 = QtWidgets.QSpacerItem(61, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n        self.gridlayout.addItem(spacerItem1, 2, 3, 1, 2)\n        self.buttonBox = QtWidgets.QDialogButtonBox(self.mainFrame)\n        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)\n        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.NoButton|QtWidgets.QDialogButtonBox.Ok)\n        self.buttonBox.setObjectName(\"buttonBox\")\n        self.gridlayout.addWidget(self.buttonBox, 7, 3, 1, 2)\n        self.professionList = QtWidgets.QListWidget(self.mainFrame)\n        self.professionList.setObjectName(\"professionList\")\n        item = QtWidgets.QListWidgetItem()\n        self.professionList.addItem(item)\n        item = QtWidgets.QListWidgetItem()\n        self.professionList.addItem(item)\n        item = QtWidgets.QListWidgetItem()\n        self.professionList.addItem(item)\n        self.gridlayout.addWidget(self.professionList, 5, 1, 1, 4)\n        self.vboxlayout.addWidget(self.mainFrame)\n        MainWindow.setCentralWidget(self.centralwidget)\n        self.menubar = QtWidgets.QMenuBar(MainWindow)\n        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 29))\n        self.menubar.setObjectName(\"menubar\")\n        self.menu_File = QtWidgets.QMenu(self.menubar)\n        self.menu_File.setObjectName(\"menu_File\")\n        self.menu_Help = QtWidgets.QMenu(self.menubar)\n        self.menu_Help.setObjectName(\"menu_Help\")\n        MainWindow.setMenuBar(self.menubar)\n        self.statusbar = QtWidgets.QStatusBar(MainWindow)\n        self.statusbar.setObjectName(\"statusbar\")\n        MainWindow.setStatusBar(self.statusbar)\n        self.exitAction = QtWidgets.QAction(MainWindow)\n        self.exitAction.setObjectName(\"exitAction\")\n        self.aboutQtAction = QtWidgets.QAction(MainWindow)\n        self.aboutQtAction.setObjectName(\"aboutQtAction\")\n        self.editStyleAction = QtWidgets.QAction(MainWindow)\n        self.editStyleAction.setObjectName(\"editStyleAction\")\n        self.aboutAction = QtWidgets.QAction(MainWindow)\n        self.aboutAction.setObjectName(\"aboutAction\")\n        self.menu_File.addAction(self.editStyleAction)\n        self.menu_File.addSeparator()\n        self.menu_File.addAction(self.exitAction)\n        self.menu_Help.addAction(self.aboutAction)\n        self.menu_Help.addAction(self.aboutQtAction)\n        self.menubar.addAction(self.menu_File.menuAction())\n        self.menubar.addAction(self.menu_Help.menuAction())\n        self.label.setBuddy(self.professionList)\n        self.nameLabel.setBuddy(self.nameCombo)\n        self.passwordLabel.setBuddy(self.passwordEdit)\n        self.ageLabel.setBuddy(self.ageSpinBox)\n        self.countryLabel.setBuddy(self.countryCombo)\n\n        self.retranslateUi(MainWindow)\n        self.countryCombo.setCurrentIndex(6)\n        self.professionList.setCurrentRow(0)\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n\n    def retranslateUi(self, MainWindow):\n        _translate = QtCore.QCoreApplication.translate\n        MainWindow.setWindowTitle(_translate(\"MainWindow\", \"Style Sheet\"))\n        self.agreeCheckBox.setToolTip(_translate(\"MainWindow\", \"Please read the LICENSE file before checking\"))\n        self.agreeCheckBox.setText(_translate(\"MainWindow\", \"I accept the terms and &conditions\"))\n        self.label.setText(_translate(\"MainWindow\", \"Profession:\"))\n        self.nameLabel.setText(_translate(\"MainWindow\", \"&Name:\"))\n        self.maleRadioButton.setToolTip(_translate(\"MainWindow\", \"Check this if you are male\"))\n        self.maleRadioButton.setText(_translate(\"MainWindow\", \"&Male\"))\n        self.passwordLabel.setText(_translate(\"MainWindow\", \"&Password:\"))\n        self.countryCombo.setToolTip(_translate(\"MainWindow\", \"Specify country of origin\"))\n        self.countryCombo.setStatusTip(_translate(\"MainWindow\", \"Specify country of origin\"))\n        self.countryCombo.setItemText(0, _translate(\"MainWindow\", \"Egypt\"))\n        self.countryCombo.setItemText(1, _translate(\"MainWindow\", \"France\"))\n        self.countryCombo.setItemText(2, _translate(\"MainWindow\", \"Germany\"))\n        self.countryCombo.setItemText(3, _translate(\"MainWindow\", \"India\"))\n        self.countryCombo.setItemText(4, _translate(\"MainWindow\", \"Italy\"))\n        self.countryCombo.setItemText(5, _translate(\"MainWindow\", \"Norway\"))\n        self.countryCombo.setItemText(6, _translate(\"MainWindow\", \"Pakistan\"))\n        self.ageLabel.setText(_translate(\"MainWindow\", \"&Age:\"))\n        self.countryLabel.setText(_translate(\"MainWindow\", \"Country:\"))\n        self.genderLabel.setText(_translate(\"MainWindow\", \"Gender:\"))\n        self.passwordEdit.setToolTip(_translate(\"MainWindow\", \"Specify your password\"))\n        self.passwordEdit.setStatusTip(_translate(\"MainWindow\", \"Specify your password\"))\n        self.passwordEdit.setText(_translate(\"MainWindow\", \"Password\"))\n        self.femaleRadioButton.setToolTip(_translate(\"MainWindow\", \"Check this if you are female\"))\n        self.femaleRadioButton.setText(_translate(\"MainWindow\", \"&Female\"))\n        self.ageSpinBox.setToolTip(_translate(\"MainWindow\", \"Specify your age\"))\n        self.ageSpinBox.setStatusTip(_translate(\"MainWindow\", \"Specify your age\"))\n        self.nameCombo.setToolTip(_translate(\"MainWindow\", \"Specify your name\"))\n        self.professionList.setToolTip(_translate(\"MainWindow\", \"Select your profession\"))\n        self.professionList.setStatusTip(_translate(\"MainWindow\", \"Specify your name here\"))\n        self.professionList.setWhatsThis(_translate(\"MainWindow\", \"Specify your name here\"))\n        __sortingEnabled = self.professionList.isSortingEnabled()\n        self.professionList.setSortingEnabled(False)\n        item = self.professionList.item(0)\n        item.setText(_translate(\"MainWindow\", \"Developer\"))\n        item = self.professionList.item(1)\n        item.setText(_translate(\"MainWindow\", \"Student\"))\n        item = self.professionList.item(2)\n        item.setText(_translate(\"MainWindow\", \"Fisherman\"))\n        self.professionList.setSortingEnabled(__sortingEnabled)\n        self.menu_File.setTitle(_translate(\"MainWindow\", \"&File\"))\n        self.menu_Help.setTitle(_translate(\"MainWindow\", \"&Help\"))\n        self.exitAction.setText(_translate(\"MainWindow\", \"&Exit\"))\n        self.aboutQtAction.setText(_translate(\"MainWindow\", \"About Qt\"))\n        self.editStyleAction.setText(_translate(\"MainWindow\", \"Edit &Style...\"))\n        self.aboutAction.setText(_translate(\"MainWindow\", \"About\"))\n\n\n\ncoffee.qss\n.QWidget {\n   background-color: beige;\n}\n\n/* Nice Windows-XP-style password character. */\nQLineEdit[echoMode=\"2\"] {\n    lineedit-password-character: 9679;\n}\n\n/* We provide a min-width and min-height for push buttons\n   so that they look elegant regardless of the width of the text. */\nQPushButton {\n    background-color: palegoldenrod;\n    border-width: 2px;\n    border-color: darkkhaki;\n    border-style: solid;\n    border-radius: 5;\n    padding: 3px;\n    min-width: 9ex;\n    min-height: 2.5ex;\n}\n\nQPushButton:hover {\n   background-color: khaki;\n}\n\n/* Increase the padding, so the text is shifted when the button is\n   pressed. */\nQPushButton:pressed {\n    padding-left: 5px;\n    padding-top: 5px;\n    background-color: #d0d67c;\n}\n\nQLabel, QAbstractButton {\n    font: bold;\n}\n\n/* Mark mandatory fields with a brownish color. */\n.mandatory {\n    color: brown;\n}\n\n/* Bold text on status bar looks awful. */\nQStatusBar QLabel {\n   font: normal;\n}\n\nQStatusBar::item {\n    border-width: 1;\n    border-color: darkkhaki;\n    border-style: solid;\n    border-radius: 2;\n}\n\nQComboBox, QLineEdit, QSpinBox, QTextEdit, QListView {\n    background-color: cornsilk;\n    selection-color: #0a214c; \n    selection-background-color: #C19A6B;\n}\n\nQListView {\n    show-decoration-selected: 1;\n}\n\nQListView::item:hover {\n    background-color: wheat;\n}\n\n/* We reserve 1 pixel space in padding. When we get the focus,\n   we kill the padding and enlarge the border. This makes the items\n   glow. */\nQLineEdit, QFrame {\n    border-width: 2px;\n    padding: 1px;\n    border-style: solid;\n    border-color: darkkhaki;\n    border-radius: 5px;\n}\n\n/* As mentioned above, eliminate the padding and increase the border. */\nQLineEdit:focus, QFrame:focus {\n    border-width: 3px;\n    padding: 0px;\n}\n\n/* A QLabel is a QFrame ... */\nQLabel {\n    border: none;\n    padding: 0;\n    background: none;\n}\n\n/* A QToolTip is a QLabel ... */\nQToolTip {\n    border: 2px solid darkkhaki;\n    padding: 5px;\n    border-radius: 3px;\n    opacity: 200;\n}\n\n/* Nice to have the background color change when hovered. */\nQRadioButton:hover, QCheckBox:hover {\n    background-color: wheat;\n}\n\n/* Force the dialog's buttons to follow the Windows guidelines. */\nQDialogButtonBox {\n    button-layout: 0;\n}\n\n\n\u3053\u308c\u3089\u3092\u5168\u3066\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u7f6e\u3044\u3066\u304f\u3060\u3055\u3044\u3002\nui\u306b\u5bfe\u3057\u3066Stylesheet\u304c\u9069\u7528\u3067\u304d\u307e\u3059\u3002\n\n\nsvgviewer.py\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u52d5\u304b\u306a\u3044\u3002\nPyQt\uff15\u306eexamples\u306bpaintings\u305d\u3057\u3066svgviewer\u306e\u4e0b\u306bsvgviewer.py\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306fPyQt5\u3068Python3\u306e\u74b0\u5883\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\nL280\u304b\u3089\u306e\u4ee5\u4e0b\u306e\u90e8\u5206\n    def wheelEvent(self, event):\n        factor = pow(1.2, event.delta() / 240.0)\n        self.scale(factor, factor)\n        event.accept()\n\u3053\u308c\u3092\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u306a\u3044\u3068\u52d5\u304d\u307e\u305b\u3093\u3002\n    def wheelEvent(self, event):\n        factor = pow(1.2, event.angleDelta().y() / 240.0)\n        self.scale(factor, factor)\n        event.accept()\ndelta()\u2192angleDelta()\u306e\u3061\u304c\u3044\u3068type\u306e\u9055\u3044\u3067\u52d5\u304d\u307e\u305b\u3093\u3002\n\u3053\u308c\u3082Qt\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u9055\u3044\u304b\u3089\u8d77\u3053\u308b\u3082\u306e\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3053\u306e\u30b3\u30fc\u30c9\u306fmouse\u306ewheelEvent\u3067\u62e1\u5927\u7e2e\u5c0f\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u5927\u4e8b\u306a\u30b3\u30fc\u30c9\u306a\u306e\u3067\u5c55\u958b\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067svgviewer.py\u3092\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\nsvgviewer.py\n#!/usr/bin/env python\n\n\n#############################################################################\n##\n## Copyright (C) 2013 Riverbank Computing Limited.\n## Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).\n## All rights reserved.\n##\n## This file is part of the examples of PyQt.\n##\n## $QT_BEGIN_LICENSE:BSD$\n## You may use this file under the terms of the BSD license as follows:\n##\n## \"Redistribution and use in source and binary forms, with or without\n## modification, are permitted provided that the following conditions are\n## met:\n##   * Redistributions of source code must retain the above copyright\n##     notice, this list of conditions and the following disclaimer.\n##   * Redistributions in binary form must reproduce the above copyright\n##     notice, this list of conditions and the following disclaimer in\n##     the documentation and/or other materials provided with the\n##     distribution.\n##   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor\n##     the names of its contributors may be used to endorse or promote\n##     products derived from this software without specific prior written\n##     permission.\n##\n## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n## \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n## LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n## A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n## OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n## LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n## DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n## THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n## (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n## OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"\n## $QT_END_LICENSE$\n##\n#############################################################################\n\n\nfrom PyQt5.QtCore import QFile, QSize, Qt\nfrom PyQt5.QtGui import QBrush, QColor, QImage, QPainter, QPixmap, QPen\nfrom PyQt5.QtWidgets import (QActionGroup, QApplication, QFileDialog,\n        QGraphicsItem, QGraphicsRectItem, QGraphicsScene, QGraphicsView,\n        QMainWindow, QMenu, QMessageBox, QWidget)\nfrom PyQt5.QtOpenGL import QGL, QGLFormat, QGLWidget\nfrom PyQt5.QtSvg import QGraphicsSvgItem\n\nimport svgviewer_rc\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super(MainWindow, self).__init__()\n\n        self.currentPath = ''\n\n        self.view = SvgView()\n\n        fileMenu = QMenu(\"&File\", self)\n        openAction = fileMenu.addAction(\"&Open...\")\n        openAction.setShortcut(\"Ctrl+O\")\n        quitAction = fileMenu.addAction(\"E&xit\")\n        quitAction.setShortcut(\"Ctrl+Q\")\n\n        self.menuBar().addMenu(fileMenu)\n\n        viewMenu = QMenu(\"&View\", self)\n        self.backgroundAction = viewMenu.addAction(\"&Background\")\n        self.backgroundAction.setEnabled(False)\n        self.backgroundAction.setCheckable(True)\n        self.backgroundAction.setChecked(False)\n        self.backgroundAction.toggled.connect(self.view.setViewBackground)\n\n        self.outlineAction = viewMenu.addAction(\"&Outline\")\n        self.outlineAction.setEnabled(False)\n        self.outlineAction.setCheckable(True)\n        self.outlineAction.setChecked(True)\n        self.outlineAction.toggled.connect(self.view.setViewOutline)\n\n        self.menuBar().addMenu(viewMenu)\n\n        rendererMenu = QMenu(\"&Renderer\", self)\n        self.nativeAction = rendererMenu.addAction(\"&Native\")\n        self.nativeAction.setCheckable(True)\n        self.nativeAction.setChecked(True)\n\n        if QGLFormat.hasOpenGL():\n            self.glAction = rendererMenu.addAction(\"&OpenGL\")\n            self.glAction.setCheckable(True)\n\n        self.imageAction = rendererMenu.addAction(\"&Image\")\n        self.imageAction.setCheckable(True)\n\n        if QGLFormat.hasOpenGL():\n            rendererMenu.addSeparator()\n            self.highQualityAntialiasingAction = rendererMenu.addAction(\"&High Quality Antialiasing\")\n            self.highQualityAntialiasingAction.setEnabled(False)\n            self.highQualityAntialiasingAction.setCheckable(True)\n            self.highQualityAntialiasingAction.setChecked(False)\n            self.highQualityAntialiasingAction.toggled.connect(self.view.setHighQualityAntialiasing)\n\n        rendererGroup = QActionGroup(self)\n        rendererGroup.addAction(self.nativeAction)\n\n        if QGLFormat.hasOpenGL():\n            rendererGroup.addAction(self.glAction)\n\n        rendererGroup.addAction(self.imageAction)\n\n        self.menuBar().addMenu(rendererMenu)\n\n        openAction.triggered.connect(self.openFile)\n        quitAction.triggered.connect(QApplication.instance().quit)\n        rendererGroup.triggered.connect(self.setRenderer)\n\n        self.setCentralWidget(self.view)\n        self.setWindowTitle(\"SVG Viewer\")\n\n    def openFile(self, path=None):\n        if not path:\n            path, _ = QFileDialog.getOpenFileName(self, \"Open SVG File\",\n                    self.currentPath, \"SVG files (*.svg *.svgz *.svg.gz)\")\n\n        if path:\n            svg_file = QFile(path)\n            if not svg_file.exists():\n                QMessageBox.critical(self, \"Open SVG File\",\n                        \"Could not open file '%s'.\" % path)\n\n                self.outlineAction.setEnabled(False)\n                self.backgroundAction.setEnabled(False)\n                return\n\n            self.view.openFile(svg_file)\n\n            if not path.startswith(':/'):\n                self.currentPath = path\n                self.setWindowTitle(\"%s - SVGViewer\" % self.currentPath)\n\n            self.outlineAction.setEnabled(True)\n            self.backgroundAction.setEnabled(True)\n\n            self.resize(self.view.sizeHint() + QSize(80, 80 + self.menuBar().height()))\n\n    def setRenderer(self, action):\n        if QGLFormat.hasOpenGL():\n            self.highQualityAntialiasingAction.setEnabled(False)\n\n        if action == self.nativeAction:\n            self.view.setRenderer(SvgView.Native)\n        elif action == self.glAction:\n            if QGLFormat.hasOpenGL():\n                self.highQualityAntialiasingAction.setEnabled(True)\n                self.view.setRenderer(SvgView.OpenGL)\n        elif action == self.imageAction:\n            self.view.setRenderer(SvgView.Image)\n\n\nclass SvgView(QGraphicsView):\n    Native, OpenGL, Image = range(3)\n\n    def __init__(self, parent=None):\n        super(SvgView, self).__init__(parent)\n\n        self.renderer = SvgView.Native\n        self.svgItem = None\n        self.backgroundItem = None\n        self.outlineItem = None\n        self.image = QImage()\n\n        self.setScene(QGraphicsScene(self))\n        self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)\n        self.setDragMode(QGraphicsView.ScrollHandDrag)\n        self.setViewportUpdateMode(QGraphicsView.FullViewportUpdate)\n\n        # Prepare background check-board pattern.\n        tilePixmap = QPixmap(64, 64)\n        tilePixmap.fill(Qt.white)\n        tilePainter = QPainter(tilePixmap)\n        color = QColor(220, 220, 220)\n        tilePainter.fillRect(0, 0, 32, 32, color)\n        tilePainter.fillRect(32, 32, 32, 32, color)\n        tilePainter.end()\n\n        self.setBackgroundBrush(QBrush(tilePixmap))\n\n    def drawBackground(self, p, rect):\n        p.save()\n        p.resetTransform()\n        p.drawTiledPixmap(self.viewport().rect(),\n                self.backgroundBrush().texture())\n        p.restore()\n\n    def openFile(self, svg_file):\n        if not svg_file.exists():\n            return\n\n        s = self.scene()\n\n        if self.backgroundItem:\n            drawBackground = self.backgroundItem.isVisible()\n        else:\n            drawBackground = False\n\n        if self.outlineItem:\n            drawOutline = self.outlineItem.isVisible()\n        else:\n            drawOutline = True\n\n        s.clear()\n        self.resetTransform()\n\n        self.svgItem = QGraphicsSvgItem(svg_file.fileName())\n        self.svgItem.setFlags(QGraphicsItem.ItemClipsToShape)\n        self.svgItem.setCacheMode(QGraphicsItem.NoCache)\n        self.svgItem.setZValue(0)\n\n        self.backgroundItem = QGraphicsRectItem(self.svgItem.boundingRect())\n        self.backgroundItem.setBrush(Qt.white)\n        self.backgroundItem.setPen(QPen(Qt.NoPen))\n        self.backgroundItem.setVisible(drawBackground)\n        self.backgroundItem.setZValue(-1)\n\n        self.outlineItem = QGraphicsRectItem(self.svgItem.boundingRect())\n        outline = QPen(Qt.black, 2, Qt.DashLine)\n        outline.setCosmetic(True)\n        self.outlineItem.setPen(outline)\n        self.outlineItem.setBrush(QBrush(Qt.NoBrush))\n        self.outlineItem.setVisible(drawOutline)\n        self.outlineItem.setZValue(1)\n\n        s.addItem(self.backgroundItem)\n        s.addItem(self.svgItem)\n        s.addItem(self.outlineItem)\n\n        s.setSceneRect(self.outlineItem.boundingRect().adjusted(-10, -10, 10, 10))\n\n    def setRenderer(self, renderer):\n        self.renderer = renderer\n\n        if self.renderer == SvgView.OpenGL:\n            if QGLFormat.hasOpenGL():\n                self.setViewport(QGLWidget(QGLFormat(QGL.SampleBuffers)))\n        else:\n            self.setViewport(QWidget())\n\n    def setHighQualityAntialiasing(self, highQualityAntialiasing):\n        if QGLFormat.hasOpenGL():\n            self.setRenderHint(QPainter.HighQualityAntialiasing,\n                    highQualityAntialiasing)\n\n    def setViewBackground(self, enable):\n        if self.backgroundItem:\n            self.backgroundItem.setVisible(enable)\n\n    def setViewOutline(self, enable):\n        if self.outlineItem:\n            self.outlineItem.setVisible(enable)\n\n    def paintEvent(self, event):\n        if self.renderer == SvgView.Image:\n            if self.image.size() != self.viewport().size():\n                self.image = QImage(self.viewport().size(),\n                        QImage.Format_ARGB32_Premultiplied)\n\n            imagePainter = QPainter(self.image)\n            QGraphicsView.render(self, imagePainter)\n            imagePainter.end()\n\n            p = QPainter(self.viewport())\n            p.drawImage(0, 0, self.image)\n        else:\n            super(SvgView, self).paintEvent(event)\n\n    def wheelEvent(self, event):\n        factor = pow(1.2, event.angleDelta().y() / 240.0)\n        self.scale(factor, factor)\n        event.accept()\n\n\nif __name__ == '__main__':\n\n    import sys\n\n    app = QApplication(sys.argv)\n\n    window = MainWindow()\n    if len(sys.argv) == 2:\n        window.openFile(sys.argv[1])\n    else:\n        window.openFile(':/files/bubbles.svg')\n    window.show()\n    sys.exit(app.exec_())\n\n\n\u3042\u3068\u306f\u8d77\u52d5\u3057\u3066\u3001\u30de\u30a6\u30b9\u3067\u30db\u30a4\u30fc\u30eb\u3092\u3044\u3058\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n\u3053\u3053\u3067\u306f\u3001PyQt5_Examples\u306e\u30b3\u30fc\u30c9\u3092\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u7248\u6a29\u306fRiverbank\u306a\u306e\u3067\u305d\u3053\u306f\u3054\u8a8d\u8b58\u304f\u3060\u3055\u3044\u3002\n\n\n#StyleSheet\u3092\u307e\u305a\u306f\u4f7f\u3063\u3066\u307f\u308b\n```python:StyleTest.py\nfrom PyQt5.QtWidgets import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.Qt import *\nimport sys\nfrom ui_mainwindow import Ui_MainWindow\n\nclass StyleTest(QMainWindow):\n    def __init__(self, parent=None):\n        super(StyleTest, self).__init__(parent)\n        self.ui = Ui_MainWindow()\n        self.ui.setupUi(self)\n\n        self.loadStyleSheet('coffee')\n\n    def loadStyleSheet(self, sheetName):\n        file = QFile('%s.qss' % sheetName.lower())\n        file.open(QFile.ReadOnly)\n\n        styleSheet = file.readAll()\n        styleSheet = str(styleSheet, encoding='utf8')\n\n        print(styleSheet)\n        QApplication.instance().setStyleSheet(styleSheet)\n\nif __name__ == '__main__':\n\n\n    app = QApplication(sys.argv)\n\n    button = StyleTest()\n    button.show()\n    sys.exit(app.exec_())\n```\n```python:ui_mainwindow.py\n# -*- coding: utf-8 -*-\n\n# Form implementation generated from reading ui file 'mainwindow.ui'\n#\n# Created: Fri Jul 26 06:49:55 2013\n#      by: PyQt5 UI code generator 5.0.1-snapshot-2a99e59669ee\n#\n# WARNING! All changes made in this file will be lost!\n\nfrom PyQt5 import QtCore, QtGui, QtWidgets\n\nclass Ui_MainWindow(object):\n    def setupUi(self, MainWindow):\n        MainWindow.setObjectName(\"MainWindow\")\n        MainWindow.resize(400, 413)\n        self.centralwidget = QtWidgets.QWidget(MainWindow)\n        self.centralwidget.setObjectName(\"centralwidget\")\n        self.vboxlayout = QtWidgets.QVBoxLayout(self.centralwidget)\n        self.vboxlayout.setContentsMargins(9, 9, 9, 9)\n        self.vboxlayout.setSpacing(6)\n        self.vboxlayout.setObjectName(\"vboxlayout\")\n        self.mainFrame = QtWidgets.QFrame(self.centralwidget)\n        self.mainFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)\n        self.mainFrame.setFrameShadow(QtWidgets.QFrame.Raised)\n        self.mainFrame.setObjectName(\"mainFrame\")\n        self.gridlayout = QtWidgets.QGridLayout(self.mainFrame)\n        self.gridlayout.setContentsMargins(9, 9, 9, 9)\n        self.gridlayout.setSpacing(6)\n        self.gridlayout.setObjectName(\"gridlayout\")\n        self.agreeCheckBox = QtWidgets.QCheckBox(self.mainFrame)\n        self.agreeCheckBox.setObjectName(\"agreeCheckBox\")\n        self.gridlayout.addWidget(self.agreeCheckBox, 6, 0, 1, 5)\n        self.label = QtWidgets.QLabel(self.mainFrame)\n        self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTop|QtCore.Qt.AlignTrailing)\n        self.label.setObjectName(\"label\")\n        self.gridlayout.addWidget(self.label, 5, 0, 1, 1)\n        self.nameLabel = QtWidgets.QLabel(self.mainFrame)\n        self.nameLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)\n        self.nameLabel.setObjectName(\"nameLabel\")\n        self.gridlayout.addWidget(self.nameLabel, 0, 0, 1, 1)\n        self.maleRadioButton = QtWidgets.QRadioButton(self.mainFrame)\n        self.maleRadioButton.setObjectName(\"maleRadioButton\")\n        self.gridlayout.addWidget(self.maleRadioButton, 1, 1, 1, 1)\n        self.passwordLabel = QtWidgets.QLabel(self.mainFrame)\n        self.passwordLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)\n        self.passwordLabel.setObjectName(\"passwordLabel\")\n        self.gridlayout.addWidget(self.passwordLabel, 3, 0, 1, 1)\n        self.countryCombo = QtWidgets.QComboBox(self.mainFrame)\n        self.countryCombo.setObjectName(\"countryCombo\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.countryCombo.addItem(\"\")\n        self.gridlayout.addWidget(self.countryCombo, 4, 1, 1, 4)\n        self.ageLabel = QtWidgets.QLabel(self.mainFrame)\n        self.ageLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)\n        self.ageLabel.setObjectName(\"ageLabel\")\n        self.gridlayout.addWidget(self.ageLabel, 2, 0, 1, 1)\n        self.countryLabel = QtWidgets.QLabel(self.mainFrame)\n        self.countryLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)\n        self.countryLabel.setObjectName(\"countryLabel\")\n        self.gridlayout.addWidget(self.countryLabel, 4, 0, 1, 1)\n        self.genderLabel = QtWidgets.QLabel(self.mainFrame)\n        self.genderLabel.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)\n        self.genderLabel.setObjectName(\"genderLabel\")\n        self.gridlayout.addWidget(self.genderLabel, 1, 0, 1, 1)\n        self.passwordEdit = QtWidgets.QLineEdit(self.mainFrame)\n        self.passwordEdit.setEchoMode(QtWidgets.QLineEdit.Password)\n        self.passwordEdit.setObjectName(\"passwordEdit\")\n        self.gridlayout.addWidget(self.passwordEdit, 3, 1, 1, 4)\n        self.femaleRadioButton = QtWidgets.QRadioButton(self.mainFrame)\n        self.femaleRadioButton.setObjectName(\"femaleRadioButton\")\n        self.gridlayout.addWidget(self.femaleRadioButton, 1, 2, 1, 2)\n        self.ageSpinBox = QtWidgets.QSpinBox(self.mainFrame)\n        self.ageSpinBox.setMinimum(12)\n        self.ageSpinBox.setProperty(\"value\", 22)\n        self.ageSpinBox.setObjectName(\"ageSpinBox\")\n        self.gridlayout.addWidget(self.ageSpinBox, 2, 1, 1, 2)\n        self.nameCombo = QtWidgets.QComboBox(self.mainFrame)\n        self.nameCombo.setEditable(True)\n        self.nameCombo.setObjectName(\"nameCombo\")\n        self.gridlayout.addWidget(self.nameCombo, 0, 1, 1, 4)\n        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n        self.gridlayout.addItem(spacerItem, 1, 4, 1, 1)\n        spacerItem1 = QtWidgets.QSpacerItem(61, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)\n        self.gridlayout.addItem(spacerItem1, 2, 3, 1, 2)\n        self.buttonBox = QtWidgets.QDialogButtonBox(self.mainFrame)\n        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)\n        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.NoButton|QtWidgets.QDialogButtonBox.Ok)\n        self.buttonBox.setObjectName(\"buttonBox\")\n        self.gridlayout.addWidget(self.buttonBox, 7, 3, 1, 2)\n        self.professionList = QtWidgets.QListWidget(self.mainFrame)\n        self.professionList.setObjectName(\"professionList\")\n        item = QtWidgets.QListWidgetItem()\n        self.professionList.addItem(item)\n        item = QtWidgets.QListWidgetItem()\n        self.professionList.addItem(item)\n        item = QtWidgets.QListWidgetItem()\n        self.professionList.addItem(item)\n        self.gridlayout.addWidget(self.professionList, 5, 1, 1, 4)\n        self.vboxlayout.addWidget(self.mainFrame)\n        MainWindow.setCentralWidget(self.centralwidget)\n        self.menubar = QtWidgets.QMenuBar(MainWindow)\n        self.menubar.setGeometry(QtCore.QRect(0, 0, 400, 29))\n        self.menubar.setObjectName(\"menubar\")\n        self.menu_File = QtWidgets.QMenu(self.menubar)\n        self.menu_File.setObjectName(\"menu_File\")\n        self.menu_Help = QtWidgets.QMenu(self.menubar)\n        self.menu_Help.setObjectName(\"menu_Help\")\n        MainWindow.setMenuBar(self.menubar)\n        self.statusbar = QtWidgets.QStatusBar(MainWindow)\n        self.statusbar.setObjectName(\"statusbar\")\n        MainWindow.setStatusBar(self.statusbar)\n        self.exitAction = QtWidgets.QAction(MainWindow)\n        self.exitAction.setObjectName(\"exitAction\")\n        self.aboutQtAction = QtWidgets.QAction(MainWindow)\n        self.aboutQtAction.setObjectName(\"aboutQtAction\")\n        self.editStyleAction = QtWidgets.QAction(MainWindow)\n        self.editStyleAction.setObjectName(\"editStyleAction\")\n        self.aboutAction = QtWidgets.QAction(MainWindow)\n        self.aboutAction.setObjectName(\"aboutAction\")\n        self.menu_File.addAction(self.editStyleAction)\n        self.menu_File.addSeparator()\n        self.menu_File.addAction(self.exitAction)\n        self.menu_Help.addAction(self.aboutAction)\n        self.menu_Help.addAction(self.aboutQtAction)\n        self.menubar.addAction(self.menu_File.menuAction())\n        self.menubar.addAction(self.menu_Help.menuAction())\n        self.label.setBuddy(self.professionList)\n        self.nameLabel.setBuddy(self.nameCombo)\n        self.passwordLabel.setBuddy(self.passwordEdit)\n        self.ageLabel.setBuddy(self.ageSpinBox)\n        self.countryLabel.setBuddy(self.countryCombo)\n\n        self.retranslateUi(MainWindow)\n        self.countryCombo.setCurrentIndex(6)\n        self.professionList.setCurrentRow(0)\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\n\n    def retranslateUi(self, MainWindow):\n        _translate = QtCore.QCoreApplication.translate\n        MainWindow.setWindowTitle(_translate(\"MainWindow\", \"Style Sheet\"))\n        self.agreeCheckBox.setToolTip(_translate(\"MainWindow\", \"Please read the LICENSE file before checking\"))\n        self.agreeCheckBox.setText(_translate(\"MainWindow\", \"I accept the terms and &conditions\"))\n        self.label.setText(_translate(\"MainWindow\", \"Profession:\"))\n        self.nameLabel.setText(_translate(\"MainWindow\", \"&Name:\"))\n        self.maleRadioButton.setToolTip(_translate(\"MainWindow\", \"Check this if you are male\"))\n        self.maleRadioButton.setText(_translate(\"MainWindow\", \"&Male\"))\n        self.passwordLabel.setText(_translate(\"MainWindow\", \"&Password:\"))\n        self.countryCombo.setToolTip(_translate(\"MainWindow\", \"Specify country of origin\"))\n        self.countryCombo.setStatusTip(_translate(\"MainWindow\", \"Specify country of origin\"))\n        self.countryCombo.setItemText(0, _translate(\"MainWindow\", \"Egypt\"))\n        self.countryCombo.setItemText(1, _translate(\"MainWindow\", \"France\"))\n        self.countryCombo.setItemText(2, _translate(\"MainWindow\", \"Germany\"))\n        self.countryCombo.setItemText(3, _translate(\"MainWindow\", \"India\"))\n        self.countryCombo.setItemText(4, _translate(\"MainWindow\", \"Italy\"))\n        self.countryCombo.setItemText(5, _translate(\"MainWindow\", \"Norway\"))\n        self.countryCombo.setItemText(6, _translate(\"MainWindow\", \"Pakistan\"))\n        self.ageLabel.setText(_translate(\"MainWindow\", \"&Age:\"))\n        self.countryLabel.setText(_translate(\"MainWindow\", \"Country:\"))\n        self.genderLabel.setText(_translate(\"MainWindow\", \"Gender:\"))\n        self.passwordEdit.setToolTip(_translate(\"MainWindow\", \"Specify your password\"))\n        self.passwordEdit.setStatusTip(_translate(\"MainWindow\", \"Specify your password\"))\n        self.passwordEdit.setText(_translate(\"MainWindow\", \"Password\"))\n        self.femaleRadioButton.setToolTip(_translate(\"MainWindow\", \"Check this if you are female\"))\n        self.femaleRadioButton.setText(_translate(\"MainWindow\", \"&Female\"))\n        self.ageSpinBox.setToolTip(_translate(\"MainWindow\", \"Specify your age\"))\n        self.ageSpinBox.setStatusTip(_translate(\"MainWindow\", \"Specify your age\"))\n        self.nameCombo.setToolTip(_translate(\"MainWindow\", \"Specify your name\"))\n        self.professionList.setToolTip(_translate(\"MainWindow\", \"Select your profession\"))\n        self.professionList.setStatusTip(_translate(\"MainWindow\", \"Specify your name here\"))\n        self.professionList.setWhatsThis(_translate(\"MainWindow\", \"Specify your name here\"))\n        __sortingEnabled = self.professionList.isSortingEnabled()\n        self.professionList.setSortingEnabled(False)\n        item = self.professionList.item(0)\n        item.setText(_translate(\"MainWindow\", \"Developer\"))\n        item = self.professionList.item(1)\n        item.setText(_translate(\"MainWindow\", \"Student\"))\n        item = self.professionList.item(2)\n        item.setText(_translate(\"MainWindow\", \"Fisherman\"))\n        self.professionList.setSortingEnabled(__sortingEnabled)\n        self.menu_File.setTitle(_translate(\"MainWindow\", \"&File\"))\n        self.menu_Help.setTitle(_translate(\"MainWindow\", \"&Help\"))\n        self.exitAction.setText(_translate(\"MainWindow\", \"&Exit\"))\n        self.aboutQtAction.setText(_translate(\"MainWindow\", \"About Qt\"))\n        self.editStyleAction.setText(_translate(\"MainWindow\", \"Edit &Style...\"))\n        self.aboutAction.setText(_translate(\"MainWindow\", \"About\"))\n```\n\n```sytlesheet:coffee.qss\n.QWidget {\n   background-color: beige;\n}\n\n/* Nice Windows-XP-style password character. */\nQLineEdit[echoMode=\"2\"] {\n    lineedit-password-character: 9679;\n}\n\n/* We provide a min-width and min-height for push buttons\n   so that they look elegant regardless of the width of the text. */\nQPushButton {\n    background-color: palegoldenrod;\n    border-width: 2px;\n    border-color: darkkhaki;\n    border-style: solid;\n    border-radius: 5;\n    padding: 3px;\n    min-width: 9ex;\n    min-height: 2.5ex;\n}\n\nQPushButton:hover {\n   background-color: khaki;\n}\n\n/* Increase the padding, so the text is shifted when the button is\n   pressed. */\nQPushButton:pressed {\n    padding-left: 5px;\n    padding-top: 5px;\n    background-color: #d0d67c;\n}\n\nQLabel, QAbstractButton {\n    font: bold;\n}\n\n/* Mark mandatory fields with a brownish color. */\n.mandatory {\n    color: brown;\n}\n\n/* Bold text on status bar looks awful. */\nQStatusBar QLabel {\n   font: normal;\n}\n\nQStatusBar::item {\n    border-width: 1;\n    border-color: darkkhaki;\n    border-style: solid;\n    border-radius: 2;\n}\n\nQComboBox, QLineEdit, QSpinBox, QTextEdit, QListView {\n    background-color: cornsilk;\n    selection-color: #0a214c; \n    selection-background-color: #C19A6B;\n}\n\nQListView {\n    show-decoration-selected: 1;\n}\n\nQListView::item:hover {\n    background-color: wheat;\n}\n\n/* We reserve 1 pixel space in padding. When we get the focus,\n   we kill the padding and enlarge the border. This makes the items\n   glow. */\nQLineEdit, QFrame {\n    border-width: 2px;\n    padding: 1px;\n    border-style: solid;\n    border-color: darkkhaki;\n    border-radius: 5px;\n}\n\n/* As mentioned above, eliminate the padding and increase the border. */\nQLineEdit:focus, QFrame:focus {\n    border-width: 3px;\n    padding: 0px;\n}\n\n/* A QLabel is a QFrame ... */\nQLabel {\n    border: none;\n    padding: 0;\n    background: none;\n}\n\n/* A QToolTip is a QLabel ... */\nQToolTip {\n    border: 2px solid darkkhaki;\n    padding: 5px;\n    border-radius: 3px;\n    opacity: 200;\n}\n\n/* Nice to have the background color change when hovered. */\nQRadioButton:hover, QCheckBox:hover {\n    background-color: wheat;\n}\n\n/* Force the dialog's buttons to follow the Windows guidelines. */\nQDialogButtonBox {\n    button-layout: 0;\n}\n```\n\u3053\u308c\u3089\u3092\u5168\u3066\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u7f6e\u3044\u3066\u304f\u3060\u3055\u3044\u3002\nui\u306b\u5bfe\u3057\u3066Stylesheet\u304c\u9069\u7528\u3067\u304d\u307e\u3059\u3002\n\n<img width=\"512\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-09-12 23.07.11.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/124460/8b6dc1f9-b28a-e178-e6ef-3e6efa6845d8.png\">\n\n#svgviewer.py\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u52d5\u304b\u306a\u3044\u3002\nPyQt\uff15\u306eexamples\u306bpaintings\u305d\u3057\u3066svgviewer\u306e\u4e0b\u306bsvgviewer.py\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306fPyQt5\u3068Python3\u306e\u74b0\u5883\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\nL280\u304b\u3089\u306e\u4ee5\u4e0b\u306e\u90e8\u5206\n    def wheelEvent(self, event):\n        factor = pow(1.2, event.delta() / 240.0)\n        self.scale(factor, factor)\n        event.accept()\n\n\u3053\u308c\u3092\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u306a\u3044\u3068\u52d5\u304d\u307e\u305b\u3093\u3002\n    def wheelEvent(self, event):\n        factor = pow(1.2, event.angleDelta().y() / 240.0)\n        self.scale(factor, factor)\n        event.accept()\n\ndelta()\u2192angleDelta()\u306e\u3061\u304c\u3044\u3068type\u306e\u9055\u3044\u3067\u52d5\u304d\u307e\u305b\u3093\u3002\n\u3053\u308c\u3082Qt\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u9055\u3044\u304b\u3089\u8d77\u3053\u308b\u3082\u306e\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3053\u306e\u30b3\u30fc\u30c9\u306fmouse\u306ewheelEvent\u3067\u62e1\u5927\u7e2e\u5c0f\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\u5927\u4e8b\u306a\u30b3\u30fc\u30c9\u306a\u306e\u3067\u5c55\u958b\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067svgviewer.py\u3092\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n```python:svgviewer.py\n#!/usr/bin/env python\n\n\n#############################################################################\n##\n## Copyright (C) 2013 Riverbank Computing Limited.\n## Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).\n## All rights reserved.\n##\n## This file is part of the examples of PyQt.\n##\n## $QT_BEGIN_LICENSE:BSD$\n## You may use this file under the terms of the BSD license as follows:\n##\n## \"Redistribution and use in source and binary forms, with or without\n## modification, are permitted provided that the following conditions are\n## met:\n##   * Redistributions of source code must retain the above copyright\n##     notice, this list of conditions and the following disclaimer.\n##   * Redistributions in binary form must reproduce the above copyright\n##     notice, this list of conditions and the following disclaimer in\n##     the documentation and/or other materials provided with the\n##     distribution.\n##   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor\n##     the names of its contributors may be used to endorse or promote\n##     products derived from this software without specific prior written\n##     permission.\n##\n## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n## \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n## LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n## A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n## OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n## LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n## DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n## THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n## (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n## OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\"\n## $QT_END_LICENSE$\n##\n#############################################################################\n\n\nfrom PyQt5.QtCore import QFile, QSize, Qt\nfrom PyQt5.QtGui import QBrush, QColor, QImage, QPainter, QPixmap, QPen\nfrom PyQt5.QtWidgets import (QActionGroup, QApplication, QFileDialog,\n        QGraphicsItem, QGraphicsRectItem, QGraphicsScene, QGraphicsView,\n        QMainWindow, QMenu, QMessageBox, QWidget)\nfrom PyQt5.QtOpenGL import QGL, QGLFormat, QGLWidget\nfrom PyQt5.QtSvg import QGraphicsSvgItem\n\nimport svgviewer_rc\n\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super(MainWindow, self).__init__()\n\n        self.currentPath = ''\n\n        self.view = SvgView()\n\n        fileMenu = QMenu(\"&File\", self)\n        openAction = fileMenu.addAction(\"&Open...\")\n        openAction.setShortcut(\"Ctrl+O\")\n        quitAction = fileMenu.addAction(\"E&xit\")\n        quitAction.setShortcut(\"Ctrl+Q\")\n\n        self.menuBar().addMenu(fileMenu)\n\n        viewMenu = QMenu(\"&View\", self)\n        self.backgroundAction = viewMenu.addAction(\"&Background\")\n        self.backgroundAction.setEnabled(False)\n        self.backgroundAction.setCheckable(True)\n        self.backgroundAction.setChecked(False)\n        self.backgroundAction.toggled.connect(self.view.setViewBackground)\n\n        self.outlineAction = viewMenu.addAction(\"&Outline\")\n        self.outlineAction.setEnabled(False)\n        self.outlineAction.setCheckable(True)\n        self.outlineAction.setChecked(True)\n        self.outlineAction.toggled.connect(self.view.setViewOutline)\n\n        self.menuBar().addMenu(viewMenu)\n\n        rendererMenu = QMenu(\"&Renderer\", self)\n        self.nativeAction = rendererMenu.addAction(\"&Native\")\n        self.nativeAction.setCheckable(True)\n        self.nativeAction.setChecked(True)\n\n        if QGLFormat.hasOpenGL():\n            self.glAction = rendererMenu.addAction(\"&OpenGL\")\n            self.glAction.setCheckable(True)\n\n        self.imageAction = rendererMenu.addAction(\"&Image\")\n        self.imageAction.setCheckable(True)\n\n        if QGLFormat.hasOpenGL():\n            rendererMenu.addSeparator()\n            self.highQualityAntialiasingAction = rendererMenu.addAction(\"&High Quality Antialiasing\")\n            self.highQualityAntialiasingAction.setEnabled(False)\n            self.highQualityAntialiasingAction.setCheckable(True)\n            self.highQualityAntialiasingAction.setChecked(False)\n            self.highQualityAntialiasingAction.toggled.connect(self.view.setHighQualityAntialiasing)\n\n        rendererGroup = QActionGroup(self)\n        rendererGroup.addAction(self.nativeAction)\n\n        if QGLFormat.hasOpenGL():\n            rendererGroup.addAction(self.glAction)\n\n        rendererGroup.addAction(self.imageAction)\n\n        self.menuBar().addMenu(rendererMenu)\n\n        openAction.triggered.connect(self.openFile)\n        quitAction.triggered.connect(QApplication.instance().quit)\n        rendererGroup.triggered.connect(self.setRenderer)\n\n        self.setCentralWidget(self.view)\n        self.setWindowTitle(\"SVG Viewer\")\n\n    def openFile(self, path=None):\n        if not path:\n            path, _ = QFileDialog.getOpenFileName(self, \"Open SVG File\",\n                    self.currentPath, \"SVG files (*.svg *.svgz *.svg.gz)\")\n\n        if path:\n            svg_file = QFile(path)\n            if not svg_file.exists():\n                QMessageBox.critical(self, \"Open SVG File\",\n                        \"Could not open file '%s'.\" % path)\n\n                self.outlineAction.setEnabled(False)\n                self.backgroundAction.setEnabled(False)\n                return\n\n            self.view.openFile(svg_file)\n\n            if not path.startswith(':/'):\n                self.currentPath = path\n                self.setWindowTitle(\"%s - SVGViewer\" % self.currentPath)\n\n            self.outlineAction.setEnabled(True)\n            self.backgroundAction.setEnabled(True)\n\n            self.resize(self.view.sizeHint() + QSize(80, 80 + self.menuBar().height()))\n\n    def setRenderer(self, action):\n        if QGLFormat.hasOpenGL():\n            self.highQualityAntialiasingAction.setEnabled(False)\n\n        if action == self.nativeAction:\n            self.view.setRenderer(SvgView.Native)\n        elif action == self.glAction:\n            if QGLFormat.hasOpenGL():\n                self.highQualityAntialiasingAction.setEnabled(True)\n                self.view.setRenderer(SvgView.OpenGL)\n        elif action == self.imageAction:\n            self.view.setRenderer(SvgView.Image)\n\n\nclass SvgView(QGraphicsView):\n    Native, OpenGL, Image = range(3)\n\n    def __init__(self, parent=None):\n        super(SvgView, self).__init__(parent)\n\n        self.renderer = SvgView.Native\n        self.svgItem = None\n        self.backgroundItem = None\n        self.outlineItem = None\n        self.image = QImage()\n\n        self.setScene(QGraphicsScene(self))\n        self.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)\n        self.setDragMode(QGraphicsView.ScrollHandDrag)\n        self.setViewportUpdateMode(QGraphicsView.FullViewportUpdate)\n\n        # Prepare background check-board pattern.\n        tilePixmap = QPixmap(64, 64)\n        tilePixmap.fill(Qt.white)\n        tilePainter = QPainter(tilePixmap)\n        color = QColor(220, 220, 220)\n        tilePainter.fillRect(0, 0, 32, 32, color)\n        tilePainter.fillRect(32, 32, 32, 32, color)\n        tilePainter.end()\n\n        self.setBackgroundBrush(QBrush(tilePixmap))\n\n    def drawBackground(self, p, rect):\n        p.save()\n        p.resetTransform()\n        p.drawTiledPixmap(self.viewport().rect(),\n                self.backgroundBrush().texture())\n        p.restore()\n\n    def openFile(self, svg_file):\n        if not svg_file.exists():\n            return\n\n        s = self.scene()\n\n        if self.backgroundItem:\n            drawBackground = self.backgroundItem.isVisible()\n        else:\n            drawBackground = False\n\n        if self.outlineItem:\n            drawOutline = self.outlineItem.isVisible()\n        else:\n            drawOutline = True\n\n        s.clear()\n        self.resetTransform()\n\n        self.svgItem = QGraphicsSvgItem(svg_file.fileName())\n        self.svgItem.setFlags(QGraphicsItem.ItemClipsToShape)\n        self.svgItem.setCacheMode(QGraphicsItem.NoCache)\n        self.svgItem.setZValue(0)\n\n        self.backgroundItem = QGraphicsRectItem(self.svgItem.boundingRect())\n        self.backgroundItem.setBrush(Qt.white)\n        self.backgroundItem.setPen(QPen(Qt.NoPen))\n        self.backgroundItem.setVisible(drawBackground)\n        self.backgroundItem.setZValue(-1)\n\n        self.outlineItem = QGraphicsRectItem(self.svgItem.boundingRect())\n        outline = QPen(Qt.black, 2, Qt.DashLine)\n        outline.setCosmetic(True)\n        self.outlineItem.setPen(outline)\n        self.outlineItem.setBrush(QBrush(Qt.NoBrush))\n        self.outlineItem.setVisible(drawOutline)\n        self.outlineItem.setZValue(1)\n\n        s.addItem(self.backgroundItem)\n        s.addItem(self.svgItem)\n        s.addItem(self.outlineItem)\n\n        s.setSceneRect(self.outlineItem.boundingRect().adjusted(-10, -10, 10, 10))\n\n    def setRenderer(self, renderer):\n        self.renderer = renderer\n\n        if self.renderer == SvgView.OpenGL:\n            if QGLFormat.hasOpenGL():\n                self.setViewport(QGLWidget(QGLFormat(QGL.SampleBuffers)))\n        else:\n            self.setViewport(QWidget())\n\n    def setHighQualityAntialiasing(self, highQualityAntialiasing):\n        if QGLFormat.hasOpenGL():\n            self.setRenderHint(QPainter.HighQualityAntialiasing,\n                    highQualityAntialiasing)\n\n    def setViewBackground(self, enable):\n        if self.backgroundItem:\n            self.backgroundItem.setVisible(enable)\n\n    def setViewOutline(self, enable):\n        if self.outlineItem:\n            self.outlineItem.setVisible(enable)\n\n    def paintEvent(self, event):\n        if self.renderer == SvgView.Image:\n            if self.image.size() != self.viewport().size():\n                self.image = QImage(self.viewport().size(),\n                        QImage.Format_ARGB32_Premultiplied)\n\n            imagePainter = QPainter(self.image)\n            QGraphicsView.render(self, imagePainter)\n            imagePainter.end()\n\n            p = QPainter(self.viewport())\n            p.drawImage(0, 0, self.image)\n        else:\n            super(SvgView, self).paintEvent(event)\n\n    def wheelEvent(self, event):\n        factor = pow(1.2, event.angleDelta().y() / 240.0)\n        self.scale(factor, factor)\n        event.accept()\n\n\nif __name__ == '__main__':\n\n    import sys\n\n    app = QApplication(sys.argv)\n\n    window = MainWindow()\n    if len(sys.argv) == 2:\n        window.openFile(sys.argv[1])\n    else:\n        window.openFile(':/files/bubbles.svg')\n    window.show()\n    sys.exit(app.exec_())\n```\n\n\u3042\u3068\u306f\u8d77\u52d5\u3057\u3066\u3001\u30de\u30a6\u30b9\u3067\u30db\u30a4\u30fc\u30eb\u3092\u3044\u3058\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n<img width=\"482\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-09-14 22.42.52.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/124460/73f42633-7406-7ac1-b267-f1d8267fb57c.png\">\n\n<img width=\"482\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-09-14 22.44.25.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/124460/ccfdfa06-55e0-deaa-cb77-9935a1b2738e.png\">\n\n<img width=\"568\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-09-14 22.57.40.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/124460/babb036c-4e11-0936-e980-5d0a862e8487.png\">\n\n\n\n\n\n<script>\n  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n  ga('create', 'UA-84964934-1', 'auto');\n  ga('send', 'pageview');\n\n</script>\n\n\n\n\n\n\n\n", "tags": ["PyQt5_Example", "PyQt5", "python3"]}