{"context": "\n\n\u306f\u3058\u3081\u306b\n\u306a\u3093\u3068\u306a\u304f\u76f8\u88dcPWM(Complementary PWM)\u3092\u751f\u6210\u3057\u305f\u3044\u6c17\u5206\u3060\u3063\u305f\u306e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f.\n\u624b\u63a2\u308a\u3067\u3084\u3063\u305f\u305f\u3081\u8272\u3005\u3068\u4e0d\u9069\u5207\u306a\u70b9\u304c\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059.\n\u305d\u306e\u6642\u306f\u6307\u6458\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u4fee\u6b63\u3044\u305f\u3057\u307e\u3059.\n\n\u5185\u5bb9\n\nCubeMX\u3067\u306e\u8a2d\u5b9a\n\u751f\u6210\u3055\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3078\u306e\u8ffd\u52a0\u70b9\n\n\nCubeMx\u3067\u306e\u8a2d\u5b9a\n\u307e\u305a,303k8\u7528\u306bproject\u3092\u4f5c\u6210\u3057\u307e\u3059.\n\u4eca\u56de\u306fnucleo-303k8\u3092\u4f7f\u3063\u3066\u3044\u304d\u307e\u3059.\n\u521d\u671f\u72b6\u614b\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\npinout\u30bf\u30d6\n\u30c4\u30ea\u30fc\u306ePeripherals\u304b\u3089TIM1\u3092\u5c55\u958b\u3057,Channel1\u306e\u8a2d\u5b9a\u3092\nPWM Generation CH1 CH1N\n\u306b\u3057\u307e\u3059.\n\u3059\u308b\u3068,\n18pin \u2192 TIM1_CH1\n13pin \u2192 TIM1_CH1N\n\u3068\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044\u70b9\u3068\u3057\u3066,303k8\u3067\u306f\u76f8\u88dcPWM\u306fAdvanced timer\u3067\u3042\u308bTIM1\u3057\u304b\u4f7f\u3048\u307e\u305b\u3093.\nTIM2\u3084TIM3\u306a\u3069\u306eGeneral-purpose timer\u3067\u306f\u76f8\u88dcPWM\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u6c17\u3092\u4ed8\u3051\u307e\u3057\u3087\u3046.\n[3/10\u8ffd\u8a18]\nTIM15,16,17\u306b\u3082\u76f8\u88dc\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u3042\u308b\u3063\u307d\u3044\u3067\u3059\u304c\u3001\u3053\u308c\u3089\u306f\u307e\u3060\u8a66\u3057\u3066\u306a\u3044\u3067\u3059.\n\nconfiguration\u30bf\u30d6\n\u30d4\u30f3\u306e\u8a2d\u5b9a\u304c\u5b8c\u4e86\u5f8c,configuration\u30bf\u30d6\u306b\u79fb\u52d5\u3057,TIM1\u306e\u5404\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059.\n\n\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u30bf\u30d6\u306f\n- Counter Settings\n- PWM Generation Channel 1 and 1N\n\u306e2\u3064\u3067\u3059.\n\u307e\u305aCounter Settings\u30bf\u30d6\u3067PWM\u306e\u5468\u6ce2\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059.\n\u4eca\u56de\u306f20kHz\u3067PWM\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306bPrescaler\u3068Counter Period\u3092\u6c7a\u3081\u307e\u3059\u3002\n\u52d5\u4f5c\u30af\u30ed\u30c3\u30af\u306f\u5185\u90e8\u306e8MHz\u3092\u4f7f\u3046\u306e\u3067\nPrescaler:0\nCounter Period:400-1\n(\u30ab\u30a6\u30f3\u30c8\u306f0\u304b\u3089\u306a\u306e\u30671\u5f15\u3044\u305f399\u3092\u8a2d\u5b9a\u3059\u308b)\n\u3068\u3057\u307e\u3059.\nPWM Generation Channel 1 and 1N\u30bf\u30d6\u3067\u306f\nMode: Assymetric PWM1\n\u3068\u3057\u307e\u3059.\n[3/9\u8ffd\u8a18]\n\u30c7\u30c3\u30c9\u30bf\u30a4\u30e0\u306e\u8a2d\u5b9a\u3082CubeMx\u3067\u3067\u304d\u307e\u3059.\nBreak And Dead  Time management\u30bf\u30d6\u306e\u4e00\u756a\u4e0b\u306e\u6b04\u306b\nDead Time:10(0-255\u3067\u4efb\u610f\u306e\u5024)\n\u3068\u8a2d\u5b9a\u3057\u307e\u3059.\nCubeMx\u5074\u3067\u8a2d\u5b9a\u3059\u308c\u3070\u30b3\u30fc\u30c9\u518d\u751f\u6210\u6642\u7b49\u306b\u697d\u3067\u3059.\n\n\u3053\u3053\u307e\u3067\u8a2d\u5b9a\u3057\u305f\u3089,\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u307e\u3059.\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3078\u306e\u8ffd\u52a0\n\u30b3\u30fc\u30c9\u306f\u91cf\u304c\u591a\u3044\u3046\u3048\u306b\u898b\u3065\u3089\u3044\u306e\u3067\u5f8c\u307b\u3069Github\u7b49\u306b\u4e0a\u3052\u307e\u3059.\n[3/10\u8ffd\u8a18]\n\u3053\u3061\u3089\u306b\u4e0a\u304c\u3063\u3066\u3044\u307e\u3059\u3002Src/main.c\u304c\u672c\u4f53\u3067\u3059\u3002\n\u4eca\u56de\u306f\u5909\u3048\u305f\u30dd\u30a4\u30f3\u30c8\u3068\u8ffd\u52a0\u3057\u305f\u95a2\u6570\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3059.\n\n\u5909\u66f4\u70b9\n[3/9\u8ffd\u8a18]\n\u4e0a\u8a18\u306e\u901a\u308aCubeMx\u5074\u3067\u8a2d\u5b9a\u3057\u3066\u3057\u307e\u3063\u305f\u65b9\u304c\u30b3\u30fc\u30c9\u518d\u751f\u6210\u7b49\u306e\u6642\u306b\u697d\u3067\u3059\u3002\n\n\u5909\u3048\u308b\u30dd\u30a4\u30f3\u30c8\u306f,MX_TIM1_Init\u95a2\u6570\u5185\u306e\u4e00\u304b\u6240\u3067\u3059\n\nchange_point\nstatic void MX_TIM1_Init()\n{\n......\n  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;\n  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;\n  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;\n  sBreakDeadTimeConfig.DeadTime = 10; \n  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;\n  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;\n  sBreakDeadTimeConfig.BreakFilter = 0;\n  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;\n  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;\n  sBreakDeadTimeConfig.Break2Filter = 0;\n  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;\n  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)\n  {\n    Error_Handler();\n  }\n}\n\n\nsBreakDeadTimeConfig.DeadTime = 10;\n\u3053\u3053\u3067\u30c7\u30c3\u30c9\u30bf\u30a4\u30e0\u3092\u8a2d\u5b9a\u3057\u307e\u3059.\n\u5024\u306f8bit\u30670-255\u306e\u9593\u3067\u3059.\u4eca\u56de\u306f\u3068\u308a\u3042\u3048\u305a10\u3068\u3057\u307e\u3059.\n\n\nuser\u95a2\u6570\u306e\u8ffd\u52a0\n\u307e\u305f,PWM\u3092\u6271\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059.\n\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u306f\u9069\u5b9c\u304a\u9858\u3044\u3057\u307e\u3059.\n\nuser_function\nvoid user_tim1_pwm_setvalue(float value)\n{\n   TIM_OC_InitTypeDef sConfigOC;\n   sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;\n   sConfigOC.Pulse = (uint32_t)((400)*value);\n   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;\n   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;\n   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;\n   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;\n   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;\n   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);\n   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);\n   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);\n}\n\n\n\u3053\u306e\u95a2\u6570\u304c\u76f8\u88dc\u3067\u51fa\u529b\u3059\u308b\u969b\u306e\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308a\u307e\u3059.\n\u51fa\u529b\u3059\u308b\u5024\u3092\u6c7a\u3081\u307e\u3059.\nsConfigOC.Pulse = (uint32_t)((400)*value);\n\u8a2d\u5b9a\u5024\u3092\u53cd\u6620\u3057\u307e\u3059.\nHAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);\nCH1\u3078\u51fa\u529b\u3057\u307e\u3059.\nHAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);\nCH1N\u3078\u51fa\u529b\u3057\u307e\u3059.\nHAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);\n\u4e00\u756a\u6700\u5f8c\u306eHAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);\u304c\u306a\u3044\u3068,CH1N\u304b\u3089\u306f\u51fa\u529b\u3055\u308c\u307e\u305b\u3093.\n\u3067\u304d\u305f\u3089\u30d3\u30eb\u30c9\u3057\u3066\u66f8\u304d\u8fbc\u3093\u3067\u52d5\u304b\u3057\u3066\u30aa\u30b7\u30ed\u3067\u898b\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6ce2\u5f62\u304c\u5f97\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059.\n\n\u3084\u308a\u65b9\u306f\u3068\u308a\u3042\u3048\u305a\u4ee5\u4e0a\u3067\u3059.\n\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3053\u3068,\u8cea\u554f\u7b49\u3042\u3063\u305f\u3089\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059.\n#\u306f\u3058\u3081\u306b\n\n\u306a\u3093\u3068\u306a\u304f\u76f8\u88dcPWM(Complementary PWM)\u3092\u751f\u6210\u3057\u305f\u3044\u6c17\u5206\u3060\u3063\u305f\u306e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f.\n\n\u624b\u63a2\u308a\u3067\u3084\u3063\u305f\u305f\u3081\u8272\u3005\u3068\u4e0d\u9069\u5207\u306a\u70b9\u304c\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059.\n\u305d\u306e\u6642\u306f\u6307\u6458\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u4fee\u6b63\u3044\u305f\u3057\u307e\u3059.\n\n##\u5185\u5bb9\n- CubeMX\u3067\u306e\u8a2d\u5b9a\n- \u751f\u6210\u3055\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3078\u306e\u8ffd\u52a0\u70b9\n\n#CubeMx\u3067\u306e\u8a2d\u5b9a\n\n\u307e\u305a,303k8\u7528\u306bproject\u3092\u4f5c\u6210\u3057\u307e\u3059.\n\n\u4eca\u56de\u306fnucleo-303k8\u3092\u4f7f\u3063\u3066\u3044\u304d\u307e\u3059.\n\n\u521d\u671f\u72b6\u614b\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n![first.png](https://qiita-image-store.s3.amazonaws.com/0/84997/14bf3b5e-324c-858d-7160-1aac8e26782e.png)\n\n##pinout\u30bf\u30d6\n\n\u30c4\u30ea\u30fc\u306ePeripherals\u304b\u3089TIM1\u3092\u5c55\u958b\u3057,Channel1\u306e\u8a2d\u5b9a\u3092\n`PWM Generation CH1 CH1N`\n\u306b\u3057\u307e\u3059.\n\n\n\u3059\u308b\u3068,\n18pin \u2192 TIM1_CH1\n13pin \u2192 TIM1_CH1N\n\u3068\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n![second.png](https://qiita-image-store.s3.amazonaws.com/0/84997/076b1417-e585-eb63-871d-04427b659024.png)\n\n\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044\u70b9\u3068\u3057\u3066,303k8\u3067\u306f\u76f8\u88dcPWM\u306fAdvanced timer\u3067\u3042\u308bTIM1\u3057\u304b\u4f7f\u3048\u307e\u305b\u3093.\n\nTIM2\u3084TIM3\u306a\u3069\u306eGeneral-purpose timer\u3067\u306f\u76f8\u88dcPWM\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u6c17\u3092\u4ed8\u3051\u307e\u3057\u3087\u3046.\n**[3/10\u8ffd\u8a18]\nTIM15,16,17\u306b\u3082\u76f8\u88dc\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u3042\u308b\u3063\u307d\u3044\u3067\u3059\u304c\u3001\u3053\u308c\u3089\u306f\u307e\u3060\u8a66\u3057\u3066\u306a\u3044\u3067\u3059.**\n\n##configuration\u30bf\u30d6\n\n\u30d4\u30f3\u306e\u8a2d\u5b9a\u304c\u5b8c\u4e86\u5f8c,configuration\u30bf\u30d6\u306b\u79fb\u52d5\u3057,TIM1\u306e\u5404\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059.\n\n![third.png](https://qiita-image-store.s3.amazonaws.com/0/84997/35708057-64f2-8f97-0597-645a67fa5410.png)\n\n\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u30bf\u30d6\u306f\n- Counter Settings\n- PWM Generation Channel 1 and 1N\n\u306e2\u3064\u3067\u3059.\n\n\n\u307e\u305aCounter Settings\u30bf\u30d6\u3067PWM\u306e\u5468\u6ce2\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059.\n\n\u4eca\u56de\u306f20kHz\u3067PWM\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306bPrescaler\u3068Counter Period\u3092\u6c7a\u3081\u307e\u3059\u3002\n\n\u52d5\u4f5c\u30af\u30ed\u30c3\u30af\u306f\u5185\u90e8\u306e8MHz\u3092\u4f7f\u3046\u306e\u3067\nPrescaler:0\nCounter Period:400-1\n(\u30ab\u30a6\u30f3\u30c8\u306f0\u304b\u3089\u306a\u306e\u30671\u5f15\u3044\u305f399\u3092\u8a2d\u5b9a\u3059\u308b)\n\u3068\u3057\u307e\u3059.\n\nPWM Generation Channel 1 and 1N\u30bf\u30d6\u3067\u306f\nMode: Assymetric PWM1\n\u3068\u3057\u307e\u3059.\n\n**[3/9\u8ffd\u8a18]\n\u30c7\u30c3\u30c9\u30bf\u30a4\u30e0\u306e\u8a2d\u5b9a\u3082CubeMx\u3067\u3067\u304d\u307e\u3059.\nBreak And Dead  Time management\u30bf\u30d6\u306e\u4e00\u756a\u4e0b\u306e\u6b04\u306b\nDead Time:10(0-255\u3067\u4efb\u610f\u306e\u5024)\n\u3068\u8a2d\u5b9a\u3057\u307e\u3059.**\n**CubeMx\u5074\u3067\u8a2d\u5b9a\u3059\u308c\u3070\u30b3\u30fc\u30c9\u518d\u751f\u6210\u6642\u7b49\u306b\u697d\u3067\u3059.**\n\n![\u7121\u984c.png](https://qiita-image-store.s3.amazonaws.com/0/84997/ce5e38dc-5937-1f08-c0ee-10d99d3c8e5c.png)\n\n\n\n\u3053\u3053\u307e\u3067\u8a2d\u5b9a\u3057\u305f\u3089,\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u307e\u3059.\n![fourth.png](https://qiita-image-store.s3.amazonaws.com/0/84997/52daa72f-b59b-1881-3060-c1d279e44882.png)\n\n#\u30d7\u30ed\u30b0\u30e9\u30e0\u3078\u306e\u8ffd\u52a0\n\n\u30b3\u30fc\u30c9\u306f\u91cf\u304c\u591a\u3044\u3046\u3048\u306b\u898b\u3065\u3089\u3044\u306e\u3067~~\u5f8c\u307b\u3069~~Github\u7b49\u306b\u4e0a\u3052\u307e\u3059.\n\n**[3/10\u8ffd\u8a18]\n[\u3053\u3061\u3089](https://github.com/wakoruru/STM32F3_HAL_Projects/tree/master/Test12_IMC_alone/Test12_IMC_alone)\u306b\u4e0a\u304c\u3063\u3066\u3044\u307e\u3059\u3002_Src/main.c_\u304c\u672c\u4f53\u3067\u3059\u3002**\n\n\u4eca\u56de\u306f\u5909\u3048\u305f\u30dd\u30a4\u30f3\u30c8\u3068\u8ffd\u52a0\u3057\u305f\u95a2\u6570\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3059.\n\n##\u5909\u66f4\u70b9\n**[3/9\u8ffd\u8a18]\n\u4e0a\u8a18\u306e\u901a\u308aCubeMx\u5074\u3067\u8a2d\u5b9a\u3057\u3066\u3057\u307e\u3063\u305f\u65b9\u304c\u30b3\u30fc\u30c9\u518d\u751f\u6210\u7b49\u306e\u6642\u306b\u697d\u3067\u3059\u3002**\n\n___\n\u5909\u3048\u308b\u30dd\u30a4\u30f3\u30c8\u306f,MX_TIM1_Init\u95a2\u6570\u5185\u306e\u4e00\u304b\u6240\u3067\u3059\n\n```c:change_point\nstatic void MX_TIM1_Init()\n{\n......\n  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;\n  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;\n  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;\n  sBreakDeadTimeConfig.DeadTime = 10; \n  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;\n  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;\n  sBreakDeadTimeConfig.BreakFilter = 0;\n  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;\n  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;\n  sBreakDeadTimeConfig.Break2Filter = 0;\n  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;\n  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)\n  {\n    Error_Handler();\n  }\n}\n```\n\n`sBreakDeadTimeConfig.DeadTime = 10; `\n\u3053\u3053\u3067\u30c7\u30c3\u30c9\u30bf\u30a4\u30e0\u3092\u8a2d\u5b9a\u3057\u307e\u3059.\n\u5024\u306f8bit\u30670-255\u306e\u9593\u3067\u3059.\u4eca\u56de\u306f\u3068\u308a\u3042\u3048\u305a10\u3068\u3057\u307e\u3059.\n___\n##user\u95a2\u6570\u306e\u8ffd\u52a0\n\n\u307e\u305f,PWM\u3092\u6271\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059.\n\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u306f\u9069\u5b9c\u304a\u9858\u3044\u3057\u307e\u3059.\n\n```c:user_function\nvoid user_tim1_pwm_setvalue(float value)\n{\n   TIM_OC_InitTypeDef sConfigOC;\n   sConfigOC.OCMode = TIM_OCMODE_ASSYMETRIC_PWM1;\n   sConfigOC.Pulse = (uint32_t)((400)*value);\n   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;\n   sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;\n   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;\n   sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;\n   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;\n   HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);\n   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);\n   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);\n}\n```\n\n\u3053\u306e\u95a2\u6570\u304c\u76f8\u88dc\u3067\u51fa\u529b\u3059\u308b\u969b\u306e\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308a\u307e\u3059.\n\n\u51fa\u529b\u3059\u308b\u5024\u3092\u6c7a\u3081\u307e\u3059.\n`sConfigOC.Pulse = (uint32_t)((400)*value);`\n\n\u8a2d\u5b9a\u5024\u3092\u53cd\u6620\u3057\u307e\u3059.\n`HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);`\n\nCH1\u3078\u51fa\u529b\u3057\u307e\u3059.\n`HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);`\nCH1N\u3078\u51fa\u529b\u3057\u307e\u3059.\n`HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);`\n\n\u4e00\u756a\u6700\u5f8c\u306e`HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);`\u304c\u306a\u3044\u3068,CH1N\u304b\u3089\u306f\u51fa\u529b\u3055\u308c\u307e\u305b\u3093.\n\n\u3067\u304d\u305f\u3089\u30d3\u30eb\u30c9\u3057\u3066\u66f8\u304d\u8fbc\u3093\u3067\u52d5\u304b\u3057\u3066\u30aa\u30b7\u30ed\u3067\u898b\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6ce2\u5f62\u304c\u5f97\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059.\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/84997/fec999ab-2c91-a532-84d4-3cee68655775.png)\n\n\n\u3084\u308a\u65b9\u306f\u3068\u308a\u3042\u3048\u305a\u4ee5\u4e0a\u3067\u3059.\n\n\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3053\u3068,\u8cea\u554f\u7b49\u3042\u3063\u305f\u3089\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059.\n", "tags": ["STM32", "STM32CubeMX"]}