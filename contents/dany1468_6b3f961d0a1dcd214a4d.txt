{"tags": ["sidekiq", "Ruby"], "context": "\n\nSidekiq \u306e\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\nSidekiq \u306e\u6a5f\u80fd\u62e1\u5f35\u3092\u8003\u3048\u308b\u6642\u306b\u3001\u771f\u3063\u5148\u306b\u691c\u8a0e\u3055\u308c\u308b\u306e\u304c Sidekiq middleware \u3067\u3059\u3002\nMiddleware - mperham/sidekiq Wiki\nmiddleware \u306f Client Side (#perform_asyn \u3092\u547c\u3073\u51fa\u3059\u65b9\uff09 \u3068 Server Side (\u30b9\u30ec\u30c3\u30c9\u30d9\u30fc\u30b9\u3067\u52d5\u4f5c\u3059\u308b Worker \u306e\u65b9) \u306e\u4e21\u65b9\u3092 Rack \u3084 Faraday \u306e\u3088\u3046\u306b #call \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u6301\u3063\u305f\u30af\u30e9\u30b9\u3092\u767b\u9332\u3059\u308b\u3060\u3051\u3067\u3001\u305d\u306e\u6319\u52d5\u3092\u62e1\u5f35\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001middleware \u306f Decorator \u30d1\u30bf\u30fc\u30f3\u306e\u3088\u3046\u306a\u3082\u306e\u306a\u306e\u3067\u3001Sidekiq \u306e\u5185\u90e8\u306e\u51e6\u7406\u306b\u5927\u304d\u304f\u4ecb\u5165\u3067\u304d\u308b\u8a33\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nRedis \u304b\u3089\u306e Job \u53d6\u5f97\u51e6\u7406\u306b\u7528\u610f\u3055\u308c\u305f\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\n\u304a\u305d\u3089\u304f\u672c\u5bb6\u3068\u3057\u3066 Pro \u3084 Enterprise \u7248\u306e\u62e1\u5f35\u3092\u3084\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u7528\u610f\u3057\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u304c\uff08Wiki \u3067\u6587\u66f8\u5316\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u306f\u898b\u3048\u306a\u304b\u3063\u305f\u306e\u3067\uff09\u3001Sidekiq \u306b\u306f Redis \u304b\u3089\u306e Job \u53d6\u5f97\u51e6\u7406\u3092\u7f6e\u304d\u63db\u3048\u308b\u30dd\u30a4\u30f3\u30c8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/mperham/sidekiq/blob/master/lib/sidekiq/processor.rb#L38\n\nsidekiq/lib/sidekiq/processor.rb\nmodule Sidekiq\n  class Processor\n\n    include Util\n\n    attr_reader :thread\n    attr_reader :job\n\n    def initialize(mgr)\n      @mgr = mgr\n      @down = false\n      @done = false\n      @job = nil\n      @thread = nil\n\n      # options[:fetch] \u306e\u65b9\u3092\u512a\u5148\u3057\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n      @strategy = (mgr.options[:fetch] || Sidekiq::BasicFetch).new(mgr.options)\n\n      @reloader = Sidekiq.options[:reloader]\n      @executor = Sidekiq.options[:executor]\n    end\n\n\n\u4e0a\u8a18\u306f Processor \u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3059\u304c\u3001Sidekiq \u5185\u306b\u304a\u3044\u3066\u306f\u3001\u5404\u30b9\u30ec\u30c3\u30c9\u6bce\u306e\u51e6\u7406\u3092\u62c5\u3063\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n\u3053\u306e options \u306e\u8a2d\u5b9a\u306f\u7c21\u5358\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b middleware \u3092\u767b\u9332\u3059\u308b\u6642\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u6642\u306b\u6e21\u305b\u3070\u826f\u3044\u3060\u3051\u3067\u3059\u3002\nSidekiq.configure_server do |config|\n  config.options[:fetch] = HogeFetcher\nend\n\n\u4ee5\u964d\u3067\u306f\u3001\u3053\u306e Fetcher \u306e\u62e1\u5f35\u3092\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\nFetcher \u3092\u3069\u306e\u3088\u3046\u306b\u62e1\u5f35\u3059\u308b\u304b\uff1f\n\u305d\u308c\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u3001\u5148\u307b\u3069\u306e Processor \u3092\u66f4\u306b\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\nFetch \u90e8\u5206\u3092\u898b\u308b\nmodule Sidekiq\n  class Processor\n    # \u7701\u7565\n\n    def run\n      begin\n        while !@done\n          process_one\n        end\n        @mgr.processor_stopped(self)\n      rescue Sidekiq::Shutdown\n        @mgr.processor_stopped(self)\n      rescue Exception => ex\n        @mgr.processor_died(self, ex)\n      end\n    end\n\n    def process_one\n      @job = fetch\n      process(@job) if @job\n      @job = nil\n    end\n\n    def fetch\n      j = get_one\n      if j && @done\n        j.requeue\n        nil\n      else\n        j\n      end\n    end\n\n    def get_one\n      begin\n        work = @strategy.retrieve_work\n        (logger.info { \"Redis is online, #{Time.now - @down} sec downtime\" }; @down = nil) if @down\n        work\n      rescue Sidekiq::Shutdown\n      rescue => ex\n        handle_fetch_exception(ex)\n      end\n    end\n\n\u5148\u307b\u3069\u306e #initialize \u3067 Fetcher \u304c @strategy \u3068\u3044\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u5165\u308c\u3089\u308c\u3066\u3044\u305f\u306e\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nProcessor \u306f #run \u306e\u5185\u90e8\u3067\u30eb\u30fc\u30d7\u304c\u5b9f\u884c\u3055\u308c\u3001\u3053\u308c\u306f Sidekiq \u306b\u505c\u6b62\u547d\u4ee4\u304c\u51fa\u308b\u307e\u3067\u7d9a\u304d\u307e\u3059\u3002\n\u305d\u3057\u3066 #process_one -> #fetch -> #get_one \u3068\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u3001 #get_one \u306e\u4e2d\u3067\u3088\u3046\u3084\u304f @starategy.retrieve_work \u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u305d\u3053\u3067\u53d6\u5f97\u3055\u308c\u305f work \u3092 #process \u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3057\u3066\u3001\u304a\u305d\u3089\u304f Sidekiq::Worker \u306e\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\uff08\u3053\u3053\u306f\u5f8c\u3067\u898b\u3066\u3044\u304d\u307e\u3059\u3002\uff09\n\nBasicFetch#retrieve_work \u3092\u8aad\u3080\n\u3067\u306f\u3001\u3053\u3053\u3067 Fetcher \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3067\u3042\u308b BasicFetch \u3092\u898b\u3066\u307f\u307e\u3059\u3002\nhttps://github.com/mperham/sidekiq/blob/master/lib/sidekiq/fetch.rb\n\nsidekiq/lib/sidekiq/fetch.rb\nmodule Sidekiq\n  class BasicFetch\n    # We want the fetch operation to timeout every few seconds so the thread\n    # can check if the process is shutting down.\n    TIMEOUT = 2\n\n    UnitOfWork = Struct.new(:queue, :job) do\n      def acknowledge\n        # nothing to do\n      end\n\n      def queue_name\n        queue.sub(/.*queue:/, ''.freeze)\n      end\n\n      def requeue\n        Sidekiq.redis do |conn|\n          conn.rpush(\"queue:#{queue_name}\", job)\n        end\n      end\n    end\n\n    def retrieve_work\n      work = Sidekiq.redis { |conn| conn.brpop(*queues_cmd) }\n      UnitOfWork.new(*work) if work\n    end\n\n\n\u3053\u3053\u307e\u3067\u3067\u5fc5\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u306b\u9650\u5b9a\u3057\u3066\u8ee2\u8f09\u3057\u3066\u3044\u307e\u3059\u3002 queues_cmd \u306f\u3053\u3053\u3067\u306f\u3001 Sidekiq \u306b\u8a2d\u5b9a\u3057\u305f queue \u306e\u4e00\u89a7\u306e\u540d\u524d\u304c\u8fd4\u3063\u3066\u304d\u3066\u3044\u308b\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u7279\u306b\u4f55\u3082\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3051\u308c\u3070 default \u30ad\u30e5\u30fc\u3060\u3051\u304c\u8fd4\u3063\u3066\u304f\u308b\u306f\u305a\u3067\u3059\uff09\n#retrieve_work \u3067\u306f Redis \u306e BRPOP \u3092\u4f7f\u3063\u3066\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3057\u3064\u3064\u3001\u30ea\u30b9\u30c8\u304b\u3089\u4e00\u3064 Job \u3092\u53d6\u5f97\u3059\u308b\u3068\u3044\u3046\u5358\u7d14\u306a\u51e6\u7406\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u305d\u3053\u3067\u8fd4\u3063\u3066\u304d\u305f Job \uff08\u30b3\u30fc\u30c9\u4e0a\u306f work) \u3092 UnitOfWork \u3067\u5305\u3093\u3067\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\nProcessor#process \u3068 UnitOfWork \u306e\u5f79\u5272\u3092\u898b\u308b\n\u3067\u306f\u3001\u518d\u3073 Processor \u306b\u623b\u3063\u3066\u3001 \u53d6\u5f97\u3055\u308c\u305f work \u304c #process \u306b\u6e21\u3055\u308c\u3066\u4ee5\u964d\u306e\u5185\u5bb9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\nmodule Sidekiq\n  class Processor\n    # \u7701\u7565\n\n    def process(work)\n      jobstr = work.job\n      queue = work.queue_name\n\n      ack = false\n      begin\n\n        # perform_async \u3092 call \u3057\u305f\u6642\u306e Worker \u30af\u30e9\u30b9\u540d\u3084\u5f15\u6570\u306e\u60c5\u5831\u3092\u8aad\u307f\u51fa\u3059\n        job_hash = Sidekiq.load_json(jobstr)\n        @reloader.call do\n          klass  = job_hash['class'.freeze].constantize\n          worker = klass.new\n          worker.jid = job_hash['jid'.freeze]\n\n          stats(worker, job_hash, queue) do\n\n            # execute_job \u306e\u524d\u5f8c\u3092 middleware \u306e\u5b9f\u884c\u3067\u56f2\u3080\u3053\u3068\u3067 middleware \u306e call \u51e6\u7406\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\n            # \u30b3\u30e1\u30f3\u30c8\u306b\u3042\u308b\u901a\u308a\u3060\u304c\u3001middleware \u306e\u5b9f\u884c\u3067\u304a\u4ed5\u4e8b\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\n            # ack \u5909\u6570\u3067\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3057\u3066\u3044\u308b\u3002\n            Sidekiq.server_middleware.invoke(worker, job_hash, queue) do\n\n              @executor.call do\n                # Only ack if we either attempted to start this job or\n                # successfully completed it. This prevents us from\n                # losing jobs if a middleware raises an exception before yielding\n                ack = true\n                execute_job(worker, cloned(job_hash['args'.freeze]))\n              end\n            end\n          end\n          ack = true\n        end\n      rescue Sidekiq::Shutdown\n        # Had to force kill this job because it didn't finish\n        # within the timeout.  Don't acknowledge the work since\n        # we didn't properly finish it.\n        ack = false\n      rescue Exception => ex\n        handle_exception(ex, { :context => \"Job raised exception\", :job => job_hash, :jobstr => jobstr })\n        raise\n      ensure\n\n        # ack \u304c true \u306e\u5834\u5408\u306e\u307f UnitOfWork \u306e #acknowledge \u304c\u547c\u3073\u51fa\u3055\u308c\u308b\n        work.acknowledge if ack\n      end\n    end\n\n    def execute_job(worker, cloned_args)\n\n      # \u3053\u308c\u306f\u7686\u3055\u3093\u304c\u5b9f\u88c5\u3059\u308b Sidekiq::Worker \u304c include \u3055\u308c\u305f\u30af\u30e9\u30b9\u3067\u3059\n      worker.perform(*cloned_args)\n    end\n\n\u7d30\u304b\u3044\u90e8\u5206\u306f\u65e5\u672c\u8a9e\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304d\u8db3\u3057\u3066\u3044\u307e\u3059\u304c\u3001 #process \u304c\n\n\u5b9f\u884c\u3059\u308b Worker \u30af\u30e9\u30b9\u3084\u5f15\u6570\u60c5\u5831\u3092\u8aad\u307f\u51fa\u3057\nserver_middleware \u3092\u5b9f\u884c\u3057\u3064\u3064\n\nWorker#perform \u3092\u5b9f\u884c\u3059\u308b\n\n\u3068\u3044\u3046\u69d8\u5b50\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u3055\u3066\u3001\u30b3\u30e1\u30f3\u30c8\u306b\u306f ack \u5909\u6570\u306b\u95a2\u3057\u3066\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u8a18\u8ff0\u3057\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u306b\u306f\u3053\u306e\u6642\u70b9\u3067 \uff12 \u3064\u306e\u610f\u5473\u304c\u3042\u308a\u307e\u3059\u3002\n\n\nBasicFetch::UnitOfWork \u306e #acknowledge \u306e\u5b9f\u88c5\u306f\u7a7a\u306a\u306e\u3067\u3001\u5b9f\u8cea\u4f55\u3082\u3057\u306a\u3044\u3002\n\n\n\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3063\u3066\u3088\u3055\u305d\u3046\n\n\n\nserver_middleware \u306b\u3088\u3063\u3066\u304a\u4ed5\u4e8b\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u3092\u8003\u616e\u3057\u3066 ack \u5909\u6570\u3067\u306e\u7ba1\u7406\u304c\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u3053\u306e\u5b9f\u88c5\u3092\u898b\u308b\u9650\u308a\u305d\u3053\u306e\u30b1\u30a2\u306f\u3055\u308c\u3066\u3044\u306a\u3044\n\n\nOSS \u7248\u306e Sidekiq \u306f server_middleware \u306e\u6319\u52d5\u3067\u304a\u4ed5\u4e8b\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n\u3053\u308c\u306f Pro \u7248\u3067\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3059\u3002\nhttps://github.com/mperham/sidekiq/wiki/Pro-Reliability-Server\n\n\n\n\u3088\u3063\u3066\u3001 Fetcher \u3068\u5171\u306b\u3001\u305d\u306e\u51fa\u529b\u3067\u3042\u308b UnitOfWork \u3082\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u3069\u306e\u3088\u3046\u306b\u62e1\u5f35\u3059\u308b\u304b\u306e\u307e\u3068\u3081\nProcessor \u3068\u3001Fetcher \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3067\u3042\u308b BasicFetch\u3001\u305d\u3057\u3066 UnitOfWork \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3067\u3042\u308b BasicFetch::UnitOfWork \u3092\u898b\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u4e00\u3064\u306e Job \u304c Redis \u304b\u3089\u53d6\u308a\u51fa\u3055\u308c\u3066\u304b\u3089\u3001\u51e6\u7406\u5b8c\u4e86\u306b\u3044\u305f\u308b\u307e\u3067\u306e\u9593\u3067\u3001\u3069\u306e\u3088\u3046\u306a\u51e6\u7406\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u304b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u305d\u308c\u3089\u3092\u6301\u3063\u305f\u4e0a\u3067\u3001\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\u306f\u30d1\u30d6\u30ea\u30c3\u30af\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3060\u3051\u3092\u898b\u308b\u3068\u5927\u304d\u304f\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\nFetcher \u306e #retrieve_work \u306e\u5909\u66f4\n\n\n\u305d\u3082\u305d\u3082 Processor \u5185\u3067 Strategy \u3068\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u69d8\u3005\u5909\u66f4\u304c\u8003\u3048\u3089\u308c\u305d\u3046\n\n\nUnitOfWork \u306e #acknowledge \u306e\u547c\u3073\u51fa\u3057\u3092\u8003\u616e\u3057\u305f\u3082\u306e\n\n\n\u300c\u51e6\u7406\u304c\u7d42\u4e86\u3057\u305f\u300d\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u5358\u4f53\u3067\u3082\u5f8c\u51e6\u7406\u306b\u4f7f\u3048\u307e\u3059\u3057\u3001UnitOfWork#initialize \u306e\u51e6\u7406\u3068\u7d44\u307f\u5408\u308f\u305b\u308c\u3070\u524d\u51e6\u7406\u3068\u306e\u9023\u643a\u3082\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\n\n\u3067\u306f\u3001\u3053\u306e\u6295\u7a3f\u306e\u7de0\u3081\u304f\u304f\u308a\u3068\u3057\u3066\u3001\u3053\u306e\u62e1\u5f35\u3092\u4f7f\u3063\u305f gem \u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u3066\u7d42\u308f\u308a\u306b\u3057\u307e\u3059\u3002\n\nFetcher \u3092\u62e1\u5f35\u3057\u3066\u3044\u308b gem\n\u3068\u3044\u3046\u304b\u3001Sidekiq \u95a2\u9023\u306e gem \u3067\u306f\u3057\u3054\u304f\u5f53\u305f\u308a\u524d\u306e\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\u306e\u3088\u3046\u3067\u3001\u304b\u306a\u308a\u591a\u304f\u898b\u3064\u304b\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u5b9f\u88c5\u306e\u8aac\u660e\u304c\u3067\u304d\u305d\u3046\u306a\u3082\u306e\u3060\u3051\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3059\u3002\n\nsidekiq-reliable-fetch\nTEA-ebook/sidekiq-reliable-fetch\n\u3053\u308c\u306f\u3001\u5148\u307b\u3069\u306e\u8aac\u660e\u6642\u306b\u554f\u984c\u3068\u3057\u3066\u3042\u3052\u305f\u3001\u300cserver_middleware \u306b\u3088\u3063\u3066\u3001\u304a\u4ed5\u4e8b\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u300d\u306b\u5bfe\u3057\u3066\u306e\u4e00\u3064\u306e\u89e3\u3067\u3042\u308a\u3001Sidekiq Pro \u3067\u63d0\u4f9b\u3055\u308c\u308b reliable_fetch \u306e\u6587\u66f8\u60c5\u5831\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\nRPOPLPUSH \u3068\u3044\u3046\u300c\u30ad\u30e5\u30fc A \u304b\u30891\u4ef6\u30ea\u30b9\u30c8\u304b\u3089\u53d6\u5f97\u3057\u305f\u3089\u3001\u540c\u6642\u306b\u305d\u306e 1 \u4ef6\u3092\u30ad\u30e5\u30fc B \u306b\u5165\u308c\u3066\u304b\u3089\u8fd4\u3059\u300d\u3068\u3044\u3046 Redis \u306e\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u3087\u3046\u3069\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b BRPOPLPUSH \u306e\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3067\u306f\u7121\u3044\u7248\u3067\u3059\u306d\u3002\nRedis\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d1\u30bf\u30fc\u30f3 - \u304a\u305d\u3089\u304f\u306f\u305d\u308c\u3055\u3048\u3082\u5e73\u51e1\u306a\u65e5\u3005\n\nBRPOPLPUSH\u306f\u30b8\u30e7\u30d6\u30ad\u30e5\u30fc\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u308b\u4e0a\u3067\u6709\u7528\u3067\u3059\u3002\u30ea\u30b9\u30c8\u306b\u30b8\u30e7\u30d6\u304c\u6295\u5165\u3055\u308c\u308b\u307e\u3067\u5f85\u3061\u53d7\u3051\u3066\u3001\u30b8\u30e7\u30d6\u304c\u6295\u5165\u3055\u308c\u305f\u3089\u3001\u30b8\u30e7\u30d6\u3092\u53d6\u5f97\u3057\u3064\u3064\u3001\u5225\u306e\u30ea\u30b9\u30c8\u306b\u5b9f\u884c\u4e2d\u306e\u30b8\u30e7\u30d6\u3068\u3057\u3066\u6295\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002\u30b8\u30e7\u30d6\u306e\u5b9f\u884c\u304c\u7d42\u308f\u3063\u305f\u3089\u3001LREM\u30b3\u30de\u30f3\u30c9\u3092\u5229\u7528\u3057\u3066\u3001\u5b9f\u884c\u4e2d\u30b8\u30e7\u30d6\u306e\u30ea\u30b9\u30c8\u304b\u3089\u5f53\u8a72\u30b8\u30e7\u30d6\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\n\u4e0a\u8a18\u8a18\u4e8b\u304b\u3089\u306e\u5f15\u7528\u3067\u3059\u304c\u3001\u307b\u307c\u3053\u306e\u901a\u308a\u306e\u5b9f\u88c5\u3067\u3059\u3002\nhttps://github.com/TEA-ebook/sidekiq-reliable-fetch/blob/master/lib/sidekiq/reliable_fetcher.rb\n\nsidekiq-reliable-fetch/lib/sidekiq/reliable_fetcher.rb\nmodule Sidekiq\n  class ReliableFetcher\n    WORKING_QUEUE = 'working'\n\n    def retrieve_work\n      clean_working_queues! if @cleaning_interval != -1 && @nb_fetched_jobs >= @cleaning_interval\n\n      @queues_size.times do\n        queue = @queues_iterator.next\n\n        # \u3053\u3053\u3067\u306f rpoplpush\n        work = Sidekiq.redis { |conn| conn.rpoplpush(queue, \"#{queue}:#{WORKING_QUEUE}\") }\n\n        if work\n          @nb_fetched_jobs += 1\n          return UnitOfWork.new(queue, work)\n        end\n      end\n\n      # We didn't find a job in any of the configured queues. Let's sleep a bit\n      # to avoid uselessly burning too much CPU\n      sleep(IDLE_TIMEOUT)\n\n      nil\n    end\n\n    UnitOfWork = Struct.new(:queue, :message) do\n      def acknowledge\n\n        # \u3053\u3053\u3067 lrem\n        Sidekiq.redis { |conn| conn.lrem(\"#{queue}:#{WORKING_QUEUE}\", 1, message) }\n      end\n\n      def queue_name\n        queue.gsub(/.*queue:/, '')\n      end\n\n      def requeue\n        Sidekiq.redis do |conn|\n          conn.pipelined do\n            conn.lpush(queue, message)\n            conn.lrem(\"#{queue}:#{WORKING_QUEUE}\", 1, message)\n          end\n        end\n      end\n    end\n\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u95a2\u4fc2\u3057\u305d\u3046\u306a\u500b\u6240\u306e\u307f\u629c\u7c8b\u3057\u3066\u307e\u3059\u3002\n\u4e0a\u8a18\u8a18\u4e8b\u306e\u5185\u5bb9\u901a\u308a\u3067\u3059\u304c\u3001 #retrieve_work \u3064\u307e\u308a\u30b8\u30e7\u30d6\u306e\u53d6\u5f97\u90e8\u5206\u3067\u306f rpoplpush \u3092\u4f7f\u3063\u3066 working \u30ad\u30e5\u30fc\u306b\u53d6\u5f97\u3057\u305f\u30b8\u30e7\u30d6\u3092\u5165\u308c\u3066\u304a\u308a\u3001UnitOfWork#acknowledge \u3064\u307e\u308a\u51e6\u7406\u5b8c\u4e86\u6642\u3067\u306f lem \u3067 working \u30ad\u30e5\u30fc\u304b\u3089\u53d6\u308a\u9664\u3044\u3066\u3044\u307e\u3059\u3002\nSidekiq Pro \u306e\u8aac\u660e\u306b\u3082\u30b9\u30b1\u30fc\u30eb\u3057\u3065\u3089\u3044\u65b9\u6cd5\u3068\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u3053\u306e\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u3092\u898b\u3066\u3082\u306a\u304b\u306a\u304b\u3057\u3093\u3069\u305d\u3046\u3067\u3059\u306d\u3002\u3002\nBRPOP \u3068\u9055\u3063\u3066\u8907\u6570\u306e\u30ad\u30e5\u30fc\u304b\u3089 1 \u30b3\u30de\u30f3\u30c9\u3067\u53d6\u5f97\u3067\u304d\u306a\u3044\u304b\u3089\u30eb\u30fc\u30d7\u3082\u767a\u751f\u3059\u308b\u3057\u3001\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u51e6\u7406\u3092 #retrieve_work \u306e\u5148\u982d\u3067\u3084\u308b\u306e\u3082\u306a\u3093\u3068\u3082\u3002\u3002\n\nsidekiq-limit_fetch\nbrainopia/sidekiq-limit_fetch\n\u30ad\u30e5\u30fc\u6bce\u306b\u540c\u6642\u5b9f\u884c\u6570\u306e\u5236\u5fa1\u3092\u53ef\u80fd\u306b\u3059\u308b\u3082\u306e\u3067\u3059\u306d\u3002\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u6570\u3092\u591a\u304f\u4f7f\u3048\u308b\u3082\u306e\u3068\u3042\u307e\u308a\u4f7f\u3048\u306a\u3044\u3082\u306e\u304c\u5171\u5b58\u3059\u308b\u30a2\u30d7\u30ea\u3067\u4f7f\u3063\u305f\u308a\u3057\u307e\u3057\u305f\u3002\n\n\u305d\u3082\u305d\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u306e Sidekiq \u3067\u30ad\u30e5\u30fc\u6bce\u306e\u540c\u6642\u5b9f\u884c\u6570\u5236\u5fa1\u304c\u3067\u304d\u306a\u3044\u306e\u306f\u306a\u305c\uff1f\nSidekiq \u306e\u8a2d\u5b9a\u3067\u306f concurrency \u306e\u4e00\u3064\u306e\u8a2d\u5b9a\u3057\u304b\u3067\u304d\u305a\u3001\u5404\u30ad\u30e5\u30fc\u306f\u91cd\u307f\u3057\u304b\u6c7a\u3081\u3089\u308c\u307e\u305b\u3093\u3002\n\u5b9f\u306f Sidekiq \u306f\u5404\u30ad\u30e5\u30fc\u3068\u3044\u3046\u3082\u306e\u306b\u307b\u307c\u7121\u95a2\u5fc3\u3067\u3042\u308a\u3001\u91cd\u307f\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5358\u7d14\u306a\u5b9f\u88c5\u3067\u3059\u3002\nhttps://github.com/mperham/sidekiq/blob/master/lib/sidekiq/cli.rb#L395-L400\nmodule Sidekiq\n  class CLI\n    # \u7701\u7565\n    def parse_config(cfile)\n      opts = {}\n      if File.exist?(cfile)\n        opts = YAML.load(ERB.new(IO.read(cfile)).result) || opts\n        opts = opts.merge(opts.delete(environment) || {})\n\n        parse_queues(opts, opts.delete(:queues) || [])\n      else\n        # \u7701\u7565\n    end\n\n    def parse_queues(opts, queues_and_weights)\n      queues_and_weights.each { |queue_and_weight| parse_queue(opts, *queue_and_weight) }\n    end\n\n    # [default, 30] \u307f\u305f\u3044\u306a\u5f62\u3067\u6e21\u3055\u308c\u308b\u306e\u3067\u3001 q \u306b\u30ad\u30e5\u30fc\u540d\u3001weight \u306b\u6570\u5024\u304c\u5165\u308b\n    def parse_queue(opts, q, weight=nil)\n      [weight.to_i, 1].max.times do\n       (opts[:queues] ||= []) << q\n      end\n      opts[:strict] = false if weight.to_i > 0\n    end\n\n\u898b\u3066\u306e\u901a\u308a\u3067\u3001queues \u306b\u6307\u5b9a\u3055\u308c\u305f\u914d\u5217\u5f62\u5f0f\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5143\u306b weight \u306b\u5fdc\u3058\u3066 queue \u540d\u3092\u5897\u3084\u3057\u305f\u914d\u5217\u306b\u5909\u3048\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\nsidekiq.yml\n:queues:\n  - [\"foo\", 1]\n  - [\"bar\", 2]\n  - [\"xyzzy\", 3]\n\n\n# parse \u5f8c\u306e\u914d\u5217\nopts[:queues]\n #=> ['foo', 'bar', 'bar', 'xyzzy', 'xyzzy', 'xyzzy']\n\n\u3053\u308c\u3092 #retrieve_work \u3067 shuffle \u3057\u3066\u53d6\u5f97\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u304c\u91cd\u307f\u306e\u5b9f\u614b\u3067\u3059\u3002\n\u5c11\u3057\u8a71\u304c\u305d\u308c\u307e\u3057\u305f\u304c\u3001OSS \u7248\u306e Sidekiq \u306f\u500b\u5225\u306e\u30ad\u30e5\u30fc\u306b\u306f\u95a2\u5fc3\u304c\u7121\u304f\u3001\u307e\u305f\u3001\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u304a\u4ed5\u4e8b\u6570\u3059\u3089\u628a\u63e1\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\uff08\u52d5\u4f5c\u3057\u3066\u3044\u308b worker \u6570\u306f\u5206\u304b\u308b\u306e\u3067\u3001\u305d\u308c\u3067\u628a\u63e1\u3067\u304d\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u306e\u30ad\u30e5\u30fc\u306e\u51e6\u7406\u304b\u307e\u3067\u306f\u5206\u304b\u308a\u307e\u305b\u3093\uff09\n\n\u3069\u3046\u3084\u3063\u3066\u30ad\u30e5\u30fc\u6bce\u306e\u540c\u6642\u5b9f\u884c\u5236\u5fa1\u3092\u3059\u308b\u304b\uff1f\n\u8003\u3048\u65b9\u81ea\u4f53\u306f\u7c21\u5358\u3067\u3059\u3002\n\n\u500b\u5225\u306e\u30ad\u30e5\u30fc\u306e\u73fe\u5728\u5b9f\u884c\u6570\u3092\u628a\u63e1\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\nRedis \u304b\u3089\u306e\u53d6\u5f97\u6642\u306b\u5b9f\u884c\u6570\u304c\u4e0a\u9650\u306b\u9054\u3057\u3066\u3044\u306a\u3044\u30ad\u30e5\u30fc\u304b\u3089\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3059\u308b\n\n\u3067\u306f\u3001\u305d\u308c\u3092 sidekiq-limit_fetch \u304c\u3069\u3046\u3084\u3063\u3066\u5b9f\u73fe\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\nhttps://github.com/brainopia/sidekiq-limit_fetch/blob/master/lib/sidekiq/limit_fetch.rb\n\nsidekiq-limit_fetch/lib/sidekiq/limit_fetch.rb\nmodule Sidekiq::LimitFetch\n  def retrieve_work\n    queue, job = redis_brpop(Queues.acquire)\n    Queues.release_except(queue)\n    UnitOfWork.new(queue, job) if job\n  end\n\n\nhttps://github.com/brainopia/sidekiq-limit_fetch/blob/master/lib/sidekiq/limit_fetch/unit_of_work.rb\n\nsidekiq-limit_fetch/lib/sidekiq/limit_fetch/unit_of_work.rb\nmodule Sidekiq\n  class LimitFetch::UnitOfWork < BasicFetch::UnitOfWork\n    def initialize(queue, job)\n      super\n      redis_retryable { Queue[queue_name].increase_busy }\n    end\n\n    def acknowledge\n      redis_retryable { Queue[queue_name].decrease_busy }\n      redis_retryable { Queue[queue_name].release }\n    end\n\n    def requeue\n      super\n      acknowledge\n    end\n  end\nend\n\n\n\u3055\u3066\u3001\u7279\u7b46\u3059\u3079\u304d\u306f UnitOfWork \u306e\u65b9\u3067\u3059\u3002\n#initialize \u3064\u307e\u308a\u3001Fetcher \u3067\u30b8\u30e7\u30d6\u3092 Redis \u304b\u3089\u53d6\u5f97\u3057\u751f\u6210\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067 Queue[queue_name].increase_busy \u304a\u305d\u3089\u304f\u306f\u53d6\u5f97\u3057\u305f\u30ad\u30e5\u30fc\u540d\u306e busy \u6570 (Sidekiq \u306f\u5b9f\u884c\u4e2d\u6570\u3092 busy \u3067\u8868\u3059\uff09 \u3092\u5897\u3084\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066 #acknowledge \u3064\u307e\u308a\u53d6\u5f97\u3057\u305f\u30b8\u30e7\u30d6\u306e\u51e6\u7406\u5b8c\u4e86\u6642\u306b Queue[queue_name].decrease_busy \u3057\u3066 busy \u6570\u3092\u6e1b\u3089\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3067\u3001\u5148\u307b\u3069\u793a\u3057\u305f\u300c\u500b\u5225\u306e\u30ad\u30e5\u30fc\u306e\u73fe\u5728\u5b9f\u884c\u6570\u3092\u628a\u63e1\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u300d\u304c\u5b9f\u73fe\u3067\u304d\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\nsidekiq-limit_fetch \u306f\u4ed6\u306b\u3082\u591a\u304f\u306e\u4e8b\u3092\u3084\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u3053\u308c\u4ee5\u4e0a\u306f\u8e0f\u307f\u8fbc\u307f\u307e\u305b\u3093\u304c\u3001Fetcher \u3092\u7f6e\u304d\u63db\u3048\u3066\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n\u5168\u4f53\u306e\u307e\u3068\u3081\nSidekiq \u306f\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u305d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4e2d\u6838\u3092\u62c5\u3046\u4e8b\u3082\u51fa\u3066\u304f\u308b\u305f\u3081\u3001\u5b89\u6613\u306b\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u5c0e\u5165\u3057\u3066\u4e8b\u6545\u306b\u306a\u308b\u3068\u5927\u60e8\u4e8b\u306b\u306a\u308a\u304b\u306d\u307e\u305b\u3093\u3002\n\u4eca\u56de\u7d39\u4ecb\u3057\u305f Custom \u306e Fetcher \u3092\u4f7f\u3063\u305f\u62e1\u5f35\u3084 middleware \u3092\u4f7f\u3063\u305f\u62e1\u5f35\u65b9\u6cd5\u3092\u982d\u306b\u5165\u308c\u3066\u304a\u304f\u3068\u3001\u5c0e\u5165\u3057\u3088\u3046\u3068\u3059\u308b\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u5185\u5bb9\u3092\u628a\u63e1\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064\u3053\u3068\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u52a0\u3048\u3066\u3001Redis \u306e\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3082\u982d\u306b\u5165\u308c\u3066\u304a\u304f\u3068\u3082\u3063\u3068\u6357\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n## Sidekiq \u306e\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\n\nSidekiq \u306e\u6a5f\u80fd\u62e1\u5f35\u3092\u8003\u3048\u308b\u6642\u306b\u3001\u771f\u3063\u5148\u306b\u691c\u8a0e\u3055\u308c\u308b\u306e\u304c Sidekiq middleware \u3067\u3059\u3002\n\n[Middleware - mperham/sidekiq Wiki](https://github.com/mperham/sidekiq/wiki/Middleware)\n\nmiddleware \u306f Client Side (`#perform_asyn` \u3092\u547c\u3073\u51fa\u3059\u65b9\uff09 \u3068 Server Side (\u30b9\u30ec\u30c3\u30c9\u30d9\u30fc\u30b9\u3067\u52d5\u4f5c\u3059\u308b Worker \u306e\u65b9) \u306e\u4e21\u65b9\u3092 Rack \u3084 Faraday \u306e\u3088\u3046\u306b `#call` \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u6301\u3063\u305f\u30af\u30e9\u30b9\u3092\u767b\u9332\u3059\u308b\u3060\u3051\u3067\u3001\u305d\u306e\u6319\u52d5\u3092\u62e1\u5f35\u3067\u304d\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001middleware \u306f Decorator \u30d1\u30bf\u30fc\u30f3\u306e\u3088\u3046\u306a\u3082\u306e\u306a\u306e\u3067\u3001Sidekiq \u306e\u5185\u90e8\u306e\u51e6\u7406\u306b\u5927\u304d\u304f\u4ecb\u5165\u3067\u304d\u308b\u8a33\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n### Redis \u304b\u3089\u306e Job \u53d6\u5f97\u51e6\u7406\u306b\u7528\u610f\u3055\u308c\u305f\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\n\n\u304a\u305d\u3089\u304f\u672c\u5bb6\u3068\u3057\u3066 Pro \u3084 Enterp\brise \u7248\u306e\u62e1\u5f35\u3092\u3084\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u7528\u610f\u3057\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u304c\uff08Wiki \u3067\u6587\u66f8\u5316\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\u306f\u898b\u3048\u306a\u304b\u3063\u305f\u306e\u3067\uff09\u3001Sidekiq \u306b\u306f Redis \u304b\u3089\u306e Job \u53d6\u5f97\u51e6\u7406\u3092\u7f6e\u304d\u63db\u3048\u308b\u30dd\u30a4\u30f3\u30c8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/mperham/sidekiq/blob/master/lib/sidekiq/processor.rb#L38\n\n```rb:sidekiq/lib/sidekiq/processor.rb\nmodule Sidekiq\n  class Processor\n\n    include Util\n\n    attr_reader :thread\n    attr_reader :job\n\n    def initialize(mgr)\n      @mgr = mgr\n      @down = false\n      @done = false\n      @job = nil\n      @thread = nil\n\n      # options[:fetch] \u306e\u65b9\u3092\u512a\u5148\u3057\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n      @strategy = (mgr.options[:fetch] || Sidekiq::BasicFetch).new(mgr.options)\n\n      @reloader = Sidekiq.options[:reloader]\n      @executor = Sidekiq.options[:executor]\n    end\n```\n\n\u4e0a\u8a18\u306f `Processor` \u3068\u3044\u3046\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3059\u304c\u3001Sidekiq \u5185\u306b\u304a\u3044\u3066\u306f\u3001\u5404\u30b9\u30ec\u30c3\u30c9\u6bce\u306e\u51e6\u7406\u3092\u62c5\u3063\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u3053\u306e options \u306e\u8a2d\u5b9a\u306f\u7c21\u5358\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b middleware \u3092\u767b\u9332\u3059\u308b\u6642\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u6642\u306b\u6e21\u305b\u3070\u826f\u3044\u3060\u3051\u3067\u3059\u3002\n\n```rb\nSidekiq.configure_server do |config|\n  config.options[:fetch] = HogeFetcher\nend\n```\n\n\u4ee5\u964d\u3067\u306f\u3001\u3053\u306e Fetcher \u306e\u62e1\u5f35\u3092\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n## Fetcher \u3092\u3069\u306e\u3088\u3046\u306b\u62e1\u5f35\u3059\u308b\u304b\uff1f\n\n\u305d\u308c\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u3001\u5148\u307b\u3069\u306e `Processor` \u3092\u66f4\u306b\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n### Fetch \u90e8\u5206\u3092\u898b\u308b\n\n```rb\nmodule Sidekiq\n  class Processor\n    # \u7701\u7565\n\n    def run\n      begin\n        while !@done\n          process_one\n        end\n        @mgr.processor_stopped(self)\n      rescue Sidekiq::Shutdown\n        @mgr.processor_stopped(self)\n      rescue Exception => ex\n        @mgr.processor_died(self, ex)\n      end\n    end\n\n    def process_one\n      @job = fetch\n      process(@job) if @job\n      @job = nil\n    end\n\n    def fetch\n      j = get_one\n      if j && @done\n        j.requeue\n        nil\n      else\n        j\n      end\n    end\n\n    def get_one\n      begin\n        work = @strategy.retrieve_work\n        (logger.info { \"Redis is online, #{Time.now - @down} sec downtime\" }; @down = nil) if @down\n        work\n      rescue Sidekiq::Shutdown\n      rescue => ex\n        handle_fetch_exception(ex)\n      end\n    end\n```\n\n\u5148\u307b\u3069\u306e `#initialize` \u3067 `Fetcher` \u304c `@strategy` \u3068\u3044\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u5165\u308c\u3089\u308c\u3066\u3044\u305f\u306e\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n`Processor` \u306f `#run` \u306e\u5185\u90e8\u3067\u30eb\u30fc\u30d7\u304c\u5b9f\u884c\u3055\u308c\u3001\u3053\u308c\u306f Sidekiq \u306b\u505c\u6b62\u547d\u4ee4\u304c\u51fa\u308b\u307e\u3067\u7d9a\u304d\u307e\u3059\u3002\n\n\u305d\u3057\u3066 `#process_one` -> `#fetch` -> `#get_one` \u3068\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u3001 `#get_one` \u306e\u4e2d\u3067\u3088\u3046\u3084\u304f `@starategy.retrieve_work` \u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u305d\u3053\u3067\u53d6\u5f97\u3055\u308c\u305f `work` \u3092 `#process` \u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3057\u3066\u3001\u304a\u305d\u3089\u304f `Sidekiq::Worker` \u306e\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\uff08\u3053\u3053\u306f\u5f8c\u3067\u898b\u3066\u3044\u304d\u307e\u3059\u3002\uff09\n\n#### BasicFetch#retrieve_work \u3092\u8aad\u3080\n\n\u3067\u306f\u3001\u3053\u3053\u3067 `Fetcher` \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3067\u3042\u308b `BasicFetch` \u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\nhttps://github.com/mperham/sidekiq/blob/master/lib/sidekiq/fetch.rb\n\n```rb:sidekiq/lib/sidekiq/fetch.rb\nmodule Sidekiq\n  class BasicFetch\n    # We want the fetch operation to timeout every few seconds so the thread\n    # can check if the process is shutting down.\n    TIMEOUT = 2\n\n    UnitOfWork = Struct.new(:queue, :job) do\n      def acknowledge\n        # nothing to do\n      end\n\n      def queue_name\n        queue.sub(/.*queue:/, ''.freeze)\n      end\n\n      def requeue\n        Sidekiq.redis do |conn|\n          conn.rpush(\"queue:#{queue_name}\", job)\n        end\n      end\n    end\n\n    def retrieve_work\n      work = Sidekiq.redis { |conn| conn.brpop(*queues_cmd) }\n      UnitOfWork.new(*work) if work\n    end\n```\n\n\u3053\u3053\u307e\u3067\u3067\u5fc5\u8981\u306a\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u306b\u9650\u5b9a\u3057\u3066\u8ee2\u8f09\u3057\u3066\u3044\u307e\u3059\u3002 `queues_cmd` \u306f\u3053\u3053\u3067\u306f\u3001 Sidekiq \u306b\u8a2d\u5b9a\u3057\u305f queue \u306e\u4e00\u89a7\u306e\u540d\u524d\u304c\u8fd4\u3063\u3066\u304d\u3066\u3044\u308b\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u7279\u306b\u4f55\u3082\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3051\u308c\u3070 `default` \u30ad\u30e5\u30fc\u3060\u3051\u304c\u8fd4\u3063\u3066\u304f\u308b\u306f\u305a\u3067\u3059\uff09\n\n`#retrieve_work` \u3067\u306f Redis \u306e `BRPOP` \u3092\u4f7f\u3063\u3066\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3057\u3064\u3064\u3001\u30ea\u30b9\u30c8\u304b\u3089\u4e00\u3064 Job \u3092\u53d6\u5f97\u3059\u308b\u3068\u3044\u3046\u5358\u7d14\u306a\u51e6\u7406\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u305d\u3053\u3067\u8fd4\u3063\u3066\u304d\u305f Job \uff08\u30b3\u30fc\u30c9\u4e0a\u306f `work`) \u3092 `UnitOfWork` \u3067\u5305\u3093\u3067\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n### Processor#process \u3068 UnitOfWork \u306e\u5f79\u5272\u3092\u898b\u308b\n\n\u3067\u306f\u3001\u518d\u3073 `Processor` \u306b\u623b\u3063\u3066\u3001 \u53d6\u5f97\u3055\u308c\u305f `work` \u304c `#process` \u306b\u6e21\u3055\u308c\u3066\u4ee5\u964d\u306e\u5185\u5bb9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```rb\nmodule Sidekiq\n  class Processor\n    # \u7701\u7565\n\n    def process(work)\n      jobstr = work.job\n      queue = work.queue_name\n\n      ack = false\n      begin\n\n        # perform_async \u3092 call \u3057\u305f\u6642\u306e Worker \u30af\u30e9\u30b9\u540d\u3084\u5f15\u6570\u306e\u60c5\u5831\u3092\u8aad\u307f\u51fa\u3059\n        job_hash = Sidekiq.load_json(jobstr)\n        @reloader.call do\n          klass  = job_hash['class'.freeze].constantize\n          worker = klass.new\n          worker.jid = job_hash['jid'.freeze]\n\n          stats(worker, job_hash, queue) do\n\n            # execute_job \u306e\u524d\u5f8c\u3092 middleware \u306e\u5b9f\u884c\u3067\u56f2\u3080\u3053\u3068\u3067 middleware \u306e call \u51e6\u7406\u3092\u5b9f\u73fe\u3057\u3066\u3044\u308b\n            # \u30b3\u30e1\u30f3\u30c8\u306b\u3042\u308b\u901a\u308a\u3060\u304c\u3001middleware \u306e\u5b9f\u884c\u3067\u304a\u4ed5\u4e8b\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\n            # ack \u5909\u6570\u3067\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3057\u3066\u3044\u308b\u3002\n            Sidekiq.server_middleware.invoke(worker, job_hash, queue) do\n\n              @executor.call do\n                # Only ack if we either attempted to start this job or\n                # successfully completed it. This prevents us from\n                # losing jobs if a middleware raises an exception before yielding\n                ack = true\n                execute_job(worker, cloned(job_hash['args'.freeze]))\n              end\n            end\n          end\n          ack = true\n        end\n      rescue Sidekiq::Shutdown\n        # Had to force kill this job because it didn't finish\n        # within the timeout.  Don't acknowledge the work since\n        # we didn't properly finish it.\n        ack = false\n      rescue Exception => ex\n        handle_exception(ex, { :context => \"Job raised exception\", :job => job_hash, :jobstr => jobstr })\n        raise\n      ensure\n\n        # ack \u304c true \u306e\u5834\u5408\u306e\u307f UnitOfWork \u306e #acknowledge \u304c\u547c\u3073\u51fa\u3055\u308c\u308b\n        work.acknowledge if ack\n      end\n    end\n\n    def execute_job(worker, cloned_args)\n\n      # \u3053\u308c\u306f\u7686\u3055\u3093\u304c\u5b9f\u88c5\u3059\u308b Sidekiq::Worker \u304c include \u3055\u308c\u305f\u30af\u30e9\u30b9\u3067\u3059\n      worker.perform(*cloned_args)\n    end\n```\n\n\u7d30\u304b\u3044\u90e8\u5206\u306f\u65e5\u672c\u8a9e\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304d\u8db3\u3057\u3066\u3044\u307e\u3059\u304c\u3001 `#process` \u304c\n\n1. \u5b9f\u884c\u3059\u308b Worker \u30af\u30e9\u30b9\u3084\u5f15\u6570\u60c5\u5831\u3092\u8aad\u307f\u51fa\u3057\n2. server_middleware \u3092\u5b9f\u884c\u3057\u3064\u3064\n3. `Worker#perform` \u3092\u5b9f\u884c\u3059\u308b\n\n\u3068\u3044\u3046\u69d8\u5b50\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u30b3\u30e1\u30f3\u30c8\u306b\u306f `ack` \u5909\u6570\u306b\u95a2\u3057\u3066\u306e\u30b3\u30e1\u30f3\u30c8\u3092\u8a18\u8ff0\u3057\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u306b\u306f\u3053\u306e\u6642\u70b9\u3067 \uff12 \u3064\u306e\u610f\u5473\u304c\u3042\u308a\u307e\u3059\u3002\n\n- `BasicFetch::UnitOfWork` \u306e `#acknowledge` \u306e\u5b9f\u88c5\u306f\u7a7a\u306a\u306e\u3067\u3001\u5b9f\u8cea\u4f55\u3082\u3057\u306a\u3044\u3002\n  - \u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3063\u3066\u3088\u3055\u305d\u3046\n- `server_middleware` \u306b\u3088\u3063\u3066\u304a\u4ed5\u4e8b\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u3092\u8003\u616e\u3057\u3066 `ack` \u5909\u6570\u3067\u306e\u7ba1\u7406\u304c\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u3053\u306e\u5b9f\u88c5\u3092\u898b\u308b\u9650\u308a\u305d\u3053\u306e\u30b1\u30a2\u306f\u3055\u308c\u3066\u3044\u306a\u3044\n  - OSS \u7248\u306e Sidekiq \u306f server_middleware \u306e\u6319\u52d5\u3067\u304a\u4ed5\u4e8b\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n  - \u3053\u308c\u306f Pro \u7248\u3067\u3044\u304f\u3064\u304b\u306e\u624b\u6cd5\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3059\u3002\n  - https://github.com/mperham/sidekiq/wiki/Pro-Reliability-Server\n\n\u3088\u3063\u3066\u3001 Fetcher \u3068\u5171\u306b\u3001\u305d\u306e\u51fa\u529b\u3067\u3042\u308b `UnitOfWork` \u3082\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n### \u3069\u306e\u3088\u3046\u306b\u62e1\u5f35\u3059\u308b\u304b\u306e\u307e\u3068\u3081\n\n`Processor` \u3068\u3001Fetcher \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3067\u3042\u308b `BasicFetch`\u3001\u305d\u3057\u3066 `UnitOfWork` \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3067\u3042\u308b `BasicFetch::UnitOfWork` \u3092\u898b\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u4e00\u3064\u306e Job \u304c Redis \u304b\u3089\u53d6\u308a\u51fa\u3055\u308c\u3066\u304b\u3089\u3001\u51e6\u7406\u5b8c\u4e86\u306b\u3044\u305f\u308b\u307e\u3067\u306e\u9593\u3067\u3001\u3069\u306e\u3088\u3046\u306a\u51e6\u7406\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u304b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u305d\u308c\u3089\u3092\u6301\u3063\u305f\u4e0a\u3067\u3001\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\u306f\u30d1\u30d6\u30ea\u30c3\u30af\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3060\u3051\u3092\u898b\u308b\u3068\u5927\u304d\u304f\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\n- Fetcher \u306e `#retrieve_work` \u306e\u5909\u66f4\n  - \u305d\u3082\u305d\u3082 `Processor` \u5185\u3067 Strategy \u3068\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u69d8\u3005\u5909\u66f4\u304c\u8003\u3048\u3089\u308c\u305d\u3046\n- UnitOfWork \u306e `#acknowledge` \u306e\u547c\u3073\u51fa\u3057\u3092\u8003\u616e\u3057\u305f\u3082\u306e\n  - \u300c\u51e6\u7406\u304c\u7d42\u4e86\u3057\u305f\u300d\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u5358\u4f53\u3067\u3082\u5f8c\u51e6\u7406\u306b\u4f7f\u3048\u307e\u3059\u3057\u3001`UnitOfWork#initialize` \u306e\u51e6\u7406\u3068\u7d44\u307f\u5408\u308f\u305b\u308c\u3070\u524d\u51e6\u7406\u3068\u306e\u9023\u643a\u3082\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u3067\u306f\u3001\u3053\u306e\u6295\u7a3f\u306e\u7de0\u3081\u304f\u304f\u308a\u3068\u3057\u3066\u3001\u3053\u306e\u62e1\u5f35\u3092\u4f7f\u3063\u305f gem \u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u3066\u7d42\u308f\u308a\u306b\u3057\u307e\u3059\u3002\n\n## Fetcher \u3092\u62e1\u5f35\u3057\u3066\u3044\u308b gem\n\n\u3068\u3044\u3046\u304b\u3001Sidekiq \u95a2\u9023\u306e gem \u3067\u306f\u3057\u3054\u304f\u5f53\u305f\u308a\u524d\u306e\u62e1\u5f35\u30dd\u30a4\u30f3\u30c8\u306e\u3088\u3046\u3067\u3001\u304b\u306a\u308a\u591a\u304f\u898b\u3064\u304b\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u5b9f\u88c5\u306e\u8aac\u660e\u304c\u3067\u304d\u305d\u3046\u306a\u3082\u306e\u3060\u3051\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3059\u3002\n\n### sidekiq-reliable-fetch\n\n[TEA-ebook/sidekiq-reliable-fetch](https://github.com/TEA-ebook/sidekiq-reliable-fetch)\n\n\u3053\u308c\u306f\u3001\u5148\u307b\u3069\u306e\u8aac\u660e\u6642\u306b\u554f\u984c\u3068\u3057\u3066\u3042\u3052\u305f\u3001\u300c`server_middleware` \u306b\u3088\u3063\u3066\u3001\u304a\u4ed5\u4e8b\u304c\u5931\u308f\u308c\u308b\u53ef\u80fd\u6027\u300d\u306b\u5bfe\u3057\u3066\u306e\u4e00\u3064\u306e\u89e3\u3067\u3042\u308a\u3001Sidekiq Pro \u3067\u63d0\u4f9b\u3055\u308c\u308b [reliable_fetch](https://github.com/mperham/sidekiq/wiki/Pro-Reliability-Server#reliable_fetch) \u306e\u6587\u66f8\u60c5\u5831\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\nRPOPLPUSH \u3068\u3044\u3046\u300c\u30ad\u30e5\u30fc A \u304b\u30891\u4ef6\u30ea\u30b9\u30c8\u304b\u3089\u53d6\u5f97\u3057\u305f\u3089\u3001\u540c\u6642\u306b\u305d\u306e 1 \u4ef6\u3092\u30ad\u30e5\u30fc B \u306b\u5165\u308c\u3066\u304b\u3089\u8fd4\u3059\u300d\u3068\u3044\u3046 Redis \u306e\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3061\u3087\u3046\u3069\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b `BRPOPLPUSH` \u306e\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3067\u306f\u7121\u3044\u7248\u3067\u3059\u306d\u3002\n\n[Redis\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d1\u30bf\u30fc\u30f3 - \u304a\u305d\u3089\u304f\u306f\u305d\u308c\u3055\u3048\u3082\u5e73\u51e1\u306a\u65e5\u3005](http://www.songmu.jp/riji/entry/2016-12-12-redis-application-pattern.html)\n\n> BRPOPLPUSH\u306f\u30b8\u30e7\u30d6\u30ad\u30e5\u30fc\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u308b\u4e0a\u3067\u6709\u7528\u3067\u3059\u3002\u30ea\u30b9\u30c8\u306b\u30b8\u30e7\u30d6\u304c\u6295\u5165\u3055\u308c\u308b\u307e\u3067\u5f85\u3061\u53d7\u3051\u3066\u3001\u30b8\u30e7\u30d6\u304c\u6295\u5165\u3055\u308c\u305f\u3089\u3001\u30b8\u30e7\u30d6\u3092\u53d6\u5f97\u3057\u3064\u3064\u3001\u5225\u306e\u30ea\u30b9\u30c8\u306b\u5b9f\u884c\u4e2d\u306e\u30b8\u30e7\u30d6\u3068\u3057\u3066\u6295\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002\u30b8\u30e7\u30d6\u306e\u5b9f\u884c\u304c\u7d42\u308f\u3063\u305f\u3089\u3001LREM\u30b3\u30de\u30f3\u30c9\u3092\u5229\u7528\u3057\u3066\u3001\u5b9f\u884c\u4e2d\u30b8\u30e7\u30d6\u306e\u30ea\u30b9\u30c8\u304b\u3089\u5f53\u8a72\u30b8\u30e7\u30d6\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\n\u4e0a\u8a18\u8a18\u4e8b\u304b\u3089\u306e\u5f15\u7528\u3067\u3059\u304c\u3001\u307b\u307c\u3053\u306e\u901a\u308a\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\nhttps://github.com/TEA-ebook/sidekiq-reliable-fetch/blob/master/lib/sidekiq/reliable_fetcher.rb\n\n```rb:sidekiq-reliable-fetch/lib/sidekiq/reliable_fetcher.rb\nmodule Sidekiq\n  class ReliableFetcher\n    WORKING_QUEUE = 'working'\n\n    def retrieve_work\n      clean_working_queues! if @cleaning_interval != -1 && @nb_fetched_jobs >= @cleaning_interval\n\n      @queues_size.times do\n        queue = @queues_iterator.next\n\n        # \u3053\u3053\u3067\u306f rpoplpush\n        work = Sidekiq.redis { |conn| conn.rpoplpush(queue, \"#{queue}:#{WORKING_QUEUE}\") }\n\n        if work\n          @nb_fetched_jobs += 1\n          return UnitOfWork.new(queue, work)\n        end\n      end\n\n      # We didn't find a job in any of the configured queues. Let's sleep a bit\n      # to avoid uselessly burning too much CPU\n      sleep(IDLE_TIMEOUT)\n\n      nil\n    end\n\n    UnitOfWork = Struct.new(:queue, :message) do\n      def acknowledge\n\n        # \u3053\u3053\u3067 lrem\n        Sidekiq.redis { |conn| conn.lrem(\"#{queue}:#{WORKING_QUEUE}\", 1, message) }\n      end\n\n      def queue_name\n        queue.gsub(/.*queue:/, '')\n      end\n\n      def requeue\n        Sidekiq.redis do |conn|\n          conn.pipelined do\n            conn.lpush(queue, message)\n            conn.lrem(\"#{queue}:#{WORKING_QUEUE}\", 1, message)\n          end\n        end\n      end\n    end\n```\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u95a2\u4fc2\u3057\u305d\u3046\u306a\u500b\u6240\u306e\u307f\u629c\u7c8b\u3057\u3066\u307e\u3059\u3002\n\n\u4e0a\u8a18\u8a18\u4e8b\u306e\u5185\u5bb9\u901a\u308a\u3067\u3059\u304c\u3001 `#retrieve_work` \u3064\u307e\u308a\u30b8\u30e7\u30d6\u306e\u53d6\u5f97\u90e8\u5206\u3067\u306f `rpoplpush` \u3092\u4f7f\u3063\u3066 working \u30ad\u30e5\u30fc\u306b\u53d6\u5f97\u3057\u305f\u30b8\u30e7\u30d6\u3092\u5165\u308c\u3066\u304a\u308a\u3001`UnitOfWork#acknowledge` \u3064\u307e\u308a\u51e6\u7406\u5b8c\u4e86\u6642\u3067\u306f `lem` \u3067 working \u30ad\u30e5\u30fc\u304b\u3089\u53d6\u308a\u9664\u3044\u3066\u3044\u307e\u3059\u3002\n\nSidekiq Pro \u306e\u8aac\u660e\u306b\u3082\u30b9\u30b1\u30fc\u30eb\u3057\u3065\u3089\u3044\u65b9\u6cd5\u3068\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u3053\u306e\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u3092\u898b\u3066\u3082\u306a\u304b\u306a\u304b\u3057\u3093\u3069\u305d\u3046\u3067\u3059\u306d\u3002\u3002\n`BRPOP` \u3068\u9055\u3063\u3066\u8907\u6570\u306e\u30ad\u30e5\u30fc\u304b\u3089 1 \u30b3\u30de\u30f3\u30c9\u3067\u53d6\u5f97\u3067\u304d\u306a\u3044\u304b\u3089\u30eb\u30fc\u30d7\u3082\u767a\u751f\u3059\u308b\u3057\u3001\u30af\u30ea\u30fc\u30cb\u30f3\u30b0\u51e6\u7406\u3092 `#retrieve_work` \u306e\u5148\u982d\u3067\u3084\u308b\u306e\u3082\u306a\u3093\u3068\u3082\u3002\u3002\n\n### sidekiq-limit_fetch\n\n[brainopia/sidekiq-limit_fetch](https://github.com/brainopia/sidekiq-limit_fetch)\n\n\u30ad\u30e5\u30fc\u6bce\u306b\u540c\u6642\u5b9f\u884c\u6570\u306e\u5236\u5fa1\u3092\u53ef\u80fd\u306b\u3059\u308b\u3082\u306e\u3067\u3059\u306d\u3002\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u6570\u3092\u591a\u304f\u4f7f\u3048\u308b\u3082\u306e\u3068\u3042\u307e\u308a\u4f7f\u3048\u306a\u3044\u3082\u306e\u304c\u5171\u5b58\u3059\u308b\u30a2\u30d7\u30ea\u3067\u4f7f\u3063\u305f\u308a\u3057\u307e\u3057\u305f\u3002\n\n#### \u305d\u3082\u305d\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u306e Sidekiq \u3067\u30ad\u30e5\u30fc\u6bce\u306e\u540c\u6642\u5b9f\u884c\u6570\u5236\u5fa1\u304c\u3067\u304d\u306a\u3044\u306e\u306f\u306a\u305c\uff1f\n\nSidekiq \u306e\u8a2d\u5b9a\u3067\u306f `concurrency` \u306e\u4e00\u3064\u306e\u8a2d\u5b9a\u3057\u304b\u3067\u304d\u305a\u3001\u5404\u30ad\u30e5\u30fc\u306f\u91cd\u307f\u3057\u304b\u6c7a\u3081\u3089\u308c\u307e\u305b\u3093\u3002\n\n\u5b9f\u306f Sidekiq \u306f\u5404\u30ad\u30e5\u30fc\u3068\u3044\u3046\u3082\u306e\u306b\u307b\u307c\u7121\u95a2\u5fc3\u3067\u3042\u308a\u3001\u91cd\u307f\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5358\u7d14\u306a\u5b9f\u88c5\u3067\u3059\u3002\n\nhttps://github.com/mperham/sidekiq/blob/master/lib/sidekiq/cli.rb#L395-L400\n\n```rb\nmodule Sidekiq\n  class CLI\n    # \u7701\u7565\n    def parse_config(cfile)\n      opts = {}\n      if File.exist?(cfile)\n        opts = YAML.load(ERB.new(IO.read(cfile)).result) || opts\n        opts = opts.merge(opts.delete(environment) || {})\n\n        parse_queues(opts, opts.delete(:queues) || [])\n      else\n        # \u7701\u7565\n    end\n\n    def parse_queues(opts, queues_and_weights)\n      queues_and_weights.each { |queue_and_weight| parse_queue(opts, *queue_and_weight) }\n    end\n\n    # [default, 30] \u307f\u305f\u3044\u306a\u5f62\u3067\u6e21\u3055\u308c\u308b\u306e\u3067\u3001 q \u306b\u30ad\u30e5\u30fc\u540d\u3001weight \u306b\u6570\u5024\u304c\u5165\u308b\n    def parse_queue(opts, q, weight=nil)\n      [weight.to_i, 1].max.times do\n       (opts[:queues] ||= []) << q\n      end\n      opts[:strict] = false if weight.to_i > 0\n    end\n```\n\n\u898b\u3066\u306e\u901a\u308a\u3067\u3001`queues` \u306b\u6307\u5b9a\u3055\u308c\u305f\u914d\u5217\u5f62\u5f0f\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5143\u306b weight \u306b\u5fdc\u3058\u3066 queue \u540d\u3092\u5897\u3084\u3057\u305f\u914d\u5217\u306b\u5909\u3048\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n```yaml:sidekiq.yml\n:queues:\n  - [\"foo\", 1]\n  - [\"bar\", 2]\n  - [\"xyzzy\", 3]\n```\n\n```rb\n# parse \u5f8c\u306e\u914d\u5217\nopts[:queues]\n #=> ['foo', 'bar', 'bar', 'xyzzy', 'xyzzy', 'xyzzy']\n```\n\n\u3053\u308c\u3092 `#retrieve_work` \u3067 shuffle \u3057\u3066\u53d6\u5f97\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u304c\u91cd\u307f\u306e\u5b9f\u614b\u3067\u3059\u3002\n\n\u5c11\u3057\u8a71\u304c\u305d\u308c\u307e\u3057\u305f\u304c\u3001OSS \u7248\u306e Sidekiq \u306f\u500b\u5225\u306e\u30ad\u30e5\u30fc\u306b\u306f\u95a2\u5fc3\u304c\u7121\u304f\u3001\u307e\u305f\u3001\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u304a\u4ed5\u4e8b\u6570\u3059\u3089\u628a\u63e1\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\uff08\u52d5\u4f5c\u3057\u3066\u3044\u308b worker \u6570\u306f\u5206\u304b\u308b\u306e\u3067\u3001\u305d\u308c\u3067\u628a\u63e1\u3067\u304d\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u306e\u30ad\u30e5\u30fc\u306e\u51e6\u7406\u304b\u307e\u3067\u306f\u5206\u304b\u308a\u307e\u305b\u3093\uff09\n\n#### \u3069\u3046\u3084\u3063\u3066\u30ad\u30e5\u30fc\u6bce\u306e\u540c\u6642\u5b9f\u884c\u5236\u5fa1\u3092\u3059\u308b\u304b\uff1f\n\n\u8003\u3048\u65b9\u81ea\u4f53\u306f\u7c21\u5358\u3067\u3059\u3002\n\n- \u500b\u5225\u306e\u30ad\u30e5\u30fc\u306e\u73fe\u5728\u5b9f\u884c\u6570\u3092\u628a\u63e1\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n- Redis \u304b\u3089\u306e\u53d6\u5f97\u6642\u306b\u5b9f\u884c\u6570\u304c\u4e0a\u9650\u306b\u9054\u3057\u3066\u3044\u306a\u3044\u30ad\u30e5\u30fc\u304b\u3089\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3059\u308b\n\n\u3067\u306f\u3001\u305d\u308c\u3092 `sidekiq-limit_fetch` \u304c\u3069\u3046\u3084\u3063\u3066\u5b9f\u73fe\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\nhttps://github.com/brainopia/sidekiq-limit_fetch/blob/master/lib/sidekiq/limit_fetch.rb\n\n```rb:sidekiq-limit_fetch/lib/sidekiq/limit_fetch.rb\nmodule Sidekiq::LimitFetch\n  def retrieve_work\n    queue, job = redis_brpop(Queues.acquire)\n    Queues.release_except(queue)\n    UnitOfWork.new(queue, job) if job\n  end\n```\n\nhttps://github.com/brainopia/sidekiq-limit_fetch/blob/master/lib/sidekiq/limit_fetch/unit_of_work.rb\n\n```rb:sidekiq-limit_fetch/lib/sidekiq/limit_fetch/unit_of_work.rb\nmodule Sidekiq\n  class LimitFetch::UnitOfWork < BasicFetch::UnitOfWork\n    def initialize(queue, job)\n      super\n      redis_retryable { Queue[queue_name].increase_busy }\n    end\n\n    def acknowledge\n      redis_retryable { Queue[queue_name].decrease_busy }\n      redis_retryable { Queue[queue_name].release }\n    end\n\n    def requeue\n      super\n      acknowledge\n    end\n  end\nend\n```\n\n\u3055\u3066\u3001\u7279\u7b46\u3059\u3079\u304d\u306f `UnitOfWork` \u306e\u65b9\u3067\u3059\u3002\n`#initialize` \u3064\u307e\u308a\u3001Fetcher \u3067\u30b8\u30e7\u30d6\u3092 Redis \u304b\u3089\u53d6\u5f97\u3057\u751f\u6210\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067 `Queue[queue_name].increase_busy` \u304a\u305d\u3089\u304f\u306f\u53d6\u5f97\u3057\u305f\u30ad\u30e5\u30fc\u540d\u306e `busy` \u6570 (Sidekiq \u306f\u5b9f\u884c\u4e2d\u6570\u3092 busy \u3067\u8868\u3059\uff09 \u3092\u5897\u3084\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066 `#acknowledge` \u3064\u307e\u308a\u53d6\u5f97\u3057\u305f\u30b8\u30e7\u30d6\u306e\u51e6\u7406\u5b8c\u4e86\u6642\u306b `Queue[queue_name].decrease_busy` \u3057\u3066 `busy` \u6570\u3092\u6e1b\u3089\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3067\u3001\u5148\u307b\u3069\u793a\u3057\u305f\u300c\u500b\u5225\u306e\u30ad\u30e5\u30fc\u306e\u73fe\u5728\u5b9f\u884c\u6570\u3092\u628a\u63e1\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u300d\u304c\u5b9f\u73fe\u3067\u304d\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\n`sidekiq-limit_fetch` \u306f\u4ed6\u306b\u3082\u591a\u304f\u306e\u4e8b\u3092\u3084\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u3053\u308c\u4ee5\u4e0a\u306f\u8e0f\u307f\u8fbc\u307f\u307e\u305b\u3093\u304c\u3001Fetcher \u3092\u7f6e\u304d\u63db\u3048\u3066\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n## \u5168\u4f53\u306e\u307e\u3068\u3081\n\nSidekiq \u306f\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u305d\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4e2d\u6838\u3092\u62c5\u3046\u4e8b\u3082\u51fa\u3066\u304f\u308b\u305f\u3081\u3001\u5b89\u6613\u306b\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u5c0e\u5165\u3057\u3066\u4e8b\u6545\u306b\u306a\u308b\u3068\u5927\u60e8\u4e8b\u306b\u306a\u308a\u304b\u306d\u307e\u305b\u3093\u3002\n\u4eca\u56de\u7d39\u4ecb\u3057\u305f Custom \u306e Fetcher \u3092\u4f7f\u3063\u305f\u62e1\u5f35\u3084 middleware \u3092\u4f7f\u3063\u305f\u62e1\u5f35\u65b9\u6cd5\u3092\u982d\u306b\u5165\u308c\u3066\u304a\u304f\u3068\u3001\u5c0e\u5165\u3057\u3088\u3046\u3068\u3059\u308b\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u5185\u5bb9\u3092\u628a\u63e1\u3059\u308b\u306e\u306b\u5f79\u7acb\u3064\u3053\u3068\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u52a0\u3048\u3066\u3001Redis \u306e\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3082\u982d\u306b\u5165\u308c\u3066\u304a\u304f\u3068\u3082\u3063\u3068\u6357\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\n\n\n"}