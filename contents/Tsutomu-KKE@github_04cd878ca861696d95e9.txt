{"context": "\n\n \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3092\u7528\u3044\u305f\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5\u306e\u7d39\u4ecb\n\u78ba\u7387\u7684\u306b\u79fb\u52d5\u6642\u9593\u304c\u5909\u308f\u308b\u30b0\u30e9\u30d5\u4e0a\u306e\u6700\u77ed\u8def\u3092\u6c42\u3081\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u306e\u30b0\u30e9\u30d5\u3092\u4f5c\u308a\u307e\u3059\u3002\n\npython3\n%matplotlib inline\nimport numpy as np, networkx as nx\n\nm = 4\ng = nx.Graph()\nfor i in range(m):\n    if i==0:\n        g.add_edge(i, i+m, prob=[1], time=[1.9]) # 0-> 4\n    else:\n        g.add_edge(i, i+m, prob=[0.8, 0.2], time=[1, 6]) # \u7e26\n    if i < m-1:\n        g.add_edge(i, i+1, prob=[1], time=[2]) # \u6a2a\n        g.add_edge(i+m, i+m+1, prob=[1], time=[2]) # \u6a2a\n\nn = g.number_of_nodes()\npos = {i:[i%m, i//m] for i in range(n)}\nnx.draw_networkx_nodes(g, pos, node_color='w')\nnx.draw_networkx_edges(g, pos)\nnx.draw_networkx_labels(g, pos, {i:str(i) for i in range(n)});\n\n\n\n\n\u4e0a\u8a18\u306e\u70b9 0\u304b\u3089\u70b9 7\u3078\u306e\u6700\u77ed\u8def\u3092\u6c42\u3081\u307e\u3059\u3002\n\u6a2a\u306e\u9053\u306f\u3001\u78ba\u5b9a\u7684\u306b2\u6642\u9593\u304b\u304b\u308a\u307e\u3059\u3002\n\u7e26\u306e\u9053\u306f\u3001\u78ba\u738780%\u30671\u6642\u9593\u3067\u3059\u304c\u3001\u78ba\u738720%\u30676\u6642\u9593\u304b\u304b\u308a\u307e\u3059\u3002\u5e73\u5747\u3059\u308b\u30682\u6642\u9593\u304b\u304b\u308a\u307e\u3059\u3002\n\u70b9 0\u304b\u3089\u70b9 4\u307e\u3067\u306f\u3001\u78ba\u5b9a\u7684\u306b1.9 \u6642\u9593\u3067\u884c\u3051\u307e\u3059\u3002\n\u3042\u308b\u70b9\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u3001\u305d\u306e\u70b9\u306b\u7e4b\u304c\u308b\u8fba\u306e\u79fb\u52d5\u6642\u9593\u3060\u3051\u306f\u3001\u78ba\u5b9a\u3059\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\n\u5e73\u5747\u6642\u9593\u3067\u898b\u308c\u3070\u3001\"0 -> 4 -> 5 -> 6 -> 7\"\u306e\u30eb\u30fc\u30c8\u3067\u30017.9\u6642\u9593\u304c\u6700\u77ed\u8def\u3067\u3059\u3002\n\u3057\u304b\u3057\u3001\u7e26\u306e\u9053\u3067\u3001\u4e0b\u304b\u3089\u4e0a\u3078\u306f\u3001\u78ba\u7387 80% \u30671\u6642\u9593\u3067\u884c\u3051\u307e\u3059\u3002\u3053\u306e\u3053\u3068\u304b\u3089\u3001\u53f3\u306b\u9032\u307f\u306a\u304c\u3089\u3001\u7e26\u306b1\u6642\u9593\u3067\u884c\u3051\u308c\u3070\u3001\u4e0a\u3078\u9032\u3080\u65b9\u91dd\u304c\u3001\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u8003\u6848\u3057\u305f\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5\n\n\u4e88\u3081\u3001\u78ba\u7387\u3067\u5b9a\u307e\u308b\u8fba\u306b\u5bfe\u3057\u5404\u3005nn\u500b\u306e\u4e71\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u5168\u3066\u306e\u70b9\u306b\u304a\u3044\u3066\u7d42\u70b9\u3078\u306e\u5230\u9054\u6642\u9593\u3092\u221e\u306b\u3057\u3001\u5168\u3066\u306e\u70b9\u3092\u672a\u63a2\u7d22\u306b\u3057\u307e\u3059\u3002\n\u6b21\u306e\u70b9\u3092\u7d42\u70b9\u306b\u3057\u3001\u6b21\u306e\u70b9\u306e\u5230\u9054\u6642\u9593\u30920\u306b\u3057\u307e\u3059\u3002\n\u59cb\u70b9\u304c\u63a2\u7d22\u6e08\u307f\u306b\u306a\u308b\u307e\u3067\u3001\u4ee5\u4e0b\u3092\u7e70\u8fd4\u3057\u307e\u3059\u3002\n\n\n\u6b21\u306e\u70b9\u3092\u63a2\u7d22\u6e08\u307f\u306b\u3057\u307e\u3059\u3002\n\u6b21\u306e\u70b9\u306b\u63a5\u7d9a\u3059\u308b\u70b9\u306e\u5230\u9054\u6642\u9593\u3092\u5f8c\u8ff0\u306e\u3088\u3046\u306b\u66f4\u65b0\u3057\u307e\u3059\u3002\n\u63a2\u7d22\u6e08\u307f\u3067\u306a\u3044\u70b9\u306e\u4e2d\u3067\u3001\u5230\u9054\u6642\u9593\u304c\u6700\u5c0f\u306e\u3082\u306e\u3092\u6b21\u306e\u70b9\u306b\u3057\u307e\u3059\u3002\n\n\n\n\n\u5230\u9054\u6642\u9593\u306e\u66f4\u65b0\n\n\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u5024\u306enn\u56de\u306e\u5e73\u5747\u304c\u3001\u73fe\u5728\u306e\u5230\u9054\u6642\u9593\u3088\u308a\u77ed\u3051\u308c\u3070\u3001\u66f4\u65b0\u3057\u307e\u3059\u3002\n\n\n\u30b5\u30f3\u30d7\u30eb\u5024\u3092\u63a5\u7d9a\u3059\u308b\u70b9\u306b\u3064\u3044\u3066\u300c\u5230\u9054\u6642\u9593\u3068\u63a5\u7d9a\u8fba\u306e\u6642\u9593\u306e\u548c\u300d\u306e\u6700\u5c0f\u5024\u3068\u3057\u307e\u3059\u3002\n\n\n\n\n\u8a08\u7b97\u3057\u3066\u307f\u308b\n\npython3\ndef monte_min(g, s, t, nn=1000):\n    n = g.number_of_nodes()\n    dd = [np.inf] * n\n    bb = [False] * n\n    for i, j in g.edges():\n        d = g.edge[i][j]\n        d['log'] = (np.random.multinomial(1, d['prob'], nn) * d['time']).sum(axis=1)\n    nx = t\n    dd[nx] = 0\n    while not bb[s]:\n        bb[nx] = True\n        for nd in g.edge[nx].keys():\n            dd[nd] = min(dd[nd], np.mean([calcmin(dd, g.edge[nd], i) for i in range(nn)]))\n        nx = np.argmin([np.inf if bb[i] else dd[i] for i in range(n)])\n        if dd[nx] == np.inf: break\n    return dd\ndef calcmin(dd, dc, i):\n    return min([dd[nd] + d['log'][i] for nd, d in dc.items()])\n\nprint(monte_min(g, 0, 7))\n>>>\n[7.0436741200000021,\n 5.0366892306401603,\n 3.1682992231199996,\n 1.7938642600000001,\n 6.0,\n 4.0,\n 2.0,\n 0]\n\n\nmonte_min \u3067\u5404\u70b9\u3054\u3068\u306e\u5230\u9054\u6642\u9593\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\u5e73\u5747\u5024\u306e\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u3067\u306f 7.9\u3067\u3057\u305f\u304c\u3001\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u3067\u8a08\u7b97\u3059\u308b\u3068 7.04\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u70b94 \u3092\u901a\u308b\u3068\u30017.9 (= 6.0+1.9) \u3067\u3059\u304c\u3001\u70b91\u7d4c\u7531\u306b\u3059\u308c\u3070\u30017.04 (= 5.04+2)\u306a\u306e\u3067\u3001\u70b90\u304b\u3089\u306f\u70b91\u306b\u5411\u304b\u3046\u306e\u304c\u3088\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u70b91\u306b\u3064\u3044\u305f\u3089\u3001\u70b92\u306b\u5411\u304b\u3046\u3068\u30015.17 (= 3.17+2)\u3067\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u8fba(1-5)\u304c1\u306a\u3089\u3070 5 (=4.0+1)\u3068\u306a\u308a\u3001\u8fba(1-5)\u304c6\u306a\u3089\u3070 10 (=4.0+6)\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u3001\u4e0a\u3078\u306e\u79fb\u52d5\u6642\u9593\u304c1\u306e\u3068\u3053\u308d\u3067\u4e0a\u3078\u884c\u304f\u3053\u3068\u304c\u3088\u3044\u3053\u3068\u3082\u308f\u304b\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001\u3053\u306e\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5\u306f\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u304c\u6b63\u78ba\u3067\u3042\u3063\u3066\u3082\u53b3\u5bc6\u306a\u6700\u9069\u89e3\u306e\u4fdd\u8a3c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u4ee5\u4e0a\n# <i class='fa fa-pencil' /> \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3092\u7528\u3044\u305f\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5\u306e\u7d39\u4ecb\n\n\u78ba\u7387\u7684\u306b\u79fb\u52d5\u6642\u9593\u304c\u5909\u308f\u308b\u30b0\u30e9\u30d5\u4e0a\u306e\u6700\u77ed\u8def\u3092\u6c42\u3081\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u30b0\u30e9\u30d5\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```py3:python3\n%matplotlib inline\nimport numpy as np, networkx as nx\n\nm = 4\ng = nx.Graph()\nfor i in range(m):\n    if i==0:\n        g.add_edge(i, i+m, prob=[1], time=[1.9]) # 0-> 4\n    else:\n        g.add_edge(i, i+m, prob=[0.8, 0.2], time=[1, 6]) # \u7e26\n    if i < m-1:\n        g.add_edge(i, i+1, prob=[1], time=[2]) # \u6a2a\n        g.add_edge(i+m, i+m+1, prob=[1], time=[2]) # \u6a2a\n\nn = g.number_of_nodes()\npos = {i:[i%m, i//m] for i in range(n)}\nnx.draw_networkx_nodes(g, pos, node_color='w')\nnx.draw_networkx_edges(g, pos)\nnx.draw_networkx_labels(g, pos, {i:str(i) for i in range(n)});\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/ea132a56-19cc-10fa-b16d-35465790dcdc.png)\n\n- \u4e0a\u8a18\u306e**\u70b9 0\u304b\u3089\u70b9 7\u3078\u306e\u6700\u77ed\u8def**\u3092\u6c42\u3081\u307e\u3059\u3002\n- \u6a2a\u306e\u9053\u306f\u3001\u78ba\u5b9a\u7684\u306b2\u6642\u9593\u304b\u304b\u308a\u307e\u3059\u3002\n- \u7e26\u306e\u9053\u306f\u3001\u78ba\u738780%\u30671\u6642\u9593\u3067\u3059\u304c\u3001\u78ba\u738720%\u30676\u6642\u9593\u304b\u304b\u308a\u307e\u3059\u3002\u5e73\u5747\u3059\u308b\u30682\u6642\u9593\u304b\u304b\u308a\u307e\u3059\u3002\n- \u70b9 0\u304b\u3089\u70b9 4\u307e\u3067\u306f\u3001\u78ba\u5b9a\u7684\u306b1.9 \u6642\u9593\u3067\u884c\u3051\u307e\u3059\u3002\n- \u3042\u308b\u70b9\u306b\u5230\u9054\u3057\u305f\u3068\u304d\u3001\u305d\u306e\u70b9\u306b\u7e4b\u304c\u308b\u8fba\u306e\u79fb\u52d5\u6642\u9593\u3060\u3051\u306f\u3001\u78ba\u5b9a\u3059\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\n\u5e73\u5747\u6642\u9593\u3067\u898b\u308c\u3070\u3001\"0 -> 4 -> 5 -> 6 -> 7\"\u306e\u30eb\u30fc\u30c8\u3067\u30017.9\u6642\u9593\u304c\u6700\u77ed\u8def\u3067\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u7e26\u306e\u9053\u3067\u3001\u4e0b\u304b\u3089\u4e0a\u3078\u306f\u3001\u78ba\u7387 80% \u30671\u6642\u9593\u3067\u884c\u3051\u307e\u3059\u3002\u3053\u306e\u3053\u3068\u304b\u3089\u3001\u53f3\u306b\u9032\u307f\u306a\u304c\u3089\u3001\u7e26\u306b1\u6642\u9593\u3067\u884c\u3051\u308c\u3070\u3001\u4e0a\u3078\u9032\u3080\u65b9\u91dd\u304c\u3001\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n## \u8003\u6848\u3057\u305f\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5\n- \u4e88\u3081\u3001\u78ba\u7387\u3067\u5b9a\u307e\u308b\u8fba\u306b\u5bfe\u3057\u5404\u3005nn\u500b\u306e\u4e71\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n- \u5168\u3066\u306e\u70b9\u306b\u304a\u3044\u3066\u7d42\u70b9\u3078\u306e\u5230\u9054\u6642\u9593\u3092\u221e\u306b\u3057\u3001\u5168\u3066\u306e\u70b9\u3092\u672a\u63a2\u7d22\u306b\u3057\u307e\u3059\u3002\n- \u6b21\u306e\u70b9\u3092\u7d42\u70b9\u306b\u3057\u3001\u6b21\u306e\u70b9\u306e\u5230\u9054\u6642\u9593\u30920\u306b\u3057\u307e\u3059\u3002\n- \u59cb\u70b9\u304c\u63a2\u7d22\u6e08\u307f\u306b\u306a\u308b\u307e\u3067\u3001\u4ee5\u4e0b\u3092\u7e70\u8fd4\u3057\u307e\u3059\u3002\n    - \u6b21\u306e\u70b9\u3092\u63a2\u7d22\u6e08\u307f\u306b\u3057\u307e\u3059\u3002\n    - \u6b21\u306e\u70b9\u306b\u63a5\u7d9a\u3059\u308b\u70b9\u306e\u5230\u9054\u6642\u9593\u3092\u5f8c\u8ff0\u306e\u3088\u3046\u306b\u66f4\u65b0\u3057\u307e\u3059\u3002\n    - \u63a2\u7d22\u6e08\u307f\u3067\u306a\u3044\u70b9\u306e\u4e2d\u3067\u3001\u5230\u9054\u6642\u9593\u304c\u6700\u5c0f\u306e\u3082\u306e\u3092\u6b21\u306e\u70b9\u306b\u3057\u307e\u3059\u3002\n\n### \u5230\u9054\u6642\u9593\u306e\u66f4\u65b0\n- \u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u5024\u306enn\u56de\u306e\u5e73\u5747\u304c\u3001\u73fe\u5728\u306e\u5230\u9054\u6642\u9593\u3088\u308a\u77ed\u3051\u308c\u3070\u3001\u66f4\u65b0\u3057\u307e\u3059\u3002\n    - \u30b5\u30f3\u30d7\u30eb\u5024\u3092\u63a5\u7d9a\u3059\u308b\u70b9\u306b\u3064\u3044\u3066\u300c\u5230\u9054\u6642\u9593\u3068\u63a5\u7d9a\u8fba\u306e\u6642\u9593\u306e\u548c\u300d\u306e\u6700\u5c0f\u5024\u3068\u3057\u307e\u3059\u3002\n\n## \u8a08\u7b97\u3057\u3066\u307f\u308b\n\n```py3:python3\ndef monte_min(g, s, t, nn=1000):\n    n = g.number_of_nodes()\n    dd = [np.inf] * n\n    bb = [False] * n\n    for i, j in g.edges():\n        d = g.edge[i][j]\n        d['log'] = (np.random.multinomial(1, d['prob'], nn) * d['time']).sum(axis=1)\n    nx = t\n    dd[nx] = 0\n    while not bb[s]:\n        bb[nx] = True\n        for nd in g.edge[nx].keys():\n            dd[nd] = min(dd[nd], np.mean([calcmin(dd, g.edge[nd], i) for i in range(nn)]))\n        nx = np.argmin([np.inf if bb[i] else dd[i] for i in range(n)])\n        if dd[nx] == np.inf: break\n    return dd\ndef calcmin(dd, dc, i):\n    return min([dd[nd] + d['log'][i] for nd, d in dc.items()])\n\nprint(monte_min(g, 0, 7))\n>>>\n[7.0436741200000021,\n 5.0366892306401603,\n 3.1682992231199996,\n 1.7938642600000001,\n 6.0,\n 4.0,\n 2.0,\n 0]\n```\n\nmonte_min \u3067\u5404\u70b9\u3054\u3068\u306e\u5230\u9054\u6642\u9593\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n\u5e73\u5747\u5024\u306e\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u3067\u306f 7.9\u3067\u3057\u305f\u304c\u3001\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u3067\u8a08\u7b97\u3059\u308b\u3068 7.04\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u70b94 \u3092\u901a\u308b\u3068\u30017.9 (= 6.0+1.9) \u3067\u3059\u304c\u3001\u70b91\u7d4c\u7531\u306b\u3059\u308c\u3070\u30017.04 (= 5.04+2)\u306a\u306e\u3067\u3001\u70b90\u304b\u3089\u306f\u70b91\u306b\u5411\u304b\u3046\u306e\u304c\u3088\u3044\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u70b91\u306b\u3064\u3044\u305f\u3089\u3001\u70b92\u306b\u5411\u304b\u3046\u3068\u30015.17 (= 3.17+2)\u3067\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u8fba(1-5)\u304c1\u306a\u3089\u3070 5 (=4.0+1)\u3068\u306a\u308a\u3001\u8fba(1-5)\u304c6\u306a\u3089\u3070 10 (=4.0+6)\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306b\u3001\u4e0a\u3078\u306e\u79fb\u52d5\u6642\u9593\u304c1\u306e\u3068\u3053\u308d\u3067\u4e0a\u3078\u884c\u304f\u3053\u3068\u304c\u3088\u3044\u3053\u3068\u3082\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u3053\u306e\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5\u306f\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u304c\u6b63\u78ba\u3067\u3042\u3063\u3066\u3082\u53b3\u5bc6\u306a\u6700\u9069\u89e3\u306e\u4fdd\u8a3c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u4ee5\u4e0a\n\n", "tags": ["\u7d44\u5408\u305b\u6700\u9069\u5316", "\u6700\u9069\u5316", "\u6570\u5b66", "Python", "\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5"]}