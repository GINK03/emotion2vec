{"tags": ["Scala", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "NLP", "kuromoji", "scalaz"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nScalaMatsuri 2016\u3067\u300cScala\u3068Spark\u306b\u3088\u308b\u65e5\u672c\u8a9e\u30c6\u30ad\u30b9\u30c8\u30de\u30a4\u30cb\u30f3\u30b0\u300d\u3092\u805e\u3044\u3066\u9762\u767d\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u307e\u305a\u306f\u65e5\u672c\u8a9e\u5f62\u614b\u7d20\u89e3\u6790\u30a8\u30f3\u30b8\u30f3kuromoji\u3092\u89e6\u3063\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u3068\u3044\u3063\u3066\u3082\u5f62\u614b\u7d20\u89e3\u6790\u3059\u308b\u3060\u3051\u306a\u3089\u3001\u305f\u3060\u5358\u306bkuromoji\u3092\u547c\u3073\u3060\u3059\u3060\u3051\u306a\u306e\u3067\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u8ce2\u305d\u3046\u306a\u3053\u3068\u3092\u3057\u305f\u3044\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u305f\u3068\u3053\u308d\u3001\u300ckuromoji.js\u4f7f\u3063\u3066\u69cb\u6587\u89e3\u6790\u3057\u305f\u300d\u3068\u3044\u3046\u8a18\u4e8b\u3092\u8aad\u307f\u307e\u3057\u305f\u3002\n\u78ba\u7387\u81ea\u7531\u6587\u8108\u6587\u6cd5\u306b\u3088\u308b\u69cb\u6587\u89e3\u6790\u2026\u2026\u3053\u308c\u306f\u4f55\u3060\u304b\u51c4\u305d\u3046\u3067\u3059\uff01\n\u81ea\u7531\u6587\u8108\u6587\u6cd5\u3063\u3066\u4f55\u3060\u304b\u805e\u304d\u899a\u3048\u3042\u308b\u306a\u3068\u601d\u3063\u3066\u3044\u305f\u3089\u3001\u305d\u3046\u305d\u3046\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3082\u89aa\u3057\u307f\u306e\u3042\u308bBNF\uff08\u30d0\u30c3\u30ab\u30b9\u30fb\u30ca\u30a6\u30a2\u8a18\u6cd5\uff09\u3067\u8a18\u8ff0\u3067\u304d\u308b\u6587\u6cd5\u306e\u3053\u3068\u3067\u3057\u305f\u3002\u307e\u3041\u5358\u7d14\u306a\u7f6e\u63db\u30eb\u30fc\u30eb\u306b\u3088\u308b\u518d\u5e30\u7684\u306a\u6587\u6cd5\u306e\u3053\u3068\u3067\u3059\u306d\u3002\u305d\u306e\u7f6e\u63db\u30eb\u30fc\u30eb\u306b\u78ba\u7387\u3092\u4ed8\u3051\u305f\u306e\u304c\u78ba\u7387\u81ea\u7531\u6587\u8108\u6587\u6cd5\u3001\u3068\u3002\n\u300c\u6587\u8108\u81ea\u7531\u6587\u6cd5\u306e\u8a71\u300d\u3068\u3044\u3046\u30b9\u30e9\u30a4\u30c9\u304c\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n\n\u69cb\u6587\u89e3\u6790\u7d50\u679c\n\u4eca\u56de\u306f\u69cb\u6587\u6728\u306e\u63a8\u5b9a\u3060\u3051\u884c\u3063\u3066\u3001\u5b66\u7fd2\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u5143\u8a18\u4e8b\u3068\u540c\u3058\u69cb\u6587\u6728\u304c\u5f97\u3089\u308c\u305f\u306e\u3067\u3001\u305f\u3076\u3093\u5408\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nS 0.2 (8.00e-04)\n|\n+- \u540d\u8a5e\u53e5 1.0 (1.00e-01)\n|  |\n|  +- \u540d\u8a5e 1.0 (1.00e-01)\n|  |  |\n|  |  +- \u5f62\u5bb9\u8a5e 0.1 (1.00e-01)\n|  |  |  |\n|  |  |  +- \u540d\u8a5e - \u96a3\n|  |  |  |\n|  |  |  `- \u52a9\u8a5e - \u306e\n|  |  |\n|  |  `- \u540d\u8a5e - \u5ba2\n|  |\n|  `- \u52a9\u8a5e - \u306f\n|\n`- \u52d5\u8a5e 0.5 (4.00e-02)\n   |\n   +- \u540d\u8a5e 1.0 (8.00e-02)\n   |  |\n   |  +- \u5f62\u5bb9\u8a5e 0.4 (8.00e-02)\n   |  |  |\n   |  |  +- \u526f\u8a5e - \u3088\u304f\n   |  |  |\n   |  |  `- \u5f62\u5bb9\u8a5e 0.2 (2.00e-01)\n   |  |     |\n   |  |     +- \u540d\u8a5e - \u67ff\n   |  |     |\n   |  |     `- \u52d5\u8a5e - \u98df\u3046\n   |  |\n   |  `- \u540d\u8a5e - \u5ba2\n   |\n   `- \u52a9\u52d5\u8a5e - \u3060\n\n\n\u5b9f\u88c5\n\u3068\u308a\u3042\u3048\u305a\u7f6e\u63db\u30eb\u30fc\u30eb\u306e\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\ncase class Rule(left: String, right1: String, right2: String, prob: Double)\n\n\u69cb\u6587\u6728\u306e\u5404\u30ce\u30fc\u30c9\u306f\u3001\u7f6e\u63db\u30eb\u30fc\u30eb\u3082\u3057\u304f\u306f\u5f62\u614b\u7d20\u3001\u305d\u3057\u3066\u90e8\u5206\u6728\u306e\u78ba\u7387\u3092\u6301\u3063\u3066\u3044\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\ncase class PcfgNode(label: Either[Rule, Token], prob: Double)\n\n\u69cb\u6587\u6728\u306e\u578b\u306f\u3001scalaz\u306eTree\u3092\u5229\u7528\u3057\u3066Tree[PcfgNode]\u3068\u3057\u307e\u3059\u3002\n\u3042\u3068\u306f\u69cb\u6587\u6728\u3092\u63a8\u5b9a\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u5143\u8a18\u4e8b\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bCYK\u6cd5\u3068\u5185\u5074\u5916\u5074\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u2026\u2026\u306f\u3061\u3083\u3093\u3068\u52c9\u5f37\u3057\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u306a\u306e\u3067\u2026\u2026\u3068\u308a\u3042\u3048\u305a\u30b7\u30f3\u30d7\u30eb\u306a\u518d\u5e30\u95a2\u6570\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\u3044\u3061\u304a\u3046\u8a08\u7b97\u52b9\u7387\u306b\u3082\u914d\u616e\u3057\u3066\u3001\u30e1\u30e2\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3068\u3044\u3063\u3066\u3082scalaz\u306eMemo\u3092\u565b\u307e\u305b\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002scalaz\u4fbf\u5229\u3002\ndef calcPcfgTree: ((Seq[Token], Seq[Rule], String)) => Option[Tree[PcfgNode]] =\n  Memo.mutableHashMapMemo { case (inputs: Seq[Token], rules: Seq[Rule], target: String) =>\n    inputs.size match {\n      case 0 =>\n        None\n      case 1 =>\n        if (inputs.head.getPartOfSpeechLevel1 == target) {\n          Some(PcfgNode(Right(inputs.head), 1.0).leaf)\n        } else {\n          None\n        }\n      case size =>\n        val trees =\n          for {\n            rule <- rules if rule.left == target\n            i <- Range(1, size)\n            child1 <- calcPcfgTree(inputs.take(i), rules, rule.right1)\n            child2 <- calcPcfgTree(inputs.takeRight(size - i), rules, rule.right2)\n          } yield {\n            val rootProb = rule.prob * child1.rootLabel.prob * child2.rootLabel.prob\n            PcfgNode(Left(rule), rootProb).node(child1, child2)\n          }\n        trees.reduceOption(Ordering.by((_: Tree[PcfgNode]).rootLabel.prob).max)\n    }\n  }\n\n\u3084\u308a\u305f\u3044\u6c17\u6301\u3061\u3092\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u305b\u305f\u6c17\u304c\u3057\u307e\u3059\u3002\nScala\u306efor\u6587\u306f\u3001\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u5909\u63db\u3082\u30cd\u30b9\u30c8\u3092\u6df1\u304f\u305b\u305a\u306b\u66f8\u3051\u308b\u306e\u3067\u3044\u3044\u3067\u3059\u306d\u3002\n\u3042\u3068\u306f\u69cb\u6587\u6728\u3092print\u3059\u308c\u3070\u304a\u7d42\u3044\u3067\u3059\u3002\n\u30ce\u30fc\u30c9\u306eshow\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3001\u3042\u3068\u306fscalaz\u304c\u6728\u3063\u307d\u304f\u6574\u5f62\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nimplicit val showPcfgNode = Show.show { node: PcfgNode =>\n  node.label match {\n    case Left(rule) => f\"${rule.left} ${rule.prob} (${node.prob}%.2e)\"\n    case Right(token) => f\"${token.getPartOfSpeechLevel1} - ${token.getBaseForm}\"\n  }\n}\n\nfor (r <- result) println(r.drawTree)\n\n\n\u4eca\u5f8c\u306e\u8ab2\u984c\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306a\u306b\u305d\u308c\u304a\u3044\u3057\u3044\u306e\u72b6\u614b\u3067\u3082\u3001\u306a\u3093\u3061\u3083\u3063\u3066\u69cb\u6587\u89e3\u6790\u306f\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\u6577\u5c45\u601d\u3063\u305f\u3088\u308a\u9ad8\u304f\u306a\u3044\uff1f\n\u3044\u305a\u308c\u9069\u5f53\u306a\u6587\u7ae0\u3092\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3057\u3066\u3001\u9069\u5f53\u306a\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3092\u3057\u3066\u3001\u9069\u5f53\u306b\u30c9\u30e4\u9854\u3059\u308b\u3053\u3068\u3092\u5922\u898b\u3064\u3064\u3001\u307e\u305a\u306f\u4f55\u304b\u3057\u3089\u306e\u6559\u79d1\u66f8\u8aad\u307f\u307e\u3059\u3002\u305f\u3076\u3093\u2026\u2026\u3002\n\n\u5168\u30b3\u30fc\u30c9\n\nsrc/main/scala/Main.scala\nimport com.atilika.kuromoji.ipadic.{Token, Tokenizer}\n\nimport scala.collection.JavaConverters._\nimport scalaz.Scalaz.ToTreeOps\nimport scalaz.{Memo, Show, Tree}\n\ncase class Rule(left: String, right1: String, right2: String, prob: Double)\n\ncase class PcfgNode(label: Either[Rule, Token], prob: Double)\n\nobject Main extends App {\n  val rules = Seq(\n    Rule(\"S\", \"\u540d\u8a5e\u53e5\", \"\u5f62\u5bb9\u8a5e\", 0.5),\n    Rule(\"S\", \"\u540d\u8a5e\u53e5\", \"\u540d\u8a5e\", 0.3),\n    Rule(\"S\", \"\u540d\u8a5e\u53e5\", \"\u52d5\u8a5e\", 0.2),\n    Rule(\"\u540d\u8a5e\", \"\u5f62\u5bb9\u8a5e\", \"\u540d\u8a5e\", 1),\n    Rule(\"\u540d\u8a5e\u53e5\", \"\u540d\u8a5e\", \"\u52a9\u8a5e\", 1),\n    Rule(\"\u5f62\u5bb9\u8a5e\", \"\u540d\u8a5e\", \"\u52a9\u8a5e\", 0.1),\n    Rule(\"\u5f62\u5bb9\u8a5e\", \"\u540d\u8a5e\", \"\u52d5\u8a5e\", 0.2),\n    Rule(\"\u5f62\u5bb9\u8a5e\", \"\u526f\u8a5e\", \"\u5f62\u5bb9\u8a5e\", 0.4),\n    Rule(\"\u5f62\u5bb9\u8a5e\", \"\u526f\u8a5e\", \"\u5f62\u5bb9\u8a5e\", 0.3),\n    Rule(\"\u52d5\u8a5e\", \"\u526f\u8a5e\", \"\u52d5\u8a5e\u53e5\", 0.5),\n    Rule(\"\u52d5\u8a5e\", \"\u540d\u8a5e\", \"\u52a9\u52d5\u8a5e\", 0.5)\n  )\n\n  val tokenizer = new Tokenizer()\n  val tokens = tokenizer.tokenize(\"\u96a3\u306e\u5ba2\u306f\u3088\u304f\u67ff\u98df\u3046\u5ba2\u3060\").asScala.toVector\n  val result = calcPcfgTree(tokens, rules, \"S\")\n\n  implicit val showPcfgNode = Show.show { node: PcfgNode =>\n    node.label match {\n      case Left(rule) => f\"${rule.left} ${rule.prob} (${node.prob}%.2e)\"\n      case Right(token) => f\"${token.getPartOfSpeechLevel1} - ${token.getBaseForm}\"\n    }\n  }\n\n  for (r <- result) println(r.drawTree)\n\n  def calcPcfgTree: ((Seq[Token], Seq[Rule], String)) => Option[Tree[PcfgNode]] =\n    Memo.mutableHashMapMemo { case (inputs: Seq[Token], rules: Seq[Rule], target: String) =>\n      inputs.size match {\n        case 0 =>\n          None\n        case 1 =>\n          if (inputs.head.getPartOfSpeechLevel1 == target) {\n            Some(PcfgNode(Right(inputs.head), 1.0).leaf)\n          } else {\n            None\n          }\n        case size =>\n          val trees =\n            for {\n              rule <- rules if rule.left == target\n              i <- Range(1, size)\n              child1 <- calcPcfgTree(inputs.take(i), rules, rule.right1)\n              child2 <- calcPcfgTree(inputs.takeRight(size - i), rules, rule.right2)\n            } yield {\n              val rootProb = rule.prob * child1.rootLabel.prob * child2.rootLabel.prob\n              PcfgNode(Left(rule), rootProb).node(child1, child2)\n            }\n          trees.reduceOption(Ordering.by((_: Tree[PcfgNode]).rootLabel.prob).max)\n      }\n    }\n}\n\n\n\nbuild.sbt\nname := \"pcfg\"\nversion := \"0.0.0\"\nscalaVersion := \"2.11.7\"\n\nlibraryDependencies ++= Seq(\n  \"com.atilika.kuromoji\" % \"kuromoji-ipadic\" % \"0.9.0\",\n  \"org.scalaz\" %% \"scalaz-core\" % \"7.2.1\"\n)\n\n\n\nproject/build.properties\nsbt.version=0.13.11\n\n\n# \u306f\u3058\u3081\u306b\n\n[ScalaMatsuri 2016](http://scalamatsuri.org/)\u3067\u300c[Scala\u3068Spark\u306b\u3088\u308b\u65e5\u672c\u8a9e\u30c6\u30ad\u30b9\u30c8\u30de\u30a4\u30cb\u30f3\u30b0](http://www.slideshare.net/wmeddie/scala-matsuri-2016-japanese-text-mining-with-scala-and-spark)\u300d\u3092\u805e\u3044\u3066\u9762\u767d\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u307e\u305a\u306f\u65e5\u672c\u8a9e\u5f62\u614b\u7d20\u89e3\u6790\u30a8\u30f3\u30b8\u30f3[kuromoji](https://www.atilika.com/ja/products/kuromoji.html)\u3092\u89e6\u3063\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u3068\u3044\u3063\u3066\u3082\u5f62\u614b\u7d20\u89e3\u6790\u3059\u308b\u3060\u3051\u306a\u3089\u3001\u305f\u3060\u5358\u306bkuromoji\u3092\u547c\u3073\u3060\u3059\u3060\u3051\u306a\u306e\u3067\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u8ce2\u305d\u3046\u306a\u3053\u3068\u3092\u3057\u305f\u3044\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u305f\u3068\u3053\u308d\u3001\u300c[kuromoji.js\u4f7f\u3063\u3066\u69cb\u6587\u89e3\u6790\u3057\u305f](http://qiita.com/laco0416/items/b75dc8689cf4f08b21f6)\u300d\u3068\u3044\u3046\u8a18\u4e8b\u3092\u8aad\u307f\u307e\u3057\u305f\u3002\n\u78ba\u7387\u81ea\u7531\u6587\u8108\u6587\u6cd5\u306b\u3088\u308b\u69cb\u6587\u89e3\u6790\u2026\u2026\u3053\u308c\u306f\u4f55\u3060\u304b\u51c4\u305d\u3046\u3067\u3059\uff01\n\n\u81ea\u7531\u6587\u8108\u6587\u6cd5\u3063\u3066\u4f55\u3060\u304b\u805e\u304d\u899a\u3048\u3042\u308b\u306a\u3068\u601d\u3063\u3066\u3044\u305f\u3089\u3001\u305d\u3046\u305d\u3046\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3082\u89aa\u3057\u307f\u306e\u3042\u308bBNF\uff08[\u30d0\u30c3\u30ab\u30b9\u30fb\u30ca\u30a6\u30a2\u8a18\u6cd5](https://ja.wikipedia.org/wiki/%E3%83%90%E3%83%83%E3%82%AB%E3%82%B9%E3%83%BB%E3%83%8A%E3%82%A6%E3%82%A2%E8%A8%98%E6%B3%95)\uff09\u3067\u8a18\u8ff0\u3067\u304d\u308b\u6587\u6cd5\u306e\u3053\u3068\u3067\u3057\u305f\u3002\u307e\u3041\u5358\u7d14\u306a\u7f6e\u63db\u30eb\u30fc\u30eb\u306b\u3088\u308b\u518d\u5e30\u7684\u306a\u6587\u6cd5\u306e\u3053\u3068\u3067\u3059\u306d\u3002\u305d\u306e\u7f6e\u63db\u30eb\u30fc\u30eb\u306b\u78ba\u7387\u3092\u4ed8\u3051\u305f\u306e\u304c\u78ba\u7387\u81ea\u7531\u6587\u8108\u6587\u6cd5\u3001\u3068\u3002\n\u300c[\u6587\u8108\u81ea\u7531\u6587\u6cd5\u306e\u8a71](http://www.slideshare.net/kogecoo/ss-42686327)\u300d\u3068\u3044\u3046\u30b9\u30e9\u30a4\u30c9\u304c\u3068\u3066\u3082\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n\n# \u69cb\u6587\u89e3\u6790\u7d50\u679c\n\n\u4eca\u56de\u306f\u69cb\u6587\u6728\u306e\u63a8\u5b9a\u3060\u3051\u884c\u3063\u3066\u3001\u5b66\u7fd2\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\u5143\u8a18\u4e8b\u3068\u540c\u3058\u69cb\u6587\u6728\u304c\u5f97\u3089\u308c\u305f\u306e\u3067\u3001\u305f\u3076\u3093\u5408\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```\nS 0.2 (8.00e-04)\n|\n+- \u540d\u8a5e\u53e5 1.0 (1.00e-01)\n|  |\n|  +- \u540d\u8a5e 1.0 (1.00e-01)\n|  |  |\n|  |  +- \u5f62\u5bb9\u8a5e 0.1 (1.00e-01)\n|  |  |  |\n|  |  |  +- \u540d\u8a5e - \u96a3\n|  |  |  |\n|  |  |  `- \u52a9\u8a5e - \u306e\n|  |  |\n|  |  `- \u540d\u8a5e - \u5ba2\n|  |\n|  `- \u52a9\u8a5e - \u306f\n|\n`- \u52d5\u8a5e 0.5 (4.00e-02)\n   |\n   +- \u540d\u8a5e 1.0 (8.00e-02)\n   |  |\n   |  +- \u5f62\u5bb9\u8a5e 0.4 (8.00e-02)\n   |  |  |\n   |  |  +- \u526f\u8a5e - \u3088\u304f\n   |  |  |\n   |  |  `- \u5f62\u5bb9\u8a5e 0.2 (2.00e-01)\n   |  |     |\n   |  |     +- \u540d\u8a5e - \u67ff\n   |  |     |\n   |  |     `- \u52d5\u8a5e - \u98df\u3046\n   |  |\n   |  `- \u540d\u8a5e - \u5ba2\n   |\n   `- \u52a9\u52d5\u8a5e - \u3060\n```\n\n# \u5b9f\u88c5\n\n\u3068\u308a\u3042\u3048\u305a\u7f6e\u63db\u30eb\u30fc\u30eb\u306e\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```scala\ncase class Rule(left: String, right1: String, right2: String, prob: Double)\n```\n\n\u69cb\u6587\u6728\u306e\u5404\u30ce\u30fc\u30c9\u306f\u3001\u7f6e\u63db\u30eb\u30fc\u30eb\u3082\u3057\u304f\u306f\u5f62\u614b\u7d20\u3001\u305d\u3057\u3066\u90e8\u5206\u6728\u306e\u78ba\u7387\u3092\u6301\u3063\u3066\u3044\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n```scala\ncase class PcfgNode(label: Either[Rule, Token], prob: Double)\n```\n\n\u69cb\u6587\u6728\u306e\u578b\u306f\u3001[scalaz](https://github.com/scalaz/scalaz)\u306eTree\u3092\u5229\u7528\u3057\u3066```Tree[PcfgNode]```\u3068\u3057\u307e\u3059\u3002\n\n\u3042\u3068\u306f\u69cb\u6587\u6728\u3092\u63a8\u5b9a\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\u5143\u8a18\u4e8b\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bCYK\u6cd5\u3068\u5185\u5074\u5916\u5074\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u2026\u2026\u306f\u3061\u3083\u3093\u3068\u52c9\u5f37\u3057\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u306a\u306e\u3067\u2026\u2026\u3068\u308a\u3042\u3048\u305a\u30b7\u30f3\u30d7\u30eb\u306a\u518d\u5e30\u95a2\u6570\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\u3044\u3061\u304a\u3046\u8a08\u7b97\u52b9\u7387\u306b\u3082\u914d\u616e\u3057\u3066\u3001[\u30e1\u30e2\u5316](https://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%A2%E5%8C%96)\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3068\u3044\u3063\u3066\u3082scalaz\u306eMemo\u3092\u565b\u307e\u305b\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002scalaz\u4fbf\u5229\u3002\n\n```scala\ndef calcPcfgTree: ((Seq[Token], Seq[Rule], String)) => Option[Tree[PcfgNode]] =\n  Memo.mutableHashMapMemo { case (inputs: Seq[Token], rules: Seq[Rule], target: String) =>\n    inputs.size match {\n      case 0 =>\n        None\n      case 1 =>\n        if (inputs.head.getPartOfSpeechLevel1 == target) {\n          Some(PcfgNode(Right(inputs.head), 1.0).leaf)\n        } else {\n          None\n        }\n      case size =>\n        val trees =\n          for {\n            rule <- rules if rule.left == target\n            i <- Range(1, size)\n            child1 <- calcPcfgTree(inputs.take(i), rules, rule.right1)\n            child2 <- calcPcfgTree(inputs.takeRight(size - i), rules, rule.right2)\n          } yield {\n            val rootProb = rule.prob * child1.rootLabel.prob * child2.rootLabel.prob\n            PcfgNode(Left(rule), rootProb).node(child1, child2)\n          }\n        trees.reduceOption(Ordering.by((_: Tree[PcfgNode]).rootLabel.prob).max)\n    }\n  }\n```\n\n\u3084\u308a\u305f\u3044\u6c17\u6301\u3061\u3092\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u305b\u305f\u6c17\u304c\u3057\u307e\u3059\u3002\nScala\u306efor\u6587\u306f\u3001\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u5909\u63db\u3082\u30cd\u30b9\u30c8\u3092\u6df1\u304f\u305b\u305a\u306b\u66f8\u3051\u308b\u306e\u3067\u3044\u3044\u3067\u3059\u306d\u3002\n\n\u3042\u3068\u306f\u69cb\u6587\u6728\u3092print\u3059\u308c\u3070\u304a\u7d42\u3044\u3067\u3059\u3002\n\u30ce\u30fc\u30c9\u306eshow\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3001\u3042\u3068\u306fscalaz\u304c\u6728\u3063\u307d\u304f\u6574\u5f62\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```scala\nimplicit val showPcfgNode = Show.show { node: PcfgNode =>\n  node.label match {\n    case Left(rule) => f\"${rule.left} ${rule.prob} (${node.prob}%.2e)\"\n    case Right(token) => f\"${token.getPartOfSpeechLevel1} - ${token.getBaseForm}\"\n  }\n}\n\nfor (r <- result) println(r.drawTree)\n```\n\n# \u4eca\u5f8c\u306e\u8ab2\u984c\n\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u306a\u306b\u305d\u308c\u304a\u3044\u3057\u3044\u306e\u72b6\u614b\u3067\u3082\u3001\u306a\u3093\u3061\u3083\u3063\u3066\u69cb\u6587\u89e3\u6790\u306f\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\u6577\u5c45\u601d\u3063\u305f\u3088\u308a\u9ad8\u304f\u306a\u3044\uff1f\n\u3044\u305a\u308c\u9069\u5f53\u306a\u6587\u7ae0\u3092\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u3057\u3066\u3001\u9069\u5f53\u306a\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3092\u3057\u3066\u3001\u9069\u5f53\u306b\u30c9\u30e4\u9854\u3059\u308b\u3053\u3068\u3092\u5922\u898b\u3064\u3064\u3001\u307e\u305a\u306f\u4f55\u304b\u3057\u3089\u306e\u6559\u79d1\u66f8\u8aad\u307f\u307e\u3059\u3002\u305f\u3076\u3093\u2026\u2026\u3002\n\n# \u5168\u30b3\u30fc\u30c9\n\n```scala:src/main/scala/Main.scala\nimport com.atilika.kuromoji.ipadic.{Token, Tokenizer}\n\nimport scala.collection.JavaConverters._\nimport scalaz.Scalaz.ToTreeOps\nimport scalaz.{Memo, Show, Tree}\n\ncase class Rule(left: String, right1: String, right2: String, prob: Double)\n\ncase class PcfgNode(label: Either[Rule, Token], prob: Double)\n\nobject Main extends App {\n  val rules = Seq(\n    Rule(\"S\", \"\u540d\u8a5e\u53e5\", \"\u5f62\u5bb9\u8a5e\", 0.5),\n    Rule(\"S\", \"\u540d\u8a5e\u53e5\", \"\u540d\u8a5e\", 0.3),\n    Rule(\"S\", \"\u540d\u8a5e\u53e5\", \"\u52d5\u8a5e\", 0.2),\n    Rule(\"\u540d\u8a5e\", \"\u5f62\u5bb9\u8a5e\", \"\u540d\u8a5e\", 1),\n    Rule(\"\u540d\u8a5e\u53e5\", \"\u540d\u8a5e\", \"\u52a9\u8a5e\", 1),\n    Rule(\"\u5f62\u5bb9\u8a5e\", \"\u540d\u8a5e\", \"\u52a9\u8a5e\", 0.1),\n    Rule(\"\u5f62\u5bb9\u8a5e\", \"\u540d\u8a5e\", \"\u52d5\u8a5e\", 0.2),\n    Rule(\"\u5f62\u5bb9\u8a5e\", \"\u526f\u8a5e\", \"\u5f62\u5bb9\u8a5e\", 0.4),\n    Rule(\"\u5f62\u5bb9\u8a5e\", \"\u526f\u8a5e\", \"\u5f62\u5bb9\u8a5e\", 0.3),\n    Rule(\"\u52d5\u8a5e\", \"\u526f\u8a5e\", \"\u52d5\u8a5e\u53e5\", 0.5),\n    Rule(\"\u52d5\u8a5e\", \"\u540d\u8a5e\", \"\u52a9\u52d5\u8a5e\", 0.5)\n  )\n\n  val tokenizer = new Tokenizer()\n  val tokens = tokenizer.tokenize(\"\u96a3\u306e\u5ba2\u306f\u3088\u304f\u67ff\u98df\u3046\u5ba2\u3060\").asScala.toVector\n  val result = calcPcfgTree(tokens, rules, \"S\")\n\n  implicit val showPcfgNode = Show.show { node: PcfgNode =>\n    node.label match {\n      case Left(rule) => f\"${rule.left} ${rule.prob} (${node.prob}%.2e)\"\n      case Right(token) => f\"${token.getPartOfSpeechLevel1} - ${token.getBaseForm}\"\n    }\n  }\n\n  for (r <- result) println(r.drawTree)\n\n  def calcPcfgTree: ((Seq[Token], Seq[Rule], String)) => Option[Tree[PcfgNode]] =\n    Memo.mutableHashMapMemo { case (inputs: Seq[Token], rules: Seq[Rule], target: String) =>\n      inputs.size match {\n        case 0 =>\n          None\n        case 1 =>\n          if (inputs.head.getPartOfSpeechLevel1 == target) {\n            Some(PcfgNode(Right(inputs.head), 1.0).leaf)\n          } else {\n            None\n          }\n        case size =>\n          val trees =\n            for {\n              rule <- rules if rule.left == target\n              i <- Range(1, size)\n              child1 <- calcPcfgTree(inputs.take(i), rules, rule.right1)\n              child2 <- calcPcfgTree(inputs.takeRight(size - i), rules, rule.right2)\n            } yield {\n              val rootProb = rule.prob * child1.rootLabel.prob * child2.rootLabel.prob\n              PcfgNode(Left(rule), rootProb).node(child1, child2)\n            }\n          trees.reduceOption(Ordering.by((_: Tree[PcfgNode]).rootLabel.prob).max)\n      }\n    }\n}\n```\n\n```scala:build.sbt\nname := \"pcfg\"\nversion := \"0.0.0\"\nscalaVersion := \"2.11.7\"\n\nlibraryDependencies ++= Seq(\n  \"com.atilika.kuromoji\" % \"kuromoji-ipadic\" % \"0.9.0\",\n  \"org.scalaz\" %% \"scalaz-core\" % \"7.2.1\"\n)\n```\n\n```project/build.properties\nsbt.version=0.13.11\n```\n"}