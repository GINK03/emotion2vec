{"context": " More than 1 year has passed since last update.\u6b63\u78ba\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u628a\u63e1\u3057\u3066\u306a\u3044\u306e\u3067\u3059\u304c\u3001v3.1\u3042\u305f\u308a\u304b\u3089Camera3D Test\u304c\u8ffd\u52a0\u3055\u308c3D\u30e2\u30c7\u30eb\u306e\u8868\u793a\u30c6\u30b9\u30c8\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u307e\u3059\u3002\n\u3053\u308c\u306bunity\u3061\u3083\u3093fbx\u30c7\u30fc\u30bf\u3092c3b\u306b\u3057\u3066\u8868\u793a\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u8868\u793a\u81ea\u4f53\u306f\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u6570\u70b9\u554f\u984c\u304c\u767a\u751f\u3057\u305f\u306e\u3067\u3001\u305d\u306e\u5bfe\u51e6\u65b9\u6cd5\u306e\u30e1\u30e2\u3002\u4e0a\u624b\u304f\u3044\u304f\u3068\u4ee5\u4e0b\u306a\u611f\u3058\u3067\u8868\u793a\u3067\u304d\u307e\u3059\u3002\n\n\nunity\u306e\u30b5\u30a4\u30c8\u304b\u3089unity\u3061\u3083\u3093\u306e\u30c7\u30fc\u30bf\u3092\u5165\u624b\n\u4eca\u56de\u306fSD\u7248\u306eunity\u3061\u3083\u3093\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u307e\u3059\u3002\nhttp://unity-chan.com/contents/guideline/?id=SDUnityChan\n\nunitypackage\u304b\u3089\u4ee5\u4e0b\u3092\u53c2\u8003\u306bfbx\u3092\u53d6\u308a\u51fa\u3059\n\u843d\u3068\u3057\u305f\u30c7\u30fc\u30bf\u306funitypackage\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u3092\u53c2\u8003\u306bfbx\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\nhttp://unrealengine.hatenablog.com/entry/2014/04/15/184432\n\u8907\u6570\u306efbx\u304c\u542b\u307e\u308c\u307e\u3059\u304c\u3001SD_unitychan_generic.fbx\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\nfbx-conv\u306b\u3066c3b\u306b\u5909\u63db\nfbx-conv\u306fcocos2d-x\u306b\u4ed8\u5c5e\u3057\u3066\u304a\u308a\u3001tools\\fbx-conv\\win32\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\uff08mac\u7248\u306f\u672a\u691c\u8a3c\u3067\u3059\uff09\nfbx-conv.exe -f SD_unitychan_generic.fbx\n\u30c6\u30af\u30b9\u30c1\u30e3\u306euv\u304c\u53cd\u8ee2\u3057\u3066\u3044\u308b\u306e\u3067\u3001-f\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u5909\u63db\u6642\u306bWARNING\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u304c\u3001\u3053\u308c\u3067SD_unitychan_generic.c3b\u304c\u3067\u304d\u308b\u306f\u305a\u3002\n\nSprite3DTest\u3092\u6539\u5909\u3059\u308b\nNode: Camera3D Test\u3067unity\u3061\u3083\u3093\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306bSprite3DTest\u3078\u624b\u3092\u52a0\u3048\u307e\u3059\u3002\nSprite3DTest\u306ec3b\u8aad\u307f\u8fbc\u307f\u90e8\u5206\u3092\u4fee\u6b63\u3002\n\nSprite3DTest.cpp\n    addNewSpriteWithCoords( Vec3(0,0,0),\"Sprite3DTest/SD_unitychan_generic.c3b\",false,0.2f,true);\n\n\nSD_unitychan_generic.c3b\u30d5\u30a1\u30a4\u30eb\u3068\u3001fbx\u3067\u5229\u7528\u3055\u308c\u3066\u3044\u308btga\u30d5\u30a1\u30a4\u30eb\u3092cpp-tests\\Resources\\Sprite3DTest\u3078\u30b3\u30d4\u30fc\u3002\n\u3053\u308c\u3067SD_unitychan_generic.c3b\u81ea\u4f53\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n\n\nunity\u3061\u3083\u3093fbx\u3092fbx-conv\u3059\u308b\u969b\u306e\u554f\u984c\u70b9\n\u554f\u984c\u3068\u3057\u3066\u306f\uff12\u70b9\u3042\u308a\u307e\u3059\u3002\n\n\u9854\u306e\u30e2\u30c7\u30eb\u304c\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u8868\u793a\u4f4d\u7f6e\u304c\u304a\u304b\u3057\u304f\u306a\u308b\n\u9854\u306e\u30e2\u30c7\u30eb\u3067\u3042\u308b_face\u30ce\u30fc\u30c9\u304cCharacter1_Head\u306e\u5b50\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u539f\u70b9\u4f4d\u7f6e\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\nCgfx\u30b7\u30a7\u30fc\u30c0\u30fc\u304c\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u7b87\u6240\u304c\u8d64\u304f\u306a\u308b\ncocos2d-x\u306fcgfx\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001fbx-conv\u6642\u306bdiffuse(1,0,0)\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u306b\u7f6e\u304d\u63db\u308f\u308a\u307e\u3059\u3002\nfbx-conv\u6642\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\nWARNING:  [nol_mat] Material doesn't extend FbxSurfaceLambert, replaced with RED diffuse\n\u306f\u3001\u3053\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u7f6e\u304d\u63db\u3048\u3092\u6307\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u554f\u984c\u70b9\u3078\u306e\u5bfe\u51e6\u65b9\u6cd5\n\u524d\u8ff0\uff12\u3064\u306e\u554f\u984c\u3067\u3059\u304c\u3001fbx-conv\u3092\u6539\u5909\u3057\u3066\u5bfe\u51e6\u3067\u304d\u307e\u3059\u3002\nfbx-conv\u306e\u30d3\u30eb\u30c9\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3002\nhttp://qiita.com/makanai/items/ae7776aef0147c30cc7e\n\n\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u3044\u306a\u3044model\u306b\u3064\u3044\u3066\u3001\u5f37\u5236\u7684\u306b\u30b9\u30ad\u30cb\u30f3\u30b0\u3059\u308b\n\u9854\u306e\u30e2\u30c7\u30eb\u304c\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u8868\u793a\u4f4d\u7f6e\u304c\u304a\u304b\u3057\u304f\u306a\u308b\u554f\u984c\u306b\u3064\u3044\u3066\u3001\n\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u3044\u306a\u3044model\u306f\u5f37\u5236\u7684\u306b\u30b9\u30ad\u30cb\u30f3\u30b0\u3092\u884c\u3063\u3066\u5bfe\u51e6\u3057\u307e\u3059\u3002\n\nFbxConvert.h\n        void prefetchMeshes() {\n            {\n                int cnt = scene->GetGeometryCount();\n                FbxGeometryConverter converter(manager);\n                std::vector<FbxGeometry *> triangulate;\n                for (int i = 0; i < scene->GetGeometryCount(); ++i) {\n                    FbxGeometry * geometry = scene->GetGeometry(i);\n                    if (!geometry->Is<FbxMesh>() || !((FbxMesh*)geometry)->IsTriangleMesh())\n                        triangulate.push_back(geometry);\n                }\n                for (std::vector<FbxGeometry *>::iterator it = triangulate.begin(); it != triangulate.end(); ++it)\n                {\n                    log->status(log::sSourceConvertFbxTriangulate, getGeometryName(*it), (*it)->GetClassId().GetName());\n                    FbxNodeAttribute * const attr = converter.Triangulate(*it, true);\n                }\n            }\n\n            int cnt = scene->GetGeometryCount();\n            for (int i = 0; i < cnt; ++i) {\n                FbxGeometry * geometry = scene->GetGeometry(i);\n\n                if (fbxMeshMap.find(geometry) == fbxMeshMap.end()) {\n                    if (!geometry->Is<FbxMesh>()) {\n                        log->warning(log::wSourceConvertFbxCantTriangulate, geometry->GetClassId().GetName());\n                        continue;\n                    }\n                    FbxMesh *mesh = (FbxMesh*)geometry;\n                    int indexCount = (mesh->GetPolygonCount() * 3);\n                    log->verbose(log::iSourceConvertFbxMeshInfo, getGeometryName(mesh), mesh->GetPolygonCount(), indexCount, mesh->GetControlPointsCount());\n                    if (indexCount > settings->maxIndexCount)\n                        log->warning(log::wSourceConvertFbxExceedsIndices, indexCount, settings->maxIndexCount);\n                    if (mesh->GetElementMaterialCount() <= 0) {\n                        log->error(log::wSourceConvertFbxNoMaterial, getGeometryName(mesh));\n                        continue;\n                    }\n\n                    //\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u306a\u3044\u5834\u5408\u3001\u89aa\u30ce\u30fc\u30c9\u3078\u5f37\u5236\u7684\u306b\u30b9\u30ad\u30cb\u30f3\u30b0\u3059\u308b\n                    if (mesh->GetDeformerCount(FbxDeformer::eSkin)==0){\n\n                        std::function<FbxNode*(FbxNode* node, FbxGeometry* geo)> findGeometry = [&findGeometry](FbxNode* node, FbxGeometry* geo)->FbxNode*{\n                            if (node->GetGeometry() == geo)return node;\n                            for (int i = 0; i < node->GetChildCount(); i++){\n                                auto n = findGeometry(node->GetChild(i), geo);\n                                if (n)return n;\n                            }\n                            return nullptr;\n                        };\n\n                        FbxNode* nChild = findGeometry(scene->GetRootNode(), geometry);\n                        FbxNode* n = nChild->GetParent();\n                        n->RemoveChild(nChild);\n                        scene->GetRootNode()->AddChild(nChild);\n                        FbxAnimEvaluator* mySceneEvaluator = scene->GetAnimationEvaluator();\n                        auto mBase = mySceneEvaluator->GetNodeGlobalTransform(n);\n                        auto m = mBase.Inverse();\n\n                        FbxCluster *lClusterToRoot = FbxCluster::Create(scene, \"\");\n                        lClusterToRoot->SetLink(n);\n                        lClusterToRoot->SetTransformLinkMatrix(mBase);\n                        lClusterToRoot->SetLinkMode(FbxCluster::eTotalOne);\n                        for (int j = 0; j < mesh->GetControlPointsCount(); ++j){\n                            lClusterToRoot->AddControlPointIndex(j, 1.0f);\n                        }\n                        FbxSkin* lSkin = FbxSkin::Create(scene, \"\");\n                        lSkin->AddCluster(lClusterToRoot);\n                        mesh->AddDeformer(lSkin);\n                    }\n                    FbxMeshInfo * const info = new FbxMeshInfo(log, mesh, settings->packColors, settings->maxVertexBonesCount, settings->forceMaxVertexBoneCount, settings->maxNodePartBonesCount);\n                    meshInfos.push_back(info);\n                    fbxMeshMap[mesh] = info;\n                    if (info->bonesOverflow)\n                        log->warning(log::wSourceConvertFbxExceedsBones);\n                }\n                else {\n                    log->warning(log::wSourceConvertFbxDuplicateMesh, getGeometryName(geometry));\n                }\n            }\n        }\n\n\n\ncgfx\u5185\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u540d\u3092diffuse\u306b\u4f7f\u7528\u3059\u308b\nCgfx\u30b7\u30a7\u30fc\u30c0\u30fc\u5229\u7528\u6642\u306b\u30de\u30c6\u30ea\u30a2\u30eb\u7f6e\u304d\u63db\u3048\u3057\u3066\u3044\u308b\u7b87\u6240\u3092\u6539\u5909\u3057\u3001Cgfx\u4e2d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092diffuse\u3068\u3057\u3066\u30a2\u30b5\u30a4\u30f3\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nunity\u3061\u3083\u3093\u3067\u306fDiffuseTexture\u3068\u3044\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u304cdiffuse\u306b\u8a72\u5f53\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\nFbxConvert.h\n        Material *createMaterial(FbxSurfaceMaterial * const &material) {    \n            Material * const result = new Material();\n            result->source = material;\n            result->id = material->GetName();\n\n            if ((!material->Is<FbxSurfaceLambert>()) || GetImplementation(material, FBXSDK_IMPLEMENTATION_HLSL) || GetImplementation(material, FBXSDK_IMPLEMENTATION_CGFX)) {\n                if (!material->Is<FbxSurfaceLambert>()){\n                    log->warning(log::wSourceConvertFbxMaterialUnknown, result->id.c_str());\n                    float f[3] = { 1, 0, 0 };\n                    result->diffuse.set(f);\n                }\n                if (GetImplementation(material, FBXSDK_IMPLEMENTATION_HLSL)){\n                    log->warning(log::wSourceConvertFbxMaterialHLSL, result->id.c_str());\n                    float f[3] = { 1, 0, 0 };\n                    result->diffuse.set(f);\n                }\n                if (GetImplementation(material, FBXSDK_IMPLEMENTATION_CGFX)){\n                    log->warning(log::wSourceConvertFbxMaterialCgFX, result->id.c_str());\n                    float f[3] = { 1, 1, 1 };\n                    result->diffuse.set(f);\n\n                    //cgfx\u304b\u3089diffuse\u30c6\u30af\u30b9\u30c1\u30e3\u540d\u3092\u63a2\u3059\n                    auto lImplementation = GetImplementation(material, FBXSDK_IMPLEMENTATION_CGFX);\n\n                    const FbxBindingTable* lRootTable = lImplementation->GetRootTable();\n                    FbxString lFileName = lRootTable->DescAbsoluteURL.Get();\n                    FbxString lTechniqueName = lRootTable->DescTAG.Get();\n\n                    const FbxBindingTable* lTable = lImplementation->GetRootTable();\n                    size_t lEntryNum = lTable->GetEntryCount();\n\n                    for (int i = 0; i < (int)lEntryNum; ++i)\n                    {\n                        const FbxBindingTableEntry& lEntry = lTable->GetEntry(i);\n                        const char* lEntrySrcType = lEntry.GetEntryType(true);\n                        FbxProperty lFbxProp;\n\n                        FbxString lTest = lEntry.GetSource();\n                        if (lTest.Find(\"DiffuseTexture\") < 0)continue;\n\n                        if (strcmp(FbxPropertyEntryView::sEntryType, lEntrySrcType) == 0)\n                        {\n                            lFbxProp = material->FindPropertyHierarchical(lEntry.GetSource());\n                            if (!lFbxProp.IsValid())\n                            {\n                                lFbxProp = material->RootProperty.FindHierarchical(lEntry.GetSource());\n                            }\n                        }\n                        else if (strcmp(FbxConstantEntryView::sEntryType, lEntrySrcType) == 0)\n                        {\n                            lFbxProp = lImplementation->GetConstants().FindHierarchical(lEntry.GetSource());\n                        }\n                        if (lFbxProp.IsValid())\n                        {\n                            if (lFbxProp.GetSrcObjectCount<FbxTexture>() > 0)\n                            {\n                                for (int j = 0; j < lFbxProp.GetSrcObjectCount<FbxFileTexture>(); ++j)\n                                {\n                                    FbxFileTexture *lTex = lFbxProp.GetSrcObject<FbxFileTexture>(j);\n                                    add_if_not_null(result->textures, createTexture(lTex, Material::Texture::Diffuse));\n                                }\n                            }\n                        }\n                    }\n                }\n                return result;\n            }\n\n\n\u3042\u3068\u306ffbx-conv\u3092\u30d3\u30eb\u30c9\u3057\u3001\u51fa\u6765\u4e0a\u304c\u3063\u305fexe\u3067\u5909\u63db\u3059\u308c\u3070\u554f\u984c\u304c\u89e3\u6c7a\u3059\u308b\u306f\u305a\u3067\u3059\u3002\n\u307e\u305f\u30d5\u30a7\u30a4\u30b7\u30e3\u30eb\u4ee5\u5916\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306f\u305d\u306e\u307e\u307e\u5229\u7528\u3067\u304d\u305f\u306e\u3067\u3001\u5fc5\u8981\u306a\u3089unitypackage\u4ed8\u5c5e\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5909\u63db\u3057\u3066\u5229\u7528\u3059\u308b\u3068\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u6b63\u78ba\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u628a\u63e1\u3057\u3066\u306a\u3044\u306e\u3067\u3059\u304c\u3001v3.1\u3042\u305f\u308a\u304b\u3089Camera3D Test\u304c\u8ffd\u52a0\u3055\u308c3D\u30e2\u30c7\u30eb\u306e\u8868\u793a\u30c6\u30b9\u30c8\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u307e\u3059\u3002\n\u3053\u308c\u306bunity\u3061\u3083\u3093fbx\u30c7\u30fc\u30bf\u3092c3b\u306b\u3057\u3066\u8868\u793a\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u8868\u793a\u81ea\u4f53\u306f\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u6570\u70b9\u554f\u984c\u304c\u767a\u751f\u3057\u305f\u306e\u3067\u3001\u305d\u306e\u5bfe\u51e6\u65b9\u6cd5\u306e\u30e1\u30e2\u3002\u4e0a\u624b\u304f\u3044\u304f\u3068\u4ee5\u4e0b\u306a\u611f\u3058\u3067\u8868\u793a\u3067\u304d\u307e\u3059\u3002\n![unitychan02.png](https://qiita-image-store.s3.amazonaws.com/0/49333/71a9d9ed-90f6-6305-9b07-85e6c74654f3.png)\n\n##unity\u306e\u30b5\u30a4\u30c8\u304b\u3089unity\u3061\u3083\u3093\u306e\u30c7\u30fc\u30bf\u3092\u5165\u624b\n\u4eca\u56de\u306fSD\u7248\u306eunity\u3061\u3083\u3093\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u307e\u3059\u3002\nhttp://unity-chan.com/contents/guideline/?id=SDUnityChan\n\n##unitypackage\u304b\u3089\u4ee5\u4e0b\u3092\u53c2\u8003\u306bfbx\u3092\u53d6\u308a\u51fa\u3059\n\u843d\u3068\u3057\u305f\u30c7\u30fc\u30bf\u306funitypackage\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u3092\u53c2\u8003\u306bfbx\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\nhttp://unrealengine.hatenablog.com/entry/2014/04/15/184432\n\u8907\u6570\u306efbx\u304c\u542b\u307e\u308c\u307e\u3059\u304c\u3001SD_unitychan_generic.fbx\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n##fbx-conv\u306b\u3066c3b\u306b\u5909\u63db\nfbx-conv\u306fcocos2d-x\u306b\u4ed8\u5c5e\u3057\u3066\u304a\u308a\u3001tools\\fbx-conv\\win32\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\uff08mac\u7248\u306f\u672a\u691c\u8a3c\u3067\u3059\uff09\nfbx-conv.exe -f SD_unitychan_generic.fbx\n\u30c6\u30af\u30b9\u30c1\u30e3\u306euv\u304c\u53cd\u8ee2\u3057\u3066\u3044\u308b\u306e\u3067\u3001-f\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u5909\u63db\u6642\u306bWARNING\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u304c\u3001\u3053\u308c\u3067SD_unitychan_generic.c3b\u304c\u3067\u304d\u308b\u306f\u305a\u3002\n\n##Sprite3DTest\u3092\u6539\u5909\u3059\u308b\nNode: Camera3D Test\u3067unity\u3061\u3083\u3093\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306bSprite3DTest\u3078\u624b\u3092\u52a0\u3048\u307e\u3059\u3002\nSprite3DTest\u306ec3b\u8aad\u307f\u8fbc\u307f\u90e8\u5206\u3092\u4fee\u6b63\u3002\n\n````Sprite3DTest.cpp\n\taddNewSpriteWithCoords( Vec3(0,0,0),\"Sprite3DTest/SD_unitychan_generic.c3b\",false,0.2f,true);\n````\nSD_unitychan_generic.c3b\u30d5\u30a1\u30a4\u30eb\u3068\u3001fbx\u3067\u5229\u7528\u3055\u308c\u3066\u3044\u308btga\u30d5\u30a1\u30a4\u30eb\u3092cpp-tests\\Resources\\Sprite3DTest\u3078\u30b3\u30d4\u30fc\u3002\n\u3053\u308c\u3067SD_unitychan_generic.c3b\u81ea\u4f53\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n![unitychan01.png](https://qiita-image-store.s3.amazonaws.com/0/49333/a41e866f-4462-e4c9-a3ab-b1665d2bbd67.png)\n\n##unity\u3061\u3083\u3093fbx\u3092fbx-conv\u3059\u308b\u969b\u306e\u554f\u984c\u70b9\n\u554f\u984c\u3068\u3057\u3066\u306f\uff12\u70b9\u3042\u308a\u307e\u3059\u3002\n### \u9854\u306e\u30e2\u30c7\u30eb\u304c\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u8868\u793a\u4f4d\u7f6e\u304c\u304a\u304b\u3057\u304f\u306a\u308b\n\u9854\u306e\u30e2\u30c7\u30eb\u3067\u3042\u308b\\_face\u30ce\u30fc\u30c9\u304cCharacter1_Head\u306e\u5b50\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u539f\u70b9\u4f4d\u7f6e\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n### Cgfx\u30b7\u30a7\u30fc\u30c0\u30fc\u304c\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u7b87\u6240\u304c\u8d64\u304f\u306a\u308b\ncocos2d-x\u306fcgfx\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001fbx-conv\u6642\u306bdiffuse(1,0,0)\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u306b\u7f6e\u304d\u63db\u308f\u308a\u307e\u3059\u3002\nfbx-conv\u6642\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\nWARNING:  [nol_mat] Material doesn't extend FbxSurfaceLambert, replaced with RED diffuse\n\u306f\u3001\u3053\u306e\u30de\u30c6\u30ea\u30a2\u30eb\u7f6e\u304d\u63db\u3048\u3092\u6307\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u554f\u984c\u70b9\u3078\u306e\u5bfe\u51e6\u65b9\u6cd5\n\u524d\u8ff0\uff12\u3064\u306e\u554f\u984c\u3067\u3059\u304c\u3001fbx-conv\u3092\u6539\u5909\u3057\u3066\u5bfe\u51e6\u3067\u304d\u307e\u3059\u3002\nfbx-conv\u306e\u30d3\u30eb\u30c9\u306f\u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3002\nhttp://qiita.com/makanai/items/ae7776aef0147c30cc7e\n\n### \u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u3044\u306a\u3044model\u306b\u3064\u3044\u3066\u3001\u5f37\u5236\u7684\u306b\u30b9\u30ad\u30cb\u30f3\u30b0\u3059\u308b\n\u9854\u306e\u30e2\u30c7\u30eb\u304c\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u304a\u3089\u305a\u3001\u8868\u793a\u4f4d\u7f6e\u304c\u304a\u304b\u3057\u304f\u306a\u308b\u554f\u984c\u306b\u3064\u3044\u3066\u3001\n\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u3044\u306a\u3044model\u306f\u5f37\u5236\u7684\u306b\u30b9\u30ad\u30cb\u30f3\u30b0\u3092\u884c\u3063\u3066\u5bfe\u51e6\u3057\u307e\u3059\u3002\n\n````FbxConvert.h\n\t\tvoid prefetchMeshes() {\n\t\t\t{\n\t\t\t\tint cnt = scene->GetGeometryCount();\n\t\t\t\tFbxGeometryConverter converter(manager);\n\t\t\t\tstd::vector<FbxGeometry *> triangulate;\n\t\t\t\tfor (int i = 0; i < scene->GetGeometryCount(); ++i) {\n\t\t\t\t\tFbxGeometry * geometry = scene->GetGeometry(i);\n\t\t\t\t\tif (!geometry->Is<FbxMesh>() || !((FbxMesh*)geometry)->IsTriangleMesh())\n\t\t\t\t\t\ttriangulate.push_back(geometry);\n\t\t\t\t}\n\t\t\t\tfor (std::vector<FbxGeometry *>::iterator it = triangulate.begin(); it != triangulate.end(); ++it)\n\t\t\t\t{\n\t\t\t\t\tlog->status(log::sSourceConvertFbxTriangulate, getGeometryName(*it), (*it)->GetClassId().GetName());\n\t\t\t\t\tFbxNodeAttribute * const attr = converter.Triangulate(*it, true);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tint cnt = scene->GetGeometryCount();\n\t\t\tfor (int i = 0; i < cnt; ++i) {\n\t\t\t\tFbxGeometry * geometry = scene->GetGeometry(i);\n\n\t\t\t\tif (fbxMeshMap.find(geometry) == fbxMeshMap.end()) {\n\t\t\t\t\tif (!geometry->Is<FbxMesh>()) {\n\t\t\t\t\t\tlog->warning(log::wSourceConvertFbxCantTriangulate, geometry->GetClassId().GetName());\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tFbxMesh *mesh = (FbxMesh*)geometry;\n\t\t\t\t\tint indexCount = (mesh->GetPolygonCount() * 3);\n\t\t\t\t\tlog->verbose(log::iSourceConvertFbxMeshInfo, getGeometryName(mesh), mesh->GetPolygonCount(), indexCount, mesh->GetControlPointsCount());\n\t\t\t\t\tif (indexCount > settings->maxIndexCount)\n\t\t\t\t\t\tlog->warning(log::wSourceConvertFbxExceedsIndices, indexCount, settings->maxIndexCount);\n\t\t\t\t\tif (mesh->GetElementMaterialCount() <= 0) {\n\t\t\t\t\t\tlog->error(log::wSourceConvertFbxNoMaterial, getGeometryName(mesh));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t//\u30b9\u30ad\u30cb\u30f3\u30b0\u3055\u308c\u3066\u306a\u3044\u5834\u5408\u3001\u89aa\u30ce\u30fc\u30c9\u3078\u5f37\u5236\u7684\u306b\u30b9\u30ad\u30cb\u30f3\u30b0\u3059\u308b\n\t\t\t\t\tif (mesh->GetDeformerCount(FbxDeformer::eSkin)==0){\n\n\t\t\t\t\t\tstd::function<FbxNode*(FbxNode* node, FbxGeometry* geo)> findGeometry = [&findGeometry](FbxNode* node, FbxGeometry* geo)->FbxNode*{\n\t\t\t\t\t\t\tif (node->GetGeometry() == geo)return node;\n\t\t\t\t\t\t\tfor (int i = 0; i < node->GetChildCount(); i++){\n\t\t\t\t\t\t\t\tauto n = findGeometry(node->GetChild(i), geo);\n\t\t\t\t\t\t\t\tif (n)return n;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn nullptr;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tFbxNode* nChild = findGeometry(scene->GetRootNode(), geometry);\n\t\t\t\t\t\tFbxNode* n = nChild->GetParent();\n\t\t\t\t\t\tn->RemoveChild(nChild);\n\t\t\t\t\t\tscene->GetRootNode()->AddChild(nChild);\n\t\t\t\t\t\tFbxAnimEvaluator* mySceneEvaluator = scene->GetAnimationEvaluator();\n\t\t\t\t\t\tauto mBase = mySceneEvaluator->GetNodeGlobalTransform(n);\n\t\t\t\t\t\tauto m = mBase.Inverse();\n\n\t\t\t\t\t\tFbxCluster *lClusterToRoot = FbxCluster::Create(scene, \"\");\n\t\t\t\t\t\tlClusterToRoot->SetLink(n);\n\t\t\t\t\t\tlClusterToRoot->SetTransformLinkMatrix(mBase);\n\t\t\t\t\t\tlClusterToRoot->SetLinkMode(FbxCluster::eTotalOne);\n\t\t\t\t\t\tfor (int j = 0; j < mesh->GetControlPointsCount(); ++j){\n\t\t\t\t\t\t\tlClusterToRoot->AddControlPointIndex(j, 1.0f);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tFbxSkin* lSkin = FbxSkin::Create(scene, \"\");\n\t\t\t\t\t\tlSkin->AddCluster(lClusterToRoot);\n\t\t\t\t\t\tmesh->AddDeformer(lSkin);\n\t\t\t\t\t}\n\t\t\t\t\tFbxMeshInfo * const info = new FbxMeshInfo(log, mesh, settings->packColors, settings->maxVertexBonesCount, settings->forceMaxVertexBoneCount, settings->maxNodePartBonesCount);\n\t\t\t\t\tmeshInfos.push_back(info);\n\t\t\t\t\tfbxMeshMap[mesh] = info;\n\t\t\t\t\tif (info->bonesOverflow)\n\t\t\t\t\t\tlog->warning(log::wSourceConvertFbxExceedsBones);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tlog->warning(log::wSourceConvertFbxDuplicateMesh, getGeometryName(geometry));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n````\n\n### cgfx\u5185\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u540d\u3092diffuse\u306b\u4f7f\u7528\u3059\u308b\nCgfx\u30b7\u30a7\u30fc\u30c0\u30fc\u5229\u7528\u6642\u306b\u30de\u30c6\u30ea\u30a2\u30eb\u7f6e\u304d\u63db\u3048\u3057\u3066\u3044\u308b\u7b87\u6240\u3092\u6539\u5909\u3057\u3001Cgfx\u4e2d\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092diffuse\u3068\u3057\u3066\u30a2\u30b5\u30a4\u30f3\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nunity\u3061\u3083\u3093\u3067\u306fDiffuseTexture\u3068\u3044\u3046\u30c6\u30af\u30b9\u30c1\u30e3\u304cdiffuse\u306b\u8a72\u5f53\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n````FbxConvert.h\n\t\tMaterial *createMaterial(FbxSurfaceMaterial * const &material) {\t\n\t\t\tMaterial * const result = new Material();\n\t\t\tresult->source = material;\n\t\t\tresult->id = material->GetName();\n            \n\t\t\tif ((!material->Is<FbxSurfaceLambert>()) || GetImplementation(material, FBXSDK_IMPLEMENTATION_HLSL) || GetImplementation(material, FBXSDK_IMPLEMENTATION_CGFX)) {\n\t\t\t\tif (!material->Is<FbxSurfaceLambert>()){\n\t\t\t\t\tlog->warning(log::wSourceConvertFbxMaterialUnknown, result->id.c_str());\n\t\t\t\t\tfloat f[3] = { 1, 0, 0 };\n\t\t\t\t\tresult->diffuse.set(f);\n\t\t\t\t}\n\t\t\t\tif (GetImplementation(material, FBXSDK_IMPLEMENTATION_HLSL)){\n\t\t\t\t\tlog->warning(log::wSourceConvertFbxMaterialHLSL, result->id.c_str());\n\t\t\t\t\tfloat f[3] = { 1, 0, 0 };\n\t\t\t\t\tresult->diffuse.set(f);\n\t\t\t\t}\n\t\t\t\tif (GetImplementation(material, FBXSDK_IMPLEMENTATION_CGFX)){\n\t\t\t\t\tlog->warning(log::wSourceConvertFbxMaterialCgFX, result->id.c_str());\n\t\t\t\t\tfloat f[3] = { 1, 1, 1 };\n\t\t\t\t\tresult->diffuse.set(f);\n\n\t\t\t\t\t//cgfx\u304b\u3089diffuse\u30c6\u30af\u30b9\u30c1\u30e3\u540d\u3092\u63a2\u3059\n\t\t\t\t\tauto lImplementation = GetImplementation(material, FBXSDK_IMPLEMENTATION_CGFX);\n\n\t\t\t\t\tconst FbxBindingTable* lRootTable = lImplementation->GetRootTable();\n\t\t\t\t\tFbxString lFileName = lRootTable->DescAbsoluteURL.Get();\n\t\t\t\t\tFbxString lTechniqueName = lRootTable->DescTAG.Get();\n\n\t\t\t\t\tconst FbxBindingTable* lTable = lImplementation->GetRootTable();\n\t\t\t\t\tsize_t lEntryNum = lTable->GetEntryCount();\n\n\t\t\t\t\tfor (int i = 0; i < (int)lEntryNum; ++i)\n\t\t\t\t\t{\n\t\t\t\t\t\tconst FbxBindingTableEntry& lEntry = lTable->GetEntry(i);\n\t\t\t\t\t\tconst char* lEntrySrcType = lEntry.GetEntryType(true);\n\t\t\t\t\t\tFbxProperty lFbxProp;\n\n\t\t\t\t\t\tFbxString lTest = lEntry.GetSource();\n\t\t\t\t\t\tif (lTest.Find(\"DiffuseTexture\") < 0)continue;\n\n\t\t\t\t\t\tif (strcmp(FbxPropertyEntryView::sEntryType, lEntrySrcType) == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlFbxProp = material->FindPropertyHierarchical(lEntry.GetSource());\n\t\t\t\t\t\t\tif (!lFbxProp.IsValid())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlFbxProp = material->RootProperty.FindHierarchical(lEntry.GetSource());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (strcmp(FbxConstantEntryView::sEntryType, lEntrySrcType) == 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlFbxProp = lImplementation->GetConstants().FindHierarchical(lEntry.GetSource());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (lFbxProp.IsValid())\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (lFbxProp.GetSrcObjectCount<FbxTexture>() > 0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfor (int j = 0; j < lFbxProp.GetSrcObjectCount<FbxFileTexture>(); ++j)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tFbxFileTexture *lTex = lFbxProp.GetSrcObject<FbxFileTexture>(j);\n\t\t\t\t\t\t\t\t\tadd_if_not_null(result->textures, createTexture(lTex, Material::Texture::Diffuse));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n````\n\n\u3042\u3068\u306ffbx-conv\u3092\u30d3\u30eb\u30c9\u3057\u3001\u51fa\u6765\u4e0a\u304c\u3063\u305fexe\u3067\u5909\u63db\u3059\u308c\u3070\u554f\u984c\u304c\u89e3\u6c7a\u3059\u308b\u306f\u305a\u3067\u3059\u3002\n\u307e\u305f\u30d5\u30a7\u30a4\u30b7\u30e3\u30eb\u4ee5\u5916\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306f\u305d\u306e\u307e\u307e\u5229\u7528\u3067\u304d\u305f\u306e\u3067\u3001\u5fc5\u8981\u306a\u3089unitypackage\u4ed8\u5c5e\u306e\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u3092\u5909\u63db\u3057\u3066\u5229\u7528\u3059\u308b\u3068\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["cocos2d-x3.3"]}