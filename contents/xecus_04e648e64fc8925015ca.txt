{"context": "\n\n\u306a\u306b\u3053\u308c\n\u6700\u8fd1\u3001VPN\u306e\u5148\u306b\u3042\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3084APP\u30b5\u30fc\u30d0\u30fc\u3068\u9023\u5e2f\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u3053\u3068\u304c\u3042\u3063\u3066\u3001\n\u305d\u306e\u6642\u306e\u30e1\u30e2\u3002\u3053\u308c\u3084\u308b\u3068VPN\u63a5\u7d9a\u304c\u51fa\u6765\u3066\u3001ppp0\u3063\u3066\u3044\u3046\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u51fa\u6765\u308b\u3002\n\u5b9f\u969b\u306f\u3001\u3053\u308c\u306bVPN\u5207\u65ad\u3092\u691c\u77e5\u3057\u3066\u518d\u63a5\u7d9a\u3059\u308b\u30c7\u30fc\u30e2\u30f3\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u3066\u308b\u3002\n\uff08\u3053\u306e\u4ed5\u7d44\u304c\u306a\u3044\u3068\u5b9f\u5229\u7528\u304c\u96e3\u3057\u3044\u3002\u5f8c\u65e5\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u30a2\u30c3\u30d7\u4e88\u5b9a\uff09\n\n\u60f3\u5b9a\u3059\u308b\u74b0\u5883\n\n\u30d7\u30ed\u30c8\u30b3\u30eb\uff1aL2TP/IPsec\n\u63a5\u7d9a\u5148\uff1aXXX.XXX.XXX.XXX\n\u53d6\u5f97\u60f3\u5b9aIP\uff1a172.17.5.X\n\n\n\u624b\u9806\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u307f\u3093\u306a\u3060\u3044\u3059\u304dapt-get\nsudo apt-get install l2tp-ipsec-vpn\nsudo apt-get install lsof\n\n\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u30b3\u30d4\u30fc\n\nvi /etc/ipsec.conf\n# /etc/ipsec.conf - Openswan IPsec configuration file\n\n# This file:  /usr/share/doc/openswan/ipsec.conf-sample\n#\n# Manual:     ipsec.conf.5\n\n\nversion 2.0 # conforms to second version of ipsec.conf specification\n\n# basic configuration\nconfig setup\n    # Do not set debug options to debug configuration issues!\n    # plutodebug / klipsdebug = \"all\", \"none\" or a combation from below:\n    # \"raw crypt parsing emitting control klips pfkey natt x509 dpd private\"\n    # eg:\n    # plutodebug=\"control parsing\"\n    # Again: only enable plutodebug or klipsdebug when asked by a developer\n    #\n    # enable to get logs per-peer\n    # plutoopts=\"--perpeerlog\"\n    plutoopts=\"--interface=eth0\"\n    #\n    # Enable core dumps (might require system changes, like ulimit -C)\n    # This is required for abrtd to work properly\n    # Note: incorrect SElinux policies might prevent pluto writing the core\n    dumpdir=/var/run/pluto/\n    #\n    # NAT-TRAVERSAL support, see README.NAT-Traversal\n    nat_traversal=yes\n    # exclude networks used on server side by adding %v4:!a.b.c.0/24\n    # It seems that T-Mobile in the US and Rogers/Fido in Canada are\n    # using 25/8 as \"private\" address space on their 3G network.\n    # This range has not been announced via BGP (at least upto 2010-12-21)\n    virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.17.0.0/12,%v4:25.0.0.0/8,%v6:fd00::/8,%v6:fe80::/10\n    # OE is now off by default. Uncomment and change to on, to enable.\n    oe=off\n    # which IPsec stack to use. auto will try netkey, then klips then mast\n    protostack=netkey\n    # Use this to log to a file, or disable logging on embedded systems (like openwrt)\n    #plutostderrlog=/dev/null\n\n# Add connections here\nconn L2TP-PSK\n     authby=secret\n     pfs=no\n     auto=add\n     keyingtries=3\n     dpddelay=30\n     dpdtimeout=120\n     dpdaction=clear\n     rekey=yes\n     ikelifetime=8h\n     keylife=1h\n     type=transport\n     #left=%any\n     left=<LOCAL INTERFACE IP>\n     leftprotoport=17/1701\n     right=XXX.XXX.XXX.XXX\n     #rightsubnet=0.0.0.0/0\n     rightprotoport=17/1701\n\n\nvi /etc/ipsec.secrets\n# This file holds shared secrets or RSA private keys for inter-Pluto\n# authentication.  See ipsec_pluto(8) manpage, and HTML documentation.\n\n# RSA private key for this host, authenticating it to any other host\n# which knows the public part.  Suitable public keys, for ipsec.conf, DNS,\n# or configuration of other implementations, can be extracted conveniently\n# with \"ipsec showhostkey\".\n\n%any XXX.XXX.XXX.XXX : PSK \"PreSharedKey\"\n\n# this file is managed with debconf and will contain the automatically created RSA keys\ninclude /var/lib/openswan/ipsec.secrets.inc\n\n\nvi /etc/xl2tpd/xl2tpd.conf\n;\n; Sample l2tpd configuration file\n;\n; This example file should give you some idea of how the options for l2tpd\n; should work.  The best place to look for a list of all options is in\n; the source code itself, until I have the time to write better documetation :)\n; Specifically, the file \"file.c\" contains a list of commands at the end.\n;\n; You most definitely don't have to spell out everything as it is done here\n;\n; [global]                              ; Global parameters:\n; port = 1701                           ; * Bind to port 1701\n; auth file = /etc/l2tpd/l2tp-secrets   ; * Where our challenge secrets are\n; access control = yes                  ; * Refuse connections without IP match\n; rand source = dev                     ; Source for entropy for random\n;                                       ; numbers, options are:\n;                                       ; dev - reads of /dev/urandom\n;                                       ; sys - uses rand()\n;                                       ; egd - reads from egd socket\n;                                       ; egd is not yet implemented\n;\n; [lns default]                         ; Our fallthrough LNS definition\n; exclusive = no                        ; * Only permit one tunnel per host\n; ip range = 192.168.0.1-192.168.0.20   ; * Allocate from this IP range\n; no ip range = 192.168.0.3-192.168.0.9 ; * Except these hosts\n; ip range = 192.168.0.5                ; * But this one is okay\n; ip range = lac1-lac2                  ; * And anything from lac1 to lac2's IP\n; lac = 192.168.1.4 - 192.168.1.8       ; * These can connect as LAC's\n; no lac = untrusted.marko.net          ; * This guy can't connect\n; hidden bit = no                       ; * Use hidden AVP's?\n; local ip = 192.168.1.2                ; * Our local IP to use\n; length bit = yes                      ; * Use length bit in payload?\n; require chap = yes                    ; * Require CHAP auth. by peer\n; refuse pap = yes                      ; * Refuse PAP authentication\n; refuse chap = no                      ; * Refuse CHAP authentication\n; refuse authentication = no            ; * Refuse authentication altogether\n; require authentication = yes          ; * Require peer to authenticate\n; unix authentication = no              ; * Use /etc/passwd for auth.\n; name = myhostname                     ; * Report this as our hostname\n; ppp debug = no                        ; * Turn on PPP debugging\n; pppoptfile = /etc/ppp/options.l2tpd.lns   ; * ppp options file\n; call rws = 10                         ; * RWS for call (-1 is valid)\n; tunnel rws = 4                        ; * RWS for tunnel (must be > 0)\n; flow bit = yes                        ; * Include sequence numbers\n; challenge = yes                       ; * Challenge authenticate peer ;\n; rx bps = 10000000             ; Receive tunnel speed\n; tx bps = 10000000             ; Transmit tunnel speed\n; bps = 100000                  ; Define both receive and transmit speed in one option\n\n; [lac marko]                           ; Example VPN LAC definition\n; lns = lns.marko.net                   ; * Who is our LNS?\n; lns = lns2.marko.net                  ; * A backup LNS (not yet used)\n; redial = yes                          ; * Redial if disconnected?\n; redial timeout = 15                   ; * Wait n seconds between redials\n; max redials = 5                       ; * Give up after n consecutive failures\n; hidden bit = yes                      ; * User hidden AVP's?\n; local ip = 192.168.1.1                ; * Force peer to use this IP for us\n; remote ip = 192.168.1.2               ; * Force peer to use this as their IP\n; length bit = no                       ; * Use length bit in payload?\n; require pap = no                      ; * Require PAP auth. by peer\n; require chap = yes                    ; * Require CHAP auth. by peer\n; refuse pap = yes                      ; * Refuse PAP authentication\n; refuse chap = no                      ; * Refuse CHAP authentication\n; refuse authentication = no            ; * Refuse authentication altogether\n; require authentication = yes          ; * Require peer to authenticate\n; name = marko                          ; * Report this as our hostname\n; ppp debug = no                        ; * Turn on PPP debugging\n; pppoptfile = /etc/ppp/options.l2tpd.marko ; * ppp options file for this lac\n; call rws = 10                         ; * RWS for call (-1 is valid)\n; tunnel rws = 4                        ; * RWS for tunnel (must be > 0)\n; flow bit = yes                        ; * Include sequence numbers\n; challenge = yes                       ; * Challenge authenticate peer\n;\n; [lac cisco]                           ; Another quick LAC\n; lns = cisco.marko.net                 ; * Required, but can take from default\n; require authentication = yes\n[lac vpn-connection]\nlns = XXX.XXX.XXX.XXX\nppp debug = yes\npppoptfile = /etc/ppp/options.l2tpd.client\nlength bit = yes\n\n\nvi /etc/ppp/options.l2tpd.client\nipcp-accept-local\nipcp-accept-remote\nrefuse-eap\nrequire-mschap-v2\nnoccp\nnoauth\nidle 1800\nmtu 1410\nmru 1410\ndefaultroute\nusepeerdns\ndebug\nlock\nconnect-delay 5000\nname <USERNAME>\npassword <PASSWORD>\n\n\n\u304a\u307e\u3058\u306a\u3044\n\u3053\u308c\u3092\u3084\u3089\u306a\u3044\u3068ipsec verify\u304c\u901a\u3089\u306a\u3044\u3093\u3060\u3088\u306d\n$ for line in `ls /proc/sys/net/ipv4/conf/*/send_redirects`; do echo 0 > $line ;done\n\n\n\u691c\u8a3c\n\u901a\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3002\n$ ipsec verify\nChecking your system to see if IPsec got installed and started correctly:\nVersion check and ipsec on-path                                 [OK]\nLinux Openswan U2.6.38/K3.13.0-45-generic (netkey)\nChecking for IPsec support in kernel                            [OK]\n SAref kernel support                                           [N/A]\n NETKEY:  Testing XFRM related proc values                      [FAILED]\n\n  Please disable /proc/sys/net/ipv4/conf/*/send_redirects\n  or NETKEY will cause the sending of bogus ICMP redirects!\n\n    [FAILED]\n\n  Please disable /proc/sys/net/ipv4/conf/*/accept_redirects\n  or NETKEY will accept bogus ICMP redirects!\n\n    [OK]\nChecking that pluto is running                                  [OK]\n Pluto listening for IKE on udp 500                             [OK]\n Pluto listening for NAT-T on udp 4500                          [OK]\nTwo or more interfaces found, checking IP forwarding            [FAILED]\nChecking NAT and MASQUERADEing                                  [OK]\nChecking for 'ip' command                                       [OK]\nChecking /bin/sh is not /bin/dash                               [WARNING]\nChecking for 'iptables' command                                 [OK]\nOpportunistic Encryption Support                                [DISABLED]\n\n\n\u30b5\u30fc\u30d3\u30b9\u306e\u8d77\u52d5\n\u3053\u308c\u3067\u63a5\u7d9a\u3067\u304d\u308b\n$ ipsec auto --add L2TP-PSK\n$ ipsec auto --up L2TP-PSK\n$ xl2tpd-control connect vpn-connection\n00 OK\n\n\n\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u306e\u767b\u9332\n\u3053\u308c\u5927\u4e8b\u3002\n$ route add -net 172.17.5.0 netmask 255.255.255.0 dev ppp0\n\n# \u306a\u306b\u3053\u308c\n\u6700\u8fd1\u3001VPN\u306e\u5148\u306b\u3042\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3084APP\u30b5\u30fc\u30d0\u30fc\u3068\u9023\u5e2f\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u3053\u3068\u304c\u3042\u3063\u3066\u3001\n\u305d\u306e\u6642\u306e\u30e1\u30e2\u3002\u3053\u308c\u3084\u308b\u3068VPN\u63a5\u7d9a\u304c\u51fa\u6765\u3066\u3001ppp0\u3063\u3066\u3044\u3046\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u51fa\u6765\u308b\u3002\n\u5b9f\u969b\u306f\u3001\u3053\u308c\u306bVPN\u5207\u65ad\u3092\u691c\u77e5\u3057\u3066\u518d\u63a5\u7d9a\u3059\u308b\u30c7\u30fc\u30e2\u30f3\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u3066\u308b\u3002\n\uff08\u3053\u306e\u4ed5\u7d44\u304c\u306a\u3044\u3068\u5b9f\u5229\u7528\u304c\u96e3\u3057\u3044\u3002\u5f8c\u65e5\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u30a2\u30c3\u30d7\u4e88\u5b9a\uff09\n\n# \u60f3\u5b9a\u3059\u308b\u74b0\u5883\n* \u30d7\u30ed\u30c8\u30b3\u30eb\uff1aL2TP/IPsec\n* \u63a5\u7d9a\u5148\uff1aXXX.XXX.XXX.XXX\n* \u53d6\u5f97\u60f3\u5b9aIP\uff1a172.17.5.X\n\n# \u624b\u9806\n\n## \u30d1\u30c3\u30b1\u30fc\u30b8\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u307f\u3093\u306a\u3060\u3044\u3059\u304dapt-get\n\n```bash\nsudo apt-get install l2tp-ipsec-vpn\nsudo apt-get install lsof\n```\n\n## \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u30b3\u30d4\u30fc\n\n### vi /etc/ipsec.conf\n\n```bash\n# /etc/ipsec.conf - Openswan IPsec configuration file\n\n# This file:  /usr/share/doc/openswan/ipsec.conf-sample\n#\n# Manual:     ipsec.conf.5\n\n\nversion\t2.0\t# conforms to second version of ipsec.conf specification\n\n# basic configuration\nconfig setup\n\t# Do not set debug options to debug configuration issues!\n\t# plutodebug / klipsdebug = \"all\", \"none\" or a combation from below:\n\t# \"raw crypt parsing emitting control klips pfkey natt x509 dpd private\"\n\t# eg:\n\t# plutodebug=\"control parsing\"\n\t# Again: only enable plutodebug or klipsdebug when asked by a developer\n\t#\n\t# enable to get logs per-peer\n\t# plutoopts=\"--perpeerlog\"\n\tplutoopts=\"--interface=eth0\"\n\t#\n\t# Enable core dumps (might require system changes, like ulimit -C)\n\t# This is required for abrtd to work properly\n\t# Note: incorrect SElinux policies might prevent pluto writing the core\n\tdumpdir=/var/run/pluto/\n\t#\n\t# NAT-TRAVERSAL support, see README.NAT-Traversal\n\tnat_traversal=yes\n\t# exclude networks used on server side by adding %v4:!a.b.c.0/24\n\t# It seems that T-Mobile in the US and Rogers/Fido in Canada are\n\t# using 25/8 as \"private\" address space on their 3G network.\n\t# This range has not been announced via BGP (at least upto 2010-12-21)\n\tvirtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.17.0.0/12,%v4:25.0.0.0/8,%v6:fd00::/8,%v6:fe80::/10\n\t# OE is now off by default. Uncomment and change to on, to enable.\n\toe=off\n\t# which IPsec stack to use. auto will try netkey, then klips then mast\n\tprotostack=netkey\n\t# Use this to log to a file, or disable logging on embedded systems (like openwrt)\n\t#plutostderrlog=/dev/null\n\n# Add connections here\nconn L2TP-PSK\n     authby=secret\n     pfs=no\n     auto=add\n     keyingtries=3\n     dpddelay=30\n     dpdtimeout=120\n     dpdaction=clear\n     rekey=yes\n     ikelifetime=8h\n     keylife=1h\n     type=transport\n     #left=%any\n     left=<LOCAL INTERFACE IP>\n     leftprotoport=17/1701\n     right=XXX.XXX.XXX.XXX\n     #rightsubnet=0.0.0.0/0\n     rightprotoport=17/1701\n```\n\n### vi /etc/ipsec.secrets\n\n```bash\n# This file holds shared secrets or RSA private keys for inter-Pluto\n# authentication.  See ipsec_pluto(8) manpage, and HTML documentation.\n\n# RSA private key for this host, authenticating it to any other host\n# which knows the public part.  Suitable public keys, for ipsec.conf, DNS,\n# or configuration of other implementations, can be extracted conveniently\n# with \"ipsec showhostkey\".\n\n%any XXX.XXX.XXX.XXX : PSK \"PreSharedKey\"\n\n# this file is managed with debconf and will contain the automatically created RSA keys\ninclude /var/lib/openswan/ipsec.secrets.inc\n```\n\n### vi /etc/xl2tpd/xl2tpd.conf\n\n```bash\n;\n; Sample l2tpd configuration file\n;\n; This example file should give you some idea of how the options for l2tpd\n; should work.  The best place to look for a list of all options is in\n; the source code itself, until I have the time to write better documetation :)\n; Specifically, the file \"file.c\" contains a list of commands at the end.\n;\n; You most definitely don't have to spell out everything as it is done here\n;\n; [global]\t\t\t\t\t\t\t\t; Global parameters:\n; port = 1701\t\t\t\t\t\t \t; * Bind to port 1701\n; auth file = /etc/l2tpd/l2tp-secrets \t; * Where our challenge secrets are\n; access control = yes\t\t\t\t\t; * Refuse connections without IP match\n; rand source = dev                     ; Source for entropy for random\n;                                       ; numbers, options are:\n;                                       ; dev - reads of /dev/urandom\n;                                       ; sys - uses rand()\n;                                       ; egd - reads from egd socket\n;                                       ; egd is not yet implemented\n;\n; [lns default]\t\t\t\t\t\t\t; Our fallthrough LNS definition\n; exclusive = no\t\t\t\t\t\t; * Only permit one tunnel per host\n; ip range = 192.168.0.1-192.168.0.20\t; * Allocate from this IP range\n; no ip range = 192.168.0.3-192.168.0.9 ; * Except these hosts\n; ip range = 192.168.0.5\t\t\t\t; * But this one is okay\n; ip range = lac1-lac2\t\t\t\t\t; * And anything from lac1 to lac2's IP\n; lac = 192.168.1.4 - 192.168.1.8\t\t; * These can connect as LAC's\n; no lac = untrusted.marko.net\t\t\t; * This guy can't connect\n; hidden bit = no\t\t\t\t\t\t; * Use hidden AVP's?\n; local ip = 192.168.1.2\t\t\t\t; * Our local IP to use\n; length bit = yes\t\t\t\t\t\t; * Use length bit in payload?\n; require chap = yes\t\t\t\t\t; * Require CHAP auth. by peer\n; refuse pap = yes\t\t\t\t\t\t; * Refuse PAP authentication\n; refuse chap = no\t\t\t\t\t\t; * Refuse CHAP authentication\n; refuse authentication = no\t\t\t; * Refuse authentication altogether\n; require authentication = yes\t\t\t; * Require peer to authenticate\n; unix authentication = no\t\t\t\t; * Use /etc/passwd for auth.\n; name = myhostname\t\t\t\t\t\t; * Report this as our hostname\n; ppp debug = no\t\t\t\t\t\t; * Turn on PPP debugging\n; pppoptfile = /etc/ppp/options.l2tpd.lns\t; * ppp options file\n; call rws = 10\t\t\t\t\t\t\t; * RWS for call (-1 is valid)\n; tunnel rws = 4\t\t\t\t\t\t; * RWS for tunnel (must be > 0)\n; flow bit = yes\t\t\t\t\t\t; * Include sequence numbers\n; challenge = yes\t\t\t\t\t\t; * Challenge authenticate peer ;\n; rx bps = 10000000\t\t\t\t; Receive tunnel speed\n; tx bps = 10000000\t\t\t\t; Transmit tunnel speed\n; bps = 100000\t\t\t\t\t; Define both receive and transmit speed in one option\n\n; [lac marko]\t\t\t\t\t\t\t; Example VPN LAC definition\n; lns = lns.marko.net\t\t\t\t\t; * Who is our LNS?\n; lns = lns2.marko.net\t\t\t\t\t; * A backup LNS (not yet used)\n; redial = yes\t\t\t\t\t\t\t; * Redial if disconnected?\n; redial timeout = 15\t\t\t\t\t; * Wait n seconds between redials\n; max redials = 5\t\t\t\t\t\t; * Give up after n consecutive failures\n; hidden bit = yes\t\t\t\t\t\t; * User hidden AVP's?\n; local ip = 192.168.1.1\t\t\t\t; * Force peer to use this IP for us\n; remote ip = 192.168.1.2\t\t\t\t; * Force peer to use this as their IP\n; length bit = no\t\t\t\t\t\t; * Use length bit in payload?\n; require pap = no\t\t\t\t\t\t; * Require PAP auth. by peer\n; require chap = yes\t\t\t\t\t; * Require CHAP auth. by peer\n; refuse pap = yes\t\t\t\t\t\t; * Refuse PAP authentication\n; refuse chap = no\t\t\t\t\t\t; * Refuse CHAP authentication\n; refuse authentication = no\t\t\t; * Refuse authentication altogether\n; require authentication = yes\t\t\t; * Require peer to authenticate\n; name = marko\t\t\t\t\t\t\t; * Report this as our hostname\n; ppp debug = no\t\t\t\t\t\t; * Turn on PPP debugging\n; pppoptfile = /etc/ppp/options.l2tpd.marko\t; * ppp options file for this lac\n; call rws = 10\t\t\t\t\t\t\t; * RWS for call (-1 is valid)\n; tunnel rws = 4\t\t\t\t\t\t; * RWS for tunnel (must be > 0)\n; flow bit = yes\t\t\t\t\t\t; * Include sequence numbers\n; challenge = yes\t\t\t\t\t\t; * Challenge authenticate peer\n;\n; [lac cisco]\t\t\t\t\t\t\t; Another quick LAC\n; lns = cisco.marko.net\t\t\t\t\t; * Required, but can take from default\n; require authentication = yes\n[lac vpn-connection]\nlns = XXX.XXX.XXX.XXX\nppp debug = yes\npppoptfile = /etc/ppp/options.l2tpd.client\nlength bit = yes\n```\n\n### vi /etc/ppp/options.l2tpd.client\n\n```bash\nipcp-accept-local\nipcp-accept-remote\nrefuse-eap\nrequire-mschap-v2\nnoccp\nnoauth\nidle 1800\nmtu 1410\nmru 1410\ndefaultroute\nusepeerdns\ndebug\nlock\nconnect-delay 5000\nname <USERNAME>\npassword <PASSWORD>\n```\n\n## \u304a\u307e\u3058\u306a\u3044\n\u3053\u308c\u3092\u3084\u3089\u306a\u3044\u3068ipsec verify\u304c\u901a\u3089\u306a\u3044\u3093\u3060\u3088\u306d\n\n```bash\n$ for line in `ls /proc/sys/net/ipv4/conf/*/send_redirects`; do echo 0 > $line ;done\n```\n\n## \u691c\u8a3c\n\u901a\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3002\n\n```bash\n$ ipsec verify\nChecking your system to see if IPsec got installed and started correctly:\nVersion check and ipsec on-path                             \t[OK]\nLinux Openswan U2.6.38/K3.13.0-45-generic (netkey)\nChecking for IPsec support in kernel                        \t[OK]\n SAref kernel support                                       \t[N/A]\n NETKEY:  Testing XFRM related proc values                  \t[FAILED]\n\n  Please disable /proc/sys/net/ipv4/conf/*/send_redirects\n  or NETKEY will cause the sending of bogus ICMP redirects!\n\n\t[FAILED]\n\n  Please disable /proc/sys/net/ipv4/conf/*/accept_redirects\n  or NETKEY will accept bogus ICMP redirects!\n\n\t[OK]\nChecking that pluto is running                              \t[OK]\n Pluto listening for IKE on udp 500                         \t[OK]\n Pluto listening for NAT-T on udp 4500                      \t[OK]\nTwo or more interfaces found, checking IP forwarding        \t[FAILED]\nChecking NAT and MASQUERADEing                              \t[OK]\nChecking for 'ip' command                                   \t[OK]\nChecking /bin/sh is not /bin/dash                           \t[WARNING]\nChecking for 'iptables' command                             \t[OK]\nOpportunistic Encryption Support                            \t[DISABLED]\n```\n\n## \u30b5\u30fc\u30d3\u30b9\u306e\u8d77\u52d5\n\u3053\u308c\u3067\u63a5\u7d9a\u3067\u304d\u308b\n\n```bash\n$ ipsec auto --add L2TP-PSK\n$ ipsec auto --up L2TP-PSK\n$ xl2tpd-control connect vpn-connection\n00 OK\n```\n\n## \u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u306e\u767b\u9332\n\u3053\u308c\u5927\u4e8b\u3002\n\n```bash\n$ route add -net 172.17.5.0 netmask 255.255.255.0 dev ppp0\n```\n", "tags": ["ipsec", "VPN", "Ubuntu"]}