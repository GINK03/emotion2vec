{"context": " More than 1 year has passed since last update.\u524d\u306e\u8a18\u4e8b\n\u4f8b\u306e\u4ef6\u306e\u5bfe\u51e6\u3068\u3057\u3066\u306f\u4e0d\u5341\u5206\u3060\u304c\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u4e2d\u306b\u7279\u5b9a\u306e\u6587\u5b57\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u7121\u8996\u3059\u308b\u65b9\u6cd5\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.util.Collection;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Vector;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Part;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.struts.action.ActionServlet;\n\npublic class SecureStrutsActioServlet extends ActionServlet {\n\n    String excludes = \"class,classLoader,type\"; // init param \u3067\u8a2d\u5b9a\n\n    @Override\n    public void process(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        // TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\n        super.process(new SecureHttpServletRequest(request), response);\n    }\n\n    protected class PackInputStream extends InputStream {\n\n        final InputStream is;\n        final OutputStream os;\n\n        public PackInputStream(InputStream is, OutputStream os) {\n            super();\n            this.is = is;\n            this.os = os;\n        }\n\n        public int available() throws IOException {\n            return is.available();\n        }\n\n        public boolean equals(Object arg0) {\n            return is.equals(arg0);\n        }\n\n        public int hashCode() {\n            return is.hashCode();\n        }\n\n        public void mark(int arg0) {\n            is.mark(arg0);\n        }\n\n        public boolean markSupported() {\n            return is.markSupported();\n        }\n\n        public int read() throws IOException {\n            return is.read();\n        }\n\n        public int read(byte[] arg0, int arg1, int arg2) throws IOException {\n            return is.read(arg0, arg1, arg2);\n        }\n\n        public int read(byte[] arg0) throws IOException {\n            return is.read(arg0);\n        }\n\n        public void reset() throws IOException {\n            is.reset();\n        }\n\n        public long skip(long arg0) throws IOException {\n            return is.skip(arg0);\n        }\n\n        public String toString() {\n            return is.toString();\n        }\n\n        @Override\n        public void close() throws IOException {\n            is.close();\n            os.close();\n        }\n\n    }\n\n    protected class SecurePart implements Part {\n\n        final Part part;\n\n        public SecurePart(Part part) {\n            this.part = part;\n        }\n\n        @Override\n        public InputStream getInputStream() throws IOException {\n            PackInputStream pcis = null;\n            PipedOutputStream pos = new PipedOutputStream();\n            PipedInputStream pis = new PipedInputStream(pos);\n            try (\n                    InputStream is = part.getInputStream();\n                    InputStreamReader isr = new InputStreamReader(is);\n                    BufferedReader in = new BufferedReader(isr);\n                    PrintWriter out = new PrintWriter(pos);) {\n                pcis = new PackInputStream(pis, pos);\n\n                String line = null;\n                loop:\n                while ((line = in.readLine()) != null) {\n                    if (line.indexOf(\"=\") != -1) {\n                        for (String exclude : excludes.split(\",\")) {\n                            if (StringUtils.containsIgnoreCase(line.split(\"=\")[0], exclude)) {\n                                continue loop;\n                            }\n                        }\n                        out.println(line);\n                    }\n                }\n            }\n            return pcis;\n        }\n\n        @Override\n        public String getContentType() {\n            return part.getContentType();\n        }\n\n        @Override\n        public String getName() {\n            return part.getName();\n        }\n\n        @Override\n        public long getSize() {\n            return part.getSize();\n        }\n\n        @Override\n        public void write(String fileName) throws IOException {\n            part.write(fileName);\n        }\n\n        @Override\n        public void delete() throws IOException {\n            part.delete();\n        }\n\n        @Override\n        public String getHeader(String name) {\n            return part.getHeader(name);\n        }\n\n        @Override\n        public Collection<String> getHeaders(String name) {\n            return part.getHeaders(name);\n        }\n\n        @Override\n        public Collection<String> getHeaderNames() {\n            return part.getHeaderNames();\n        }\n\n    }\n\n    protected class SecureHttpServletRequest extends HttpServletRequestWrapper {\n\n        public SecureHttpServletRequest(HttpServletRequest request) {\n            super(request);\n        }\n\n        @Override\n        public Map<String, String[]> getParameterMap() {\n            Map<String, String[]> map = super.getParameterMap();\n            Iterator<Map.Entry<String, String[]>> i = map.entrySet().iterator();\n            for (; i.hasNext();) {\n                Map.Entry<String, String[]> entry = i.next();\n                for (String exclude : excludes.split(\",\")) {\n                    if (StringUtils.containsIgnoreCase(entry.getKey(), exclude)) {\n                        i.remove();\n                    }\n                }\n            }\n            return map;\n            return map;\n        }\n\n        @Override\n        public Enumeration<String> getParameterNames() {\n            Enumeration<String> enumeration = super.getParameterNames();\n            Vector<String> vector = new Vector<String>();\n            loop:\n            while (enumeration.hasMoreElements()) {\n                String target = enumeration.nextElement();\n                for (String exclude : excludes.split(\",\")) {\n                    if (StringUtils.containsIgnoreCase(target, exclude)) {\n                        continue loop;\n                    }\n                }\n                vector.addElement(target);\n            }\n            return vector.elements();\n        }\n\n        @Override\n        public Collection<Part> getParts() throws IOException, ServletException {\n            Collection<Part> parts = super.getParts();\n            Set<Part> retParts = new HashSet<>();\n            for (Part part : parts) {\n                retParts.add(new SecurePart(part));\n            }\n            return retParts;\n        }\n\n        @Override\n        public Part getPart(String name) throws IOException, ServletException {\n            return new SecurePart(super.getPart(name));\n        }\n\n        /*\n                @Override\n                public String[] getParameterValues(String name) {\n                    for (String exclude : excludes.split(\",\")) {\n                        if (StringUtils.containsIgnoreCase(name, exclude)) {\n                            return null;\n                        }\n                    }\n                    return super.getParameterValues(name);\n                }\n\n                @Override\n                public String getParameter(String name) {\n                    for (String exclude : excludes.split(\",\")) {\n                        if (StringUtils.containsIgnoreCase(name, exclude)) {\n                            return null;\n                        }\n                    }\n                    return super.getParameter(name);\n                }\n        */\n    }\n\n}\n\n\n[\u524d\u306e\u8a18\u4e8b][1]\n\n\u4f8b\u306e\u4ef6\u306e\u5bfe\u51e6\u3068\u3057\u3066\u306f\u4e0d\u5341\u5206\u3060\u304c\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u4e2d\u306b\u7279\u5b9a\u306e\u6587\u5b57\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u7121\u8996\u3059\u308b\u65b9\u6cd5\n\n```java\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.io.PrintWriter;\nimport java.util.Collection;\nimport java.util.Enumeration;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Vector;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Part;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.struts.action.ActionServlet;\n\npublic class SecureStrutsActioServlet extends ActionServlet {\n\n\tString excludes = \"class,classLoader,type\"; // init param \u3067\u8a2d\u5b9a\n\n\t@Override\n\tpublic void process(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n\t\t// TODO \u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u30fb\u30b9\u30bf\u30d6\n\t\tsuper.process(new SecureHttpServletRequest(request), response);\n\t}\n\n\tprotected class PackInputStream extends InputStream {\n\n\t\tfinal InputStream is;\n\t\tfinal OutputStream os;\n\n\t\tpublic PackInputStream(InputStream is, OutputStream os) {\n\t\t\tsuper();\n\t\t\tthis.is = is;\n\t\t\tthis.os = os;\n\t\t}\n\n\t\tpublic int available() throws IOException {\n\t\t\treturn is.available();\n\t\t}\n\n\t\tpublic boolean equals(Object arg0) {\n\t\t\treturn is.equals(arg0);\n\t\t}\n\n\t\tpublic int hashCode() {\n\t\t\treturn is.hashCode();\n\t\t}\n\n\t\tpublic void mark(int arg0) {\n\t\t\tis.mark(arg0);\n\t\t}\n\n\t\tpublic boolean markSupported() {\n\t\t\treturn is.markSupported();\n\t\t}\n\n\t\tpublic int read() throws IOException {\n\t\t\treturn is.read();\n\t\t}\n\n\t\tpublic int read(byte[] arg0, int arg1, int arg2) throws IOException {\n\t\t\treturn is.read(arg0, arg1, arg2);\n\t\t}\n\n\t\tpublic int read(byte[] arg0) throws IOException {\n\t\t\treturn is.read(arg0);\n\t\t}\n\n\t\tpublic void reset() throws IOException {\n\t\t\tis.reset();\n\t\t}\n\n\t\tpublic long skip(long arg0) throws IOException {\n\t\t\treturn is.skip(arg0);\n\t\t}\n\n\t\tpublic String toString() {\n\t\t\treturn is.toString();\n\t\t}\n\n\t\t@Override\n\t\tpublic void close() throws IOException {\n\t\t\tis.close();\n\t\t\tos.close();\n\t\t}\n\n\t}\n\n\tprotected class SecurePart implements Part {\n\n\t\tfinal Part part;\n\n\t\tpublic SecurePart(Part part) {\n\t\t\tthis.part = part;\n\t\t}\n\n\t\t@Override\n\t\tpublic InputStream getInputStream() throws IOException {\n\t\t\tPackInputStream pcis = null;\n\t\t\tPipedOutputStream pos = new PipedOutputStream();\n\t\t\tPipedInputStream pis = new PipedInputStream(pos);\n\t\t\ttry (\n\t\t\t\t\tInputStream is = part.getInputStream();\n\t\t\t\t\tInputStreamReader isr = new InputStreamReader(is);\n\t\t\t\t\tBufferedReader in = new BufferedReader(isr);\n\t\t\t\t\tPrintWriter out = new PrintWriter(pos);) {\n\t\t\t\tpcis = new PackInputStream(pis, pos);\n\n\t\t\t\tString line = null;\n\t\t\t\tloop:\n\t\t\t\twhile ((line = in.readLine()) != null) {\n\t\t\t\t\tif (line.indexOf(\"=\") != -1) {\n\t\t\t\t\t\tfor (String exclude : excludes.split(\",\")) {\n\t\t\t\t\t\t\tif (StringUtils.containsIgnoreCase(line.split(\"=\")[0], exclude)) {\n\t\t\t\t\t\t\t\tcontinue loop;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tout.println(line);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pcis;\n\t\t}\n\n\t\t@Override\n\t\tpublic String getContentType() {\n\t\t\treturn part.getContentType();\n\t\t}\n\n\t\t@Override\n\t\tpublic String getName() {\n\t\t\treturn part.getName();\n\t\t}\n\n\t\t@Override\n\t\tpublic long getSize() {\n\t\t\treturn part.getSize();\n\t\t}\n\n\t\t@Override\n\t\tpublic void write(String fileName) throws IOException {\n\t\t\tpart.write(fileName);\n\t\t}\n\n\t\t@Override\n\t\tpublic void delete() throws IOException {\n\t\t\tpart.delete();\n\t\t}\n\n\t\t@Override\n\t\tpublic String getHeader(String name) {\n\t\t\treturn part.getHeader(name);\n\t\t}\n\n\t\t@Override\n\t\tpublic Collection<String> getHeaders(String name) {\n\t\t\treturn part.getHeaders(name);\n\t\t}\n\n\t\t@Override\n\t\tpublic Collection<String> getHeaderNames() {\n\t\t\treturn part.getHeaderNames();\n\t\t}\n\n\t}\n\n\tprotected class SecureHttpServletRequest extends HttpServletRequestWrapper {\n\n\t\tpublic SecureHttpServletRequest(HttpServletRequest request) {\n\t\t\tsuper(request);\n\t\t}\n\n\t\t@Override\n\t\tpublic Map<String, String[]> getParameterMap() {\n\t\t\tMap<String, String[]> map = super.getParameterMap();\n\t\t\tIterator<Map.Entry<String, String[]>> i = map.entrySet().iterator();\n\t\t\tfor (; i.hasNext();) {\n\t\t\t\tMap.Entry<String, String[]> entry = i.next();\n\t\t\t\tfor (String exclude : excludes.split(\",\")) {\n\t\t\t\t\tif (StringUtils.containsIgnoreCase(entry.getKey(), exclude)) {\n\t\t\t\t\t\ti.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn map;\n\t\t\treturn map;\n\t\t}\n\n\t\t@Override\n\t\tpublic Enumeration<String> getParameterNames() {\n\t\t\tEnumeration<String> enumeration = super.getParameterNames();\n\t\t\tVector<String> vector = new Vector<String>();\n\t\t\tloop:\n\t\t\twhile (enumeration.hasMoreElements()) {\n\t\t\t\tString target = enumeration.nextElement();\n\t\t\t\tfor (String exclude : excludes.split(\",\")) {\n\t\t\t\t\tif (StringUtils.containsIgnoreCase(target, exclude)) {\n\t\t\t\t\t\tcontinue loop;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvector.addElement(target);\n\t\t\t}\n\t\t\treturn vector.elements();\n\t\t}\n\n\t\t@Override\n\t\tpublic Collection<Part> getParts() throws IOException, ServletException {\n\t\t\tCollection<Part> parts = super.getParts();\n\t\t\tSet<Part> retParts = new HashSet<>();\n\t\t\tfor (Part part : parts) {\n\t\t\t\tretParts.add(new SecurePart(part));\n\t\t\t}\n\t\t\treturn retParts;\n\t\t}\n\n\t\t@Override\n\t\tpublic Part getPart(String name) throws IOException, ServletException {\n\t\t\treturn new SecurePart(super.getPart(name));\n\t\t}\n\n\t\t/*\n\t\t\t\t@Override\n\t\t\t\tpublic String[] getParameterValues(String name) {\n\t\t\t\t\tfor (String exclude : excludes.split(\",\")) {\n\t\t\t\t\t\tif (StringUtils.containsIgnoreCase(name, exclude)) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn super.getParameterValues(name);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic String getParameter(String name) {\n\t\t\t\t\tfor (String exclude : excludes.split(\",\")) {\n\t\t\t\t\t\tif (StringUtils.containsIgnoreCase(name, exclude)) {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn super.getParameter(name);\n\t\t\t\t}\n\t\t*/\n\t}\n\n}\n\n```\n\n\n\n[1]: http://qiita.com/asahina_dev/items/39311a83d1efc0a2aecf\n", "tags": ["Struts1", "Java"]}