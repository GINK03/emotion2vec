{"context": " More than 1 year has passed since last update.\n\nProxy\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\n\u8abf\u3079\u305f\u9650\u308a\u3001\u666e\u901a\u306b\u306f\u3067\u304d\u306a\u3044\u69d8\u5b50\u3002\n\u4eca\u56de\u306e\u65b9\u6cd5\u306f\u3001\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3069\u3053\u305e\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u7121\u7406\u3084\u308a\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306e\u3067\u4fdd\u8a3c\u306f\u3055\u308c\u306a\u3044\u30bd\u30fc\u30b9\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002  \n\u3061\u3083\u3093\u3068\u3057\u305f\uff08\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306a\uff09\u65b9\u6cd5\u304c\u3042\u308b\u306a\u3089\u77e5\u308a\u305f\u3044\u3067\u3059\u3002  \n\u53c2\u8003\uff1a\nhttps://rmannibucau.wordpress.com/2014/03/27/java-8-default-interface-methods-and-jdk-dynamic-proxies/\n    /**\n     * \u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n     */\n    private static Object invokeDefaultMethod(Object proxy, Method method, Object[] args) throws Throwable {\n        //\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u30a2\u30af\u30bb\u30b9\n        Constructor<MethodHandles.Lookup> constructor = MethodHandles.Lookup.class\n                .getDeclaredConstructor(Class.class, int.class);\n        constructor.setAccessible(true);\n\n        Class<?> declaringClass = method.getDeclaringClass();\n        int allModes = MethodHandles.Lookup.PUBLIC | MethodHandles.Lookup.PRIVATE | MethodHandles.Lookup.PROTECTED | MethodHandles.Lookup.PACKAGE;\n        return constructor.newInstance(declaringClass, allModes)\n                .unreflectSpecial(method, declaringClass)\n                .bindTo(proxy)\n                .invokeWithArguments(args);\n    }\n\n\u5b9f\u884c\n            String[] array = { \"a\", \"b\", \"c\" };\n            @SuppressWarnings(\"unchecked\")\n            List<String> proxyList = (List<String>) Proxy.newProxyInstance(\n                    Thread.currentThread().getContextClassLoader(),\n                    new Class<?>[] { List.class },\n                    (proxy, method, args) -> {\n                        if (method.isDefault()) {\n                            return invokeDefaultMethod(proxy, method, args);\n                        } else if (method.getName().equals(\"iterator\") && method.getParameterCount() == 0) {\n                            //forEach()\u5185\u90e8\u3067\u306fiterator()\u304c\u5fc5\u8981\n                            return Arrays.stream(array).iterator();\n                        }\n\n                        throw new UnsupportedOperationException(method.toString());\n                    });\n            //\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u306eforEach\u3092\u5b9f\u884c\n            proxyList.forEach(System.out::print);//abc\n            System.out.println();\n\n\n\u30c0\u30e1\u306a\u30d1\u30bf\u30fc\u30f3\n\u666e\u901a\u306b\u3053\u3046\u66f8\u304d\u305f\u3044\u3068\u3053\u308d\u3002\n    private static Object invokeDefaultMethod(Object proxy, Method method, Object[] args) throws Throwable {\n        Class<?> declaringClass = method.getDeclaringClass();\n\n        return MethodHandles.lookup().in(declaringClass)\n                .unreflectSpecial(method, declaringClass)\n                .bindTo(proxy)\n                .invokeWithArguments(args);\n    }\n\n\u3057\u304b\u3057\u3053\u308c\u3060\u3068\u30a8\u30e9\u30fc\n\u6b8b\u5ff5\u3002\nException in thread \"main\" java.lang.reflect.UndeclaredThrowableException\n    at com.sun.proxy.$Proxy0.forEach(Unknown Source)\n    at hogehoge.XXXXXX.main(XXXXXX.java:XX)\nCaused by: java.lang.IllegalAccessException: no private access for invokespecial: interface java.lang.Iterable, from java.lang.Iterable/public\n    at java.lang.invoke.MemberName.makeAccessException(MemberName.java:852)\n    at java.lang.invoke.MethodHandles$Lookup.checkSpecialCaller(MethodHandles.java:1568)\n    at java.lang.invoke.MethodHandles$Lookup.unreflectSpecial(MethodHandles.java:1227)\n    at hogehoge.XXXXXX.invokeDefaultMethod(XXXXXX.java:XX)\n    at hogehoge.XXXXXX.lambda$1(XXXXXX.java:XX)\n    ... 2 more\n\n# Proxy\u3067\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\n\n\u8abf\u3079\u305f\u9650\u308a\u3001\u666e\u901a\u306b\u306f\u3067\u304d\u306a\u3044\u69d8\u5b50\u3002\n\u4eca\u56de\u306e\u65b9\u6cd5\u306f\u3001\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3069\u3053\u305e\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u7121\u7406\u3084\u308a\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306e\u3067\u4fdd\u8a3c\u306f\u3055\u308c\u306a\u3044\u30bd\u30fc\u30b9\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002  \n\n\u3061\u3083\u3093\u3068\u3057\u305f\uff08\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u306a\uff09\u65b9\u6cd5\u304c\u3042\u308b\u306a\u3089\u77e5\u308a\u305f\u3044\u3067\u3059\u3002  \n\n\n\u53c2\u8003\uff1a\nhttps://rmannibucau.wordpress.com/2014/03/27/java-8-default-interface-methods-and-jdk-dynamic-proxies/\n\n\n```java\n\t/**\n\t * \u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n\t */\n\tprivate static Object invokeDefaultMethod(Object proxy, Method method, Object[] args) throws Throwable {\n\t\t//\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u30a2\u30af\u30bb\u30b9\n\t\tConstructor<MethodHandles.Lookup> constructor = MethodHandles.Lookup.class\n\t\t\t\t.getDeclaredConstructor(Class.class, int.class);\n\t\tconstructor.setAccessible(true);\n\n\t\tClass<?> declaringClass = method.getDeclaringClass();\n\t\tint allModes = MethodHandles.Lookup.PUBLIC | MethodHandles.Lookup.PRIVATE | MethodHandles.Lookup.PROTECTED | MethodHandles.Lookup.PACKAGE;\n\t\treturn constructor.newInstance(declaringClass, allModes)\n\t\t\t\t.unreflectSpecial(method, declaringClass)\n\t\t\t\t.bindTo(proxy)\n\t\t\t\t.invokeWithArguments(args);\n\t}\n```\n\n\u5b9f\u884c\n\n```java\n\t\t\tString[] array = { \"a\", \"b\", \"c\" };\n\t\t\t@SuppressWarnings(\"unchecked\")\n\t\t\tList<String> proxyList = (List<String>) Proxy.newProxyInstance(\n\t\t\t\t\tThread.currentThread().getContextClassLoader(),\n\t\t\t\t\tnew Class<?>[] { List.class },\n\t\t\t\t\t(proxy, method, args) -> {\n\t\t\t\t\t\tif (method.isDefault()) {\n\t\t\t\t\t\t\treturn invokeDefaultMethod(proxy, method, args);\n\t\t\t\t\t\t} else if (method.getName().equals(\"iterator\") && method.getParameterCount() == 0) {\n\t\t\t\t\t\t\t//forEach()\u5185\u90e8\u3067\u306fiterator()\u304c\u5fc5\u8981\n\t\t\t\t\t\t\treturn Arrays.stream(array).iterator();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthrow new UnsupportedOperationException(method.toString());\n\t\t\t\t\t});\n\t\t\t//\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u306eforEach\u3092\u5b9f\u884c\n\t\t\tproxyList.forEach(System.out::print);//abc\n\t\t\tSystem.out.println();\n```\n\n# \u30c0\u30e1\u306a\u30d1\u30bf\u30fc\u30f3\n\n\u666e\u901a\u306b\u3053\u3046\u66f8\u304d\u305f\u3044\u3068\u3053\u308d\u3002\n\n```java\n\tprivate static Object invokeDefaultMethod(Object proxy, Method method, Object[] args) throws Throwable {\n\t\tClass<?> declaringClass = method.getDeclaringClass();\n\n\t\treturn MethodHandles.lookup().in(declaringClass)\n\t\t\t\t.unreflectSpecial(method, declaringClass)\n\t\t\t\t.bindTo(proxy)\n\t\t\t\t.invokeWithArguments(args);\n\t}\n```\n\n\u3057\u304b\u3057\u3053\u308c\u3060\u3068\u30a8\u30e9\u30fc\n\u6b8b\u5ff5\u3002\n\n```\nException in thread \"main\" java.lang.reflect.UndeclaredThrowableException\n\tat com.sun.proxy.$Proxy0.forEach(Unknown Source)\n\tat hogehoge.XXXXXX.main(XXXXXX.java:XX)\nCaused by: java.lang.IllegalAccessException: no private access for invokespecial: interface java.lang.Iterable, from java.lang.Iterable/public\n\tat java.lang.invoke.MemberName.makeAccessException(MemberName.java:852)\n\tat java.lang.invoke.MethodHandles$Lookup.checkSpecialCaller(MethodHandles.java:1568)\n\tat java.lang.invoke.MethodHandles$Lookup.unreflectSpecial(MethodHandles.java:1227)\n\tat hogehoge.XXXXXX.invokeDefaultMethod(XXXXXX.java:XX)\n\tat hogehoge.XXXXXX.lambda$1(XXXXXX.java:XX)\n\t... 2 more\n```\n\n\n", "tags": ["java8", "Java"]}