{"context": " More than 1 year has passed since last update.\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d0\u30b0\u3092\u3044\u3061\u65e9\u304f\u691c\u77e5\u3059\u308b\u305f\u3081\u306b\u30a2\u30b5\u30fc\u30c8\u3092\u4f7f\u3046\u306e\u306f\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001\nassert(p != NULL);\n\n\u3060\u3051\u51fa\u3055\u308c\u3066\u3082\u30b5\u30c3\u30d1\u30ea\u3067\u3059\u3088\u306d\u2026\u2026\u3002\n\u4f8b\u3048\u3070\u3001\u300c\u305d\u306e p \u306e\u5024\u3092\u77e5\u308a\u305f\u3044\u3093\u3060\u3088\uff01\uff01\u300d\u3063\u3066\u6642\u3082\u3042\u308a\u307e\u3059\u3002\n\u500b\u4eba\u7684\u306b\u306f\u30a2\u30b5\u30fc\u30c8\u3067\u6b62\u307e\u3063\u305f\u6642\u3001\u4ee5\u4e0b\u306e\u60c5\u5831\u304c\u6b32\u3057\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u5f15\u3063\u304b\u304b\u3063\u305f\u30a2\u30b5\u30fc\u30c8\u304c\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u305d\u306e\u884c\u6570\u3002\n\u5f15\u3063\u304b\u304b\u3063\u305f\u6761\u4ef6\n\u5f15\u3063\u304b\u304b\u3063\u305f\u5024\n\u30a2\u30b5\u30fc\u30c8\u306e\u539f\u56e0\u3092\u793a\u3059\u30e1\u30c3\u30bb\u30fc\u30b8\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3053\u308c\u3089\u3092\u6e80\u305f\u3059\u30a2\u30b5\u30fc\u30c8\u3092\u4f5c\u3063\u3066\u3057\u307e\u304a\u3046\u3068\u601d\u3063\u3066\u3001\u3061\u3087\u3063\u3068\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u4f5c\u3063\u305f\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u30a2\u30b5\u30fc\u30c8\u3067\u3059\u3002\n\n\n\n\u5b9a\u7fa9\u540d\n\u6982\u8981\n\n\n\n\nmy_assert(expr,...)\n\u4e00\u822c\u7684\u306a\u30a2\u30b5\u30fc\u30c8\n\n\nmy_assert_range(value, min, max)\n\u7bc4\u56f2\u5916\u306e\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\n\n\nmy_assert_array(index, max)\n\u914d\u5217\u5916\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\n\n\nmy_assert_must_not_happen()\n\u672c\u6765\u3067\u3042\u308c\u3070\u6765\u3061\u3083\u30c0\u30e1\u306a\u3068\u3053\u308d\u306b\u6765\u3061\u3083\u3063\u305f\n\n\nmy_assert_null(ptr)\nNULL \u30a2\u30af\u30bb\u30b9\u3057\u305f\n\n\n\nmy_assert \u3055\u3048\u3042\u308c\u3070\u5f8c\u306f\u3069\u3046\u306b\u3067\u3082\u3067\u304d\u307e\u3059\u304c\u3001\n\u4ed6\u306e\u30a2\u30b5\u30fc\u30c8\u3082\u7d50\u69cb\u983b\u7e41\u306b\u4f7f\u3046\u3057\u3001\u4f7f\u3046\u306a\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u7d71\u4e00\u5316\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001my_assert \u304c\u6761\u4ef6\u4ee5\u5916\u306b\u3082\u53ef\u5909\u9577\u5f15\u6570\u3067\u5f15\u6570\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308b\u306e\u306f\u3001\nmy_assert_range \u307f\u305f\u304f\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u6570\u5024\u3092\u5165\u308c\u305f\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\u4ee5\u4e0b\u3001\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nmain.cpp\n#include <stdio.h>\n#include <stdlib.h>\n\n#ifdef _DEBUG\n\nnamespace internal { // \u5185\u90e8\u5b9f\u88c5\n\n// \u505c\u6b62(\u623b\u308a\u5024\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u72ec\u81ea\u306b\u5b9a\u7fa9)\nint abort() {\n    ::abort();\n    return 1;\n}\n\n} // namespace internal\n\n// \u81ea\u4f5c\u30a2\u30b5\u30fc\u30c8\n#define my_assert(expr,...) \\\n    (!(expr) && printf(\"%s(%d): my_assert failed: \"#expr\"\\n\", __FILE__, __LINE__, __VA_ARGS__) && internal::abort())\n\n#else\n\n// \u81ea\u4f5c\u30a2\u30b5\u30fc\u30c8(Release \u6642\u306f\u7121\u52b9)\n#define my_assert(...)\n\n#endif\n\n// ------------------------------------------------------------------\n// \u3044\u308d\u3093\u306a assert\n// ------------------------------------------------------------------\n\n// \u300c\u5024\u304c\u7bc4\u56f2\u5916\u3060\u3088\uff01\uff01\u300d\n#define my_assert_range(value, min, max) \\\n    my_assert((min <= value) && (value <= max) && \"(%d <= [%d] <= %d)\", min, value, max)\n\n// \u300c\u914d\u5217\u5916\u30a2\u30af\u30bb\u30b9\u3060\u3088\uff01\uff01\u300d\n#define my_assert_array(index, max) \\\n    my_assert((0 <= index) && (index < max) && \"(0 <= [%d] < %d)\", index, max)\n\n// \u300c\u3053\u3053\u306b\u6765\u3061\u3083\u3060\u3081\u3060\u3088\uff01\uff01\u300d\n#define my_assert_must_not_happen() \\\n    my_assert(false && \"(must not happen.)\")\n\n// \u300cNULL \u30a2\u30af\u30bb\u30b9\u3060\u3088\uff01\uff01\u300d\n#define my_assert_null(ptr) \\\n    my_assert(ptr != NULL && \"(null access.)\");\n\nint main()\n{\n    int value = 10;\n    int index = 3;\n    int * p = NULL;\n\n    my_assert_range(value, 0, 3);\n    my_assert_array(index, 1);\n    my_assert_must_not_happen();\n    my_assert_null(NULL);\n\n    return 0;\n}\n\n\n\noutput\nmain.cpp(50): my_assert failed: (0 <= value) && (value <= 3) && \"(0 <= [10] <= 3)\"\nmain.cpp(51): my_assert failed: (0 <= index) && (index < 1) && \"(0 <= [3] < 1)\"\nmain.cpp(52): my_assert failed: false && \"(must not happen.)\"\nmain.cpp(53): my_assert failed: p != NULL && \"(null access.)\"\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d0\u30b0\u3092\u3044\u3061\u65e9\u304f\u691c\u77e5\u3059\u308b\u305f\u3081\u306b\u30a2\u30b5\u30fc\u30c8\u3092\u4f7f\u3046\u306e\u306f\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001\n\n```\nassert(p != NULL);\n```\n\n\u3060\u3051\u51fa\u3055\u308c\u3066\u3082\u30b5\u30c3\u30d1\u30ea\u3067\u3059\u3088\u306d\u2026\u2026\u3002\n\u4f8b\u3048\u3070\u3001\u300c\u305d\u306e p \u306e\u5024\u3092\u77e5\u308a\u305f\u3044\u3093\u3060\u3088\uff01\uff01\u300d\u3063\u3066\u6642\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u500b\u4eba\u7684\u306b\u306f\u30a2\u30b5\u30fc\u30c8\u3067\u6b62\u307e\u3063\u305f\u6642\u3001\u4ee5\u4e0b\u306e\u60c5\u5831\u304c\u6b32\u3057\u304f\u306a\u308a\u307e\u3059\u3002\n\n* \u5f15\u3063\u304b\u304b\u3063\u305f\u30a2\u30b5\u30fc\u30c8\u304c\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u305d\u306e\u884c\u6570\u3002\n* \u5f15\u3063\u304b\u304b\u3063\u305f\u6761\u4ef6\n* \u5f15\u3063\u304b\u304b\u3063\u305f\u5024\n* \u30a2\u30b5\u30fc\u30c8\u306e\u539f\u56e0\u3092\u793a\u3059\u30e1\u30c3\u30bb\u30fc\u30b8\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3053\u308c\u3089\u3092\u6e80\u305f\u3059\u30a2\u30b5\u30fc\u30c8\u3092\u4f5c\u3063\u3066\u3057\u307e\u304a\u3046\u3068\u601d\u3063\u3066\u3001\u3061\u3087\u3063\u3068\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u4f5c\u3063\u305f\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u30a2\u30b5\u30fc\u30c8\u3067\u3059\u3002\n\n| \u5b9a\u7fa9\u540d | \u6982\u8981 |\n|:------|:-----|\n| my_assert(expr,...) | \u4e00\u822c\u7684\u306a\u30a2\u30b5\u30fc\u30c8 |\n| my_assert_range(value, min, max) | \u7bc4\u56f2\u5916\u306e\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f |\n| my_assert_array(index, max) | \u914d\u5217\u5916\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f |\n| my_assert_must_not_happen() | \u672c\u6765\u3067\u3042\u308c\u3070\u6765\u3061\u3083\u30c0\u30e1\u306a\u3068\u3053\u308d\u306b\u6765\u3061\u3083\u3063\u305f |\n| my_assert_null(ptr) | NULL \u30a2\u30af\u30bb\u30b9\u3057\u305f |\n\nmy_assert \u3055\u3048\u3042\u308c\u3070\u5f8c\u306f\u3069\u3046\u306b\u3067\u3082\u3067\u304d\u307e\u3059\u304c\u3001\n\u4ed6\u306e\u30a2\u30b5\u30fc\u30c8\u3082\u7d50\u69cb\u983b\u7e41\u306b\u4f7f\u3046\u3057\u3001\u4f7f\u3046\u306a\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u7d71\u4e00\u5316\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u3001my_assert \u304c\u6761\u4ef6\u4ee5\u5916\u306b\u3082\u53ef\u5909\u9577\u5f15\u6570\u3067\u5f15\u6570\u3092\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308b\u306e\u306f\u3001\nmy_assert_range \u307f\u305f\u304f\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u6570\u5024\u3092\u5165\u308c\u305f\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\n\u4ee5\u4e0b\u3001\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```cpp:main.cpp\n#include <stdio.h>\n#include <stdlib.h>\n\n#ifdef _DEBUG\n\nnamespace internal { // \u5185\u90e8\u5b9f\u88c5\n\n// \u505c\u6b62(\u623b\u308a\u5024\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u72ec\u81ea\u306b\u5b9a\u7fa9)\nint abort() {\n\t::abort();\n\treturn 1;\n}\n\n} // namespace internal\n\n// \u81ea\u4f5c\u30a2\u30b5\u30fc\u30c8\n#define my_assert(expr,...) \\\n\t(!(expr) && printf(\"%s(%d): my_assert failed: \"#expr\"\\n\", __FILE__, __LINE__, __VA_ARGS__) && internal::abort())\n\n#else\n\n// \u81ea\u4f5c\u30a2\u30b5\u30fc\u30c8(Release \u6642\u306f\u7121\u52b9)\n#define my_assert(...)\n\n#endif\n\n// ------------------------------------------------------------------\n// \u3044\u308d\u3093\u306a assert\n// ------------------------------------------------------------------\n\n// \u300c\u5024\u304c\u7bc4\u56f2\u5916\u3060\u3088\uff01\uff01\u300d\n#define my_assert_range(value, min, max) \\\n\tmy_assert((min <= value) && (value <= max) && \"(%d <= [%d] <= %d)\", min, value, max)\n\n// \u300c\u914d\u5217\u5916\u30a2\u30af\u30bb\u30b9\u3060\u3088\uff01\uff01\u300d\n#define my_assert_array(index, max) \\\n\tmy_assert((0 <= index) && (index < max) && \"(0 <= [%d] < %d)\", index, max)\n\n// \u300c\u3053\u3053\u306b\u6765\u3061\u3083\u3060\u3081\u3060\u3088\uff01\uff01\u300d\n#define my_assert_must_not_happen() \\\n\tmy_assert(false && \"(must not happen.)\")\n\n// \u300cNULL \u30a2\u30af\u30bb\u30b9\u3060\u3088\uff01\uff01\u300d\n#define my_assert_null(ptr) \\\n\tmy_assert(ptr != NULL && \"(null access.)\");\n\nint main()\n{\n\tint value = 10;\n\tint index = 3;\n\tint * p = NULL;\n\n\tmy_assert_range(value, 0, 3);\n\tmy_assert_array(index, 1);\n\tmy_assert_must_not_happen();\n\tmy_assert_null(NULL);\n\n\treturn 0;\n}\n```\n\n```:output\nmain.cpp(50): my_assert failed: (0 <= value) && (value <= 3) && \"(0 <= [10] <= 3)\"\nmain.cpp(51): my_assert failed: (0 <= index) && (index < 1) && \"(0 <= [3] < 1)\"\nmain.cpp(52): my_assert failed: false && \"(must not happen.)\"\nmain.cpp(53): my_assert failed: p != NULL && \"(null access.)\"\n```\n", "tags": ["C++", "\u30c7\u30d0\u30c3\u30b0"]}