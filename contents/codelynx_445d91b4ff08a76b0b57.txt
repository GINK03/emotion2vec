{"context": "\u672c\u5f53\u306f\u3082\u3046\u5c11\u3057\u307e\u3068\u3082\u306a\u306e\u3092\u66f8\u304d\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3067\u9593\u306b\u5408\u308f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3042\u308a\u3042\u308f\u305b\u306e\u30cd\u30bf\u3067\u304a\u8336\u3092\u6fc1\u3057\u307e\u3059\u3002\n\u3055\u3066 Swift \u3067\uff12\u70b9\u3092\u4ea4\u5dee\u3059\u308b\u5224\u5b9a\u3082\u3057\u304f\u306f\u3001\u305d\u306e\u4ea4\u5dee\u3057\u305f\u70b9\u3092\u6c42\u3081\u308b\u5fc5\u8981\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u3053\u3093\u306a\u4e09\u89d2\u5f62\u306e\u584a\u3092\u4f5c\u308a\u305f\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u3002\n\n\u81ea\u5206\u3067\u4e00\u304b\u3089\u8003\u3048\u308b\u306e\u306f\u306a\u3093\u306a\u306e\u3067\u3001\u5143\u306b\u306a\u308b\u30b3\u30fc\u30c9\u3092\u63a2\u3057\u307e\u3057\u305f\u304c\u3001\u3042\u307e\u308a\u6c17\u306b\u5165\u3063\u305f\u30b3\u30fc\u30c9\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u305d\u306e\u4e2d\u3067\u826f\u3055\u305d\u3046\u306a C++ \u306e\u30b3\u30fc\u30c9\u3092\u30d9\u30fc\u30b9\u306b Swift \u3067\u6e05\u66f8\u3057\u307e\u3057\u305f\u3002\u5143\u30cd\u30bf\u3078\u306e\u30ea\u30f3\u30af\u306f\u672b\u5c3e\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n\u5916\u7a4d\u306b\u306f\u300c\u00d7\u300d\u30aa\u30da\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\u8aa4\u5dee\u306e\u5224\u5b9a\u306b\u4f7f\u3063\u3066\u3044\u308b\u30a8\u30d7\u30b7\u30ed\u30f3\u300c\u03b5\u300d\u306e\u6271\u3044\u306f\u5fae\u5999\u306b\u601d\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u305d\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\nimport Foundation\nimport CoreGraphics\n\n\ninfix operator \u00d7\n\n\nextension CGPoint {\n\n    static func - (lhs: CGPoint, rhs: CGPoint) -> CGPoint {\n        return CGPoint(x: lhs.x - rhs.x, y: lhs.y - rhs.y)\n    }\n\n    static func + (lhs: CGPoint, rhs: CGPoint) -> CGPoint {\n        return CGPoint(x: lhs.x + rhs.x, y: lhs.y + rhs.y)\n    }\n\n    static func * (lhs: CGPoint, rhs: CGFloat) -> CGPoint {\n        return CGPoint(x: lhs.x * rhs, y: lhs.y * rhs)\n    }\n\n    static func / (lhs: CGPoint, rhs: CGFloat) -> CGPoint {\n        return CGPoint(x: lhs.x / rhs, y: lhs.y / rhs)\n    }\n\n    static func * (lhs: CGPoint, rhs: CGPoint) -> CGFloat { // dot product\n        return lhs.x * rhs.x + lhs.y * rhs.y\n    }\n\n    static func \u00d7 (lhs: CGPoint, rhs: CGPoint) -> CGFloat { // cross product\n        return lhs.x * rhs.y - lhs.y * rhs.x\n    }\n\n    var length\u00b2: CGFloat {\n        return (x * x) + (y * y)\n    }\n\n    var length: CGFloat {\n        return sqrt(self.length\u00b2)\n    }\n\n    var normalized: CGPoint {\n        let length = self.length\n        return CGPoint(x: x/length, y: y/length)\n    }\n\n}\n\n\nstruct Line {\n    var from: CGPoint\n    var to: CGPoint\n\n    init(from: CGPoint, to: CGPoint) {\n        self.from = from\n        self.to = to\n    }\n\n    var vector: CGPoint { return to - from }\n    var length: CGFloat { return (to - from).length }\n\n    static func intersection(_ line1: Line, _ line2: Line, _ segment: Bool) -> CGPoint? {\n        let v = line2.from - line1.from\n        let v1 = line1.to - line1.from\n        let v2 = line2.to - line2.from\n        let cp = v1 \u00d7 v2\n        if cp == 0 { return nil }\n\n        let cp1 = v \u00d7 v1 // cross product\n        let cp2 = v \u00d7 v2 // cross product\n\n        let t1 = cp2 / cp\n        let t2 = cp1 / cp\n        let \u03b5 = CGFloat(0).nextUp\n        if segment {\n            if t1 + \u03b5 < 0 || t1 - \u03b5 > 1 || t2 + \u03b5 < 0 || t2 - \u03b5 > 1 { return nil }\n        }\n        return line1.from + v1 * t1\n    }\n\n    static func angle(_ line1: Line, _ line2: Line) -> CGFloat {\n        let a = line1.to - line1.from\n        let b = line2.to - line2.from\n        return atan2(b.y - a.y, b.x - a.x)\n    }\n\n}\n\nLine \u306f\u7dda\u5206\u3092\u793a\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001intersection() \u306b\u4e8c\u3064\u306e\u7dda\u5206\u3092\u4e0e\u3048\u3066\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u4e09\u756a\u76ee\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u76f4\u7dda\u304b\u7dda\u5206\u304b\u3092 Bool \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u5ef6\u9577\u7dda\u4e0a\u3067\u4ea4\u5dee\u3057\u3066\u3044\u3066\u3082\u5b9f\u969b\u306b\u4ea4\u70b9\u304c\u3042\u308b\u5834\u5408\u306b\u3001\u305d\u306e\u4ea4\u70b9\u3092\u623b\u3059\u5834\u5408\u306f true \u3092\u3001\u305d\u3057\u3066\u5b9f\u969b\u306b\u4ea4\u70b9\u304c\u306a\u304f\u3066\u3082\u3001\u5ef6\u9577\u7dda\u4e0a\u3067\u4ea4\u5dee\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u306e\u5ea7\u6a19\u304c\u6b32\u3057\u3044\u5834\u5408\u306f false \u3092\u623b\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306b\u7c21\u5358\u3067\u3059\u304c\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\u7b2c\uff13\u5f15\u6570\u306e\u9055\u3044\u304c\u7d50\u679c\u306b\u53cd\u6620\u3055\u308c\u3066\u3044\u308b\u4e8b\u304c\u78ba\u8a8d\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\nlet p1 = CGPoint(x: 0, y: -200)\nlet p2 = CGPoint(x: 0, y: -100)\nlet p3 = CGPoint(x: 100, y: 0)\nlet p4 = CGPoint(x: 300, y: 0)\n\nlet l1 = Line(from: p1, to: p2)\nlet l2 = Line(from: p3, to: p4)\n\nLine.intersection(l1, l2, true) // nil\nLine.intersection(l1, l2, false) // {x 0 y 0}\n\n\u5143\u30cd\u30bf\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3067\u3059\u3002\nhttp://marupeke296.com/COL_2D_No10_SegmentAndSegment.html\n\u305d\u3057\u3066\u3001gist \u304b\u3089\u3082\u5165\u624b\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nhttps://gist.github.com/codelynx/80077dbbb07e7d989016188573eab880\n\uff3b\u57f7\u7b46\u6642\u70b9\u3067\u306e\u74b0\u5883\u306e\u8868\u8a18\uff3d\nXcode Version 8.2.1 (8C1002)\nApple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)\n\n\n\u672c\u5f53\u306f\u3082\u3046\u5c11\u3057\u307e\u3068\u3082\u306a\u306e\u3092\u66f8\u304d\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3067\u9593\u306b\u5408\u308f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3042\u308a\u3042\u308f\u305b\u306e\u30cd\u30bf\u3067\u304a\u8336\u3092\u6fc1\u3057\u307e\u3059\u3002\n\n\u3055\u3066 Swift \u3067\uff12\u70b9\u3092\u4ea4\u5dee\u3059\u308b\u5224\u5b9a\u3082\u3057\u304f\u306f\u3001\u305d\u306e\u4ea4\u5dee\u3057\u305f\u70b9\u3092\u6c42\u3081\u308b\u5fc5\u8981\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u3053\u3093\u306a\u4e09\u89d2\u5f62\u306e\u584a\u3092\u4f5c\u308a\u305f\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u3002\n\n<img width=\"320\" alt=\"Screen Shot 2016-12-22 at 14.28.46.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/65634/79fafa08-8a05-abb6-6a09-0d4ea85196b5.png\">\n\n\u81ea\u5206\u3067\u4e00\u304b\u3089\u8003\u3048\u308b\u306e\u306f\u306a\u3093\u306a\u306e\u3067\u3001\u5143\u306b\u306a\u308b\u30b3\u30fc\u30c9\u3092\u63a2\u3057\u307e\u3057\u305f\u304c\u3001\u3042\u307e\u308a\u6c17\u306b\u5165\u3063\u305f\u30b3\u30fc\u30c9\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u305d\u306e\u4e2d\u3067\u826f\u3055\u305d\u3046\u306a C++ \u306e\u30b3\u30fc\u30c9\u3092\u30d9\u30fc\u30b9\u306b Swift \u3067\u6e05\u66f8\u3057\u307e\u3057\u305f\u3002\u5143\u30cd\u30bf\u3078\u306e\u30ea\u30f3\u30af\u306f\u672b\u5c3e\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n\u5916\u7a4d\u306b\u306f\u300c\u00d7\u300d\u30aa\u30da\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\u8aa4\u5dee\u306e\u5224\u5b9a\u306b\u4f7f\u3063\u3066\u3044\u308b\u30a8\u30d7\u30b7\u30ed\u30f3\u300c\u03b5\u300d\u306e\u6271\u3044\u306f\u5fae\u5999\u306b\u601d\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u4ee5\u4e0b\u304c\u305d\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n```swift\nimport Foundation\nimport CoreGraphics\n\n\ninfix operator \u00d7\n\n\nextension CGPoint {\n\n\tstatic func - (lhs: CGPoint, rhs: CGPoint) -> CGPoint {\n\t\treturn CGPoint(x: lhs.x - rhs.x, y: lhs.y - rhs.y)\n\t}\n\n\tstatic func + (lhs: CGPoint, rhs: CGPoint) -> CGPoint {\n\t\treturn CGPoint(x: lhs.x + rhs.x, y: lhs.y + rhs.y)\n\t}\n\n\tstatic func * (lhs: CGPoint, rhs: CGFloat) -> CGPoint {\n\t\treturn CGPoint(x: lhs.x * rhs, y: lhs.y * rhs)\n\t}\n\n\tstatic func / (lhs: CGPoint, rhs: CGFloat) -> CGPoint {\n\t\treturn CGPoint(x: lhs.x / rhs, y: lhs.y / rhs)\n\t}\n\t\n\tstatic func * (lhs: CGPoint, rhs: CGPoint) -> CGFloat { // dot product\n\t\treturn lhs.x * rhs.x + lhs.y * rhs.y\n\t}\n\n\tstatic func \u00d7 (lhs: CGPoint, rhs: CGPoint) -> CGFloat { // cross product\n\t\treturn lhs.x * rhs.y - lhs.y * rhs.x\n\t}\n\t\n\tvar length\u00b2: CGFloat {\n\t\treturn (x * x) + (y * y)\n\t}\n\n\tvar length: CGFloat {\n\t\treturn sqrt(self.length\u00b2)\n\t}\n\n\tvar normalized: CGPoint {\n\t\tlet length = self.length\n\t\treturn CGPoint(x: x/length, y: y/length)\n\t}\n\n}\n\n\nstruct Line {\n\tvar from: CGPoint\n\tvar to: CGPoint\n\t\n\tinit(from: CGPoint, to: CGPoint) {\n\t\tself.from = from\n\t\tself.to = to\n\t}\n\t\n\tvar vector: CGPoint { return to - from }\n\tvar length: CGFloat { return (to - from).length }\n\n\tstatic func intersection(_ line1: Line, _ line2: Line, _ segment: Bool) -> CGPoint? {\n\t\tlet v = line2.from - line1.from\n\t\tlet v1 = line1.to - line1.from\n\t\tlet v2 = line2.to - line2.from\n\t\tlet cp = v1 \u00d7 v2\n\t\tif cp == 0 { return nil }\n\n\t\tlet cp1 = v \u00d7 v1 // cross product\n\t\tlet cp2 = v \u00d7 v2 // cross product\n\t\t\n\t\tlet t1 = cp2 / cp\n\t\tlet t2 = cp1 / cp\n\t\tlet \u03b5 = CGFloat(0).nextUp\n\t\tif segment {\n\t\t\tif t1 + \u03b5 < 0 || t1 - \u03b5 > 1 || t2 + \u03b5 < 0 || t2 - \u03b5 > 1 { return nil }\n\t\t}\n\t\treturn line1.from + v1 * t1\n\t}\n\n\tstatic func angle(_ line1: Line, _ line2: Line) -> CGFloat {\n\t\tlet a = line1.to - line1.from\n\t\tlet b = line2.to - line2.from\n\t\treturn atan2(b.y - a.y, b.x - a.x)\n\t}\n\n}\n```\n\nLine \u306f\u7dda\u5206\u3092\u793a\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001intersection() \u306b\u4e8c\u3064\u306e\u7dda\u5206\u3092\u4e0e\u3048\u3066\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u4e09\u756a\u76ee\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u76f4\u7dda\u304b\u7dda\u5206\u304b\u3092 Bool \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u5ef6\u9577\u7dda\u4e0a\u3067\u4ea4\u5dee\u3057\u3066\u3044\u3066\u3082\u5b9f\u969b\u306b\u4ea4\u70b9\u304c\u3042\u308b\u5834\u5408\u306b\u3001\u305d\u306e\u4ea4\u70b9\u3092\u623b\u3059\u5834\u5408\u306f true \u3092\u3001\u305d\u3057\u3066\u5b9f\u969b\u306b\u4ea4\u70b9\u304c\u306a\u304f\u3066\u3082\u3001\u5ef6\u9577\u7dda\u4e0a\u3067\u4ea4\u5dee\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u306e\u5ea7\u6a19\u304c\u6b32\u3057\u3044\u5834\u5408\u306f false \u3092\u623b\u3057\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306b\u7c21\u5358\u3067\u3059\u304c\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\u7b2c\uff13\u5f15\u6570\u306e\u9055\u3044\u304c\u7d50\u679c\u306b\u53cd\u6620\u3055\u308c\u3066\u3044\u308b\u4e8b\u304c\u78ba\u8a8d\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```swift\nlet p1 = CGPoint(x: 0, y: -200)\nlet p2 = CGPoint(x: 0, y: -100)\nlet p3 = CGPoint(x: 100, y: 0)\nlet p4 = CGPoint(x: 300, y: 0)\n\nlet l1 = Line(from: p1, to: p2)\nlet l2 = Line(from: p3, to: p4)\n\nLine.intersection(l1, l2, true) // nil\nLine.intersection(l1, l2, false) // {x 0 y 0}\n```\n\n\u5143\u30cd\u30bf\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3067\u3059\u3002\nhttp://marupeke296.com/COL_2D_No10_SegmentAndSegment.html\n\n\u305d\u3057\u3066\u3001gist \u304b\u3089\u3082\u5165\u624b\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nhttps://gist.github.com/codelynx/80077dbbb07e7d989016188573eab880\n\n\n\uff3b\u57f7\u7b46\u6642\u70b9\u3067\u306e\u74b0\u5883\u306e\u8868\u8a18\uff3d\n\n```text\nXcode Version 8.2.1 (8C1002)\nApple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)\n```\n", "tags": ["Swift", "2D"]}