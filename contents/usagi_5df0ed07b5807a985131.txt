{"context": "\n\n\u6982\u8981\n\u3042\u308b\u95a2\u6570 f() \u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u30e6\u30fc\u30b6\u30fc\u3078\u63d0\u4f9b\u3057\u305f\u3044\u3068\u304d\u3001\u4eee\u306b\u60f3\u5b9a\u3055\u308c\u308b\u5f15\u6570\u304c\u6700\u5927\u30674\u7a2e\u985e\u3042\u308b\u72b6\u6cc1\u3092\u60f3\u50cf\u3057\u3066\u307f\u3088\u3046:\nparameter_x_type x;\nparameter_y_type y;\nparameter_z_type z;\nparameter_w_type w;\nf( x, y, z, w );\n\n\u5358\u7d14\u306b\u306f\u3053\u306e\u3088\u3046\u306b\u4f7f\u3048\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u7c21\u5358:\nauto f\n( const parameter_x& x\n, const parameter_y& y\n, const parameter_z& z\n, const parameter_w& w\n) { /* \u306a\u306b\u304b\u3057\u3089\u306e\u51e6\u7406 */ }\n\n\u3067\u306f\u3001\u8868\u984c\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u3064\u307e\u308a\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u53ef\u80fd\u6027\u306e\u3042\u308b\u5f15\u6570\u306e\u4f55\u308c\u304b\u3092\u9806\u5e8f\u3082\u3069\u3046\u3067\u3082\u3088\u304f\u53d7\u3051\u5165\u308c\u308b\u7802\u7cd6\u306e\u7518\u3055\u3092\u611f\u3058\u308b\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u305f\u3044\u3068\u3057\u305f\u3089\uff1f\nf( x );\nf( y, w );\nf( z, w, x );\nf( x, y, w, z);\n/* ... \u305d\u306e\u4ed6\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u307f\u306a\u3055\u3093 ... */\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3053\u306e\u3088\u3046\u306a\u8981\u6c42\u304c\u751f\u3058\u305f\u5834\u5408\u306b\u67d4\u8edf\u306b\u5bfe\u5fdc\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u305f\u3044\u3002\n\n\u65b9\u6cd5\n\u300c\u95a2\u6570 f() \u3092\u4f8b\u306b\u3001 area_type \u3084 tag_type::vector_type keyword_type::vector_type \u306a\u3069\u306e\u9069\u5f53\u306a\u5f15\u6570\u578b\u3092\u4efb\u610f\u6570\u4efb\u610f\u9806\u306b\u53d7\u3051\u3001\u53d7\u3051\u53d6\u3063\u305f\u5f15\u6570\u306b\u57fa\u3044\u3066\u9069\u5f53\u306a\u51e6\u7406\u3092\u884c\u3063\u3066 location_type \u3092\u8fd4\u3059\u300d\u3068\u8a00\u3063\u305f\u5177\u5408\u306e\u5b9f\u88c5\u30a8\u30b0\u30b6\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059:\n#include <boost/optional.hpp>\n#include <vector>\n#include <string>\n#include <iostream>\n\nnamespace some_library\n{\n  using boost::optional;\n\n  template < typename T > struct has_vector_type { using vector_type = std::vector< T >; };\n\n  struct area_type { float a, b, c, d; };\n  struct tag_type : has_vector_type< tag_type > { std::string value; tag_type( const std::string& in ) : value( in ) { } };\n  struct keyword_type : has_vector_type< keyword_type > { std::string value; keyword_type( const std::string& in ) : value( in ) { } };\n  struct location_type : has_vector_type< tag_type > { };\n\n  // for library internal implements\n  namespace detail\n  {\n    struct f_state { };\n\n    auto f( const f_state& state )\n    {\n      std::cout << \"c(execute state)\";\n      /* TODO: \u3053\u3053\u3067 state \u304b\u3089\u9069\u5207\u306a\u51e6\u7406\u3092\u884c\u3044\u7d50\u679c\u3092 return */\n      return location_type::vector_type{ };\n    }\n\n    template < typename T, typename ... TS >\n    auto f( const f_state& state, const T& value, TS ... ts )\n    {\n      std::cout << \"b:0(configure state) -> \";\n      /* TODO: \u3053\u3053\u3067 T value \u3092 state \u3078\u9069\u7528 */;\n      return f( state, ts ... );\n    }\n\n    template < typename ... TS >\n    auto f( const f_state& state, const area_type& value, TS ... ts )\n    {\n      std::cout << \"b:1(configure state by area_type) -> \";\n      /* TODO: */;\n      return f( state, ts ... ); }\n  }\n\n  // for library user\n  template < typename T, typename ... TS >\n  auto f( const T& value, TS ... ts )\n  {\n    std::cout << \"a(make state) -> \"; return detail::f( { }, value, ts ... );\n  }\n\n}\n\nauto main() -> int\n{\n  using namespace some_library;\n\n  area_type area { 0, 1, 2, 3 };\n  tag_type::vector_type tags { { \"aaa\" }, { \"bbb\" }, { \"ccc\" } };\n  keyword_type::vector_type keywords { { \"hoge\" }, { \"fuga\" }, { \"piyo\" } };\n\n  std::cout << \"1: \";\n  f( area );\n  std::cout << \"\\n\";\n\n  std::cout << \"2: \";\n  f( area, tags );\n  std::cout << \"\\n\";\n\n  std::cout << \"3: \";\n  f( area, tags, keywords );\n  std::cout << \"\\n\";\n\n  std::cout << \"4: \";\n  f( tags, keywords, area );\n  std::cout << \"\\n\";\n}\n\n\n\u5b9f\u884c\u4f8b\n1: a(make state) -> b:1(configure state by area_type) -> c(execute state)\n2: a(make state) -> b:1(configure state by area_type) -> b:0(configure state) -> c(execute state)\n3: a(make state) -> b:1(configure state by area_type) -> b:0(configure state) -> b:0(configure state) -> c(execute state)\n4: a(make state) -> b:0(configure state) -> b:0(configure state) -> b:1(configure state by area_type) -> c(execute state)\n\n\nwandbox: http://melpon.org/wandbox/permlink/0QXL6KaP2JSIbgYg\n\n\n\n\u89e3\u8aac\nvariadic template \u306b\u3088\u308a\u4efb\u610f\u306e\u578b\u306e\u5f15\u6570\u3092\u4efb\u610f\u6570\u53d7\u3051\u3089\u308c\u308b f \u3092\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u7684\u306b\u7528\u610f\u3057\u3001\u305d\u306e\u5185\u90e8\u3067\u306f\u5b9f\u969b\u306e\u51e6\u7406\u306e\u524d\u51e6\u7406\u3068\u3057\u3066\u3001 variadic template \u3067\u53d7\u3051\u53d6\u3063\u305f\u5f15\u6570\u3092\u304a\u7d04\u675f\u306e\u300c\u5148\u982d\uff11\u3064\uff0b\u305d\u306e\u4ed6\u306b\u3088\u308b\u5c3b\u5c3e\u300d\u306b\u5206\u96e2\u3057\u3066\u300c\u5148\u982d\uff11\u3064\u300d\u6bce\u306b\u9069\u5f53\u306a\u30b9\u30c6\u30fc\u30c8\u306b\u5f15\u6570\u306b\u5fdc\u3058\u3066\u5fc5\u8981\u306a\u524d\u51e6\u7406\u3092\u8ffd\u52a0\u3067\u65bd\u3057\u3001 variadic template \u3067\u5f15\u304d\u53d7\u3051\u305f\u3059\u3079\u3066\u306e\u5f15\u6570\u306e\u524d\u51e6\u7406\u3092\u7d42\u3048\u305f\u6642\u70b9\u3067\u305d\u308c\u307e\u3067\u306b\u84c4\u7a4d\u3057\u305f state \u306b\u5fdc\u3058\u3066\u51e6\u7406\u3092\u884c\u3044\u7d50\u679c\u3092\u8fd4\u3059\u3001\u3068\u8a00\u3063\u305f\u5177\u5408\u3067\u3059\u3002\n\u3053\u306e\u6642\u3001\u4efb\u610f\u306e T \u578b\u306b\u5bfe\u3057\u3066\u3067\u306f\u51e6\u7406\u304c\u9762\u5012\u306a\u7279\u5b9a\u306e\u578b\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u4eee\u306b\u4f8b\u3048\u3070 area_type \u304c\u305d\u306e\u3088\u3046\u306a\u578b\u3060\u3068\u4eee\u5b9a\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u7279\u6b8a\u5316\u306b\u3088\u3063\u3066 T = area_type \u306e\u5834\u5408\u306e\u51e6\u7406\u3092\u7279\u6b8a\u5316\u3057\u3066\u3044\u307e\u3059\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u7279\u6b8a\u5316\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u4efb\u610f\u306e\u578bT\u306b\u5bfe\u3059\u308b\u5143\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9a\u7fa9\u306f asset \u306a\u3044\u3057 throw std::logic_error( \"undefined type\" ) \u7684\u306b\u843d\u3068\u3057\u3066\u3057\u307e\u3046\u3088\u3046\u5b9f\u88c5\u3059\u308c\u3070\u3001\u60f3\u5b9a\u3057\u305f\u7279\u5b9a\u306e\u578b\u306e\u5834\u5408\u306e\u307f\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\u3082\u3057\u3001\u7d44\u307f\u5408\u308f\u305b\u306b\u3088\u3063\u3066\u306f\u5b9f\u884c\u306b\u652f\u969c\u304c\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u6700\u7d42\u7684\u306a\u5b9f\u884c\u76f4\u524d\u306b state \u306e\u6574\u5408\u6027\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u307e\u3059\u3002\n# \u6982\u8981\n\n\u3042\u308b\u95a2\u6570 `f()` \u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u30e6\u30fc\u30b6\u30fc\u3078\u63d0\u4f9b\u3057\u305f\u3044\u3068\u304d\u3001\u4eee\u306b\u60f3\u5b9a\u3055\u308c\u308b\u5f15\u6570\u304c\u6700\u5927\u30674\u7a2e\u985e\u3042\u308b\u72b6\u6cc1\u3092\u60f3\u50cf\u3057\u3066\u307f\u3088\u3046:\n\n```cpp\nparameter_x_type x;\nparameter_y_type y;\nparameter_z_type z;\nparameter_w_type w;\nf( x, y, z, w );\n```\n\n\u5358\u7d14\u306b\u306f\u3053\u306e\u3088\u3046\u306b\u4f7f\u3048\u308b\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u7c21\u5358:\n\n```cpp\nauto f\n( const parameter_x& x\n, const parameter_y& y\n, const parameter_z& z\n, const parameter_w& w\n) { /* \u306a\u306b\u304b\u3057\u3089\u306e\u51e6\u7406 */ }\n```\n\n\u3067\u306f\u3001\u8868\u984c\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u3064\u307e\u308a\u6b21\u306e\u3088\u3046\u306b\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u53ef\u80fd\u6027\u306e\u3042\u308b\u5f15\u6570\u306e\u4f55\u308c\u304b\u3092\u9806\u5e8f\u3082\u3069\u3046\u3067\u3082\u3088\u304f\u53d7\u3051\u5165\u308c\u308b\u7802\u7cd6\u306e\u7518\u3055\u3092\u611f\u3058\u308b\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u305f\u3044\u3068\u3057\u305f\u3089\uff1f\n\n```cpp\nf( x );\nf( y, w );\nf( z, w, x );\nf( x, y, w, z);\n/* ... \u305d\u306e\u4ed6\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u307f\u306a\u3055\u3093 ... */\n```\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3053\u306e\u3088\u3046\u306a\u8981\u6c42\u304c\u751f\u3058\u305f\u5834\u5408\u306b\u67d4\u8edf\u306b\u5bfe\u5fdc\u3059\u308b\u65b9\u6cd5\u3092\u793a\u3057\u305f\u3044\u3002\n\n# \u65b9\u6cd5\n\n\u300c\u95a2\u6570 `f()` \u3092\u4f8b\u306b\u3001 `area_type` \u3084 `tag_type::vector_type` `keyword_type::vector_type` \u306a\u3069\u306e\u9069\u5f53\u306a\u5f15\u6570\u578b\u3092\u4efb\u610f\u6570\u4efb\u610f\u9806\u306b\u53d7\u3051\u3001\u53d7\u3051\u53d6\u3063\u305f\u5f15\u6570\u306b\u57fa\u3044\u3066\u9069\u5f53\u306a\u51e6\u7406\u3092\u884c\u3063\u3066 `location_type` \u3092\u8fd4\u3059\u300d\u3068\u8a00\u3063\u305f\u5177\u5408\u306e\u5b9f\u88c5\u30a8\u30b0\u30b6\u30f3\u30d7\u30eb\u3092\u793a\u3057\u307e\u3059:\n\n```cpp\n#include <boost/optional.hpp>\n#include <vector>\n#include <string>\n#include <iostream>\n\nnamespace some_library\n{\n  using boost::optional;\n\n  template < typename T > struct has_vector_type { using vector_type = std::vector< T >; };\n  \n  struct area_type { float a, b, c, d; };\n  struct tag_type : has_vector_type< tag_type > { std::string value; tag_type( const std::string& in ) : value( in ) { } };\n  struct keyword_type : has_vector_type< keyword_type > { std::string value; keyword_type( const std::string& in ) : value( in ) { } };\n  struct location_type : has_vector_type< tag_type > { };\n  \n  // for library internal implements\n  namespace detail\n  {\n    struct f_state { };\n    \n    auto f( const f_state& state )\n    {\n      std::cout << \"c(execute state)\";\n      /* TODO: \u3053\u3053\u3067 state \u304b\u3089\u9069\u5207\u306a\u51e6\u7406\u3092\u884c\u3044\u7d50\u679c\u3092 return */\n      return location_type::vector_type{ };\n    }\n    \n    template < typename T, typename ... TS >\n    auto f( const f_state& state, const T& value, TS ... ts )\n    {\n      std::cout << \"b:0(configure state) -> \";\n      /* TODO: \u3053\u3053\u3067 T value \u3092 state \u3078\u9069\u7528 */;\n      return f( state, ts ... );\n    }\n  \n    template < typename ... TS >\n    auto f( const f_state& state, const area_type& value, TS ... ts )\n    {\n      std::cout << \"b:1(configure state by area_type) -> \";\n      /* TODO: */;\n      return f( state, ts ... ); }\n  }\n  \n  // for library user\n  template < typename T, typename ... TS >\n  auto f( const T& value, TS ... ts )\n  {\n    std::cout << \"a(make state) -> \"; return detail::f( { }, value, ts ... );\n  }\n\n}\n\nauto main() -> int\n{\n  using namespace some_library;\n  \n  area_type area { 0, 1, 2, 3 };\n  tag_type::vector_type tags { { \"aaa\" }, { \"bbb\" }, { \"ccc\" } };\n  keyword_type::vector_type keywords { { \"hoge\" }, { \"fuga\" }, { \"piyo\" } };\n  \n  std::cout << \"1: \";\n  f( area );\n  std::cout << \"\\n\";\n  \n  std::cout << \"2: \";\n  f( area, tags );\n  std::cout << \"\\n\";\n  \n  std::cout << \"3: \";\n  f( area, tags, keywords );\n  std::cout << \"\\n\";\n  \n  std::cout << \"4: \";\n  f( tags, keywords, area );\n  std::cout << \"\\n\";\n}\n```\n\n### \u5b9f\u884c\u4f8b\n\n```\n1: a(make state) -> b:1(configure state by area_type) -> c(execute state)\n2: a(make state) -> b:1(configure state by area_type) -> b:0(configure state) -> c(execute state)\n3: a(make state) -> b:1(configure state by area_type) -> b:0(configure state) -> b:0(configure state) -> c(execute state)\n4: a(make state) -> b:0(configure state) -> b:0(configure state) -> b:1(configure state by area_type) -> c(execute state)\n```\n\n- wandbox: http://melpon.org/wandbox/permlink/0QXL6KaP2JSIbgYg\n\n## \u89e3\u8aac\n\nvariadic template \u306b\u3088\u308a\u4efb\u610f\u306e\u578b\u306e\u5f15\u6570\u3092\u4efb\u610f\u6570\u53d7\u3051\u3089\u308c\u308b `f` \u3092\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u7684\u306b\u7528\u610f\u3057\u3001\u305d\u306e\u5185\u90e8\u3067\u306f\u5b9f\u969b\u306e\u51e6\u7406\u306e\u524d\u51e6\u7406\u3068\u3057\u3066\u3001 variadic template \u3067\u53d7\u3051\u53d6\u3063\u305f\u5f15\u6570\u3092\u304a\u7d04\u675f\u306e\u300c\u5148\u982d\uff11\u3064\uff0b\u305d\u306e\u4ed6\u306b\u3088\u308b\u5c3b\u5c3e\u300d\u306b\u5206\u96e2\u3057\u3066\u300c\u5148\u982d\uff11\u3064\u300d\u6bce\u306b\u9069\u5f53\u306a\u30b9\u30c6\u30fc\u30c8\u306b\u5f15\u6570\u306b\u5fdc\u3058\u3066\u5fc5\u8981\u306a\u524d\u51e6\u7406\u3092\u8ffd\u52a0\u3067\u65bd\u3057\u3001 variadic template \u3067\u5f15\u304d\u53d7\u3051\u305f\u3059\u3079\u3066\u306e\u5f15\u6570\u306e\u524d\u51e6\u7406\u3092\u7d42\u3048\u305f\u6642\u70b9\u3067\u305d\u308c\u307e\u3067\u306b\u84c4\u7a4d\u3057\u305f state \u306b\u5fdc\u3058\u3066\u51e6\u7406\u3092\u884c\u3044\u7d50\u679c\u3092\u8fd4\u3059\u3001\u3068\u8a00\u3063\u305f\u5177\u5408\u3067\u3059\u3002\n\n\u3053\u306e\u6642\u3001\u4efb\u610f\u306e `T` \u578b\u306b\u5bfe\u3057\u3066\u3067\u306f\u51e6\u7406\u304c\u9762\u5012\u306a\u7279\u5b9a\u306e\u578b\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u4eee\u306b\u4f8b\u3048\u3070 `area_type` \u304c\u305d\u306e\u3088\u3046\u306a\u578b\u3060\u3068\u4eee\u5b9a\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u7279\u6b8a\u5316\u306b\u3088\u3063\u3066 `T = area_type` \u306e\u5834\u5408\u306e\u51e6\u7406\u3092\u7279\u6b8a\u5316\u3057\u3066\u3044\u307e\u3059\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u7279\u6b8a\u5316\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u4efb\u610f\u306e\u578bT\u306b\u5bfe\u3059\u308b\u5143\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9a\u7fa9\u306f `asset` \u306a\u3044\u3057 `throw std::logic_error( \"undefined type\" )` \u7684\u306b\u843d\u3068\u3057\u3066\u3057\u307e\u3046\u3088\u3046\u5b9f\u88c5\u3059\u308c\u3070\u3001\u60f3\u5b9a\u3057\u305f\u7279\u5b9a\u306e\u578b\u306e\u5834\u5408\u306e\u307f\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\n\u3082\u3057\u3001\u7d44\u307f\u5408\u308f\u305b\u306b\u3088\u3063\u3066\u306f\u5b9f\u884c\u306b\u652f\u969c\u304c\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u6700\u7d42\u7684\u306a\u5b9f\u884c\u76f4\u524d\u306b state \u306e\u6574\u5408\u6027\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u307e\u3059\u3002\n", "tags": ["C++", "C++14", "variadic_templates", "parameter", "order"]}