{"context": " More than 1 year has passed since last update.\n\u2191\u306e\u3088\u3046\u306b\u30b9\u30ef\u30a4\u30d7\u3067\u5207\u308a\u66ff\u3048\u308c\u308b\u3088\u3046\u306a\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u3002\n\u3072\u3068\u307e\u305aswift\u306e\u8a66\u3057\u304c\u4e3b\u76ee\u7684\u3067\u3059\u304c\u3001swift\u3089\u3057\u304f\u306a\u3044\u90e8\u5206\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u8a66\u3057\u8a66\u3057\u3067\u5b9f\u88c5\u3057\u305f\u6240\u304c\u3042\u308b\u306e\u3067\u30d9\u30b9\u30c8\u306a\u5b9f\u88c5\u3068\u306f\u601d\u3048\u306a\u3044\u306e\u3067\u3001\n\u3082\u3046\u5c11\u3057\u6696\u3081\u3088\u3046\u304b\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3072\u3068\u307e\u305a\u3061\u3087\u3063\u3068\u516c\u958b\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nXcode 6.1.1\u306b\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n1.\u69cb\u6210\n\u30fb\u5404\u65e5\u3092\u8868\u793a\u3059\u308bView(DayView\u3068\u3057\u307e\u3059\u3002)\n\u30fb\u5404\u6708\u3092\u8868\u793a\u3059\u308bView(MonthView\u3068\u3057\u307e\u3059\u3002)\n\u30fb\u6708\u3092\u5207\u308a\u66ff\u3048\u308b\u305f\u3081\u306eView(CalenderView\u3068\u3057\u307e\u3059\u3002)\n\u3053\u306e3\u3064\u306eView\u3092\u6271\u3046\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n2.DayView\u306b\u3064\u3044\u3066\n\u66dc\u65e5\u306b\u5408\u308f\u305b\u3066\u8868\u793a\u3092\u5207\u308a\u66ff\u3048\u308b\u306a\u3069\u60f3\u5b9a\u3055\u308c\u308b\u305f\u3081\u3001\nyear/month/day/week\n\u306e\u56db\u3064\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nclass DayView: UIView {\n\n    required init(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n\n    init(frame:CGRect,year:Int,month:Int,day:Int,weekday:Int){\n        super.init(frame: frame)\n        var dayWidth:Int = Int( (UIScreen.mainScreen().bounds.size.width) / 7.0 )\n        var dayHeight:CGFloat = 30\n        var dayLabel:UILabel = UILabel(frame: CGRectMake(0, 0, CGFloat(dayWidth),dayHeight))\n        dayLabel.textAlignment = NSTextAlignment.Center\n        dayLabel.text = String(format:\"%02d\", day)\n        if weekday == 1 {\n            //\u65e5\u66dc\u65e5\u306f\u8d64\n            dayLabel.textColor = UIColor.redColor()\n        } else if weekday == 7 {\n            //\u571f\u66dc\u65e5\u306f\u9752\n            dayLabel.textColor = UIColor.blueColor()\n        }\n        self.addSubview(dayLabel)\n    }\n}\n\n\n\n3.MonthView\u306b\u3064\u3044\u3066\n\u305d\u306e\u6708\u306e\u6700\u7d42\u65e5\u306e\u53d6\u5f97\u3084\u66dc\u65e5\u3001\u7b2c\u4f55\u9031\u76ee\u304b\u306e\u53d6\u5f97\u3092\u884c\u3044\u3001\nDayView\u3092\u8868\u793a\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\u3056\u3063\u304f\u308a\u3067\u3059\u304c\u3001\u5404DayView\u306e\u6a2a\u5e45\u306f\u3001frame\u306ewidth\u30927\u3067\u5272\u3063\u305f\u5546\u3092\u6271\u3063\u3066\u3044\u307e\u3059\u3002\n\n\nclass MonthView: UIView {\n\n    required init(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    init(frame: CGRect,year:Int,month:Int) {\n        super.init(frame:frame)\n        self.setUpDays(year,month:month)\n    }\n\n    func setUpDays(year:Int,month:Int){\n\n        var subViews:[UIView] = self.subviews as [UIView]\n        for view in subViews {\n            if view.isKindOfClass(DayView) {\n                view.removeFromSuperview()\n            }\n        }\n\n        var day:Int? = self.getLastDay(year,month:month);\n        var dayWidth:Int = Int( frame.size.width / 7.0 )\n        var dayHeight:Int = dayWidth + 5\n        if day != nil {\n            //\u521d\u65e5\u306e\u66dc\u65e5\u3092\u53d6\u5f97\n            var weekday:Int = self.getWeekDay(year,month: month,day:1)\n            for var i:Int = 0; i < day!;i++ {\n                var week:Int    = self.getWeek(year,month: month,day:i+1)\n                var x:Int       = ((weekday - 1 ) * (dayWidth));\n                var y:Int       = (week-1) * dayHeight\n                var frame:CGRect = CGRectMake(CGFloat(x),\n                    CGFloat(y),\n                    CGFloat(dayWidth),\n                    CGFloat(dayHeight)\n                );\n\n                var dayView:DayView = DayView(frame: frame, year:year,month:month,day:i+1,weekday:weekday)\n                self.addSubview(dayView)\n                weekday++\n                if weekday > 7 {\n                    weekday = 1\n                }\n\n            }\n        }\n    }\n\n    //\u305d\u306e\u6708\u306e\u6700\u7d42\u65e5\u306e\u53d6\u5f97\n    func getLastDay(var year:Int,var month:Int) -> Int?{\n        var dateFormatter:NSDateFormatter = NSDateFormatter();\n        dateFormatter.dateFormat = \"yyyy/MM/dd\";\n        if month == 12 {\n            month = 0\n            year++\n        }\n        var targetDate:NSDate? = dateFormatter.dateFromString(String(format:\"%04d/%02d/01\",year,month+1));\n        if targetDate != nil {\n            //\u6708\u521d\u304b\u3089\u4e00\u65e5\u524d\u3092\u8a08\u7b97\u3057\u3001\u6708\u672b\u306e\u65e5\u4ed8\u3092\u53d6\u5f97\n            var orgDate = NSDate(timeInterval:(24*60*60)*(-1), sinceDate: targetDate!)\n            var str:String = dateFormatter.stringFromDate(orgDate)\n            //lastPathComponent\u3092\u5229\u7528\u3059\u308b\u306e\u306f\u76ee\u7684\u3068\u3057\u3066\u9055\u3046\u6c17\u3082\u3002\u3002\n            return str.lastPathComponent.toInt();\n        }\n\n        return nil;\n    }\n\n    //\u66dc\u65e5\u306e\u53d6\u5f97\n    func getWeek(year:Int,month:Int,day:Int) ->Int{\n        var dateFormatter:NSDateFormatter = NSDateFormatter();\n        dateFormatter.dateFormat = \"yyyy/MM/dd\";\n        var date:NSDate? = dateFormatter.dateFromString(String(format:\"%04d/%02d/%02d\",year,month,day));\n        if date != nil {\n            var calendar:NSCalendar = NSCalendar.currentCalendar()\n            var dateComp:NSDateComponents = calendar.components(NSCalendarUnit.WeekOfMonthCalendarUnit, fromDate: date!)\n            return dateComp.weekOfMonth;\n        }\n        return 0;\n    }\n\n    //\u7b2c\u4f55\u9031\u306e\u53d6\u5f97\n    func getWeekDay(year:Int,month:Int,day:Int) ->Int{\n        var dateFormatter:NSDateFormatter = NSDateFormatter();\n        dateFormatter.dateFormat = \"yyyy/MM/dd\";\n        var date:NSDate? = dateFormatter.dateFromString(String(format:\"%04d/%02d/%02d\",year,month,day));\n        if date != nil {\n            var calendar:NSCalendar = NSCalendar.currentCalendar()\n            var dateComp:NSDateComponents = calendar.components(NSCalendarUnit.WeekdayCalendarUnit, fromDate: date!)\n            return dateComp.weekday;\n        }\n        return 0;\n    }\n\n\n}\n\n\n\n4.CalenderView\u306b\u3064\u3044\u3066\n\u3053\u3061\u3089\u3067\u306f\u3001ScrollView\u3092\u914d\u7f6e\u3057\u3001\u305d\u306e\u4e0a\u306b3\u3064\u306eMonthView\u3092\u914d\u7f6e\u3059\u308b\u306e\u307f\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e3\u3064\u306e\u8868\u793a\u3092\u30b9\u30af\u30ed\u30fc\u30eb\u306b\u5408\u308f\u305b\u3066\u8868\u793a\u3092\u5207\u308a\u66ff\u3048\u308b\u3088\u3046\u306a\u5f62\u3067\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3061\u3089\u53c2\u8003\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nhttp://cocoadays.blogspot.jp/2010/09/1.html\n\nclass CalenderView: UIView,UIScrollViewDelegate{\n\n    var currentYear:Int = 0\n    var currentMonth:Int = 0\n    var currentDay:Int = 0\n    var scrollView:UIScrollView!\n    var prevMonthView:MonthView!\n    var currentMonthView:MonthView!\n    var nextMonthView:MonthView!\n\n    required init(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    override init(frame:CGRect){\n        super.init(frame: frame)\n\n        var dateFormatter:NSDateFormatter = NSDateFormatter();\n        dateFormatter.dateFormat = \"yyyy/MM/dd\";\n        var dateString:String = dateFormatter.stringFromDate(NSDate());\n        var dates:[String] = dateString.componentsSeparatedByString(\"/\")\n        currentYear  = dates[0].toInt()!\n        currentMonth = dates[1].toInt()!\n\n        scrollView = UIScrollView(frame: self.bounds)\n        scrollView.backgroundColor = UIColor.clearColor()\n        scrollView.contentSize   = CGSizeMake(frame.size.width *  3.0,frame.size.height);\n        scrollView.contentOffset = CGPointMake(frame.size.width , 0.0);\n        scrollView.delegate = self;\n        scrollView.pagingEnabled = true;\n        scrollView.showsHorizontalScrollIndicator = false;\n        scrollView.showsVerticalScrollIndicator = false;\n        scrollView.scrollsToTop = false;\n\n\n        self.addSubview(scrollView)\n\n\n        currentMonthView = MonthView(frame: CGRectMake(frame.size.width, 0, frame.size.width,frame.size.height),\n            year:currentYear,month:currentMonth)\n\n        //\u7fcc\u6708\n        var ret = self.getNextYearAndMonth()\n        nextMonthView =  MonthView(frame: CGRectMake(frame.size.width * 2.0, 0, frame.size.width,frame.size.height),\n            year:ret.year,month:ret.month)\n\n        //\u524d\u6708\n        ret = self.getPrevYearAndMonth()\n        prevMonthView = MonthView(frame: CGRectMake(0.0, 0, frame.size.width,frame.size.height),\n            year:ret.year,month:ret.month)\n\n        scrollView.addSubview(currentMonthView);\n        scrollView.addSubview(nextMonthView);\n        scrollView.addSubview(prevMonthView);\n\n    }\n\n    func scrollViewDidScroll(scrollView:UIScrollView)\n    {\n        var pos:CGFloat  = scrollView.contentOffset.x / scrollView.bounds.size.width\n        var deff:CGFloat = pos - 1.0\n        if fabs(deff) >= 1.0 {\n            if (deff > 0) {\n                self.showNextView()\n            } else {\n                self.showPrevView()\n            }\n        }\n    }\n\n    func showNextView (){\n        currentMonth++;\n        if( currentMonth > 12 ){\n            currentMonth = 1;\n            currentYear++;\n        }\n        var tmpView:MonthView = currentMonthView\n        currentMonthView = nextMonthView\n        nextMonthView    = prevMonthView\n        prevMonthView    = tmpView\n\n        var ret = self.getNextYearAndMonth()\n        nextMonthView.setUpDays(ret.year, month:ret.month)\n\n        self.resetContentOffSet()\n\n    }\n\n    func showPrevView () {\n        currentMonth--\n        if( currentMonth == 0 ){\n            currentMonth = 12\n            currentYear--\n        }\n\n        var tmpView:MonthView = currentMonthView\n        currentMonthView = prevMonthView\n        prevMonthView    = nextMonthView\n        nextMonthView    = tmpView\n        var ret = self.getPrevYearAndMonth()\n        prevMonthView.setUpDays(ret.year, month:ret.month)\n\n        //position\u8abf\u6574\n        self.resetContentOffSet()\n    }\n\n\n    func resetContentOffSet () {\n        //position\u8abf\u6574\n        prevMonthView.frame = CGRectMake(0, 0, frame.size.width,frame.size.height)\n        currentMonthView.frame = CGRectMake(frame.size.width, 0, frame.size.width,frame.size.height)\n        nextMonthView.frame = CGRectMake(frame.size.width * 2.0, 0, frame.size.width,frame.size.height)\n\n        var scrollViewDelegate:UIScrollViewDelegate = scrollView.delegate!\n        scrollView.delegate = nil\n        //delegate\u3092\u547c\u3073\u305f\u304f\u306a\u3044\u306e\u3067\n        scrollView.contentOffset = CGPointMake(frame.size.width , 0.0);\n        scrollView.delegate = scrollViewDelegate\n\n    }\n\n    func getNextYearAndMonth () -> (year:Int,month:Int){\n        var next_year:Int = currentYear\n        var next_month:Int = currentMonth + 1\n        if next_month > 12 {\n            next_month=1\n            next_year++\n        }\n        return (next_year,next_month)\n    }\n    func getPrevYearAndMonth () -> (year:Int,month:Int){\n        var prev_year:Int = currentYear\n        var prev_month:Int = currentMonth - 1\n        if prev_month == 0 {\n            prev_month = 12\n            prev_year--\n        }\n        return (prev_year,prev_month)\n    }\n\n}\n\n\n\n\n5 CalenderView\u306e\u5229\u7528\nViewController\u306b\u3066\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n        var calenderView:CalenderView = CalenderView(frame: CGRectMake(0, 20,\n            UIScreen.mainScreen().bounds.size.width, 500));\n        self.view.addSubview(calenderView)\n    }\n}\n\n\n(\u7e26\u5e45\u306f\u9069\u5f53\u3067\u3059\u3002\u3002\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u306b\nhttps://github.com/kitanoow/SwiftCalendarDemo/\n![ss.jpg](https://qiita-image-store.s3.amazonaws.com/0/35343/d2849f2f-ca23-9204-c76c-84478dce1def.jpeg)\n\n\u2191\u306e\u3088\u3046\u306b\u30b9\u30ef\u30a4\u30d7\u3067\u5207\u308a\u66ff\u3048\u308c\u308b\u3088\u3046\u306a\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u3002\n\u3072\u3068\u307e\u305aswift\u306e\u8a66\u3057\u304c\u4e3b\u76ee\u7684\u3067\u3059\u304c\u3001swift\u3089\u3057\u304f\u306a\u3044\u90e8\u5206\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u8a66\u3057\u8a66\u3057\u3067\u5b9f\u88c5\u3057\u305f\u6240\u304c\u3042\u308b\u306e\u3067\u30d9\u30b9\u30c8\u306a\u5b9f\u88c5\u3068\u306f\u601d\u3048\u306a\u3044\u306e\u3067\u3001\n\u3082\u3046\u5c11\u3057\u6696\u3081\u3088\u3046\u304b\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3072\u3068\u307e\u305a\u3061\u3087\u3063\u3068\u516c\u958b\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\nXcode 6.1.1\u306b\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n##1.\u69cb\u6210\n\n\n\u30fb\u5404\u65e5\u3092\u8868\u793a\u3059\u308bView(DayView\u3068\u3057\u307e\u3059\u3002)\n\u30fb\u5404\u6708\u3092\u8868\u793a\u3059\u308bView(MonthView\u3068\u3057\u307e\u3059\u3002)\n\u30fb\u6708\u3092\u5207\u308a\u66ff\u3048\u308b\u305f\u3081\u306eView(CalenderView\u3068\u3057\u307e\u3059\u3002)\n\n\u3053\u306e3\u3064\u306eView\u3092\u6271\u3046\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\n\n##2.DayView\u306b\u3064\u3044\u3066\n\n\u66dc\u65e5\u306b\u5408\u308f\u305b\u3066\u8868\u793a\u3092\u5207\u308a\u66ff\u3048\u308b\u306a\u3069\u60f3\u5b9a\u3055\u308c\u308b\u305f\u3081\u3001\nyear/month/day/week\n\u306e\u56db\u3064\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```swift\n\n\nclass DayView: UIView {\n    \n    required init(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    \n    init(frame:CGRect,year:Int,month:Int,day:Int,weekday:Int){\n        super.init(frame: frame)\n        var dayWidth:Int = Int( (UIScreen.mainScreen().bounds.size.width) / 7.0 )\n        var dayHeight:CGFloat = 30\n        var dayLabel:UILabel = UILabel(frame: CGRectMake(0, 0, CGFloat(dayWidth),dayHeight))\n        dayLabel.textAlignment = NSTextAlignment.Center\n        dayLabel.text = String(format:\"%02d\", day)\n        if weekday == 1 {\n            //\u65e5\u66dc\u65e5\u306f\u8d64\n            dayLabel.textColor = UIColor.redColor()\n        } else if weekday == 7 {\n            //\u571f\u66dc\u65e5\u306f\u9752\n            dayLabel.textColor = UIColor.blueColor()\n        }\n        self.addSubview(dayLabel)\n    }\n}\n\n```\n\n\n##3.MonthView\u306b\u3064\u3044\u3066\n\n\u305d\u306e\u6708\u306e\u6700\u7d42\u65e5\u306e\u53d6\u5f97\u3084\u66dc\u65e5\u3001\u7b2c\u4f55\u9031\u76ee\u304b\u306e\u53d6\u5f97\u3092\u884c\u3044\u3001\nDayView\u3092\u8868\u793a\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\n\u3056\u3063\u304f\u308a\u3067\u3059\u304c\u3001\u5404DayView\u306e\u6a2a\u5e45\u306f\u3001frame\u306ewidth\u30927\u3067\u5272\u3063\u305f\u5546\u3092\u6271\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n```swift\n\n\nclass MonthView: UIView {\n\n    required init(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    init(frame: CGRect,year:Int,month:Int) {\n        super.init(frame:frame)\n        self.setUpDays(year,month:month)\n    }\n\n    func setUpDays(year:Int,month:Int){\n        \n        var subViews:[UIView] = self.subviews as [UIView]\n        for view in subViews {\n            if view.isKindOfClass(DayView) {\n                view.removeFromSuperview()\n            }\n        }\n        \n        var day:Int? = self.getLastDay(year,month:month);\n        var dayWidth:Int = Int( frame.size.width / 7.0 )\n        var dayHeight:Int = dayWidth + 5\n        if day != nil {\n            //\u521d\u65e5\u306e\u66dc\u65e5\u3092\u53d6\u5f97\n            var weekday:Int = self.getWeekDay(year,month: month,day:1)\n            for var i:Int = 0; i < day!;i++ {\n                var week:Int    = self.getWeek(year,month: month,day:i+1)\n                var x:Int       = ((weekday - 1 ) * (dayWidth));\n                var y:Int       = (week-1) * dayHeight\n                var frame:CGRect = CGRectMake(CGFloat(x),\n                    CGFloat(y),\n                    CGFloat(dayWidth),\n                    CGFloat(dayHeight)\n                );\n                \n                var dayView:DayView = DayView(frame: frame, year:year,month:month,day:i+1,weekday:weekday)\n                self.addSubview(dayView)\n                weekday++\n                if weekday > 7 {\n                    weekday = 1\n                }\n                \n            }\n        }\n    }\n    \n    //\u305d\u306e\u6708\u306e\u6700\u7d42\u65e5\u306e\u53d6\u5f97\n    func getLastDay(var year:Int,var month:Int) -> Int?{\n        var dateFormatter:NSDateFormatter = NSDateFormatter();\n        dateFormatter.dateFormat = \"yyyy/MM/dd\";\n        if month == 12 {\n            month = 0\n            year++\n        }\n        var targetDate:NSDate? = dateFormatter.dateFromString(String(format:\"%04d/%02d/01\",year,month+1));\n        if targetDate != nil {\n            //\u6708\u521d\u304b\u3089\u4e00\u65e5\u524d\u3092\u8a08\u7b97\u3057\u3001\u6708\u672b\u306e\u65e5\u4ed8\u3092\u53d6\u5f97\n            var orgDate = NSDate(timeInterval:(24*60*60)*(-1), sinceDate: targetDate!)\n            var str:String = dateFormatter.stringFromDate(orgDate)\n            //lastPathComponent\u3092\u5229\u7528\u3059\u308b\u306e\u306f\u76ee\u7684\u3068\u3057\u3066\u9055\u3046\u6c17\u3082\u3002\u3002\n            return str.lastPathComponent.toInt();\n        }\n        \n        return nil;\n    }\n    \n    //\u66dc\u65e5\u306e\u53d6\u5f97\n    func getWeek(year:Int,month:Int,day:Int) ->Int{\n        var dateFormatter:NSDateFormatter = NSDateFormatter();\n        dateFormatter.dateFormat = \"yyyy/MM/dd\";\n        var date:NSDate? = dateFormatter.dateFromString(String(format:\"%04d/%02d/%02d\",year,month,day));\n        if date != nil {\n            var calendar:NSCalendar = NSCalendar.currentCalendar()\n            var dateComp:NSDateComponents = calendar.components(NSCalendarUnit.WeekOfMonthCalendarUnit, fromDate: date!)\n            return dateComp.weekOfMonth;\n        }\n        return 0;\n    }\n   \n    //\u7b2c\u4f55\u9031\u306e\u53d6\u5f97\n    func getWeekDay(year:Int,month:Int,day:Int) ->Int{\n        var dateFormatter:NSDateFormatter = NSDateFormatter();\n        dateFormatter.dateFormat = \"yyyy/MM/dd\";\n        var date:NSDate? = dateFormatter.dateFromString(String(format:\"%04d/%02d/%02d\",year,month,day));\n        if date != nil {\n            var calendar:NSCalendar = NSCalendar.currentCalendar()\n            var dateComp:NSDateComponents = calendar.components(NSCalendarUnit.WeekdayCalendarUnit, fromDate: date!)\n            return dateComp.weekday;\n        }\n        return 0;\n    }\n    \n\n}\n\n```\n\n##4.CalenderView\u306b\u3064\u3044\u3066\n\n\u3053\u3061\u3089\u3067\u306f\u3001ScrollView\u3092\u914d\u7f6e\u3057\u3001\u305d\u306e\u4e0a\u306b3\u3064\u306eMonthView\u3092\u914d\u7f6e\u3059\u308b\u306e\u307f\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e3\u3064\u306e\u8868\u793a\u3092\u30b9\u30af\u30ed\u30fc\u30eb\u306b\u5408\u308f\u305b\u3066\u8868\u793a\u3092\u5207\u308a\u66ff\u3048\u308b\u3088\u3046\u306a\u5f62\u3067\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3061\u3089\u53c2\u8003\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nhttp://cocoadays.blogspot.jp/2010/09/1.html\n\n```swift\n\nclass CalenderView: UIView,UIScrollViewDelegate{\n\n    var currentYear:Int = 0\n    var currentMonth:Int = 0\n    var currentDay:Int = 0\n    var scrollView:UIScrollView!\n    var prevMonthView:MonthView!\n    var currentMonthView:MonthView!\n    var nextMonthView:MonthView!\n    \n    required init(coder aDecoder: NSCoder) {\n        fatalError(\"init(coder:) has not been implemented\")\n    }\n    override init(frame:CGRect){\n        super.init(frame: frame)\n        \n        var dateFormatter:NSDateFormatter = NSDateFormatter();\n        dateFormatter.dateFormat = \"yyyy/MM/dd\";\n        var dateString:String = dateFormatter.stringFromDate(NSDate());\n        var dates:[String] = dateString.componentsSeparatedByString(\"/\")\n        currentYear  = dates[0].toInt()!\n        currentMonth = dates[1].toInt()!\n        \n        scrollView = UIScrollView(frame: self.bounds)\n        scrollView.backgroundColor = UIColor.clearColor()\n        scrollView.contentSize   = CGSizeMake(frame.size.width *  3.0,frame.size.height);\n        scrollView.contentOffset = CGPointMake(frame.size.width , 0.0);\n        scrollView.delegate = self;\n        scrollView.pagingEnabled = true;\n        scrollView.showsHorizontalScrollIndicator = false;\n        scrollView.showsVerticalScrollIndicator = false;\n        scrollView.scrollsToTop = false;\n        \n        \n        self.addSubview(scrollView)\n        \n        \n        currentMonthView = MonthView(frame: CGRectMake(frame.size.width, 0, frame.size.width,frame.size.height),\n            year:currentYear,month:currentMonth)\n        \n        //\u7fcc\u6708\n        var ret = self.getNextYearAndMonth()\n        nextMonthView =  MonthView(frame: CGRectMake(frame.size.width * 2.0, 0, frame.size.width,frame.size.height),\n            year:ret.year,month:ret.month)\n        \n        //\u524d\u6708\n        ret = self.getPrevYearAndMonth()\n        prevMonthView = MonthView(frame: CGRectMake(0.0, 0, frame.size.width,frame.size.height),\n            year:ret.year,month:ret.month)\n        \n        scrollView.addSubview(currentMonthView);\n        scrollView.addSubview(nextMonthView);\n        scrollView.addSubview(prevMonthView);\n\n    }\n    \n    func scrollViewDidScroll(scrollView:UIScrollView)\n    {\n        var pos:CGFloat  = scrollView.contentOffset.x / scrollView.bounds.size.width\n        var deff:CGFloat = pos - 1.0\n        if fabs(deff) >= 1.0 {\n            if (deff > 0) {\n                self.showNextView()\n            } else {\n                self.showPrevView()\n            }\n        }\n    }\n    \n    func showNextView (){\n        currentMonth++;\n        if( currentMonth > 12 ){\n            currentMonth = 1;\n            currentYear++;\n        }\n        var tmpView:MonthView = currentMonthView\n        currentMonthView = nextMonthView\n        nextMonthView    = prevMonthView\n        prevMonthView    = tmpView\n\n        var ret = self.getNextYearAndMonth()\n        nextMonthView.setUpDays(ret.year, month:ret.month)\n        \n        self.resetContentOffSet()\n        \n    }\n    \n    func showPrevView () {\n        currentMonth--\n        if( currentMonth == 0 ){\n            currentMonth = 12\n            currentYear--\n        }\n\n        var tmpView:MonthView = currentMonthView\n        currentMonthView = prevMonthView\n        prevMonthView    = nextMonthView\n        nextMonthView    = tmpView\n        var ret = self.getPrevYearAndMonth()\n        prevMonthView.setUpDays(ret.year, month:ret.month)\n\n        //position\u8abf\u6574\n        self.resetContentOffSet()\n    }\n    \n    \n    func resetContentOffSet () {\n        //position\u8abf\u6574\n        prevMonthView.frame = CGRectMake(0, 0, frame.size.width,frame.size.height)\n        currentMonthView.frame = CGRectMake(frame.size.width, 0, frame.size.width,frame.size.height)\n        nextMonthView.frame = CGRectMake(frame.size.width * 2.0, 0, frame.size.width,frame.size.height)\n        \n        var scrollViewDelegate:UIScrollViewDelegate = scrollView.delegate!\n        scrollView.delegate = nil\n        //delegate\u3092\u547c\u3073\u305f\u304f\u306a\u3044\u306e\u3067\n        scrollView.contentOffset = CGPointMake(frame.size.width , 0.0);\n        scrollView.delegate = scrollViewDelegate\n        \n    }\n    \n    func getNextYearAndMonth () -> (year:Int,month:Int){\n        var next_year:Int = currentYear\n        var next_month:Int = currentMonth + 1\n        if next_month > 12 {\n            next_month=1\n            next_year++\n        }\n        return (next_year,next_month)\n    }\n    func getPrevYearAndMonth () -> (year:Int,month:Int){\n        var prev_year:Int = currentYear\n        var prev_month:Int = currentMonth - 1\n        if prev_month == 0 {\n            prev_month = 12\n            prev_year--\n        }\n        return (prev_year,prev_month)\n    }\n    \n}\n\n\n```\n\n##5 CalenderView\u306e\u5229\u7528\n\nViewController\u306b\u3066\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```swift\n\nclass ViewController: UIViewController {\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        // Do any additional setup after loading the view, typically from a nib.\n        var calenderView:CalenderView = CalenderView(frame: CGRectMake(0, 20,\n            UIScreen.mainScreen().bounds.size.width, 500));\n        self.view.addSubview(calenderView)\n    }\n}\n\n```\n\n(\u7e26\u5e45\u306f\u9069\u5f53\u3067\u3059\u3002\u3002\n\n\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u306b\nhttps://github.com/kitanoow/SwiftCalendarDemo/\n", "tags": ["Swift", "iOS", "Xcode", "Xcode6", "iPhone"]}