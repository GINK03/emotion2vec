{"context": " More than 1 year has passed since last update.Xcode \u304c\u82e6\u624b\u3002\u305b\u3081\u3066\u30b3\u30fc\u30c9\u30b9\u30b1\u30c3\u30c1\u304f\u3089\u3044\u306f\u6163\u308c\u89aa\u3057\u3093\u3060 vim + terminal \u3067\u3057\u305f\u3044\u3068\u3044\u3046\u8a71\uff08\u305d\u306e2\uff09\u3002\n\u305d\u3053\u3067 Objective-C \u3092\u3064\u304b\u3063\u3066 terminal + make \u3067\u30d3\u30eb\u30c9\uff06\u5b9f\u884c\u3067\u304d\u308b\u30b3\u30fc\u30c9\u30b9\u30b1\u30c3\u30c1\u3092\u66f8\u3044\u305f\u306e\u3067\u6295\u7a3f\u3057\u307e\u3059\u3002\n\u6700\u7d42\u7684\u306b \u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u751f\u6210\u3055\u308c\u308bPNG\u753b\u50cf\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n\n\u7a7a\u306e PNG \u753b\u50cf\u3092\uff08\u3068\u308a\u3042\u3048\u305a\uff09\u751f\u6210\u3059\u308b\n\u30de\u30c3\u30af\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u306e\u3067\u3001iOS\u95a2\u4fc2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f7f\u3048\u306a\u3044\u3002\uff08\u305f\u3076\u3093... \u305f\u3068\u3048\u3070\u3001UIImage\u3068\u304b\uff09\n\u30cd\u30c3\u30c8\u4e0a\u3067\u691c\u7d22\u3067\u30d2\u30c3\u30c8\u3059\u308b\u591a\u304f\u306eObjective-C\u30b3\u30fc\u30c9\u306f iOS\u5411\u3051\u304c\u591a\u3044\u3088\u3046\u3060\u3002\nFoundation \u3068 CoreGraphics \u306e\u307f\u3092\u4f7f\u3063\u3066\u63cf\u753b\u3059\u308b\u65b9\u6cd5\u3092\u628a\u63e1\u3059\u308b\u306e\u304c\u610f\u5916\u306b\u5927\u5909\u3060\u3063\u305f\u3002\n\u9577\u3044\u306e\u3067\u30b3\u30fc\u30c9\u5168\u4f53\u306f \u3053\u3061\u3089\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n\n\u30e1\u30a4\u30f3\n\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210(1)\u3057\u3066\u3001\u305d\u308c\u3092 \u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58(3) \u3059\u308b\u3002\n\u30de\u30c3\u30af\u306e\u4e16\u754c\u3067\u306f \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u4f55\u304b\u63cf\u5199\u3057\u3066\u3001\u305d\u308c\u3092\u3069\u3046\u306b\u304b\u3059\u308b\uff08\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u3068\u304b\u753b\u9762\u306b\u51fa\u529b\u3059\u308b\u3068\u304b\uff09\u6d41\u308c\u3089\u3057\u3044\u3002\nint main(int argc, const char * argv[]){\n    // 1) create ctx\n    CGContextRef ctx = [PngUtil contextWithWidth:500 andHeight:500];\n\n    // 2) do something to ctx\n\n    // 3) save ctx\n    [PngUtil export:ctx withFilePath:@\"result.png\"];\n\n    // 4) release\n    CFRelease(ctx);\n\n    return (0);\n}\n\n\n\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u751f\u6210\nCGBitmapContextCreate \u306e\u5f15\u6570\u306e\u90e8\u5206\u304c\u3088\u304f\u5206\u304b\u3063\u3066\u3044\u306a\u3044\u304c...\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n+ (CGContextRef)\n    contextWithWidth : (int)width\n    andHeight        : (int)height {\n\n    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();\n    CGContextRef ctx = CGBitmapContextCreate(\n            nil,\n            width,\n            height,\n            8,     // bitsPerComponent\n            0,     // bytesPerRow \n            colorSpace,\n            kCGImageAlphaPremultipliedFirst);\n    CGColorSpaceRelease(colorSpace);\n\n    return ctx;\n}\n\n\n\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u30d5\u30a1\u30a4\u30eb\u3078PNG\u753b\u50cf\u3068\u3057\u3066\u4fdd\u5b58\n\u30b3\u30fc\u30c9\u306e\u6d41\u308c\u3068\u3057\u3066\u306f\u3001\u4f55\u304b\u63cf\u5199\u3057\u305f\uff08\u3053\u3053\u3067\u306f\u4f55\u3082\u307e\u3060\u63cf\u5199\u3057\u3066\u3044\u306a\u3044\u304c\uff09\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u30a4\u30e1\u30fc\u30b8(CGImage)\u306b\u5909\u63db(1)\u3057\u3001\u305d\u308c\u3092PNG\u7528\u306e\u30c7\u30b9\u30c6\u30a3\u30cd\u30fc\u30b7\u30e7\u30f3(CGImageDestination)\u3092\u751f\u6210(2)\u3057\u3066\u305d\u308c\u306b\u51e6\u7406(3)\u3055\u305b\u308b\u30a4\u30e1\u30fc\u30b8\u3002\n+ (CGImageDestinationRef)\n    imageDestination : (NSString *) outputPngPath {\n\n    CFURLRef savePngFileUrl = CFURLCreateWithFileSystemPath (NULL, (CFStringRef)outputPngPath, kCFURLPOSIXPathStyle, 0);\n    CGImageDestinationRef destination = CGImageDestinationCreateWithURL( savePngFileUrl, kUTTypePNG, 1, nil );\n    CFRelease(savePngFileUrl);\n    return destination;\n}\n\n\n+ (void)\n    export       : (CGContextRef) ctx\n    withFilePath : (NSString *) outputPngPath {\n\n    // 1) ctx \u3092 image \u306b\u5909\u63db\n    CGImageRef            cgImage     = CGBitmapContextCreateImage(ctx);\n    CFDictionaryRef       pngOptions  = [PngUtil optionsWithResolution:72.0];\n\n    // 2) destination \u3092\u751f\u6210\n    CGImageDestinationRef destination = [PngUtil imageDestination:outputPngPath];\n\n    // 3) destination \u306b\u5bfe\u3057\u3066\u51e6\u7406\n    CGImageDestinationAddImage(destination, cgImage, pngOptions);\n    CGImageDestinationFinalize(destination);\n\n    // Memory management\n    CFRelease( pngOptions );\n    CFRelease( cgImage ); \n    CFRelease( destination ); \n}\n\n\ngenerate-png.m \u306e\u30d3\u30eb\u30c9\u3068\u5b9f\u884c\n\nmakefile\nclangoptions:=-fobjc-arc -fmodules\nframeworks  :=-framework CoreGraphics -framework Foundation\n\nrun : generate-png\n    ./$<\n\ngenerate-png : generate-png.m\n    clang -o $@ $(clangoptions) $(frameworks) $<\n\nclean :\n    $(RM) generate-png\n    $(RM) *.png\n\n\n\u305d\u306e3\u3078\u7d9a\u304f\u3002\nXcode \u304c\u82e6\u624b\u3002\u305b\u3081\u3066\u30b3\u30fc\u30c9\u30b9\u30b1\u30c3\u30c1\u304f\u3089\u3044\u306f\u6163\u308c\u89aa\u3057\u3093\u3060 vim + terminal \u3067\u3057\u305f\u3044\u3068\u3044\u3046\u8a71\uff08\u305d\u306e2\uff09\u3002\n\n\u305d\u3053\u3067 Objective-C \u3092\u3064\u304b\u3063\u3066 terminal + make \u3067\u30d3\u30eb\u30c9\uff06\u5b9f\u884c\u3067\u304d\u308b\u30b3\u30fc\u30c9\u30b9\u30b1\u30c3\u30c1\u3092\u66f8\u3044\u305f\u306e\u3067\u6295\u7a3f\u3057\u307e\u3059\u3002\n\u6700\u7d42\u7684\u306b \u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u751f\u6210\u3055\u308c\u308bPNG\u753b\u50cf\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n![sierpinski-triangle-with-objective-c.png](https://qiita-image-store.s3.amazonaws.com/0/101400/48938ea4-abdf-503f-d232-3a72e4f6b71d.png)\n\n## \u7a7a\u306e PNG \u753b\u50cf\u3092\uff08\u3068\u308a\u3042\u3048\u305a\uff09\u751f\u6210\u3059\u308b\n\n\u30de\u30c3\u30af\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u306e\u3067\u3001iOS\u95a2\u4fc2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f7f\u3048\u306a\u3044\u3002\uff08\u305f\u3076\u3093... \u305f\u3068\u3048\u3070\u3001UIImage\u3068\u304b\uff09\n\u30cd\u30c3\u30c8\u4e0a\u3067\u691c\u7d22\u3067\u30d2\u30c3\u30c8\u3059\u308b\u591a\u304f\u306eObjective-C\u30b3\u30fc\u30c9\u306f iOS\u5411\u3051\u304c\u591a\u3044\u3088\u3046\u3060\u3002\nFoundation \u3068 CoreGraphics \u306e\u307f\u3092\u4f7f\u3063\u3066\u63cf\u753b\u3059\u308b\u65b9\u6cd5\u3092\u628a\u63e1\u3059\u308b\u306e\u304c\u610f\u5916\u306b\u5927\u5909\u3060\u3063\u305f\u3002\n\n\u9577\u3044\u306e\u3067\u30b3\u30fc\u30c9\u5168\u4f53\u306f [\u3053\u3061\u3089](https://github.com/mindboard/sierpinski-triangle-with-objective-c/blob/master/generate-png/generate-png.m)\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044\u3002\n\n### \u30e1\u30a4\u30f3\n\n\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u751f\u6210(1)\u3057\u3066\u3001\u305d\u308c\u3092 \u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58(3) \u3059\u308b\u3002\n\u30de\u30c3\u30af\u306e\u4e16\u754c\u3067\u306f \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u4f55\u304b\u63cf\u5199\u3057\u3066\u3001\u305d\u308c\u3092\u3069\u3046\u306b\u304b\u3059\u308b\uff08\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3059\u308b\u3068\u304b\u753b\u9762\u306b\u51fa\u529b\u3059\u308b\u3068\u304b\uff09\u6d41\u308c\u3089\u3057\u3044\u3002\n\n```objc:\nint main(int argc, const char * argv[]){\n\t// 1) create ctx\n\tCGContextRef ctx = [PngUtil contextWithWidth:500 andHeight:500];\n\n\t// 2) do something to ctx\n\n\t// 3) save ctx\n\t[PngUtil export:ctx withFilePath:@\"result.png\"];\n\n\t// 4) release\n\tCFRelease(ctx);\n\n   \treturn (0);\n}\n```\n\n### \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u751f\u6210\n\nCGBitmapContextCreate \u306e\u5f15\u6570\u306e\u90e8\u5206\u304c\u3088\u304f\u5206\u304b\u3063\u3066\u3044\u306a\u3044\u304c...\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n\n```objc\n+ (CGContextRef)\n   \tcontextWithWidth : (int)width\n   \tandHeight        : (int)height {\n\n\tCGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();\n\tCGContextRef ctx = CGBitmapContextCreate(\n\t\t   \tnil,\n\t\t   \twidth,\n\t\t   \theight,\n\t\t   \t8,     // bitsPerComponent\n\t\t   \t0,     // bytesPerRow \n\t\t   \tcolorSpace,\n\t\t   \tkCGImageAlphaPremultipliedFirst);\n   \tCGColorSpaceRelease(colorSpace);\n\n\treturn ctx;\n}\n```\n\n### \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u30d5\u30a1\u30a4\u30eb\u3078PNG\u753b\u50cf\u3068\u3057\u3066\u4fdd\u5b58\n\n\u30b3\u30fc\u30c9\u306e\u6d41\u308c\u3068\u3057\u3066\u306f\u3001\u4f55\u304b\u63cf\u5199\u3057\u305f\uff08\u3053\u3053\u3067\u306f\u4f55\u3082\u307e\u3060\u63cf\u5199\u3057\u3066\u3044\u306a\u3044\u304c\uff09\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u30a4\u30e1\u30fc\u30b8(CGImage)\u306b\u5909\u63db(1)\u3057\u3001\u305d\u308c\u3092PNG\u7528\u306e\u30c7\u30b9\u30c6\u30a3\u30cd\u30fc\u30b7\u30e7\u30f3(CGImageDestination)\u3092\u751f\u6210(2)\u3057\u3066\u305d\u308c\u306b\u51e6\u7406(3)\u3055\u305b\u308b\u30a4\u30e1\u30fc\u30b8\u3002\n\n```objc\n+ (CGImageDestinationRef)\n\timageDestination : (NSString *) outputPngPath {\n\n\tCFURLRef savePngFileUrl = CFURLCreateWithFileSystemPath (NULL, (CFStringRef)outputPngPath, kCFURLPOSIXPathStyle, 0);\n\tCGImageDestinationRef destination = CGImageDestinationCreateWithURL( savePngFileUrl, kUTTypePNG, 1, nil );\n\tCFRelease(savePngFileUrl);\n\treturn destination;\n}\n\n\n+ (void)\n   \texport       : (CGContextRef) ctx\n\twithFilePath : (NSString *) outputPngPath {\n\n\t// 1) ctx \u3092 image \u306b\u5909\u63db\n\tCGImageRef            cgImage     = CGBitmapContextCreateImage(ctx);\n\tCFDictionaryRef       pngOptions  = [PngUtil optionsWithResolution:72.0];\n\n\t// 2) destination \u3092\u751f\u6210\n\tCGImageDestinationRef destination = [PngUtil imageDestination:outputPngPath];\n\n\t// 3) destination \u306b\u5bfe\u3057\u3066\u51e6\u7406\n\tCGImageDestinationAddImage(destination, cgImage, pngOptions);\n\tCGImageDestinationFinalize(destination);\n\n\t// Memory management\n\tCFRelease( pngOptions );\n\tCFRelease( cgImage ); \n\tCFRelease( destination ); \n}\n```\n\n## generate-png.m \u306e\u30d3\u30eb\u30c9\u3068\u5b9f\u884c\n\n```mf:makefile\nclangoptions:=-fobjc-arc -fmodules\nframeworks  :=-framework CoreGraphics -framework Foundation\n\nrun : generate-png\n\t./$<\n\ngenerate-png : generate-png.m\n\tclang -o $@ $(clangoptions) $(frameworks) $<\n\nclean :\n\t$(RM) generate-png\n\t$(RM) *.png\n```\n\n[\u305d\u306e3](http://qiita.com/mindboard/items/eb716a8b344518e41e57)\u3078\u7d9a\u304f\u3002\n\n", "tags": ["Objective-C", "Terminal", "Make"]}