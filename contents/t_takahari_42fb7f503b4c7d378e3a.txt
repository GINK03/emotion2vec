{"context": " More than 1 year has passed since last update.string\u578b\u306e\u5024\u3092\u4ed6\u306e\u578b(int\u3068\u304bbool\u3068\u304b)\u306b\u5909\u63db\u3059\u308b\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u57fa\u672c\u3001\u5909\u63db\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u304c\u3001\n\u65e2\u5b9a\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u5909\u63db\u30df\u30b9\u304c\u8d77\u3053\u3063\u305f\u3068\u304d\u306e\u4fdd\u967a\u3092\u304b\u3051\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n\npublic static class StringExtensions\n{\n    public static bool ToBoolean(this string value)\n    {\n        return bool.Parse(value);\n    }\n\n    public static bool ToBoolean(this string value, bool defaultValue)\n    {\n        bool result;\n        return bool.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static short ToInt16(this string value)\n    {\n        return short.Parse(value);\n    }\n\n    public static short ToInt16(this string value, short defaultValue)\n    {\n        short result;\n        return short.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static int ToInt32(this string value)\n    {\n        return int.Parse(value);\n    }\n\n    public static int ToInt32(this string value, int defaultValue)\n    {\n        int result;\n        return int.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static long ToInt64(this string value)\n    {\n        return long.Parse(value);\n    }\n\n    public static long ToInt64(this string value, long defaultValue)\n    {\n        long result;\n        return long.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static double ToDouble(this string value)\n    {\n        return double.Parse(value);\n    }\n\n    public static double ToDouble(this string value, double defaultValue)\n    {\n        double result;\n        return double.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static float ToSingle(this string value)\n    {\n        return float.Parse(value);\n    }\n\n    public static float ToSingle(this string value, float defaultValue)\n    {\n        float result;\n        return float.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static decimal ToDecimal(this string value)\n    {\n        return decimal.Parse(value);\n    }\n\n    public static decimal ToDecimal(this string value, decimal defaultValue)\n    {\n        decimal result;\n        return decimal.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static char ToChar(this string value)\n    {\n        return char.Parse(value);\n    }\n\n    public static char ToChar(this string value, char defaultValue)\n    {\n        char result;\n        return char.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static DateTime ToDateTime(this string value)\n    {\n        return DateTime.Parse(value);\n    }\n\n    public static DateTime ToDateTime(this string value, DateTime defaultValue)\n    {\n        DateTime result;\n        return DateTime.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static T ToEnum<T>(this string value) where T : struct\n    {\n        return (T)Enum.Parse(typeof(T), value);\n    }\n\n    public static T ToEnum<T>(this string value, T defaultValue) where T : struct\n    {\n        T result;\n         return Enum.TryParse(value, out result) ? result : defaultValue;\n    }\n}\n\n\n\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u3053\u3093\u306a\u30ab\u30f3\u30b8\u3067\u3059\u3002\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        const string error = \"asdf85g74\";\n\n        const string b = \"true\";\n        Console.WriteLine(b.ToBoolean());\n        Console.WriteLine(\"false\".ToBoolean());\n        Console.WriteLine(error.ToBoolean(true));\n\n        const string s = \"10\";\n        Console.WriteLine(s.ToInt16());\n        Console.WriteLine(\"-10\".ToInt16());\n        Console.WriteLine(error.ToInt16(short.MinValue));\n\n        const string i = \"1000000\";\n        Console.WriteLine(i.ToInt32());\n        Console.WriteLine(\"-1000000\".ToInt32());\n        Console.WriteLine(error.ToInt32(int.MinValue));\n\n        const string l = \"10000000000\";\n        Console.WriteLine(l.ToInt64());\n        Console.WriteLine(\"-10000000000\".ToInt64());\n        Console.WriteLine(error.ToInt64(long.MinValue));\n\n        const string f = \"100.0\";\n        Console.WriteLine(f.ToSingle());\n        Console.WriteLine(\"-100.0\".ToSingle());\n        Console.WriteLine(error.ToSingle(float.MinValue));\n\n        const string db = \"100.0\";\n        Console.WriteLine(db.ToDouble());\n        Console.WriteLine(\"-100.0\".ToDouble());\n        Console.WriteLine(error.ToDouble(double.MinValue));\n\n        const string dc = \"100.000001\";\n        Console.WriteLine(dc.ToDecimal());\n        Console.WriteLine(\"-100.000001\".ToDecimal());\n        Console.WriteLine(error.ToDecimal(decimal.MinValue));\n\n        const string dt = \"2014/09/01 0:00:00\";\n        Console.WriteLine(dt.ToDateTime());\n        Console.WriteLine(\"2014/12/31 23:59:59\".ToDateTime());\n        Console.WriteLine(error.ToDateTime(DateTime.Now));\n\n        const string e = \"Sales\";\n        Console.WriteLine(e.ToEnum<Category>());\n        Console.WriteLine(\"Develop\".ToEnum<Category>());\n        Console.WriteLine(\"3\".ToEnum<Category>()); // \u6570\u5024\u306e\u6587\u5b57\u5217\u5909\u63db\u3082\u53ef\u80fd\n        Console.WriteLine(error.ToEnum(Category.All));\n\n        Console.ReadLine();\n    }\n}\n\npublic enum Category\n{\n    All = 0,\n    Sales = 1,\n    Develop = 2,\n    Support = 3\n}\n\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n\n\n\u81ea\u5206\u304c\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3067\u3053\u308c\u3089\u3092\u4f7f\u308f\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u30b1\u30fc\u30b9\u3067\u6ec5\u591a\u306b\u306a\u3044\u306f\u305a\u3067\u3001\n\u3082\u3057\u4f7f\u308f\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u72b6\u6cc1\u306b\u306a\u3063\u305f\u3089\u30af\u30e9\u30b9\u8a2d\u8a08\u306a\u3069\u3092\u898b\u76f4\u3057\u3066\u307f\u305f\u65b9\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u4f7f\u3044\u3069\u3053\u308d\u3068\u3057\u3066\u306f\u5916\u90e8API\u306e\u623b\u308a\u5024\u304cstring\u578b\u3068\u304b\u3001\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067\u3069\u3046\u3057\u3066\u3082\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3067\u304d\u306a\u3044\u3068\u3053\u308d\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\nstring\u578b\u306e\u5024\u3092\u4ed6\u306e\u578b(int\u3068\u304bbool\u3068\u304b)\u306b\u5909\u63db\u3059\u308b\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n\u57fa\u672c\u3001\u5909\u63db\u30a8\u30e9\u30fc\u304c\u8d77\u3053\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u304c\u3001\n\u65e2\u5b9a\u5024\u3092\u6e21\u3059\u3053\u3068\u3067\u5909\u63db\u30df\u30b9\u304c\u8d77\u3053\u3063\u305f\u3068\u304d\u306e\u4fdd\u967a\u3092\u304b\u3051\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n<br/>\n\n```csharp\npublic static class StringExtensions\n{\n    public static bool ToBoolean(this string value)\n    {\n        return bool.Parse(value);\n    }\n\n    public static bool ToBoolean(this string value, bool defaultValue)\n    {\n        bool result;\n        return bool.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static short ToInt16(this string value)\n    {\n        return short.Parse(value);\n    }\n\n    public static short ToInt16(this string value, short defaultValue)\n    {\n        short result;\n        return short.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static int ToInt32(this string value)\n    {\n        return int.Parse(value);\n    }\n\n    public static int ToInt32(this string value, int defaultValue)\n    {\n        int result;\n        return int.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static long ToInt64(this string value)\n    {\n        return long.Parse(value);\n    }\n\n    public static long ToInt64(this string value, long defaultValue)\n    {\n        long result;\n        return long.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static double ToDouble(this string value)\n    {\n        return double.Parse(value);\n    }\n\n    public static double ToDouble(this string value, double defaultValue)\n    {\n        double result;\n        return double.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static float ToSingle(this string value)\n    {\n        return float.Parse(value);\n    }\n\n    public static float ToSingle(this string value, float defaultValue)\n    {\n        float result;\n        return float.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static decimal ToDecimal(this string value)\n    {\n        return decimal.Parse(value);\n    }\n\n    public static decimal ToDecimal(this string value, decimal defaultValue)\n    {\n        decimal result;\n        return decimal.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static char ToChar(this string value)\n    {\n        return char.Parse(value);\n    }\n\n    public static char ToChar(this string value, char defaultValue)\n    {\n        char result;\n        return char.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static DateTime ToDateTime(this string value)\n    {\n        return DateTime.Parse(value);\n    }\n\n    public static DateTime ToDateTime(this string value, DateTime defaultValue)\n    {\n        DateTime result;\n        return DateTime.TryParse(value, out result) ? result : defaultValue;\n    }\n\n    public static T ToEnum<T>(this string value) where T : struct\n    {\n        return (T)Enum.Parse(typeof(T), value);\n    }\n\n    public static T ToEnum<T>(this string value, T defaultValue) where T : struct\n    {\n        T result;\n         return Enum.TryParse(value, out result) ? result : defaultValue;\n    }\n}\n```\n\n<br/>\n\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u3053\u3093\u306a\u30ab\u30f3\u30b8\u3067\u3059\u3002\n<br/>\n\n```csharp\nclass Program\n{\n    static void Main(string[] args)\n    {\n        const string error = \"asdf85g74\";\n\n        const string b = \"true\";\n        Console.WriteLine(b.ToBoolean());\n        Console.WriteLine(\"false\".ToBoolean());\n        Console.WriteLine(error.ToBoolean(true));\n\n        const string s = \"10\";\n        Console.WriteLine(s.ToInt16());\n        Console.WriteLine(\"-10\".ToInt16());\n        Console.WriteLine(error.ToInt16(short.MinValue));\n\n        const string i = \"1000000\";\n        Console.WriteLine(i.ToInt32());\n        Console.WriteLine(\"-1000000\".ToInt32());\n        Console.WriteLine(error.ToInt32(int.MinValue));\n\n        const string l = \"10000000000\";\n        Console.WriteLine(l.ToInt64());\n        Console.WriteLine(\"-10000000000\".ToInt64());\n        Console.WriteLine(error.ToInt64(long.MinValue));\n\n        const string f = \"100.0\";\n        Console.WriteLine(f.ToSingle());\n        Console.WriteLine(\"-100.0\".ToSingle());\n        Console.WriteLine(error.ToSingle(float.MinValue));\n\n        const string db = \"100.0\";\n        Console.WriteLine(db.ToDouble());\n        Console.WriteLine(\"-100.0\".ToDouble());\n        Console.WriteLine(error.ToDouble(double.MinValue));\n\n        const string dc = \"100.000001\";\n        Console.WriteLine(dc.ToDecimal());\n        Console.WriteLine(\"-100.000001\".ToDecimal());\n        Console.WriteLine(error.ToDecimal(decimal.MinValue));\n\n        const string dt = \"2014/09/01 0:00:00\";\n        Console.WriteLine(dt.ToDateTime());\n        Console.WriteLine(\"2014/12/31 23:59:59\".ToDateTime());\n        Console.WriteLine(error.ToDateTime(DateTime.Now));\n\n        const string e = \"Sales\";\n        Console.WriteLine(e.ToEnum<Category>());\n        Console.WriteLine(\"Develop\".ToEnum<Category>());\n        Console.WriteLine(\"3\".ToEnum<Category>()); // \u6570\u5024\u306e\u6587\u5b57\u5217\u5909\u63db\u3082\u53ef\u80fd\n        Console.WriteLine(error.ToEnum(Category.All));\n\n        Console.ReadLine();\n    }\n}\n\npublic enum Category\n{\n    All = 0,\n    Sales = 1,\n    Develop = 2,\n    Support = 3\n}\n```\n\n<br/>\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n<br/>\n\n![result.jpg](https://qiita-image-store.s3.amazonaws.com/1251/51653/db21c07e-dc01-3d12-d44f-3f6a608c9a1c.jpeg)\n\n<br/>\n\n\u81ea\u5206\u304c\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3067\u3053\u308c\u3089\u3092\u4f7f\u308f\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u30b1\u30fc\u30b9\u3067\u6ec5\u591a\u306b\u306a\u3044\u306f\u305a\u3067\u3001\n\u3082\u3057\u4f7f\u308f\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u72b6\u6cc1\u306b\u306a\u3063\u305f\u3089\u30af\u30e9\u30b9\u8a2d\u8a08\u306a\u3069\u3092\u898b\u76f4\u3057\u3066\u307f\u305f\u65b9\u304c\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5b9f\u969b\u306e\u4f7f\u3044\u3069\u3053\u308d\u3068\u3057\u3066\u306f\u5916\u90e8API\u306e\u623b\u308a\u5024\u304cstring\u578b\u3068\u304b\u3001\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067\u3069\u3046\u3057\u3066\u3082\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3067\u304d\u306a\u3044\u3068\u3053\u308d\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n", "tags": ["C#", ".NET"]}