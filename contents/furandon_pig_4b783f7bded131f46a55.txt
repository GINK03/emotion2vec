{"context": " More than 1 year has passed since last update.\n\nNetBSD\u30ab\u30fc\u30cd\u30eb\u306esysctl\u51e6\u7406\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u305f\n\u4eca\u65e5\u306eNetBSD Advent Calendar\u3067\u306f\u3001NetBSD\u30ab\u30fc\u30cd\u30eb\u5185\u90e8\u306esysctl\u51e6\u7406\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u307e\u3059\u3002\u3061\u3087\u3046\u3069\u540c\u3058\u65e5\u304c\u7a7a\u3044\u3066\u3044\u305f\u306e\u3067\u3001Linux\u306esysctl\u51e6\u7406\u3082\u540c\u69d8\u306b\u8ffd\u3044\u304b\u3051\u3066\u307f\u3066\u3044\u307e\u3059\u3002\u3088\u304b\u3063\u305f\u3089\u305d\u3061\u3089\u3082\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\nLinux\u30ab\u30fc\u30cd\u30eb\u306esysctl\u51e6\u7406\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u305f\n\n\nhttp://qiita.com/furandon_pig/items/78fa15a97e2a356ab9ba\n\n\n\n\nsysctl\nsysctl\u306f\u30ab\u30fc\u30cd\u30eb\u306e\u5185\u90e8\u72b6\u614b\u3092\u8a2d\u5b9a\u3001\u53c2\u7167\u3059\u308b\u305f\u3081\u306e\u6a5f\u80fd\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001IP\u30d1\u30b1\u30c3\u30c8\u306e\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\u7b49\u306e\u8a2d\u5b9a\u3082\nsysctl\u3067\u6709\u52b9\u30fb\u7121\u52b9\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002NetBSD\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a\u3001IP\u30d1\u30b1\u30c3\u30c8\u306e\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\u8a2d\u5b9a\u3092\n\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nkimiuso tsubaki $ sysctl net.inet.ip.forwarding \nnet.inet.ip.forwarding = 0\n\n\n\u74b0\u5883\u306b\u3064\u3044\u3066\n\u4eca\u56de\u306fNetBSD-6.1.5-amd64\u306e\u74b0\u5883\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u307e\u3059\u3002\n\n\u30ab\u30fc\u30cd\u30eb\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u308b\n\u307e\u305a\u306f\u8abf\u3079\u308b\u305f\u3081\u306e\u8db3\u304c\u304b\u308a\u304c\u6b32\u3057\u3044\u306e\u3067\u3001\"forwarding\"\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092grep\u3057\u3066\u307f\u307e\u3059\u3002\n\u305d\u308c\u3063\u307d\u3044\u30d5\u30a1\u30a4\u30eb\u304c\u5f15\u3063\u304b\u304b\u308a\u307e\u3059\u306d\u3002\nkimiuso tsubaki $ cd /usr/src/sys/\nkimiuso sys $ find sys/netinet -type f | grep \\\\.c$ | xargs grep -n \\\"forwarding\\\"\nsys/netinet/ip_input.c:1749:                   CTLTYPE_INT, \"forwarding\",\n\n\u4e0a\u8a18\u306fsysctl_createv()\u306e\u4e00\u90e8\u3067\u3059\u306d\u3002\u4f55\u3068\u306a\u304fforwarding\u95a2\u9023\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u69cb\u7bc9\u3059\u308b\u95a2\u6570\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n/usr/src/sys/netinet/ip_input.c:\n1724 static void\n1725 sysctl_net_inet_ip_setup(struct sysctllog **clog)\n1726 {\n...\n1747         sysctl_createv(clog, 0, NULL, NULL,\n1748                        CTLFLAG_PERMANENT|CTLFLAG_READWRITE,\n1749                        CTLTYPE_INT, \"forwarding\",\n1750                        SYSCTL_DESCR(\"Enable forwarding of INET datagrams\"),\n1751                        NULL, 0, &ipforwarding, 0,\n1752                        CTL_NET, PF_INET, IPPROTO_IP,\n1753                        IPCTL_FORWARDING, CTL_EOL);\n\nsysctl_createv()\u3092\u547c\u3093\u3067\u3044\u308bsysctl_net_inet_ip_setup()\u306f\u3001ip_init()\u304b\u3089\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n/usr/src/sys/netinet/ip_input.c:\n 292 /*\n 293  * IP initialization: fill in IP protocol switch table.\n 294  * All protocols not implemented in kernel go to raw IP protocol handler.\n 295  */\n 296 void\n 297 ip_init(void)\n 298 {\n ...\n 302         sysctl_net_inet_ip_setup(NULL);\n\nip_init()\u306fstruct protosw inetsw[]\u5185\u3067pr_init\u3078\u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u30e1\u30f3\u30d0\u5909\u6570pr_domain\u3067\u6307\u5b9a\u3057\u3066\u308binetdomain\u3092\u898b\u308b\u3068\u3001\u3069\u3046\u3084\u3089PF_INET\u306b\u7d10\u4ed8\u304f\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u3088\u3046\u3067\u3059\u3002\n/usr/src/sys/netinet/in_proto.c:\n214 const struct protosw inetsw[] = {\n215 {       .pr_domain = &inetdomain,\n216         .pr_init = ip_init,\n217         .pr_output = ip_output,\n218         .pr_fasttimo = ip_fasttimo,\n219         .pr_slowtimo = ip_slowtimo,\n220         .pr_drain = ip_drainstub,\n221 },\n...\n467 struct domain inetdomain = {\n468         .dom_family = PF_INET, .dom_name = \"internet\", .dom_init = NULL,\n\nsysctl_createv()\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u306f\u5f15\u6570\u3092\u628a\u63e1\u3059\u308b\u305f\u3081\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057\u3068\u5f15\u6570\u306e\u610f\u5473\u3092\u5bfe\u5fdc\u3055\u305b\u3066\u307f\u307e\u3059\u3002\nsysctl_createv(\n    clog,   // sysctl_createv(struct sysctllog **log\n    0,      // int cflags\n    NULL,   // const struct sysctlnode **rnode\n    NULL,   // const struct sysctlnode **cnode\n    CTLFLAG_PERMANENT|CTLFLAG_READWRITE,   // int flags\n    CTLTYPE_INT,    // int type\n    \"forwarding\",   // const char *namep\n    SYSCTL_DESCR(\"Enable forwarding of INET datagrams\"),  // const char *descr\n    NULL,   // sysctlfn func\n    0,      // u_quad_t qv\n    &ipforwarding,  // void *newp\n    0,      // size_t newlen\n    CTL_NET,           // ...\n    PF_INET,           // ...\n    IPPROTO_IP,        // ...\n    IPCTL_FORWARDING,  // ...\n    CTL_EOL            // ...\n);\n\nsysctlfn func\u306b\u5bfe\u5fdc\u3059\u308b\u5f15\u6570\u306fNULL\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3066\u3063\u304d\u308a\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u95a2\u6570\u3092\u7528\u610f\u3057\u3001\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7d4c\u7531\u3067\n\u547c\u3073\u51fa\u3059\u306e\u304b\u3068\u4e88\u60f3\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u9055\u3046\u307f\u305f\u3044\u3067\u3059\u3002\n1921 int\n1922 sysctl_createv(struct sysctllog **log, int cflags,\n1923                const struct sysctlnode **rnode, const struct sysctlnode **cnode,\n1924                int flags, int type, const char *namep, const char *descr,\n1925                sysctlfn func, u_quad_t qv, void *newp, size_t newlen,\n1926                ...)\n1927 {\n...\n1931         struct sysctlnode nnode, onode, *dnode;\n...\n1987         if (type == CTLTYPE_NODE) {\n...\n1993         } else if (flags & CTLFLAG_IMMEDIATE) {\n...\n2007         } else {\n2008                 nnode.sysctl_data = newp;\n2009         }\n\n\u5909\u6570ipforwarding\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3057\u3066\u3044\u307e\u3059\u3002type\u3068flags\u306e\u6761\u4ef6\u306b\u5f15\u3063\u304b\u304b\u3089\u306a\u3044\u5f15\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u306a\u306e\u3067\u3001\n\u6700\u7d42\u7684\u306bstruct sysctlnode\u306e\u30e1\u30f3\u30d0\u5909\u6570nnode.sysctl_data\u306bipfowarding\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u7d10\u4ed8\u3051\u3089\u308c\u307e\u3059\u3002\nstruct sysctlnode\u3092\u898b\u308b\u3068\u3001sysctl_data\u306e\u5b9f\u4f53\u306f_sud_data\u3067\u3001\u5916\u90e8\u30c7\u30fc\u30bf\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nsys/sysctl.h:\n1267 struct sysctlnode {\n1268         uint32_t sysctl_flags;          /* flags and type */\n1269         int32_t sysctl_num;             /* mib number */\n1270         char sysctl_name[SYSCTL_NAMELEN]; /* node name */\n1271         uint32_t sysctl_ver;            /* node's version vs. rest of tree */\n1272         uint32_t __rsvd;\n1273         union {\n1274                 struct {\n1275                         uint32_t suc_csize;     /* size of child node array */\n1276                         uint32_t suc_clen;      /* number of valid children */\n1277                         __sysc_pad(struct sysctlnode*) _suc_child; /* array of child nodes */\n1278                 } scu_child;\n1279                 struct {\n1280                         __sysc_pad(void*) _sud_data; /* pointer to external data */\n1281                         __sysc_pad(size_t) _sud_offset; /* offset to data */\n1282                 } scu_data;\n1283                 int32_t scu_alias;              /* node this node refers to */\n1284                 int32_t scu_idata;              /* immediate \"int\" data */\n1285                 u_quad_t scu_qdata;             /* immediate \"u_quad_t\" data */\n1286                 bool scu_bdata;                 /* immediate bool data */\n1287         } sysctl_un;\n1288         __sysc_pad(size_t) _sysctl_size;        /* size of instrumented data */\n1289         __sysc_pad(sysctlfn) _sysctl_func;      /* access helper function */\n1290         __sysc_pad(struct sysctlnode*) _sysctl_parent; /* parent of this node */\n1291         __sysc_pad(const char *) _sysctl_desc;  /* description of node */\n1292 };\n...\n1294 /*\n1295  * padded data\n1296  */\n...\n1298 #define sud_data        __sysc_unpad(_sud_data)\n...\n1305 /*\n1306  * nested data (may also be padded)\n1307  */\n...\n1311 #define sysctl_data     sysctl_un.scu_data.sud_data\n\nsysctl_data\u3092\u8a2d\u5b9a\u3059\u308b\u51e6\u7406\u307e\u3067\u8ffd\u3044\u304b\u3051\u3088\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u6642\u9593\u7684\u306b\u30ad\u30d3\u30b7\u3044\u306e\u3067\u3001\u4eca\u306f\u3053\u308c\u304c\u7cbe\u4e00\u676f\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u5909\u6570ipforwarding\u304c\u7d10\u3065\u3051\u3089\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u4e8b\u307e\u3067\u5206\u304b\u3063\u305f\u306e\u3067\u3001\u3053\u308c\u306b\u7d10\u4ed8\u304f\u30c7\u30fc\u30bf\u66f4\u65b0\u51e6\u7406\u306e\u90e8\u5206\u3092\n\u8ffd\u3044\u304b\u3051\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u307e\u3068\u3081\nNetBSD\u3068Linux\u3067sysctl\u306e\u5b9f\u88c5\u3092\u5c11\u3057\u3060\u3051\u8ffd\u3044\u304b\u3051\u3066\u307f\u307e\u3057\u305f\u3002\u4e21\u8005\u306e\u5b9f\u88c5\u3092\u6bd4\u8f03\u3057\u306a\u304c\u3089\u89e3\u8aac\u3057\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\n\u305d\u308c\u306f\u3082\u3046\u5c11\u3057\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n# NetBSD\u30ab\u30fc\u30cd\u30eb\u306esysctl\u51e6\u7406\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u305f\n\n\u4eca\u65e5\u306eNetBSD Advent Calendar\u3067\u306f\u3001NetBSD\u30ab\u30fc\u30cd\u30eb\u5185\u90e8\u306esysctl\u51e6\u7406\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u307e\u3059\u3002\u3061\u3087\u3046\u3069\u540c\u3058\u65e5\u304c\u7a7a\u3044\u3066\u3044\u305f\u306e\u3067\u3001Linux\u306esysctl\u51e6\u7406\u3082\u540c\u69d8\u306b\u8ffd\u3044\u304b\u3051\u3066\u307f\u3066\u3044\u307e\u3059\u3002\u3088\u304b\u3063\u305f\u3089\u305d\u3061\u3089\u3082\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n * Linux\u30ab\u30fc\u30cd\u30eb\u306esysctl\u51e6\u7406\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u305f\n   * http://qiita.com/furandon_pig/items/78fa15a97e2a356ab9ba\n\n## sysctl\n\nsysctl\u306f\u30ab\u30fc\u30cd\u30eb\u306e\u5185\u90e8\u72b6\u614b\u3092\u8a2d\u5b9a\u3001\u53c2\u7167\u3059\u308b\u305f\u3081\u306e\u6a5f\u80fd\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001IP\u30d1\u30b1\u30c3\u30c8\u306e\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\u7b49\u306e\u8a2d\u5b9a\u3082\nsysctl\u3067\u6709\u52b9\u30fb\u7121\u52b9\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002NetBSD\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u306b\u3088\u308a\u3001IP\u30d1\u30b1\u30c3\u30c8\u306e\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\u8a2d\u5b9a\u3092\n\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```sh\nkimiuso tsubaki $ sysctl net.inet.ip.forwarding \nnet.inet.ip.forwarding = 0\n```\n\n## \u74b0\u5883\u306b\u3064\u3044\u3066\n\n\u4eca\u56de\u306fNetBSD-6.1.5-amd64\u306e\u74b0\u5883\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u307e\u3059\u3002\n\n## \u30ab\u30fc\u30cd\u30eb\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u308b\n\n\u307e\u305a\u306f\u8abf\u3079\u308b\u305f\u3081\u306e\u8db3\u304c\u304b\u308a\u304c\u6b32\u3057\u3044\u306e\u3067\u3001\"forwarding\"\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092grep\u3057\u3066\u307f\u307e\u3059\u3002\n\u305d\u308c\u3063\u307d\u3044\u30d5\u30a1\u30a4\u30eb\u304c\u5f15\u3063\u304b\u304b\u308a\u307e\u3059\u306d\u3002\n\n```sh\nkimiuso tsubaki $ cd /usr/src/sys/\nkimiuso sys $ find sys/netinet -type f | grep \\\\.c$ | xargs grep -n \\\"forwarding\\\"\nsys/netinet/ip_input.c:1749:                   CTLTYPE_INT, \"forwarding\",\n```\n\n\u4e0a\u8a18\u306fsysctl_createv()\u306e\u4e00\u90e8\u3067\u3059\u306d\u3002\u4f55\u3068\u306a\u304fforwarding\u95a2\u9023\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u69cb\u7bc9\u3059\u308b\u95a2\u6570\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\n```c\n/usr/src/sys/netinet/ip_input.c:\n1724 static void\n1725 sysctl_net_inet_ip_setup(struct sysctllog **clog)\n1726 {\n...\n1747         sysctl_createv(clog, 0, NULL, NULL,\n1748                        CTLFLAG_PERMANENT|CTLFLAG_READWRITE,\n1749                        CTLTYPE_INT, \"forwarding\",\n1750                        SYSCTL_DESCR(\"Enable forwarding of INET datagrams\"),\n1751                        NULL, 0, &ipforwarding, 0,\n1752                        CTL_NET, PF_INET, IPPROTO_IP,\n1753                        IPCTL_FORWARDING, CTL_EOL);\n```\n\nsysctl_createv()\u3092\u547c\u3093\u3067\u3044\u308bsysctl_net_inet_ip_setup()\u306f\u3001ip_init()\u304b\u3089\u547c\u3070\u308c\u3066\u3044\u307e\u3059\u3002\n\n```c\n/usr/src/sys/netinet/ip_input.c:\n 292 /*\n 293  * IP initialization: fill in IP protocol switch table.\n 294  * All protocols not implemented in kernel go to raw IP protocol handler.\n 295  */\n 296 void\n 297 ip_init(void)\n 298 {\n ...\n 302         sysctl_net_inet_ip_setup(NULL);\n```\n\nip_init()\u306fstruct protosw inetsw[]\u5185\u3067pr_init\u3078\u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u30e1\u30f3\u30d0\u5909\u6570pr_domain\u3067\u6307\u5b9a\u3057\u3066\u308binetdomain\u3092\u898b\u308b\u3068\u3001\u3069\u3046\u3084\u3089PF_INET\u306b\u7d10\u4ed8\u304f\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u3088\u3046\u3067\u3059\u3002\n\n```c\n/usr/src/sys/netinet/in_proto.c:\n214 const struct protosw inetsw[] = {\n215 {       .pr_domain = &inetdomain,\n216         .pr_init = ip_init,\n217         .pr_output = ip_output,\n218         .pr_fasttimo = ip_fasttimo,\n219         .pr_slowtimo = ip_slowtimo,\n220         .pr_drain = ip_drainstub,\n221 },\n...\n467 struct domain inetdomain = {\n468         .dom_family = PF_INET, .dom_name = \"internet\", .dom_init = NULL,\n```\n\nsysctl_createv()\u3092\u8ffd\u3044\u304b\u3051\u3066\u307f\u307e\u3059\u3002\u307e\u305a\u306f\u5f15\u6570\u3092\u628a\u63e1\u3059\u308b\u305f\u3081\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057\u3068\u5f15\u6570\u306e\u610f\u5473\u3092\u5bfe\u5fdc\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n```c\nsysctl_createv(\n    clog,   // sysctl_createv(struct sysctllog **log\n    0,      // int cflags\n    NULL,   // const struct sysctlnode **rnode\n    NULL,   // const struct sysctlnode **cnode\n    CTLFLAG_PERMANENT|CTLFLAG_READWRITE,   // int flags\n    CTLTYPE_INT,    // int type\n    \"forwarding\",   // const char *namep\n    SYSCTL_DESCR(\"Enable forwarding of INET datagrams\"),  // const char *descr\n    NULL,   // sysctlfn func\n    0,      // u_quad_t qv\n    &ipforwarding,  // void *newp\n    0,      // size_t newlen\n    CTL_NET,           // ...\n    PF_INET,           // ...\n    IPPROTO_IP,        // ...\n    IPCTL_FORWARDING,  // ...\n    CTL_EOL            // ...\n);\n```\n\nsysctlfn func\u306b\u5bfe\u5fdc\u3059\u308b\u5f15\u6570\u306fNULL\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3066\u3063\u304d\u308a\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u95a2\u6570\u3092\u7528\u610f\u3057\u3001\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7d4c\u7531\u3067\n\u547c\u3073\u51fa\u3059\u306e\u304b\u3068\u4e88\u60f3\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u9055\u3046\u307f\u305f\u3044\u3067\u3059\u3002\n\n```c\n1921 int\n1922 sysctl_createv(struct sysctllog **log, int cflags,\n1923                const struct sysctlnode **rnode, const struct sysctlnode **cnode,\n1924                int flags, int type, const char *namep, const char *descr,\n1925                sysctlfn func, u_quad_t qv, void *newp, size_t newlen,\n1926                ...)\n1927 {\n...\n1931         struct sysctlnode nnode, onode, *dnode;\n...\n1987         if (type == CTLTYPE_NODE) {\n...\n1993         } else if (flags & CTLFLAG_IMMEDIATE) {\n...\n2007         } else {\n2008                 nnode.sysctl_data = newp;\n2009         }\n```\n\n\u5909\u6570ipforwarding\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3057\u3066\u3044\u307e\u3059\u3002type\u3068flags\u306e\u6761\u4ef6\u306b\u5f15\u3063\u304b\u304b\u3089\u306a\u3044\u5f15\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u306a\u306e\u3067\u3001\n\u6700\u7d42\u7684\u306bstruct sysctlnode\u306e\u30e1\u30f3\u30d0\u5909\u6570nnode.sysctl_data\u306bipfowarding\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u7d10\u4ed8\u3051\u3089\u308c\u307e\u3059\u3002\n\nstruct sysctlnode\u3092\u898b\u308b\u3068\u3001sysctl_data\u306e\u5b9f\u4f53\u306f_sud_data\u3067\u3001\u5916\u90e8\u30c7\u30fc\u30bf\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```c\nsys/sysctl.h:\n1267 struct sysctlnode {\n1268         uint32_t sysctl_flags;          /* flags and type */\n1269         int32_t sysctl_num;             /* mib number */\n1270         char sysctl_name[SYSCTL_NAMELEN]; /* node name */\n1271         uint32_t sysctl_ver;            /* node's version vs. rest of tree */\n1272         uint32_t __rsvd;\n1273         union {\n1274                 struct {\n1275                         uint32_t suc_csize;     /* size of child node array */\n1276                         uint32_t suc_clen;      /* number of valid children */\n1277                         __sysc_pad(struct sysctlnode*) _suc_child; /* array of child nodes */\n1278                 } scu_child;\n1279                 struct {\n1280                         __sysc_pad(void*) _sud_data; /* pointer to external data */\n1281                         __sysc_pad(size_t) _sud_offset; /* offset to data */\n1282                 } scu_data;\n1283                 int32_t scu_alias;              /* node this node refers to */\n1284                 int32_t scu_idata;              /* immediate \"int\" data */\n1285                 u_quad_t scu_qdata;             /* immediate \"u_quad_t\" data */\n1286                 bool scu_bdata;                 /* immediate bool data */\n1287         } sysctl_un;\n1288         __sysc_pad(size_t) _sysctl_size;        /* size of instrumented data */\n1289         __sysc_pad(sysctlfn) _sysctl_func;      /* access helper function */\n1290         __sysc_pad(struct sysctlnode*) _sysctl_parent; /* parent of this node */\n1291         __sysc_pad(const char *) _sysctl_desc;  /* description of node */\n1292 };\n...\n1294 /*\n1295  * padded data\n1296  */\n...\n1298 #define sud_data        __sysc_unpad(_sud_data)\n...\n1305 /*\n1306  * nested data (may also be padded)\n1307  */\n...\n1311 #define sysctl_data     sysctl_un.scu_data.sud_data\n```\n\nsysctl_data\u3092\u8a2d\u5b9a\u3059\u308b\u51e6\u7406\u307e\u3067\u8ffd\u3044\u304b\u3051\u3088\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u6642\u9593\u7684\u306b\u30ad\u30d3\u30b7\u3044\u306e\u3067\u3001\u4eca\u306f\u3053\u308c\u304c\u7cbe\u4e00\u676f\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u5909\u6570ipforwarding\u304c\u7d10\u3065\u3051\u3089\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u4e8b\u307e\u3067\u5206\u304b\u3063\u305f\u306e\u3067\u3001\u3053\u308c\u306b\u7d10\u4ed8\u304f\u30c7\u30fc\u30bf\u66f4\u65b0\u51e6\u7406\u306e\u90e8\u5206\u3092\n\u8ffd\u3044\u304b\u3051\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n## \u307e\u3068\u3081\n\nNetBSD\u3068Linux\u3067sysctl\u306e\u5b9f\u88c5\u3092\u5c11\u3057\u3060\u3051\u8ffd\u3044\u304b\u3051\u3066\u307f\u307e\u3057\u305f\u3002\u4e21\u8005\u306e\u5b9f\u88c5\u3092\u6bd4\u8f03\u3057\u306a\u304c\u3089\u89e3\u8aac\u3057\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\n\u305d\u308c\u306f\u3082\u3046\u5c11\u3057\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n", "tags": ["NetBSD", "AdventCalendar"]}