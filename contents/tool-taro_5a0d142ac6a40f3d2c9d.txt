{"context": "\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u3001\u753b\u50cf\u304b\u3089\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u3092\u751f\u6210\u3057\u307e\u3057\u305f\u306e\u3067\u3001\n\u7d9a\u304d\u3067\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u3092\u753b\u50cf\u306b\u623b\u3057\u307e\u3059\u3002\n\n\u5b9f\u88c5\u4f8b\n\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u52d5\u4f5c\u78ba\u8a8d\u3057\u3084\u3059\u3044\u3088\u3046\u306bmain\u30e1\u30bd\u30c3\u30c9\u3067\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u524d\u56de\u306e\u3082\u306e\u306b\u51e6\u7406\u3092\u4ed8\u3051\u8db3\u3059\u5f62\u3068\u3057\u307e\u3057\u305f(\"\u3053\u3053\u304b\u3089\u8ffd\u52a0\u5206\"\u306e\u8a18\u8ff0\u7b87\u6240\u4ee5\u964d)\u3002\n\u7d50\u679c\u3060\u3051\u3092\u78ba\u8a8d\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u8a18\u4e8b\u306e\u4e00\u756a\u4e0b\u306e\u30ea\u30f3\u30af\u5148\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\nImageToAscii.java\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.FontMetrics;\nimport java.awt.Graphics2D;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.image.BufferedImage;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport javax.imageio.ImageIO;\n\n/**\n *\n * @author tool-taro.com\n */\npublic class ImageToAscii {\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n\n        //Java\u306e\u30d1\u30b9\n        //String javaPath = \"/usr/java/latest/bin/java\";\n        String javaPath = \"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_102\\\\bin\\\\java.exe\";\n        //jave5\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n        String javeDir = \"/usr/local/jave5\";\n        //jave5.jar\u306e\u30d1\u30b9\n        String javePath = \"/usr/local/jave5/jave5.jar\";\n\n        //\u8aad\u307f\u53d6\u308a\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\n        String inputFilePath = \"input.jpg\";\n        //Ascii\u6587\u5b57\u6570(\u6a2a)\n        int width = 200;\n\n        String[] commandArray = new String[6];\n        int index = 0;\n        commandArray[index++] = javaPath;\n        commandArray[index++] = \"-jar\";\n        commandArray[index++] = javePath;\n        commandArray[index++] = \"image2ascii\";\n        commandArray[index++] = inputFilePath;\n        commandArray[index++] = \"width=\" + width;\n\n        Runtime runtime = Runtime.getRuntime();\n        Process process = null;\n        StringBuilder logBuilder = new StringBuilder();\n        StringBuilder errorBuilder = new StringBuilder();\n        int status = 0;\n\n        try {\n            //\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092jave5\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u3057\u3066\u51e6\u7406\u3059\u308b\n            process = runtime.exec(commandArray, null, new File(javeDir));\n            final InputStream in = process.getInputStream();\n            final InputStream ein = process.getErrorStream();\n\n            Runnable inputStreamThread = () -> {\n                BufferedReader reader = null;\n                String line;\n                try {\n                    reader = new BufferedReader(new InputStreamReader(in));\n                    while (true) {\n                        line = reader.readLine();\n                        if (line == null) {\n                            break;\n                        }\n                        logBuilder.append(line).append(\"\\n\");\n                    }\n                }\n                catch (IOException e) {\n                }\n                finally {\n                    if (reader != null) {\n                        try {\n                            reader.close();\n                        }\n                        catch (IOException e) {\n                        }\n                    }\n                }\n            };\n            Runnable errorStreamThread = () -> {\n                BufferedReader reader = null;\n                String line;\n                try {\n                    reader = new BufferedReader(new InputStreamReader(ein));\n                    while (true) {\n                        line = reader.readLine();\n                        if (line == null) {\n                            break;\n                        }\n                        errorBuilder.append(line).append(\"\\n\");\n                    }\n                }\n                catch (IOException e) {\n                }\n                finally {\n                    if (reader != null) {\n                        try {\n                            reader.close();\n                        }\n                        catch (IOException e) {\n                        }\n                    }\n                }\n            };\n\n            Thread inThread = new Thread(inputStreamThread);\n            Thread errorThread = new Thread(errorStreamThread);\n\n            inThread.start();\n            errorThread.start();\n\n            status = process.waitFor();\n            inThread.join();\n            errorThread.join();\n        }\n        finally {\n            if (process != null) {\n                try {\n                    process.destroy();\n                }\n                catch (Exception e) {\n                }\n            }\n        }\n        System.out.format(\"\u5909\u63db\u7d50\u679c\\n%1$s\", logBuilder.toString());\n\n        //\u3053\u3053\u304b\u3089\u8ffd\u52a0\u5206\n        //AA\u2192\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\n        String outputFilePath = \"ascii.png\";\n\n        //\u6a19\u6e96\u306e\u7b49\u5e45\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046\n        String fontName = Font.MONOSPACED;\n        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n        Font[] fonts = ge.getAllFonts();\n        for (Font font : fonts) {\n            //MS\u30b4\u30b7\u30c3\u30af\u304c\u3042\u308b\u74b0\u5883\u3067\u3042\u308c\u3070\u512a\u5148\u3057\u3066\u4f7f\u3046\n            if (\"MS Gothic\".equals(font.getName())) {\n                fontName = font.getFontName();\n                break;\n            }\n        }\n        Font font = new Font(fontName, Font.PLAIN, 12);\n\n        //Graphics\u30fbFontMetrics\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30c0\u30df\u30fc\n        BufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_USHORT_GRAY);\n        Graphics2D graphics = image.createGraphics();\n        FontMetrics metrics = graphics.getFontMetrics(font);\n\n        //\u6587\u5b57\u9593\u306e\u30d4\u30af\u30bb\u30eb(\u8abf\u6574\u5024)\n        int colMargin = 0;\n        //\u884c\u9593\u306e\u30d4\u30af\u30bb\u30eb(\u8abf\u6574\u5024)\n        int rowMargin = 0;\n        //\u7b49\u5e45\u30d5\u30a9\u30f3\u30c8\u306e\u5e45\u3092\u53d6\u5f97\u3059\u308b\n        int fontWidth = metrics.charWidth(' ');\n        //\u7b49\u5e45\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u3092\u53d6\u5f97\u3059\u308b(FontMetrics#getHeight\u306f\u884c\u9593\u306e\u30b5\u30a4\u30ba\u307e\u3067\u5165\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u4f7f\u308f\u306a\u3044)\n        int fontHeight = metrics.getDescent() + metrics.getAscent();\n\n        String[] lines = logBuilder.toString().split(\"\\n\");\n        //\u30d5\u30a9\u30f3\u30c8\u306e\u5e45\u30fb\u9ad8\u3055\u304b\u3089\u8a08\u7b97\u3055\u308c\u308bImage\u3092\u751f\u6210\u3059\u308b\n        image = new BufferedImage(fontWidth * width + (width - 1) * colMargin, fontHeight * lines.length + (lines.length - 1) * rowMargin, BufferedImage.TYPE_USHORT_GRAY);\n        graphics = image.createGraphics();\n        //\u80cc\u666f\u3092\u767d\u306b\n        graphics.setColor(Color.WHITE);\n        graphics.fillRect(0, 0, image.getWidth(), image.getHeight());\n        //\u6587\u5b57\u3092\u9ed2\u306b\n        graphics.setColor(Color.BLACK);\n        //\u30d5\u30a9\u30f3\u30c8\u3082\u5fd8\u308c\u305a\u6307\u5b9a\n        graphics.setFont(font);\n        //\u6587\u5b57\u9593\u306e\u8abf\u6574\u304c\u3042\u308b\u5834\u5408\u306f1\u6587\u5b57\u305a\u3064\u4f4d\u7f6e\u3092\u6c7a\u3081\u306a\u304c\u3089\u63cf\u753b\u3059\u308b\n        if (colMargin > 0) {\n            for (int i = 0; i < lines.length; i++) {\n                for (int j = 0; j < lines[i].length(); j++) {\n                    //\u63cf\u753b\u3057\u305f\u3044\u884c\u306e\u4e00\u756a\u4e0a\u304b\u3089\u63cf\u753b\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001FontMetrics#getAscent\u3067\u5f97\u3089\u308c\u305f\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u57fa\u6e96\u306b\u63cf\u753b\u3059\u308b\n                    graphics.drawString(String.valueOf(lines[i].charAt(j)), (fontWidth + colMargin) * j, (fontHeight + rowMargin) * i + metrics.getAscent());\n                }\n            }\n        }\n        //\u6587\u5b57\u9593\u306e\u8abf\u6574\u304c\u306a\u3044\u5834\u5408\u306f\u307e\u3068\u3081\u3066\u63cf\u753b\u3059\u308b\n        else {\n            for (int i = 0; i < lines.length; i++) {\n                //\u63cf\u753b\u3057\u305f\u3044\u884c\u306e\u4e00\u756a\u4e0a\u304b\u3089\u63cf\u753b\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001FontMetrics#getAscent\u3067\u5f97\u3089\u308c\u305f\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u57fa\u6e96\u306b\u63cf\u753b\u3059\u308b\n                graphics.drawString(lines[i], 0, (fontHeight + rowMargin) * i + metrics.getAscent());\n            }\n        }\n        ImageIO.write(image, \"png\", new File(outputFilePath));\n    }\n}\n\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n$ javac ImageToAscii.java\n$ java ImageToAscii\n(AA\u304c\u51fa\u529b\u3055\u308c\u308b\u305f\u3081\u7701\u7565)\n\n\u5909\u63db\u524d\u306e\u753b\u50cf\u306f\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\n\u4eca\u56de\u306fWindows\u3068CentOS\u3067\u5b9f\u884c\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u9055\u3044\u306b\u3088\u308b\u5dee\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\nWindows\n\nCentOS\n\n\n\u74b0\u5883\n\n\n\u958b\u767a\n\nWindows 10 Pro\nJDK 1.8.0_112\nNetBeans IDE 8.2\n\n\n\n\u52d5\u4f5c\u691c\u8a3c\n\nWindows 10 Pro\nCentOS Linux release 7.2\nJDK 1.8.0_112\n\n\n\n\u4e0a\u8a18\u306e\u5b9f\u88c5\u3092\u30d9\u30fc\u30b9\u306bWeb\u30c4\u30fc\u30eb\u3082\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nAA\u5909\u63db(\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u751f\u6210)\uff5cWeb\u4fbf\u5229\u30c4\u30fc\u30eb@\u30c4\u30fc\u30eb\u30bf\u30ed\u30a6\n## \u306f\u3058\u3081\u306b\n[\u524d\u56de](http://qiita.com/tool-taro/items/710c821cd80ad8f893a4)\u3001\u753b\u50cf\u304b\u3089\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u3092\u751f\u6210\u3057\u307e\u3057\u305f\u306e\u3067\u3001\n\u7d9a\u304d\u3067\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u3092\u753b\u50cf\u306b\u623b\u3057\u307e\u3059\u3002\n\n## \u5b9f\u88c5\u4f8b\n\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u52d5\u4f5c\u78ba\u8a8d\u3057\u3084\u3059\u3044\u3088\u3046\u306bmain\u30e1\u30bd\u30c3\u30c9\u3067\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u524d\u56de\u306e\u3082\u306e\u306b\u51e6\u7406\u3092\u4ed8\u3051\u8db3\u3059\u5f62\u3068\u3057\u307e\u3057\u305f(\"\u3053\u3053\u304b\u3089\u8ffd\u52a0\u5206\"\u306e\u8a18\u8ff0\u7b87\u6240\u4ee5\u964d)\u3002\n\u7d50\u679c\u3060\u3051\u3092\u78ba\u8a8d\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u3053\u306e\u8a18\u4e8b\u306e\u4e00\u756a\u4e0b\u306e\u30ea\u30f3\u30af\u5148\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n```java:ImageToAscii.java\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.FontMetrics;\nimport java.awt.Graphics2D;\nimport java.awt.GraphicsEnvironment;\nimport java.awt.image.BufferedImage;\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport javax.imageio.ImageIO;\n\n/**\n *\n * @author tool-taro.com\n */\npublic class ImageToAscii {\n\n\tpublic static void main(String[] args) throws IOException, InterruptedException {\n\n\t\t//Java\u306e\u30d1\u30b9\n\t\t//String javaPath = \"/usr/java/latest/bin/java\";\n\t\tString javaPath = \"C:\\\\Program Files\\\\Java\\\\jdk1.8.0_102\\\\bin\\\\java.exe\";\n\t\t//jave5\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n\t\tString javeDir = \"/usr/local/jave5\";\n\t\t//jave5.jar\u306e\u30d1\u30b9\n\t\tString javePath = \"/usr/local/jave5/jave5.jar\";\n\n\t\t//\u8aad\u307f\u53d6\u308a\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\n\t\tString inputFilePath = \"input.jpg\";\n\t\t//Ascii\u6587\u5b57\u6570(\u6a2a)\n\t\tint width = 200;\n\n\t\tString[] commandArray = new String[6];\n\t\tint index = 0;\n\t\tcommandArray[index++] = javaPath;\n\t\tcommandArray[index++] = \"-jar\";\n\t\tcommandArray[index++] = javePath;\n\t\tcommandArray[index++] = \"image2ascii\";\n\t\tcommandArray[index++] = inputFilePath;\n\t\tcommandArray[index++] = \"width=\" + width;\n\n\t\tRuntime runtime = Runtime.getRuntime();\n\t\tProcess process = null;\n\t\tStringBuilder logBuilder = new StringBuilder();\n\t\tStringBuilder errorBuilder = new StringBuilder();\n\t\tint status = 0;\n\n\t\ttry {\n\t\t\t//\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092jave5\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u3057\u3066\u51e6\u7406\u3059\u308b\n\t\t\tprocess = runtime.exec(commandArray, null, new File(javeDir));\n\t\t\tfinal InputStream in = process.getInputStream();\n\t\t\tfinal InputStream ein = process.getErrorStream();\n\n\t\t\tRunnable inputStreamThread = () -> {\n\t\t\t\tBufferedReader reader = null;\n\t\t\t\tString line;\n\t\t\t\ttry {\n\t\t\t\t\treader = new BufferedReader(new InputStreamReader(in));\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tline = reader.readLine();\n\t\t\t\t\t\tif (line == null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlogBuilder.append(line).append(\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (IOException e) {\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tif (reader != null) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treader.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (IOException e) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tRunnable errorStreamThread = () -> {\n\t\t\t\tBufferedReader reader = null;\n\t\t\t\tString line;\n\t\t\t\ttry {\n\t\t\t\t\treader = new BufferedReader(new InputStreamReader(ein));\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tline = reader.readLine();\n\t\t\t\t\t\tif (line == null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\terrorBuilder.append(line).append(\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (IOException e) {\n\t\t\t\t}\n\t\t\t\tfinally {\n\t\t\t\t\tif (reader != null) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\treader.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch (IOException e) {\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tThread inThread = new Thread(inputStreamThread);\n\t\t\tThread errorThread = new Thread(errorStreamThread);\n\n\t\t\tinThread.start();\n\t\t\terrorThread.start();\n\n\t\t\tstatus = process.waitFor();\n\t\t\tinThread.join();\n\t\t\terrorThread.join();\n\t\t}\n\t\tfinally {\n\t\t\tif (process != null) {\n\t\t\t\ttry {\n\t\t\t\t\tprocess.destroy();\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.format(\"\u5909\u63db\u7d50\u679c\\n%1$s\", logBuilder.toString());\n\n\t\t//\u3053\u3053\u304b\u3089\u8ffd\u52a0\u5206\n\t\t//AA\u2192\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5834\u6240\n\t\tString outputFilePath = \"ascii.png\";\n\n\t\t//\u6a19\u6e96\u306e\u7b49\u5e45\u30d5\u30a9\u30f3\u30c8\u3092\u4f7f\u3046\n\t\tString fontName = Font.MONOSPACED;\n\t\tGraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n\t\tFont[] fonts = ge.getAllFonts();\n\t\tfor (Font font : fonts) {\n\t\t\t//MS\u30b4\u30b7\u30c3\u30af\u304c\u3042\u308b\u74b0\u5883\u3067\u3042\u308c\u3070\u512a\u5148\u3057\u3066\u4f7f\u3046\n\t\t\tif (\"MS Gothic\".equals(font.getName())) {\n\t\t\t\tfontName = font.getFontName();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tFont font = new Font(fontName, Font.PLAIN, 12);\n\n\t\t//Graphics\u30fbFontMetrics\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u30c0\u30df\u30fc\n\t\tBufferedImage image = new BufferedImage(1, 1, BufferedImage.TYPE_USHORT_GRAY);\n\t\tGraphics2D graphics = image.createGraphics();\n\t\tFontMetrics metrics = graphics.getFontMetrics(font);\n\n\t\t//\u6587\u5b57\u9593\u306e\u30d4\u30af\u30bb\u30eb(\u8abf\u6574\u5024)\n\t\tint colMargin = 0;\n\t\t//\u884c\u9593\u306e\u30d4\u30af\u30bb\u30eb(\u8abf\u6574\u5024)\n\t\tint rowMargin = 0;\n\t\t//\u7b49\u5e45\u30d5\u30a9\u30f3\u30c8\u306e\u5e45\u3092\u53d6\u5f97\u3059\u308b\n\t\tint fontWidth = metrics.charWidth(' ');\n\t\t//\u7b49\u5e45\u30d5\u30a9\u30f3\u30c8\u306e\u9ad8\u3055\u3092\u53d6\u5f97\u3059\u308b(FontMetrics#getHeight\u306f\u884c\u9593\u306e\u30b5\u30a4\u30ba\u307e\u3067\u5165\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u4f7f\u308f\u306a\u3044)\n\t\tint fontHeight = metrics.getDescent() + metrics.getAscent();\n\n\t\tString[] lines = logBuilder.toString().split(\"\\n\");\n\t\t//\u30d5\u30a9\u30f3\u30c8\u306e\u5e45\u30fb\u9ad8\u3055\u304b\u3089\u8a08\u7b97\u3055\u308c\u308bImage\u3092\u751f\u6210\u3059\u308b\n\t\timage = new BufferedImage(fontWidth * width + (width - 1) * colMargin, fontHeight * lines.length + (lines.length - 1) * rowMargin, BufferedImage.TYPE_USHORT_GRAY);\n\t\tgraphics = image.createGraphics();\n\t\t//\u80cc\u666f\u3092\u767d\u306b\n\t\tgraphics.setColor(Color.WHITE);\n\t\tgraphics.fillRect(0, 0, image.getWidth(), image.getHeight());\n\t\t//\u6587\u5b57\u3092\u9ed2\u306b\n\t\tgraphics.setColor(Color.BLACK);\n\t\t//\u30d5\u30a9\u30f3\u30c8\u3082\u5fd8\u308c\u305a\u6307\u5b9a\n\t\tgraphics.setFont(font);\n\t\t//\u6587\u5b57\u9593\u306e\u8abf\u6574\u304c\u3042\u308b\u5834\u5408\u306f1\u6587\u5b57\u305a\u3064\u4f4d\u7f6e\u3092\u6c7a\u3081\u306a\u304c\u3089\u63cf\u753b\u3059\u308b\n\t\tif (colMargin > 0) {\n\t\t\tfor (int i = 0; i < lines.length; i++) {\n\t\t\t\tfor (int j = 0; j < lines[i].length(); j++) {\n\t\t\t\t\t//\u63cf\u753b\u3057\u305f\u3044\u884c\u306e\u4e00\u756a\u4e0a\u304b\u3089\u63cf\u753b\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001FontMetrics#getAscent\u3067\u5f97\u3089\u308c\u305f\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u57fa\u6e96\u306b\u63cf\u753b\u3059\u308b\n\t\t\t\t\tgraphics.drawString(String.valueOf(lines[i].charAt(j)), (fontWidth + colMargin) * j, (fontHeight + rowMargin) * i + metrics.getAscent());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//\u6587\u5b57\u9593\u306e\u8abf\u6574\u304c\u306a\u3044\u5834\u5408\u306f\u307e\u3068\u3081\u3066\u63cf\u753b\u3059\u308b\n\t\telse {\n\t\t\tfor (int i = 0; i < lines.length; i++) {\n\t\t\t\t//\u63cf\u753b\u3057\u305f\u3044\u884c\u306e\u4e00\u756a\u4e0a\u304b\u3089\u63cf\u753b\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001FontMetrics#getAscent\u3067\u5f97\u3089\u308c\u305f\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u3092\u57fa\u6e96\u306b\u63cf\u753b\u3059\u308b\n\t\t\t\tgraphics.drawString(lines[i], 0, (fontHeight + rowMargin) * i + metrics.getAscent());\n\t\t\t}\n\t\t}\n\t\tImageIO.write(image, \"png\", new File(outputFilePath));\n\t}\n}\n```\n## \u52d5\u4f5c\u78ba\u8a8d\n\n```\n$ javac ImageToAscii.java\n$ java ImageToAscii\n(AA\u304c\u51fa\u529b\u3055\u308c\u308b\u305f\u3081\u7701\u7565)\n```\n\u5909\u63db\u524d\u306e\u753b\u50cf\u306f\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n![c43ffd45-ca14-9958-b185-882ee7d4e40b.jpeg](https://qiita-image-store.s3.amazonaws.com/0/111947/fc327df7-d04f-e2a2-a2f7-5895e2e0d511.jpeg)\n\n\u4eca\u56de\u306fWindows\u3068CentOS\u3067\u5b9f\u884c\u3057\u3001\u30d5\u30a9\u30f3\u30c8\u306e\u9055\u3044\u306b\u3088\u308b\u5dee\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\nWindows\n![ascii.png](https://qiita-image-store.s3.amazonaws.com/0/111947/a7529cc4-5f51-9b72-1ba5-218a9014433d.png)\n\nCentOS\n![linux.png](https://qiita-image-store.s3.amazonaws.com/0/111947/920775cf-3acb-b05c-fe60-319231b5dccf.png)\n## \u74b0\u5883\n- \u958b\u767a\n\t- Windows 10 Pro\n\t- JDK 1.8.0_112\n\t- NetBeans IDE 8.2\n\n- \u52d5\u4f5c\u691c\u8a3c\n\t- Windows 10 Pro\n\t- CentOS Linux release 7.2\n\t- JDK 1.8.0_112\n\n\u4e0a\u8a18\u306e\u5b9f\u88c5\u3092\u30d9\u30fc\u30b9\u306bWeb\u30c4\u30fc\u30eb\u3082\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n[AA\u5909\u63db(\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8\u751f\u6210)\uff5cWeb\u4fbf\u5229\u30c4\u30fc\u30eb@\u30c4\u30fc\u30eb\u30bf\u30ed\u30a6](http://tool-taro.com/image_to_ascii/)\n", "tags": ["Java", "java8", "image", "AsciiArt", "\u30a2\u30b9\u30ad\u30fc\u30a2\u30fc\u30c8"]}