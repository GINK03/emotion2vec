{"context": " More than 1 year has passed since last update.\u9078\u629e\u4e2d\u306e\u30d6\u30ed\u30c3\u30af\u3092\u898b\u3048\u308b\u3088\u3046\u306b\u6539\u9020\u3059\u308b\n\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u91cd\u306a\u3063\u3066\u3044\u308b\u30d6\u30ed\u30c3\u30af\u4e0a\u306b\u9078\u629e\u4e2d\u306e\u30d6\u30ed\u30c3\u30af\u3092\u900f\u904e\u3057\u3066\u8868\u793a\u3059\u308b\n\u3042\u3068\u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u900f\u904e\u30d6\u30ed\u30c3\u30af\u304c\u79fb\u52d5\u3059\u308b\n\u52d5\u753b\u30ea\u30b9\u30c8\uff1aLWJGL\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\u52d5\u753b\u306f\u30b3\u30b3\npackage episode013\n\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport processing.core.PApplet\nimport processing.event.Event\n\nclass DisplayTest extends PApplet {\n\n    def grid\n    def selection = BlockType.STONE\n    def selector_x = 0\n    def selector_y = 0\n    def mouseEnabled = true\n\n    def void setup() {\n        size(640, 480)\n        frameRate(60)\n\n        grid = new BlockGrid(this)\n    }\n\n    def void draw() {\n        background(0, 0, 0)\n\n        if (mouseEnabled) setSelectorPoint()\n\n        grid.draw()\n        drawSelectionBox()\n    }\n\n    def void keyPressed() {\n        switch (key) {\n            case 's':\n                grid.save(new File('save.json'))\n                break\n            case 'l':\n                grid.load(new File('save.json'))\n                break\n            case '1':\n                selection = BlockType.STONE\n                break\n            case '2':\n                selection = BlockType.DIRT\n                break\n            case '3':\n                selection = BlockType.GRASS\n                break\n            case '4':\n                selection = BlockType.AIR\n                break\n            case 'c':\n                grid.clear()\n                break\n        }\n        switch (keyCode) {\n            case RIGHT:\n                mouseEnabled = false\n                if (!(selector_x + 1 > World.BLOCKS_WIDTH - 1)) {\n                    selector_x += 1;\n                }\n                break\n            case LEFT:\n                mouseEnabled = false\n                if (!(selector_x - 1 < 0)) {\n                    selector_x -= 1;\n                }\n                break\n            case UP:\n                mouseEnabled = false\n                if (!(selector_y - 1 < 0)) {\n                    selector_y -= 1;\n                }\n                break\n            case DOWN:\n                mouseEnabled = false\n                if (!(selector_y + 1 > World.BLOCKS_HEIGHT - 1)) {\n                    selector_y += 1;\n                }\n                break\n        }\n    }\n\n    def void mouseClicked() {\n        mouseEnabled = true\n        setSelectorPoint()\n        setBlock()\n    }\n\n    def void mouseDragged() {\n        mouseEnabled = true\n        setSelectorPoint()\n        setBlock()\n    }\n\n    def setBlock() {\n        if (selector_x >= 0 && selector_x < World.BLOCKS_WIDTH\n                && selector_y >= 0 && selector_y < World.BLOCKS_HEIGHT) {\n            grid.setAt(selector_x, selector_y, selection)\n        }\n    }\n\n    def setSelectorPoint() {\n        selector_x = floor(mouseX / World.BLOCK_SIZE)\n        selector_y = floor(mouseY / World.BLOCK_SIZE)\n    }\n\n    def drawSelectionBox() {\n        if (grid.getAt(selector_x, selector_y).type != BlockType.AIR || selection == BlockType.AIR) {\n            // \u767d\u3044\u900f\u904e\u30d6\u30ed\u30c3\u30af\u3092\u8868\u793a\n            noStroke()\n            fill(255, 255, 255, 150)\n            rect(selector_x * World.BLOCK_SIZE, selector_y * World.BLOCK_SIZE, World.BLOCK_SIZE, World.BLOCK_SIZE)\n        } else {\n            // \u9078\u629e\u3057\u3066\u3044\u308b\u30d6\u30ed\u30c3\u30af\u3092\u900f\u904e\u8868\u793a\n            tint(255, 200)\n            new Block(this, selection, selector_x * World.BLOCK_SIZE, selector_y * World.BLOCK_SIZE).draw()\n            noTint()\n        }\n    }\n\n    def static void main(args) {\n        PApplet.main('episode013.DisplayTest')\n    }\n}\n\nenum BlockType {\n    STONE('stone.png'), AIR('air.png'), GRASS('grass.png'), DIRT('dirt.png')\n\n    def location\n\n    def BlockType(location) {\n        this.location = location\n    }\n}\n\nclass Block {\n    def type = BlockType.AIR\n    def x, y\n    def img\n    def display\n\n    def Block(display, type, x, y) {\n        this.display = display\n        this.type = type\n        this.x = x\n        this.y = y\n        this.img = display.loadImage(type.location)\n    }\n\n    def draw() {\n        display.image(img, x, y)\n    }\n}\n\nclass BlockGrid {\n    def Block[][] blocks = new Block[World.BLOCKS_WIDTH][World.BLOCKS_HEIGHT];\n    def display\n\n    def BlockGrid(display) {\n        this.display = display\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                blocks[x][y] = new Block(display, BlockType.AIR, x * World.BLOCK_SIZE, y * World.BLOCK_SIZE)\n            }\n        }\n    }\n\n    def load(loadFile) {\n        def list = new JsonSlurper().parse(loadFile.newReader())\n        list.each { block ->\n            blocks[block.x][block.y] = new Block(\n                    display,\n                    BlockType.valueOf(block.type),\n                    block.x * World.BLOCK_SIZE,\n                    block.y * World.BLOCK_SIZE)\n        }\n    }\n\n    def save(saveFile) {\n        def list = []\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                list << [\n                    x: blocks[x][y].x / World.BLOCK_SIZE,\n                    y: blocks[x][y].y / World.BLOCK_SIZE,\n                    type: blocks[x][y].type\n                ]\n            }\n        }\n        saveFile.write(new JsonBuilder(list).toString())\n    }\n\n    def setAt(x , y, type) {\n        blocks[x][y] = new Block(display, type, x * World.BLOCK_SIZE, y * World.BLOCK_SIZE)\n    }\n\n    def getAt(x , y) {\n        blocks[x][y]\n    }\n\n    def draw() {\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                blocks[x][y].draw()\n            }\n        }\n    }\n\n    def clear() {\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                blocks[x][y] = new Block(display, BlockType.AIR, x * World.BLOCK_SIZE, y * World.BLOCK_SIZE)\n                blocks[x][y].draw()\n            }\n        }\n    }\n}\n\nclass World {\n    public static final int BLOCK_SIZE = 32\n    public static final int BLOCKS_WIDTH = 20\n    public static final int BLOCKS_HEIGHT = 15\n}\n\n\n\u9078\u629e\u4e2d\u306e\u30d6\u30ed\u30c3\u30af\u3092\u898b\u3048\u308b\u3088\u3046\u306b\u6539\u9020\u3059\u308b\n\u30de\u30a6\u30b9\u30ab\u30fc\u30bd\u30eb\u306e\u91cd\u306a\u3063\u3066\u3044\u308b\u30d6\u30ed\u30c3\u30af\u4e0a\u306b\u9078\u629e\u4e2d\u306e\u30d6\u30ed\u30c3\u30af\u3092\u900f\u904e\u3057\u3066\u8868\u793a\u3059\u308b\n\u3042\u3068\u4e0a\u4e0b\u5de6\u53f3\u30ad\u30fc\u3067\u900f\u904e\u30d6\u30ed\u30c3\u30af\u304c\u79fb\u52d5\u3059\u308b\n\n\u52d5\u753b\u30ea\u30b9\u30c8\uff1a[LWJGL\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](http://www.youtube.com/playlist?list=PL19F2453814E0E315)\n\u52d5\u753b\u306f[\u30b3\u30b3](http://www.youtube.com/watch?v=rSPnmFJyzqs)\n\n```groovy\npackage episode013\n\nimport groovy.json.JsonBuilder\nimport groovy.json.JsonSlurper\nimport processing.core.PApplet\nimport processing.event.Event\n\nclass DisplayTest extends PApplet {\n\n    def grid\n    def selection = BlockType.STONE\n    def selector_x = 0\n    def selector_y = 0\n    def mouseEnabled = true\n\n    def void setup() {\n        size(640, 480)\n        frameRate(60)\n\n        grid = new BlockGrid(this)\n    }\n\n    def void draw() {\n        background(0, 0, 0)\n\n        if (mouseEnabled) setSelectorPoint()\n\n        grid.draw()\n        drawSelectionBox()\n    }\n\n    def void keyPressed() {\n        switch (key) {\n            case 's':\n                grid.save(new File('save.json'))\n                break\n            case 'l':\n                grid.load(new File('save.json'))\n                break\n            case '1':\n                selection = BlockType.STONE\n                break\n            case '2':\n                selection = BlockType.DIRT\n                break\n            case '3':\n                selection = BlockType.GRASS\n                break\n            case '4':\n                selection = BlockType.AIR\n                break\n            case 'c':\n                grid.clear()\n                break\n        }\n        switch (keyCode) {\n            case RIGHT:\n                mouseEnabled = false\n                if (!(selector_x + 1 > World.BLOCKS_WIDTH - 1)) {\n                    selector_x += 1;\n                }\n                break\n            case LEFT:\n                mouseEnabled = false\n                if (!(selector_x - 1 < 0)) {\n                    selector_x -= 1;\n                }\n                break\n            case UP:\n                mouseEnabled = false\n                if (!(selector_y - 1 < 0)) {\n                    selector_y -= 1;\n                }\n                break\n            case DOWN:\n                mouseEnabled = false\n                if (!(selector_y + 1 > World.BLOCKS_HEIGHT - 1)) {\n                    selector_y += 1;\n                }\n                break\n        }\n    }\n\n    def void mouseClicked() {\n        mouseEnabled = true\n        setSelectorPoint()\n        setBlock()\n    }\n\n    def void mouseDragged() {\n        mouseEnabled = true\n        setSelectorPoint()\n        setBlock()\n    }\n\n    def setBlock() {\n        if (selector_x >= 0 && selector_x < World.BLOCKS_WIDTH\n                && selector_y >= 0 && selector_y < World.BLOCKS_HEIGHT) {\n            grid.setAt(selector_x, selector_y, selection)\n        }\n    }\n\n    def setSelectorPoint() {\n        selector_x = floor(mouseX / World.BLOCK_SIZE)\n        selector_y = floor(mouseY / World.BLOCK_SIZE)\n    }\n\n    def drawSelectionBox() {\n        if (grid.getAt(selector_x, selector_y).type != BlockType.AIR || selection == BlockType.AIR) {\n            // \u767d\u3044\u900f\u904e\u30d6\u30ed\u30c3\u30af\u3092\u8868\u793a\n            noStroke()\n            fill(255, 255, 255, 150)\n            rect(selector_x * World.BLOCK_SIZE, selector_y * World.BLOCK_SIZE, World.BLOCK_SIZE, World.BLOCK_SIZE)\n        } else {\n            // \u9078\u629e\u3057\u3066\u3044\u308b\u30d6\u30ed\u30c3\u30af\u3092\u900f\u904e\u8868\u793a\n            tint(255, 200)\n            new Block(this, selection, selector_x * World.BLOCK_SIZE, selector_y * World.BLOCK_SIZE).draw()\n            noTint()\n        }\n    }\n\n    def static void main(args) {\n        PApplet.main('episode013.DisplayTest')\n    }\n}\n\nenum BlockType {\n    STONE('stone.png'), AIR('air.png'), GRASS('grass.png'), DIRT('dirt.png')\n\n    def location\n\n    def BlockType(location) {\n        this.location = location\n    }\n}\n\nclass Block {\n    def type = BlockType.AIR\n    def x, y\n    def img\n    def display\n\n    def Block(display, type, x, y) {\n        this.display = display\n        this.type = type\n        this.x = x\n        this.y = y\n        this.img = display.loadImage(type.location)\n    }\n\n    def draw() {\n        display.image(img, x, y)\n    }\n}\n\nclass BlockGrid {\n    def Block[][] blocks = new Block[World.BLOCKS_WIDTH][World.BLOCKS_HEIGHT];\n    def display\n\n    def BlockGrid(display) {\n        this.display = display\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                blocks[x][y] = new Block(display, BlockType.AIR, x * World.BLOCK_SIZE, y * World.BLOCK_SIZE)\n            }\n        }\n    }\n\n    def load(loadFile) {\n        def list = new JsonSlurper().parse(loadFile.newReader())\n        list.each { block ->\n            blocks[block.x][block.y] = new Block(\n                    display,\n                    BlockType.valueOf(block.type),\n                    block.x * World.BLOCK_SIZE,\n                    block.y * World.BLOCK_SIZE)\n        }\n    }\n\n    def save(saveFile) {\n        def list = []\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                list << [\n                    x: blocks[x][y].x / World.BLOCK_SIZE,\n                    y: blocks[x][y].y / World.BLOCK_SIZE,\n                    type: blocks[x][y].type\n                ]\n            }\n        }\n        saveFile.write(new JsonBuilder(list).toString())\n    }\n\n    def setAt(x , y, type) {\n        blocks[x][y] = new Block(display, type, x * World.BLOCK_SIZE, y * World.BLOCK_SIZE)\n    }\n\n    def getAt(x , y) {\n        blocks[x][y]\n    }\n\n    def draw() {\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                blocks[x][y].draw()\n            }\n        }\n    }\n\n    def clear() {\n        World.BLOCKS_WIDTH.times { x ->\n            World.BLOCKS_HEIGHT.times { y ->\n                blocks[x][y] = new Block(display, BlockType.AIR, x * World.BLOCK_SIZE, y * World.BLOCK_SIZE)\n                blocks[x][y].draw()\n            }\n        }\n    }\n}\n\nclass World {\n    public static final int BLOCK_SIZE = 32\n    public static final int BLOCKS_WIDTH = 20\n    public static final int BLOCKS_HEIGHT = 15\n}\n```\n![grocessingGL013.png](https://qiita-image-store.s3.amazonaws.com/0/17179/7fb41f63-a0c5-43c6-5039-3f1d4a234dff.png)\n\n", "tags": ["Groovy2.1.7", "processing2.1"]}