{"context": "\n\n\u76ee\u7684\n\u4f55\u304c\u3057\u305f\u3044\u304b\u3068\u3044\u3046\u3068\uff0c\u753b\u50cf\u51e6\u7406\u306b\u304a\u3044\u3066\u7d30\u7dda\u5316\uff08Thinning, Skeletonization\uff09\u306f\uff12\u5024\u753b\u50cf\u306b\u5909\u63db\u3055\u308c\u305f\u753b\u50cf\u3092\uff0c\u305d\u306e\u4e2d\u5fc3\u3092\u901a\u308b\uff11\u30d4\u30af\u30bb\u30eb\u5e45\u306e\u7dda\u753b\u50cf\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3067\u3059\u304c\uff0c\u305d\u3053\u304b\u3089\u3055\u3089\u306b\u5404\u7d42\u70b9\u304a\u3088\u3073\u5206\u5c90\u70b9\u3092\u7aef\u70b9\u3068\u3057\u305f\u8907\u6570\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u306b\u5206\u5272\u3059\u308b\u3068\u3044\u3046\u8a71\u3067\u3059\uff0e\n\u8981\u3059\u308b\u306b\n\n\u3053\u3046\u3044\u3046\u753b\u50cf\u3092...\n     \n\u3053\u3046\u3044\u3046\u611f\u3058\u3067\u500b\u3005\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u306b\u5206\u5272\u3057\u3066\uff0c\u305d\u308c\u305e\u308c\u3092\u70b9\u914d\u5217\u3067\u53d6\u5f97\u3057\u305f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u3059\uff0e\n\u610f\u5916\u3068\u624b\u3053\u305a\u3063\u305f\u4e0a\u306b\u6050\u3089\u304f\u81ea\u5206\u4ee5\u5916\u306b\u9700\u8981\u304c\u7121\u3055\u305d\u3046\u306a\u306e\u3067\u6562\u3048\u3066\u30b7\u30a7\u30a2\u3057\u305f\u3044\u885d\u52d5\u306b\u99c6\u3089\u308c\u305f\u6b21\u7b2c\u3067\u3059\u304c\uff0c\u3082\u3063\u3068\u30bb\u30fc\u30d5\u30c6\u30a3\u3067\u52b9\u7387\u306e\u3044\u3044\u65b9\u6cd5\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u4e0b\u3055\u3044\uff0e\n\n\u6761\u4ef6\n\n\u30bb\u30b0\u30e1\u30f3\u30c8\uff1d\uff12\u3064\u306e\u7aef\u70b9\u304b\u3089\u306a\u308b\uff11\u672c\u306e\u7dda\u3068\u3059\u308b\n\u5165\u529b\u753b\u50cf\u306f\uff11\u30d4\u30af\u30bb\u30eb\u5e45\u306e\u7dda\u753b\u50cf\u3068\u3057\uff0c\u5404\u30d4\u30af\u30bb\u30eb\u306e\u968e\u8abf\u306f\u80cc\u666f\u30920\uff0c\u524d\u666f\u3092255\uff080\u4ee5\u4e0a\uff09\u3068\u3059\u308b\n\u51fa\u529b\u30c7\u30fc\u30bf\u306f j \u500b\u306e\u70b9\u914d\u5217 p \u3092\uff11\u3064\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u3068\u3059\u308b\uff12\u91cd\u914d\u5217 P \u3068\u3059\u308b\n\nP_{i, j} = (p_0, p_1, ... p_{j-1} ) \\\\\np_j = (x, y)\nPi,j=(p0,p1,...pj\u22121)pj=(x,y){P_{i, j} = (p_0, p_1, ... p_{j-1} ) \\\\\np_j = (x, y)\n}\n\n\u30bb\u30b0\u30e1\u30f3\u30c8\u306f\u7dda\u753b\u50cf\u306e\u5206\u5c90\u70b9\u304a\u3088\u3073\u7d42\u70b9\u3092\u4e21\u7aef\u3068\u3059\u308b\n\u63a5\u5408\u70b9\u3068\u306a\u308b\u30d4\u30af\u30bb\u30eb\u306f\u305d\u3053\u304b\u3089\u5f97\u3089\u308c\u308b\u5168\u3066\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u7aef\u70b9\u3068\u3057\u3066\u305d\u308c\u3089\u306b\u542b\u3081\u308b\n\u7dda\u304c\u30eb\u30fc\u30d7\u72b6\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u308c\u3092\uff11\u3064\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u3068\u3059\u308b\uff0c\u305f\u3060\u3057\uff0c\u30eb\u30fc\u30d7\u4e0a\u306e\u7dda\u4e0a\u306b\uff12\u3064\u4ee5\u4e0a\u306e\u5206\u5c90\u70b9\u304c\u3042\u308b\u5834\u5408\u306f\u305d\u308c\u3089\u306e\u5206\u5c90\u70b9\u3092\u7aef\u70b9\u3068\u3059\u308b\u30bb\u30b0\u30e1\u30f3\u30c8\u3068\u3057\u3066\u500b\u5225\u306b\u53d6\u5f97\u3059\u308b\n\u5165\u529b\u753b\u50cf\u306e\u7dda\u306e\u9023\u7d50\u30d1\u30bf\u30fc\u30f3\u306f\uff14\u8fd1\u508d\u304a\u3088\u3073\uff18\u8fd1\u508d\u306e\u4e21\u65b9\u306b\u5bfe\u5fdc\u3059\u308b\n\u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u53d6\u5f97\u9806\u5e8f\u3084\uff0c\u53d6\u5f97\u3055\u308c\u305f\u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u7aef\u70b9\u304c\u7d42\u70b9\u3067\u3042\u308b\u304b\u5206\u5c90\u70b9\u3067\u3042\u308b\u304b\u307e\u3067\u306f\u8003\u3048\u306a\u304f\u3066\u826f\u3044\uff08\u3068\u308a\u3042\u3048\u305a\uff09\n\n\n\u8003\u3048\u65b9\n\u3044\u308d\u3044\u308d\u60a9\u3093\u3060\u672b\u306b\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u307e\u3068\u307e\u308a\u307e\u3057\u305f\uff0e\n\n\u5de6\u4e0a\u304b\u3089\uff11\u753b\u7d20\u305a\u3064\u8d70\u67fb\u3057\uff0c\u53d6\u5f97\u6e08\u307f\u3067\u306a\u30440\u4ee5\u4e0a\u306e\u753b\u7d20\u5024\u306e\u3082\u306e\uff08\u6709\u52b9\u753b\u7d20\uff09\u304c\u3042\u308c\u30702\u306e\u51e6\u7406\u3078\uff0c\u7121\u3051\u308c\u3070\u51e6\u7406\u3092\u7d42\u4e86\u3059\u308b\uff0e\n\u6700\u521d\u306e\u7aef\u70b9\u3092\u63a2\u3059\uff0c\u3059\u306a\u308f\u3061\u8fd1\u508d\u306e\u6709\u52b9\u753b\u7d20\u3092\u4f1d\u308f\u3063\u3066\u884c\u304d\uff0c\u7d42\u70b9\u304b\u5206\u5c90\u70b9\u306b\u5230\u9054\u3057\u305f\u6642\u70b9\u30673\u3078\u9032\u3080\uff0e\n\u7aef\u70b9\u306e\u8fd1\u508d\u306b\u3042\u308b\u6709\u52b9\u753b\u7d20\u3092\u5168\u3066\u53d6\u5f97\u3057\uff0c\u305d\u308c\u3089\u306e\u65b9\u5411\u3068\u5ea7\u6a19\u3092\u958b\u59cb\u70b9\u30b9\u30bf\u30c3\u30af\u306b\u8caf\u3081\u308b\uff0e\n\u958b\u59cb\u70b9\u30b9\u30bf\u30c3\u30af\u304b\u3089\uff11\u3064\u53d6\u308a\u51fa\u3057\uff0c\u4fdd\u6301\u3057\u3066\u3044\u305f\u5ea7\u6a19\u3068\u65b9\u5411\u3092\u5143\u306b\u8fd1\u508d\u306e\u6709\u52b9\u753b\u7d20\u3092\u4f1d\u308f\u3063\u3066\u3044\u304f\uff0c\u305d\u306e\u969b\u306b\u901a\u3063\u305f\u70b9\u306f\u51fa\u529b\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4fdd\u6301\u3057\u3066\u304a\u304f\uff0e\n\u7d42\u70b9\u3078\u305f\u3069\u308a\u7740\u3044\u305f\u3089\u5834\u5408\u306f\u901a\u3063\u3066\u304d\u305f\u70b9\u3092\uff11\u3064\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u3068\u3057\u3066\u51fa\u529b\u30c7\u30fc\u30bf\u306b\u4fdd\u6301\u3059\u308b\uff0c\u5206\u5c90\u70b9\u306b\u305f\u3069\u308a\u7740\u3044\u305f\u5834\u5408\u306f\u30bb\u30b0\u30e1\u30f3\u30c8\u53d6\u5f97\u3068\u540c\u6642\u306b\uff0c\u307e\u3060\u635c\u67fb\u3057\u3066\u306a\u3044\u8fd1\u508d\u306e\u6709\u52b9\u753b\u7d20\u3092\u958b\u59cb\u70b9\u30b9\u30bf\u30c3\u30af\u306b\u8caf\u3081\u308b\n\u958b\u59cb\u70b9\u30b9\u30bf\u30c3\u30af\u304c\u7121\u304f\u306a\u308b\u307e\u3067\uff14\u301c\uff15\u306e\u51e6\u7406\u3092\u7d9a\u3051\uff0c\u7121\u304f\u306a\u3063\u305f\u3089\uff17\u3078\n\u30bb\u30b0\u30e1\u30f3\u30c8\u3068\u3057\u3066\u53d6\u5f97\u3057\u305f\u70b9\u306f\u3059\u3079\u3066\u300c\u53d6\u5f97\u6e08\u307f\u300d\u3068\u3057\uff0c\u6700\u521d\u306e\u70b9\u306b\u623b\u3063\u3066\u518d\u3073\uff11\u306e\u51e6\u7406\u3078\n\n\n\u753b\u50cf\u306e\u7d30\u7dda\u5316\u51e6\u7406\n\u753b\u50cf\u306e\u7d30\u7dda\u5316\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u3053\u306e\u524dHilditch\u306e\u65b9\u6cd5\u3092\u66f8\u3044\u305f\u306e\u3067\uff0c\u4eca\u56de\u306f\u305d\u306e\u8a08\u7b97\u7d50\u679c\u306e\u753b\u50cf\u3092\u4f7f\u3044\u307e\u3059\uff0e\n\n\u5b9f\u88c5\n\n#include <iostream>\n#include <vector>\n#include <array>\n\n/// Output data type\ntypedef std::vector<std::array<int, 2> > Point2dArray;\n\n/**\n *  @brief return point from index\n *\n *  @param i     Pixel index\n *  @param width Image width\n *\n *  @return Point (x, y)\n */\nstatic std::array<int, 2> i2p(int i, int width)\n{\n    int x = i % width;\n    int y = i / width;\n    return {x, y};\n}\n\n\n/**\n *  @brief Divide branched chain.\n *\n *  @param pix            Input image pixels (unsigned char, single channel)\n *  @param width          Input image width\n *  @param height         Input image height\n *  @param dstPts         Output points array (vector<Point2dArray>)\n *  @param bNeighborType4 Input image type, true=4-neighbor, false=8-neighbor.\n *\n *  @return true=Process was succeed\n */\nbool divideBranchedChain(const unsigned char* pix, const int width, const int height, std::vector<Point2dArray> *dstPts, bool bNeighborType4)\n{\n    std::vector<std::vector<std::array<int, 2> > > dstBuf;\n\n    // offset: [x, y, direction], direction=0...7, 0=right, 1=upper right, ...7=lower right.\n    std::vector<std::array<int, 3> > offset = {{1,0,0}, {1,-1,1}, {0,-1,2}, {-1,-1,3}, {-1,0,4}, {-1,1,5}, {0,1,6}, {1,1,7}};\n\n    // segment: [current focused pixel index, neighbor pixel index, neighbor pixel direction]\n    std::vector<std::array<int, 3> > neighbors;\n    std::vector<std::array<int, 3> > nextSearchPixels;\n\n    std::unique_ptr<char[]> tPix(new char[width * height]); // searched pix\n    for (int i = 0; i < width * height; ++i) tPix[i] = 0;\n\n    /// (function) find neighbor pixels, and update neighbors.\n    auto findNeighbor = [&](int focusIdx, int ignoreIdx, int startDir)\n    {\n        neighbors.clear();\n        for (int i = 0; i < offset.size(); ++i)\n        {\n            int ti = (i + startDir) % 8;\n            if (bNeighborType4 && ti % 2 != 0) continue;\n\n            int x = offset[ti][0] + (focusIdx % width);\n            int y = offset[ti][1] + (focusIdx / width);\n            int testIdx = y * width + x;\n\n            // tests:\n            if (testIdx != ignoreIdx                            && // is not ignore?\n                (x >= 0 && x < width && y >= 0 && y < height)   && // is not outside?\n                tPix[testIdx] == 0                              && // is not already searched pixel?\n                pix[testIdx] > 0) // is white pixel\n            {\n                neighbors.push_back( {focusIdx, testIdx, offset[ti][2]} );\n            }\n        }\n    };\n\n    /// (function) get direction\n    auto getDirection = [&offset, &width](int focusIdx, int targetIdx)\n    {\n        for (const auto& e : offset)\n        {\n            int x = e[0] + (focusIdx % width);\n            int y = e[1] + (focusIdx / width);\n            int testIdx = y * width + x;\n            if (testIdx == targetIdx)\n                return e[2];\n        }\n        throw \"can't found direction.\"; // error\n    };\n\n    // scan\n    for (int i = 0; i < width * height; ++i)\n    {\n        if (pix[i] > 0 && tPix[i] == 0)\n        {\n            int firstIdx = i;\n            int focusIdx = firstIdx;\n            int lastFocus = -1;\n            int beginDir = 0;\n            bool bFirst = true;\n            int count = 0;\n\n            try {\n                // find begin point(s) on a segment\n                while (count < width * height)\n                {\n                    findNeighbor(focusIdx, lastFocus, beginDir);\n\n                    // tests\n                    if (neighbors.empty())\n                    {\n                        if (bFirst)\n                        {\n                            // single pixel\n                            dstBuf.push_back(Point2dArray(1, i2p(focusIdx, width)));\n                            tPix[focusIdx] = 1;\n                            break;\n                        }\n                        // end point\n                        nextSearchPixels.push_back({focusIdx, lastFocus, getDirection(focusIdx, lastFocus)});\n                        break;\n                    }\n                    else {\n                        if (bFirst)\n                        {\n                            if (neighbors.size() == 1)\n                            {\n                                // first pixel is end point\n                                nextSearchPixels.swap(neighbors);\n                                break;\n                            }\n                        }\n                        else {\n                            if (neighbors.size() >= 2 || focusIdx == firstIdx)\n                            {\n                                // branched point, or repeated point\n                                neighbors.push_back({focusIdx, lastFocus, getDirection(focusIdx, lastFocus)});\n                                nextSearchPixels.swap(neighbors);\n                                break;\n                            }\n                        }\n                    }\n\n                    // continue\n                    lastFocus = focusIdx;\n                    focusIdx = neighbors[0][1];\n                    beginDir = neighbors[0][2];\n                    bFirst = false;\n                    ++count;\n                }\n                if (count == width * height - 1)\n                {\n                    throw \"endless loop exception\";\n                }\n\n                // pick up points on the chains.\n                while (nextSearchPixels.empty() == false)\n                {\n                    bFirst = true;\n                    lastFocus = -1;\n                    auto it = nextSearchPixels.begin();\n                    firstIdx = (*it)[0];\n                    focusIdx = firstIdx;\n                    beginDir = (*it)[2];\n                    nextSearchPixels.erase(it);\n                    count = 0;\n                    Point2dArray chainPts;\n\n                    do {\n                        findNeighbor(focusIdx, lastFocus, beginDir);\n\n                        // tests\n                        if (neighbors.empty() || (bFirst == false && focusIdx == firstIdx))\n                        {\n                            break;\n                        }\n                        else if (bFirst == false && neighbors.size() >= 2)\n                        {\n                            std::copy(begin(neighbors), end(neighbors), back_inserter(nextSearchPixels));\n                            break;\n                        }\n\n                        // continue\n\n                        if (bFirst)\n                        {\n                            chainPts.push_back(i2p(focusIdx, width));\n                            tPix[focusIdx] = 1;\n                        }\n\n                        lastFocus = focusIdx;\n                        focusIdx = neighbors[0][1];\n                        beginDir = neighbors[0][2];\n                        bFirst = false;\n\n                        chainPts.push_back(i2p(focusIdx, width));\n                        tPix[focusIdx] = 1;\n                    }\n                    while (count < width * height);\n                    if (count == width * height - 1)\n                    {\n                        throw \"endless loop exception\";\n                    }\n\n                    if (chainPts.empty() == false) dstBuf.push_back(chainPts);\n                }\n            }\n            catch (const char* e)\n            {\n                std::cout << \"[exception] \" << e << std::endl;\n                return false;\n            }\n        }\n    }\n\n    dstPts->swap(dstBuf);\n    return true;\n}\n\nfor\u6587\u306e\u4e2d\u306bwhile(true)\u304c\uff12\u3064\u3082\u767b\u5834\u3059\u308b\u3068\u3044\u3046\u30cf\u30e9\u30cf\u30e9\u30c9\u30ad\u30c9\u30ad\u306a\u30b3\u30fc\u30c9\u3067\u3059\u306d\u2192\u30eb\u30fc\u30d7\u56de\u6570\u4e0a\u9650\u3092\u4ed8\u3051\u3066\u3061\u3087\u3063\u3068\u3060\u3051\u30bb\u30fc\u30d5\u30c6\u30a3\u306b\u3057\u307e\u3057\u305f\uff0e\u5165\u529b\u753b\u50cf\u306f\u3042\u307e\u308a\u591a\u304f\u306e\u30d1\u30bf\u30fc\u30f3\u8a66\u3057\u3066\u306a\u3044\u3067\u3059\u304c\uff0c\u7121\u9650\u30eb\u30fc\u30d7\u306b\u9665\u308b\u53ef\u80fd\u6027\u304c\u7121\u3044\u3068\u306f\u3044\u3048\u306a\u3044\u306e\u3067\u3044\u3064\u304b\u3082\u3063\u3068\u6574\u7406\u3057\u305f\u3044\u3067\u3059\uff0e\n\n\u88dc\u8db3\n\u95a2\u6570 divideBranchedChain \u306f\u7b2c\uff11\u5f15\u6570\u306b\u5165\u529b\u753b\u50cf\u306e\u30dd\u30a4\u30f3\u30bf\uff08unsigned char*, \u30b7\u30f3\u30b0\u30eb\u30c1\u30e3\u30f3\u30cd\u30eb\uff09\uff0c\u7b2c\uff12\uff0c\uff13\u5f15\u6570\u306b\u305d\u306e\u6a2a\u5e45\u3068\u9ad8\u3055\uff0c\u7b2c\uff14\u5f15\u6570\uff08\u51fa\u529b\uff09\u306b\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u30dd\u30a4\u30f3\u30bf\uff0c\u7b2c\uff15\u5f15\u6570\u306ftrue\u3060\u3068\u5165\u529b\u306e\u7dda\u753b\u50cf\u3092\uff14\u8fd1\u508d\u9023\u7d50\uff0cfalse\u3060\u30688\u8fd1\u508d\u9023\u7d50\u3068\u3057\u3066\u51e6\u7406\u3057\u307e\u3059\uff0e\n\u305f\u3076\u3093C++14\u3058\u3083\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\u304b\u3082\u3067\u3059\uff0e\n\u3068\u3053\u308d\u3067vector<array<T, N> >\u3063\u3066\u3044\u3046\u306e\u4fbf\u5229\u3067\u3059\u306d\uff0e\u51fa\u529b\u30c7\u30fc\u30bf\u306fint\u578b\u306e\uff12\u6b21\u5143\u5ea7\u6a19\uff08x, y\uff09\u306a\u306e\u3067\uff0c\u672c\u6765\u306a\u3089int\u5909\u6570\u3092\uff12\u500b\u3082\u3064\u69cb\u9020\u4f53\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u3079\u304d\u3060\u3068\u601d\u3044\u307e\u3059\u304c\uff0c\u305d\u3053\u306f\u6a2a\u7740\u3057\u3066std::array<int, 2>\u3092vector\u914d\u5217\u306b\u6301\u305f\u305b\u305f\u308a\u3057\u3066\u307e\u3059\uff0e\u3053\u306evector<array<T, N> > \u3063\u3066\u3044\u3046\u306e\u6700\u8fd1\u3088\u304f\u4f7f\u3063\u3066\u307e\u3059\uff0e\n\u3042\u3068\uff0c\u3068\u304f\u306b\u610f\u5473\u3082\u306a\u304f\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u3092\u30e9\u30e0\u30c0\u5f0f\u3067\u66f8\u3044\u3066\u305f\u308a\u3057\u307e\u3059\u304c\u5225\u306e\u95a2\u6570\u3068\u3057\u3066\u5916\u306b\u51fa\u3057\u3066\u3082\u5927\u4e08\u592b\u306a\u306f\u305a\u3067\u3059\uff0e\n\n\u8a08\u7b97\u7d50\u679c\n\u5165\u529b\u753b\u50cf\n\n\u7d30\u7dda\u5316\uff08Hilditch\u306e\u65b9\u6cd5\uff09\n\n\u30bb\u30b0\u30e1\u30f3\u30c8\u5206\u5272\n\n\u5404\u30bb\u30b0\u30e1\u30f3\u30c8\u6bce\u306b\u8272\u3092\u300c\u8d64\u2192\u9752\u2192\u7dd1\u2192\u8d64\u2192\u9752...\u300d\u3068\u5206\u3051\u3066\u3044\u307e\u3059\uff0e\n\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u591a\u5206\u3082\u3063\u3068\u3088\u304f\u898b\u3048\u307e\u3059\uff0e\n\u4e00\u5fdc\u30eb\u30fc\u30d7\u72b6\u306e\u7dda\u3084\uff0c\uff11\u30d4\u30af\u30bb\u30eb\u3057\u304b\u306a\u3044\u30bb\u30b0\u30e1\u30f3\u30c8\u3082\u3061\u3083\u3093\u3068\u53d6\u308c\u3066\u3044\u307e\u3059\uff0e\n#\u76ee\u7684\n\n\u4f55\u304c\u3057\u305f\u3044\u304b\u3068\u3044\u3046\u3068\uff0c\u753b\u50cf\u51e6\u7406\u306b\u304a\u3044\u3066\u7d30\u7dda\u5316\uff08Thinning, Skeletonization\uff09\u306f\uff12\u5024\u753b\u50cf\u306b\u5909\u63db\u3055\u308c\u305f\u753b\u50cf\u3092\uff0c\u305d\u306e\u4e2d\u5fc3\u3092\u901a\u308b\uff11\u30d4\u30af\u30bb\u30eb\u5e45\u306e\u7dda\u753b\u50cf\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3067\u3059\u304c\uff0c\u305d\u3053\u304b\u3089\u3055\u3089\u306b\u5404\u7d42\u70b9\u304a\u3088\u3073\u5206\u5c90\u70b9\u3092\u7aef\u70b9\u3068\u3057\u305f\u8907\u6570\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u306b\u5206\u5272\u3059\u308b\u3068\u3044\u3046\u8a71\u3067\u3059\uff0e\n\n\u8981\u3059\u308b\u306b\n\n![bouningen.png](https://qiita-image-store.s3.amazonaws.com/0/29877/dc39807e-a955-81d5-53e1-69b488ef7bc2.png)\n\n\u3053\u3046\u3044\u3046\u753b\u50cf\u3092...\n\n![bouningen_0000_\u30ec\u30a4\u30e4\u30fc-6.png](https://qiita-image-store.s3.amazonaws.com/0/29877/6ac020ca-d117-e469-7fcd-275928f4dbea.png) ![bouningen_0001_\u30ec\u30a4\u30e4\u30fc-5.png](https://qiita-image-store.s3.amazonaws.com/0/29877/a0f044f2-d1f9-d410-c886-c01c85799339.png) ![bouningen_0002_\u30ec\u30a4\u30e4\u30fc-4.png](https://qiita-image-store.s3.amazonaws.com/0/29877/6197139c-6fd3-c541-ef7c-3c4860f81124.png) ![bouningen_0003_\u30ec\u30a4\u30e4\u30fc-3.png](https://qiita-image-store.s3.amazonaws.com/0/29877/11c34de1-8a80-5b18-d7fa-2faa03aaea31.png) ![bouningen_0004_\u30ec\u30a4\u30e4\u30fc-2.png](https://qiita-image-store.s3.amazonaws.com/0/29877/8d120c4f-7637-1aec-5721-084f0b2ab183.png) ![bouningen_0005_\u30ec\u30a4\u30e4\u30fc-1.png](https://qiita-image-store.s3.amazonaws.com/0/29877/9534bde1-e377-5ff5-f706-f84afc4e9f3e.png)\n\n\u3053\u3046\u3044\u3046\u611f\u3058\u3067\u500b\u3005\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u306b\u5206\u5272\u3057\u3066\uff0c\u305d\u308c\u305e\u308c\u3092\u70b9\u914d\u5217\u3067\u53d6\u5f97\u3057\u305f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u3059\uff0e\n\n\u610f\u5916\u3068\u624b\u3053\u305a\u3063\u305f\u4e0a\u306b\u6050\u3089\u304f\u81ea\u5206\u4ee5\u5916\u306b\u9700\u8981\u304c\u7121\u3055\u305d\u3046\u306a\u306e\u3067\u6562\u3048\u3066\u30b7\u30a7\u30a2\u3057\u305f\u3044\u885d\u52d5\u306b\u99c6\u3089\u308c\u305f\u6b21\u7b2c\u3067\u3059\u304c\uff0c\u3082\u3063\u3068\u30bb\u30fc\u30d5\u30c6\u30a3\u3067\u52b9\u7387\u306e\u3044\u3044\u65b9\u6cd5\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u4e0b\u3055\u3044\uff0e\n\n\n#\u6761\u4ef6\n\n- \u30bb\u30b0\u30e1\u30f3\u30c8\uff1d\uff12\u3064\u306e\u7aef\u70b9\u304b\u3089\u306a\u308b\uff11\u672c\u306e\u7dda\u3068\u3059\u308b\n- \u5165\u529b\u753b\u50cf\u306f\uff11\u30d4\u30af\u30bb\u30eb\u5e45\u306e\u7dda\u753b\u50cf\u3068\u3057\uff0c\u5404\u30d4\u30af\u30bb\u30eb\u306e\u968e\u8abf\u306f\u80cc\u666f\u30920\uff0c\u524d\u666f\u3092255\uff080\u4ee5\u4e0a\uff09\u3068\u3059\u308b\n- \u51fa\u529b\u30c7\u30fc\u30bf\u306f _j_ \u500b\u306e\u70b9\u914d\u5217 _p_ \u3092\uff11\u3064\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u3068\u3059\u308b\uff12\u91cd\u914d\u5217 _P_ \u3068\u3059\u308b\n\n```math\nP_{i, j} = (p_0, p_1, ... p_{j-1} ) \\\\\np_j = (x, y)\n```\n\n- \u30bb\u30b0\u30e1\u30f3\u30c8\u306f\u7dda\u753b\u50cf\u306e\u5206\u5c90\u70b9\u304a\u3088\u3073\u7d42\u70b9\u3092\u4e21\u7aef\u3068\u3059\u308b\n- \u63a5\u5408\u70b9\u3068\u306a\u308b\u30d4\u30af\u30bb\u30eb\u306f\u305d\u3053\u304b\u3089\u5f97\u3089\u308c\u308b\u5168\u3066\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u7aef\u70b9\u3068\u3057\u3066\u305d\u308c\u3089\u306b\u542b\u3081\u308b\n- \u7dda\u304c\u30eb\u30fc\u30d7\u72b6\u306b\u306a\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u305d\u308c\u3092\uff11\u3064\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u3068\u3059\u308b\uff0c\u305f\u3060\u3057\uff0c\u30eb\u30fc\u30d7\u4e0a\u306e\u7dda\u4e0a\u306b\uff12\u3064\u4ee5\u4e0a\u306e\u5206\u5c90\u70b9\u304c\u3042\u308b\u5834\u5408\u306f\u305d\u308c\u3089\u306e\u5206\u5c90\u70b9\u3092\u7aef\u70b9\u3068\u3059\u308b\u30bb\u30b0\u30e1\u30f3\u30c8\u3068\u3057\u3066\u500b\u5225\u306b\u53d6\u5f97\u3059\u308b\n- \u5165\u529b\u753b\u50cf\u306e\u7dda\u306e\u9023\u7d50\u30d1\u30bf\u30fc\u30f3\u306f\uff14\u8fd1\u508d\u304a\u3088\u3073\uff18\u8fd1\u508d\u306e\u4e21\u65b9\u306b\u5bfe\u5fdc\u3059\u308b\n- \u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u53d6\u5f97\u9806\u5e8f\u3084\uff0c\u53d6\u5f97\u3055\u308c\u305f\u30bb\u30b0\u30e1\u30f3\u30c8\u306e\u7aef\u70b9\u304c\u7d42\u70b9\u3067\u3042\u308b\u304b\u5206\u5c90\u70b9\u3067\u3042\u308b\u304b\u307e\u3067\u306f\u8003\u3048\u306a\u304f\u3066\u826f\u3044\uff08\u3068\u308a\u3042\u3048\u305a\uff09\n\n\n#\u8003\u3048\u65b9\n\n\u3044\u308d\u3044\u308d\u60a9\u3093\u3060\u672b\u306b\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u307e\u3068\u307e\u308a\u307e\u3057\u305f\uff0e\n\n1. \u5de6\u4e0a\u304b\u3089\uff11\u753b\u7d20\u305a\u3064\u8d70\u67fb\u3057\uff0c\u53d6\u5f97\u6e08\u307f\u3067\u306a\u30440\u4ee5\u4e0a\u306e\u753b\u7d20\u5024\u306e\u3082\u306e\uff08\u6709\u52b9\u753b\u7d20\uff09\u304c\u3042\u308c\u30702\u306e\u51e6\u7406\u3078\uff0c\u7121\u3051\u308c\u3070\u51e6\u7406\u3092\u7d42\u4e86\u3059\u308b\uff0e\n2. \u6700\u521d\u306e\u7aef\u70b9\u3092\u63a2\u3059\uff0c\u3059\u306a\u308f\u3061\u8fd1\u508d\u306e\u6709\u52b9\u753b\u7d20\u3092\u4f1d\u308f\u3063\u3066\u884c\u304d\uff0c\u7d42\u70b9\u304b\u5206\u5c90\u70b9\u306b\u5230\u9054\u3057\u305f\u6642\u70b9\u30673\u3078\u9032\u3080\uff0e\n3. \u7aef\u70b9\u306e\u8fd1\u508d\u306b\u3042\u308b\u6709\u52b9\u753b\u7d20\u3092\u5168\u3066\u53d6\u5f97\u3057\uff0c\u305d\u308c\u3089\u306e\u65b9\u5411\u3068\u5ea7\u6a19\u3092\u958b\u59cb\u70b9\u30b9\u30bf\u30c3\u30af\u306b\u8caf\u3081\u308b\uff0e\n4. \u958b\u59cb\u70b9\u30b9\u30bf\u30c3\u30af\u304b\u3089\uff11\u3064\u53d6\u308a\u51fa\u3057\uff0c\u4fdd\u6301\u3057\u3066\u3044\u305f\u5ea7\u6a19\u3068\u65b9\u5411\u3092\u5143\u306b\u8fd1\u508d\u306e\u6709\u52b9\u753b\u7d20\u3092\u4f1d\u308f\u3063\u3066\u3044\u304f\uff0c\u305d\u306e\u969b\u306b\u901a\u3063\u305f\u70b9\u306f\u51fa\u529b\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4fdd\u6301\u3057\u3066\u304a\u304f\uff0e\n5. \u7d42\u70b9\u3078\u305f\u3069\u308a\u7740\u3044\u305f\u3089\u5834\u5408\u306f\u901a\u3063\u3066\u304d\u305f\u70b9\u3092\uff11\u3064\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u3068\u3057\u3066\u51fa\u529b\u30c7\u30fc\u30bf\u306b\u4fdd\u6301\u3059\u308b\uff0c\u5206\u5c90\u70b9\u306b\u305f\u3069\u308a\u7740\u3044\u305f\u5834\u5408\u306f\u30bb\u30b0\u30e1\u30f3\u30c8\u53d6\u5f97\u3068\u540c\u6642\u306b\uff0c\u307e\u3060\u635c\u67fb\u3057\u3066\u306a\u3044\u8fd1\u508d\u306e\u6709\u52b9\u753b\u7d20\u3092\u958b\u59cb\u70b9\u30b9\u30bf\u30c3\u30af\u306b\u8caf\u3081\u308b\n6. \u958b\u59cb\u70b9\u30b9\u30bf\u30c3\u30af\u304c\u7121\u304f\u306a\u308b\u307e\u3067\uff14\u301c\uff15\u306e\u51e6\u7406\u3092\u7d9a\u3051\uff0c\u7121\u304f\u306a\u3063\u305f\u3089\uff17\u3078\n7. \u30bb\u30b0\u30e1\u30f3\u30c8\u3068\u3057\u3066\u53d6\u5f97\u3057\u305f\u70b9\u306f\u3059\u3079\u3066\u300c\u53d6\u5f97\u6e08\u307f\u300d\u3068\u3057\uff0c\u6700\u521d\u306e\u70b9\u306b\u623b\u3063\u3066\u518d\u3073\uff11\u306e\u51e6\u7406\u3078\n\n#\u753b\u50cf\u306e\u7d30\u7dda\u5316\u51e6\u7406\n\n\u753b\u50cf\u306e\u7d30\u7dda\u5316\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u3053\u306e\u524d[Hilditch\u306e\u65b9\u6cd5](http://qiita.com/TatsuyaOGth/items/45965e1632f41f3eb139)\u3092\u66f8\u3044\u305f\u306e\u3067\uff0c\u4eca\u56de\u306f\u305d\u306e\u8a08\u7b97\u7d50\u679c\u306e\u753b\u50cf\u3092\u4f7f\u3044\u307e\u3059\uff0e\n\n\n#\u5b9f\u88c5\n\n```cpp\n\n#include <iostream>\n#include <vector>\n#include <array>\n\n/// Output data type\ntypedef std::vector<std::array<int, 2> > Point2dArray;\n\n/**\n *  @brief return point from index\n *\n *  @param i     Pixel index\n *  @param width Image width\n *\n *  @return Point (x, y)\n */\nstatic std::array<int, 2> i2p(int i, int width)\n{\n    int x = i % width;\n    int y = i / width;\n    return {x, y};\n}\n\n\n/**\n *  @brief Divide branched chain.\n *\n *  @param pix            Input image pixels (unsigned char, single channel)\n *  @param width          Input image width\n *  @param height         Input image height\n *  @param dstPts         Output points array (vector<Point2dArray>)\n *  @param bNeighborType4 Input image type, true=4-neighbor, false=8-neighbor.\n *\n *  @return true=Process was succeed\n */\nbool divideBranchedChain(const unsigned char* pix, const int width, const int height, std::vector<Point2dArray> *dstPts, bool bNeighborType4)\n{\n    std::vector<std::vector<std::array<int, 2> > > dstBuf;\n    \n    // offset: [x, y, direction], direction=0...7, 0=right, 1=upper right, ...7=lower right.\n    std::vector<std::array<int, 3> > offset = {{1,0,0}, {1,-1,1}, {0,-1,2}, {-1,-1,3}, {-1,0,4}, {-1,1,5}, {0,1,6}, {1,1,7}};\n    \n    // segment: [current focused pixel index, neighbor pixel index, neighbor pixel direction]\n    std::vector<std::array<int, 3> > neighbors;\n    std::vector<std::array<int, 3> > nextSearchPixels;\n    \n    std::unique_ptr<char[]> tPix(new char[width * height]); // searched pix\n    for (int i = 0; i < width * height; ++i) tPix[i] = 0;\n    \n    /// (function) find neighbor pixels, and update neighbors.\n    auto findNeighbor = [&](int focusIdx, int ignoreIdx, int startDir)\n    {\n        neighbors.clear();\n        for (int i = 0; i < offset.size(); ++i)\n        {\n            int ti = (i + startDir) % 8;\n            if (bNeighborType4 && ti % 2 != 0) continue;\n            \n            int x = offset[ti][0] + (focusIdx % width);\n            int y = offset[ti][1] + (focusIdx / width);\n            int testIdx = y * width + x;\n            \n            // tests:\n            if (testIdx != ignoreIdx                            && // is not ignore?\n                (x >= 0 && x < width && y >= 0 && y < height)   && // is not outside?\n                tPix[testIdx] == 0                              && // is not already searched pixel?\n                pix[testIdx] > 0) // is white pixel\n            {\n                neighbors.push_back( {focusIdx, testIdx, offset[ti][2]} );\n            }\n        }\n    };\n    \n    /// (function) get direction\n    auto getDirection = [&offset, &width](int focusIdx, int targetIdx)\n    {\n        for (const auto& e : offset)\n        {\n            int x = e[0] + (focusIdx % width);\n            int y = e[1] + (focusIdx / width);\n            int testIdx = y * width + x;\n            if (testIdx == targetIdx)\n                return e[2];\n        }\n        throw \"can't found direction.\"; // error\n    };\n    \n    // scan\n    for (int i = 0; i < width * height; ++i)\n    {\n        if (pix[i] > 0 && tPix[i] == 0)\n        {\n            int firstIdx = i;\n            int focusIdx = firstIdx;\n            int lastFocus = -1;\n            int beginDir = 0;\n            bool bFirst = true;\n            int count = 0;\n            \n            try {\n                // find begin point(s) on a segment\n                while (count < width * height)\n                {\n                    findNeighbor(focusIdx, lastFocus, beginDir);\n                    \n                    // tests\n                    if (neighbors.empty())\n                    {\n                        if (bFirst)\n                        {\n                            // single pixel\n                            dstBuf.push_back(Point2dArray(1, i2p(focusIdx, width)));\n                            tPix[focusIdx] = 1;\n                            break;\n                        }\n                        // end point\n                        nextSearchPixels.push_back({focusIdx, lastFocus, getDirection(focusIdx, lastFocus)});\n                        break;\n                    }\n                    else {\n                        if (bFirst)\n                        {\n                            if (neighbors.size() == 1)\n                            {\n                                // first pixel is end point\n                                nextSearchPixels.swap(neighbors);\n                                break;\n                            }\n                        }\n                        else {\n                            if (neighbors.size() >= 2 || focusIdx == firstIdx)\n                            {\n                                // branched point, or repeated point\n                                neighbors.push_back({focusIdx, lastFocus, getDirection(focusIdx, lastFocus)});\n                                nextSearchPixels.swap(neighbors);\n                                break;\n                            }\n                        }\n                    }\n                    \n                    // continue\n                    lastFocus = focusIdx;\n                    focusIdx = neighbors[0][1];\n                    beginDir = neighbors[0][2];\n                    bFirst = false;\n                    ++count;\n                }\n                if (count == width * height - 1)\n                {\n                    throw \"endless loop exception\";\n                }\n                \n                // pick up points on the chains.\n                while (nextSearchPixels.empty() == false)\n                {\n                    bFirst = true;\n                    lastFocus = -1;\n                    auto it = nextSearchPixels.begin();\n                    firstIdx = (*it)[0];\n                    focusIdx = firstIdx;\n                    beginDir = (*it)[2];\n                    nextSearchPixels.erase(it);\n                    count = 0;\n                    Point2dArray chainPts;\n                    \n                    do {\n                        findNeighbor(focusIdx, lastFocus, beginDir);\n                        \n                        // tests\n                        if (neighbors.empty() || (bFirst == false && focusIdx == firstIdx))\n                        {\n                            break;\n                        }\n                        else if (bFirst == false && neighbors.size() >= 2)\n                        {\n                            std::copy(begin(neighbors), end(neighbors), back_inserter(nextSearchPixels));\n                            break;\n                        }\n                        \n                        // continue\n                        \n                        if (bFirst)\n                        {\n                            chainPts.push_back(i2p(focusIdx, width));\n                            tPix[focusIdx] = 1;\n                        }\n                        \n                        lastFocus = focusIdx;\n                        focusIdx = neighbors[0][1];\n                        beginDir = neighbors[0][2];\n                        bFirst = false;\n                        \n                        chainPts.push_back(i2p(focusIdx, width));\n                        tPix[focusIdx] = 1;\n                    }\n                    while (count < width * height);\n                    if (count == width * height - 1)\n                    {\n                        throw \"endless loop exception\";\n                    }\n                    \n                    if (chainPts.empty() == false) dstBuf.push_back(chainPts);\n                }\n            }\n            catch (const char* e)\n            {\n                std::cout << \"[exception] \" << e << std::endl;\n                return false;\n            }\n        }\n    }\n    \n    dstPts->swap(dstBuf);\n    return true;\n}\n```\n\n~~for\u6587\u306e\u4e2d\u306bwhile(true)\u304c\uff12\u3064\u3082\u767b\u5834\u3059\u308b\u3068\u3044\u3046\u30cf\u30e9\u30cf\u30e9\u30c9\u30ad\u30c9\u30ad\u306a\u30b3\u30fc\u30c9\u3067\u3059\u306d~~\u2192\u30eb\u30fc\u30d7\u56de\u6570\u4e0a\u9650\u3092\u4ed8\u3051\u3066\u3061\u3087\u3063\u3068\u3060\u3051\u30bb\u30fc\u30d5\u30c6\u30a3\u306b\u3057\u307e\u3057\u305f\uff0e\u5165\u529b\u753b\u50cf\u306f\u3042\u307e\u308a\u591a\u304f\u306e\u30d1\u30bf\u30fc\u30f3\u8a66\u3057\u3066\u306a\u3044\u3067\u3059\u304c\uff0c\u7121\u9650\u30eb\u30fc\u30d7\u306b\u9665\u308b\u53ef\u80fd\u6027\u304c\u7121\u3044\u3068\u306f\u3044\u3048\u306a\u3044\u306e\u3067\u3044\u3064\u304b\u3082\u3063\u3068\u6574\u7406\u3057\u305f\u3044\u3067\u3059\uff0e\n\n##\u88dc\u8db3\n\n\u95a2\u6570 `divideBranchedChain` \u306f\u7b2c\uff11\u5f15\u6570\u306b\u5165\u529b\u753b\u50cf\u306e\u30dd\u30a4\u30f3\u30bf\uff08unsigned char*, \u30b7\u30f3\u30b0\u30eb\u30c1\u30e3\u30f3\u30cd\u30eb\uff09\uff0c\u7b2c\uff12\uff0c\uff13\u5f15\u6570\u306b\u305d\u306e\u6a2a\u5e45\u3068\u9ad8\u3055\uff0c\u7b2c\uff14\u5f15\u6570\uff08\u51fa\u529b\uff09\u306b\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u30dd\u30a4\u30f3\u30bf\uff0c\u7b2c\uff15\u5f15\u6570\u306ftrue\u3060\u3068\u5165\u529b\u306e\u7dda\u753b\u50cf\u3092\uff14\u8fd1\u508d\u9023\u7d50\uff0cfalse\u3060\u30688\u8fd1\u508d\u9023\u7d50\u3068\u3057\u3066\u51e6\u7406\u3057\u307e\u3059\uff0e\n\n\u305f\u3076\u3093C++14\u3058\u3083\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\u304b\u3082\u3067\u3059\uff0e\n\n\u3068\u3053\u308d\u3067`vector<array<T, N> >`\u3063\u3066\u3044\u3046\u306e\u4fbf\u5229\u3067\u3059\u306d\uff0e\u51fa\u529b\u30c7\u30fc\u30bf\u306fint\u578b\u306e\uff12\u6b21\u5143\u5ea7\u6a19\uff08x, y\uff09\u306a\u306e\u3067\uff0c\u672c\u6765\u306a\u3089int\u5909\u6570\u3092\uff12\u500b\u3082\u3064\u69cb\u9020\u4f53\u3092\u4f5c\u3063\u305f\u308a\u3059\u308b\u3079\u304d\u3060\u3068\u601d\u3044\u307e\u3059\u304c\uff0c\u305d\u3053\u306f\u6a2a\u7740\u3057\u3066`std::array<int, 2>`\u3092vector\u914d\u5217\u306b\u6301\u305f\u305b\u305f\u308a\u3057\u3066\u307e\u3059\uff0e\u3053\u306e`vector<array<T, N> >` \u3063\u3066\u3044\u3046\u306e\u6700\u8fd1\u3088\u304f\u4f7f\u3063\u3066\u307e\u3059\uff0e\n\n\u3042\u3068\uff0c\u3068\u304f\u306b\u610f\u5473\u3082\u306a\u304f\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u3092\u30e9\u30e0\u30c0\u5f0f\u3067\u66f8\u3044\u3066\u305f\u308a\u3057\u307e\u3059\u304c\u5225\u306e\u95a2\u6570\u3068\u3057\u3066\u5916\u306b\u51fa\u3057\u3066\u3082\u5927\u4e08\u592b\u306a\u306f\u305a\u3067\u3059\uff0e\n\n\n#\u8a08\u7b97\u7d50\u679c\n\n\u5165\u529b\u753b\u50cf\n\n![test.png](https://qiita-image-store.s3.amazonaws.com/0/29877/89876e4c-c025-b40c-96fb-81309d2ea144.png)\n\n\n\u7d30\u7dda\u5316\uff08[Hilditch\u306e\u65b9\u6cd5](http://qiita.com/TatsuyaOGth/items/45965e1632f41f3eb139)\uff09\n\n\n![output.png](https://qiita-image-store.s3.amazonaws.com/0/29877/279ac388-f83c-24dd-ecaa-445ec4f12b61.png)\n\n\u30bb\u30b0\u30e1\u30f3\u30c8\u5206\u5272\n\n![output2.png](https://qiita-image-store.s3.amazonaws.com/0/29877/6c403004-7f45-68ad-09fc-9c6040ae5617.png)\n\n\u5404\u30bb\u30b0\u30e1\u30f3\u30c8\u6bce\u306b\u8272\u3092\u300c\u8d64\u2192\u9752\u2192\u7dd1\u2192\u8d64\u2192\u9752...\u300d\u3068\u5206\u3051\u3066\u3044\u307e\u3059\uff0e\n\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u591a\u5206\u3082\u3063\u3068\u3088\u304f\u898b\u3048\u307e\u3059\uff0e\n\n\u4e00\u5fdc\u30eb\u30fc\u30d7\u72b6\u306e\u7dda\u3084\uff0c\uff11\u30d4\u30af\u30bb\u30eb\u3057\u304b\u306a\u3044\u30bb\u30b0\u30e1\u30f3\u30c8\u3082\u3061\u3083\u3093\u3068\u53d6\u308c\u3066\u3044\u307e\u3059\uff0e\n", "tags": ["C++", "\u753b\u50cf\u51e6\u7406"]}