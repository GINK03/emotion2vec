{"context": " More than 1 year has passed since last update.\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\n#include <boost/shared_ptr.hpp>\n#include <stdio.h>\nusing namespace std;\nusing boost::shared_ptr;\n\ntemplate<class T>\nstruct PersistentArray {\n    static const int kShiftSize = 4;\n    int shift_, size_;\n    shared_ptr<PersistentArray> data_[1 << kShiftSize];\n    shared_ptr<T> leaf_;\n\n    PersistentArray(): size_() {}\n    PersistentArray(const long size): size_(size) {\n        if (!size) return;\n        for (shift_ = 0; (1 << (shift_ * kShiftSize)) < size; shift_++);\n        if (shift_ == 0) {\n            leaf_.reset(new T());\n            return;\n        }\n        long child_size = 1 << ((shift_ - 1) * kShiftSize);\n        for (long start = 0; start < size; start += child_size) {\n            data_[start / child_size].reset(new PersistentArray(\n                (start + child_size < size) ? child_size : (size - start)));\n        }\n    }\n\n    const T &Get(const long index) const {\n        if (shift_ == 0) {\n            assert(index == 0);\n            return *leaf_;\n        }\n        int shift = (shift_ - 1) * kShiftSize;\n        return data_[index >> shift]->Get(index & ~-(1 << shift));\n    }\n\n    void Set(const long index, const T &value) {\n        if (shift_ == 0) {\n            assert(index == 0);\n            leaf_.reset(new T(value));\n            return;\n        }\n        int shift = (shift_ - 1) * kShiftSize;\n        PersistentArray *pa = new PersistentArray();\n        *pa = *(data_[index >> shift]);\n        data_[index >> shift].reset(pa);\n        data_[index >> shift]->Set(index & ~-(1 << shift), value);\n    }\n};\n\nint main() {\n    PersistentArray<int> a(100000), b(100000), c(100000);\n    a.Set(7000, 100);\n    printf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n    b.Set(7000, 200);\n    printf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n    c = b;\n    printf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n    b = a;\n    printf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n    a.Set(7000, 300);\n    printf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n    b.Set(7000, 400);\n    printf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n    for (int i = 0; i < 10000; i++) {\n        a.Set(8000, 300);\n        b.Set(8000, 400);\n        assert(a.Get(8000) == 300);\n        assert(b.Get(8000) == 400);\n        a = b;\n        assert(a.Get(8000) == 400);\n        assert(b.Get(8000) == 400);\n    }\n}\n\n\n\u51fa\u529b\u7d50\u679c\n% time ./PersistentArray\n   100      0      0\n   100    200      0\n   100    200    200\n   100    100    200\n   300    100    200\n   300    400    200\n./PersistentArray  0.36s user 0.17s system 55% cpu 0.966 total\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0\n\n```C++\n\n#include <boost/shared_ptr.hpp>\n#include <stdio.h>\nusing namespace std;\nusing boost::shared_ptr;\n\ntemplate<class T>\nstruct PersistentArray {\n\tstatic const int kShiftSize = 4;\n\tint shift_, size_;\n\tshared_ptr<PersistentArray> data_[1 << kShiftSize];\n\tshared_ptr<T> leaf_;\n\t\n\tPersistentArray(): size_() {}\n\tPersistentArray(const long size): size_(size) {\n\t\tif (!size) return;\n\t\tfor (shift_ = 0; (1 << (shift_ * kShiftSize)) < size; shift_++);\n\t\tif (shift_ == 0) {\n\t\t\tleaf_.reset(new T());\n\t\t\treturn;\n\t\t}\n\t\tlong child_size = 1 << ((shift_ - 1) * kShiftSize);\n\t\tfor (long start = 0; start < size; start += child_size) {\n\t\t\tdata_[start / child_size].reset(new PersistentArray(\n\t\t\t    (start + child_size < size) ? child_size : (size - start)));\n\t\t}\n\t}\n\t\n\tconst T &Get(const long index) const {\n\t\tif (shift_ == 0) {\n\t\t\tassert(index == 0);\n\t\t\treturn *leaf_;\n\t\t}\n\t\tint shift = (shift_ - 1) * kShiftSize;\n\t\treturn data_[index >> shift]->Get(index & ~-(1 << shift));\n\t}\n\t\n\tvoid Set(const long index, const T &value) {\n\t\tif (shift_ == 0) {\n\t\t\tassert(index == 0);\n\t\t\tleaf_.reset(new T(value));\n\t\t\treturn;\n\t\t}\n\t\tint shift = (shift_ - 1) * kShiftSize;\n\t\tPersistentArray *pa = new PersistentArray();\n\t\t*pa = *(data_[index >> shift]);\n\t\tdata_[index >> shift].reset(pa);\n\t\tdata_[index >> shift]->Set(index & ~-(1 << shift), value);\n\t}\n};\n\nint main() {\n\tPersistentArray<int> a(100000), b(100000), c(100000);\n\ta.Set(7000, 100);\n\tprintf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n\tb.Set(7000, 200);\n\tprintf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n\tc = b;\n\tprintf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n\tb = a;\n\tprintf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n\ta.Set(7000, 300);\n\tprintf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n\tb.Set(7000, 400);\n\tprintf(\"% 6d % 6d % 6d\\n\", a.Get(7000), b.Get(7000), c.Get(7000));\n\tfor (int i = 0; i < 10000; i++) {\n\t\ta.Set(8000, 300);\n\t\tb.Set(8000, 400);\n\t\tassert(a.Get(8000) == 300);\n\t\tassert(b.Get(8000) == 400);\n\t\ta = b;\n\t\tassert(a.Get(8000) == 400);\n\t\tassert(b.Get(8000) == 400);\n\t}\n}\n```\n\n## \u51fa\u529b\u7d50\u679c\n\n```sh\n% time ./PersistentArray\n   100      0      0\n   100    200      0\n   100    200    200\n   100    100    200\n   300    100    200\n   300    400    200\n./PersistentArray  0.36s user 0.17s system 55% cpu 0.966 total\n```", "tags": ["C++", "boost", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}