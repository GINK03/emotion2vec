{"context": "STL\u306b\u306fstd::sort\u3068\u3044\u3046\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf\uff12\u3064\u3092\u5165\u529b\u3068\u3057\u3001\u7834\u58ca\u7684\u306a\u64cd\u4f5c\u3092\u3059\u308b\u95a2\u6570\u3067\u3059\u306d\u3002\u3053\u308c\u3068\u540c\u3058\u30b7\u30b0\u30cb\u30c1\u30e3\u3067\u8272\u3005\u306a\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002wikipedia\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u3044\u8aac\u660e\u306fwikipedia\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u5b66\u6821\u306e\u8ab2\u984c\u3068\u304b\u3067\u4e38\u5199\u3057\u3057\u3061\u3083\u3060\u3081\u3060\u3088\u3002\n\u3061\u306a\u307f\u306bSTL\u3092\u5168\u529b\u3067\u4f7f\u3044\u307e\u3059\u3002C++\u3089\u3057\u3055\u3092\u51fa\u3059\u305f\u3081\u306b\u57fa\u672c\u7684\u306b\u306f\u6dfb\u3048\u5b57\u3067\u306f\u306a\u304f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n1/28/2016 \u8ffd\u8a18;\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u60c5\u5831\u3092std::iterator_traits\u3092\u4f7f\u3063\u3066\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u8a18\u4e8b\u3092\u6539\u3081\u307e\u3057\u305f\u3002C++11\u307e\u3067\u306f\u63a8\u5968\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\u304c\u3001C++14\u304b\u3089\u306f\u5fc5\u9808\u3060\u3063\u305f\u3068\u8a18\u61b6\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u601d\u3044\u3064\u304d\u3067\u66f8\u3044\u3066\u3044\u305f\u30b3\u30fc\u30c9\u3092\u591a\u5c11\u76f4\u3057\u307e\u3057\u305f\u3002\n\niter_sorting_swap\n\u6700\u521d\u306b\u3001\u3042\u308b\u30d8\u30eb\u30d1\u95a2\u6570\u3092\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\u30022\u3064\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u3063\u3066\u30bd\u30fc\u30c8\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\u3067\u3059\u3002swap\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3089true, \u5fc5\u8981\u306a\u3051\u308c\u3070false\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\ntemplate< class RandomIter, class Predicate =\n    std::less< typename std::iterator_traits< RandomIter >::value_type > >\nstatic inline bool iter_sorting_swap(RandomIter a, RandomIter b,\n    Predicate pred = Predicate())\n{\n  if (a > b) { return iter_sorting_swap(b, a); }\n  // arguments must be a <= b\n  return pred(*b, *a) ? std::iter_swap(a, b), true : false;\n}\n\n\n\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n\u9045\u3044\u3051\u3069\u4e00\u756a\u7d20\u76f4\u306a\u30bd\u30fc\u30c8\u3002\u96a3\u308a\u5408\u3046\u3082\u306e\u3092\u3072\u305f\u3059\u3089\u6bd4\u8f03\u3001\u4ea4\u63db\u3057\u3066\u3044\u304f\u3002\ntemplate< class RandomIter >\nvoid bubble_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  for (auto i = first; i != last; ++i)\n  {\n    for (auto j = last - 1; j > i; --j)\n      { iter_sorting_swap(j, j - 1); }\n  }\n}\n\n\n\u30b3\u30e0\u30bd\u30fc\u30c8\n\u6adb\u30bd\u30fc\u30c8\u3068\u3082\u3002\u306a\u3093\u3067\u3053\u3093\u306a\u5909\u306a\u6570\u5b57\u304c\u51fa\u3066\u304f\u308b\u306e\u304b\u306f\u8b0e\u3067\u3059\u3002\ntemplate< class RandomIter >\nvoid comb_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  auto size = last - first;\n\n  for (decltype(size) interval = size / 1.3;; interval /= 1.3)\n  {\n    for (RandomIter i = first; i + interval < last; ++i)\n      { iter_sorting_swap(i, i + interval); }\n    if (interval <= 1) { break; }\n  }\n}\n\n\n\u30ce\u30fc\u30e0\u30bd\u30fc\u30c8\n\u30ce\u30fc\u30e0\u3055\u3093\u304c\u9262\u690d\u3048\u3092\u4e26\u3073\u66ff\u3048\u308b\u3068\u304d\u306b\u4f7f\u3063\u305f\u30bd\u30fc\u30c8\u3002for\u304c\u591a\u91cd\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u7279\u5fb4\u3002\ntemplate< class RandomIter >\nvoid gnome_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  for (RandomIter gnome = first + (last - first) / 2; gnome != last;)\n  {\n    if (gnome == first) { ++gnome; }\n    iter_sorting_swap(gnome, gnome - 1)\n      ? --gnome : ++gnome;\n  }\n}\n\n\n\u633f\u5165\u30bd\u30fc\u30c8\n\u901a\u5e38\u306f\u9045\u3044\u304c\u3042\u308b\u7a0b\u5ea6\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u975e\u5e38\u306b\u901f\u304f\u306a\u308b\u3068\u3044\u3046\u7279\u5fb4\u3092\u6301\u3064\u30bd\u30fc\u30c8\u3002\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u5927\u96d1\u628a\u306b\u30bd\u30fc\u30c8\u3057\u3066\u304b\u3089\u633f\u5165\u30bd\u30fc\u30c8\u3092\u9069\u7528\u3059\u308b\u3068\u901f\u3044\u3002\ntemplate< class RandomIter >\nvoid insertion_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  iter_sorting_swap(first, first + 1);\n  for (RandomIter i = first + 1; i != last; ++i)\n  {\n    for (RandomIter j = i; j > first; --j)\n    {\n      if(!iter_sorting_swap(j, j - 1)) { break; }\n    }\n  }\n}\n\n\n\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n\u4e00\u5ea6\u3070\u3089\u3057\u3066\u30bd\u30fc\u30c8\u3057\u306a\u304c\u3089\u304f\u3063\u3064\u3051\u308c\u3070\u3044\u3044\u3058\u3083\u306a\u3044\u3068\u3044\u3046\u30bd\u30fc\u30c8\u3002\u5b9f\u88c5\u306f\u5c11\u3057\u53cd\u5247\u6c17\u5473\u3067\u3001\u3082\u3068\u3082\u3068STL\u306b\u30de\u30fc\u30b8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u7c21\u5358\u306b\u4f5c\u308c\u308b\u3002\ntemplate< class RandomIter >\nvoid merge_sort(RandomIter first, RandomIter last)\n{\n  auto diff = last - first;\n  if (diff <= 1) { return; }\n  RandomIter middle = first + diff / 2;\n  merge_sort(first, middle);\n  merge_sort(middle, last);\n  std::inplace_merge(first, middle, last);\n}\n\n\n\u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\n\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3092\u5076\u6570\u306e\u6dfb\u3048\u5b57\u306e\u3082\u306e\u3068\u3001\u5947\u6570\u306e\u6dfb\u3048\u5b57\u306e\u3082\u306e\u3068\u3067\u5225\u3005\u306b\u3053\u306a\u3059\u3088\u3046\u306b\u6539\u826f\u3057\u305f\u3082\u306e\u3002\n\u540d\u524d\u304c\u3044\u307e\u3044\u3061\u899a\u3048\u3065\u3089\u3044\u306e\u304c\u7279\u5fb4\u3002\ntemplate< class RandomIter >\nvoid odd_even_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  for (bool incomplete = true; incomplete; )\n  {\n    incomplete = false;\n    for (RandomIter i = first; i < last - 1; i += 2)\n    { // even\n      if (iter_sorting_swap(i, i + 1)) { incomplete = true; }\n    }\n    for (RandomIter i = first + 1; i < last - 1; i += 2)\n    { // odd\n      if (iter_sorting_swap(i, i + 1)) { incomplete = true; }\n    }\n  }\n}\n\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\u8a00\u308f\u305a\u3068\u77e5\u308c\u305f\u6700\u901f\u306e\u30bd\u30fc\u30c8\u3002\u7279\u6b8a\u306a\u60f3\u5b9a\u3092\u3057\u306a\u3051\u308c\u3070\u6700\u3082\u901f\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u308b\u3002\nstd::find_if\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u3082\u3088\u304b\u3063\u305f\u3051\u3069\u7d71\u4e00\u611f\u304c\u6b32\u3057\u304f\u3066\u82e5\u5e72C\u8a00\u8a9e\u3063\u307d\u3044\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u3002\ntemplate< class RandomIter >\nvoid quick_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  RandomIter i = first, j = last - 1;\n  for (RandomIter pivot = first;; ++i, --j)\n  {\n    while (*i < *pivot) { ++i; }\n    while (*pivot < *j) { --j; }\n    if (i >= j) { break; }\n    std::iter_swap(i, j);\n  }\n  quick_sort(first, i);\n  quick_sort(j + 1, last);\n}\n\n\n\u9078\u629e\u30bd\u30fc\u30c8\n\u9045\u3044\u3051\u3069\u5206\u304b\u308a\u3084\u3059\u3044\u3002\u5168\u3066\u306e\u8981\u7d20\u3092\u982d\u304b\u3089\u898b\u3066\u3044\u3063\u3066\u4e00\u756a\u5c0f\u3055\u304b\u3063\u305f\u308a\u5927\u304d\u304b\u3063\u305f\u308a\u3059\u308b\u3082\u306e\u3092\u9078\u629e\u3057\u3066\u3044\u304f\u3002\u3053\u3053\u3067\u306f\u5c0f\u3055\u3044\u3082\u306e\u3092\u9078\u3093\u3067\u3044\u308b\u3002\ntemplate< class RandomIter >\nvoid selection_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  for (; first != last; ++first)\n  {\n    auto min = std::min_element(first, last);\n    std::iter_swap(first, min);\n  }\n}\n\n\n\u30b7\u30a7\u30fc\u30ab\u30fc\u30bd\u30fc\u30c8\n\u57fa\u672c\u7684\u306b\u306f\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3060\u3051\u3069\u3001\u524d\u65b9\u3068\u5f8c\u65b9\u306e\u4e21\u5074\u304b\u3089\u305b\u3081\u3066\u3044\u304f\u3088\u3046\u306b\u6539\u826f\u3057\u305f\u3082\u306e\u3002\ntemplate< class RandomIter >\nvoid shaker_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  for (RandomIter index; first != last;)\n  {\n    // commit forward scanning\n    for (auto i = first; i != last - 1; ++i)\n    {\n      if (iter_sorting_swap(i, i + 1)) { index = i; }\n    }\n    last = index;\n    if (first == last) { break; }\n\n    // commit backward scanning\n    index = last;\n    for (auto i = last; i != first; --i)\n    {\n      if (iter_sorting_swap(i, i - 1))\u3000{ index = i; }\n    }\n    first = index;\n  }\n}\n\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u5927\u96d1\u628a\u306b\u30bd\u30fc\u30c8\u3092\u3057\u3066\u304b\u3089\u6b8b\u308a\u3092\u30bd\u30fc\u30c8\u3059\u308b\u30bf\u30a4\u30d7\u306e\u4eba\u3002\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306f\u5206\u5272\u3057\u3066\u518d\u5e30\u3092\u7e70\u308a\u8fd4\u3059\u305f\u3081\u3001\u6700\u5f8c\u306e\u6700\u5f8c\u307e\u3067\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u306f\u6700\u5f8c\u306e\u65b9\u304c\u975e\u5e38\u306b\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u4e0a\u306b\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\u3042\u308b\u7a0b\u5ea6\u3067\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3092\u4e2d\u65ad\u3057\u3066\u3057\u307e\u3044\u3001\u6700\u5f8c\u3092\u5225\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u30ac\u30fc\u30c3\u3068\u30bd\u30fc\u30c8\u3059\u308b\u3068\u901f\u5ea6\u304c\u6539\u5584\u3055\u308c\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u5371\u967a\u6027\u3082\u6e1b\u308b\u5834\u5408\u304c\u3042\u308b\u3002\u305d\u3093\u306a\u30bd\u30fc\u30c8\u305f\u3061\u3002\n\u3053\u3053\u306e\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u306f\u3001\u8981\u7d20\u304c40\u672a\u6e80\u3067\u3042\u308c\u3070\u9014\u4e2d\u3067\u4e2d\u65ad\u3057\u3066\u3057\u307e\u3046\u3088\u3046\u306b\u3057\u305f\u3002\ntemplate< class RandomIter >\nvoid _q_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 40) { return; } // \u3053\u3053\u4ee5\u5916\u306f\u4e0a\u306e\u7269\u3068\u4e00\u7dd2\n  RandomIter i = first, j = last - 1;\n  RandomIter pivot = first;\n  for (;; ++i, --j)\n  {\n    while (*i < *pivot) { ++i; }\n    while (*pivot < *j) { --j; }\n    if (i >= j) { break; }\n    std::iter_swap(i, j);\n  }\n  _q_sort(first, i);\n  _q_sort(j + 1, last);\n}\n\n\n\u30a4\u30f3\u30c8\u30ed\u30bd\u30fc\u30c8\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306e\u5f8c\u306b\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u3092\u884c\u3046\u30bd\u30fc\u30c8\u3002gcc\u306estd::sort\u3067\u306f\u3053\u308c\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u805e\u3044\u305f\u3053\u3068\u304c\u3042\u308b\u3002\ntemplate< class RandomIter >\nvoid intro_sort(RandomIter first, RandomIter last)\n{\n  _q_sort(first, last);\n  merge_sort(first, last); // \u4e0a\u306e\u3084\u3064\n}\n\n\n\u633f\u5165\u30bd\u30fc\u30c8\u3092\u3064\u304b\u3046\u30bd\u30fc\u30c8\n\u6b63\u5f0f\u540d\u79f0\u306f\u3057\u3089\u306a\u3044\u3002\u6570\u5024\u3092\u6271\u3046\u5834\u5408\u306fstd::sort\u3088\u308a\u901f\u3044\u3053\u3068\u304c\u591a\u3044\u3002\ntemplate< class RandomIter >\nvoid quick_insertion_sort(RandomIter first, RandomIter last)\n{\n  _q_sort(first, last);\n  insertion_sort(first, last); // \u4e0a\u306e\u3084\u3064\n}\n\n\n\u30c6\u30b9\u30c8\u7528\u306e\u30b3\u30fc\u30c9\n\u3053\u3046\u3044\u3046\u306e\u3092\u66f8\u304f\u3068\u7c21\u5358\u306b\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3002\n\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u30af\u30e9\u30b9\u3092\u66f8\u304f\u3068\u6642\u9593\u8a08\u6e2c\u3082\u697d\u3002\n#include <iostream>\n#include <iterator>\n#include <random>\n\nint main()\n{\n    std::vector< int > vec;\n    std::random_device rd;\n    std::mt19937 mt(rd());\n    std::generate_n(std::back_inserter(vec), 10, mt);\n\n    quick_sort(begin(vec), end(vec));\n\n    std::copy(begin(vec), end(vec),\n        std::ostream_iterator< int >(std::cout, \"\\n\"));\n}\n\n\n\u304a\u308f\u308a\u306b\n\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u304c\u3001\u6bd4\u8f03\u30bd\u30fc\u30c8\u306e\u4e00\u90e8\u3060\u3051\u3092\u6271\u3044\u307e\u3057\u305f\u3002\n\u624b\u5143\u306e\u30b3\u30fc\u30c9\u3092\u76f4\u3057\u306a\u304c\u3089\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u306e\u3067\u3001\u3046\u3054\u304b\u306d\u30fc\u305e\u3068\u304b\u9593\u9055\u3063\u3066\u308b\u3088\u3068\u304b\u3042\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\nSTL\u306b\u306fstd::sort\u3068\u3044\u3046\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf\uff12\u3064\u3092\u5165\u529b\u3068\u3057\u3001\u7834\u58ca\u7684\u306a\u64cd\u4f5c\u3092\u3059\u308b\u95a2\u6570\u3067\u3059\u306d\u3002\u3053\u308c\u3068\u540c\u3058\u30b7\u30b0\u30cb\u30c1\u30e3\u3067\u8272\u3005\u306a\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002wikipedia\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u8a73\u3057\u3044\u8aac\u660e\u306f[wikipedia](https://ja.wikipedia.org/wiki/\u30bd\u30fc\u30c8)\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u5b66\u6821\u306e\u8ab2\u984c\u3068\u304b\u3067\u4e38\u5199\u3057\u3057\u3061\u3083\u3060\u3081\u3060\u3088\u3002\n\n\u3061\u306a\u307f\u306bSTL\u3092\u5168\u529b\u3067\u4f7f\u3044\u307e\u3059\u3002C++\u3089\u3057\u3055\u3092\u51fa\u3059\u305f\u3081\u306b\u57fa\u672c\u7684\u306b\u306f\u6dfb\u3048\u5b57\u3067\u306f\u306a\u304f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n1/28/2016 \u8ffd\u8a18;\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u60c5\u5831\u3092std::iterator_traits\u3092\u4f7f\u3063\u3066\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u8a18\u4e8b\u3092\u6539\u3081\u307e\u3057\u305f\u3002C++11\u307e\u3067\u306f\u63a8\u5968\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3059\u304c\u3001C++14\u304b\u3089\u306f\u5fc5\u9808\u3060\u3063\u305f\u3068\u8a18\u61b6\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u601d\u3044\u3064\u304d\u3067\u66f8\u3044\u3066\u3044\u305f\u30b3\u30fc\u30c9\u3092\u591a\u5c11\u76f4\u3057\u307e\u3057\u305f\u3002\n\n##iter_sorting_swap\n\u6700\u521d\u306b\u3001\u3042\u308b\u30d8\u30eb\u30d1\u95a2\u6570\u3092\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\u30022\u3064\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u3063\u3066\u30bd\u30fc\u30c8\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\u3067\u3059\u3002swap\u3059\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3089true, \u5fc5\u8981\u306a\u3051\u308c\u3070false\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\n``` cpp\ntemplate< class RandomIter, class Predicate =\n    std::less< typename std::iterator_traits< RandomIter >::value_type > >\nstatic inline bool iter_sorting_swap(RandomIter a, RandomIter b,\n    Predicate pred = Predicate())\n{\n  if (a > b) { return iter_sorting_swap(b, a); }\n  // arguments must be a <= b\n  return pred(*b, *a) ? std::iter_swap(a, b), true : false;\n}\n```\n\n# \u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\n\u9045\u3044\u3051\u3069\u4e00\u756a\u7d20\u76f4\u306a\u30bd\u30fc\u30c8\u3002\u96a3\u308a\u5408\u3046\u3082\u306e\u3092\u3072\u305f\u3059\u3089\u6bd4\u8f03\u3001\u4ea4\u63db\u3057\u3066\u3044\u304f\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid bubble_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  for (auto i = first; i != last; ++i)\n  {\n    for (auto j = last - 1; j > i; --j)\n      { iter_sorting_swap(j, j - 1); }\n  }\n}\n```\n\n\n# \u30b3\u30e0\u30bd\u30fc\u30c8\n\u6adb\u30bd\u30fc\u30c8\u3068\u3082\u3002\u306a\u3093\u3067\u3053\u3093\u306a\u5909\u306a\u6570\u5b57\u304c\u51fa\u3066\u304f\u308b\u306e\u304b\u306f\u8b0e\u3067\u3059\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid comb_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  auto size = last - first;\n\n  for (decltype(size) interval = size / 1.3;; interval /= 1.3)\n  {\n    for (RandomIter i = first; i + interval < last; ++i)\n      { iter_sorting_swap(i, i + interval); }\n    if (interval <= 1) { break; }\n  }\n}\n```\n\n# \u30ce\u30fc\u30e0\u30bd\u30fc\u30c8\n\u30ce\u30fc\u30e0\u3055\u3093\u304c\u9262\u690d\u3048\u3092\u4e26\u3073\u66ff\u3048\u308b\u3068\u304d\u306b\u4f7f\u3063\u305f\u30bd\u30fc\u30c8\u3002for\u304c\u591a\u91cd\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u7279\u5fb4\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid gnome_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  for (RandomIter gnome = first + (last - first) / 2; gnome != last;)\n  {\n    if (gnome == first) { ++gnome; }\n    iter_sorting_swap(gnome, gnome - 1)\n      ? --gnome : ++gnome;\n  }\n}\n```\n\n# \u633f\u5165\u30bd\u30fc\u30c8\n\u901a\u5e38\u306f\u9045\u3044\u304c\u3042\u308b\u7a0b\u5ea6\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u975e\u5e38\u306b\u901f\u304f\u306a\u308b\u3068\u3044\u3046\u7279\u5fb4\u3092\u6301\u3064\u30bd\u30fc\u30c8\u3002\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u5927\u96d1\u628a\u306b\u30bd\u30fc\u30c8\u3057\u3066\u304b\u3089\u633f\u5165\u30bd\u30fc\u30c8\u3092\u9069\u7528\u3059\u308b\u3068\u901f\u3044\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid insertion_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  iter_sorting_swap(first, first + 1);\n  for (RandomIter i = first + 1; i != last; ++i)\n  {\n    for (RandomIter j = i; j > first; --j)\n    {\n      if(!iter_sorting_swap(j, j - 1)) { break; }\n    }\n  }\n}\n```\n\n# \u30de\u30fc\u30b8\u30bd\u30fc\u30c8\n\u4e00\u5ea6\u3070\u3089\u3057\u3066\u30bd\u30fc\u30c8\u3057\u306a\u304c\u3089\u304f\u3063\u3064\u3051\u308c\u3070\u3044\u3044\u3058\u3083\u306a\u3044\u3068\u3044\u3046\u30bd\u30fc\u30c8\u3002\u5b9f\u88c5\u306f\u5c11\u3057\u53cd\u5247\u6c17\u5473\u3067\u3001\u3082\u3068\u3082\u3068STL\u306b\u30de\u30fc\u30b8\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u7c21\u5358\u306b\u4f5c\u308c\u308b\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid merge_sort(RandomIter first, RandomIter last)\n{\n  auto diff = last - first;\n  if (diff <= 1) { return; }\n  RandomIter middle = first + diff / 2;\n  merge_sort(first, middle);\n  merge_sort(middle, last);\n  std::inplace_merge(first, middle, last);\n}\n```\n\n\n# \u5947\u5076\u8ee2\u7f6e\u30bd\u30fc\u30c8\n\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3092\u5076\u6570\u306e\u6dfb\u3048\u5b57\u306e\u3082\u306e\u3068\u3001\u5947\u6570\u306e\u6dfb\u3048\u5b57\u306e\u3082\u306e\u3068\u3067\u5225\u3005\u306b\u3053\u306a\u3059\u3088\u3046\u306b\u6539\u826f\u3057\u305f\u3082\u306e\u3002\n\u540d\u524d\u304c\u3044\u307e\u3044\u3061\u899a\u3048\u3065\u3089\u3044\u306e\u304c\u7279\u5fb4\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid odd_even_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  for (bool incomplete = true; incomplete; )\n  {\n    incomplete = false;\n    for (RandomIter i = first; i < last - 1; i += 2)\n    { // even\n      if (iter_sorting_swap(i, i + 1)) { incomplete = true; }\n    }\n    for (RandomIter i = first + 1; i < last - 1; i += 2)\n    { // odd\n      if (iter_sorting_swap(i, i + 1)) { incomplete = true; }\n    }\n  }\n}\n```\n\n# \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\u8a00\u308f\u305a\u3068\u77e5\u308c\u305f\u6700\u901f\u306e\u30bd\u30fc\u30c8\u3002\u7279\u6b8a\u306a\u60f3\u5b9a\u3092\u3057\u306a\u3051\u308c\u3070\u6700\u3082\u901f\u3044\u3068\u8a00\u308f\u308c\u3066\u3044\u308b\u3002\n`std::find_if`\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u3082\u3088\u304b\u3063\u305f\u3051\u3069\u7d71\u4e00\u611f\u304c\u6b32\u3057\u304f\u3066\u82e5\u5e72C\u8a00\u8a9e\u3063\u307d\u3044\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid quick_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  RandomIter i = first, j = last - 1;\n  for (RandomIter pivot = first;; ++i, --j)\n  {\n    while (*i < *pivot) { ++i; }\n    while (*pivot < *j) { --j; }\n    if (i >= j) { break; }\n    std::iter_swap(i, j);\n  }\n  quick_sort(first, i);\n  quick_sort(j + 1, last);\n}\n```\n\n# \u9078\u629e\u30bd\u30fc\u30c8\n\u9045\u3044\u3051\u3069\u5206\u304b\u308a\u3084\u3059\u3044\u3002\u5168\u3066\u306e\u8981\u7d20\u3092\u982d\u304b\u3089\u898b\u3066\u3044\u3063\u3066\u4e00\u756a\u5c0f\u3055\u304b\u3063\u305f\u308a\u5927\u304d\u304b\u3063\u305f\u308a\u3059\u308b\u3082\u306e\u3092\u9078\u629e\u3057\u3066\u3044\u304f\u3002\u3053\u3053\u3067\u306f\u5c0f\u3055\u3044\u3082\u306e\u3092\u9078\u3093\u3067\u3044\u308b\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid selection_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  for (; first != last; ++first)\n  {\n    auto min = std::min_element(first, last);\n    std::iter_swap(first, min);\n  }\n}\n```\n\n\n# \u30b7\u30a7\u30fc\u30ab\u30fc\u30bd\u30fc\u30c8\n\u57fa\u672c\u7684\u306b\u306f\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3060\u3051\u3069\u3001\u524d\u65b9\u3068\u5f8c\u65b9\u306e\u4e21\u5074\u304b\u3089\u305b\u3081\u3066\u3044\u304f\u3088\u3046\u306b\u6539\u826f\u3057\u305f\u3082\u306e\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid shaker_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 1) { return; }\n  for (RandomIter index; first != last;)\n  {\n    // commit forward scanning\n    for (auto i = first; i != last - 1; ++i)\n    {\n      if (iter_sorting_swap(i, i + 1)) { index = i; }\n    }\n    last = index;\n    if (first == last) { break; }\n\n    // commit backward scanning\n    index = last;\n    for (auto i = last; i != first; --i)\n    {\n      if (iter_sorting_swap(i, i - 1))\u3000{ index = i; }\n    }\n    first = index;\n  }\n}\n```\n\n# \u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u5927\u96d1\u628a\u306b\u30bd\u30fc\u30c8\u3092\u3057\u3066\u304b\u3089\u6b8b\u308a\u3092\u30bd\u30fc\u30c8\u3059\u308b\u30bf\u30a4\u30d7\u306e\u4eba\u3002\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306f\u5206\u5272\u3057\u3066\u518d\u5e30\u3092\u7e70\u308a\u8fd4\u3059\u305f\u3081\u3001\u6700\u5f8c\u306e\u6700\u5f8c\u307e\u3067\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u306f\u6700\u5f8c\u306e\u65b9\u304c\u975e\u5e38\u306b\u9045\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u4e0a\u306b\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u8d77\u3053\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\u3042\u308b\u7a0b\u5ea6\u3067\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3092\u4e2d\u65ad\u3057\u3066\u3057\u307e\u3044\u3001\u6700\u5f8c\u3092\u5225\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u30ac\u30fc\u30c3\u3068\u30bd\u30fc\u30c8\u3059\u308b\u3068\u901f\u5ea6\u304c\u6539\u5584\u3055\u308c\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u306e\u5371\u967a\u6027\u3082\u6e1b\u308b\u5834\u5408\u304c\u3042\u308b\u3002\u305d\u3093\u306a\u30bd\u30fc\u30c8\u305f\u3061\u3002\n\n\u3053\u3053\u306e\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u306f\u3001\u8981\u7d20\u304c40\u672a\u6e80\u3067\u3042\u308c\u3070\u9014\u4e2d\u3067\u4e2d\u65ad\u3057\u3066\u3057\u307e\u3046\u3088\u3046\u306b\u3057\u305f\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid _q_sort(RandomIter first, RandomIter last)\n{\n  if (last - first <= 40) { return; } // \u3053\u3053\u4ee5\u5916\u306f\u4e0a\u306e\u7269\u3068\u4e00\u7dd2\n  RandomIter i = first, j = last - 1;\n  RandomIter pivot = first;\n  for (;; ++i, --j)\n  {\n    while (*i < *pivot) { ++i; }\n    while (*pivot < *j) { --j; }\n    if (i >= j) { break; }\n    std::iter_swap(i, j);\n  }\n  _q_sort(first, i);\n  _q_sort(j + 1, last);\n}\n```\n\n## \u30a4\u30f3\u30c8\u30ed\u30bd\u30fc\u30c8\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306e\u5f8c\u306b\u30de\u30fc\u30b8\u30bd\u30fc\u30c8\u3092\u884c\u3046\u30bd\u30fc\u30c8\u3002gcc\u306estd::sort\u3067\u306f\u3053\u308c\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u805e\u3044\u305f\u3053\u3068\u304c\u3042\u308b\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid intro_sort(RandomIter first, RandomIter last)\n{\n  _q_sort(first, last);\n  merge_sort(first, last); // \u4e0a\u306e\u3084\u3064\n}\n```\n\n## \u633f\u5165\u30bd\u30fc\u30c8\u3092\u3064\u304b\u3046\u30bd\u30fc\u30c8\n\u6b63\u5f0f\u540d\u79f0\u306f\u3057\u3089\u306a\u3044\u3002\u6570\u5024\u3092\u6271\u3046\u5834\u5408\u306fstd::sort\u3088\u308a\u901f\u3044\u3053\u3068\u304c\u591a\u3044\u3002\n\n``` cpp\ntemplate< class RandomIter >\nvoid quick_insertion_sort(RandomIter first, RandomIter last)\n{\n  _q_sort(first, last);\n  insertion_sort(first, last); // \u4e0a\u306e\u3084\u3064\n}\n```\n\n# \u30c6\u30b9\u30c8\u7528\u306e\u30b3\u30fc\u30c9\n\u3053\u3046\u3044\u3046\u306e\u3092\u66f8\u304f\u3068\u7c21\u5358\u306b\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3002\n\u30b9\u30c8\u30c3\u30d7\u30a6\u30a9\u30c3\u30c1\u30af\u30e9\u30b9\u3092\u66f8\u304f\u3068\u6642\u9593\u8a08\u6e2c\u3082\u697d\u3002\n\n``` cpp\n#include <iostream>\n#include <iterator>\n#include <random>\n\nint main()\n{\n\tstd::vector< int > vec;\n\tstd::random_device rd;\n\tstd::mt19937 mt(rd());\n\tstd::generate_n(std::back_inserter(vec), 10, mt);\n\t\n\tquick_sort(begin(vec), end(vec));\n\t\n\tstd::copy(begin(vec), end(vec),\n\t\tstd::ostream_iterator< int >(std::cout, \"\\n\"));\n}\n```\n\n# \u304a\u308f\u308a\u306b\n\u30bd\u30fc\u30c8\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u304c\u3001\u6bd4\u8f03\u30bd\u30fc\u30c8\u306e\u4e00\u90e8\u3060\u3051\u3092\u6271\u3044\u307e\u3057\u305f\u3002\n\u624b\u5143\u306e\u30b3\u30fc\u30c9\u3092\u76f4\u3057\u306a\u304c\u3089\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u306e\u3067\u3001\u3046\u3054\u304b\u306d\u30fc\u305e\u3068\u304b\u9593\u9055\u3063\u3066\u308b\u3088\u3068\u304b\u3042\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n", "tags": ["C++", "C++11", "STL"]}