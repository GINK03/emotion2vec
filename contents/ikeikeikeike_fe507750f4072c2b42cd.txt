{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306f Elixir Advent Calendar 2016 - Qiita \u306e 23 \u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nAdvent Calender\u521d\u53c2\u52a0\u3067\u3059\u3002\u6587\u7ae0\u66f8\u304f\u306e\u5927\u5909\u8f9b\u3044\u3067\u3059\u3002\n\u3055\u3066\u3001\u308f\u305f\u3057\u306fElixir\u3092\u66f8\u304f\u3053\u3068\u304c\u591a\u304f\u3001\u3088\u304f\u3069\u3046\u3059\u308c\u3070Elixir\u3063\u307d\u304f\u66f8\u3051\u308b\u306e\u304b\u306a\u3068\u601d\u3044\u8272\u3005\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u8aad\u3093\u3067\u306f\u767a\u898b\u3001\u8aad\u3093\u3067\u306f\u767a\u898b\u306e\u7e70\u308a\u8fd4\u3057\u3092\u3057\u3066\u3044\u308b\u6642\u671f\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u305d\u3093\u306a\u8a66\u884c\u932f\u8aa4\u306e\u4e2d\u898b\u3064\u3051\u305f\u3088\u304f\u3084\u308b\u66f8\u304d\u65b9\u3001Elixir\u306e\u6a5f\u80fd\u306e\u5c0f\u30cd\u30bf\u306a\u3069\u3092\u79c1\u306e\u5fa9\u7fd2\u3082\u517c\u306d\u3066\u3054\u7d39\u4ecb\u3067\u304d\u308c\u3070\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u7d39\u4ecb\u3059\u308b\u4e2d\u306b\u306f\u30b3\u30fc\u30c9\u306e\u826f\u3057\u60aa\u3057\u3067\u60aa\u3044\u90e8\u5206\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u305d\u3061\u3089\u306e\u8a55\u4fa1\u306f\u307f\u306a\u3055\u3093\u306b\u3057\u3066\u3082\u3089\u3048\u308c\u3070\u5e78\u3044\u3067\u3059(\u3059\u307f\u307e\u305b\u3093)\u3002\n\nMap & Structs\nKeyword lists\nAnonymous functions\nKernel in pipeline\nComprehension\nDomain Specific Language(DSL)\nBuilt-in Protocol\nLinter\n\n\u4ee5\u4e0b\u3001\u4e00\u3064\u305a\u3064\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nMap & Structs\n\u307e\u305a\u57fa\u672c\u7684\u306a\u3068\u3053\u308d\u304b\u3089\u3002\nElixir\u306f\u95a2\u6570\u578b\u8a00\u8a9e\u306a\u306e\u3067\u72b6\u614b\u3092Module\u5185\u3067\u52d5\u7684\u306b\u4fdd\u6301\u3001\u6271\u3046\u4e8b\u304c\u3067\u304d\u307e\u305b\u3093\u30021\n\u3067\u3059\u306e\u3067\u3088\u304f\u72b6\u614b\u3092\u30b3\u30fc\u30c9\u5185\u3067\u5f15\u304d\u56de\u3057\u3066\u6271\u3063\u305f\u308a\u3057\u307e\u30592 \u3001\u3053\u3093\u306a\u98a8\u306b\u3002\n\n\u5168\u3066\u306e\u95a2\u6570\u306bPattern Matching\u3082Guard\u3082\u5168\u304f\u306a\u3044\u72b6\u614b\n\ndefmodule Response do\n  defstruct [:response, :results, :records]\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def results(st) do\n    ...\n\n    %{st | results: results}\n  end\n\n  def records(st) do\n    ...\n\n    %{st | records: records}\n  end\nend\n\nresponse = %Response{response: [%{}, %{} ...]}\n\nresponse\n|> Response.results\n|> Response.records\n\n\u3053\u308c\u3060\u3068\u4f55\u3067\u3082\u901a\u3057\u3061\u3083\u3063\u3066\u554f\u984c\u304c\u3042\u308b\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u3001\u5c11\u3057\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n\nresults, records \u306f %Response{} \u306e\u307f\u901a\u3057\u307e\u3059\n\ndefmodule Response do\n  defstruct [:response, :results, :records]\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def results(%__MODULE__{} = st) do\n    ...\n\n    %{st | results: results}\n  end\n\n  def records(%__MODULE__{} = st) do\n    ...\n\n    %{st | records: records}\n  end\nend\n\n\u3082\u3046\u5c11\u3057\u67d4\u8edf\u306b\u3001struct \u3092\u901a\u3057\u305f\u3044\u5834\u5408\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\n\nstruct\u3092\u751f\u6210\u3059\u308b\u3068\u6697\u9ed9\u7684\u306b__struct__\u304cstruct\u306efield\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\n\n__struct__\u306b\u306fResponse Module\u304c\u5165\u308a\u307e\u3059\n\ndefmodule Response do\n  defstruct [:response, :results, :records]\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def results(%{__struct__: _} = st) do\n    ...\n\n    %{st | results: results}\n  end\n\n  def records(%{__struct__: _} = st) do\n    ...\n\n    %{st | records: records}\n  end\nend\n\n\u3082\u3063\u3068\u67d4\u8edf\u306b\u3001struct, map \u3092\u901a\u3057\u305f\u3044\u5834\u5408\u306f\n\nKeyword lists\u306a\u3069\u306f\u5f3e\u304b\u308c\u308b\nresults, records field\u304c\u7121\u3044\u3068\u5f3e\u304b\u308c\u308b\n\ndefmodule Response do\n  defstruct [:response, :results, :records]\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def results(%{results: _results} = st) do\n    ...\n\n    %{st | results: results}\n  end\n\n  def records(%{records: _records} = st) do\n    ...\n\n    %{st | records: records}\n  end\nend\n\n\u8272\u3005\u5fdc\u7528\u304c\u304d\u304d\u307e\u3059\u306d\n\nKeyword lists\n\u3053\u3061\u3089\u3082\u57fa\u672c\u3067\u3059\u3002 \u4ee5\u4e0b\u306e\u4f8b\u3067\u306fkey1\u304c\u53d6\u308a\u305f\u3044\u3067\u3059\u3002\n\u3057\u304b\u3057Keyword lists\u306f\u8981\u7d20\u5168\u4f53\u304c\u307f\u3089\u308c\u308b\u306e\u3067\u3053\u308c\u3067\u306f\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\ndef do_something([key1: key1]), do: key1\n\nresource = [key1: 1, key2: 2, key3: 3]\nIO.inspect AdventCalender.do_something(resource)\n# (FunctionClauseError) no function clause matching in AdventCalender.do_something/1\n\n\u8981\u7d20\u5168\u3066\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u305b\u3093\u304c\u3001\u9762\u5012\u304f\u3055\u304f\u3066\u3082\u3046\u7121\u7406\u3067\u3059\ndef do_something([key1: key1]), do: key1\ndef do_something([key1: key1, key2: _]), do: key1\ndef do_something([key1: key1, key2: _, key3: ]), do: key1\n\nresource = [key1: 1, key2: 2, key3: 3]\nIO.inspect AdventCalender.do_something(resource)\n# 1\n\n\u30ea\u30b9\u30c8\u306ePattern Matching\u3067\u3059\u3063\u304d\u308a\u3057\u307e\u3059\ndef do_something([{:key1, key1}| _]), do: key1\n\n\u307e\u305f\u3001key2, key3\u304c\u53d6\u308a\u305f\u3044\u3068\u304d\u518d\u5e30\u3092\u3057\u3066\u5024\u3092\u53d6\u308a\u51fa\u3059\u65b9\u6cd5\u3082\u8003\u3048\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u7121\u7406\u305b\u305a\u304a\u3068\u306a\u3057\u304f Keyword.get/2 \u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u5024\u3060\u3051\u3092\u6e21\u3059\u304b\u3001Keyword lists\u3092\u4f7f\u7528\u3057\u306a\u3044\u3068\u3044\u3046\u9078\u629e\u80a2\u304c\u5fc5\u8981\u306a\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nAnonymous functions\n\u7121\u540d\u95a2\u6570\u306f\u8272\u3005\u306a\u65b9\u6cd5\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\nPartial Application of Function, Name/Arity\n\u95a2\u6570\u306e\u90e8\u5206\u9069\u7528, Name/Arity\u8a18\u6cd5\u3092\u4f7f\u7528\u3059\u308b\u3068\u7c21\u7565\u306a\u5f62\u3067\u7121\u540d\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u95a2\u6570\u306fcapture operator\u306e&\u3067\u675f\u7e1b\u3067\u304d\u307e\u3059\u3002\niex(1)> fun1 = &Map.get/2       # Name/Arity\n&Map.get/2\n\niex(2)> fun2 = &Map.get &1, &2  # Partial Application\n&Map.get/2\n\niex(3)> fun3 = & &1[&2]\n&Access.get/2\n\niex(4)> fun1 === fun2\ntrue\n\niex(5)> fun2 === fun3\nfalse\n\niex(6)> fun1.(%{key1: 1}, :key1)\n1\n\n\u3053\u306e\u6027\u8cea\u3092\u5229\u7528\u3059\u308b\u3068\n\u3053\u306e\u5f62\u306e\u5b9a\u7fa9\u304c\niex(1)> Enum.map 0..5, fn num -> is_integer num end\n[true, true, true, true, true, true]\n\n\u3053\u3046\u306a\u3063\u3066\n(Partial Application)\niex(2)> Enum.map 0..5, &is_integer &1\n[true, true, true, true, true, true]\n\n\u3053\u3046\u306b\u3082\u306a\u308a\u307e\u3059\n(Name/Arity)\niex(3)> Enum.map 0..5, &is_integer/1\n[true, true, true, true, true, true]\n\n\n\u5fdc\u7528\u3059\u308b\u3068\n\u3042\u307e\u308a\u610f\u5473\u306e\u306a\u3044\u4f8b\u3067\u3059\u304c\ndefmodule Selector do\n  def selector(enumerable) do\n    Enum.random enumerable\n  end\n\n  def choice(enumerable, selector \\\\ &selector/1) do\n    selector.(enumerable)\n  end\nend\n\niex(1)> Selector.choice 0..10\n3\n\niex(2)> Selector.choice [0, 0, 1], &Enum.uniq/1\n[0, 1]\n\n\u3053\u306e\u3088\u3046\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fRandom Choice, \u5f15\u6570\u306bselector\u95a2\u6570\u3092\u6e21\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u632f\u308b\u821e\u3044\u3092\u5909\u66f4\u3067\u304d\u308b\u95a2\u6570\u306b\u306a\u308a\u307e\u3057\u305f\n\ncase\u6587\u306e\u7701\u7565\n\u7121\u540d\u95a2\u6570\u306ePattern Matching\u3092\u4f7f\u7528\u3059\u308b\u3068case\u6587\u3092\u7701\u7565\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u304c\nEnum.map enumable, fn element ->\n  case element do\n    {left, right} ->\n      \"#{[left, right]}\"\n    elm when is_atom(elm) ->\n      \"#{elm}\"\n    elm when is_number(elm) ->\n      \"#{elm}\"\n    num ->\n      num\n  end\nend\n\n\u3053\u3046\u306a\u308a\u307e\u3059\nEnum.map enumable, fn\n  {left, right} ->\n    \"#{[left, right]}\"\n  elm when is_atom(elm) ->\n    \"#{elm}\"\n  elm when is_number(elm) ->\n    \"#{elm}\"\n  num ->\n    num\nend\n\n\u30b9\u30c3\u30ad\u30ea\u3057\u307e\u3057\u305f\n\nKernel in pipeline\nElixir\u3067\u666e\u6bb5\u4f7f\u7528\u3059\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u306eMacro,Function\u306fKernel Module\u5185\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306f\u4f7f\u7528\u6642\u306b\u81ea\u52d5\u7684\u306b\u6211\u3005\u306e\u74b0\u5883\u306bImport\u3055\u308c\u307e\u3059\u3002(if, unless\u306a\u3069)\n\u3067\u3059\u306e\u3067Kernel Module\u7d4c\u7531\u3067\u305d\u308c\u3089\u306e\u547c\u3073\u51fa\u3057\u3092\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\niex(1)> Kernel.<>(\"My\", \"View\")\n\"MyView\"\n\niex(2)> \"My\" <> \"View\"\n\"MyView\"\n\niex(3)> Kernel.in(1, [10])\nfalse\n\niex(4)> 1 in [10]\nfalse\n\n\u3053\u306eKernel Module\u3092\u5229\u7528\u3059\u308b\u3068Pipeline\u51e6\u7406\u3067\u4e00\u8cab\u3057\u305f\u66f8\u304d\u65b9\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u306f\u3042\u307e\u308a\u826f\u3044\u4f8b\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3067\u3059\u304c\u3002\u3002\n\u3053\u308c\u304c\nchose =\n  1..100_00\n  |> Enum.reduce(&+/2)\n\nIO.inspect chose + 100_00\n# 50015000\n\n\u3053\u3046\u306a\u308a\u307e\u3059\n1..100_00\n|> Enum.reduce(&+/2)\n|> Kernel.+(100_00)\n\n\n\u5909\u6570\u306bassign\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u7d20\u6674\u3089\u3057\u3044\u307b\u3069\u5c0f\u30cd\u30bf\u3067\u3059\u3002\n\nComprehension\n\u57fa\u672c\u7684\u306a\u3053\u3068\u3067\u3059\u304c\u30eb\u30fc\u30d7\u51e6\u7406\u30fb\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u51e6\u7406\u30fb\u30de\u30c3\u30d4\u30f3\u30b0\u51e6\u7406\u3092\u540c\u6642\u306b\u3067\u304d\u308b\u5185\u5305\u8868\u8a18\u306f\u3068\u3066\u3082\u30d1\u30ef\u30d5\u30eb\u3067\u3059\u3002\n\u305f\u3068\u3048\u3070\u3042\u308bModule\u304b\u3089\u4efb\u610f\u306e\u5f15\u6570\u306e\u6570\u3092\u3082\u3064\u95a2\u6570\u3092\u62bd\u51fa\u3057\u305f\u3044\u5834\u5408\u3001\u5185\u5305\u8868\u8a18\u3092\u4f7f\u308f\u306a\u3044\u3067\u30c9\u76f4\u7403\u306b\u5b9f\u88c5\u3057\u305f\u3089\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u304b\ndef extract_function(modules, arity) do\n  Enum.reduce modules, [], fn module, acc ->\n    functions =\n      Enum.map(module.__info__(:functions), fn\n        {function, ^arity} -> function\n        _                  -> nil\n      end)\n\n    acc ++ Enum.filter_map(functions, & !!&1, & {module, &1})\n  end\nend\n\nIO.inspect My.extract_function([Enum, Map], 4)\n# [{Enum, :chunk}, {Map, :update}]\n\n\u5185\u5305\u8868\u8a18\u3092\u4f7f\u3046\u3068\nmodules = [Enum, Map]\narity = 4\n\nfor module <- modules,\n    {function, ^arity} <- module.__info__(:functions) do\n\n  {module, function}\nend\n\n\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4f7f\u3048\u308b\u3068\u3053\u308d\u306b\u306f\u7a4d\u6975\u7684\u306b\u4f7f\u3063\u3066\u3044\u304d\u305f\u3044\u3067\u3059\u306d\u3002\n\nDomain Specific Language(DSL)\nElixir\u306b\u6163\u308c\u3066\u304f\u308b\u3068DSL\u3092\u66f8\u304d\u305f\u304f\u306a\u308b\u3068\u304d\u304c\u6765\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u4f8b\u3048\u3070\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30b7\u30f3\u30d7\u30eb\u306aDSL\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\ndefmodule Definition do\n  use Schema\n\n  settings do\n    analysis do\n      analyzer :ngram_analyzer,\n        tokenizer: \"ngram_tokenizer\",\n        char_filter: [\"html_strip\", \"my_iteration_mark\"],\n        filter: [\"lowercase\", \"my_stemmer\", \"cjk_width\"]\n    end\n  end\nend\n\niex(1)> Definition.es_analyses\n{:analyzer, :ngram_analyzer,\n [tokenizer: \"ngram_tokenizer\",\n  char_filter: [\"html_strip\", \"my_iteration_mark\"],\n  filter: [\"lowercase\", \"my_stemmer\", \"cjk_width\"]]}\n\n\u3053\u306eDSL\u306f\u3053\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\nuse Schema \u3092\u3057\u305f\u6642\u306b import Schema \u3055\u308c\u308b\nImport\u306b\u3088\u3063\u3066\u5168\u3066\u306emacro(settings, analysis, analyzer)\u304c\u4f7f\u7528\u53ef\u80fd\u306a\u72b6\u614b\n\ndefmodule Schema do\n  @doc false\n  defmacro __using__(_) do\n    quote do\n      import Schema\n    end\n  end\n\n  defmacro settings([do: block]), do: block\n  defmacro analysis([do: block]), do: block\n  defmacro analyzer(name, opts) do\n    quote do\n      def es_analyses, do: {:analyzer, :\"#{unquote(name)}\", unquote(opts)})\n    end\n  end\nend\n\n\u3053\u308c\u306f analyzer \u304c\u76f4\u63a5\u547c\u3079\u3066\u3057\u307e\u3044\u3001settings, analysis \u304c\u7121\u304f\u3066\u3082\u52d5\u4f5c\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u307e\u305f\u4e88\u671f\u305b\u306c\u64cd\u4f5c\u3092\u9632\u3050\u305f\u3081\u306b\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u306fsettings\u3060\u3051\u89e6\u3089\u305b\u305f\u3044\u3067\u3059\u3002\n\u5c11\u3057\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\nImport\u5bfe\u8c61\u306fsettings/1\u306e\u307f\n\nsettings\u304c\u547c\u3070\u308c\u305f\u6642\u306b\u5168\u3066\u306eMacro\u3092Import\u3001\u305d\u306e\u5f8cBlock\u3092\u5c55\u958b\u3059\u308b\n\ndefmodule Schema do\n  @doc false\n  defmacro __using__(_) do\n    quote do\n      import Schema, only: [settings: 1]\n      Module.register_attribute(__MODULE__, :es_analyses, accumulate: false)\n    end\n  end\n\n  defmacro settings([do: block]) do\n    quote do\n      import Schema\n\n      unquote(block)\n      \"\"\"\n      # unquote(block)\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u6700\u7d42\u7684\u306b\u5c55\u958b\u3055\u308c\u308b\n      #\n      Module.put_attribute __MODULE__, :es_analyses, {\n        :analyzer,\n        :erlang.binary_to_atom(\"#{:ngram_analyzer}\", :utf8),\n        [tokenizer: \"ngram_tokenizer\", char_filter: [\"html_strip\", \"kuromoji_iteration_mark\"], filter: [\"lowercase\", \"kuromoji_stemmer\", \"cjk_width\"]]\n      }\n      \"\"\"\n\n      def es_analyses, do: @es_analyses\n    end\n  end\n\n  # For just imitational function.\n  defmacro analysis([do: block]), do: block\n\n  defmacro analyzer(name, opts) do\n    quote do\n      Module.put_attribute(__MODULE__, :es_analyses, {:analyzer, :\"#{unquote(name)}\", unquote(opts)})\n    end\n  end\nend\n\niex(1)> Definition.es_analyses\n{:analyzer, :ngram_analyzer,\n [tokenizer: \"ngram_tokenizer\",\n  char_filter: [\"html_strip\", \"my_iteration_mark\"],\n  filter: [\"lowercase\", \"my_stemmer\", \"cjk_width\"]]}\n\n\u3053\u308c\u3067analyzer, analysis\u306f\u76f4\u63a5\u3055\u308f\u308c\u306a\u304f\u306a\u308a\u3001\u671b\u3093\u3060\u5f62\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nBuilt-in Protocol\nElixir\u306b\u306f\u3044\u304f\u3064\u304b\u306eBuilt-in protocols\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3001\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u3068Enum\u306e\u95a2\u6570,to_stirng\u306a\u3069\u306b\u72ec\u81ea\u306e\u632f\u308b\u821e\u3044\u3092\u8ffd\u52a0\u3001\u7d71\u5408\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002(\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u8aac\u660e\u306fBlank\u5b9f\u88c5\u3067\u6709\u540d\u306a\u3053\u306e\u30da\u30fc\u30b8\u304c\u8a73\u3057\u3044\u3067\u3059\u3002)\n\u4eca\u56de\u306fBuilt-in Protocol\u306e\u4e2d\u3067\u3088\u304f\u4f7f\u3046\u3067\u3042\u308d\u3046\u3001Collection\u3092\u6271\u3046Enumerable\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u5f53\u521d\u767b\u5834\u3057\u305f\u3001Response Module(Struct)\u3092\u899a\u3048\u3066\u3044\u307e\u3059\u304b\uff1f\u5c11\u3057\u66f8\u304d\u63db\u3048\u3066\u3042\u308a\u307e\u3059\u304c\u3053\u3061\u3089\u3067\u3059\u3002\ndefmodule Response do\n  defstruct response: [], records: []\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def records(st) do\n    %{st | records: st.response}\n  end\nend\n\n\u3053\u306eResponse Module\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nresponse =\n  [%{}, %{}, %{} ...]\n  |> Response.wrap\n  |> Response.records\n\ndata =\n  Enum.map response.records, fn record ->\n    ...\n\n    converted_value\n  end\n\nIO.inspect data\n# [[], [], [] ...]\n\n\u3053\u308c\u81ea\u4f53\u306f\u4f55\u3082\u554f\u984c\u306e\u306a\u3044\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3059\u304c\u3001\u3001\u3001\u3042\u3048\u3066\u3055\u3089\u306bResponse Module\u306b\u6a5f\u80fd\u3092\u4ed8\u3051\u52a0\u3048\u308b\u3001\nEnumerable Protocol\u3092\u4f7f\u7528\u3057\u3066Response Struct\u3092Collection\u3068\u3057\u3066\u6271\u308f\u305b\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u5c11\u3057\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\nenum, map\u306a\u3069\u3067\u51e6\u7406\u3092\u3055\u305b\u305f\u3044\u3060\u3051\u306a\u306e\u3067 count/1, member?/2 \u306f\u5b9f\u88c5\u3057\u3066\u3044\u307e\u305b\u3093\u3002\ndefmodule Response do\n  defstruct response: [], records: []\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def records(st) do\n    %{st | records: st.response}\n  end\n\n  defimpl Enumerable, for: Response do\n    def count(_page), do: {:error, __MODULE__}\n\n    def member?(_page, _value), do: {:error, __MODULE__}\n\n    def reduce(%Response{records: records}, acc, fun) do\n      Enumerable.reduce(records, acc, fun)\n    end\n  end\nend\n\nresponse =\n  [%{}, %{}, %{} ...]\n  |> Response.wrap\n  |> Response.records\n\ndata =\n  Enum.map response, fn record ->\n    ...\n\n    converted_value\n  end\n\nIO.inspect data\n# [[], [], [] ...]\n\nIO.inspect Enumerable.count(response)\n# {:error, Enumerable.Response}\n\nResponse\u306b\u306fEnumerable Protocol\u3092\u5b9f\u88c5\u3057\u3066\u3042\u308b\u306e\u3067\u3001\u76f4\u63a5Collection\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nLinter\nlocal\u95a2\u6570\u306f\u62ec\u5f27\u3092\u4ed8\u3051\u307e\u3057\u3087\u3046\u3068\u304b\u3001\u95a2\u6570\u306e\u5f15\u6570\u306f5\u500b\u307e\u3067\u304c\u671b\u307e\u3057\u3044\u3068\u304b\n\u305d\u3046\u3044\u3046\u7d30\u304b\u3044\u3068\u3053\u308d\u306fLinter\u306b\u4efb\u305b\u3061\u3083\u3044\u307e\u3057\u3087\u3046\n\u74b0\u5883:\n- https://github.com/rrrene/credo\n- https://github.com/vim/vim\n- https://github.com/neomake/neomake\n\nNote: Vim\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3088\u304f\u5206\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u3088\u308a\u826f\u304f\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\n\nlet g:neomake_elixir_mycredo_maker = {\n      \\ 'exe': 'mixup',\n      \\ 'args': ['credo', '--format=flycheck', '--strict'],\n      \\ 'errorformat':\n          \\ '%E%f:%l:%c: %m,' .\n          \\ '%E%f:%l: %m'\n      \\ }\nlet g:neomake_elixir_mymix_maker = {\n      \\ 'exe' : 'mixup',\n      \\ 'args': ['compile', '--warnings-as-errors'],\n      \\ 'errorformat':\n        \\ '** %s %f:%l: %m,'.\n        \\ '%f:%l: warning: %m'\n      \\ }\n\nlet g:neomake_elixir_enabled_makers = ['mycredo', 'mymix', 'elixir']\n\nfunction! Mixmeansnothing()\n    if !exists('t:cwd')\n       let t:cwd = system(\"mixup pwd\")\n    endif\n\n    execute 'cd' t:cwd\nendfunction\n\nautocmd! BufWritePre * call Mixmeansnothing()\nautocmd! BufWritePost * Neomake\n\n\nmixup\u90e8\u5206\n#!/usr/bin/env zsh\n\nfindup() {\n    FILE=$1\n    while [ ! -e \"${FILE}\" ]; do\n        if [ \"$(pwd)\" = \"/\" ]; then\n            return\n        fi\n        cd ..\n    done\n    echo \"$(pwd)\"\n}\n\n# usage example\nMIX=mix.exs\nPDIR=$(findup ${MIX})\n\nif [ \"$1\" = \"pwd\" ]; then\n    echo $PDIR\n    exit 0\nfi\n\nif [ \"${PDIR}/${MIX}\" != \"/${MIX}\" ]; then\n    # echo \"(cd ${PDIR}; mix $@)\"\n    cd ${PDIR}; mix $@\n    exit 0\nfi\n\necho \"couldn't find file ${MIX}\"\nexit 1\n\n\n\n\u304a\u308f\u308a\u306b\n\u7c21\u5358\u3067\u3059\u304c\u4ee5\u4e0a\u3067\u3059\u3001\u8aad\u3093\u3067\u304f\u3060\u3055\u3063\u3066\u672c\u5f53\u306b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\u6765\u5e74\u307e\u3067\u6587\u7ae0\u306f\u66f8\u3051\u307e\u305b\u3093\u3002\n\n\n\n\nAgent\u306a\u3069\u3092\u4f7f\u7528\u3059\u308c\u3070\u4f3c\u305f\u3088\u3046\u306a\u4e8b\u3092\u5b9f\u73fe\u51fa\u6765\u307e\u3059\u00a0\u21a9\n\n\nEcto, Plug\u306a\u3069\u304c\u4ee3\u8868\u4f8b\u00a0\u21a9\n\n\n\n# \u306f\u3058\u3081\u306b\n\n\u3053\u306e\u8a18\u4e8b\u306f [Elixir Advent Calendar 2016](http://qiita.com/advent-calendar/2016/elixir) - Qiita \u306e 23 \u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n###### Advent Calender\u521d\u53c2\u52a0\u3067\u3059\u3002\u6587\u7ae0\u66f8\u304f\u306e\u5927\u5909\u8f9b\u3044\u3067\u3059\u3002\n\n\u3055\u3066\u3001\u308f\u305f\u3057\u306fElixir\u3092\u66f8\u304f\u3053\u3068\u304c\u591a\u304f\u3001\u3088\u304f\u3069\u3046\u3059\u308c\u3070Elixir\u3063\u307d\u304f\u66f8\u3051\u308b\u306e\u304b\u306a\u3068\u601d\u3044\u8272\u3005\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u8aad\u3093\u3067\u306f\u767a\u898b\u3001\u8aad\u3093\u3067\u306f\u767a\u898b\u306e\u7e70\u308a\u8fd4\u3057\u3092\u3057\u3066\u3044\u308b\u6642\u671f\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u305d\u3093\u306a\u8a66\u884c\u932f\u8aa4\u306e\u4e2d\u898b\u3064\u3051\u305f\u3088\u304f\u3084\u308b\u66f8\u304d\u65b9\u3001Elixir\u306e\u6a5f\u80fd\u306e\u5c0f\u30cd\u30bf\u306a\u3069\u3092\u79c1\u306e\u5fa9\u7fd2\u3082\u517c\u306d\u3066\u3054\u7d39\u4ecb\u3067\u304d\u308c\u3070\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\u7d39\u4ecb\u3059\u308b\u4e2d\u306b\u306f\u30b3\u30fc\u30c9\u306e\u826f\u3057\u60aa\u3057\u3067\u60aa\u3044\u90e8\u5206\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u305d\u3061\u3089\u306e\u8a55\u4fa1\u306f\u307f\u306a\u3055\u3093\u306b\u3057\u3066\u3082\u3089\u3048\u308c\u3070\u5e78\u3044\u3067\u3059(\u3059\u307f\u307e\u305b\u3093)\u3002\n\n- Map & Structs\n- Keyword lists\n- Anonymous functions\n- Kernel in pipeline\n- Comprehension\n- Domain Specific Language(DSL)\n- Built-in Protocol\n- Linter\n\n\u4ee5\u4e0b\u3001\u4e00\u3064\u305a\u3064\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n# Map & Structs\n\n\u307e\u305a\u57fa\u672c\u7684\u306a\u3068\u3053\u308d\u304b\u3089\u3002\n\nElixir\u306f\u95a2\u6570\u578b\u8a00\u8a9e\u306a\u306e\u3067\u72b6\u614b\u3092Module\u5185\u3067\u52d5\u7684\u306b\u4fdd\u6301\u3001\u6271\u3046\u4e8b\u304c\u3067\u304d\u307e\u305b\u3093\u3002[^1]\n\n\u3067\u3059\u306e\u3067\u3088\u304f\u72b6\u614b\u3092\u30b3\u30fc\u30c9\u5185\u3067\u5f15\u304d\u56de\u3057\u3066\u6271\u3063\u305f\u308a\u3057\u307e\u3059[^2] \u3001\u3053\u3093\u306a\u98a8\u306b\u3002\n\n\n- \u5168\u3066\u306e\u95a2\u6570\u306bPattern Matching\u3082Guard\u3082\u5168\u304f\u306a\u3044\u72b6\u614b\n\n```elixir\ndefmodule Response do\n  defstruct [:response, :results, :records]\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def results(st) do\n    ...\n\n    %{st | results: results}\n  end\n\n  def records(st) do\n    ...\n\n    %{st | records: records}\n  end\nend\n\nresponse = %Response{response: [%{}, %{} ...]}\n\nresponse\n|> Response.results\n|> Response.records\n```\n\n\u3053\u308c\u3060\u3068\u4f55\u3067\u3082\u901a\u3057\u3061\u3083\u3063\u3066\u554f\u984c\u304c\u3042\u308b\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u3001\u5c11\u3057\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n- `results`, `records` \u306f `%Response{}` \u306e\u307f\u901a\u3057\u307e\u3059\n\n```elixir\ndefmodule Response do\n  defstruct [:response, :results, :records]\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def results(%__MODULE__{} = st) do\n    ...\n\n    %{st | results: results}\n  end\n\n  def records(%__MODULE__{} = st) do\n    ...\n\n    %{st | records: records}\n  end\nend\n```\n\n\u3082\u3046\u5c11\u3057\u67d4\u8edf\u306b\u3001`struct` \u3092\u901a\u3057\u305f\u3044\u5834\u5408\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\n\n- struct\u3092\u751f\u6210\u3059\u308b\u3068\u6697\u9ed9\u7684\u306b`__struct__`\u304cstruct\u306efield\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\n- `__struct__`\u306b\u306f`Response` Module\u304c\u5165\u308a\u307e\u3059\n\n```elixir\ndefmodule Response do\n  defstruct [:response, :results, :records]\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def results(%{__struct__: _} = st) do\n    ...\n\n    %{st | results: results}\n  end\n\n  def records(%{__struct__: _} = st) do\n    ...\n\n    %{st | records: records}\n  end\nend\n```\n\n\u3082\u3063\u3068\u67d4\u8edf\u306b\u3001`struct`, `map` \u3092\u901a\u3057\u305f\u3044\u5834\u5408\u306f\n\n- Keyword lists\u306a\u3069\u306f\u5f3e\u304b\u308c\u308b\n- results, records field\u304c\u7121\u3044\u3068\u5f3e\u304b\u308c\u308b\n\n```elixir\ndefmodule Response do\n  defstruct [:response, :results, :records]\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def results(%{results: _results} = st) do\n    ...\n\n    %{st | results: results}\n  end\n\n  def records(%{records: _records} = st) do\n    ...\n\n    %{st | records: records}\n  end\nend\n```\n\n\u8272\u3005\u5fdc\u7528\u304c\u304d\u304d\u307e\u3059\u306d\n\n\n# Keyword lists\n\n\u3053\u3061\u3089\u3082\u57fa\u672c\u3067\u3059\u3002 \u4ee5\u4e0b\u306e\u4f8b\u3067\u306f`key1`\u304c\u53d6\u308a\u305f\u3044\u3067\u3059\u3002\n\n\u3057\u304b\u3057Keyword lists\u306f\u8981\u7d20\u5168\u4f53\u304c\u307f\u3089\u308c\u308b\u306e\u3067\u3053\u308c\u3067\u306f\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\n\n```elixir\ndef do_something([key1: key1]), do: key1\n\nresource = [key1: 1, key2: 2, key3: 3]\nIO.inspect AdventCalender.do_something(resource)\n# (FunctionClauseError) no function clause matching in AdventCalender.do_something/1\n```\n\n\u8981\u7d20\u5168\u3066\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u305b\u3093\u304c\u3001\u9762\u5012\u304f\u3055\u304f\u3066\u3082\u3046\u7121\u7406\u3067\u3059\n\n```elixir\ndef do_something([key1: key1]), do: key1\ndef do_something([key1: key1, key2: _]), do: key1\ndef do_something([key1: key1, key2: _, key3: ]), do: key1\n\nresource = [key1: 1, key2: 2, key3: 3]\nIO.inspect AdventCalender.do_something(resource)\n# 1\n```\n\n\u30ea\u30b9\u30c8\u306ePattern Matching\u3067\u3059\u3063\u304d\u308a\u3057\u307e\u3059\n\n```elixir\ndef do_something([{:key1, key1}| _]), do: key1\n```\n\n\u307e\u305f\u3001key2, key3\u304c\u53d6\u308a\u305f\u3044\u3068\u304d\u518d\u5e30\u3092\u3057\u3066\u5024\u3092\u53d6\u308a\u51fa\u3059\u65b9\u6cd5\u3082\u8003\u3048\u3089\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u7121\u7406\u305b\u305a\u304a\u3068\u306a\u3057\u304f `Keyword.get/2` \u306a\u3069\u3092\u4f7f\u7528\u3057\u3066\u5024\u3060\u3051\u3092\u6e21\u3059\u304b\u3001Keyword lists\u3092\u4f7f\u7528\u3057\u306a\u3044\u3068\u3044\u3046\u9078\u629e\u80a2\u304c\u5fc5\u8981\u306a\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n# Anonymous functions\n\n\u7121\u540d\u95a2\u6570\u306f\u8272\u3005\u306a\u65b9\u6cd5\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n### Partial Application of Function, Name/Arity\n\n\u95a2\u6570\u306e\u90e8\u5206\u9069\u7528, Name/Arity\u8a18\u6cd5\u3092\u4f7f\u7528\u3059\u308b\u3068\u7c21\u7565\u306a\u5f62\u3067\u7121\u540d\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\n\u307e\u305f\u95a2\u6570\u306fcapture operator\u306e`&`\u3067\u675f\u7e1b\u3067\u304d\u307e\u3059\u3002\n\n```elixir\niex(1)> fun1 = &Map.get/2       # Name/Arity\n&Map.get/2\n\niex(2)> fun2 = &Map.get &1, &2  # Partial Application\n&Map.get/2\n\niex(3)> fun3 = & &1[&2]\n&Access.get/2\n\niex(4)> fun1 === fun2\ntrue\n\niex(5)> fun2 === fun3\nfalse\n\niex(6)> fun1.(%{key1: 1}, :key1)\n1\n```\n\n\u3053\u306e\u6027\u8cea\u3092\u5229\u7528\u3059\u308b\u3068\n\n\n\u3053\u306e\u5f62\u306e\u5b9a\u7fa9\u304c\n\n```elixir\niex(1)> Enum.map 0..5, fn num -> is_integer num end\n[true, true, true, true, true, true]\n```\n\n\u3053\u3046\u306a\u3063\u3066\n(Partial Application)\n\n```elixir\niex(2)> Enum.map 0..5, &is_integer &1\n[true, true, true, true, true, true]\n```\n\n\u3053\u3046\u306b\u3082\u306a\u308a\u307e\u3059\n(Name/Arity)\n\n```elixir\niex(3)> Enum.map 0..5, &is_integer/1\n[true, true, true, true, true, true]\n```\n\n\n### \u5fdc\u7528\u3059\u308b\u3068\n\n\u3042\u307e\u308a\u610f\u5473\u306e\u306a\u3044\u4f8b\u3067\u3059\u304c\n\n```elixir\ndefmodule Selector do\n  def selector(enumerable) do\n    Enum.random enumerable\n  end\n\n  def choice(enumerable, selector \\\\ &selector/1) do\n    selector.(enumerable)\n  end\nend\n\niex(1)> Selector.choice 0..10\n3\n\niex(2)> Selector.choice [0, 0, 1], &Enum.uniq/1\n[0, 1]\n```\n\n\u3053\u306e\u3088\u3046\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fRandom Choice, \u5f15\u6570\u306bselector\u95a2\u6570\u3092\u6e21\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u632f\u308b\u821e\u3044\u3092\u5909\u66f4\u3067\u304d\u308b\u95a2\u6570\u306b\u306a\u308a\u307e\u3057\u305f\n\n### case\u6587\u306e\u7701\u7565\n\n\u7121\u540d\u95a2\u6570\u306ePattern Matching\u3092\u4f7f\u7528\u3059\u308b\u3068case\u6587\u3092\u7701\u7565\u3067\u304d\u307e\u3059\u3002\n\n\u3053\u308c\u304c\n\n```elixir\nEnum.map enumable, fn element ->\n  case element do\n    {left, right} ->\n      \"#{[left, right]}\"\n    elm when is_atom(elm) ->\n      \"#{elm}\"\n    elm when is_number(elm) ->\n      \"#{elm}\"\n    num ->\n      num\n  end\nend\n```\n\n\u3053\u3046\u306a\u308a\u307e\u3059\n\n```elixir\nEnum.map enumable, fn\n  {left, right} ->\n    \"#{[left, right]}\"\n  elm when is_atom(elm) ->\n    \"#{elm}\"\n  elm when is_number(elm) ->\n    \"#{elm}\"\n  num ->\n    num\nend\n```\n\u30b9\u30c3\u30ad\u30ea\u3057\u307e\u3057\u305f\n\n\n# Kernel in pipeline\n\nElixir\u3067\u666e\u6bb5\u4f7f\u7528\u3059\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u306eMacro,Function\u306fKernel Module\u5185\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306f\u4f7f\u7528\u6642\u306b\u81ea\u52d5\u7684\u306b\u6211\u3005\u306e\u74b0\u5883\u306bImport\u3055\u308c\u307e\u3059\u3002(if, unless\u306a\u3069)\n\n\u3067\u3059\u306e\u3067Kernel Module\u7d4c\u7531\u3067\u305d\u308c\u3089\u306e\u547c\u3073\u51fa\u3057\u3092\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n```elixir\niex(1)> Kernel.<>(\"My\", \"View\")\n\"MyView\"\n\niex(2)> \"My\" <> \"View\"\n\"MyView\"\n\niex(3)> Kernel.in(1, [10])\nfalse\n\niex(4)> 1 in [10]\nfalse\n```\n\n\u3053\u306eKernel Module\u3092\u5229\u7528\u3059\u308b\u3068Pipeline\u51e6\u7406\u3067\u4e00\u8cab\u3057\u305f\u66f8\u304d\u65b9\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u306f\u3042\u307e\u308a\u826f\u3044\u4f8b\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u3067\u3059\u304c\u3002\u3002\n\n\u3053\u308c\u304c\n\n```elixir\nchose =\n  1..100_00\n  |> Enum.reduce(&+/2)\n\nIO.inspect chose + 100_00\n# 50015000\n```\n\n\u3053\u3046\u306a\u308a\u307e\u3059\n\n```elixir\n1..100_00\n|> Enum.reduce(&+/2)\n|> Kernel.+(100_00)\n\n```\n\u5909\u6570\u306bassign\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u7d20\u6674\u3089\u3057\u3044\u307b\u3069\u5c0f\u30cd\u30bf\u3067\u3059\u3002\n\n\n# Comprehension\n\n\u57fa\u672c\u7684\u306a\u3053\u3068\u3067\u3059\u304c\u30eb\u30fc\u30d7\u51e6\u7406\u30fb\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u51e6\u7406\u30fb\u30de\u30c3\u30d4\u30f3\u30b0\u51e6\u7406\u3092\u540c\u6642\u306b\u3067\u304d\u308b\u5185\u5305\u8868\u8a18\u306f\u3068\u3066\u3082\u30d1\u30ef\u30d5\u30eb\u3067\u3059\u3002\n\n\u305f\u3068\u3048\u3070\u3042\u308bModule\u304b\u3089\u4efb\u610f\u306e\u5f15\u6570\u306e\u6570\u3092\u3082\u3064\u95a2\u6570\u3092\u62bd\u51fa\u3057\u305f\u3044\u5834\u5408\u3001\u5185\u5305\u8868\u8a18\u3092\u4f7f\u308f\u306a\u3044\u3067\u30c9\u76f4\u7403\u306b\u5b9f\u88c5\u3057\u305f\u3089\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u304b\n\n```elixir\ndef extract_function(modules, arity) do\n  Enum.reduce modules, [], fn module, acc ->\n    functions =\n      Enum.map(module.__info__(:functions), fn\n        {function, ^arity} -> function\n        _                  -> nil\n      end)\n\n    acc ++ Enum.filter_map(functions, & !!&1, & {module, &1})\n  end\nend\n\nIO.inspect My.extract_function([Enum, Map], 4)\n# [{Enum, :chunk}, {Map, :update}]\n```\n\n\u5185\u5305\u8868\u8a18\u3092\u4f7f\u3046\u3068\n\n```elixir\nmodules = [Enum, Map]\narity = 4\n\nfor module <- modules,\n    {function, ^arity} <- module.__info__(:functions) do\n\n  {module, function}\nend\n```\n\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4f7f\u3048\u308b\u3068\u3053\u308d\u306b\u306f\u7a4d\u6975\u7684\u306b\u4f7f\u3063\u3066\u3044\u304d\u305f\u3044\u3067\u3059\u306d\u3002\n\n# Domain Specific Language(DSL)\n\nElixir\u306b\u6163\u308c\u3066\u304f\u308b\u3068DSL\u3092\u66f8\u304d\u305f\u304f\u306a\u308b\u3068\u304d\u304c\u6765\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u4f8b\u3048\u3070\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30b7\u30f3\u30d7\u30eb\u306aDSL\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\n```elixir\ndefmodule Definition do\n  use Schema\n\n  settings do\n    analysis do\n      analyzer :ngram_analyzer,\n        tokenizer: \"ngram_tokenizer\",\n        char_filter: [\"html_strip\", \"my_iteration_mark\"],\n        filter: [\"lowercase\", \"my_stemmer\", \"cjk_width\"]\n    end\n  end\nend\n\niex(1)> Definition.es_analyses\n{:analyzer, :ngram_analyzer,\n [tokenizer: \"ngram_tokenizer\",\n  char_filter: [\"html_strip\", \"my_iteration_mark\"],\n  filter: [\"lowercase\", \"my_stemmer\", \"cjk_width\"]]}\n```\n\n\u3053\u306eDSL\u306f\u3053\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n- `use Schema` \u3092\u3057\u305f\u6642\u306b `import Schema` \u3055\u308c\u308b\n- Import\u306b\u3088\u3063\u3066\u5168\u3066\u306emacro(`settings`, `analysis`, `analyzer`)\u304c\u4f7f\u7528\u53ef\u80fd\u306a\u72b6\u614b\n\n```elixir\ndefmodule Schema do\n  @doc false\n  defmacro __using__(_) do\n    quote do\n      import Schema\n    end\n  end\n\n  defmacro settings([do: block]), do: block\n  defmacro analysis([do: block]), do: block\n  defmacro analyzer(name, opts) do\n    quote do\n      def es_analyses, do: {:analyzer, :\"#{unquote(name)}\", unquote(opts)})\n    end\n  end\nend\n```\n\n\u3053\u308c\u306f `analyzer` \u304c\u76f4\u63a5\u547c\u3079\u3066\u3057\u307e\u3044\u3001`settings`, `analysis` \u304c\u7121\u304f\u3066\u3082\u52d5\u4f5c\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u307e\u305f\u4e88\u671f\u305b\u306c\u64cd\u4f5c\u3092\u9632\u3050\u305f\u3081\u306b\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u306f`settings`\u3060\u3051\u89e6\u3089\u305b\u305f\u3044\u3067\u3059\u3002\n\n\u5c11\u3057\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n\n- Import\u5bfe\u8c61\u306f`settings/1`\u306e\u307f\n- `settings`\u304c\u547c\u3070\u308c\u305f\u6642\u306b\u5168\u3066\u306eMacro\u3092Import\u3001\u305d\u306e\u5f8cBlock\u3092\u5c55\u958b\u3059\u308b\n\n```elixir\ndefmodule Schema do\n  @doc false\n  defmacro __using__(_) do\n    quote do\n      import Schema, only: [settings: 1]\n      Module.register_attribute(__MODULE__, :es_analyses, accumulate: false)\n    end\n  end\n\n  defmacro settings([do: block]) do\n    quote do\n      import Schema\n\n      unquote(block)\n      \"\"\"\n      # unquote(block)\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u6700\u7d42\u7684\u306b\u5c55\u958b\u3055\u308c\u308b\n      #\n      Module.put_attribute __MODULE__, :es_analyses, {\n        :analyzer,\n        :erlang.binary_to_atom(\"#{:ngram_analyzer}\", :utf8),\n        [tokenizer: \"ngram_tokenizer\", char_filter: [\"html_strip\", \"kuromoji_iteration_mark\"], filter: [\"lowercase\", \"kuromoji_stemmer\", \"cjk_width\"]]\n      }\n      \"\"\"\n\n      def es_analyses, do: @es_analyses\n    end\n  end\n\n  # For just imitational function.\n  defmacro analysis([do: block]), do: block\n\n  defmacro analyzer(name, opts) do\n    quote do\n      Module.put_attribute(__MODULE__, :es_analyses, {:analyzer, :\"#{unquote(name)}\", unquote(opts)})\n    end\n  end\nend\n\niex(1)> Definition.es_analyses\n{:analyzer, :ngram_analyzer,\n [tokenizer: \"ngram_tokenizer\",\n  char_filter: [\"html_strip\", \"my_iteration_mark\"],\n  filter: [\"lowercase\", \"my_stemmer\", \"cjk_width\"]]}\n```\n\n\u3053\u308c\u3067`analyzer`, `analysis`\u306f\u76f4\u63a5\u3055\u308f\u308c\u306a\u304f\u306a\u308a\u3001\u671b\u3093\u3060\u5f62\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n# Built-in Protocol\n\nElixir\u306b\u306f\u3044\u304f\u3064\u304b\u306e[Built-in protocols](http://elixir-lang.org/getting-started/protocols.html#built-in-protocols)\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3001\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u3068`Enum`\u306e\u95a2\u6570,`to_stirng`\u306a\u3069\u306b\u72ec\u81ea\u306e\u632f\u308b\u821e\u3044\u3092\u8ffd\u52a0\u3001\u7d71\u5408\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002(\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u8aac\u660e\u306f[Blank](https://hexdocs.pm/elixir/Kernel.html#defprotocol/2-examples)\u5b9f\u88c5\u3067\u6709\u540d\u306a\u3053\u306e\u30da\u30fc\u30b8\u304c\u8a73\u3057\u3044\u3067\u3059\u3002)\n\u4eca\u56de\u306fBuilt-in Protocol\u306e\u4e2d\u3067\u3088\u304f\u4f7f\u3046\u3067\u3042\u308d\u3046\u3001Collection\u3092\u6271\u3046`Enumerable`\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\u5f53\u521d\u767b\u5834\u3057\u305f\u3001Response Module(Struct)\u3092\u899a\u3048\u3066\u3044\u307e\u3059\u304b\uff1f\u5c11\u3057\u66f8\u304d\u63db\u3048\u3066\u3042\u308a\u307e\u3059\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n\n```elixir\ndefmodule Response do\n  defstruct response: [], records: []\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def records(st) do\n    %{st | records: st.response}\n  end\nend\n```\n\n\u3053\u306eResponse Module\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```elixir\nresponse =\n  [%{}, %{}, %{} ...]\n  |> Response.wrap\n  |> Response.records\n\ndata =\n  Enum.map response.records, fn record ->\n    ...\n\n    converted_value\n  end\n\nIO.inspect data\n# [[], [], [] ...]\n```\n\n\n\u3053\u308c\u81ea\u4f53\u306f\u4f55\u3082\u554f\u984c\u306e\u306a\u3044\u30b3\u30fc\u30c9\u306a\u306e\u3067\u3059\u304c\u3001\u3001\u3001\u3042\u3048\u3066\u3055\u3089\u306bResponse Module\u306b\u6a5f\u80fd\u3092\u4ed8\u3051\u52a0\u3048\u308b\u3001\n[Enumerable Protocol](https://hexdocs.pm/elixir/Enumerable.html)\u3092\u4f7f\u7528\u3057\u3066Response Struct\u3092Collection\u3068\u3057\u3066\u6271\u308f\u305b\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5c11\u3057\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n\n###### enum, map\u306a\u3069\u3067\u51e6\u7406\u3092\u3055\u305b\u305f\u3044\u3060\u3051\u306a\u306e\u3067 `count/1`, `member?/2` \u306f\u5b9f\u88c5\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n```elixir\ndefmodule Response do\n  defstruct response: [], records: []\n\n  def wrap(response) do\n    %__MODULE__{response: response}\n  end\n\n  def records(st) do\n    %{st | records: st.response}\n  end\n\n  defimpl Enumerable, for: Response do\n    def count(_page), do: {:error, __MODULE__}\n\n    def member?(_page, _value), do: {:error, __MODULE__}\n\n    def reduce(%Response{records: records}, acc, fun) do\n      Enumerable.reduce(records, acc, fun)\n    end\n  end\nend\n\nresponse =\n  [%{}, %{}, %{} ...]\n  |> Response.wrap\n  |> Response.records\n\ndata =\n  Enum.map response, fn record ->\n    ...\n\n    converted_value\n  end\n\nIO.inspect data\n# [[], [], [] ...]\n\nIO.inspect Enumerable.count(response)\n# {:error, Enumerable.Response}\n```\nResponse\u306b\u306f`Enumerable Protocol`\u3092\u5b9f\u88c5\u3057\u3066\u3042\u308b\u306e\u3067\u3001\u76f4\u63a5Collection\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n# Linter\n\nlocal\u95a2\u6570\u306f\u62ec\u5f27\u3092\u4ed8\u3051\u307e\u3057\u3087\u3046\u3068\u304b\u3001\u95a2\u6570\u306e\u5f15\u6570\u306f5\u500b\u307e\u3067\u304c\u671b\u307e\u3057\u3044\u3068\u304b\n\n\u305d\u3046\u3044\u3046\u7d30\u304b\u3044\u3068\u3053\u308d\u306fLinter\u306b\u4efb\u305b\u3061\u3083\u3044\u307e\u3057\u3087\u3046\n\n`\u74b0\u5883`:\n- https://github.com/rrrene/credo\n- https://github.com/vim/vim\n- https://github.com/neomake/neomake\n\n\n###### Note: Vim\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3088\u304f\u5206\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u3088\u308a\u826f\u304f\u66f8\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\n```vim\n\nlet g:neomake_elixir_mycredo_maker = {\n      \\ 'exe': 'mixup',\n      \\ 'args': ['credo', '--format=flycheck', '--strict'],\n      \\ 'errorformat':\n          \\ '%E%f:%l:%c: %m,' .\n          \\ '%E%f:%l: %m'\n      \\ }\nlet g:neomake_elixir_mymix_maker = {\n      \\ 'exe' : 'mixup',\n      \\ 'args': ['compile', '--warnings-as-errors'],\n      \\ 'errorformat':\n        \\ '** %s %f:%l: %m,'.\n        \\ '%f:%l: warning: %m'\n      \\ }\n\nlet g:neomake_elixir_enabled_makers = ['mycredo', 'mymix', 'elixir']\n\nfunction! Mixmeansnothing()\n    if !exists('t:cwd')\n       let t:cwd = system(\"mixup pwd\")\n    endif\n\n    execute 'cd' t:cwd\nendfunction\n\nautocmd! BufWritePre * call Mixmeansnothing()\nautocmd! BufWritePost * Neomake\n```\n\n### mixup\u90e8\u5206\n\n```zsh\n#!/usr/bin/env zsh\n\nfindup() {\n    FILE=$1\n    while [ ! -e \"${FILE}\" ]; do\n        if [ \"$(pwd)\" = \"/\" ]; then\n            return\n        fi\n        cd ..\n    done\n    echo \"$(pwd)\"\n}\n\n# usage example\nMIX=mix.exs\nPDIR=$(findup ${MIX})\n\nif [ \"$1\" = \"pwd\" ]; then\n    echo $PDIR\n    exit 0\nfi\n\nif [ \"${PDIR}/${MIX}\" != \"/${MIX}\" ]; then\n    # echo \"(cd ${PDIR}; mix $@)\"\n    cd ${PDIR}; mix $@\n    exit 0\nfi\n\necho \"couldn't find file ${MIX}\"\nexit 1\n```\n\n\n![mycredo](https://dl.dropboxusercontent.com/spa/ohj2tplmz3dn81a/-6muy9_z.png \"mycredo\")\n\n\n# \u304a\u308f\u308a\u306b\n\n\u7c21\u5358\u3067\u3059\u304c\u4ee5\u4e0a\u3067\u3059\u3001\u8aad\u3093\u3067\u304f\u3060\u3055\u3063\u3066\u672c\u5f53\u306b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\u6765\u5e74\u307e\u3067\u6587\u7ae0\u306f\u66f8\u3051\u307e\u305b\u3093\u3002\n\n[^1]: [Agent](https://hexdocs.pm/elixir/Agent.html)\u306a\u3069\u3092\u4f7f\u7528\u3059\u308c\u3070\u4f3c\u305f\u3088\u3046\u306a\u4e8b\u3092\u5b9f\u73fe\u51fa\u6765\u307e\u3059\n[^2]: [Ecto](https://github.com/elixir-ecto/ecto), [Plug](https://github.com/elixir-lang/plug)\u306a\u3069\u304c\u4ee3\u8868\u4f8b\n", "tags": ["Elixir", "AdventCalendar", "AdventCalendar2016"]}