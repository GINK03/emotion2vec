{"context": "\n\nProvisioning Ubuntu VM using Terraform with ARM provider\nI provisioned an Ubuntu server using Terraform.\nI'd like to shre some tips about it. Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently.It is cloud agnostic architecture and is created by Go language. It works fine both on Windows and Mac.\n\n1. Installation\nDownload Terraform from this URL. Then extract it and set the PATH variable to include the terraform directory.\nDOWNLOAD TERRAFORM\u3000\nAlso, I recomend to install Azure CLI. You can find it on \"Command-line tools\" section.\nMicrosoft Azure: SDKs\n\n2. Service Principal authentication\nI followed this blogpost (Sorry, it is Japanese)Terraform\u3092Azure ARM\u3067\u4f7f\u3046\u6642\u306e\u8a8d\u8a3c\nI think, this is the easiest way to setup Service principal authentication using Azure CLI.\n\n2.1. Login\nLogin azure via Azure CLI. Follow the instraction.\n> azure login\ninfo:    Executing command login\n|info:    To sign in, use a web browser to open the page https://aka.ms/devicelogin. Enter the code <Some Code> to authenticate.\n\nChange the mode of Azure CLI. Default is asm mode. (asm = Azure Service Manager)\n> azure config mode arm\n\n\n2.2. Register your application\nService principle authentication looks complex. However, once you set it up, it will be very useful.\nTo registre your application to the Azure AD, please do like this.\nYou can specify an url, that is your blog url or anything, on --home-page and --identifier-uris \n> azure ad app create --name \"My Terraform\" --home-page \"http://simplearchitect.hatenablog.com/\" --identifier-uris \"http://simplearchitect.hatenablog.com/\" --password <Your Password>\ninfo:    Executing command ad app create\n+ Creating application My Terraform\ndata:    AppId:                   <Some AppId>\ndata:    ObjectId:                <Some App ObjectId>\ndata:    DisplayName:             My Terraform\ndata:    IdentifierUris:          0=http://simplearchitect.hatenablog.com/\ndata:    ReplyUrls:\ndata:    AvailableToOtherTenants:  False\ninfo:    ad app create command OK\n\nUsing <Some AppId> Create a service principle. \n> azure ad sp create <Some AppId>\ninfo:    Executing command ad sp create\n+ Creating service principal for application <Some AppId>\ndata:    Object Id:               <Some Principle Object Id>\ndata:    Display Name:            My Terraform\ndata:    Service Principal Names:\ndata:                             <Some AppId>\ndata:                             http://simplearchitect.hatenablog.com/\ninfo:    ad sp create command OK\n\nThen assign a role to the service principle. You can find your subcritpion id by azure account list command.\n> azure role assignment create --objectId <Some Principle Object Id> -o Contributor -c /subscriptions/<Your Subscription Id>  \ninfo:    Executing command role assignment create\n+ Finding role with specified name\n-data:    RoleAssignmentId     : /subscriptions/<Your subscription Id>/providers/Microsoft.Authorization/roleAssignments/<Your role assignment Id>\ndata:    RoleDefinitionName   : Contributor\ndata:    RoleDefinitionId     : <Your role defininition Id>\ndata:    Scope                : /subscriptions/<Your subscription Id>\ndata:    Display Name         : My Terraform\ndata:    SignInName           :\ndata:    ObjectId             : <Some Principle Object Id>\ndata:    ObjectType           : ServicePrincipal\ndata:\n+\ninfo:    role assignment create command OK\n\nYou need to get the tenant_id of your subscription. try this command.\n> azure  account list --json\n[\n  {\n    \"id\": \"<Your subsctiption Id>\",\n    \"name\": \"<Your subsctiption name>\",\n    \"user\": {\n      \"name\": \"<Your e-mail address>\",\n      \"type\": \"user\"\n    },\n    \"tenantId\": \"<Your tenantId>\",\n    \"state\": \"Enabled\",\n    \"isDefault\": true,\n    \"registeredProviders\": [],\n    \"environmentName\": \"AzureCloud\"\n  }\n   :\n\n\n3. Create a terraform configuration\nA terraform configuration is a configuration file for your infrastructure.\nI uploaded the whole code on my Gist.Terraform configurations for Azure ARM template\nAlso, please write terraform.tfvar file.  client_secret is the password that you specified on 2.2.\nterraform.tfvars\ndefault_user = \"<OS User Name>\"\ndefault_password = \"<OS User password>\"\nsubscription_id = \"<Your subscription Id>\"\nclient_id       = \"<Some AppId>\"\nclient_secret   = \"<Your Password>\"\ntenant_id       = \"<Your tenantId>\"\n\nYou can refer this site to understand tf and tfvar file.\nAZURERM_VIRTUAL_MACHINE\nIf you don't familier with Azure Resrouce Manager, please check this site.\n\n4. Provisioning using terraform\nMake sure that you have tf and tfvars file.\n>dir\n :\n2016/04/30  12:41               667 terraform.tf\n2016/04/30  12:40                58 terraform.tfvars\n\nApply the configuration. If you use windows, -no-color option might help.\n> terraform plan\n> terraform apply\n :\nazurerm_virtual_machine.test (remote-exec): Thank you for installing Chef!\nazurerm_virtual_machine.test: Creation complete\n\nApply complete! Resources: 8 added, 0 changed, 0 destroyed.\n\nThe state of your infrastructure has been saved to the path\nbelow. This state is required to modify and destroy your\ninfrastructure, so keep it safe. To inspect the complete state\nuse the `terraform show` command.\n\nState path: terraform.tfstate\n\nC:\\Users\\tsushi\\Codes\\Terraform>\n\n\n5. Tips for Azure ARM\n\n5.1. Creating Azure ARM strage account at the second time fails.\nIf you want to repeate remove/recreate a storage account, you might be better to change the storage account name. Please see this issue.\nCreating Azure ARM strage account at the second time fails #6412\n\n5.2. Use terraform destroy command\nYou can remove Resource Group via Azure portal. However, you'd better to remove it using terraform destroy command.\n\n5.3. When terraform command doesn't work well, remove tfstate files.\nSometimes, terraform subcommand won't work well. Then you might better to delete .tfstate and .tfstate.backup file. \n2016/04/30  12:13            12,268 terraform.tfstate\n2016/04/30  12:11               197 terraform.tfstate.backup\n\n\n5.3. Use Variables if you want to refer VM attributes\nI wanted to refer the os_profile.*.admin_password from the connection resource. However, it doesn't work.\nI guess, when it refer the attribute, the VM won't be created, completely. So we might not refer this.\nInstead, we can use variables.\nresource \"azurerm_virtual_machine\" \"test\" {\n    name = \"TerraformVM01\"\n    location = \"Japan East\"\n    resource_group_name = \"${azurerm_resource_group.test.name}\"\n    network_interface_ids = [\"${azurerm_network_interface.test.id}\"]\n    vm_size = \"Standard_A0\"\n\n    storage_image_reference {\n    publisher = \"Canonical\"\n    offer = \"UbuntuServer\"\n    sku = \"14.04.2-LTS\"\n    version = \"latest\"\n    }\n\n    storage_os_disk {\n        name = \"myosdisk1\"\n        vhd_uri = \"${azurerm_storage_account.test.primary_blob_endpoint}${azurerm_storage_container.test.name}/myosdisk1.vhd\"\n        caching = \"ReadWrite\"\n        create_option = \"FromImage\"\n    }\n\n    os_profile {\n    computer_name = \"TerraformTest\"\n    admin_username = \"${var.default_user}\"\n    admin_password = \"${var.default_password}\"\n    }\n\n    os_profile_linux_config {\n    disable_password_authentication = false\n    }\n\n    provisioner \"remote-exec\" {\n    connection {\n        type = \"ssh\"\n        user = \"${var.default_user}\"\n        password = \"${var.default_password}\"\n        host = \"${azurerm_public_ip.test.ip_address}\"\n    }\n      inline = [\n      \"sudo sh -c 'curl -L https://omnitruck.chef.io/install.sh | bash'\"\n      ]\n    }\n}\n\n\n5.4. Use variables for confidential information.\nWould you want to separate the confidentical information like subscription, passord, and so on. Use variables.\nPlease note that you can only use terraform.tfvars for .tfvars file. Any other name is not allowed.\nvariable \"default_user\" {}\nvariable \"default_password\" {}\nvariable \"subscription_id\" {}\nvariable \"client_id\" {}\nvariable \"client_secret\" {}\nvariable \"tenant_id\" {}\n\nprovider \"azurerm\" {\n  subscription_id = \"${var.subscription_id}\"\n  client_id       = \"${var.client_id}\"\n  client_secret   = \"${var.client_secret}\"\n  tenant_id       = \"${var.tenant_id}\"\n}\n\nterraform.tfvars\ndefault_user = \"<OS User Name>\"\ndefault_password = \"<OS User password>\"\nsubscription_id = \"<Your subscription Id>\"\nclient_id       = \"<Some AppId>\"\nclient_secret   = \"<Your Password>\"\ntenant_id       = \"<Your tenantId>\"\n\n\n5.5. Use remote exec to execute shell\nSee Provisioners\n    provisioner \"remote-exec\" {\n    connection {\n        type = \"ssh\"\n        user = \"${var.default_user}\"\n        password = \"${var.default_password}\"\n        host = \"${azurerm_public_ip.test.ip_address}\"\n    }\n      inline = [\n      \"sudo sh -c 'curl -L https://omnitruck.chef.io/install.sh | bash'\"\n      ]\n    }\n\n\n5.6. Use -no-color option\nIf you use windows, you should use -no-color option. Unless it, you can see like this.\n\n\n5.6. Visual Studio Code is a good tool for writing tf file.\nVisual Studio Code. It is good because it has code completion.\n\n\nConclusion\nARM provisioner is just begining. However, it is good for someone who wants to manage several cloud platforms.\nAlso, it works fine both Windows and Mac. This application is written by Go language. I feel it is really stable.\nEnjoy terraform on Azure ARM provisioners.  \nProvisioning Ubuntu VM using Terraform with ARM provider\n===\n\nI provisioned an Ubuntu server using [Terraform](https://www.terraform.io/).\n\nI'd like to shre some tips about it. Terraform is a tool for building, changing, and versioning infrastructure safely and efficiently.It is cloud agnostic architecture and is created by Go language. It works fine both on Windows and Mac.\n\n\n1. Installation\n---\n\nDownload Terraform from this URL. Then extract it and set the PATH variable to include the terraform directory.\n\n[DOWNLOAD TERRAFORM](https://www.terraform.io/downloads.html)\u3000\n\nAlso, I recomend to install Azure CLI. You can find it on \"Command-line tools\" section.\n\n[Microsoft Azure: SDKs](https://azure.microsoft.com/en-us/downloads/)\n\n2. Service Principal authentication\n---\n\nI followed this blogpost (Sorry, it is Japanese)[Terraform\u3092Azure ARM\u3067\u4f7f\u3046\u6642\u306e\u8a8d\u8a3c](http://torumakabe.github.io/post/azure_tf_arm_sp/)\nI think, this is the easiest way to setup Service principal authentication using Azure CLI.\n\n### 2.1. Login\n\nLogin azure via Azure CLI. Follow the instraction.\n\n```\n> azure login\ninfo:    Executing command login\n|info:    To sign in, use a web browser to open the page https://aka.ms/devicelogin. Enter the code <Some Code> to authenticate.\n```\n\nChange the mode of Azure CLI. Default is asm mode. (asm = Azure Service Manager)\n\n```\n> azure config mode arm\n```\n\n### 2.2. Register your application \n\nService principle authentication looks complex. However, once you set it up, it will be very useful.\nTo registre your application to the Azure AD, please do like this.\nYou can specify an url, that is your blog url or anything, on `--home-page` and `--identifier-uris` \n\n```\n> azure ad app create --name \"My Terraform\" --home-page \"http://simplearchitect.hatenablog.com/\" --identifier-uris \"http://simplearchitect.hatenablog.com/\" --password <Your Password>\ninfo:    Executing command ad app create\n+ Creating application My Terraform\ndata:    AppId:                   <Some AppId>\ndata:    ObjectId:                <Some App ObjectId>\ndata:    DisplayName:             My Terraform\ndata:    IdentifierUris:          0=http://simplearchitect.hatenablog.com/\ndata:    ReplyUrls:\ndata:    AvailableToOtherTenants:  False\ninfo:    ad app create command OK\n```\nUsing `<Some AppId>` Create a service principle. \n\n```\n> azure ad sp create <Some AppId>\ninfo:    Executing command ad sp create\n+ Creating service principal for application <Some AppId>\ndata:    Object Id:               <Some Principle Object Id>\ndata:    Display Name:            My Terraform\ndata:    Service Principal Names:\ndata:                             <Some AppId>\ndata:                             http://simplearchitect.hatenablog.com/\ninfo:    ad sp create command OK\n```\n\nThen assign a role to the service principle. You can find your subcritpion id by `azure account list` command.\n\n```\n> azure role assignment create --objectId <Some Principle Object Id> -o Contributor -c /subscriptions/<Your Subscription Id>  \ninfo:    Executing command role assignment create\n+ Finding role with specified name\n-data:    RoleAssignmentId     : /subscriptions/<Your subscription Id>/providers/Microsoft.Authorization/roleAssignments/<Your role assignment Id>\ndata:    RoleDefinitionName   : Contributor\ndata:    RoleDefinitionId     : <Your role defininition Id>\ndata:    Scope                : /subscriptions/<Your subscription Id>\ndata:    Display Name         : My Terraform\ndata:    SignInName           :\ndata:    ObjectId             : <Some Principle Object Id>\ndata:    ObjectType           : ServicePrincipal\ndata:\n+\ninfo:    role assignment create command OK\n```\nYou need to get the tenant_id of your subscription. try this command.\n\n```\n> azure  account list --json\n[\n  {\n    \"id\": \"<Your subsctiption Id>\",\n    \"name\": \"<Your subsctiption name>\",\n    \"user\": {\n      \"name\": \"<Your e-mail address>\",\n      \"type\": \"user\"\n    },\n    \"tenantId\": \"<Your tenantId>\",\n    \"state\": \"Enabled\",\n    \"isDefault\": true,\n    \"registeredProviders\": [],\n    \"environmentName\": \"AzureCloud\"\n  }\n   :\n```\n\n3. Create a terraform configuration\n---\n\nA terraform configuration is a configuration file for your infrastructure.\nI uploaded the whole code on my Gist.[Terraform configurations for Azure ARM template](https://gist.github.com/TsuyoshiUshio/6abf201db0ab23dde83acd0c86636b12)\n\nAlso, please write `terraform.tfvar` file.  client_secret is the password that you specified on 2.2.\n\nterraform.tfvars\n\n```\ndefault_user = \"<OS User Name>\"\ndefault_password = \"<OS User password>\"\nsubscription_id = \"<Your subscription Id>\"\nclient_id       = \"<Some AppId>\"\nclient_secret   = \"<Your Password>\"\ntenant_id       = \"<Your tenantId>\"\n```\n\nYou can refer this site to understand tf and tfvar file.\n\n[AZURERM_VIRTUAL_MACHINE](https://www.terraform.io/docs/providers/azurerm/r/virtual_machine.html)\n\nIf you don't familier with Azure Resrouce Manager, please check [this site](https://azure.microsoft.com/en-us/documentation/articles/resource-group-overview/).\n\n4. Provisioning using terraform\n---\n\nMake sure that you have tf and tfvars file.\n\n```\n>dir\n :\n2016/04/30  12:41               667 terraform.tf\n2016/04/30  12:40                58 terraform.tfvars\n```\n\nApply the configuration. If you use windows, `-no-color` option might help.\n\n```\n> terraform plan\n> terraform apply\n :\nazurerm_virtual_machine.test (remote-exec): Thank you for installing Chef!\nazurerm_virtual_machine.test: Creation complete\n\nApply complete! Resources: 8 added, 0 changed, 0 destroyed.\n\nThe state of your infrastructure has been saved to the path\nbelow. This state is required to modify and destroy your\ninfrastructure, so keep it safe. To inspect the complete state\nuse the `terraform show` command.\n\nState path: terraform.tfstate\n\nC:\\Users\\tsushi\\Codes\\Terraform>\n``` \n\n5. Tips for Azure ARM\n---\n\n### 5.1. Creating Azure ARM strage account at the second time fails.\n \nIf you want to repeate remove/recreate a storage account, you might be better to change the storage account name. Please see this issue.\n\n[Creating Azure ARM strage account at the second time fails #6412](https://github.com/hashicorp/terraform/issues/6412)\n\n### 5.2. Use terraform destroy command\n\nYou can remove Resource Group via Azure portal. However, you'd better to remove it using `terraform destroy` command.\n\n### 5.3. When terraform command doesn't work well, remove tfstate files.\n\nSometimes, terraform subcommand won't work well. Then you might better to delete .tfstate and .tfstate.backup file. \n\n```\n2016/04/30  12:13            12,268 terraform.tfstate\n2016/04/30  12:11               197 terraform.tfstate.backup\n```\n\n### 5.3. Use Variables if you want to refer VM attributes\n\nI wanted to refer the `os_profile.*.admin_password` from the `connection` resource. However, it doesn't work.\nI guess, when it refer the attribute, the VM won't be created, completely. So we might not refer this.\nInstead, we can use variables.\n\n```\nresource \"azurerm_virtual_machine\" \"test\" {\n    name = \"TerraformVM01\"\n    location = \"Japan East\"\n    resource_group_name = \"${azurerm_resource_group.test.name}\"\n    network_interface_ids = [\"${azurerm_network_interface.test.id}\"]\n    vm_size = \"Standard_A0\"\n\n    storage_image_reference {\n    publisher = \"Canonical\"\n    offer = \"UbuntuServer\"\n    sku = \"14.04.2-LTS\"\n    version = \"latest\"\n    }\n\n    storage_os_disk {\n        name = \"myosdisk1\"\n        vhd_uri = \"${azurerm_storage_account.test.primary_blob_endpoint}${azurerm_storage_container.test.name}/myosdisk1.vhd\"\n        caching = \"ReadWrite\"\n        create_option = \"FromImage\"\n    }\n\n    os_profile {\n    computer_name = \"TerraformTest\"\n    admin_username = \"${var.default_user}\"\n    admin_password = \"${var.default_password}\"\n    }\n\n    os_profile_linux_config {\n    disable_password_authentication = false\n    }\n    \n    provisioner \"remote-exec\" {\n    connection {\n        type = \"ssh\"\n        user = \"${var.default_user}\"\n        password = \"${var.default_password}\"\n        host = \"${azurerm_public_ip.test.ip_address}\"\n    }\n      inline = [\n      \"sudo sh -c 'curl -L https://omnitruck.chef.io/install.sh | bash'\"\n      ]\n    }\n}\n```\n\n### 5.4. Use variables for confidential information.\n\nWould you want to separate the confidentical information like subscription, passord, and so on. Use [variables](https://www.terraform.io/docs/configuration/variables.html).\n\nPlease note that you can only use `terraform.tfvars` for `.tfvars` file. Any other name is not allowed.\n\n```\nvariable \"default_user\" {}\nvariable \"default_password\" {}\nvariable \"subscription_id\" {}\nvariable \"client_id\" {}\nvariable \"client_secret\" {}\nvariable \"tenant_id\" {}\n\nprovider \"azurerm\" {\n  subscription_id = \"${var.subscription_id}\"\n  client_id       = \"${var.client_id}\"\n  client_secret   = \"${var.client_secret}\"\n  tenant_id       = \"${var.tenant_id}\"\n}\n```\nterraform.tfvars\n\n```\ndefault_user = \"<OS User Name>\"\ndefault_password = \"<OS User password>\"\nsubscription_id = \"<Your subscription Id>\"\nclient_id       = \"<Some AppId>\"\nclient_secret   = \"<Your Password>\"\ntenant_id       = \"<Your tenantId>\"\n```\n\n\n### 5.5. Use remote exec to execute shell\n\nSee [Provisioners](https://www.terraform.io/docs/provisioners/remote-exec.html)\n\n```\n    provisioner \"remote-exec\" {\n    connection {\n        type = \"ssh\"\n        user = \"${var.default_user}\"\n        password = \"${var.default_password}\"\n        host = \"${azurerm_public_ip.test.ip_address}\"\n    }\n      inline = [\n      \"sudo sh -c 'curl -L https://omnitruck.chef.io/install.sh | bash'\"\n      ]\n    }\n```\n\n### 5.6. Use -no-color option\n\nIf you use windows, you should use `-no-color` option. Unless it, you can see like this.\n\n![2016-04-30 (3).png](https://qiita-image-store.s3.amazonaws.com/0/3470/8246aaed-999f-fba8-b3db-141d45b61da4.png)\n\n\n### 5.6. Visual Studio Code is a good tool for writing tf file.\n\n[Visual Studio Code](https://code.visualstudio.com/). It is good because it has code completion.\n\n![hokan.png](https://qiita-image-store.s3.amazonaws.com/0/3470/57ce3538-308c-c35e-a976-2157c5631688.png)\n\n\nConclusion\n---\nARM provisioner is just begining. However, it is good for someone who wants to manage several cloud platforms.\nAlso, it works fine both Windows and Mac. This application is written by Go language. I feel it is really stable.\n\nEnjoy terraform on Azure ARM provisioners.  \n", "tags": ["Terraform", "Azure", "AzureResourceManager"]}