{"context": " More than 1 year has passed since last update.\n\n\u30e6\u30fc\u30b6\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\n\u30e6\u30fc\u30b6\u306b\u7d10\u3065\u304f\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b UserService \u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u306f homework.service \u3067\u3002\n\n\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\u306e\u53d6\u5f97\nJPA\u3067\u306f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\u306b\u3088\u3063\u3066\u3001\u3044\u308d\u3044\u308d\u306a\u64cd\u4f5c\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nCDI\u3092\u5229\u7528\u3057\u3066\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u3067DI\u51fa\u6765\u305f\u308a\u3059\u308b\u307f\u305f\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u306f\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u306b\u52c9\u5f37\u3059\u308b\u3053\u3068\u306b\u3057\u3066\u3001\u30d5\u30a1\u30af\u30c8\u30ea\u30af\u30e9\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u672c\u756a\u7528\u3068\u5358\u4f53\u30c6\u30b9\u30c8\u7528\u306e\u5207\u308a\u66ff\u3048\u306f\u74b0\u5883\u5909\u6570\u3067\u6307\u5b9a\u3059\u308b\u3068\u3044\u3046\u4ed5\u69d8\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e EMProducer \u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\nEMProducer.java\npackage homework.utils;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\u751f\u6210\u30af\u30e9\u30b9\u3002\n * @author satake\n */\npublic final class EMProducer {\n\n    /** \u74b0\u5883\u5909\u6570\u304b\u3089\u30d1\u30fc\u30b7\u30b9\u30bf\u30f3\u30c8\u30e6\u30cb\u30c3\u30c8\u540d\u3092\u53d6\u5f97\u3059\u308b\u30ad\u30fc\u306e\u5b9a\u7fa9 */\n    private static final String KEY_UNIT_NAME = \"jpaUnitName\";\n    /** \u901a\u5e38\u306e\u30d1\u30fc\u30b7\u30b9\u30bf\u30f3\u30c8\u30e6\u30cb\u30c3\u30c8\u540d\u306e\u5b9a\u7fa9 */\n    private static final String DEFAULT_UNIT_NAME = \"homework\";\n\n    /** \u81ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 */\n    private static EMProducer producer = null;\n\n    /** \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\u30d5\u30a1\u30af\u30c8\u30ea\u30fc */\n    private final EntityManagerFactory emFactory;\n\n    /**\n     * \u975e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u306e\u305f\u3081\u306e private \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3002\n     */\n    private EMProducer() {\n        String envUnitName = System.getProperty(KEY_UNIT_NAME);\n        String unitName = StringUtils.isNotEmpty(envUnitName) ? envUnitName : DEFAULT_UNIT_NAME;\n        emFactory = Persistence.createEntityManagerFactory(unitName);\n    }\n\n    /**\n     * \u81ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n     * @return  \u81ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n     */\n    private static EMProducer getInstance() {\n        if (producer == null) {\n            producer = new EMProducer();\n        }\n        return producer;\n    }\n\n    /**\n     * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\u3092\u751f\u6210\u3059\u308b\u3002\n     * @return  \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\n     */\n    public static EntityManager createManager() {\n        return getInstance().emFactory.createEntityManager();\n    }\n}\n\n\n\n\u30ed\u30b0\u30a4\u30f3\u51e6\u7406\n\u30ed\u30b0\u30a4\u30f3\u51e6\u7406\u3067\u306f\u3001\u30a2\u30ab\u30a6\u30f3\u30c8ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u30e6\u30fc\u30b6\u8a8d\u8a3c\u3092\u884c\u3044\u3001\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3057\u3066\u3044\u305f\u3089\u76f4\u524d\u306e\u7d50\u679c\u304b\u3089\u9593\u9055\u3048\u305f\u554f\u984c\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u8a8d\u8a3c\u51e6\u7406\u3067\u306f\u30a2\u30ab\u30a6\u30f3\u30c8ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u691c\u7d22\u306e\u6761\u4ef6\u3068\u306a\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u6761\u4ef6\u3068\u3057\u305fJPQL\u3092 homework.xml \u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n\nhomework.xml\n    <!-- \u30a2\u30ab\u30a6\u30f3\u30c8ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b -->\n    <named-query name=\"User.findByAccountPasswd\">\n        <query><![CDATA[\n        SELECT\n            u\n        FROM\n            User u\n        WHERE\n            u.accountId = :accountId\n        AND\n            u.password = :password\n        ]]></query>\n    </named-query>\n\n\nJPA\u3067\u306f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30d9\u30fc\u30b9\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u5225\u540d\u3092\u3064\u3051\u30011\u30c6\u30fc\u30d6\u30eb\u306e\u30a2\u30af\u30bb\u30b9\u3067\u3082\u300c\u5225\u540d.\u5909\u6570\u540d\u300d\u3068\u5225\u540d\u7d4c\u7531\u3067\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u4e0a\u8a18\u306eJPQL\u3092\u5229\u7528\u3057\u305f authenticate \u30e1\u30bd\u30c3\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\nUserService.java\n    private User authenticate(String accountId, String password) {\n        try {\n            return entityManager\n                    .createNamedQuery(\"User.findByAccountPasswd\", User.class)\n                    .setParameter(\"accountId\", accountId)\n                    .setParameter(\"password\", Crypter.encrypt(password))\n                    .getSingleResult();\n        }\n        catch (NoResultException e) {\n            logger.warn(e);\n            return null;\n        }\n    }\n\n\n\nentityManager \u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067 EMProducer.createManager() \u3067\u53d6\u5f97\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3067\u3059\u3002\n\u6b21\u306b\u5b9a\u7fa9\u3057\u305fJPQL\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306b createNamedQuery \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u7b2c2\u5f15\u6570\u306f\u7d50\u679c\u3068\u306a\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6b21\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 setParameter \u30e1\u30bd\u30c3\u30c9\u3067\u6307\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u3053\u3053\u3067\u306f\u5358\u4e00\u306e\u7d50\u679c\u3092\u8fd4\u3059\u306e\u3067 getSingleResult \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u306a\u304a getSingleResult \u3067\u7d50\u679c\u304c\u53d6\u5f97\u3067\u304d\u306a\u3044\u5834\u5408\u306f NoResultException \u304c throw \u3055\u308c\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b Crypter.encrypt \u306f\u4f5c\u6210\u3057\u305f\u6697\u53f7\u5316\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u3067\u3059\u3002\nBlowfish \u3067\u6697\u53f7\u5316\u3057\u305f\u3082\u306e\u3092 Base64 \u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u307e\u3059\u3002\n\u4e00\u5fdc\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\nCrypter.java\npackage homework.utils;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\n/**\n * \u6697\u53f7\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3002\n * <p>\n * \u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u306e static \u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3059\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u3002\n * </p>\n * @author satake\n */\npublic final class Crypter {\n\n    /** \u79d8\u5bc6\u9375\u306e\u5b9a\u7fa9 */\n    private static final String SECRET_KEY = \"homework\";\n    /** \u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9a\u7fa9 */\n    private static final String ALGORITHM = \"Blowfish\";\n\n    /**\n     * \u975e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u306e\u305f\u3081\u306eprivate\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc\u3002\n     */\n    private Crypter() {\n    }\n\n    /**\n     * \u6587\u5b57\u5217\u3092\u6697\u53f7\u5316\u3059\u308b\u3002\n     * @param target    \u6697\u53f7\u5316\u3059\u308b\u6587\u5b57\u5217\n     * @return  \u6697\u53f7\u5316\u3057\u305f\u6587\u5b57\u5217\n     */\n    public static String encrypt(String target) {\n        try {\n            Cipher cipher = createCipher(Cipher.ENCRYPT_MODE);\n            byte[] encrypted = cipher.doFinal(target.getBytes());\n            return (new Base64()).encodeToString(encrypted);\n        }\n        catch (Exception e) {\n            throw new SystemException(\"\u6697\u53f7\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\", e);\n        }\n    }\n\n    /**\n     * \u6587\u5b57\u5217\u3092\u5fa9\u53f7\u5316\u3059\u308b\u3002\n     * @param target    \u5fa9\u53f7\u5316\u3059\u308b\u6587\u5b57\u5217\n     * @return  \u5fa9\u53f7\u5316\u3057\u305f\u6587\u5b57\u5217\n     */\n    public static String decrypt(String target) {\n        try {\n            byte[] encrypted = (new Base64()).decode(target);\n            Cipher cipher = createCipher(Cipher.DECRYPT_MODE);\n            byte[] decrypted = cipher.doFinal(encrypted);\n            return new String(decrypted, \"UTF-8\");\n        }\n        catch (Exception e) {\n            throw new SystemException(\"\u5fa9\u53f7\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\", e);\n        }\n    }\n\n    /**\n     * \u6697\u53f7\u6a5f\u80fd\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u3002\n     * @param   mode    \u6697\u53f7\u5316\u3059\u308b\u5834\u5408\u306f {@link Cipher#ENCRYPT_MODE} \u3092\u3001\n     *                  \u5fa9\u53f7\u5316\u3059\u308b\u5834\u5408\u306f {@link Cipher#DECRYPT_MODE} \u3092\u6307\u5b9a\u3059\u308b\u3002\n     * @return  \u6697\u53f7\u6a5f\u80fd\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3002\n     * @throws NoSuchAlgorithmException \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u4f7f\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3002\n     * @throws NoSuchPaddingException   \u30d1\u30c7\u30a3\u30f3\u30b0\u304c\u4f7f\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3002\n     * @throws InvalidKeyException      \u30ad\u30fc\u306e\u6307\u5b9a\u304c\u7121\u52b9\u306a\u5834\u5408\u3002\n     */\n    private static Cipher createCipher(int mode) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(SECRET_KEY.getBytes(), ALGORITHM);\n        Cipher cipher = Cipher.getInstance(ALGORITHM);\n        cipher.init(mode, secretKeySpec);\n        return cipher;\n    }\n}\n\n\n\u6b21\u306b\u76f4\u524d\u306e\u7d50\u679c\u304b\u3089\u9593\u9055\u3048\u305f\u554f\u984c\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\u3067\u3059\u304c\u3001\u30e6\u30fc\u30b6\u306b\u7d10\u3065\u304f\u6700\u65b0\u306e\u5c65\u6b74\u60c5\u5831\u306b\u3042\u308b\u56de\u7b54\u3092\u53d6\u5f97\u3057\u305f\u5f8c\u4e0d\u6b63\u89e3\u306e\u3082\u306e\u306e\u307f\u3092\u53d6\u5f97\u3059\u308b\u3068\u3044\u3046\u4ed5\u69d8\u3067\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\nhomework.xml\n    <!-- \u76f4\u8fd1\u306e\u56de\u7b54\u5c65\u6b74\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b -->\n    <named-query name=\"Answer.findLatestHistory\">\n        <query><![CDATA[\n        SELECT\n            a\n        FROM\n            Answer a\n        WHERE\n            a.history.historyId =\n            (\n                SELECT\n                    max(h.historyId)\n                FROM\n                    History h\n                WHERE\n                    h.user.userId = :userId\n            )\n        ORDER BY\n            a.answerId\n        ]]></query>\n    </named-query>\n\n\n\nUserService.java\n    private List<Answer> getLatestWrongAnswers(User user) {\n        List<Answer> answers = entityManager\n                .createNamedQuery(\"Answer.findLatestHistory\", Answer.class)\n                .setParameter(\"userId\", user.getUserId())\n                .getResultList();\n        return answers.stream()\n                .filter(answer -> StringUtils.equals(answer.getCorrectWrong(), CorrectWrong.WRONG))\n                .collect(Collectors.toList());\n    }\n\n\n\ngetResultList \u3067\u5024\u3092\u53d6\u5f97\u3057\u305f\u5f8c\u3001Java8 \u306e Stream API \u3067\u4e0d\u6b63\u89e3\u306e\u3082\u306e\u306e\u307f\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u3057\u307e\u3059\u3002\n\n\u8a8d\u8a3c\u51e6\u7406\u3068\u8aa4\u7b54\u554f\u984c\u53d6\u5f97\u51e6\u7406\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u30ed\u30b0\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nUserService.java\n    public Responce login(User auth) {\n        Responce responce = new Responce();\n        User user = authenticate(auth.getAccountId(), auth.getPassword());\n        responce.setUser(user);\n        if (user != null) {\n            responce.setAnswers(getLatestWrongAnswers(user));\n        }\n        return responce;\n    }\n\n\n\u3068\u308a\u3042\u3048\u305a\u3001DB\u3078\u306e\u30a2\u30af\u30bb\u30b9\u51e6\u7406\u3092\u66f8\u3044\u305f\u306e\u3067\u3001\u6b21\u306f\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nRESTEasy\u3068JPA\u3068AngularJS\u3092\u4f7f\u3063\u3066Web\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u308b\uff15\uff08JPA\u306e\u5358\u4f53\u30c6\u30b9\u30c8\uff09\u3078\n# \u30e6\u30fc\u30b6\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\n\u30e6\u30fc\u30b6\u306b\u7d10\u3065\u304f\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308b UserService \u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u306f homework.service \u3067\u3002\n\n## \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\u306e\u53d6\u5f97\nJPA\u3067\u306f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\u306b\u3088\u3063\u3066\u3001\u3044\u308d\u3044\u308d\u306a\u64cd\u4f5c\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nCDI\u3092\u5229\u7528\u3057\u3066\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u3067DI\u51fa\u6765\u305f\u308a\u3059\u308b\u307f\u305f\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u306f\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u306b\u52c9\u5f37\u3059\u308b\u3053\u3068\u306b\u3057\u3066\u3001\u30d5\u30a1\u30af\u30c8\u30ea\u30af\u30e9\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u672c\u756a\u7528\u3068\u5358\u4f53\u30c6\u30b9\u30c8\u7528\u306e\u5207\u308a\u66ff\u3048\u306f\u74b0\u5883\u5909\u6570\u3067\u6307\u5b9a\u3059\u308b\u3068\u3044\u3046\u4ed5\u69d8\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e EMProducer \u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n```java:EMProducer.java\npackage homework.utils;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\n\nimport org.apache.commons.lang3.StringUtils;\n\n/**\n * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\u751f\u6210\u30af\u30e9\u30b9\u3002\n * @author satake\n */\npublic final class EMProducer {\n\n\t/** \u74b0\u5883\u5909\u6570\u304b\u3089\u30d1\u30fc\u30b7\u30b9\u30bf\u30f3\u30c8\u30e6\u30cb\u30c3\u30c8\u540d\u3092\u53d6\u5f97\u3059\u308b\u30ad\u30fc\u306e\u5b9a\u7fa9 */\n\tprivate static final String KEY_UNIT_NAME = \"jpaUnitName\";\n\t/** \u901a\u5e38\u306e\u30d1\u30fc\u30b7\u30b9\u30bf\u30f3\u30c8\u30e6\u30cb\u30c3\u30c8\u540d\u306e\u5b9a\u7fa9 */\n\tprivate static final String DEFAULT_UNIT_NAME = \"homework\";\n\n\t/** \u81ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 */\n\tprivate static EMProducer producer = null;\n\n\t/** \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\u30d5\u30a1\u30af\u30c8\u30ea\u30fc */\n\tprivate final EntityManagerFactory emFactory;\n\n\t/**\n\t * \u975e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u306e\u305f\u3081\u306e private \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3002\n\t */\n\tprivate EMProducer() {\n\t\tString envUnitName = System.getProperty(KEY_UNIT_NAME);\n\t\tString unitName = StringUtils.isNotEmpty(envUnitName) ? envUnitName : DEFAULT_UNIT_NAME;\n\t\temFactory = Persistence.createEntityManagerFactory(unitName);\n\t}\n\n\t/**\n\t * \u81ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3002\n\t * @return\t\u81ea\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\t */\n\tprivate static EMProducer getInstance() {\n\t\tif (producer == null) {\n\t\t\tproducer = new EMProducer();\n\t\t}\n\t\treturn producer;\n\t}\n\n\t/**\n\t * \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\u3092\u751f\u6210\u3059\u308b\u3002\n\t * @return\t\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30de\u30cd\u30b8\u30e3\u30fc\n\t */\n\tpublic static EntityManager createManager() {\n\t\treturn getInstance().emFactory.createEntityManager();\n\t}\n}\n```\n\n\n## \u30ed\u30b0\u30a4\u30f3\u51e6\u7406\n\u30ed\u30b0\u30a4\u30f3\u51e6\u7406\u3067\u306f\u3001\u30a2\u30ab\u30a6\u30f3\u30c8ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u30e6\u30fc\u30b6\u8a8d\u8a3c\u3092\u884c\u3044\u3001\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3057\u3066\u3044\u305f\u3089\u76f4\u524d\u306e\u7d50\u679c\u304b\u3089\u9593\u9055\u3048\u305f\u554f\u984c\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\u8a8d\u8a3c\u51e6\u7406\u3067\u306f\u30a2\u30ab\u30a6\u30f3\u30c8ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u691c\u7d22\u306e\u6761\u4ef6\u3068\u306a\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u6761\u4ef6\u3068\u3057\u305fJPQL\u3092 homework.xml \u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n```xml:homework.xml\n\t<!-- \u30a2\u30ab\u30a6\u30f3\u30c8ID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3067\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b -->\n\t<named-query name=\"User.findByAccountPasswd\">\n\t\t<query><![CDATA[\n\t\tSELECT\n\t\t\tu\n\t\tFROM\n\t\t\tUser u\n\t\tWHERE\n\t\t\tu.accountId = :accountId\n\t\tAND\n\t\t\tu.password = :password\n\t\t]]></query>\n\t</named-query>\n```\nJPA\u3067\u306f\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30d9\u30fc\u30b9\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u5225\u540d\u3092\u3064\u3051\u30011\u30c6\u30fc\u30d6\u30eb\u306e\u30a2\u30af\u30bb\u30b9\u3067\u3082\u300c\u5225\u540d.\u5909\u6570\u540d\u300d\u3068\u5225\u540d\u7d4c\u7531\u3067\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306eJPQL\u3092\u5229\u7528\u3057\u305f authenticate \u30e1\u30bd\u30c3\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\n```java:UserService.java\n\tprivate User authenticate(String accountId, String password) {\n\t\ttry {\n\t\t\treturn entityManager\n\t\t\t\t\t.createNamedQuery(\"User.findByAccountPasswd\", User.class)\n\t\t\t\t\t.setParameter(\"accountId\", accountId)\n\t\t\t\t\t.setParameter(\"password\", Crypter.encrypt(password))\n\t\t\t\t\t.getSingleResult();\n\t\t}\n\t\tcatch (NoResultException e) {\n\t\t\tlogger.warn(e);\n\t\t\treturn null;\n\t\t}\n\t}\n```\n\n- entityManager \u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067 EMProducer.createManager() \u3067\u53d6\u5f97\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3067\u3059\u3002\n- \u6b21\u306b\u5b9a\u7fa9\u3057\u305fJPQL\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306b createNamedQuery \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u7b2c2\u5f15\u6570\u306f\u7d50\u679c\u3068\u306a\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n- \u6b21\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092 setParameter \u30e1\u30bd\u30c3\u30c9\u3067\u6307\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n- \u6700\u5f8c\u306b\u3053\u3053\u3067\u306f\u5358\u4e00\u306e\u7d50\u679c\u3092\u8fd4\u3059\u306e\u3067 getSingleResult \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n- \u306a\u304a getSingleResult \u3067\u7d50\u679c\u304c\u53d6\u5f97\u3067\u304d\u306a\u3044\u5834\u5408\u306f NoResultException \u304c throw \u3055\u308c\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b Crypter.encrypt \u306f\u4f5c\u6210\u3057\u305f\u6697\u53f7\u5316\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u3067\u3059\u3002\nBlowfish \u3067\u6697\u53f7\u5316\u3057\u305f\u3082\u306e\u3092 Base64 \u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u307e\u3059\u3002\n\u4e00\u5fdc\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```java:Crypter.java\npackage homework.utils;\n\nimport java.security.InvalidKeyException;\nimport java.security.NoSuchAlgorithmException;\n\nimport javax.crypto.Cipher;\nimport javax.crypto.NoSuchPaddingException;\nimport javax.crypto.spec.SecretKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\n\n/**\n * \u6697\u53f7\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3002\n * <p>\n * \u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u306e static \u30e1\u30bd\u30c3\u30c9\u3092\u63d0\u4f9b\u3059\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u3002\n * </p>\n * @author satake\n */\npublic final class Crypter {\n\n\t/** \u79d8\u5bc6\u9375\u306e\u5b9a\u7fa9 */\n\tprivate static final String SECRET_KEY = \"homework\";\n\t/** \u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u5316\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9a\u7fa9 */\n\tprivate static final String ALGORITHM = \"Blowfish\";\n\n\t/**\n\t * \u975e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u306e\u305f\u3081\u306eprivate\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc\u3002\n\t */\n\tprivate Crypter() {\n\t}\n\n\t/**\n\t * \u6587\u5b57\u5217\u3092\u6697\u53f7\u5316\u3059\u308b\u3002\n\t * @param target\t\u6697\u53f7\u5316\u3059\u308b\u6587\u5b57\u5217\n\t * @return\t\u6697\u53f7\u5316\u3057\u305f\u6587\u5b57\u5217\n\t */\n\tpublic static String encrypt(String target) {\n\t\ttry {\n\t\t\tCipher cipher = createCipher(Cipher.ENCRYPT_MODE);\n\t\t\tbyte[] encrypted = cipher.doFinal(target.getBytes());\n\t\t\treturn (new Base64()).encodeToString(encrypted);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(\"\u6697\u53f7\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\", e);\n\t\t}\n\t}\n\n\t/**\n\t * \u6587\u5b57\u5217\u3092\u5fa9\u53f7\u5316\u3059\u308b\u3002\n\t * @param target\t\u5fa9\u53f7\u5316\u3059\u308b\u6587\u5b57\u5217\n\t * @return\t\u5fa9\u53f7\u5316\u3057\u305f\u6587\u5b57\u5217\n\t */\n\tpublic static String decrypt(String target) {\n\t\ttry {\n\t\t\tbyte[] encrypted = (new Base64()).decode(target);\n\t\t\tCipher cipher = createCipher(Cipher.DECRYPT_MODE);\n\t\t\tbyte[] decrypted = cipher.doFinal(encrypted);\n\t\t\treturn new String(decrypted, \"UTF-8\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tthrow new SystemException(\"\u5fa9\u53f7\u5316\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\", e);\n\t\t}\n\t}\n\n\t/**\n\t * \u6697\u53f7\u6a5f\u80fd\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u3002\n\t * @param\tmode\t\u6697\u53f7\u5316\u3059\u308b\u5834\u5408\u306f {@link Cipher#ENCRYPT_MODE} \u3092\u3001\n\t * \t\t\t\t\t\u5fa9\u53f7\u5316\u3059\u308b\u5834\u5408\u306f {@link Cipher#DECRYPT_MODE} \u3092\u6307\u5b9a\u3059\u308b\u3002\n\t * @return\t\u6697\u53f7\u6a5f\u80fd\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3002\n\t * @throws NoSuchAlgorithmException\t\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u4f7f\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3002\n\t * @throws NoSuchPaddingException\t\u30d1\u30c7\u30a3\u30f3\u30b0\u304c\u4f7f\u7528\u3067\u304d\u306a\u3044\u5834\u5408\u3002\n\t * @throws InvalidKeyException\t\t\u30ad\u30fc\u306e\u6307\u5b9a\u304c\u7121\u52b9\u306a\u5834\u5408\u3002\n\t */\n\tprivate static Cipher createCipher(int mode) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {\n\t\tSecretKeySpec secretKeySpec = new SecretKeySpec(SECRET_KEY.getBytes(), ALGORITHM);\n\t\tCipher cipher = Cipher.getInstance(ALGORITHM);\n\t\tcipher.init(mode, secretKeySpec);\n\t\treturn cipher;\n\t}\n}\n```\n\n\u6b21\u306b\u76f4\u524d\u306e\u7d50\u679c\u304b\u3089\u9593\u9055\u3048\u305f\u554f\u984c\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\u3067\u3059\u304c\u3001\u30e6\u30fc\u30b6\u306b\u7d10\u3065\u304f\u6700\u65b0\u306e\u5c65\u6b74\u60c5\u5831\u306b\u3042\u308b\u56de\u7b54\u3092\u53d6\u5f97\u3057\u305f\u5f8c\u4e0d\u6b63\u89e3\u306e\u3082\u306e\u306e\u307f\u3092\u53d6\u5f97\u3059\u308b\u3068\u3044\u3046\u4ed5\u69d8\u3067\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n```xml:homework.xml\n\t<!-- \u76f4\u8fd1\u306e\u56de\u7b54\u5c65\u6b74\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b -->\n\t<named-query name=\"Answer.findLatestHistory\">\n\t\t<query><![CDATA[\n\t\tSELECT\n\t\t\ta\n\t\tFROM\n\t\t\tAnswer a\n\t\tWHERE\n\t\t\ta.history.historyId =\n\t\t\t(\n\t\t\t\tSELECT\n\t\t\t\t\tmax(h.historyId)\n\t\t\t\tFROM\n\t\t\t\t\tHistory h\n\t\t\t\tWHERE\n\t\t\t\t\th.user.userId = :userId\n\t\t\t)\n\t\tORDER BY\n\t\t\ta.answerId\n\t\t]]></query>\n\t</named-query>\n```\n\n```java:UserService.java\n\tprivate List<Answer> getLatestWrongAnswers(User user) {\n\t\tList<Answer> answers = entityManager\n\t\t\t\t.createNamedQuery(\"Answer.findLatestHistory\", Answer.class)\n\t\t\t\t.setParameter(\"userId\", user.getUserId())\n\t\t\t\t.getResultList();\n\t\treturn answers.stream()\n\t\t\t\t.filter(answer -> StringUtils.equals(answer.getCorrectWrong(), CorrectWrong.WRONG))\n\t\t\t\t.collect(Collectors.toList());\n\t}\n```\n\n- getResultList \u3067\u5024\u3092\u53d6\u5f97\u3057\u305f\u5f8c\u3001Java8 \u306e Stream API \u3067\u4e0d\u6b63\u89e3\u306e\u3082\u306e\u306e\u307f\u3092\u30d5\u30a3\u30eb\u30bf\u30fc\u3057\u307e\u3059\u3002\n\n\u8a8d\u8a3c\u51e6\u7406\u3068\u8aa4\u7b54\u554f\u984c\u53d6\u5f97\u51e6\u7406\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u30ed\u30b0\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```java:UserService.java\n\tpublic Responce login(User auth) {\n\t\tResponce responce = new Responce();\n\t\tUser user = authenticate(auth.getAccountId(), auth.getPassword());\n\t\tresponce.setUser(user);\n\t\tif (user != null) {\n\t\t\tresponce.setAnswers(getLatestWrongAnswers(user));\n\t\t}\n\t\treturn responce;\n\t}\n```\n\n\u3068\u308a\u3042\u3048\u305a\u3001DB\u3078\u306e\u30a2\u30af\u30bb\u30b9\u51e6\u7406\u3092\u66f8\u3044\u305f\u306e\u3067\u3001\u6b21\u306f\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\n[RESTEasy\u3068JPA\u3068AngularJS\u3092\u4f7f\u3063\u3066Web\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u308b\uff15\uff08JPA\u306e\u5358\u4f53\u30c6\u30b9\u30c8\uff09](http://qiita.com/1roh/items/ca154cf6e1683f230a4a)\u3078\n", "tags": ["jpa"]}