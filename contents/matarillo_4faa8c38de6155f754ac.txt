{"tags": ["F#", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": " More than 1 year has passed since last update.\u7b49\u5dee\u6570\u5217\u3092\u7a4d\u307f\u91cd\u306d\u3066\u3044\u3063\u305f\u307b\u3046\u304c\u5358\u7d14\u3060\u3063\u305f\u3002(1)\u306f\u96e3\u3057\u304f\u8003\u3048\u3059\u304e\u3002\n\u304b\u304b\u3063\u305f\u6642\u9593\u306f(1)\u306e\u5f8c30\u5206\u3050\u3089\u3044\u304b\u306a\u3002\u8aad\u307f\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u7d30\u304b\u3044\u4fee\u6b63\u306f\u3044\u304f\u3064\u304b\u3057\u3066\u3044\u308b\u3051\u3069\u3002\n\narithmetic.fs\nlet isArithmetic = function\n  | x0::x1::x2::_ -> x0-x1=x1-x2\n  | _             -> true\n\nlet addElement xss e =\n  seq {\n    for xs in xss do\n      yield xs\n      let ys = e::xs\n      if isArithmetic ys then yield ys\n  }\n\nlet longestArithmeticSequence =\n  Seq.fold addElement (Seq.singleton [])\n  >> Seq.maxBy (List.length)\n\nlet solve (s:string) =\n  s.ToCharArray()\n  |> Array.toList\n  |> List.map (fun c -> \"0123456789abcdefghijklmnopqrstuvwxyz\".IndexOf(c))\n  |> longestArithmeticSequence\n  |> List.length\n\n(* for test *)\n\ntype TestResult = Success | Failure\n\nlet test target expected =\n  let actual = solve target\n  printfn \"%A\" (if expected = actual then Success else Failure)\n\n[<EntryPoint>]\nlet main args =\n  test \"12345abcz\" 5\n  test \"012abku\" 4\n  test \"01245689cdeghik\" 6\n  test \"0\" 1\n  test \"m\" 1\n  test \"01\" 2\n  test \"az\" 2\n  test \"0az\" 2\n  test \"0ak\" 3\n  test \"05ak\" 3\n  test \"01349acdrsuv\" 2\n  test \"01245789efgipqstux\" 3\n  test \"0123456789abcdefghijklmnopqrstuvwxyz\" 36\n  test \"02468acegikmoqsuwy\" 18\n  test \"0369cfilorux\" 12\n  test \"048cgkosw\" 9\n  test \"05afkpuz\" 8\n  test \"0123456789abcdefghjklmnopqrstuvwxyz\" 18\n  test \"0123456789bcdefghijklmopqrstuvwxyz\" 12\n  test \"0156abfgklpquv\" 7\n  test \"0167cdijopuv\" 6\n  test \"0178eflmst\" 5\n  test \"0189ghopwx\" 5\n  test \"019aijrs\" 4\n  test \"012567abcfghklmpqruvw\" 7\n  test \"012678cdeijkopquvw\" 6\n  test \"012789efglmnstu\" 5\n  test \"01289aghiopqwxy\" 5\n  test \"0129abijkrst\" 4\n  test \"01235678abcdfghiklmnpqrsuvwx\" 7\n  test \"01236789cdefijklopqruvwx\" 12\n  test \"0123789aefghlmnostuv\" 5\n  test \"012389abghijopqrwxyz\" 5\n  test \"01239abcijklrstu\" 4\n  test \"368acdknouvz\" 4\n  test \"369chikmnopqruwx\" 6\n  test \"05689cdefghijklmnopqrstvwy\" 18\n  test \"2489abdeiklrsuvwz\" 4\n  test \"678bhijklnpqrsuvwxyz\" 6\n  test \"1246cfjkopquxz\" 5\n  test \"123459abcefhilmotuvx\" 6\n  test \"02578acdefikmopqsuvwxz\" 8\n  test \"135abdefghijlopstuwz\" 7\n  test \"0126789fgjnotuvxy\" 5\n  test \"2345678defjkmnoqrtvwxy\" 7\n  test \"02568bdemnostw\" 5\n  test \"145689bdfhilnqrstvwxz\" 6\n  test \"4aghjrtuvwxyz\" 7\n  test \"158achklmqstwy\" 3\n  test \"012346abceghjknortv\" 5\n  0\n\n\n\u7b49\u5dee\u6570\u5217\u3092\u7a4d\u307f\u91cd\u306d\u3066\u3044\u3063\u305f\u307b\u3046\u304c\u5358\u7d14\u3060\u3063\u305f\u3002(1)\u306f\u96e3\u3057\u304f\u8003\u3048\u3059\u304e\u3002\n\u304b\u304b\u3063\u305f\u6642\u9593\u306f(1)\u306e\u5f8c30\u5206\u3050\u3089\u3044\u304b\u306a\u3002\u8aad\u307f\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u7d30\u304b\u3044\u4fee\u6b63\u306f\u3044\u304f\u3064\u304b\u3057\u3066\u3044\u308b\u3051\u3069\u3002\n\n```fsharp:arithmetic.fs\nlet isArithmetic = function\n  | x0::x1::x2::_ -> x0-x1=x1-x2\n  | _             -> true\n\nlet addElement xss e =\n  seq {\n    for xs in xss do\n      yield xs\n      let ys = e::xs\n      if isArithmetic ys then yield ys\n  }\n\nlet longestArithmeticSequence =\n  Seq.fold addElement (Seq.singleton [])\n  >> Seq.maxBy (List.length)\n\nlet solve (s:string) =\n  s.ToCharArray()\n  |> Array.toList\n  |> List.map (fun c -> \"0123456789abcdefghijklmnopqrstuvwxyz\".IndexOf(c))\n  |> longestArithmeticSequence\n  |> List.length\n\n(* for test *)\n\ntype TestResult = Success | Failure\n\nlet test target expected =\n  let actual = solve target\n  printfn \"%A\" (if expected = actual then Success else Failure)\n\n[<EntryPoint>]\nlet main args =\n  test \"12345abcz\" 5\n  test \"012abku\" 4\n  test \"01245689cdeghik\" 6\n  test \"0\" 1\n  test \"m\" 1\n  test \"01\" 2\n  test \"az\" 2\n  test \"0az\" 2\n  test \"0ak\" 3\n  test \"05ak\" 3\n  test \"01349acdrsuv\" 2\n  test \"01245789efgipqstux\" 3\n  test \"0123456789abcdefghijklmnopqrstuvwxyz\" 36\n  test \"02468acegikmoqsuwy\" 18\n  test \"0369cfilorux\" 12\n  test \"048cgkosw\" 9\n  test \"05afkpuz\" 8\n  test \"0123456789abcdefghjklmnopqrstuvwxyz\" 18\n  test \"0123456789bcdefghijklmopqrstuvwxyz\" 12\n  test \"0156abfgklpquv\" 7\n  test \"0167cdijopuv\" 6\n  test \"0178eflmst\" 5\n  test \"0189ghopwx\" 5\n  test \"019aijrs\" 4\n  test \"012567abcfghklmpqruvw\" 7\n  test \"012678cdeijkopquvw\" 6\n  test \"012789efglmnstu\" 5\n  test \"01289aghiopqwxy\" 5\n  test \"0129abijkrst\" 4\n  test \"01235678abcdfghiklmnpqrsuvwx\" 7\n  test \"01236789cdefijklopqruvwx\" 12\n  test \"0123789aefghlmnostuv\" 5\n  test \"012389abghijopqrwxyz\" 5\n  test \"01239abcijklrstu\" 4\n  test \"368acdknouvz\" 4\n  test \"369chikmnopqruwx\" 6\n  test \"05689cdefghijklmnopqrstvwy\" 18\n  test \"2489abdeiklrsuvwz\" 4\n  test \"678bhijklnpqrsuvwxyz\" 6\n  test \"1246cfjkopquxz\" 5\n  test \"123459abcefhilmotuvx\" 6\n  test \"02578acdefikmopqsuvwxz\" 8\n  test \"135abdefghijlopstuwz\" 7\n  test \"0126789fgjnotuvxy\" 5\n  test \"2345678defjkmnoqrtvwxy\" 7\n  test \"02568bdemnostw\" 5\n  test \"145689bdfhilnqrstvwxz\" 6\n  test \"4aghjrtuvwxyz\" 7\n  test \"158achklmqstwy\" 3\n  test \"012346abceghjknortv\" 5\n  0\n```"}