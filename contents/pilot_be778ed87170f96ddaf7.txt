{"tags": ["GoogleSpreadSheet"], "context": "http://qiita.com/pilot/items/85bae4e5d5e35ffa7019 \u306e\u7d9a\u304d\n\n\u3084\u3063\u305f\u3053\u3068\n\n2. Java\u5074\n\u4ee5\u4e0b\u3001Windows\u4e0a\u3067\n\u5f8c\u3067eclipse\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u300cmytestapp1\u300d\u3092\u4f5c\u6210\n\u5f53\u8a72\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n\nbuild.gradle\napply plugin: \"java\"\napply plugin: \"application\"\napply plugin: \"eclipse\"\n\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    compile \"com.google.api-client:google-api-client:1.22.0\"\n    compile \"com.google.oauth-client:google-oauth-client-jetty:1.22.0\"\n    compile \"com.google.apis:google-api-services-drive:v3-rev49-1.22.0\"\n    compile \"com.google.apis:google-api-services-sheets:v4-rev34-1.22.0\"\n    compile \"org.slf4j:slf4j-api:1.7.21\"\n    compile \"org.slf4j:jul-to-slf4j:1.7.21\" // Google\u30e9\u30a4\u30d6\u30e9\u30ea\u304cjava.util.logging\u3092\u4f7f\u3063\u3066\u3044\u308b\u305f\u3081\n    compile \"ch.qos.logback:logback-classic:1.1.7\"\n}\n\ncompileJava {\n    options.encoding = \"UTF-8\"\n}\nsourceCompatibility = \"1.8\"\ntargetCompatibility = \"1.8\"\nmainClassName = \"mytestapp1.MyTestApp1\"\n\ntask wrapper(type: Wrapper) {\n    gradleVersion = \"3.1\"\n}\n\n\n\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3067\u5f53\u8a72\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u4ee5\u4e0b\u3092\u5b9f\u884c\n\nmkdir src\\main\\java src\\main\\resources\ngradle eclipse\n\neclipse\u3067\u5f53\u8a72\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8(\u300c\u65e2\u5b58\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30ef\u30fc\u30af\u30b9\u30da\u30fc\u30b9\u3078\u300d)\n\u300c\u3084\u3063\u305f\u3053\u3068 \u305d\u306e1\u300d\u306e\u6700\u5f8c\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fJSON\u30d5\u30a1\u30a4\u30eb\u3092src/main/resources\u306b\u300cgoogle_client_secret.json\u300d\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u914d\u7f6e\neclipse\u4e0a\u3067\u4ee5\u4e0b\u306e\u65b0\u898f\u30af\u30e9\u30b9\u30fbXML\u3092\u4f5c\u6210\n\nsrc/main/java/mytestapp1/GoogleService.java\npackage mytestapp1;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.security.GeneralSecurityException;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.api.client.auth.oauth2.Credential;\nimport com.google.api.client.auth.oauth2.CredentialRefreshListener;\nimport com.google.api.client.auth.oauth2.TokenErrorResponse;\nimport com.google.api.client.auth.oauth2.TokenResponse;\nimport com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;\nimport com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.client.util.store.FileDataStoreFactory;\nimport com.google.api.services.drive.Drive;\nimport com.google.api.services.drive.model.File;\nimport com.google.api.services.sheets.v4.Sheets;\n\npublic class GoogleService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleService.class);\n\n    // Global instance of the JSON factory.\n    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();\n\n    // Global instance of the HTTP transport.\n    private static HttpTransport HTTP_TRANSPORT = null;\n\n    // Reader for client secret.\n    private Reader clientSecretReader;\n\n    // Collection of authorization scopes\n    private Collection<String> authorizationScopes;\n\n    // Directory to store user credentials\n    private String credentialStoreDirectory;\n\n    // application name\n    private String applicationName;\n\n    /**\n     * Constructor.\n     *\n     * @param clientSecretReader reader for client secret\n     * @param authorizationScopes collection of authorization scopes\n     * @param credentialStoreDirectory directory to store user credentials\n     * @param applicationName application name\n     */\n    public GoogleService(Reader clientSecretReader, Collection<String> authorizationScopes, String credentialStoreDirectory, String applicationName) {\n        this.clientSecretReader = clientSecretReader;\n        this.authorizationScopes = authorizationScopes;\n        this.credentialStoreDirectory = credentialStoreDirectory;\n        this.applicationName = applicationName;\n    }\n\n    // Credential.\n    private Credential credential = null;\n\n    /**\n     * Creates an authorized Credential object.\n     *\n     * @throws IOException\n     * @throws GeneralSecurityException\n     */\n    public void authorize() throws IOException, GeneralSecurityException {\n        if (credential != null) {\n            return;\n        }\n        // Load client secrets.\n        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, clientSecretReader);\n        // instance of the {@link FileDataStoreFactory}.\n        FileDataStoreFactory dataStoreFactory = new FileDataStoreFactory(new java.io.File(credentialStoreDirectory));\n        // \u2191 Windows\u3067\u306f\u300cunable to change permissions\uff5e\u300d\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u308b\n        if (HTTP_TRANSPORT == null) {\n            HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();\n        }\n        // Build flow and trigger user authorization request.\n        Builder builder = new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, authorizationScopes);\n        builder.setDataStoreFactory(dataStoreFactory).setAccessType(\"offline\");\n        // \u2191\n        // AccessType\u300coffline\u300d\u3067RefreshToken\u3092\u5f97\u308b(AccessToken\u306eexpire\u524d60\u79d2\u4ee5\u5f8c\u306eAPI\u547c\u51fa\u6642\u306b\u81ea\u52d5refresh\u304c\u884c\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308b)\n        builder.addRefreshListener(new CredentialRefreshListener() {\n            @Override\n            public void onTokenResponse(Credential credential, TokenResponse tokenResponse) throws IOException {\n                LOGGER.info(\"AccessToken\u306erefresh\u304c\u6210\u529f\u3057\u307e\u3057\u305f\u3002(AccessToken=[{}], ExpiresInSeconds={}, RefreshToken=[{}])\", credential.getAccessToken(), credential.getExpiresInSeconds(), credential.getRefreshToken());\n            }\n\n            @Override\n            public void onTokenErrorResponse(Credential credential, TokenErrorResponse tokenErrorResponse) throws IOException {\n                LOGGER.error(\"AccessToken\u306erefresh\u304c\u5931\u6557\u3057\u307e\u3057\u305f\u3002(Error=[{}], ErrorDescription=[{}], ErrorUri=[{}])\", tokenErrorResponse.getError(), tokenErrorResponse.getErrorDescription(), tokenErrorResponse.getErrorUri());\n            }\n        });\n        // \u2191 AccessToken\u306erefresh\u5f8c\u306eListner\n        GoogleAuthorizationCodeFlow flow = builder.build();\n        credential = new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize(\"user\");\n        // \u2191 \u521d\u56de\u306f\u30d6\u30e9\u30a6\u30b6\u304cGoogle\u306e\u8a31\u53ef\u30ea\u30af\u30a8\u30b9\u30c8\u753b\u9762\u3092\u8868\u793a\u3059\u308b(\u95a2\u9023\u30ed\u30b0\u3082\u51fa\u529b\u3055\u308c\u308b)\n        // \u2192 \u300c\u8a31\u53ef\u300d\u62bc\u4e0b\u3067\u30ed\u30fc\u30ab\u30ebJetty\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u3001Credential\u304c\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u308b\n        // \u2192 \u4ee5\u5f8c\u306fCredential\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u9650\u308a\u30d6\u30e9\u30a6\u30b6\u306f\u8d77\u52d5\u3057\u306a\u3044(\u81ea\u52d5refresh\u306e\u304a\u304b\u3052)\n        // \u2192 \u30b5\u30fc\u30d0\u3067\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f\u30ed\u30fc\u30ab\u30ebPC\u3067\u4f5c\u6210\u3057\u305fCredential\u30d5\u30a1\u30a4\u30eb\u3092\u30b5\u30fc\u30d0\u306b\u914d\u7f6e\u3057\u3066\u304a\u304f\n        // \u2192 \u4f55\u3089\u304b\u306e\u30a8\u30e9\u30fc\u3067\u30b5\u30fc\u30d0\u4e0a\u306eCredential\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u52b9\u306b\u306a\u3063\u305f\u5834\u5408\u306f\u5f53\u6642\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u5ea6\u914d\u7f6e\u3059\u308b\n        LOGGER.info(\"AccessToken\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002(AccessToken=[{}], ExpiresInSeconds={}, RefreshToken=[{}])\", credential.getAccessToken(), credential.getExpiresInSeconds(), credential.getRefreshToken());\n    }\n\n    /**\n     * Build and return an authorized Drive client service.\n     *\n     * @return an authorized Drive client service\n     * @throws GeneralSecurityException\n     * @throws IOException\n     */\n    public Drive getDriveService() throws IOException, GeneralSecurityException {\n        if (credential == null) {\n            authorize();\n        }\n        return new Drive.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential).setApplicationName(applicationName).build();\n    }\n\n    /**\n     * Build and return an authorized Sheets API client service.\n     *\n     * @return an authorized Sheets API client service\n     * @throws GeneralSecurityException\n     * @throws IOException\n     */\n    public Sheets getSheetsService() throws IOException, GeneralSecurityException {\n        if (credential == null) {\n            authorize();\n        }\n        return new Sheets.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential).setApplicationName(applicationName).build();\n    }\n\n    SheetsWrapper getSheetsWrapperWithWorksheet(String folderName, String spreadsheetName, String worksheetName) throws IOException, GeneralSecurityException {\n        DriveWrapper driveWrapper = new DriveWrapper(getDriveService());\n        Sheets sheetsService = getSheetsService();\n\n        List<File> folderList = driveWrapper.searchFolder(folderName, DriveWrapper.ROOT_FOLDER_ID);\n        // \u2191 AccessToken\u306eexpire\u524d60\u79d2\u4ee5\u5f8c\u3001\u3053\u3053\u3067AccessToken\u306erefresh\u304c\u5b9f\u884c\u3055\u308c\u308b\n        String folderId = null;\n        if (folderList.size() == 0) {\n            folderId = driveWrapper.createFolder(folderName, DriveWrapper.ROOT_FOLDER_ID).getId();\n            LOGGER.info(\"\u30d5\u30a9\u30eb\u30c0 '{}' \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\", folderName);\n        } else if (folderList.size() == 1) {\n            folderId = folderList.get(0).getId();\n        } else {\n            throw new IOException(String.format(\"\u30d5\u30a9\u30eb\u30c0 '%s' \u304c\u8907\u6570\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002\", folderName));\n        }\n\n        List<File> spreadsheetList = driveWrapper.searchSpreadsheet(spreadsheetName, folderId);\n        SheetsWrapper sheetsWrapper = null;\n        if (spreadsheetList.size() == 0) {\n            String spreadsheetId = driveWrapper.createSpreadsheet(spreadsheetName, folderId).getId();\n            sheetsWrapper = new SheetsWrapper(sheetsService, spreadsheetId);\n            LOGGER.info(\"\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8 '{}' \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\", spreadsheetName);\n            sheetsWrapper.renameWorksheet(0, worksheetName);\n            LOGGER.info(\"\u30ef\u30fc\u30af\u30b7\u30fc\u30c8 '{}' \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\", worksheetName);\n        } else if (spreadsheetList.size() == 1) {\n            String spreadsheetId = spreadsheetList.get(0).getId();\n            sheetsWrapper = new SheetsWrapper(sheetsService, spreadsheetId);\n            if (sheetsWrapper.getWorksheetProperties(worksheetName) == null) {\n                sheetsWrapper.addWorksheet(worksheetName);\n                LOGGER.info(\"\u30ef\u30fc\u30af\u30b7\u30fc\u30c8 '{}' \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\", worksheetName);\n            }\n        } else {\n            throw new IOException(String.format(\"\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8 '%s' \u304c\u8907\u6570\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002\", spreadsheetName));\n        }\n\n        return sheetsWrapper;\n    }\n}\n\n\n\nsrc/main/java/mytestapp1/RequestUtil.java\npackage mytestapp1;\n\nimport java.io.IOException;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.api.client.googleapis.json.GoogleJsonResponseException;\nimport com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest;\n\npublic class RequestUtil {\n    private static final Logger LOGGER = LoggerFactory.getLogger(RequestUtil.class);\n    private static final int RETRY_COUNT = 10;\n    private static final int RETRY_INTERVAL_SECONDS = 10;\n\n    static <R extends AbstractGoogleJsonClientRequest<T>, T> T executeWithRetry(R request) throws IOException {\n        for (int i = 0; i < (RETRY_COUNT - 1); i++) {\n            try {\n                return request.execute();\n            } catch (GoogleJsonResponseException e) {\n                if (e.getStatusCode() == 503) {\n                    LOGGER.warn(\"Google\u304b\u3089\u30ea\u30c8\u30e9\u30a4\u53ef\u80fd\u306a\u30a8\u30e9\u30fc\u304c\u8fd4\u5374\u3055\u308c\u307e\u3057\u305f\u3002\", e);\n                    LOGGER.warn(\"{}\u79d2\u5f8c\u306b\u30ea\u30c8\u30e9\u30a4\u3092\u884c\u3044\u307e\u3059\u3002({}/{}\u56de\u76ee)\", RETRY_INTERVAL_SECONDS * (i + 1), i + 1, RETRY_COUNT);\n                    try {\n                        Thread.sleep(RETRY_INTERVAL_SECONDS * (i + 1) * 1000L);\n                    } catch (InterruptedException e2) {\n                        // do nothing\n                    }\n                }\n            }\n        }\n        return request.execute();\n    }\n}\n\n\n\nsrc/main/java/mytestapp1/DriveWrapper.java\npackage mytestapp1;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport com.google.api.services.drive.Drive;\nimport com.google.api.services.drive.model.File;\n\npublic class DriveWrapper {\n    private Drive driveService;\n    private static final String QUERY_FORMAT = \"name = '%s' and '%s' in parents and mimeType = '%s' and trashed = false\";\n    private static final String MIMETYPE_FOLDER = \"application/vnd.google-apps.folder\";\n    private static final String MIMETYPE_SPREADSHEET = \"application/vnd.google-apps.spreadsheet\";\n    public static final String ROOT_FOLDER_ID = \"root\";\n\n    public DriveWrapper(Drive driveService) {\n        this.driveService = driveService;\n    }\n\n    public List<File> searchFile(String name, String parentFolderId, String mimeType) throws IOException {\n        String query = String.format(QUERY_FORMAT, name, parentFolderId, mimeType);\n        return RequestUtil.executeWithRetry(driveService.files().list().setQ(query)).getFiles();\n    }\n\n    public List<File> searchFolder(String name, String parentFolderId) throws IOException {\n        return searchFile(name, parentFolderId, MIMETYPE_FOLDER);\n    }\n\n    public List<File> searchSpreadsheet(String name, String parentFolderId) throws IOException {\n        return searchFile(name, parentFolderId, MIMETYPE_SPREADSHEET);\n    }\n\n    public File createFile(String name, String parentFolderId, String mimeType) throws IOException {\n        File metadata = new File().setName(name).setMimeType(mimeType).setParents(Arrays.asList(parentFolderId));\n        return RequestUtil.executeWithRetry(driveService.files().create(metadata));\n    }\n\n    public File createFolder(String name, String parentFolderId) throws IOException {\n        return createFile(name, parentFolderId, MIMETYPE_FOLDER);\n    }\n\n    public File createSpreadsheet(String name, String parentFolderId) throws IOException {\n        return createFile(name, parentFolderId, MIMETYPE_SPREADSHEET);\n    }\n}\n\n\n\nsrc/main/java/mytestapp1/SheetsWrapper.java\npackage mytestapp1;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport com.google.api.services.sheets.v4.Sheets;\nimport com.google.api.services.sheets.v4.model.AddSheetRequest;\nimport com.google.api.services.sheets.v4.model.BatchUpdateSpreadsheetRequest;\nimport com.google.api.services.sheets.v4.model.GridProperties;\nimport com.google.api.services.sheets.v4.model.Request;\nimport com.google.api.services.sheets.v4.model.Sheet;\nimport com.google.api.services.sheets.v4.model.SheetProperties;\nimport com.google.api.services.sheets.v4.model.Spreadsheet;\nimport com.google.api.services.sheets.v4.model.UpdateSheetPropertiesRequest;\nimport com.google.api.services.sheets.v4.model.ValueRange;\n\npublic class SheetsWrapper {\n    private Sheets sheetsService;\n    private Spreadsheet spreadsheet;\n\n    public SheetsWrapper(Sheets sheetsService, String fileId) throws IOException {\n        this.sheetsService = sheetsService;\n        this.spreadsheet = RequestUtil.executeWithRetry(sheetsService.spreadsheets().get(fileId).setIncludeGridData(false));\n    }\n\n    public void renameWorksheet(int index, String newName) throws IOException {\n        SheetProperties sheetProperties = new SheetProperties().setIndex(index).setTitle(newName);\n        UpdateSheetPropertiesRequest updateSheetPropertiesRequest = new UpdateSheetPropertiesRequest().setProperties(sheetProperties).setFields(\"title\");\n        List<Request> requests = new ArrayList<>();\n        requests.add(new Request().setUpdateSheetProperties(updateSheetPropertiesRequest));\n        RequestUtil.executeWithRetry(sheetsService.spreadsheets().batchUpdate(spreadsheet.getSpreadsheetId(), new BatchUpdateSpreadsheetRequest().setRequests(requests)));\n        spreadsheet = RequestUtil.executeWithRetry(sheetsService.spreadsheets().get(spreadsheet.getSpreadsheetId()).setIncludeGridData(false));\n        // \u2191\n        // rename\u5f8c\u306egetSheets().get().getProperties().getTitle()\u304crename\u524d\u306e\u5024\u3092\u8fd4\u3059\u554f\u984c\u306e\u5bfe\u5fdc\n    }\n\n    // \u898b\u3064\u304b\u3089\u306a\u3044\u3068\u304d\u306fnull\u3092\u8fd4\u3059\n    public SheetProperties getWorksheetProperties(String worksheetName) {\n        for (int index = 0; index < spreadsheet.getSheets().size(); index++) {\n            Sheet ws = spreadsheet.getSheets().get(index);\n            if (ws.getProperties().getTitle().equals(worksheetName)) {\n                return ws.getProperties();\n            }\n        }\n        return null;\n    }\n\n    public void addWorksheet(String worksheetName) throws IOException {\n        SheetProperties sheetProperties = new SheetProperties().setTitle(worksheetName);\n        AddSheetRequest addSheetRequest = new AddSheetRequest().setProperties(sheetProperties);\n        List<Request> requests = new ArrayList<>();\n        requests.add(new Request().setAddSheet(addSheetRequest));\n        RequestUtil.executeWithRetry(sheetsService.spreadsheets().batchUpdate(spreadsheet.getSpreadsheetId(), new BatchUpdateSpreadsheetRequest().setRequests(requests)));\n        spreadsheet = RequestUtil.executeWithRetry(sheetsService.spreadsheets().get(spreadsheet.getSpreadsheetId()).setIncludeGridData(false));\n        // \u2191 add\u5f8c\u306egetSheets()\u304cadd\u3057\u305f\u30b7\u30fc\u30c8\u3092\u8fd4\u3055\u306a\u3044\u554f\u984c\u306e\u5bfe\u5fdc\n    }\n\n    // \u5024\u53d6\u5f97\n    public List<List<Object>> getValues(String worksheetName, int startColNum, int startRowNum, int endColNum, int endRowNum) throws IOException {\n        boolean specifyColRow = startColNum > 0 || startRowNum > 0 || endColNum > 0 || endRowNum > 0;\n        StringBuilder rangeBuf = new StringBuilder();\n        rangeBuf.append(worksheetName);\n        rangeBuf.append(specifyColRow ? '!' : \"\");\n        rangeBuf.append((startColNum > 0) ? bijectiveBase26(startColNum) : \"\");\n        rangeBuf.append((startRowNum > 0) ? startRowNum : \"\");\n        rangeBuf.append(specifyColRow ? ':' : \"\");\n        rangeBuf.append((endColNum > 0) ? bijectiveBase26(endColNum) : \"\");\n        rangeBuf.append((endRowNum > 0) ? endRowNum : \"\");\n        return RequestUtil.executeWithRetry(sheetsService.spreadsheets().values().get(spreadsheet.getSpreadsheetId(), rangeBuf.toString())).getValues();\n    }\n\n    // \u6307\u5b9a\u5217\u3067\u5024\u306e\u5165\u3063\u3066\u3044\u308b\u6700\u5f8c\u306e\u884c\u306e\u884c\u756a\u53f7\u3092\u53d6\u5f97\n    // (\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u540d\u306e\u307f\u6307\u5b9a\u3059\u308c\u3070\u300c\u5168\u5217\u3067\u300d\u3068\u306a\u308b\u304c\u30e1\u30e2\u30ea\u7bc0\u7d04\u306e\u305f\u3081\u5217\u6307\u5b9a\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f)\n    public int getLastRowNumberWithValue(String worksheetName, int colNum) throws IOException {\n        List<List<Object>> values = getValues(worksheetName, colNum, 0, colNum, 0);\n        if (values != null) {\n            return values.size();\n        }\n        return 0;\n    }\n\n    // \u5024\u66f8\u8fbc\n    // \u6307\u5b9a\u5217\u30fb\u884c\u304c\u73fe\u5728\u306e\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u306e\u5927\u304d\u3055\u3092\u8d85\u3048\u308b\u5834\u5408\u306b\u306f\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u3092\u5fc5\u8981\u306a\u3060\u3051\u62e1\u5f35\u3059\u308b\n    // \u6307\u5b9a\u4f4d\u7f6e\u306b\u65e2\u5b58\u306e\u5024\u304c\u3042\u308c\u3070\u4e0a\u66f8\u304d\u3059\u308b\n    public void setValues(String worksheetName, int startColNum, int startRowNum, Object[][] values) throws IOException {\n        List<List<Object>> valueList = new ArrayList<>();\n        for (Object[] row : values) {\n            valueList.add(Arrays.asList(row));\n        }\n        setValues(worksheetName, startColNum, startRowNum, valueList);\n    }\n\n    public void setValues(String worksheetName, int startColNum, int startRowNum, Object[] values) throws IOException {\n        setValues(worksheetName, startColNum, startRowNum, new Object[][] { values });\n    }\n\n    public void setValue(String worksheetName, int colNum, int rowNum, Object value) throws IOException {\n        setValues(worksheetName, colNum, rowNum, new Object[][] { { value } });\n    }\n\n    public void setValues(String worksheetName, int startColNum, int startRowNum, List<List<Object>> valueList) throws IOException {\n        ValueRange valueRange = new ValueRange().setValues(valueList).setMajorDimension(\"ROWS\");\n        String range = worksheetName + \"!\" + bijectiveBase26(startColNum) + startRowNum;\n        // \u958b\u59cb\u4f4d\u7f6e\u304c\u7bc4\u56f2\u5185\u306a\u3089update\u3001\u7bc4\u56f2\u5916\u306a\u3089append\n        // (update\u306f\u958b\u59cb\u4f4d\u7f6e\u304c\u7bc4\u56f2\u5916\u3060\u3068\u30a8\u30e9\u30fc\u3001\u958b\u59cb\u4f4d\u7f6e\u3055\u3048\u7bc4\u56f2\u5185\u306a\u3089\u305d\u306e\u5f8c\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5217\u30fb\u884c\u3092\u8ffd\u52a0\u3057\u3066\u304f\u308c\u308b)\n        // (append\u306f\u958b\u59cb\u4f4d\u7f6e\u304c\u7bc4\u56f2\u5916\u3067\u3082\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5217\u30fb\u884c\u3092\u8ffd\u52a0\u3057\u3066\u304f\u308c\u308b\u304c\u3001\u958b\u59cb\u4f4d\u7f6e\u304c\u7a7a\u304c\u306a\u3044\u5834\u5408\u306b\u4e0a\u66f8\u304d\u3057\u3066\u304f\u308c\u306a\u3044)\n        GridProperties gridProperties = getWorksheetProperties(worksheetName).getGridProperties();\n        if (startColNum <= gridProperties.getColumnCount() && startRowNum <= gridProperties.getRowCount()) {\n            RequestUtil.executeWithRetry(sheetsService.spreadsheets().values().update(spreadsheet.getSpreadsheetId(), range, valueRange).setValueInputOption(\"USER_ENTERED\"));\n        } else {\n            RequestUtil.executeWithRetry(sheetsService.spreadsheets().values().append(spreadsheet.getSpreadsheetId(), range, valueRange).setValueInputOption(\"USER_ENTERED\"));\n        }\n    }\n\n    // \u5217\u756a\u53f7\u3092\u5217\u756a\u53f7\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\n    private String bijectiveBase26(int n) {\n        // https://gist.github.com/theazureshadow/4a5a032944f1c9bc0f4a \u3088\u308a\n        StringBuilder buf = new StringBuilder();\n        while (n != 0) {\n            buf.append((char) ((n - 1) % 26 + 'A'));\n            n = (n - 1) / 26;\n        }\n        return buf.reverse().toString();\n    }\n}\n\n\n\nsrc/main/java/mytestapp1/CreateCredentialFile.java\npackage mytestapp1;\n\nimport java.io.IOException;\nimport java.security.GeneralSecurityException;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.bridge.SLF4JBridgeHandler;\n\n/**\n * Google\u8a8d\u8a3c\u3092\u884c\u3044\u3001Credential\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002\n */\npublic class CreateCredentialFile {\n    private static final Logger LOGGER = LoggerFactory.getLogger(CreateCredentialFile.class);\n\n    /**\n     * Google\u8a8d\u8a3c\u3092\u884c\u3044\u3001Credential\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002<br>\n     * \u30d6\u30e9\u30a6\u30b6\u304c\u8d77\u52d5\u3057\u3001Google\u306e\u8a31\u53ef\u30ea\u30af\u30a8\u30b9\u30c8\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u3002\n     *\n     * @param args\n     * @throws IOException\n     * @throws GeneralSecurityException\n     */\n    public static void main(String[] args) throws IOException, GeneralSecurityException {\n        SLF4JBridgeHandler.removeHandlersForRootLogger();\n        SLF4JBridgeHandler.install();\n\n        MyTestApp1.getGoogleService().authorize();\n        LOGGER.info(\"Credential\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002\");\n    }\n}\n\n\n\nsrc/main/java/mytestapp1/MyTestApp1.java\npackage mytestapp1;\n\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.security.GeneralSecurityException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.bridge.SLF4JBridgeHandler;\n\nimport com.google.api.services.drive.DriveScopes;\nimport com.google.api.services.drive.model.File;\nimport com.google.api.services.sheets.v4.Sheets;\nimport com.google.api.services.sheets.v4.SheetsScopes;\n\n/**\n * Google\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3046\u3002\n */\npublic class MyTestApp1 {\n    private static final Logger LOGGER = LoggerFactory.getLogger(MyTestApp1.class);\n\n    // Application name.\n    private static final String APPLICATION_NAME = \"MyTestApp1\";\n\n    // Return reader for Google client secret.\n    private static Reader getClientSecretReader() {\n        return new InputStreamReader(MyTestApp1.class.getResourceAsStream(\"/google_client_secret.json\"));\n    }\n\n    // Google authorization scopes required by this application.\n    // If modifying these scopes, delete your previously saved credentials.\n    private static final List<String> AUTHORIZATION_SCOPE_LIST = Arrays.asList(DriveScopes.DRIVE, SheetsScopes.SPREADSHEETS);\n\n    // Directory to store Google user credentials for this application.\n    private static final String CREDENTIAL_STORE_DIRECTORY = System.getProperty(\"user.home\") + \"/.google_credentials/\" + APPLICATION_NAME;\n\n    public static void main(String[] args) throws IOException, GeneralSecurityException {\n        SLF4JBridgeHandler.removeHandlersForRootLogger();\n        SLF4JBridgeHandler.install();\n\n        final String folderName = \"\u30d5\u30a9\u30eb\u30c01\";\n        final String spreadsheetName = \"\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c81\";\n        final String worksheetName = \"\u30ef\u30fc\u30af\u30b7\u30fc\u30c81\";\n\n        // Build a new authorized API client service.\n        GoogleService googleService = getGoogleService();\n        SheetsWrapper sheetsWrapper = googleService.getSheetsWrapperWithWorksheet(folderName, spreadsheetName, worksheetName);\n        int lastRowNumberWithValue = sheetsWrapper.getLastRowNumberWithValue(worksheetName, 1);\n\n        // \u5024\u306e\u5165\u3063\u3066\u3044\u308b\u6700\u5f8c\u306e\u884c\u306e\u6b21\u306e\u884c\u304b\u3089\u66f8\u304d\u8fbc\u307f\n        Object[][] values = { { 1, \"A\" }, { 2.1D, \"B\" }, { 2.50E-3, \"C\" } };\n        sheetsWrapper.setValues(worksheetName, 1, lastRowNumWithValue + 1, values);\n        LOGGER.info(\"\u66f8\u304d\u8fbc\u307f\u307e\u3057\u305f\u3002\");\n    }\n\n    static GoogleService getGoogleService() {\n        return new GoogleService(getClientSecretReader(), AUTHORIZATION_SCOPE_LIST, CREDENTIAL_STORE_DIRECTORY, APPLICATION_NAME);\n    }\n\n    private static Reader getClientSecretReader() {\n        return new InputStreamReader(MyTestApp1.class.getResourceAsStream(\"/google_client_secret.json\"));\n    }\n}\n\n\n\nsrc/main/resources/logback.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE logback>\n<configuration>\n    <contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n        <resetJUL>true</resetJUL>\n    </contextListener>\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>\n        </encoder>\n    </appender>\n    <root level=\"INFO\">\n        <appender-ref ref=\"STDOUT\" />\n    </root>\n</configuration>\n\n\n\n3. \u5b9f\u884c\n\u307e\u305aCreateCredentialFile\u30af\u30e9\u30b9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30d6\u30e9\u30a6\u30b6\u304c\u8d77\u52d5\u3057\u3066\u4ee5\u4e0b\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\n(Google\u30ed\u30b0\u30a4\u30f3\u6e08\u306e\u30d6\u30e9\u30a6\u30b6\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u826f\u3044)\n\n\u300c\u8a31\u53ef\u300d\u62bc\u4e0b\u3067\u4ee5\u4e0b\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\n\n\u6b21\u306bMyTestApp1\u30af\u30e9\u30b9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u66f8\u304d\u8fbc\u307f\u304c\u884c\u308f\u308c\u308b\nhttp://qiita.com/pilot/items/85bae4e5d5e35ffa7019 \u306e\u7d9a\u304d\n\n\u3084\u3063\u305f\u3053\u3068\n=========\n\n2. Java\u5074\n---------\n\n\u4ee5\u4e0b\u3001Windows\u4e0a\u3067\n\n\u5f8c\u3067eclipse\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u300cmytestapp1\u300d\u3092\u4f5c\u6210\n\n\u5f53\u8a72\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n\n```build.gradle\napply plugin: \"java\"\napply plugin: \"application\"\napply plugin: \"eclipse\"\n\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    compile \"com.google.api-client:google-api-client:1.22.0\"\n    compile \"com.google.oauth-client:google-oauth-client-jetty:1.22.0\"\n    compile \"com.google.apis:google-api-services-drive:v3-rev49-1.22.0\"\n    compile \"com.google.apis:google-api-services-sheets:v4-rev34-1.22.0\"\n    compile \"org.slf4j:slf4j-api:1.7.21\"\n    compile \"org.slf4j:jul-to-slf4j:1.7.21\" // Google\u30e9\u30a4\u30d6\u30e9\u30ea\u304cjava.util.logging\u3092\u4f7f\u3063\u3066\u3044\u308b\u305f\u3081\n    compile \"ch.qos.logback:logback-classic:1.1.7\"\n}\n\ncompileJava {\n    options.encoding = \"UTF-8\"\n}\nsourceCompatibility = \"1.8\"\ntargetCompatibility = \"1.8\"\nmainClassName = \"mytestapp1.MyTestApp1\"\n\ntask wrapper(type: Wrapper) {\n    gradleVersion = \"3.1\"\n}\n```\n\n\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3067\u5f53\u8a72\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u79fb\u52d5\u3057\u3066\u4ee5\u4e0b\u3092\u5b9f\u884c\n\n* `mkdir src\\main\\java src\\main\\resources`\n* `gradle eclipse`\n\neclipse\u3067\u5f53\u8a72\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30a4\u30f3\u30dd\u30fc\u30c8(\u300c\u65e2\u5b58\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30ef\u30fc\u30af\u30b9\u30da\u30fc\u30b9\u3078\u300d)\n\n\u300c\u3084\u3063\u305f\u3053\u3068 \u305d\u306e1\u300d\u306e\u6700\u5f8c\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fJSON\u30d5\u30a1\u30a4\u30eb\u3092src/main/resources\u306b\u300cgoogle_client_secret.json\u300d\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u914d\u7f6e\n\neclipse\u4e0a\u3067\u4ee5\u4e0b\u306e\u65b0\u898f\u30af\u30e9\u30b9\u30fbXML\u3092\u4f5c\u6210\n\n```src/main/java/mytestapp1/GoogleService.java\npackage mytestapp1;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.security.GeneralSecurityException;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.api.client.auth.oauth2.Credential;\nimport com.google.api.client.auth.oauth2.CredentialRefreshListener;\nimport com.google.api.client.auth.oauth2.TokenErrorResponse;\nimport com.google.api.client.auth.oauth2.TokenResponse;\nimport com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;\nimport com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow.Builder;\nimport com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;\nimport com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;\nimport com.google.api.client.http.HttpTransport;\nimport com.google.api.client.json.JsonFactory;\nimport com.google.api.client.json.jackson2.JacksonFactory;\nimport com.google.api.client.util.store.FileDataStoreFactory;\nimport com.google.api.services.drive.Drive;\nimport com.google.api.services.drive.model.File;\nimport com.google.api.services.sheets.v4.Sheets;\n\npublic class GoogleService {\n    private static final Logger LOGGER = LoggerFactory.getLogger(GoogleService.class);\n\n    // Global instance of the JSON factory.\n    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();\n\n    // Global instance of the HTTP transport.\n    private static HttpTransport HTTP_TRANSPORT = null;\n\n    // Reader for client secret.\n    private Reader clientSecretReader;\n\n    // Collection of authorization scopes\n    private Collection<String> authorizationScopes;\n\n    // Directory to store user credentials\n    private String credentialStoreDirectory;\n\n    // application name\n    private String applicationName;\n\n    /**\n     * Constructor.\n     *\n     * @param clientSecretReader reader for client secret\n     * @param authorizationScopes collection of authorization scopes\n     * @param credentialStoreDirectory directory to store user credentials\n     * @param applicationName application name\n     */\n    public GoogleService(Reader clientSecretReader, Collection<String> authorizationScopes, String credentialStoreDirectory, String applicationName) {\n        this.clientSecretReader = clientSecretReader;\n        this.authorizationScopes = authorizationScopes;\n        this.credentialStoreDirectory = credentialStoreDirectory;\n        this.applicationName = applicationName;\n    }\n\n    // Credential.\n    private Credential credential = null;\n\n    /**\n     * Creates an authorized Credential object.\n     *\n     * @throws IOException\n     * @throws GeneralSecurityException\n     */\n    public void authorize() throws IOException, GeneralSecurityException {\n        if (credential != null) {\n            return;\n        }\n        // Load client secrets.\n        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, clientSecretReader);\n        // instance of the {@link FileDataStoreFactory}.\n        FileDataStoreFactory dataStoreFactory = new FileDataStoreFactory(new java.io.File(credentialStoreDirectory));\n        // \u2191 Windows\u3067\u306f\u300cunable to change permissions\uff5e\u300d\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u308b\n        if (HTTP_TRANSPORT == null) {\n            HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();\n        }\n        // Build flow and trigger user authorization request.\n        Builder builder = new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT, JSON_FACTORY, clientSecrets, authorizationScopes);\n        builder.setDataStoreFactory(dataStoreFactory).setAccessType(\"offline\");\n        // \u2191\n        // AccessType\u300coffline\u300d\u3067RefreshToken\u3092\u5f97\u308b(AccessToken\u306eexpire\u524d60\u79d2\u4ee5\u5f8c\u306eAPI\u547c\u51fa\u6642\u306b\u81ea\u52d5refresh\u304c\u884c\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308b)\n        builder.addRefreshListener(new CredentialRefreshListener() {\n            @Override\n            public void onTokenResponse(Credential credential, TokenResponse tokenResponse) throws IOException {\n                LOGGER.info(\"AccessToken\u306erefresh\u304c\u6210\u529f\u3057\u307e\u3057\u305f\u3002(AccessToken=[{}], ExpiresInSeconds={}, RefreshToken=[{}])\", credential.getAccessToken(), credential.getExpiresInSeconds(), credential.getRefreshToken());\n            }\n\n            @Override\n            public void onTokenErrorResponse(Credential credential, TokenErrorResponse tokenErrorResponse) throws IOException {\n                LOGGER.error(\"AccessToken\u306erefresh\u304c\u5931\u6557\u3057\u307e\u3057\u305f\u3002(Error=[{}], ErrorDescription=[{}], ErrorUri=[{}])\", tokenErrorResponse.getError(), tokenErrorResponse.getErrorDescription(), tokenErrorResponse.getErrorUri());\n            }\n        });\n        // \u2191 AccessToken\u306erefresh\u5f8c\u306eListner\n        GoogleAuthorizationCodeFlow flow = builder.build();\n        credential = new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver()).authorize(\"user\");\n        // \u2191 \u521d\u56de\u306f\u30d6\u30e9\u30a6\u30b6\u304cGoogle\u306e\u8a31\u53ef\u30ea\u30af\u30a8\u30b9\u30c8\u753b\u9762\u3092\u8868\u793a\u3059\u308b(\u95a2\u9023\u30ed\u30b0\u3082\u51fa\u529b\u3055\u308c\u308b)\n        // \u2192 \u300c\u8a31\u53ef\u300d\u62bc\u4e0b\u3067\u30ed\u30fc\u30ab\u30ebJetty\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u3001Credential\u304c\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u308b\n        // \u2192 \u4ee5\u5f8c\u306fCredential\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u9650\u308a\u30d6\u30e9\u30a6\u30b6\u306f\u8d77\u52d5\u3057\u306a\u3044(\u81ea\u52d5refresh\u306e\u304a\u304b\u3052)\n        // \u2192 \u30b5\u30fc\u30d0\u3067\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f\u30ed\u30fc\u30ab\u30ebPC\u3067\u4f5c\u6210\u3057\u305fCredential\u30d5\u30a1\u30a4\u30eb\u3092\u30b5\u30fc\u30d0\u306b\u914d\u7f6e\u3057\u3066\u304a\u304f\n        // \u2192 \u4f55\u3089\u304b\u306e\u30a8\u30e9\u30fc\u3067\u30b5\u30fc\u30d0\u4e0a\u306eCredential\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u52b9\u306b\u306a\u3063\u305f\u5834\u5408\u306f\u5f53\u6642\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u518d\u5ea6\u914d\u7f6e\u3059\u308b\n        LOGGER.info(\"AccessToken\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002(AccessToken=[{}], ExpiresInSeconds={}, RefreshToken=[{}])\", credential.getAccessToken(), credential.getExpiresInSeconds(), credential.getRefreshToken());\n    }\n\n    /**\n     * Build and return an authorized Drive client service.\n     *\n     * @return an authorized Drive client service\n     * @throws GeneralSecurityException\n     * @throws IOException\n     */\n    public Drive getDriveService() throws IOException, GeneralSecurityException {\n        if (credential == null) {\n            authorize();\n        }\n        return new Drive.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential).setApplicationName(applicationName).build();\n    }\n\n    /**\n     * Build and return an authorized Sheets API client service.\n     *\n     * @return an authorized Sheets API client service\n     * @throws GeneralSecurityException\n     * @throws IOException\n     */\n    public Sheets getSheetsService() throws IOException, GeneralSecurityException {\n        if (credential == null) {\n            authorize();\n        }\n        return new Sheets.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential).setApplicationName(applicationName).build();\n    }\n\n    SheetsWrapper getSheetsWrapperWithWorksheet(String folderName, String spreadsheetName, String worksheetName) throws IOException, GeneralSecurityException {\n        DriveWrapper driveWrapper = new DriveWrapper(getDriveService());\n        Sheets sheetsService = getSheetsService();\n\n        List<File> folderList = driveWrapper.searchFolder(folderName, DriveWrapper.ROOT_FOLDER_ID);\n        // \u2191 AccessToken\u306eexpire\u524d60\u79d2\u4ee5\u5f8c\u3001\u3053\u3053\u3067AccessToken\u306erefresh\u304c\u5b9f\u884c\u3055\u308c\u308b\n        String folderId = null;\n        if (folderList.size() == 0) {\n            folderId = driveWrapper.createFolder(folderName, DriveWrapper.ROOT_FOLDER_ID).getId();\n            LOGGER.info(\"\u30d5\u30a9\u30eb\u30c0 '{}' \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\", folderName);\n        } else if (folderList.size() == 1) {\n            folderId = folderList.get(0).getId();\n        } else {\n            throw new IOException(String.format(\"\u30d5\u30a9\u30eb\u30c0 '%s' \u304c\u8907\u6570\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002\", folderName));\n        }\n\n        List<File> spreadsheetList = driveWrapper.searchSpreadsheet(spreadsheetName, folderId);\n        SheetsWrapper sheetsWrapper = null;\n        if (spreadsheetList.size() == 0) {\n            String spreadsheetId = driveWrapper.createSpreadsheet(spreadsheetName, folderId).getId();\n            sheetsWrapper = new SheetsWrapper(sheetsService, spreadsheetId);\n            LOGGER.info(\"\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8 '{}' \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\", spreadsheetName);\n            sheetsWrapper.renameWorksheet(0, worksheetName);\n            LOGGER.info(\"\u30ef\u30fc\u30af\u30b7\u30fc\u30c8 '{}' \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\", worksheetName);\n        } else if (spreadsheetList.size() == 1) {\n            String spreadsheetId = spreadsheetList.get(0).getId();\n            sheetsWrapper = new SheetsWrapper(sheetsService, spreadsheetId);\n            if (sheetsWrapper.getWorksheetProperties(worksheetName) == null) {\n                sheetsWrapper.addWorksheet(worksheetName);\n                LOGGER.info(\"\u30ef\u30fc\u30af\u30b7\u30fc\u30c8 '{}' \u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\", worksheetName);\n            }\n        } else {\n            throw new IOException(String.format(\"\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8 '%s' \u304c\u8907\u6570\u5b58\u5728\u3057\u3066\u3044\u307e\u3059\u3002\", spreadsheetName));\n        }\n\n        return sheetsWrapper;\n    }\n}\n```\n\n```src/main/java/mytestapp1/RequestUtil.java\npackage mytestapp1;\n\nimport java.io.IOException;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.api.client.googleapis.json.GoogleJsonResponseException;\nimport com.google.api.client.googleapis.services.json.AbstractGoogleJsonClientRequest;\n\npublic class RequestUtil {\n    private static final Logger LOGGER = LoggerFactory.getLogger(RequestUtil.class);\n    private static final int RETRY_COUNT = 10;\n    private static final int RETRY_INTERVAL_SECONDS = 10;\n\n    static <R extends AbstractGoogleJsonClientRequest<T>, T> T executeWithRetry(R request) throws IOException {\n        for (int i = 0; i < (RETRY_COUNT - 1); i++) {\n            try {\n                return request.execute();\n            } catch (GoogleJsonResponseException e) {\n                if (e.getStatusCode() == 503) {\n                    LOGGER.warn(\"Google\u304b\u3089\u30ea\u30c8\u30e9\u30a4\u53ef\u80fd\u306a\u30a8\u30e9\u30fc\u304c\u8fd4\u5374\u3055\u308c\u307e\u3057\u305f\u3002\", e);\n                    LOGGER.warn(\"{}\u79d2\u5f8c\u306b\u30ea\u30c8\u30e9\u30a4\u3092\u884c\u3044\u307e\u3059\u3002({}/{}\u56de\u76ee)\", RETRY_INTERVAL_SECONDS * (i + 1), i + 1, RETRY_COUNT);\n                    try {\n                        Thread.sleep(RETRY_INTERVAL_SECONDS * (i + 1) * 1000L);\n                    } catch (InterruptedException e2) {\n                        // do nothing\n                    }\n                }\n            }\n        }\n        return request.execute();\n    }\n}\n```\n\n```src/main/java/mytestapp1/DriveWrapper.java\npackage mytestapp1;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport com.google.api.services.drive.Drive;\nimport com.google.api.services.drive.model.File;\n\npublic class DriveWrapper {\n    private Drive driveService;\n    private static final String QUERY_FORMAT = \"name = '%s' and '%s' in parents and mimeType = '%s' and trashed = false\";\n    private static final String MIMETYPE_FOLDER = \"application/vnd.google-apps.folder\";\n    private static final String MIMETYPE_SPREADSHEET = \"application/vnd.google-apps.spreadsheet\";\n    public static final String ROOT_FOLDER_ID = \"root\";\n\n    public DriveWrapper(Drive driveService) {\n        this.driveService = driveService;\n    }\n\n    public List<File> searchFile(String name, String parentFolderId, String mimeType) throws IOException {\n        String query = String.format(QUERY_FORMAT, name, parentFolderId, mimeType);\n        return RequestUtil.executeWithRetry(driveService.files().list().setQ(query)).getFiles();\n    }\n\n    public List<File> searchFolder(String name, String parentFolderId) throws IOException {\n        return searchFile(name, parentFolderId, MIMETYPE_FOLDER);\n    }\n\n    public List<File> searchSpreadsheet(String name, String parentFolderId) throws IOException {\n        return searchFile(name, parentFolderId, MIMETYPE_SPREADSHEET);\n    }\n\n    public File createFile(String name, String parentFolderId, String mimeType) throws IOException {\n        File metadata = new File().setName(name).setMimeType(mimeType).setParents(Arrays.asList(parentFolderId));\n        return RequestUtil.executeWithRetry(driveService.files().create(metadata));\n    }\n\n    public File createFolder(String name, String parentFolderId) throws IOException {\n        return createFile(name, parentFolderId, MIMETYPE_FOLDER);\n    }\n\n    public File createSpreadsheet(String name, String parentFolderId) throws IOException {\n        return createFile(name, parentFolderId, MIMETYPE_SPREADSHEET);\n    }\n}\n```\n\n```src/main/java/mytestapp1/SheetsWrapper.java\npackage mytestapp1;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport com.google.api.services.sheets.v4.Sheets;\nimport com.google.api.services.sheets.v4.model.AddSheetRequest;\nimport com.google.api.services.sheets.v4.model.BatchUpdateSpreadsheetRequest;\nimport com.google.api.services.sheets.v4.model.GridProperties;\nimport com.google.api.services.sheets.v4.model.Request;\nimport com.google.api.services.sheets.v4.model.Sheet;\nimport com.google.api.services.sheets.v4.model.SheetProperties;\nimport com.google.api.services.sheets.v4.model.Spreadsheet;\nimport com.google.api.services.sheets.v4.model.UpdateSheetPropertiesRequest;\nimport com.google.api.services.sheets.v4.model.ValueRange;\n\npublic class SheetsWrapper {\n    private Sheets sheetsService;\n    private Spreadsheet spreadsheet;\n\n    public SheetsWrapper(Sheets sheetsService, String fileId) throws IOException {\n        this.sheetsService = sheetsService;\n        this.spreadsheet = RequestUtil.executeWithRetry(sheetsService.spreadsheets().get(fileId).setIncludeGridData(false));\n    }\n\n    public void renameWorksheet(int index, String newName) throws IOException {\n        SheetProperties sheetProperties = new SheetProperties().setIndex(index).setTitle(newName);\n        UpdateSheetPropertiesRequest updateSheetPropertiesRequest = new UpdateSheetPropertiesRequest().setProperties(sheetProperties).setFields(\"title\");\n        List<Request> requests = new ArrayList<>();\n        requests.add(new Request().setUpdateSheetProperties(updateSheetPropertiesRequest));\n        RequestUtil.executeWithRetry(sheetsService.spreadsheets().batchUpdate(spreadsheet.getSpreadsheetId(), new BatchUpdateSpreadsheetRequest().setRequests(requests)));\n        spreadsheet = RequestUtil.executeWithRetry(sheetsService.spreadsheets().get(spreadsheet.getSpreadsheetId()).setIncludeGridData(false));\n        // \u2191\n        // rename\u5f8c\u306egetSheets().get().getProperties().getTitle()\u304crename\u524d\u306e\u5024\u3092\u8fd4\u3059\u554f\u984c\u306e\u5bfe\u5fdc\n    }\n\n    // \u898b\u3064\u304b\u3089\u306a\u3044\u3068\u304d\u306fnull\u3092\u8fd4\u3059\n    public SheetProperties getWorksheetProperties(String worksheetName) {\n        for (int index = 0; index < spreadsheet.getSheets().size(); index++) {\n            Sheet ws = spreadsheet.getSheets().get(index);\n            if (ws.getProperties().getTitle().equals(worksheetName)) {\n                return ws.getProperties();\n            }\n        }\n        return null;\n    }\n\n    public void addWorksheet(String worksheetName) throws IOException {\n        SheetProperties sheetProperties = new SheetProperties().setTitle(worksheetName);\n        AddSheetRequest addSheetRequest = new AddSheetRequest().setProperties(sheetProperties);\n        List<Request> requests = new ArrayList<>();\n        requests.add(new Request().setAddSheet(addSheetRequest));\n        RequestUtil.executeWithRetry(sheetsService.spreadsheets().batchUpdate(spreadsheet.getSpreadsheetId(), new BatchUpdateSpreadsheetRequest().setRequests(requests)));\n        spreadsheet = RequestUtil.executeWithRetry(sheetsService.spreadsheets().get(spreadsheet.getSpreadsheetId()).setIncludeGridData(false));\n        // \u2191 add\u5f8c\u306egetSheets()\u304cadd\u3057\u305f\u30b7\u30fc\u30c8\u3092\u8fd4\u3055\u306a\u3044\u554f\u984c\u306e\u5bfe\u5fdc\n    }\n\n    // \u5024\u53d6\u5f97\n    public List<List<Object>> getValues(String worksheetName, int startColNum, int startRowNum, int endColNum, int endRowNum) throws IOException {\n        boolean specifyColRow = startColNum > 0 || startRowNum > 0 || endColNum > 0 || endRowNum > 0;\n        StringBuilder rangeBuf = new StringBuilder();\n        rangeBuf.append(worksheetName);\n        rangeBuf.append(specifyColRow ? '!' : \"\");\n        rangeBuf.append((startColNum > 0) ? bijectiveBase26(startColNum) : \"\");\n        rangeBuf.append((startRowNum > 0) ? startRowNum : \"\");\n        rangeBuf.append(specifyColRow ? ':' : \"\");\n        rangeBuf.append((endColNum > 0) ? bijectiveBase26(endColNum) : \"\");\n        rangeBuf.append((endRowNum > 0) ? endRowNum : \"\");\n        return RequestUtil.executeWithRetry(sheetsService.spreadsheets().values().get(spreadsheet.getSpreadsheetId(), rangeBuf.toString())).getValues();\n    }\n\n    // \u6307\u5b9a\u5217\u3067\u5024\u306e\u5165\u3063\u3066\u3044\u308b\u6700\u5f8c\u306e\u884c\u306e\u884c\u756a\u53f7\u3092\u53d6\u5f97\n    // (\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u540d\u306e\u307f\u6307\u5b9a\u3059\u308c\u3070\u300c\u5168\u5217\u3067\u300d\u3068\u306a\u308b\u304c\u30e1\u30e2\u30ea\u7bc0\u7d04\u306e\u305f\u3081\u5217\u6307\u5b9a\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f)\n    public int getLastRowNumberWithValue(String worksheetName, int colNum) throws IOException {\n        List<List<Object>> values = getValues(worksheetName, colNum, 0, colNum, 0);\n        if (values != null) {\n            return values.size();\n        }\n        return 0;\n    }\n\n    // \u5024\u66f8\u8fbc\n    // \u6307\u5b9a\u5217\u30fb\u884c\u304c\u73fe\u5728\u306e\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u306e\u5927\u304d\u3055\u3092\u8d85\u3048\u308b\u5834\u5408\u306b\u306f\u30ef\u30fc\u30af\u30b7\u30fc\u30c8\u3092\u5fc5\u8981\u306a\u3060\u3051\u62e1\u5f35\u3059\u308b\n    // \u6307\u5b9a\u4f4d\u7f6e\u306b\u65e2\u5b58\u306e\u5024\u304c\u3042\u308c\u3070\u4e0a\u66f8\u304d\u3059\u308b\n    public void setValues(String worksheetName, int startColNum, int startRowNum, Object[][] values) throws IOException {\n        List<List<Object>> valueList = new ArrayList<>();\n        for (Object[] row : values) {\n            valueList.add(Arrays.asList(row));\n        }\n        setValues(worksheetName, startColNum, startRowNum, valueList);\n    }\n\n    public void setValues(String worksheetName, int startColNum, int startRowNum, Object[] values) throws IOException {\n        setValues(worksheetName, startColNum, startRowNum, new Object[][] { values });\n    }\n\n    public void setValue(String worksheetName, int colNum, int rowNum, Object value) throws IOException {\n        setValues(worksheetName, colNum, rowNum, new Object[][] { { value } });\n    }\n\n    public void setValues(String worksheetName, int startColNum, int startRowNum, List<List<Object>> valueList) throws IOException {\n        ValueRange valueRange = new ValueRange().setValues(valueList).setMajorDimension(\"ROWS\");\n        String range = worksheetName + \"!\" + bijectiveBase26(startColNum) + startRowNum;\n        // \u958b\u59cb\u4f4d\u7f6e\u304c\u7bc4\u56f2\u5185\u306a\u3089update\u3001\u7bc4\u56f2\u5916\u306a\u3089append\n        // (update\u306f\u958b\u59cb\u4f4d\u7f6e\u304c\u7bc4\u56f2\u5916\u3060\u3068\u30a8\u30e9\u30fc\u3001\u958b\u59cb\u4f4d\u7f6e\u3055\u3048\u7bc4\u56f2\u5185\u306a\u3089\u305d\u306e\u5f8c\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5217\u30fb\u884c\u3092\u8ffd\u52a0\u3057\u3066\u304f\u308c\u308b)\n        // (append\u306f\u958b\u59cb\u4f4d\u7f6e\u304c\u7bc4\u56f2\u5916\u3067\u3082\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5217\u30fb\u884c\u3092\u8ffd\u52a0\u3057\u3066\u304f\u308c\u308b\u304c\u3001\u958b\u59cb\u4f4d\u7f6e\u304c\u7a7a\u304c\u306a\u3044\u5834\u5408\u306b\u4e0a\u66f8\u304d\u3057\u3066\u304f\u308c\u306a\u3044)\n        GridProperties gridProperties = getWorksheetProperties(worksheetName).getGridProperties();\n        if (startColNum <= gridProperties.getColumnCount() && startRowNum <= gridProperties.getRowCount()) {\n            RequestUtil.executeWithRetry(sheetsService.spreadsheets().values().update(spreadsheet.getSpreadsheetId(), range, valueRange).setValueInputOption(\"USER_ENTERED\"));\n        } else {\n            RequestUtil.executeWithRetry(sheetsService.spreadsheets().values().append(spreadsheet.getSpreadsheetId(), range, valueRange).setValueInputOption(\"USER_ENTERED\"));\n        }\n    }\n\n    // \u5217\u756a\u53f7\u3092\u5217\u756a\u53f7\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\n    private String bijectiveBase26(int n) {\n        // https://gist.github.com/theazureshadow/4a5a032944f1c9bc0f4a \u3088\u308a\n        StringBuilder buf = new StringBuilder();\n        while (n != 0) {\n            buf.append((char) ((n - 1) % 26 + 'A'));\n            n = (n - 1) / 26;\n        }\n        return buf.reverse().toString();\n    }\n}\n```\n\n```src/main/java/mytestapp1/CreateCredentialFile.java\npackage mytestapp1;\n\nimport java.io.IOException;\nimport java.security.GeneralSecurityException;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.bridge.SLF4JBridgeHandler;\n\n/**\n * Google\u8a8d\u8a3c\u3092\u884c\u3044\u3001Credential\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002\n */\npublic class CreateCredentialFile {\n    private static final Logger LOGGER = LoggerFactory.getLogger(CreateCredentialFile.class);\n\n    /**\n     * Google\u8a8d\u8a3c\u3092\u884c\u3044\u3001Credential\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002<br>\n     * \u30d6\u30e9\u30a6\u30b6\u304c\u8d77\u52d5\u3057\u3001Google\u306e\u8a31\u53ef\u30ea\u30af\u30a8\u30b9\u30c8\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u3002\n     *\n     * @param args\n     * @throws IOException\n     * @throws GeneralSecurityException\n     */\n    public static void main(String[] args) throws IOException, GeneralSecurityException {\n        SLF4JBridgeHandler.removeHandlersForRootLogger();\n        SLF4JBridgeHandler.install();\n\n        MyTestApp1.getGoogleService().authorize();\n        LOGGER.info(\"Credential\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002\");\n    }\n}\n```\n\n```src/main/java/mytestapp1/MyTestApp1.java\npackage mytestapp1;\n\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.Reader;\nimport java.security.GeneralSecurityException;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.slf4j.bridge.SLF4JBridgeHandler;\n\nimport com.google.api.services.drive.DriveScopes;\nimport com.google.api.services.drive.model.File;\nimport com.google.api.services.sheets.v4.Sheets;\nimport com.google.api.services.sheets.v4.SheetsScopes;\n\n/**\n * Google\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c8\u3078\u306e\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3046\u3002\n */\npublic class MyTestApp1 {\n    private static final Logger LOGGER = LoggerFactory.getLogger(MyTestApp1.class);\n\n    // Application name.\n    private static final String APPLICATION_NAME = \"MyTestApp1\";\n\n    // Return reader for Google client secret.\n    private static Reader getClientSecretReader() {\n        return new InputStreamReader(MyTestApp1.class.getResourceAsStream(\"/google_client_secret.json\"));\n    }\n\n    // Google authorization scopes required by this application.\n    // If modifying these scopes, delete your previously saved credentials.\n    private static final List<String> AUTHORIZATION_SCOPE_LIST = Arrays.asList(DriveScopes.DRIVE, SheetsScopes.SPREADSHEETS);\n\n    // Directory to store Google user credentials for this application.\n    private static final String CREDENTIAL_STORE_DIRECTORY = System.getProperty(\"user.home\") + \"/.google_credentials/\" + APPLICATION_NAME;\n\n    public static void main(String[] args) throws IOException, GeneralSecurityException {\n        SLF4JBridgeHandler.removeHandlersForRootLogger();\n        SLF4JBridgeHandler.install();\n\n        final String folderName = \"\u30d5\u30a9\u30eb\u30c01\";\n        final String spreadsheetName = \"\u30b9\u30d7\u30ec\u30c3\u30c9\u30b7\u30fc\u30c81\";\n        final String worksheetName = \"\u30ef\u30fc\u30af\u30b7\u30fc\u30c81\";\n\n        // Build a new authorized API client service.\n        GoogleService googleService = getGoogleService();\n        SheetsWrapper sheetsWrapper = googleService.getSheetsWrapperWithWorksheet(folderName, spreadsheetName, worksheetName);\n        int lastRowNumberWithValue = sheetsWrapper.getLastRowNumberWithValue(worksheetName, 1);\n\n        // \u5024\u306e\u5165\u3063\u3066\u3044\u308b\u6700\u5f8c\u306e\u884c\u306e\u6b21\u306e\u884c\u304b\u3089\u66f8\u304d\u8fbc\u307f\n        Object[][] values = { { 1, \"A\" }, { 2.1D, \"B\" }, { 2.50E-3, \"C\" } };\n        sheetsWrapper.setValues(worksheetName, 1, lastRowNumWithValue + 1, values);\n        LOGGER.info(\"\u66f8\u304d\u8fbc\u307f\u307e\u3057\u305f\u3002\");\n    }\n\n    static GoogleService getGoogleService() {\n        return new GoogleService(getClientSecretReader(), AUTHORIZATION_SCOPE_LIST, CREDENTIAL_STORE_DIRECTORY, APPLICATION_NAME);\n    }\n\n    private static Reader getClientSecretReader() {\n        return new InputStreamReader(MyTestApp1.class.getResourceAsStream(\"/google_client_secret.json\"));\n    }\n}\n```\n\n```src/main/resources/logback.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE logback>\n<configuration>\n\t<contextListener class=\"ch.qos.logback.classic.jul.LevelChangePropagator\">\n\t\t<resetJUL>true</resetJUL>\n\t</contextListener>\n\t<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n\t\t<encoder>\n\t\t\t<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n</pattern>\n\t\t</encoder>\n\t</appender>\n\t<root level=\"INFO\">\n\t\t<appender-ref ref=\"STDOUT\" />\n\t</root>\n</configuration>\n```\n\n3. \u5b9f\u884c\n------\n\n\u307e\u305aCreateCredentialFile\u30af\u30e9\u30b9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u30d6\u30e9\u30a6\u30b6\u304c\u8d77\u52d5\u3057\u3066\u4ee5\u4e0b\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\n(Google\u30ed\u30b0\u30a4\u30f3\u6e08\u306e\u30d6\u30e9\u30a6\u30b6\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u826f\u3044)\n\n![18.jpg](https://qiita-image-store.s3.amazonaws.com/0/112363/ecdb6446-b9b5-173e-f415-e3b8927b6579.jpeg)\n\n\u300c\u8a31\u53ef\u300d\u62bc\u4e0b\u3067\u4ee5\u4e0b\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\n\n![19.jpg](https://qiita-image-store.s3.amazonaws.com/0/112363/c92bc0da-df17-e9b9-cbff-da001b968c0a.jpeg)\n\n\u6b21\u306bMyTestApp1\u30af\u30e9\u30b9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u66f8\u304d\u8fbc\u307f\u304c\u884c\u308f\u308c\u308b\n"}