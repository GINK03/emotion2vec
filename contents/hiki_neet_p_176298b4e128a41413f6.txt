{"context": "Bouncy Castle \u306f\u6697\u53f7\u5316\u306b\u95a2\u9023\u3057\u305f\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\nNuGet \u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306f\u3001Bouncy Castle \u3092\u7528\u3044\u3066\u3001RSA\u9375\u3068\u96fb\u5b50\u8a3c\u660e\u66f8\u3001PKCS12\u30d5\u30a1\u30a4\u30eb\u306e\u751f\u6210\u65b9\u6cd5\u3001\u304a\u3088\u3073\u8aad\u307f\u53d6\u308a\u3001\u66f8\u304d\u8fbc\u307f\u306e\u65b9\u6cd5\u3092\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nexample.cs\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing Org.BouncyCastle.Asn1;\nusing Org.BouncyCastle.Asn1.X509;\nusing Org.BouncyCastle.Asn1.Pkcs;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Generators;\nusing Org.BouncyCastle.Crypto.Operators;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing Org.BouncyCastle.Crypto.Prng;\nusing Org.BouncyCastle.Math;\nusing Org.BouncyCastle.OpenSsl;\nusing Org.BouncyCastle.Pkcs;\nusing Org.BouncyCastle.Security;\nusing Org.BouncyCastle.X509;\n\nnamespace ConsoleExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // \u9375\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n            var randGen = new CryptoApiRandomGenerator();\n            var rand = new SecureRandom(randGen);\n            var param = new KeyGenerationParameters(rand, 4096);\n\n            // \u9375\u751f\u6210\n            var keyGen = new RsaKeyPairGenerator();\n            keyGen.Init(param);\n            var keyPair = keyGen.GenerateKeyPair();\n\n            // \u8a3c\u660e\u66f8\u306e\u5c5e\u6027\n            var attr = new Dictionary<DerObjectIdentifier, string>()\n            {\n                { X509Name.CN, \"link.studio-ephyra\" },\n                { X509Name.C, \"Japan\" },\n                { X509Name.ST, \"Nagano-Ken\" },\n                { X509Name.L, \"Nagano-Shi\" },\n                { X509Name.O, \"Studio-Ephyra\" },\n                { X509Name.OU, \"None\" },\n            };\n            var ord = new List<DerObjectIdentifier>()\n            {\n                X509Name.CN,\n                X509Name.C,\n                X509Name.ST,\n                X509Name.L,\n                X509Name.O,\n                X509Name.OU,\n            };\n\n            // \u8a3c\u660e\u66f8\u306e\u751f\u6210\n            var name = new X509Name(ord, attr);\n            var certGen = new X509V3CertificateGenerator();\n            certGen.SetSerialNumber(BigInteger.One);\n            certGen.SetIssuerDN(name);\n            certGen.SetSubjectDN(name);\n            certGen.SetNotBefore(DateTime.Now);\n            certGen.SetNotAfter(DateTime.Now.AddYears(10));\n            certGen.SetPublicKey(keyPair.Public);\n            var cert = certGen.Generate(new Asn1SignatureFactory(PkcsObjectIdentifiers.Sha512WithRsaEncryption.Id, keyPair.Private, rand));\n\n            // \u79d8\u5bc6\u9375\u306e\u51fa\u529b\n            using (var writer = new StreamWriter(@\"D:\\Downloads\\privatekey.pem\", false, Encoding.ASCII))\n            {\n                var pemWriter = new PemWriter(writer);\n                pemWriter.WriteObject(keyPair.Private);\n                pemWriter.Writer.Flush();\n            }\n\n            // \u516c\u958b\u9375\u306e\u51fa\u529b\n            using (var writer = new StreamWriter(@\"D:\\Downloads\\publickey.pem\", false, Encoding.ASCII))\n            {\n                var pemWriter = new PemWriter(writer);\n                pemWriter.WriteObject(keyPair.Public);\n                pemWriter.Writer.Flush();\n            }\n\n            // \u8a3c\u660e\u66f8\u306e\u51fa\u529b\n            using (var writer = new StreamWriter(@\"D:\\Downloads\\certificate.crt\", false, Encoding.ASCII))\n            {\n                var pemWriter = new PemWriter(writer);\n                pemWriter.WriteObject(cert);\n                pemWriter.Writer.Flush();\n            }\n\n            AsymmetricCipherKeyPair privateKey;\n            RsaKeyParameters publicKey;\n            Org.BouncyCastle.X509.X509Certificate readedCert;\n\n            // \u79d8\u5bc6\u9375\u306e\u8aad\u307f\u8fbc\u307f\n            using (var reader = new StreamReader(@\"D:\\Downloads\\privatekey.pem\", Encoding.ASCII))\n            {\n                var pemReader = new PemReader(reader);\n                privateKey = (AsymmetricCipherKeyPair)pemReader.ReadObject();\n            }\n\n            // \u516c\u958b\u9375\u306e\u8aad\u307f\u8fbc\u307f\n            using (var reader = new StreamReader(@\"D:\\Downloads\\publickey.pem\", Encoding.ASCII))\n            {\n                var pemReader = new PemReader(reader);\n                publicKey = (RsaKeyParameters)pemReader.ReadObject();\n            }\n\n            // \u8a3c\u660e\u66f8\u306e\u8aad\u307f\u8fbc\u307f\n            using (var reader = new StreamReader(@\"D:\\Downloads\\certificate.crt\", Encoding.ASCII))\n            {\n                var pemReader = new PemReader(reader);\n                readedCert = (Org.BouncyCastle.X509.X509Certificate)pemReader.ReadObject();\n            }\n\n            // PKCS12\u306e\u751f\u6210\n            var certEntry = new X509CertificateEntry(cert);\n            var keyEntry = new AsymmetricKeyEntry(privateKey.Private);\n            var p12 = new Pkcs12Store();\n            p12.SetCertificateEntry(attr[X509Name.CN], new X509CertificateEntry(cert));\n            p12.SetKeyEntry(\"tana\", keyEntry, new X509CertificateEntry[] { certEntry });\n\n            // PKCS12\u306e\u51fa\u529b\n            using (var stream = new FileStream(@\"D:\\Downloads\\pkcs12.p12\", FileMode.Create))\n            {\n                p12.Save(stream, \"password\".ToCharArray(), rand);\n                stream.Flush();\n            }\n\n            Pkcs12Store readedP12;\n\n            // PKCS12\u306e\u8aad\u307f\u8fbc\u307f\n            using (var stream = new FileStream(@\"D:\\Downloads\\pkcs12.p12\", FileMode.Open))\n            {\n                readedP12 = new Pkcs12Store(stream, \"password\".ToCharArray());\n            }\n\n            // \u79d8\u5bc6\u9375\u306e\u53d6\u5f97\u3068\u66f8\u304d\u8fbc\u307f\n            using (var writer = new StreamWriter(@\"D:\\Downloads\\pkcs12privatekey.pem\", false, Encoding.ASCII))\n            {\n                var pemWriter = new PemWriter(writer);\n                pemWriter.WriteObject(readedP12.GetKey(\"tana\").Key);\n                pemWriter.Writer.Flush();\n            }\n\n            Console.WriteLine(\"OK\");\n            Console.ReadLine();\n        }\n    }\n}\n\n\n\n\u4ee5\u4e0a\u3067\u3059\u3002\nBouncy Castle \u306f\u6697\u53f7\u5316\u306b\u95a2\u9023\u3057\u305f\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\nNuGet \u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306f\u3001Bouncy Castle \u3092\u7528\u3044\u3066\u3001RSA\u9375\u3068\u96fb\u5b50\u8a3c\u660e\u66f8\u3001PKCS12\u30d5\u30a1\u30a4\u30eb\u306e\u751f\u6210\u65b9\u6cd5\u3001\u304a\u3088\u3073\u8aad\u307f\u53d6\u308a\u3001\u66f8\u304d\u8fbc\u307f\u306e\u65b9\u6cd5\u3092\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```csharp:example.cs\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing Org.BouncyCastle.Asn1;\nusing Org.BouncyCastle.Asn1.X509;\nusing Org.BouncyCastle.Asn1.Pkcs;\nusing Org.BouncyCastle.Crypto;\nusing Org.BouncyCastle.Crypto.Generators;\nusing Org.BouncyCastle.Crypto.Operators;\nusing Org.BouncyCastle.Crypto.Parameters;\nusing Org.BouncyCastle.Crypto.Prng;\nusing Org.BouncyCastle.Math;\nusing Org.BouncyCastle.OpenSsl;\nusing Org.BouncyCastle.Pkcs;\nusing Org.BouncyCastle.Security;\nusing Org.BouncyCastle.X509;\n\nnamespace ConsoleExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // \u9375\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n            var randGen = new CryptoApiRandomGenerator();\n            var rand = new SecureRandom(randGen);\n            var param = new KeyGenerationParameters(rand, 4096);\n\n            // \u9375\u751f\u6210\n            var keyGen = new RsaKeyPairGenerator();\n            keyGen.Init(param);\n            var keyPair = keyGen.GenerateKeyPair();\n\n            // \u8a3c\u660e\u66f8\u306e\u5c5e\u6027\n            var attr = new Dictionary<DerObjectIdentifier, string>()\n            {\n                { X509Name.CN, \"link.studio-ephyra\" },\n                { X509Name.C, \"Japan\" },\n                { X509Name.ST, \"Nagano-Ken\" },\n                { X509Name.L, \"Nagano-Shi\" },\n                { X509Name.O, \"Studio-Ephyra\" },\n                { X509Name.OU, \"None\" },\n            };\n            var ord = new List<DerObjectIdentifier>()\n            {\n                X509Name.CN,\n                X509Name.C,\n                X509Name.ST,\n                X509Name.L,\n                X509Name.O,\n                X509Name.OU,\n            };\n\n            // \u8a3c\u660e\u66f8\u306e\u751f\u6210\n            var name = new X509Name(ord, attr);\n            var certGen = new X509V3CertificateGenerator();\n            certGen.SetSerialNumber(BigInteger.One);\n            certGen.SetIssuerDN(name);\n            certGen.SetSubjectDN(name);\n            certGen.SetNotBefore(DateTime.Now);\n            certGen.SetNotAfter(DateTime.Now.AddYears(10));\n            certGen.SetPublicKey(keyPair.Public);\n            var cert = certGen.Generate(new Asn1SignatureFactory(PkcsObjectIdentifiers.Sha512WithRsaEncryption.Id, keyPair.Private, rand));\n\n            // \u79d8\u5bc6\u9375\u306e\u51fa\u529b\n            using (var writer = new StreamWriter(@\"D:\\Downloads\\privatekey.pem\", false, Encoding.ASCII))\n            {\n                var pemWriter = new PemWriter(writer);\n                pemWriter.WriteObject(keyPair.Private);\n                pemWriter.Writer.Flush();\n            }\n\n            // \u516c\u958b\u9375\u306e\u51fa\u529b\n            using (var writer = new StreamWriter(@\"D:\\Downloads\\publickey.pem\", false, Encoding.ASCII))\n            {\n                var pemWriter = new PemWriter(writer);\n                pemWriter.WriteObject(keyPair.Public);\n                pemWriter.Writer.Flush();\n            }\n\n            // \u8a3c\u660e\u66f8\u306e\u51fa\u529b\n            using (var writer = new StreamWriter(@\"D:\\Downloads\\certificate.crt\", false, Encoding.ASCII))\n            {\n                var pemWriter = new PemWriter(writer);\n                pemWriter.WriteObject(cert);\n                pemWriter.Writer.Flush();\n            }\n\n            AsymmetricCipherKeyPair privateKey;\n            RsaKeyParameters publicKey;\n            Org.BouncyCastle.X509.X509Certificate readedCert;\n\n            // \u79d8\u5bc6\u9375\u306e\u8aad\u307f\u8fbc\u307f\n            using (var reader = new StreamReader(@\"D:\\Downloads\\privatekey.pem\", Encoding.ASCII))\n            {\n                var pemReader = new PemReader(reader);\n                privateKey = (AsymmetricCipherKeyPair)pemReader.ReadObject();\n            }\n\n            // \u516c\u958b\u9375\u306e\u8aad\u307f\u8fbc\u307f\n            using (var reader = new StreamReader(@\"D:\\Downloads\\publickey.pem\", Encoding.ASCII))\n            {\n                var pemReader = new PemReader(reader);\n                publicKey = (RsaKeyParameters)pemReader.ReadObject();\n            }\n\n            // \u8a3c\u660e\u66f8\u306e\u8aad\u307f\u8fbc\u307f\n            using (var reader = new StreamReader(@\"D:\\Downloads\\certificate.crt\", Encoding.ASCII))\n            {\n                var pemReader = new PemReader(reader);\n                readedCert = (Org.BouncyCastle.X509.X509Certificate)pemReader.ReadObject();\n            }\n\n            // PKCS12\u306e\u751f\u6210\n            var certEntry = new X509CertificateEntry(cert);\n            var keyEntry = new AsymmetricKeyEntry(privateKey.Private);\n            var p12 = new Pkcs12Store();\n            p12.SetCertificateEntry(attr[X509Name.CN], new X509CertificateEntry(cert));\n            p12.SetKeyEntry(\"tana\", keyEntry, new X509CertificateEntry[] { certEntry });\n\n            // PKCS12\u306e\u51fa\u529b\n            using (var stream = new FileStream(@\"D:\\Downloads\\pkcs12.p12\", FileMode.Create))\n            {\n                p12.Save(stream, \"password\".ToCharArray(), rand);\n                stream.Flush();\n            }\n\n            Pkcs12Store readedP12;\n\n            // PKCS12\u306e\u8aad\u307f\u8fbc\u307f\n            using (var stream = new FileStream(@\"D:\\Downloads\\pkcs12.p12\", FileMode.Open))\n            {\n                readedP12 = new Pkcs12Store(stream, \"password\".ToCharArray());\n            }\n\n            // \u79d8\u5bc6\u9375\u306e\u53d6\u5f97\u3068\u66f8\u304d\u8fbc\u307f\n            using (var writer = new StreamWriter(@\"D:\\Downloads\\pkcs12privatekey.pem\", false, Encoding.ASCII))\n            {\n                var pemWriter = new PemWriter(writer);\n                pemWriter.WriteObject(readedP12.GetKey(\"tana\").Key);\n                pemWriter.Writer.Flush();\n            }\n\n            Console.WriteLine(\"OK\");\n            Console.ReadLine();\n        }\n    }\n}\n\n```\n\n\u4ee5\u4e0a\u3067\u3059\u3002\n", "tags": ["C#", "BouncyCastle", "RSA", "PKCS12"]}