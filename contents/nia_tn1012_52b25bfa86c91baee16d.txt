{"tags": ["Xamarin", "Xamarin.Android", "AndroidWear", "C#", "WatchFace"], "context": "\u672c\u8a18\u4e8b\u306f\u3001Vol.2 : \u30d7\u30ed\u30b0\u30e9\u30e0\u4f5c\u6210\u7de8\uff08Page-1\uff09\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n3. Watch Face\u306eEngine\u30af\u30e9\u30b9\u3092\u4f5c\u6210\uff08\u7d9a\u304d\uff09\n\u3053\u3053\u304b\u3089\u306f\u3001AnalogWatchFaceEngine\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n3.5. OnCreate\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nOnCreate\u30e1\u30bd\u30c3\u30c9\u306f\u3001AnalogWatchFaceEngine\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u4e3b\u306b\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\nPaint\u306a\u3069\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\n\u6642\u523b\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\n\u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u306e\u30b9\u30bf\u30a4\u30eb\uff08\u30b9\u30c6\u30fc\u30bf\u30b9\u30a2\u30a4\u30b3\u30f3\u3084\u3084OK Google\u306e\u8868\u793a\u306a\u3069\uff09\u3092\u8a2d\u5b9a\n\n\nOnCreate\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnCreate( ISurfaceHolder holder ) {\n\n    // \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n    SetWatchFaceStyle(\n        new WatchFaceStyle.Builder( owner )\n            // \u30e6\u30fc\u30b6\u30fc\u304b\u3089\u306e\u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n            //   true  : \u6709\u52b9\n            //   false : \u7121\u52b9\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\n            //.SetAcceptsTapEvents( true ) \n            // \u901a\u77e5\u304c\u6765\u305f\u6642\u306e\u901a\u77e5\u30ab\u30fc\u30c9\u306e\u9ad8\u3055\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n            .SetCardPeekMode( WatchFaceStyle.PeekModeShort )\n            // \u901a\u77e5\u30ab\u30fc\u30c9\uff08small card\u306e\u8868\u793a\u6642\uff09\u306e\u80cc\u666f\u306e\u8868\u793a\u65b9\u6cd5\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n            //   WatchFaceStyle.BackgroundVisibilityInterruptive : \u4e00\u90e8\u306e\u91cd\u8981\u306a\u901a\u77e5\u306b\u9650\u308a\u3001\u8868\u793a\u3057\u307e\u3059\u3002\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\n            //   WatchFaceStyle.BackgroundVisibilityPersistent   : \u901a\u77e5\u30ab\u30fc\u30c9\u306e\u7a2e\u985e\u306b\u304b\u304b\u308f\u3089\u305a\u3001\u8868\u793a\u3057\u307e\u3059\u3002\n            .SetBackgroundVisibility( WatchFaceStyle.BackgroundVisibilityInterruptive )\n            // \u30b7\u30b9\u30c6\u30e0UI\u306e\u30c7\u30b8\u30bf\u30eb\u6642\u8a08\u3092\u8868\u793a\u3059\u308b\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\uff08\u4f7f\u7528\u3057\u3066\u3044\u308b\u4f8b\u3068\u3057\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u300c\u30b7\u30f3\u30d7\u30eb\u300d\u304c\u3042\u308a\u307e\u3059\u3002\uff09\n            //   true  : \u8868\u793a\n            //   false : \u975e\u8868\u793a\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\n            .SetShowSystemUiTime( false )\n            // \u8a2d\u5b9a\u3057\u305f\u30b9\u30bf\u30a4\u30eb\u60c5\u5831\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u6700\u5f8c\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n            .Build()\n    );\n\n    base.OnCreate( holder );\n\n    var resources = owner.Resources;\n\n    // \u80cc\u666f\u7528\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n    backgroundPaint = new Paint();\n    // \u30ea\u30bd\u30fc\u30b9\u304b\u3089\u80cc\u666f\u8272\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n    backgroundPaint.Color = resources.GetColor( Resource.Color.background );\n\n    // \u6642\u91dd\u7528\u306ePaint\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n    hourHandPaint = new Paint();\n    hourHandPaint.Color = resources.GetColor( Resource.Color.analog_hands );\n    // \u6642\u91dd\u306e\u5e45\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n    hourHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.hour_hand_stroke );\n    // \u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n    hourHandPaint.AntiAlias = true;\n    // \u7dda\u7aef\u306e\u5f62\u306f\u4e38\u5f62\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n    hourHandPaint.StrokeCap = Paint.Cap.Round;\n\n    // \u5206\u91dd\u7528\u306ePaint\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n    minuteHandPaint = new Paint();\n    minuteHandPaint.Color = hourHandPaint.Color;\n    minuteHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.minute_hand_stroke );\n    minuteHandPaint.AntiAlias = true;\n    minuteHandPaint.StrokeCap = Paint.Cap.Round;\n\n    // \u79d2\u91dd\u7528\u306ePaint\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n    secondHandPaint = new Paint();\n    secondHandPaint.Color = resources.GetColor( Resource.Color.analog_second_hand );\n    secondHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.second_hand_stroke );\n    secondHandPaint.AntiAlias = true;\n    secondHandPaint.StrokeCap = Paint.Cap.Round;\n\n    // \u6642\u523b\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n    nowTime = Java.Util.Calendar.GetInstance( Java.Util.TimeZone.Default );\n}\n\n\n\n3.5.1. \u7121\u6148\u60b2\u306aDeprecation\nAndroid.Content.Res.Resources.GetColor\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android SDK Level 23\u4ee5\u964d\u3067\u306f\u975e\u63a8\u5968\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u4ee3\u308f\u308a\u306bAndroid.Support.V4.Content.ContextCompat.GetColor\u30e1\u30bd\u30c3\u30c9\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u306fColor\u578b\u3067\u306a\u304f\u3001ARGB\u5024\u3092\u683c\u7d0d\u3057\u305fint\u578b\u3067\u3042\u308a\u3001Paint\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eColor\u30d7\u30ed\u30d1\u30c6\u30a3\uff08Color\u578b\uff09\u306b\u4ee3\u5165\u3059\u308b\u306b\u306f\u3001\u4e00\u5de5\u592b\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u80cc\u666f\u8272\u306e\u8aad\u307f\u8fbc\u307f\n// \u975e\u63a8\u5968\u3068\u306a\u3063\u305f\u65b9\u6cd5\nbackgroundPaint.Color = owner.Resources.GetColor( Resource.Color.background );\n\n// \u4ee3\u308f\u308a\u306b\u63a8\u5968\u3055\u308c\u305f\u65b9\u6cd5\nint argb = ContextCompat.GetColor( owner, Resource.Color.background );\nbackgroundPaint.Color = Color.Argb( ( argb >> 24 ) & 0xFF, ( argb >> 16 ) & 0xFF, ( argb >> 8 ) & 0xFF, argb & 0xFF );\n\n// \u6ce8 : ContextCompat.GetColor\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3092\u3001Paint.Color\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u76f4\u63a5\u4ee3\u5165\u3067\u304d\u307e\u305b\u3093\u3002\nbackgroundPaint.Color = ContextCompat.GetColor( owner, Resource.Color.background );\n\n\n\n3.6. OnDestroy\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nOnDestroy\u30e1\u30bd\u30c3\u30c9\u306f\u3001AnalogWatchFaceEngine\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7834\u68c4\u3055\u308c\u308b\u66421\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\nOnDestroy\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnDestroy() {\n    // UpdateTimeHandler\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n    updateTimeHandler.RemoveMessages( MessageUpdateTime );\n\n    base.OnDestroy();\n}\n\n\n\n3.7. OnApplyWindowInsets\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nOnApplyWindowInsets\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u73fe\u5728\u306eWindowInsets\u3092\u9069\u7528\u3059\u308b\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001Android Wear\u30c7\u30d0\u30a4\u30b9\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f62\u72b6\uff08\u4e38\u5f62 or \u56db\u89d2\u5f62\uff09\u3092\u5224\u5225\u3059\u308b\u6642\u306b\u5229\u7528\u3057\u307e\u3059\u3002\n\nOnApplyWindowInsets\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnApplyWindowInsets( WindowInsets insets ) {\n    base.OnApplyWindowInsets( insets );\n\n    // Android Wear\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u4e38\u5f62\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n    //bool isRound = insets.IsRound;\n}\n\n\n\n3.8. OnPropertiesChanged\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nOnPropertiesChanged\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android Wear\u30c7\u30d0\u30a4\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5b9a\u3081\u3089\u308c\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u4e3b\u306b\u3001Low-Bit\u5236\u9650\u53ca\u3073\u713c\u304d\u4ed8\u304d\u9632\u6b62\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\nOnPropertiesChanged\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnPropertiesChanged( Bundle properties ) {\n    base.OnPropertiesChanged( properties );\n\n    // \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u6642\u3001Low-Bit\u5236\u9650\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n    isRequiredLowBitAmbient = properties.GetBoolean( PropertyLowBitAmbient, false );\n    // \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u6642\u3001\u713c\u304d\u4ed8\u304d\u9632\u6b62\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n    isReqiredBurnInProtection = properties.GetBoolean( PropertyBurnInProtection, false );\n}\n\n\n\n3.9. OnTimeTick\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nOnTimeTick\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android Wear\u306e\u30e2\u30fc\u30c9\u306b\u304b\u304b\u308f\u3089\u305a\u30011\u5206\u3054\u3068\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\nOnTimeTick\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnTimeTick() {\n    base.OnTimeTick();\n\n    // \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u3092\u518d\u63cf\u753b\u3057\u307e\u3059\u3002\n    Invalidate();\n}\n\n\n\n3.10. OnAmbientModeChanged\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nOnAmbientModeChanged\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android Wear\u30c7\u30d0\u30a4\u30b9\u3067\u300c\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9\u300d\u3068\u300c\u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u300d\u3092\u5207\u308a\u66ff\u3048\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u5f15\u6570\u306einAmbientMode\u304b\u3089\u3001\u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n\nOnAmbientModeChanged\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnAmbientModeChanged( bool inAmbientMode ) {\n    base.OnAmbientModeChanged( inAmbientMode );\n\n    // \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u304c\u5909\u66f4\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n    if( isAmbient != inAmbientMode ) {\n        // \u73fe\u5728\u306e\u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n        isAmbient = inAmbientMode;\n\n        // \u30c7\u30d0\u30a4\u30b9\u304cLow-Bit\u5236\u9650\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n        if( isRequiredLowBitAmbient ) {\n            bool antiAlias = !inAmbientMode;\n\n            // \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u306e\u6642\u306f\u3001\u91dd\u306ePaint\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u7121\u52b9\u306b\u3057\u3001\n            // \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n            hourHandPaint.AntiAlias = antiAlias;\n            minuteHandPaint.AntiAlias = antiAlias;\n            secondHandPaint.AntiAlias = antiAlias;\n\n            // \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u3092\u518d\u63cf\u753b\u3057\u307e\u3059\u3002\n            Invalidate();\n        }\n\n        // \u30bf\u30a4\u30de\u30fc\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n        UpdateTimer();\n    }\n}\n\n\n\nUpdateTimer\u30e1\u30bd\u30c3\u30c9\nprivate void UpdateTimer() {\n    // UpdateTimeHandler\u304b\u3089MessageUpdateTime\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u308a\u9664\u304d\u307e\u3059\u3002\n    updateTimeHandler.RemoveMessages( MessageUpdateTime );\n    // UpdateTimeHandler\u3092\u52d5\u4f5c\u3055\u305b\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n    if( ShouldTimerBeRunning ) {\n        // UpdateTimeHandler\u306bMessageUpdateTime\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n        updateTimeHandler.SendEmptyMessage( MessageUpdateTime );\n    }\n}\n\n\n\n3.11. OnInterruptionFilterChanged\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nOnInterruptionFilterChanged\u30e1\u30bd\u30c3\u30c9\u306f\u3001Interruption\u30d5\u30a3\u30eb\u30bf\u30fc\u304c\u5909\u66f4\u3055\u308c\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u4e3b\u306b\u3001Android Wear\u30c7\u30d0\u30a4\u30b9\u306e\u901a\u77e5\u306eON / OFF\u72b6\u614b\u3092\u5224\u5225\u3059\u308b\u6642\u306b\u5229\u7528\u3057\u307e\u3059\u3002\n\nOnInterruptionFilterChanged\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnInterruptionFilterChanged( int interruptionFilter ) {\n    base.OnInterruptionFilterChanged( interruptionFilter );\n\n    // Interruption\u30d5\u30a3\u30eb\u30bf\u30fc\u304cInterruptionFilterNone\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u5224\u5225\u3057\u307e\u3059\u3002\n    bool inMuteMode = ( interruptionFilter == InterruptionFilterNone );\n\n    // \u30df\u30e5\u30fc\u30c8\u30e2\u30fc\u30c9\u304c\u5909\u66f4\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u5224\u5225\u3057\u307e\u3059\u3002\n    if( isMute != inMuteMode ) {\n        isMute = inMuteMode;\n\n        // \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u3092\u518d\u63cf\u753b\u3057\u307e\u3059\u3002\n        Invalidate();\n    }\n}\n\n\n\n\n\nInterruptionFilter\u306e\u5024\n\u901a\u77e5\n\n\n\n\nInterruptionFilterAll\uff081\uff09\n\u3059\u3079\u3066\u306e\u901a\u77e5\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n\nInterruptionFilterPriority\uff082\uff09\n\u512a\u5148\u5ea6\u306e\u9ad8\u3044\u901a\u77e5\u306e\u307f\u8868\u793a\u3057\u307e\u3059\u3002\n\n\nInterruptionFilterNone\uff083\uff09\n\u3059\u3079\u3066\u306e\u901a\u77e5\u3092\u8868\u793a\u3057\u307e\u305b\u3093\u3002\n\n\nInterruptionFilterAlarm\uff084\uff09\n\u30a2\u30e9\u30fc\u30e0\u306e\u901a\u77e5\u306e\u307f\u8868\u793a\u3057\u307e\u3059\u3002\n\n\nInterruptionFilterUnknown\uff080\uff09\nInterruption\u30d5\u30a3\u30eb\u30bf\u30fc\u304c\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002\n\n\n\n\n3.12. OnTapCommand\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nOnTapCommand\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u753b\u9762\u3092\u30bf\u30c3\u30d7\u3057\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u203b\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\u3001WatchFaceStyle.Builder\u306b\u3066\u3001SetAcceptsTapEvents\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306btrue\u3092\u6307\u5b9a\u3057\u3001\u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u203b\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android Wear 1.3\u4ee5\u4e0a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n\n\u5f15\u6570\n\u6982\u8981\n\n\n\n\ntapType\n\u30bf\u30c3\u30d7\u306e\u7a2e\u985e\n\n\nxValue\n\u30bf\u30c3\u30d7\u3057\u305f\u4f4d\u7f6e\u306eX\u5ea7\u6a19\n\n\nyValue\n\u30bf\u30c3\u30d7\u3057\u305f\u4f4d\u7f6e\u306eY\u5ea7\u6a19\n\n\neventTime\n\u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09\n\n\n\n\nOnTapCommand\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnTapCommand( int tapType, int xValue, int yValue, long eventTime ) {\n    // \u30bf\u30c3\u30d7\u306e\u7a2e\u985e\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n    switch( tapType ) {\n        case TapTypeTouch:\n            // TODO : \u30e6\u30fc\u30b6\u30fc\u304c\u753b\u9762\u3092\u30bf\u30c3\u30c1\u3057\u305f\u6642\u306e\u51e6\u7406\u3092\u5165\u308c\u307e\u3059\u3002\n            break;\n        case TapTypeTouchCancel:\n            // TODO : \u30e6\u30fc\u30b6\u30fc\u304c\u753b\u9762\u3092\u30bf\u30c3\u30c1\u3057\u305f\u307e\u307e\u3001\u6307\u3092\u52d5\u304b\u3057\u305f\u6642\u306e\u51e6\u7406\u3092\u5165\u308c\u307e\u3059\u3002\n            break;\n        case TapTypeTap:\n            // TODO : \u30e6\u30fc\u30b6\u30fc\u304c\u30bf\u30c3\u30d7\u3057\u305f\u6642\u306e\u51e6\u7406\u3092\u5165\u308c\u307e\u3059\u3002\n            break;\n    }\n}\n\n\n\n3.13. OnDraw\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nOnDraw\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\u3057\u3001Watch Face\u306e\u753b\u9762\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\n\u203b\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u5185\u306e\u51e6\u7406\u306f\u3001\u3067\u304d\u308b\u3060\u3051\u77ed\u304f\u7d42\u3048\u308b\u3088\u3046\u306b\u3057\u3001\u30ea\u30bd\u30fc\u30b9\u306e\u8aad\u307f\u8fbc\u307f\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u306a\u3069\u306f\u3001\u306a\u308b\u3079\u304fOnCreate\u30e1\u30bd\u30c3\u30c9\u3067\u884c\u3046\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\n\n\n\u5f15\u6570\n\u6982\u8981\n\n\n\n\ncanvas\n\u753b\u9762\u306b\u63cf\u753b\u3059\u308b\u305f\u3081\u306e\u30ad\u30e3\u30f3\u30d1\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\nbounds\n\u753b\u9762\u306e\u30b5\u30a4\u30ba\u306a\u3069\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\n\n\nOnDraw\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnDraw( Canvas canvas, Rect bounds ) {\n    // \u4e2d\u7565\n}\n\n\n\n3.13.1. \u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\n\nAndroid\u306eTime\u30af\u30e9\u30b9\u306e\u5834\u5408\nnowTime.SetToNow();\n\n\n\nJava\u306eCalendar\u30af\u30e9\u30b9\u306e\u5834\u5408\nnowTime = Java.Util.Calendar.GetInstance( nowTime.TimeZone );\n\n\n\n.NET\u306eDateTime\u69cb\u9020\u4f53\u306e\u5834\u5408\nnowTime = DateTime.Now;\n\n\n\n3.13.2. \u80cc\u666f\u3092\u63cf\u753b\n\u753b\u9762\u5168\u4f53\u3092\u80cc\u666f\u8272\u3067\u5857\u308a\u3064\u3076\u3057\u3001\u524d\u56de\u63cf\u753b\u3057\u305f\u5185\u5bb9\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\n\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9\u306e\u6642\u306f\u3001\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u80cc\u666f\u8272\u3067\u63cf\u753b\u3057\u3001\u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u306e\u6642\u306f\u3001\u9ed2\u8272\u3067\u5857\u308a\u3064\u3076\u3057\u307e\u3059\u3002\nDrawColor\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u753b\u9762\u5168\u4f53\u3092\u6307\u5b9a\u3057\u305f\u8272\u3067\u5857\u308a\u3064\u3076\u3057\u307e\u3059\u3002\nDrawRect\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u6307\u5b9a\u3057\u305f\u5de6\u4e0a\u3068\u53f3\u4e0b\u306eXY\u5ea7\u6a19\u3068Paint\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u306a\u308b\u77e9\u5f62\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\n\u80cc\u666f\u3092\u63cf\u753b\n// \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u5224\u5225\u3057\u307e\u3059\u3002\nif( IsInAmbientMode ) {\n    // \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u306e\u6642\u306f\u3001\u9ed2\u8272\u3067\u5857\u308a\u3064\u3076\u3057\u307e\u3059\u3002\n    canvas.DrawColor( Color.Black );\n}\nelse {\n    // \u305d\u3046\u3067\u306a\u3044\u6642\u306f\u3001\u80cc\u666f\u753b\u50cf\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n    canvas.DrawRect( 0, 0, canvas.Width, canvas.Height, backgroundPaint );\n}\n\n\n\n3.13.3. \u6642\u91dd\u3001\u5206\u91dd\u3001\u79d2\u91dd\u3092\u63cf\u753b\n\u79d2\u91dd\u306f\u30011\u79d2\u3042\u305f\u308a2\u03c0/602\u03c0/602\\pi / 60 [rad]\u306a\u306e\u3067\u3001sss\u79d2\u306e\u6642\u306e\u79d2\u91dd\u306e\u89d2\u5ea6\u03b8s\u03b8s\\theta_s\u306f\u3001\u4ee5\u4e0b\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n\u03b8s=s\u00d7\u03c0/30\u03b8s=s\u00d7\u03c0/30{\\theta_s = s \\times \\pi / 30\n}\n\u5206\u91dd\u3082\u540c\u69d8\u306b\u3001mmm\u5206\u306e\u6642\u306e\u5206\u91dd\u306e\u89d2\u5ea6\u03b8m\u03b8m\\theta_m\u306f\u3001\u4ee5\u4e0b\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n\u03b8m=m\u00d7\u03c0/30\u03b8m=m\u00d7\u03c0/30{\\theta_m = m \\times \\pi / 30\n}\n\u6642\u91dd\u306f\u30011\u6642\u9593\u3042\u305f\u308a2\u03c0/62\u03c0/62\\pi / 6 [rad]\u3067\u3059\u304c\u3001\u6642\u306e\u5024hhh\u3060\u3051\u3067\u306a\u304f\u5206\u306e\u5024mmm\u3082\u8003\u616e\u3057\u3066\u3001\u89d2\u5ea6\u03b8h\u03b8h\\theta_h\u3092\u6c42\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\u03b8h=((h+m/60)\u00d7\u03c0/6\u03b8h=((h+m/60)\u00d7\u03c0/6{\\theta_h = ( ( h + m / 60 ) \\times \\pi / 6\n}\n12\u6642\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3001\u73fe\u5728\u306e\u91dd\u306e\u89d2\u5ea6\u3092\u03b8\u03b8\\theta [rad]\u3001\u91dd\u306e\u9577\u3055\u3092lll\u3068\u3059\u308b\u3068\u3001\u91dd\u306e\u5148\u7aef\u306eXY\u5ea7\u6a19\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\nx=l\u00d7sin(\u03b8)x=l\u00d7sin\u2061(\u03b8){x = l \\times \\sin( \\theta )\n}\ny=\u2212l\u00d7cos(\u03b8)y=\u2212l\u00d7cos\u2061(\u03b8){y = -l \\times \\cos( \\theta )\n}\n\u3042\u3068\u306f\u3001DrawLine\u30e1\u30bd\u30c3\u30c9\u3067\u63cf\u753b\u3057\u307e\u3059\u3002\n\n\u6642\u91dd\u3001\u5206\u91dd\u3001\u79d2\u91dd\u3092\u63cf\u753b\n// \u4e2d\u5fc3\u306eXY\u5ea7\u6a19\u3092\u6c42\u3081\u307e\u3059\u3002\nfloat centerX = bounds.Width() / 2.0f;\nfloat centerY = bounds.Height() / 2.0f;\n\n// \u91dd\u306e\u9577\u3055\u3092\u6c42\u3081\u307e\u3059\u3002\nfloat hourHandLength = centerX - 80;\nfloat minuteHandLength = centerX - 40;\nfloat secondHandLength = centerX - 20;\n\n// \u6642\u91dd\u306e\u5148\u7aef\u306eXY\u5ea7\u6a19\u3092\u6c42\u3081\u307e\u3059\u3002\nfloat hourHandRotation = ( ( nowTime.Get( Java.Util.CalendarField.Hour ) + ( nowTime.Get( Java.Util.CalendarField.Minute ) / 60f ) ) / 6f ) * ( float )Math.PI;\nfloat hourHandX = ( float )Math.Sin( hourHandRotation ) * hourHandLength;\nfloat hourHandY = ( float )-Math.Cos( hourHandRotation ) * hourHandLength;\n// \u6642\u91dd\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\ncanvas.DrawLine( centerX, centerY, centerX + hourHandX, centerY + hourHandY, hourHandPaint );\n\n// \u5206\u91dd\u306e\u5148\u7aef\u306eXY\u5ea7\u6a19\u3092\u6c42\u3081\u307e\u3059\u3002\nfloat minuteHandRotation = nowTime.Get( Java.Util.CalendarField.Minute ) / 30f * ( float )Math.PI;\nfloat minuteHandX = ( float )Math.Sin( minuteHandRotation ) * minuteHandLength;\nfloat minuteHandY = ( float )-Math.Cos( minuteHandRotation ) * minuteHandLength;\n// \u5206\u91dd\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\ncanvas.DrawLine( centerX, centerY, centerX + minuteHandX, centerY + minuteHandY, minuteHandPaint );\n\n// \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u3067\u306a\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\nif( !isAmbient ) {\n    // \u79d2\u91dd\u306e\u5148\u7aef\u306eXY\u5ea7\u6a19\u3092\u6c42\u3081\u307e\u3059\u3002\n    float secondHandRotation = nowTime.Get( Java.Util.CalendarField.Second ) / 30f * ( float )Math.PI;\n    float secondHandX = ( float )Math.Sin( secondHandRotation ) * secondHandLength;\n    float secondHandY = ( float )-Math.Cos( secondHandRotation ) * secondHandLength;\n    // \u5206\u91dd\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n    canvas.DrawLine( centerX, centerY, centerX + secondHandX, centerY + secondHandY, secondHandPaint );\n}\n\n\n\n3.14. OnVisibilityChanged\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nOnVisibilityChanged\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android Wear\u30c7\u30d0\u30a4\u30b9\u306e\u753b\u9762\u306e\u8868\u793a\u30fb\u975e\u8868\u793a\u304c\u5207\u308a\u66ff\u308f\u3063\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u203bAndroid Wear\u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\u3067\u300c\u5e38\u306b\u753b\u9762\u8868\u793a\u300d\u3092OFF\u306b\u3057\u305f\u6642\u3001\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9\u3067\u4e00\u5b9a\u6642\u9593\u304c\u7d4c\u3064\u3068\u3001\u4e00\u65e6\u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u306b\u79fb\u884c\u3057\u3066\u304b\u3089\u753b\u9762\u3092\u6d88\u706f\u3057\u307e\u3059\u3002\u5f93\u3063\u3066\u3001OnVisibilityChanged\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u524d\u306bOnAmbientModeChanged\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\uff08\u9006\u306b\u3001\u753b\u9762\u6d88\u706f\u304b\u3089\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9\u3078\u306e\u79fb\u884c\u3067\u306f\u3001OnVisibilityChanged\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u884c\u5f8c\u306bOnAmbientModeChanged\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\uff09\n\n\nOnVisibilityChanged\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnVisibilityChanged( bool visible ) {\n    base.OnVisibilityChanged( visible );\n\n    // \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u306e\u8868\u793a\u30fb\u975e\u8868\u793a\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n    if( visible ) {\n        // TimeZoneReceiver\u304c\u672a\u521d\u671f\u5316\u306e\u6642\u3001\u3053\u3053\u3067\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n        if( timeZoneReceiver == null ) {\n            timeZoneReceiver = new TimeZoneReceiver(\n                intent => {\n                    nowTime.TimeZone = Java.Util.TimeZone.Default;\n                }\n            );\n        }\n        if( !timeZoneReceiverRegistered ) {\n            // \u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u7528\u306e\u30ec\u30b7\u30fc\u30d0\u30fc\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n            var intentFilter = new IntentFilter( Intent.ActionTimezoneChanged );\n            Application.Context.RegisterReceiver( timeZoneReceiver, intentFilter );\n            timeZoneReceiverRegistered = true;\n        }\n\n        // \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u304c\u63cf\u753b\u3055\u308c\u3066\u3044\u306a\u3044\u6642\u306b\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u304c\u5909\u5316\u3057\u305f\u5834\u5408\u306e\u5099\u3048\u3001\u73fe\u5728\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u6642\u306e\u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n        nowTime = Java.Util.Calendar.GetInstance( Java.Util.TimeZone.Default );\n    }\n    else {\n        if( timeZoneReceiverRegistered ) {\n            // \u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u7528\u306e\u30ec\u30b7\u30fc\u30d0\u30fc\u3092\u767b\u9332\u89e3\u9664\u3057\u307e\u3059\u3002\n            Application.Context.UnregisterReceiver( timeZoneReceiver );\n            timeZoneReceiverRegistered = false;\n        }\n\n    }\n\n    // \u30bf\u30a4\u30de\u30fc\u306e\u52d5\u4f5c\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n    UpdateTimer();\n}\n\n\n\n4. \u5b8c\u6210\u5f8c\u306e\u30b3\u30fc\u30c9\n\u5b8c\u6210\u5f8c\u306e\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n\u203b\u30b3\u30e1\u30f3\u30c8\u4ed8\u304d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306fGist\u306b\u3066\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nMyWatchFace.cs\uff08\u5b8c\u6210\u5f8c\uff09\nusing System;\n\nusing Android.App;\nusing Android.Content;\nusing Android.Graphics;\nusing Android.Graphics.Drawables;\nusing Android.OS;\nusing Android.Service.Wallpaper;\nusing Android.Support.V4.Content;\nusing Android.Support.Wearable.Watchface;\nusing Android.Text.Format;\nusing Android.Views;\n\nnamespace WatchFaceTest {\n\n    [Service( Label = \"@string/watch_name\", Permission = \"android.permission.BIND_WALLPAPER\" )]\n    [MetaData( \"android.service.wallpaper\", Resource = \"@xml/watch_face\" )]\n    [MetaData( \"com.google.android.wearable.watchface.preview\", Resource = \"@drawable/preview\" )]\n    [MetaData( \"com.google.android.wearable.watchface.preview_circular\", Resource = \"@drawable/preview_circular\" )]\n    [IntentFilter( new[] { \"android.service.wallpaper.WallpaperService\" }, Categories = new[] { \"com.google.android.wearable.watchface.category.WATCH_FACE\" } )]\n    public class AnalogWatchFaceService : CanvasWatchFaceService {\n\n        private static readonly long InteractiveUpdateRateMilliseconds = Java.Util.Concurrent.TimeUnit.Seconds.ToMillis( 1 );\n\n        private const int MessageUpdateTime = 0;\n\n        public override WallpaperService.Engine OnCreateEngine() {\n            return new AnalogWatchFaceEngine( this );\n        }\n\n        private class AnalogWatchFaceEngine : CanvasWatchFaceService.Engine {\n\n            private CanvasWatchFaceService owner;\n\n            private readonly Handler updateTimeHandler;\n\n            private Java.Util.Calendar nowTime;\n\n            private Paint backgroundPaint;\n\n            private Paint hourHandPaint;\n            private Paint minuteHandPaint;\n            private Paint secondHandPaint;\n\n            private bool isAmbient;\n\n            private bool isRequiredLowBitAmbient;\n\n            private bool isReqiredBurnInProtection;\n\n            private bool isMute;\n\n            private TimeZoneReceiver timeZoneReceiver;\n\n            private bool timeZoneReceiverRegistered = false;\n\n            public AnalogWatchFaceEngine( CanvasWatchFaceService owner ) : base( owner ) {\n                this.owner = owner;\n                updateTimeHandler = new Handler(\n                    message => {\n                        switch( message.What ) {\n                            case MessageUpdateTime:\n                                Invalidate();\n                                if( ShouldTimerBeRunning ) {\n                                    long timeMillseconds = DateTime.UtcNow.Ticks / TimeSpan.TicksPerMillisecond;\n                                    long delayMilliseconds = InteractiveUpdateRateMilliseconds - ( timeMillseconds % InteractiveUpdateRateMilliseconds );\n                                    updateTimeHandler.SendEmptyMessageDelayed( MessageUpdateTime, delayMilliseconds );\n                                }\n                                break;\n                        }\n                    }\n                );\n\n                timeZoneReceiver = new TimeZoneReceiver(\n                    intent => {\n                        nowTime.TimeZone = Java.Util.TimeZone.Default;\n                    }\n                );\n            }\n\n            public override void OnCreate( ISurfaceHolder holder ) {\n\n                SetWatchFaceStyle(\n                    new WatchFaceStyle.Builder( owner )\n                        .SetCardPeekMode( WatchFaceStyle.PeekModeShort )\n                        .SetBackgroundVisibility( WatchFaceStyle.BackgroundVisibilityInterruptive )\n                        .SetShowSystemUiTime( false )\n                        .Build()\n                );\n\n                base.OnCreate( holder );\n\n                var resources = owner.Resources;\n\n                backgroundPaint = new Paint();\n                backgroundPaint.Color = resources.GetColor( Resource.Color.background );\n\n                hourHandPaint = new Paint();\n                hourHandPaint.Color = resources.GetColor( Resource.Color.analog_hands );\n                hourHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.hour_hand_stroke );\n                hourHandPaint.AntiAlias = true;\n                hourHandPaint.StrokeCap = Paint.Cap.Round;\n\n                minuteHandPaint = new Paint();\n                minuteHandPaint.Color = hourHandPaint.Color;\n                minuteHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.minute_hand_stroke );\n                minuteHandPaint.AntiAlias = true;\n                minuteHandPaint.StrokeCap = Paint.Cap.Round;\n\n                secondHandPaint = new Paint();\n                secondHandPaint.Color = resources.GetColor( Resource.Color.analog_second_hand );\n                secondHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.second_hand_stroke );\n                secondHandPaint.AntiAlias = true;\n                secondHandPaint.StrokeCap = Paint.Cap.Round;\n\n                nowTime = Java.Util.Calendar.GetInstance( Java.Util.TimeZone.Default );\n            }\n\n            public override void OnDestroy() {\n                updateTimeHandler.RemoveMessages( MessageUpdateTime );\n\n                base.OnDestroy();\n            }\n\n            public override void OnApplyWindowInsets( WindowInsets insets ) {\n                base.OnApplyWindowInsets( insets );\n\n                //bool isRound = insets.IsRound;\n            }\n\n            public override void OnPropertiesChanged( Bundle properties ) {\n                base.OnPropertiesChanged( properties );\n\n                isRequiredLowBitAmbient = properties.GetBoolean( PropertyLowBitAmbient, false );\n                isReqiredBurnInProtection = properties.GetBoolean( PropertyBurnInProtection, false );\n            }\n\n            public override void OnTimeTick() {\n                base.OnTimeTick();\n\n                Invalidate();\n            }\n\n            public override void OnAmbientModeChanged( bool inAmbientMode ) {\n                base.OnAmbientModeChanged( inAmbientMode );\n\n                if( isAmbient != inAmbientMode ) {\n                    isAmbient = inAmbientMode;\n                    if( isRequiredLowBitAmbient ) {\n                        bool antiAlias = !inAmbientMode;\n\n                        hourHandPaint.AntiAlias = antiAlias;\n                        minuteHandPaint.AntiAlias = antiAlias;\n                        secondHandPaint.AntiAlias = antiAlias;\n                        Invalidate();\n                    }\n                    UpdateTimer();\n                }\n            }\n\n            public override void OnInterruptionFilterChanged( int interruptionFilter ) {\n                base.OnInterruptionFilterChanged( interruptionFilter );\n\n                bool inMuteMode = ( interruptionFilter == InterruptionFilterNone );\n\n                if( isMute != inMuteMode ) {\n                    isMute = inMuteMode;\n\n                    Invalidate();\n                }\n            }\n\n            public override void OnTapCommand( int tapType, int xValue, int yValue, long eventTime ) {\n                switch( tapType ) {\n                    case TapTypeTouch:\n                        break;\n                    case TapTypeTouchCancel:\n                        break;\n                    case TapTypeTap:\n                        break;\n                }\n            }\n\n            public override void OnDraw( Canvas canvas, Rect bounds ) {\n\n                nowTime = Java.Util.Calendar.GetInstance( nowTime.TimeZone );\n\n                if( isAmbient ) {\n                    canvas.DrawColor( Color.Black );\n                }\n                else {\n                    canvas.DrawRect( 0, 0, canvas.Width, canvas.Height, backgroundPaint );\n                }\n\n                float centerX = bounds.Width() / 2.0f;\n                float centerY = bounds.Height() / 2.0f;\n\n                float hourHandLength = centerX - 80;\n                float minuteHandLength = centerX - 40;\n                float secondHandLength = centerX - 20;\n\n                float hourHandRotation = ( ( nowTime.Get( Java.Util.CalendarField.Hour ) + ( nowTime.Get( Java.Util.CalendarField.Minute ) / 60f ) ) / 6f ) * ( float )Math.PI;\n                float hourHandX = ( float )Math.Sin( hourHandRotation ) * hourHandLength;\n                float hourHandY = ( float )-Math.Cos( hourHandRotation ) * hourHandLength;\n                canvas.DrawLine( centerX, centerY, centerX + hourHandX, centerY + hourHandY, hourHandPaint );\n\n                float minuteHandRotation = nowTime.Get( Java.Util.CalendarField.Minute ) / 30f * ( float )Math.PI;\n                float minuteHandX = ( float )Math.Sin( minuteHandRotation ) * minuteHandLength;\n                float minuteHandY = ( float )-Math.Cos( minuteHandRotation ) * minuteHandLength;\n                canvas.DrawLine( centerX, centerY, centerX + minuteHandX, centerY + minuteHandY, minuteHandPaint );\n\n                if( !isAmbient ) {\n                    float secondHandRotation = nowTime.Get( Java.Util.CalendarField.Second ) / 30f * ( float )Math.PI;\n                    float secondHandX = ( float )Math.Sin( secondHandRotation ) * secondHandLength;\n                    float secondHandY = ( float )-Math.Cos( secondHandRotation ) * secondHandLength;\n                    canvas.DrawLine( centerX, centerY, centerX + secondHandX, centerY + secondHandY, secondHandPaint );\n                }\n            }\n\n            public override void OnVisibilityChanged( bool visible ) {\n                base.OnVisibilityChanged( visible );\n\n                if( visible ) {\n                    if( timeZoneReceiver == null ) {\n                        timeZoneReceiver = new TimeZoneReceiver(\n                            intent => {\n                                nowTime.TimeZone = Java.Util.TimeZone.Default;\n                            }\n                        );\n                    }\n                    if( !timeZoneReceiverRegistered ) {\n                        var intentFilter = new IntentFilter( Intent.ActionTimezoneChanged );\n                        Application.Context.RegisterReceiver( timeZoneReceiver, intentFilter );\n                        timeZoneReceiverRegistered = true;\n                    }\n\n                    nowTime = Java.Util.Calendar.GetInstance( Java.Util.TimeZone.Default );\n                }\n                else {\n                    if( timeZoneReceiverRegistered ) {\n                        Application.Context.UnregisterReceiver( timeZoneReceiver );\n                        timeZoneReceiverRegistered = false;\n                    }\n\n                }\n\n                UpdateTimer();\n            }\n\n            private void UpdateTimer() {\n                updateTimeHandler.RemoveMessages( MessageUpdateTime );\n                if( ShouldTimerBeRunning ) {\n                    updateTimeHandler.SendEmptyMessage( MessageUpdateTime );\n                }\n            }\n\n            private bool ShouldTimerBeRunning =>\n                IsVisible && !IsInAmbientMode;\n        }\n    }\n\n    public class TimeZoneReceiver : BroadcastReceiver {\n\n        private Action<Intent> receiver;\n\n        public TimeZoneReceiver( Action<Intent> _receiver ) {\n            receiver = _receiver;\n        }\n\n        public override void OnReceive( Context context, Intent intent ) {\n            receiver?.Invoke( intent );\n        }\n    }\n}\n\n\nWatch Face\u30a2\u30d7\u30ea\u306e\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002\n\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u3084Android Wear\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30ca\u30ed\u30b0\u6642\u8a08\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n\nNext\n\u6b21\u56de\u306f\u3001\u80cc\u666f\u753b\u50cf\u3084\u30a2\u30ca\u30ed\u30b0\u91dd\u306e\u753b\u50cf\u3092\u63cf\u753b\u3057\u3001\u3088\u308a\u30ea\u30c3\u30c1\u306aWatch Face\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001See you next!\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\nWatch Face\u3092\u4f5c\u308b \u30b5\u30f3\u30d7\u30eb\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u89e3\u304f - FireSpeed\n\nAndroid Studio\u3092\u4f7f\u7528\u3057\u3066\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u304fWatch face\u3092\u4f5c\u308b - Qiita by @eoppp\n\n\nXamarin Android WatchFace Sample - GitHub by peterfriese, Redth\n\n\n\u300cXamarin\u3067Android Wear\u306eWatch Face\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\uff01\u300d\u30b7\u30ea\u30fc\u30ba\u4e00\u89a7\n\nVol. 0 : \u6e96\u5099\u7de8\n\nVol. 1 : \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u7de8\n\n\uff08Vol.1x: Xamarin Studio\u5411\u3051\uff09\n\n\nVol.2 : \u30d7\u30ed\u30b0\u30e9\u30e0\u4f5c\u6210\u7de8\uff08 Page-1 / Page-2 \uff09\n\n\n\n\n\n\u4f8b\u3048\u3070\u3001\u73fe\u5728\u306e\u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u304b\u3089\u5225\u306e\u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u306b\u5207\u308a\u66ff\u3048\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n\u672c\u8a18\u4e8b\u306f\u3001[Vol.2 : \u30d7\u30ed\u30b0\u30e9\u30e0\u4f5c\u6210\u7de8\uff08Page-1\uff09](http://qiita.com/nia_tn1012/items/1a4e712c1c0284fd5f49)\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n#3. Watch Face\u306eEngine\u30af\u30e9\u30b9\u3092\u4f5c\u6210\uff08\u7d9a\u304d\uff09\n\n\u3053\u3053\u304b\u3089\u306f\u3001AnalogWatchFaceEngine\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n##3.5. OnCreate\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n**[OnCreate](https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceService.Engine.html#onCreate(android.view.SurfaceHolder))**\u30e1\u30bd\u30c3\u30c9\u306f\u3001AnalogWatchFaceEngine\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u4e3b\u306b\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\n* \u30ea\u30bd\u30fc\u30b9\u304b\u3089\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\n* Paint\u306a\u3069\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\n* \u6642\u523b\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\n* \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u306e\u30b9\u30bf\u30a4\u30eb\uff08\u30b9\u30c6\u30fc\u30bf\u30b9\u30a2\u30a4\u30b3\u30f3\u3084\u3084OK Google\u306e\u8868\u793a\u306a\u3069\uff09\u3092\u8a2d\u5b9a\n\n```csharp:OnCreate\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnCreate( ISurfaceHolder holder ) {\n\n\t// \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u306e\u30b9\u30bf\u30a4\u30eb\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\tSetWatchFaceStyle(\n\t\tnew WatchFaceStyle.Builder( owner )\n\t\t\t// \u30e6\u30fc\u30b6\u30fc\u304b\u3089\u306e\u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\t\t\t//   true  : \u6709\u52b9\n\t\t\t//   false : \u7121\u52b9\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\n\t\t\t//.SetAcceptsTapEvents( true ) \n\t\t\t// \u901a\u77e5\u304c\u6765\u305f\u6642\u306e\u901a\u77e5\u30ab\u30fc\u30c9\u306e\u9ad8\u3055\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\t\t\t.SetCardPeekMode( WatchFaceStyle.PeekModeShort )\n\t\t\t// \u901a\u77e5\u30ab\u30fc\u30c9\uff08small card\u306e\u8868\u793a\u6642\uff09\u306e\u80cc\u666f\u306e\u8868\u793a\u65b9\u6cd5\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\t\t\t//   WatchFaceStyle.BackgroundVisibilityInterruptive : \u4e00\u90e8\u306e\u91cd\u8981\u306a\u901a\u77e5\u306b\u9650\u308a\u3001\u8868\u793a\u3057\u307e\u3059\u3002\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\n\t\t\t//   WatchFaceStyle.BackgroundVisibilityPersistent   : \u901a\u77e5\u30ab\u30fc\u30c9\u306e\u7a2e\u985e\u306b\u304b\u304b\u308f\u3089\u305a\u3001\u8868\u793a\u3057\u307e\u3059\u3002\n\t\t\t.SetBackgroundVisibility( WatchFaceStyle.BackgroundVisibilityInterruptive )\n\t\t\t// \u30b7\u30b9\u30c6\u30e0UI\u306e\u30c7\u30b8\u30bf\u30eb\u6642\u8a08\u3092\u8868\u793a\u3059\u308b\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\uff08\u4f7f\u7528\u3057\u3066\u3044\u308b\u4f8b\u3068\u3057\u3066\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u300c\u30b7\u30f3\u30d7\u30eb\u300d\u304c\u3042\u308a\u307e\u3059\u3002\uff09\n\t\t\t//   true  : \u8868\u793a\n\t\t\t//   false : \u975e\u8868\u793a\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\n\t\t\t.SetShowSystemUiTime( false )\n\t\t\t// \u8a2d\u5b9a\u3057\u305f\u30b9\u30bf\u30a4\u30eb\u60c5\u5831\u3092\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u6700\u5f8c\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\t\t\t.Build()\n\t);\n\n\tbase.OnCreate( holder );\n\n\tvar resources = owner.Resources;\n\n\t// \u80cc\u666f\u7528\u306e\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\tbackgroundPaint = new Paint();\n\t// \u30ea\u30bd\u30fc\u30b9\u304b\u3089\u80cc\u666f\u8272\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\tbackgroundPaint.Color = resources.GetColor( Resource.Color.background );\n\n\t// \u6642\u91dd\u7528\u306ePaint\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\thourHandPaint = new Paint();\n\thourHandPaint.Color = resources.GetColor( Resource.Color.analog_hands );\n\t// \u6642\u91dd\u306e\u5e45\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\thourHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.hour_hand_stroke );\n\t// \u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n\thourHandPaint.AntiAlias = true;\n\t// \u7dda\u7aef\u306e\u5f62\u306f\u4e38\u5f62\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\thourHandPaint.StrokeCap = Paint.Cap.Round;\n\n\t// \u5206\u91dd\u7528\u306ePaint\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\tminuteHandPaint = new Paint();\n\tminuteHandPaint.Color = hourHandPaint.Color;\n\tminuteHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.minute_hand_stroke );\n\tminuteHandPaint.AntiAlias = true;\n\tminuteHandPaint.StrokeCap = Paint.Cap.Round;\n\n\t// \u79d2\u91dd\u7528\u306ePaint\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\tsecondHandPaint = new Paint();\n\tsecondHandPaint.Color = resources.GetColor( Resource.Color.analog_second_hand );\n\tsecondHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.second_hand_stroke );\n\tsecondHandPaint.AntiAlias = true;\n\tsecondHandPaint.StrokeCap = Paint.Cap.Round;\n\n\t// \u6642\u523b\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\tnowTime = Java.Util.Calendar.GetInstance( Java.Util.TimeZone.Default );\n}\n```\n\n###3.5.1. \u7121\u6148\u60b2\u306aDeprecation\n**Android.Content.Res.Resources.[GetColor]()**\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android SDK Level 23\u4ee5\u964d\u3067\u306f\u975e\u63a8\u5968\u3068\u306a\u3063\u3066\u304a\u308a\u3001\u4ee3\u308f\u308a\u306b**Android.Support.V4.Content.ContextCompat.[GetColor]()**\u30e1\u30bd\u30c3\u30c9\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u306fColor\u578b\u3067\u306a\u304f\u3001**ARGB\u5024\u3092\u683c\u7d0d\u3057\u305fint\u578b**\u3067\u3042\u308a\u3001Paint\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eColor\u30d7\u30ed\u30d1\u30c6\u30a3\uff08Color\u578b\uff09\u306b\u4ee3\u5165\u3059\u308b\u306b\u306f\u3001\u4e00\u5de5\u592b\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n```csharp:\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u80cc\u666f\u8272\u306e\u8aad\u307f\u8fbc\u307f\n// \u975e\u63a8\u5968\u3068\u306a\u3063\u305f\u65b9\u6cd5\nbackgroundPaint.Color = owner.Resources.GetColor( Resource.Color.background );\n\n// \u4ee3\u308f\u308a\u306b\u63a8\u5968\u3055\u308c\u305f\u65b9\u6cd5\nint argb = ContextCompat.GetColor( owner, Resource.Color.background );\nbackgroundPaint.Color = Color.Argb( ( argb >> 24 ) & 0xFF, ( argb >> 16 ) & 0xFF, ( argb >> 8 ) & 0xFF, argb & 0xFF );\n\n// \u6ce8 : ContextCompat.GetColor\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3092\u3001Paint.Color\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u76f4\u63a5\u4ee3\u5165\u3067\u304d\u307e\u305b\u3093\u3002\nbackgroundPaint.Color = ContextCompat.GetColor( owner, Resource.Color.background );\n```\n\n##3.6. OnDestroy\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n**[OnDestroy](https://developer.android.com/reference/android/support/wearable/watchface/CanvasWatchFaceService.Engine.html#onDestroy())**\u30e1\u30bd\u30c3\u30c9\u306f\u3001AnalogWatchFaceEngine\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7834\u68c4\u3055\u308c\u308b\u6642[^1]\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n[^1]: \u4f8b\u3048\u3070\u3001\u73fe\u5728\u306e\u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u304b\u3089\u5225\u306e\u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u306b\u5207\u308a\u66ff\u3048\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\n```csharp:OnDestroy\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnDestroy() {\n\t// UpdateTimeHandler\u306b\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\tupdateTimeHandler.RemoveMessages( MessageUpdateTime );\n\n\tbase.OnDestroy();\n}\n```\n\n##3.7. OnApplyWindowInsets\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n**[OnApplyWindowInsets](https://developer.android.com/reference/android/service/wallpaper/WallpaperService.Engine.html#onApplyWindowInsets(android.view.WindowInsets))**\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u73fe\u5728\u306e**[WindowInsets](https://developer.android.com/reference/android/view/WindowInsets.html)**\u3092\u9069\u7528\u3059\u308b\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001Android Wear\u30c7\u30d0\u30a4\u30b9\u306e**\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5f62\u72b6\uff08\u4e38\u5f62 or \u56db\u89d2\u5f62\uff09\u3092\u5224\u5225**\u3059\u308b\u6642\u306b\u5229\u7528\u3057\u307e\u3059\u3002\n\n```csharp:OnApplyWindowInsets\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnApplyWindowInsets( WindowInsets insets ) {\n\tbase.OnApplyWindowInsets( insets );\n\n\t// Android Wear\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u4e38\u5f62\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n\t//bool isRound = insets.IsRound;\n}\n```\n\n##3.8. OnPropertiesChanged\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n**[OnPropertiesChanged](https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceService.Engine.html#onPropertiesChanged(android.os.Bundle))**\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android Wear\u30c7\u30d0\u30a4\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5b9a\u3081\u3089\u308c\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u4e3b\u306b\u3001Low-Bit\u5236\u9650\u53ca\u3073\u713c\u304d\u4ed8\u304d\u9632\u6b62\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```csharp:OnPropertiesChanged\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnPropertiesChanged( Bundle properties ) {\n\tbase.OnPropertiesChanged( properties );\n\n\t// \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u6642\u3001Low-Bit\u5236\u9650\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\tisRequiredLowBitAmbient = properties.GetBoolean( PropertyLowBitAmbient, false );\n\t// \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u6642\u3001\u713c\u304d\u4ed8\u304d\u9632\u6b62\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\tisReqiredBurnInProtection = properties.GetBoolean( PropertyBurnInProtection, false );\n}\n```\n\n##3.9. OnTimeTick\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n**[OnTimeTick](https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceService.Engine.html#onTimeTick())**\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android Wear\u306e\u30e2\u30fc\u30c9\u306b\u304b\u304b\u308f\u3089\u305a\u30011\u5206\u3054\u3068\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```csharp:OnTimeTick\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnTimeTick() {\n\tbase.OnTimeTick();\n\n\t// \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u3092\u518d\u63cf\u753b\u3057\u307e\u3059\u3002\n\tInvalidate();\n}\n```\n\n##3.10. OnAmbientModeChanged\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n**[OnAmbientModeChanged](https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceService.Engine.html#onAmbientModeChanged(boolean))**\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android Wear\u30c7\u30d0\u30a4\u30b9\u3067\u300c\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9\u300d\u3068\u300c\u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u300d\u3092\u5207\u308a\u66ff\u3048\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u5f15\u6570\u306einAmbientMode\u304b\u3089\u3001\u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n\n```csharp:OnAmbientModeChanged\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnAmbientModeChanged( bool inAmbientMode ) {\n\tbase.OnAmbientModeChanged( inAmbientMode );\n\n\t// \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u304c\u5909\u66f4\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n\tif( isAmbient != inAmbientMode ) {\n\t\t// \u73fe\u5728\u306e\u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\t\tisAmbient = inAmbientMode;\n\n\t\t// \u30c7\u30d0\u30a4\u30b9\u304cLow-Bit\u5236\u9650\u3092\u5fc5\u8981\u3068\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n\t\tif( isRequiredLowBitAmbient ) {\n\t\t\tbool antiAlias = !inAmbientMode;\n\n\t\t\t// \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u306e\u6642\u306f\u3001\u91dd\u306ePaint\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u7121\u52b9\u306b\u3057\u3001\n\t\t\t// \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\n\t\t\thourHandPaint.AntiAlias = antiAlias;\n\t\t\tminuteHandPaint.AntiAlias = antiAlias;\n\t\t\tsecondHandPaint.AntiAlias = antiAlias;\n\n\t\t\t// \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u3092\u518d\u63cf\u753b\u3057\u307e\u3059\u3002\n\t\t\tInvalidate();\n\t\t}\n\n\t\t// \u30bf\u30a4\u30de\u30fc\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\t\tUpdateTimer();\n\t}\n}\n```\n\n```csharp:UpdateTimer\u30e1\u30bd\u30c3\u30c9\nprivate void UpdateTimer() {\n\t// UpdateTimeHandler\u304b\u3089MessageUpdateTime\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u308a\u9664\u304d\u307e\u3059\u3002\n\tupdateTimeHandler.RemoveMessages( MessageUpdateTime );\n\t// UpdateTimeHandler\u3092\u52d5\u4f5c\u3055\u305b\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n\tif( ShouldTimerBeRunning ) {\n\t\t// UpdateTimeHandler\u306bMessageUpdateTime\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\t\tupdateTimeHandler.SendEmptyMessage( MessageUpdateTime );\n\t}\n}\n```\n\n##3.11. OnInterruptionFilterChanged\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n**[OnInterruptionFilterChanged]()**\u30e1\u30bd\u30c3\u30c9\u306f\u3001Interruption\u30d5\u30a3\u30eb\u30bf\u30fc\u304c\u5909\u66f4\u3055\u308c\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u4e3b\u306b\u3001Android Wear\u30c7\u30d0\u30a4\u30b9\u306e\u901a\u77e5\u306eON / OFF\u72b6\u614b\u3092\u5224\u5225\u3059\u308b\u6642\u306b\u5229\u7528\u3057\u307e\u3059\u3002\n\n```csharp:OnInterruptionFilterChanged\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnInterruptionFilterChanged( int interruptionFilter ) {\n\tbase.OnInterruptionFilterChanged( interruptionFilter );\n\n\t// Interruption\u30d5\u30a3\u30eb\u30bf\u30fc\u304cInterruptionFilterNone\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u5224\u5225\u3057\u307e\u3059\u3002\n\tbool inMuteMode = ( interruptionFilter == InterruptionFilterNone );\n\n\t// \u30df\u30e5\u30fc\u30c8\u30e2\u30fc\u30c9\u304c\u5909\u66f4\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u5224\u5225\u3057\u307e\u3059\u3002\n\tif( isMute != inMuteMode ) {\n\t\tisMute = inMuteMode;\n\n\t\t// \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u3092\u518d\u63cf\u753b\u3057\u307e\u3059\u3002\n\t\tInvalidate();\n\t}\n}\n```\n\n|InterruptionFilter\u306e\u5024|\u901a\u77e5|\n|---|---|\n|InterruptionFilterAll\uff081\uff09|\u3059\u3079\u3066\u306e\u901a\u77e5\u3092\u8868\u793a\u3057\u307e\u3059\u3002|\n|InterruptionFilterPriority\uff082\uff09|\u512a\u5148\u5ea6\u306e\u9ad8\u3044\u901a\u77e5\u306e\u307f\u8868\u793a\u3057\u307e\u3059\u3002|\n|InterruptionFilterNone\uff083\uff09|\u3059\u3079\u3066\u306e\u901a\u77e5\u3092\u8868\u793a\u3057\u307e\u305b\u3093\u3002|\n|InterruptionFilterAlarm\uff084\uff09|\u30a2\u30e9\u30fc\u30e0\u306e\u901a\u77e5\u306e\u307f\u8868\u793a\u3057\u307e\u3059\u3002|\n|InterruptionFilterUnknown\uff080\uff09|Interruption\u30d5\u30a3\u30eb\u30bf\u30fc\u304c\u5229\u7528\u3067\u304d\u307e\u305b\u3093\u3002|\n\n##3.12. OnTapCommand\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n**[OnTapCommand](https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceService.Engine.html#onTapCommand(int,%20int,%20int,%20long))**\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u753b\u9762\u3092\u30bf\u30c3\u30d7\u3057\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n>\u203b\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\u3001**[WatchFaceStyle](https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceStyle.html).[Builder](https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceStyle.Builder.html)**\u306b\u3066\u3001**[SetAcceptsTapEvents](https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceStyle.Builder.html#setAcceptsTapEvents(boolean))**\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b**true**\u3092\u6307\u5b9a\u3057\u3001\u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8\u3092\u6709\u52b9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u203b\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android Wear 1.3\u4ee5\u4e0a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n|\u5f15\u6570|\u6982\u8981|\n|---|---|\n|tapType|\u30bf\u30c3\u30d7\u306e\u7a2e\u985e|\n|xValue|\u30bf\u30c3\u30d7\u3057\u305f\u4f4d\u7f6e\u306eX\u5ea7\u6a19|\n|yValue|\u30bf\u30c3\u30d7\u3057\u305f\u4f4d\u7f6e\u306eY\u5ea7\u6a19|\n|eventTime|\u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u6642\u9593\uff08\u30df\u30ea\u79d2\uff09|\n\n```csharp:OnTapCommand\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnTapCommand( int tapType, int xValue, int yValue, long eventTime ) {\n\t// \u30bf\u30c3\u30d7\u306e\u7a2e\u985e\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n\tswitch( tapType ) {\n\t\tcase TapTypeTouch:\n\t\t\t// TODO : \u30e6\u30fc\u30b6\u30fc\u304c\u753b\u9762\u3092\u30bf\u30c3\u30c1\u3057\u305f\u6642\u306e\u51e6\u7406\u3092\u5165\u308c\u307e\u3059\u3002\n\t\t\tbreak;\n\t\tcase TapTypeTouchCancel:\n\t\t\t// TODO : \u30e6\u30fc\u30b6\u30fc\u304c\u753b\u9762\u3092\u30bf\u30c3\u30c1\u3057\u305f\u307e\u307e\u3001\u6307\u3092\u52d5\u304b\u3057\u305f\u6642\u306e\u51e6\u7406\u3092\u5165\u308c\u307e\u3059\u3002\n\t\t\tbreak;\n\t\tcase TapTypeTap:\n\t\t\t// TODO : \u30e6\u30fc\u30b6\u30fc\u304c\u30bf\u30c3\u30d7\u3057\u305f\u6642\u306e\u51e6\u7406\u3092\u5165\u308c\u307e\u3059\u3002\n\t\t\tbreak;\n\t}\n}\n```\n\n##3.13. OnDraw\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n**[OnDraw](https://developer.android.com/reference/android/support/wearable/watchface/CanvasWatchFaceService.Engine.html#onDraw(android.graphics.Canvas,%20android.graphics.Rect))**\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\u3057\u3001Watch Face\u306e\u753b\u9762\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\n>\u203b\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u5185\u306e\u51e6\u7406\u306f\u3001\u3067\u304d\u308b\u3060\u3051\u77ed\u304f\u7d42\u3048\u308b\u3088\u3046\u306b\u3057\u3001\u30ea\u30bd\u30fc\u30b9\u306e\u8aad\u307f\u8fbc\u307f\u3084\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\u306a\u3069\u306f\u3001\u306a\u308b\u3079\u304f**OnCreate**\u30e1\u30bd\u30c3\u30c9\u3067\u884c\u3046\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n|\u5f15\u6570|\u6982\u8981|\n|---|---|\n|canvas|\u753b\u9762\u306b\u63cf\u753b\u3059\u308b\u305f\u3081\u306e\u30ad\u30e3\u30f3\u30d1\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8|\n|bounds|\u753b\u9762\u306e\u30b5\u30a4\u30ba\u306a\u3069\u3092\u683c\u7d0d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8|\n\n```csharp:OnDraw\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnDraw( Canvas canvas, Rect bounds ) {\n\t// \u4e2d\u7565\n}\n```\n\n###3.13.1. \u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\n\n```csharp:Android\u306eTime\u30af\u30e9\u30b9\u306e\u5834\u5408\nnowTime.SetToNow();\n```\n\n```csharp:Java\u306eCalendar\u30af\u30e9\u30b9\u306e\u5834\u5408\nnowTime = Java.Util.Calendar.GetInstance( nowTime.TimeZone );\n```\n\n```csharp:.NET\u306eDateTime\u69cb\u9020\u4f53\u306e\u5834\u5408\nnowTime = DateTime.Now;\n```\n\n###3.13.2. \u80cc\u666f\u3092\u63cf\u753b\n\n\u753b\u9762\u5168\u4f53\u3092\u80cc\u666f\u8272\u3067\u5857\u308a\u3064\u3076\u3057\u3001\u524d\u56de\u63cf\u753b\u3057\u305f\u5185\u5bb9\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\n\n\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9\u306e\u6642\u306f\u3001\u30ea\u30bd\u30fc\u30b9\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u80cc\u666f\u8272\u3067\u63cf\u753b\u3057\u3001\u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u306e\u6642\u306f\u3001\u9ed2\u8272\u3067\u5857\u308a\u3064\u3076\u3057\u307e\u3059\u3002\n\n**[DrawColor](https://developer.android.com/reference/android/graphics/Canvas.html#drawColor(int))**\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u753b\u9762\u5168\u4f53\u3092\u6307\u5b9a\u3057\u305f\u8272\u3067\u5857\u308a\u3064\u3076\u3057\u307e\u3059\u3002\n**[DrawRect](https://developer.android.com/reference/android/graphics/Canvas.html#drawRect(float,%20float,%20float,%20float,%20android.graphics.Paint))**\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u6307\u5b9a\u3057\u305f\u5de6\u4e0a\u3068\u53f3\u4e0b\u306eXY\u5ea7\u6a19\u3068Paint\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u306a\u308b\u77e9\u5f62\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\n```csharp:\u80cc\u666f\u3092\u63cf\u753b\n// \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u5224\u5225\u3057\u307e\u3059\u3002\nif( IsInAmbientMode ) {\n\t// \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u306e\u6642\u306f\u3001\u9ed2\u8272\u3067\u5857\u308a\u3064\u3076\u3057\u307e\u3059\u3002\n\tcanvas.DrawColor( Color.Black );\n}\nelse {\n\t// \u305d\u3046\u3067\u306a\u3044\u6642\u306f\u3001\u80cc\u666f\u753b\u50cf\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\tcanvas.DrawRect( 0, 0, canvas.Width, canvas.Height, backgroundPaint );\n}\n```\n\n###3.13.3. \u6642\u91dd\u3001\u5206\u91dd\u3001\u79d2\u91dd\u3092\u63cf\u753b\n\n\u79d2\u91dd\u306f\u30011\u79d2\u3042\u305f\u308a$2\\pi / 60$ \\[rad\\]\u306a\u306e\u3067\u3001$s$\u79d2\u306e\u6642\u306e\u79d2\u91dd\u306e\u89d2\u5ea6$\\theta_s$\u306f\u3001\u4ee5\u4e0b\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n\n```math\n\\theta_s = s \\times \\pi / 30\n```\n\n\u5206\u91dd\u3082\u540c\u69d8\u306b\u3001$m$\u5206\u306e\u6642\u306e\u5206\u91dd\u306e\u89d2\u5ea6$\\theta_m$\u306f\u3001\u4ee5\u4e0b\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n\n```math\n\\theta_m = m \\times \\pi / 30\n```\n\n\u6642\u91dd\u306f\u30011\u6642\u9593\u3042\u305f\u308a$2\\pi / 6$ [rad]\u3067\u3059\u304c\u3001\u6642\u306e\u5024$h$\u3060\u3051\u3067\u306a\u304f\u5206\u306e\u5024$m$\u3082\u8003\u616e\u3057\u3066\u3001\u89d2\u5ea6$\\theta_h$\u3092\u6c42\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n```math\n\\theta_h = ( ( h + m / 60 ) \\times \\pi / 6\n```\n\n12\u6642\u306e\u4f4d\u7f6e\u3092\u57fa\u6e96\u306b\u3001\u73fe\u5728\u306e\u91dd\u306e\u89d2\u5ea6\u3092$\\theta$ \\[rad\\]\u3001\u91dd\u306e\u9577\u3055\u3092$l$\u3068\u3059\u308b\u3068\u3001\u91dd\u306e\u5148\u7aef\u306eXY\u5ea7\u6a19\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n\n```math\nx = l \\times \\sin( \\theta )\n```\n\n```math\ny = -l \\times \\cos( \\theta )\n```\n\n\u3042\u3068\u306f\u3001**[DrawLine](https://developer.android.com/reference/android/graphics/Canvas.html#drawLine(float,%20float,%20float,%20float,%20android.graphics.Paint))**\u30e1\u30bd\u30c3\u30c9\u3067\u63cf\u753b\u3057\u307e\u3059\u3002\n\n```csharp:\u6642\u91dd\u3001\u5206\u91dd\u3001\u79d2\u91dd\u3092\u63cf\u753b\n// \u4e2d\u5fc3\u306eXY\u5ea7\u6a19\u3092\u6c42\u3081\u307e\u3059\u3002\nfloat centerX = bounds.Width() / 2.0f;\nfloat centerY = bounds.Height() / 2.0f;\n\n// \u91dd\u306e\u9577\u3055\u3092\u6c42\u3081\u307e\u3059\u3002\nfloat hourHandLength = centerX - 80;\nfloat minuteHandLength = centerX - 40;\nfloat secondHandLength = centerX - 20;\n\n// \u6642\u91dd\u306e\u5148\u7aef\u306eXY\u5ea7\u6a19\u3092\u6c42\u3081\u307e\u3059\u3002\nfloat hourHandRotation = ( ( nowTime.Get( Java.Util.CalendarField.Hour ) + ( nowTime.Get( Java.Util.CalendarField.Minute ) / 60f ) ) / 6f ) * ( float )Math.PI;\nfloat hourHandX = ( float )Math.Sin( hourHandRotation ) * hourHandLength;\nfloat hourHandY = ( float )-Math.Cos( hourHandRotation ) * hourHandLength;\n// \u6642\u91dd\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\ncanvas.DrawLine( centerX, centerY, centerX + hourHandX, centerY + hourHandY, hourHandPaint );\n\n// \u5206\u91dd\u306e\u5148\u7aef\u306eXY\u5ea7\u6a19\u3092\u6c42\u3081\u307e\u3059\u3002\nfloat minuteHandRotation = nowTime.Get( Java.Util.CalendarField.Minute ) / 30f * ( float )Math.PI;\nfloat minuteHandX = ( float )Math.Sin( minuteHandRotation ) * minuteHandLength;\nfloat minuteHandY = ( float )-Math.Cos( minuteHandRotation ) * minuteHandLength;\n// \u5206\u91dd\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\ncanvas.DrawLine( centerX, centerY, centerX + minuteHandX, centerY + minuteHandY, minuteHandPaint );\n\n// \u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u3067\u306a\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3057\u307e\u3059\u3002\nif( !isAmbient ) {\n\t// \u79d2\u91dd\u306e\u5148\u7aef\u306eXY\u5ea7\u6a19\u3092\u6c42\u3081\u307e\u3059\u3002\n\tfloat secondHandRotation = nowTime.Get( Java.Util.CalendarField.Second ) / 30f * ( float )Math.PI;\n\tfloat secondHandX = ( float )Math.Sin( secondHandRotation ) * secondHandLength;\n\tfloat secondHandY = ( float )-Math.Cos( secondHandRotation ) * secondHandLength;\n\t// \u5206\u91dd\u3092\u63cf\u753b\u3057\u307e\u3059\u3002\n\tcanvas.DrawLine( centerX, centerY, centerX + secondHandX, centerY + secondHandY, secondHandPaint );\n}\n```\n\n##3.14. OnVisibilityChanged\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n**[OnVisibilityChanged](https://developer.android.com/reference/android/support/wearable/watchface/WatchFaceService.Engine.html#onVisibilityChanged(boolean))**\u30e1\u30bd\u30c3\u30c9\u306f\u3001Android Wear\u30c7\u30d0\u30a4\u30b9\u306e\u753b\u9762\u306e\u8868\u793a\u30fb\u975e\u8868\u793a\u304c\u5207\u308a\u66ff\u308f\u3063\u305f\u6642\u306b\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n>\u203bAndroid Wear\u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\u3067\u300c\u5e38\u306b\u753b\u9762\u8868\u793a\u300d\u3092OFF\u306b\u3057\u305f\u6642\u3001\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9\u3067\u4e00\u5b9a\u6642\u9593\u304c\u7d4c\u3064\u3068\u3001**\u4e00\u65e6\u30a2\u30f3\u30d3\u30a8\u30f3\u30c8\u30e2\u30fc\u30c9\u306b\u79fb\u884c\u3057\u3066\u304b\u3089\u753b\u9762\u3092\u6d88\u706f**\u3057\u307e\u3059\u3002\u5f93\u3063\u3066\u3001OnVisibilityChanged\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u524d\u306bOnAmbientModeChanged\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\uff08\u9006\u306b\u3001\u753b\u9762\u6d88\u706f\u304b\u3089\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30e2\u30fc\u30c9\u3078\u306e\u79fb\u884c\u3067\u306f\u3001OnVisibilityChanged\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u884c\u5f8c\u306bOnAmbientModeChanged\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\uff09\n\n```csharp:OnVisibilityChanged\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\npublic override void OnVisibilityChanged( bool visible ) {\n\tbase.OnVisibilityChanged( visible );\n\n\t// \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u306e\u8868\u793a\u30fb\u975e\u8868\u793a\u3092\u5224\u5225\u3057\u307e\u3059\u3002\n\tif( visible ) {\n\t\t// TimeZoneReceiver\u304c\u672a\u521d\u671f\u5316\u306e\u6642\u3001\u3053\u3053\u3067\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\t\tif( timeZoneReceiver == null ) {\n\t\t\ttimeZoneReceiver = new TimeZoneReceiver(\n\t\t\t\tintent => {\n\t\t\t\t\tnowTime.TimeZone = Java.Util.TimeZone.Default;\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\tif( !timeZoneReceiverRegistered ) {\n\t\t\t// \u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u7528\u306e\u30ec\u30b7\u30fc\u30d0\u30fc\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\t\t\tvar intentFilter = new IntentFilter( Intent.ActionTimezoneChanged );\n\t\t\tApplication.Context.RegisterReceiver( timeZoneReceiver, intentFilter );\n\t\t\ttimeZoneReceiverRegistered = true;\n\t\t}\n\n\t\t// \u30a6\u30a9\u30c3\u30c1\u30d5\u30a7\u30a4\u30b9\u304c\u63cf\u753b\u3055\u308c\u3066\u3044\u306a\u3044\u6642\u306b\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u304c\u5909\u5316\u3057\u305f\u5834\u5408\u306e\u5099\u3048\u3001\u73fe\u5728\u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u306e\u6642\u306e\u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\t\tnowTime = Java.Util.Calendar.GetInstance( Java.Util.TimeZone.Default );\n\t}\n\telse {\n\t\tif( timeZoneReceiverRegistered ) {\n\t\t\t// \u30bf\u30a4\u30e0\u30be\u30fc\u30f3\u7528\u306e\u30ec\u30b7\u30fc\u30d0\u30fc\u3092\u767b\u9332\u89e3\u9664\u3057\u307e\u3059\u3002\n\t\t\tApplication.Context.UnregisterReceiver( timeZoneReceiver );\n\t\t\ttimeZoneReceiverRegistered = false;\n\t\t}\n\t\t\n\t}\n\n\t// \u30bf\u30a4\u30de\u30fc\u306e\u52d5\u4f5c\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\tUpdateTimer();\n}\n```\n\n#4. \u5b8c\u6210\u5f8c\u306e\u30b3\u30fc\u30c9\n\n\u5b8c\u6210\u5f8c\u306e\u30b3\u30fc\u30c9\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n>\u203b\u30b3\u30e1\u30f3\u30c8\u4ed8\u304d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f[Gist]()\u306b\u3066\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```csharp:MyWatchFace.cs\uff08\u5b8c\u6210\u5f8c\uff09\nusing System;\n\nusing Android.App;\nusing Android.Content;\nusing Android.Graphics;\nusing Android.Graphics.Drawables;\nusing Android.OS;\nusing Android.Service.Wallpaper;\nusing Android.Support.V4.Content;\nusing Android.Support.Wearable.Watchface;\nusing Android.Text.Format;\nusing Android.Views;\n\nnamespace WatchFaceTest {\n\n\t[Service( Label = \"@string/watch_name\", Permission = \"android.permission.BIND_WALLPAPER\" )]\n\t[MetaData( \"android.service.wallpaper\", Resource = \"@xml/watch_face\" )]\n\t[MetaData( \"com.google.android.wearable.watchface.preview\", Resource = \"@drawable/preview\" )]\n\t[MetaData( \"com.google.android.wearable.watchface.preview_circular\", Resource = \"@drawable/preview_circular\" )]\n\t[IntentFilter( new[] { \"android.service.wallpaper.WallpaperService\" }, Categories = new[] { \"com.google.android.wearable.watchface.category.WATCH_FACE\" } )]\n\tpublic class AnalogWatchFaceService : CanvasWatchFaceService {\n\n\t\tprivate static readonly long InteractiveUpdateRateMilliseconds = Java.Util.Concurrent.TimeUnit.Seconds.ToMillis( 1 );\n\n\t\tprivate const int MessageUpdateTime = 0;\n\n\t\tpublic override WallpaperService.Engine OnCreateEngine() {\n\t\t\treturn new AnalogWatchFaceEngine( this );\n\t\t}\n\n\t\tprivate class AnalogWatchFaceEngine : CanvasWatchFaceService.Engine {\n\n\t\t\tprivate CanvasWatchFaceService owner;\n\n\t\t\tprivate readonly Handler updateTimeHandler;\n\n\t\t\tprivate Java.Util.Calendar nowTime;\n\n\t\t\tprivate Paint backgroundPaint;\n\n\t\t\tprivate Paint hourHandPaint;\n\t\t\tprivate Paint minuteHandPaint;\n\t\t\tprivate Paint secondHandPaint;\n\n\t\t\tprivate bool isAmbient;\n\n\t\t\tprivate bool isRequiredLowBitAmbient;\n\n\t\t\tprivate bool isReqiredBurnInProtection;\n\n\t\t\tprivate bool isMute;\n\n\t\t\tprivate TimeZoneReceiver timeZoneReceiver;\n\n\t\t\tprivate bool timeZoneReceiverRegistered = false;\n\n\t\t\tpublic AnalogWatchFaceEngine( CanvasWatchFaceService owner ) : base( owner ) {\n\t\t\t\tthis.owner = owner;\n\t\t\t\tupdateTimeHandler = new Handler(\n\t\t\t\t\tmessage => {\n\t\t\t\t\t\tswitch( message.What ) {\n\t\t\t\t\t\t\tcase MessageUpdateTime:\n\t\t\t\t\t\t\t\tInvalidate();\n\t\t\t\t\t\t\t\tif( ShouldTimerBeRunning ) {\n\t\t\t\t\t\t\t\t\tlong timeMillseconds = DateTime.UtcNow.Ticks / TimeSpan.TicksPerMillisecond;\n\t\t\t\t\t\t\t\t\tlong delayMilliseconds = InteractiveUpdateRateMilliseconds - ( timeMillseconds % InteractiveUpdateRateMilliseconds );\n\t\t\t\t\t\t\t\t\tupdateTimeHandler.SendEmptyMessageDelayed( MessageUpdateTime, delayMilliseconds );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\ttimeZoneReceiver = new TimeZoneReceiver(\n\t\t\t\t\tintent => {\n\t\t\t\t\t\tnowTime.TimeZone = Java.Util.TimeZone.Default;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tpublic override void OnCreate( ISurfaceHolder holder ) {\n\n\t\t\t\tSetWatchFaceStyle(\n\t\t\t\t\tnew WatchFaceStyle.Builder( owner )\n\t\t\t\t\t\t.SetCardPeekMode( WatchFaceStyle.PeekModeShort )\n\t\t\t\t\t\t.SetBackgroundVisibility( WatchFaceStyle.BackgroundVisibilityInterruptive )\n\t\t\t\t\t\t.SetShowSystemUiTime( false )\n\t\t\t\t\t\t.Build()\n\t\t\t\t);\n\n\t\t\t\tbase.OnCreate( holder );\n\n\t\t\t\tvar resources = owner.Resources;\n\n\t\t\t\tbackgroundPaint = new Paint();\n\t\t\t\tbackgroundPaint.Color = resources.GetColor( Resource.Color.background );\n\n\t\t\t\thourHandPaint = new Paint();\n\t\t\t\thourHandPaint.Color = resources.GetColor( Resource.Color.analog_hands );\n\t\t\t\thourHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.hour_hand_stroke );\n\t\t\t\thourHandPaint.AntiAlias = true;\n\t\t\t\thourHandPaint.StrokeCap = Paint.Cap.Round;\n\n\t\t\t\tminuteHandPaint = new Paint();\n\t\t\t\tminuteHandPaint.Color = hourHandPaint.Color;\n\t\t\t\tminuteHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.minute_hand_stroke );\n\t\t\t\tminuteHandPaint.AntiAlias = true;\n\t\t\t\tminuteHandPaint.StrokeCap = Paint.Cap.Round;\n\n\t\t\t\tsecondHandPaint = new Paint();\n\t\t\t\tsecondHandPaint.Color = resources.GetColor( Resource.Color.analog_second_hand );\n\t\t\t\tsecondHandPaint.StrokeWidth = resources.GetDimension( Resource.Dimension.second_hand_stroke );\n\t\t\t\tsecondHandPaint.AntiAlias = true;\n\t\t\t\tsecondHandPaint.StrokeCap = Paint.Cap.Round;\n\n\t\t\t\tnowTime = Java.Util.Calendar.GetInstance( Java.Util.TimeZone.Default );\n\t\t\t}\n\n\t\t\tpublic override void OnDestroy() {\n\t\t\t\tupdateTimeHandler.RemoveMessages( MessageUpdateTime );\n\n\t\t\t\tbase.OnDestroy();\n\t\t\t}\n\n\t\t\tpublic override void OnApplyWindowInsets( WindowInsets insets ) {\n\t\t\t\tbase.OnApplyWindowInsets( insets );\n\n\t\t\t\t//bool isRound = insets.IsRound;\n\t\t\t}\n\n\t\t\tpublic override void OnPropertiesChanged( Bundle properties ) {\n\t\t\t\tbase.OnPropertiesChanged( properties );\n\n\t\t\t\tisRequiredLowBitAmbient = properties.GetBoolean( PropertyLowBitAmbient, false );\n\t\t\t\tisReqiredBurnInProtection = properties.GetBoolean( PropertyBurnInProtection, false );\n\t\t\t}\n\n\t\t\tpublic override void OnTimeTick() {\n\t\t\t\tbase.OnTimeTick();\n\n\t\t\t\tInvalidate();\n\t\t\t}\n\n\t\t\tpublic override void OnAmbientModeChanged( bool inAmbientMode ) {\n\t\t\t\tbase.OnAmbientModeChanged( inAmbientMode );\n\n\t\t\t\tif( isAmbient != inAmbientMode ) {\n\t\t\t\t\tisAmbient = inAmbientMode;\n\t\t\t\t\tif( isRequiredLowBitAmbient ) {\n\t\t\t\t\t\tbool antiAlias = !inAmbientMode;\n\n\t\t\t\t\t\thourHandPaint.AntiAlias = antiAlias;\n\t\t\t\t\t\tminuteHandPaint.AntiAlias = antiAlias;\n\t\t\t\t\t\tsecondHandPaint.AntiAlias = antiAlias;\n\t\t\t\t\t\tInvalidate();\n\t\t\t\t\t}\n\t\t\t\t\tUpdateTimer();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublic override void OnInterruptionFilterChanged( int interruptionFilter ) {\n\t\t\t\tbase.OnInterruptionFilterChanged( interruptionFilter );\n\n\t\t\t\tbool inMuteMode = ( interruptionFilter == InterruptionFilterNone );\n\n\t\t\t\tif( isMute != inMuteMode ) {\n\t\t\t\t\tisMute = inMuteMode;\n\n\t\t\t\t\tInvalidate();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublic override void OnTapCommand( int tapType, int xValue, int yValue, long eventTime ) {\n\t\t\t\tswitch( tapType ) {\n\t\t\t\t\tcase TapTypeTouch:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TapTypeTouchCancel:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase TapTypeTap:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublic override void OnDraw( Canvas canvas, Rect bounds ) {\n\n\t\t\t\tnowTime = Java.Util.Calendar.GetInstance( nowTime.TimeZone );\n\n\t\t\t\tif( isAmbient ) {\n\t\t\t\t\tcanvas.DrawColor( Color.Black );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcanvas.DrawRect( 0, 0, canvas.Width, canvas.Height, backgroundPaint );\n\t\t\t\t}\n\n\t\t\t\tfloat centerX = bounds.Width() / 2.0f;\n\t\t\t\tfloat centerY = bounds.Height() / 2.0f;\n\n\t\t\t\tfloat hourHandLength = centerX - 80;\n\t\t\t\tfloat minuteHandLength = centerX - 40;\n\t\t\t\tfloat secondHandLength = centerX - 20;\n\n\t\t\t\tfloat hourHandRotation = ( ( nowTime.Get( Java.Util.CalendarField.Hour ) + ( nowTime.Get( Java.Util.CalendarField.Minute ) / 60f ) ) / 6f ) * ( float )Math.PI;\n\t\t\t\tfloat hourHandX = ( float )Math.Sin( hourHandRotation ) * hourHandLength;\n\t\t\t\tfloat hourHandY = ( float )-Math.Cos( hourHandRotation ) * hourHandLength;\n\t\t\t\tcanvas.DrawLine( centerX, centerY, centerX + hourHandX, centerY + hourHandY, hourHandPaint );\n\n\t\t\t\tfloat minuteHandRotation = nowTime.Get( Java.Util.CalendarField.Minute ) / 30f * ( float )Math.PI;\n\t\t\t\tfloat minuteHandX = ( float )Math.Sin( minuteHandRotation ) * minuteHandLength;\n\t\t\t\tfloat minuteHandY = ( float )-Math.Cos( minuteHandRotation ) * minuteHandLength;\n\t\t\t\tcanvas.DrawLine( centerX, centerY, centerX + minuteHandX, centerY + minuteHandY, minuteHandPaint );\n\n\t\t\t\tif( !isAmbient ) {\n\t\t\t\t\tfloat secondHandRotation = nowTime.Get( Java.Util.CalendarField.Second ) / 30f * ( float )Math.PI;\n\t\t\t\t\tfloat secondHandX = ( float )Math.Sin( secondHandRotation ) * secondHandLength;\n\t\t\t\t\tfloat secondHandY = ( float )-Math.Cos( secondHandRotation ) * secondHandLength;\n\t\t\t\t\tcanvas.DrawLine( centerX, centerY, centerX + secondHandX, centerY + secondHandY, secondHandPaint );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublic override void OnVisibilityChanged( bool visible ) {\n\t\t\t\tbase.OnVisibilityChanged( visible );\n\n\t\t\t\tif( visible ) {\n\t\t\t\t\tif( timeZoneReceiver == null ) {\n\t\t\t\t\t\ttimeZoneReceiver = new TimeZoneReceiver(\n\t\t\t\t\t\t\tintent => {\n\t\t\t\t\t\t\t\tnowTime.TimeZone = Java.Util.TimeZone.Default;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t\tif( !timeZoneReceiverRegistered ) {\n\t\t\t\t\t\tvar intentFilter = new IntentFilter( Intent.ActionTimezoneChanged );\n\t\t\t\t\t\tApplication.Context.RegisterReceiver( timeZoneReceiver, intentFilter );\n\t\t\t\t\t\ttimeZoneReceiverRegistered = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tnowTime = Java.Util.Calendar.GetInstance( Java.Util.TimeZone.Default );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif( timeZoneReceiverRegistered ) {\n\t\t\t\t\t\tApplication.Context.UnregisterReceiver( timeZoneReceiver );\n\t\t\t\t\t\ttimeZoneReceiverRegistered = false;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\n\t\t\t\tUpdateTimer();\n\t\t\t}\n\n\t\t\tprivate void UpdateTimer() {\n\t\t\t\tupdateTimeHandler.RemoveMessages( MessageUpdateTime );\n\t\t\t\tif( ShouldTimerBeRunning ) {\n\t\t\t\t\tupdateTimeHandler.SendEmptyMessage( MessageUpdateTime );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate bool ShouldTimerBeRunning =>\n\t\t\t\tIsVisible && !IsInAmbientMode;\n\t\t}\n\t}\n\n\tpublic class TimeZoneReceiver : BroadcastReceiver {\n\n\t\tprivate Action<Intent> receiver;\n\n\t\tpublic TimeZoneReceiver( Action<Intent> _receiver ) {\n\t\t\treceiver = _receiver;\n\t\t}\n\n\t\tpublic override void OnReceive( Context context, Intent intent ) {\n\t\t\treceiver?.Invoke( intent );\n\t\t}\n\t}\n}\n```\n\nWatch Face\u30a2\u30d7\u30ea\u306e\u57fa\u672c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\u3002\n\n\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u3084Android Wear\u30c7\u30d0\u30a4\u30b9\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a2\u30ca\u30ed\u30b0\u6642\u8a08\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n![\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30a2\u30ca\u30ed\u30b0\u6642\u8a08](https://qiita-image-store.s3.amazonaws.com/0/78881/d0a3449f-d304-9cfa-9de6-4d7501ddbe2f.png)\n\n\n#Next\n\n\u6b21\u56de\u306f\u3001\u80cc\u666f\u753b\u50cf\u3084\u30a2\u30ca\u30ed\u30b0\u91dd\u306e\u753b\u50cf\u3092\u63cf\u753b\u3057\u3001\u3088\u308a\u30ea\u30c3\u30c1\u306aWatch Face\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u3001See you next!\n\n\n\n#\u53c2\u8003\u30b5\u30a4\u30c8\n* [Watch Face\u3092\u4f5c\u308b \u30b5\u30f3\u30d7\u30eb\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u89e3\u304f - FireSpeed](https://firespeed.org/diary.php?diary=kenz-1834)\n* [Android Studio\u3092\u4f7f\u7528\u3057\u3066\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u304fWatch face\u3092\u4f5c\u308b - Qiita](http://qiita.com/eoppp/items/e6f2a0783810026e4d56) by @eoppp\n* [Xamarin Android WatchFace Sample - GitHub](https://github.com/googlesamples/android-wear-xamarin-watchface) by peterfriese, Redth\n\n#\u300cXamarin\u3067Android Wear\u306eWatch Face\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\uff01\u300d\u30b7\u30ea\u30fc\u30ba\u4e00\u89a7\n\n* [Vol. 0 : \u6e96\u5099\u7de8](http://qiita.com/nia_tn1012/items/fc5d7b2b263c73d8e0e5)\n* [Vol. 1 : \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u7de8](http://qiita.com/nia_tn1012/items/2f790ca52ee839303952)\n  * \uff08[Vol.1x: Xamarin Studio\u5411\u3051](http://qiita.com/nia_tn1012/items/5f407f0a0b180482bb6c)\uff09\n* **Vol.2 : \u30d7\u30ed\u30b0\u30e9\u30e0\u4f5c\u6210\u7de8\uff08 [Page-1](http://qiita.com/nia_tn1012/items/1a4e712c1c0284fd5f49) / Page-2 \uff09**\n"}