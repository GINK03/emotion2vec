{"context": " More than 1 year has passed since last update.underscore\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\uff08reduceRight\uff09\nunderscore\u306b\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u52c9\u5f37\u534a\u5206\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3002\n\n\u5229\u7528\u3059\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\nunderscore.js(v1.8.3)\n\nreduceRight\u3068\u306f\n\nunderscorejs.org\u306ereduce\n\n\u3053\u3093\u306a\u8aac\u660e\u3002\n\n\n_.reduceRight(list, iteratee, memo, [context]) Alias: foldr\nThe right-associative version of reduce. \nDelegates to the JavaScript 1.8 version of reduceRight, if it exists.\nFoldr is not as useful in JavaScript as it would be in a language with lazy evaluation.\n\nvar list = [[0, 1], [2, 3], [4, 5]];\nvar flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n=> [4, 5, 2, 3, 0, 1]\n\nfoldr\u306b\u30a8\u30a4\u30ea\u30a2\u30b9\u304c\u5f35\u3089\u308c\u3066\u3044\u308b\u3002\nreduce\u306e\u53f3\u304b\u3089\u30d0\u30fc\u30b8\u30e7\u30f3.\nJavaScript\u30d0\u30fc\u30b8\u30e7\u30f31.8\u304b\u3089\u306f[reduceRight\u306f\u5b58\u5728\u3057\u3066\u3044\u308b]\uff08https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\uff09\n\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u305d\u3053\u306b\u59d4\u8b72\u3057\u3066\u3044\u308b\u3002\nFoldr \u306fJavaScript\u3067\u306f\u3042\u307e\u308a\u6709\u7528\u3058\u3083\u306a\u3044\u304b\u3093\u3058\uff08\uff1f\uff09\n\u3064\u307e\u308a\n\u30fbreduce\u306e\u53f3\u304b\u3089\u884c\u3046\u30d1\u30bf\u30fc\u30f3\n\u306a\u306e\u3067\n\u3053\u3046\u3059\u308b\u3068\n'use strict';\nvar _ = require( \"underscore\" );\nvar arr = [ 1, 3, 5 ];\n\nvar memo = 5;\n\nvar result = _.reduce( arr, function( _memo, num ) {\n\n    console.log( num );\n    return _memo;\n}, memo );\n\n//-> 1 3 5\n\n\n\u3068\u306a\u308b\u306e\u306b\u5bfe\u3057\u3066\n'use strict';\nvar _ = require( \"underscore\" );\nvar arr = [ 1, 3, 5 ];\n\nvar memo = 5;\n\nvar result = _.reduceRight( arr, function( _memo, num ) {\n\n    console.log( _ memo );\n    return _memo;\n}, memo );\n\n//-> 5 3 1\n\n\n\u3068\u306a\u308b\n\nunderscore.reduce\n\n\u30b3\u30fc\u30c9\u7684\u306b\u306f\u3053\u306e\u3042\u305f\u308a\u3002\n_.reduceRight = _.foldr = createReduce(-1);\n\nreduce\u3068\u540c\u3058\u95a2\u6570\u3067\u51e6\u7406\u3057\u3066\u3044\u308b\uff08\u3053\u3053\uff09\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n\n1/-1\u3067\u3001reduce/reduceRight\u3067\u51e6\u7406\u3092\u5206\u3051\u3066\u3044\u308b\nvar keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n\n\u306e\u3042\u305f\u308a\u306f\u4ed6\u306ecollection\u7cfb\u306e\u95a2\u6570\u3068\u540c\u69d8\u306b\u3001array\u3060\u3063\u305f\u3089false,object\u3060\u3063\u305f\u3089key\u306e\u914d\u5217\u3092\u8fd4\u3057\u3001\u305d\u306e\u914d\u5217\u306e\u9577\u3055\u3092\u4ee3\u5165\u3001\nindex\u306flength -1  \nif (arguments.length < 3) {\n    memo = obj[keys ? keys[index] : index];\n    index += dir;\n}\n\n\u3053\u306e\u90e8\u5206\u306f\u3001\u914d\u5217\u306e\u5f15\u6570\u304c2\u4ee5\u4e0b\u3060\u3063\u305f\u5834\u5408(\u3064\u307e\u308amemo = undefined\u3060\u3063\u305f\u5834\u5408)\u3001\u521d\u671f\u5024\u306e\u3082\u3068\u3068\u306a\u308bmemo\u304c\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3001\u3053\u308c\u3092\u6c7a\u5b9a\u3059\u308b\u3002\n\u914d\u5217\u3060\u3063\u305f\u5834\u5408\u306findex\u3092\u3001\u914d\u5217\u3058\u3083\u306a\u304b\u3063\u305f\u5834\u5408\u306findex[0]\u3092\u521d\u671f\u5024\u306b\u3059\u308b\n\u521d\u671f\u5024\u6c7a\u5b9a\u5f8c\u306findex += dir\u3059\u308b\uff08reduceRight\u306e\u5834\u5408\u306findex--\uff09\n\u305d\u306e\u5f8c\u3001iterator\u306b\u5f15\u304d\u7d99\u3044\u3067\u56de\u3059\nunderscore\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\uff08reduceRight\uff09\n\nunderscore\u306b\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u52c9\u5f37\u534a\u5206\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u3002\n\n\n\n##\u5229\u7528\u3059\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\n[underscore.js(v1.8.3)](https://github.com/jashkenas/underscore/tree/1.8.3)\n\n\n##reduceRight\u3068\u306f\n\n\n###[underscorejs.org\u306ereduce](http://underscorejs.org/#reduceRight)\n\n\u3053\u3093\u306a\u8aac\u660e\u3002\n>####_.reduceRight(list, iteratee, memo, [context]) Alias: foldr \n>The right-associative version of reduce. \n>Delegates to the JavaScript 1.8 version of reduceRight, if it exists.\n>Foldr is not as useful in JavaScript as it would be in a language with lazy evaluation.\n\n```javascript\nvar list = [[0, 1], [2, 3], [4, 5]];\nvar flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);\n=> [4, 5, 2, 3, 0, 1]\n```\n\nfoldr\u306b\u30a8\u30a4\u30ea\u30a2\u30b9\u304c\u5f35\u3089\u308c\u3066\u3044\u308b\u3002\nreduce\u306e\u53f3\u304b\u3089\u30d0\u30fc\u30b8\u30e7\u30f3.\nJavaScript\u30d0\u30fc\u30b8\u30e7\u30f31.8\u304b\u3089\u306f[reduceRight\u306f\u5b58\u5728\u3057\u3066\u3044\u308b]\uff08https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight\uff09\n\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u305d\u3053\u306b\u59d4\u8b72\u3057\u3066\u3044\u308b\u3002\nFoldr \u306fJavaScript\u3067\u306f\u3042\u307e\u308a\u6709\u7528\u3058\u3083\u306a\u3044\u304b\u3093\u3058\uff08\uff1f\uff09\n\n\u3064\u307e\u308a\n\u30fbreduce\u306e\u53f3\u304b\u3089\u884c\u3046\u30d1\u30bf\u30fc\u30f3\n\n\u306a\u306e\u3067\n\n\u3053\u3046\u3059\u308b\u3068\n\n```javascript\n'use strict';\nvar _ = require( \"underscore\" );\nvar arr = [ 1, 3, 5 ];\n\nvar memo = 5;\n\nvar result = _.reduce( arr, function( _memo, num ) {\n\n    console.log( num );\n    return _memo;\n}, memo );\n\n//-> 1 3 5\n\n```\n\n\u3068\u306a\u308b\u306e\u306b\u5bfe\u3057\u3066\n\n```javascript\n'use strict';\nvar _ = require( \"underscore\" );\nvar arr = [ 1, 3, 5 ];\n\nvar memo = 5;\n\nvar result = _.reduceRight( arr, function( _memo, num ) {\n\n    console.log( _ memo );\n    return _memo;\n}, memo );\n\n//-> 5 3 1\n\n```\n\n\u3068\u306a\u308b\n\n\n###[underscore.reduce](https://github.com/jashkenas/underscore/blob/1.8.3/underscore.js#L208)\n\u30b3\u30fc\u30c9\u7684\u306b\u306f\u3053\u306e\u3042\u305f\u308a\u3002\n\n```javascript\n_.reduceRight = _.foldr = createReduce(-1);\n```\n\nreduce\u3068\u540c\u3058\u95a2\u6570\u3067\u51e6\u7406\u3057\u3066\u3044\u308b\uff08[\u3053\u3053](https://github.com/jashkenas/underscore/blob/1.8.3/underscore.js#L178)\uff09\n\n```javascript\n  // Create a reducing function iterating left or right.\n  function createReduce(dir) {\n    // Optimized iterator function as using arguments.length\n    // in the main function will deoptimize the, see #1991.\n    function iterator(obj, iteratee, memo, keys, index, length) {\n      for (; index >= 0 && index < length; index += dir) {\n        var currentKey = keys ? keys[index] : index;\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\n      }\n      return memo;\n    }\n\n    return function(obj, iteratee, memo, context) {\n      iteratee = optimizeCb(iteratee, context, 4);\n      var keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n      // Determine the initial value if none is provided.\n      if (arguments.length < 3) {\n        memo = obj[keys ? keys[index] : index];\n        index += dir;\n      }\n      return iterator(obj, iteratee, memo, keys, index, length);\n    };\n  }\n```\n\n1/-1\u3067\u3001reduce/reduceRight\u3067\u51e6\u7406\u3092\u5206\u3051\u3066\u3044\u308b\n\n\n```\nvar keys = !isArrayLike(obj) && _.keys(obj),\n          length = (keys || obj).length,\n          index = dir > 0 ? 0 : length - 1;\n```\n\n\n\u306e\u3042\u305f\u308a\u306f\u4ed6\u306ecollection\u7cfb\u306e\u95a2\u6570\u3068\u540c\u69d8\u306b\u3001array\u3060\u3063\u305f\u3089false,object\u3060\u3063\u305f\u3089key\u306e\u914d\u5217\u3092\u8fd4\u3057\u3001\u305d\u306e\u914d\u5217\u306e\u9577\u3055\u3092\u4ee3\u5165\u3001\nindex\u306flength -1  \n\n```\nif (arguments.length < 3) {\n    memo = obj[keys ? keys[index] : index];\n    index += dir;\n}\n```\n\n\u3053\u306e\u90e8\u5206\u306f\u3001\u914d\u5217\u306e\u5f15\u6570\u304c2\u4ee5\u4e0b\u3060\u3063\u305f\u5834\u5408(\u3064\u307e\u308amemo = undefined\u3060\u3063\u305f\u5834\u5408)\u3001\u521d\u671f\u5024\u306e\u3082\u3068\u3068\u306a\u308bmemo\u304c\u5b58\u5728\u3057\u306a\u3044\u305f\u3081\u3001\u3053\u308c\u3092\u6c7a\u5b9a\u3059\u308b\u3002\n\n\u914d\u5217\u3060\u3063\u305f\u5834\u5408\u306findex\u3092\u3001\u914d\u5217\u3058\u3083\u306a\u304b\u3063\u305f\u5834\u5408\u306findex[0]\u3092\u521d\u671f\u5024\u306b\u3059\u308b\n\u521d\u671f\u5024\u6c7a\u5b9a\u5f8c\u306findex += dir\u3059\u308b\uff08reduceRight\u306e\u5834\u5408\u306findex--\uff09\n\n\u305d\u306e\u5f8c\u3001iterator\u306b\u5f15\u304d\u7d99\u3044\u3067\u56de\u3059\n\n", "tags": ["JavaScript", "Underscore.js"]}