{"tags": ["Split", "C++", "STL"], "context": " More than 1 year has passed since last update.c++\u306b\u306fstring\u5185\u306bsplit\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3002\u305d\u306e\u305f\u3081\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n\u5b9f\u88c5\n\nstringstream\u3092\u7528\u3044\u308b\n\nsplit.cpp\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> split(const string &s, char delim) {\n    vector<string> elems;\n    stringstream ss(s);\n    string item;\n    while (getline(ss, item, delim)) {\n    if (!item.empty()) {\n            elems.push_back(item);\n        }\n    }\n    return elems;\n}\n\n\n\n\u611a\u76f4\u306b\u5b9f\u88c5\n\nsplit_naive.cpp\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> split_naive(const string &s, char delim) {\n    vector<string> elems;\n    string item;\n    for (char ch: s) {\n        if (ch == delim) {\n            if (!item.empty())\n                elems.push_back(item);\n            item.clear();\n        }\n        else {\n            item += ch;\n        }\n    }\n    if (!item.empty())\n        elems.push_back(item);\n    return elems;\n}\n\n\n\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\nbench1: \u5165\u529b\u6587\u5b57\u306f\u77ed\u304f\u3001\u95a2\u6570\u306e\u5b9f\u884c\u56de\u6570\u304c\u591a\u3044\n\nbench1.cpp\nvoid bench1() {\n    string input = \"This is  the part when I say I don't want ya\";\n    char delim = ' ';\n\n    cout << \"split: \" << measeure(split, input, delim, 100000) / (CLOCKS_PER_SEC / 1000) << \"ms\" << endl;\n    cout << \"naive: \" << measeure(split_naive, input, delim, 100000) / (CLOCKS_PER_SEC / 1000) << \"ms\" << endl;\n}\n\n\n\nbench2: \u5165\u529b\u6587\u5b57\u306f\u9577\u304f\u3001\u95a2\u6570\u306e\u5b9f\u884c\u56de\u6570\u306f\u5c11\u306a\u3044\u3002\n\nbench2.cpp\nvoid bench2() {\n    string random_input = \"\";\n    int len = 1000000;\n    mt19937 engine;\n    uniform_int_distribution<int> distribution(0, 25);\n    char delim = distribution(engine) + 'a';\n    for (int p=0; p<len; ++p) {\n        int ch = distribution(engine);\n    random_input += ch + 'a';\n    }\n\n    cout << \"split: \" << measeure(split, random_input, delim, 10) / (CLOCKS_PER_SEC / 1000) << \"ms\" << endl;\n    cout << \"naive: \" << measeure(split_naive, random_input, delim, 10) / (CLOCKS_PER_SEC / 1000) << \"ms\" << endl;\n}\n\n\n\u7d50\u679c:\n\n\n\n\nbench1[ms]\nbench2[ms]\n\n\n\n\nsplit\n604\n477\n\n\nnaive\n384\n188\n\n\n\n\nReference\n[1]http://stackoverflow.com/questions/236129/how-to-split-a-string-in-c\nc++\u306b\u306fstring\u5185\u306bsplit\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u3002\u305d\u306e\u305f\u3081\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n##\u5b9f\u88c5\n###stringstream\u3092\u7528\u3044\u308b\n\n```cpp:split.cpp\n#include <vector>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<string> split(const string &s, char delim) {\n\tvector<string> elems;\n\tstringstream ss(s);\n\tstring item;\n\twhile (getline(ss, item, delim)) {\n    if (!item.empty()) {\n\t\t\telems.push_back(item);\n\t\t}\n\t}\n\treturn elems;\n}\n```\n\n###\u611a\u76f4\u306b\u5b9f\u88c5\n\n```cpp:split_naive.cpp\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> split_naive(const string &s, char delim) {\n\tvector<string> elems;\n\tstring item;\n\tfor (char ch: s) {\n\t\tif (ch == delim) {\n\t\t\tif (!item.empty())\n\t\t\t\telems.push_back(item);\n\t\t\titem.clear();\n\t\t}\n\t\telse {\n\t\t\titem += ch;\n\t\t}\n\t}\n\tif (!item.empty())\n\t\telems.push_back(item);\n\treturn elems;\n}\n```\n\n##\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n###bench1: \u5165\u529b\u6587\u5b57\u306f\u77ed\u304f\u3001\u95a2\u6570\u306e\u5b9f\u884c\u56de\u6570\u304c\u591a\u3044\n\n```cpp:bench1.cpp\nvoid bench1() {\n\tstring input = \"This is  the part when I say I don't want ya\";\n\tchar delim = ' ';\n\t\n\tcout << \"split: \" << measeure(split, input, delim, 100000) / (CLOCKS_PER_SEC / 1000) << \"ms\" << endl;\n\tcout << \"naive: \" << measeure(split_naive, input, delim, 100000) / (CLOCKS_PER_SEC / 1000) << \"ms\" << endl;\n}\n```\n\n###bench2: \u5165\u529b\u6587\u5b57\u306f\u9577\u304f\u3001\u95a2\u6570\u306e\u5b9f\u884c\u56de\u6570\u306f\u5c11\u306a\u3044\u3002\n\n```cpp:bench2.cpp\nvoid bench2() {\n\tstring random_input = \"\";\n\tint len = 1000000;\n\tmt19937 engine;\n\tuniform_int_distribution<int> distribution(0, 25);\n\tchar delim = distribution(engine) + 'a';\n\tfor (int p=0; p<len; ++p) {\n\t\tint ch = distribution(engine);\n    random_input += ch + 'a';\n\t}\n\t\n\tcout << \"split: \" << measeure(split, random_input, delim, 10) / (CLOCKS_PER_SEC / 1000) << \"ms\" << endl;\n\tcout << \"naive: \" << measeure(split_naive, random_input, delim, 10) / (CLOCKS_PER_SEC / 1000) << \"ms\" << endl;\n}\n```\n\n\u7d50\u679c:\n\n||bench1[ms]|bench2[ms]|\n|:-----------|------------:|------------:|\n|split|604|477|\n|naive|384|188|\n\n\n##Reference\n[1]http://stackoverflow.com/questions/236129/how-to-split-a-string-in-c\n"}