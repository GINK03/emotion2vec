{"context": "\n\n\u6982\u8981\n\u300cRuby\u306b\u3088\u308b\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u300d\u3092\u8aad\u3093\u3067\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3092\u52c9\u5f37\u4e2d\u3002\nJava\u3092\u3084\u3063\u3066\u3044\u305f\u4eba\u9593\u3068\u3057\u3066\u306e\u76ee\u7dda\u3067\u60c5\u5831\u3092\u6574\u7406\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u4ed6\u306e\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\nTemplate Method Pattern\nStrategy Pattern\nObserver Pattern\n\nComposite Pattern\n\n\u5168\u4f53\u3068\u90e8\u5206\u3092\u540c\u4e00\u8996\u3059\u308b\u3001\u3068\u3044\u3046\u30d1\u30bf\u30fc\u30f3\n\u5165\u308c\u7269\uff08Composite\uff09\u3068\u4e2d\u8eab\uff08Leaf \u307e\u305f\u306f Composite\uff09\u304c\u540c\u3058\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u6301\u3064\u3053\u3068\u3067\u30c4\u30ea\u30fc\u306e\u3088\u3046\u306a\u518d\u5e30\u7684\u306a\u69cb\u9020\u3092\u7c21\u6f54\u306b\u8868\u73fe\u3067\u304d\u308b\n\n\n\n\u5b9f\u88c5\u4f8b\nHTML\u6587\u66f8\u3092\u8868\u3059\u30af\u30e9\u30b9\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n<html>\n  <head>\n    <title>hoge</title>\n  </head>\n</html>\n\nHTML\u306f <html>\u3001<head> \u306a\u3069\u306e\u30bf\u30b0\u306e\u4e2d\u306b\u3055\u3089\u306b\u5225\u306e\u30bf\u30b0\u3001\u3082\u3057\u304f\u306f\u30c6\u30ad\u30b9\u30c8\uff08\u3053\u306e\u5834\u5408 <title> \u30bf\u30b0\u306e\u4e2d\u306e \"hoge\"\uff09\u304c\u542b\u307e\u308c\u308b\u3001\u3068\u3044\u3046\u3088\u3046\u306a\u518d\u5e30\u7684\u306a\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30bf\u30b0\u3092 Composite \u3001\u30c6\u30ad\u30b9\u30c8\u3092 Leaf \u30af\u30e9\u30b9\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\nJava \u3067\u306e\u5b9f\u88c5\n\nComponent\n\nHtmlElement.java\npublic abstract class HtmlElement {\n  final String INDENT = \"  \";\n\n  // depth \u5206\u306e\u7a7a\u767d\u6587\u5b57\u3092\u751f\u6210\u3057\u307e\u3059\n  protected String indent(int depth) {\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<depth; i++) {\n      sb.append(INDENT);\n    }\n    return sb.toString();\n  }\n\n  public abstract void print(int depth);\n}\n\n\nprint \u3092\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3001\u5171\u901a\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\nComposite\n\nTag.java\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.io.PrintStream;\n\npublic class Tag extends HtmlElement {\n  private String name;\n  private List<HtmlElement> children; // \u5b50\u8981\u7d20\u306f HtmlElement \u578b\n\n  public Tag(String name) {\n    this.name = name;\n    this.children = new ArrayList<HtmlElement>();\n  }\n\n  public Tag addChild(HtmlElement child) {\n    children.add(child);\n    return this;\n  }\n\n  // \u958b\u59cb\u30bf\u30b0\u3001\u7d42\u4e86\u30bf\u30b0\u3067\u56f2\u3093\u3067\u305d\u306e\u9593\u306b\u5b50\u8981\u7d20\u3092\u51fa\u529b\u3057\u307e\u3059\n  // \u3053\u306e\u3068\u304d\u5b50\u8981\u7d20\u304c Tag \u306a\u306e\u304b Text \u306a\u306e\u304b \u3092\u610f\u8b58\u3057\u306a\u304f\u3066\u6e08\u3080\u3001\u3068\u3044\u3046\u3068\u3053\u308d\u304c\u30dd\u30a4\u30f3\u30c8\n  @Override\n  public void print(int depth) {\n    System.out.printf(\"%s<%s>%n\", indent(depth), name);\n    for (HtmlElement child : children) {\n      child.print(depth + 1);\n    }\n    System.out.printf(\"%s</%s>%n\", indent(depth), name);\n  }\n}\n\n\n\nLeaf\n\nText.java\nimport java.io.PrintStream;\n\npublic class Text extends HtmlElement {\n  private String text;\n  public Text(String text) {\n    this.text = text;\n  }\n\n  @Override\n  public void print(int depth) {\n    System.out.println(indent(depth) + text);\n  }\n}\n\n\n\n\u547c\u3073\u51fa\u3057\n\nMain.java\npublic class Main {\n  public static void main(String[] args) {\n    Tag root = new Tag(\"html\");\n\n    Tag head = new Tag(\"head\");\n    Tag title = new Tag(\"title\").addChild(new Text(\"Sample code for Composite Pattern\"));\n    head.addChild(title);\n    root.addChild(head);\n\n    Tag body = new Tag(\"body\");\n    Tag h1 = new Tag(\"h1\").addChild(new Text(\"What is Composite Pattern?\"));\n    Tag p = new Tag(\"p\")\n    .addChild(new Text(\"In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. \"));\n\n    body.addChild(h1);\n    body.addChild(p);\n    root.addChild(body);\n\n    root.print(0);\n  }\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\n<html>\n  <head>\n    <title>\n      Sample code for Composite Pattern\n    </title>\n  </head>\n  <body>\n    <h1>\n      What is Composite Pattern?\n    </h1>\n    <p>\n      In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object.\n    </p>\n  </body>\n</html>\n\n\nRuby \u3067\u306e\u5b9f\u88c5\n\nComponent\nclass HtmlElement\n  INDENT = \"  \";\n\n  def indent(depth)\n    INDENT * depth\n  end\nend\n\nJava \u3067\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u3044\u305f\u30e1\u30bd\u30c3\u30c9\u3092 Component \u306b\u7f6e\u304f\u3079\u304d\u304b\uff1f\u306f\u60a9\u307f\u3069\u3053\u308d\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6319\u52d5\u304c\u7121\u3051\u308c\u3070\u4e0d\u8981\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nComposite\nclass Tag < HtmlElement\n  def initialize(name)\n    @name = name\n    @children = []\n  end\n\n  def add_child(child)\n    @children << child\n    self\n  end\n\n  def print(depth=0)\n    puts indent(depth) + \"<#{@name}>\"\n    @children.each do |child|\n      child.print(depth + 1)\n    end\n    puts indent(depth) + \"</#{@name}>\"\n  end\nend\n\n\nLeaf\nclass Text < HtmlElement\n  def initialize(text)\n    @text = text\n  end\n\n  def print(depth=0)\n    puts indent(depth) + @text\n  end\nend\n\n\n\u547c\u3073\u51fa\u3057\nroot = Tag.new(\"html\")\n\nhead = Tag.new(\"head\")\ntitle = Tag.new(\"title\").add_child(Text.new(\"Sample code for Composite Pattern\"))\nhead.add_child(title)\nroot.add_child(head)\n\nbody = Tag.new(\"body\")\nh1 = Tag.new(\"h1\").add_child(Text.new(\"What is Composite Pattern?\"))\np = Tag.new(\"p\").add_child(Text.new(\"In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. \"))\n\nbody.add_child(h1)\nbody.add_child(p)\nroot.add_child(body)\n\nroot.print\n\n\n\u5b9f\u884c\u7d50\u679c\n<html>\n  <head>\n    <title>\n      Sample code for Composite Pattern\n    </title>\n  </head>\n  <body>\n    <h1>\n      What is Composite Pattern?\n    </h1>\n    <p>\n      In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object.\n    </p>\n  </body>\n</html>\n\n\n\u53c2\u8003\nOlsen, R. 2007. Design Patterns in Ruby\n# \u6982\u8981\n\u300cRuby\u306b\u3088\u308b\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u300d\u3092\u8aad\u3093\u3067\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3092\u52c9\u5f37\u4e2d\u3002\nJava\u3092\u3084\u3063\u3066\u3044\u305f\u4eba\u9593\u3068\u3057\u3066\u306e\u76ee\u7dda\u3067\u60c5\u5831\u3092\u6574\u7406\u3057\u3066\u307f\u307e\u3059\u3002\n\n####\u4ed6\u306e\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\n[Template Method Pattern](http://qiita.com/ksugimori/items/34e766e9bff4cfa62591)\n[Strategy Pattern](http://qiita.com/ksugimori/items/f8773909ded7585c5d61)\n[Observer Pattern](http://qiita.com/ksugimori/items/cff3501f6ac50120b4db)\n\n# Composite Pattern\n\n- \u5168\u4f53\u3068\u90e8\u5206\u3092\u540c\u4e00\u8996\u3059\u308b\u3001\u3068\u3044\u3046\u30d1\u30bf\u30fc\u30f3\n- \u5165\u308c\u7269\uff08Composite\uff09\u3068\u4e2d\u8eab\uff08Leaf \u307e\u305f\u306f Composite\uff09\u304c\u540c\u3058\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u6301\u3064\u3053\u3068\u3067\u30c4\u30ea\u30fc\u306e\u3088\u3046\u306a\u518d\u5e30\u7684\u306a\u69cb\u9020\u3092\u7c21\u6f54\u306b\u8868\u73fe\u3067\u304d\u308b\n\n![png-2.png](https://qiita-image-store.s3.amazonaws.com/0/86330/1170ba25-2e1e-aa41-ff10-7614c7fc9d51.png)\n\n\n# \u5b9f\u88c5\u4f8b\nHTML\u6587\u66f8\u3092\u8868\u3059\u30af\u30e9\u30b9\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n```html\n<html>\n  <head>\n    <title>hoge</title>\n  </head>\n</html>\n```\n\nHTML\u306f `<html>`\u3001`<head>` \u306a\u3069\u306e\u30bf\u30b0\u306e\u4e2d\u306b\u3055\u3089\u306b\u5225\u306e\u30bf\u30b0\u3001\u3082\u3057\u304f\u306f\u30c6\u30ad\u30b9\u30c8\uff08\u3053\u306e\u5834\u5408 `<title>` \u30bf\u30b0\u306e\u4e2d\u306e \"hoge\"\uff09\u304c\u542b\u307e\u308c\u308b\u3001\u3068\u3044\u3046\u3088\u3046\u306a\u518d\u5e30\u7684\u306a\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30bf\u30b0\u3092 Composite \u3001\u30c6\u30ad\u30b9\u30c8\u3092 Leaf \u30af\u30e9\u30b9\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n## Java \u3067\u306e\u5b9f\u88c5\n\n### Component\n```java:HtmlElement.java\npublic abstract class HtmlElement {\n  final String INDENT = \"  \";\n\n  // depth \u5206\u306e\u7a7a\u767d\u6587\u5b57\u3092\u751f\u6210\u3057\u307e\u3059\n  protected String indent(int depth) {\n    StringBuilder sb = new StringBuilder();\n    for (int i=0; i<depth; i++) {\n      sb.append(INDENT);\n    }\n    return sb.toString();\n  }\n\n  public abstract void print(int depth);\n}\n```\n\n`print` \u3092\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3001\u5171\u901a\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n### Composite\n```java:Tag.java\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.io.PrintStream;\n\npublic class Tag extends HtmlElement {\n  private String name;\n  private List<HtmlElement> children; // \u5b50\u8981\u7d20\u306f HtmlElement \u578b\n\n  public Tag(String name) {\n    this.name = name;\n    this.children = new ArrayList<HtmlElement>();\n  }\n\n  public Tag addChild(HtmlElement child) {\n    children.add(child);\n    return this;\n  }\n\n  // \u958b\u59cb\u30bf\u30b0\u3001\u7d42\u4e86\u30bf\u30b0\u3067\u56f2\u3093\u3067\u305d\u306e\u9593\u306b\u5b50\u8981\u7d20\u3092\u51fa\u529b\u3057\u307e\u3059\n  // \u3053\u306e\u3068\u304d\u5b50\u8981\u7d20\u304c Tag \u306a\u306e\u304b Text \u306a\u306e\u304b \u3092\u610f\u8b58\u3057\u306a\u304f\u3066\u6e08\u3080\u3001\u3068\u3044\u3046\u3068\u3053\u308d\u304c\u30dd\u30a4\u30f3\u30c8\n  @Override\n  public void print(int depth) {\n    System.out.printf(\"%s<%s>%n\", indent(depth), name);\n    for (HtmlElement child : children) {\n      child.print(depth + 1);\n    }\n    System.out.printf(\"%s</%s>%n\", indent(depth), name);\n  }\n}\n```\n\n### Leaf\n```java:Text.java\nimport java.io.PrintStream;\n\npublic class Text extends HtmlElement {\n  private String text;\n  public Text(String text) {\n    this.text = text;\n  }\n\n  @Override\n  public void print(int depth) {\n    System.out.println(indent(depth) + text);\n  }\n}\n```\n\n### \u547c\u3073\u51fa\u3057\n```java:Main.java\npublic class Main {\n  public static void main(String[] args) {\n    Tag root = new Tag(\"html\");\n\n    Tag head = new Tag(\"head\");\n    Tag title = new Tag(\"title\").addChild(new Text(\"Sample code for Composite Pattern\"));\n    head.addChild(title);\n    root.addChild(head);\n\n    Tag body = new Tag(\"body\");\n    Tag h1 = new Tag(\"h1\").addChild(new Text(\"What is Composite Pattern?\"));\n    Tag p = new Tag(\"p\")\n    .addChild(new Text(\"In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. \"));\n\n    body.addChild(h1);\n    body.addChild(p);\n    root.addChild(body);\n\n    root.print(0);\n  }\n}\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```\n<html>\n  <head>\n    <title>\n      Sample code for Composite Pattern\n    </title>\n  </head>\n  <body>\n    <h1>\n      What is Composite Pattern?\n    </h1>\n    <p>\n      In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object.\n    </p>\n  </body>\n</html>\n```\n\n\n## Ruby \u3067\u306e\u5b9f\u88c5\n\n### Component\n```rb\nclass HtmlElement\n  INDENT = \"  \";\n\n  def indent(depth)\n    INDENT * depth\n  end\nend\n```\nJava \u3067\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u3044\u305f\u30e1\u30bd\u30c3\u30c9\u3092 Component \u306b\u7f6e\u304f\u3079\u304d\u304b\uff1f\u306f\u60a9\u307f\u3069\u3053\u308d\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6319\u52d5\u304c\u7121\u3051\u308c\u3070\u4e0d\u8981\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\n### Composite\n```rb\nclass Tag < HtmlElement\n  def initialize(name)\n    @name = name\n    @children = []\n  end\n\n  def add_child(child)\n    @children << child\n    self\n  end\n\n  def print(depth=0)\n    puts indent(depth) + \"<#{@name}>\"\n    @children.each do |child|\n      child.print(depth + 1)\n    end\n    puts indent(depth) + \"</#{@name}>\"\n  end\nend\n```\n\n\n### Leaf\n```rb\nclass Text < HtmlElement\n  def initialize(text)\n    @text = text\n  end\n\n  def print(depth=0)\n    puts indent(depth) + @text\n  end\nend\n```\n\n### \u547c\u3073\u51fa\u3057\n```rb\nroot = Tag.new(\"html\")\n\nhead = Tag.new(\"head\")\ntitle = Tag.new(\"title\").add_child(Text.new(\"Sample code for Composite Pattern\"))\nhead.add_child(title)\nroot.add_child(head)\n\nbody = Tag.new(\"body\")\nh1 = Tag.new(\"h1\").add_child(Text.new(\"What is Composite Pattern?\"))\np = Tag.new(\"p\").add_child(Text.new(\"In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. \"))\n\nbody.add_child(h1)\nbody.add_child(p)\nroot.add_child(body)\n\nroot.print\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```\n<html>\n  <head>\n    <title>\n      Sample code for Composite Pattern\n    </title>\n  </head>\n  <body>\n    <h1>\n      What is Composite Pattern?\n    </h1>\n    <p>\n      In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object.\n    </p>\n  </body>\n</html>\n```\n\n\n# \u53c2\u8003\nOlsen, R. 2007. [*Design Patterns in Ruby*](https://www.amazon.co.jp/dp/B004YW6M6G/ref=cm_sw_r_tw_dp_JODHxb1S34F51)\n", "tags": ["Java", "Ruby", "DesignPatterns", "\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3"]}