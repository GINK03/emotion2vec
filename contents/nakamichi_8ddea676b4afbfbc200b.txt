{"context": "\u3053\u306e\u6587\u66f8\u306f\uff0cJeroen Ooms \u4ed6\u306b\u3088\u308bR\u30d1\u30c3\u30b1\u30fc\u30b8 curl (version 2.1) \u306e\u30d3\u30cd\u30c3\u30c8 \"The curl package: a modern R interface to libcurl\" \u306e\u65e5\u672c\u8a9e\u8a33\u3067\u3059\uff0e\nLicense: MIT\n\ncurl \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\uff0cC\u30e9\u30a4\u30d6\u30e9\u30ea libcurl \u3078\u306eR\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff0e\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\uff0c\u30e1\u30e2\u30ea\u3078\u306e\u30c7\u30fc\u30bf\u8aad\u8fbc\u3084\u30c7\u30a3\u30b9\u30af\u3078\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\uff0cR\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u7528\u3044\u305f\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\uff0e\u3088\u308a\u30e6\u30fc\u30b6\u306b\u3084\u3055\u3057\u3044HTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5fc5\u8981\u3067\u3042\u308c\u3070\uff0ccurl\u3092\u3082\u3068\u306b\u3057\u3066HTTP\u7528\u306e\u30c4\u30fc\u30eb\u3084\u51e6\u7406\u304c\u8ffd\u52a0\u3055\u308c\u305f httr \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u898b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\ncurl \u30d1\u30c3\u30b1\u30fc\u30b8\u306fURL\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u3044\u304f\u3064\u304b\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\ncurl_fetch_memory() \u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30e1\u30e2\u30ea\u306b\u4fdd\u5b58\u3057\u307e\u3059\n\ncurl_download() \u3084 curl_fetch_disk() \u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30c7\u30a3\u30b9\u30af\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\n\ncurl() \u3084 curl_fetch_stream() \u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\u3057\u307e\u3059\n\ncurl_fetch_multi() \u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306b\u3088\u3063\u3066\u51e6\u7406\u3057\u307e\u3059\uff08\u9ad8\u5ea6\u306a\u6a5f\u80fd\uff09\n\n\u3069\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3082\u540c\u3058HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3044\u307e\u3059\u304c\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u3069\u3046\u51e6\u7406\u3059\u308b\u304b\u3060\u3051\u304c\u7570\u306a\u308a\u307e\u3059\uff0e\n\n\u30e1\u30e2\u30ea\u306b\u8aad\u307f\u8fbc\u3080\u5834\u5408\ncurl_fetch_memory() \u95a2\u6570\u306f\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3042\u308a\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u5b8c\u4e86\u3057\u3066\u30b5\u30fc\u30d0\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u5185\u5bb9\u3059\u3079\u3066\uff08\u30c7\u30fc\u30bf\uff0c\u30d8\u30c3\u30c0\uff0c\u30b9\u30c6\u30fc\u30bf\u30b9\uff0c\u30bf\u30a4\u30df\u30f3\u30b0\uff09\u3092\u542b\u3080\u30ea\u30b9\u30c8\u304c\u8fd4\u3063\u3066\u304f\u308b\u307e\u3067\u5f85\u6a5f\u3057\u307e\u3059\uff0e\nreq <- curl_fetch_memory(\"https://httpbin.org/get\")\nstr(req)\n\nList of 6\n $ url        : chr \"https://httpbin.org/get\"\n $ status_code: int 200\n $ headers    : raw [1:220] 48 54 54 50 ...\n $ modified   : POSIXct[1:1], format: NA\n $ times      : Named num [1:6] 0 0 0.265 1.513 1.778 ...\n  ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ...\n $ content    : raw [1:232] 7b 0a 20 20 ...\n\nparse_headers(req$headers)\n\n[1] \"HTTP/1.1 200 OK\"                       \n[2] \"Server: nginx\"                         \n[3] \"Date: Sat, 15 Oct 2016 13:21:29 GMT\"   \n[4] \"Content-Type: application/json\"        \n[5] \"Content-Length: 232\"                   \n[6] \"Connection: keep-alive\"                \n[7] \"Access-Control-Allow-Origin: *\"        \n[8] \"Access-Control-Allow-Credentials: true\"\n\ncat(rawToChar(req$content))\n\n{\n  \"args\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"r/curl/jeroen\"\n  }, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"https://httpbin.org/get\"\n}\n\ncurl_fetch_memory() \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306f\uff0cAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u6700\u3082\u7c21\u5358\u3067\u5f37\u529b\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3059\uff0e\u3067\u3059\u304c\u30e1\u30e2\u30ea\u5185\u3067\u3059\u3079\u3066\u306e\u51e6\u7406\u3092\u884c\u3046\u306e\u3067\uff0c\u975e\u5e38\u306b\u5927\u304d\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u306b\u306f\u5411\u3044\u3066\u3044\u307e\u305b\u3093\uff0e\u3082\u3057\u30c7\u30fc\u30bf\u304c100GB\u3042\u308b\u3068\u4e88\u60f3\u3057\u3066\u3044\u308b\u306e\u3067\u3042\u308c\u3070\uff0c\u304d\u3063\u3068\u3069\u308c\u304b\u4ed6\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u5fc5\u8981\u306b\u306a\u308b\u3067\u3057\u3087\u3046\uff0e\n\n\u30c7\u30a3\u30b9\u30af\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5834\u5408\n\u3075\u305f\u3064\u3081\u306e\u65b9\u6cd5\u306f curl_download() \u3067\u3059\uff0e\u3053\u308c\u306f base R \u306e download.file() \u95a2\u6570\u3092\u7c21\u5358\u306b\u4ee3\u66ff\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u95a2\u6570\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u76f4\u63a5\u30c7\u30a3\u30b9\u30af\u306b\u66f8\u304d\u8fbc\u3080\u306e\u3067\uff0c\uff08\u5927\u304d\u306a\uff09\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u306b\u4fbf\u5229\u3067\u3059\uff0e\ntmp <- tempfile()\ncurl_download(\"https://httpbin.org/get\", tmp)\ncat(readLines(tmp), sep = \"\\n\")\n\n{\n  \"args\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"r/curl/jeroen\"\n  }, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"https://httpbin.org/get\"\n}\n\n\n\u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u3059\u308b\u5834\u5408\n\u6700\u3082\u67d4\u8edf\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306f curl() \u95a2\u6570\u3067\u3059\uff0e\u3053\u308c\u306f base R \u306eurl() \u3092\u7c21\u5358\u306b\u4ee3\u66ff\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u95a2\u6570\u306f\u3044\u308f\u3086\u308b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u6f38\u9032\u7684\u306b\uff08\u975e\u540c\u671f\u306b\uff09\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\uff0e\ncon <- curl(\"https://httpbin.org/get\")\nopen(con)\n\n# 3\u884c\u53d6\u5f97\nout <- readLines(con, n = 3)\ncat(out, sep = \"\\n\")\n\n{\n  \"args\": {}, \n  \"headers\": {\n\n# \u3055\u3089\u306b3\u884c\u53d6\u5f97\nout <- readLines(con, n = 3)\ncat(out, sep = \"\\n\")\n\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Host\": \"httpbin.org\", \n\n# \u6b8b\u308a\u306e\u884c\u3092\u53d6\u5f97\nout <- readLines(con)\nclose(con)\ncat(out, sep = \"\\n\")\n\n    \"User-Agent\": \"r/curl/jeroen\"\n  }, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"https://httpbin.org/get\"\n}\n\n\u3053\u306e\u4f8b\u3067\u306f\u958b\u3044\u305f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066 readLines() \u3092\u4f7f\u3044\uff0c\u4e00\u5ea6\u306b n \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u793a\u3057\u3066\u3044\u307e\u3059\uff0e\u540c\u69d8\u306b\uff0c\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u4e00\u5ea6\u306b\u30c7\u30fc\u30bf\u3092 n \u30d0\u30a4\u30c8\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u30d1\u30fc\u30b9\u3059\u308b\u306b\u306f readBin() \u3092\u4f7f\u3044\u307e\u3059\uff0e\n\n\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u30ea\u30af\u30a8\u30b9\u30c8\ncurl 2.0 \u304b\u3089\uff0ccurl \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u540c\u6642\u306b\u591a\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff0ecurl_fetch_multi()\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30d7\u30fc\u30eb\u306b\u8ffd\u52a0\u3057\u305f\u3089\u3059\u3050\u306b\u8fd4\u3063\u3066\u304d\u3066\uff0c\u5b9f\u969b\u306b\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u305b\u3093\uff0e\npool <- new_pool()\ncb <- function(req){cat(\"done:\", req$url, \": HTTP:\", req$status, \"\\n\")}\ncurl_fetch_multi('https://www.google.com', done = cb, pool = pool)\ncurl_fetch_multi('https://cloud.r-project.org', done = cb, pool = pool)\ncurl_fetch_multi('https://httpbin.org/blabla', done = cb, pool = pool)\n\nmulti_run() \u3092\u547c\u3076\u3068\uff0c\u767b\u9332\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u4e26\u884c\u7684\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\uff0e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u5b8c\u4e86\u3059\u308b\u3068\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\uff0e\n# \u3053\u308c\u3067\u5b9f\u969b\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u308b\nout <- multi_run(pool = pool)\n\ndone: https://cloud.r-project.org/ : HTTP: 200 \ndone: https://www.google.co.jp/?gfe_rd=cr&ei=XC0CWKXAL4SL8QfUgJ6ICA : HTTP: 200 \ndone: https://httpbin.org/blabla : HTTP: 404 \n\nprint(out)\n\n$success\n[1] 3\n\n$error\n[1] 0\n\n$pending\n[1] 0\n\n\u3053\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u3088\u3063\u3066\u591a\u6570\u306e\u4e26\u884c\u7684\u306a\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\uff0c\u304b\u306a\u308a\u8907\u96d1\u3067\u3059\u3057\uff0c\u30cf\u30f3\u30c9\u30e9\u95a2\u6570\u3092\u6ce8\u610f\u6df1\u304f\u8a2d\u8a08\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u4f8b\u5916\u51e6\u7406\nHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u306f2\u7a2e\u985e\u306e\u30a8\u30e9\u30fc\u304c\u3042\u308a\u5f97\u307e\u3059\uff0e\n\n\u63a5\u7d9a\u5931\u6557\uff1a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u30c0\u30a6\u30f3\u3057\u3066\u3044\u308b\uff0c\u30db\u30b9\u30c8\u304c\u898b\u3064\u304b\u3089\u306a\u3044\uff0cSSL\u8a3c\u660e\u66f8\u304c\u4e0d\u6b63\uff0c\u7b49\nHTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u304c\u975e\u6210\u529f\uff1a401\uff08\u30a2\u30af\u30bb\u30b9\u62d2\u5426\uff09\uff0c404\uff08\u30ea\u30bd\u30fc\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\uff09\uff0c503\uff08\u30b5\u30fc\u30d0\u306e\u554f\u984c\uff09\uff0c\u7b49\n\n\u3072\u3068\u3064\u3081\u306e\u7a2e\u985e\u306e\u30a8\u30e9\u30fc\uff08\u63a5\u7d9a\u5931\u6557\uff09\u306f\uff0c\u5404\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u304a\u3044\u3066\u5fc5\u305aR\u306e\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u6210\u529f\u3057\u305f\u3082\u306e\u306e\u30b5\u30fc\u30d0\u304c\u975e\u6210\u529f\u306eHTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u8fd4\u3057\u305f\u3068\u3044\u3046\u5834\u5408\u306b\u306f\uff0c curl() \u3068 curl_download() \u3060\u3051\u304c\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u307e\u3059\uff0e\u3053\u308c\u306b\u3064\u3044\u3066\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n\u81ea\u52d5\u7684\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u5834\u5408\ncurl() \u95a2\u6570\u3068 curl_download() \u95a2\u6570\u304c\u6700\u3082\u5b89\u5168\u306b\u4f7f\u3048\u308b\u3082\u306e\u3067\u3059\uff0e\u3068\u3044\u3046\u306e\u3082\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u5b8c\u4e86\u3057\u305f\u304c\u30b5\u30fc\u30d0\u304c\u975e\u6210\u529f\u306e\uff08400\u3084\u305d\u308c\u3088\u308a\u5927\u304d\u3044\uff09HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u8fd4\u3057\u305f\u5834\u5408\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u304b\u3089\u3067\u3059\uff0e\u3053\u308c\u306f base R \u306e url() \u95a2\u6570\u3068 download.file() \u95a2\u6570\u306e\u3075\u308b\u307e\u3044\u3092\u771f\u4f3c\u305f\u3082\u306e\u3067\u3059\uff0e\u3053\u308c\u306b\u3088\u3063\u3066\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u5b89\u5168\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n# \u3053\u308c\u3067OK\ncurl_download('https://cran.r-project.org/CRAN_mirrors.csv', 'mirrors.csv')\nmirros <- read.csv('mirrors.csv')\nunlink('mirrors.csv')\n\n\u3082\u3057HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u5931\u6557\u3057\u305f\u5834\u5408\uff0cR\u306f\u5b9f\u884c\u3092\u505c\u6b62\u3057\u307e\u3059\uff0e\n# \u304a\u3063\u3068\uff01URL\u3092\u66f8\u304d\u9593\u9055\u3048\u305f\uff01\ncurl_download('https://cran.r-project.org/CRAN_mirrorZ.csv', 'mirrors.csv')\n\nError in curl_download(\"https://cran.r-project.org/CRAN_mirrorZ.csv\", : HTTP error 404.\n\ncon <- curl('https://cran.r-project.org/CRAN_mirrorZ.csv')\nopen(con)\n\nError in open.connection(con): HTTP error 404.\n\n\n\u624b\u52d5\u3067\u78ba\u8a8d\u3059\u308b\u5834\u5408\ncurl_fetch_*() \u7cfb\u95a2\u6570\u306e\u3044\u305a\u308c\u304b\u3092\u4f7f\u3046\u5834\u5408\uff0c\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u5b8c\u4e86\u3057\u305f\u304c200\u4ee5\u5916\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u304c\u8fd4\u3063\u3066\u304d\u305f\u5834\u5408\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u306a\u3044\uff0c\u3068\u3044\u3046\u3053\u3068\u3092\u7406\u89e3\u3057\u3066\u304a\u304f\u306e\u304c\u91cd\u8981\u3067\u3059\uff0ecurl_fetch_memory() \u3084 curl_fetch_disk() \u3092\u4f7f\u3046\u3068\u304d\u306b\u306f\uff0c\u81ea\u5206\u3067\u305d\u306e\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3057\u3066\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u6210\u529f\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\nreq <- curl_fetch_memory('https://cran.r-project.org/CRAN_mirrors.csv')\nprint(req$status_code)\n\n[1] 200\n\n\u30c7\u30a3\u30b9\u30af\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\uff0e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\u3068\uff0c\u30a8\u30e9\u30fc\u30da\u30fc\u30b8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff01\n# \u304a\u3063\u3068\u66f8\u304d\u9593\u9055\u3048\u305f\uff01\nreq <- curl_fetch_disk('https://cran.r-project.org/CRAN_mirrorZ.csv', 'mirrors.csv')\nprint(req$status_code)\n\n[1] 404\n\n# \u601d\u3063\u3066\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3068\u9055\u3046\u305e\uff01\nhead(readLines('mirrors.csv'))\n\n[1] \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"                               \n[2] \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\"\"               \n[3] \"  \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"                 \n[4] \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\">\"\n[5] \"<head>\"                                                                   \n[6] \"<title>Object not found!</title>\"                                         \n\nunlink('mirrors.csv')\n\n\u3082\u3057\u672c\u5f53\u306b curl_fetch_*() \u7cfb\u95a2\u6570\u304c\u81ea\u52d5\u7684\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30eb\u306e FAILONERROR \u30aa\u30d7\u30b7\u30e7\u30f3\u3092 TRUE \u306b\u8a2d\u5b9a\u3059\u308b\u3079\u304d\u3067\u3059\uff0e\nh <- new_handle(failonerror = TRUE)\ncurl_fetch_memory('https://cran.r-project.org/CRAN_mirrorZ.csv', handle = h)\n\nError in curl_fetch_memory(\"https://cran.r-project.org/CRAN_mirrorZ.csv\", : HTTP response code said error\n\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u3067\u306f\uff0c libcurl \u306f HTTP URL \u3078\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b\u306e\u306b HTTP GET \u3092\u4f7f\u3044\u307e\u3059\uff0e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u306b\u306f\uff0c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u6e21\u3059\u305f\u3081\u306e curl \u30cf\u30f3\u30c9\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\u3092\u306f\u3058\u3081\u306b\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u30cf\u30f3\u30c9\u30eb\u306e\u8a2d\u5b9a\nnew_handle()\u3092\u4f7f\u3046\u3068\u65b0\u3057\u3044\u30cf\u30f3\u30c9\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\uff0e\u30cf\u30f3\u30c9\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3089\uff0c libcurl \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3068 HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30d8\u30c3\u30c0\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\nh <- new_handle()\nhandle_setopt(h, copypostfields = \"moo=moomooo\");\nhandle_setheaders(h,\n  \"Content-Type\" = \"text/moo\",\n  \"Cache-Control\" = \"no-cache\",\n  \"User-Agent\" = \"A cow\"\n)\n\n\u81ea\u5206\u304c\u4f7f\u3063\u3066\u3044\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u306e libcurl \u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30ea\u30b9\u30c8\u3092\u898b\u308b\u306b\u306f\uff0ccurl_options() \u95a2\u6570\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\uff0e\u5404\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4f55\u3092\u3059\u308b\u3082\u306e\u306a\u306e\u304b\u306f libcurl \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u30aa\u30d7\u30b7\u30e7\u30f3\u540d\u306e\u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u306f\u533a\u5225\u3055\u308c\u307e\u305b\u3093\uff0e\n\u8a2d\u5b9a\u304c\u7d42\u308f\u3063\u305f\u3089\uff0c\u30cf\u30f3\u30c9\u30eb\u306f\u3069\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u306e\u306b\u3082\u4f7f\u3048\u307e\u3059\uff0e\nreq <- curl_fetch_memory(\"http://httpbin.org/post\", handle = h)\ncat(rawToChar(req$content))\n\n{\n  \"args\": {}, \n  \"data\": \"moo=moomooo\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Cache-Control\": \"no-cache\", \n    \"Content-Length\": \"11\", \n    \"Content-Type\": \"text/moo\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"A cow\"\n  }, \n  \"json\": null, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"http://httpbin.org/post\"\n}\n\n\u4ee3\u308f\u308a\u306b curl() \u3092\u4f7f\u3063\u3066\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u30c7\u30fc\u30bf\u3092\u8aad\u3080\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff0e\ncon <- curl(\"http://httpbin.org/post\", handle = h)\ncat(readLines(con), sep = \"\\n\")\n\n{\n  \"args\": {}, \n  \"data\": \"moo=moomooo\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Cache-Control\": \"no-cache\", \n    \"Content-Length\": \"11\", \n    \"Content-Type\": \"text/moo\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"A cow\"\n  }, \n  \"json\": null, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"http://httpbin.org/post\"\n}\n\n\u307e\u305f\uff0c curl_download() \u3092\u4f7f\u3063\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30c7\u30a3\u30b9\u30af\u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff0e\ntmp <- tempfile()\ncurl_download(\"http://httpbin.org/post\", destfile = tmp, handle = h)\ncat(readLines(tmp), sep = \"\\n\")\n\n{\n  \"args\": {}, \n  \"data\": \"moo=moomooo\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Cache-Control\": \"no-cache\", \n    \"Content-Length\": \"11\", \n    \"Content-Type\": \"text/moo\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"A cow\"\n  }, \n  \"json\": null, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"http://httpbin.org/post\"\n}\n\n\u3042\u308b\u3044\u306f\uff0c\u540c\u3058\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30d7\u30fc\u30eb\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff0e\ncurl_fetch_multi(\"http://httpbin.org/post\", handle = h, done = function(res){\n  cat(\"Request complete! Response content:\\n\")\n  cat(rawToChar(res$content))\n})\n\n# \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5b9f\u884c\nout <- multi_run()\n\nRequest complete! Response content:\n{\n  \"args\": {}, \n  \"data\": \"moo=moomooo\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Cache-Control\": \"no-cache\", \n    \"Content-Length\": \"11\", \n    \"Content-Type\": \"text/moo\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"A cow\"\n  }, \n  \"json\": null, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"http://httpbin.org/post\"\n}\n\n\n\u30af\u30c3\u30ad\u30fc\u306e\u8aad\u8fbc\ncurl \u30cf\u30f3\u30c9\u30eb\u306f\u30b5\u30fc\u30d0\u304c\u8a2d\u5b9a\u3057\u305f\u30af\u30c3\u30ad\u30fc\u3092\u81ea\u52d5\u7684\u306b\u8a18\u9332\u3057\u307e\u3059\uff0ehandle_cookies()\u3092\u4f7f\u3063\u3066\uff0c\u73fe\u5728\u30cf\u30f3\u30c9\u30eb\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30af\u30c3\u30ad\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u3044\u3064\u3067\u3082\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n# \u65b0\u3057\u3044\u30cf\u30f3\u30c9\u30eb\nh <- new_handle()\n\n# \u30b5\u30fc\u30d0\u306b\u30af\u30c3\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u4f9d\u983c\nreq <- curl_fetch_memory(\"http://httpbin.org/cookies/set?foo=123&bar=ftw\", handle = h)\nreq <- curl_fetch_memory(\"http://httpbin.org/cookies/set?baz=moooo\", handle = h)\nhandle_cookies(h)\n\n       domain  flag path secure expiration name value\n1 httpbin.org FALSE    /  FALSE       <NA>  foo   123\n2 httpbin.org FALSE    /  FALSE       <NA>  bar   ftw\n3 httpbin.org FALSE    /  FALSE       <NA>  baz moooo\n\n# \u30af\u30c3\u30ad\u30fc\u306e\u8a2d\u5b9a\u3092\u89e3\u9664\nreq <- curl_fetch_memory(\"http://httpbin.org/cookies/delete?foo\", handle = h)\nhandle_cookies(h)\n\n       domain  flag path secure          expiration name value\n1 httpbin.org FALSE    /  FALSE 2016-10-15 22:21:50  foo  <NA>\n2 httpbin.org FALSE    /  FALSE                <NA>  bar   ftw\n3 httpbin.org FALSE    /  FALSE                <NA>  baz moooo\n\nhandle_cookies() \u95a2\u6570\u306fnetscape\u306ecookie\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b7\u9805\u76ee\u3092\u5217\u306b\u6301\u3064\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u8fd4\u3057\u307e\u3059\uff0e\n\n\u30cf\u30f3\u30c9\u30eb\u306e\u518d\u5229\u7528\n\u65e2\u306b\u307f\u305f\u3088\u3046\u306b\uff0c curl \u3067\u306f\u3072\u3068\u3064\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u8907\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u4f7f\u3044\u307e\u308f\u3059\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e\u3067\u3059\u304c\uff0c\u305d\u3046\u3059\u308b\u306e\u304c\u3044\u3064\u3067\u3082\u3088\u3044\u8003\u3048\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u65b0\u305f\u306a\u30cf\u30f3\u30c9\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u4e0a\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\uff0c\u3075\u3064\u3046\u306f\u7121\u8996\u3067\u304d\u308b\u7a0b\u5ea6\u3067\u3059\uff0e\u8907\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5358\u4e00\u3042\u308b\u3044\u306f\u8907\u6570\u306e\u30b5\u30fc\u30d0\u306b\u5bfe\u3057\u3066\u767a\u884c\u3059\u308b\u6700\u3082\u5b89\u5168\u306a\u65b9\u6cd5\u306f\uff0c\u305d\u308c\u305e\u308c\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u5225\u3005\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059\nreq1 <- curl_fetch_memory(\"https://httpbin.org/get\", handle = new_handle())\nreq2 <- curl_fetch_memory(\"http://www.r-project.org\", handle = new_handle())\n\n\u8907\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u30cf\u30f3\u30c9\u30eb\u3092\u518d\u5229\u7528\u3057\u305f\u304f\u306a\u308b\u7406\u7531\u306f2\u3064\u3042\u308a\u307e\u3059\uff0e\u3072\u3068\u3064\u3081\u306e\u7406\u7531\u306f\uff0c\u30cf\u30f3\u30c9\u30eb\u304c\u30b5\u30fc\u30d0\u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u308b\u30af\u30c3\u30ad\u30fc\u3092\u81ea\u52d5\u7684\u306b\u8a18\u9332\u3057\u3066\u304f\u308c\u308b\u3053\u3068\u3067\u3059\uff0e\u3053\u308c\u306f\u30db\u30b9\u30c8\u304c\u30bb\u30c3\u30b7\u30e7\u30f3\u30af\u30c3\u30ad\u30fc\u306e\u4f7f\u7528\u3092\u8981\u6c42\u3057\u3066\u304f\u308b\u5834\u5408\u306b\u6709\u7528\u304b\u3082\u3057\u307e\u305b\u3093\uff0e\n\u3082\u3046\u3072\u3068\u3064\u306e\u7406\u7531\u306f\uff0c HTTP Keep-Alive \u306e\u5229\u7528\u3067\u3059\uff0e curl \u306f\uff0c\u5404\u30cf\u30f3\u30c9\u30eb\u5185\u306e\u958b\u3044\u3066\u3044\u308bHTTP\u63a5\u7d9a\u306e\u30d7\u30fc\u30eb\u3092\u81ea\u52d5\u7684\u306b\u7dad\u6301\u3057\u3066\u304f\u308c\u307e\u3059\uff0e\u3072\u3068\u3064\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u4f7f\u3063\u3066\u540c\u4e00\u306e\u30b5\u30fc\u30d0\u306b\u591a\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b\u5834\u5408\uff0c curl \u306f\u53ef\u80fd\u306a\u3089\u65e2\u5b58\u306e\u63a5\u7d9a\u3092\u4f7f\u3044\u307e\u3059\uff0e\u3053\u308c\u306b\u3088\u3063\u3066\u63a5\u7d9a\u306e\u30aa\u30fc\u30d0\u30d8\u30c3\u30c9\u304c\u5c11\u3057\u524a\u6e1b\u3055\u308c\u307e\u3059\uff0e\u305f\u3060\u3057\uff0c\u3088\u3044\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3042\u308c\u3070\u305d\u308c\u307b\u3069\u5927\u304d\u306a\u52b9\u679c\u306f\u306a\u3044\u3067\u3057\u3087\u3046\uff0e\nh <- new_handle()\nsystem.time(curl_fetch_memory(\"https://api.github.com/users/ropensci\", handle = h))\n\n   user  system elapsed \n   0.03    0.00    1.19 \n\nsystem.time(curl_fetch_memory(\"https://api.github.com/users/rstudio\", handle = h))\n\n   user  system elapsed \n   0.00    0.00    0.33 \n\n\u30cf\u30f3\u30c9\u30eb\u306e\u518d\u5229\u7528\u306b\u53cd\u5bfe\u3059\u308b\u8ad6\u62e0\u306f\uff0c curl \u304c\u5404\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5f8c\u3067\u30cf\u30f3\u30c9\u30eb\u3092\u7247\u4ed8\u3051\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u660e\u793a\u7684\u306b\u30ea\u30bb\u30c3\u30c8\u3084\u4e0a\u66f8\u304d\u3092\u884c\u308f\u306a\u3044\u9650\u308a\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u3084\u5185\u90e8\u3067\u6301\u3063\u3066\u3044\u308b\u9805\u76ee\u306e\u3059\u3079\u3066\u304c\u5c06\u6765\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u3082\u6b8b\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\nhandle_reset(h)\n\nhandle_reset() \u95a2\u6570\u306f curl \u306e\u3059\u3079\u3066\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u30ea\u30af\u30a8\u30b9\u30c8\u30d8\u30c3\u30c0\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\u306b\u30ea\u30bb\u30c3\u30c8\u3057\u307e\u3059\uff0e\u30af\u30c3\u30ad\u30fc\u306f\u524a\u9664\u3055\u308c\u307e\u305b\u3093\u3057\uff0c\u63a5\u7d9a\u306f keep-alive \u306a\u307e\u307e\u3067\u3059\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c\u5f8c\u7d9a\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u30cf\u30f3\u30c9\u30eb\u3092\u518d\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u306b\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5b9f\u884c\u5f8c\u306b handle_reset() \u3092\u547c\u3076\u306e\u304c\u3088\u3044\u3084\u308a\u65b9\u3067\u3059\uff0e\u3068\u306f\u3044\u3048\u53ef\u80fd\u3067\u3042\u308c\u3070\u65b0\u3057\u3044\u30cf\u30f3\u30c9\u30eb\u3092\u4f5c\u6210\u3059\u308b\u307b\u3046\u304c\uff0c\u53e4\u3044\u3082\u306e\u3092\u4f7f\u3044\u307e\u308f\u3059\u3088\u308a\u5e38\u306b\u5b89\u5168\u3067\u3059\uff0e\n\n\u30d5\u30a9\u30fc\u30e0\u306e\u9001\u4fe1\nhandle_setform() \u95a2\u6570\u306f multipart/form-data \u306e HTTP POST \u30ea\u30af\u30a8\u30b9\u30c8\uff08\u3064\u307e\u308a\u30d5\u30a9\u30fc\u30e0\u306e\u9001\u4fe1\uff09\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u3044\u307e\u3059\uff0e\u5024\u306b\u306f\u6587\u5b57\u5217\uff0craw\u30d9\u30af\u30c8\u30eb\uff08\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306e\u5834\u5408\uff09\uff0c\u30d5\u30a1\u30a4\u30eb\u306e\u3044\u305a\u308c\u304b\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\uff0e\n# \u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u306e\u9001\u4fe1\nh <- new_handle()\nhandle_setform(h,\n  foo = \"blabla\",\n  bar = charToRaw(\"boeboe\"),\n  description = form_file(system.file(\"DESCRIPTION\")),\n  logo = form_file(file.path(Sys.getenv(\"R_DOC_DIR\"), \"html/logo.jpg\"), \"image/jpeg\")\n)\nreq <- curl_fetch_memory(\"http://httpbin.org/post\", handle = h)\n\nform_file() \u95a2\u6570\u306f\u30d5\u30a9\u30fc\u30e0\u9001\u4fe1\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306b\u4f7f\u3044\u307e\u3059\uff0e\u3053\u306e\u95a2\u6570\u306b\u306f2\u3064\u306e\u5f15\u6570\u304c\u3042\u308a\u307e\u3059\uff0e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3068\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u6307\u5b9a\u3067\u304d\u308b content-type \u306e\u5024\u3067\u3059\uff0e content-type \u304c\u4f55\u3082\u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\uff0c curl \u306f content-type \u3092\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u304b\u3089\u63a8\u6e2c\u3057\u307e\u3059\uff0e\n\n\u30d1\u30a4\u30d7\u306e\u4f7f\u7528\nhandle_xxx() \u7cfb\u95a2\u6570\u306f\u3069\u308c\u3082\u30cf\u30f3\u30c9\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u306e\u3067\uff0c\u4eba\u6c17\u306e\u30d1\u30a4\u30d7\u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u9023\u9396\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\nlibrary(magrittr)\n\nnew_handle() %>% \n  handle_setopt(copypostfields = \"moo=moomooo\") %>% \n  handle_setheaders(\"Content-Type\" = \"text/moo\", \"Cache-Control\" = \"no-cache\", \"User-Agent\" = \"A cow\") %>%\n  curl_fetch_memory(url = \"http://httpbin.org/post\") %$% content %>% rawToChar %>% cat\n\n{\n  \"args\": {}, \n  \"data\": \"moo=moomooo\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Cache-Control\": \"no-cache\", \n    \"Content-Length\": \"11\", \n    \"Content-Type\": \"text/moo\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"A cow\"\n  }, \n  \"json\": null, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"http://httpbin.org/post\"\n}\n\n\n\u8a33\u6ce8\uff1a\u7ffb\u8a33\u306e\u969b\uff0c\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u5b9f\u884c\u3057\u305f\uff0e\ndevtools::session_info()\n\nSession info --------------------------------------------------------------\n setting  value                       \n version  R version 3.3.1 (2016-06-21)\n system   x86_64, mingw32             \n ui       RTerm                       \n language (EN)                        \n collate  Japanese_Japan.932          \n tz       Asia/Tokyo                  \n date     2016-10-15                  \nPackages ------------------------------------------------------------------\n package       * version  date       source                            \n assertthat      0.1      2013-12-06 CRAN (R 3.3.1)                    \n curl          * 2.1      2016-09-22 CRAN (R 3.3.1)                    \n devtools        1.12.0   2016-06-24 CRAN (R 3.3.1)                    \n digest          0.6.10   2016-08-02 CRAN (R 3.3.1)                    \n evaluate        0.9      2016-04-29 CRAN (R 3.3.1)                    \n formatR         1.4      2016-05-09 CRAN (R 3.3.1)                    \n htmltools       0.3.5    2016-03-21 CRAN (R 3.3.1)                    \n knitr           1.14     2016-08-13 CRAN (R 3.3.1)                    \n magrittr      * 1.5      2014-11-22 CRAN (R 3.3.1)                    \n memoise         1.0.0    2016-01-29 CRAN (R 3.3.1)                    \n Rcpp            0.12.6   2016-07-19 CRAN (R 3.3.1)                    \n RevoUtils       10.0.1   2016-08-24 local                             \n RevoUtilsMath * 8.0.3    2016-04-13 local                             \n rmarkdown       1.0.9016 2016-10-13 Github (rstudio/rmarkdown@2158b9d)\n stringi         1.1.1    2016-05-27 CRAN (R 3.3.0)                    \n stringr         1.1.0    2016-08-19 CRAN (R 3.3.1)                    \n tibble          1.2      2016-08-26 CRAN (R 3.3.1)                    \n withr           1.0.2    2016-06-20 CRAN (R 3.3.1)                    \n yaml            2.1.13   2014-06-12 CRAN (R 3.3.1)                    \n\n\u3053\u306e\u6587\u66f8\u306f\uff0cJeroen Ooms \u4ed6\u306b\u3088\u308bR\u30d1\u30c3\u30b1\u30fc\u30b8 [`curl`](https://cran.r-project.org/web/packages/curl/) (version 2.1) \u306e\u30d3\u30cd\u30c3\u30c8 [\"The curl package: a modern R interface to libcurl\"](https://cran.r-project.org/web/packages/curl/vignettes/intro.html) \u306e\u65e5\u672c\u8a9e\u8a33\u3067\u3059\uff0e\n\nLicense: [MIT](https://opensource.org/licenses/MIT)\n\n----\n\n\n\n<!-- The curl package provides bindings to the [libcurl](http://curl.haxx.se/libcurl/) C library for R. The package supports retrieving data in-memory, downloading to disk, or streaming using the [R \"connection\" interface](https://stat.ethz.ch/R-manual/R-devel/library/base/html/connections.html). Some knowledge of curl is recommended to use this package. For a more user-friendly HTTP client, have a look at the  [httr](https://cran.r-project.org/package=httr/vignettes/quickstart.html) package which builds on curl with HTTP specific tools and logic. -->\n\ncurl \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\uff0cC\u30e9\u30a4\u30d6\u30e9\u30ea [libcurl](http://curl.haxx.se/libcurl/) \u3078\u306eR\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff0e\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\uff0c\u30e1\u30e2\u30ea\u3078\u306e\u30c7\u30fc\u30bf\u8aad\u8fbc\u3084\u30c7\u30a3\u30b9\u30af\u3078\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\uff0c[R\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9](https://stat.ethz.ch/R-manual/R-devel/library/base/html/connections.html)\u3092\u7528\u3044\u305f\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\uff0e\u3088\u308a\u30e6\u30fc\u30b6\u306b\u3084\u3055\u3057\u3044HTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5fc5\u8981\u3067\u3042\u308c\u3070\uff0ccurl\u3092\u3082\u3068\u306b\u3057\u3066HTTP\u7528\u306e\u30c4\u30fc\u30eb\u3084\u51e6\u7406\u304c\u8ffd\u52a0\u3055\u308c\u305f [httr](https://cran.r-project.org/package=httr/vignettes/quickstart.html) \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u898b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\n<!-- ## Request interfaces -->\n\n## \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\n\n<!-- The curl package implements several interfaces to retrieve data from a URL: -->\n\ncurl \u30d1\u30c3\u30b1\u30fc\u30b8\u306fURL\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u305f\u3081\u306e\u3044\u304f\u3064\u304b\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\uff0e\n\n<!-- - `curl_fetch_memory()`  saves response in memory -->\n<!-- - `curl_download()` or `curl_fetch_disk()`  writes response to disk -->\n<!-- - `curl()` or `curl_fetch_stream()` streams response data -->\n<!-- - `curl_fetch_multi()` (Advanced) process responses via callback functions -->\n\n- `curl_fetch_memory()` \u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30e1\u30e2\u30ea\u306b\u4fdd\u5b58\u3057\u307e\u3059\n- `curl_download()` \u3084 `curl_fetch_disk()` \u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30c7\u30a3\u30b9\u30af\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\n- `curl()` \u3084 `curl_fetch_stream()` \u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\u3057\u307e\u3059\n- `curl_fetch_multi()` \u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306b\u3088\u3063\u3066\u51e6\u7406\u3057\u307e\u3059\uff08\u9ad8\u5ea6\u306a\u6a5f\u80fd\uff09\n\n<!-- Each interface performs the same HTTP request, they only differ in how response data is processed. -->\n\n\u3069\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3082\u540c\u3058HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u884c\u3044\u307e\u3059\u304c\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u3069\u3046\u51e6\u7406\u3059\u308b\u304b\u3060\u3051\u304c\u7570\u306a\u308a\u307e\u3059\uff0e\n\n<!-- ### Getting in memory -->\n\n### \u30e1\u30e2\u30ea\u306b\u8aad\u307f\u8fbc\u3080\u5834\u5408\n\n<!-- The `curl_fetch_memory` function is a blocking interface which waits for the request to complete and returns a list with all content (data, headers, status, timings) of the server response. -->\n\n`curl_fetch_memory()` \u95a2\u6570\u306f\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3042\u308a\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u5b8c\u4e86\u3057\u3066\u30b5\u30fc\u30d0\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u5185\u5bb9\u3059\u3079\u3066\uff08\u30c7\u30fc\u30bf\uff0c\u30d8\u30c3\u30c0\uff0c\u30b9\u30c6\u30fc\u30bf\u30b9\uff0c\u30bf\u30a4\u30df\u30f3\u30b0\uff09\u3092\u542b\u3080\u30ea\u30b9\u30c8\u304c\u8fd4\u3063\u3066\u304f\u308b\u307e\u3067\u5f85\u6a5f\u3057\u307e\u3059\uff0e\n\n\n```r\nreq <- curl_fetch_memory(\"https://httpbin.org/get\")\nstr(req)\n```\n\n```\nList of 6\n $ url        : chr \"https://httpbin.org/get\"\n $ status_code: int 200\n $ headers    : raw [1:220] 48 54 54 50 ...\n $ modified   : POSIXct[1:1], format: NA\n $ times      : Named num [1:6] 0 0 0.265 1.513 1.778 ...\n  ..- attr(*, \"names\")= chr [1:6] \"redirect\" \"namelookup\" \"connect\" \"pretransfer\" ...\n $ content    : raw [1:232] 7b 0a 20 20 ...\n```\n\n```r\nparse_headers(req$headers)\n```\n\n```\n[1] \"HTTP/1.1 200 OK\"                       \n[2] \"Server: nginx\"                         \n[3] \"Date: Sat, 15 Oct 2016 13:21:29 GMT\"   \n[4] \"Content-Type: application/json\"        \n[5] \"Content-Length: 232\"                   \n[6] \"Connection: keep-alive\"                \n[7] \"Access-Control-Allow-Origin: *\"        \n[8] \"Access-Control-Allow-Credentials: true\"\n```\n\n```r\ncat(rawToChar(req$content))\n```\n\n```\n{\n  \"args\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"r/curl/jeroen\"\n  }, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\n<!-- The `curl_fetch_memory` interface is the easiest interface and most powerful for buidling API clients. However it is not suitable for downloading really large files because it is fully in-memory. If you are expecting 100G of data, you probably need one of the other interfaces. -->\n\n`curl_fetch_memory()` \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306f\uff0cAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u6700\u3082\u7c21\u5358\u3067\u5f37\u529b\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u3059\uff0e\u3067\u3059\u304c\u30e1\u30e2\u30ea\u5185\u3067\u3059\u3079\u3066\u306e\u51e6\u7406\u3092\u884c\u3046\u306e\u3067\uff0c\u975e\u5e38\u306b\u5927\u304d\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u306b\u306f\u5411\u3044\u3066\u3044\u307e\u305b\u3093\uff0e\u3082\u3057\u30c7\u30fc\u30bf\u304c100GB\u3042\u308b\u3068\u4e88\u60f3\u3057\u3066\u3044\u308b\u306e\u3067\u3042\u308c\u3070\uff0c\u304d\u3063\u3068\u3069\u308c\u304b\u4ed6\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304c\u5fc5\u8981\u306b\u306a\u308b\u3067\u3057\u3087\u3046\uff0e\n\n<!-- ### Downloading to disk -->\n\n### \u30c7\u30a3\u30b9\u30af\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5834\u5408\n\n<!-- The second method is `curl_download`, which has been designed as a drop-in replacement for `download.file` in r-base. It writes the response straight to disk, which is useful for downloading (large) files. -->\n\n\u3075\u305f\u3064\u3081\u306e\u65b9\u6cd5\u306f `curl_download()` \u3067\u3059\uff0e\u3053\u308c\u306f base R \u306e `download.file()` \u95a2\u6570\u3092\u7c21\u5358\u306b\u4ee3\u66ff\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u95a2\u6570\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u76f4\u63a5\u30c7\u30a3\u30b9\u30af\u306b\u66f8\u304d\u8fbc\u3080\u306e\u3067\uff0c\uff08\u5927\u304d\u306a\uff09\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u306e\u306b\u4fbf\u5229\u3067\u3059\uff0e\n\n\n```r\ntmp <- tempfile()\ncurl_download(\"https://httpbin.org/get\", tmp)\ncat(readLines(tmp), sep = \"\\n\")\n```\n\n```\n{\n  \"args\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"r/curl/jeroen\"\n  }, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\n<!-- ### Streaming data -->\n\n### \u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u3059\u308b\u5834\u5408\n\n<!-- The most flexible interface is the `curl` function, which has been designed as a drop-in replacement for base `url`. It will create a so-called connection object, which allows for incremental (asynchronous) reading of the response. -->\n\n\u6700\u3082\u67d4\u8edf\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306f `curl()` \u95a2\u6570\u3067\u3059\uff0e\u3053\u308c\u306f base R \u306e`url()` \u3092\u7c21\u5358\u306b\u4ee3\u66ff\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u95a2\u6570\u306f\u3044\u308f\u3086\u308b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u6f38\u9032\u7684\u306b\uff08\u975e\u540c\u671f\u306b\uff09\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\uff0e\n\n\n```r\ncon <- curl(\"https://httpbin.org/get\")\nopen(con)\n\n# 3\u884c\u53d6\u5f97\nout <- readLines(con, n = 3)\ncat(out, sep = \"\\n\")\n```\n\n```\n{\n  \"args\": {}, \n  \"headers\": {\n```\n\n```r\n# \u3055\u3089\u306b3\u884c\u53d6\u5f97\nout <- readLines(con, n = 3)\ncat(out, sep = \"\\n\")\n```\n\n```\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Host\": \"httpbin.org\", \n```\n\n```r\n# \u6b8b\u308a\u306e\u884c\u3092\u53d6\u5f97\nout <- readLines(con)\nclose(con)\ncat(out, sep = \"\\n\")\n```\n\n```\n    \"User-Agent\": \"r/curl/jeroen\"\n  }, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"https://httpbin.org/get\"\n}\n```\n\n<!-- The example shows how to use `readLines` on an opened connection to read `n` lines at a time. Similarly `readBin` is used to read `n` bytes at a time for stream parsing binary data. -->\n\n\u3053\u306e\u4f8b\u3067\u306f\u958b\u3044\u305f\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066 `readLines()` \u3092\u4f7f\u3044\uff0c\u4e00\u5ea6\u306b `n` \u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5\u3092\u793a\u3057\u3066\u3044\u307e\u3059\uff0e\u540c\u69d8\u306b\uff0c\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u4e00\u5ea6\u306b\u30c7\u30fc\u30bf\u3092 `n` \u30d0\u30a4\u30c8\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u30d1\u30fc\u30b9\u3059\u308b\u306b\u306f `readBin()` \u3092\u4f7f\u3044\u307e\u3059\uff0e\n\n<!-- ### Non-blocking requests -->\n\n### \u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u30ea\u30af\u30a8\u30b9\u30c8\n\n<!-- As of `curl 2.0` the package provides a non-blocking interface which can perform multiple simultaneous requests. The `curl_fetch_multi` adds a request to a pool and returns immediately; it does not actually perform the request.  -->\n\ncurl 2.0 \u304b\u3089\uff0ccurl \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u540c\u6642\u306b\u591a\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff0e`curl_fetch_multi()`\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30d7\u30fc\u30eb\u306b\u8ffd\u52a0\u3057\u305f\u3089\u3059\u3050\u306b\u8fd4\u3063\u3066\u304d\u3066\uff0c\u5b9f\u969b\u306b\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u307e\u305b\u3093\uff0e\n\n\n```r\npool <- new_pool()\ncb <- function(req){cat(\"done:\", req$url, \": HTTP:\", req$status, \"\\n\")}\ncurl_fetch_multi('https://www.google.com', done = cb, pool = pool)\ncurl_fetch_multi('https://cloud.r-project.org', done = cb, pool = pool)\ncurl_fetch_multi('https://httpbin.org/blabla', done = cb, pool = pool)\n```\n\n<!-- When we call `multi_run()`, all scheduled requests are performed concurrently. The callback functions get triggered when the request completes. -->\n\n`multi_run()` \u3092\u547c\u3076\u3068\uff0c\u767b\u9332\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u4e26\u884c\u7684\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\uff0e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u5b8c\u4e86\u3059\u308b\u3068\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\uff0e\n\n\n```r\n# \u3053\u308c\u3067\u5b9f\u969b\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u308b\nout <- multi_run(pool = pool)\n```\n\n```\ndone: https://cloud.r-project.org/ : HTTP: 200 \ndone: https://www.google.co.jp/?gfe_rd=cr&ei=XC0CWKXAL4SL8QfUgJ6ICA : HTTP: 200 \ndone: https://httpbin.org/blabla : HTTP: 404 \n```\n\n```r\nprint(out)\n```\n\n```\n$success\n[1] 3\n\n$error\n[1] 0\n\n$pending\n[1] 0\n```\n\n<!-- The system allows for running many concurrent non-blocking requests. However it is quite complex and requires careful specification of handler functions. -->\n\n\u3053\u306e\u30b7\u30b9\u30c6\u30e0\u306b\u3088\u3063\u3066\u591a\u6570\u306e\u4e26\u884c\u7684\u306a\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\uff0c\u304b\u306a\u308a\u8907\u96d1\u3067\u3059\u3057\uff0c\u30cf\u30f3\u30c9\u30e9\u95a2\u6570\u3092\u6ce8\u610f\u6df1\u304f\u8a2d\u8a08\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n<!-- ## Exception handling -->\n\n## \u4f8b\u5916\u51e6\u7406\n\n<!-- A HTTP requests can encounter two types of errors: -->\n\nHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u306f2\u7a2e\u985e\u306e\u30a8\u30e9\u30fc\u304c\u3042\u308a\u5f97\u307e\u3059\uff0e\n\n<!--\n1. Connection failure: network down, host not found, invalid SSL certficate, etc\n2. HTTP non-success status: 401 (DENIED), 404 (NOT FOUND), 503 (SERVER PROBLEM), etc\n-->\n\n1. \u63a5\u7d9a\u5931\u6557\uff1a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u30c0\u30a6\u30f3\u3057\u3066\u3044\u308b\uff0c\u30db\u30b9\u30c8\u304c\u898b\u3064\u304b\u3089\u306a\u3044\uff0cSSL\u8a3c\u660e\u66f8\u304c\u4e0d\u6b63\uff0c\u7b49\n\n1. HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u304c\u975e\u6210\u529f\uff1a401\uff08\u30a2\u30af\u30bb\u30b9\u62d2\u5426\uff09\uff0c404\uff08\u30ea\u30bd\u30fc\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\uff09\uff0c503\uff08\u30b5\u30fc\u30d0\u306e\u554f\u984c\uff09\uff0c\u7b49\n\n<!-- The first type of errors (connection failures) will always raise an error in R for each interface. However if the requests succeeds and the server returns a non-success HTTP status code, only `curl()` and `curl_download()` will raise an error. Let's dive a little deeper into this. -->\n\n\u3072\u3068\u3064\u3081\u306e\u7a2e\u985e\u306e\u30a8\u30e9\u30fc\uff08\u63a5\u7d9a\u5931\u6557\uff09\u306f\uff0c\u5404\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u304a\u3044\u3066\u5fc5\u305aR\u306e\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u6210\u529f\u3057\u305f\u3082\u306e\u306e\u30b5\u30fc\u30d0\u304c\u975e\u6210\u529f\u306eHTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u8fd4\u3057\u305f\u3068\u3044\u3046\u5834\u5408\u306b\u306f\uff0c `curl()` \u3068 `curl_download()` \u3060\u3051\u304c\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u307e\u3059\uff0e\u3053\u308c\u306b\u3064\u3044\u3066\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n<!-- ### Error automatically -->\n\n### \u81ea\u52d5\u7684\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u5834\u5408\n\n<!-- The `curl` and `curl_download` functions are safest to use because they automatically raise an error if the request was completed but the server returned a non-success (400 or higher) HTTP status. This mimics behavior of base functions `url` and `download.file`. Therefore we can safely write code like this: -->\n\n`curl()` \u95a2\u6570\u3068 `curl_download()` \u95a2\u6570\u304c\u6700\u3082\u5b89\u5168\u306b\u4f7f\u3048\u308b\u3082\u306e\u3067\u3059\uff0e\u3068\u3044\u3046\u306e\u3082\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u5b8c\u4e86\u3057\u305f\u304c\u30b5\u30fc\u30d0\u304c\u975e\u6210\u529f\u306e\uff08400\u3084\u305d\u308c\u3088\u308a\u5927\u304d\u3044\uff09HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u8fd4\u3057\u305f\u5834\u5408\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u304b\u3089\u3067\u3059\uff0e\u3053\u308c\u306f base R \u306e `url()` \u95a2\u6570\u3068 `download.file()` \u95a2\u6570\u306e\u3075\u308b\u307e\u3044\u3092\u771f\u4f3c\u305f\u3082\u306e\u3067\u3059\uff0e\u3053\u308c\u306b\u3088\u3063\u3066\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u5b89\u5168\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\n```r\n# \u3053\u308c\u3067OK\ncurl_download('https://cran.r-project.org/CRAN_mirrors.csv', 'mirrors.csv')\nmirros <- read.csv('mirrors.csv')\nunlink('mirrors.csv')\n```\n\n<!-- If the HTTP request was unsuccesful, R will not continue: -->\n\n\u3082\u3057HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u5931\u6557\u3057\u305f\u5834\u5408\uff0cR\u306f\u5b9f\u884c\u3092\u505c\u6b62\u3057\u307e\u3059\uff0e\n\n\n```r\n# \u304a\u3063\u3068\uff01URL\u3092\u66f8\u304d\u9593\u9055\u3048\u305f\uff01\ncurl_download('https://cran.r-project.org/CRAN_mirrorZ.csv', 'mirrors.csv')\n```\n\n```\nError in curl_download(\"https://cran.r-project.org/CRAN_mirrorZ.csv\", : HTTP error 404.\n```\n\n```r\ncon <- curl('https://cran.r-project.org/CRAN_mirrorZ.csv')\nopen(con)\n```\n\n```\nError in open.connection(con): HTTP error 404.\n```\n\n\n\n\n<!-- ### Check manually -->\n\n### \u624b\u52d5\u3067\u78ba\u8a8d\u3059\u308b\u5834\u5408\n\n<!-- When using any of the `curl_fetch_*` functions it is important to realize that these do **not** raise an error if the request was completed but returned a non-200 status code. When using `curl_fetch_memory` or `curl_fetch_disk` you need to implement such application logic yourself and check if the response was successful. -->\n\n`curl_fetch_*()` \u7cfb\u95a2\u6570\u306e\u3044\u305a\u308c\u304b\u3092\u4f7f\u3046\u5834\u5408\uff0c\u3053\u308c\u3089\u306e\u95a2\u6570\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u5b8c\u4e86\u3057\u305f\u304c200\u4ee5\u5916\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u304c\u8fd4\u3063\u3066\u304d\u305f\u5834\u5408\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f**\u3055\u305b\u306a\u3044**\uff0c\u3068\u3044\u3046\u3053\u3068\u3092\u7406\u89e3\u3057\u3066\u304a\u304f\u306e\u304c\u91cd\u8981\u3067\u3059\uff0e`curl_fetch_memory()` \u3084 `curl_fetch_disk()` \u3092\u4f7f\u3046\u3068\u304d\u306b\u306f\uff0c\u81ea\u5206\u3067\u305d\u306e\u3088\u3046\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3057\u3066\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u6210\u529f\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\n```r\nreq <- curl_fetch_memory('https://cran.r-project.org/CRAN_mirrors.csv')\nprint(req$status_code)\n```\n\n```\n[1] 200\n```\n\n<!-- Same for downloading to disk. If you do not check your status, you might have downloaded an error page! -->\n\n\u30c7\u30a3\u30b9\u30af\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5834\u5408\u3082\u540c\u69d8\u3067\u3059\uff0e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\u3068\uff0c\u30a8\u30e9\u30fc\u30da\u30fc\u30b8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff01\n\n\n```r\n# \u304a\u3063\u3068\u66f8\u304d\u9593\u9055\u3048\u305f\uff01\nreq <- curl_fetch_disk('https://cran.r-project.org/CRAN_mirrorZ.csv', 'mirrors.csv')\nprint(req$status_code)\n```\n\n```\n[1] 404\n```\n\n```r\n# \u601d\u3063\u3066\u305fCSV\u30d5\u30a1\u30a4\u30eb\u3068\u9055\u3046\u305e\uff01\nhead(readLines('mirrors.csv'))\n```\n\n```\n[1] \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\"                               \n[2] \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\"\"               \n[3] \"  \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\"                 \n[4] \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\">\"\n[5] \"<head>\"                                                                   \n[6] \"<title>Object not found!</title>\"                                         \n```\n\n```r\nunlink('mirrors.csv')\n```\n\n<!-- If you *do* want the `curl_fetch_*` functions to automatically raise an error, you should set the [`FAILONERROR`](https://curl.haxx.se/libcurl/c/CURLOPT_FAILONERROR.html) option to `TRUE` in the handle of the request. -->\n\n\u3082\u3057**\u672c\u5f53\u306b** `curl_fetch_*()` \u7cfb\u95a2\u6570\u304c\u81ea\u52d5\u7684\u306b\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30eb\u306e [`FAILONERROR`](https://curl.haxx.se/libcurl/c/CURLOPT_FAILONERROR.html) \u30aa\u30d7\u30b7\u30e7\u30f3\u3092 `TRUE` \u306b\u8a2d\u5b9a\u3059\u308b\u3079\u304d\u3067\u3059\uff0e\n\n\n```r\nh <- new_handle(failonerror = TRUE)\ncurl_fetch_memory('https://cran.r-project.org/CRAN_mirrorZ.csv', handle = h)\n```\n\n```\nError in curl_fetch_memory(\"https://cran.r-project.org/CRAN_mirrorZ.csv\", : HTTP response code said error\n```\n\n<!-- ## Customizing requests -->\n\n## \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\n\n<!-- By default libcurl uses HTTP GET to issue a request to an HTTP url. To send a customized request, we first need to create and configure a curl handle object that is passed to the specific download interface.   -->\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u3067\u306f\uff0c libcurl \u306f HTTP URL \u3078\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b\u306e\u306b HTTP GET \u3092\u4f7f\u3044\u307e\u3059\uff0e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u306b\u306f\uff0c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u6e21\u3059\u305f\u3081\u306e curl \u30cf\u30f3\u30c9\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u3068\u8a2d\u5b9a\u3092\u306f\u3058\u3081\u306b\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n<!-- ### Configuring a handle -->\n\n### \u30cf\u30f3\u30c9\u30eb\u306e\u8a2d\u5b9a\n\n<!-- Creating a new handle is done using `new_handle`. After creating a handle object, we can set the libcurl options and http request headers.  -->\n\n`new_handle()`\u3092\u4f7f\u3046\u3068\u65b0\u3057\u3044\u30cf\u30f3\u30c9\u30eb\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\uff0e\u30cf\u30f3\u30c9\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3089\uff0c libcurl \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3068 HTTP \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30d8\u30c3\u30c0\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\n```r\nh <- new_handle()\nhandle_setopt(h, copypostfields = \"moo=moomooo\");\nhandle_setheaders(h,\n  \"Content-Type\" = \"text/moo\",\n  \"Cache-Control\" = \"no-cache\",\n  \"User-Agent\" = \"A cow\"\n)\n```\n\n<!-- Use the `curl_options()` function to get a list of the options supported by your version of libcurl. The [libcurl documentation](http://curl.haxx.se/libcurl/c/curl_easy_setopt.html) explains what each option does. Option names are not case sensitive.  -->\n\n\u81ea\u5206\u304c\u4f7f\u3063\u3066\u3044\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u306e libcurl \u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30ea\u30b9\u30c8\u3092\u898b\u308b\u306b\u306f\uff0c`curl_options()` \u95a2\u6570\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\uff0e\u5404\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4f55\u3092\u3059\u308b\u3082\u306e\u306a\u306e\u304b\u306f [libcurl \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://curl.haxx.se/libcurl/c/curl_easy_setopt.html)\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u30aa\u30d7\u30b7\u30e7\u30f3\u540d\u306e\u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u306f\u533a\u5225\u3055\u308c\u307e\u305b\u3093\uff0e\n\n<!-- After the handle has been configured, it can be used with any of the download interfaces to perform the request. For example `curl_fetch_memory` will load store the output of the request in memory: -->\n\n\u8a2d\u5b9a\u304c\u7d42\u308f\u3063\u305f\u3089\uff0c\u30cf\u30f3\u30c9\u30eb\u306f\u3069\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u306e\u306b\u3082\u4f7f\u3048\u307e\u3059\uff0e\n\n\n```r\nreq <- curl_fetch_memory(\"http://httpbin.org/post\", handle = h)\ncat(rawToChar(req$content))\n```\n\n```\n{\n  \"args\": {}, \n  \"data\": \"moo=moomooo\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Cache-Control\": \"no-cache\", \n    \"Content-Length\": \"11\", \n    \"Content-Type\": \"text/moo\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"A cow\"\n  }, \n  \"json\": null, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"http://httpbin.org/post\"\n}\n```\n\n<!-- Alternatively we can use `curl()` to read the data of via a connetion interface: -->\n\n\u4ee3\u308f\u308a\u306b `curl()` \u3092\u4f7f\u3063\u3066\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u30c7\u30fc\u30bf\u3092\u8aad\u3080\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff0e\n\n\n```r\ncon <- curl(\"http://httpbin.org/post\", handle = h)\ncat(readLines(con), sep = \"\\n\")\n```\n\n```\n{\n  \"args\": {}, \n  \"data\": \"moo=moomooo\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Cache-Control\": \"no-cache\", \n    \"Content-Length\": \"11\", \n    \"Content-Type\": \"text/moo\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"A cow\"\n  }, \n  \"json\": null, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"http://httpbin.org/post\"\n}\n```\n\n\n\n<!-- Or we can use `curl_download` to write the response to disk: -->\n\n\u307e\u305f\uff0c `curl_download()` \u3092\u4f7f\u3063\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30c7\u30a3\u30b9\u30af\u306b\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff0e\n\n\n```r\ntmp <- tempfile()\ncurl_download(\"http://httpbin.org/post\", destfile = tmp, handle = h)\ncat(readLines(tmp), sep = \"\\n\")\n```\n\n```\n{\n  \"args\": {}, \n  \"data\": \"moo=moomooo\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Cache-Control\": \"no-cache\", \n    \"Content-Length\": \"11\", \n    \"Content-Type\": \"text/moo\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"A cow\"\n  }, \n  \"json\": null, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"http://httpbin.org/post\"\n}\n```\n\n<!-- Or perform the same request with a multi pool: -->\n\n\u3042\u308b\u3044\u306f\uff0c\u540c\u3058\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30d7\u30fc\u30eb\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff0e\n\n\n```r\ncurl_fetch_multi(\"http://httpbin.org/post\", handle = h, done = function(res){\n  cat(\"Request complete! Response content:\\n\")\n  cat(rawToChar(res$content))\n})\n\n# \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5b9f\u884c\nout <- multi_run()\n```\n\n```\nRequest complete! Response content:\n{\n  \"args\": {}, \n  \"data\": \"moo=moomooo\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Cache-Control\": \"no-cache\", \n    \"Content-Length\": \"11\", \n    \"Content-Type\": \"text/moo\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"A cow\"\n  }, \n  \"json\": null, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"http://httpbin.org/post\"\n}\n```\n\n<!-- ### Reading cookies -->\n\n### \u30af\u30c3\u30ad\u30fc\u306e\u8aad\u8fbc\n\n<!-- Curl handles automatically keep track of cookies set by the server. At any given point we can use `handle_cookies` to see a list of current cookies in the handle. -->\n\ncurl \u30cf\u30f3\u30c9\u30eb\u306f\u30b5\u30fc\u30d0\u304c\u8a2d\u5b9a\u3057\u305f\u30af\u30c3\u30ad\u30fc\u3092\u81ea\u52d5\u7684\u306b\u8a18\u9332\u3057\u307e\u3059\uff0e`handle_cookies()`\u3092\u4f7f\u3063\u3066\uff0c\u73fe\u5728\u30cf\u30f3\u30c9\u30eb\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30af\u30c3\u30ad\u30fc\u306e\u30ea\u30b9\u30c8\u3092\u3044\u3064\u3067\u3082\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\n```r\n# \u65b0\u3057\u3044\u30cf\u30f3\u30c9\u30eb\nh <- new_handle()\n\n# \u30b5\u30fc\u30d0\u306b\u30af\u30c3\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u4f9d\u983c\nreq <- curl_fetch_memory(\"http://httpbin.org/cookies/set?foo=123&bar=ftw\", handle = h)\nreq <- curl_fetch_memory(\"http://httpbin.org/cookies/set?baz=moooo\", handle = h)\nhandle_cookies(h)\n```\n\n```\n       domain  flag path secure expiration name value\n1 httpbin.org FALSE    /  FALSE       <NA>  foo   123\n2 httpbin.org FALSE    /  FALSE       <NA>  bar   ftw\n3 httpbin.org FALSE    /  FALSE       <NA>  baz moooo\n```\n\n```r\n# \u30af\u30c3\u30ad\u30fc\u306e\u8a2d\u5b9a\u3092\u89e3\u9664\nreq <- curl_fetch_memory(\"http://httpbin.org/cookies/delete?foo\", handle = h)\nhandle_cookies(h)\n```\n\n```\n       domain  flag path secure          expiration name value\n1 httpbin.org FALSE    /  FALSE 2016-10-15 22:21:50  foo  <NA>\n2 httpbin.org FALSE    /  FALSE                <NA>  bar   ftw\n3 httpbin.org FALSE    /  FALSE                <NA>  baz moooo\n```\n\n<!-- The `handle_cookies` function returns a data frame with 7 columns as specified in the [netscape cookie file format](http://www.cookiecentral.com/faq/#3.5). -->\n`handle_cookies()` \u95a2\u6570\u306f[netscape\u306ecookie\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f](http://www.cookiecentral.com/faq/#3.5)\u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b7\u9805\u76ee\u3092\u5217\u306b\u6301\u3064\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u8fd4\u3057\u307e\u3059\uff0e\n\n<!-- ### Re-using handles -->\n\n### \u30cf\u30f3\u30c9\u30eb\u306e\u518d\u5229\u7528\n\n<!-- As we have already seen, curl allows for reusing a single handle for multiple requests. However it is not always a good idea to do so. The performance overhead of creating and configuring a new handle object is usually negligible. The safest way to issue mutiple requests, either to a single server or multiple servers is by using a separate handle for each request.  -->\n\n\u65e2\u306b\u307f\u305f\u3088\u3046\u306b\uff0c curl \u3067\u306f\u3072\u3068\u3064\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u8907\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u4f7f\u3044\u307e\u308f\u3059\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e\u3067\u3059\u304c\uff0c\u305d\u3046\u3059\u308b\u306e\u304c\u3044\u3064\u3067\u3082\u3088\u3044\u8003\u3048\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u65b0\u305f\u306a\u30cf\u30f3\u30c9\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u4e0a\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\uff0c\u3075\u3064\u3046\u306f\u7121\u8996\u3067\u304d\u308b\u7a0b\u5ea6\u3067\u3059\uff0e\u8907\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5358\u4e00\u3042\u308b\u3044\u306f\u8907\u6570\u306e\u30b5\u30fc\u30d0\u306b\u5bfe\u3057\u3066\u767a\u884c\u3059\u308b\u6700\u3082\u5b89\u5168\u306a\u65b9\u6cd5\u306f\uff0c\u305d\u308c\u305e\u308c\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u5225\u3005\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u4f7f\u3046\u3053\u3068\u3067\u3059\n\n\n```r\nreq1 <- curl_fetch_memory(\"https://httpbin.org/get\", handle = new_handle())\nreq2 <- curl_fetch_memory(\"http://www.r-project.org\", handle = new_handle())\n```\n\n<!-- There are two reasons why you might want to reuse a handle for multiple requests. The first one is that it will automatically keep track of cookies set by the server. This might be useful if your host requires use of a session cookies. -->\n\n\u8907\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u30cf\u30f3\u30c9\u30eb\u3092\u518d\u5229\u7528\u3057\u305f\u304f\u306a\u308b\u7406\u7531\u306f2\u3064\u3042\u308a\u307e\u3059\uff0e\u3072\u3068\u3064\u3081\u306e\u7406\u7531\u306f\uff0c\u30cf\u30f3\u30c9\u30eb\u304c\u30b5\u30fc\u30d0\u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u308b\u30af\u30c3\u30ad\u30fc\u3092\u81ea\u52d5\u7684\u306b\u8a18\u9332\u3057\u3066\u304f\u308c\u308b\u3053\u3068\u3067\u3059\uff0e\u3053\u308c\u306f\u30db\u30b9\u30c8\u304c\u30bb\u30c3\u30b7\u30e7\u30f3\u30af\u30c3\u30ad\u30fc\u306e\u4f7f\u7528\u3092\u8981\u6c42\u3057\u3066\u304f\u308b\u5834\u5408\u306b\u6709\u7528\u304b\u3082\u3057\u307e\u305b\u3093\uff0e\n\n<!-- The other reason is to take advantage of http Keep-Alive. Curl automatically maintains a pool of open http connections within each handle. When using a single handle to issue many requests to the same server, curl uses existing connections when possible. This eliminites a little bit of connection overhead, although on a decent network this might not be very significant. -->\n\n\u3082\u3046\u3072\u3068\u3064\u306e\u7406\u7531\u306f\uff0c HTTP Keep-Alive \u306e\u5229\u7528\u3067\u3059\uff0e curl \u306f\uff0c\u5404\u30cf\u30f3\u30c9\u30eb\u5185\u306e\u958b\u3044\u3066\u3044\u308bHTTP\u63a5\u7d9a\u306e\u30d7\u30fc\u30eb\u3092\u81ea\u52d5\u7684\u306b\u7dad\u6301\u3057\u3066\u304f\u308c\u307e\u3059\uff0e\u3072\u3068\u3064\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u4f7f\u3063\u3066\u540c\u4e00\u306e\u30b5\u30fc\u30d0\u306b\u591a\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u767a\u884c\u3059\u308b\u5834\u5408\uff0c curl \u306f\u53ef\u80fd\u306a\u3089\u65e2\u5b58\u306e\u63a5\u7d9a\u3092\u4f7f\u3044\u307e\u3059\uff0e\u3053\u308c\u306b\u3088\u3063\u3066\u63a5\u7d9a\u306e\u30aa\u30fc\u30d0\u30d8\u30c3\u30c9\u304c\u5c11\u3057\u524a\u6e1b\u3055\u308c\u307e\u3059\uff0e\u305f\u3060\u3057\uff0c\u3088\u3044\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3042\u308c\u3070\u305d\u308c\u307b\u3069\u5927\u304d\u306a\u52b9\u679c\u306f\u306a\u3044\u3067\u3057\u3087\u3046\uff0e\n\n\n```r\nh <- new_handle()\nsystem.time(curl_fetch_memory(\"https://api.github.com/users/ropensci\", handle = h))\n```\n\n```\n   user  system elapsed \n   0.03    0.00    1.19 \n```\n\n```r\nsystem.time(curl_fetch_memory(\"https://api.github.com/users/rstudio\", handle = h))\n```\n\n```\n   user  system elapsed \n   0.00    0.00    0.33 \n```\n\n<!-- The argument against reusing handles is that curl does not cleanup the handle after each request. All of the options and internal fields will linger around for all future request until explicitly reset or overwritten. This can sometimes leads to unexpected behavior.  -->\n\n\u30cf\u30f3\u30c9\u30eb\u306e\u518d\u5229\u7528\u306b\u53cd\u5bfe\u3059\u308b\u8ad6\u62e0\u306f\uff0c curl \u304c\u5404\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5f8c\u3067\u30cf\u30f3\u30c9\u30eb\u3092\u7247\u4ed8\u3051\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u660e\u793a\u7684\u306b\u30ea\u30bb\u30c3\u30c8\u3084\u4e0a\u66f8\u304d\u3092\u884c\u308f\u306a\u3044\u9650\u308a\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u3084\u5185\u90e8\u3067\u6301\u3063\u3066\u3044\u308b\u9805\u76ee\u306e\u3059\u3079\u3066\u304c\u5c06\u6765\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u3082\u6b8b\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n\n\n```r\nhandle_reset(h)\n```\n\n<!-- The `handle_reset` function will reset all curl options and request headers to the default values. It will **not** erease cookies and it will still keep alive the connections. Therefore it is good practice to call `handle_reset` after performing a request if you want to reuse the handle for a subsequent request. Still it is always safer to create a new fresh handle when possible, rather than recycling old ones. -->\n\n`handle_reset()` \u95a2\u6570\u306f curl \u306e\u3059\u3079\u3066\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u30ea\u30af\u30a8\u30b9\u30c8\u30d8\u30c3\u30c0\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\u306b\u30ea\u30bb\u30c3\u30c8\u3057\u307e\u3059\uff0e\u30af\u30c3\u30ad\u30fc\u306f\u524a\u9664**\u3055\u308c\u307e\u305b\u3093**\u3057\uff0c\u63a5\u7d9a\u306f keep-alive \u306a\u307e\u307e\u3067\u3059\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c\u5f8c\u7d9a\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u30cf\u30f3\u30c9\u30eb\u3092\u518d\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u306b\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u5b9f\u884c\u5f8c\u306b `handle_reset()` \u3092\u547c\u3076\u306e\u304c\u3088\u3044\u3084\u308a\u65b9\u3067\u3059\uff0e\u3068\u306f\u3044\u3048\u53ef\u80fd\u3067\u3042\u308c\u3070\u65b0\u3057\u3044\u30cf\u30f3\u30c9\u30eb\u3092\u4f5c\u6210\u3059\u308b\u307b\u3046\u304c\uff0c\u53e4\u3044\u3082\u306e\u3092\u4f7f\u3044\u307e\u308f\u3059\u3088\u308a\u5e38\u306b\u5b89\u5168\u3067\u3059\uff0e\n\n<!-- ### Posting forms -->\n\n### \u30d5\u30a9\u30fc\u30e0\u306e\u9001\u4fe1\n\n<!-- The `handle_setform` function is used to perform a `multipart/form-data` HTTP POST request (a.k.a. posting a form). Values can be either strings, raw vectors (for binary data) or files.  -->\n\n`handle_setform()` \u95a2\u6570\u306f `multipart/form-data` \u306e HTTP POST \u30ea\u30af\u30a8\u30b9\u30c8\uff08\u3064\u307e\u308a\u30d5\u30a9\u30fc\u30e0\u306e\u9001\u4fe1\uff09\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u3044\u307e\u3059\uff0e\u5024\u306b\u306f\u6587\u5b57\u5217\uff0craw\u30d9\u30af\u30c8\u30eb\uff08\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306e\u5834\u5408\uff09\uff0c\u30d5\u30a1\u30a4\u30eb\u306e\u3044\u305a\u308c\u304b\u304c\u6307\u5b9a\u3067\u304d\u307e\u3059\uff0e\n\n\n```r\n# \u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u306e\u9001\u4fe1\nh <- new_handle()\nhandle_setform(h,\n  foo = \"blabla\",\n  bar = charToRaw(\"boeboe\"),\n  description = form_file(system.file(\"DESCRIPTION\")),\n  logo = form_file(file.path(Sys.getenv(\"R_DOC_DIR\"), \"html/logo.jpg\"), \"image/jpeg\")\n)\nreq <- curl_fetch_memory(\"http://httpbin.org/post\", handle = h)\n```\n\n<!-- The `form_file` function is used to upload files with the form post. It has two arguments: a file path, and optionally a content-type value. If no content-type is set, curl will guess the content type of the file based on the file extention. -->\n\n`form_file()` \u95a2\u6570\u306f\u30d5\u30a9\u30fc\u30e0\u9001\u4fe1\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306b\u4f7f\u3044\u307e\u3059\uff0e\u3053\u306e\u95a2\u6570\u306b\u306f2\u3064\u306e\u5f15\u6570\u304c\u3042\u308a\u307e\u3059\uff0e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3068\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u6307\u5b9a\u3067\u304d\u308b content-type \u306e\u5024\u3067\u3059\uff0e content-type \u304c\u4f55\u3082\u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\uff0c curl \u306f content-type \u3092\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u304b\u3089\u63a8\u6e2c\u3057\u307e\u3059\uff0e\n\n<!-- ### Using pipes -->\n\n### \u30d1\u30a4\u30d7\u306e\u4f7f\u7528\n\n<!-- All of the `handle_xxx` functions return the handle object so that function calls can be chained using the popular pipe operators: -->\n\n`handle_xxx()` \u7cfb\u95a2\u6570\u306f\u3069\u308c\u3082\u30cf\u30f3\u30c9\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u306e\u3067\uff0c\u4eba\u6c17\u306e\u30d1\u30a4\u30d7\u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u9023\u9396\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\n```r\nlibrary(magrittr)\n\nnew_handle() %>% \n  handle_setopt(copypostfields = \"moo=moomooo\") %>% \n  handle_setheaders(\"Content-Type\" = \"text/moo\", \"Cache-Control\" = \"no-cache\", \"User-Agent\" = \"A cow\") %>%\n  curl_fetch_memory(url = \"http://httpbin.org/post\") %$% content %>% rawToChar %>% cat\n```\n\n```\n{\n  \"args\": {}, \n  \"data\": \"moo=moomooo\", \n  \"files\": {}, \n  \"form\": {}, \n  \"headers\": {\n    \"Accept\": \"*/*\", \n    \"Accept-Encoding\": \"gzip, deflate\", \n    \"Cache-Control\": \"no-cache\", \n    \"Content-Length\": \"11\", \n    \"Content-Type\": \"text/moo\", \n    \"Host\": \"httpbin.org\", \n    \"User-Agent\": \"A cow\"\n  }, \n  \"json\": null, \n  \"origin\": \"106.161.101.127\", \n  \"url\": \"http://httpbin.org/post\"\n}\n```\n\n\n----\n\n\u8a33\u6ce8\uff1a\u7ffb\u8a33\u306e\u969b\uff0c\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u5b9f\u884c\u3057\u305f\uff0e\n\n```r\ndevtools::session_info()\n```\n\n```\nSession info --------------------------------------------------------------\n setting  value                       \n version  R version 3.3.1 (2016-06-21)\n system   x86_64, mingw32             \n ui       RTerm                       \n language (EN)                        \n collate  Japanese_Japan.932          \n tz       Asia/Tokyo                  \n date     2016-10-15                  \nPackages ------------------------------------------------------------------\n package       * version  date       source                            \n assertthat      0.1      2013-12-06 CRAN (R 3.3.1)                    \n curl          * 2.1      2016-09-22 CRAN (R 3.3.1)                    \n devtools        1.12.0   2016-06-24 CRAN (R 3.3.1)                    \n digest          0.6.10   2016-08-02 CRAN (R 3.3.1)                    \n evaluate        0.9      2016-04-29 CRAN (R 3.3.1)                    \n formatR         1.4      2016-05-09 CRAN (R 3.3.1)                    \n htmltools       0.3.5    2016-03-21 CRAN (R 3.3.1)                    \n knitr           1.14     2016-08-13 CRAN (R 3.3.1)                    \n magrittr      * 1.5      2014-11-22 CRAN (R 3.3.1)                    \n memoise         1.0.0    2016-01-29 CRAN (R 3.3.1)                    \n Rcpp            0.12.6   2016-07-19 CRAN (R 3.3.1)                    \n RevoUtils       10.0.1   2016-08-24 local                             \n RevoUtilsMath * 8.0.3    2016-04-13 local                             \n rmarkdown       1.0.9016 2016-10-13 Github (rstudio/rmarkdown@2158b9d)\n stringi         1.1.1    2016-05-27 CRAN (R 3.3.0)                    \n stringr         1.1.0    2016-08-19 CRAN (R 3.3.1)                    \n tibble          1.2      2016-08-26 CRAN (R 3.3.1)                    \n withr           1.0.2    2016-06-20 CRAN (R 3.3.1)                    \n yaml            2.1.13   2014-06-12 CRAN (R 3.3.1)                    \n```\n", "tags": ["R", "curl", "web_scraping"]}