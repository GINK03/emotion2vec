{"context": "\n\n\u6982\u8981\nBehaviorDesigner\u306e\u3088\u3046\u306aEditor\u62e1\u5f35\u306eAI\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\ngithub\u306e\u30ea\u30f3\u30af\u5148\u306f\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002Unity\u3061\u3083\u3093\u3084\u3089\u3001Standard Assets\u306eCharacters\u3084\u3089\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3061\u3087\u3063\u3068\u5bb9\u91cf\u304c\u5927\u304d\u3044\u304b\u3082\u3002\n(\u8ffd\u8a18)\nUnity\u3067\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f\u3001BehaviourTrees\u30d5\u30a9\u30eb\u30c0\u306e\u4e0a\u306e\u968e\u5c64\u306e\u30d5\u30a9\u30eb\u30c0\u540d\u3092Assets\u306b\u5909\u66f4\u3057\u3066\u3001\u76f4\u4e0b\u306b\u3042\u308bmain.unity\u3092\u518d\u751f\u3057\u3066\u4e0b\u3055\u3044\u3002\nBehaviourTree Editor\n\u81ea\u5206\u306e\u904e\u53bb\u8a18\u4e8b\u3067\u3001Behaviour Tree\u306eUniRx\u306b\u3088\u308b\u5b9f\u88c5\u3068\u3001Unity\u3067\u30ce\u30fc\u30c9\u30d9\u30fc\u30b9\u306a\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u7c21\u5358\u306b\u4f5c\u308b\u70ba\u306e\u300cSimple node editor\u300d\u306e\u7d39\u4ecb\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3053\u306e2\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5b9f\u88c5\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u66f8\u304d\u307e\u3059\u3002\n\n\u5b9f\u73fe\u3059\u308bBehaviourTree\n\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306aBehaviourTreeAI\u3092\u4f5c\u308a\u307e\u3059\u30022\u4eba\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u3044\u308b\u3068\u3057\u3066\u4ee5\u4e0b\u306e4\u3064\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u7e70\u308a\u66ff\u3048\u3057\u884c\u3046\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\nHP\u304c2\u3088\u308a\u5927\u304d\u3051\u308c\u3070\u6575\u306b\u5411\u304b\u3063\u3066\u9032\u3080\n\u6575\u3068\u306e\u8ddd\u96e2\u304c\u8fd1\u3051\u308c\u3070\u653b\u6483\u3059\u308b\nHP\u304c2\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u3089\u5b9a\u4f4d\u7f6e\u306b\u623b\u308b\u3002\n\u56de\u5fa9\u3059\u308b\n\n\n\nBehaviour Tree\u5b9f\u884c\u90e8\u5206\u306e\u4f5c\u6210\nBehaviour Tree\u306eUniRx\u306b\u3088\u308b\u5b9f\u88c5\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u300cSimple node editor\u300d\u3067BehaviourTree Editor\u3092\u4f5c\u308b\u3002\n\nBehaviourTree\u30ce\u30fc\u30c9\u30af\u30e9\u30b9\u3092\u4f5c\u308b\nSimple Node Editor\u306f\u30ce\u30fc\u30c9\u30a8\u30c7\u30a3\u30bf\u3092\u4f5c\u308b\u70ba\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002Node\u30af\u30e9\u30b9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066BehaviourTree\u30ce\u30fc\u30c9\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3060\u3051\u3060\u3068\u8db3\u308a\u306a\u3044\u6a5f\u80fd\u304c\u3042\u3063\u3066\u3001BehaviourTree\u30ce\u30fc\u30c9\u306b\u5fc5\u8981\u306aAction\u30ce\u30fc\u30c9\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u3001Behaviour Tree\u5b9f\u884c\u6642\u306b\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3055\u305b\u308b\u4e8b\u304c\u51fa\u6765\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u3084\u308a\u65b9\u3068\u3057\u3066\u306f\u3001\u4e0b\u8a18\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u3001\u6307\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u306epublic\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u53d6\u5f97\u3057\u3066NodeEditor\u306b\u8868\u793a\u3057\u3066\u9078\u629e\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3001\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u306f\u6307\u5b9a\u306eGameObject\u306b\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306edelegate\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u3092\u6e21\u3057\u3066\u5b9f\u884c\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\nBTreeUtil.cs\n/// <summary>\n/// \u6307\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u306e\u5168\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u53d6\u5f97\u3002\n/// </summary>\n/// <returns>The methods.</returns>\n/// <typeparam name=\"T\">The 1st type parameter.</typeparam>\npublic static string[] GetMethods<T>(){\n//T\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u5168\u3066\u53d6\u5f97\n        var clacces = Assembly.GetAssembly(typeof(T)).GetTypes().Where(t => t.IsSubclassOf(typeof(T)));\n        return clacces\n            .SelectMany(c=>c.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))\n            .Select(p=>p.Name).ToArray();\n    }\n\n\n\n\nBTreeUtil.cs\n    /// <summary>\n    /// \u6307\u5b9a\u306eGameObject\u306e\u6307\u5b9a\u306e\u30e1\u30bd\u30c3\u30c9\u306eDelegate\u3092\u53d6\u5f97\n    /// </summary>\n    /// <returns>The action.</returns>\n    /// <param name=\"go\">Go.</param>\n    /// <param name=\"type\">Type.</param>\n    /// <param name=\"methodName\">Method name.</param>\n    /// <typeparam name=\"T\">The 1st type parameter.</typeparam>\n    public static Action<T> GetAction<T>(GameObject go, Type type, string methodName){\n        var clacces = Assembly.GetAssembly(type).GetTypes().Where(t => t.IsSubclassOf(type));\n        var query = clacces\n            .SelectMany(c=>c.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly));\n\n        Component comp = null;\n        foreach(var c in clacces){\n            ///Public\u30e1\u30bd\u30c3\u30c9\u3092\u53d6\u5f97(\u7d99\u627f\u3055\u308c\u305f\u30e1\u30f3\u30d0\u306f\u542b\u307e\u306a\u3044)\n            foreach (var m in c.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))\n            {\n                if(m.Name == methodName){\n                    comp =  go.GetComponent(c.Name);\n                }\n            }\n        }\n        var mquery = query.Where(p=>p.Name == methodName);\n        var minfo = mquery.FirstOrDefault();\n        var result =  (Action<T>)Delegate.CreateDelegate(typeof(Action<T>),comp,minfo);\n        return result;\n    }\n\n\nNode\u30af\u30e9\u30b9\u3092\u3069\u3046\u62e1\u5f35\u3057\u3066\u3054\u306b\u3087\u3054\u306b\u3087\u3057\u3066\u308b\u304b\u306f\u3001\u672c\u8a18\u4e8b\u306eTOP\u306e\u30ea\u30f3\u30af\u5148\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nAssets/Node_Editor/Nodes/BehaviourTree/uActionNode.cs\n\u305d\u3093\u306a\u3053\u3093\u306a\u3067\u51fa\u6765\u305fBehaviourTree\u306eNodeEditor\u3067\u69cb\u7bc9\u3057\u305fAI\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u301c\u3002\n\n\nEditor\u3067\u4f5c\u6210\u3057\u305fAI\u3092\u5b9f\u884c\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\nTOP\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u306eAssets/Scripts/BTreeManager.cs\u304c\u305d\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u4e2d\u8eab\u3092\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6d41\u308c\u3067AI\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n1. NodeEditor\u3067\u4f5c\u6210\u3057\u305fScriptableObject\u3092\u30ed\u30fc\u30c9\n2. \u518d\u5e30\u7684\u306bNodeTree\u3092\u69cb\u7bc9\u3002\n3. ActionNode\u3068DicoratorNode\u306bDelegate\u3092\u767b\u9332\n4. NodeTree\u3092\u7e70\u308a\u66ff\u3048\u3057\u5b9f\u884c\n\nBTreeManager.cs\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing NodeEditorFramework;\nusing NodeEditorFramework.Utilities;\nusing System.Linq;\nusing BehaviourTrees;\nusing System;\nusing UniRx;\n\n/// <summary>\n/// NodeEditor\u3067\u4f5c\u6210\u3057\u305fScriptableObject\u304b\u3089BehaviourTree\u3092\u69cb\u7bc9\u3057\u3001\u5b9f\u884c\u3059\u308b\n/// </summary>\npublic class BTreeManager : MonoBehaviour {\n\n    [SerializeField, FilePath]\n    string filePath;\n\n    BehaviourTreeInstance node;\n\n    RuntimeNodeEditor runtimeNodeEditor;\n\n    Action m_task;\n\n    uBehaviourTreeNode m_topNode;\n    BehaviourTreeBase   m_bTreeBase;\n\n\n    void Awake(){\n        runtimeNodeEditor = GetComponent<RuntimeNodeEditor>();\n        if(runtimeNodeEditor!=null){\n            runtimeNodeEditor.canvasPath = filePath.Replace (Application.dataPath, \"Assets\");\n        }\n    }\n\n    // Use this for initialization\n    void Start () {\n        m_task = ChangeColorTask;\n        var path = filePath.Replace (Application.dataPath, \"Assets\");\n        // Load the NodeCanvas\n        var canvas = NodeEditorSaveManager.LoadNodeCanvas (path);\n        var startNode = FindStartNode(canvas);\n        if(startNode==null || startNode.Outputs[0].connections==null){\n            return;\n        }\n        m_topNode= startNode.Outputs[0].connections[0].body as uBehaviourTreeNode;\n        CreateNodes(m_topNode);\n    }\n\n\n    void Update(){\n        if(m_task!=null){\n            m_task();\n        }\n    }\n\n\n    /// <summary>\n    /// Creates the nodes.\n    /// </summary>\n    /// <param name=\"topNode\">Top node.</param>\n    void CreateNodes(uBehaviourTreeNode topNode){\n        m_bTreeBase = CreateBehaviourTreeBase(topNode);\n        node = new BehaviourTreeInstance(m_bTreeBase);\n        node.finishRP.Where(p=>p!=BehaviourTreeInstance.NodeState.READY).Subscribe(p=>ResetCoroutineStart());\n        node.finishRP.Value = BehaviourTreeInstance.NodeState.READY;\n        node.Excute();\n    }\n\n\n    /// <summary>\n    /// Changes the color task.\n    /// </summary>\n    void ChangeColorTask(){\n        if(runtimeNodeEditor!=null && runtimeNodeEditor.canvas!=null){\n            foreach(var one in runtimeNodeEditor.canvas.nodes){\n                var bnode = one as uBehaviourTreeNode;\n                if(bnode!=null){\n                    //Debug.Log(\"Excute Node = \"+node.nowExcuteUuid);\n                    if(bnode.Uuid == node.nowExcuteUuid){\n                        bnode.setColorFlag = true;\n                    }\n                    else {\n                        bnode.setColorFlag = false;\n                    }\n                }\n            }\n        }\n    }\n\n    /// <summary>\n    /// \u958b\u59cb\u30ce\u30fc\u30c9\u3092\u691c\u7d22\u3059\u308b\u3002\n    /// </summary>\n    /// <returns>The start node.</returns>\n    /// <param name=\"canvas\">Canvas.</param>\n    Node FindStartNode(NodeCanvas canvas){\n        return canvas.nodes.Where(p=>p.GetType() == typeof(uStartNode)).FirstOrDefault();\n    }\n\n    /// <summary>\n    /// BehaviourTree\u3092\u69cb\u7bc9\u3059\u308b\u3002\n    /// </summary>\n    /// <returns>The behaviour tree base.</returns>\n    /// <param name=\"node\">Node.</param>\n    BehaviourTreeBase CreateBehaviourTreeBase(uBehaviourTreeNode bnode){\n        var type = Type.GetType(\"BehaviourTrees.\"+ bnode.nodeType.ToString());\n        var ins =  Activator.CreateInstance(type) as BehaviourTreeBase;\n\n        switch (bnode.nodeType) {\n        case uBehaviourTreeNode.NodeType.ActionNode:\n            {\n                var nodeIns = ins as ActionNode;\n                nodeIns.Initialize(BTreeUtil.GetAction<ReactiveProperty<bool>>(gameObject, typeof(BTreeActionBase),bnode.MethodName),bnode.Uuid);\n            }\n            break;\n        case uBehaviourTreeNode.NodeType.DecoratorNode:\n            {\n                var nodeIns = ins as DecoratorNode;\n                var actionNode = bnode.Outputs[0].connections[0].body as uBehaviourTreeNode;\n                var bbase = CreateBehaviourTreeBase(actionNode);\n                var func = BTreeUtil.GetFunc<BehaviourTreeInstance,ExecutionResult>(gameObject, typeof(BTreeDecoratorFuncBase),bnode.MethodName);\n                nodeIns.Initialize(func, bbase,bnode.Uuid);\n            }\n            break;\n\n        case uBehaviourTreeNode.NodeType.SelectorNode:\n            {\n                var nodeIns = ins as SelectorNode;\n                var list = new List<BehaviourTreeBase>();\n                foreach(var one in bnode.Outputs){\n                    if(one.connections.Count==0) continue;\n                    var childnode = CreateBehaviourTreeBase(one.connections[0].body  as uBehaviourTreeNode);\n                    list.Add(childnode);\n                }\n                nodeIns.Initialize(list.ToArray(),bnode.Uuid);\n                list.Clear();\n            }\n            break;\n        case uBehaviourTreeNode.NodeType.SequencerNode:\n            {\n                var nodeIns = ins as SequencerNode;\n                var list = new List<BehaviourTreeBase>();\n                foreach(var one in bnode.Outputs){\n                    if(one.connections.Count==0) continue;\n                    var childnode = CreateBehaviourTreeBase(one.connections[0].body as uBehaviourTreeNode);\n                    list.Add(childnode);\n                }\n                nodeIns.Initialize(list.ToArray(),bnode.Uuid);\n                list.Clear();\n            }\n            break;\n        }\n\n        return ins;\n    }\n\n\n    /// <summary>\n    /// Resets the coroutine start.\n    /// </summary>\n    void ResetCoroutineStart(){\n        StartCoroutine(ResetCoroutine());\n    }\n\n\n    IEnumerator ResetCoroutine(){\n        yield return null;\n        node.Delete();\n        CreateNodes(m_topNode);\n    }\n}\n\n\n\n\u5b9f\u884c\u306e\u69d8\u5b50\nUnity\u3061\u3083\u3093\u304c\u4e8c\u4eba\u3044\u3066\u3001\u53cc\u65b9\u3068\u3082\u4e0a\u8a18\u306eBTreeManager\u304c\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u3066\u304a\u308a\u3001\u53cc\u65b9\u540c\u3058AI\u3067\u52d5\u3044\u3066\u3044\u307e\u3059\u3002\n\u753b\u9762\u5185\u306eBehaviourTree\u306f\u9752\u3044Player1\u306eUnity\u3061\u3083\u3093\u306eAI\u3068\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u767d\u304f\u30cf\u30a4\u30e9\u30a4\u30c8\u3057\u3066\u3044\u308b\u30ce\u30fc\u30c9\u304c\u3001\u4eca\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u30ce\u30fc\u30c9\u3067\u3059\u3002\n\n\n\u307e\u3068\u3081\n\u300cSimple node editor\u300d\u3092\u4f7f\u3063\u3066\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u81ea\u524d\u306eAI\u30b7\u30b9\u30c6\u30e0\u304c\u69cb\u7bc9\u3067\u304d\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306e\u4f8b\u3067\u306fBehaviourTree\u3067\u3057\u305f\u304c\u3001StateMachine\u3082\u3084\u308d\u3046\u3068\u601d\u3048\u3070\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n#\u6982\u8981\nBehaviorDesigner\u306e\u3088\u3046\u306aEditor\u62e1\u5f35\u306eAI\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\ngithub\u306e\u30ea\u30f3\u30af\u5148\u306f\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002Unity\u3061\u3083\u3093\u3084\u3089\u3001Standard Assets\u306eCharacters\u3084\u3089\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3061\u3087\u3063\u3068\u5bb9\u91cf\u304c\u5927\u304d\u3044\u304b\u3082\u3002\n\n(\u8ffd\u8a18)\nUnity\u3067\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f\u3001BehaviourTrees\u30d5\u30a9\u30eb\u30c0\u306e\u4e0a\u306e\u968e\u5c64\u306e\u30d5\u30a9\u30eb\u30c0\u540d\u3092Assets\u306b\u5909\u66f4\u3057\u3066\u3001\u76f4\u4e0b\u306b\u3042\u308bmain.unity\u3092\u518d\u751f\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n[BehaviourTree Editor](https://github.com/unagiHuman/Node_Editor/tree/BehaviourTree)\n\n\u81ea\u5206\u306e\u904e\u53bb\u8a18\u4e8b\u3067\u3001[Behaviour Tree\u306eUniRx\u306b\u3088\u308b\u5b9f\u88c5](http://qiita.com/UnagiHuman/items/7281b00c9ae00e558929)\u3068\u3001[Unity\u3067\u30ce\u30fc\u30c9\u30d9\u30fc\u30b9\u306a\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u7c21\u5358\u306b\u4f5c\u308b\u70ba\u306e\u300cSimple node editor\u300d\u306e\u7d39\u4ecb](http://qiita.com/UnagiHuman/items/ec5a8bbeea03ed21a429)\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3053\u306e2\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5b9f\u88c5\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u66f8\u304d\u307e\u3059\u3002\n\n#\u5b9f\u73fe\u3059\u308bBehaviourTree\n\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306aBehaviourTreeAI\u3092\u4f5c\u308a\u307e\u3059\u30022\u4eba\u306e\u30d7\u30ec\u30a4\u30e4\u30fc\u304c\u3044\u308b\u3068\u3057\u3066\u4ee5\u4e0b\u306e4\u3064\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u7e70\u308a\u66ff\u3048\u3057\u884c\u3046\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\n1. HP\u304c2\u3088\u308a\u5927\u304d\u3051\u308c\u3070\u6575\u306b\u5411\u304b\u3063\u3066\u9032\u3080\n2. \u6575\u3068\u306e\u8ddd\u96e2\u304c\u8fd1\u3051\u308c\u3070\u653b\u6483\u3059\u308b\n3. HP\u304c2\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u3089\u5b9a\u4f4d\u7f6e\u306b\u623b\u308b\u3002\n4. \u56de\u5fa9\u3059\u308b\n\n![BehaviourTreeUML.png](https://qiita-image-store.s3.amazonaws.com/0/116884/4ba41524-6e46-56a9-8576-c2a2cf3df2d3.png)\n\n#Behaviour Tree\u5b9f\u884c\u90e8\u5206\u306e\u4f5c\u6210\n[Behaviour Tree\u306eUniRx\u306b\u3088\u308b\u5b9f\u88c5](http://qiita.com/UnagiHuman/items/7281b00c9ae00e558929)\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n#\u300cSimple node editor\u300d\u3067BehaviourTree Editor\u3092\u4f5c\u308b\u3002\n## BehaviourTree\u30ce\u30fc\u30c9\u30af\u30e9\u30b9\u3092\u4f5c\u308b\n\n[Simple Node Editor](https://github.com/Baste-RainGames/Node_Editor)\u306f\u30ce\u30fc\u30c9\u30a8\u30c7\u30a3\u30bf\u3092\u4f5c\u308b\u70ba\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002Node\u30af\u30e9\u30b9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066BehaviourTree\u30ce\u30fc\u30c9\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3060\u3051\u3060\u3068\u8db3\u308a\u306a\u3044\u6a5f\u80fd\u304c\u3042\u3063\u3066\u3001BehaviourTree\u30ce\u30fc\u30c9\u306b\u5fc5\u8981\u306aAction\u30ce\u30fc\u30c9\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u8a2d\u5b9a\u3057\u3066\u3001Behaviour Tree\u5b9f\u884c\u6642\u306b\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3055\u305b\u308b\u4e8b\u304c\u51fa\u6765\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\u3084\u308a\u65b9\u3068\u3057\u3066\u306f\u3001\u4e0b\u8a18\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u3001\u6307\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u306epublic\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u53d6\u5f97\u3057\u3066NodeEditor\u306b\u8868\u793a\u3057\u3066\u9078\u629e\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3001\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u306f\u6307\u5b9a\u306eGameObject\u306b\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306edelegate\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u3092\u6e21\u3057\u3066\u5b9f\u884c\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\n```BTreeUtil.cs\n/// <summary>\n/// \u6307\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u306e\u5168\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u53d6\u5f97\u3002\n/// </summary>\n/// <returns>The methods.</returns>\n/// <typeparam name=\"T\">The 1st type parameter.</typeparam>\npublic static string[] GetMethods<T>(){\n//T\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u5168\u3066\u53d6\u5f97\n\t\tvar clacces = Assembly.GetAssembly(typeof(T)).GetTypes().Where(t => t.IsSubclassOf(typeof(T)));\n\t\treturn clacces\n\t\t\t.SelectMany(c=>c.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))\n\t\t\t.Select(p=>p.Name).ToArray();\n\t}\n\n```\n\n```BTreeUtil.cs\n\t/// <summary>\n\t/// \u6307\u5b9a\u306eGameObject\u306e\u6307\u5b9a\u306e\u30e1\u30bd\u30c3\u30c9\u306eDelegate\u3092\u53d6\u5f97\n\t/// </summary>\n\t/// <returns>The action.</returns>\n\t/// <param name=\"go\">Go.</param>\n\t/// <param name=\"type\">Type.</param>\n\t/// <param name=\"methodName\">Method name.</param>\n\t/// <typeparam name=\"T\">The 1st type parameter.</typeparam>\n\tpublic static Action<T> GetAction<T>(GameObject go, Type type, string methodName){\n\t\tvar clacces = Assembly.GetAssembly(type).GetTypes().Where(t => t.IsSubclassOf(type));\n\t\tvar query = clacces\n\t\t\t.SelectMany(c=>c.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly));\n\n\t\tComponent comp = null;\n\t\tforeach(var c in clacces){\n\t\t\t///Public\u30e1\u30bd\u30c3\u30c9\u3092\u53d6\u5f97(\u7d99\u627f\u3055\u308c\u305f\u30e1\u30f3\u30d0\u306f\u542b\u307e\u306a\u3044)\n\t\t\tforeach (var m in c.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly))\n\t\t\t{\n\t\t\t\tif(m.Name == methodName){\n\t\t\t\t\tcomp =  go.GetComponent(c.Name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar mquery = query.Where(p=>p.Name == methodName);\n\t\tvar minfo = mquery.FirstOrDefault();\n\t\tvar result =  (Action<T>)Delegate.CreateDelegate(typeof(Action<T>),comp,minfo);\n\t\treturn result;\n\t}\n```\n\nNode\u30af\u30e9\u30b9\u3092\u3069\u3046\u62e1\u5f35\u3057\u3066\u3054\u306b\u3087\u3054\u306b\u3087\u3057\u3066\u308b\u304b\u306f\u3001\u672c\u8a18\u4e8b\u306eTOP\u306e\u30ea\u30f3\u30af\u5148\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nAssets/Node_Editor/Nodes/BehaviourTree/uActionNode.cs\n\n\u305d\u3093\u306a\u3053\u3093\u306a\u3067\u51fa\u6765\u305fBehaviourTree\u306eNodeEditor\u3067\u69cb\u7bc9\u3057\u305fAI\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u301c\u3002\n\n<img width=\"1275\" alt=\"BehaviourTreeNode.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/116884/f13cff04-07cf-a586-0e90-ccd76c8b0ed6.png\">\n\n# Editor\u3067\u4f5c\u6210\u3057\u305fAI\u3092\u5b9f\u884c\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\n\nTOP\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u306eAssets/Scripts/BTreeManager.cs\u304c\u305d\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u4e2d\u8eab\u3092\u3056\u3063\u304f\u308a\u8aac\u660e\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6d41\u308c\u3067AI\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n1. NodeEditor\u3067\u4f5c\u6210\u3057\u305fScriptableObject\u3092\u30ed\u30fc\u30c9\n2. \u518d\u5e30\u7684\u306bNodeTree\u3092\u69cb\u7bc9\u3002\n3. ActionNode\u3068DicoratorNode\u306bDelegate\u3092\u767b\u9332\n4. NodeTree\u3092\u7e70\u308a\u66ff\u3048\u3057\u5b9f\u884c\n\n```BTreeManager.cs\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing NodeEditorFramework;\nusing NodeEditorFramework.Utilities;\nusing System.Linq;\nusing BehaviourTrees;\nusing System;\nusing UniRx;\n\n/// <summary>\n/// NodeEditor\u3067\u4f5c\u6210\u3057\u305fScriptableObject\u304b\u3089BehaviourTree\u3092\u69cb\u7bc9\u3057\u3001\u5b9f\u884c\u3059\u308b\n/// </summary>\npublic class BTreeManager : MonoBehaviour {\n\n\t[SerializeField, FilePath]\n\tstring filePath;\n\n\tBehaviourTreeInstance node;\n\n\tRuntimeNodeEditor runtimeNodeEditor;\n\n\tAction m_task;\n\n\tuBehaviourTreeNode m_topNode;\n\tBehaviourTreeBase\tm_bTreeBase;\n\n\n\tvoid Awake(){\n\t\truntimeNodeEditor = GetComponent<RuntimeNodeEditor>();\n\t\tif(runtimeNodeEditor!=null){\n\t\t\truntimeNodeEditor.canvasPath = filePath.Replace (Application.dataPath, \"Assets\");\n\t\t}\n\t}\n\n\t// Use this for initialization\n\tvoid Start () {\n\t\tm_task = ChangeColorTask;\n\t\tvar path = filePath.Replace (Application.dataPath, \"Assets\");\n\t\t// Load the NodeCanvas\n\t\tvar canvas = NodeEditorSaveManager.LoadNodeCanvas (path);\n\t\tvar startNode = FindStartNode(canvas);\n\t\tif(startNode==null || startNode.Outputs[0].connections==null){\n\t\t\treturn;\n\t\t}\n\t\tm_topNode= startNode.Outputs[0].connections[0].body as uBehaviourTreeNode;\n\t\tCreateNodes(m_topNode);\n\t}\n\n\n\tvoid Update(){\n\t\tif(m_task!=null){\n\t\t\tm_task();\n\t\t}\n\t}\n\n\n\t/// <summary>\n\t/// Creates the nodes.\n\t/// </summary>\n\t/// <param name=\"topNode\">Top node.</param>\n\tvoid CreateNodes(uBehaviourTreeNode topNode){\n\t\tm_bTreeBase = CreateBehaviourTreeBase(topNode);\n\t\tnode = new BehaviourTreeInstance(m_bTreeBase);\n\t\tnode.finishRP.Where(p=>p!=BehaviourTreeInstance.NodeState.READY).Subscribe(p=>ResetCoroutineStart());\n\t\tnode.finishRP.Value = BehaviourTreeInstance.NodeState.READY;\n\t\tnode.Excute();\n\t}\n\n\n\t/// <summary>\n\t/// Changes the color task.\n\t/// </summary>\n\tvoid ChangeColorTask(){\n\t\tif(runtimeNodeEditor!=null && runtimeNodeEditor.canvas!=null){\n\t\t\tforeach(var one in runtimeNodeEditor.canvas.nodes){\n\t\t\t\tvar bnode = one as uBehaviourTreeNode;\n\t\t\t\tif(bnode!=null){\n\t\t\t\t\t//Debug.Log(\"Excute Node = \"+node.nowExcuteUuid);\n\t\t\t\t\tif(bnode.Uuid == node.nowExcuteUuid){\n\t\t\t\t\t\tbnode.setColorFlag = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tbnode.setColorFlag = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/// <summary>\n\t/// \u958b\u59cb\u30ce\u30fc\u30c9\u3092\u691c\u7d22\u3059\u308b\u3002\n\t/// </summary>\n\t/// <returns>The start node.</returns>\n\t/// <param name=\"canvas\">Canvas.</param>\n\tNode FindStartNode(NodeCanvas canvas){\n\t\treturn canvas.nodes.Where(p=>p.GetType() == typeof(uStartNode)).FirstOrDefault();\n\t}\n\n\t/// <summary>\n\t/// BehaviourTree\u3092\u69cb\u7bc9\u3059\u308b\u3002\n\t/// </summary>\n\t/// <returns>The behaviour tree base.</returns>\n\t/// <param name=\"node\">Node.</param>\n\tBehaviourTreeBase CreateBehaviourTreeBase(uBehaviourTreeNode bnode){\n\t\tvar type = Type.GetType(\"BehaviourTrees.\"+ bnode.nodeType.ToString());\n\t\tvar ins =  Activator.CreateInstance(type) as BehaviourTreeBase;\n\n\t\tswitch (bnode.nodeType) {\n\t\tcase uBehaviourTreeNode.NodeType.ActionNode:\n\t\t\t{\n\t\t\t\tvar nodeIns = ins as ActionNode;\n\t\t\t\tnodeIns.Initialize(BTreeUtil.GetAction<ReactiveProperty<bool>>(gameObject, typeof(BTreeActionBase),bnode.MethodName),bnode.Uuid);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase uBehaviourTreeNode.NodeType.DecoratorNode:\n\t\t\t{\n\t\t\t\tvar nodeIns = ins as DecoratorNode;\n\t\t\t\tvar actionNode = bnode.Outputs[0].connections[0].body as uBehaviourTreeNode;\n\t\t\t\tvar bbase = CreateBehaviourTreeBase(actionNode);\n\t\t\t\tvar func = BTreeUtil.GetFunc<BehaviourTreeInstance,ExecutionResult>(gameObject, typeof(BTreeDecoratorFuncBase),bnode.MethodName);\n\t\t\t\tnodeIns.Initialize(func, bbase,bnode.Uuid);\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase uBehaviourTreeNode.NodeType.SelectorNode:\n\t\t\t{\n\t\t\t\tvar nodeIns = ins as SelectorNode;\n\t\t\t\tvar list = new List<BehaviourTreeBase>();\n\t\t\t\tforeach(var one in bnode.Outputs){\n\t\t\t\t\tif(one.connections.Count==0) continue;\n\t\t\t\t\tvar childnode = CreateBehaviourTreeBase(one.connections[0].body  as uBehaviourTreeNode);\n\t\t\t\t\tlist.Add(childnode);\n\t\t\t\t}\n\t\t\t\tnodeIns.Initialize(list.ToArray(),bnode.Uuid);\n\t\t\t\tlist.Clear();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase uBehaviourTreeNode.NodeType.SequencerNode:\n\t\t\t{\n\t\t\t\tvar nodeIns = ins as SequencerNode;\n\t\t\t\tvar list = new List<BehaviourTreeBase>();\n\t\t\t\tforeach(var one in bnode.Outputs){\n\t\t\t\t\tif(one.connections.Count==0) continue;\n\t\t\t\t\tvar childnode = CreateBehaviourTreeBase(one.connections[0].body as uBehaviourTreeNode);\n\t\t\t\t\tlist.Add(childnode);\n\t\t\t\t}\n\t\t\t\tnodeIns.Initialize(list.ToArray(),bnode.Uuid);\n\t\t\t\tlist.Clear();\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\treturn ins;\n\t}\n\n\n\t/// <summary>\n\t/// Resets the coroutine start.\n\t/// </summary>\n\tvoid ResetCoroutineStart(){\n\t\tStartCoroutine(ResetCoroutine());\n\t}\n\n\n\tIEnumerator ResetCoroutine(){\n\t\tyield return null;\n\t\tnode.Delete();\n\t\tCreateNodes(m_topNode);\n\t}\n}\n```\n\n# \u5b9f\u884c\u306e\u69d8\u5b50\nUnity\u3061\u3083\u3093\u304c\u4e8c\u4eba\u3044\u3066\u3001\u53cc\u65b9\u3068\u3082\u4e0a\u8a18\u306eBTreeManager\u304c\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u3066\u304a\u308a\u3001\u53cc\u65b9\u540c\u3058AI\u3067\u52d5\u3044\u3066\u3044\u307e\u3059\u3002\n\u753b\u9762\u5185\u306eBehaviourTree\u306f\u9752\u3044Player1\u306eUnity\u3061\u3083\u3093\u306eAI\u3068\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u767d\u304f\u30cf\u30a4\u30e9\u30a4\u30c8\u3057\u3066\u3044\u308b\u30ce\u30fc\u30c9\u304c\u3001\u4eca\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u30ce\u30fc\u30c9\u3067\u3059\u3002\n\n![BehaviourTree-compressor.gif](https://qiita-image-store.s3.amazonaws.com/0/116884/45f3e49c-2996-a8c1-855d-c1bd6c9594b5.gif)\n\n# \u307e\u3068\u3081\n\u300cSimple node editor\u300d\u3092\u4f7f\u3063\u3066\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u81ea\u524d\u306eAI\u30b7\u30b9\u30c6\u30e0\u304c\u69cb\u7bc9\u3067\u304d\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306e\u4f8b\u3067\u306fBehaviourTree\u3067\u3057\u305f\u304c\u3001StateMachine\u3082\u3084\u308d\u3046\u3068\u601d\u3048\u3070\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\n\n\n\n\n", "tags": ["Unity", "Unity3D", "AI", "Editor\u62e1\u5f35", "UniRx"]}