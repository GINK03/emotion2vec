{"context": "paiza\u3067Swift\u304c\u5c0e\u5165\u3055\u308c\u3066\u304b\u3089\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7684\u30b5\u30e0\u30b7\u30f3\u30b0\u3067Swift\u3092\u4f7f\u3046\u4eba\u3082\u3061\u3089\u307b\u3089\u51fa\u3066\u304d\u305f\u3088\u3046\u3067\u4eca\u307e\u3067\u306b\u3082Qiita\u306b\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\nSwift\u3067\u7af6\u30d7\u30ed\u5165\u9580\nSwift\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\n\u3067\u3059\u304c\u3053\u308c\u3060\u3051\u3060\u3068\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7551\u3067\u80b2\u3063\u3066\u6765\u305f\u3088\u3046\u306a\u4eba\u306b\u3068\u3063\u3066\u306f\u3044\u3061\u3044\u3061\u691c\u7d22\u3057\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u8a00\u8a9e\u4ed5\u69d8\u3068\u304b\u3082\u3042\u3063\u3066\u305d\u308c\u306b\u3088\u308b\u30bf\u30a4\u30e0\u30ed\u30b9\u304c\u6fc0\u3057\u3044\u306e\u3067\u3044\u3063\u305d\u306e\u3053\u3068\u7af6\u30d7\u30ed\u7528\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u3064\u304f\u3063\u3066\u3057\u307e\u304a\u3046\u3068\u3044\u3046\u308f\u3051\u3067\u4e0a\u8a18\u306e\u5148\u4eba\u306e\u30b3\u30fc\u30c9\u3082\u53c2\u8003\u306b\u3057\u3064\u3064\u4f5c\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3068\u3001\u305d\u306e\u524d\u306b\u3002\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3084\u308b\u306b\u306f\u3084\u306f\u308aSwift\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u6a19\u6e96\u5165\u529b\u3067\u30c6\u30b9\u30c8\u3059\u308b\u306e\u304c\u5fc5\u8981\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u50d5\u306e\u8a18\u4e8b\u3067\u3082\u7d39\u4ecb\u3057\u305fREPL\u3092\u7528\u3044\u308b\u306e\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u95a2\u3057\u3066\u306fSwift\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u30e2\u30fc\u30c9\u304c\u697d\u3057\u3044\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u3093\u3067\u3059\u304c\n$ swift file.swift\n\n\u3067\u51fa\u6765\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u6642\u3064\u304f\u308c\u308b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306f./file\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\uff08\u3064\u307e\u308a\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u306f\u30b3\u30fc\u30c9\u306e\u540d\u524d\u3068\u540c\u3058\u306b\u306a\u308b\uff09\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u65e9\u901f\u4f5c\u3063\u3066\u3044\u3053\u3046\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u307e\u305a\u306f\u306a\u306b\u3088\u308a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u3064\u304f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u306f\u66f8\u304d\u65b9\u304c\u5206\u304b\u308a\u6b21\u7b2c\u968f\u6642\u8ffd\u52a0\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n// Linux\u74b0\u5883\u7528\u306b\u7528\u610f\u3055\u308c\u3066\u308bCocoa\u3084UIKit\u7684\u306a\u3082\u306e\nimport Glibc\n// \u4ee5\u4e0bString\u3092\u62e1\u5f35\nextension String: CollectionType {\n    // \u57fa\u672c\u7684\u306a\u3068\u3053\u308d\u306fSim_progra\u3055\u3093\u306e\u3082\u306e\u3092\u8e0f\u8972\n    // \u52d5\u4f5c\u306a\u3069\u306f\u4e0a\u8a18\u30ea\u30f3\u30af\u306e\u8a18\u4e8b\u304b\u3089\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\n    func at(i: Int) -> String {\n        return String(self[self.startIndex.advancedBy(i)])\n    }\n    var length: Int {\n        return self.characters.count\n    }\n    func splitToArrayOfInt() -> [Int] {\n        return self.characters.flatMap({Int(String($0))})\n    }\n    // \u3053\u3063\u304b\u3089\u30aa\u30ec\u30aa\u30ec\n    // \u3088\u304f\u4f7f\u3046\u3068\u601d\u3046\u306e\u3067\u3044\u3061\u3044\u3061characters\u3068\u66f8\u304f\u624b\u9593\u3092\u7701\u304f\n    var indices: Range<String.CharacterView.Index> {\n        return self.characters.indices\n    }\n    // stringByReplacingOccurrencesOfString\u304cpaiza\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u306a\u3044\u3068\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u81ea\u5206\u3067\u7528\u610f\uff08\u7c21\u6613\u7248\uff09\n    //func stringByReplacingOccurrencesOfString(replaceText: String, withString: String) {\n    //    return self.split(replaceText).joinWithSeparator(withString)\n    //}\n}\n// \u6570\u5b57\u3068\u6587\u5b57\u3068\u304b\u6df7\u3056\u3063\u3066\u3044\u308b\u6642\u7528\nfunc readElements() -> [String] {\n    return readLine()!.split(\" \")\n}\n// \u6570\u5b57\u306e\u307f\u306e\u3068\u304d\nfunc readInts() -> [Int] {\n    return readElements().map({Int($0)!})\n}\n// \u7a7a\u767d\u4ee5\u5916\u3067\u53e5\u5207\u3089\u308c\u3066\u3044\u308b\u6642\u7528\nfunc readElementsWithOption(k: String) -> [String] {\n    return readLine()!.split(k)\n}\nfunc readIntsWithOption(k: String) -> [Int] {\n    return readElementsWithOption(k).map({Int($0)!})\n}\n// y_mazun\u3055\u3093\u306e\u8a18\u4e8b\u3088\u308a\u3002\u304a\u305d\u3089\u304f\u500b\u6570\u3082\u3046\u3061\u3087\u3044\u5fc5\u8981\u304b\u3068\u601d\u3046\u306e\u3067\u9069\u5b9c\u5897\u3084\u3059\u306e\u304c\u3044\u3044\u304b\u3082\nprefix operator * {}\nprefix func * <T> (a: [T]) -> (T, T) { return (a[0], a[1]) }\nprefix func * <T> (a: [T]) -> (T, T, T) { return (a[0], a[1], a[2]) }\n// \u307e\u305aprotocol\nprotocol Container {\n    typealias ItemType\n    mutating func append(item: ItemType)\n    var count: Int { get } // { get }\u306fgetter\u51e6\u7406\u306e\u5b9f\u88c5\u3092\u5fc5\u9808\u3068\u3059\u308b\n    subscript(i: Int) -> ItemType { get }\n}\n// Stack\u3068Queue\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\nstruct Stack<Element>: Container {\n    var items = [Element]()\n    mutating func push(item: Element) {\n        item.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeLast()\n    }\n    mutating func append(item: Element) {\n        self.push(item)\n    }\n    var count: Int {\n        return items.count\n    }\n    subscript(i: Int) -> Element {\n        return items[i]\n    }\n}\nstruct Queue<Element>: Container {\n    var items = [Element]()\n    mutating func push(item: Element) {\n        item.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeFirst()\n    }\n    mutating func append(item: Element) {\n        self.push(item)\n    }\n    var count: Int {\n        return items.count\n    }\n    subscript(i: Int) -> Element {\n        return items[i]\n    }\n}\n// Stack\u3068Queue\u304c\u3053\u308c\u3067\u66f8\u3051\u3068\u8a00\u3063\u3066\u3044\u308b\u3093\u3060\u304b\u3089\u304a\u305d\u3089\u304fHeap\u3082\u7121\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u3053\u3068\u3067\n// \u5b9f\u88c5\u306b\u306f\u6052\u4f8b\u87fb\u672c\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\nstruct Heap<Element>: Container {\n    var items = [Element]()\n    mutating func push(item: Element) {\n        var i = items.count\n        while i > 0 {\n            let p = (i - 1) / 2\n            if items[p] <= x {\n                break\n            }\n            if i == items.count {\n                items.append(items[p])\n            } else {\n                items[i] = items[p]\n            }\n            i = p\n        }\n        if i == items.count {\n            items.append(x)\n        } else {\n            items[i] = x\n        }\n    }\n    mutating func pop() -> Element {\n        var ret = items[0]\n        var x = items[items.count - 1]\n        var i:Int = 0\n        while i * 2 + 1 < items.count - 1 {\n            var a = i * 2 + 1\n            var b = i * 2 + 2\n            if b < items.count - 1 && items[b] < items[a] {\n                a = b\n            }\n            if items[a] >= x {\n                break\n            }\n            items[i] = items[a]\n            i = a\n        }\n        items[i] = x\n        _ = items.removeLast()\n        return ret\n    }\n    mutating func append(item: Element) {\n        self.push(item)\n    }\n    var count: Int {\n        return items.count\n    }\n    subscript(i: Int) -> Element {\n        return items[i]\n    }\n}\n\n\u78ba\u8a8d\u65b9\u6cd5\u304cpaiza\u3067\u5b9f\u884c\u3059\u308b\u3068\u304b\u3050\u3089\u3044\u3057\u304b\u306a\u3044\u305f\u3081\u9593\u9055\u3063\u3066\u308b\u90e8\u5206\u304c\u3042\u3063\u305f\u308a\u3068\u304b\u3082\u3063\u3068\u826f\u3044\u66f8\u304d\u65b9\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001\u3082\u3057\u305d\u3046\u3044\u3046\u3068\u3053\u308d\u3092\u898b\u3064\u3051\u305f\u3089\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u305d\u306e\u4ed6\n\u30bd\u30fc\u30c8\u3068\u304b\u5165\u51fa\u529b\u306e\u65b9\u6cd5\u3068\u304b\u914d\u5217\u306e\u5b9a\u7fa9\u3068\u304b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3059\u308b\u3053\u3068\u3067\u306f\u306a\u3044\u3051\u3069\u3088\u304f\u4f7f\u3046\u3088\u3046\u306a\u6587\u6cd5\u306a\u3069\u306f\u4e00\u756a\u6700\u521d\u306b\u8cbc\u3063\u305f\u30ea\u30f3\u30af\u306e\u4ed6\u306b\u3082\n\nSwift\u306e\u500b\u4eba\u7684\u9006\u5f15\u304d\n\n\u306a\u3069\u306b\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u3060\u307e\u3060\u5c0e\u5165\u306fpaiza\u3050\u3089\u3044\u3057\u304b\u78ba\u8a8d\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3055\u308cLinux\u3067\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3057\u3001TopCoder\u3067\u306f\u7a93\u793e\u306eC#\u304c\u63a1\u7528\u3055\u308c\u3066\u3044\u308b\u3093\u3060\u304b\u3089Swift\u3060\u3063\u3066\u4f7f\u3048\u3066\u3044\u3044\u3060\u308d\u307f\u305f\u3044\u306a\u3068\u3053\u308d\u304c\u3042\u308b\uff08\uff1f\uff09\u306e\u3067\u662f\u975e\u3053\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u6d3b\u7528\u3057\u3066Swift\u3067\u5feb\u9069\u306a\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30e9\u30a4\u30d5\u3092\u9001\u308a\u307e\u3057\u3087\u3046\uff01\u7b11\npaiza\u3067Swift\u304c\u5c0e\u5165\u3055\u308c\u3066\u304b\u3089\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7684\u30b5\u30e0\u30b7\u30f3\u30b0\u3067Swift\u3092\u4f7f\u3046\u4eba\u3082\u3061\u3089\u307b\u3089\u51fa\u3066\u304d\u305f\u3088\u3046\u3067\u4eca\u307e\u3067\u306b\u3082Qiita\u306b\u4ee5\u4e0b\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n- [Swift\u3067\u7af6\u30d7\u30ed\u5165\u9580](http://qiita.com/Sim_progra/items/3d9dc4fdc12da743b9ff#_reference-016331d7be33d290a3be)\n- [Swift\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0](http://qiita.com/y_mazun/items/dc2a0cad8da1c0e88a40)\n\n\u3067\u3059\u304c\u3053\u308c\u3060\u3051\u3060\u3068\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7551\u3067\u80b2\u3063\u3066\u6765\u305f\u3088\u3046\u306a\u4eba\u306b\u3068\u3063\u3066\u306f\u3044\u3061\u3044\u3061\u691c\u7d22\u3057\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u8a00\u8a9e\u4ed5\u69d8\u3068\u304b\u3082\u3042\u3063\u3066\u305d\u308c\u306b\u3088\u308b\u30bf\u30a4\u30e0\u30ed\u30b9\u304c\u6fc0\u3057\u3044\u306e\u3067\u3044\u3063\u305d\u306e\u3053\u3068\u7af6\u30d7\u30ed\u7528\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u3064\u304f\u3063\u3066\u3057\u307e\u304a\u3046\u3068\u3044\u3046\u308f\u3051\u3067\u4e0a\u8a18\u306e\u5148\u4eba\u306e\u30b3\u30fc\u30c9\u3082\u53c2\u8003\u306b\u3057\u3064\u3064\u4f5c\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u3068\u3001\u305d\u306e\u524d\u306b\u3002\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3084\u308b\u306b\u306f\u3084\u306f\u308aSwift\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u6a19\u6e96\u5165\u529b\u3067\u30c6\u30b9\u30c8\u3059\u308b\u306e\u304c\u5fc5\u8981\u3060\u3068\u601d\u3044\u307e\u3059\u3002[\u50d5\u306e\u8a18\u4e8b](http://qiita.com/touyoubuntu/items/4a5779957d58ab59a256)\u3067\u3082\u7d39\u4ecb\u3057\u305fREPL\u3092\u7528\u3044\u308b\u306e\u304c\u826f\u3044\u3067\u3057\u3087\u3046\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u95a2\u3057\u3066\u306f[Swift\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u30e2\u30fc\u30c9\u304c\u697d\u3057\u3044](http://qiita.com/dll7/items/206d5bf0cb72942b3681)\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u3093\u3067\u3059\u304c\n\n```\n$ swift file.swift\n```\n\n\u3067\u51fa\u6765\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u6642\u3064\u304f\u308c\u308b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306f./file\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\uff08\u3064\u307e\u308a\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u306f\u30b3\u30fc\u30c9\u306e\u540d\u524d\u3068\u540c\u3058\u306b\u306a\u308b\uff09\n\n# \u3068\u3044\u3046\u308f\u3051\u3067\u65e9\u901f\u4f5c\u3063\u3066\u3044\u3053\u3046\n## \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u307e\u305a\u306f\u306a\u306b\u3088\u308a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u3064\u304f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u306f\u66f8\u304d\u65b9\u304c\u5206\u304b\u308a\u6b21\u7b2c\u968f\u6642\u8ffd\u52a0\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```swift\n// Linux\u74b0\u5883\u7528\u306b\u7528\u610f\u3055\u308c\u3066\u308bCocoa\u3084UIKit\u7684\u306a\u3082\u306e\nimport Glibc\n// \u4ee5\u4e0bString\u3092\u62e1\u5f35\nextension String: CollectionType {\n    // \u57fa\u672c\u7684\u306a\u3068\u3053\u308d\u306fSim_progra\u3055\u3093\u306e\u3082\u306e\u3092\u8e0f\u8972\n    // \u52d5\u4f5c\u306a\u3069\u306f\u4e0a\u8a18\u30ea\u30f3\u30af\u306e\u8a18\u4e8b\u304b\u3089\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\n    func at(i: Int) -> String {\n        return String(self[self.startIndex.advancedBy(i)])\n    }\n    var length: Int {\n        return self.characters.count\n    }\n    func splitToArrayOfInt() -> [Int] {\n        return self.characters.flatMap({Int(String($0))})\n    }\n    // \u3053\u3063\u304b\u3089\u30aa\u30ec\u30aa\u30ec\n    // \u3088\u304f\u4f7f\u3046\u3068\u601d\u3046\u306e\u3067\u3044\u3061\u3044\u3061characters\u3068\u66f8\u304f\u624b\u9593\u3092\u7701\u304f\n    var indices: Range<String.CharacterView.Index> {\n        return self.characters.indices\n    }\n    // stringByReplacingOccurrencesOfString\u304cpaiza\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u306a\u3044\u3068\u8868\u793a\u3055\u308c\u308b\u305f\u3081\u81ea\u5206\u3067\u7528\u610f\uff08\u7c21\u6613\u7248\uff09\n    //func stringByReplacingOccurrencesOfString(replaceText: String, withString: String) {\n    //    return self.split(replaceText).joinWithSeparator(withString)\n    //}\n}\n// \u6570\u5b57\u3068\u6587\u5b57\u3068\u304b\u6df7\u3056\u3063\u3066\u3044\u308b\u6642\u7528\nfunc readElements() -> [String] {\n    return readLine()!.split(\" \")\n}\n// \u6570\u5b57\u306e\u307f\u306e\u3068\u304d\nfunc readInts() -> [Int] {\n    return readElements().map({Int($0)!})\n}\n// \u7a7a\u767d\u4ee5\u5916\u3067\u53e5\u5207\u3089\u308c\u3066\u3044\u308b\u6642\u7528\nfunc readElementsWithOption(k: String) -> [String] {\n    return readLine()!.split(k)\n}\nfunc readIntsWithOption(k: String) -> [Int] {\n    return readElementsWithOption(k).map({Int($0)!})\n}\n// y_mazun\u3055\u3093\u306e\u8a18\u4e8b\u3088\u308a\u3002\u304a\u305d\u3089\u304f\u500b\u6570\u3082\u3046\u3061\u3087\u3044\u5fc5\u8981\u304b\u3068\u601d\u3046\u306e\u3067\u9069\u5b9c\u5897\u3084\u3059\u306e\u304c\u3044\u3044\u304b\u3082\nprefix operator * {}\nprefix func * <T> (a: [T]) -> (T, T) { return (a[0], a[1]) }\nprefix func * <T> (a: [T]) -> (T, T, T) { return (a[0], a[1], a[2]) }\n// \u307e\u305aprotocol\nprotocol Container {\n    typealias ItemType\n    mutating func append(item: ItemType)\n    var count: Int { get } // { get }\u306fgetter\u51e6\u7406\u306e\u5b9f\u88c5\u3092\u5fc5\u9808\u3068\u3059\u308b\n    subscript(i: Int) -> ItemType { get }\n}\n// Stack\u3068Queue\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b\nstruct Stack<Element>: Container {\n    var items = [Element]()\n    mutating func push(item: Element) {\n        item.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeLast()\n    }\n    mutating func append(item: Element) {\n        self.push(item)\n    }\n    var count: Int {\n        return items.count\n    }\n    subscript(i: Int) -> Element {\n        return items[i]\n    }\n}\nstruct Queue<Element>: Container {\n    var items = [Element]()\n    mutating func push(item: Element) {\n        item.append(item)\n    }\n    mutating func pop() -> Element {\n        return items.removeFirst()\n    }\n    mutating func append(item: Element) {\n        self.push(item)\n    }\n    var count: Int {\n        return items.count\n    }\n    subscript(i: Int) -> Element {\n        return items[i]\n    }\n}\n// Stack\u3068Queue\u304c\u3053\u308c\u3067\u66f8\u3051\u3068\u8a00\u3063\u3066\u3044\u308b\u3093\u3060\u304b\u3089\u304a\u305d\u3089\u304fHeap\u3082\u7121\u3044\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u3053\u3068\u3067\n// \u5b9f\u88c5\u306b\u306f\u6052\u4f8b\u87fb\u672c\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\nstruct Heap<Element>: Container {\n    var items = [Element]()\n    mutating func push(item: Element) {\n        var i = items.count\n        while i > 0 {\n            let p = (i - 1) / 2\n            if items[p] <= x {\n                break\n            }\n            if i == items.count {\n                items.append(items[p])\n            } else {\n                items[i] = items[p]\n            }\n            i = p\n        }\n        if i == items.count {\n            items.append(x)\n        } else {\n            items[i] = x\n        }\n    }\n    mutating func pop() -> Element {\n        var ret = items[0]\n        var x = items[items.count - 1]\n        var i:Int = 0\n        while i * 2 + 1 < items.count - 1 {\n            var a = i * 2 + 1\n            var b = i * 2 + 2\n            if b < items.count - 1 && items[b] < items[a] {\n                a = b\n            }\n            if items[a] >= x {\n                break\n            }\n            items[i] = items[a]\n            i = a\n        }\n        items[i] = x\n        _ = items.removeLast()\n        return ret\n    }\n    mutating func append(item: Element) {\n        self.push(item)\n    }\n    var count: Int {\n        return items.count\n    }\n    subscript(i: Int) -> Element {\n        return items[i]\n    }\n}\n```\n\n\u78ba\u8a8d\u65b9\u6cd5\u304cpaiza\u3067\u5b9f\u884c\u3059\u308b\u3068\u304b\u3050\u3089\u3044\u3057\u304b\u306a\u3044\u305f\u3081\u9593\u9055\u3063\u3066\u308b\u90e8\u5206\u304c\u3042\u3063\u305f\u308a\u3068\u304b\u3082\u3063\u3068\u826f\u3044\u66f8\u304d\u65b9\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001\u3082\u3057\u305d\u3046\u3044\u3046\u3068\u3053\u308d\u3092\u898b\u3064\u3051\u305f\u3089\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n## \u305d\u306e\u4ed6\n\u30bd\u30fc\u30c8\u3068\u304b\u5165\u51fa\u529b\u306e\u65b9\u6cd5\u3068\u304b\u914d\u5217\u306e\u5b9a\u7fa9\u3068\u304b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3059\u308b\u3053\u3068\u3067\u306f\u306a\u3044\u3051\u3069\u3088\u304f\u4f7f\u3046\u3088\u3046\u306a\u6587\u6cd5\u306a\u3069\u306f\u4e00\u756a\u6700\u521d\u306b\u8cbc\u3063\u305f\u30ea\u30f3\u30af\u306e\u4ed6\u306b\u3082\n\n- [Swift\u306e\u500b\u4eba\u7684\u9006\u5f15\u304d](http://qiita.com/tikidunponpon/items/9c458bfdc66bce04da20)\n\n\u306a\u3069\u306b\u8f09\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u307e\u3060\u307e\u3060\u5c0e\u5165\u306fpaiza\u3050\u3089\u3044\u3057\u304b\u78ba\u8a8d\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3055\u308cLinux\u3067\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3057\u3001TopCoder\u3067\u306f\u7a93\u793e\u306eC#\u304c\u63a1\u7528\u3055\u308c\u3066\u3044\u308b\u3093\u3060\u304b\u3089Swift\u3060\u3063\u3066\u4f7f\u3048\u3066\u3044\u3044\u3060\u308d\u307f\u305f\u3044\u306a\u3068\u3053\u308d\u304c\u3042\u308b\uff08\uff1f\uff09\u306e\u3067\u662f\u975e\u3053\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u6d3b\u7528\u3057\u3066Swift\u3067\u5feb\u9069\u306a\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30e9\u30a4\u30d5\u3092\u9001\u308a\u307e\u3057\u3087\u3046\uff01\u7b11\n", "tags": ["Swift", "\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}