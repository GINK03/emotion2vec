{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\n\u672c\u5bb6KHRONOS\u306e\u30b5\u30a4\u30c8\n\u672c\u5bb6KHRONOS\u306e\u65e5\u672c\u8a9e\u30b5\u30a4\u30c8\n\n\u65e5\u672c\u8a9e\u30b5\u30a4\u30c8\u306f\u60c5\u5831\u304c\u53e4\u304f\u30012.X\u307e\u3067\u306e\u3082\u306e\u3057\u304b\u306a\u304f\u3001\u30ea\u30f3\u30af\u5207\u308c\u3082\u591a\u3044\u3067\u3059\u3002\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n1.X\n\nOpenGLES1.0\u306f\u3001OpenGL1.3\u30d9\u30fc\u30b9\nOpenGLES1.1\u306f\u3001OpenGL1.5\u30d9\u30fc\u30b9\n\u56fa\u5b9a\u6a5f\u80fd\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n\n\n\n2.X\n\nOpenGLES2.0\u306f\u3001OpenGL2.0\u30d9\u30fc\u30b9\n\u30d7\u30ed\u30b0\u30e9\u30de\u30d6\u30eb\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u3068\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30fc\n\n\n\n3.X   \n\nOpenGLES3.0\n\n\nDirectX10\u76f8\u5f53\u306e\u6a5f\u80fd\u306e\u8ffd\u52a0\n\u30b8\u30aa\u30e1\u30c8\u30ea\u30fc\u30b7\u30a7\u30fc\u30c0\u30fc\u306a\u3057\n\n\nOpenGLES3.1\n\n\nDirectX11\u76f8\u5f53\u306e\u6a5f\u80fd\u306e\u8ffd\u52a0\n\u30b3\u30f3\u30d4\u30e5\u30fc\u30c8\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u5c0e\u5165\n\u30b8\u30aa\u30e1\u30c8\u30ea\u30fc\u30b7\u30a7\u30fc\u30c0\u30fc\u3001\u30c6\u30c3\u30bb\u30ec\u30fc\u30b7\u30e7\u30f3\u306a\u3057\n\n\n\n\n\n\nGL\u306e\u30c7\u30fc\u30bf\u578b\n\n\n\nGL\u578b\n\u6700\u5c0f\u30d3\u30c3\u30c8\u5e45\n\u8aac\u660e\n\n\n\n\nboolean\n1\n\u30d6\u30fc\u30eb\u5024\n\n\nbyte\n8\n\u7b26\u53f7\u4ed8\u304d\uff12\u9032\u6570\n\n\nubyte\n8\n\u7b26\u53f7\u306a\u3057\uff12\u9032\u6570\n\n\nchar\n8\n\u6587\u5b57\u5217\u7528\u306e\u6587\u5b57\n\n\nshort\n16\n\u7b26\u53f7\u4ed8\u304d\uff12\u9032\u6570\n\n\nushort\n16\n\u7b26\u53f7\u306a\u3057\uff12\u9032\u6570\n\n\nint\n32\n\u7b26\u53f7\u4ed8\u304d\uff12\u9032\u6570\n\n\nuint\n32\n\u7b26\u53f7\u306a\u3057\uff12\u9032\u6570\n\n\nfloat\n32\n\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\n\n\nclampf\n32\n0\u301c1\u306b\u5236\u9650\u3055\u308c\u305f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\n\n\nfixed\n32\n\u7b26\u53f7\u4ed8\u304d\u56fa\u5b9a\u5c0f\u6570\u70b9\u6570\n\n\nsizei\n32\n\uff10\u4ee5\u4e0a\uff12\u9032\u6570\u306b\u3088\u308b\u30b5\u30a4\u30ba\n\n\nenum\n32\n\uff12\u65b0\u6570\u5024\u306e\u5217\u6319\n\n\nbitfield\n32\n\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\n\n\nintptr\nptrbits\n\u7b26\u53f7\u4ed8\u304d\uff12\u9032\u6570\n\n\nsizeiptr\nptrbits\n\uff10\u4ee5\u4e0a\u306e\uff12\u9032\u6570\u306b\u3088\u308b\u30b5\u30a4\u30ba\n\n\n\n\n\u9802\u70b9\u3068\u9802\u70b9\u914d\u5217\n\n\u9802\u70b9\n\n\u9802\u70b9\u306eAttribute\u5909\u6570\u3092\u8a2d\u5b9a\nvoid VertexAttrib{1234}{f}(uint index, T values);\nvoid VertexAttrib{1234}{f}v(uint index, T values);\n\n\n\u9802\u70b9\u914d\u5217\n\n\u9802\u70b9Atribute\u306e\u4f4d\u7f6e\u306e\u6307\u5b9a\nvoid VertexAttribPointer(uint index, int size, enum type, boolean normalized, sizei stride, const void *pointer);\n\n\ntype: BYTE, UNSIGNED_BYTE, SHORT, UNSIGNED_SHORT, FIXED, FLOAT\nindex: [0, MAX_VERTEX_ATTRIBS - 1]\n\n\n\u9802\u70b9Attribute\u914d\u5217\u3092\u4f7f\u3046\uff0f\u4f7f\u308f\u306a\u3044\nvoid EnableVertexAttribArray(uint index);\nvoid DisableVertexAttribArray(uint index);\n\n\nindex: [0, MAX_VERTEX_ATTRIBS - 1]\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306a\u3057\u9802\u70b9\u306e\u63cf\u753b\nvoid DrawArrays(enum mode, int first, sizei count);\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3042\u308a\u9802\u70b9\u306e\u63cf\u753b\nvoid DrawElements(enum mode, sizei count, enum type, void *indices);\n\n\nmode: POINTS, LINE_STRIP, LINE_LOOP, LINES, TRIANGLE_STRIP, TRIANGLE_FAN, TRIANGLES\ntype: UNSIGNED_BYTE, UNSIGNED_SHORT\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u4f5c\u6210\nuint CreateShader(enum type);\n\n\ntype: VERTEX_SHADER, FRAGMENT_SHADER\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\nvoid ShaderSource(uint shader, sizei count, const char **string, const int *length);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\nvoid CompileShader(uint shader);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u89e3\u653e\nvoid ReleaseShaderCompiler(void);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u524a\u9664\nvoid DeleteShader(uint shader);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30d0\u30a4\u30ca\u30ea\u306e\u30ed\u30fc\u30c9\nvoid ShaderBinary(sizei count, const uint *shaders, enum binaryformat, const void *binary, sizei length);\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\nuint CreateProgram(void);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30a2\u30bf\u30c3\u30c1\nvoid AttachShader(uint program, uint shader);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30c7\u30bf\u30c3\u30c1\nvoid DetachShader(uint program, uint shader);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30f3\u30af\nvoid LinkProgram(uint program);\n\n\n\u4f7f\u7528\u3059\u308b\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u6307\u5b9a\nvoid UseProgram(uint program);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u524a\u9664\nvoid DeleteProgram(uint program);\n\n\nAttrbute\u5909\u6570\u3068Uniform\u5909\u6570\n\n\u9802\u70b9Attrbute\u5909\u6570\n\n\u30a2\u30af\u30c6\u30a3\u30d6\u306aAttribute\u5909\u6570\u306e\u53d6\u5f97\nvoid GetActiveAttrib(uint program, uint index, sizei bufSize, sizei *length, int *size, enum *type, char *name);\n\n\n*type \u623b\u308a\u5024: FLOAT, FLOAT_VEC{2,3,4}, FLOAT_MAT{2,3,4} \n\n\nAttribute\u5909\u6570\u306e\u4f4d\u7f6e\u306e\u53d6\u5f97\nint GetAttribLocation(uint program, const char *name);\n\n\nAttribute\u5909\u6570\u3068\u7d50\u5408\nvoid BindAttribLocation(uint program, uint index, const char *name);\n\n\nUniform\u5909\u6570\n\nUniform\u5909\u6570\u306e\u4f4d\u7f6e\u306e\u53d6\u5f97\nint GetUniformLocation(uint program, const char *name);\n\n\n\u30a2\u30af\u30c6\u30a3\u30d6\u306aUniform\u5909\u6570\u306e\u53d6\u5f97\nvoid GetActiveUniform(uint program, uint index, sizei bufSize, sizei *length, int *size, enum *type, char *name);\n\n\n*type: FLOAT, FLOAT_VEC{2,3,4}, INT, INT_VEC{2,3,4}, BOOL, BOOL_VEC{2,3,4}, FLOAT_MAT{2,3,4}, SAMPLER_2D, SAMPLER_CUBE\n\n\nUniform\u5909\u6570\u306b\u5024\u3092\u8a2d\u5b9a\nvoid Uniform{1234}{if}(int location, T value);\nvoid Uniform{1234}{if}v(int location, sizei count, T value);\nvoid UniformMatrix{234}fv(int location, sizei count, boolean transpose, const float *value);\n\n\ntranspose: FALSE\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u59a5\u5f53\u6027\u30c1\u30a7\u30c3\u30af\nvoid ValidateProgram(uint program);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u3078\u306e\u554f\u3044\u5408\u308f\u305b\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u304c\u3042\u308b\u304b\uff1f\nboolean IsShader(uint shader);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u5024\u306e\u53d6\u5f97\nvoid GetShaderiv(uint shader, enum pname, int *params);\n\n\npname: SHADER_TYPE, DELETE_STATUS, COMPILE_STATUS, INFO_LOG_LENGTH,\u3000SHADER_SOURCE_LENGTH\n\n\n\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u305f\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u53d6\u5f97\nvoid GetAttachedShaders(uint program, sizei maxCount, sizei *count, uint *shaders);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30ed\u30b0\u3092\u53d6\u5f97\nvoid GetShaderInfoLog(uint shader, sizei bufSize, sizei *length, char *infoLog);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\nvoid GetShaderSource(uint shader, sizei bufSize, sizei *length, char *source);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u7cbe\u5ea6\u5f62\u5f0f\u3092\u53d6\u5f97\nvoid GetShaderPrecisionFormat(enum shadertype, enum precisiontype, int *range, int *precision);\n\n\nshadertype: VERTEX_SHADER, FRAGMENT_SHADER\nprecision: LOW_FLOAT, MEDIUM_FLOAT, HIGH_FLOAT, LOW_INT, MEDIUM_INT, HIGH_INT\n\n\n\u9802\u70b9Attribute\u5909\u6570\u306e\u5024\u306e\u53d6\u5f97\nvoid GetVertexAttribfv(uint index, enum pname, float *params);\n\n\npname: CURRENT_VERTEX_ATTRIB , VERTEX_ATTRIB_ARRAY_x (x \u306f BUFFER_BINDING, ENABLED, SIZE, STRIDE, TYPE, NORMALIZED)\n\nvoid GetVertexAttribiv(uint index, enum pname, int *params);\n\n\npname: CURRENT_VERTEX_ATTRIB , VERTEX_ATTRIB_ARRAY_x (x \u306f BUFFER_BINDING, ENABLED, SIZE, STRIDE, TYPE, NORMALIZED)\n\nvoid GetVertexAttribPointerv(uint index, enum pname, void **pointer);\n\n\npname: VERTEX_ATTRIB_ARRAY_POINTER\n\n\nUniform\u5909\u6570\u306e\u5024\u306e\u53d6\u5f97\nvoid GetUniformfv(uint program, int location, float *params)\nvoid GetUniformiv(uint program, int location, int *params)\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3078\u306e\u554f\u3044\u5408\u308f\u305b\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3042\u308b\u304b\uff1f\nboolean IsProgram(uint program);\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u53d6\u5f97\nvoid GetProgramiv(uint program, enum pname, int *params);\n\n\npname: DELETE_STATUS, LINK_STATUS, VALIDATE_STATUS, INFO_LOG_LENGTH, ATTACHED_SHADERS, ACTIVE_ATTRIBUTES, ACTIVE_ATTRIBUTE_MAX_LENGTH, ACTIVE_UNIFORMS, ACTIVE_UNIFORM_MAX_LENGTH\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ed\u30b0\u306e\u53d6\u5f97\nC++\nvoid GetProgramInfoLog(uint program, sizei bufSize, sizei *length, char *infoLog);\n\n\n\n\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u524d\u306e\u64cd\u4f5c\n\n\u30b7\u30b6\u30fc\u30c6\u30b9\u30c8\n\n\u6709\u52b9\uff0f\u7121\u52b9\nEnable/Disable(SCISSOR_TEST)\n\n\n\u30b7\u30b6\u30fc\u7bc4\u56f2\u306e\u6307\u5b9a\nvoid Scissor(int left, int bottom, sizei width, sizei height );\n\n\n\u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u64cd\u4f5c\n\n\u6709\u52b9\uff0f\u7121\u52b9\nEnable/Disable(cap)\n\n\ncap: SAMPLE_ALPHA_TO_COVERAGE, SAMPLE_COVERAGE\n\n\n\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u7bc4\u56f2\u306e\u6307\u5b9a\nvoid SampleCoverage(clampf value, boolean invert);\n\n\n\u30b9\u30c6\u30f3\u30b7\u30eb\u30c6\u30b9\u30c8\n\n\u6709\u52b9\uff0f\u7121\u52b9\nEnable/Disable(STENCIL_TEST)\n\n\n\u30b9\u30c6\u30f3\u30b7\u30eb\u95a2\u6570\u306e\u6307\u5b9a\nvoid StencilFunc(enum func, int ref, uint mask);\n\n\n\u30b9\u30c6\u30f3\u30b7\u30eb\u95a2\u6570\u306e\u500b\u5225\u6307\u5b9a\nvoid StencilFuncSeparate(enum face, enum func, int ref, uint mask);\n\n\n\n\u30b9\u30c6\u30f3\u30b7\u30eb\u64cd\u4f5c\u306e\u6307\u5b9a\nvoid StencilOp(enum sfail, enum dpfail, enum dppass);\n\n\n\u30b9\u30c6\u30f3\u30b7\u30eb\u64cd\u4f5c\u306e\u500b\u5225\u6307\u5b9a\nvoid StencilOpSeparate(enum face, enum sfail, enum dpfail, enum dppass);\n\n\nface: FRONT, BACK, FRONT_AND_BACK\nsfail, dpfail, dppass: KEEP, ZERO, REPLACE, INCR, DECR, INVERT, INCR_WRAP, DECR_WRAP\nfunc: NEVER, ALWAYS, LESS, LEQUAL, EQUAL, GREATER, GEQUAL, NOTEQUAL\n\n\n\u6df1\u5ea6\u30c6\u30b9\u30c8\n\n\u6709\u52b9\uff0f\u7121\u52b9\nEnable/Disable(DEPTH_TEST)\n\n\n\u6df1\u5ea6\u30c6\u30b9\u30c8\u95a2\u6570\u306e\u6307\u5b9a\nvoid DepthFunc(enum func);\n\n\nfunc: NEVER, ALWAYS, LESS, LEQUAL, EQUAL, GREATER, GEQUAL, NOTEQUAL\n\n\n\u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\n\n\u6709\u52b9\uff0f\u7121\u52b9\nEnable/Disable(BLEND) (applies to all draw buffers)\n\n\n\u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\u5f0f\u306e\u6307\u5b9a\nvoid BlendEquation(enum mode);\n\n\n\u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\u5f0f\u306e\u500b\u5225\u6307\u5b9a\nvoid BlendEquationSeparate(enum modeRGB, enum modeAlpha);\n\n\nmode, modeRGB, modeAlpha: FUNC_ADD, FUNC_SUBTRACT, FUNC_REVERSE_SUBTRACT\n\n\n\u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\u95a2\u6570\u306e\u500b\u5225\u6307\u5b9a\nvoid BlendFuncSeparate(enum srcRGB, enum dstRGB, enum srcAlpha, enum dstAlpha);\n\n\n\u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\u95a2\u6570\u306e\u6307\u5b9a\nvoid BlendFunc(enum src, enum dst);\n\n\ndst, dstRGB, dstAlpha: ZERO, ONE, [ONE_MINUS_]SRC_COLOR, [ONE_MINUS_]DST_COLOR,[ONE_MINUS_]SRC_ALPHA, [ONE_MINUS_]DST_ALPHA, [ONE_MINUS_]CONSTANT_COLOR, [ONE_MINUS_]CONSTANT_ALPHA\nsrc, srcRGB, srcAlpha: dst\u3068\u540c\u3058 + SRC_ALPHA_SATURATE\n\nvoid BlendColor(clampf red, clampf green, clampf blue, clampf alpha);\n\n\n\u30c7\u30a3\u30b6\n\n\u6709\u52b9\uff0f\u7121\u52b9\nEnable/Disable(DITHER)\n\n\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u64cd\u4f5c\n\n\u8272\u30de\u30b9\u30af\u306e\u6307\u5b9a\nvoid ColorMask(boolean r, boolean g, boolean b, boolean a);\n\n\n\u6df1\u5ea6\u30de\u30b9\u30af\u306e\u6307\u5b9a\nvoid DepthMask(boolean mask);\n\n\n\u30b9\u30c6\u30f3\u30b7\u30eb\u30de\u30b9\u30af\u306e\u6307\u5b9a\nvoid StencilMask(uint mask);\n\n\n\u30b9\u30c6\u30f3\u30b7\u30eb\u30de\u30b9\u30af\u306e\u500b\u5225\u6307\u5b9a\nvoid StencilMaskSeparate(enum face, uint mask);\n\n\nface: FRONT, BACK, FRONT_AND_BACK\n\n\n\u30d0\u30c3\u30d5\u30a1\u306e\u30af\u30ea\u30a2\nvoid Clear(bitfield buf);\n\n\nbuf: COLOR_BUFFER_BIT, DEPTH_BUFFER_BIT, STENCIL_BUFFER_BIT\u3000\u306e\u30d3\u30c3\u30c8\u3054\u3068\u306eOR\n\n\n\u8272\u30d0\u30c3\u30d5\u30a1\u306e\u30af\u30ea\u30a2\nvoid ClearColor(clampf r, clampf g, clampf b, clampf a);\n\n\n\u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u306e\u30af\u30ea\u30a2\nvoid ClearDepthf(clampf d);\n\n\n\u30b9\u30c6\u30f3\u30b7\u30eb\u30d0\u30c3\u30d5\u30a1\u306e\u30af\u30ea\u30a2\nvoid ClearStencil(int s);\n\n\n\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306e\u7d50\u5408\u3068\u7ba1\u7406\n\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306e\u7d50\u5408\nvoid BindFramebuffer(enum target, uint framebuffer);\n\n\ntarget: FRAMEBUFFER \n\n\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306e\u524a\u9664\nvoid DeleteFramebuffers(sizei n, uint *framebuffers);\n\n\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306e\u53d6\u5f97\nvoid GenFramebuffers(sizei n, uint *framebuffers);\n\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u306e\u7d50\u5408\nvoid BindRenderbuffer(enum target, uint renderbuffer);\n\n\ntarget: RENDERBUFFER\n\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u306e\u524a\u9664\nvoid DeleteRenderbuffers(sizei n, const uint *renderbuffers);\n\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u914d\u5217\u306e\u4f5c\u6210\nvoid GenRenderbuffers(sizei n, uint *renderbuffers);\n\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u6307\u5b9a\nvoid RenderbufferStorage(enum target, enum internalformat, sizei width, sizei height);\n\n\ntarget: RENDERBUFFER\ninternalformat: DEPTH_COMPONENT16, RGBA4, RGB5_A1, RGB565, STENCIL_INDEX8 \n\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u753b\u50cf\u306e\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u30a2\u30bf\u30c3\u30c1\nvoid FramebufferRenderbuffer(enum target, enum attachment, enum renderbuffertarget, uint renderbuffer);\n\n\ntarget: FRAMEBUFFER\nattachment: COLOR_ATTACHMENT0, DEPTH_ATTACHMENT, STENCIL_ATTACHMENT\nrenderbuffertarget: RENDERBUFFER\n\n\n\u30c6\u30af\u30b9\u30c1\u30e3\u753b\u50cf\u306e\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u30a2\u30bf\u30c3\u30c1\nvoid FramebufferTexture2D(enum target, enum attachment, enum textarget, uint texture, int level);\n\n\ntextarget: TEXTURE_2D, TEXTURE_CUBE_MAP_POSITIVE{X, Y, Z}, TEXTURE_CUBE_MAP_NEGATIVE{X, Y, Z}, \ntarget: FRAMEBUFFER\nattachment: COLOR_ATTACHMENT0, DEPTH_ATTACHMENT, STENCIL_ATTACHMENT\n\n\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u3092\u30c1\u30a7\u30c3\u30af\nenum CheckFramebufferStatus(enum target);\n\n\ntarget: FRAMEBUFFER\nreturns: FRAMEBUFFER_COMPLETE or a constant indicating which value violates framebuffer completeness\n\n\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u554f\u3044\u5408\u308f\u305b\n\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u304c\u3042\u308b\u304b\uff1f\nboolean IsFramebuffer(uint framebuffer);\n\n\n\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u5f97\nvoid GetFramebufferAttachmentParameteriv(enum target, enum attachment, enum pname, int *params);\n\n\ntarget: FRAMEBUFFER\nattachment: COLOR_ATTACHMENT0, DEPTH_ATTACHMENT, STENCIL_ATTACHMENT\npname: FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE,FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\n\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u554f\u3044\u5408\u308f\u305b\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u304c\u3042\u308b\u304b\uff1f\nboolean IsRenderbuffer(uint renderbuffer);\n\n\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u5f97\nvoid GetRenderbufferParameteriv(enum target, enum pname, int *params);\n\n\ntarget: RENDERBUFFER\npname: RENDERBUFFER_x (x \u306f WIDTH, HEIGHT, RED_SIZE, GREEN_SIZE, BLUE_SIZE, ALPHA_SIZE, DEPTH_SIZE, STENCIL_SIZE, INTERNAL_FORMAT)\n\n\n\u305d\u306e\u4ed6\n\n\u5358\u7d14\u306a\u554f\u3044\u5408\u308f\u305b\nvoid GetBooleanv(enum value, boolean *data);\nvoid GetIntegerv(enum value, int *data);\nvoid GetFloatv(enum value, float *data);\nboolean IsEnabled(enum value);\n\n\n\u30dd\u30a4\u30f3\u30bf\u3068\u6587\u5b57\u5217\u3067\u306e\u554f\u3044\u5408\u308f\u305b\nubyte *GetString(enum name); \n\n\nname: VENDOR, RENDERER, VERSION, SHADING_LANGUAGE_VERSION, EXTENSIONS\n\n\n\u30d0\u30c3\u30d5\u30a1\u30d5\u30e9\u30c3\u30b7\u30e5\u3068\u7d42\u4e86\nvoid Flush(void);\nvoid Finish(void);\n\n\n\u30d2\u30f3\u30c8\nvoid Hint(enum target, enum hint);\n\n\ntarget: GENERATE_MIPMAP_HINT\nhint: FASTEST, NICEST, DONT_CARE\n\n\n## \u6982\u8981\n- \u672c\u5bb6[KHRONOS](http://khronos.org/opengles)\u306e\u30b5\u30a4\u30c8\n\n\n- \u672c\u5bb6[KHRONOS](http://jp.khronos.org/opengles)\u306e\u65e5\u672c\u8a9e\u30b5\u30a4\u30c8\n\n\u65e5\u672c\u8a9e\u30b5\u30a4\u30c8\u306f\u60c5\u5831\u304c\u53e4\u304f\u30012.X\u307e\u3067\u306e\u3082\u306e\u3057\u304b\u306a\u304f\u3001\u30ea\u30f3\u30af\u5207\u308c\u3082\u591a\u3044\u3067\u3059\u3002\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\n- 1.X\n\t- OpenGLES1.0\u306f\u3001OpenGL1.3\u30d9\u30fc\u30b9\n\t- OpenGLES1.1\u306f\u3001OpenGL1.5\u30d9\u30fc\u30b9\n\t- \u56fa\u5b9a\u6a5f\u80fd\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n\n- 2.X\n\t- OpenGLES2.0\u306f\u3001OpenGL2.0\u30d9\u30fc\u30b9\n\t- \u30d7\u30ed\u30b0\u30e9\u30de\u30d6\u30eb\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n\t- \u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u3068\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u30fc\n\n- 3.X\t\n\t- OpenGLES3.0\n\t\t- DirectX10\u76f8\u5f53\u306e\u6a5f\u80fd\u306e\u8ffd\u52a0\n\t\t- \u30b8\u30aa\u30e1\u30c8\u30ea\u30fc\u30b7\u30a7\u30fc\u30c0\u30fc\u306a\u3057\n\t- OpenGLES3.1\n\t\t- DirectX11\u76f8\u5f53\u306e\u6a5f\u80fd\u306e\u8ffd\u52a0\n\t\t- \u30b3\u30f3\u30d4\u30e5\u30fc\u30c8\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u5c0e\u5165\n\t\t- \u30b8\u30aa\u30e1\u30c8\u30ea\u30fc\u30b7\u30a7\u30fc\u30c0\u30fc\u3001\u30c6\u30c3\u30bb\u30ec\u30fc\u30b7\u30e7\u30f3\u306a\u3057\n\n## GL\u306e\u30c7\u30fc\u30bf\u578b\n\n| GL\u578b     | \u6700\u5c0f\u30d3\u30c3\u30c8\u5e45 | \u8aac\u660e         |\n|:---------|---:|:-----------:|\n| boolean  |  1 | \u30d6\u30fc\u30eb\u5024      |\n| byte     |  8 | \u7b26\u53f7\u4ed8\u304d\uff12\u9032\u6570 |\n| ubyte    |  8 | \u7b26\u53f7\u306a\u3057\uff12\u9032\u6570 |\n| char     |  8 | \u6587\u5b57\u5217\u7528\u306e\u6587\u5b57 |\n| short    | 16 | \u7b26\u53f7\u4ed8\u304d\uff12\u9032\u6570 |\n| ushort   | 16 | \u7b26\u53f7\u306a\u3057\uff12\u9032\u6570 |\n| int      | 32 | \u7b26\u53f7\u4ed8\u304d\uff12\u9032\u6570 |\n| uint     | 32 | \u7b26\u53f7\u306a\u3057\uff12\u9032\u6570 |\n| float    | 32 | \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570   |\n| clampf   | 32 | 0\u301c1\u306b\u5236\u9650\u3055\u308c\u305f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570 |\n| fixed    | 32 | \u7b26\u53f7\u4ed8\u304d\u56fa\u5b9a\u5c0f\u6570\u70b9\u6570 |\n| sizei    | 32 | \uff10\u4ee5\u4e0a\uff12\u9032\u6570\u306b\u3088\u308b\u30b5\u30a4\u30ba |\n| enum     | 32 | \uff12\u65b0\u6570\u5024\u306e\u5217\u6319 |\n| bitfield | 32 | \u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9 |\n| intptr   | ptrbits | \u7b26\u53f7\u4ed8\u304d\uff12\u9032\u6570 |\n| sizeiptr | ptrbits | \uff10\u4ee5\u4e0a\u306e\uff12\u9032\u6570\u306b\u3088\u308b\u30b5\u30a4\u30ba |\n\n## \u9802\u70b9\u3068\u9802\u70b9\u914d\u5217\n### \u9802\u70b9\n#### \u9802\u70b9\u306eAttribute\u5909\u6570\u3092\u8a2d\u5b9a\n```C++\nvoid VertexAttrib{1234}{f}(uint index, T values);\nvoid VertexAttrib{1234}{f}v(uint index, T values);\n```\n\n### \u9802\u70b9\u914d\u5217\n#### \u9802\u70b9Atribute\u306e\u4f4d\u7f6e\u306e\u6307\u5b9a\n```C++\nvoid VertexAttribPointer(uint index, int size, enum type, boolean normalized, sizei stride, const void *pointer);\n```\n- type: BYTE, UNSIGNED_BYTE, SHORT, UNSIGNED_SHORT, FIXED, FLOAT\n- index: [0, MAX_VERTEX_ATTRIBS - 1]\n\n#### \u9802\u70b9Attribute\u914d\u5217\u3092\u4f7f\u3046\uff0f\u4f7f\u308f\u306a\u3044\n```C++\nvoid EnableVertexAttribArray(uint index);\nvoid DisableVertexAttribArray(uint index);\n```\n- index: [0, MAX_VERTEX_ATTRIBS - 1]\n\n#### \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306a\u3057\u9802\u70b9\u306e\u63cf\u753b\n```C++\nvoid DrawArrays(enum mode, int first, sizei count);\n```\n\n#### \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3042\u308a\u9802\u70b9\u306e\u63cf\u753b\n```C++\nvoid DrawElements(enum mode, sizei count, enum type, void *indices);\n```\n- mode: POINTS, LINE_STRIP, LINE_LOOP, LINES, TRIANGLE_STRIP, TRIANGLE_FAN, TRIANGLES\n- type: UNSIGNED_BYTE, UNSIGNED_SHORT\n\n\n## \u30b7\u30a7\u30fc\u30c0\u30fc\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\n### \u30b7\u30a7\u30fc\u30c0\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u4f5c\u6210\n```C++\nuint CreateShader(enum type);\n```\n- type: VERTEX_SHADER, FRAGMENT_SHADER\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30bd\u30fc\u30b9\u306e\u6307\u5b9a\n```C++\nvoid ShaderSource(uint shader, sizei count, const char **string, const int *length);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n```C++\nvoid CompileShader(uint shader);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u89e3\u653e\n```C++\nvoid ReleaseShaderCompiler(void);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u524a\u9664\n```C++\nvoid DeleteShader(uint shader);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u30d0\u30a4\u30ca\u30ea\u306e\u30ed\u30fc\u30c9\n```C++\nvoid ShaderBinary(sizei count, const uint *shaders, enum binaryformat, const void *binary, sizei length);\n```\n\n### \u30d7\u30ed\u30b0\u30e9\u30e0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4f5c\u6210\n```C++\nuint CreateProgram(void);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30a2\u30bf\u30c3\u30c1\n```C++\nvoid AttachShader(uint program, uint shader);\n```\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30c7\u30bf\u30c3\u30c1\n```C++\nvoid DetachShader(uint program, uint shader);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30f3\u30af\n```C++\nvoid LinkProgram(uint program);\n```\n\n#### \u4f7f\u7528\u3059\u308b\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u6307\u5b9a\n```C++\nvoid UseProgram(uint program);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u524a\u9664\n```C++\nvoid DeleteProgram(uint program);\n```\n\n## Attrbute\u5909\u6570\u3068Uniform\u5909\u6570\n### \u9802\u70b9Attrbute\u5909\u6570\n#### \u30a2\u30af\u30c6\u30a3\u30d6\u306aAttribute\u5909\u6570\u306e\u53d6\u5f97\n```C++\nvoid GetActiveAttrib(uint program, uint index, sizei bufSize, sizei *length, int *size, enum *type, char *name);\n```\n- *type \u623b\u308a\u5024: FLOAT, FLOAT_VEC{2,3,4}, FLOAT_MAT{2,3,4} \n\n#### Attribute\u5909\u6570\u306e\u4f4d\u7f6e\u306e\u53d6\u5f97\n```C++\nint GetAttribLocation(uint program, const char *name);\n```\n\n#### Attribute\u5909\u6570\u3068\u7d50\u5408\n```C++\nvoid BindAttribLocation(uint program, uint index, const char *name);\n```\n\n### Uniform\u5909\u6570\n#### Uniform\u5909\u6570\u306e\u4f4d\u7f6e\u306e\u53d6\u5f97\n```C++\nint GetUniformLocation(uint program, const char *name);\n```\n\n#### \u30a2\u30af\u30c6\u30a3\u30d6\u306aUniform\u5909\u6570\u306e\u53d6\u5f97\n```C++\nvoid GetActiveUniform(uint program, uint index, sizei bufSize, sizei *length, int *size, enum *type, char *name);\n```\n- *type: FLOAT, FLOAT_VEC{2,3,4}, INT, INT_VEC{2,3,4}, BOOL, BOOL_VEC{2,3,4}, FLOAT_MAT{2,3,4}, SAMPLER_2D, SAMPLER_CUBE\n\n#### Uniform\u5909\u6570\u306b\u5024\u3092\u8a2d\u5b9a\n```C++\nvoid Uniform{1234}{if}(int location, T value);\nvoid Uniform{1234}{if}v(int location, sizei count, T value);\nvoid UniformMatrix{234}fv(int location, sizei count, boolean transpose, const float *value);\n```\n- transpose: FALSE\n\n### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u59a5\u5f53\u6027\u30c1\u30a7\u30c3\u30af\n```C++\nvoid ValidateProgram(uint program);\n```\n\n### \u30b7\u30a7\u30fc\u30c0\u30fc\u3078\u306e\u554f\u3044\u5408\u308f\u305b\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u304c\u3042\u308b\u304b\uff1f\n```C++\nboolean IsShader(uint shader);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u5024\u306e\u53d6\u5f97\n```C++\nvoid GetShaderiv(uint shader, enum pname, int *params);\n```\n- pname: SHADER_TYPE, DELETE_STATUS, COMPILE_STATUS, INFO_LOG_LENGTH,\u3000SHADER_SOURCE_LENGTH\n\n#### \u30a2\u30bf\u30c3\u30c1\u3055\u308c\u305f\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u53d6\u5f97\n```C++\nvoid GetAttachedShaders(uint program, sizei maxCount, sizei *count, uint *shaders);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30ed\u30b0\u3092\u53d6\u5f97\n```C++\nvoid GetShaderInfoLog(uint shader, sizei bufSize, sizei *length, char *infoLog);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\n```C++\nvoid GetShaderSource(uint shader, sizei bufSize, sizei *length, char *source);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u7cbe\u5ea6\u5f62\u5f0f\u3092\u53d6\u5f97\n```C++\nvoid GetShaderPrecisionFormat(enum shadertype, enum precisiontype, int *range, int *precision);\n```\n- shadertype: VERTEX_SHADER, FRAGMENT_SHADER\n- precision: LOW_FLOAT, MEDIUM_FLOAT, HIGH_FLOAT, LOW_INT, MEDIUM_INT, HIGH_INT\n\n#### \u9802\u70b9Attribute\u5909\u6570\u306e\u5024\u306e\u53d6\u5f97\n```C++\nvoid GetVertexAttribfv(uint index, enum pname, float *params);\n```\n- pname: CURRENT_VERTEX_ATTRIB , VERTEX_ATTRIB_ARRAY_x (x \u306f BUFFER_BINDING, ENABLED, SIZE, STRIDE, TYPE, NORMALIZED)\n\n```C++\nvoid GetVertexAttribiv(uint index, enum pname, int *params);\n```\n- pname: CURRENT_VERTEX_ATTRIB , VERTEX_ATTRIB_ARRAY_x (x \u306f BUFFER_BINDING, ENABLED, SIZE, STRIDE, TYPE, NORMALIZED)\n\n```C++\nvoid GetVertexAttribPointerv(uint index, enum pname, void **pointer);\n```\n- pname: VERTEX_ATTRIB_ARRAY_POINTER\n\n#### Uniform\u5909\u6570\u306e\u5024\u306e\u53d6\u5f97\n```C++\nvoid GetUniformfv(uint program, int location, float *params)\nvoid GetUniformiv(uint program, int location, int *params)\n```\n\n### \u30d7\u30ed\u30b0\u30e9\u30e0\u3078\u306e\u554f\u3044\u5408\u308f\u305b\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3042\u308b\u304b\uff1f\n```C++\nboolean IsProgram(uint program);\n```\n\n#### \u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u53d6\u5f97\n```C++\nvoid GetProgramiv(uint program, enum pname, int *params);\n```\n- pname: DELETE_STATUS, LINK_STATUS, VALIDATE_STATUS, INFO_LOG_LENGTH, ATTACHED_SHADERS, ACTIVE_ATTRIBUTES, ACTIVE_ATTRIBUTE_MAX_LENGTH, ACTIVE_UNIFORMS, ACTIVE_UNIFORM_MAX_LENGTH\n\n- \u30b7\u30a7\u30fc\u30c0\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30ed\u30b0\u306e\u53d6\u5f97\n```C++\nvoid GetProgramInfoLog(uint program, sizei bufSize, sizei *length, char *infoLog);\n```\n\n## \u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u524d\u306e\u64cd\u4f5c\n### \u30b7\u30b6\u30fc\u30c6\u30b9\u30c8\n#### \u6709\u52b9\uff0f\u7121\u52b9\n```C++\nEnable/Disable(SCISSOR_TEST)\n```\n\n- \u30b7\u30b6\u30fc\u7bc4\u56f2\u306e\u6307\u5b9a\nvoid Scissor(int left, int bottom, sizei width, sizei height );\n\n### \u30de\u30eb\u30c1\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u64cd\u4f5c\n#### \u6709\u52b9\uff0f\u7121\u52b9\n```C++\nEnable/Disable(cap)\n```\n- cap: SAMPLE_ALPHA_TO_COVERAGE, SAMPLE_COVERAGE\n\n#### \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u7bc4\u56f2\u306e\u6307\u5b9a\n```C++\nvoid SampleCoverage(clampf value, boolean invert);\n```\n\n### \u30b9\u30c6\u30f3\u30b7\u30eb\u30c6\u30b9\u30c8\n#### \u6709\u52b9\uff0f\u7121\u52b9\n```C++\nEnable/Disable(STENCIL_TEST)\n```\n\n#### \u30b9\u30c6\u30f3\u30b7\u30eb\u95a2\u6570\u306e\u6307\u5b9a\n```C++\nvoid StencilFunc(enum func, int ref, uint mask);\n```\n\n#### \u30b9\u30c6\u30f3\u30b7\u30eb\u95a2\u6570\u306e\u500b\u5225\u6307\u5b9a\n```C++\nvoid StencilFuncSeparate(enum face, enum func, int ref, uint mask);\n\n```\n#### \u30b9\u30c6\u30f3\u30b7\u30eb\u64cd\u4f5c\u306e\u6307\u5b9a\n```C++\nvoid StencilOp(enum sfail, enum dpfail, enum dppass);\n```\n\n#### \u30b9\u30c6\u30f3\u30b7\u30eb\u64cd\u4f5c\u306e\u500b\u5225\u6307\u5b9a\n```C++\nvoid StencilOpSeparate(enum face, enum sfail, enum dpfail, enum dppass);\n```\n- face: FRONT, BACK, FRONT_AND_BACK\n- sfail, dpfail, dppass: KEEP, ZERO, REPLACE, INCR, DECR, INVERT, INCR_WRAP, DECR_WRAP\n- func: NEVER, ALWAYS, LESS, LEQUAL, EQUAL, GREATER, GEQUAL, NOTEQUAL\n\n### \u6df1\u5ea6\u30c6\u30b9\u30c8\n#### \u6709\u52b9\uff0f\u7121\u52b9\n```C++\nEnable/Disable(DEPTH_TEST)\n```\n\n#### \u6df1\u5ea6\u30c6\u30b9\u30c8\u95a2\u6570\u306e\u6307\u5b9a\n```C++\nvoid DepthFunc(enum func);\n```\n- func: NEVER, ALWAYS, LESS, LEQUAL, EQUAL, GREATER, GEQUAL, NOTEQUAL\n\n### \u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\n#### \u6709\u52b9\uff0f\u7121\u52b9\n```C++\nEnable/Disable(BLEND) (applies to all draw buffers)\n```\n\n#### \u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\u5f0f\u306e\u6307\u5b9a\n```C++\nvoid BlendEquation(enum mode);\n```\n\n#### \u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\u5f0f\u306e\u500b\u5225\u6307\u5b9a\n```C++\nvoid BlendEquationSeparate(enum modeRGB, enum modeAlpha);\n```\n\n- mode, modeRGB, modeAlpha: FUNC_ADD, FUNC_SUBTRACT, FUNC_REVERSE_SUBTRACT\n\n#### \u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\u95a2\u6570\u306e\u500b\u5225\u6307\u5b9a\n```C++\nvoid BlendFuncSeparate(enum srcRGB, enum dstRGB, enum srcAlpha, enum dstAlpha);\n```\n\n#### \u30d6\u30ec\u30f3\u30c7\u30a3\u30f3\u30b0\u95a2\u6570\u306e\u6307\u5b9a\n```C++\nvoid BlendFunc(enum src, enum dst);\n```\n- dst, dstRGB, dstAlpha: ZERO, ONE, [ONE_MINUS_]SRC_COLOR, [ONE_MINUS_]DST_COLOR,[ONE_MINUS_]SRC_ALPHA, [ONE_MINUS_]DST_ALPHA, [ONE_MINUS_]CONSTANT_COLOR, [ONE_MINUS_]CONSTANT_ALPHA\n- src, srcRGB, srcAlpha: dst\u3068\u540c\u3058 + SRC_ALPHA_SATURATE\n\n```C++\nvoid BlendColor(clampf red, clampf green, clampf blue, clampf alpha);\n```\n\n### \u30c7\u30a3\u30b6\n#### \u6709\u52b9\uff0f\u7121\u52b9\n```C++\nEnable/Disable(DITHER)\n```\n\n## \u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u64cd\u4f5c\n#### \u8272\u30de\u30b9\u30af\u306e\u6307\u5b9a\n```C++\nvoid ColorMask(boolean r, boolean g, boolean b, boolean a);\n```\n\n#### \u6df1\u5ea6\u30de\u30b9\u30af\u306e\u6307\u5b9a\n```C++\nvoid DepthMask(boolean mask);\n```\n\n#### \u30b9\u30c6\u30f3\u30b7\u30eb\u30de\u30b9\u30af\u306e\u6307\u5b9a\n```C++\nvoid StencilMask(uint mask);\n```\n\n#### \u30b9\u30c6\u30f3\u30b7\u30eb\u30de\u30b9\u30af\u306e\u500b\u5225\u6307\u5b9a\n```C++\nvoid StencilMaskSeparate(enum face, uint mask);\n```\n- face: FRONT, BACK, FRONT_AND_BACK\n\n#### \u30d0\u30c3\u30d5\u30a1\u306e\u30af\u30ea\u30a2\n```C++\nvoid Clear(bitfield buf);\n```\n- buf: COLOR_BUFFER_BIT, DEPTH_BUFFER_BIT, STENCIL_BUFFER_BIT\u3000\u306e\u30d3\u30c3\u30c8\u3054\u3068\u306eOR\n\n#### \u8272\u30d0\u30c3\u30d5\u30a1\u306e\u30af\u30ea\u30a2\n```C++\nvoid ClearColor(clampf r, clampf g, clampf b, clampf a);\n```\n#### \u6df1\u5ea6\u30d0\u30c3\u30d5\u30a1\u306e\u30af\u30ea\u30a2\n```C++\nvoid ClearDepthf(clampf d);\n```\n#### \u30b9\u30c6\u30f3\u30b7\u30eb\u30d0\u30c3\u30d5\u30a1\u306e\u30af\u30ea\u30a2\n```C++\nvoid ClearStencil(int s);\n\n```\n### \u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306e\u7d50\u5408\u3068\u7ba1\u7406\n#### \u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306e\u7d50\u5408\n```C++\nvoid BindFramebuffer(enum target, uint framebuffer);\n```\n- target: FRAMEBUFFER \n\n### \u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306e\u524a\u9664\n```C++\nvoid DeleteFramebuffers(sizei n, uint *framebuffers);\n```\n#### \u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306e\u53d6\u5f97\n```C++\nvoid GenFramebuffers(sizei n, uint *framebuffers);\n```\n\n### \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n#### \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u306e\u7d50\u5408\n```C++\nvoid BindRenderbuffer(enum target, uint renderbuffer);\n```\n- target: RENDERBUFFER\n\n#### \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u306e\u524a\u9664\n```C++\nvoid DeleteRenderbuffers(sizei n, const uint *renderbuffers);\n```\n#### \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u914d\u5217\u306e\u4f5c\u6210\n```C++\nvoid GenRenderbuffers(sizei n, uint *renderbuffers);\n```\n#### \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u30b9\u30c8\u30ec\u30fc\u30b8\u306e\u6307\u5b9a\n```C++\nvoid RenderbufferStorage(enum target, enum internalformat, sizei width, sizei height);\n```\n- target: RENDERBUFFER\n- internalformat: DEPTH_COMPONENT16, RGBA4, RGB5_A1, RGB565, STENCIL_INDEX8 \n\n#### \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u753b\u50cf\u306e\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u30a2\u30bf\u30c3\u30c1\n```C++\nvoid FramebufferRenderbuffer(enum target, enum attachment, enum renderbuffertarget, uint renderbuffer);\n```\n- target: FRAMEBUFFER\n- attachment: COLOR_ATTACHMENT0, DEPTH_ATTACHMENT, STENCIL_ATTACHMENT\n- renderbuffertarget: RENDERBUFFER\n\n#### \u30c6\u30af\u30b9\u30c1\u30e3\u753b\u50cf\u306e\u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u30a2\u30bf\u30c3\u30c1\n```C++\nvoid FramebufferTexture2D(enum target, enum attachment, enum textarget, uint texture, int level);\n```\n- textarget: TEXTURE_2D, TEXTURE_CUBE_MAP_POSITIVE{X, Y, Z}, TEXTURE_CUBE_MAP_NEGATIVE{X, Y, Z}, \n- target: FRAMEBUFFER\n- attachment: COLOR_ATTACHMENT0, DEPTH_ATTACHMENT, STENCIL_ATTACHMENT\n\n#### \u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u3092\u30c1\u30a7\u30c3\u30af\n```C++\nenum CheckFramebufferStatus(enum target);\n```\n- target: FRAMEBUFFER\n- returns: FRAMEBUFFER_COMPLETE or a constant indicating which value violates framebuffer completeness\n\n### \u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u554f\u3044\u5408\u308f\u305b\n#### \u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u304c\u3042\u308b\u304b\uff1f\n```C++\nboolean IsFramebuffer(uint framebuffer);\n```\n\n#### \u30d5\u30ec\u30fc\u30e0\u30d0\u30c3\u30d5\u30a1\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u5f97\n```C++\nvoid GetFramebufferAttachmentParameteriv(enum target, enum attachment, enum pname, int *params);\n```\n- target: FRAMEBUFFER\n- attachment: COLOR_ATTACHMENT0, DEPTH_ATTACHMENT, STENCIL_ATTACHMENT\n- pname: FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE,FRAMEBUFFER_ATTACHMENT_OBJECT_NAME,FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\n\n### \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u3078\u306e\u554f\u3044\u5408\u308f\u305b\n#### \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u304c\u3042\u308b\u304b\uff1f\n```C++\nboolean IsRenderbuffer(uint renderbuffer);\n```\n\n#### \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u5f97\n```C++\nvoid GetRenderbufferParameteriv(enum target, enum pname, int *params);\n```\n- target: RENDERBUFFER\n- pname: RENDERBUFFER_x (x \u306f WIDTH, HEIGHT, RED_SIZE, GREEN_SIZE, BLUE_SIZE, ALPHA_SIZE, DEPTH_SIZE, STENCIL_SIZE, INTERNAL_FORMAT)\n\n## \u305d\u306e\u4ed6\n#### \u5358\u7d14\u306a\u554f\u3044\u5408\u308f\u305b\n```C++\nvoid GetBooleanv(enum value, boolean *data);\nvoid GetIntegerv(enum value, int *data);\nvoid GetFloatv(enum value, float *data);\nboolean IsEnabled(enum value);\n```\n\n#### \u30dd\u30a4\u30f3\u30bf\u3068\u6587\u5b57\u5217\u3067\u306e\u554f\u3044\u5408\u308f\u305b\n```C++\nubyte *GetString(enum name); \n```\n- name: VENDOR, RENDERER, VERSION, SHADING_LANGUAGE_VERSION, EXTENSIONS\n\n#### \u30d0\u30c3\u30d5\u30a1\u30d5\u30e9\u30c3\u30b7\u30e5\u3068\u7d42\u4e86\n```C++\nvoid Flush(void);\nvoid Finish(void);\n```\n\n#### \u30d2\u30f3\u30c8\n```C++\nvoid Hint(enum target, enum hint);\n```\n- target: GENERATE_MIPMAP_HINT\n- hint: FASTEST, NICEST, DONT_CARE\n", "tags": ["Shader", "OpenGLES"]}