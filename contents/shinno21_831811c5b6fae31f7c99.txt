{"context": "\n\n\u59cb\u3081\u306b\nDjango \u306e\u6c4e\u7528\u30af\u30e9\u30b9\u30d3\u30e5\u30fc\u306f\u3068\u3066\u3082\u4fbf\u5229\u3067\u306f\u3042\u308b\u304c\u3001\u5185\u90e8\u3067\u4f55\u3084\u3063\u3066\u308b\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u6700\u521d\u306f\u30cf\u30fc\u30c9\u30eb\u9ad8\u3044\u3002\n\u5185\u90e8\u51e6\u7406\u3092\u628a\u63e1\u3057\u305f\u4e0a\u3067\u5b9f\u88c5\u306b\u4f7f\u3048\u3070\u66f4\u306b\u751f\u7523\u6027\u304c\u9ad8\u307e\u308b\u3068\u306e\u601d\u3044\u304b\u3089\u4ee5\u4e0b\u306e\u8aac\u660e\u3092\u884c\u3046\u3002\n\n\u30d3\u30e5\u30fc\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\nhttp://docs.djangoproject.jp/en/latest/topics/http/views.html\n\u3053\u3061\u3089\u306f\u5206\u304b\u308a\u3084\u3059\u3044\u3002\nurls\u306b\u95a2\u6570\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u3058\u3066\u547c\u3073\u51fa\u3059\u3002\nviews.schedule_list \u3068 url \u3092\u95a2\u9023\u4ed8\u3051\u308b\n\nscheduler.urls.py\nfrom django.conf.urls import patterns, include, url\nimport views\n\nurlpatterns = patterns('',\n    url(r'^$', views.schedule_list , name='scheduler_toppage'),\n)\n\n\n\u95a2\u6570 views.schedule_list \u306e\u51e6\u7406\n\nscheduler.views.py\nfrom django.shortcuts import render\nfrom models import Schedule, VisitorSchedule, MemberSchedule, HelperSchedule\nfrom datetime import datetime\n\n\ndef schedule_list(request):\n    schedule_list = Schedule.objects.filter(event_date__gte=datetime.now()).select_related()\n\n    for schedule in schedule_list:\n        visitor_schedules = VisitorSchedule.objects.filter(schedule_id=schedule.id).select_related()\n        schedule.visitor_schedules = visitor_schedules\n\n        member_schedules = MemberSchedule.objects.filter(schedule_id=schedule.id)\n        schedule.member_schedules = member_schedules\n\n        helper_schedules = HelperSchedule.objects.filter(schedule_id=schedule.id)\n        schedule.helper_schedules = helper_schedules\n\n    return render(request, 'scheduler/schedule_list.html', {'schedule_list': schedule_list})\n\n\n\n\u6c4e\u7528\u30af\u30e9\u30b9\u30d3\u30e5\u30fc\u306e\u547c\u3073\u51fa\u3057\n\u4e00\u65b9\u3001\u6c4e\u7528\u30af\u30e9\u30b9\u30d3\u30e5\u30fc\u306f\u958b\u767a\u306f\u7c21\u5358\u3060\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u30fb\u30fb\u30fb\nas_view \u3063\u3066\u4f55\uff1f\n\nsample_app.urls\nfrom django.conf.urls import patterns, url, include\nfrom django.views.generic import ListView\n\nurlpatterns = patterns('',\n    (r'^items/$', ListView.as_view()),\n)\n\n\n\nsample_app.views\nfrom django.views.generic import ListView\nfrom sample_app.models import Item\n\nclass ItemView(ListView):\n    model = Item\n\n\n\nas_view \u306f\u4f55\u3092\u3057\u3066\u308b\u306e\u304b\nas_view \u306f\u6c4e\u7528\u30af\u30e9\u30b9\u30d3\u30e5\u30fc\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\u4ee5\u4e0b\u306fdjango1.9.7 \u306eView\u30af\u30e9\u30b9\n\u5e73\u305f\u304f\u8a00\u3046\u3068\u3001dispatch\u306e\u3068\u3053\u308d\u3067\u3001HTTP\u30e1\u30bd\u30c3\u30c9(GET\u3068\u304bPOST\u3068\u304b)\u306b\u5bfe\u5fdc\u3057\u305f\u540d\u524d\u306eView\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3088\u3046\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\uff08GET\u30e1\u30bd\u30c3\u30c9\u306a\u3089\u3001def get\u3092\u547c\u3076\uff09\n\ndjango.views.generic.base.View\nclass View(object):\n    \"\"\"\n    Intentionally simple parent class for all views. Only implements\n    dispatch-by-method and simple sanity checking.\n    \"\"\"\n\n    http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']\n\n    def __init__(self, **kwargs):\n        \"\"\"\n        Constructor. Called in the URLconf; can contain helpful extra\n        keyword arguments, and other things.\n        \"\"\"\n        # Go through keyword arguments, and either save their values to our\n        # instance, or raise an error.\n        for key, value in six.iteritems(kwargs):\n            setattr(self, key, value)\n\n    # \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092url\u3068\u95a2\u9023\u4ed8\u3051\u308b\n    @classonlymethod\n    def as_view(cls, **initkwargs):\n        \"\"\"\n        Main entry point for a request-response process.\n        \"\"\"\n        for key in initkwargs:\n            if key in cls.http_method_names:\n                raise TypeError(\"You tried to pass in the %s method name as a \"\n                                \"keyword argument to %s(). Don't do that.\"\n                                % (key, cls.__name__))\n            if not hasattr(cls, key):\n                raise TypeError(\"%s() received an invalid keyword %r. as_view \"\n                                \"only accepts arguments that are already \"\n                                \"attributes of the class.\" % (cls.__name__, key))\n\n        def view(request, *args, **kwargs):\n            self = cls(**initkwargs)\n            if hasattr(self, 'get') and not hasattr(self, 'head'):\n                self.head = self.get\n            self.request = request\n            self.args = args\n            self.kwargs = kwargs\n            return self.dispatch(request, *args, **kwargs)\n        view.view_class = cls\n        view.view_initkwargs = initkwargs\n\n        # take name and docstring from class\n        update_wrapper(view, cls, updated=())\n\n        # and possible attributes set by decorators\n        # like csrf_exempt from dispatch\n        update_wrapper(view, cls.dispatch, assigned=())\n        return view\n\n    # \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3067HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u3058\u305fView\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u3001\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n    # \u4f8b\u3048\u3070\u3001GET\u30e1\u30bd\u30c3\u30c9\u3067\u547c\u3073\u51fa\u3055\u308c\u305f\u3089\u3001def get\u3068\u3044\u3046View\u30af\u30e9\u30b9\u5185\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\n    # \u4ee5\u4e0b\u306b\u5b9f\u4f8b\u3092\u66f8\u3044\u305f\u306e\u3067\u53c2\u7167\u306e\u4e8b\n    def dispatch(self, request, *args, **kwargs):\n        # Try to dispatch to the right method; if a method doesn't exist,\n        # defer to the error handler. Also defer to the error handler if the\n        # request method isn't on the approved list.\n        if request.method.lower() in self.http_method_names:\n            handler = getattr(self, request.method.lower(), self.http_method_not_allowed)\n        else:\n            handler = self.http_method_not_allowed\n        return handler(request, *args, **kwargs)\n\n    def http_method_not_allowed(self, request, *args, **kwargs):\n        logger.warning('Method Not Allowed (%s): %s', request.method, request.path,\n            extra={\n                'status_code': 405,\n                'request': request\n            }\n        )\n        return http.HttpResponseNotAllowed(self._allowed_methods())\n\n    def options(self, request, *args, **kwargs):\n        \"\"\"\n        Handles responding to requests for the OPTIONS HTTP verb.\n        \"\"\"\n        response = http.HttpResponse()\n        response['Allow'] = ', '.join(self._allowed_methods())\n        response['Content-Length'] = '0'\n        return response\n\n    def _allowed_methods(self):\n        return [m.upper() for m in self.http_method_names if hasattr(self, m)]\n\n\n\u4f8b\u3048\u3070django.views.generic.list.ListView\u3092\u7d99\u627f\u3057\u305fView\u30af\u30e9\u30b9\u306eas_view\u3092\u3001\nHTTP GET\u30e1\u30bd\u30c3\u30c9\u3067\u547c\u3073\u51fa\u3059\u3068\u3001ListView\u304c\u7d99\u627f\u3057\u3066\u3044\u308b\u3001BaseListView\u306eget\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\ndjango.views.generic.list\n\nclass BaseListView(MultipleObjectMixin, View):\n    \"\"\"\n    A base view for displaying a list of objects.\n    \"\"\"\n    def get(self, request, *args, **kwargs):\n        self.object_list = self.get_queryset()\n        allow_empty = self.get_allow_empty()\n\n        if not allow_empty:\n            # When pagination is enabled and object_list is a queryset,\n            # it's better to do a cheap query than to load the unpaginated\n            # queryset in memory.\n            if (self.get_paginate_by(self.object_list) is not None\n                    and hasattr(self.object_list, 'exists')):\n                is_empty = not self.object_list.exists()\n            else:\n                is_empty = len(self.object_list) == 0\n            if is_empty:\n                raise Http404(_(\"Empty list and '%(class_name)s.allow_empty' is False.\")\n                        % {'class_name': self.__class__.__name__})\n        context = self.get_context_data()\n        return self.render_to_response(context)\n\nclass ListView(MultipleObjectTemplateResponseMixin, BaseListView):\n    \"\"\"\n    Render some list of objects, set by `self.model` or `self.queryset`.\n    `self.queryset` can actually be any iterable of items, not just a queryset.\n    \"\"\"\n\n\n\n\u3053\u306e\u5185\u5bb9\u3092\u7406\u89e3\u3059\u308c\u3070\u3001\u6c4e\u7528\u30af\u30e9\u30b9\u30d3\u30e5\u30fc\u3092\u5229\u7528\u3057\u305f\u4e0a\u3067\u8272\u3005\u5fdc\u7528\u304c\u52b9\u304f\u3088\u3046\u306b\u306a\u308b\u3002\n### \u59cb\u3081\u306b\n\nDjango \u306e\u6c4e\u7528\u30af\u30e9\u30b9\u30d3\u30e5\u30fc\u306f\u3068\u3066\u3082\u4fbf\u5229\u3067\u306f\u3042\u308b\u304c\u3001\u5185\u90e8\u3067\u4f55\u3084\u3063\u3066\u308b\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u6700\u521d\u306f\u30cf\u30fc\u30c9\u30eb\u9ad8\u3044\u3002\n\n\u5185\u90e8\u51e6\u7406\u3092\u628a\u63e1\u3057\u305f\u4e0a\u3067\u5b9f\u88c5\u306b\u4f7f\u3048\u3070\u66f4\u306b\u751f\u7523\u6027\u304c\u9ad8\u307e\u308b\u3068\u306e\u601d\u3044\u304b\u3089\u4ee5\u4e0b\u306e\u8aac\u660e\u3092\u884c\u3046\u3002\n\n\n### \u30d3\u30e5\u30fc\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\n\nhttp://docs.djangoproject.jp/en/latest/topics/http/views.html\n\n\u3053\u3061\u3089\u306f\u5206\u304b\u308a\u3084\u3059\u3044\u3002\nurls\u306b\u95a2\u6570\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u3058\u3066\u547c\u3073\u51fa\u3059\u3002\n\nviews.schedule_list \u3068 url \u3092\u95a2\u9023\u4ed8\u3051\u308b\n\n```python:scheduler.urls.py\nfrom django.conf.urls import patterns, include, url\nimport views\n\nurlpatterns = patterns('',\n    url(r'^$', views.schedule_list , name='scheduler_toppage'),\n)\n```\n\n\u95a2\u6570 views.schedule_list \u306e\u51e6\u7406\n\n```python:scheduler.views.py\nfrom django.shortcuts import render\nfrom models import Schedule, VisitorSchedule, MemberSchedule, HelperSchedule\nfrom datetime import datetime\n\n\ndef schedule_list(request):\n    schedule_list = Schedule.objects.filter(event_date__gte=datetime.now()).select_related()\n\n    for schedule in schedule_list:\n        visitor_schedules = VisitorSchedule.objects.filter(schedule_id=schedule.id).select_related()\n        schedule.visitor_schedules = visitor_schedules\n\n        member_schedules = MemberSchedule.objects.filter(schedule_id=schedule.id)\n        schedule.member_schedules = member_schedules\n\n        helper_schedules = HelperSchedule.objects.filter(schedule_id=schedule.id)\n        schedule.helper_schedules = helper_schedules\n\n    return render(request, 'scheduler/schedule_list.html', {'schedule_list': schedule_list})\n```\n\n### \u6c4e\u7528\u30af\u30e9\u30b9\u30d3\u30e5\u30fc\u306e\u547c\u3073\u51fa\u3057\n\n\u4e00\u65b9\u3001\u6c4e\u7528\u30af\u30e9\u30b9\u30d3\u30e5\u30fc\u306f\u958b\u767a\u306f\u7c21\u5358\u3060\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u30fb\u30fb\u30fb\nas_view \u3063\u3066\u4f55\uff1f\n\n```python:sample_app.urls\nfrom django.conf.urls import patterns, url, include\nfrom django.views.generic import ListView\n\nurlpatterns = patterns('',\n    (r'^items/$', ListView.as_view()),\n)\n```\n\n```python:sample_app.views\nfrom django.views.generic import ListView\nfrom sample_app.models import Item\n\nclass ItemView(ListView):\n    model = Item\n```\n\n\n### as_view \u306f\u4f55\u3092\u3057\u3066\u308b\u306e\u304b\n\nas_view \u306f\u6c4e\u7528\u30af\u30e9\u30b9\u30d3\u30e5\u30fc\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\u4ee5\u4e0b\u306fdjango1.9.7 \u306eView\u30af\u30e9\u30b9\n\n\u5e73\u305f\u304f\u8a00\u3046\u3068\u3001dispatch\u306e\u3068\u3053\u308d\u3067\u3001HTTP\u30e1\u30bd\u30c3\u30c9(GET\u3068\u304bPOST\u3068\u304b)\u306b\u5bfe\u5fdc\u3057\u305f\u540d\u524d\u306eView\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3088\u3046\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\uff08GET\u30e1\u30bd\u30c3\u30c9\u306a\u3089\u3001def get\u3092\u547c\u3076\uff09\n\n```python:django.views.generic.base.View\nclass View(object):\n    \"\"\"\n    Intentionally simple parent class for all views. Only implements\n    dispatch-by-method and simple sanity checking.\n    \"\"\"\n\n    http_method_names = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'trace']\n\n    def __init__(self, **kwargs):\n        \"\"\"\n        Constructor. Called in the URLconf; can contain helpful extra\n        keyword arguments, and other things.\n        \"\"\"\n        # Go through keyword arguments, and either save their values to our\n        # instance, or raise an error.\n        for key, value in six.iteritems(kwargs):\n            setattr(self, key, value)\n\n    # \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092url\u3068\u95a2\u9023\u4ed8\u3051\u308b\n    @classonlymethod\n    def as_view(cls, **initkwargs):\n        \"\"\"\n        Main entry point for a request-response process.\n        \"\"\"\n        for key in initkwargs:\n            if key in cls.http_method_names:\n                raise TypeError(\"You tried to pass in the %s method name as a \"\n                                \"keyword argument to %s(). Don't do that.\"\n                                % (key, cls.__name__))\n            if not hasattr(cls, key):\n                raise TypeError(\"%s() received an invalid keyword %r. as_view \"\n                                \"only accepts arguments that are already \"\n                                \"attributes of the class.\" % (cls.__name__, key))\n        \n        def view(request, *args, **kwargs):\n            self = cls(**initkwargs)\n            if hasattr(self, 'get') and not hasattr(self, 'head'):\n                self.head = self.get\n            self.request = request\n            self.args = args\n            self.kwargs = kwargs\n            return self.dispatch(request, *args, **kwargs)\n        view.view_class = cls\n        view.view_initkwargs = initkwargs\n\n        # take name and docstring from class\n        update_wrapper(view, cls, updated=())\n\n        # and possible attributes set by decorators\n        # like csrf_exempt from dispatch\n        update_wrapper(view, cls.dispatch, assigned=())\n        return view\n\n    # \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3067HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5fdc\u3058\u305fView\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u3001\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n    # \u4f8b\u3048\u3070\u3001GET\u30e1\u30bd\u30c3\u30c9\u3067\u547c\u3073\u51fa\u3055\u308c\u305f\u3089\u3001def get\u3068\u3044\u3046View\u30af\u30e9\u30b9\u5185\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\n    # \u4ee5\u4e0b\u306b\u5b9f\u4f8b\u3092\u66f8\u3044\u305f\u306e\u3067\u53c2\u7167\u306e\u4e8b\n    def dispatch(self, request, *args, **kwargs):\n        # Try to dispatch to the right method; if a method doesn't exist,\n        # defer to the error handler. Also defer to the error handler if the\n        # request method isn't on the approved list.\n        if request.method.lower() in self.http_method_names:\n            handler = getattr(self, request.method.lower(), self.http_method_not_allowed)\n        else:\n            handler = self.http_method_not_allowed\n        return handler(request, *args, **kwargs)\n\n    def http_method_not_allowed(self, request, *args, **kwargs):\n        logger.warning('Method Not Allowed (%s): %s', request.method, request.path,\n            extra={\n                'status_code': 405,\n                'request': request\n            }\n        )\n        return http.HttpResponseNotAllowed(self._allowed_methods())\n\n    def options(self, request, *args, **kwargs):\n        \"\"\"\n        Handles responding to requests for the OPTIONS HTTP verb.\n        \"\"\"\n        response = http.HttpResponse()\n        response['Allow'] = ', '.join(self._allowed_methods())\n        response['Content-Length'] = '0'\n        return response\n\n    def _allowed_methods(self):\n        return [m.upper() for m in self.http_method_names if hasattr(self, m)]\n```\n\n\u4f8b\u3048\u3070django.views.generic.list.ListView\u3092\u7d99\u627f\u3057\u305fView\u30af\u30e9\u30b9\u306eas_view\u3092\u3001\nHTTP GET\u30e1\u30bd\u30c3\u30c9\u3067\u547c\u3073\u51fa\u3059\u3068\u3001ListView\u304c\u7d99\u627f\u3057\u3066\u3044\u308b\u3001BaseListView\u306eget\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\n\n```python:django.views.generic.list\n\nclass BaseListView(MultipleObjectMixin, View):\n    \"\"\"\n    A base view for displaying a list of objects.\n    \"\"\"\n    def get(self, request, *args, **kwargs):\n        self.object_list = self.get_queryset()\n        allow_empty = self.get_allow_empty()\n\n        if not allow_empty:\n            # When pagination is enabled and object_list is a queryset,\n            # it's better to do a cheap query than to load the unpaginated\n            # queryset in memory.\n            if (self.get_paginate_by(self.object_list) is not None\n                    and hasattr(self.object_list, 'exists')):\n                is_empty = not self.object_list.exists()\n            else:\n                is_empty = len(self.object_list) == 0\n            if is_empty:\n                raise Http404(_(\"Empty list and '%(class_name)s.allow_empty' is False.\")\n                        % {'class_name': self.__class__.__name__})\n        context = self.get_context_data()\n        return self.render_to_response(context)\n\nclass ListView(MultipleObjectTemplateResponseMixin, BaseListView):\n    \"\"\"\n    Render some list of objects, set by `self.model` or `self.queryset`.\n    `self.queryset` can actually be any iterable of items, not just a queryset.\n    \"\"\"\n\n```\n\n\u3053\u306e\u5185\u5bb9\u3092\u7406\u89e3\u3059\u308c\u3070\u3001\u6c4e\u7528\u30af\u30e9\u30b9\u30d3\u30e5\u30fc\u3092\u5229\u7528\u3057\u305f\u4e0a\u3067\u8272\u3005\u5fdc\u7528\u304c\u52b9\u304f\u3088\u3046\u306b\u306a\u308b\u3002\n", "tags": ["Django"]}