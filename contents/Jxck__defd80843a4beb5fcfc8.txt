{"tags": ["es7", "babel5.4.7"], "context": " More than 1 year has passed since last update.D\u8a00\u8a9e\u306e\u5951\u7d04\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b5\u30dd\u30fc\u30c8\u306b\u89e6\u767a\u3055\u308c\u305f\u3002\n\nhttp://www.kmonos.net/alang/d/dbc.html\nhttp://www.kmonos.net/alang/d/class.html#invariants\n\nD\u3067\u5b9f\u969b\u3069\u3053\u307e\u3067\u3067\u304d\u308b\u304b\u306f\u3042\u307e\u308a\u308f\u304b\u3063\u3066\u306a\u3044\u304c\u3001\u73fe\u5b9f\u7684\u306b\u306f\u3053\u3093\u306a\u611f\u3058\u3060\u308d\u3046\u304b\u3002\n// $ babel-node --optional es7.decorators index.js\nclass Counter {\n  constructor(initial = 0) {\n    this.current = initial;\n  }\n\n  @contract\n  up(i) {\n    this.current += i;\n    return this.current;\n  }\n}\n\nfunction contract(tar, name, desc) {\n\n  // \u4e8b\u524d\u6761\u4ef6\n  function before(i) {\n    console.assert(i > 0, `arg for ${name} should be positive value`);\n  }\n\n  // \u4e8b\u5f8c\u6761\u4ef6\n  function after(result) {\n    console.assert(result > 0, `result of ${name} should be positive value`);\n  }\n\n  // \u4e0d\u5909\u6761\u4ef6\n  function invariant(_this) {\n    console.assert(_this.current > 0, 'current should be positive value');\n  }\n\n  let val = desc.value;\n  desc.value = function(i) {\n\n    before(i);\n    invariant(this);\n\n    let result = val.apply(this, arguments);\n\n    invariant(this);\n    after(result);\n\n    return result;\n  }\n}\n\nfunction main() {\n  let counter = new Counter(10);\n  console.log(counter.up(1));\n}\nmain();\n\n\u6c4e\u7528\u5316\u3059\u308b\u3068\nfunction contract(rule) {\n  return function(target, name, descriptor) {\n    let rule = new Rule(target, name, descriptor);\n    let original = descriptor.value;\n    descriptor.value = function() {\n\n      if (rule.before) rule.before.apply(rule, arguments);\n\n      if (rule.invaliant) rule.invaliant(this);\n\n      let result = original.apply(this, arguments);\n\n      if (rule.invaliant) rule.invaliant(this);\n\n      if (rule.after) rule.after(result);\n\n      return result;\n    }\n  }\n}\n\nclass Rule {\n  constructor(target, name, descriptor) {\n    this.target = target;\n    this.name = name;\n    this.descriptor = descriptor;\n  }\n\n  before(i) {\n    console.log('before', i);\n    console.assert(i > 0, `arg for ${this.name} should be positive value`);\n  }\n\n  after(result) {\n    console.log('after', result);\n    console.assert(result > 0, `result of ${this.name} should be positive value`);\n  }\n\n  invaliant(_this) {\n    console.log('invaliant', _this);\n    console.assert(_this.current > 0, '`current` should be positive value');\n  }\n}\n\nfunction main() {\n\n  class Counter {\n    constructor(initial = 0) {\n      this.current = initial;\n    }\n\n    @contract(Rule)\n    up(i) {\n      this.current += i;\n      return this.current;\n    }\n  }\n\n  let counter = new Counter(10);\n  console.log(counter.up(2));\n}\n\nmain();\n\nD \u3067\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3053\u306e\u8fba\u306f\u6d88\u3059\u3002Java \u3082 --ea \u3092\u4ed8\u3051\u306a\u3044\u3068\u6d88\u3048\u308b\u3002\n\u305d\u308c\u3092\u3057\u305f\u3051\u308c\u3070 babel \u6642\u306b @contract \u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u6d88\u3057\u3066\u3001\nclosure compiler \u307f\u305f\u3044\u306a\u300c\u4e0d\u4f7f\u7528\u30b3\u30fc\u30c9\u524a\u9664\u300d\u306a minify \u3068\u304b\u3092\u304b\u307e\u305b\u3070\u6d88\u305b\u308b\u3002\n(\u3057\u304b\u3057\u3001\u52d5\u7684\u3067\u7de9\u3044\u578b\u4ed8\u3051\u306e JS \u307f\u305f\u3044\u306a\u8a00\u8a9e\u3067\u306f\u3001\u5b9f\u884c\u6642 assertion \u3053\u305d\u6b8b\u3063\u3066\u308b\u30d9\u30ad\u306a\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u308f\u306a\u304f\u3082\u7121\u3044\u3002)\nD\u8a00\u8a9e\u306e\u5951\u7d04\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b5\u30dd\u30fc\u30c8\u306b\u89e6\u767a\u3055\u308c\u305f\u3002\n\n- http://www.kmonos.net/alang/d/dbc.html\n- http://www.kmonos.net/alang/d/class.html#invariants\n\nD\u3067\u5b9f\u969b\u3069\u3053\u307e\u3067\u3067\u304d\u308b\u304b\u306f\u3042\u307e\u308a\u308f\u304b\u3063\u3066\u306a\u3044\u304c\u3001\u73fe\u5b9f\u7684\u306b\u306f\u3053\u3093\u306a\u611f\u3058\u3060\u308d\u3046\u304b\u3002\n\n```js\n// $ babel-node --optional es7.decorators index.js\nclass Counter {\n  constructor(initial = 0) {\n    this.current = initial;\n  }\n\n  @contract\n  up(i) {\n    this.current += i;\n    return this.current;\n  }\n}\n\nfunction contract(tar, name, desc) {\n\n  // \u4e8b\u524d\u6761\u4ef6\n  function before(i) {\n    console.assert(i > 0, `arg for ${name} should be positive value`);\n  }\n\n  // \u4e8b\u5f8c\u6761\u4ef6\n  function after(result) {\n    console.assert(result > 0, `result of ${name} should be positive value`);\n  }\n\n  // \u4e0d\u5909\u6761\u4ef6\n  function invariant(_this) {\n    console.assert(_this.current > 0, 'current should be positive value');\n  }\n\n  let val = desc.value;\n  desc.value = function(i) {\n\n    before(i);\n    invariant(this);\n\n    let result = val.apply(this, arguments);\n\n    invariant(this);\n    after(result);\n\n    return result;\n  }\n}\n\nfunction main() {\n  let counter = new Counter(10);\n  console.log(counter.up(1));\n}\nmain();\n```\n\n\u6c4e\u7528\u5316\u3059\u308b\u3068\n\n```js\nfunction contract(rule) {\n  return function(target, name, descriptor) {\n    let rule = new Rule(target, name, descriptor);\n    let original = descriptor.value;\n    descriptor.value = function() {\n\n      if (rule.before) rule.before.apply(rule, arguments);\n\n      if (rule.invaliant) rule.invaliant(this);\n\n      let result = original.apply(this, arguments);\n\n      if (rule.invaliant) rule.invaliant(this);\n\n      if (rule.after) rule.after(result);\n\n      return result;\n    }\n  }\n}\n\nclass Rule {\n  constructor(target, name, descriptor) {\n    this.target = target;\n    this.name = name;\n    this.descriptor = descriptor;\n  }\n\n  before(i) {\n    console.log('before', i);\n    console.assert(i > 0, `arg for ${this.name} should be positive value`);\n  }\n\n  after(result) {\n    console.log('after', result);\n    console.assert(result > 0, `result of ${this.name} should be positive value`);\n  }\n\n  invaliant(_this) {\n    console.log('invaliant', _this);\n    console.assert(_this.current > 0, '`current` should be positive value');\n  }\n}\n\nfunction main() {\n\n  class Counter {\n    constructor(initial = 0) {\n      this.current = initial;\n    }\n\n    @contract(Rule)\n    up(i) {\n      this.current += i;\n      return this.current;\n    }\n  }\n\n  let counter = new Counter(10);\n  console.log(counter.up(2));\n}\n\nmain();\n```\n\nD \u3067\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3053\u306e\u8fba\u306f\u6d88\u3059\u3002Java \u3082 --ea \u3092\u4ed8\u3051\u306a\u3044\u3068\u6d88\u3048\u308b\u3002\n\u305d\u308c\u3092\u3057\u305f\u3051\u308c\u3070 babel \u6642\u306b @contract \u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u6d88\u3057\u3066\u3001\nclosure compiler \u307f\u305f\u3044\u306a\u300c\u4e0d\u4f7f\u7528\u30b3\u30fc\u30c9\u524a\u9664\u300d\u306a minify \u3068\u304b\u3092\u304b\u307e\u305b\u3070\u6d88\u305b\u308b\u3002\n\n(\u3057\u304b\u3057\u3001\u52d5\u7684\u3067\u7de9\u3044\u578b\u4ed8\u3051\u306e JS \u307f\u305f\u3044\u306a\u8a00\u8a9e\u3067\u306f\u3001\u5b9f\u884c\u6642 assertion \u3053\u305d\u6b8b\u3063\u3066\u308b\u30d9\u30ad\u306a\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u308f\u306a\u304f\u3082\u7121\u3044\u3002)\n"}