{"context": " More than 1 year has passed since last update.\u30bd\u30d5\u30c8\u30b7\u30f3\u30bb\u3092\u4f5c\u308a\u305f\u3044\u306e\u3067\u305d\u306e\u6e96\u5099\uff0e\n\u307e\u305a\u306f\u30b5\u30a4\u30f3\u30aa\u30b7\u30ec\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u307f\u305f\n\noccilator.cpp\n#include <iostream>\n#include <math.h>\n\nclass Occilator\n{\n    private:\n        double x1;\n        double x2;\n        double k;\n        double kk;\n        double amp;\n        double freq;\n    public:\n        Occilator();\n        ~Occilator();\n        void start();\n        void setFreq( double );\n        void setAmp( double );\n        double getNext();\n};\n\nOccilator::Occilator()\n{\n    x1 = 0;\n    x2 = 0;\n    freq = 0;\n    amp = 1.0;\n}\n\nOccilator::~Occilator( )\n{\n}\n\nvoid Occilator::start()\n{\n    x1 = 1.0;\n    x2 = k ;\n}\n\nvoid Occilator::setFreq( double f )\n{\n    freq =  f;\n    k = cos( 2 * M_PI * f );\n    kk = k * k;\n}\n\nvoid Occilator::setAmp( double a )\n{\n    amp = a;\n}\n\ndouble Occilator::getNext()\n{\n    double nx;\n    double ny;\n    double tmp;\n\n    tmp = ( 1.0 - kk );\n    nx = k * x1 + tmp * x2;\n    ny = -x1 + k * x2;\n    x1 = nx;\n    x2 = ny;\n\n    double p;\n    double g;\n\n    p =( x1 * x1 ) + tmp * ( x2 * x2 );\n    g = 1.5 - p;\n\n    x1 = g * x1;\n    x2 = g * x2;\n\n    return amp * x1;\n}\n\nint main(int argc, char const* argv[])\n{\n    Occilator os1;\n    Occilator os2;\n\n    os1.setFreq( 0.005 );\n    os1.setAmp( 0.1 );\n    os1.start();\n\n    os2.setFreq( 0.1 );\n    os2.setAmp( 3.5 );\n    os2.start();\n\n    for( int i = 0; i < 400; i++ )\n    {\n        std::cout << os1.getNext() * os2.getNext()  << std::endl;\n    }\n\n    return 0;\n}\n\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u611f\u3058\n\n\u30bd\u30d5\u30c8\u30b7\u30f3\u30bb\u3092\u4f5c\u308a\u305f\u3044\u306e\u3067\u305d\u306e\u6e96\u5099\uff0e\n\u307e\u305a\u306f\u30b5\u30a4\u30f3\u30aa\u30b7\u30ec\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u307f\u305f\n\n```c++:occilator.cpp\n#include <iostream>\n#include <math.h>\n\nclass Occilator\n{\n    private:\n        double x1;\n        double x2;\n        double k;\n        double kk;\n        double amp;\n        double freq;\n    public:\n        Occilator();\n        ~Occilator();\n        void start();\n        void setFreq( double );\n        void setAmp( double );\n        double getNext();\n};\n\nOccilator::Occilator()\n{\n    x1 = 0;\n    x2 = 0;\n    freq = 0;\n    amp = 1.0;\n}\n\nOccilator::~Occilator( )\n{\n}\n\nvoid Occilator::start()\n{\n    x1 = 1.0;\n    x2 = k ;\n}\n\nvoid Occilator::setFreq( double f )\n{\n    freq =  f;\n    k = cos( 2 * M_PI * f );\n    kk = k * k;\n}\n\nvoid Occilator::setAmp( double a )\n{\n    amp = a;\n}\n\ndouble Occilator::getNext()\n{\n    double nx;\n    double ny;\n    double tmp;\n\n    tmp = ( 1.0 - kk );\n    nx = k * x1 + tmp * x2;\n    ny = -x1 + k * x2;\n    x1 = nx;\n    x2 = ny;\n\n    double p;\n    double g;\n\n    p =( x1 * x1 ) + tmp * ( x2 * x2 );\n    g = 1.5 - p;\n\n    x1 = g * x1;\n    x2 = g * x2;\n\n    return amp * x1;\n}\n\nint main(int argc, char const* argv[])\n{\n    Occilator os1;\n    Occilator os2;\n\n    os1.setFreq( 0.005 );\n    os1.setAmp( 0.1 );\n    os1.start();\n\n    os2.setFreq( 0.1 );\n    os2.setAmp( 3.5 );\n    os2.start();\n\n    for( int i = 0; i < 400; i++ )\n    {\n        std::cout << os1.getNext() * os2.getNext()  << std::endl;\n    }\n\n    return 0;\n}\n```\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u611f\u3058\n![sin.png](https://qiita-image-store.s3.amazonaws.com/0/16415/e02e2d12-3571-06ec-0a06-02f74d7021fd.png)\n\n", "tags": ["C++", "\u4fe1\u53f7\u51e6\u7406"]}