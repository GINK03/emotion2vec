{"context": "\n\n\u57fa\u672c\u65b9\u91dd\n\nHaar like\u7279\u5fb4\u91cf(haarcascade_frontalface_default)\u3067\u9854\u8a8d\u8b58\n\u30ea\u30b5\u30a4\u30ba + \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30b9\u5316\u3057\u3066\u6b21\u5143\u524a\u6e1b\nLBPH\u3067\u500b\u4eba\u306e\u9854\u3092\u5b66\u7fd2\n\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport cv2, os\nimport numpy as np\nfrom PIL import Image\n\n# \u5b66\u7fd2\u753b\u50cf\ntrain_path = './training_data'\n# \u30c6\u30b9\u30c8\u753b\u50cf\ntest_path = './test_data'\n\n# Haar-like\u7279\u5fb4\u5206\u985e\u5668\ncascadePath = \"./haarcascade_frontalface_default.xml\"\nfaceCascade = cv2.CascadeClassifier(cascadePath)\n\n# LBPH\nrecognizer = cv2.createLBPHFaceRecognizer()\n\ndef get_images_and_labels(path):\n    # \u753b\u50cf\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\n    images = []\n    # \u30e9\u30d9\u30eb\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\n    labels = []\n    # \u30d5\u30a1\u30a4\u30eb\u540d\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\n    files = []\n    for f in os.listdir(path):\n        # \u753b\u50cf\u306e\u30d1\u30b9\n        image_path = os.path.join(path, f)\n        # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\n        image_pil = Image.open(image_path).convert('L')\n        # NumPy\u306e\u914d\u5217\u306b\u683c\u7d0d\n        image = np.array(image_pil, 'uint8')\n        # Haar-like\u7279\u5fb4\u5206\u985e\u5668\u3067\u9854\u3092\u691c\u77e5 (\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u9069\u5f53)\n        faces = faceCascade.detectMultiScale(image,1.1,9,0)\n\n        # \u691c\u51fa\u3057\u305f\u9854\u753b\u50cf\u306e\u51e6\u7406\n        for (x, y, w, h) in faces:\n            # \u9854\u3092 200x200 \u30b5\u30a4\u30ba\u306b\u30ea\u30b5\u30a4\u30ba\n            roi = cv2.resize(image[y: y + h, x: x + w], (200, 200), interpolation=cv2.INTER_LINEAR)\n            # \u753b\u50cf\u3092\u914d\u5217\u306b\u683c\u7d0d\n            images.append(roi)\n            # \u30d5\u30a1\u30a4\u30eb\u540d\u304b\u3089\u30e9\u30d9\u30eb\u3092\u53d6\u5f97 \"0_xxxxx.jpg \u307f\u305f\u3044\u306a\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\"\n            labels.append(int(f[0]))\n            # \u30d5\u30a1\u30a4\u30eb\u540d\u3092\u914d\u5217\u306b\u683c\u7d0d\n            files.append(f)\n\n    return images, labels, files\n\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u753b\u50cf\u3092\u53d6\u5f97\nimages, labels, files = get_images_and_labels(train_path)\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u5b9f\u65bd\nrecognizer.train(images, np.array(labels))\n# \u30c6\u30b9\u30c8\u753b\u50cf\u3092\u53d6\u5f97\ntest_images, test_labels, test_files = get_images_and_labels(test_path)\n\ni = 0\nwhile i < len(test_labels):\n    # \u30c6\u30b9\u30c8\u753b\u50cf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u5b9f\u65bd\n    label, confidence = recognizer.predict(test_images[i])\n    # \u4e88\u6e2c\u7d50\u679c\u3092\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n    print(\"Test Image: {}, Predicted Label: {}, Confidence: {}\".format(test_files[i], label, confidence))\n    # \u30c6\u30b9\u30c8\u753b\u50cf\u3092\u8868\u793a\n    cv2.imshow(\"test image\", test_images[i])\n    cv2.waitKey(1000)\n\n    i += 1\n\n\ncv2.destroyAllWindows()\n\n## \u57fa\u672c\u65b9\u91dd\n\n- Haar like\u7279\u5fb4\u91cf(haarcascade_frontalface_default)\u3067\u9854\u8a8d\u8b58\n- \u30ea\u30b5\u30a4\u30ba + \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30b9\u5316\u3057\u3066\u6b21\u5143\u524a\u6e1b\n- LBPH\u3067\u500b\u4eba\u306e\u9854\u3092\u5b66\u7fd2\n\n~~~python\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport cv2, os\nimport numpy as np\nfrom PIL import Image\n\n# \u5b66\u7fd2\u753b\u50cf\ntrain_path = './training_data'\n# \u30c6\u30b9\u30c8\u753b\u50cf\ntest_path = './test_data'\n\n# Haar-like\u7279\u5fb4\u5206\u985e\u5668\ncascadePath = \"./haarcascade_frontalface_default.xml\"\nfaceCascade = cv2.CascadeClassifier(cascadePath)\n\n# LBPH\nrecognizer = cv2.createLBPHFaceRecognizer()\n\ndef get_images_and_labels(path):\n    # \u753b\u50cf\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\n    images = []\n    # \u30e9\u30d9\u30eb\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\n    labels = []\n    # \u30d5\u30a1\u30a4\u30eb\u540d\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\n    files = []\n    for f in os.listdir(path):\n        # \u753b\u50cf\u306e\u30d1\u30b9\n        image_path = os.path.join(path, f)\n        # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\n        image_pil = Image.open(image_path).convert('L')\n        # NumPy\u306e\u914d\u5217\u306b\u683c\u7d0d\n        image = np.array(image_pil, 'uint8')\n        # Haar-like\u7279\u5fb4\u5206\u985e\u5668\u3067\u9854\u3092\u691c\u77e5 (\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u9069\u5f53)\n        faces = faceCascade.detectMultiScale(image,1.1,9,0)\n\n        # \u691c\u51fa\u3057\u305f\u9854\u753b\u50cf\u306e\u51e6\u7406\n        for (x, y, w, h) in faces:\n            # \u9854\u3092 200x200 \u30b5\u30a4\u30ba\u306b\u30ea\u30b5\u30a4\u30ba\n            roi = cv2.resize(image[y: y + h, x: x + w], (200, 200), interpolation=cv2.INTER_LINEAR)\n            # \u753b\u50cf\u3092\u914d\u5217\u306b\u683c\u7d0d\n            images.append(roi)\n            # \u30d5\u30a1\u30a4\u30eb\u540d\u304b\u3089\u30e9\u30d9\u30eb\u3092\u53d6\u5f97 \"0_xxxxx.jpg \u307f\u305f\u3044\u306a\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\"\n            labels.append(int(f[0]))\n            # \u30d5\u30a1\u30a4\u30eb\u540d\u3092\u914d\u5217\u306b\u683c\u7d0d\n            files.append(f)\n\n    return images, labels, files\n\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u753b\u50cf\u3092\u53d6\u5f97\nimages, labels, files = get_images_and_labels(train_path)\n# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u5b9f\u65bd\nrecognizer.train(images, np.array(labels))\n# \u30c6\u30b9\u30c8\u753b\u50cf\u3092\u53d6\u5f97\ntest_images, test_labels, test_files = get_images_and_labels(test_path)\n\ni = 0\nwhile i < len(test_labels):\n    # \u30c6\u30b9\u30c8\u753b\u50cf\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u5b9f\u65bd\n    label, confidence = recognizer.predict(test_images[i])\n    # \u4e88\u6e2c\u7d50\u679c\u3092\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n    print(\"Test Image: {}, Predicted Label: {}, Confidence: {}\".format(test_files[i], label, confidence))\n    # \u30c6\u30b9\u30c8\u753b\u50cf\u3092\u8868\u793a\n    cv2.imshow(\"test image\", test_images[i])\n    cv2.waitKey(1000)\n\n    i += 1\n\n\ncv2.destroyAllWindows()\n~~~\n", "tags": ["OpenCV", "Python", "\u9854\u8a8d\u8b58"]}