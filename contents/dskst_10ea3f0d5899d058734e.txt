{"context": "\n\nJSON \u3068 Python \u306e\u30de\u30c3\u30d4\u30f3\u30b0\nJSON \u3068 Python \u306e dict \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n\nJSON\nPython\n\n\n\n\nobject\ndict\n\n\narray\nlist\n\n\nstring\nunicode\n\n\nnumber (int)\nint, long\n\n\nnumber(real)\nfloat\n\n\ntrue\nTrue\n\n\nfalse\nFalse\n\n\nnull\nNone\n\n\n\n\u305d\u306e\u305f\u3081\u3001JSON \u3092 json.loads() \u3067\u30d1\u30fc\u30b9\u3057\u3066\u3001\u305d\u306e\u307e\u307e dynamo.put_item() \u3067\u767b\u9332\u3059\u308b\u3068\u524d\u8ff0\u306e\u578b\u3067\u767b\u9332\u3055\u308c\u308b\u3002\u3053\u306e\u969b\u306b float \u578b\u304c\u3042\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u6012\u3089\u308c\u308b\u3002\nFloat types are not supported. Use Decimal types instead.\n\nPython \u306e float \u306f\u305d\u306e\u307e\u307e\u3067\u306f DynamoDB \u306b\u767b\u9332\u3067\u304d\u306a\u3044\u306e\u3067\u3042\u308b\u3002\n\u4ee3\u308f\u308a\u306b Decimal \u3067\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nFloat \u3067\u306f\u306a\u304f Decimal \u3068\u3057\u3066\u767b\u9332\u3059\u308b\u306b\u306f\uff1f\nFloat \u3092 Decimal \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306a\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3059\u308b\u3068\u3059\u308b\u3002\n\njson_data\n{\"Timestamp\": \"20160323T203501.000+0900\", \"x\": -0.279938, \"y\": -0.754028, \"z\": -0.607758 }\n\n\nJSON \u3092\u30d1\u30fc\u30b9\u3059\u308b\u969b\u306b\u4e0b\u8a18\u306e\u3088\u3046\u306b parse_float=decimal.Decimal \u3092\u3064\u3051\u308c\u3070\u3088\u3044\u3002\nimport json\nimport boto3\nimport decimal\n#...\u7701\u7565\nitem = json.loads(json_data, parse_float=decimal.Decimal)\ndynamo = boto3.resource('dynamodb').Table('ThisIsJustTest')\ndynamo.put_item(Item = item)\n\n\n\u88dc\u8db3\nPython \u516c\u5f0f\u306b\u3082\u8a18\u8f09\u3055\u308c\u3066\u3044\u305f\u304c\u3001\u3050\u3050\u3063\u3066\u3082\u3059\u3050\u306b\u60c5\u5831\u304c\u51fa\u306a\u304b\u3063\u305f\u306e\u3067\u8a18\u4e8b\u306b\u3057\u305f\u3002\nhttps://docs.python.org/2/library/json.html#encoders-and-decoders\n\nparse_float, if specified, will be called with the string of every JSON float to be decoded. By default, this is equivalent to float(num_str). This can be used to use another datatype or parser for JSON floats (e.g. decimal.Decimal).\n\njson.loads(s[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])\n\nAWS \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u30b5\u30e9\u30c3\u3068\u306e\u3063\u3066\u3044\u305f\u3002\nhttps://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/gettingstartedguide/GettingStarted.Python.02.html\n\nDecimal \u304b\u3089\u623b\u3059\u3068\u304d\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3084\u308a\u65b9\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3002\nhttps://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/gettingstartedguide/GettingStarted.Python.03.html\nhttp://stackoverflow.com/questions/1960516/python-json-serialize-a-decimal-object\n## JSON \u3068 Python \u306e\u30de\u30c3\u30d4\u30f3\u30b0\n\nJSON \u3068 Python \u306e dict \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u3002\n\n|JSON|Python|\n|:--:|:--:|\n|object|dict|\n|array|list|\n|string|unicode|\n|number (int)|int, long|\n|number(real)|float|\n|true|True|\n|false|False|\n|null|None|\n\n\u305d\u306e\u305f\u3081\u3001JSON \u3092 `json.loads()` \u3067\u30d1\u30fc\u30b9\u3057\u3066\u3001\u305d\u306e\u307e\u307e `dynamo.put_item()` \u3067\u767b\u9332\u3059\u308b\u3068\u524d\u8ff0\u306e\u578b\u3067\u767b\u9332\u3055\u308c\u308b\u3002\u3053\u306e\u969b\u306b float \u578b\u304c\u3042\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u6012\u3089\u308c\u308b\u3002\n\n```\nFloat types are not supported. Use Decimal types instead.\n```\n\nPython \u306e float \u306f\u305d\u306e\u307e\u307e\u3067\u306f DynamoDB \u306b\u767b\u9332\u3067\u304d\u306a\u3044\u306e\u3067\u3042\u308b\u3002\n\u4ee3\u308f\u308a\u306b Decimal \u3067\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n## Float \u3067\u306f\u306a\u304f Decimal \u3068\u3057\u3066\u767b\u9332\u3059\u308b\u306b\u306f\uff1f\n\nFloat \u3092 Decimal \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306a\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3059\u308b\u3068\u3059\u308b\u3002\n\n```json:json_data\n{\"Timestamp\": \"20160323T203501.000+0900\", \"x\": -0.279938, \"y\": -0.754028, \"z\": -0.607758 }\n```\n\nJSON \u3092\u30d1\u30fc\u30b9\u3059\u308b\u969b\u306b\u4e0b\u8a18\u306e\u3088\u3046\u306b `parse_float=decimal.Decimal` \u3092\u3064\u3051\u308c\u3070\u3088\u3044\u3002\n\n```py\nimport json\nimport boto3\nimport decimal\n#...\u7701\u7565\nitem = json.loads(json_data, parse_float=decimal.Decimal)\ndynamo = boto3.resource('dynamodb').Table('ThisIsJustTest')\ndynamo.put_item(Item = item)\n```\n\n## \u88dc\u8db3\n\nPython \u516c\u5f0f\u306b\u3082\u8a18\u8f09\u3055\u308c\u3066\u3044\u305f\u304c\u3001\u3050\u3050\u3063\u3066\u3082\u3059\u3050\u306b\u60c5\u5831\u304c\u51fa\u306a\u304b\u3063\u305f\u306e\u3067\u8a18\u4e8b\u306b\u3057\u305f\u3002\n\nhttps://docs.python.org/2/library/json.html#encoders-and-decoders\n\n> parse_float, if specified, will be called with the string of every JSON float to be decoded. By default, this is equivalent to float(num_str). This can be used to use another datatype or parser for JSON floats (e.g. decimal.Decimal).\n\n```\njson.loads(s[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]])\n```\n\nAWS \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u30b5\u30e9\u30c3\u3068\u306e\u3063\u3066\u3044\u305f\u3002\nhttps://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/gettingstartedguide/GettingStarted.Python.02.html\n\n### Decimal \u304b\u3089\u623b\u3059\u3068\u304d\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3084\u308a\u65b9\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3002\n\nhttps://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/gettingstartedguide/GettingStarted.Python.03.html\nhttp://stackoverflow.com/questions/1960516/python-json-serialize-a-decimal-object\n", "tags": ["AWS", "DynamoDB", "Python"]}