{"context": "2016.09.14 \u51e6\u7406\u6642\u9593\u306e\u30d0\u30e9\u3064\u304d\u306b\u3064\u3044\u3066\u8ffd\u8a18\u3057\u307e\u3057\u305f\nscikit-learn\u306eSVC\uff08rbf\u30ab\u30fc\u30cd\u30eb\u3068linear\u30ab\u30fc\u30cd\u30eb\uff09\u3068LinearSVC\u306e\u51e6\u7406\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\n\u5229\u7528\u3057\u305f\u30c7\u30fc\u30bf\u306fR\u306ekernlab\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u307e\u308c\u3066\u3044\u308bspam\u30c7\u30fc\u30bf\u3067\u3059\uff0e\n\u8aac\u660e\u5909\u6570\u306f4601\u30b5\u30f3\u30d7\u30eb\uff0c57\u6b21\u5143\uff0c\n\u30e9\u30d9\u30eb\u306fspam:1813\u30b5\u30f3\u30d7\u30eb\uff0cnonspam:2788\u30b5\u30f3\u30d7\u30eb\u3067\u3059\uff0e\n\u30b5\u30f3\u30d7\u30eb\u6570\uff0c\u6b21\u5143\u6570\u3092\u5909\u3048\u305f\u6642\u306e\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\nSVC\u306elinear\u30ab\u30fc\u30cd\u30eb\u304c\u9045\u3059\u304e\u307e\u3059\u306d\uff0e\n\u3064\u3044\u3064\u3044\u30ab\u30fc\u30cd\u30eb\u7a2e\u5225\u307e\u3067\u542b\u3081\u3066\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u3066\u3057\u307e\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u304c\uff0c\n\u304d\u3061\u3093\u3068LinearSVC\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u3067\u3059\uff0e\n\u691c\u8a3c\u7528\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\uff0e\n\u51e6\u7406\u6642\u9593\u8a08\u6e2c\u306e\u90fd\u5408\u3067\u30d1\u30e9\u30e1\u30fc\u30bfC\u3092\u632f\u3063\u3066\u3044\u307e\u3059\uff0e\n\u307e\u305f\u7279\u5fb4\u91cf\u9078\u629e\uff08\u6b21\u5143\u524a\u6e1b\uff09\u306fRandomForest\u306efeature importance\u3092\u5229\u7528\u3057\u307e\u3057\u305f\uff0e\n\u3053\u308c\u306f\u9069\u5f53\u306b\u9078\u629e\u3057\u305f\u3068\u3053\u308d\uff0c\u9006\u306b\u51e6\u7406\u6642\u9593\u304c\u9577\u304f\u306a\u3063\u305f\u305f\u3081\u3067\u3059\uff0e\n\ntest_svm.py\n# -*- coding: utf-8 -*-\n\nimport time\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC\nfrom sklearn import cross_validation\nfrom sklearn.grid_search import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils import shuffle\nfrom sklearn.ensemble import RandomForestClassifier\nfrom scipy.stats.mstats import mquantiles\n\n\ndef grid_search(X, y, estimator, params, cv, n_jobs=3):\n    mdl = GridSearchCV(estimator, params, cv=cv, n_jobs=n_jobs)\n    t1 = time.clock()\n    mdl.fit(X, y)\n    t2 = time.clock()\n    return t2 - t1\n\n\nif __name__==\"__main__\":\n    data = pd.read_csv('spam.txt', header=0)\n    y = data['type']\n    del data['type']\n\n    data, y = shuffle(data, y, random_state=0)\n    data = StandardScaler().fit_transform(data)\n\n    clf = RandomForestClassifier(n_estimators=100)\n    clf.fit(data, y)\n\n    ndim, elp_rbf, elp_lnr, elp_lsvm = [], [], [], []\n    for thr in mquantiles(clf.feature_importances_, prob=np.linspace(1., 0., 5)):\n        print thr,\n        X = data[:,clf.feature_importances_ >= thr]\n        ndim.append(X.shape[1])\n\n        cv = cross_validation.StratifiedShuffleSplit(y, test_size=0.2, random_state=0)\n\n        print 'rbf',\n        elp_rbf.append(grid_search(X, y, SVC(random_state=0),\n            [{'kernel': ['rbf'], 'C': [1, 10, 100]}], cv))\n\n        print 'linear',\n        elp_lnr.append(grid_search(X, y, SVC(random_state=0),\n            [{'kernel': ['linear'], 'C': [1, 10, 100]}], cv))\n\n        print 'lsvm'\n        elp_lsvm.append(grid_search(X, y, LinearSVC(random_state=0),\n            [{'C': [1, 10, 100]}], cv))\n\n    plt.figure()\n    plt.title('Elapsed time - # of dimensions')\n    plt.ylabel('Elapsed time [sec]')\n    plt.xlabel('# of dimensions')\n    plt.grid()\n    plt.plot(ndim, elp_rbf, 'o-', color='r',\n             label='SVM(rbf)')\n    plt.plot(ndim, elp_lnr, 'o-', color='g',\n             label='SVM(linear)')\n    plt.plot(ndim, elp_lsvm, 'o-', color='b',\n             label='LinearSVM')\n    plt.legend(loc='best')\n    plt.savefig('dimensions.png', bbox_inches='tight')\n    plt.close()\n\n\n    nrow, elp_rbf, elp_lnr, elp_lsvm = [], [], [], []\n    for r in np.linspace(0.1, 1., 5):\n        print r,\n        X = data[:(r*data.shape[0]),:]\n        yy = y[:(r*data.shape[0])]\n        nrow.append(X.shape[0])\n\n        cv = cross_validation.StratifiedShuffleSplit(yy, test_size=0.2, random_state=0)\n\n        print 'rbf',\n        elp_rbf.append(grid_search(X, yy, SVC(random_state=0),\n            [{'kernel': ['rbf'], 'C': [1, 10, 100]}], cv))\n\n        print 'linear',\n        elp_lnr.append(grid_search(X, yy, SVC(random_state=0),\n            [{'kernel': ['linear'], 'C': [1, 10, 100]}], cv))\n\n        print 'lsvm'\n        elp_lsvm.append(grid_search(X, yy, LinearSVC(random_state=0),\n            [{'C': [1, 10, 100]}], cv))\n\n    plt.figure()\n    plt.title('Elapsed time - # of samples')\n    plt.ylabel('Elapsed time [sec]')\n    plt.xlabel('# of samples')\n    plt.grid()\n    plt.plot(nrow, elp_rbf, 'o-', color='r',\n             label='SVM(rbf)')\n    plt.plot(nrow, elp_lnr, 'o-', color='g',\n             label='SVM(linear)')\n    plt.plot(nrow, elp_lsvm, 'o-', color='b',\n             label='LinearSVM')\n    plt.legend(loc='best')\n    plt.savefig('samples.png', bbox_inches='tight')\n    plt.close()\n\n\n\n\n\u8ffd\u8a18\nSVM(linear)\u306e\u51e6\u7406\u6642\u9593\u306b\u3064\u3044\u3066\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u305f\u3060\u3044\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\uff0e\nPython2.7.12\uff0cscikit-learn0.17.1\u3067\uff0c\n\u30c7\u30fc\u30bf\u65701000\uff0c\u7279\u5fb4\u91cf\u657029\uff0c200\u56de\u8a66\u884c\u3057\u305f\u3068\u304d\u306e\u51e6\u7406\u6642\u9593\u306e\u30d0\u30e9\u3064\u304d\u306f\u4e0b\u56f3\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\nSVM(linear)\uff0c\u602a\u3057\u3044\u3067\u3059\u306d\u2026\n\n<Font color=\"red\">2016.09.14 \u51e6\u7406\u6642\u9593\u306e\u30d0\u30e9\u3064\u304d\u306b\u3064\u3044\u3066\u8ffd\u8a18\u3057\u307e\u3057\u305f</Font>\n\nscikit-learn\u306eSVC\uff08rbf\u30ab\u30fc\u30cd\u30eb\u3068linear\u30ab\u30fc\u30cd\u30eb\uff09\u3068LinearSVC\u306e\u51e6\u7406\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\n\n\u5229\u7528\u3057\u305f\u30c7\u30fc\u30bf\u306fR\u306ekernlab\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u307e\u308c\u3066\u3044\u308bspam\u30c7\u30fc\u30bf\u3067\u3059\uff0e\n\u8aac\u660e\u5909\u6570\u306f4601\u30b5\u30f3\u30d7\u30eb\uff0c57\u6b21\u5143\uff0c\n\u30e9\u30d9\u30eb\u306fspam:1813\u30b5\u30f3\u30d7\u30eb\uff0cnonspam:2788\u30b5\u30f3\u30d7\u30eb\u3067\u3059\uff0e\n\n\u30b5\u30f3\u30d7\u30eb\u6570\uff0c\u6b21\u5143\u6570\u3092\u5909\u3048\u305f\u6642\u306e\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff0e\n\n![result.png](https://qiita-image-store.s3.amazonaws.com/0/52533/6da7e0d1-e47e-7467-bad3-81fec43b345e.png)\n\n\nSVC\u306elinear\u30ab\u30fc\u30cd\u30eb\u304c\u9045\u3059\u304e\u307e\u3059\u306d\uff0e\n\u3064\u3044\u3064\u3044\u30ab\u30fc\u30cd\u30eb\u7a2e\u5225\u307e\u3067\u542b\u3081\u3066\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u3057\u3066\u3057\u307e\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u304c\uff0c\n\u304d\u3061\u3093\u3068LinearSVC\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3055\u305d\u3046\u3067\u3059\uff0e\n\n\u691c\u8a3c\u7528\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\uff0e\n\u51e6\u7406\u6642\u9593\u8a08\u6e2c\u306e\u90fd\u5408\u3067\u30d1\u30e9\u30e1\u30fc\u30bfC\u3092\u632f\u3063\u3066\u3044\u307e\u3059\uff0e\n\u307e\u305f\u7279\u5fb4\u91cf\u9078\u629e\uff08\u6b21\u5143\u524a\u6e1b\uff09\u306fRandomForest\u306efeature importance\u3092\u5229\u7528\u3057\u307e\u3057\u305f\uff0e\n\u3053\u308c\u306f\u9069\u5f53\u306b\u9078\u629e\u3057\u305f\u3068\u3053\u308d\uff0c\u9006\u306b\u51e6\u7406\u6642\u9593\u304c\u9577\u304f\u306a\u3063\u305f\u305f\u3081\u3067\u3059\uff0e\n\n```python:test_svm.py\n# -*- coding: utf-8 -*-\n\nimport time\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.svm import SVC\nfrom sklearn.svm import LinearSVC\nfrom sklearn import cross_validation\nfrom sklearn.grid_search import GridSearchCV\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.utils import shuffle\nfrom sklearn.ensemble import RandomForestClassifier\nfrom scipy.stats.mstats import mquantiles\n\n\ndef grid_search(X, y, estimator, params, cv, n_jobs=3):\n    mdl = GridSearchCV(estimator, params, cv=cv, n_jobs=n_jobs)\n    t1 = time.clock()\n    mdl.fit(X, y)\n    t2 = time.clock()\n    return t2 - t1\n\n\nif __name__==\"__main__\":\n    data = pd.read_csv('spam.txt', header=0)\n    y = data['type']\n    del data['type']\n    \n    data, y = shuffle(data, y, random_state=0)\n    data = StandardScaler().fit_transform(data)\n    \n    clf = RandomForestClassifier(n_estimators=100)\n    clf.fit(data, y)\n\n    ndim, elp_rbf, elp_lnr, elp_lsvm = [], [], [], []\n    for thr in mquantiles(clf.feature_importances_, prob=np.linspace(1., 0., 5)):\n        print thr,\n        X = data[:,clf.feature_importances_ >= thr]\n        ndim.append(X.shape[1])\n        \n        cv = cross_validation.StratifiedShuffleSplit(y, test_size=0.2, random_state=0)\n\n        print 'rbf',\n        elp_rbf.append(grid_search(X, y, SVC(random_state=0),\n            [{'kernel': ['rbf'], 'C': [1, 10, 100]}], cv))\n\n        print 'linear',\n        elp_lnr.append(grid_search(X, y, SVC(random_state=0),\n            [{'kernel': ['linear'], 'C': [1, 10, 100]}], cv))\n\n        print 'lsvm'\n        elp_lsvm.append(grid_search(X, y, LinearSVC(random_state=0),\n            [{'C': [1, 10, 100]}], cv))\n\n    plt.figure()\n    plt.title('Elapsed time - # of dimensions')\n    plt.ylabel('Elapsed time [sec]')\n    plt.xlabel('# of dimensions')\n    plt.grid()\n    plt.plot(ndim, elp_rbf, 'o-', color='r',\n             label='SVM(rbf)')\n    plt.plot(ndim, elp_lnr, 'o-', color='g',\n             label='SVM(linear)')\n    plt.plot(ndim, elp_lsvm, 'o-', color='b',\n             label='LinearSVM')\n    plt.legend(loc='best')\n    plt.savefig('dimensions.png', bbox_inches='tight')\n    plt.close()\n\n\n    nrow, elp_rbf, elp_lnr, elp_lsvm = [], [], [], []\n    for r in np.linspace(0.1, 1., 5):\n        print r,\n        X = data[:(r*data.shape[0]),:]\n        yy = y[:(r*data.shape[0])]\n        nrow.append(X.shape[0])\n        \n        cv = cross_validation.StratifiedShuffleSplit(yy, test_size=0.2, random_state=0)\n\n        print 'rbf',\n        elp_rbf.append(grid_search(X, yy, SVC(random_state=0),\n            [{'kernel': ['rbf'], 'C': [1, 10, 100]}], cv))\n\n        print 'linear',\n        elp_lnr.append(grid_search(X, yy, SVC(random_state=0),\n            [{'kernel': ['linear'], 'C': [1, 10, 100]}], cv))\n\n        print 'lsvm'\n        elp_lsvm.append(grid_search(X, yy, LinearSVC(random_state=0),\n            [{'C': [1, 10, 100]}], cv))\n\n    plt.figure()\n    plt.title('Elapsed time - # of samples')\n    plt.ylabel('Elapsed time [sec]')\n    plt.xlabel('# of samples')\n    plt.grid()\n    plt.plot(nrow, elp_rbf, 'o-', color='r',\n             label='SVM(rbf)')\n    plt.plot(nrow, elp_lnr, 'o-', color='g',\n             label='SVM(linear)')\n    plt.plot(nrow, elp_lsvm, 'o-', color='b',\n             label='LinearSVM')\n    plt.legend(loc='best')\n    plt.savefig('samples.png', bbox_inches='tight')\n    plt.close()\n```\n\n***\n###\u8ffd\u8a18\nSVM(linear)\u306e\u51e6\u7406\u6642\u9593\u306b\u3064\u3044\u3066\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u305f\u3060\u3044\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\uff0e\nPython2.7.12\uff0cscikit-learn0.17.1\u3067\uff0c\n\u30c7\u30fc\u30bf\u65701000\uff0c\u7279\u5fb4\u91cf\u657029\uff0c200\u56de\u8a66\u884c\u3057\u305f\u3068\u304d\u306e\u51e6\u7406\u6642\u9593\u306e\u30d0\u30e9\u3064\u304d\u306f\u4e0b\u56f3\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\nSVM(linear)\uff0c\u602a\u3057\u3044\u3067\u3059\u306d\u2026\n\n![freq.png](https://qiita-image-store.s3.amazonaws.com/0/52533/f331ac9c-94aa-0518-29e6-6e2e4a1a7301.png)\n\n", "tags": ["Python2.7", "scikit-learn0.15", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning"]}