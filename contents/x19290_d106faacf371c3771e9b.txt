{"tags": ["Perl6"], "context": " More than 1 year has passed since last update.Perl 6 \u6a19\u6e96\u306e\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u5c11\u3057\u6c17\u306b\u5165\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8eca\u8f2a\u3092\u767a\u660e\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u5358\u4f53\u30c6\u30b9\u30c8\n\u6d41\u884c\u306b\u4e57\u3063\u3066\u3001\u307e\u305a\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u5f62\u3067\u4eca\u56de\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3092\u66f8\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u3067\u306f\u3001\n\n\u51fa\u529b\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u304c\u6a5f\u80fd\u3057\u3066\u3044\u308b\u3053\u3068 ($obj.s(123).s('abc').g(''))\n\u6a19\u6e96\u51fa\u529b\u306b\u5bfe\u3057\u3066\u3082\u30e1\u30e2\u30ea\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5bfe\u3057\u3066\u3082\u540c\u69d8\u306b .str-on()\u3001.gist-on() \u3067\u304d\u308b\u3053\u3068\nGistable \u304c\u6a5f\u80fd\u3057\u3066\u3044\u308b\u3053\u3068\n\n\u3092\u8abf\u3079\u3066\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u8b0e\u306e segmentation fault \u304c\u305f\u307e\u306b\u51fa\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u3092\u4e8c\u3064\u306b\u5206\u5272\u3057\u307e\u3057\u305f\u3002\n\na.t6\n#!/usr/bin/env perl6\n\n# \u5ff5\u306e\u305f\u3081 Unix \u7248\u306e rakudo-star-2012.11 \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nuse v6;\nuse Appendable;\nuse Symbol;\nuse Cons;\nuse Test;\nuse GrabStdout;\nplan *;\n\nmy $sym = Symbol.new('xyz');\nmy $cons = Cons.new($sym, $sym);\n$cons = Cons.new($cons, $cons);\n\nmy $cons-gist-expected = q :to '!';\n(\n  (\n    xyz\n  .\n    xyz\n  )\n.\n  (\n    xyz\n  .\n    xyz\n  )\n)\n!\n\n{\n    my $o = $*OUT.clone does Appendable;\n    is grab-stdout({ $o.s(123).s('abc').g(''); }), \"123abc\\n\";\n    is grab-stdout({ $o.s($sym).s(\"\\n\"); }), \"xyz\\n\";\n    is grab-stdout({ $o.g('abc').g($sym); }), \"abc\\nxyz\\n\";\n    is grab-stdout({ $o.g($sym); }), \"xyz\\n\";\n    is(\n        grab-stdout({ $o.s($cons).s(\"\\n\").g($cons); }),\n        \"((xyz . xyz) . (xyz . xyz))\\n$cons-gist-expected\"\n    );\n}\n{\n    my $o = MemOut.new();\n    is $o.g($sym).s($sym).s(\"\\n\").Str, \"xyz\\nxyz\\n\";\n    is $o.Str, \"xyz\\nxyz\\n\";\n    is $o.g($sym).s($sym).s(\"\\n\").Str, \"xyz\\nxyz\\nxyz\\nxyz\\n\";\n}\n\n\n$ perl6 -I. a.t6\nok 1 - \nok 2 - \nok 3 - \nok 4 - \nok 5 - \nok 6 - \nok 7 - \nok 8 - \n\n\nb.t6\n#!/usr/bin/env perl6\n\n# \u5ff5\u306e\u305f\u3081 Unix \u7248\u306e rakudo-star-2012.11 \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nuse v6;\nuse Symbol;\nuse Cons;\nuse Test;\nuse GrabStdout;\nplan *;\n\nmy $sym = Symbol.new('xyz');\nmy $cons = Cons.new($sym, $sym);\n$cons = Cons.new($cons, $cons);\n\n# say \u306f\u53ef\u80fd\u306a\u3089 gist-on \u3092\u547c\u3076\u3002\n# \u3053\u306e\u4f8b\u3067\u306f\u3001gist-on \u306e\u672b\u5c3e\u306b \"\\n\" \u304c\u4ed8\u304f\u3002\n# say \u3082\u672b\u5c3e\u306b \"\\n\" \u3092\u51fa\u529b\u3059\u308b\u3002\n# \u3064\u307e\u308a\u3001say <gist-on \u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8>; \u3059\u308b\u3068\u3001\u672b\u5c3e\u306b \"\\n\\n\" \u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n# print \u306f\u53ef\u80fd\u306a\u3089 print-on \u3092\u547c\u3076\u3002\n# \u3053\u306e\u4f8b\u3067\u306f\u3001print-on \u306e\u672b\u5c3e\u306b \"\\n\" \u306f\u4ed8\u304b\u306a\u3044\u3002\n# print \u3082\u672b\u5c3e\u306b \"\\n\" \u3092\u51fa\u529b\u3057\u306a\u3044\u3002\n# \u3064\u307e\u308a\u3001print <print-on \u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8>; \u3057\u3066\u3082\u3001\n# \u672b\u5c3e\u306b \"\\n\" \u306f\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\n\nmy $cons-gist-expected = q :to '!';\n(\n  (\n    xyz\n  .\n    xyz\n  )\n.\n  (\n    xyz\n  .\n    xyz\n  )\n)\n!\n\nprint $sym;\n{\n    is $sym.Str, 'xyz';\n    is $sym.gist, \"xyz\\n\";\n\n    is $cons.Str, '((xyz . xyz) . (xyz . xyz))';\n    is $cons.gist, $cons-gist-expected;\n}\n{\n    is grab-stdout({ print $sym; }), 'xyz';\n    is grab-stdout({ say $sym; }), \"xyz\\n\\n\";\n\n    is grab-stdout({ print $cons; }), '((xyz . xyz) . (xyz . xyz))';\n    is grab-stdout({ say $cons; }), \"$cons-gist-expected\\n\";\n}\n\n\n$ perl6 -I. b.t6\nok 1 - \nok 2 - \nok 3 - \nok 4 - \nok 5 - \nok 6 - \nok 7 - \nok 8 - \n\n\nJava \u306e Appendable \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u771f\u4f3c\u3066\u3001Appendable \u30ed\u30fc\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30ab\u30b9\u30b1\u30fc\u30c7\u30a3\u30f3\u30b0\nSmalltalk \u3068\u3044\u3046\u8a00\u8a9e\u3067\u306f\u3001obj \u3068\u3044\u3046 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u307e\u305a m1 \u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u3001\u6b21\u306b\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b m2 \u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u3001\u4ee5\u4e0b\u540c\u69d8\u306b\u3059\u308b\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\nobj m1; m2; m3; m4; ... .\n\n\u3053\u308c\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u3068\u547c\u3073\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001\u540c\u3058\u3053\u3068\u306f\nobj m1. obj m2. obj m3. obj m4. obj ... .\n\n\u3067\u3067\u304d\u307e\u3059\u304c\u3001\u30ab\u30b9\u30b1\u30fc\u30c9\u306e\u65b9\u304c\u4f55\u304b\u3068\u4fbf\u5229\u3067\u3059\u3002\u5b9f\u969b\u3001C++ \u3067\u3042\u307e\u308a\u306b\u3082\u6709\u540d\u306a\u306e\u304c ostream \u7528\u306b\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u308c\u305f << \u6f14\u7b97\u5b50\u3067\u3001\u4ee5\u4e0b\u306e\u8868\u73fe\u306f\u304a\u306a\u3058\u307f\u3067\u3057\u3087\u3046\u3002\ncout << \"hello\" << endl;\n\n\u8a00\u8a9e\u30ec\u30d9\u30eb\u3067\u30ab\u30b9\u30b1\u30fc\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044 C++ \u3067\u306f\u3001operator<<() \u304c return *this; \u3059\u308b\u3053\u3068\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u30ec\u30d9\u30eb\u3067\u3001\u307b\u307c\u540c\u3058\u52b9\u679c\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\nJava \u306b\u3082\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u30ec\u30d9\u30eb\u3067\u306e\u51fa\u529b\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u308b\u306e\u304c Appendable \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\nStringBuffer.new().append(\"hello\").append(\"\\n\").toString();\n\n\u4f59\u8ac7\u3067\u3059\u304c Java \u306b Appendable \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u5c0e\u5165\u3055\u308c\u305f\u306e\u306f Java 1.5 \u304b\u3089\u3067\u3001\u5b9f\u969b\u3001\nStringBuffer.new().append(\"hello\").append(\"\\n\").toString();\n\n\u306f\u53ef\u80fd\u3067\u3082\u3001\nSystem.out.append(\"hello\").append(\"\\n\");\n\n\u306f\u4e0d\u53ef\u80fd\u306a\u6642\u671f\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001Perl 6 \u306e\u30ed\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3001Java \u306e Appendable \u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\nAppendable \u30ed\u30fc\u30eb\nAppendable \u306a Perl 6 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 $a \u306b\u3001$o \u3092\u51fa\u529b\u3059\u308b\u306b\u306f\u3001\n$a.s($o);\n\n\u3042\u308b\u3044\u306f\n$a.g($o);\n\n\u3068\u3057\u307e\u3059\u3002\nJava \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u9055\u3063\u3066\u3001\u30ed\u30fc\u30eb\u306b\u306f\u3001\u5b9f\u88c5\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Appendable \u30ed\u30fc\u30eb\u3067\u306f\u3001.s()\u3001.g() \u304c self \u3092\u8fd4\u3059\u3053\u3068\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30ab\u30b9\u30b1\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u307e\u305f\u3053\u308c\u3089\u306e\u672c\u4f53\u3067\u306f\u3001\u5f15\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c .str-on()\u3001.gist-on() \u3092\u7406\u89e3\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3001\u7406\u89e3\u3057\u305f\u306a\u3089\u305d\u306e\u7d50\u679c\u3092\u53d6\u308a\u5165\u308c\u3001\u7406\u89e3\u3057\u306a\u304b\u3063\u305f\u3089 Perl \u306e .Str()\u3001.gist() \u3092\u4f7f\u3063\u3066\u5f15\u6570\u3092\u6587\u5b57\u5217\u5316\u3057\u305f\u3082\u306e\u3092 self.w() \u3057\u307e\u3059\u3002\n\nAppendable.pm6\nuse v6;\n\nrole Appendable;\n\nmethod new($dumb-out = $*OUT)\n{\n    self.bless(*, :$dumb-out);\n}\n\nmethod s($obj)\n{\n    my $print-on = 'str-on';\n    my $stringify = 'Str';\n    self._print-str(:$print-on, :$stringify, $obj);\n}\n\nmethod g($obj, $indent = '')\n{\n    my $print-on = 'gist-on';\n    my $stringify = 'gist';\n    self._print-str(:$print-on, :$stringify, $obj, \"\\n\", $indent);\n}\n\nmethod _print-str($obj, $new-line = '', $indent = '', :$print-on!, :$stringify!)\n{\n    my $done;\n    try { $done = $obj.\"$print-on\"(self, $indent); }\n    unless $done {\n        self.w($indent, $obj.\"$stringify\"(), $new-line);\n    }\n    self;\n}\n\nmethod w(*@strings)\n{\n    for @strings -> Str $str {\n        self.write($str.encode);\n    }\n    self;\n}\n\n\n.w() \u306e\u4ee3\u308f\u308a\u306b .print() \u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3057\u305f\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u578b\u3092 Str \u306b\u9650\u5b9a\u3057\u305f\u304b\u3063\u305f\u3053\u3068\u3001.write() \u306e\u4f7f\u3044\u65b9\u304c\u793a\u3057\u305f\u304b\u3063\u305f\u3053\u3068\u304b\u3089\u3001.w() \u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\nself \u306f\u3001.write() \u3055\u3048\u7406\u89e3\u3059\u308c\u3070\u4f55\u3067\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\u4eca\u56de\u306f\u3001MemOut \u30af\u30e9\u30b9\u3092\u3067\u3063\u3061\u3042\u3052\u307e\u3057\u305f\u3002\u306a\u304a\u3001\u30d5\u30a1\u30a4\u30eb\u306b \u3061\u307e\u3061\u307e .write() \u3067\u66f8\u304d\u3053\u3080\u306e\u306f\u52b9\u7387\u304c\u826f\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u304b\u3068\u8a00\u3063\u3066\u3053\u308c\u3092\u6700\u9069\u5316\u3057\u3066\u3082\u7169\u96d1\u306b\u306a\u308b\u3070\u304b\u308a\u306a\u306e\u3067\u3001\u3084\u3081\u307e\u3057\u305f\u3002\n\nMemOut \u30af\u30e9\u30b9\n\nMemOut.pm6\nuse v6;\nuse Appendable;\n\nclass MemOut does Appendable;\n\nhas Buf @!bufbuf;\nhas Buf $!bufcat = Buf.new();\nhas Str $!strcat;\n\nmethod print(*@objs)\n{\n    for @objs\u00bb.Str -> Str $str {\n        self.w($str);\n    }\n}\n\nmethod write(Buf $buf)\n{\n    @!bufbuf.push($buf);\n    $!strcat = Str;\n}\n\nmethod Buf()\n{\n    my $cat = $!bufcat;\n    $cat = self!catbuf($cat) if 0 < @!bufbuf;\n    $cat;\n}\n\nmethod Str()\n{\n    my $cat = $!strcat;\n    $!strcat = $cat = self!catbuf($!bufcat).decode if $cat === Str;\n    $cat;\n}\n\nmethod !catbuf($old)\n{\n    my $cat = Buf.new($old.contents, @!bufbuf\u00bb.contents);\n    @!bufbuf.splice;\n    $!bufcat = $cat;\n}\n\n\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u3067\u304d\u308b\u3060\u3051 .str-on()\u3001.gist-on() \u3092\u5b9f\u88c5\u3059\u308b\nSymbol \u3068 Cons \u304b\u3089\u306a\u308b\u7c21\u5358\u306a\u69cb\u9020\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002.str-on(Appendable)\u3001.gist-on(Appendable) \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002does Gistable; \u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\nSymbol \u30af\u30e9\u30b9\n\nSymbol.pm6\nuse v6;\nuse Gistable;\nuse Appendable;\n\nclass Symbol does Gistable;\n\nhas $.value;\n\nmethod new($value)\n{\n    self.bless(*, :$value);\n}\n\nmethod str-on(Appendable $a)\n{\n    $a.w($.value);\n}\n\nmethod gist-on(Appendable $a, $indent = '')\n{\n    $a.w($indent, $.value, \"\\n\");\n}\n\n\n\nCons \u30af\u30e9\u30b9\n\nCons.pm6\nuse v6;\nuse Gistable;\nuse Appendable;\n\nclass Cons does Gistable;\n\nhas $.car;\nhas $.cdr;\n\nmethod new($car, $cdr)\n{\n    self.bless(*, :$car, :$cdr);\n}\n\nmethod str-on(Appendable $a)\n{\n    $a.w('(');\n    $.car.str-on($a).w(' . ');\n    $.cdr.str-on($a).w(')');\n}\n\nmethod gist-on(Appendable $a, $indent = '')\n{\n    my $deeper = $indent ~ '  ';\n    $a.w($indent, \"(\\n\");\n    $.car.gist-on($a, $deeper);\n    $a.w($indent, \".\\n\");\n    $.cdr.gist-on($a, $deeper);\n    $a.w($indent, \")\\n\")\n}\n\n\n\nGistable \u30ed\u30fc\u30eb\u3067\u3001.str-on() \u2192 .Str\u3001.gist-on() \u2192 .gist \u3092\u5bfe\u5fdc\u3065\u3051\u308b\n.str-on()\u3001.gist-on() \u3067\u5b9a\u7fa9\u3057\u305f\u51fa\u529b\u3092\u30e1\u30e2\u30ea\u30fc\u306b\u5bfe\u3057\u3066\u884c\u3063\u3066\u3001.Str\u3001.gist \u3092\u5b9f\u73fe\u3057\u307e\u3059\u3002\n\nGistable \u30ed\u30fc\u30eb\n\nGistable.pm6\nuse v6;\nuse MemOut;\nuse Appendable;\n\nrole Gistable;\n\nmethod Str()\n{\n    self._stringify('str-on');\n}\n\nmethod gist($indent = '')\n{\n    self._stringify('gist-on', $indent);\n}\n\nmethod _stringify($print-on, $indent = '')\n{\n    self.\"$print-on\"(MemOut.new()).Str;\n}\n\n\n\u3053\u3046\u3057\u3066\u307f\u308b\u3068\u30ed\u30fc\u30eb\u306f\u3001\u9ebb\u85ac\u7684\u306b\u4fbf\u5229\u3067\u3059\u3002\n\ngrab-stdout()\n\n\u307e\u3060\u8aac\u660e\u3057\u3066\u3044\u306a\u3044\u306e\u304c GrabStdout \u3067\u3059\u3002Perl 5 \u306b\u3042\u3063\u305f stdout_is() \u306e\u3088\u3046\u306a\u3082\u306e\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u66f8\u304d\u307e\u3057\u305f\u3002NativeCall \u3092\u4f7f\u3063\u3066\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002\u3053\u308c\u304c\u3068\u3066\u3082\u624b\u8efd\u3067\u9a5a\u304d\u307e\u3057\u305f\u3002\n\nGrabStdout.pm6\n# Unix \u7248\u306e rakudo-star \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nmodule GrabStdout;\n\nuse v6;\nuse NativeCall;\n\nsub fork() returns Int is native { ... }\nsub wait() returns Int is native { ... }\nsub pipe(CArray[int]) returns Int is native { ... }\nsub close(int) returns Int is native { ... }\nsub dup(int $old) returns int is native { ... }\nsub dup2(int $old, Int $new) returns Int is native { ... }\n\nsub grab-stdout(&block) is export\n{\n    my @pipes := CArray[int].new();\n    @pipes[0] = -1;\n    @pipes[1] = -1;\n    pipe(@pipes);\n    my $pid = fork;\n    if $pid == 0 {\n        writer(:@pipes, :&block);\n        exit(0);\n    }\n    reader(:@pipes, :$pid);\n}\n\nsub writer(:@pipes!, :&block!)\n{\n    dup2(@pipes[1], 1);\n    close(@pipes[0]);\n    close(@pipes[1]);\n    &block();\n}\n\nsub reader(:@pipes!, :$pid!)\n{\n    my $backup = dup(0);\n    dup2(@pipes[0], 0);\n    close(@pipes[0]);\n    close(@pipes[1]);\n    die unless wait() == $pid;\n    my $rv = $*IN.slurp;\n    dup2($backup, 0);\n    close($backup);\n    $rv;\n}\n\n\nhttps://github.com/x19290/2012advent.p6/tree/master/a.streams\nPerl 6 \u6a19\u6e96\u306e\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u5c11\u3057\u6c17\u306b\u5165\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8eca\u8f2a\u3092\u767a\u660e\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n# \u5358\u4f53\u30c6\u30b9\u30c8\n\n\u6d41\u884c\u306b\u4e57\u3063\u3066\u3001\u307e\u305a\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u5f62\u3067\u4eca\u56de\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3092\u66f8\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u3067\u306f\u3001\n\n1. \u51fa\u529b\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u304c\u6a5f\u80fd\u3057\u3066\u3044\u308b\u3053\u3068 (`$obj.s(123).s('abc').g('')`)\n2. \u6a19\u6e96\u51fa\u529b\u306b\u5bfe\u3057\u3066\u3082\u30e1\u30e2\u30ea\u30fc\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5bfe\u3057\u3066\u3082\u540c\u69d8\u306b `.str-on()`\u3001`.gist-on()` \u3067\u304d\u308b\u3053\u3068\n3. Gistable \u304c\u6a5f\u80fd\u3057\u3066\u3044\u308b\u3053\u3068\n\n\u3092\u8abf\u3079\u3066\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u8b0e\u306e segmentation fault \u304c\u305f\u307e\u306b\u51fa\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u3092\u4e8c\u3064\u306b\u5206\u5272\u3057\u307e\u3057\u305f\u3002\n\n```perl6:a.t6\n#!/usr/bin/env perl6\n\n# \u5ff5\u306e\u305f\u3081 Unix \u7248\u306e rakudo-star-2012.11 \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nuse v6;\nuse Appendable;\nuse Symbol;\nuse Cons;\nuse Test;\nuse GrabStdout;\nplan *;\n\nmy $sym = Symbol.new('xyz');\nmy $cons = Cons.new($sym, $sym);\n$cons = Cons.new($cons, $cons);\n\nmy $cons-gist-expected = q :to '!';\n(\n  (\n    xyz\n  .\n    xyz\n  )\n.\n  (\n    xyz\n  .\n    xyz\n  )\n)\n!\n\n{\n\tmy $o = $*OUT.clone does Appendable;\n\tis grab-stdout({ $o.s(123).s('abc').g(''); }), \"123abc\\n\";\n\tis grab-stdout({ $o.s($sym).s(\"\\n\"); }), \"xyz\\n\";\n\tis grab-stdout({ $o.g('abc').g($sym); }), \"abc\\nxyz\\n\";\n\tis grab-stdout({ $o.g($sym); }), \"xyz\\n\";\n\tis(\n\t\tgrab-stdout({ $o.s($cons).s(\"\\n\").g($cons); }),\n\t\t\"((xyz . xyz) . (xyz . xyz))\\n$cons-gist-expected\"\n\t);\n}\n{\n\tmy $o = MemOut.new();\n\tis $o.g($sym).s($sym).s(\"\\n\").Str, \"xyz\\nxyz\\n\";\n\tis $o.Str, \"xyz\\nxyz\\n\";\n\tis $o.g($sym).s($sym).s(\"\\n\").Str, \"xyz\\nxyz\\nxyz\\nxyz\\n\";\n}\n```\n\n```\n$ perl6 -I. a.t6\nok 1 - \nok 2 - \nok 3 - \nok 4 - \nok 5 - \nok 6 - \nok 7 - \nok 8 - \n```\n\n```perl6:b.t6\n#!/usr/bin/env perl6\n\n# \u5ff5\u306e\u305f\u3081 Unix \u7248\u306e rakudo-star-2012.11 \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nuse v6;\nuse Symbol;\nuse Cons;\nuse Test;\nuse GrabStdout;\nplan *;\n\nmy $sym = Symbol.new('xyz');\nmy $cons = Cons.new($sym, $sym);\n$cons = Cons.new($cons, $cons);\n\n# say \u306f\u53ef\u80fd\u306a\u3089 gist-on \u3092\u547c\u3076\u3002\n# \u3053\u306e\u4f8b\u3067\u306f\u3001gist-on \u306e\u672b\u5c3e\u306b \"\\n\" \u304c\u4ed8\u304f\u3002\n# say \u3082\u672b\u5c3e\u306b \"\\n\" \u3092\u51fa\u529b\u3059\u308b\u3002\n# \u3064\u307e\u308a\u3001say <gist-on \u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8>; \u3059\u308b\u3068\u3001\u672b\u5c3e\u306b \"\\n\\n\" \u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n# print \u306f\u53ef\u80fd\u306a\u3089 print-on \u3092\u547c\u3076\u3002\n# \u3053\u306e\u4f8b\u3067\u306f\u3001print-on \u306e\u672b\u5c3e\u306b \"\\n\" \u306f\u4ed8\u304b\u306a\u3044\u3002\n# print \u3082\u672b\u5c3e\u306b \"\\n\" \u3092\u51fa\u529b\u3057\u306a\u3044\u3002\n# \u3064\u307e\u308a\u3001print <print-on \u53ef\u80fd\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8>; \u3057\u3066\u3082\u3001\n# \u672b\u5c3e\u306b \"\\n\" \u306f\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\n\nmy $cons-gist-expected = q :to '!';\n(\n  (\n    xyz\n  .\n    xyz\n  )\n.\n  (\n    xyz\n  .\n    xyz\n  )\n)\n!\n\nprint $sym;\n{\n\tis $sym.Str, 'xyz';\n\tis $sym.gist, \"xyz\\n\";\n\n\tis $cons.Str, '((xyz . xyz) . (xyz . xyz))';\n\tis $cons.gist, $cons-gist-expected;\n}\n{\n\tis grab-stdout({ print $sym; }), 'xyz';\n\tis grab-stdout({ say $sym; }), \"xyz\\n\\n\";\n\n\tis grab-stdout({ print $cons; }), '((xyz . xyz) . (xyz . xyz))';\n\tis grab-stdout({ say $cons; }), \"$cons-gist-expected\\n\";\n}\n```\n\n```\n$ perl6 -I. b.t6\nok 1 - \nok 2 - \nok 3 - \nok 4 - \nok 5 - \nok 6 - \nok 7 - \nok 8 - \n```\n\n# Java \u306e Appendable \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u771f\u4f3c\u3066\u3001`Appendable` \u30ed\u30fc\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\n\n## \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30ab\u30b9\u30b1\u30fc\u30c7\u30a3\u30f3\u30b0\n\nSmalltalk \u3068\u3044\u3046\u8a00\u8a9e\u3067\u306f\u3001`obj` \u3068\u3044\u3046 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u307e\u305a `m1` \u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u3001\u6b21\u306b\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b `m2` \u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u3001\u4ee5\u4e0b\u540c\u69d8\u306b\u3059\u308b\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n\n```smalltalk\nobj m1; m2; m3; m4; ... .\n```\n\n\u3053\u308c\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u3068\u547c\u3073\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001\u540c\u3058\u3053\u3068\u306f\n\n```smalltalk\nobj m1. obj m2. obj m3. obj m4. obj ... .\n```\n\n\u3067\u3067\u304d\u307e\u3059\u304c\u3001\u30ab\u30b9\u30b1\u30fc\u30c9\u306e\u65b9\u304c\u4f55\u304b\u3068\u4fbf\u5229\u3067\u3059\u3002\u5b9f\u969b\u3001C++ \u3067\u3042\u307e\u308a\u306b\u3082\u6709\u540d\u306a\u306e\u304c ostream \u7528\u306b\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u308c\u305f << \u6f14\u7b97\u5b50\u3067\u3001\u4ee5\u4e0b\u306e\u8868\u73fe\u306f\u304a\u306a\u3058\u307f\u3067\u3057\u3087\u3046\u3002\n\n```c++\ncout << \"hello\" << endl;\n```\n\n\u8a00\u8a9e\u30ec\u30d9\u30eb\u3067\u30ab\u30b9\u30b1\u30fc\u30c9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044 C++ \u3067\u306f\u3001`operator<<()` \u304c `return *this;` \u3059\u308b\u3053\u3068\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u30ec\u30d9\u30eb\u3067\u3001\u307b\u307c\u540c\u3058\u52b9\u679c\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\nJava \u306b\u3082\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u30ec\u30d9\u30eb\u3067\u306e\u51fa\u529b\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u308b\u306e\u304c Appendable \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\n\n```java\nStringBuffer.new().append(\"hello\").append(\"\\n\").toString();\n```\n\n\u4f59\u8ac7\u3067\u3059\u304c Java \u306b Appendable \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u5c0e\u5165\u3055\u308c\u305f\u306e\u306f Java 1.5 \u304b\u3089\u3067\u3001\u5b9f\u969b\u3001\n\n```java\nStringBuffer.new().append(\"hello\").append(\"\\n\").toString();\n```\n\n\u306f\u53ef\u80fd\u3067\u3082\u3001\n\n```java\nSystem.out.append(\"hello\").append(\"\\n\");\n```\n\n\u306f\u4e0d\u53ef\u80fd\u306a\u6642\u671f\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u306f\u3001Perl 6 \u306e\u30ed\u30fc\u30eb\u3092\u4f7f\u3063\u3066\u3001Java \u306e Appendable \u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n## `Appendable` \u30ed\u30fc\u30eb\n\n`Appendable` \u306a Perl 6 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8 `$a` \u306b\u3001`$o` \u3092\u51fa\u529b\u3059\u308b\u306b\u306f\u3001\n\n```perl6\n$a.s($o);\n```\n\n\u3042\u308b\u3044\u306f\n\n```perl6\n$a.g($o);\n```\n\n\u3068\u3057\u307e\u3059\u3002\n\nJava \u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u9055\u3063\u3066\u3001\u30ed\u30fc\u30eb\u306b\u306f\u3001\u5b9f\u88c5\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002`Appendable` \u30ed\u30fc\u30eb\u3067\u306f\u3001`.s()`\u3001`.g()` \u304c `self` \u3092\u8fd4\u3059\u3053\u3068\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30ab\u30b9\u30b1\u30fc\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u307e\u305f\u3053\u308c\u3089\u306e\u672c\u4f53\u3067\u306f\u3001\u5f15\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c `.str-on()`\u3001`.gist-on()` \u3092\u7406\u89e3\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3001\u7406\u89e3\u3057\u305f\u306a\u3089\u305d\u306e\u7d50\u679c\u3092\u53d6\u308a\u5165\u308c\u3001\u7406\u89e3\u3057\u306a\u304b\u3063\u305f\u3089 Perl \u306e `.Str()`\u3001`.gist()` \u3092\u4f7f\u3063\u3066\u5f15\u6570\u3092\u6587\u5b57\u5217\u5316\u3057\u305f\u3082\u306e\u3092 `self.w()` \u3057\u307e\u3059\u3002\n\n```perl6:Appendable.pm6\nuse v6;\n\nrole Appendable;\n\nmethod new($dumb-out = $*OUT)\n{\n\tself.bless(*, :$dumb-out);\n}\n\nmethod s($obj)\n{\n\tmy $print-on = 'str-on';\n\tmy $stringify = 'Str';\n\tself._print-str(:$print-on, :$stringify, $obj);\n}\n\nmethod g($obj, $indent = '')\n{\n\tmy $print-on = 'gist-on';\n\tmy $stringify = 'gist';\n\tself._print-str(:$print-on, :$stringify, $obj, \"\\n\", $indent);\n}\n\nmethod _print-str($obj, $new-line = '', $indent = '', :$print-on!, :$stringify!)\n{\n\tmy $done;\n\ttry { $done = $obj.\"$print-on\"(self, $indent); }\n\tunless $done {\n\t\tself.w($indent, $obj.\"$stringify\"(), $new-line);\n\t}\n\tself;\n}\n\nmethod w(*@strings)\n{\n\tfor @strings -> Str $str {\n\t\tself.write($str.encode);\n\t}\n\tself;\n}\n```\n\n`.w()` \u306e\u4ee3\u308f\u308a\u306b `.print()` \u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3057\u305f\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u578b\u3092 `Str` \u306b\u9650\u5b9a\u3057\u305f\u304b\u3063\u305f\u3053\u3068\u3001`.write()` \u306e\u4f7f\u3044\u65b9\u304c\u793a\u3057\u305f\u304b\u3063\u305f\u3053\u3068\u304b\u3089\u3001`.w()` \u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\n`self` \u306f\u3001`.write()` \u3055\u3048\u7406\u89e3\u3059\u308c\u3070\u4f55\u3067\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\u4eca\u56de\u306f\u3001`MemOut` \u30af\u30e9\u30b9\u3092\u3067\u3063\u3061\u3042\u3052\u307e\u3057\u305f\u3002\u306a\u304a\u3001\u30d5\u30a1\u30a4\u30eb\u306b **\u3061\u307e\u3061\u307e** .write() \u3067\u66f8\u304d\u3053\u3080\u306e\u306f\u52b9\u7387\u304c\u826f\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u304b\u3068\u8a00\u3063\u3066\u3053\u308c\u3092\u6700\u9069\u5316\u3057\u3066\u3082\u7169\u96d1\u306b\u306a\u308b\u3070\u304b\u308a\u306a\u306e\u3067\u3001\u3084\u3081\u307e\u3057\u305f\u3002\n\n## `MemOut` \u30af\u30e9\u30b9\n\n```perl6:MemOut.pm6\nuse v6;\nuse Appendable;\n\nclass MemOut does Appendable;\n\nhas Buf @!bufbuf;\nhas Buf $!bufcat = Buf.new();\nhas Str $!strcat;\n\nmethod print(*@objs)\n{\n\tfor @objs\u00bb.Str -> Str $str {\n\t\tself.w($str);\n\t}\n}\n\nmethod write(Buf $buf)\n{\n\t@!bufbuf.push($buf);\n\t$!strcat = Str;\n}\n\nmethod Buf()\n{\n\tmy $cat = $!bufcat;\n\t$cat = self!catbuf($cat) if 0 < @!bufbuf;\n\t$cat;\n}\n\nmethod Str()\n{\n\tmy $cat = $!strcat;\n\t$!strcat = $cat = self!catbuf($!bufcat).decode if $cat === Str;\n\t$cat;\n}\n\nmethod !catbuf($old)\n{\n\tmy $cat = Buf.new($old.contents, @!bufbuf\u00bb.contents);\n\t@!bufbuf.splice;\n\t$!bufcat = $cat;\n}\n```\n\n# \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u3067\u304d\u308b\u3060\u3051 `.str-on()`\u3001`.gist-on()` \u3092\u5b9f\u88c5\u3059\u308b\n\n`Symbol` \u3068 `Cons` \u304b\u3089\u306a\u308b\u7c21\u5358\u306a\u69cb\u9020\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002`.str-on(Appendable)`\u3001`.gist-on(Appendable)` \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002`does Gistable;` \u306b\u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n## `Symbol` \u30af\u30e9\u30b9\n\n```perl6:Symbol.pm6\nuse v6;\nuse Gistable;\nuse Appendable;\n\nclass Symbol does Gistable;\n\nhas $.value;\n\nmethod new($value)\n{\n\tself.bless(*, :$value);\n}\n\nmethod str-on(Appendable $a)\n{\n\t$a.w($.value);\n}\n\nmethod gist-on(Appendable $a, $indent = '')\n{\n\t$a.w($indent, $.value, \"\\n\");\n}\n```\n\n## `Cons` \u30af\u30e9\u30b9\n\n```perl6:Cons.pm6\nuse v6;\nuse Gistable;\nuse Appendable;\n\nclass Cons does Gistable;\n\nhas $.car;\nhas $.cdr;\n\nmethod new($car, $cdr)\n{\n\tself.bless(*, :$car, :$cdr);\n}\n\nmethod str-on(Appendable $a)\n{\n\t$a.w('(');\n\t$.car.str-on($a).w(' . ');\n\t$.cdr.str-on($a).w(')');\n}\n\nmethod gist-on(Appendable $a, $indent = '')\n{\n\tmy $deeper = $indent ~ '  ';\n\t$a.w($indent, \"(\\n\");\n\t$.car.gist-on($a, $deeper);\n\t$a.w($indent, \".\\n\");\n\t$.cdr.gist-on($a, $deeper);\n\t$a.w($indent, \")\\n\")\n}\n```\n\n# `Gistable` \u30ed\u30fc\u30eb\u3067\u3001`.str-on()` \u2192 `.Str`\u3001`.gist-on()` \u2192 `.gist` \u3092\u5bfe\u5fdc\u3065\u3051\u308b\n\n`.str-on()`\u3001`.gist-on()` \u3067\u5b9a\u7fa9\u3057\u305f\u51fa\u529b\u3092\u30e1\u30e2\u30ea\u30fc\u306b\u5bfe\u3057\u3066\u884c\u3063\u3066\u3001`.Str`\u3001`.gist` \u3092\u5b9f\u73fe\u3057\u307e\u3059\u3002\n\n## `Gistable` \u30ed\u30fc\u30eb\n\n```perl6:Gistable.pm6\nuse v6;\nuse MemOut;\nuse Appendable;\n\nrole Gistable;\n\nmethod Str()\n{\n\tself._stringify('str-on');\n}\n\nmethod gist($indent = '')\n{\n\tself._stringify('gist-on', $indent);\n}\n\nmethod _stringify($print-on, $indent = '')\n{\n\tself.\"$print-on\"(MemOut.new()).Str;\n}\n```\n\n\u3053\u3046\u3057\u3066\u307f\u308b\u3068\u30ed\u30fc\u30eb\u306f\u3001\u9ebb\u85ac\u7684\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n## `grab-stdout()`\n\n\u307e\u3060\u8aac\u660e\u3057\u3066\u3044\u306a\u3044\u306e\u304c GrabStdout \u3067\u3059\u3002Perl 5 \u306b\u3042\u3063\u305f `stdout_is()` \u306e\u3088\u3046\u306a\u3082\u306e\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u66f8\u304d\u307e\u3057\u305f\u3002`NativeCall` \u3092\u4f7f\u3063\u3066\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002\u3053\u308c\u304c\u3068\u3066\u3082\u624b\u8efd\u3067\u9a5a\u304d\u307e\u3057\u305f\u3002\n\n```perl6:GrabStdout.pm6\n# Unix \u7248\u306e rakudo-star \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nmodule GrabStdout;\n\nuse v6;\nuse NativeCall;\n\nsub fork() returns Int is native { ... }\nsub wait() returns Int is native { ... }\nsub pipe(CArray[int]) returns Int is native { ... }\nsub close(int) returns Int is native { ... }\nsub dup(int $old) returns int is native { ... }\nsub dup2(int $old, Int $new) returns Int is native { ... }\n\nsub grab-stdout(&block) is export\n{\n\tmy @pipes := CArray[int].new();\n\t@pipes[0] = -1;\n\t@pipes[1] = -1;\n\tpipe(@pipes);\n\tmy $pid = fork;\n\tif $pid == 0 {\n\t\twriter(:@pipes, :&block);\n\t\texit(0);\n\t}\n\treader(:@pipes, :$pid);\n}\n\nsub writer(:@pipes!, :&block!)\n{\n\tdup2(@pipes[1], 1);\n\tclose(@pipes[0]);\n\tclose(@pipes[1]);\n\t&block();\n}\n\nsub reader(:@pipes!, :$pid!)\n{\n\tmy $backup = dup(0);\n\tdup2(@pipes[0], 0);\n\tclose(@pipes[0]);\n\tclose(@pipes[1]);\n\tdie unless wait() == $pid;\n\tmy $rv = $*IN.slurp;\n\tdup2($backup, 0);\n\tclose($backup);\n\t$rv;\n}\n```\n\nhttps://github.com/x19290/2012advent.p6/tree/master/a.streams"}