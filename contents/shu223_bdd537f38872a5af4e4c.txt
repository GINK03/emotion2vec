{"tags": ["\u6a5f\u68b0\u5b66\u7fd2", "iOS", "Metal", "Swift", "DeepLearning"], "context": "Metal\u3067CNN\u306e\u8a08\u7b97\u3092\u884c\u3046\u305f\u3081\u306eAPI\u7fa4\u3001MPSCNN\u3092\u7528\u3044\u305f\u624b\u66f8\u304d\u6570\u5b57\u8a8d\u8b58\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8aad\u3080\u3001\u3068\u3044\u3046\u8a18\u4e8b\u306e\u7d9a\u304d\u3067\u3059\u3002\n\niOS 10\u3067Metal Performance Shaders\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u3001CNN\uff08Convolutional Neural Network\uff09\u6f14\u7b97\u6a5f\u80fd\u7fa4\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002iOS\u30c7\u30d0\u30a4\u30b9\u306eGPU\u3067\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u4ee3\u7269\u3067\u3059\u3002\n\n\u524d\u7de8\u3067\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4e2d\u8eab\u306b\u306f\u8e0f\u307f\u8fbc\u307e\u305a\u3001\u30aa\u30fc\u30d0\u30fc\u30d3\u30e5\u30fc\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3057\u305f\u3002\n\u5f8c\u7de8\u3068\u306a\u308b\u672c\u8a18\u4e8b\u3067\u306f\u3044\u3088\u3044\u3088Metal Performance Shaders\u3092\u7528\u3044\u305fCNN\uff08Convolutional Neural Network / \u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff09\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u306a\u304a\u3001CNN\u81ea\u4f53\u306e\u89e3\u8aac\u306f\u3053\u3053\u3067\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u3001\u6982\u5ff5\u3092\u3056\u3063\u304f\u308a\u7406\u89e3\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u4e0b\u8a18\u8a18\u4e8b\u304c\u3001\n\n\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4ed5\u7d44\u307f | \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9 | POSTD\n\n\u3082\u3046\u3061\u3087\u3063\u3068\u3061\u3083\u3093\u3068\u5b66\u3073\u305f\u3044\u3068\u304d\u306fCoursera\u306e\u6a5f\u68b0\u5b66\u7fd2\u30b3\u30fc\u30b9\uff08\u7121\u6599\uff09\u304c\u5927\u5909\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\nMachine Learning - Stanford University | Coursera\n\n\nCNN\u5404\u5c64\u3092\u62c5\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\n\u672c\u30b5\u30f3\u30d7\u30eb\u3067\u306fMNISTDeepCNN\u304c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3067\u306f\u3001CNN\u306e\u5404\u5c64\u3084\u6d3b\u6027\u5316\u95a2\u6570\u3092\u62c5\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u7573\u307f\u8fbc\u307f\u5c64(Convolutional Layer)\n\u7573\u307f\u8fbc\u307f\u5c64\u3092\u62c5\u3046\u30af\u30e9\u30b9\u3068\u3057\u3066MPSCNNConvolution\u3068\u3044\u3046\u3082\u306e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nvar conv1, conv2: MPSCNNConvolution\n\n\u672c\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\u7b49\u3092\u30e9\u30c3\u30d7\u3057\u305fSlimMPSCNNConvolution\u3068\u3044\u3046\u30b5\u30d6\u30af\u30e9\u30b9 1 \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nconv1 = SlimMPSCNNConvolution(kernelWidth: 5,\n                              kernelHeight: 5,\n                              inputFeatureChannels: 1,\n                              outputFeatureChannels: 32,\n                              neuronFilter: relu,\n                              device: device,\n                              kernelParamsBinaryName: \"conv1\")\n\nconv2 = SlimMPSCNNConvolution(kernelWidth: 5,\n                              kernelHeight: 5,\n                              inputFeatureChannels: 32,\n                              outputFeatureChannels: 64,\n                              neuronFilter: relu,\n                              device: device,\n                              kernelParamsBinaryName: \"conv2\")\n\n\u672c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u7573\u307f\u8fbc\u307f\u5c64\u30922\u3064\u6301\u3061\u3001\n\n\u3069\u3061\u3089\u3082\u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\u306f5x5\n\u3069\u3061\u3089\u3082\u6d3b\u6027\u5316\u95a2\u6570\u306fReLU\n1\u3064\u76ee\u306e\u5c64\u306f\u5165\u529b\u304c1\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\uff09\u3001\u51fa\u529b\u304c32\u30c1\u30e3\u30f3\u30cd\u30eb\n2\u3064\u76ee\u306e\u5c64\u306f\u5165\u529b\u304c32\u30c1\u30e3\u30f3\u30cd\u30eb\u3001\u51fa\u529b\u304c64\u30c1\u30e3\u30f3\u30cd\u30eb\n\n\u3068\u3044\u3046\u3053\u3068\u304c\u5f15\u6570\u304b\u3089\u308f\u304b\u308a\u307e\u3059\u3002\"conv1\", \"conv2\"\u306f\u8a72\u5f53\u3059\u308b\u5b66\u7fd2\u6e08\u307f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5165\u3063\u305f\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3067\u3059\u3002\n\nRectified Linear Units\uff08ReLU\uff09\n\u4e0a\u3067\u51fa\u3066\u304d\u305f\u6d3b\u6027\u5316\u95a2\u6570ReLU\u3092\u62c5\u3046\u30af\u30e9\u30b9\u304c\u3001MPSCNNNeuronReLU\u3067\u3059\u3002\nvar relu: MPSCNNNeuronReLU\n\nrelu = MPSCNNNeuronReLU(device: device, a: 0)\n\n\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64(Pooling Layer)\nMPSCNNPoolingMax \u3084 MPSCNNPoolingAverage \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u672c\u30b5\u30f3\u30d7\u30eb\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u306f\u6700\u5927\u5024\u3092\u53d6\u308b\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\nvar pool: MPSCNNPoolingMax\n\npool = MPSCNNPoolingMax(device: device, kernelWidth: 2, kernelHeight: 2, strideInPixelsX: 2, strideInPixelsY: 2)\npool.offset = MPSOffset(x: 1, y: 1, z: 0);\npool.edgeMode = MPSImageEdgeMode.clamp\n\n\n\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\nMPSCNNSoftMax \u3068\u305d\u306e\u307e\u3093\u307e\u306a\u30af\u30e9\u30b9\u540d\u3067\u3059\u3002\nvar softmax : MPSCNNSoftMax\n\nsoftmax = MPSCNNSoftMax(device: device)\n\n\n\u5168\u7d50\u5408\u5c64(fully-connected layer)\nMPSCNNFullyConnected \u3068\u3044\u3046\u30af\u30e9\u30b9\u304cMPS\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\nvar fc1, fc2: MPSCNNFullyConnected\n\n\u672c\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30e2\u30c7\u30eb\u8aad\u307f\u8fbc\u307f\u7b49\u306e\u51e6\u7406\u3092\u30e9\u30c3\u30d7\u3057\u305f SlimMPSCNNFullyConnected \u3068\u3044\u3046\u30b5\u30d6\u30af\u30e9\u30b9 2 \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nfc1 = SlimMPSCNNFullyConnected(kernelWidth: 7,\n                               kernelHeight: 7,\n                               inputFeatureChannels: 64,\n                               outputFeatureChannels: 1024,\n                               neuronFilter: nil,\n                               device: device,\n                               kernelParamsBinaryName: \"fc1\")\n\nfc2 = SlimMPSCNNFullyConnected(kernelWidth: 1,\n                               kernelHeight: 1,\n                               inputFeatureChannels: 1024,\n                               outputFeatureChannels: 10,\n                               neuronFilter: nil,\n                               device: device,\n                               kernelParamsBinaryName: \"fc2\")\n\n\n\u5404\u30ec\u30a4\u30e4\u30fc\u9593\u306e\u5165\u51fa\u529b\u753b\u50cf\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5168\u4f53\u306e\u5165\u529b\u30fb\u51fa\u529b\u3001\u5404\u5c64\u306e\u51fa\u529b\uff08\u6b21\u306e\u5c64\u3078\u306e\u5165\u529b\uff09\u3068\u306a\u308b\u753b\u50cf\u306e\u5165\u308c\u7269\u3068\u306a\u308b MPSImage \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3001\u305d\u308c\u305e\u308c\u5225\u3005\u306b\u7528\u610f\u3057\u307e\u3059\u3002\nvar srcImage, dstImage : MPSImage\nvar c1Image, c2Image, p1Image, p2Image, fc1Image: MPSImage\n\nMPSImageDescriptor \u3067\u30d4\u30af\u30bb\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3001\u30b5\u30a4\u30ba\u3001\u7279\u5fb4\u91cf\u306e\u6570\u3092\u8a18\u8ff0\u3057\u3066\u304a\u3044\u3066\u3001\nlet sid = MPSImageDescriptor(channelFormat: .unorm8, width: 28, height: 28, featureChannels: 1)\nlet did = MPSImageDescriptor(channelFormat: .float16, width: 1, height: 1, featureChannels: 10)\nlet c1id  = MPSImageDescriptor(channelFormat: .float16, width: 28, height: 28, featureChannels: 32)\nlet p1id  = MPSImageDescriptor(channelFormat: .float16, width: 14, height: 14, featureChannels: 32)\nlet c2id  = MPSImageDescriptor(channelFormat: .float16, width: 14, height: 14, featureChannels: 64)\nlet p2id  = MPSImageDescriptor(channelFormat: .float16, width: 7 , height: 7 , featureChannels: 64)\nlet fc1id = MPSImageDescriptor(channelFormat: .float16, width: 1 , height: 1 , featureChannels: 1024)\n\n\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3092\u6e21\u3057\u3066MPSImage\u3092\u751f\u6210\u3057\u307e\u3059\u3002\nsrcImage    = MPSImage(device: device, imageDescriptor: sid)\ndstImage    = MPSImage(device: device, imageDescriptor: did)\nc1Image     = MPSImage(device: device, imageDescriptor: c1id)\np1Image     = MPSImage(device: device, imageDescriptor: p1id)\nc2Image     = MPSImage(device: device, imageDescriptor: c2id)\np2Image     = MPSImage(device: device, imageDescriptor: p2id)\nfc1Image    = MPSImage(device: device, imageDescriptor: fc1id)\n\n\n\u30d5\u30a9\u30ef\u30fc\u30c9\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\nforward\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u9806\u65b9\u5411\u4f1d\u64ad\uff08forward propagation\uff09\u306e\u8a08\u7b97\u3092\u884c\u3044\u307e\u3059\u3002\n\u521d\u671f\u5316\u51e6\u7406\u3067\u306fCNN\u306e\u5404\u5c64\u3092\u62c5\u3046\u30af\u30e9\u30b9\u7fa4\u3084\u5165\u51fa\u529b\u753b\u50cf\u306e\u5165\u308c\u7269\u3068\u306a\u308bMPSImage\u3092\u7528\u610f\u3057\u305f\u308f\u3051\u3067\u3059\u304c\u3001\u672c\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u3053\u308c\u3089\u3092\u5b9f\u969b\u306b\u7e4b\u3052\u3066\u3001\u5165\u529b\u753b\u50cf\u304b\u3089\u63a8\u6e2c\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u884c\u3044\u307e\u3059\u3002\nif let inputImage = inputImage {\n    conv1.encode(commandBuffer: commandBuffer, sourceImage: inputImage, destinationImage: c1Image)\n} else{\n    conv1.encode(commandBuffer: commandBuffer, sourceImage: srcImage, destinationImage: c1Image)\n}    \npool.encode   (commandBuffer: commandBuffer, sourceImage: c1Image   , destinationImage: p1Image)\nconv2.encode  (commandBuffer: commandBuffer, sourceImage: p1Image   , destinationImage: c2Image)\npool.encode   (commandBuffer: commandBuffer, sourceImage: c2Image   , destinationImage: p2Image)\nfc1.encode    (commandBuffer: commandBuffer, sourceImage: p2Image   , destinationImage: fc1Image)\nfc2.encode    (commandBuffer: commandBuffer, sourceImage: fc1Image  , destinationImage: dstImage)\nsoftmax.encode(commandBuffer: commandBuffer, sourceImage: dstImage  , destinationImage: finalLayer)\n\n\u3053\u3046\u3084\u3063\u3066\u307f\u308b\u3068\u306a\u3093\u3068\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3059\u3002\u5404\u5c64\u3092\u629c\u304d\u51fa\u3057\u3066\u4e26\u3079\u308b\u3068\u3001\n\nconv1 -> pool -> conv2 -> fc1 -> fc2 -> softmax\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3053\u3053\u306b\u3001\u5165\u51fa\u529b\u753b\u50cf\u3082\u5165\u308c\u308b\u3068\u3001\n\n(srcImage) -> conv1 -> (c1Image) -> pool -> (p1Image) -> conv2 -> (c2Image) -> fc1 -> (fc1Image) -> fc2 -> (dstImage) -> softmax -> (finalLayer)\n\n\u3068\u3044\u3046\u611f\u3058\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\uff08\u672c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u306f\u5225\u306e\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u30a4\u30e1\u30fc\u30b8\u56f3\u3068\u3057\u3066\u3001WWDC16\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u30b9\u30e9\u30a4\u30c9\u3088\u308a\uff09\n\u3053\u3053\u3067\u547c\u3093\u3067\u3044\u308b encode\u301c \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5404\u5c64\u306e\u30af\u30e9\u30b9\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3068\u306a\u3063\u3066\u3044\u308bMPSCNNKernel\u304c\u6301\u3063\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3001Metal\u306e\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u306b\u51e6\u7406\u3092\u767b\u9332\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\nMPSCNN\nopen func encode(commandBuffer: MTLCommandBuffer, sourceImage: MPSImage, destinationImage: MPSImage)\n\n\n\n\u6700\u7d42\u51fa\u529b\n\u6700\u7d42\u51fa\u529b\uff08\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306e\u51fa\u529b\uff09\u3068\u306a\u308b finalLayer \u306f\u6b21\u306e\u3088\u3046\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u304a\u308a\u3001\nlet finalLayer = MPSImage(device: commandBuffer.device, imageDescriptor: did)\n\n\u3053\u3053\u3067\u6e21\u3055\u308c\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf did \u306f\u3001\uff08\u518d\u63b2\u306b\u306a\u308a\u307e\u3059\u304c\uff09\u6b21\u306e\u3088\u3046\u306b\u751f\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nlet did = MPSImageDescriptor(channelFormat: .float16, width: 1, height: 1, featureChannels: 10)\n\n\u3057\u305f\u304c\u3063\u3066\u30010\u301c9\u306e10\u7a2e\u985e\u306e\u30e9\u30d9\u30eb\u306b\u3064\u3044\u3066\u306e\u78ba\u7387\u304c\u793a\u3055\u308c\u305f1x1\u306e\u753b\u50cf\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3042\u3068\u306f\u3001getLabel\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u3053\u306e1x1\u306e\u753b\u50cf\u306e\u30d4\u30af\u30bb\u30eb\u5024\u3092\u8aad\u307f\u53d6\u308a\u3001\u6700\u7d42\u7684\u306a0\u301c9\u306e\u6570\u5b57\u3092\u51fa\u529b\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u51e6\u7406\u5185\u5bb9\u3082\u307e\u305f\u5225\u8a18\u4e8b\u3067\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nMPSCNN\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u984c\u6750\u306b\u3001\u3069\u306e\u3088\u3046\u306b\u624b\u66f8\u304d\u6570\u5b57\u8a8d\u8b58\u306eCNN\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u3002\n\u3056\u3063\u304f\u308a&\u99c6\u3051\u8db3\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u7d30\u304b\u3044\u884c\u5217\u8a08\u7b97\u7b49\u3092\u307b\u3068\u3093\u3069\u610f\u8b58\u3059\u308b\u3053\u3068\u3082\u306a\u304f\u3001GPU-Accelerated\u306aCNN\u3092\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u69cb\u7bc9\u3067\u304d\u308b\u3053\u3068\u304c\u611f\u3058\u53d6\u308c\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u5b66\u7fd2\u6e08\u307f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u7b49\u3001\u4eca\u56de\u66f8\u304d\u304d\u308c\u306a\u304b\u3063\u305f\u3053\u3068\u306f\u307e\u305f\u5225\u8a18\u4e8b\u3067\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\uff08\u8ffd\u8a18\uff09\u66f8\u304d\u307e\u3057\u305f\uff1a MPSCNN\u306b\u6e21\u3059\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 - Qiita\n\n\n\n\n\u3053\u306e\u4e2d\u8eab\u306b\u3064\u3044\u3066\u306f\u9577\u304f\u306a\u308b\u306e\u3067\u3001\u307e\u305f\u5225\u8a18\u4e8b\u3067\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u00a0\u21a9\n\n\n\u3053\u308c\u3082\u3001\u4e2d\u8eab\u306b\u3064\u3044\u3066\u306f\u5225\u8a18\u4e8b\u3067\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u00a0\u21a9\n\n\n\nMetal\u3067CNN\u306e\u8a08\u7b97\u3092\u884c\u3046\u305f\u3081\u306eAPI\u7fa4\u3001MPSCNN\u3092\u7528\u3044\u305f\u624b\u66f8\u304d\u6570\u5b57\u8a8d\u8b58\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8aad\u3080\u3001\u3068\u3044\u3046\u8a18\u4e8b\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n> iOS 10\u3067Metal Performance Shaders\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u3001CNN\uff08Convolutional Neural Network\uff09\u6f14\u7b97\u6a5f\u80fd\u7fa4\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002**iOS\u30c7\u30d0\u30a4\u30b9\u306eGPU\u3067\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b**\u3001\u3068\u3044\u3046\u4ee3\u7269\u3067\u3059\u3002\n\n[\u524d\u7de8](http://qiita.com/shu223/items/28122f5668cf1547e8fe)\u3067\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4e2d\u8eab\u306b\u306f\u8e0f\u307f\u8fbc\u307e\u305a\u3001\u30aa\u30fc\u30d0\u30fc\u30d3\u30e5\u30fc\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3057\u305f\u3002\n\n\n\u5f8c\u7de8\u3068\u306a\u308b\u672c\u8a18\u4e8b\u3067\u306f\u3044\u3088\u3044\u3088Metal Performance Shaders\u3092\u7528\u3044\u305fCNN\uff08Convolutional Neural Network / \u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff09\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n![](https://qiita-image-store.s3.amazonaws.com/0/3180/e2cfc688-8812-8771-2fa8-405b4bb0492c.gif)\n\n\n\u306a\u304a\u3001CNN\u81ea\u4f53\u306e\u89e3\u8aac\u306f\u3053\u3053\u3067\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u3001\u6982\u5ff5\u3092\u3056\u3063\u304f\u308a\u7406\u89e3\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u4e0b\u8a18\u8a18\u4e8b\u304c\u3001\n\n- [\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4ed5\u7d44\u307f | \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9 | POSTD](http://postd.cc/how-do-convolutional-neural-networks-work/)\n\n\u3082\u3046\u3061\u3087\u3063\u3068\u3061\u3083\u3093\u3068\u5b66\u3073\u305f\u3044\u3068\u304d\u306fCoursera\u306e\u6a5f\u68b0\u5b66\u7fd2\u30b3\u30fc\u30b9\uff08\u7121\u6599\uff09\u304c\u5927\u5909\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n- [Machine Learning - Stanford University | Coursera](https://www.coursera.org/learn/machine-learning)\n\n\n##CNN\u5404\u5c64\u3092\u62c5\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\n\n\u672c\u30b5\u30f3\u30d7\u30eb\u3067\u306f`MNISTDeepCNN`\u304c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306e\u521d\u671f\u5316\u51e6\u7406\u3067\u306f\u3001CNN\u306e\u5404\u5c64\u3084\u6d3b\u6027\u5316\u95a2\u6570\u3092\u62c5\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n###\u7573\u307f\u8fbc\u307f\u5c64(Convolutional Layer)\n\n\u7573\u307f\u8fbc\u307f\u5c64\u3092\u62c5\u3046\u30af\u30e9\u30b9\u3068\u3057\u3066`MPSCNNConvolution`\u3068\u3044\u3046\u3082\u306e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```swift\nvar conv1, conv2: MPSCNNConvolution\n```\n\n\u672c\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\u7b49\u3092\u30e9\u30c3\u30d7\u3057\u305f`SlimMPSCNNConvolution`\u3068\u3044\u3046\u30b5\u30d6\u30af\u30e9\u30b9 [^1] \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n[^1]: \u3053\u306e\u4e2d\u8eab\u306b\u3064\u3044\u3066\u306f\u9577\u304f\u306a\u308b\u306e\u3067\u3001\u307e\u305f\u5225\u8a18\u4e8b\u3067\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\n\n```swift\nconv1 = SlimMPSCNNConvolution(kernelWidth: 5,\n                              kernelHeight: 5,\n                              inputFeatureChannels: 1,\n                              outputFeatureChannels: 32,\n                              neuronFilter: relu,\n                              device: device,\n                              kernelParamsBinaryName: \"conv1\")\n\nconv2 = SlimMPSCNNConvolution(kernelWidth: 5,\n                              kernelHeight: 5,\n                              inputFeatureChannels: 32,\n                              outputFeatureChannels: 64,\n                              neuronFilter: relu,\n                              device: device,\n                              kernelParamsBinaryName: \"conv2\")\n```\n\n\u672c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f**\u7573\u307f\u8fbc\u307f\u5c64\u30922\u3064**\u6301\u3061\u3001\n\n- \u3069\u3061\u3089\u3082\u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\u306f5x5\n- \u3069\u3061\u3089\u3082\u6d3b\u6027\u5316\u95a2\u6570\u306fReLU\n- 1\u3064\u76ee\u306e\u5c64\u306f\u5165\u529b\u304c1\u30c1\u30e3\u30f3\u30cd\u30eb\uff08\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\uff09\u3001\u51fa\u529b\u304c32\u30c1\u30e3\u30f3\u30cd\u30eb\n- 2\u3064\u76ee\u306e\u5c64\u306f\u5165\u529b\u304c32\u30c1\u30e3\u30f3\u30cd\u30eb\u3001\u51fa\u529b\u304c64\u30c1\u30e3\u30f3\u30cd\u30eb\n\n\u3068\u3044\u3046\u3053\u3068\u304c\u5f15\u6570\u304b\u3089\u308f\u304b\u308a\u307e\u3059\u3002\"conv1\", \"conv2\"\u306f\u8a72\u5f53\u3059\u308b\u5b66\u7fd2\u6e08\u307f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5165\u3063\u305f\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3067\u3059\u3002\n\n\n###Rectified Linear Units\uff08ReLU\uff09\n\n\u4e0a\u3067\u51fa\u3066\u304d\u305f\u6d3b\u6027\u5316\u95a2\u6570ReLU\u3092\u62c5\u3046\u30af\u30e9\u30b9\u304c\u3001`MPSCNNNeuronReLU`\u3067\u3059\u3002\n\n```swift\nvar relu: MPSCNNNeuronReLU\n```\n\n```swift\nrelu = MPSCNNNeuronReLU(device: device, a: 0)\n```\n\n\n###\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64(Pooling Layer)\n\n`MPSCNNPoolingMax` \u3084 `MPSCNNPoolingAverage` \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u672c\u30b5\u30f3\u30d7\u30eb\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u306f\u6700\u5927\u5024\u3092\u53d6\u308b\u30d7\u30fc\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```swift\nvar pool: MPSCNNPoolingMax\n```\n\n```swift\npool = MPSCNNPoolingMax(device: device, kernelWidth: 2, kernelHeight: 2, strideInPixelsX: 2, strideInPixelsY: 2)\npool.offset = MPSOffset(x: 1, y: 1, z: 0);\npool.edgeMode = MPSImageEdgeMode.clamp\n```\n\n###\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\n\n`MPSCNNSoftMax` \u3068\u305d\u306e\u307e\u3093\u307e\u306a\u30af\u30e9\u30b9\u540d\u3067\u3059\u3002\n\n\n```swift\nvar softmax : MPSCNNSoftMax\n```\n\n```swift\nsoftmax = MPSCNNSoftMax(device: device)\n```\n\n\n###\u5168\u7d50\u5408\u5c64(fully-connected layer)\n\n`MPSCNNFullyConnected` \u3068\u3044\u3046\u30af\u30e9\u30b9\u304cMPS\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\n\n```swift\nvar fc1, fc2: MPSCNNFullyConnected\n```\n\n\u672c\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30e2\u30c7\u30eb\u8aad\u307f\u8fbc\u307f\u7b49\u306e\u51e6\u7406\u3092\u30e9\u30c3\u30d7\u3057\u305f `SlimMPSCNNFullyConnected` \u3068\u3044\u3046\u30b5\u30d6\u30af\u30e9\u30b9 [^2] \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n[^2]: \u3053\u308c\u3082\u3001\u4e2d\u8eab\u306b\u3064\u3044\u3066\u306f\u5225\u8a18\u4e8b\u3067\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```swift\nfc1 = SlimMPSCNNFullyConnected(kernelWidth: 7,\n                               kernelHeight: 7,\n                               inputFeatureChannels: 64,\n                               outputFeatureChannels: 1024,\n                               neuronFilter: nil,\n                               device: device,\n                               kernelParamsBinaryName: \"fc1\")\n\nfc2 = SlimMPSCNNFullyConnected(kernelWidth: 1,\n                               kernelHeight: 1,\n                               inputFeatureChannels: 1024,\n                               outputFeatureChannels: 10,\n                               neuronFilter: nil,\n                               device: device,\n                               kernelParamsBinaryName: \"fc2\")\n```\n\n\n###\u5404\u30ec\u30a4\u30e4\u30fc\u9593\u306e\u5165\u51fa\u529b\u753b\u50cf\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5168\u4f53\u306e\u5165\u529b\u30fb\u51fa\u529b\u3001\u5404\u5c64\u306e\u51fa\u529b\uff08\u6b21\u306e\u5c64\u3078\u306e\u5165\u529b\uff09\u3068\u306a\u308b\u753b\u50cf\u306e\u5165\u308c\u7269\u3068\u306a\u308b `MPSImage` \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3001\u305d\u308c\u305e\u308c\u5225\u3005\u306b\u7528\u610f\u3057\u307e\u3059\u3002\n\n```swift\nvar srcImage, dstImage : MPSImage\nvar c1Image, c2Image, p1Image, p2Image, fc1Image: MPSImage\n```\n\n`MPSImageDescriptor` \u3067\u30d4\u30af\u30bb\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3001\u30b5\u30a4\u30ba\u3001\u7279\u5fb4\u91cf\u306e\u6570\u3092\u8a18\u8ff0\u3057\u3066\u304a\u3044\u3066\u3001\n \n```swift\nlet sid = MPSImageDescriptor(channelFormat: .unorm8, width: 28, height: 28, featureChannels: 1)\nlet did = MPSImageDescriptor(channelFormat: .float16, width: 1, height: 1, featureChannels: 10)\nlet c1id  = MPSImageDescriptor(channelFormat: .float16, width: 28, height: 28, featureChannels: 32)\nlet p1id  = MPSImageDescriptor(channelFormat: .float16, width: 14, height: 14, featureChannels: 32)\nlet c2id  = MPSImageDescriptor(channelFormat: .float16, width: 14, height: 14, featureChannels: 64)\nlet p2id  = MPSImageDescriptor(channelFormat: .float16, width: 7 , height: 7 , featureChannels: 64)\nlet fc1id = MPSImageDescriptor(channelFormat: .float16, width: 1 , height: 1 , featureChannels: 1024)\n```\n\n\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3092\u6e21\u3057\u3066`MPSImage`\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```swift    \nsrcImage    = MPSImage(device: device, imageDescriptor: sid)\ndstImage    = MPSImage(device: device, imageDescriptor: did)\nc1Image     = MPSImage(device: device, imageDescriptor: c1id)\np1Image     = MPSImage(device: device, imageDescriptor: p1id)\nc2Image     = MPSImage(device: device, imageDescriptor: c2id)\np2Image     = MPSImage(device: device, imageDescriptor: p2id)\nfc1Image    = MPSImage(device: device, imageDescriptor: fc1id)\n```\n\n\n##\u30d5\u30a9\u30ef\u30fc\u30c9\u30d7\u30ed\u30d1\u30b2\u30fc\u30b7\u30e7\u30f3\n\n`forward`\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u9806\u65b9\u5411\u4f1d\u64ad\uff08forward propagation\uff09\u306e\u8a08\u7b97\u3092\u884c\u3044\u307e\u3059\u3002\n\n\n\u521d\u671f\u5316\u51e6\u7406\u3067\u306fCNN\u306e\u5404\u5c64\u3092\u62c5\u3046\u30af\u30e9\u30b9\u7fa4\u3084\u5165\u51fa\u529b\u753b\u50cf\u306e\u5165\u308c\u7269\u3068\u306a\u308b`MPSImage`\u3092\u7528\u610f\u3057\u305f\u308f\u3051\u3067\u3059\u304c\u3001\u672c\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u3053\u308c\u3089\u3092\u5b9f\u969b\u306b\u7e4b\u3052\u3066\u3001\u5165\u529b\u753b\u50cf\u304b\u3089\u63a8\u6e2c\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u884c\u3044\u307e\u3059\u3002\n\n```swift\nif let inputImage = inputImage {\n    conv1.encode(commandBuffer: commandBuffer, sourceImage: inputImage, destinationImage: c1Image)\n} else{\n    conv1.encode(commandBuffer: commandBuffer, sourceImage: srcImage, destinationImage: c1Image)\n}    \npool.encode   (commandBuffer: commandBuffer, sourceImage: c1Image   , destinationImage: p1Image)\nconv2.encode  (commandBuffer: commandBuffer, sourceImage: p1Image   , destinationImage: c2Image)\npool.encode   (commandBuffer: commandBuffer, sourceImage: c2Image   , destinationImage: p2Image)\nfc1.encode    (commandBuffer: commandBuffer, sourceImage: p2Image   , destinationImage: fc1Image)\nfc2.encode    (commandBuffer: commandBuffer, sourceImage: fc1Image  , destinationImage: dstImage)\nsoftmax.encode(commandBuffer: commandBuffer, sourceImage: dstImage  , destinationImage: finalLayer)\n```\n\n\u3053\u3046\u3084\u3063\u3066\u307f\u308b\u3068\u306a\u3093\u3068\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u3059\u3002\u5404\u5c64\u3092\u629c\u304d\u51fa\u3057\u3066\u4e26\u3079\u308b\u3068\u3001\n\n> conv1 -> pool -> conv2 -> fc1 -> fc2 -> softmax\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u3053\u3053\u306b\u3001\u5165\u51fa\u529b\u753b\u50cf\u3082\u5165\u308c\u308b\u3068\u3001\n\n> (srcImage) -> conv1 -> (c1Image) -> pool -> (p1Image) -> conv2 -> (c2Image) -> fc1 -> (fc1Image) -> fc2 -> (dstImage) -> softmax -> (finalLayer)\n\n\u3068\u3044\u3046\u611f\u3058\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n![cnn.jpg](https://qiita-image-store.s3.amazonaws.com/0/3180/bb3858ce-e79c-eff4-7e58-3a7f4f69249b.jpeg)\n\n\uff08\u672c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u306f\u5225\u306e\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u304c\u3001**\u30a4\u30e1\u30fc\u30b8\u56f3**\u3068\u3057\u3066\u3001WWDC16\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u30b9\u30e9\u30a4\u30c9\u3088\u308a\uff09\n\n\u3053\u3053\u3067\u547c\u3093\u3067\u3044\u308b `encode\u301c` \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u5404\u5c64\u306e\u30af\u30e9\u30b9\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3068\u306a\u3063\u3066\u3044\u308b`MPSCNNKernel`\u304c\u6301\u3063\u3066\u3044\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3001**Metal\u306e\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u306b\u51e6\u7406\u3092\u767b\u9332**\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\n```swift:MPSCNN\nopen func encode(commandBuffer: MTLCommandBuffer, sourceImage: MPSImage, destinationImage: MPSImage)\n```\n\n\n###\u6700\u7d42\u51fa\u529b\n\n\u6700\u7d42\u51fa\u529b\uff08\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306e\u51fa\u529b\uff09\u3068\u306a\u308b `finalLayer` \u306f\u6b21\u306e\u3088\u3046\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u304a\u308a\u3001\n\n```swift\nlet finalLayer = MPSImage(device: commandBuffer.device, imageDescriptor: did)\n```\n\n\u3053\u3053\u3067\u6e21\u3055\u308c\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf `did` \u306f\u3001\uff08\u518d\u63b2\u306b\u306a\u308a\u307e\u3059\u304c\uff09\u6b21\u306e\u3088\u3046\u306b\u751f\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```swift\nlet did = MPSImageDescriptor(channelFormat: .float16, width: 1, height: 1, featureChannels: 10)\n```\n\n\u3057\u305f\u304c\u3063\u3066\u30010\u301c9\u306e10\u7a2e\u985e\u306e\u30e9\u30d9\u30eb\u306b\u3064\u3044\u3066\u306e\u78ba\u7387\u304c\u793a\u3055\u308c\u305f1x1\u306e\u753b\u50cf\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u3042\u3068\u306f\u3001`getLabel`\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u3053\u306e1x1\u306e\u753b\u50cf\u306e\u30d4\u30af\u30bb\u30eb\u5024\u3092\u8aad\u307f\u53d6\u308a\u3001\u6700\u7d42\u7684\u306a0\u301c9\u306e\u6570\u5b57\u3092\u51fa\u529b\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u51e6\u7406\u5185\u5bb9\u3082\u307e\u305f\u5225\u8a18\u4e8b\u3067\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n##\u307e\u3068\u3081\n\nMPSCNN\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u984c\u6750\u306b\u3001\u3069\u306e\u3088\u3046\u306b\u624b\u66f8\u304d\u6570\u5b57\u8a8d\u8b58\u306eCNN\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u3056\u3063\u304f\u308a&\u99c6\u3051\u8db3\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u7d30\u304b\u3044**\u884c\u5217\u8a08\u7b97\u7b49\u3092\u307b\u3068\u3093\u3069\u610f\u8b58\u3059\u308b\u3053\u3068\u3082\u306a\u304f\u3001GPU-Accelerated\u306aCNN\u3092\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u69cb\u7bc9\u3067\u304d\u308b**\u3053\u3068\u304c\u611f\u3058\u53d6\u308c\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5b66\u7fd2\u6e08\u307f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u7b49\u3001\u4eca\u56de\u66f8\u304d\u304d\u308c\u306a\u304b\u3063\u305f\u3053\u3068\u306f\u307e\u305f\u5225\u8a18\u4e8b\u3067\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\uff08\u8ffd\u8a18\uff09\u66f8\u304d\u307e\u3057\u305f\uff1a [MPSCNN\u306b\u6e21\u3059\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8 - Qiita](http://qiita.com/shu223/items/c735ab888a83f214f89a)\n\n"}