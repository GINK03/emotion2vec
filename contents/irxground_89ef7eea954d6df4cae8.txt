{"tags": ["Ruby", "\u6570\u5b66"], "context": " More than 1 year has passed since last update.\u8868\u984c\u306e\u3068\u304a\u308a\u306e\u5185\u5bb9\u3067\u3001\u305f\u3060\u306e\u30e1\u30e2\u66f8\u304d\u3067\u3059\u3002\n\u3069\u3063\u304b\u306b\u30e1\u30e2\u3059\u308c\u3070\u3044\u3044\u306e\u3060\u3051\u3069\u6bce\u56de\u8a08\u7b97\u3057\u3066\u308b\u306e\u3067\u3053\u3053\u306b\u6295\u7a3f\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u5168\u5358\u5c04\u306a\u5199\u50cf\n\u4e8c\u3064\u306e\u81ea\u7136\u6570\u3092\u4e00\u3064\u306e\u81ea\u7136\u6570\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3001\u7d50\u679c\u306b\u91cd\u8907\u304c\u7121\u3044\u3088\u3046\u306b\u4f5c\u308a\u305f\u3044\u3002\n\u3053\u3046\u3044\u3046\u306e\u304c\u3042\u308b\u3068\u4f8b\u3048\u3070DB\u306e\u4e3b\u30ad\u30fc\u304c\u4e8c\u3064\uff08\u4e21\u65b9\u6574\u6570\uff09\u3042\u308b\u3068\u304d\u306b\u3001\u4e00\u3064\u306e\u6574\u6570\u3092\u30ad\u30fc\u306b\u3057\u3066\u691c\u7d22\u3067\u304d\u308b\u3002\n\u3053\u3046\u306a\u3063\u305f\u3002\uff08\u3053\u306e\u4f8b\u3067\u306f\u30011\u4ee5\u4e0a\u306e\u81ea\u7136\u6570\uff09\nf = ->(x,y){ (x+y)*(x+y-1)/2 - (x-1) }\n\nf\u306e\u9006\u95a2\u6570\u306f\u307e\u3060\u4f5c\u308c\u3066\u3044\u306a\u3044\u3002\n\u9762\u5012\u305d\u3046\u306a\u306e\u3067 \u982d\u306e\u826f\u3044\u4eba\u3001\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u8ffd\u8a18\n2\u500b\u306e\u81ea\u7136\u6570\u30921\u500b\u306b\u96c6\u7d04\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092(N-1)\u56de\u7e70\u308a\u8fd4\u305b\u3070\u4efb\u610f\u306e\u500b\u6570N\u306e\u81ea\u7136\u6570\u30921\u500b\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nRuby\u3067\u4e5d\u4e5d\n\u4f5c\u3063\u305f\u95a2\u6570\u306e\u5b9f\u884c\u7d50\u679c\u304c\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u4f5c\u3063\u305f\u3002\n\u3064\u3044\u3067\u306b\u904a\u3093\u3067\u307f\u305f\u3002\ndef show_table(list, f = nil, width: nil)\n  f = ->(x,y){ yield x, y } if block_given?\n  width = f[list.last, list.last].to_s.size + 1 unless width\n  show = ->x{ x.to_s.rjust(width) }\n  print show['']\n  puts list.map(&show).join\n  list.each do |y|\n    puts [show[y], *list.map{|x| show[f[x, y]] }].join\n  end \nend\n\nputs '9 x 9'\nshow_table(1..9){|x, y| x * y } \n\nputs\nputs 'one based'\nf = ->(x,y){ (x+y)*(x+y-1)/2 - (x-1) }\nshow_table(1..9, f)\n\nputs\nputs 'zero based'\nf = ->(x,y){ (x+y+1)*(x+y+2)/2 - (x+1) }\nshow_table(0..9, f)\n\nputs\nputs 'hexadecimal chars'\nhex = [*'0'..'9',*'a'..'f']\nshow_table(hex, &:+)\n\n\u51fa\u529b\u306f\u3053\u3093\u306a\u611f\u3058\n9 x 9\n     1  2  3  4  5  6  7  8  9\n  1  1  2  3  4  5  6  7  8  9\n  2  2  4  6  8 10 12 14 16 18\n  3  3  6  9 12 15 18 21 24 27\n  4  4  8 12 16 20 24 28 32 36\n  5  5 10 15 20 25 30 35 40 45\n  6  6 12 18 24 30 36 42 48 54\n  7  7 14 21 28 35 42 49 56 63\n  8  8 16 24 32 40 48 56 64 72\n  9  9 18 27 36 45 54 63 72 81\n\none based\n       1   2   3   4   5   6   7   8   9\n   1   1   2   4   7  11  16  22  29  37\n   2   3   5   8  12  17  23  30  38  47\n   3   6   9  13  18  24  31  39  48  58\n   4  10  14  19  25  32  40  49  59  70\n   5  15  20  26  33  41  50  60  71  83\n   6  21  27  34  42  51  61  72  84  97\n   7  28  35  43  52  62  73  85  98 112\n   8  36  44  53  63  74  86  99 113 128\n   9  45  54  64  75  87 100 114 129 145\n\nzero based\n       0   1   2   3   4   5   6   7   8   9\n   0   0   1   3   6  10  15  21  28  36  45\n   1   2   4   7  11  16  22  29  37  46  56\n   2   5   8  12  17  23  30  38  47  57  68\n   3   9  13  18  24  31  39  48  58  69  81\n   4  14  19  25  32  40  49  59  70  82  95\n   5  20  26  33  41  50  60  71  83  96 110\n   6  27  34  42  51  61  72  84  97 111 126\n   7  35  43  52  62  73  85  98 112 127 143\n   8  44  53  63  74  86  99 113 128 144 161\n   9  54  64  75  87 100 114 129 145 162 180\n\nhexadecimal chars\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n  0 00 10 20 30 40 50 60 70 80 90 a0 b0 c0 d0 e0 f0\n  1 01 11 21 31 41 51 61 71 81 91 a1 b1 c1 d1 e1 f1\n  2 02 12 22 32 42 52 62 72 82 92 a2 b2 c2 d2 e2 f2\n  3 03 13 23 33 43 53 63 73 83 93 a3 b3 c3 d3 e3 f3\n  4 04 14 24 34 44 54 64 74 84 94 a4 b4 c4 d4 e4 f4\n  5 05 15 25 35 45 55 65 75 85 95 a5 b5 c5 d5 e5 f5\n  6 06 16 26 36 46 56 66 76 86 96 a6 b6 c6 d6 e6 f6\n  7 07 17 27 37 47 57 67 77 87 97 a7 b7 c7 d7 e7 f7\n  8 08 18 28 38 48 58 68 78 88 98 a8 b8 c8 d8 e8 f8\n  9 09 19 29 39 49 59 69 79 89 99 a9 b9 c9 d9 e9 f9\n  a 0a 1a 2a 3a 4a 5a 6a 7a 8a 9a aa ba ca da ea fa\n  b 0b 1b 2b 3b 4b 5b 6b 7b 8b 9b ab bb cb db eb fb\n  c 0c 1c 2c 3c 4c 5c 6c 7c 8c 9c ac bc cc dc ec fc\n  d 0d 1d 2d 3d 4d 5d 6d 7d 8d 9d ad bd cd dd ed fd\n  e 0e 1e 2e 3e 4e 5e 6e 7e 8e 9e ae be ce de ee fe\n  f 0f 1f 2f 3f 4f 5f 6f 7f 8f 9f af bf cf df ef ff\n\n\u8868\u984c\u306e\u3068\u304a\u308a\u306e\u5185\u5bb9\u3067\u3001\u305f\u3060\u306e\u30e1\u30e2\u66f8\u304d\u3067\u3059\u3002\n\u3069\u3063\u304b\u306b\u30e1\u30e2\u3059\u308c\u3070\u3044\u3044\u306e\u3060\u3051\u3069\u6bce\u56de\u8a08\u7b97\u3057\u3066\u308b\u306e\u3067\u3053\u3053\u306b\u6295\u7a3f\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n# \u5168\u5358\u5c04\u306a\u5199\u50cf\n\n\u4e8c\u3064\u306e\u81ea\u7136\u6570\u3092\u4e00\u3064\u306e\u81ea\u7136\u6570\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3001\u7d50\u679c\u306b\u91cd\u8907\u304c\u7121\u3044\u3088\u3046\u306b\u4f5c\u308a\u305f\u3044\u3002\n\u3053\u3046\u3044\u3046\u306e\u304c\u3042\u308b\u3068\u4f8b\u3048\u3070DB\u306e\u4e3b\u30ad\u30fc\u304c\u4e8c\u3064\uff08\u4e21\u65b9\u6574\u6570\uff09\u3042\u308b\u3068\u304d\u306b\u3001\u4e00\u3064\u306e\u6574\u6570\u3092\u30ad\u30fc\u306b\u3057\u3066\u691c\u7d22\u3067\u304d\u308b\u3002\n\n\u3053\u3046\u306a\u3063\u305f\u3002\uff08\u3053\u306e\u4f8b\u3067\u306f\u30011\u4ee5\u4e0a\u306e\u81ea\u7136\u6570\uff09\n\n```rb\nf = ->(x,y){ (x+y)*(x+y-1)/2 - (x-1) }\n```\n\n`f`\u306e\u9006\u95a2\u6570\u306f\u307e\u3060\u4f5c\u308c\u3066\u3044\u306a\u3044\u3002\n<del>\u9762\u5012\u305d\u3046\u306a\u306e\u3067</del> \u982d\u306e\u826f\u3044\u4eba\u3001\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n## \u8ffd\u8a18\n\n2\u500b\u306e\u81ea\u7136\u6570\u30921\u500b\u306b\u96c6\u7d04\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092(N-1)\u56de\u7e70\u308a\u8fd4\u305b\u3070\u4efb\u610f\u306e\u500b\u6570N\u306e\u81ea\u7136\u6570\u30921\u500b\u306b\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n# Ruby\u3067\u4e5d\u4e5d\n\n\u4f5c\u3063\u305f\u95a2\u6570\u306e\u5b9f\u884c\u7d50\u679c\u304c\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u4f5c\u3063\u305f\u3002\n\u3064\u3044\u3067\u306b\u904a\u3093\u3067\u307f\u305f\u3002\n\n```rb\ndef show_table(list, f = nil, width: nil)\n  f = ->(x,y){ yield x, y } if block_given?\n  width = f[list.last, list.last].to_s.size + 1 unless width\n  show = ->x{ x.to_s.rjust(width) }\n  print show['']\n  puts list.map(&show).join\n  list.each do |y|\n    puts [show[y], *list.map{|x| show[f[x, y]] }].join\n  end \nend\n\nputs '9 x 9'\nshow_table(1..9){|x, y| x * y } \n\nputs\nputs 'one based'\nf = ->(x,y){ (x+y)*(x+y-1)/2 - (x-1) }\nshow_table(1..9, f)\n\nputs\nputs 'zero based'\nf = ->(x,y){ (x+y+1)*(x+y+2)/2 - (x+1) }\nshow_table(0..9, f)\n\nputs\nputs 'hexadecimal chars'\nhex = [*'0'..'9',*'a'..'f']\nshow_table(hex, &:+)\n```\n\n\n\u51fa\u529b\u306f\u3053\u3093\u306a\u611f\u3058\n\n```text\n9 x 9\n     1  2  3  4  5  6  7  8  9\n  1  1  2  3  4  5  6  7  8  9\n  2  2  4  6  8 10 12 14 16 18\n  3  3  6  9 12 15 18 21 24 27\n  4  4  8 12 16 20 24 28 32 36\n  5  5 10 15 20 25 30 35 40 45\n  6  6 12 18 24 30 36 42 48 54\n  7  7 14 21 28 35 42 49 56 63\n  8  8 16 24 32 40 48 56 64 72\n  9  9 18 27 36 45 54 63 72 81\n\none based\n       1   2   3   4   5   6   7   8   9\n   1   1   2   4   7  11  16  22  29  37\n   2   3   5   8  12  17  23  30  38  47\n   3   6   9  13  18  24  31  39  48  58\n   4  10  14  19  25  32  40  49  59  70\n   5  15  20  26  33  41  50  60  71  83\n   6  21  27  34  42  51  61  72  84  97\n   7  28  35  43  52  62  73  85  98 112\n   8  36  44  53  63  74  86  99 113 128\n   9  45  54  64  75  87 100 114 129 145\n\nzero based\n       0   1   2   3   4   5   6   7   8   9\n   0   0   1   3   6  10  15  21  28  36  45\n   1   2   4   7  11  16  22  29  37  46  56\n   2   5   8  12  17  23  30  38  47  57  68\n   3   9  13  18  24  31  39  48  58  69  81\n   4  14  19  25  32  40  49  59  70  82  95\n   5  20  26  33  41  50  60  71  83  96 110\n   6  27  34  42  51  61  72  84  97 111 126\n   7  35  43  52  62  73  85  98 112 127 143\n   8  44  53  63  74  86  99 113 128 144 161\n   9  54  64  75  87 100 114 129 145 162 180\n\nhexadecimal chars\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n  0 00 10 20 30 40 50 60 70 80 90 a0 b0 c0 d0 e0 f0\n  1 01 11 21 31 41 51 61 71 81 91 a1 b1 c1 d1 e1 f1\n  2 02 12 22 32 42 52 62 72 82 92 a2 b2 c2 d2 e2 f2\n  3 03 13 23 33 43 53 63 73 83 93 a3 b3 c3 d3 e3 f3\n  4 04 14 24 34 44 54 64 74 84 94 a4 b4 c4 d4 e4 f4\n  5 05 15 25 35 45 55 65 75 85 95 a5 b5 c5 d5 e5 f5\n  6 06 16 26 36 46 56 66 76 86 96 a6 b6 c6 d6 e6 f6\n  7 07 17 27 37 47 57 67 77 87 97 a7 b7 c7 d7 e7 f7\n  8 08 18 28 38 48 58 68 78 88 98 a8 b8 c8 d8 e8 f8\n  9 09 19 29 39 49 59 69 79 89 99 a9 b9 c9 d9 e9 f9\n  a 0a 1a 2a 3a 4a 5a 6a 7a 8a 9a aa ba ca da ea fa\n  b 0b 1b 2b 3b 4b 5b 6b 7b 8b 9b ab bb cb db eb fb\n  c 0c 1c 2c 3c 4c 5c 6c 7c 8c 9c ac bc cc dc ec fc\n  d 0d 1d 2d 3d 4d 5d 6d 7d 8d 9d ad bd cd dd ed fd\n  e 0e 1e 2e 3e 4e 5e 6e 7e 8e 9e ae be ce de ee fe\n  f 0f 1f 2f 3f 4f 5f 6f 7f 8f 9f af bf cf df ef ff\n```\n"}