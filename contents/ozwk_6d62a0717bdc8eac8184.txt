{"context": " More than 1 year has passed since last update.\n\n\u306a\u306b\u3053\u306e\u8a18\u4e8b\n\u91cd\u307f\u4ed8\u304d\u30e9\u30f3\u30c0\u30e0\u5fa9\u5143\u62bd\u51fa\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3001Walker's Alias Method\u306b\u3064\u3044\u3066\n\n\u91cd\u307f\u4ed8\u304d\u30e9\u30f3\u30c0\u30e0\u5fa9\u5143\u62bd\u51fa\n\u8981\u7d20\u3054\u3068\u306b\u62bd\u9078\u3055\u308c\u308b\u78ba\u7387\u304c\u7570\u306a\u308a\u3001(\u91cd\u307f\u4ed8\u304d)\n\u9078\u3093\u3060\u8981\u7d20\u3092\u90fd\u5ea6\u6bcd\u96c6\u56e3\u306b\u623b\u3059\u62bd\u51fa\u65b9\u6cd5(\u5fa9\u5143\u62bd\u51fa)\n\u306e\u3053\u3068\u3002\n\u7d20\u76f4\u306b\u5b9f\u88c5\u3059\u308b\u3068\n\u91cd\u307f\u3092\u3064\u3051\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u4f55\u304b\u51fa\u3057\u305f\u3044\u3084\n\u91cd\u307f\u4ed8\u304d\u30e9\u30f3\u30c0\u30e0\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u7dda\u5f62\u63a2\u7d22\u3067\u5b9f\u88c5\u3059\u308c\u3070\u3001\u8a08\u7b97\u91cf\u306f\u62bd\u90781\u56de\u6bce\u306bO(n)\n\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u306a\u3089\u6e96\u5099\u306bO(n)\u3001\u62bd\u90781\u56de\u6bce\u306bO(log n)\n\nWalker's Alias Method\n\u6e96\u5099\u306bO(n)\u3067\u3001\u62bd\u90781\u56de\u6bce\u306b\u306a\u3093\u3068O(1)\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\n\u540c\u3058\u5927\u304d\u3044\u96c6\u56e3\u306b\u5bfe\u3057\u3066\u4f55\u5ea6\u3082\u62bd\u9078\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u7528\u9014\u5411\u3051\u3002\n(GA\u3068\u304b\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u3068\u304b\u3002)\n\u30b0\u30b0\u308c\u3070\u308f\u304b\u308a\u3084\u3059\u3044\u8aac\u660e\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n\u56f3\u306e\u4e0a\u306e\u3088\u3046\u306a\u91cd\u307f\u30ea\u30b9\u30c8\u3067\u306f\u3001\n\u4e71\u6570\u304c3~4\u306e\u6642\u306b\u3069\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3059\u308b\u304b\u3092\u6700\u9ad8\u30672\u56de\u5224\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u4e0b\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u306b\u4e26\u3079\u66ff\u3048\u305f\u3068\u3059\u308b(\u95be\u5024\u30ea\u30b9\u30c8\u3068\u5225\u540d\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b)\u3068\u3001\n\u4e71\u6570\u306e\u6574\u6570\u90e8\u5206\u3068\u5c0f\u6570\u90e8\u5206\u3092\u4f7f\u3044\u3001\u4e00\u56de\u306e\u6bd4\u8f03\u3060\u3051\u3067\u62bd\u51fa\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0b\u306e\u30ea\u30b9\u30c8\u3067\n1.1\u3092\u5f15\u3044\u305f\u5834\u5408\u3001\u6574\u6570\u90e8\u304c1\u306a\u306e\u3067\u95be\u5024\u30ea\u30b9\u30c8\u306e\u8981\u7d201:p[1]\u3092\u307f\u3066\u3001\n\u5c0f\u6570\u90e8\u52060.1\u306fp[1]\u3092\u8d85\u3048\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u8981\u7d201\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n2.3\u3092\u5f15\u3044\u305f\u5834\u5408\u3001\u6574\u6570\u90e8\u304c2\u306a\u306e\u3067\u95be\u5024\u30ea\u30b9\u30c8\u306e\u8981\u7d201:p[2]\u3092\u307f\u3066\u3001\n\u5c0f\u6570\u90e8\u52060.3\u306f\u3053\u308c\u3092\u8d85\u3048\u308b\u306e\u3067\u3001\u5225\u540d\u30ea\u30b9\u30c8a[2]\u306e\u4e2d\u8eab\u3067\u3042\u308b\u3001\u8981\u7d200\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n\u9069\u5f53\u306a\u5b9f\u88c5(C#)\npublic class WalkersAliasMethod\n{\n    private double[] probList;\n    private int[] aliasList;\n    private double[] weightList;\n    private Random rnd;\n\n    public WalkersAliasMethod()\n    {\n        rnd = new Random();\n    }\n\n    public WalkersAliasMethod(int seed)\n    {\n        rnd = new Random(seed);\n    }\n\n    //\u6e96\u5099\n    public void UpdateList(double[] weightList)\n    {\n        probList = new double[weightList.Length];\n        aliasList = new int[weightList.Length];\n        this.weightList = weightList;\n        int size = weightList.Length;\n        double[] norWeightList = new double[size];\n        weightList.CopyTo(norWeightList, 0);\n        double sum = weightList.Sum();\n        double[] v = new double[size];//0~\u8981\u7d20\u6570\u3067\u6b63\u898f\u5316\u3055\u308c\u305f\u78ba\u7387\u30ea\u30b9\u30c8\n        for (int i = 0; i < size; i++)\n        {\n            norWeightList[i] /= sum;\n            v[i] = norWeightList[i] * size;\n        }\n\n        List<int> small = new List<int>();\n        List<int> large = new List<int>();\n\n        for (int i = 0; i < size; i++)\n        {\n\n            if (v[i] < 1)\n                small.Add(i);\n            else\n                large.Add(i);\n        }\n\n        int g, l;\n        while (small.Count > 0 && large.Count > 0)\n        {\n            l = small[0];\n            g = large[0];\n            small.RemoveAt(0);\n            large.RemoveAt(0);\n\n            probList[l] = v[l];\n            aliasList[l] = g;\n            v[g] += -1.0 + v[l];\n            if (v[g] < 1)\n                small.Add(g);\n            else\n                large.Add(g);\n        }\n        while (large.Count > 0)\n        {\n            g = large[0];\n            large.RemoveAt(0);\n            probList[g] = 1;\n        }\n        while (small.Count > 0)\n        {\n            l = small[0];\n            small.RemoveAt(0);\n            probList[l] = 1;\n        }\n    }\n\n    //\u91cd\u307f\u3092\u5143\u306b\u30e9\u30f3\u30c0\u30e0\u306b\u5fa9\u5143\u62bd\u51fa\u3057\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\n    public int Resampling()\n    {\n        double v = rnd.NextDouble() * (double)weightList.Length;\n        int k = (int)v;\n        double u = 1 + k - v;\n        if (u < probList[k])\n        {\n            return k;\n        }\n        return aliasList[k];\n    }\n}\n\n\n\n#\u306a\u306b\u3053\u306e\u8a18\u4e8b\n\u91cd\u307f\u4ed8\u304d\u30e9\u30f3\u30c0\u30e0\u5fa9\u5143\u62bd\u51fa\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308b\u3001Walker's Alias Method\u306b\u3064\u3044\u3066\n\n#\u91cd\u307f\u4ed8\u304d\u30e9\u30f3\u30c0\u30e0\u5fa9\u5143\u62bd\u51fa\n\u8981\u7d20\u3054\u3068\u306b\u62bd\u9078\u3055\u308c\u308b\u78ba\u7387\u304c\u7570\u306a\u308a\u3001(\u91cd\u307f\u4ed8\u304d)\n\u9078\u3093\u3060\u8981\u7d20\u3092\u90fd\u5ea6\u6bcd\u96c6\u56e3\u306b\u623b\u3059\u62bd\u51fa\u65b9\u6cd5(\u5fa9\u5143\u62bd\u51fa)\n\u306e\u3053\u3068\u3002\n\u7d20\u76f4\u306b\u5b9f\u88c5\u3059\u308b\u3068\n[\u91cd\u307f\u3092\u3064\u3051\u3066\u30e9\u30f3\u30c0\u30e0\u306b\u4f55\u304b\u51fa\u3057\u305f\u3044](http://qiita.com/catatsuy/items/8bad8aff8ac2a1def118)\u3084\n[\u91cd\u307f\u4ed8\u304d\u30e9\u30f3\u30c0\u30e0](http://qiita.com/divideby_zero/items/a8e749e307013ab24a0b)\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u7dda\u5f62\u63a2\u7d22\u3067\u5b9f\u88c5\u3059\u308c\u3070\u3001\u8a08\u7b97\u91cf\u306f\u62bd\u90781\u56de\u6bce\u306bO(n)\n\u30d0\u30a4\u30ca\u30ea\u30b5\u30fc\u30c1\u306a\u3089\u6e96\u5099\u306bO(n)\u3001\u62bd\u90781\u56de\u6bce\u306bO(log n)\n\n#Walker's Alias Method\n\u6e96\u5099\u306bO(n)\u3067\u3001\u62bd\u90781\u56de\u6bce\u306b\u306a\u3093\u3068O(1)\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\n\u540c\u3058\u5927\u304d\u3044\u96c6\u56e3\u306b\u5bfe\u3057\u3066\u4f55\u5ea6\u3082\u62bd\u9078\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u7528\u9014\u5411\u3051\u3002\n(GA\u3068\u304b\u7c92\u5b50\u30d5\u30a3\u30eb\u30bf\u3068\u304b\u3002)\n\u30b0\u30b0\u308c\u3070\u308f\u304b\u308a\u3084\u3059\u3044\u8aac\u660e\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n![wam.png](https://qiita-image-store.s3.amazonaws.com/0/72075/c029a8ec-b198-341d-2445-ed970b3be384.png)\n\n\n\u56f3\u306e\u4e0a\u306e\u3088\u3046\u306a\u91cd\u307f\u30ea\u30b9\u30c8\u3067\u306f\u3001\n\u4e71\u6570\u304c3~4\u306e\u6642\u306b\u3069\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3059\u308b\u304b\u3092\u6700\u9ad8\u30672\u56de\u5224\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u4e0b\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8\u306b\u4e26\u3079\u66ff\u3048\u305f\u3068\u3059\u308b(\u95be\u5024\u30ea\u30b9\u30c8\u3068\u5225\u540d\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b)\u3068\u3001\n\u4e71\u6570\u306e\u6574\u6570\u90e8\u5206\u3068\u5c0f\u6570\u90e8\u5206\u3092\u4f7f\u3044\u3001\u4e00\u56de\u306e\u6bd4\u8f03\u3060\u3051\u3067\u62bd\u51fa\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0b\u306e\u30ea\u30b9\u30c8\u3067\n1.1\u3092\u5f15\u3044\u305f\u5834\u5408\u3001\u6574\u6570\u90e8\u304c1\u306a\u306e\u3067\u95be\u5024\u30ea\u30b9\u30c8\u306e\u8981\u7d201:p[1]\u3092\u307f\u3066\u3001\n\u5c0f\u6570\u90e8\u52060.1\u306fp[1]\u3092\u8d85\u3048\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u8981\u7d201\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n2.3\u3092\u5f15\u3044\u305f\u5834\u5408\u3001\u6574\u6570\u90e8\u304c2\u306a\u306e\u3067\u95be\u5024\u30ea\u30b9\u30c8\u306e\u8981\u7d201:p[2]\u3092\u307f\u3066\u3001\n\u5c0f\u6570\u90e8\u52060.3\u306f\u3053\u308c\u3092\u8d85\u3048\u308b\u306e\u3067\u3001\u5225\u540d\u30ea\u30b9\u30c8a[2]\u306e\u4e2d\u8eab\u3067\u3042\u308b\u3001\u8981\u7d200\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n\n#\u9069\u5f53\u306a\u5b9f\u88c5(C#)\n\n```csharp\npublic class WalkersAliasMethod\n{\n    private double[] probList;\n    private int[] aliasList;\n    private double[] weightList;\n    private Random rnd;\n\n    public WalkersAliasMethod()\n    {\n        rnd = new Random();\n    }\n\n    public WalkersAliasMethod(int seed)\n    {\n        rnd = new Random(seed);\n    }\n\n    //\u6e96\u5099\n    public void UpdateList(double[] weightList)\n    {\n        probList = new double[weightList.Length];\n        aliasList = new int[weightList.Length];\n        this.weightList = weightList;\n        int size = weightList.Length;\n        double[] norWeightList = new double[size];\n        weightList.CopyTo(norWeightList, 0);\n        double sum = weightList.Sum();\n        double[] v = new double[size];//0~\u8981\u7d20\u6570\u3067\u6b63\u898f\u5316\u3055\u308c\u305f\u78ba\u7387\u30ea\u30b9\u30c8\n        for (int i = 0; i < size; i++)\n        {\n            norWeightList[i] /= sum;\n            v[i] = norWeightList[i] * size;\n        }\n\n        List<int> small = new List<int>();\n        List<int> large = new List<int>();\n\n        for (int i = 0; i < size; i++)\n        {\n\n            if (v[i] < 1)\n                small.Add(i);\n            else\n                large.Add(i);\n        }\n\n        int g, l;\n        while (small.Count > 0 && large.Count > 0)\n        {\n            l = small[0];\n            g = large[0];\n            small.RemoveAt(0);\n            large.RemoveAt(0);\n\n            probList[l] = v[l];\n            aliasList[l] = g;\n            v[g] += -1.0 + v[l];\n            if (v[g] < 1)\n                small.Add(g);\n            else\n                large.Add(g);\n        }\n        while (large.Count > 0)\n        {\n            g = large[0];\n            large.RemoveAt(0);\n            probList[g] = 1;\n        }\n        while (small.Count > 0)\n        {\n            l = small[0];\n            small.RemoveAt(0);\n            probList[l] = 1;\n        }\n    }\n\n    //\u91cd\u307f\u3092\u5143\u306b\u30e9\u30f3\u30c0\u30e0\u306b\u5fa9\u5143\u62bd\u51fa\u3057\u3066\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\n    public int Resampling()\n    {\n        double v = rnd.NextDouble() * (double)weightList.Length;\n        int k = (int)v;\n        double u = 1 + k - v;\n        if (u < probList[k])\n        {\n            return k;\n        }\n        return aliasList[k];\n    }\n}\n\n\n```\n", "tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "C#", "algorithm"]}