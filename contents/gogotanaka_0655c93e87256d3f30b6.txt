{"tags": ["Heap", "stack"], "context": " More than 1 year has passed since last update.\n\nStack\n\nstack.cpp\nint* stack_a(){\n    int *x;\n    return x;\n}\n\nint main()\n{   \n    std::cout << *stack_a() << std::endl;\n}\n\n\n\noutput\n[1]    2595 segmentation fault  ./a.out\n\nHow can we make it works?\n\nHeap\nEasiest way is to just use heap memory. But in practice you should do consider recursive algorithm which is able to keep value.\n\nheap.cpp\nint* heap_a(){\n    int *x = new int;\n    return x;\n}\n\nint main()\n{   \n    std::cout << *heap_a() << std::endl;\n}\n\n\n\noutput\n0\n\n\nboost::scoped_ptr\nint* scoped_ptr(){\n    boost::scoped_ptr<int> x;\n    return x;\n}\n\nint main()\n{\n    std::cout << *scoped_ptr() << std::endl;\n}\n\nequality to stack_a\n### Stack\n\n```cpp:stack.cpp\nint* stack_a(){\n    int *x;\n    return x;\n}\n\nint main()\n{   \n    std::cout << *stack_a() << std::endl;\n}\n```\n\n\n\n#### output\n    [1]    2595 segmentation fault  ./a.out\n\n\nHow can we make it works?\n\n### Heap\n\nEasiest way is to just use heap memory. But in practice you should do consider recursive algorithm which is able to keep value.\n\n```cpp:heap.cpp\nint* heap_a(){\n    int *x = new int;\n    return x;\n}\n\nint main()\n{   \n    std::cout << *heap_a() << std::endl;\n}\n```\n\n#### output\n```\n0\n```\n\n### boost::scoped_ptr\n\n```cpp\nint* scoped_ptr(){\n    boost::scoped_ptr<int> x;\n    return x;\n}\n\nint main()\n{\n    std::cout << *scoped_ptr() << std::endl;\n}\n```\n\nequality to `stack_a`\n"}