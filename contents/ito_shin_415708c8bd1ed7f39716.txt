{"context": "PlayFramework2.5\u3067WebSocket\u3092\u4f7f\u3063\u305f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30c1\u30e3\u30c3\u30c8\u3092\u4f5c\u308a\u307e\u3057\u305f\uff01\u30bd\u30fc\u30b9\n\nPlay\u306f2.5\u304b\u3089\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3067back pressure\u304c\u53ef\u80fd\u306aAkka-Streams\u3068\u3044\u3046\u6280\u8853\u3092\u53d6\u308a\u5165\u308c\u3066\u304a\u308a\u3001WebSocket\u3092\u4f7f\u3046\u3068\u304d\u306fstreams\u3092\u4f7f\u3048\u3068\u66f8\u3044\u3066\u3042\u308b\u3093\u3067\u3059\u304c(\u3053\u3061\u3089)\n\u516c\u5f0f\u306e\u8aac\u660e\u304c\u307b\u307c\u306a\u3044\nLegacyWebSocket\u3068\u3084\u3089\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3093\u3067\u3059\u304c\u3001Legacy\u3063\u3066\u306d\u3048\uff0f^o^\uff3c\n\u3063\u3066\u3053\u3068\u3067Akka\u306e\u516c\u5f0f\u3084\u3089Lightbend\u793e\u54e1\u306e\u30b9\u30e9\u30a4\u30c9\u3084\u3089\u8272\u3005\u8abf\u3079\u3066\u3088\u3046\u3084\u304fAkka-Streams\u306b\u3088\u308bWebSocket\u3092\u5b9f\u88c5\u3057\u305f\u3093\u3067\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\nAkka-Streams\u3063\u3066\u306a\u3093\u305e\u3084\u3068\u3044\u3046\u65b9\u306f\u3053\u3061\u3089\u3092Akka Stream\u306b\u3064\u3044\u3066\u306e\u57fa\u790e\u6982\u5ff5\n\nWebSocket\u306e\u958b\u901a(\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9)\nAkka Streams\u306b\u3088\u308bWebSocket\u958b\u901a\u306e\u305f\u3081\u306b\u306f1\u3064\u306einput\u30681\u3064\u306eoutput\u3092\u6301\u3064Flow\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\nHomeController.java\npublic WebSocket ws() {\n    return WebSocket.Json.accept(requestHeader -> {\n        Flow<JsonNode, JsonNode, NotUsed> flow = Flow.create();\n        return flow;\n    });\n}\n\n\nWebSocket.Json.accept\u3067\u304a\u5206\u304b\u308a\u306e\u901a\u308a\u3001\u4eca\u56de\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089Json\u5f62\u5f0f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n\u305d\u3057\u3066\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\nroutes.\nGET     /                           controllers.HomeController.index\nGET     /ws                         controllers.HomeController.ws\n\n\n\nWebSocket\u306e\u958b\u901a(\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9)\n\u307e\u305a\u306fmain.scala.html\u306ebody\u30bf\u30b0\u306bWebSocket\u3078\u306eurl\u60c5\u5831\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\n\nmain.scala.html\n<body data-ws-url=\"@routes.HomeController.ws.webSocketURL(request)\">\n\n\nindex.scala.html\u306bjavascript\u3067WebSocket\u958b\u901a\u306e\u305f\u3081\u306e\u8a18\u8ff0\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nWebSocket\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3001\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\nindex.scala.html\nvar ws = new WebSocket($('body').data('ws-url'));\n\nws.onopen = function(event) {\n    console.log('ConnectedA to WebSocket');\n};\n\n\nnew WebSocket($('body').data('ws-url'))\u3067body\u30bf\u30b0\u306b\u683c\u7d0d\u3057\u3066\u305fws://localhost:8080/ws\u30d1\u30e9\u30e1\u30fc\u30bf\u304b\u3089WebSocket\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002onopen\u3067\u958b\u901a\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3067\u3072\u3068\u307e\u305aWebSocket\u304c\u958b\u901a\u3067\u3059b\n\u3053\u3063\u304b\u3089Sink\u3084\u3089Source\u3084\u3089Actor\u3092\u4f5c\u3063\u3066\u30c1\u30e3\u30c3\u30c8\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nSink\u306e\u5b9a\u7fa9\nSink\u306f1\u3064\u306einput channel\u3092\u6301\u3061\u307e\u3059\u3002\n\n\u4eca\u56de\u306fWebSocket\u63a5\u7d9a\u3067\u9001\u3089\u308c\u3066\u304d\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308b\u5f79\u3092\u3057\u3066\u3082\u3089\u3044\u307e\u3059\u3002\nSink<JsonNode, NotUsed> sink = Sink.actorRef(chatRoomActor, \"success\");\n\nSink.actorRef(chatRoomActor, \"success\")\u3067\u3001Sink\u306f\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092chatRoomActor\u306b\u6d41\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nChatRoomActor.java\npublic class ChatRoomActor extends UntypedActor {\n\n    @Override\n    public void onReceive(Object message) throws Throwable {\n        if (message instanceof JsonNode) {\n            JsonNode jsonMessage = (JsonNode) message;\n            String type = jsonMessage.get(\"type\").textValue();\n\n            switch (type) {\n\n                case \"join\":\n                    String joinedUser = jsonMessage.get(\"username\").asText();\n                    JsonNode joinToClient =\n                            Json.newObject()\n                                    .put(\"type\", \"joined\")\n                                    .put(\"username\", joinedUser);\n                    publisher.broadcast(joinToClient);\n                    break;\n\n                case \"talk\":\n                    String talkedUser = jsonMessage.get(\"username\").asText();\n                    String chatMessage = jsonMessage.get(\"chatMessage\").asText();\n                    JsonNode talkToClient =\n                            Json.newObject()\n                                    .put(\"type\", \"talked\")\n                                    .put(\"username\", talkedUser)\n                                    .put(\"chatMessage\", chatMessage);\n                    publisher.broadcast(talkToClient);\n                    break;\n\n                default:\n                    System.out.println(\"Json Error: type is not allowed\");\n                    break;\n            }\n        } else {\n            System.out.println(\"chatRoomActor received not Json\");\n        }\n    }\n}\n\n\nActor\u306fUntypedActor\u3092\u7d99\u627f\u3057\u3001onReceive(Object message)\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\u3002\u3053\u3053\u306b\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u6642\u306e\u52d5\u4f5c\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089Json\u5f62\u5f0f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u4e2d\u8eab\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u306eType\u3084\u5185\u5bb9\u3092\u8aad\u307f\u53d6\u3063\u3066\u9069\u5207\u306a\u52d5\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\n\nSource\u306e\u5b9a\u7fa9\nSource\u306f1\u3064\u306eoutput channel\u3092\u6301\u3061\u307e\u3059\u3002\n\n\u4eca\u56de\u306fWebSocket\u306b\u3064\u306a\u3044\u3067\u3044\u308b\u5168\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u5f79\u76ee\u3092\u3057\u3066\u3082\u3089\u3044\u307e\u3059\u3002\nSource<JsonNode, ?> source = publisher.register();\n\nPublisher\u306e\u5b9a\u7fa9\u3092\u3057\u307e\u3057\u3087\u3046\u3002\n\nPublisher.java\npublic class Publisher<T> {\n    public final Set<ActorRef> actorRefs = new HashSet<>();\n\n    public Source<T, ?> register() {\n        Source<T, ?> source = Source.<T>actorRef(256, OverflowStrategy.dropHead())\n                .mapMaterializedValue(actorRef -> {\n                    Publisher.this.actorRefs.add(actorRef);\n                    return actorRef;\n                })\n                .watchTermination((actorRef, termination) -> {\n                    termination.whenComplete((done, cause) -> Publisher.this.actorRefs.remove(actorRef));\n                    return null;\n                });\n        return source;\n\n    }\n\n    public void broadcast(final T message) {\n        for (ActorRef actorRef: this.actorRefs) {\n            actorRef.tell(message, ActorRef.noSender());\n        }\n    }\n}\n\n\nregister()\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6bce\u306bsource\u3092\u751f\u6210\u3057\u3001actorRefs\u306b\u683c\u7d0d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nbroadcast()\u304c\u5168\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3001\u6b63\u78ba\u306b\u306f\u5168Actor\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u30e1\u30bd\u30c3\u30c9\u3068\u306a\u308a\u307e\u3059\u3002\n\nSink\u3068Source\u3092\u7e4b\u3050\n\u4f5c\u6210\u3057\u305fSink\u3068Source\u3067Flow\u3092\u69cb\u6210\u3057\u307e\u3059\u3002\n\nHomeController.java\npublic WebSocket ws() {\n    return WebSocket.Json.accept(requestHeader -> {\n        Source<JsonNode, ?> source = publisher.register();\n        Sink<JsonNode, NotUsed> sink = Sink.actorRef(chatRoomActor, \"success\");\n        Flow<JsonNode, JsonNode, NotUsed> flow = Flow.fromSinkAndSource(sink, source);\n        return flow;\n    });\n}\n\n\n \u2190fromSinkAndSource\u306e\u30a4\u30e1\u30fc\u30b8\u306f\u3053\u308c\n\u307e\u305fchatRoomActor\u3068publisher\u3082\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\n\nHomeController.java\nActorSystem actorSystem = ActorSystem.create();\nActorRef chatRoomActor = actorSystem.actorOf(Props.create(ChatRoomActor.class));\nstatic final Publisher<JsonNode> publisher = new Publisher<>();\n\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u30c1\u30e3\u30c3\u30c8\u5b9f\u88c5\n\u6700\u5f8c\u306b\u30d5\u30ed\u30f3\u30c8\u3092\u3061\u3083\u3093\u3068\u66f8\u3044\u3066\u7d42\u308f\u308a\u3067\u3059\u3002\n\nindex.scala.html\n@main(\"Welcome to Play\") {\n<style>\n.hide {\n    display: none;\n}\n</style>\n<div id=\"page-wrapper\">\n    <div id=\"status\">Connecting...</div>\n    <form id=\"username-form\" action=\"#\">\n        <input id=\"username\" type=\"text\" required>\n    <button id=\"enterButton\" type=\"submit\">Enter</button>\n    </form>\n\n    <ul id=\"messages\"></ul>\n\n    <form class=\"hide\" id=\"message-form\" action=\"#\" method=\"post\">\n        <input id=\"message\" required>\n        <button id=\"sendButton\" type=\"submit\">Send</button>\n    </form>\n</div>\n\n<script>\nwindow.onload = function() {\n    var ws = new WebSocket($(\"body\").data(\"ws-url\"));\n    var username;\n\n    ws.onerror = function(error) {\n        console.log('WebSocket Error: ' + error);\n    };\n\n    ws.onopen = function(event) {\n        $('#status').text('Connected to WebSocket');\n    };\n\n    ws.onmessage = function(event) {\n        var message = event.data;\n        $('#messages').append('<li class=\"received\"><span>Received:</span>' + message + '</li>');\n    };\n\n    ws.onclose = function(event) {\n        $('#status').text('Disconnected from WebSocket.');\n    };\n\n    $('#enterButton').click(function(e) {\n        $('#username-form').addClass('hide');\n        $('#message-form').removeClass('hide');\n        e.preventDefault();\n        username = $('#username').val();\n        console.log(username);\n        ws.send(JSON.stringify({type: 'join', username: username}));\n        $('#username').val('');\n        return false;\n    });\n\n    $('#sendButton').click(function(e) {\n        e.preventDefault();\n        var message = $('#message').val();\n        ws.send(JSON.stringify({type: \"talk\", username: username, chatMessage: message}));\n        $('#message').val('');\n        return false;\n    });\n};\n</script>\n}\n\n\n\u5165\u5ba4\u6642\u306fJson\u3067type,username\u3092\u3001\u767a\u8a00\u6642\u306fJson\u3067type,username,chatMessage\u3092\u30b5\u30fc\u30d0\u30fc\u306b\u9001\u308a\u307e\u3059\u3002\n\u3053\u308c\u304cchatRoomActor\u306b\u9001\u3089\u308c\u3066\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u4f1d\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\n\u3053\u308c\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u304f\u3063\u3064\u3051\u308b\u5834\u5408\u306fChatRoomActor\u306eonReceive\u3067\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3063\u305f\u308a\u3001Publisher\u3067\u5b9a\u7fa9\u3057\u305factorRefs\u3092HashMap\u306b\u3057\u3066\u30ad\u30fc\u3092userId,\u30d0\u30ea\u30e5\u30fc\u3092actor\u306b\u3059\u308c\u3070\u7279\u5b9a\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u3060\u3051\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308c\u3066\u30b0\u30eb\u30fc\u30d7\u30c1\u30e3\u30c3\u30c8\u3082\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\nPlay\u306f\u30e2\u30c0\u30f3\u306a\u6280\u8853\u3092\u53d6\u308a\u5165\u308c\u308b\u306e\u306f\u3044\u3044\u3067\u3059\u304c\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u8ffd\u3044\u3064\u3044\u3066\u3044\u307e\u305b\u3093(~~;) \u521d\u5fc3\u8005\u306e\u81ea\u5206\u306f\u82e6\u52b4\u3057\u307e\u3057\u305f\u3002\nPlayFramework2.5\u3067WebSocket\u3092\u4f7f\u3063\u305f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30c1\u30e3\u30c3\u30c8\u3092\u4f5c\u308a\u307e\u3057\u305f\uff01[\u30bd\u30fc\u30b9](https://github.com/naoyabuzz/chat-websocket-akkastream-play2.5)\n\n![Qiita](https://j.gifs.com/Z4N7Mv.gif \"Qiita\")\n\n\nPlay\u306f2.5\u304b\u3089\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3067back pressure\u304c\u53ef\u80fd\u306a`Akka-Streams`\u3068\u3044\u3046\u6280\u8853\u3092\u53d6\u308a\u5165\u308c\u3066\u304a\u308a\u3001WebSocket\u3092\u4f7f\u3046\u3068\u304d\u306fstreams\u3092\u4f7f\u3048\u3068\u66f8\u3044\u3066\u3042\u308b\u3093\u3067\u3059\u304c([\u3053\u3061\u3089](https://www.playframework.com/documentation/2.5.x/StreamsMigration25#Migrating-Java-WebSockets))\n\n**\u516c\u5f0f\u306e\u8aac\u660e\u304c\u307b\u307c\u306a\u3044**\n\n`LegacyWebSocket`\u3068\u3084\u3089\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3093\u3067\u3059\u304c\u3001`Legacy`\u3063\u3066\u306d\u3048\uff0f^o^\uff3c\n\n\u3063\u3066\u3053\u3068\u3067Akka\u306e\u516c\u5f0f\u3084\u3089Lightbend\u793e\u54e1\u306e\u30b9\u30e9\u30a4\u30c9\u3084\u3089\u8272\u3005\u8abf\u3079\u3066\u3088\u3046\u3084\u304fAkka-Streams\u306b\u3088\u308bWebSocket\u3092\u5b9f\u88c5\u3057\u305f\u3093\u3067\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\nAkka-Streams\u3063\u3066\u306a\u3093\u305e\u3084\u3068\u3044\u3046\u65b9\u306f\u3053\u3061\u3089\u3092[Akka Stream\u306b\u3064\u3044\u3066\u306e\u57fa\u790e\u6982\u5ff5](http://qiita.com/xoyo24/items/299ee3e624f4afe2d27a)\n\n##WebSocket\u306e\u958b\u901a(\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9)\nAkka Streams\u306b\u3088\u308bWebSocket\u958b\u901a\u306e\u305f\u3081\u306b\u306f1\u3064\u306einput\u30681\u3064\u306eoutput\u3092\u6301\u3064`Flow`\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n![Flow](https://prismic-io.s3.amazonaws.com/boldradius/7ecc45e11734dedba4bda97601c105e5ecf1f93e_akka-streams-flow.png)\n\n````HomeController.java\npublic WebSocket ws() {\n    return WebSocket.Json.accept(requestHeader -> {\n        Flow<JsonNode, JsonNode, NotUsed> flow = Flow.create();\n        return flow;\n    });\n}\n````\n`WebSocket.Json.accept`\u3067\u304a\u5206\u304b\u308a\u306e\u901a\u308a\u3001\u4eca\u56de\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089Json\u5f62\u5f0f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n````routes.\nGET     /                           controllers.HomeController.index\nGET     /ws                         controllers.HomeController.ws\n````\n\n##WebSocket\u306e\u958b\u901a(\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9)\n\u307e\u305a\u306f`main.scala.html`\u306ebody\u30bf\u30b0\u306bWebSocket\u3078\u306eurl\u60c5\u5831\u3092\u683c\u7d0d\u3057\u307e\u3059\u3002\n\n````main.scala.html\n<body data-ws-url=\"@routes.HomeController.ws.webSocketURL(request)\">\n````\n`index.scala.html`\u306bjavascript\u3067WebSocket\u958b\u901a\u306e\u305f\u3081\u306e\u8a18\u8ff0\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nWebSocket\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3001\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\n````index.scala.html\nvar ws = new WebSocket($('body').data('ws-url'));\n\nws.onopen = function(event) {\n    console.log('ConnectedA to WebSocket');\n};\n````\n\n`new WebSocket($('body').data('ws-url'))`\u3067body\u30bf\u30b0\u306b\u683c\u7d0d\u3057\u3066\u305f`ws://localhost:8080/ws`\u30d1\u30e9\u30e1\u30fc\u30bf\u304b\u3089WebSocket\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002`onopen`\u3067\u958b\u901a\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\n\u3053\u308c\u3067\u3072\u3068\u307e\u305aWebSocket\u304c\u958b\u901a\u3067\u3059b\n\u3053\u3063\u304b\u3089`Sink`\u3084\u3089`Source`\u3084\u3089`Actor`\u3092\u4f5c\u3063\u3066\u30c1\u30e3\u30c3\u30c8\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n##Sink\u306e\u5b9a\u7fa9\nSink\u306f1\u3064\u306einput channel\u3092\u6301\u3061\u307e\u3059\u3002\n![Sink](https://prismic-io.s3.amazonaws.com/boldradius/41943c3155b7d7ce99faba52b846272e99a41fa9_akka-streams-sink.png)\n\u4eca\u56de\u306fWebSocket\u63a5\u7d9a\u3067\u9001\u3089\u308c\u3066\u304d\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308b\u5f79\u3092\u3057\u3066\u3082\u3089\u3044\u307e\u3059\u3002\n\n    Sink<JsonNode, NotUsed> sink = Sink.actorRef(chatRoomActor, \"success\");\n\n`Sink.actorRef(chatRoomActor, \"success\")`\u3067\u3001Sink\u306f\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092chatRoomActor\u306b\u6d41\u3059\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n````ChatRoomActor.java\npublic class ChatRoomActor extends UntypedActor {\n\n    @Override\n    public void onReceive(Object message) throws Throwable {\n        if (message instanceof JsonNode) {\n            JsonNode jsonMessage = (JsonNode) message;\n            String type = jsonMessage.get(\"type\").textValue();\n\n            switch (type) {\n\n                case \"join\":\n                    String joinedUser = jsonMessage.get(\"username\").asText();\n                    JsonNode joinToClient =\n                            Json.newObject()\n                                    .put(\"type\", \"joined\")\n                                    .put(\"username\", joinedUser);\n                    publisher.broadcast(joinToClient);\n                    break;\n\n                case \"talk\":\n                    String talkedUser = jsonMessage.get(\"username\").asText();\n                    String chatMessage = jsonMessage.get(\"chatMessage\").asText();\n                    JsonNode talkToClient =\n                            Json.newObject()\n                                    .put(\"type\", \"talked\")\n                                    .put(\"username\", talkedUser)\n                                    .put(\"chatMessage\", chatMessage);\n                    publisher.broadcast(talkToClient);\n                    break;\n\n                default:\n                    System.out.println(\"Json Error: type is not allowed\");\n                    break;\n            }\n        } else {\n            System.out.println(\"chatRoomActor received not Json\");\n        }\n    }\n}\n````\n\nActor\u306f`UntypedActor`\u3092\u7d99\u627f\u3057\u3001`onReceive(Object message)`\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\u3002\u3053\u3053\u306b\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u6642\u306e\u52d5\u4f5c\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089Json\u5f62\u5f0f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308a\u3001\u305d\u306e\u4e2d\u8eab\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u306eType\u3084\u5185\u5bb9\u3092\u8aad\u307f\u53d6\u3063\u3066\u9069\u5207\u306a\u52d5\u4f5c\u3092\u884c\u3044\u307e\u3059\u3002\n\n##Source\u306e\u5b9a\u7fa9\nSource\u306f1\u3064\u306eoutput channel\u3092\u6301\u3061\u307e\u3059\u3002\n![Source](https://prismic-io.s3.amazonaws.com/boldradius/f11b4a37597064e93856d4d0880b9e74e5507635_akka-streams-source.png)\n\u4eca\u56de\u306fWebSocket\u306b\u3064\u306a\u3044\u3067\u3044\u308b\u5168\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u5f79\u76ee\u3092\u3057\u3066\u3082\u3089\u3044\u307e\u3059\u3002\n\n\tSource<JsonNode, ?> source = publisher.register();\n\t\nPublisher\u306e\u5b9a\u7fa9\u3092\u3057\u307e\u3057\u3087\u3046\u3002\n\n````Publisher.java\npublic class Publisher<T> {\n    public final Set<ActorRef> actorRefs = new HashSet<>();\n\n    public Source<T, ?> register() {\n        Source<T, ?> source = Source.<T>actorRef(256, OverflowStrategy.dropHead())\n                .mapMaterializedValue(actorRef -> {\n                    Publisher.this.actorRefs.add(actorRef);\n                    return actorRef;\n                })\n                .watchTermination((actorRef, termination) -> {\n                    termination.whenComplete((done, cause) -> Publisher.this.actorRefs.remove(actorRef));\n                    return null;\n                });\n        return source;\n\n    }\n\n    public void broadcast(final T message) {\n        for (ActorRef actorRef: this.actorRefs) {\n            actorRef.tell(message, ActorRef.noSender());\n        }\n    }\n}\n````\n`register()`\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u6bce\u306bsource\u3092\u751f\u6210\u3057\u3001`actorRefs`\u306b\u683c\u7d0d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n`broadcast()`\u304c\u5168\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3001\u6b63\u78ba\u306b\u306f\u5168Actor\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u30e1\u30bd\u30c3\u30c9\u3068\u306a\u308a\u307e\u3059\u3002\n\n##Sink\u3068Source\u3092\u7e4b\u3050\n\u4f5c\u6210\u3057\u305fSink\u3068Source\u3067Flow\u3092\u69cb\u6210\u3057\u307e\u3059\u3002\n\n````HomeController.java\npublic WebSocket ws() {\n    return WebSocket.Json.accept(requestHeader -> {\n        Source<JsonNode, ?> source = publisher.register();\n        Sink<JsonNode, NotUsed> sink = Sink.actorRef(chatRoomActor, \"success\");\n        Flow<JsonNode, JsonNode, NotUsed> flow = Flow.fromSinkAndSource(sink, source);\n        return flow;\n    });\n}\n````\n<img width=\"200px\" src=\"https://qiita-image-store.s3.amazonaws.com/0/116669/1de2983f-1797-4b6d-cf91-f367bac11c19.png\"> \u2190`fromSinkAndSource`\u306e\u30a4\u30e1\u30fc\u30b8\u306f\u3053\u308c\n\n\u307e\u305f`chatRoomActor`\u3068`publisher`\u3082\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\n\n````HomeController.java\nActorSystem actorSystem = ActorSystem.create();\nActorRef chatRoomActor = actorSystem.actorOf(Props.create(ChatRoomActor.class));\nstatic final Publisher<JsonNode> publisher = new Publisher<>();\n````\n\n##\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u30c1\u30e3\u30c3\u30c8\u5b9f\u88c5\n\u6700\u5f8c\u306b\u30d5\u30ed\u30f3\u30c8\u3092\u3061\u3083\u3093\u3068\u66f8\u3044\u3066\u7d42\u308f\u308a\u3067\u3059\u3002\n\n````index.scala.html\n@main(\"Welcome to Play\") {\n<style>\n.hide {\n    display: none;\n}\n</style>\n<div id=\"page-wrapper\">\n    <div id=\"status\">Connecting...</div>\n    <form id=\"username-form\" action=\"#\">\n        <input id=\"username\" type=\"text\" required>\n    <button id=\"enterButton\" type=\"submit\">Enter</button>\n    </form>\n\n    <ul id=\"messages\"></ul>\n\n    <form class=\"hide\" id=\"message-form\" action=\"#\" method=\"post\">\n        <input id=\"message\" required>\n        <button id=\"sendButton\" type=\"submit\">Send</button>\n    </form>\n</div>\n\n<script>\nwindow.onload = function() {\n    var ws = new WebSocket($(\"body\").data(\"ws-url\"));\n    var username;\n\n    ws.onerror = function(error) {\n        console.log('WebSocket Error: ' + error);\n    };\n\n    ws.onopen = function(event) {\n        $('#status').text('Connected to WebSocket');\n    };\n\n    ws.onmessage = function(event) {\n        var message = event.data;\n        $('#messages').append('<li class=\"received\"><span>Received:</span>' + message + '</li>');\n    };\n\n    ws.onclose = function(event) {\n        $('#status').text('Disconnected from WebSocket.');\n    };\n\n    $('#enterButton').click(function(e) {\n        $('#username-form').addClass('hide');\n        $('#message-form').removeClass('hide');\n        e.preventDefault();\n        username = $('#username').val();\n        console.log(username);\n        ws.send(JSON.stringify({type: 'join', username: username}));\n        $('#username').val('');\n        return false;\n    });\n\n    $('#sendButton').click(function(e) {\n        e.preventDefault();\n        var message = $('#message').val();\n        ws.send(JSON.stringify({type: \"talk\", username: username, chatMessage: message}));\n        $('#message').val('');\n        return false;\n    });\n};\n</script>\n}\n````\n\u5165\u5ba4\u6642\u306fJson\u3067`type`,`username`\u3092\u3001\u767a\u8a00\u6642\u306fJson\u3067`type`,`username`,`chatMessage`\u3092\u30b5\u30fc\u30d0\u30fc\u306b\u9001\u308a\u307e\u3059\u3002\n\u3053\u308c\u304c`chatRoomActor`\u306b\u9001\u3089\u308c\u3066\u4ed6\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u4f1d\u3048\u3089\u308c\u307e\u3059\u3002\n\n##\u6700\u5f8c\u306b\n\u3053\u308c\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u304f\u3063\u3064\u3051\u308b\u5834\u5408\u306fChatRoomActor\u306eonReceive\u3067\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3063\u305f\u308a\u3001Publisher\u3067\u5b9a\u7fa9\u3057\u305factorRefs\u3092`HashMap`\u306b\u3057\u3066\u30ad\u30fc\u3092userId,\u30d0\u30ea\u30e5\u30fc\u3092actor\u306b\u3059\u308c\u3070\u7279\u5b9a\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u3060\u3051\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308c\u3066\u30b0\u30eb\u30fc\u30d7\u30c1\u30e3\u30c3\u30c8\u3082\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\nPlay\u306f\u30e2\u30c0\u30f3\u306a\u6280\u8853\u3092\u53d6\u308a\u5165\u308c\u308b\u306e\u306f\u3044\u3044\u3067\u3059\u304c\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u8ffd\u3044\u3064\u3044\u3066\u3044\u307e\u305b\u3093(~~;) \u521d\u5fc3\u8005\u306e\u81ea\u5206\u306f\u82e6\u52b4\u3057\u307e\u3057\u305f\u3002\n\n\n", "tags": ["Akka", "Java", "Akka-Stream", "PlayFramework"]}