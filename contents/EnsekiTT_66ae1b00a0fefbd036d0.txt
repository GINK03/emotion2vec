{"context": "\n\nDeepLearning\u3060\uff01\u4eba\u5de5\u77e5\u80fd\u3060\uff01\u6a5f\u68b0\u5b66\u7fd2\u3060\uff01\n\u30a8\u30f3\u30b8\u30cb\u30a2\u3068\u3057\u3066\u306e\u610f\u6c17\u8fbc\u307f\u3068\u3001\n\u306a\u3093\u3060\u304b\u3059\u3054\u3044\u3053\u3068\u304c\u51fa\u6765\u305d\u3046\u3060\u306a\uff01\u3068\u3044\u3046\u4e0a\u53f8\u306e\u5f8c\u62bc\u3057\u3092\u4e00\u8eab\u306b\u53d7\u3051\u3001\n\u6df1\u5c64\u5b66\u7fd2\u672c\u3084Qiita\u8a18\u4e8b\u3092\u6d41\u3057\u8aad\u307f\u3001\nTensorFlow\u3084Chainer\u3092\u5c0e\u5165\u3057\u3066\u3001\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u5199\u7d4c\u3067\u5fb3\u3092\u7a4d\u3093\u3067\u3001\n\u30b2\u30fc\u30e0\u306b\u4f7f\u3063\u3066\u3044\u305fGPU\u3082\u5b66\u7fd2\u3068\u3044\u3046\u5927\u7fa9\u540d\u5206\u306e\u3082\u3068\u30d5\u30eb\u7a3c\u50cd\u3055\u305b\u305f\u3001\u3001\u3001\nAccuracy 99.23%\n\u4eca\u56de\u306f\u3001MNIST\u3084IRIS\u309299%\u8d85\u3067\u8b58\u5225\u3059\u308b\u30a8\u30f3\u30b8\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u6e80\u8db3\u3057\u3066\u3057\u307e\u3063\u305f\u30a8\u30f3\u30b8\u30cb\u30a2\u304c\nMNIST\u3092\u8131\u5374\u3059\u308b\u305f\u3081\u306bMNIST\u3092\u77e5\u308b\u305f\u3081\u306e\u8a71\n\n\u304a\u306a\u3058\u307f\u3001\u300cMNIST\u300d\u304c\u3064\u307e\u308a\u3069\u3093\u306a\u30c7\u30fc\u30bf\u306a\u306e\u304b\uff1f\n28\u884c28\u5217\u306e\u753b\u50cf\u2192\u6b63\u3057\u3044\u304c\u4eca\u306f\u305d\u3053\u3067\u306f\u306a\u3044\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u306f\u300170000\u884c784\u5217\u3001\n70000\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3001784\u306f28*28\u3092\u30d9\u30af\u30c8\u30eb\u306b\u76f4\u3057\u305f\u6642\u306e\u6b21\u5143\u6570\u3002\n\u884c\u306b\u89e3\u6790\u3057\u305f\u3044\u30c7\u30fc\u30bf\u7dcf\u6570\u3001\u5217\u306b\u89e3\u6790\u3057\u305f\u3044\u30c7\u30fc\u30bf1\u30641\u3064\u3060\u3068\u601d\u3063\u3066\u304a\u3051\u3070\u6b21\u306e\u30b9\u30c6\u30c3\u30d7(RNN\u3068\u304b\uff1f)\u307e\u3067\u306f\u554f\u984c\u306a\u3044\u3057\u3001SupportVectorMachine\u3084K-means\u3082\u540c\u69d8\u306e\u8003\u3048\u65b9\u3067\u5229\u7528\u3067\u304d\u308b\u3002\n\n\u66f4\u306bMNIST\u3092\u89b3\u5bdf\u3059\u308b\u3068\u2026\n\n\u624b\u66f8\u304d\u306e\u6570\u5b57\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3093\u3067\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3002\n\u3053\u308c\u3082\u5b9f\u306f\u5927\u4e8b\u3067\u3001\u5b9f\u52d9\u3067\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u308b\u3068\u304d\u306b1\u3092\u5927\u91cf\u306b\u7528\u610f\u3057\u3066\u30012\u3092\u5927\u91cf\u306b\u7528\u610f\u3057\u3066\u2026\u3068\u3084\u308a\u304c\u3061\u3002\u3061\u3083\u3093\u3068\u3054\u3061\u3083\u3054\u3061\u3083\u306b\u6df7\u305c\u3066\u304b\u3089\u5b66\u7fd2\u306b\u304b\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u8a66\u3057\u306b0-8\u307e\u3067\u306e\u6570\u5b57\u3060\u3051\u5b66\u7fd2\u3057\u30669\u3092\u8b58\u5225\u3067\u304d\u308b\u304b\u8a66\u3057\u3066\u307f\u3066\u6b32\u3057\u3044\u3002\u304d\u3063\u30680\u30844\u304c\u5927\u91cf\u306b\u51fa\u3066\u304f\u308b\u306f\u305a\u3060\u3002\n\n\u6570\u5b57\u4ee5\u5916\u304c\u306a\u3044\u3002\n\u306a\u3093\u3066\u7406\u60f3\u7684\u3002\u5b9f\u52d9\u3067\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u3088\u3046\u3068\u3059\u308b\u3068\u4f55\u304b\u306e\u30c8\u30e9\u30d6\u30eb\u3067\u6570\u5b57\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306a\u306e\u306b\u300cA\u300d\u3068\u304b\u3001\u300c-\u300d\u3068\u304b\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308b\u3002\n\u4e8b\u524d\u306b\u6b63\u3057\u304f\u9078\u5225\u3055\u308c\u3066\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3066\u3082\u3089\u3046\u3053\u3068\u304c\u51fa\u6765\u305f\u30c7\u30fc\u30bf\u306f\u6975\u3081\u3066\u8cb4\u91cd\u306a\u306e\u3060\u3002\n\u30af\u30e9\u30a6\u30c9\u30d5\u30a1\u30f3\u30c7\u30a3\u30f3\u30b0\u306a\u3069\u3067\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3066\u3082\u3089\u3046\u3053\u3068\u3082\u3067\u304d\u308b\u306e\u3067\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u6d3b\u7528\u3057\u3088\u3046\u3002\nCaptcha\u3092\u5fdc\u7528\u3057\u305f\u6587\u5b57\u96c6\u3081\u306a\u3069\u3082\u4e00\u6642\u671f\u8a71\u984c\u306b\u306a\u3063\u3066\u3044\u305f\u3002\n\u30eb\u30a4\u30b9\u30fb\u30d5\u30a9\u30f3\u30fb\u30a2\u30fc\u30f3 \uff62\u30cd\u30c3\u30c8\u3092\u4f7f\u3063\u305f\u5927\u898f\u6a21\u5171\u540c\u4f5c\u696d\uff63 \nhttps://www.youtube.com/watch?v=-Ht4qiDRZE8\n\n70000\u3068\u3044\u3046\u30c7\u30fc\u30bf\u91cf\n200MB\u524d\u5f8c\u3002\u73fe\u4ee3\u306ePC\u306e\u30e1\u30e2\u30ea\u306b\u5c55\u958b\u3059\u308b\u306a\u3089\u3001\u306a\u3093\u3068\u3082\u3061\u3087\u3046\u3069\u3044\u3044\u3002\nFirefox\u3067Qiita\u3092\u898b\u306a\u304c\u3089\u5b9f\u88c5\u3057\u3066\u3001\u3044\u304d\u306a\u308a\u5b9f\u884c\u3057\u3066\u3082\u73fe\u5b9f\u7684\u306a\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3067\u6319\u52d5\u304c\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\u3057\u304b\u3082\u9a5a\u6115\u3059\u308b\u306e\u306b\u5341\u5206\u3059\u304e\u308b\u307b\u3069\u306e\u8b58\u5225\u6027\u80fd\u3092\u666e\u901a\u306e3\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u3082\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n\u767d\u9ed2255\u968e\u5c64\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u754c\u9688\u306e\u3088\u3046\u306b\u5de8\u5927\u3067\u30b9\u30d1\u30fc\u30b9\u306a\u884c\u5217\u3067\u3082\u306a\u3051\u308c\u3070\u3001\u97f3\u58f0\u306e\u3088\u3046\u306b\u9577\u3055\u304c\u30d0\u30e9\u30d0\u30e9\u3067\u4fef\u77b0\u3067\u304d\u306a\u308f\u3051\u3067\u3082\u306a\u304f\u3001\u30ab\u30e9\u30d5\u30eb\u30673\u8272\u3092\u3046\u307e\u304f\u6271\u3046\u5fc5\u8981\u3082\u7279\u306b\u306a\u3044\u3002\n\u7d50\u679c\u3092\u8907\u6570\u4e26\u3079\u3066\u3082\u30d1\u30c3\u30c8\u898b\u3067\u5224\u65ad\u3067\u304d\u308b\u7d20\u6674\u3089\u3057\u3055\u3002\u4e2d\u9593\u5c64\u3067\u51fa\u3066\u304f\u308b\u7279\u5fb4\u91cf\u3082\u3069\u3093\u306a\u306e\u304c\u512a\u308c\u3066\u3044\u308b\u304b\u898b\u308c\u3070\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308b\u3002\n\n\u51fa\u3057\u305f\u3044\u30c7\u30fc\u30bf\u306f\u3069\u3093\u306a\u30c7\u30fc\u30bf\u306a\u306e\u304b\uff1f\nMNIST\u3092\u4e00\u901a\u308a\u8912\u3081\u79f0\u3048\u305f\u3068\u3053\u308d\u3067\u3001MNIST\u3067\u4f55\u3092\u51fa\u3057\u305f\u3044\u304b\uff1f\u3092\u8003\u3048\u308b\u3002\n\u4eca\u5ea6\u306f\u51fa\u529b\u306e\u30c7\u30fc\u30bf\u306e\u5f62\u3068\u6559\u5e2b\u30c7\u30fc\u30bf\u306b\u3064\u304f\u30e9\u30d9\u30eb\u306e\u5f62\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3059\u308b\u3002\n\nMNIST\u306e\u4f8b\u3067\u306f\n\n1,2,3,4,5,6,7,8,9,0\n\n\u306e\u3069\u308c\u304b\u3092\u51fa\u3059\u3002\n\u3069\u3093\u306a\u8868\u73fe\u3067\u51fa\u3066\u6765\u308b\u3068\u5b09\u3057\u3044\u304b\uff1f\n\u4f8b1. 1\u6b21\u5143\u3067\u51fa\u529b:\n6 => 5.5\u4ee5\u4e0a6.4\u4ee5\u4e0b\n7 => 6.5\u4ee5\u4e0a7.4\u4ee5\u4e0b\n\u4f8b2. 10\u6b21\u5143\u3067\u51fa\u529b:\n6 => [0,0,0,0,0,1,0,0,0,0]\n7 => [0,0,0,0,0,0,1,0,0,0]\n8 => [0,0,0,0,0,0,0,1,0,0]\n\u591a\u30af\u30e9\u30b9\u5206\u985e\u3067\u3042\u308bMNIST\u3067\u306f\u4f8b2\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304c\u591a\u3044\u3057\u305d\u308c\u304c\u9069\u5207\u3002\n\u3053\u3053\u3067\u9078\u629e\u3092\u9593\u9055\u3048\u308b\u3068\u8aa4\u5dee\u95a2\u6570\u3082\u898b\u5f53\u9055\u3044\u306e\u3082\u306e\u3092\u9078\u629e\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u3002\n\u3088\u3057\u306a\u306b\u3084\u3063\u3066\u304f\u308c\u308b\u8aa4\u5dee\u95a2\u6570\u3082\u3042\u308b\u304c\u3001\u4e00\u822c\u7684\u3067\u306a\u3044\u5834\u5408\u306f\u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u30e9\u30d9\u30eb\u306b\u624b\u3092\u5165\u308c\u3066\u3042\u3052\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u3053\u3068\u3082\u30fb\u30fb\u30fb\n\u3053\u306e\u8fba\u306e\u51fa\u529b\u306b\u95a2\u3057\u3066\u660e\u78ba\u306b\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u30012\u30af\u30e9\u30b9\u5206\u985e\u3084\u56de\u5e30\u7b49\u3068\u6df7\u4e71\u3057\u3066\u3064\u3089\u3044\u76ee\u306b\u3042\u3063\u305f\u308a\u3059\u308b\u3002\n\n\u7d50\u5c40\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3068\u304d\u306b\u6c17\u306b\u3057\u3066\u308b\u3053\u3068\n\n\u6b21\u5143\uff08\u56fa\u5b9a\uff1f\u53ef\u5909\u9577\uff1f\uff09\n\u5024\u57df\n\u5358\u4f4d(\u5bfe\u6570\u304b\u3069\u3046\u304b\u3084\u5468\u6ce2\u6570\u8ef8\u304b\u3069\u3046\u304b\u306a\u3069\n\u524d\u51e6\u7406\uff08\u6b63\u898f\u5316\u3055\u308c\u3066\u305f\u3068\u3057\u305f\u3089\u4f55\u3092\u3069\u3046\u6b63\u898f\u5316\u3057\u305f\u306e\u304b\u306a\u3069)\n\u91cf\n\u4e26\u3073\n\u5165\u529b\u65b9\u6cd5\n\u78ba\u8a8d\u65b9\u6cd5\n\u51fa\u529b\u65b9\u6cd5\n\u7a2e\u985e(\u5916\u308c\u5024\u542b\u3080\u304b\u3069\u3046\u304b)\n\u6027\u8cea(\u78ba\u7387\u5206\u5e03,\u96e2\u6563\u9023\u7d9a\u2026etc)\n\u4ed6\u306b\u3082\u3042\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u304f\u3060\u3055\u3044\uff01\uff01\uff01\n\n\nMNIST\u306b\u5f53\u3066\u306f\u3081\u308b\u3068\n\n\u6b21\u5143\uff1a\u56fa\u5b9a784\n\u5024\u57df\uff1a0-255(\u7269\u306b\u3088\u3063\u3066\u306f0-1\u306b\u76f4\u3055\u308c\u3066\u308b)\n\u5358\u4f4d\uff1a\u660e\u308b\u3055(\u7dda\u5f62)\n\u524d\u51e6\u7406\uff1a\u7279\u306b\u7121\u3057\n\u91cf\uff1a70000\uff08Train 60000, Test 10000\uff09\n\u4e26\u3073\uff1a\u30e9\u30f3\u30c0\u30e0\n\u5165\u529b\u65b9\u6cd5\uff1a\u5168\u3066\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4e00\u6c17\u306b\u5165\u529b\u53ef\u80fd\u3001\u5f8c\u304b\u3089\u5897\u3048\u305f\u308a\u3057\u306a\u3044\n\u78ba\u8a8d\u65b9\u6cd5\uff1a28*28\u306e\u753b\u50cf\u3068\u3057\u3066\u78ba\u8a8d\u53ef\u80fd\n\u51fa\u529b\u65b9\u6cd5\uff1a0-9\u306e\u6570\u5b57\n\u7a2e\u985e(\u5916\u308c\u5024\u542b\u3080\u304b\u3069\u3046\u304b)\uff1a0-9\u306e\u6570\u5b57\u306e\u307f\n\u6027\u8cea(\u78ba\u7387\u5206\u5e03,\u96e2\u6563\u9023\u7d9a\u2026etc)\uff1a\u6570\u5b57\u306e\u51fa\u73fe\u78ba\u7387\u306f\u4e00\u69d8\n\n\n\u5b9f\u969b\u306b\u6c17\u306b\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n\nWhatMnist.py\nimport pandas as pd\nimport numpy as np\n# Chainer\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import optimizers\nfrom chainer import serializers, Variable\n# \u53ef\u8996\u5316(Jupyter\u60f3\u5b9a)\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n\n\n\nPKL\u306e\u5834\u5408\n\nWhatMnist.py\n# http://deeplearning.net/data/mnist/mnist.pkl.gz\n# \u30bf\u30d7\u30eb\u3067(train, valid, test)\n# train -> (data, label)\n# valid -> (data, label) \u89aa\u5207\u3059\u304e\u3066Validation\u30c7\u30fc\u30bf\u307e\u3067\u5206\u304b\u308c\u3066\u308b\n# test -> (data, label)\n# Pandas\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\nmnist = pd.read_pickle('mnist.pkl')\n\n\nhttp://deeplearning.net/tutorial/gettingstarted.html\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3053\u3061\u3089\u3002\n\nCSV\u306e\u5834\u5408\n\nWhatMnist.py\nif(0):\n    # Pandas + csv\u306e\u5834\u5408\n    mnist = pd.read_csv('mnist.csv') \n    # Numpy + csv\u306e\u5834\u5408\n    mnist = np.loadtxt('mnist.csv')\n    # \u30e9\u30d9\u30eb\u5217\u306e\u5206\u96e2(\u6700\u521d\u306e\u884c\u304c\u30e9\u30d9\u30eb\u3068\u4eee\u5b9a)\n    mnist_data, mnist_label = np.split(mnist, [1], axis=1)\n    # \u5b66\u7fd2\u884c\u3068\u30c6\u30b9\u30c8\u884c\u306esplit\n    x_train,x_test = np.split(mnist_data, [50000])\n    y_train,y_test = np.split(mnist_label, [50000])\n\n\n\n\u30c7\u30fc\u30bf\u5f62\u5f0f\u306e\u78ba\u8a8d\n\nWhatMnist.py\nprint('## \u6b21\u5143\u3068\u91cf')\nprint(\"train.data:{0}, train.label:{1}\".format(mnist[0][0].shape, mnist[0][1].shape))\nprint(\"valid.data:{0}, valid.label:{1}\".format(mnist[1][0].shape, mnist[1][1].shape))\nprint(\"test.data:{0}, test.label:{1}\".format(mnist[2][0].shape, mnist[2][1].shape))\n\nprint('## \u5024\u57df\u3068\u5358\u4f4d')\nprint(\"train.data.max:{0}, train.data.min:{1}\".format(np.max(mnist[0][0]), np.min(mnist[0][0])))\nprint(\"train.label.max:{0}, train.label.min:{1}\".format(np.max(mnist[0][1]), np.min(mnist[0][1])))\n\nprint('## \u4e26\u3073\u3068\u51fa\u529b\u65b9\u6cd5')\nprint(\"head -n 30 label: {0}\".format(mnist[0][1][:30]))\n\nprint('## \u5165\u529b\u65b9\u6cd5(\u4e00\u6c17\u306b\u8aad\u307f\u8fbc\u3093\u3067np.array\u306b\u7a81\u3063\u8fbc\u3093\u3067\u3042\u308b)')\nfig = plt.figure()\nax1 = fig.add_subplot(2,1,1)\nax2 = fig.add_subplot(2,1,2)\nprint('## \u78ba\u8a8d\u65b9\u6cd5')\nprint('\u4ee3\u8868\u3068\u3057\u3066\u9069\u5f53\u306a\u3082\u306e\u3092\u8868\u793a\u3057\u3066\u307f\u305f\u3002')\nax1.imshow(mnist[0][0][40].reshape((28,28)), cmap = cm.Greys_r)\n\nprint('## \u7a2e\u985e\u3068\u6027\u8cea')\nprint('\u3053\u3053\u3067\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u5404\u30af\u30e9\u30b9\u306e\u983b\u5ea6\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u305f\u3002')\nax2.hist(mnist[0][1], bins=range(11), alpha=0.9, color='b', normed=True)\n\n\n\n\n\u6b21\u5143\u3068\u91cf\ntrain.data:(50000, 784), train.label:(50000,)\nvalid.data:(10000, 784), valid.label:(10000,)\ntest.data:(10000, 784), test.label:(10000,)\n\n\u5024\u57df\u3068\u5358\u4f4d\ntrain.data.max:0.99609375, train.data.min:0.0\ntrain.label.max:9, train.label.min:0\n\n\u4e26\u3073\u3068\u51fa\u529b\u65b9\u6cd5\nhead -n 30 label: [5 0 4 1 9 2 1 3 1 4 3 5 3 6 1 7 2 8 6 9 4 0 9 1 1 2 4 3 2 7]\n\n\u5165\u529b\u65b9\u6cd5(\u4e00\u6c17\u306b\u8aad\u307f\u8fbc\u3093\u3067np.array\u306b\u7a81\u3063\u8fbc\u3093\u3067\u3042\u308b)\n\n\u78ba\u8a8d\u65b9\u6cd5\n\u4ee3\u8868\u3068\u3057\u3066\u9069\u5f53\u306a\u3082\u306e\u3092\u8868\u793a\u3057\u3066\u307f\u305f\u3002\n\n\u7a2e\u985e\u3068\u6027\u8cea\n\u3053\u3053\u3067\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u5404\u30af\u30e9\u30b9\u306e\u983b\u5ea6\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u305f\u3002\n(array([ 0.09864,  0.11356,  0.09936,  0.10202,  0.09718,  0.09012, 0.09902,  0.1035 ,  0.09684,  0.09976]),\n array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),\n\n\n\n\u4eca\u5f8c\u306e\u305f\u3081\u306b\u547c\u3073\u51fa\u3057\u3084\u3059\u3044\u540d\u524d\u3092\u3064\u3051\u308b\nchainer\u3067\u306f\u30c7\u30fc\u30bf\u3092float32,int32\u3067\u6271\u3044\u3001array\u3068\u3057\u3066\u6271\u3046(CPU\u3067\u306f)\n\nWhatMnist.py\nx_train = np.array(mnist[0][0], dtype=np.float32)\ny_train = np.array(mnist[0][1], dtype=np.int32)\nx_test = np.array(mnist[2][0], dtype=np.float32)\ny_test = np.array(mnist[2][1], dtype=np.int32)\nprint('x_train:' + str(x_train.shape))\nprint('y_train:' + str(y_train.shape))\nprint('x_test:' + str(x_test.shape))\nprint('y_test:' + str(y_test.shape))\n\n\n\nx_train:(50000, 784)\ny_train:(50000,)\nx_test:(10000, 784)\ny_test:(10000,)\n\n\n\u5f8c\u306f\u304a\u99b4\u67d3\u307f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\nWhatMnist.py\n# \u4e88\u6e2c\u5668\u30af\u30e9\u30b9\nclass MLP(chainer.Chain):\n    def __init__(self):\n        super(MLP, self).__init__(\n            l1=L.Linear(784, 100),\n            l2=L.Linear(100, 100),\n            l3=L.Linear(100, 10),\n        )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        y = self.l3(h2)\n        return y\n\n# Loss\u3068Accuracy\u3092\u8a08\u7b97\u3059\u308b\nclass Classifier(chainer.Chain):\n    def __init__(self, predictor):\n        super(Classifier, self).__init__(predictor=predictor)\n\n    def __call__(self, x, t):\n        y = self.predictor(x)\n        self.loss = F.softmax_cross_entropy(y, t)\n        self.accuracy = F.accuracy(y, t)\n        return self.loss\n\nmodel = Classifier(MLP())\noptimizer = optimizers.SGD()\noptimizer.setup(model)\n\nbatchsize = 100\ndatasize = 50000\nfor epoch in range(20):\n    print('epoch %d' % epoch)\n    indexes = np.random.permutation(datasize)\n    for i in range(0, datasize, batchsize):\n        x = Variable(x_train[indexes[i : i + batchsize]])\n        t = Variable(y_train[indexes[i : i + batchsize]])\n        optimizer.update(model, x, t)\n\n\n\n\u5b66\u7fd2\u7d50\u679c\u3092\u4f7f\u3046\n(\u500b\u4eba\u7684\u306b\u306f\u3053\u3063\u3061\u306e\u5de5\u592b\u304c\u5927\u4e8b\u3060\u3068\u601d\u3063\u3066\u308b\u3002)\n\nWhatMnist.py\nn = 10\nx = Variable(x_test[n:n+1])\nv = model.predictor(x)\nplt.imshow(x_test[n:n+1].reshape((28,28)), cmap = cm.Greys_r)\nprint(np.argmax(v.data))\n\n\n\n0\n\n\n\n\u304a\u308f\u308a\u306b\nDeepLearning\u306e\u6ce2\u304c\u6765\u308b\u306f\u308b\u304b\u6614\u306e\u8a71\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u3092\u7d30\u3005\u3068\u3084\u3063\u3066\u3044\u305f\u6642\u306b\u3001\u96d1\u9b5a\u9662\u751f\u3060\u3063\u305f\u79c1\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u76ee\u304c\u884c\u304d\u304c\u3061\u3067\u30c7\u30fc\u30bf\u305d\u306e\u3082\u306e\u306e\u6027\u8cea\u3092\u898b\u5931\u3046\u3053\u3068\u304c\u591a\u304b\u3063\u305f\u3002\n\u91cf\u304c\u591a\u304f\u306a\u308b\u307b\u3069\u89b3\u5bdf\u3057\u306b\u304f\u3044\u3082\u306e\u3092\u89b3\u5bdf\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u304f\u306a\u308b\u3057\u3001\u6027\u8cea\u3078\u306e\u7406\u89e3\u304c\u6027\u80fd\u306b\u5927\u304d\u304f\u52b9\u3044\u3066\u304f\u308b\u3002\u9053\u306b\u8ff7\u3063\u305f\u3089\u30c7\u30fc\u30bf\u3092\u898b\u3088\u3046\u3002\n\n\u3055\u3042\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u305d\u306e\u5148\u3078\n\n# DeepLearning\u3060\uff01\u4eba\u5de5\u77e5\u80fd\u3060\uff01\u6a5f\u68b0\u5b66\u7fd2\u3060\uff01\n\u30a8\u30f3\u30b8\u30cb\u30a2\u3068\u3057\u3066\u306e\u610f\u6c17\u8fbc\u307f\u3068\u3001\n\u306a\u3093\u3060\u304b\u3059\u3054\u3044\u3053\u3068\u304c\u51fa\u6765\u305d\u3046\u3060\u306a\uff01\u3068\u3044\u3046\u4e0a\u53f8\u306e\u5f8c\u62bc\u3057\u3092\u4e00\u8eab\u306b\u53d7\u3051\u3001\n\u6df1\u5c64\u5b66\u7fd2\u672c\u3084Qiita\u8a18\u4e8b\u3092\u6d41\u3057\u8aad\u307f\u3001\nTensorFlow\u3084Chainer\u3092\u5c0e\u5165\u3057\u3066\u3001\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u5199\u7d4c\u3067\u5fb3\u3092\u7a4d\u3093\u3067\u3001\n\u30b2\u30fc\u30e0\u306b\u4f7f\u3063\u3066\u3044\u305fGPU\u3082\u5b66\u7fd2\u3068\u3044\u3046\u5927\u7fa9\u540d\u5206\u306e\u3082\u3068\u30d5\u30eb\u7a3c\u50cd\u3055\u305b\u305f\u3001\u3001\u3001\n\n**Accuracy 99.23%**\n\n\u4eca\u56de\u306f\u3001MNIST\u3084IRIS\u309299%\u8d85\u3067\u8b58\u5225\u3059\u308b\u30a8\u30f3\u30b8\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u6e80\u8db3\u3057\u3066\u3057\u307e\u3063\u305f\u30a8\u30f3\u30b8\u30cb\u30a2\u304c\n**MNIST\u3092\u8131\u5374\u3059\u308b\u305f\u3081\u306bMNIST\u3092\u77e5\u308b\u305f\u3081\u306e\u8a71**\n\n## \u304a\u306a\u3058\u307f\u3001\u300cMNIST\u300d\u304c\u3064\u307e\u308a\u3069\u3093\u306a\u30c7\u30fc\u30bf\u306a\u306e\u304b\uff1f\n28\u884c28\u5217\u306e\u753b\u50cf\u2192\u6b63\u3057\u3044\u304c\u4eca\u306f\u305d\u3053\u3067\u306f\u306a\u3044\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u306f\u300170000\u884c784\u5217\u3001\n70000\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u3001784\u306f28*28\u3092\u30d9\u30af\u30c8\u30eb\u306b\u76f4\u3057\u305f\u6642\u306e\u6b21\u5143\u6570\u3002\n\u884c\u306b\u89e3\u6790\u3057\u305f\u3044\u30c7\u30fc\u30bf\u7dcf\u6570\u3001\u5217\u306b\u89e3\u6790\u3057\u305f\u3044\u30c7\u30fc\u30bf1\u30641\u3064\u3060\u3068\u601d\u3063\u3066\u304a\u3051\u3070\u6b21\u306e\u30b9\u30c6\u30c3\u30d7(RNN\u3068\u304b\uff1f)\u307e\u3067\u306f\u554f\u984c\u306a\u3044\u3057\u3001SupportVectorMachine\u3084K-means\u3082\u540c\u69d8\u306e\u8003\u3048\u65b9\u3067\u5229\u7528\u3067\u304d\u308b\u3002\n\n## \u66f4\u306bMNIST\u3092\u89b3\u5bdf\u3059\u308b\u3068\u2026\n### \u624b\u66f8\u304d\u306e\u6570\u5b57\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3093\u3067\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3002\n\u3053\u308c\u3082\u5b9f\u306f\u5927\u4e8b\u3067\u3001\u5b9f\u52d9\u3067\u6559\u5e2b\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u308b\u3068\u304d\u306b1\u3092\u5927\u91cf\u306b\u7528\u610f\u3057\u3066\u30012\u3092\u5927\u91cf\u306b\u7528\u610f\u3057\u3066\u2026\u3068\u3084\u308a\u304c\u3061\u3002\u3061\u3083\u3093\u3068\u3054\u3061\u3083\u3054\u3061\u3083\u306b\u6df7\u305c\u3066\u304b\u3089\u5b66\u7fd2\u306b\u304b\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u8a66\u3057\u306b0-8\u307e\u3067\u306e\u6570\u5b57\u3060\u3051\u5b66\u7fd2\u3057\u30669\u3092\u8b58\u5225\u3067\u304d\u308b\u304b\u8a66\u3057\u3066\u307f\u3066\u6b32\u3057\u3044\u3002\u304d\u3063\u30680\u30844\u304c\u5927\u91cf\u306b\u51fa\u3066\u304f\u308b\u306f\u305a\u3060\u3002\n\n### \u6570\u5b57\u4ee5\u5916\u304c\u306a\u3044\u3002\n\u306a\u3093\u3066\u7406\u60f3\u7684\u3002\u5b9f\u52d9\u3067\u30c7\u30fc\u30bf\u3092\u96c6\u3081\u3088\u3046\u3068\u3059\u308b\u3068\u4f55\u304b\u306e\u30c8\u30e9\u30d6\u30eb\u3067\u6570\u5b57\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306a\u306e\u306b\u300cA\u300d\u3068\u304b\u3001\u300c-\u300d\u3068\u304b\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308b\u3002\n\u4e8b\u524d\u306b\u6b63\u3057\u304f\u9078\u5225\u3055\u308c\u3066\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3066\u3082\u3089\u3046\u3053\u3068\u304c\u51fa\u6765\u305f\u30c7\u30fc\u30bf\u306f\u6975\u3081\u3066\u8cb4\u91cd\u306a\u306e\u3060\u3002\n\n\u30af\u30e9\u30a6\u30c9\u30d5\u30a1\u30f3\u30c7\u30a3\u30f3\u30b0\u306a\u3069\u3067\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3066\u3082\u3089\u3046\u3053\u3068\u3082\u3067\u304d\u308b\u306e\u3067\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u6d3b\u7528\u3057\u3088\u3046\u3002\nCaptcha\u3092\u5fdc\u7528\u3057\u305f\u6587\u5b57\u96c6\u3081\u306a\u3069\u3082\u4e00\u6642\u671f\u8a71\u984c\u306b\u306a\u3063\u3066\u3044\u305f\u3002\n\u30eb\u30a4\u30b9\u30fb\u30d5\u30a9\u30f3\u30fb\u30a2\u30fc\u30f3 \uff62\u30cd\u30c3\u30c8\u3092\u4f7f\u3063\u305f\u5927\u898f\u6a21\u5171\u540c\u4f5c\u696d\uff63 \nhttps://www.youtube.com/watch?v=-Ht4qiDRZE8\n\n### 70000\u3068\u3044\u3046\u30c7\u30fc\u30bf\u91cf\n200MB\u524d\u5f8c\u3002\u73fe\u4ee3\u306ePC\u306e\u30e1\u30e2\u30ea\u306b\u5c55\u958b\u3059\u308b\u306a\u3089\u3001\u306a\u3093\u3068\u3082\u3061\u3087\u3046\u3069\u3044\u3044\u3002\nFirefox\u3067Qiita\u3092\u898b\u306a\u304c\u3089\u5b9f\u88c5\u3057\u3066\u3001\u3044\u304d\u306a\u308a\u5b9f\u884c\u3057\u3066\u3082\u73fe\u5b9f\u7684\u306a\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3067\u6319\u52d5\u304c\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\u3057\u304b\u3082\u9a5a\u6115\u3059\u308b\u306e\u306b\u5341\u5206\u3059\u304e\u308b\u307b\u3069\u306e\u8b58\u5225\u6027\u80fd\u3092\u666e\u901a\u306e3\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3067\u3082\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n### \u767d\u9ed2255\u968e\u5c64\n\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u754c\u9688\u306e\u3088\u3046\u306b\u5de8\u5927\u3067\u30b9\u30d1\u30fc\u30b9\u306a\u884c\u5217\u3067\u3082\u306a\u3051\u308c\u3070\u3001\u97f3\u58f0\u306e\u3088\u3046\u306b\u9577\u3055\u304c\u30d0\u30e9\u30d0\u30e9\u3067\u4fef\u77b0\u3067\u304d\u306a\u308f\u3051\u3067\u3082\u306a\u304f\u3001\u30ab\u30e9\u30d5\u30eb\u30673\u8272\u3092\u3046\u307e\u304f\u6271\u3046\u5fc5\u8981\u3082\u7279\u306b\u306a\u3044\u3002\n\u7d50\u679c\u3092\u8907\u6570\u4e26\u3079\u3066\u3082\u30d1\u30c3\u30c8\u898b\u3067\u5224\u65ad\u3067\u304d\u308b\u7d20\u6674\u3089\u3057\u3055\u3002\u4e2d\u9593\u5c64\u3067\u51fa\u3066\u304f\u308b\u7279\u5fb4\u91cf\u3082\u3069\u3093\u306a\u306e\u304c\u512a\u308c\u3066\u3044\u308b\u304b\u898b\u308c\u3070\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308b\u3002\n\n## \u51fa\u3057\u305f\u3044\u30c7\u30fc\u30bf\u306f\u3069\u3093\u306a\u30c7\u30fc\u30bf\u306a\u306e\u304b\uff1f\nMNIST\u3092\u4e00\u901a\u308a\u8912\u3081\u79f0\u3048\u305f\u3068\u3053\u308d\u3067\u3001MNIST\u3067\u4f55\u3092\u51fa\u3057\u305f\u3044\u304b\uff1f\u3092\u8003\u3048\u308b\u3002\n\u4eca\u5ea6\u306f\u51fa\u529b\u306e\u30c7\u30fc\u30bf\u306e\u5f62\u3068\u6559\u5e2b\u30c7\u30fc\u30bf\u306b\u3064\u304f\u30e9\u30d9\u30eb\u306e\u5f62\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3059\u308b\u3002\n\n### MNIST\u306e\u4f8b\u3067\u306f\n> 1,2,3,4,5,6,7,8,9,0\n\n\u306e\u3069\u308c\u304b\u3092\u51fa\u3059\u3002\n\u3069\u3093\u306a\u8868\u73fe\u3067\u51fa\u3066\u6765\u308b\u3068\u5b09\u3057\u3044\u304b\uff1f\n\u4f8b1. 1\u6b21\u5143\u3067\u51fa\u529b:\n6 => 5.5\u4ee5\u4e0a6.4\u4ee5\u4e0b\n7 => 6.5\u4ee5\u4e0a7.4\u4ee5\u4e0b\n\n\u4f8b2. 10\u6b21\u5143\u3067\u51fa\u529b:\n6 => [0,0,0,0,0,1,0,0,0,0]\n7 => [0,0,0,0,0,0,1,0,0,0]\n8 => [0,0,0,0,0,0,0,1,0,0]\n\u591a\u30af\u30e9\u30b9\u5206\u985e\u3067\u3042\u308bMNIST\u3067\u306f\u4f8b2\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304c\u591a\u3044\u3057\u305d\u308c\u304c\u9069\u5207\u3002\n\u3053\u3053\u3067\u9078\u629e\u3092\u9593\u9055\u3048\u308b\u3068\u8aa4\u5dee\u95a2\u6570\u3082\u898b\u5f53\u9055\u3044\u306e\u3082\u306e\u3092\u9078\u629e\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b\u3002\n\u3088\u3057\u306a\u306b\u3084\u3063\u3066\u304f\u308c\u308b\u8aa4\u5dee\u95a2\u6570\u3082\u3042\u308b\u304c\u3001\u4e00\u822c\u7684\u3067\u306a\u3044\u5834\u5408\u306f\u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u30e9\u30d9\u30eb\u306b\u624b\u3092\u5165\u308c\u3066\u3042\u3052\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u3053\u3068\u3082\u30fb\u30fb\u30fb\n\u3053\u306e\u8fba\u306e\u51fa\u529b\u306b\u95a2\u3057\u3066\u660e\u78ba\u306b\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u30012\u30af\u30e9\u30b9\u5206\u985e\u3084\u56de\u5e30\u7b49\u3068\u6df7\u4e71\u3057\u3066\u3064\u3089\u3044\u76ee\u306b\u3042\u3063\u305f\u308a\u3059\u308b\u3002\n\n## \u7d50\u5c40\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3068\u304d\u306b\u6c17\u306b\u3057\u3066\u308b\u3053\u3068\n* \u6b21\u5143\uff08\u56fa\u5b9a\uff1f\u53ef\u5909\u9577\uff1f\uff09\n* \u5024\u57df\n* \u5358\u4f4d(\u5bfe\u6570\u304b\u3069\u3046\u304b\u3084\u5468\u6ce2\u6570\u8ef8\u304b\u3069\u3046\u304b\u306a\u3069\n* \u524d\u51e6\u7406\uff08\u6b63\u898f\u5316\u3055\u308c\u3066\u305f\u3068\u3057\u305f\u3089\u4f55\u3092\u3069\u3046\u6b63\u898f\u5316\u3057\u305f\u306e\u304b\u306a\u3069)\n* \u91cf\n* \u4e26\u3073\n* \u5165\u529b\u65b9\u6cd5\n* \u78ba\u8a8d\u65b9\u6cd5\n* \u51fa\u529b\u65b9\u6cd5\n* \u7a2e\u985e(\u5916\u308c\u5024\u542b\u3080\u304b\u3069\u3046\u304b)\n* \u6027\u8cea(\u78ba\u7387\u5206\u5e03,\u96e2\u6563\u9023\u7d9a\u2026etc)\n* \u4ed6\u306b\u3082\u3042\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u304f\u3060\u3055\u3044\uff01\uff01\uff01\n\n### MNIST\u306b\u5f53\u3066\u306f\u3081\u308b\u3068\n* \u6b21\u5143\uff1a\u56fa\u5b9a784\n* \u5024\u57df\uff1a0-255(\u7269\u306b\u3088\u3063\u3066\u306f0-1\u306b\u76f4\u3055\u308c\u3066\u308b)\n* \u5358\u4f4d\uff1a\u660e\u308b\u3055(\u7dda\u5f62)\n* \u524d\u51e6\u7406\uff1a\u7279\u306b\u7121\u3057\n* \u91cf\uff1a70000\uff08Train 60000, Test 10000\uff09\n* \u4e26\u3073\uff1a\u30e9\u30f3\u30c0\u30e0\n* \u5165\u529b\u65b9\u6cd5\uff1a\u5168\u3066\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4e00\u6c17\u306b\u5165\u529b\u53ef\u80fd\u3001\u5f8c\u304b\u3089\u5897\u3048\u305f\u308a\u3057\u306a\u3044\n* \u78ba\u8a8d\u65b9\u6cd5\uff1a28*28\u306e\u753b\u50cf\u3068\u3057\u3066\u78ba\u8a8d\u53ef\u80fd\n* \u51fa\u529b\u65b9\u6cd5\uff1a0-9\u306e\u6570\u5b57\n* \u7a2e\u985e(\u5916\u308c\u5024\u542b\u3080\u304b\u3069\u3046\u304b)\uff1a0-9\u306e\u6570\u5b57\u306e\u307f\n* \u6027\u8cea(\u78ba\u7387\u5206\u5e03,\u96e2\u6563\u9023\u7d9a\u2026etc)\uff1a\u6570\u5b57\u306e\u51fa\u73fe\u78ba\u7387\u306f\u4e00\u69d8\n\n# \u5b9f\u969b\u306b\u6c17\u306b\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3002\n```py:WhatMnist.py\nimport pandas as pd\nimport numpy as np\n# Chainer\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer import optimizers\nfrom chainer import serializers, Variable\n# \u53ef\u8996\u5316(Jupyter\u60f3\u5b9a)\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\n```\n\n\n## PKL\u306e\u5834\u5408\n```py:WhatMnist.py\n# http://deeplearning.net/data/mnist/mnist.pkl.gz\n# \u30bf\u30d7\u30eb\u3067(train, valid, test)\n# train -> (data, label)\n# valid -> (data, label) \u89aa\u5207\u3059\u304e\u3066Validation\u30c7\u30fc\u30bf\u307e\u3067\u5206\u304b\u308c\u3066\u308b\n# test -> (data, label)\n# Pandas\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\nmnist = pd.read_pickle('mnist.pkl')\n```\nhttp://deeplearning.net/tutorial/gettingstarted.html\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u3053\u3061\u3089\u3002\n\n\n## CSV\u306e\u5834\u5408\n```py:WhatMnist.py\nif(0):\n    # Pandas + csv\u306e\u5834\u5408\n    mnist = pd.read_csv('mnist.csv') \n    # Numpy + csv\u306e\u5834\u5408\n    mnist = np.loadtxt('mnist.csv')\n    # \u30e9\u30d9\u30eb\u5217\u306e\u5206\u96e2(\u6700\u521d\u306e\u884c\u304c\u30e9\u30d9\u30eb\u3068\u4eee\u5b9a)\n    mnist_data, mnist_label = np.split(mnist, [1], axis=1)\n    # \u5b66\u7fd2\u884c\u3068\u30c6\u30b9\u30c8\u884c\u306esplit\n    x_train,x_test = np.split(mnist_data, [50000])\n    y_train,y_test = np.split(mnist_label, [50000])\n```\n\n# \u30c7\u30fc\u30bf\u5f62\u5f0f\u306e\u78ba\u8a8d\n```py:WhatMnist.py\nprint('## \u6b21\u5143\u3068\u91cf')\nprint(\"train.data:{0}, train.label:{1}\".format(mnist[0][0].shape, mnist[0][1].shape))\nprint(\"valid.data:{0}, valid.label:{1}\".format(mnist[1][0].shape, mnist[1][1].shape))\nprint(\"test.data:{0}, test.label:{1}\".format(mnist[2][0].shape, mnist[2][1].shape))\n\nprint('## \u5024\u57df\u3068\u5358\u4f4d')\nprint(\"train.data.max:{0}, train.data.min:{1}\".format(np.max(mnist[0][0]), np.min(mnist[0][0])))\nprint(\"train.label.max:{0}, train.label.min:{1}\".format(np.max(mnist[0][1]), np.min(mnist[0][1])))\n\nprint('## \u4e26\u3073\u3068\u51fa\u529b\u65b9\u6cd5')\nprint(\"head -n 30 label: {0}\".format(mnist[0][1][:30]))\n\nprint('## \u5165\u529b\u65b9\u6cd5(\u4e00\u6c17\u306b\u8aad\u307f\u8fbc\u3093\u3067np.array\u306b\u7a81\u3063\u8fbc\u3093\u3067\u3042\u308b)')\nfig = plt.figure()\nax1 = fig.add_subplot(2,1,1)\nax2 = fig.add_subplot(2,1,2)\nprint('## \u78ba\u8a8d\u65b9\u6cd5')\nprint('\u4ee3\u8868\u3068\u3057\u3066\u9069\u5f53\u306a\u3082\u306e\u3092\u8868\u793a\u3057\u3066\u307f\u305f\u3002')\nax1.imshow(mnist[0][0][40].reshape((28,28)), cmap = cm.Greys_r)\n\nprint('## \u7a2e\u985e\u3068\u6027\u8cea')\nprint('\u3053\u3053\u3067\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u5404\u30af\u30e9\u30b9\u306e\u983b\u5ea6\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u305f\u3002')\nax2.hist(mnist[0][1], bins=range(11), alpha=0.9, color='b', normed=True)\n```\n> ## \u6b21\u5143\u3068\u91cf\n> train.data:(50000, 784), train.label:(50000,)\n> valid.data:(10000, 784), valid.label:(10000,)\n> test.data:(10000, 784), test.label:(10000,)\n> ## \u5024\u57df\u3068\u5358\u4f4d\n> train.data.max:0.99609375, train.data.min:0.0\n> train.label.max:9, train.label.min:0\n> ## \u4e26\u3073\u3068\u51fa\u529b\u65b9\u6cd5\n> head -n 30 label: [5 0 4 1 9 2 1 3 1 4 3 5 3 6 1 7 2 8 6 9 4 0 9 1 1 2 4 3 2 7]\n> ## \u5165\u529b\u65b9\u6cd5(\u4e00\u6c17\u306b\u8aad\u307f\u8fbc\u3093\u3067np.array\u306b\u7a81\u3063\u8fbc\u3093\u3067\u3042\u308b)\n\n> ## \u78ba\u8a8d\u65b9\u6cd5\n> \u4ee3\u8868\u3068\u3057\u3066\u9069\u5f53\u306a\u3082\u306e\u3092\u8868\u793a\u3057\u3066\u307f\u305f\u3002\n> ## \u7a2e\u985e\u3068\u6027\u8cea\n> \u3053\u3053\u3067\u306f\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u5404\u30af\u30e9\u30b9\u306e\u983b\u5ea6\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u305f\u3002\n> (array([ 0.09864,  0.11356,  0.09936,  0.10202,  0.09718,  0.09012, 0.09902,  0.1035 ,  0.09684,  0.09976]),\n>  array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10]),\n> ![mnisthist.png](https://qiita-image-store.s3.amazonaws.com/0/20091/0c12ce71-f47f-77d3-7a33-3eba6a12a052.png)\n\n## \u4eca\u5f8c\u306e\u305f\u3081\u306b\u547c\u3073\u51fa\u3057\u3084\u3059\u3044\u540d\u524d\u3092\u3064\u3051\u308b\nchainer\u3067\u306f\u30c7\u30fc\u30bf\u3092float32,int32\u3067\u6271\u3044\u3001array\u3068\u3057\u3066\u6271\u3046(CPU\u3067\u306f)\n\n```py:WhatMnist.py\nx_train = np.array(mnist[0][0], dtype=np.float32)\ny_train = np.array(mnist[0][1], dtype=np.int32)\nx_test = np.array(mnist[2][0], dtype=np.float32)\ny_test = np.array(mnist[2][1], dtype=np.int32)\nprint('x_train:' + str(x_train.shape))\nprint('y_train:' + str(y_train.shape))\nprint('x_test:' + str(x_test.shape))\nprint('y_test:' + str(y_test.shape))\n```\n> x_train:(50000, 784)\n> y_train:(50000,)\n> x_test:(10000, 784)\n> y_test:(10000,)\n\n# \u5f8c\u306f\u304a\u99b4\u67d3\u307f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n```py:WhatMnist.py\n# \u4e88\u6e2c\u5668\u30af\u30e9\u30b9\nclass MLP(chainer.Chain):\n    def __init__(self):\n        super(MLP, self).__init__(\n            l1=L.Linear(784, 100),\n            l2=L.Linear(100, 100),\n            l3=L.Linear(100, 10),\n        )\n    \n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        y = self.l3(h2)\n        return y\n    \n# Loss\u3068Accuracy\u3092\u8a08\u7b97\u3059\u308b\nclass Classifier(chainer.Chain):\n    def __init__(self, predictor):\n        super(Classifier, self).__init__(predictor=predictor)\n        \n    def __call__(self, x, t):\n        y = self.predictor(x)\n        self.loss = F.softmax_cross_entropy(y, t)\n        self.accuracy = F.accuracy(y, t)\n        return self.loss\n\nmodel = Classifier(MLP())\noptimizer = optimizers.SGD()\noptimizer.setup(model)\n\nbatchsize = 100\ndatasize = 50000\nfor epoch in range(20):\n    print('epoch %d' % epoch)\n    indexes = np.random.permutation(datasize)\n    for i in range(0, datasize, batchsize):\n        x = Variable(x_train[indexes[i : i + batchsize]])\n        t = Variable(y_train[indexes[i : i + batchsize]])\n        optimizer.update(model, x, t)\n```\n# \u5b66\u7fd2\u7d50\u679c\u3092\u4f7f\u3046\n(\u500b\u4eba\u7684\u306b\u306f\u3053\u3063\u3061\u306e\u5de5\u592b\u304c\u5927\u4e8b\u3060\u3068\u601d\u3063\u3066\u308b\u3002)\n\n```py:WhatMnist.py\nn = 10\nx = Variable(x_test[n:n+1])\nv = model.predictor(x)\nplt.imshow(x_test[n:n+1].reshape((28,28)), cmap = cm.Greys_r)\nprint(np.argmax(v.data))\n```\n> 0\n> ![show.png](https://qiita-image-store.s3.amazonaws.com/0/20091/711bbbbe-1bf0-9e19-493d-2f20694f8c61.png)\n\n# \u304a\u308f\u308a\u306b\nDeepLearning\u306e\u6ce2\u304c\u6765\u308b\u306f\u308b\u304b\u6614\u306e\u8a71\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u3092\u7d30\u3005\u3068\u3084\u3063\u3066\u3044\u305f\u6642\u306b\u3001\u96d1\u9b5a\u9662\u751f\u3060\u3063\u305f\u79c1\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u76ee\u304c\u884c\u304d\u304c\u3061\u3067\u30c7\u30fc\u30bf\u305d\u306e\u3082\u306e\u306e\u6027\u8cea\u3092\u898b\u5931\u3046\u3053\u3068\u304c\u591a\u304b\u3063\u305f\u3002\n\u91cf\u304c\u591a\u304f\u306a\u308b\u307b\u3069\u89b3\u5bdf\u3057\u306b\u304f\u3044\u3082\u306e\u3092\u89b3\u5bdf\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u304f\u306a\u308b\u3057\u3001\u6027\u8cea\u3078\u306e\u7406\u89e3\u304c\u6027\u80fd\u306b\u5927\u304d\u304f\u52b9\u3044\u3066\u304f\u308b\u3002**\u9053\u306b\u8ff7\u3063\u305f\u3089\u30c7\u30fc\u30bf\u3092\u898b\u3088\u3046\u3002**\n\n### **\u3055\u3042\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u305d\u306e\u5148\u3078**\n", "tags": ["Python", "DeepLearning", "\u4eba\u5de5\u77e5\u80fd", "MachineLearning", "Chainer"]}