{"tags": ["\u30b0\u30e9\u30d5\u7406\u8ad6", "\u5168\u57df\u6728", "Python", "\u6570\u5b66", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"], "context": "\n\n \u306f\u3058\u3081\u306b\n\u7d0430\u5e74\u524d\u306b\u5927\u5b66\u3067\u7fd2\u3063\u305f\u3001\u5168\u57df\u6728\u306e\u5217\u6319\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092Python\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u306e\u3067\u3001\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u5168\u57df\u6728\u3068\u306f\u3001\u5143\u306e\u30b0\u30e9\u30d5\u306e\u5168\u3066\u306e\u70b9\u3092\u542b\u3080\u6728\u306e\u3053\u3068\u3067\u3059\u3002\n\n \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n\u30b0\u30e9\u30d5\u306e\u5f0f\u8868\u73fe\u3092\u6c42\u3081\u3066\u3001\u5f0f\u8868\u73fe\u3092\u5c55\u958b\u3057\u3066\u5217\u6319\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u4e09\u89d2\u5f62\u306e\u30b0\u30e9\u30d5\u3067\u5404\u8fba\u3092\u305d\u308c\u305e\u308ca,b,c\u3068\u3059\u308b\u3068\u3001\u5f0f\u8868\u73fe\u306f\u7d44(abc)\u3068\u306a\u308a\u3001\u3053\u308c\u3092\u5c55\u958b\u3059\u308b\u3068ab/ac/bc\u3068\u306a\u308a\u307e\u3059\u3002\n\u30b0\u30e9\u30d5\u306e\u5f0f\u8868\u73fe\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n\n\n\u8fba\u306e\u6700\u521d\u306e\u5f0f\u8868\u73fe\u3068\u3057\u3066\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c81\u6587\u5b57\u3092\u6301\u305f\u305b\u307e\u3059\u3002\n\u30b0\u30e9\u30d5\u306f\u3001\u5f0f\u8868\u73fe\u3092\u7dad\u6301\u3057\u306a\u304c\u3089\u8fba\u307e\u305f\u306f\u8fba\u3068\u70b9\u3092\u524a\u9664\u3067\u304d\u307e\u3059\u3002\n\u30b0\u30e9\u30d5\u304c1\u70b9\u306b\u306a\u3063\u305f\u3068\u304d\u306b\u5f0f\u8868\u73fe\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n\n\n\u30b0\u30e9\u30d5G\u306e\u5f0f\u8868\u73fe\uff08Expr(G))\u306f\u3001\u4efb\u610f\u306e1\u3064\u306e\u8fbaE\u3092\u9078\u3093\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u5f62\u3067\u304d\u307e\u3059\u3002(\u6a19\u6e96\u30eb\u30fc\u30eb)\n\n\nExpr(G) \uff1d \u548c(\u7a4d(\u7d44(Expr(E)), Expr(G\u304b\u3089E\u3092\u524a\u9664)), \u7a4d(Expr(E), Expr(G\u304b\u3089E\u3092\u7e2e\u7d041)))\n\n\n\n\u5f0f\u8868\u73fe\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\u548c(A, B): A\u306e\u8981\u7d20\u3068B\u306e\u8981\u7d20\u306e\u548c\u96c6\u5408\u3067\u3059\u3002\n\n\u7a4d(A, B): A\u306e\u8981\u7d20\u3068B\u306e\u8981\u7d20\u306e\u7a4d\u96c6\u5408(\u7d44\u5408\u305b\u3066\u6587\u5b57\u3092\u4e26\u3079\u305f\u3082\u306e)\u3067\u3059\u3002\n\n\u7d44(A): A\u306e\u8981\u7d20\u3054\u3068\u306b\u30011\u6587\u5b57\u3065\u3064\u6d88\u53bb\u3057\u3066\u5c55\u958b\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u7d44(abc)\u306f\u3001ab\u3068ac\u3068bc\u306e3\u3064\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\n\n\u5148\u307b\u3069\u306e\u6a19\u6e96\u30eb\u30fc\u30eb\u3060\u3051\u3067\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001\u7279\u5b9a\u306e\u30b1\u30fc\u30b9\u306e\u30eb\u30fc\u30eb\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002(\u6a19\u6e96\u30eb\u30fc\u30eb\u304b\u3089\u5c0e\u304b\u308c\u307e\u3059)\n\n\u8fbaE\u304c\u81ea\u5df1\u30eb\u30fc\u30d7\u306e\u5834\u5408: Expr(G) = \u7a4d(\u7d44(Expr(E)), Expr(G\u304b\u3089E\u3092\u524a\u9664))\n\u8fbaE\u306e\u7247\u65b9\u306e\u7aef\u70b9\u306e\u6b21\u6570(\u63a5\u7d9a\u3059\u308b\u8fba\u306e\u6570)=1\u306e\u5834\u5408: Expr(G) = \u7a4d(Expr(E), Expr(G\u304b\u3089E\u3092\u7e2e\u7d04))\n\u8fbaE\u3068\u8fbaF\u304c\u70b9V\u3067\u63a5\u7d9a\u3057\u3066\u304a\u308a\u3001\u70b9V\u306e\u6b21\u6570=2\u306e\u5834\u5408: Expr(E) = \u7a4d(Expr(E), Expr(F))\u3068\u3057\u3066\u3001\u8fbaF\u3092\u7e2e\u7d04\u3057\u305f\u5f8c\u306e\u30b0\u30e9\u30d5\u306b\u3064\u3044\u3066\u6c42\u3081\u307e\u3059\u3002\n\n\n Python\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\n\u30af\u30e9\u30b9\u5b9a\u7fa9\u3092\u3057\u307e\u3059\u3002\n\npython3\nfrom itertools import combinations, product\nfrom collections import namedtuple\nUnion = namedtuple('Union', 'l r') # \u548c\nProdu = namedtuple('Produ', 'l r') # \u7a4d\nCombi = namedtuple('Combi', 'e') # \u7d44\nclass Edge:\n    def __init__(self, u, v, e):\n        self.u = u\n        self.v = v\n        self.e = e\n    def __repr__(self):\n        return '<%s %s %s>'%(self.u, self.v, self.e)\nclass Graph:\n    def __init__(self, num_nodes, edges):\n        self.nodes = [[] for _ in range(num_nodes)]\n        self.edges = []\n        for i, (u, v) in enumerate(edges):\n            self.edges.append(Edge(u, v, chr(97 + i)))\n            self.nodes[u].append(i)\n            self.nodes[v].append(i)\n    def __repr__(self):\n        return str(self.edges)\n    def spanning_tree(self):\n        res = Graph._reduct(self.nodes.copy(), self.edges.copy())\n        return sorted(Graph._expand(res))\n    @staticmethod\n    def _reduct(nodes, edges):\n        if not edges:\n            return '' if len(nodes) == 1 else None\n        for i, e in enumerate(edges): # \u81ea\u5df1\u30eb\u30fc\u30d7\n            if e.u == e.v:\n                Graph._erase(nodes, edges, i)\n                return Produ(l=Combi(e=e.e), r=Graph._reduct(nodes, edges))\n        for con in nodes: # \u6b21\u6570=1\n            if len(con) == 1:\n                e = edges[con[0]]\n                Graph._erase(nodes, edges, con[0])\n                return Produ(l=e.e, r=Graph._reduct(nodes, edges))\n        for con in nodes: # \u6b21\u6570=2\n            if len(con) == 2:\n                e = edges[con[0]]\n                edges[con[0]] = Edge(e.u, e.v, Produ(l=edges[con[0]].e,\n                                                     r=edges[con[1]].e))\n                Graph._shrink(nodes, edges, con[1])\n                return Graph._reduct(nodes, edges)\n        e = edges[0]\n        nodes2, edges2 = nodes.copy(), edges.copy()\n        Graph._erase(nodes, edges, 0)\n        Graph._shrink(nodes2, edges2, 0)\n        return Union(l=Produ(l=Combi(e=e.e), r=Graph._reduct(nodes, edges)),\n                     r=Produ(l=e.e, r=Graph._reduct(nodes2, edges2)))\n    @staticmethod\n    def _erase(nodes, edges, k):\n        for a, con in enumerate(nodes):\n            nodes[a] = [b if b < k else b-1 for b in con if b != k]\n        del edges[k]\n    @staticmethod\n    def _shrink(nodes, edges, k):\n        e = edges[k]\n        dn = max(e.u, e.v)\n        sn = e.u+e.v-dn\n        nodes[sn] = nodes[sn] + nodes[dn]\n        for a, con in enumerate(nodes):\n            nodes[a] = [b if b < k else b-1 for b in con if b != k]\n        for a, ed in enumerate(edges):\n            u = sn if ed.u == dn else ed.u if ed.u < dn else ed.u-1\n            v = sn if ed.v == dn else ed.v if ed.v < dn else ed.v-1\n            edges[a] = Edge(u, v, ed.e)\n        del edges[k]\n        del nodes[dn]\n    @staticmethod\n    def _expand(ex):\n        if ex is None:\n            return set()\n        elif isinstance(ex, str):\n            return set(ex) if ex else {''}\n        elif isinstance(ex, Combi):\n            exe = Graph._expand(ex.e)\n            return set.union(*(set(''.join(s) for s in\n                combinations(e, len(e)-1)) for e in exe))\n        exl = Graph._expand(ex.l)\n        exr = Graph._expand(ex.r)\n        if isinstance(ex, Union):\n            return exl.union(exr)\n        return {''.join(sorted((i+j))) for i, j in product(exl, exr)}\n\n\n\u4e09\u89d2\u30b0\u30e9\u30d5\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\npython3\ng = Graph(3, [(0,1), (1,2), (2,0)])\nprint(g.spanning_tree())\n>>>\n['ab', 'ac', 'bc']\n\n\n\n4\u70b9\u306e\u5b8c\u5168\u30b0\u30e9\u30d5\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\npython3\ng = Graph(4, [(0,1), (1,2), (2,3), (3,0), (0,2), (1,3)])\nprint(g.spanning_tree())\n>>>\n['abc', 'abd', 'abf', 'acd', 'ace', 'acf', 'ade', 'aef',\n 'bcd', 'bce', 'bde', 'bdf', 'bef', 'cdf', 'cef', 'def']\n\n\n\u3061\u306a\u307f\u306b\u3001\u3053\u306ePython\u306f85\u884c\u3067\u3059\u304c\u3001C\u3067\u66f8\u304f\u3068500\u884c\u3067\u3001C#\u3067\u66f8\u304f\u3068330\u884c\u307b\u3069\u3067\u3057\u305f\u3002\n\u4ee5\u4e0a\n\n\n\n\n\u8fba\u3092\u7e2e\u7d04\u3059\u308b\u3068\u306f\u3001\u305d\u306e\u8fba\u3092\u9577\u30550\u306b\u3057\u3066\u3001\u4e21\u7aef\u306e\u70b9\u30921\u3064\u306b\u5909\u3048\u308b\u64cd\u4f5c\u3067\u3059\u3002\u00a0\u21a9\n\n\n\n# <a class='fa fa-plug' /> \u306f\u3058\u3081\u306b\n\u7d0430\u5e74\u524d\u306b\u5927\u5b66\u3067\u7fd2\u3063\u305f\u3001[\u5168\u57df\u6728](https://ja.wikipedia.org/wiki/%E5%85%A8%E5%9F%9F%E6%9C%A8)\u306e\u5217\u6319\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092Python\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u306e\u3067\u3001\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u5168\u57df\u6728\u3068\u306f\u3001\u5143\u306e\u30b0\u30e9\u30d5\u306e\u5168\u3066\u306e\u70b9\u3092\u542b\u3080\u6728\u306e\u3053\u3068\u3067\u3059\u3002\n\n# <a class='fa fa-plug' /> \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n- \u30b0\u30e9\u30d5\u306e\u5f0f\u8868\u73fe\u3092\u6c42\u3081\u3066\u3001\u5f0f\u8868\u73fe\u3092\u5c55\u958b\u3057\u3066\u5217\u6319\u3057\u307e\u3059\u3002\n- \u4f8b\u3048\u3070\u3001\u4e09\u89d2\u5f62\u306e\u30b0\u30e9\u30d5\u3067\u5404\u8fba\u3092\u305d\u308c\u305e\u308ca,b,c\u3068\u3059\u308b\u3068\u3001\u5f0f\u8868\u73fe\u306f**\u7d44**(abc)\u3068\u306a\u308a\u3001\u3053\u308c\u3092\u5c55\u958b\u3059\u308b\u3068ab/ac/bc\u3068\u306a\u308a\u307e\u3059\u3002\n- \u30b0\u30e9\u30d5\u306e\u5f0f\u8868\u73fe\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n    - \u8fba\u306e\u6700\u521d\u306e\u5f0f\u8868\u73fe\u3068\u3057\u3066\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c81\u6587\u5b57\u3092\u6301\u305f\u305b\u307e\u3059\u3002\n    - \u30b0\u30e9\u30d5\u306f\u3001\u5f0f\u8868\u73fe\u3092\u7dad\u6301\u3057\u306a\u304c\u3089\u8fba\u307e\u305f\u306f\u8fba\u3068\u70b9\u3092\u524a\u9664\u3067\u304d\u307e\u3059\u3002\n    - \u30b0\u30e9\u30d5\u304c1\u70b9\u306b\u306a\u3063\u305f\u3068\u304d\u306b\u5f0f\u8868\u73fe\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\n- \u30b0\u30e9\u30d5G\u306e\u5f0f\u8868\u73fe\uff08Expr(G))\u306f\u3001\u4efb\u610f\u306e1\u3064\u306e\u8fbaE\u3092\u9078\u3093\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u5f62\u3067\u304d\u307e\u3059\u3002(\u6a19\u6e96\u30eb\u30fc\u30eb)\n    - Expr(G) \uff1d **\u548c**(**\u7a4d**(**\u7d44**(Expr(E)), Expr(G\u304b\u3089E\u3092\u524a\u9664)), **\u7a4d**(Expr(E), Expr(G\u304b\u3089E\u3092\u7e2e\u7d04[^1])))\n\n[^1]: \u8fba\u3092\u7e2e\u7d04\u3059\u308b\u3068\u306f\u3001\u305d\u306e\u8fba\u3092\u9577\u30550\u306b\u3057\u3066\u3001\u4e21\u7aef\u306e\u70b9\u30921\u3064\u306b\u5909\u3048\u308b\u64cd\u4f5c\u3067\u3059\u3002\n\n\u5f0f\u8868\u73fe\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002\n\n- **\u548c**(A, B): A\u306e\u8981\u7d20\u3068B\u306e\u8981\u7d20\u306e\u548c\u96c6\u5408\u3067\u3059\u3002\n- **\u7a4d**(A, B): A\u306e\u8981\u7d20\u3068B\u306e\u8981\u7d20\u306e\u7a4d\u96c6\u5408(\u7d44\u5408\u305b\u3066\u6587\u5b57\u3092\u4e26\u3079\u305f\u3082\u306e)\u3067\u3059\u3002\n- **\u7d44**(A): A\u306e\u8981\u7d20\u3054\u3068\u306b\u30011\u6587\u5b57\u3065\u3064\u6d88\u53bb\u3057\u3066\u5c55\u958b\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001**\u7d44**(abc)\u306f\u3001ab\u3068ac\u3068bc\u306e3\u3064\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\n\n\u5148\u307b\u3069\u306e\u6a19\u6e96\u30eb\u30fc\u30eb\u3060\u3051\u3067\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u8a08\u7b97\u91cf\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u3001\u7279\u5b9a\u306e\u30b1\u30fc\u30b9\u306e\u30eb\u30fc\u30eb\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002(\u6a19\u6e96\u30eb\u30fc\u30eb\u304b\u3089\u5c0e\u304b\u308c\u307e\u3059)\n\n- \u8fbaE\u304c\u81ea\u5df1\u30eb\u30fc\u30d7\u306e\u5834\u5408: Expr(G) = **\u7a4d**(**\u7d44**(Expr(E)), Expr(G\u304b\u3089E\u3092\u524a\u9664))\n- \u8fbaE\u306e\u7247\u65b9\u306e\u7aef\u70b9\u306e\u6b21\u6570(\u63a5\u7d9a\u3059\u308b\u8fba\u306e\u6570)=1\u306e\u5834\u5408: Expr(G) = **\u7a4d**(Expr(E), Expr(G\u304b\u3089E\u3092\u7e2e\u7d04))\n- \u8fbaE\u3068\u8fbaF\u304c\u70b9V\u3067\u63a5\u7d9a\u3057\u3066\u304a\u308a\u3001\u70b9V\u306e\u6b21\u6570=2\u306e\u5834\u5408: Expr(E) = **\u7a4d**(Expr(E), Expr(F))\u3068\u3057\u3066\u3001\u8fbaF\u3092\u7e2e\u7d04\u3057\u305f\u5f8c\u306e\u30b0\u30e9\u30d5\u306b\u3064\u3044\u3066\u6c42\u3081\u307e\u3059\u3002\n\n# <a class='fa fa-plug' /> Python\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\n\n\u30af\u30e9\u30b9\u5b9a\u7fa9\u3092\u3057\u307e\u3059\u3002\n\n```py3:python3\nfrom itertools import combinations, product\nfrom collections import namedtuple\nUnion = namedtuple('Union', 'l r') # \u548c\nProdu = namedtuple('Produ', 'l r') # \u7a4d\nCombi = namedtuple('Combi', 'e') # \u7d44\nclass Edge:\n    def __init__(self, u, v, e):\n        self.u = u\n        self.v = v\n        self.e = e\n    def __repr__(self):\n        return '<%s %s %s>'%(self.u, self.v, self.e)\nclass Graph:\n    def __init__(self, num_nodes, edges):\n        self.nodes = [[] for _ in range(num_nodes)]\n        self.edges = []\n        for i, (u, v) in enumerate(edges):\n            self.edges.append(Edge(u, v, chr(97 + i)))\n            self.nodes[u].append(i)\n            self.nodes[v].append(i)\n    def __repr__(self):\n        return str(self.edges)\n    def spanning_tree(self):\n        res = Graph._reduct(self.nodes.copy(), self.edges.copy())\n        return sorted(Graph._expand(res))\n    @staticmethod\n    def _reduct(nodes, edges):\n        if not edges:\n            return '' if len(nodes) == 1 else None\n        for i, e in enumerate(edges): # \u81ea\u5df1\u30eb\u30fc\u30d7\n            if e.u == e.v:\n                Graph._erase(nodes, edges, i)\n                return Produ(l=Combi(e=e.e), r=Graph._reduct(nodes, edges))\n        for con in nodes: # \u6b21\u6570=1\n            if len(con) == 1:\n                e = edges[con[0]]\n                Graph._erase(nodes, edges, con[0])\n                return Produ(l=e.e, r=Graph._reduct(nodes, edges))\n        for con in nodes: # \u6b21\u6570=2\n            if len(con) == 2:\n                e = edges[con[0]]\n                edges[con[0]] = Edge(e.u, e.v, Produ(l=edges[con[0]].e,\n                                                     r=edges[con[1]].e))\n                Graph._shrink(nodes, edges, con[1])\n                return Graph._reduct(nodes, edges)\n        e = edges[0]\n        nodes2, edges2 = nodes.copy(), edges.copy()\n        Graph._erase(nodes, edges, 0)\n        Graph._shrink(nodes2, edges2, 0)\n        return Union(l=Produ(l=Combi(e=e.e), r=Graph._reduct(nodes, edges)),\n                     r=Produ(l=e.e, r=Graph._reduct(nodes2, edges2)))\n    @staticmethod\n    def _erase(nodes, edges, k):\n        for a, con in enumerate(nodes):\n            nodes[a] = [b if b < k else b-1 for b in con if b != k]\n        del edges[k]\n    @staticmethod\n    def _shrink(nodes, edges, k):\n        e = edges[k]\n        dn = max(e.u, e.v)\n        sn = e.u+e.v-dn\n        nodes[sn] = nodes[sn] + nodes[dn]\n        for a, con in enumerate(nodes):\n            nodes[a] = [b if b < k else b-1 for b in con if b != k]\n        for a, ed in enumerate(edges):\n            u = sn if ed.u == dn else ed.u if ed.u < dn else ed.u-1\n            v = sn if ed.v == dn else ed.v if ed.v < dn else ed.v-1\n            edges[a] = Edge(u, v, ed.e)\n        del edges[k]\n        del nodes[dn]\n    @staticmethod\n    def _expand(ex):\n        if ex is None:\n            return set()\n        elif isinstance(ex, str):\n            return set(ex) if ex else {''}\n        elif isinstance(ex, Combi):\n            exe = Graph._expand(ex.e)\n            return set.union(*(set(''.join(s) for s in\n                combinations(e, len(e)-1)) for e in exe))\n        exl = Graph._expand(ex.l)\n        exr = Graph._expand(ex.r)\n        if isinstance(ex, Union):\n            return exl.union(exr)\n        return {''.join(sorted((i+j))) for i, j in product(exl, exr)}\n```\n\n\u4e09\u89d2\u30b0\u30e9\u30d5\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3:python3\ng = Graph(3, [(0,1), (1,2), (2,0)])\nprint(g.spanning_tree())\n>>>\n['ab', 'ac', 'bc']\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/93227348-e886-e66d-9b39-196e4002c56a.png)\n\n\n4\u70b9\u306e\u5b8c\u5168\u30b0\u30e9\u30d5\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3:python3\ng = Graph(4, [(0,1), (1,2), (2,3), (3,0), (0,2), (1,3)])\nprint(g.spanning_tree())\n>>>\n['abc', 'abd', 'abf', 'acd', 'ace', 'acf', 'ade', 'aef',\n 'bcd', 'bce', 'bde', 'bdf', 'bef', 'cdf', 'cef', 'def']\n```\n\n\u3061\u306a\u307f\u306b\u3001\u3053\u306ePython\u306f85\u884c\u3067\u3059\u304c\u3001C\u3067\u66f8\u304f\u3068500\u884c\u3067\u3001C#\u3067\u66f8\u304f\u3068330\u884c\u307b\u3069\u3067\u3057\u305f\u3002\n\n\u4ee5\u4e0a\n"}