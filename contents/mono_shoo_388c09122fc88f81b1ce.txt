{"context": " More than 1 year has passed since last update.\u30bf\u30a4\u30c8\u30eb\u30de\u30de\u3067\u3059\u3002\n\u904e\u53bb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u767a\u6398\u3057\u305f\u306e\u3067\u7d39\u4ecb\u3002\n\u30d9\u30fc\u30b9\u306fdeimos\u306eliblzma\n\u51fa\u529bRange\u30d9\u30fc\u30b9\u306b\u30e9\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\npragma(lib, \"lzma\");\npragma(lib, \"liblzma\");\n\nimport deimos.lzma;\nimport std.array, std.exception;\n\n/*******************************************************************************\n * \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n */\nstruct LzmaStreamEncoder\n{\nprivate:\n    lzma_stream _strm = lzma_stream.init; /* alloc and init lzma_stream struct */\n    Appender!(ubyte[]) _app;\n\npublic:\n    /***************************************************************************\n     * \u8a2d\u5b9a\n     */\n    void reset(uint preset = 6 | LZMA_PRESET_EXTREME, lzma_check check = lzma_check.LZMA_CHECK_CRC64)\n    {\n        if (_strm != lzma_stream.init)\n        {\n            lzma_end(&_strm);\n            _strm = lzma_stream.init;\n        }\n        _app.shrinkTo(0);\n        enforce(lzma_easy_encoder(&_strm, preset, check) == lzma_ret.LZMA_OK);\n    }\n\n    ~this()\n    {\n        lzma_end(&_strm);\n    }\n\n    /***************************************************************************\n     * \u30c7\u30fc\u30bf\u8ffd\u52a0\n     */\n    void put(in ubyte[] buf)\n    {\n        if (_strm is lzma_stream.init)\n            reset();\n        ubyte[1024] outbuf = void;\n        _strm.next_in   = buf.ptr;\n        _strm.avail_in  = buf.length;\n\n        while (1)\n        {\n            _strm.next_out  = outbuf.ptr;\n            _strm.avail_out = outbuf.length;\n            /* compress data */\n            auto ret = lzma_code(&_strm, lzma_action.LZMA_RUN);\n            enforce((ret == lzma_ret.LZMA_OK) || (ret == lzma_ret.LZMA_STREAM_END));\n\n            auto len = outbuf.length - _strm.avail_out;\n            if (len == 0)\n            {\n                break;\n            }\n            _app.put(outbuf[0..len]);\n            if ( _strm.avail_out != 0 )\n            {\n                break;\n            }\n        }\n    }\n\n    /***************************************************************************\n     * \u5727\u7e2e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n     */\n    ubyte[] complete()\n    {\n        ubyte[1024] outbuf = void;\n        _strm.next_in   = null;\n        _strm.avail_in  = 0;\n        while (1)\n        {\n            _strm.next_out  = outbuf.ptr;\n            _strm.avail_out = outbuf.length;\n            /* compress data */\n            auto ret = lzma_code(&_strm, lzma_action.LZMA_FINISH);\n            enforce((ret == lzma_ret.LZMA_OK) || (ret == lzma_ret.LZMA_STREAM_END));\n\n            auto len = outbuf.length - _strm.avail_out;\n            if (len == 0)\n            {\n                break;\n            }\n            _app.put(outbuf[0..len]);\n            if ( _strm.avail_out != 0 )\n            {\n                break;\n            }\n        }\n        return _app.data();\n    }\n}\n\n\n/*******************************************************************************\n * \u30c7\u30b3\u30fc\u30c0\u30fc\n */\nstruct LzmaStreamDecoder\n{\nprivate:\n    lzma_stream _strm = lzma_stream.init; /* alloc and init lzma_stream struct */\n    Appender!(ubyte[]) _app;\n\npublic:\n    /***************************************************************************\n     * \u8a2d\u5b9a\n     */\n    void reset(ulong memlimit = lzma_easy_decoder_memusage(9))\n    {\n        if (_strm != lzma_stream.init)\n        {\n            lzma_end(&_strm);\n            _strm = lzma_stream.init;\n        }\n        _app.clear();\n        enforce(lzma_stream_decoder(&_strm, memlimit, 0) == lzma_ret.LZMA_OK);\n    }\n\n    ~this()\n    {\n        lzma_end(&_strm);\n    }\n\n\n    /***************************************************************************\n     * \u5727\u7e2e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\n     */\n    void put(in ubyte[] buf)\n    {\n        if (_strm is lzma_stream.init)\n            reset();\n        ubyte[1024] outbuf = void;\n        _strm.next_in   = buf.ptr;\n        _strm.avail_in  = buf.length;\n        while (1)\n        {\n            _strm.next_out  = outbuf.ptr;\n            _strm.avail_out = outbuf.length;\n            /* compress data */\n            auto ret = lzma_code(&_strm, lzma_action.LZMA_RUN);\n            enforce((ret == lzma_ret.LZMA_OK) || (ret == lzma_ret.LZMA_STREAM_END));\n\n            auto len = outbuf.length - _strm.avail_out;\n            if (len == 0)\n            {\n                break;\n            }\n            _app.put(outbuf[0..len]);\n            if ( _strm.avail_out != 0 )\n            {\n                break;\n            }\n        }\n    }\n\n\n    /***************************************************************************\n     * \u9032\u5c55\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n     */\n    @property ubyte[] get()\n    {\n        scope (exit) _app.clear();\n        return _app.data();\n    }\n}\n\n\nunittest\n{\n    LzmaStreamEncoder enc;\n    LzmaStreamDecoder dec;\n    ubyte[1024] buf;\n\n    // \u5358\u7d14\u306a\u30c7\u30fc\u30bf\u3067\u5727\u7e2e\u306e\u30c6\u30b9\u30c8\n    buf[] = 1;\n    enc.put(buf);\n    buf[] = 2;\n    enc.put(buf);\n    buf[] = 3;\n    enc.put(buf);\n    buf[] = 4;\n    enc.put(buf);\n    auto compressed = enc.complete();\n    // \u5727\u7e2e\u3055\u308c\u3066\u308b\n    assert(compressed.length < 1024 * 4);\n\n    // \u4f38\u5c55\u306e\u30c6\u30b9\u30c8\n    dec.put(compressed);\n    auto decompressed = dec.get();\n    assert(decompressed.length == 1024 * 4);\n\n    import std.algorithm, std.range;\n    assert(equal(decompressed[1024*0 .. 1024*1], repeat(1, 1024)));\n    assert(equal(decompressed[1024*1 .. 1024*2], repeat(2, 1024)));\n    assert(equal(decompressed[1024*2 .. 1024*3], repeat(3, 1024)));\n    assert(equal(decompressed[1024*3 .. 1024*4], repeat(4, 1024)));\n}\n\n\u7279\u5225\u8aac\u660e\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u306d\u2026\u2026\ndub\u4f7f\u3048\u3070\u5148\u982d\u306epragma(lib, ...)\u306f\u8981\u3089\u306a\u3044\u304b\u3082\uff1f\n\u30bf\u30a4\u30c8\u30eb\u30de\u30de\u3067\u3059\u3002\n\u904e\u53bb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u304b\u3089\u767a\u6398\u3057\u305f\u306e\u3067\u7d39\u4ecb\u3002\n\n\u30d9\u30fc\u30b9\u306fdeimos\u306e[liblzma](https://github.com/D-Programming-Deimos/liblzma)\n\n\u51fa\u529bRange\u30d9\u30fc\u30b9\u306b\u30e9\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3057\u305f\u3002\n\n```d\npragma(lib, \"lzma\");\npragma(lib, \"liblzma\");\n\nimport deimos.lzma;\nimport std.array, std.exception;\n\n/*******************************************************************************\n * \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n */\nstruct LzmaStreamEncoder\n{\nprivate:\n\tlzma_stream _strm = lzma_stream.init; /* alloc and init lzma_stream struct */\n\tAppender!(ubyte[]) _app;\n\t\npublic:\n\t/***************************************************************************\n\t * \u8a2d\u5b9a\n\t */\n\tvoid reset(uint preset = 6 | LZMA_PRESET_EXTREME, lzma_check check = lzma_check.LZMA_CHECK_CRC64)\n\t{\n\t\tif (_strm != lzma_stream.init)\n\t\t{\n\t\t\tlzma_end(&_strm);\n\t\t\t_strm = lzma_stream.init;\n\t\t}\n\t\t_app.shrinkTo(0);\n\t\tenforce(lzma_easy_encoder(&_strm, preset, check) == lzma_ret.LZMA_OK);\n\t}\n\t\n\t~this()\n\t{\n\t\tlzma_end(&_strm);\n\t}\n\t\n\t/***************************************************************************\n\t * \u30c7\u30fc\u30bf\u8ffd\u52a0\n\t */\n\tvoid put(in ubyte[] buf)\n\t{\n\t\tif (_strm is lzma_stream.init)\n\t\t\treset();\n\t\tubyte[1024] outbuf = void;\n\t\t_strm.next_in   = buf.ptr;\n\t\t_strm.avail_in  = buf.length;\n\t\t\n\t\twhile (1)\n\t\t{\n\t\t\t_strm.next_out  = outbuf.ptr;\n\t\t\t_strm.avail_out = outbuf.length;\n\t\t\t/* compress data */\n\t\t\tauto ret = lzma_code(&_strm, lzma_action.LZMA_RUN);\n\t\t\tenforce((ret == lzma_ret.LZMA_OK) || (ret == lzma_ret.LZMA_STREAM_END));\n\t\t\t\n\t\t\tauto len = outbuf.length - _strm.avail_out;\n\t\t\tif (len == 0)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_app.put(outbuf[0..len]);\n\t\t\tif ( _strm.avail_out != 0 )\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/***************************************************************************\n\t * \u5727\u7e2e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\t */\n\tubyte[] complete()\n\t{\n\t\tubyte[1024] outbuf = void;\n\t\t_strm.next_in   = null;\n\t\t_strm.avail_in  = 0;\n\t\twhile (1)\n\t\t{\n\t\t\t_strm.next_out  = outbuf.ptr;\n\t\t\t_strm.avail_out = outbuf.length;\n\t\t\t/* compress data */\n\t\t\tauto ret = lzma_code(&_strm, lzma_action.LZMA_FINISH);\n\t\t\tenforce((ret == lzma_ret.LZMA_OK) || (ret == lzma_ret.LZMA_STREAM_END));\n\t\t\t\n\t\t\tauto len = outbuf.length - _strm.avail_out;\n\t\t\tif (len == 0)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_app.put(outbuf[0..len]);\n\t\t\tif ( _strm.avail_out != 0 )\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn _app.data();\n\t}\n}\n\n\n/*******************************************************************************\n * \u30c7\u30b3\u30fc\u30c0\u30fc\n */\nstruct LzmaStreamDecoder\n{\nprivate:\n\tlzma_stream _strm = lzma_stream.init; /* alloc and init lzma_stream struct */\n\tAppender!(ubyte[]) _app;\n\t\npublic:\n\t/***************************************************************************\n\t * \u8a2d\u5b9a\n\t */\n\tvoid reset(ulong memlimit = lzma_easy_decoder_memusage(9))\n\t{\n\t\tif (_strm != lzma_stream.init)\n\t\t{\n\t\t\tlzma_end(&_strm);\n\t\t\t_strm = lzma_stream.init;\n\t\t}\n\t\t_app.clear();\n\t\tenforce(lzma_stream_decoder(&_strm, memlimit, 0) == lzma_ret.LZMA_OK);\n\t}\n\t\n\t~this()\n\t{\n\t\tlzma_end(&_strm);\n\t}\n\t\n\t\n\t/***************************************************************************\n\t * \u5727\u7e2e\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\n\t */\n\tvoid put(in ubyte[] buf)\n\t{\n\t\tif (_strm is lzma_stream.init)\n\t\t\treset();\n\t\tubyte[1024] outbuf = void;\n\t\t_strm.next_in   = buf.ptr;\n\t\t_strm.avail_in  = buf.length;\n\t\twhile (1)\n\t\t{\n\t\t\t_strm.next_out  = outbuf.ptr;\n\t\t\t_strm.avail_out = outbuf.length;\n\t\t\t/* compress data */\n\t\t\tauto ret = lzma_code(&_strm, lzma_action.LZMA_RUN);\n\t\t\tenforce((ret == lzma_ret.LZMA_OK) || (ret == lzma_ret.LZMA_STREAM_END));\n\t\t\t\n\t\t\tauto len = outbuf.length - _strm.avail_out;\n\t\t\tif (len == 0)\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t_app.put(outbuf[0..len]);\n\t\t\tif ( _strm.avail_out != 0 )\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t\n\t/***************************************************************************\n\t * \u9032\u5c55\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n\t */\n\t@property ubyte[] get()\n\t{\n\t\tscope (exit) _app.clear();\n\t\treturn _app.data();\n\t}\n}\n\n\nunittest\n{\n\tLzmaStreamEncoder enc;\n\tLzmaStreamDecoder dec;\n\tubyte[1024] buf;\n\t\n\t// \u5358\u7d14\u306a\u30c7\u30fc\u30bf\u3067\u5727\u7e2e\u306e\u30c6\u30b9\u30c8\n\tbuf[] = 1;\n\tenc.put(buf);\n\tbuf[] = 2;\n\tenc.put(buf);\n\tbuf[] = 3;\n\tenc.put(buf);\n\tbuf[] = 4;\n\tenc.put(buf);\n\tauto compressed = enc.complete();\n\t// \u5727\u7e2e\u3055\u308c\u3066\u308b\n\tassert(compressed.length < 1024 * 4);\n\t\n\t// \u4f38\u5c55\u306e\u30c6\u30b9\u30c8\n\tdec.put(compressed);\n\tauto decompressed = dec.get();\n\tassert(decompressed.length == 1024 * 4);\n\t\n\timport std.algorithm, std.range;\n\tassert(equal(decompressed[1024*0 .. 1024*1], repeat(1, 1024)));\n\tassert(equal(decompressed[1024*1 .. 1024*2], repeat(2, 1024)));\n\tassert(equal(decompressed[1024*2 .. 1024*3], repeat(3, 1024)));\n\tassert(equal(decompressed[1024*3 .. 1024*4], repeat(4, 1024)));\n}\n```\n\n\u7279\u5225\u8aac\u660e\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u306d\u2026\u2026\ndub\u4f7f\u3048\u3070\u5148\u982d\u306epragma(lib, ...)\u306f\u8981\u3089\u306a\u3044\u304b\u3082\uff1f\n", "tags": ["dlang"]}