{"context": "\u3042\u3051\u307e\u3057\u3066\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u72ac\u30d0\u30ab\u306e\u85e4\u5411(\u3075\u3058\u3055\u304d)\u3067\u3059\u3002\n\u53bb\u5e74\u672b\u306bAmazon Rekognition\u3068\u3044\u3046\u753b\u50cf\u8a8d\u8b58\u3067\u304d\u308b\u30b5\u30fc\u30d3\u30b9\u304c\u30ea\u30ea\u30fc\u30b9\u3057\u3066\u3044\u305f\u3068\u805e\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u3055\u3063\u305d\u304f\u904a\u3073\u307e\u3057\u305f\u3002\n\n\u4f5c\u6210\u306e\u52d5\u6a5f\n\u4eba\u611f\u30bb\u30f3\u30b5\uff0b\u30e9\u30ba\u30d1\u30a4\u3092\u4f7f\u3063\u305f\u76e3\u8996\u30ab\u30e1\u30e9\u306f\u3001\u4ee5\u524d\u304b\u3089\u4f5c\u3089\u308c\u3066\u307e\u3059\u304c\u3001\u7d50\u69cb\u3061\u3087\u3063\u3068\u3057\u305f\u52d5\u304d\u3067\u30b4\u30df\u30c7\u30fc\u30bf\u307e\u3067\u64ae\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u72ac\u3084\u5bb6\u65cf\u306e\u30e1\u30f3\u30d0\u30fc\u306a\u3069\u3001\u9650\u5b9a\u3055\u308c\u305f\u753b\u50cf\u3060\u3051\u9078\u5225\u3057\u3066\u6b8b\u3057\u3066\u3001\u3042\u3068\u306f\u6d88\u53bb\u3067\u304d\u305f\u3089\u3044\u3044\u306a\u3001\u3068\u601d\u3063\u305f\u6b21\u7b2c\u3067\u3059\u3002\n\n\u6e96\u5099\n\n\u4eba\u611f\u30bb\u30f3\u30b5 & Raspberry Pi\u3067\u76e3\u8996\u30ab\u30e1\u30e9\u3092\u4f5c\u308b\n\n\u6750\u6599\n\n\nRaspberry pi3 \n\n\u30e1\u30b9\u30e1\u30b9\u30b8\u30e3\u30f3\u30d1\u30b1\u30fc\u30d6\u30eb3\u3064\n\nWeb\u30ab\u30e1\u30e9(USB)\u3000(Logitech HD Webcam C525)\n\n\u4eba(\u72ac)\u611f\u30bb\u30f3\u30b5\u30fc\u3000(SEEED-101020060 PIR\u30e2\u30fc\u30b7\u30e7\u30f3\u30bb\u30f3\u30b5)\n\n\u30e9\u30ba\u30d1\u30a4\u3068\u4eba\u611f\u30bb\u30f3\u30b5\u30fc\u306e\u63a5\u7d9a\u65b9\u6cd5\u3001\u307e\u305f\u30bb\u30f3\u30b5\u30fc\u306e\u52d5\u4f5c\u8abf\u6574\u7b49\u306fcigalecigales\u3055\u3093\u306e\u3001[Raspberry Pi] \u590f\u3060\uff01\u4eba\u611f\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u3063\u3066\u8749\u3092\u9cf4\u304b\u305b\u3088\u3046\n\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\u30e9\u30ba\u30d1\u30a4\u3068USB\u306eWeb\u30ab\u30e1\u30e9\u306e\u9023\u643a\u306ffswebcam\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u306f\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\nUSING A STANDARD USB WEBCAM\n\n\u3053\u308c\u3092Python\u304b\u3089\u547c\u3073\u51fa\u3059\u305f\u3081\u306b\u3001os.system\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nRekogDogCamera.py\nimport time\nfrom time import gmtime,strftime\nimport RPi.GPIO as GPIO\n\nINTERVAL = 3\nSLEEPTIME = 5\nSENSOR_PIN = 25\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(SENSOR_PIN, GPIO.IN)\n\nst = time.time()-INTERVAL\nwhile True:\n        if( GPIO.input(SENSOR_PIN) == GPIO.HIGH ) and (st + INTERVAL < time.time() ):\n                st = time.time()\n                strf = strftime(\"%Y%m%d-%H:%M:%S\")\n                strfile = strf + '.jpg'\n                print(\"movement detected \" + strf)\n                os.system('fswebcam --no-banner /home/pi/myphoto/'+ strfile)\n\n        time.sleep(SLEEPTIME)\nGPIO.cleanup()\n\n\n\n\u64ae\u5f71\u3057\u305f\u753b\u50cf\u3092S3\u306b\u3042\u3052\u308b\nBoto3\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u901a\u308a\u306b~/.aws/credentials\u306a\u3069\u3092\u8a2d\u5b9a\u3057\u305f\u5f8c\u3001\u4e0a\u8a18\u30b3\u30fc\u30c9\u306e\u30eb\u30fc\u30d7\u5185\u306bS3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3042\u305f\u308a\u3092\u8db3\u3057\u307e\u3059\u3002\n\nRekogDogCamera.py\nimport boto3\nbucket_name = 'mybucket'\ns3_client = boto3.client('s3')\ns3_client.upload_file('/home/pi/myphoto/' + strfile ,bucket_name, strfile)\n\n\n\u3053\u308c\u3067\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n\u3055\u3042\u65b0\u3057\u3044\u3082\u306e\u3067\u904a\u3093\u3067\u307f\u3088\u3046\uff01\n\nRekognition\u4f7f\u3063\u3066\u3046\u3061\u306e\u5b50\u306e\u5199\u771f\u3060\u3051\u6b8b\u3059\nRekognition\u306e\u30c7\u30e2\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4eca\u56de\u8208\u5473\u3042\u308b\u306e\u306f\u3001Object and scene detection\u3067\u3059\u3002\n\nDownload SDK\u304b\u3089\u305f\u3069\u3063\u3066\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u307f\u307e\u3059\u3002\nAmazon Rekognition\u3000Developer Guide\u3000PDF 28\u30da\u30fc\u30b8\u76ee\u304f\u3089\u3044\u306b\u6b32\u3057\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u4e00\u5ea6\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u8a66\u3057\u307e\u3059\u3002\n\u8ffd\u8a18\uff1aHTML\u7248\u306f\u3053\u3061\u3089\u306b\u3042\u308a\u307e\u3057\u305f\u3002\u2192Exercise 1: Detect Labels in an Image (API)\n\n$ aws rekognition detect-labels --image '{\"S3Object\":{\"Bucket\":\"mybucket\", \"Name\":\"mydog.jpg\"}}' --region us-east-1 --profile default  \n\n\u5148\u307b\u3069Demo\u3067\u4f7f\u3063\u305f\u5199\u771f\u306f\u3053\u3093\u306a\u611f\u3058\u306e\u8fd4\u7b54\u304c\u8fd4\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\nresult\n {\n    \"Labels\": [\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Animal\"\n        },\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Canine\"\n        },\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Dog\"\n        },\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Husky\"\n        },\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Mammal\"\n        },\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Pet\"\n        },\n        {\n            \"Confidence\": 95.74263763427734,\n            \"Name\": \"Eskimo Dog\"\n        },\n\n\n\n(\u203b\u4f59\u8ac7\uff1a\u30a8\u30b9\u30ad\u30e2\u30fc\u72ac\u3067\u3082\u30cf\u30b9\u30ad\u30fc\u3067\u3082\u306a\u304f\u3001\u3046\u3061\u306e\u5b50\u306f\u7d00\u5dde\u72ac\u3067\u3059...)\n\u5148\u307b\u3069\u306ePython\u30b3\u30fc\u30c9\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u3092\u8a66\u3057\u307e\u3059\u3002\u304a\u624b\u8efd\u306bos.system\u3092\u4f7f\u3046\u306e\u3067\u30af\u30aa\u30fc\u30c8\u3092\u304c\u3093\u3070\u3063\u3066\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u307e\u3059\u3002\n\nRekogDogCamera.py\nresult = os.system(\"aws rekognition detect-labels --image \\'{\\\"S3Object\\\":{\\\"Bucket\\\":\\\"\"+bucket_name+\"\\\", \\\"Name\\\":\\\"\"+ strfile +\"\\\"}}\\' --region us-east-1 --profile default > temp.json\")\n\n\n\n\u5e30\u3063\u3066\u304f\u308b\u8fd4\u7b54\u3092\u30eb\u30fc\u30d7\u306b\u304b\u3051\u3066\u3001\u3082\u3057\"Name\" \u306b \"Canine\" \u304c\u3042\u3063\u3066\u3001\u3057\u304b\u3082\"Confidence\" \u304c55\u4ee5\u4e0a\u306a\u3089\u3001\"Canine found\"\u3068\u3001Confidence\u3092\u5831\u544a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u3002\n\nRekogDogCamera.py\nwith open('temp.json') as json_data:\n    data = json.load(json_data)\n    for d in data[\"Labels\"]:\n        if (d[\"Name\"] == \"Canine\" and d[\"Confidence\"] > 55.0):\n            print (\"Canine found: \" + str(d[\"Confidence\"]))\n        break\n\n\n\n(\u203b\u6700\u521dConfidence\u309295\u304f\u3089\u3044\u306b\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u6697\u3081\u306e\u5ba4\u5185\u306e\u5199\u771f\u3060\u306860\u4ee5\u4e0a\u3042\u307e\u308a\u884c\u304b\u306a\u3044\u306e\u3067\u300155\u306b\u3057\u307e\u3057\u305f)\n\u305d\u3057\u3066\u3001\u72ac\u304c\u691c\u77e5\u3055\u308c\u306a\u304b\u3063\u305f\u5199\u771f\u306f\u3001S3\u304b\u3089\u6392\u9664\u3057\u307e\u3059\u3002\n\nRekogDogCamera.py\n        else:\n            s3_client.delete_object(Bucket=bucket_name, Key=strfile) \n\n\n\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n$ python3 RekogDogCamera.py\n--- Opening /dev/video0...\nTrying source module v4l2...\n/dev/video0 opened.\nNo input was specified, using the first.\nAdjusting resolution from 384x288 to 352x288.\n--- Capturing frame...\nCaptured frame in 0.00 seconds.\n--- Processing captured image...\nDisabling banner.\nWriting JPEG image to '/home/pi/myphoto/20170103-00:08:15.jpg'.\nCanine found: 71.327880859375\n\n\u64ae\u308c\u307e\u3057\u305f\uff01\n\n\u6700\u7d42\u7684\u306b\u3053\u3093\u306a\u611f\u3058\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\nRekoDogCamera.py\nimport time\nfrom time import gmtime,strftime\nimport RPi.GPIO as GPIO\nimport json\nimport os\nimport boto3\n\nINTERVAL = 3\nSLEEPTIME = 5\nSENSOR_PIN = 25\n#\u4f7f\u7528\u3059\u308b\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u3042\u308b\u30d0\u30b1\u30c3\u30c8\u3092\u6307\u5b9a\nbucket_name = 'mybucket'\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(SENSOR_PIN, GPIO.IN)\n\nst = time.time()-INTERVAL\ns3_client = boto3.client('s3')\nwhile True:\n         #\u72ac\u611f\u30bb\u30f3\u30b5\u30fc\u304b\u3089\u30c7\u30fc\u30bf\u306e\u6d41\u5165\u304c\u3042\u308a\u3001\u306a\u304a\u304b\u3064\u6642\u9593\u9593\u9694\u304c\u898f\u5b9a\u4ee5\u4e0a\u306a\u3089\u2026\n        if( GPIO.input(SENSOR_PIN) == GPIO.HIGH ) and (st + INTERVAL < time.time() ):\n                st = time.time()\n                strf = strftime(\"%Y%m%d-%H:%M:%S\")\n                strfile = strf + '.jpg'\n                #\u5199\u771f\u3092\u64ae\u308a\u307e\u3059\n                os.system('fswebcam --no-banner /home/pi/myphoto/'+ strfile)\n                #\u64ae\u3063\u305f\u5199\u771f\u3092S3\u306e\u30d0\u30b1\u30c3\u30c8\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\n                s3_client.upload_file('/home/pi/myphoto/' + strfile ,bucket_name, strfile)\n                #Rekognition\u306b\u3001\u5199\u771f\u306e\u4e2d\u306b\u72ac\u304c\u3044\u308b\u304b\u3069\u3046\u304b\u8a0a\u304d\u307e\u3059\u3002\n                result = os.system(\"aws rekognition detect-labels --image \\'{\\\"S3Object\\\":{\\\"Bucket\\\":\\\"\"+bucket_name+\"\\\", \\\"Name\\\":\\\"\"+ strfile +\"\\\"}}\\' --region us-east-1 --profile default > temp.json\")\n                #Rekognition\u304b\u3089\u5e30\u3063\u3066\u304d\u305fJson\u30c7\u30fc\u30bf\u306b\u72ac\u304c\u3044\u305f\u3089\u2026\n                with open('temp.json') as json_data:\n                    data = json.load(json_data)\n                    for d in data[\"Labels\"]:\n                        if (d[\"Name\"] == \"Canine\" and d[\"Confidence\"] > 55.0):\n                                #\u72ac\u304c\u3044\u305f\u3088\uff01\u3068Confident\u3068\u4f75\u305b\u3066\u5831\u544a\u3057\u307e\u3059\n                                print (\"Canine found: \" + str(d[\"Confidence\"]))\n                                break\n                        else:\n\n                                #\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001\u5bb9\u8d66\u306a\u304f\u524a\u9664\u3057\u307e\u3059\u3002\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000s3_client.delete_object(Bucket=bucket_name, Key=strfile)\n\n        time.sleep(SLEEPTIME)\n# Clean Up\nGPIO.cleanup()\nos.system('rm /home/pi/myphoto/* temp.json')\n\n\n\n\u3042\u3051\u307e\u3057\u3066\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\u72ac\u30d0\u30ab\u306e\u85e4\u5411(\u3075\u3058\u3055\u304d)\u3067\u3059\u3002\n\u53bb\u5e74\u672b\u306bAmazon Rekognition\u3068\u3044\u3046\u753b\u50cf\u8a8d\u8b58\u3067\u304d\u308b\u30b5\u30fc\u30d3\u30b9\u304c\u30ea\u30ea\u30fc\u30b9\u3057\u3066\u3044\u305f\u3068\u805e\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u3055\u3063\u305d\u304f\u904a\u3073\u307e\u3057\u305f\u3002\n###### \u4f5c\u6210\u306e\u52d5\u6a5f\n\u4eba\u611f\u30bb\u30f3\u30b5\uff0b\u30e9\u30ba\u30d1\u30a4\u3092\u4f7f\u3063\u305f\u76e3\u8996\u30ab\u30e1\u30e9\u306f\u3001\u4ee5\u524d\u304b\u3089\u4f5c\u3089\u308c\u3066\u307e\u3059\u304c\u3001\u7d50\u69cb\u3061\u3087\u3063\u3068\u3057\u305f\u52d5\u304d\u3067\u30b4\u30df\u30c7\u30fc\u30bf\u307e\u3067\u64ae\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u72ac\u3084\u5bb6\u65cf\u306e\u30e1\u30f3\u30d0\u30fc\u306a\u3069\u3001\u9650\u5b9a\u3055\u308c\u305f\u753b\u50cf\u3060\u3051\u9078\u5225\u3057\u3066\u6b8b\u3057\u3066\u3001\u3042\u3068\u306f\u6d88\u53bb\u3067\u304d\u305f\u3089\u3044\u3044\u306a\u3001\u3068\u601d\u3063\u305f\u6b21\u7b2c\u3067\u3059\u3002\n\n##\u6e96\u5099\n###\u4eba\u611f\u30bb\u30f3\u30b5 & Raspberry Pi\u3067\u76e3\u8996\u30ab\u30e1\u30e9\u3092\u4f5c\u308b\n####\u6750\u6599\n- [ ] Raspberry pi3 \n- [ ] \u30e1\u30b9\u30e1\u30b9\u30b8\u30e3\u30f3\u30d1\u30b1\u30fc\u30d6\u30eb3\u3064\n- [ ] Web\u30ab\u30e1\u30e9(USB)\u3000(Logitech HD Webcam C525)\n- [ ] \u4eba(\u72ac)\u611f\u30bb\u30f3\u30b5\u30fc\u3000(SEEED-101020060 PIR\u30e2\u30fc\u30b7\u30e7\u30f3\u30bb\u30f3\u30b5)\n\n\u30e9\u30ba\u30d1\u30a4\u3068\u4eba\u611f\u30bb\u30f3\u30b5\u30fc\u306e\u63a5\u7d9a\u65b9\u6cd5\u3001\u307e\u305f\u30bb\u30f3\u30b5\u30fc\u306e\u52d5\u4f5c\u8abf\u6574\u7b49\u306f[cigalecigales](http://qiita.com/cigalecigales)\u3055\u3093\u306e\u3001[[*Raspberry Pi*] \u590f\u3060\uff01\u4eba\u611f\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u3063\u3066\u8749\u3092\u9cf4\u304b\u305b\u3088\u3046](http://qiita.com/cigalecigales/items/4cf9c16f24d1de92ec7d)\n\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n![KIMG1860.JPG](https://qiita-image-store.s3.amazonaws.com/0/5848/a361be8c-daf5-a3ac-0595-f0df3a5ebd70.jpeg)\n\n\u30e9\u30ba\u30d1\u30a4\u3068USB\u306eWeb\u30ab\u30e1\u30e9\u306e\u9023\u643a\u306ffswebcam\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u306f\u30aa\u30d5\u30a3\u30b7\u30e3\u30eb\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n- [USING A STANDARD USB WEBCAM]\n(https://www.raspberrypi.org/documentation/usage/webcams/)\n\n\u3053\u308c\u3092Python\u304b\u3089\u547c\u3073\u51fa\u3059\u305f\u3081\u306b\u3001os.system\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```py3:RekogDogCamera.py\nimport time\nfrom time import gmtime,strftime\nimport RPi.GPIO as GPIO\n\nINTERVAL = 3\nSLEEPTIME = 5\nSENSOR_PIN = 25\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(SENSOR_PIN, GPIO.IN)\n\nst = time.time()-INTERVAL\nwhile True:\n        if( GPIO.input(SENSOR_PIN) == GPIO.HIGH ) and (st + INTERVAL < time.time() ):\n                st = time.time()\n                strf = strftime(\"%Y%m%d-%H:%M:%S\")\n                strfile = strf + '.jpg'\n                print(\"movement detected \" + strf)\n                os.system('fswebcam --no-banner /home/pi/myphoto/'+ strfile)\n              \n        time.sleep(SLEEPTIME)\nGPIO.cleanup()\n```\n\n###\u64ae\u5f71\u3057\u305f\u753b\u50cf\u3092S3\u306b\u3042\u3052\u308b\n[Boto3](https://github.com/boto/boto3#quick-start)\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u901a\u308a\u306b~/.aws/credentials\u306a\u3069\u3092\u8a2d\u5b9a\u3057\u305f\u5f8c\u3001\u4e0a\u8a18\u30b3\u30fc\u30c9\u306e\u30eb\u30fc\u30d7\u5185\u306bS3\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u3042\u305f\u308a\u3092\u8db3\u3057\u307e\u3059\u3002\n\n```py3:RekogDogCamera.py\nimport boto3\nbucket_name = 'mybucket'\ns3_client = boto3.client('s3')\ns3_client.upload_file('/home/pi/myphoto/' + strfile ,bucket_name, strfile)\n```\n\n\u3053\u308c\u3067\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n##\u3055\u3042\u65b0\u3057\u3044\u3082\u306e\u3067\u904a\u3093\u3067\u307f\u3088\u3046\uff01\n###Rekognition\u4f7f\u3063\u3066\u3046\u3061\u306e\u5b50\u306e\u5199\u771f\u3060\u3051\u6b8b\u3059\nRekognition\u306e\u30c7\u30e2\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4eca\u56de\u8208\u5473\u3042\u308b\u306e\u306f\u3001Object and scene detection\u3067\u3059\u3002\n![rekognitiondemo.JPG](https://qiita-image-store.s3.amazonaws.com/0/5848/bb01ac28-d711-f466-ba25-dd6e0bcaa5bd.jpeg)\n\n\nDownload SDK\u304b\u3089\u305f\u3069\u3063\u3066\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u307f\u307e\u3059\u3002\n[Amazon Rekognition\u3000Developer Guide](https://aws.amazon.com/documentation/rekognition/)\u3000PDF 28\u30da\u30fc\u30b8\u76ee\u304f\u3089\u3044\u306b\u6b32\u3057\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u4e00\u5ea6\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u8a66\u3057\u307e\u3059\u3002\n\u8ffd\u8a18\uff1aHTML\u7248\u306f\u3053\u3061\u3089\u306b\u3042\u308a\u307e\u3057\u305f\u3002\u2192[Exercise 1: Detect Labels in an Image (API)]\n(http://docs.aws.amazon.com/ja_jp/rekognition/latest/dg/get-started-exercise-detect-labels.html)\n\n> $ aws rekognition detect-labels --image '{\"S3Object\":{\"Bucket\":\"mybucket\", \"Name\":\"mydog.jpg\"}}' --region us-east-1 --profile default  \n\n\u5148\u307b\u3069Demo\u3067\u4f7f\u3063\u305f\u5199\u771f\u306f\u3053\u3093\u306a\u611f\u3058\u306e\u8fd4\u7b54\u304c\u8fd4\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\n```json:result\n {\n    \"Labels\": [\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Animal\"\n        },\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Canine\"\n        },\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Dog\"\n        },\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Husky\"\n        },\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Mammal\"\n        },\n        {\n            \"Confidence\": 98.25569915771484,\n            \"Name\": \"Pet\"\n        },\n        {\n            \"Confidence\": 95.74263763427734,\n            \"Name\": \"Eskimo Dog\"\n        },\n\n```\n\n(\u203b\u4f59\u8ac7\uff1a\u30a8\u30b9\u30ad\u30e2\u30fc\u72ac\u3067\u3082\u30cf\u30b9\u30ad\u30fc\u3067\u3082\u306a\u304f\u3001\u3046\u3061\u306e\u5b50\u306f\u7d00\u5dde\u72ac\u3067\u3059...)\n\n\u5148\u307b\u3069\u306ePython\u30b3\u30fc\u30c9\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u3092\u8a66\u3057\u307e\u3059\u3002\u304a\u624b\u8efd\u306bos.system\u3092\u4f7f\u3046\u306e\u3067\u30af\u30aa\u30fc\u30c8\u3092\u304c\u3093\u3070\u3063\u3066\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u307e\u3059\u3002\n\n```py3:RekogDogCamera.py\nresult = os.system(\"aws rekognition detect-labels --image \\'{\\\"S3Object\\\":{\\\"Bucket\\\":\\\"\"+bucket_name+\"\\\", \\\"Name\\\":\\\"\"+ strfile +\"\\\"}}\\' --region us-east-1 --profile default > temp.json\")\n                \n```\n\n\u5e30\u3063\u3066\u304f\u308b\u8fd4\u7b54\u3092\u30eb\u30fc\u30d7\u306b\u304b\u3051\u3066\u3001\u3082\u3057\"Name\" \u306b \"Canine\" \u304c\u3042\u3063\u3066\u3001\u3057\u304b\u3082\"Confidence\" \u304c55\u4ee5\u4e0a\u306a\u3089\u3001\"Canine found\"\u3068\u3001Confidence\u3092\u5831\u544a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u3002\n\n```py3:RekogDogCamera.py\nwith open('temp.json') as json_data:\n    data = json.load(json_data)\n    for d in data[\"Labels\"]:\n        if (d[\"Name\"] == \"Canine\" and d[\"Confidence\"] > 55.0):\n            print (\"Canine found: \" + str(d[\"Confidence\"]))\n        break\n                     \n```\n(\u203b\u6700\u521dConfidence\u309295\u304f\u3089\u3044\u306b\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u6697\u3081\u306e\u5ba4\u5185\u306e\u5199\u771f\u3060\u306860\u4ee5\u4e0a\u3042\u307e\u308a\u884c\u304b\u306a\u3044\u306e\u3067\u300155\u306b\u3057\u307e\u3057\u305f)\n\n\u305d\u3057\u3066\u3001\u72ac\u304c\u691c\u77e5\u3055\u308c\u306a\u304b\u3063\u305f\u5199\u771f\u306f\u3001S3\u304b\u3089\u6392\u9664\u3057\u307e\u3059\u3002\n\n```py3:RekogDogCamera.py                      \n        else:\n            s3_client.delete_object(Bucket=bucket_name, Key=strfile) \n```\n\n\u5b9f\u884c\u3057\u307e\u3059\u3002\n![KIMG1858 (1).jpg](https://qiita-image-store.s3.amazonaws.com/0/5848/218e3963-eab9-999e-ae98-0910ff73f10f.jpeg)\n\n\n$ python3 RekogDogCamera.py\n--- Opening /dev/video0...\nTrying source module v4l2...\n/dev/video0 opened.\nNo input was specified, using the first.\nAdjusting resolution from 384x288 to 352x288.\n--- Capturing frame...\nCaptured frame in 0.00 seconds.\n--- Processing captured image...\nDisabling banner.\nWriting JPEG image to '/home/pi/myphoto/20170103-00:08:15.jpg'.\n**Canine found: 71.327880859375**\n![20170102-23-57-58.jpg](https://qiita-image-store.s3.amazonaws.com/0/5848/ab603a27-148d-abdf-6e55-33a030e22176.jpeg)\n\n\u64ae\u308c\u307e\u3057\u305f\uff01\n* * *\n\u6700\u7d42\u7684\u306b\u3053\u3093\u306a\u611f\u3058\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py3:RekoDogCamera.py\nimport time\nfrom time import gmtime,strftime\nimport RPi.GPIO as GPIO\nimport json\nimport os\nimport boto3\n\nINTERVAL = 3\nSLEEPTIME = 5\nSENSOR_PIN = 25\n#\u4f7f\u7528\u3059\u308b\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u3042\u308b\u30d0\u30b1\u30c3\u30c8\u3092\u6307\u5b9a\nbucket_name = 'mybucket'\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(SENSOR_PIN, GPIO.IN)\n\nst = time.time()-INTERVAL\ns3_client = boto3.client('s3')\nwhile True:\n         #\u72ac\u611f\u30bb\u30f3\u30b5\u30fc\u304b\u3089\u30c7\u30fc\u30bf\u306e\u6d41\u5165\u304c\u3042\u308a\u3001\u306a\u304a\u304b\u3064\u6642\u9593\u9593\u9694\u304c\u898f\u5b9a\u4ee5\u4e0a\u306a\u3089\u2026\n        if( GPIO.input(SENSOR_PIN) == GPIO.HIGH ) and (st + INTERVAL < time.time() ):\n                st = time.time()\n                strf = strftime(\"%Y%m%d-%H:%M:%S\")\n                strfile = strf + '.jpg'\n                #\u5199\u771f\u3092\u64ae\u308a\u307e\u3059\n                os.system('fswebcam --no-banner /home/pi/myphoto/'+ strfile)\n                #\u64ae\u3063\u305f\u5199\u771f\u3092S3\u306e\u30d0\u30b1\u30c3\u30c8\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\n                s3_client.upload_file('/home/pi/myphoto/' + strfile ,bucket_name, strfile)\n                #Rekognition\u306b\u3001\u5199\u771f\u306e\u4e2d\u306b\u72ac\u304c\u3044\u308b\u304b\u3069\u3046\u304b\u8a0a\u304d\u307e\u3059\u3002\n                result = os.system(\"aws rekognition detect-labels --image \\'{\\\"S3Object\\\":{\\\"Bucket\\\":\\\"\"+bucket_name+\"\\\", \\\"Name\\\":\\\"\"+ strfile +\"\\\"}}\\' --region us-east-1 --profile default > temp.json\")\n                #Rekognition\u304b\u3089\u5e30\u3063\u3066\u304d\u305fJson\u30c7\u30fc\u30bf\u306b\u72ac\u304c\u3044\u305f\u3089\u2026\n                with open('temp.json') as json_data:\n                    data = json.load(json_data)\n                    for d in data[\"Labels\"]:\n                        if (d[\"Name\"] == \"Canine\" and d[\"Confidence\"] > 55.0):\n                                #\u72ac\u304c\u3044\u305f\u3088\uff01\u3068Confident\u3068\u4f75\u305b\u3066\u5831\u544a\u3057\u307e\u3059\n                                print (\"Canine found: \" + str(d[\"Confidence\"]))\n                                break\n                        else:\n                                \n                                #\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001\u5bb9\u8d66\u306a\u304f\u524a\u9664\u3057\u307e\u3059\u3002\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000s3_client.delete_object(Bucket=bucket_name, Key=strfile)\n\n        time.sleep(SLEEPTIME)\n# Clean Up\nGPIO.cleanup()\nos.system('rm /home/pi/myphoto/* temp.json')\n\n```\n\n\n", "tags": ["boto3", "Python", "RaspberryPi", "ReKognition"]}