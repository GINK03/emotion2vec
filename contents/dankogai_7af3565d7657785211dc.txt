{"context": " More than 1 year has passed since last update.\u307e\u3060\u8352\u524a\u308a\u3067\u3059\u304c\u3001\u304a\u62ab\u9732\u76ee\u3057\u3066\u3082\u3044\u3044\u3068\u3053\u308d\u307e\u3067\u6765\u305f\u306e\u3067\u3002\n\nhttps://github.com/dankogai/swift-pons\n\n\n\n\u58f2\u308a\u53e3\u4e0a\n\u3053\u308c\u3067Swift\u3067\u3082\n\nGMP\u3068\u304b\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3057\u3067\u4efb\u610f\u7cbe\u5ea6\u6574\u6570(BigInt)\u3084\u4efb\u610f\u7cbe\u5ea6\u5206\u6570(BigRat)\u3084\u4efb\u610f\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570(BigFloat)\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u5916\u90e8\u4f9d\u5b58\u304c\u306a\u3044\u306e\u3067\u3001Xcode\u3067\u306a\u304f\u3066\u3082swiftc\u304c\u3042\u308c\u3070\u4f7f\u3048\u307e\u3059\u3002\u3082\u3061\u308d\u3093OS X\u3060\u3051\u3067\u306a\u304f\u3066Linux\u3082\u30b5\u30dd\u30fc\u30c8\n\u305d\u306e\u4efb\u610f\u7cbe\u5ea6\u6570\u3082\u3001\u56db\u5247\u6f14\u7b97\u4ee5\u5916\u306e\u6f14\u7b97\u3092\u6700\u521d\u304b\u3089\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u6574\u6570\u306f\u7d20\u6570\u5224\u5b9a\u3067\u304d\u307e\u3059\u3057\u3001\u4efb\u610f\u7cbe\u5ea6\u5b9f\u6570\u306f<math.h>\u306e\u95a2\u6570\u3092\u4f7f\u3048\u307e\u3059\u3002\n\n\u3053\u308c\u3060\u3051\u3067\u3082\u304b\u306a\u308a\u30cf\u30c3\u30d4\u30fc\u306b\u306a\u308c\u307e\u3059\u3002\n\u3067\u3082\u672c\u5f53\u306e\u30a6\u30ea\u306f\u3001\u305d\u3053\u3058\u3083\u306a\u3044\u3093\u3067\u3059\u3088\u2026\n\n\u627f\u524d: \u53e4\u304d\u826f\u304dC\u306e\u6642\u4ee3\n\u4f8b\u3048\u3070man pow\u3068\u3057\u3066\u307f\u307e\u3059\u3002\u3053\u3093\u306a\u7b54\u3048\u304c\u8fd4\u3063\u3066\u304f\u308b\u3067\u3057\u3087\u3046\u3002\nSYNOPSIS\n    #include <math.h>\n\n    double\n    pow(double x, double y);\n\n    long double\n    powl(long double x, long double y);\n\n    float\n    powf(float x, float y);\n\n\u306a\u3093\u3067\u5168\u304f\u540c\u3058\u3053\u3068\u3092\u3059\u308b\u95a2\u6570\u304c\u4e09\u3064\u3042\u308b\u306e\u304b?\n\u7570\u306a\u3063\u305f\u578b\u3054\u3068\u306b\u3001\u9055\u3046\u5b9f\u88c5\u304c\u5fc5\u8981\u3060\u304b\u3089\u3002\n20\u4e16\u7d00\u307e\u3067\u306f\u4ed5\u65b9\u306a\u3044\u3053\u3068\u3060\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u300121\u4e16\u7d00\u3082\u3082\u30461/8\u904e\u304e\u305f2016\u5e74\u306b\u3053\u3093\u306a\u306e\u4ed8\u304d\u5408\u3063\u3066\u3089\u308c\u307e\u305b\u3093\u3088\u306d?\n\n\u3067\u3001Swift\u3067\u306f\u3001\n\u540c\u3058pow\u3068\u3044\u3046\u540d\u524d\u3067Double\u306b\u3082Float\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\u3084\u3063\u305f\u306d\uff01\nimport Cocoa    // this is an OSX playground\nlet twelveTet = pow(2.0, 1.0/12)\npow(Float(twelveTet), 12)           // not exactly 2.0 but you get the point\n\n\u3067\u3082\u3001\u4f7f\u3046\u5074\u3067\u306a\u304f\u3066\u4f5c\u308b\u5074\u3068\u3057\u3066\u3001\u3069\u3046\u3057\u305f\u3089\u305d\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u66f8\u3051\u308b\u3067\u3057\u3087\u3046?\n\n\u3068\u308a\u3042\u3048\u305afib\u3063\u3066\u307f\u308b\n\u3068\u308a\u3042\u3048\u305a\u307f\u3093\u306a\u5927\u597d\u304d\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3067\u3082\u6570\u3048\u3066\u307f\u307e\u3059\u304b\u3002\u524d\u4e16\u7d00\u8133\u3060\u3068\u3001\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u304b\u3002\n\n\u52e4\u52c9\u306a\u3084\u308a\u65b9\nfunc fib(n:Int8)->Int8   { return n < 2 ? i : fib(n-2)+fib(n-1) }\nfunc fib(n:Int16)->Int16 { return n < 2 ? i : fib(n-2)+fib(n-1) }\nfunc fib(n:Int32)->Int32 { return n < 2 ? i : fib(n-2)+fib(n-1) }\nfunc fib(n:Int64)->Int64 { return n < 2 ? i : fib(n-2)+fib(n-1) }\n// hey, don't forget UInt(8|16|32|64)?\n\n\u3064\u307e\u308a\u3001\u578b\u30b7\u30b0\u30cd\u30c1\u30e3\u30fc\u304c\u7570\u306a\u308b\u540c\u540d\u306e\u95a2\u6570\u3092\u3001\u578b\u306e\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3059\u3001\u3068\u3002\n\u3084\u3063\u3066\u3089\u308c\u308b\u304b!\n\n<T:Hoge>\u3067\u3069\u3046Hoge\u308b?\n\u5e78\u3044Swift\u306b\u306f\u7dcf\u79f0\u578b\u304c\u3042\u308a\u307e\u3059\u3002\u306a\u3089\u3053\u3046\u66f8\u3051\u308b?\nfunc fib<T>(i:T)->T { return i < 2 ? i : fib(n-2)+fib(n-1) }\n\n\u6b8b\u5ff5\u3067\u3057\u305f\u3002T\u3067<\u3067\u304d\u305f\u308a\u3001T\u3069\u3046\u3057+\u3067\u304d\u305f\u308a\u3063\u3066\u8ab0\u304c\u4fdd\u8a3c\u3057\u3066\u304f\u308c\u308b\u3093\u3067\u3059\u304b?\n\u305d\u308c\u3092\u4fdd\u8a3c\u3057\u3066\u304f\u308c\u308b\u306e\u304c\u3001Protocol\u306a\u3093\u3067\u3059\u304c\u2026\nfunc fib<T:Hoge>(i:T)->T { return i < 2 ? i : fib(n-2)+fib(n-1) }\n\n\u3067\u3001Hoge\u30d7\u30ed\u30c8\u30b3\u30eb\u304c<\u3068+\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3055\u3048\u3059\u308c\u3070\u3001\u3053\u308c\u306f\u52d5\u304f\u306f\u305a\u3067\u3059\u3002\n\u304c\u3001\u305d\u306eHoge\u3063\u3066\u3069\u3053\u306b\u3042\u308b\u306e?\n\nimport PONS\nPONS\u306e\u5f79\u5272\u306f\u3001\u305d\u308c\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3002\nimport PONS     // make sure you have built the framework before this!\n\nfunc fib<T:POInteger>(n:T)->T { // with a little better algorithm\n    if n < T(2) { return n }\n    var (a, b) = (T(0), T(1))\n    for _ in 2...n {\n        (a, b) = (b, a+b)\n    }\n    return b\n}\n\n\u3061\u3087\u3063\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6539\u826f\u3057\u307e\u3057\u305f\u3002\n\u3067\u3001\u3053\u308c\u304c\u672c\u5f53\u306b\u52d5\u304f\u306e\u304b?\nlet F11 = fib(11 as Int8)\nlet F13 = fib(13 as UInt8)\nlet F23 = fib(23 as Int16)\nlet F24 = fib(24 as UInt16)\nlet F46 = fib(46 as Int32)\nlet F47 = fib(47 as UInt32)\nlet F92 = fib(92 as Int64)\nlet F93 = fib(93 as UInt64)\n\n\u52d5\u304f\u3093\u3067\u3059\u3002\n\u3057\u304b\u3057\u3001PONS\u306e\u672c\u9818\u306f\u3053\u3053\u304b\u3089\u304c\u306f\u3058\u307e\u308a\u3067\u3059\u3002\u3042\u306a\u305f\u304c\u82e6\u52b4\u3057\u3066\u5b9f\u88c5\u3057\u305f\u65b0\u305f\u306a\u6574\u6570\u65b9\u3082\u53d7\u3051\u4ed8\u3051\u3066Generic Programming\u3092\u540d\u4e57\u308c\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\u3067\u3082\u3069\u3046\u3084\u3063\u3066\u305d\u308c\u3092\u8a3c\u660e\u3059\u308b?\n\u305d\u306e\u305f\u3081\u306bBigInt\u5b9f\u88c5\u3057\u3061\u3083\u3044\u307e\u3057\u305f\u3088\u3002\u3066\u3078\u307a\u308d\u3002\n\u3088\u3063\u3066\u3053\u308c\u304c\u52d5\u304d\u307e\u3059\u3002\nlet F666 = fib(666 as BigInt)\n\n\u3061\u306a\u307f\u306b6859356963880484413875401302176431788073214234535725264860437720157972142108894511264898366145528622543082646626140527097739556699078708088\u3060\u305d\u3046\u3067\u3059\u3002\n\n\u6574\u6570\u3060\u3051\u3067\u8a31\u3055\u308c\u308b\u306e\u306f\u5c0f\u5b66\u751f\u307e\u3067\u3060\u3088\u306d\u30fc\n\u30ab\u30f3\u30c8\u30fc\u30eb\u3092\u30d1\u30ef\u30cf\u30e9\u3057\u3066\u5f8c\u4e16\u306e\u8a55\u5224\u3092\u591a\u3044\u306b\u4e0b\u3052\u305f\u30af\u30ed\u30cd\u30c3\u30ab\u30fc\u306f\u3001\u3053\u3046\u306e\u305f\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u6574\u6570\u306f\u795e\u306e\u4f5c\u3063\u305f\u3082\u306e\u3060\u304c\u3001\u4ed6\u306f\u4eba\u9593\u306e\u4f5c\u3063\u305f\u3082\u306e\u3067\u3042\u308b\n\n\u4eba\u9593\u4e0a\u7b49\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u6211\u3005\u306f\u3055\u307e\u3056\u307e\u306a\u6570\u3092\u4f5c\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u6709\u7406\u6570\u306b\u5b9f\u6570\u306b\u305d\u3057\u3066\u8907\u7d20\u6570\u3002\u3042\u306e\u53e4\u304d\u826f\u304dC\u3067\u3059\u3089C99\u3067\u8907\u7d20\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u305f\u3050\u3089\u3044\u3067\u3059\u3002\u305d\u308c\u304f\u3089\u3044\u6570\u5024\u3068\u3044\u3046\u306e\u306f\u5207\u5b9f\u306a\u308f\u3051\u3067\u3059\u3002\n\u3068\u3053\u308d\u304cSwift\u306f\u6a19\u6e96\u3067\u8907\u7d20\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u66f8\u3044\u305f\u306e\u304c\n\nhttps://github.com/dankogai/swift-complex\n\n\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u66f8\u3044\u305f\u3053\u3068\u3067\u3080\u3057\u308d\u6b32\u6c42\u4e0d\u6e80\u306f\u9ad8\u307e\u308a\u307e\u3057\u305f\u3002\n\u300c\u305f\u3057\u304b\u306b\u7dcf\u79f0\u578b\u3067\u3001\u305f\u3057\u304b\u306bInt\u3082Double\u3082\u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u3051\u3069\u3001BigInt\u3068\u304bRational\u3068\u304b\u7a81\u3063\u8fbc\u3093\u3067\u3082\u5927\u4e08\u592b?\u3063\u3064\u3046\u304b\u305d\u308c\u4ee5\u524d\u306b\u7a81\u3063\u8fbc\u3080\u3079\u304d\u6570\u5024\u578b\u304c\u898b\u5f53\u305f\u3089\u306a\u3044\u3093\u3060\u304c\u300d\n\u3068\u3044\u3046\u308f\u3051\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3088\u3002Generic\u3067\u300c\u6574\u6570\u300d\u578b\u306a\u3089BigInt\u3060\u3063\u3066\u5206\u5b50\u3068\u5206\u6bcd\u306b\u4f7f\u3048\u308bRational\u306b\u2026\nlet bq = BigInt(1).over(bn)     // (1/18446744073709551617)\nbq + bq // (2/18446744073709551617)\nbq - bq // (0/1)\nbq * bq // (1/340282366920938463500268095579187314689)\nbq / bq // (1/1)\nbq.denominator == bn            // true, of course!\nbq.reciprocal.numerator == bn   // so is this\n\n\u305d\u306eRational\u542b\u3081\u3001\u300c\u5b9f\u6570\u300d\u578b\u306a\u3089\u5b9f\u90e8\u3068\u865a\u90e8\u306b\u4f7f\u3048\u308bComplex\u3002\n\nlet bz = bq + bq.i  // ((1/18446744073709551617)+(1/18446744073709551617).i)\nbz + bz // ((2/18446744073709551617)+(2/18446744073709551617).i)\nbz - bz // ((0/1)+(0/1).i)\nbz * bz // ((0/1)+(2/340282366920938463500268095579187314689).i)\nbz / bz // ((1/1)+(0/1).i)\n\n\n\u52d5\u304f\u305e\u3001\u52d5\u304f\u305e!\n\u3067\u3082\u3001\u6574\u6570\u306b\u304a\u3051\u308bfact(orial)\u3084fib(onacci)\u306a\u3088\u3046\u306a\u30c7\u30e2\u3092\u3001\u5b9f\u6570\u3068\u304b\u8907\u7d20\u6570\u3067\u3084\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u306e?\n<math.h>\u306a\u95a2\u6570\u304c\u3001\u7dcf\u79f0\u578b\u3067\u3082\u52d5\u304f\u3053\u3068\u3092\u898b\u305b\u3064\u3051\u308c\u3070\u3044\u3044!\n\u3068\u3044\u3046\u6c17\u6301\u3061\u3067\u3084\u3063\u305f\u3002\u5f8c\u6094\u306f\u3057\u3066\u3044\u306a\u3044\u3002\nDouble.sqrt(2)\nDouble.sqrt(2)                  // 1.414213562373095\nBigRat.sqrt(2)                  // (112045541949572279837463876455/79228162514264337593543950336)\nBigFloat.sqrt(2)                // 1.414213562373095048801688724198\nComplex.sqrt(-2)                // (0.0+1.4142135623731.i)\nComplex.sqrt(BigRat(-2))        // 112045541949572279837463876455/79228162514264337593543950336).i)\n\n\n\u500b\u4eba\u7684\u306b\u4e00\u756a\u611f\u52d5\u3057\u305f\u306e\u306f\u3001\u3053\u308c\u3002\nComplex.exp(Double.PI.i)        // (-1.0+1.22464679914735e-16.i) != (-1.0+0.0.i) // :(\n// default 64-bit precision is still not good enough\u2026\nComplex.exp(BigRat.pi().i)      // (-(1/1)-(1/4722366482869645213696).i)\n// but with 128-bit precision\u2026\nComplex.exp(BigRat.pi(128).i)   // (-(1/1)+(0/1).i) // as it should be!\n\n128bit\u7cbe\u5ea6\u306e\u6709\u7406\u6570\u578b\u306a\u3089 e ** \u03c0i == -1 \u306b\u672c\u5f53\u306b\u306a\u308b\u3093\u3067\u3059!(\u53b3\u5bc6\u306b\u306fsin(pi) < ulp\u306e\u3068\u3044\u3046\u308f\u3051\u306a\u306e\u3067\u3059\u304c)\u3002\n\n\u3059\u3079\u3066\u306e\u578b\u5225\u5b9f\u88c5\u3092\u3001\u751f\u307e\u308c\u308b\u524d\u306b\u6d88\u3057\u53bb\u308a\u305f\u3044\nPONS\u306e\u5b58\u5728\u610f\u7fa9\u306f\u3001 Write once, runs on every type (that conform to the protocol) \u304c\u3001\u6570\u5024\u578b\u3067\u3082\u6210\u7acb\u3059\u308b\u3053\u3068\u3092\u793a\u3059\u3053\u3068\u306b\u3042\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e09\u89d2\u95a2\u6570\u306ecos\u3068sin\u306f\u3001(\u73fe\u6642\u70b9\u306b\u304a\u3044\u3066)\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\ncos()\npublic static func cos(x:Self, precision:Int = 64)->Self {\n    if let dx = x as? Double { return Self(Double.cos(dx)) }\n    let px = Swift.max(x.precision, precision)\n    let epsilon = Self(Double.ldexp(1.0, -px))\n    let x2 = x * x\n    var (r, t) = (Self(1), Self(1))\n    for i in 1...px {\n        t *= x2.divide(Self((2 * i - 1) * 2 * i), precision:px)\n        t.truncate(px + 32)\n        r += i & 1 == 1 ? -t : t\n        r.truncate(px + 32)\n        if t < epsilon { break }\n    }\n    return r.truncate(px)\n}\n\n\n\nsin()\npublic static func sin(x:Self, precision:Int = 64)->Self {\n    if let dx = x as? Double { return Self(Double.sin(dx)) }\n    let px = Swift.max(x.precision, precision)\n    let epsilon = Self(Double.ldexp(1.0, -px))\n    let x2 = x * x\n    var r = x < 0 ? -x : x\n    var t = r\n    for i in 1...px {\n        t *= x2.divide(Self((2 * i + 1) * 2 * i), precision:px)\n        t.truncate(px + 32)\n        r += i & 1 == 1 ? -t : t\n        r.truncate(px + 32)\n        if t < epsilon { break }\n    }\n    return x < 0 ? -r.truncate(px) : r.truncate(px)\n}\n\n\n\u6570\u5b66\u8005\u3067\u306a\u304f\u3068\u3082\u3001\u3053\u308c\u306f\u30c6\u30a4\u30e9\u30fc\u5c55\u958b\n\n\u3092\u307b\u307c\u305d\u306e\u307e\u307e\u3067\u3042\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u91cd\u8981\u306a\u306e\u306f\u3053\u308c\u304cFloat\u3084Double\u306f\u304a\u308d\u304b\u3001BigRat = Rational<BigInt>\u3067\u3082BigFloat\u3067\u3082\u307e\u3063\u305f\u304f\u5909\u66f4\u306a\u3057\u306b\u52d5\u304f\u3053\u3068\u3002\u4e00\u884c\u76ee\u306b\nif let dx = x as? Double { return Self(Double.sin(dx)) }\n\n\u3068\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3082\u52d5\u304d\u307e\u3059(\u305d\u306e\u5206Double.cos\u3084Double.sin\u306f\u9045\u304f\u306f\u306a\u308a\u307e\u3059\u304c)\u3002\n\u306a\u3093\u3067/\u3067\u306a\u304f\u3066.divide\u306a\u306e\u304b\u3001.truncate\u306f\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u3068\u304b\u306f\u5f8c\u65e5\u5225\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u4e88\u5b9a\u3067\u3059\u304c\u3001\u3044\u305a\u308c\u306b\u305b\u3088\u5c06\u6765Float128\u3068\u304b\u5b9f\u88c5\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u30b5\u30a4\u30f3\u30b3\u30b5\u30a4\u30f3\u3067\u304d\u3061\u3083\u3046\u308f\u3051\u3067\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u4f7f\u3063\u3066\u307f\u308b\u306b\u306f\ngit clone \u3057\u3066 PONS.xcworkspace\u958b\u3044\u3066\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092build\u3057\u305f\u3089playground\u3067\u904a\u3079\u307e\u3059\u3002Xcode\u304c\u306a\u304f\u3068\u3082make repl\u3059\u308c\u3070\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u904a\u3079\u307e\u3059\u3002\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u30bd\u30fc\u30b9\u3092\u307e\u308b\u3063\u3068\u30b3\u30d4\u30fc\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u5f53\u521d\u4e88\u5b9a\u3092\u8d85\u3048\u3066\u5927\u304d\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u307e\u3060\u307e\u3060\u5168\u7136\u8aac\u660e\u3057\u305f\u308a\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u300c\u306a\u3093\u305e\u3053\u308c\u300d\u306f\u3053\u308c\u3067\u4f1d\u308f\u3063\u3066\u3044\u308b\u3068\u3044\u3044\u306a\u3042\u2026\nEnjoy!\nDan the Protocol-Oriented Swift Programmer\n\u307e\u3060\u8352\u524a\u308a\u3067\u3059\u304c\u3001\u304a\u62ab\u9732\u76ee\u3057\u3066\u3082\u3044\u3044\u3068\u3053\u308d\u307e\u3067\u6765\u305f\u306e\u3067\u3002\n\n* https://github.com/dankogai/swift-pons\n\n![](https://github.com/dankogai/swift-pons/raw/master/graph/typetree.png)\n\n\n## \u58f2\u308a\u53e3\u4e0a\n\n\u3053\u308c\u3067Swift\u3067\u3082\n\n* GMP\u3068\u304b\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3057\u3067\u4efb\u610f\u7cbe\u5ea6\u6574\u6570(BigInt)\u3084\u4efb\u610f\u7cbe\u5ea6\u5206\u6570(BigRat)\u3084\u4efb\u610f\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570(BigFloat)\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n* \u5916\u90e8\u4f9d\u5b58\u304c\u306a\u3044\u306e\u3067\u3001Xcode\u3067\u306a\u304f\u3066\u3082swiftc\u304c\u3042\u308c\u3070\u4f7f\u3048\u307e\u3059\u3002\u3082\u3061\u308d\u3093OS X\u3060\u3051\u3067\u306a\u304f\u3066Linux\u3082\u30b5\u30dd\u30fc\u30c8\n* \u305d\u306e\u4efb\u610f\u7cbe\u5ea6\u6570\u3082\u3001\u56db\u5247\u6f14\u7b97\u4ee5\u5916\u306e\u6f14\u7b97\u3092\u6700\u521d\u304b\u3089\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u6574\u6570\u306f\u7d20\u6570\u5224\u5b9a\u3067\u304d\u307e\u3059\u3057\u3001\u4efb\u610f\u7cbe\u5ea6\u5b9f\u6570\u306f`<math.h>`\u306e\u95a2\u6570\u3092\u4f7f\u3048\u307e\u3059\u3002\n\n\u3053\u308c\u3060\u3051\u3067\u3082\u304b\u306a\u308a\u30cf\u30c3\u30d4\u30fc\u306b\u306a\u308c\u307e\u3059\u3002\n\n\u3067\u3082\u672c\u5f53\u306e\u30a6\u30ea\u306f\u3001\u305d\u3053\u3058\u3083\u306a\u3044\u3093\u3067\u3059\u3088\u2026\n\n## \u627f\u524d: \u53e4\u304d\u826f\u304dC\u306e\u6642\u4ee3\n\n\u4f8b\u3048\u3070`man pow`\u3068\u3057\u3066\u307f\u307e\u3059\u3002\u3053\u3093\u306a\u7b54\u3048\u304c\u8fd4\u3063\u3066\u304f\u308b\u3067\u3057\u3087\u3046\u3002\n\n````\nSYNOPSIS\n    #include <math.h>\n\n    double\n    pow(double x, double y);\n\n    long double\n    powl(long double x, long double y);\n\n    float\n    powf(float x, float y);\n````\n\n\u306a\u3093\u3067\u5168\u304f\u540c\u3058\u3053\u3068\u3092\u3059\u308b\u95a2\u6570\u304c\u4e09\u3064\u3042\u308b\u306e\u304b?\n\n\u7570\u306a\u3063\u305f\u578b\u3054\u3068\u306b\u3001\u9055\u3046\u5b9f\u88c5\u304c\u5fc5\u8981\u3060\u304b\u3089\u3002\n\n20\u4e16\u7d00\u307e\u3067\u306f\u4ed5\u65b9\u306a\u3044\u3053\u3068\u3060\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u300121\u4e16\u7d00\u3082\u3082\u30461/8\u904e\u304e\u305f2016\u5e74\u306b\u3053\u3093\u306a\u306e\u4ed8\u304d\u5408\u3063\u3066\u3089\u308c\u307e\u305b\u3093\u3088\u306d?\n\n## \u3067\u3001Swift\u3067\u306f\u3001\n\n\u540c\u3058`pow`\u3068\u3044\u3046\u540d\u524d\u3067`Double`\u306b\u3082`Float`\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\u3084\u3063\u305f\u306d\uff01\n\n````swift\nimport Cocoa    // this is an OSX playground\nlet twelveTet = pow(2.0, 1.0/12)\npow(Float(twelveTet), 12)           // not exactly 2.0 but you get the point\n````\n\n\u3067\u3082\u3001\u4f7f\u3046\u5074\u3067\u306a\u304f\u3066\u4f5c\u308b\u5074\u3068\u3057\u3066\u3001\u3069\u3046\u3057\u305f\u3089\u305d\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u66f8\u3051\u308b\u3067\u3057\u3087\u3046?\n\n## \u3068\u308a\u3042\u3048\u305afib\u3063\u3066\u307f\u308b\n\n\u3068\u308a\u3042\u3048\u305a\u307f\u3093\u306a\u5927\u597d\u304d\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3067\u3082\u6570\u3048\u3066\u307f\u307e\u3059\u304b\u3002\u524d\u4e16\u7d00\u8133\u3060\u3068\u3001\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u304b\u3002\n\n\n### \u52e4\u52c9\u306a\u3084\u308a\u65b9\n\n````swift\nfunc fib(n:Int8)->Int8   { return n < 2 ? i : fib(n-2)+fib(n-1) }\nfunc fib(n:Int16)->Int16 { return n < 2 ? i : fib(n-2)+fib(n-1) }\nfunc fib(n:Int32)->Int32 { return n < 2 ? i : fib(n-2)+fib(n-1) }\nfunc fib(n:Int64)->Int64 { return n < 2 ? i : fib(n-2)+fib(n-1) }\n// hey, don't forget UInt(8|16|32|64)?\n````\n\n\u3064\u307e\u308a\u3001\u578b\u30b7\u30b0\u30cd\u30c1\u30e3\u30fc\u304c\u7570\u306a\u308b\u540c\u540d\u306e\u95a2\u6570\u3092\u3001\u578b\u306e\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3059\u3001\u3068\u3002\n\n\u3084\u3063\u3066\u3089\u308c\u308b\u304b!\n\n### `<T:Hoge>`\u3067\u3069\u3046`Hoge`\u308b?\n\n\u5e78\u3044Swift\u306b\u306f\u7dcf\u79f0\u578b\u304c\u3042\u308a\u307e\u3059\u3002\u306a\u3089\u3053\u3046\u66f8\u3051\u308b?\n\n````swift\nfunc fib<T>(i:T)->T { return i < 2 ? i : fib(n-2)+fib(n-1) }\n````\n\n\u6b8b\u5ff5\u3067\u3057\u305f\u3002`T`\u3067`<`\u3067\u304d\u305f\u308a\u3001`T`\u3069\u3046\u3057`+`\u3067\u304d\u305f\u308a\u3063\u3066\u8ab0\u304c\u4fdd\u8a3c\u3057\u3066\u304f\u308c\u308b\u3093\u3067\u3059\u304b?\n\n\u305d\u308c\u3092\u4fdd\u8a3c\u3057\u3066\u304f\u308c\u308b\u306e\u304c\u3001Protocol\u306a\u3093\u3067\u3059\u304c\u2026\n\n````swift\nfunc fib<T:Hoge>(i:T)->T { return i < 2 ? i : fib(n-2)+fib(n-1) }\n````\n\n\u3067\u3001`Hoge`\u30d7\u30ed\u30c8\u30b3\u30eb\u304c`<`\u3068`+`\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3055\u3048\u3059\u308c\u3070\u3001\u3053\u308c\u306f\u52d5\u304f\u306f\u305a\u3067\u3059\u3002\n\n\u304c\u3001\u305d\u306e`Hoge`\u3063\u3066\u3069\u3053\u306b\u3042\u308b\u306e?\n\n## import PONS\n\nPONS\u306e\u5f79\u5272\u306f\u3001\u305d\u308c\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3002\n\n````\nimport PONS     // make sure you have built the framework before this!\n\nfunc fib<T:POInteger>(n:T)->T { // with a little better algorithm\n    if n < T(2) { return n }\n    var (a, b) = (T(0), T(1))\n    for _ in 2...n {\n        (a, b) = (b, a+b)\n    }\n    return b\n}\n````\n\n\u3061\u3087\u3063\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6539\u826f\u3057\u307e\u3057\u305f\u3002\n\n\u3067\u3001\u3053\u308c\u304c\u672c\u5f53\u306b\u52d5\u304f\u306e\u304b?\n\n````swift\nlet F11 = fib(11 as Int8)\nlet F13 = fib(13 as UInt8)\nlet F23 = fib(23 as Int16)\nlet F24 = fib(24 as UInt16)\nlet F46 = fib(46 as Int32)\nlet F47 = fib(47 as UInt32)\nlet F92 = fib(92 as Int64)\nlet F93 = fib(93 as UInt64)\n````\n\n\u52d5\u304f\u3093\u3067\u3059\u3002\n\n\u3057\u304b\u3057\u3001PONS\u306e\u672c\u9818\u306f\u3053\u3053\u304b\u3089\u304c\u306f\u3058\u307e\u308a\u3067\u3059\u3002\u3042\u306a\u305f\u304c\u82e6\u52b4\u3057\u3066\u5b9f\u88c5\u3057\u305f\u65b0\u305f\u306a\u6574\u6570\u65b9\u3082\u53d7\u3051\u4ed8\u3051\u3066Generic Programming\u3092\u540d\u4e57\u308c\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n\u3067\u3082\u3069\u3046\u3084\u3063\u3066\u305d\u308c\u3092\u8a3c\u660e\u3059\u308b?\n\n\u305d\u306e\u305f\u3081\u306b`BigInt`\u5b9f\u88c5\u3057\u3061\u3083\u3044\u307e\u3057\u305f\u3088\u3002\u3066\u3078\u307a\u308d\u3002\n\n\u3088\u3063\u3066\u3053\u308c\u304c\u52d5\u304d\u307e\u3059\u3002\n\n````\nlet F666 = fib(666 as BigInt)\n````\n\n\u3061\u306a\u307f\u306b`6859356963880484413875401302176431788073214234535725264860437720157972142108894511264898366145528622543082646626140527097739556699078708088`\u3060\u305d\u3046\u3067\u3059\u3002\n\n## \u6574\u6570\u3060\u3051\u3067\u8a31\u3055\u308c\u308b\u306e\u306f\u5c0f\u5b66\u751f\u307e\u3067\u3060\u3088\u306d\u30fc\n\n\u30ab\u30f3\u30c8\u30fc\u30eb\u3092\u30d1\u30ef\u30cf\u30e9\u3057\u3066\u5f8c\u4e16\u306e\u8a55\u5224\u3092\u591a\u3044\u306b\u4e0b\u3052\u305f\u30af\u30ed\u30cd\u30c3\u30ab\u30fc\u306f\u3001\u3053\u3046\u306e\u305f\u307e\u3044\u307e\u3057\u305f\u3002\n\n> \u6574\u6570\u306f\u795e\u306e\u4f5c\u3063\u305f\u3082\u306e\u3060\u304c\u3001\u4ed6\u306f\u4eba\u9593\u306e\u4f5c\u3063\u305f\u3082\u306e\u3067\u3042\u308b\n\n\u4eba\u9593\u4e0a\u7b49\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u6211\u3005\u306f\u3055\u307e\u3056\u307e\u306a\u6570\u3092\u4f5c\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u6709\u7406\u6570\u306b\u5b9f\u6570\u306b\u305d\u3057\u3066\u8907\u7d20\u6570\u3002\u3042\u306e\u53e4\u304d\u826f\u304dC\u3067\u3059\u3089C99\u3067\u8907\u7d20\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u305f\u3050\u3089\u3044\u3067\u3059\u3002\u305d\u308c\u304f\u3089\u3044\u6570\u5024\u3068\u3044\u3046\u306e\u306f\u5207\u5b9f\u306a\u308f\u3051\u3067\u3059\u3002\n\n\u3068\u3053\u308d\u304cSwift\u306f\u6a19\u6e96\u3067\u8907\u7d20\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u66f8\u3044\u305f\u306e\u304c\n\n* https://github.com/dankogai/swift-complex\n\n\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u66f8\u3044\u305f\u3053\u3068\u3067\u3080\u3057\u308d\u6b32\u6c42\u4e0d\u6e80\u306f\u9ad8\u307e\u308a\u307e\u3057\u305f\u3002\n\n\u300c\u305f\u3057\u304b\u306b\u7dcf\u79f0\u578b\u3067\u3001\u305f\u3057\u304b\u306b`Int`\u3082`Double`\u3082\u53d7\u3051\u5165\u308c\u3089\u308c\u308b\u3051\u3069\u3001`BigInt`\u3068\u304b`Rational`\u3068\u304b\u7a81\u3063\u8fbc\u3093\u3067\u3082\u5927\u4e08\u592b?\u3063\u3064\u3046\u304b\u305d\u308c\u4ee5\u524d\u306b\u7a81\u3063\u8fbc\u3080\u3079\u304d\u6570\u5024\u578b\u304c\u898b\u5f53\u305f\u3089\u306a\u3044\u3093\u3060\u304c\u300d\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3088\u3002Generic\u3067\u300c\u6574\u6570\u300d\u578b\u306a\u3089`BigInt`\u3060\u3063\u3066\u5206\u5b50\u3068\u5206\u6bcd\u306b\u4f7f\u3048\u308b`Rational`\u306b\u2026\n\n````swift\nlet bq = BigInt(1).over(bn)     // (1/18446744073709551617)\nbq + bq // (2/18446744073709551617)\nbq - bq // (0/1)\nbq * bq // (1/340282366920938463500268095579187314689)\nbq / bq // (1/1)\nbq.denominator == bn            // true, of course!\nbq.reciprocal.numerator == bn   // so is this\n````\n\n\u305d\u306e`Rational`\u542b\u3081\u3001\u300c\u5b9f\u6570\u300d\u578b\u306a\u3089\u5b9f\u90e8\u3068\u865a\u90e8\u306b\u4f7f\u3048\u308b`Complex`\u3002\n\n````swift\n\nlet bz = bq + bq.i  // ((1/18446744073709551617)+(1/18446744073709551617).i)\nbz + bz // ((2/18446744073709551617)+(2/18446744073709551617).i)\nbz - bz // ((0/1)+(0/1).i)\nbz * bz // ((0/1)+(2/340282366920938463500268095579187314689).i)\nbz / bz // ((1/1)+(0/1).i)\n\n````\n\n\u52d5\u304f\u305e\u3001\u52d5\u304f\u305e!\n\n\u3067\u3082\u3001\u6574\u6570\u306b\u304a\u3051\u308bfact(orial)\u3084fib(onacci)\u306a\u3088\u3046\u306a\u30c7\u30e2\u3092\u3001\u5b9f\u6570\u3068\u304b\u8907\u7d20\u6570\u3067\u3084\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u306e?\n\n`<math.h>`\u306a\u95a2\u6570\u304c\u3001\u7dcf\u79f0\u578b\u3067\u3082\u52d5\u304f\u3053\u3068\u3092\u898b\u305b\u3064\u3051\u308c\u3070\u3044\u3044!\n\n\u3068\u3044\u3046\u6c17\u6301\u3061\u3067\u3084\u3063\u305f\u3002\u5f8c\u6094\u306f\u3057\u3066\u3044\u306a\u3044\u3002\n\n````swift\nDouble.sqrt(2)\nDouble.sqrt(2)                  // 1.414213562373095\nBigRat.sqrt(2)                  // (112045541949572279837463876455/79228162514264337593543950336)\nBigFloat.sqrt(2)                // 1.414213562373095048801688724198\nComplex.sqrt(-2)                // (0.0+1.4142135623731.i)\nComplex.sqrt(BigRat(-2))        // 112045541949572279837463876455/79228162514264337593543950336).i)\n\n````\n\n\u500b\u4eba\u7684\u306b\u4e00\u756a\u611f\u52d5\u3057\u305f\u306e\u306f\u3001\u3053\u308c\u3002\n\n````swift\nComplex.exp(Double.PI.i)        // (-1.0+1.22464679914735e-16.i) != (-1.0+0.0.i) // :(\n// default 64-bit precision is still not good enough\u2026\nComplex.exp(BigRat.pi().i)      // (-(1/1)-(1/4722366482869645213696).i)\n// but with 128-bit precision\u2026\nComplex.exp(BigRat.pi(128).i)   // (-(1/1)+(0/1).i) // as it should be!\n````\n\n128bit\u7cbe\u5ea6\u306e\u6709\u7406\u6570\u578b\u306a\u3089 e ** \u03c0i == -1 \u306b\u672c\u5f53\u306b\u306a\u308b\u3093\u3067\u3059!(\u53b3\u5bc6\u306b\u306f`sin(pi) < ulp`\u306e\u3068\u3044\u3046\u308f\u3051\u306a\u306e\u3067\u3059\u304c)\u3002\n\n## \u3059\u3079\u3066\u306e\u578b\u5225\u5b9f\u88c5\u3092\u3001\u751f\u307e\u308c\u308b\u524d\u306b\u6d88\u3057\u53bb\u308a\u305f\u3044\n\nPONS\u306e\u5b58\u5728\u610f\u7fa9\u306f\u3001 Write once, runs on every type (that conform to the protocol) \u304c\u3001\u6570\u5024\u578b\u3067\u3082\u6210\u7acb\u3059\u308b\u3053\u3068\u3092\u793a\u3059\u3053\u3068\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u4e09\u89d2\u95a2\u6570\u306e`cos`\u3068`sin`\u306f\u3001(\u73fe\u6642\u70b9\u306b\u304a\u3044\u3066)\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n````swift:cos()\npublic static func cos(x:Self, precision:Int = 64)->Self {\n    if let dx = x as? Double { return Self(Double.cos(dx)) }\n    let px = Swift.max(x.precision, precision)\n    let epsilon = Self(Double.ldexp(1.0, -px))\n    let x2 = x * x\n    var (r, t) = (Self(1), Self(1))\n    for i in 1...px {\n        t *= x2.divide(Self((2 * i - 1) * 2 * i), precision:px)\n        t.truncate(px + 32)\n        r += i & 1 == 1 ? -t : t\n        r.truncate(px + 32)\n        if t < epsilon { break }\n    }\n    return r.truncate(px)\n}\n````\n\n````swift:sin()\npublic static func sin(x:Self, precision:Int = 64)->Self {\n    if let dx = x as? Double { return Self(Double.sin(dx)) }\n    let px = Swift.max(x.precision, precision)\n    let epsilon = Self(Double.ldexp(1.0, -px))\n    let x2 = x * x\n    var r = x < 0 ? -x : x\n    var t = r\n    for i in 1...px {\n        t *= x2.divide(Self((2 * i + 1) * 2 * i), precision:px)\n        t.truncate(px + 32)\n        r += i & 1 == 1 ? -t : t\n        r.truncate(px + 32)\n        if t < epsilon { break }\n    }\n    return x < 0 ? -r.truncate(px) : r.truncate(px)\n}\n````\n\n\n\u6570\u5b66\u8005\u3067\u306a\u304f\u3068\u3082\u3001\u3053\u308c\u306f\u30c6\u30a4\u30e9\u30fc\u5c55\u958b\n\n![sincos](https://upload.wikimedia.org/math/5/4/6/546ecab719ce73dfb34a7496c942972b.png)\n\n\u3092\u307b\u307c\u305d\u306e\u307e\u307e\u3067\u3042\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u91cd\u8981\u306a\u306e\u306f\u3053\u308c\u304c`Float`\u3084`Double`\u306f\u304a\u308d\u304b\u3001`BigRat` = `Rational<BigInt>`\u3067\u3082`BigFloat`\u3067\u3082\u307e\u3063\u305f\u304f\u5909\u66f4\u306a\u3057\u306b\u52d5\u304f\u3053\u3068\u3002\u4e00\u884c\u76ee\u306b\n\n````swift\nif let dx = x as? Double { return Self(Double.sin(dx)) }\n````\n\n\u3068\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3082\u52d5\u304d\u307e\u3059(\u305d\u306e\u5206`Double.cos`\u3084`Double.sin`\u306f\u9045\u304f\u306f\u306a\u308a\u307e\u3059\u304c)\u3002\n\n\u306a\u3093\u3067`/`\u3067\u306a\u304f\u3066`.divide`\u306a\u306e\u304b\u3001`.truncate`\u306f\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u3068\u304b\u306f\u5f8c\u65e5\u5225\u8a18\u4e8b\u3067\u7d39\u4ecb\u3059\u308b\u4e88\u5b9a\u3067\u3059\u304c\u3001\u3044\u305a\u308c\u306b\u305b\u3088\u5c06\u6765`Float128`\u3068\u304b\u5b9f\u88c5\u3057\u305f\u3068\u3057\u3066\u3082\u3001\u30b5\u30a4\u30f3\u30b3\u30b5\u30a4\u30f3\u3067\u304d\u3061\u3083\u3046\u308f\u3051\u3067\u3059\u3002\n\n## \u3068\u308a\u3042\u3048\u305a\u4f7f\u3063\u3066\u307f\u308b\u306b\u306f\n\ngit clone \u3057\u3066 `PONS.xcworkspace`\u958b\u3044\u3066\u3001\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092build\u3057\u305f\u3089playground\u3067\u904a\u3079\u307e\u3059\u3002Xcode\u304c\u306a\u304f\u3068\u3082`make repl`\u3059\u308c\u3070\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u904a\u3079\u307e\u3059\u3002\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u30bd\u30fc\u30b9\u3092\u307e\u308b\u3063\u3068\u30b3\u30d4\u30fc\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u5f53\u521d\u4e88\u5b9a\u3092\u8d85\u3048\u3066\u5927\u304d\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u307e\u3060\u307e\u3060\u5168\u7136\u8aac\u660e\u3057\u305f\u308a\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u300c\u306a\u3093\u305e\u3053\u308c\u300d\u306f\u3053\u308c\u3067\u4f1d\u308f\u3063\u3066\u3044\u308b\u3068\u3044\u3044\u306a\u3042\u2026\n\nEnjoy!\n\nDan the Protocol-Oriented Swift Programmer\n", "tags": ["Swift", "math", "Protocol", "Generic", "PONS"]}