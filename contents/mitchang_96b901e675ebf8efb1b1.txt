{"context": "\u203b\u3053\u306e\u8a18\u4e8b\u306f\u30b5\u30fc\u30d0\u30fc\u30ef\u30fc\u30af\u30b9Advent Calendar 2016\u300112\u670813\u65e5\u306e\u8a18\u4e8b\u3068\u3057\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\nAWS\u306f\u5168\u90e8CLI\u3067\u64cd\u4f5c\u3057\u305f\u3044\n\u30b5\u30fc\u30d0\u30fc\u30ef\u30fc\u30af\u30b9\u3068\u3044\u3048\u3070AWS\u3001AWS\u3068\u3044\u3048\u3070API\u304c\u8c4a\u5bcc\u3002API\u306e\u64cd\u4f5c\u3068\u3044\u3048\u3070CLI\u3001\u3067\u3059\u3088\u306d\uff1f\u305d\u3046\u3067\u3059\u3088\u306d\u3002\n\nALB\u6700\u9ad8\u3060\u3051\u3069\u3055\nAWS\u306eApplication Load Balancing(ALB)\u306b\u3064\u3044\u3066\u3002\n\u30d1\u30b9\u6bce\u306b\u7570\u306a\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3092\u632f\u308a\u5206\u3051\u305f\u308a\u975e\u5e38\u306b\u4fbf\u5229\u306aALB\u3067\u3059\u304c\u3001\u3072\u3068\u3064\u3060\u3051\u6c17\u306b\u306a\u308b\u70b9\u304c\u3042\u3063\u305f\u3093\u3067\u3059\u306d\u3002\n\u6a5f\u80fd\u304c\u5897\u3048\u305f\u5206\u3001\u3053\u308c\u307e\u3067\u306eElastic Load Balancing(ELB)\u3068\u6bd4\u8f03\u3057\u3066\u64cd\u4f5c\u304c\u3061\u3087\u3063\u3068\u3081\u3093\u3069\u304f\u3055\u3044\u306a\u30fc\u3001\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u307e\u305aELB\u3068\u6839\u672c\u7684\u306b\u9055\u3046\u306e\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306e\u5b58\u5728\u3067\u3059\u3002\n\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306b\u6240\u5c5e\u3057\u3001\u30d5\u30ed\u30f3\u30c8\u306eALB\u306f\u30eb\u30fc\u30eb\u306b\u57fa\u3065\u3044\u3066\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u3078\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3057\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u5e73\u6613\u306b\u66f8\u304f\u3068\nALB <---> \u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7 <---> \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\u3068\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306eEC2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u308a\u5916\u3057\u305f\u308a\u3059\u308b\u969b\u306b\u306f\u3001ALB\u3067\u306f\u306a\u304f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u3092\u64cd\u4f5c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51e6\u7406\u306b\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306eARN\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\n\u3042\u308bALB\u306b\u7d10\u4ed8\u3044\u3066\u3044\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306eARN\u3092\u5f15\u3063\u5f35\u3063\u3066\u3053\u3088\u3046\u3068\u601d\u3046\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30a7\u30eb\u30b3\u30de\u30f3\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n$ aws elbv2 describe-load-balancers \u00a5\n  --query 'LoadBalancers[].[LoadBalancerName,LoadBalancerArn]' \u00a5\n  --output text | grep -E \"^<ALB\u540d>\u00a5t.*\" | cut -f2 | \u00a5\n  xargs -i aws elbv2 describe-listeners \u00a5\n    --load-balancer-arn {} \u00a5\n    --query 'Listeners[].DefaultActions[].TargetGroupArn' --output text\n\n\u9577\u3044\u3002ALB\u3068\u8a00\u3044\u3064\u3064\u3001API\u306e\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306felbv2\u3063\u3066\u306e\u3082\u306a\u304b\u306a\u304b\u3084\u3084\u3053\u3057\u3044\u3063\u3059\u3088\u306d\u3002\n\u3053\u3046\u3057\u3066\u53d6\u5f97\u3057\u305fARN\u306b\u5bfe\u3057\u3066\u3001\u3055\u3089\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8ffd\u52a0\u3057\u305f\u308a\u53d6\u308a\u5916\u3057\u305f\u308a\u3068\u3044\u3063\u305f\u6307\u793a\u3092\u51fa\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u9577\u3044\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\n\u306a\u306e\u3067\u3001\u3053\u306e\u3078\u3093\u3092\u5358\u7d14\u5316\u3059\u308b\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3044\u304f\u3064\u304b\u66f8\u304d\u307e\u3057\u305f\u3002\u30b3\u30e1\u30f3\u30c8\u90e8\u306b\u5f15\u6570\u3068\u304b\u66f8\u3044\u3068\u3044\u305f\u3093\u3067\u9069\u5f53\u306a\u540d\u524d\u3067\u4fdd\u5b58\u3057\u3066\u4f7f\u3063\u3066\u3084\u3063\u3066\u4e0b\u3055\u3044\u3002\n\u5b9f\u884c\u306b\u306fAWS CLI\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5fc5\u8981\u3067\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3084\u3089\u4f55\u3084\u3089\u306f\u3053\u306e\u3078\u3093\u3092\u53c2\u8003\u306b\u3069\u3046\u305e\u3002\u4eca\u56de\u7d39\u4ecb\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3044\u305a\u308c\u3082\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u306e\u3067\u3054\u6ce8\u610f\u3092\u3002\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\nALB\u3068\u305d\u3053\u306b\u7d10\u4ed8\u3044\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u3001\u305d\u3057\u3066\u305d\u306e\u4e0b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u305a\u3089\u3063\u3068\u8868\u793a\u3055\u305b\u305f\u3044\n\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9ID\u3060\u3051\u3058\u3083\u306a\u304f\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9Name Tag\u3092\u8868\u793a\u3055\u305b\u305f\u3044\n\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u540d\u3092\u6307\u5b9a\u3057\u3066ALB\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u3078\u306eAttach, Detach\u3092\u3057\u305f\u3044\n\n\n\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306eARN\u53d6\u5f97\u3059\u308b\u306e\u304c\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u540d\u3060\u3051\u3092\u6307\u5b9a\u3057\u3066\u6e08\u307e\u305b\u305f\u3044\n\n\n\n\nALB\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a\n\nalb_show_health.sh\n#/bin/bash\n#\n# ./alb_show_health.sh Profile ALBName\n# \nalb_show_health() {\n  local profile=$1;\n  local alb=$2\n\n# ALB\u540d\u304b\u3089ALB\u306eARN\u3092\u53d6\u5f97\n  local alb_arn=`aws elbv2 describe-load-balancers \\\n    --profile $profile \\\n    --query 'LoadBalancers[].[LoadBalancerName,LoadBalancerArn]' \\\n    --output text | grep -E \"^${alb}[[:space:]].*\" | cut -f2` || return $?\n\n  if [ -z $alb_arn ] ; then\n    echo \"ALB \\\"$alb\\\" is not exist.\"\n    exit 1\n  fi\n\n# ALB ARN\u304b\u3089Target Group\u3092\u53d6\u5f97\n  local target_groups=`aws elbv2 describe-listeners \\\n    --profile $profile \\\n    --load-balancer-arn $alb_arn \\\n    --query 'Listeners[].DefaultActions[].TargetGroupArn' \\\n    --output text` || return $?\n\n# Target Groups\u306b\u7d10\u4ed8\u3044\u305f\u30db\u30b9\u30c8\u306e\u72b6\u614b\u3092\u4e00\u89a7\u8868\u793a\n  for target_group_arn in ${target_groups[@]}\n  do\n    local target_group_name=`sed 's%^.*:.*/\\(.*\\)\\.*/.*%\\1%' <<< $target_group_arn`\n    echo \"--- Health Status of Target Group \\\"$target_group_name\\\" ---\"\n#\u6b21\u306e\u30eb\u30fc\u30d7\u306e\u305f\u3081\u7a7a\u767d\u3092IFS\u306b\u3057\u306a\u3044\u3088\u3046\u4e00\u6642\u7684\u306b\u5909\u66f4\n    IFS_BACKUP=$IFS\n    IFS=$'\\n'\n# \u53ef\u8996\u6027\u306e\u305f\u3081\u3001EC2\u306eName\u30bf\u30b0\u3092\u53d6\u5f97\u3059\u308b\u30eb\u30fc\u30d7\n    for instance in `aws elbv2 describe-target-health \\\n      --target-group-arn $target_group_arn \\\n      --profile $profile \\\n      --query 'TargetHealthDescriptions[].[Target.Id,TargetHealth.State]' \\\n      --output text`\n      do\n# instance=\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9ID\\t\u30b9\u30c6\u30fc\u30bf\u30b9\n        local instance_id=`echo $instance | cut -f1`\n        local instance_state=`echo $instance | cut -f2`\n        local instance_name=`aws ec2 describe-tags \\\n          --profile $profile \\\n          --filters \"Name=resource-id,Values=$instance_id\" \"Name=tag-key,Values=Name\" \\\n          --query \"Tags[].Value\" \\\n          --output text`\n        echo \"$instance_name $instance_id $instance_state\"\n      done\n    IFS=$IFS_BACKUP\n  done\n}\n\n# \u30e1\u30a4\u30f3\u5b9f\u884c\u90e8\nif [ $# -ne 2 ] ; then\n  echo \"Missing Argument\"\n  echo 'Usage: ./alb_show_health Profile ALBName'\n  exit 1\nfi\n\nalb_show_health $@\n\n\n\n\u5b9f\u884c\u7d50\u679c\u4f8b\n--- Health Status of Target Group \"admin\" ---\nadmin-001 i-0123456789abcdef0 healthy\nadmin-002 i-123456789abcdef01 healthy\n--- Health Status of Target Group \"web\" ---\nweb-001 i-23456789abcdef012 healthy\nweb-002 i-3456789abcdef0123 healthy\nweb-003 i-456789abcdef01234 draining\n\nALB\u306b\u304f\u3063\u3064\u3044\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u3001\u7d10\u4ed8\u3044\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u60c5\u5831\u3092\u3060\u3089\u3060\u3089\u3063\u3068\u51fa\u529b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u203b\u3081\u3063\u3061\u3083API\u30b3\u30fc\u30eb\u3057\u307e\u304f\u3063\u3066\u308b\u3093\u3067\u3046\u307e\u3044\u65b9\u6cd5\u304c\u3042\u3063\u305f\u3089\u77e5\u308a\u305f\u3044\n\u4e0a\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u540d\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9ID\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3088\u3057\u306a\u306bALB\u304b\u3089\u8ffd\u52a0\u3057\u305f\u308a\u524a\u9664\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nALB\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306b\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8ffd\u52a0\u3059\u308b\n\nalb_register_instance.sh\n#/bin/bash\n#\n# ./alb_register_instance.sh Profile TargetGroupName InstanceName\n#\nalb_register_instance() {\n  local profile=$1;\n  local target_group_name=$2\n  local target_instance_name=$3\n\n  local target_group_arn=`aws elbv2 describe-target-groups \\\n    --profile $profile \\\n    --query 'TargetGroups[].[TargetGroupName,TargetGroupArn]' \\\n    --output text | grep -E \"^$target_group_name[[:space:]]\" | cut -f2`\n\n  if [ -z $target_group_arn ] ; then\n    echo \"Target Group \\\"$target_group_name\\\" is not found\"\n    exit 1\n  fi\n\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u540d\u306e\u91cd\u8907\u5bfe\u7b56\u3067ID\u6307\u5b9a\u3092\u8a31\u53ef\n  if [[ \"$target_instance_name\" =~ ^i-[0-9a-f]{17}$ ]]; then\n    target_instance_id=$target_instance_name\n  else\n    local target_instance_id=`aws ec2 describe-instances \\\n      --profile $profile \\\n      --filters \"Name=tag-key,Values=Name\" \"Name=tag-value,Values=$target_instance_name\" \\\n      --query 'Reservations[].Instances[].InstanceId' \\\n      --output text`\n  fi\n\n  if [ -z $target_instance_id ] ; then\n    echo \"Instance \\\"$target_instance_name\\\" is not found\"\n    exit 1\n  fi\n\n# register\n  aws elbv2 register-targets \\\n    --profile $profile \\\n    --target-group-arn $target_group_arn \\\n    --targets Id=$target_instance_id\n\n  return $?\n}\n\n# \u30e1\u30a4\u30f3\u5b9f\u884c\u90e8\nif [ $# -ne 3 ] ; then\n  echo \"Missing Argument\"\n  echo 'Usage: ./alb_register_instance.sh Profile TargetGroup InstanceName'\n  exit 1\nfi\n\nalb_register_instance $@\n\n\n\nALB\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u524a\u9664\u3059\u308b\n\nalb_deregister_instance.sh\n#/bin/bash\n#\n# ./alb_deregister_instance.sh Profile TargetGroupName InstanceName\n#\nalb_deregister_instance() {\n  local profile=$1;\n  local target_group_name=$2\n  local target_instance_name=$3\n\n  local target_group_arn=`aws elbv2 describe-target-groups \\\n    --profile $profile \\\n    --query 'TargetGroups[].[TargetGroupName,TargetGroupArn]' \\\n    --output text | grep -E \"^$target_group_name[[:space:]]\" | cut -f2`\n\n  if [ -z $target_group_arn ] ; then\n    echo \"Target Group \\\"$target_group_name\\\" is not found\"\n    exit 1\n  fi\n\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u540d\u306e\u91cd\u8907\u5bfe\u7b56\u3067ID\u6307\u5b9a\u3092\u8a31\u53ef\n  if [[ \"$target_instance_name\" =~ ^i-[0-9a-f]{17}$ ]]; then\n    target_instance_id=$target_instance_name\n  else\n    local target_instance_id=`aws ec2 describe-instances \\\n      --profile $profile \\\n      --filters \"Name=tag-key,Values=Name\" \"Name=tag-value,Values=$target_instance_name\" \\\n      --query 'Reservations[].Instances[].InstanceId' \\\n      --output text`\n  fi\n\n  if [ -z $target_instance_id ] ; then\n    echo \"Instance \\\"$target_instance_name\\\" is not found\"\n    exit 1\n  fi\n\n# deregister\n  aws elbv2 deregister-targets \\\n    --profile $profile \\\n    --target-group-arn $target_group_arn \\\n    --targets Id=$target_instance_id\n\n  return $?\n}\n\n# \u30e1\u30a4\u30f3\u5b9f\u884c\u90e8\nif [ $# -ne 3 ] ; then\n  echo \"Missing Argument\"\n  echo 'Usage: ./alb_deregister_instance.sh Profile TargetGroup InstanceName'\n  exit 1\nfi\n\nalb_deregister_instance $@\n\n\n\n\u3006\n\u4ee5\u4e0a\u3002\n\u3069\u3061\u3089\u304b\u3068\u3044\u3048\u3070\u5b9f\u7528\u7684\u306a\u65b9\u9762\u306b\u5bc4\u305b\u3001Advent Calendar\u306b\u8f09\u305b\u308b\u306b\u3057\u3066\u306f\u975e\u5e38\u306b\u5730\u5473\u306a\u8a18\u4e8b\u3068\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3054\u3081\u3093\u306a\u3055\u3044\u611f\u6ea2\u308c\u3066\u307e\u3059\u304c\u3001\u660e\u65e5\u306f\u304d\u3063\u3068okochang\u6c0f\u304c\u304b\u3063\u98db\u3070\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3069\u3046\u305e\u3054\u671f\u5f85\u304f\u3060\u3055\u3044\uff01\n\u203b\u3053\u306e\u8a18\u4e8b\u306f[\u30b5\u30fc\u30d0\u30fc\u30ef\u30fc\u30af\u30b9Advent Calendar 2016](http://qiita.com/advent-calendar/2016/serverworks)\u300112\u670813\u65e5\u306e\u8a18\u4e8b\u3068\u3057\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\n## AWS\u306f\u5168\u90e8CLI\u3067\u64cd\u4f5c\u3057\u305f\u3044\n\u30b5\u30fc\u30d0\u30fc\u30ef\u30fc\u30af\u30b9\u3068\u3044\u3048\u3070**AWS**\u3001AWS\u3068\u3044\u3048\u3070**API\u304c\u8c4a\u5bcc**\u3002API\u306e\u64cd\u4f5c\u3068\u3044\u3048\u3070**CLI**\u3001\u3067\u3059\u3088\u306d\uff1f\u305d\u3046\u3067\u3059\u3088\u306d\u3002\n\n## ALB\u6700\u9ad8\u3060\u3051\u3069\u3055\n\nAWS\u306e[**Application Load Balancing(ALB)**](https://aws.amazon.com/jp/blogs/news/new-aws-application-load-balancer/)\u306b\u3064\u3044\u3066\u3002\n\u30d1\u30b9\u6bce\u306b\u7570\u306a\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3092\u632f\u308a\u5206\u3051\u305f\u308a\u975e\u5e38\u306b\u4fbf\u5229\u306aALB\u3067\u3059\u304c\u3001\u3072\u3068\u3064\u3060\u3051\u6c17\u306b\u306a\u308b\u70b9\u304c\u3042\u3063\u305f\u3093\u3067\u3059\u306d\u3002\n\u6a5f\u80fd\u304c\u5897\u3048\u305f\u5206\u3001\u3053\u308c\u307e\u3067\u306e**Elastic Load Balancing(ELB)**\u3068\u6bd4\u8f03\u3057\u3066\u64cd\u4f5c\u304c\u3061\u3087\u3063\u3068\u3081\u3093\u3069\u304f\u3055\u3044\u306a\u30fc\u3001\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u307e\u305aELB\u3068\u6839\u672c\u7684\u306b\u9055\u3046\u306e\u306f**\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7**\u306e\u5b58\u5728\u3067\u3059\u3002\n\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306b\u6240\u5c5e\u3057\u3001\u30d5\u30ed\u30f3\u30c8\u306eALB\u306f\u30eb\u30fc\u30eb\u306b\u57fa\u3065\u3044\u3066\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u3078\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3057\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u5e73\u6613\u306b\u66f8\u304f\u3068\n**ALB <---> \u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7 <---> \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9**\n\u3068\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306eEC2\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u308a\u5916\u3057\u305f\u308a\u3059\u308b\u969b\u306b\u306f\u3001ALB\u3067\u306f\u306a\u304f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u3092\u64cd\u4f5c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u51e6\u7406\u306b\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306eARN\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\n## \u4f8b\u3048\u3070\n\n\u3042\u308bALB\u306b\u7d10\u4ed8\u3044\u3066\u3044\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306eARN\u3092\u5f15\u3063\u5f35\u3063\u3066\u3053\u3088\u3046\u3068\u601d\u3046\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30a7\u30eb\u30b3\u30de\u30f3\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```shell-session\n$ aws elbv2 describe-load-balancers \u00a5\n  --query 'LoadBalancers[].[LoadBalancerName,LoadBalancerArn]' \u00a5\n  --output text | grep -E \"^<ALB\u540d>\u00a5t.*\" | cut -f2 | \u00a5\n  xargs -i aws elbv2 describe-listeners \u00a5\n    --load-balancer-arn {} \u00a5\n    --query 'Listeners[].DefaultActions[].TargetGroupArn' --output text\n```\n\n\u9577\u3044\u3002ALB\u3068\u8a00\u3044\u3064\u3064\u3001API\u306e\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306felbv2\u3063\u3066\u306e\u3082\u306a\u304b\u306a\u304b\u3084\u3084\u3053\u3057\u3044\u3063\u3059\u3088\u306d\u3002\n\u3053\u3046\u3057\u3066\u53d6\u5f97\u3057\u305fARN\u306b\u5bfe\u3057\u3066\u3001\u3055\u3089\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8ffd\u52a0\u3057\u305f\u308a\u53d6\u308a\u5916\u3057\u305f\u308a\u3068\u3044\u3063\u305f\u6307\u793a\u3092\u51fa\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u9577\u3044\u3002\n\n# \u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\n\n\u306a\u306e\u3067\u3001\u3053\u306e\u3078\u3093\u3092\u5358\u7d14\u5316\u3059\u308b\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3044\u304f\u3064\u304b\u66f8\u304d\u307e\u3057\u305f\u3002\u30b3\u30e1\u30f3\u30c8\u90e8\u306b\u5f15\u6570\u3068\u304b\u66f8\u3044\u3068\u3044\u305f\u3093\u3067\u9069\u5f53\u306a\u540d\u524d\u3067\u4fdd\u5b58\u3057\u3066\u4f7f\u3063\u3066\u3084\u3063\u3066\u4e0b\u3055\u3044\u3002\n\u5b9f\u884c\u306b\u306fAWS CLI\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5fc5\u8981\u3067\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u3084\u3089\u4f55\u3084\u3089\u306f[\u3053\u306e\u3078\u3093](https://blog.serverworks.co.jp/tech/2015/06/11/howto-aws-cli-2/)\u3092\u53c2\u8003\u306b\u3069\u3046\u305e\u3002\u4eca\u56de\u7d39\u4ecb\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u3044\u305a\u308c\u3082\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u306e\u3067\u3054\u6ce8\u610f\u3092\u3002\n\n### \u3084\u308a\u305f\u3044\u3053\u3068\n- ALB\u3068\u305d\u3053\u306b\u7d10\u4ed8\u3044\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u3001\u305d\u3057\u3066\u305d\u306e\u4e0b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u305a\u3089\u3063\u3068\u8868\u793a\u3055\u305b\u305f\u3044\n    - \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9ID\u3060\u3051\u3058\u3083\u306a\u304f\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9Name Tag\u3092\u8868\u793a\u3055\u305b\u305f\u3044\n- \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u540d\u3092\u6307\u5b9a\u3057\u3066ALB\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u3078\u306eAttach, Detach\u3092\u3057\u305f\u3044\n    - \u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306eARN\u53d6\u5f97\u3059\u308b\u306e\u304c\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u540d\u3060\u3051\u3092\u6307\u5b9a\u3057\u3066\u6e08\u307e\u305b\u305f\u3044\n\n## ALB\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u8868\u793a\n``` bash:alb_show_health.sh\n#/bin/bash\n#\n# ./alb_show_health.sh Profile ALBName\n# \nalb_show_health() {\n  local profile=$1;\n  local alb=$2\n\n# ALB\u540d\u304b\u3089ALB\u306eARN\u3092\u53d6\u5f97\n  local alb_arn=`aws elbv2 describe-load-balancers \\\n    --profile $profile \\\n    --query 'LoadBalancers[].[LoadBalancerName,LoadBalancerArn]' \\\n    --output text | grep -E \"^${alb}[[:space:]].*\" | cut -f2` || return $?\n\n  if [ -z $alb_arn ] ; then\n    echo \"ALB \\\"$alb\\\" is not exist.\"\n    exit 1\n  fi\n\n# ALB ARN\u304b\u3089Target Group\u3092\u53d6\u5f97\n  local target_groups=`aws elbv2 describe-listeners \\\n    --profile $profile \\\n    --load-balancer-arn $alb_arn \\\n    --query 'Listeners[].DefaultActions[].TargetGroupArn' \\\n    --output text` || return $?\n\n# Target Groups\u306b\u7d10\u4ed8\u3044\u305f\u30db\u30b9\u30c8\u306e\u72b6\u614b\u3092\u4e00\u89a7\u8868\u793a\n  for target_group_arn in ${target_groups[@]}\n  do\n    local target_group_name=`sed 's%^.*:.*/\\(.*\\)\\.*/.*%\\1%' <<< $target_group_arn`\n    echo \"--- Health Status of Target Group \\\"$target_group_name\\\" ---\"\n#\u6b21\u306e\u30eb\u30fc\u30d7\u306e\u305f\u3081\u7a7a\u767d\u3092IFS\u306b\u3057\u306a\u3044\u3088\u3046\u4e00\u6642\u7684\u306b\u5909\u66f4\n    IFS_BACKUP=$IFS\n    IFS=$'\\n'\n# \u53ef\u8996\u6027\u306e\u305f\u3081\u3001EC2\u306eName\u30bf\u30b0\u3092\u53d6\u5f97\u3059\u308b\u30eb\u30fc\u30d7\n    for instance in `aws elbv2 describe-target-health \\\n      --target-group-arn $target_group_arn \\\n      --profile $profile \\\n      --query 'TargetHealthDescriptions[].[Target.Id,TargetHealth.State]' \\\n      --output text`\n      do\n# instance=\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9ID\\t\u30b9\u30c6\u30fc\u30bf\u30b9\n        local instance_id=`echo $instance | cut -f1`\n        local instance_state=`echo $instance | cut -f2`\n        local instance_name=`aws ec2 describe-tags \\\n          --profile $profile \\\n          --filters \"Name=resource-id,Values=$instance_id\" \"Name=tag-key,Values=Name\" \\\n          --query \"Tags[].Value\" \\\n          --output text`\n        echo \"$instance_name $instance_id $instance_state\"\n      done\n    IFS=$IFS_BACKUP\n  done\n}\n\n# \u30e1\u30a4\u30f3\u5b9f\u884c\u90e8\nif [ $# -ne 2 ] ; then\n  echo \"Missing Argument\"\n  echo 'Usage: ./alb_show_health Profile ALBName'\n  exit 1\nfi\n\nalb_show_health $@\n``` \n### \u5b9f\u884c\u7d50\u679c\u4f8b\n```shell-session\n--- Health Status of Target Group \"admin\" ---\nadmin-001 i-0123456789abcdef0 healthy\nadmin-002 i-123456789abcdef01 healthy\n--- Health Status of Target Group \"web\" ---\nweb-001 i-23456789abcdef012 healthy\nweb-002 i-3456789abcdef0123 healthy\nweb-003 i-456789abcdef01234 draining\n```\nALB\u306b\u304f\u3063\u3064\u3044\u305f\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306b\u3001\u7d10\u4ed8\u3044\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u60c5\u5831\u3092\u3060\u3089\u3060\u3089\u3063\u3068\u51fa\u529b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u203b\u3081\u3063\u3061\u3083API\u30b3\u30fc\u30eb\u3057\u307e\u304f\u3063\u3066\u308b\u3093\u3067\u3046\u307e\u3044\u65b9\u6cd5\u304c\u3042\u3063\u305f\u3089\u77e5\u308a\u305f\u3044\n\n\u4e0a\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u540d\u3068\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9ID\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3088\u3057\u306a\u306bALB\u304b\u3089\u8ffd\u52a0\u3057\u305f\u308a\u524a\u9664\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## ALB\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306b\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8ffd\u52a0\u3059\u308b\n```bash:alb_register_instance.sh\n#/bin/bash\n#\n# ./alb_register_instance.sh Profile TargetGroupName InstanceName\n#\nalb_register_instance() {\n  local profile=$1;\n  local target_group_name=$2\n  local target_instance_name=$3\n\n  local target_group_arn=`aws elbv2 describe-target-groups \\\n    --profile $profile \\\n    --query 'TargetGroups[].[TargetGroupName,TargetGroupArn]' \\\n    --output text | grep -E \"^$target_group_name[[:space:]]\" | cut -f2`\n\n  if [ -z $target_group_arn ] ; then\n    echo \"Target Group \\\"$target_group_name\\\" is not found\"\n    exit 1\n  fi\n\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u540d\u306e\u91cd\u8907\u5bfe\u7b56\u3067ID\u6307\u5b9a\u3092\u8a31\u53ef\n  if [[ \"$target_instance_name\" =~ ^i-[0-9a-f]{17}$ ]]; then\n    target_instance_id=$target_instance_name\n  else\n    local target_instance_id=`aws ec2 describe-instances \\\n      --profile $profile \\\n      --filters \"Name=tag-key,Values=Name\" \"Name=tag-value,Values=$target_instance_name\" \\\n      --query 'Reservations[].Instances[].InstanceId' \\\n      --output text`\n  fi\n\n  if [ -z $target_instance_id ] ; then\n    echo \"Instance \\\"$target_instance_name\\\" is not found\"\n    exit 1\n  fi\n\n# register\n  aws elbv2 register-targets \\\n    --profile $profile \\\n    --target-group-arn $target_group_arn \\\n    --targets Id=$target_instance_id\n\n  return $?\n}\n\n# \u30e1\u30a4\u30f3\u5b9f\u884c\u90e8\nif [ $# -ne 3 ] ; then\n  echo \"Missing Argument\"\n  echo 'Usage: ./alb_register_instance.sh Profile TargetGroup InstanceName'\n  exit 1\nfi\n\nalb_register_instance $@\n```\n## ALB\u30bf\u30fc\u30b2\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u30ab\u30b8\u30e5\u30a2\u30eb\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u524a\u9664\u3059\u308b\n```bash:alb_deregister_instance.sh\n#/bin/bash\n#\n# ./alb_deregister_instance.sh Profile TargetGroupName InstanceName\n#\nalb_deregister_instance() {\n  local profile=$1;\n  local target_group_name=$2\n  local target_instance_name=$3\n\n  local target_group_arn=`aws elbv2 describe-target-groups \\\n    --profile $profile \\\n    --query 'TargetGroups[].[TargetGroupName,TargetGroupArn]' \\\n    --output text | grep -E \"^$target_group_name[[:space:]]\" | cut -f2`\n\n  if [ -z $target_group_arn ] ; then\n    echo \"Target Group \\\"$target_group_name\\\" is not found\"\n    exit 1\n  fi\n\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u540d\u306e\u91cd\u8907\u5bfe\u7b56\u3067ID\u6307\u5b9a\u3092\u8a31\u53ef\n  if [[ \"$target_instance_name\" =~ ^i-[0-9a-f]{17}$ ]]; then\n    target_instance_id=$target_instance_name\n  else\n    local target_instance_id=`aws ec2 describe-instances \\\n      --profile $profile \\\n      --filters \"Name=tag-key,Values=Name\" \"Name=tag-value,Values=$target_instance_name\" \\\n      --query 'Reservations[].Instances[].InstanceId' \\\n      --output text`\n  fi\n\n  if [ -z $target_instance_id ] ; then\n    echo \"Instance \\\"$target_instance_name\\\" is not found\"\n    exit 1\n  fi\n\n# deregister\n  aws elbv2 deregister-targets \\\n    --profile $profile \\\n    --target-group-arn $target_group_arn \\\n    --targets Id=$target_instance_id\n\n  return $?\n}\n\n# \u30e1\u30a4\u30f3\u5b9f\u884c\u90e8\nif [ $# -ne 3 ] ; then\n  echo \"Missing Argument\"\n  echo 'Usage: ./alb_deregister_instance.sh Profile TargetGroup InstanceName'\n  exit 1\nfi\n\nalb_deregister_instance $@\n``` \n# \u3006\n\n\u4ee5\u4e0a\u3002\n\u3069\u3061\u3089\u304b\u3068\u3044\u3048\u3070\u5b9f\u7528\u7684\u306a\u65b9\u9762\u306b\u5bc4\u305b\u3001Advent Calendar\u306b\u8f09\u305b\u308b\u306b\u3057\u3066\u306f\u975e\u5e38\u306b\u5730\u5473\u306a\u8a18\u4e8b\u3068\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3054\u3081\u3093\u306a\u3055\u3044\u611f\u6ea2\u308c\u3066\u307e\u3059\u304c\u3001\u660e\u65e5\u306f\u304d\u3063\u3068[okochang\u6c0f](http://qiita.com/okochang)\u304c\u304b\u3063\u98db\u3070\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3069\u3046\u305e\u3054\u671f\u5f85\u304f\u3060\u3055\u3044\uff01\n", "tags": ["AWS", "cli", "ALB", "Bash"]}