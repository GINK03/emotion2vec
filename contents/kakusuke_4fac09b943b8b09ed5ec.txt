{"context": "\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n\u30ab\u30b9\u30bf\u30e0\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3092\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5316\u3057\u305f\u3044\n\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u5bfe\u3057\u3066 model-based form \u3092\u4f7f\u3044\u305f\u3044\n\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5f8c\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u7b49\u3092\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5185\u306b\u5185\u5305\u3057\u305f\u3044\n\n\n\u30ab\u30b9\u30bf\u30e0\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3092\u4f5c\u308b\u306b\u306f\nNgModel\u3084FormControlName\u306b\u5bfe\u5fdc\u3059\u308b\u306b\u306fControlValueAccessor\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3044\u3044\u3063\u307d\u3044\u3002\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u305f\u3002\nCustom Form Controls in Angular 2 by thoughtram\n\n\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5185\u304b\u3089\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u3092\u691c\u77e5\u3059\u308b\n\u666e\u901a\u306b\u4f5c\u308d\u3046\u3068\u3059\u308b\u3068\u3001\u5185\u90e8\u304b\u3089FormControl\u306eerrors\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u305a\u3001\u4f55\u304c\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u305f\u3081\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u51fa\u3057\u3088\u3046\u304c\u306a\u3044\u3002\n\u7d50\u8ad6\u3068\u3057\u3066\u306f\u3001Injector\u304b\u3089NgControl\u3092\u53d6\u308a\u51fa\u305b\u3070\u53ef\u80fd\u306e\u3088\u3046\u3060\u3002\n\n\u6700\u7d42\u7684\u306a\u30b3\u30fc\u30c9\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u3063\u305f\n@Component({\n  selector: 'custom-input',\n  template: `\n  <input type=\"text\" [(ngModel)]=\"value\" (blur)=\"onBlur()\"/>\n  <div *ngIf=\"ngControl && ngControl.invalid && (ngControl.touched || ngControl.dirty)\" class=\"error\">\n    <span *ngIf=\"ngControl.errors.required\">\u5fc5\u9808\u9805\u76ee\u3067\u3059\u3002</span>\n  </div>\n  `,\n  styles: [`\n  :host {\n    display: inline-block;\n    position: relative;\n  }\n  .error {\n      display: block;\n      top: calc(100% + 12px);\n      position: absolute;\n      padding: .5em 1em .4em;\n      background-color: #f66;\n      border: 1px solid #f00;\n      border-radius: 5px;\n      color: #fff;\n      z-index: 10;\n  }\n  .error:after, .error:before {\n    content: '';\n    position: absolute;\n    bottom: 100%;\n    left: 15px;\n    border: solid transparent;\n  }\n  .error:after {\n    margin-left: 1px;\n    border-bottom-color: #f66;\n    border-width: 7px;\n  }\n  .error:before {\n    border-bottom-color: #f00;\n    border-width: 8px;\n  }\n  `],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CustomInput),\n    multi: true\n  }]\n})\nexport class CustomInput implements ControlValueAccessor, OnInit {\n    private innerValue: any = '';\n    private ngControl: NgControl;\n\n    private onTouchedCallback = () => {};\n    private onChangeCallback = (_: any) => {};\n\n    constructor(private injector: Injector) { }\n\n    ngOnInit(): void {\n      this.ngControl = this.injector.get(NgControl);\n    }\n\n    get value(): any {\n        return this.innerValue;\n    };\n\n    set value(v: any) {\n        if (v !== this.innerValue) {\n            this.innerValue = v;\n            this.onChangeCallback(v);\n        }\n    }\n\n    onBlur() { this.onTouchedCallback() }\n\n    writeValue(value: any) {\n        if (value !== this.innerValue) {\n            this.innerValue = value;\n        }\n    }\n    registerOnChange(fn: any) { this.onChangeCallback = fn }\n    registerOnTouched(fn: any) { this.onTouchedCallback = fn }\n}\n\nhttps://embed.plnkr.co/x2mpgjRiz0i6lfPHIgX4/\n# \u3084\u308a\u305f\u3044\u3053\u3068\n\n* \u30ab\u30b9\u30bf\u30e0\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3092\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5316\u3057\u305f\u3044\n* \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u5bfe\u3057\u3066 model-based form \u3092\u4f7f\u3044\u305f\u3044\n* \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5f8c\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u7b49\u3092\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5185\u306b\u5185\u5305\u3057\u305f\u3044\n\n# \u30ab\u30b9\u30bf\u30e0\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3092\u4f5c\u308b\u306b\u306f\n\n`NgModel`\u3084`FormControlName`\u306b\u5bfe\u5fdc\u3059\u308b\u306b\u306f`ControlValueAccessor`\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3044\u3044\u3063\u307d\u3044\u3002\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u305f\u3002\n[Custom Form Controls in Angular 2 by thoughtram](http://blog.thoughtram.io/angular/2016/07/27/custom-form-controls-in-angular-2.html)\n\n# \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5185\u304b\u3089\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u3092\u691c\u77e5\u3059\u308b\n\n\u666e\u901a\u306b\u4f5c\u308d\u3046\u3068\u3059\u308b\u3068\u3001\u5185\u90e8\u304b\u3089`FormControl`\u306e`errors`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u305a\u3001\u4f55\u304c\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u305f\u3081\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u51fa\u3057\u3088\u3046\u304c\u306a\u3044\u3002\n\u7d50\u8ad6\u3068\u3057\u3066\u306f\u3001`Injector`\u304b\u3089`NgControl`\u3092\u53d6\u308a\u51fa\u305b\u3070\u53ef\u80fd\u306e\u3088\u3046\u3060\u3002\n\n# \u6700\u7d42\u7684\u306a\u30b3\u30fc\u30c9\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u3063\u305f\n\n```ts\n@Component({\n  selector: 'custom-input',\n  template: `\n  <input type=\"text\" [(ngModel)]=\"value\" (blur)=\"onBlur()\"/>\n  <div *ngIf=\"ngControl && ngControl.invalid && (ngControl.touched || ngControl.dirty)\" class=\"error\">\n    <span *ngIf=\"ngControl.errors.required\">\u5fc5\u9808\u9805\u76ee\u3067\u3059\u3002</span>\n  </div>\n  `,\n  styles: [`\n  :host {\n    display: inline-block;\n    position: relative;\n  }\n  .error {\n      display: block;\n      top: calc(100% + 12px);\n      position: absolute;\n      padding: .5em 1em .4em;\n      background-color: #f66;\n      border: 1px solid #f00;\n      border-radius: 5px;\n      color: #fff;\n      z-index: 10;\n  }\n  .error:after, .error:before {\n    content: '';\n    position: absolute;\n    bottom: 100%;\n    left: 15px;\n    border: solid transparent;\n  }\n  .error:after {\n    margin-left: 1px;\n    border-bottom-color: #f66;\n    border-width: 7px;\n  }\n  .error:before {\n    border-bottom-color: #f00;\n    border-width: 8px;\n  }\n  `],\n  providers: [{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CustomInput),\n    multi: true\n  }]\n})\nexport class CustomInput implements ControlValueAccessor, OnInit {\n    private innerValue: any = '';\n    private ngControl: NgControl;\n    \n    private onTouchedCallback = () => {};\n    private onChangeCallback = (_: any) => {};\n\n    constructor(private injector: Injector) { }\n    \n    ngOnInit(): void {\n      this.ngControl = this.injector.get(NgControl);\n    }\n\n    get value(): any {\n        return this.innerValue;\n    };\n\n    set value(v: any) {\n        if (v !== this.innerValue) {\n            this.innerValue = v;\n            this.onChangeCallback(v);\n        }\n    }\n\n    onBlur() { this.onTouchedCallback() }\n\n    writeValue(value: any) {\n        if (value !== this.innerValue) {\n            this.innerValue = value;\n        }\n    }\n    registerOnChange(fn: any) { this.onChangeCallback = fn }\n    registerOnTouched(fn: any) { this.onTouchedCallback = fn }\n}\n```\n\nhttps://embed.plnkr.co/x2mpgjRiz0i6lfPHIgX4/\n", "tags": ["Angular2", "TypeScript"]}