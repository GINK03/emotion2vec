{"context": " More than 1 year has passed since last update.\u6b63\u898f\u8868\u73fe\u3067\u6587\u5b57\u5217\u306e\u7f6e\u304d\u63db\u3048\u3092\u7e8f\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\u3042\u307e\u308a\u81ea\u8eab\u306a\u3044\u3093\u3067\u3001\u300c\u304a\u304b\u3057\u3044\u3088\u300d\u300c\u3053\u3046\u3057\u305f\u65b9\u304c\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u300d\u3063\u3066\u3044\u3046\u306e\u304c\u3042\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u4e0b\u3055\u3044  \n\n\u306a\u304a\u3001\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u306f\u901a\u3057\u3066\u3044\u307e\u3059\u304c\u3059\u3079\u3066\u3092\u7db2\u7f85\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u3054\u4f7f\u7528\u306b\u306a\u308b\u969b\u306b\u306f\u3054\u81ea\u8eab\u3067\u5341\u5206\u691c\u8a3c\u306e\u4e0a\u3054\u5229\u7528\u4e0b\u3055\u3044  \n\n\nJavaScript\u3067\u6b63\u898f\u8868\u73fe\uff08\u6587\u5b57\u5217\u5236\u9650\u7de8\uff09\nJavaScript\u3067\u6b63\u898f\u8868\u73fe\uff08\u6587\u5b57\u5217\u7f6e\u63db\u3048\u7de8\uff09\n\nJavaScript\u3067\u6b63\u898f\u8868\u73fe\uff08\u6570\u5b57\u64cd\u4f5c\u7de8\uff09 \u3053\u306e\u6295\u7a3f \nJavaScript\u3067\u6b63\u898f\u8868\u73fe\uff08\u30a8\u30b9\u30b1\u30fc\u30d7\u7de8\uff09\n\n/**\n * \u6587\u5b57\u5217\u3092\u6574\u6570\u306b\u3057\u3066\u8fd4\u3059\uff08parseInt\uff09\n *\n * \u5168\u89d2\u306e\u6570\u5b57\u306f\u534a\u89d2\u306b\u3059\u308b\n * \u5168\u89d2\u30cf\u30a4\u30d5\u30f3\u3001\u5168\u89d2\u30c0\u30c3\u30b7\u30e5\u3001\u5168\u89d2\u30de\u30a4\u30ca\u30b9\u8a18\u53f7\u3001\u9577\u97f3\u7b26\u306f\u534a\u89d2\u30cf\u30a4\u30d5\u30f3\u306b\u5909\u63db\n * \u5148\u982d\u306e\u30de\u30a4\u30ca\u30b9\u4ee5\u5916\u306e\u30cf\u30a4\u30d5\u30f3\u306f\u524a\u9664\n *\n * \u300cabcd\u3000\uff0d\u30fc\uff11\uff12\uff13\u304b\u30fc\uff14\uff15\uff16\u300d\u2192\u300c-123456\u300d\n * \u300cabc123456def\u300d\u2192\u300c123456\u300d\n * \u300cA0000123456\u300d\u2192\u300c123456\u300d\n * \u300cA0000123.456\u300d\u2192\u300c123\u300d\n * \u300cA0-000123.456\u300d\u2192\u300c123\u300d\n * \u300cA123-00123.456\u300d\u2192\u300c12300123\u300d\n * \u300cA-00000123456\u300d\u2192\u300c-123456\u300d\n *\n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n */\nvar toInt = function (str) {\n    str = str\n            .replace(/[\uff10-\uff19\uff0e]/g, function (s) {\n                return String.fromCharCode(s.charCodeAt(0) - 65248);\n            })\n            .replace(/[\u2010\uff0d\u2015\u30fc]/g, '-')\n            .replace(/[^\\-\\d\\.]/g, '')\n            .replace(/(?!^\\-)[^\\d\\.]/g, '');\n    return parseInt(str, 10);\n};\n\n/**\n * \u6587\u5b57\u5217\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u3057\u3066\u8fd4\u3059\uff08parseFloat\uff09\n *\n * \u5168\u89d2\u306e\u6570\u5b57\u306f\u534a\u89d2\u306b\u3059\u308b\n * \u5168\u89d2\u30cf\u30a4\u30d5\u30f3\u3001\u5168\u89d2\u30c0\u30c3\u30b7\u30e5\u3001\u5168\u89d2\u30de\u30a4\u30ca\u30b9\u8a18\u53f7\u3001\u9577\u97f3\u7b26\u306f\u534a\u89d2\u30cf\u30a4\u30d5\u30f3\u306b\u5909\u63db\n * \u5148\u982d\u306e\u30de\u30a4\u30ca\u30b9\u4ee5\u5916\u306e\u30cf\u30a4\u30d5\u30f3\u306f\u524a\u9664\n * \u6570\u5b57\u4ee5\u5916\u306e\u6587\u5b57\u306f\u524a\u9664\n * \n * \u300cabcd\u3000\uff0d\u30fc\uff11\uff12\uff13\u304b\u30fc\uff14\uff0e\uff15\uff16\u300d\u2192\u300c-1234.56\u300d\n * \u300cabc123456def\u300d\u2192\u300c123456\u300d\n * \u300c12.34.56\u300d\u2192\u300c12.34\u300d\n * \u300cA0000123456\u300d\u2192\u300c123456\u300d\n * \u300cA0000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA0-000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA123-00123.456\u300d\u2192\u300c12300123.456\u300d\n * \u300cA-00000123456\u300d\u2192\u300c-123456\u300d\n * \n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n */\nvar toFloat = function (str) {\n    str = str\n            .replace(/[\uff10-\uff19\uff0e]/g, function (s) {\n                return String.fromCharCode(s.charCodeAt(0) - 65248);\n            })\n            .replace(/[\u2010\uff0d\u2015\u30fc]/g, '-')\n            .replace(/[^\\-\\d\\.]/g, '')\n            .replace(/(?!^\\-)[^\\d\\.]/g, '');\n    return parseFloat(str);\n};\n\n/**\n * \u6570\u5b57\uff08\u6587\u5b57\u5217\uff09\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\n *\n * \u5168\u89d2\u306e\u6570\u5b57\u306f\u534a\u89d2\u306b\u3059\u308b\n * \u5168\u89d2\u30cf\u30a4\u30d5\u30f3\u3001\u5168\u89d2\u30c0\u30c3\u30b7\u30e5\u3001\u5168\u89d2\u30de\u30a4\u30ca\u30b9\u8a18\u53f7\u3001\u9577\u97f3\u7b26\u306f\u534a\u89d2\u30cf\u30a4\u30d5\u30f3\u306b\u5909\u63db\n * \u5148\u982d\u306e\u30de\u30a4\u30ca\u30b9\u4ee5\u5916\u306e\u30cf\u30a4\u30d5\u30f3\u306f\u524a\u9664\n * \u6570\u5b57\u4ee5\u5916\u306e\u6587\u5b57\u306f\u524a\u9664\n * parseFloat\u3092\u901a\u3057\u305f\u3082\u306e\u3092\u5c0f\u6570\u70b9\u4ee5\u4e0bnum\u3067\u5207\u308a\u6368\u3066\n * NaN\u306e\u6642\u306f0\n *\n * Number.prototype.toFixed()\u306f\u5c0f\u6570\u70b9\u4ee5\u4e0b\u3092\u8fd1\u4f3c\u5024\u3067\u8868\u73fe\u3059\u308b\u70ba\n * \n * \u5f15\u6570num\u304c\u6307\u5b9a\u306a\u3057\u3001\u3082\u3057\u304f\u306f0\u306e\u6642\n * \u300cabcd\u3000\uff0d\u30fc\uff11\uff12\uff13\u304b\u30fc\uff14\uff0e\uff15\uff16\u300d\u2192\u300c-1234.56\u300d\n * \u300cabc123456def\u300d\u2192\u300c123456\u300d\n * \u300c12.34.56\u300d\u2192\u300c12.34\u300d\n * \u300cA0000123456\u300d\u2192\u300c123456\u300d\n * \u300cA0000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA0-000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA123-00123.456\u300d\u2192\u300c12300123.456\u300d\n * \u300cA-00000123456\u300d\u2192\u300c-123456\u300d\n * \n * \u5f15\u6570num\u304c1\u306e\u6642\n * \u300cabcd\u3000\uff0d\u30fc\uff11\uff12\uff13\u304b\u30fc\uff14\uff0e\uff15\uff16\u300d\u2192\u300c-1234.5\u300d\n * \u300cabc123456def\u300d\u2192\u300c123456.0\u300d\n * \u300c12.34.56\u300d\u2192\u300c12.3\u300d\n * \u300cA0000123456\u300d\u2192\u300c123456.0\u300d\n * \u300cA0000123.456\u300d\u2192\u300c123.4\u300d\n * \u300cA0-000123.456\u300d\u2192\u300c123.4\u300d\n * \u300cA123-00123.456\u300d\u2192\u300c12300123.4\u300d\n * \u300cA-00000123456\u300d\u2192\u300c-123456.0\u300d\n * \n * \u5f15\u6570num\u304c3\u306e\u6642\n * \u300cabcd\u3000\uff0d\u30fc\uff11\uff12\uff13\u304b\u30fc\uff14\uff0e\uff15\uff16\u300d\u2192\u300c-1234.560\u300d\n * \u300cabc123456def\u300d\u2192\u300c123456.000\u300d\n * \u300c12.34.56\u300d\u2192\u300c12.340\u300d\n * \u300cA0000123456\u300d\u2192\u300c123456.000\u300d\n * \u300cA0000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA0-000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA123-00123.456\u300d\u2192\u300c12300123.456\u300d\n * \u300cA-00000123456\u300d\u2192\u300c-123456.000\u300d\n * \n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n * @param {Number} num \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f0\u300c\u6574\u6570\u300d\u3001\u30de\u30a4\u30ca\u30b9\u306f\u7121\u8996\uff09\n * @param {Boolean} useMinus \u30de\u30a4\u30ca\u30b9\u3092\u524a\u9664\u3059\u308b\u304b\u3069\u3046\u304b false\u306e\u6642\u306e\u307f\u30de\u30a4\u30ca\u30b9\u3092\u524a\u9664\n */\nvar numString = function (str, num, useMinus) {\n    num = parseInt(num, 10);\n    num = isNaN(num) ? 0 : num;\n\n    // \u4e00\u65e6float\u306b\u5909\u63db\n    str = str\n            .replace(/[\uff10-\uff19\uff0e]/g, function (s) {\n                return String.fromCharCode(s.charCodeAt(0) - 65248);\n            })\n            .replace(/[\u2010\uff0d\u2015\u30fc]/g, '-')\n            .replace(/[^\\-\\d\\.]/g, '')\n            .replace(/(?!^\\-)[^\\d\\.]/g, '');\n    str = parseFloat(str);\n    if (str < 0 && useMinus === false) {\n        str *= -1;\n    }\n    var split = str.toString().split('.');\n    var dec = '';\n    if (num > 0) {\n        if (split.length > 1) {\n            dec = '.' + (split[1] + new Array(num + 1).join('0')).slice(0, num);\n        } else {\n            dec = '.' + new Array(num + 1).join('0').slice(0, num);\n        }\n    }\n    return split[0] + dec;\n};\n\n/**\n * \u6570\u5b57\u306e\u6841\u533a\u5207\u308a\n * \n * \u300c12345678\u300d\u2192\u300c12,345,678\u300d\n * \u300c12345678.123456\u300d\u2192\u300c12,345,678.123456\u300d\n * \u300c-1234678\u300d\u2192\u300c-12,345,678\u300d\n * \u300c12,345,678\u300d\u2192\u300c12,345,678\u300d\n * \u300c12,345,6789\u300d\u2192\u300c12,345,6,789\u300d\uff08\u6841\u6570\u3092\u518d\u8a08\u7b97\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u6ce8\u610f\uff09\n * \u300c12345678\u5186\u300d\u2192\u300c12,345,678\u5186\u300d\n * \u300c-12345\u5186\u300d\u2192\u300c-12,345\u5186\u300d\n *\n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n */\nvar numFormat = function (str) {\n    var split = str.split('.');\n    split[0] = split[0].replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,');\n    return split.length === 1 ? split[0] : split[0] + '.' + split[1];\n};\n\n/**\n * \u6841\u533a\u5207\u308a\u306e\u6570\u5b57\u304b\u3089\u533a\u5207\u308a\u6587\u5b57\u306e\u524a\u9664\n *\n * \u300c12,345,678\u300d\u2192\u300c12345678\u300d\n *\n */\nvar removeFigure = function (str) {\n    return str.replace(/,/g, '');\n};\n\n\u756a\u5916\u7de8\n/**\n * \u6587\u5b57\u5217\u3092\u53f3\u304b\u3089num\u6587\u5b57\u5207\u308a\u51fa\u3059\uff08num\u6587\u5b57\u306b\u8db3\u308a\u306a\u3044\u5834\u5408\u306fpad\u3067\u57cb\u3081\u308b\uff09\n *\n * \u5f15\u6570num\u306e\u6307\u5b9a\u306a\u3057\u3001\u3082\u3057\u304f\u306f2\u300c123\u300d\u2192\u300c23\u300d\n * \u5f15\u6570num\u304c5\u300c123\u300d\u2192\u300c00123\u300d\n * \u5f15\u6570num\u304c-10 \u300c123\u300d\u2192\u300c23\u300d\n * \u5f15\u6570num\u304c0\uff08\u5909\u5316\u306a\u3057\uff09\u300c123\u300d\u2192\u300c123\u300d\n * \u5f15\u6570num\u304c5\u3001pad\u304ca\u300c123\u300d\u2192\u300caa123\u300d\n * \u5f15\u6570num\u304c10\u3001pad\u304cab\u300c123\u300d\u2192\u300cbababab123\u300d\n * \n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n * @param {Number} num \u5207\u308a\u51fa\u3059\u6587\u5b57\u6570\uff08\u6307\u5b9a\u306a\u3057\u3082\u3057\u304f\u306f0\u3088\u308a\u5c0f\u3055\u3044\u3068\u304d\u306f2\uff09\n * @param {String} pad \u6841\u6570\u306b\u8db3\u308a\u306a\u3044\u5834\u5408\u306b\u5de6\u5074\u3092\u57cb\u3081\u308b\u6587\u5b57\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f0\uff09\n */\nvar padSlice = function (str, num, pad) {\n    num = parseInt(num, 10);\n    num = isNaN(num) || num < 0 ? 2 : num;\n    pad = pad === undefined ? '0' : pad.toString();\n    return (new Array(num + 1).join(pad) + str).slice(num * -1);\n};\n\n/**\n * \u6587\u5b57\u5217\u306e\u5de6\u5074\u3092\u6841\u6570num\u306b\u306a\u308b\u307e\u3067\u57cb\u3081\u308b\uff08num\u3092\u8d85\u3048\u308b\u5834\u5408\u306f\u4f55\u3082\u3057\u306a\u3044\uff09\n *\n * \u5f15\u6570num\u306e\u6307\u5b9a\u306a\u3057\u3001\u3082\u3057\u304f\u306f2\u300c123\u300d\u2192\u300c123\u300d\n * \u5f15\u6570num\u304c5\u300c123\u300d\u2192\u300c00123\u300d\n * \u5f15\u6570num\u304c-10 \u300c123\u300d\u2192\u300c123\u300d\n * \u5f15\u6570num\u304c0\u300c123\u300d\u2192\u300c123\u300d\n * \u5f15\u6570num\u304c5\u3001pad\u304ca\u300c123\u300d\u2192\u300caa123\u300d\n * \u5f15\u6570num\u304c10\u3001pad\u304cab\u300c123\u300d\u2192\u300cabababab123\u300d\n * \n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n * @param {Number} num \u6587\u5b57\u6570\uff08\u6307\u5b9a\u306a\u3057\u3082\u3057\u304f\u306f0\u3088\u308a\u5c0f\u3055\u3044\u3068\u304d\u306f2\uff09\n * @param {String} pad \u6841\u6570\u306b\u8db3\u308a\u306a\u3044\u5834\u5408\u306b\u5de6\u5074\u3092\u57cb\u3081\u308b\u6587\u5b57\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f0\uff09\n */\nvar padFill = function (str, num, pad) {\n    num = parseInt(num, 10);\n    num = isNaN(num) || num < 0 ? 2 : num;\n    pad = pad === undefined ? '0' : pad.toString();\n    while (str.length < num) {\n        str = pad + str;\n    }\n    return str;\n};\n\n\u6b63\u898f\u8868\u73fe\u3067\u6587\u5b57\u5217\u306e\u7f6e\u304d\u63db\u3048\u3092\u7e8f\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3042\u307e\u308a\u81ea\u8eab\u306a\u3044\u3093\u3067\u3001\u300c\u304a\u304b\u3057\u3044\u3088\u300d\u300c\u3053\u3046\u3057\u305f\u65b9\u304c\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u300d\u3063\u3066\u3044\u3046\u306e\u304c\u3042\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u4e0b\u3055\u3044 :smile: \n\n> \u306a\u304a\u3001\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u306f\u901a\u3057\u3066\u3044\u307e\u3059\u304c\u3059\u3079\u3066\u3092\u7db2\u7f85\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u3054\u4f7f\u7528\u306b\u306a\u308b\u969b\u306b\u306f\u3054\u81ea\u8eab\u3067\u5341\u5206\u691c\u8a3c\u306e\u4e0a\u3054\u5229\u7528\u4e0b\u3055\u3044 :bangbang: \n\n* [JavaScript\u3067\u6b63\u898f\u8868\u73fe\uff08\u6587\u5b57\u5217\u5236\u9650\u7de8\uff09](http://qiita.com/hrdaya/items/2cd5cc19cae35061225c)\n* [JavaScript\u3067\u6b63\u898f\u8868\u73fe\uff08\u6587\u5b57\u5217\u7f6e\u63db\u3048\u7de8\uff09](http://qiita.com/hrdaya/items/291276a5a20971592216)\n* [JavaScript\u3067\u6b63\u898f\u8868\u73fe\uff08\u6570\u5b57\u64cd\u4f5c\u7de8\uff09](http://qiita.com/hrdaya/items/9afafc571827358de3cd):point_left: \u3053\u306e\u6295\u7a3f \n* [JavaScript\u3067\u6b63\u898f\u8868\u73fe\uff08\u30a8\u30b9\u30b1\u30fc\u30d7\u7de8\uff09](http://qiita.com/hrdaya/items/4beebbdb57009b405d2d)\n\n```js\n/**\n * \u6587\u5b57\u5217\u3092\u6574\u6570\u306b\u3057\u3066\u8fd4\u3059\uff08parseInt\uff09\n *\n * \u5168\u89d2\u306e\u6570\u5b57\u306f\u534a\u89d2\u306b\u3059\u308b\n * \u5168\u89d2\u30cf\u30a4\u30d5\u30f3\u3001\u5168\u89d2\u30c0\u30c3\u30b7\u30e5\u3001\u5168\u89d2\u30de\u30a4\u30ca\u30b9\u8a18\u53f7\u3001\u9577\u97f3\u7b26\u306f\u534a\u89d2\u30cf\u30a4\u30d5\u30f3\u306b\u5909\u63db\n * \u5148\u982d\u306e\u30de\u30a4\u30ca\u30b9\u4ee5\u5916\u306e\u30cf\u30a4\u30d5\u30f3\u306f\u524a\u9664\n *\n * \u300cabcd\u3000\uff0d\u30fc\uff11\uff12\uff13\u304b\u30fc\uff14\uff15\uff16\u300d\u2192\u300c-123456\u300d\n * \u300cabc123456def\u300d\u2192\u300c123456\u300d\n * \u300cA0000123456\u300d\u2192\u300c123456\u300d\n * \u300cA0000123.456\u300d\u2192\u300c123\u300d\n * \u300cA0-000123.456\u300d\u2192\u300c123\u300d\n * \u300cA123-00123.456\u300d\u2192\u300c12300123\u300d\n * \u300cA-00000123456\u300d\u2192\u300c-123456\u300d\n *\n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n */\nvar toInt = function (str) {\n    str = str\n            .replace(/[\uff10-\uff19\uff0e]/g, function (s) {\n                return String.fromCharCode(s.charCodeAt(0) - 65248);\n            })\n            .replace(/[\u2010\uff0d\u2015\u30fc]/g, '-')\n            .replace(/[^\\-\\d\\.]/g, '')\n            .replace(/(?!^\\-)[^\\d\\.]/g, '');\n    return parseInt(str, 10);\n};\n```\n\n```js\n/**\n * \u6587\u5b57\u5217\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u3057\u3066\u8fd4\u3059\uff08parseFloat\uff09\n *\n * \u5168\u89d2\u306e\u6570\u5b57\u306f\u534a\u89d2\u306b\u3059\u308b\n * \u5168\u89d2\u30cf\u30a4\u30d5\u30f3\u3001\u5168\u89d2\u30c0\u30c3\u30b7\u30e5\u3001\u5168\u89d2\u30de\u30a4\u30ca\u30b9\u8a18\u53f7\u3001\u9577\u97f3\u7b26\u306f\u534a\u89d2\u30cf\u30a4\u30d5\u30f3\u306b\u5909\u63db\n * \u5148\u982d\u306e\u30de\u30a4\u30ca\u30b9\u4ee5\u5916\u306e\u30cf\u30a4\u30d5\u30f3\u306f\u524a\u9664\n * \u6570\u5b57\u4ee5\u5916\u306e\u6587\u5b57\u306f\u524a\u9664\n * \n * \u300cabcd\u3000\uff0d\u30fc\uff11\uff12\uff13\u304b\u30fc\uff14\uff0e\uff15\uff16\u300d\u2192\u300c-1234.56\u300d\n * \u300cabc123456def\u300d\u2192\u300c123456\u300d\n * \u300c12.34.56\u300d\u2192\u300c12.34\u300d\n * \u300cA0000123456\u300d\u2192\u300c123456\u300d\n * \u300cA0000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA0-000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA123-00123.456\u300d\u2192\u300c12300123.456\u300d\n * \u300cA-00000123456\u300d\u2192\u300c-123456\u300d\n * \n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n */\nvar toFloat = function (str) {\n    str = str\n            .replace(/[\uff10-\uff19\uff0e]/g, function (s) {\n                return String.fromCharCode(s.charCodeAt(0) - 65248);\n            })\n            .replace(/[\u2010\uff0d\u2015\u30fc]/g, '-')\n            .replace(/[^\\-\\d\\.]/g, '')\n            .replace(/(?!^\\-)[^\\d\\.]/g, '');\n    return parseFloat(str);\n};\n```\n\n```js\n/**\n * \u6570\u5b57\uff08\u6587\u5b57\u5217\uff09\u306b\u5909\u63db\u3057\u3066\u8fd4\u3059\n *\n * \u5168\u89d2\u306e\u6570\u5b57\u306f\u534a\u89d2\u306b\u3059\u308b\n * \u5168\u89d2\u30cf\u30a4\u30d5\u30f3\u3001\u5168\u89d2\u30c0\u30c3\u30b7\u30e5\u3001\u5168\u89d2\u30de\u30a4\u30ca\u30b9\u8a18\u53f7\u3001\u9577\u97f3\u7b26\u306f\u534a\u89d2\u30cf\u30a4\u30d5\u30f3\u306b\u5909\u63db\n * \u5148\u982d\u306e\u30de\u30a4\u30ca\u30b9\u4ee5\u5916\u306e\u30cf\u30a4\u30d5\u30f3\u306f\u524a\u9664\n * \u6570\u5b57\u4ee5\u5916\u306e\u6587\u5b57\u306f\u524a\u9664\n * parseFloat\u3092\u901a\u3057\u305f\u3082\u306e\u3092\u5c0f\u6570\u70b9\u4ee5\u4e0bnum\u3067\u5207\u308a\u6368\u3066\n * NaN\u306e\u6642\u306f0\n *\n * Number.prototype.toFixed()\u306f\u5c0f\u6570\u70b9\u4ee5\u4e0b\u3092\u8fd1\u4f3c\u5024\u3067\u8868\u73fe\u3059\u308b\u70ba\n * \n * \u5f15\u6570num\u304c\u6307\u5b9a\u306a\u3057\u3001\u3082\u3057\u304f\u306f0\u306e\u6642\n * \u300cabcd\u3000\uff0d\u30fc\uff11\uff12\uff13\u304b\u30fc\uff14\uff0e\uff15\uff16\u300d\u2192\u300c-1234.56\u300d\n * \u300cabc123456def\u300d\u2192\u300c123456\u300d\n * \u300c12.34.56\u300d\u2192\u300c12.34\u300d\n * \u300cA0000123456\u300d\u2192\u300c123456\u300d\n * \u300cA0000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA0-000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA123-00123.456\u300d\u2192\u300c12300123.456\u300d\n * \u300cA-00000123456\u300d\u2192\u300c-123456\u300d\n * \n * \u5f15\u6570num\u304c1\u306e\u6642\n * \u300cabcd\u3000\uff0d\u30fc\uff11\uff12\uff13\u304b\u30fc\uff14\uff0e\uff15\uff16\u300d\u2192\u300c-1234.5\u300d\n * \u300cabc123456def\u300d\u2192\u300c123456.0\u300d\n * \u300c12.34.56\u300d\u2192\u300c12.3\u300d\n * \u300cA0000123456\u300d\u2192\u300c123456.0\u300d\n * \u300cA0000123.456\u300d\u2192\u300c123.4\u300d\n * \u300cA0-000123.456\u300d\u2192\u300c123.4\u300d\n * \u300cA123-00123.456\u300d\u2192\u300c12300123.4\u300d\n * \u300cA-00000123456\u300d\u2192\u300c-123456.0\u300d\n * \n * \u5f15\u6570num\u304c3\u306e\u6642\n * \u300cabcd\u3000\uff0d\u30fc\uff11\uff12\uff13\u304b\u30fc\uff14\uff0e\uff15\uff16\u300d\u2192\u300c-1234.560\u300d\n * \u300cabc123456def\u300d\u2192\u300c123456.000\u300d\n * \u300c12.34.56\u300d\u2192\u300c12.340\u300d\n * \u300cA0000123456\u300d\u2192\u300c123456.000\u300d\n * \u300cA0000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA0-000123.456\u300d\u2192\u300c123.456\u300d\n * \u300cA123-00123.456\u300d\u2192\u300c12300123.456\u300d\n * \u300cA-00000123456\u300d\u2192\u300c-123456.000\u300d\n * \n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n * @param {Number} num \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306e\u6841\u6570\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f0\u300c\u6574\u6570\u300d\u3001\u30de\u30a4\u30ca\u30b9\u306f\u7121\u8996\uff09\n * @param {Boolean} useMinus \u30de\u30a4\u30ca\u30b9\u3092\u524a\u9664\u3059\u308b\u304b\u3069\u3046\u304b false\u306e\u6642\u306e\u307f\u30de\u30a4\u30ca\u30b9\u3092\u524a\u9664\n */\nvar numString = function (str, num, useMinus) {\n    num = parseInt(num, 10);\n    num = isNaN(num) ? 0 : num;\n\n    // \u4e00\u65e6float\u306b\u5909\u63db\n    str = str\n            .replace(/[\uff10-\uff19\uff0e]/g, function (s) {\n                return String.fromCharCode(s.charCodeAt(0) - 65248);\n            })\n            .replace(/[\u2010\uff0d\u2015\u30fc]/g, '-')\n            .replace(/[^\\-\\d\\.]/g, '')\n            .replace(/(?!^\\-)[^\\d\\.]/g, '');\n    str = parseFloat(str);\n    if (str < 0 && useMinus === false) {\n        str *= -1;\n    }\n    var split = str.toString().split('.');\n    var dec = '';\n    if (num > 0) {\n        if (split.length > 1) {\n            dec = '.' + (split[1] + new Array(num + 1).join('0')).slice(0, num);\n        } else {\n            dec = '.' + new Array(num + 1).join('0').slice(0, num);\n        }\n    }\n    return split[0] + dec;\n};\n```\n\n```js\n/**\n * \u6570\u5b57\u306e\u6841\u533a\u5207\u308a\n * \n * \u300c12345678\u300d\u2192\u300c12,345,678\u300d\n * \u300c12345678.123456\u300d\u2192\u300c12,345,678.123456\u300d\n * \u300c-1234678\u300d\u2192\u300c-12,345,678\u300d\n * \u300c12,345,678\u300d\u2192\u300c12,345,678\u300d\n * \u300c12,345,6789\u300d\u2192\u300c12,345,6,789\u300d\uff08\u6841\u6570\u3092\u518d\u8a08\u7b97\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u6ce8\u610f\uff09\n * \u300c12345678\u5186\u300d\u2192\u300c12,345,678\u5186\u300d\n * \u300c-12345\u5186\u300d\u2192\u300c-12,345\u5186\u300d\n *\n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n */\nvar numFormat = function (str) {\n    var split = str.split('.');\n    split[0] = split[0].replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, '$1,');\n    return split.length === 1 ? split[0] : split[0] + '.' + split[1];\n};\n```\n\n```js\n/**\n * \u6841\u533a\u5207\u308a\u306e\u6570\u5b57\u304b\u3089\u533a\u5207\u308a\u6587\u5b57\u306e\u524a\u9664\n *\n * \u300c12,345,678\u300d\u2192\u300c12345678\u300d\n *\n */\nvar removeFigure = function (str) {\n    return str.replace(/,/g, '');\n};\n```\n\n\u756a\u5916\u7de8\n\n```js\n/**\n * \u6587\u5b57\u5217\u3092\u53f3\u304b\u3089num\u6587\u5b57\u5207\u308a\u51fa\u3059\uff08num\u6587\u5b57\u306b\u8db3\u308a\u306a\u3044\u5834\u5408\u306fpad\u3067\u57cb\u3081\u308b\uff09\n *\n * \u5f15\u6570num\u306e\u6307\u5b9a\u306a\u3057\u3001\u3082\u3057\u304f\u306f2\u300c123\u300d\u2192\u300c23\u300d\n * \u5f15\u6570num\u304c5\u300c123\u300d\u2192\u300c00123\u300d\n * \u5f15\u6570num\u304c-10 \u300c123\u300d\u2192\u300c23\u300d\n * \u5f15\u6570num\u304c0\uff08\u5909\u5316\u306a\u3057\uff09\u300c123\u300d\u2192\u300c123\u300d\n * \u5f15\u6570num\u304c5\u3001pad\u304ca\u300c123\u300d\u2192\u300caa123\u300d\n * \u5f15\u6570num\u304c10\u3001pad\u304cab\u300c123\u300d\u2192\u300cbababab123\u300d\n * \n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n * @param {Number} num \u5207\u308a\u51fa\u3059\u6587\u5b57\u6570\uff08\u6307\u5b9a\u306a\u3057\u3082\u3057\u304f\u306f0\u3088\u308a\u5c0f\u3055\u3044\u3068\u304d\u306f2\uff09\n * @param {String} pad \u6841\u6570\u306b\u8db3\u308a\u306a\u3044\u5834\u5408\u306b\u5de6\u5074\u3092\u57cb\u3081\u308b\u6587\u5b57\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f0\uff09\n */\nvar padSlice = function (str, num, pad) {\n    num = parseInt(num, 10);\n    num = isNaN(num) || num < 0 ? 2 : num;\n    pad = pad === undefined ? '0' : pad.toString();\n    return (new Array(num + 1).join(pad) + str).slice(num * -1);\n};\n```\n\n```js\n/**\n * \u6587\u5b57\u5217\u306e\u5de6\u5074\u3092\u6841\u6570num\u306b\u306a\u308b\u307e\u3067\u57cb\u3081\u308b\uff08num\u3092\u8d85\u3048\u308b\u5834\u5408\u306f\u4f55\u3082\u3057\u306a\u3044\uff09\n *\n * \u5f15\u6570num\u306e\u6307\u5b9a\u306a\u3057\u3001\u3082\u3057\u304f\u306f2\u300c123\u300d\u2192\u300c123\u300d\n * \u5f15\u6570num\u304c5\u300c123\u300d\u2192\u300c00123\u300d\n * \u5f15\u6570num\u304c-10 \u300c123\u300d\u2192\u300c123\u300d\n * \u5f15\u6570num\u304c0\u300c123\u300d\u2192\u300c123\u300d\n * \u5f15\u6570num\u304c5\u3001pad\u304ca\u300c123\u300d\u2192\u300caa123\u300d\n * \u5f15\u6570num\u304c10\u3001pad\u304cab\u300c123\u300d\u2192\u300cabababab123\u300d\n * \n * @param {String} str \u5909\u63db\u3057\u305f\u3044\u6587\u5b57\u5217\n * @param {Number} num \u6587\u5b57\u6570\uff08\u6307\u5b9a\u306a\u3057\u3082\u3057\u304f\u306f0\u3088\u308a\u5c0f\u3055\u3044\u3068\u304d\u306f2\uff09\n * @param {String} pad \u6841\u6570\u306b\u8db3\u308a\u306a\u3044\u5834\u5408\u306b\u5de6\u5074\u3092\u57cb\u3081\u308b\u6587\u5b57\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u306f0\uff09\n */\nvar padFill = function (str, num, pad) {\n    num = parseInt(num, 10);\n    num = isNaN(num) || num < 0 ? 2 : num;\n    pad = pad === undefined ? '0' : pad.toString();\n    while (str.length < num) {\n        str = pad + str;\n    }\n    return str;\n};\n```\n", "tags": ["JavaScript", "\u6b63\u898f\u8868\u73fe"]}