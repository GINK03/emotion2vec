{"context": " More than 1 year has passed since last update.\uff92\uff98\uff70\uff78\uff99\uff7c\uff90\uff8f\uff7d\n\n\u5143\u30cd\u30bf\n\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff01\nprocessing\u3067\u6728\u3092\u63cf\u304f\n\n\u30a6\u30c3\u30af\u30ea\u30b9\u30de\u30b9...\n\nhttps://youtu.be/gnfiEO1cXqA\nint step = 12;\nint count = 0;\nint lightNum = 200;\n\nfloat tr_scale;\nfloat tr_angle;\nfloat tr_length;\nfloat tr_startd;\nfloat tr_startx;\nfloat tr_starty;\nfloat offset = -90;\nfloat triangle = 30;\n\n\nLight[] lights = {};\n\nPGraphics backPg;\nPGraphics frontPg;\n\n\nvoid setup(){\n  size (1366, 768);\n  colorMode(RGB, 256);\n  background(255);\n\n  frontPg = createGraphics(width, height);\n  backPg  = createGraphics(width, height);\n\n  createLayer(backPg, 40, false);\n  createLayer(frontPg, 20, true);\n\n  for (int i = 0; i < lightNum; i++) {\n    lights = (Light[])append(lights, new Light());\n  }\n}\n\nvoid draw() {\n  image(backPg, 0, 0);\n\n  for (int i = 0; i < lightNum; i++) {\n    lights[i].draw();\n  }\n\n  image(frontPg, 0, 0);\n}\n\n\nvoid createLayer(PGraphics context, int num, boolean hasBg) {\n  tr_scale  = 0.99;\n  tr_angle  = 24.0;\n  tr_length = 180.0;\n  tr_startd = 0.0;\n  tr_startx = width / 2;\n  tr_starty = height;\n\n  context.beginDraw();\n\n  if (hasBg == true) {\n    backDraw(context);\n  }\n\n\n  createTree (context, tr_startx, tr_starty, tr_length, tr_startd, step);\n\n  for (int i = 0; i < num; i++) {\n    if (hasBg == true) {\n      backDraw(context);\n    }\n\n    if (count == step) {\n      count = 0;\n      createTree(context, random (0, width), tr_starty, random(tr_length), tr_startd, step);\n    }\n  }\n\n  context.endDraw();\n}\n\nvoid createTree (PGraphics context, float x01, float y01, float len, float deg, int n){\n  context.stroke(color(#00695C, float(5 / (n + 1))));\n\n  context.strokeWeight(int ((n + 1) / 4));\n\n  float x02 = x01 + len * cos(radians(deg + offset));\n  float y02 = y01 + len * sin(radians(deg + offset));\n\n  context.line(x01, y01, x02, y02);\n\n  if (n > 0) {\n    float deg01 = random(-tr_angle, triangle);\n    float scl01 = random(random(10, 20), len * tr_scale);\n    createTree(context, x02, y02, scl01, deg + deg01, n - 1);\n\n    float deg02 = random(-tr_angle, triangle);\n    float scl02 = random(random(10, 20), len * tr_scale);\n    createTree(context, x02, y02, scl02, deg + deg02, n - 1);\n  }\n\n  count = n;\n}\n\nvoid backDraw(PGraphics context) {\n  context.noStroke();\n  context.fill(#2a2f47, 9.5);\n\n  context.rectMode(CORNER);\n\n  context.rect(0, 0, width, height);\n}\n\nclass Light {\n  float x, y, brightness;\n  float cnt;\n  float v;\n\n  Light() {\n    x = random(width);\n    y = random(height);\n    cnt = 0;\n    v = 0.6;\n  }\n\n  void draw() {\n    noStroke();\n\n    fill(color(#FFFF00, round(cnt -0.5)));\n    ellipse(x + random(-1, 1), y + random(-1, 1), 8 + round(cnt / 10), 8 + round(cnt / 10));\n\n    fill(color(#FFFF00, round(cnt)));\n    ellipse(x, y, 5, 5);\n\n    cnt += (v + random(-0.1, 0.5));\n\n    if (cnt > 20.0) {\n      v = -0.4;\n    }\n\n    if (cnt < 1.0) {\n      v = 0.4;\n    }\n  }\n}\n\n\n\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u3088\u3063\u3066\u51fa\u308b\u8272\u304c\u9055\u3046\u306e\u3067\u30a2\u30ec\u3067\u60a9\u307f\u307e\u3059...\nJavaScript\u7248\u306eprocessing\u306b\u79fb\u690d\u3059\u308b\u3068\u5d29\u308c\u308b...\n\u52d5\u304b\u3059\u3068\u86cd\u307f\u305f\u3044\u306b\u5149\u304c\u63fa\u308c\u3066\u3061\u3087\u3063\u3068\u7dba\u9e97\n\u30af\u30ea\u30b9\u30de\u30b9\u305d\u3063\u3061\u306e\u3051\u3067\u4e71\u6570\u3068\u5411\u304d\u5408\u3046\u65b9\u304c\u697d\u3057(ry\n\uff92\uff98\uff70\uff78\uff99\uff7c\uff90\uff8f\uff7d\n\n# \u5143\u30cd\u30bf\n\n\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff01\n\n[processing\u3067\u6728\u3092\u63cf\u304f](http://qiita.com/v_ohji/items/628a972a3f138cc09427)\n\n\n# \u30a6\u30c3\u30af\u30ea\u30b9\u30de\u30b9...\n\n![0058.png](https://qiita-image-store.s3.amazonaws.com/0/73240/9ee307c1-7400-281b-8818-aba2eb2fe53d.png)\n\nhttps://youtu.be/gnfiEO1cXqA\n\n```java\nint step = 12;\nint count = 0;\nint lightNum = 200;\n\nfloat tr_scale;\nfloat tr_angle;\nfloat tr_length;\nfloat tr_startd;\nfloat tr_startx;\nfloat tr_starty;\nfloat offset = -90;\nfloat triangle = 30;\n\n\nLight[] lights = {};\n\nPGraphics backPg;\nPGraphics frontPg;\n\n\nvoid setup(){\n  size (1366, 768);\n  colorMode(RGB, 256);\n  background(255);\n  \n  frontPg = createGraphics(width, height);\n  backPg  = createGraphics(width, height);\n\n  createLayer(backPg, 40, false);\n  createLayer(frontPg, 20, true);\n\n  for (int i = 0; i < lightNum; i++) {\n    lights = (Light[])append(lights, new Light());\n  }\n}\n\nvoid draw() {\n  image(backPg, 0, 0);\n\n  for (int i = 0; i < lightNum; i++) {\n    lights[i].draw();\n  }\n\n  image(frontPg, 0, 0);\n}\n\n\nvoid createLayer(PGraphics context, int num, boolean hasBg) {\n  tr_scale  = 0.99;\n  tr_angle  = 24.0;\n  tr_length = 180.0;\n  tr_startd = 0.0;\n  tr_startx = width / 2;\n  tr_starty = height;\n  \n  context.beginDraw();\n\n  if (hasBg == true) {\n    backDraw(context);\n  }\n\n  \n  createTree (context, tr_startx, tr_starty, tr_length, tr_startd, step);\n\n  for (int i = 0; i < num; i++) {\n    if (hasBg == true) {\n      backDraw(context);\n    }\n\n    if (count == step) {\n      count = 0;\n      createTree(context, random (0, width), tr_starty, random(tr_length), tr_startd, step);\n    }\n  }\n  \n  context.endDraw();\n}\n\nvoid createTree (PGraphics context, float x01, float y01, float len, float deg, int n){\n  context.stroke(color(#00695C, float(5 / (n + 1))));\n\n  context.strokeWeight(int ((n + 1) / 4));\n\n  float x02 = x01 + len * cos(radians(deg + offset));\n  float y02 = y01 + len * sin(radians(deg + offset));\n  \n  context.line(x01, y01, x02, y02);\n  \n  if (n > 0) {\n    float deg01 = random(-tr_angle, triangle);\n    float scl01 = random(random(10, 20), len * tr_scale);\n    createTree(context, x02, y02, scl01, deg + deg01, n - 1);\n\n    float deg02 = random(-tr_angle, triangle);\n    float scl02 = random(random(10, 20), len * tr_scale);\n    createTree(context, x02, y02, scl02, deg + deg02, n - 1);\n  }\n  \n  count = n;\n}\n  \nvoid backDraw(PGraphics context) {\n  context.noStroke();\n  context.fill(#2a2f47, 9.5);\n  \n  context.rectMode(CORNER);\n  \n  context.rect(0, 0, width, height);\n}\n\nclass Light {\n  float x, y, brightness;\n  float cnt;\n  float v;\n  \n  Light() {\n    x = random(width);\n    y = random(height);\n    cnt = 0;\n    v = 0.6;\n  }\n  \n  void draw() {\n    noStroke();\n\n    fill(color(#FFFF00, round(cnt -0.5)));\n    ellipse(x + random(-1, 1), y + random(-1, 1), 8 + round(cnt / 10), 8 + round(cnt / 10));\n\n    fill(color(#FFFF00, round(cnt)));\n    ellipse(x, y, 5, 5);\n\n    cnt += (v + random(-0.1, 0.5));\n\n    if (cnt > 20.0) {\n      v = -0.4;\n    }\n    \n    if (cnt < 1.0) {\n      v = 0.4;\n    }\n  }\n}\n\n```\n\n\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306b\u3088\u3063\u3066\u51fa\u308b\u8272\u304c\u9055\u3046\u306e\u3067\u30a2\u30ec\u3067\u60a9\u307f\u307e\u3059...\nJavaScript\u7248\u306eprocessing\u306b\u79fb\u690d\u3059\u308b\u3068\u5d29\u308c\u308b...\n\n\u52d5\u304b\u3059\u3068\u86cd\u307f\u305f\u3044\u306b\u5149\u304c\u63fa\u308c\u3066\u3061\u3087\u3063\u3068\u7dba\u9e97\n\u30af\u30ea\u30b9\u30de\u30b9\u305d\u3063\u3061\u306e\u3051\u3067\u4e71\u6570\u3068\u5411\u304d\u5408\u3046\u65b9\u304c\u697d\u3057(ry\n", "tags": ["processing"]}