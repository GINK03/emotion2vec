{"tags": ["Scheme", "Gauche"], "context": " More than 1 year has passed since last update.\u52c9\u5f37\u4e2d\u3067\u3088\u304f\u5fd8\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u30e1\u30e2\n(equal? (list 1 2 3) (list 1 2 3))  ; => #t\n((lambda (p) (eq? p p)) (cons 1 2)) ; => #t\n(eq? 'example 'example)             ; => #t\n(eqv? 1 1)                          ; => #t\n(eqv? 1 1.0)                        ; => #f\n(= 1 1.0)                           ; => #t\n(char=? #\\a #\\a)                    ; => #t\n(string=? \"example\" \"example\")      ; => #t\n(char-ci=? #\\a #\\A)                 ; => #t\n(string-ci=? \"example\" \"EXAMPLE\")   ; => #t\n(not #f)                            ; => #t\n\n\u7b49\u4fa1\u8ff0\u8a9e\u4ee5\u5916\u306e\u8ff0\u8a9e\n(pair? '(1))                        ; => #t\n(null? '())                         ; => #t\n(list? (list))                      ; => #t\n(boolean? #f)                       ; => #t\n(symbol? 'example)                  ; => #t\n(number? 1)                         ; => #t\n(char? #\\a)                         ; => #t\n(string? \"string\")                  ; => #t\n(odd? 1)                            ; => #t\n(even? 2)                           ; => #t\n(zero? 0)                           ; => #t\n(char-alphabetic? #\\a)              ; => #t\n(proper-list? '(1 2))               ; => #t\n(proper-list? '(1 . 2))             ; => #f\n(any odd? '(1 2))                   ; => #t\n(any odd? '(2 4))                   ; => #f\n\n\u52c9\u5f37\u4e2d\u3067\u3088\u304f\u5fd8\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u30e1\u30e2\n\n```scheme\n(equal? (list 1 2 3) (list 1 2 3))  ; => #t\n((lambda (p) (eq? p p)) (cons 1 2)) ; => #t\n(eq? 'example 'example)             ; => #t\n(eqv? 1 1)                          ; => #t\n(eqv? 1 1.0)                        ; => #f\n(= 1 1.0)                           ; => #t\n(char=? #\\a #\\a)                    ; => #t\n(string=? \"example\" \"example\")      ; => #t\n(char-ci=? #\\a #\\A)                 ; => #t\n(string-ci=? \"example\" \"EXAMPLE\")   ; => #t\n(not #f)                            ; => #t\n```\n\u7b49\u4fa1\u8ff0\u8a9e\u4ee5\u5916\u306e\u8ff0\u8a9e\n\n```scheme\n(pair? '(1))                        ; => #t\n(null? '())                         ; => #t\n(list? (list))                      ; => #t\n(boolean? #f)                       ; => #t\n(symbol? 'example)                  ; => #t\n(number? 1)                         ; => #t\n(char? #\\a)                         ; => #t\n(string? \"string\")                  ; => #t\n(odd? 1)                            ; => #t\n(even? 2)                           ; => #t\n(zero? 0)                           ; => #t\n(char-alphabetic? #\\a)              ; => #t\n(proper-list? '(1 2))               ; => #t\n(proper-list? '(1 . 2))             ; => #f\n(any odd? '(1 2))                   ; => #t\n(any odd? '(2 4))                   ; => #f\n```\n"}