{"context": " More than 1 year has passed since last update.\n\n\u304a\u4e45\u3057\u3076\u308a\u3067\u3059\n\u4ee5\u524dLinux Power Management\u5b9f\u88c5\u306e\u6982\u8981\u7d39\u4ecb\u3092\u3057\u305f\u969b\u3001\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u304b\u304d\u307e\u3057\u305f\u3002\n\u4ee5\u4e0bsuspend-to-swap\u306e\u4ed5\u7d44\u307f\u306e\u3072\u3068\u3064\u3067\u3042\u308b\u300cswsusp\u300d\u3082\u6c17\u306b\u306a\u308a\u307e\u3059\u3002\u7279\u306bswap\u3068\u3069\u306e\u3088\u3046\u306b\u7d71\u5408\u3055\u308c\u3001\u9055\u3044(\u5236\u7d04)\u306f\u4f55\u304b\u3068\u3044\u3046\u3068\u3053\u308d\u3082\u8208\u5473\u6df1\u3044\u3067\u3059\u3002\nDocumentation/power/states.txt\nFor suspend-to-disk, a mechanism called 'swsusp' (Swap Suspend) is used to write memory contents to free swap space. swsusp has some restrictive requirements, but should work in most cases. \n\n\nswswap\u306e\u6982\u8981\nswswap\u306e\u6982\u8981\u306fDocumentation\u306e\u4e0b\u306b\u3042\u308bswsusp.txt\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\nDocumentation/power/swsusp.txt\nSome warnings, first.\n\n * BIG FAT WARNING *********************************************************\n *\n * If you touch anything on disk between suspend and resume...\n *              ...kiss your data goodbye.\n *\n * If you do resume from initrd after your filesystems are mounted...\n *              ...bye bye root partition.\n *          [this is actually same case as above]\n *\n\n\n\u3053\u306e\u3088\u3046\u306a\u4e0d\u5409\u306a\u66f8\u304d\u51fa\u3057\u3067\u59cb\u307e\u308a\u307e\u3059\u3002\n\u7279\u306b\u3001\u7701\u30a8\u30cd\u6a5f\u80fd\u3092\u958b\u767a\u3059\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u306b\u3068\u3063\u3066\u3001suspend\u3068resume\u306e\u9593\u306e\u671f\u9593\u306f\u9b54\u306e\u671f\u9593\u3067\u3059\u3002\u30d0\u30b0\u308b\u3068\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306a\u3069\u81f4\u547d\u7684\u304b\u3064\u8ffd\u3044\u304b\u3051\u306b\u304f\u3044\u969c\u5bb3\u3068\u306a\u308a\u307e\u3059\u3002\n\u7d50\u69cb\u9577\u3044\u5f15\u7528\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u7d9a\u304d\u3092\u898b\u307e\u3059\u3002\nswswap.txt\u306e\u5f15\u7528\u304c\u7d9a\u304d\u307e\u3059\u304c\u3001\u3057\u3070\u3089\u304f\u306e\u8f9b\u62b1\u3067\u3059\u3002\n\u307e\u305a\u6700\u521d\u306e\u8cea\u554f\u306f\u300cswswap\u3092\u5b9f\u65bd\u4e2d\u306b\u306f\u30c7\u30d0\u30a4\u30b9\u7fa4\u306b\u4f55\u304c\u8d77\u304d\u308b\u306e\u304b\uff1f\u30b7\u30b9\u30c6\u30e0\u304c\u30b5\u30b9\u30da\u30f3\u30c9\u3059\u308b\u9593\u306bresume\u304c\u304b\u304b\u308b\u3088\u3046\u306b\u3082\u601d\u3048\u307e\u3059\u3002\u300d\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\u8981\u3059\u308b\u306b\u3001\u300cswswap\u3092\u3059\u308b\u5834\u5408\u3001Disk\u3078\u306e\u66f8\u304d\u8fbc\u307f\u304c\u767a\u751f\u3059\u308b\u306f\u305a\u3067\u3001\u30c7\u30d0\u30a4\u30b9\u304c\u52d5\u3051\u308b\u3088\u3046\u306b\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306f\u305a\u3002\u3057\u304b\u3057\u3001suspend\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u30c7\u30d0\u30a4\u30b9\u3092\u6b62\u3081\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u3053\u3068\u3060\u3088\u306d\u3002\u305d\u308c\u3063\u3066\u304a\u304b\u3057\u304f\u306d\uff1f\u300d\u3068\u3044\u3046\u610f\u5473\u3060\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u56de\u7b54\u306b\u3082\u3042\u308b\u3068\u304a\u308a\u3001\u4e00\u5ea6resume\u3057\u3066Disk\u3092\u52d5\u3051\u308b\u3088\u3046\u306b\u3057\u305f\u3042\u3068\u3001\u518d\u5ea6suspend\u3059\u308b\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\u9577\u3044\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306b\u5f15\u7528\u3057\u307e\u3059\u3002\n\nDocumentation/power/swsusp.txt\n\nQ: What happens to devices during swsusp? They seem to be resumed\nduring system suspend?\n\nA: That's correct. We need to resume them if we want to write image to\ndisk. Whole sequence goes like\n\n      Suspend part\n      ~~~~~~~~~~~~\n      running system, user asks for suspend-to-disk\n\n      user processes are stopped\n\n      suspend(PMSG_FREEZE): devices are frozen so that they don't interfere\n                  with state snapshot\n\n      state snapshot: copy of whole used memory is taken with interrupts disabled\n\n      resume(): devices are woken up so that we can write image to swap\n\n      write image to swap\n\n      suspend(PMSG_SUSPEND): suspend devices so that we can power off\n\n      turn the power off\n\n      Resume part\n      ~~~~~~~~~~~\n      (is actually pretty similar)\n\n      running system, user asks for suspend-to-disk\n\n      user processes are stopped (in common case there are none, but with resume-from-initrd, no one knows)\n\n      read image from disk\n\n      suspend(PMSG_FREEZE): devices are frozen so that they don't interfere\n                  with image restoration\n\n      image restoration: rewrite memory with image\n\n      resume(): devices are woken up so that system can continue\n\n      thaw all user processes\n\n\n\u6b21\u306e\u8cea\u554f\u3002swapfile\u306b\u5bfe\u3057\u3066suspend\u3067\u304d\u308b\u306e\u304b\u3068\u3044\u3046\u8cea\u554f\u306b\u306f\u300c\u6761\u4ef6\u4ed8\u304d\u3067\u3067\u304d\u308b\u300d\u3068\u3044\u3046\u306e\u304c\u56de\u7b54\u306b\u306a\u308a\u307e\u3059\u3002\n\nDocumentation/power/swsusp.txt\n/* \u7565 */\nQ: Can I suspend to a swap file?\n\nA: Generally, yes, you can.  However, it requires you to use the \"resume=\" and\n\"resume_offset=\" kernel command line parameters, so the resume from a swap file\ncannot be initiated from an initrd or initramfs image.  See\nswsusp-and-swap-files.txt for details.\n\n\n\u3053\u308c\u3089\u306e\u56de\u7b54\u3092\u898b\u308b\u9650\u308a\u3001swswap\u306fswap\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u3078\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u3092\u9000\u907f\u3059\u308b\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\u3053\u308c\u3092\u982d\u306b\u5165\u308c\u3064\u3064\u8aad\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\n\nswswap\u306e\u51e6\u7406\u3092\u8aad\u3093\u3067\u307f\u308b\u3002\n\u72b6\u614b\u9077\u79fb\u3092\u884c\u3046\u95a2\u6570\u306f\u524d\u56de\u898b\u305f\u3068\u304a\u308a\u3001state_store()\u3067\u3057\u305f\u306d\u3002\n\nkernel/power/main.c\nstatic ssize_t state_store(struct kobject *kobj, struct kobj_attribute *attr,\n               const char *buf, size_t n)\n{\n// \u7565\n    state = decode_state(buf, n);\n    if (state < PM_SUSPEND_MAX)\n        error = pm_suspend(state);\n    else if (state == PM_SUSPEND_MAX)\n        error = hibernate();\n    else\n        error = -EINVAL;\n\n\n\n\ninclude/linux/suspend.h\n#define PM_SUSPEND_MAX               ((__force suspend_state_t) 4)\n\n\n\u4e0a\u8a18\u3088\u308a\u3001swswap\u306e\u5834\u5408\u3001hibernate()\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\nhibernate()\u306b\u3064\u3044\u3066\nhibernate()\u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u95a2\u6570\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\nhibernation_available()\n\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u95a2\u6570\u306e\u540d\u524d\u304b\u3089\u304a\u305d\u3089\u304fhibernation\u6a5f\u80fd\u304c\u5229\u7528\u53ef\u80fd\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\u3088\u3046\u3067\u3059\u3002\n\nkernel/power/hibernate.c\n/**\n * hibernate - Carry out system hibernation, including saving the image.\n */\nint hibernate(void)\n{\n    int error;\n\n    if (!hibernation_available()) {\n        pr_debug(\"PM: Hibernation not available.\\n\");\n        return -EPERM;\n    }    \n\n\nhibernation_available()\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\ninclude/linux/suspend.h\n#ifdef CONFIG_HIBERNATION\n// \u7565\nextern bool hibernation_available(void);\n// \u7565\n#else\n// \u7565\nstatic inline bool hibernation_available(void) { return false; }\n// \u7565\n#endif\n\n\n\u30b3\u30f3\u30d5\u30a3\u30b0\u3067hibernation\u3092\u6709\u52b9\u306b\u3057\u306a\u3044\u5834\u5408\u306f\u5e38\u306bfalse\u304c\u8fd4\u308a\u307e\u3059\u3002\nhibernation\u3092\u6709\u52b9\u306b\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\u3002\n\nkernel/power/hibernate.c\nbool hibernation_available(void)\n{\n    return (nohibernate == 0);\n}\n\n\n\u3082\u3046\u5c11\u3057\u8907\u96d1\u306a\u6761\u4ef6\u4ed8\u3051\u304c\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u610f\u5916\u3067\u3059\u3002\u305f\u3063\u305f\u4e00\u3064\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570nohibernate\u306e\u307f\u3067\u5224\u65ad\u3057\u3066\u3044\u307e\u3059\u3002\nnohibernate_setup()\u3067\u3001nohibernate\u306f1\u306b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nnohibernate_setup()\u306f __init\u5c5e\u6027\u4ed8\u304d\u306a\u306e\u3067\u30ab\u30fc\u30cd\u30eb\u7acb\u3061\u4e0a\u304c\u308a\u6642\u306e\u307f\u306b\u547c\u3070\u308c\u308b\u3053\u3068\u306f\u660e\u767d\u3067\u3059\u3002\n\nkernel/power/hibernate.c\n// \u7565\nstatic int __init nohibernate_setup(char *str)\n{\n    noresume = 1; \n    nohibernate = 1; \n    return 1;\n}\n// \u7565\n__setup(\"nohibernate\", nohibernate_setup);\n// \u7565\n\n\nnohibernate_setup()\u3092\u30ab\u30fc\u30cd\u30eb\u5185\u304b\u3089\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5f62\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u69d8\u5b50\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u6ce8)nohibernate_setup()\u306fkaslr_nohibernate_setup()\u304b\u3089\u547c\u3070\u308c\u3066\u3044\u308b\u304c\u3001kaslr_nohibernate_setup()\u81ea\u4f53\u3092\u76f4\u63a5\u547c\u3093\u3067\u3044\u308b\u7b87\u6240\u306f\u306a\u3044\u3002\u3053\u308c\u3092\u6307\u3057\u3066\u300c\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5f62\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u69d8\u5b50\u306f\u306a\u3044\u300d\u3068\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u3001__setup()\u3068\u3044\u3046\u30de\u30af\u30ed\u3089\u3057\u304d\u3082\u306e\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\u3002\n\ninclude/linux/init.h\n/*\n * Only for really core code.  See moduleparam.h for the normal way.\n *\n * Force the alignment so the compiler doesn't space elements of the\n * obs_kernel_param \"array\" too far apart in .init.setup.\n */\n#define __setup_param(str, unique_id, fn, early)            \\\n    static const char __setup_str_##unique_id[] __initconst \\\n        __aligned(1) = str; \\\n    static struct obs_kernel_param __setup_##unique_id  \\\n        __used __section(.init.setup)           \\\n        __attribute__((aligned((sizeof(long)))))    \\\n        = { __setup_str_##unique_id, fn, early }\n\n#define __setup(str, fn)                    \\\n    __setup_param(str, fn, fn, 0)\n\n\n\u3053\u306e\u30de\u30af\u30ed\u306f\u308f\u304b\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u3042\u308c\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\n\n\u5c55\u958b\n    static const char __setup_str_nohibernate_setup[] __initconst\n        __aligned(1) = \"nohibernate\";\n    static struct obs_kernel_param __setup_nohibernate_setup  \\\n        __used __section(.init.setup)           \\\n        __attribute__((aligned((sizeof(long)))))    \\\n        = { __setup_str_nohibernate_setup, nohibernate_setup, 0 }\n\n\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5909\u6570\u5ba3\u8a00\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u5909\u6570\u306f.init.setup\u3068\u3044\u3046ELF\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u914d\u7f6e\u3055\u308c\u307e\u3059\u3002\n.init.setup\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002.init.setup\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u5148\u982d\u306f__setup_start\u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u540d\u3067\u53c2\u7167\u3067\u304d\u307e\u3059\u3002(\u306a\u304a\u3001\u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u5404\u81ea\u3067\u8abf\u3079\u3066\u307f\u3066\u304f\u3060\u3055\u3044)\n\ninclude/asm-generic/vmlinux.lds.h\n#define INIT_SETUP(initsetup_align)                 \\\n        . = ALIGN(initsetup_align);             \\\n        VMLINUX_SYMBOL(__setup_start) = .;          \\\n        *(.init.setup)                      \\\n        VMLINUX_SYMBOL(__setup_end) = .;\n\n\n\u8a73\u7d30\u306f\u5404\u81ea\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u307f\u3066\u6b32\u3057\u3044\u306e\u3067\u3059\u304c\u3001\u4ee5\u4e0bdo_early_param()\u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n\u51e6\u7406\u4e2d\u3001setup_func\u3068\u3044\u3046\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7d4c\u7531\u3067\u5148\u306e__setup()\u30de\u30af\u30ed\u3067\u6307\u5b9a\u3057\u305f\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\ninit/main.c\n/* Check for early params. */\nstatic int __init do_early_param(char *param, char *val, const char *unused)\n{\n    const struct obs_kernel_param *p;\n\n    for (p = __setup_start; p < __setup_end; p++) {\n        if ((p->early && parameq(param, p->str)) ||\n            (strcmp(param, \"console\") == 0 &&\n             strcmp(p->str, \"earlycon\") == 0) \n        ) {\n            if (p->setup_func(val) != 0)\n                pr_warn(\"Malformed early option '%s'\\n\", param);\n        }\n    }\n    /* We accept everything at this stage. */\n    return 0;\n}\n\n\n\n\u5148\u306b\u9032\u307f\u307e\u3059\nhibernate()\u306b\u623b\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u5358\u306a\u308b\u6392\u4ed6\u51e6\u7406\u3067\u3059\u3002\u3059\u3067\u306bsnapshot\u3092\u4f5c\u6210\u4e2d\u3067\u3042\u308c\u3070\u3001\u4f55\u3082\u305b\u305a\u51e6\u7406\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\n\nkernel/power/hibernate.c\n    /* The snapshot device should not be opened while we're running */\n    if (!atomic_add_unless(&snapshot_device_available, -1, 0)) {\n        error = -EBUSY;\n        goto Unlock;\n    }    \n\n\n\u66f4\u306b\u5148\u306b\u9032\u3080\u3068\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u3001pm_prepare_console()\u306f\u98db\u3070\u3057\u307e\u3059\u3002\n\nkernel/power/hibernate.c\n    pm_prepare_console();\n    error = pm_notifier_call_chain(PM_HIBERNATION_PREPARE);\n    if (error)\n        goto Exit;\n\n\npm_notifier_call_chain()\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\nkernel/power/main.c\nint pm_notifier_call_chain(unsigned long val)\n\nint pm_notifier_call_chain(unsigned long val)\n{\n    int ret = blocking_notifier_call_chain(&pm_chain_head, val, NULL);\n\n    return notifier_to_errno(ret);\n}\n\n\n\u8a73\u3057\u304f\u306f\u898b\u307e\u305b\u3093\u304c\u3001kernel/notifier.c\u306bnotifier\u306e\u51e6\u7406\u7fa4\u304c\u3042\u308a\u307e\u3059\u3002\n\u4e0a\u306e\u51e6\u7406\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u306e\u4ed5\u7d44\u307f\u3068\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u3064\u307e\u308a\u3001\u3053\u3053\u306fhibernate\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u901a\u77e5\u3059\u308b\u3001\u3068\u8003\u3048\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u6642\u306b\u5b9f\u65bd\u3055\u308c\u308b\u7279\u6b8a\u306a\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u3082\u3042\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u8208\u5473\u304c\u3042\u308c\u3070\u305c\u3072\u76ee\u3092\u901a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nhibernate()\u306b\u623b\u308a\u307e\u3059\u3002\nsync\u3057\u305f\u4e0a\u3001\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u72b6\u614b\u306b\u9077\u79fb\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002freeze_process()\u306f\u524d\u56de\u66f8\u3044\u305f\u3068\u304a\u308a\u3067\u3059\u3002\n\nkernel/power/hibernate.c\n    printk(KERN_INFO \"PM: Syncing filesystems ... \");\n    sys_sync();\n    printk(\"done.\\n\");\n\n    error = freeze_processes();\n    if (error)\n        goto Exit;\n\n\nsys_sync()\u304a\u3088\u3073freeze_processes()\u306e\u547c\u3073\u51fa\u3057\u306f\u300csuspend\u306b\u306a\u3063\u305f\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u66f8\u304d\u8fbc\u307f\u3092\u9632\u3050\u300d\u3068\u3044\u3046\u610f\u56f3\u3067\u5b9f\u65bd\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\nsync()\u3092\u3057\u306a\u3044\u3068\u3001\u30c0\u30fc\u30c6\u30a3\u306a\u30d5\u30a1\u30a4\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u3092sync()\u3059\u308b\u305f\u3081\u306e\u66f8\u304d\u8fbc\u307f\u304c\u884c\u308f\u308c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u53ef\u80fd\u306b\u306a\u308b\u3068\u3001\u30b9\u30c8\u30ec\u30fc\u30b8\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u6b21\u56de\u306f\n\u4eca\u56de\u306fhibernate()\u306e\u307b\u3093\u306e\u5165\u308a\u53e3\u3067\u3057\u305f\u3002\n\u6b21\u56de\u306f\u3055\u3089\u306bhibernate()\u3092\u8aad\u307f\u307e\u3059\u3002\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u3092\u4f5c\u308b\u3068\u3053\u308d\u307e\u3067\u30fb\u30fb\u30fb\u3044\u3051\u308c\u3070\u3044\u3044\u306a\u3042\u3002\n## \u304a\u4e45\u3057\u3076\u308a\u3067\u3059\n\n\u4ee5\u524dLinux Power Management\u5b9f\u88c5\u306e\u6982\u8981\u7d39\u4ecb\u3092\u3057\u305f\u969b\u3001\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u304b\u304d\u307e\u3057\u305f\u3002\n\n```\n\u4ee5\u4e0bsuspend-to-swap\u306e\u4ed5\u7d44\u307f\u306e\u3072\u3068\u3064\u3067\u3042\u308b\u300cswsusp\u300d\u3082\u6c17\u306b\u306a\u308a\u307e\u3059\u3002\u7279\u306bswap\u3068\u3069\u306e\u3088\u3046\u306b\u7d71\u5408\u3055\u308c\u3001\u9055\u3044(\u5236\u7d04)\u306f\u4f55\u304b\u3068\u3044\u3046\u3068\u3053\u308d\u3082\u8208\u5473\u6df1\u3044\u3067\u3059\u3002\nDocumentation/power/states.txt\nFor suspend-to-disk, a mechanism called 'swsusp' (Swap Suspend) is used to write memory contents to free swap space. swsusp has some restrictive requirements, but should work in most cases. \n```\n\n## swswap\u306e\u6982\u8981\nswswap\u306e\u6982\u8981\u306fDocumentation\u306e\u4e0b\u306b\u3042\u308bswsusp.txt\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\n```:Documentation/power/swsusp.txt\nSome warnings, first.\n\n * BIG FAT WARNING *********************************************************\n *\n * If you touch anything on disk between suspend and resume...\n *              ...kiss your data goodbye.\n *\n * If you do resume from initrd after your filesystems are mounted...\n *              ...bye bye root partition.\n *          [this is actually same case as above]\n *\n```\n\n\u3053\u306e\u3088\u3046\u306a\u4e0d\u5409\u306a\u66f8\u304d\u51fa\u3057\u3067\u59cb\u307e\u308a\u307e\u3059\u3002\n\u7279\u306b\u3001\u7701\u30a8\u30cd\u6a5f\u80fd\u3092\u958b\u767a\u3059\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u306b\u3068\u3063\u3066\u3001suspend\u3068resume\u306e\u9593\u306e\u671f\u9593\u306f\u9b54\u306e\u671f\u9593\u3067\u3059\u3002\u30d0\u30b0\u308b\u3068\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306a\u3069\u81f4\u547d\u7684\u304b\u3064\u8ffd\u3044\u304b\u3051\u306b\u304f\u3044\u969c\u5bb3\u3068\u306a\u308a\u307e\u3059\u3002\n\u7d50\u69cb\u9577\u3044\u5f15\u7528\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u7d9a\u304d\u3092\u898b\u307e\u3059\u3002\nswswap.txt\u306e\u5f15\u7528\u304c\u7d9a\u304d\u307e\u3059\u304c\u3001\u3057\u3070\u3089\u304f\u306e\u8f9b\u62b1\u3067\u3059\u3002\n\n\u307e\u305a\u6700\u521d\u306e\u8cea\u554f\u306f\u300cswswap\u3092\u5b9f\u65bd\u4e2d\u306b\u306f\u30c7\u30d0\u30a4\u30b9\u7fa4\u306b\u4f55\u304c\u8d77\u304d\u308b\u306e\u304b\uff1f\u30b7\u30b9\u30c6\u30e0\u304c\u30b5\u30b9\u30da\u30f3\u30c9\u3059\u308b\u9593\u306bresume\u304c\u304b\u304b\u308b\u3088\u3046\u306b\u3082\u601d\u3048\u307e\u3059\u3002\u300d\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n\u8981\u3059\u308b\u306b\u3001\u300cswswap\u3092\u3059\u308b\u5834\u5408\u3001Disk\u3078\u306e\u66f8\u304d\u8fbc\u307f\u304c\u767a\u751f\u3059\u308b\u306f\u305a\u3067\u3001\u30c7\u30d0\u30a4\u30b9\u304c\u52d5\u3051\u308b\u3088\u3046\u306b\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306f\u305a\u3002\u3057\u304b\u3057\u3001suspend\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u30c7\u30d0\u30a4\u30b9\u3092\u6b62\u3081\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u3053\u3068\u3060\u3088\u306d\u3002\u305d\u308c\u3063\u3066\u304a\u304b\u3057\u304f\u306d\uff1f\u300d\u3068\u3044\u3046\u610f\u5473\u3060\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u56de\u7b54\u306b\u3082\u3042\u308b\u3068\u304a\u308a\u3001\u4e00\u5ea6resume\u3057\u3066Disk\u3092\u52d5\u3051\u308b\u3088\u3046\u306b\u3057\u305f\u3042\u3068\u3001\u518d\u5ea6suspend\u3059\u308b\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\u9577\u3044\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306b\u5f15\u7528\u3057\u307e\u3059\u3002\n\n```:Documentation/power/swsusp.txt\n\nQ: What happens to devices during swsusp? They seem to be resumed\nduring system suspend?\n\nA: That's correct. We need to resume them if we want to write image to\ndisk. Whole sequence goes like\n\n      Suspend part\n      ~~~~~~~~~~~~\n      running system, user asks for suspend-to-disk\n\n      user processes are stopped\n\n      suspend(PMSG_FREEZE): devices are frozen so that they don't interfere\n                  with state snapshot\n\n      state snapshot: copy of whole used memory is taken with interrupts disabled\n\n      resume(): devices are woken up so that we can write image to swap\n\n      write image to swap\n\n      suspend(PMSG_SUSPEND): suspend devices so that we can power off\n\n      turn the power off\n\n      Resume part\n      ~~~~~~~~~~~\n      (is actually pretty similar)\n\n      running system, user asks for suspend-to-disk\n\n      user processes are stopped (in common case there are none, but with resume-from-initrd, no one knows)\n\n      read image from disk\n\n      suspend(PMSG_FREEZE): devices are frozen so that they don't interfere\n                  with image restoration\n\n      image restoration: rewrite memory with image\n\n      resume(): devices are woken up so that system can continue\n\n      thaw all user processes\n```\n\n\u6b21\u306e\u8cea\u554f\u3002swapfile\u306b\u5bfe\u3057\u3066suspend\u3067\u304d\u308b\u306e\u304b\u3068\u3044\u3046\u8cea\u554f\u306b\u306f\u300c\u6761\u4ef6\u4ed8\u304d\u3067\u3067\u304d\u308b\u300d\u3068\u3044\u3046\u306e\u304c\u56de\u7b54\u306b\u306a\u308a\u307e\u3059\u3002\n\n```:Documentation/power/swsusp.txt\n/* \u7565 */\nQ: Can I suspend to a swap file?\n\nA: Generally, yes, you can.  However, it requires you to use the \"resume=\" and\n\"resume_offset=\" kernel command line parameters, so the resume from a swap file\ncannot be initiated from an initrd or initramfs image.  See\nswsusp-and-swap-files.txt for details.\n```\n\n\u3053\u308c\u3089\u306e\u56de\u7b54\u3092\u898b\u308b\u9650\u308a\u3001swswap\u306fswap\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u3078\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u3092\u9000\u907f\u3059\u308b\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\u3053\u308c\u3092\u982d\u306b\u5165\u308c\u3064\u3064\u8aad\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\n\n## swswap\u306e\u51e6\u7406\u3092\u8aad\u3093\u3067\u307f\u308b\u3002\n\n\u72b6\u614b\u9077\u79fb\u3092\u884c\u3046\u95a2\u6570\u306f\u524d\u56de\u898b\u305f\u3068\u304a\u308a\u3001state_store()\u3067\u3057\u305f\u306d\u3002\n\n```c:kernel/power/main.c\nstatic ssize_t state_store(struct kobject *kobj, struct kobj_attribute *attr,\n               const char *buf, size_t n)\n{\n// \u7565\n    state = decode_state(buf, n);\n    if (state < PM_SUSPEND_MAX)\n        error = pm_suspend(state);\n    else if (state == PM_SUSPEND_MAX)\n        error = hibernate();\n    else\n        error = -EINVAL;\n\n```\n\n```c:include/linux/suspend.h\n#define PM_SUSPEND_MAX               ((__force suspend_state_t) 4)\n```\n\n\u4e0a\u8a18\u3088\u308a\u3001swswap\u306e\u5834\u5408\u3001hibernate()\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\n## hibernate()\u306b\u3064\u3044\u3066\n\nhibernate()\u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u95a2\u6570\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n### hibernation_available()\n\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u95a2\u6570\u306e\u540d\u524d\u304b\u3089\u304a\u305d\u3089\u304fhibernation\u6a5f\u80fd\u304c\u5229\u7528\u53ef\u80fd\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\u3088\u3046\u3067\u3059\u3002\n\n```c:kernel/power/hibernate.c\n/**\n * hibernate - Carry out system hibernation, including saving the image.\n */\nint hibernate(void)\n{\n    int error;\n\n    if (!hibernation_available()) {\n        pr_debug(\"PM: Hibernation not available.\\n\");\n        return -EPERM;\n    }    \n```\n\nhibernation_available()\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:include/linux/suspend.h\n#ifdef CONFIG_HIBERNATION\n// \u7565\nextern bool hibernation_available(void);\n// \u7565\n#else\n// \u7565\nstatic inline bool hibernation_available(void) { return false; }\n// \u7565\n#endif\n```\n\n\u30b3\u30f3\u30d5\u30a3\u30b0\u3067hibernation\u3092\u6709\u52b9\u306b\u3057\u306a\u3044\u5834\u5408\u306f\u5e38\u306bfalse\u304c\u8fd4\u308a\u307e\u3059\u3002\nhibernation\u3092\u6709\u52b9\u306b\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\u3002\n\n```c:kernel/power/hibernate.c\nbool hibernation_available(void)\n{\n    return (nohibernate == 0);\n}\n```\n\n\u3082\u3046\u5c11\u3057\u8907\u96d1\u306a\u6761\u4ef6\u4ed8\u3051\u304c\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u610f\u5916\u3067\u3059\u3002\u305f\u3063\u305f\u4e00\u3064\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570nohibernate\u306e\u307f\u3067\u5224\u65ad\u3057\u3066\u3044\u307e\u3059\u3002\nnohibernate_setup()\u3067\u3001nohibernate\u306f1\u306b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nnohibernate_setup()\u306f __init\u5c5e\u6027\u4ed8\u304d\u306a\u306e\u3067\u30ab\u30fc\u30cd\u30eb\u7acb\u3061\u4e0a\u304c\u308a\u6642\u306e\u307f\u306b\u547c\u3070\u308c\u308b\u3053\u3068\u306f\u660e\u767d\u3067\u3059\u3002\n\n```c:kernel/power/hibernate.c\n// \u7565\nstatic int __init nohibernate_setup(char *str)\n{\n    noresume = 1; \n    nohibernate = 1; \n    return 1;\n}\n// \u7565\n__setup(\"nohibernate\", nohibernate_setup);\n// \u7565\n```\n\nnohibernate_setup()\u3092\u30ab\u30fc\u30cd\u30eb\u5185\u304b\u3089\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5f62\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u69d8\u5b50\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u6ce8)nohibernate_setup()\u306fkaslr_nohibernate_setup()\u304b\u3089\u547c\u3070\u308c\u3066\u3044\u308b\u304c\u3001kaslr_nohibernate_setup()\u81ea\u4f53\u3092\u76f4\u63a5\u547c\u3093\u3067\u3044\u308b\u7b87\u6240\u306f\u306a\u3044\u3002\u3053\u308c\u3092\u6307\u3057\u3066\u300c\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5f62\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u69d8\u5b50\u306f\u306a\u3044\u300d\u3068\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u3001__setup()\u3068\u3044\u3046\u30de\u30af\u30ed\u3089\u3057\u304d\u3082\u306e\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\u3002\n\n```c:include/linux/init.h\n/*\n * Only for really core code.  See moduleparam.h for the normal way.\n *\n * Force the alignment so the compiler doesn't space elements of the\n * obs_kernel_param \"array\" too far apart in .init.setup.\n */\n#define __setup_param(str, unique_id, fn, early)            \\\n    static const char __setup_str_##unique_id[] __initconst \\\n        __aligned(1) = str; \\\n    static struct obs_kernel_param __setup_##unique_id  \\\n        __used __section(.init.setup)           \\\n        __attribute__((aligned((sizeof(long)))))    \\\n        = { __setup_str_##unique_id, fn, early }\n\n#define __setup(str, fn)                    \\\n    __setup_param(str, fn, fn, 0)\n```\n\n\u3053\u306e\u30de\u30af\u30ed\u306f\u308f\u304b\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u3042\u308c\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\n\n```c:\u5c55\u958b\n    static const char __setup_str_nohibernate_setup[] __initconst\n        __aligned(1) = \"nohibernate\";\n    static struct obs_kernel_param __setup_nohibernate_setup  \\\n        __used __section(.init.setup)           \\\n        __attribute__((aligned((sizeof(long)))))    \\\n        = { __setup_str_nohibernate_setup, nohibernate_setup, 0 }\n```\n\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5909\u6570\u5ba3\u8a00\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u5909\u6570\u306f.init.setup\u3068\u3044\u3046ELF\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u914d\u7f6e\u3055\u308c\u307e\u3059\u3002\n.init.setup\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002.init.setup\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u5148\u982d\u306f__setup_start\u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u540d\u3067\u53c2\u7167\u3067\u304d\u307e\u3059\u3002(\u306a\u304a\u3001**\u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u5404\u81ea\u3067\u8abf\u3079\u3066\u307f\u3066\u304f\u3060\u3055\u3044**)\n\n```c:include/asm-generic/vmlinux.lds.h\n#define INIT_SETUP(initsetup_align)                 \\\n        . = ALIGN(initsetup_align);             \\\n        VMLINUX_SYMBOL(__setup_start) = .;          \\\n        *(.init.setup)                      \\\n        VMLINUX_SYMBOL(__setup_end) = .;\n```\n\n\u8a73\u7d30\u306f\u5404\u81ea\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u307f\u3066\u6b32\u3057\u3044\u306e\u3067\u3059\u304c\u3001\u4ee5\u4e0bdo_early_param()\u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n\u51e6\u7406\u4e2d\u3001setup_func\u3068\u3044\u3046\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7d4c\u7531\u3067\u5148\u306e__setup()\u30de\u30af\u30ed\u3067\u6307\u5b9a\u3057\u305f\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c:init/main.c\n/* Check for early params. */\nstatic int __init do_early_param(char *param, char *val, const char *unused)\n{\n    const struct obs_kernel_param *p;\n\n    for (p = __setup_start; p < __setup_end; p++) {\n        if ((p->early && parameq(param, p->str)) ||\n            (strcmp(param, \"console\") == 0 &&\n             strcmp(p->str, \"earlycon\") == 0) \n        ) {\n            if (p->setup_func(val) != 0)\n                pr_warn(\"Malformed early option '%s'\\n\", param);\n        }\n    }\n    /* We accept everything at this stage. */\n    return 0;\n}\n```\n\n## \u5148\u306b\u9032\u307f\u307e\u3059\nhibernate()\u306b\u623b\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306f\u5358\u306a\u308b\u6392\u4ed6\u51e6\u7406\u3067\u3059\u3002\u3059\u3067\u306bsnapshot\u3092\u4f5c\u6210\u4e2d\u3067\u3042\u308c\u3070\u3001\u4f55\u3082\u305b\u305a\u51e6\u7406\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\n\n```c:kernel/power/hibernate.c\n    /* The snapshot device should not be opened while we're running */\n    if (!atomic_add_unless(&snapshot_device_available, -1, 0)) {\n        error = -EBUSY;\n        goto Unlock;\n    }    \n```\n\n\u66f4\u306b\u5148\u306b\u9032\u3080\u3068\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u3001pm_prepare_console()\u306f\u98db\u3070\u3057\u307e\u3059\u3002\n\n```c:kernel/power/hibernate.c\n    pm_prepare_console();\n    error = pm_notifier_call_chain(PM_HIBERNATION_PREPARE);\n    if (error)\n        goto Exit;\n```\n\npm_notifier_call_chain()\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:kernel/power/main.c\nint pm_notifier_call_chain(unsigned long val)\n\nint pm_notifier_call_chain(unsigned long val)\n{\n    int ret = blocking_notifier_call_chain(&pm_chain_head, val, NULL);\n\n    return notifier_to_errno(ret);\n}\n```\n\n\u8a73\u3057\u304f\u306f\u898b\u307e\u305b\u3093\u304c\u3001kernel/notifier.c\u306bnotifier\u306e\u51e6\u7406\u7fa4\u304c\u3042\u308a\u307e\u3059\u3002\n\u4e0a\u306e\u51e6\u7406\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u306e\u4ed5\u7d44\u307f\u3068\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u3064\u307e\u308a\u3001\u3053\u3053\u306fhibernate\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u901a\u77e5\u3059\u308b\u3001\u3068\u8003\u3048\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u6642\u306b\u5b9f\u65bd\u3055\u308c\u308b\u7279\u6b8a\u306a\u30a4\u30d9\u30f3\u30c8\u901a\u77e5\u3082\u3042\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u8208\u5473\u304c\u3042\u308c\u3070\u305c\u3072\u76ee\u3092\u901a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nhibernate()\u306b\u623b\u308a\u307e\u3059\u3002\nsync\u3057\u305f\u4e0a\u3001\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u72b6\u614b\u306b\u9077\u79fb\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002freeze_process()\u306f[\u524d\u56de](http://qiita.com/akachochin/items/ab9a8b9db454e9ab7f31)\u66f8\u3044\u305f\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:kernel/power/hibernate.c\n    printk(KERN_INFO \"PM: Syncing filesystems ... \");\n    sys_sync();\n    printk(\"done.\\n\");\n\n    error = freeze_processes();\n    if (error)\n        goto Exit;\n```\n\nsys_sync()\u304a\u3088\u3073freeze_processes()\u306e\u547c\u3073\u51fa\u3057\u306f\u300csuspend\u306b\u306a\u3063\u305f\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u66f8\u304d\u8fbc\u307f\u3092\u9632\u3050\u300d\u3068\u3044\u3046\u610f\u56f3\u3067\u5b9f\u65bd\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\nsync()\u3092\u3057\u306a\u3044\u3068\u3001\u30c0\u30fc\u30c6\u30a3\u306a\u30d5\u30a1\u30a4\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u3092sync()\u3059\u308b\u305f\u3081\u306e\u66f8\u304d\u8fbc\u307f\u304c\u884c\u308f\u308c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30e6\u30fc\u30b6\u30d7\u30ed\u30bb\u30b9\u304c\u5b9f\u884c\u53ef\u80fd\u306b\u306a\u308b\u3068\u3001\u30b9\u30c8\u30ec\u30fc\u30b8\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\n\n## \u6b21\u56de\u306f\n\u4eca\u56de\u306fhibernate()\u306e\u307b\u3093\u306e\u5165\u308a\u53e3\u3067\u3057\u305f\u3002\n\u6b21\u56de\u306f\u3055\u3089\u306bhibernate()\u3092\u8aad\u307f\u307e\u3059\u3002\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u3092\u4f5c\u308b\u3068\u3053\u308d\u307e\u3067\u30fb\u30fb\u30fb\u3044\u3051\u308c\u3070\u3044\u3044\u306a\u3042\u3002\n", "tags": ["Linux", "kernel", "kernelvm"]}