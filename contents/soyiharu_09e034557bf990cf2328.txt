{"context": " More than 1 year has passed since last update.2015/07/22 \u4fee\u6b63\uff1a\u30bf\u30a4\u30c8\u30eb\u304c\u81f4\u547d\u7684\u306a\u307e\u3067\u306b\u9593\u9055\u3063\u3066\u3044\u307e\u3057\u305f(\u5185\u5bb9\u81ea\u4f53\u306b\u4fee\u6b63\u306f\u3042\u308a\u307e\u305b\u3093)\n\n\u30bf\u30a4\u30c8\u30eb\u306e\u3068\u304a\u308a\nboost.test\u306b\u306f\u3001\u4e8c\u3064\u306e\u5024\u304c\u7b49\u3057\u3044\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u30de\u30af\u30edBOOST_CHECK_EQUAL\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u305d\u306e\u914d\u5217\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3001\u8981\u7d20\u3054\u3068\u306b\u7b49\u3057\u3044\u304b\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3046BOOST_CHECK_EQUAL_COLLECTIONS\u3068\u3044\u3046\u30de\u30af\u30ed\u3082\u3042\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u5b9f\u6570\u578b\u306e\u6f14\u7b97\u306f\u8aa4\u5dee\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u8aa4\u5dee\u3092\u8003\u616e\u3057\u305f\u3046\u3048\u3067\u3001\u6b63\u3057\u3044\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u6642\u306b\u4f7f\u3046\u8aa4\u5dee\u3092\u8a31\u5bb9\u3057\u3066\u6bd4\u8f03\u3059\u308b\u30de\u30af\u30ed\u3001BOOST_CHECK_CLOSE\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u6b8b\u5ff5\u306a\u3053\u3068\u306b\u305d\u306e\u914d\u5217\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u306a\u3044\u306a\u3089\u4f5c\u308c\u3070\u3044\u3044\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u3064\u3044\u3067\u306b\u3001\u914d\u5217\u306ebegin\u3068end\u3092\u6307\u5b9a\u3059\u308b\u306e\u304c\u5197\u9577\u3060\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u3042\u305f\u308a\u306e\u51e6\u7406\u3082\u30de\u30af\u30ed\u306b\u3057\u307e\u3057\u305f\u3002\n#include <boost/type_traits.hpp>\nnamespace boost {\nnamespace test_tools {\nnamespace tt_detail {\nstruct close_coll_impl {\n  template <typename Left, typename Right, typename ToleranceType>\n  assertion_result operator()(Left left_begin, Left left_end, Right right_begin,\n                              Right right_end, ToleranceType tolerance) {\n    assertion_result pr(true);\n    std::size_t pos = 0;\n\n    math::fpc::close_at_tolerance<typename comp_supertype<\n        boost::remove_reference<decltype(*Left())>::type,\n        boost::remove_reference<decltype(*Right())>::type>::type>\n        pred(tolerance, math::fpc::FPC_STRONG);\n    for (; left_begin != left_end && right_begin != right_end;\n         ++left_begin, ++right_begin, ++pos) {\n      if (!pred(*left_begin, *right_begin)) {\n        pr = false;\n        pr.message() << \"\\nMismatch at position \" << pos << \": \"\n                     << ::boost::test_tools::tt_detail::print_helper(\n                            *left_begin)\n                     << \" != \" << ::boost::test_tools::tt_detail::print_helper(\n                                      *right_begin);\n      }\n    }\n\n    if (left_begin != left_end) {\n      std::size_t r_size = pos;\n      while (left_begin != left_end) {\n        ++pos;\n        ++left_begin;\n      }\n\n      pr = false;\n      pr.message() << \"\\nCollections size mismatch: \" << pos\n                   << \" != \" << r_size;\n    }\n\n    if (right_begin != right_end) {\n      std::size_t l_size = pos;\n      while (right_begin != right_end) {\n        ++pos;\n        ++right_begin;\n      }\n\n      pr = false;\n      pr.message() << \"\\nCollections size mismatch: \" << l_size\n                   << \" != \" << pos;\n    }\n\n    return pr;\n  }\n};\n}\n}\n}\n//---------------------------------------------------------------------------\n#define BOOST_WARN_CLOSE_COLLECTIONS(L_begin, L_end, R_begin, R_end, T)      \\\n  BOOST_TEST_TOOL_IMPL(1, ::boost::test_tools::tt_detail::close_coll_impl(), \\\n                       \"\", WARN, CHECK_EQUAL_COLL,                           \\\n                       (L_begin)(L_end)(R_begin)(R_end)(                     \\\n                           ::boost::math::fpc::percent_tolerance(T))) /**/\n#define BOOST_CHECK_CLOSE_COLLECTIONS(L_begin, L_end, R_begin, R_end, T)     \\\n  BOOST_TEST_TOOL_IMPL(1, ::boost::test_tools::tt_detail::close_coll_impl(), \\\n                       \"\", CHECK, CHECK_EQUAL_COLL,                          \\\n                       (L_begin)(L_end)(R_begin)(R_end)(                     \\\n                           ::boost::math::fpc::percent_tolerance(T))) /**/\n#define BOOST_REQUIRE_CLOSE_COLLECTIONS(L_begin, L_end, R_begin, R_end, T)   \\\n  BOOST_TEST_TOOL_IMPL(1, ::boost::test_tools::tt_detail::close_coll_impl(), \\\n                       \"\", REQUIRE, CHECK_EQUAL_COLL,                        \\\n                       (L_begin)(L_end)(R_begin)(R_end)(                     \\\n                           ::boost::math::fpc::percent_tolerance(T))) /**/\n//---------------------------------------------------------------------------\n#define BOOST_WARN_EQUAL_RANGES(left, right)                     \\\n  BOOST_WARN_EQUAL_COLLECTIONS(std::begin(left), std::end(left), \\\n                               std::begin(right), std::end(right))\n#define BOOST_CHECK_EQUAL_RANGES(left, right)                     \\\n  BOOST_CHECK_EQUAL_COLLECTIONS(std::begin(left), std::end(left), \\\n                                std::begin(right), std::end(right))\n#define BOOST_REQUIRE_EQUAL_RANGES(left, right)                     \\\n  BOOST_REQUIRE_EQUAL_COLLECTIONS(std::begin(left), std::end(left), \\\n                                  std::begin(right), std::end(right))\n//---------------------------------------------------------------------------\n#define BOOST_WARN_CLOSE_RANGES(left, right, t)                  \\\n  BOOST_WARN_CLOSE_COLLECTIONS(std::begin(left), std::end(left), \\\n                               std::begin(right), std::end(right), t)\n#define BOOST_CHECK_CLOSE_RANGES(left, right, t)                  \\\n  BOOST_CHECK_CLOSE_COLLECTIONS(std::begin(left), std::end(left), \\\n                                std::begin(right), std::end(right), t)\n#define BOOST_REQUIRE_CLOSE_RANGES(left, right, t)                  \\\n  BOOST_REQUIRE_CLOSE_COLLECTIONS(std::begin(left), std::end(left), \\\n                                  std::begin(right), std::end(right), t)\n\n\nBOOST_CHECK_CLOSE\u306e\u914d\u5217\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30de\u30af\u30ed\u306fBOOST_CHECK_CLOSE_COLLECTIONS\u3067\u3059\u3002\n\u307e\u305f\u3001\u914d\u5217\u306e\u7bc4\u56f2\u306e\u6307\u5b9a\u3092\u81ea\u52d5\u5316\u3057\u305f\u306e\u304c\u3001BOOST_CHECK_CLOSE_RANGES\u3067\u3059\u3002\n\u3064\u3044\u3067\u306b\u3001BOOST_CHECK_EQUAL_COLLECTIONS\u306e\u7bc4\u56f2\u6307\u5b9a\u3092\u81ea\u52d5\u5316\u30d0\u30fc\u30b8\u30e7\u30f3\u3001BOOST_CHECK_EQUAL_RANGES\u3082\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u7c21\u5358\u306a\u89e3\u8aac\nclose_coll_impl\u69cb\u9020\u4f53\u306f\u3001BOOST_CHECK_EQUAL_COLLECTIONS\u3067\u5229\u7528\u3057\u3066\u3044\u308bequal_coll_impl\u306e\u307b\u3068\u3093\u3069\u30b3\u30d4\u30fc\u3067\u3059\u3002\u4e8c\u3064\u306e\u5024\u3092\u6bd4\u8f03\u3059\u308b\u95a2\u6570\u306f\u3001BOOST_CHECK_CLOSE\u306echeck_is_close_t\u69cb\u9020\u4f53\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\u5024\u3092\u6bd4\u8f03\u3059\u308b\u95a2\u6570\u306e\u578b\u306bdecltype\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u53e4\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3067\u306f\u52d5\u304b\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\n\u3042\u307e\u308a\u7d30\u304b\u3044\u691c\u8a3c\u3092\u884c\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u52d5\u304b\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305d\u306e\u6642\u306f\u3001\u3088\u308d\u3057\u3051\u308c\u3070\u5fa1\u4e00\u5831\u304f\u3060\u3055\u3044\u3002\n2015/07/22 \u4fee\u6b63\uff1a\u30bf\u30a4\u30c8\u30eb\u304c\u81f4\u547d\u7684\u306a\u307e\u3067\u306b\u9593\u9055\u3063\u3066\u3044\u307e\u3057\u305f(\u5185\u5bb9\u81ea\u4f53\u306b\u4fee\u6b63\u306f\u3042\u308a\u307e\u305b\u3093)\n\n# \u30bf\u30a4\u30c8\u30eb\u306e\u3068\u304a\u308a\nboost.test\u306b\u306f\u3001\u4e8c\u3064\u306e\u5024\u304c\u7b49\u3057\u3044\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u30de\u30af\u30edBOOST_CHECK_EQUAL\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u305d\u306e\u914d\u5217\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3001\u8981\u7d20\u3054\u3068\u306b\u7b49\u3057\u3044\u304b\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3046BOOST_CHECK_EQUAL_COLLECTIONS\u3068\u3044\u3046\u30de\u30af\u30ed\u3082\u3042\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u5b9f\u6570\u578b\u306e\u6f14\u7b97\u306f\u8aa4\u5dee\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u8aa4\u5dee\u3092\u8003\u616e\u3057\u305f\u3046\u3048\u3067\u3001\u6b63\u3057\u3044\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u6642\u306b\u4f7f\u3046\u8aa4\u5dee\u3092\u8a31\u5bb9\u3057\u3066\u6bd4\u8f03\u3059\u308b\u30de\u30af\u30ed\u3001BOOST_CHECK_CLOSE\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u6b8b\u5ff5\u306a\u3053\u3068\u306b\u305d\u306e\u914d\u5217\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u306a\u3044\u306a\u3089\u4f5c\u308c\u3070\u3044\u3044\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u3064\u3044\u3067\u306b\u3001\u914d\u5217\u306ebegin\u3068end\u3092\u6307\u5b9a\u3059\u308b\u306e\u304c\u5197\u9577\u3060\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u3042\u305f\u308a\u306e\u51e6\u7406\u3082\u30de\u30af\u30ed\u306b\u3057\u307e\u3057\u305f\u3002\n\n```cpp\n#include <boost/type_traits.hpp>\nnamespace boost {\nnamespace test_tools {\nnamespace tt_detail {\nstruct close_coll_impl {\n  template <typename Left, typename Right, typename ToleranceType>\n  assertion_result operator()(Left left_begin, Left left_end, Right right_begin,\n                              Right right_end, ToleranceType tolerance) {\n    assertion_result pr(true);\n    std::size_t pos = 0;\n\n    math::fpc::close_at_tolerance<typename comp_supertype<\n        boost::remove_reference<decltype(*Left())>::type,\n        boost::remove_reference<decltype(*Right())>::type>::type>\n        pred(tolerance, math::fpc::FPC_STRONG);\n    for (; left_begin != left_end && right_begin != right_end;\n         ++left_begin, ++right_begin, ++pos) {\n      if (!pred(*left_begin, *right_begin)) {\n        pr = false;\n        pr.message() << \"\\nMismatch at position \" << pos << \": \"\n                     << ::boost::test_tools::tt_detail::print_helper(\n                            *left_begin)\n                     << \" != \" << ::boost::test_tools::tt_detail::print_helper(\n                                      *right_begin);\n      }\n    }\n\n    if (left_begin != left_end) {\n      std::size_t r_size = pos;\n      while (left_begin != left_end) {\n        ++pos;\n        ++left_begin;\n      }\n\n      pr = false;\n      pr.message() << \"\\nCollections size mismatch: \" << pos\n                   << \" != \" << r_size;\n    }\n\n    if (right_begin != right_end) {\n      std::size_t l_size = pos;\n      while (right_begin != right_end) {\n        ++pos;\n        ++right_begin;\n      }\n\n      pr = false;\n      pr.message() << \"\\nCollections size mismatch: \" << l_size\n                   << \" != \" << pos;\n    }\n\n    return pr;\n  }\n};\n}\n}\n}\n//---------------------------------------------------------------------------\n#define BOOST_WARN_CLOSE_COLLECTIONS(L_begin, L_end, R_begin, R_end, T)      \\\n  BOOST_TEST_TOOL_IMPL(1, ::boost::test_tools::tt_detail::close_coll_impl(), \\\n                       \"\", WARN, CHECK_EQUAL_COLL,                           \\\n                       (L_begin)(L_end)(R_begin)(R_end)(                     \\\n                           ::boost::math::fpc::percent_tolerance(T))) /**/\n#define BOOST_CHECK_CLOSE_COLLECTIONS(L_begin, L_end, R_begin, R_end, T)     \\\n  BOOST_TEST_TOOL_IMPL(1, ::boost::test_tools::tt_detail::close_coll_impl(), \\\n                       \"\", CHECK, CHECK_EQUAL_COLL,                          \\\n                       (L_begin)(L_end)(R_begin)(R_end)(                     \\\n                           ::boost::math::fpc::percent_tolerance(T))) /**/\n#define BOOST_REQUIRE_CLOSE_COLLECTIONS(L_begin, L_end, R_begin, R_end, T)   \\\n  BOOST_TEST_TOOL_IMPL(1, ::boost::test_tools::tt_detail::close_coll_impl(), \\\n                       \"\", REQUIRE, CHECK_EQUAL_COLL,                        \\\n                       (L_begin)(L_end)(R_begin)(R_end)(                     \\\n                           ::boost::math::fpc::percent_tolerance(T))) /**/\n//---------------------------------------------------------------------------\n#define BOOST_WARN_EQUAL_RANGES(left, right)                     \\\n  BOOST_WARN_EQUAL_COLLECTIONS(std::begin(left), std::end(left), \\\n                               std::begin(right), std::end(right))\n#define BOOST_CHECK_EQUAL_RANGES(left, right)                     \\\n  BOOST_CHECK_EQUAL_COLLECTIONS(std::begin(left), std::end(left), \\\n                                std::begin(right), std::end(right))\n#define BOOST_REQUIRE_EQUAL_RANGES(left, right)                     \\\n  BOOST_REQUIRE_EQUAL_COLLECTIONS(std::begin(left), std::end(left), \\\n                                  std::begin(right), std::end(right))\n//---------------------------------------------------------------------------\n#define BOOST_WARN_CLOSE_RANGES(left, right, t)                  \\\n  BOOST_WARN_CLOSE_COLLECTIONS(std::begin(left), std::end(left), \\\n                               std::begin(right), std::end(right), t)\n#define BOOST_CHECK_CLOSE_RANGES(left, right, t)                  \\\n  BOOST_CHECK_CLOSE_COLLECTIONS(std::begin(left), std::end(left), \\\n                                std::begin(right), std::end(right), t)\n#define BOOST_REQUIRE_CLOSE_RANGES(left, right, t)                  \\\n  BOOST_REQUIRE_CLOSE_COLLECTIONS(std::begin(left), std::end(left), \\\n                                  std::begin(right), std::end(right), t)\n\n```\n\nBOOST_CHECK_CLOSE\u306e\u914d\u5217\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30de\u30af\u30ed\u306fBOOST_CHECK_CLOSE_COLLECTIONS\u3067\u3059\u3002\n\u307e\u305f\u3001\u914d\u5217\u306e\u7bc4\u56f2\u306e\u6307\u5b9a\u3092\u81ea\u52d5\u5316\u3057\u305f\u306e\u304c\u3001BOOST_CHECK_CLOSE_RANGES\u3067\u3059\u3002\n\u3064\u3044\u3067\u306b\u3001BOOST_CHECK_EQUAL_COLLECTIONS\u306e\u7bc4\u56f2\u6307\u5b9a\u3092\u81ea\u52d5\u5316\u30d0\u30fc\u30b8\u30e7\u30f3\u3001BOOST_CHECK_EQUAL_RANGES\u3082\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n# \u7c21\u5358\u306a\u89e3\u8aac\nclose_coll_impl\u69cb\u9020\u4f53\u306f\u3001BOOST_CHECK_EQUAL_COLLECTIONS\u3067\u5229\u7528\u3057\u3066\u3044\u308bequal_coll_impl\u306e\u307b\u3068\u3093\u3069\u30b3\u30d4\u30fc\u3067\u3059\u3002\u4e8c\u3064\u306e\u5024\u3092\u6bd4\u8f03\u3059\u308b\u95a2\u6570\u306f\u3001BOOST_CHECK_CLOSE\u306echeck_is_close_t\u69cb\u9020\u4f53\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u5024\u3092\u6bd4\u8f03\u3059\u308b\u95a2\u6570\u306e\u578b\u306bdecltype\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u53e4\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3067\u306f\u52d5\u304b\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n# \u6700\u5f8c\u306b\n\u3042\u307e\u308a\u7d30\u304b\u3044\u691c\u8a3c\u3092\u884c\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u52d5\u304b\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305d\u306e\u6642\u306f\u3001\u3088\u308d\u3057\u3051\u308c\u3070\u5fa1\u4e00\u5831\u304f\u3060\u3055\u3044\u3002\n", "tags": ["C++", "boost", "Boost.Test"]}