{"tags": ["RaspberryPi", "BME280", "Meshblu", "mqtt", "IoT"], "context": " More than 1 year has passed since last update.Raspberry Pi 2\u306ePython\u3092\u4f7f\u3044\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u304c\u8ca9\u58f2\u3057\u3066\u3044\u308bBME280\u306e\u74b0\u5883\u30bb\u30f3\u30b5\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u6b21\u306fPaho\u306eMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066publish\u3057\u3066\u307f\u307e\u3059\u3002MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u5074\u306fMeshblu\u3092\u30af\u30e9\u30a6\u30c9\u4e0a\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002Meshblu\u3092\u4f7f\u3046\u3068MQTT\u3084HTTP REST\u3001WebSocket\u306a\u3069\u8907\u6570\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u9593\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d6\u30ea\u30c3\u30b8\u3067\u304d\u308b\u306e\u3067\u3044\u308d\u3044\u308d\u3068\u697d\u3057\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\nRaspberry Pi 2\u306f\u672c\u683c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u66f8\u304f\u306e\u306f\u4e0d\u5411\u304d\u3067\u3059\u304c\u3001\u3053\u306e\u7a0b\u5ea6\u306e\u30b3\u30fc\u30c9\u3067\u3057\u305f\u3089\u76f4\u63a5vim\u3067\u66f8\u3044\u3066\u3057\u307e\u3044\u307e\u3059\u3002Raspberry Pi 2\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u3053\u3061\u3089\u3067\u3059\u3002\u6700\u7d42\u7684\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n$ cd ~/python_apps/bme280\n$ tree\n.\n\u251c\u2500\u2500 bme280_publish.py\n\u251c\u2500\u2500 bme280.py\n\u251c\u2500\u2500 config.py\n\u2514\u2500\u2500 README.md\n\nPython\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002\n$ cd ~/python_apps/bme280\n$ wget https://raw.githubusercontent.com/SWITCHSCIENCE/BME280/master/Python27/bme280_sample.py\n\n\nMQTT\n\nMeshblu\u306eMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\n\u79c1\u306e\u5834\u5408Meshblu\u306eMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002Meshblu\u306fIoT\u5411\u3051\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3059\u3002MQTT\u306e\u4ed6\u306bHTTP REST\u3001WebSocket\u3001CoAP\u306a\u3069\u8907\u6570\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u5bfe\u5fdc\u3057\u3001\u76f8\u4e92\u306b\u30d6\u30ea\u30c3\u30b8\u304c\u53ef\u80fd\u3067\u3059\u3002Meshblu\u306fNode.js\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u5b9f\u88c5\u3082Node.js\u306eMosca\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306fMeshblu\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306eMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u5b9f\u88c5\u306b\u306fMosca\u3001Mosquitto\u3001Ponte\u306a\u3069\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u3002\n\u307e\u305fMeshblu\u306eJavaScript\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u3046\u3068\u3001\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3068\u3057\u3066\u5bfe\u5fdc\u3057\u3066\u3044\u308bfreeboard\u3067\u306f\u76f4\u63a5\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u3001MQTT\u3067publish\u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092WebScocket\u7d4c\u7531\u3067subscribe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\nPaho\u306eMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\nMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306fPaho\u306epaho-mqtt\u3092\u4f7f\u3044\u307e\u3059\u3002\n$ pip install paho-mqtt\n\nMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u8a2d\u5b9a\u306f\u7c21\u5358\u306bPython\u306e\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306b\u66f8\u3044\u3066import\u3057\u307e\u3057\u305f\u3002\n\n~/python_apps/bme280-meshblu-py/config.py\nconf = {\n     \"MESHBLU_URL\": \"xxx.xxx.xxx.xxx\",\n     \"MESHBLU_USER\": \"5abcfad1-9129-4f4f-b946-cabb6ecd9f6a\",\n     \"MESHBLU_PASSWORD\": \"d8b721ed\",\n     \"SEND_TO\": \"28cbe216-1c1c-477a-bbd5-5ee81d30ba02\"\n}\n\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nbme280_sample.py\u306fBME280\u304b\u3089\u53d6\u5f97\u3057\u305f\u74b0\u5883\u30c7\u30fc\u30bf\u3092\u6a19\u6e96\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002MQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089import\u3057\u3066\u4f7f\u3046\u3088\u3046\u306b\u5c11\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\n\nbme280.py\nbme280_sample.py\u3092\u30b3\u30d4\u30fc\u3057\u3066bme280.py\u3092\u4f5c\u6210\u3057\u3066\u7de8\u96c6\u3057\u307e\u3059\u3002\u4fee\u6b63\u7b87\u6240\u306f\u4ee5\u4e0b\u3067\u3059\u3002\u95a2\u6570\u5185\u3067\u6a19\u6e96\u51fa\u529b\u3092\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3092return\u3057\u3066\u3001\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3067JSON\u306b\u3057\u3066\u8fd4\u3059\u3060\u3051\u3067\u3059\u3002\n@@ -66,9 +66,12 @@\n    temp_raw = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4)\n    hum_raw  = (data[6] << 8)  |  data[7]\n\n-   compensate_T(temp_raw)\n-   compensate_P(pres_raw)\n-   compensate_H(hum_raw)\n+   temperature = compensate_T(temp_raw)\n+   pressure = compensate_P(pres_raw)\n+   humidity = compensate_H(hum_raw)\n+        return dict(temperature=temperature,\n+                    pressure=pressure,\n+                    humidity=humidity)\n\n def compensate_P(adc_P):\n    global  t_fine\n@@ -92,7 +95,8 @@\n    v2 = ((pressure / 4.0) * digP[7]) / 8192.0\n    pressure = pressure + ((v1 + v2 + digP[6]) / 16.0)  \n\n-   print \"pressure : %7.2f hPa\" % (pressure/100)\n+   #print \"pressure : %7.2f hPa\" % (pressure/100)\n+        return \"{:.2f}\".format(pressure/100)\n\n def compensate_T(adc_T):\n    global t_fine\n@@ -100,7 +104,8 @@\n    v2 = (adc_T / 131072.0 - digT[0] / 8192.0) * (adc_T / 131072.0 - digT[0] / 8192.0) * digT[2]\n    t_fine = v1 + v2\n    temperature = t_fine / 5120.0\n-   print \"temp : %-6.2f \u2103\" % (temperature) \n+   #print \"temp : %-6.2f \u2103\" % (temperature) \n+        return \"{:.2f}\".format(temperature)\n\n def compensate_H(adc_H):\n    global t_fine\n@@ -114,8 +119,8 @@\n        var_h = 100.0\n    elif var_h < 0.0:\n        var_h = 0.0\n-   print \"hum : %6.2f \uff05\" % (var_h)\n-\n+   #print \"hum : %6.2f \uff05\" % (var_h)\n+        return \"{:.2f}\".format(var_h)\n\n def setup():\n    osrs_t = 1          #Temperature oversampling x 1\n\n\nbme280_publish.py\nMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u3046\u30e1\u30a4\u30f3\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u3055\u3093\u306ebme280_sample.py\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u7528\u306b\u4fee\u6b63\u3057\u305fbme280\u3068\u3001paho-mqtt\u3092import\u3057\u3066\u4f7f\u3044\u307e\u3059\u30025\u79d2\u9593\u9694\u3067\u74b0\u5883\u30c7\u30fc\u30bf\u3092\u8a08\u6e2c\u3057\u3066JSON\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u5f8c\u3001MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306bpublish\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n~/python_apps/bme280-meshblu-py/bme280_publish.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport paho.mqtt.client as mqtt\nfrom time import sleep\nimport json\nimport sys\nimport bme280\nfrom config import conf\n\ndef sensing():\n    return bme280.readData()\n\ndef on_connect(client, userdata, rc):\n    print(\"Connected with result code {}\".format(rc))\n\ndef on_publish(client, userdata, mid):\n    print(\"publish: {}\".format(mid))\n\ndef main():\n    client = mqtt.Client(client_id='',\n                     clean_session=True, protocol=mqtt.MQTTv311)\n\n    client.username_pw_set(conf[\"MESHBLU_USER\"], conf[\"MESHBLU_PASSWORD\"])\n    client.on_connect = on_connect\n    client.on_publish = on_publish\n\n    client.connect(conf[\"MESHBLU_URL\"], 1883, 60)\n\n    while True:\n        retval = sensing()\n        if retval:\n             message = json.dumps({\"devices\":\n                          conf[\"SEND_TO\"],\n                              \"payload\": retval})\n             print(message)\n             client.publish(\"message\",message)\n        sleep(5)\n\nif __name__ == '__main__':\n    main()\n\n\n\u4eca\u56de\u306fMeshblu\u3092MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306b\u4f7f\u3063\u3066\u3044\u308b\u305f\u3081\u3001message\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u6c7a\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u4ed6\u306eMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u3092\u4f7f\u3046\u3068\u304d\u306fpayload\u3060\u3051\u3067\u69cb\u3044\u307e\u305b\u3093\u3002\u307e\u305fdevices\u306e\u30ad\u30fc\u306b\u5b9b\u5148\u3092\u6307\u5b9a\u3057\u3066\u3001topic\u540d\u306fmessage\u3092\u56fa\u5b9a\u3067\u4f7f\u3046\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n{\"payload\": {\"pressure\": \"999.56\", \"temperature\": \"28.94\", \"humidity\": \"59.14\"}, \n \"devices\": \"28cbe216-1c1c-477a-bbd5-5ee81d30ba02\"}\n\n\n\u30c6\u30b9\u30c8\n\nMQTT subscribe\nMQTT\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u3001MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u30db\u30b9\u30c8\u306bMosquitto\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n$ sudo apt-get install mosquitto_client\n\nmosquitto_sub\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066subscribe\u3057\u307e\u3059\u3002\u3053\u3061\u3089\u3082Meshblu\u306e\u4ed5\u69d8\u306a\u306e\u3067topic\u540d\u3084\u30e6\u30fc\u30b6\u30fc\u540d\u306fMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u4ed5\u69d8\u306b\u5408\u308f\u305b\u3066\u4f7f\u3044\u307e\u3059\u3002\n$ mosquitto_sub \\\n  -h localhost \\\n  -p 1883 \\\n  -t 28cbe216-1c1c-477a-bbd5-5ee81d30ba02 \\\n  -u 28cbe216-1c1c-477a-bbd5-5ee81d30ba02 \\\n  -P 9e7cbe84 \\\n  -d\nReceived CONNACK\nReceived SUBACK\nSubscribed (mid: 1): 0\n\n\nMQTT publish\nRaspberry Pi 2\u306b\u623b\u308a\u3001\u4f5c\u6210\u3057\u305fbme280_publish.py\u3092sudo\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002pi\u30e6\u30fc\u30b6\u30fc\u3092i2c\u30b0\u30eb\u30fc\u30d7\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\u5834\u5408\u306fsudo\u306f\u4e0d\u8981\u3067\u3059\u3002\n$ sudo ./bme280_publish.py\n{\"payload\": {\"pressure\": \"999.96\", \"temperature\": \"28.79\", \"humidity\": \"58.76\"}, \"devices\": \"28cbe216-1c1c-477a-bbd5-5ee81d30ba02\"}\npublish: 1\n{\"payload\": {\"pressure\": \"999.97\", \"temperature\": \"28.74\", \"humidity\": \"58.07\"}, \"devices\": \"28cbe216-1c1c-477a-bbd5-5ee81d30ba02\"}\npublish: 2\n\n5\u79d2\u9593\u9694\u3067BME280\u304b\u3089\u53d6\u5f97\u3057\u305f\u74b0\u5883\u30c7\u30fc\u30bf\u3092MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306bpublish\u3057\u59cb\u3081\u307e\u3057\u305f\u3002\n\u518d\u3073MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u30db\u30b9\u30c8\u306b\u623b\u308b\u3068\u3001mosquitto_sub\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u30b7\u30a7\u30eb\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6a19\u6e96\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002\n...\nSubscribed (mid: 1): 0\nReceived PUBLISH (d0, q0, r0, m0, '28cbe216-1c1c-477a-bbd5-5ee81d30ba02', ... (71 bytes))\n{\"data\":{\"pressure\":\"999.97\",\"temperature\":\"28.74\",\"humidity\":\"58.07\"}}\nReceived PUBLISH (d0, q0, r0, m0, '28cbe216-1c1c-477a-bbd5-5ee81d30ba02', ... (71 bytes))\n{\"data\":{\"pressure\":\"999.97\",\"temperature\":\"28.74\",\"humidity\":\"58.07\"}}\n\n[Raspberry Pi 2\u306ePython\u3092\u4f7f\u3044](http://qiita.com/masato/items/027e5c824ae75ab417c1)\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u304c\u8ca9\u58f2\u3057\u3066\u3044\u308b[BME280](https://www.switch-science.com/catalog/2236/)\u306e\u74b0\u5883\u30bb\u30f3\u30b5\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u6b21\u306f[Paho](http://www.eclipse.org/paho/)\u306e[MQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8](https://pypi.python.org/pypi/paho-mqtt)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066publish\u3057\u3066\u307f\u307e\u3059\u3002MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u5074\u306f[Meshblu](https://github.com/octoblu/meshblu)\u3092\u30af\u30e9\u30a6\u30c9\u4e0a\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002Meshblu\u3092\u4f7f\u3046\u3068MQTT\u3084HTTP REST\u3001WebSocket\u306a\u3069\u8907\u6570\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u9593\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d6\u30ea\u30c3\u30b8\u3067\u304d\u308b\u306e\u3067\u3044\u308d\u3044\u308d\u3068\u697d\u3057\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\nRaspberry Pi 2\u306f\u672c\u683c\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u66f8\u304f\u306e\u306f\u4e0d\u5411\u304d\u3067\u3059\u304c\u3001\u3053\u306e\u7a0b\u5ea6\u306e\u30b3\u30fc\u30c9\u3067\u3057\u305f\u3089\u76f4\u63a5vim\u3067\u66f8\u3044\u3066\u3057\u307e\u3044\u307e\u3059\u3002Raspberry Pi 2\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u9069\u5f53\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30ea\u30dd\u30b8\u30c8\u30ea\u306f[\u3053\u3061\u3089](https://github.com/masato/bme280-meshblu-py)\u3067\u3059\u3002\u6700\u7d42\u7684\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```bash\n$ cd ~/python_apps/bme280\n$ tree\n.\n\u251c\u2500\u2500 bme280_publish.py\n\u251c\u2500\u2500 bme280.py\n\u251c\u2500\u2500 config.py\n\u2514\u2500\u2500 README.md\n```\n\n[Python\u30e9\u30a4\u30d6\u30e9\u30ea](https://github.com/SWITCHSCIENCE/BME280/tree/master/Python27)\u3092\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002\n\n```bash\n$ cd ~/python_apps/bme280\n$ wget https://raw.githubusercontent.com/SWITCHSCIENCE/BME280/master/Python27/bme280_sample.py\n```\n\n\n## MQTT\n\n### Meshblu\u306eMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\n\n\u79c1\u306e\u5834\u5408[Meshblu](https://github.com/octoblu/meshblu)\u306eMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002Meshblu\u306fIoT\u5411\u3051\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3059\u3002MQTT\u306e\u4ed6\u306bHTTP REST\u3001WebSocket\u3001CoAP\u306a\u3069\u8907\u6570\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u5bfe\u5fdc\u3057\u3001\u76f8\u4e92\u306b\u30d6\u30ea\u30c3\u30b8\u304c\u53ef\u80fd\u3067\u3059\u3002Meshblu\u306fNode.js\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u5b9f\u88c5\u3082Node.js\u306e[Mosca](https://github.com/mcollina/mosca)\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306fMeshblu\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306eMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u5b9f\u88c5\u306b\u306f[Mosca](https://github.com/mcollina/mosca)\u3001[Mosquitto](http://mosquitto.org/)\u3001[Ponte](https://eclipse.org/ponte/)\u306a\u3069\u3044\u308d\u3044\u308d\u3042\u308a\u307e\u3059\u3002\n\n\u307e\u305fMeshblu\u306eJavaScript\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u3046\u3068\u3001\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3068\u3057\u3066\u5bfe\u5fdc\u3057\u3066\u3044\u308b[freeboard](https://github.com/Freeboard/freeboard)\u3067\u306f\u76f4\u63a5\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u3001MQTT\u3067publish\u3055\u308c\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092WebScocket\u7d4c\u7531\u3067subscribe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n### Paho\u306eMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n\nMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f[Paho](http://www.eclipse.org/paho/)\u306e[paho-mqtt](https://pypi.python.org/pypi/paho-mqtt)\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```bash\n$ pip install paho-mqtt\n```\n\nMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u8a2d\u5b9a\u306f\u7c21\u5358\u306bPython\u306e\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306b\u66f8\u3044\u3066import\u3057\u307e\u3057\u305f\u3002\n\n```python:~/python_apps/bme280-meshblu-py/config.py\nconf = {\n     \"MESHBLU_URL\": \"xxx.xxx.xxx.xxx\",\n     \"MESHBLU_USER\": \"5abcfad1-9129-4f4f-b946-cabb6ecd9f6a\",\n     \"MESHBLU_PASSWORD\": \"d8b721ed\",\n     \"SEND_TO\": \"28cbe216-1c1c-477a-bbd5-5ee81d30ba02\"\n}\n```\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n[bme280_sample.py]()\u306fBME280\u304b\u3089\u53d6\u5f97\u3057\u305f\u74b0\u5883\u30c7\u30fc\u30bf\u3092\u6a19\u6e96\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002MQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089import\u3057\u3066\u4f7f\u3046\u3088\u3046\u306b\u5c11\u3057\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n### bme280.py\n\nbme280_sample.py\u3092\u30b3\u30d4\u30fc\u3057\u3066bme280.py\u3092\u4f5c\u6210\u3057\u3066\u7de8\u96c6\u3057\u307e\u3059\u3002[\u4fee\u6b63\u7b87\u6240](https://github.com/masato/bme280-meshblu-py/blob/master/bme280_sample.diff)\u306f\u4ee5\u4e0b\u3067\u3059\u3002\u95a2\u6570\u5185\u3067\u6a19\u6e96\u51fa\u529b\u3092\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3092return\u3057\u3066\u3001\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3067JSON\u306b\u3057\u3066\u8fd4\u3059\u3060\u3051\u3067\u3059\u3002\n\n```py\n@@ -66,9 +66,12 @@\n \ttemp_raw = (data[3] << 12) | (data[4] << 4) | (data[5] >> 4)\n \thum_raw  = (data[6] << 8)  |  data[7]\n \t\n-\tcompensate_T(temp_raw)\n-\tcompensate_P(pres_raw)\n-\tcompensate_H(hum_raw)\n+\ttemperature = compensate_T(temp_raw)\n+\tpressure = compensate_P(pres_raw)\n+\thumidity = compensate_H(hum_raw)\n+        return dict(temperature=temperature,\n+                    pressure=pressure,\n+                    humidity=humidity)\n \n def compensate_P(adc_P):\n \tglobal  t_fine\n@@ -92,7 +95,8 @@\n \tv2 = ((pressure / 4.0) * digP[7]) / 8192.0\n \tpressure = pressure + ((v1 + v2 + digP[6]) / 16.0)  \n \n-\tprint \"pressure : %7.2f hPa\" % (pressure/100)\n+\t#print \"pressure : %7.2f hPa\" % (pressure/100)\n+        return \"{:.2f}\".format(pressure/100)\n \n def compensate_T(adc_T):\n \tglobal t_fine\n@@ -100,7 +104,8 @@\n \tv2 = (adc_T / 131072.0 - digT[0] / 8192.0) * (adc_T / 131072.0 - digT[0] / 8192.0) * digT[2]\n \tt_fine = v1 + v2\n \ttemperature = t_fine / 5120.0\n-\tprint \"temp : %-6.2f \u2103\" % (temperature) \n+\t#print \"temp : %-6.2f \u2103\" % (temperature) \n+        return \"{:.2f}\".format(temperature)\n \n def compensate_H(adc_H):\n \tglobal t_fine\n@@ -114,8 +119,8 @@\n \t\tvar_h = 100.0\n \telif var_h < 0.0:\n \t\tvar_h = 0.0\n-\tprint \"hum : %6.2f \uff05\" % (var_h)\n-\n+\t#print \"hum : %6.2f \uff05\" % (var_h)\n+        return \"{:.2f}\".format(var_h)\n \n def setup():\n \tosrs_t = 1\t\t\t#Temperature oversampling x 1\n```\n\n### bme280_publish.py\n\nMQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u3046\u30e1\u30a4\u30f3\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u3055\u3093\u306ebme280_sample.py\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u7528\u306b\u4fee\u6b63\u3057\u305fbme280\u3068\u3001paho-mqtt\u3092import\u3057\u3066\u4f7f\u3044\u307e\u3059\u30025\u79d2\u9593\u9694\u3067\u74b0\u5883\u30c7\u30fc\u30bf\u3092\u8a08\u6e2c\u3057\u3066JSON\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u5f8c\u3001MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306bpublish\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\n```python:~/python_apps/bme280-meshblu-py/bme280_publish.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\nimport paho.mqtt.client as mqtt\nfrom time import sleep\nimport json\nimport sys\nimport bme280\nfrom config import conf\n\ndef sensing():\n    return bme280.readData()\n\ndef on_connect(client, userdata, rc):\n    print(\"Connected with result code {}\".format(rc))\n\ndef on_publish(client, userdata, mid):\n    print(\"publish: {}\".format(mid))\n\ndef main():\n    client = mqtt.Client(client_id='',\n\t                 clean_session=True, protocol=mqtt.MQTTv311)\n\n    client.username_pw_set(conf[\"MESHBLU_USER\"], conf[\"MESHBLU_PASSWORD\"])\n    client.on_connect = on_connect\n    client.on_publish = on_publish\n\n    client.connect(conf[\"MESHBLU_URL\"], 1883, 60)\n\n    while True:\n        retval = sensing()\n        if retval:\n             message = json.dumps({\"devices\":\n\t                      conf[\"SEND_TO\"],\n                              \"payload\": retval})\n             print(message)\n             client.publish(\"message\",message)\n        sleep(5)\n\nif __name__ == '__main__':\n    main()\n```\n\n\u4eca\u56de\u306fMeshblu\u3092MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306b\u4f7f\u3063\u3066\u3044\u308b\u305f\u3081\u3001message\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u6c7a\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u4ed6\u306eMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u3092\u4f7f\u3046\u3068\u304d\u306fpayload\u3060\u3051\u3067\u69cb\u3044\u307e\u305b\u3093\u3002\u307e\u305f`devices`\u306e\u30ad\u30fc\u306b\u5b9b\u5148\u3092\u6307\u5b9a\u3057\u3066\u3001topic\u540d\u306f`message`\u3092\u56fa\u5b9a\u3067\u4f7f\u3046\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```JSON\n{\"payload\": {\"pressure\": \"999.56\", \"temperature\": \"28.94\", \"humidity\": \"59.14\"}, \n \"devices\": \"28cbe216-1c1c-477a-bbd5-5ee81d30ba02\"}\n```\n\n## \u30c6\u30b9\u30c8\n\n### MQTT subscribe\n\nMQTT\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u3001MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u30db\u30b9\u30c8\u306bMosquitto\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```bash\n$ sudo apt-get install mosquitto_client\n```\n\nmosquitto_sub\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066subscribe\u3057\u307e\u3059\u3002\u3053\u3061\u3089\u3082Meshblu\u306e\u4ed5\u69d8\u306a\u306e\u3067topic\u540d\u3084\u30e6\u30fc\u30b6\u30fc\u540d\u306fMQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u4ed5\u69d8\u306b\u5408\u308f\u305b\u3066\u4f7f\u3044\u307e\u3059\u3002\n\n```bash\n$ mosquitto_sub \\\n  -h localhost \\\n  -p 1883 \\\n  -t 28cbe216-1c1c-477a-bbd5-5ee81d30ba02 \\\n  -u 28cbe216-1c1c-477a-bbd5-5ee81d30ba02 \\\n  -P 9e7cbe84 \\\n  -d\nReceived CONNACK\nReceived SUBACK\nSubscribed (mid: 1): 0\n```\n\n### MQTT publish\n\nRaspberry Pi 2\u306b\u623b\u308a\u3001\u4f5c\u6210\u3057\u305fbme280_publish.py\u3092sudo\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002pi\u30e6\u30fc\u30b6\u30fc\u3092i2c\u30b0\u30eb\u30fc\u30d7\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\u5834\u5408\u306fsudo\u306f\u4e0d\u8981\u3067\u3059\u3002\n\n```bash\n$ sudo ./bme280_publish.py\n{\"payload\": {\"pressure\": \"999.96\", \"temperature\": \"28.79\", \"humidity\": \"58.76\"}, \"devices\": \"28cbe216-1c1c-477a-bbd5-5ee81d30ba02\"}\npublish: 1\n{\"payload\": {\"pressure\": \"999.97\", \"temperature\": \"28.74\", \"humidity\": \"58.07\"}, \"devices\": \"28cbe216-1c1c-477a-bbd5-5ee81d30ba02\"}\npublish: 2\n```\n\n5\u79d2\u9593\u9694\u3067BME280\u304b\u3089\u53d6\u5f97\u3057\u305f\u74b0\u5883\u30c7\u30fc\u30bf\u3092MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306bpublish\u3057\u59cb\u3081\u307e\u3057\u305f\u3002\n\n\u518d\u3073MQTT\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u30db\u30b9\u30c8\u306b\u623b\u308b\u3068\u3001mosquitto_sub\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u30b7\u30a7\u30eb\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6a19\u6e96\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002\n\n```bash\n...\nSubscribed (mid: 1): 0\nReceived PUBLISH (d0, q0, r0, m0, '28cbe216-1c1c-477a-bbd5-5ee81d30ba02', ... (71 bytes))\n{\"data\":{\"pressure\":\"999.97\",\"temperature\":\"28.74\",\"humidity\":\"58.07\"}}\nReceived PUBLISH (d0, q0, r0, m0, '28cbe216-1c1c-477a-bbd5-5ee81d30ba02', ... (71 bytes))\n{\"data\":{\"pressure\":\"999.97\",\"temperature\":\"28.74\",\"humidity\":\"58.07\"}}\n```\n"}