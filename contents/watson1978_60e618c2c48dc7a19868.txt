{"tags": ["C", "clang", "C++"], "context": " More than 1 year has passed since last update.\u6700\u8fd1\u306e clang \u3067\u306f AddressSanitizer \u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30d5\u30e9\u30b0\u306b -g -fsanitize=address -fno-omit-frame-pointer \u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u6642\u306b\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc/\u30d2\u30fc\u30d7\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u304c\u691c\u51fa\u3067\u304d\u308b\u3002Xcode \u3060\u3068 7.0 \u4ee5\u964d\u3067\u4f7f\u3048\u308b\u3088\u3046\u3060\u3002\n#include <stdio.h>\nint main()\n{\n    char buffer[5];\n    for (int i = 0; i <= 5; i++) {\n        buffer[i] = i;\n    }\n    printf(\"OK\\n\");\n}\n\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u306f\u666e\u901a\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u4f55\u4e8b\u3082\u7121\u3044\u304b\u306e\u3088\u3046\u306b\u5b9f\u884c\u3067\u304d\u308b\u3002\n$ clang foo.c\n$ ./a.out\nOK\n\n\u6b21\u306b -g -fsanitize=address -fno-omit-frame-pointer \u3092\u8ffd\u52a0\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u307f\u308b\u3002\n$ clang foo.c -g -fsanitize=address -fno-omit-frame-pointer\n$ ./a.out\n=================================================================\n==47384==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff5ad0c745 at pc 0x000104ef3d98 bp 0x7fff5ad0c710 sp 0x7fff5ad0c708\nWRITE of size 1 at 0x7fff5ad0c745 thread T0\n    #0 0x104ef3d97 in main foo.c:6\n    #1 0x7fff9a7745ac in start (/usr/lib/system/libdyld.dylib+0x35ac)\n    #2 0x0  (<unknown module>)\n\nAddress 0x7fff5ad0c745 is located in stack of thread T0 at offset 37 in frame\n    #0 0x104ef3c5f in main foo.c:3\n\n  This frame has 1 object(s):\n    [32, 37) 'buffer' <== Memory access at offset 37 overflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow foo.c:6 main\nShadow bytes around the buggy address:\n  0x1fffeb5a1890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a18a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a18b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a18c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a18d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x1fffeb5a18e0: 00 00 00 00 f1 f1 f1 f1[05]f3 f3 f3 00 00 00 00\n  0x1fffeb5a18f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a1900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a1910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a1920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a1930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==47384==ABORTING\n[1]    47384 abort      ./a.out\n\n\u3068\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b malloc \u3067\u78ba\u4fdd\u3057\u305f\u30d2\u30fc\u30d7\u3088\u308a\u3082\u5927\u304d\u306a\u6587\u5b57\u5217\u3092 strcpy \u3067\u30b3\u30d4\u30fc\u3059\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3082\u691c\u51fa\u3067\u304d\u308b\u3002\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n    char *buffer = malloc(5);\n    strcpy(buffer, \"abcdef\");\n    free(buffer);\n    printf(\"OK\\n\");\n}\n\n$ clang bar.c -g -fsanitize=address -fno-omit-frame-pointer\n$ ./a.out\n=================================================================\n==47833==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000eeb5 at pc 0x00010e0e930d bp 0x7fff51b5a7c0 sp 0x7fff51b59f70\nWRITE of size 7 at 0x60200000eeb5 thread T0\n    #0 0x10e0e930c in wrap_strcpy (/Applications/Xcode7.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/7.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib+0x3c30c)\n    #1 0x10e0a5df7 in main bar.c:7\n    #2 0x7fff9a7745ac in start (/usr/lib/system/libdyld.dylib+0x35ac)\n    #3 0x0  (<unknown module>)\n\n0x60200000eeb5 is located 0 bytes to the right of 5-byte region [0x60200000eeb0,0x60200000eeb5)\nallocated by thread T0 here:\n    #0 0x10e0ef980 in wrap_malloc (/Applications/Xcode7.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/7.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib+0x42980)\n    #1 0x10e0a5de3 in main bar.c:6\n    #2 0x7fff9a7745ac in start (/usr/lib/system/libdyld.dylib+0x35ac)\n    #3 0x0  (<unknown module>)\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 wrap_strcpy\nShadow bytes around the buggy address:\n  0x1c0400001d80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001d90: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=>0x1c0400001dd0: fa fa fa fa fa fa[05]fa fa fa 00 06 fa fa 00 00\n  0x1c0400001de0: fa fa 00 04 fa fa 00 06 fa fa 00 06 fa fa 00 fa\n  0x1c0400001df0: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fa\n  0x1c0400001e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==47833==ABORTING\n[1]    47833 abort      ./a.out\n\n\n\u6700\u8fd1\u306e clang \u3067\u306f [AddressSanitizer](http://clang.llvm.org/docs/AddressSanitizer.html) \u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30d5\u30e9\u30b0\u306b `-g -fsanitize=address -fno-omit-frame-pointer` \u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u6642\u306b\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc/\u30d2\u30fc\u30d7\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u304c\u691c\u51fa\u3067\u304d\u308b\u3002Xcode \u3060\u3068 7.0 \u4ee5\u964d\u3067\u4f7f\u3048\u308b\u3088\u3046\u3060\u3002\n\n```c\n#include <stdio.h>\nint main()\n{\n\tchar buffer[5];\n\tfor (int i = 0; i <= 5; i++) {\n\t\tbuffer[i] = i;\n\t}\n\tprintf(\"OK\\n\");\n}\n```\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u306f\u666e\u901a\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u4f55\u4e8b\u3082\u7121\u3044\u304b\u306e\u3088\u3046\u306b\u5b9f\u884c\u3067\u304d\u308b\u3002\n\n```\n$ clang foo.c\n$ ./a.out\nOK\n```\n\n\u6b21\u306b `-g -fsanitize=address -fno-omit-frame-pointer` \u3092\u8ffd\u52a0\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u307f\u308b\u3002\n\n```\n$ clang foo.c -g -fsanitize=address -fno-omit-frame-pointer\n$ ./a.out\n=================================================================\n==47384==ERROR: AddressSanitizer: stack-buffer-overflow on address 0x7fff5ad0c745 at pc 0x000104ef3d98 bp 0x7fff5ad0c710 sp 0x7fff5ad0c708\nWRITE of size 1 at 0x7fff5ad0c745 thread T0\n    #0 0x104ef3d97 in main foo.c:6\n    #1 0x7fff9a7745ac in start (/usr/lib/system/libdyld.dylib+0x35ac)\n    #2 0x0  (<unknown module>)\n\nAddress 0x7fff5ad0c745 is located in stack of thread T0 at offset 37 in frame\n    #0 0x104ef3c5f in main foo.c:3\n\n  This frame has 1 object(s):\n    [32, 37) 'buffer' <== Memory access at offset 37 overflows this variable\nHINT: this may be a false positive if your program uses some custom stack unwind mechanism or swapcontext\n      (longjmp and C++ exceptions *are* supported)\nSUMMARY: AddressSanitizer: stack-buffer-overflow foo.c:6 main\nShadow bytes around the buggy address:\n  0x1fffeb5a1890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a18a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a18b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a18c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a18d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n=>0x1fffeb5a18e0: 00 00 00 00 f1 f1 f1 f1[05]f3 f3 f3 00 00 00 00\n  0x1fffeb5a18f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a1900: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a1910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a1920: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n  0x1fffeb5a1930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==47384==ABORTING\n[1]    47384 abort      ./a.out\n```\n\u3068\u30d0\u30c3\u30d5\u30a1\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b `malloc` \u3067\u78ba\u4fdd\u3057\u305f\u30d2\u30fc\u30d7\u3088\u308a\u3082\u5927\u304d\u306a\u6587\u5b57\u5217\u3092 `strcpy` \u3067\u30b3\u30d4\u30fc\u3059\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3082\u691c\u51fa\u3067\u304d\u308b\u3002\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main()\n{\n\tchar *buffer = malloc(5);\n\tstrcpy(buffer, \"abcdef\");\n\tfree(buffer);\n\tprintf(\"OK\\n\");\n}\n```\n\n```\n$ clang bar.c -g -fsanitize=address -fno-omit-frame-pointer\n$ ./a.out\n=================================================================\n==47833==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200000eeb5 at pc 0x00010e0e930d bp 0x7fff51b5a7c0 sp 0x7fff51b59f70\nWRITE of size 7 at 0x60200000eeb5 thread T0\n    #0 0x10e0e930c in wrap_strcpy (/Applications/Xcode7.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/7.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib+0x3c30c)\n    #1 0x10e0a5df7 in main bar.c:7\n    #2 0x7fff9a7745ac in start (/usr/lib/system/libdyld.dylib+0x35ac)\n    #3 0x0  (<unknown module>)\n\n0x60200000eeb5 is located 0 bytes to the right of 5-byte region [0x60200000eeb0,0x60200000eeb5)\nallocated by thread T0 here:\n    #0 0x10e0ef980 in wrap_malloc (/Applications/Xcode7.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/7.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib+0x42980)\n    #1 0x10e0a5de3 in main bar.c:6\n    #2 0x7fff9a7745ac in start (/usr/lib/system/libdyld.dylib+0x35ac)\n    #3 0x0  (<unknown module>)\n\nSUMMARY: AddressSanitizer: heap-buffer-overflow ??:0 wrap_strcpy\nShadow bytes around the buggy address:\n  0x1c0400001d80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001d90: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001da0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001db0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001dc0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n=>0x1c0400001dd0: fa fa fa fa fa fa[05]fa fa fa 00 06 fa fa 00 00\n  0x1c0400001de0: fa fa 00 04 fa fa 00 06 fa fa 00 06 fa fa 00 fa\n  0x1c0400001df0: fa fa fd fd fa fa fd fd fa fa fd fd fa fa fd fa\n  0x1c0400001e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001e10: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\n  0x1c0400001e20: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa\nShadow byte legend (one shadow byte represents 8 application bytes):\n  Addressable:           00\n  Partially addressable: 01 02 03 04 05 06 07\n  Heap left redzone:       fa\n  Heap right redzone:      fb\n  Freed heap region:       fd\n  Stack left redzone:      f1\n  Stack mid redzone:       f2\n  Stack right redzone:     f3\n  Stack partial redzone:   f4\n  Stack after return:      f5\n  Stack use after scope:   f8\n  Global redzone:          f9\n  Global init order:       f6\n  Poisoned by user:        f7\n  Container overflow:      fc\n  Array cookie:            ac\n  Intra object redzone:    bb\n  ASan internal:           fe\n  Left alloca redzone:     ca\n  Right alloca redzone:    cb\n==47833==ABORTING\n[1]    47833 abort      ./a.out\n```\n"}