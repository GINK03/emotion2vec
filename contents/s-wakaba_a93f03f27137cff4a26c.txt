{"context": " More than 1 year has passed since last update.R\u3067\u306fheatmap(x)\u3068\u6253\u3064\u3060\u3051\u3067\u3001x, y\u5404\u8ef8\u306b\u5bfe\u3057\u3066\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305f\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u4ed8\u304d\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304c\u63cf\u753b\u3067\u304d\u3001\u907a\u4f1d\u5b50\u306e\u767a\u73fe\u91cf\u304c\u30fb\u30fb\u30fb\u306a\u3069\u65e5\u3005\u545f\u3044\u3066\u3044\u308bbioinformaticians\u306b\u306f\u304a\u99b4\u67d3\u307f\u306e\u6a5f\u80fd\u306a\u306e\u3067\u3059\u304c\u3001Python+matplotlib\u74b0\u5883\u3067\u540c\u3058\u3053\u3068\u3092\u3084\u308d\u3046\u3068\u3057\u305f\u969b\u3001\u3042\u307e\u308a\u60c5\u5831\u304c\u7121\u304b\u3063\u305f\u306e\u3067\u3001\u8a66\u884c\u932f\u8aa4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5099\u5fd8\u9332\u3064\u3044\u3067\u306b\u516c\u958b\u3057\u3068\u304d\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\u307e\u305a\u306f\u3001\u9069\u5f53\u306a\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u7d30\u80de\u7d44\u7e54\u3054\u3068\u306e\u907a\u4f1d\u5b50\u767a\u73fe\u91cf\u306e\u5897\u6e1b\u3092\u8868\u3057\u305f\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u306e\u7d44\u7e54\u306e\u30c1\u30e7\u30a4\u30b9\u3082\u3001\u907a\u4f1d\u5b50\u306e\u30c1\u30e7\u30a4\u30b9\u3082\u3001\u5168\u3066\u9069\u5f53\u3067\u3059\u3002\n\u5f8c\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3068\u304d\u306b\u305d\u308c\u3063\u307d\u304f\u898b\u3048\u308b\u3088\u3046\u306b\u3001\u4e71\u6570\u3067\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u3092\u82e5\u5e72\u5c0f\u7d30\u5de5\u3057\u3066pandas.DataFrame\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3057\u307e\u3059\u3002\n#!/usr/bin/env python3\n\ngenes = [\n    'HIST1H4H', 'SPRN', 'DNLZ', 'PYCARD', 'PRDM11', 'DKKL1', 'CYBRD1', 'DMAP1',\n    'MT1E', 'PDGFRL', 'SERTM1', 'PIFO', 'FAM109A', 'ST5', 'ABCA7', 'FAM160A1',\n    'SAMD15', 'NUAK1', 'GLTP', 'HIST3H2A', 'SCN5A', 'PNPLA5', 'SFRP5', 'CCBE1',\n    'PTCD1', 'RFTN1', 'SYTL2', 'FAM65B', 'NFKBIZ', 'RHOG', 'KIF3A', 'DYRK1B',\n    'NXPH2', 'APLN', 'ZNF526', 'NRIP3', 'KCNMA1', 'MTSS1', 'ZNF566', 'TNC',\n    'GPX2', 'AQP3', 'TSACC', 'SNX15', 'TRIM22', 'THAP6', 'GRIP1', 'DLGAP3',\n]\ntissues = [\n    'brain', 'kidney', 'lung', 'heart',\n    'liver', 'pancreas', 'testis', 'placenta',\n]\n\n\ndef draw_heatmap(a):\n    print(a.head())\n\ndef _main():\n    from random import choice\n    import numpy as np\n    from pandas import DataFrame\n    v = np.random.random([4, len(tissues)]) * 1.2 - 0.6\n    w = np.random.random([3, len(genes)]) * 0.8 - 0.4\n    v = np.vstack([choice(v) for x in genes])\n    w = np.vstack([choice(w) for x in tissues]).T\n    a = DataFrame(v + w, index=genes, columns=tissues)\n    draw_heatmap(a)\n\nif __name__ == '__main__':\n    _main()\n\n\n\u5b9f\u884c\u7d50\u679c\n             brain    kidney      lung     heart     liver  pancreas  \\\nHIST1H4H -0.085630  0.074054  0.058026 -0.142751 -0.767515 -0.348885   \nSPRN     -0.424203  0.251821 -0.012052 -0.037645 -0.000477  0.714727   \nDNLZ      0.372402  0.532086  0.097971 -0.102806 -0.727570  0.109148   \nPYCARD   -0.561378  0.114647  0.706732  0.681139  0.718306  0.577552   \nPRDM11   -0.698969 -0.022945  0.240133  0.214540  0.251708  0.439960   \n\n            testis  placenta  \nHIST1H4H  0.324709 -0.319531  \nSPRN     -0.815679 -0.010529  \nDNLZ      0.402956 -0.241284  \nPYCARD   -0.728135  0.077015  \nPRDM11   -0.773637  0.031513  \n\n\n\u3053\u308c\u4ee5\u964d\u3001draw_heatmap(a)\u95a2\u6570\u306e\u307f\u3092\u3044\u3058\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u624b\u3063\u53d6\u308a\u65e9\u304f\u8868\u793a\u3059\u308b\u5834\u5408\n\u8cc7\u6599\u4f5c\u6210\u306a\u3069\u3067\u306f\u306a\u304f\u3001\u3068\u308a\u3042\u3048\u305a\u30c7\u30fc\u30bf\u3060\u3051\u78ba\u8a8d\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u6b21\u306e\u3088\u3046\u306bmatplotlib\u306eimshow()\u306b\u30c7\u30fc\u30bf\u3092\u7a81\u3063\u8fbc\u3081\u3070\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\ndef draw_heatmap(a):\n    from matplotlib import pyplot as plt\n    plt.imshow(a, aspect='auto', interpolation='none')\n    plt.colorbar()\n    plt.xticks(range(a.shape[1]), a.columns)\n    plt.yticks(range(a.shape[0]), a.index)\n    plt.show()\n\n\n\n\u898b\u6804\u3048\u3092\u826f\u304f\u3059\u308b\n\u4e0a\u306e\u4f8b\u306b\u5bfe\u3057\u3066\u3001\u5c11\u3057\u898b\u6804\u3048\u3092\u826f\u304f\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u76ee\u76db\u308a\u306f\u4e0d\u8981\u306a\u306e\u3067\u6d88\u3057\u307e\u3059\u3002\n\u30e9\u30d9\u30eb\u304c\u898b\u306b\u304f\u3044\u306e\u3067\u3001\u30b5\u30a4\u30ba\u3084\u4f4d\u7f6e\u3092\u8abf\u6574\u3057\u307e\u3059\u3002\n\u4e8c\u8272\u6cd5\u30de\u30a4\u30af\u30ed\u30a2\u30ec\u30a4\u306e\u540d\u6b8b\u304b\u3001Down regulation\u304c\u8d64\u3001Neutral\u304c\u9ed2\u3001Up regulation\u304c\u7dd1\u30fb\u30fb\u30fb\u3068\u3044\u3046\u8272\u5206\u3051\u304c\u6bd4\u8f03\u7684\u591a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\u3053\u308c\u306b\u5023\u3044\u307e\u3059\u3002\n\u30b9\u30b1\u30fc\u30eb\u304c\u6b63\u8ca0\u3067\u5bfe\u79f0\u3068\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4e0a\u9650\u3068\u4e0b\u9650\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nfrom matplotlib.colors import LinearSegmentedColormap\nmicroarray_cmap = LinearSegmentedColormap('microarray', {\n    'red': [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)],\n    'green': [(0.0, 0.0, 0.0), (0.5, 0.2, 0.2), (1.0, 1.0, 1.0)],\n    'blue': [(0.0, 0.0, 0.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)],\n})\n\ndef draw_heatmap(a, cmap=microarray_cmap):\n    from matplotlib import pyplot as plt\n    plt.imshow(a, aspect='auto', interpolation='none',\n               cmap=cmap, vmin=-1.0, vmax=1.0)\n    plt.colorbar()\n    plt.xticks(range(a.shape[1]), a.columns, rotation=15)\n    plt.yticks(range(a.shape[0]), a.index, size='small')\n    plt.gca().get_xaxis().set_ticks_position('none')\n    plt.gca().get_yaxis().set_ticks_position('none')\n    plt.show()\n\n\n\u8d64\u2192\u9ed2\u2192\u7dd1\u3001\u3068\u5909\u308f\u308bColormap\u306fmatplotlib\u306e\u30d7\u30ea\u30bb\u30c3\u30c8\u306b\u7121\u3044\u306e\u3067\u3001LinearSegmentedColormap\u3067\u81ea\u524d\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n0\u3092\u5b8c\u5168\u306a\u9ed2\u3068\u3059\u308b\u3068\u30010\u8fd1\u508d\u306e\u5dee\u304c\u660e\u5ea6\u304c\u4f4e\u3059\u304e\u3066\u5206\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u6562\u3048\u3066\u4e2d\u9593\u306f\u6fc3\u3044\u7070\u8272\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u3059\u308b\n\u4f3c\u305f\u767a\u73fe\u30d1\u30bf\u30fc\u30f3\u3092\u6301\u3064\u907a\u4f1d\u5b50\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3001\u898b\u3084\u3059\u304f\u3057\u307e\u3059\u3002\ndef draw_heatmap(a, cmap=microarray_cmap):\n    from matplotlib import pyplot as plt\n    from scipy.spatial.distance import pdist\n    from scipy.cluster.hierarchy import linkage, dendrogram\n\n    metric = 'euclidean'\n    method = 'average'\n\n    plt.subplot(1, 2, 1)\n    ylinkage =linkage(pdist(a, metric=metric), method=method, metric=metric)\n    ydendro = dendrogram(ylinkage, orientation='right', no_labels=True,\n                         distance_sort='descending')\n    a = a.ix[[a.index[i] for i in ydendro['leaves']]]\n\n    plt.subplot(1, 2, 2)\n    plt.imshow(a, aspect='auto', interpolation='none',\n               cmap=cmap, vmin=-1.0, vmax=1.0)\n    plt.colorbar()\n    plt.xticks(range(a.shape[1]), a.columns, rotation=15)\n    plt.yticks(range(a.shape[0]), a.index, size='small')\n    plt.gca().xaxis.set_ticks_position('none')\n    plt.gca().yaxis.set_ticks_position('none')\n    plt.gca().invert_yaxis()\n    plt.show()\n\nScipy\u306e\u6a5f\u80fd\u3092\u7528\u3044\u3066\u3001\u968e\u5c64\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3044\u3001\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u3068\u4e26\u3079\u3066\u63cf\u753b\u3057\u307e\u3059\u3002\n\n\n\u8ddd\u96e2\u306e\u5b9a\u7fa9\u306f\u3001euclidean\u306e\u4ed6\u306b\u3082\u69d8\u3005\u306a\u3082\u306e\u3092\u4f7f\u7528\u3067\u304d\u308b\u3002\u8a73\u3057\u304f\u306fScipy\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u53c2\u7167\u3002\n\u968e\u5c64\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u65b9\u6cd5\u3082\u3001average\u306e\u4ed6\u306b\u3082\u69d8\u3005\u306a\u3082\u306e\u3092\u4f7f\u7528\u3067\u304d\u308b\u3002\u8a73\u3057\u304f\u306fScipy\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u53c2\u7167\u3002\n\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u63cf\u753b\u5f8c\u3001\u8449\u306e\u9806\u756a\u306b\u5f93\u3044DataFrame\u306e\u884c\u3092\u5165\u308c\u66ff\u3048\u308b\u3002\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u3057\u305f\u3044\u3051\u308c\u3069\u3001\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u306f\u8981\u3089\u306a\u3044\u5834\u5408\u3001dendrogram(..., no_plot=True)\u3092\u6307\u5b9a\u3059\u308c\u3070\u826f\u3044\u3002\ny\u8ef8\u306b\u5bfe\u3057\u3001imshow()\u306f\u5de6\u4e0a\u3092\u539f\u70b9\u3068\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001dendrogram()\u306f\u5de6\u4e0b\u3092\u539f\u70b9\u3068\u3059\u308b\u306e\u3067\u3001invert_yaxis()\u3092\u4f7f\u3063\u3066\u8ef8\u306e\u65b9\u5411\u3092\u5165\u308c\u66ff\u3048\u308b\u3002\n\n\n\u898b\u6804\u3048\u3092\u826f\u304f\u3059\u308b\n\u4e0a\u306e\u4f8b\u306e\u898b\u6804\u3048\u3092\u826f\u304f\u3057\u307e\u3059\u3002\n\n\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u3068\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u3064\u306a\u3052\u3066\u3001y\u8ef8\u30e9\u30d9\u30eb\u306f\u53f3\u5074\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\n\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u306e\u67a0\u306f\u8981\u3089\u306a\u3044\u306e\u3067\u6d88\u3057\u307e\u3059\u3002\n\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u306e\u8272\u3082\u8981\u3089\u306a\u3044\u306e\u3067\u3001\u9ed2\u306e\u307f\u306b\u3057\u307e\u3059\u3002\n\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u306e\u5e45\u3092\u3001\u3082\u3046\u3059\u3053\u3057\u8a70\u3081\u307e\u3059\u3002\n\ndef draw_heatmap(a, cmap=microarray_cmap):\n    from matplotlib import pyplot as plt\n    from mpl_toolkits.axes_grid1 import make_axes_locatable\n    from scipy.spatial.distance import pdist\n    from scipy.cluster.hierarchy import linkage, dendrogram\n\n    metric = 'euclidean'\n    method = 'average'\n\n    main_axes = plt.gca()\n    divider = make_axes_locatable(main_axes)\n\n    plt.sca(divider.append_axes(\"left\", 1.0, pad=0))\n    ylinkage = linkage(pdist(a, metric=metric), method=method, metric=metric)\n    ydendro = dendrogram(ylinkage, orientation='right', no_labels=True,\n                         distance_sort='descending',\n                         link_color_func=lambda x: 'black')\n    plt.gca().set_axis_off()\n    a = a.ix[[a.index[i] for i in ydendro['leaves']]]\n\n    plt.sca(main_axes)\n    plt.imshow(a, aspect='auto', interpolation='none',\n               cmap=cmap, vmin=-1.0, vmax=1.0)\n    plt.colorbar(pad=0.15)\n    plt.gca().yaxis.tick_right()\n    plt.xticks(range(a.shape[1]), a.columns, rotation=15, size='small')\n    plt.yticks(range(a.shape[0]), a.index, size='small')\n    plt.gca().xaxis.set_ticks_position('none')\n    plt.gca().yaxis.set_ticks_position('none')\n    plt.gca().invert_yaxis()\n    plt.show()\n\n\n\n\nsubplot()\u306e\u4ee3\u308f\u308a\u306b\u3001make_axes_locatable()\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u306e\u67a0\u3092set_axis_off()\u3067\u975e\u8868\u793a\u306b\u3057\u3001link_color_func\u3067\u7dda\u3092\u9ed2\u306e\u307f\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nyaxis.tick_right()\u3067\u3001y\u8ef8\u30e9\u30d9\u30eb\u3092\u53f3\u5074\u306b\u6301\u3063\u3066\u304d\u307e\u3059\u3002\u3053\u306e\u307e\u307e\u3067\u306f\u30ab\u30e9\u30fc\u30d0\u30fc\u3068\u91cd\u306a\u308b\u306e\u3067\u3001colorbar(pad=...)\u3068\u3057\u3066\u9593\u9694\u3092\u5e83\u3052\u3066\u3044\u307e\u3059\u3002\n\n\nx\u8ef8\u3082\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3002\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306a\u3069\u306a\u3089\u3070\u4e0d\u8981\u3067\u3059\u304c\u3001\u7d44\u7e54\u3054\u3068\u306e\u30c7\u30fc\u30bf\u306a\u3069\u3067\u306fx\u8ef8\u3082\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u65b9\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\u3084\u308b\u3053\u3068\u306f\u3001\u57fa\u672c\u7684\u306b\u4eca\u307e\u3067\u3068\u540c\u3058\u3067\u3059\u3002\ndef draw_heatmap(a, cmap=microarray_cmap):\n    from matplotlib import pyplot as plt\n    from mpl_toolkits.axes_grid1 import make_axes_locatable\n    from scipy.spatial.distance import pdist\n    from scipy.cluster.hierarchy import linkage, dendrogram\n\n    metric = 'euclidean'\n    method = 'average'\n\n    main_axes = plt.gca()\n    divider = make_axes_locatable(main_axes)\n    xdendro_axes = divider.append_axes(\"top\", 0.5, pad=0)\n    ydendro_axes = divider.append_axes(\"left\", 1.0, pad=0)\n\n    plt.sca(xdendro_axes)\n    xlinkage = linkage(pdist(a.T, metric=metric), method=method, metric=metric)\n    xdendro = dendrogram(xlinkage, orientation='top', no_labels=True,\n                         distance_sort='descending',\n                         link_color_func=lambda x: 'black')\n    plt.gca().set_axis_off()\n    a = a[[a.columns[i] for i in xdendro['leaves']]]\n\n    plt.sca(ydendro_axes)\n    ylinkage = linkage(pdist(a, metric=metric), method=method,\n                       metric=metric)\n    ydendro = dendrogram(ylinkage, orientation='right', no_labels=True,\n                         distance_sort='descending',\n                         link_color_func=lambda x: 'black')\n    plt.gca().set_axis_off()\n    a = a.ix[[a.index[i] for i in ydendro['leaves']]]\n\n    plt.sca(main_axes)\n    plt.imshow(a, aspect='auto', interpolation='none',\n               cmap=cmap, vmin=-1.0, vmax=1.0)\n    plt.colorbar(pad=0.15)\n    plt.gca().yaxis.tick_right()\n    plt.xticks(range(a.shape[1]), a.columns, rotation=15, size='small')\n    plt.yticks(range(a.shape[0]), a.index, size='x-small')\n    plt.gca().xaxis.set_ticks_position('none')\n    plt.gca().yaxis.set_ticks_position('none')\n    plt.gca().invert_yaxis()\n    plt.show()\n\n\n\u3042\u3068\u306fsavefig('hoge.eps')\u306a\u3069\u3057\u3066\u8ad6\u6587\u306b\u8cbc\u308a\u4ed8\u3051\u308c\u3070\u304a\u3057\u307e\u3044\u3002\n\u3068\u3053\u308d\u3067\u3001dendrogram(orientation=...)\u306e\u610f\u5473\u304c\u3001\u6a2a\u5411\u304d\u3068\u7e26\u5411\u304d\u3067\u7570\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3059\u304c\u30fb\u30fb\u30fbScipy\u306e\u30d0\u30b0\uff1f\nR\u3067\u306f`heatmap(x)`\u3068\u6253\u3064\u3060\u3051\u3067\u3001x, y\u5404\u8ef8\u306b\u5bfe\u3057\u3066\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305f\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u4ed8\u304d\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u304c\u63cf\u753b\u3067\u304d\u3001\u907a\u4f1d\u5b50\u306e\u767a\u73fe\u91cf\u304c\u30fb\u30fb\u30fb\u306a\u3069\u65e5\u3005\u545f\u3044\u3066\u3044\u308bbioinformaticians\u306b\u306f\u304a\u99b4\u67d3\u307f\u306e\u6a5f\u80fd\u306a\u306e\u3067\u3059\u304c\u3001Python+matplotlib\u74b0\u5883\u3067\u540c\u3058\u3053\u3068\u3092\u3084\u308d\u3046\u3068\u3057\u305f\u969b\u3001\u3042\u307e\u308a\u60c5\u5831\u304c\u7121\u304b\u3063\u305f\u306e\u3067\u3001\u8a66\u884c\u932f\u8aa4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5099\u5fd8\u9332\u3064\u3044\u3067\u306b\u516c\u958b\u3057\u3068\u304d\u307e\u3059\u3002\n\n## \u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\n\u307e\u305a\u306f\u3001\u9069\u5f53\u306a\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u7d30\u80de\u7d44\u7e54\u3054\u3068\u306e\u907a\u4f1d\u5b50\u767a\u73fe\u91cf\u306e\u5897\u6e1b\u3092\u8868\u3057\u305f\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u306e\u7d44\u7e54\u306e\u30c1\u30e7\u30a4\u30b9\u3082\u3001\u907a\u4f1d\u5b50\u306e\u30c1\u30e7\u30a4\u30b9\u3082\u3001\u5168\u3066\u9069\u5f53\u3067\u3059\u3002\n\u5f8c\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3068\u304d\u306b\u305d\u308c\u3063\u307d\u304f\u898b\u3048\u308b\u3088\u3046\u306b\u3001\u4e71\u6570\u3067\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u3092\u82e5\u5e72\u5c0f\u7d30\u5de5\u3057\u3066`pandas.DataFrame`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3057\u307e\u3059\u3002\n\n```py3:\n#!/usr/bin/env python3\n\ngenes = [\n    'HIST1H4H', 'SPRN', 'DNLZ', 'PYCARD', 'PRDM11', 'DKKL1', 'CYBRD1', 'DMAP1',\n    'MT1E', 'PDGFRL', 'SERTM1', 'PIFO', 'FAM109A', 'ST5', 'ABCA7', 'FAM160A1',\n    'SAMD15', 'NUAK1', 'GLTP', 'HIST3H2A', 'SCN5A', 'PNPLA5', 'SFRP5', 'CCBE1',\n    'PTCD1', 'RFTN1', 'SYTL2', 'FAM65B', 'NFKBIZ', 'RHOG', 'KIF3A', 'DYRK1B',\n    'NXPH2', 'APLN', 'ZNF526', 'NRIP3', 'KCNMA1', 'MTSS1', 'ZNF566', 'TNC',\n    'GPX2', 'AQP3', 'TSACC', 'SNX15', 'TRIM22', 'THAP6', 'GRIP1', 'DLGAP3',\n]\ntissues = [\n    'brain', 'kidney', 'lung', 'heart',\n    'liver', 'pancreas', 'testis', 'placenta',\n]\n\n\ndef draw_heatmap(a):\n    print(a.head())\n\ndef _main():\n    from random import choice\n    import numpy as np\n    from pandas import DataFrame\n    v = np.random.random([4, len(tissues)]) * 1.2 - 0.6\n    w = np.random.random([3, len(genes)]) * 0.8 - 0.4\n    v = np.vstack([choice(v) for x in genes])\n    w = np.vstack([choice(w) for x in tissues]).T\n    a = DataFrame(v + w, index=genes, columns=tissues)\n    draw_heatmap(a)\n\nif __name__ == '__main__':\n    _main()\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\n             brain    kidney      lung     heart     liver  pancreas  \\\nHIST1H4H -0.085630  0.074054  0.058026 -0.142751 -0.767515 -0.348885   \nSPRN     -0.424203  0.251821 -0.012052 -0.037645 -0.000477  0.714727   \nDNLZ      0.372402  0.532086  0.097971 -0.102806 -0.727570  0.109148   \nPYCARD   -0.561378  0.114647  0.706732  0.681139  0.718306  0.577552   \nPRDM11   -0.698969 -0.022945  0.240133  0.214540  0.251708  0.439960   \n\n            testis  placenta  \nHIST1H4H  0.324709 -0.319531  \nSPRN     -0.815679 -0.010529  \nDNLZ      0.402956 -0.241284  \nPYCARD   -0.728135  0.077015  \nPRDM11   -0.773637  0.031513  \n```\n\n\u3053\u308c\u4ee5\u964d\u3001`draw_heatmap(a)`\u95a2\u6570\u306e\u307f\u3092\u3044\u3058\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n## \u624b\u3063\u53d6\u308a\u65e9\u304f\u8868\u793a\u3059\u308b\u5834\u5408\n\n\u8cc7\u6599\u4f5c\u6210\u306a\u3069\u3067\u306f\u306a\u304f\u3001\u3068\u308a\u3042\u3048\u305a\u30c7\u30fc\u30bf\u3060\u3051\u78ba\u8a8d\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u6b21\u306e\u3088\u3046\u306b`matplotlib`\u306e`imshow()`\u306b\u30c7\u30fc\u30bf\u3092\u7a81\u3063\u8fbc\u3081\u3070\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```py3\ndef draw_heatmap(a):\n    from matplotlib import pyplot as plt\n    plt.imshow(a, aspect='auto', interpolation='none')\n    plt.colorbar()\n    plt.xticks(range(a.shape[1]), a.columns)\n    plt.yticks(range(a.shape[0]), a.index)\n    plt.show()\n```\n\n![fig01.png](https://qiita-image-store.s3.amazonaws.com/0/54842/0a8975df-8174-1ade-7923-2163827b3c47.png)\n\n## \u898b\u6804\u3048\u3092\u826f\u304f\u3059\u308b\n\n\u4e0a\u306e\u4f8b\u306b\u5bfe\u3057\u3066\u3001\u5c11\u3057\u898b\u6804\u3048\u3092\u826f\u304f\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n* \u76ee\u76db\u308a\u306f\u4e0d\u8981\u306a\u306e\u3067\u6d88\u3057\u307e\u3059\u3002\n* \u30e9\u30d9\u30eb\u304c\u898b\u306b\u304f\u3044\u306e\u3067\u3001\u30b5\u30a4\u30ba\u3084\u4f4d\u7f6e\u3092\u8abf\u6574\u3057\u307e\u3059\u3002\n* \u4e8c\u8272\u6cd5\u30de\u30a4\u30af\u30ed\u30a2\u30ec\u30a4\u306e\u540d\u6b8b\u304b\u3001Down regulation\u304c\u8d64\u3001Neutral\u304c\u9ed2\u3001Up regulation\u304c\u7dd1\u30fb\u30fb\u30fb\u3068\u3044\u3046\u8272\u5206\u3051\u304c\u6bd4\u8f03\u7684\u591a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\u3053\u308c\u306b\u5023\u3044\u307e\u3059\u3002\n* \u30b9\u30b1\u30fc\u30eb\u304c\u6b63\u8ca0\u3067\u5bfe\u79f0\u3068\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4e0a\u9650\u3068\u4e0b\u9650\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```py3\nfrom matplotlib.colors import LinearSegmentedColormap\nmicroarray_cmap = LinearSegmentedColormap('microarray', {\n    'red': [(0.0, 1.0, 1.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)],\n    'green': [(0.0, 0.0, 0.0), (0.5, 0.2, 0.2), (1.0, 1.0, 1.0)],\n    'blue': [(0.0, 0.0, 0.0), (0.5, 0.2, 0.2), (1.0, 0.0, 0.0)],\n})\n\ndef draw_heatmap(a, cmap=microarray_cmap):\n    from matplotlib import pyplot as plt\n    plt.imshow(a, aspect='auto', interpolation='none',\n               cmap=cmap, vmin=-1.0, vmax=1.0)\n    plt.colorbar()\n    plt.xticks(range(a.shape[1]), a.columns, rotation=15)\n    plt.yticks(range(a.shape[0]), a.index, size='small')\n    plt.gca().get_xaxis().set_ticks_position('none')\n    plt.gca().get_yaxis().set_ticks_position('none')\n    plt.show()\n```\n\n![fig02.png](https://qiita-image-store.s3.amazonaws.com/0/54842/9256e982-b6fd-e931-4bdf-5cbe33dd9edb.png)\n\n\u8d64\u2192\u9ed2\u2192\u7dd1\u3001\u3068\u5909\u308f\u308bColormap\u306fmatplotlib\u306e\u30d7\u30ea\u30bb\u30c3\u30c8\u306b\u7121\u3044\u306e\u3067\u3001`LinearSegmentedColormap`\u3067\u81ea\u524d\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n0\u3092\u5b8c\u5168\u306a\u9ed2\u3068\u3059\u308b\u3068\u30010\u8fd1\u508d\u306e\u5dee\u304c\u660e\u5ea6\u304c\u4f4e\u3059\u304e\u3066\u5206\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\u6562\u3048\u3066\u4e2d\u9593\u306f\u6fc3\u3044\u7070\u8272\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u3059\u308b\n\n\u4f3c\u305f\u767a\u73fe\u30d1\u30bf\u30fc\u30f3\u3092\u6301\u3064\u907a\u4f1d\u5b50\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3053\u3068\u3067\u3001\u898b\u3084\u3059\u304f\u3057\u307e\u3059\u3002\n\n```py3\ndef draw_heatmap(a, cmap=microarray_cmap):\n    from matplotlib import pyplot as plt\n    from scipy.spatial.distance import pdist\n    from scipy.cluster.hierarchy import linkage, dendrogram\n\n    metric = 'euclidean'\n    method = 'average'\n\n    plt.subplot(1, 2, 1)\n    ylinkage =linkage(pdist(a, metric=metric), method=method, metric=metric)\n    ydendro = dendrogram(ylinkage, orientation='right', no_labels=True,\n                         distance_sort='descending')\n    a = a.ix[[a.index[i] for i in ydendro['leaves']]]\n\n    plt.subplot(1, 2, 2)\n    plt.imshow(a, aspect='auto', interpolation='none',\n               cmap=cmap, vmin=-1.0, vmax=1.0)\n    plt.colorbar()\n    plt.xticks(range(a.shape[1]), a.columns, rotation=15)\n    plt.yticks(range(a.shape[0]), a.index, size='small')\n    plt.gca().xaxis.set_ticks_position('none')\n    plt.gca().yaxis.set_ticks_position('none')\n    plt.gca().invert_yaxis()\n    plt.show()\n```\n\nScipy\u306e\u6a5f\u80fd\u3092\u7528\u3044\u3066\u3001\u968e\u5c64\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3044\u3001\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u3068\u4e26\u3079\u3066\u63cf\u753b\u3057\u307e\u3059\u3002\n\n![fig03.png](https://qiita-image-store.s3.amazonaws.com/0/54842/a0ba1fa1-7305-edd6-c50b-a0cffa3136f4.png)\n\n* \u8ddd\u96e2\u306e\u5b9a\u7fa9\u306f\u3001euclidean\u306e\u4ed6\u306b\u3082\u69d8\u3005\u306a\u3082\u306e\u3092\u4f7f\u7528\u3067\u304d\u308b\u3002\u8a73\u3057\u304f\u306f[Scipy\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.scipy.org/doc/scipy/reference/generated/scipy.spatial.distance.pdist.html)\u53c2\u7167\u3002\n* \u968e\u5c64\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u65b9\u6cd5\u3082\u3001average\u306e\u4ed6\u306b\u3082\u69d8\u3005\u306a\u3082\u306e\u3092\u4f7f\u7528\u3067\u304d\u308b\u3002\u8a73\u3057\u304f\u306f[Scipy\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.cluster.hierarchy.linkage.html)\u53c2\u7167\u3002\n* \u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u63cf\u753b\u5f8c\u3001\u8449\u306e\u9806\u756a\u306b\u5f93\u3044DataFrame\u306e\u884c\u3092\u5165\u308c\u66ff\u3048\u308b\u3002\n* \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306f\u3057\u305f\u3044\u3051\u308c\u3069\u3001\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u306f\u8981\u3089\u306a\u3044\u5834\u5408\u3001`dendrogram(..., no_plot=True)`\u3092\u6307\u5b9a\u3059\u308c\u3070\u826f\u3044\u3002\n* y\u8ef8\u306b\u5bfe\u3057\u3001`imshow()`\u306f\u5de6\u4e0a\u3092\u539f\u70b9\u3068\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001`dendrogram()`\u306f\u5de6\u4e0b\u3092\u539f\u70b9\u3068\u3059\u308b\u306e\u3067\u3001`invert_yaxis()`\u3092\u4f7f\u3063\u3066\u8ef8\u306e\u65b9\u5411\u3092\u5165\u308c\u66ff\u3048\u308b\u3002\n\n## \u898b\u6804\u3048\u3092\u826f\u304f\u3059\u308b\n\n\u4e0a\u306e\u4f8b\u306e\u898b\u6804\u3048\u3092\u826f\u304f\u3057\u307e\u3059\u3002\n\n* \u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u3068\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3092\u3064\u306a\u3052\u3066\u3001y\u8ef8\u30e9\u30d9\u30eb\u306f\u53f3\u5074\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002\n* \u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u306e\u67a0\u306f\u8981\u3089\u306a\u3044\u306e\u3067\u6d88\u3057\u307e\u3059\u3002\n* \u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u306e\u8272\u3082\u8981\u3089\u306a\u3044\u306e\u3067\u3001\u9ed2\u306e\u307f\u306b\u3057\u307e\u3059\u3002\n* \u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u306e\u5e45\u3092\u3001\u3082\u3046\u3059\u3053\u3057\u8a70\u3081\u307e\u3059\u3002\n\n```py3\ndef draw_heatmap(a, cmap=microarray_cmap):\n    from matplotlib import pyplot as plt\n    from mpl_toolkits.axes_grid1 import make_axes_locatable\n    from scipy.spatial.distance import pdist\n    from scipy.cluster.hierarchy import linkage, dendrogram\n\n    metric = 'euclidean'\n    method = 'average'\n\n    main_axes = plt.gca()\n    divider = make_axes_locatable(main_axes)\n\n    plt.sca(divider.append_axes(\"left\", 1.0, pad=0))\n    ylinkage = linkage(pdist(a, metric=metric), method=method, metric=metric)\n    ydendro = dendrogram(ylinkage, orientation='right', no_labels=True,\n                         distance_sort='descending',\n                         link_color_func=lambda x: 'black')\n    plt.gca().set_axis_off()\n    a = a.ix[[a.index[i] for i in ydendro['leaves']]]\n\n    plt.sca(main_axes)\n    plt.imshow(a, aspect='auto', interpolation='none',\n               cmap=cmap, vmin=-1.0, vmax=1.0)\n    plt.colorbar(pad=0.15)\n    plt.gca().yaxis.tick_right()\n    plt.xticks(range(a.shape[1]), a.columns, rotation=15, size='small')\n    plt.yticks(range(a.shape[0]), a.index, size='small')\n    plt.gca().xaxis.set_ticks_position('none')\n    plt.gca().yaxis.set_ticks_position('none')\n    plt.gca().invert_yaxis()\n    plt.show()\n```\n\n![fig04.png](https://qiita-image-store.s3.amazonaws.com/0/54842/4553556a-c1ce-7c80-0b96-1d9e3f240764.png)\n\n\n* `subplot()`\u306e\u4ee3\u308f\u308a\u306b\u3001`make_axes_locatable()`\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n* \u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u306e\u67a0\u3092`set_axis_off()`\u3067\u975e\u8868\u793a\u306b\u3057\u3001`link_color_func`\u3067\u7dda\u3092\u9ed2\u306e\u307f\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n* `yaxis.tick_right()`\u3067\u3001y\u8ef8\u30e9\u30d9\u30eb\u3092\u53f3\u5074\u306b\u6301\u3063\u3066\u304d\u307e\u3059\u3002\u3053\u306e\u307e\u307e\u3067\u306f\u30ab\u30e9\u30fc\u30d0\u30fc\u3068\u91cd\u306a\u308b\u306e\u3067\u3001`colorbar(pad=...)`\u3068\u3057\u3066\u9593\u9694\u3092\u5e83\u3052\u3066\u3044\u307e\u3059\u3002\n\n## x\u8ef8\u3082\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3002\n\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306a\u3069\u306a\u3089\u3070\u4e0d\u8981\u3067\u3059\u304c\u3001\u7d44\u7e54\u3054\u3068\u306e\u30c7\u30fc\u30bf\u306a\u3069\u3067\u306fx\u8ef8\u3082\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u65b9\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\u3084\u308b\u3053\u3068\u306f\u3001\u57fa\u672c\u7684\u306b\u4eca\u307e\u3067\u3068\u540c\u3058\u3067\u3059\u3002\n\n```py3\ndef draw_heatmap(a, cmap=microarray_cmap):\n    from matplotlib import pyplot as plt\n    from mpl_toolkits.axes_grid1 import make_axes_locatable\n    from scipy.spatial.distance import pdist\n    from scipy.cluster.hierarchy import linkage, dendrogram\n\n    metric = 'euclidean'\n    method = 'average'\n\n    main_axes = plt.gca()\n    divider = make_axes_locatable(main_axes)\n    xdendro_axes = divider.append_axes(\"top\", 0.5, pad=0)\n    ydendro_axes = divider.append_axes(\"left\", 1.0, pad=0)\n\n    plt.sca(xdendro_axes)\n    xlinkage = linkage(pdist(a.T, metric=metric), method=method, metric=metric)\n    xdendro = dendrogram(xlinkage, orientation='top', no_labels=True,\n                         distance_sort='descending',\n                         link_color_func=lambda x: 'black')\n    plt.gca().set_axis_off()\n    a = a[[a.columns[i] for i in xdendro['leaves']]]\n\n    plt.sca(ydendro_axes)\n    ylinkage = linkage(pdist(a, metric=metric), method=method,\n                       metric=metric)\n    ydendro = dendrogram(ylinkage, orientation='right', no_labels=True,\n                         distance_sort='descending',\n                         link_color_func=lambda x: 'black')\n    plt.gca().set_axis_off()\n    a = a.ix[[a.index[i] for i in ydendro['leaves']]]\n\n    plt.sca(main_axes)\n    plt.imshow(a, aspect='auto', interpolation='none',\n               cmap=cmap, vmin=-1.0, vmax=1.0)\n    plt.colorbar(pad=0.15)\n    plt.gca().yaxis.tick_right()\n    plt.xticks(range(a.shape[1]), a.columns, rotation=15, size='small')\n    plt.yticks(range(a.shape[0]), a.index, size='x-small')\n    plt.gca().xaxis.set_ticks_position('none')\n    plt.gca().yaxis.set_ticks_position('none')\n    plt.gca().invert_yaxis()\n    plt.show()\n```\n\n![fig05.png](https://qiita-image-store.s3.amazonaws.com/0/54842/7f9ae452-e555-efdc-b102-dc5e4e014429.png)\n\n\u3042\u3068\u306f`savefig('hoge.eps')`\u306a\u3069\u3057\u3066\u8ad6\u6587\u306b\u8cbc\u308a\u4ed8\u3051\u308c\u3070\u304a\u3057\u307e\u3044\u3002\n\n\u3068\u3053\u308d\u3067\u3001`dendrogram(orientation=...)`\u306e\u610f\u5473\u304c\u3001\u6a2a\u5411\u304d\u3068\u7e26\u5411\u304d\u3067\u7570\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3059\u304c\u30fb\u30fb\u30fbScipy\u306e\u30d0\u30b0\uff1f\n", "tags": ["Python", "matplotlib", "scipy", "bioinformatics"]}