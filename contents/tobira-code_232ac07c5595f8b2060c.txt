{"context": "\n\n\u306f\u3058\u3081\u306b\nProcessing\u3092\u4f7f\u3063\u3066\u591a\u7c92\u5b50\u306e\u904b\u52d5\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u307e\u3059\u3002\n\u7c92\u5b50\u540c\u58eb\u306e\u53cd\u767a\u306fMass-Spring-Damper\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002\n\u5916\u529b\u306f\u91cd\u529b\u3068\u3057\u307e\u3059\u3002\n\u7c92\u5b50\u306f\u8cea\u70b9\u3068\u8003\u3048\u307e\u3059\u3002\n\u7c92\u5b50\u540c\u58eb\u304a\u3088\u3073\u58c1(\u30a6\u30a3\u30f3\u30c9\u30a6\u5883\u754c)\u3068\u306e\u5f71\u97ff\u304c\u53ca\u3076\u534a\u5f84\u3092\u5f71\u97ff\u534a\u5f84rerer_e\u3068\u3057\u307e\u3059\u3002\nrerer_e\u7bc4\u56f2\u5185\u3067\u306f\u3001\u5916\u529bFout\u2192Fout\u2192\\vec{F_{out}}\u3068Spring-DamperFsd\u2192Fsd\u2192\\vec{F_{sd}}\u306b\u3088\u308b\u529b\u304c\u50cd\u304d\u307e\u3059\u3002\nrerer_e\u7bc4\u56f2\u5916\u3067\u306f\u3001\u5916\u529b\u306e\u307f\u304c\u50cd\u304d\u307e\u3059\u3002\n\n\u5916\u529b\n\u5916\u529b\u306f\u91cd\u529b\u306e\u307f\u3068\u3057\u307e\u3059\u3002mmm\u306f\u7c92\u5b50\u306e\u8cea\u91cf\u3067\u3059\u3002ggg\u306f\u91cd\u529b\u52a0\u901f\u5ea6\u3067\u3059\u3002\nFout\u2192=(0,mg)Fout\u2192=(0,mg){\\vec{F_{out}} = (0, mg) \\\\\n}\n\nSpring-Damper\u306b\u3088\u308b\u529b\n2\u7c92\u5b50\u306e\u9593\u306e\u529b\u3092\u8003\u3048\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306b\u756a\u53f7i,ji,ji,j\u3092\u3064\u3051\u307e\u3059\u3002\nSpring-DamperFsd\u2192Fsd\u2192\\vec{F_{sd}}\u306b\u3088\u308b\u529b\u306f\u6b21\u306e\u5f0f\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\nFsd\u2192={kd+cv}n\u20d7\u00a0d=rei+rej\u2212|r\u20d7\u00a0j\u2212r\u20d7\u00a0i|v={v\u20d7\u00a0j\u2212v\u20d7\u00a0i}\u22c5n\u20d7\u00a0Fsd\u2192={kd+cv}n\u2192d=rei+rej\u2212|r\u2192j\u2212r\u2192i|v={v\u2192j\u2212v\u2192i}\u22c5n\u2192{\\vec{F_{sd}} = \\{kd + c v\\} \\vec{n} \\\\\nd = r_{ei} + r_{ej} - |\\vec{r}_j - \\vec{r}_i| \\\\\nv = \\{\\vec{v}_j - \\vec{v}_i \\} \\cdot \\vec{n} \\\\\n}\nkkk\u306f\u3070\u306d\u5b9a\u6570\u3001ccc\u306f\u6e1b\u8870\u4fc2\u6570\u3067\u3059\u3002n\u20d7\u00a0n\u2192\\vec{n}\u306f\u5f71\u97ff\u534a\u5f84\u304b\u3089\u9060\u3056\u304b\u308b\u65b9\u5411\u306e\u5358\u4f4d\u30d9\u30af\u30c8\u30eb\u3067\u3059\u3002\nddd\u306f\u5f71\u97ff\u534a\u5f84\u306b\u4fb5\u5165\u3057\u305f\u8ddd\u96e2\u3067\u3059\u3002vvv\u306f2\u7c92\u5b50\u306e\u76f8\u5bfe\u901f\u5ea6\u306en\u20d7\u00a0n\u2192\\vec{n}\u306b\u6cbf\u3063\u305f\u6210\u5206\u3067\u3059\u3002\n\nMass-Spring-Damper\n\u904b\u52d5\u65b9\u7a0b\u5f0f\u3092\u793a\u3057\u307e\u3059\u3002\nrerer_e\u7bc4\u56f2\u5185\u3067\u306f\u6b21\u306e\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002\nmr\u20d7\u00a0\u00a8=Fout\u2192+Fsd\u2192=(0,mg)+{kd+cv}n\u20d7\u00a0mr\u2192\u00a8=Fout\u2192+Fsd\u2192=(0,mg)+{kd+cv}n\u2192{m \\ddot{\\vec{r}} = \\vec{F_{out}} + \\vec{F_{sd}} = \\\\\n(0, mg) + \\{kd + c v\\} \\vec{n} \\\\\n}\nrerer_e\u7bc4\u56f2\u5916\u3067\u306f\u6b21\u306e\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002\nmr\u20d7\u00a0\u00a8=Fout\u2192=(0,mg)mr\u2192\u00a8=Fout\u2192=(0,mg){m \\ddot{\\vec{r}} = \\vec{F_{out}}  = (0, mg) \\\\\n}\n\n\u7c92\u5b50\u3068\u58c1\u306e\u63a5\u8fd1\n\u7c92\u5b50\u304c\u58c1\u306b\u63a5\u8fd1\u3057\u305f\u72b6\u6cc1\u3092\u8003\u3048\u307e\u3059\u3002\u58c1\u304c\u7c92\u5b50\u306ererer_e\u7bc4\u56f2\u5185\u306b\u5165\u308b\u3068\n\u58c1\u304b\u3089\u9060\u3056\u304b\u308b\u5358\u4f4d\u30d9\u30af\u30c8\u30ebn\u20d7\u00a0n\u2192\\vec{n}\u306e\u65b9\u5411\u306bF\u20d7\u00a0sdF\u2192sd\\vec{F}_{sd}\u304c\u50cd\u304d\u307e\u3059\u3002\n\n\n\u7c92\u5b50\u540c\u58eb\u306e\u63a5\u8fd1\n2\u7c92\u5b50\u304c\u63a5\u8fd1\u3057\u305f\u72b6\u6cc1\u3092\u8003\u3048\u307e\u3059\u3002\u7c92\u5b50\u306b\u756a\u53f7i,ji,ji,j\u3092\u3064\u3051\u307e\u3059\u3002\n\n\u7c92\u5b50\u306e\u4f4d\u7f6e\u30d9\u30af\u30c8\u30eb\u3092r\u20d7\u00a0i,r\u20d7\u00a0jr\u2192i,r\u2192j\\vec{r}_i, \\vec{r}_j\u3068\u3057\u307e\u3059\u3002\n2\u7c92\u5b50\u306e\u8ddd\u96e2\u3092\nr=|r\u20d7\u00a0j\u2212r\u20d7\u00a0i|r=|r\u2192j\u2212r\u2192i|{r = |\\vec{r}_j - \\vec{r}_i|\n}\n\u3068\u3057\u307e\u3059\u3002\nrrr\u304c2\u7c92\u5b50\u306ererer_e\u306e\u548c\u3088\u308a\u3082\u5c0f\u3055\u3044\u3068\u304d\u306b\u63a5\u8fd1\u3057\u305f\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\nr<rej+rei0<(rej+rei)\u2212r=rer<rej+rei0<(rej+rei)\u2212r=re{r < r_{ej} + r_{ei} \\\\\n0 <(r_{ej} + r_{ei}) -r = r_e\n}\nFsd\u2192Fsd\u2192\\vec{F_{sd}}\u306frerer_e\u304a\u3088\u3073\u76f8\u5bfe\u901f\u5ea6vvv\u306b\u5fdc\u3058\u3066\u6c7a\u307e\u308a\u307e\u3059\u3002\nFsdFsdF_{sd}\u306e\u65b9\u5411\n\u7c92\u5b50iii\u306b\u3064\u3044\u3066\u306fjjj\u304b\u3089iii\u306b\u5411\u304b\u3046\u65b9\u5411\u306e\u5358\u4f4d\u30d9\u30af\u30c8\u30ebn\u20d7\u00a0jin\u2192ji\\vec{n}_{ji}\u3068\u306a\u308a\u3001\n\u7c92\u5b50jjj\u306b\u3064\u3044\u3066\u306f\u305d\u306e\u9006\u65b9\u5411\u306b\u306a\u308a\u307e\u3059\u3002\nn\u20d7\u00a0ji=|r\u20d7\u00a0i\u2212r\u20d7\u00a0j|rn\u20d7\u00a0ij=\u2212n\u20d7\u00a0jin\u2192ji=|r\u2192i\u2212r\u2192j|rn\u2192ij=\u2212n\u2192ji{\\vec{n}_{ji} = \\frac{|\\vec{r}_i - \\vec{r}_j|}{r} \\\\\n\\vec{n}_{ij} = -\\vec{n}_{ji} \\\\\n}\n\n\u5dee\u5206\u5316\n\u7c92\u5b50\u306e\u4f4d\u7f6e\u306f\u6b21\u306e\u9806\u756a\u3067\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n\u6642\u523bttt\u306eF\u20d7\u00a0(t)F\u2192(t)\\vec{F}(t)\u3092\u6c42\u3081\u308b\u3002\nF\u20d7\u00a0(t)F\u2192(t)\\vec{F}(t)\u304b\u3089\u6642\u523bt+\u0394tt+\u0394tt+\u0394t\u306e\u901f\u5ea6v\u20d7\u00a0(t+\u0394t)v\u2192(t+\u0394t)\\vec{v}(t+\u0394t)\u3092\u6c42\u3081\u308b\u3002\n\u901f\u5ea6v\u20d7\u00a0(t+\u0394t)v\u2192(t+\u0394t)\\vec{v}(t+\u0394t)\u304b\u3089\u6642\u523bt+2\u0394tt+2\u0394tt+2\u0394t\u306e\u4f4d\u7f6er\u20d7\u00a0(t+2\u0394t)r\u2192(t+2\u0394t)\\vec{r}(t+2\u0394t)\u3092\u6c42\u3081\u308b\u3002\n\n\u529b\nrerer_e\u7bc4\u56f2\u5185\nF\u20d7\u00a0(t)=(0,mg)F\u2192(t)=(0,mg){\\vec{F}(t) = (0, mg) \\\\\n}\nrerer_e\u7bc4\u56f2\u5916\nF\u20d7\u00a0(t)=(0,mg)+{kd+cv}n\u20d7\u00a0d=rei+rej\u2212|r\u20d7\u00a0j(t+\u0394t)\u2212r\u20d7\u00a0i(t+\u0394t)|v={v\u20d7\u00a0j(t)\u2212v\u20d7\u00a0i(t)}\u22c5n\u20d7\u00a0n\u20d7\u00a0=r\u20d7\u00a0i(t+\u0394t)\u2212r\u20d7\u00a0j(t+\u0394t)|r\u20d7\u00a0i(t+\u0394t)\u2212r\u20d7\u00a0j(t+\u0394t)|F\u2192(t)=(0,mg)+{kd+cv}n\u2192d=rei+rej\u2212|r\u2192j(t+\u0394t)\u2212r\u2192i(t+\u0394t)|v={v\u2192j(t)\u2212v\u2192i(t)}\u22c5n\u2192n\u2192=r\u2192i(t+\u0394t)\u2212r\u2192j(t+\u0394t)|r\u2192i(t+\u0394t)\u2212r\u2192j(t+\u0394t)|{\\vec{F}(t) = (0, mg) + \\{kd + c v\\} \\vec{n} \\\\\nd = r_{ei} + r_{ej} - |\\vec{r}_j(t+\u0394t) - \\vec{r}_i(t+\u0394t)| \\\\\nv = \\{\\vec{v}_j(t) - \\vec{v}_i(t) \\} \\cdot \\vec{n} \\\\\n\\vec{n} = \\frac{\\vec{r}_i(t+\u0394t) - \\vec{r}_j(t+\u0394t)}{|\\vec{r}_i(t+\u0394t) - \\vec{r}_j(t+\u0394t)|} \\\\\n}\n\u901f\u5ea6\nv\u20d7\u00a0(t+\u0394t)=v\u20d7\u00a0(t)+\u0394tmF\u20d7\u00a0(t)v\u2192(t+\u0394t)=v\u2192(t)+\u0394tmF\u2192(t){\\vec{v}(t+\u0394t) = \\vec{v}(t) + \\frac{\u0394t}{m} \\vec{F}(t) \\\\\n}\n\u4f4d\u7f6e\nr\u20d7\u00a0(t+2\u0394t)=r\u20d7\u00a0(t+\u0394t)+v\u20d7\u00a0(t+\u0394t)\u0394tr\u2192(t+2\u0394t)=r\u2192(t+\u0394t)+v\u2192(t+\u0394t)\u0394t{\\vec{r}(t+2\u0394t) = \\vec{r}(t+\u0394t) + \\vec{v}(t+\u0394t)\u0394t \\\\\n}\n\nProcessing\u3067\u53ef\u8996\u5316\n\u7c92\u5b50\u6570N=2000\u306e\u5834\u5408\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u793a\u3057\u307e\u3059\u3002\n\u5404\u7c92\u5b50\u306e\u901f\u5ea6\u3001\u4f4d\u7f6e\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nParticleSet set; //<>//\nfloat k = 500.00; // spring constant \nfloat c = -1.0; // damping coefficient\nfloat g = 9.80; // unit:m/s/s, gravitational acceleration\nfloat fps = 60;\nfloat dt = 0.01; // unit:s, time step\nfloat mpp = 0.01; // unit:m/pixel\nfloat remin = 0.05, remax = remin; // unit:m, radius\nint numOfParticles = 2000;\nfloat mmin = 0.1, mmax = mmin; // unit:kg, range of mass\nPVector r0min, r0max, v0min, v0max; // unit:m, m/s, range of initial value\nfloat hsv_max = 100;\nfloat color_s = hsv_max, color_v = hsv_max;\nint speed = 1;\nboolean collision_enb = true;\n\nvoid setup() {\n  size(640, 480);\n  frameRate(fps);\n\n  // initial value\n  r0max = new PVector(mpp*width-remax, mpp*height-remax);\n  r0min = new PVector(remax, remax);\n  v0max = new PVector( 1.0, 1.0);\n  v0min = new PVector(-1.0,-1.0);\n\n  set = new ParticleSet(numOfParticles);\n  colorMode(HSB, hsv_max, hsv_max, hsv_max);   \n}\n\nvoid draw() {\n  background(100);\n  for (int i=0; i<speed; i++)\n    set.step();\n  set.draw();\n  // Saves each frame as line-000001.png, line-000002.png, etc.\n  //saveFrame(\"line-######.png\");  \n}\n\nclass ParticleSet {\n  Particle[] set;\n\n  ParticleSet (int num) {\n    set = new Particle[num];\n    for (int i=0; i<set.length; i++) {\n      float re = random(remin, remax);\n      float x = random(r0min.x, r0max.x);\n      float y = random(r0min.y, r0max.y);\n      float vx = random(v0min.x, v0max.x);\n      float vy = random(v0min.y, v0max.y);\n      float m = random(mmin, mmax);\n      set[i] = new Particle(new PVector(x, y), new PVector(vx, vy), m, re);\n    }\n  }\n\n  void draw() {\n    for (int i=0; i<set.length; i++) {\n      set[i].draw();\n    }\n  }\n\n  void step() {\n    calc_f();\n    for (int i=0; i<set.length; i++) {\n      set[i].step();\n    }\n  }\n\n  void calc_f() {\n    for (int i=0; i<set.length; i++) {\n      set[i].Fsd = new PVector();\n    }\n    for (int i=0; i<set.length; i++) {\n      for (int j=0; j<set.length && j < i; j++) {\n        PVector rij = PVector.sub(set[j].r, set[i].r);\n        float dij = rij.mag();\n        float reij = set[i].re + set[j].re;\n        float d = reij - dij;\n\n        if (0 < d) {\n          PVector nij = rij.normalize().copy();\n          PVector Fs = PVector.mult(nij, k*d);\n          PVector vij = PVector.sub(set[j].v, set[i].v);\n          float v = PVector.dot(nij, vij);\n          PVector Fd = PVector.mult(nij, v*c);\n          PVector Fsd = PVector.add(Fs, Fd);\n          set[i].Fsd = PVector.sub(set[i].Fsd, Fsd);\n          set[j].Fsd = PVector.add(set[j].Fsd, Fsd);\n        }\n      }\n    }\n  }\n}\n\nclass Particle {\n  PVector F, Fsd;\n  PVector v;\n  PVector r;\n  float m;\n  float re;\n  float color_h;\n\n  Particle(PVector r0, PVector v0, float m, float re) {\n    r = r0;\n    v = v0;\n    this.m = m;\n    this.re = re;\n    color_h = random(0, hsv_max);\n  }\n\n  void draw() {\n    float vmag = abs(v.x)+abs(v.y); color_h = map(vmag, 0, 10, 70, 0);\n    stroke(color_h, color_s, color_v); /* HSV */\n    fill(color_h, color_s, color_v, 50); /* HSVA */\n    ellipse(r.x/mpp, r.y/mpp, re*2/mpp, re*2/mpp);\n  }\n\n  void step() {\n    F = new PVector(0, m*g); // Fout\n    calc_f();\n    if (collision_enb)\n      F = PVector.add(F, Fsd);\n    v = PVector.add(v, PVector.mult(F, dt/m));\n    r = PVector.add(r, PVector.mult(v, dt));\n  }\n\n  void calc_f() {\n    calc_f_wall();\n  }\n\n  void calc_f_wall() {\n    float d, n;\n    // x direction\n    if (r.x < re) {\n      n =  1.0;\n      d = re-r.x;\n    } else if (mpp*width < r.x+re) {\n      n = -1.0;\n      d = r.x+re-mpp*width;\n    } else {\n      n = 0;\n      d = 0;\n    }\n    if (0 < d) {\n      F.x += k*d*n;\n      F.x += c*v.x;\n    }\n\n    // y direction\n    if (r.y < re) {\n      n =  1.0;\n      d = re-r.y;\n    } else if (mpp*height < r.y+re) {\n      n = -1.0;\n      d = r.y+re-mpp*height;\n    } else {\n      n = 0;\n      d = 0;\n    }\n    if (0 < d) {\n      F.y += k*d*n;\n      F.y += c*v.y;\n    }\n  }\n}\n\n# \u306f\u3058\u3081\u306b\nProcessing\u3092\u4f7f\u3063\u3066\u591a\u7c92\u5b50\u306e\u904b\u52d5\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u307e\u3059\u3002\n\n\u7c92\u5b50\u540c\u58eb\u306e\u53cd\u767a\u306fMass-Spring-Damper\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002\n\u5916\u529b\u306f\u91cd\u529b\u3068\u3057\u307e\u3059\u3002\n\n\u7c92\u5b50\u306f\u8cea\u70b9\u3068\u8003\u3048\u307e\u3059\u3002\n\u7c92\u5b50\u540c\u58eb\u304a\u3088\u3073\u58c1(\u30a6\u30a3\u30f3\u30c9\u30a6\u5883\u754c)\u3068\u306e\u5f71\u97ff\u304c\u53ca\u3076\u534a\u5f84\u3092\u5f71\u97ff\u534a\u5f84$r_e$\u3068\u3057\u307e\u3059\u3002\n$r_e$\u7bc4\u56f2\u5185\u3067\u306f\u3001\u5916\u529b$\\vec{F_{out}}$\u3068Spring-Damper$\\vec{F_{sd}}$\u306b\u3088\u308b\u529b\u304c\u50cd\u304d\u307e\u3059\u3002\n$r_e$\u7bc4\u56f2\u5916\u3067\u306f\u3001\u5916\u529b\u306e\u307f\u304c\u50cd\u304d\u307e\u3059\u3002\n\n# \u5916\u529b\n\u5916\u529b\u306f\u91cd\u529b\u306e\u307f\u3068\u3057\u307e\u3059\u3002$m$\u306f\u7c92\u5b50\u306e\u8cea\u91cf\u3067\u3059\u3002$g$\u306f\u91cd\u529b\u52a0\u901f\u5ea6\u3067\u3059\u3002\n\n```math\n\\vec{F_{out}} = (0, mg) \\\\\n```\n\n# Spring-Damper\u306b\u3088\u308b\u529b\n2\u7c92\u5b50\u306e\u9593\u306e\u529b\u3092\u8003\u3048\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306b\u756a\u53f7$i,j$\u3092\u3064\u3051\u307e\u3059\u3002\nSpring-Damper$\\vec{F_{sd}}$\u306b\u3088\u308b\u529b\u306f\u6b21\u306e\u5f0f\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\n```math\n\\vec{F_{sd}} = \\{kd + c v\\} \\vec{n} \\\\\nd = r_{ei} + r_{ej} - |\\vec{r}_j - \\vec{r}_i| \\\\\nv = \\{\\vec{v}_j - \\vec{v}_i \\} \\cdot \\vec{n} \\\\\n```\n$k$\u306f\u3070\u306d\u5b9a\u6570\u3001$c$\u306f\u6e1b\u8870\u4fc2\u6570\u3067\u3059\u3002$\\vec{n}$\u306f\u5f71\u97ff\u534a\u5f84\u304b\u3089\u9060\u3056\u304b\u308b\u65b9\u5411\u306e\u5358\u4f4d\u30d9\u30af\u30c8\u30eb\u3067\u3059\u3002\n$d$\u306f\u5f71\u97ff\u534a\u5f84\u306b\u4fb5\u5165\u3057\u305f\u8ddd\u96e2\u3067\u3059\u3002$v$\u306f2\u7c92\u5b50\u306e\u76f8\u5bfe\u901f\u5ea6\u306e$\\vec{n}$\u306b\u6cbf\u3063\u305f\u6210\u5206\u3067\u3059\u3002\n\n# Mass-Spring-Damper\n\u904b\u52d5\u65b9\u7a0b\u5f0f\u3092\u793a\u3057\u307e\u3059\u3002\n$r_e$\u7bc4\u56f2\u5185\u3067\u306f\u6b21\u306e\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002\n\n```math\nm \\ddot{\\vec{r}} = \\vec{F_{out}} + \\vec{F_{sd}} = \\\\\n(0, mg) + \\{kd + c v\\} \\vec{n} \\\\\n```\n\n$r_e$\u7bc4\u56f2\u5916\u3067\u306f\u6b21\u306e\u5f0f\u306b\u306a\u308a\u307e\u3059\u3002\n\n```math\nm \\ddot{\\vec{r}} = \\vec{F_{out}}  = (0, mg) \\\\\n```\n\n## \u7c92\u5b50\u3068\u58c1\u306e\u63a5\u8fd1\n\u7c92\u5b50\u304c\u58c1\u306b\u63a5\u8fd1\u3057\u305f\u72b6\u6cc1\u3092\u8003\u3048\u307e\u3059\u3002\u58c1\u304c\u7c92\u5b50\u306e$r_e$\u7bc4\u56f2\u5185\u306b\u5165\u308b\u3068\n\u58c1\u304b\u3089\u9060\u3056\u304b\u308b\u5358\u4f4d\u30d9\u30af\u30c8\u30eb$\\vec{n}$\u306e\u65b9\u5411\u306b$\\vec{F}_{sd}$\u304c\u50cd\u304d\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/84205/1e829525-7154-ae00-d6d2-80b353a4faf1.png)\n\n## \u7c92\u5b50\u540c\u58eb\u306e\u63a5\u8fd1\n2\u7c92\u5b50\u304c\u63a5\u8fd1\u3057\u305f\u72b6\u6cc1\u3092\u8003\u3048\u307e\u3059\u3002\u7c92\u5b50\u306b\u756a\u53f7$i,j$\u3092\u3064\u3051\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/84205/e674bee3-cbe0-e82a-7bf8-65c9403a3a38.png)\n\n\u7c92\u5b50\u306e\u4f4d\u7f6e\u30d9\u30af\u30c8\u30eb\u3092$\\vec{r}_i, \\vec{r}_j$\u3068\u3057\u307e\u3059\u3002\n2\u7c92\u5b50\u306e\u8ddd\u96e2\u3092\n\n```math\nr = |\\vec{r}_j - \\vec{r}_i|\n```\n\u3068\u3057\u307e\u3059\u3002\n\n$r$\u304c2\u7c92\u5b50\u306e$r_e$\u306e\u548c\u3088\u308a\u3082\u5c0f\u3055\u3044\u3068\u304d\u306b\u63a5\u8fd1\u3057\u305f\u3068\u5224\u5b9a\u3057\u307e\u3059\u3002\n\n```math\nr < r_{ej} + r_{ei} \\\\\n0 <(r_{ej} + r_{ei}) -r = r_e\n```\n\n$\\vec{F_{sd}}$\u306f$r_e$\u304a\u3088\u3073\u76f8\u5bfe\u901f\u5ea6$v$\u306b\u5fdc\u3058\u3066\u6c7a\u307e\u308a\u307e\u3059\u3002\n\n$F_{sd}$\u306e\u65b9\u5411\n\u7c92\u5b50$i$\u306b\u3064\u3044\u3066\u306f$j$\u304b\u3089$i$\u306b\u5411\u304b\u3046\u65b9\u5411\u306e\u5358\u4f4d\u30d9\u30af\u30c8\u30eb$\\vec{n}_{ji}$\u3068\u306a\u308a\u3001\n\u7c92\u5b50$j$\u306b\u3064\u3044\u3066\u306f\u305d\u306e\u9006\u65b9\u5411\u306b\u306a\u308a\u307e\u3059\u3002\n\n```math\n\\vec{n}_{ji} = \\frac{|\\vec{r}_i - \\vec{r}_j|}{r} \\\\\n\\vec{n}_{ij} = -\\vec{n}_{ji} \\\\\n```\n\n## \u5dee\u5206\u5316\n\u7c92\u5b50\u306e\u4f4d\u7f6e\u306f\u6b21\u306e\u9806\u756a\u3067\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n+ \u6642\u523b$t$\u306e$\\vec{F}(t)$\u3092\u6c42\u3081\u308b\u3002\n+ $\\vec{F}(t)$\u304b\u3089\u6642\u523b$t+\u0394t$\u306e\u901f\u5ea6$\\vec{v}(t+\u0394t)$\u3092\u6c42\u3081\u308b\u3002\n+ \u901f\u5ea6$\\vec{v}(t+\u0394t)$\u304b\u3089\u6642\u523b$t+2\u0394t$\u306e\u4f4d\u7f6e$\\vec{r}(t+2\u0394t)$\u3092\u6c42\u3081\u308b\u3002\n\n\u529b\n$r_e$\u7bc4\u56f2\u5185\n\n```math\n\\vec{F}(t) = (0, mg) \\\\\n```\n\n$r_e$\u7bc4\u56f2\u5916\n\n```math\n\\vec{F}(t) = (0, mg) + \\{kd + c v\\} \\vec{n} \\\\\nd = r_{ei} + r_{ej} - |\\vec{r}_j(t+\u0394t) - \\vec{r}_i(t+\u0394t)| \\\\\nv = \\{\\vec{v}_j(t) - \\vec{v}_i(t) \\} \\cdot \\vec{n} \\\\\n\\vec{n} = \\frac{\\vec{r}_i(t+\u0394t) - \\vec{r}_j(t+\u0394t)}{|\\vec{r}_i(t+\u0394t) - \\vec{r}_j(t+\u0394t)|} \\\\\n```\n\n\u901f\u5ea6\n\n```math\n\\vec{v}(t+\u0394t) = \\vec{v}(t) + \\frac{\u0394t}{m} \\vec{F}(t) \\\\\n```\n\u4f4d\u7f6e\n\n```math\n\\vec{r}(t+2\u0394t) = \\vec{r}(t+\u0394t) + \\vec{v}(t+\u0394t)\u0394t \\\\\n```\n\n# Processing\u3067\u53ef\u8996\u5316\n\u7c92\u5b50\u6570N=2000\u306e\u5834\u5408\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u793a\u3057\u307e\u3059\u3002\n\u5404\u7c92\u5b50\u306e\u901f\u5ea6\u3001\u4f4d\u7f6e\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/JGJ-r5fXeKA/0.jpg)](http://www.youtube.com/watch?v=JGJ-r5fXeKA)\n\n```java\nParticleSet set; //<>//\nfloat k = 500.00; // spring constant \nfloat c = -1.0; // damping coefficient\nfloat g = 9.80; // unit:m/s/s, gravitational acceleration\nfloat fps = 60;\nfloat dt = 0.01; // unit:s, time step\nfloat mpp = 0.01; // unit:m/pixel\nfloat remin = 0.05, remax = remin; // unit:m, radius\nint numOfParticles = 2000;\nfloat mmin = 0.1, mmax = mmin; // unit:kg, range of mass\nPVector r0min, r0max, v0min, v0max; // unit:m, m/s, range of initial value\nfloat hsv_max = 100;\nfloat color_s = hsv_max, color_v = hsv_max;\nint speed = 1;\nboolean collision_enb = true;\n\nvoid setup() {\n  size(640, 480);\n  frameRate(fps);\n\n  // initial value\n  r0max = new PVector(mpp*width-remax, mpp*height-remax);\n  r0min = new PVector(remax, remax);\n  v0max = new PVector( 1.0, 1.0);\n  v0min = new PVector(-1.0,-1.0);\n\n  set = new ParticleSet(numOfParticles);\n  colorMode(HSB, hsv_max, hsv_max, hsv_max);   \n}\n\nvoid draw() {\n  background(100);\n  for (int i=0; i<speed; i++)\n    set.step();\n  set.draw();\n  // Saves each frame as line-000001.png, line-000002.png, etc.\n  //saveFrame(\"line-######.png\");  \n}\n\nclass ParticleSet {\n  Particle[] set;\n\n  ParticleSet (int num) {\n    set = new Particle[num];\n    for (int i=0; i<set.length; i++) {\n      float re = random(remin, remax);\n      float x = random(r0min.x, r0max.x);\n      float y = random(r0min.y, r0max.y);\n      float vx = random(v0min.x, v0max.x);\n      float vy = random(v0min.y, v0max.y);\n      float m = random(mmin, mmax);\n      set[i] = new Particle(new PVector(x, y), new PVector(vx, vy), m, re);\n    }\n  }\n\n  void draw() {\n    for (int i=0; i<set.length; i++) {\n      set[i].draw();\n    }\n  }\n\n  void step() {\n    calc_f();\n    for (int i=0; i<set.length; i++) {\n      set[i].step();\n    }\n  }\n\n  void calc_f() {\n    for (int i=0; i<set.length; i++) {\n      set[i].Fsd = new PVector();\n    }\n    for (int i=0; i<set.length; i++) {\n      for (int j=0; j<set.length && j < i; j++) {\n        PVector rij = PVector.sub(set[j].r, set[i].r);\n        float dij = rij.mag();\n        float reij = set[i].re + set[j].re;\n        float d = reij - dij;\n\n        if (0 < d) {\n          PVector nij = rij.normalize().copy();\n          PVector Fs = PVector.mult(nij, k*d);\n          PVector vij = PVector.sub(set[j].v, set[i].v);\n          float v = PVector.dot(nij, vij);\n          PVector Fd = PVector.mult(nij, v*c);\n          PVector Fsd = PVector.add(Fs, Fd);\n          set[i].Fsd = PVector.sub(set[i].Fsd, Fsd);\n          set[j].Fsd = PVector.add(set[j].Fsd, Fsd);\n        }\n      }\n    }\n  }\n}\n\nclass Particle {\n  PVector F, Fsd;\n  PVector v;\n  PVector r;\n  float m;\n  float re;\n  float color_h;\n\n  Particle(PVector r0, PVector v0, float m, float re) {\n    r = r0;\n    v = v0;\n    this.m = m;\n    this.re = re;\n    color_h = random(0, hsv_max);\n  }\n\n  void draw() {\n    float vmag = abs(v.x)+abs(v.y); color_h = map(vmag, 0, 10, 70, 0);\n    stroke(color_h, color_s, color_v); /* HSV */\n    fill(color_h, color_s, color_v, 50); /* HSVA */\n    ellipse(r.x/mpp, r.y/mpp, re*2/mpp, re*2/mpp);\n  }\n\n  void step() {\n    F = new PVector(0, m*g); // Fout\n    calc_f();\n    if (collision_enb)\n      F = PVector.add(F, Fsd);\n    v = PVector.add(v, PVector.mult(F, dt/m));\n    r = PVector.add(r, PVector.mult(v, dt));\n  }\n\n  void calc_f() {\n    calc_f_wall();\n  }\n\n  void calc_f_wall() {\n    float d, n;\n    // x direction\n    if (r.x < re) {\n      n =  1.0;\n      d = re-r.x;\n    } else if (mpp*width < r.x+re) {\n      n = -1.0;\n      d = r.x+re-mpp*width;\n    } else {\n      n = 0;\n      d = 0;\n    }\n    if (0 < d) {\n      F.x += k*d*n;\n      F.x += c*v.x;\n    }\n\n    // y direction\n    if (r.y < re) {\n      n =  1.0;\n      d = re-r.y;\n    } else if (mpp*height < r.y+re) {\n      n = -1.0;\n      d = r.y+re-mpp*height;\n    } else {\n      n = 0;\n      d = 0;\n    }\n    if (0 < d) {\n      F.y += k*d*n;\n      F.y += c*v.y;\n    }\n  }\n}\n```\n", "tags": ["processing", "\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3", "\u7269\u7406", "\u591a\u7c92\u5b50", "Mass-Spring-Damper"]}