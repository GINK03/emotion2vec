{"tags": ["wisp", "Scala", "\u53ef\u8996\u5316", "\u30c7\u30fc\u30bf\u53ef\u8996\u5316", "sbt"], "context": "\u3068\u308a\u3042\u3048\u305a\u5f15\u7528\u304b\u3089\u30b9\u30bf\u30fc\u30c8\nWISP: \n\nWisp : Wisp Is Scala Plotting is a console-centric plotting library for scala. It focuses on existing web-based plotting libraries, and strives to bring the power and flexibility of web-based plotting tools to the scala console, while preserving an at-your-finger-tips feel readily found in matlab, R, and many other languages.\n\n\u4ee5\u524d\u307e\u3067\u306fbreeze-viz\u3092\u4f7f\u3063\u3066\u53ef\u8996\u5316\u3057\u3066\u3044\u307e\u3057\u305f\u304c\uff0cWISP\u306b\u4e57\u308a\u63db\u3048\u3066\u307f\u307e\u3057\u305f\uff0e\nBreeze\u306e\u53ef\u8996\u5316\u306f\u3053\u3093\u306a\u611f\u3058\u2193\n\nWISP\u306e\u53ef\u8996\u5316\u306f\u3053\u3093\u306a\u611f\u3058\u2193\n\n\u4e0b\u306e\u9805\u76ee\u306f\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u8868\u793a/\u975e\u8868\u793a\u306e\u5207\u308a\u66ff\u3048\u304c\u53ef\u80fd\u3067\u3059\uff0e\n\u8a73\u3057\u304f\u306f\u5f8c\u8ff0\n\n\u74b0\u5883\n\n\n\n\u9805\u76ee\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nsbt\n0.14.0\n\n\nscala\n2.11.8\n\n\nOS\nOS X EI Capitan ver 10.11.6\n\n\n\n\n\u5c0e\u5165\n\nbuild.sbt\nname := \"WispSample\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.11.8\"\n\nlibraryDependencies ++= Seq(\n  \"com.quantifind\" %% \"wisp\" % \"0.0.4\"\n)\n\n\n\n\u6700\u5c0f\u9650\u3057\u304b\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u9069\u6642\u5fc5\u8981\u306a\u3082\u306e\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u3068\u308a\u3042\u3048\u305a\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3053\u306e\u69cb\u6210\u3067\u52d5\u304d\u307e\u3059\uff0e\n\u69cb\u6210\u306f\u4ee5\u4e0b\n.\n\u251c\u2500\u2500 build.sbt\n\u251c\u2500\u2500 project\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 target\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scala\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 Wisp.scala\n\n\n\n/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    // \u3053\u3053\u306b\u3044\u308d\u3044\u308d\u8ffd\u52a0\u3057\u3066\u3044\u304f\n  }\n}\n\n\n\n\u4f7f\u3044\u65b9\n\u307e\u305a\u306f\u3069\u3093\u306a\u56f3\u304c\u66f8\u3051\u308b\u306e\u304b\u898b\u3066\u307f\u307e\u3059\uff0e\nscala> help\n\nAvailable Plot Types: Takes an Iterable, an Iterable of pairs, a pair of Iterables, or an Iterable and a Function\n\n    area\n    areaspline\n    bar\n    column\n    line\n    pie\n    scatter\n    spline\n    regression\n\nOther plotting options:\n\n    histogram                          Iterable of Numerics or Pairs\n\nGitHub\u306eWiki\u306b\u3066\uff0careaspline\uff0cpie\uff0cregression\uff0chistogram\uff0cbar\u306e\u4f7f\u3044\u65b9\u306f\u753b\u50cf\u4ed8\u304d\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u3066\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\uff0e\n\u306a\u306e\u3067\uff0c\u4eca\u56de\u306f\u7d39\u4ecb\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3092\u4e2d\u5fc3\u306b\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\nPlot\n\n\u30b3\u30fc\u30c9\n\n/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    //\u7b2c1\u5f15\u6570\u304cx\u8ef8\uff0c\u7b2c2\u5f15\u6570\u304cy\u8ef8\n    area(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    column(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    line(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    scatter(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    spline(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n  }\n}\n\n\n\nsbt run\u3059\u308b\u3068\u30d6\u30e9\u30a6\u30b6\u304c\u8d77\u52d5\u3057\u3066\u56f3\u304c\u4f5c\u6210\u3055\u308c\u308b\uff0e\n\n\u56f3\narea:\n\ncolumn:\nline:\n\nscatter:\n\nspline:\n\n\u8aac\u660e\u306e\u305f\u3081\uff0c\u308f\u3051\u3066\u8f09\u305b\u307e\u3057\u305f\u304c\uff0c\u30d6\u30e9\u30a6\u30b6\u304c\u8d77\u52d5\u3057\u305f\u969b\u306b\u540c\u3058\u30da\u30fc\u30b8\u306b\u8f09\u3063\u3066\u3044\u307e\u3059\uff0e\n\u5f15\u6570\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u306e\u306f\n\nan Iterable[Numeric]\nan Iterable[(Numeric, Numeric)]\nan (Iterable[Numeric], Iterable[Numeric])\nan (Iterable[Numeric], Numeric => Numeric)\nan (Numeric => Numeric, Iterable[Numeric])\n\n\u3060\u305d\u3046\u3067\u3059\n\nStyle\u8abf\u6574\u3092\u7d61\u3081\u3066\u5b9f\u8df5\u3057\u3066\u307f\u308b\n\u30b9\u30bf\u30a4\u30eb\u306b\u3064\u3044\u3066\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u3044\u304f\u3064\u304b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\nStylistic changes:\n\n    hold                               plots the next plot on top of the existing plot\n    unhold                             plots the next plot in a new chart\n    title(String)                      add a title to the most recent plot\n    xAxis(String)                      adds a label to the x-axis\n    xAxisType([                        updates the x-axis type\n      \"linear\", \"logarithmic\",\n      \"datetime\", \"category\"\n    ])\n    yAxis(String)                      adds a label to y-axis\n    yAxisType([                        updates the y-axis type\n      \"linear\", \"logarithmic\",\n      \"datetime\", \"category\"\n    ])\n    legend(Iterable[String])           adds a legend to the most recent plot\n    stack([\"normal\", \"percent\"])       stacks bars, columns, and lines relative to each other\n    unstack                            remove stacking\n\n\u4eca\u56de\u306f\u5148\u982d\u3067\u306e\u3063\u3051\u305f\u56f3\u3063\u307d\u3044\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff0e\n(\u8a08\u7b97\u3068\u304b\u4e00\u5207\u3057\u306a\u3044\u3067\u305f\u3060\u898b\u305f\u76ee\u3060\u3051\u771f\u4f3c\u3057\u3066\u307f\u307e\u3059\uff0e)\n\nStep1 \u30c7\u30fc\u30bf\u3092Plot\n\n/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    //\u7b2c1\u5f15\u6570\u304cx\u8ef8\uff0c\u7b2c2\u5f15\u6570\u304cy\u8ef8\n    // area(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // column(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // line(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // scatter(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // spline(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    val xFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    val yFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    scatter(xFirstQuadrant,yFirstQuadrant)\n\n    //\u7b2c3\u8c61\u9650\u30c7\u30fc\u30bf\n    val xThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    val yThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    scatter(xThirdQuadrant,yThirdQuadrant)  \n    }\n}\n\n\n\n\u3053\u306e\u307e\u307ePlot\u3059\u308b\u30682\u3064\u30b0\u30e9\u30d5\u304c\u3067\u304d\u3066\u3057\u307e\u3063\u3066\u72d9\u3044\u3069\u304a\u308a\u306b\u3044\u304b\u306a\u3044\uff0e\n\u306a\u306e\u3067\uff0c\u3069\u3093\u3069\u3093\u4e0a\u66f8\u304d\u3057\u305f\u3044\u3068\u304d\u306fhold\u3092\u4f7f\u3046\n\n/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    //\u7b2c1\u5f15\u6570\u304cx\u8ef8\uff0c\u7b2c2\u5f15\u6570\u304cy\u8ef8\n    // area(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // column(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // line(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // scatter(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // spline(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    val xFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    val yFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    scatter(xFirstQuadrant,yFirstQuadrant)\n    hold\n\n    //\u7b2c3\u8c61\u9650\u30c7\u30fc\u30bf\n    val xThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    val yThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    scatter(xThirdQuadrant,yThirdQuadrant)  \n    }\n}\n\n\n\n\n\nStep2 \u5883\u754c\u7dda\u3092\u5f15\u3044\u3066\u307f\u308b\n\n/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    //\u7b2c1\u5f15\u6570\u304cx\u8ef8\uff0c\u7b2c2\u5f15\u6570\u304cy\u8ef8\n    // area(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // column(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // line(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // scatter(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // spline(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    val xFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    val yFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    scatter(xFirstQuadrant,yFirstQuadrant)\n    hold\n\n    //\u7b2c3\u8c61\u9650\u30c7\u30fc\u30bf\n    val xThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    val yThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    scatter(xThirdQuadrant,yThirdQuadrant)  \n    hold\n    line((-1 to 1).map(x => x -> -x))\n    }\n}\n\n\n\nmap\u3092\u4f7f\u3046\u3068\u5f15\u6570\u306f1\u3064\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\uff0e\n\n\nStep3 \u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u4ed8\u3051\u308b\n\u4e0a\u8a18\u306e\u56f3\u306e\u307e\u307e\u3060\u3068\u4f55\u304c\u4f55\u3092\u8868\u3057\u3066\u3044\u308b\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u3064\u3051\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n\n\n\n\u30b9\u30bf\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\n\u8aac\u660e\n\n\n\n\ntitle\n\u30bf\u30a4\u30c8\u30eb\n\n\nxAxis\nx\u8ef8\u306e\u30e9\u30d9\u30eb\n\n\nyAxis\ny\u8ef8\u306e\u30e9\u30d9\u30eb\n\n\nlegend\n\u30c7\u30fc\u30bf\u306e\u30e9\u30d9\u30eb\n\n\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    //\u7b2c1\u5f15\u6570\u304cx\u8ef8\uff0c\u7b2c2\u5f15\u6570\u304cy\u8ef8\n    // area(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // column(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // line(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // scatter(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // spline(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    val xFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    val yFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    scatter(xFirstQuadrant,yFirstQuadrant)\n    hold\n\n    //\u7b2c3\u8c61\u9650\u30c7\u30fc\u30bf\n    val xThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    val yThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    scatter(xThirdQuadrant,yThirdQuadrant)  \n    hold\n    line((-1 to 1).map(x => x -> -x))\n\n    title(\"\u30b5\u30f3\u30d7\u30eb\u3067\u3059\")\n    xAxis(\"x\")\n    yAxis(\"y\")\n    legend(List(\"Class1\", \"Class2\", \"\u5883\u754c\u7dda\"))\n    }\n}\n\n\n\n\n\u3053\u308c\u3067\u305d\u308c\u3063\u307d\u304f\u306a\u308a\u307e\u3057\u305f\u306d\uff0e\n\nStep4: \u30d6\u30e9\u30a6\u30b6\u3067\u307f\u3066\u307f\u308b\n\n\u30d6\u30e9\u30a6\u30b6\u3067\u307f\u308b\u3068\u4e0a\u306e\u52d5\u753b\u306e\u3088\u3046\u306b\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u8868\u793a\u3057\u305f\u308a\uff0c\u3044\u308d\u3044\u308d\u306a\u5f62\u5f0f\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\u3068\u308a\u3042\u3048\u305a\u5f15\u7528\u304b\u3089\u30b9\u30bf\u30fc\u30c8\n\n[WISP](https://github.com/quantifind/wisp): ![Qiita](https://camo.githubusercontent.com/181b4ce7b533ed86df811645bad742bcc8af7145/68747470733a2f2f7261772e6769746875622e636f6d2f7175616e746966696e642f776973702f6d61737465722f696d616765732f776973705f6c6f676f5f6d61726b4f6e6c795f636f6c6f722e706e67 \"Qiita\")\n\n>Wisp : Wisp Is Scala Plotting is a console-centric plotting library for scala. It focuses on existing web-based plotting libraries, and strives to bring the power and flexibility of web-based plotting tools to the scala console, while preserving an at-your-finger-tips feel readily found in matlab, R, and many other languages.\n\n\u4ee5\u524d\u307e\u3067\u306f[breeze-viz](https://github.com/scalanlp/breeze-viz)\u3092\u4f7f\u3063\u3066\u53ef\u8996\u5316\u3057\u3066\u3044\u307e\u3057\u305f\u304c\uff0cWISP\u306b\u4e57\u308a\u63db\u3048\u3066\u307f\u307e\u3057\u305f\uff0e\n\nBreeze\u306e\u53ef\u8996\u5316\u306f\u3053\u3093\u306a\u611f\u3058\u2193\n![3\u5468\u76ee12\u56de\u76ee.png](https://qiita-image-store.s3.amazonaws.com/0/84299/890ee61e-bfd4-2cd3-62aa-8cf909e3c24d.png \"3\u5468\u76ee12\u56de\u76ee.png\")\n\nWISP\u306e\u53ef\u8996\u5316\u306f\u3053\u3093\u306a\u611f\u3058\u2193\n![Screenshot 2016-07-31 05.00.41.png](https://qiita-image-store.s3.amazonaws.com/0/84299/401940be-3c4e-2b5a-6245-7ba5b4de81a7.png \"Screenshot 2016-07-31 05.00.41.png\")\n\n\u4e0b\u306e\u9805\u76ee\u306f\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u8868\u793a/\u975e\u8868\u793a\u306e\u5207\u308a\u66ff\u3048\u304c\u53ef\u80fd\u3067\u3059\uff0e\n\u8a73\u3057\u304f\u306f\u5f8c\u8ff0\n\n\n## \u74b0\u5883\n|\u9805\u76ee|\u30d0\u30fc\u30b8\u30e7\u30f3|\n|:---:|:---:|\n|sbt|0.14.0|\n|scala|2.11.8|\n|OS|OS X EI Capitan ver 10.11.6|\n\n## \u5c0e\u5165\n\n```sbt:build.sbt\nname := \"WispSample\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.11.8\"\n\nlibraryDependencies ++= Seq(\n  \"com.quantifind\" %% \"wisp\" % \"0.0.4\"\n)\n\n```\n\n\u6700\u5c0f\u9650\u3057\u304b\u66f8\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u9069\u6642\u5fc5\u8981\u306a\u3082\u306e\u3092\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u3068\u308a\u3042\u3048\u305a\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3053\u306e\u69cb\u6210\u3067\u52d5\u304d\u307e\u3059\uff0e\n\n\u69cb\u6210\u306f\u4ee5\u4e0b\n\n```\n.\n\u251c\u2500\u2500 build.sbt\n\u251c\u2500\u2500 project\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 target\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 main\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scala\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 Wisp.scala\n\n```\n\n```scala:/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    // \u3053\u3053\u306b\u3044\u308d\u3044\u308d\u8ffd\u52a0\u3057\u3066\u3044\u304f\n  }\n}\n```\n\n\n## \u4f7f\u3044\u65b9\n\n\u307e\u305a\u306f\u3069\u3093\u306a\u56f3\u304c\u66f8\u3051\u308b\u306e\u304b\u898b\u3066\u307f\u307e\u3059\uff0e\n\n```\nscala> help\n\nAvailable Plot Types: Takes an Iterable, an Iterable of pairs, a pair of Iterables, or an Iterable and a Function\n\n\tarea\n\tareaspline\n\tbar\n\tcolumn\n\tline\n\tpie\n\tscatter\n\tspline\n\tregression\n\t\nOther plotting options:\n\n\thistogram                          Iterable of Numerics or Pairs\n```\n\n[GitHub\u306eWiki](https://github.com/quantifind/wisp/wiki/Highcharts)\u306b\u3066\uff0c`areaspline`\uff0c`pie`\uff0c`regression`\uff0c`histogram`\uff0c`bar`\u306e\u4f7f\u3044\u65b9\u306f\u753b\u50cf\u4ed8\u304d\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u3066\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\uff0e\n\n\u306a\u306e\u3067\uff0c\u4eca\u56de\u306f\u7d39\u4ecb\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3092\u4e2d\u5fc3\u306b\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n### Plot\n\n#### \u30b3\u30fc\u30c9\n```scala:/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    //\u7b2c1\u5f15\u6570\u304cx\u8ef8\uff0c\u7b2c2\u5f15\u6570\u304cy\u8ef8\n    area(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    column(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    line(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    scatter(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    spline(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n  }\n}\n\n```\n\n```sbt run```\u3059\u308b\u3068\u30d6\u30e9\u30a6\u30b6\u304c\u8d77\u52d5\u3057\u3066\u56f3\u304c\u4f5c\u6210\u3055\u308c\u308b\uff0e\n\n#### \u56f3\narea:\n![Screenshot 2016-08-01 01.30.49.png](https://qiita-image-store.s3.amazonaws.com/0/84299/9b2e89bb-a849-9faa-bd52-27b087995926.png \"Screenshot 2016-08-01 01.30.49.png\")\n\ncolumn:![Screenshot 2016-08-01 01.40.10.png](https://qiita-image-store.s3.amazonaws.com/0/84299/4cb276af-96f4-cdc9-e990-cf1b85fde601.png \"Screenshot 2016-08-01 01.40.10.png\")\n\nline:\n![Screenshot 2016-08-01 01.40.50.png](https://qiita-image-store.s3.amazonaws.com/0/84299/8627d2a1-920c-fef3-7435-1a49456f223a.png \"Screenshot 2016-08-01 01.40.50.png\")\n\nscatter:\n![Screenshot 2016-08-01 01.41.16.png](https://qiita-image-store.s3.amazonaws.com/0/84299/cf8291e7-d6c4-2578-5d51-043943c89792.png \"Screenshot 2016-08-01 01.41.16.png\")\n\nspline:\n![Screenshot 2016-08-01 01.41.41.png](https://qiita-image-store.s3.amazonaws.com/0/84299/10602c63-37ed-9920-2807-cf6831cbafb7.png \"Screenshot 2016-08-01 01.41.41.png\")\n\n\u8aac\u660e\u306e\u305f\u3081\uff0c\u308f\u3051\u3066\u8f09\u305b\u307e\u3057\u305f\u304c\uff0c\u30d6\u30e9\u30a6\u30b6\u304c\u8d77\u52d5\u3057\u305f\u969b\u306b\u540c\u3058\u30da\u30fc\u30b8\u306b\u8f09\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u5f15\u6570\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u306e\u306f\n\n>an Iterable[Numeric]\nan Iterable[(Numeric, Numeric)]\nan (Iterable[Numeric], Iterable[Numeric])\nan (Iterable[Numeric], Numeric => Numeric)\nan (Numeric => Numeric, Iterable[Numeric])\n\n\u3060\u305d\u3046\u3067\u3059\n\n### Style\u8abf\u6574\u3092\u7d61\u3081\u3066\u5b9f\u8df5\u3057\u3066\u307f\u308b\n\u30b9\u30bf\u30a4\u30eb\u306b\u3064\u3044\u3066\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u3044\u304f\u3064\u304b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n```\nStylistic changes:\n\n\thold                               plots the next plot on top of the existing plot\n\tunhold                             plots the next plot in a new chart\n\ttitle(String)                      add a title to the most recent plot\n\txAxis(String)                      adds a label to the x-axis\n\txAxisType([                        updates the x-axis type\n\t  \"linear\", \"logarithmic\",\n\t  \"datetime\", \"category\"\n\t])\n\tyAxis(String)                      adds a label to y-axis\n\tyAxisType([                        updates the y-axis type\n\t  \"linear\", \"logarithmic\",\n\t  \"datetime\", \"category\"\n\t])\n\tlegend(Iterable[String])           adds a legend to the most recent plot\n\tstack([\"normal\", \"percent\"])       stacks bars, columns, and lines relative to each other\n\tunstack                            remove stacking\n```\n\n\u4eca\u56de\u306f\u5148\u982d\u3067\u306e\u3063\u3051\u305f\u56f3\u3063\u307d\u3044\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff0e\n(\u8a08\u7b97\u3068\u304b\u4e00\u5207\u3057\u306a\u3044\u3067\u305f\u3060\u898b\u305f\u76ee\u3060\u3051\u771f\u4f3c\u3057\u3066\u307f\u307e\u3059\uff0e)\n\n#### Step1 \u30c7\u30fc\u30bf\u3092Plot\n\n```scala:/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    //\u7b2c1\u5f15\u6570\u304cx\u8ef8\uff0c\u7b2c2\u5f15\u6570\u304cy\u8ef8\n    // area(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // column(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // line(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // scatter(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // spline(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    val xFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    val yFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    scatter(xFirstQuadrant,yFirstQuadrant)\n\n    //\u7b2c3\u8c61\u9650\u30c7\u30fc\u30bf\n    val xThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    val yThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    scatter(xThirdQuadrant,yThirdQuadrant)  \n    }\n}\n\n```\n\n\u3053\u306e\u307e\u307ePlot\u3059\u308b\u30682\u3064\u30b0\u30e9\u30d5\u304c\u3067\u304d\u3066\u3057\u307e\u3063\u3066\u72d9\u3044\u3069\u304a\u308a\u306b\u3044\u304b\u306a\u3044\uff0e\n\u306a\u306e\u3067\uff0c\u3069\u3093\u3069\u3093\u4e0a\u66f8\u304d\u3057\u305f\u3044\u3068\u304d\u306f`hold`\u3092\u4f7f\u3046\n\n```scala:/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    //\u7b2c1\u5f15\u6570\u304cx\u8ef8\uff0c\u7b2c2\u5f15\u6570\u304cy\u8ef8\n    // area(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // column(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // line(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // scatter(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // spline(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    val xFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    val yFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    scatter(xFirstQuadrant,yFirstQuadrant)\n    hold\n\n    //\u7b2c3\u8c61\u9650\u30c7\u30fc\u30bf\n    val xThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    val yThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    scatter(xThirdQuadrant,yThirdQuadrant)  \n    }\n}\n\n```\n\n![Screenshot 2016-08-01 02.07.16.png](https://qiita-image-store.s3.amazonaws.com/0/84299/550b6a02-c658-ec0b-5c7b-30d8ed945735.png \"Screenshot 2016-08-01 02.07.16.png\")\n\n\n#### Step2 \u5883\u754c\u7dda\u3092\u5f15\u3044\u3066\u307f\u308b\n\n```scala:/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    //\u7b2c1\u5f15\u6570\u304cx\u8ef8\uff0c\u7b2c2\u5f15\u6570\u304cy\u8ef8\n    // area(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // column(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // line(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // scatter(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // spline(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    val xFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    val yFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    scatter(xFirstQuadrant,yFirstQuadrant)\n    hold\n\n    //\u7b2c3\u8c61\u9650\u30c7\u30fc\u30bf\n    val xThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    val yThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    scatter(xThirdQuadrant,yThirdQuadrant)  \n    hold\n    line((-1 to 1).map(x => x -> -x))\n    }\n}\n\n```\n\nmap\u3092\u4f7f\u3046\u3068\u5f15\u6570\u306f1\u3064\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\uff0e\n\n![Screenshot 2016-08-01 02.17.07.png](https://qiita-image-store.s3.amazonaws.com/0/84299/d73319a1-384f-e01e-cd19-921263ee326d.png \"Screenshot 2016-08-01 02.17.07.png\")\n\n#### Step3 \u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u4ed8\u3051\u308b\n\n\u4e0a\u8a18\u306e\u56f3\u306e\u307e\u307e\u3060\u3068\u4f55\u304c\u4f55\u3092\u8868\u3057\u3066\u3044\u308b\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u3064\u3051\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n\n|\u30b9\u30bf\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3|\u8aac\u660e|\n|:---:|:---:|\n|title|\u30bf\u30a4\u30c8\u30eb|\n|xAxis|x\u8ef8\u306e\u30e9\u30d9\u30eb|\n|yAxis|y\u8ef8\u306e\u30e9\u30d9\u30eb|\n|legend|\u30c7\u30fc\u30bf\u306e\u30e9\u30d9\u30eb|\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n```scala:/src/main/scala/Wisp.scala\nimport com.quantifind.charts.Highcharts._\n\nobject Wisp{\n\n  def main(args:Array[String]){\n    //\u7b2c1\u5f15\u6570\u304cx\u8ef8\uff0c\u7b2c2\u5f15\u6570\u304cy\u8ef8\n    // area(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // column(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // line(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // scatter(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n    // spline(List(1, 2, 3, 4, 5), List(4, 1, 3, 2, 6))\n\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    //\u7b2c1\u8c61\u9650\u306e\u30c7\u30fc\u30bf\n    val xFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    val yFirstQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / 10.0}\n    scatter(xFirstQuadrant,yFirstQuadrant)\n    hold\n\n    //\u7b2c3\u8c61\u9650\u30c7\u30fc\u30bf\n    val xThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    val yThirdQuadrant:List[Double] = List.fill(15)(Random.nextInt(10)).map{_ / -10.0}\n    scatter(xThirdQuadrant,yThirdQuadrant)  \n    hold\n    line((-1 to 1).map(x => x -> -x))\n    \n    title(\"\u30b5\u30f3\u30d7\u30eb\u3067\u3059\")\n    xAxis(\"x\")\n    yAxis(\"y\")\n    legend(List(\"Class1\", \"Class2\", \"\u5883\u754c\u7dda\"))\n    }\n}\n\n```\n![Screenshot 2016-08-01 02.21.19.png](https://qiita-image-store.s3.amazonaws.com/0/84299/fc49102e-a944-8eef-2e9c-6809de85912b.png \"Screenshot 2016-08-01 02.21.19.png\")\n\n\n\u3053\u308c\u3067\u305d\u308c\u3063\u307d\u304f\u306a\u308a\u307e\u3057\u305f\u306d\uff0e\n\n#### Step4: \u30d6\u30e9\u30a6\u30b6\u3067\u307f\u3066\u307f\u308b\n\n![wispsample.gif](https://qiita-image-store.s3.amazonaws.com/0/84299/e9cc1e40-850f-ff5b-9e9b-f0007b1a5273.gif \"wispsample.gif\")\n\n\n\u30d6\u30e9\u30a6\u30b6\u3067\u307f\u308b\u3068\u4e0a\u306e\u52d5\u753b\u306e\u3088\u3046\u306b\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u8868\u793a\u3057\u305f\u308a\uff0c\u3044\u308d\u3044\u308d\u306a\u5f62\u5f0f\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\n\n\n\n"}