{"context": "\u6587\u5b57\u306e Unicode \u30d7\u30ed\u30d1\u30c6\u30a3\u3084\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u691c\u7d22\u3067\u8abf\u3079\u308b\u969b\u306b\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002PHP 5.5 \u3067 intl \u62e1\u5f35\u30e2\u30b8\u30e5\u30fc\u30eb\u306b IntlCodePointBreakIterator \u304c\u8ffd\u52a0\u3055\u308c\u3001\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u6c42\u3081\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\n\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u8abf\u3079\u308b\u306b\u306f\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u306e\u305f\u3081\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059\u3002Ruby \u306e\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nruby -e 'puts ARGV[0].ord.to_s(16).upcase' \u3042\n\n\u5c11\u3057\u4fee\u6b63\u3059\u308c\u3070\u3001\u6587\u5b57\u5217\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nruby -e 'ARGV[0].each_char {|c| puts c.ord.to_s(16).upcase }' \u3042\u3044\u3046\u3048\u304a\n\nPHP \u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u3084\u3063\u3066\u307f\u3088\u3046\u3002IntlCodePointBreakIterator \u3092\u4f7f\u3046\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\nphp -r '$it = IntlCodePointBreakIterator::createCodePointInstance(); $it->setText($argv[1]); while ($it->next() !== IntlCodePointBreakIterator::DONE) echo dechex($it->getLastCodePoint()), PHP_EOL;\n;' \u3042\u3044\u3046\u3048\u304a\n\n\n\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u5217\u306e\u6271\u3044\n\u3053\u306e\u8a18\u4e8b\u3067\u306f IntlCodePointBreakIterator \u306b\u306a\u3089\u3044\u3001\u4ee3\u66ff\u6587\u5b57 (U+FFFD) \u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u3042\u308b 0xFFFD \u3092\u8fd4\u3059\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u30a8\u30e9\u30fc\u3084\u4f8b\u5916\u3067\u51e6\u7406\u3092\u505c\u6b62\u3055\u305b\u308b\u9078\u629e\u80a2\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u6bce\u56de\u3001\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3001\u4e0d\u4fbf\u3067\u3059\u3002\n\nmb_ord\nPHP 7.2 \u3067\u5c0e\u5165\u3055\u308c\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\nIntlChar::ord\nPHP 7 \u3067\u306f IntlChar::ord \u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nIntlCodePointBreakIterator\ncreateCodePointInstance \u30e1\u30bd\u30c3\u30c9\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\nfunction utf8_ord($char) {\n    $it = IntlCodePointBreakIterator::createCodePointInstance();\n    $it->setText($char);\n    $it->next();\n\n    return $it->getLastCodePoint();\n}\n\n\nUTF-32 \u3078\u306e\u5909\u63db\nmb_convert_encoding \u3082\u3057\u304f\u306f UConverter::transcode \u3092\u4f7f\u3044\u307e\u3059\u3002\nfunction utf8_ord2($char) {\n\n    $char = mb_substr($char, 0, 1, 'UTF-8');\n\n    if ($char !== mb_convert_encoding($char, 'UTF-8', 'UTF-8')) {\n        return 0xFFFD;\n    }\n\n    $ret = mb_convert_encoding($char, 'UTF-32BE', 'UTF-8');\n    return hexdec(bin2hex($ret));\n}\n\nfunction utf8_ord3($char) {\n    $it = IntlBreakIterator::createCharacterInstance('en_US.UTF-8');\n    $it->setText($char);\n    $pos = $it->next();\n    $char = substr($char, 0, $pos);\n    $ret = UConverter::transcode($char, 'UTF32_BigEndian', 'UTF8');\n\n    return $ret !== '' ? (int) hexdec(bin2hex($ret)) : 0xFFFD;\n}\n\n\nHTML \u6570\u5024\u6587\u5b57\u53c2\u7167\nmb_encode_numericentity \u3092\u4f7f\u3044\u307e\u3059\u3002mb_convert_encoding \u3067 UTF-8 \u304b\u3089 HTML-ENTITIES \u306b\u5909\u63db\u3059\u308b\u5834\u5408\u3001\u6587\u5b57\u5b9f\u4f53\u53c2\u7167\u306b\u5909\u63db\u3055\u308c\u308b\u6587\u5b57\u304c\u591a\u3044\u306e\u3067\u3001\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u6c42\u3081\u308b\u7528\u9014\u306b\u306f\u4e0d\u5411\u304d\u3067\u3059\u3002\nfunction utf8_ord4($char) {\n\n    $char = mb_substr($char, 0, 1, 'UTF-8');\n\n    $ret = mb_encode_numericentity($char, [0, 0x10FFFF, 0, 0xFFFFFF], 'UTF-8', true);\n\n    if ($ret === '?') {\n        return 0xFFFD;\n    }\n\n    $ret = substr($ret, 3, strlen($ret) - 4);\n\n    return (int) hexdec($ret);\n}\n\n\nUnicode \u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\njson_encode \u3082\u3057\u304f\u306f transliterator_transliterate \u3092\u4f7f\u3044\u307e\u3059\u3002json_encode \u306e\u5834\u5408\u3001\u5236\u5fa1\u6587\u5b57\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u3064\u3044\u3066\u5834\u5408\u308f\u3051\u3092\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u304c\u3081\u3093\u3069\u3046\u3067\u3059\u3002\n\nfunction utf8_ord5($char) {\n    $c = htmlspecialchars_decode(htmlspecialchars($char, ENT_COMPAT, 'UTF-8'));\n\n    if ($c !== $char) {\n        return 0xFFFD;\n    }\n\n    $json = json_encode($c);\n    $head = substr($json, 1, 2);\n\n    if ('\\b' === $head) {\n        return 0x8;\n    } else if ('\\t' === $head) {\n        return 0x9;\n    } else if ('\\n' === $head) {\n        return 0xA;\n    } else if ('\\f' === $head) {\n        return 0xC;\n    } else if ('\\r' === $head) {\n        return 0xD;\n    } else if ('\\\"' === $head) {\n        return 0x22;\n    } else if ('\\/' === $head) {\n        return 0x2F;\n    } else if ('\\u' !== $head) {\n        return ord($json[1]);\n    }\n\n    $lead = hexdec(substr($json, 3, 4));\n\n    if (0xD7FF < $lead && $lead < 0xDC00) {\n        $trail = hexdec(substr($json, 9, 4));\n        return  (($lead & 0x3FF) << 10) + ($trail & 0x3FF) + 0x10000;\n    }\n\n    return $lead;\n}\n\nfunction utf8_ord6($char) {\n    $ret =  transliterator_transliterate(\"Any-Hex/Java\", $char);\n\n    if ($ret === false) {\n        return 0xFFFD;\n    }\n\n    $lead = hexdec(substr($ret, 2, 4));\n\n    if ($lead > 0xD7FF && $lead < 0xDC00) {\n        $trail = hexdec(substr($ret, 8, 4));\n\n        return  (($lead & 0x3FF) << 10) + ($trail & 0x3FF) + 0x10000;\n    }\n\n    return $lead;\n}\n\n\n\u30d3\u30c3\u30c8\u6f14\u7b97\u3068 ord\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6539\u5584\u306e\u305f\u3081\u306b\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u5217\u306e\u691c\u51fa\u306b\u306f htmlspecialchars \u3092\u5229\u7528\u3057\u307e\u3059\u3002Unicode Standard \u306e3\u7ae0\u306b\u30d3\u30c3\u30c8\u306e\u5206\u5e03\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059 (\u30c6\u30fc\u30d6\u30eb 3-6)\u3002\n\n\n\n\u30b9\u30ab\u30e9\u30fc\u5024\n\u7b2c1\u30d0\u30a4\u30c8\n\u7b2c2\u30d0\u30a4\u30c8\n\u7b2c3\u30d0\u30a4\u30c8\n\u7b2c4\u30d0\u30a4\u30c8\n\n\n\n\n00000000 0xxxxxxx\n0xxxxxxx\n\n\n\n\n\n00000yyy yyxxxxxx\n110yyyyy\n10xxxxxx\n\n\n\n\nzzzzyyyy yyxxxxxx\n1110zzzz\n10yyyyyy\n10xxxxxx\n\n\n\n000uuuuu zzzzyyyy yyxxxxxx\n11110uuu\n10uuzzzz\n10yyyyyy\n10xxxxxx\n\n\n\nvar_dump(\n    0x0024 === utf8_ord7('$'),\n    0x00A2 === utf8_ord7('\u00a2'),\n    0x20AC === utf8_ord7('\u20ac'),\n    0x10348 === utf8_ord7('?')\n);\n\nfunction utf8_ord7($char) {\n\n    if ($char !== htmlspecialchars_decode(htmlspecialchars($char, ENT_COMPAT, 'UTF-8'))) {\n        return 0xFFFD;\n    }\n\n    $x = ord($char[0]);\n\n    if ($x < 0x80) {\n        return $x;\n    } else if ($x < 0xE0) {\n\n        $y = ord($char[1]);\n\n        return (($x & 0x1F) << 6) | ($y & 0x3F);\n\n    } else if ($x < 0xF0) {\n\n        $y = ord($char[1]);\n        $z = ord($char[2]);\n\n        return (($x & 0xF) << 12) | (($y & 0x3F) << 6) | ($z & 0x3F);\n    }\n\n    $y = ord($char[1]);\n    $z = ord($char[2]);\n    $w = ord($char[3]);\n\n    return (($x & 0x7) << 18) | (($y & 0x3F) << 12) | (($z & 0x3F) << 6) | ($w & 0x3F);\n}\n\n\n\u30d3\u30c3\u30c8\u6f14\u7b97\u306e\u8a08\u7b97\u904e\u7a0b\n\u8a08\u7b97\u904e\u7a0b\u3092\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u306b\u4f7f\u3046\u6570\u5024\u30922\u9032\u6570\u306b\u66f8\u304d\u63db\u3048\u305f\u3082\u306e\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nfunction utf8_ord8($char) {\n\n    if ($char !== htmlspecialchars_decode(htmlspecialchars($char, ENT_COMPAT, 'UTF-8'))) {\n        return 0xFFFD;\n    }\n\n    $x = ord($char[0]);\n\n    if ($x < 0x80) {\n        return $x;\n    } else if ($x < 0xE0) {\n\n        $y = ord($char[1]);\n\n        return (($x & 0b11111) << 6) + ($y & 0b111111);\n\n    } else if ($x < 0xF0) {\n\n        $y = ord($char[1]);\n        $z = ord($char[2]);\n\n        return (($x & 0b1111) << 12) + (($y & 0b111111) << 6) + ($z & 0b111111);\n    }\n\n    $y = ord($char[1]);\n    $z = ord($char[2]);\n    $w = ord($char[3]);\n\n    return (($x & 0b1111) << 18) + (($y & 0b111111) << 12) + (($z & 0b111111) << 6) + ($w & 0b111111);\n}\n\nWikipedia \u306e UTF-8 \u306e\u8a18\u4e8b\u306b\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u30d0\u30a4\u30c8\u5217\u306e\u95a2\u4fc2\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n4\u30d0\u30a4\u30c8\u6587\u5b57\u306e U+10348 \u3067\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n$cp = 0x10348;\n$char = \"\\xF0\\x90\\x8D\\x88\";\n\nvar_dump(\n    '10000001101001000' === decbin($cp),\n    [\n        '11110000' === decbin(0xF0),\n        '10010000' === decbin(0x90),\n        '10001101' === decbin(0x8D),\n        '10001000' === decbin(0x88)\n    ],\n   '0' === decbin((0b11110000 & 0b1111) << 18),\n   '10000000000000000' === decbin((0b10010000 & 0b111111) << 12),\n   '1101000000' === decbin((0b10001101 & 0b111111) << 6),\n   '1000' === decbin(0b10001000 & 0b111111)\n);\n\n\n\u30c6\u30b9\u30c8\n0 \u304b\u3089 0x10FFFF \u307e\u3067\u306e\u6574\u6570\u304b\u3089\u751f\u6210\u3057\u305f\u6587\u5b57\u3092\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u5143\u306e\u6574\u6570\u3068\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\ntest('utf8_ord');\n\nfunction test(callable $callable) {\n\n    for ($i = 0; $i < 0x110000; ++$i) {\n\n        if ($i > 0xD7FF && $i < 0xE000) {\n            continue;\n        }\n\n        $char = utf8_chr($i);\n        $cp = $callable($char);\n\n        if ($cp !== $i) {\n            $hex = strtoupper(dechex($i));\n            echo 'U+',\n                $i < 0x10000 ? str_repeat('0', 4 - strlen($hex)) : '',\n                $hex, PHP_EOL;\n        }\n\n    }\n}\n\nfunction utf8_chr($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    return mb_decode_numericentity('&#'.$cp.';', [0, 0x10FFFF, 0, 0x11FFFF], 'UTF-8');\n}\n\n\n\u7c21\u6613\u30d9\u30f3\u30c1\u30de\u30fc\u30af\nord \u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u304c\u3082\u3063\u3068\u3082\u901f\u304f\u3001\u6b21\u70b9\u304c IntlCodePointBreakIterator \u3067\u3057\u305f\u3002transliterator_transliterate \u306f\u4e00\u6841\u9045\u3044\u306e\u3067\u3001\u904b\u7528\u74b0\u5883\u3067\u4f7f\u308f\u306a\u3044\u307b\u3046\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\narray(7) {\n  [\"ord\"]=>\n  float(0.21411490440369)\n  [\"IntlCodePointBreakIterator\"]=>\n  float(0.2562141418457)\n  [\"json_encode\"]=>\n  float(0.30807304382324)\n  [\"mb_encode_numericentity\"]=>\n  float(0.394446849823)\n  [\"mb_convert_encoding\"]=>\n  float(0.60804796218872)\n  [\"UConverter::transcode\"]=>\n  float(1.3823528289795)\n  [\"transliterator_transliterate\"]=>\n  float(6.6276679039001)\n}\n\n$ret = [\n  'IntlCodePointBreakIterator' => timer(function() {\n    utf8_ord(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'mb_convert_encoding' => timer(function() {\n    utf8_ord2(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'UConverter::transcode' => timer(function() {\n    utf8_ord3(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'mb_encode_numericentity' => timer(function() {\n    utf8_ord4(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'json_encode' => timer(function() {\n    utf8_ord5(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'transliterator_transliterate' => timer(function() {\n    utf8_ord6(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'ord' => timer(function() {\n    utf8_ord7(\"\\xF4\\x8F\\xBF\\xBF\");\n  })\n];\n\nasort($ret);\nvar_dump($ret);\n\nfunction timer(callable $callable, $repeat = 100000) {\n\n    if (!is_int($repeat)) {\n        exit(\"$repeat is not integer\");\n    }\n\n    if ($repeat < 0) {\n        exit(\"$repeat is not positive integer\");\n    }\n\n    $start = microtime(true);\n\n    do {\n        $callable();\n    } while($repeat -= 1);\n\n    $stop = microtime(true);\n\n    return  $stop - $start;\n}\n\n\u6587\u5b57\u306e Unicode \u30d7\u30ed\u30d1\u30c6\u30a3\u3084\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u691c\u7d22\u3067\u8abf\u3079\u308b\u969b\u306b\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002PHP 5.5 \u3067 intl \u62e1\u5f35\u30e2\u30b8\u30e5\u30fc\u30eb\u306b `IntlCodePointBreakIterator` \u304c\u8ffd\u52a0\u3055\u308c\u3001\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u6c42\u3081\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n## \u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\n\n\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u8abf\u3079\u308b\u306b\u306f\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u306e\u305f\u3081\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059\u3002Ruby \u306e\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```bash\nruby -e 'puts ARGV[0].ord.to_s(16).upcase' \u3042\n```\n\n\u5c11\u3057\u4fee\u6b63\u3059\u308c\u3070\u3001\u6587\u5b57\u5217\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```bash\nruby -e 'ARGV[0].each_char {|c| puts c.ord.to_s(16).upcase }' \u3042\u3044\u3046\u3048\u304a\n```\n\nPHP \u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u3084\u3063\u3066\u307f\u3088\u3046\u3002IntlCodePointBreakIterator \u3092\u4f7f\u3046\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```bash\nphp -r '$it = IntlCodePointBreakIterator::createCodePointInstance(); $it->setText($argv[1]); while ($it->next() !== IntlCodePointBreakIterator::DONE) echo dechex($it->getLastCodePoint()), PHP_EOL;\n;' \u3042\u3044\u3046\u3048\u304a\n```\n\n## \u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u5217\u306e\u6271\u3044\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f IntlCodePointBreakIterator \u306b\u306a\u3089\u3044\u3001\u4ee3\u66ff\u6587\u5b57 (U+FFFD) \u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u3042\u308b 0xFFFD \u3092\u8fd4\u3059\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u30a8\u30e9\u30fc\u3084\u4f8b\u5916\u3067\u51e6\u7406\u3092\u505c\u6b62\u3055\u305b\u308b\u9078\u629e\u80a2\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u6bce\u56de\u3001\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u5217\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3001\u4e0d\u4fbf\u3067\u3059\u3002\n\n## mb_ord\n\nPHP 7.2 \u3067\u5c0e\u5165\u3055\u308c\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n## IntlChar::ord\n\nPHP 7 \u3067\u306f `IntlChar::ord` \u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## IntlCodePointBreakIterator\n\ncreateCodePointInstance \u30e1\u30bd\u30c3\u30c9\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```php\nfunction utf8_ord($char) {\n    $it = IntlCodePointBreakIterator::createCodePointInstance();\n    $it->setText($char);\n    $it->next();\n\n    return $it->getLastCodePoint();\n}\n```\n\n## UTF-32 \u3078\u306e\u5909\u63db\n\nmb_convert_encoding \u3082\u3057\u304f\u306f UConverter::transcode \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```php\nfunction utf8_ord2($char) {\n\n    $char = mb_substr($char, 0, 1, 'UTF-8');\n\n    if ($char !== mb_convert_encoding($char, 'UTF-8', 'UTF-8')) {\n        return 0xFFFD;\n    }\n\n    $ret = mb_convert_encoding($char, 'UTF-32BE', 'UTF-8');\n    return hexdec(bin2hex($ret));\n}\n\nfunction utf8_ord3($char) {\n    $it = IntlBreakIterator::createCharacterInstance('en_US.UTF-8');\n    $it->setText($char);\n    $pos = $it->next();\n    $char = substr($char, 0, $pos);\n    $ret = UConverter::transcode($char, 'UTF32_BigEndian', 'UTF8');\n\n    return $ret !== '' ? (int) hexdec(bin2hex($ret)) : 0xFFFD;\n}\n```\n\n## HTML \u6570\u5024\u6587\u5b57\u53c2\u7167\n\n`mb_encode_numericentity` \u3092\u4f7f\u3044\u307e\u3059\u3002`mb_convert_encoding` \u3067 `UTF-8` \u304b\u3089 `HTML-ENTITIES` \u306b\u5909\u63db\u3059\u308b\u5834\u5408\u3001\u6587\u5b57\u5b9f\u4f53\u53c2\u7167\u306b\u5909\u63db\u3055\u308c\u308b\u6587\u5b57\u304c\u591a\u3044\u306e\u3067\u3001\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u6c42\u3081\u308b\u7528\u9014\u306b\u306f\u4e0d\u5411\u304d\u3067\u3059\u3002\n\n```php\nfunction utf8_ord4($char) {\n\n    $char = mb_substr($char, 0, 1, 'UTF-8');\n\n    $ret = mb_encode_numericentity($char, [0, 0x10FFFF, 0, 0xFFFFFF], 'UTF-8', true);\n\n    if ($ret === '?') {\n        return 0xFFFD;\n    }\n\n    $ret = substr($ret, 3, strlen($ret) - 4);\n\n    return (int) hexdec($ret);\n}\n```\n\n## Unicode \u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\n\n`json_encode` \u3082\u3057\u304f\u306f `transliterator_transliterate` \u3092\u4f7f\u3044\u307e\u3059\u3002`json_encode` \u306e\u5834\u5408\u3001\u5236\u5fa1\u6587\u5b57\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306b\u3064\u3044\u3066\u5834\u5408\u308f\u3051\u3092\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u304c\u3081\u3093\u3069\u3046\u3067\u3059\u3002\n\n```php\n\nfunction utf8_ord5($char) {\n    $c = htmlspecialchars_decode(htmlspecialchars($char, ENT_COMPAT, 'UTF-8'));\n\n    if ($c !== $char) {\n        return 0xFFFD;\n    }\n\n    $json = json_encode($c);\n    $head = substr($json, 1, 2);\n\n    if ('\\b' === $head) {\n        return 0x8;\n    } else if ('\\t' === $head) {\n        return 0x9;\n    } else if ('\\n' === $head) {\n        return 0xA;\n    } else if ('\\f' === $head) {\n        return 0xC;\n    } else if ('\\r' === $head) {\n        return 0xD;\n    } else if ('\\\"' === $head) {\n        return 0x22;\n    } else if ('\\/' === $head) {\n        return 0x2F;\n    } else if ('\\u' !== $head) {\n        return ord($json[1]);\n    }\n\n    $lead = hexdec(substr($json, 3, 4));\n\n    if (0xD7FF < $lead && $lead < 0xDC00) {\n        $trail = hexdec(substr($json, 9, 4));\n        return  (($lead & 0x3FF) << 10) + ($trail & 0x3FF) + 0x10000;\n    }\n\n    return $lead;\n}\n```\n\n```php\nfunction utf8_ord6($char) {\n    $ret =  transliterator_transliterate(\"Any-Hex/Java\", $char);\n\n    if ($ret === false) {\n        return 0xFFFD;\n    }\n\n    $lead = hexdec(substr($ret, 2, 4));\n\n    if ($lead > 0xD7FF && $lead < 0xDC00) {\n        $trail = hexdec(substr($ret, 8, 4));\n\n        return  (($lead & 0x3FF) << 10) + ($trail & 0x3FF) + 0x10000;\n    }\n\n    return $lead;\n}\n```\n\n## \u30d3\u30c3\u30c8\u6f14\u7b97\u3068 ord\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6539\u5584\u306e\u305f\u3081\u306b\u4e0d\u6b63\u306a\u30d0\u30a4\u30c8\u5217\u306e\u691c\u51fa\u306b\u306f `htmlspecialchars` \u3092\u5229\u7528\u3057\u307e\u3059\u3002Unicode Standard \u306e[3\u7ae0](http://www.unicode.org/versions/Unicode7.0.0/ch03.pdf)\u306b\u30d3\u30c3\u30c8\u306e\u5206\u5e03\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059 (\u30c6\u30fc\u30d6\u30eb 3-6)\u3002\n\n|\u30b9\u30ab\u30e9\u30fc\u5024|\u7b2c1\u30d0\u30a4\u30c8|\u7b2c2\u30d0\u30a4\u30c8|\u7b2c3\u30d0\u30a4\u30c8|\u7b2c4\u30d0\u30a4\u30c8| \n|:---------------------------|---------:|:--------:|---------:|---------:|\n|          00000000 0xxxxxxx | 0xxxxxxx |          |          |          |\n|          00000yyy yyxxxxxx | 110yyyyy | 10xxxxxx |          |          |\n|          zzzzyyyy yyxxxxxx | 1110zzzz | 10yyyyyy | 10xxxxxx |          |\n| 000uuuuu zzzzyyyy yyxxxxxx | 11110uuu | 10uuzzzz | 10yyyyyy | 10xxxxxx |\n\n```php\nvar_dump(\n    0x0024 === utf8_ord7('$'),\n    0x00A2 === utf8_ord7('\u00a2'),\n    0x20AC === utf8_ord7('\u20ac'),\n    0x10348 === utf8_ord7('?')\n);\n\nfunction utf8_ord7($char) {\n\n    if ($char !== htmlspecialchars_decode(htmlspecialchars($char, ENT_COMPAT, 'UTF-8'))) {\n        return 0xFFFD;\n    }\n\n    $x = ord($char[0]);\n\n    if ($x < 0x80) {\n        return $x;\n    } else if ($x < 0xE0) {\n\n        $y = ord($char[1]);\n\n        return (($x & 0x1F) << 6) | ($y & 0x3F);\n  \n    } else if ($x < 0xF0) {\n\n        $y = ord($char[1]);\n        $z = ord($char[2]);\n\n        return (($x & 0xF) << 12) | (($y & 0x3F) << 6) | ($z & 0x3F);\n    }\n\n    $y = ord($char[1]);\n    $z = ord($char[2]);\n    $w = ord($char[3]);\n        \n    return (($x & 0x7) << 18) | (($y & 0x3F) << 12) | (($z & 0x3F) << 6) | ($w & 0x3F);\n}\n```\n\n### \u30d3\u30c3\u30c8\u6f14\u7b97\u306e\u8a08\u7b97\u904e\u7a0b\n\n\u8a08\u7b97\u904e\u7a0b\u3092\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u306b\u4f7f\u3046\u6570\u5024\u30922\u9032\u6570\u306b\u66f8\u304d\u63db\u3048\u305f\u3082\u306e\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```php\nfunction utf8_ord8($char) {\n\n    if ($char !== htmlspecialchars_decode(htmlspecialchars($char, ENT_COMPAT, 'UTF-8'))) {\n        return 0xFFFD;\n    }\n\n    $x = ord($char[0]);\n\n    if ($x < 0x80) {\n        return $x;\n    } else if ($x < 0xE0) {\n\n        $y = ord($char[1]);\n\n        return (($x & 0b11111) << 6) + ($y & 0b111111);\n\n    } else if ($x < 0xF0) {\n\n        $y = ord($char[1]);\n        $z = ord($char[2]);\n\n        return (($x & 0b1111) << 12) + (($y & 0b111111) << 6) + ($z & 0b111111);\n    }\n\n    $y = ord($char[1]);\n    $z = ord($char[2]);\n    $w = ord($char[3]);\n\n    return (($x & 0b1111) << 18) + (($y & 0b111111) << 12) + (($z & 0b111111) << 6) + ($w & 0b111111);\n}\n```\n\nWikipedia \u306e [UTF-8](http://en.wikipedia.org/wiki/UTF-8#Examples) \u306e\u8a18\u4e8b\u306b\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u30d0\u30a4\u30c8\u5217\u306e\u95a2\u4fc2\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n![UTF-8 \u306e\u4f8b](https://qiita-image-store.s3.amazonaws.com/0/349/fe3fa119-dffd-a546-c220-8e5dfb52890c.png)\n\n4\u30d0\u30a4\u30c8\u6587\u5b57\u306e U+10348 \u3067\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```php\n$cp = 0x10348;\n$char = \"\\xF0\\x90\\x8D\\x88\";\n\nvar_dump(\n    '10000001101001000' === decbin($cp),\n    [\n        '11110000' === decbin(0xF0),\n        '10010000' === decbin(0x90),\n        '10001101' === decbin(0x8D),\n        '10001000' === decbin(0x88)\n    ],\n   '0' === decbin((0b11110000 & 0b1111) << 18),\n   '10000000000000000' === decbin((0b10010000 & 0b111111) << 12),\n   '1101000000' === decbin((0b10001101 & 0b111111) << 6),\n   '1000' === decbin(0b10001000 & 0b111111)\n);\n```\n\n## \u30c6\u30b9\u30c8\n\n`0` \u304b\u3089 `0x10FFFF` \u307e\u3067\u306e\u6574\u6570\u304b\u3089\u751f\u6210\u3057\u305f\u6587\u5b57\u3092\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5909\u63db\u3057\u3066\u3001\u5143\u306e\u6574\u6570\u3068\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```php\ntest('utf8_ord');\n\nfunction test(callable $callable) {\n\n    for ($i = 0; $i < 0x110000; ++$i) {\n\n        if ($i > 0xD7FF && $i < 0xE000) {\n            continue;\n        }\n\n        $char = utf8_chr($i);\n        $cp = $callable($char);\n\n        if ($cp !== $i) {\n            $hex = strtoupper(dechex($i));\n            echo 'U+',\n                $i < 0x10000 ? str_repeat('0', 4 - strlen($hex)) : '',\n                $hex, PHP_EOL;\n        }\n\n    }\n}\n\nfunction utf8_chr($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    return mb_decode_numericentity('&#'.$cp.';', [0, 0x10FFFF, 0, 0x11FFFF], 'UTF-8');\n}\n```\n\n## \u7c21\u6613\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\n`ord` \u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u304c\u3082\u3063\u3068\u3082\u901f\u304f\u3001\u6b21\u70b9\u304c `IntlCodePointBreakIterator` \u3067\u3057\u305f\u3002`transliterator_transliterate` \u306f\u4e00\u6841\u9045\u3044\u306e\u3067\u3001\u904b\u7528\u74b0\u5883\u3067\u4f7f\u308f\u306a\u3044\u307b\u3046\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n```php\narray(7) {\n  [\"ord\"]=>\n  float(0.21411490440369)\n  [\"IntlCodePointBreakIterator\"]=>\n  float(0.2562141418457)\n  [\"json_encode\"]=>\n  float(0.30807304382324)\n  [\"mb_encode_numericentity\"]=>\n  float(0.394446849823)\n  [\"mb_convert_encoding\"]=>\n  float(0.60804796218872)\n  [\"UConverter::transcode\"]=>\n  float(1.3823528289795)\n  [\"transliterator_transliterate\"]=>\n  float(6.6276679039001)\n}\n```\n\n\n```php\n$ret = [\n  'IntlCodePointBreakIterator' => timer(function() {\n    utf8_ord(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'mb_convert_encoding' => timer(function() {\n    utf8_ord2(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'UConverter::transcode' => timer(function() {\n    utf8_ord3(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'mb_encode_numericentity' => timer(function() {\n    utf8_ord4(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'json_encode' => timer(function() {\n    utf8_ord5(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'transliterator_transliterate' => timer(function() {\n    utf8_ord6(\"\\xF4\\x8F\\xBF\\xBF\");\n  }),\n  'ord' => timer(function() {\n    utf8_ord7(\"\\xF4\\x8F\\xBF\\xBF\");\n  })\n];\n\nasort($ret);\nvar_dump($ret);\n\nfunction timer(callable $callable, $repeat = 100000) {\n\n    if (!is_int($repeat)) {\n        exit(\"$repeat is not integer\");\n    }\n\n    if ($repeat < 0) {\n        exit(\"$repeat is not positive integer\");\n    }\n\n    $start = microtime(true);\n\n    do {\n        $callable();\n    } while($repeat -= 1);\n\n    $stop = microtime(true);\n\n    return  $stop - $start;\n}\n```\n", "tags": ["PHP", "unicode"]}