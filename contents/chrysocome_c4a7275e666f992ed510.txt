{"tags": ["Java", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "NLP"], "context": "Java\u3067neologd\u306e\u8f9e\u66f8\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306fMaven\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u306e\u3092\u5229\u7528\u3059\u308b\u306e\u304c\u624b\u3063\u53d6\u308a\u65e9\u305d\u3046\u3002\n\nbuild.gradle\ndependencies {\n    compile(\"org.codelibs:lucene-analyzers-kuromoji-ipadic-neologd:5.4.1-20160218\")\n}\n\nrepositories {\n    mavenCentral()\n    maven {\n        url \"http://maven.codelibs.org\"\n    }\n}\n\n\n\nKuromojiNeologdTest.java\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.Set;\n\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.analysis.tokenattributes.CharTermAttribute;\nimport org.apache.lucene.analysis.util.CharArraySet;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.JapaneseAnalyzer;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.JapaneseTokenizer;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.JapaneseTokenizer.Mode;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.dict.UserDictionary;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.tokenattributes.BaseFormAttribute;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.tokenattributes.ReadingAttribute;\n\npublic class KuromojiNeologdTest {\n\n    public static void main(String[] args) {\n        String[] sentences = new String[] {\n                \"\u3059\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u306e\u3046\u3061\",\n                \"\u304d\u3083\u308a\u30fc\u3071\u307f\u3085\u3071\u307f\u3085\u3082\u30b2\u30b9\u306e\u6975\u307f\u4e59\u5973\u3002\u3082\u30e2\u30fc\u30cb\u30f3\u30b0\u5a18\u3002\u3082\u554f\u984c\u306a\u304f\u5206\u5272\u3067\u304d\u307e\u3059\u3002\"\n            };\n        for (String sentence : sentences) {\n            System.out.println(\"* \" + sentence);\n            tokenize(sentence);\n            System.out.println(\"\");\n        }\n    }\n\n    private static void tokenize(Reader reader) {\n        UserDictionary userDict = null;\n        Mode mode = JapaneseTokenizer.Mode.NORMAL;\n        CharArraySet stopSet = JapaneseAnalyzer.getDefaultStopSet();\n        Set<String> stopTags = JapaneseAnalyzer.getDefaultStopTags();\n\n        try (JapaneseAnalyzer analyzer = new JapaneseAnalyzer(userDict, mode, stopSet, stopTags);\n            TokenStream tokenStream = analyzer.tokenStream(\"\", reader) ) {\n\n            BaseFormAttribute baseAttr = tokenStream.addAttribute(BaseFormAttribute.class);\n            CharTermAttribute charAttr = tokenStream.addAttribute(CharTermAttribute.class);\n            PartOfSpeechAttribute posAttr = tokenStream.addAttribute(PartOfSpeechAttribute.class);\n            ReadingAttribute readAttr = tokenStream.addAttribute(ReadingAttribute.class);\n\n            tokenStream.reset();\n            while (tokenStream.incrementToken()) {\n                String text = charAttr.toString();                // \u5358\u8a9e\n                String baseForm = baseAttr.getBaseForm();       // \u539f\u578b\n                String reading = readAttr.getReading();         // \u8aad\u307f\n                String partOfSpeech = posAttr.getPartOfSpeech();    // \u54c1\u8a5e\n\n                System.out.println(text + \"\\t|\\t\" + baseForm + \"\\t|\\t\" + reading + \"\\t|\\t\" + partOfSpeech);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void tokenize(String src) {\n        tokenize(new StringReader(src));\n    }\n}\n\n\n\n\u51fa\u529b\n* \u3059\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u306e\u3046\u3061\n\u3059\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u306e\u3046\u3061    |   null    |   \u30b9\u30e2\u30e2\u30e2\u30e2\u30e2\u30e2\u30e2\u30e2\u30ce\u30a6\u30c1    |   \u540d\u8a5e-\u56fa\u6709\u540d\u8a5e-\u4e00\u822c\n\n* \u304d\u3083\u308a\u30fc\u3071\u307f\u3085\u3071\u307f\u3085\u3082\u30b2\u30b9\u306e\u6975\u307f\u4e59\u5973\u3002\u3082\u30e2\u30fc\u30cb\u30f3\u30b0\u5a18\u3002\u3082\u554f\u984c\u306a\u304f\u5206\u5272\u3067\u304d\u307e\u3059\u3002\n\u304d\u3083\u308a\u30fc\u3071\u307f\u3085\u3071\u307f\u3085  |   null    |   \u30ad\u30e3\u30ea\u30fc\u30d1\u30df\u30e5\u30d1\u30df\u30e5  |   \u540d\u8a5e-\u56fa\u6709\u540d\u8a5e-\u4e00\u822c\n\u30b2\u30b9\u306e\u6975\u307f\u4e59\u5973\u3002    |   null    |   \u30b2\u30b9\u30ce\u30ad\u30ef\u30df\u30aa\u30c8\u30e1 |   \u540d\u8a5e-\u56fa\u6709\u540d\u8a5e-\u4e00\u822c\n\u30e2\u30fc\u30cb\u30f3\u30b0\u5a18\u3002   |   null    |   \u30e2\u30fc\u30cb\u30f3\u30b0\u30e0\u30b9\u30e1    |   \u540d\u8a5e-\u56fa\u6709\u540d\u8a5e-\u4e00\u822c\n\u554f\u984c  |   null    |   \u30e2\u30f3\u30c0\u30a4    |   \u540d\u8a5e-\u30ca\u30a4\u5f62\u5bb9\u8a5e\u8a9e\u5e79\n\u5206\u5272  |   null    |   \u30d6\u30f3\u30ab\u30c4    |   \u540d\u8a5e-\u30b5\u5909\u63a5\u7d9a\n\n\n\u6700\u65b0\u7248\u306e\u8f9e\u66f8\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u30d3\u30eb\u30c9\u3059\u308b\u3002\n\nkazuhira-r/kuromoji-with-mecab-neologd-buildscript: This script to build a Lucene and Atilika Kuromoji with bundled mecab-xxxxx-neologd\n\n\n\u53c2\u8003\nCodeLibs Lucene Kuromoji\uff0bmecab-ipadic-NEologd\u3092\u4f7f\u3046\n\nJava\u3067[neologd](https://github.com/neologd/mecab-ipadic-neologd)\u306e\u8f9e\u66f8\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f[Maven\u30ea\u30dd\u30b8\u30c8\u30ea](http://maven.codelibs.org/org/codelibs/lucene-analyzers-kuromoji-ipadic-neologd/)\u306b\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u306e\u3092\u5229\u7528\u3059\u308b\u306e\u304c\u624b\u3063\u53d6\u308a\u65e9\u305d\u3046\u3002\n\n```groovy:build.gradle\ndependencies {\n    compile(\"org.codelibs:lucene-analyzers-kuromoji-ipadic-neologd:5.4.1-20160218\")\n}\n\nrepositories {\n    mavenCentral()\n    maven {\n        url \"http://maven.codelibs.org\"\n    }\n}\n```\n\n```java:KuromojiNeologdTest.java\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.util.Set;\n\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.analysis.tokenattributes.CharTermAttribute;\nimport org.apache.lucene.analysis.util.CharArraySet;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.JapaneseAnalyzer;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.JapaneseTokenizer;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.JapaneseTokenizer.Mode;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.dict.UserDictionary;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.tokenattributes.BaseFormAttribute;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.tokenattributes.PartOfSpeechAttribute;\nimport org.codelibs.neologd.ipadic.lucene.analysis.ja.tokenattributes.ReadingAttribute;\n\npublic class KuromojiNeologdTest {\n\n\tpublic static void main(String[] args) {\n\t\tString[] sentences = new String[] {\n                \"\u3059\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u306e\u3046\u3061\",\n\t\t\t\t\"\u304d\u3083\u308a\u30fc\u3071\u307f\u3085\u3071\u307f\u3085\u3082\u30b2\u30b9\u306e\u6975\u307f\u4e59\u5973\u3002\u3082\u30e2\u30fc\u30cb\u30f3\u30b0\u5a18\u3002\u3082\u554f\u984c\u306a\u304f\u5206\u5272\u3067\u304d\u307e\u3059\u3002\"\n\t\t\t};\n\t\tfor (String sentence : sentences) {\n\t\t\tSystem.out.println(\"* \" + sentence);\n\t\t\ttokenize(sentence);\n\t\t\tSystem.out.println(\"\");\n\t\t}\n\t}\n\n\tprivate static void tokenize(Reader reader) {\n\t\tUserDictionary userDict = null;\n\t\tMode mode = JapaneseTokenizer.Mode.NORMAL;\n\t\tCharArraySet stopSet = JapaneseAnalyzer.getDefaultStopSet();\n\t\tSet<String> stopTags = JapaneseAnalyzer.getDefaultStopTags();\n\n\t\ttry (JapaneseAnalyzer analyzer = new JapaneseAnalyzer(userDict, mode, stopSet, stopTags);\n\t\t\tTokenStream tokenStream = analyzer.tokenStream(\"\", reader) ) {\n\t\t\t\n\t\t\tBaseFormAttribute baseAttr = tokenStream.addAttribute(BaseFormAttribute.class);\n\t\t\tCharTermAttribute charAttr = tokenStream.addAttribute(CharTermAttribute.class);\n\t\t\tPartOfSpeechAttribute posAttr = tokenStream.addAttribute(PartOfSpeechAttribute.class);\n\t\t\tReadingAttribute readAttr = tokenStream.addAttribute(ReadingAttribute.class);\n\n\t\t\ttokenStream.reset();\n\t\t\twhile (tokenStream.incrementToken()) {\n\t\t\t\tString text = charAttr.toString();                // \u5358\u8a9e\n\t\t\t\tString baseForm = baseAttr.getBaseForm();\t    // \u539f\u578b\n\t\t\t\tString reading = readAttr.getReading();\t\t\t// \u8aad\u307f\n\t\t\t\tString partOfSpeech = posAttr.getPartOfSpeech();\t// \u54c1\u8a5e\n\t\t\t\t\n\t\t\t\tSystem.out.println(text + \"\\t|\\t\" + baseForm + \"\\t|\\t\" + reading + \"\\t|\\t\" + partOfSpeech);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n    private static void tokenize(String src) {\n    \ttokenize(new StringReader(src));\n    }\n}\n```\n\n```text:\u51fa\u529b\n* \u3059\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u306e\u3046\u3061\n\u3059\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u3082\u306e\u3046\u3061\t|\tnull\t|\t\u30b9\u30e2\u30e2\u30e2\u30e2\u30e2\u30e2\u30e2\u30e2\u30ce\u30a6\u30c1\t|\t\u540d\u8a5e-\u56fa\u6709\u540d\u8a5e-\u4e00\u822c\n\n* \u304d\u3083\u308a\u30fc\u3071\u307f\u3085\u3071\u307f\u3085\u3082\u30b2\u30b9\u306e\u6975\u307f\u4e59\u5973\u3002\u3082\u30e2\u30fc\u30cb\u30f3\u30b0\u5a18\u3002\u3082\u554f\u984c\u306a\u304f\u5206\u5272\u3067\u304d\u307e\u3059\u3002\n\u304d\u3083\u308a\u30fc\u3071\u307f\u3085\u3071\u307f\u3085\t|\tnull\t|\t\u30ad\u30e3\u30ea\u30fc\u30d1\u30df\u30e5\u30d1\u30df\u30e5\t|\t\u540d\u8a5e-\u56fa\u6709\u540d\u8a5e-\u4e00\u822c\n\u30b2\u30b9\u306e\u6975\u307f\u4e59\u5973\u3002\t|\tnull\t|\t\u30b2\u30b9\u30ce\u30ad\u30ef\u30df\u30aa\u30c8\u30e1\t|\t\u540d\u8a5e-\u56fa\u6709\u540d\u8a5e-\u4e00\u822c\n\u30e2\u30fc\u30cb\u30f3\u30b0\u5a18\u3002\t|\tnull\t|\t\u30e2\u30fc\u30cb\u30f3\u30b0\u30e0\u30b9\u30e1\t|\t\u540d\u8a5e-\u56fa\u6709\u540d\u8a5e-\u4e00\u822c\n\u554f\u984c\t|\tnull\t|\t\u30e2\u30f3\u30c0\u30a4\t|\t\u540d\u8a5e-\u30ca\u30a4\u5f62\u5bb9\u8a5e\u8a9e\u5e79\n\u5206\u5272\t|\tnull\t|\t\u30d6\u30f3\u30ab\u30c4\t|\t\u540d\u8a5e-\u30b5\u5909\u63a5\u7d9a\n```\n\n\u6700\u65b0\u7248\u306e\u8f9e\u66f8\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u30d3\u30eb\u30c9\u3059\u308b\u3002\n\n- [kazuhira-r/kuromoji-with-mecab-neologd-buildscript: This script to build a Lucene and Atilika Kuromoji with bundled mecab-xxxxx-neologd](https://github.com/kazuhira-r/kuromoji-with-mecab-neologd-buildscript)\n\n#### \u53c2\u8003\n[CodeLibs Lucene Kuromoji\uff0bmecab-ipadic-NEologd\u3092\u4f7f\u3046](http://d.hatena.ne.jp/Kazuhira/20160128/1453991406)\n"}