{"context": " More than 1 year has passed since last update.\u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30b9\u30da\u30fc\u30b9\u5165\u529b\u3067\u7d42\u4e86\u3001'c'\u3067\u7bb1\u3092\u8ffd\u52a0\u3059\u308b\n\u30de\u30a6\u30b9\u306e\u5de6\u30af\u30ea\u30c3\u30af\u3067\u7bb1\u306e\u9078\u629e\u3001\u30c9\u30e9\u30c3\u30b0\u3067\u7bb1\u306e\u79fb\u52d5\u3001\u53f3\u30af\u30ea\u30c3\u30af\u3067\u9078\u629e\u89e3\u9664\u3001\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u3067\u7bb1\u306e\u8272\u3092\u5909\u66f4\u3059\u308b\n\u52d5\u753b\u30ea\u30b9\u30c8\uff1aLWJGL\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\u52d5\u753b\u306f\u30b3\u30b3\n\nDisplayTest.groovy\npackage episode004\n\nimport groovy.swing.SwingBuilder\nimport processing.core.PApplet\n\nimport javax.swing.*\nimport java.awt.event.MouseWheelListener\n\nclass DisplayTest extends PApplet {\n\n    def shapes = []\n    def somethingIsSelected = false\n    def volatile randomColorCooldown = false\n\n    def void setup() {\n        frameRate(60)\n\n        addMouseWheelListener({ mwe ->\n            mouseWheel(mwe.wheelRotation)\n        } as MouseWheelListener)\n\n        shapes << new Box(this, 15, 15)\n        shapes << new Box(this, 100, 150)\n    }\n\n    def void draw() {\n        background(0, 0, 0)\n\n        shapes.each { box ->\n            if (box.selected) {\n                box.update(mouseX - pmouseX, mouseY - pmouseY)\n            }\n            box.draw()\n        }\n    }\n\n    def void keyPressed() {\n        switch (key) {\n            case ' ':\n                System.exit(0)\n                break\n            case 'c':\n                shapes << new Box(this, 15, 15)\n                break\n        }\n    }\n\n    def void mouseClicked() {\n        shapes.each { box ->\n            selectedBoxUpdate(box)\n        }\n    }\n\n    def void mouseDragged() {\n        shapes.each { box ->\n            selectedBoxUpdate(box)\n        }\n    }\n\n    def mouseWheel(delta) {\n        shapes.each { box ->\n            if (box.inBounds(mouseX, mouseY) && !somethingIsSelected) {\n                box.randomizeColors()\n                randomColorCooldown = true\n                new Thread({\n                    Thread.sleep(200)\n                    randomColorCooldown = false\n                } as Runnable).run()\n            }\n        }\n    }\n\n    def selectedBoxUpdate(box) {\n        switch (mouseButton) {\n            case LEFT:\n                if (box.inBounds(mouseX, mouseY) && !somethingIsSelected) {\n                    somethingIsSelected = true\n                    box.selected = true\n                }\n                break\n            case RIGHT:\n                somethingIsSelected = false\n                box.selected = false\n                break\n        }\n    }\n\n    def static void main(args) {\n        def display = new DisplayTest()\n        new SwingBuilder().frame(\n                title: 'Episode 4',\n                defaultCloseOperation: JFrame.EXIT_ON_CLOSE,\n                size: [640, 480], show: true) {\n            widget(display)\n        }\n        display.init()\n    }\n}\n\nclass Box {\n    def x, y\n    def selected = false\n    def colorRed,  colorBlue, colorGreen\n    def display\n\n    def Box(display, x, y) {\n        this.display = display\n        this.x = x\n        this.y = y\n\n        def randomGenerator = new Random()\n        colorRed = randomGenerator.nextInt(256)\n        colorBlue = randomGenerator.nextInt(256)\n        colorGreen = randomGenerator.nextInt(256)\n    }\n\n    def inBounds(mouseX, mouseY) {\n        mouseX > x && mouseX < x + 50 && mouseY > y && mouseY < y + 50\n    }\n\n    def update(dx, dy) {\n        x += dx\n        y += dy\n    }\n\n    def randomizeColors() {\n        def randomGenerator = new Random()\n        colorRed = randomGenerator.nextInt(256)\n        colorBlue = randomGenerator.nextInt(256)\n        colorGreen = randomGenerator.nextInt(256)\n    }\n\n    def draw() {\n        display.with {\n            noStroke()\n            fill(colorRed, colorGreen, colorBlue)\n            rect(this.x, this.y, 50, 50)\n        }\n    }\n}\n\n\n\n\u30ad\u30fc\u30dc\u30fc\u30c9\u304b\u3089\u30b9\u30da\u30fc\u30b9\u5165\u529b\u3067\u7d42\u4e86\u3001'c'\u3067\u7bb1\u3092\u8ffd\u52a0\u3059\u308b\n\u30de\u30a6\u30b9\u306e\u5de6\u30af\u30ea\u30c3\u30af\u3067\u7bb1\u306e\u9078\u629e\u3001\u30c9\u30e9\u30c3\u30b0\u3067\u7bb1\u306e\u79fb\u52d5\u3001\u53f3\u30af\u30ea\u30c3\u30af\u3067\u9078\u629e\u89e3\u9664\u3001\u30db\u30a4\u30fc\u30eb\u306e\u56de\u8ee2\u3067\u7bb1\u306e\u8272\u3092\u5909\u66f4\u3059\u308b\n\n\u52d5\u753b\u30ea\u30b9\u30c8\uff1a[LWJGL\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](http://www.youtube.com/playlist?list=PL19F2453814E0E315)\n\u52d5\u753b\u306f[\u30b3\u30b3](http://www.youtube.com/watch?v=EjbOjio_pC4)\n\n```groovy:DisplayTest.groovy\npackage episode004\n\nimport groovy.swing.SwingBuilder\nimport processing.core.PApplet\n\nimport javax.swing.*\nimport java.awt.event.MouseWheelListener\n\nclass DisplayTest extends PApplet {\n\n    def shapes = []\n    def somethingIsSelected = false\n    def volatile randomColorCooldown = false\n\n    def void setup() {\n        frameRate(60)\n\n        addMouseWheelListener({ mwe ->\n            mouseWheel(mwe.wheelRotation)\n        } as MouseWheelListener)\n\n        shapes << new Box(this, 15, 15)\n        shapes << new Box(this, 100, 150)\n    }\n\n    def void draw() {\n        background(0, 0, 0)\n\n        shapes.each { box ->\n            if (box.selected) {\n                box.update(mouseX - pmouseX, mouseY - pmouseY)\n            }\n            box.draw()\n        }\n    }\n\n    def void keyPressed() {\n        switch (key) {\n            case ' ':\n                System.exit(0)\n                break\n            case 'c':\n                shapes << new Box(this, 15, 15)\n                break\n        }\n    }\n\n    def void mouseClicked() {\n        shapes.each { box ->\n            selectedBoxUpdate(box)\n        }\n    }\n\n    def void mouseDragged() {\n        shapes.each { box ->\n            selectedBoxUpdate(box)\n        }\n    }\n\n    def mouseWheel(delta) {\n        shapes.each { box ->\n            if (box.inBounds(mouseX, mouseY) && !somethingIsSelected) {\n                box.randomizeColors()\n                randomColorCooldown = true\n                new Thread({\n                    Thread.sleep(200)\n                    randomColorCooldown = false\n                } as Runnable).run()\n            }\n        }\n    }\n\n    def selectedBoxUpdate(box) {\n        switch (mouseButton) {\n            case LEFT:\n                if (box.inBounds(mouseX, mouseY) && !somethingIsSelected) {\n                    somethingIsSelected = true\n                    box.selected = true\n                }\n                break\n            case RIGHT:\n                somethingIsSelected = false\n                box.selected = false\n                break\n        }\n    }\n\n    def static void main(args) {\n        def display = new DisplayTest()\n        new SwingBuilder().frame(\n                title: 'Episode 4',\n                defaultCloseOperation: JFrame.EXIT_ON_CLOSE,\n                size: [640, 480], show: true) {\n            widget(display)\n        }\n        display.init()\n    }\n}\n\nclass Box {\n    def x, y\n    def selected = false\n    def colorRed,  colorBlue, colorGreen\n    def display\n\n    def Box(display, x, y) {\n        this.display = display\n        this.x = x\n        this.y = y\n\n        def randomGenerator = new Random()\n        colorRed = randomGenerator.nextInt(256)\n        colorBlue = randomGenerator.nextInt(256)\n        colorGreen = randomGenerator.nextInt(256)\n    }\n\n    def inBounds(mouseX, mouseY) {\n        mouseX > x && mouseX < x + 50 && mouseY > y && mouseY < y + 50\n    }\n\n    def update(dx, dy) {\n        x += dx\n        y += dy\n    }\n\n    def randomizeColors() {\n        def randomGenerator = new Random()\n        colorRed = randomGenerator.nextInt(256)\n        colorBlue = randomGenerator.nextInt(256)\n        colorGreen = randomGenerator.nextInt(256)\n    }\n\n    def draw() {\n        display.with {\n            noStroke()\n            fill(colorRed, colorGreen, colorBlue)\n            rect(this.x, this.y, 50, 50)\n        }\n    }\n}\n```\n\n![grocessingGL004.png](https://qiita-image-store.s3.amazonaws.com/0/17179/03e2c920-0ebc-8acd-f734-7e64a0fefcdf.png)", "tags": ["Groovy2.1.7", "processing2.0.3"]}