{"context": "\n\n\u6a29\u9020\u3055\u3093\n\u5de6\u300c\u30d0\u30ab\u306a\u30c3\uff01\u300d\n\u5de6\u5229\u304d\u306f\u601d\u308f\u305a\u53eb\u3093\u3060\u3002\n\u898b\u305f\u3053\u3068\u3082\u306a\u3044\u307b\u3069\u306e\u305f\u3051\u306e\u3053\u306e\u8ecd\u52e2\u306b\u3001\u53cd\u5c04\u7684\u306b\u3001\u60b2\u9cf4\u306e\u3088\u3046\u306a\u53eb\u3073\u58f0\u3092\u4e0a\u3052\u3066\u3057\u307e\u3063\u305f\u306e\u3060\u3002\n\u30d7\u30ec\u30c3\u30c4\u30a7\u30eb\u304c\u30ac\u30af\u30ac\u30af\u3068\u9707\u3048\u3001\u6b69\u304f\u3053\u3068\u3082\u3067\u304d\u306a\u3044\u3002\n\u4e00\u6b69\u3001\u307e\u305f\u4e00\u6b69\u3068\u78ba\u5b9f\u306b\u8fd1\u3065\u3044\u3066\u304f\u308b\u305f\u3051\u306e\u3053\u306e\u8ecd\u52e2\u2026\u2026\n\u5de6\u5229\u304d\u306f\u3001\u3055\u3063\u304d\u307e\u3067\u81ea\u66b4\u81ea\u68c4\u306b\u306a\u3063\u3066\u3044\u305f\u3053\u3068\u3082\u5fd8\u308c\u3001\u305f\u3060\u305f\u3060\u6050\u6016\u306b\u8eab\u3092\u9707\u308f\u305b\u3066\u3044\u305f\u3002\n\u305f\u3051\u306e\u3053\u968a\u306e\u968a\u9577\u300c\u30e0\u30c3\uff01\uff1f\u300d\n\u8ecd\u52e2\u3092\u7387\u3044\u3066\u9663\u982d\u6307\u63ee\u306b\u7acb\u3063\u3066\u3044\u305f\u305f\u3051\u306e\u3053\u8ecd\u306e\u968a\u9577\u306f\u3001\u8349\u539f\u306e\u7247\u9685\u3067\u8170\u304c\u629c\u3051\u3066\u52d5\u3051\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u304d\u306e\u3053\u3092\u898b\u3064\u3051\u53f7\u4ee4\u3092\u639b\u3051\u305f\u3002\n\u968a\u9577\u300c\u5168\u8ecd\u3001\u6b62\u307e\u308c\uff01\u300d\nprecision mediump float;\nuniform vec2  resolution;\nuniform vec2  mouse;\nuniform float time;\nuniform sampler2D backbuffer;\n\nstruct Intersect{\n    float dist;\n    vec3  color;\n};\nconst float PI = 3.1415926;\nconst float PI2 = PI * 2.0;\nconst vec3 cColor = vec3(0.25, 0.1, 0.0);\nconst vec3 fColor = vec3(0.2, 0.7, 0.1);\nconst vec3 kColor = vec3(0.9, 0.8, 0.4);\n\nfloat waveline(vec2 p){\n    float f = smoothstep(0.975, 1.0, cos(p.x * 2.5) - (p.y * 2.5) - 0.75);\n    float g = smoothstep(0.975, 1.0, cos(p.x * PI + PI) - (p.y * 4.0) - 0.5);\n    float h = smoothstep(0.975, 1.0, cos(p.x * 2.5) - (p.y * 2.5) + 0.5);\n    return mix(mix(mix(0.0, 0.3, h), 0.4, g), 0.6, f);\n}\nfloat dChoco(vec3 p){\n    float e = 1.0 - p.y * 0.7;\n    float w = waveline(vec2(atan(p.z, p.x) / PI, p.y + 0.25)) * 0.15;\n    return length((p + vec3(0.0, -0.5, 0.0)) * vec3(e, 0.5, e)) + p.y - 0.5 + step(p.y, -1.2) - w;\n}\nfloat dFloor(vec3 p){\n    return dot(p, vec3(0.0, 1.0, 0.0)) + 1.5;\n}\nfloat dCylinder(vec3 p, vec2 r){\n    vec2 d = abs(vec2(length(p.xz), p.y)) - r;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - 0.25 + step(-1.0, p.y);\n}\nIntersect distanceHub(vec3 p){\n    vec3 q = vec3(0.0);\n    if(p.z < -6.0){\n        q = vec3(mod(p, 3.0) - 1.5);\n    }else{\n        q = p;\n    }\n    q = vec3(q.x, p.y, q.z);\n    float choco = dChoco(q);\n    float flor = dFloor(q);\n    float cylin = dCylinder(q, vec2(0.5, 2.0));\n    Intersect i;\n    i.dist = min(cylin, min(choco, flor));\n    i.color = cylin < min(choco, flor) ? kColor : choco < flor ? cColor : fColor;\n    return i;\n}\nvec3 genNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        distanceHub(p + vec3(  d, 0.0, 0.0)).dist - distanceHub(p + vec3( -d, 0.0, 0.0)).dist,\n        distanceHub(p + vec3(0.0,   d, 0.0)).dist - distanceHub(p + vec3(0.0,  -d, 0.0)).dist,\n        distanceHub(p + vec3(0.0, 0.0,   d)).dist - distanceHub(p + vec3(0.0, 0.0,  -d)).dist\n    ));\n}\n\nvoid main(){\n    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    vec3 cPos = vec3(0.0,  3.0, 12.0);\n    vec3 cDir = vec3(0.0,  0.0, -1.0);\n    vec3 cUp  = vec3(0.0,  1.0,  0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 2.0;\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n    float dist = 0.0;\n    float rLen = 0.0;\n    vec3  rPos = cPos;\n    Intersect intersect;\n    for(int i = 0; i < 512; ++i){\n        intersect = distanceHub(rPos);\n        rLen += intersect.dist * 0.3;\n        rPos = cPos + ray * rLen;\n    }\n\n    if(abs(intersect.dist) < 0.001){\n        float fog = smoothstep(0.0, 100.0, length(rPos - cPos));\n        vec3  normal = genNormal(rPos);\n        vec3  light = normalize(vec3(mouse + 2.0, 3.0));\n        float diff = max(dot(normal, light), 0.1);\n        vec3  eye = reflect(normalize(rPos - cPos), normal);\n        float speculer = clamp(dot(eye, light), 0.0, 1.0);\n        vec3 specColor = pow(speculer, 20.0) + cColor;\n        gl_FragColor = vec4(vec3(diff) * intersect.color + fog * vec3(3.0, 1.0, 0.8) + specColor, 1.0);\n    }else{\n        float s = 0.1 / length(p - vec2(0.0, 0.75));\n        gl_FragColor = vec4(vec3(1.0) - pow(min(s, 1.0), 2.0) * vec3(0.0, 0.65, 0.85), 1.0);\n    }\n}\n\n\uff08GLSL Editor \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u5b9f\u884c\u3057\u3066\u306d\uff01\uff09\n\n\u5de6\u300c\u3042\u2026\u2026\u3042\u3042\u3042\u3042\u2026\u2026\u300d\n\u968a\u9577\u300c\u306a\u3093\u3060\u8cb4\u69d8\u306f\uff1f \u8ecd\u4eba\u3067\u306f\u306a\u3055\u305d\u3046\u3060\u304c\u2026\u2026\u304d\u306e\u3053\u306e\u56fd\u306e\u4e00\u822c\u5e02\u6c11\u304b\u300d\n\u5de6\u5229\u304d\u306f\u6050\u6016\u306b\u9707\u3048\u8a00\u8449\u3092\u767a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305a\u306b\u3044\u305f\u3002\u5589\u304b\u3089\u51fa\u3066\u304f\u308b\u306e\u306f\u3001\u547b\u304d\u306e\u3088\u3046\u306a\u60c5\u3051\u306a\u3044\u58f0\u3070\u304b\u308a\u3060\u3002\n\u968a\u9577\u300c\u8ecd\u4eba\u3067\u306f\u306a\u3044\u304d\u306e\u3053\u3092\u624b\u306b\u639b\u3051\u308b\u306e\u306f\u6c17\u304c\u5f15\u3051\u308b\u306a\u3002\u304a\u3044\u8cb4\u69d8\u3001\u4eca\u3059\u3050\u3069\u3053\u304b\u3078\u6d88\u3048\u308b\u306e\u306a\u3089\u898b\u9003\u3057\u3066\u3084\u308b\u3002\u3055\u3063\u3055\u3068\u2026\u2026\u2026\u2026\u3080\uff1f\u300d\n\u968a\u9577\u306f\u9ad8\u5727\u7684\u306a\u558b\u308a\u65b9\u3067\u306a\u306b\u304b\u3092\u8a00\u3044\u304b\u3051\u3066\u3044\u305f\u304c\u3001\u5de6\u5229\u304d\u306e\u9854\u3092\u307e\u3058\u307e\u3058\u3068\u6b63\u9762\u304b\u3089\u898b\u3064\u3081\u305f\u3002\n\u968a\u9577\u300c\u8cb4\u69d8\u2026\u2026\u3069\u3053\u304b\u3067\u4ee5\u524d\u306b\u4f1a\u3063\u305f\u304b\uff1f\u300d\n\u5de6\u5229\u304d\u306f\u7a81\u7136\u306e\u554f\u3044\u304b\u3051\u306b\u3001\u306a\u3093\u3068\u304b\u58f0\u3092\u637b\u308a\u51fa\u3057\u3066\u7b54\u3048\u305f\u3002\n\u5de6\u300c\u3046\u2026\u2026\u306a\u3001\u306a\u3093\u306e\u3053\u3068\u3060\u3002\u304a\u2026\u2026\u304a\u308c\u306b\u306f\u305f\u3051\u306e\u3053\u306e\u77e5\u308a\u5408\u3044\u306a\u3069\u5c45\u306a\u3044\uff01\uff08\u304d\u306e\u3053\u306b\u3082\u53cb\u9054\u306f\u3044\u306a\u3044\u3051\u3069\u2026\u2026\uff09\u300d\n\u5de6\u5229\u304d\u306e\u3069\u3053\u304b\u60b2\u75db\u306a\u8a34\u3048\u3092\u805e\u3044\u3066\u3082\u3001\u305f\u3051\u306e\u3053\u968a\u9577\u306f\u8996\u7dda\u3092\u5de6\u5229\u304d\u306e\u9854\u304b\u3089\u305d\u3089\u3055\u306a\u3044\u3002\n\u968a\u9577\u300c\u3046\u30fc\u3080\u3001\u8cb4\u69d8\u3001\u7236\u89aa\u306e\u540d\u306f\u306a\u3093\u3068\u3044\u3046\u3002\u307e\u3055\u304b\u3068\u306f\u601d\u3046\u304c\u3001\u304a\u524d\u306e\u7236\u89aa\u306f\u300e\u305f\u3051\u306e\u3053\u72e9\u308a\u540d\u4eba\u306e\u6a29\u9020\u3055\u3093\u300f\u3067\u306f\u306a\u3044\u304b\uff1f\u300d\n\u305f\u3051\u306e\u3053\u72e9\u308a\u540d\u4eba\u306e\u6a29\u9020\u2015\u2015\n\u305d\u308c\u306f\u3001\u5927\u4e71\u306e\u82f1\u96c4\u3067\u3042\u308a\u3001\u5bfe\u305f\u3051\u306e\u3053\u6226\u306b\u304a\u3044\u3066\u7121\u6575\u306e\u5f37\u3055\u3092\u8a87\u3063\u305f\u3068\u8a00\u308f\u308c\u308b\u4f1d\u8aac\u306e\u6226\u58eb\u2026\u2026\u9593\u9055\u3044\u306a\u304f\u3001\u5de6\u5229\u304d\u306e\u5b9f\u306e\u7236\u306e\u540d\u3060\u3063\u305f\u3002\u7a81\u7136\u306b\u7236\u306e\u540d\u3092\u8a9e\u3089\u308c\u3001\u5de6\u5229\u304d\u306e\u9854\u306b\u306f\u9a5a\u304d\u306e\u8272\u304c\u3042\u308a\u3042\u308a\u3068\u6d6e\u304b\u3073\u4e0a\u304c\u308b\u3002\n\u968a\u9577\u300c\u3084\u306f\u308a\u2026\u2026\u3069\u3046\u308a\u3067\u3001\u3042\u306e\u7537\u306b\u4f3c\u3066\u3044\u308b\u306f\u305a\u3060\u2026\u2026\u300d\n\u305f\u3051\u306e\u3053\u968a\u9577\u306f\u3069\u3053\u304b\u3055\u307f\u3057\u3052\u306a\u3001\u9060\u3044\u76ee\u306b\u306a\u3063\u3066\u7d9a\u3051\u305f\u3002\n\u968a\u9577\u300c\u8cb4\u69d8\u500b\u4eba\u306b\u6068\u307f\u306f\u7121\u3044\u304c\u3001\u6a29\u9020\u3055\u3093\u306e\u5005\u306a\u3089\u3070\u3001\u3053\u3053\u3067\u6bba\u3057\u3066\u304a\u304b\u306a\u3051\u308c\u3070\u5f8c\u3005\u3084\u3063\u304b\u3044\u306a\u3053\u3068\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u3093\u3002\u899a\u609f\u3057\u3066\u3082\u3089\u304a\u3046\u300d\n\u5de6\u5229\u304d\u304c\u72b6\u6cc1\u3092\u628a\u63e1\u3067\u304d\u3066\u3044\u306a\u3044\u3046\u3061\u306b\u968a\u9577\u306f\u52dd\u624b\u306b\u8a71\u3092\u9032\u3081\u3066\u3044\u304f\uff01\nprecision mediump float;\nuniform vec2  resolution;\nuniform vec2  mouse;\nuniform float time;\nuniform sampler2D backbuffer;\n\nstruct Intersect{\n    float dist;\n    vec3  color;\n};\nconst float PI = 3.1415926;\nconst float PI2 = PI * 2.0;\nconst vec3 cColor = vec3(0.3, 0.1, 0.0);\nconst vec3 kColor = vec3(1.0, 0.8, 0.4);\n\nfloat rnd(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n    vec2 v = floor(p);\n    vec2 u = fract(p);\n    u = u * u * (3.0 - 2.0 * u);\n    float r = mix(\n        mix(rnd(v), rnd(v + vec2(1.0, 0.0)), u.x),\n        mix(rnd(v + vec2(0.0, 1.0)), rnd(v + vec2(1.0, 1.0)), u.x),\n        u.y\n    );\n    return r * r;\n}\nfloat snoise(vec2 p){\n    float n = 0.0;\n    for(float i = 0.0; i < 6.0; ++i){\n        float v = pow(2.0, 2.0 + i);\n        float w = pow(2.0, -1.0 - i);\n        n += noise(p * v) * w;\n    }\n    return n;\n}\nfloat seamless(vec2 p, vec2 q, vec2 r){\n    return snoise(vec2(p.x,    p.y    )) *      q.x  *      q.y  +\n           snoise(vec2(p.x,    p.y + r.y)) *        q.x  * (1.0 - q.y) +\n           snoise(vec2(p.x + r.x, p.y     )) * (1.0 - q.x) *        q.y  +\n           snoise(vec2(p.x + r.x, p.y + r.y)) * (1.0 - q.x) * (1.0 - q.y);\n}\nfloat waveline(vec2 p){\n    float f = smoothstep(0.975, 1.0, cos(p.x * 2.5) - (p.y * 2.5) - 0.75);\n    float g = smoothstep(0.975, 1.0, cos(p.x * PI + PI) - (p.y * 4.0) - 0.5);\n    float h = smoothstep(0.975, 1.0, cos(p.x * 2.5) - (p.y * 2.5) + 0.5);\n    return mix(mix(mix(0.0, 0.3, h), 0.6, g), 0.9, f);\n}\nfloat dChoco(vec3 p){\n    float rad = -time * 0.2;\n    mat3 m = mat3(cos(rad), 0.0, -sin(rad), 0.0, 1.0, 0.0, sin(rad), 0.0, cos(rad));\n    vec3 q = m * p;\n    float e = 1.0 - p.y * 0.7;\n    float w = waveline(vec2(atan(q.z, q.x) / PI, p.y + 0.25)) * 0.15;\n    return length((q + vec3(0.0, -0.5, 0.0)) * vec3(e, 0.5, e)) + p.y - 0.5 + step(p.y, -1.2) * 2.0 - w;\n}\nfloat dCylinder(vec3 p, vec2 r){\n    vec2 d = abs(vec2(length(p.xz), p.y)) - r;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - 0.25 + step(-1.0, p.y) + step(p.y, -1.5);\n}\nIntersect distanceHub(vec3 p){\n    float choco = dChoco(p);\n    float cylin = dCylinder(p, vec2(0.5, 2.0));\n    Intersect i;\n    i.dist = min(cylin, choco);\n    i.color = choco < cylin ? cColor : kColor;\n    return i;\n}\nvec3 genNormal(vec3 p){\n    float d = 0.001;\n    return normalize(vec3(\n        distanceHub(p + vec3(  d, 0.0, 0.0)).dist - distanceHub(p + vec3( -d, 0.0, 0.0)).dist,\n        distanceHub(p + vec3(0.0,   d, 0.0)).dist - distanceHub(p + vec3(0.0,  -d, 0.0)).dist,\n        distanceHub(p + vec3(0.0, 0.0,   d)).dist - distanceHub(p + vec3(0.0, 0.0,  -d)).dist\n    ));\n}\n\nvoid main(){\n    vec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n    vec3 cPos = vec3(0.0,  0.0,  3.0);\n    vec3 cDir = vec3(0.0,  0.0, -1.0);\n    vec3 cUp  = vec3(0.0,  1.0,  0.0);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n    float dist = 0.0;\n    float rLen = 0.0;\n    vec3  rPos = cPos;\n    Intersect intersect;\n    for(int i = 0; i < 256; ++i){\n        intersect = distanceHub(rPos);\n        rLen += intersect.dist * 0.2;\n        rPos = cPos + ray * rLen;\n    }\n\n    if(abs(intersect.dist) < 0.001){\n        float fog = smoothstep(0.0, 15.0, length(rPos - cPos));\n        vec3  normal = genNormal(rPos);\n        vec3  light = normalize(vec3(mouse + 2.0, 3.0));\n        float diff = max(dot(normal, light), 0.05);\n        vec3  eye = reflect(normalize(rPos - cPos), normal);\n        float speculer = clamp(dot(eye, light), 0.0, 1.0);\n        vec3 specColor = pow(speculer, 20.0) + cColor;\n        gl_FragColor = vec4(vec3(diff) * intersect.color - fog + specColor, 1.0);\n    }else{\n        vec2 c = gl_FragCoord.xy / resolution;\n        vec2 t = vec2(c.s, c.t - (3.0 / resolution.y));\n        vec4 texColor = texture2D(backbuffer, t);\n        float n = seamless(p - vec2(0.0, time), p / 2.0, vec2(2.0));\n        float f = min(0.1 / abs(p.x), 1.0) * min(1.0 - p.y, 1.0);\n        vec3 fire = texColor.rgb * (vec3(1.0, 0.3, 0.0) + pow(n * 3.0, 2.0)) * 0.95 * f;\n        gl_FragColor = vec4(fire, 1.0);\n    }\n}\n\n\uff08GLSL Editor \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u5b9f\u884c\u3057\u3066\u306d\uff01\uff09\n\n\u968a\u9577\u300c\u90e8\u4e0b\u305f\u3061\u306b\u306f\u624b\u51fa\u3057\u306f\u3055\u305b\u3093\u3002\u4ffa\u304c\u76f4\u3005\u306b\u8cb4\u69d8\u3092\u846c\u3063\u3066\u3084\u308d\u3046\u300d\n\u5de6\u300c\u307e\u3055\u304b\u2026\u2026\u3042\u3093\u305f\u89aa\u7236\u3068\u306a\u306b\u304b\u56e0\u7e01\u304c\u3042\u308b\u306e\u304b\uff01\u300d\n\u968a\u9577\u300c\u554f\u7b54\u7121\u7528\uff01\u300d\n\u30e1\u30e9\u30e1\u30e9\u3068\u71c3\u3048\u4e0a\u304c\u308b\u95d8\u5fd7\u3092\u8eab\u306b\u307e\u3068\u3063\u305f\u305f\u3051\u306e\u3053\u968a\u9577\u304c\u5de6\u5229\u304d\u306b\u8972\u3044\u304b\u304b\u308b\uff01\nto be continued!\n\u203b\u3053\u306e\u7269\u8a9e\u306f\u30d5\u30a3\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5b9f\u5728\u306e\u4eba\u7269\u3084\u56e3\u4f53\u306a\u3069\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\n## \u6a29\u9020\u3055\u3093\n\n\u5de6\u300c\u30d0\u30ab\u306a\u30c3\uff01\u300d\n\n\u5de6\u5229\u304d\u306f\u601d\u308f\u305a\u53eb\u3093\u3060\u3002\n\n\u898b\u305f\u3053\u3068\u3082\u306a\u3044\u307b\u3069\u306e\u305f\u3051\u306e\u3053\u306e\u8ecd\u52e2\u306b\u3001\u53cd\u5c04\u7684\u306b\u3001\u60b2\u9cf4\u306e\u3088\u3046\u306a\u53eb\u3073\u58f0\u3092\u4e0a\u3052\u3066\u3057\u307e\u3063\u305f\u306e\u3060\u3002\n\n\u30d7\u30ec\u30c3\u30c4\u30a7\u30eb\u304c\u30ac\u30af\u30ac\u30af\u3068\u9707\u3048\u3001\u6b69\u304f\u3053\u3068\u3082\u3067\u304d\u306a\u3044\u3002\n\n\u4e00\u6b69\u3001\u307e\u305f\u4e00\u6b69\u3068\u78ba\u5b9f\u306b\u8fd1\u3065\u3044\u3066\u304f\u308b\u305f\u3051\u306e\u3053\u306e\u8ecd\u52e2\u2026\u2026\n\n\u5de6\u5229\u304d\u306f\u3001\u3055\u3063\u304d\u307e\u3067\u81ea\u66b4\u81ea\u68c4\u306b\u306a\u3063\u3066\u3044\u305f\u3053\u3068\u3082\u5fd8\u308c\u3001\u305f\u3060\u305f\u3060\u6050\u6016\u306b\u8eab\u3092\u9707\u308f\u305b\u3066\u3044\u305f\u3002\n\n\u305f\u3051\u306e\u3053\u968a\u306e\u968a\u9577\u300c\u30e0\u30c3\uff01\uff1f\u300d\n\n\u8ecd\u52e2\u3092\u7387\u3044\u3066\u9663\u982d\u6307\u63ee\u306b\u7acb\u3063\u3066\u3044\u305f\u305f\u3051\u306e\u3053\u8ecd\u306e\u968a\u9577\u306f\u3001\u8349\u539f\u306e\u7247\u9685\u3067\u8170\u304c\u629c\u3051\u3066\u52d5\u3051\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u304d\u306e\u3053\u3092\u898b\u3064\u3051\u53f7\u4ee4\u3092\u639b\u3051\u305f\u3002\n\n\u968a\u9577\u300c\u5168\u8ecd\u3001\u6b62\u307e\u308c\uff01\u300d\n\n```glsl\nprecision mediump float;\nuniform vec2  resolution;\nuniform vec2  mouse;\nuniform float time;\nuniform sampler2D backbuffer;\n\nstruct Intersect{\n\tfloat dist;\n\tvec3  color;\n};\nconst float PI = 3.1415926;\nconst float PI2 = PI * 2.0;\nconst vec3 cColor = vec3(0.25, 0.1, 0.0);\nconst vec3 fColor = vec3(0.2, 0.7, 0.1);\nconst vec3 kColor = vec3(0.9, 0.8, 0.4);\n\nfloat waveline(vec2 p){\n\tfloat f = smoothstep(0.975, 1.0, cos(p.x * 2.5) - (p.y * 2.5) - 0.75);\n\tfloat g = smoothstep(0.975, 1.0, cos(p.x * PI + PI) - (p.y * 4.0) - 0.5);\n\tfloat h = smoothstep(0.975, 1.0, cos(p.x * 2.5) - (p.y * 2.5) + 0.5);\n\treturn mix(mix(mix(0.0, 0.3, h), 0.4, g), 0.6, f);\n}\nfloat dChoco(vec3 p){\n\tfloat e = 1.0 - p.y * 0.7;\n\tfloat w = waveline(vec2(atan(p.z, p.x) / PI, p.y + 0.25)) * 0.15;\n\treturn length((p + vec3(0.0, -0.5, 0.0)) * vec3(e, 0.5, e)) + p.y - 0.5 + step(p.y, -1.2) - w;\n}\nfloat dFloor(vec3 p){\n\treturn dot(p, vec3(0.0, 1.0, 0.0)) + 1.5;\n}\nfloat dCylinder(vec3 p, vec2 r){\n\tvec2 d = abs(vec2(length(p.xz), p.y)) - r;\n\treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - 0.25 + step(-1.0, p.y);\n}\nIntersect distanceHub(vec3 p){\n\tvec3 q = vec3(0.0);\n\tif(p.z < -6.0){\n\t\tq = vec3(mod(p, 3.0) - 1.5);\n\t}else{\n\t\tq = p;\n\t}\n\tq = vec3(q.x, p.y, q.z);\n\tfloat choco = dChoco(q);\n\tfloat flor = dFloor(q);\n\tfloat cylin = dCylinder(q, vec2(0.5, 2.0));\n\tIntersect i;\n\ti.dist = min(cylin, min(choco, flor));\n\ti.color = cylin < min(choco, flor) ? kColor : choco < flor ? cColor : fColor;\n\treturn i;\n}\nvec3 genNormal(vec3 p){\n\tfloat d = 0.001;\n\treturn normalize(vec3(\n\t\tdistanceHub(p + vec3(  d, 0.0, 0.0)).dist - distanceHub(p + vec3( -d, 0.0, 0.0)).dist,\n\t\tdistanceHub(p + vec3(0.0,   d, 0.0)).dist - distanceHub(p + vec3(0.0,  -d, 0.0)).dist,\n\t\tdistanceHub(p + vec3(0.0, 0.0,   d)).dist - distanceHub(p + vec3(0.0, 0.0,  -d)).dist\n\t));\n}\n\nvoid main(){\n\tvec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\tvec3 cPos = vec3(0.0,  3.0, 12.0);\n\tvec3 cDir = vec3(0.0,  0.0, -1.0);\n\tvec3 cUp  = vec3(0.0,  1.0,  0.0);\n\tvec3 cSide = cross(cDir, cUp);\n\tfloat targetDepth = 2.0;\n\tvec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n\tfloat dist = 0.0;\n\tfloat rLen = 0.0;\n\tvec3  rPos = cPos;\n\tIntersect intersect;\n\tfor(int i = 0; i < 512; ++i){\n\t\tintersect = distanceHub(rPos);\n\t\trLen += intersect.dist * 0.3;\n\t\trPos = cPos + ray * rLen;\n\t}\n\n\tif(abs(intersect.dist) < 0.001){\n\t\tfloat fog = smoothstep(0.0, 100.0, length(rPos - cPos));\n\t\tvec3  normal = genNormal(rPos);\n\t\tvec3  light = normalize(vec3(mouse + 2.0, 3.0));\n\t\tfloat diff = max(dot(normal, light), 0.1);\n\t\tvec3  eye = reflect(normalize(rPos - cPos), normal);\n\t\tfloat speculer = clamp(dot(eye, light), 0.0, 1.0);\n\t\tvec3 specColor = pow(speculer, 20.0) + cColor;\n\t\tgl_FragColor = vec4(vec3(diff) * intersect.color + fog * vec3(3.0, 1.0, 0.8) + specColor, 1.0);\n\t}else{\n\t\tfloat s = 0.1 / length(p - vec2(0.0, 0.75));\n\t\tgl_FragColor = vec4(vec3(1.0) - pow(min(s, 1.0), 2.0) * vec3(0.0, 0.65, 0.85), 1.0);\n\t}\n}\n```\n\n\uff08[GLSL Editor](https://doxas.org/work/glsl_editor/) \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u5b9f\u884c\u3057\u3066\u306d\uff01\uff09\n\n![takenoco_02.jpg](https://qiita-image-store.s3.amazonaws.com/0/39638/6e62b0ae-82e5-d804-a19f-d545a2a9b9c3.jpeg)\n\n\u5de6\u300c\u3042\u2026\u2026\u3042\u3042\u3042\u3042\u2026\u2026\u300d\n\n\u968a\u9577\u300c\u306a\u3093\u3060\u8cb4\u69d8\u306f\uff1f \u8ecd\u4eba\u3067\u306f\u306a\u3055\u305d\u3046\u3060\u304c\u2026\u2026\u304d\u306e\u3053\u306e\u56fd\u306e\u4e00\u822c\u5e02\u6c11\u304b\u300d\n\n\u5de6\u5229\u304d\u306f\u6050\u6016\u306b\u9707\u3048\u8a00\u8449\u3092\u767a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u305a\u306b\u3044\u305f\u3002\u5589\u304b\u3089\u51fa\u3066\u304f\u308b\u306e\u306f\u3001\u547b\u304d\u306e\u3088\u3046\u306a\u60c5\u3051\u306a\u3044\u58f0\u3070\u304b\u308a\u3060\u3002\n\n\u968a\u9577\u300c\u8ecd\u4eba\u3067\u306f\u306a\u3044\u304d\u306e\u3053\u3092\u624b\u306b\u639b\u3051\u308b\u306e\u306f\u6c17\u304c\u5f15\u3051\u308b\u306a\u3002\u304a\u3044\u8cb4\u69d8\u3001\u4eca\u3059\u3050\u3069\u3053\u304b\u3078\u6d88\u3048\u308b\u306e\u306a\u3089\u898b\u9003\u3057\u3066\u3084\u308b\u3002\u3055\u3063\u3055\u3068\u2026\u2026\u2026\u2026\u3080\uff1f\u300d\n\n\u968a\u9577\u306f\u9ad8\u5727\u7684\u306a\u558b\u308a\u65b9\u3067\u306a\u306b\u304b\u3092\u8a00\u3044\u304b\u3051\u3066\u3044\u305f\u304c\u3001\u5de6\u5229\u304d\u306e\u9854\u3092\u307e\u3058\u307e\u3058\u3068\u6b63\u9762\u304b\u3089\u898b\u3064\u3081\u305f\u3002\n\n\u968a\u9577\u300c\u8cb4\u69d8\u2026\u2026\u3069\u3053\u304b\u3067\u4ee5\u524d\u306b\u4f1a\u3063\u305f\u304b\uff1f\u300d\n\n\u5de6\u5229\u304d\u306f\u7a81\u7136\u306e\u554f\u3044\u304b\u3051\u306b\u3001\u306a\u3093\u3068\u304b\u58f0\u3092\u637b\u308a\u51fa\u3057\u3066\u7b54\u3048\u305f\u3002\n\n\u5de6\u300c\u3046\u2026\u2026\u306a\u3001\u306a\u3093\u306e\u3053\u3068\u3060\u3002\u304a\u2026\u2026\u304a\u308c\u306b\u306f\u305f\u3051\u306e\u3053\u306e\u77e5\u308a\u5408\u3044\u306a\u3069\u5c45\u306a\u3044\uff01\uff08\u304d\u306e\u3053\u306b\u3082\u53cb\u9054\u306f\u3044\u306a\u3044\u3051\u3069\u2026\u2026\uff09\u300d\n\n\u5de6\u5229\u304d\u306e\u3069\u3053\u304b\u60b2\u75db\u306a\u8a34\u3048\u3092\u805e\u3044\u3066\u3082\u3001\u305f\u3051\u306e\u3053\u968a\u9577\u306f\u8996\u7dda\u3092\u5de6\u5229\u304d\u306e\u9854\u304b\u3089\u305d\u3089\u3055\u306a\u3044\u3002\n\n\u968a\u9577\u300c\u3046\u30fc\u3080\u3001\u8cb4\u69d8\u3001\u7236\u89aa\u306e\u540d\u306f\u306a\u3093\u3068\u3044\u3046\u3002\u307e\u3055\u304b\u3068\u306f\u601d\u3046\u304c\u3001\u304a\u524d\u306e\u7236\u89aa\u306f\u300e\u305f\u3051\u306e\u3053\u72e9\u308a\u540d\u4eba\u306e\u6a29\u9020\u3055\u3093\u300f\u3067\u306f\u306a\u3044\u304b\uff1f\u300d\n\n\u305f\u3051\u306e\u3053\u72e9\u308a\u540d\u4eba\u306e\u6a29\u9020\u2015\u2015\n\n\u305d\u308c\u306f\u3001\u5927\u4e71\u306e\u82f1\u96c4\u3067\u3042\u308a\u3001\u5bfe\u305f\u3051\u306e\u3053\u6226\u306b\u304a\u3044\u3066\u7121\u6575\u306e\u5f37\u3055\u3092\u8a87\u3063\u305f\u3068\u8a00\u308f\u308c\u308b\u4f1d\u8aac\u306e\u6226\u58eb\u2026\u2026\u9593\u9055\u3044\u306a\u304f\u3001\u5de6\u5229\u304d\u306e\u5b9f\u306e\u7236\u306e\u540d\u3060\u3063\u305f\u3002\u7a81\u7136\u306b\u7236\u306e\u540d\u3092\u8a9e\u3089\u308c\u3001\u5de6\u5229\u304d\u306e\u9854\u306b\u306f\u9a5a\u304d\u306e\u8272\u304c\u3042\u308a\u3042\u308a\u3068\u6d6e\u304b\u3073\u4e0a\u304c\u308b\u3002\n\n\u968a\u9577\u300c\u3084\u306f\u308a\u2026\u2026\u3069\u3046\u308a\u3067\u3001\u3042\u306e\u7537\u306b\u4f3c\u3066\u3044\u308b\u306f\u305a\u3060\u2026\u2026\u300d\n\n\u305f\u3051\u306e\u3053\u968a\u9577\u306f\u3069\u3053\u304b\u3055\u307f\u3057\u3052\u306a\u3001\u9060\u3044\u76ee\u306b\u306a\u3063\u3066\u7d9a\u3051\u305f\u3002\n\n\u968a\u9577\u300c\u8cb4\u69d8\u500b\u4eba\u306b\u6068\u307f\u306f\u7121\u3044\u304c\u3001\u6a29\u9020\u3055\u3093\u306e\u5005\u306a\u3089\u3070\u3001\u3053\u3053\u3067\u6bba\u3057\u3066\u304a\u304b\u306a\u3051\u308c\u3070\u5f8c\u3005\u3084\u3063\u304b\u3044\u306a\u3053\u3068\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u3093\u3002\u899a\u609f\u3057\u3066\u3082\u3089\u304a\u3046\u300d\n\n\u5de6\u5229\u304d\u304c\u72b6\u6cc1\u3092\u628a\u63e1\u3067\u304d\u3066\u3044\u306a\u3044\u3046\u3061\u306b\u968a\u9577\u306f\u52dd\u624b\u306b\u8a71\u3092\u9032\u3081\u3066\u3044\u304f\uff01\n\n```glsl\nprecision mediump float;\nuniform vec2  resolution;\nuniform vec2  mouse;\nuniform float time;\nuniform sampler2D backbuffer;\n\nstruct Intersect{\n\tfloat dist;\n\tvec3  color;\n};\nconst float PI = 3.1415926;\nconst float PI2 = PI * 2.0;\nconst vec3 cColor = vec3(0.3, 0.1, 0.0);\nconst vec3 kColor = vec3(1.0, 0.8, 0.4);\n\nfloat rnd(vec2 n) {\n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n\tvec2 v = floor(p);\n\tvec2 u = fract(p);\n\tu = u * u * (3.0 - 2.0 * u);\n\tfloat r = mix(\n\t\tmix(rnd(v), rnd(v + vec2(1.0, 0.0)), u.x),\n\t\tmix(rnd(v + vec2(0.0, 1.0)), rnd(v + vec2(1.0, 1.0)), u.x),\n\t\tu.y\n\t);\n\treturn r * r;\n}\nfloat snoise(vec2 p){\n\tfloat n = 0.0;\n\tfor(float i = 0.0; i < 6.0; ++i){\n\t\tfloat v = pow(2.0, 2.0 + i);\n\t\tfloat w = pow(2.0, -1.0 - i);\n\t\tn += noise(p * v) * w;\n\t}\n\treturn n;\n}\nfloat seamless(vec2 p, vec2 q, vec2 r){\n\treturn snoise(vec2(p.x,\t   p.y\t  )) *\t\tq.x  *\t\tq.y  +\n\t\t   snoise(vec2(p.x,\t   p.y + r.y)) *\t\tq.x  * (1.0 - q.y) +\n\t\t   snoise(vec2(p.x + r.x, p.y\t  )) * (1.0 - q.x) *\t\tq.y  +\n\t\t   snoise(vec2(p.x + r.x, p.y + r.y)) * (1.0 - q.x) * (1.0 - q.y);\n}\nfloat waveline(vec2 p){\n\tfloat f = smoothstep(0.975, 1.0, cos(p.x * 2.5) - (p.y * 2.5) - 0.75);\n\tfloat g = smoothstep(0.975, 1.0, cos(p.x * PI + PI) - (p.y * 4.0) - 0.5);\n\tfloat h = smoothstep(0.975, 1.0, cos(p.x * 2.5) - (p.y * 2.5) + 0.5);\n\treturn mix(mix(mix(0.0, 0.3, h), 0.6, g), 0.9, f);\n}\nfloat dChoco(vec3 p){\n\tfloat rad = -time * 0.2;\n\tmat3 m = mat3(cos(rad), 0.0, -sin(rad), 0.0, 1.0, 0.0, sin(rad), 0.0, cos(rad));\n\tvec3 q = m * p;\n\tfloat e = 1.0 - p.y * 0.7;\n\tfloat w = waveline(vec2(atan(q.z, q.x) / PI, p.y + 0.25)) * 0.15;\n\treturn length((q + vec3(0.0, -0.5, 0.0)) * vec3(e, 0.5, e)) + p.y - 0.5 + step(p.y, -1.2) * 2.0 - w;\n}\nfloat dCylinder(vec3 p, vec2 r){\n\tvec2 d = abs(vec2(length(p.xz), p.y)) - r;\n\treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - 0.25 + step(-1.0, p.y) + step(p.y, -1.5);\n}\nIntersect distanceHub(vec3 p){\n\tfloat choco = dChoco(p);\n\tfloat cylin = dCylinder(p, vec2(0.5, 2.0));\n\tIntersect i;\n\ti.dist = min(cylin, choco);\n\ti.color = choco < cylin ? cColor : kColor;\n\treturn i;\n}\nvec3 genNormal(vec3 p){\n\tfloat d = 0.001;\n\treturn normalize(vec3(\n\t\tdistanceHub(p + vec3(  d, 0.0, 0.0)).dist - distanceHub(p + vec3( -d, 0.0, 0.0)).dist,\n\t\tdistanceHub(p + vec3(0.0,   d, 0.0)).dist - distanceHub(p + vec3(0.0,  -d, 0.0)).dist,\n\t\tdistanceHub(p + vec3(0.0, 0.0,   d)).dist - distanceHub(p + vec3(0.0, 0.0,  -d)).dist\n\t));\n}\n\nvoid main(){\n\tvec2 p = (gl_FragCoord.xy * 2.0 - resolution) / min(resolution.x, resolution.y);\n\tvec3 cPos = vec3(0.0,  0.0,  3.0);\n\tvec3 cDir = vec3(0.0,  0.0, -1.0);\n\tvec3 cUp  = vec3(0.0,  1.0,  0.0);\n\tvec3 cSide = cross(cDir, cUp);\n\tfloat targetDepth = 1.0;\n\tvec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n\tfloat dist = 0.0;\n\tfloat rLen = 0.0;\n\tvec3  rPos = cPos;\n\tIntersect intersect;\n\tfor(int i = 0; i < 256; ++i){\n\t\tintersect = distanceHub(rPos);\n\t\trLen += intersect.dist * 0.2;\n\t\trPos = cPos + ray * rLen;\n\t}\n\n\tif(abs(intersect.dist) < 0.001){\n\t\tfloat fog = smoothstep(0.0, 15.0, length(rPos - cPos));\n\t\tvec3  normal = genNormal(rPos);\n\t\tvec3  light = normalize(vec3(mouse + 2.0, 3.0));\n\t\tfloat diff = max(dot(normal, light), 0.05);\n\t\tvec3  eye = reflect(normalize(rPos - cPos), normal);\n\t\tfloat speculer = clamp(dot(eye, light), 0.0, 1.0);\n\t\tvec3 specColor = pow(speculer, 20.0) + cColor;\n\t\tgl_FragColor = vec4(vec3(diff) * intersect.color - fog + specColor, 1.0);\n\t}else{\n\t\tvec2 c = gl_FragCoord.xy / resolution;\n\t\tvec2 t = vec2(c.s, c.t - (3.0 / resolution.y));\n\t\tvec4 texColor = texture2D(backbuffer, t);\n\t\tfloat n = seamless(p - vec2(0.0, time), p / 2.0, vec2(2.0));\n\t\tfloat f = min(0.1 / abs(p.x), 1.0) * min(1.0 - p.y, 1.0);\n\t\tvec3 fire = texColor.rgb * (vec3(1.0, 0.3, 0.0) + pow(n * 3.0, 2.0)) * 0.95 * f;\n\t\tgl_FragColor = vec4(fire, 1.0);\n\t}\n}\n```\n\n\uff08[GLSL Editor](https://doxas.org/work/glsl_editor/) \u306b\u8cbc\u308a\u4ed8\u3051\u3066\u5b9f\u884c\u3057\u3066\u306d\uff01\uff09\n\n![takenoco_03.jpg](https://qiita-image-store.s3.amazonaws.com/0/39638/95d5a4d5-4d15-2bf6-1e31-b370bce0ed64.jpeg)\n\n\u968a\u9577\u300c\u90e8\u4e0b\u305f\u3061\u306b\u306f\u624b\u51fa\u3057\u306f\u3055\u305b\u3093\u3002\u4ffa\u304c\u76f4\u3005\u306b\u8cb4\u69d8\u3092\u846c\u3063\u3066\u3084\u308d\u3046\u300d\n\n\u5de6\u300c\u307e\u3055\u304b\u2026\u2026\u3042\u3093\u305f\u89aa\u7236\u3068\u306a\u306b\u304b\u56e0\u7e01\u304c\u3042\u308b\u306e\u304b\uff01\u300d\n\n\u968a\u9577\u300c\u554f\u7b54\u7121\u7528\uff01\u300d\n\n\u30e1\u30e9\u30e1\u30e9\u3068\u71c3\u3048\u4e0a\u304c\u308b\u95d8\u5fd7\u3092\u8eab\u306b\u307e\u3068\u3063\u305f\u305f\u3051\u306e\u3053\u968a\u9577\u304c\u5de6\u5229\u304d\u306b\u8972\u3044\u304b\u304b\u308b\uff01\n\nto be continued!\n\n\u203b\u3053\u306e\u7269\u8a9e\u306f\u30d5\u30a3\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\u5b9f\u5728\u306e\u4eba\u7269\u3084\u56e3\u4f53\u306a\u3069\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\n", "tags": ["WebGL", "GLSL"]}