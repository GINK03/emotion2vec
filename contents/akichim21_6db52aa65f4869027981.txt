{"context": "2016\u5e7410\u67082\u65e5\u73fe\u5728\u306eLINE Messaging API\u3092\u9001\u4fe1\u3001\u53d7\u4fe1\u306eAPI\u3092\u5927\u4f53\u8a66\u3057\u307e\u3059\u3002\nEcho Bot\u3092Ruby, Rails\u3067\u5b9f\u88c5\u3057\u3001\u5168\u3066\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30bf\u30a4\u30d7\u306e\u4fdd\u5b58\u3057\u3066\u30a8\u30b3\u30fc\u3059\u308b\u5b9f\u88c5\u3092\u3001\u30c6\u30b9\u30c8\u307e\u3067\u542b\u3081\u7d39\u4ecb\u3057\u307e\u3059\u3002\n** \u30b9\u30ad\u30fc\u30de\u306a\u3069\u306e\u8a73\u7d30\u306f\u8ffd\u3063\u3066\u8ffd\u8a18\u3057\u307e\u3059\n** Template Message\u3082\u8ffd\u3063\u3066\u8ffd\u8a18\u3057\u307e\u3059\n\n\u524d\u63d0\n\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3084\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306a\u3069\u4f8b\u5916\u7684\u306a\u51e6\u7406\u306f\u66f8\u304d\u307e\u305b\u3093\u3002\n\u52d5\u753b\u306fmp4\u3001\u97f3\u58f0\u306fm4a\u3001\u753b\u50cf\u306fjpg\u306e\u524d\u63d0\u3068\u3059\u308b\u3002\n\n\u4f7f\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\n\nGemfile\ngem 'carrierwave' # \u753b\u50cf\u3001\u52d5\u753b\u3001\u97f3\u58f0\u306e\u4fdd\u5b58\ngem 'streamio-ffmpeg' # ffmpeg\u306e\u30e9\u30c3\u30d1\u30fc\u3002\u52d5\u753b\u306e\u30b5\u30e0\u30cd\u3092\u62bd\u51fa\ngem 'ruby-audioinfo' # \u97f3\u58f0\u306e\u6642\u9593\u306e\u629c\u304d\u53d6\u308b\ngem 'rmagick' # \u753b\u50cf\u52a0\u5de5\ngem 'fog' # aws\u306b\u753b\u50cf\u3001\u52d5\u753b\u3001\u97f3\u58f0\u3092\u4fdd\u5b58\u3059\u308b\ngem 'line-bot-api' # ruby\u7248Line\u306e\u516c\u5f0fsdk\n\ngroup :test do\n  gem \"rspec-rails\", '= 3.5.0'\n  gem 'factory_girl_rails'\n  gem 'rspec', '= 3.5.0'\n  gem 'rspec-core', '= 3.5.0'\n  gem 'rspec-expectations', '= 3.5.0'\n  gem 'rspec-mocks', '= 3.5.0'\n  gem 'rspec-support', '= 3.5.0'\n\n  gem 'database_cleaner'\n  gem 'webmock'\n  gem 'fakeweb'\n  gem 'addressable'\nend\n\n\n\n\u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\nffmpeg\nrmagic\n\n\u5b9f\u88c5\n\ncontroller\n\napp/controllers/line_controller.rb\nclass LineController < ApplicationController\n  MESSAGE_TYPE_TO_METHOD_MAP = {\n    \"text\" => :echo_text,\n    \"image\" => :echo_image,\n    \"video\" => :echo_video,\n    \"audio\" => :echo_audio,\n    \"location\" => :echo_location,\n    \"sticker\" => :echo_sticker,\n  }.freeze\n  protect_from_forgery with: :null_session\n\n  def echo\n    signature = request.env[\"HTTP_X_LINE_SIGNATURE\"]\n    body = request.body.read\n    unless client.validate_signature(body, signature)\n      head :bad_request\n      return\n    end\n\n    events = client.parse_events_from(body)\n    events.each do |event|\n      message_target = find_or_create_message_target(event) ## message_group or message_user or message_room\u304c\u5165\u308b\u3002\u900f\u904e\u7684\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3057\u3066\u304a\u304f\u3002\n\n      case event\n      when Line::Bot::Event::Message\n        message = Message.new(message_target_id: message_target.id, message_target_type: event[\"source\"][\"type\"], message_type: event.type.to_sym, chat_id: message_target.chat_id)\n        send(MESSAGE_TYPE_TO_METHOD_MAP[event.type.to_s], message, event)\n      when Line::Bot::Event::Follow\n        receive_follow(message_target)\n      when Line::Bot::Event::Unfollow\n        receive_unfollow(message_target)\n      when Line::Bot::Event::Join\n        receive_join(message_target)\n      when Line::Bot::Event::Leave\n        receive_leave(message_target)\n      end\n    end\n    head :ok\n  end\n\n  def echo_text(message, event)\n    MessageText.create!(message: message, value: event.message[\"text\"])\n    client.reply_message(event['replyToken'], {\n      type: \"text\",\n      text: message.message_text_value\n    })\n  end\n\n  def echo_image(message, event)\n    image_response = client.get_message_content(event.message['id'])\n    file = File.open(\"/tmp/#{SecureRandom.uuid}.jpg\", \"w+b\")\n    file.write(image_response.body)\n    MessageImage.create!(message: message, value: file)\n    File.unlink(file)\n    client.reply_message(event['replyToken'], {\n      type: \"image\",\n      originalContentUrl: message.message_image_url,\n      previewImageUrl: message.message_image_thumbnail_url\n    })\n  end\n\n  def echo_video(message, event)\n    video_response = client.get_message_content(event.message['id'])\n    file = File.open(\"/tmp/#{SecureRandom.uuid}.mp4\", \"w+b\")\n    file.write(video_response.body)\n    MessageVideo.create!(message: message, value: file)\n    File.unlink(file)\n    client.reply_message(event['replyToken'], {\n       type: \"video\",\n       originalContentUrl: message.message_video_url,\n       previewImageUrl: message.message_video_thumbnail_url\n    })\n  end\n\n  def echo_audio(message, event)\n    image_response = client.get_message_content(event.message['id'])\n    file = File.open(\"/tmp/#{SecureRandom.uuid}.m4a\", \"w+b\")\n    file.write(image_response.body)\n    MessageAudio.create!(message: message, value: file)\n    File.unlink(file)\n    client.reply_message(event['replyToken'], {\n      type: \"audio\",\n      originalContentUrl: message.message_audio_url,\n      duration: message.message_audio_duration * 1000\n    })\n  end\n\n  def echo_location(message, event)\n    message_param = event.message\n    title = message_param[\"title\"]\n    address = message_param[\"address\"]\n    latitude = message_param[\"latitude\"]\n    longitude = message_param[\"longitude\"]\n    MessageLocation.create!(message: message, title: title, address: address, latitude: latitude, longitude: longitude)\n    client.reply_message(event['replyToken'], {\n      type: \"location\",\n      title: message.message_location_title,\n      address: message.message_location_address,\n      latitude: message.message_location_lat,\n      longitude: message.message_location_long,\n    })\n  end\n\n  def echo_sticker(message, event)\n    package_id = event.message[\"packageId\"]\n    sticker_id = event.message[\"stickerId\"]\n    MessageLocation.create!(message: message, package_id: package_id, sticker_id: sticker_id)\n    client.reply_message(event['replyToken'], {\n      type: \"sticker\",\n      packageId: message.message_sticker_package_id,\n      stickerId: message.message_sticker_sticker_id,\n    })\n  end\n\n  def receive_follow(message_target)\n    client.push_message(\n      message_target.platform_id, # userId\u304c\u5165\u308b\n      {\n        type: \"text\",\n        text: \"\u53cb\u9054\u767b\u9332\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\"\n      }\n    )\n  end\n\n  def receive_unfollow(message_target)\n    message_target.blocked = true\n    message_target.save!\n  end\n\n  def receive_join(message_target)\n    client.push_message(\n      message_target.platform_id, # groupID or roomId\u304c\u5165\u308b\n      {\n        type: \"text\",\n        text: \"\u62db\u5f85\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\"\n      }\n    )\n  end\n\n  def receive_leave(message_target)\n    message_target.leaved = true\n    message_target.save!\n  end\n\n  def client\n    @client ||= Line::Bot::Client.new do |config|\n      config.channel_secret = ENV[\"LINE_CHANNEL_SECRET\"]\n      config.channel_token = ENV[\"LINE_CHANNEL_TOKEN\"]\n    end\n  end\n\n  def find_or_create_message_target(event)\n    # TODO message_target\u3092\u4f5c\u308b\u51e6\u7406\n    # event[\"source\"][\"type\"]\u306bgroup\u304broom\u304buser\u304c\u5165\u308b\u306e\u3067\u305d\u308c\u306b\u3088\u3063\u3066\u3001message_group, message_room, message_user\u3092\u4f5c\u308b\u3002\u30ab\u30e9\u30e0\u306f\u3067\u304d\u308b\u3060\u3051\u5171\u901a\u306b\u8a2d\u8a08\u3059\u308b\n  end\nend\n\n\n\u57fa\u672c\u7684\u306aLine\u3068\u306e\u3084\u308a\u3068\u308a\u306f\u4e0a\u8a18\u306econtroller\u306e\u307f\u3002\u4ee5\u4e0b\u304b\u3089model, carrierwave, rspec\u306e\u51e6\u7406\u3092\u629c\u7c8b\u3057\u3066\u66f8\u304f\u3002\n\nmodel\n\napp/models/message.rb\nclass Message < ApplicationRecord\n  delegate :value, to: :message_text, prefix: true, allow_nil: true\n  delegate :url, :thumbnail_url, to: :message_image, prefix: true, allow_nil: true\n  delegate :url, :thumbnail_url, to: :message_video, prefix: true, allow_nil: true\n  delegate :url, :duration, to: :message_audio, prefix: true, allow_nil: true\n  delegate :title, :address, :lat, :long, to: :message_location, prefix: true, allow_nil: true\n  delegate :package_id, :sticker_id, to: :message_sticker, prefix: true, allow_nil: true\n\n  belongs_to :chat\n  has_one :message_text, dependent: :destroy\n  has_one :message_image, dependent: :destroy\n  has_one :message_video, dependent: :destroy\n  has_one :message_audio, dependent: :destroy\n  has_one :message_location, dependent: :destroy\n  has_one :message_sticker, dependent: :destroy\n\n  enum message_type: [:text, :image, :video, :audio, :location, :sticker]\n\nend\n\n\n\napp/models/message_text.rb\nclass MessageText < ApplicationRecord\n  belongs_to :message\nend\n\n\n\napp/models/message_image.rb\nclass MessageImage < ApplicationRecord\n  delegate :url, to: :value\n  belongs_to :message\n\n  mount_uploader :value, MessageImageUploader\n  def thumbnail_url\n    value.thumbnail.url\n  end\nend\n\n\n\napp/models/message_video.rb\nclass MessageVideo < ApplicationRecord\n  delegate :url, to: :value\n  delegate :url, to: :thumbnail, prefix: true\n\n  belongs_to :message\n\n  mount_uploader :thumbnail, MessageVideoThumbnailUploader\n  mount_uploader :value, MessageVideoUploader\n\nend\n\n\n\napp/models/message_audio.rb\nclass MessageAudio < ApplicationRecord\n  delegate :url, to: :value\n  belongs_to :message\n\n  mount_uploader :value, MessageAudioUploader\nend\n\n\n\napp/models/message_sticker.rb\nclass MessageLocation < ApplicationRecord\n  belongs_to :message\n\n  # latitude, longtitude\u306fdecimal\u3067\u5b9a\u7fa9\n  def lat\n    latitude.to_f\n  end\n\n  def long\n    longitude.to_f\n  end\nend\n\n\n\napp/models/message_sticker.rb\nclass MessageSticker < ApplicationRecord\n  belongs_to :message\nend\n\n\n\nCarrierwave\n\napp/uploaders/base_uploader.rb\nclass BaseUploader < CarrierWave::Uploader::Base\n  if Rails.env.production?\n    storage :fog\n  else\n    storage :file\n  end\n\n  protected\n  def secure_token\n    var = :\"@#{mounted_as}_secure_token\"\n    model.instance_variable_get(var) || model.instance_variable_set(var, SecureRandom.uuid)\n  end\nend\n\n\n\napp/uploaders/message_image_uploader.rb\nclass MessageImageUploader < BaseUploader\n  include CarrierWave::RMagick\n\n  process :resize_to_limit => [1000, 1000]\n  version :thumbnail do\n    process :cut_out_square\n    process :resize_to_limit => [500, 500]\n  end\n  def cut_out_square\n    manipulate! do |img|\n      size = [img.columns, img.rows].min\n      img.resize_to_fill(size, size)\n    end\n  end\n\n  def store_dir\n    \"images/#{model.class.to_s.underscore}\"\n  end\n\n  def extension_white_list\n    %w(jpg)\n  end\n\n  def filename\n    \"#{secure_token}.jpg\" if original_filename.present?\n  end\nend\n\n\n\napp/uploaders/message_video_uploader.rb\nclass MessageVideoThumbnailUploader < BaseUploader\n  process :resize_to_limit => [240, 240]\n\n  def store_dir\n    \"images/#{model.class.to_s.underscore}\"\n  end\n\n  def extension_white_list\n    %w(jpg)\n  end\n\n  def filename\n    \"#{secure_token}.jpg\" if original_filename.present?\n  end\nend\n\n\n\napp/uploaders/message_video_uploader.rb\nclass MessageVideoUploader < BaseUploader\n  version :screenshot do\n    process :screenshot\n    def full_filename (*)\n      \"screenshot.jpg\"\n    end\n  end\n\n  def screenshot\n    tmpfile = File.join(File.dirname(current_path), \"tmpfile\")\n\n    File.rename(current_path, tmpfile)\n    movie = FFMPEG::Movie.new(tmpfile)\n    movie.screenshot(current_path + \".jpg\")\n    model.thumbnail = File.open(current_path + \".jpg\")\n\n    File.delete(tmpfile)\n  end\n\n  def store_dir\n    \"videos/#{model.class.to_s.underscore}\"\n  end\n\n  def extension_white_list\n    %w(mp4)\n  end\n\n  def filename\n    \"#{secure_token}.mp4\" if original_filename.present?\n  end\nend\n\n\n\napp/uploaders/message_audio_uploader.rb\nrequire \"audioinfo\"\n\nclass MessageAudioUploader < BaseUploader\n  process :audio_info\n\n  def store_dir\n    \"audios/#{model.class.to_s.underscore}\"\n  end\n\n  def extension_white_list\n    %w(m4a)\n  end\n\n  def filename\n    \"#{secure_token}.m4a\" if original_filename.present?\n  end\n\n  def audio_info\n    AudioInfo.open(current_path) do |info|\n      model.duration = info.length\n    end\n  end\nend\n\n\n\nmonkey patch\nAudioInfo\u3067m4a\u3092initialize\u3059\u308b\u3068fork\u3092\u4f7f\u3063\u305f\u51e6\u7406\u3092\u5185\u90e8\u3067\u5b9f\u884c\u3057\u3066\u3001fork\u306e\u5b50\u30d7\u30ed\u30bb\u30b9\u304c\u9589\u3058\u305f\u6642\u306bmysql\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3082\u30af\u30ed\u30fc\u30ba\u3057\u3066mysql has gone away\u306b\u306a\u308b\u3002fork\u306e\u5b9f\u884c\u3057\u3066\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u51e6\u7406\u306f\u4eca\u56de\u4e0d\u8981\u306e\u305f\u3081override\u3059\u308b\n\nlib/monkey_patches/audioinfo.rb\nrequire \"audioinfo\"\nclass AudioInfo\n  # \u4e2d\u3067fork\u51e6\u7406\u3092\u3057\u3066mysql has gone away\u306b\u306a\u308b\u3002\n  # \u5927\u3057\u305f\u60c5\u5831\u3068\u3063\u3066\u306a\u3044\u306e\u3067\u3001override\n  def faad_info(*)\n    \"\"\n  end\nend\n\n\n\nrspec\ncontroller\u306e\u30c6\u30b9\u30c8\u3060\u3051\n\nspec/controllers/line_controller_spec.rb\nrequire 'rails_helper'\nrequire 'line/bot'\n\nTEXT_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325708\",\n        \"type\": \"text\",\n        \"text\":\"hello\"\n      }\n    }\n  ]\n}.freeze\n\nIMAGE_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325709\",\n        \"type\": \"image\"\n      }\n    }\n  ]\n}.freeze\n\nVIDEO_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325710\",\n        \"type\": \"video\"\n      }\n    }\n  ]\n}.freeze\n\nAUDIO_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325711\",\n        \"type\": \"audio\"\n      }\n    }\n  ]\n}.freeze\n\nLOCATION_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325712\",\n        \"type\": \"location\",\n        \"title\": \"my location\",\n        \"address\": \"tokyo\",\n        \"latitude\": 35.65910807942215,\n        \"longitude\": 139.70372892916203\n      }\n    }\n  ]\n}.freeze\n\nSTICKER_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325709\",\n        \"type\": \"sticker\",\n        \"packageId\": \"1\",\n        \"stickerId\": \"1\"\n      }\n    }\n  ]\n}.freeze\n\nFOLLOW_EVENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"follow\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      }\n    }\n  ]\n}.freeze\n\nPROFILES_CONTENT = <<-EOS.freeze\n{\n  \"displayName\":\"BOT API1\",\n  \"userId\":\"u206d25c2ea6bd87c17655609a1c37cb8\",\n  \"pictureUrl\":\"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/325709/content\",\n  \"statusMessage\":\"Hello, LINE!\"\n}\nEOS\n\nIMAGE_FILE = Rack::Test::UploadedFile.new(File.join(Rails.root, 'spec', 'fixtures', 'files', 'sample.jpg'), \"image/png\")\nVIDEO_FILE = Rack::Test::UploadedFile.new(File.join(Rails.root, 'spec', 'fixtures', 'files', 'sample.mp4'), \"video/mp4\")\nAUDIO_FILE = Rack::Test::UploadedFile.new(File.join(Rails.root, 'spec', 'fixtures', 'files', 'sample.m4a'), \"audio/m4a\")\n\nWebMock.allow_net_connect!\n\nRSpec.describe LineController, type: :controller do\n  describe \"POST #echo\" do\n    before(:each) do\n      request.env[\"HTTP_ACCEPT\"] = 'application/json'\n      request.env[\"CONTENT_TYPE\"] = 'application/json'\n      allow_any_instance_of(Line::Bot::Client).to receive(:validate_signature).and_return(true)\n      stub_request(:get, Addressable::Template.new(\"#{Line::Bot::API::DEFAULT_ENDPOINT}/profile/{mids}\")).to_return { { body: PROFILES_CONTENT, status: 200} }\n      stub_request(:post, Addressable::Template.new(\"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/push\")).to_return { |request| {body: request.body, status: 200} }\n      stub_request(:post, Addressable::Template.new(\"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/reply\")).to_return { |request| {body: request.body, status: 200} }\n      FakeWeb.register_uri(:get, \"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/325709/content\", body: IMAGE_FILE, 'Content-Type' => \"image/png\")\n    end\n\n    it \"request message text\" do\n      expect do\n        post :callback, params: TEXT_CONTENT\n      end.to change(MessageText, :count).by(1)\n    end\n\n    it \"request message image\" do\n      expect do\n        post :callback, params: IMAGE_CONTENT\n      end.to change(MessageImage, :count).by(1)\n    end\n\n    it \"request message video\" do\n      FakeWeb.register_uri(:get, \"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/325710/content\", body: VIDEO_FILE, 'Content-Type' => \"video/mp4\")\n      expect do\n        post :callback, params: VIDEO_CONTENT\n      end.to change(MessageVideo, :count).by(1)\n    end\n    it \"request message audio\" do\n      FakeWeb.register_uri(:get, \"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/325711/content\", body: AUDIO_FILE, 'Content-Type' => \"audio/m4a\")\n      expect do\n        post :callback, params: AUDIO_CONTENT\n      end.to change(MessageAudio, :count).by(1)\n    end\n\n    it \"request message location\" do\n      expect do\n        post :callback, params: LOCATION_CONTENT\n      end.to change(MessageLocation, :count).by(1)\n    end\n\n    it \"request message sticker\" do\n      expect do\n        post :callback, params: STICKER_CONTENT\n      end.to change(MessageSticker, :count).by(1)\n    end\n\n    it \"request follow event\" do\n      expect do\n        post :callback, params: FOLLOW_EVENT\n      end.to change(Message, :count).by(Constants::INITIAL_MESSAGES.size)\n    end\n  end\nend\n\n\nfactorygirl\u306e\u97f3\u58f0\u3001\u52d5\u753b\u3001\u753b\u50cf\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u6e21\u305b\u3070\u4f5c\u3063\u3066\u304f\u308c\u308b\u3002\n\nspec/factories/message_videos.rb\nFactoryGirl.define do\n  factory :message_video do\n    value { Rack::Test::UploadedFile.new(File.join(Rails.root, 'spec', 'fixtures', 'files', 'sample.mp4')) }\n    message { FactoryGirl.create :message }\n  end\nend\n\n\n\ncircleci.yml\ndependencies:\n  pre:\n    - sudo apt-get update\n    - sudo apt-get install build-essential automake autoconf zlib1g-dev libtool libx264-dev yasm\n    - wget http://ffmpeg.org/releases/ffmpeg-2.6.tar.bz2\n    - tar xjf ffmpeg-2.6.tar.bz2\n    - cd ffmpeg-2.6 && ./configure --enable-libx264 --enable-gpl && make && sudo make install\n  cache_directories:\n    - ffmpeg-2.6\n\n\n\u4eca\u56de\u306e\u30e9\u30a4\u30f3\u306eAPI\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u304b\u306a\u308a\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u3063\u3066\u307e\u3059\u3002\n\u305f\u3060\u3001\u97f3\u58f0\u306e\u9577\u3055\u3068\u304b\u52d5\u753b\u306e\u30b9\u30af\u30b7\u30e7\u306fLine\u5185\u90e8\u3067\u4f5c\u3063\u3066\u3082\u3089\u3048\u305f\u3089\u3088\u308a\u5b9f\u88c5\u306f\u697d\u306b\u306a\u3063\u305f\u306e\u306b\u306a\u30fc\u3068\u601d\u3044\u307e\u3057\u305f\u3002\nhttps://devdocs.line.me/ja/#send-message-object\n2016\u5e7410\u67082\u65e5\u73fe\u5728\u306eLINE Messaging API\u3092\u9001\u4fe1\u3001\u53d7\u4fe1\u306eAPI\u3092\u5927\u4f53\u8a66\u3057\u307e\u3059\u3002\nEcho Bot\u3092Ruby, Rails\u3067\u5b9f\u88c5\u3057\u3001\u5168\u3066\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30bf\u30a4\u30d7\u306e\u4fdd\u5b58\u3057\u3066\u30a8\u30b3\u30fc\u3059\u308b\u5b9f\u88c5\u3092\u3001\u30c6\u30b9\u30c8\u307e\u3067\u542b\u3081\u7d39\u4ecb\u3057\u307e\u3059\u3002\n** \u30b9\u30ad\u30fc\u30de\u306a\u3069\u306e\u8a73\u7d30\u306f\u8ffd\u3063\u3066\u8ffd\u8a18\u3057\u307e\u3059\n** Template Message\u3082\u8ffd\u3063\u3066\u8ffd\u8a18\u3057\u307e\u3059\n\n#\u524d\u63d0\n\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3084\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306a\u3069\u4f8b\u5916\u7684\u306a\u51e6\u7406\u306f\u66f8\u304d\u307e\u305b\u3093\u3002\n\u52d5\u753b\u306fmp4\u3001\u97f3\u58f0\u306fm4a\u3001\u753b\u50cf\u306fjpg\u306e\u524d\u63d0\u3068\u3059\u308b\u3002\n \n#\u4f7f\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\n```ruby:Gemfile\ngem 'carrierwave' # \u753b\u50cf\u3001\u52d5\u753b\u3001\u97f3\u58f0\u306e\u4fdd\u5b58\ngem 'streamio-ffmpeg' # ffmpeg\u306e\u30e9\u30c3\u30d1\u30fc\u3002\u52d5\u753b\u306e\u30b5\u30e0\u30cd\u3092\u62bd\u51fa\ngem 'ruby-audioinfo' # \u97f3\u58f0\u306e\u6642\u9593\u306e\u629c\u304d\u53d6\u308b\ngem 'rmagick' # \u753b\u50cf\u52a0\u5de5\ngem 'fog' # aws\u306b\u753b\u50cf\u3001\u52d5\u753b\u3001\u97f3\u58f0\u3092\u4fdd\u5b58\u3059\u308b\ngem 'line-bot-api' # ruby\u7248Line\u306e\u516c\u5f0fsdk\n\ngroup :test do\n  gem \"rspec-rails\", '= 3.5.0'\n  gem 'factory_girl_rails'\n  gem 'rspec', '= 3.5.0'\n  gem 'rspec-core', '= 3.5.0'\n  gem 'rspec-expectations', '= 3.5.0'\n  gem 'rspec-mocks', '= 3.5.0'\n  gem 'rspec-support', '= 3.5.0'\n\n  gem 'database_cleaner'\n  gem 'webmock'\n  gem 'fakeweb'\n  gem 'addressable'\nend\n```\n\n# \u74b0\u5883\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\nffmpeg\nrmagic\n\n#\u5b9f\u88c5\n\n## controller\n```ruby:app/controllers/line_controller.rb\nclass LineController < ApplicationController\n  MESSAGE_TYPE_TO_METHOD_MAP = {\n    \"text\" => :echo_text,\n    \"image\" => :echo_image,\n    \"video\" => :echo_video,\n    \"audio\" => :echo_audio,\n    \"location\" => :echo_location,\n    \"sticker\" => :echo_sticker,\n  }.freeze\n  protect_from_forgery with: :null_session\n\n  def echo\n    signature = request.env[\"HTTP_X_LINE_SIGNATURE\"]\n    body = request.body.read\n    unless client.validate_signature(body, signature)\n      head :bad_request\n      return\n    end\n\n    events = client.parse_events_from(body)\n    events.each do |event|\n      message_target = find_or_create_message_target(event) ## message_group or message_user or message_room\u304c\u5165\u308b\u3002\u900f\u904e\u7684\u306b\u6271\u3048\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3057\u3066\u304a\u304f\u3002\n\n      case event\n      when Line::Bot::Event::Message\n        message = Message.new(message_target_id: message_target.id, message_target_type: event[\"source\"][\"type\"], message_type: event.type.to_sym, chat_id: message_target.chat_id)\n        send(MESSAGE_TYPE_TO_METHOD_MAP[event.type.to_s], message, event)\n      when Line::Bot::Event::Follow\n        receive_follow(message_target)\n      when Line::Bot::Event::Unfollow\n        receive_unfollow(message_target)\n      when Line::Bot::Event::Join\n        receive_join(message_target)\n      when Line::Bot::Event::Leave\n        receive_leave(message_target)\n      end\n    end\n    head :ok\n  end\n\n  def echo_text(message, event)\n    MessageText.create!(message: message, value: event.message[\"text\"])\n    client.reply_message(event['replyToken'], {\n      type: \"text\",\n      text: message.message_text_value\n    })\n  end\n\n  def echo_image(message, event)\n    image_response = client.get_message_content(event.message['id'])\n    file = File.open(\"/tmp/#{SecureRandom.uuid}.jpg\", \"w+b\")\n    file.write(image_response.body)\n    MessageImage.create!(message: message, value: file)\n    File.unlink(file)\n    client.reply_message(event['replyToken'], {\n      type: \"image\",\n      originalContentUrl: message.message_image_url,\n      previewImageUrl: message.message_image_thumbnail_url\n    })\n  end\n\n  def echo_video(message, event)\n    video_response = client.get_message_content(event.message['id'])\n    file = File.open(\"/tmp/#{SecureRandom.uuid}.mp4\", \"w+b\")\n    file.write(video_response.body)\n    MessageVideo.create!(message: message, value: file)\n    File.unlink(file)\n    client.reply_message(event['replyToken'], {\n       type: \"video\",\n       originalContentUrl: message.message_video_url,\n       previewImageUrl: message.message_video_thumbnail_url\n    })\n  end\n\n  def echo_audio(message, event)\n    image_response = client.get_message_content(event.message['id'])\n    file = File.open(\"/tmp/#{SecureRandom.uuid}.m4a\", \"w+b\")\n    file.write(image_response.body)\n    MessageAudio.create!(message: message, value: file)\n    File.unlink(file)\n    client.reply_message(event['replyToken'], {\n      type: \"audio\",\n      originalContentUrl: message.message_audio_url,\n      duration: message.message_audio_duration * 1000\n    })\n  end\n\n  def echo_location(message, event)\n    message_param = event.message\n    title = message_param[\"title\"]\n    address = message_param[\"address\"]\n    latitude = message_param[\"latitude\"]\n    longitude = message_param[\"longitude\"]\n    MessageLocation.create!(message: message, title: title, address: address, latitude: latitude, longitude: longitude)\n    client.reply_message(event['replyToken'], {\n      type: \"location\",\n      title: message.message_location_title,\n      address: message.message_location_address,\n      latitude: message.message_location_lat,\n      longitude: message.message_location_long,\n    })\n  end\n\n  def echo_sticker(message, event)\n    package_id = event.message[\"packageId\"]\n    sticker_id = event.message[\"stickerId\"]\n    MessageLocation.create!(message: message, package_id: package_id, sticker_id: sticker_id)\n    client.reply_message(event['replyToken'], {\n      type: \"sticker\",\n      packageId: message.message_sticker_package_id,\n      stickerId: message.message_sticker_sticker_id,\n    })\n  end\n\n  def receive_follow(message_target)\n    client.push_message(\n      message_target.platform_id, # userId\u304c\u5165\u308b\n      {\n        type: \"text\",\n        text: \"\u53cb\u9054\u767b\u9332\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\"\n      }\n    )\n  end\n\n  def receive_unfollow(message_target)\n    message_target.blocked = true\n    message_target.save!\n  end\n\n  def receive_join(message_target)\n    client.push_message(\n      message_target.platform_id, # groupID or roomId\u304c\u5165\u308b\n      {\n        type: \"text\",\n        text: \"\u62db\u5f85\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\"\n      }\n    )\n  end\n\n  def receive_leave(message_target)\n    message_target.leaved = true\n    message_target.save!\n  end\n\n  def client\n    @client ||= Line::Bot::Client.new do |config|\n      config.channel_secret = ENV[\"LINE_CHANNEL_SECRET\"]\n      config.channel_token = ENV[\"LINE_CHANNEL_TOKEN\"]\n    end\n  end\n\n  def find_or_create_message_target(event)\n    # TODO message_target\u3092\u4f5c\u308b\u51e6\u7406\n    # event[\"source\"][\"type\"]\u306bgroup\u304broom\u304buser\u304c\u5165\u308b\u306e\u3067\u305d\u308c\u306b\u3088\u3063\u3066\u3001message_group, message_room, message_user\u3092\u4f5c\u308b\u3002\u30ab\u30e9\u30e0\u306f\u3067\u304d\u308b\u3060\u3051\u5171\u901a\u306b\u8a2d\u8a08\u3059\u308b\n  end\nend\n```\n\n\u57fa\u672c\u7684\u306aLine\u3068\u306e\u3084\u308a\u3068\u308a\u306f\u4e0a\u8a18\u306econtroller\u306e\u307f\u3002\u4ee5\u4e0b\u304b\u3089model, carrierwave, rspec\u306e\u51e6\u7406\u3092\u629c\u7c8b\u3057\u3066\u66f8\u304f\u3002\n\n\n##model\n```ruby:app/models/message.rb\nclass Message < ApplicationRecord\n  delegate :value, to: :message_text, prefix: true, allow_nil: true\n  delegate :url, :thumbnail_url, to: :message_image, prefix: true, allow_nil: true\n  delegate :url, :thumbnail_url, to: :message_video, prefix: true, allow_nil: true\n  delegate :url, :duration, to: :message_audio, prefix: true, allow_nil: true\n  delegate :title, :address, :lat, :long, to: :message_location, prefix: true, allow_nil: true\n  delegate :package_id, :sticker_id, to: :message_sticker, prefix: true, allow_nil: true\n\n  belongs_to :chat\n  has_one :message_text, dependent: :destroy\n  has_one :message_image, dependent: :destroy\n  has_one :message_video, dependent: :destroy\n  has_one :message_audio, dependent: :destroy\n  has_one :message_location, dependent: :destroy\n  has_one :message_sticker, dependent: :destroy\n\n  enum message_type: [:text, :image, :video, :audio, :location, :sticker]\n\nend\n```\n\n```ruby:app/models/message_text.rb\nclass MessageText < ApplicationRecord\n  belongs_to :message\nend\n```\n\n```ruby:app/models/message_image.rb\nclass MessageImage < ApplicationRecord\n  delegate :url, to: :value\n  belongs_to :message\n\n  mount_uploader :value, MessageImageUploader\n  def thumbnail_url\n    value.thumbnail.url\n  end\nend\n```\n\n```ruby:app/models/message_video.rb\nclass MessageVideo < ApplicationRecord\n  delegate :url, to: :value\n  delegate :url, to: :thumbnail, prefix: true\n\n  belongs_to :message\n\n  mount_uploader :thumbnail, MessageVideoThumbnailUploader\n  mount_uploader :value, MessageVideoUploader\n\nend\n```\n\n```ruby:app/models/message_audio.rb\nclass MessageAudio < ApplicationRecord\n  delegate :url, to: :value\n  belongs_to :message\n\n  mount_uploader :value, MessageAudioUploader\nend\n```\n\n```ruby:app/models/message_sticker.rb\nclass MessageLocation < ApplicationRecord\n  belongs_to :message\n\n  # latitude, longtitude\u306fdecimal\u3067\u5b9a\u7fa9\n  def lat\n    latitude.to_f\n  end\n\n  def long\n    longitude.to_f\n  end\nend\n```\n\n```ruby:app/models/message_sticker.rb\nclass MessageSticker < ApplicationRecord\n  belongs_to :message\nend\n```\n\n## Carrierwave\n\n```ruby:app/uploaders/base_uploader.rb\nclass BaseUploader < CarrierWave::Uploader::Base\n  if Rails.env.production?\n    storage :fog\n  else\n    storage :file\n  end\n\n  protected\n  def secure_token\n    var = :\"@#{mounted_as}_secure_token\"\n    model.instance_variable_get(var) || model.instance_variable_set(var, SecureRandom.uuid)\n  end\nend\n```\n\n```ruby:app/uploaders/message_image_uploader.rb\nclass MessageImageUploader < BaseUploader\n  include CarrierWave::RMagick\n\n  process :resize_to_limit => [1000, 1000]\n  version :thumbnail do\n    process :cut_out_square\n    process :resize_to_limit => [500, 500]\n  end\n  def cut_out_square\n    manipulate! do |img|\n      size = [img.columns, img.rows].min\n      img.resize_to_fill(size, size)\n    end\n  end\n\n  def store_dir\n    \"images/#{model.class.to_s.underscore}\"\n  end\n\n  def extension_white_list\n    %w(jpg)\n  end\n\n  def filename\n    \"#{secure_token}.jpg\" if original_filename.present?\n  end\nend\n```\n\n```ruby:app/uploaders/message_video_uploader.rb\nclass MessageVideoThumbnailUploader < BaseUploader\n  process :resize_to_limit => [240, 240]\n\n  def store_dir\n    \"images/#{model.class.to_s.underscore}\"\n  end\n\n  def extension_white_list\n    %w(jpg)\n  end\n\n  def filename\n    \"#{secure_token}.jpg\" if original_filename.present?\n  end\nend\n```\n\n```ruby:app/uploaders/message_video_uploader.rb\nclass MessageVideoUploader < BaseUploader\n  version :screenshot do\n    process :screenshot\n    def full_filename (*)\n      \"screenshot.jpg\"\n    end\n  end\n\n  def screenshot\n    tmpfile = File.join(File.dirname(current_path), \"tmpfile\")\n\n    File.rename(current_path, tmpfile)\n    movie = FFMPEG::Movie.new(tmpfile)\n    movie.screenshot(current_path + \".jpg\")\n    model.thumbnail = File.open(current_path + \".jpg\")\n\n    File.delete(tmpfile)\n  end\n\n  def store_dir\n    \"videos/#{model.class.to_s.underscore}\"\n  end\n\n  def extension_white_list\n    %w(mp4)\n  end\n\n  def filename\n    \"#{secure_token}.mp4\" if original_filename.present?\n  end\nend\n```\n\n```ruby:app/uploaders/message_audio_uploader.rb\nrequire \"audioinfo\"\n\nclass MessageAudioUploader < BaseUploader\n  process :audio_info\n\n  def store_dir\n    \"audios/#{model.class.to_s.underscore}\"\n  end\n\n  def extension_white_list\n    %w(m4a)\n  end\n\n  def filename\n    \"#{secure_token}.m4a\" if original_filename.present?\n  end\n\n  def audio_info\n    AudioInfo.open(current_path) do |info|\n      model.duration = info.length\n    end\n  end\nend\n```\n\n# monkey patch\nAudioInfo\u3067m4a\u3092initialize\u3059\u308b\u3068fork\u3092\u4f7f\u3063\u305f\u51e6\u7406\u3092\u5185\u90e8\u3067\u5b9f\u884c\u3057\u3066\u3001fork\u306e\u5b50\u30d7\u30ed\u30bb\u30b9\u304c\u9589\u3058\u305f\u6642\u306bmysql\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3082\u30af\u30ed\u30fc\u30ba\u3057\u3066mysql has gone away\u306b\u306a\u308b\u3002fork\u306e\u5b9f\u884c\u3057\u3066\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u51e6\u7406\u306f\u4eca\u56de\u4e0d\u8981\u306e\u305f\u3081override\u3059\u308b\n\n\n```ruby:lib/monkey_patches/audioinfo.rb\nrequire \"audioinfo\"\nclass AudioInfo\n  # \u4e2d\u3067fork\u51e6\u7406\u3092\u3057\u3066mysql has gone away\u306b\u306a\u308b\u3002\n  # \u5927\u3057\u305f\u60c5\u5831\u3068\u3063\u3066\u306a\u3044\u306e\u3067\u3001override\n  def faad_info(*)\n    \"\"\n  end\nend\n```\n\n# rspec\ncontroller\u306e\u30c6\u30b9\u30c8\u3060\u3051\n\n```ruby:spec/controllers/line_controller_spec.rb\nrequire 'rails_helper'\nrequire 'line/bot'\n\nTEXT_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325708\",\n        \"type\": \"text\",\n        \"text\":\"hello\"\n      }\n    }\n  ]\n}.freeze\n\nIMAGE_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325709\",\n        \"type\": \"image\"\n      }\n    }\n  ]\n}.freeze\n\nVIDEO_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325710\",\n        \"type\": \"video\"\n      }\n    }\n  ]\n}.freeze\n\nAUDIO_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325711\",\n        \"type\": \"audio\"\n      }\n    }\n  ]\n}.freeze\n\nLOCATION_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325712\",\n        \"type\": \"location\",\n        \"title\": \"my location\",\n        \"address\": \"tokyo\",\n        \"latitude\": 35.65910807942215,\n        \"longitude\": 139.70372892916203\n      }\n    }\n  ]\n}.freeze\n\nSTICKER_CONTENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"message\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      },\n      \"message\": {\n        \"id\":\"325709\",\n        \"type\": \"sticker\",\n        \"packageId\": \"1\",\n        \"stickerId\": \"1\"\n      }\n    }\n  ]\n}.freeze\n\nFOLLOW_EVENT = {\n  \"events\":[\n    {\n      \"replyToken\": \"nHuyWiB7yP5Zw52FIkcQobQuGDXCTA\",\n      \"type\": \"follow\",\n      \"timestamp\": 1462629479859,\n      \"source\": {\n        \"type\": \"user\",\n        \"userId\": \"u206d25c2ea6bd87c17655609a1c37cb8\"\n      }\n    }\n  ]\n}.freeze\n\nPROFILES_CONTENT = <<-EOS.freeze\n{\n  \"displayName\":\"BOT API1\",\n  \"userId\":\"u206d25c2ea6bd87c17655609a1c37cb8\",\n  \"pictureUrl\":\"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/325709/content\",\n  \"statusMessage\":\"Hello, LINE!\"\n}\nEOS\n\nIMAGE_FILE = Rack::Test::UploadedFile.new(File.join(Rails.root, 'spec', 'fixtures', 'files', 'sample.jpg'), \"image/png\")\nVIDEO_FILE = Rack::Test::UploadedFile.new(File.join(Rails.root, 'spec', 'fixtures', 'files', 'sample.mp4'), \"video/mp4\")\nAUDIO_FILE = Rack::Test::UploadedFile.new(File.join(Rails.root, 'spec', 'fixtures', 'files', 'sample.m4a'), \"audio/m4a\")\n\nWebMock.allow_net_connect!\n\nRSpec.describe LineController, type: :controller do\n  describe \"POST #echo\" do\n    before(:each) do\n      request.env[\"HTTP_ACCEPT\"] = 'application/json'\n      request.env[\"CONTENT_TYPE\"] = 'application/json'\n      allow_any_instance_of(Line::Bot::Client).to receive(:validate_signature).and_return(true)\n      stub_request(:get, Addressable::Template.new(\"#{Line::Bot::API::DEFAULT_ENDPOINT}/profile/{mids}\")).to_return { { body: PROFILES_CONTENT, status: 200} }\n      stub_request(:post, Addressable::Template.new(\"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/push\")).to_return { |request| {body: request.body, status: 200} }\n      stub_request(:post, Addressable::Template.new(\"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/reply\")).to_return { |request| {body: request.body, status: 200} }\n      FakeWeb.register_uri(:get, \"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/325709/content\", body: IMAGE_FILE, 'Content-Type' => \"image/png\")\n    end\n\n    it \"request message text\" do\n      expect do\n        post :callback, params: TEXT_CONTENT\n      end.to change(MessageText, :count).by(1)\n    end\n\n    it \"request message image\" do\n      expect do\n        post :callback, params: IMAGE_CONTENT\n      end.to change(MessageImage, :count).by(1)\n    end\n\n    it \"request message video\" do\n      FakeWeb.register_uri(:get, \"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/325710/content\", body: VIDEO_FILE, 'Content-Type' => \"video/mp4\")\n      expect do\n        post :callback, params: VIDEO_CONTENT\n      end.to change(MessageVideo, :count).by(1)\n    end\n    it \"request message audio\" do\n      FakeWeb.register_uri(:get, \"#{Line::Bot::API::DEFAULT_ENDPOINT}/message/325711/content\", body: AUDIO_FILE, 'Content-Type' => \"audio/m4a\")\n      expect do\n        post :callback, params: AUDIO_CONTENT\n      end.to change(MessageAudio, :count).by(1)\n    end\n\n    it \"request message location\" do\n      expect do\n        post :callback, params: LOCATION_CONTENT\n      end.to change(MessageLocation, :count).by(1)\n    end\n\n    it \"request message sticker\" do\n      expect do\n        post :callback, params: STICKER_CONTENT\n      end.to change(MessageSticker, :count).by(1)\n    end\n\n    it \"request follow event\" do\n      expect do\n        post :callback, params: FOLLOW_EVENT\n      end.to change(Message, :count).by(Constants::INITIAL_MESSAGES.size)\n    end\n  end\nend\n```\n\nfactorygirl\u306e\u97f3\u58f0\u3001\u52d5\u753b\u3001\u753b\u50cf\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u6e21\u305b\u3070\u4f5c\u3063\u3066\u304f\u308c\u308b\u3002\n\n```ruby:spec/factories/message_videos.rb\nFactoryGirl.define do\n  factory :message_video do\n    value { Rack::Test::UploadedFile.new(File.join(Rails.root, 'spec', 'fixtures', 'files', 'sample.mp4')) }\n    message { FactoryGirl.create :message }\n  end\nend\n```\n\n\n```yaml:circleci.yml\ndependencies:\n  pre:\n    - sudo apt-get update\n    - sudo apt-get install build-essential automake autoconf zlib1g-dev libtool libx264-dev yasm\n    - wget http://ffmpeg.org/releases/ffmpeg-2.6.tar.bz2\n    - tar xjf ffmpeg-2.6.tar.bz2\n    - cd ffmpeg-2.6 && ./configure --enable-libx264 --enable-gpl && make && sudo make install\n  cache_directories:\n    - ffmpeg-2.6\n```\n\n\u4eca\u56de\u306e\u30e9\u30a4\u30f3\u306eAPI\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u304b\u306a\u308a\u308f\u304b\u308a\u3084\u3059\u304f\u306a\u3063\u3066\u307e\u3059\u3002\n\u305f\u3060\u3001\u97f3\u58f0\u306e\u9577\u3055\u3068\u304b\u52d5\u753b\u306e\u30b9\u30af\u30b7\u30e7\u306fLine\u5185\u90e8\u3067\u4f5c\u3063\u3066\u3082\u3089\u3048\u305f\u3089\u3088\u308a\u5b9f\u88c5\u306f\u697d\u306b\u306a\u3063\u305f\u306e\u306b\u306a\u30fc\u3068\u601d\u3044\u307e\u3057\u305f\u3002\nhttps://devdocs.line.me/ja/#send-message-object\n", "tags": ["Rails", "linebot", "Line", "carrierwave", "RSpec"]}