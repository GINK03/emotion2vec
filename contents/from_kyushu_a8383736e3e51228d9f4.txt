{"tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u5341\u5b57\u306e\u58c1\u304c\u305d\u305d\u308a\u7acb\u3064\u4e16\u754c\u306e\u4e2d\u3092\u541b\u306f\u87ba\u65cb\u72b6\u306b\u6b69\u304f\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f90\u5206\u7a0b\u5ea6\u3002\n\u5225\u5b9f\u88c5\u309230\u5206\u7a0b\u5ea6\u3067\u66f8\u3044\u305f\u306e\u3060\u304c\u3001\u305d\u308c\u3060\u3068\u8ffd\u52a0\u554f\u984c\u306b\u5bfe\u5fdc\u3067\u304d\u306a\u304b\u3063\u305f\u3002\n\u8ffd\u52a0\u554f\u984c\u306b\u3082\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u518d\u5ea6\u5b9f\u88c5\u3057\u306a\u304a\u3057\u305f\u306e\u304c\u3053\u306e\u5b9f\u88c5\u3068\u306a\u308b\u3002\n\u8ffd\u52a0\u554f\u984c\u306b\u3064\u3044\u3066\u3082\u7b54\u3048\u304c\u8f09\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u4ed6\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3068\u540c\u3058\u5f62\u5f0f\u306b\u76f4\u3057\u3066\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306b\u8ffd\u52a0\u3059\u308b\u5f62\u3092\u53d6\u3063\u3066\u3044\u308b\u3002\nCrossWallWorld#rounding\u306eeach\u5185\u3067break\u3059\u308b\u3053\u3068\u3067\u672c\u6765self\u304c\u8fd4\u3063\u3066\u304f\u308b\u306f\u305a\u306a\u306e\u306b\u6570\u5024\u3092\u8fd4\u3057\u305f\u308a\u3001CrossWallWorld#go\u306einject\u3067\u6570\u5b57\u3092\u56de\u3057\u3066\u304a\u304d\u306a\u304c\u3089break\u3067Symbol\u3092\u8fd4\u3059\u3068\u3044\u3046\u306a\u3093\u3068\u3082\u6c17\u6301\u3061\u60aa\u3044\u5b9f\u88c5\u3092\u3057\u3066\u3044\u308b\u3002\n\u8aad\u307f\u8fd4\u3057\u3066\u3082\u3084\u3063\u3071\u308a\u6c17\u6301\u3061\u60aa\u3044\u306e\u3060\u304c\u3001\u4ed6\u306b\u3044\u3044\u3084\u308a\u65b9\u3082\u601d\u3044\u3064\u304b\u306a\u3044\u306e\u3067\u3053\u306e\u307e\u307e\u306b\u3057\u3066\u3044\u308b\u3002\nclass CrossWallWorld\n  def travel input\n    wall, days = input.split \":\"\n    @north, @east, @south, @west = wall.split(\",\").map &:to_i\n    go *rounding(days.to_i)\n  end\n\n  private\n\n  def rounding days\n    c = (1..Float::INFINITY).each{|c, _|\n      r = @north * 2 + @east * 2 + @south * 2 + @west * 2 + c * 8\n      break c if days < r\n      days -= r\n    }\n    [days, c]\n  end\n\n  def go days, count\n    [\n      [@east,  :E], [count * 2, :S], [@east,      :W],\n      [@south, :S], [count * 2, :W], [@south,     :N],\n      [@west,  :W], [count * 2, :N], [@west,      :E],\n      [@north, :N], [count * 2, :E], [@north - 1, :S],\n      [@east,  :E]\n    ].inject(0){|d, (len, way)|\n      break way if days < (d + len)\n      d + len\n    }.to_s\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"2,3,5,4:85\", \"S\" );    \n/*1*/ test( \"1,2,3,4:1\", \"E\" );    \n/*2*/ test( \"1,2,3,4:2\", \"S\" );    \n/*3*/ test( \"1,2,3,4:3\", \"S\" );    \n/*4*/ test( \"1,2,3,4:4\", \"W\" );    \n/*5*/ test( \"1,2,3,4:27\", \"E\" );    \n/*6*/ test( \"1,2,3,4:63\", \"E\" );    \n/*7*/ test( \"1,2,3,4:40\", \"W\" );    \n/*8*/ test( \"1,4,3,2:40\", \"S\" );    \n/*9*/ test( \"3,3,3,3:30\", \"S\" );    \n/*10*/ test( \"3,3,3,3:31\", \"E\" );    \n/*11*/ test( \"3,3,3,3:32\", \"E\" );    \n/*12*/ test( \"3,3,3,3:70\", \"S\" );    \n/*13*/ test( \"3,3,3,3:71\", \"E\" );    \n/*14*/ test( \"3,3,3,3:72\", \"E\" );    \n/*15*/ test( \"1,1,1,1:7\", \"N\" );    \n/*16*/ test( \"1,2,1,1:7\", \"W\" );    \n/*17*/ test( \"1,6,1,1:7\", \"S\" );    \n/*18*/ test( \"1,8,1,1:7\", \"E\" );    \n/*19*/ test( \"1,1,1,1:30\", \"N\" );    \n/*20*/ test( \"1,2,1,1:30\", \"W\" );    \n/*21*/ test( \"1,5,1,1:30\", \"S\" );    \n/*22*/ test( \"1,8,1,1:30\", \"E\" );    \n/*23*/ test( \"9,9,9,9:99\", \"W\" );    \n/*24*/ test( \"5,6,3,8:3\", \"E\" );    \n/*25*/ test( \"5,8,1,1:11\", \"W\" );    \n/*26*/ test( \"2,8,1,2:18\", \"S\" );    \n/*27*/ test( \"3,2,3,1:20\", \"N\" );    \n/*28*/ test( \"3,3,8,1:28\", \"N\" );    \n/*29*/ test( \"2,5,1,2:32\", \"E\" );    \n/*30*/ test( \"2,5,1,6:33\", \"E\" );    \n/*31*/ test( \"1,2,5,7:34\", \"N\" );    \n/*32*/ test( \"3,6,5,6:36\", \"E\" );    \n/*33*/ test( \"6,2,8,1:39\", \"S\" );    \n/*34*/ test( \"3,1,2,3:41\", \"W\" );    \n/*35*/ test( \"1,1,3,4:45\", \"W\" );    \n/*36*/ test( \"1,3,1,2:46\", \"N\" );    \n/*37*/ test( \"4,4,4,4:49\", \"W\" );    \n/*38*/ test( \"3,1,4,4:55\", \"N\" );    \n/*39*/ test( \"6,6,2,1:56\", \"W\" );    \n/*40*/ test( \"3,2,1,2:59\", \"S\" );    \n/*41*/ test( \"2,7,7,1:60\", \"S\" );    \n/*42*/ test( \"3,1,1,1:63\", \"N\" );    \n/*43*/ test( \"4,6,4,1:78\", \"E\" );    \n/*44*/ test( \"7,5,3,6:79\", \"W\" );    \n/*45*/ test( \"7,8,3,1:81\", \"E\" );    \n/*46*/ test( \"3,2,5,2:82\", \"S\" );    \n/*47*/ test( \"1,1,3,4:84\", \"N\" );    \n/*48*/ test( \"7,4,1,5:88\", \"S\" );    \n/*49*/ test( \"3,6,5,3:89\", \"S\" );    \n/*50*/ test( \"1,4,2,3:92\", \"N\" );    \n/*51*/ test( \"1,3,4,5:93\", \"W\" );    \n/*52*/ test( \"2,4,8,1:94\", \"W\" );    \n/*53*/ test( \"3,6,1,7:99\", \"S\" );\n/*54*/ test( \"1234,2345,3456,4567:978593417\", \"E\" );\n/*55*/ test( \"1234,2345,3456,4567:978593418\", \"S\" );\n/*56*/ test( \"31415,92653,58979,32384:9812336139\", \"W\" );\n/*57*/ test( \"31415,92653,58979,32384:9812336140\", \"S\" );\n/*58*/ test( \"314159,265358,979323,84626:89099331642\", \"S\" );\n/*59*/ test( \"314159,265358,979323,84626:89099331643\", \"W\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'CrossWallWorld' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);*\\s*$/).to_a\n    world = CrossWallWorld.new\n    it input do\n      assert_equal expect, world.travel(input)\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u5341\u5b57\u306e\u58c1\u304c\u305d\u305d\u308a\u7acb\u3064\u4e16\u754c\u306e\u4e2d\u3092\u541b\u306f\u87ba\u65cb\u72b6\u306b\u6b69\u304f](http://nabetani.sakura.ne.jp/hena/ord28spirwa/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f90\u5206\u7a0b\u5ea6\u3002\n\n\u5225\u5b9f\u88c5\u309230\u5206\u7a0b\u5ea6\u3067\u66f8\u3044\u305f\u306e\u3060\u304c\u3001\u305d\u308c\u3060\u3068\u8ffd\u52a0\u554f\u984c\u306b\u5bfe\u5fdc\u3067\u304d\u306a\u304b\u3063\u305f\u3002\n\u8ffd\u52a0\u554f\u984c\u306b\u3082\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u518d\u5ea6\u5b9f\u88c5\u3057\u306a\u304a\u3057\u305f\u306e\u304c\u3053\u306e\u5b9f\u88c5\u3068\u306a\u308b\u3002\n\u8ffd\u52a0\u554f\u984c\u306b\u3064\u3044\u3066\u3082\u7b54\u3048\u304c\u8f09\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u4ed6\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3068\u540c\u3058\u5f62\u5f0f\u306b\u76f4\u3057\u3066\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306b\u8ffd\u52a0\u3059\u308b\u5f62\u3092\u53d6\u3063\u3066\u3044\u308b\u3002\n`CrossWallWorld#rounding`\u306e`each`\u5185\u3067`break`\u3059\u308b\u3053\u3068\u3067\u672c\u6765`self`\u304c\u8fd4\u3063\u3066\u304f\u308b\u306f\u305a\u306a\u306e\u306b\u6570\u5024\u3092\u8fd4\u3057\u305f\u308a\u3001`CrossWallWorld#go`\u306e`inject`\u3067\u6570\u5b57\u3092\u56de\u3057\u3066\u304a\u304d\u306a\u304c\u3089`break`\u3067`Symbol`\u3092\u8fd4\u3059\u3068\u3044\u3046\u306a\u3093\u3068\u3082\u6c17\u6301\u3061\u60aa\u3044\u5b9f\u88c5\u3092\u3057\u3066\u3044\u308b\u3002\n\u8aad\u307f\u8fd4\u3057\u3066\u3082\u3084\u3063\u3071\u308a\u6c17\u6301\u3061\u60aa\u3044\u306e\u3060\u304c\u3001\u4ed6\u306b\u3044\u3044\u3084\u308a\u65b9\u3082\u601d\u3044\u3064\u304b\u306a\u3044\u306e\u3067\u3053\u306e\u307e\u307e\u306b\u3057\u3066\u3044\u308b\u3002\n\n```ruby\nclass CrossWallWorld\n  def travel input\n    wall, days = input.split \":\"\n    @north, @east, @south, @west = wall.split(\",\").map &:to_i\n    go *rounding(days.to_i)\n  end\n\n  private\n\n  def rounding days\n    c = (1..Float::INFINITY).each{|c, _|\n      r = @north * 2 + @east * 2 + @south * 2 + @west * 2 + c * 8\n      break c if days < r\n      days -= r\n    }\n    [days, c]\n  end\n\n  def go days, count\n    [\n      [@east,  :E], [count * 2, :S], [@east,      :W],\n      [@south, :S], [count * 2, :W], [@south,     :N],\n      [@west,  :W], [count * 2, :N], [@west,      :E],\n      [@north, :N], [count * 2, :E], [@north - 1, :S],\n      [@east,  :E]\n    ].inject(0){|d, (len, way)|\n      break way if days < (d + len)\n      d + len\n    }.to_s\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"2,3,5,4:85\", \"S\" );    \n/*1*/ test( \"1,2,3,4:1\", \"E\" );    \n/*2*/ test( \"1,2,3,4:2\", \"S\" );    \n/*3*/ test( \"1,2,3,4:3\", \"S\" );    \n/*4*/ test( \"1,2,3,4:4\", \"W\" );    \n/*5*/ test( \"1,2,3,4:27\", \"E\" );    \n/*6*/ test( \"1,2,3,4:63\", \"E\" );    \n/*7*/ test( \"1,2,3,4:40\", \"W\" );    \n/*8*/ test( \"1,4,3,2:40\", \"S\" );    \n/*9*/ test( \"3,3,3,3:30\", \"S\" );    \n/*10*/ test( \"3,3,3,3:31\", \"E\" );    \n/*11*/ test( \"3,3,3,3:32\", \"E\" );    \n/*12*/ test( \"3,3,3,3:70\", \"S\" );    \n/*13*/ test( \"3,3,3,3:71\", \"E\" );    \n/*14*/ test( \"3,3,3,3:72\", \"E\" );    \n/*15*/ test( \"1,1,1,1:7\", \"N\" );    \n/*16*/ test( \"1,2,1,1:7\", \"W\" );    \n/*17*/ test( \"1,6,1,1:7\", \"S\" );    \n/*18*/ test( \"1,8,1,1:7\", \"E\" );    \n/*19*/ test( \"1,1,1,1:30\", \"N\" );    \n/*20*/ test( \"1,2,1,1:30\", \"W\" );    \n/*21*/ test( \"1,5,1,1:30\", \"S\" );    \n/*22*/ test( \"1,8,1,1:30\", \"E\" );    \n/*23*/ test( \"9,9,9,9:99\", \"W\" );    \n/*24*/ test( \"5,6,3,8:3\", \"E\" );    \n/*25*/ test( \"5,8,1,1:11\", \"W\" );    \n/*26*/ test( \"2,8,1,2:18\", \"S\" );    \n/*27*/ test( \"3,2,3,1:20\", \"N\" );    \n/*28*/ test( \"3,3,8,1:28\", \"N\" );    \n/*29*/ test( \"2,5,1,2:32\", \"E\" );    \n/*30*/ test( \"2,5,1,6:33\", \"E\" );    \n/*31*/ test( \"1,2,5,7:34\", \"N\" );    \n/*32*/ test( \"3,6,5,6:36\", \"E\" );    \n/*33*/ test( \"6,2,8,1:39\", \"S\" );    \n/*34*/ test( \"3,1,2,3:41\", \"W\" );    \n/*35*/ test( \"1,1,3,4:45\", \"W\" );    \n/*36*/ test( \"1,3,1,2:46\", \"N\" );    \n/*37*/ test( \"4,4,4,4:49\", \"W\" );    \n/*38*/ test( \"3,1,4,4:55\", \"N\" );    \n/*39*/ test( \"6,6,2,1:56\", \"W\" );    \n/*40*/ test( \"3,2,1,2:59\", \"S\" );    \n/*41*/ test( \"2,7,7,1:60\", \"S\" );    \n/*42*/ test( \"3,1,1,1:63\", \"N\" );    \n/*43*/ test( \"4,6,4,1:78\", \"E\" );    \n/*44*/ test( \"7,5,3,6:79\", \"W\" );    \n/*45*/ test( \"7,8,3,1:81\", \"E\" );    \n/*46*/ test( \"3,2,5,2:82\", \"S\" );    \n/*47*/ test( \"1,1,3,4:84\", \"N\" );    \n/*48*/ test( \"7,4,1,5:88\", \"S\" );    \n/*49*/ test( \"3,6,5,3:89\", \"S\" );    \n/*50*/ test( \"1,4,2,3:92\", \"N\" );    \n/*51*/ test( \"1,3,4,5:93\", \"W\" );    \n/*52*/ test( \"2,4,8,1:94\", \"W\" );    \n/*53*/ test( \"3,6,1,7:99\", \"S\" );\n/*54*/ test( \"1234,2345,3456,4567:978593417\", \"E\" );\n/*55*/ test( \"1234,2345,3456,4567:978593418\", \"S\" );\n/*56*/ test( \"31415,92653,58979,32384:9812336139\", \"W\" );\n/*57*/ test( \"31415,92653,58979,32384:9812336140\", \"S\" );\n/*58*/ test( \"314159,265358,979323,84626:89099331642\", \"S\" );\n/*59*/ test( \"314159,265358,979323,84626:89099331643\", \"W\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'CrossWallWorld' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);*\\s*$/).to_a\n    world = CrossWallWorld.new\n    it input do\n      assert_equal expect, world.travel(input)\n    end\n  end\nend\n```\n"}