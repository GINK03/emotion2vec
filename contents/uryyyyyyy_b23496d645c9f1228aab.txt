{"tags": ["Scala", "DI"], "context": " More than 1 year has passed since last update.\n\nOutline\nScala\u3067DI\u3092\u3061\u3083\u3093\u3068\u8003\u3048\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u3001\u3053\u3053\u3092\u53c2\u8003\u306bcakePattern\u3068\u304b\u8272\u3005\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://eed3si9n.com/ja/real-world-scala-dependency-injection-di\n\u3067\u3082\u5168\u4f53\u7684\u306b\u4f55\u304c\u5b09\u3057\u3044\u306e\u304b\u898b\u3048\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u624b\u6bb5\u304b\u3089\u5165\u308b\u306e\u3092\u3084\u3081\u3066\u3001\n\u4f55\u304c\u3067\u304d\u308c\u3070\u5b09\u3057\u3044\u306e\u304b\u3092\u660e\u78ba\u306b\u3057\u3066\u304b\u3089\u4e00\u756a\u30b7\u30f3\u30d7\u30eb\u306b\u305d\u308c\u304c\u9054\u6210\u3067\u304d\u305d\u3046\u306a\u3082\u306e\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\nPremise\nSpringMVC\u306e\u8a2d\u8a08\u307f\u305f\u304f\u3001\nController\u2192Service\u2192Repository\n\n\u306e\u4f9d\u5b58\u95a2\u4fc2\u304c\u3042\u308b\u3068\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u4eca\u56de\u306fRDB\u3092\u6271\u3044\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u7ba1\u7406\u306fService\u3067\u3084\u308b\u3068\u3057\u307e\u3059\u3002\n\nGoal\n\u30fb\u5404Object\u3067\u3001mock\u3092\u5dee\u3057\u8fbc\u3093\u3060\u5358\u4f53\u30c6\u30b9\u30c8\u304c\u5bb9\u6613\u306b\u884c\u3048\u308b\u3002\n\u30fbUI\u78ba\u8a8d\u7528\u306b\u3001config\u3092\u66f8\u304d\u63db\u3048\u308b\u3068\u5b9f\u884c\u6642\u306bMock\u306eService\u304c\u52d5\u304f\u3088\u3046\u306b\u3059\u308b\u3002\n\u30fb\uff08\u4e0a\u8a18\u3092\u5b9f\u73fe\u3057\u3064\u3064\u3001\u30dc\u30a4\u30e9\u2212\u30d7\u30ec\u30fc\u30c8\u304c\u5c11\u306a\u304f\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u69cb\u6210\u306b\u306a\u308b\u3088\u3046\u306b\u3002\uff09\n\nHow\nlazy val\u3067\u5b9a\u7fa9\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306bMock\u3092override\u3059\u308b\u3002\n\nCode\nclass MyController {\n    lazy val myService:MyService = MyFactory.getMyService()\n    def action() = println(myService.process())\n}\n\nobject MyFactory{\n    def getMyService() = {\n        new MyServiceImpl\n\n        //      if(Config.mode = \"Prod\"){\n        //          new MyServiceImpl\n        //      }else{\n        //          new MyServiceMock\n        //      }\n\n    }\n}\n\ntrait MyService {\n    def process(): String\n}\n\nclass MyServiceImpl extends MyService{\n    lazy val pool = new ConnectionPool\n    lazy val myDao = new MyRepository\n\n    override def process() = {\n        implicit val con = pool.getConnection()\n        myDao.fetchData\n    }\n}\n\nclass MyServiceMock extends MyService{\n\n    override def process() = {\n        \"mock\"\n    }\n}\n\nclass MyRepository {\n    def fetchData(implicit dbCon: String): String = {\n        \"aa from \" + dbCon\n    }\n}\n\nclass ConnectionPool{\n    def getConnection() = \"real Connection\"\n}\n\n\n\n\u672c\u756a\u6642\u306f\u3053\u306e\u3088\u3046\u306b\u3002\nobject Main {\n\n    def main(args: Array[String]) {\n        val controller = new MyController()\n        controller.action()\n    }\n\n}\n\n\u30c6\u30b9\u30c8\u6642\u306f\u3053\u306e\u3088\u3046\u306b\u3002\nclass Test extends FunSuite{\n\n    test(\"testMyController\") {\n        val controller = new MyController(){override lazy val myService = new MyService {\n            override def process(): String = \"mock\"\n        }}\n        controller.action()\n    }\n\n    test(\"testMyServiceImpl\") {\n        val mockDao = new MyRepository {\n            override def fetchData(implicit dbConnection: String): String = \"mock Fetch\"\n        }\n\n        val poolMock = new ConnectionPool {\n            override def getConnection() = \"mock Fetch\"\n        }\n        val service = new MyServiceImpl{\n            override lazy val pool = poolMock\n            override lazy val myDao = mockDao\n        }\n        assert(service.process() == \"mock Fetch\")\n    }\n\n    test(\"testMyDaoImpl\") {\n        val repo = new MyRepository\n        val mockDBCon = \"mock\"\n        assert(repo.fetchData(mockDBCon) == \"aa from mock\")\n    }\n\n}\n\n\n\nConclusion\n\u5177\u8c61\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u4f9d\u5b58\u3059\u308b\u306e\u304c\u30ad\u30e2\u3044\u3002\u3002\n\u3067\u3082\u305d\u308c\u4ee5\u5916\u306f\u554f\u984c\u306a\u3044\u306e\u3067\u306f\uff1f\ncakePattern\u3068\u304b\u306f\u3069\u3046\u3044\u3046\u6642\u306b\u771f\u4fa1\u3092\u767a\u63ee\u3059\u308b\u306e\u304b\u3068\u304b\u3001\u8ab0\u304b\u30de\u30b5\u30ab\u30ea\u304f\u3060\u3055\u3044\u3002\n## Outline\n\nScala\u3067DI\u3092\u3061\u3083\u3093\u3068\u8003\u3048\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u3001\u3053\u3053\u3092\u53c2\u8003\u306bcakePattern\u3068\u304b\u8272\u3005\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://eed3si9n.com/ja/real-world-scala-dependency-injection-di\n\n\u3067\u3082\u5168\u4f53\u7684\u306b\u4f55\u304c\u5b09\u3057\u3044\u306e\u304b\u898b\u3048\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u624b\u6bb5\u304b\u3089\u5165\u308b\u306e\u3092\u3084\u3081\u3066\u3001\n\u4f55\u304c\u3067\u304d\u308c\u3070\u5b09\u3057\u3044\u306e\u304b\u3092\u660e\u78ba\u306b\u3057\u3066\u304b\u3089\u4e00\u756a\u30b7\u30f3\u30d7\u30eb\u306b\u305d\u308c\u304c\u9054\u6210\u3067\u304d\u305d\u3046\u306a\u3082\u306e\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n## Premise\n\nSpringMVC\u306e\u8a2d\u8a08\u307f\u305f\u304f\u3001\n\n```\nController\u2192Service\u2192Repository\n```\n\n\u306e\u4f9d\u5b58\u95a2\u4fc2\u304c\u3042\u308b\u3068\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u4eca\u56de\u306fRDB\u3092\u6271\u3044\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306e\u7ba1\u7406\u306fService\u3067\u3084\u308b\u3068\u3057\u307e\u3059\u3002\n\n## Goal\n\n\u30fb\u5404Object\u3067\u3001mock\u3092\u5dee\u3057\u8fbc\u3093\u3060\u5358\u4f53\u30c6\u30b9\u30c8\u304c\u5bb9\u6613\u306b\u884c\u3048\u308b\u3002\n\u30fbUI\u78ba\u8a8d\u7528\u306b\u3001config\u3092\u66f8\u304d\u63db\u3048\u308b\u3068\u5b9f\u884c\u6642\u306bMock\u306eService\u304c\u52d5\u304f\u3088\u3046\u306b\u3059\u308b\u3002\n\u30fb\uff08\u4e0a\u8a18\u3092\u5b9f\u73fe\u3057\u3064\u3064\u3001\u30dc\u30a4\u30e9\u2212\u30d7\u30ec\u30fc\u30c8\u304c\u5c11\u306a\u304f\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u69cb\u6210\u306b\u306a\u308b\u3088\u3046\u306b\u3002\uff09\n\n## How\n\nlazy val\u3067\u5b9a\u7fa9\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306bMock\u3092override\u3059\u308b\u3002\n\n\n## Code\n\n```scala\nclass MyController {\n\tlazy val myService:MyService = MyFactory.getMyService()\n\tdef action() = println(myService.process())\n}\n\nobject MyFactory{\n\tdef getMyService() = {\n\t\tnew MyServiceImpl\n\n\t\t//\t\tif(Config.mode = \"Prod\"){\n\t\t//\t\t\tnew MyServiceImpl\n\t\t//\t\t}else{\n\t\t//\t\t\tnew MyServiceMock\n\t\t//\t\t}\n\n\t}\n}\n\ntrait MyService {\n\tdef process(): String\n}\n\nclass MyServiceImpl extends MyService{\n\tlazy val pool = new ConnectionPool\n\tlazy val myDao = new MyRepository\n\n\toverride def process() = {\n\t\timplicit val con = pool.getConnection()\n\t\tmyDao.fetchData\n\t}\n}\n\nclass MyServiceMock extends MyService{\n\n\toverride def process() = {\n\t\t\"mock\"\n\t}\n}\n\nclass MyRepository {\n\tdef fetchData(implicit dbCon: String): String = {\n\t\t\"aa from \" + dbCon\n\t}\n}\n\nclass ConnectionPool{\n\tdef getConnection() = \"real Connection\"\n}\n\n\n```\n\n\n\n\u672c\u756a\u6642\u306f\u3053\u306e\u3088\u3046\u306b\u3002\n\n\n```scala\nobject Main {\n\n\tdef main(args: Array[String]) {\n\t\tval controller = new MyController()\n\t\tcontroller.action()\n\t}\n\n}\n```\n\n\u30c6\u30b9\u30c8\u6642\u306f\u3053\u306e\u3088\u3046\u306b\u3002\n\n```scala\nclass Test extends FunSuite{\n\n\ttest(\"testMyController\") {\n\t\tval controller = new MyController(){override lazy val myService = new MyService {\n\t\t\toverride def process(): String = \"mock\"\n\t\t}}\n\t\tcontroller.action()\n\t}\n\n\ttest(\"testMyServiceImpl\") {\n\t\tval mockDao = new MyRepository {\n\t\t\toverride def fetchData(implicit dbConnection: String): String = \"mock Fetch\"\n\t\t}\n\n\t\tval poolMock = new ConnectionPool {\n\t\t\toverride def getConnection() = \"mock Fetch\"\n\t\t}\n\t\tval service = new MyServiceImpl{\n\t\t\toverride lazy val pool = poolMock\n\t\t\toverride lazy val myDao = mockDao\n\t\t}\n\t\tassert(service.process() == \"mock Fetch\")\n\t}\n\n\ttest(\"testMyDaoImpl\") {\n\t\tval repo = new MyRepository\n\t\tval mockDBCon = \"mock\"\n\t\tassert(repo.fetchData(mockDBCon) == \"aa from mock\")\n\t}\n\n}\n\n```\n\n## Conclusion\n\n\u5177\u8c61\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u4f9d\u5b58\u3059\u308b\u306e\u304c\u30ad\u30e2\u3044\u3002\u3002\n\u3067\u3082\u305d\u308c\u4ee5\u5916\u306f\u554f\u984c\u306a\u3044\u306e\u3067\u306f\uff1f\n\ncakePattern\u3068\u304b\u306f\u3069\u3046\u3044\u3046\u6642\u306b\u771f\u4fa1\u3092\u767a\u63ee\u3059\u308b\u306e\u304b\u3068\u304b\u3001\u8ab0\u304b\u30de\u30b5\u30ab\u30ea\u304f\u3060\u3055\u3044\u3002\n"}