{"context": " More than 1 year has passed since last update.\u5165\u529b\u304b\u3089\u7a7a\u767d\u3092\u524a\u308a\u305f\u3044\u3068\u3044\u3063\u305f\u8981\u4ef6\u304c\u305f\u307e\u306b\u3042\u308b\u304c\u3001\u7a7a\u767d\u3068\u4e00\u8a00\u3067\u8a00\u3063\u3066\u3082\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u30fb\u5168\u89d2\u30b9\u30da\u30fc\u30b9\u3060\u3051\u3067\u306a\u304f\u3001\u30e6\u30cb\u30b3\u30fc\u30c9\u306b\u306f\u69d8\u3005\u306a\u7a7a\u767d\u6587\u5b57\u304c\u3042\u308b\u3002\u8abf\u3079\u305f\u7bc4\u56f2\u3067\u306f29\u7a2e\u985e\u3042\u3063\u305f\u3002\u3053\u308c\u3089\u306e\u7a7a\u767d\u6587\u5b57\u3092\u6b63\u898f\u8868\u73fe\u3067\u4e00\u7db2\u6253\u5c3d\u3059\u308b\u65b9\u6cd5\u306f\u306a\u3044\u304b\u691c\u8a3c\u3057\u3066\u307f\u305f\u3002\u691c\u8a3c\u306e\u305f\u3081\u306b\u7528\u3044\u305f\u30b3\u30fc\u30c9\u306f\u3001\u3053\u306e\u8a18\u4e8b\u306e\u6700\u5f8c\u306b\u8f09\u305b\u3066\u3042\u308b\u3002\n\n\u691c\u8a3c\u7d50\u679c\n\u691c\u8a3c\u7d50\u679c\u306f\u4e0b\u306e\u8868\u306b\u307e\u3068\u3081\u305f\u3002\u5404\u884c\u304c\u7a7a\u767d\u6587\u5b57\u306b\u3001\u5404\u5217\u304c\u6b63\u898f\u8868\u73fe\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u305d\u306e\u6587\u5b57\u304c\u305d\u306e\u6b63\u898f\u8868\u73fe\u3067\u30de\u30c3\u30c1\u3057\u305f\u3082\u306e\u306b\u306f\u300co\u300d\u3092\u4ed8\u3051\u305f\u3002\n\n\n\ncode\nname\n\\p{javaWhitespace}\n\\p{javaSpaceChar}\n\\p{Zs}\n\\s\n\\p{Blank}\n\u898b\u305f\u76ee\n\n\n\n\n\\u0009\nHORIZONTAL TABULATION\no\n\n\no\no\n\nfoo\\u0009bar\n\n\n\n\\u000A\nLINE FEED\no\n\n\no\n\n\nfoo\\u000Abar\n\n\n\n\\u000B\nVERTICAL TABULATION\no\n\n\no\n\n\nfoo\\u000Bbar\n\n\n\n\\u000C\nFORM FEED\no\n\n\no\n\n\nfoo\\u000Cbar\n\n\n\n\\u000D\nCARRIAGE RETURN\no\n\n\no\n\n\nfoo\\u000Dbar\n\n\n\n\\u001C\nFILE SEPARATOR\no\n\n\n\n\n\nfoo\\u001Cbar\n\n\n\n\\u001D\nGROUP SEPARATOR\no\n\n\n\n\n\nfoo\\u001Dbar\n\n\n\n\\u001E\nRECORD SEPARATOR\no\n\n\n\n\n\nfoo\\u001Ebar\n\n\n\n\\u001F\nUNIT SEPARATOR\no\n\n\n\n\n\nfoo\\u001Fbar\n\n\n\n\\u0020\nSPACE\no\no\no\no\no\n\nfoo bar\n\n\n\n\\u00A0\nNO-BREAK SPACE\n\no\no\n\n\n\nfoo\u00a0bar\n\n\n\n\\u1680\nOGHAM SPACE MARK\no\no\no\n\n\n\nfoo\u1680bar\n\n\n\n\\u180E\nMONGOLIAN VOWEL SEPARATOR\no\no\no\n\n\n\nfoo\u180ebar\n\n\n\n\\u2000\nEN QUAD\no\no\no\n\n\n\nfoo\u2002bar\n\n\n\n\\u2001\nEM QUAD\no\no\no\n\n\n\nfoo\u2003bar\n\n\n\n\\u2002\nEN SPACE\no\no\no\n\n\n\nfoo\u2002bar\n\n\n\n\\u2003\nEM SPACE\no\no\no\n\n\n\nfoo\u2003bar\n\n\n\n\\u2004\nTHREE-PER-EM SPACE\no\no\no\n\n\n\nfoo\u2004bar\n\n\n\n\\u2005\nFOUR-PER-EM SPACE\no\no\no\n\n\n\nfoo\u2005bar\n\n\n\n\\u2006\nSIX-PER-EM SPACE\no\no\no\n\n\n\nfoo\u2006bar\n\n\n\n\\u2007\nFIGURE SPACE\n\no\no\n\n\n\nfoo\u2007bar\n\n\n\n\\u2008\nPUNCTUATION SPACE\no\no\no\n\n\n\nfoo\u2008bar\n\n\n\n\\u2009\nTHIN SPACE\no\no\no\n\n\n\nfoo\u2009bar\n\n\n\n\\u200A\nHAIR SPACE\no\no\no\n\n\n\nfoo\u200abar\n\n\n\n\\u200B\nZERO WIDTH SPACE\n\n\n\n\n\n\nfoobar\n\n\n\n\\u202F\nNARROW NO-BREAK SPACE\n\no\no\n\n\n\nfoo\u202fbar\n\n\n\n\\u205F\nMEDIUM MATHEMATICAL SPACE\no\no\no\n\n\n\nfoo\u205fbar\n\n\n\n\\u3000\nIDEOGRAPHIC SPACE\no\no\no\n\n\n\nfoo\u3000bar\n\n\n\n\\uFEFF\nZERO WIDTH NO-BREAK SPACE\n\n\n\n\n\n\nfoobar\n\n\n\n\n\n\u5168\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u8a00\u308f\u308c\u308b\u3082\u306e\u306f\u3053\u306e\u8868\u3067\u306f \\u3000 \u306b\u306a\u308b\u3002\n\\u001F \u4ee5\u4e0b\u306e\u6587\u5b57\u306fMarkdown\u3067\u8868\u793a\u3057\u304d\u308c\u306a\u3044\u3082\u306e\u304c\u3042\u308b\u306e\u3067\u898b\u305f\u76ee\u306b\u306f\u53cd\u6620\u3057\u3066\u3044\u306a\u3044\u3002\n\n\\p{javaWhitespace} \u306f java.lang.Character \u306e isWhitespace \u3068\u540c\u3058\u3082\u306e\u3089\u3057\u3044\u304c\u3001\u4e00\u756a\u591a\u304f\u7a7a\u767d\u6587\u5b57\u306b\u30de\u30c3\u30c1\u3057\u305f\u3002\u305d\u308c\u3067\u3082\u3001\u30de\u30c3\u30c1\u3057\u306a\u3044\u6587\u5b57\u3082\u3042\u3063\u305f\u306e\u3067\u3001\\p{javaWhitespace}\u3068\u30e6\u30cb\u30b3\u30fc\u30c9\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u6b63\u898f\u8868\u73fe\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3002\n\u5168\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u30bf\u30d6\u304f\u3089\u3044\u306b\u30de\u30c3\u30c1\u3059\u308c\u3070\u3044\u3044\u8981\u4ef6\u306a\u3089\u3001\\p{javaSpaceChar} \u3084 \\p{Zs} \u3067\u5341\u5206\u3002\n\n\u691c\u8a3c\u7528\u30b3\u30fc\u30c9\nimport org.scalatest._\n\nclass CompilationSpec extends FeatureSpec with GivenWhenThen with BeforeAndAfter with ParallelTestExecution with Matchers {\n  feature(\"Playground\") {\n    scenario(\"test \\\\p{javaSpaceChar}\") {\n      def isS(char: String) = \"\"\"\\s\"\"\".r.findFirstIn(char).nonEmpty\n      def isZs(char: String) = \"\"\"\\p{Zs}\"\"\".r.findFirstIn(char).nonEmpty\n      def isJavaSpaceChar(char: String) = \"\"\"\\p{javaSpaceChar}\"\"\".r.findFirstIn(char).nonEmpty\n      def isJavaWhitespace(char: String) = \"\"\"\\p{javaWhitespace}\"\"\".r.findFirstIn(char).nonEmpty\n      def isBlank(char: String) = \"\"\"\\p{Blank}\"\"\".r.findFirstIn(char).nonEmpty\n\n      implicit class MyBoolean(bool: Boolean) {\n        def o: String = {\n          bool match {\n            case true  => \"o\"\n            case false => \"\"\n          }\n        }\n      }\n\n      val unicodeSpaces = Seq(\n        Seq(\"\\u0009\", \"HORIZONTAL TABULATION\"),\n        Seq(\"\\u000A\", \"LINE FEED\"),\n        Seq(\"\\u000B\", \"VERTICAL TABULATION\"),\n        Seq(\"\\u000C\", \"FORM FEED\"),\n        Seq(\"\\u000D\", \"CARRIAGE RETURN\"),\n        Seq(\"\\u001C\", \"FILE SEPARATOR\"),\n        Seq(\"\\u001D\", \"GROUP SEPARATOR\"),\n        Seq(\"\\u001E\", \"RECORD SEPARATOR\"),\n        Seq(\"\\u001F\", \"UNIT SEPARATOR\"),\n        Seq(\"\\u0020\", \"SPACE\"),\n        Seq(\"\\u00A0\", \"NO-BREAK SPACE\"),\n        Seq(\"\\u1680\", \"OGHAM SPACE MARK\"),\n        Seq(\"\\u180E\", \"MONGOLIAN VOWEL SEPARATOR\"),\n        Seq(\"\\u2000\", \"EN QUAD\"),\n        Seq(\"\\u2001\", \"EM QUAD\"),\n        Seq(\"\\u2002\", \"EN SPACE\"),\n        Seq(\"\\u2003\", \"EM SPACE\"),\n        Seq(\"\\u2004\", \"THREE-PER-EM SPACE\"),\n        Seq(\"\\u2005\", \"FOUR-PER-EM SPACE\"),\n        Seq(\"\\u2006\", \"SIX-PER-EM SPACE\"),\n        Seq(\"\\u2007\", \"FIGURE SPACE\"),\n        Seq(\"\\u2008\", \"PUNCTUATION SPACE\"),\n        Seq(\"\\u2009\", \"THIN SPACE\"),\n        Seq(\"\\u200A\", \"HAIR SPACE\"),\n        Seq(\"\\u200B\", \"ZERO WIDTH SPACE\"),\n        Seq(\"\\u202F\", \"NARROW NO-BREAK SPACE\"),\n        Seq(\"\\u205F\", \"MEDIUM MATHEMATICAL SPACE\"),\n        Seq(\"\\u3000\", \"IDEOGRAPHIC SPACE\"), // \u5168\u89d2\u30b9\u30da\u30fc\u30b9\n        Seq(\"\\uFEFF\", \"ZERO WIDTH NO-BREAK SPACE\")\n      )\n\n      unicodeSpaces.foreach {\n        case Seq(space, name) =>\n          val code = space.charAt(0).toInt.formatted(\"\\\\u%04X\")\n          println(List(code, name, isJavaWhitespace(space).o, isJavaSpaceChar(space).o, isZs(space).o, isS(space).o, isBlank(space).o, \"`foo`\" + ({ space.charAt(0).toInt match { case a if a <= 31 => code; case a => space; } }) + \"`bar`\").mkString(\"| \", \" | \", \" |\"))\n      }\n\n    }\n  }\n}\n\n\n\u53c2\u8003\u6587\u732e\n\nUnicode spaces\nCharacter (Java Platform SE 7 )\nPattern (Java Platform SE 7 )\nScala Standard Library 2.11.1 - Regex - Scala Standard Library 2.11.1 - scala.util.matching.Regex\n\n\n\u5165\u529b\u304b\u3089\u7a7a\u767d\u3092\u524a\u308a\u305f\u3044\u3068\u3044\u3063\u305f\u8981\u4ef6\u304c\u305f\u307e\u306b\u3042\u308b\u304c\u3001\u7a7a\u767d\u3068\u4e00\u8a00\u3067\u8a00\u3063\u3066\u3082\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u30fb\u5168\u89d2\u30b9\u30da\u30fc\u30b9\u3060\u3051\u3067\u306a\u304f\u3001\u30e6\u30cb\u30b3\u30fc\u30c9\u306b\u306f\u69d8\u3005\u306a\u7a7a\u767d\u6587\u5b57\u304c\u3042\u308b\u3002\u8abf\u3079\u305f\u7bc4\u56f2\u3067\u306f29\u7a2e\u985e\u3042\u3063\u305f\u3002\u3053\u308c\u3089\u306e\u7a7a\u767d\u6587\u5b57\u3092\u6b63\u898f\u8868\u73fe\u3067\u4e00\u7db2\u6253\u5c3d\u3059\u308b\u65b9\u6cd5\u306f\u306a\u3044\u304b\u691c\u8a3c\u3057\u3066\u307f\u305f\u3002\u691c\u8a3c\u306e\u305f\u3081\u306b\u7528\u3044\u305f\u30b3\u30fc\u30c9\u306f\u3001\u3053\u306e\u8a18\u4e8b\u306e\u6700\u5f8c\u306b\u8f09\u305b\u3066\u3042\u308b\u3002\n\n# \u691c\u8a3c\u7d50\u679c\n\n\u691c\u8a3c\u7d50\u679c\u306f\u4e0b\u306e\u8868\u306b\u307e\u3068\u3081\u305f\u3002\u5404\u884c\u304c\u7a7a\u767d\u6587\u5b57\u306b\u3001\u5404\u5217\u304c\u6b63\u898f\u8868\u73fe\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u305d\u306e\u6587\u5b57\u304c\u305d\u306e\u6b63\u898f\u8868\u73fe\u3067\u30de\u30c3\u30c1\u3057\u305f\u3082\u306e\u306b\u306f\u300co\u300d\u3092\u4ed8\u3051\u305f\u3002\n\n|  code | name | `\\p{javaWhitespace}` | `\\p{javaSpaceChar}` | `\\p{Zs}` | `\\s` | `\\p{Blank}` | \u898b\u305f\u76ee |\n|--------|-----------------------|:--:|:--:|:--:|:--:|:--:|---------------|\n| \\u0009 | HORIZONTAL TABULATION | o |  |  | o | o | `foo`\\u0009`bar` |\n| \\u000A | LINE FEED | o |  |  | o |  | `foo`\\u000A`bar` |\n| \\u000B | VERTICAL TABULATION | o |  |  | o |  | `foo`\\u000B`bar` |\n| \\u000C | FORM FEED | o |  |  | o |  | `foo`\\u000C`bar` |\n| \\u000D | CARRIAGE RETURN | o |  |  | o |  | `foo`\\u000D`bar` |\n| \\u001C | FILE SEPARATOR | o |  |  |  |  | `foo`\\u001C`bar` |\n| \\u001D | GROUP SEPARATOR | o |  |  |  |  | `foo`\\u001D`bar` |\n| \\u001E | RECORD SEPARATOR | o |  |  |  |  | `foo`\\u001E`bar` |\n| \\u001F | UNIT SEPARATOR | o |  |  |  |  | `foo`\\u001F`bar` |\n| \\u0020 | SPACE | o | o | o | o | o | `foo` `bar` |\n| \\u00A0 | NO-BREAK SPACE |  | o | o |  |  | `foo`\u00a0`bar` |\n| \\u1680 | OGHAM SPACE MARK | o | o | o |  |  | `foo`\u1680`bar` |\n| \\u180E | MONGOLIAN VOWEL SEPARATOR | o | o | o |  |  | `foo`\u180e`bar` |\n| \\u2000 | EN QUAD | o | o | o |  |  | `foo`\u2002`bar` |\n| \\u2001 | EM QUAD | o | o | o |  |  | `foo`\u2003`bar` |\n| \\u2002 | EN SPACE | o | o | o |  |  | `foo`\u2002`bar` |\n| \\u2003 | EM SPACE | o | o | o |  |  | `foo`\u2003`bar` |\n| \\u2004 | THREE-PER-EM SPACE | o | o | o |  |  | `foo`\u2004`bar` |\n| \\u2005 | FOUR-PER-EM SPACE | o | o | o |  |  | `foo`\u2005`bar` |\n| \\u2006 | SIX-PER-EM SPACE | o | o | o |  |  | `foo`\u2006`bar` |\n| \\u2007 | FIGURE SPACE |  | o | o |  |  | `foo`\u2007`bar` |\n| \\u2008 | PUNCTUATION SPACE | o | o | o |  |  | `foo`\u2008`bar` |\n| \\u2009 | THIN SPACE | o | o | o |  |  | `foo`\u2009`bar` |\n| \\u200A | HAIR SPACE | o | o | o |  |  | `foo`\u200a`bar` |\n| \\u200B | ZERO WIDTH SPACE |  |  |  |  |  | `foo``bar` |\n| \\u202F | NARROW NO-BREAK SPACE |  | o | o |  |  | `foo`\u202f`bar` |\n| \\u205F | MEDIUM MATHEMATICAL SPACE | o | o | o |  |  | `foo`\u205f`bar` |\n| \\u3000 | IDEOGRAPHIC SPACE | o | o | o |  |  | `foo`\u3000`bar` |\n| \\uFEFF | ZERO WIDTH NO-BREAK SPACE |  |  |  |  |  | `foo``bar` |\n\n* \u5168\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u8a00\u308f\u308c\u308b\u3082\u306e\u306f\u3053\u306e\u8868\u3067\u306f `\\u3000` \u306b\u306a\u308b\u3002\n* \\u001F \u4ee5\u4e0b\u306e\u6587\u5b57\u306fMarkdown\u3067\u8868\u793a\u3057\u304d\u308c\u306a\u3044\u3082\u306e\u304c\u3042\u308b\u306e\u3067\u898b\u305f\u76ee\u306b\u306f\u53cd\u6620\u3057\u3066\u3044\u306a\u3044\u3002\n\n`\\p{javaWhitespace}` \u306f `java.lang.Character` \u306e `isWhitespace` \u3068\u540c\u3058\u3082\u306e\u3089\u3057\u3044\u304c\u3001\u4e00\u756a\u591a\u304f\u7a7a\u767d\u6587\u5b57\u306b\u30de\u30c3\u30c1\u3057\u305f\u3002\u305d\u308c\u3067\u3082\u3001\u30de\u30c3\u30c1\u3057\u306a\u3044\u6587\u5b57\u3082\u3042\u3063\u305f\u306e\u3067\u3001`\\p{javaWhitespace}`\u3068\u30e6\u30cb\u30b3\u30fc\u30c9\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u6b63\u898f\u8868\u73fe\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3002\n\n\u5168\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3068\u30bf\u30d6\u304f\u3089\u3044\u306b\u30de\u30c3\u30c1\u3059\u308c\u3070\u3044\u3044\u8981\u4ef6\u306a\u3089\u3001`\\p{javaSpaceChar}` \u3084 `\\p{Zs}` \u3067\u5341\u5206\u3002\n\n\n# \u691c\u8a3c\u7528\u30b3\u30fc\u30c9\n\n```scala\nimport org.scalatest._\n\nclass CompilationSpec extends FeatureSpec with GivenWhenThen with BeforeAndAfter with ParallelTestExecution with Matchers {\n  feature(\"Playground\") {\n    scenario(\"test \\\\p{javaSpaceChar}\") {\n      def isS(char: String) = \"\"\"\\s\"\"\".r.findFirstIn(char).nonEmpty\n      def isZs(char: String) = \"\"\"\\p{Zs}\"\"\".r.findFirstIn(char).nonEmpty\n      def isJavaSpaceChar(char: String) = \"\"\"\\p{javaSpaceChar}\"\"\".r.findFirstIn(char).nonEmpty\n      def isJavaWhitespace(char: String) = \"\"\"\\p{javaWhitespace}\"\"\".r.findFirstIn(char).nonEmpty\n      def isBlank(char: String) = \"\"\"\\p{Blank}\"\"\".r.findFirstIn(char).nonEmpty\n\n      implicit class MyBoolean(bool: Boolean) {\n        def o: String = {\n          bool match {\n            case true  => \"o\"\n            case false => \"\"\n          }\n        }\n      }\n\n      val unicodeSpaces = Seq(\n        Seq(\"\\u0009\", \"HORIZONTAL TABULATION\"),\n        Seq(\"\\u000A\", \"LINE FEED\"),\n        Seq(\"\\u000B\", \"VERTICAL TABULATION\"),\n        Seq(\"\\u000C\", \"FORM FEED\"),\n        Seq(\"\\u000D\", \"CARRIAGE RETURN\"),\n        Seq(\"\\u001C\", \"FILE SEPARATOR\"),\n        Seq(\"\\u001D\", \"GROUP SEPARATOR\"),\n        Seq(\"\\u001E\", \"RECORD SEPARATOR\"),\n        Seq(\"\\u001F\", \"UNIT SEPARATOR\"),\n        Seq(\"\\u0020\", \"SPACE\"),\n        Seq(\"\\u00A0\", \"NO-BREAK SPACE\"),\n        Seq(\"\\u1680\", \"OGHAM SPACE MARK\"),\n        Seq(\"\\u180E\", \"MONGOLIAN VOWEL SEPARATOR\"),\n        Seq(\"\\u2000\", \"EN QUAD\"),\n        Seq(\"\\u2001\", \"EM QUAD\"),\n        Seq(\"\\u2002\", \"EN SPACE\"),\n        Seq(\"\\u2003\", \"EM SPACE\"),\n        Seq(\"\\u2004\", \"THREE-PER-EM SPACE\"),\n        Seq(\"\\u2005\", \"FOUR-PER-EM SPACE\"),\n        Seq(\"\\u2006\", \"SIX-PER-EM SPACE\"),\n        Seq(\"\\u2007\", \"FIGURE SPACE\"),\n        Seq(\"\\u2008\", \"PUNCTUATION SPACE\"),\n        Seq(\"\\u2009\", \"THIN SPACE\"),\n        Seq(\"\\u200A\", \"HAIR SPACE\"),\n        Seq(\"\\u200B\", \"ZERO WIDTH SPACE\"),\n        Seq(\"\\u202F\", \"NARROW NO-BREAK SPACE\"),\n        Seq(\"\\u205F\", \"MEDIUM MATHEMATICAL SPACE\"),\n        Seq(\"\\u3000\", \"IDEOGRAPHIC SPACE\"), // \u5168\u89d2\u30b9\u30da\u30fc\u30b9\n        Seq(\"\\uFEFF\", \"ZERO WIDTH NO-BREAK SPACE\")\n      )\n\n      unicodeSpaces.foreach {\n        case Seq(space, name) =>\n          val code = space.charAt(0).toInt.formatted(\"\\\\u%04X\")\n          println(List(code, name, isJavaWhitespace(space).o, isJavaSpaceChar(space).o, isZs(space).o, isS(space).o, isBlank(space).o, \"`foo`\" + ({ space.charAt(0).toInt match { case a if a <= 31 => code; case a => space; } }) + \"`bar`\").mkString(\"| \", \" | \", \" |\"))\n      }\n\n    }\n  }\n}\n```\n\n# \u53c2\u8003\u6587\u732e\n\n* [Unicode spaces](https://www.cs.tut.fi/~jkorpela/chars/spaces.html)\n* [Character (Java Platform SE 7 )](http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html#isWhitespace(char))\n* [Pattern (Java Platform SE 7 )](http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html)\n* [Scala Standard Library 2.11.1 - Regex - Scala Standard Library 2.11.1 - scala.util.matching.Regex](http://www.scala-lang.org/api/2.11.1/index.html#scala.util.matching.Regex)\n", "tags": ["\u6b63\u898f\u8868\u73fe", "Scala"]}