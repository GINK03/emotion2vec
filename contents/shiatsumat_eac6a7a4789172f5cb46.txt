{"context": " More than 1 year has passed since last update.\u8981\u7d20\u6570n\u306e\u4e8c\u5206\u6728\u3092\u6700\u60aa\u8a08\u7b97\u91cfO(n)\u3067\u30ea\u30b9\u30c8\u3078\u3068\u5e73\u5766\u5316 (flatten) \u3059\u308b\u65b9\u6cd5\u30924\u3064\u7d39\u4ecb\u3059\u308b\uff0e\n\u4e8c\u5206\u6728\u306f\u6b21\u306e\u3082\u306e\u3092\u4f7f\u3046\uff0e\n\ndefinition\ndata Tree a = Leaf | Node (Tree a) a (Tree a)\n\n\n\u5b9f\u9a13\u3059\u308b\u5834\u5408\u306f\uff0c\u6b21\u3092\u4f7f\u3046\u3068\u3044\u3044\u3068\u601d\u3046\uff0e\n\nexperiment\nlefttree, righttree, perfecttree :: Int -> Tree Int\nlefttree 0 = Leaf\nlefttree n = Node (lefttree (n-1)) n Leaf\nrighttree 0 = Leaf\nrighttree n = Node Leaf n (righttree (n-1))\nperfecttree 0 = Leaf\nperfecttree n = Node (perfecttree (div n 2)) n (perfecttree (div n 2))\n\n\n\nbash\n> length $ flatten $ righttree 100000\n100000\n> length $ flatten $ lefttree 100000\n100000\n> length $ flatten $ perfecttree 100000\n131071\n\n\n\u307e\u305a\u306f\u611a\u76f4\u89e3\uff0e\u6700\u60aa\u8a08\u7b97\u91cf\u306f\uff0c\u6728\u304c\u5b8c\u5168\u306b\u5de6\u306b\u504f\u3063\u3066\u3044\u308b\u5834\u5408\u3067 O(n^2)\uff0e\n\nnaive\nflatten :: Tree a -> [a]\nflatten Leaf = []\nflatten (Node l x r) = flatten l ++ [x] ++ flatten r\n\n\n\u3067\u306f\u3055\u3063\u305d\u304f\uff0c\u6700\u60aa\u8a08\u7b97\u91cf\u304cO(n)\u3067\u3042\u308b\u5b9f\u88c5\u3092\u898b\u3066\u3044\u3053\u3046\uff0e\n1\u756a\u76ee\u306f\uff0c\u5dee\u5206\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u65b9\u6cd5\uff0e\n\ndlist\nflatten :: Tree a -> [a]\nflatten t = toList (go t)\n  where\n    go :: Tree a -> DList a\n    go Leaf = fromList []\n    go (Node l x r) = go l ++* fromList [x] ++* go r\n\ntype DList a = [a] -> [a]\nfromList :: [a] -> DList a\nfromList xs = (xs ++)\ntoList :: DList a -> [a]\ntoList dxs = dxs []\n(++*) :: DList a -> DList a -> DList a\n(++*) = (.)\n\n\n2\u756a\u76ee\u306f\uff0c\u84c4\u7a4d\u5909\u6570\u3092\u4f7f\u3046\u65b9\u6cd5\uff0e\u672c\u8cea\u7684\u306b\u306f\u5dee\u5206\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u65b9\u6cd5\u3068\u5909\u308f\u3089\u306a\u3044\u304c\uff0c\u30aa\u30fc\u30bd\u30c9\u30c3\u30af\u30b9\u306a\u30c6\u30af\u30cb\u30c3\u30af\u3060\u3068\u3044\u3048\u308b\uff0e\u5c71\u672c\u548c\u5f66\u6c0f\u304cTwitter\u3067\u6559\u3048\u3066\u304f\u3060\u3055\u3063\u305f\uff0e\n\naccum\nflatten :: Tree a -> [a]\nflatten t = go t []\n  where\n    go Leaf xs = xs\n    go (Node l x r) xs = go l (x : go r xs)\n\n\n3\u756a\u76ee\u306f\uff0c\u5dee\u5206\u30ea\u30b9\u30c8\u3092\u8131\u95a2\u6570\u5316\u3059\u308b\u65b9\u6cd5\uff0ehttp://h2.jaguarpaw.co.uk/posts/demystifying-dlist/ \u306b\u8f09\u3063\u3066\u3044\u305f\uff0e\n\ndemystify\nflatten :: Tree a -> [a]\nflatten t = toList (go t)\n  where\n    go :: Tree a -> TList a\n    go Leaf = fromList []\n    go (Node l x r) = go l ++* fromList [x] ++* go r\n\ndata TList a = Tip [a] | Branch (TList a) (TList a)\nfromList :: [a] -> TList a\nfromList = Tip\ntoList :: TList a -> [a]\ntoList (Tip xs) = xs\ntoList (Branch (Tip xs) t) = xs ++ toList t\ntoList (Branch (Branch l r) t) = toList (Branch l (Branch r t))\n(++*) :: TList a -> TList a -> TList a\n(++*) = Branch\n\n\n4\u756a\u76ee\u306f\uff0c\u4e0d\u601d\u8b70\u306a\u65b9\u6cd5\uff0e\u304a\u305d\u3089\u304f\u4e00\u756a\u7f8e\u3057\u3044\u65b9\u6cd5\uff0e3\u756a\u76ee\u3092\u30d2\u30f3\u30c8\u306b\u601d\u3044\u4ed8\u3044\u305f\uff0eO(n)\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u307b\u3057\u3044\uff0e\n\nwonder\nflatten :: Tree a -> [a]\nflatten Leaf = []\nflatten (Node Leaf x t) = x : flatten t\nflatten (Node (Node l x r) y t) = flatten (Node l x (Node r y t))\n\n\n\u30b7\u30f3\u30d7\u30eb\u306a\u554f\u984c\u3067\u3082\u672c\u5f53\u306b\u5965\u304c\u6df1\u3044\uff0e\n\u8981\u7d20\u6570n\u306e\u4e8c\u5206\u6728\u3092\u6700\u60aa\u8a08\u7b97\u91cfO(n)\u3067\u30ea\u30b9\u30c8\u3078\u3068\u5e73\u5766\u5316 (flatten) \u3059\u308b\u65b9\u6cd5\u30924\u3064\u7d39\u4ecb\u3059\u308b\uff0e\n\n\u4e8c\u5206\u6728\u306f\u6b21\u306e\u3082\u306e\u3092\u4f7f\u3046\uff0e\n\n```hs:definition\ndata Tree a = Leaf | Node (Tree a) a (Tree a)\n```\n\u5b9f\u9a13\u3059\u308b\u5834\u5408\u306f\uff0c\u6b21\u3092\u4f7f\u3046\u3068\u3044\u3044\u3068\u601d\u3046\uff0e\n\n```hs:experiment\nlefttree, righttree, perfecttree :: Int -> Tree Int\nlefttree 0 = Leaf\nlefttree n = Node (lefttree (n-1)) n Leaf\nrighttree 0 = Leaf\nrighttree n = Node Leaf n (righttree (n-1))\nperfecttree 0 = Leaf\nperfecttree n = Node (perfecttree (div n 2)) n (perfecttree (div n 2))\n```\n\n```bash:bash\n> length $ flatten $ righttree 100000\n100000\n> length $ flatten $ lefttree 100000\n100000\n> length $ flatten $ perfecttree 100000\n131071\n```\n\n\u307e\u305a\u306f\u611a\u76f4\u89e3\uff0e\u6700\u60aa\u8a08\u7b97\u91cf\u306f\uff0c\u6728\u304c\u5b8c\u5168\u306b\u5de6\u306b\u504f\u3063\u3066\u3044\u308b\u5834\u5408\u3067 O(n^2)\uff0e\n\n```hs:naive\nflatten :: Tree a -> [a]\nflatten Leaf = []\nflatten (Node l x r) = flatten l ++ [x] ++ flatten r\n```\n\n\u3067\u306f\u3055\u3063\u305d\u304f\uff0c\u6700\u60aa\u8a08\u7b97\u91cf\u304cO(n)\u3067\u3042\u308b\u5b9f\u88c5\u3092\u898b\u3066\u3044\u3053\u3046\uff0e\n\n1\u756a\u76ee\u306f\uff0c\u5dee\u5206\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u65b9\u6cd5\uff0e\n\n```hs:dlist\nflatten :: Tree a -> [a]\nflatten t = toList (go t)\n  where\n    go :: Tree a -> DList a\n    go Leaf = fromList []\n    go (Node l x r) = go l ++* fromList [x] ++* go r\n\ntype DList a = [a] -> [a]\nfromList :: [a] -> DList a\nfromList xs = (xs ++)\ntoList :: DList a -> [a]\ntoList dxs = dxs []\n(++*) :: DList a -> DList a -> DList a\n(++*) = (.)\n```\n\n2\u756a\u76ee\u306f\uff0c\u84c4\u7a4d\u5909\u6570\u3092\u4f7f\u3046\u65b9\u6cd5\uff0e\u672c\u8cea\u7684\u306b\u306f\u5dee\u5206\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u65b9\u6cd5\u3068\u5909\u308f\u3089\u306a\u3044\u304c\uff0c\u30aa\u30fc\u30bd\u30c9\u30c3\u30af\u30b9\u306a\u30c6\u30af\u30cb\u30c3\u30af\u3060\u3068\u3044\u3048\u308b\uff0e\u5c71\u672c\u548c\u5f66\u6c0f\u304cTwitter\u3067\u6559\u3048\u3066\u304f\u3060\u3055\u3063\u305f\uff0e\n\n```hs:accum\nflatten :: Tree a -> [a]\nflatten t = go t []\n  where\n    go Leaf xs = xs\n    go (Node l x r) xs = go l (x : go r xs)\n```\n\n3\u756a\u76ee\u306f\uff0c\u5dee\u5206\u30ea\u30b9\u30c8\u3092\u8131\u95a2\u6570\u5316\u3059\u308b\u65b9\u6cd5\uff0ehttp://h2.jaguarpaw.co.uk/posts/demystifying-dlist/ \u306b\u8f09\u3063\u3066\u3044\u305f\uff0e\n\n```hs:demystify\nflatten :: Tree a -> [a]\nflatten t = toList (go t)\n  where\n    go :: Tree a -> TList a\n    go Leaf = fromList []\n    go (Node l x r) = go l ++* fromList [x] ++* go r\n\ndata TList a = Tip [a] | Branch (TList a) (TList a)\nfromList :: [a] -> TList a\nfromList = Tip\ntoList :: TList a -> [a]\ntoList (Tip xs) = xs\ntoList (Branch (Tip xs) t) = xs ++ toList t\ntoList (Branch (Branch l r) t) = toList (Branch l (Branch r t))\n(++*) :: TList a -> TList a -> TList a\n(++*) = Branch\n```\n\n4\u756a\u76ee\u306f\uff0c\u4e0d\u601d\u8b70\u306a\u65b9\u6cd5\uff0e\u304a\u305d\u3089\u304f\u4e00\u756a\u7f8e\u3057\u3044\u65b9\u6cd5\uff0e3\u756a\u76ee\u3092\u30d2\u30f3\u30c8\u306b\u601d\u3044\u4ed8\u3044\u305f\uff0eO(n)\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u307b\u3057\u3044\uff0e\n\n```hs:wonder\nflatten :: Tree a -> [a]\nflatten Leaf = []\nflatten (Node Leaf x t) = x : flatten t\nflatten (Node (Node l x r) y t) = flatten (Node l x (Node r y t))\n```\n\u30b7\u30f3\u30d7\u30eb\u306a\u554f\u984c\u3067\u3082\u672c\u5f53\u306b\u5965\u304c\u6df1\u3044\uff0e\n", "tags": ["Haskell", "algorithm"]}