{"context": "\u30de\u30d3\u30ce\u30ae\u3068\u3044\u3046\u30aa\u30f3\u30e9\u30a4\u30f3RPG\u306b\u3001\u4ee5\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306a\u30df\u30cb\u30b2\u30fc\u30e0\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u8981\u3059\u308b\u306b\u3001\u5de6\u306e\u30eb\u30fc\u30ec\u30c3\u30c8\u3092\u56de\u3057\u3066\u5f53\u305f\u3063\u305f\u6570\u5b57\u3067\u3001\u53f3\u306e\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u57cb\u3081\u3066\u3044\u304f\u3068\u3044\u3046\u30df\u30cb\u30b2\u30fc\u30e0\u3067\u3059\uff08\u4ee5\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306a\u611f\u3058\uff09\u3002\n\n\u3053\u306e\u30d3\u30f3\u30b4\u30b2\u30fc\u30e0\u306b\u3064\u3044\u3066\u3001\u30d3\u30f3\u30b4\u306e\u30de\u30b9\u3092\u5168\u3066\u57cb\u3081\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3001\u30eb\u30fc\u30ec\u30c3\u30c8\u306e\u8a66\u884c\u56de\u6570\u306e\u671f\u5f85\u5024\u3092\u8003\u3048\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u3044\u308f\u3086\u308b\u30af\u30fc\u30dd\u30f3\u30b3\u30ec\u30af\u30bf\u30fc\u554f\u984c\u3067\u3042\u308a\u300125\u7a2e\u985e\u306e\u30af\u30fc\u30dd\u30f3\u3092\u5168\u3066\u63c3\u3048\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u8a66\u884c\u56de\u6570\u306e\u671f\u5f85\u5024E(N)\u3068\u540c\u3058\u3067\u3059\u304b\u3089\u3001\nE(N)=25%\n%TCIMACRO{\\dsum \\limits_{n=1}^{25}}%\n%BeginExpansion\n{\\displaystyle\\sum\\limits_{n=1}^{25}}\n%EndExpansion\n\\dfrac{1}{n}\\simeq95.4\nE(N)=25\u2211n=1251n\u224395.4{E(N)=25%\n%TCIMACRO{\\dsum \\limits_{n=1}^{25}}%\n%BeginExpansion\n{\\displaystyle\\sum\\limits_{n=1}^{25}}\n%EndExpansion\n\\dfrac{1}{n}\\simeq95.4\n}\n\u3067\u3059\u3002\n\n\u672c\u984c\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u4e00\u3064\u306e\u884c\u30fb\u5217\u304c\u63c3\u3046\u305f\u3081\u306b\u5fc5\u8981\u306a\u30eb\u30fc\u30ec\u30c3\u30c8\u306e\u8a66\u884c\u56de\u6570\u306e\u671f\u5f85\u5024\u3092\u6c42\u3081\u305f\u304b\u3063\u305f\u305f\u3081\u3001C++11C++14\uff08\u77e5\u3089\u305a\u77e5\u3089\u305a\u306e\u3046\u3061\u306bC++14\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u5168\u3066C++14\u3067\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002\u3068\u8a00\u3063\u3066\u3082\u6570\u30f6\u6240\u4fee\u6b63\u3057\u305f\u3060\u3051\u3067\u3059\u304c\u3002\uff09\u3067\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u305d\u306e\u307e\u307e\u8f09\u305b\u307e\u3059\u3002\n#include \"myrand.h\"\n#include <algorithm>    // for std::find, std::shuffle, std::transform\n#include <cstdint>      // for std::int32_t\n#include <iomanip>      // for std::setiosflags, std::setprecision\n#include <iostream>     // for std::cout\n#include <numeric>      // for std::iota\n#include <random>       // for std::mt19937\n#include <utility>      // for std::make_pair, std::pair\n#include <vector>       // for std::vector\n\nnamespace {\n    //! A global variable (constant expression).\n    /*!\n        \u5217\u306e\u30b5\u30a4\u30ba\n    */\n    static auto constexpr COLUMN = 5U;\n\n    //! A global variable (constant expression).\n    /*!\n        \u884c\u306e\u30b5\u30a4\u30ba\n    */\n    static auto constexpr ROW = 5U;\n\n    //! A global variable (constant expression).\n    /*!\n        \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u306e\u30de\u30b9\u6570\n    */\n    static auto constexpr BOARDSIZE = ROW * COLUMN;\n\n    //! A global variable (constant expression).\n    /*!\n        \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u8a66\u884c\u56de\u6570\n    */\n    static auto constexpr MCMAX = 10000U;\n\n    //! A global variable (constant expression).\n    /*!\n        \u884c\u30fb\u5217\u306e\u7dcf\u6570\n    */\n    static auto constexpr ROWCOLUMN = ROW + COLUMN;\n\n    //! A typedef.\n    /*!\n        \u305d\u306e\u30de\u30b9\u306b\u66f8\u304b\u308c\u3066\u3042\u308b\u756a\u53f7\u3068\u3001\u305d\u306e\u30de\u30b9\u304c\u5f53\u305f\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u30d5\u30e9\u30b0\n        \u306estd::pair\n    */\n    using mypair = std::pair<std::int32_t, bool>;\n\n    //! A typedef.\n    /*!\n        \u884c\u30fb\u5217\u304c\u57cb\u307e\u308b\u307e\u3067\u306b\u8981\u3057\u305f\u56de\u6570\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u57cb\u307e\u3063\u305f\u30de\u30b9\u306estd::pair\n    */\n    using mypair2 = std::pair<std::int32_t, std::int32_t>;\n\n    //! A function.\n    /*!\n        \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\n        \\return \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u304c\u683c\u7d0d\u3055\u308c\u305f\u53ef\u5909\u9577\u914d\u5217\n    */\n    auto makeBoard();\n\n    //! A function.\n    /*!\n        \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\n        \\return \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306e\u7d50\u679c\u304c\u683c\u7d0d\u3055\u308c\u305f\u4e8c\u6b21\u5143\u53ef\u5909\u9577\u914d\u5217\n    */\n    std::vector< std::vector<mypair2> > montecarlo();\n\n    //! A function.\n    /*!\n        \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\n        \\return \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306e\u7d50\u679c\u304c\u683c\u7d0d\u3055\u308c\u305f\u53ef\u5909\u9577\u914d\u5217\n    */\n    std::vector<mypair2> montecarloImpl();\n}\n\nint main()\n{\n    // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u4ee3\u5165\n    auto const mcresult(montecarlo());\n\n    // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5e73\u5747\u8a66\u884c\u56de\u6570\u306e\u7d50\u679c\u3092\u683c\u7d0d\u3057\u305f\u53ef\u5909\u9577\u914d\u5217\n    std::vector<double> trialavg(ROWCOLUMN);\n\n    // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306ei\u56de\u76ee\u306e\u8a66\u884c\u3067\u3001\u57cb\u307e\u3063\u3066\u3044\u308b\u30de\u30b9\u306e\u6570\u3092\u683c\u7d0d\u3057\u305f\u53ef\u5909\u9577\u914d\u5217\n    std::vector<double> fillavg(ROWCOLUMN);\n\n    // \u884c\u30fb\u5217\u306e\u7dcf\u6570\u5206\u7e70\u308a\u8fd4\u3059\n    for (auto i = 0U; i < ROWCOLUMN; i++) {\n        // \u7dcf\u548c\u30920\u3067\u521d\u671f\u5316\n        auto trialsum = 0;\n        auto fillsum = 0;\n\n        // \u8a66\u884c\u56de\u6570\u5206\u7e70\u308a\u8fd4\u3059\n        for (auto j = 0U; j < MCMAX; j++) {\n            // j\u56de\u76ee\u306e\u7d50\u679c\u3092\u52a0\u3048\u308b\n            trialsum += mcresult[j][i].first;\n            fillsum += mcresult[j][i].second;\n        }\n\n        // \u5e73\u5747\u3092\u7b97\u51fa\u3057\u3066i\u884c\u30fb\u5217\u76ee\u306etrialavg\u3001fillavg\u306b\u4ee3\u5165\n        trialavg[i] = static_cast<double>(trialsum) / static_cast<double>(MCMAX);\n        fillavg[i] = static_cast<double>(fillsum) / static_cast<double>(MCMAX);\n    }\n\n    std::cout << std::setprecision(1) << std::setiosflags(std::ios::fixed);\n    for (auto i = 0U; i < ROWCOLUMN; i++) {\n        auto const efficiency = trialavg[i] / static_cast<double>(i + 1);\n\n        std::cout << (i + 1)\n                  << \"\u500b\u76ee\u306b\u5fc5\u8981\u306a\u5e73\u5747\u8a66\u884c\u56de\u6570\uff1a\"\n                  << trialavg[i]\n                  << \"\u56de, \u52b9\u7387 = \"\n                  << efficiency\n                  << \"\uff08\u56de/\u500b\uff09, \u57cb\u307e\u3063\u3066\u3044\u308b\u30de\u30b9\u306e\u5e73\u5747\u500b\u6570\uff1a\"\n                  << fillavg[i]\n                  << \"\u500b\\n\";\n    }\n\n    return 0;\n}\n\nnamespace {\n    auto makeBoard()\n    {\n        // \u4eee\u306e\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u751f\u6210\n        std::vector<std::int32_t> boardtmp(BOARDSIZE);\n\n        // \u4eee\u306e\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u306b1\uff5e25\u306e\u6570\u5b57\u3092\u4ee3\u5165\n        std::iota(boardtmp.begin(), boardtmp.end(), 1);\n\n        // \u4eee\u306e\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u306e\u6570\u5b57\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\n        std::shuffle(boardtmp.begin(), boardtmp.end(), std::mt19937());\n\n        // \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u751f\u6210\n        std::vector<mypair> board(BOARDSIZE);\n\n        // \u4eee\u306e\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u304b\u3089\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\n        std::transform(\n            boardtmp.begin(),\n            boardtmp.end(),\n            board.begin(),\n            [](auto n) { return std::make_pair(n, false); });\n\n        // \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u8fd4\u3059\n        return board;\n    }\n\n    std::vector< std::vector<mypair2> > montecarlo()\n    {\n        // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u4e8c\u6b21\u5143\u53ef\u5909\u9577\u914d\u5217\n        std::vector< std::vector<mypair2> > mcresult;\n\n        // MCMAX\u500b\u306e\u5bb9\u91cf\u3092\u78ba\u4fdd\n        mcresult.reserve(MCMAX);\n\n        // \u8a66\u884c\u56de\u6570\u5206\u7e70\u308a\u8fd4\u3059\n        for (auto i = 0U; i < MCMAX; i++) {\n            // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u4ee3\u5165\n            mcresult.push_back(montecarloImpl());\n        }\n\n        // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u8fd4\u3059\n        return mcresult;\n    }\n\n    std::vector<mypair2> montecarloImpl()\n    {\n        // \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u751f\u6210\n        auto board(makeBoard());\n\n        // \u81ea\u4f5c\u4e71\u6570\u30af\u30e9\u30b9\u3092\u521d\u671f\u5316\n        myrandom::MyRand mr(1, BOARDSIZE);\n\n        // \u305d\u306e\u884c\u30fb\u5217\u304c\u65e2\u306b\u57cb\u307e\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u683c\u7d0d\u3059\u308b\u53ef\u5909\u9577\u914d\u5217\n        // ROWCOLUMNSIZE\u500b\u306e\u8981\u7d20\u3092false\u3067\u521d\u671f\u5316\n        std::vector<bool> rcfill(ROWCOLUMN, false);\n\n        // \u884c\u30fb\u5217\u304c\u57cb\u307e\u308b\u307e\u3067\u306b\u8981\u3057\u305f\u56de\u6570\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u57cb\u307e\u3063\u305f\u30de\u30b9\u3092\u683c\u7d0d\u3057\u305f\n        // \u53ef\u5909\u9577\u914d\u5217\n        std::vector<mypair2> fillnum;\n\n        // ROWCOLUMNSIZE\u500b\u306e\u5bb9\u91cf\u3092\u78ba\u4fdd\n        fillnum.reserve(ROWCOLUMN);\n\n        // \u305d\u306e\u6642\u70b9\u3067\u57cb\u307e\u3063\u3066\u3044\u308b\u30de\u30b9\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u30e9\u30e0\u30c0\u5f0f\n        auto const sum = [](auto const & vec) {\n            auto cnt = 0;\n            for (auto & e : vec) {\n                if (e.second) {\n                    cnt++;\n                }\n            }\n\n            return cnt;\n        };\n\n        // \u7121\u9650\u30eb\u30fc\u30d7\n        for (auto i = 1; ; i++) {\n            // \u4e71\u6570\u3067\u5f97\u305f\u6570\u5b57\u3067\u3001\u304b\u3064\u307e\u3060\u5f53\u305f\u3063\u3066\u306a\u3044\u30de\u30b9\u3092\u691c\u7d22\n            auto itr = std::find(\n                board.begin(),\n                board.end(),\n                std::make_pair(mr.myrand(), false));\n\n            // \u305d\u306e\u3088\u3046\u306a\u30de\u30b9\u304c\u3042\u3063\u305f\n            if (itr != board.end()) {\n                // \u305d\u306e\u30de\u30b9\u306f\u5f53\u305f\u3063\u305f\u3068\u3057\u3001\u30d5\u30e9\u30b0\u3092true\u306b\u3059\u308b\n                itr->second = true;\n            }\n            // \u305d\u306e\u3088\u3046\u306a\u30de\u30b9\u304c\u306a\u304b\u3063\u305f\n            else {\n                //\u30eb\u30fc\u30d7\u7d9a\u884c\n                continue;\n            }\n\n            // \u5404\u884c\u30fb\u5217\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\n            for (auto j = 0U; j < ROW; j++) {\n                // \u5404\u884c\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\n                auto rowflag = true;\n\n                // \u5404\u884c\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\n                for (auto k = 0U; k < COLUMN; k++) {\n                    rowflag &= board[COLUMN * j + k].second;\n                }\n\n                // \u884c\u306e\u51e6\u7406\n                if (rowflag &&\n                    // \u305d\u306e\u884c\u306f\u65e2\u306b\u57cb\u307e\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n                    !rcfill[j]) {\n                        // \u305d\u306e\u884c\u306f\u57cb\u307e\u3063\u305f\u3068\u3057\u3066\u3001\u30d5\u30e9\u30b0\u3092true\u306b\u3059\u308b\n                        rcfill[j] = true;\n\n                        // \u8981\u3057\u305f\u8a66\u884c\u56de\u6570\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u57cb\u307e\u3063\u305f\u30de\u30b9\u306e\u6570\u3092\u683c\u7d0d\n                        fillnum.push_back(std::make_pair(i, sum(board)));\n                }\n\n                // \u5404\u5217\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\n                auto columnflag = true;\n\n                // \u5404\u5217\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af    \n                for (auto k = 0U; k < ROW; k++) {\n                    columnflag &= board[j + COLUMN * k].second;\n                }\n\n                // \u5217\u306e\u51e6\u7406\n                if (columnflag &&\n                    // \u305d\u306e\u5217\u306f\u65e2\u306b\u57cb\u307e\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n                    !rcfill[j + ROW]) {\n\n                        // \u305d\u306e\u5217\u306f\u57cb\u307e\u3063\u305f\u3068\u3057\u3066\u3001\u30d5\u30e9\u30b0\u3092true\u306b\u3059\u308b\n                        rcfill[j + ROW] = true;\n\n                        // \u8981\u3057\u305f\u8a66\u884c\u56de\u6570\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u57cb\u307e\u3063\u305f\u30de\u30b9\u306e\u6570\u3092\u683c\u7d0d\n                        fillnum.push_back(std::make_pair(i, sum(board)));\n                }\n            }\n\n\n            // \u5168\u3066\u306e\u884c\u30fb\u5217\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\n            if (fillnum.size() == ROWCOLUMN) {\n                // \u57cb\u307e\u3063\u305f\u306e\u3067\u30eb\u30fc\u30d7\u8131\u51fa\n                break;\n            }\n        }\n\n        // \u8981\u3057\u305f\u8a66\u884c\u95a2\u6570\u306e\u53ef\u5909\u9577\u914d\u5217\u3092\u8fd4\u3059\n        return fillnum;\n    }\n}\n\n\nmyrand.h\u306e\u5185\u5bb9\u306f\u8f09\u305b\u3066\u3044\u307e\u305b\u3093\u304c\u3001paiza.IO\u306b\u5168\u3066\u306e\u30b3\u30fc\u30c9\uff08\u3068\u5b9f\u884c\u7d50\u679c\uff09\u304c\u8f09\u305b\u3066\u3042\u308a\u307e\u3059\uff08 https://paiza.io/projects/nm7a45zjtDrgEwo9mEfl6w \uff09\u3002\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n10\u500b\u76ee\u306b\u5fc5\u8981\u306a\u5e73\u5747\u8a66\u884c\u56de\u6570\u304c95.5\u56de\u3068\u8a08\u7b97\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001\u7406\u8ad6\u5024\u3068\u307b\u307c\u7b49\u3057\u304f\u3001\u30d0\u30b0\u3063\u3066\u306f\u3044\u306a\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\uff08\u8a66\u884c\u56de\u657010000\u56de\uff09\u3002\n\n\u304a\u307e\u3051\uff08\u4e26\u5217\u5316\uff09\n\u4e00\u822c\u306b\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306f\u3001\u4e26\u5217\u5316\u52b9\u7387\u304c\u975e\u5e38\u306b\u9ad8\u3044\u3053\u3068\u3067\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001Intel Threading Building Blocks(Intel TBB)\u3067\u4e26\u5217\u5316\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\uff08\u3064\u3044\u3067\u306b\u3001Boost\u3082\u4f7f\u3063\u3066\u3044\u307e\u3059\uff09\u3002\u4e26\u5217\u5316\u3068\u8a00\u3063\u3066\u3082\u3001\u4f55\u3082\u96e3\u3057\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u95a2\u6570montecarlo()\u3092\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u3059\u3002\ntbb::concurrent_vector< std::vector<mypair2> > montecarloTBB()\n{\n    // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u4e8c\u6b21\u5143\u53ef\u5909\u9577\u914d\u5217\n    // \u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u540c\u6642\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081tbb::concurrent_vector\u3092\u4f7f\u3046\n    tbb::concurrent_vector< std::vector<mypair2> > mcresult;\n\n    // MCMAX\u500b\u306e\u5bb9\u91cf\u3092\u78ba\u4fdd\n    mcresult.reserve(MCMAX);\n\n    // MCMAX\u56de\u306e\u30eb\u30fc\u30d7\u3092\u4e26\u5217\u5316\u3057\u3066\u5b9f\u884c\n    tbb::parallel_for(\n        std::uint32_t(0),\n        MCMAX,\n        std::uint32_t(1),\n        [&mcresult](auto) { mcresult.push_back(montecarloImpl()); });\n\n    // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u8fd4\u3059\n    return mcresult;\n}\n\n\u5358\u306b\u3001for\u30eb\u30fc\u30d7\u3092tbb::paralle_for\uff08tbb/paralle_for.h\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff09\u306b\u66f8\u304d\u63db\u3048\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u6ce8\u610f\u70b9\u3068\u3057\u3066\u306f\u3001\u5909\u6570mcresult\u306f\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u305f\u3081\u3001std::vector<T>\u3067\u306f\u306a\u304f\u3001tbb::concurrent_vector<T>\uff08tbb/concurrent_vector.h\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff09\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u70b9\u3067\u3059\u3002\n\u4e26\u5217\u5316\u3057\u3066\u307f\u305f\u30b3\u30fc\u30c9\u306f\u3001GitHub\u306e\u3053\u3053\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a66\u884c\u56de\u6570\u3092100\u4e07\u56de\u306b\u3057\u3066\u3001\u4e26\u5217\u5316\u306e\u901f\u5ea6\u5411\u4e0a\u3092\u3001\u4ee5\u4e0b\u306e\u74b0\u5883\n\nCPU\uff1a Intel Core i7-3930K (Sandy Bridge-E, Hyper Threading ON (6C12T), SpeedStep OFF, Turbo Boost OFF) \n\u7269\u7406\u30e1\u30e2\u30ea\uff1a16GB\nOS\uff1aLinux Mint 17.1 - Cinnamon (64-bit)\n\u30b3\u30f3\u30d1\u30a4\u30e9\uff1aclang-3.6\n\n\u3067\u6e2c\u5b9a\u3057\u307e\u3059\u3068\u3001\u4ee5\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u4e26\u5217\u5316\u52b9\u7387\u306f\u3056\u3063\u30681.4\u500d\u3067\u3001\u3042\u307e\u308a\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u74b0\u5883\u3092\u3001\n\nOS\uff1aWindows 8.1 Enterprise x64\n\u30b3\u30f3\u30d1\u30a4\u30e9\uff1aVisual C++ 2015 (VC14) x64\u30d3\u30eb\u30c9\n\n\u306b\u5909\u3048\u308b\u3068\uff08CPU\u3068\u30e1\u30e2\u30ea\u306f\u305d\u306e\u307e\u307e\u3067\u3059\uff09\u3001\u4ee5\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u4e26\u5217\u5316\u52b9\u7387\u306f\u3056\u3063\u30687.1\u500d\u3067\u3001\u3057\u304b\u3082\u3001\u4e26\u5217\u5316\u3057\u306a\u3044\u5834\u5408\u3067\u3082Linux Mint\u3068clang\u306e\u7d44\u307f\u5408\u308f\u305b\u3088\u308a\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u304b\u306a\u308a\u610f\u5916\u3067\u3057\u305f\u3002\u307e\u305f\u3001\u56f3\u306b\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001x86\u30d3\u30eb\u30c9\u306e\u65b9\u304c\u3088\u308a\u901f\u3044\u50be\u5411\u306b\u3042\u308a\u307e\u3057\u305f\uff08\u7406\u7531\u306f\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\uff09\u3002\n\n\u307e\u3068\u3081\n\u3053\u3093\u306a\u3053\u3068\u8003\u3048\u308b\u3088\u308a\u3001\u72e9\u308a\u3057\u3066\u30eb\u30fc\u30ec\u30c3\u30c8\u306b\u5fc5\u8981\u306a\u30b3\u30a4\u30f3\u3092\u53d6\u3063\u3066\u304d\u305f\u65b9\u304c\u65e9\u3044\u3002\n[\u30de\u30d3\u30ce\u30ae](http://mabinogi.nexon.co.jp/ \"http://mabinogi.nexon.co.jp/\")\u3068\u3044\u3046\u30aa\u30f3\u30e9\u30a4\u30f3RPG\u306b\u3001\u4ee5\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306a\u30df\u30cb\u30b2\u30fc\u30e0\u304c\u3042\u308a\u307e\u3059\u3002\n\n![Qiita_151018_1.jpg](https://qiita-image-store.s3.amazonaws.com/0/58457/864c536e-e382-0b78-c930-8b4b3505f664.jpeg)\n\n\u8981\u3059\u308b\u306b\u3001\u5de6\u306e\u30eb\u30fc\u30ec\u30c3\u30c8\u3092\u56de\u3057\u3066\u5f53\u305f\u3063\u305f\u6570\u5b57\u3067\u3001\u53f3\u306e\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u57cb\u3081\u3066\u3044\u304f\u3068\u3044\u3046\u30df\u30cb\u30b2\u30fc\u30e0\u3067\u3059\uff08\u4ee5\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306a\u611f\u3058\uff09\u3002\n\n![Qiita_151018_2.jpg](https://qiita-image-store.s3.amazonaws.com/0/58457/9d33fd4c-6cc3-2a66-8aed-911d4f16a854.jpeg)\n\n\u3053\u306e\u30d3\u30f3\u30b4\u30b2\u30fc\u30e0\u306b\u3064\u3044\u3066\u3001\u30d3\u30f3\u30b4\u306e\u30de\u30b9\u3092\u5168\u3066\u57cb\u3081\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3001\u30eb\u30fc\u30ec\u30c3\u30c8\u306e\u8a66\u884c\u56de\u6570\u306e\u671f\u5f85\u5024\u3092\u8003\u3048\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u3044\u308f\u3086\u308b[\u30af\u30fc\u30dd\u30f3\u30b3\u30ec\u30af\u30bf\u30fc\u554f\u984c](https://en.wikipedia.org/wiki/Coupon_collector%27s_problem \"Coupon collector's problem\")\u3067\u3042\u308a\u300125\u7a2e\u985e\u306e\u30af\u30fc\u30dd\u30f3\u3092\u5168\u3066\u63c3\u3048\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u8a66\u884c\u56de\u6570\u306e\u671f\u5f85\u5024`E(N)`\u3068\u540c\u3058\u3067\u3059\u304b\u3089\u3001\n\n```math\nE(N)=25%\n%TCIMACRO{\\dsum \\limits_{n=1}^{25}}%\n%BeginExpansion\n{\\displaystyle\\sum\\limits_{n=1}^{25}}\n%EndExpansion\n\\dfrac{1}{n}\\simeq95.4\n```\n\n\u3067\u3059\u3002\n\n#\u672c\u984c\n\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u4e00\u3064\u306e\u884c\u30fb\u5217\u304c\u63c3\u3046\u305f\u3081\u306b\u5fc5\u8981\u306a\u30eb\u30fc\u30ec\u30c3\u30c8\u306e\u8a66\u884c\u56de\u6570\u306e\u671f\u5f85\u5024\u3092\u6c42\u3081\u305f\u304b\u3063\u305f\u305f\u3081\u3001~~C++11~~C++14\uff08\u77e5\u3089\u305a\u77e5\u3089\u305a\u306e\u3046\u3061\u306bC++14\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u5168\u3066C++14\u3067\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002\u3068\u8a00\u3063\u3066\u3082\u6570\u30f6\u6240\u4fee\u6b63\u3057\u305f\u3060\u3051\u3067\u3059\u304c\u3002\uff09\u3067\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u305d\u306e\u307e\u307e\u8f09\u305b\u307e\u3059\u3002\n\n```\n#include \"myrand.h\"\n#include <algorithm>\t// for std::find, std::shuffle, std::transform\n#include <cstdint>  \t// for std::int32_t\n#include <iomanip>\t\t// for std::setiosflags, std::setprecision\n#include <iostream> \t// for std::cout\n#include <numeric>      // for std::iota\n#include <random>   \t// for std::mt19937\n#include <utility>  \t// for std::make_pair, std::pair\n#include <vector>   \t// for std::vector\n\nnamespace {\n    //! A global variable (constant expression).\n    /*!\n        \u5217\u306e\u30b5\u30a4\u30ba\n    */\n    static auto constexpr COLUMN = 5U;\n\n    //! A global variable (constant expression).\n    /*!\n        \u884c\u306e\u30b5\u30a4\u30ba\n    */\n    static auto constexpr ROW = 5U;\n    \n    //! A global variable (constant expression).\n    /*!\n        \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u306e\u30de\u30b9\u6570\n    */\n    static auto constexpr BOARDSIZE = ROW * COLUMN;\n\n    //! A global variable (constant expression).\n    /*!\n        \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u8a66\u884c\u56de\u6570\n    */\n    static auto constexpr MCMAX = 10000U;\n\n    //! A global variable (constant expression).\n    /*!\n        \u884c\u30fb\u5217\u306e\u7dcf\u6570\n    */\n    static auto constexpr ROWCOLUMN = ROW + COLUMN;\n\n    //! A typedef.\n    /*!\n        \u305d\u306e\u30de\u30b9\u306b\u66f8\u304b\u308c\u3066\u3042\u308b\u756a\u53f7\u3068\u3001\u305d\u306e\u30de\u30b9\u304c\u5f53\u305f\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u30d5\u30e9\u30b0\n        \u306estd::pair\n    */\n    using mypair = std::pair<std::int32_t, bool>;\n\n    //! A typedef.\n    /*!\n        \u884c\u30fb\u5217\u304c\u57cb\u307e\u308b\u307e\u3067\u306b\u8981\u3057\u305f\u56de\u6570\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u57cb\u307e\u3063\u305f\u30de\u30b9\u306estd::pair\n    */\n    using mypair2 = std::pair<std::int32_t, std::int32_t>;\n\n    //! A function.\n    /*!\n        \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\n        \\return \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u304c\u683c\u7d0d\u3055\u308c\u305f\u53ef\u5909\u9577\u914d\u5217\n    */\n    auto makeBoard();\n\n    //! A function.\n    /*!\n        \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\n        \\return \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306e\u7d50\u679c\u304c\u683c\u7d0d\u3055\u308c\u305f\u4e8c\u6b21\u5143\u53ef\u5909\u9577\u914d\u5217\n    */\n    std::vector< std::vector<mypair2> > montecarlo();\n\n    //! A function.\n    /*!\n        \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\n        \\return \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306e\u7d50\u679c\u304c\u683c\u7d0d\u3055\u308c\u305f\u53ef\u5909\u9577\u914d\u5217\n    */\n    std::vector<mypair2> montecarloImpl();\n}\n\nint main()\n{\n    // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u4ee3\u5165\n    auto const mcresult(montecarlo());\n\n    // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5e73\u5747\u8a66\u884c\u56de\u6570\u306e\u7d50\u679c\u3092\u683c\u7d0d\u3057\u305f\u53ef\u5909\u9577\u914d\u5217\n    std::vector<double> trialavg(ROWCOLUMN);\n    \n    // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306ei\u56de\u76ee\u306e\u8a66\u884c\u3067\u3001\u57cb\u307e\u3063\u3066\u3044\u308b\u30de\u30b9\u306e\u6570\u3092\u683c\u7d0d\u3057\u305f\u53ef\u5909\u9577\u914d\u5217\n    std::vector<double> fillavg(ROWCOLUMN);\n\n    // \u884c\u30fb\u5217\u306e\u7dcf\u6570\u5206\u7e70\u308a\u8fd4\u3059\n    for (auto i = 0U; i < ROWCOLUMN; i++) {\n        // \u7dcf\u548c\u30920\u3067\u521d\u671f\u5316\n        auto trialsum = 0;\n        auto fillsum = 0;\n\n        // \u8a66\u884c\u56de\u6570\u5206\u7e70\u308a\u8fd4\u3059\n        for (auto j = 0U; j < MCMAX; j++) {\n            // j\u56de\u76ee\u306e\u7d50\u679c\u3092\u52a0\u3048\u308b\n            trialsum += mcresult[j][i].first;\n            fillsum += mcresult[j][i].second;\n        }\n\n        // \u5e73\u5747\u3092\u7b97\u51fa\u3057\u3066i\u884c\u30fb\u5217\u76ee\u306etrialavg\u3001fillavg\u306b\u4ee3\u5165\n        trialavg[i] = static_cast<double>(trialsum) / static_cast<double>(MCMAX);\n        fillavg[i] = static_cast<double>(fillsum) / static_cast<double>(MCMAX);\n    }\n\n    std::cout << std::setprecision(1) << std::setiosflags(std::ios::fixed);\n    for (auto i = 0U; i < ROWCOLUMN; i++) {\n        auto const efficiency = trialavg[i] / static_cast<double>(i + 1);\n\n        std::cout << (i + 1)\n                  << \"\u500b\u76ee\u306b\u5fc5\u8981\u306a\u5e73\u5747\u8a66\u884c\u56de\u6570\uff1a\"\n                  << trialavg[i]\n                  << \"\u56de, \u52b9\u7387 = \"\n                  << efficiency\n                  << \"\uff08\u56de/\u500b\uff09, \u57cb\u307e\u3063\u3066\u3044\u308b\u30de\u30b9\u306e\u5e73\u5747\u500b\u6570\uff1a\"\n                  << fillavg[i]\n                  << \"\u500b\\n\";\n    }\n\n    return 0;\n}\n\nnamespace {\n    auto makeBoard()\n    {\n        // \u4eee\u306e\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u751f\u6210\n        std::vector<std::int32_t> boardtmp(BOARDSIZE);\n\n        // \u4eee\u306e\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u306b1\uff5e25\u306e\u6570\u5b57\u3092\u4ee3\u5165\n        std::iota(boardtmp.begin(), boardtmp.end(), 1);\n\n        // \u4eee\u306e\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u306e\u6570\u5b57\u3092\u30b7\u30e3\u30c3\u30d5\u30eb\n        std::shuffle(boardtmp.begin(), boardtmp.end(), std::mt19937());\n\n        // \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u751f\u6210\n        std::vector<mypair> board(BOARDSIZE);\n\n        // \u4eee\u306e\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u304b\u3089\u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\n        std::transform(\n            boardtmp.begin(),\n            boardtmp.end(),\n            board.begin(),\n            [](auto n) { return std::make_pair(n, false); });\n\n        // \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u8fd4\u3059\n        return board;\n    }\n\n    std::vector< std::vector<mypair2> > montecarlo()\n    {\n        // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u4e8c\u6b21\u5143\u53ef\u5909\u9577\u914d\u5217\n        std::vector< std::vector<mypair2> > mcresult;\n\n        // MCMAX\u500b\u306e\u5bb9\u91cf\u3092\u78ba\u4fdd\n        mcresult.reserve(MCMAX);\n\n        // \u8a66\u884c\u56de\u6570\u5206\u7e70\u308a\u8fd4\u3059\n        for (auto i = 0U; i < MCMAX; i++) {\n            // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u4ee3\u5165\n            mcresult.push_back(montecarloImpl());\n        }\n\n        // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u8fd4\u3059\n        return mcresult;\n    }\n\n    std::vector<mypair2> montecarloImpl()\n    {\n        // \u30d3\u30f3\u30b4\u30dc\u30fc\u30c9\u3092\u751f\u6210\n        auto board(makeBoard());\n\n        // \u81ea\u4f5c\u4e71\u6570\u30af\u30e9\u30b9\u3092\u521d\u671f\u5316\n        myrandom::MyRand mr(1, BOARDSIZE);\n\n        // \u305d\u306e\u884c\u30fb\u5217\u304c\u65e2\u306b\u57cb\u307e\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u683c\u7d0d\u3059\u308b\u53ef\u5909\u9577\u914d\u5217\n        // ROWCOLUMNSIZE\u500b\u306e\u8981\u7d20\u3092false\u3067\u521d\u671f\u5316\n        std::vector<bool> rcfill(ROWCOLUMN, false);\n\n        // \u884c\u30fb\u5217\u304c\u57cb\u307e\u308b\u307e\u3067\u306b\u8981\u3057\u305f\u56de\u6570\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u57cb\u307e\u3063\u305f\u30de\u30b9\u3092\u683c\u7d0d\u3057\u305f\n        // \u53ef\u5909\u9577\u914d\u5217\n        std::vector<mypair2> fillnum;\n\n        // ROWCOLUMNSIZE\u500b\u306e\u5bb9\u91cf\u3092\u78ba\u4fdd\n        fillnum.reserve(ROWCOLUMN);\n\n        // \u305d\u306e\u6642\u70b9\u3067\u57cb\u307e\u3063\u3066\u3044\u308b\u30de\u30b9\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u30e9\u30e0\u30c0\u5f0f\n        auto const sum = [](auto const & vec) {\n            auto cnt = 0;\n            for (auto & e : vec) {\n                if (e.second) {\n                    cnt++;\n                }\n            }\n\n            return cnt;\n        };\n\n        // \u7121\u9650\u30eb\u30fc\u30d7\n        for (auto i = 1; ; i++) {\n            // \u4e71\u6570\u3067\u5f97\u305f\u6570\u5b57\u3067\u3001\u304b\u3064\u307e\u3060\u5f53\u305f\u3063\u3066\u306a\u3044\u30de\u30b9\u3092\u691c\u7d22\n            auto itr = std::find(\n                board.begin(),\n                board.end(),\n                std::make_pair(mr.myrand(), false));\n\n            // \u305d\u306e\u3088\u3046\u306a\u30de\u30b9\u304c\u3042\u3063\u305f\n            if (itr != board.end()) {\n                // \u305d\u306e\u30de\u30b9\u306f\u5f53\u305f\u3063\u305f\u3068\u3057\u3001\u30d5\u30e9\u30b0\u3092true\u306b\u3059\u308b\n                itr->second = true;\n            }\n            // \u305d\u306e\u3088\u3046\u306a\u30de\u30b9\u304c\u306a\u304b\u3063\u305f\n            else {\n                //\u30eb\u30fc\u30d7\u7d9a\u884c\n                continue;\n            }\n\n            // \u5404\u884c\u30fb\u5217\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\n            for (auto j = 0U; j < ROW; j++) {\n                // \u5404\u884c\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\n                auto rowflag = true;\n\n                // \u5404\u884c\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\n                for (auto k = 0U; k < COLUMN; k++) {\n                    rowflag &= board[COLUMN * j + k].second;\n                }\n\n                // \u884c\u306e\u51e6\u7406\n                if (rowflag &&\n                    // \u305d\u306e\u884c\u306f\u65e2\u306b\u57cb\u307e\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n                    !rcfill[j]) {\n                        // \u305d\u306e\u884c\u306f\u57cb\u307e\u3063\u305f\u3068\u3057\u3066\u3001\u30d5\u30e9\u30b0\u3092true\u306b\u3059\u308b\n                        rcfill[j] = true;\n    \n                        // \u8981\u3057\u305f\u8a66\u884c\u56de\u6570\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u57cb\u307e\u3063\u305f\u30de\u30b9\u306e\u6570\u3092\u683c\u7d0d\n                        fillnum.push_back(std::make_pair(i, sum(board)));\n                }\n\n                // \u5404\u5217\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\u306e\u30d5\u30e9\u30b0\n                auto columnflag = true;\n            \n                // \u5404\u5217\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af    \n                for (auto k = 0U; k < ROW; k++) {\n                    columnflag &= board[j + COLUMN * k].second;\n                }\n                \n                // \u5217\u306e\u51e6\u7406\n                if (columnflag &&\n                    // \u305d\u306e\u5217\u306f\u65e2\u306b\u57cb\u307e\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\n                    !rcfill[j + ROW]) {\n    \n                        // \u305d\u306e\u5217\u306f\u57cb\u307e\u3063\u305f\u3068\u3057\u3066\u3001\u30d5\u30e9\u30b0\u3092true\u306b\u3059\u308b\n                        rcfill[j + ROW] = true;\n                        \n                        // \u8981\u3057\u305f\u8a66\u884c\u56de\u6570\u3068\u3001\u305d\u306e\u6642\u70b9\u3067\u57cb\u307e\u3063\u305f\u30de\u30b9\u306e\u6570\u3092\u683c\u7d0d\n                        fillnum.push_back(std::make_pair(i, sum(board)));\n                }\n            }\n            \n\n            // \u5168\u3066\u306e\u884c\u30fb\u5217\u304c\u57cb\u307e\u3063\u305f\u304b\u3069\u3046\u304b\n            if (fillnum.size() == ROWCOLUMN) {\n                // \u57cb\u307e\u3063\u305f\u306e\u3067\u30eb\u30fc\u30d7\u8131\u51fa\n                break;\n            }\n        }\n\n        // \u8981\u3057\u305f\u8a66\u884c\u95a2\u6570\u306e\u53ef\u5909\u9577\u914d\u5217\u3092\u8fd4\u3059\n        return fillnum;\n    }\n}\n\n```\n\nmyrand.h\u306e\u5185\u5bb9\u306f\u8f09\u305b\u3066\u3044\u307e\u305b\u3093\u304c\u3001[paiza.IO](https://paiza.io/?locale=ja-jp \"paiza.IO\")\u306b\u5168\u3066\u306e\u30b3\u30fc\u30c9\uff08\u3068\u5b9f\u884c\u7d50\u679c\uff09\u304c\u8f09\u305b\u3066\u3042\u308a\u307e\u3059\uff08 [https://paiza.io/projects/nm7a45zjtDrgEwo9mEfl6w](https://paiza.io/projects/nm7a45zjtDrgEwo9mEfl6w) \uff09\u3002\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n![Qiita_151018_3.png](https://qiita-image-store.s3.amazonaws.com/0/58457/8c5bec3a-2ca0-9f71-a09d-7b3e0a51b49f.png)\n\n10\u500b\u76ee\u306b\u5fc5\u8981\u306a\u5e73\u5747\u8a66\u884c\u56de\u6570\u304c95.5\u56de\u3068\u8a08\u7b97\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001\u7406\u8ad6\u5024\u3068\u307b\u307c\u7b49\u3057\u304f\u3001\u30d0\u30b0\u3063\u3066\u306f\u3044\u306a\u3044\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\uff08\u8a66\u884c\u56de\u657010000\u56de\uff09\u3002\n\n#\u304a\u307e\u3051\uff08\u4e26\u5217\u5316\uff09\n\u4e00\u822c\u306b\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306f\u3001\u4e26\u5217\u5316\u52b9\u7387\u304c\u975e\u5e38\u306b\u9ad8\u3044\u3053\u3068\u3067\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001[Intel Threading Building Blocks(Intel TBB)](https://www.threadingbuildingblocks.org/ \"https://www.threadingbuildingblocks.org/\")\u3067\u4e26\u5217\u5316\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\uff08\u3064\u3044\u3067\u306b\u3001[Boost](http://www.boost.org/ \"http://www.boost.org/\")\u3082\u4f7f\u3063\u3066\u3044\u307e\u3059\uff09\u3002\u4e26\u5217\u5316\u3068\u8a00\u3063\u3066\u3082\u3001\u4f55\u3082\u96e3\u3057\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u95a2\u6570`montecarlo()`\u3092\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3060\u3051\u3067\u3059\u3002\n\n```\ntbb::concurrent_vector< std::vector<mypair2> > montecarloTBB()\n{\n    // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u4e8c\u6b21\u5143\u53ef\u5909\u9577\u914d\u5217\n    // \u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u540c\u6642\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081tbb::concurrent_vector\u3092\u4f7f\u3046\n    tbb::concurrent_vector< std::vector<mypair2> > mcresult;\n\n    // MCMAX\u500b\u306e\u5bb9\u91cf\u3092\u78ba\u4fdd\n    mcresult.reserve(MCMAX);\n\n    // MCMAX\u56de\u306e\u30eb\u30fc\u30d7\u3092\u4e26\u5217\u5316\u3057\u3066\u5b9f\u884c\n    tbb::parallel_for(\n        std::uint32_t(0),\n        MCMAX,\n        std::uint32_t(1),\n        [&mcresult](auto) { mcresult.push_back(montecarloImpl()); });\n\n    // \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u30fb\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u7d50\u679c\u3092\u8fd4\u3059\n    return mcresult;\n}\n```\n\n\u5358\u306b\u3001for\u30eb\u30fc\u30d7\u3092`tbb::paralle_for`\uff08tbb/paralle_for.h\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff09\u306b\u66f8\u304d\u63db\u3048\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u6ce8\u610f\u70b9\u3068\u3057\u3066\u306f\u3001\u5909\u6570`mcresult`\u306f\u3001\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u305f\u3081\u3001`std::vector<T>`\u3067\u306f\u306a\u304f\u3001`tbb::concurrent_vector<T>`\uff08tbb/concurrent_vector.h\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff09\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u70b9\u3067\u3059\u3002\n\n\u4e26\u5217\u5316\u3057\u3066\u307f\u305f\u30b3\u30fc\u30c9\u306f\u3001[GitHub\u306e\u3053\u3053](https://github.com/dc1394/mabinogi_roulette_MC \"https://github.com/dc1394/mabinogi_roulette_MC\")\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u8a66\u884c\u56de\u6570\u3092100\u4e07\u56de\u306b\u3057\u3066\u3001\u4e26\u5217\u5316\u306e\u901f\u5ea6\u5411\u4e0a\u3092\u3001\u4ee5\u4e0b\u306e\u74b0\u5883\n\n* CPU\uff1a Intel Core i7-3930K (Sandy Bridge-E, Hyper Threading ON (6C12T), SpeedStep OFF, Turbo Boost OFF) \n* \u7269\u7406\u30e1\u30e2\u30ea\uff1a16GB\n* OS\uff1aLinux Mint 17.1 - Cinnamon (64-bit)\n* \u30b3\u30f3\u30d1\u30a4\u30e9\uff1aclang-3.6\n\n\u3067\u6e2c\u5b9a\u3057\u307e\u3059\u3068\u3001\u4ee5\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n![Qiita_151018_4.png](https://qiita-image-store.s3.amazonaws.com/0/58457/b963a66c-c0df-64c5-a4ae-b639feb1e4a7.png)\n\n\u4e26\u5217\u5316\u52b9\u7387\u306f\u3056\u3063\u30681.4\u500d\u3067\u3001\u3042\u307e\u308a\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u74b0\u5883\u3092\u3001\n\n* OS\uff1aWindows 8.1 Enterprise x64\n* \u30b3\u30f3\u30d1\u30a4\u30e9\uff1aVisual C++ 2015 (VC14) x64\u30d3\u30eb\u30c9\n\n\u306b\u5909\u3048\u308b\u3068\uff08CPU\u3068\u30e1\u30e2\u30ea\u306f\u305d\u306e\u307e\u307e\u3067\u3059\uff09\u3001\u4ee5\u4e0b\u306e\u753b\u50cf\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n![Qiita_151018_5.png](https://qiita-image-store.s3.amazonaws.com/0/58457/7cd26a30-a87f-1cb8-a1a4-f457fd62bf4e.png)\n\n\u4e26\u5217\u5316\u52b9\u7387\u306f\u3056\u3063\u30687.1\u500d\u3067\u3001\u3057\u304b\u3082\u3001\u4e26\u5217\u5316\u3057\u306a\u3044\u5834\u5408\u3067\u3082Linux Mint\u3068clang\u306e\u7d44\u307f\u5408\u308f\u305b\u3088\u308a\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u304b\u306a\u308a\u610f\u5916\u3067\u3057\u305f\u3002\u307e\u305f\u3001\u56f3\u306b\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001x86\u30d3\u30eb\u30c9\u306e\u65b9\u304c\u3088\u308a\u901f\u3044\u50be\u5411\u306b\u3042\u308a\u307e\u3057\u305f\uff08\u7406\u7531\u306f\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\uff09\u3002\n\n#\u307e\u3068\u3081\n\u3053\u3093\u306a\u3053\u3068\u8003\u3048\u308b\u3088\u308a\u3001\u72e9\u308a\u3057\u3066\u30eb\u30fc\u30ec\u30c3\u30c8\u306b\u5fc5\u8981\u306a\u30b3\u30a4\u30f3\u3092\u53d6\u3063\u3066\u304d\u305f\u65b9\u304c\u65e9\u3044\u3002\n", "tags": ["C++", "TBB", "\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5", "C++11", "C++14"]}