{"context": " More than 1 year has passed since last update.\u30a4\u30d9\u30f3\u30c8\u30da\u30fc\u30b8\u306f http://atnd.org/events/36783 \u3002\n\u554f\u984c\u306f http://nabetani.sakura.ne.jp/hena/ord8entco/ \u3002\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6\u306f http://qiita.com/items/24b9be4ee3bae4c89a95 \u3002\n\u3067\u3002\n\u6700\u521d\u306e\u5b9f\u88c5\u306f ruby \u3060\u3063\u305f\u3093\u3060\u3051\u3069\u3001ruby \u306e\u89e3\u7b54\u306f\u3059\u3067\u306b\u51fa\u3066\u3044\u308b\u306e\u3067 groovy \u306b\u79fb\u690d\u3057\u305f\u3002\nMAP=[\n \"0111\":\"a\", \"0101101\":\"c\", \"01010\":\"d\", \"10\":\"e\", \n \"1101\":\"h\", \"0100\":\"i\", \"010111\":\"l\", \"0011\":\"n\", \n \"0110\":\"o\", \"1100\":\"r\", \"0010\":\"s\", \"000\":\"t\", \n \"111\":false\n]\n\ndef solve_core( bits, result ){\n MAP.collect{ \n  m=bits =~ /^${it.key}(.*)$/\n  if ( m ){\n   cap=m[0][1]\n   used = result[1]+it.key.size()\n   return it.value ? \n    solve_core( cap, [result[0]+it.value, used])\n    : [ result[0], used]\n  }\n }.find{it} ?: [\"*invalid*\"]\n}\n\ndef solve( src ){\n solve_core( (0..<(src.length()*4)).collect{\n  ch = src[ (int)( it / 4 ) ] /// \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\u306e\u30d0\u30b0\u56de\u907f\u306e\u305f\u3081\u306e\u30b3\u30e1\u30f3\u30c8\n  Integer.toString( \n   Integer.parseInt( ch, 16 )|32, 2 )[5-it%4]\n }.join(\"\"), [\"\", 0 ] ).join(\":\")\n}\n\ndef test( src, expected){\n actual = solve( src );\n result = actual==expected ? \"ok\" : \"***NG***\"\n println( \"${src}->${actual} / ${expected} : ${ result }\" )\n}\n\n/*0*/ test( \"16d9d4fbd\", \"ethanol:30\" )\n/* \u7565 */\n/*36*/ test( \"6822dcb\", \"*invalid*\" )\n\n\u6b63\u898f\u8868\u73fe\u3067\u8a55\u4fa1\u6e08\u307f\u90e8\u5206\u3068\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u306b\u5206\u3051\u3001\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u3092\u518d\u8a55\u4fa1\u3002\n\u30eb\u30fc\u30d7\u3088\u308a\u3082\u518d\u5e30\u306e\u65b9\u304c\u7c21\u5358\u306b\u304b\u3051\u308b\u306e\u3067\u3001\u30b9\u30bf\u30c3\u30af\u304c\u3042\u3075\u308c\u305f\u3089\u56f0\u308b\u306a\u3041\u3068\u601d\u3044\u3064\u3064\u3001\u518d\u5e30\u3002\nsolve \u306e\u4e2d\u306b\u3042\u308b\u602a\u3057\u3052\u306a\u8a08\u7b97\u306f\u3001\u30d3\u30c3\u30c8\u9806\u3092\u9006\u306b\u3057\u3066\u3044\u308b\u3060\u3051\u3002\n32 \u3068 or \u3092\u53d6\u3063\u3066\u6841\u6570\u4e0d\u8db3\u3092\u56de\u907f\u3057\u3066\u3044\u308b\u3002\nsolve_core \u95a2\u6570\u3002\n\u672c\u5f53\u306f Map.each \u306e\u4e2d\u3067\u95a2\u6570\u304b\u3089 return \u3057\u305f\u3044\u3068\u3053\u308d\u306a\u3093\u3060\u3051\u3069\u3001ruby \u306e\u30d6\u30ed\u30c3\u30af\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u304c\u306a\u3044\u306e\u3067\u3001\u82e6\u3057\u7d1b\u308c\u306b collect \u3057\u305f\u3082\u306e\u304b\u3089 find \u3057\u305f\u3002\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u304c\u3042\u308b\u306f\u305a\u3002\u6539\u5584\u6848\u6c42\u3080\u3002\n\u76f8\u5909\u308f\u3089\u305a\u3001collect \u3068\u66f8\u304f\u3079\u304d\u6240\u3067\u4f55\u5ea6\u3082 map \u3068\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u305f\u3002\u306a\u304b\u306a\u304b\u6163\u308c\u306a\u3044\u3002\n\n\u30a4\u30d9\u30f3\u30c8\u30da\u30fc\u30b8\u306f http://atnd.org/events/36783 \u3002\n\u554f\u984c\u306f http://nabetani.sakura.ne.jp/hena/ord8entco/ \u3002\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6\u306f http://qiita.com/items/24b9be4ee3bae4c89a95 \u3002\n\n\u3067\u3002\n\n\u6700\u521d\u306e\u5b9f\u88c5\u306f ruby \u3060\u3063\u305f\u3093\u3060\u3051\u3069\u3001ruby \u306e\u89e3\u7b54\u306f\u3059\u3067\u306b\u51fa\u3066\u3044\u308b\u306e\u3067 groovy \u306b\u79fb\u690d\u3057\u305f\u3002\n\n```groovy\nMAP=[\n \"0111\":\"a\", \"0101101\":\"c\", \"01010\":\"d\", \"10\":\"e\", \n \"1101\":\"h\", \"0100\":\"i\", \"010111\":\"l\", \"0011\":\"n\", \n \"0110\":\"o\", \"1100\":\"r\", \"0010\":\"s\", \"000\":\"t\", \n \"111\":false\n]\n\ndef solve_core( bits, result ){\n MAP.collect{ \n  m=bits =~ /^${it.key}(.*)$/\n  if ( m ){\n   cap=m[0][1]\n   used = result[1]+it.key.size()\n   return it.value ? \n    solve_core( cap, [result[0]+it.value, used])\n    : [ result[0], used]\n  }\n }.find{it} ?: [\"*invalid*\"]\n}\n\ndef solve( src ){\n solve_core( (0..<(src.length()*4)).collect{\n  ch = src[ (int)( it / 4 ) ] /// \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\u306e\u30d0\u30b0\u56de\u907f\u306e\u305f\u3081\u306e\u30b3\u30e1\u30f3\u30c8\n  Integer.toString( \n   Integer.parseInt( ch, 16 )|32, 2 )[5-it%4]\n }.join(\"\"), [\"\", 0 ] ).join(\":\")\n}\n\ndef test( src, expected){\n actual = solve( src );\n result = actual==expected ? \"ok\" : \"***NG***\"\n println( \"${src}->${actual} / ${expected} : ${ result }\" )\n}\n\n/*0*/ test( \"16d9d4fbd\", \"ethanol:30\" )\n/* \u7565 */\n/*36*/ test( \"6822dcb\", \"*invalid*\" )\n```\n\n\u6b63\u898f\u8868\u73fe\u3067\u8a55\u4fa1\u6e08\u307f\u90e8\u5206\u3068\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u306b\u5206\u3051\u3001\u305d\u308c\u4ee5\u5916\u306e\u90e8\u5206\u3092\u518d\u8a55\u4fa1\u3002\n\u30eb\u30fc\u30d7\u3088\u308a\u3082\u518d\u5e30\u306e\u65b9\u304c\u7c21\u5358\u306b\u304b\u3051\u308b\u306e\u3067\u3001\u30b9\u30bf\u30c3\u30af\u304c\u3042\u3075\u308c\u305f\u3089\u56f0\u308b\u306a\u3041\u3068\u601d\u3044\u3064\u3064\u3001\u518d\u5e30\u3002\n\nsolve \u306e\u4e2d\u306b\u3042\u308b\u602a\u3057\u3052\u306a\u8a08\u7b97\u306f\u3001\u30d3\u30c3\u30c8\u9806\u3092\u9006\u306b\u3057\u3066\u3044\u308b\u3060\u3051\u3002\n32 \u3068 or \u3092\u53d6\u3063\u3066\u6841\u6570\u4e0d\u8db3\u3092\u56de\u907f\u3057\u3066\u3044\u308b\u3002\n\nsolve_core \u95a2\u6570\u3002\n\u672c\u5f53\u306f Map.each \u306e\u4e2d\u3067\u95a2\u6570\u304b\u3089 return \u3057\u305f\u3044\u3068\u3053\u308d\u306a\u3093\u3060\u3051\u3069\u3001ruby \u306e\u30d6\u30ed\u30c3\u30af\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u304c\u306a\u3044\u306e\u3067\u3001\u82e6\u3057\u7d1b\u308c\u306b collect \u3057\u305f\u3082\u306e\u304b\u3089 find \u3057\u305f\u3002\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u304c\u3042\u308b\u306f\u305a\u3002\u6539\u5584\u6848\u6c42\u3080\u3002\n\n\u76f8\u5909\u308f\u3089\u305a\u3001collect \u3068\u66f8\u304f\u3079\u304d\u6240\u3067\u4f55\u5ea6\u3082 map \u3068\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u305f\u3002\u306a\u304b\u306a\u304b\u6163\u308c\u306a\u3044\u3002\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "Groovy2.1.0"]}