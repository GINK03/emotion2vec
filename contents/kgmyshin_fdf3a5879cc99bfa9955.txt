{"context": " More than 1 year has passed since last update.Model-Controller\u9593\u306e\u901a\u77e5\u51e6\u7406\u3092Observer Pattern\u3092\u7528\u3044\u3066\u3044\u308b\u65b9\u304c\u305d\u308c\u306a\u308a\u306b\u5c45\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u50d5\u3082Observer Pattern\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nObserver Pattern\u306e\u30e1\u30ea\u30c3\u30c8\u306f\u3044\u308d\u3044\u308d\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u305d\u3053\u306f\u30d1\u30b9\u3057\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001Observer Pattern\u306e\u9069\u7528\u306b\u3082\u30c7\u30e1\u30ea\u30c3\u30c8\u306f\u3042\u308a\u307e\u3059\u3002\n\u305d\u308c\u306f\u300c\u30bd\u30fc\u30b9\u304c\u6c5a\u304f\u306a\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002(\u4e3b\u89b3\u7684\u306a\u8a71\u3068\u3044\u3048\u3070\u305d\u3046\u306a\u306e\u3067\u3059\u304c\u3002\u3002)\n\u305f\u3068\u3048\u3070\n\u300cAndroid\u5185\u306eCalendar\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3001\u305d\u308c\u3092\u3082\u3068\u306bEvent\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3001\u53d6\u5f97\u3057\u305fEvent\u4e00\u89a7\u306e\u59cb\u3081\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8868\u793a\u3059\u308b\u300d\n\u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f5c\u308b\u3068\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u306f\u3053\u308c\u3092Observer Pattern\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3057\u305f\u5834\u5408\u306eController\u3067\u3059\u3002\n\nMainActivity.java\npublic class MainActivity extends Activity implements CalendarObserver, EventObserver{\n\n    private TextView mTextView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mTextView = (TextView) findViewById(R.id.event_name);\n        getEventName();\n    }\n\n    private void getEventName() {\n        CalendarModel calendarModel = CalendarModel.getInstance();\n        calendarModel.addObserver(this);\n        calendarModel.requestFetchAll(this);\n    }\n\n    @Override\n    public void onFetchedAllCalendars(ArrayList<Calendar> calendars) {\n        CalendarModel.getInstance().deleteObserver(this);\n\n        EventModel eventModel = EventModel.getInstance();\n        eventModel.addObserver(this);\n        eventModel.requestFetchAll(this, calendars, System.currentTimeMillis());\n    }\n\n    @Override\n    public void onFetchedAllEvents(ArrayList<Event> events) {\n        EventModel.getInstance().deleteObserver(this);\n        mTextView.setText(events.get(0).getTitle());\n    }\n\n}\n\n\n\u4e2d\u3067\u306f\n\uff11\u3001\u30ab\u30ec\u30f3\u30c0\u30fc\u30ea\u30b9\u30c8\u53d6\u5f97\u4f9d\u983c\u3092\u3059\u308b\n\uff12\u3001\u901a\u77e5\u304c\u304f\u308b\n\uff13\u3001\u30ab\u30ec\u30f3\u30c0\u30fc\u30ea\u30b9\u30c8\u3092\u3082\u3068\u306b\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30c8\u53d6\u5f97\u4f9d\u983c\u3092\u3059\u308b\n\uff14\u3001\u901a\u77e5\u304c\u6765\u308b\n\uff15\u3001\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30c8\u306e\u59cb\u3081\u306e\u30a4\u30d9\u30f3\u30c8\u540d\u3092\u8868\u793a\u3059\u308b\n\u3068\u3044\u3046\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u30bd\u30fc\u30b9\u304c\u3069\u3046\u3057\u3066\u3082\u6c5a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\nonFetchedAllCalendars \u3068\u3044\u3046\u95a2\u6570\u540d\u304b\u3089\u305d\u306e\u4e2d\u3067\u300c\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30c8\u306e\u53d6\u5f97\u4f9d\u983c\u3092\u3057\u3066\u3044\u308b\u300d\u3068\u60f3\u50cf\u304c\u7740\u304f\u4eba\u306f\u307e\u305a\u3044\u307e\u305b\u3093\u3088\u306d\u3002\n\u95a2\u6570\u3067\u5206\u3051\u308b\u3079\u304d\u3067\u306a\u3044\u3068\u3053\u308d\u3092\u3076\u3064\u5207\u308a\u306b\u3057\u3066\u3057\u307e\u308f\u306a\u3044\u3068\u3044\u3051\u306a\u304b\u3063\u305f\u308a\u3001\u95a2\u6570\u540d\u304b\u3089\u51e6\u7406\u306e\u5185\u5bb9\u3092\u60f3\u50cf\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3065\u3089\u304b\u3063\u305f\u308a\u3059\u308b\u305f\u3081\u3053\u3046\u3044\u3046\u3053\u3068\u304c\u304a\u304d\u307e\u3059\u3002\n\u3084\u3063\u3068\u524d\u7f6e\u304d\u304c\u7d42\u4e86\u3067\u3059\u3002\n\u4eca\u56deRxAndroid\u3092\u4f7f\u7528\u3057\u3066\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e0b\u8a18\u304c\u66f8\u304d\u63db\u3048\u5f8c\u306e\u30bd\u30fc\u30b9\u3067\u3059\u3002(\u30e2\u30c7\u30eb\u3068\u304b\u3082\u66f8\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002)\n\nRxActivity.java\npublic class MainActivity extends Activity {\n\n    private final CompositeSubscription mCompositeSubscription = new CompositeSubscription();\n\n    private TextView mTextView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mTextView = (TextView) findViewById(R.id.event_name);\n\n        // \u30ab\u30ec\u30f3\u30c0\u30fc\u30ea\u30b9\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4f5c\u6210\n        Observable<ArrayList<Calendar>> calendarListStream = RxCalendarModel.getInstance().getCalendarListStream(this);\n        // \u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4f5c\u6210\n        Observable<ArrayList<Event>> eventListStream = calendarListStream.flatMap(new Func1<ArrayList<Calendar>, Observable<ArrayList<Event>>>() {\n            @Override\n            public Observable<ArrayList<Event>> call(ArrayList<Calendar> calendars) {\n                return RxEventModel.getInstance().getEventListStream(MainActivity.this, calendars, System.currentTimeMillis());\n            }\n        });\n\n        // Subscription\u306e\u767b\u9332\n        mCompositeSubscription.add(\n                eventListStream\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 .observeOn(AndroidSchedulers.mainThread())\n                        .subscribe(new Action1<ArrayList<Event>>() {\n                            @Override\n                            public void call(ArrayList<Event> events) {\n                                mTextView.setText(events.get(0).getTitle());\n                            }\n                        }\n                )\n        );\n    }\n\n    @Override\n    protected void onDestroy() {\n        mCompositeSubscription.clear();\n        super.onDestroy();\n    }\n}\n\n\n\n\u30ab\u30ec\u30f3\u30c0\u30fc\u30ea\u30b9\u30c8\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u3001\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30c8\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u3001Subscription\u3092\u767b\u9332\u3059\u308b\u3060\u3051\u3002\n\u3057\u304b\u3082\u3001\u3053\u308c\u3092\u3076\u3064\u5207\u308a\u306b\u3059\u308b\u3053\u3068\u306a\u304f\u66f8\u304f\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n(*\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u6982\u5ff5\u306a\u3069\u306b\u3064\u3044\u3066\u306fReactive android\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002)\n\u4e0a\u8a18\u306e\u3088\u3046\u306bonDestroy\u3067Subscription\u306eclear\u3092\u884c\u3048\u3070\u3001\u5b89\u5168\u6027\u306b\u3082\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u305d\u3057\u3066\u3055\u3089\u306b\u591a\u7a2e\u306e\u30e2\u30c7\u30eb\u3068\u7d50\u5408\u3059\u308b\u5834\u5408\u3082\u7c21\u5358\u306b\u66f8\u304f\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\nRxAndroid\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u4eca\u56de\u306e\u4f7f\u7528\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306f\u4e0b\u8a18\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/kgmyshin/Observer-Pattern-to-Rx\n(MainActivity\u306fObserver Pattern\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001RxActivity\u306fRxAndroid\u3067\u66f8\u304d\u63db\u3048\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002)\n\nModel-Controller\u9593\u306e\u901a\u77e5\u51e6\u7406\u3092Observer Pattern\u3092\u7528\u3044\u3066\u3044\u308b\u65b9\u304c\u305d\u308c\u306a\u308a\u306b\u5c45\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u50d5\u3082Observer Pattern\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\nObserver Pattern\u306e\u30e1\u30ea\u30c3\u30c8\u306f\u3044\u308d\u3044\u308d\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u305d\u3053\u306f\u30d1\u30b9\u3057\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001Observer Pattern\u306e\u9069\u7528\u306b\u3082\u30c7\u30e1\u30ea\u30c3\u30c8\u306f\u3042\u308a\u307e\u3059\u3002\n\u305d\u308c\u306f\u300c\u30bd\u30fc\u30b9\u304c\u6c5a\u304f\u306a\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002(\u4e3b\u89b3\u7684\u306a\u8a71\u3068\u3044\u3048\u3070\u305d\u3046\u306a\u306e\u3067\u3059\u304c\u3002\u3002)\n\n\u305f\u3068\u3048\u3070\n\u300cAndroid\u5185\u306eCalendar\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3001\u305d\u308c\u3092\u3082\u3068\u306bEvent\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3001\u53d6\u5f97\u3057\u305fEvent\u4e00\u89a7\u306e\u59cb\u3081\u306e\u30bf\u30a4\u30c8\u30eb\u3092\u8868\u793a\u3059\u308b\u300d\n\u3068\u3044\u3046\u6a5f\u80fd\u3092\u4f5c\u308b\u3068\u3057\u307e\u3059\u3002\n\n\u4e0b\u8a18\u306f\u3053\u308c\u3092Observer Pattern\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3057\u305f\u5834\u5408\u306eController\u3067\u3059\u3002\n\n```java:MainActivity.java\npublic class MainActivity extends Activity implements CalendarObserver, EventObserver{\n\n    private TextView mTextView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mTextView = (TextView) findViewById(R.id.event_name);\n        getEventName();\n    }\n\n    private void getEventName() {\n        CalendarModel calendarModel = CalendarModel.getInstance();\n        calendarModel.addObserver(this);\n        calendarModel.requestFetchAll(this);\n    }\n\n    @Override\n    public void onFetchedAllCalendars(ArrayList<Calendar> calendars) {\n        CalendarModel.getInstance().deleteObserver(this);\n\n        EventModel eventModel = EventModel.getInstance();\n        eventModel.addObserver(this);\n        eventModel.requestFetchAll(this, calendars, System.currentTimeMillis());\n    }\n\n    @Override\n    public void onFetchedAllEvents(ArrayList<Event> events) {\n        EventModel.getInstance().deleteObserver(this);\n        mTextView.setText(events.get(0).getTitle());\n    }\n\n}\n```\n\n\u4e2d\u3067\u306f\n\n\uff11\u3001\u30ab\u30ec\u30f3\u30c0\u30fc\u30ea\u30b9\u30c8\u53d6\u5f97\u4f9d\u983c\u3092\u3059\u308b\n\uff12\u3001\u901a\u77e5\u304c\u304f\u308b\n\uff13\u3001\u30ab\u30ec\u30f3\u30c0\u30fc\u30ea\u30b9\u30c8\u3092\u3082\u3068\u306b\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30c8\u53d6\u5f97\u4f9d\u983c\u3092\u3059\u308b\n\uff14\u3001\u901a\u77e5\u304c\u6765\u308b\n\uff15\u3001\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30c8\u306e\u59cb\u3081\u306e\u30a4\u30d9\u30f3\u30c8\u540d\u3092\u8868\u793a\u3059\u308b\n\n\u3068\u3044\u3046\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u30bd\u30fc\u30b9\u304c\u3069\u3046\u3057\u3066\u3082\u6c5a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\nonFetchedAllCalendars \u3068\u3044\u3046\u95a2\u6570\u540d\u304b\u3089\u305d\u306e\u4e2d\u3067\u300c\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30c8\u306e\u53d6\u5f97\u4f9d\u983c\u3092\u3057\u3066\u3044\u308b\u300d\u3068\u60f3\u50cf\u304c\u7740\u304f\u4eba\u306f\u307e\u305a\u3044\u307e\u305b\u3093\u3088\u306d\u3002\n\u95a2\u6570\u3067\u5206\u3051\u308b\u3079\u304d\u3067\u306a\u3044\u3068\u3053\u308d\u3092\u3076\u3064\u5207\u308a\u306b\u3057\u3066\u3057\u307e\u308f\u306a\u3044\u3068\u3044\u3051\u306a\u304b\u3063\u305f\u308a\u3001\u95a2\u6570\u540d\u304b\u3089\u51e6\u7406\u306e\u5185\u5bb9\u3092\u60f3\u50cf\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3065\u3089\u304b\u3063\u305f\u308a\u3059\u308b\u305f\u3081\u3053\u3046\u3044\u3046\u3053\u3068\u304c\u304a\u304d\u307e\u3059\u3002\n\n\u3084\u3063\u3068\u524d\u7f6e\u304d\u304c\u7d42\u4e86\u3067\u3059\u3002\n\n\u4eca\u56deRxAndroid\u3092\u4f7f\u7528\u3057\u3066\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e0b\u8a18\u304c\u66f8\u304d\u63db\u3048\u5f8c\u306e\u30bd\u30fc\u30b9\u3067\u3059\u3002(\u30e2\u30c7\u30eb\u3068\u304b\u3082\u66f8\u304d\u63db\u3048\u3066\u3044\u307e\u3059\u3002)\n\n```java:RxActivity.java\npublic class MainActivity extends Activity {\n\n    private final CompositeSubscription mCompositeSubscription = new CompositeSubscription();\n\n    private TextView mTextView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mTextView = (TextView) findViewById(R.id.event_name);\n\n        // \u30ab\u30ec\u30f3\u30c0\u30fc\u30ea\u30b9\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4f5c\u6210\n        Observable<ArrayList<Calendar>> calendarListStream = RxCalendarModel.getInstance().getCalendarListStream(this);\n        // \u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4f5c\u6210\n        Observable<ArrayList<Event>> eventListStream = calendarListStream.flatMap(new Func1<ArrayList<Calendar>, Observable<ArrayList<Event>>>() {\n            @Override\n            public Observable<ArrayList<Event>> call(ArrayList<Calendar> calendars) {\n                return RxEventModel.getInstance().getEventListStream(MainActivity.this, calendars, System.currentTimeMillis());\n            }\n        });\n\n        // Subscription\u306e\u767b\u9332\n        mCompositeSubscription.add(\n                eventListStream\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000 .observeOn(AndroidSchedulers.mainThread())\n                        .subscribe(new Action1<ArrayList<Event>>() {\n                            @Override\n                            public void call(ArrayList<Event> events) {\n                                mTextView.setText(events.get(0).getTitle());\n                            }\n                        }\n                )\n        );\n    }\n\n    @Override\n    protected void onDestroy() {\n        mCompositeSubscription.clear();\n        super.onDestroy();\n    }\n}\n\n```\n\n\u30ab\u30ec\u30f3\u30c0\u30fc\u30ea\u30b9\u30c8\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u3001\u30a4\u30d9\u30f3\u30c8\u30ea\u30b9\u30c8\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u3001Subscription\u3092\u767b\u9332\u3059\u308b\u3060\u3051\u3002\n\u3057\u304b\u3082\u3001\u3053\u308c\u3092\u3076\u3064\u5207\u308a\u306b\u3059\u308b\u3053\u3068\u306a\u304f\u66f8\u304f\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n(*\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u6982\u5ff5\u306a\u3069\u306b\u3064\u3044\u3066\u306f[Reactive android](http://www.slideshare.net/shinnosukekugimiya/reactive-android)\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002)\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306bonDestroy\u3067Subscription\u306eclear\u3092\u884c\u3048\u3070\u3001\u5b89\u5168\u6027\u306b\u3082\u554f\u984c\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u305d\u3057\u3066\u3055\u3089\u306b\u591a\u7a2e\u306e\u30e2\u30c7\u30eb\u3068\u7d50\u5408\u3059\u308b\u5834\u5408\u3082\u7c21\u5358\u306b\u66f8\u304f\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\nRxAndroid\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u4eca\u56de\u306e\u4f7f\u7528\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306f\u4e0b\u8a18\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/kgmyshin/Observer-Pattern-to-Rx\n(MainActivity\u306fObserver Pattern\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\u3001RxActivity\u306fRxAndroid\u3067\u66f8\u304d\u63db\u3048\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002)\n\n", "tags": ["RxAndroid", "Android", "ReactiveExtensions", "RxJava"]}