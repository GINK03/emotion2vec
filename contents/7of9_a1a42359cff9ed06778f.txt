{"context": "\n\u52d5\u4f5c\u74b0\u5883\nMSP430\nTektronix TDS 2024C (200 MHz, 2GS/s)\n\u3068\u3042\u308bI2C\u30bb\u30f3\u30b5\n\n\n\u3068\u3042\u308b\u30bb\u30f3\u30b5\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u4ee5\u4e0b\u306b\u8a18\u8f09\u3002\nhttp://qiita.com/7of9/items/d839e67c6650e012a8fd\n\ncode v0.1\nMSP430\u3067\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2I2C\u3067\u5b9f\u88c5\u3057\u3001\u305d\u308c\u3089\u3057\u3044\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u53d6\u308c\u308b\uff08\u6ce2\u5f62\u304c\u304f\u305a\u308c\u306a\u3044\uff09\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u305f\u30b3\u30fc\u30c9\u306esnippet\u306f\u4ee5\u4e0b\u3002\n    int loop;\n    // Raspberry Pi\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u305f\u72b6\u6cc1\u3092\u518d\u73fe\u3057\u3066\u307f\u308b (2017/03/08)\n\n    // 1. \u6e96\u5099\n    SDA_0_DIROUT;\n    SCK_0_DIROUT;\n    SDA_0_HIGH;\n    SCK_0_HIGH;\n    myDelay();\n    myDelay();\n    myDelay();\n\n    // 2. start condition\n    SDA_0_LOW;\n    myDelay();\n    SCK_0_LOW;\n    myDelay();\n\n    // 3. slave address\n    char slvAdr = 0x28;\n    bool bitVal;\n    for(loop=0; loop<7; loop++) { // 7bit\n        bitVal = (slvAdr & 0x40);\n        SCK_0_LOW;\n        if (bitVal) {\n            SDA_0_HIGH;\n        } else {\n            SDA_0_LOW;\n        }\n        myDelay();\n        SCK_0_HIGH;\n        myDelay();\n        slvAdr <<= 1;\n    }\n\n    // 4. Read-bit\n    SCK_0_LOW;\n    SDA_0_HIGH; // for read-bit\n    myDelay();\n    SCK_0_HIGH;\n    myDelay();\n\n    // 5. read ACK (ACK=0)\n    SCK_0_LOW;\n    SDA_0_DIRIN;\n    myDelay();\n    SCK_0_HIGH;\n    bool isAck = is_SDA_0_High(); // read ACK\n    myDelay();\n\n    // 6a. read 1st data\n    for (loop=0; loop<8; loop++) {\n        SCK_0_LOW;\n        if (loop == 0) {\n            SDA_0_DIRIN;   \n        }\n        myDelay();\n        SCK_0_HIGH;\n        // TODO: read bit\n        myDelay();\n    }\n\n    // 6b. send ACK (ACK=0)\n    SCK_0_LOW;\n    SDA_0_DIROUT;\n    SDA_0_LOW; // ACK\n    myDelay();\n    SCK_0_HIGH;\n    myDelay();\n\n    // 7a. read 2nd data\n    for (loop=0; loop<8; loop++) {\n        SCK_0_LOW;\n        if (loop == 0) {\n            SDA_0_DIRIN;   \n        }\n        myDelay();\n        SCK_0_HIGH;\n        // TODO: read bit\n        myDelay();\n    }\n\n    // 7b. send NAK (NAK=1)\n    SCK_0_LOW;\n    SDA_0_DIROUT;\n    SDA_0_HIGH; // NAK\n    myDelay();\n    SCK_0_HIGH;\n    myDelay();\n\n    // 8. stop condition\n    SCK_0_LOW;\n    SDA_0_LOW;\n    myDelay();\n    SCK_0_HIGH;\n    myDelay();\n    SDA_0_HIGH;\n    myDelay();\n\n\u4ee5\u4e0b\u306f\u30de\u30af\u30ed\u3067\u7d44\u3093\u3067\u3044\u308b\u304c\u3001\u5b9f\u30b3\u30fc\u30c9\u3067\u306f\u518d\u691c\u8a0e\u304c\u5fc5\u8981\u3002\n\nSCK_0_LOW : SCK\u30e9\u30a4\u30f3\u3092deassert\nSDA_0_LOW : SDA\u30e9\u30a4\u30f3\u3092deassert\nSCK_0_HIGH : SCK\u30e9\u30a4\u30f3\u3092assert\nSDA_0_HIGH : SDA\u30e9\u30a4\u30f3\u3092assert\nSDA_0_DIRIN : SDA\u30e9\u30a4\u30f3\u3092\u5165\u529b\u65b9\u5411\u306b\nSDA_0_DIROUT : SDA\u30e9\u30a4\u30f3\u3092\u51fa\u529b\u65b9\u5411\u306b\n\nmyDelay()\u306b\u304a\u3044\u3066\u306f__delay_cycles(8);\u3092\u4f7f\u7528\u3057\u3001delay\u3092\u884c\u3046\u3002\n\n\u306f\u307e\u3063\u305f\u70b9\nSDA_0_DIRIN \u3068SDA_0_DIROUT \u3092\u5b9f\u884c\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3002\n\u3053\u308c\u304c\u5931\u6557\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u8aad\u307f\u51fa\u3057\u30af\u30ed\u30c3\u30af\u306b\u304a\u3044\u3066\u3001SDA\u30e9\u30a4\u30f3\u304cH\u30ec\u30d9\u30eb\u306e\u307e\u307e\u3068\u306a\u3063\u305f\u308a\u3001\u5947\u6570\u56de\u76ee\u306e\u901a\u4fe1\u306b\u304a\u3044\u3066\u6ce2\u5f62\u304c\u304f\u305a\u308c\u308b\u306a\u3069\u306e\u75c7\u72b6\u304c\u898b\u3089\u308c\u305f\u3002\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306b\u304a\u3044\u3066\u306f\u300cSCK\u30e9\u30a4\u30f3\u304cdeassert\u306e\u6642\u306b\u5165\u51fa\u529b\u65b9\u5411\u3092\u5909\u66f4\u300d\u3068\u3057\u3066\u4e00\u8cab\u6027\u3092\u6301\u305f\u305b\u3066\u3044\u308b\u3002\n\n\u5165\u51fa\u529b\u65b9\u5411\u306e\u5207\u66ff\u6642\u306bglitch\u306f\u898b\u3089\u308c\u308b\u3002\n\u95a2\u9023 http://electronics.stackexchange.com/questions/286564/i2c-ack-bit-glitch\n```txt:\u52d5\u4f5c\u74b0\u5883\nMSP430\nTektronix TDS 2024C (200 MHz, 2GS/s)\n\u3068\u3042\u308bI2C\u30bb\u30f3\u30b5\n```\n\n\u3068\u3042\u308b\u30bb\u30f3\u30b5\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306f\u4ee5\u4e0b\u306b\u8a18\u8f09\u3002\nhttp://qiita.com/7of9/items/d839e67c6650e012a8fd\n\n### code v0.1\n\nMSP430\u3067\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2I2C\u3067\u5b9f\u88c5\u3057\u3001\u305d\u308c\u3089\u3057\u3044\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u53d6\u308c\u308b\uff08\u6ce2\u5f62\u304c\u304f\u305a\u308c\u306a\u3044\uff09\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u305f\u30b3\u30fc\u30c9\u306esnippet\u306f\u4ee5\u4e0b\u3002\n\n```c\n    int loop;\n    // Raspberry Pi\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u305f\u72b6\u6cc1\u3092\u518d\u73fe\u3057\u3066\u307f\u308b (2017/03/08)\n\n    // 1. \u6e96\u5099\n    SDA_0_DIROUT;\n    SCK_0_DIROUT;\n    SDA_0_HIGH;\n    SCK_0_HIGH;\n    myDelay();\n    myDelay();\n    myDelay();\n\n    // 2. start condition\n    SDA_0_LOW;\n    myDelay();\n    SCK_0_LOW;\n    myDelay();\n\n    // 3. slave address\n    char slvAdr = 0x28;\n    bool bitVal;\n    for(loop=0; loop<7; loop++) { // 7bit\n        bitVal = (slvAdr & 0x40);\n        SCK_0_LOW;\n        if (bitVal) {\n            SDA_0_HIGH;\n        } else {\n            SDA_0_LOW;\n        }\n        myDelay();\n        SCK_0_HIGH;\n        myDelay();\n        slvAdr <<= 1;\n    }\n\n    // 4. Read-bit\n    SCK_0_LOW;\n    SDA_0_HIGH; // for read-bit\n    myDelay();\n    SCK_0_HIGH;\n    myDelay();\n\n    // 5. read ACK (ACK=0)\n    SCK_0_LOW;\n    SDA_0_DIRIN;\n    myDelay();\n    SCK_0_HIGH;\n    bool isAck = is_SDA_0_High(); // read ACK\n    myDelay();\n\n    // 6a. read 1st data\n    for (loop=0; loop<8; loop++) {\n        SCK_0_LOW;\n        if (loop == 0) {\n            SDA_0_DIRIN;   \n        }\n        myDelay();\n        SCK_0_HIGH;\n        // TODO: read bit\n        myDelay();\n    }\n        \n    // 6b. send ACK (ACK=0)\n    SCK_0_LOW;\n    SDA_0_DIROUT;\n    SDA_0_LOW; // ACK\n    myDelay();\n    SCK_0_HIGH;\n    myDelay();\n        \n    // 7a. read 2nd data\n    for (loop=0; loop<8; loop++) {\n        SCK_0_LOW;\n        if (loop == 0) {\n            SDA_0_DIRIN;   \n        }\n        myDelay();\n        SCK_0_HIGH;\n        // TODO: read bit\n        myDelay();\n    }\n\n    // 7b. send NAK (NAK=1)\n    SCK_0_LOW;\n    SDA_0_DIROUT;\n    SDA_0_HIGH; // NAK\n    myDelay();\n    SCK_0_HIGH;\n    myDelay();\n        \n    // 8. stop condition\n    SCK_0_LOW;\n    SDA_0_LOW;\n    myDelay();\n    SCK_0_HIGH;\n    myDelay();\n    SDA_0_HIGH;\n    myDelay();\n```\n\n\u4ee5\u4e0b\u306f\u30de\u30af\u30ed\u3067\u7d44\u3093\u3067\u3044\u308b\u304c\u3001\u5b9f\u30b3\u30fc\u30c9\u3067\u306f\u518d\u691c\u8a0e\u304c\u5fc5\u8981\u3002\n\n- SCK_0_LOW : SCK\u30e9\u30a4\u30f3\u3092deassert\n- SDA_0_LOW : SDA\u30e9\u30a4\u30f3\u3092deassert\n- SCK_0_HIGH : SCK\u30e9\u30a4\u30f3\u3092assert\n- SDA_0_HIGH : SDA\u30e9\u30a4\u30f3\u3092assert\n- SDA_0_DIRIN : SDA\u30e9\u30a4\u30f3\u3092\u5165\u529b\u65b9\u5411\u306b\n- SDA_0_DIROUT : SDA\u30e9\u30a4\u30f3\u3092\u51fa\u529b\u65b9\u5411\u306b\n\nmyDelay()\u306b\u304a\u3044\u3066\u306f`__delay_cycles(8);`\u3092\u4f7f\u7528\u3057\u3001delay\u3092\u884c\u3046\u3002\n\n### \u306f\u307e\u3063\u305f\u70b9\n\nSDA_0_DIRIN \u3068SDA_0_DIROUT \u3092\u5b9f\u884c\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3002\n\u3053\u308c\u304c\u5931\u6557\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u8aad\u307f\u51fa\u3057\u30af\u30ed\u30c3\u30af\u306b\u304a\u3044\u3066\u3001SDA\u30e9\u30a4\u30f3\u304cH\u30ec\u30d9\u30eb\u306e\u307e\u307e\u3068\u306a\u3063\u305f\u308a\u3001\u5947\u6570\u56de\u76ee\u306e\u901a\u4fe1\u306b\u304a\u3044\u3066\u6ce2\u5f62\u304c\u304f\u305a\u308c\u308b\u306a\u3069\u306e\u75c7\u72b6\u304c\u898b\u3089\u308c\u305f\u3002\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306b\u304a\u3044\u3066\u306f\u300cSCK\u30e9\u30a4\u30f3\u304cdeassert\u306e\u6642\u306b\u5165\u51fa\u529b\u65b9\u5411\u3092\u5909\u66f4\u300d\u3068\u3057\u3066\u4e00\u8cab\u6027\u3092\u6301\u305f\u305b\u3066\u3044\u308b\u3002\n\n![F0001TEK.png](https://qiita-image-store.s3.amazonaws.com/0/32870/fdaba474-c089-0e53-0c20-ddd9a1e0af8c.png)\n\n\u5165\u51fa\u529b\u65b9\u5411\u306e\u5207\u66ff\u6642\u306bglitch\u306f\u898b\u3089\u308c\u308b\u3002\n\u95a2\u9023 http://electronics.stackexchange.com/questions/286564/i2c-ack-bit-glitch\n", "tags": ["MSP430", "I2C"]}