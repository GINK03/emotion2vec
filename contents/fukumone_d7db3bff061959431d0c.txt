{"context": " More than 1 year has passed since last update.\n\n\u5f0f\u5c55\u958b\n\nRuby\ncat = \"maru\"\np \"\u3053\u3093\u306b\u3061\u306f#{cat}\u3061\u3083\u3093\" #=> \"\u3053\u3093\u306b\u3061\u306fmaru\u3061\u3083\u3093\"\n\n\n\u300c`\u300d\uff08\u30d0\u30c3\u30af\u30af\u30aa\u30fc\u30c8\uff09\u3067\u6587\u5b57\u5217\u3092\u56f2\u3046\u3053\u3068\u3067\u3001\u6587\u5b57\u5217\u3067\u5909\u6570\u3092\u4f7f\u7528\n\nJavaScript\nvar cat = 'maru';\nconsole.log(`\u3053\u3093\u306b\u3061\u306f${cat}\u3061\u3083\u3093`); //=> \u3053\u3093\u306b\u3061\u306fmaru\u3061\u3083\u3093\n\n\n\nEnumerator#each\n\nRuby\n[1, 2, 3].each do |val|\n  p val\nend #=> 1, 2, 3\n\n\n\nJavaScript\n//es6\nfor (let v of [1, 2, 3]) {\n  console.log(v) //=> 1, 2, 3\n}\n\n//es5\n[1, 2, 3].forEach(val => {\n  console.log(val); //=> 1,2,3\n});\n\n\n\n\u30a2\u30ed\u30fc\u8a18\u6cd5(Ruby\u306e\u30e9\u30e0\u30c0\u5f0f)\n\nRuby\nfoo = ->(x) { x * x }\nfoo[5] #=> 25\n\n\n\nJavaScript\nvar foo = ( x ) => { return x * x };\nconsole.log(foo(5)) // => 25\n\n\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\n\nRuby\ndef even(value = 10)\n  (1..value).each do |val|\n    if val.even?\n      p val #=> 2,4,6,8,10\n    end\n  end\nend\n\neven\n\n\n\nJavaScript\nfunction even(count = 10) {\n  for (var i = 1; i < count; i++) {\n    if(i % 2 === 0){\n      console.log(i) //=> 2,4,6,8,10\n    }\n  }\n}\n\neven();\n\n\n\n\u53ef\u5909\u9577\u5f15\u6570\n\nRuby\ndef cat(*nya)\n  p nya\nend\n\ncat([\"punch\", \"punch\", \"punch\"])\n#=> \"punch\", \"punch\", \"punch\"\n\n\n\nJavaScript\nfunction cat(...nya) {\n  console.log(nya);\n}\n\ncat('punch', 'punch', 'punch');\n//=> [ 'punch', 'punch', 'punch' ]\n\n\n\n\n\u30d6\u30ed\u30c3\u30af\u30b9\u30b3\u30fc\u30d7\n\nRuby\ninteger = \"cat\"\n\n[1, 2, 3, 4, 5].each do |val|\n  integer = val\n  p integer #=> 1,2,3,4,5\nend\n\nputs integer #=> \"cat\"\n\n\n\nJavaScript\nvar integer = 'cat';\n\n[1,2,3,4,5].forEach(val => {\n  let integer = val;\n  console.log(integer); //=> 1,2,3,4,5\n});\n\nconsole.log(integer); //=> 'cat'\n\n\n\n\u4e0e\u3048\u3089\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8981\u7d20\u3068\u3059\u308b\u96c6\u5408\n\nRuby\nrequire 'set'\n\nset = Set[1,2,3,5,1]\np set #=> #<Set: {1, 2, 3, 5}>\n\nset.add(3)\nset.add(10)\np set #=> #<Set: {1, 2, 3, 5, 10}>\n\n\n\nJavaScript\n\nvar set = new Set([1,2,3,5,1]);\n\nconsole.log(set) //=> Set {1, 2, 3, 5}\n\n\n\nHash\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\nRuby\nmy_map = { one: \"lion\", two: \"gorilla\", three: \"rabbit\" }\n\np my_map #=> { :one => \"lion\", :two => \"gorilla\", :three => \"rabbit\" }\n\n\n\nJavaScript\nvar myMap = new Map();\nmyMap.set('one', \"lion\")\nmyMap.set('two', \"gorilla\")\nmyMap.set('three', \"rabbit\")\nconsole.log(myMap); //=> Map {\"one\" => \"lion\", \"two\" => \"gorilla\", \"three\" => \"rabbit\"}\n\n\n\n\n\u5b9a\u6570\n\nRuby\nHOGE = 7\np HOGE #=> 7\n\n\n\nJavaScript\nconst hoge = 7;\nvar hoge = 11; //=> Duplicate declaration \"hoge\"\nconsole.log(hoge); //=> 7\n\n\n\n##\u5f0f\u5c55\u958b\n\n```rb:Ruby\ncat = \"maru\"\np \"\u3053\u3093\u306b\u3061\u306f#{cat}\u3061\u3083\u3093\" #=> \"\u3053\u3093\u306b\u3061\u306fmaru\u3061\u3083\u3093\"\n```\n\n\u300c`\u300d\uff08\u30d0\u30c3\u30af\u30af\u30aa\u30fc\u30c8\uff09\u3067\u6587\u5b57\u5217\u3092\u56f2\u3046\u3053\u3068\u3067\u3001\u6587\u5b57\u5217\u3067\u5909\u6570\u3092\u4f7f\u7528\n\n```js:JavaScript\nvar cat = 'maru';\nconsole.log(`\u3053\u3093\u306b\u3061\u306f${cat}\u3061\u3083\u3093`); //=> \u3053\u3093\u306b\u3061\u306fmaru\u3061\u3083\u3093\n```\n\n##Enumerator#each\n\n```rb:Ruby\n[1, 2, 3].each do |val|\n  p val\nend #=> 1, 2, 3\n```\n\n```js:JavaScript\n//es6\nfor (let v of [1, 2, 3]) {\n  console.log(v) //=> 1, 2, 3\n}\n\n//es5\n[1, 2, 3].forEach(val => {\n  console.log(val); //=> 1,2,3\n});\n```\n\n##\u30a2\u30ed\u30fc\u8a18\u6cd5(Ruby\u306e\u30e9\u30e0\u30c0\u5f0f)\n\n```rb:Ruby\nfoo = ->(x) { x * x }\nfoo[5] #=> 25\n```\n\n```js:JavaScript\nvar foo = ( x ) => { return x * x };\nconsole.log(foo(5)) // => 25\n```\n\n##\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\n\n```rb:Ruby\ndef even(value = 10)\n  (1..value).each do |val|\n    if val.even?\n      p val #=> 2,4,6,8,10\n    end\n  end\nend\n\neven\n```\n\n```js:JavaScript\nfunction even(count = 10) {\n  for (var i = 1; i < count; i++) {\n    if(i % 2 === 0){\n      console.log(i) //=> 2,4,6,8,10\n    }\n  }\n}\n\neven();\n```\n\n##\u53ef\u5909\u9577\u5f15\u6570\n\n```rb:Ruby\ndef cat(*nya)\n  p nya\nend\n\ncat([\"punch\", \"punch\", \"punch\"])\n#=> \"punch\", \"punch\", \"punch\"\n```\n\n```js:JavaScript\nfunction cat(...nya) {\n  console.log(nya);\n}\n\ncat('punch', 'punch', 'punch');\n//=> [ 'punch', 'punch', 'punch' ]\n\n```\n\n##\u30d6\u30ed\u30c3\u30af\u30b9\u30b3\u30fc\u30d7\n\n```rb:Ruby\ninteger = \"cat\"\n\n[1, 2, 3, 4, 5].each do |val|\n  integer = val\n  p integer #=> 1,2,3,4,5\nend\n\nputs integer #=> \"cat\"\n```\n\n\n```js:JavaScript\nvar integer = 'cat';\n\n[1,2,3,4,5].forEach(val => {\n  let integer = val;\n  console.log(integer); //=> 1,2,3,4,5\n});\n\nconsole.log(integer); //=> 'cat'\n```\n\n##\u4e0e\u3048\u3089\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8981\u7d20\u3068\u3059\u308b\u96c6\u5408\n\n\n```rb:Ruby\nrequire 'set'\n\nset = Set[1,2,3,5,1]\np set #=> #<Set: {1, 2, 3, 5}>\n\nset.add(3)\nset.add(10)\np set #=> #<Set: {1, 2, 3, 5, 10}>\n```\n\n```js:JavaScript\n\nvar set = new Set([1,2,3,5,1]);\n\nconsole.log(set) //=> Set {1, 2, 3, 5}\n```\n\n##Hash\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n```rb:Ruby\nmy_map = { one: \"lion\", two: \"gorilla\", three: \"rabbit\" }\n\np my_map #=> { :one => \"lion\", :two => \"gorilla\", :three => \"rabbit\" }\n```\n\n```js:JavaScript\nvar myMap = new Map();\nmyMap.set('one', \"lion\")\nmyMap.set('two', \"gorilla\")\nmyMap.set('three', \"rabbit\")\nconsole.log(myMap); //=> Map {\"one\" => \"lion\", \"two\" => \"gorilla\", \"three\" => \"rabbit\"}\n\n```\n##\u5b9a\u6570\n\n```rb:Ruby\nHOGE = 7\np HOGE #=> 7\n```\n\n```js:JavaScript\nconst hoge = 7;\nvar hoge = 11; //=> Duplicate declaration \"hoge\"\nconsole.log(hoge); //=> 7\n```\n", "tags": ["JavaScript", "Ruby", "ECMAScript"]}