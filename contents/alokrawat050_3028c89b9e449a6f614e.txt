{"context": "Login By Using OAuth 2.0\nhttps://www.box.com/\nBox | Secure Content & Online File Sharing for Businesses\nBox offers secure content management and collaboration for individuals, teams and businesses, enabling secure file sharing and access to your files online.\nFor OAuth2.0,please refer below link.\nhttp://www.bubblecode.net/en/2016/01/22/understanding-oauth2/\nTo configure the application in BOX,follow the below step.\nStep1:Create a developer account.\nhttps://app.box.com/signup/o/default_developer_offer\nIf you have then ignore.\nStep2:\nFollow the below link steps:-\nhttps://box-content.readme.io/docs/oauth-20\nStep3:\nAfter completing the app setting in BOX,create a rails application.\nLet us suppose,controller name is box_api_controller.rb\nIn box_api_controller.rb file,\n\nCreate a make request on login button\ndef make_request\n#Check access token expire or not.\ncheck_access_token_expire = check_access_token_expire_dt\nif check_access_token_expire.split(\"-\")[0] == \"access_token\"\n    #Create client by passing Token\n    @box_client = Boxr::Client.new(check_access_token_expire.split(\"-\")[1])\n    cookies[:token] = check_access_token_expire.split(\"-\")[1]\nelse\n    if check_access_token_expire.split(\"-\")[0] == \"refresh_token\"\n        #Call method\n        create_post_req_url(\"refresh_token\",\"refresh_token\",check_access_token_expire.split(\"-\")[1])\n    else\n        # kick off authorization flow\n        parameters = \"response_type=code&client_id=<your client id>&redirect_uri=<your application url>/handle_user_decision/&state=security_token\"\n        url = \"https://account.box.com/api/oauth2/authorize?#{parameters}\"\n        redirect_to url\n    end\nend end\n\n\nAfter authorized the client id,get code in response\ndef handle_user_decision\n# kick off authorization flow\n#Get authorization code\ncode_url = Rack::Utils.parse_query URI(request.original_url).query\ncode = code_url[\"code\"] \n#Call method\ncreate_post_req_url(\"authorization_code\",\"code\", code) \n\nend\n\nCreate a post url\ndef create_post_req_url(grant_type,header, code)\n#Set oauth2 url\nuri = URI.parse(\"https://api.box.com//oauth2//token\")\n#Passing parameter\ndata = \"grant_type=#{grant_type}&#{header}=#{code}&client_id=<your client id>&client_secret=<your client secret key>\"\n#Set header\nheaders = {\"Content-Type\" => \"application/x-www-form-urlencoded\"}\n#Get http request\nhttp = Net::HTTP.new(uri.host,uri.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n#Do post the URL\nresponse = http.post(uri.path,data.to_s,headers)\n#Check response\nif response.code != \"200\"\n    flash[:alert] =\"\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u7ba1\u7406\u8005\u306b\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30a8\u30e9\u30fc\u306e\u5185\u5bb9\uff1a#{response.code}  #{JSON.parse(response.body)}\"\nelse\n    #flash[:alert] =\"#{response.body.to_json}\"\n    parsed = JSON.parse(response.body) # returns a hash\n    token = parsed[\"access_token\"]\n    cookies[:token] = nil\n    cookies[:token] = token      \n    if grant_type == \"authorization_code\"\n        #Insert BOX access token details\n        user = \"<your drive user name>\"\n        insert_access_token(user, token, parsed[\"refresh_token\"], Time.now)\n    else\n        if grant_type == \"refresh_token\"\n            #Update BOX access token \n            updt_access_token(user, token, code, parsed[\"refresh_token\"], Time.now)\n        end  \n    end\n    redirect_to box_api_index_path\nend\n\nend\nother helper method:-\n\nCheck access_token expire or not.\ndef check_access_token_expire_dt\n@access_token_time = BoxApiAccessToken.getaccesstokentime\nif !@access_token_time.blank?\n    @access_token_time.each do |token_details |\n        if token_details.access_token_dt != nil\n            if token_details.new_access_token_dt.to_datetime.new_offset(Rational(9, 24)).strftime('%Y/%m/%d %H:%M') < Time.now.to_datetime.new_offset(Rational(9, 24)).strftime('%Y/%m/%d %H:%M')\n                check_access_token_expire_dt = \"refresh_token-#{token_details.refresh_access_token}\"\n                return check_access_token_expire_dt\n            else\n                check_access_token_expire_dt = \"access_token-#{token_details.access_token}\"\n                return check_access_token_expire_dt\n            end\n        else\n            check_access_token_expire_dt = \"new_token-req_new_token\"\n            return check_access_token_expire_dt\n        end\n    end\nelse\n    check_access_token_expire_dt = \"new_token-req_new_token\"\n    return check_access_token_expire_dt\nend\n\nend\n\nInsert access_token details in DB\ndef insert_access_token(user,access_token,refresh_access_token,access_token_dt)\n@box_access_token = BoxApiAccessToken.new(\n        :user => user,\n        :access_token => access_token,\n        :refresh_access_token => refresh_access_token,\n        :access_token_dt => access_token_dt)\n\n        #Save User Device Data\n        @box_access_token.save\n\nend\n\nUpdate access_token,refresh_access_token,access_token_dt details in DB\ndef updt_access_token(user,access_token, refresh_access_token,new_refresh_access_token,access_token_dt)\n#@box_access_token_updt = BoxApiAccessToken.find_refresh_access_token(refresh_access_token)\n@box_access_token_updt = BoxApiAccessToken.find_by_refresh_access_token(refresh_access_token)\nattributes = {:access_token => access_token,:access_token_dt => access_token_dt, :refresh_access_token => new_refresh_access_token, :updated_at => access_token_dt}\n#Update the object\n@box_access_token_updt.update_attributes(attributes)\n\nend\nIn model,   \n\nclass BoxApiAccessToken < ActiveRecord::Base\nscope :getaccesstokentime, lambda { \n    select(\"id,access_token,refresh_access_token,substring(cast(access_token_dt as varchar),0,17) as access_token_dt,substring(cast(access_token_dt + interval '60 minute' as varchar),0,17) as new_access_token_dt \").order(:id => \"desc\").limit(1)\n}   \n\nend\n\nIn index.html.erb file\n<%= form_tag(:controller => \"box_api\", :action => 'make_request') do |f| %>\n<%= submit_tag(\"Box Login\", class: \"btn btn-primary\") %><% end %>\n\n\nHere is my migration file\nclass CreateBoxApiAccessTokens < ActiveRecord::Migration\n    def change\n        create_table :box_api_access_tokens do |t|\n            t.string :user, :limit => 100, :null => false\n            t.string :access_token, :limit => 500\n            t.string :refresh_access_token, :limit => 500\n            t.datetime :access_token_dt, :limit => 50\n            t.datetime :created_at, :null => false\n            t.string :created_by, :limit => 50\n            t.datetime :updated_at\n            t.string :updated_by, :limit => 50\n            t.boolean :del_flag, :default => false\n            end\n        execute 'alter table box_api_access_tokens alter column created_at set default now()'\n    end\nend\nPlease note that,\nUsing the Access and Refresh Tokens\nThe access_token is the actual string needed to make API requests.Each access_token is valid for 1 hour.In order to get a new, valid token, you can use the accompanying refresh_token.Each refresh_token is valid for one use in 60 days.Every time you get a new access_token by using a refresh_token, \nwe reset your timer for the 60 day period and hand you a new refresh_token. \nThis means that as long as your users use your application once every 60 days, their login is valid forever.\nFor more details,please refer BOX API document.\nThanks,\nLogin By Using OAuth 2.0\n\nhttps://www.box.com/\nBox | Secure Content & Online File Sharing for Businesses\nBox offers secure content management and collaboration for individuals, teams and businesses, enabling secure file sharing and access to your files online.\n\nFor OAuth2.0,please refer below link.\nhttp://www.bubblecode.net/en/2016/01/22/understanding-oauth2/\n\nTo configure the application in BOX,follow the below step.\nStep1:Create a developer account.\nhttps://app.box.com/signup/o/default_developer_offer\nIf you have then ignore.\n\nStep2:\nFollow the below link steps:-\nhttps://box-content.readme.io/docs/oauth-20\n\nStep3:\nAfter completing the app setting in BOX,create a rails application.\nLet us suppose,controller name is box_api_controller.rb\nIn box_api_controller.rb file,\n\n##Create a make request on login button\n\tdef make_request\n\t#Check access token expire or not.\n\tcheck_access_token_expire = check_access_token_expire_dt\n\tif check_access_token_expire.split(\"-\")[0] == \"access_token\"\n\t\t#Create client by passing Token\n\t\t@box_client = Boxr::Client.new(check_access_token_expire.split(\"-\")[1])\n\t\tcookies[:token] = check_access_token_expire.split(\"-\")[1]\n\telse\n\t\tif check_access_token_expire.split(\"-\")[0] == \"refresh_token\"\n\t\t\t#Call method\n\t\t\tcreate_post_req_url(\"refresh_token\",\"refresh_token\",check_access_token_expire.split(\"-\")[1])\n\t\telse\n\t\t\t# kick off authorization flow\n\t\t\tparameters = \"response_type=code&client_id=<your client id>&redirect_uri=<your application url>/handle_user_decision/&state=security_token\"\n\t\t\turl = \"https://account.box.com/api/oauth2/authorize?#{parameters}\"\n\t\t\tredirect_to url\n\t\tend\n\tend end\n\n##After authorized the client id,get code in response\n\tdef handle_user_decision\n\t# kick off authorization flow\n\t#Get authorization code\n\tcode_url = Rack::Utils.parse_query URI(request.original_url).query\n\tcode = code_url[\"code\"] \n\t#Call method\n\tcreate_post_req_url(\"authorization_code\",\"code\", code) \nend\n\n##Create a post url\n\tdef create_post_req_url(grant_type,header, code)\n\t#Set oauth2 url\n\turi = URI.parse(\"https://api.box.com//oauth2//token\")\n\t#Passing parameter\n\tdata = \"grant_type=#{grant_type}&#{header}=#{code}&client_id=<your client id>&client_secret=<your client secret key>\"\n\t#Set header\n\theaders = {\"Content-Type\" => \"application/x-www-form-urlencoded\"}\n\t#Get http request\n\thttp = Net::HTTP.new(uri.host,uri.port)\n\thttp.use_ssl = true\n\thttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\t#Do post the URL\n\tresponse = http.post(uri.path,data.to_s,headers)\n\t#Check response\n\tif response.code != \"200\"\n\t\tflash[:alert] =\"\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u7ba1\u7406\u8005\u306b\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30a8\u30e9\u30fc\u306e\u5185\u5bb9\uff1a#{response.code}  #{JSON.parse(response.body)}\"\n\telse\n\t\t#flash[:alert] =\"#{response.body.to_json}\"\n\t\tparsed = JSON.parse(response.body) # returns a hash\n\t\ttoken = parsed[\"access_token\"]\n\t\tcookies[:token] = nil\n\t\tcookies[:token] = token      \n\t\tif grant_type == \"authorization_code\"\n\t\t\t#Insert BOX access token details\n\t\t\tuser = \"<your drive user name>\"\n\t\t\tinsert_access_token(user, token, parsed[\"refresh_token\"], Time.now)\n\t\telse\n\t\t\tif grant_type == \"refresh_token\"\n\t\t\t\t#Update BOX access token \n\t\t\t\tupdt_access_token(user, token, code, parsed[\"refresh_token\"], Time.now)\n\t\t\tend  \n\t\tend\n\t\tredirect_to box_api_index_path\n\tend\nend\n\nother helper method:-\n##Check access_token expire or not.\n\tdef check_access_token_expire_dt\n\t@access_token_time = BoxApiAccessToken.getaccesstokentime\n\tif !@access_token_time.blank?\n\t\t@access_token_time.each do |token_details |\n\t\t\tif token_details.access_token_dt != nil\n\t\t\t\tif token_details.new_access_token_dt.to_datetime.new_offset(Rational(9, 24)).strftime('%Y/%m/%d %H:%M') < Time.now.to_datetime.new_offset(Rational(9, 24)).strftime('%Y/%m/%d %H:%M')\n\t\t\t\t\tcheck_access_token_expire_dt = \"refresh_token-#{token_details.refresh_access_token}\"\n\t\t\t\t\treturn check_access_token_expire_dt\n\t\t\t\telse\n\t\t\t\t\tcheck_access_token_expire_dt = \"access_token-#{token_details.access_token}\"\n\t\t\t\t\treturn check_access_token_expire_dt\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tcheck_access_token_expire_dt = \"new_token-req_new_token\"\n\t\t\t\treturn check_access_token_expire_dt\n\t\t\tend\n\t\tend\n\telse\n\t\tcheck_access_token_expire_dt = \"new_token-req_new_token\"\n\t\treturn check_access_token_expire_dt\n\tend\nend\n\n#Insert access_token details in DB\n\tdef insert_access_token(user,access_token,refresh_access_token,access_token_dt)\n\t@box_access_token = BoxApiAccessToken.new(\n\t\t\t:user => user,\n\t\t\t:access_token => access_token,\n\t\t\t:refresh_access_token => refresh_access_token,\n\t\t\t:access_token_dt => access_token_dt)\n\n\t\t\t#Save User Device Data\n\t\t\t@box_access_token.save\nend\n\n#Update access_token,refresh_access_token,access_token_dt details in DB\n\tdef updt_access_token(user,access_token, refresh_access_token,new_refresh_access_token,access_token_dt)\n\t#@box_access_token_updt = BoxApiAccessToken.find_refresh_access_token(refresh_access_token)\n\t@box_access_token_updt = BoxApiAccessToken.find_by_refresh_access_token(refresh_access_token)\n\tattributes = {:access_token => access_token,:access_token_dt => access_token_dt, :refresh_access_token => new_refresh_access_token, :updated_at => access_token_dt}\n\t#Update the object\n\t@box_access_token_updt.update_attributes(attributes)\nend\n\nIn model,\t\n####class BoxApiAccessToken < ActiveRecord::Base\n\tscope :getaccesstokentime, lambda { \n\t\tselect(\"id,access_token,refresh_access_token,substring(cast(access_token_dt as varchar),0,17) as access_token_dt,substring(cast(access_token_dt + interval '60 minute' as varchar),0,17) as new_access_token_dt \").order(:id => \"desc\").limit(1)\n\t}   \nend\n\n#In index.html.erb file\n<%= form_tag(:controller => \"box_api\", :action => 'make_request') do |f| %>\n<div class=\"form-group\"><%= submit_tag(\"Box Login\", class: \"btn btn-primary\") %></div><% end %>\n\n#Here is my migration file\nclass CreateBoxApiAccessTokens < ActiveRecord::Migration\n\tdef change\n\t\tcreate_table :box_api_access_tokens do |t|\n\t\t\tt.string :user, :limit => 100, :null => false\n\t\t\tt.string :access_token, :limit => 500\n\t\t\tt.string :refresh_access_token, :limit => 500\n\t\t\tt.datetime :access_token_dt, :limit => 50\n\t\t\tt.datetime :created_at, :null => false\n\t\t\tt.string :created_by, :limit => 50\n\t\t\tt.datetime :updated_at\n\t\t\tt.string :updated_by, :limit => 50\n\t\t\tt.boolean :del_flag, :default => false\t\t\n\t\t\tend\n\t\texecute 'alter table box_api_access_tokens alter column created_at set default now()'\n\tend\nend\n\nPlease note that,\nUsing the Access and Refresh Tokens\nThe access_token is the actual string needed to make API requests.Each access_token is valid for 1 hour.In order to get a new, valid token, you can use the accompanying refresh_token.Each refresh_token is valid for one use in 60 days.Every time you get a new access_token by using a refresh_token, \nwe reset your timer for the 60 day period and hand you a new refresh_token. \nThis means that as long as your users use your application once every 60 days, their login is valid forever.\n\nFor more details,please refer BOX API document.\n\nThanks,\n", "tags": ["BOX", "RubyOnRails", "api", "ROR", "OAuth"]}