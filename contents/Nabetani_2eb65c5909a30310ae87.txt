{"context": "\u554f\u984c : http://nabetani.sakura.ne.jp/hena/orde11tredis/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 : http://qiita.com/Nabetani/items/10b2ccc28301e44e09e6\n\u307e\u305a\u306fruby\u306e\u5b9f\u88c5\u3002\ndef each_item(n, list)\n  yield( list )\n  (2..(n/2)).each do |x|\n    next unless n % x==0\n    each_item( x+1, list+[x+1] ){ |y| yield(y) }\n  end\nend\n\ndef dist(a,b)\n  a.size+b.size - 2*(0..Float::INFINITY).find{ |x| a[x] != b[x] }\nend\n\ndef impl( root, a, b )\n  as=[]\n  bs=[]\n  each_item(root,[root]){ |x|\n    as<<x if x.last==a\n    bs<<x if x.last==b\n  }\n  as.inject(Float::INFINITY) do |d0, ai|\n    bs.inject(d0) do |d1, bi|\n      d1=[d1, dist(ai,bi)].min\n    end\n  end\nend\n\ndef solve( src )\n  impl( *src.split(/\\D+/).map(&:to_i) ).to_s\nend\n\nDATA.map{ |line|\n  num, src, expected = line.split( /\\s+/ )\n  actual = solve( src )\n  ok = actual==expected\n  puts [ num, ( ok ? \"ok\" : \"**NG**\" ), src, actual, expected ].join( \" \" )\n  ok\n}.all?.tap{ |x| p( x ? \"all okay!\" : \"something wrong!!\" ) }\n\n__END__\n0 50:6,3  1\n1 98:5,11 4\n2 1000:33,20  7\n\n\u7d04\u6570\u306e\u6c42\u3081\u65b9\u306f\u3001\u624b\u629c\u304d\u3067 O(n)\u3002\n\n\u30c4\u30ea\u30fc\u3092\u8fbf\u308a\u306a\u304c\u3089\u3001\u6c17\u306b\u306a\u308b\u30ce\u30fc\u30c9\u304b\u3089\u30eb\u30fc\u30c8\u307e\u3067\u306e\u30d1\u30b9\u3092\u8a18\u9332\u3059\u308b\u3002\n\u8a18\u9332\u3057\u305f\u30d1\u30b9\u3092\u6bd4\u8f03\u3059\u308b\u3068\u8ddd\u96e2\u304c\u308f\u304b\u308b\n\n\u3068\u3044\u3046\u4f5c\u6226\u3002\u8ddd\u96e2\u306f\u3001\u30eb\u30fc\u30c8\u304b\u3089\u81ea\u5206\u307e\u3067\u306e\u30ea\u30b9\u30c8\u3092\u6bd4\u8f03\u3059\u308b\u3068\u308f\u304b\u308b\u3002\neach_item \u306e\u5468\u8fba\u304c\u306a\u3093\u3068\u306a\u304f\u6c17\u306b\u5165\u3089\u306a\u3044\u3093\u3060\u3051\u3069\u3001\u307e\u3042\u4ed5\u65b9\u306a\u3044\u3002\n\u307e\u3060 yield \u3068\u3044\u3046\u304b\u30d6\u30ed\u30c3\u30af\u5f15\u6570\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u81ea\u5206\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u6163\u308c\u3066\u3044\u306a\u3044\u3002\n\u3067\u3002\n\u3053\u308c\u3092 python \u306b\u79fb\u690d\u3057\u305f\u306e\u304c\u4e0b\u8a18\uff1a\nimport re\n\ndef each_item(n,list) :\n  yield( list )\n  for x in range( 2, n//2+1 ) :\n    if n % x == 0 :\n      for item in each_item( x+1, list + [x+1] ):\n        yield(item)\n\ndef dist(a,b):\n  n=0\n  while n<len(a) and n<len(b) and a[n]==b[n]:\n    n+=1\n  return len(a) + len(b) - 2*n\n\n\ndef impl( root, a, b ) :\n  a_s=[]\n  b_s=[]\n  for item in each_item(root, [root]) :\n    if item[-1]==a:\n      a_s.append( item )\n    if item[-1]==b:\n      b_s.append( item )\n  d=1e100\n  for a in a_s:\n    for b in b_s:\n      d = min( d, dist(a,b) )\n  return d\n\ndef solve( src ):\n  root, a, b = [ int(x) for x in re.split( \"\\\\D\", src ) ]\n  return \"%d\" % ( impl( root, a, b ) )\n\ndef test( src, expected ):\n  actual = solve( src )\n  ok= ( actual==expected )\n  print( \"%s : %s -> %s ( %s )\" % ( (\"ok\" if ok else \"**NG**\"), src, actual, expected ) )\n\ntest( \"50:6,3\", \"1\" )\ntest( \"98:5,11\", \"4\" )\ntest( \"1000:33,20\", \"7\" )\n\n\u751f\u307e\u308c\u3066\u521d\u3081\u3066 python \u306e yield \u3092\u4f7f\u3063\u3066\u3044\u308d\u3044\u308d\u6238\u60d1\u3063\u305f\u3093\u3060\u3051\u3069\u3001\u540c\u3058\u611f\u3058\u306b\u306a\u3063\u305f\u3002\n\u554f\u984c : http://nabetani.sakura.ne.jp/hena/orde11tredis/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 : http://qiita.com/Nabetani/items/10b2ccc28301e44e09e6\n\n\n\u307e\u305a\u306fruby\u306e\u5b9f\u88c5\u3002\n\n\n```ruby\ndef each_item(n, list)\n  yield( list )\n  (2..(n/2)).each do |x|\n    next unless n % x==0\n    each_item( x+1, list+[x+1] ){ |y| yield(y) }\n  end\nend\n\ndef dist(a,b)\n  a.size+b.size - 2*(0..Float::INFINITY).find{ |x| a[x] != b[x] }\nend\n\ndef impl( root, a, b )\n  as=[]\n  bs=[]\n  each_item(root,[root]){ |x|\n    as<<x if x.last==a\n    bs<<x if x.last==b\n  }\n  as.inject(Float::INFINITY) do |d0, ai|\n    bs.inject(d0) do |d1, bi|\n      d1=[d1, dist(ai,bi)].min\n    end\n  end\nend\n\ndef solve( src )\n  impl( *src.split(/\\D+/).map(&:to_i) ).to_s\nend\n\nDATA.map{ |line|\n  num, src, expected = line.split( /\\s+/ )\n  actual = solve( src )\n  ok = actual==expected\n  puts [ num, ( ok ? \"ok\" : \"**NG**\" ), src, actual, expected ].join( \" \" )\n  ok\n}.all?.tap{ |x| p( x ? \"all okay!\" : \"something wrong!!\" ) }\n\n__END__\n0 50:6,3  1\n1 98:5,11 4\n2 1000:33,20  7\n```\n\n\u7d04\u6570\u306e\u6c42\u3081\u65b9\u306f\u3001\u624b\u629c\u304d\u3067 O(n)\u3002\n\n* \u30c4\u30ea\u30fc\u3092\u8fbf\u308a\u306a\u304c\u3089\u3001\u6c17\u306b\u306a\u308b\u30ce\u30fc\u30c9\u304b\u3089\u30eb\u30fc\u30c8\u307e\u3067\u306e\u30d1\u30b9\u3092\u8a18\u9332\u3059\u308b\u3002\n* \u8a18\u9332\u3057\u305f\u30d1\u30b9\u3092\u6bd4\u8f03\u3059\u308b\u3068\u8ddd\u96e2\u304c\u308f\u304b\u308b\n\n\u3068\u3044\u3046\u4f5c\u6226\u3002\u8ddd\u96e2\u306f\u3001\u30eb\u30fc\u30c8\u304b\u3089\u81ea\u5206\u307e\u3067\u306e\u30ea\u30b9\u30c8\u3092\u6bd4\u8f03\u3059\u308b\u3068\u308f\u304b\u308b\u3002\n\n`each_item` \u306e\u5468\u8fba\u304c\u306a\u3093\u3068\u306a\u304f\u6c17\u306b\u5165\u3089\u306a\u3044\u3093\u3060\u3051\u3069\u3001\u307e\u3042\u4ed5\u65b9\u306a\u3044\u3002\n\u307e\u3060 `yield` \u3068\u3044\u3046\u304b\u30d6\u30ed\u30c3\u30af\u5f15\u6570\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u81ea\u5206\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u6163\u308c\u3066\u3044\u306a\u3044\u3002\n\n\u3067\u3002\n\u3053\u308c\u3092 python \u306b\u79fb\u690d\u3057\u305f\u306e\u304c\u4e0b\u8a18\uff1a\n\n```python3\nimport re\n\ndef each_item(n,list) :\n  yield( list )\n  for x in range( 2, n//2+1 ) :\n    if n % x == 0 :\n      for item in each_item( x+1, list + [x+1] ):\n        yield(item)\n\ndef dist(a,b):\n  n=0\n  while n<len(a) and n<len(b) and a[n]==b[n]:\n    n+=1\n  return len(a) + len(b) - 2*n\n\n\ndef impl( root, a, b ) :\n  a_s=[]\n  b_s=[]\n  for item in each_item(root, [root]) :\n    if item[-1]==a:\n      a_s.append( item )\n    if item[-1]==b:\n      b_s.append( item )\n  d=1e100\n  for a in a_s:\n    for b in b_s:\n      d = min( d, dist(a,b) )\n  return d\n\ndef solve( src ):\n  root, a, b = [ int(x) for x in re.split( \"\\\\D\", src ) ]\n  return \"%d\" % ( impl( root, a, b ) )\n\ndef test( src, expected ):\n  actual = solve( src )\n  ok= ( actual==expected )\n  print( \"%s : %s -> %s ( %s )\" % ( (\"ok\" if ok else \"**NG**\"), src, actual, expected ) )\n\ntest( \"50:6,3\", \"1\" )\ntest( \"98:5,11\", \"4\" )\ntest( \"1000:33,20\", \"7\" )\n```\n\n\u751f\u307e\u308c\u3066\u521d\u3081\u3066 python \u306e yield \u3092\u4f7f\u3063\u3066\u3044\u308d\u3044\u308d\u6238\u60d1\u3063\u305f\u3093\u3060\u3051\u3069\u3001\u540c\u3058\u611f\u3058\u306b\u306a\u3063\u305f\u3002\n", "tags": ["\u3069\u3046\u66f8\u304f", "yhpg", "Ruby", "Python"]}