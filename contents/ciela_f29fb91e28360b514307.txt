{"context": " More than 1 year has passed since last update.\u3082\u3068\u3082\u3068\u8272\u3005\u306a\u51e6\u7406\u3067\u304d\u308b\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3051\u3069\u3001OpenCV\u3067\u30e2\u30b6\u30a4\u30af\u51e6\u7406\u3063\u3066\u3084\u3063\u3066\u306a\u304b\u3063\u305f\u306a\u30fc\u3063\u3066\u601d\u3063\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n\u753b\u50cf\u5168\u4f53\u3067\u3082\u3044\u3044\u3051\u3069\u3069\u3046\u305b\u3060\u3063\u305f\u3089\u9854\u8a8d\u8b58\u3057\u305f\u90e8\u5206\u9650\u5b9a\u3067\u304b\u3051\u305f\u3044\u3068\u304b\u3042\u308b\u3068\u601d\u3046\u306e\u3067ROI\u3068\u306a\u308b\u5f15\u6570\u3092\u3068\u308bstatic\u30e1\u30bd\u30c3\u30c9\u3002\n/**\n * ROI\u3092\u6307\u5b9a\u3057\u3066\u30e2\u30b6\u30a4\u30af\u51e6\u7406\n * @param image \u5143\u753b\u50cf\u3068\u306a\u308b {@link Mat}\n * @param rectangles \u30e2\u30b6\u30a4\u30af\u5bfe\u8c61\u306eROI\u3092\u6307\u5b9a\u3057\u305f {@link MatOfRect}\n * @param size \u30e2\u30b6\u30a4\u30af\u306e\u30d4\u30af\u30bb\u30eb\u5e45\n * @return \u30e2\u30b6\u30a4\u30af\u51e6\u7406\u5f8c\u306e {@link Mat}\n */\npublic static Mat drawMosaic(Mat image, MatOfRect rectangles, int size) {\n    Mat dstImage = image.clone();\n    for (Rect rect : rectangles.toArray()) {\n        Mat imageROI = new Mat(image, rect);\n        Mat dstImageROI = new Mat(dstImage, rect);\n        for (int y = 0; y < imageROI.height(); y += size) {\n            for (int x = 0; x < imageROI.width(); x += size) {\n                int yLimit = y + size;\n                if (yLimit >= imageROI.height()) {\n                    yLimit = imageROI.height();\n                }\n                int xLimit = x + size;\n                if (xLimit >= imageROI.width()) {\n                    xLimit = imageROI.width();\n                }\n                double b, g, r;\n                b = g = r = 0;\n                int winSize = 0;\n                for (int i = y; i < yLimit; i++) {\n                    for (int j = x; j < xLimit; j++) {\n                        double[] pixel = imageROI.get(j, i);\n                        b += pixel[0];\n                        g += pixel[1];\n                        r += pixel[2];\n                        winSize++;\n                    }\n                }\n                b /= winSize;\n                g /= winSize;\n                r /= winSize;\n                for (int i = y; i < yLimit; i++) {\n                    for (int j = x; j < xLimit; j++) {\n                        dstImageROI.put(j, i, new double[] { b, g, r });\n                    }\n                }\n            }\n        }\n    }\n    return dstImage;\n}\n\n\u3082\u3068\u3082\u3068\u8272\u3005\u306a\u51e6\u7406\u3067\u304d\u308b\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3051\u3069\u3001OpenCV\u3067\u30e2\u30b6\u30a4\u30af\u51e6\u7406\u3063\u3066\u3084\u3063\u3066\u306a\u304b\u3063\u305f\u306a\u30fc\u3063\u3066\u601d\u3063\u305f\u306e\u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n\u753b\u50cf\u5168\u4f53\u3067\u3082\u3044\u3044\u3051\u3069\u3069\u3046\u305b\u3060\u3063\u305f\u3089\u9854\u8a8d\u8b58\u3057\u305f\u90e8\u5206\u9650\u5b9a\u3067\u304b\u3051\u305f\u3044\u3068\u304b\u3042\u308b\u3068\u601d\u3046\u306e\u3067ROI\u3068\u306a\u308b\u5f15\u6570\u3092\u3068\u308bstatic\u30e1\u30bd\u30c3\u30c9\u3002\n\n```java\n/**\n * ROI\u3092\u6307\u5b9a\u3057\u3066\u30e2\u30b6\u30a4\u30af\u51e6\u7406\n * @param image \u5143\u753b\u50cf\u3068\u306a\u308b {@link Mat}\n * @param rectangles \u30e2\u30b6\u30a4\u30af\u5bfe\u8c61\u306eROI\u3092\u6307\u5b9a\u3057\u305f {@link MatOfRect}\n * @param size \u30e2\u30b6\u30a4\u30af\u306e\u30d4\u30af\u30bb\u30eb\u5e45\n * @return \u30e2\u30b6\u30a4\u30af\u51e6\u7406\u5f8c\u306e {@link Mat}\n */\npublic static Mat drawMosaic(Mat image, MatOfRect rectangles, int size) {\n\tMat dstImage = image.clone();\n\tfor (Rect rect : rectangles.toArray()) {\n\t\tMat imageROI = new Mat(image, rect);\n\t\tMat dstImageROI = new Mat(dstImage, rect);\n\t\tfor (int y = 0; y < imageROI.height(); y += size) {\n\t\t\tfor (int x = 0; x < imageROI.width(); x += size) {\n\t\t\t\tint yLimit = y + size;\n\t\t\t\tif (yLimit >= imageROI.height()) {\n\t\t\t\t\tyLimit = imageROI.height();\n\t\t\t\t}\n\t\t\t\tint xLimit = x + size;\n\t\t\t\tif (xLimit >= imageROI.width()) {\n\t\t\t\t\txLimit = imageROI.width();\n\t\t\t\t}\n\t\t\t\tdouble b, g, r;\n\t\t\t\tb = g = r = 0;\n\t\t\t\tint winSize = 0;\n\t\t\t\tfor (int i = y; i < yLimit; i++) {\n\t\t\t\t\tfor (int j = x; j < xLimit; j++) {\n\t\t\t\t\t\tdouble[] pixel = imageROI.get(j, i);\n\t\t\t\t\t\tb += pixel[0];\n\t\t\t\t\t\tg += pixel[1];\n\t\t\t\t\t\tr += pixel[2];\n\t\t\t\t\t\twinSize++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tb /= winSize;\n\t\t\t\tg /= winSize;\n\t\t\t\tr /= winSize;\n\t\t\t\tfor (int i = y; i < yLimit; i++) {\n\t\t\t\t\tfor (int j = x; j < xLimit; j++) {\n\t\t\t\t\t\tdstImageROI.put(j, i, new double[] { b, g, r });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dstImage;\n}\n```", "tags": ["OpenCV2.4"]}