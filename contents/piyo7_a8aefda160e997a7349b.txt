{"context": " More than 1 year has passed since last update.\n\n\u76ee\u7684 \n\nCSV\u5f62\u5f0f\u3084TSV\u5f62\u5f0f\u3067\u51fa\u529b\u3057\u305f\u3044\u6642\u3001\u533a\u5207\u308a\u6587\u5b57\u3092\u6bce\u56de\u66f8\u304f\u306e\u306f\u3061\u3087\u3063\u3068\u9762\u5012\u3002\nfor (size_t i = 1; i < 10; i++) {\n  std::cout\n    << \"[csv] \"\n    << i\n    << \", \" << std::string(i, 'x')\n    << \", \" << std::boolalpha << (i % 2 == 0)\n    << \"\\n\";\n}\n\n\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3068\u6c17\u5206\u304c\u826f\u3044\u3002\nfor (size_t i = 1; i < 10; i++) {\n  make_auto_sep(std::cout, \"[csv] \", \", \", \"\\n\")\n    << i\n    << std::string(i, 'x')\n    << std::boolalpha << (i % 2 == 0);\n}\n\n\u3068\u3044\u3046\u985e\u306e\u3082\u306e\u3092\u4f55\u5ea6\u3082\u518d\u767a\u660e\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u4ed8\u3044\u305f\u306e\u3067\u3001\u7e8f\u3081\u305f\u3082\u306e\u3092\u30e1\u30e2\u3002\n\n\u30b3\u30fc\u30c9 \n\n#include <iostream>\n#include <string>\n\n// \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u533a\u5207\u308a\u6587\u5b57\u3092\u81ea\u52d5\u3067\u633f\u5165\u3059\u308b\u30e9\u30c3\u30d1\u30af\u30e9\u30b9\ntemplate<class CharT, class Traits, class Sep, class End>\nclass AutoSep {\n  std::basic_ostream<CharT, Traits>& os_;\n  const Sep& sep_;\n  const End& end_;\n  bool is_first_ = true;\n\npublic:\n  template<class Start>\n  AutoSep(\n    std::basic_ostream<CharT, Traits>& os,\n    const Start& start,\n    const Sep& sep,\n    const End& end) : os_(os), sep_(sep), end_(end)\n  {\n    os_ << start;  \n  }\n\n  ~AutoSep()\n  {\n    os_ << end_;\n  }\n\n  // \u30de\u30cb\u30e5\u30d4\u30ec\u30fc\u30bf\u306f\u533a\u5207\u308a\u6587\u5b57\u3092\u5165\u308c\u306a\u3044\n  AutoSep& operator<<(std::ios_base& (*func)(std::ios_base&))\n  {\n    os_ << func;\n    return *this;\n  }\n\n  // \u4e8c\u56de\u76ee\u304b\u3089\u533a\u5207\u308a\u6587\u5b57\u3092\u5165\u308c\u308b\n  template<class T>\n  AutoSep& operator<< (const T& v)\n  {\n    if (is_first_) {\n      os_ << v;\n      is_first_ = false;\n    } else {\n      os_ << sep_ << v;\n    }\n\n    return *this;\n  }\n};\n\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u578b\u63a8\u8ad6\u7528\ntemplate<class CharT, class Traits, class Start, class Sep, class End>\nAutoSep<CharT, Traits, Sep, End> make_auto_sep(\n  std::basic_ostream<CharT, Traits>& os,\n  const Start& start,\n  const Sep& sep,\n  const End& end)\n{\n  return AutoSep<CharT, Traits, Sep, End>(os, start, sep, end);\n}\n\nint main()\n{\n  for (size_t i = 1; i < 10; i++) {\n    make_auto_sep(std::cout, \"[csv] \", \", \", \"\\n\")\n      << i\n      << std::string(i, 'x')\n      << std::boolalpha << (i % 2 == 0);\n  }\n\n  return 0;\n}\n\n[Wandbox]\u4e09\u3078( \u3078\u055e\u0a0a \u055e)\u3078 \uff8a\uff6f\uff8a\uff6f\n\n\u51fa\u529b \n\n[csv] 1, x, false\n[csv] 2, xx, true\n[csv] 3, xxx, false\n[csv] 4, xxxx, true\n[csv] 5, xxxxx, false\n[csv] 6, xxxxxx, true\n[csv] 7, xxxxxxx, false\n[csv] 8, xxxxxxxx, true\n[csv] 9, xxxxxxxxx, false\n\n# \u76ee\u7684 :bulb: \n\nCSV\u5f62\u5f0f\u3084TSV\u5f62\u5f0f\u3067\u51fa\u529b\u3057\u305f\u3044\u6642\u3001\u533a\u5207\u308a\u6587\u5b57\u3092\u6bce\u56de\u66f8\u304f\u306e\u306f\u3061\u3087\u3063\u3068\u9762\u5012\u3002\n\n```cpp\nfor (size_t i = 1; i < 10; i++) {\n  std::cout\n    << \"[csv] \"\n    << i\n    << \", \" << std::string(i, 'x')\n    << \", \" << std::boolalpha << (i % 2 == 0)\n    << \"\\n\";\n}\n```\n\n\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3068\u6c17\u5206\u304c\u826f\u3044\u3002\n\n```cpp\nfor (size_t i = 1; i < 10; i++) {\n  make_auto_sep(std::cout, \"[csv] \", \", \", \"\\n\")\n    << i\n    << std::string(i, 'x')\n    << std::boolalpha << (i % 2 == 0);\n}\n```\n\n\u3068\u3044\u3046\u985e\u306e\u3082\u306e\u3092\u4f55\u5ea6\u3082\u518d\u767a\u660e\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u4ed8\u3044\u305f\u306e\u3067\u3001\u7e8f\u3081\u305f\u3082\u306e\u3092\u30e1\u30e2\u3002\n\n# \u30b3\u30fc\u30c9 :sparkles: \n\n```cpp\n#include <iostream>\n#include <string>\n\n// \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u533a\u5207\u308a\u6587\u5b57\u3092\u81ea\u52d5\u3067\u633f\u5165\u3059\u308b\u30e9\u30c3\u30d1\u30af\u30e9\u30b9\ntemplate<class CharT, class Traits, class Sep, class End>\nclass AutoSep {\n  std::basic_ostream<CharT, Traits>& os_;\n  const Sep& sep_;\n  const End& end_;\n  bool is_first_ = true;\n\npublic:\n  template<class Start>\n  AutoSep(\n    std::basic_ostream<CharT, Traits>& os,\n    const Start& start,\n    const Sep& sep,\n    const End& end) : os_(os), sep_(sep), end_(end)\n  {\n    os_ << start;  \n  }\n\n  ~AutoSep()\n  {\n    os_ << end_;\n  }\n\n  // \u30de\u30cb\u30e5\u30d4\u30ec\u30fc\u30bf\u306f\u533a\u5207\u308a\u6587\u5b57\u3092\u5165\u308c\u306a\u3044\n  AutoSep& operator<<(std::ios_base& (*func)(std::ios_base&))\n  {\n    os_ << func;\n    return *this;\n  }\n\n  // \u4e8c\u56de\u76ee\u304b\u3089\u533a\u5207\u308a\u6587\u5b57\u3092\u5165\u308c\u308b\n  template<class T>\n  AutoSep& operator<< (const T& v)\n  {\n    if (is_first_) {\n      os_ << v;\n      is_first_ = false;\n    } else {\n      os_ << sep_ << v;\n    }\n\n    return *this;\n  }\n};\n\n// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u578b\u63a8\u8ad6\u7528\ntemplate<class CharT, class Traits, class Start, class Sep, class End>\nAutoSep<CharT, Traits, Sep, End> make_auto_sep(\n  std::basic_ostream<CharT, Traits>& os,\n  const Start& start,\n  const Sep& sep,\n  const End& end)\n{\n  return AutoSep<CharT, Traits, Sep, End>(os, start, sep, end);\n}\n\nint main()\n{\n  for (size_t i = 1; i < 10; i++) {\n    make_auto_sep(std::cout, \"[csv] \", \", \", \"\\n\")\n      << i\n      << std::string(i, 'x')\n      << std::boolalpha << (i % 2 == 0);\n  }\n\n  return 0;\n}\n```\n\n[[Wandbox]\u4e09\u3078( \u3078\u055e\u0a0a \u055e)\u3078 \uff8a\uff6f\uff8a\uff6f](http://melpon.org/wandbox/permlink/5CstKZuElTMDCtK6)\n\n# \u51fa\u529b :white_flower: \n\n```\n[csv] 1, x, false\n[csv] 2, xx, true\n[csv] 3, xxx, false\n[csv] 4, xxxx, true\n[csv] 5, xxxxx, false\n[csv] 6, xxxxxx, true\n[csv] 7, xxxxxxx, false\n[csv] 8, xxxxxxxx, true\n[csv] 9, xxxxxxxxx, false\n```\n", "tags": ["C++", "CSV"]}