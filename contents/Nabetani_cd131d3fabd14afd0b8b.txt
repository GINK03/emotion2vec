{"context": " More than 1 year has passed since last update.\u554f\u984c http://nabetani.sakura.ne.jp/hena/ord26tribo/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/8a973a47633558f54ba8\n\u30a4\u30d9\u30f3\u30c8  http://yhpg.doorkeeper.jp/events/15316\n\u5f53\u65e5\u304a\u898b\u305b\u3057\u305f\u5b9f\u88c5\u3002\n\u307e\u305a\u306f ruby \u304b\u3089\u3002\ndef solve(s)\n  positions = s.chars.map { |c| c.ord - 'a'.ord }.sort\n  bo = [positions.size] * 3\n  positions.each do |po|\n    h = Math.sqrt(po).floor\n    next if  (po - h**2).even? # \u4e0a\u304c\u5c16\u3063\u305f\u4e09\u89d2\u306f\u7121\u8996\n    [-1, +1, -h * 2].each.with_index do |delta, ix|\n      bo[ix] -= 2 if positions.include?(po + delta)\n    end\n  end\n  bo.join(',')\nend\n\nDATA.map do |line|\n  id, src, expected = line.split(/\\s+/)\n  actual = solve(src)\n  (actual == expected).tap do |ok|\n    puts '***NG*** : %s %s->%s ( %s )' % [id, src, actual, expected] unless ok\n  end\nend.all?.tap { |r| puts(r ? 'ok' : 'NG') }\n\n__END__\n0 bdelmnouy 5,7,9\n1 a 1,1,1\n2 q 1,1,1\n45  abcdefghijklmnoqrstuwxy 5,7,7\n46  abcdeghijklmnopqrstuvwxy  6,6,6\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u5b9f\u88c5\u6226\u7565\u306f\u3002\n\n\u7dda\u3092\u6570\u3048\u3066\u3044\u304f\u3002\n\u96a3\u306b\u3042\u308b\u304b\u3089\u7dda\u304c\u306a\u3044\u3068\u304b\u3044\u3046\u3053\u3068\u3092\u5ea6\u5916\u8996\u3057\u3066\u5168\u90e8\u6570\u3048\u3066\u304b\u3089\u3001\u3053\u3053\u306f\u7dda\u304c\u306a\u3044\u3088\u306d\u3001\u3068\u3001\u6e1b\u3089\u3057\u3066\u3044\u304f\u3002\n\n\u306e\u4e8c\u901a\u308a\u304c\u3042\u308b\u3002\n\u3042\u3068\u3001\u30bb\u30eb\u3068\u30bb\u30eb\u306e\u95a2\u4fc2\u3092\u3069\u3053\u307e\u3067\u7b97\u8853\u7684\u306b\u3084\u308b\u306e\u304b\u3001\u3069\u3053\u307e\u3067\u30c7\u30fc\u30bf\u3092\u6301\u3064\u306e\u304b\u3068\u3044\u3046\u90e8\u5206\u3082\u3044\u308d\u3044\u308d\u3042\u308b\u3002\n\u3053\u306e\u5b9f\u88c5\u306e\u5834\u5408\u306f\u3001\u6e1b\u3089\u3057\u3066\u3044\u304f\u65b9\u5411\u3067\u3001\u5168\u90e8\u7b97\u8853\u7684\u306b\u6c42\u3081\u3066\u3044\u308b\u3002\n\u6e1b\u3089\u3057\u3066\u3044\u304f\u5883\u754c\u7dda\u306a\u306e\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u969b\u3001\u4e0b\u5411\u304d\u4e09\u89d2\u3060\u3051\u3092\u898b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\u305d\u3046\u3059\u308b\u3068\u300cb\u306e\u5de6\u306b\u306f\u30bb\u30eb\u304c\u306a\u3044\u300d\u3068\u3044\u3046\u72b6\u6cc1\u306b\u5bfe\u51e6\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u3001\u3061\u3087\u3063\u3068\u697d\u306b\u306a\u308b\u3002\n\u3067\u3002\n\u5f53\u65e5\u3001C++ \u306b\u79fb\u690d\u3057\u305f\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u307e\u3063\u305f\u304f\u540c\u3058\u3002\n\nC++\n// clang++ -std=c++11 -Wall\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> get_positions( string const & src )\n{\n  vector<int> positions;\n  for( auto ch : src ){\n    positions.push_back( ch - 'a' );\n  }\n  return positions;\n}\n\nstring solve( string const & src )\n{\n  vector<int> positions = get_positions( src );\n  int s = positions.size();\n  int borders[3]={s,s,s};\n  for( auto po : positions ){\n    int h = static_cast<int>( floor( sqrt( po ) ) );\n    if ( (po-h*h)%2==0 ){\n      continue;\n    }\n    for( int ix=0 ; ix<3 ; ++ix ){\n      int delta = (vector<int>{-1,1,-h*2})[ix];\n      if ( positions.end() != find( positions.begin(), positions.end(), po+delta ) ){\n        borders[ix] -= 2;\n      }\n    }\n  }\n  return (stringstream()<<borders[0]<<\",\"<<borders[1]<<\",\"<<borders[2] ).str();\n}\n\nvoid test( string const & src, string const & expected )\n{\n  string actual = solve( src );\n  bool ok = actual==expected;\n  cout\n    <<( ok ? \"ok \" : \"***NG*** \" )<< src << \" => \" << actual;\n  if ( ! ok ){\n    cout << \" != \" <<  expected;\n  }\n  cout  << endl;\n}\n\nvoid test_all()\n{\n/*0*/ test( \"bdelmnouy\", \"5,7,9\" );  \n/* \u7565 */\n/*46*/ test( \"abcdeghijklmnopqrstuvwxy\", \"6,6,6\" );\n}\nint main()\n{\n  test_all();\n}\n\n\nget_positions \u304c\u3001STL \u3092\u3061\u3083\u3093\u3068\u4f7f\u3048\u3070\u3082\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3001STL\u529b\u304c\u8db3\u308a\u305a\u3001\u3053\u3093\u306a\u3068\u3053\u308d\u3067\u3002\n\u884c\u6570\u3067\u306f\u3001ruby \u306e 3\u500d\u3050\u3089\u3044\u306e\u611f\u3058\u3002\u305d\u3093\u306a\u3082\u3093\u304b\u306a\u3002\n\n\u554f\u984c http://nabetani.sakura.ne.jp/hena/ord26tribo/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/8a973a47633558f54ba8\n\u30a4\u30d9\u30f3\u30c8  http://yhpg.doorkeeper.jp/events/15316\n\n\u5f53\u65e5\u304a\u898b\u305b\u3057\u305f\u5b9f\u88c5\u3002\n\n\u307e\u305a\u306f ruby \u304b\u3089\u3002\n\n```ruby\ndef solve(s)\n  positions = s.chars.map { |c| c.ord - 'a'.ord }.sort\n  bo = [positions.size] * 3\n  positions.each do |po|\n    h = Math.sqrt(po).floor\n    next if  (po - h**2).even? # \u4e0a\u304c\u5c16\u3063\u305f\u4e09\u89d2\u306f\u7121\u8996\n    [-1, +1, -h * 2].each.with_index do |delta, ix|\n      bo[ix] -= 2 if positions.include?(po + delta)\n    end\n  end\n  bo.join(',')\nend\n\nDATA.map do |line|\n  id, src, expected = line.split(/\\s+/)\n  actual = solve(src)\n  (actual == expected).tap do |ok|\n    puts '***NG*** : %s %s->%s ( %s )' % [id, src, actual, expected] unless ok\n  end\nend.all?.tap { |r| puts(r ? 'ok' : 'NG') }\n\n__END__\n0 bdelmnouy 5,7,9\n1 a 1,1,1\n2 q 1,1,1\n45  abcdefghijklmnoqrstuwxy 5,7,7\n46  abcdeghijklmnopqrstuvwxy  6,6,6\n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u5b9f\u88c5\u6226\u7565\u306f\u3002\n\n* \u7dda\u3092\u6570\u3048\u3066\u3044\u304f\u3002\n* \u96a3\u306b\u3042\u308b\u304b\u3089\u7dda\u304c\u306a\u3044\u3068\u304b\u3044\u3046\u3053\u3068\u3092\u5ea6\u5916\u8996\u3057\u3066\u5168\u90e8\u6570\u3048\u3066\u304b\u3089\u3001\u3053\u3053\u306f\u7dda\u304c\u306a\u3044\u3088\u306d\u3001\u3068\u3001\u6e1b\u3089\u3057\u3066\u3044\u304f\u3002\n\n\u306e\u4e8c\u901a\u308a\u304c\u3042\u308b\u3002\n\n\u3042\u3068\u3001\u30bb\u30eb\u3068\u30bb\u30eb\u306e\u95a2\u4fc2\u3092\u3069\u3053\u307e\u3067\u7b97\u8853\u7684\u306b\u3084\u308b\u306e\u304b\u3001\u3069\u3053\u307e\u3067\u30c7\u30fc\u30bf\u3092\u6301\u3064\u306e\u304b\u3068\u3044\u3046\u90e8\u5206\u3082\u3044\u308d\u3044\u308d\u3042\u308b\u3002\n\n\u3053\u306e\u5b9f\u88c5\u306e\u5834\u5408\u306f\u3001\u6e1b\u3089\u3057\u3066\u3044\u304f\u65b9\u5411\u3067\u3001\u5168\u90e8\u7b97\u8853\u7684\u306b\u6c42\u3081\u3066\u3044\u308b\u3002\n\u6e1b\u3089\u3057\u3066\u3044\u304f\u5883\u754c\u7dda\u306a\u306e\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u969b\u3001\u4e0b\u5411\u304d\u4e09\u89d2\u3060\u3051\u3092\u898b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\u305d\u3046\u3059\u308b\u3068\u300cb\u306e\u5de6\u306b\u306f\u30bb\u30eb\u304c\u306a\u3044\u300d\u3068\u3044\u3046\u72b6\u6cc1\u306b\u5bfe\u51e6\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308a\u3001\u3061\u3087\u3063\u3068\u697d\u306b\u306a\u308b\u3002\n\n\u3067\u3002\n\u5f53\u65e5\u3001C++ \u306b\u79fb\u690d\u3057\u305f\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u307e\u3063\u305f\u304f\u540c\u3058\u3002\n\n```cpp:C++\n// clang++ -std=c++11 -Wall\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <sstream>\n\nusing namespace std;\n\nvector<int> get_positions( string const & src )\n{\n  vector<int> positions;\n  for( auto ch : src ){\n    positions.push_back( ch - 'a' );\n  }\n  return positions;\n}\n\nstring solve( string const & src )\n{\n  vector<int> positions = get_positions( src );\n  int s = positions.size();\n  int borders[3]={s,s,s};\n  for( auto po : positions ){\n    int h = static_cast<int>( floor( sqrt( po ) ) );\n    if ( (po-h*h)%2==0 ){\n      continue;\n    }\n    for( int ix=0 ; ix<3 ; ++ix ){\n      int delta = (vector<int>{-1,1,-h*2})[ix];\n      if ( positions.end() != find( positions.begin(), positions.end(), po+delta ) ){\n        borders[ix] -= 2;\n      }\n    }\n  }\n  return (stringstream()<<borders[0]<<\",\"<<borders[1]<<\",\"<<borders[2] ).str();\n}\n\nvoid test( string const & src, string const & expected )\n{\n  string actual = solve( src );\n  bool ok = actual==expected;\n  cout\n    <<( ok ? \"ok \" : \"***NG*** \" )<< src << \" => \" << actual;\n  if ( ! ok ){\n    cout << \" != \" <<  expected;\n  }\n  cout  << endl;\n}\n\nvoid test_all()\n{\n/*0*/ test( \"bdelmnouy\", \"5,7,9\" );  \n/* \u7565 */\n/*46*/ test( \"abcdeghijklmnopqrstuvwxy\", \"6,6,6\" );\n}\nint main()\n{\n  test_all();\n}\n```\n\n`get_positions` \u304c\u3001STL \u3092\u3061\u3083\u3093\u3068\u4f7f\u3048\u3070\u3082\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3001STL\u529b\u304c\u8db3\u308a\u305a\u3001\u3053\u3093\u306a\u3068\u3053\u308d\u3067\u3002\n\u884c\u6570\u3067\u306f\u3001ruby \u306e 3\u500d\u3050\u3089\u3044\u306e\u611f\u3058\u3002\u305d\u3093\u306a\u3082\u3093\u304b\u306a\u3002\n\n\n\n", "tags": ["C++", "\u3069\u3046\u66f8\u304f", "yhpg", "Ruby"]}