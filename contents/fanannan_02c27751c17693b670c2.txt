{"tags": ["PRML"], "context": " More than 1 year has passed since last update.Qiita\u306b\u65b0\u898f\u767b\u9332\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u306e\u3067\u3001\u3068\u3063\u3066\u3082\u6065\u305a\u304b\u3057\u3044\u30ec\u30d9\u30eb\u3067\u3059\u304c\u3001PRML\u306e1\u7ae0\u306e\u59cb\u3081\u306e\u3068\u3053\u308d\u3092Clojure\u3067\u66f8\u3044\u3066\u307f\u305f\u3082\u306e\u3092\u5171\u6709\u3057\u307e\u3059\uff08\u307e\u3060\u3001\u3053\u3053\u307e\u3067\u3057\u304b\u9032\u3093\u3067\u3044\u307e\u305b\u3093\uff09\u3002\u305f\u3076\u3093\u3001\u3082\u3063\u3068\u305a\u3063\u3068\u7dba\u9e97\u306a\u66f8\u304d\u65b9\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5927\u76ee\u306b\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\nprml1_1.clj\n(ns prml.prml1-1)\n\n(use 'clojure.set)   ; incanter\u5bfe\u7b56\n(use '(incanter core charts))\n\n; \u30c7\u30fc\u30bf\u4f5c\u6210\n(defn test-func [x] (sin (* 2 Math/PI x)))\n(def x-values [0.0, 0.111111, 0.222222, 0.333333, 0.444444, 0.555556, 0.666667, 0.777778, 0.888889, 1.0])\n(def true-y-values (map #'test-func x-values))\n(def observed-y-values [0.349486, 0.830839, 1.007332, 0.971507, 0.133066, 0.166823, -0.848307, -0.445686, -0.563567, 0.261502])\n\n\n\n; \u5f0f 1.1\n; \u4fc2\u6570\u304cw-list\u3067\u3042\u308b\u3088\u3046\u306ax\u306b\u3064\u3044\u3066\u306e\u591a\u9805\u5f0f\u3002w-list\u306e\u6700\u521d\u306e\u9805\u306f\u5b9a\u6570\u9805\u3001\u6b21\u6570\u306f(- (count w-list) 1)\n(defn func-y [x, w-list]\n    (reduce + (map #(* (nth w-list %) (Math/pow x %))  (range 0 (count w-list)))))\n\n\n; \u5f0f 1.2\n; func-y\u306b\u3064\u3044\u3066\u306e\u4e8c\u4e57\u8aa4\u5dee\u95a2\u6570\u3002x-list\u306f\u89b3\u6e2c\u5024\u306e\u30d9\u30af\u30bf\u3001t-list\u304c\u771f\u306e\u5024\u306e\u30d9\u30af\u30bf\u3002 w-list\u306f\u4fc2\u6570\u9805\u306e\u30d9\u30af\u30bf\u3002\n(defn func-error [x-list, w-list, t-list]\n  (if (== (count x-list) (count t-list))\n    (* 0.5\n       (reduce +\n         (map #(Math/pow (- (func-y (nth x-list %) w-list) (nth t-list %)) 2.0)\n           (range 0 (count x-list)))))\n    nil\n  )\n)\n\n\n; \u5f0f 1.4\n; func-y\u306b\u3064\u3044\u3066\u306e\u4e8c\u4e57\u8aa4\u5dee\u95a2\u6570\u3092\u6b63\u5247\u5316\u3002x-list\u306f\u89b3\u6e2c\u5024\u306e\u30d9\u30af\u30bf\u3001t-list\u304c\u771f\u306e\u5024\u306e\u30d9\u30af\u30bf\u3002 w-list\u306f\u4fc2\u6570\u9805\u306e\u30d9\u30af\u30bf\u3002\n; lambda\u306f\u7f70\u91d1\u9805\n(defn func-error-with-penalty [x-list, w-list, t-list, lambda]\n  (if (== (count x-list) (count t-list))\n    (+ (* 0.5\n       (reduce +\n         (map #(Math/pow (- (func-y (nth x-list %) w-list) (nth t-list %)) 2.0)\n           (range 0 (count x-list)))))\n       (* 0.5 lambda (reduce + (map #(* (nth w-list %) (nth w-list %)) (range 0 (count w-list)))))\n    )\n      nil\n  )\n)\n\n\n; \u5f0f 1.123\n; \u53c2\u8003    http://d.hatena.ne.jp/aidiary/20100327/1269657354\n; \u591a\u9805\u5f0f\u8fd1\u4f3c\u306e\u89e3\u306e\u8a08\u7b97(\u6f14\u7fd21.1)\n(defn calc-a-sub [x-list, i, j]\n  (reduce + (map #(Math/pow (nth x-list %) (+ i j)) (range 0 (count x-list)))))\n\n(defn calc-a [x-list, m]\n  (matrix (for [i (range 0 (inc m))]\n                (for [j (range 0 (inc m))]\n                  (calc-a-sub x-list i j)))))\n\n(defn calc-a-with-penalty [x-list, m, lambda]\n  (matrix (for [i (range 0 (inc m))]\n                (for [j (range 0 (inc m))]\n                  (if (= i j)\n                    (+ (calc-a-sub x-list i j) lambda)\n                    (calc-a-sub x-list i j)\n                  )))))\n\n(defn calc-t-sub [x-list, t-list, i]\n  (reduce + (map #(* (Math/pow (nth x-list %) i) (nth t-list %))(range 0 (count x-list)))))\n\n(defn calc-t [x-list, t-list, m]\n   (matrix (map #(calc-t-sub x-list t-list %) (range 0 (inc m)))))\n\n; \u4fc2\u6570\u9805\u30d9\u30af\u30bf\u306e\u63a8\u5b9a\n(defn estimate [x-list, t-list m]\n  (solve (calc-a x-list m) (calc-t x-list t-list m)))\n\n(defn estimate-with-penalty [x-list, t-list m lambda]\n   (solve (calc-a-with-penalty x-list m lambda) (calc-t x-list t-list m)))\n\n\n; \u8aa4\u5dee\u78ba\u8a8d\n(println \"\u89b3\u6e2c\u5024\u306b\u5bfe\u3059\u308b\u8aa4\u5dee\u78ba\u8a8d\")\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 3))  observed-y-values))\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 5))  observed-y-values))\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 9))  observed-y-values))\n(println (func-error x-values (to-vect (estimate-with-penalty x-values observed-y-values 9 (Math/exp -18)))  observed-y-values))\n\n(println \"\u7406\u8ad6\u5024\u306b\u5bfe\u3059\u308b\u8aa4\u5dee\u78ba\u8a8d\")\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 3))  true-y-values))\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 5))  true-y-values))\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 9))  true-y-values))\n(println (func-error x-values (to-vect (estimate-with-penalty x-values observed-y-values 9 (Math/exp -18)))  true-y-values))\n\n\n; \u30b0\u30e9\u30d5\u63cf\u753b\n(def plot (scatter-plot x-values observed-y-values :title \"PRML1.1\" :y-label \"y value\" :x-label \"x value\"))\n(add-function plot test-func 0.0 1.0)\n(add-points plot x-values true-y-values)\n(add-function plot #(func-y % (to-vect (estimate x-values observed-y-values 9)))  0.0 1.0)\n(add-function plot #(func-y % (to-vect (estimate-with-penalty x-values observed-y-values 9 (Math/exp -18))))  0.0 1.0)\n(set-theme plot :dark)\n\n(view plot)\n\n\nQiita\u306b\u65b0\u898f\u767b\u9332\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u306e\u3067\u3001\u3068\u3063\u3066\u3082\u6065\u305a\u304b\u3057\u3044\u30ec\u30d9\u30eb\u3067\u3059\u304c\u3001PRML\u306e1\u7ae0\u306e\u59cb\u3081\u306e\u3068\u3053\u308d\u3092Clojure\u3067\u66f8\u3044\u3066\u307f\u305f\u3082\u306e\u3092\u5171\u6709\u3057\u307e\u3059\uff08\u307e\u3060\u3001\u3053\u3053\u307e\u3067\u3057\u304b\u9032\u3093\u3067\u3044\u307e\u305b\u3093\uff09\u3002\u305f\u3076\u3093\u3001\u3082\u3063\u3068\u305a\u3063\u3068\u7dba\u9e97\u306a\u66f8\u304d\u65b9\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u5927\u76ee\u306b\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n```clojure:prml1_1.clj\n(ns prml.prml1-1)\n\n(use 'clojure.set)   ; incanter\u5bfe\u7b56\n(use '(incanter core charts))\n\n; \u30c7\u30fc\u30bf\u4f5c\u6210\n(defn test-func [x] (sin (* 2 Math/PI x)))\n(def x-values [0.0, 0.111111, 0.222222, 0.333333, 0.444444, 0.555556, 0.666667, 0.777778, 0.888889, 1.0])\n(def true-y-values (map #'test-func x-values))\n(def observed-y-values [0.349486, 0.830839, 1.007332, 0.971507, 0.133066, 0.166823, -0.848307, -0.445686, -0.563567, 0.261502])\n\n\n\n; \u5f0f 1.1\n; \u4fc2\u6570\u304cw-list\u3067\u3042\u308b\u3088\u3046\u306ax\u306b\u3064\u3044\u3066\u306e\u591a\u9805\u5f0f\u3002w-list\u306e\u6700\u521d\u306e\u9805\u306f\u5b9a\u6570\u9805\u3001\u6b21\u6570\u306f(- (count w-list) 1)\n(defn func-y [x, w-list]\n    (reduce + (map #(* (nth w-list %) (Math/pow x %))  (range 0 (count w-list)))))\n\n\n; \u5f0f 1.2\n; func-y\u306b\u3064\u3044\u3066\u306e\u4e8c\u4e57\u8aa4\u5dee\u95a2\u6570\u3002x-list\u306f\u89b3\u6e2c\u5024\u306e\u30d9\u30af\u30bf\u3001t-list\u304c\u771f\u306e\u5024\u306e\u30d9\u30af\u30bf\u3002 w-list\u306f\u4fc2\u6570\u9805\u306e\u30d9\u30af\u30bf\u3002\n(defn func-error [x-list, w-list, t-list]\n  (if (== (count x-list) (count t-list))\n    (* 0.5\n       (reduce +\n         (map #(Math/pow (- (func-y (nth x-list %) w-list) (nth t-list %)) 2.0)\n           (range 0 (count x-list)))))\n    nil\n  )\n)\n\n\n; \u5f0f 1.4\n; func-y\u306b\u3064\u3044\u3066\u306e\u4e8c\u4e57\u8aa4\u5dee\u95a2\u6570\u3092\u6b63\u5247\u5316\u3002x-list\u306f\u89b3\u6e2c\u5024\u306e\u30d9\u30af\u30bf\u3001t-list\u304c\u771f\u306e\u5024\u306e\u30d9\u30af\u30bf\u3002 w-list\u306f\u4fc2\u6570\u9805\u306e\u30d9\u30af\u30bf\u3002\n; lambda\u306f\u7f70\u91d1\u9805\n(defn func-error-with-penalty [x-list, w-list, t-list, lambda]\n  (if (== (count x-list) (count t-list))\n    (+ (* 0.5\n       (reduce +\n         (map #(Math/pow (- (func-y (nth x-list %) w-list) (nth t-list %)) 2.0)\n           (range 0 (count x-list)))))\n       (* 0.5 lambda (reduce + (map #(* (nth w-list %) (nth w-list %)) (range 0 (count w-list)))))\n    )\n      nil\n  )\n)\n\n\n; \u5f0f 1.123\n; \u53c2\u8003\thttp://d.hatena.ne.jp/aidiary/20100327/1269657354\n; \u591a\u9805\u5f0f\u8fd1\u4f3c\u306e\u89e3\u306e\u8a08\u7b97(\u6f14\u7fd21.1)\n(defn calc-a-sub [x-list, i, j]\n  (reduce + (map #(Math/pow (nth x-list %) (+ i j)) (range 0 (count x-list)))))\n\n(defn calc-a [x-list, m]\n  (matrix (for [i (range 0 (inc m))]\n                (for [j (range 0 (inc m))]\n                  (calc-a-sub x-list i j)))))\n\n(defn calc-a-with-penalty [x-list, m, lambda]\n  (matrix (for [i (range 0 (inc m))]\n                (for [j (range 0 (inc m))]\n                  (if (= i j)\n                    (+ (calc-a-sub x-list i j) lambda)\n                    (calc-a-sub x-list i j)\n                  )))))\n\n(defn calc-t-sub [x-list, t-list, i]\n  (reduce + (map #(* (Math/pow (nth x-list %) i) (nth t-list %))(range 0 (count x-list)))))\n\n(defn calc-t [x-list, t-list, m]\n   (matrix (map #(calc-t-sub x-list t-list %) (range 0 (inc m)))))\n\n; \u4fc2\u6570\u9805\u30d9\u30af\u30bf\u306e\u63a8\u5b9a\n(defn estimate [x-list, t-list m]\n  (solve (calc-a x-list m) (calc-t x-list t-list m)))\n\n(defn estimate-with-penalty [x-list, t-list m lambda]\n   (solve (calc-a-with-penalty x-list m lambda) (calc-t x-list t-list m)))\n\n\n; \u8aa4\u5dee\u78ba\u8a8d\n(println \"\u89b3\u6e2c\u5024\u306b\u5bfe\u3059\u308b\u8aa4\u5dee\u78ba\u8a8d\")\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 3))  observed-y-values))\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 5))  observed-y-values))\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 9))  observed-y-values))\n(println (func-error x-values (to-vect (estimate-with-penalty x-values observed-y-values 9 (Math/exp -18)))  observed-y-values))\n\n(println \"\u7406\u8ad6\u5024\u306b\u5bfe\u3059\u308b\u8aa4\u5dee\u78ba\u8a8d\")\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 3))  true-y-values))\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 5))  true-y-values))\n(println (func-error x-values (to-vect (estimate x-values observed-y-values 9))  true-y-values))\n(println (func-error x-values (to-vect (estimate-with-penalty x-values observed-y-values 9 (Math/exp -18)))  true-y-values))\n\n\n; \u30b0\u30e9\u30d5\u63cf\u753b\n(def plot (scatter-plot x-values observed-y-values :title \"PRML1.1\" :y-label \"y value\" :x-label \"x value\"))\n(add-function plot test-func 0.0 1.0)\n(add-points plot x-values true-y-values)\n(add-function plot #(func-y % (to-vect (estimate x-values observed-y-values 9)))  0.0 1.0)\n(add-function plot #(func-y % (to-vect (estimate-with-penalty x-values observed-y-values 9 (Math/exp -18))))  0.0 1.0)\n(set-theme plot :dark)\n\n(view plot)\n```"}