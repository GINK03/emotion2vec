{"context": "\n\nDIMSUM \u3067\u985e\u4f3c\u5ea6\u8a08\u7b97\nALS(\u4ea4\u4e92\u6700\u5c0f\u4e8c\u4e57\u6cd5)\u306e\u3088\u3046\u306b\u30a2\u30a4\u30c6\u30e0\u3068\u30e6\u30fc\u30b6\u306e\u7279\u5fb4\u91cf\u3092\u540c\u6642\u306b\u8a08\u7b97\u3057\u3066\u3044\u304f\u306e\u3067\u306f\u306a\u304f\u3001\u30a2\u30a4\u30c6\u30e0\u540c\u58eb\u306e\u985e\u4f3c\u6027\u3092\u307e\u305a\u306f\u8a08\u7b97\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u4f7f\u3063\u3066\u3001\u30e6\u30fc\u30b6\u306b\u30a2\u30a4\u30c6\u30e0\u3092\u63a8\u85a6\u3059\u308b\u3068\u3044\u3046\u3088\u3046\u306a\u624b\u7d9a\u304d\u3092\u8e0f\u3080\u53e4\u5178\u7684\u306a\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u6b32\u3057\u304f\u306a\u3063\u305f\u3002spark\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u63a2\u3057\u305f\u304c\u3001\u306a\u3055\u305d\u3046\u3060\u3063\u305f\u3002mahout\u3067\u306f\u3001Java\u5b9f\u88c5\u306e\u6642\u4ee3\u306b\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u305f\u304c\u3001\u73fe\u5728\u306emahout\u306e\u89e3\u8aac\u306e\u30da\u30fc\u30b8\u3092\u898b\u308b\u3068\u3001spark-itemsimilarity\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u304c\u30a2\u30a4\u30c6\u30e0\u306e\u985e\u4f3c\u6027\u3092\u8a08\u7b97\u3059\u308b\u3060\u3051\u306e\u3088\u3046\u3060\uff08\u304a\u305d\u3089\u304f\u4eca\u5b9f\u88c5\u4e2d\u306a\u306e\u304b\u306a\uff1f\uff09 \u3055\u3059\u304c\u306bmahout\u3092\u30ed\u30fc\u30ab\u30eb\u3067\u5b9f\u884c\u3059\u308b\u74b0\u5883\u3092\u6574\u3048\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u624b\u5143\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3063\u3066\u3001\u81ea\u5206\u306e\u30de\u30b7\u30f3\u306espark\u3067\u8a08\u7b97\u3057\u3066\u307f\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001spark MLlib\u3067\u30d9\u30af\u30c8\u30eb\u306e\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3002\n    // item-item\u985e\u4f3c\u5ea6\n    val irm = new IndexedRowMatrix(rdd.zipWithIndex.map{ case(value, index) => IndexedRow(index, value) })\n    val itemSimilarity = irm.columnSimilarities()\n\n\u3055\u3089\u306b\u3001DIMSUM\u3068\u3044\u3046\u8fd1\u4f3c\u8a08\u7b97\u306e\u624b\u6cd5\u304c\u8fd1\u5e74\u958b\u767a\u3055\u308c\u3001M > N (M:user/N:item) \u306e\u5834\u5408\u3068\u3044\u3046\u5236\u7d04\u306e\u3082\u3068\u3067\u3001\u5927\u898f\u6a21\u306a\u884c\u5217\u3067\u3082\u5206\u6563\u3067\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8fd1\u4f3c\u89e3\u3067\u3088\u3051\u308c\u3070\u3001\n    val itemSimilarity = irm.toRowMatrix().columnSimilarities(params.threshold)\n\n\u3068\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3002\u578b\u3092RowMatrix\u306b\u5909\u63db\u3057\u3001\u5f15\u6570\u306b\u8fd1\u4f3c\u306e\u305f\u3081\u306e\u3057\u304d\u3044\u5024\u3092\u6e21\u3057\u3066\u3084\u308c\u3070\u826f\u3044\uff080.1\u3050\u3089\u3044\u304b\u3089\u8a66\u3059\u306e\u304c\u826f\u3044\u30020.0\u3092\u4e0e\u3048\u308c\u3070\u53b3\u5bc6\u89e3\u306b\u306a\u308b\uff09\u3002\n\u7d50\u679c\u306f NxN\u306a\u306e\u3067\u3001\u5143\u306e MN\u306b\u623b\u3057\u305f\u3044\u304c\u3001\u4e0a\u4e09\u89d2\u884c\u5217\u304b\u3089\u5bfe\u79f0\u884c\u5217\u3092\u4f5c\u3063\u3066UserFeature(User\u306e\u5c65\u6b74\uff09\u3068\u5185\u7a4d\u3092\u53d6\u308b\u3060\u3051\u3002userLog\u3068\u3044\u3046\u5909\u6570\u306e\u578b\u306fBlockMatrix\u306b\u3059\u3079\u304d\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3055\u3089\u306b\u3053\u308c\u306fmultiply\u306e\u5f15\u6570\u306e\u5074\u306a\u306e\u3067\u884c\u5217\u306f\u5c0f\u3055\u304f\u5206\u5272\u3059\u308b\u7b49\u3057\u3066dense\u306b\u3057\u3066\u30ed\u30fc\u30ab\u30eb\u30e1\u30e2\u30ea\u306b\u53ce\u3081\u306a\u3044\u3068\u99c4\u76ee\u3060\u3002\u5185\u90e8\u3067\u306f\u307e\u305aBreeze\u306b\u5909\u63db\u3057\u3066\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u304a\u304d\u3001\u305d\u306e\u5f8cmapPartitions\u306e\u4e2d\u3067\u53d6\u5f97\u3057\u3066\u3044\u305f\u3002\n    // item-item\u985e\u4f3c\u5ea6\u304b\u3089\u8a55\u4fa1\u884c\u5217R\u3092\u4f5c\u308b(\u4e0a\u4e09\u89d2\u884c\u5217\u304b\u3089\u5bfe\u79f0\u884c\u5217\u3092\u4f5c\u6210\u3057\u3066\u5185\u7a4d\u3092\u8a08\u7b97\u3057\u305f\u304b\u3063\u305f\u304cAPI\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\uff09\n    // (5)\u5f0f: https://cran.r-project.org/web/packages/recommenderlab/vignettes/recommenderlab.pdf\n    val result1  = toBreeze(itemSimilarity.toIndexedRowMatrix.multiply(userLog))\n    val result2  = toBreeze(itemSimilarity.transpose.toIndexedRowMatrix.multiply(userLog))\n    val R = result1 + result2\n\n    // mahout\u4ed5\u69d8\u306b\u5bfe\u5fdc\u3002userLog\u306b\u5b58\u5728\u3059\u308b\u3082\u306e\u306fR\u304b\u3089\u9664\u5916(->0\u306b\u5f37\u5236\u5909\u63db\uff09\u3057\u3066maskedR\u3092\u4f5c\u6210\n    val newFeatures = new BDM(userLog.numCols, userLog.numRows, userLog.asInstanceOf[DenseMatrix].values.map {\n      case 1.0 => 0.0\n      case 0.0 => 1.0\n    })\n    val maskedR = R.toDenseMatrix :* newFeatures.t\n\n\u65e2\u306b\u30ed\u30b0\u306b\u3042\u308b\u3082\u306e\u3092\u518d\u5ea6\u63a8\u85a6\u3057\u3066\u3082\u826f\u3044\u304c\u3001\u5927\u4f53\u306f\u7701\u304f\u3068\u601d\u3046\u306e\u3067\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30b9\u30b3\u30a2\u30920\u306b\u3057\u3066\u3044\u308b\u3002\n\u3053\u3053\u307e\u3067\u304f\u308c\u3070\u3001\u884c\u65b9\u5411\u304cUser\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u306a\u306e\u3067Top N\u500b\u3092\u63a8\u85a6\u3057\u3066\u3084\u308c\u3070\u826f\u3044\u3002\n    val N = params.numRecommendations\n    val nRows = maskedR.rows -1\n    val nCols = maskedR.cols -1\n    for (i <- 0 to nRows) {\n      val vec = for (j <- 0 to nCols) yield maskedR(i, j)\n      print(\"%-6d\".format(i))\n      println(vec.sorted.reverse.filter { _ > 0.1 }.take(N))\n    }\n\n\n\u7d50\u679c\nmahout in action \u306eintro.csv\u3092\u4f7f\u3063\u3066\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\uff08\u91cd\u307f\u306b\u3064\u3044\u3066\u306f01\u30d0\u30a4\u30ca\u30ea\u5316\u3057\u3066\u3044\u308b\uff09\u3002\u63a8\u85a6\u3057\u305f\u3044\u30a2\u30a4\u30c6\u30e0\u306f2\u3068\u3057\u3066\u3044\u308b\u3002\n\n            0         1         2         3         4         \n0          0.000     0.000     0.000     0.000     0.000\n1          0.000     0.000     1.760     2.626     0.000\n2          0.000     0.000     1.998     0.000     0.000\n3          2.222     0.000     0.000     0.000     0.000\n4          1.394     2.101     0.000     2.193     0.000\n5          1.748     2.455     1.840     0.000     0.000\n6          0.447     0.947     0.000     0.947     1.654\n-------------\nTop 2 Similarity\n0     Vector()\n1     Vector(2.626220632679411, 1.7601952288949723)\n2     Vector(1.9979805815931897)\n3     Vector(2.221777460189542)\n4     Vector(2.193115703813497, 2.10136399427736)\n5     Vector(2.4549173848706336, 1.839562313220223)\n6     Vector(1.6543203766865053, 0.9472135954999579)\n\nuser0\u306b\u306f\u63a8\u85a6\u306a\u3057\u3002\uff12\uff0c\uff13\u306f1\u3064\u3057\u304b\u63a8\u85a6\u30a2\u30a4\u30c6\u30e0\u304c\u306a\u3044\u3002\n\n\u611f\u60f3\nMLlib\u306e\u884c\u5217\u64cd\u4f5c\u306fBreeze\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u304c\u3001toBreeze \u3068\u3044\u3046\u306e\u304cprivate\uff08\u3068\u3044\u3046\u304b\u30c6\u30b9\u30c8\u5c02\u7528)\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u82e5\u5e72\u3081\u3093\u3069\u304f\u3055\u3044\u3002\u3053\u306e\u3042\u305f\u308a\u3092\u958b\u767a\u3059\u308b\u5834\u5408\u306f\u3001python/R\u3067\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u3092\u4f5c\u3063\u3066\u304b\u3089scala\u7248\u3092\u66f8\u304f\u306e\u304c\u8fd1\u9053\u304b\u3082\u3057\u308c\u306a\u3044\u3002pySpark\u3067\u3042\u308c\u3070numpy\u3084scipy\u306e\u914d\u5217\u3068\u4e92\u63db\u6027\u30fb\u76f8\u4e92\u904b\u7528\u3092\u610f\u8b58\u3057\u3066\u958b\u767a\u3055\u308c\u3066\u304a\u308a\u3001\u5b9f\u88c5\u4e2d\u306e\u7b54\u3048\u5408\u308f\u305b\u304c\u697d\u305d\u3046\u3060\u3002MLlib\u81ea\u4f53\u306b\u306f\u8a08\u7b97\u306b\u95a2\u3059\u308b\u30d0\u30b0\u304c\u307e\u3060\u307e\u3060\u591a\u3044\u306e\u3067\u3001python\u306e\u8cc7\u7523\u3092\u5229\u7528\u3001\u6bd4\u8f03\u3057\u306a\u304c\u3089\u5b9f\u88c5\u3067\u304d\u308b\u306e\u306fpySpark\u306e\u5f37\u307f\u3060\u3068\u601d\u3046\u3002\ntrait\u306e\u4ed5\u69d8\n/** Collects data and assembles a local dense breeze matrix (for test only). */\n  private[mllib] def toBreeze(): BDM[Double]\n\n\nTODO\nIndexedRowMatrix\u3068RowMatrix\u306e\u9055\u3044\u3092\u307e\u3068\u3081\u308b\u3002\n\n\u30b3\u30fc\u30c9\n\u3053\u3053\u306b\u4e0a\u3052\u3066\u304a\u3044\u305f\u3002\n\n\u53c2\u8003\nMatrix Computations and Optimization in Apache Spark\n - http://arxiv.org/pdf/1509.02256v2.pdf\nScalable Matrix Multiplication using Spark\n - https://www.bigdatapartnership.com/2015/11/23/scalable-matrix-multiplication-using-spark-2/\nDistributed Top-N Similarity Join with Hive and Perl Part I\n - http://blog.booking.com/top-N-similarity-join-with-hive-and-perl-part-I.html\n# DIMSUM \u3067\u985e\u4f3c\u5ea6\u8a08\u7b97\n\nALS(\u4ea4\u4e92\u6700\u5c0f\u4e8c\u4e57\u6cd5)\u306e\u3088\u3046\u306b\u30a2\u30a4\u30c6\u30e0\u3068\u30e6\u30fc\u30b6\u306e\u7279\u5fb4\u91cf\u3092\u540c\u6642\u306b\u8a08\u7b97\u3057\u3066\u3044\u304f\u306e\u3067\u306f\u306a\u304f\u3001\u30a2\u30a4\u30c6\u30e0\u540c\u58eb\u306e\u985e\u4f3c\u6027\u3092\u307e\u305a\u306f\u8a08\u7b97\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u4f7f\u3063\u3066\u3001\u30e6\u30fc\u30b6\u306b\u30a2\u30a4\u30c6\u30e0\u3092\u63a8\u85a6\u3059\u308b\u3068\u3044\u3046\u3088\u3046\u306a\u624b\u7d9a\u304d\u3092\u8e0f\u3080\u53e4\u5178\u7684\u306a\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u6b32\u3057\u304f\u306a\u3063\u305f\u3002spark\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u63a2\u3057\u305f\u304c\u3001\u306a\u3055\u305d\u3046\u3060\u3063\u305f\u3002mahout\u3067\u306f\u3001Java\u5b9f\u88c5\u306e\u6642\u4ee3\u306b\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u305f\u304c\u3001\u73fe\u5728\u306e[mahout\u306e\u89e3\u8aac\u306e\u30da\u30fc\u30b8](https://mahout.apache.org/users/algorithms/intro-cooccurrence-spark.html)\u3092\u898b\u308b\u3068\u3001spark-itemsimilarity\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u304c\u30a2\u30a4\u30c6\u30e0\u306e\u985e\u4f3c\u6027\u3092\u8a08\u7b97\u3059\u308b\u3060\u3051\u306e\u3088\u3046\u3060\uff08\u304a\u305d\u3089\u304f\u4eca\u5b9f\u88c5\u4e2d\u306a\u306e\u304b\u306a\uff1f\uff09 \u3055\u3059\u304c\u306bmahout\u3092\u30ed\u30fc\u30ab\u30eb\u3067\u5b9f\u884c\u3059\u308b\u74b0\u5883\u3092\u6574\u3048\u308b\u306e\u306f\u5927\u5909\u306a\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u624b\u5143\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3063\u3066\u3001\u81ea\u5206\u306e\u30de\u30b7\u30f3\u306espark\u3067\u8a08\u7b97\u3057\u3066\u307f\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u3001spark MLlib\u3067\u30d9\u30af\u30c8\u30eb\u306e\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3002\n\n```\n    // item-item\u985e\u4f3c\u5ea6\n    val irm = new IndexedRowMatrix(rdd.zipWithIndex.map{ case(value, index) => IndexedRow(index, value) })\n    val itemSimilarity = irm.columnSimilarities()\n```\n\n\u3055\u3089\u306b\u3001DIMSUM\u3068\u3044\u3046\u8fd1\u4f3c\u8a08\u7b97\u306e\u624b\u6cd5\u304c\u8fd1\u5e74\u958b\u767a\u3055\u308c\u3001M > N (M:user/N:item) \u306e\u5834\u5408\u3068\u3044\u3046\u5236\u7d04\u306e\u3082\u3068\u3067\u3001\u5927\u898f\u6a21\u306a\u884c\u5217\u3067\u3082\u5206\u6563\u3067\u8a08\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8fd1\u4f3c\u89e3\u3067\u3088\u3051\u308c\u3070\u3001\n\n```\n    val itemSimilarity = irm.toRowMatrix().columnSimilarities(params.threshold)\n```\n\n\u3068\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3002\u578b\u3092RowMatrix\u306b\u5909\u63db\u3057\u3001\u5f15\u6570\u306b\u8fd1\u4f3c\u306e\u305f\u3081\u306e\u3057\u304d\u3044\u5024\u3092\u6e21\u3057\u3066\u3084\u308c\u3070\u826f\u3044\uff080.1\u3050\u3089\u3044\u304b\u3089\u8a66\u3059\u306e\u304c\u826f\u3044\u30020.0\u3092\u4e0e\u3048\u308c\u3070\u53b3\u5bc6\u89e3\u306b\u306a\u308b\uff09\u3002\n\n\u7d50\u679c\u306f NxN\u306a\u306e\u3067\u3001\u5143\u306e MN\u306b\u623b\u3057\u305f\u3044\u304c\u3001\u4e0a\u4e09\u89d2\u884c\u5217\u304b\u3089\u5bfe\u79f0\u884c\u5217\u3092\u4f5c\u3063\u3066UserFeature(User\u306e\u5c65\u6b74\uff09\u3068\u5185\u7a4d\u3092\u53d6\u308b\u3060\u3051\u3002userLog\u3068\u3044\u3046\u5909\u6570\u306e\u578b\u306fBlockMatrix\u306b\u3059\u3079\u304d\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3055\u3089\u306b\u3053\u308c\u306fmultiply\u306e\u5f15\u6570\u306e\u5074\u306a\u306e\u3067\u884c\u5217\u306f\u5c0f\u3055\u304f\u5206\u5272\u3059\u308b\u7b49\u3057\u3066dense\u306b\u3057\u3066\u30ed\u30fc\u30ab\u30eb\u30e1\u30e2\u30ea\u306b\u53ce\u3081\u306a\u3044\u3068\u99c4\u76ee\u3060\u3002\u5185\u90e8\u3067\u306f\u307e\u305aBreeze\u306b\u5909\u63db\u3057\u3066\u3001\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u304a\u304d\u3001\u305d\u306e\u5f8cmapPartitions\u306e\u4e2d\u3067\u53d6\u5f97\u3057\u3066\u3044\u305f\u3002\n\n\n```\n    // item-item\u985e\u4f3c\u5ea6\u304b\u3089\u8a55\u4fa1\u884c\u5217R\u3092\u4f5c\u308b(\u4e0a\u4e09\u89d2\u884c\u5217\u304b\u3089\u5bfe\u79f0\u884c\u5217\u3092\u4f5c\u6210\u3057\u3066\u5185\u7a4d\u3092\u8a08\u7b97\u3057\u305f\u304b\u3063\u305f\u304cAPI\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\uff09\n    // (5)\u5f0f: https://cran.r-project.org/web/packages/recommenderlab/vignettes/recommenderlab.pdf\n    val result1  = toBreeze(itemSimilarity.toIndexedRowMatrix.multiply(userLog))\n    val result2  = toBreeze(itemSimilarity.transpose.toIndexedRowMatrix.multiply(userLog))\n    val R = result1 + result2\n\n    // mahout\u4ed5\u69d8\u306b\u5bfe\u5fdc\u3002userLog\u306b\u5b58\u5728\u3059\u308b\u3082\u306e\u306fR\u304b\u3089\u9664\u5916(->0\u306b\u5f37\u5236\u5909\u63db\uff09\u3057\u3066maskedR\u3092\u4f5c\u6210\n    val newFeatures = new BDM(userLog.numCols, userLog.numRows, userLog.asInstanceOf[DenseMatrix].values.map {\n      case 1.0 => 0.0\n      case 0.0 => 1.0\n    })\n    val maskedR = R.toDenseMatrix :* newFeatures.t\n```\n\n\u65e2\u306b\u30ed\u30b0\u306b\u3042\u308b\u3082\u306e\u3092\u518d\u5ea6\u63a8\u85a6\u3057\u3066\u3082\u826f\u3044\u304c\u3001\u5927\u4f53\u306f\u7701\u304f\u3068\u601d\u3046\u306e\u3067\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30b9\u30b3\u30a2\u30920\u306b\u3057\u3066\u3044\u308b\u3002\n\n\u3053\u3053\u307e\u3067\u304f\u308c\u3070\u3001\u884c\u65b9\u5411\u304cUser\u306b\u5bfe\u3059\u308b\u30b9\u30b3\u30a2\u306a\u306e\u3067Top N\u500b\u3092\u63a8\u85a6\u3057\u3066\u3084\u308c\u3070\u826f\u3044\u3002\n\n```\n    val N = params.numRecommendations\n    val nRows = maskedR.rows -1\n    val nCols = maskedR.cols -1\n    for (i <- 0 to nRows) {\n      val vec = for (j <- 0 to nCols) yield maskedR(i, j)\n      print(\"%-6d\".format(i))\n      println(vec.sorted.reverse.filter { _ > 0.1 }.take(N))\n    }\n```\n\n## \u7d50\u679c\n\nmahout in action \u306eintro.csv\u3092\u4f7f\u3063\u3066\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\uff08\u91cd\u307f\u306b\u3064\u3044\u3066\u306f01\u30d0\u30a4\u30ca\u30ea\u5316\u3057\u3066\u3044\u308b\uff09\u3002\u63a8\u85a6\u3057\u305f\u3044\u30a2\u30a4\u30c6\u30e0\u306f2\u3068\u3057\u3066\u3044\u308b\u3002\n\n\n```\n\n            0         1         2         3         4         \n0          0.000     0.000     0.000     0.000     0.000\n1          0.000     0.000     1.760     2.626     0.000\n2          0.000     0.000     1.998     0.000     0.000\n3          2.222     0.000     0.000     0.000     0.000\n4          1.394     2.101     0.000     2.193     0.000\n5          1.748     2.455     1.840     0.000     0.000\n6          0.447     0.947     0.000     0.947     1.654\n-------------\nTop 2 Similarity\n0     Vector()\n1     Vector(2.626220632679411, 1.7601952288949723)\n2     Vector(1.9979805815931897)\n3     Vector(2.221777460189542)\n4     Vector(2.193115703813497, 2.10136399427736)\n5     Vector(2.4549173848706336, 1.839562313220223)\n6     Vector(1.6543203766865053, 0.9472135954999579)\n```\n\nuser0\u306b\u306f\u63a8\u85a6\u306a\u3057\u3002\uff12\uff0c\uff13\u306f1\u3064\u3057\u304b\u63a8\u85a6\u30a2\u30a4\u30c6\u30e0\u304c\u306a\u3044\u3002\n\n\n## \u611f\u60f3\n\nMLlib\u306e\u884c\u5217\u64cd\u4f5c\u306fBreeze\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u304c\u3001toBreeze \u3068\u3044\u3046\u306e\u304cprivate\uff08\u3068\u3044\u3046\u304b\u30c6\u30b9\u30c8\u5c02\u7528)\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u82e5\u5e72\u3081\u3093\u3069\u304f\u3055\u3044\u3002\u3053\u306e\u3042\u305f\u308a\u3092\u958b\u767a\u3059\u308b\u5834\u5408\u306f\u3001python/R\u3067\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u3092\u4f5c\u3063\u3066\u304b\u3089scala\u7248\u3092\u66f8\u304f\u306e\u304c\u8fd1\u9053\u304b\u3082\u3057\u308c\u306a\u3044\u3002pySpark\u3067\u3042\u308c\u3070numpy\u3084scipy\u306e\u914d\u5217\u3068\u4e92\u63db\u6027\u30fb\u76f8\u4e92\u904b\u7528\u3092\u610f\u8b58\u3057\u3066\u958b\u767a\u3055\u308c\u3066\u304a\u308a\u3001\u5b9f\u88c5\u4e2d\u306e\u7b54\u3048\u5408\u308f\u305b\u304c\u697d\u305d\u3046\u3060\u3002MLlib\u81ea\u4f53\u306b\u306f\u8a08\u7b97\u306b\u95a2\u3059\u308b\u30d0\u30b0\u304c\u307e\u3060\u307e\u3060\u591a\u3044\u306e\u3067\u3001python\u306e\u8cc7\u7523\u3092\u5229\u7528\u3001\u6bd4\u8f03\u3057\u306a\u304c\u3089\u5b9f\u88c5\u3067\u304d\u308b\u306e\u306fpySpark\u306e\u5f37\u307f\u3060\u3068\u601d\u3046\u3002\n\n[trait\u306e\u4ed5\u69d8](https://github.com/apache/spark/blob/master/mllib/src/main/scala/org/apache/spark/mllib/linalg/distributed/DistributedMatrix.scala)\n\n```\n/** Collects data and assembles a local dense breeze matrix (for test only). */\n  private[mllib] def toBreeze(): BDM[Double]\n```\n\n### TODO\nIndexedRowMatrix\u3068RowMatrix\u306e\u9055\u3044\u3092\u307e\u3068\u3081\u308b\u3002\n\n### \u30b3\u30fc\u30c9\n\n[\u3053\u3053](https://github.com/xghis/sample_datasets/blob/master/src/main/scala/org/apache/spark/examples/mllib/CosineSimilarityRecommender.scala)\u306b\u4e0a\u3052\u3066\u304a\u3044\u305f\u3002\n\n## \u53c2\u8003\nMatrix Computations and Optimization in Apache Spark\n - http://arxiv.org/pdf/1509.02256v2.pdf\n\nScalable Matrix Multiplication using Spark\n - https://www.bigdatapartnership.com/2015/11/23/scalable-matrix-multiplication-using-spark-2/\n\nDistributed Top-N Similarity Join with Hive and Perl Part I\n - http://blog.booking.com/top-N-similarity-join-with-hive-and-perl-part-I.html\n", "tags": ["Spark", "MLlib"]}