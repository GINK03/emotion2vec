{"tags": ["cocos2dx", "gradle", "AndroidStudio", "Mac", "Android"], "context": "\n\n\u524d\u7f6e\u304d\n2015\u5e74\u306bEclipse\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u7d42\u4e86\u3059\u308b\u3068\u306e\u3053\u3068\u3067\nAndroid Studio\u306b\u7d71\u5408\u3055\u308c\u3066\u3044\u308b\u30d3\u30eb\u30c9\u30b7\u30b9\u30c6\u30e0Gradle\u3067\u30d3\u30eb\u30c9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nGoogle\u3001Android Eclipse\u30c4\u30fc\u30eb\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u7d42\u4e86\nAn update on Eclipse Android Developer Tools\n\u30d3\u30eb\u30c9\u74b0\u5883\u3092\u5909\u3048\u3066\u3082\u304a\u91d1\u304c\u767a\u751f\u3059\u308b\u308f\u3051\u3058\u3083\u306a\u3044\u3093\u3060\u3088\u306a\u30fc\u3068\u601d\u3044\u3064\u3064\u3082\u3001\n\u3068\u308a\u3042\u3048\u305a\u53e4\u3044cocos2dx 2.2.6\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092Gradle\u3067\u30d3\u30eb\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001Android Studio\u3063\u3066\u306a\u306b\uff1fGradle\u3063\u3066\u306a\u306b\uff1fGroovy\u3063\u3066\u306a\u306b\uff1f\u3063\u3066\u72b6\u614b\u304b\u3089\u4f5c\u3063\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u3068\u3053\u308d\u3069\u3053\u308d\u304a\u304b\u3057\u306a\u70b9\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u6b8b\u5ff5\u306a\u304c\u3089\u8cea\u554f\u306f\u53d7\u3051\u4ed8\u3051\u3066\u306a\u3044\u306e\u3067\u60aa\u3057\u304b\u3089\u305a\u3002\u3002\u3002  \n\n\u524d\u63d0\u6761\u4ef6\n\u30c6\u30b9\u30c8\u74b0\u5883:\n- Android Studio 1.5.1\n- Gradle 2.8\n- Android Build Tools ver 23.0.2\n- Android gradle plugin v1.5 (com.android.tools.build:gradle:1.5.0)\nAndroid Studio\u3067\u3082\u30d3\u30eb\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u304c\n\u30e1\u30a4\u30f3\u306f\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u30b3\u30de\u30f3\u30c9\u3067\u30d3\u30eb\u30c9\u3092\u3059\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u307e\u3059\u3002\nAndroid Plugin\u306eDSL\u306f\u4e0b\u4f4d\u4e92\u63db\u6027\u304c\u306a\u3044\u3053\u3068\u304c\u591a\u304f\u3001\nGradle\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u306f\u52d5\u4f5c\u3057\u306a\u3044\u3053\u3068\u3082\u8003\u3048\u3089\u308c\u307e\u3059\u3002\nAndroid plugin\u306eNDK DSL\u3092\u4f7f\u7528\u3057\u3066\u30d3\u30eb\u30c9\u3059\u308b\u3053\u3068\u3092\u8a66\u307f\u3066\u307f\u307e\u3057\u305f\u3002\ngradle\u306ec++ DSL\u304c\u3044\u307e\u3060\u958b\u767a\u4e2d\uff08\u30a2\u30eb\u30d5\u30a1\u7248\u304f\u3089\u3044\u304b\u306a!?\uff09\u3060\u3063\u305f\u308a\nAndroud NDK gradle plugin\u304c\u307e\u3060\u5b9f\u9a13\u4e2d\u3068\u3082\u3042\u3063\u3066\u3001\u7d50\u5c40ndk-build\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nCppSourceSet - Gradle Document\n\n\u4e0b\u6e96\u5099\n\nAndroid Studio\u3067\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3088\u3046\ncocos2dx\u3067\u4f5c\u3089\u308c\u305fproj.android\u3068\u540c\u3058\u968e\u5c64\u306b\nproj.androidstudio\u3068\u3044\u3046\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u3063\u3066\u3001\u305d\u3053\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n(\u4ee5\u4e0b\u3001Android Studio\u306e\u30eb\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0\u3092proj.androidstudio\u3068\u3057\u307e\u3059)\n(\u7279\u306b\u3069\u3053\u306b\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093)\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306fActivty\u3092\u4f5c\u3089\u306a\u3044\u7a7a\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n(\u300cAdd No Activity\u300d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u9078\u629e)\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u30b3\u30d4\u30fc\u3084\u3089\u30ea\u30f3\u30af\u3084\u3089\n\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/src/main/AndroidManifest.xml\u3092\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u3082\u306e\u3067\u4e0a\u66f8\u304d\u3059\u308b\u3002\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/libs\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u3066jar\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3002(*.so\u30d5\u30a1\u30a4\u30eb\u306e\u51fa\u529b\u5148\u306a\u306e\u3067\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3088\u308a\u30d5\u30a9\u30eb\u30c0\u4f5c\u6210\u3057\u305f\u65b9\u304c\u3044\u3044\uff09\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u8a2d\u5b9a\u3059\u308b\u3002\nln -s src dst\n\n\n\n\nsrc\ndst\n\n\n\n\nproj.android/jni\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/jni\n\n\nproj.android/res\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/res\n\n\nproj.android/../Resources\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/assets\n\n\nproj.android/src/[\u30c8\u30c3\u30d7\u30c7\u30a3\u30ec\u30af\u30c8\u30ea]\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/src/[src\u3068\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u540d]\n\n\n\n\n\u5171\u6709build_common.gradle\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nndk-build\u3068\u9023\u643a\u3059\u308b\u305f\u3081\u306e\u30bf\u30b9\u30af\u306a\u3069\u5171\u901a\u3057\u3066\u4f7f\u7528\u3059\u308b\u5b9a\u7fa9\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u4ed6\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u5171\u6709\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\u306e\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u914d\u4e0b\u3088\u308a\u5171\u6709\u3067\u304d\u308b\u5834\u6240\u306b\u7f6e\u3044\u3066\u304a\u304f\u3068\u4fbf\u5229\u3002\nndk-build\u3068\u306e\u9023\u643a\u306f\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nAndroidStudio 1.5 \u3067NDK \u3092\u8a8d\u8b58\u3055\u305b\u308b\u30e1\u30e2\n\u3053\u3053\u3067\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u300cbuild_common.gradle\u300d\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u4ee5\u4e0b\u306e\u30d1\u30b9\u306e\u8a2d\u5b9a\u306b\u3082\u3067\u3066\u304f\u308b\u306e\u3067\u6ce8\u610f\u3002\n\nbuild_common.gradle\n//ndk \u30ec\u30ac\u30b7\u30fc\u30bf\u30b9\u30af\u3092\u7121\u52b9\u306b\u3059\u308b\ntasks.whenTaskAdded { task ->\n    if (task.name.indexOf(\"Ndk\")!=-1) {\n        task.enabled = false\n    }\n}\n\next {\n    ndkHome = android.ndkDirectory ==null ? \"\":android.ndkDirectory.getAbsolutePath()\n    cpuNum = Runtime.getRuntime().availableProcessors()\n\n    requiredPropertyNames = ['MY_COCOS2DX_CLASSES_LOC', 'COCOS2DX_LOC']\n}\n\nimport org.apache.tools.ant.taskdefs.condition.Os\n\ntask ndkBuildDebug() {\n\n    description \"Execute ndk-build debug mode.\"\n    onlyIf { file('jni').exists() }\n\n    inputs.files getNdkSourceFileTree()\n\n    // MEMO: ndk-build\u3057\u305f\u7d50\u679c\u3001\u3069\u3093\u306a*.so\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u304b\u306fgradle\u306e\u4e2d\u304b\u3089\u306f\u77e5\u308b\u7531\u3082\u306a\u3044\n    //       \u305d\u306e\u305f\u3081\u5e38\u306b\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306f\u66f4\u65b0\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3068\u3059\u308b\n    outputs.upToDateWhen { true }\n\n    def parentTask = project.tasks.find {\n        \":app:assembleDebug\".equalsIgnoreCase(it.path)\n    }\n    if(parentTask!=null) {\n        parentTask.dependsOn ndkBuildDebug\n    }\n\n    doLast {\n        println \"--------------- NDK build [DEBUG] ---------------\"\n        println \"project.projectDir:\" + project.projectDir\n\n        exec {\n            environment getNdkEnvironments()\n            println \"environment:\" + environment\n\n            if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n                commandLine \"${ndkHome}/ndk-build.cmd\", \"NDK_DEBUG=1\", \"-j\", cpuNum, \"NDK_LOG=1\", \"-C\", project.projectDir, getCocos2dxModulePath()\n            } else {\n                commandLine \"${ndkHome}/ndk-build\", \"NDK_DEBUG=1\", \"-j\", cpuNum, \"NDK_LOG=1\", \"-C\", project.projectDir, getCocos2dxModulePath()\n            }\n        }\n    }\n}\n\ntask ndkBuildRelease() {\n\n    description \"Execute ndk-build release mode.\"\n    onlyIf { file('jni').exists() }\n\n    inputs.files getNdkSourceFileTree()\n\n    // MEMO: ndk-build\u3057\u305f\u7d50\u679c\u3001\u3069\u3093\u306a*.so\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u304b\u306fgradle\u306e\u4e2d\u304b\u3089\u306f\u77e5\u308b\u7531\u3082\u306a\u3044\n    //       \u305d\u306e\u305f\u3081\u5e38\u306b\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306f\u66f4\u65b0\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3068\u3059\u308b\n    outputs.upToDateWhen { true }\n\n    def parentTask = project.tasks.find {\n        \":app:assembleRelease\".equalsIgnoreCase(it.path)\n    }\n    if(parentTask!=null) {\n        parentTask.dependsOn ndkBuildRelease\n    }\n\n    doLast {\n        println \"--------------- NDK build [RELEASE] ---------------\"\n        println \"project.projectDir:\" + project.projectDir\n\n        exec {\n            environment getNdkEnvironments()\n            println \"environment:\" + environment\n\n            if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n                commandLine \"${ndkHome}/ndk-build.cmd\", \"-j\", cpuNum, \"NDK_LOG=1\", \"-C\", project.projectDir, getCocos2dxModulePath()\n            } else {\n                commandLine \"${ndkHome}/ndk-build\", \"-j\", cpuNum, \"NDK_LOG=1\", \"-C\", project.projectDir, getCocos2dxModulePath()\n            }\n        }\n    }\n}\n\n\nclean.dependsOn 'ndkClean'\n\ntask ndkClean(type: Delete) {\n\n    description \"Execute ndk-build clean, and delete obj files.\"\n    onlyIf { file('jni').exists() }\n    checkRequiredPropertyNames()\n\n    inputs.files getNdkSourceFileTree()\n\n    // MEMO: ndk-build\u3057\u305f\u7d50\u679c\u3001\u3069\u3093\u306a*.so\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u304b\u306fgradle\u306e\u4e2d\u304b\u3089\u306f\u77e5\u308b\u7531\u3082\u306a\u3044\n    //       \u305d\u306e\u305f\u3081\u5e38\u306b\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306f\u66f4\u65b0\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3068\u3059\u308b\n    outputs.upToDateWhen { true }\n\n    doLast {\n        println \"--------------- NDK clean ---------------\"\n\n        exec {\n            environment getNdkEnvironments()\n            println \"environment:\" + environment\n\n            workingDir project.projectDir\n            ignoreExitValue true\n\n            if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n                commandLine \"${ndkHome}/ndk-build.cmd\", 'clean'\n            } else {\n                commandLine \"${ndkHome}/ndk-build\", \"-j\", cpuNum, \"clean\", \"NDK_LOG=1\", \"-C\", project.projectDir, getCocos2dxModulePath()\n            }\n\n            File file = new File(project.projectDir, 'obj')\n            if(file.exists()) {\n                String objDirPath = file.getAbsolutePath()\n                println \"Delete obj directory:\" + objDirPath\n                delete objDirPath\n            }\n        }\n    }\n}\n\n/**\n * \u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5b9f\u884c\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n */\ndef checkRequiredPropertyNames() {\n    requiredPropertyNames.each() { name ->\n        if(!project.hasProperty(name)) {\n            throw new StopExecutionException(\"Not found $name of property in gradle.properties.\")\n        }\n        println \"project.property[$name]:\" + project.property(name)\n    }\n}\n\n/**\n * NDK\u3067\u30d3\u30eb\u30c9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\n * \u3053\u306e\u95a2\u6570\u5185\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u76e3\u8996\u5bfe\u8c61\u3068\u306a\u308a\n * \u3044\u305a\u308c\u304b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408\u30bf\u30b9\u30af\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b\n */\ndef getNdkSourceFileTree() {\n\n    // MEMO: \u53d6\u308a\u8fbc\u3080\u62e1\u5f35\u5b50\u306e\u5b9a\u7fa9\n    def includeList = [\"**/*.h\", \"**/*.hpp\", \"**/*.c\", \"**/*.cc\", \"**/*.cpp\", \"**/*.mk\"]\n    def list = []\n\n    // MEMO: \u76e3\u8996\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3059\u308b\n    requiredPropertyNames.each() { name ->\n        list.add(file(project.property(name)))\n    }\n\n    FileTree fileTrees = fileTree(dir:new File(project.projectDir, \"jni\"), include:includeList)\n\n    list.each {\n        fileTrees += fileTree(dir:it, include:includeList)\n    }\n\n    return fileTrees\n}\n\n/**\n * Android.mk, Application.mk\u30d5\u30a1\u30a4\u30eb\u306b\u5024\u3092\u6e21\u3059\u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3059\u308b\n *\n * env['\u74b0\u5883\u5909\u6570\u540d'] = \u5024\n */\ndef getNdkEnvironments() {\n    def env = new HashMap<String, Object>();\n    env['COCOS2DX_CLASSES_LOC'] = file(MY_COCOS2DX_CLASSES_LOC)\n    return env\n}\n\ndef getCocos2dxModulePath() {\n    String path = file(COCOS2DX_LOC).getAbsolutePath()\n    String modulePath = \"NDK_MODULE_PATH=\" + path + \":\" + path + \"/cocos2dx/platform/third_party/android/prebuilt\"\n    return modulePath\n}\n\n//-----------------------------------------------------------------------------\n// \u7f72\u540d\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u51e6\u7406\n//-----------------------------------------------------------------------------\nimport groovy.swing.SwingBuilder\n\n// MEMO: https://coderwall.com/p/zrdsmq/signing-configs-with-gradle-android\n//       \u4e0a\u8a18\u30b5\u30a4\u30c8\u3067\u306fgradle.taskGraph.whenReady()\u3067\u5b9f\u884c\u3057\u3066\u3044\u305f\u304c\u3001\n//       \u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5b9f\u884c\u3057\u3066\u3082\u51e6\u7406\u304c\u53cd\u6620\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3002\n\ngradle.afterProject { proj ->\n    println \"--------------- gradle.afterProject ---------------\"\n    println \"gradle.startParameter.taskNames:\" + gradle.startParameter.taskNames\n\n    boolean isFind = false\n    def taskNames = gradle.startParameter.taskNames.findAll() { it.indexOf('build')!=-1 }\n    taskNames += gradle.startParameter.taskNames.findAll() { it.indexOf('assembleRelease')!=-1 }\n\n    if(taskNames!=null && taskNames.size()>0) isFind = true\n\n    if(isFind) {\n        tasks.find() { task ->\n            if(task.path==':app:assembleRelease')\n            {\n                if(proj.android.signingConfigs.release.storePassword!=null &&\n                   proj.android.signingConfigs.release.storePassword.length()>0) {\n                    println \"Already set storePassword at \" + task.path\n                    return false;\n                }\n\n                if(proj.android.signingConfigs.release.keyPassword!=null &&\n                   proj.android.signingConfigs.release.keyPassword.length()>0) {\n                    println \"Already set keyPassword at \" + task.path\n                    return false;\n                }\n\n                def storePass = ''\n                def keyPass = ''\n                Console console = System.console()\n                println \"Match ${task.path}. console:\" + console\n\n                if(console == null) {\n                    new SwingBuilder().edt {\n                        dialog(modal: true,\n                                title: 'Enter password',\n                                alwaysOnTop: true,\n                                resizable: false,\n                                locationRelativeTo: null,\n                                pack: true,\n                                show: true) {\n                            vbox { // Put everything below each other\n                                label(text: \"Please enter store passphrase:\")\n                                def input1 = passwordField()\n                                label(text: \"Please enter key passphrase:\")\n                                def input2 = passwordField()\n                                button(defaultButton: true,\n                                        text: 'OK',\n                                        actionPerformed: {\n                                            storePass = input1.password;\n                                            keyPass = input2.password;\n                                            dispose();\n                                        })\n                            }\n                        }\n                    }\n                } else {\n                    storePass = console.readPassword(\"\\nPlease enter store passphrase: \")\n                    keyPass = console.readPassword(\"\\nPlease enter key passphrase: \")\n                }\n\n                if(storePass.size() <= 0 || keyPass.size() <= 0) {\n                    throw new InvalidUserDataException(\"You must enter the passwords to proceed.\")\n                }\n\n                storePass = new String(storePass)\n                keyPass = new String(keyPass)\n\n                proj.android.signingConfigs.release.storePassword = storePass\n                proj.android.signingConfigs.release.keyPassword = keyPass\n                return true;\n            }\n        }\n    }\n}\n\n\n\n\u6ce8) \u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u51e6\u7406\u306f\u300cbuild\u300d\u300cassembleRelease\u300d\u30bf\u30b9\u30af\u306e\u307f\u3067\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u300cassemble\u300d\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\n\ngradle.properties\u306e\u8a2d\u5b9a\ngradle.properties\u306b\u5909\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u3068build.gradle\u5185\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30d1\u30b9\u306f\u7d76\u5bfe\u30d1\u30b9\u3092\u8a2d\u5b9a\u3057\u3066\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u76f8\u5bfe\u30d1\u30b9\u306f\u78ba\u8a8d\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/gradle.properties\nCOCOS2DX_LOC=[cocos2dx\u306e\u30eb\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0]\nMY_COCOS2DX_CLASSES_LOC=[proj.android/../Classes\u306e\u30d1\u30b9]\nMY_BUILD_COMMON_GRADLE=[\u5148\u307b\u3069\u8a2d\u5b9a\u3057\u305fbuild_common.gradle\u306e\u30d1\u30b9(\u30d5\u30a1\u30a4\u30eb\u540d\u3082\u542b\u3080)]\n\n\n\nlocal.properties\u306e\u8a2d\u5b9a\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/\u306b\u3042\u308blocal.properties\u3092\u7de8\u96c6\u3059\u308b\u3002\n\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/local.properties\nndk.dir=[Android NDK\u306e\u30d1\u30b9]\nsdk.dir=[Android SDK\u306e\u30d1\u30b9]\n\nCOCOS2DX_JAVA_LOC=[cocos2dx\u306e\u30eb\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0]/cocos2dx/platform/android/java\n\n# \u4f8b) \u4ed6\u793eSDK\u3092Eclipse\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u304d\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\nMY_LOBI_CORE_LIBRARY_LOC=[\u4ed6\u793eSDK\u306eEclipse\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d1\u30b9]\nMY_LOBI_RANKING_LIBRARY_LOC=[\u4ed6\u793eSDK\u306eEclipse\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d1\u30b9]\n\n\n\n\u30e6\u30fc\u30b6\u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308bgradle.properties\u306e\u8a2d\u5b9a\n~/.gradle/gradle.properties\u306e\u7de8\u96c6\u3002\n\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u30ea\u30b9\u30c8\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u5168\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u53cd\u6620\u3055\u308c\u308b\u306e\u3067\u6ce8\u610f\u3002\n\ngradle.properties\n# gradle\u3092daemon\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3002\n# \u5b9f\u884c\u901f\u5ea6\u304c\u901f\u304f\u306a\u308b\u306e\u3067\u30aa\u30b9\u30b9\u30e1\norg.gradle.daemon=true\n\nMY_KEYSTORE_DEBUG_LOC=[\u30e6\u30fc\u30b6\u30d5\u30a9\u30eb\u30c0]/.android/debug.keystore\nMY_KEYSTORE_RELEASE_LOC=[\u7f72\u540d\u7528\u306e\u30ad\u30fc\u30d5\u30a1\u30a4\u30eb \u4f8b)android_rsa]\nMY_KEYSTORE_RELEASE_ALIAS=[\u30ad\u30fc\u30b9\u30c8\u30a2\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u540d]\n\n\n\nsettings.gradle\u306e\u8a2d\u5b9a\nlocal.properties\u304b\u3089\u30d1\u30b9\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/settings.gradle\ninclude ':app'\ninclude ':cocos2dx'\ninclude ':LobiCore'\ninclude ':LobiRanking'\n\ndef getLoaclProperties(String defineName) {\n    Properties properties = new Properties()\n    properties.load(new File(rootDir.absolutePath + \"/local.properties\").newDataInputStream())\n    def defineValue = properties.getProperty(defineName, null)\n    if (defineValue == null) {\n        throw new GradleException(\n                \"Module location not found. Define location with '$defineName' in the local.properties file!\")\n    }\n    println \"defineName:\" + defineName + \", defineValue:\" + defineValue + \" at local.properties.\"\n    return defineValue\n}\n\nproject(':cocos2dx').projectDir = new File(getLoaclProperties('COCOS2DX_JAVA_LOC'))\n\n// \u4f8b) \u4ed6\u793eSDK\u3092Eclipse\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u304d\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\nproject(':LobiCore').projectDir = new File(getLoaclProperties('MY_LOBI_CORE_LIBRARY_LOC'))\nproject(':LobiRanking').projectDir = new File(getLoaclProperties('MY_LOBI_RANKING_LIBRARY_LOC'))\n\n\n\nbuild.gradle\u306e\u8a2d\u5b9a\nbuild.gradle\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3001\u4e21\u65b9\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u306ebuild.gradle\u3092\u8a2d\u5b9a\ncocos2dx\u306eAndroid\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b\u3002\n[cocos2dx\u30eb\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0]/cocos2dx/platform/android/java\n\u4e0a\u8a18\u30d1\u30b9\u306bbuild.gradle\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002\n\nbuild.gradle\n// MEMO: \u30e9\u30a4\u30d6\u30e9\u30ea\u7528\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\napply plugin: 'com.android.library'\n\nandroid {\n    compileSdkVersion 19\n    buildToolsVersion \"23.0.2\"\n\n    defaultConfig {\n        minSdkVersion 8\n        targetSdkVersion 23\n        versionCode 1\n        versionName \"1.0\"\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_7\n        targetCompatibility JavaVersion.VERSION_1_7\n    }\n\n    lintOptions {\n        abortOnError false\n    }\n\n    buildTypes {\n        debug {\n            debuggable true\n        }\n        release {\n            debuggable false\n            jniDebuggable false\n            zipAlignEnabled true\n            minifyEnabled false\n            proguardFile getDefaultProguardFile('proguard-android.txt')\n        }\n    }\n\n    sourceSets {\n          main {\n               manifest.srcFile 'AndroidManifest.xml'\n               java {\n                   srcDirs = ['src']\n                   includes = ['**/*.java']\n               }\n//               resources.srcDirs = ['src']\n//               aidl.srcDirs = ['src']\n//               renderscript.srcDirs = ['src']\n               res.srcDirs = ['res']\n               assets.srcDirs = ['assets']\n               jniLibs.srcDirs = ['libs']\n          }\n    }\n}\n\ndependencies {\n}\n\n\nEclipse\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u305f\u4ed6\u793eSDK\u306b\u5bfe\u3057\u3066\u3082\u4e0a\u8a18build.gradle\u3092\u4f5c\u6210\u3059\u308b\u3002\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/settings.gradle\u306b\u5bfe\u3057\u3066\u3082\u30d1\u30b9\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u5fd8\u308c\u305a\u306b\u3002\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u306ebuild.gradle\u3092\u8a2d\u5b9a\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app\u914d\u4e0b\u306b\u3042\u308bbuild.gradle\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002\n\u5fc5\u8981\u306a\u8a2d\u5b9a\u306f\u4e00\u90e8\u3067\u3059\u3002\n\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4ed6\u306b\u3082\u3042\u308b\u306e\u3067\u6ce8\u610f\uff01\n\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/build.gradle\napply plugin: 'com.android.application'\n\n// \u2193 \u3053\u3053\u304b\u3089\ndef checkRequiredPropertyNames() {\n    def requiredPropertyNames = ['MY_BUILD_COMMON_GRADLE', 'MY_KEYSTORE_DEBUG_LOC', 'MY_KEYSTORE_RELEASE_LOC', 'MY_KEYSTORE_RELEASE_ALIAS']\n\n    requiredPropertyNames.each() { name ->\n        if(!project.hasProperty(name)) {\n            throw new StopExecutionException(\"Not found '$name' of property in gradle.properties.\")\n        }\n    }\n}\ncheckRequiredPropertyNames()\n\napply from:file(MY_BUILD_COMMON_GRADLE)\n// \u2191 \u3053\u3053\u307e\u3067\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002\u4e0b\u306b\u3082\u307e\u3060\u3042\u308a\u307e\u3059\u3002\n\nrepositories {\n}\n\nandroid {\n    compileSdkVersion 19\n\n    // MEMO: android/sdk/build-tools\u306e\u4e0b\u306b\u3042\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\n    buildToolsVersion \"23.0.2\"\n\n    defaultConfig {\n        applicationId \"[\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3ID]\"\n        minSdkVersion 10\n        targetSdkVersion 23\n        versionCode 1\n        versionName \"1.0\"\n\n        // apk\u30d5\u30a1\u30a4\u30eb\u306e\u30d9\u30fc\u30b9\u540d\n        project.ext.set(\"archivesBaseName\", \"[apk\u306e\u30d9\u30fc\u30b9\u540d]\")\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_7\n        targetCompatibility JavaVersion.VERSION_1_7\n    }\n\n    lintOptions {\n        abortOnError false\n        disable 'MissingTranslation' // lint\u306e\u8b66\u544a\u306e\u6291\u5236\n    }\n\n// \u2193 \u3053\u3053\u304b\u3089 (\u5fc5\u8981\u306a\u306e\u306fsigningConfigs\u51e6\u7406\u306e\u90e8\u5206\u3067\u3059)\n    // \u7f72\u540d\u8a2d\u5b9a\u306e\u8aad\u307f\u8fbc\u307f\n    signingConfigs {\n        debug {\n            // MEMO: \u3053\u308c\u306f\u8a2d\u5b9a\u3057\u306a\u3044\u3067\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044\n            storeFile file(MY_KEYSTORE_DEBUG_LOC)\n            storePassword \"android\"\n            keyAlias \"androiddebugkey\"\n            keyPassword \"android\"\n        }\n        release {\n            storeFile file(MY_KEYSTORE_RELEASE_LOC)\n            keyAlias MY_KEYSTORE_RELEASE_ALIAS\n        }\n    }\n\n    buildTypes {\n        debug {\n            debuggable true\n            jniDebuggable true\n            zipAlignEnabled false\n            signingConfig signingConfigs.debug\n            minifyEnabled false\n        }\n        release {\n            debuggable false\n            jniDebuggable false\n            zipAlignEnabled true\n            signingConfig signingConfigs.release\n\n            // MEMO: Google Play Services\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\n            //       Proguard\u3092\u6709\u52b9\u306b\u3059\u308b\u3068Dex\u51e6\u7406\u3067SimException\u3092\u767a\u751f\u3055\u305b\u308b\u305f\u3081Proguard\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\n            //       https://code.google.com/p/android/issues/detail?id=187483\n            minifyEnabled false\n            proguardFile getDefaultProguardFile('proguard-android.txt')\n            proguardFile file('proguard-rules.pro')\n        }\n    }\n// \u2191 \u3053\u3053\u307e\u3067\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n    sourceSets {\n        main {\n            java {\n                srcDirs = ['src']\n                includes = ['**/*.java']\n            }\n//            resources.srcDirs = ['src']\n//            aidl.srcDirs = ['src']\n//            renderscript.srcDirs = ['src']\n            res.srcDirs = ['res']\n            assets.srcDirs = ['assets']\n\n            jni.srcDirs = ['jni']\n            jniLibs {\n                srcDirs = ['libs']\n                includes = ['**/*.so']\n            }\n        }\n    }\n\n    packagingOptions {\n        exclude 'META-INF/DEPENDENCIES'\n        exclude 'META-INF/INDEX.LIST'\n        exclude 'META-INF/LICENSE'\n        exclude 'META-INF/NOTICE'\n    }\n}\n\n// MEMO: *\u304c\u4f7f\u7528\u3067\u304d\u306a\u3044\nconfigurations.compile.exclude module:'support-v4'\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n\n    compile 'com.android.support:support-v4:+'\n//    compile 'com.android.support:appcompat-v7:23.1.1'\n}\n\n\n\nAndroid.mk\u306e\u8a2d\u5b9a\u4f8b\nbuild_common.gradle\u30d5\u30a1\u30a4\u30eb\u3067\u8a2d\u5b9a\u3057\u305f\u74b0\u5883\u5909\u6570\u3092Android.mk\u3067\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u4e0b\u8a18\u306fAndroid.mk\u304b\u3089\u74b0\u5883\u5909\u6570\u3092\u8aad\u307f\u8fbc\u3080\u51e6\u7406\u3002\n\nAndroid.mk\n$(info COCOS2DX_CLASSES_LOC:$(COCOS2DX_CLASSES_LOC))\n\nifeq ($(MY_COCOS2DX_CLASSES_LOC),)\n# \u74b0\u5883\u5909\u6570\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306e\u51e6\u7406\nelse\n    LOCAL_SRC_FILES += $(shell find $(MY_COCOS2DX_CLASSES_LOC) -name \"*.c\")\n    LOCAL_SRC_FILES += $(shell find $(MY_COCOS2DX_CLASSES_LOC) -name \"*.cpp\")\nendif\n\n\n\n\n\u30d3\u30eb\u30c9\u3092\u5b9f\u884c\u3059\u308b\n\nAndroid Studio\u304b\u3089Gradle Sync\u3092\u5b9f\u884c\u3059\u308b\n\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u7b49\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u3059\u308b\u305f\u3081Android Studio\u3067Gradle Sync\u3092\u5b9f\u884c\u3059\u308b\u3002\n(\u30b3\u30de\u30f3\u30c9\u3067\u3082\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3051\u3069...)\nTools -> Android -> Sync Project with Gradle Files\n\n\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u5b9f\u884c\n\u307e\u305a\u306f\u30c9\u30e9\u30a4\u30e9\u30f3\u3092\u5b9f\u884c\u3059\u308b\u3002(\u5f15\u6570 -m)\n\u30bf\u30b9\u30af\u306e\u8a2d\u5b9a\u306b\u8aa4\u308a\u304c\u306a\u3044\u304b\u78ba\u8a8d\u3059\u308b\u3002\n$ ./gradlew -m build\n\n\u30a8\u30e9\u30fc\u304c\u3042\u308c\u3070\u30a8\u30e9\u30fc\u3092\u3064\u3076\u3059\u3002\n\u30a8\u30e9\u30fc\u304c\u306a\u3051\u308c\u3070\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3002\n(\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u306fclean\u3068check\u3092\u5408\u308f\u305b\u3066\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059)\n$ ./gradlew clean check assembleRelease\n\n\u4e0b\u306e\u3088\u3046\u306a\u7f72\u540d\u7528\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u30c0\u30a4\u30a2\u30ed\u30b0\u307e\u305f\u306f\u30bf\u30fc\u30df\u30ca\u30eb\u5185\u3067\u554f\u3044\u5408\u308f\u305b\u304c\u3042\u308c\u3070\u6210\u529f\u3002\n\u30d5\u30eb\u30a6\u30a3\u30f3\u30c9\u30a6\u3067\u306a\u304f\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u753b\u9762\u4e0a\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\uff01\n\n\u30ed\u30b0\u3092\u53d6\u308a\u306a\u304c\u3089\u30d3\u30eb\u30c9\u3059\u308b\u3068\u304d\n./gradlew clean check assembleRelease 2>&1 | tee ./build.log\n\n\n\u78ba\u8a8d\u3068\u4fbf\u5229\u30b3\u30de\u30f3\u30c9\n\napk\u30d5\u30a1\u30a4\u30eb\u306e\u78ba\u8a8d\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/build/outputs/apk\u30d5\u30a9\u30eb\u30c0\u306bapk\u30d5\u30a1\u30a4\u30eb\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3002\n\n\u7f72\u540d\u306e\u78ba\u8a8d\n$ keytool -list -printcert -jarfile [\u30d5\u30a1\u30a4\u30eb\u540d].apk\n\n\nzipAlign\u306e\u78ba\u8a8d\n$ [Android SDK\u306e\u30eb\u30fc\u30c8\u30d1\u30b9]/build-tools/[\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3]/zipalign -c -v 4 [\u30d5\u30a1\u30a4\u30eb\u540d].apk | grep BAD\n\nBAD\u5217\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306fzipAlign\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u306a\u3044\u3002\nbuild.gradle\u306e\u78ba\u8a8d\u3092\u3002\n\ngradle\u306e\u30bf\u30b9\u30af\u3092\u5f37\u5236\u5b9f\u884c\u3055\u305b\u308b\n./gradlew --rerun-tasks [\u30bf\u30b9\u30af\u540d]\n\n\u4f8b)\n./gradlew --rerun-tasks assembleRelease\n\n\n\u30bf\u30b9\u30af\u306e\u4e00\u89a7\u3092\u8868\u793a\u3059\u308b\n./gradlew tasks\n\n\n\u4f9d\u5b58\u95a2\u4fc2\u306e\u8abf\u67fb\n./gradlew app:dependencies\n\n\n\u3042\u3068\u304c\u304d\n\u3053\u308c\u307e\u3067\u306e\u8a2d\u5b9a\u3068\u304a\u308aGradle\u306f\u8a2d\u5b9a\u5185\u5bb9\u304c\u8907\u96d1\u306b\u306a\u308a\u304c\u3061\u306a\u6c17\u304c\u3057\u3066\u3044\u307e\u3059\u3002\nGoogle\u306f2016\u5e74\u672b\u306b\u65b0\u3057\u3044\u30d3\u30eb\u30c9\u30b7\u30b9\u30c6\u30e0Bazel\u3092\u30ea\u30ea\u30fc\u30b9\u4e88\u5b9a  \nBazel x Android NDK \u3067\u30d3\u30eb\u30c9\u3059\u308b (\u3064\u3044\u3067\u306biOS\u3082)\nGoogle\u304c\u6700\u8fd1\u3060\u3057\u3066\u3044\u308bNDK\u7528\u306eplugin\u306f\u672a\u3060\u5b9f\u9a13\u4e2d  \nExperimental Plugin User Guide\n\u30d3\u30eb\u30c9\u30b7\u30b9\u30c6\u30e0\u306f\u7a7a\u6c17\u307f\u305f\u3044\u5b58\u5728\u306b\u306a\u308a\u3064\u3064\u3042\u308b\u306e\u3067\u3001\n\u67d4\u8edf\u6027\u304c\u306a\u304f\u3066\u3082\u5236\u9650\u304c\u5f37\u304f\u3066\u76f4\u611f\u7684\u306b\u7de8\u96c6\u3067\u304d\u308b\u3082\u306e\u304c\u3044\u3044\u3067\u3059\u3088\u306d\uff01\n\u8abf\u67fb\u3068\u5b9f\u9a13\u306e\u6642\u9593\u304c\u7d50\u69cb\u304b\u304b\u3063\u3061\u3083\u3063\u305f\u304b\u3089\u3001\u304a\u91d1\u3061\u3087\u30fc\u3060\u3044\uff01  \n#\u524d\u7f6e\u304d\n2015\u5e74\u306bEclipse\u306e\u30b5\u30dd\u30fc\u30c8\u304c\u7d42\u4e86\u3059\u308b\u3068\u306e\u3053\u3068\u3067\nAndroid Studio\u306b\u7d71\u5408\u3055\u308c\u3066\u3044\u308b\u30d3\u30eb\u30c9\u30b7\u30b9\u30c6\u30e0Gradle\u3067\u30d3\u30eb\u30c9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n[Google\u3001Android Eclipse\u30c4\u30fc\u30eb\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u7d42\u4e86](http://www.infoq.com/jp/news/2015/07/google-android-eclipse)\n[An update on Eclipse Android Developer Tools](http://android-developers.blogspot.jp/2015/06/an-update-on-eclipse-android-developer.html)\n\n\u30d3\u30eb\u30c9\u74b0\u5883\u3092\u5909\u3048\u3066\u3082\u304a\u91d1\u304c\u767a\u751f\u3059\u308b\u308f\u3051\u3058\u3083\u306a\u3044\u3093\u3060\u3088\u306a\u30fc\u3068\u601d\u3044\u3064\u3064\u3082\u3001\n\u3068\u308a\u3042\u3048\u305a\u53e4\u3044cocos2dx 2.2.6\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092Gradle\u3067\u30d3\u30eb\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u3001Android Studio\u3063\u3066\u306a\u306b\uff1fGradle\u3063\u3066\u306a\u306b\uff1fGroovy\u3063\u3066\u306a\u306b\uff1f\u3063\u3066\u72b6\u614b\u304b\u3089\u4f5c\u3063\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u3068\u3053\u308d\u3069\u3053\u308d\u304a\u304b\u3057\u306a\u70b9\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u8cea\u554f\u306f\u53d7\u3051\u4ed8\u3051\u3066\u306a\u3044\u306e\u3067\u60aa\u3057\u304b\u3089\u305a\u3002\u3002\u3002 :sweat: \n\n\n#\u524d\u63d0\u6761\u4ef6\n\u30c6\u30b9\u30c8\u74b0\u5883:\n- Android Studio 1.5.1\n- Gradle 2.8\n- Android Build Tools ver 23.0.2\n- Android gradle plugin v1.5 (com.android.tools.build:gradle:1.5.0)\n\nAndroid Studio\u3067\u3082\u30d3\u30eb\u30c9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u304c\n\u30e1\u30a4\u30f3\u306f\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u30b3\u30de\u30f3\u30c9\u3067\u30d3\u30eb\u30c9\u3092\u3059\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u307e\u3059\u3002\n\nAndroid Plugin\u306eDSL\u306f\u4e0b\u4f4d\u4e92\u63db\u6027\u304c\u306a\u3044\u3053\u3068\u304c\u591a\u304f\u3001\nGradle\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u3063\u3066\u306f\u52d5\u4f5c\u3057\u306a\u3044\u3053\u3068\u3082\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\nAndroid plugin\u306eNDK DSL\u3092\u4f7f\u7528\u3057\u3066\u30d3\u30eb\u30c9\u3059\u308b\u3053\u3068\u3092\u8a66\u307f\u3066\u307f\u307e\u3057\u305f\u3002\ngradle\u306ec++ DSL\u304c\u3044\u307e\u3060\u958b\u767a\u4e2d\uff08\u30a2\u30eb\u30d5\u30a1\u7248\u304f\u3089\u3044\u304b\u306a!?\uff09\u3060\u3063\u305f\u308a\nAndroud NDK gradle plugin\u304c\u307e\u3060\u5b9f\u9a13\u4e2d\u3068\u3082\u3042\u3063\u3066\u3001\u7d50\u5c40ndk-build\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n[CppSourceSet - Gradle Document](https://docs.gradle.org/current/dsl/org.gradle.language.cpp.CppSourceSet.html)\n\n\n#\u4e0b\u6e96\u5099\n##Android Studio\u3067\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3088\u3046\ncocos2dx\u3067\u4f5c\u3089\u308c\u305fproj.android\u3068\u540c\u3058\u968e\u5c64\u306b\nproj.androidstudio\u3068\u3044\u3046\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u3063\u3066\u3001\u305d\u3053\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n(\u4ee5\u4e0b\u3001Android Studio\u306e\u30eb\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0\u3092proj.androidstudio\u3068\u3057\u307e\u3059)\n(\u7279\u306b\u3069\u3053\u306b\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093)\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306fActivty\u3092\u4f5c\u3089\u306a\u3044\u7a7a\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n(\u300cAdd No Activity\u300d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u9078\u629e)\n\n\n##\u30d5\u30a1\u30a4\u30eb\u306e\u30b3\u30d4\u30fc\u3084\u3089\u30ea\u30f3\u30af\u3084\u3089\n\n- proj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/src/main/AndroidManifest.xml\u3092\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u3082\u306e\u3067\u4e0a\u66f8\u304d\u3059\u308b\u3002\n- proj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/libs\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3057\u3066jar\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30d4\u30fc\u3059\u308b\u3002(*.so\u30d5\u30a1\u30a4\u30eb\u306e\u51fa\u529b\u5148\u306a\u306e\u3067\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3088\u308a\u30d5\u30a9\u30eb\u30c0\u4f5c\u6210\u3057\u305f\u65b9\u304c\u3044\u3044\uff09\n\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n```shell-session:\nln -s src dst\n```\n\n| src | dst |\n|:------------|:------------|:------------|\n| proj.android/jni | proj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/jni |\n| proj.android/res | proj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/res |\n| proj.android/../Resources | proj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/assets |\n| proj.android/src/[\u30c8\u30c3\u30d7\u30c7\u30a3\u30ec\u30af\u30c8\u30ea] | proj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/src/[src\u3068\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u540d] |\n\n\n##\u5171\u6709build_common.gradle\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\nndk-build\u3068\u9023\u643a\u3059\u308b\u305f\u3081\u306e\u30bf\u30b9\u30af\u306a\u3069\u5171\u901a\u3057\u3066\u4f7f\u7528\u3059\u308b\u5b9a\u7fa9\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u4ed6\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3068\u5171\u6709\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\u306e\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5834\u6240\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u914d\u4e0b\u3088\u308a\u5171\u6709\u3067\u304d\u308b\u5834\u6240\u306b\u7f6e\u3044\u3066\u304a\u304f\u3068\u4fbf\u5229\u3002\n\nndk-build\u3068\u306e\u9023\u643a\u306f\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n[AndroidStudio 1.5 \u3067NDK \u3092\u8a8d\u8b58\u3055\u305b\u308b\u30e1\u30e2](http://d.hatena.ne.jp/kimukou_26/20151111/p1)\n\n\u3053\u3053\u3067\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u300cbuild_common.gradle\u300d\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u4ee5\u4e0b\u306e\u30d1\u30b9\u306e\u8a2d\u5b9a\u306b\u3082\u3067\u3066\u304f\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n```groovy:build_common.gradle\n//ndk \u30ec\u30ac\u30b7\u30fc\u30bf\u30b9\u30af\u3092\u7121\u52b9\u306b\u3059\u308b\ntasks.whenTaskAdded { task ->\n    if (task.name.indexOf(\"Ndk\")!=-1) {\n        task.enabled = false\n    }\n}\n\next {\n    ndkHome = android.ndkDirectory ==null ? \"\":android.ndkDirectory.getAbsolutePath()\n    cpuNum = Runtime.getRuntime().availableProcessors()\n\n    requiredPropertyNames = ['MY_COCOS2DX_CLASSES_LOC', 'COCOS2DX_LOC']\n}\n\nimport org.apache.tools.ant.taskdefs.condition.Os\n\ntask ndkBuildDebug() {\n\n    description \"Execute ndk-build debug mode.\"\n    onlyIf { file('jni').exists() }\n\n    inputs.files getNdkSourceFileTree()\n\n    // MEMO: ndk-build\u3057\u305f\u7d50\u679c\u3001\u3069\u3093\u306a*.so\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u304b\u306fgradle\u306e\u4e2d\u304b\u3089\u306f\u77e5\u308b\u7531\u3082\u306a\u3044\n    //       \u305d\u306e\u305f\u3081\u5e38\u306b\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306f\u66f4\u65b0\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3068\u3059\u308b\n    outputs.upToDateWhen { true }\n\n    def parentTask = project.tasks.find {\n        \":app:assembleDebug\".equalsIgnoreCase(it.path)\n    }\n    if(parentTask!=null) {\n        parentTask.dependsOn ndkBuildDebug\n    }\n\n    doLast {\n        println \"--------------- NDK build [DEBUG] ---------------\"\n        println \"project.projectDir:\" + project.projectDir\n\n        exec {\n            environment getNdkEnvironments()\n            println \"environment:\" + environment\n\n            if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n                commandLine \"${ndkHome}/ndk-build.cmd\", \"NDK_DEBUG=1\", \"-j\", cpuNum, \"NDK_LOG=1\", \"-C\", project.projectDir, getCocos2dxModulePath()\n            } else {\n                commandLine \"${ndkHome}/ndk-build\", \"NDK_DEBUG=1\", \"-j\", cpuNum, \"NDK_LOG=1\", \"-C\", project.projectDir, getCocos2dxModulePath()\n            }\n        }\n    }\n}\n\ntask ndkBuildRelease() {\n\n    description \"Execute ndk-build release mode.\"\n    onlyIf { file('jni').exists() }\n\n    inputs.files getNdkSourceFileTree()\n\n    // MEMO: ndk-build\u3057\u305f\u7d50\u679c\u3001\u3069\u3093\u306a*.so\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u304b\u306fgradle\u306e\u4e2d\u304b\u3089\u306f\u77e5\u308b\u7531\u3082\u306a\u3044\n    //       \u305d\u306e\u305f\u3081\u5e38\u306b\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306f\u66f4\u65b0\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3068\u3059\u308b\n    outputs.upToDateWhen { true }\n\n    def parentTask = project.tasks.find {\n        \":app:assembleRelease\".equalsIgnoreCase(it.path)\n    }\n    if(parentTask!=null) {\n        parentTask.dependsOn ndkBuildRelease\n    }\n\n    doLast {\n        println \"--------------- NDK build [RELEASE] ---------------\"\n        println \"project.projectDir:\" + project.projectDir\n\n        exec {\n            environment getNdkEnvironments()\n            println \"environment:\" + environment\n\n            if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n                commandLine \"${ndkHome}/ndk-build.cmd\", \"-j\", cpuNum, \"NDK_LOG=1\", \"-C\", project.projectDir, getCocos2dxModulePath()\n            } else {\n                commandLine \"${ndkHome}/ndk-build\", \"-j\", cpuNum, \"NDK_LOG=1\", \"-C\", project.projectDir, getCocos2dxModulePath()\n            }\n        }\n    }\n}\n\n\nclean.dependsOn 'ndkClean'\n\ntask ndkClean(type: Delete) {\n\n    description \"Execute ndk-build clean, and delete obj files.\"\n    onlyIf { file('jni').exists() }\n    checkRequiredPropertyNames()\n\n    inputs.files getNdkSourceFileTree()\n\n    // MEMO: ndk-build\u3057\u305f\u7d50\u679c\u3001\u3069\u3093\u306a*.so\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\u304b\u306fgradle\u306e\u4e2d\u304b\u3089\u306f\u77e5\u308b\u7531\u3082\u306a\u3044\n    //       \u305d\u306e\u305f\u3081\u5e38\u306b\u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306f\u66f4\u65b0\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3068\u3059\u308b\n    outputs.upToDateWhen { true }\n\n    doLast {\n        println \"--------------- NDK clean ---------------\"\n\n        exec {\n            environment getNdkEnvironments()\n            println \"environment:\" + environment\n\n            workingDir project.projectDir\n            ignoreExitValue true\n\n            if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n                commandLine \"${ndkHome}/ndk-build.cmd\", 'clean'\n            } else {\n                commandLine \"${ndkHome}/ndk-build\", \"-j\", cpuNum, \"clean\", \"NDK_LOG=1\", \"-C\", project.projectDir, getCocos2dxModulePath()\n            }\n\n            File file = new File(project.projectDir, 'obj')\n            if(file.exists()) {\n                String objDirPath = file.getAbsolutePath()\n                println \"Delete obj directory:\" + objDirPath\n                delete objDirPath\n            }\n        }\n    }\n}\n\n/**\n * \u3053\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5b9f\u884c\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n */\ndef checkRequiredPropertyNames() {\n    requiredPropertyNames.each() { name ->\n        if(!project.hasProperty(name)) {\n            throw new StopExecutionException(\"Not found $name of property in gradle.properties.\")\n        }\n        println \"project.property[$name]:\" + project.property(name)\n    }\n}\n\n/**\n * NDK\u3067\u30d3\u30eb\u30c9\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u30bb\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\n * \u3053\u306e\u95a2\u6570\u5185\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u76e3\u8996\u5bfe\u8c61\u3068\u306a\u308a\n * \u3044\u305a\u308c\u304b\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5909\u66f4\u3055\u308c\u305f\u5834\u5408\u30bf\u30b9\u30af\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b\n */\ndef getNdkSourceFileTree() {\n\n    // MEMO: \u53d6\u308a\u8fbc\u3080\u62e1\u5f35\u5b50\u306e\u5b9a\u7fa9\n    def includeList = [\"**/*.h\", \"**/*.hpp\", \"**/*.c\", \"**/*.cc\", \"**/*.cpp\", \"**/*.mk\"]\n    def list = []\n\n    // MEMO: \u76e3\u8996\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3059\u308b\n    requiredPropertyNames.each() { name ->\n        list.add(file(project.property(name)))\n    }\n\n    FileTree fileTrees = fileTree(dir:new File(project.projectDir, \"jni\"), include:includeList)\n\n    list.each {\n        fileTrees += fileTree(dir:it, include:includeList)\n    }\n\n    return fileTrees\n}\n\n/**\n * Android.mk, Application.mk\u30d5\u30a1\u30a4\u30eb\u306b\u5024\u3092\u6e21\u3059\u74b0\u5883\u5909\u6570\u3092\u8a2d\u5b9a\u3059\u308b\n *\n * env['\u74b0\u5883\u5909\u6570\u540d'] = \u5024\n */\ndef getNdkEnvironments() {\n    def env = new HashMap<String, Object>();\n    env['COCOS2DX_CLASSES_LOC'] = file(MY_COCOS2DX_CLASSES_LOC)\n    return env\n}\n\ndef getCocos2dxModulePath() {\n    String path = file(COCOS2DX_LOC).getAbsolutePath()\n    String modulePath = \"NDK_MODULE_PATH=\" + path + \":\" + path + \"/cocos2dx/platform/third_party/android/prebuilt\"\n    return modulePath\n}\n\n//-----------------------------------------------------------------------------\n// \u7f72\u540d\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u51e6\u7406\n//-----------------------------------------------------------------------------\nimport groovy.swing.SwingBuilder\n\n// MEMO: https://coderwall.com/p/zrdsmq/signing-configs-with-gradle-android\n//       \u4e0a\u8a18\u30b5\u30a4\u30c8\u3067\u306fgradle.taskGraph.whenReady()\u3067\u5b9f\u884c\u3057\u3066\u3044\u305f\u304c\u3001\n//       \u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u5b9f\u884c\u3057\u3066\u3082\u51e6\u7406\u304c\u53cd\u6620\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3002\n\ngradle.afterProject { proj ->\n    println \"--------------- gradle.afterProject ---------------\"\n    println \"gradle.startParameter.taskNames:\" + gradle.startParameter.taskNames\n\n    boolean isFind = false\n    def taskNames = gradle.startParameter.taskNames.findAll() { it.indexOf('build')!=-1 }\n    taskNames += gradle.startParameter.taskNames.findAll() { it.indexOf('assembleRelease')!=-1 }\n\n    if(taskNames!=null && taskNames.size()>0) isFind = true\n\n    if(isFind) {\n        tasks.find() { task ->\n            if(task.path==':app:assembleRelease')\n            {\n                if(proj.android.signingConfigs.release.storePassword!=null &&\n                   proj.android.signingConfigs.release.storePassword.length()>0) {\n                    println \"Already set storePassword at \" + task.path\n                    return false;\n                }\n\n                if(proj.android.signingConfigs.release.keyPassword!=null &&\n                   proj.android.signingConfigs.release.keyPassword.length()>0) {\n                    println \"Already set keyPassword at \" + task.path\n                    return false;\n                }\n\n                def storePass = ''\n                def keyPass = ''\n                Console console = System.console()\n                println \"Match ${task.path}. console:\" + console\n\n                if(console == null) {\n                    new SwingBuilder().edt {\n                        dialog(modal: true,\n                                title: 'Enter password',\n                                alwaysOnTop: true,\n                                resizable: false,\n                                locationRelativeTo: null,\n                                pack: true,\n                                show: true) {\n                            vbox { // Put everything below each other\n                                label(text: \"Please enter store passphrase:\")\n                                def input1 = passwordField()\n                                label(text: \"Please enter key passphrase:\")\n                                def input2 = passwordField()\n                                button(defaultButton: true,\n                                        text: 'OK',\n                                        actionPerformed: {\n                                            storePass = input1.password;\n                                            keyPass = input2.password;\n                                            dispose();\n                                        })\n                            }\n                        }\n                    }\n                } else {\n                    storePass = console.readPassword(\"\\nPlease enter store passphrase: \")\n                    keyPass = console.readPassword(\"\\nPlease enter key passphrase: \")\n                }\n\n                if(storePass.size() <= 0 || keyPass.size() <= 0) {\n                    throw new InvalidUserDataException(\"You must enter the passwords to proceed.\")\n                }\n\n                storePass = new String(storePass)\n                keyPass = new String(keyPass)\n\n                proj.android.signingConfigs.release.storePassword = storePass\n                proj.android.signingConfigs.release.keyPassword = keyPass\n                return true;\n            }\n        }\n    }\n}\n\n```\n\u6ce8) \u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u51e6\u7406\u306f\u300cbuild\u300d\u300cassembleRelease\u300d\u30bf\u30b9\u30af\u306e\u307f\u3067\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u300cassemble\u300d\u3067\u306f\u52d5\u304d\u307e\u305b\u3093\u3002\n\n##gradle.properties\u306e\u8a2d\u5b9a\ngradle.properties\u306b\u5909\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u3068build.gradle\u5185\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30d1\u30b9\u306f\u7d76\u5bfe\u30d1\u30b9\u3092\u8a2d\u5b9a\u3057\u3066\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\u76f8\u5bfe\u30d1\u30b9\u306f\u78ba\u8a8d\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n\n```properties:proj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/gradle.properties\nCOCOS2DX_LOC=[cocos2dx\u306e\u30eb\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0]\nMY_COCOS2DX_CLASSES_LOC=[proj.android/../Classes\u306e\u30d1\u30b9]\nMY_BUILD_COMMON_GRADLE=[\u5148\u307b\u3069\u8a2d\u5b9a\u3057\u305fbuild_common.gradle\u306e\u30d1\u30b9(\u30d5\u30a1\u30a4\u30eb\u540d\u3082\u542b\u3080)]\n```\n\n##local.properties\u306e\u8a2d\u5b9a\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/\u306b\u3042\u308blocal.properties\u3092\u7de8\u96c6\u3059\u308b\u3002\n\n```properties:proj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/local.properties\nndk.dir=[Android NDK\u306e\u30d1\u30b9]\nsdk.dir=[Android SDK\u306e\u30d1\u30b9]\n\nCOCOS2DX_JAVA_LOC=[cocos2dx\u306e\u30eb\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0]/cocos2dx/platform/android/java\n\n# \u4f8b) \u4ed6\u793eSDK\u3092Eclipse\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u304d\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\nMY_LOBI_CORE_LIBRARY_LOC=[\u4ed6\u793eSDK\u306eEclipse\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d1\u30b9]\nMY_LOBI_RANKING_LIBRARY_LOC=[\u4ed6\u793eSDK\u306eEclipse\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d1\u30b9]\n```\n\n##\u30e6\u30fc\u30b6\u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308bgradle.properties\u306e\u8a2d\u5b9a\n~/.gradle/gradle.properties\u306e\u7de8\u96c6\u3002\n\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u30ea\u30b9\u30c8\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u5168\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u53cd\u6620\u3055\u308c\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n```properties:gradle.properties\n# gradle\u3092daemon\u30e2\u30fc\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3002\n# \u5b9f\u884c\u901f\u5ea6\u304c\u901f\u304f\u306a\u308b\u306e\u3067\u30aa\u30b9\u30b9\u30e1\norg.gradle.daemon=true\n\nMY_KEYSTORE_DEBUG_LOC=[\u30e6\u30fc\u30b6\u30d5\u30a9\u30eb\u30c0]/.android/debug.keystore\nMY_KEYSTORE_RELEASE_LOC=[\u7f72\u540d\u7528\u306e\u30ad\u30fc\u30d5\u30a1\u30a4\u30eb \u4f8b)android_rsa]\nMY_KEYSTORE_RELEASE_ALIAS=[\u30ad\u30fc\u30b9\u30c8\u30a2\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u540d]\n```\n\n\n\n##settings.gradle\u306e\u8a2d\u5b9a\nlocal.properties\u304b\u3089\u30d1\u30b9\u3092\u8aad\u307f\u8fbc\u3093\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n```groovy:proj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/settings.gradle\ninclude ':app'\ninclude ':cocos2dx'\ninclude ':LobiCore'\ninclude ':LobiRanking'\n\ndef getLoaclProperties(String defineName) {\n    Properties properties = new Properties()\n    properties.load(new File(rootDir.absolutePath + \"/local.properties\").newDataInputStream())\n    def defineValue = properties.getProperty(defineName, null)\n    if (defineValue == null) {\n        throw new GradleException(\n                \"Module location not found. Define location with '$defineName' in the local.properties file!\")\n    }\n    println \"defineName:\" + defineName + \", defineValue:\" + defineValue + \" at local.properties.\"\n    return defineValue\n}\n\nproject(':cocos2dx').projectDir = new File(getLoaclProperties('COCOS2DX_JAVA_LOC'))\n\n// \u4f8b) \u4ed6\u793eSDK\u3092Eclipse\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u304d\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\nproject(':LobiCore').projectDir = new File(getLoaclProperties('MY_LOBI_CORE_LIBRARY_LOC'))\nproject(':LobiRanking').projectDir = new File(getLoaclProperties('MY_LOBI_RANKING_LIBRARY_LOC'))\n```\n\n\n##build.gradle\u306e\u8a2d\u5b9a\nbuild.gradle\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3001\u4e21\u65b9\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n###\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u306ebuild.gradle\u3092\u8a2d\u5b9a\ncocos2dx\u306eAndroid\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30d3\u30eb\u30c9\u3059\u308b\u3002\n\n[cocos2dx\u30eb\u30fc\u30c8\u30d5\u30a9\u30eb\u30c0]/cocos2dx/platform/android/java\n\n\u4e0a\u8a18\u30d1\u30b9\u306bbuild.gradle\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n```groovy:build.gradle\n// MEMO: \u30e9\u30a4\u30d6\u30e9\u30ea\u7528\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\napply plugin: 'com.android.library'\n\nandroid {\n    compileSdkVersion 19\n    buildToolsVersion \"23.0.2\"\n\n    defaultConfig {\n        minSdkVersion 8\n        targetSdkVersion 23\n        versionCode 1\n        versionName \"1.0\"\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_7\n        targetCompatibility JavaVersion.VERSION_1_7\n    }\n\n    lintOptions {\n        abortOnError false\n    }\n\n    buildTypes {\n        debug {\n            debuggable true\n        }\n        release {\n            debuggable false\n            jniDebuggable false\n            zipAlignEnabled true\n            minifyEnabled false\n            proguardFile getDefaultProguardFile('proguard-android.txt')\n        }\n    }\n\n    sourceSets {\n          main {\n               manifest.srcFile 'AndroidManifest.xml'\n               java {\n                   srcDirs = ['src']\n                   includes = ['**/*.java']\n               }\n//               resources.srcDirs = ['src']\n//               aidl.srcDirs = ['src']\n//               renderscript.srcDirs = ['src']\n               res.srcDirs = ['res']\n               assets.srcDirs = ['assets']\n               jniLibs.srcDirs = ['libs']\n          }\n    }\n}\n\ndependencies {\n}\n```\n\nEclipse\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u305f\u4ed6\u793eSDK\u306b\u5bfe\u3057\u3066\u3082\u4e0a\u8a18build.gradle\u3092\u4f5c\u6210\u3059\u308b\u3002\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/settings.gradle\u306b\u5bfe\u3057\u3066\u3082\u30d1\u30b9\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3082\u5fd8\u308c\u305a\u306b\u3002\n\n\n###\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u306ebuild.gradle\u3092\u8a2d\u5b9a\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app\u914d\u4e0b\u306b\u3042\u308bbuild.gradle\u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002\n\u5fc5\u8981\u306a\u8a2d\u5b9a\u306f\u4e00\u90e8\u3067\u3059\u3002\n\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4ed6\u306b\u3082\u3042\u308b\u306e\u3067\u6ce8\u610f\uff01\n\n```groovy:proj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/build.gradle\napply plugin: 'com.android.application'\n\n// \u2193 \u3053\u3053\u304b\u3089\ndef checkRequiredPropertyNames() {\n    def requiredPropertyNames = ['MY_BUILD_COMMON_GRADLE', 'MY_KEYSTORE_DEBUG_LOC', 'MY_KEYSTORE_RELEASE_LOC', 'MY_KEYSTORE_RELEASE_ALIAS']\n\n    requiredPropertyNames.each() { name ->\n        if(!project.hasProperty(name)) {\n            throw new StopExecutionException(\"Not found '$name' of property in gradle.properties.\")\n        }\n    }\n}\ncheckRequiredPropertyNames()\n\napply from:file(MY_BUILD_COMMON_GRADLE)\n// \u2191 \u3053\u3053\u307e\u3067\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002\u4e0b\u306b\u3082\u307e\u3060\u3042\u308a\u307e\u3059\u3002\n\nrepositories {\n}\n\nandroid {\n    compileSdkVersion 19\n\n    // MEMO: android/sdk/build-tools\u306e\u4e0b\u306b\u3042\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\n    buildToolsVersion \"23.0.2\"\n\n    defaultConfig {\n        applicationId \"[\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3ID]\"\n        minSdkVersion 10\n        targetSdkVersion 23\n        versionCode 1\n        versionName \"1.0\"\n\n        // apk\u30d5\u30a1\u30a4\u30eb\u306e\u30d9\u30fc\u30b9\u540d\n        project.ext.set(\"archivesBaseName\", \"[apk\u306e\u30d9\u30fc\u30b9\u540d]\")\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_7\n        targetCompatibility JavaVersion.VERSION_1_7\n    }\n\n    lintOptions {\n        abortOnError false\n        disable 'MissingTranslation' // lint\u306e\u8b66\u544a\u306e\u6291\u5236\n    }\n\n// \u2193 \u3053\u3053\u304b\u3089 (\u5fc5\u8981\u306a\u306e\u306fsigningConfigs\u51e6\u7406\u306e\u90e8\u5206\u3067\u3059)\n    // \u7f72\u540d\u8a2d\u5b9a\u306e\u8aad\u307f\u8fbc\u307f\n    signingConfigs {\n        debug {\n            // MEMO: \u3053\u308c\u306f\u8a2d\u5b9a\u3057\u306a\u3044\u3067\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044\n            storeFile file(MY_KEYSTORE_DEBUG_LOC)\n            storePassword \"android\"\n            keyAlias \"androiddebugkey\"\n            keyPassword \"android\"\n        }\n        release {\n            storeFile file(MY_KEYSTORE_RELEASE_LOC)\n            keyAlias MY_KEYSTORE_RELEASE_ALIAS\n        }\n    }\n\n    buildTypes {\n        debug {\n            debuggable true\n            jniDebuggable true\n            zipAlignEnabled false\n            signingConfig signingConfigs.debug\n            minifyEnabled false\n        }\n        release {\n            debuggable false\n            jniDebuggable false\n            zipAlignEnabled true\n            signingConfig signingConfigs.release\n\n            // MEMO: Google Play Services\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\n            //       Proguard\u3092\u6709\u52b9\u306b\u3059\u308b\u3068Dex\u51e6\u7406\u3067SimException\u3092\u767a\u751f\u3055\u305b\u308b\u305f\u3081Proguard\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\n            //       https://code.google.com/p/android/issues/detail?id=187483\n            minifyEnabled false\n            proguardFile getDefaultProguardFile('proguard-android.txt')\n            proguardFile file('proguard-rules.pro')\n        }\n    }\n// \u2191 \u3053\u3053\u307e\u3067\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n    sourceSets {\n        main {\n            java {\n                srcDirs = ['src']\n                includes = ['**/*.java']\n            }\n//            resources.srcDirs = ['src']\n//            aidl.srcDirs = ['src']\n//            renderscript.srcDirs = ['src']\n            res.srcDirs = ['res']\n            assets.srcDirs = ['assets']\n\n            jni.srcDirs = ['jni']\n            jniLibs {\n                srcDirs = ['libs']\n                includes = ['**/*.so']\n            }\n        }\n    }\n\n    packagingOptions {\n        exclude 'META-INF/DEPENDENCIES'\n        exclude 'META-INF/INDEX.LIST'\n        exclude 'META-INF/LICENSE'\n        exclude 'META-INF/NOTICE'\n    }\n}\n\n// MEMO: *\u304c\u4f7f\u7528\u3067\u304d\u306a\u3044\nconfigurations.compile.exclude module:'support-v4'\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n\n    compile 'com.android.support:support-v4:+'\n//    compile 'com.android.support:appcompat-v7:23.1.1'\n}\n```\n\n##Android.mk\u306e\u8a2d\u5b9a\u4f8b\nbuild_common.gradle\u30d5\u30a1\u30a4\u30eb\u3067\u8a2d\u5b9a\u3057\u305f\u74b0\u5883\u5909\u6570\u3092Android.mk\u3067\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u4e0b\u8a18\u306fAndroid.mk\u304b\u3089\u74b0\u5883\u5909\u6570\u3092\u8aad\u307f\u8fbc\u3080\u51e6\u7406\u3002\n\n```mf:Android.mk\n$(info COCOS2DX_CLASSES_LOC:$(COCOS2DX_CLASSES_LOC))\n\nifeq ($(MY_COCOS2DX_CLASSES_LOC),)\n# \u74b0\u5883\u5909\u6570\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u304d\u306e\u51e6\u7406\nelse\n    LOCAL_SRC_FILES += $(shell find $(MY_COCOS2DX_CLASSES_LOC) -name \"*.c\")\n    LOCAL_SRC_FILES += $(shell find $(MY_COCOS2DX_CLASSES_LOC) -name \"*.cpp\")\nendif\n\n```\n\n#\u30d3\u30eb\u30c9\u3092\u5b9f\u884c\u3059\u308b\n##Android Studio\u304b\u3089Gradle Sync\u3092\u5b9f\u884c\u3059\u308b\n\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u7b49\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u3059\u308b\u305f\u3081Android Studio\u3067Gradle Sync\u3092\u5b9f\u884c\u3059\u308b\u3002\n(\u30b3\u30de\u30f3\u30c9\u3067\u3082\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3051\u3069...)\n\nTools -> Android -> Sync Project with Gradle Files\n\n\n##\u30bf\u30fc\u30df\u30ca\u30eb\u304b\u3089\u5b9f\u884c\n\u307e\u305a\u306f\u30c9\u30e9\u30a4\u30e9\u30f3\u3092\u5b9f\u884c\u3059\u308b\u3002(\u5f15\u6570 -m)\n\u30bf\u30b9\u30af\u306e\u8a2d\u5b9a\u306b\u8aa4\u308a\u304c\u306a\u3044\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\n```shell-session:\n$ ./gradlew -m build\n```\n\n\u30a8\u30e9\u30fc\u304c\u3042\u308c\u3070\u30a8\u30e9\u30fc\u3092\u3064\u3076\u3059\u3002\n\u30a8\u30e9\u30fc\u304c\u306a\u3051\u308c\u3070\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3002\n(\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u306fclean\u3068check\u3092\u5408\u308f\u305b\u3066\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059)\n\n```shell-session:\n$ ./gradlew clean check assembleRelease\n```\n\n\u4e0b\u306e\u3088\u3046\u306a\u7f72\u540d\u7528\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u30c0\u30a4\u30a2\u30ed\u30b0\u307e\u305f\u306f\u30bf\u30fc\u30df\u30ca\u30eb\u5185\u3067\u554f\u3044\u5408\u308f\u305b\u304c\u3042\u308c\u3070\u6210\u529f\u3002\n\u30d5\u30eb\u30a6\u30a3\u30f3\u30c9\u30a6\u3067\u306a\u304f\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u753b\u9762\u4e0a\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\uff01\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-30 21.59.02.png](https://qiita-image-store.s3.amazonaws.com/0/36154/20310806-d5eb-6f5a-9851-6f00e3c0b7d0.png)\n\n\u30ed\u30b0\u3092\u53d6\u308a\u306a\u304c\u3089\u30d3\u30eb\u30c9\u3059\u308b\u3068\u304d\n\n```shell-session:\n./gradlew clean check assembleRelease 2>&1 | tee ./build.log\n```\n\n\n#\u78ba\u8a8d\u3068\u4fbf\u5229\u30b3\u30de\u30f3\u30c9\n##apk\u30d5\u30a1\u30a4\u30eb\u306e\u78ba\u8a8d\nproj.androidstudio/[\u30a2\u30d7\u30ea\u540d]/app/build/outputs/apk\u30d5\u30a9\u30eb\u30c0\u306bapk\u30d5\u30a1\u30a4\u30eb\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3002\n\n###\u7f72\u540d\u306e\u78ba\u8a8d\n\n```shell-session:\n$ keytool -list -printcert -jarfile [\u30d5\u30a1\u30a4\u30eb\u540d].apk\n```\n\n###zipAlign\u306e\u78ba\u8a8d\n```shell-session:\n$ [Android SDK\u306e\u30eb\u30fc\u30c8\u30d1\u30b9]/build-tools/[\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3]/zipalign -c -v 4 [\u30d5\u30a1\u30a4\u30eb\u540d].apk | grep BAD\n```\n\nBAD\u5217\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306fzipAlign\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u306a\u3044\u3002\nbuild.gradle\u306e\u78ba\u8a8d\u3092\u3002\n\n##gradle\u306e\u30bf\u30b9\u30af\u3092\u5f37\u5236\u5b9f\u884c\u3055\u305b\u308b\n\n```shell-session:\n./gradlew --rerun-tasks [\u30bf\u30b9\u30af\u540d]\n\n\u4f8b)\n./gradlew --rerun-tasks assembleRelease\n```\n\n##\u30bf\u30b9\u30af\u306e\u4e00\u89a7\u3092\u8868\u793a\u3059\u308b\n\n```shell-session:\n./gradlew tasks\n```\n\n##\u4f9d\u5b58\u95a2\u4fc2\u306e\u8abf\u67fb\n```shell-session:\n./gradlew app:dependencies\n```\n\n\n#\u3042\u3068\u304c\u304d\n\u3053\u308c\u307e\u3067\u306e\u8a2d\u5b9a\u3068\u304a\u308aGradle\u306f\u8a2d\u5b9a\u5185\u5bb9\u304c\u8907\u96d1\u306b\u306a\u308a\u304c\u3061\u306a\u6c17\u304c\u3057\u3066\u3044\u307e\u3059\u3002\nGoogle\u306f2016\u5e74\u672b\u306b\u65b0\u3057\u3044\u30d3\u30eb\u30c9\u30b7\u30b9\u30c6\u30e0Bazel\u3092\u30ea\u30ea\u30fc\u30b9\u4e88\u5b9a :innocent: \n\n[Bazel x Android NDK \u3067\u30d3\u30eb\u30c9\u3059\u308b (\u3064\u3044\u3067\u306biOS\u3082)](http://qiita.com/smith/items/897d977a06d0103f40e0)\n\nGoogle\u304c\u6700\u8fd1\u3060\u3057\u3066\u3044\u308bNDK\u7528\u306eplugin\u306f\u672a\u3060\u5b9f\u9a13\u4e2d :sob: \n\n[Experimental Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/gradle-experimental)\n\n\u30d3\u30eb\u30c9\u30b7\u30b9\u30c6\u30e0\u306f\u7a7a\u6c17\u307f\u305f\u3044\u5b58\u5728\u306b\u306a\u308a\u3064\u3064\u3042\u308b\u306e\u3067\u3001\n\u67d4\u8edf\u6027\u304c\u306a\u304f\u3066\u3082\u5236\u9650\u304c\u5f37\u304f\u3066\u76f4\u611f\u7684\u306b\u7de8\u96c6\u3067\u304d\u308b\u3082\u306e\u304c\u3044\u3044\u3067\u3059\u3088\u306d\uff01\n\n\u8abf\u67fb\u3068\u5b9f\u9a13\u306e\u6642\u9593\u304c\u7d50\u69cb\u304b\u304b\u3063\u3061\u3083\u3063\u305f\u304b\u3089\u3001\u304a\u91d1\u3061\u3087\u30fc\u3060\u3044\uff01 :smiling_imp: \n"}