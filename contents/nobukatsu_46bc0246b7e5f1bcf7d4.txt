{"tags": ["\u6a5f\u68b0\u5b66\u7fd2", "Chainer"], "context": "\n\n\u6982\u8981\nChainer\u3067\u30ed\u30fc\u30ab\u30eb\u306eCSV\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u65b9\u6cd5\u3067\u3059\u3002\nChainer\u306e\u516c\u5f0f\u30b5\u30a4\u30c8\u306b\u8f09\u3063\u3066\u3044\u308bMNIST\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u76f4\u63a5\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u3044\u305f\u306e\u3067\u3001CSV\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u65b9\u6cd5\u304c\u5206\u304b\u3089\u305a\u8abf\u3079\u305f\u6b21\u7b2c\u3067\u3059\u3002\n\n\u74b0\u5883\n$ sw_vers\nProductName:    Mac OS X\nProductVersion: 10.11.6\nBuildVersion:   15G1212\n$ python --version\nPython 3.5.2 :: Anaconda 4.1.1 (x86_64)\n$ pip list --format=legacy | grep chainer\nchainer (1.18.0)\n\n\n\u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\nkaggle\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u7684\u5b58\u5728\u3067\u3042\u308b\u3001\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u4e57\u5ba2\u306e\u751f\u6b7b\u3092\u4e88\u6e2c\u3059\u308b\u30b3\u30f3\u30da\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\nTitanic: Machine Learning from Disaster\n\u300ctrain.csv\u300d\u3068\u300ctest.csv\u300d\u304c\u516c\u958b\u3055\u308c\u3066\u307e\u3059\u304c\u3001\u300ctest.csv\u300d\u306f\u751f\u6b7b\u306e\u7d50\u679c\u304c\u8f09\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u300ctrain.csv\u300d\u306e\u307f\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\nCSV\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067\u7cbe\u5ea6\u306f\u6c42\u3081\u307e\u305b\u3093\u3002\n\n\u30b3\u30fc\u30c9\u5168\u4f53\nimport numpy as np\nimport pandas as pd\nimport chainer\nfrom chainer import cuda, Function, gradient_check, report, training, utils, Variable\nfrom chainer import datasets, iterators, optimizers, serializers\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer.training import extensions\n\n# csv\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\ndata_f = pd.read_csv('train.csv', header=0)\n\n# \u95a2\u4fc2\u3042\u308a\u305d\u3046\u306aPClass,Sex,Age\u306e\u307f\u3092\u4f7f\u3046\ndata_f = data_f[[\"Pclass\", \"Sex\", \"Age\", \"Survived\"]]\n\n# Age\u306e\u6b20\u640d\u5024\u3092\u4e2d\u592e\u5024\u3067\u88dc\u5b8c\ndata_f[\"Age\"] = data_f[\"Age\"].fillna(data_f[\"Age\"].median())\n# male\u306f1, female\u306f0\u306b\u7f6e\u63db\ndata_f[\"Sex\"] = data_f[\"Sex\"].replace(\"male\", 1)\ndata_f[\"Sex\"] = data_f[\"Sex\"].replace(\"female\", 0)\n\ndata_array = data_f.as_matrix()\n\nX = []\nY = []\nfor x in data_array:\n    x_split = np.hsplit(x, [3,4])\n    X.append(x_split[0].astype(np.float32))\n    Y.append(x_split[1].astype(np.int32))\n\nX = np.array(X)\nY = np.ndarray.flatten(np.array(Y))\n\n# 891\u500b\u306e\u30c7\u30fc\u30bf\u306e\u3046\u3061623\u500b(7\u5272)\u3092\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3001\u6b8b\u308a\u3092\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306b\u3059\u308b\ntrain, test = datasets.split_dataset_random(datasets.TupleDataset(X, Y), 623)\ntrain_iter = iterators.SerialIterator(train, batch_size=100, shuffle=True)\ntest_iter = iterators.SerialIterator(test, batch_size=100, repeat=False, shuffle=False)\n\nclass MLP(Chain):\n    def __init__(self):\n        super(MLP, self).__init__(\n            l1=L.Linear(3, 100),\n            l2=L.Linear(100, 100),\n            l3=L.Linear(100, 2),\n        )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        y = self.l3(h2)\n        return y\n\nmodel = L.Classifier(MLP())\noptimizer = optimizers.SGD()\noptimizer.setup(model)\n\nupdater = training.StandardUpdater(train_iter, optimizer)\ntrainer = training.Trainer(updater, (30, 'epoch'), out='result')\n\ntrainer.extend(extensions.Evaluator(test_iter, model))\ntrainer.extend(extensions.LogReport())\ntrainer.extend(extensions.PrintReport(['epoch', 'main/accuracy', 'validation/main/accuracy']))\ntrainer.extend(extensions.ProgressBar())\n\ntrainer.run()\n\n\n\u5b66\u7fd2\u7d50\u679c\n\u4e00\u5fdc\u3001\u5b66\u7fd2\u7d50\u679c\u3067\u3059\u3002\n$ python mlp.py\nepoch       main/accuracy  validation/main/accuracy\n1           0.58           0.708235\n2           0.593333       0.708235\n3           0.611667       0.704902\n4           0.596667       0.787843\n5           0.652857       0.688431\n6           0.653333       0.676863\n7           0.651667       0.676863\n8           0.626667       0.680196\n9           0.642857       0.773137\n10          0.728333       0.673529\n11          0.691667       0.734902\n12          0.611667       0.746667\n13          0.685          0.637255\n14          0.641429       0.685098\n15          0.643333       0.402549\n16          0.631667       0.726667\n17          0.661667       0.705294\n18          0.628571       0.695294\n19          0.656667       0.615686\n20          0.645          0.676863\n21          0.578333       0.751569\n22          0.635714       0.769804\n23          0.661667       0.672157\n24          0.611667       0.774706\n25          0.69           0.676863\n26          0.628333       0.585882\n27          0.634286       0.708627\n28          0.611667       0.417451\n29          0.663333       0.753137\n30          0.68           0.743137\n\n\u3084\u306f\u308a\u30a4\u30de\u30a4\u30c1\u3067\u3059\u3002\n# \u6982\u8981\nChainer\u3067\u30ed\u30fc\u30ab\u30eb\u306eCSV\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u65b9\u6cd5\u3067\u3059\u3002\nChainer\u306e\u516c\u5f0f\u30b5\u30a4\u30c8\u306b\u8f09\u3063\u3066\u3044\u308bMNIST\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u76f4\u63a5\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u3044\u305f\u306e\u3067\u3001CSV\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u65b9\u6cd5\u304c\u5206\u304b\u3089\u305a\u8abf\u3079\u305f\u6b21\u7b2c\u3067\u3059\u3002\n\n## \u74b0\u5883\n```bash\n$ sw_vers\nProductName:    Mac OS X\nProductVersion: 10.11.6\nBuildVersion:   15G1212\n$ python --version\nPython 3.5.2 :: Anaconda 4.1.1 (x86_64)\n$ pip list --format=legacy | grep chainer\nchainer (1.18.0)\n```\n\n# \u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\n[kaggle](https://www.kaggle.com)\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u7684\u5b58\u5728\u3067\u3042\u308b\u3001\u30bf\u30a4\u30bf\u30cb\u30c3\u30af\u53f7\u306e\u4e57\u5ba2\u306e\u751f\u6b7b\u3092\u4e88\u6e2c\u3059\u308b\u30b3\u30f3\u30da\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n[Titanic: Machine Learning from Disaster](https://www.kaggle.com/c/titanic)\n\n\u300ctrain.csv\u300d\u3068\u300ctest.csv\u300d\u304c\u516c\u958b\u3055\u308c\u3066\u307e\u3059\u304c\u3001\u300ctest.csv\u300d\u306f\u751f\u6b7b\u306e\u7d50\u679c\u304c\u8f09\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u300ctrain.csv\u300d\u306e\u307f\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\nCSV\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067\u7cbe\u5ea6\u306f\u6c42\u3081\u307e\u305b\u3093\u3002\n\n# \u30b3\u30fc\u30c9\u5168\u4f53\n```py\nimport numpy as np\nimport pandas as pd\nimport chainer\nfrom chainer import cuda, Function, gradient_check, report, training, utils, Variable\nfrom chainer import datasets, iterators, optimizers, serializers\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer.training import extensions\n\n# csv\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\ndata_f = pd.read_csv('train.csv', header=0)\n\n# \u95a2\u4fc2\u3042\u308a\u305d\u3046\u306aPClass,Sex,Age\u306e\u307f\u3092\u4f7f\u3046\ndata_f = data_f[[\"Pclass\", \"Sex\", \"Age\", \"Survived\"]]\n\n# Age\u306e\u6b20\u640d\u5024\u3092\u4e2d\u592e\u5024\u3067\u88dc\u5b8c\ndata_f[\"Age\"] = data_f[\"Age\"].fillna(data_f[\"Age\"].median())\n# male\u306f1, female\u306f0\u306b\u7f6e\u63db\ndata_f[\"Sex\"] = data_f[\"Sex\"].replace(\"male\", 1)\ndata_f[\"Sex\"] = data_f[\"Sex\"].replace(\"female\", 0)\n\ndata_array = data_f.as_matrix()\n\nX = []\nY = []\nfor x in data_array:\n    x_split = np.hsplit(x, [3,4])\n    X.append(x_split[0].astype(np.float32))\n    Y.append(x_split[1].astype(np.int32))\n\nX = np.array(X)\nY = np.ndarray.flatten(np.array(Y))\n\n# 891\u500b\u306e\u30c7\u30fc\u30bf\u306e\u3046\u3061623\u500b(7\u5272)\u3092\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3001\u6b8b\u308a\u3092\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306b\u3059\u308b\ntrain, test = datasets.split_dataset_random(datasets.TupleDataset(X, Y), 623)\ntrain_iter = iterators.SerialIterator(train, batch_size=100, shuffle=True)\ntest_iter = iterators.SerialIterator(test, batch_size=100, repeat=False, shuffle=False)\n\nclass MLP(Chain):\n    def __init__(self):\n        super(MLP, self).__init__(\n            l1=L.Linear(3, 100),\n            l2=L.Linear(100, 100),\n            l3=L.Linear(100, 2),\n        )\n        \n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        y = self.l3(h2)\n        return y\n\nmodel = L.Classifier(MLP())\noptimizer = optimizers.SGD()\noptimizer.setup(model)\n\nupdater = training.StandardUpdater(train_iter, optimizer)\ntrainer = training.Trainer(updater, (30, 'epoch'), out='result')\n\ntrainer.extend(extensions.Evaluator(test_iter, model))\ntrainer.extend(extensions.LogReport())\ntrainer.extend(extensions.PrintReport(['epoch', 'main/accuracy', 'validation/main/accuracy']))\ntrainer.extend(extensions.ProgressBar())\n\ntrainer.run()\n```\n\n# \u5b66\u7fd2\u7d50\u679c\n\u4e00\u5fdc\u3001\u5b66\u7fd2\u7d50\u679c\u3067\u3059\u3002\n\n```bash\n$ python mlp.py\nepoch       main/accuracy  validation/main/accuracy\n1           0.58           0.708235\n2           0.593333       0.708235\n3           0.611667       0.704902\n4           0.596667       0.787843\n5           0.652857       0.688431\n6           0.653333       0.676863\n7           0.651667       0.676863\n8           0.626667       0.680196\n9           0.642857       0.773137\n10          0.728333       0.673529\n11          0.691667       0.734902\n12          0.611667       0.746667\n13          0.685          0.637255\n14          0.641429       0.685098\n15          0.643333       0.402549\n16          0.631667       0.726667\n17          0.661667       0.705294\n18          0.628571       0.695294\n19          0.656667       0.615686\n20          0.645          0.676863\n21          0.578333       0.751569\n22          0.635714       0.769804\n23          0.661667       0.672157\n24          0.611667       0.774706\n25          0.69           0.676863\n26          0.628333       0.585882\n27          0.634286       0.708627\n28          0.611667       0.417451\n29          0.663333       0.753137\n30          0.68           0.743137\n```\n\u3084\u306f\u308a\u30a4\u30de\u30a4\u30c1\u3067\u3059\u3002\n"}