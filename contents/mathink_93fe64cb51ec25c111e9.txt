{"context": " More than 1 year has passed since last update.\n\n\u8a00\u3044\u305f\u3044\u3053\u3068\n\n\u7d50\u679c\u7684\u306b\u5f15\u6570\u304c\u4e00\u3064\u306e\u51fd\u6570\u3068\u306a\u308b (fun x => f ... x ...) \u3068\u3044\u3046\u9805\u304c \u3000`(f ... x ...) \u3068\u66f8\u3051\u308b\n\u305d\u306e\u305f\u3081\u306b\u306f\u3000Generalizable Variables \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u3002\n\u305f\u3060\u3057\u3001\u8a3c\u660e\u30e2\u30fc\u30c9\u4e2d\u306e\u5229\u7528\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n\n\n\u30b3\u30fc\u30c9\u4f8b\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u4e2d\u306e Compute \u306e\u7d50\u679c\u306f\u5168\u3066\u540c\u4e00\u3067\u3042\u308b\u3002\nRequire Import Arith List.\nImport List.ListNotations.\nOpen Scope list_scope.\n\nInfix \"<=b\" := leb (at level 80, no associativity).\nDefinition testdata := [4;1;5;6;0;13;8;9;11;23;5;7;2].\n\nCompute filter (fun x => x <=b 3) testdata.\n\nDefinition flip {X Y Z: Type}(f: X -> Y -> Z): Y -> X -> Z :=\n  fun y x => f x y.\nCompute filter (flip leb 3) testdata.\n\nGeneralizable Variables x.\nCompute filter `(x <=b 3) testdata.\n\n\n\u72b6\u6cc1\u8aac\u660e\nmap \u3084 filter \u306a\u3069\u3001\u4e00\u5f15\u6570\u51fd\u6570\u3092\u5f15\u6570\u3068\u3059\u308b\u51fd\u6570\u306b\u3064\u3044\u3066\n\nmap (fun x => f hoge x fuga) l\nfilter (fun x => x <= 3) l\n\n\u306a\u3069\u3068\u3044\u3046\u66f8\u304d\u65b9\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3060\u304c\u3001 Generalizable Variables \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u3068\u3001\u3053\u308c\u3092\n\nmap `(f hoge x fuga) l\nfilter `(x <= 3) l\n\n\u3068\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\u7279\u306b\u52b9\u679c\u3092\u767a\u63ee\u3059\u308b\u306e\u304c\u4e8c\u756a\u76ee\u306e\u4f8b\u3002\nNotation \u306a\u308a Infix \u306a\u308a\u3067\u4e8c\u9805\u6f14\u7b97\u306e\u4e2d\u7f6e\u8a18\u6cd5 <= \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3068\u3001\u5f15\u6570\u306e\u9806\u5e8f\u3092\u5165\u308c\u66ff\u3048\u308b\u51fd\u6570 flip f y x := f x y \u304c\u3042\u3063\u305f\u3068\u3057\u3066\u3082 flip <= 3 \u306e\u3088\u3046\u306b\u306f\u66f8\u3051\u306a\u3044\u3002\n  \u306a\u306e\u3067\u3001\u3069\u3046\u3057\u3066\u3082\u5143\u306e\u95a2\u6570\u540d(\u305f\u3068\u3048\u3070 leb)\u3092\u4f7f\u308f\u3056\u308b\u3092\u5f97\u306a\u3044\u3002\n\u3057\u304b\u3057\u3001 flip leb 3 \u306f\u3069\u3046\u898b\u3066\u3082\u53ef\u8aad\u6027\u306b\u6b20\u3051\u3066\u3044\u308b\u306e\u3067\u3001\u53ef\u80fd\u306a\u3089 <= \u3092\u4f7f\u3044\u305f\u3044\u3002\n\u3059\u308b\u3068\u3001\u7d50\u5c40 fun \u3092\u4f7f\u3063\u3066 fun x => x <= 3 \u3068\u66f8\u304f\u3053\u3068\u306b\u306a\u308b\u3002\n\u3053\u3053\u3067\u3001 Generalizable Variables \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u308b implicit generalization \u3092\u5229\u7528\u3059\u308b\u3068\u3001\u4ee3\u308f\u308a\u306b `(x <= 3) \u3068\u66f8\u3044\u3066\u540c\u7b49\u306e\u9805\u3092\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\u5358\u72ec\u3067\u4f7f\u3063\u3066\u3082\u4fbf\u5229\u306a\u6a5f\u80fd\u3060\u304c\u3001 Notation \u30b3\u30de\u30f3\u30c9\u306a\u3069\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u53ef\u8aad\u6027\u306e\u5411\u4e0a\u306b\u3088\u308a\u8ca2\u732e\u3059\u308b\u6a5f\u80fd\u3067\u3042\u308b\u3002\n\nimplicit generalization\n\u8a73\u3057\u304f\u306f \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30de\u30cb\u30e5\u30a2\u30eb\u306e\u8a72\u5f53\u90e8 \u3092\u898b\u3066\u3082\u3089\u3046\u3068\u3057\u3066\u3001\u7c21\u5358\u306b\u8aac\u660e\u3059\u308b\u3068\u3001\n`() \u3084 `{} \u3067\u56f2\u307e\u308c\u305f\u81ea\u7531\u5909\u6570\u3092\u542b\u3080\u9805\u3092\u3001\u9589\u3058\u305f\u9805\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u6a5f\u80fd\u3067\u3042\u308b\u3002\n\u4f8b\u3067\u306f\u578b\u5909\u6570\u3084\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u4f7f\u3063\u3066\u3044\u308b\u304c\u3001\u3082\u3061\u308d\u3093\u666e\u901a\u306e(\uff1f)\u9805\u306b\u3082\u5229\u7528\u53ef\u80fd\u3060\u3002\n  \u6848\u5916\u3001\u3053\u3061\u3089\u306e\u4f7f\u3044\u65b9\u306b\u306f\u601d\u3044\u81f3\u3089\u306a\u3044\u3053\u3068\u304c\u591a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nimplicit generalization \u3092\u53ef\u80fd\u306b\u3059\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c Generalizable Variables \u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u306a\u308b\u3002\n\nGeneralizable Variables \u30aa\u30d7\u30b7\u30e7\u30f3\n\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u306f\u57fa\u672c\u7684\u306b\u4e8c\u3064\u306e\u4f7f\u3044\u65b9\u304c\u3042\u308b\u3002\n\u4e00\u3064\u76ee\u306f\u3001\u81ea\u7531\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u53ef\u80fd\u306a\u5909\u6570\u540d\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3067\u3042\u308b\u3002\u3053\u308c\u306f\nGeneralizable Variables x y foo bar.\n\n\u3068\u3044\u3046\u3088\u3046\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u672b\u5c3e\u306b\u4f7f\u3044\u305f\u3044\u5909\u6570\u540d\u3092\u5217\u6319\u3059\u308b\u3002\n\u3059\u308b\u3068\u3001 x \u3084 foo \u306f\u3082\u3061\u308d\u3093\u3001\u3053\u306e\u5909\u6570\u540d\u306b\u6570\u3092\u7e4b\u3052\u305f\u3082\u306e(x1 \u3084 foo200 \u306a\u3069)\u304c\u81ea\u7531\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u3002\n\u4e8c\u3064\u76ee\u306f\u3001\u3069\u3093\u306a\u540d\u524d\u3067\u3082\u81ea\u7531\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u53ef\u80fd\u306b\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3001\nGeneralizable All Variables.\n\n\u3068\u3059\u308b\u3002 `() \u3084 `{} \u306e\u4e2d\u3067\u306f\u3001\u65e2\u77e5\u306e\u5909\u6570\u3067\u3042\u308c\u3070\u305d\u3061\u3089\u3060\u3068\u6b63\u3057\u304f\u63a8\u8ad6\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u70b9\u306b\u3064\u3044\u3066\u306e\u5fc3\u914d\u306f\u3044\u3089\u306a\u3044\u3002\n\u3057\u304b\u3057\u3001\u3053\u306e\u5834\u5408\u3001\u30bf\u30a4\u30dd\u306b\u6ce8\u610f\u3057\u306a\u3044\u3068\u4e88\u671f\u305b\u306c\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3060\u3002\n  \u4f8b\u3048\u3070 Type \u3092 Typr \u306b\u30bf\u30a4\u30dd\u3057\u3066\u3044\u305f\u308a\u3059\u308b\u3068\u3069\u3053\u304b\u3067\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b\u3002\n\n\u8a3c\u660e\u30e2\u30fc\u30c9\u4e2d\u3067\u306e\u5229\u7528\nassert \u306a\u3069\u3067\u9805\u3092\u76f4\u63a5\u8a18\u8ff0\u3059\u308b\u3068\u304d\u306b\u3082\u540c\u3058\u3088\u3046\u306b implicit generalization \u3092\u5229\u7528\u3057\u305f\u3044\u6642\u306f\u3001\u6c17\u3092\u3064\u3051\u3066\u304a\u304b\u306d\u3070\u306a\u3089\u306a\u3044\u3002\n  \u4eee\u5b9a\u90e8\u306b\u3042\u308b\u5909\u6570\u304c\u65e2\u77e5\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3060\u3068\u308f\u304b\u3089\u305a\u3001\u904e\u5270\u306b generalize \u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3067\u3042\u308b\u3002\n\u4eee\u5b9a\u90e8\u306b y: A \u304c\u3042\u308a\u3001 assert \u306e\u5f15\u6570\u3068\u3057\u3066 map `(x < y) l \u306e\u3088\u3046\u306b implicit generalization \u306e\u5bfe\u8c61\u3068\u306a\u308b\u9805\u306b y \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u4e0e\u3048\u305f\u5834\u5408\u3001 map (fun x => x < y) l \u3067\u306f\u306a\u304f map (fun x y => x < y) l \u3068\u3057\u3066\u51e6\u7406\u3055\u308c\u3066\u3057\u307e\u3046\u3002\n\u3053\u308c\u3092\u907f\u3051\u308b\u306b\u306f let \u3092\u4f7f\u3063\u3066\u9805\u306e\u4e2d\u3067 y \u3092\u675f\u7e1b\u3057\u3066\u304a\u304f\u3068\u3088\u3044\u3002\nlet y' := y in (map `(x < y') l) \u3068\u3059\u308c\u3070\u3001\u6c42\u3081\u3066\u3044\u308b\u901a\u308a\u306e\u9805\u306b\u306a\u308b\u3002\n# \u8a00\u3044\u305f\u3044\u3053\u3068\n\n- \u7d50\u679c\u7684\u306b\u5f15\u6570\u304c\u4e00\u3064\u306e\u51fd\u6570\u3068\u306a\u308b `(fun x => f ... x ...)` \u3068\u3044\u3046\u9805\u304c ``\u3000`(f ... x ...)`` \u3068\u66f8\u3051\u308b\n- \u305d\u306e\u305f\u3081\u306b\u306f\u3000`Generalizable Variables` \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u3002\n- \u305f\u3060\u3057\u3001\u8a3c\u660e\u30e2\u30fc\u30c9\u4e2d\u306e\u5229\u7528\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n\n# \u30b3\u30fc\u30c9\u4f8b\n\n  \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u4e2d\u306e `Compute` \u306e\u7d50\u679c\u306f\u5168\u3066\u540c\u4e00\u3067\u3042\u308b\u3002\n\n```coq\nRequire Import Arith List.\nImport List.ListNotations.\nOpen Scope list_scope.\n\nInfix \"<=b\" := leb (at level 80, no associativity).\nDefinition testdata := [4;1;5;6;0;13;8;9;11;23;5;7;2].\n\nCompute filter (fun x => x <=b 3) testdata.\n\nDefinition flip {X Y Z: Type}(f: X -> Y -> Z): Y -> X -> Z :=\n  fun y x => f x y.\nCompute filter (flip leb 3) testdata.\n\nGeneralizable Variables x.\nCompute filter `(x <=b 3) testdata.\n```\n\n# \u72b6\u6cc1\u8aac\u660e\n\n  `map` \u3084 `filter` \u306a\u3069\u3001\u4e00\u5f15\u6570\u51fd\u6570\u3092\u5f15\u6570\u3068\u3059\u308b\u51fd\u6570\u306b\u3064\u3044\u3066\n\n1. `map (fun x => f hoge x fuga) l`\n2. `filter (fun x => x <= 3) l`\n\n  \u306a\u3069\u3068\u3044\u3046\u66f8\u304d\u65b9\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3060\u304c\u3001 `Generalizable Variables` \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u3068\u3001\u3053\u308c\u3092\n\n1. ``map `(f hoge x fuga) l``\n2. ``filter `(x <= 3) l``\n\n  \u3068\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n  \u7279\u306b\u52b9\u679c\u3092\u767a\u63ee\u3059\u308b\u306e\u304c\u4e8c\u756a\u76ee\u306e\u4f8b\u3002\n\n`Notation` \u306a\u308a `Infix` \u306a\u308a\u3067\u4e8c\u9805\u6f14\u7b97\u306e\u4e2d\u7f6e\u8a18\u6cd5 `<=` \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3068\u3001\u5f15\u6570\u306e\u9806\u5e8f\u3092\u5165\u308c\u66ff\u3048\u308b\u51fd\u6570 `flip f y x := f x y` \u304c\u3042\u3063\u305f\u3068\u3057\u3066\u3082 `flip <= 3` \u306e\u3088\u3046\u306b\u306f\u66f8\u3051\u306a\u3044\u3002\n  \u306a\u306e\u3067\u3001\u3069\u3046\u3057\u3066\u3082\u5143\u306e\u95a2\u6570\u540d(\u305f\u3068\u3048\u3070 `leb`)\u3092\u4f7f\u308f\u3056\u308b\u3092\u5f97\u306a\u3044\u3002\n\n\u3057\u304b\u3057\u3001 `flip leb 3` \u306f\u3069\u3046\u898b\u3066\u3082\u53ef\u8aad\u6027\u306b\u6b20\u3051\u3066\u3044\u308b\u306e\u3067\u3001\u53ef\u80fd\u306a\u3089 `<=` \u3092\u4f7f\u3044\u305f\u3044\u3002\n\u3059\u308b\u3068\u3001\u7d50\u5c40 `fun` \u3092\u4f7f\u3063\u3066 `fun x => x <= 3` \u3068\u66f8\u304f\u3053\u3068\u306b\u306a\u308b\u3002\n\n\u3053\u3053\u3067\u3001 `Generalizable Variables` \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u308b implicit generalization \u3092\u5229\u7528\u3059\u308b\u3068\u3001\u4ee3\u308f\u308a\u306b `` `(x <= 3)`` \u3068\u66f8\u3044\u3066\u540c\u7b49\u306e\u9805\u3092\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n  \u5358\u72ec\u3067\u4f7f\u3063\u3066\u3082\u4fbf\u5229\u306a\u6a5f\u80fd\u3060\u304c\u3001 `Notation` \u30b3\u30de\u30f3\u30c9\u306a\u3069\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u53ef\u8aad\u6027\u306e\u5411\u4e0a\u306b\u3088\u308a\u8ca2\u732e\u3059\u308b\u6a5f\u80fd\u3067\u3042\u308b\u3002\n\n# implicit generalization\n\n  \u8a73\u3057\u304f\u306f [\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30de\u30cb\u30e5\u30a2\u30eb\u306e\u8a72\u5f53\u90e8](https://coq.inria.fr/refman/Reference-Manual004.html#hevea_command95) \u3092\u898b\u3066\u3082\u3089\u3046\u3068\u3057\u3066\u3001\u7c21\u5358\u306b\u8aac\u660e\u3059\u308b\u3068\u3001\n  `` `()`` \u3084 `` `{}`` \u3067\u56f2\u307e\u308c\u305f\u81ea\u7531\u5909\u6570\u3092\u542b\u3080\u9805\u3092\u3001\u9589\u3058\u305f\u9805\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u6a5f\u80fd\u3067\u3042\u308b\u3002\n\n  \u4f8b\u3067\u306f\u578b\u5909\u6570\u3084\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u4f7f\u3063\u3066\u3044\u308b\u304c\u3001\u3082\u3061\u308d\u3093\u666e\u901a\u306e(\uff1f)\u9805\u306b\u3082\u5229\u7528\u53ef\u80fd\u3060\u3002\n  \u6848\u5916\u3001\u3053\u3061\u3089\u306e\u4f7f\u3044\u65b9\u306b\u306f\u601d\u3044\u81f3\u3089\u306a\u3044\u3053\u3068\u304c\u591a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n  implicit generalization \u3092\u53ef\u80fd\u306b\u3059\u308b\u305f\u3081\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c `Generalizable Variables` \u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u306a\u308b\u3002\n\n# `Generalizable Variables` \u30aa\u30d7\u30b7\u30e7\u30f3\n\n  \u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u306f\u57fa\u672c\u7684\u306b\u4e8c\u3064\u306e\u4f7f\u3044\u65b9\u304c\u3042\u308b\u3002\n\n  \u4e00\u3064\u76ee\u306f\u3001\u81ea\u7531\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u53ef\u80fd\u306a\u5909\u6570\u540d\u3092\u6307\u5b9a\u3059\u308b\u65b9\u6cd5\u3067\u3042\u308b\u3002\u3053\u308c\u306f\n\n```coq\nGeneralizable Variables x y foo bar.\n```\n\u3068\u3044\u3046\u3088\u3046\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u672b\u5c3e\u306b\u4f7f\u3044\u305f\u3044\u5909\u6570\u540d\u3092\u5217\u6319\u3059\u308b\u3002\n\u3059\u308b\u3068\u3001 `x` \u3084 `foo` \u306f\u3082\u3061\u308d\u3093\u3001\u3053\u306e\u5909\u6570\u540d\u306b\u6570\u3092\u7e4b\u3052\u305f\u3082\u306e(`x1` \u3084 `foo200` \u306a\u3069)\u304c\u81ea\u7531\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u3002\n\n\u4e8c\u3064\u76ee\u306f\u3001\u3069\u3093\u306a\u540d\u524d\u3067\u3082\u81ea\u7531\u5909\u6570\u3068\u3057\u3066\u5229\u7528\u53ef\u80fd\u306b\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3001\n\n```coq\nGeneralizable All Variables.\n```\n  \u3068\u3059\u308b\u3002 `` `()`` \u3084 `` `{}`` \u306e\u4e2d\u3067\u306f\u3001\u65e2\u77e5\u306e\u5909\u6570\u3067\u3042\u308c\u3070\u305d\u3061\u3089\u3060\u3068\u6b63\u3057\u304f\u63a8\u8ad6\u3055\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u70b9\u306b\u3064\u3044\u3066\u306e\u5fc3\u914d\u306f\u3044\u3089\u306a\u3044\u3002\n\n  \u3057\u304b\u3057\u3001\u3053\u306e\u5834\u5408\u3001\u30bf\u30a4\u30dd\u306b\u6ce8\u610f\u3057\u306a\u3044\u3068\u4e88\u671f\u305b\u306c\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3060\u3002\n  \u4f8b\u3048\u3070 `Type` \u3092 `Typr` \u306b\u30bf\u30a4\u30dd\u3057\u3066\u3044\u305f\u308a\u3059\u308b\u3068\u3069\u3053\u304b\u3067\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b\u3002\n    \n# \u8a3c\u660e\u30e2\u30fc\u30c9\u4e2d\u3067\u306e\u5229\u7528\n\n  `assert` \u306a\u3069\u3067\u9805\u3092\u76f4\u63a5\u8a18\u8ff0\u3059\u308b\u3068\u304d\u306b\u3082\u540c\u3058\u3088\u3046\u306b implicit generalization \u3092\u5229\u7528\u3057\u305f\u3044\u6642\u306f\u3001\u6c17\u3092\u3064\u3051\u3066\u304a\u304b\u306d\u3070\u306a\u3089\u306a\u3044\u3002\n  \u4eee\u5b9a\u90e8\u306b\u3042\u308b\u5909\u6570\u304c\u65e2\u77e5\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3060\u3068\u308f\u304b\u3089\u305a\u3001\u904e\u5270\u306b generalize \u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3067\u3042\u308b\u3002\n\n  \u4eee\u5b9a\u90e8\u306b `y: A` \u304c\u3042\u308a\u3001 `assert` \u306e\u5f15\u6570\u3068\u3057\u3066 ``map `(x < y) l`` \u306e\u3088\u3046\u306b implicit generalization \u306e\u5bfe\u8c61\u3068\u306a\u308b\u9805\u306b `y` \u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u4e0e\u3048\u305f\u5834\u5408\u3001 `map (fun x => x < y) l` \u3067\u306f\u306a\u304f `map (fun x y => x < y) l` \u3068\u3057\u3066\u51e6\u7406\u3055\u308c\u3066\u3057\u307e\u3046\u3002\n  \n  \u3053\u308c\u3092\u907f\u3051\u308b\u306b\u306f `let` \u3092\u4f7f\u3063\u3066\u9805\u306e\u4e2d\u3067 `y` \u3092\u675f\u7e1b\u3057\u3066\u304a\u304f\u3068\u3088\u3044\u3002\n  ``let y' := y in (map `(x < y') l)`` \u3068\u3059\u308c\u3070\u3001\u6c42\u3081\u3066\u3044\u308b\u901a\u308a\u306e\u9805\u306b\u306a\u308b\u3002\n  \n", "tags": ["Coq"]}