{"tags": ["Chainer", "NeuralNetwork", "DeepLearning", "Python"], "context": "\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\n\u4ee5\u524d\u540c\u69d8\u306e\u5206\u985e\u3092scikit-learn\u3092\u4f7f\u7528\u3057\u3066\u3084\u3063\u3066\u307f\u305f\u3053\u3068\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3042\u308bchainer\u3092\u4f7f\u7528\u3057\u3066\u3001\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u5206\u985e\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n(*) \u4eca\u56de\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6b63\u78ba\u3055\u306b\u3042\u307e\u308a\u81ea\u4fe1\u304c\u306a\u3044\u305f\u3081\u3001\u3082\u3057\u9593\u9055\u3044\u7b49\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u662f\u975e\u30b3\u30e1\u30f3\u30c8\u7b49\u3067\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306f\u524d\u56de\u3068\u540c\u69d8\u3001eminem\u3055\u3093\u3068snoop dogg\u3055\u3093\u306e\u6b4c\u8a5e\u3092\u4f7f\u7528\u3055\u305b\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002\n\n\u624b\u9806\n\n\u6b4c\u8a5e\u3092\u6570\u3048\u4e0a\u3052\u306b\u3088\u308a\u4f5c\u6210\u3055\u308c\u305f\u3001\u51fa\u73fe\u56de\u6570\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8a13\u7df4\u7528\u3068\u3001\u30c6\u30b9\u30c8\u7528\u306b\u5206\u5272\u3059\u308b\nchainer\u3067\u5fc5\u8981\u306a\u3082\u306e\u3092\u521d\u671f\u5316\u3057\n\u5b66\u7fd2\u30b5\u30a4\u30af\u30eb\u3092\u56de\u3057\u3066\n\n\n1. \u6b4c\u8a5e\u3092\u6570\u3048\u4e0a\u3052\u306b\u3088\u308a\u4f5c\u6210\u3055\u308c\u305f\u3001\u51fa\u73fe\u56de\u6570\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\n\u3053\u306e\u4f5c\u696d\u306f\u524d\u56de\u306bTfidf\u306e\u30d9\u30af\u30c8\u30eb\u3092scikit-learn\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3057\u305f\u306e\u3068\u540c\u69d8\u306b\u3001scikit-learn\u306b\u983c\u3063\u3066\u30d9\u30af\u30c8\u30eb\u5316\u3057\u307e\u3059\u3002\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(lyrics)\n\n\u3053\u308c\u3060\u3051\u3067\u3059\uff01\nlyrics\u306b\u306f\u4e00\u3064\u306e\u6b4c\u8a5e\u3092\u4e00\u3064\u306e\u8981\u7d20\u3068\u3057\u3066\u3044\u308b\u914d\u5217\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u306evectorizer\u306f\u5f8c\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n2. \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8a13\u7df4\u7528\u3068\u3001\u30c6\u30b9\u30c8\u7528\u306b\u5206\u5272\u3059\u308b\n\u3053\u3053\u3067\u306f\u4ee5\u4e0b\u306e\u56db\u3064\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u307e\u3059\n- x_train (\u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf, \u6b4c\u8a5e)\n- t_train (\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308b\u6b63\u89e3\u30e9\u30d9\u30eb, eminem(0) \u304b snoop(1)\u304b)\n- y_test (\u30c6\u30b9\u30c8\u6642\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf, \u6b4c\u8a5e)\n- t_test (\u30c6\u30b9\u30c8\u6642\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308b\u6b63\u89e3\u30e9\u30d9\u30eb)\n\u5b9f\u969b\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\uff08\u52b9\u7387\u304c\u60aa\u305d\u3046\u306a\u3084\u308a\u65b9\u3067\u3059\u304c\u3001\u3001\u3001\uff09\nx_train = np.array(eminem_lyrics[:int(len(eminem_lyrics)*0.8)] + snoop_lyrics[:int(len(snoop_lyrics)*0.8)])\nt_train = np.array([0] * int(len(eminem_lyrics)*0.8) + [1] * int(len(snoop_lyrics)*0.8)).astype(np.int32)\nx_test = np.array(eminem_lyrics[-int(len(eminem_lyrics)*0.2):] + snoop_lyrics[-int(len(snoop_lyrics)*0.2):])\nt_test = np.array([0] * int(len(eminem_lyrics)*0.2) + [1] * int(len(snoop_lyrics)*0.2)).astype(np.int32)\n\n\n3. chainer\u3067\u5fc5\u8981\u306a\u3082\u306e\u3092\u521d\u671f\u5316\nchainer\u3067\u5b9a\u7fa9\u3057\u305f\u30e2\u30c7\u30eb\u3068\u3001chainer\u63d0\u4f9b\u306e\u6700\u9069\u5316\u95a2\u6570\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\npy3\nmodel = MyChain()\noptimizer = optimizers.SGD()\noptimizer.setup(model)\n\n\n4. \u5b66\u7fd2\u30b5\u30a4\u30af\u30eb\u3092\u56de\u3057\u3066\u307f\u308b\nfor j in tqdm(range(epoch)):\n    sfindx = np.random.permutation(train_N)\n    # train\n    for i in range(0, train_N, bs):\n        x_text = x_train[sfindx[i:i+bs]]\n        x_vecs = vectorizer.transform(x_text).toarray()\n        x_vecs = np.array(x_vecs).astype(np.float32)\n        x = Variable(x_vecs)\n        t = Variable(t_train[sfindx[i:i+bs]])\n        model.cleargrads()\n        loss = model(x, t)\n        loss.backward()\n        optimizer.update()\n\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306fnumpy\u306erandom.permutation()\u3067\u914d\u5217\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\u305f\u3081\u306e\u3044\u3093\u3067\u3063\u304f\u3059\u3092\u4f5c\u6210\u3057\u3001\n\u5148\u307b\u3069\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u305fvectorizer\u3067\u6b4c\u8a5e\u3092\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u305f\u4e0a\u3067\u3001\nchainer.Variable()\u3067chainer\u304c\u53d7\u3051\u4ed8\u3051\u3066\u304f\u308c\u308b\u5f62\u306b\u5909\u63db\u3057\u3001\nmodel\u306b\u6e21\u3057\u3066\u3042\u3052\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\u305d\u306e\u30e2\u30c7\u30eb\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nclass MyChain(Chain):\n    def __init__(self):\n        super(MyChain, self).__init__(\n            l1=L.Linear(None, 2),\n        )\n    def __call__(self, x, y, train=True):\n        return F.softmax_cross_entropy(self.fwd(x, train=train), y)\n    def fwd(self, x, train=True):\n        return self.l1(x)\n\n\u5b66\u7fd2\u30b5\u30a4\u30af\u30eb\u306b\u95a2\u3057\u3066\u306f\u4ee5\u4e0a\u306b\u306a\u308a\u307e\u3059\u3002\u8a73\u3057\u304f\u306f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u65b9\u3092\u610f\u5473\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\n\n\u7d50\u679c\nepoch = 15\nbatch size = 10\n\n\u3068\u3044\u3046\u3001\u4f55\u3082\u8003\u3048\u305a\u306b\u4f55\u3068\u306a\u304f\u8a2d\u5b9a\u3057\u3066\u5b66\u7fd2\u3092\u56de\u3057\u3066\u307f\u3066\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u6b63\u7b54\u7387\u3092\u51fa\u3057\u3066\u307f\u305f\u3068\u3053\u308d91.6%\u307b\u3069\u306b\u306a\u308a\u307e\u3057\u305f\uff01\n\n\u611f\u60f3\nchainer\u304c\u672c\u5f53\u306b\u6271\u3044\u3084\u3059\u304f\u3001\u6df1\u5c64\u5b66\u7fd2\u3061\u3087\u3073\u3063\u3068\u3060\u3051\u3057\u304b\u52c9\u5f37\u3057\u305f\u3053\u3068\u304c\u306a\u3044\u50d5\u3067\u3082\u3001\u4e00\u5fdc\u4f55\u304b\u3057\u3089\u306e\u5b66\u7fd2\u306f\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u611f\u3058\u3067\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3068\u308a\u3042\u3048\u305achainer\u3067\u4f55\u304b\u3057\u3089\u3084\u3063\u3066\u307f\u305f\u3044\u3063\u3066\u3053\u3068\u3067\u3001\u4f55\u3082\u8003\u3048\u305a\u306b\u3068\u308a\u3042\u3048\u305a\u30e2\u30c7\u30eb\u7b49\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u304c\u3001\u6b21\u56de\u304b\u3089\u306f\u3061\u3083\u3093\u3068\u76ee\u7684\u3092\u6301\u3061\u3001\u5927\u304d\u3081\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u5b66\u7fd2\u3092\u3057\u3066\u307f\u305f\u3044\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://github.com/sobamchan/eminem_snoop_chainer)\u306b\u3042\u308a\u307e\u3059\u3002\n[\u4ee5\u524d](http://qiita.com/sobamchan/items/24c3616aac81aa86f74d)\u540c\u69d8\u306e\u5206\u985e\u3092scikit-learn\u3092\u4f7f\u7528\u3057\u3066\u3084\u3063\u3066\u307f\u305f\u3053\u3068\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3042\u308bchainer\u3092\u4f7f\u7528\u3057\u3066\u3001\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u5206\u985e\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n(*) \u4eca\u56de\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u6b63\u78ba\u3055\u306b\u3042\u307e\u308a\u81ea\u4fe1\u304c\u306a\u3044\u305f\u3081\u3001\u3082\u3057\u9593\u9055\u3044\u7b49\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u662f\u975e\u30b3\u30e1\u30f3\u30c8\u7b49\u3067\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306f\u524d\u56de\u3068\u540c\u69d8\u3001[eminem](https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%9F%E3%83%8D%E3%83%A0)\u3055\u3093\u3068[snoop dogg](https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%8C%E3%83%BC%E3%83%97%E3%83%BB%E3%83%89%E3%83%83%E3%82%B0)\u3055\u3093\u306e\u6b4c\u8a5e\u3092\u4f7f\u7528\u3055\u305b\u3066\u3082\u3089\u3044\u307e\u3057\u305f\u3002\n\n## \u624b\u9806\n1. \u6b4c\u8a5e\u3092\u6570\u3048\u4e0a\u3052\u306b\u3088\u308a\u4f5c\u6210\u3055\u308c\u305f\u3001\u51fa\u73fe\u56de\u6570\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\n2. \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8a13\u7df4\u7528\u3068\u3001\u30c6\u30b9\u30c8\u7528\u306b\u5206\u5272\u3059\u308b\n3. chainer\u3067\u5fc5\u8981\u306a\u3082\u306e\u3092\u521d\u671f\u5316\u3057\n4. \u5b66\u7fd2\u30b5\u30a4\u30af\u30eb\u3092\u56de\u3057\u3066\n\n## 1. \u6b4c\u8a5e\u3092\u6570\u3048\u4e0a\u3052\u306b\u3088\u308a\u4f5c\u6210\u3055\u308c\u305f\u3001\u51fa\u73fe\u56de\u6570\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3059\u308b\n\u3053\u306e\u4f5c\u696d\u306f\u524d\u56de\u306bTfidf\u306e\u30d9\u30af\u30c8\u30eb\u3092scikit-learn\u3092\u4f7f\u7528\u3057\u3066\u4f5c\u6210\u3057\u305f\u306e\u3068\u540c\u69d8\u306b\u3001scikit-learn\u306b\u983c\u3063\u3066\u30d9\u30af\u30c8\u30eb\u5316\u3057\u307e\u3059\u3002\n\n```py3\nfrom sklearn.feature_extraction.text import CountVectorizer\nvectorizer = CountVectorizer(lyrics)\n```\n\u3053\u308c\u3060\u3051\u3067\u3059\uff01\nlyrics\u306b\u306f\u4e00\u3064\u306e\u6b4c\u8a5e\u3092\u4e00\u3064\u306e\u8981\u7d20\u3068\u3057\u3066\u3044\u308b\u914d\u5217\u304c\u4ee3\u5165\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u306evectorizer\u306f\u5f8c\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n## 2. \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u8a13\u7df4\u7528\u3068\u3001\u30c6\u30b9\u30c8\u7528\u306b\u5206\u5272\u3059\u308b\n\u3053\u3053\u3067\u306f\u4ee5\u4e0b\u306e\u56db\u3064\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u307e\u3059\n- x_train (\u5b66\u7fd2\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf, \u6b4c\u8a5e)\n- t_train (\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308b\u6b63\u89e3\u30e9\u30d9\u30eb, eminem(0) \u304b snoop(1)\u304b)\n- y_test (\u30c6\u30b9\u30c8\u6642\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf, \u6b4c\u8a5e)\n- t_test (\u30c6\u30b9\u30c8\u6642\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308b\u6b63\u89e3\u30e9\u30d9\u30eb)\n\n\u5b9f\u969b\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\uff08\u52b9\u7387\u304c\u60aa\u305d\u3046\u306a\u3084\u308a\u65b9\u3067\u3059\u304c\u3001\u3001\u3001\uff09\n\n```py3\nx_train = np.array(eminem_lyrics[:int(len(eminem_lyrics)*0.8)] + snoop_lyrics[:int(len(snoop_lyrics)*0.8)])\nt_train = np.array([0] * int(len(eminem_lyrics)*0.8) + [1] * int(len(snoop_lyrics)*0.8)).astype(np.int32)\nx_test = np.array(eminem_lyrics[-int(len(eminem_lyrics)*0.2):] + snoop_lyrics[-int(len(snoop_lyrics)*0.2):])\nt_test = np.array([0] * int(len(eminem_lyrics)*0.2) + [1] * int(len(snoop_lyrics)*0.2)).astype(np.int32)\n```\n\n## 3. chainer\u3067\u5fc5\u8981\u306a\u3082\u306e\u3092\u521d\u671f\u5316\nchainer\u3067\u5b9a\u7fa9\u3057\u305f\u30e2\u30c7\u30eb\u3068\u3001chainer\u63d0\u4f9b\u306e\u6700\u9069\u5316\u95a2\u6570\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n```py3\nmodel = MyChain()\noptimizer = optimizers.SGD()\noptimizer.setup(model)\n```\n\n## 4. \u5b66\u7fd2\u30b5\u30a4\u30af\u30eb\u3092\u56de\u3057\u3066\u307f\u308b\n```py3\nfor j in tqdm(range(epoch)):\n    sfindx = np.random.permutation(train_N)\n    # train\n    for i in range(0, train_N, bs):\n        x_text = x_train[sfindx[i:i+bs]]\n        x_vecs = vectorizer.transform(x_text).toarray()\n        x_vecs = np.array(x_vecs).astype(np.float32)\n        x = Variable(x_vecs)\n        t = Variable(t_train[sfindx[i:i+bs]])\n        model.cleargrads()\n        loss = model(x, t)\n        loss.backward()\n        optimizer.update()\n```\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306fnumpy\u306erandom.permutation()\u3067\u914d\u5217\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\u305f\u3081\u306e\u3044\u3093\u3067\u3063\u304f\u3059\u3092\u4f5c\u6210\u3057\u3001\n\u5148\u307b\u3069\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u305fvectorizer\u3067\u6b4c\u8a5e\u3092\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u305f\u4e0a\u3067\u3001\nchainer.Variable()\u3067chainer\u304c\u53d7\u3051\u4ed8\u3051\u3066\u304f\u308c\u308b\u5f62\u306b\u5909\u63db\u3057\u3001\nmodel\u306b\u6e21\u3057\u3066\u3042\u3052\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u305d\u306e\u30e2\u30c7\u30eb\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```py3\nclass MyChain(Chain):\n    def __init__(self):\n        super(MyChain, self).__init__(\n            l1=L.Linear(None, 2),\n        )\n    def __call__(self, x, y, train=True):\n        return F.softmax_cross_entropy(self.fwd(x, train=train), y)\n    def fwd(self, x, train=True):\n        return self.l1(x)\n```\n\n\u5b66\u7fd2\u30b5\u30a4\u30af\u30eb\u306b\u95a2\u3057\u3066\u306f\u4ee5\u4e0a\u306b\u306a\u308a\u307e\u3059\u3002\u8a73\u3057\u304f\u306f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u65b9\u3092\u610f\u5473\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\n\n## \u7d50\u679c\n```\nepoch = 15\nbatch size = 10\n```\n\u3068\u3044\u3046\u3001\u4f55\u3082\u8003\u3048\u305a\u306b\u4f55\u3068\u306a\u304f\u8a2d\u5b9a\u3057\u3066\u5b66\u7fd2\u3092\u56de\u3057\u3066\u307f\u3066\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u6b63\u7b54\u7387\u3092\u51fa\u3057\u3066\u307f\u305f\u3068\u3053\u308d91.6%\u307b\u3069\u306b\u306a\u308a\u307e\u3057\u305f\uff01\n\n## \u611f\u60f3\nchainer\u304c\u672c\u5f53\u306b\u6271\u3044\u3084\u3059\u304f\u3001\u6df1\u5c64\u5b66\u7fd2\u3061\u3087\u3073\u3063\u3068\u3060\u3051\u3057\u304b\u52c9\u5f37\u3057\u305f\u3053\u3068\u304c\u306a\u3044\u50d5\u3067\u3082\u3001\u4e00\u5fdc\u4f55\u304b\u3057\u3089\u306e\u5b66\u7fd2\u306f\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u611f\u3058\u3067\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3068\u308a\u3042\u3048\u305achainer\u3067\u4f55\u304b\u3057\u3089\u3084\u3063\u3066\u307f\u305f\u3044\u3063\u3066\u3053\u3068\u3067\u3001\u4f55\u3082\u8003\u3048\u305a\u306b\u3068\u308a\u3042\u3048\u305a\u30e2\u30c7\u30eb\u7b49\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u304c\u3001\u6b21\u56de\u304b\u3089\u306f\u3061\u3083\u3093\u3068\u76ee\u7684\u3092\u6301\u3061\u3001\u5927\u304d\u3081\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u5b66\u7fd2\u3092\u3057\u3066\u307f\u305f\u3044\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n"}