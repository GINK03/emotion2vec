{"context": " More than 1 year has passed since last update.\u767e\u805e\u306f\u4e00\u898b\u306b\u5982\u304b\u305a.\u300c\u80fd\u66f8\u304d\u306f\u3044\u3044\u304b\u3089\u300d\u3068\u3044\u3046\u5411\u304d\u306f, \u4e2d\u7a0b\u306e\u52d5\u753b\u3092\u307e\u305a\u3054\u89a7\u3044\u305f\u3060\u3051\u308c\u3070\u5206\u304b\u308a\u6613\u3044\u3068\u601d\u3046.\n\u4e00\u5fdc\u8a18\u4e8b\u306f\u9806\u3092\u8ffd\u3063\u3066\u8aac\u660e\u3059\u308b.\n\n\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u958b\u767a\nNtmux \u306f\u7aef\u672b\u4e0a\u3067\u52d5\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067, \u30dd\u30fc\u30c8\u756a\u53f7\u306e\u5f8c\u306b\u7d9a\u3051\u3066\u30b3\u30de\u30f3\u30c9\u3068\u5f15\u6570\u3092\u4e0e\u3048\u3066\u5b9f\u884c\u3059\u308b\u3068, \u30b3\u30de\u30f3\u30c9\u3092\u7aef\u672b\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u304c, \u5b9f\u306f\u6307\u5b9a\u3057\u305f\u30dd\u30fc\u30c8\u3067\u63a5\u7d9a\u3092\u5f85\u3061\u53d7\u3051\u308b TCP \u30b5\u30fc\u30d0\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30f3\u30c9\u3067\u8d77\u52d5\u3057\u3066\u304a\u308a, \u3053\u306e\u30dd\u30fc\u30c8\u306b TCP \u63a5\u7d9a\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u9001\u4fe1\u3057\u3066\u304d\u305f\u30d0\u30a4\u30c8\u5217\u306f, \u5168\u3066\u7aef\u672b\u304b\u3089\u306e\u5165\u529b\u306e\u3088\u3046\u306b\u30b3\u30de\u30f3\u30c9\u306b\u5165\u529b\u3055\u308c\u308b.\n\u3053\u306e ntmux \u3092\u4f7f\u3046\u3068\u7aef\u672b\u4e0a\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30a8\u30c7\u30a3\u30bf\u3084\u30b7\u30a7\u30eb\u3082\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b (\u8a73\u3057\u304f\u306f\u30ad\u30c3\u30c1\u30f3\u30b7\u30f3\u30af\u306e\u5916\u3078\u51fa\u3088\u3046\u3092\u53c2\u7167) \u306e\u3067\u3042\u308b\u304c, \u3053\u3053\u3067\u306f\u300c\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u7de8\u96c6\u4e2d\u306e\u30b3\u30fc\u30c9\u7247\u3092 ntmux \u4e0a\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306b\u9001\u4fe1\u3057\u3066\u8a55\u4fa1\u7d50\u679c\u3092\u78ba\u8a8d\u3057\u306a\u304c\u3089, \u30b3\u30fc\u30c9\u3092\u7de8\u96c6\u3059\u308b\u300d\u3068\u3044\u3046\u4ee3\u8868\u7684\u306a\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3057\u305f\u3044.\n\n\u30de\u30eb\u30c1\u30ea\u30f3\u30ac\u30eb\u958b\u767a\n\u305d\u306e\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30b5\u30fc\u30d0\u304c\u5b58\u5728\u3057, \u4f7f\u3063\u3066\u3044\u308b\u30a8\u30c7\u30a3\u30bf\u7528\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u30b5\u30fc\u30d0\u3068\u901a\u4fe1\u3059\u308b\u30d7\u30e9\u30b0\u30a4\u30f3\u304c\u5b58\u5728\u3059\u308c\u3070, \u4e0a\u8ff0\u3057\u305f\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u958b\u767a\u306f\u53ef\u80fd\u3067\u3042\u308b\u3057, \u3082\u3061\u308d\u3093 ntmux \u3092\u7528\u3044\u305f\u5834\u5408\u3088\u308a\u3082\u5404\u8a00\u8a9e\u306e\u6a5f\u80fd\u3092\u5341\u5206\u306b\u5f15\u304d\u51fa\u305b\u308b. LISP \u7cfb\u306e\u958b\u767a\u8005\u306f\u5927\u62b5\u3053\u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u958b\u767a\u3092\u304a\u3053\u306a\u3063\u3066\u3044\u308b\u3060\u308d\u3046.\n\u3057\u304b\u3057 ntmux \u3092\u4f7f\u3048\u3070, \u7c21\u6613\u7684\u306a\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u958b\u767a\u74b0\u5883\u3092, \u8a00\u8a9e\u306b\u4f9d\u3089\u306a\u3044\u7d71\u4e00\u3057\u305f\u65b9\u6cd5\u3067\u6e96\u5099\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\n\n\u8907\u6570\u8a00\u8a9e\u3092\u983b\u7e41\u306b\u5229\u7528\u3059\u308b\u5834\u5408\n\u5e38\u7528\u3057\u3066\u3044\u306a\u3044\u8a00\u8a9e\u3092\u8a66\u3057\u306b\u4f7f\u3063\u3066\u307f\u308b\u5834\u5408\u306a\u3069, \u3042\u307e\u308a\u74b0\u5883\u8a2d\u5b9a\u306b\u52b4\u529b\u3092\u907f\u3051\u306a\u3044\u5834\u5408\n\n\u306b\u975e\u5e38\u306b\u6709\u5229\u3060.\n\nvim \u3092\u7528\u3044\u305f\u4f8b\nntmux \u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3042\u308b\u3068\u3059\u308b.\n\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb ntmux.vim \u3092\u6e96\u5099\u3059\u308b.\n\nntmux.vim\nfunction! Send(host, port, msg)\n  python <<EOF\nimport vim\nimport socket\ncs = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ncs.connect((vim.eval('a:host'), int(vim.eval('a:port'))))\ncs.sendall(vim.eval('a:msg'))\ncs.close()\nEOF\nendfunction\n\nfunction! GetSelected()\n  let tmp = @@\n  silent normal gvy\n  let selected = @@\n  let @@ = tmp\n  return selected\nendfunction\n\ncommand! -nargs=1 PSend call Send('localhost', <args>, GetSelected())\nvnoremap cp <Esc>:PSend port<CR>\n\n\n\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092 :source \u306a\u3069\u306a\u3093\u3089\u304b\u306e\u65b9\u6cd5\u3067 vim \u306b\u30ed\u30fc\u30c9\u3057\u3066\u304a\u304f.\nPython \u62e1\u5f35\u304c\u5165\u3063\u305f vim \u3067\u306a\u3044\u3068\u52d5\u304b\u306a\u3044.\n\u62d9\u3044\u30b3\u30fc\u30c9\u3060\u304c, \u3042\u304f\u307e\u3067\u4f8b\u3068\u3057\u3066\u5bb9\u8d66\u3044\u305f\u3060\u304d\u305f\u3044.\n:let port = port\u756a\u53f7 \u306a\u3069\u3067, port \u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3068, \u30f4\u30a3\u30b8\u30e5\u30a2\u30eb\u30e2\u30fc\u30c9\u3067\u7bc4\u56f2\u9078\u629e\u3057\u3066 cp \u3068\u30bf\u30a4\u30d7\u3057\u305f\u6642\u306b, \u6307\u5b9a\u3057\u3066\u304a\u3044\u305f\u30dd\u30fc\u30c8\u306e TCP \u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3057, \u9078\u629e\u7bc4\u56f2\u306e\u6587\u5b57\u5217\u3092\u9001\u4fe1\u3059\u308b.\u3000\u5225\u306e\u7aef\u672b\u3067 ntmux port\u756a\u53f7 \u4e0a\u3067\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u304c\u52d5\u4f5c\u3057\u3066\u3044\u308c\u3070, \u305d\u308c\u306f\u3059\u306a\u308f\u3061\u305d\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306b\u9001\u3063\u305f\u6587\u5b57\u5217\u3092\u8a55\u4fa1\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b.\n\u4f8b\u3048\u3070\u3042\u308b\u7aef\u672b\u3067\n% ntmux 5000 irb\nirb(main):001:0> \n\n\u306a\u3069\u306e\u3088\u3046\u306b Ruby \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u8d77\u52d5\u3057\u3066\u304a\u304f.\nvim \u306e\u65b9\u3067\u9069\u5f53\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u7de8\u96c6\u3057, \u30b3\u30fc\u30c9\u7247, \u4f8b\u3048\u3070 (1..10).map{|x| x * x} \u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u7247\u3092\u66f8\u304d, \u30b3\u30fc\u30c9\u306e\u5148\u982d\u3067 v \u3092\u62bc\u3057\u3066\u30d3\u30b8\u30e5\u30a2\u30eb\u30e2\u30fc\u30c9\u306b\u5165\u3063\u3066\u30b3\u30fc\u30c9\u7247\u306e\u672b\u5c3e\u306b\u79fb\u52d5, cp \u3068\u30bf\u30a4\u30d7\u3059\u308b\u3068, \u5148\u306e\u7aef\u672b\u306e\u65b9\u306b\u30b3\u30fc\u30c9\u304c\u9001\u3089\u308c\u308b.\n\u3053\u306e\u6642, \u9001\u4fe1\u30b3\u30fc\u30c9\u7247\u306b\u6539\u884c\u304c\u542b\u307e\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3068, \u3059\u3050\u306b\u8a55\u4fa1\u3055\u305b\u3089\u3066,\nirb(main):001:0> (1..10).map{|x| x * x}\n=> [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\u306e\u3088\u3046\u306b\u5148\u306e\u7aef\u672b\u306b\u8a55\u4fa1\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b\u3060\u308d\u3046.\n\u3082\u3061\u308d\u3093\u4ed6\u306e\u30a8\u30c7\u30a3\u30bf\u3067\u3082, \u6a5f\u80fd\u62e1\u5f35\u306b\u4f7f\u3048\u308b\u8a00\u8a9e (vim \u306a\u3089 VimScript, Emacs \u306a\u3089 Emacs Lisp) \u306b TCP \u63a5\u7d9a\u306e\u6a5f\u80fd\u304c\u3042\u3063\u3066, \u6307\u5b9a\u7bc4\u56f2\u306e\u6587\u5b57\u5217\u3092\u9001\u4fe1\u3067\u304d\u3055\u3048\u3059\u308c\u3070, \u540c\u3058\u3053\u3068\u304c\u3067\u304d\u308b.\n\n\u30c7\u30e2\n\u30c7\u30e2\u3068\u3057\u3066, \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30aa\u30a4\u30e9\u30fc\u3000\u554f\u984c 6 :\n10\u4ee5\u4e0b\u306e\u81ea\u7136\u6570\u306b\u3064\u3044\u3066, \u4e8c\u4e57\u306e\u548c\u3068\u548c\u306e\u4e8c\u4e57\u306e\u5dee\u306f\n    (1 + 2 + ... 10)2 - (12 + 22 + ... + 102)\n      = 552 - 385\n      = 3025 - 385\n      = 2640\n\u3067\u3042\u308b.\n100 \u4ee5\u4e0b\u306e\u81ea\u7136\u6570\u306b\u3064\u3044\u3066, \u4e8c\u4e57\u306e\u548c\u3068\u548c\u306e\u4e8c\u4e57\u306e\u5dee\u3092\u6c42\u3081\u3088.\n\n\u306b\u5bfe\u3057\u3066\u3044\u304f\u3064\u304b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u89e3\u6cd5\u3092\u89e3\u8aac\u3059\u308b\u6587\u66f8\u3092, \u305d\u308c\u305e\u308c\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u306a\u304c\u3089 vim \u3067\u57f7\u7b46\u3059\u308b\u3068\u3044\u3046 (\u308f\u3056\u3068\u3089\u3057\u3044) \u30c7\u30e2\u52d5\u753b\u3092\u64ae\u3063\u3066\u307f\u305f.\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u9078\u629e\u304c\u7570\u306a\u308b\u4ee5\u5916, \u4e09\u3064\u306e\u52d5\u753b\u306f\u307b\u3068\u3093\u3069\u540c\u3058\u5185\u5bb9\u3067\u3042\u308b. \u3042\u307e\u308a\u8a00\u8a9e\u304c\u591a\u3059\u304e\u3066\u3082\u5197\u9577\u306a\u306e\u3067, \u4e09\u3064\u305a\u3064\u306a\u308b\u3079\u304f\u4f3c\u901a\u3063\u3066\u3044\u306a\u3044\u8a00\u8a9e\u3092\u6df7\u305c\u305f\u52d5\u753b\u3092\u7528\u610f\u3057\u305f. \u8208\u5473\u306e\u3042\u308b\u8a00\u8a9e\u304c\u542b\u307e\u308c\u308b\u52d5\u753b\u3092\u53c2\u7167\u3044\u305f\u3060\u304d\u305f\u3044.\n\u4ee5\u4e0b\u306e\u30c7\u30e2\u3067, \u5404\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5f8c, \u4e00\u5207\u8a2d\u5b9a\u3092\u884c\u3063\u3066\u304a\u3089\u305a, vim \u5074\u3067\u3082\u8a00\u8a9e\u6bce\u306e\u8a2d\u5b9a\u306f\u4e00\u5207\u884c\u3063\u3066\u3044\u306a\u3044.\nClojure \u306f clojure-1.5.1.jar \u306b CLASSPATH \u3092\u901a\u3057\u305f\u3060\u3051.\n\u305f\u3060\u3057, \u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u304c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u7de8\u96c6\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u306a\u3044\u5834\u5408, rlwrap \u3092\u7528\u3044\u3066\u3044\u308b.\n\nClojure, Haskell and JavaScript (node.js) \u7248\u306e\u30c7\u30e2\u52d5\u753b\n\n\nOCaml, Common Lisp (sbcl) and Python \u7248\u306e\u30c7\u30e2\u52d5\u753b\n\n\nScala, Scheme (Gauche) and Ruby \u7248\u306e\u30c7\u30e2\u52d5\u753b\n\n\n\u30b3\u30fc\u30c9\n\u30c7\u30e2\u306b\u767b\u5834\u3059\u308b\u5404\u8a00\u8a9e\u3067\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30aa\u30a4\u30e9\u30fc\u554f\u984c 6 \u3078\u306e\u89e3\u6cd5\u306e\u4f8b\u3092\u4ee5\u4e0b\u306b\u63b2\u8f09\u3057\u3066\u304a\u304f.\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306b\u8a55\u4fa1\u3055\u305b\u308b\u30b3\u30fc\u30c9\u7247\u3067\u3042\u308a, \u5358\u4f53\u306e\u5b9f\u884c\u53ef\u80fd\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u3088\u3046\u306b\u306f\u8003\u616e\u3055\u308c\u3066\u3044\u306a\u3044.\n\u3042\u304f\u307e\u3067\u4f8b\u793a\u306a\u306e\u3067, map \u3084 reduce \u306b\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3092\u6e21\u3059\u7df4\u7fd2\u3068\u3044\u3063\u305f\u66f8\u304d\u65b9\u306b\u3057\u3066\u3044\u308b. \u66f8\u304d\u65b9\u306f, \u3069\u306e\u8a00\u8a9e\u3067\u3082\u30fc\u8b70\u8ad6\u6210\u308a\u7acb\u3064\u3060\u308d\u3046.\n\nClojure\n\npep6.clj\n(- (#(* % %) (apply + (range 1 101)))\n   (apply + (map #(* % %) (range 1 101))))\n\n\n\nHaskell\n\npep6.hs\n((\\x -> x * x) $ foldl1 (+) [1..100])\n  - (foldl1 (+) $ map (\\x -> x * x) [1..100])\n\n\n\nJavaScript\n\npep6.js\nfunction range(s, n) {\n  var r = [], i;\n  for (i = s; i < n; i++)\n    r.push(i);\n  return r;\n}\n\n((function(x){return x * x;})(\n   range(1, 101).reduce(function(a, b){return a + b;}))\n -\n range(1, 101).map(function(x){return x * x;}\n   ).reduce(function(a, b){return a + b;}))\n\n\n\nOCaml\n\npep6.ml\nlet range s e =\n  let rec f r s e = if s = e then r else f (s::r) (s + 1) e\n  in List.rev @@ f [] s e;;\n\nlet foldl1 f xs = match xs with x::xs -> List.fold_left (+) x xs;;\n\n((fun x -> x * x) @@ foldl1 (+) @@ range 1 101)\n  - (foldl1 (+) @@ List.map (fun x -> x * x) @@ range 1 101);;\n\n\n\nCommon Lisp\n\npep6.cl\n(defun range (s e)\n  (loop for i from s to (1- e) collect i))\n\n(- (funcall (lambda (x) (* x x)) (apply #'+ (range 1 101)))\n   (apply #'+ (mapcar #'(lambda (x) (* x x)) (range 1 101))))\n\n\n\nPython\n\npep6.py\n((lambda x: x * x)(reduce(lambda a, b: a + b, range(1, 101)))\n  - reduce(lambda a, b: a + b, map(lambda x: x * x, range(1, 101))))\n\n\n\nScala\n\npep6.scala\n(((x:Int) => x * x)(List.range(1, 101).reduceLeft(_ + _))\n  - List.range(1, 101).map(x => x * x).reduceLeft(_ + _));\n\n\n\nScheme\n\npep6.scm\n(use srfi-1)\n(define (fold1 f s) (fold f (car s) (cdr s)))\n(- ((lambda (x) (* x x)) (fold1 + (iota 100 1)))\n   (fold1 + (map (lambda (x) (* x x)) (iota 100 1))))\n\n\n\nRuby\n\npep6.rb\n(1..100).inject(:+) ** 2 \\\n  - (1..100).map{|x| x * x}.inject(:+)\n\n\n\nConclusion\nNtmux \u3092\u7528\u3044\u308b\u3068, \u8907\u6570\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u306e\u958b\u767a\u306b\u304a\u3044\u3066,\n\n\u7aef\u672b\u3067\u52d5\u4f5c\u3059\u308b\u5404\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u304c\u3042\u308c\u3070, \u540c\u4e00\u306e\u30a8\u30c7\u30a3\u30bf\u3084 IDE \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5185\u90e8\u3067\u52d5\u4f5c\u3057\u3066\u3044\u306a\u304f\u3066\u3082,\n\u305d\u308c\u305e\u308c\u306e\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u30b5\u30fc\u30d0\u3092\u4f7f\u308f\u305a ntmux \u306e\u307f\u3092\u7528\u3044,\n\u958b\u767a\u74b0\u5883\u4e0a\u306b, \u305d\u308c\u305e\u308c\u306e\u8a00\u8a9e\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u306f\u306a\u304f, \u4e00\u3064\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u307f\u3092\u5c0e\u5165\u3057\u3066\n\n\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u958b\u767a\u304c\u884c\u3048\u308b.\n\n\u8ab2\u984c\n\nntmux\n\n\nntmux \u304b\u3089 TCP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30eb\u30fc\u30eb\u6c7a\u3081\u3068\u5b9f\u88c5\nIPv6 \u5bfe\u5fdc\nMacOS X \u4ee5\u5916\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3078\u306e\u5bfe\u5fdc\u3084\u52d5\u4f5c\u78ba\u8a8d\n\n\nvim \u30d7\u30e9\u30b0\u30a4\u30f3\nemacs \u30d7\u30e9\u30b0\u30a4\u30f3\n\n\u306a\u3069.\n\u6c42\u3080\u3054\u610f\u898b\u30fb\u3054\u5354\u529b.\n\n\u767e\u805e\u306f\u4e00\u898b\u306b\u5982\u304b\u305a.\u300c\u80fd\u66f8\u304d\u306f\u3044\u3044\u304b\u3089\u300d\u3068\u3044\u3046\u5411\u304d\u306f, \u4e2d\u7a0b\u306e\u52d5\u753b\u3092\u307e\u305a\u3054\u89a7\u3044\u305f\u3060\u3051\u308c\u3070\u5206\u304b\u308a\u6613\u3044\u3068\u601d\u3046.\n\u4e00\u5fdc\u8a18\u4e8b\u306f\u9806\u3092\u8ffd\u3063\u3066\u8aac\u660e\u3059\u308b.\n\n## \u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u958b\u767a\n\nNtmux \u306f\u7aef\u672b\u4e0a\u3067\u52d5\u4f5c\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067, \u30dd\u30fc\u30c8\u756a\u53f7\u306e\u5f8c\u306b\u7d9a\u3051\u3066\u30b3\u30de\u30f3\u30c9\u3068\u5f15\u6570\u3092\u4e0e\u3048\u3066\u5b9f\u884c\u3059\u308b\u3068, \u30b3\u30de\u30f3\u30c9\u3092\u7aef\u672b\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u304c, \u5b9f\u306f\u6307\u5b9a\u3057\u305f\u30dd\u30fc\u30c8\u3067\u63a5\u7d9a\u3092\u5f85\u3061\u53d7\u3051\u308b TCP \u30b5\u30fc\u30d0\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30f3\u30c9\u3067\u8d77\u52d5\u3057\u3066\u304a\u308a, \u3053\u306e\u30dd\u30fc\u30c8\u306b TCP \u63a5\u7d9a\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u9001\u4fe1\u3057\u3066\u304d\u305f\u30d0\u30a4\u30c8\u5217\u306f, \u5168\u3066\u7aef\u672b\u304b\u3089\u306e\u5165\u529b\u306e\u3088\u3046\u306b\u30b3\u30de\u30f3\u30c9\u306b\u5165\u529b\u3055\u308c\u308b.\n\n\u3053\u306e ntmux \u3092\u4f7f\u3046\u3068\u7aef\u672b\u4e0a\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30a8\u30c7\u30a3\u30bf\u3084\u30b7\u30a7\u30eb\u3082\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b (\u8a73\u3057\u304f\u306f[\u30ad\u30c3\u30c1\u30f3\u30b7\u30f3\u30af\u306e\u5916\u3078\u51fa\u3088\u3046](http://qiita.com/kohyama/items/e1c01b11943ebc146cfa)\u3092\u53c2\u7167) \u306e\u3067\u3042\u308b\u304c, \u3053\u3053\u3067\u306f\u300c\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u7de8\u96c6\u4e2d\u306e\u30b3\u30fc\u30c9\u7247\u3092 ntmux \u4e0a\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306b\u9001\u4fe1\u3057\u3066\u8a55\u4fa1\u7d50\u679c\u3092\u78ba\u8a8d\u3057\u306a\u304c\u3089, \u30b3\u30fc\u30c9\u3092\u7de8\u96c6\u3059\u308b\u300d\u3068\u3044\u3046\u4ee3\u8868\u7684\u306a\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3057\u305f\u3044.\n\n## \u30de\u30eb\u30c1\u30ea\u30f3\u30ac\u30eb\u958b\u767a\n\n\u305d\u306e\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u30b5\u30fc\u30d0\u304c\u5b58\u5728\u3057, \u4f7f\u3063\u3066\u3044\u308b\u30a8\u30c7\u30a3\u30bf\u7528\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u30b5\u30fc\u30d0\u3068\u901a\u4fe1\u3059\u308b\u30d7\u30e9\u30b0\u30a4\u30f3\u304c\u5b58\u5728\u3059\u308c\u3070, \u4e0a\u8ff0\u3057\u305f\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u958b\u767a\u306f\u53ef\u80fd\u3067\u3042\u308b\u3057, \u3082\u3061\u308d\u3093 ntmux \u3092\u7528\u3044\u305f\u5834\u5408\u3088\u308a\u3082\u5404\u8a00\u8a9e\u306e\u6a5f\u80fd\u3092\u5341\u5206\u306b\u5f15\u304d\u51fa\u305b\u308b. LISP \u7cfb\u306e\u958b\u767a\u8005\u306f\u5927\u62b5\u3053\u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u958b\u767a\u3092\u304a\u3053\u306a\u3063\u3066\u3044\u308b\u3060\u308d\u3046.\n\n\u3057\u304b\u3057 ntmux \u3092\u4f7f\u3048\u3070, \u7c21\u6613\u7684\u306a\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u958b\u767a\u74b0\u5883\u3092, \u8a00\u8a9e\u306b\u4f9d\u3089\u306a\u3044\u7d71\u4e00\u3057\u305f\u65b9\u6cd5\u3067\u6e96\u5099\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\n\n* \u8907\u6570\u8a00\u8a9e\u3092\u983b\u7e41\u306b\u5229\u7528\u3059\u308b\u5834\u5408\n* \u5e38\u7528\u3057\u3066\u3044\u306a\u3044\u8a00\u8a9e\u3092\u8a66\u3057\u306b\u4f7f\u3063\u3066\u307f\u308b\u5834\u5408\u306a\u3069, \u3042\u307e\u308a\u74b0\u5883\u8a2d\u5b9a\u306b\u52b4\u529b\u3092\u907f\u3051\u306a\u3044\u5834\u5408\n\n\u306b\u975e\u5e38\u306b\u6709\u5229\u3060.\n\n## vim \u3092\u7528\u3044\u305f\u4f8b\n\n[ntmux](https://github.com/kohyama/ntmux) \u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3042\u308b\u3068\u3059\u308b.\n\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb ntmux.vim \u3092\u6e96\u5099\u3059\u308b.\n\n```ntmux.vim\nfunction! Send(host, port, msg)\n  python <<EOF\nimport vim\nimport socket\ncs = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ncs.connect((vim.eval('a:host'), int(vim.eval('a:port'))))\ncs.sendall(vim.eval('a:msg'))\ncs.close()\nEOF\nendfunction\n\nfunction! GetSelected()\n  let tmp = @@\n  silent normal gvy\n  let selected = @@\n  let @@ = tmp\n  return selected\nendfunction\n\ncommand! -nargs=1 PSend call Send('localhost', <args>, GetSelected())\nvnoremap cp <Esc>:PSend port<CR>\n```\n\n\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092 :source \u306a\u3069\u306a\u3093\u3089\u304b\u306e\u65b9\u6cd5\u3067 vim \u306b\u30ed\u30fc\u30c9\u3057\u3066\u304a\u304f.\nPython \u62e1\u5f35\u304c\u5165\u3063\u305f vim \u3067\u306a\u3044\u3068\u52d5\u304b\u306a\u3044.\n\u62d9\u3044\u30b3\u30fc\u30c9\u3060\u304c, \u3042\u304f\u307e\u3067\u4f8b\u3068\u3057\u3066\u5bb9\u8d66\u3044\u305f\u3060\u304d\u305f\u3044.\n\n:let port = *port\u756a\u53f7* \u306a\u3069\u3067, `port` \u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3068, \u30f4\u30a3\u30b8\u30e5\u30a2\u30eb\u30e2\u30fc\u30c9\u3067\u7bc4\u56f2\u9078\u629e\u3057\u3066 cp \u3068\u30bf\u30a4\u30d7\u3057\u305f\u6642\u306b, \u6307\u5b9a\u3057\u3066\u304a\u3044\u305f\u30dd\u30fc\u30c8\u306e TCP \u30b5\u30fc\u30d0\u306b\u63a5\u7d9a\u3057, \u9078\u629e\u7bc4\u56f2\u306e\u6587\u5b57\u5217\u3092\u9001\u4fe1\u3059\u308b.\u3000\u5225\u306e\u7aef\u672b\u3067 ntmux *port\u756a\u53f7* \u4e0a\u3067\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u304c\u52d5\u4f5c\u3057\u3066\u3044\u308c\u3070, \u305d\u308c\u306f\u3059\u306a\u308f\u3061\u305d\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306b\u9001\u3063\u305f\u6587\u5b57\u5217\u3092\u8a55\u4fa1\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b.\n\n\u4f8b\u3048\u3070\u3042\u308b\u7aef\u672b\u3067\n\n    % ntmux 5000 irb\n    irb(main):001:0> \n\n\u306a\u3069\u306e\u3088\u3046\u306b Ruby \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u8d77\u52d5\u3057\u3066\u304a\u304f.\n\nvim \u306e\u65b9\u3067\u9069\u5f53\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u7de8\u96c6\u3057, \u30b3\u30fc\u30c9\u7247, \u4f8b\u3048\u3070 `(1..10).map{|x| x * x}` \u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u7247\u3092\u66f8\u304d, \u30b3\u30fc\u30c9\u306e\u5148\u982d\u3067 v \u3092\u62bc\u3057\u3066\u30d3\u30b8\u30e5\u30a2\u30eb\u30e2\u30fc\u30c9\u306b\u5165\u3063\u3066\u30b3\u30fc\u30c9\u7247\u306e\u672b\u5c3e\u306b\u79fb\u52d5, `cp` \u3068\u30bf\u30a4\u30d7\u3059\u308b\u3068, \u5148\u306e\u7aef\u672b\u306e\u65b9\u306b\u30b3\u30fc\u30c9\u304c\u9001\u3089\u308c\u308b.\n\u3053\u306e\u6642, \u9001\u4fe1\u30b3\u30fc\u30c9\u7247\u306b\u6539\u884c\u304c\u542b\u307e\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3068, \u3059\u3050\u306b\u8a55\u4fa1\u3055\u305b\u3089\u3066,\n\n    irb(main):001:0> (1..10).map{|x| x * x}\n    => [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\n\u306e\u3088\u3046\u306b\u5148\u306e\u7aef\u672b\u306b\u8a55\u4fa1\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u308b\u3060\u308d\u3046.\n\n\u3082\u3061\u308d\u3093\u4ed6\u306e\u30a8\u30c7\u30a3\u30bf\u3067\u3082, \u6a5f\u80fd\u62e1\u5f35\u306b\u4f7f\u3048\u308b\u8a00\u8a9e (vim \u306a\u3089 VimScript, Emacs \u306a\u3089 Emacs Lisp) \u306b TCP \u63a5\u7d9a\u306e\u6a5f\u80fd\u304c\u3042\u3063\u3066, \u6307\u5b9a\u7bc4\u56f2\u306e\u6587\u5b57\u5217\u3092\u9001\u4fe1\u3067\u304d\u3055\u3048\u3059\u308c\u3070, \u540c\u3058\u3053\u3068\u304c\u3067\u304d\u308b.\n\n## \u30c7\u30e2\n\n\u30c7\u30e2\u3068\u3057\u3066, [\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30aa\u30a4\u30e9\u30fc\u3000\u554f\u984c 6](https://projecteuler.net/problem=6) :\n<code><pre>10\u4ee5\u4e0b\u306e\u81ea\u7136\u6570\u306b\u3064\u3044\u3066, \u4e8c\u4e57\u306e\u548c\u3068\u548c\u306e\u4e8c\u4e57\u306e\u5dee\u306f\n    (1 + 2 + ... 10)<sup>2</sup> - (1<sup>2</sup> + 2<sup>2</sup> + ... + 10<sup>2</sup>)\n      = 55<sup>2</sup> - 385\n      = 3025 - 385\n      = 2640\n\u3067\u3042\u308b.\n100 \u4ee5\u4e0b\u306e\u81ea\u7136\u6570\u306b\u3064\u3044\u3066, \u4e8c\u4e57\u306e\u548c\u3068\u548c\u306e\u4e8c\u4e57\u306e\u5dee\u3092\u6c42\u3081\u3088.</pre></code>\n\u306b\u5bfe\u3057\u3066\u3044\u304f\u3064\u304b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u89e3\u6cd5\u3092\u89e3\u8aac\u3059\u308b\u6587\u66f8\u3092, \u305d\u308c\u305e\u308c\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u306a\u304c\u3089 vim \u3067\u57f7\u7b46\u3059\u308b\u3068\u3044\u3046 (\u308f\u3056\u3068\u3089\u3057\u3044) \u30c7\u30e2\u52d5\u753b\u3092\u64ae\u3063\u3066\u307f\u305f.\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u9078\u629e\u304c\u7570\u306a\u308b\u4ee5\u5916, \u4e09\u3064\u306e\u52d5\u753b\u306f\u307b\u3068\u3093\u3069\u540c\u3058\u5185\u5bb9\u3067\u3042\u308b. \u3042\u307e\u308a\u8a00\u8a9e\u304c\u591a\u3059\u304e\u3066\u3082\u5197\u9577\u306a\u306e\u3067, \u4e09\u3064\u305a\u3064\u306a\u308b\u3079\u304f\u4f3c\u901a\u3063\u3066\u3044\u306a\u3044\u8a00\u8a9e\u3092\u6df7\u305c\u305f\u52d5\u753b\u3092\u7528\u610f\u3057\u305f. \u8208\u5473\u306e\u3042\u308b\u8a00\u8a9e\u304c\u542b\u307e\u308c\u308b\u52d5\u753b\u3092\u53c2\u7167\u3044\u305f\u3060\u304d\u305f\u3044.\n\n\u4ee5\u4e0b\u306e\u30c7\u30e2\u3067, \u5404\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5f8c, \u4e00\u5207\u8a2d\u5b9a\u3092\u884c\u3063\u3066\u304a\u3089\u305a, vim \u5074\u3067\u3082\u8a00\u8a9e\u6bce\u306e\u8a2d\u5b9a\u306f\u4e00\u5207\u884c\u3063\u3066\u3044\u306a\u3044.\nClojure \u306f clojure-1.5.1.jar \u306b CLASSPATH \u3092\u901a\u3057\u305f\u3060\u3051.\n\u305f\u3060\u3057, \u30a4\u30f3\u30bf\u30fc\u30d7\u30ea\u30bf\u304c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u7de8\u96c6\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u306a\u3044\u5834\u5408, rlwrap \u3092\u7528\u3044\u3066\u3044\u308b.\n\n### Clojure, Haskell and JavaScript (node.js) \u7248\u306e\u30c7\u30e2\u52d5\u753b\n<a href=\"http://www.youtube.com/watch?v=nwLl7jFSmls\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/12593/dfd4e2ce-f646-dfdf-a153-5cb3f596fbbc.png\" width=\"320\" height=\"240\" alt=\"2014-03-07 3-07 16.44.05.png\"></img></a>\n\n### OCaml, Common Lisp (sbcl) and Python \u7248\u306e\u30c7\u30e2\u52d5\u753b\n<a href=\"http://www.youtube.com/watch?v=cvqP0z9YOhI\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/12593/58fcabef-abfb-3778-ae10-78f5cada1691.png\" width=\"320\" height=\"240\" alt=\"2014-03-08 3-08 01.59.00.png\"></img></a>\n\n### Scala, Scheme (Gauche) and Ruby \u7248\u306e\u30c7\u30e2\u52d5\u753b \n<a href=\"http://www.youtube.com/watch?v=_E0ISBUE6lA\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/12593/93ef7b67-5abf-8470-b19c-9373794bbdf3.png\" width=\"320\" height=\"240\" alt=\"2014-03-10 3-10 00.11.00.png\"></img></a>\n\n\n## \u30b3\u30fc\u30c9\n\n\u30c7\u30e2\u306b\u767b\u5834\u3059\u308b\u5404\u8a00\u8a9e\u3067\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30aa\u30a4\u30e9\u30fc\u554f\u984c 6 \u3078\u306e\u89e3\u6cd5\u306e\u4f8b\u3092\u4ee5\u4e0b\u306b\u63b2\u8f09\u3057\u3066\u304a\u304f.\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306b\u8a55\u4fa1\u3055\u305b\u308b\u30b3\u30fc\u30c9\u7247\u3067\u3042\u308a, \u5358\u4f53\u306e\u5b9f\u884c\u53ef\u80fd\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u3088\u3046\u306b\u306f\u8003\u616e\u3055\u308c\u3066\u3044\u306a\u3044.\n\u3042\u304f\u307e\u3067\u4f8b\u793a\u306a\u306e\u3067, map \u3084 reduce \u306b\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3092\u6e21\u3059\u7df4\u7fd2\u3068\u3044\u3063\u305f\u66f8\u304d\u65b9\u306b\u3057\u3066\u3044\u308b. \u66f8\u304d\u65b9\u306f, \u3069\u306e\u8a00\u8a9e\u3067\u3082\u30fc\u8b70\u8ad6\u6210\u308a\u7acb\u3064\u3060\u308d\u3046.\n\n### Clojure\n```clojure:pep6.clj\n(- (#(* % %) (apply + (range 1 101)))\n   (apply + (map #(* % %) (range 1 101))))\n```\n\n### Haskell\n```haskell:pep6.hs\n((\\x -> x * x) $ foldl1 (+) [1..100])\n  - (foldl1 (+) $ map (\\x -> x * x) [1..100])\n```\n\n### JavaScript\n```javascript:pep6.js\nfunction range(s, n) {\n  var r = [], i;\n  for (i = s; i < n; i++)\n    r.push(i);\n  return r;\n}\n\n((function(x){return x * x;})(\n   range(1, 101).reduce(function(a, b){return a + b;}))\n -\n range(1, 101).map(function(x){return x * x;}\n   ).reduce(function(a, b){return a + b;}))\n```\n\n### OCaml\n```ocaml:pep6.ml\nlet range s e =\n  let rec f r s e = if s = e then r else f (s::r) (s + 1) e\n  in List.rev @@ f [] s e;;\n\nlet foldl1 f xs = match xs with x::xs -> List.fold_left (+) x xs;;\n\n((fun x -> x * x) @@ foldl1 (+) @@ range 1 101)\n  - (foldl1 (+) @@ List.map (fun x -> x * x) @@ range 1 101);;\n```\n\n### Common Lisp\n```common-lisp:pep6.cl\n(defun range (s e)\n  (loop for i from s to (1- e) collect i))\n\n(- (funcall (lambda (x) (* x x)) (apply #'+ (range 1 101)))\n   (apply #'+ (mapcar #'(lambda (x) (* x x)) (range 1 101))))\n```\n\n### Python\n```python:pep6.py\n((lambda x: x * x)(reduce(lambda a, b: a + b, range(1, 101)))\n  - reduce(lambda a, b: a + b, map(lambda x: x * x, range(1, 101))))\n```\n\n### Scala\n```scala:pep6.scala\n(((x:Int) => x * x)(List.range(1, 101).reduceLeft(_ + _))\n  - List.range(1, 101).map(x => x * x).reduceLeft(_ + _));\n```\n\n### Scheme\n```scheme:pep6.scm\n(use srfi-1)\n(define (fold1 f s) (fold f (car s) (cdr s)))\n(- ((lambda (x) (* x x)) (fold1 + (iota 100 1)))\n   (fold1 + (map (lambda (x) (* x x)) (iota 100 1))))\n```\n\n### Ruby\n```ruby:pep6.rb\n(1..100).inject(:+) ** 2 \\\n  - (1..100).map{|x| x * x}.inject(:+)\n```\n\n\n## Conclusion\n\nNtmux \u3092\u7528\u3044\u308b\u3068, \u8907\u6570\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u306e\u958b\u767a\u306b\u304a\u3044\u3066,\n\n* \u7aef\u672b\u3067\u52d5\u4f5c\u3059\u308b\u5404\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u304c\u3042\u308c\u3070, \u540c\u4e00\u306e\u30a8\u30c7\u30a3\u30bf\u3084 IDE \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5185\u90e8\u3067\u52d5\u4f5c\u3057\u3066\u3044\u306a\u304f\u3066\u3082,\n* \u305d\u308c\u305e\u308c\u306e\u8a00\u8a9e\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u30b5\u30fc\u30d0\u3092\u4f7f\u308f\u305a ntmux \u306e\u307f\u3092\u7528\u3044,\n* \u958b\u767a\u74b0\u5883\u4e0a\u306b, \u305d\u308c\u305e\u308c\u306e\u8a00\u8a9e\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u306f\u306a\u304f, \u4e00\u3064\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u307f\u3092\u5c0e\u5165\u3057\u3066\n\n\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u958b\u767a\u304c\u884c\u3048\u308b.\n\n## \u8ab2\u984c\n\n* ntmux\n  * ntmux \u304b\u3089 TCP \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30eb\u30fc\u30eb\u6c7a\u3081\u3068\u5b9f\u88c5\n  * IPv6 \u5bfe\u5fdc\n  * MacOS X \u4ee5\u5916\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3078\u306e\u5bfe\u5fdc\u3084\u52d5\u4f5c\u78ba\u8a8d\n* vim \u30d7\u30e9\u30b0\u30a4\u30f3\n* emacs \u30d7\u30e9\u30b0\u30a4\u30f3\n\n\u306a\u3069.\n\n\u6c42\u3080\u3054\u610f\u898b\u30fb\u3054\u5354\u529b.\n", "tags": ["Haskell", "Ntmux", "Vim", "JavaScript", "Clojure"]}