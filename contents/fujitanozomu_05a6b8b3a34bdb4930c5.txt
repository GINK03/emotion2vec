{"tags": ["Arduino", "BASIC", "\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC"], "context": "\n\n\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u898b\u76f4\u3057\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u983b\u7e41\u306b 'Icode buffer full' \u3068\u3044\u3046\u30a8\u30e9\u30fc\u306b\u906d\u9047\u3057\u307e\u3059\u3002\nTOYOSHIKI TINY BASIC\nARDUINO EDITION\n\nOK\n>PRINT 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\n\nYOU TYPE: PRINT 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\nIcode buffer full\n>\n\nOK\n>\n\n\u3053\u308c\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3088\u308a\u5165\u529b\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d0\u30c3\u30d5\u30a1\u306e\u5185\u5bb9\u3092\u4e2d\u9593\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u305f\u969b\u306b\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306b\u5165\u308a\u304d\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u51fa\u308b\u30a8\u30e9\u30fc\u3067\u3001\u7279\u306b\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u306e Arduino\u7248\u306f\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u304c 64\u30d0\u30a4\u30c8\u3068\u5c0f\u3055\u304f\u3001\u3053\u306e\u30a8\u30e9\u30fc\u306b\u906d\u9047\u3057\u3084\u3059\u3044\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u306e Arduino\u7248\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d0\u30c3\u30d5\u30a1\u3068\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306f\u305d\u308c\u305e\u308c 64\u30d0\u30a4\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u304a\u308a\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d0\u30c3\u30d5\u30a1\u306b\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u6570\u3088\u308a\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u3044\u3082\u306e\u5909\u63db\u3055\u308c\u305f\u5834\u5408\u3001\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u304c\u6ea2\u308c\u308b\u539f\u56e0\u306b\u306a\u308a\u307e\u3059\u3002\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306f\u4f8b\u3048\u3070 BASIC \u306e\u4e88\u7d04\u8a9e\u3067 5\u6587\u5b57\u306e 'PRINT' \u3084 6\u6587\u5b57\u306e 'RETURN' \u306f\u3069\u3061\u3089\u3082 1\u30d0\u30a4\u30c8\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3055\u308c\u308b\u305f\u3081\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u3092\u6ea2\u308c\u3055\u305b\u308b\u539f\u56e0\u3068\u306f\u306a\u308a\u307e\u305b\u3093\u3002\u305d\u308c\u4ee5\u5916\u306e\u3001\u4f8b\u3048\u3070 0 \u3084 32767 \u306a\u3069\u306e\u5b9a\u6570\u306f\u7b49\u3057\u304f 3\u30d0\u30a4\u30c8\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d0\u30c3\u30d5\u30a1\u306b\u5165\u529b\u3055\u308c\u305f\u4f8b\u3048\u3070 1\u6587\u5b57\u306e '0' \u3084 2\u6587\u5b57\u306e '10' \u304c\u305d\u308c\u3088\u308a\u5927\u304d\u3044 3\u30d0\u30a4\u30c8\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3055\u308c\u308c\u3070\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u304c\u6ea2\u308c\u308b\u539f\u56e0\u3068\u306a\u308a\u5f97\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u89e3\u6c7a\u3092\u76ee\u7684\u3068\u3057\u3066\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u898b\u76f4\u3057\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u5909\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u898b\u76f4\u3057\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u3067\u306f\u914d\u5217\u3092\u9664\u304f\u5909\u6570\u306f A \u304b\u3089 Z \u306e 1\u6587\u5b57\u3067\u8868\u3057\u307e\u3059\u304c\u3001\u4e2d\u9593\u30b3\u30fc\u30c9\u306f\nI_VAR, \u5909\u6570\u756a\u53f7(A=0 ... Z=25)\n\n\u306e 2\u30d0\u30a4\u30c8\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u5165\u529b\u306b\u5bfe\u3057\u3066\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u304f\u306a\u308b\u305f\u3081\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u3092\u6ea2\u308c\u3055\u305b\u308b\u539f\u56e0\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3078\u306e\u5bfe\u7b56\u3068\u3057\u3066\u3001\u4e2d\u9593\u30b3\u30fc\u30c9\u306e I_VAR \u3092\u5ec3\u6b62\u3057\u3001A \u304b\u3089 Z \u306b\u305d\u308c\u305e\u308c\u5bfe\u5fdc\u3057\u305f 1\u30d0\u30a4\u30c8\u306e I_VAR_A \u304b\u3089 I_VAR_Z \u3092\u5225\u306b\u8a2d\u3051\u308b\u3053\u3068\u3067\u3001\u5909\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u5e38\u306b 1\u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u5bfe\u7b56\u3092\u3057\u307e\u3057\u305f\u3002\n\nttbasic.patch3\n--- ./basic.cpp 2016-05-10 00:00:00.000000000 +0900\n+++ ./basic.cpp 2016-05-13 00:00:00.000000000 +0900\n@@ -101,10 +101,18 @@ enum {\n   I_GTE, I_SHARP, I_GT, I_EQ, I_LTE, I_LT,\n   I_ARRAY, I_RND, I_ABS, I_SIZE,\n   I_LIST, I_RUN, I_NEW,\n-  I_NUM, I_VAR, I_STR,\n+  I_NUM,\n+  I_VAR_A, I_VAR_B, I_VAR_C, I_VAR_D, I_VAR_E, I_VAR_F,\n+  I_VAR_G, I_VAR_H, I_VAR_I, I_VAR_J, I_VAR_K, I_VAR_L,\n+  I_VAR_M, I_VAR_N, I_VAR_O, I_VAR_P, I_VAR_Q, I_VAR_R,\n+  I_VAR_S, I_VAR_T, I_VAR_U, I_VAR_V, I_VAR_W, I_VAR_X,\n+  I_VAR_Y, I_VAR_Z,\n+  I_STR,\n   I_EOL\n };\n\n+#define is_ivar(c) ((c) >= I_VAR_A && (c) <= I_VAR_Z)\n+\n // List formatting condition\n // \u5f8c\u308d\u306b\u7a7a\u767d\u3092\u5165\u308c\u306a\u3044\u4e2d\u9593\u30b3\u30fc\u30c9\n const unsigned char i_nsa[] PROGMEM = {\n@@ -470,18 +478,17 @@ unsigned char toktoi() {\n\n     //\u5909\u6570\u3078\u306e\u5909\u63db\u3092\u8a66\u307f\u308b\n     if (c_isalpha(*ptok)) { //\u3082\u3057\u6587\u5b57\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306a\u3089\n-      if (len >= SIZE_IBUF - 2) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u3059\u304e\u305f\u3089\n+      if (len >= SIZE_IBUF - 1) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u3059\u304e\u305f\u3089\n         err = ERR_IBUFOF; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         return 0; //0\u3092\u6301\u3061\u5e30\u308b\n       }\n       //\u3082\u3057\u5909\u6570\u304c3\u500b\u4e26\u3093\u3060\u3089\n-      if (len >= 4 && ibuf[len - 2] == I_VAR && ibuf[len - 4] == I_VAR) {\n+      if (len >= 2 && is_ivar(ibuf[len - 1]) && is_ivar(ibuf[len - 2])) {\n         err = ERR_SYNTAX; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         return 0; //0\u3092\u6301\u3061\u5e30\u308b\n       }\n\n-      ibuf[len++] = I_VAR; //\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n-      ibuf[len++] = c_toupper(*ptok) - 'A'; //\u5909\u6570\u756a\u53f7\u3092\u8a18\u9332\n+      ibuf[len++] = I_VAR_A + c_toupper(*ptok) - 'A'; //\u5909\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n       s++; //\u6b21\u306e\u6587\u5b57\u3078\u9032\u3080\n     }\n     else\n@@ -601,9 +608,8 @@ void putlist(unsigned char* ip) {\n     else\n\n     //\u5909\u6570\u306e\u51e6\u7406\n-    if (*ip == I_VAR) { //\u3082\u3057\u5b9a\u6570\u306a\u3089\n-      ip++; //\u30dd\u30a4\u30f3\u30bf\u3092\u5909\u6570\u756a\u53f7\u3078\u9032\u3081\u308b\n-      c_putch(*ip++ + 'A'); //\u5909\u6570\u540d\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a\n+    if (is_ivar(*ip)) { //\u3082\u3057\u5909\u6570\u306a\u3089\n+      c_putch(*ip++ - I_VAR_A + 'A'); //\u5909\u6570\u540d\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a\n       if (!nospaceb(*ip)) //\u3082\u3057\u4f8b\u5916\u306b\u3042\u305f\u3089\u306a\u3051\u308c\u3070\n         c_putch(' '); //\u7a7a\u767d\u3092\u8868\u793a\n     }\n@@ -628,7 +634,7 @@ void putlist(unsigned char* ip) {\n       while (i--) //\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3059\n         c_putch(*ip++); //\u30dd\u30a4\u30f3\u30bf\u3092\u9032\u3081\u306a\u304c\u3089\u6587\u5b57\u3092\u8868\u793a\n       c_putch(c); //\u6587\u5b57\u5217\u306e\u62ec\u308a\u3092\u8868\u793a\n-      if (*ip == I_VAR) //\u3082\u3057\u6b21\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u5909\u6570\u3060\u3063\u305f\u3089\n+      if (is_ivar(*ip)) //\u3082\u3057\u6b21\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u5909\u6570\u3060\u3063\u305f\u3089\n         c_putch(' '); //\u7a7a\u767d\u3092\u8868\u793a\n     }\n\n@@ -688,9 +694,8 @@ short ivalue() {\n     break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n\n   //\u5909\u6570\u306e\u5024\u306e\u53d6\u5f97\n-  case I_VAR: //\u5909\u6570\u306e\u5834\u5408\n-    cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    value = var[*cip++]; //\u5909\u6570\u756a\u53f7\u304b\u3089\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\u3057\u3066\u6b21\u3092\u6307\u3057\u793a\u3059\n+  case I_VAR_A ... I_VAR_Z: //\u5909\u6570\u306e\u5834\u5408\n+    value = var[*cip++ - I_VAR_A]; //\u5909\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u304b\u3089\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\u3057\u3066\u6b21\u3092\u6307\u3057\u793a\u3059\n     break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n\n   //\u62ec\u5f27\u306e\u5024\u306e\u53d6\u5f97\n@@ -923,16 +928,15 @@ void iinput() {\n\n     //\u5024\u3092\u5165\u529b\u3059\u308b\u51e6\u7406\n     switch (*cip) { //\u4e2d\u9593\u30b3\u30fc\u30c9\u3067\u5206\u5c90\n-    case I_VAR: //\u5909\u6570\u306e\u5834\u5408\n-      cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n+    case I_VAR_A ... I_VAR_Z: //\u5909\u6570\u306e\u5834\u5408\n       if (prompt) { //\u3082\u3057\u307e\u3060\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u793a\u3057\u3066\u3044\u306a\u3051\u308c\u3070\n-        c_putch(*cip + 'A'); //\u5909\u6570\u540d\u3092\u8868\u793a\n+        c_putch(*cip - I_VAR_A + 'A'); //\u5909\u6570\u540d\u3092\u8868\u793a\n         c_putch(':'); //\u300c:\u300d\u3092\u8868\u793a\n       }\n       value = getnum(); //\u5024\u3092\u5165\u529b\n       if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n         return; //\u7d42\u4e86\n-      var[*cip++] = value; //\u5909\u6570\u3078\u4ee3\u5165\n+      var[*cip++ - I_VAR_A] = value; //\u5909\u6570\u3078\u4ee3\u5165\n       break; //\u6253\u3061\u5207\u308b\n\n     case I_ARRAY: //\u914d\u5217\u306e\u5834\u5408\n@@ -982,7 +986,7 @@ void ivar() {\n   short value; //\u5024\n   short index; //\u5909\u6570\u756a\u53f7\n\n-  index = *cip++; //\u5909\u6570\u756a\u53f7\u3092\u53d6\u5f97\u3057\u3066\u6b21\u3078\u9032\u3080\n+  index = *cip++ - I_VAR_A; //\u5909\u6570\u756a\u53f7\u3092\u53d6\u5f97\u3057\u3066\u6b21\u3078\u9032\u3080\n\n   if (*cip != I_EQ) { //\u3082\u3057\u300c=\u300d\u3067\u306a\u3051\u308c\u3070\n     err = ERR_VWOEQ; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n@@ -1027,8 +1031,7 @@ void iarray() {\n void ilet() {\n   switch (*cip) { //\u4e2d\u9593\u30b3\u30fc\u30c9\u3067\u5206\u5c90\n\n-  case I_VAR: //\u5909\u6570\u306e\u5834\u5408\n-    cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n+  case I_VAR_A ... I_VAR_Z: //\u5909\u6570\u306e\u5834\u5408\n     ivar(); //\u5909\u6570\u3078\u306e\u4ee3\u5165\u3092\u5b9f\u884c\n     break; //\u6253\u3061\u5207\u308b\n\n@@ -1114,11 +1117,11 @@ unsigned char* iexe() {\n       cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n\n       //\u5909\u6570\u540d\u3092\u53d6\u5f97\u3057\u3066\u958b\u59cb\u5024\u3092\u4ee3\u5165\uff08\u4f8bI=1\uff09\n-      if (*cip++ != I_VAR) { //\u3082\u3057\u5909\u6570\u304c\u306a\u304b\u3063\u305f\u3089\n+      if (!is_ivar(*cip)) { //\u3082\u3057\u5909\u6570\u304c\u306a\u304b\u3063\u305f\u3089\n         err = ERR_FORWOV; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         break; //\u6253\u3061\u5207\u308b\n       }\n-      index = *cip; //\u5909\u6570\u540d\u3092\u53d6\u5f97\n+      index = *cip - I_VAR_A; //\u5909\u6570\u540d\u3092\u53d6\u5f97\n       ivar(); //\u4ee3\u5165\u6587\u3092\u5b9f\u884c\n       if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n         break; //\u6253\u3061\u5207\u308b\n@@ -1169,11 +1172,11 @@ unsigned char* iexe() {\n\n       //\u5909\u6570\u540d\u3092\u5fa9\u5e30\n       index = (short)(uintptr_t)lstk[lstki - 1]; //\u5909\u6570\u540d\u3092\u5fa9\u5e30\n-      if (*cip++ != I_VAR) { //\u3082\u3057NEXT\u306e\u5f8c\u308d\u306b\u5909\u6570\u304c\u306a\u304b\u3063\u305f\u3089\n+      if (!is_ivar(*cip)) { //\u3082\u3057NEXT\u306e\u5f8c\u308d\u306b\u5909\u6570\u304c\u306a\u304b\u3063\u305f\u3089\n         err = ERR_NEXTWOV; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         break; //\u6253\u3061\u5207\u308b\n       }\n-      if (*cip++ != index) { //\u3082\u3057\u5fa9\u5e30\u3057\u305f\u5909\u6570\u540d\u3068\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u3089\n+      if (*cip++ - I_VAR_A != index) { //\u3082\u3057\u5fa9\u5e30\u3057\u305f\u5909\u6570\u540d\u3068\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u3089\n         err = ERR_NEXTUM; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         break; //\u6253\u3061\u5207\u308b\n       }\n@@ -1216,8 +1219,7 @@ unsigned char* iexe() {\n       return clp; //\u884c\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u3061\u5e30\u308b\n\n     //\u4e00\u822c\u306e\u6587\u306b\u76f8\u5f53\u3059\u308b\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u7167\u5408\u3068\u51e6\u7406\n-    case I_VAR: //\u5909\u6570\u306e\u5834\u5408\uff08LET\u3092\u7701\u7565\u3057\u305f\u4ee3\u5165\u6587\uff09\n-      cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n+    case I_VAR_A ... I_VAR_Z: //\u5909\u6570\u306e\u5834\u5408\uff08LET\u3092\u7701\u7565\u3057\u305f\u4ee3\u5165\u6587\uff09\n       ivar(); //\u4ee3\u5165\u6587\u3092\u5b9f\u884c\n       break; //\u6253\u3061\u5207\u308b\n     case I_ARRAY: //\u914d\u5217\u306e\u5834\u5408\uff08LET\u3092\u7701\u7565\u3057\u305f\u4ee3\u5165\u6587\uff09\n\n\n\u4ee5\u4e0a\u306e\u30d1\u30c3\u30c1\u306f GCC \u306e\u62e1\u5f35\u69cb\u6587\nswitch( ) {\ncase value0 ... value9:\n    ...\n\n\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u7b87\u6240\u304c\u3042\u308a\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3057\u306a\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u66f8\u304d\u76f4\u3057\u3092\u5fc5\u8981\u3068\u3059\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5b9a\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u898b\u76f4\u3057\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u3067\u306f\u5b9a\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306f\nI_NUM, \u5b9a\u6570\u306e\u5024\u4e0b\u4f4d8bit, \u5b9a\u6570\u306e\u5024\u4e0a\u4f4d8bit\n\n\u3068\u3044\u3046\u5f62\u5f0f\u3067\u683c\u7d0d\u3055\u308c\u30013\u30d0\u30a4\u30c8\u306e\u9818\u57df\u3092\u5360\u3081\u307e\u3059\u3002\nBASIC \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067\u306e\u5b9a\u6570\u306f 1\u6587\u5b57\u306e '0' \u3084 2\u6587\u5b57\u306e '10' \u7b49\u5404\u7a2e\u3042\u308a\u3001\u305d\u308c\u3089\u304c\u5168\u3066 3\u30d0\u30a4\u30c8\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u306f\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u304c\u6ea2\u308c\u308b\u539f\u56e0\u3068\u306a\u308b\u305f\u3081\u898b\u76f4\u3057\u3092\u884c\u3044\u307e\u3059\u3002\nI_NUM \u3092\u5ec3\u6b62\u3057\u3001\n\u5b9a\u6570\u306e\u5024 0 \uff5e 9\nI_NUM_0 \uff5e I_NUM_9\n\n\u5b9a\u6570\u306e\u5024 10 \uff5e 255\nI_NUM_B, \u5b9a\u6570\u306e\u5024(10 \uff5e 255)\n\n\u5b9a\u6570\u306e\u5024 256 \uff5e 32767, -1 \uff5e -32767\nI_NUM_W, \u5b9a\u6570\u306e\u5024\u4e0b\u4f4d8bit, \u5b9a\u6570\u306e\u5024\u4e0a\u4f4d8bit\n\n\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067 1\u6587\u5b57\u306e 0 \uff5e 9 \u306e\u5024\u306f 1\u30d0\u30a4\u30c8\u3001\u305d\u308c\u4ee5\u5916\u306e\u5024\u3067\u3082 \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u6570\u3068\u540c\u3058\u304b\u3088\u308a\u5c11\u306a\u3044\u30d0\u30a4\u30c8\u6570\u3067\u5024\u3092\u683c\u7d0d\u3067\u304d\u308b\u3053\u3068\u3068\u306a\u308a\u307e\u3059\u3002\n\nttbasic.patch4\n--- ./basic.cpp 2016-05-13 00:00:00.000000000 +0900\n+++ ./basic.cpp 2016-05-13 00:00:00.000000000 +0900\n@@ -101,7 +101,8 @@ enum {\n   I_GTE, I_SHARP, I_GT, I_EQ, I_LTE, I_LT,\n   I_ARRAY, I_RND, I_ABS, I_SIZE,\n   I_LIST, I_RUN, I_NEW,\n-  I_NUM,\n+  I_NUM_0, I_NUM_1, I_NUM_2, I_NUM_3, I_NUM_4, I_NUM_5,\n+  I_NUM_6, I_NUM_7, I_NUM_8, I_NUM_9, I_NUM_B, I_NUM_W,\n   I_VAR_A, I_VAR_B, I_VAR_C, I_VAR_D, I_VAR_E, I_VAR_F,\n   I_VAR_G, I_VAR_H, I_VAR_I, I_VAR_J, I_VAR_K, I_VAR_L,\n   I_VAR_M, I_VAR_N, I_VAR_O, I_VAR_P, I_VAR_Q, I_VAR_R,\n@@ -111,6 +112,7 @@ enum {\n   I_EOL\n };\n\n+#define is_inum(c) ((c) >= I_NUM_0 && (c) <= I_NUM_W)\n #define is_ivar(c) ((c) >= I_VAR_A && (c) <= I_VAR_Z)\n\n // List formatting condition\n@@ -445,13 +447,20 @@ unsigned char toktoi() {\n         value = tmp; //0\u3092\u6301\u3061\u5e30\u308b\n       } while (c_isdigit(*ptok)); //\u6587\u5b57\u304c\u6570\u5b57\u3067\u3042\u308b\u9650\u308a\u7e70\u308a\u8fd4\u3059\n\n-      if (len >= SIZE_IBUF - 3) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u3059\u304e\u305f\u3089\n+      if (len >= SIZE_IBUF - ((value >= 0 && value <= 9) ? 1 : (value <= 255) ? 2 : 3)) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u3059\u304e\u305f\u3089\n         err = ERR_IBUFOF; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         return 0; //0\u3092\u6301\u3061\u5e30\u308b\n       }\n-      ibuf[len++] = I_NUM; //\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n-      ibuf[len++] = value & 255; //\u5b9a\u6570\u306e\u4e0b\u4f4d\u30d0\u30a4\u30c8\u3092\u8a18\u9332\n-      ibuf[len++] = value >> 8; //\u5b9a\u6570\u306e\u4e0a\u4f4d\u30d0\u30a4\u30c8\u3092\u8a18\u9332\n+      if (value >= 0 && value <= 9) {\n+        ibuf[len++] = I_NUM_0 + value; //\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n+      } else if (value <= 255) {\n+        ibuf[len++] = I_NUM_B; //\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n+        ibuf[len++] = value; //\u5b9a\u6570\u306e\u5024\u3092\u8a18\u9332\n+      } else {\n+        ibuf[len++] = I_NUM_W; //\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n+        ibuf[len++] = value & 255; //\u5b9a\u6570\u306e\u4e0b\u4f4d\u30d0\u30a4\u30c8\u3092\u8a18\u9332\n+        ibuf[len++] = value >> 8; //\u5b9a\u6570\u306e\u4e0a\u4f4d\u30d0\u30a4\u30c8\u3092\u8a18\u9332\n+      }\n       s = ptok; //\u6587\u5b57\u5217\u306e\u51e6\u7406\u305a\u307f\u306e\u90e8\u5206\u3092\u8a70\u3081\u308b\n     }\n     else\n@@ -519,6 +528,34 @@ short getlineno(unsigned char *lp) {\n   return *(lp + 1) | *(lp + 2) << 8; //\u884c\u756a\u53f7\u3092\u6301\u3061\u5e30\u308b\n }\n\n+short getinum(unsigned char *lp) {\n+  unsigned char i_num = *lp;\n+\n+  if (i_num >= I_NUM_0 && i_num <= I_NUM_9) {\n+    return i_num - I_NUM_0; //\u5b9a\u6570\u3092\u6301\u3061\u5e30\u308b\n+  } else if (i_num == I_NUM_B) {\n+    return *(lp + 1); //\u5b9a\u6570\u3092\u6301\u3061\u5e30\u308b\n+  } else if (i_num == I_NUM_W) {\n+    return *(lp + 1) | *(lp + 2) << 8; //\u5b9a\u6570\u3092\u6301\u3061\u5e30\u308b\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+unsigned char inumsize(unsigned char *lp) {\n+  unsigned char i_num = *lp;\n+\n+  if (i_num >= I_NUM_0 && i_num <= I_NUM_9) {\n+    return 1;\n+  } else if (i_num == I_NUM_B) {\n+    return 2;\n+  } else if (i_num == I_NUM_W) {\n+    return 3;\n+  } else {\n+    return 0;\n+  }\n+}\n+\n // Search line by line number\n unsigned char* getlp(short lineno) {\n   unsigned char *lp; //\u30dd\u30a4\u30f3\u30bf\n@@ -531,20 +568,23 @@ unsigned char* getlp(short lineno) {\n }\n\n // Insert i-code to the list\n-void inslist() {\n+void inslist(unsigned char size) {\n+  unsigned short line = getinum(ibuf);\n+  unsigned char isize = inumsize(ibuf);\n+  size = 1 + 2 + size - isize;\n   unsigned char *insp; //\u633f\u5165\u4f4d\u7f6e\n   unsigned char *p1, *p2; //\u79fb\u52d5\u5148\u3068\u79fb\u52d5\u5143\n   short len; //\u79fb\u52d5\u306e\u9577\u3055\n\n-  if (getsize() < *ibuf) { //\u3082\u3057\u7a7a\u304d\u304c\u4e0d\u8db3\u3057\u3066\u3044\u305f\u3089\n+  if (size > 4 && getsize() < size) { //\u3082\u3057\u7a7a\u304d\u304c\u4e0d\u8db3\u3057\u3066\u3044\u305f\u3089\n     err = ERR_LBUFOF; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n     return; //\u51e6\u7406\u3092\u6253\u3061\u5207\u308b\n   }\n\n-  insp = getlp(getlineno(ibuf)); //\u633f\u5165\u4f4d\u7f6e\u3092\u53d6\u5f97\n+  insp = getlp(line); //\u633f\u5165\u4f4d\u7f6e\u3092\u53d6\u5f97\n\n   //\u540c\u3058\u884c\u756a\u53f7\u306e\u884c\u304c\u5b58\u5728\u3057\u305f\u3089\u3068\u308a\u3042\u3048\u305a\u524a\u9664\n-  if (getlineno(insp) == getlineno(ibuf)) { //\u3082\u3057\u884c\u756a\u53f7\u304c\u4e00\u81f4\u3057\u305f\u3089\n+  if (getlineno(insp) == line) { //\u3082\u3057\u884c\u756a\u53f7\u304c\u4e00\u81f4\u3057\u305f\u3089\n     p1 = insp; //p1\u3092\u633f\u5165\u4f4d\u7f6e\u306b\u8a2d\u5b9a\n     p2 = p1 + *p1; //p2\u3092\u6b21\u306e\u884c\u306b\u8a2d\u5b9a\n     while (len = *p2) { //\u6b21\u306e\u884c\u304c\u672b\u5c3e\u3067\u306a\u3051\u308c\u3070\u7e70\u308a\u8fd4\u3059\n@@ -555,20 +595,23 @@ void inslist() {\n   }\n\n   //\u884c\u756a\u53f7\u3060\u3051\u304c\u5165\u529b\u3055\u308c\u305f\u5834\u5408\u306f\u3053\u3053\u3067\u7d42\u308f\u308b\n-  if (*ibuf == 4) //\u3082\u3057\u9577\u3055\u304c4\uff08\u884c\u756a\u53f7\u306e\u307f\uff09\u306a\u3089\n+  if (size == 4) //\u3082\u3057\u9577\u3055\u304c4\uff08\u884c\u756a\u53f7\u306e\u307f\uff09\u306a\u3089\n     return; //\u7d42\u4e86\u3059\u308b\n\n   //\u633f\u5165\u306e\u305f\u3081\u306e\u30b9\u30da\u30fc\u30b9\u3092\u7a7a\u3051\u308b\n   for (p1 = insp; *p1; p1 += *p1); //p1\u3092\u30ea\u30b9\u30c8\u306e\u672b\u5c3e\u3078\u79fb\u52d5\n   len = p1 - insp + 1; //\u79fb\u52d5\u3059\u308b\u5e45\u3092\u8a08\u7b97\n-  p2 = p1 + *ibuf; //p2\u3092\u672b\u5c3e\u3088\u308a1\u884c\u306e\u9577\u3055\u3060\u3051\u5f8c\u308d\u306b\u8a2d\u5b9a\n+  p2 = p1 + size; //p2\u3092\u672b\u5c3e\u3088\u308a1\u884c\u306e\u9577\u3055\u3060\u3051\u5f8c\u308d\u306b\u8a2d\u5b9a\n   while (len--) //\u79fb\u52d5\u3059\u308b\u5e45\u3060\u3051\u7e70\u308a\u8fd4\u3059\n     *p2-- = *p1--; //\u5f8c\u308d\u3078\u30ba\u30e9\u3059\n\n   //\u884c\u3092\u8ee2\u9001\u3059\u308b\n-  len = *ibuf; //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u9577\u3055\u3092\u8a2d\u5b9a\n+  len = size - 1 - 2; //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u9577\u3055\u3092\u8a2d\u5b9a\n   p1 = insp; //\u8ee2\u9001\u5148\u3092\u8a2d\u5b9a\n-  p2 = ibuf; //\u8ee2\u9001\u5143\u3092\u8a2d\u5b9a\n+  *p1++ = size;\n+  *p1++ = line & 0xff;\n+  *p1++ = line >> 8;\n+  p2 = ibuf + isize; //\u8ee2\u9001\u5143\u3092\u8a2d\u5b9a\n   while (len--) //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u9577\u3055\u3060\u3051\u7e70\u308a\u8fd4\u3059\n     *p1++ = *p2++; //\u8ee2\u9001\n }\n@@ -598,10 +641,9 @@ void putlist(unsigned char* ip) {\n     else\n\n     //\u5b9a\u6570\u306e\u51e6\u7406\n-    if (*ip == I_NUM) { //\u3082\u3057\u5b9a\u6570\u306a\u3089\n-      ip++; //\u30dd\u30a4\u30f3\u30bf\u3092\u5024\u3078\u9032\u3081\u308b\n-      putnum(*ip | *(ip + 1) << 8, 0); //\u5024\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a\n-      ip += 2; //\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u3078\u9032\u3081\u308b\n+    if (is_inum(*ip)) { //\u3082\u3057\u5b9a\u6570\u306a\u3089\n+      putnum(getinum(ip), 0); //\u5024\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a\n+      ip += inumsize(ip); //\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u3078\u9032\u3081\u308b\n       if (!nospaceb(*ip)) //\u3082\u3057\u4f8b\u5916\u306b\u3042\u305f\u3089\u306a\u3051\u308c\u3070\n         c_putch(' '); //\u7a7a\u767d\u3092\u8868\u793a\n     }\n@@ -675,7 +717,17 @@ short ivalue() {\n   switch (*cip) { //\u4e2d\u9593\u30b3\u30fc\u30c9\u3067\u5206\u5c90\n\n   //\u5b9a\u6570\u306e\u53d6\u5f97\n-  case I_NUM: //\u5b9a\u6570\u306e\u5834\u5408\n+  case I_NUM_0 ... I_NUM_9: //0\uff5e9\u306e\u5b9a\u6570\u306e\u5834\u5408\n+    value = *cip++ - I_NUM_0; //\u5b9a\u6570\u3092\u53d6\u5f97\n+    break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n+\n+  case I_NUM_B: //1\u30d0\u30a4\u30c8\u5b9a\u6570\u306e\u5834\u5408\n+    cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n+    value = *cip; //\u5b9a\u6570\u3092\u53d6\u5f97\n+    cip += 1; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u5b9a\u6570\u306e\u6b21\u3078\u9032\u3081\u308b\n+    break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n+\n+  case I_NUM_W: //2\u30d0\u30a4\u30c8\u5b9a\u6570\u306e\u5834\u5408\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n     value = *cip | *(cip + 1) << 8; //\u5b9a\u6570\u3092\u53d6\u5f97\n     cip += 2; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u5b9a\u6570\u306e\u6b21\u3078\u9032\u3081\u308b\n@@ -1280,8 +1332,8 @@ void ilist() {\n   short lineno; //\u8868\u793a\u958b\u59cb\u884c\u756a\u53f7\n\n   //\u8868\u793a\u958b\u59cb\u884c\u756a\u53f7\u306e\u8a2d\u5b9a\n-  if (*cip == I_NUM) //\u3082\u3057LIST\u547d\u4ee4\u306b\u5f15\u6570\u304c\u3042\u3063\u305f\u3089\n-    lineno = getlineno(cip); //\u5f15\u6570\u3092\u8aad\u307f\u53d6\u3063\u3066\u8868\u793a\u958b\u59cb\u884c\u756a\u53f7\u3068\u3059\u308b\n+  if (is_inum(*cip)) //\u3082\u3057LIST\u547d\u4ee4\u306b\u5f15\u6570\u304c\u3042\u3063\u305f\u3089\n+    lineno = getinum(cip); //\u5f15\u6570\u3092\u8aad\u307f\u53d6\u3063\u3066\u8868\u793a\u958b\u59cb\u884c\u756a\u53f7\u3068\u3059\u308b\n   else //\u5f15\u6570\u304c\u306a\u3051\u308c\u3070\n     lineno = 0; //\u8868\u793a\u958b\u59cb\u884c\u756a\u53f7\u30920\u3068\u3059\u308b\n\n@@ -1337,8 +1389,7 @@ void icom() {\n\n   case I_LIST: //I_LIST\u306e\u5834\u5408\uff08LIST\u547d\u4ee4\uff09\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    if (*cip == I_EOL || //\u3082\u3057\u884c\u672b\u304b\u3001\u3042\u308b\u3044\u306f\n-      *(cip + 3) == I_EOL) //\u7d9a\u3044\u3066\u5f15\u6570\u304c\u3042\u308c\u3070\n+    if (cip[inumsize(cip)] == I_EOL) //\u3082\u3057\u884c\u672b\u304b\u3001\u3042\u308b\u3044\u306f\u7d9a\u3044\u3066\u5f15\u6570\u304c\u3042\u308c\u3070\n       ilist(); //LIST\u547d\u4ee4\u3092\u5b9f\u884c\n     else //\u305d\u3046\u3067\u306a\u3051\u308c\u3070\n       err = ERR_SYNTAX; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n@@ -1417,9 +1468,8 @@ void basic() {\n     }\n\n     //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u4e26\u3073\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u5224\u65ad\u3055\u308c\u308b\u5834\u5408\n-    if (*ibuf == I_NUM) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u5148\u982d\u304c\u884c\u756a\u53f7\u306a\u3089\n-      *ibuf = len; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u5148\u982d\u3092\u9577\u3055\u306b\u66f8\u304d\u63db\u3048\u308b\n-      inslist(); //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e1\u884c\u3092\u30ea\u30b9\u30c8\u3078\u633f\u5165\n+    if (is_inum(*ibuf)) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u5148\u982d\u304c\u884c\u756a\u53f7\u306a\u3089\n+      inslist(len); //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e1\u884c\u3092\u30ea\u30b9\u30c8\u3078\u633f\u5165\n       if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089\n         error(); //\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30af\u30ea\u30a2\n       continue; //\u7e70\u308a\u8fd4\u3057\u306e\u5148\u982d\u3078\u623b\u3063\u3066\u3084\u308a\u76f4\u3057\n\n\n\u5c1a\u3001\u8c4a\u5d0e\u30bf\u30a4\u30cb\u30fcBASIC \u306b\u306f\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u7a7a\u304d\u304c 4\u30d0\u30a4\u30c8\u3092\u5207\u308b\u3068\u884c\u756a\u53f7\u306e\u307f\u3092\u5165\u529b\u3057\u3066\u65e2\u5b58\u306e\u884c\u3092\u524a\u9664\u3059\u308b\u64cd\u4f5c\u304c\u884c\u3048\u306a\u304f\u306a\u308b\u3068\u3044\u3046\u4e0d\u5177\u5408\u3068\u601d\u308f\u308c\u308b\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u4fee\u6b63\u3082\u540c\u6642\u306b\u884c\u3063\u3066\u304a\u308a\u307e\u3059\u3002\n\n\u305d\u306e\u4ed6\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u898b\u76f4\u3057\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u3067\u306f RND() \u7b49\u306e\u95a2\u6570\u3084 @(~) \u306e\u914d\u5217\u5909\u6570\u306f\u5e38\u306b '(' \u3068\u8fbc\u307f\u3067\u4f7f\u7528\u3055\u308c\u308b\u306b\u3082\u95a2\u308f\u3089\u305a\u3001\u4e2d\u9593\u30b3\u30fc\u30c9\u306f\u5225\u3068\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u30d0\u30a4\u30c8\u6570\u306e\u7121\u99c4\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n@(\uff5e) \u2192 I_ARRAY, I_OPEN, \uff5e, I_CLOSE\nRND(\uff5e) \u2192 I_RND, I_OPEN, \uff5e, I_CLOSE\nABS(\uff5e) \u2192 I_ABS, I_OPEN, \uff5e, I_CLOSE\nSIZE(\uff5e) \u2192 I_SIZE, I_OPEN, \uff5e, I_CLOSE\n\n\u5e38\u306b '(' \u3068\u30bb\u30c3\u30c8\u3067\u4f7f\u7528\u3055\u308c\u308b\u306e\u3067\u3042\u308c\u3070\u3001'(' \u307e\u3067\u542b\u3081\u3066\u4e2d\u9593\u30b3\u30fc\u30c9\u3068\u3057\u3066\u6271\u3048\u3070\u3001\u4e2d\u9593\u30b3\u30fc\u30c9\u306e '(' \u3092\u8868\u3059 I_OPEN \u304c\u7701\u7565\u3067\u304d\u308b\u306e\u3067\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u7701\u30e1\u30e2\u30ea\u5316\u3068\u306a\u308a\u307e\u3059\u3002\n\nttbasic.patch5\n--- ./basic.cpp 2016-05-13 00:00:00.000000000 +0900\n+++ ./basic.cpp 2016-05-13 00:00:00.000000000 +0900\n@@ -67,10 +67,10 @@ const char kw23[] PROGMEM = \">\";\n const char kw24[] PROGMEM = \"=\";\n const char kw25[] PROGMEM = \"<=\";\n const char kw26[] PROGMEM = \"<\";\n-const char kw27[] PROGMEM = \"@\";\n-const char kw28[] PROGMEM = \"RND\";\n-const char kw29[] PROGMEM = \"ABS\";\n-const char kw30[] PROGMEM = \"SIZE\";\n+const char kw27[] PROGMEM = \"@(\";\n+const char kw28[] PROGMEM = \"RND(\";\n+const char kw29[] PROGMEM = \"ABS(\";\n+const char kw30[] PROGMEM = \"SIZE(\";\n const char kw31[] PROGMEM = \"LIST\";\n const char kw32[] PROGMEM = \"RUN\";\n const char kw33[] PROGMEM = \"NEW\";\n@@ -688,15 +688,20 @@ void putlist(unsigned char* ip) {\n }\n\n // Get argument in parenthesis\n+short getparam2(void);\n short getparam() {\n-  short value; //\u5024\n-\n   if (*cip != I_OPEN) { //\u3082\u3057\u300c(\u300d\u3067\u306a\u3051\u308c\u3070\n     err = ERR_PAREN; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n     return 0; //\u7d42\u4e86\n   }\n   cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n\n+  return getparam2();\n+}\n+\n+short getparam2(void) {\n+  short value; //\u5024\n+\n   value = iexp(); //\u5f0f\u3092\u8a08\u7b97\n   if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n     return 0; //\u7d42\u4e86\n@@ -758,7 +763,7 @@ short ivalue() {\n   //\u914d\u5217\u306e\u5024\u306e\u53d6\u5f97\n   case I_ARRAY: //\u914d\u5217\u306e\u5834\u5408\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    value = getparam(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n+    value = getparam2(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n     if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n       break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n     if (value >= SIZE_ARRY) { //\u3082\u3057\u6dfb\u3048\u5b57\u306e\u4e0a\u9650\u3092\u8d85\u3048\u305f\u3089\n@@ -771,7 +776,7 @@ short ivalue() {\n   //\u95a2\u6570\u306e\u5024\u306e\u53d6\u5f97\n   case I_RND: //\u95a2\u6570RND\u306e\u5834\u5408\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    value = getparam(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n+    value = getparam2(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n     if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n       break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n     value = getrnd(value); //\u4e71\u6570\u3092\u53d6\u5f97\n@@ -779,7 +784,7 @@ short ivalue() {\n\n   case I_ABS: //\u95a2\u6570ABS\u306e\u5834\u5408\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    value = getparam(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n+    value = getparam2(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n     if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n       break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n     if(value < 0) //\u3082\u30570\u672a\u6e80\u306a\u3089\n@@ -788,12 +793,12 @@ short ivalue() {\n\n   case I_SIZE: //\u95a2\u6570SIZE\u306e\u5834\u5408\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    //\u3082\u3057\u5f8c\u308d\u306b\u300c()\u300d\u304c\u306a\u304b\u3063\u305f\u3089\n-    if ((*cip != I_OPEN) || (*(cip + 1) != I_CLOSE)) {\n+    //\u3082\u3057\u5f8c\u308d\u306b\u300c)\u300d\u304c\u306a\u304b\u3063\u305f\u3089\n+    if ((*cip != I_CLOSE)) {\n       err = ERR_PAREN; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n       break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n     }\n-    cip += 2; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u300c()\u300d\u306e\u6b21\u3078\u9032\u3081\u308b\n+    cip += 1; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u300c)\u300d\u306e\u6b21\u3078\u9032\u3081\u308b\n     value = getsize(); //\u30d7\u30ed\u30b0\u30e9\u30e0\u4fdd\u5b58\u9818\u57df\u306e\u7a7a\u304d\u3092\u53d6\u5f97\n     break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n\n@@ -993,7 +998,7 @@ void iinput() {\n\n     case I_ARRAY: //\u914d\u5217\u306e\u5834\u5408\n       cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-      index = getparam(); //\u914d\u5217\u306e\u6dfb\u3048\u5b57\u3092\u53d6\u5f97\n+      index = getparam2(); //\u914d\u5217\u306e\u6dfb\u3048\u5b57\u3092\u53d6\u5f97\n       if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n         return; //\u7d42\u4e86\n       if (index >= SIZE_ARRY) { //\u3082\u3057\u6dfb\u3048\u5b57\u304c\u4e0a\u9650\u3092\u8d85\u3048\u305f\u3089\n@@ -1058,7 +1063,7 @@ void iarray() {\n   short value; //\u5024\n   short index; //\u914d\u5217\u306e\u6dfb\u3048\u5b57\n\n-  index = getparam(); //\u914d\u5217\u306e\u6dfb\u3048\u5b57\u3092\u53d6\u5f97\n+  index = getparam2(); //\u914d\u5217\u306e\u6dfb\u3048\u5b57\u3092\u53d6\u5f97\n   if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n     return; //\u7d42\u4e86\n\n\n\n\u4ee5\u4e0a\u30013\u3064\u306e\u30d1\u30c3\u30c1\u3092\n$ patch -p0 < ttbasic.patch3\n\n$ patch -p0 < ttbasic.patch4\n\n$ patch -p0 < ttbasic.patch5\n\n\u4ee5\u4e0a\u306e\u9806\u306b\u5f53\u3066\u308b\u3053\u3068\u3067\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u7701\u30e1\u30e2\u30ea\u5316\u304c\u679c\u305f\u305b\u307e\u3059\u3002\n\u300e\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC Arduino\u7248\u306e\u30d5\u30ea\u30fc\u30a8\u30ea\u30a2\u3092\u5897\u3084\u3059\u5b9f\u9a13(1)\u300f\u3067\u4e2d\u9593\u30b3\u30fc\u30c9\u63db\u7b97\u3067\u30b5\u30a4\u30ba\u304c 353\u30d0\u30a4\u30c8\u3068\u306a\u308b\u305f\u3081\u306b \u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u5bb9\u91cf\u304c\u6a19\u6e96\u3067 256\u30d0\u30a4\u30c8\u3067\u3042\u308b\u8c4a\u5d0e\u30bf\u30a4\u30cb\u30fcBASIC Arduino\u7248\u3067\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u5b9f\u884c\u3067\u304d\u306a\u304b\u3063\u305f fibonacci.bas \u304c\u4eca\u56de\u306e\u5909\u66f4\u3067\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306a\u308a\u307e\u3057\u305f\u3002\nTOYOSHIKI TINY BASIC\nARDUINO EDITION\n\nOK\n>100 INPUT N\n>110 P=0; D=0\n>120 FOR I=0 TO N\n>130 IF I<=1 LET @(P)=I; GOTO 210\n>140 C=0\n>150 FOR J=0 TO D\n>160 @(2*J+P)=@(2*J+P)+@(2*J+(P=0))+C\n>170 C=@(2*J+P)>=10;\n>180 @(2*J+P)=@(2*J+P)-10*C\n>190 NEXT J\n>200 IF C#0 D=D+1; @(2*D+P)=C; @(2*D+(P=0))=0\n>210 PRINT I,\": \",\n>220 FOR J=D TO 0 STEP -1\n>230 PRINT #1,@(2*J+P),\n>240 NEXT J\n>250 PRINT\n>260 P=(P=0)\n>270 NEXT I\n>\n\nOK\n>PRINT SIZE()\n7\n\nOK\n>RUN\nN:70\n0: 0\n1: 1\n2: 1\n3: 2\n4: 3\n5: 5\n6: 8\n7: 13\n8: 21\n9: 34\n10: 55\n11: 89\n12: 144\n13: 233\n14: 377\n15: 610\n16: 987\n17: 1597\n18: 2584\n19: 4181\n20: 6765\n21: 10946\n22: 17711\n23: 28657\n24: 46368\n25: 75025\n26: 121393\n27: 196418\n28: 317811\n29: 514229\n30: 832040\n31: 1346269\n32: 2178309\n33: 3524578\n34: 5702887\n35: 9227465\n36: 14930352\n37: 24157817\n38: 39088169\n39: 63245986\n40: 102334155\n41: 165580141\n42: 267914296\n43: 433494437\n44: 701408733\n45: 1134903170\n46: 1836311903\n47: 2971215073\n48: 4807526976\n49: 7778742049\n50: 12586269025\n51: 20365011074\n52: 32951280099\n53: 53316291173\n54: 86267571272\n55: 139583862445\n56: 225851433717\n57: 365435296162\n58: 591286729879\n59: 956722026041\n60: 1548008755920\n61: 2504730781961\n62: 4052739537881\n63: 6557470319842\n64: 10610209857723\n65: 17167680177565\n66: 27777890035288\n67: 44945570212853\n68: 72723460248141\n69: 117669030460994\n70: 190392490709135\n\nOK\n>\n\n\u5c1a\u3001\u4ee5\u4e0a\u306e\u5909\u66f4\u3092\u65bd\u3057\u3066\u3082\u3001\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u306e\u5927\u57df\u5909\u6570\u306b\u5909\u5316\u306f\u306a\u3044\u306e\u3067\u30d3\u30eb\u30c9\u6642\u306e RAM \u306e\u30d5\u30ea\u30fc\u30a8\u30ea\u30a2\u306b\u5909\u5316\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u300e\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC Arduino\u7248\u306e\u30d5\u30ea\u30fc\u30a8\u30ea\u30a2\u3092\u5897\u3084\u3059\u5b9f\u9a13(5)\u300f\u306b\u7d9a\u304f(\u4e88\u5b9a)\n\u756a\u5916:\u300eavr-gcc \u306e\u30b3\u30fc\u30c9\u751f\u6210\u3067 switch \uff5e case \u306e\u6700\u9069\u5316\u306b\u3088\u3063\u3066\u306f RAM \u3092\u6d88\u8cbb\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u300f\n#\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u898b\u76f4\u3057\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u983b\u7e41\u306b 'Icode buffer full' \u3068\u3044\u3046\u30a8\u30e9\u30fc\u306b\u906d\u9047\u3057\u307e\u3059\u3002\n\n```text:\nTOYOSHIKI TINY BASIC\nARDUINO EDITION\n\nOK\n>PRINT 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\n\nYOU TYPE: PRINT 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1\nIcode buffer full\n>\n\nOK\n>\n```\n\u3053\u308c\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3088\u308a\u5165\u529b\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d0\u30c3\u30d5\u30a1\u306e\u5185\u5bb9\u3092\u4e2d\u9593\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u305f\u969b\u306b\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306b\u5165\u308a\u304d\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u51fa\u308b\u30a8\u30e9\u30fc\u3067\u3001\u7279\u306b\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u306e Arduino\u7248\u306f\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u30b5\u30a4\u30ba\u304c 64\u30d0\u30a4\u30c8\u3068\u5c0f\u3055\u304f\u3001\u3053\u306e\u30a8\u30e9\u30fc\u306b\u906d\u9047\u3057\u3084\u3059\u3044\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u306e Arduino\u7248\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d0\u30c3\u30d5\u30a1\u3068\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306f\u305d\u308c\u305e\u308c 64\u30d0\u30a4\u30c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u304a\u308a\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d0\u30c3\u30d5\u30a1\u306b\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u6570\u3088\u308a\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u3044\u3082\u306e\u5909\u63db\u3055\u308c\u305f\u5834\u5408\u3001\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u304c\u6ea2\u308c\u308b\u539f\u56e0\u306b\u306a\u308a\u307e\u3059\u3002\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306f\u4f8b\u3048\u3070 BASIC \u306e\u4e88\u7d04\u8a9e\u3067 5\u6587\u5b57\u306e 'PRINT' \u3084 6\u6587\u5b57\u306e 'RETURN' \u306f\u3069\u3061\u3089\u3082 1\u30d0\u30a4\u30c8\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3055\u308c\u308b\u305f\u3081\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u3092\u6ea2\u308c\u3055\u305b\u308b\u539f\u56e0\u3068\u306f\u306a\u308a\u307e\u305b\u3093\u3002\u305d\u308c\u4ee5\u5916\u306e\u3001\u4f8b\u3048\u3070 0 \u3084 32767 \u306a\u3069\u306e\u5b9a\u6570\u306f\u7b49\u3057\u304f 3\u30d0\u30a4\u30c8\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d0\u30c3\u30d5\u30a1\u306b\u5165\u529b\u3055\u308c\u305f\u4f8b\u3048\u3070 1\u6587\u5b57\u306e '0' \u3084 2\u6587\u5b57\u306e '10' \u304c\u305d\u308c\u3088\u308a\u5927\u304d\u3044 3\u30d0\u30a4\u30c8\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3055\u308c\u308c\u3070\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u304c\u6ea2\u308c\u308b\u539f\u56e0\u3068\u306a\u308a\u5f97\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u89e3\u6c7a\u3092\u76ee\u7684\u3068\u3057\u3066\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u898b\u76f4\u3057\u3092\u884c\u3044\u307e\u3059\u3002\n##\u5909\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u898b\u76f4\u3057\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u3067\u306f\u914d\u5217\u3092\u9664\u304f\u5909\u6570\u306f A \u304b\u3089 Z \u306e 1\u6587\u5b57\u3067\u8868\u3057\u307e\u3059\u304c\u3001\u4e2d\u9593\u30b3\u30fc\u30c9\u306f\n\n```text:\nI_VAR, \u5909\u6570\u756a\u53f7(A=0 ... Z=25)\n```\n\u306e 2\u30d0\u30a4\u30c8\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u5165\u529b\u306b\u5bfe\u3057\u3066\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u304f\u306a\u308b\u305f\u3081\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u3092\u6ea2\u308c\u3055\u305b\u308b\u539f\u56e0\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3078\u306e\u5bfe\u7b56\u3068\u3057\u3066\u3001\u4e2d\u9593\u30b3\u30fc\u30c9\u306e I_VAR \u3092\u5ec3\u6b62\u3057\u3001A \u304b\u3089 Z \u306b\u305d\u308c\u305e\u308c\u5bfe\u5fdc\u3057\u305f 1\u30d0\u30a4\u30c8\u306e I_VAR_A \u304b\u3089 I_VAR_Z \u3092\u5225\u306b\u8a2d\u3051\u308b\u3053\u3068\u3067\u3001\u5909\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u5e38\u306b 1\u30d0\u30a4\u30c8\u306b\u306a\u308b\u3088\u3046\u5bfe\u7b56\u3092\u3057\u307e\u3057\u305f\u3002\n\n```test:ttbasic.patch3\n--- ./basic.cpp 2016-05-10 00:00:00.000000000 +0900\n+++ ./basic.cpp\t2016-05-13 00:00:00.000000000 +0900\n@@ -101,10 +101,18 @@ enum {\n   I_GTE, I_SHARP, I_GT, I_EQ, I_LTE, I_LT,\n   I_ARRAY, I_RND, I_ABS, I_SIZE,\n   I_LIST, I_RUN, I_NEW,\n-  I_NUM, I_VAR, I_STR,\n+  I_NUM,\n+  I_VAR_A, I_VAR_B, I_VAR_C, I_VAR_D, I_VAR_E, I_VAR_F,\n+  I_VAR_G, I_VAR_H, I_VAR_I, I_VAR_J, I_VAR_K, I_VAR_L,\n+  I_VAR_M, I_VAR_N, I_VAR_O, I_VAR_P, I_VAR_Q, I_VAR_R,\n+  I_VAR_S, I_VAR_T, I_VAR_U, I_VAR_V, I_VAR_W, I_VAR_X,\n+  I_VAR_Y, I_VAR_Z,\n+  I_STR,\n   I_EOL\n };\n \n+#define is_ivar(c) ((c) >= I_VAR_A && (c) <= I_VAR_Z)\n+\n // List formatting condition\n // \u5f8c\u308d\u306b\u7a7a\u767d\u3092\u5165\u308c\u306a\u3044\u4e2d\u9593\u30b3\u30fc\u30c9\n const unsigned char i_nsa[] PROGMEM = {\n@@ -470,18 +478,17 @@ unsigned char toktoi() {\n \n     //\u5909\u6570\u3078\u306e\u5909\u63db\u3092\u8a66\u307f\u308b\n     if (c_isalpha(*ptok)) { //\u3082\u3057\u6587\u5b57\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306a\u3089\n-      if (len >= SIZE_IBUF - 2) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u3059\u304e\u305f\u3089\n+      if (len >= SIZE_IBUF - 1) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u3059\u304e\u305f\u3089\n         err = ERR_IBUFOF; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         return 0; //0\u3092\u6301\u3061\u5e30\u308b\n       }\n       //\u3082\u3057\u5909\u6570\u304c3\u500b\u4e26\u3093\u3060\u3089\n-      if (len >= 4 && ibuf[len - 2] == I_VAR && ibuf[len - 4] == I_VAR) {\n+      if (len >= 2 && is_ivar(ibuf[len - 1]) && is_ivar(ibuf[len - 2])) {\n         err = ERR_SYNTAX; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         return 0; //0\u3092\u6301\u3061\u5e30\u308b\n       }\n \n-      ibuf[len++] = I_VAR; //\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n-      ibuf[len++] = c_toupper(*ptok) - 'A'; //\u5909\u6570\u756a\u53f7\u3092\u8a18\u9332\n+      ibuf[len++] = I_VAR_A + c_toupper(*ptok) - 'A'; //\u5909\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n       s++; //\u6b21\u306e\u6587\u5b57\u3078\u9032\u3080\n     }\n     else\n@@ -601,9 +608,8 @@ void putlist(unsigned char* ip) {\n     else\n \n     //\u5909\u6570\u306e\u51e6\u7406\n-    if (*ip == I_VAR) { //\u3082\u3057\u5b9a\u6570\u306a\u3089\n-      ip++; //\u30dd\u30a4\u30f3\u30bf\u3092\u5909\u6570\u756a\u53f7\u3078\u9032\u3081\u308b\n-      c_putch(*ip++ + 'A'); //\u5909\u6570\u540d\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a\n+    if (is_ivar(*ip)) { //\u3082\u3057\u5909\u6570\u306a\u3089\n+      c_putch(*ip++ - I_VAR_A + 'A'); //\u5909\u6570\u540d\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a\n       if (!nospaceb(*ip)) //\u3082\u3057\u4f8b\u5916\u306b\u3042\u305f\u3089\u306a\u3051\u308c\u3070\n         c_putch(' '); //\u7a7a\u767d\u3092\u8868\u793a\n     }\n@@ -628,7 +634,7 @@ void putlist(unsigned char* ip) {\n       while (i--) //\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3059\n         c_putch(*ip++); //\u30dd\u30a4\u30f3\u30bf\u3092\u9032\u3081\u306a\u304c\u3089\u6587\u5b57\u3092\u8868\u793a\n       c_putch(c); //\u6587\u5b57\u5217\u306e\u62ec\u308a\u3092\u8868\u793a\n-      if (*ip == I_VAR) //\u3082\u3057\u6b21\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u5909\u6570\u3060\u3063\u305f\u3089\n+      if (is_ivar(*ip)) //\u3082\u3057\u6b21\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u5909\u6570\u3060\u3063\u305f\u3089\n         c_putch(' '); //\u7a7a\u767d\u3092\u8868\u793a\n     }\n \n@@ -688,9 +694,8 @@ short ivalue() {\n     break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n \n   //\u5909\u6570\u306e\u5024\u306e\u53d6\u5f97\n-  case I_VAR: //\u5909\u6570\u306e\u5834\u5408\n-    cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    value = var[*cip++]; //\u5909\u6570\u756a\u53f7\u304b\u3089\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\u3057\u3066\u6b21\u3092\u6307\u3057\u793a\u3059\n+  case I_VAR_A ... I_VAR_Z: //\u5909\u6570\u306e\u5834\u5408\n+    value = var[*cip++ - I_VAR_A]; //\u5909\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u304b\u3089\u5909\u6570\u306e\u5024\u3092\u53d6\u5f97\u3057\u3066\u6b21\u3092\u6307\u3057\u793a\u3059\n     break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n \n   //\u62ec\u5f27\u306e\u5024\u306e\u53d6\u5f97\n@@ -923,16 +928,15 @@ void iinput() {\n \n     //\u5024\u3092\u5165\u529b\u3059\u308b\u51e6\u7406\n     switch (*cip) { //\u4e2d\u9593\u30b3\u30fc\u30c9\u3067\u5206\u5c90\n-    case I_VAR: //\u5909\u6570\u306e\u5834\u5408\n-      cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n+    case I_VAR_A ... I_VAR_Z: //\u5909\u6570\u306e\u5834\u5408\n       if (prompt) { //\u3082\u3057\u307e\u3060\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u8868\u793a\u3057\u3066\u3044\u306a\u3051\u308c\u3070\n-        c_putch(*cip + 'A'); //\u5909\u6570\u540d\u3092\u8868\u793a\n+        c_putch(*cip - I_VAR_A + 'A'); //\u5909\u6570\u540d\u3092\u8868\u793a\n         c_putch(':'); //\u300c:\u300d\u3092\u8868\u793a\n       }\n       value = getnum(); //\u5024\u3092\u5165\u529b\n       if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n         return; //\u7d42\u4e86\n-      var[*cip++] = value; //\u5909\u6570\u3078\u4ee3\u5165\n+      var[*cip++ - I_VAR_A] = value; //\u5909\u6570\u3078\u4ee3\u5165\n       break; //\u6253\u3061\u5207\u308b\n \n     case I_ARRAY: //\u914d\u5217\u306e\u5834\u5408\n@@ -982,7 +986,7 @@ void ivar() {\n   short value; //\u5024\n   short index; //\u5909\u6570\u756a\u53f7\n \n-  index = *cip++; //\u5909\u6570\u756a\u53f7\u3092\u53d6\u5f97\u3057\u3066\u6b21\u3078\u9032\u3080\n+  index = *cip++ - I_VAR_A; //\u5909\u6570\u756a\u53f7\u3092\u53d6\u5f97\u3057\u3066\u6b21\u3078\u9032\u3080\n \n   if (*cip != I_EQ) { //\u3082\u3057\u300c=\u300d\u3067\u306a\u3051\u308c\u3070\n     err = ERR_VWOEQ; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n@@ -1027,8 +1031,7 @@ void iarray() {\n void ilet() {\n   switch (*cip) { //\u4e2d\u9593\u30b3\u30fc\u30c9\u3067\u5206\u5c90\n \n-  case I_VAR: //\u5909\u6570\u306e\u5834\u5408\n-    cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n+  case I_VAR_A ... I_VAR_Z: //\u5909\u6570\u306e\u5834\u5408\n     ivar(); //\u5909\u6570\u3078\u306e\u4ee3\u5165\u3092\u5b9f\u884c\n     break; //\u6253\u3061\u5207\u308b\n \n@@ -1114,11 +1117,11 @@ unsigned char* iexe() {\n       cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n \n       //\u5909\u6570\u540d\u3092\u53d6\u5f97\u3057\u3066\u958b\u59cb\u5024\u3092\u4ee3\u5165\uff08\u4f8bI=1\uff09\n-      if (*cip++ != I_VAR) { //\u3082\u3057\u5909\u6570\u304c\u306a\u304b\u3063\u305f\u3089\n+      if (!is_ivar(*cip)) { //\u3082\u3057\u5909\u6570\u304c\u306a\u304b\u3063\u305f\u3089\n         err = ERR_FORWOV; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         break; //\u6253\u3061\u5207\u308b\n       }\n-      index = *cip; //\u5909\u6570\u540d\u3092\u53d6\u5f97\n+      index = *cip - I_VAR_A; //\u5909\u6570\u540d\u3092\u53d6\u5f97\n       ivar(); //\u4ee3\u5165\u6587\u3092\u5b9f\u884c\n       if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n         break; //\u6253\u3061\u5207\u308b\n@@ -1169,11 +1172,11 @@ unsigned char* iexe() {\n \n       //\u5909\u6570\u540d\u3092\u5fa9\u5e30\n       index = (short)(uintptr_t)lstk[lstki - 1]; //\u5909\u6570\u540d\u3092\u5fa9\u5e30\n-      if (*cip++ != I_VAR) { //\u3082\u3057NEXT\u306e\u5f8c\u308d\u306b\u5909\u6570\u304c\u306a\u304b\u3063\u305f\u3089\n+      if (!is_ivar(*cip)) { //\u3082\u3057NEXT\u306e\u5f8c\u308d\u306b\u5909\u6570\u304c\u306a\u304b\u3063\u305f\u3089\n         err = ERR_NEXTWOV; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         break; //\u6253\u3061\u5207\u308b\n       }\n-      if (*cip++ != index) { //\u3082\u3057\u5fa9\u5e30\u3057\u305f\u5909\u6570\u540d\u3068\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u3089\n+      if (*cip++ - I_VAR_A != index) { //\u3082\u3057\u5fa9\u5e30\u3057\u305f\u5909\u6570\u540d\u3068\u4e00\u81f4\u3057\u306a\u304b\u3063\u305f\u3089\n         err = ERR_NEXTUM; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         break; //\u6253\u3061\u5207\u308b\n       }\n@@ -1216,8 +1219,7 @@ unsigned char* iexe() {\n       return clp; //\u884c\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u3061\u5e30\u308b\n \n     //\u4e00\u822c\u306e\u6587\u306b\u76f8\u5f53\u3059\u308b\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u7167\u5408\u3068\u51e6\u7406\n-    case I_VAR: //\u5909\u6570\u306e\u5834\u5408\uff08LET\u3092\u7701\u7565\u3057\u305f\u4ee3\u5165\u6587\uff09\n-      cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n+    case I_VAR_A ... I_VAR_Z: //\u5909\u6570\u306e\u5834\u5408\uff08LET\u3092\u7701\u7565\u3057\u305f\u4ee3\u5165\u6587\uff09\n       ivar(); //\u4ee3\u5165\u6587\u3092\u5b9f\u884c\n       break; //\u6253\u3061\u5207\u308b\n     case I_ARRAY: //\u914d\u5217\u306e\u5834\u5408\uff08LET\u3092\u7701\u7565\u3057\u305f\u4ee3\u5165\u6587\uff09\n```\n\u4ee5\u4e0a\u306e\u30d1\u30c3\u30c1\u306f GCC \u306e\u62e1\u5f35\u69cb\u6587\n\n```c:\nswitch( ) {\ncase value0 ... value9:\n    ...\n```\n\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u7b87\u6240\u304c\u3042\u308a\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3057\u306a\u3044\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u306f\u66f8\u304d\u76f4\u3057\u3092\u5fc5\u8981\u3068\u3059\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\n##\u5b9a\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u898b\u76f4\u3057\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u3067\u306f\u5b9a\u6570\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306f\n\n```test:\nI_NUM, \u5b9a\u6570\u306e\u5024\u4e0b\u4f4d8bit, \u5b9a\u6570\u306e\u5024\u4e0a\u4f4d8bit\n```\n\u3068\u3044\u3046\u5f62\u5f0f\u3067\u683c\u7d0d\u3055\u308c\u30013\u30d0\u30a4\u30c8\u306e\u9818\u57df\u3092\u5360\u3081\u307e\u3059\u3002\nBASIC \u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067\u306e\u5b9a\u6570\u306f 1\u6587\u5b57\u306e '0' \u3084 2\u6587\u5b57\u306e '10' \u7b49\u5404\u7a2e\u3042\u308a\u3001\u305d\u308c\u3089\u304c\u5168\u3066 3\u30d0\u30a4\u30c8\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u306f\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u304c\u6ea2\u308c\u308b\u539f\u56e0\u3068\u306a\u308b\u305f\u3081\u898b\u76f4\u3057\u3092\u884c\u3044\u307e\u3059\u3002\nI_NUM \u3092\u5ec3\u6b62\u3057\u3001\n\n\u5b9a\u6570\u306e\u5024 0 \uff5e 9\n\n```test:\nI_NUM_0 \uff5e I_NUM_9\n```\n\u5b9a\u6570\u306e\u5024 10 \uff5e 255\n\n```test:\nI_NUM_B, \u5b9a\u6570\u306e\u5024(10 \uff5e 255)\n```\n\u5b9a\u6570\u306e\u5024 256 \uff5e 32767, -1 \uff5e -32767\n\n```test:\nI_NUM_W, \u5b9a\u6570\u306e\u5024\u4e0b\u4f4d8bit, \u5b9a\u6570\u306e\u5024\u4e0a\u4f4d8bit\n```\n\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067 1\u6587\u5b57\u306e 0 \uff5e 9 \u306e\u5024\u306f 1\u30d0\u30a4\u30c8\u3001\u305d\u308c\u4ee5\u5916\u306e\u5024\u3067\u3082 \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u6570\u3068\u540c\u3058\u304b\u3088\u308a\u5c11\u306a\u3044\u30d0\u30a4\u30c8\u6570\u3067\u5024\u3092\u683c\u7d0d\u3067\u304d\u308b\u3053\u3068\u3068\u306a\u308a\u307e\u3059\u3002\n\n```test:ttbasic.patch4\n--- ./basic.cpp\t2016-05-13 00:00:00.000000000 +0900\n+++ ./basic.cpp\t2016-05-13 00:00:00.000000000 +0900\n@@ -101,7 +101,8 @@ enum {\n   I_GTE, I_SHARP, I_GT, I_EQ, I_LTE, I_LT,\n   I_ARRAY, I_RND, I_ABS, I_SIZE,\n   I_LIST, I_RUN, I_NEW,\n-  I_NUM,\n+  I_NUM_0, I_NUM_1, I_NUM_2, I_NUM_3, I_NUM_4, I_NUM_5,\n+  I_NUM_6, I_NUM_7, I_NUM_8, I_NUM_9, I_NUM_B, I_NUM_W,\n   I_VAR_A, I_VAR_B, I_VAR_C, I_VAR_D, I_VAR_E, I_VAR_F,\n   I_VAR_G, I_VAR_H, I_VAR_I, I_VAR_J, I_VAR_K, I_VAR_L,\n   I_VAR_M, I_VAR_N, I_VAR_O, I_VAR_P, I_VAR_Q, I_VAR_R,\n@@ -111,6 +112,7 @@ enum {\n   I_EOL\n };\n \n+#define is_inum(c) ((c) >= I_NUM_0 && (c) <= I_NUM_W)\n #define is_ivar(c) ((c) >= I_VAR_A && (c) <= I_VAR_Z)\n \n // List formatting condition\n@@ -445,13 +447,20 @@ unsigned char toktoi() {\n         value = tmp; //0\u3092\u6301\u3061\u5e30\u308b\n       } while (c_isdigit(*ptok)); //\u6587\u5b57\u304c\u6570\u5b57\u3067\u3042\u308b\u9650\u308a\u7e70\u308a\u8fd4\u3059\n \n-      if (len >= SIZE_IBUF - 3) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u3059\u304e\u305f\u3089\n+      if (len >= SIZE_IBUF - ((value >= 0 && value <= 9) ? 1 : (value <= 255) ? 2 : 3)) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u304c\u9577\u3059\u304e\u305f\u3089\n         err = ERR_IBUFOF; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n         return 0; //0\u3092\u6301\u3061\u5e30\u308b\n       }\n-      ibuf[len++] = I_NUM; //\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n-      ibuf[len++] = value & 255; //\u5b9a\u6570\u306e\u4e0b\u4f4d\u30d0\u30a4\u30c8\u3092\u8a18\u9332\n-      ibuf[len++] = value >> 8; //\u5b9a\u6570\u306e\u4e0a\u4f4d\u30d0\u30a4\u30c8\u3092\u8a18\u9332\n+      if (value >= 0 && value <= 9) {\n+        ibuf[len++] = I_NUM_0 + value; //\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n+      } else if (value <= 255) {\n+        ibuf[len++] = I_NUM_B; //\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n+        ibuf[len++] = value; //\u5b9a\u6570\u306e\u5024\u3092\u8a18\u9332\n+      } else {\n+        ibuf[len++] = I_NUM_W; //\u4e2d\u9593\u30b3\u30fc\u30c9\u3092\u8a18\u9332\n+        ibuf[len++] = value & 255; //\u5b9a\u6570\u306e\u4e0b\u4f4d\u30d0\u30a4\u30c8\u3092\u8a18\u9332\n+        ibuf[len++] = value >> 8; //\u5b9a\u6570\u306e\u4e0a\u4f4d\u30d0\u30a4\u30c8\u3092\u8a18\u9332\n+      }\n       s = ptok; //\u6587\u5b57\u5217\u306e\u51e6\u7406\u305a\u307f\u306e\u90e8\u5206\u3092\u8a70\u3081\u308b\n     }\n     else\n@@ -519,6 +528,34 @@ short getlineno(unsigned char *lp) {\n   return *(lp + 1) | *(lp + 2) << 8; //\u884c\u756a\u53f7\u3092\u6301\u3061\u5e30\u308b\n }\n \n+short getinum(unsigned char *lp) {\n+  unsigned char i_num = *lp;\n+\n+  if (i_num >= I_NUM_0 && i_num <= I_NUM_9) {\n+    return i_num - I_NUM_0; //\u5b9a\u6570\u3092\u6301\u3061\u5e30\u308b\n+  } else if (i_num == I_NUM_B) {\n+    return *(lp + 1); //\u5b9a\u6570\u3092\u6301\u3061\u5e30\u308b\n+  } else if (i_num == I_NUM_W) {\n+    return *(lp + 1) | *(lp + 2) << 8; //\u5b9a\u6570\u3092\u6301\u3061\u5e30\u308b\n+  } else {\n+    return 0;\n+  }\n+}\n+\n+unsigned char inumsize(unsigned char *lp) {\n+  unsigned char i_num = *lp;\n+\n+  if (i_num >= I_NUM_0 && i_num <= I_NUM_9) {\n+    return 1;\n+  } else if (i_num == I_NUM_B) {\n+    return 2;\n+  } else if (i_num == I_NUM_W) {\n+    return 3;\n+  } else {\n+    return 0;\n+  }\n+}\n+\n // Search line by line number\n unsigned char* getlp(short lineno) {\n   unsigned char *lp; //\u30dd\u30a4\u30f3\u30bf\n@@ -531,20 +568,23 @@ unsigned char* getlp(short lineno) {\n }\n \n // Insert i-code to the list\n-void inslist() {\n+void inslist(unsigned char size) {\n+  unsigned short line = getinum(ibuf);\n+  unsigned char isize = inumsize(ibuf);\n+  size = 1 + 2 + size - isize;\n   unsigned char *insp; //\u633f\u5165\u4f4d\u7f6e\n   unsigned char *p1, *p2; //\u79fb\u52d5\u5148\u3068\u79fb\u52d5\u5143\n   short len; //\u79fb\u52d5\u306e\u9577\u3055\n \n-  if (getsize() < *ibuf) { //\u3082\u3057\u7a7a\u304d\u304c\u4e0d\u8db3\u3057\u3066\u3044\u305f\u3089\n+  if (size > 4 && getsize() < size) { //\u3082\u3057\u7a7a\u304d\u304c\u4e0d\u8db3\u3057\u3066\u3044\u305f\u3089\n     err = ERR_LBUFOF; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n     return; //\u51e6\u7406\u3092\u6253\u3061\u5207\u308b\n   }\n \n-  insp = getlp(getlineno(ibuf)); //\u633f\u5165\u4f4d\u7f6e\u3092\u53d6\u5f97\n+  insp = getlp(line); //\u633f\u5165\u4f4d\u7f6e\u3092\u53d6\u5f97\n \n   //\u540c\u3058\u884c\u756a\u53f7\u306e\u884c\u304c\u5b58\u5728\u3057\u305f\u3089\u3068\u308a\u3042\u3048\u305a\u524a\u9664\n-  if (getlineno(insp) == getlineno(ibuf)) { //\u3082\u3057\u884c\u756a\u53f7\u304c\u4e00\u81f4\u3057\u305f\u3089\n+  if (getlineno(insp) == line) { //\u3082\u3057\u884c\u756a\u53f7\u304c\u4e00\u81f4\u3057\u305f\u3089\n     p1 = insp; //p1\u3092\u633f\u5165\u4f4d\u7f6e\u306b\u8a2d\u5b9a\n     p2 = p1 + *p1; //p2\u3092\u6b21\u306e\u884c\u306b\u8a2d\u5b9a\n     while (len = *p2) { //\u6b21\u306e\u884c\u304c\u672b\u5c3e\u3067\u306a\u3051\u308c\u3070\u7e70\u308a\u8fd4\u3059\n@@ -555,20 +595,23 @@ void inslist() {\n   }\n \n   //\u884c\u756a\u53f7\u3060\u3051\u304c\u5165\u529b\u3055\u308c\u305f\u5834\u5408\u306f\u3053\u3053\u3067\u7d42\u308f\u308b\n-  if (*ibuf == 4) //\u3082\u3057\u9577\u3055\u304c4\uff08\u884c\u756a\u53f7\u306e\u307f\uff09\u306a\u3089\n+  if (size == 4) //\u3082\u3057\u9577\u3055\u304c4\uff08\u884c\u756a\u53f7\u306e\u307f\uff09\u306a\u3089\n     return; //\u7d42\u4e86\u3059\u308b\n \n   //\u633f\u5165\u306e\u305f\u3081\u306e\u30b9\u30da\u30fc\u30b9\u3092\u7a7a\u3051\u308b\n   for (p1 = insp; *p1; p1 += *p1); //p1\u3092\u30ea\u30b9\u30c8\u306e\u672b\u5c3e\u3078\u79fb\u52d5\n   len = p1 - insp + 1; //\u79fb\u52d5\u3059\u308b\u5e45\u3092\u8a08\u7b97\n-  p2 = p1 + *ibuf; //p2\u3092\u672b\u5c3e\u3088\u308a1\u884c\u306e\u9577\u3055\u3060\u3051\u5f8c\u308d\u306b\u8a2d\u5b9a\n+  p2 = p1 + size; //p2\u3092\u672b\u5c3e\u3088\u308a1\u884c\u306e\u9577\u3055\u3060\u3051\u5f8c\u308d\u306b\u8a2d\u5b9a\n   while (len--) //\u79fb\u52d5\u3059\u308b\u5e45\u3060\u3051\u7e70\u308a\u8fd4\u3059\n     *p2-- = *p1--; //\u5f8c\u308d\u3078\u30ba\u30e9\u3059\n \n   //\u884c\u3092\u8ee2\u9001\u3059\u308b\n-  len = *ibuf; //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u9577\u3055\u3092\u8a2d\u5b9a\n+  len = size - 1 - 2; //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u9577\u3055\u3092\u8a2d\u5b9a\n   p1 = insp; //\u8ee2\u9001\u5148\u3092\u8a2d\u5b9a\n-  p2 = ibuf; //\u8ee2\u9001\u5143\u3092\u8a2d\u5b9a\n+  *p1++ = size;\n+  *p1++ = line & 0xff;\n+  *p1++ = line >> 8;\n+  p2 = ibuf + isize; //\u8ee2\u9001\u5143\u3092\u8a2d\u5b9a\n   while (len--) //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u9577\u3055\u3060\u3051\u7e70\u308a\u8fd4\u3059\n     *p1++ = *p2++; //\u8ee2\u9001\n }\n@@ -598,10 +641,9 @@ void putlist(unsigned char* ip) {\n     else\n \n     //\u5b9a\u6570\u306e\u51e6\u7406\n-    if (*ip == I_NUM) { //\u3082\u3057\u5b9a\u6570\u306a\u3089\n-      ip++; //\u30dd\u30a4\u30f3\u30bf\u3092\u5024\u3078\u9032\u3081\u308b\n-      putnum(*ip | *(ip + 1) << 8, 0); //\u5024\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a\n-      ip += 2; //\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u3078\u9032\u3081\u308b\n+    if (is_inum(*ip)) { //\u3082\u3057\u5b9a\u6570\u306a\u3089\n+      putnum(getinum(ip), 0); //\u5024\u3092\u53d6\u5f97\u3057\u3066\u8868\u793a\n+      ip += inumsize(ip); //\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u3078\u9032\u3081\u308b\n       if (!nospaceb(*ip)) //\u3082\u3057\u4f8b\u5916\u306b\u3042\u305f\u3089\u306a\u3051\u308c\u3070\n         c_putch(' '); //\u7a7a\u767d\u3092\u8868\u793a\n     }\n@@ -675,7 +717,17 @@ short ivalue() {\n   switch (*cip) { //\u4e2d\u9593\u30b3\u30fc\u30c9\u3067\u5206\u5c90\n \n   //\u5b9a\u6570\u306e\u53d6\u5f97\n-  case I_NUM: //\u5b9a\u6570\u306e\u5834\u5408\n+  case I_NUM_0 ... I_NUM_9: //0\uff5e9\u306e\u5b9a\u6570\u306e\u5834\u5408\n+    value = *cip++ - I_NUM_0; //\u5b9a\u6570\u3092\u53d6\u5f97\n+    break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n+\n+  case I_NUM_B: //1\u30d0\u30a4\u30c8\u5b9a\u6570\u306e\u5834\u5408\n+    cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n+    value = *cip; //\u5b9a\u6570\u3092\u53d6\u5f97\n+    cip += 1; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u5b9a\u6570\u306e\u6b21\u3078\u9032\u3081\u308b\n+    break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n+\n+  case I_NUM_W: //2\u30d0\u30a4\u30c8\u5b9a\u6570\u306e\u5834\u5408\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n     value = *cip | *(cip + 1) << 8; //\u5b9a\u6570\u3092\u53d6\u5f97\n     cip += 2; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u5b9a\u6570\u306e\u6b21\u3078\u9032\u3081\u308b\n@@ -1280,8 +1332,8 @@ void ilist() {\n   short lineno; //\u8868\u793a\u958b\u59cb\u884c\u756a\u53f7\n \n   //\u8868\u793a\u958b\u59cb\u884c\u756a\u53f7\u306e\u8a2d\u5b9a\n-  if (*cip == I_NUM) //\u3082\u3057LIST\u547d\u4ee4\u306b\u5f15\u6570\u304c\u3042\u3063\u305f\u3089\n-    lineno = getlineno(cip); //\u5f15\u6570\u3092\u8aad\u307f\u53d6\u3063\u3066\u8868\u793a\u958b\u59cb\u884c\u756a\u53f7\u3068\u3059\u308b\n+  if (is_inum(*cip)) //\u3082\u3057LIST\u547d\u4ee4\u306b\u5f15\u6570\u304c\u3042\u3063\u305f\u3089\n+    lineno = getinum(cip); //\u5f15\u6570\u3092\u8aad\u307f\u53d6\u3063\u3066\u8868\u793a\u958b\u59cb\u884c\u756a\u53f7\u3068\u3059\u308b\n   else //\u5f15\u6570\u304c\u306a\u3051\u308c\u3070\n     lineno = 0; //\u8868\u793a\u958b\u59cb\u884c\u756a\u53f7\u30920\u3068\u3059\u308b\n \n@@ -1337,8 +1389,7 @@ void icom() {\n \n   case I_LIST: //I_LIST\u306e\u5834\u5408\uff08LIST\u547d\u4ee4\uff09\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    if (*cip == I_EOL || //\u3082\u3057\u884c\u672b\u304b\u3001\u3042\u308b\u3044\u306f\n-      *(cip + 3) == I_EOL) //\u7d9a\u3044\u3066\u5f15\u6570\u304c\u3042\u308c\u3070\n+    if (cip[inumsize(cip)] == I_EOL) //\u3082\u3057\u884c\u672b\u304b\u3001\u3042\u308b\u3044\u306f\u7d9a\u3044\u3066\u5f15\u6570\u304c\u3042\u308c\u3070\n       ilist(); //LIST\u547d\u4ee4\u3092\u5b9f\u884c\n     else //\u305d\u3046\u3067\u306a\u3051\u308c\u3070\n       err = ERR_SYNTAX; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n@@ -1417,9 +1468,8 @@ void basic() {\n     }\n \n     //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u4e26\u3073\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u5224\u65ad\u3055\u308c\u308b\u5834\u5408\n-    if (*ibuf == I_NUM) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u5148\u982d\u304c\u884c\u756a\u53f7\u306a\u3089\n-      *ibuf = len; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u5148\u982d\u3092\u9577\u3055\u306b\u66f8\u304d\u63db\u3048\u308b\n-      inslist(); //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e1\u884c\u3092\u30ea\u30b9\u30c8\u3078\u633f\u5165\n+    if (is_inum(*ibuf)) { //\u3082\u3057\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u5148\u982d\u304c\u884c\u756a\u53f7\u306a\u3089\n+      inslist(len); //\u4e2d\u9593\u30b3\u30fc\u30c9\u306e1\u884c\u3092\u30ea\u30b9\u30c8\u3078\u633f\u5165\n       if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089\n         error(); //\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30af\u30ea\u30a2\n       continue; //\u7e70\u308a\u8fd4\u3057\u306e\u5148\u982d\u3078\u623b\u3063\u3066\u3084\u308a\u76f4\u3057\n```\n\u5c1a\u3001\u8c4a\u5d0e\u30bf\u30a4\u30cb\u30fcBASIC \u306b\u306f\u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u7a7a\u304d\u304c 4\u30d0\u30a4\u30c8\u3092\u5207\u308b\u3068\u884c\u756a\u53f7\u306e\u307f\u3092\u5165\u529b\u3057\u3066\u65e2\u5b58\u306e\u884c\u3092\u524a\u9664\u3059\u308b\u64cd\u4f5c\u304c\u884c\u3048\u306a\u304f\u306a\u308b\u3068\u3044\u3046\u4e0d\u5177\u5408\u3068\u601d\u308f\u308c\u308b\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u306e\u4fee\u6b63\u3082\u540c\u6642\u306b\u884c\u3063\u3066\u304a\u308a\u307e\u3059\u3002\n##\u305d\u306e\u4ed6\u306e\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u898b\u76f4\u3057\n\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u3067\u306f RND() \u7b49\u306e\u95a2\u6570\u3084 @(~) \u306e\u914d\u5217\u5909\u6570\u306f\u5e38\u306b '(' \u3068\u8fbc\u307f\u3067\u4f7f\u7528\u3055\u308c\u308b\u306b\u3082\u95a2\u308f\u3089\u305a\u3001\u4e2d\u9593\u30b3\u30fc\u30c9\u306f\u5225\u3068\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u30d0\u30a4\u30c8\u6570\u306e\u7121\u99c4\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```test:\n@(\uff5e) \u2192 I_ARRAY, I_OPEN, \uff5e, I_CLOSE\nRND(\uff5e) \u2192 I_RND, I_OPEN, \uff5e, I_CLOSE\nABS(\uff5e) \u2192 I_ABS, I_OPEN, \uff5e, I_CLOSE\nSIZE(\uff5e) \u2192 I_SIZE, I_OPEN, \uff5e, I_CLOSE\n```\n\u5e38\u306b '(' \u3068\u30bb\u30c3\u30c8\u3067\u4f7f\u7528\u3055\u308c\u308b\u306e\u3067\u3042\u308c\u3070\u3001'(' \u307e\u3067\u542b\u3081\u3066\u4e2d\u9593\u30b3\u30fc\u30c9\u3068\u3057\u3066\u6271\u3048\u3070\u3001\u4e2d\u9593\u30b3\u30fc\u30c9\u306e '(' \u3092\u8868\u3059 I_OPEN \u304c\u7701\u7565\u3067\u304d\u308b\u306e\u3067\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u7701\u30e1\u30e2\u30ea\u5316\u3068\u306a\u308a\u307e\u3059\u3002\n\n```test:ttbasic.patch5\n--- ./basic.cpp\t2016-05-13 00:00:00.000000000 +0900\n+++ ./basic.cpp\t2016-05-13 00:00:00.000000000 +0900\n@@ -67,10 +67,10 @@ const char kw23[] PROGMEM = \">\";\n const char kw24[] PROGMEM = \"=\";\n const char kw25[] PROGMEM = \"<=\";\n const char kw26[] PROGMEM = \"<\";\n-const char kw27[] PROGMEM = \"@\";\n-const char kw28[] PROGMEM = \"RND\";\n-const char kw29[] PROGMEM = \"ABS\";\n-const char kw30[] PROGMEM = \"SIZE\";\n+const char kw27[] PROGMEM = \"@(\";\n+const char kw28[] PROGMEM = \"RND(\";\n+const char kw29[] PROGMEM = \"ABS(\";\n+const char kw30[] PROGMEM = \"SIZE(\";\n const char kw31[] PROGMEM = \"LIST\";\n const char kw32[] PROGMEM = \"RUN\";\n const char kw33[] PROGMEM = \"NEW\";\n@@ -688,15 +688,20 @@ void putlist(unsigned char* ip) {\n }\n \n // Get argument in parenthesis\n+short getparam2(void);\n short getparam() {\n-  short value; //\u5024\n-\n   if (*cip != I_OPEN) { //\u3082\u3057\u300c(\u300d\u3067\u306a\u3051\u308c\u3070\n     err = ERR_PAREN; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n     return 0; //\u7d42\u4e86\n   }\n   cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n \n+  return getparam2();\n+}\n+\n+short getparam2(void) {\n+  short value; //\u5024\n+\n   value = iexp(); //\u5f0f\u3092\u8a08\u7b97\n   if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n     return 0; //\u7d42\u4e86\n@@ -758,7 +763,7 @@ short ivalue() {\n   //\u914d\u5217\u306e\u5024\u306e\u53d6\u5f97\n   case I_ARRAY: //\u914d\u5217\u306e\u5834\u5408\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    value = getparam(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n+    value = getparam2(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n     if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n       break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n     if (value >= SIZE_ARRY) { //\u3082\u3057\u6dfb\u3048\u5b57\u306e\u4e0a\u9650\u3092\u8d85\u3048\u305f\u3089\n@@ -771,7 +776,7 @@ short ivalue() {\n   //\u95a2\u6570\u306e\u5024\u306e\u53d6\u5f97\n   case I_RND: //\u95a2\u6570RND\u306e\u5834\u5408\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    value = getparam(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n+    value = getparam2(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n     if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n       break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n     value = getrnd(value); //\u4e71\u6570\u3092\u53d6\u5f97\n@@ -779,7 +784,7 @@ short ivalue() {\n \n   case I_ABS: //\u95a2\u6570ABS\u306e\u5834\u5408\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    value = getparam(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n+    value = getparam2(); //\u62ec\u5f27\u306e\u5024\u3092\u53d6\u5f97\n     if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n       break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n     if(value < 0) //\u3082\u30570\u672a\u6e80\u306a\u3089\n@@ -788,12 +793,12 @@ short ivalue() {\n \n   case I_SIZE: //\u95a2\u6570SIZE\u306e\u5834\u5408\n     cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-    //\u3082\u3057\u5f8c\u308d\u306b\u300c()\u300d\u304c\u306a\u304b\u3063\u305f\u3089\n-    if ((*cip != I_OPEN) || (*(cip + 1) != I_CLOSE)) {\n+    //\u3082\u3057\u5f8c\u308d\u306b\u300c)\u300d\u304c\u306a\u304b\u3063\u305f\u3089\n+    if ((*cip != I_CLOSE)) {\n       err = ERR_PAREN; //\u30a8\u30e9\u30fc\u756a\u53f7\u3092\u30bb\u30c3\u30c8\n       break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n     }\n-    cip += 2; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u300c()\u300d\u306e\u6b21\u3078\u9032\u3081\u308b\n+    cip += 1; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u300c)\u300d\u306e\u6b21\u3078\u9032\u3081\u308b\n     value = getsize(); //\u30d7\u30ed\u30b0\u30e9\u30e0\u4fdd\u5b58\u9818\u57df\u306e\u7a7a\u304d\u3092\u53d6\u5f97\n     break; //\u3053\u3053\u3067\u6253\u3061\u5207\u308b\n \n@@ -993,7 +998,7 @@ void iinput() {\n \n     case I_ARRAY: //\u914d\u5217\u306e\u5834\u5408\n       cip++; //\u4e2d\u9593\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30bf\u3092\u6b21\u3078\u9032\u3081\u308b\n-      index = getparam(); //\u914d\u5217\u306e\u6dfb\u3048\u5b57\u3092\u53d6\u5f97\n+      index = getparam2(); //\u914d\u5217\u306e\u6dfb\u3048\u5b57\u3092\u53d6\u5f97\n       if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n         return; //\u7d42\u4e86\n       if (index >= SIZE_ARRY) { //\u3082\u3057\u6dfb\u3048\u5b57\u304c\u4e0a\u9650\u3092\u8d85\u3048\u305f\u3089\n@@ -1058,7 +1063,7 @@ void iarray() {\n   short value; //\u5024\n   short index; //\u914d\u5217\u306e\u6dfb\u3048\u5b57\n \n-  index = getparam(); //\u914d\u5217\u306e\u6dfb\u3048\u5b57\u3092\u53d6\u5f97\n+  index = getparam2(); //\u914d\u5217\u306e\u6dfb\u3048\u5b57\u3092\u53d6\u5f97\n   if (err) //\u3082\u3057\u30a8\u30e9\u30fc\u304c\u751f\u3058\u305f\u3089\n     return; //\u7d42\u4e86\n \n```\n\u4ee5\u4e0a\u30013\u3064\u306e\u30d1\u30c3\u30c1\u3092\n\n```test:\n$ patch -p0 < ttbasic.patch3\n\n$ patch -p0 < ttbasic.patch4\n\n$ patch -p0 < ttbasic.patch5\n```\n\u4ee5\u4e0a\u306e\u9806\u306b\u5f53\u3066\u308b\u3053\u3068\u3067\u4e2d\u9593\u30b3\u30fc\u30c9\u306e\u7701\u30e1\u30e2\u30ea\u5316\u304c\u679c\u305f\u305b\u307e\u3059\u3002\n[\u300e\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC Arduino\u7248\u306e\u30d5\u30ea\u30fc\u30a8\u30ea\u30a2\u3092\u5897\u3084\u3059\u5b9f\u9a13(1)\u300f](http://qiita.com/fujitanozomu/items/86798923d16b5cd8f4f6)\u3067\u4e2d\u9593\u30b3\u30fc\u30c9\u63db\u7b97\u3067\u30b5\u30a4\u30ba\u304c 353\u30d0\u30a4\u30c8\u3068\u306a\u308b\u305f\u3081\u306b \u4e2d\u9593\u30b3\u30fc\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u5bb9\u91cf\u304c\u6a19\u6e96\u3067 256\u30d0\u30a4\u30c8\u3067\u3042\u308b\u8c4a\u5d0e\u30bf\u30a4\u30cb\u30fcBASIC Arduino\u7248\u3067\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u5b9f\u884c\u3067\u304d\u306a\u304b\u3063\u305f fibonacci.bas \u304c\u4eca\u56de\u306e\u5909\u66f4\u3067\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306a\u308a\u307e\u3057\u305f\u3002\n\n```text\nTOYOSHIKI TINY BASIC\nARDUINO EDITION\n\nOK\n>100 INPUT N\n>110 P=0; D=0\n>120 FOR I=0 TO N\n>130 IF I<=1 LET @(P)=I; GOTO 210\n>140 C=0\n>150 FOR J=0 TO D\n>160 @(2*J+P)=@(2*J+P)+@(2*J+(P=0))+C\n>170 C=@(2*J+P)>=10;\n>180 @(2*J+P)=@(2*J+P)-10*C\n>190 NEXT J\n>200 IF C#0 D=D+1; @(2*D+P)=C; @(2*D+(P=0))=0\n>210 PRINT I,\": \",\n>220 FOR J=D TO 0 STEP -1\n>230 PRINT #1,@(2*J+P),\n>240 NEXT J\n>250 PRINT\n>260 P=(P=0)\n>270 NEXT I\n>\n\nOK\n>PRINT SIZE()\n7\n\nOK\n>RUN\nN:70\n0: 0\n1: 1\n2: 1\n3: 2\n4: 3\n5: 5\n6: 8\n7: 13\n8: 21\n9: 34\n10: 55\n11: 89\n12: 144\n13: 233\n14: 377\n15: 610\n16: 987\n17: 1597\n18: 2584\n19: 4181\n20: 6765\n21: 10946\n22: 17711\n23: 28657\n24: 46368\n25: 75025\n26: 121393\n27: 196418\n28: 317811\n29: 514229\n30: 832040\n31: 1346269\n32: 2178309\n33: 3524578\n34: 5702887\n35: 9227465\n36: 14930352\n37: 24157817\n38: 39088169\n39: 63245986\n40: 102334155\n41: 165580141\n42: 267914296\n43: 433494437\n44: 701408733\n45: 1134903170\n46: 1836311903\n47: 2971215073\n48: 4807526976\n49: 7778742049\n50: 12586269025\n51: 20365011074\n52: 32951280099\n53: 53316291173\n54: 86267571272\n55: 139583862445\n56: 225851433717\n57: 365435296162\n58: 591286729879\n59: 956722026041\n60: 1548008755920\n61: 2504730781961\n62: 4052739537881\n63: 6557470319842\n64: 10610209857723\n65: 17167680177565\n66: 27777890035288\n67: 44945570212853\n68: 72723460248141\n69: 117669030460994\n70: 190392490709135\n\nOK\n>\n```\n\u5c1a\u3001\u4ee5\u4e0a\u306e\u5909\u66f4\u3092\u65bd\u3057\u3066\u3082\u3001\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC \u306e\u5927\u57df\u5909\u6570\u306b\u5909\u5316\u306f\u306a\u3044\u306e\u3067\u30d3\u30eb\u30c9\u6642\u306e RAM \u306e\u30d5\u30ea\u30fc\u30a8\u30ea\u30a2\u306b\u5909\u5316\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u300e\u8c4a\u56db\u5b63\u30bf\u30a4\u30cb\u30fcBASIC Arduino\u7248\u306e\u30d5\u30ea\u30fc\u30a8\u30ea\u30a2\u3092\u5897\u3084\u3059\u5b9f\u9a13(5)\u300f\u306b\u7d9a\u304f(\u4e88\u5b9a)\n\n\u756a\u5916:[\u300eavr-gcc \u306e\u30b3\u30fc\u30c9\u751f\u6210\u3067 switch \uff5e case \u306e\u6700\u9069\u5316\u306b\u3088\u3063\u3066\u306f RAM \u3092\u6d88\u8cbb\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u300f](http://qiita.com/fujitanozomu/items/5da5b574dffbb42f036d)\n"}