{"tags": ["Python", "mecab", "mecab-python3", "\u30d5\u30ea\u30ac\u30ca"], "context": "\n\n\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068\n\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044\n\n\u3068\u3044\u3046html\u304c\u3042\u308b\u5834\u5408\u306b\u81ea\u52d5\u3067\n<ruby><rb>\u79c1</rb><rt>\u308f\u305f\u3057</rt></ruby>\u306f\n<ruby><rb>\u5927\u5b66</rb><rt>\u3060\u3044\u304c\u304f</rt></ruby>\u3092\n<ruby><rb>\u8f9e</rb><rt>\u3084</rt></ruby>\u3081\u305f\u3044\n\n\n\u79c1\u308f\u305f\u3057\u306f\u5927\u5b66\u3060\u3044\u304c\u304f\u3092\u8f9e\u3084\u3081\u305f\u3044\n\n\u3068\u30eb\u30d3\u304c\u3075\u308c\u308b\u3088\u3046\u306b\u306a\u308b\n\n\u5fc5\u8981\u306a\u3082\u306e\n\u74b0\u5883\u306fMacOS,Python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f3.5.1\u3002\n1.Mecab(\u7b46\u8005\u306e\u5834\u5408\u30c7\u30d5\u30a9\u30eb\u30c8\u3067mac\u306b\u5165\u3063\u3066\u3044\u305f\u306e\u3067\u7701\u7565\u3057\u307e\u3059\uff09\n2.mecab-python3 \n3.pip(mecab-python3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306e\u306b\u5fc5\u8981\uff09\n\n\u5fc5\u8981\u306a\u3082\u306e\u3092\u305d\u308d\u3048\u308b\nMecab\u3068\u3044\u3046\u306e\u306f\u8f9e\u66f8\u89e3\u6790\u30c4\u30fc\u30eb\u3067\u3053\u308c\u3092\u4f7f\u3046\u3053\u3068\u306b\u6f22\u5b57\u306e\u3088\u307f\u304c\u306a\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4e0a\u304b\u3089mecab\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u6b21\u306e\u884c\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u30fb\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n$ mecab\n\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044\n\u79c1 \u540d\u8a5e,\u4ee3\u540d\u8a5e,\u4e00\u822c,*,*,*,\u79c1,\u30ef\u30bf\u30b7,\u30ef\u30bf\u30b7\n\u306f \u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u306f,\u30cf,\u30ef\n\u5927\u5b66  \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u5927\u5b66,\u30c0\u30a4\u30ac\u30af,\u30c0\u30a4\u30ac\u30af\n\u3092 \u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u3092,\u30f2,\u30f2\n\u8f9e\u3081  \u52d5\u8a5e,\u81ea\u7acb,*,*,\u4e00\u6bb5,\u9023\u7528\u5f62,\u8f9e\u3081\u308b,\u30e4\u30e1,\u30e4\u30e1\n\u305f\u3044  \u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30bf\u30a4,\u57fa\u672c\u5f62,\u305f\u3044,\u30bf\u30a4,\u30bf\u30a4\nEOS\n\n\u3053\u306eMecab\u3092python3\u3067\u6271\u3046\u305f\u3081\u306b\u306fpython-mecab3\u3068\u3044\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u3046\u3044\u3063\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u985e\u3092\u7ba1\u7406\u3059\u308b\u30c4\u30fc\u30eb\u304cpip\u3068\u3044\u3046\u3082\u306e\u306a\u306e\u3067\npip\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u307e\u305a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n(Ruby\u3067\u3044\u3046\u3068\u3053\u308d\u306egem\u306e\u3088\u3046\u306a\u3082\u306e\uff09\n\npip\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ easy_install pip\n\n\u3061\u306a\u307f\u306bpython3.4\u304b\u3089\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5165\u3063\u3066\u3044\u308b\u305d\u3046\u3067\u3059\u3002\n\nmecab-python3 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3057\u305f\u3089\u3001\u6b21\u306bmecab-python3 \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n$ pip install mecab-python3\n\npip list\u30b3\u30de\u30f3\u30c9\u3067\u73fe\u5728\u5165\u3063\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u306e\u3067\u3001\nmecab-python\u304c\u3042\u308c\u3070\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6210\u529f\u3067\u3059\u3002\n$ pip list\nmecab-python3 (0.7)\n\n\n\u3068\u308a\u3042\u3048\u305apython3\u3067Mecab\u3092\u6271\u3063\u3066\u307f\u308b\n\u3055\u3066\u3001\u3068\u308a\u3042\u3048\u305a\u74b0\u5883\u304c\u6574\u3044\u307e\u3057\u305f\u306e\u3067\u3001python\u304b\u3089mecab\u3092\u4f7f\u3063\u3066\u307f\u3066\u3069\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u304b\u3092\u78ba\u304b\u3081\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\nmacab.py\n#!/usr/local/src/pyenv/shims/python\n# -*- coding: utf_8 -*-\nimport sys\nimport MeCab\n\nmecab = MeCab.Tagger(\"-Ochasen\")#mecab\u3092\u547c\u3073\u51fa\u3057\ntext=mecab.parse('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')#\u3075\u308a\u304c\u306a\u3092\u53d6\u5f97\n\nprint(text)\n\n\n$ mecab.py\n\u79c1 \u30ef\u30bf\u30b7   \u79c1 \u540d\u8a5e-\u4ee3\u540d\u8a5e-\u4e00\u822c     \n\u306f \u30cf \u306f \u52a9\u8a5e-\u4fc2\u52a9\u8a5e        \n\u5927\u5b66  \u30c0\u30a4\u30ac\u30af    \u5927\u5b66  \u540d\u8a5e-\u4e00\u822c       \n\u3092 \u30f2 \u3092 \u52a9\u8a5e-\u683c\u52a9\u8a5e-\u4e00\u822c     \n\u8f9e\u3081  \u30e4\u30e1  \u8f9e\u3081\u308b   \u52d5\u8a5e-\u81ea\u7acb   \u4e00\u6bb5  \u9023\u7528\u5f62\n\u305f\u3044  \u30bf\u30a4  \u305f\u3044  \u52a9\u52d5\u8a5e   \u7279\u6b8a\u30fb\u30bf\u30a4 \u57fa\u672c\u5f62\nEOS\n\n\u30d1\u30fc\u30b9(parse)\u3068\u3044\u3046\u306e\u306f\"\u5206\u6790\" \u3068\u3044\u3063\u305f\u610f\u5473\u306a\u3088\u3046\u3067\nmecab = MeCab.Tagger(\"-Ochasen\")\n\n\u3067Mecab\u3092\u547c\u3073\u51fa\u3057\u305f\u5f8c\u306b\u3001\ntext=mecab.parse('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n\nparse\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u305d\u306e\u5f15\u6570\u306b\u5206\u6790\u3057\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u3067\u5b9f\u884c\u7d50\u679c\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u5f97\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\nparseToNode\u3092\u7528\u3044\u308b\n\u4e0a\u3067\u3068\u308a\u3042\u3048\u305a\u53d6\u5f97\u3067\u304d\u305f\u8a33\u3067\u3059\u304c\u3001\u3053\u306e\u5f62\u5f0f\u3060\u3068\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u308b\u305f\u3081\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306b\u306f\u3068\u3066\u3082\u6271\u3044\u3065\u3089\u3044\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30ce\u30fc\u30c9(Node)\u3068\u8a00\u308f\u308c\u308b\u5f62\u5f0f\u306b\u5909\u66f4\u3057\u3066\u6271\u3044\u3084\u3059\u304f\u3057\u307e\u3059\u3002\n\nmecab.py\nimport sys\nimport MeCab\n\n\nmecab = MeCab.Tagger(\"-Ochasen\")\nmecab.parse('')#\u7a7a\u3067\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nnode=mecab.parseToNode('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n\nwhile node :\n    print(node.surface+\"\\t\"+node.feature)\n    node=node.next\n\n\n$ mecab.py\n    BOS/EOS,*,*,*,*,*,*,*,*\n\u79c1 \u540d\u8a5e,\u4ee3\u540d\u8a5e,\u4e00\u822c,*,*,*,\u79c1,\u30ef\u30bf\u30b7,\u30ef\u30bf\u30b7\n\u306f \u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u306f,\u30cf,\u30ef\n\u5927\u5b66  \u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u5927\u5b66,\u30c0\u30a4\u30ac\u30af,\u30c0\u30a4\u30ac\u30af\n\u3092 \u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u3092,\u30f2,\u30f2\n\u8f9e\u3081  \u52d5\u8a5e,\u81ea\u7acb,*,*,\u4e00\u6bb5,\u9023\u7528\u5f62,\u8f9e\u3081\u308b,\u30e4\u30e1,\u30e4\u30e1\n\u305f\u3044  \u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30bf\u30a4,\u57fa\u672c\u5f62,\u305f\u3044,\u30bf\u30a4,\u30bf\u30a4\n    BOS/EOS,*,*,*,*,*,*,*,*\n\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u300c,\u300d\u533a\u5207\u308a\u3067\u5206\u6790\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u306e\u3067\u6271\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u5148\u307b\u3069\u3068\u540c\u3058\u3088\u3046\u306b\u3001mecab\u3092\u547c\u3073\u51fa\u3057\u305f\u3089\u3068\u308a\u3042\u3048\u305a\u5f15\u6570\u3092\u7a7a\u306b\u3057\u3066\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305d\u3046\u306a\u306e\u3067\u305d\u306e\u901a\u308a\u306b\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\nnode=mecab.parseToNode('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n\n\u3068\u3044\u3063\u305f\u3088\u3046\u306bparseToNode\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u6587\u7ae0\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u307e\u3059\u3002\nnode\u306f\uff11\u5358\u8a9e\u3065\u3064\u533a\u5207\u3063\u3066\u51e6\u7406\u3057\u3066\u3044\u304f\u306e\u3067\u3001while\u6587\u3092\u7528\u3044\u3066\n\u6587\u7ae0\u304c\u7d42\u308f\u308b(node\u306b\u5024\u3092\u5165\u308c\u7d42\u308f\u308b\uff09\u307e\u3067\u30eb\u30fc\u30d7\u3055\u305b\u307e\u3059\u3002\n\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u306f\u3001\nnode.surface\u3067\u5143\u306e\u5f15\u6570\u306e\u30c6\u30ad\u30b9\u30c8\u3001\nnode.feature\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e\u5206\u6790\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\n  node=node.next\n\n\u3092\u5fd8\u308c\u308b\u3068\u7121\u9650\u30eb\u30fc\u30d7\u3055\u308c\u308b\u306e\u3067\u6c17\u3092\u3064\u3051\u307e\u3057\u3087\u3046\u3002\n\u3053\u3053\u307e\u3067\u3067\u3068\u308a\u3042\u3048\u305apython\u304b\u3089mecab\u3092\u4f7f\u3046\u4e8b\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\nHTML\u5f62\u5f0f\u3067\u5b9f\u969b\u306b\u30eb\u30d3\u3092\u632f\u3063\u3066\u307f\u308b\n\u3053\u3053\u307e\u3067\u306f\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u306b\u60c5\u5831\u304c\u305f\u304f\u3055\u3093\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\n\u3053\u3053\u304b\u3089\u5148\u306f\u3042\u307e\u308a\u60c5\u5831\u304c\u306a\u304f\u82e6\u52b4\u3057\u305f\u90e8\u5206\u3067\u3059\u3002\n\u304c\u3001\u57fa\u672c\u7684\u306b\u306f\u4e0a\u306enode.feature\u3092\u3044\u3058\u308a\u306a\u304c\u3089html\u306b\u5f53\u3066\u306f\u3081\u3066\u3044\u304f\u4f5c\u696d\u306b\u306a\u308a\u307e\u3059\u3002\nhtml\u3067\u306e\u30eb\u30d3\u306e\u632f\u308a\u65b9\u306f\n<ruby><rb>\u6587\u5b57</rb><rt>\u3082\u3058</rt></ruby>\n\n\n\u6587\u5b57\u3082\u3058\n\n\u3068\u3044\u3063\u305f\u5f62\u306b\u306a\u308b\u306e\u3067\u3001\n\u30bf\u30b0\u5185\u306b\u5143\u306e\u6f22\u5b57\u3001rt\u30bf\u30b0\u5185\u306b\u3075\u308a\u304c\u306a\u3092\u5f53\u3066\u306f\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nmecab.py\n#!/usr/local/src/pyenv/shims/python\n# -*- coding: utf_8 -*-\n\nimport sys\nimport MeCab\nimport re\n\nmecab = MeCab.Tagger(\"-Ochasen\")\nmecab.parse('')#\u7a7a\u3067\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nnode=mecab.parseToNode('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n\nwhile node :\n    origin=node.surface#\u3082\u3068\u306e\u5358\u8a9e\u3092\u4ee3\u5165\n    kana=node.feature.split(\",\")[7]#\u8aad\u307f\u4eee\u540d\u3092\u4ee3\u5165\n\n    #\u6b63\u898f\u8868\u73fe\u3067\u6f22\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    pattern = \"[\u4e00-\u9fa5]\"\n    matchOB = re.match(pattern , origin)\n\n    #origin\u304c\u7a7a\u306e\u3068\u304d\u3001\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306f\u3075\u308a\u304c\u306a\u3092\u632f\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    if origin != \"\" and matchOB:\n        print(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\n    else :\n        print(origin)\n\n    node=node.next\n\n\n\n$ mecab.py\n<ruby><rb>\u79c1</rb><rt>\u30ef\u30bf\u30b7</rt></ruby>\u306f\n<ruby><rb>\u5927\u5b66</rb><rt>\u30c0\u30a4\u30ac\u30af</rt></ruby>\u3092\n<ruby><rb>\u8f9e\u3081</rb><rt>\u30e4\u30e1</rt></ruby>\u305f\u3044\n\n\n\u79c1\u30ef\u30bf\u30b7\u306f\u5927\u5b66\u30c0\u30a4\u30ac\u30af\u3092\u8f9e\u3081\u30e4\u30e1\u305f\u3044\n\n\u3060\u3044\u3076\u305d\u308c\u3063\u307d\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\u307e\u305a\u3001\u6700\u521d\u306e\uff12\u884c\u3067\u5358\u8a9e\u3068\u3088\u307f\u304c\u306a\u3092\u305d\u308c\u305e\u308corigin\u3068kana\u306b\u4ee3\u5165\u3057\u307e\u3059\u3002\n\u3088\u307f\u304c\u306a\u306e\u65b9\u306b\u95a2\u3057\u3066\u3001\u3088\u307f\u304c\u306a\u306fnode.feature\u306e\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e\uff17\u756a\u76ee\u306b\u3042\u308b\u306e\u3067split\u95a2\u6570\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u914d\u5217\u306b\u3057\u305f\uff17\u756a\u76ee\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\norigin=node.surface #\u3082\u3068\u306e\u5358\u8a9e\u3092\u4ee3\u5165\nkana=node.feature.split(\",\")[7] #\u8aad\u307f\u4eee\u540d\u3092\u4ee3\u5165\n\n\u7d9a\u3044\u3066\u3001\u4eca\u56de\u306f\u3082\u3068\u306e\u5358\u8a9e\u304c\u6f22\u5b57\u306e\u6642\u306e\u307f\u3075\u308a\u304c\u306a\u3092\u3075\u308a\u305f\u3044\u306e\u3067\n\u5143\u306e\u5358\u8a9e\u304c\u6f22\u5b57\u304b\u3069\u3046\u304b\u3092\u6b63\u898f\u8868\u73fe\u3092\u7528\u3044\u3066\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\n\u6b63\u898f\u8868\u73fe\u3092\u7528\u3044\u308b\u305f\u3081\u306b\u307e\u305a\u5192\u982d\u3067re\u3068\u3044\u3046\u3082\u306e\u3092import\u3057\u307e\u3059\u3002\nimport re\n\n\u6b63\u898f\u8868\u73fe\u306b\u3064\u3044\u3066\u3053\u3053\u3067\u306f\u8a73\u3057\u304f\u306f\u89e6\u308c\u307e\u305b\u3093\u304c\u3001\n\u5148\u307b\u3069import\u3057\u305fre\u306b\u306f\u3044\u308d\u3044\u308d\u306amethod\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u5358\u8a9eorigin\u306e\u5148\u982d\u306e\uff11\u6587\u5b57\u304c\u6f22\u5b57\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u305f\u3044\u3068\u3057\u3066\nmatch\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u307e\u3059\u3002\n\u7b2c\uff11\u5f15\u6570\u306b\u306f\u30d1\u30bf\u30fc\u30f3\uff08\u4eca\u56de\u306f\u6f22\u5b57\uff09\u7b2c\uff12\u5f15\u6570\u306b\u306f\u5358\u8a9e\u3092\u6307\u5b9a\u3002\n\u30de\u30c3\u30c1\u3057\u305f\u5834\u5408\u30de\u30c3\u30c1\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3044\u3046\u30de\u30c3\u30c1\u306b\u95a2\u3059\u308b\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\n\u30de\u30c3\u30c1\u3057\u306a\u3044\u5834\u5408\u306f\u300cNone\u300d\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\n  #\u6b63\u898f\u8868\u73fe\u3067\u6f22\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    pattern = \"[\u4e00-\u9fa5]\" #\u6f22\u5b57\u306e\u30d1\u30bf\u30fc\u30f3\n    matchOB = re.match(pattern , origin) #\u6f22\u5b57\u3058\u3083\u7121\u3044\u6642\u306fNone\n\n\u6700\u5f8c\u306bif\u3067\u5224\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\u65e5\u672c\u8a9e\u3067\u6574\u7406\u3059\u308b\u3068\u3001\n\u30fborigin\u304c\u6f22\u5b57\u306e\u3068\u304d\n\u27a1html\u3067\u30eb\u30d3\u3092\u632f\u3063\u3066\u51fa\u529b\n\u30fborigin\u304c\u6f22\u5b57\u4ee5\u5916\uff08\u3072\u3089\u304c\u306a\u3001\u30ab\u30bf\u30ab\u30ca\u3001\u6570\u5b57\u306a\u3069\uff09\u306e\u3068\u304d\n\u27a1\u305d\u306e\u307e\u307e\u306e\u5f62\u3067\u51fa\u529b\n\u3068\u306a\u308a\u307e\u3059\u3002\n  #origin\u304c\u7a7a\u306e\u3068\u304d\u3001\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306f\u3075\u308a\u304c\u306a\u3092\u632f\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    if matchOB and origin != \"\" :\n        print(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\n    else :\n        print(origin)\n\n\norigin\u304c\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306fmarchOB\u306bNone\u304c\u4ee3\u5165\u3055\u308c\u3066\u308b\u306e\u3067\u5224\u5b9a\u306b\u304b\u304b\u308aelse\u306e\u65b9\u306b\u79fb\u884c\u3057\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3067\u3060\u3044\u3076\u5f62\u306b\u306f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u3059\u304c\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30ab\u30bf\u30ab\u30ca\u554f\u984c\n\u9001\u308a\u4eee\u540d\u306f\u3072\u3089\u304c\u306a\u3067\u632f\u308a\u305f\u3044\u306e\u306b\u3001Mecab\u3067\u53d6\u5f97\u3067\u304d\u308b\u8aad\u307f\u4eee\u540d\u306f\u30ab\u30bf\u30ab\u30ca\u306a\u306e\u3067\u3053\u308c\u3092\u3072\u3089\u304c\u306a\u306b\u5909\u63db\u3057\u305f\u3044\u3067\u3059\u3002\nRuby\u3060\u3068\u95a2\u6570\u3092\u4f7f\u3048\u3070\u4e00\u767a\u3067\u51fa\u6765\u308b\u306e\u3067\u3059\u304cPython\u3060\u3068\u8abf\u3079\u305f\u9650\u308a\u3067\u306f\u51fa\u6765\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\u3067\u3059\u306e\u3067\u3001\u3053\u3053\u306f\u4e00\u5de5\u592b\u3057\u307e\u3059\u3002\n\u307e\u305a\u3001\u3053\u306e\u3088\u3046\u306a\u3072\u3089\u304c\u306a\u3068\u30ab\u30bf\u30ab\u30ca\uff11\u6587\u5b57\u305a\u3064\u306e\u914d\u5217\u3092\u7528\u610f\u3057\u307e\u3059\u3002\nhiragana=[\"\u3042\",\"\u3044\",\"\u3046\",\"\u3093\"]#hiragana[0]==\"\u3042\"\nkatakana=[\"\u30a2,\"\u30a4\",\"\u30a6\",\"\u30f3\"]#katakana[0]==\"\u30a2\"\n\n\u305d\u3057\u3066\u4f8b\u3048\u3070\n\u300c\u30a2\u30a4\u300d\u3068\u3044\u3046\u8a00\u8449\u3092\u300c\u3042\u3044\u300d\u306b\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\ntext=list(\"\u30a2\u30a4\")#text[0]==\"\u30a2\" text[1]==\"\u30a4\"\u306b\u306a\u308b\nkana=\"\"#\u3072\u3089\u304c\u306a\u3092\u5165\u308c\u308b\u5909\u6570\n\nfor hoge in len(text)#\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3059(hoge\u306b\u4ee3\u5165\uff09\n  for i in list(katakana)\n    katakana[i]==hoge\n    kana+=hiragana[i]\n\nprint(kana)#\u3042\u3044\n\n\u300c\u30a2\u30a4\u300d\u3092\u30a2\u3068\u30a4\u306b\u5206\u3051\u3066\uff11\u5b57\u305a\u3064\u7167\u5408\u3057\u305f\u3044\u306e\u3067\u3001\n\u300c\u30a2\u30a4\u300d\u3092\uff11\u6587\u5b57\u305a\u3064\u5206\u5272\u3057\u3066\u914d\u5217\u306b\u3057\u307e\u3059\u3002\n\u305d\u3057\u3066\u305d\u306e\u914d\u5217\u306e\u500b\u6570\uff08\uff1d\u6587\u5b57\u6570\uff09\u3060\u3051for\u3067\u30eb\u30fc\u30d7\u3057\u307e\u3059\u3002\n\u305d\u306e\u4e2d\u3067\u306f\u3001katakana\u306e\u500b\u6570\u5206\u3060\u3051\u30eb\u30fc\u30d7\u3057\u3001hoge\u3068\u7167\u5408\u3057\u307e\u3059\u3002\n\u4eca\u56de\u6700\u521d\u306e\u30eb\u30fc\u30d7\u306ehoge\u306e\u4e2d\u8eab\u306f\"\u30a2\"\u306a\u306e\u3067\u3001\ni\u304c0\u306e\u3068\u304d\u3059\u306a\u308f\u3061katakana[0]\u3068\u4e00\u81f4\u3057\u307e\u3059\u3002\n\u6700\u5f8c\u306bhiragana[i]\u3001\u3064\u307e\u308a\u4eca\u56de\u3067\u8a00\u3046\u3068\u3053\u308d\u306ehiragana[0]\u3059\u306a\u308f\u3061\"\u3042\" \n\u3092\u5909\u6570kana\u306b\u8db3\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u305b\u3070kana\u306b\u306f\u3072\u3089\u304c\u306a\u304c\u5165\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u305f\u30b3\u30fc\u30c9\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n\nmecab.py\n#!/usr/local/src/pyenv/shims/python\n# -*- coding: utf_8 -*-\n\nimport sys\nimport MeCab\nimport re\n\ndef henkan(text) :\n    hiragana=[chr(i) for i in range(12353, 12436)]\n    katakana=[chr(i) for i in range(12449, 12532)]\n    kana=\"\"\n    #\u8aad\u307f\u4eee\u540d\u306e\u30ab\u30bf\u304b\u306a\u3092\u3072\u3089\u304c\u306a\u306b\n    for text in list(text):\n        for i in range(83):\n            if text == katakana[i]:\n                kana+=hiragana[i]\n    return kana\n\nmecab = MeCab.Tagger(\"-Ochasen\")\nmecab.parse('')#\u7a7a\u3067\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nnode=mecab.parseToNode('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n\nwhile node :\n    origin=node.surface#\u3082\u3068\u306e\u5358\u8a9e\u3092\u4ee3\u5165\n    kana=node.feature.split(\",\")[7]#\u8aad\u307f\u4eee\u540d\u3092\u4ee3\u5165\n    kana=henkan(kana)#\u5909\u63db\u95a2\u6570\u3092\u547c\u3073\u3060\u3057\u30ab\u30bf\u30ab\u30ca\u3092\u3072\u3089\u304c\u306a\u306b\n\n    #\u6b63\u898f\u8868\u73fe\u3067\u6f22\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    pattern = \"[\u4e00-\u9fa5]\"\n    matchOB = re.match(pattern , origin)\n\n\n\n\n    #origin\u304c\u7a7a\u306e\u3068\u304d\u3001\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306f\u3075\u308a\u304c\u306a\u3092\u632f\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    if origin != \"\" and matchOB:\n\n        print(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\n\n    else :\n        print(origin)\n\n\n\n    node=node.next\n\n\n\n\n\u8a73\u7d30\u306f\u7701\u304d\u307e\u3059\u304c\u3001\nrange(83)\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u5c0f\u3055\u3044\u6587\u5b57\u3082\u52a0\u308f\u308a\uff15\uff10\u97f3\u3060\u3051\u3067\u306a\u304f\u914d\u5217\u306e\u500b\u6570\u304c\uff18\uff13\u306b\u306a\u308b\u305f\u3081\u3067\u3059\u3002\n\n\u9001\u308a\u4eee\u540d\u554f\u984c\n\u3082\u3046\uff11\u3064\u306e\u554f\u984c\u304c\u9001\u308a\u4eee\u540d\u306e\u554f\u984c\u3067\u3059\u3002\nMecab\u306f\u5358\u8a9e\u3054\u3068\u306b\u533a\u5207\u3063\u3066\u3044\u308b\u306e\u3067\u9001\u308a\u4eee\u540d\u3082\u542b\u307e\u308c\u3066\u3057\u307e\u3044\u7d14\u7c8b\u306b\u6f22\u5b57\u306e\u307f\u306b\u30eb\u30d3\u3092\u632f\u308c\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u4e8b\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001\n<ruby><rb>\u8f9e\u3081</rb><rt>\u3084\u3081</rt></ruby>\n\n\n\u8f9e\u3081\u3084\u3081\n\n\u3067\u306f\u306a\u304f\n<ruby><rb>\u8f9e</rb><rt>\u3084</rt></ruby>\u3081\n\n\n\u8f9e\u3084\u3081\n\n\u3068\u3057\u305f\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u3053\u308c\u306b\u3064\u3044\u3066\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\u57fa\u672c\u7684\u306b\u306f\u3001\u5143\u306e\u5358\u8a9e\u3068\u9001\u308a\u4eee\u540d\u306e\u8a9e\u5c3e\u304c\u4e00\u81f4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\norigin:\u7f8e\u3057\u3044\nkana:\u3046\u3064\u304f\u3057\u3044\norigin:\u8d70\u308b\nkana:\u306f\u3057\u308b\n\u3053\u308c\u3089\u306f\u8a9e\u5c3e\uff12\u5b57\u307e\u305f\u306f\uff11\u5b57\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u3067\u9001\u308a\u4eee\u540d\u3068\u5224\u65ad\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\u3053\u308c\u306b\u95a2\u3057\u3066\u3082\u5148\u307b\u3069\u306e\u30ab\u30bf\u30ab\u30ca\u554f\u984c\u306e\u3068\u304d\u306e\u3088\u3046\u306b\norigin\u3068kana\u3092\uff11\u5b57\u305a\u3064\u5206\u89e3\u3057\u914d\u5217\u5316\u3057\n\u8a9e\u5c3e\uff11\u6587\u5b57\u307e\u305f\u306f\uff12\u6587\u5b57\u304c\u4e00\u81f4\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3092\u3057\u307e\u3059\u3002\n\nmecab.py\n#!/usr/local/src/pyenv/shims/python\n# -*- coding: utf_8 -*-\n\nimport sys\nimport MeCab\nimport re\n\ndef henkan(text) :\n    hiragana=[chr(i) for i in range(12353, 12436)]\n    katakana=[chr(i) for i in range(12449, 12532)]\n    kana=\"\"\n    #\u8aad\u307f\u4eee\u540d\u306e\u30ab\u30bf\u304b\u306a\u3092\u3072\u3089\u304c\u306a\u306b\n    for text in list(text):\n        for i in range(83):\n            if text == katakana[i]:\n                kana+=hiragana[i]\n    return kana\n\n\nmecab = MeCab.Tagger(\"-Ochasen\")\nmecab.parse('')#\u7a7a\u3067\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nnode=mecab.parseToNode('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n\nwhile node :\n    origin=node.surface#\u3082\u3068\u306e\u5358\u8a9e\u3092\u4ee3\u5165\n    yomi=node.feature.split(\",\")[7]#\u8aad\u307f\u4eee\u540d\u3092\u4ee3\u5165\n    kana=henkan(yomi)\n\n    #\u6b63\u898f\u8868\u73fe\u3067\u6f22\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    pattern = \"[\u4e00-\u9fa5]\"\n    matchOB = re.match(pattern , origin)\n\n    #origin\u304c\u7a7a\u306e\u3068\u304d\u3001\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306f\u3075\u308a\u304c\u306a\u3092\u632f\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    if origin != \"\" and matchOB:\n\n        origin=list(origin)\n        kana=list(kana)\n        num1=len(origin)\n        num2=len(kana)\n        okurigana=\"\"\n\n        if origin[num1-1] == kana[num2-1] and origin[num1-2] == kana[num2-2] :\n            okurigana=origin[num1-2]+origin[num1-1]\n\n            origin[num1-1]=\"\"\n            origin[num1-2]=\"\"\n        \u3000  kana[num2-1]=\"\"\n        \u3000  kana[num2-2]=\"\"\n\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n        elif origin[num1-1] == kana[num2-1] :\n\n            okurigana=origin[num1-1]\n\n            origin[num1-1]=\"\"\n            kana[num2-1]=\"\"\n\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n        else :\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n\n        print(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\n        print(okurigana)\n\n    else :\n        print(origin)\n\n    node=node.next\n\n\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n$ mecab.py\n<ruby><rb>\u79c1</rb><rt>\u308f\u305f\u3057</rt></ruby>\n\u306f\n<ruby><rb>\u5927\u5b66</rb><rt>\u3060\u3044\u304c\u304f</rt></ruby>\n\u3092\n<ruby><rb>\u8f9e</rb><rt>\u3084</rt></ruby>\u3081\n\u305f\u3044\n\n\n\u79c1\u308f\u305f\u3057\u306f\u5927\u5b66\u3060\u3044\u304c\u304f\u3092\u8f9e\u3084\u3081\u305f\u3044\n\n\u3068\u306a\u308a\u3001\u898b\u4e8b\u306b\u5b8c\u6210\u3067\u3059\uff01\uff01\uff01\n\u3067\u306f\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\norigin=list(origin)\nkana=list(kana)\n\nnum1=len(origin)\nnum2=len(kana)\n\nokurigana=\"\"\n\n\n\u307e\u305a\u306f\u5148\u307b\u3069\u3044\u3063\u305f\u3088\u3046\u306b\uff11\u5b57\u305a\u3064\u8abf\u3079\u305f\u306e\u3067list\u95a2\u6570\u3067\u914d\u5217\u5316\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u8a9e\u5c3e\u304c\u4e00\u81f4\u3059\u308b\u304b\u3092\u8abf\u3079\u305f\u3044\u305f\u3081\u914d\u5217\u306e\u500b\u6570\u3092len\u95a2\u6570\u3067\u8abf\u3079\u3066\nnum1,num2\u306b\u305d\u308c\u305e\u308c\u4ee3\u5165\u3057\u307e\u3059\u3002\n  if origin[num1-1] == kana[num2-1] and origin[num1-2] == kana[num2-2] :\n            okurigana=origin[num1-2]+origin[num1-1]\n\n            origin[num1-1]=\"\"\n            kana[num1-2]=\"\"\n            origin[num2-1]=\"\"\n            kana[num2-2]=\"\"\n\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n\n\u3053\u308c\u306f\u6700\u5f8c\u306e\u6587\u5b57\u3068\u6700\u5f8c\u304b\u3089\uff12\u756a\u76ee\u304c\u4e00\u81f4\u3057\u305f\u6642\u306e\u51e6\u7406\u3001\u3064\u307e\u308a\n\u300c\u7f8e\u3057\u3044\u300d\u307f\u305f\u3044\u306a\u5358\u8a9e\u306e\u6642\u306e\u51e6\u7406\u3067\u3059\u3002\n\u3053\u306e\u5834\u5408\u3001\u8a9e\u5c3e\uff12\u6587\u5b57\u306e\u300c\u3057\u3044\u300d\u304c\u9001\u308a\u4eee\u540d\u306b\u306a\u308b\u306e\u3067\u3001\n\u3053\u308c\u3092okurigana\u5909\u6570\u306b\u4ee3\u5165\u3057\u307e\u3059\u3002\nokurigana=origin[num1-2]+origin[num1-1]\n\n\u4e00\u65e6\u5909\u6570\u306b\u5165\u308c\u3066\u3057\u307e\u3048\u3070\u300c\u3057\u3044\u300d\u306f\u4e0d\u8981\u306a\u306e\u3067\u524a\u9664\u3057\u307e\u3059\u3002\norigin[num1-1]=\"\"\nkana[num1-2]=\"\"\norigin[num2-1]=\"\"\nkana[num2-2]=\"\"\n\n\u6700\u5f8c\u306b\u3001\u6b8b\u3063\u305f\norigin=[\"\u7f8e\"]\nkana=[\"\u3046\",\"\u3064\",\"\u304f\"]\n\u3092\u5909\u6570\u306b\u623b\u3059\u305f\u3081\u306bjoin\u95a2\u6570\u3092\u7528\u3044\u307e\u3059\u3002\norigin=\"\".join(origin)\nkana=\"\".join(kana)\n\n\u6b8b\u308a\u306e\u90e8\u5206\u306b\u95a2\u3057\u3066\u306f\u300c\u8d70\u308b\u300d\u306e\u3088\u3046\u306a\u9001\u308a\u4eee\u540d\uff11\u6587\u5b57\u306e\u6642\u304b\u3001\n\u300c\u5927\u5b66\u300d\u306e\u3088\u3046\u306a\u9001\u308a\u4eee\u540d\u304c\u7121\u3044\u6642\u306e\u51e6\u7406\u3067\u3059\n        elif origin[num1-1] == kana[num2-1] :\n            okurigana=origin[num1-1]\n\n            origin[num1-1]=\"\"\n            kana[num2-1]=\"\"\n\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n        else :\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n\n\u914d\u5217\u5316\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4f55\u3082\u51e6\u7406\u304c\u7121\u3044\u9001\u308a\u4eee\u540d\u306a\u3057\u306e\u6642\u306b\u3082\n\u5909\u6570\u306b\u623b\u3059\u4f5c\u696d\u3092\u3057\u307e\u3059\u3002\n\u6700\u5f8c\u306f\u51fa\u529b\u3002\n\u3053\u3053\u307e\u3067\u306e\u51e6\u7406\u3067\u304d\u3063\u3061\u308a\u5909\u6570\u306b\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u7279\u5225\u5909\u66f4\u3059\u308b\u7b87\u6240\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u9001\u308a\u4eee\u540d\u304cokurigana\u306b\u4ee3\u5165\u3055\u308c\u308b\u306e\u3067\u3053\u308c\u3092\u5fd8\u308c\u305a\u306b\u51fa\u529b\u3057\u3066\u3042\u3052\u308c\u3070ok\u3067\u3059\u3002\nprint(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\nprint(okurigana)\n\n\u3042\u3068\u306f\u3053\u306e\u307e\u307e\u3060\u3068\u5c11\u3057\u898b\u3065\u3089\u3044\u306e\u3067\u95a2\u6570\u5316\u3057\u305f\u3089\u5b8c\u6210\u3067\u3059\uff01\n\nmecab.py\n#!/usr/local/src/pyenv/shims/python\n# -*- coding: utf_8 -*-\n\nimport sys\nimport MeCab\nimport re\n\ndef henkan(text) :\n    hiragana=[chr(i) for i in range(12353, 12436)]\n    katakana=[chr(i) for i in range(12449, 12532)]\n    kana=\"\"\n    #\u8aad\u307f\u4eee\u540d\u306e\u30ab\u30bf\u304b\u306a\u3092\u3072\u3089\u304c\u306a\u306b\n    for text in list(text):\n        for i in range(83):\n            if text == katakana[i]:\n                kana+=hiragana[i]\n    return kana\n\n\ndef tohensu(origin,kana) :\n    origin=\"\".join(origin)\n    kana=\"\".join(kana)\n    return origin,kana\n\ndef kanadelete(origin,kana) :\n    origin=list(origin)\n    kana=list(kana)\n    num1=len(origin)\n    num2=len(kana)\n    okurigana=\"\"\n\n\n    if origin[num1-1] == kana[num2-1] and origin[num1-2] == kana[num2-2] :\n        okurigana=origin[num1-2]+origin[num1-1]\n\n        origin[num1-1]=\"\"\n        origin[num1-2]=\"\"\n        kana[num2-1]=\"\"\n        kana[num2-2]=\"\"\n\n        origin,kana=tohensu(origin,kana)\n\n    elif origin[num1-1] == kana[num2-1] :\n\n        okurigana=origin[num1-1]\n\n        origin[num1-1]=\"\"\n        kana[num2-1]=\"\"\n        origin=\"\".join(origin)\n        kana=\"\".join(kana)\n    else :\n        origin,kana=tohensu(origin,kana)\n\n    return origin,kana,okurigana\n\n\nmecab = MeCab.Tagger(\"-Ochasen\")\nmecab.parse('')#\u7a7a\u3067\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nnode=mecab.parseToNode(\"\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044\")\n\nwhile node :\n    origin=node.surface#\u3082\u3068\u306e\u5358\u8a9e\u3092\u4ee3\u5165\n    yomi=node.feature.split(\",\")[7]#\u8aad\u307f\u4eee\u540d\u3092\u4ee3\u5165\n    kana=henkan(yomi)\n\n    #\u6b63\u898f\u8868\u73fe\u3067\u6f22\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    pattern = \"[\u4e00-\u9fa5]\"\n    matchOB = re.match(pattern , origin)\n\n\n    #origin\u304c\u7a7a\u306e\u3068\u304d\u3001\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306f\u3075\u308a\u304c\u306a\u3092\u632f\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    if origin != \"\" and matchOB:\n\n\n        origin,kana,okurigana=kanadelete(origin,kana)\n\n        print(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\n        print(okurigana)\n    else :\n        print(origin)\n\n\n\n    node=node.next\n\n\n\n##\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068\n\n```html\n\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044\n```\n\u3068\u3044\u3046html\u304c\u3042\u308b\u5834\u5408\u306b\u81ea\u52d5\u3067\n\n```html\n<ruby><rb>\u79c1</rb><rt>\u308f\u305f\u3057</rt></ruby>\u306f\n<ruby><rb>\u5927\u5b66</rb><rt>\u3060\u3044\u304c\u304f</rt></ruby>\u3092\n<ruby><rb>\u8f9e</rb><rt>\u3084</rt></ruby>\u3081\u305f\u3044\n```\n\n\n><ruby><rb>\u79c1</rb><rt>\u308f\u305f\u3057</rt></ruby>\u306f<ruby><rb>\u5927\u5b66</rb><rt>\u3060\u3044\u304c\u304f</rt></ruby>\u3092<ruby><rb>\u8f9e</rb><rt>\u3084</rt></ruby>\u3081\u305f\u3044\n\n\u3068\u30eb\u30d3\u304c\u3075\u308c\u308b\u3088\u3046\u306b\u306a\u308b\n\n##\u5fc5\u8981\u306a\u3082\u306e\n\u74b0\u5883\u306fMacOS,Python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f3.5.1\u3002\n1.Mecab(\u7b46\u8005\u306e\u5834\u5408\u30c7\u30d5\u30a9\u30eb\u30c8\u3067mac\u306b\u5165\u3063\u3066\u3044\u305f\u306e\u3067\u7701\u7565\u3057\u307e\u3059\uff09\n2.mecab-python3 \n3.pip(mecab-python3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u306e\u306b\u5fc5\u8981\uff09\n\n##\u5fc5\u8981\u306a\u3082\u306e\u3092\u305d\u308d\u3048\u308b\nMecab\u3068\u3044\u3046\u306e\u306f\u8f9e\u66f8\u89e3\u6790\u30c4\u30fc\u30eb\u3067\u3053\u308c\u3092\u4f7f\u3046\u3053\u3068\u306b\u6f22\u5b57\u306e\u3088\u307f\u304c\u306a\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u4e0a\u304b\u3089mecab\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u6b21\u306e\u884c\u306b\u30c6\u30ad\u30b9\u30c8\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u5b9f\u884c\u30fb\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```\n$ mecab\n\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044\n\u79c1\t\u540d\u8a5e,\u4ee3\u540d\u8a5e,\u4e00\u822c,*,*,*,\u79c1,\u30ef\u30bf\u30b7,\u30ef\u30bf\u30b7\n\u306f\t\u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u306f,\u30cf,\u30ef\n\u5927\u5b66\t\u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u5927\u5b66,\u30c0\u30a4\u30ac\u30af,\u30c0\u30a4\u30ac\u30af\n\u3092\t\u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u3092,\u30f2,\u30f2\n\u8f9e\u3081\t\u52d5\u8a5e,\u81ea\u7acb,*,*,\u4e00\u6bb5,\u9023\u7528\u5f62,\u8f9e\u3081\u308b,\u30e4\u30e1,\u30e4\u30e1\n\u305f\u3044\t\u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30bf\u30a4,\u57fa\u672c\u5f62,\u305f\u3044,\u30bf\u30a4,\u30bf\u30a4\nEOS\n```\n\n\u3053\u306eMecab\u3092python3\u3067\u6271\u3046\u305f\u3081\u306b\u306fpython-mecab3\u3068\u3044\u3046\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305d\u3046\u3044\u3063\u305f\u30d1\u30c3\u30b1\u30fc\u30b8\u985e\u3092\u7ba1\u7406\u3059\u308b\u30c4\u30fc\u30eb\u304cpip\u3068\u3044\u3046\u3082\u306e\u306a\u306e\u3067\npip\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u307e\u305a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n(Ruby\u3067\u3044\u3046\u3068\u3053\u308d\u306egem\u306e\u3088\u3046\u306a\u3082\u306e\uff09\n\n###pip\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n```\n$ easy_install pip\n```\n\u3061\u306a\u307f\u306bpython3.4\u304b\u3089\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5165\u3063\u3066\u3044\u308b\u305d\u3046\u3067\u3059\u3002\n\n###mecab-python3 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3057\u305f\u3089\u3001\u6b21\u306bmecab-python3 \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```\n$ pip install mecab-python3\n```\n\npip list\u30b3\u30de\u30f3\u30c9\u3067\u73fe\u5728\u5165\u3063\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u306e\u3067\u3001\nmecab-python\u304c\u3042\u308c\u3070\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6210\u529f\u3067\u3059\u3002\n\n```\n$ pip list\nmecab-python3 (0.7)\n```\n\n##\u3068\u308a\u3042\u3048\u305apython3\u3067Mecab\u3092\u6271\u3063\u3066\u307f\u308b\n\u3055\u3066\u3001\u3068\u308a\u3042\u3048\u305a\u74b0\u5883\u304c\u6574\u3044\u307e\u3057\u305f\u306e\u3067\u3001python\u304b\u3089mecab\u3092\u4f7f\u3063\u3066\u307f\u3066\u3069\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u306e\u304b\u3092\u78ba\u304b\u3081\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n```Python:macab.py\n#!/usr/local/src/pyenv/shims/python\n# -*- coding: utf_8 -*-\nimport sys\nimport MeCab\n\nmecab = MeCab.Tagger(\"-Ochasen\")#mecab\u3092\u547c\u3073\u51fa\u3057\ntext=mecab.parse('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')#\u3075\u308a\u304c\u306a\u3092\u53d6\u5f97\n\nprint(text)\n```\n```\n$ mecab.py\n\u79c1\t\u30ef\u30bf\u30b7\t\u79c1\t\u540d\u8a5e-\u4ee3\u540d\u8a5e-\u4e00\u822c\t\t\n\u306f\t\u30cf\t\u306f\t\u52a9\u8a5e-\u4fc2\u52a9\u8a5e\t\t\n\u5927\u5b66\t\u30c0\u30a4\u30ac\u30af\t\u5927\u5b66\t\u540d\u8a5e-\u4e00\u822c\t\t\n\u3092\t\u30f2\t\u3092\t\u52a9\u8a5e-\u683c\u52a9\u8a5e-\u4e00\u822c\t\t\n\u8f9e\u3081\t\u30e4\u30e1\t\u8f9e\u3081\u308b\t\u52d5\u8a5e-\u81ea\u7acb\t\u4e00\u6bb5\t\u9023\u7528\u5f62\n\u305f\u3044\t\u30bf\u30a4\t\u305f\u3044\t\u52a9\u52d5\u8a5e\t\u7279\u6b8a\u30fb\u30bf\u30a4\t\u57fa\u672c\u5f62\nEOS\n```\n\u30d1\u30fc\u30b9(parse)\u3068\u3044\u3046\u306e\u306f\"\u5206\u6790\" \u3068\u3044\u3063\u305f\u610f\u5473\u306a\u3088\u3046\u3067\n\n```\nmecab = MeCab.Tagger(\"-Ochasen\")\n```\n\n\u3067Mecab\u3092\u547c\u3073\u51fa\u3057\u305f\u5f8c\u306b\u3001\n\n```\ntext=mecab.parse('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n```\nparse\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u305d\u306e\u5f15\u6570\u306b\u5206\u6790\u3057\u305f\u3044\u30c6\u30ad\u30b9\u30c8\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u308b\u3053\u3068\u3067\u5b9f\u884c\u7d50\u679c\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u5f97\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\n####parseToNode\u3092\u7528\u3044\u308b\n\u4e0a\u3067\u3068\u308a\u3042\u3048\u305a\u53d6\u5f97\u3067\u304d\u305f\u8a33\u3067\u3059\u304c\u3001\u3053\u306e\u5f62\u5f0f\u3060\u3068\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u308b\u305f\u3081\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306b\u306f\u3068\u3066\u3082\u6271\u3044\u3065\u3089\u3044\u3067\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u3001\u30ce\u30fc\u30c9(Node)\u3068\u8a00\u308f\u308c\u308b\u5f62\u5f0f\u306b\u5909\u66f4\u3057\u3066\u6271\u3044\u3084\u3059\u304f\u3057\u307e\u3059\u3002\n\n```python:mecab.py\nimport sys\nimport MeCab\n\n\nmecab = MeCab.Tagger(\"-Ochasen\")\nmecab.parse('')#\u7a7a\u3067\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nnode=mecab.parseToNode('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n\nwhile node :\n    print(node.surface+\"\\t\"+node.feature)\n    node=node.next\n```\n```\n$ mecab.py\n\tBOS/EOS,*,*,*,*,*,*,*,*\n\u79c1\t\u540d\u8a5e,\u4ee3\u540d\u8a5e,\u4e00\u822c,*,*,*,\u79c1,\u30ef\u30bf\u30b7,\u30ef\u30bf\u30b7\n\u306f\t\u52a9\u8a5e,\u4fc2\u52a9\u8a5e,*,*,*,*,\u306f,\u30cf,\u30ef\n\u5927\u5b66\t\u540d\u8a5e,\u4e00\u822c,*,*,*,*,\u5927\u5b66,\u30c0\u30a4\u30ac\u30af,\u30c0\u30a4\u30ac\u30af\n\u3092\t\u52a9\u8a5e,\u683c\u52a9\u8a5e,\u4e00\u822c,*,*,*,\u3092,\u30f2,\u30f2\n\u8f9e\u3081\t\u52d5\u8a5e,\u81ea\u7acb,*,*,\u4e00\u6bb5,\u9023\u7528\u5f62,\u8f9e\u3081\u308b,\u30e4\u30e1,\u30e4\u30e1\n\u305f\u3044\t\u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30bf\u30a4,\u57fa\u672c\u5f62,\u305f\u3044,\u30bf\u30a4,\u30bf\u30a4\n\tBOS/EOS,*,*,*,*,*,*,*,*\n\n```\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u300c,\u300d\u533a\u5207\u308a\u3067\u5206\u6790\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u306e\u3067\u6271\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u5148\u307b\u3069\u3068\u540c\u3058\u3088\u3046\u306b\u3001mecab\u3092\u547c\u3073\u51fa\u3057\u305f\u3089\u3068\u308a\u3042\u3048\u305a\u5f15\u6570\u3092\u7a7a\u306b\u3057\u3066\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305d\u3046\u306a\u306e\u3067\u305d\u306e\u901a\u308a\u306b\u3057\u307e\u3059\u3002\n\n\u305d\u306e\u5f8c\n\n```\nnode=mecab.parseToNode('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n```\n\u3068\u3044\u3063\u305f\u3088\u3046\u306bparseToNode\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u6587\u7ae0\u3092\u6307\u5b9a\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\nnode\u306f\uff11\u5358\u8a9e\u3065\u3064\u533a\u5207\u3063\u3066\u51e6\u7406\u3057\u3066\u3044\u304f\u306e\u3067\u3001while\u6587\u3092\u7528\u3044\u3066\n\u6587\u7ae0\u304c\u7d42\u308f\u308b(node\u306b\u5024\u3092\u5165\u308c\u7d42\u308f\u308b\uff09\u307e\u3067\u30eb\u30fc\u30d7\u3055\u305b\u307e\u3059\u3002\n\n\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u306f\u3001\nnode.surface\u3067\u5143\u306e\u5f15\u6570\u306e\u30c6\u30ad\u30b9\u30c8\u3001\nnode.feature\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e\u5206\u6790\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\n\n```python\n  node=node.next\n```\n\u3092\u5fd8\u308c\u308b\u3068\u7121\u9650\u30eb\u30fc\u30d7\u3055\u308c\u308b\u306e\u3067\u6c17\u3092\u3064\u3051\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u3053\u307e\u3067\u3067\u3068\u308a\u3042\u3048\u305apython\u304b\u3089mecab\u3092\u4f7f\u3046\u4e8b\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n##HTML\u5f62\u5f0f\u3067\u5b9f\u969b\u306b\u30eb\u30d3\u3092\u632f\u3063\u3066\u307f\u308b\n\u3053\u3053\u307e\u3067\u306f\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u306b\u60c5\u5831\u304c\u305f\u304f\u3055\u3093\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\n\u3053\u3053\u304b\u3089\u5148\u306f\u3042\u307e\u308a\u60c5\u5831\u304c\u306a\u304f\u82e6\u52b4\u3057\u305f\u90e8\u5206\u3067\u3059\u3002\n\n\u304c\u3001\u57fa\u672c\u7684\u306b\u306f\u4e0a\u306enode.feature\u3092\u3044\u3058\u308a\u306a\u304c\u3089html\u306b\u5f53\u3066\u306f\u3081\u3066\u3044\u304f\u4f5c\u696d\u306b\u306a\u308a\u307e\u3059\u3002\n\nhtml\u3067\u306e\u30eb\u30d3\u306e\u632f\u308a\u65b9\u306f\n\n```html\n<ruby><rb>\u6587\u5b57</rb><rt>\u3082\u3058</rt></ruby>\n```\n><ruby><rb>\u6587\u5b57</rb><rt>\u3082\u3058</rt></ruby>\n\n\u3068\u3044\u3063\u305f\u5f62\u306b\u306a\u308b\u306e\u3067\u3001\n<rb>\u30bf\u30b0\u5185\u306b\u5143\u306e\u6f22\u5b57\u3001rt\u30bf\u30b0\u5185\u306b\u3075\u308a\u304c\u306a\u3092\u5f53\u3066\u306f\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n```python:mecab.py\n#!/usr/local/src/pyenv/shims/python\n# -*- coding: utf_8 -*-\n\nimport sys\nimport MeCab\nimport re\n\nmecab = MeCab.Tagger(\"-Ochasen\")\nmecab.parse('')#\u7a7a\u3067\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nnode=mecab.parseToNode('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n\nwhile node :\n    origin=node.surface#\u3082\u3068\u306e\u5358\u8a9e\u3092\u4ee3\u5165\n    kana=node.feature.split(\",\")[7]#\u8aad\u307f\u4eee\u540d\u3092\u4ee3\u5165\n\n    #\u6b63\u898f\u8868\u73fe\u3067\u6f22\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    pattern = \"[\u4e00-\u9fa5]\"\n    matchOB = re.match(pattern , origin)\n\n    #origin\u304c\u7a7a\u306e\u3068\u304d\u3001\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306f\u3075\u308a\u304c\u306a\u3092\u632f\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    if origin != \"\" and matchOB:\n        print(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\n    else :\n        print(origin)\n\n    node=node.next\n\n```\n\n```html\n$ mecab.py\n<ruby><rb>\u79c1</rb><rt>\u30ef\u30bf\u30b7</rt></ruby>\u306f\n<ruby><rb>\u5927\u5b66</rb><rt>\u30c0\u30a4\u30ac\u30af</rt></ruby>\u3092\n<ruby><rb>\u8f9e\u3081</rb><rt>\u30e4\u30e1</rt></ruby>\u305f\u3044\n```\n><ruby><rb>\u79c1</rb><rt>\u30ef\u30bf\u30b7</rt></ruby>\u306f<ruby><rb>\u5927\u5b66</rb><rt>\u30c0\u30a4\u30ac\u30af</rt></ruby>\u3092<ruby><rb>\u8f9e\u3081</rb><rt>\u30e4\u30e1</rt></ruby>\u305f\u3044\n\n\n\n\u3060\u3044\u3076\u305d\u308c\u3063\u307d\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u3001\u6700\u521d\u306e\uff12\u884c\u3067\u5358\u8a9e\u3068\u3088\u307f\u304c\u306a\u3092\u305d\u308c\u305e\u308corigin\u3068kana\u306b\u4ee3\u5165\u3057\u307e\u3059\u3002\n\n\u3088\u307f\u304c\u306a\u306e\u65b9\u306b\u95a2\u3057\u3066\u3001\u3088\u307f\u304c\u306a\u306fnode.feature\u306e\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e\uff17\u756a\u76ee\u306b\u3042\u308b\u306e\u3067split\u95a2\u6570\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u3067\u914d\u5217\u306b\u3057\u305f\uff17\u756a\u76ee\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python\norigin=node.surface #\u3082\u3068\u306e\u5358\u8a9e\u3092\u4ee3\u5165\nkana=node.feature.split(\",\")[7] #\u8aad\u307f\u4eee\u540d\u3092\u4ee3\u5165\n```\n\n\u7d9a\u3044\u3066\u3001\u4eca\u56de\u306f\u3082\u3068\u306e\u5358\u8a9e\u304c\u6f22\u5b57\u306e\u6642\u306e\u307f\u3075\u308a\u304c\u306a\u3092\u3075\u308a\u305f\u3044\u306e\u3067\n\u5143\u306e\u5358\u8a9e\u304c\u6f22\u5b57\u304b\u3069\u3046\u304b\u3092\u6b63\u898f\u8868\u73fe\u3092\u7528\u3044\u3066\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002\n\n\u6b63\u898f\u8868\u73fe\u3092\u7528\u3044\u308b\u305f\u3081\u306b\u307e\u305a\u5192\u982d\u3067re\u3068\u3044\u3046\u3082\u306e\u3092import\u3057\u307e\u3059\u3002\n\n```python\nimport re\n```\n\n\u6b63\u898f\u8868\u73fe\u306b\u3064\u3044\u3066\u3053\u3053\u3067\u306f\u8a73\u3057\u304f\u306f\u89e6\u308c\u307e\u305b\u3093\u304c\u3001\n\u5148\u307b\u3069import\u3057\u305fre\u306b\u306f\u3044\u308d\u3044\u308d\u306amethod\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u5358\u8a9eorigin\u306e\u5148\u982d\u306e\uff11\u6587\u5b57\u304c\u6f22\u5b57\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u305f\u3044\u3068\u3057\u3066\nmatch\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u307e\u3059\u3002\n\u7b2c\uff11\u5f15\u6570\u306b\u306f\u30d1\u30bf\u30fc\u30f3\uff08\u4eca\u56de\u306f\u6f22\u5b57\uff09\u7b2c\uff12\u5f15\u6570\u306b\u306f\u5358\u8a9e\u3092\u6307\u5b9a\u3002\n\n\u30de\u30c3\u30c1\u3057\u305f\u5834\u5408\u30de\u30c3\u30c1\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3044\u3046\u30de\u30c3\u30c1\u306b\u95a2\u3059\u308b\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\n\u30de\u30c3\u30c1\u3057\u306a\u3044\u5834\u5408\u306f\u300cNone\u300d\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\n\n```python\n  #\u6b63\u898f\u8868\u73fe\u3067\u6f22\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    pattern = \"[\u4e00-\u9fa5]\" #\u6f22\u5b57\u306e\u30d1\u30bf\u30fc\u30f3\n    matchOB = re.match(pattern , origin) #\u6f22\u5b57\u3058\u3083\u7121\u3044\u6642\u306fNone\n```\n\n\u6700\u5f8c\u306bif\u3067\u5224\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u65e5\u672c\u8a9e\u3067\u6574\u7406\u3059\u308b\u3068\u3001\n\u30fborigin\u304c\u6f22\u5b57\u306e\u3068\u304d\n\u27a1html\u3067\u30eb\u30d3\u3092\u632f\u3063\u3066\u51fa\u529b\n\u30fborigin\u304c\u6f22\u5b57\u4ee5\u5916\uff08\u3072\u3089\u304c\u306a\u3001\u30ab\u30bf\u30ab\u30ca\u3001\u6570\u5b57\u306a\u3069\uff09\u306e\u3068\u304d\n\u27a1\u305d\u306e\u307e\u307e\u306e\u5f62\u3067\u51fa\u529b\n\u3068\u306a\u308a\u307e\u3059\u3002\n\n```python\n  #origin\u304c\u7a7a\u306e\u3068\u304d\u3001\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306f\u3075\u308a\u304c\u306a\u3092\u632f\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    if matchOB and origin != \"\" :\n        print(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\n    else :\n        print(origin)\n\n```\norigin\u304c\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306fmarchOB\u306bNone\u304c\u4ee3\u5165\u3055\u308c\u3066\u308b\u306e\u3067\u5224\u5b9a\u306b\u304b\u304b\u308aelse\u306e\u65b9\u306b\u79fb\u884c\u3057\u307e\u3059\u3002\n\n\n\u3053\u3053\u307e\u3067\u3067\u3060\u3044\u3076\u5f62\u306b\u306f\u306a\u3063\u3066\u304d\u305f\u306e\u3067\u3059\u304c\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\n####\u30ab\u30bf\u30ab\u30ca\u554f\u984c\n\u9001\u308a\u4eee\u540d\u306f\u3072\u3089\u304c\u306a\u3067\u632f\u308a\u305f\u3044\u306e\u306b\u3001Mecab\u3067\u53d6\u5f97\u3067\u304d\u308b\u8aad\u307f\u4eee\u540d\u306f\u30ab\u30bf\u30ab\u30ca\u306a\u306e\u3067\u3053\u308c\u3092\u3072\u3089\u304c\u306a\u306b\u5909\u63db\u3057\u305f\u3044\u3067\u3059\u3002\n\nRuby\u3060\u3068\u95a2\u6570\u3092\u4f7f\u3048\u3070\u4e00\u767a\u3067\u51fa\u6765\u308b\u306e\u3067\u3059\u304cPython\u3060\u3068\u8abf\u3079\u305f\u9650\u308a\u3067\u306f\u51fa\u6765\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u3067\u3059\u306e\u3067\u3001\u3053\u3053\u306f\u4e00\u5de5\u592b\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u3001\u3053\u306e\u3088\u3046\u306a\u3072\u3089\u304c\u306a\u3068\u30ab\u30bf\u30ab\u30ca\uff11\u6587\u5b57\u305a\u3064\u306e\u914d\u5217\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```python\nhiragana=[\"\u3042\",\"\u3044\",\"\u3046\",\"\u3093\"]#hiragana[0]==\"\u3042\"\nkatakana=[\"\u30a2,\"\u30a4\",\"\u30a6\",\"\u30f3\"]#katakana[0]==\"\u30a2\"\n```\n\n\u305d\u3057\u3066\u4f8b\u3048\u3070\n\u300c\u30a2\u30a4\u300d\u3068\u3044\u3046\u8a00\u8449\u3092\u300c\u3042\u3044\u300d\u306b\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\n\n```python\ntext=list(\"\u30a2\u30a4\")#text[0]==\"\u30a2\" text[1]==\"\u30a4\"\u306b\u306a\u308b\nkana=\"\"#\u3072\u3089\u304c\u306a\u3092\u5165\u308c\u308b\u5909\u6570\n\nfor hoge in len(text)#\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3059(hoge\u306b\u4ee3\u5165\uff09\n  for i in list(katakana)\n    katakana[i]==hoge\n    kana+=hiragana[i]\n\nprint(kana)#\u3042\u3044\n```\n\n\n\u300c\u30a2\u30a4\u300d\u3092\u30a2\u3068\u30a4\u306b\u5206\u3051\u3066\uff11\u5b57\u305a\u3064\u7167\u5408\u3057\u305f\u3044\u306e\u3067\u3001\n\u300c\u30a2\u30a4\u300d\u3092\uff11\u6587\u5b57\u305a\u3064\u5206\u5272\u3057\u3066\u914d\u5217\u306b\u3057\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u305d\u306e\u914d\u5217\u306e\u500b\u6570\uff08\uff1d\u6587\u5b57\u6570\uff09\u3060\u3051for\u3067\u30eb\u30fc\u30d7\u3057\u307e\u3059\u3002\n\n\u305d\u306e\u4e2d\u3067\u306f\u3001katakana\u306e\u500b\u6570\u5206\u3060\u3051\u30eb\u30fc\u30d7\u3057\u3001hoge\u3068\u7167\u5408\u3057\u307e\u3059\u3002\n\u4eca\u56de\u6700\u521d\u306e\u30eb\u30fc\u30d7\u306ehoge\u306e\u4e2d\u8eab\u306f\"\u30a2\"\u306a\u306e\u3067\u3001\ni\u304c0\u306e\u3068\u304d\u3059\u306a\u308f\u3061katakana[0]\u3068\u4e00\u81f4\u3057\u307e\u3059\u3002\n\n\n\u6700\u5f8c\u306bhiragana[i]\u3001\u3064\u307e\u308a\u4eca\u56de\u3067\u8a00\u3046\u3068\u3053\u308d\u306ehiragana[0]\u3059\u306a\u308f\u3061\"\u3042\" \n\u3092\u5909\u6570kana\u306b\u8db3\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u6587\u5b57\u6570\u3060\u3051\u7e70\u308a\u8fd4\u305b\u3070kana\u306b\u306f\u3072\u3089\u304c\u306a\u304c\u5165\u308a\u307e\u3059\u3002\n\n\n\n\u3053\u308c\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u5316\u3057\u305f\u30b3\u30fc\u30c9\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n\n```python:mecab.py\n#!/usr/local/src/pyenv/shims/python\n# -*- coding: utf_8 -*-\n\nimport sys\nimport MeCab\nimport re\n\ndef henkan(text) :\n    hiragana=[chr(i) for i in range(12353, 12436)]\n    katakana=[chr(i) for i in range(12449, 12532)]\n    kana=\"\"\n    #\u8aad\u307f\u4eee\u540d\u306e\u30ab\u30bf\u304b\u306a\u3092\u3072\u3089\u304c\u306a\u306b\n    for text in list(text):\n        for i in range(83):\n            if text == katakana[i]:\n                kana+=hiragana[i]\n    return kana\n\nmecab = MeCab.Tagger(\"-Ochasen\")\nmecab.parse('')#\u7a7a\u3067\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nnode=mecab.parseToNode('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n\nwhile node :\n    origin=node.surface#\u3082\u3068\u306e\u5358\u8a9e\u3092\u4ee3\u5165\n    kana=node.feature.split(\",\")[7]#\u8aad\u307f\u4eee\u540d\u3092\u4ee3\u5165\n    kana=henkan(kana)#\u5909\u63db\u95a2\u6570\u3092\u547c\u3073\u3060\u3057\u30ab\u30bf\u30ab\u30ca\u3092\u3072\u3089\u304c\u306a\u306b\n\n    #\u6b63\u898f\u8868\u73fe\u3067\u6f22\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    pattern = \"[\u4e00-\u9fa5]\"\n    matchOB = re.match(pattern , origin)\n\n\n\n\n    #origin\u304c\u7a7a\u306e\u3068\u304d\u3001\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306f\u3075\u308a\u304c\u306a\u3092\u632f\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    if origin != \"\" and matchOB:\n    \n        print(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\n      \n    else :\n        print(origin)\n\n\n\n    node=node.next\n\n\n```\n\n\n\u8a73\u7d30\u306f\u7701\u304d\u307e\u3059\u304c\u3001\n\n```python\nrange(83)\n```\n\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u5c0f\u3055\u3044\u6587\u5b57\u3082\u52a0\u308f\u308a\uff15\uff10\u97f3\u3060\u3051\u3067\u306a\u304f\u914d\u5217\u306e\u500b\u6570\u304c\uff18\uff13\u306b\u306a\u308b\u305f\u3081\u3067\u3059\u3002\n\n\n\n####\u9001\u308a\u4eee\u540d\u554f\u984c\n\u3082\u3046\uff11\u3064\u306e\u554f\u984c\u304c\u9001\u308a\u4eee\u540d\u306e\u554f\u984c\u3067\u3059\u3002\nMecab\u306f\u5358\u8a9e\u3054\u3068\u306b\u533a\u5207\u3063\u3066\u3044\u308b\u306e\u3067\u9001\u308a\u4eee\u540d\u3082\u542b\u307e\u308c\u3066\u3057\u307e\u3044\u7d14\u7c8b\u306b\u6f22\u5b57\u306e\u307f\u306b\u30eb\u30d3\u3092\u632f\u308c\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u4e8b\u3067\u3059\u3002\n\n\u3064\u307e\u308a\u3001\n\n```html\n<ruby><rb>\u8f9e\u3081</rb><rt>\u3084\u3081</rt></ruby>\n````\n><ruby><rb>\u8f9e\u3081</rb><rt>\u3084\u3081</rt></ruby>\n\n\u3067\u306f\u306a\u304f\n\n```html\n<ruby><rb>\u8f9e</rb><rt>\u3084</rt></ruby>\u3081\n```\n><ruby><rb>\u8f9e</rb><rt>\u3084</rt></ruby>\u3081\n\n\u3068\u3057\u305f\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\n\u3053\u308c\u306b\u3064\u3044\u3066\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u57fa\u672c\u7684\u306b\u306f\u3001\u5143\u306e\u5358\u8a9e\u3068\u9001\u308a\u4eee\u540d\u306e\u8a9e\u5c3e\u304c\u4e00\u81f4\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n\norigin:\u7f8e<font color=\"red\">\u3057\u3044</font>\nkana:\u3046\u3064\u304f<font color=\"red\">\u3057\u3044</font>\norigin:\u8d70<font color=\"red\">\u308b</font>\nkana:\u306f\u3057<font color=\"red\">\u308b</font>\n\n\u3053\u308c\u3089\u306f\u8a9e\u5c3e\uff12\u5b57\u307e\u305f\u306f\uff11\u5b57\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u3067\u9001\u308a\u4eee\u540d\u3068\u5224\u65ad\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u3053\u308c\u306b\u95a2\u3057\u3066\u3082\u5148\u307b\u3069\u306e\u30ab\u30bf\u30ab\u30ca\u554f\u984c\u306e\u3068\u304d\u306e\u3088\u3046\u306b\norigin\u3068kana\u3092\uff11\u5b57\u305a\u3064\u5206\u89e3\u3057\u914d\u5217\u5316\u3057\n\u8a9e\u5c3e\uff11\u6587\u5b57\u307e\u305f\u306f\uff12\u6587\u5b57\u304c\u4e00\u81f4\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a\u3092\u3057\u307e\u3059\u3002\n\n```python:mecab.py\n#!/usr/local/src/pyenv/shims/python\n# -*- coding: utf_8 -*-\n\nimport sys\nimport MeCab\nimport re\n\ndef henkan(text) :\n    hiragana=[chr(i) for i in range(12353, 12436)]\n    katakana=[chr(i) for i in range(12449, 12532)]\n    kana=\"\"\n    #\u8aad\u307f\u4eee\u540d\u306e\u30ab\u30bf\u304b\u306a\u3092\u3072\u3089\u304c\u306a\u306b\n    for text in list(text):\n        for i in range(83):\n            if text == katakana[i]:\n                kana+=hiragana[i]\n    return kana\n\n\nmecab = MeCab.Tagger(\"-Ochasen\")\nmecab.parse('')#\u7a7a\u3067\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nnode=mecab.parseToNode('\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044')\n\nwhile node :\n    origin=node.surface#\u3082\u3068\u306e\u5358\u8a9e\u3092\u4ee3\u5165\n    yomi=node.feature.split(\",\")[7]#\u8aad\u307f\u4eee\u540d\u3092\u4ee3\u5165\n    kana=henkan(yomi)\n\n    #\u6b63\u898f\u8868\u73fe\u3067\u6f22\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    pattern = \"[\u4e00-\u9fa5]\"\n    matchOB = re.match(pattern , origin)\n\n    #origin\u304c\u7a7a\u306e\u3068\u304d\u3001\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306f\u3075\u308a\u304c\u306a\u3092\u632f\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    if origin != \"\" and matchOB:\n\n        origin=list(origin)\n        kana=list(kana)\n        num1=len(origin)\n        num2=len(kana)\n        okurigana=\"\"\n\n        if origin[num1-1] == kana[num2-1] and origin[num1-2] == kana[num2-2] :\n            okurigana=origin[num1-2]+origin[num1-1]\n\n            origin[num1-1]=\"\"\n            origin[num1-2]=\"\"\n        \u3000  kana[num2-1]=\"\"\n        \u3000  kana[num2-2]=\"\"\n\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n        elif origin[num1-1] == kana[num2-1] :\n\n            okurigana=origin[num1-1]\n\n            origin[num1-1]=\"\"\n            kana[num2-1]=\"\"\n\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n        else :\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n\n        print(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\n        print(okurigana)\n\n    else :\n        print(origin)\n\n    node=node.next\n\n```\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n\n```\n$ mecab.py\n<ruby><rb>\u79c1</rb><rt>\u308f\u305f\u3057</rt></ruby>\n\u306f\n<ruby><rb>\u5927\u5b66</rb><rt>\u3060\u3044\u304c\u304f</rt></ruby>\n\u3092\n<ruby><rb>\u8f9e</rb><rt>\u3084</rt></ruby>\u3081\n\u305f\u3044\n```\n\n><ruby><rb>\u79c1</rb><rt>\u308f\u305f\u3057</rt></ruby>\u306f<ruby><rb>\u5927\u5b66</rb><rt>\u3060\u3044\u304c\u304f</rt></ruby>\u3092<ruby><rb>\u8f9e</rb><rt>\u3084</rt></ruby>\u3081\u305f\u3044\n\n\u3068\u306a\u308a\u3001\u898b\u4e8b\u306b\u5b8c\u6210\u3067\u3059\uff01\uff01\uff01\n\n\n\u3067\u306f\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n```python\norigin=list(origin)\nkana=list(kana)\n\nnum1=len(origin)\nnum2=len(kana)\n \nokurigana=\"\"\n\n```\n\n\u307e\u305a\u306f\u5148\u307b\u3069\u3044\u3063\u305f\u3088\u3046\u306b\uff11\u5b57\u305a\u3064\u8abf\u3079\u305f\u306e\u3067list\u95a2\u6570\u3067\u914d\u5217\u5316\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u8a9e\u5c3e\u304c\u4e00\u81f4\u3059\u308b\u304b\u3092\u8abf\u3079\u305f\u3044\u305f\u3081\u914d\u5217\u306e\u500b\u6570\u3092len\u95a2\u6570\u3067\u8abf\u3079\u3066\nnum1,num2\u306b\u305d\u308c\u305e\u308c\u4ee3\u5165\u3057\u307e\u3059\u3002\n\n\n```python\n  if origin[num1-1] == kana[num2-1] and origin[num1-2] == kana[num2-2] :\n            okurigana=origin[num1-2]+origin[num1-1]\n\n            origin[num1-1]=\"\"\n            kana[num1-2]=\"\"\n            origin[num2-1]=\"\"\n            kana[num2-2]=\"\"\n\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n```\n\n\u3053\u308c\u306f\u6700\u5f8c\u306e\u6587\u5b57\u3068\u6700\u5f8c\u304b\u3089\uff12\u756a\u76ee\u304c\u4e00\u81f4\u3057\u305f\u6642\u306e\u51e6\u7406\u3001\u3064\u307e\u308a\n\u300c\u7f8e\u3057\u3044\u300d\u307f\u305f\u3044\u306a\u5358\u8a9e\u306e\u6642\u306e\u51e6\u7406\u3067\u3059\u3002\n\n\u3053\u306e\u5834\u5408\u3001\u8a9e\u5c3e\uff12\u6587\u5b57\u306e\u300c\u3057\u3044\u300d\u304c\u9001\u308a\u4eee\u540d\u306b\u306a\u308b\u306e\u3067\u3001\n\u3053\u308c\u3092okurigana\u5909\u6570\u306b\u4ee3\u5165\u3057\u307e\u3059\u3002\n\n```\nokurigana=origin[num1-2]+origin[num1-1]\n```\n\n\u4e00\u65e6\u5909\u6570\u306b\u5165\u308c\u3066\u3057\u307e\u3048\u3070\u300c\u3057\u3044\u300d\u306f\u4e0d\u8981\u306a\u306e\u3067\u524a\u9664\u3057\u307e\u3059\u3002\n\n```\norigin[num1-1]=\"\"\nkana[num1-2]=\"\"\norigin[num2-1]=\"\"\nkana[num2-2]=\"\"\n```\n\u6700\u5f8c\u306b\u3001\u6b8b\u3063\u305f\norigin=[\"\u7f8e\"]\nkana=[\"\u3046\",\"\u3064\",\"\u304f\"]\n\u3092\u5909\u6570\u306b\u623b\u3059\u305f\u3081\u306bjoin\u95a2\u6570\u3092\u7528\u3044\u307e\u3059\u3002\n\n```python\norigin=\"\".join(origin)\nkana=\"\".join(kana)\n```\n\n\u6b8b\u308a\u306e\u90e8\u5206\u306b\u95a2\u3057\u3066\u306f\u300c\u8d70\u308b\u300d\u306e\u3088\u3046\u306a\u9001\u308a\u4eee\u540d\uff11\u6587\u5b57\u306e\u6642\u304b\u3001\n\u300c\u5927\u5b66\u300d\u306e\u3088\u3046\u306a\u9001\u308a\u4eee\u540d\u304c\u7121\u3044\u6642\u306e\u51e6\u7406\u3067\u3059\n\n```python\n        elif origin[num1-1] == kana[num2-1] :\n            okurigana=origin[num1-1]\n\n            origin[num1-1]=\"\"\n            kana[num2-1]=\"\"\n\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n        else :\n            origin=\"\".join(origin)\n            kana=\"\".join(kana)\n\n```\n\u914d\u5217\u5316\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4f55\u3082\u51e6\u7406\u304c\u7121\u3044\u9001\u308a\u4eee\u540d\u306a\u3057\u306e\u6642\u306b\u3082\n\u5909\u6570\u306b\u623b\u3059\u4f5c\u696d\u3092\u3057\u307e\u3059\u3002\n\n\u6700\u5f8c\u306f\u51fa\u529b\u3002\n\n\u3053\u3053\u307e\u3067\u306e\u51e6\u7406\u3067\u304d\u3063\u3061\u308a\u5909\u6570\u306b\u4ee3\u5165\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u7279\u5225\u5909\u66f4\u3059\u308b\u7b87\u6240\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u9001\u308a\u4eee\u540d\u304cokurigana\u306b\u4ee3\u5165\u3055\u308c\u308b\u306e\u3067\u3053\u308c\u3092\u5fd8\u308c\u305a\u306b\u51fa\u529b\u3057\u3066\u3042\u3052\u308c\u3070ok\u3067\u3059\u3002\n\n```python\nprint(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\nprint(okurigana)\n```\n\n\u3042\u3068\u306f\u3053\u306e\u307e\u307e\u3060\u3068\u5c11\u3057\u898b\u3065\u3089\u3044\u306e\u3067\u95a2\u6570\u5316\u3057\u305f\u3089\u5b8c\u6210\u3067\u3059\uff01\n\n```python:mecab.py\n#!/usr/local/src/pyenv/shims/python\n# -*- coding: utf_8 -*-\n\nimport sys\nimport MeCab\nimport re\n\ndef henkan(text) :\n    hiragana=[chr(i) for i in range(12353, 12436)]\n    katakana=[chr(i) for i in range(12449, 12532)]\n    kana=\"\"\n    #\u8aad\u307f\u4eee\u540d\u306e\u30ab\u30bf\u304b\u306a\u3092\u3072\u3089\u304c\u306a\u306b\n    for text in list(text):\n        for i in range(83):\n            if text == katakana[i]:\n                kana+=hiragana[i]\n    return kana\n\n\ndef tohensu(origin,kana) :\n    origin=\"\".join(origin)\n    kana=\"\".join(kana)\n    return origin,kana\n\ndef kanadelete(origin,kana) :\n    origin=list(origin)\n    kana=list(kana)\n    num1=len(origin)\n    num2=len(kana)\n    okurigana=\"\"\n\n\n    if origin[num1-1] == kana[num2-1] and origin[num1-2] == kana[num2-2] :\n        okurigana=origin[num1-2]+origin[num1-1]\n\n        origin[num1-1]=\"\"\n        origin[num1-2]=\"\"\n        kana[num2-1]=\"\"\n        kana[num2-2]=\"\"\n\n        origin,kana=tohensu(origin,kana)\n\n    elif origin[num1-1] == kana[num2-1] :\n\n        okurigana=origin[num1-1]\n\n        origin[num1-1]=\"\"\n        kana[num2-1]=\"\"\n        origin=\"\".join(origin)\n        kana=\"\".join(kana)\n    else :\n        origin,kana=tohensu(origin,kana)\n\n    return origin,kana,okurigana\n\n\nmecab = MeCab.Tagger(\"-Ochasen\")\nmecab.parse('')#\u7a7a\u3067\u30d1\u30fc\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nnode=mecab.parseToNode(\"\u79c1\u306f\u5927\u5b66\u3092\u8f9e\u3081\u305f\u3044\")\n\nwhile node :\n    origin=node.surface#\u3082\u3068\u306e\u5358\u8a9e\u3092\u4ee3\u5165\n    yomi=node.feature.split(\",\")[7]#\u8aad\u307f\u4eee\u540d\u3092\u4ee3\u5165\n    kana=henkan(yomi)\n\n    #\u6b63\u898f\u8868\u73fe\u3067\u6f22\u5b57\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n    pattern = \"[\u4e00-\u9fa5]\"\n    matchOB = re.match(pattern , origin)\n\n\n    #origin\u304c\u7a7a\u306e\u3068\u304d\u3001\u6f22\u5b57\u4ee5\u5916\u306e\u6642\u306f\u3075\u308a\u304c\u306a\u3092\u632f\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\n    if origin != \"\" and matchOB:\n\n\n        origin,kana,okurigana=kanadelete(origin,kana)\n\n        print(\"<ruby><rb>{0}</rb><rt>{1}</rt></ruby>\".format(origin,kana),end=\"\")\n        print(okurigana)\n    else :\n        print(origin)\n\n\n\n    node=node.next\n\n```\n"}