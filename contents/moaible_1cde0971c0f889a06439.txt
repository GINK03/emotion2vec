{"context": " More than 1 year has passed since last update.\n\nSwift API Design Guidelines\u3092\u7ffb\u8a33\u3057\u3066\u307f\u305f(Conventions)\n\nConventions - \u898f\u7d04\n\nGeneral Conventions - \u4e00\u822c\u7684\u306a\u898f\u7d04\n\n\nDocument the complexity of any computed property that is not O(1). People often assume that property access involves no significant computation, because they have stored properties as a mental model. Be sure to alert them when that assumption may be violated.\n\u8a08\u7b97\u91cf\u304cO(1)\u3067\u7121\u3044computed propety\u306b\u306f\u3001\u8907\u96d1\u5ea6\u3092\u30b3\u30e1\u30f3\u30c8\u306b\u8a18\u8ff0\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6211\u3005\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u30a2\u30af\u30bb\u30b9\u306f\u5927\u91cf\u306e\u8a08\u7b97\u3092\u4f34\u308f\u306a\u3044\u3068\u3057\u3070\u3057\u3070\u60f3\u5b9a\u3057\u307e\u3059\u3002 \u306a\u305c\u306a\u3089\u3001\u666e\u901a\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3044\u3048\u3070\u8a08\u7b97\u3092\u3068\u3082\u306a\u308f\u306a\u3044stored property\u3092\u60f3\u5b9a\u3059\u308b\u304b\u3089\u3067\u3059\u3002 \u305d\u306e\u60f3\u5b9a\u306b\u53cd\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u5834\u5408\u306f\u3001\u5fc5\u305a\u8b66\u544a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\nPrefer methods and properties to free functions. Free functions are used only in special cases:\nfree function\u3067\u306f\u7121\u304f\u3001\u30e1\u30bd\u30c3\u30c9\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7528\u3044\u307e\u3057\u3087\u3046\u3002 free function\u306f\u3001\u7279\u5225\u306a\u5834\u5408\u306b\u306e\u307f\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\n\n\n\nWhen there\u2019s no obvious self:\n\u660e\u767d\u306aself\u304c\u3044\u306a\u3044\u3068\u304d\nmin(x, y, z)\n\n\n\nWhen the function is an unconstrained generic:\n\u95a2\u6570\u304c\u5236\u7d04\u306a\u304f\u6c4e\u7528\u7684\u306a\u3068\u304d\nprint(x)\n\n\n\nWhen function syntax is part of the established domain notation:\n\u95a2\u6570\u306e\u69cb\u6587\u304c\u78ba\u7acb\u3055\u308c\u305f\u30c9\u30e1\u30a4\u30f3\u8868\u8a18\u306e\u4e00\u90e8\u306e\u3068\u304d\nsin(x)\n\n\n\n\n\n\nFollow case conventions: names of types, protocols and enum cases are UpperCamelCase. Everything else is lowerCamelCase.\n\u578b\u3001protocol\u3001enum\u306fUpperCamelCase\u3001\u305d\u308c\u4ee5\u5916\u306f\u3001lowerCamelCase\u3067\u3059\u3002\n\n\n\nMethods can share a base name when they share the same basic meaning but operate on different types, or are in different domains.\n\u5171\u901a\u306e\u610f\u5473\u3092\u5171\u6709\u3057\u3066\u3044\u308b\u6642\u306b\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306f\u5171\u901a\u306e\u540d\u524d\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n\n\nFor example, the following is encouraged, since the methods do essentially the same things:\n\u4ee5\u4e0b\u306e\u4f8b\u306f\u63a8\u5968\u3055\u308c\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u57fa\u672c\u7684\u306b\u540c\u3058\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\nextension Shape { \n/// Returns `true` iff `other` is within the area of `self`. \nfunc contains(other: Point) -> Bool { ... }  \n\n/// Returns `true` iff `other` is entirely within the area of `self`. \nfunc contains(other: Shape) -> Bool { ... }  \n\n/// Returns `true` iff `other` is within the area of `self`. \nfunc contains(other: LineSegment) -> Bool { ... } \n}\n\n\n\n\nAnd since geometric types and collections are separate domains, this is also fine in the same program:\n\u307e\u305f\u3001\u5f62(Shape)\u3068\u3001\u96c6\u5408(Collection)\u306f\u7570\u306a\u308b\u30c9\u30e1\u30a4\u30f3\u3067\u3059\u306e\u3067\u3001\u540c\u3058\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067\u4ee5\u4e0b\u306e\u66f8\u304d\u65b9\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\nextension Collection where Element : Equatable { \n/// Returns `true` iff `self` contains an element equal to \n/// `sought`. func contains(sought: Element) -> Bool { ... } \n}\n\n\n\n\nHowever, these index methods have different semantics, and should have been named differently:\n\u3057\u304b\u3057\u3001\u4ee5\u4e0b\u306eindex\u30e1\u30bd\u30c3\u30c9\u306f\u7570\u306a\u308b\u610f\u5473\u306a\u306e\u3067\u3001\u7570\u306a\u308b\u540d\u524d\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\nextension Database { \n/// Rebuilds the database's search index \nfunc index() { ... }  \n/// Returns the `n`th row in the given table. \nfunc index(n: Int, inTable: TableID) -> TableRow { ... } \n}\n\n\n\n\nLastly, avoid \u201coverloading on return type\u201d because it causes ambiguities in the presence of type inference:\n\u6700\u5f8c\u306b\u3001\"\u623b\u308a\u5024\u306b\u3088\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\"\u306f\u907f\u3051\u307e\u3057\u3087\u3046\u3002\n\u306a\u305c\u306a\u3089\u3001\u578b\u63a8\u8ad6\u306e\u969b\u306b\u66d6\u6627\u3055\u3092\u3082\u305f\u3089\u3059\u304b\u3089\u3067\u3059\u3002\nextension Box { \n/// Returns the `Int` stored in `self`, if any, and\n/// `nil` otherwise.\nfunc value() -> Int? { ... }\n\n/// Returns the `String` stored in `self`, if any, and \n/// `nil` otherwise. \nfunc value() -> String? { ... } \n}\n\n\n\n\nParameters - \u30d1\u30e9\u30e1\u30fc\u30bf\n\n\nTake advantage of defaulted arguments when it simplifies common uses. Any parameter with a single commonly-used value is a candidate for defaulting.\n\u3088\u304f\u4f7f\u308f\u308c\u308b\u969b\u306e\u547c\u3073\u51fa\u3057\u90e8\u5206\u3092\u7c21\u6f54\u306b\u3067\u304d\u308b\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u5229\u7528\u3057\u307e\u3057\u3087\u3046\u3002\n\n\n\nDefault arguments improve readability by hiding irrelevant information. For example,\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306b\u3088\u3063\u3066\u3001\u4e0d\u8981\u306a\u60c5\u5831\u304c\u96a0\u3055\u308c\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u8aad\u307f\u3084\u3059\u3055\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u4f8b\u306f\nlet order = lastName.compare( \nroyalFamilyName, options: [], range: nil, locale: nil)\n\n\n\n\ncan become the much simpler:\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u7c21\u6f54\u306b\u3067\u304d\u307e\u3059\u3002\nlet order = lastName.compare(royalFamilyName)\n\n\n\n\nDefault arguments are generally preferable to the use of method families, because they impose a lower cognitive burden on anyone trying to understand the API:\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306f\u4e00\u822c\u7684\u306b\u30e1\u30bd\u30c3\u30c9\u30d5\u30a1\u30df\u30ea\u306b\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u3092\u597d\u307e\u308c\u307e\u3059\u3002\n\u306a\u305c\u306a\u3089\u3001API\u3092\u7406\u89e3\u3057\u3088\u3046\u3068\u3059\u308b\u4eba\u305f\u3061\u306e\u8ca0\u8377\u304c\u5c11\u306a\u304f\u306a\u308b\u70ba\u3067\u3059\u3002\n(\u203b\u8a33\u6ce8: \u30e1\u30bd\u30c3\u30c9\u30d5\u30a1\u30df\u30ea init, initWith... \u3084\u3001copy, copyWith... \u306a\u3069\u306e\u5f15\u6570\u304c\u7570\u306a\u308b\u304c\u884c\u3046\u5185\u5bb9\u306f\u540c\u4e00\u306e\u7269)\nextension String { \n/// *...description...* \npublic func compare( \nother: String, options: CompareOptions = [], \nrange: Range? = nil, locale: Locale? = nil \n) -> Ordering \n}\n\n\n\n\nThe above may not be simple, but it is much simpler than:\n\u4e0a\u8a18\u306e\u4f8b\u306f\u3042\u307e\u308a\u30b7\u30f3\u30d7\u30eb\u3067\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3001\u3057\u304b\u3057\u3001\u5c11\u306a\u304f\u3068\u3082\u4ee5\u4e0b\u306e\u4f8b\u3088\u308a\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3059\nextension String { \n/// *...description 1...* \npublic func compare(other: String) -> Ordering \n/// *...description 2...* \npublic func compare(other: String, options: CompareOptions) -> Ordering \n/// *...description 3...* \npublic func compare( other: String, options: CompareOptions, range: Range) -> Ordering \n/// *...description 4...* \npublic func compare( other: String, options: StringCompareOptions, range: Range, locale: Locale) -> Ordering }\n\n\n\n\nEvery member of a method family needs to be separately documented and understood by users. To decide among them, a user needs to understand all of them, and occasional surprising relationships\u2014for example, fooWithBar(nil) and foo() aren\u2019t always synonyms\u2014make this a tedious process of ferreting out minor differences in mostly-identical documentation. Using a single method with defaults provides a vastly superior programmer experience.\n\u5168\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u30d5\u30a1\u30df\u30ea\u306f\u500b\u5225\u306b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u3001\u30e6\u30fc\u30b6\u306b\u7406\u89e3\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u30d5\u30a1\u30df\u30ea\u304b\u3089\u3069\u308c\u304b\u4e00\u3064\u3092\u6c7a\u3081\u308b\u305f\u3081\u306b\u3001\n\u30e6\u30fc\u30b6\u306f\u5168\u3066\u3092\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u6642\u305f\u307e\u8d77\u3053\u308b\u9a5a\u304f\u3079\u304d\u95a2\u9023\u2014 \u4f8b\u3048\u3070\u3001fooWithBar(nil) \u3068 foo() \u306f\u5fc5\u305a\u3057\u3082\u540c\u7fa9\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u2014\u3053\u306e\u5927\u90e8\u5206\u306f\u540c\u4e00\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u82e5\u5e72\u306e\u9055\u3044\u3092ferreting\u306e\u9000\u5c48\u306a\u30d7\u30ed\u30bb\u30b9\u306b\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u5358\u4e00\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u975e\u5e38\u306b\u512a\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30de\u4f53\u9a13\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n\n\nPrefer to locate parameters with defaults towards the end of the parameter list. Parameters without defaults are usually more essential to the semantics of a method, and provide a stable initial pattern of use where methods are invoked.\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306f\u3001\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u306b\u7f6e\u304d\u307e\u3057\u3087\u3046\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3067\u306a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u610f\u5473\u306b\u5bfe\u3057\u3066\u91cd\u8981\u3067\u3059\u3002\n\u307e\u305f\u3001\u305d\u308c\u3089\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u884c\u3055\u308c\u308b\u5834\u6240\u3067\u5b89\u5b9a\u3057\u305f\u521d\u671f\u5316\u30d1\u30bf\u30fc\u30f3\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n\n\nPrefer to follow the language\u2019s defaults for the presence of argument labels\n\u5f15\u6570\u30e9\u30d9\u30eb\u306f\u3001\u8a00\u8a9e\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u5f93\u3044\u307e\u3057\u3087\u3046\n\n\n\nIn other words, usually:\n\u8a00\u3044\u63db\u3048\u308b\u3068:\n\n\nFirst parameters to methods and functions should not have required argument labels\n\u30e1\u30bd\u30c3\u30c9\u3084\u95a2\u6570\u306e\u3001\u306f\u3058\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001required\u306a\u5f15\u6570\u30e9\u30d9\u30eb\u3092\u6301\u3064\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\n\nOther parameters to methods and functions should have required argument labels.\n\u30e1\u30bd\u30c3\u30c9\u3084\u95a2\u6570\u306e\u30012\u756a\u76ee\u79fb\u884c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001required\u306a\u5f15\u6570\u30e9\u30d9\u30eb\u3092\u6301\u3064\u3079\u304d\u3067\u3059\u3002\n\n\n\nAll parameters to initializers should have required argument labels.\n\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306e\u5168\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001required\u306a\u5f15\u6570\u30e9\u30d9\u30eb\u3092\u6301\u3064\u3079\u304d\u3067\u3059\u3002\n\n\n\n\n\nThe above corresponds to where the language would require argument labels if each parameter was declared with the form:\n\u4e0a\u8a18\u306f\u3001\u8a00\u8a9e\u304c\u5f15\u6570\u30e9\u30d9\u30eb\u3092\u8981\u6c42\u3059\u308b\u5834\u6240\u3001\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u30d5\u30a9\u30fc\u30e0\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u305f\u5834\u5408\u306b\u3002\nidentifier: Type\n\n\n\n\nThere are only a few exceptions:  \n\u5e7e\u3064\u304b\u306e\u4f8b\u5916\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\nIn initializers that should be seen as \u201cfull-width type conversions,\u201d the initial argument should be the source of the conversion, and should be unlabelled.\n\u578b\u7684\u306b\u5927\u304d\u304f\u306a\u308b\u578b\u5909\u63db\u3067\u898b\u3089\u308c\u308b\u3079\u304d\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306e\u5834\u5408\u3001\u7b2c\u4e00\u5f15\u6570\u306f \u5909\u63db\u5143\u3067\u3042\u308a\u3001\u5f15\u6570\u30e9\u30d9\u30eb\u306f\u3064\u3051\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\nextension String { \n//  `x`\u3092\u57fa\u6570(radix)\u3092\u5143\u306b\u6587\u5b57\u5217\u306b\u5909\u63db(BigInt \u2192 String) \ninit(_ x: BigInt, radix: Int = 10) // Note the initial separate underscore \n}  \n\ntext = \"The value is: \" \ntext += String(veryLargeNumber) \ntext += \" and in hexadecimal, it's\" \ntext += String(veryLargeNumber, radix: 16)\n\n\n\n\nIn \u201cnarrowing\u201d type conversions, though, a label that describes the narrowing is recommended:\n\u305d\u308c\u306b\u5bfe\u3057\u3066\u3001\u578b\u7684\u306b\u5c0f\u3055\u304f\u306a\u308b\u578b\u5909\u63db\u306e\u5834\u5408\u3001\u5c0f\u3055\u304f\u306a\u308b\u3053\u3068\u3092\u8a18\u8ff0\u3059\u308b\u30e9\u30d9\u30eb\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002\n\n\nextension UInt32 { \ninit(_ value: Int16) // \u578b\u7684\u306b\u5927\u304d\u304f\u306a\u308b(Int16 \u2192 UInt32)\u306e\u3067\u30e9\u30d9\u30eb\u306f\u4e0d\u8981 \n// \u578b\u7684\u306b\u5c0f\u3055\u304f\u306a\u308b(UInt64 \u2192 UInt32)\u306e\u3067\u3001\u5207\u308a\u6368\u3066\u3089\u308c\u308b\u65e8\u306e\u30e9\u30d9\u30eb\u3092\u63a8\u5968 \ninit(truncating bits: UInt64) \ninit(saturating value: UInt64) \n}\n\n\n\n\nWhen all parameters are peers that can\u2019t be usefully distinguished, none should be labelled. Well-known examples include min(number1, number2) and zip(sequence1, sequence2).\n\u5168\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u540c\u7b49\u3067\u6709\u52b9\u306b\u533a\u5225\u51fa\u6765\u306a\u3044\u5834\u5408\u3001\u5f15\u6570\u30e9\u30d9\u30eb\u306f\u3064\u3051\u3089\u308c\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u4f8b\u3068\u3057\u3066\u3001min(number1, number2\u3001zip(sequence1, sequence2)\u304c\u3042\u308a\u307e\u3059\u3002\n\n\nextension Document { \nfunc close(completionHandler completion: ((Bool) -> Void)? = nil)\n} \ndoc1.close() \ndoc2.close(completionHandler: app.quit)\n\n\n\n\nAs you can see, this practice makes calls read correctly regardless of whether the argument is passed explicitly. If instead you omit the parameter description, the call may incorrectly imply the argument is the direct object of the \u201csentence:\u201d\n\u4e0a\u8a18\u306e\u4f8b\u306b\u898b\u3089\u308c\u308b\u3088\u3046\u306b\u3001\u3053\u306e\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306b\u3088\u3063\u3066\u5f15\u6570\u304c\u660e\u793a\u7684\u306b\u6e21\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306b\u304b\u304b\u308f\u3089\u305a\u3001\u547c\u3073\u51fa\u3057\u7b87\u6240\u3092\u6b63\u78ba\u306b\u8aad\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u7b2c\u4e00\u5f15\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30e9\u30d9\u30eb\u3092\u7701\u7565\u3057\u305f\u5834\u5408\u3001\u547c\u3073\u51fa\u3057\u7b87\u6240\u306f\u5f15\u6570\u304c\"\u30bb\u30f3\u30c6\u30f3\u30b9\"\u306e\u76f4\u63a5\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3068\u3044\u3046\u8aa4\u89e3\u3092\u542b\u3093\u3067\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\nextension Document { \nfunc close(completion: ((Bool) -> Void)? = nil) \n} \ndoc.close(app.quit) // \u9589\u3058\u306a\u304c\u3089\u3084\u3081\u308b\u95a2\u6570?\n\n\n\n\nIf you attach the parameter description to the function\u2019s base name, it will \u201cdangle\u201d when the default is used:  \n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a18\u8ff0\u3092\u95a2\u6570\u306e\u30d9\u30fc\u30b9\u306e\u540d\u524d\u306b\u4ed8\u52a0\u3057\u305f\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u304c\u4f7f\u7528\u3055\u308c\u308b\u5834\u5408\u306b\u3082\u3064\u304d\u307e\u3068\u3044\u307e\u3059\u3002\n\n\nextension Document { \nfunc closeWithCompletionHandler(completion: ((Bool) -> Void)? = nil) \n} \ndoc.closeWithCompletionHandler() // CompletionHandler\u3063\u3066\u4f55\uff1f\n\n\n\n\n\u95a2\u9023\n\nSwift API Design Guidelines\u3092\u7ffb\u8a33\u3057\u3066\u307f\u305f(Fundamentals)\nSwift API Design Guidelines\u3092\u7ffb\u8a33\u3057\u3066\u307f\u305f(Naming)\n\n# Swift API Design Guidelines\u3092\u7ffb\u8a33\u3057\u3066\u307f\u305f(Conventions)\n\n## Conventions - \u898f\u7d04\n\n### General Conventions - \u4e00\u822c\u7684\u306a\u898f\u7d04\n\n* **Document the complexity of any computed property that is not O(1)**. People often assume that property access involves no significant computation, because they have stored properties as a mental model. Be sure to alert them when that assumption may be violated.\n\n    \u8a08\u7b97\u91cf\u304cO(1)\u3067\u7121\u3044computed propety\u306b\u306f\u3001\u8907\u96d1\u5ea6\u3092\u30b3\u30e1\u30f3\u30c8\u306b\u8a18\u8ff0\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6211\u3005\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u30a2\u30af\u30bb\u30b9\u306f\u5927\u91cf\u306e\u8a08\u7b97\u3092\u4f34\u308f\u306a\u3044\u3068\u3057\u3070\u3057\u3070\u60f3\u5b9a\u3057\u307e\u3059\u3002 \u306a\u305c\u306a\u3089\u3001\u666e\u901a\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3044\u3048\u3070\u8a08\u7b97\u3092\u3068\u3082\u306a\u308f\u306a\u3044stored property\u3092\u60f3\u5b9a\u3059\u308b\u304b\u3089\u3067\u3059\u3002 \u305d\u306e\u60f3\u5b9a\u306b\u53cd\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u5834\u5408\u306f\u3001\u5fc5\u305a\u8b66\u544a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n    ----\n\n* **Prefer methods and properties to free functions**. Free functions are used only in special cases:\n\n    free function\u3067\u306f\u7121\u304f\u3001\u30e1\u30bd\u30c3\u30c9\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7528\u3044\u307e\u3057\u3087\u3046\u3002 free function\u306f\u3001\u7279\u5225\u306a\u5834\u5408\u306b\u306e\u307f\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\n1. When there\u2019s no obvious `self`:\n\n    \u660e\u767d\u306aself\u304c\u3044\u306a\u3044\u3068\u304d\n   \n    ```swift\n    min(x, y, z)\n    ```\n\n2. When the function is an unconstrained generic:\n    \n    \u95a2\u6570\u304c\u5236\u7d04\u306a\u304f\u6c4e\u7528\u7684\u306a\u3068\u304d\n    \n    ```swift\n    print(x)\n    ```\n    \n3. When function syntax is part of the established domain notation:\n\n    \u95a2\u6570\u306e\u69cb\u6587\u304c\u78ba\u7acb\u3055\u308c\u305f\u30c9\u30e1\u30a4\u30f3\u8868\u8a18\u306e\u4e00\u90e8\u306e\u3068\u304d\n\n    ```swift\n    sin(x)\n    ```\n    \n    ----\n\n* **Follow case conventions:** names of types, protocols and enum cases are **UpperCamelCase**. Everything else is **lowerCamelCase**.\n\n    \u578b\u3001protocol\u3001enum\u306f**UpperCamelCase**\u3001\u305d\u308c\u4ee5\u5916\u306f\u3001**lowerCamelCase**\u3067\u3059\u3002\n\n    ----\n\n* **Methods can share a base name when they share the same basic meaning** but operate on different types, or are in different domains.\n\n    \u5171\u901a\u306e\u610f\u5473\u3092\u5171\u6709\u3057\u3066\u3044\u308b\u6642\u306b\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306f\u5171\u901a\u306e\u540d\u524d\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n    ----\n\n* For example, the following is encouraged, since the methods do essentially the same things:\n\n    \u4ee5\u4e0b\u306e\u4f8b\u306f\u63a8\u5968\u3055\u308c\u307e\u3059\u3002\u306a\u305c\u306a\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u57fa\u672c\u7684\u306b\u540c\u3058\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n\n    ```swift\n    extension Shape { \n    /// Returns `true` iff `other` is within the area of `self`. \n    func contains(other: Point) -> Bool { ... }  \n    \n    /// Returns `true` iff `other` is entirely within the area of `self`. \n    func contains(other: Shape) -> Bool { ... }  \n    \n    /// Returns `true` iff `other` is within the area of `self`. \n    func contains(other: LineSegment) -> Bool { ... } \n    }\n    ```\n\n    ----\n\n* And since geometric types and collections are separate domains, this is also fine in the same program:\n\n    \u307e\u305f\u3001\u5f62(Shape)\u3068\u3001\u96c6\u5408(Collection)\u306f\u7570\u306a\u308b\u30c9\u30e1\u30a4\u30f3\u3067\u3059\u306e\u3067\u3001\u540c\u3058\u30d7\u30ed\u30b0\u30e9\u30e0\u5185\u3067\u4ee5\u4e0b\u306e\u66f8\u304d\u65b9\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n    \n    ```swift\n    extension Collection where Element : Equatable { \n    /// Returns `true` iff `self` contains an element equal to \n    /// `sought`. func contains(sought: Element) -> Bool { ... } \n    }\n    ```\n    \n    ----\n\n* However, these `index` methods have different semantics, and should have been named differently:\n\n    \u3057\u304b\u3057\u3001\u4ee5\u4e0b\u306eindex\u30e1\u30bd\u30c3\u30c9\u306f\u7570\u306a\u308b\u610f\u5473\u306a\u306e\u3067\u3001\u7570\u306a\u308b\u540d\u524d\u3067\u3042\u308b\u3079\u304d\u3067\u3059\u3002\n\n    ```swift\n    extension Database { \n    /// Rebuilds the database's search index \n    func index() { ... }  \n    /// Returns the `n`th row in the given table. \n    func index(n: Int, inTable: TableID) -> TableRow { ... } \n    }\n    ```\n\n    ----\n\n* Lastly, avoid \u201coverloading on return type\u201d because it causes ambiguities in the presence of type inference:\n\n    \u6700\u5f8c\u306b\u3001\"\u623b\u308a\u5024\u306b\u3088\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\"\u306f\u907f\u3051\u307e\u3057\u3087\u3046\u3002\n\u306a\u305c\u306a\u3089\u3001\u578b\u63a8\u8ad6\u306e\u969b\u306b\u66d6\u6627\u3055\u3092\u3082\u305f\u3089\u3059\u304b\u3089\u3067\u3059\u3002\n\n    ```swift\n    extension Box { \n    /// Returns the `Int` stored in `self`, if any, and\n    /// `nil` otherwise.\n   func value() -> Int? { ... }\n\n    /// Returns the `String` stored in `self`, if any, and \n    /// `nil` otherwise. \n    func value() -> String? { ... } \n    }\n    ```\n\n### Parameters - \u30d1\u30e9\u30e1\u30fc\u30bf\n\n* **Take advantage of defaulted arguments** when it simplifies common uses. Any parameter with a single commonly-used value is a candidate for defaulting.\n\n    \u3088\u304f\u4f7f\u308f\u308c\u308b\u969b\u306e\u547c\u3073\u51fa\u3057\u90e8\u5206\u3092\u7c21\u6f54\u306b\u3067\u304d\u308b\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u5229\u7528\u3057\u307e\u3057\u3087\u3046\u3002\n\n    ----\n\n* Default arguments improve readability by hiding irrelevant information. For example,\n\n    \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306b\u3088\u3063\u3066\u3001\u4e0d\u8981\u306a\u60c5\u5831\u304c\u96a0\u3055\u308c\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u8aad\u307f\u3084\u3059\u3055\u304c\u5411\u4e0a\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u4f8b\u306f\n\n    ```swift\n    let order = lastName.compare( \n    royalFamilyName, options: [], range: nil, locale: nil)\n    ```\n\n    ----\n\n* can become the much simpler:\n\n    \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u7c21\u6f54\u306b\u3067\u304d\u307e\u3059\u3002\n\n    ```swift\n    let order = lastName.compare(royalFamilyName)\n    ```\n\n    ----\n\n* Default arguments are generally preferable to the use of method families, because they impose a lower cognitive burden on anyone trying to understand the API:\n\n    \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306f\u4e00\u822c\u7684\u306b\u30e1\u30bd\u30c3\u30c9\u30d5\u30a1\u30df\u30ea\u306b\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u3092\u597d\u307e\u308c\u307e\u3059\u3002\n    \u306a\u305c\u306a\u3089\u3001API\u3092\u7406\u89e3\u3057\u3088\u3046\u3068\u3059\u308b\u4eba\u305f\u3061\u306e\u8ca0\u8377\u304c\u5c11\u306a\u304f\u306a\u308b\u70ba\u3067\u3059\u3002\n    (\u203b\u8a33\u6ce8: \u30e1\u30bd\u30c3\u30c9\u30d5\u30a1\u30df\u30ea init, initWith... \u3084\u3001copy, copyWith... \u306a\u3069\u306e\u5f15\u6570\u304c\u7570\u306a\u308b\u304c\u884c\u3046\u5185\u5bb9\u306f\u540c\u4e00\u306e\u7269)\n\n    ```swift\n    extension String { \n    /// *...description...* \n    public func compare( \n    other: String, options: CompareOptions = [], \n    range: Range? = nil, locale: Locale? = nil \n    ) -> Ordering \n    }\n    ```\n\n    ----\n\n* The above may not be simple, but it is much simpler than:\n\n    \u4e0a\u8a18\u306e\u4f8b\u306f\u3042\u307e\u308a\u30b7\u30f3\u30d7\u30eb\u3067\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3001\u3057\u304b\u3057\u3001\u5c11\u306a\u304f\u3068\u3082\u4ee5\u4e0b\u306e\u4f8b\u3088\u308a\u306f\u30b7\u30f3\u30d7\u30eb\u3067\u3059\n\n    ```swift\n    extension String { \n    /// *...description 1...* \n    public func compare(other: String) -> Ordering \n    /// *...description 2...* \n    public func compare(other: String, options: CompareOptions) -> Ordering \n    /// *...description 3...* \n    public func compare( other: String, options: CompareOptions, range: Range) -> Ordering \n    /// *...description 4...* \n    public func compare( other: String, options: StringCompareOptions, range: Range, locale: Locale) -> Ordering }\n```\n\n    ----\n\n* Every member of a method family needs to be separately documented and understood by users. To decide among them, a user needs to understand all of them, and occasional surprising relationships\u2014for example, `fooWithBar(nil)` and `foo()` aren\u2019t always synonyms\u2014make this a tedious process of ferreting out minor differences in mostly-identical documentation. Using a single method with defaults provides a vastly superior programmer experience.\n\n    \u5168\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u30d5\u30a1\u30df\u30ea\u306f\u500b\u5225\u306b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u3001\u30e6\u30fc\u30b6\u306b\u7406\u89e3\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u30d5\u30a1\u30df\u30ea\u304b\u3089\u3069\u308c\u304b\u4e00\u3064\u3092\u6c7a\u3081\u308b\u305f\u3081\u306b\u3001\n    \u30e6\u30fc\u30b6\u306f\u5168\u3066\u3092\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u6642\u305f\u307e\u8d77\u3053\u308b\u9a5a\u304f\u3079\u304d\u95a2\u9023\u2014 \u4f8b\u3048\u3070\u3001fooWithBar(nil) \u3068 foo() \u306f\u5fc5\u305a\u3057\u3082\u540c\u7fa9\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u2014\u3053\u306e\u5927\u90e8\u5206\u306f\u540c\u4e00\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u82e5\u5e72\u306e\u9055\u3044\u3092ferreting\u306e\u9000\u5c48\u306a\u30d7\u30ed\u30bb\u30b9\u306b\u3057\u307e\u3059\u3002\n    \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u5358\u4e00\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u975e\u5e38\u306b\u512a\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30de\u4f53\u9a13\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n    ----\n\n* **Prefer to locate parameters with defaults towards the end** of the parameter list. Parameters without defaults are usually more essential to the semantics of a method, and provide a stable initial pattern of use where methods are invoked.\n\n    \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306f\u3001\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u6700\u5f8c\u306b\u7f6e\u304d\u307e\u3057\u3087\u3046\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u3067\u306a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u610f\u5473\u306b\u5bfe\u3057\u3066\u91cd\u8981\u3067\u3059\u3002\n\u307e\u305f\u3001\u305d\u308c\u3089\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u884c\u3055\u308c\u308b\u5834\u6240\u3067\u5b89\u5b9a\u3057\u305f\u521d\u671f\u5316\u30d1\u30bf\u30fc\u30f3\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n    ----\n\n* **Prefer to follow the language\u2019s defaults for the presence of argument labels**\n\n    \u5f15\u6570\u30e9\u30d9\u30eb\u306f\u3001\u8a00\u8a9e\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306b\u5f93\u3044\u307e\u3057\u3087\u3046\n\n    ----\n\n* In other words, usually:\n\n    \u8a00\u3044\u63db\u3048\u308b\u3068:\n\n\t* First parameters to methods and functions should not have required argument labels\n\t\n        \u30e1\u30bd\u30c3\u30c9\u3084\u95a2\u6570\u306e\u3001\u306f\u3058\u3081\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001required\u306a\u5f15\u6570\u30e9\u30d9\u30eb\u3092\u6301\u3064\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n        ----\n\n\t* Other parameters to methods and functions should have required argument labels.\n\n        \u30e1\u30bd\u30c3\u30c9\u3084\u95a2\u6570\u306e\u30012\u756a\u76ee\u79fb\u884c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001required\u306a\u5f15\u6570\u30e9\u30d9\u30eb\u3092\u6301\u3064\u3079\u304d\u3067\u3059\u3002\n\n        ----\n\n\t* All parameters to initializers should have required argument labels.\n\n        \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306e\u5168\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u3001required\u306a\u5f15\u6570\u30e9\u30d9\u30eb\u3092\u6301\u3064\u3079\u304d\u3067\u3059\u3002\n\t\n    ----\n\n* The above corresponds to where the language would require argument labels if each parameter was declared with the form:\n\n    \u4e0a\u8a18\u306f\u3001\u8a00\u8a9e\u304c\u5f15\u6570\u30e9\u30d9\u30eb\u3092\u8981\u6c42\u3059\u308b\u5834\u6240\u3001\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u30d5\u30a9\u30fc\u30e0\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u305f\u5834\u5408\u306b\u3002\n\n    ```swift\n    identifier: Type\n    ```\n    \n    ----\n\n* There are only a few exceptions:  \n\n    \u5e7e\u3064\u304b\u306e\u4f8b\u5916\u304c\u3042\u308a\u307e\u3059\u3002\n\n    ----\n\n\t* **In initializers that should be seen as \u201cfull-width type conversions,\u201d** the initial argument should be the source of the conversion, and should be unlabelled.\n\n        \u578b\u7684\u306b\u5927\u304d\u304f\u306a\u308b\u578b\u5909\u63db\u3067\u898b\u3089\u308c\u308b\u3079\u304d\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306e\u5834\u5408\u3001\u7b2c\u4e00\u5f15\u6570\u306f \u5909\u63db\u5143\u3067\u3042\u308a\u3001\u5f15\u6570\u30e9\u30d9\u30eb\u306f\u3064\u3051\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\t```swift\n\textension String { \n\t//  `x`\u3092\u57fa\u6570(radix)\u3092\u5143\u306b\u6587\u5b57\u5217\u306b\u5909\u63db(BigInt \u2192 String) \n\tinit(_ x: BigInt, radix: Int = 10) // Note the initial separate underscore \n\t}  \n\t\n\ttext = \"The value is: \" \n\ttext += String(veryLargeNumber) \n\ttext += \" and in hexadecimal, it's\" \n\ttext += String(veryLargeNumber, radix: 16)\n\t```\n\t\n    ----\n\n\t* In \u201cnarrowing\u201d type conversions, though, a label that describes the narrowing is recommended:\n\n        \u305d\u308c\u306b\u5bfe\u3057\u3066\u3001\u578b\u7684\u306b\u5c0f\u3055\u304f\u306a\u308b\u578b\u5909\u63db\u306e\u5834\u5408\u3001\u5c0f\u3055\u304f\u306a\u308b\u3053\u3068\u3092\u8a18\u8ff0\u3059\u308b\u30e9\u30d9\u30eb\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002\n\n\t```swift\n\textension UInt32 { \n\tinit(_ value: Int16) // \u578b\u7684\u306b\u5927\u304d\u304f\u306a\u308b(Int16 \u2192 UInt32)\u306e\u3067\u30e9\u30d9\u30eb\u306f\u4e0d\u8981 \n\t// \u578b\u7684\u306b\u5c0f\u3055\u304f\u306a\u308b(UInt64 \u2192 UInt32)\u306e\u3067\u3001\u5207\u308a\u6368\u3066\u3089\u308c\u308b\u65e8\u306e\u30e9\u30d9\u30eb\u3092\u63a8\u5968 \n\tinit(truncating bits: UInt64) \n\tinit(saturating value: UInt64) \n\t}\n\t```\n    ----\n\n\t* **When all parameters are peers that can\u2019t be usefully distinguished**, none should be labelled. Well-known examples include `min(number1, number2)` and `zip(sequence1, sequence2)`.\n\t\n        \u5168\u3066\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u540c\u7b49\u3067\u6709\u52b9\u306b\u533a\u5225\u51fa\u6765\u306a\u3044\u5834\u5408\u3001\u5f15\u6570\u30e9\u30d9\u30eb\u306f\u3064\u3051\u3089\u308c\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u4f8b\u3068\u3057\u3066\u3001`min(number1, number2`\u3001`zip(sequence1, sequence2)`\u304c\u3042\u308a\u307e\u3059\u3002\n\n\t```swift\n\textension Document { \n\tfunc close(completionHandler completion: ((Bool) -> Void)? = nil)\n\t} \n\tdoc1.close() \n\tdoc2.close(completionHandler: app.quit)\n\t```\n\t\n    ----\n\n\t* As you can see, this practice makes calls read correctly regardless of whether the argument is passed explicitly. If instead you omit the parameter description, the call may incorrectly imply the argument is the direct object of the \u201csentence:\u201d\n\t\n        \u4e0a\u8a18\u306e\u4f8b\u306b\u898b\u3089\u308c\u308b\u3088\u3046\u306b\u3001\u3053\u306e\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306b\u3088\u3063\u3066\u5f15\u6570\u304c\u660e\u793a\u7684\u306b\u6e21\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306b\u304b\u304b\u308f\u3089\u305a\u3001\u547c\u3073\u51fa\u3057\u7b87\u6240\u3092\u6b63\u78ba\u306b\u8aad\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u7b2c\u4e00\u5f15\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30e9\u30d9\u30eb\u3092\u7701\u7565\u3057\u305f\u5834\u5408\u3001\u547c\u3073\u51fa\u3057\u7b87\u6240\u306f\u5f15\u6570\u304c\"\u30bb\u30f3\u30c6\u30f3\u30b9\"\u306e\u76f4\u63a5\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3068\u3044\u3046\u8aa4\u89e3\u3092\u542b\u3093\u3067\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n        \n\t```swift\n\textension Document { \n\tfunc close(completion: ((Bool) -> Void)? = nil) \n\t} \n\tdoc.close(app.quit) // \u9589\u3058\u306a\u304c\u3089\u3084\u3081\u308b\u95a2\u6570?\n\t```\n       \n    ----\n \n\t* If you attach the parameter description to the function\u2019s base name, it will \u201cdangle\u201d when the default is used:  \n\t\n        \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a18\u8ff0\u3092\u95a2\u6570\u306e\u30d9\u30fc\u30b9\u306e\u540d\u524d\u306b\u4ed8\u52a0\u3057\u305f\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u304c\u4f7f\u7528\u3055\u308c\u308b\u5834\u5408\u306b\u3082\u3064\u304d\u307e\u3068\u3044\u307e\u3059\u3002\n\n\t```swift\n\textension Document { \n\tfunc closeWithCompletionHandler(completion: ((Bool) -> Void)? = nil) \n\t} \n\tdoc.closeWithCompletionHandler() // CompletionHandler\u3063\u3066\u4f55\uff1f\n\t```\n\n# \u95a2\u9023\n\n* [Swift API Design Guidelines\u3092\u7ffb\u8a33\u3057\u3066\u307f\u305f(Fundamentals)](http://qiita.com/__moai/items/2322365d34983093025d#swift-api-design-guidelines%E3%82%92%E7%BF%BB%E8%A8%B3%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9Ffundamentals)\n* [Swift API Design Guidelines\u3092\u7ffb\u8a33\u3057\u3066\u307f\u305f(Naming)](http://qiita.com/__moai/items/fbe87b343b9eaa48816e)\n", "tags": ["Swift", "\u7ffb\u8a33", "apple", "\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04"]}