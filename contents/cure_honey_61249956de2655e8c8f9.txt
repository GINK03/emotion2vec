{"context": " More than 1 year has passed since last update.\u8907\u7d20\u5e73\u9762\u4e0a\u306e\u70b9\u3092\u6f38\u5316\u5f0f\u306e\u521d\u671f\u5024\u3068\u3057\u3066\u3001\u6f38\u5316\u5f0f\u306e\u6975\u5024\u3067\u521d\u671f\u5024\u3092\u5206\u985e\u3057\u305f\u3082\u306e\u3092Julia\u96c6\u5408\u3068\u3044\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u4e09\u6b21\u65b9\u7a0b\u5f0f f(x)=x3\u22121=0f(x)=x^3-1=0 \u3092\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u3092\u7528\u3044\u3066\u53cd\u5fa9\u7684\u306b\u89e3\u304f\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u306b\u3088\u308b\u53cd\u5fa9\u306f\u6f38\u5316\u5f0f\u3067\u3042\u3089\u308f\u305b\u3070\u3001xn+1=xn\u2212f(xn)/f\u2032(xn)x_{n+1}=x_n-f(x_n)/f'(x_n) \u3059\u306a\u308f\u3061 xn+1=xn\u2212x3n\u221213x2nx_{n+1}=x_n-{{x_n^3-1}\\over 3x_n^2} \u3068\u306a\u308a\u307e\u3059\u3002\n\u4e00\u65b9\u3001\u3053\u306e\u65b9\u7a0b\u5f0f\u306e\u89e3\u306f\u3001x=1,\u22121\u00b1\u221a32x=1,{{-1\\pm\\sqrt{3}}\\over2} \u306e\u4e09\u3064\u3068\u81ea\u660e\u7684\u306b\u5206\u304b\u308a\u307e\u3059\u3002\n\u3055\u3066\u521d\u671f\u5024\u3068\u3057\u3066\u8907\u7d20\u5e73\u9762\u4e0a\u306e\u70b9\u3092\u4e0e\u3048\u308b\u3068\u3001\u305d\u306e\u521d\u671f\u5024\u306b\u5fdc\u3058\u3066\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u3067\u5f97\u3089\u308c\u308b\u89e3\u304c\u5b9a\u307e\u308a\u307e\u3059\u3002\u4e09\u3064\u306e\u89e3\u306e\u3046\u3061\u3069\u306e\u5024\u306b\u53ce\u675f\u3057\u3066\u3086\u304f\u304b\u3092\u521d\u671f\u5024\u306e\u5ea7\u6a19\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3086\u304f\u3068\u3001\u30d5\u30e9\u30af\u30bf\u30eb\u7684\u306a\u81ea\u5df1\u76f8\u4f3c\u56f3\u5f62\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\u3044\u307e\u4e09\u3064\u306e\u89e3\u306f\u7b49\u4fa1\u3067\u3042\u308b\u306e\u3067\u3001\u8907\u7d20\u5e73\u9762\u4e0a\u306b\u4e09\u56de\u5bfe\u79f0\u306a\u56f3\u5f62\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nJulia \u96c6\u5408\u3000\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u7248\n\u3053\u3053\u3067\u30011\u306f11\u30012\u306f\u22121\u2212\u221a32{{-1-\\sqrt{3}}\\over2}\u30013\u306f\u22121+\u221a32{{-1+\\sqrt{3}}\\over2}\u306b\u53ce\u675f\u3057\u305f\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u30024\u306f\u4e0e\u3048\u305f\u53cd\u5fa9\u6570\u306e\u7bc4\u56f2\u3067\u306f\u307e\u3060\u3069\u306e\u89e3\u306b\u53ce\u675f\u3057\u3066\u3086\u304f\u306e\u304b\u5224\u65ad\u3067\u304d\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\u3002\u6f38\u5316\u5f0f\u306e\u53cd\u5fa9\u6570\u306f\u6700\u592715\u56de\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n3333333333333333333333333333333333333333333333333333341111142441111111111111111\n3333333333333333333333333333333333333333333333333333343332222333411111111111111\n3333333333333333333333333333333333333333333333333333412222223333111111111111111\n3333333333333333333333333333333333333333333333333333422222222422111111111111111\n3333333333333333333333333333333333333333333333333333322222243411111111111111111\n3333333333333333333333333333333333333333333333333333322231111111111111111111111\n3333333333333333333333333333333333333333333333321111234111111111111111111111111\n3333333333333333333333333333333333333333333333312222233311111111111111111111111\n3333333333333333333333333333333333333333333333122222231411111111111111111111111\n3333333333333333333333333333333333333333333333122222331111111111111111111111111\n3333333333333333333333333333333333333333333333322111111111111111111111111111111\n3333333333333333333333333333333333333333321112231111111111111111111111111111111\n3333333333333333333333333333333333333331122222433211111111111111111111111111111\n3333333333333333333333333333333333333331222222242111111111111111111111111111111\n1333333333333333333333333333333333333332222222111111111111111111111111111111111\n3114123333342224223333332222421221333332222231111111111111111111111111111111111\n1111111113322111111112342311111111111332211111111111111111111111111111111111111\n1111111112233111111113243211111111111223311111111111111111111111111111111111111\n2114132222243334332222223333431331222223333321111111111111111111111111111111111\n1222222222222222222222222222222222222223333333111111111111111111111111111111111\n2222222222222222222222222222222222222221333333343111111111111111111111111111111\n2222222222222222222222222222222222222221133333422311111111111111111111111111111\n2222222222222222222222222222222222222222231113321111111111111111111111111111111\n2222222222222222222222222222222222222222222222233111111111111111111111111111111\n2222222222222222222222222222222222222222222222133333221111111111111111111111111\n2222222222222222222222222222222222222222222222133333321411111111111111111111111\n2222222222222222222222222222222222222222222222213333322211111111111111111111111\n2222222222222222222222222222222222222222222222231111324111111111111111111111111\n2222222222222222222222222222222222222222222222222222233321111111111111111111111\n2222222222222222222222222222222222222222222222222222233333342411111111111111111\n2222222222222222222222222222222222222222222222222222433333333433111111111111111\n2222222222222222222222222222222222222222222222222222413333332222111111111111111\n2222222222222222222222222222222222222222222222222222242223333222411111111111111\n2222222222222222222222222222222222222222222222222222241111143441111111111111111\n2222222222222222222222222222222222222222222222222222222134344444111111111111111\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\nFortran2003 \u3067\u914d\u5217\u306e index \u3092\u8fd4\u3059\u95a2\u6570\u306f\u3001minloc, maxloc \u4f4d\u3057\u304b\u306a\u3044\u306e\u3067\u3059\u304c\u3001F2008 \u3067\u306f findloc \u3068\u3044\u3046\u95a2\u6570\u304c\u52a0\u308f\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u9069\u5f53\u306a\u5c02\u7528\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n    program julia\n      implicit none\n      integer, parameter :: nx = 79, ny = 35  ! nx should be a multiple of 4 ! 24bit bmp\n      complex :: c(nx, ny)\n\n      block    \n        integer :: ix, iy\n        forall (ix = 1:nx, iy = 1:ny) c(ix, iy) = cmplx(4.0 / nx * ix - 2.0, 4.0 / ny * iy - 2.0)\n      end block\n\n      print '(79i1)', ijulia(c)\n\n      stop      \n    contains\n      pure elemental integer function ijulia(c) \n        complex, intent(in) :: c\n        complex, parameter :: v(3) = [(1.0, 0.0), cmplx(-1.0, sqrt(3.0)) / 2.0, cmplx(-1.0, -sqrt(3.0)) / 2.0]\n        complex :: z\n        integer :: i, k\n        z = c\n        do i = 1, 15\n          ijulia = locq( abs(z - v) < 0.05 )\n          if (ijulia <= 3) exit\n          z = z - (z**3 - 1.0) / (3 * z**2)\n        end do    \n      end function ijulia\n\n      pure integer function locq(q)\n        logical, intent(in) :: q(:)\n        do locq = 1, size(q)\n          if (q(locq)) exit\n        end do\n      end function locq\n    end program julia  \n\n\nJulia \u96c6\u5408 BMP \u7248\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n    module m_bmp\n      implicit none\n      type :: t_bmp_file_header\n        sequence  \n        integer(2) :: bfType = transfer('BM', 0_2, 1) ! BitMap\n        integer(4) :: bfSize          ! file size in bytes\n        integer(2) :: bfReserved1 = 0 ! always 0\n        integer(2) :: bfReserved2 = 0 ! always 0\n        integer(4) :: bfOffBits\n      end type t_bmp_file_header\n      ! \n      type :: t_bmp_info_header\n        sequence\n        integer(4) :: biSize     = Z'28' ! size of bmp_info_header ; 40bytes \n        integer(4) :: biWidth\n        integer(4) :: biHeight\n        integer(2) :: biPlanes   = 1 ! always 1\n        integer(2) :: biBitCount\n        integer(4) :: biCompression = 0 !0:nocompression,1:8bitRLE,2:4bitRLE,3:bitfield\n        integer(4) :: biSizeImage\n        integer(4) :: biXPelsPerMeter = 3780 ! 96dpi\n        integer(4) :: biYPelsPerMeter = 3780 ! 96dpi \n        integer(4) :: biClrUsed      = 0\n        integer(4) :: biClrImportant = 0 \n      end type t_bmp_info_header  \n      !\n      type :: t_rgb\n        sequence\n        character :: b, g, r  ! order is b g r \n      end type t_rgb \n      !\n      type :: t_bmp\n        type(t_rgb), allocatable :: rgb(:, :)\n      contains \n        procedure :: wr => wr_bmp\n      end type\n    contains   \n      subroutine wr_bmp(bmp, fn)\n        class(t_bmp), intent(in) :: bmp \n        character(len = *), intent(in) :: fn\n        type(t_bmp_file_header) :: bmp_file_header\n        type(t_bmp_info_header) :: bmp_info_header\n        associate(nx => size(bmp%rgb, 1), ny => size(bmp%rgb, 2))\n          bmp_file_header%bfSize      = 14 + 40 + 0 + nx * ny * 3\n          bmp_file_header%bfOffBits   = 14 + 40\n          bmp_info_header%biWidth     = nx       ! nx shouold be multiles of 4\n          bmp_info_header%biHeight    = ny\n          bmp_info_header%biBitCount  = 24 \n          bmp_info_header%biSizeImage = nx * ny * 3\n        end associate\n        open(9, file = fn//'.bmp', form = 'binary', status = 'unknown')\n        write(9) bmp_file_header\n        write(9) bmp_info_header\n        write(9) bmp%rgb\n        close(9)\n        return\n      end subroutine wr_bmp\n ! convert to t_RGB    \n      pure elemental type(t_rgb) function to_rgb(ir, ig, ib)\n        integer, intent(in) :: ir, ig, ib\n        to_rgb = t_rgb(achar(ib), achar(ig), achar(ir))\n      end function to_rgb  \n    end module m_bmp\n\n    program julia\n      use m_bmp\n      implicit none\n      integer, parameter :: nx = 1280, ny = 1280  ! nx should be a multiple of 4 ! 24bit bmp\n      complex :: c(nx, ny)\n\n      block    \n        integer :: ix, iy\n        forall (ix = 1:nx, iy = 1:ny) c(ix, iy) = cmplx(4.0 / nx * ix - 2.0, 4.0 / nx * iy - 2.0)\n      end block\n\n      block\n        type(t_bmp) :: bmp\n        bmp%rgb = color( ijulia(c) )\n        call bmp%wr('Julia')\n      end block    \n\n    contains\n      pure elemental integer function ijulia(c) \n        complex, intent(in) :: c\n        complex, parameter :: v(3) = [(1.0, 0.0), cmplx(-1.0, sqrt(3.0)) / 2.0, cmplx(-1.0, -sqrt(3.0)) / 2.0]\n        complex :: z\n        integer :: i, k\n        z = c\n        do i = 1, 15\n          ijulia = locq( abs(z - v) < 0.05 )\n          if (ijulia <= 3) exit\n          z = z - (z**3 - 1.0) / (3 * z**2)\n        end do    \n      end function ijulia\n\n      pure integer function locq(q)\n        logical, intent(in) :: q(:)\n        do locq = 1, size(q)\n          if (q(locq)) exit\n        end do\n      end function locq\n\n      pure elemental type(t_rgb) function color(i)\n        integer, intent(in) :: i\n        character, parameter :: aff = achar(255), a00 = achar(0)\n        type(t_rgb), parameter :: col(4) = [t_rgb(aff, a00, a00), t_rgb(a00, aff, a00), t_rgb(a00, a00, aff), t_rgb(a00, a00, a00)]\n        color = col(i)\n      end function color\n\n    end program julia  \n\n\u8907\u7d20\u5e73\u9762\u4e0a\u306e\u70b9\u3092\u6f38\u5316\u5f0f\u306e\u521d\u671f\u5024\u3068\u3057\u3066\u3001\u6f38\u5316\u5f0f\u306e\u6975\u5024\u3067\u521d\u671f\u5024\u3092\u5206\u985e\u3057\u305f\u3082\u306e\u3092Julia\u96c6\u5408\u3068\u3044\u3044\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u4e09\u6b21\u65b9\u7a0b\u5f0f $f(x)=x^3-1=0$ \u3092\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u3092\u7528\u3044\u3066\u53cd\u5fa9\u7684\u306b\u89e3\u304f\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u306b\u3088\u308b\u53cd\u5fa9\u306f\u6f38\u5316\u5f0f\u3067\u3042\u3089\u308f\u305b\u3070\u3001$x_{n+1}=x_n-f(x_n)/f'(x_n)$ \u3059\u306a\u308f\u3061 $x_{n+1}=x_n-{{x_n^3-1}\\over 3x_n^2}$ \u3068\u306a\u308a\u307e\u3059\u3002\n\n\u4e00\u65b9\u3001\u3053\u306e\u65b9\u7a0b\u5f0f\u306e\u89e3\u306f\u3001$x=1,{{-1\\pm\\sqrt{3}}\\over2}$ \u306e\u4e09\u3064\u3068\u81ea\u660e\u7684\u306b\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u3055\u3066\u521d\u671f\u5024\u3068\u3057\u3066\u8907\u7d20\u5e73\u9762\u4e0a\u306e\u70b9\u3092\u4e0e\u3048\u308b\u3068\u3001\u305d\u306e\u521d\u671f\u5024\u306b\u5fdc\u3058\u3066\u30cb\u30e5\u30fc\u30c8\u30f3\u6cd5\u3067\u5f97\u3089\u308c\u308b\u89e3\u304c\u5b9a\u307e\u308a\u307e\u3059\u3002\u4e09\u3064\u306e\u89e3\u306e\u3046\u3061\u3069\u306e\u5024\u306b\u53ce\u675f\u3057\u3066\u3086\u304f\u304b\u3092\u521d\u671f\u5024\u306e\u5ea7\u6a19\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3086\u304f\u3068\u3001\u30d5\u30e9\u30af\u30bf\u30eb\u7684\u306a\u81ea\u5df1\u76f8\u4f3c\u56f3\u5f62\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n\u3044\u307e\u4e09\u3064\u306e\u89e3\u306f\u7b49\u4fa1\u3067\u3042\u308b\u306e\u3067\u3001\u8907\u7d20\u5e73\u9762\u4e0a\u306b\u4e09\u56de\u5bfe\u79f0\u306a\u56f3\u5f62\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u3067\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n###Julia \u96c6\u5408\u3000\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u7248\n\u3053\u3053\u3067\u30011\u306f$1$\u30012\u306f${{-1-\\sqrt{3}}\\over2}$\u30013\u306f${{-1+\\sqrt{3}}\\over2}$\u306b\u53ce\u675f\u3057\u305f\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u30024\u306f\u4e0e\u3048\u305f\u53cd\u5fa9\u6570\u306e\u7bc4\u56f2\u3067\u306f\u307e\u3060\u3069\u306e\u89e3\u306b\u53ce\u675f\u3057\u3066\u3086\u304f\u306e\u304b\u5224\u65ad\u3067\u304d\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\u3002\u6f38\u5316\u5f0f\u306e\u53cd\u5fa9\u6570\u306f\u6700\u592715\u56de\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\n3333333333333333333333333333333333333333333333333333341111142441111111111111111\n3333333333333333333333333333333333333333333333333333343332222333411111111111111\n3333333333333333333333333333333333333333333333333333412222223333111111111111111\n3333333333333333333333333333333333333333333333333333422222222422111111111111111\n3333333333333333333333333333333333333333333333333333322222243411111111111111111\n3333333333333333333333333333333333333333333333333333322231111111111111111111111\n3333333333333333333333333333333333333333333333321111234111111111111111111111111\n3333333333333333333333333333333333333333333333312222233311111111111111111111111\n3333333333333333333333333333333333333333333333122222231411111111111111111111111\n3333333333333333333333333333333333333333333333122222331111111111111111111111111\n3333333333333333333333333333333333333333333333322111111111111111111111111111111\n3333333333333333333333333333333333333333321112231111111111111111111111111111111\n3333333333333333333333333333333333333331122222433211111111111111111111111111111\n3333333333333333333333333333333333333331222222242111111111111111111111111111111\n1333333333333333333333333333333333333332222222111111111111111111111111111111111\n3114123333342224223333332222421221333332222231111111111111111111111111111111111\n1111111113322111111112342311111111111332211111111111111111111111111111111111111\n1111111112233111111113243211111111111223311111111111111111111111111111111111111\n2114132222243334332222223333431331222223333321111111111111111111111111111111111\n1222222222222222222222222222222222222223333333111111111111111111111111111111111\n2222222222222222222222222222222222222221333333343111111111111111111111111111111\n2222222222222222222222222222222222222221133333422311111111111111111111111111111\n2222222222222222222222222222222222222222231113321111111111111111111111111111111\n2222222222222222222222222222222222222222222222233111111111111111111111111111111\n2222222222222222222222222222222222222222222222133333221111111111111111111111111\n2222222222222222222222222222222222222222222222133333321411111111111111111111111\n2222222222222222222222222222222222222222222222213333322211111111111111111111111\n2222222222222222222222222222222222222222222222231111324111111111111111111111111\n2222222222222222222222222222222222222222222222222222233321111111111111111111111\n2222222222222222222222222222222222222222222222222222233333342411111111111111111\n2222222222222222222222222222222222222222222222222222433333333433111111111111111\n2222222222222222222222222222222222222222222222222222413333332222111111111111111\n2222222222222222222222222222222222222222222222222222242223333222411111111111111\n2222222222222222222222222222222222222222222222222222241111143441111111111111111\n2222222222222222222222222222222222222222222222222222222134344444111111111111111\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n```\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\nFortran2003 \u3067\u914d\u5217\u306e index \u3092\u8fd4\u3059\u95a2\u6570\u306f\u3001minloc, maxloc \u4f4d\u3057\u304b\u306a\u3044\u306e\u3067\u3059\u304c\u3001F2008 \u3067\u306f findloc \u3068\u3044\u3046\u95a2\u6570\u304c\u52a0\u308f\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u9069\u5f53\u306a\u5c02\u7528\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\n```fortran\n    program julia\n      implicit none\n      integer, parameter :: nx = 79, ny = 35  ! nx should be a multiple of 4 ! 24bit bmp\n      complex :: c(nx, ny)\n\n      block    \n        integer :: ix, iy\n        forall (ix = 1:nx, iy = 1:ny) c(ix, iy) = cmplx(4.0 / nx * ix - 2.0, 4.0 / ny * iy - 2.0)\n      end block\n      \n      print '(79i1)', ijulia(c)\n      \n      stop      \n    contains\n      pure elemental integer function ijulia(c) \n        complex, intent(in) :: c\n        complex, parameter :: v(3) = [(1.0, 0.0), cmplx(-1.0, sqrt(3.0)) / 2.0, cmplx(-1.0, -sqrt(3.0)) / 2.0]\n        complex :: z\n        integer :: i, k\n        z = c\n        do i = 1, 15\n          ijulia = locq( abs(z - v) < 0.05 )\n          if (ijulia <= 3) exit\n          z = z - (z**3 - 1.0) / (3 * z**2)\n        end do    \n      end function ijulia\n      \n      pure integer function locq(q)\n        logical, intent(in) :: q(:)\n        do locq = 1, size(q)\n          if (q(locq)) exit\n        end do\n      end function locq\n    end program julia  \n```\n\n###Julia \u96c6\u5408 BMP \u7248\n![Julia.png](https://qiita-image-store.s3.amazonaws.com/0/44522/766ee69b-8278-c84d-079f-129e26f007b0.png)\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```fortran\n    module m_bmp\n      implicit none\n      type :: t_bmp_file_header\n        sequence  \n        integer(2) :: bfType = transfer('BM', 0_2, 1) ! BitMap\n        integer(4) :: bfSize          ! file size in bytes\n        integer(2) :: bfReserved1 = 0 ! always 0\n        integer(2) :: bfReserved2 = 0 ! always 0\n        integer(4) :: bfOffBits\n      end type t_bmp_file_header\n      ! \n      type :: t_bmp_info_header\n        sequence\n        integer(4) :: biSize     = Z'28' ! size of bmp_info_header ; 40bytes \n        integer(4) :: biWidth\n        integer(4) :: biHeight\n        integer(2) :: biPlanes   = 1 ! always 1\n        integer(2) :: biBitCount\n        integer(4) :: biCompression = 0 !0:nocompression,1:8bitRLE,2:4bitRLE,3:bitfield\n        integer(4) :: biSizeImage\n        integer(4) :: biXPelsPerMeter = 3780 ! 96dpi\n        integer(4) :: biYPelsPerMeter = 3780 ! 96dpi \n        integer(4) :: biClrUsed      = 0\n        integer(4) :: biClrImportant = 0 \n      end type t_bmp_info_header  \n      !\n      type :: t_rgb\n        sequence\n        character :: b, g, r  ! order is b g r \n      end type t_rgb \n      !\n      type :: t_bmp\n        type(t_rgb), allocatable :: rgb(:, :)\n      contains \n        procedure :: wr => wr_bmp\n      end type\n    contains   \n      subroutine wr_bmp(bmp, fn)\n        class(t_bmp), intent(in) :: bmp \n        character(len = *), intent(in) :: fn\n        type(t_bmp_file_header) :: bmp_file_header\n        type(t_bmp_info_header) :: bmp_info_header\n        associate(nx => size(bmp%rgb, 1), ny => size(bmp%rgb, 2))\n          bmp_file_header%bfSize      = 14 + 40 + 0 + nx * ny * 3\n          bmp_file_header%bfOffBits   = 14 + 40\n          bmp_info_header%biWidth     = nx       ! nx shouold be multiles of 4\n          bmp_info_header%biHeight    = ny\n          bmp_info_header%biBitCount  = 24 \n          bmp_info_header%biSizeImage = nx * ny * 3\n        end associate\n        open(9, file = fn//'.bmp', form = 'binary', status = 'unknown')\n        write(9) bmp_file_header\n        write(9) bmp_info_header\n        write(9) bmp%rgb\n        close(9)\n        return\n      end subroutine wr_bmp\n ! convert to t_RGB    \n      pure elemental type(t_rgb) function to_rgb(ir, ig, ib)\n        integer, intent(in) :: ir, ig, ib\n        to_rgb = t_rgb(achar(ib), achar(ig), achar(ir))\n      end function to_rgb  \n    end module m_bmp\n    \n    program julia\n      use m_bmp\n      implicit none\n      integer, parameter :: nx = 1280, ny = 1280  ! nx should be a multiple of 4 ! 24bit bmp\n      complex :: c(nx, ny)\n\n      block    \n        integer :: ix, iy\n        forall (ix = 1:nx, iy = 1:ny) c(ix, iy) = cmplx(4.0 / nx * ix - 2.0, 4.0 / nx * iy - 2.0)\n      end block\n      \n      block\n        type(t_bmp) :: bmp\n        bmp%rgb = color( ijulia(c) )\n        call bmp%wr('Julia')\n      end block    \n      \n    contains\n      pure elemental integer function ijulia(c) \n        complex, intent(in) :: c\n        complex, parameter :: v(3) = [(1.0, 0.0), cmplx(-1.0, sqrt(3.0)) / 2.0, cmplx(-1.0, -sqrt(3.0)) / 2.0]\n        complex :: z\n        integer :: i, k\n        z = c\n        do i = 1, 15\n          ijulia = locq( abs(z - v) < 0.05 )\n          if (ijulia <= 3) exit\n          z = z - (z**3 - 1.0) / (3 * z**2)\n        end do    \n      end function ijulia\n      \n      pure integer function locq(q)\n        logical, intent(in) :: q(:)\n        do locq = 1, size(q)\n          if (q(locq)) exit\n        end do\n      end function locq\n      \n      pure elemental type(t_rgb) function color(i)\n        integer, intent(in) :: i\n        character, parameter :: aff = achar(255), a00 = achar(0)\n        type(t_rgb), parameter :: col(4) = [t_rgb(aff, a00, a00), t_rgb(a00, aff, a00), t_rgb(a00, a00, aff), t_rgb(a00, a00, a00)]\n        color = col(i)\n      end function color\n      \n    end program julia  \n```\n", "tags": ["Fortran2003"]}