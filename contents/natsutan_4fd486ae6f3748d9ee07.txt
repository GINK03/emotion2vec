{"tags": ["Python", "MyHDL", "HDL"], "context": " More than 1 year has passed since last update.MyHDL\u306b\u51fa\u3066\u304f\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3092Reference\u304b\u3089\u6574\u7406\u3057\u307e\u3057\u305f\u3002\n\ninstance()\n\u6700\u3082\u4e00\u822c\u7684\u306a\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u3059\u3002\u81ea\u52d5\u7684\u306bgenerator\u3092\u4f5c\u308a\u307e\u3059\u3002\ndef ClkDriver(clk, period=20):\n\n    lowTime = int(period/2)\n    highTime = period - lowTime\n\n    @instance\n    def driveClk():\n        while True:\n            yield delay(lowTime)\n            clk.next = 1\n            yield delay(highTime)\n            clk.next = 0\n\n    return driveClk\n\n\nalways()\n\u6c7a\u307e\u3063\u305f\u30d1\u30bf\u30fc\u30f3\u3067\u4f7f\u3046\u30c7\u30b3\u30ec\u30fc\u30bf\u3002\u30af\u30ed\u30c3\u30af\u306e\u7acb\u3061\u4e0a\u304c\u308a\u3067\u52d5\u4f5c\u3059\u308b\u56de\u8def\u306e\u4f8b\n    @always(clk.posedge)\n    def write():\n        if we:\n            mem[addr].next = din\n\n\nalways_comb()\n\u7d44\u307f\u5408\u308f\u305b\u56de\u8def\u3092\u8a18\u8ff0\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3002\n    @always_comb\n    def read():\n        dout.next = mem[addr]\n\n\nalways_seq()\n\u9806\u5e8f\u56de\u8def\u3092\u8a18\u8ff0\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3002\ndef Inc(count, enable, clock, reset):\n    @always_seq(clock.posedge, reset=reset)\n    def incLogic():\n        if enable:\n            count.next = count + 1\n\n    return incLogic\n\nMyHDL\u306b\u51fa\u3066\u304f\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3092Reference\u304b\u3089\u6574\u7406\u3057\u307e\u3057\u305f\u3002\n\n## instance()\n\u6700\u3082\u4e00\u822c\u7684\u306a\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u3059\u3002\u81ea\u52d5\u7684\u306bgenerator\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```python\ndef ClkDriver(clk, period=20):\n    \n    lowTime = int(period/2)\n    highTime = period - lowTime\n\n    @instance\n    def driveClk():\n        while True:\n            yield delay(lowTime)\n            clk.next = 1\n            yield delay(highTime)\n            clk.next = 0\n\n    return driveClk\n```\n\n## always()\n\u6c7a\u307e\u3063\u305f\u30d1\u30bf\u30fc\u30f3\u3067\u4f7f\u3046\u30c7\u30b3\u30ec\u30fc\u30bf\u3002\u30af\u30ed\u30c3\u30af\u306e\u7acb\u3061\u4e0a\u304c\u308a\u3067\u52d5\u4f5c\u3059\u308b\u56de\u8def\u306e\u4f8b\n\n```python\n    @always(clk.posedge)\n    def write():\n        if we:\n            mem[addr].next = din\n```\n\n## always_comb()\n\u7d44\u307f\u5408\u308f\u305b\u56de\u8def\u3092\u8a18\u8ff0\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3002\n\n```python\n    @always_comb\n    def read():\n        dout.next = mem[addr]\n```\n\n## always_seq()\n\u9806\u5e8f\u56de\u8def\u3092\u8a18\u8ff0\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3002\n\n```python\ndef Inc(count, enable, clock, reset):\n    @always_seq(clock.posedge, reset=reset)\n    def incLogic():\n        if enable:\n            count.next = count + 1\n\n    return incLogic\n```\n\n"}