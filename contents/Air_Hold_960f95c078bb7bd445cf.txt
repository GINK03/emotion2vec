{"context": "\n\n\u524d\u7f6e\u304d\u3042\u308b\u3044\u306f\u4f55\u3057\u305f\u3044\u306e\u304b\u3068\u304b\u3002\n\u306a\u306b\u3053\u306e\u30bf\u30a4\u30c8\u30eb\uff1f\u3063\u3066\u601d\u3063\u305f\u4eba\u306f\u5e78\u305b\u3067\u3059\u3002\n\u30bf\u30a4\u30c8\u30eb\u306b\u66f8\u3044\u305f\u3088\u3046\u306a\u554f\u984c\u3063\u3066\u3001\u306a\u306b\u304c\u697d\u3057\u3044\u306e\u304b\u3001\u554f\u984c\u3068\u3057\u3066\u51fa\u984c\u3055\u308c\u308b\u3053\u3068\u304c\u6642\u3005\u3042\u308a\u307e\u3059\u3002\n\u3068\u3042\u308b\u554f\u984c\u3067\u6c4e\u7528\u7684\u304b\u3064\u305d\u3053\u305d\u3053\u901f\u304f\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u51fa\u3057\u305f\u3068\u3053\u308d\u3001\u3069\u3046\u3082\u60f3\u5b9a\u3055\u308c\u305f\u89e3\u304d\u65b9\u3068\u9055\u3063\u305f\u3088\u3046\u3067\u3057\u305f\u3002\n\u306a\u306e\u3067\u3001\u305d\u306e\u30b3\u30fc\u30c9\u3092\u63d0\u793a\u3057\u3001\u8aac\u660e\u3092\u52a0\u3048\u305f\u3044\u3068\u601d\u3063\u305f\u308f\u3051\u3067\u3059\u3002\n\n\u8ad6\u7406\u7684\u8a66\u884c\uff08\u2260\u601d\u8003\uff09\u3068\u304b\u3002\n\u308f\u304b\u308a\u3084\u3059\u304f4\u9762\u30c0\u30a4\u30b9\u3092n\u56de\u632f\u3063\u30666\u3067\u5272\u3063\u305f\u4f59\u308a\u306e\u6570\u3092\u6c42\u3081\u3066\u307f\u307e\u3059\u3002\n1\u56de\u632f\u3063\u305f\u5834\u5408\u3001\u4f59\u308a\u3092\u914d\u5217\u5316\u3059\u308b\u3068N1{0,1,1,1,1,0}\u3068\u306a\u308a\u307e\u3059\u3002\n2\u56de\u632f\u3063\u305f\u5834\u5408\u3001\u3053\u306eN1{0,1,1,1,1,0}\u306b\u5bfe\u3057\u3066\u3001\u305d\u308c\u305e\u308c1\uff5e4\u304c\u51fa\u305f\u5834\u5408\u306e\u6570\u5b57\u306e\u5909\u5316\u3092\u8003\u3048\u307e\u3059\u3002\n1\u56de\u76ee\u306e\u4f59\u308a\u304c0:N1[0]=0\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u3067\u30820\u306e\u307e\u307e\u3002{0,0,0,0,0,0}\n1\u56de\u76ee\u306e\u4f59\u308a\u304c1:N1[1]=1\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u30011+1\uff5e4\u305d\u308c\u305e\u308cN1[1]\u306b\u3002{0,0,1,1,1,1}\n1\u56de\u76ee\u306e\u4f59\u308a\u304c2:N1[2]=1\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u3001MOD(2+2\uff5e4,6)\u305d\u308c\u305e\u308cN1[2]\u306b\u3002{1,0,0,1,1,1}\n1\u56de\u76ee\u306e\u4f59\u308a\u304c3:N1[3]=1\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u3001MOD(3+2\uff5e4,6)\u305d\u308c\u305e\u308cN1[3]\u306b\u3002{1,1,0,0,1,1}\n1\u56de\u76ee\u306e\u4f59\u308a\u304c4:N1[4]=1\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u3001MOD(4+2\uff5e4,6)\u305d\u308c\u305e\u308cN1[4]\u306b\u3002{1,1,1,0,0,1}\n1\u56de\u76ee\u306e\u4f59\u308a\u304c5:N1[5]=0\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u3067\u30820\u306e\u307e\u307e\u3002{0,0,0,0,0,0}\n\u3053\u308c\u3092\u8db3\u3057\u7b97\u3057\u3066\u3042\u3052\u308b\u3068N2{3,2,2,2,3,4}\u3068\u306a\u308a\u307e\u3059\u3002\n\u540c\u69d8\u306bN3\u306f{0,3,3,3,3,0},{0,0,2,2,2,2},{2,0,0,2,2,2},{2,2,0,0,2,2},{3,3,3,0,0,3},{4,4,4,4,0,0}\u3092\u8db3\u3057\u305f{11,12,12,11,9,9}\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u51e6\u7406\u3092n\u56de\u7e70\u308a\u8fd4\u3059\u3068\u7b54\u3048\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\n\u8a08\u7b97\u91cf\u306fO(\u30c0\u30a4\u30b9\u306e\u9762\u6570\u00d7\u5272\u308b\u6570\u00d7\u632f\u308b\u56de\u6570)\u3067\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5316\u3068\u304b\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u76f4\u3059\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n    /**\n     * \u6c4e\u7528\u30c0\u30a4\u30b9\u4f59\u308a\u6570\u8a08\u7b97\u5668\n     * @param dieMax \u4f55\u9762\u30c0\u30a4\u30b9\u304b\n     * @param dieCount \u4f55\u56de\u632f\u308b\u306e\u304b\n     * @param divNum \u3069\u3093\u306a\u6570\u5b57\u3067\u5272\u308b\u306e\u304b\n     * @param modNum \u4f59\u308a\u5e7e\u3064\u306e\u6570\u3092\u6c42\u3081\u308b\u306e\u304b\n     * @return \u7d50\u679c\n     * dieMax\u9762\u30c0\u30a4\u30b9\u3092dieCount\u56de\u632f\u308a\u3001divNum\u3067\u5272\u3063\u305f\u4f59\u308a\u304cmodNum\u3068\u306a\u308b\u6570\u3092\u6c42\u3081\u3088\u554f\u984c\u3092\u89e3\u304f\u3002\n     * \u4f8b\uff1a4\u9762\u30c0\u30a4\u30b9\u309210\u56de\u632f\u308a\u30016\u3067\u5272\u3063\u305f\u4f59\u308a\u304c3\u3068\u306a\u308b\u6570\u3092\u6c42\u3081\u3088\u3002\u2192getDieDivideCount(4,10,6,3)=>174722\n     */\n    private static int getDieDivideCount(\n            final int dieMax,final int dieCount,final int divNum,final int modNum){\n        int[]divList=new int[divNum];\n        //\u521d\u671f\u8a2d\u5b9a\u3002\n//      Arrays.fill(divList,1,1,dieMax);\n        //dieMax<=divNum\u306e\u3068\u304d\u306b\u8aa4\u52d5\u4f5c\u3059\u308b\u306e\u3092\u907f\u3051\u308b\u3002\n        for(int i=1;i<=dieMax;++i){\n            ++divList[i%divNum];\n        }\n        //\u30c0\u30a4\u30b9\u30921\u56de\u305a\u3064\u632f\u3063\u305f\u3068\u304d\u306e\u30c7\u30fc\u30bf\u306b\u66f4\u65b0\u3057\u7d9a\u3051\u308b\u3002\n        for(int n=2;n<=dieCount;++n){\n            int[]tmp=new int[divNum];\n            for(int mod=0;mod<divNum;++mod){\n                for(int die=1;die<=dieMax;++die){\n                    tmp[(mod+die)%divNum]+=divList[mod];\n                }\n            }\n            divList=tmp;\n        }\n        return divList[modNum];\n    }\n\n\u3068\u3001\u3053\u3053\u307e\u3067\u304c\u524d\u5ea7\u3002\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3053\u308c\u3092Stream API\u3067\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4f3c\u975eStream\u5316\u3068\u304b\u3002\nIntStream\u306ffor\u306e\u4ee3\u308f\u308a\uff01\u3068\u3069\u3063\u304b\u306e\u5049\u3044\u4eba\u304c\u8a00\u3063\u3066\u305f\u306e\u3067\u3001\u307e\u305a\u306f\u3001\u305d\u3046\u3044\u3046 \u30af\u30ba \u304a\u624b\u672c\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u76f4\u3057\u3066\u307f\u307e\u3059\u3002\n    private static int getDieDivideCountWithStream(\n            final int dieMax,final int dieCount,final int divNum,final int modNum){\n        final int[]divList=new int[divNum];\n        //\u521d\u671f\u8a2d\u5b9a\u3002\n        IntStream.rangeClosed(1,dieMax).parallel().forEach(i->++divList[i%divNum]);\n        //\u30c0\u30a4\u30b9\u30921\u56de\u305a\u3064\u632f\u3063\u305f\u3068\u304d\u306e\u30c7\u30fc\u30bf\u306b\u66f4\u65b0\u3057\u7d9a\u3051\u308b\u3002\n        IntStream.rangeClosed(2,dieCount)\n        .forEach(n->{\n            int[]tmp=new int[divNum];\n            IntStream.range(0,divNum).forEach(mod->{\n                IntStream.rangeClosed(1,dieMax).forEach(die->{\n                    tmp[(mod+die)%divNum]+=divList[mod];\n                });\n            });\n            System.arraycopy(tmp,0,divList,0,divNum);\n        });\n        return divList[modNum];\n    }\n\n\u306f\u3044\u3001\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002\u4f55\u306e\u610f\u5473\u3082\u306a\u3044Stream\u5316\u3067\u3059\u3002\n\u305b\u3081\u3066\u6700\u5f8c\u304f\u3089\u3044parallel\u4f7f\u3048\u3088\uff01\u3063\u3066\u8a71\u3067\u3059\u304c\u3001\u3053\u308c\u3001parallel\u5316\u3059\u308b\u3068\u6b63\u3057\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u306a\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306fdieMax>divNum\u306e\u3068\u304d\u3002\u3088\u3046\u3059\u308b\u306b4\u9762\u30c0\u30a4\u30b9\u30923\u3067\u5272\u3063\u305f\u4f59\u308a\u306a\u3068\u304d\u30021,2,3,4\u3092\u4e26\u884c\u3067\u51e6\u7406\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001(mod+1)%3\u3068(mod+4)%3\u304c\u30d0\u30c3\u30c6\u30a3\u30f3\u30b0\u3057\u3066tmp\u914d\u5217\u3092\u7834\u58ca\u3057\u307e\u3059\u3002\n\u3058\u3083\u3042\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u306e\u304b\u3063\u3066\u8a71\u306a\u3093\u3067\u3059\u304c\u3001parallel\u3067\u304d\u306a\u3044\u7406\u7531\u306f\u30d0\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u305b\u3044\u306a\u306e\u3067\u3001\u30d0\u30c3\u30c6\u30a3\u30f3\u30b0\u3057\u306a\u3044\u30b3\u30fc\u30c9\u306b\u5909\u3048\u3066\u3057\u307e\u3048\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\ndivList\u3092AtomicIntegerArray\u306b\u3059\u308b\u3063\u3066\u306e\u306f\uff11\u3064\u306e\u624b\u6bb5\u3067\u3059\u304c\u3001\u306a\u3093\u3067parallel\u3067\u5f97\u305f\u901f\u5ea6\u3092synchronized\u3067\u843d\u3068\u3055\u306a\u3042\u304b\u3093\u306d\u3093\u3066\u8a71\u306a\u306e\u3067\u30d1\u30b9\u3002\n\u30d0\u30c3\u30c6\u30a3\u30f3\u30b0\u304c\u767a\u751f\u3059\u308b\u306e\u306f(mod+x)%divNum\u3068(mod+x+divNum*y)%divNum\u304c\u540c\u3058\u914d\u5217\u3092\u64cd\u4f5c\u3059\u308b\u304b\u3089\u3067\u3059\u306e\u3067\u3001\u3053\u308c\u3092\u7121\u304f\u3059\u306b\u306f\u3001\u30eb\u30fc\u30d7\u305d\u306e\u3082\u306e\u3092divNum\u307e\u3067\u306b\u3057\u3066\u3001(1%3\u30684%3\u306e\u3088\u3046\u306b\uff09\u540c\u3058mod\u5024\u306e\u3082\u306e\u306f\u307e\u3068\u3081\u3066\u52a0\u7b97\u3057\u3066\u3042\u3052\u308c\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\n\u305f\u3068\u3048\u3070\nIntStream.range(1,divNum).parallel().forEach(div->{\n    tmp[(mod+div)%divNum]+=divList[mod%divNum]*((dieMax-div+divNum)/divNum);\n});\n\n\u3068\u3044\u3046\u5f0f\u306b\u3059\u308c\u3070parallel\u5316\u3067\u304d\u307e\u3059\u3002\n\n\u554f\u984c\u70b9\u3068\u304b\u3002\n\u3055\u3066\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3001\u30eb\u30fc\u30d7\u3092divNum and dieMax\u304b\u3089divNum and divNum\u306b\u3057\u305f\u305f\u3081\u3001\u305f\u3068\u3048\u30706\u9762\u30c0\u30a4\u30b9\u309220\u56de\u632f\u3063\u3066100\u3067\u5272\u3063\u305f\u4f59\u308a\u3001\u3068\u3044\u3046\u51e6\u7406\u306e\u5834\u5408\u3001\u30eb\u30fc\u30d7\u304c100\u00d7100\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\ndieMax>divNum\u306e\u3068\u304d\u3092\u8003\u616e\u3057\u305f\u7d50\u679c\u3001\u9045\u304f\u306a\u308b\u3068\u3044\u3046\u60b2\u5287\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u3002\ndieMax<divNum\u306e\u3068\u304d\u306f\u3001dieMax\u3092\u4f7f\u3063\u3066\u30b7\u30f3\u30d7\u30eb\u306b\n    private static int getDieDivideCountWithStream(\n            final int dieMax,final int dieCount,final int divNum,final int modNum){\n        final int[]divList=new int[divNum];\n        //\u521d\u671f\u8a2d\u5b9a\u3002\n        Arrays.fill(divList,1,dieMax+1,1);\n        //\u30c0\u30a4\u30b9\u30921\u56de\u305a\u3064\u632f\u3063\u305f\u3068\u304d\u306e\u30c7\u30fc\u30bf\u306b\u66f4\u65b0\u3057\u7d9a\u3051\u308b\u3002\n        IntStream.rangeClosed(2,dieCount)\n        .forEach(n->{\n            int[]tmp=new int[divNum];\n            IntStream.range(0,divNum).forEach(mod->{\n                IntStream.rangeClosed(1,dieMax).forEach(die->{\n                    tmp[(mod+die)%divNum]+=divList[mod];\n                });\n            });\n            System.arraycopy(tmp,0,divList,0,divNum);\n        });\n        return divList[modNum];\n    }\n\n\u3068\u3057\u305f\u307b\u3046\u304c\u901f\u305d\u3046\u3067\u3059\u3002\n\n\u5b8c\u5168Stream\u5316\u3068\u304b\u3002\n\u305b\u3063\u304b\u304f\u3067\u3059\u306e\u3067\u554f\u984c\u70b9\u3092\u89e3\u6d88\u3057\u3064\u3064Stream api\u3067\u5168\u9762\u66f8\u304d\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n    private static int getDieDivideCountWithStream(\n            final int dieMax,final int dieCount,final int divNum,final int modNum){\n        return Stream.iterate(\n                //\u521d\u671f\u5024\n                IntStream.concat(\n                        IntStream.of(dieMax/divNum)\n                        ,IntStream.range(1,divNum).parallel().map(n->(dieMax+divNum-n)/divNum)).toArray()\n                //\u521d\u671f\u5024\u3092\uff11\u56de\u305a\u3064\u5909\u3048\u3066\u3044\u304f\u3002\n                ,beforeDivList->{\n                    int[]tmp=new int[divNum];\n                    IntStream.range(0,divNum).forEach(mod->{\n                        IntStream.rangeClosed(1,Math.min(dieMax,divNum)).parallel().forEach(di->{\n                            tmp[(mod+di)%divNum]+=dieMax>=divNum?\n                                    (beforeDivList[mod%divNum]*((dieMax-di+divNum)/divNum))\n                                    :beforeDivList[mod];\n                        });\n                    });\n                    return tmp;\n                }).skip(dieCount-1)//\u4e00\u756a\u6700\u5f8c\u306e\u7d50\u679c\u307e\u3067\u30b9\u30ad\u30c3\u30d7\n                .mapToInt(div->div[modNum])//\u914d\u5217\u304b\u3089\u4f59\u308a\u304cmodNum\u306e\u3082\u306e\u3092\u53d6\u308a\u51fa\u3059\u3002\n                .findFirst()//\u304a\u307e\u3058\u306a\u3044\n                .getAsInt();//\u304a\u307e\u3058\u306a\u3044\n    }\n\n\u308f\u30fc\u77ed\u304f\u3066\u8aad\u307f\u3084\u3059\u304f\u3066\u901f\u3044\uff08\u68d2\n\n\u7d50\u8ad6\u3068\u304b\n\u306a\u3093\u3067\u3082\u304b\u3093\u3067\u3082Stream api\u306b\u3059\u308c\u3070\u3044\u3044\u3063\u3066\u3082\u3093\u3058\u3083\u306a\u3044\u3088\u306d\u3002\n#\u524d\u7f6e\u304d\u3042\u308b\u3044\u306f\u4f55\u3057\u305f\u3044\u306e\u304b\u3068\u304b\u3002\n\u306a\u306b\u3053\u306e\u30bf\u30a4\u30c8\u30eb\uff1f\u3063\u3066\u601d\u3063\u305f\u4eba\u306f\u5e78\u305b\u3067\u3059\u3002\n\u30bf\u30a4\u30c8\u30eb\u306b\u66f8\u3044\u305f\u3088\u3046\u306a\u554f\u984c\u3063\u3066\u3001\u306a\u306b\u304c\u697d\u3057\u3044\u306e\u304b\u3001\u554f\u984c\u3068\u3057\u3066\u51fa\u984c\u3055\u308c\u308b\u3053\u3068\u304c\u6642\u3005\u3042\u308a\u307e\u3059\u3002\n\u3068\u3042\u308b\u554f\u984c\u3067\u6c4e\u7528\u7684\u304b\u3064\u305d\u3053\u305d\u3053\u901f\u304f\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u51fa\u3057\u305f\u3068\u3053\u308d\u3001\u3069\u3046\u3082\u60f3\u5b9a\u3055\u308c\u305f\u89e3\u304d\u65b9\u3068\u9055\u3063\u305f\u3088\u3046\u3067\u3057\u305f\u3002\n\u306a\u306e\u3067\u3001\u305d\u306e\u30b3\u30fc\u30c9\u3092\u63d0\u793a\u3057\u3001\u8aac\u660e\u3092\u52a0\u3048\u305f\u3044\u3068\u601d\u3063\u305f\u308f\u3051\u3067\u3059\u3002\n\n#\u8ad6\u7406\u7684\u8a66\u884c\uff08\u2260\u601d\u8003\uff09\u3068\u304b\u3002\n\u308f\u304b\u308a\u3084\u3059\u304f4\u9762\u30c0\u30a4\u30b9\u3092n\u56de\u632f\u3063\u30666\u3067\u5272\u3063\u305f\u4f59\u308a\u306e\u6570\u3092\u6c42\u3081\u3066\u307f\u307e\u3059\u3002\n1\u56de\u632f\u3063\u305f\u5834\u5408\u3001\u4f59\u308a\u3092\u914d\u5217\u5316\u3059\u308b\u3068N1{0,1,1,1,1,0}\u3068\u306a\u308a\u307e\u3059\u3002\n2\u56de\u632f\u3063\u305f\u5834\u5408\u3001\u3053\u306eN1{0,1,1,1,1,0}\u306b\u5bfe\u3057\u3066\u3001\u305d\u308c\u305e\u308c1\uff5e4\u304c\u51fa\u305f\u5834\u5408\u306e\u6570\u5b57\u306e\u5909\u5316\u3092\u8003\u3048\u307e\u3059\u3002\n1\u56de\u76ee\u306e\u4f59\u308a\u304c0:N1[0]=0\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u3067\u30820\u306e\u307e\u307e\u3002{0,0,0,0,0,0}\n1\u56de\u76ee\u306e\u4f59\u308a\u304c1:N1[1]=1\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u30011+1\uff5e4\u305d\u308c\u305e\u308cN1[1]\u306b\u3002{0,0,1,1,1,1}\n1\u56de\u76ee\u306e\u4f59\u308a\u304c2:N1[2]=1\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u3001MOD(2+2\uff5e4,6)\u305d\u308c\u305e\u308cN1[2]\u306b\u3002{1,0,0,1,1,1}\n1\u56de\u76ee\u306e\u4f59\u308a\u304c3:N1[3]=1\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u3001MOD(3+2\uff5e4,6)\u305d\u308c\u305e\u308cN1[3]\u306b\u3002{1,1,0,0,1,1}\n1\u56de\u76ee\u306e\u4f59\u308a\u304c4:N1[4]=1\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u3001MOD(4+2\uff5e4,6)\u305d\u308c\u305e\u308cN1[4]\u306b\u3002{1,1,1,0,0,1}\n1\u56de\u76ee\u306e\u4f59\u308a\u304c5:N1[5]=0\u21921\uff5e4\u304c\u51fa\u305f\u5834\u5408\u3067\u30820\u306e\u307e\u307e\u3002{0,0,0,0,0,0}\n\u3053\u308c\u3092\u8db3\u3057\u7b97\u3057\u3066\u3042\u3052\u308b\u3068N2{3,2,2,2,3,4}\u3068\u306a\u308a\u307e\u3059\u3002\n\u540c\u69d8\u306bN3\u306f{0,3,3,3,3,0},{0,0,2,2,2,2},{2,0,0,2,2,2},{2,2,0,0,2,2},{3,3,3,0,0,3},{4,4,4,4,0,0}\u3092\u8db3\u3057\u305f{11,12,12,11,9,9}\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u51e6\u7406\u3092n\u56de\u7e70\u308a\u8fd4\u3059\u3068\u7b54\u3048\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\n\u8a08\u7b97\u91cf\u306fO(\u30c0\u30a4\u30b9\u306e\u9762\u6570\u00d7\u5272\u308b\u6570\u00d7\u632f\u308b\u56de\u6570)\u3067\u3059\u3002\n#\u30d7\u30ed\u30b0\u30e9\u30e0\u5316\u3068\u304b\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u76f4\u3059\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n```java\n\t/**\n\t * \u6c4e\u7528\u30c0\u30a4\u30b9\u4f59\u308a\u6570\u8a08\u7b97\u5668\n\t * @param dieMax \u4f55\u9762\u30c0\u30a4\u30b9\u304b\n\t * @param dieCount \u4f55\u56de\u632f\u308b\u306e\u304b\n\t * @param divNum \u3069\u3093\u306a\u6570\u5b57\u3067\u5272\u308b\u306e\u304b\n\t * @param modNum \u4f59\u308a\u5e7e\u3064\u306e\u6570\u3092\u6c42\u3081\u308b\u306e\u304b\n\t * @return \u7d50\u679c\n\t * dieMax\u9762\u30c0\u30a4\u30b9\u3092dieCount\u56de\u632f\u308a\u3001divNum\u3067\u5272\u3063\u305f\u4f59\u308a\u304cmodNum\u3068\u306a\u308b\u6570\u3092\u6c42\u3081\u3088\u554f\u984c\u3092\u89e3\u304f\u3002\n\t * \u4f8b\uff1a4\u9762\u30c0\u30a4\u30b9\u309210\u56de\u632f\u308a\u30016\u3067\u5272\u3063\u305f\u4f59\u308a\u304c3\u3068\u306a\u308b\u6570\u3092\u6c42\u3081\u3088\u3002\u2192getDieDivideCount(4,10,6,3)=>174722\n\t */\n\tprivate static int getDieDivideCount(\n\t\t\tfinal int dieMax,final int dieCount,final int divNum,final int modNum){\n\t\tint[]divList=new int[divNum];\n\t\t//\u521d\u671f\u8a2d\u5b9a\u3002\n//\t\tArrays.fill(divList,1,1,dieMax);\n\t\t//dieMax<=divNum\u306e\u3068\u304d\u306b\u8aa4\u52d5\u4f5c\u3059\u308b\u306e\u3092\u907f\u3051\u308b\u3002\n\t\tfor(int i=1;i<=dieMax;++i){\n\t\t\t++divList[i%divNum];\n\t\t}\n\t\t//\u30c0\u30a4\u30b9\u30921\u56de\u305a\u3064\u632f\u3063\u305f\u3068\u304d\u306e\u30c7\u30fc\u30bf\u306b\u66f4\u65b0\u3057\u7d9a\u3051\u308b\u3002\n\t\tfor(int n=2;n<=dieCount;++n){\n\t\t\tint[]tmp=new int[divNum];\n\t\t\tfor(int mod=0;mod<divNum;++mod){\n\t\t\t\tfor(int die=1;die<=dieMax;++die){\n\t\t\t\t\ttmp[(mod+die)%divNum]+=divList[mod];\n\t\t\t\t}\n\t\t\t}\n\t\t\tdivList=tmp;\n\t\t}\n\t\treturn divList[modNum];\n\t}\n```\n\u3068\u3001\u3053\u3053\u307e\u3067\u304c\u524d\u5ea7\u3002\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3053\u308c\u3092Stream API\u3067\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n#\u4f3c\u975eStream\u5316\u3068\u304b\u3002\nIntStream\u306ffor\u306e\u4ee3\u308f\u308a\uff01\u3068\u3069\u3063\u304b\u306e\u5049\u3044\u4eba\u304c\u8a00\u3063\u3066\u305f\u306e\u3067\u3001\u307e\u305a\u306f\u3001\u305d\u3046\u3044\u3046 ~~\u30af\u30ba~~ \u304a\u624b\u672c\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u76f4\u3057\u3066\u307f\u307e\u3059\u3002\n\n```java\n\tprivate static int getDieDivideCountWithStream(\n\t\t\tfinal int dieMax,final int dieCount,final int divNum,final int modNum){\n\t\tfinal int[]divList=new int[divNum];\n\t\t//\u521d\u671f\u8a2d\u5b9a\u3002\n\t\tIntStream.rangeClosed(1,dieMax).parallel().forEach(i->++divList[i%divNum]);\n\t\t//\u30c0\u30a4\u30b9\u30921\u56de\u305a\u3064\u632f\u3063\u305f\u3068\u304d\u306e\u30c7\u30fc\u30bf\u306b\u66f4\u65b0\u3057\u7d9a\u3051\u308b\u3002\n\t\tIntStream.rangeClosed(2,dieCount)\n\t\t.forEach(n->{\n\t\t\tint[]tmp=new int[divNum];\n\t\t\tIntStream.range(0,divNum).forEach(mod->{\n\t\t\t\tIntStream.rangeClosed(1,dieMax).forEach(die->{\n\t\t\t\t\ttmp[(mod+die)%divNum]+=divList[mod];\n\t\t\t\t});\n\t\t\t});\n\t\t\tSystem.arraycopy(tmp,0,divList,0,divNum);\n\t\t});\n\t\treturn divList[modNum];\n\t}\n```\n\u306f\u3044\u3001\u66f8\u304d\u76f4\u3057\u307e\u3057\u305f\u3002\u4f55\u306e\u610f\u5473\u3082\u306a\u3044Stream\u5316\u3067\u3059\u3002\n\u305b\u3081\u3066\u6700\u5f8c\u304f\u3089\u3044parallel\u4f7f\u3048\u3088\uff01\u3063\u3066\u8a71\u3067\u3059\u304c\u3001\u3053\u308c\u3001parallel\u5316\u3059\u308b\u3068\u6b63\u3057\u3044\u7d50\u679c\u304c\u5f97\u3089\u308c\u306a\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306fdieMax>divNum\u306e\u3068\u304d\u3002\u3088\u3046\u3059\u308b\u306b4\u9762\u30c0\u30a4\u30b9\u30923\u3067\u5272\u3063\u305f\u4f59\u308a\u306a\u3068\u304d\u30021,2,3,4\u3092\u4e26\u884c\u3067\u51e6\u7406\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001(mod+1)%3\u3068(mod+4)%3\u304c\u30d0\u30c3\u30c6\u30a3\u30f3\u30b0\u3057\u3066tmp\u914d\u5217\u3092\u7834\u58ca\u3057\u307e\u3059\u3002\n\n\u3058\u3083\u3042\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u306e\u304b\u3063\u3066\u8a71\u306a\u3093\u3067\u3059\u304c\u3001parallel\u3067\u304d\u306a\u3044\u7406\u7531\u306f\u30d0\u30c3\u30c6\u30a3\u30f3\u30b0\u306e\u305b\u3044\u306a\u306e\u3067\u3001\u30d0\u30c3\u30c6\u30a3\u30f3\u30b0\u3057\u306a\u3044\u30b3\u30fc\u30c9\u306b\u5909\u3048\u3066\u3057\u307e\u3048\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\ndivList\u3092AtomicIntegerArray\u306b\u3059\u308b\u3063\u3066\u306e\u306f\uff11\u3064\u306e\u624b\u6bb5\u3067\u3059\u304c\u3001\u306a\u3093\u3067parallel\u3067\u5f97\u305f\u901f\u5ea6\u3092synchronized\u3067\u843d\u3068\u3055\u306a\u3042\u304b\u3093\u306d\u3093\u3066\u8a71\u306a\u306e\u3067\u30d1\u30b9\u3002\n\u30d0\u30c3\u30c6\u30a3\u30f3\u30b0\u304c\u767a\u751f\u3059\u308b\u306e\u306f(mod+x)%divNum\u3068(mod+x+divNum*y)%divNum\u304c\u540c\u3058\u914d\u5217\u3092\u64cd\u4f5c\u3059\u308b\u304b\u3089\u3067\u3059\u306e\u3067\u3001\u3053\u308c\u3092\u7121\u304f\u3059\u306b\u306f\u3001\u30eb\u30fc\u30d7\u305d\u306e\u3082\u306e\u3092divNum\u307e\u3067\u306b\u3057\u3066\u3001(1%3\u30684%3\u306e\u3088\u3046\u306b\uff09\u540c\u3058mod\u5024\u306e\u3082\u306e\u306f\u307e\u3068\u3081\u3066\u52a0\u7b97\u3057\u3066\u3042\u3052\u308c\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\n\u305f\u3068\u3048\u3070\n\n```java\nIntStream.range(1,divNum).parallel().forEach(div->{\n\ttmp[(mod+div)%divNum]+=divList[mod%divNum]*((dieMax-div+divNum)/divNum);\n});\n```\n\u3068\u3044\u3046\u5f0f\u306b\u3059\u308c\u3070parallel\u5316\u3067\u304d\u307e\u3059\u3002\n##\u554f\u984c\u70b9\u3068\u304b\u3002\n\u3055\u3066\u3001\u3053\u306e\u30b3\u30fc\u30c9\u3001\u30eb\u30fc\u30d7\u3092divNum and dieMax\u304b\u3089divNum and divNum\u306b\u3057\u305f\u305f\u3081\u3001\u305f\u3068\u3048\u30706\u9762\u30c0\u30a4\u30b9\u309220\u56de\u632f\u3063\u3066100\u3067\u5272\u3063\u305f\u4f59\u308a\u3001\u3068\u3044\u3046\u51e6\u7406\u306e\u5834\u5408\u3001\u30eb\u30fc\u30d7\u304c100\u00d7100\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\ndieMax>divNum\u306e\u3068\u304d\u3092\u8003\u616e\u3057\u305f\u7d50\u679c\u3001\u9045\u304f\u306a\u308b\u3068\u3044\u3046\u60b2\u5287\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u3002\ndieMax<divNum\u306e\u3068\u304d\u306f\u3001dieMax\u3092\u4f7f\u3063\u3066\u30b7\u30f3\u30d7\u30eb\u306b\n\n```java\n\tprivate static int getDieDivideCountWithStream(\n\t\t\tfinal int dieMax,final int dieCount,final int divNum,final int modNum){\n\t\tfinal int[]divList=new int[divNum];\n\t\t//\u521d\u671f\u8a2d\u5b9a\u3002\n\t\tArrays.fill(divList,1,dieMax+1,1);\n\t\t//\u30c0\u30a4\u30b9\u30921\u56de\u305a\u3064\u632f\u3063\u305f\u3068\u304d\u306e\u30c7\u30fc\u30bf\u306b\u66f4\u65b0\u3057\u7d9a\u3051\u308b\u3002\n\t\tIntStream.rangeClosed(2,dieCount)\n\t\t.forEach(n->{\n\t\t\tint[]tmp=new int[divNum];\n\t\t\tIntStream.range(0,divNum).forEach(mod->{\n\t\t\t\tIntStream.rangeClosed(1,dieMax).forEach(die->{\n\t\t\t\t\ttmp[(mod+die)%divNum]+=divList[mod];\n\t\t\t\t});\n\t\t\t});\n\t\t\tSystem.arraycopy(tmp,0,divList,0,divNum);\n\t\t});\n\t\treturn divList[modNum];\n\t}\n```\n\u3068\u3057\u305f\u307b\u3046\u304c\u901f\u305d\u3046\u3067\u3059\u3002\n\n#\u5b8c\u5168Stream\u5316\u3068\u304b\u3002\n\u305b\u3063\u304b\u304f\u3067\u3059\u306e\u3067\u554f\u984c\u70b9\u3092\u89e3\u6d88\u3057\u3064\u3064Stream api\u3067\u5168\u9762\u66f8\u304d\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```java\n\tprivate static int getDieDivideCountWithStream(\n\t\t\tfinal int dieMax,final int dieCount,final int divNum,final int modNum){\n\t\treturn Stream.iterate(\n\t\t\t\t//\u521d\u671f\u5024\n\t\t\t\tIntStream.concat(\n\t\t\t\t\t\tIntStream.of(dieMax/divNum)\n\t\t\t\t\t\t,IntStream.range(1,divNum).parallel().map(n->(dieMax+divNum-n)/divNum)).toArray()\n\t\t\t\t//\u521d\u671f\u5024\u3092\uff11\u56de\u305a\u3064\u5909\u3048\u3066\u3044\u304f\u3002\n\t\t\t\t,beforeDivList->{\n\t\t\t\t\tint[]tmp=new int[divNum];\n\t\t\t\t\tIntStream.range(0,divNum).forEach(mod->{\n\t\t\t\t\t\tIntStream.rangeClosed(1,Math.min(dieMax,divNum)).parallel().forEach(di->{\n\t\t\t\t\t\t\ttmp[(mod+di)%divNum]+=dieMax>=divNum?\n\t\t\t\t\t\t\t\t\t(beforeDivList[mod%divNum]*((dieMax-di+divNum)/divNum))\n\t\t\t\t\t\t\t\t\t:beforeDivList[mod];\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\treturn tmp;\n\t\t\t\t}).skip(dieCount-1)//\u4e00\u756a\u6700\u5f8c\u306e\u7d50\u679c\u307e\u3067\u30b9\u30ad\u30c3\u30d7\n\t\t\t\t.mapToInt(div->div[modNum])//\u914d\u5217\u304b\u3089\u4f59\u308a\u304cmodNum\u306e\u3082\u306e\u3092\u53d6\u308a\u51fa\u3059\u3002\n\t\t\t\t.findFirst()//\u304a\u307e\u3058\u306a\u3044\n\t\t\t\t.getAsInt();//\u304a\u307e\u3058\u306a\u3044\n\t}\n```\n\u308f\u30fc\u77ed\u304f\u3066\u8aad\u307f\u3084\u3059\u304f\u3066\u901f\u3044\uff08\u68d2\n\n#\u7d50\u8ad6\u3068\u304b\n\u306a\u3093\u3067\u3082\u304b\u3093\u3067\u3082Stream api\u306b\u3059\u308c\u3070\u3044\u3044\u3063\u3066\u3082\u3093\u3058\u3083\u306a\u3044\u3088\u306d\u3002\n", "tags": ["Java", "java8", "\u30dd\u30a8\u30e0"]}