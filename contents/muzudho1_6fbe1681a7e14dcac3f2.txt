{"context": "\u524d\u56de\u306e\u8a18\u4e8b : http://qiita.com/muzudho1/items/473fc0fda3e38300b820\n\n\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5272\u8fbc\u307f\u5f85\u3061\u505c\u6b62\u3057\u3066\u3044\u308b\u30d7\u30ed\u30bb\u30b9\u3068\u3001\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u306f\u3067\u304d\u308b\u306e\u3060\u308d\u3046\u304b\uff1f\n\u524d\u306b\u5b9f\u9a13\u3057\u305f\u6c17\u304c\u3059\u308b\u3093\u3060\u304c\u3000\u3069\u306e\u8a18\u4e8b\u3060\u3063\u305f\u308d\u3046\u304b\u3002\n\u524d\u56de\u306e\u8a18\u4e8b\u3060\u3063\u305f\u3002\n\u300c\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u5c06\u68cb\u30bd\u30d5\u30c8\u3068\u306e\u5bfe\u5c40\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3066\u3088\u3046\uff1c\u305d\u306e\uff18\uff1e\u300d\uff08Qiita\uff09\nhttp://qiita.com/muzudho1/items/798dfbf267340f3801e1#_reference-1a747e743b7ff0dbb050\n\u3053\u306e\u3068\u304d\u306f C# / RabbitQM \u3060\u3063\u305f\u304c\u3001\u4eca\u5ea6\u306f C++ / AMQP-CPP \u3067\u3084\u308a\u305f\u3044\u3002\n\u3058\u3083\u3042\ntamesi33a1_cpp.cpp\u3001tamesi33a2_cpp.cpp \u306e\u30c6\u30b9\u30c8\u3092\u4f5c\u308d\u3046\u3002\n\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9 tamesi33 C++\u7248\na1 : \uff08\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u56de\u3055\u306a\u3044\uff09\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1112\u300d\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308c\u308b\u3082\u306e\u3068\u3059\u308b\u3002\u5e38\u6642\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1113\u300d\u3092\u76e3\u8996\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5165\u3063\u3066\u3044\u308c\u3070\u3000\u753b\u9762\u306b\u51fa\u3059\u3082\u306e\u3068\u3059\u308b\u3002\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3000\u5fc5\u8981\u306b\u306a\u3063\u305f\u3089\u5b9f\u884c\u3057\u3001\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u3089\u6d88\u3048\u3066\u3044\u308b\u3082\u306e\u3068\u60f3\u5b9a\u3059\u308b\u3002\na2 : \uff08\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u56de\u3059\uff09\u5e38\u6642\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1112\u300d\u3092\u76e3\u8996\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5165\u3063\u3066\u3044\u308c\u3070\u3000\u305d\u306e\u6587\u5b57\u5217\u306b\u300cdaze\u300d\u3068\u4ed8\u3051\u3066\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1113\u300d\u306b\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3002\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3000\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u3082\u7a3c\u50cd\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u3059\u308b\u3002\n\u3053\u308c\u3067 a2 \u304c\u5e38\u6642\u3000\u7a3c\u50cd\u3057\u3066\u3044\u3066\u3001a1 \u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u306e\u306a\u3089\u3000\u3088\u3057\u3068\u3059\u308b\u3002\n\na2\na2 \u3060\u3051\u4f5c\u308c\u3070\u3044\u3044\u3084\u2026\u2026\u3002\n\n\u30bd\u30fc\u30b9\u3092\u898b\u3066\u3044\u305f\u3093\u3060\u304c\n// I will keep on forever.\nev_run(loop, 0);\n\n\u30c7\u30ad\u30e5\u30fc\u3092\u76e3\u8996\u3057\u3066\u3044\u308b\u51e6\u7406\u304c\u3042\u3063\u3066\u3001\u3053\u3053\u3067\u30d6\u30ed\u30c3\u30af\u3055\u308c\u3066\u3044\u308b\u3002\n\u3060\u304b\u3089\u30a8\u30f3\u30ad\u30e5\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u307e\u3067\u884c\u3063\u3066\u306a\u3044\u3002\n\u3069\u3046\u3059\u308b\u304b\u3002\n\nC++ \u3067\u30b9\u30ec\u30c3\u30c9\u3092\u8d70\u3089\u305b\u308b\u306b\u306f\uff1f\n\u30c7\u30ad\u30e5\u30fc\u306e\u76e3\u8996\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u3084\u308c\u3070\u3044\u3044\u306e\u3060\u308d\u3046\u304b\uff1f\n\u300cC++\u3067\u7c21\u5358\u975e\u540c\u671f\u51e6\u7406(std::thread,std::async)\u300d\uff08Qiita\uff09\nhttp://qiita.com/termoshtt/items/d3cb7fe226cdd498d2ef\n\nVisual Studio 2015 \u8a2d\u5b9a\nRelease x64 \u306b\u3057\u3066 \u30d7\u30ed\u30d1\u30c6\u30a3\u753b\u9762\u304b\u3089\u30d7\u30ea\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u30d8\u30c3\u30c0\u30fc\u306e\u4f7f\u7528\u3092\u7121\u3057\u306b\u3059\u308b\u3002\n#include \"stdafx.h\"\n\n\u3068\u3044\u3063\u305f\u8a18\u8ff0\u3082\u524a\u9664\u3059\u308b\u3002\n\nstdafx.h\ntargetver.h\nstdafx.cpp\n\n\u306e\uff13\u30d5\u30a1\u30a4\u30eb\u306f\u524a\u9664\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u3089\u306a\u3044\u304c\u3001Ubuntu \u306e\u65b9\u3078\u30bd\u30fc\u30b9\u3092\u79fb\u52d5\u3055\u305b\u308b\u3002\n# g++ -std=c++11 tamesi33a2_cpp.cpp -o tamesi33a2_cpp.exe -lev -lamqpcpp -pthread\ntamesi33a2_cpp.cpp: In lambda function:\ntamesi33a2_cpp.cpp:95:46: error: \u2018bgp_workConsume\u2019 was not declared in this scope\n  auto th1 = std::thread([] { bgp_workConsume(); });\n                                              ^\ntamesi33a2_cpp.cpp: In function \u2018int main()\u2019:\ntamesi33a2_cpp.cpp:104:20: error: \u2018class AMQP::TcpConnection\u2019 has no member named \u2018isConnected\u2019\n  while (connection.isConnected())\n                    ^\ntamesi33a2_cpp.cpp:113:40: error: \u2018enqueue\u2019 was not declared in this scope\n    enqueue(connection, channel, message);\n                                        ^\ntamesi33a2_cpp.cpp: In function \u2018void enqueue(AMQP::TcpConnection&, AMQP::TcpChannel&, std::__cxx11::string)\u2019:\ntamesi33a2_cpp.cpp:166:9: error: \u2018loop\u2019 was not declared in this scope\n  ev_run(loop);\n         ^\ntamesi33a2_cpp.cpp: In function \u2018void bgp_workConsume()\u2019:\ntamesi33a2_cpp.cpp:222:18: error: \u2018bgp_queueName_dequeue\u2019 was not declared in this scope\n  channel.consume(bgp_queueName_dequeue)\n                  ^\n\n\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3002\n//auto* loop = EV_DEFAULT;\nstruct ev_loop* loop = EV_DEFAULT;\n\nauto \u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306f EV_DEFAULT \u306e\u578b\u306f\u3000\u3053\u3046\u66f8\u304f\u306e\u304b\u3002\n\u300cclass-TcpConnection\u300d\uff08docsforge.com\uff09\nhttp://docsforge.com/11/AMQP-CPP/docs/latest/namespace-AMQP/class-TcpConnection/\n\u3053\u3053\u3067\u30bd\u30fc\u30b9\u304c\u8aad\u3081\u308b\u3002\n# g++ -std=c++11 tamesi33a2_cpp.cpp -o tamesi33a2_cpp.exe -lev -lamqpcpp -pthread\ntamesi33a2_cpp.cpp: In lambda function:\ntamesi33a2_cpp.cpp:95:46: error: \u2018bgp_workConsume\u2019 was not declared in this scope\n  auto th1 = std::thread([] { bgp_workConsume(); });\n                                              ^\ntamesi33a2_cpp.cpp: In function \u2018int main()\u2019:\ntamesi33a2_cpp.cpp:114:46: error: \u2018enqueue\u2019 was not declared in this scope\n    enqueue(loop, connection, channel, message);\n                                              ^\n\n\u6b8b\u308a\u306e\u30a8\u30e9\u30fc\u306f\u4f55\u3092\u3057\u305f\u3089\u3044\u3044\u306e\u304b\u3002 scope \u3068\u304b\u66f8\u3044\u3066\u308b\u306a\u3002\n\u95a2\u6570\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u8a66\u3057\u3066\u307f\u308b\u304b\u3002\n\u304a\u3063\u3051\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30fb\u30d7\u30ed\u30b0\u30e9\u30e0\n// OS      : Windows10 : // \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u52d5\u304b\u306a\u3044\n//\n// OS      : Ubuntu 16.04\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//         : Reference : Web site : QueueDeclare http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n//         : Reference : Web site : EventingBasicConsumer https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n//         : Reference : Web site : BasicConsume https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n//         : Reference : Web site : C#\u3067const\u306a\u914d\u5217\u3092\u5b9f\u73fe\u3059\u308b (\u3082\u3063\u3068\u30af\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) http://pgnote.net/?p=885\n//         : Reference : Web site : AMQP-CPP (docsforge.com) http://docsforge.com/11/AMQP-CPP/docs/latest/namespace-AMQP/class-TcpConnection/\n//\n// Program : this\n//         : Compile   : Command  : g++ -std=c++11 tamesi33a2_cpp.cpp -o tamesi33a2_cpp.exe -lev -lamqpcpp -pthread\n//         : Execute   : Command  : // \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\n//                                : ./tamesi33a2_cpp.exe &\n//         : Stop      : Typing   : [Ctrl]+[C]\n//\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u307e\u3059\u3002\n// \u30c7\u30ad\u30e5\u30fc\u306f\u300c1112\u300d\u3001\u30a8\u30f3\u30ad\u30e5\u30fc\u306f\u300c1113\u300d\u30ad\u30e5\u30fc\u306b\u5411\u3051\u3066\u884c\u3044\u307e\u3059\u3002\n// \u6a19\u6e96\u5165\u51fa\u529b\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3001\u753b\u9762\u306b\u306f\u63a5\u7d9a\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n#include <string> // std::string\n#include <iostream> // std::cout\n#include <sstream> // std::ostringstream\n#include <chrono>\n#include <thread> // sleep_for\n#include <future> // thread\n\n// \u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u7528\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\nstatic AMQP::Address ADDRESS{ \"amqp://localhost:5672\" };\n// 0 : enqueue\u7528\u8a2d\u5b9a\n// 1 : dequeue\u7528\u8a2d\u5b9a\n// 2 : deletequeue\u7528\u8a2d\u5b9a\nstatic const int ENQUEUE_INDEX = 0;\nstatic const int DEQUEUE_INDEX = 1;\nstatic const int NUM_INDEX = 2;\nstatic std::string name_queues[] = { \"1113\", \"1112\" };\nstatic std::string lifeSpan_queues[] = { \"duration\", \"duration\" };\n\nstatic void workConsume();\nstatic void enqueue(struct ev_loop* loop, AMQP::TcpConnection& connection, AMQP::TcpChannel& channel, std::string message);\n\n/// <summary>\n/// \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n/// \u3053\u308c\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n/// \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n/// \u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n/// </summary>\nnamespace rotationBuffer\n{\n    const int bufferSize = 100;\n    static std::string buffer[bufferSize] = {};\n    static int bufferCursors[2] = { 0, 0 };\n    const int PUT_INDEX = 0;\n    const int GET_INDEX = 1;\n    static void putMessage(std::string message)\n    {\n        buffer[bufferCursors[PUT_INDEX]] = message;\n        bufferCursors[PUT_INDEX]++;\n        if (!(bufferCursors[PUT_INDEX] < bufferSize))\n        {\n            bufferCursors[PUT_INDEX] = 0;\n        }\n    }\n    static std::string getMessage()\n    {\n        if (\"\" != buffer[bufferCursors[GET_INDEX]])\n        {\n            std::string message = buffer[bufferCursors[GET_INDEX]];\n            buffer[bufferCursors[GET_INDEX]] = \"\";\n            bufferCursors[GET_INDEX]++;\n            if (!(bufferCursors[GET_INDEX] < bufferSize))\n            {\n                bufferCursors[GET_INDEX] = 0;\n            }\n            return message;\n        }\n        return \"\";\n    }\n}\n\nint main()\n{\n    // \u30c7\u30ad\u30e5\u30fc\u306e\u5e38\u6642\u76e3\u8996\u3092\u30b9\u30bf\u30fc\u30c8\n    auto th1 = std::thread([] { workConsume(); });\n\n    // \u30a8\u30f3\u30ad\u30e5\u30fc\u7528\u306e\u63a5\u7d9a\n    //auto* loop = EV_DEFAULT;\n    struct ev_loop* loop = EV_DEFAULT;\n    AMQP::LibEvHandler handler{ loop };\n    AMQP::TcpConnection connection{ &handler, ADDRESS };\n    AMQP::TcpChannel channel{ &connection };\n\n    // \u7121\u9650\u30eb\u30fc\u30d7\n    for (;;)\n    {\n        std::string message = rotationBuffer::getMessage();\n        if (\"\" != message)\n        {\n            // \u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u308b\u3002\n            message += \"daze\";\n\n            // \u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\n            enqueue(loop, connection, channel, message);\n        }\n        std::this_thread::sleep_for(std::chrono::milliseconds(20));\n    }\n\n    // \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u81ea\u5206\u3067\u306f\u63a5\u7d9a\u3092\u5207\u3089\u306a\u3044\u3002\n\n    // th1 \u30b9\u30ec\u30c3\u30c9\u306e\u7d42\u4e86\u3092\u5f85\u3064\n    th1.join();\n    return 0;\n}\n\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u306b\u30a8\u30f3\u30ad\u30e5\u30fc\nstatic void enqueue(struct ev_loop* loop, AMQP::TcpConnection& connection, AMQP::TcpChannel& channel, std::string message)\n{\n    std::string exchange_name = \"myexchange\";\n    std::string routing_key = \"\";\n\n    int lifeSpan = 0;\n    if (\"durable\" == lifeSpan_queues[ENQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::durable;\n    }\n    else if (\"autodelete\" == lifeSpan_queues[ENQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::autodelete;\n    }\n    else if (\"passive\" == lifeSpan_queues[ENQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::passive;\n    }\n    else if (\"exclusive\" == lifeSpan_queues[ENQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::exclusive;\n    }\n\n    channel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n        .onError([](const char* errMsg) {\n        std::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n    });\n\n    channel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n        .onSuccess([&connection, &channel, &exchange_name, &routing_key, &message]() {\n\n        if (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n            std::cerr << \"failed to publish?\\n\";\n        }\n\n        // break in ev loop.\n        connection.close();\n    });\n\n    // \u3053\u306e\u30eb\u30fc\u30d7\u306f\u3001\u30d1\u30d6\u30ea\u30c3\u30b7\u30e5\u5f8c\u306b\u629c\u3051\u308b\n    ev_run(loop);\n}\n\n// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n// startConsume() \u3057\u3066\u304a\u304f\u3053\u3068\u3002\nstatic std::string dequeue() {\n    std::string message;\n\n    while (\"\" == message)\n    {\n        message = rotationBuffer::getMessage();\n    }\n\n    return message;\n}\n\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u76e3\u8996\u3092\u958b\u59cb\nstatic void workConsume()\n{\n    // Connect to the AMQP service.\n    auto *loop = EV_DEFAULT;\n    AMQP::LibEvHandler handler(loop);\n    AMQP::TcpConnection connection(&handler, ADDRESS);\n    AMQP::TcpChannel channel(&connection);\n\n    // I will go to the front of the box named \"1111\".\n    int lifeSpan = 0;\n    if (\"durable\" == lifeSpan_queues[DEQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::durable;\n    }\n    else if (\"autodelete\" == lifeSpan_queues[DEQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::autodelete;\n    }\n    else if (\"passive\" == lifeSpan_queues[DEQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::passive;\n    }\n    else if (\"exclusive\" == lifeSpan_queues[DEQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::exclusive;\n    }\n    channel.declareQueue(name_queues[DEQUEUE_INDEX], lifeSpan);\n\n    // I look inside the box.\n    auto errorCb = [](const char *errMsg) {\n        std::cerr << \"My ID watching failed [\" << errMsg << \"]\" << std::endl;\n    };\n    auto messageCb = [&channel](const AMQP::Message &message, uint64_t deliveryTag, bool redelivered) {\n\n        std::string myString(message.body(), message.bodySize());\n        rotationBuffer::putMessage(myString);\n\n        channel.ack(deliveryTag);\n    };\n    channel.consume(name_queues[DEQUEUE_INDEX])\n        .onReceived(messageCb)\n        .onError(errorCb);\n\n    // I will keep on forever.\n    ev_run(loop, 0);\n\n    // I will not come here.\n    return;\n}\n\n\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u308b\u3002\n\u3053\u308c\u3092\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3002\n./tamesi33a2_cpp.exe &\n\n# ./tamesi33a1_cs.exe\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\ntako\n Enqueue(^q^) tako\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n2\n Please, wait dequeue... Or Press any key to menu.\n [interrupt!] Dequeue(^q^) takodaze\n\ntakodaze \u304c\u8fd4\u3063\u3066\u304d\u305f\u3002C# \u2192 CPP \u2192 C# \u306f \u304a\u3063\u3051\uff01\nC++\u3067 \u30b9\u30ec\u30c3\u30c9\u3092\u66f8\u3044\u305f\u306e\u304c\u52d5\u3044\u3066\u3044\u308b\u3093\u3060\u308d\u3046\u3002\n\n\u6d6e\u304b\u3080\u702c\u306e\u30c7\u30ad\u30e5\u30fc\u76e3\u8996\u3082\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u52d5\u304b\u305d\u3046\n\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb\u30fb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u898b\u3066\u66f8\u304d\u63db\u3048\u3066\u3044\u3053\u3046\u3002\n\n\u540d\u524d\u3092\u5909\u3048\u305f\u3044\ngameserver.hpp \u3092 service_io.hpp \u306b\u540d\u524d\u3092\u5909\u3048\u3066\u3001\u540d\u524d\u7a7a\u9593 service_io \u3092\u4f5c\u308a\u305f\u3044\u3002\n\u305d\u306e\u540d\u524d\u7a7a\u9593\u306e\u4e2d\u306e\u95a2\u6570\u306f service_io::enqueue \u307f\u305f\u3044\u306a\u611f\u3058\u3067\u4f7f\u3048\u308b\u611f\u3058\u3067\u3002\n\n\u901a\u5e38\u306e\u6a19\u6e96\u5165\u51fa\u529b\u304c\u58ca\u308c\u3066\u3044\u306a\u3044\u304b\u78ba\u8a8d\n \u5bfe\u5c40\n    ====\n        usi\n            usiok\n        isready\n            readyok\n        usinewgame\n        position sfen lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1 moves\n        go\n            \u4f8b) bestmove 2g2f ponder 1c1d\n        quit\n\n\u58ca\u308c\u3066\u306f\u306a\u3044\u3002\n\u6539\u9020\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e00\u5fdc\u8cbc\u308a\u4ed8\u3051\u3066\u304a\u304f\u3002\nservice_io.hpp\n#pragma once\n\n#include <string> // std::string\n#include <iostream> // std::cout\n#include <sstream> // std::ostringstream\n#include \"common.hpp\"\n\n\n// #define UBUNTU\n\n\n// \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30fb\u30d7\u30ed\u30bb\u30b9\u7528\u306e\u51fa\u529b\n// #define BGP_COUT std::cout\n// #define BGP_ENDL std::endl\n#define BGP_COUT service_io::oss\n#define BGP_ENDL BGP_ENDL1, BGP_ENDL2\n#define BGP_ENDL1 std::endl\n#define BGP_ENDL2 service_io::enqueue (service_io::oss.str())\n\nnamespace service_io\n{\n    // \u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u51fa\u529b\u3092\u3001\u6587\u5b57\u5217\u306b\u7f6e\u63db\u3059\u308b\u3082\u306e\n    static std::ostringstream oss;\n}\n\n\n#ifdef UBUNTU\n// OS      : Ubuntu 16.04\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//\n// service_io.hpp\n\n// \u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u7528\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\n// \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30fb\u30d7\u30ed\u30bb\u30b9\u306b\u5207\u308a\u66ff\u3048\u3066\u4f7f\u7528\u3059\u308b\u53ef\u80fd\u6027\u3082\u8003\u616e\u3057\u305f\u5165\u51fa\u529bAPI\nnamespace service_io\n{\n    static AMQP::Address ADDRESS{ \"amqp://localhost:5672\" };\n    // 0 : enqueue\u7528\u8a2d\u5b9a\n    // 1 : dequeue\u7528\u8a2d\u5b9a\n    static const int ENQUEUE_INDEX = 0;\n    static const int DEQUEUE_INDEX = 1;\n    static const int NUM_INDEX = 2;\n    static std::string name_queues[] = { \"1113\", \"1112\" };\n    static std::string lifeSpan_queues[] = { \"duration\", \"duration\" };\n\n    /// <summary>\n    /// \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n    /// \u3053\u308c\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n    /// </summary>\n    namespace rotationBuffer\n    {\n        const int bufferSize = 100;\n        static std::string buffer[bufferSize] = {};\n        static int bufferCursors[2] = { 0, 0 };\n        const int PUT_INDEX = 0;\n        const int GET_INDEX = 1;\n        static void putMessage(std::string message)\n        {\n            buffer[bufferCursors[PUT_INDEX]] = message;\n            bufferCursors[PUT_INDEX]++;\n            if (!(bufferCursors[PUT_INDEX] < bufferSize))\n            {\n                bufferCursors[PUT_INDEX] = 0;\n            }\n        }\n        static std::string getMessage()\n        {\n            if (\"\" != buffer[bufferCursors[GET_INDEX]])\n            {\n                std::string message = buffer[bufferCursors[GET_INDEX]];\n                buffer[bufferCursors[GET_INDEX]] = \"\";\n                bufferCursors[GET_INDEX]++;\n                if (!(bufferCursors[GET_INDEX] < bufferSize))\n                {\n                    bufferCursors[GET_INDEX] = 0;\n                }\n                return message;\n            }\n            return \"\";\n        }\n    }\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u306b\u30a8\u30f3\u30ad\u30e5\u30fc\n    // \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30ab\u30f3\u30de\u533a\u5207\u308a\u300c,,,;\u300d\u3067\u4f7f\u308f\u308c\u3001\u4f55\u304b\u6570\u5b57\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u3063\u3066\u5fc5\u7136\u6027\u306f\u306a\u3044\u6570\u5b57 0 \u3092\u8fd4\u3057\u3066\u3044\u308b\n    static int enqueue(std::string message) {\n\n        auto* loop = EV_DEFAULT;\n\n        AMQP::LibEvHandler handler{ loop };\n        AMQP::TcpConnection connection{ &handler, ADDRESS };\n        AMQP::TcpChannel channel{ &connection };\n\n        std::string exchange_name = \"myexchange\";\n        std::string routing_key = \"\";\n\n        int lifeSpan = 0;\n        if (\"durable\" == lifeSpan_queues[ENQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::durable;\n        }\n        else if (\"autodelete\" == lifeSpan_queues[ENQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::autodelete;\n        }\n        else if (\"passive\" == lifeSpan_queues[ENQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::passive;\n        }\n        else if (\"exclusive\" == lifeSpan_queues[ENQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::exclusive;\n        }\n\n        channel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n            .onError([](const char* errMsg) {\n            std::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n        });\n\n        channel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n            .onSuccess([&connection, &channel, &exchange_name, &routing_key, &message]() {\n\n            if (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n                std::cerr << \"failed to publish?\\n\";\n            }\n\n            // break in ev loop.\n            connection.close();\n        });\n\n        // We will monitor until the connection is lost. Execute channel.declareQueue( ... ).\n        ev_run(loop);\n\n        return 0;\n    }\n\n    // service_io::workConsume() \u3092\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u8d70\u3089\u305b\u3066\u304a\u304f\u3053\u3068\u3002\n    static std::string dequeue() {\n        std::string message;\n\n        while (\"\" == message)\n        {\n            message = rotationBuffer::getMessage();\n        }\n\n        return message;\n    }\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u76e3\u8996\u3092\u958b\u59cb\n    static void workConsume()\n    {\n        // Connect to the AMQP service.\n        auto *loop = EV_DEFAULT;\n        AMQP::LibEvHandler handler(loop);\n        AMQP::TcpConnection connection(&handler, ADDRESS);\n        AMQP::TcpChannel channel(&connection);\n\n        // I will go to the front of the box named \"1111\".\n        int lifeSpan = 0;\n        if (\"durable\" == lifeSpan_queues[DEQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::durable;\n        }\n        else if (\"autodelete\" == lifeSpan_queues[DEQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::autodelete;\n        }\n        else if (\"passive\" == lifeSpan_queues[DEQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::passive;\n        }\n        else if (\"exclusive\" == lifeSpan_queues[DEQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::exclusive;\n        }\n        channel.declareQueue(name_queues[DEQUEUE_INDEX], lifeSpan);\n\n        // I look inside the box.\n        auto errorCb = [](const char *errMsg) {\n            std::cerr << \"My ID watching failed [\" << errMsg << \"]\" << std::endl;\n        };\n        auto messageCb = [&channel](const AMQP::Message &message, uint64_t deliveryTag, bool redelivered) {\n\n            std::string myString(message.body(), message.bodySize());\n            rotationBuffer::putMessage(myString);\n\n            channel.ack(deliveryTag);\n        };\n        channel.consume(name_queues[DEQUEUE_INDEX])\n            .onReceived(messageCb)\n            .onError(errorCb);\n\n        // I will keep on forever.\n        ev_run(loop, 0);\n\n        // I will not come here.\n        return;\n    }\n}\n\n#else\n\n// \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30fb\u30d7\u30ed\u30bb\u30b9\u306b\u5207\u308a\u66ff\u3048\u3066\u4f7f\u7528\u3059\u308b\u53ef\u80fd\u6027\u3082\u8003\u616e\u3057\u305f\u5165\u51fa\u529bAPI\nnamespace service_io\n{\n    static int enqueue(std::string message) {\n        std::cout << IOLock << message << std::endl << IOUnlock;\n        oss.str(std::string());// \u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u3066\u30af\u30ea\u30a2\u30fc\u3059\u308b\n        return 0;\n    }\n\n    static std::string dequeue() {\n        std::string cmd;\n        if (!std::getline(std::cin, cmd))\n        {\n            cmd = \"quit\";\n        }\n        return cmd;\n    }\n}\n#endif\n\nclass ServiceIo\n{\npublic:\n    ServiceIo();\n    ~ServiceIo();\n};\n\nservice_io.cpp\n//#include \"stdafx.h\"\n#include \"service_io.hpp\"\n\nServiceIo::ServiceIo()\n{\n}\n\nServiceIo::~ServiceIo()\n{\n}\n\nusi.cpp \u629c\u7c8b\nvoid Searcher::doUSICommandLoop(int argc, char* argv[]) {\n\n#if UBUNTU\n    // \u30c7\u30ad\u30e5\u30fc\u306e\u5e38\u6642\u76e3\u8996\u3092\u30b9\u30bf\u30fc\u30c8\n    auto th1 = std::thread([] { service_io::workConsume(); });\n#endif\n\n    bool dialogue = false;\n    // \u300c./apery\u300d\u306e\u3088\u3046\u306b\u5f15\u6570\u7121\u3057\u3067\u6253\u9375\u3057\u3066\u5b9f\u884c\u3055\u308c\u305f\u5834\u5408\u306b\u9650\u308a\u3001\u306a\u3093\u3069\u3082\u6a19\u6e96\u5165\u529b\u3092\u5f85\u3064\u3002\n    if (argc == 1)\n    {\n        dialogue = true;\n    }\n    bool evalTableIsRead = false;\n    Position pos(DefaultStartPositionSFEN, threads.main(), thisptr);\n\n    std::string cmd;\n    std::string token;\n\n    for (int i = 1; i < argc; ++i)\n    {\n        cmd += std::string(argv[i]) + \" \";\n    }\n\n    do {\n        // \u6587\u5b57\u304c\u6253\u305f\u308c\u305f\u3089\u305d\u306e\u6587\u5b57\u3092\u3001\u7a7a\u6587\u5b57\u3092\u6253\u305f\u308c\u305f\u3089 \"quit\" \u6271\u3044\u3068\u3059\u308b\u3002\n        if (dialogue)\n        {\n            cmd = service_io::dequeue();\n        }\n\n        // \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6700\u521d\u306e1\u30c8\u30fc\u30af\u30f3\u3092\u62fe\u3046\n        std::istringstream ssCmd(cmd);\n        ssCmd >> std::skipws >> token;\n\n        if (token == \"--msgqueue\") {\n#if UBUNTU\n            ssCmd >> service_io::name_queues[ENQUEUE_INDEX];\n            ssCmd >> service_io::lifeSpan_queues[ENQUEUE_INDEX];\n            ssCmd >> service_io::name_queues[DEQUEUE_INDEX];\n            ssCmd >> service_io::lifeSpan_queues[DEQUEUE_INDEX];\n            dialogue = true;\n#else\n            std::cerr << \"Command line parameter error : \\\"--msgqueue\\\" option for UBUNTU.\";\n#endif\n        }\n        else if (token == \"quit\" || token == \"stop\" || token == \"ponderhit\" || token == \"gameover\") {\n            if (token != \"ponderhit\" || signals.stopOnPonderHit) {\n                signals.stop = true;\n                threads.main()->startSearching(true);\n            }\n            else\n                limits.ponder = false;\n            if (token == \"ponderhit\" && limits.moveTime != 0)\n                limits.moveTime += timeManager.elapsed();\n        }\n        else if (token == \"go\") go(pos, ssCmd);\n        else if (token == \"position\") setPosition(pos, ssCmd);\n        else if (token == \"usinewgame\"); // isready \u3067\u6e96\u5099\u306f\u51fa\u6765\u305f\u306e\u3067\u3001\u5bfe\u5c40\u958b\u59cb\u6642\u306b\u7279\u306b\u3059\u308b\u4e8b\u306f\u306a\u3044\u3002\n        else if (token == \"usi\") SYNCCOUT << \"id name \" << std::string(options[\"Engine_Name\"])\n            << \"\\nid author Hiraoka Takuya\"\n            << \"\\n\" << options\n            << \"\\nusiok\" << SYNCENDL;\n        else if (token == \"isready\") { // \u5bfe\u5c40\u958b\u59cb\u524d\u306e\u6e96\u5099\u3002\n            tt.clear();\n            threads.main()->previousScore = ScoreInfinite;\n            if (!evalTableIsRead) {\n                // \u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3066 Evaluator::init() \u3092\u547c\u3093\u3060\u76f4\u5f8c\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7834\u68c4\u3059\u308b\u3002\n                // \u8a55\u4fa1\u95a2\u6570\u306e\u6b21\u5143\u4e0b\u3052\u3092\u3057\u305f\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u5206\u306e\u30e1\u30e2\u30ea\u304c\u7121\u99c4\u306a\u70ba\u3001\n                std::unique_ptr<Evaluator>(new Evaluator)->init(Evaluator::evalDir, true);\n                evalTableIsRead = true;\n            }\n            SYNCCOUT << \"readyok\" << SYNCENDL;\n        }\n        else if (token == \"setoption\") setOption(ssCmd);\n        else if (token == \"write_eval\") { // \u5bfe\u5c40\u3067\u4f7f\u3046\u70ba\u306e\u8a55\u4fa1\u95a2\u6570\u30d0\u30a4\u30ca\u30ea\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\u3002\n            if (!evalTableIsRead)\n                std::unique_ptr<Evaluator>(new Evaluator)->init(Evaluator::evalDir, true);\n            Evaluator::writeSynthesized(Evaluator::evalDir);\n        }\n#if defined LEARN\n        else if (token == \"l\") {\n            auto learner = std::unique_ptr<Learner>(new Learner);\n            learner->learn(pos, ssCmd);\n        }\n        else if (token == \"make_teacher\") {\n            if (!evalTableIsRead) {\n                std::unique_ptr<Evaluator>(new Evaluator)->init(Evaluator::evalDir, true);\n                evalTableIsRead = true;\n            }\n            make_teacher(ssCmd);\n        }\n        else if (token == \"use_teacher\") {\n            if (!evalTableIsRead) {\n                std::unique_ptr<Evaluator>(new Evaluator)->init(Evaluator::evalDir, true);\n                evalTableIsRead = true;\n            }\n            use_teacher(pos, ssCmd);\n        }\n        else if (token == \"check_teacher\") {\n            check_teacher(ssCmd);\n        }\n        else if (token == \"print\") printEvalTable(SQ88, f_gold + SQ78, f_gold, false);\n#endif\n#if !defined MINIMUL\n        // \u4ee5\u4e0b\u3001\u30c7\u30d0\u30c3\u30b0\u7528\n        else if (token == \"bench\") {\n            if (!evalTableIsRead) {\n                std::unique_ptr<Evaluator>(new Evaluator)->init(Evaluator::evalDir, true);\n                evalTableIsRead = true;\n            }\n            benchmark(pos);\n        }\n        else if (token == \"key\") SYNCCOUT << pos.getKey() << SYNCENDL;\n        else if (token == \"tosfen\") SYNCCOUT << pos.toSFEN() << SYNCENDL;\n        else if (token == \"eval\") std::cout << evaluateUnUseDiff(pos) / FVScale << std::endl;\n        else if (token == \"d\") pos.print();\n        else if (token == \"s\") measureGenerateMoves(pos);\n        else if (token == \"t\") std::cout << pos.mateMoveIn1Ply().toCSA() << std::endl;\n        else if (token == \"b\") makeBook(pos, ssCmd);\n#endif\n        else                           SYNCCOUT << \"unknown command: \" << cmd << SYNCENDL;\n    } while (token != \"quit\" && dialogue);\n\n#if UBUNTU\n    // th1 \u30b9\u30ec\u30c3\u30c9\u306e\u7d42\u4e86\u3092\u5f85\u3064\n    th1.join();\n#endif\n\n    threads.main()->waitForSearchFinished();\n}\n\n\u3053\u308c\u3060\u3051\u3060\u3063\u305f\u308d\u3046\u304b\uff1f\nfind . \\( -name \\Makefile -o -name \\*.hpp -o -name \\*.cpp -o -name \\*.sfen -o -name \\*.txt \\) -type f | xargs -n 10 nkf -Lu --overwrite\n\n\u6539\u884c\u306e\u5909\u63db\u306f\u3053\u308c\u3002\u3069\u3063\u304b\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u305f\u3044\u304c\u3002\nnano service_io.hpp\n\n\u3053\u3046\u3057\u3066\u3001\n // #define UBUNTU\n\n\u306e\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3059\u3002\n\n\u30d8\u30c3\u30c0\u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u518d\u8aad\u8fbc\u307f\u9632\u6b62\nIn file included from bitboard.hpp:25:0,\n                 from main.cpp:30:\nservice_io.hpp:9:0: warning: \"UBUNTU\" redefined\n #define UBUNTU\n ^\n\n\u3042\u30fc\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u4f55\u5ea6\u3082\u8aad\u8fbc\u3093\u3067\u308b\u304b\u3082\u3002\n#pragma once\n\nC++11 \u3058\u3083\u3053\u308c\u306f\u52b9\u304b\u306a\u3044\u3093\u3060\u308d\u3046\u304b\uff1f\n#ifndef APERY_SERVICE_IO_HPP\n#define APERY_SERVICE_IO_HPP\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u5192\u982d\u306b\u3053\u3046\u66f8\u3044\u3066\u3001\n#endif // #ifndef APERY_SERVICE_IO_HPP\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u3053\u3046\u66f8\u3053\u3046\u3002\n\u3044\u3084\u3001\u305d\u3046\u3067\u306f\u7121\u304f\u3066 Makefile \u306b -DUBUNTU \u3068\u66f8\u304d\u8db3\u3057\u305f\u3093\u3058\u3083\u306a\u304b\u3063\u305f\u304b\u3002\nservice_io.hpp\n// #define UBUNTU\n\n\u3084\u3063\u3071\u3000\u3053\u3046\u3059\u308b\u3002\nusi.cpp: In static member function \u2018static void Searcher::doUSICommandLoop(int, char**)\u2019                    :\nusi.cpp:1061:37: error: \u2018ENQUEUE_INDEX\u2019 was not declared in this scope\n    ssCmd >> service_io::name_queues[ENQUEUE_INDEX];\n                                     ^\nusi.cpp:1061:37: note: suggested alternative:\nIn file included from usi.cpp:22:0:\nservice_io.hpp:57:19: note:   \u2018service_io::ENQUEUE_INDEX\u2019\n  static const int ENQUEUE_INDEX = 0;\n                   ^\nusi.cpp:1063:37: error: \u2018DEQUEUE_INDEX\u2019 was not declared in this scope\n    ssCmd >> service_io::name_queues[DEQUEUE_INDEX];\n                                     ^\nusi.cpp:1063:37: note: suggested alternative:\nIn file included from usi.cpp:22:0:\nservice_io.hpp:58:19: note:   \u2018service_io::DEQUEUE_INDEX\u2019\n  static const int DEQUEUE_INDEX = 1;\n                   ^\n\n\u3053\u308c\u3001\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u629c\u3051\u304b\uff1f\n\u305d\u3046\u3060\u3063\u305f\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u3063\u305f\u3002\n# mv apery ../bin/apery\n# cd ../bin\n# ./apery --msgqueue 1114 durable 1115 durable &\n\n1114 \u3068\u30011115\u3001\u307e\u305a\u306f\u8a66\u3057\u3067 1112 \u3068 1113 \u3067\u3044\u3044\u304b\u3002\n            a1              a2\n                \u2192 1112 \u2192\n                \u2190 1113 \u2190\n\n                \u2192 1115 \u2192\n                \u2190 1114 \u2190\n\n\u56f3\u306b\u3059\u308b\u3068\u3001\u3053\u3046\u304b\u3002\u306a\u3093\u304b\u3059\u3063\u304d\u308a\u3057\u306a\u3044\u306a\u3002\n            a1              a2\n                \u2192 1112 \u2192\n                \u2190 1113 \u2190\n\n                \u2192 1114 \u2192\n                \u2190 1115 \u2190\n\n\u3053\u3046\u5909\u3048\u3088\u3046\u3002\n# ./apery --msgqueue 1113 durable 1112 durable &\n[2] 32479\n# My ID watching failed [Channel is in error state]\n\n\u30a8\u30e9\u30fc\u304c\u8fd4\u3063\u3066\u304f\u308b\u3060\u3051\u3001\u524d\u9032\u3060\u306a\u3002\n        auto errorCb = [](const char *errMsg) {\n            std::cerr << \"My ID watching failed [\" << errMsg << \"] lifeSpan_queues[\" << DEQUEUE_INDEX << \"]=[\" << lifeSpan_queues[DEQUEUE_INDEX] << \"]\" << std::endl;\n        };\n\n\u3053\u3046\u66f8\u304f\u3068\u3001\n# ./apery --msgqueue 1113 durable 1112 durable &\n[3] 32746\n# My ID watching failed [Channel is in error state] lifeSpan_queues[1]=[durable]\n\n\u3053\u3046\u306a\u308b\u3002\n\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u4f55\u304b\u30c0\u30e1\u306a\u306e\u304b\uff1f\n\u30ad\u30e5\u30fc\u3092\u5909\u3048\u3066\u307f\u308b\u304b\u3002\n# ./apery --msgqueue 1115 durable 1114 durable &\n[4] 410\n\n\u4eca\u5ea6\u306f\u30a8\u30e9\u30fc\u5fdc\u7b54\u3082\u8fd4\u3063\u3066\u3053\u306a\u3044\u3002\u3058\u3083\u3042\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u3088\u3046\u3002\n# jobs\n[1]-  Running                 ./tamesi33a2_cpp.exe &  (wd: /home/\u2605user/shogi/cpp_service)\n[4]+  Running                 ./apery --msgqueue 1115 durable 1114 durable &\n\n\u306a\u3093\u304b\u4e0a\u306e\u3084\u3064\u304c\u3000\u5e72\u6e09\u3057\u3066\u306a\u3044\u304b\uff1f\n# kill %1\n\n\n\u30c6\u30b9\u30c8\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1114\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1115\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n<---- [interrupt!] Dequeue(^q^) usi\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? >\n\n\u306a\u3093\u304b\u300cusi\u300d\u304c\u98db\u3093\u3067\u304d\u305f\u306e\u304b\u3002\u65e2\u306b\u30ad\u30e5\u30fc\u306b\u5165\u3063\u3066\u305f\u3068\u304b\u3002\n\u3058\u3083\u3042\u300cusi\u300d\u3092\u9001\u3063\u3066\u307f\u308b\u304b\u3002\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > usi\n Enqueue(^q^) usi\napery: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\nEnqueue? >\n\n\u6d6e\u304b\u3080\u702c\u304b\u3089 \u30a8\u30e9\u30fc\u304c\u8fd4\u3063\u3066\u304d\u305f\u3002\u30eb\u30fc\u30d7\u304c\u518d\u5e30\u7684\u306a\u5b9f\u884c\u3067\u3000\u3046\u30fc\u3093\uff1f\n\u30a8\u30e9\u30fc\u304c\u8fd4\u3063\u3066\u304f\u308b\u3060\u3051\u9032\u6b69\u3060\u306a\u3002\n\u300cIs that ev_run()/ev_loop() inhibited in multiple thread of current libev?\u300d\uff08http://lists.schmorp.de\uff09\nhttp://lists.schmorp.de/pipermail/libev/2011q4/001659.html\nev_run( ) \u304c\u518d\u5e30\u4e2d\u306b\u958b\u653e\u3057\u3066\u3044\u308b\u306e\u304c\u691c\u51fa\u3055\u308c\u308b\u3068\u3044\u3046\u306e\u306f\u3000\u3069\u3046\u3044\u3046\u3053\u3068\u306a\u306e\u304b\u3002\n\u518d\u5e30\u3057\u3066\u3044\u308b\u306e\u304b\uff1f\n\u30a8\u30f3\u30ad\u30e5\u30fc\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308b\u3002\n        channel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n            .onSuccess([&connection, &channel, &exchange_name, &routing_key, &message]() {\n\n            if (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n                std::cerr << \"failed to publish?\\n\";\n            }\n\n            // break in ev loop.\n            connection.close();\n        });\n\nconnection.close(); \u3067\u3001\u305f\u3057\u304b\u306b \u63a5\u7d9a\u3092\u958b\u653e \u3057\u3066\u3044\u308b\u3002\n\u3058\u3083\u3042\u3001\u30c7\u30ad\u30e5\u30fc\u3068\u30a8\u30f3\u30ad\u30e5\u30fc\u3067\u3001\u63a5\u7d9a\u306f\u5225\u306b\u884c\u3063\u305f\u65b9\u304c\u3044\u3044\u306e\u304b\u3002\n\u66f8\u304d\u76f4\u3059\u3002\n\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u30af\u30ed\u30fc\u30ba\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u3088\u304f\u78ba\u8a8d\u3002\n\u300cAMQP-CPP/tests/libev.cpp\u300d\uff08CopernicaMarketingSoftware/AMQP-CPP\uff09\nhttps://github.com/CopernicaMarketingSoftware/AMQP-CPP/blob/master/tests/libev.cpp\nonSuccess \u306e\u4e2d\u3067\u5207\u65ad\u3057\u3066\u306a\u3044\u304b\uff1f\n        channel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n            .onError([](const char* errMsg) {\n                std::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n            });\n\n        channel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n            .onSuccess([&connection, &channel, &exchange_name, &routing_key, &message]() {\n\n                if (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n                    std::cerr << \"failed to publish?\\n\";\n                }\n\n                // break in ev loop.\n                connection.close();\n            });\n\n\u73fe\u72b6\u3001onSuccess \u306e\u4e2d\u3067\u5207\u65ad\u3057\u3066\u3044\u308b\u304c\u3001bindQueue \u3058\u3083\u306a\u304f\u3066 declareQueue \u306e onSuccess \u306e\u4e2d\u3067\u5207\u65ad\u3057\u305f\u65b9\u304c\u3044\u3044\u3093\u3060\u308d\u3046\u304b\uff1f\n        channel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n            .onSuccess([&connection](const std::string &queueName, uint32_t messagecount, uint32_t consumercount) {\n                std::cout << \"declared queue onSuccess queueName=[\" << queueName << \"] messagecount=[\" << messagecount << \"] consumercount=[\" << consumercount << \"]\" << std::endl;\n                // break in ev loop.\n                connection.close();\n            })\n            .onError([](const char* errMsg) {\n                std::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n            });\n\n        channel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n            .onSuccess([ &channel, &exchange_name, &routing_key, &message]() {\n                // &connection,\n\n                if (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n                    std::cerr << \"failed to publish?\\n\";\n                }\n\n                //// break in ev loop.\n                //connection.close();\n            });\n\n\u3053\u3093\u306a\u3093\u3067\u3044\u3044\u3093\u3060\u308d\u3046\u304b\uff1f\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1114\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1115\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > usi\napery: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n Enqueue(^q^) usi\n\n\u30c0\u30e1\u306a\u3088\u3046\u3060\u3002\u3053\u306e\u30a8\u30e9\u30fc\u306f\u4f55\u306a\u306e\u304b\u3002\n# ps aux | grep apery\nroot      1582  0.0  0.0  12936   988 pts/8    S+   14:11   0:00 grep --color=auto apery\n\n\u306a\u3093\u3089\u304b\u306e\u7406\u7531\u3067\u843d\u3061\u3066\u3044\u3066\u3001\u305d\u308c\u3067\u30eb\u30fc\u30d7\u3092\u629c\u3051\u3066\u3044\u308b\u306e\u3060\u308d\u3046\u304b\uff1f\u3069\u3053\u304b\u306b\u30a8\u30e9\u30fc\u30ed\u30b0\u306f\u5410\u304b\u308c\u3066\u3044\u306a\u3044\u3060\u308d\u3046\u304b\uff1f\n# ls -l\ntotal 4076096\ndrwxr-xr-x 2 root root       4096 Mar 12 07:09 20161007\n-rwxr-xr-x 1 root root    1911208 Mar 13 14:04 apery\n-rw-r--r-- 1 root root       1531 Mar 12 05:48 benchmark.sfen\n-rw-r--r-- 1 root root 4171912806 Mar 12 05:49 log1\n-rw------- 1 root root          0 Mar 12 05:49 nohup.out\n\nlog1 \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306f\u30d0\u30b0\u3063\u3066\u305d\u3046\u3060\u3002\u6d88\u305d\u3046\u304b\u3002\nrm log1\n\nroot@tk2-217-18401:/home/\u2605user/shogi/ukamuse_sdt4_child4/bin# ./apery\nusi\nisready\nusinewgame\nposition sfen lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1 moves\ngo\nquit\n\n\n\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30fb\u30d7\u30ed\u30bb\u30b9\u5c02\u7528\u306b\u6539\u9020\u3057\u305f\u306e\u3067\u3001\u5fdc\u7b54\u306f\u753b\u9762\u306b\u51fa\u3066\u3053\u306a\u3044\u3002\n\u305d\u308c\u306b\u3057\u3066\u3082\u3001quit \u3068\u6253\u3063\u3066\u3082\u51fa\u3066\u3053\u306a\u3044\u3093\u3060\u306a\u3002\n\u305d\u3046\u3044\u3048\u3070\u3001\u6a19\u6e96\u5165\u51fa\u529b\u306e\u4e21\u65b9\u3092\u898b\u3066\u306a\u3044\u3093\u3060\u3063\u305f\u3002\n# ps aux | grep apery\nroot      1718 97.9 14.3 1481912 145836 pts/8  Rl   14:20   0:25 ./apery --msgqueue 1115 durable 1114 durable\nroot      1733  0.0  0.0  12936   984 pts/8    S+   14:20   0:00 grep --color=auto apery\n\n\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u3066\u5b9f\u884c\u3059\u308c\u3070\u3088\u304b\u3063\u305f\u306e\u304b\uff1f\n# ./apery --msgqueue 1115 durable 1114 durable 2> ./apery.err.log &\n[2] 1761\n# jobs\n[2]+  Running                 ./apery --msgqueue 1115 durable 1114 durable 2> ./apery.err.log &\n\n\u3053\u308c\u3067\u3069\u3046\u304b\uff1f\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1114\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1115\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > usi\n Enqueue(^q^) usi\nEnqueue? >\n\n\u30a8\u30e9\u30fc\u51fa\u529b\u304c\u3000\u3069\u3063\u304b\u3044\u3063\u305f\u3060\u3051\u3058\u3083\u306a\u3044\u304b\uff1f\n# rabbitmqctl list_queues\nListing queues ...\n1112    0\n1111    0\n1113    0\nmyqueue 25\n1115    0\n1114    0\n\n# ls\n20161007  apery  apery.err.log  benchmark.sfen  nohup.out\n# nano log1\n\napery: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n\n\u307e\u3042\u3001\u305d\u3046\u3044\u3046\u3053\u3068\u306a\u306e\u3060\u3063\u305f\u3002\u610f\u5473\u306a\u3044\u3002\n\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\u3067\u3082\u3000\u3088\u304f\u8aad\u3080\u304b\u3002\n\u3053\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f ev.c \u30d5\u30a1\u30a4\u30eb\u306e\u30a2\u30b5\u30fc\u30c8\u304c\u51fa\u3057\u3066\u3044\u308b\u306e\u304b\u3002\n\u81ea\u5206\u306e\u30b3\u30fc\u30c9\u3067\u3082\u30a8\u30e9\u30fc\u3092\u62fe\u3048\u306a\u3044\u304b\u3002\n\u4f8b\u3048\u3070\u3000\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n        AMQP::TcpChannel channel{ &connection };\n\n        channel.onError([](const char *errMsg) {\n            // report error\n            std::cerr << \"(^q^)channel error: \" << errMsg << std::endl;\n        });\n\n\u5909\u308f\u308a\u7121\u3057\u3002\n        channel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n            .onSuccess([ &channel, &exchange_name, &routing_key, &message]() {\n                // &connection,\n\n                if (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n                    std::cerr << \"failed to publish?\\n\";\n                }\n\n                //// break in ev loop.\n                //connection.close();\n            })\n            .onError([](const char *errMsg) {\n                // report error\n                std::cerr << \"(^q^)channel bindQueue error: \" << errMsg << std::endl;\n            });\n\n\u3058\u3083\u3042 bindQueue \u306b\u3082 onError \u3092\u4ed8\u3051\u308c\u306a\u3044\u3060\u308d\u3046\u304b\uff1f\n# ./apery --msgqueue 1115 durable 1114 durable &\n[1] 2632\nroot@tk2-217-18401:/home/\u2605user/shogi/ukamuse_sdt4_child4/bin# apery: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n\n[1]+  Aborted                 ./apery --msgqueue 1115 durable 1114 durable\n\n\u5b9f\u884c\u3057\u305f\u76f4\u5f8c\u306b\u843d\u3061\u305f\u3088\u3046\u306a\u3002\n# ./apery --msgqueue 1115 durable 1114 durable &\n[1] 2655\nroot@tk2-217-18401:/home/\u2605user/shogi/ukamuse_sdt4_child4/bin# ps aux | grep apery\nroot      2655  100 14.3 1481928 145852 pts/8  Rl   14:55   0:14 ./apery --msgqueue 1115 durable 1114 durable\nroot      2663  0.0  0.0  12936   988 pts/8    S+   14:56   0:00 grep --color=auto apery\n\n\u3082\u3046\uff11\u56de\u3084\u3063\u305f\u3089\u5927\u4e08\u592b\u3060\u3063\u305f\u3002\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > usi\napery: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n Enqueue(^q^) usi\n\n\u305c\u3093\u305c\u3093\u5909\u308f\u3089\u3093\u3002\u30b0\u30b0\u308b\u304b\u3002\n\u300clibev: ev_loop recursion during release detected in RPC\u300d\uff08Apache\uff09\nhttps://issues.apache.org/jira/browse/KUDU-12\n\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u308b\u3068\u3044\u3046\u306e\u306f\u3042\u308b\u3093\u3060\u304c\u3001\u89e3\u6c7a\u65b9\u6cd5\u304c\u66f8\u3044\u3066\u306a\u3044\u306e\u306a\u3002\n\u300clibev\u300d\uff08dirtysalt.github.io\uff09\nhttps://dirtysalt.github.io/libev.html\n\u30bd\u30fc\u30b9\u3092\u898b\u305b\u3089\u308c\u3066\u3082\u3001\u3084\u3063\u3071\u308a\u89e3\u6c7a\u65b9\u6cd5\u304c\u5206\u304b\u3089\u3093\u3002\n\u300cIs that ev_run()/ev_loop() inhibited in multiple thread of   current libev?\u300d\uff08http://lists.schmorp.de\uff09\nhttp://lists.schmorp.de/pipermail/libev/2011q4/001671.html\n\u300cExceptions when a TCPSocket connection timed out in and out of the Reactor using Kernel.timeout #97\u300d\uff08celluloid/celluloid-io\uff09\nhttps://github.com/celluloid/celluloid-io/issues/97\n\u30ab\u30fc\u30cd\u30eb\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\uff1f\n\u300c\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30fb\u30b5\u30fc\u30d0\u30fc\u306e\u7d44\u7e54\u5185libev\u306f\u3067\u518d\u5e30\uff08EVBREAK_RECURSE\uff09\u300d\uff08stack overflow\uff09\nhttp://ru.stackoverflow.com/questions/173685/%D0%A0%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9-%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2-%D0%B2-libev-evbreak-recurse-%D0%BF%D1%80%D0%B8-%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D1%81%D0%B5%D1%80%D0%B2%D0%B5\n\u30ed\u30b7\u30a2\u8a9e\u3092\u30b0\u30fc\u30b0\u30eb\u7ffb\u8a33\u3002\n\u300clibev \u307e\u3068\u3081\u300d\uff08Qiita\uff09\nhttp://qiita.com/janus_wel/items/51bbd7517ab237a0b65c\n\u300clibev\u306b\u3088\u308b\u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300d\uff08Qiita\uff09\nhttp://qiita.com/0xfffffff7/items/c5287067623fdbd2c3cb\n\u3069\u3046\u3059\u3063\u304b\u306a\u30fc\u3002\n\ntamesi33a2_cpp.exe \u3067\u305d\u3093\u306a\u30a8\u30e9\u30fc\u3042\u3063\u305f\u3060\u308d\u3046\u304b\u3002\n# ./tamesi33a2_cpp.exe &\n\n\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3057\u3066\u3001\n# ./tamesi34_cs.exe\n\n\u305f\u3081\u3057\uff13\uff14\u3067\u30a2\u30af\u30bb\u30b9\u3002\na1            a2 \n   -> 1112 ->\n   <- 1113 <-\n\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1112\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1113\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\nUnhandled Exception:\nRabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=\"PRECONDITION_FAILED - inequivalent arg 'durable' for queue '1113' in vhost '/': received 'true' but current is 'false'\", classId=50, methodId=10, cause=\n  at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply () <0x409c15e0 + 0x00103> in <filename unknown>:0\n  at RabbitMQ.Client.Impl.ModelBase.ModelRpc (RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, System.Byte[] body) <0x409bf4b0 + 0x000f9> in <filename unknown>:0\n  at RabbitMQ.Client.Framing.Impl.v0_8.Model.QueueDeclare (System.String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary arguments) <0x409c3810 + 0x00113> in <filename unknown>:0\n  at UsagiMQ.Program.GetChannel (Int32 index) <0x409851f0 + 0x00138> in <filename unknown>:0\n  at UsagiMQ.Program.StartConsume (System.String name_queue, Int32 lifeSpan_queue) <0x40985110 + 0x0002b> in <filename unknown>:0\n  at UsagiMQ.Program.Main (System.String[] args) <0x40980d50 + 0x002eb> in <filename unknown>:0\n[ERROR] FATAL UNHANDLED EXCEPTION: RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=\"PRECONDITION_FAILED - inequivalent arg 'durable' for queue '1113' in vhost '/': received 'true' but current is 'false'\", classId=50, methodId=10, cause=\n  at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply () <0x409c15e0 + 0x00103> in <filename unknown>:0\n  at RabbitMQ.Client.Impl.ModelBase.ModelRpc (RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, System.Byte[] body) <0x409bf4b0 + 0x000f9> in <filename unknown>:0\n  at RabbitMQ.Client.Framing.Impl.v0_8.Model.QueueDeclare (System.String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary arguments) <0x409c3810 + 0x00113> in <filename unknown>:0\n  at UsagiMQ.Program.GetChannel (Int32 index) <0x409851f0 + 0x00138> in <filename unknown>:0\n  at UsagiMQ.Program.StartConsume (System.String name_queue, Int32 lifeSpan_queue) <0x40985110 + 0x0002b> in <filename unknown>:0\n  at UsagiMQ.Program.Main (System.String[] args) <0x40980d50 + 0x002eb> in <filename unknown>:0\n\n\u305d\u3046\u3044\u3048\u3070\u30011113 \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3093\u3060\u3063\u305f\u3002\n\u30ad\u30e5\u30fc\u540d\u3092 1114\u30011115 \u306b\u5909\u3048\u308c\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3092\u4ed8\u3051\u305f\u3044\u3002\n// OS      : Windows10 : // \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u52d5\u304b\u306a\u3044\n//\n// OS      : Ubuntu 16.04\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//         : Reference : Web site : QueueDeclare http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n//         : Reference : Web site : EventingBasicConsumer https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n//         : Reference : Web site : BasicConsume https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n//         : Reference : Web site : C#\u3067const\u306a\u914d\u5217\u3092\u5b9f\u73fe\u3059\u308b (\u3082\u3063\u3068\u30af\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) http://pgnote.net/?p=885\n//         : Reference : Web site : AMQP-CPP (docsforge.com) http://docsforge.com/11/AMQP-CPP/docs/latest/namespace-AMQP/class-TcpConnection/\n//\n// Program : this\n//         : Compile   : Command  : g++ -std=c++11 tamesi33a2_cpp.cpp -o tamesi33a2_cpp.exe -lev -lamqpcpp -pthread\n//         : Execute   : Command  : // \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\n//                                : ./tamesi33a2_cpp.exe --msgqueue 1115 durable 1114 durable &\n//         : Stop      : Typing   : [Ctrl]+[C]\n//\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u307e\u3059\u3002\n// \u30c7\u30ad\u30e5\u30fc\u306f\u300c1112\u300d\u3001\u30a8\u30f3\u30ad\u30e5\u30fc\u306f\u300c1113\u300d\u30ad\u30e5\u30fc\u306b\u5411\u3051\u3066\u884c\u3044\u307e\u3059\u3002\n// \u6a19\u6e96\u5165\u51fa\u529b\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3001\u753b\u9762\u306b\u306f\u63a5\u7d9a\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n#include <string> // std::string\n#include <iostream> // std::cout\n#include <sstream> // std::ostringstream\n#include <chrono>\n#include <thread> // sleep_for\n#include <future> // thread\n\n// \u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u7528\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\n//using namespace service_io;\n//static void service_io::workConsume();\n//static void service_io::enqueue(struct ev_loop* loop, AMQP::TcpConnection& connection, AMQP::TcpChannel& channel, std::string message);\n\nnamespace service_io \n{\n    static AMQP::Address ADDRESS{ \"amqp://localhost:5672\" };\n    // 0 : enqueue\u7528\u8a2d\u5b9a\n    // 1 : dequeue\u7528\u8a2d\u5b9a\n    static const int ENQUEUE_INDEX = 0;\n    static const int DEQUEUE_INDEX = 1;\n    static const int NUM_INDEX = 2;\n    static std::string name_queues[] = { \"1113\", \"1112\" };\n    static std::string lifeSpan_queues[] = { \"duration\", \"duration\" };\n\n    /// <summary>\n    /// \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n    /// \u3053\u308c\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n    /// </summary>\n    namespace rotationBuffer\n    {\n        const int bufferSize = 100;\n        static std::string buffer[bufferSize] = {};\n        static int bufferCursors[2] = { 0, 0 };\n        const int PUT_INDEX = 0;\n        const int GET_INDEX = 1;\n        static void putMessage(std::string message)\n        {\n            buffer[bufferCursors[PUT_INDEX]] = message;\n            bufferCursors[PUT_INDEX]++;\n            if (!(bufferCursors[PUT_INDEX] < bufferSize))\n            {\n                bufferCursors[PUT_INDEX] = 0;\n            }\n        }\n        static std::string getMessage()\n        {\n            if (\"\" != buffer[bufferCursors[GET_INDEX]])\n            {\n                std::string message = buffer[bufferCursors[GET_INDEX]];\n                buffer[bufferCursors[GET_INDEX]] = \"\";\n                bufferCursors[GET_INDEX]++;\n                if (!(bufferCursors[GET_INDEX] < bufferSize))\n                {\n                    bufferCursors[GET_INDEX] = 0;\n                }\n                return message;\n            }\n            return \"\";\n        }\n    }\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u306b\u30a8\u30f3\u30ad\u30e5\u30fc\n    static void enqueue(struct ev_loop* loop, AMQP::TcpConnection& connection, AMQP::TcpChannel& channel, std::string message)\n    {\n        std::string exchange_name = \"myexchange\";\n        std::string routing_key = \"\";\n\n        int lifeSpan = 0;\n        if (\"durable\" == lifeSpan_queues[ENQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::durable;\n        }\n        else if (\"autodelete\" == lifeSpan_queues[ENQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::autodelete;\n        }\n        else if (\"passive\" == lifeSpan_queues[ENQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::passive;\n        }\n        else if (\"exclusive\" == lifeSpan_queues[ENQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::exclusive;\n        }\n\n        channel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n            .onError([](const char* errMsg) {\n            std::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n        });\n\n        channel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n            .onSuccess([&connection, &channel, &exchange_name, &routing_key, &message]() {\n\n            if (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n                std::cerr << \"failed to publish?\\n\";\n            }\n\n            // break in ev loop.\n            connection.close();\n        });\n\n        // \u3053\u306e\u30eb\u30fc\u30d7\u306f\u3001\u30d1\u30d6\u30ea\u30c3\u30b7\u30e5\u5f8c\u306b\u629c\u3051\u308b\n        ev_run(loop);\n    }\n\n    // \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n    // startConsume() \u3057\u3066\u304a\u304f\u3053\u3068\u3002\n    static std::string dequeue() {\n        std::string message;\n\n        while (\"\" == message)\n        {\n            message = rotationBuffer::getMessage();\n        }\n\n        return message;\n    }\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u76e3\u8996\u3092\u958b\u59cb\n    static void workConsume()\n    {\n        // Connect to the AMQP service.\n        auto *loop = EV_DEFAULT;\n        AMQP::LibEvHandler handler(loop);\n        AMQP::TcpConnection connection(&handler, ADDRESS);\n        AMQP::TcpChannel channel(&connection);\n\n        // I will go to the front of the box named \"1111\".\n        int lifeSpan = 0;\n        if (\"durable\" == lifeSpan_queues[DEQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::durable;\n        }\n        else if (\"autodelete\" == lifeSpan_queues[DEQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::autodelete;\n        }\n        else if (\"passive\" == lifeSpan_queues[DEQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::passive;\n        }\n        else if (\"exclusive\" == lifeSpan_queues[DEQUEUE_INDEX])\n        {\n            lifeSpan = AMQP::exclusive;\n        }\n        channel.declareQueue(name_queues[DEQUEUE_INDEX], lifeSpan);\n\n        // I look inside the box.\n        auto errorCb = [](const char *errMsg) {\n            std::cerr << \"My ID watching failed [\" << errMsg << \"]\" << std::endl;\n        };\n        auto messageCb = [&channel](const AMQP::Message &message, uint64_t deliveryTag, bool redelivered) {\n\n            std::string myString(message.body(), message.bodySize());\n            rotationBuffer::putMessage(myString);\n\n            channel.ack(deliveryTag);\n        };\n        channel.consume(name_queues[DEQUEUE_INDEX])\n            .onReceived(messageCb)\n            .onError(errorCb);\n\n        // I will keep on forever.\n        ev_run(loop, 0);\n\n        // I will not come here.\n        return;\n    }\n}\n\nint main(int argc, char* argv[])\n{\n    std::string cmdArg;\n    // \u30d7\u30ed\u30b0\u30e9\u30e0\u540d\u3092\u7701\u304d\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3060\u3051\u3092\u3064\u306a\u3052\u308b\u3002\n    for (int i = 1; i < argc; ++i)\n    {\n        cmdArg += std::string(argv[i]) + \" \";\n    }\n    std::istringstream ssCmd(cmdArg);\n\n    // \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6700\u521d\u306e1\u30c8\u30fc\u30af\u30f3\u3092\u62fe\u3046\n    std::string token;\n    ssCmd >> token;\n\n    if (token == \"--msgqueue\") {\n        // ex.) --msgqueue 1115 durable 1114 durable\n        ssCmd >> service_io::name_queues[service_io::ENQUEUE_INDEX];\n        ssCmd >> service_io::lifeSpan_queues[service_io::ENQUEUE_INDEX];\n        ssCmd >> service_io::name_queues[service_io::DEQUEUE_INDEX];\n        ssCmd >> service_io::lifeSpan_queues[service_io::DEQUEUE_INDEX];\n    }\n\n    // \u30c7\u30ad\u30e5\u30fc\u306e\u5e38\u6642\u76e3\u8996\u3092\u30b9\u30bf\u30fc\u30c8\n    auto th1 = std::thread([] { service_io::workConsume(); });\n\n    // \u30a8\u30f3\u30ad\u30e5\u30fc\u7528\u306e\u63a5\u7d9a\n    //auto* loop = EV_DEFAULT;\n    struct ev_loop* loop = EV_DEFAULT;\n    AMQP::LibEvHandler handler{ loop };\n    AMQP::TcpConnection connection{ &handler, service_io::ADDRESS };\n    AMQP::TcpChannel channel{ &connection };\n\n    // \u7121\u9650\u30eb\u30fc\u30d7\n    for (;;)\n    {\n        std::string message = service_io::rotationBuffer::getMessage();\n        if (\"\" != message)\n        {\n            // \u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u308b\u3002\n            message += \"daze\";\n\n            // \u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\n            service_io::enqueue(loop, connection, channel, message);\n        }\n        std::this_thread::sleep_for(std::chrono::milliseconds(20));\n    }\n\n    // \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u81ea\u5206\u3067\u306f\u63a5\u7d9a\u3092\u5207\u3089\u306a\u3044\u3002\n\n    // th1 \u30b9\u30ec\u30c3\u30c9\u306e\u7d42\u4e86\u3092\u5f85\u3064\n    th1.join();\n    return 0;\n}\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3044\u3044\u306e\u3060\u308d\u3046\u304b\uff1f\n# ./tamesi33a2_cpp.exe --msgqueue 1115 durable 1114 durable &\n[1] 4177\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# tamesi33a2_cpp.exe: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n\n\u540c\u69d8\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u304b\u3002\nnamespace service_io \u3067\u56f2\u3093\u3060\u304b\u3089\u304b\u3001\u305d\u308c\u3068\u3082\u3000\u30ad\u30e5\u30fc\u540d\u3092\u9078\u3079\u308b\u3088\u3046\u306b\u3057\u305f\u304b\u3089\u304b\uff1f\n# ./tamesi33a2_cpp.exe --msgqueue 1115 durable 1114 durable &\n[1] 4239\n\n\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3092\u5916\u3059\u3068\u3000\u3059\u3093\u306a\u308a\u884c\u3063\u305f\u3088\u3046\u306b\u3082\u898b\u3048\u308b\u3002\n\u3058\u3083\u3042\u3000\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3092\u4ed8\u3051\u3066\u307f\u3088\u3046\u3002\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? > 1114\n\u524a\u9664\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n[1114]\u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u305f\u306f\u305a\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09 result=[4294967295]\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? > 1115\n\u524a\u9664\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\nUnhandled Exception:\nRabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=504, text=\"Frame received for invalid channel 1\", classId=0, methodId=0, cause=RabbitMQ.Client.Impl.ChannelErrorException: Frame received for invalid channel 1\n\n\u306a\u3093\u304b\u3000\u64cd\u4f5c\u3092\u30df\u30b9\u3063\u3066\u3000\u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u3066\u3057\u307e\u3063\u305f\u3089\u3057\u3044\u3002\nEnqueue? > usi\n Enqueue(^q^) usi\nEnqueue? > tamesi33a2_cpp.exe: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n\n\u540c\u69d8\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u308b\u3002\n\u30bd\u30fc\u30b9\u3092\u623b\u3057\u3066\u5b9f\u884c\u3002\n# ./tamesi33a2_cpp.exe &\n[1] 4615\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# My ID watching failed [Channel is in error state]\n\n\u30c1\u30e3\u30f3\u30cd\u30eb\u304b\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u304c\u8150\u3063\u3066\u3044\u308b\u3093\u3060\u308d\u3046\u304b\uff1f\na1            a2 \n   -> 1116 ->\n   <- 1117 <-\n\n\u30ad\u30e5\u30fc\u3092\u4f5c\u308a\u76f4\u3057\u3066\u3084\u308a\u306a\u304a\u3057\u3002\n> usi\n\nUnhandled Exception:\nRabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=\"PRECONDITION_FAILED - inequivalent arg 'durable' for queue '1116' in vhost '/': received 'true' but current is 'false'\", classId=50, methodId=10, cause=\n  at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply () <0x416f2760 + 0x00103> in <filename unknown>:0\n\n\u5c5e\u6027\u306e\u8a2d\u5b9a\u304c\u304a\u304b\u3057\u3044\u3093\u3060\u308d\u3046\u304b\uff1f\n        int lifeSpan = 0;\n    if (\"durable\" == lifeSpan_queues[ENQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::durable;\n    }\n    else if (\"autodelete\" == lifeSpan_queues[ENQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::autodelete;\n    }\n    else if (\"passive\" == lifeSpan_queues[ENQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::passive;\n    }\n    else if (\"exclusive\" == lifeSpan_queues[ENQUEUE_INDEX])\n    {\n        lifeSpan = AMQP::exclusive;\n    }\n\n    channel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n        .onError([](const char* errMsg) {\n        std::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n    });\n\nC++ \u3067\u4f55\u304b\u304a\u304b\u3057\u3044\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u308b\u3060\u308d\u3046\u304b\u3002\u7b49\u53f7\u3068\u304b\u3002\n\n\u30df\u30b9\u3092\u898b\u3064\u3051\u305f\u3002\nstatic std::string bgp_lifeSpan[] = { \"duration\", \"duration\" };\n\n\u3053\u308c\u306f\u3001\nstatic std::string bgp_lifeSpan[] = { \"durable\", \"durable\" };\n\n\u3053\u3063\u3061\u304c\u6b63\u3057\u3044\u3002\u4eca\u56de\u306e\u4e0d\u5177\u5408\u3068\u306f\u95a2\u4fc2\u306a\u3055\u305d\u3046\u3060\u304c\u76f4\u3057\u3066\u3044\u304f\u3002\n./tamesi33a2_cpp.exe &\n[1] 5307\nMy ID watching failed [Channel is in error state]\n\n\u76f4\u3057\u3066\u3082\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u308b\u3002\n\u3053\u3093\u306a\u98a8\u306b\u66f8\u304d\u76f4\u3057\u3066\u307f\u308b\u3002\n    int lifeSpan = 0;\n    std::string a = lifeSpan_queues[ENQUEUE_INDEX];\n    if      (\"durable\"    == a) { lifeSpan = AMQP::durable;    }\n    else if (\"autodelete\" == a) { lifeSpan = AMQP::autodelete; }\n    else if (\"passive\"    == a) { lifeSpan = AMQP::passive;    }\n    else if (\"exclusive\"  == a) { lifeSpan = AMQP::exclusive;  }\n    else\n    {\n        std::cerr << \"\u672a\u5bfe\u5fdc\u306e\u30ad\u30e5\u30fc\u5bff\u547d\u304c\u6307\u5b9a\u3055\u308c\u307e\u3057\u305f\u3002[\"+ a +\"]\" << std::endl;\n        exit(1);\n    }\n\n    channel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n        .onError([&a](const char* errMsg) {\n            std::cerr << \"error declaring queue: \" << errMsg << \" lifeSpan=[\" << a << \"]\" << \"\\n\";\n        });\n\n# ./tamesi33a2_cpp.exe --msgqueue 1115 durable 1114 durable &\n[1] 5577\n\n\u5f15\u6570\u4ed8\u3051\u3066\u6307\u5b9a\u3059\u308b\u306e\u3092\u5fd8\u308c\u3066\u3044\u305f\u305c\u3002\n# ./tamesi34_cs.exe\n\u2605\u4e2d\u7565\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > Kirin\n Enqueue(^q^) Kirin\nEnqueue? > Neko\n Enqueue(^q^) Neko\nEnqueue? > Inu\n Enqueue(^q^) Inu\nEnqueue? > root@tk2-217-18401:/home/\u2605user/shogi/csharp_service# rabbitmqctl list_queues\nListing queues ...\n1112    0\n1116    0\n1111    0\n1113    0\n1117    0\nmyqueue 25\n1115    0\n1114    3\n\n./tamesi34_cs.exe \u3092\u4f7f\u3046\u3068\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u30ad\u30e5\u30fc\u306b\u9001\u308c\u308b\u306e\u3068\u3001\n# jobs\n[1]+  Terminated              ./tamesi33a2_cpp.exe --msgqueue 1115 durable 1114 durable  (wd: /home/\u2605user/shogi/cpp_service)\n\n./tamesi33a2_cpp.exe \u3092\u4f7f\u3046\u3068 \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u304c 0 \u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u78ba\u8a8d\u3057\u305f\u306e\u3067\u3001\u30a8\u30f3\u30ad\u30e5\u30fc\u304c\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3060\u308d\u3046\u3002\n\n\u30b9\u30ec\u30c3\u30c9\u3068 mutex\n\u300cwhat is correspoding feature for synchronized in java?\u300d\uff08stack overflow\uff09\nhttp://stackoverflow.com/questions/5429653/what-is-correspoding-feature-for-synchronized-in-java\n\u3053\u3093\u306a\u306e\u899a\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3060\u308d\u3046\u304b\uff1f\n\u3068\u308a\u3042\u3048\u305a\u9069\u5f53\u306b\u4f7f\u3063\u3066\u307f\u3088\u3046\u3002\n/// <summary>\n/// \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n/// \u3053\u308c\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n/// \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n/// \u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n/// </summary>\nnamespace rotationBuffer\n{\n    const int bufferSize = 100;\n    static std::string buffer[bufferSize] = {};\n    static int bufferCursors[2] = { 0, 0 };\n    const int PUT_INDEX = 0;\n    const int GET_INDEX = 1;\n\n    std::mutex _mutex;\n    static void putMessage(std::string message)\n    {\n        std::unique_lock<std::mutex> lock(_mutex);\n        buffer[bufferCursors[PUT_INDEX]] = message;\n        bufferCursors[PUT_INDEX]++;\n        if (!(bufferCursors[PUT_INDEX] < bufferSize))\n        {\n            bufferCursors[PUT_INDEX] = 0;\n        }\n    }\n    static std::string getMessage()\n    {\n        std::unique_lock<std::mutex> lock(_mutex);\n        if (\"\" != buffer[bufferCursors[GET_INDEX]])\n        {\n            std::string message = buffer[bufferCursors[GET_INDEX]];\n            buffer[bufferCursors[GET_INDEX]] = \"\";\n            bufferCursors[GET_INDEX]++;\n            if (!(bufferCursors[GET_INDEX] < bufferSize))\n            {\n                bufferCursors[GET_INDEX] = 0;\n            }\n            return message;\n        }\n        return \"\";\n    }\n}\n\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# rm tamesi33a2_cpp.cpp\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# nano tamesi33a2_cpp.cpp\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# g++ -std=c++11 tamesi33a2_cpp.cpp -o tamesi33a2_cpp.exe -lev -lamqpcpp -pthread\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# ./tamesi33a2_cpp.exe --msgqueue 1117 durable 1116 durable &\n[1] 6963\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# My ID watching failed [Channel is in error state] lifeSpan=[durable]\n\n\u521d\u56de\u306b\u5931\u6557\u3059\u308b\u306e\u306f\u306a\u3093\u3067\u3060\u308d\u3046\uff1f\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1118\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1119\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > ika\n Enqueue(^q^) ika\ntamesi33a2_cpp.exe: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\nEnqueue? >\n\n\u3044\u3064\u3082\u306e\u30a8\u30e9\u30fc\u3067\u843d\u3061\u3066\u3044\u308b\u3002 ika \u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30c7\u30ad\u30e5\u30fc\u306f\u3057\u3066\u308b\u3093\u3060\u3068\u601d\u3046\u3093\u3060\u304c\u3001\u3053\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u3066\u304f\u308b\u524d\u306b\u4f55\u304b\u4e0d\u5177\u5408\u304c\u8d77\u3053\u3063\u3066\u308b\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\u3000\u30a8\u30e9\u30fc\u51fa\u529b\u306f\u306a\u3044\u304b\uff1f\n# jobs\n[2]+  Running                 ./tamesi33a2_cpp.exe --msgqueue 1117 durable 1116 durable 2> ./tamesi33a2_cpp.err.log &\n\n\u3053\u3046\u52d5\u304b\u3057\u3066\u304a\u3044\u3066\u3002\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1116\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1117\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > ringo\n\nUnhandled Exception:\nRabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=\"PRECONDITION_FAILED - inequivalent arg 'durable' for queue '1116' in vhost '/': received 'true' but current is 'false'\", classId=50, methodId=10, cause=\n  at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply () <0x411595f0 + 0x00103> in <filename unknown>:0\n  at RabbitMQ.Client.Impl.ModelBase.ModelRpc (RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, System.Byte[] body) <0x411574f0 + 0x000f9> in <filename unknown>:0\n  at RabbitMQ.Client.Framing.Impl.v0_8.Model.QueueDeclare (System.String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary arguments) <0x4115b820 + 0x00113> in <filename unknown>:0\n  at UsagiMQ.Program.GetChannel (Int32 index) <0x4111d1f0 + 0x00138> in <filename unknown>:0\n  at UsagiMQ.Program.Enqueue (System.String message) <0x4115c930 + 0x00013> in <filename unknown>:0\n  at UsagiMQ.Program.Main (System.String[] args) <0x41118d50 + 0x0031f> in <filename unknown>:0\n[ERROR] FATAL UNHANDLED EXCEPTION: RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=\"PRECONDITION_FAILED - inequivalent arg 'durable' for queue '1116' in vhost '/': received 'true' but current is 'false'\", classId=50, methodId=10, cause=\n  at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply () <0x411595f0 + 0x00103> in <filename unknown>:0\n  at RabbitMQ.Client.Impl.ModelBase.ModelRpc (RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, System.Byte[] body) <0x411574f0 + 0x000f9> in <filename unknown>:0\n  at RabbitMQ.Client.Framing.Impl.v0_8.Model.QueueDeclare (System.String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary arguments) <0x4115b820 + 0x00113> in <filename unknown>:0\n  at UsagiMQ.Program.GetChannel (Int32 index) <0x4111d1f0 + 0x00138> in <filename unknown>:0\n  at UsagiMQ.Program.Enqueue (System.String message) <0x4115c930 + 0x00013> in <filename unknown>:0\n  at UsagiMQ.Program.Main (System.String[] args) <0x41118d50 + 0x0031f> in <filename unknown>:0\n\n\u3046\u30fc\u3080\u3002\nRabbitMQ.Client.Framing.Impl.v0_8.Model.QueueDeclare (System.String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary arguments)\n\u3053\u3046\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3063\u3066\u308b\u306e\u306f C# \u306e\u65b9\u3060\u3063\u305f\u304b\u306a\u3002\u3053\u3053\u3067\u6761\u4ef6\u306e\u8a2d\u5b9a\u304c\u9055\u3046\u3093\u3060\u308d\u3046\u304b\uff1f\n\nautodelete\n# ./tamesi34_cs.exe 2> ./tamesi34_cs.err.log\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1116\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1117\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\nGetChannel index = [1]\n    QUEUE_NAMES[index] = [1117]\n    passive_lifeSpans[index] = [False]\n    durable_lifeSpans[index] = [True]\n    exclusive_lifeSpans[index] = [False]\n    autodelete_lifeSpans[index] = [False]\n    nowait \u306f\u4eee\u306b false \u56fa\u5b9a\n    arguments \u306f\u4eee\u306b null \u56fa\u5b9a\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\n\ndurable \u3068 autodelete \u306f\u4e21\u7acb\u3059\u308b\u3089\u3057\u3044\u304c\u3002\n# ./tamesi34_cs.exe 2> ./tamesi34_cs.err.log\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1116\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1117\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\nGetChannel index = [1]\n    QUEUE_NAMES[index] = [1117]\n    passive_lifeSpans[index] = [False]\n    durable_lifeSpans[index] = [True]\n    exclusive_lifeSpans[index] = [False]\n    autodelete_lifeSpans[index] = [False]\n    nowait \u306f\u4eee\u306b false \u56fa\u5b9a\n    arguments \u306f\u4eee\u306b null \u56fa\u5b9a\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > blade\nGetChannel index = [0]\n    QUEUE_NAMES[index] = [1116]\n    passive_lifeSpans[index] = [False]\n    durable_lifeSpans[index] = [True]\n    exclusive_lifeSpans[index] = [False]\n    autodelete_lifeSpans[index] = [False]\n    nowait \u306f\u4eee\u306b false \u56fa\u5b9a\n    arguments \u306f\u4eee\u306b null \u56fa\u5b9a\n\n\u3053\u3053\u3067\u7a81\u7136\u3000\u51e6\u7406\u304b\u3089\u629c\u3051\u305f\u3002\ntamesi34_cs.err.log \u306b\u3044\u3064\u3082\u306e\u30a8\u30e9\u30fc\u304c\u66f8\u3044\u3066\u3042\u308b\u3002\n\n\u8db3\u3057\u7b97\n\u306a\u3093\u3060\u304b\u6025\u306b\u3000\u4f53\u8abf\u304c\u60aa\u304f\u306a\u3063\u305f\u3093\u3067\u4f11\u61a9\u3002\n\u3053\u308c\u306f\u66f8\u304d\u304b\u3051\u3002\n// OS  : Windows 10\n// IDE : Visual Studio 2015\n//       Install : NuGet   : Install-Package RabbitMQ.Client -Version 4.1.1\n//\n// OS  : Ubuntu 16.04\n//       Compile : Command : mcs /r:RabbitMQ.Client.dll -define:UBUNTU tamesi34_cs.cs\n//               : Command : chmod 755 tamesi34_cs.cs\n//       Execute : Command : // \u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\n//                         : ./tamesi34_cs.exe 2> ./tamesi34_cs.err.log\n//       Check   : Command : // \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u306e\u6570\u3092\u8abf\u3079\u308b\n//                         : rabbitmqctl list_queues\n//\n// Library : RabbitMQ\n//           Refference : Website : RabbitMQ http://www.rabbitmq.com/\n//                      : Website : RabbitMQ\u7ba1\u7406\u30b3\u30de\u30f3\u30c9\uff08rabbitmqctl\uff09\u4f7f\u3044\u65b9 (Qiita) http://qiita.com/tamikura@github/items/5293cda4c0026b2d7022\n//                      : Website : amqp\u3092\u4f7f\u3063\u3066RabbitMQ\u306e\u30ad\u30e5\u30fc\u3092\u64cd\u4f5c\u3059\u308b (Qiita) http://qiita.com/tamikura@github/items/a268afa51c5537ca4fe6\n//--------------------------------------------------------------------------------\n// tamesi34_cs.cs\n\n// Ubuntu \u306e RabbitMQ \u306f\u30bd\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u306e\u304b\u3001API \u304c\u7570\u306a\u3063\u305f\u3002\n// #define UBUNTU\n\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System;\nusing System.Text;\n\nnamespace UsagiMQ\n{\n    [Flags]\n    enum LifeSpanType\n    {\n        /// <summary>\n        /// RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n        /// </summary>\n        Durable = 1,\n        /// <summary>\n        /// \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n        /// </summary>\n        Autodelete = 0x1<<1,\n        /// <summary>\n        /// \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n        /// </summary>\n        Passive = 0x1 << 2,\n        /// <summary>\n        /// \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\n        /// </summary>\n        Exclusive = 0x1 << 3\n    }\n\n    /// <summary>\n    /// \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3000\u30a8\u30f3\u30ad\u30e5\u30fc\u3057\u307e\u3059\u3002\n    /// \u30ad\u30e5\u30fc\u306e\u540d\u524d\u306f\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u306f\u5272\u8fbc\u307f\u3092\u53d7\u3051\u4ed8\u3051\u307e\u3059\u3002\n    /// \n    /// \u53c2\u7167 : QueueDeclare (v1.0) http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n    /// \u53c2\u7167 : EventingBasicConsumer https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n    /// \u53c2\u7167 : QueueDelete (v1.4) https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.QueueDelete(System.UInt16,System.String,System.Boolean,System.Boolean,System.Boolean)\n    /// \u53c2\u7167 : BasicConsume https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n    /// \u53c2\u7167 : C#\u3067const\u306a\u914d\u5217\u3092\u5b9f\u73fe\u3059\u308b (\u3082\u3063\u3068\u30af\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) http://pgnote.net/?p=885\n    /// </summary>\n    class Program\n    {\n        const int ENQUEUE_INDEX = 0;\n        const int DEQUEUE_INDEX = 1;\n        const int DELETEQUEUE_INDEX = 2;\n        const int NUM_INDEX = 3;\n        const string HOST_NAME = \"localhost\";\n        static string[] QUEUE_NAMES = new string[NUM_INDEX];\n        /// <summary>\n        /// \u30ad\u30e5\u30fc\u306e\u5bff\u547d\uff08\u8907\u5408\u53ef\u80fd\uff09\n        /// durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n        /// autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n        /// passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n        /// exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\n        /// </summary>\n        static LifeSpanType[] lifeSpans_queue = new LifeSpanType[NUM_INDEX];\n        static bool[]\n            durable_lifeSpans = new bool[NUM_INDEX],\n            autodelete_lifeSpans = new bool[NUM_INDEX],\n            passive_lifeSpans = new bool[NUM_INDEX],\n            exclusive_lifeSpans = new bool[NUM_INDEX];\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"index_queue\"></param>\n        /// <param name=\"name_queue\"></param>\n        /// <param name=\"lifeSpan\">\n        /// (0) durable\n        /// (1) autodelete\n        /// (2) passive\n        /// (3) exclusive\n        /// </param>\n        static void SetLifeSpan(int index_queue, string name_queue, LifeSpanType lifeSpan)\n        {\n            QUEUE_NAMES[index_queue] = name_queue;\n            lifeSpans_queue[index_queue] = lifeSpan;\n\n            // \u4e00\u65e6\u30af\u30ea\u30a2\u30fc\n            durable_lifeSpans[index_queue] = false;\n            autodelete_lifeSpans[index_queue] = false;\n            passive_lifeSpans[index_queue] = false;\n            exclusive_lifeSpans[index_queue] = false;\n\n            // durable\n            if (((int)lifeSpan & (int)LifeSpanType.Durable) == (int)LifeSpanType.Durable) { durable_lifeSpans[index_queue] = true; }\n            // autodelete\n            if (((int)lifeSpan & (int)LifeSpanType.Autodelete) == (int)LifeSpanType.Autodelete) { autodelete_lifeSpans[index_queue] = true; }\n            // passive\n            if (((int)lifeSpan & (int)LifeSpanType.Passive) == (int)LifeSpanType.Passive) { passive_lifeSpans[index_queue] = true; }\n            // exclusive\n            if (((int)lifeSpan & (int)LifeSpanType.Exclusive) == (int)LifeSpanType.Exclusive) { exclusive_lifeSpans[index_queue] = true; }\n        }\n\n\n        public static ConnectionFactory GetFactory()\n        {\n            if (null == m_factory_)\n            {\n                m_factory_ = new ConnectionFactory() { HostName = HOST_NAME };\n            }\n            return m_factory_;\n        }\n        static ConnectionFactory m_factory_;\n\n        public static IConnection GetConnection()\n        {\n            if (null == m_connection_)\n            {\n                m_connection_ = GetFactory().CreateConnection();\n            }\n            return m_connection_;\n        }\n        static IConnection m_connection_;\n\n        public static IModel GetChannel(int index)\n        {\n            if (null == m_channels_[index])\n            {\n                m_channels_[index] = GetConnection().CreateModel();\n\n                // \u5f15\u6570\u304c7\u3064\u306e QueueDeclare \u3067\u30a8\u30e9\u30fc\u3092\u5410\u304f\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3001\u60c5\u5831\u3092\u51fa\u529b\u3057\u3066\u304a\u304f\u3002\n                Console.Error.WriteLine(\"GetChannel index = [\" + index + \"]\");\n                Console.Error.WriteLine(\"    QUEUE_NAMES[index] = [\" + QUEUE_NAMES[index] + \"]\");\n                Console.Error.WriteLine(\"    passive_lifeSpans[index] = [\" + passive_lifeSpans[index] + \"]\");\n                Console.Error.WriteLine(\"    durable_lifeSpans[index] = [\" + durable_lifeSpans[index] + \"]\");\n                Console.Error.WriteLine(\"    exclusive_lifeSpans[index] = [\" + exclusive_lifeSpans[index] + \"]\");\n                Console.Error.WriteLine(\"    autodelete_lifeSpans[index] = [\" + autodelete_lifeSpans[index] + \"]\");\n                Console.Error.WriteLine(\"    nowait \u306f\u4eee\u306b false \u56fa\u5b9a\");\n                Console.Error.WriteLine(\"    arguments \u306f\u4eee\u306b null \u56fa\u5b9a\");\n\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b Spring.Messaging.Amqp.Rabbit \u306e\u5f15\u6570 7 \u3064\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], passive_lifeSpans[index], durable_lifeSpans[index], exclusive_lifeSpans[index], autodelete_lifeSpans[index], false, null);\n#else\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], durable_lifeSpans[index], exclusive_lifeSpans[index], autodelete_lifeSpans[index], null);\n#endif\n            }\n            return m_channels_[index];\n        }\n        static IModel[] m_channels_ = new IModel[NUM_INDEX];\n\n        public static EventingBasicConsumer GetConsumer(int index)\n        {\n            if (null == m_consumers_[index])\n            {\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b v1.4.0 \u306e\u5f15\u6570\u304c 0 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8abf\u3079\u305f\u304c\u5f15\u6570\u304c1\u500b\uff5e6\u500b\u306e\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u3002\n                m_consumers_[index] = new EventingBasicConsumer();\n#else\n                m_consumers_[index] = new EventingBasicConsumer(GetChannel(index));\n#endif\n\n            }\n            return m_consumers_[index];\n        }\n        static EventingBasicConsumer[] m_consumers_ = new EventingBasicConsumer[NUM_INDEX];\n\n        /// <summary>\n        /// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n        /// </summary>\n#if UBUNTU\n        public static BasicDeliverEventHandler GetDequeueHandler()\n#else\n        public static EventHandler<BasicDeliverEventArgs> GetDequeueHandler()\n#endif\n        {\n            if (null == m_dequeueHandler_)\n            {\n#if UBUNTU\n                m_dequeueHandler_ = new BasicDeliverEventHandler((model, ea) =>\n#else\n                m_dequeueHandler_ = new EventHandler<BasicDeliverEventArgs>((model, ea) =>\n#endif\n                {\n                    byte[] body = ea.Body;\n                    string message = Encoding.UTF8.GetString(body);\n                    Console.WriteLine(\"<---- [interrupt!] Dequeue(^q^) {0}\", message);\n                });\n            }\n\n            return m_dequeueHandler_;\n        }\n\n#if UBUNTU\n        static BasicDeliverEventHandler m_dequeueHandler_;\n#else\n        static EventHandler<BasicDeliverEventArgs> m_dequeueHandler_;\n#endif\n\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseConnection()\n        {\n            if (null != m_connection_)\n            {\n                m_connection_.Close();\n                m_connection_ = null;\n            }\n        }\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseChannel(int index)\n        {\n            if (null != m_channels_[index])\n            {\n                m_channels_[index].Close();\n                m_channels_[index] = null;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            //----------------------------------------\n            // Delete\n            //----------------------------------------\n            for (;;)\n            {\n                Console.Write(@\"\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? > \");\n                string queueName_delete = Console.ReadLine();\n                if (\"\"== queueName_delete.Trim())\n                {\n                    break;\n                }\n\n\n                Console.Write(@\"\u524a\u9664\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u3001\u8db3\u3057\u7b97\u3057\u3066\u7b54\u3048\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(\"+ LifeSpanType.Durable + @\") durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(\" + LifeSpanType.Autodelete + @\") autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(\" + LifeSpanType.Passive + @\") passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(\" + LifeSpanType.Exclusive + @\") exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > \");\n                LifeSpanType lifeSpan_delete = (LifeSpanType)int.Parse(Console.ReadLine());\n                SetLifeSpan(DELETEQUEUE_INDEX, queueName_delete, lifeSpan_delete);\n                uint result = DeleteQueue();\n                Console.WriteLine(@\"[\"+ queueName_delete + \"]\u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u305f\u306f\u305a\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09 result=[\"+ result + \"]\");\n            }\n\n            //----------------------------------------\n            // Enqueue settings\n            //----------------------------------------\n            for (;;)\n            {\n                Console.Write(@\"\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > \");\n                string queueName_enqueue = Console.ReadLine();\n\n                Console.Write(@\"\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u3001\u8db3\u3057\u7b97\u3057\u3066\u7b54\u3048\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(\" + LifeSpanType.Durable + @\") durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(\" + LifeSpanType.Autodelete + @\") autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(\" + LifeSpanType.Passive + @\") passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(\" + LifeSpanType.Exclusive + @\") exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > \");\n                int lifeSpan_enqueue;\n                if(int.TryParse(Console.ReadLine(),out lifeSpan_enqueue))\n                {\n                    SetLifeSpan(ENQUEUE_INDEX, queueName_enqueue, (LifeSpanType)lifeSpan_enqueue);\n                    break;\n                }\n            }\n\n            //----------------------------------------\n            // Enqueue settings\n            //----------------------------------------\n            for (;;)\n            {\n                Console.Write(@\"\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > \");\n                string queueName_dequeue = Console.ReadLine();\n\n                Console.Write(@\"\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u3001\u8db3\u3057\u7b97\u3057\u3066\u7b54\u3048\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(\" + LifeSpanType.Durable + @\") durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(\" + LifeSpanType.Autodelete + @\") autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(\" + LifeSpanType.Passive + @\") passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(\" + LifeSpanType.Exclusive + @\") exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > \");\n                int lifeSpan_dequeue;\n                if(int.TryParse(Console.ReadLine(),out lifeSpan_dequeue))\n                {\n                    StartConsume(queueName_dequeue, (LifeSpanType)lifeSpan_dequeue);\n                    break;\n                }\n            }\n\n            Console.Write(@\"\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > \");\n            for (;;)\n            {\n                // \"Hello World!\" \u306a\u3069\u3092\u5165\u529b\n                string line = Console.ReadLine();\n                Enqueue(line);\n                Console.Write(@\"Enqueue? > \");\n            }\n\n            // \u3053\u3053\u306b\u306f\u6765\u306a\u3044\n            // CloseConnection();\n        }\n\n        static uint DeleteQueue()\n        {\n            IModel channel = GetChannel(DELETEQUEUE_INDEX);\n\n#if UBUNTU\n            // Ubuntu\u3067\u306f\u4f55\u6545\u304b \u6614\u306e .Net \u7528\u306e\u5f15\u6570 5 \u3064\u306e\u3084\u3064\u306e\u5909\u5247\u7248\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n            // uint QueueDelete(ushort ticket, string queue, bool ifUnused, bool ifEmpty, bool nowait)\n            uint result = channel.QueueDelete( QUEUE_NAMES[DELETEQUEUE_INDEX],true,true,true);\n#else\n            uint result = channel.QueueDelete(QUEUE_NAMES[DELETEQUEUE_INDEX],true,true);\n#endif\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel(DELETEQUEUE_INDEX);\n            return result;\n        }\n\n        static void Enqueue(string message)\n        {\n            IModel channel = GetChannel(ENQUEUE_INDEX);\n\n            byte[] body = Encoding.UTF8.GetBytes(message);\n            channel.BasicPublish(\"\", QUEUE_NAMES[ENQUEUE_INDEX], null, body);\n\n            Console.WriteLine(\" Enqueue(^q^) {0}\", message);\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel(ENQUEUE_INDEX);\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"name_queue\">\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d</param>\n        /// <param name=\"lifeSpan_queue\">\u65e2\u5b58\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5834\u5408\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u8a2d\u5b9a\u306f\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n        /// autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n        /// passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3067\u3001\u4e2d\u8eab\u3092\u898b\u306a\u3044\u6642\u306f\u3053\u308c\n        /// exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\n        /// </param>\n        static void StartConsume(string name_queue, LifeSpanType lifeSpan_queue)\n        {\n            SetLifeSpan(DEQUEUE_INDEX, name_queue, lifeSpan_queue);\n\n            IModel channel = GetChannel(DEQUEUE_INDEX);\n            EventingBasicConsumer consumer = GetConsumer(DEQUEUE_INDEX);\n\n            // \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n            consumer.Received += GetDequeueHandler();\n\n#if UBUNTU\n            // Ubuntu\u3067\u306f\u4f55\u6545\u304b\u5f15\u6570\u304c 5 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, \"\", null, consumer);\n#else\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, consumer);\n#endif\n            // \u7d42\u4e86\u306f\u3055\u305b\u306a\u3044\n            // consumer.Received -= GetReceiveHandler();\n            // CloseChannel(DEQUEUE_INDEX);\n        }\n    }\n}\n\n1116 \u306f 3 \u3067\u5408\u3063\u3066\u305f\u304b\u3002\n\u6b21\u306f\u30a8\u30e9\u30fc\u3002\ninequivalent arg 'auto_delete' for queue '1117'\n1117 \u306f 1 \u304c\u6b63\u89e3\u304b\u3002\n\n\u9577\u304f\u306a\u3063\u305f\u306e\u3067\u6b21\u306e\u8a18\u4e8b\u3078\n\u524d\u56de\u306e\u8a18\u4e8b : http://qiita.com/muzudho1/items/473fc0fda3e38300b820\n\n# \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5272\u8fbc\u307f\u5f85\u3061\u505c\u6b62\u3057\u3066\u3044\u308b\u30d7\u30ed\u30bb\u30b9\u3068\u3001\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u306f\u3067\u304d\u308b\u306e\u3060\u308d\u3046\u304b\uff1f\n\n\u524d\u306b\u5b9f\u9a13\u3057\u305f\u6c17\u304c\u3059\u308b\u3093\u3060\u304c\u3000\u3069\u306e\u8a18\u4e8b\u3060\u3063\u305f\u308d\u3046\u304b\u3002\n\n\u524d\u56de\u306e\u8a18\u4e8b\u3060\u3063\u305f\u3002\n\n\u300c\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u5c06\u68cb\u30bd\u30d5\u30c8\u3068\u306e\u5bfe\u5c40\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3066\u3088\u3046\uff1c\u305d\u306e\uff18\uff1e\u300d\uff08Qiita\uff09\nhttp://qiita.com/muzudho1/items/798dfbf267340f3801e1#_reference-1a747e743b7ff0dbb050\n\n\u3053\u306e\u3068\u304d\u306f C# / RabbitQM \u3060\u3063\u305f\u304c\u3001\u4eca\u5ea6\u306f C++ / AMQP-CPP \u3067\u3084\u308a\u305f\u3044\u3002\n\n\u3058\u3083\u3042\n\ntamesi33a1_cpp.cpp\u3001tamesi33a2_cpp.cpp \u306e\u30c6\u30b9\u30c8\u3092\u4f5c\u308d\u3046\u3002\n\n# \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9 tamesi33 C++\u7248\n\n**a1 :** \uff08\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u56de\u3055\u306a\u3044\uff09\u30ad\u30fc\u30dc\u30fc\u30c9\u5165\u529b\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1112\u300d\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308c\u308b\u3082\u306e\u3068\u3059\u308b\u3002\u5e38\u6642\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1113\u300d\u3092\u76e3\u8996\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5165\u3063\u3066\u3044\u308c\u3070\u3000\u753b\u9762\u306b\u51fa\u3059\u3082\u306e\u3068\u3059\u308b\u3002\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3000\u5fc5\u8981\u306b\u306a\u3063\u305f\u3089\u5b9f\u884c\u3057\u3001\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u3089\u6d88\u3048\u3066\u3044\u308b\u3082\u306e\u3068\u60f3\u5b9a\u3059\u308b\u3002\n\n**a2 :** \uff08\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u56de\u3059\uff09\u5e38\u6642\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1112\u300d\u3092\u76e3\u8996\u3057\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5165\u3063\u3066\u3044\u308c\u3070\u3000\u305d\u306e\u6587\u5b57\u5217\u306b\u300cdaze\u300d\u3068\u4ed8\u3051\u3066\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u300c1113\u300d\u306b\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3002\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3000\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u3066\u3082\u7a3c\u50cd\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u3059\u308b\u3002\n\n\u3053\u308c\u3067 a2 \u304c\u5e38\u6642\u3000\u7a3c\u50cd\u3057\u3066\u3044\u3066\u3001a1 \u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u306e\u306a\u3089\u3000\u3088\u3057\u3068\u3059\u308b\u3002\n\n## a2\na2 \u3060\u3051\u4f5c\u308c\u3070\u3044\u3044\u3084\u2026\u2026\u3002\n\n## \u30bd\u30fc\u30b9\u3092\u898b\u3066\u3044\u305f\u3093\u3060\u304c\n\n```\n// I will keep on forever.\nev_run(loop, 0);\n```\n\n\u30c7\u30ad\u30e5\u30fc\u3092\u76e3\u8996\u3057\u3066\u3044\u308b\u51e6\u7406\u304c\u3042\u3063\u3066\u3001\u3053\u3053\u3067\u30d6\u30ed\u30c3\u30af\u3055\u308c\u3066\u3044\u308b\u3002\n\u3060\u304b\u3089\u30a8\u30f3\u30ad\u30e5\u30fc\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u307e\u3067\u884c\u3063\u3066\u306a\u3044\u3002\n\n\u3069\u3046\u3059\u308b\u304b\u3002\n\n# C++ \u3067\u30b9\u30ec\u30c3\u30c9\u3092\u8d70\u3089\u305b\u308b\u306b\u306f\uff1f\n\u30c7\u30ad\u30e5\u30fc\u306e\u76e3\u8996\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u3084\u308c\u3070\u3044\u3044\u306e\u3060\u308d\u3046\u304b\uff1f\n\n\u300cC++\u3067\u7c21\u5358\u975e\u540c\u671f\u51e6\u7406(std::thread,std::async)\u300d\uff08Qiita\uff09\nhttp://qiita.com/termoshtt/items/d3cb7fe226cdd498d2ef\n\n## Visual Studio 2015 \u8a2d\u5b9a\n\nRelease x64 \u306b\u3057\u3066 \u30d7\u30ed\u30d1\u30c6\u30a3\u753b\u9762\u304b\u3089\u30d7\u30ea\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u30d8\u30c3\u30c0\u30fc\u306e\u4f7f\u7528\u3092\u7121\u3057\u306b\u3059\u308b\u3002\n\n```\n#include \"stdafx.h\"\n```\n\n\u3068\u3044\u3063\u305f\u8a18\u8ff0\u3082\u524a\u9664\u3059\u308b\u3002\n\n- stdafx.h\n- targetver.h\n- stdafx.cpp\n\n\u306e\uff13\u30d5\u30a1\u30a4\u30eb\u306f\u524a\u9664\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u3089\u306a\u3044\u304c\u3001Ubuntu \u306e\u65b9\u3078\u30bd\u30fc\u30b9\u3092\u79fb\u52d5\u3055\u305b\u308b\u3002\n\n```\n# g++ -std=c++11 tamesi33a2_cpp.cpp -o tamesi33a2_cpp.exe -lev -lamqpcpp -pthread\ntamesi33a2_cpp.cpp: In lambda function:\ntamesi33a2_cpp.cpp:95:46: error: \u2018bgp_workConsume\u2019 was not declared in this scope\n  auto th1 = std::thread([] { bgp_workConsume(); });\n                                              ^\ntamesi33a2_cpp.cpp: In function \u2018int main()\u2019:\ntamesi33a2_cpp.cpp:104:20: error: \u2018class AMQP::TcpConnection\u2019 has no member named \u2018isConnected\u2019\n  while (connection.isConnected())\n                    ^\ntamesi33a2_cpp.cpp:113:40: error: \u2018enqueue\u2019 was not declared in this scope\n    enqueue(connection, channel, message);\n                                        ^\ntamesi33a2_cpp.cpp: In function \u2018void enqueue(AMQP::TcpConnection&, AMQP::TcpChannel&, std::__cxx11::string)\u2019:\ntamesi33a2_cpp.cpp:166:9: error: \u2018loop\u2019 was not declared in this scope\n  ev_run(loop);\n         ^\ntamesi33a2_cpp.cpp: In function \u2018void bgp_workConsume()\u2019:\ntamesi33a2_cpp.cpp:222:18: error: \u2018bgp_queueName_dequeue\u2019 was not declared in this scope\n  channel.consume(bgp_queueName_dequeue)\n                  ^\n```\n\n\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3002\n\n```\n//auto* loop = EV_DEFAULT;\nstruct ev_loop* loop = EV_DEFAULT;\n```\n\nauto \u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306f EV_DEFAULT \u306e\u578b\u306f\u3000\u3053\u3046\u66f8\u304f\u306e\u304b\u3002\n\n\u300cclass-TcpConnection\u300d\uff08docsforge.com\uff09\nhttp://docsforge.com/11/AMQP-CPP/docs/latest/namespace-AMQP/class-TcpConnection/\n\n\u3053\u3053\u3067\u30bd\u30fc\u30b9\u304c\u8aad\u3081\u308b\u3002\n\n```\n# g++ -std=c++11 tamesi33a2_cpp.cpp -o tamesi33a2_cpp.exe -lev -lamqpcpp -pthread\ntamesi33a2_cpp.cpp: In lambda function:\ntamesi33a2_cpp.cpp:95:46: error: \u2018bgp_workConsume\u2019 was not declared in this scope\n  auto th1 = std::thread([] { bgp_workConsume(); });\n                                              ^\ntamesi33a2_cpp.cpp: In function \u2018int main()\u2019:\ntamesi33a2_cpp.cpp:114:46: error: \u2018enqueue\u2019 was not declared in this scope\n    enqueue(loop, connection, channel, message);\n                                              ^\n```\n\n\u6b8b\u308a\u306e\u30a8\u30e9\u30fc\u306f\u4f55\u3092\u3057\u305f\u3089\u3044\u3044\u306e\u304b\u3002 scope \u3068\u304b\u66f8\u3044\u3066\u308b\u306a\u3002\n\n\u95a2\u6570\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u8a66\u3057\u3066\u307f\u308b\u304b\u3002\n\u304a\u3063\u3051\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u30fb\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```\n// OS      : Windows10 : // \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u52d5\u304b\u306a\u3044\n//\n// OS      : Ubuntu 16.04\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//         : Reference : Web site : QueueDeclare http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n//         : Reference : Web site : EventingBasicConsumer https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n//         : Reference : Web site : BasicConsume https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n//         : Reference : Web site : C#\u3067const\u306a\u914d\u5217\u3092\u5b9f\u73fe\u3059\u308b (\u3082\u3063\u3068\u30af\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) http://pgnote.net/?p=885\n//         : Reference : Web site : AMQP-CPP (docsforge.com) http://docsforge.com/11/AMQP-CPP/docs/latest/namespace-AMQP/class-TcpConnection/\n//\n// Program : this\n//         : Compile   : Command  : g++ -std=c++11 tamesi33a2_cpp.cpp -o tamesi33a2_cpp.exe -lev -lamqpcpp -pthread\n//         : Execute   : Command  : // \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\n//                                : ./tamesi33a2_cpp.exe &\n//         : Stop      : Typing   : [Ctrl]+[C]\n//\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u307e\u3059\u3002\n// \u30c7\u30ad\u30e5\u30fc\u306f\u300c1112\u300d\u3001\u30a8\u30f3\u30ad\u30e5\u30fc\u306f\u300c1113\u300d\u30ad\u30e5\u30fc\u306b\u5411\u3051\u3066\u884c\u3044\u307e\u3059\u3002\n// \u6a19\u6e96\u5165\u51fa\u529b\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3001\u753b\u9762\u306b\u306f\u63a5\u7d9a\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n#include <string> // std::string\n#include <iostream> // std::cout\n#include <sstream> // std::ostringstream\n#include <chrono>\n#include <thread> // sleep_for\n#include <future> // thread\n\n// \u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u7528\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\nstatic AMQP::Address ADDRESS{ \"amqp://localhost:5672\" };\n// 0 : enqueue\u7528\u8a2d\u5b9a\n// 1 : dequeue\u7528\u8a2d\u5b9a\n// 2 : deletequeue\u7528\u8a2d\u5b9a\nstatic const int ENQUEUE_INDEX = 0;\nstatic const int DEQUEUE_INDEX = 1;\nstatic const int NUM_INDEX = 2;\nstatic std::string name_queues[] = { \"1113\", \"1112\" };\nstatic std::string lifeSpan_queues[] = { \"duration\", \"duration\" };\n\nstatic void workConsume();\nstatic void enqueue(struct ev_loop* loop, AMQP::TcpConnection& connection, AMQP::TcpChannel& channel, std::string message);\n\n/// <summary>\n/// \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n/// \u3053\u308c\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n/// \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n/// \u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n/// </summary>\nnamespace rotationBuffer\n{\n\tconst int bufferSize = 100;\n\tstatic std::string buffer[bufferSize] = {};\n\tstatic int bufferCursors[2] = { 0, 0 };\n\tconst int PUT_INDEX = 0;\n\tconst int GET_INDEX = 1;\n\tstatic void putMessage(std::string message)\n\t{\n\t\tbuffer[bufferCursors[PUT_INDEX]] = message;\n\t\tbufferCursors[PUT_INDEX]++;\n\t\tif (!(bufferCursors[PUT_INDEX] < bufferSize))\n\t\t{\n\t\t\tbufferCursors[PUT_INDEX] = 0;\n\t\t}\n\t}\n\tstatic std::string getMessage()\n\t{\n\t\tif (\"\" != buffer[bufferCursors[GET_INDEX]])\n\t\t{\n\t\t\tstd::string message = buffer[bufferCursors[GET_INDEX]];\n\t\t\tbuffer[bufferCursors[GET_INDEX]] = \"\";\n\t\t\tbufferCursors[GET_INDEX]++;\n\t\t\tif (!(bufferCursors[GET_INDEX] < bufferSize))\n\t\t\t{\n\t\t\t\tbufferCursors[GET_INDEX] = 0;\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\t\treturn \"\";\n\t}\n}\n\nint main()\n{\n\t// \u30c7\u30ad\u30e5\u30fc\u306e\u5e38\u6642\u76e3\u8996\u3092\u30b9\u30bf\u30fc\u30c8\n\tauto th1 = std::thread([] { workConsume(); });\n\n\t// \u30a8\u30f3\u30ad\u30e5\u30fc\u7528\u306e\u63a5\u7d9a\n\t//auto* loop = EV_DEFAULT;\n\tstruct ev_loop* loop = EV_DEFAULT;\n\tAMQP::LibEvHandler handler{ loop };\n\tAMQP::TcpConnection connection{ &handler, ADDRESS };\n\tAMQP::TcpChannel channel{ &connection };\n\n\t// \u7121\u9650\u30eb\u30fc\u30d7\n\tfor (;;)\n\t{\n\t\tstd::string message = rotationBuffer::getMessage();\n\t\tif (\"\" != message)\n\t\t{\n\t\t\t// \u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u308b\u3002\n\t\t\tmessage += \"daze\";\n\n\t\t\t// \u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\n\t\t\tenqueue(loop, connection, channel, message);\n\t\t}\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(20));\n\t}\n\n\t// \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u81ea\u5206\u3067\u306f\u63a5\u7d9a\u3092\u5207\u3089\u306a\u3044\u3002\n\n\t// th1 \u30b9\u30ec\u30c3\u30c9\u306e\u7d42\u4e86\u3092\u5f85\u3064\n\tth1.join();\n\treturn 0;\n}\n\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u306b\u30a8\u30f3\u30ad\u30e5\u30fc\nstatic void enqueue(struct ev_loop* loop, AMQP::TcpConnection& connection, AMQP::TcpChannel& channel, std::string message)\n{\n\tstd::string exchange_name = \"myexchange\";\n\tstd::string routing_key = \"\";\n\n\tint lifeSpan = 0;\n\tif (\"durable\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::durable;\n\t}\n\telse if (\"autodelete\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::autodelete;\n\t}\n\telse if (\"passive\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::passive;\n\t}\n\telse if (\"exclusive\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::exclusive;\n\t}\n\n\tchannel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n\t\t.onError([](const char* errMsg) {\n\t\tstd::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n\t});\n\n\tchannel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n\t\t.onSuccess([&connection, &channel, &exchange_name, &routing_key, &message]() {\n\n\t\tif (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n\t\t\tstd::cerr << \"failed to publish?\\n\";\n\t\t}\n\n\t\t// break in ev loop.\n\t\tconnection.close();\n\t});\n\n\t// \u3053\u306e\u30eb\u30fc\u30d7\u306f\u3001\u30d1\u30d6\u30ea\u30c3\u30b7\u30e5\u5f8c\u306b\u629c\u3051\u308b\n\tev_run(loop);\n}\n\n// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n// startConsume() \u3057\u3066\u304a\u304f\u3053\u3068\u3002\nstatic std::string dequeue() {\n\tstd::string message;\n\n\twhile (\"\" == message)\n\t{\n\t\tmessage = rotationBuffer::getMessage();\n\t}\n\n\treturn message;\n}\n\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u76e3\u8996\u3092\u958b\u59cb\nstatic void workConsume()\n{\n\t// Connect to the AMQP service.\n\tauto *loop = EV_DEFAULT;\n\tAMQP::LibEvHandler handler(loop);\n\tAMQP::TcpConnection connection(&handler, ADDRESS);\n\tAMQP::TcpChannel channel(&connection);\n\n\t// I will go to the front of the box named \"1111\".\n\tint lifeSpan = 0;\n\tif (\"durable\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::durable;\n\t}\n\telse if (\"autodelete\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::autodelete;\n\t}\n\telse if (\"passive\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::passive;\n\t}\n\telse if (\"exclusive\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::exclusive;\n\t}\n\tchannel.declareQueue(name_queues[DEQUEUE_INDEX], lifeSpan);\n\n\t// I look inside the box.\n\tauto errorCb = [](const char *errMsg) {\n\t\tstd::cerr << \"My ID watching failed [\" << errMsg << \"]\" << std::endl;\n\t};\n\tauto messageCb = [&channel](const AMQP::Message &message, uint64_t deliveryTag, bool redelivered) {\n\n\t\tstd::string myString(message.body(), message.bodySize());\n\t\trotationBuffer::putMessage(myString);\n\n\t\tchannel.ack(deliveryTag);\n\t};\n\tchannel.consume(name_queues[DEQUEUE_INDEX])\n\t\t.onReceived(messageCb)\n\t\t.onError(errorCb);\n\n\t// I will keep on forever.\n\tev_run(loop, 0);\n\n\t// I will not come here.\n\treturn;\n}\n```\n\n\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u308b\u3002\n\n\u3053\u308c\u3092\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3002\n\n```\n./tamesi33a2_cpp.exe &\n```\n\n```\n# ./tamesi33a1_cs.exe\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n1\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u3044\u3066[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\ntako\n Enqueue(^q^) tako\n\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n1   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30a8\u30f3\u30ad\u30e5\u30fc\n2   : \u30e1\u30c3\u30bb\u30fc\u30b8   \u30c7\u30ad\u30e5\u30fc\nquit: \u7d42\u4e86\n\n2\n Please, wait dequeue... Or Press any key to menu.\n [interrupt!] Dequeue(^q^) takodaze\n```\n\ntakodaze \u304c\u8fd4\u3063\u3066\u304d\u305f\u3002C# \u2192 CPP \u2192 C# \u306f **\u304a\u3063\u3051\uff01**\n\nC++\u3067 \u30b9\u30ec\u30c3\u30c9\u3092\u66f8\u3044\u305f\u306e\u304c\u52d5\u3044\u3066\u3044\u308b\u3093\u3060\u308d\u3046\u3002\n\n# \u6d6e\u304b\u3080\u702c\u306e\u30c7\u30ad\u30e5\u30fc\u76e3\u8996\u3082\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u52d5\u304b\u305d\u3046\n\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb\u30fb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u898b\u3066\u66f8\u304d\u63db\u3048\u3066\u3044\u3053\u3046\u3002\n\n## \u540d\u524d\u3092\u5909\u3048\u305f\u3044\ngameserver.hpp \u3092 service_io.hpp \u306b\u540d\u524d\u3092\u5909\u3048\u3066\u3001\u540d\u524d\u7a7a\u9593 service_io \u3092\u4f5c\u308a\u305f\u3044\u3002\n\u305d\u306e\u540d\u524d\u7a7a\u9593\u306e\u4e2d\u306e\u95a2\u6570\u306f service_io::enqueue \u307f\u305f\u3044\u306a\u611f\u3058\u3067\u4f7f\u3048\u308b\u611f\u3058\u3067\u3002\n\n## \u901a\u5e38\u306e\u6a19\u6e96\u5165\u51fa\u529b\u304c\u58ca\u308c\u3066\u3044\u306a\u3044\u304b\u78ba\u8a8d\n\n```\n \u5bfe\u5c40\n    ====\n        usi\n            usiok\n        isready\n            readyok\n        usinewgame\n        position sfen lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1 moves\n        go\n            \u4f8b) bestmove 2g2f ponder 1c1d\n        quit\n```\n\n\u58ca\u308c\u3066\u306f\u306a\u3044\u3002\n\n\u6539\u9020\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e00\u5fdc\u8cbc\u308a\u4ed8\u3051\u3066\u304a\u304f\u3002\n\nservice_io.hpp\n\n```\n#pragma once\n\n#include <string> // std::string\n#include <iostream> // std::cout\n#include <sstream> // std::ostringstream\n#include \"common.hpp\"\n\n\n// #define UBUNTU\n\n\n// \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30fb\u30d7\u30ed\u30bb\u30b9\u7528\u306e\u51fa\u529b\n// #define BGP_COUT std::cout\n// #define BGP_ENDL std::endl\n#define BGP_COUT service_io::oss\n#define BGP_ENDL BGP_ENDL1, BGP_ENDL2\n#define BGP_ENDL1 std::endl\n#define BGP_ENDL2 service_io::enqueue (service_io::oss.str())\n\nnamespace service_io\n{\n\t// \u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u51fa\u529b\u3092\u3001\u6587\u5b57\u5217\u306b\u7f6e\u63db\u3059\u308b\u3082\u306e\n\tstatic std::ostringstream oss;\n}\n\n\n#ifdef UBUNTU\n// OS      : Ubuntu 16.04\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//\n// service_io.hpp\n\n// \u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u7528\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\n// \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30fb\u30d7\u30ed\u30bb\u30b9\u306b\u5207\u308a\u66ff\u3048\u3066\u4f7f\u7528\u3059\u308b\u53ef\u80fd\u6027\u3082\u8003\u616e\u3057\u305f\u5165\u51fa\u529bAPI\nnamespace service_io\n{\n\tstatic AMQP::Address ADDRESS{ \"amqp://localhost:5672\" };\n\t// 0 : enqueue\u7528\u8a2d\u5b9a\n\t// 1 : dequeue\u7528\u8a2d\u5b9a\n\tstatic const int ENQUEUE_INDEX = 0;\n\tstatic const int DEQUEUE_INDEX = 1;\n\tstatic const int NUM_INDEX = 2;\n\tstatic std::string name_queues[] = { \"1113\", \"1112\" };\n\tstatic std::string lifeSpan_queues[] = { \"duration\", \"duration\" };\n\n\t/// <summary>\n\t/// \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n\t/// \u3053\u308c\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n\t/// \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\t/// \u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n\t/// </summary>\n\tnamespace rotationBuffer\n\t{\n\t\tconst int bufferSize = 100;\n\t\tstatic std::string buffer[bufferSize] = {};\n\t\tstatic int bufferCursors[2] = { 0, 0 };\n\t\tconst int PUT_INDEX = 0;\n\t\tconst int GET_INDEX = 1;\n\t\tstatic void putMessage(std::string message)\n\t\t{\n\t\t\tbuffer[bufferCursors[PUT_INDEX]] = message;\n\t\t\tbufferCursors[PUT_INDEX]++;\n\t\t\tif (!(bufferCursors[PUT_INDEX] < bufferSize))\n\t\t\t{\n\t\t\t\tbufferCursors[PUT_INDEX] = 0;\n\t\t\t}\n\t\t}\n\t\tstatic std::string getMessage()\n\t\t{\n\t\t\tif (\"\" != buffer[bufferCursors[GET_INDEX]])\n\t\t\t{\n\t\t\t\tstd::string message = buffer[bufferCursors[GET_INDEX]];\n\t\t\t\tbuffer[bufferCursors[GET_INDEX]] = \"\";\n\t\t\t\tbufferCursors[GET_INDEX]++;\n\t\t\t\tif (!(bufferCursors[GET_INDEX] < bufferSize))\n\t\t\t\t{\n\t\t\t\t\tbufferCursors[GET_INDEX] = 0;\n\t\t\t\t}\n\t\t\t\treturn message;\n\t\t\t}\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t// \u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u306b\u30a8\u30f3\u30ad\u30e5\u30fc\n\t// \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30ab\u30f3\u30de\u533a\u5207\u308a\u300c,,,;\u300d\u3067\u4f7f\u308f\u308c\u3001\u4f55\u304b\u6570\u5b57\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u3063\u3066\u5fc5\u7136\u6027\u306f\u306a\u3044\u6570\u5b57 0 \u3092\u8fd4\u3057\u3066\u3044\u308b\n\tstatic int enqueue(std::string message) {\n\n\t\tauto* loop = EV_DEFAULT;\n\n\t\tAMQP::LibEvHandler handler{ loop };\n\t\tAMQP::TcpConnection connection{ &handler, ADDRESS };\n\t\tAMQP::TcpChannel channel{ &connection };\n\n\t\tstd::string exchange_name = \"myexchange\";\n\t\tstd::string routing_key = \"\";\n\n\t\tint lifeSpan = 0;\n\t\tif (\"durable\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::durable;\n\t\t}\n\t\telse if (\"autodelete\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::autodelete;\n\t\t}\n\t\telse if (\"passive\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::passive;\n\t\t}\n\t\telse if (\"exclusive\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::exclusive;\n\t\t}\n\n\t\tchannel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n\t\t\t.onError([](const char* errMsg) {\n\t\t\tstd::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n\t\t});\n\n\t\tchannel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n\t\t\t.onSuccess([&connection, &channel, &exchange_name, &routing_key, &message]() {\n\n\t\t\tif (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n\t\t\t\tstd::cerr << \"failed to publish?\\n\";\n\t\t\t}\n\n\t\t\t// break in ev loop.\n\t\t\tconnection.close();\n\t\t});\n\n\t\t// We will monitor until the connection is lost. Execute channel.declareQueue( ... ).\n\t\tev_run(loop);\n\n\t\treturn 0;\n\t}\n\n\t// service_io::workConsume() \u3092\u5225\u30b9\u30ec\u30c3\u30c9\u3067\u8d70\u3089\u305b\u3066\u304a\u304f\u3053\u3068\u3002\n\tstatic std::string dequeue() {\n\t\tstd::string message;\n\n\t\twhile (\"\" == message)\n\t\t{\n\t\t\tmessage = rotationBuffer::getMessage();\n\t\t}\n\n\t\treturn message;\n\t}\n\n\t// \u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u76e3\u8996\u3092\u958b\u59cb\n\tstatic void workConsume()\n\t{\n\t\t// Connect to the AMQP service.\n\t\tauto *loop = EV_DEFAULT;\n\t\tAMQP::LibEvHandler handler(loop);\n\t\tAMQP::TcpConnection connection(&handler, ADDRESS);\n\t\tAMQP::TcpChannel channel(&connection);\n\n\t\t// I will go to the front of the box named \"1111\".\n\t\tint lifeSpan = 0;\n\t\tif (\"durable\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::durable;\n\t\t}\n\t\telse if (\"autodelete\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::autodelete;\n\t\t}\n\t\telse if (\"passive\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::passive;\n\t\t}\n\t\telse if (\"exclusive\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::exclusive;\n\t\t}\n\t\tchannel.declareQueue(name_queues[DEQUEUE_INDEX], lifeSpan);\n\n\t\t// I look inside the box.\n\t\tauto errorCb = [](const char *errMsg) {\n\t\t\tstd::cerr << \"My ID watching failed [\" << errMsg << \"]\" << std::endl;\n\t\t};\n\t\tauto messageCb = [&channel](const AMQP::Message &message, uint64_t deliveryTag, bool redelivered) {\n\n\t\t\tstd::string myString(message.body(), message.bodySize());\n\t\t\trotationBuffer::putMessage(myString);\n\n\t\t\tchannel.ack(deliveryTag);\n\t\t};\n\t\tchannel.consume(name_queues[DEQUEUE_INDEX])\n\t\t\t.onReceived(messageCb)\n\t\t\t.onError(errorCb);\n\n\t\t// I will keep on forever.\n\t\tev_run(loop, 0);\n\n\t\t// I will not come here.\n\t\treturn;\n\t}\n}\n\n#else\n\n// \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30fb\u30d7\u30ed\u30bb\u30b9\u306b\u5207\u308a\u66ff\u3048\u3066\u4f7f\u7528\u3059\u308b\u53ef\u80fd\u6027\u3082\u8003\u616e\u3057\u305f\u5165\u51fa\u529bAPI\nnamespace service_io\n{\n\tstatic int enqueue(std::string message) {\n\t\tstd::cout << IOLock << message << std::endl << IOUnlock;\n\t\toss.str(std::string());// \u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u3066\u30af\u30ea\u30a2\u30fc\u3059\u308b\n\t\treturn 0;\n\t}\n\n\tstatic std::string dequeue() {\n\t\tstd::string cmd;\n\t\tif (!std::getline(std::cin, cmd))\n\t\t{\n\t\t\tcmd = \"quit\";\n\t\t}\n\t\treturn cmd;\n\t}\n}\n#endif\n\nclass ServiceIo\n{\npublic:\n\tServiceIo();\n\t~ServiceIo();\n};\n```\n\nservice_io.cpp\n\n```\n//#include \"stdafx.h\"\n#include \"service_io.hpp\"\n\nServiceIo::ServiceIo()\n{\n}\n\nServiceIo::~ServiceIo()\n{\n}\n```\n\nusi.cpp \u629c\u7c8b\n\n```\nvoid Searcher::doUSICommandLoop(int argc, char* argv[]) {\n\n#if UBUNTU\n\t// \u30c7\u30ad\u30e5\u30fc\u306e\u5e38\u6642\u76e3\u8996\u3092\u30b9\u30bf\u30fc\u30c8\n\tauto th1 = std::thread([] { service_io::workConsume(); });\n#endif\n\n\tbool dialogue = false;\n\t// \u300c./apery\u300d\u306e\u3088\u3046\u306b\u5f15\u6570\u7121\u3057\u3067\u6253\u9375\u3057\u3066\u5b9f\u884c\u3055\u308c\u305f\u5834\u5408\u306b\u9650\u308a\u3001\u306a\u3093\u3069\u3082\u6a19\u6e96\u5165\u529b\u3092\u5f85\u3064\u3002\n\tif (argc == 1)\n\t{\n\t\tdialogue = true;\n\t}\n\tbool evalTableIsRead = false;\n\tPosition pos(DefaultStartPositionSFEN, threads.main(), thisptr);\n\n\tstd::string cmd;\n\tstd::string token;\n\n\tfor (int i = 1; i < argc; ++i)\n\t{\n\t\tcmd += std::string(argv[i]) + \" \";\n\t}\n\n\tdo {\n\t\t// \u6587\u5b57\u304c\u6253\u305f\u308c\u305f\u3089\u305d\u306e\u6587\u5b57\u3092\u3001\u7a7a\u6587\u5b57\u3092\u6253\u305f\u308c\u305f\u3089 \"quit\" \u6271\u3044\u3068\u3059\u308b\u3002\n\t\tif (dialogue)\n\t\t{\n\t\t\tcmd = service_io::dequeue();\n\t\t}\n\n\t\t// \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6700\u521d\u306e1\u30c8\u30fc\u30af\u30f3\u3092\u62fe\u3046\n\t\tstd::istringstream ssCmd(cmd);\n\t\tssCmd >> std::skipws >> token;\n\n\t\tif (token == \"--msgqueue\") {\n#if UBUNTU\n\t\t\tssCmd >> service_io::name_queues[ENQUEUE_INDEX];\n\t\t\tssCmd >> service_io::lifeSpan_queues[ENQUEUE_INDEX];\n\t\t\tssCmd >> service_io::name_queues[DEQUEUE_INDEX];\n\t\t\tssCmd >> service_io::lifeSpan_queues[DEQUEUE_INDEX];\n\t\t\tdialogue = true;\n#else\n\t\t\tstd::cerr << \"Command line parameter error : \\\"--msgqueue\\\" option for UBUNTU.\";\n#endif\n\t\t}\n\t\telse if (token == \"quit\" || token == \"stop\" || token == \"ponderhit\" || token == \"gameover\") {\n\t\t\tif (token != \"ponderhit\" || signals.stopOnPonderHit) {\n\t\t\t\tsignals.stop = true;\n\t\t\t\tthreads.main()->startSearching(true);\n\t\t\t}\n\t\t\telse\n\t\t\t\tlimits.ponder = false;\n\t\t\tif (token == \"ponderhit\" && limits.moveTime != 0)\n\t\t\t\tlimits.moveTime += timeManager.elapsed();\n\t\t}\n\t\telse if (token == \"go\") go(pos, ssCmd);\n\t\telse if (token == \"position\") setPosition(pos, ssCmd);\n\t\telse if (token == \"usinewgame\"); // isready \u3067\u6e96\u5099\u306f\u51fa\u6765\u305f\u306e\u3067\u3001\u5bfe\u5c40\u958b\u59cb\u6642\u306b\u7279\u306b\u3059\u308b\u4e8b\u306f\u306a\u3044\u3002\n\t\telse if (token == \"usi\") SYNCCOUT << \"id name \" << std::string(options[\"Engine_Name\"])\n\t\t\t<< \"\\nid author Hiraoka Takuya\"\n\t\t\t<< \"\\n\" << options\n\t\t\t<< \"\\nusiok\" << SYNCENDL;\n\t\telse if (token == \"isready\") { // \u5bfe\u5c40\u958b\u59cb\u524d\u306e\u6e96\u5099\u3002\n\t\t\ttt.clear();\n\t\t\tthreads.main()->previousScore = ScoreInfinite;\n\t\t\tif (!evalTableIsRead) {\n\t\t\t\t// \u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3066 Evaluator::init() \u3092\u547c\u3093\u3060\u76f4\u5f8c\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7834\u68c4\u3059\u308b\u3002\n\t\t\t\t// \u8a55\u4fa1\u95a2\u6570\u306e\u6b21\u5143\u4e0b\u3052\u3092\u3057\u305f\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3059\u308b\u5206\u306e\u30e1\u30e2\u30ea\u304c\u7121\u99c4\u306a\u70ba\u3001\n\t\t\t\tstd::unique_ptr<Evaluator>(new Evaluator)->init(Evaluator::evalDir, true);\n\t\t\t\tevalTableIsRead = true;\n\t\t\t}\n\t\t\tSYNCCOUT << \"readyok\" << SYNCENDL;\n\t\t}\n\t\telse if (token == \"setoption\") setOption(ssCmd);\n\t\telse if (token == \"write_eval\") { // \u5bfe\u5c40\u3067\u4f7f\u3046\u70ba\u306e\u8a55\u4fa1\u95a2\u6570\u30d0\u30a4\u30ca\u30ea\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\u3002\n\t\t\tif (!evalTableIsRead)\n\t\t\t\tstd::unique_ptr<Evaluator>(new Evaluator)->init(Evaluator::evalDir, true);\n\t\t\tEvaluator::writeSynthesized(Evaluator::evalDir);\n\t\t}\n#if defined LEARN\n\t\telse if (token == \"l\") {\n\t\t\tauto learner = std::unique_ptr<Learner>(new Learner);\n\t\t\tlearner->learn(pos, ssCmd);\n\t\t}\n\t\telse if (token == \"make_teacher\") {\n\t\t\tif (!evalTableIsRead) {\n\t\t\t\tstd::unique_ptr<Evaluator>(new Evaluator)->init(Evaluator::evalDir, true);\n\t\t\t\tevalTableIsRead = true;\n\t\t\t}\n\t\t\tmake_teacher(ssCmd);\n\t\t}\n\t\telse if (token == \"use_teacher\") {\n\t\t\tif (!evalTableIsRead) {\n\t\t\t\tstd::unique_ptr<Evaluator>(new Evaluator)->init(Evaluator::evalDir, true);\n\t\t\t\tevalTableIsRead = true;\n\t\t\t}\n\t\t\tuse_teacher(pos, ssCmd);\n\t\t}\n\t\telse if (token == \"check_teacher\") {\n\t\t\tcheck_teacher(ssCmd);\n\t\t}\n\t\telse if (token == \"print\") printEvalTable(SQ88, f_gold + SQ78, f_gold, false);\n#endif\n#if !defined MINIMUL\n\t\t// \u4ee5\u4e0b\u3001\u30c7\u30d0\u30c3\u30b0\u7528\n\t\telse if (token == \"bench\") {\n\t\t\tif (!evalTableIsRead) {\n\t\t\t\tstd::unique_ptr<Evaluator>(new Evaluator)->init(Evaluator::evalDir, true);\n\t\t\t\tevalTableIsRead = true;\n\t\t\t}\n\t\t\tbenchmark(pos);\n\t\t}\n\t\telse if (token == \"key\") SYNCCOUT << pos.getKey() << SYNCENDL;\n\t\telse if (token == \"tosfen\") SYNCCOUT << pos.toSFEN() << SYNCENDL;\n\t\telse if (token == \"eval\") std::cout << evaluateUnUseDiff(pos) / FVScale << std::endl;\n\t\telse if (token == \"d\") pos.print();\n\t\telse if (token == \"s\") measureGenerateMoves(pos);\n\t\telse if (token == \"t\") std::cout << pos.mateMoveIn1Ply().toCSA() << std::endl;\n\t\telse if (token == \"b\") makeBook(pos, ssCmd);\n#endif\n\t\telse                           SYNCCOUT << \"unknown command: \" << cmd << SYNCENDL;\n\t} while (token != \"quit\" && dialogue);\n\n#if UBUNTU\n\t// th1 \u30b9\u30ec\u30c3\u30c9\u306e\u7d42\u4e86\u3092\u5f85\u3064\n\tth1.join();\n#endif\n\n\tthreads.main()->waitForSearchFinished();\n}\n```\n\n\u3053\u308c\u3060\u3051\u3060\u3063\u305f\u308d\u3046\u304b\uff1f\n\n```\nfind . \\( -name \\Makefile -o -name \\*.hpp -o -name \\*.cpp -o -name \\*.sfen -o -name \\*.txt \\) -type f | xargs -n 10 nkf -Lu --overwrite\n```\n\n\u6539\u884c\u306e\u5909\u63db\u306f\u3053\u308c\u3002\u3069\u3063\u304b\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u305f\u3044\u304c\u3002\n\n```\nnano service_io.hpp\n```\n\n\u3053\u3046\u3057\u3066\u3001\n\n```\n // #define UBUNTU\n```\n\n\u306e\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3059\u3002\n\n## \u30d8\u30c3\u30c0\u30fb\u30d5\u30a1\u30a4\u30eb\u306e\u518d\u8aad\u8fbc\u307f\u9632\u6b62\n\n```\nIn file included from bitboard.hpp:25:0,\n                 from main.cpp:30:\nservice_io.hpp:9:0: warning: \"UBUNTU\" redefined\n #define UBUNTU\n ^\n```\n\n\u3042\u30fc\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u4f55\u5ea6\u3082\u8aad\u8fbc\u3093\u3067\u308b\u304b\u3082\u3002\n\n```\n#pragma once\n```\n\nC++11 \u3058\u3083\u3053\u308c\u306f\u52b9\u304b\u306a\u3044\u3093\u3060\u308d\u3046\u304b\uff1f\n\n```\n#ifndef APERY_SERVICE_IO_HPP\n#define APERY_SERVICE_IO_HPP\n```\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u5192\u982d\u306b\u3053\u3046\u66f8\u3044\u3066\u3001\n\n```\n#endif // #ifndef APERY_SERVICE_IO_HPP\n```\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u306b\u3053\u3046\u66f8\u3053\u3046\u3002\n\n\u3044\u3084\u3001\u305d\u3046\u3067\u306f\u7121\u304f\u3066 Makefile \u306b -DUBUNTU \u3068\u66f8\u304d\u8db3\u3057\u305f\u3093\u3058\u3083\u306a\u304b\u3063\u305f\u304b\u3002\n\nservice_io.hpp\n\n```\n// #define UBUNTU\n```\n\n\u3084\u3063\u3071\u3000\u3053\u3046\u3059\u308b\u3002\n\n```\nusi.cpp: In static member function \u2018static void Searcher::doUSICommandLoop(int, char**)\u2019                    :\nusi.cpp:1061:37: error: \u2018ENQUEUE_INDEX\u2019 was not declared in this scope\n    ssCmd >> service_io::name_queues[ENQUEUE_INDEX];\n                                     ^\nusi.cpp:1061:37: note: suggested alternative:\nIn file included from usi.cpp:22:0:\nservice_io.hpp:57:19: note:   \u2018service_io::ENQUEUE_INDEX\u2019\n  static const int ENQUEUE_INDEX = 0;\n                   ^\nusi.cpp:1063:37: error: \u2018DEQUEUE_INDEX\u2019 was not declared in this scope\n    ssCmd >> service_io::name_queues[DEQUEUE_INDEX];\n                                     ^\nusi.cpp:1063:37: note: suggested alternative:\nIn file included from usi.cpp:22:0:\nservice_io.hpp:58:19: note:   \u2018service_io::DEQUEUE_INDEX\u2019\n  static const int DEQUEUE_INDEX = 1;\n                   ^\n```\n\n\u3053\u308c\u3001\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u629c\u3051\u304b\uff1f\n\n\u305d\u3046\u3060\u3063\u305f\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u3063\u305f\u3002\n\n```\n# mv apery ../bin/apery\n# cd ../bin\n# ./apery --msgqueue 1114 durable 1115 durable &\n```\n\n1114 \u3068\u30011115\u3001\u307e\u305a\u306f\u8a66\u3057\u3067 1112 \u3068 1113 \u3067\u3044\u3044\u304b\u3002\n\n```\n            a1              a2\n                \u2192 1112 \u2192\n                \u2190 1113 \u2190\n\n                \u2192 1115 \u2192\n                \u2190 1114 \u2190\n```\n\n\u56f3\u306b\u3059\u308b\u3068\u3001\u3053\u3046\u304b\u3002\u306a\u3093\u304b\u3059\u3063\u304d\u308a\u3057\u306a\u3044\u306a\u3002\n\n```\n            a1              a2\n                \u2192 1112 \u2192\n                \u2190 1113 \u2190\n\n                \u2192 1114 \u2192\n                \u2190 1115 \u2190\n```\n\n\u3053\u3046\u5909\u3048\u3088\u3046\u3002\n\n```\n# ./apery --msgqueue 1113 durable 1112 durable &\n[2] 32479\n# My ID watching failed [Channel is in error state]\n```\n\n**\u30a8\u30e9\u30fc\u304c\u8fd4\u3063\u3066\u304f\u308b\u3060\u3051\u3001\u524d\u9032\u3060\u306a\u3002**\n\n```\n\t\tauto errorCb = [](const char *errMsg) {\n\t\t\tstd::cerr << \"My ID watching failed [\" << errMsg << \"] lifeSpan_queues[\" << DEQUEUE_INDEX << \"]=[\" << lifeSpan_queues[DEQUEUE_INDEX] << \"]\" << std::endl;\n\t\t};\n```\n\n\u3053\u3046\u66f8\u304f\u3068\u3001\n\n```\n# ./apery --msgqueue 1113 durable 1112 durable &\n[3] 32746\n# My ID watching failed [Channel is in error state] lifeSpan_queues[1]=[durable]\n```\n\n\u3053\u3046\u306a\u308b\u3002\n\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u4f55\u304b\u30c0\u30e1\u306a\u306e\u304b\uff1f\n\n\u30ad\u30e5\u30fc\u3092\u5909\u3048\u3066\u307f\u308b\u304b\u3002\n\n```\n# ./apery --msgqueue 1115 durable 1114 durable &\n[4] 410\n```\n\n\u4eca\u5ea6\u306f\u30a8\u30e9\u30fc\u5fdc\u7b54\u3082\u8fd4\u3063\u3066\u3053\u306a\u3044\u3002\u3058\u3083\u3042\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u3088\u3046\u3002\n\n```\n# jobs\n[1]-  Running                 ./tamesi33a2_cpp.exe &  (wd: /home/\u2605user/shogi/cpp_service)\n[4]+  Running                 ./apery --msgqueue 1115 durable 1114 durable &\n```\n\n\u306a\u3093\u304b\u4e0a\u306e\u3084\u3064\u304c\u3000\u5e72\u6e09\u3057\u3066\u306a\u3044\u304b\uff1f\n\n```\n# kill %1\n```\n\n## \u30c6\u30b9\u30c8\n\n```\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1114\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1115\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n<---- [interrupt!] Dequeue(^q^) usi\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? >\n```\n\n\u306a\u3093\u304b\u300cusi\u300d\u304c\u98db\u3093\u3067\u304d\u305f\u306e\u304b\u3002\u65e2\u306b\u30ad\u30e5\u30fc\u306b\u5165\u3063\u3066\u305f\u3068\u304b\u3002\n\u3058\u3083\u3042\u300cusi\u300d\u3092\u9001\u3063\u3066\u307f\u308b\u304b\u3002\n\n```\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > usi\n Enqueue(^q^) usi\napery: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\nEnqueue? >\n```\n\n**\u6d6e\u304b\u3080\u702c\u304b\u3089 \u30a8\u30e9\u30fc\u304c\u8fd4\u3063\u3066\u304d\u305f\u3002\u30eb\u30fc\u30d7\u304c\u518d\u5e30\u7684\u306a\u5b9f\u884c\u3067\u3000\u3046\u30fc\u3093\uff1f**\n\n**\u30a8\u30e9\u30fc\u304c\u8fd4\u3063\u3066\u304f\u308b\u3060\u3051\u9032\u6b69\u3060\u306a\u3002**\n\n\u300cIs that ev_run()/ev_loop() inhibited in multiple thread of current libev?\u300d\uff08http://lists.schmorp.de\uff09\nhttp://lists.schmorp.de/pipermail/libev/2011q4/001659.html\n\nev_run( ) \u304c\u518d\u5e30\u4e2d\u306b\u958b\u653e\u3057\u3066\u3044\u308b\u306e\u304c\u691c\u51fa\u3055\u308c\u308b\u3068\u3044\u3046\u306e\u306f\u3000\u3069\u3046\u3044\u3046\u3053\u3068\u306a\u306e\u304b\u3002\n\u518d\u5e30\u3057\u3066\u3044\u308b\u306e\u304b\uff1f\n\n\u30a8\u30f3\u30ad\u30e5\u30fc\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308b\u3002\n\n```\n\t\tchannel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n\t\t\t.onSuccess([&connection, &channel, &exchange_name, &routing_key, &message]() {\n\n\t\t\tif (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n\t\t\t\tstd::cerr << \"failed to publish?\\n\";\n\t\t\t}\n\n\t\t\t// break in ev loop.\n\t\t\tconnection.close();\n\t\t});\n```\n\nconnection.close(); \u3067\u3001\u305f\u3057\u304b\u306b **\u63a5\u7d9a\u3092\u958b\u653e** \u3057\u3066\u3044\u308b\u3002\n\u3058\u3083\u3042\u3001\u30c7\u30ad\u30e5\u30fc\u3068\u30a8\u30f3\u30ad\u30e5\u30fc\u3067\u3001\u63a5\u7d9a\u306f\u5225\u306b\u884c\u3063\u305f\u65b9\u304c\u3044\u3044\u306e\u304b\u3002\n\n\u66f8\u304d\u76f4\u3059\u3002\n\n\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u30af\u30ed\u30fc\u30ba\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u3088\u304f\u78ba\u8a8d\u3002\n\n\u300cAMQP-CPP/tests/libev.cpp\u300d\uff08CopernicaMarketingSoftware/AMQP-CPP\uff09\nhttps://github.com/CopernicaMarketingSoftware/AMQP-CPP/blob/master/tests/libev.cpp\n\nonSuccess \u306e\u4e2d\u3067\u5207\u65ad\u3057\u3066\u306a\u3044\u304b\uff1f\n\n```\n\t\tchannel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n\t\t\t.onError([](const char* errMsg) {\n\t\t\t\tstd::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n\t\t\t});\n\n\t\tchannel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n\t\t\t.onSuccess([&connection, &channel, &exchange_name, &routing_key, &message]() {\n\n\t\t\t\tif (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n\t\t\t\t\tstd::cerr << \"failed to publish?\\n\";\n\t\t\t\t}\n\n\t\t\t\t// break in ev loop.\n\t\t\t\tconnection.close();\n\t\t\t});\n```\n\n\u73fe\u72b6\u3001onSuccess \u306e\u4e2d\u3067\u5207\u65ad\u3057\u3066\u3044\u308b\u304c\u3001bindQueue \u3058\u3083\u306a\u304f\u3066 declareQueue \u306e onSuccess \u306e\u4e2d\u3067\u5207\u65ad\u3057\u305f\u65b9\u304c\u3044\u3044\u3093\u3060\u308d\u3046\u304b\uff1f\n\n```\n\t\tchannel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n\t\t\t.onSuccess([&connection](const std::string &queueName, uint32_t messagecount, uint32_t consumercount) {\n\t\t\t\tstd::cout << \"declared queue onSuccess queueName=[\" << queueName << \"] messagecount=[\" << messagecount << \"] consumercount=[\" << consumercount << \"]\" << std::endl;\n\t\t\t\t// break in ev loop.\n\t\t\t\tconnection.close();\n\t\t\t})\n\t\t\t.onError([](const char* errMsg) {\n\t\t\t\tstd::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n\t\t\t});\n\n\t\tchannel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n\t\t\t.onSuccess([ &channel, &exchange_name, &routing_key, &message]() {\n\t\t\t\t// &connection,\n\n\t\t\t\tif (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n\t\t\t\t\tstd::cerr << \"failed to publish?\\n\";\n\t\t\t\t}\n\n\t\t\t\t//// break in ev loop.\n\t\t\t\t//connection.close();\n\t\t\t});\n```\n\n\u3053\u3093\u306a\u3093\u3067\u3044\u3044\u3093\u3060\u308d\u3046\u304b\uff1f\n\n```\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1114\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1115\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > usi\napery: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n Enqueue(^q^) usi\n```\n\n\u30c0\u30e1\u306a\u3088\u3046\u3060\u3002\u3053\u306e\u30a8\u30e9\u30fc\u306f\u4f55\u306a\u306e\u304b\u3002\n\n```\n# ps aux | grep apery\nroot      1582  0.0  0.0  12936   988 pts/8    S+   14:11   0:00 grep --color=auto apery\n```\n\n\u306a\u3093\u3089\u304b\u306e\u7406\u7531\u3067\u843d\u3061\u3066\u3044\u3066\u3001\u305d\u308c\u3067\u30eb\u30fc\u30d7\u3092\u629c\u3051\u3066\u3044\u308b\u306e\u3060\u308d\u3046\u304b\uff1f\u3069\u3053\u304b\u306b\u30a8\u30e9\u30fc\u30ed\u30b0\u306f\u5410\u304b\u308c\u3066\u3044\u306a\u3044\u3060\u308d\u3046\u304b\uff1f\n\n```\n# ls -l\ntotal 4076096\ndrwxr-xr-x 2 root root       4096 Mar 12 07:09 20161007\n-rwxr-xr-x 1 root root    1911208 Mar 13 14:04 apery\n-rw-r--r-- 1 root root       1531 Mar 12 05:48 benchmark.sfen\n-rw-r--r-- 1 root root 4171912806 Mar 12 05:49 log1\n-rw------- 1 root root          0 Mar 12 05:49 nohup.out\n```\n\nlog1 \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306f\u30d0\u30b0\u3063\u3066\u305d\u3046\u3060\u3002\u6d88\u305d\u3046\u304b\u3002\n\n```\nrm log1\n```\n\n```\nroot@tk2-217-18401:/home/\u2605user/shogi/ukamuse_sdt4_child4/bin# ./apery\nusi\nisready\nusinewgame\nposition sfen lnsgkgsnl/1r5b1/ppppppppp/9/9/9/PPPPPPPPP/1B5R1/LNSGKGSNL b - 1 moves\ngo\nquit\n\n```\n\n\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30fb\u30d7\u30ed\u30bb\u30b9\u5c02\u7528\u306b\u6539\u9020\u3057\u305f\u306e\u3067\u3001\u5fdc\u7b54\u306f\u753b\u9762\u306b\u51fa\u3066\u3053\u306a\u3044\u3002\n\n\u305d\u308c\u306b\u3057\u3066\u3082\u3001quit \u3068\u6253\u3063\u3066\u3082\u51fa\u3066\u3053\u306a\u3044\u3093\u3060\u306a\u3002\n\u305d\u3046\u3044\u3048\u3070\u3001\u6a19\u6e96\u5165\u51fa\u529b\u306e\u4e21\u65b9\u3092\u898b\u3066\u306a\u3044\u3093\u3060\u3063\u305f\u3002\n\n```\n# ps aux | grep apery\nroot      1718 97.9 14.3 1481912 145836 pts/8  Rl   14:20   0:25 ./apery --msgqueue 1115 durable 1114 durable\nroot      1733  0.0  0.0  12936   984 pts/8    S+   14:20   0:00 grep --color=auto apery\n```\n\n\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u3066\u5b9f\u884c\u3059\u308c\u3070\u3088\u304b\u3063\u305f\u306e\u304b\uff1f\n\n```\n# ./apery --msgqueue 1115 durable 1114 durable 2> ./apery.err.log &\n[2] 1761\n# jobs\n[2]+  Running                 ./apery --msgqueue 1115 durable 1114 durable 2> ./apery.err.log &\n```\n\n\u3053\u308c\u3067\u3069\u3046\u304b\uff1f\n\n```\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1114\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1115\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > usi\n Enqueue(^q^) usi\nEnqueue? >\n```\n\n\u30a8\u30e9\u30fc\u51fa\u529b\u304c\u3000\u3069\u3063\u304b\u3044\u3063\u305f\u3060\u3051\u3058\u3083\u306a\u3044\u304b\uff1f\n\n```\n# rabbitmqctl list_queues\nListing queues ...\n1112    0\n1111    0\n1113    0\nmyqueue 25\n1115    0\n1114    0\n```\n\n```\n# ls\n20161007  apery  apery.err.log  benchmark.sfen  nohup.out\n# nano log1\n```\n\n```\napery: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n```\n\n\u307e\u3042\u3001\u305d\u3046\u3044\u3046\u3053\u3068\u306a\u306e\u3060\u3063\u305f\u3002\u610f\u5473\u306a\u3044\u3002\n\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\u3067\u3082\u3000\u3088\u304f\u8aad\u3080\u304b\u3002\n\n\u3053\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f ev.c \u30d5\u30a1\u30a4\u30eb\u306e\u30a2\u30b5\u30fc\u30c8\u304c\u51fa\u3057\u3066\u3044\u308b\u306e\u304b\u3002\n\u81ea\u5206\u306e\u30b3\u30fc\u30c9\u3067\u3082\u30a8\u30e9\u30fc\u3092\u62fe\u3048\u306a\u3044\u304b\u3002\n\n\u4f8b\u3048\u3070\u3000\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n\n```\n\t\tAMQP::TcpChannel channel{ &connection };\n\n\t\tchannel.onError([](const char *errMsg) {\n\t\t\t// report error\n\t\t\tstd::cerr << \"(^q^)channel error: \" << errMsg << std::endl;\n\t\t});\n```\n\n\u5909\u308f\u308a\u7121\u3057\u3002\n\n```\n\t\tchannel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n\t\t\t.onSuccess([ &channel, &exchange_name, &routing_key, &message]() {\n\t\t\t\t// &connection,\n\n\t\t\t\tif (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n\t\t\t\t\tstd::cerr << \"failed to publish?\\n\";\n\t\t\t\t}\n\n\t\t\t\t//// break in ev loop.\n\t\t\t\t//connection.close();\n\t\t\t})\n\t\t\t.onError([](const char *errMsg) {\n\t\t\t\t// report error\n\t\t\t\tstd::cerr << \"(^q^)channel bindQueue error: \" << errMsg << std::endl;\n\t\t\t});\n```\n\n\u3058\u3083\u3042 bindQueue \u306b\u3082 onError \u3092\u4ed8\u3051\u308c\u306a\u3044\u3060\u308d\u3046\u304b\uff1f\n\n```\n# ./apery --msgqueue 1115 durable 1114 durable &\n[1] 2632\nroot@tk2-217-18401:/home/\u2605user/shogi/ukamuse_sdt4_child4/bin# apery: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n\n[1]+  Aborted                 ./apery --msgqueue 1115 durable 1114 durable\n```\n\n\u5b9f\u884c\u3057\u305f\u76f4\u5f8c\u306b\u843d\u3061\u305f\u3088\u3046\u306a\u3002\n\n```\n# ./apery --msgqueue 1115 durable 1114 durable &\n[1] 2655\nroot@tk2-217-18401:/home/\u2605user/shogi/ukamuse_sdt4_child4/bin# ps aux | grep apery\nroot      2655  100 14.3 1481928 145852 pts/8  Rl   14:55   0:14 ./apery --msgqueue 1115 durable 1114 durable\nroot      2663  0.0  0.0  12936   988 pts/8    S+   14:56   0:00 grep --color=auto apery\n```\n\n\u3082\u3046\uff11\u56de\u3084\u3063\u305f\u3089\u5927\u4e08\u592b\u3060\u3063\u305f\u3002\n\n```\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > usi\napery: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n Enqueue(^q^) usi\n```\n\n\u305c\u3093\u305c\u3093\u5909\u308f\u3089\u3093\u3002\u30b0\u30b0\u308b\u304b\u3002\n\n\u300clibev: ev_loop recursion during release detected in RPC\u300d\uff08Apache\uff09\nhttps://issues.apache.org/jira/browse/KUDU-12\n\n\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u308b\u3068\u3044\u3046\u306e\u306f\u3042\u308b\u3093\u3060\u304c\u3001\u89e3\u6c7a\u65b9\u6cd5\u304c\u66f8\u3044\u3066\u306a\u3044\u306e\u306a\u3002\n\n\u300clibev\u300d\uff08dirtysalt.github.io\uff09\nhttps://dirtysalt.github.io/libev.html\n\n\u30bd\u30fc\u30b9\u3092\u898b\u305b\u3089\u308c\u3066\u3082\u3001\u3084\u3063\u3071\u308a\u89e3\u6c7a\u65b9\u6cd5\u304c\u5206\u304b\u3089\u3093\u3002\n\n\u300cIs that ev_run()/ev_loop() inhibited in multiple thread of\tcurrent libev?\u300d\uff08http://lists.schmorp.de\uff09\nhttp://lists.schmorp.de/pipermail/libev/2011q4/001671.html\n\n\u300cExceptions when a TCPSocket connection timed out in and out of the Reactor using Kernel.timeout #97\u300d\uff08celluloid/celluloid-io\uff09\nhttps://github.com/celluloid/celluloid-io/issues/97\n\n\u30ab\u30fc\u30cd\u30eb\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\uff1f\n\n\u300c\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30fb\u30b5\u30fc\u30d0\u30fc\u306e\u7d44\u7e54\u5185libev\u306f\u3067\u518d\u5e30\uff08EVBREAK_RECURSE\uff09\u300d\uff08stack overflow\uff09\nhttp://ru.stackoverflow.com/questions/173685/%D0%A0%D0%B5%D0%BA%D1%83%D1%80%D1%81%D0%B8%D0%B2%D0%BD%D1%8B%D0%B9-%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2-%D0%B2-libev-evbreak-recurse-%D0%BF%D1%80%D0%B8-%D0%BE%D1%80%D0%B3%D0%B0%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-%D0%BC%D0%BD%D0%BE%D0%B3%D0%BE%D0%BF%D0%BE%D1%82%D0%BE%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D1%81%D0%B5%D1%80%D0%B2%D0%B5\n\n\u30ed\u30b7\u30a2\u8a9e\u3092\u30b0\u30fc\u30b0\u30eb\u7ffb\u8a33\u3002\n\n\u300clibev \u307e\u3068\u3081\u300d\uff08Qiita\uff09\nhttp://qiita.com/janus_wel/items/51bbd7517ab237a0b65c\n\n\u300clibev\u306b\u3088\u308b\u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300d\uff08Qiita\uff09\nhttp://qiita.com/0xfffffff7/items/c5287067623fdbd2c3cb\n\n\u3069\u3046\u3059\u3063\u304b\u306a\u30fc\u3002\n\n# tamesi33a2_cpp.exe \u3067\u305d\u3093\u306a\u30a8\u30e9\u30fc\u3042\u3063\u305f\u3060\u308d\u3046\u304b\u3002\n\n```\n# ./tamesi33a2_cpp.exe &\n```\n\n\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3057\u3066\u3001\n\n```\n# ./tamesi34_cs.exe\n```\n\n\u305f\u3081\u3057\uff13\uff14\u3067\u30a2\u30af\u30bb\u30b9\u3002\n\n```\na1            a2 \n   -> 1112 ->\n   <- 1113 <-\n```\n\n```\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1112\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1113\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\nUnhandled Exception:\nRabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=\"PRECONDITION_FAILED - inequivalent arg 'durable' for queue '1113' in vhost '/': received 'true' but current is 'false'\", classId=50, methodId=10, cause=\n  at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply () <0x409c15e0 + 0x00103> in <filename unknown>:0\n  at RabbitMQ.Client.Impl.ModelBase.ModelRpc (RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, System.Byte[] body) <0x409bf4b0 + 0x000f9> in <filename unknown>:0\n  at RabbitMQ.Client.Framing.Impl.v0_8.Model.QueueDeclare (System.String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary arguments) <0x409c3810 + 0x00113> in <filename unknown>:0\n  at UsagiMQ.Program.GetChannel (Int32 index) <0x409851f0 + 0x00138> in <filename unknown>:0\n  at UsagiMQ.Program.StartConsume (System.String name_queue, Int32 lifeSpan_queue) <0x40985110 + 0x0002b> in <filename unknown>:0\n  at UsagiMQ.Program.Main (System.String[] args) <0x40980d50 + 0x002eb> in <filename unknown>:0\n[ERROR] FATAL UNHANDLED EXCEPTION: RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=\"PRECONDITION_FAILED - inequivalent arg 'durable' for queue '1113' in vhost '/': received 'true' but current is 'false'\", classId=50, methodId=10, cause=\n  at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply () <0x409c15e0 + 0x00103> in <filename unknown>:0\n  at RabbitMQ.Client.Impl.ModelBase.ModelRpc (RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, System.Byte[] body) <0x409bf4b0 + 0x000f9> in <filename unknown>:0\n  at RabbitMQ.Client.Framing.Impl.v0_8.Model.QueueDeclare (System.String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary arguments) <0x409c3810 + 0x00113> in <filename unknown>:0\n  at UsagiMQ.Program.GetChannel (Int32 index) <0x409851f0 + 0x00138> in <filename unknown>:0\n  at UsagiMQ.Program.StartConsume (System.String name_queue, Int32 lifeSpan_queue) <0x40985110 + 0x0002b> in <filename unknown>:0\n  at UsagiMQ.Program.Main (System.String[] args) <0x40980d50 + 0x002eb> in <filename unknown>:0\n```\n\n\u305d\u3046\u3044\u3048\u3070\u30011113 \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3093\u3060\u3063\u305f\u3002\n\n\u30ad\u30e5\u30fc\u540d\u3092 1114\u30011115 \u306b\u5909\u3048\u308c\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3092\u4ed8\u3051\u305f\u3044\u3002\n\n```\n// OS      : Windows10 : // \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u52d5\u304b\u306a\u3044\n//\n// OS      : Ubuntu 16.04\n// Library : libev\n//         : Install   : Command  : sudo apt-get update\n//                                : sudo apt-get install libev-dev\n// Service : RabbitMQ\n//         : Reference : Web site : Top page http://www.rabbitmq.com/\n//         : Install   : Web site : Installing on Debian / Ubuntu http://www.rabbitmq.com/install-debian.html\n//         : Manual    : Command  : man rabbitmqctl\n//         : Start     : Command  : rabbitmq-server\n//         : Stop      : Command  : rabbitmqctl stop\n//         : Check     : Command  : rabbitmqctl status\n//         :           : Command  : rabbitmqctl list_queues\n// Library : AMQP-CPP\n//         : Reference : Web site : AMQP-CPP README.md https://github.com/CopernicaMarketingSoftware/AMQP-CPP\n//         : Reference : Web site : QueueDeclare http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n//         : Reference : Web site : EventingBasicConsumer https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n//         : Reference : Web site : BasicConsume https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n//         : Reference : Web site : C#\u3067const\u306a\u914d\u5217\u3092\u5b9f\u73fe\u3059\u308b (\u3082\u3063\u3068\u30af\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) http://pgnote.net/?p=885\n//         : Reference : Web site : AMQP-CPP (docsforge.com) http://docsforge.com/11/AMQP-CPP/docs/latest/namespace-AMQP/class-TcpConnection/\n//\n// Program : this\n//         : Compile   : Command  : g++ -std=c++11 tamesi33a2_cpp.cpp -o tamesi33a2_cpp.exe -lev -lamqpcpp -pthread\n//         : Execute   : Command  : // \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\n//                                : ./tamesi33a2_cpp.exe --msgqueue 1115 durable 1114 durable &\n//         : Stop      : Typing   : [Ctrl]+[C]\n//\n// \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u307e\u3059\u3002\n// \u30c7\u30ad\u30e5\u30fc\u306f\u300c1112\u300d\u3001\u30a8\u30f3\u30ad\u30e5\u30fc\u306f\u300c1113\u300d\u30ad\u30e5\u30fc\u306b\u5411\u3051\u3066\u884c\u3044\u307e\u3059\u3002\n// \u6a19\u6e96\u5165\u51fa\u529b\u306f\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3001\u753b\u9762\u306b\u306f\u63a5\u7d9a\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n#include <string> // std::string\n#include <iostream> // std::cout\n#include <sstream> // std::ostringstream\n#include <chrono>\n#include <thread> // sleep_for\n#include <future> // thread\n\n// \u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1\u7528\n#include <ev.h>\n#include <amqpcpp.h>\n#include <amqpcpp/libev.h>\n\n//using namespace service_io;\n//static void service_io::workConsume();\n//static void service_io::enqueue(struct ev_loop* loop, AMQP::TcpConnection& connection, AMQP::TcpChannel& channel, std::string message);\n\nnamespace service_io \n{\n\tstatic AMQP::Address ADDRESS{ \"amqp://localhost:5672\" };\n\t// 0 : enqueue\u7528\u8a2d\u5b9a\n\t// 1 : dequeue\u7528\u8a2d\u5b9a\n\tstatic const int ENQUEUE_INDEX = 0;\n\tstatic const int DEQUEUE_INDEX = 1;\n\tstatic const int NUM_INDEX = 2;\n\tstatic std::string name_queues[] = { \"1113\", \"1112\" };\n\tstatic std::string lifeSpan_queues[] = { \"duration\", \"duration\" };\n\n\t/// <summary>\n\t/// \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n\t/// \u3053\u308c\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n\t/// \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\t/// \u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n\t/// </summary>\n\tnamespace rotationBuffer\n\t{\n\t\tconst int bufferSize = 100;\n\t\tstatic std::string buffer[bufferSize] = {};\n\t\tstatic int bufferCursors[2] = { 0, 0 };\n\t\tconst int PUT_INDEX = 0;\n\t\tconst int GET_INDEX = 1;\n\t\tstatic void putMessage(std::string message)\n\t\t{\n\t\t\tbuffer[bufferCursors[PUT_INDEX]] = message;\n\t\t\tbufferCursors[PUT_INDEX]++;\n\t\t\tif (!(bufferCursors[PUT_INDEX] < bufferSize))\n\t\t\t{\n\t\t\t\tbufferCursors[PUT_INDEX] = 0;\n\t\t\t}\n\t\t}\n\t\tstatic std::string getMessage()\n\t\t{\n\t\t\tif (\"\" != buffer[bufferCursors[GET_INDEX]])\n\t\t\t{\n\t\t\t\tstd::string message = buffer[bufferCursors[GET_INDEX]];\n\t\t\t\tbuffer[bufferCursors[GET_INDEX]] = \"\";\n\t\t\t\tbufferCursors[GET_INDEX]++;\n\t\t\t\tif (!(bufferCursors[GET_INDEX] < bufferSize))\n\t\t\t\t{\n\t\t\t\t\tbufferCursors[GET_INDEX] = 0;\n\t\t\t\t}\n\t\t\t\treturn message;\n\t\t\t}\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\t// \u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u306b\u30a8\u30f3\u30ad\u30e5\u30fc\n\tstatic void enqueue(struct ev_loop* loop, AMQP::TcpConnection& connection, AMQP::TcpChannel& channel, std::string message)\n\t{\n\t\tstd::string exchange_name = \"myexchange\";\n\t\tstd::string routing_key = \"\";\n\n\t\tint lifeSpan = 0;\n\t\tif (\"durable\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::durable;\n\t\t}\n\t\telse if (\"autodelete\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::autodelete;\n\t\t}\n\t\telse if (\"passive\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::passive;\n\t\t}\n\t\telse if (\"exclusive\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::exclusive;\n\t\t}\n\n\t\tchannel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n\t\t\t.onError([](const char* errMsg) {\n\t\t\tstd::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n\t\t});\n\n\t\tchannel.bindQueue(exchange_name, name_queues[ENQUEUE_INDEX], routing_key)\n\t\t\t.onSuccess([&connection, &channel, &exchange_name, &routing_key, &message]() {\n\n\t\t\tif (!channel.publish(exchange_name, routing_key, message.c_str(), message.size())) {\n\t\t\t\tstd::cerr << \"failed to publish?\\n\";\n\t\t\t}\n\n\t\t\t// break in ev loop.\n\t\t\tconnection.close();\n\t\t});\n\n\t\t// \u3053\u306e\u30eb\u30fc\u30d7\u306f\u3001\u30d1\u30d6\u30ea\u30c3\u30b7\u30e5\u5f8c\u306b\u629c\u3051\u308b\n\t\tev_run(loop);\n\t}\n\n\t// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n\t// startConsume() \u3057\u3066\u304a\u304f\u3053\u3068\u3002\n\tstatic std::string dequeue() {\n\t\tstd::string message;\n\n\t\twhile (\"\" == message)\n\t\t{\n\t\t\tmessage = rotationBuffer::getMessage();\n\t\t}\n\n\t\treturn message;\n\t}\n\n\t// \u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u76e3\u8996\u3092\u958b\u59cb\n\tstatic void workConsume()\n\t{\n\t\t// Connect to the AMQP service.\n\t\tauto *loop = EV_DEFAULT;\n\t\tAMQP::LibEvHandler handler(loop);\n\t\tAMQP::TcpConnection connection(&handler, ADDRESS);\n\t\tAMQP::TcpChannel channel(&connection);\n\n\t\t// I will go to the front of the box named \"1111\".\n\t\tint lifeSpan = 0;\n\t\tif (\"durable\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::durable;\n\t\t}\n\t\telse if (\"autodelete\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::autodelete;\n\t\t}\n\t\telse if (\"passive\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::passive;\n\t\t}\n\t\telse if (\"exclusive\" == lifeSpan_queues[DEQUEUE_INDEX])\n\t\t{\n\t\t\tlifeSpan = AMQP::exclusive;\n\t\t}\n\t\tchannel.declareQueue(name_queues[DEQUEUE_INDEX], lifeSpan);\n\n\t\t// I look inside the box.\n\t\tauto errorCb = [](const char *errMsg) {\n\t\t\tstd::cerr << \"My ID watching failed [\" << errMsg << \"]\" << std::endl;\n\t\t};\n\t\tauto messageCb = [&channel](const AMQP::Message &message, uint64_t deliveryTag, bool redelivered) {\n\n\t\t\tstd::string myString(message.body(), message.bodySize());\n\t\t\trotationBuffer::putMessage(myString);\n\n\t\t\tchannel.ack(deliveryTag);\n\t\t};\n\t\tchannel.consume(name_queues[DEQUEUE_INDEX])\n\t\t\t.onReceived(messageCb)\n\t\t\t.onError(errorCb);\n\n\t\t// I will keep on forever.\n\t\tev_run(loop, 0);\n\n\t\t// I will not come here.\n\t\treturn;\n\t}\n}\n\nint main(int argc, char* argv[])\n{\n\tstd::string cmdArg;\n\t// \u30d7\u30ed\u30b0\u30e9\u30e0\u540d\u3092\u7701\u304d\u3001\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3060\u3051\u3092\u3064\u306a\u3052\u308b\u3002\n\tfor (int i = 1; i < argc; ++i)\n\t{\n\t\tcmdArg += std::string(argv[i]) + \" \";\n\t}\n\tstd::istringstream ssCmd(cmdArg);\n\n\t// \u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6700\u521d\u306e1\u30c8\u30fc\u30af\u30f3\u3092\u62fe\u3046\n\tstd::string token;\n\tssCmd >> token;\n\n\tif (token == \"--msgqueue\") {\n\t\t// ex.) --msgqueue 1115 durable 1114 durable\n\t\tssCmd >> service_io::name_queues[service_io::ENQUEUE_INDEX];\n\t\tssCmd >> service_io::lifeSpan_queues[service_io::ENQUEUE_INDEX];\n\t\tssCmd >> service_io::name_queues[service_io::DEQUEUE_INDEX];\n\t\tssCmd >> service_io::lifeSpan_queues[service_io::DEQUEUE_INDEX];\n\t}\n\n\t// \u30c7\u30ad\u30e5\u30fc\u306e\u5e38\u6642\u76e3\u8996\u3092\u30b9\u30bf\u30fc\u30c8\n\tauto th1 = std::thread([] { service_io::workConsume(); });\n\n\t// \u30a8\u30f3\u30ad\u30e5\u30fc\u7528\u306e\u63a5\u7d9a\n\t//auto* loop = EV_DEFAULT;\n\tstruct ev_loop* loop = EV_DEFAULT;\n\tAMQP::LibEvHandler handler{ loop };\n\tAMQP::TcpConnection connection{ &handler, service_io::ADDRESS };\n\tAMQP::TcpChannel channel{ &connection };\n\n\t// \u7121\u9650\u30eb\u30fc\u30d7\n\tfor (;;)\n\t{\n\t\tstd::string message = service_io::rotationBuffer::getMessage();\n\t\tif (\"\" != message)\n\t\t{\n\t\t\t// \u672b\u5c3e\u306b daze \u3092\u4ed8\u3051\u308b\u3002\n\t\t\tmessage += \"daze\";\n\n\t\t\t// \u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\n\t\t\tservice_io::enqueue(loop, connection, channel, message);\n\t\t}\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(20));\n\t}\n\n\t// \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u81ea\u5206\u3067\u306f\u63a5\u7d9a\u3092\u5207\u3089\u306a\u3044\u3002\n\n\t// th1 \u30b9\u30ec\u30c3\u30c9\u306e\u7d42\u4e86\u3092\u5f85\u3064\n\tth1.join();\n\treturn 0;\n}\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3044\u3044\u306e\u3060\u308d\u3046\u304b\uff1f\n\n```\n# ./tamesi33a2_cpp.exe --msgqueue 1115 durable 1114 durable &\n[1] 4177\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# tamesi33a2_cpp.exe: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n```\n\n\u540c\u69d8\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u304b\u3002\n\nnamespace service_io \u3067\u56f2\u3093\u3060\u304b\u3089\u304b\u3001\u305d\u308c\u3068\u3082\u3000\u30ad\u30e5\u30fc\u540d\u3092\u9078\u3079\u308b\u3088\u3046\u306b\u3057\u305f\u304b\u3089\u304b\uff1f\n\n```\n# ./tamesi33a2_cpp.exe --msgqueue 1115 durable 1114 durable &\n[1] 4239\n```\n\n\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3092\u5916\u3059\u3068\u3000\u3059\u3093\u306a\u308a\u884c\u3063\u305f\u3088\u3046\u306b\u3082\u898b\u3048\u308b\u3002\n\u3058\u3083\u3042\u3000\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3092\u4ed8\u3051\u3066\u307f\u3088\u3046\u3002\n\n```\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? > 1114\n\u524a\u9664\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n[1114]\u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u305f\u306f\u305a\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09 result=[4294967295]\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? > 1115\n\u524a\u9664\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\nUnhandled Exception:\nRabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Library, code=504, text=\"Frame received for invalid channel 1\", classId=0, methodId=0, cause=RabbitMQ.Client.Impl.ChannelErrorException: Frame received for invalid channel 1\n```\n\n\u306a\u3093\u304b\u3000\u64cd\u4f5c\u3092\u30df\u30b9\u3063\u3066\u3000\u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u3066\u3057\u307e\u3063\u305f\u3089\u3057\u3044\u3002\n\n```\nEnqueue? > usi\n Enqueue(^q^) usi\nEnqueue? > tamesi33a2_cpp.exe: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\n```\n\n\u540c\u69d8\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u308b\u3002\n\n\u30bd\u30fc\u30b9\u3092\u623b\u3057\u3066\u5b9f\u884c\u3002\n\n```\n# ./tamesi33a2_cpp.exe &\n[1] 4615\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# My ID watching failed [Channel is in error state]\n```\n\n\u30c1\u30e3\u30f3\u30cd\u30eb\u304b\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u304c\u8150\u3063\u3066\u3044\u308b\u3093\u3060\u308d\u3046\u304b\uff1f\n\n```\na1            a2 \n   -> 1116 ->\n   <- 1117 <-\n```\n\n\u30ad\u30e5\u30fc\u3092\u4f5c\u308a\u76f4\u3057\u3066\u3084\u308a\u306a\u304a\u3057\u3002\n\n```\n> usi\n\nUnhandled Exception:\nRabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=\"PRECONDITION_FAILED - inequivalent arg 'durable' for queue '1116' in vhost '/': received 'true' but current is 'false'\", classId=50, methodId=10, cause=\n  at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply () <0x416f2760 + 0x00103> in <filename unknown>:0\n```\n\n\u5c5e\u6027\u306e\u8a2d\u5b9a\u304c\u304a\u304b\u3057\u3044\u3093\u3060\u308d\u3046\u304b\uff1f\n\n```\n        int lifeSpan = 0;\n\tif (\"durable\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::durable;\n\t}\n\telse if (\"autodelete\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::autodelete;\n\t}\n\telse if (\"passive\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::passive;\n\t}\n\telse if (\"exclusive\" == lifeSpan_queues[ENQUEUE_INDEX])\n\t{\n\t\tlifeSpan = AMQP::exclusive;\n\t}\n\n\tchannel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n\t\t.onError([](const char* errMsg) {\n\t\tstd::cerr << \"error declaring queue: \" << errMsg << \"\\n\";\n\t});\n```\n\nC++ \u3067\u4f55\u304b\u304a\u304b\u3057\u3044\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u308b\u3060\u308d\u3046\u304b\u3002\u7b49\u53f7\u3068\u304b\u3002\n\n# \u30df\u30b9\u3092\u898b\u3064\u3051\u305f\u3002\n\n```\nstatic std::string bgp_lifeSpan[] = { \"duration\", \"duration\" };\n```\n\n\u3053\u308c\u306f\u3001\n\n```\nstatic std::string bgp_lifeSpan[] = { \"durable\", \"durable\" };\n```\n\n\u3053\u3063\u3061\u304c\u6b63\u3057\u3044\u3002\u4eca\u56de\u306e\u4e0d\u5177\u5408\u3068\u306f\u95a2\u4fc2\u306a\u3055\u305d\u3046\u3060\u304c\u76f4\u3057\u3066\u3044\u304f\u3002\n\n```\n./tamesi33a2_cpp.exe &\n[1] 5307\nMy ID watching failed [Channel is in error state]\n```\n\n\u76f4\u3057\u3066\u3082\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u308b\u3002\n\n\u3053\u3093\u306a\u98a8\u306b\u66f8\u304d\u76f4\u3057\u3066\u307f\u308b\u3002\n\n```\n\tint lifeSpan = 0;\n\tstd::string a = lifeSpan_queues[ENQUEUE_INDEX];\n\tif      (\"durable\"    == a)\t{ lifeSpan = AMQP::durable;    }\n\telse if (\"autodelete\" == a)\t{ lifeSpan = AMQP::autodelete; }\n\telse if (\"passive\"    == a)\t{ lifeSpan = AMQP::passive;    }\n\telse if (\"exclusive\"  == a)\t{ lifeSpan = AMQP::exclusive;  }\n\telse\n\t{\n\t\tstd::cerr << \"\u672a\u5bfe\u5fdc\u306e\u30ad\u30e5\u30fc\u5bff\u547d\u304c\u6307\u5b9a\u3055\u308c\u307e\u3057\u305f\u3002[\"+ a +\"]\" << std::endl;\n\t\texit(1);\n\t}\n\n\tchannel.declareQueue(name_queues[ENQUEUE_INDEX], lifeSpan)\n\t\t.onError([&a](const char* errMsg) {\n\t\t\tstd::cerr << \"error declaring queue: \" << errMsg << \" lifeSpan=[\" << a << \"]\" << \"\\n\";\n\t\t});\n```\n\n```\n# ./tamesi33a2_cpp.exe --msgqueue 1115 durable 1114 durable &\n[1] 5577\n```\n\n\u5f15\u6570\u4ed8\u3051\u3066\u6307\u5b9a\u3059\u308b\u306e\u3092\u5fd8\u308c\u3066\u3044\u305f\u305c\u3002\n\n```\n# ./tamesi34_cs.exe\n\u2605\u4e2d\u7565\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > Kirin\n Enqueue(^q^) Kirin\nEnqueue? > Neko\n Enqueue(^q^) Neko\nEnqueue? > Inu\n Enqueue(^q^) Inu\nEnqueue? > root@tk2-217-18401:/home/\u2605user/shogi/csharp_service# rabbitmqctl list_queues\nListing queues ...\n1112    0\n1116    0\n1111    0\n1113    0\n1117    0\nmyqueue 25\n1115    0\n1114    3\n```\n\n./tamesi34_cs.exe \u3092\u4f7f\u3046\u3068\u3000\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u30ad\u30e5\u30fc\u306b\u9001\u308c\u308b\u306e\u3068\u3001\n\n```\n# jobs\n[1]+  Terminated              ./tamesi33a2_cpp.exe --msgqueue 1115 durable 1114 durable  (wd: /home/\u2605user/shogi/cpp_service)\n```\n\n./tamesi33a2_cpp.exe \u3092\u4f7f\u3046\u3068 \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u304c 0 \u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u78ba\u8a8d\u3057\u305f\u306e\u3067\u3001\u30a8\u30f3\u30ad\u30e5\u30fc\u304c\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3060\u308d\u3046\u3002\n\n# \u30b9\u30ec\u30c3\u30c9\u3068 mutex\n\n\u300cwhat is correspoding feature for synchronized in java?\u300d\uff08stack overflow\uff09\nhttp://stackoverflow.com/questions/5429653/what-is-correspoding-feature-for-synchronized-in-java\n\n\u3053\u3093\u306a\u306e\u899a\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3060\u308d\u3046\u304b\uff1f\n\n\u3068\u308a\u3042\u3048\u305a\u9069\u5f53\u306b\u4f7f\u3063\u3066\u307f\u3088\u3046\u3002\n\n```\n/// <summary>\n/// \u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3002\n/// \u3053\u308c\u306f\u30e1\u30a4\u30f3\u30fb\u30b9\u30ec\u30c3\u30c9\u306b\u7f6e\u304f\u3002\n/// \u30c7\u30ad\u30e5\u30fc\u306e\u30b9\u30ec\u30c3\u30c9\u3067\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n/// \u30c7\u30ad\u30e5\u30fc\u51e6\u7406\u306f\u3001\u56de\u8ee2\u5f0f\u30d0\u30c3\u30d5\u30a1\u30fc\u3092\u4ef2\u4ecb\u306b\u3057\u3066\u30a8\u30f3\u30ad\u30e5\u30fc\u51e6\u7406\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3059\u3002\n/// </summary>\nnamespace rotationBuffer\n{\n\tconst int bufferSize = 100;\n\tstatic std::string buffer[bufferSize] = {};\n\tstatic int bufferCursors[2] = { 0, 0 };\n\tconst int PUT_INDEX = 0;\n\tconst int GET_INDEX = 1;\n\n\tstd::mutex _mutex;\n\tstatic void putMessage(std::string message)\n\t{\n\t\tstd::unique_lock<std::mutex> lock(_mutex);\n\t\tbuffer[bufferCursors[PUT_INDEX]] = message;\n\t\tbufferCursors[PUT_INDEX]++;\n\t\tif (!(bufferCursors[PUT_INDEX] < bufferSize))\n\t\t{\n\t\t\tbufferCursors[PUT_INDEX] = 0;\n\t\t}\n\t}\n\tstatic std::string getMessage()\n\t{\n\t\tstd::unique_lock<std::mutex> lock(_mutex);\n\t\tif (\"\" != buffer[bufferCursors[GET_INDEX]])\n\t\t{\n\t\t\tstd::string message = buffer[bufferCursors[GET_INDEX]];\n\t\t\tbuffer[bufferCursors[GET_INDEX]] = \"\";\n\t\t\tbufferCursors[GET_INDEX]++;\n\t\t\tif (!(bufferCursors[GET_INDEX] < bufferSize))\n\t\t\t{\n\t\t\t\tbufferCursors[GET_INDEX] = 0;\n\t\t\t}\n\t\t\treturn message;\n\t\t}\n\t\treturn \"\";\n\t}\n}\n```\n\n```\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# rm tamesi33a2_cpp.cpp\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# nano tamesi33a2_cpp.cpp\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# g++ -std=c++11 tamesi33a2_cpp.cpp -o tamesi33a2_cpp.exe -lev -lamqpcpp -pthread\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# ./tamesi33a2_cpp.exe --msgqueue 1117 durable 1116 durable &\n[1] 6963\nroot@tk2-217-18401:/home/\u2605user/shogi/cpp_service# My ID watching failed [Channel is in error state] lifeSpan=[durable]\n```\n\n\u521d\u56de\u306b\u5931\u6557\u3059\u308b\u306e\u306f\u306a\u3093\u3067\u3060\u308d\u3046\uff1f\n\n```\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1118\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1119\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > ika\n Enqueue(^q^) ika\ntamesi33a2_cpp.exe: ev.c:3541: ev_run: Assertion `(\"libev: ev_loop recursion during release detected\", ((loop)->loop_done) != 0x80)' failed.\nEnqueue? >\n```\n\n\u3044\u3064\u3082\u306e\u30a8\u30e9\u30fc\u3067\u843d\u3061\u3066\u3044\u308b\u3002 ika \u3068\u3044\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30c7\u30ad\u30e5\u30fc\u306f\u3057\u3066\u308b\u3093\u3060\u3068\u601d\u3046\u3093\u3060\u304c\u3001\u3053\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u3066\u304f\u308b\u524d\u306b\u4f55\u304b\u4e0d\u5177\u5408\u304c\u8d77\u3053\u3063\u3066\u308b\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\u3000\u30a8\u30e9\u30fc\u51fa\u529b\u306f\u306a\u3044\u304b\uff1f\n\n```\n# jobs\n[2]+  Running                 ./tamesi33a2_cpp.exe --msgqueue 1117 durable 1116 durable 2> ./tamesi33a2_cpp.err.log &\n```\n\n\u3053\u3046\u52d5\u304b\u3057\u3066\u304a\u3044\u3066\u3002\n\n```\n# ./tamesi34_cs.exe\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1116\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1117\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > ringo\n\nUnhandled Exception:\nRabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=\"PRECONDITION_FAILED - inequivalent arg 'durable' for queue '1116' in vhost '/': received 'true' but current is 'false'\", classId=50, methodId=10, cause=\n  at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply () <0x411595f0 + 0x00103> in <filename unknown>:0\n  at RabbitMQ.Client.Impl.ModelBase.ModelRpc (RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, System.Byte[] body) <0x411574f0 + 0x000f9> in <filename unknown>:0\n  at RabbitMQ.Client.Framing.Impl.v0_8.Model.QueueDeclare (System.String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary arguments) <0x4115b820 + 0x00113> in <filename unknown>:0\n  at UsagiMQ.Program.GetChannel (Int32 index) <0x4111d1f0 + 0x00138> in <filename unknown>:0\n  at UsagiMQ.Program.Enqueue (System.String message) <0x4115c930 + 0x00013> in <filename unknown>:0\n  at UsagiMQ.Program.Main (System.String[] args) <0x41118d50 + 0x0031f> in <filename unknown>:0\n[ERROR] FATAL UNHANDLED EXCEPTION: RabbitMQ.Client.Exceptions.OperationInterruptedException: The AMQP operation was interrupted: AMQP close-reason, initiated by Peer, code=406, text=\"PRECONDITION_FAILED - inequivalent arg 'durable' for queue '1116' in vhost '/': received 'true' but current is 'false'\", classId=50, methodId=10, cause=\n  at RabbitMQ.Client.Impl.SimpleBlockingRpcContinuation.GetReply () <0x411595f0 + 0x00103> in <filename unknown>:0\n  at RabbitMQ.Client.Impl.ModelBase.ModelRpc (RabbitMQ.Client.Impl.MethodBase method, RabbitMQ.Client.Impl.ContentHeaderBase header, System.Byte[] body) <0x411574f0 + 0x000f9> in <filename unknown>:0\n  at RabbitMQ.Client.Framing.Impl.v0_8.Model.QueueDeclare (System.String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary arguments) <0x4115b820 + 0x00113> in <filename unknown>:0\n  at UsagiMQ.Program.GetChannel (Int32 index) <0x4111d1f0 + 0x00138> in <filename unknown>:0\n  at UsagiMQ.Program.Enqueue (System.String message) <0x4115c930 + 0x00013> in <filename unknown>:0\n  at UsagiMQ.Program.Main (System.String[] args) <0x41118d50 + 0x0031f> in <filename unknown>:0\n```\n\n\u3046\u30fc\u3080\u3002\n\nRabbitMQ.Client.Framing.Impl.v0_8.Model.QueueDeclare (System.String queue, Boolean passive, Boolean durable, Boolean exclusive, Boolean autoDelete, Boolean nowait, IDictionary arguments)\n\n\u3053\u3046\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3063\u3066\u308b\u306e\u306f C# \u306e\u65b9\u3060\u3063\u305f\u304b\u306a\u3002\u3053\u3053\u3067\u6761\u4ef6\u306e\u8a2d\u5b9a\u304c\u9055\u3046\u3093\u3060\u308d\u3046\u304b\uff1f\n\n# autodelete\n\n```\n# ./tamesi34_cs.exe 2> ./tamesi34_cs.err.log\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1116\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1117\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\nGetChannel index = [1]\n    QUEUE_NAMES[index] = [1117]\n    passive_lifeSpans[index] = [False]\n    durable_lifeSpans[index] = [True]\n    exclusive_lifeSpans[index] = [False]\n    autodelete_lifeSpans[index] = [False]\n    nowait \u306f\u4eee\u306b false \u56fa\u5b9a\n    arguments \u306f\u4eee\u306b null \u56fa\u5b9a\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\n```\n\n**durable \u3068 autodelete \u306f\u4e21\u7acb\u3059\u308b\u3089\u3057\u3044\u304c\u3002**\n\n```\n# ./tamesi34_cs.exe 2> ./tamesi34_cs.err.log\n\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? >\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1116\n\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > 1117\n\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u9078\u3079\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(0) durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(1) autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(2) passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(3) exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > 0\nGetChannel index = [1]\n    QUEUE_NAMES[index] = [1117]\n    passive_lifeSpans[index] = [False]\n    durable_lifeSpans[index] = [True]\n    exclusive_lifeSpans[index] = [False]\n    autodelete_lifeSpans[index] = [False]\n    nowait \u306f\u4eee\u306b false \u56fa\u5b9a\n    arguments \u306f\u4eee\u306b null \u56fa\u5b9a\n\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > blade\nGetChannel index = [0]\n    QUEUE_NAMES[index] = [1116]\n    passive_lifeSpans[index] = [False]\n    durable_lifeSpans[index] = [True]\n    exclusive_lifeSpans[index] = [False]\n    autodelete_lifeSpans[index] = [False]\n    nowait \u306f\u4eee\u306b false \u56fa\u5b9a\n    arguments \u306f\u4eee\u306b null \u56fa\u5b9a\n```\n\n\u3053\u3053\u3067\u7a81\u7136\u3000\u51e6\u7406\u304b\u3089\u629c\u3051\u305f\u3002\ntamesi34_cs.err.log \u306b\u3044\u3064\u3082\u306e\u30a8\u30e9\u30fc\u304c\u66f8\u3044\u3066\u3042\u308b\u3002\n\n# \u8db3\u3057\u7b97\n\n\u306a\u3093\u3060\u304b\u6025\u306b\u3000\u4f53\u8abf\u304c\u60aa\u304f\u306a\u3063\u305f\u3093\u3067\u4f11\u61a9\u3002\n\u3053\u308c\u306f\u66f8\u304d\u304b\u3051\u3002\n\n```\n// OS  : Windows 10\n// IDE : Visual Studio 2015\n//       Install : NuGet   : Install-Package RabbitMQ.Client -Version 4.1.1\n//\n// OS  : Ubuntu 16.04\n//       Compile : Command : mcs /r:RabbitMQ.Client.dll -define:UBUNTU tamesi34_cs.cs\n//               : Command : chmod 755 tamesi34_cs.cs\n//       Execute : Command : // \u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\n//                         : ./tamesi34_cs.exe 2> ./tamesi34_cs.err.log\n//       Check   : Command : // \u30ad\u30e5\u30fc\u306e\u4e2d\u8eab\u306e\u6570\u3092\u8abf\u3079\u308b\n//                         : rabbitmqctl list_queues\n//\n// Library : RabbitMQ\n//           Refference : Website : RabbitMQ http://www.rabbitmq.com/\n//                      : Website : RabbitMQ\u7ba1\u7406\u30b3\u30de\u30f3\u30c9\uff08rabbitmqctl\uff09\u4f7f\u3044\u65b9 (Qiita) http://qiita.com/tamikura@github/items/5293cda4c0026b2d7022\n//                      : Website : amqp\u3092\u4f7f\u3063\u3066RabbitMQ\u306e\u30ad\u30e5\u30fc\u3092\u64cd\u4f5c\u3059\u308b (Qiita) http://qiita.com/tamikura@github/items/a268afa51c5537ca4fe6\n//--------------------------------------------------------------------------------\n// tamesi34_cs.cs\n\n// Ubuntu \u306e RabbitMQ \u306f\u30bd\u30fc\u30b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u53e4\u3044\u306e\u304b\u3001API \u304c\u7570\u306a\u3063\u305f\u3002\n// #define UBUNTU\n\nusing RabbitMQ.Client;\nusing RabbitMQ.Client.Events;\nusing System;\nusing System.Text;\n\nnamespace UsagiMQ\n{\n    [Flags]\n    enum LifeSpanType\n    {\n        /// <summary>\n        /// RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n        /// </summary>\n        Durable = 1,\n        /// <summary>\n        /// \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n        /// </summary>\n        Autodelete = 0x1<<1,\n        /// <summary>\n        /// \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n        /// </summary>\n        Passive = 0x1 << 2,\n        /// <summary>\n        /// \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\n        /// </summary>\n        Exclusive = 0x1 << 3\n    }\n\n    /// <summary>\n    /// \u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3000\u30a8\u30f3\u30ad\u30e5\u30fc\u3057\u307e\u3059\u3002\n    /// \u30ad\u30e5\u30fc\u306e\u540d\u524d\u306f\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n    /// \u30c7\u30ad\u30e5\u30fc\u306f\u5272\u8fbc\u307f\u3092\u53d7\u3051\u4ed8\u3051\u307e\u3059\u3002\n    /// \n    /// \u53c2\u7167 : QueueDeclare (v1.0) http://docs.spring.io/spring-amqp-net/docs/1.0.x/api/html/Spring.Messaging.Amqp.Rabbit~Spring.Messaging.Amqp.Rabbit.Connection.CachedModel~QueueDeclare(String,Boolean,Boolean,Boolean,Boolean,Boolean,IDictionary).html\n    /// \u53c2\u7167 : EventingBasicConsumer https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.Events.EventingBasicConsumer.html\n    /// \u53c2\u7167 : QueueDelete (v1.4) https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.QueueDelete(System.UInt16,System.String,System.Boolean,System.Boolean,System.Boolean)\n    /// \u53c2\u7167 : BasicConsume https://www.rabbitmq.com/releases/rabbitmq-dotnet-client/v1.4.0/rabbitmq-dotnet-client-1.4.0-net-2.0-htmldoc/type-RabbitMQ.Client.IModel.html#method-M:RabbitMQ.Client.IModel.BasicConsume(System.UInt16,System.String,System.Boolean,System.Collections.IDictionary,RabbitMQ.Client.IBasicConsumer)\n    /// \u53c2\u7167 : C#\u3067const\u306a\u914d\u5217\u3092\u5b9f\u73fe\u3059\u308b (\u3082\u3063\u3068\u30af\u30fc\u30eb\u306b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0) http://pgnote.net/?p=885\n    /// </summary>\n    class Program\n    {\n        const int ENQUEUE_INDEX = 0;\n        const int DEQUEUE_INDEX = 1;\n        const int DELETEQUEUE_INDEX = 2;\n        const int NUM_INDEX = 3;\n        const string HOST_NAME = \"localhost\";\n        static string[] QUEUE_NAMES = new string[NUM_INDEX];\n        /// <summary>\n        /// \u30ad\u30e5\u30fc\u306e\u5bff\u547d\uff08\u8907\u5408\u53ef\u80fd\uff09\n        /// durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n        /// autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n        /// passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n        /// exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\n        /// </summary>\n        static LifeSpanType[] lifeSpans_queue = new LifeSpanType[NUM_INDEX];\n        static bool[]\n            durable_lifeSpans = new bool[NUM_INDEX],\n            autodelete_lifeSpans = new bool[NUM_INDEX],\n            passive_lifeSpans = new bool[NUM_INDEX],\n            exclusive_lifeSpans = new bool[NUM_INDEX];\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"index_queue\"></param>\n        /// <param name=\"name_queue\"></param>\n        /// <param name=\"lifeSpan\">\n        /// (0) durable\n        /// (1) autodelete\n        /// (2) passive\n        /// (3) exclusive\n        /// </param>\n        static void SetLifeSpan(int index_queue, string name_queue, LifeSpanType lifeSpan)\n        {\n            QUEUE_NAMES[index_queue] = name_queue;\n            lifeSpans_queue[index_queue] = lifeSpan;\n\n            // \u4e00\u65e6\u30af\u30ea\u30a2\u30fc\n            durable_lifeSpans[index_queue] = false;\n            autodelete_lifeSpans[index_queue] = false;\n            passive_lifeSpans[index_queue] = false;\n            exclusive_lifeSpans[index_queue] = false;\n\n            // durable\n            if (((int)lifeSpan & (int)LifeSpanType.Durable) == (int)LifeSpanType.Durable) { durable_lifeSpans[index_queue] = true; }\n            // autodelete\n            if (((int)lifeSpan & (int)LifeSpanType.Autodelete) == (int)LifeSpanType.Autodelete) { autodelete_lifeSpans[index_queue] = true; }\n            // passive\n            if (((int)lifeSpan & (int)LifeSpanType.Passive) == (int)LifeSpanType.Passive) { passive_lifeSpans[index_queue] = true; }\n            // exclusive\n            if (((int)lifeSpan & (int)LifeSpanType.Exclusive) == (int)LifeSpanType.Exclusive) { exclusive_lifeSpans[index_queue] = true; }\n        }\n\n\n        public static ConnectionFactory GetFactory()\n        {\n            if (null == m_factory_)\n            {\n                m_factory_ = new ConnectionFactory() { HostName = HOST_NAME };\n            }\n            return m_factory_;\n        }\n        static ConnectionFactory m_factory_;\n\n        public static IConnection GetConnection()\n        {\n            if (null == m_connection_)\n            {\n                m_connection_ = GetFactory().CreateConnection();\n            }\n            return m_connection_;\n        }\n        static IConnection m_connection_;\n\n        public static IModel GetChannel(int index)\n        {\n            if (null == m_channels_[index])\n            {\n                m_channels_[index] = GetConnection().CreateModel();\n\n                // \u5f15\u6570\u304c7\u3064\u306e QueueDeclare \u3067\u30a8\u30e9\u30fc\u3092\u5410\u304f\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3001\u60c5\u5831\u3092\u51fa\u529b\u3057\u3066\u304a\u304f\u3002\n                Console.Error.WriteLine(\"GetChannel index = [\" + index + \"]\");\n                Console.Error.WriteLine(\"    QUEUE_NAMES[index] = [\" + QUEUE_NAMES[index] + \"]\");\n                Console.Error.WriteLine(\"    passive_lifeSpans[index] = [\" + passive_lifeSpans[index] + \"]\");\n                Console.Error.WriteLine(\"    durable_lifeSpans[index] = [\" + durable_lifeSpans[index] + \"]\");\n                Console.Error.WriteLine(\"    exclusive_lifeSpans[index] = [\" + exclusive_lifeSpans[index] + \"]\");\n                Console.Error.WriteLine(\"    autodelete_lifeSpans[index] = [\" + autodelete_lifeSpans[index] + \"]\");\n                Console.Error.WriteLine(\"    nowait \u306f\u4eee\u306b false \u56fa\u5b9a\");\n                Console.Error.WriteLine(\"    arguments \u306f\u4eee\u306b null \u56fa\u5b9a\");\n\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b Spring.Messaging.Amqp.Rabbit \u306e\u5f15\u6570 7 \u3064\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], passive_lifeSpans[index], durable_lifeSpans[index], exclusive_lifeSpans[index], autodelete_lifeSpans[index], false, null);\n#else\n                m_channels_[index].QueueDeclare(QUEUE_NAMES[index], durable_lifeSpans[index], exclusive_lifeSpans[index], autodelete_lifeSpans[index], null);\n#endif\n            }\n            return m_channels_[index];\n        }\n        static IModel[] m_channels_ = new IModel[NUM_INDEX];\n\n        public static EventingBasicConsumer GetConsumer(int index)\n        {\n            if (null == m_consumers_[index])\n            {\n#if UBUNTU\n                // Ubuntu\u3067\u306f\u4f55\u6545\u304b v1.4.0 \u306e\u5f15\u6570\u304c 0 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u8abf\u3079\u305f\u304c\u5f15\u6570\u304c1\u500b\uff5e6\u500b\u306e\u3082\u306e\u306f\u7121\u304b\u3063\u305f\u3002\n                m_consumers_[index] = new EventingBasicConsumer();\n#else\n                m_consumers_[index] = new EventingBasicConsumer(GetChannel(index));\n#endif\n\n            }\n            return m_consumers_[index];\n        }\n        static EventingBasicConsumer[] m_consumers_ = new EventingBasicConsumer[NUM_INDEX];\n\n        /// <summary>\n        /// \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n        /// </summary>\n#if UBUNTU\n        public static BasicDeliverEventHandler GetDequeueHandler()\n#else\n        public static EventHandler<BasicDeliverEventArgs> GetDequeueHandler()\n#endif\n        {\n            if (null == m_dequeueHandler_)\n            {\n#if UBUNTU\n                m_dequeueHandler_ = new BasicDeliverEventHandler((model, ea) =>\n#else\n                m_dequeueHandler_ = new EventHandler<BasicDeliverEventArgs>((model, ea) =>\n#endif\n                {\n                    byte[] body = ea.Body;\n                    string message = Encoding.UTF8.GetString(body);\n                    Console.WriteLine(\"<---- [interrupt!] Dequeue(^q^) {0}\", message);\n                });\n            }\n\n            return m_dequeueHandler_;\n        }\n\n#if UBUNTU\n        static BasicDeliverEventHandler m_dequeueHandler_;\n#else\n        static EventHandler<BasicDeliverEventArgs> m_dequeueHandler_;\n#endif\n\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseConnection()\n        {\n            if (null != m_connection_)\n            {\n                m_connection_.Close();\n                m_connection_ = null;\n            }\n        }\n        /// <summary>\n        /// \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u3051\u308c\u3069\u3001\u958b\u3051\u305f\u3089\u9589\u3081\u308b\u3001\u3092\u5b8c\u74a7\u306b\u5bfe\u5fdc\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// </summary>\n        static void CloseChannel(int index)\n        {\n            if (null != m_channels_[index])\n            {\n                m_channels_[index].Close();\n                m_channels_[index] = null;\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            //----------------------------------------\n            // Delete\n            //----------------------------------------\n            for (;;)\n            {\n                Console.Write(@\"\u524a\u9664\u3057\u305f\u3044\u30ad\u30e5\u30fc\u304c\u3042\u308c\u3070\u540d\u524d\u3092\u3001\u7121\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30ad\u30e5\u30fc\u540d\u3092\u5165\u529b    : \u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u307e\u3059\n\u7a7a\u6587\u5b57\u5217\u3067[Enter] : \u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3078\u9032\u3080\nName or empty ? > \");\n                string queueName_delete = Console.ReadLine();\n                if (\"\"== queueName_delete.Trim())\n                {\n                    break;\n                }\n\n                \n                Console.Write(@\"\u524a\u9664\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u3001\u8db3\u3057\u7b97\u3057\u3066\u7b54\u3048\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(\"+ LifeSpanType.Durable + @\") durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(\" + LifeSpanType.Autodelete + @\") autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(\" + LifeSpanType.Passive + @\") passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(\" + LifeSpanType.Exclusive + @\") exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > \");\n                LifeSpanType lifeSpan_delete = (LifeSpanType)int.Parse(Console.ReadLine());\n                SetLifeSpan(DELETEQUEUE_INDEX, queueName_delete, lifeSpan_delete);\n                uint result = DeleteQueue();\n                Console.WriteLine(@\"[\"+ queueName_delete + \"]\u30ad\u30e5\u30fc\u3092\u524a\u9664\u3057\u305f\u306f\u305a\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09 result=[\"+ result + \"]\");\n            }\n\n            //----------------------------------------\n            // Enqueue settings\n            //----------------------------------------\n            for (;;)\n            {\n                Console.Write(@\"\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > \");\n                string queueName_enqueue = Console.ReadLine();\n\n                Console.Write(@\"\u30a8\u30f3\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u3001\u8db3\u3057\u7b97\u3057\u3066\u7b54\u3048\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(\" + LifeSpanType.Durable + @\") durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(\" + LifeSpanType.Autodelete + @\") autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(\" + LifeSpanType.Passive + @\") passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(\" + LifeSpanType.Exclusive + @\") exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > \");\n                int lifeSpan_enqueue;\n                if(int.TryParse(Console.ReadLine(),out lifeSpan_enqueue))\n                {\n                    SetLifeSpan(ENQUEUE_INDEX, queueName_enqueue, (LifeSpanType)lifeSpan_enqueue);\n                    break;\n                }\n            }\n\n            //----------------------------------------\n            // Enqueue settings\n            //----------------------------------------\n            for (;;)\n            {\n                Console.Write(@\"\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d\u3092\u5165\u308c\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\nQueue name? > \");\n                string queueName_dequeue = Console.ReadLine();\n\n                Console.Write(@\"\u30c7\u30ad\u30e5\u30fc\u5148\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5bff\u547d\u3092\u3001\u8db3\u3057\u7b97\u3057\u3066\u7b54\u3048\u308d\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n(\" + LifeSpanType.Durable + @\") durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n(\" + LifeSpanType.Autodelete + @\") autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n(\" + LifeSpanType.Passive + @\") passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3002\u4e2d\u8eab\u898b\u306a\u3044\u6642\u3053\u308c\n(\" + LifeSpanType.Exclusive + @\") exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\nNumber ? > \");\n                int lifeSpan_dequeue;\n                if(int.TryParse(Console.ReadLine(),out lifeSpan_dequeue))\n                {\n                    StartConsume(queueName_dequeue, (LifeSpanType)lifeSpan_dequeue);\n                    break;\n                }\n            }\n\n            Console.Write(@\"\u7d42\u4e86\u3059\u308b\u3068\u304d\u306f[Ctrl]+[C]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606\uff08\uff3e\uff5e\uff3e\uff09\n\u30a8\u30f3\u30ad\u30e5\u30fc\u3059\u308b\u3068\u304d\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6253\u3061\u8fbc\u3093\u3067[Enter]\u30ad\u30fc\u3092\u62bc\u305b\u3060\u305c\u2606(\uff3e\u25c7\uff3e)\nEnqueue? > \");\n            for (;;)\n            {\n                // \"Hello World!\" \u306a\u3069\u3092\u5165\u529b\n                string line = Console.ReadLine();\n                Enqueue(line);\n                Console.Write(@\"Enqueue? > \");\n            }\n\n            // \u3053\u3053\u306b\u306f\u6765\u306a\u3044\n            // CloseConnection();\n        }\n\n        static uint DeleteQueue()\n        {\n            IModel channel = GetChannel(DELETEQUEUE_INDEX);\n\n#if UBUNTU\n            // Ubuntu\u3067\u306f\u4f55\u6545\u304b \u6614\u306e .Net \u7528\u306e\u5f15\u6570 5 \u3064\u306e\u3084\u3064\u306e\u5909\u5247\u7248\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n            // uint QueueDelete(ushort ticket, string queue, bool ifUnused, bool ifEmpty, bool nowait)\n            uint result = channel.QueueDelete( QUEUE_NAMES[DELETEQUEUE_INDEX],true,true,true);\n#else\n            uint result = channel.QueueDelete(QUEUE_NAMES[DELETEQUEUE_INDEX],true,true);\n#endif\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel(DELETEQUEUE_INDEX);\n            return result;\n        }\n\n        static void Enqueue(string message)\n        {\n            IModel channel = GetChannel(ENQUEUE_INDEX);\n\n            byte[] body = Encoding.UTF8.GetBytes(message);\n            channel.BasicPublish(\"\", QUEUE_NAMES[ENQUEUE_INDEX], null, body);\n\n            Console.WriteLine(\" Enqueue(^q^) {0}\", message);\n\n            // \u5bfe\u5fdc\u3059\u308b\u30aa\u30fc\u30d7\u30f3\u306f\u7121\u3044\u304c\u3001\u3061\u3083\u3093\u3068\u9589\u3058\u306a\u3044\u3068\u3001\u30ec\u30b7\u30fc\u30d6\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n            CloseChannel(ENQUEUE_INDEX);\n        }\n\n        /// <summary>\n        /// \n        /// </summary>\n        /// <param name=\"name_queue\">\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u540d\u524d</param>\n        /// <param name=\"lifeSpan_queue\">\u65e2\u5b58\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u5834\u5408\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30fb\u30ad\u30e5\u30fc\u306e\u8a2d\u5b9a\u306f\u5408\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n        /// durable    : RabbitMQ\u304c\u6b62\u307e\u3063\u3066\u3082\u30ad\u30e5\u30fc\u3092\u6b8b\u3059\n        /// autodelete : \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u304c\uff11\u4eba\u3082\u63a5\u7d9a\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089\u6d88\u3059\n        /// passive    : \u30ad\u30e5\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3067\u3001\u4e2d\u8eab\u3092\u898b\u306a\u3044\u6642\u306f\u3053\u308c\n        /// exclusive  : \u3053\u306e\u63a5\u7d9a\u3067\u3060\u3051\u4f7f\u3048\u308b\u3002\u3053\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u3089\u6d88\u3059\n        /// </param>\n        static void StartConsume(string name_queue, LifeSpanType lifeSpan_queue)\n        {\n            SetLifeSpan(DEQUEUE_INDEX, name_queue, lifeSpan_queue);\n\n            IModel channel = GetChannel(DEQUEUE_INDEX);\n            EventingBasicConsumer consumer = GetConsumer(DEQUEUE_INDEX);\n\n            // \u53d7\u4fe1\u3067\u304d\u305f\u3068\u304d\u306b\u5272\u308a\u8fbc\u3093\u3067\u304f\u308b\u51e6\u7406\n            consumer.Received += GetDequeueHandler();\n\n#if UBUNTU\n            // Ubuntu\u3067\u306f\u4f55\u6545\u304b\u5f15\u6570\u304c 5 \u500b\u306e\u3084\u3064\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, \"\", null, consumer);\n#else\n            channel.BasicConsume( QUEUE_NAMES[DEQUEUE_INDEX], true, consumer);\n#endif\n            // \u7d42\u4e86\u306f\u3055\u305b\u306a\u3044\n            // consumer.Received -= GetReceiveHandler();\n            // CloseChannel(DEQUEUE_INDEX);\n        }\n    }\n}\n```\n\n1116 \u306f 3 \u3067\u5408\u3063\u3066\u305f\u304b\u3002\n\u6b21\u306f\u30a8\u30e9\u30fc\u3002\ninequivalent arg 'auto_delete' for queue '1117'\n\n1117 \u306f 1 \u304c\u6b63\u89e3\u304b\u3002\n\n# \u9577\u304f\u306a\u3063\u305f\u306e\u3067\u6b21\u306e\u8a18\u4e8b\u3078\n", "tags": ["ubuntu16.04", "AMQP-CPP", "\u30d7\u30ed\u30bb\u30b9\u9593\u901a\u4fe1", "RabbitMQ", "libev"]}