{"context": "\n\n\uff08 \u95a2\u9023\u8a18\u4e8b \uff09\n\n\nHirofumiYashima Qiita\u8a18\u4e8b \u300cKeras 1D-Convolution Net \u3067 \u6570\u5024\u6642\u7cfb\u5217\u89e3\u6790 \uff08\u975eNLP\u30c7\u30fc\u30bf\uff09\u3092 \u884c\u3046 \u30b3\u30fc\u30c9 \u3092 \u8aad\u307f\u8fbc\u3093 \u3067 1D ConvNet \u306e \u4f7f\u3044\u65b9 \u3092 \u5b66\u3076\u300d\n\n\nKeras \u306b\u306f\u3001Convolution1D\u5c64 \u3068 MaxPooling1D\u5c64 \u304c \u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n( Keras Documentation )\n\nKeras Documentation Convolution1D\n\n\n\u4e0a\u8a18 \u306e Keras  Convolution1D \u30de\u30cb\u30e5\u30a2\u30eb\u4e2d \u306e \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 \u306f\u3001\n\u304a\u305d\u3089\u304f\u3001\u81ea\u7136\u8a00\u8a9e\u6587\u306e\u30c7\u30fc\u30bf \u3092\u6271\u3046\u5834\u9762 \u3092 \u60f3\u5b9a\u3057\u3066\u3001\n\u4ee5\u4e0b\u306e\u51e6\u7406 \u3092 10 timesteps\uff08\u56de\uff09\u5b9f\u884c\u3059\u308b\u3000\u5185\u5bb9  \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3060 \u3068 \u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u300c32\u5358\u8a9e\u5206 \u306e \u5358\u8a9e\u306e\u6570\u5024ID \u914d\u5217\u300d \u3092 \u8aad\u307f\u8fbc\u3093\u3067\u3001\n \uff08\u9577\u3055\uff0932\u306e\u7dda\u5206\u4e0a \u3092\u3001\u533a\u9593\u9577 3 \u306e \u7a93\u95a2\u6570 \u304c\u30011\u305a\u3064\u6a2a\u306b\u305a\u308c\u306a\u304c\u3089\u3001\uff083\u5358\u8a9e\u5206\u306e\uff09\u7279\u5fb4 \u3092 \u7573\u307f\u8fbc\u3080 \u30d5\u30a3\u30eb\u30bf \u3092\u3001\n \u6307\u5b9a\u3057\u305f\u30d5\u30a3\u30eb\u30bf\u500b\uff08\u4f8b\u3067\u306f 64\u500b\uff09\u5206\u3060\u3051\u3001\u5b9f\u884c\u3059\u308b\u3002\n \u4e0a\u8a18 \u3092\u3001\u5165\u529b\u30c7\u30fc\u30bf \u306b \u683c\u7d0d\u3055\u308c\u305f \u300cID\u914d\u5217\uff08\uff1d1 sentence\uff09\u300d\u500b\u5206\u3060\u3051\uff08\u4f8b\u3067\u306f10\uff09\u3001\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3059\u308b\u3002\n\n\n\n\uff08 \u4ee5\u4e0b\u3001\u30b3\u30fc\u30c9\u8a72\u5f53\u7b87\u6240 \uff09\n\n\nKeras Documentation Convolution1D\n\n\u7573\u307f\u8fbc\u307f\u5c64\uff08 1D Conv\u5c64 \uff09\n\nkeras 1D convolution\n# apply a convolution 1d of length 3 to a sequence with 10 timesteps, \n# with 64 output filters \n\nmodel = Sequential() \n\nmodel.add(Convolution1D(64, 3, border_mode='same', input_shape=(10, 32))) \n\n\nKeras Documentation \u3067\u306f\u3001\ninput_shape = (10, 128)\n\u306e \u5834\u5408\u3001 \u30e2\u30c7\u30eb \u306b \u4e0e\u3048\u3089\u3048\u308b \u30c7\u30fc\u30bf \u306f\u3001\n\n\u300c\u8981\u7d20\u6570 128 \u306e \u30ea\u30b9\u30c8\u300d \u3092 10\u500b \u8981\u7d20 \u306b \u6301\u3064 \u4e8c\u91cd\u30ea\u30b9\u30c8\n\n\u3067\u3042\u308b\u3053\u3068 \u304c \u8ff0\u3079\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\ninput_shape (tuple of integers, e.g. (10, 128) for sequences of 10 vectors of 128-dimensional vectors\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 \u3067\u306f\u3001\n\ninput_shape = (10, 32)\n\n\u306b \u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f \u306f\u3001\u4ee5\u4e0b\u306e\u5f15\u6570 \u3068\u3057\u3066\u30011 \u6b21\u5143 \u7573\u307f\u8fbc\u307f\u5c64\uff08 Convolution1D \uff09 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u306b \u6e21\u3055\u308c\u307e\u3059\u3002\n\ninput_shape = (10, 32)\n\n\u3055\u3089\u306b\u3001\u30d5\u30a3\u30eb\u30bf \u306e \u6570 \u3068 \u9577\u3055  \u306f\u3001 Convolution1D\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u306e \u7b2c\uff11\u5f15\u6570 \u3068 \u7b2c\uff12\u5f15\u6570 \u3067 \u6e21\u3059 \u3088\u3046\u3067\u3059\u3002\n\n# apply a convolution 1d of length 3 to a sequence with 10 timesteps, \n# with 64 output filters \n\nmodel.add(Convolution1D(64, 3, border_mode='same', input_shape=(10, 32))) \n\n\n\n\u30fb \u30d5\u30a3\u30eb\u30bf \u306e \u6642\u9593\u9577 : 3\u5909\u6570\u5e45\n\u203b 32\u500b\u3001\u6570\u5024\uff08\uff1d\u5358\u8a9eID\uff09 \u304c \uff11\u5217 \u306b \u4e26\u3093\u3060\uff11\u6b21\u5143\u7dda\u5206\u4e0a \u3092\u30011\u305a\u3064\u6a2a\u306b\u305a\u308c\u306a\u304c\u3089\u3001\u533a\u9593\u9577 3 \u306e \u7a93\u95a2\u6570 \u304c \u79fb\u52d5\u3057\u3066\u3001\u5024 \u3092 \u7573\u307f\u8fbc\u3093\u3067\u3044\u304f \u30a4\u30e1\u30fc\u30b8\n\n\n\u30d5\u30a3\u30eb\u30bf \u306e \u6570 : 64 \n\n\n\ninput_shape \u3092 \u4f7f\u3046\u3068\u3001\u6587 \u8907\u6570\u4ef6 \u306b \u5bfe\u3057\u3066\u3001\u5206\u985e\u30af\u30e9\u30b9\u30e9\u30d9\u30eb 1\u4ef6 \u3067 \u6b63\u3057\u3044\uff1f\n\n\u6559\u5e2b\u7528\uff08\u5206\u985e\uff09\u30e9\u30d9\u30eb \u306b\u3064\u3044\u3066\u306f\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u4e2d \u3067 \u8a00\u53ca \u304c \u306a\u3044\u3082\u306e\u306e\u3001\n\ninput_shape = (10, 32)\n\n\u3092 \u6307\u5b9a\u3059\u308b \u3068\u3001\n\n\u300c\u5358\u8a9e\u657032\u306esentence \u304c 10 sentences\u300d\n\n\u304c\u3001\u6587\u5e30\u5c5e\u30af\u30e9\u30b9\n\uff08\u66f8\u3044\u305f\u4f5c\u5bb6\u306e\u6c0f\u540d\u30e9\u30d9\u30eb\uff08\u591a\u30af\u30e9\u30b9\uff09 or \u30dd\u30b8\u30cd\u30ac2\u30af\u30e9\u30b9\u7b49\uff09\n\u3092 \u5224\u5b9a\u3059\u308b \uff11\u4ef6 \u306e \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306a\u308b\u305f\u3081\u3001\n\u6559\u5e2b\u30e9\u30d9\u30eb\u306f\u3001\n\n\u300c\u5358\u8a9e\u657032\u306esentence \u304c 10 sentences \u63c3\u3063\u305f \u675f\u300d \u306b \u3064\u304d \uff11\u30e9\u30d9\u30eb\n\n\u306b \u306a\u308b\u3001\u3068\u89e3\u91c8\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u6b63\u3057\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\nkeras\nmodel.fit()\nmodel.evaluate()\n\n\n\n\n\u5b9f\u884c\u6642 \u306b\u3001\n\n\n\n\u8aac\u660e\u5909\u6570 : \u300c\u5358\u8a9eID\uff0832\u500b\uff09\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8\u300d \u3092 10\u4ef6\u3001\u8981\u7d20 \u306b \u6301\u3064 \u4e8c\u91cd\u30ea\u30b9\u30c8\u3000\n\n\u76ee\u7684\u5909\u6570: \u30af\u30e9\u30b9\u30e9\u30d9\u30eb 1\u3064\uff08\u81ea\u7136\u6570 \u3067 \u6307\u5b9a\u3059\u308b\uff09\n\n\n\u3092 \u6e21\u3059\u3082\u306e \u3068 \u601d\u308f\u308c\u307e\u3059\u3002\n\ninput_dim \u3067\u3082 \u5165\u529b\u30c7\u30fc\u30bf\u306e\u6b21\u5143 \u3092 \u6307\u5b9a\u3067\u304d\u308b\n\n\ninput_dim = 32\n\n\u3067 \u5165\u529b\u30c7\u30fc\u30bf \u3092 \u6307\u5b9a \u3059\u308b\u3068\u3001\n\n\uff11timestep \u306b\u3001\u300c\u5358\u8a9eID\uff0832\u500b\uff09\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8\u300d \u3092 1\u4ef6\u3060\u3051 \u4e0e\u3048\u308b\n\n\u5efa\u3066\u4ed8\u3051 \u306b \u306a\u308b\u305f\u3081\u3001\n\n\n\u3010 \u5165\u529b \u3011 32\u5358\u8a9e \u306e \u6587 sentence 1\u4ef6\n\n\u3010 \u51fa\u529b \u3011 \u5165\u529b\u3057\u305f\u65871\u4ef6 \u306e \u5e30\u5c5e\u30af\u30e9\u30b9 \n\n\u3068\u3044\u3046\u3088\u3046 \u306b\u3001 \n1 sentence\u5358\u4f4d \u3067 \u5165\u529b => 1 sentence\u5358\u4f4d \u306e \u30af\u30e9\u30b9\u5224\u5b9a\n\u3092\u884c\u3048\u308b \u5206\u985e\u30e2\u30c7\u30eb \u3092 1d-CNN \u3067 \u7d44\u6210\u3067\u304d\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\ninput_shape() \u306e\u3000\u7b2c1\u5f15\u6570 \u306f\u3001channel\u306e\u6570\uff1f\n\nKeras Documentation \u306b\u306f\u3001\nConvolution 1D \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u306e \u5f15\u6570\u4e00\u89a7 \u306b\u3001\u4ee5\u4e0b\u306e\u8a18\u8ff0 \u304c \u3042\u308b\u3002\n\n\uff08 \u4ee5\u4e0b\u3001\u592a\u5b57 \u306f \u672c\u8a18\u4e8b\u57f7\u7b46\u8005 \u306b \u3088\u308b\uff09\n\ninput_dim: Number of channels/dimensions in the input. Either this argument or the keyword argument input_shapemust be provided when using this layer as the first layer in a model.\n\n\u30c1\u30e3\u30cd\u30eb \u306f\u30012d-CNN \u3067 \u753b\u50cf \u3092 \u6271\u3046\u5834\u5408 \u306e RGB\uff08\u30c1\u30e3\u30cd\u30eb\u6570\uff1a\uff13\uff09\u3092\u6271\u3046\u3082\u306e\u3002\n\n\u540c\u3058\uff11\u679a\u306e\uff12\u6b21\u5143\u753b\u50cf \u306f\u3001\u5185\u90e8\u7684\u306b (Red, Green, Blue\uff09\u306e\u6570\u5024\u30bf\u30d7\u30eb \u306b \u306a\u3063\u3066\u3044\u308b\n\n\u307e\u305f\u3001\u900f\u660e\u5ea6\u03b1 \u304c \u52a0\u308f\u308a\u3001(Red, Green, Blue, \u03b1\uff09\u306b\u306a\u308c\u3070\u3001\u30c1\u30e3\u30cd\u30eb\u6570=4 \u306b \u306a\u308b\u3002\n\u672c\u8a18\u4e8b\u5192\u982d \u3067\u3001Keras Documentation \u306e \u30b5\u30f3\u30d7\u30eb\u30fb\u30b3\u30fc\u30c9 \u306f\u3001\n\u6587\u7ae0 sentence \u30c7\u30fc\u30bf \u3092 \u5ff5\u982d \u306b \u304a\u3044\u3066\u3044\u308b\u3001\n\u3068 \u6c7a\u3081\u3066\u304b\u304b\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u6587\u66f8\u30c7\u30fc\u30bf \u3067 \u30c1\u30e3\u30cd\u30eb \u304c\u3067\u3066\u304f\u308b \u4e8b\u4f8b \u306f \u8003\u3048\u306b\u304f\u304b\u3063\u305f\u304c\u3001\n\u6642\u9593\u65b9\u5411 \u306b \u9577\u3055 \u3092 \u6301\u3064 \u6570\u5024\u30c7\u30fc\u30bf \u3068\u3057\u3066\u3001\u4f8b\u3048\u3070\u3001\n\u4e00\u5b9a\u306e\u6642\u9593\u9593\u9694 \u3067 \u53d6\u5f97\u3067\u304d\u308b \u591a\u5909\u91cf\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\uff08\u4ee5\u4e0b\u3001\u4f8b\uff09\n\n\u9867\u5ba2\u306e\u884c\u52d5\u5c65\u6b74\u30c7\u30fc\u30bf\uff08\u8907\u6570\u9805\u76ee\uff09\n\u793e\u4f1a\u7d4c\u6e08\u30c7\u30fc\u30bf\uff08\u30de\u30af\u30ed\u7d4c\u6e08\u6307\u6a19\u3001Google\u691c\u7d22\u4e0a\u4f4d\u5358\u8a9e\u3001\u306a\u3069\u8907\u6570\u9805\u76ee\uff09\nIoT\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\uff08\u8907\u6570\u30bb\u30f3\u30b5\uff09\n\n\u3092 \u8003\u3048\u308b\u306a\u3089\u3070\u3001\n\n\u9867\u5ba2\u306e\u884c\u52d5\u5c65\u6b74\u30c7\u30fc\u30bf \u306e \u30c1\u30e3\u30cd\u30eb \u3068\u3057\u3066\u3001\n\n\uff08\u30c1\u30e3\u30cd\u30eb0\uff09\u65e5\u6b21 \u30ed\u30b0\u30a4\u30f3\u56de\u6570\n\uff08\u30c1\u30e3\u30cd\u30eb1\uff09\u65e5\u6b21 \u8cfc\u8cb7\u5408\u8a08\u91d1\u984d\n\uff08\u30c1\u30e3\u30cd\u30eb2\uff09\u65e5\u6b21 \u5408\u8a08\u30ed\u30b0\u30a4\u30f3\u6642\u9593\n\uff08\u30c1\u30e3\u30cd\u30eb3\uff09\u65e5\u6b21 \u95b2\u89a7\u30a6\u30a7\u30d6\u30da\u30fc\u30b8\u7a2e\u985e\u6570\n\n\u793e\u4f1a\u7d4c\u6e08\u30c7\u30fc\u30bf \u3068\u3057\u3066\u3001\n\n\uff08\u30c1\u30e3\u30cd\u30eb0\uff09 \u56db\u534a\u671f GDP\uff08\u901f\u5831\u5024\uff09\n\uff08\u30c1\u30e3\u30cd\u30eb1\uff09 \u56db\u534a\u671f \u6709\u52b9\u6c42\u4eba\u500d\u7387\uff08\u901f\u5831\u5024\uff09\n\uff08\u30c1\u30e3\u30cd\u30eb2\uff09 \u56db\u534a\u671f \u4e00\u4e16\u5e2f\u5f53\u305f\u308a\u5e73\u5747\u56fd\u6c11\u6240\u5f97\uff08\u5b9f\u8cea\uff09\n\uff08\u30c1\u30e3\u30cd\u30eb3\uff09 \u56db\u534a\u671f 10\u5e74\u7269\u56fd\u50b5\u91d1\u5229 \u4e2d\u592e\u5024\uff08\u5b9f\u8cea\uff09\n\uff08\u30c1\u30e3\u30cd\u30eb4\uff09 \u56db\u534a\u671f \u6d88\u8cbb\u8005\u7269\u4fa1\u6307\u6570 \u4e2d\u592e\u5024\uff08\u5b9f\u8cea\uff09\n\uff08\u30c1\u30e3\u30cd\u30eb5\uff09 \u56db\u534a\u671f \u666f\u6cc1\u611f\u6307\u6570\n\uff08\u30c1\u30e3\u30cd\u30eb6\uff09 \u56db\u534a\u671f \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570 \u4e2d\u592e\u5024\n\uff08\u30c1\u30e3\u30cd\u30eb7\uff09 \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u306e\u56db\u534a\u671f \u6a19\u6e96\u504f\u5dee\n\uff08\u30c1\u30e3\u30cd\u30eb8\uff09 \u6050\u6016\uff08VIX\uff09\u6307\u6570\u306e\u56db\u534a\u671f \u4e2d\u592e\u5024\n\uff08\u30c1\u30e3\u30cd\u30eb9\uff09 \u6050\u6016\uff08VIX\uff09\u6307\u6570\u306e\u56db\u534a\u671f \u6a19\u6e96\u504f\u5dee\n\u306a\u3069\u3001\u30de\u30eb\u30c1\u30e2\u30fc\u30c0\u30eb \u306a \u8907\u6570\u30c7\u30fc\u30bf\u9805\u76ee \u3092 \u7528\u3044\u305f \u591a\u5909\u91cf\u6642\u7cfb\u5217\u89e3\u6790\uff08\u5206\u985e\u30fb\u56de\u5e30\uff09\u3092\u884c\u3046\u9053 \u304c \u958b\u3051\u308b\u3002\n\n\uff08 \u53c2\u8003 \uff09 \u8907\u6570\u306e\u6642\u7cfb\u5217 \u6570\u5024\u5909\u91cf \u3092 \u6271\u3046\u30a2\u30d7\u30ed\u30fc\u30c1\u306b\u306f\u3001\u5225\u9014\u5bfe\u5fdc \u304c \u5fc5\u8981\n\n\nHirofumiYashima Qiita\u8a18\u4e8b \u300c\u3010\u6df1\u5c64\u5b66\u7fd2 \u3067 \u591a\u5909\u91cf\u6642\u7cfb\u5217\u89e3\u6790\u3011Deep Neural Network \u3067 \u591a\u5909\u91cf\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf \u3092 \u4f7f\u3063\u3066\u3001 \u5206\u985e\u4e88\u6e2c\u30fb\u56de\u5e30\u4e88\u6e2c\u3059\u308b\u65b9\u6cd5\u300d\n\n\n\n\u8996\u70b9\u3092\u5909\u3048\u3066\u30fb\u30fb\u30fb\n\n\n\u4ee5\u4e0b \u3067\u3001\u5927\u91cf\u8aac\u660e\u5909\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u30d1\u30bf\u30fc\u30f3 \u3067 \u30af\u30e9\u30b9\u5206\u985e\u30fb\u56de\u5e30\u4e88\u6e2c\u3067\u304d\u305d\u3046\u3060\n\n\u3010 \u5165\u529b\u30c7\u30fc\u30bf \u3011\n\uff11\u6b21\u5143\u65b9\u5411\uff1a\u5404\u8aac\u660e\u5909\u6570 \u306e \u5024\uff08\u914d\u5217\uff09\n\u30c1\u30e3\u30cd\u30eb : \u6642\u9593\u6b21\u5143\n\uff08\u30c1\u30e3\u30f3\u30cd\u30eb0\uff09\u30001\u65e5\u524d\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb1\uff09\u30002\u65e5\u524d\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb3\uff09\u30003\u65e5\u524d\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb4\uff09\u30004\u65e5\u524d \n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb5\uff09\u30005\u65e5\u524d \n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb6\uff09\u30006\u65e5\u524d \n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb7\uff09\u30007\u65e5\u524d \n\u3064\u307e\u308a\u3001\u4ee5\u4e0b \u306b \u306a\u308b\u3002\n\uff08\u30c1\u30e3\u30f3\u30cd\u30eb0\uff09\u30001\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb1\uff09\u30002\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb3\uff09\u30003\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb4\uff09\u30004\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb5\uff09\u30005\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb6\uff09\u30006\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb7\uff09\u30007\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n\u3010 \u6559\u5e2b\u30e9\u30d9\u30eb \u3011\n\u4e0a\u8a18\u306e7\u30c1\u30e3\u30cd\u30eb \u5168\u4f53 \u3067\u30011\u30e9\u30d9\u30eb\n\n\nMaxPooling\u5c64\u4ee5\u964d \u306e \u5c64\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 \u306b \u7d9a\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u5c64\u304c\u7d9a\u304f \u3068 \u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\nMaxPooling1D\u5c64\n\u5168\u7d50\u5408\u5c64\uff08Dense\u5c64\uff09\n\u51fa\u529b\u5c64\n\u203b\uff08\u591a\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\uff09Softmax\u95a2\u6570\n\uff08\uff12\u30af\u30e9\u30b9\u5206\u985e\uff09sigmoid\u95a2\u6570\n\n\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\uff08 MaxPooling1D\u5c64 \uff09\n\n\u7d9a\u3051\u3066\u3001MaxPooling1D\u5c64 \u3067 \u4f4d\u7f6e\u305a\u308c \u306b \u5bfe\u3059\u308b \u9811\u5f37\u6027\uff08\u30ed\u30d0\u30b9\u30c8\u6027\uff09\u3092 \u4ed8\u4e0e\u3059\u308b\u3002\n\nKeras Documentation MaxPooling1D\n\n\nkeras.layers.pooling.MaxPooling1D(pool_length=2, stride=None, border_mode='valid'\n\n\n\n\u5168\u7d50\u5408\u5c64\uff08 Dense\u5c64 \uff09 \u53ca\u3073 Softmax\u95a2\u6570 \u3092 \u304b\u3051\u308b\n\n\nKeras Documentation Dense\n\n\nkeras 1D convolution\nmodel.add(Flatten())\n\nmodel.add(Dense(hidden_dims))\nmodel.add(Dropout(0.2))\nmodel.add(Activation('relu'))\n\n# 5\u30af\u30e9\u30b9\u5206\u985e\u3057\u305f\u5834\u5408\nmodel.add(Dense(5))\nmodel.add(Activation('softmax'))\nreturn model\n\n# \uff12\u30af\u30e9\u30b9\u5206\u985e\u306e\u5834\u5408\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\nreturn model\n\n\n\n\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb \u3068 \u5b66\u7fd2\u30c7\u30fc\u30bf\u3078\u306e\u3042\u3066\u306f\u3081 & \u691c\u8a3c\u30c7\u30fc\u30bf\u3067\u306e\u5224\u5225\u7cbe\u5ea6\u30c6\u30b9\u30c8\n\n\uff08 \u53c2\u8003 \uff09\n\u4ee5\u4e0b \u306f\u3001\uff11\u5909\u91cf\u306e\u30c7\u30fc\u30bf \u3092 \u6271\u3063\u3066\u3001keras \u3067 \u5206\u985e\u554f\u984c \u3092 \u89e3\u3044\u305f\u30b3\u30fc\u30c9\u4e8b\u4f8b__\n\nmoxt\uff082016/08/23\uff09\u300cKeras\u306eCNN\u3092\u4f7f\u3063\u3066\u6587\u66f8\u5206\u985e\u3059\u308b\u300d\nHatena Blog \u4eba\u5de5\u77e5\u80fd\u306b\u95a2\u3059\u308b\u65ad\u5275\u9332 \uff082016/11/08\uff09\u300cKeras\u306b\u3088\u308b\u591a\u30af\u30e9\u30b9\u5206\u985e\uff08Iris\uff09\u300d\n\n\nkeras 1D convolution\n# \u591a\u30af\u30e9\u30b9\u5206\u985e\u306e\u5834\u5408\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# \uff12\u30af\u30e9\u30b9\u5206\u985e\u306e\u5834\u5408\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\n\nmodel.fit(train_X, train_Y, nb_epoch=50, batch_size=1, verbose=1)\n\n# \u30e2\u30c7\u30eb\u8a55\u4fa1\nloss, accuracy = model.evaluate(test_X, test_Y, verbose=0)\nprint(\"Accuracy = {:.2f}\".format(accuracy))\n\n\n\n\u5358\u8a9eID \u4ee5\u5916 \u306e \u7d4c\u6e08\u6307\u6a19\u6570\u5024 \u3084 IoT\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf \u3092 \u6271\u3046\u5834\u5408\n\n\u4e00\u5b9a\u306e\u6642\u9593\u9593\u9694 \u3067 \u53d6\u5f97\u3067\u304d\u308b \u6642\u7cfb\u5217\u30c7\u30fc\u30bf \u3068\u3057\u3066 \u306f\u3001\n\n\n\u9867\u5ba2\u306e\u884c\u52d5\u5c65\u6b74\u30c7\u30fc\u30bf\uff08\u8907\u6570\u9805\u76ee\uff09\n\u793e\u4f1a\u7d4c\u6e08\u30c7\u30fc\u30bf\uff08\u30de\u30af\u30ed\u7d4c\u6e08\u6307\u6a19\u3001Google\u691c\u7d22\u4e0a\u4f4d\u5358\u8a9e\u3001\u306a\u3069\uff09\n\u6a5f\u5668\u306e\u52d5\u4f5c\u72b6\u614b \u306e \u89b3\u6e2c\u5024\uff08IoT\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\uff09\n\n\n\u304c \u8003\u3048\u3089\u308c\u307e\u3059\u3002\nConvolution1D\u5c64 \u3092 \u4f7f\u3063\u3066\u3001\n\u3053\u3046\u3057\u305f\u6570\u5024 \u6642\u7cfb\u5217\u30c7\u30fc\u30bf \u306e \u6642\u9593\u7279\u5fb4\u91cf \u3092 1\u6b21\u5143\u7573\u307f\u8fbc\u307f \u3067 \u5b66\u7fd2\u3055\u305b\u308b \u306b\u306f\u3001\n\u793e\u4f1a\u7d4c\u6e08\u30c7\u30fc\u30bf \u3068\u3057\u3066\u3001\n\n\u6d88\u8cbb\u8005\u7269\u4fa1\u6307\u6570\uff08\u5b9f\u8cea\uff09\n\n\u306a\u3044\u3057\n\n\u666f\u6cc1\u611f\u6307\u6570\n\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u306e\u5e74\u4e2d\u592e\u5024\n\n\u306a\u3069\u3001\u3044\u305a\u308c\u304b 1\u5909\u91cf\uff081\u5909\u6570\uff09 \n\u3092 \u9078\u629e\u3057\u305f\u4e0a \u3067\u3001\n\u9078\u629e\u3057\u305f 1\u5909\u6570 \u306e\u30c7\u30fc\u30bf \u3092 \u4e00\u5b9a\u671f\u9593\u5206\u3001\u6570\u5024\u914d\u5217 \u3068\u3057\u3066 \u683c\u7d0d\u3057\u305f \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 \u3092\u3001\nKeras Documentation \u6240\u53ce \u306e \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u305d\u306e\u307e\u307e \u306b \u53d6\u308a\u6271\u3048\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\u4e00\u4f8b\u3068\u3057\u3066\u3001\n\n\uff08\u65e5\u6b21\uff09\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\n\u65e5\u6b21\u30c7\u30fc\u30bf \u3067 14\u671f\u9593\uff08 = 2\u9031\u9593 \uff09\n\n\u683c\u7d0d\u3057\u305f\u3001\u8981\u7d20\u657014 \u306e \u914d\u5217\u30ea\u30b9\u30c8 \u3092 \u53d7\u3051\u53d6\u308a\u3001\n\ninput_dim = 14\n\n\u30e2\u30c7\u30eb\u5b66\u7fd2\u6642 \u3068 \u691c\u8a3c\u6642 \u306e \u6559\u5e2b\u7528\u30af\u30e9\u30b9\u30e9\u30d9\u30eb \u3068\u3057\u3066\u3001\n\n\u7fcc\u9031 \uff11\u9031\u9593 \u306e \u300c\u5e02\u5834\u5fc3\u7406\u5b89\u5b9a\u5ea6 \u5206\u985e\u30af\u30e9\u30b9\u300d\n\n\u306e \u5b9f\u7e3e\u5024\u3092\u6559\u5e2b\u30e9\u30d9\u30eb \u3068\u3057\u3066 \u4e0e\u3048\u308b \u3068\u3001\n\uff08 \u5165\u529b\u5024 \uff09\n\n\u65b0\u898f\u30c7\u30fc\u30bf \u3068\u3057\u3066\u3001\u76f4\u8fd1\uff12\u9031\u9593 \u306e \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\uff08\u5b9f\u7e3e\u5024\uff09\n\n\uff08 \u51fa\u529b\u5024 \uff09\n\n\u7fcc\u9031 \uff11\u9031\u9593 \u306e \u300c\u5e02\u5834\u5fc3\u7406\u5b89\u5b9a\u5ea6 \u5206\u985e\u30af\u30e9\u30b9\u300d\uff08\u63a8\u5b9a\u5024\uff09\n\n\u3092 \u4e88\u6e2c\u7d50\u679c \u3092 \u8fd4\u3059 \u5206\u985e\u30e2\u30c7\u30eb \u3092 \u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b \u3068 \u601d\u308f\u308c\u308b\u3002\n\n\u6570\u5024\u3092\u4e88\u6e2c \u3059\u308b \u56de\u5e30\u554f\u984c \u3082\u89e3\u304b\u305b\u308b\u3053\u3068 \u304c \u3067\u304d\u308b\u306f\u305a\u3002\n\n\n\uff08 \u5fc5\u8981\u306a\u5909\u66f4 \uff09\n\n\n\n\u6559\u5e2b\u30e9\u30d9\u30eb\u3067\u306f\u306a\u304f\u3001\u6559\u5e2b\u6570\u5024\uff08\u7fcc\u9031\u306e\u65e5\u7d4c\u5e73\u5747\u306e\u6a19\u6e96\u504f\u5dee volatility\u7b49\uff09\u3092 \u4e0e\u3048\u308b\n\u640d\u5931\u95a2\u6570\uff08\u76ee\u7684\u95a2\u6570\uff09\u3092 \uff12\u4e57\u8aa4\u5dee\u95a2\u6570 \u306b \u3059\u308b\n\n\n\n\uff08 \u53c2\u8003 \uff09 \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\n\n\n\ne\u30ef\u30e9\u30f3\u30c8\u30b8\u30e3\u30fc\u30ca\u30eb\n\n\n\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u3068\u306f\n\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\uff08Economic Policy Uncertainty Index\uff09\u306f\u30b9\u30b3\u30c3\u30c8\u30fbR\u30fb\u30d9\u30fc\u30ab\u30fc\uff08\u30ce\u30fc\u30b9\u30a6\u30a7\u30b9\u30bf\u30f3\u5927\u5b66\u30b1\u30ed\u30c3\u30b0\u7d4c\u55b6\u5927\u5b66\u9662\u51c6\u6559\u6388\uff09\u3001\u30cb\u30c3\u30af\u30fb\u30d6\u30eb\u30fc\u30e0\uff08\u30b9\u30bf\u30f3\u30d5\u30a9\u30fc\u30c9\u5927\u5b66\u6559\u6388\uff09\u3001\u30b9\u30c6\u30a3\u30fc\u30d6\u30f3\u30fbJ\u30fb\u30c7\u30a4\u30f4\u30a3\u30b9\uff08\u30b7\u30ab\u30b4\u5927\u5b66\u30d6\u30fc\u30b9\u7d4c\u55b6\u5927\u5b66\u9662\u6559\u6388\uff09\u304c\u958b\u767a\u3057\u305f\u6307\u6570\u3067\u3001\u4e3b\u8981\u306a\u65b0\u805e\u304b\u3089\u7d4c\u6e08\u653f\u7b56\u306e\u4e0d\u78ba\u5b9f\u6027\u306b\u95a2\u3059\u308b\u8a18\u4e8b\u306e\u6570\u306a\u3069\u304b\u3089\u7d4c\u6e08\u653f\u7b56\u306e\u4e0d\u78ba\u5b9f\u6027\u3092\u6e2c\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e00\u65b9\u3067\u3001VIX\uff08\u30f4\u30a3\u30c3\u30af\u30b9\uff09\u3068\u306f\u3001S&P500\u6307\u6570\u3092\u5bfe\u8c61\u3068\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u53d6\u5f15\u4fa1\u683c\u304b\u3089\u63a8\u8a08\u3055\u308c\u308b\u4e88\u60f3\u5909\u52d5\u7387\uff08\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\uff09\u3092\u3082\u3068\u306b\u3057\u305f\u6307\u6570\u3067\u3042\u308a\u3001\u682a\u5f0f\u5e02\u5834\u306e\u4e0b\u843d\u6642\u306b\u4e0a\u6607\u3059\u308b\u50be\u5411\u304c\u3042\u308b\u3053\u3068\u304b\u3089\u65e5\u672c\u3067\u306f\u6050\u6016\u6307\u6570\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u3068VIX\u306e\u95a2\u4fc2\n\u56f31\u306f\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u3068VIX\u306e\u63a8\u79fb\u3092\u6bd4\u8f03\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\u904e\u53bb\u306e\u7814\u7a76\u8ad6\u6587\u3067\u306fVIX\u306f\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u304c\u9ad8\u307e\u308b\u3068\u4e0a\u6607\u3059\u308b\u50be\u5411\u304c\u3042\u308b\u3068\u5831\u544a\u3055\u308c\u3066\u304a\u308a\u3001\u56f31\u306b\u304a\u3044\u3066\u3082\u305d\u306e\u95a2\u4fc2\u6027\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u56f32\u306b\u3042\u308a\u307e\u3059\u3088\u3046\u306b\u30012016\u5e74\u306b\u5165\u3063\u3066\u304b\u3089\u306f\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u304c\u4e0a\u6607\u3057\u3066\u3044\u308b\u306b\u3082\u95a2\u308f\u3089\u305a\u3001VIX\u306f\u3055\u307b\u3069\u4e0a\u6607\u305b\u305a\u3001\u5e74\u672b\u306b\u304b\u3051\u3066\u4e56\u96e2\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\u7279\u306b\u30c8\u30e9\u30f3\u30d7\u6c0f\u304c\u7c73\u56fd\u5927\u7d71\u9818\u9078\u6319\u3067\u52dd\u5229\u3057\u305f\u3053\u3068\u3092\u53d7\u3051\u3066\u300111\u6708\u672b\u6642\u70b9\u306e\u7d4c\u6e08\u653f\u7b56\u306e\u4e0d\u78ba\u5b9f\u6027\u306f1997\u5e74\u4ee5\u6765\u6700\u3082\u9ad8\u3044\u6c34\u6e96\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001VIX\u306f\u4f4e\u4e0b\u50be\u5411\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u306f\u6708\u6b21\u3067\u306e\u516c\u8868\u3068\u306a\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001VIX\u306f\u65e5\u3005\u4e0a\u4e0b\u306b\u5909\u52d5\u3057\u307e\u3059\u306e\u3067\u3001\u6708\u672b\u3060\u3051\u3092\u898b\u308b\u3068\u6708\u4e2d\u306eVIX\u306e\u52d5\u304d\u3092\u6349\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u9577\u671f\u7684\u306a\u95a2\u4fc2\u6027\u304b\u3089\u5e02\u5834\u95a2\u4fc2\u8005\u304c\u6307\u6458\u3059\u308b\u3088\u3046\u306bVIX\u306f\u7d4c\u6e08\u653f\u7b56\u306e\u4e0d\u78ba\u5b9f\u6027\u3092\u7e54\u308a\u8fbc\u3093\u3067\u3044\u306a\u3044\u306e\u3067\u306f\u3001\u3068\u3044\u3046\u6307\u6458\u3082\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u3068\u8a00\u3048\u305d\u3046\u3067\u3059\u3002\n\n\nEconomic Policy Uncertainty\n\n\n\n\n\n\uff08 GitHub\uff09OriolAndres/news_risk\n\n\nPolitical Uncertainty Index for Spain\nConstructing an uncertainty index for Spain and assessing the predictive value on economic activity.\nWe construct an economic uncertainty index (EU) and an economic policy uncertainty (EPU) index for Spain following the policyuncertainty.com methodology exploited in Baker, Bloom and Davis [BBD].\nWe base the index on the archives of El Pais and Cinco D\u00edas.\nFollowing BBD, we conduct two different exercises to explore the impact of policy uncertainty on economic activity.\n\n\n\n\u591a\u5909\u91cf \u6570\u5024\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3000\u3092 \u6271\u3046 \u30b3\u30fc\u30c9\u4f8b\n\ninput_shape() \u3067 \u591a\u5909\u91cf\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf \u3092 \u6e21\u3057\u3066\u3044\u308b\u3002\n\nconvolutional neural network (CNN) for timeseries prediction\n\n\nExample of using Keras to implement a 1D convolutional neural network (CNN) for timeseries prediction.: \ntimeseries_cnn.py\n\n\nkeras\n#!/usr/bin/env python\n\"\"\"\nExample of using Keras to implement a 1D convolutional neural network (CNN) for timeseries prediction.\n\"\"\"\n\nfrom __future__ import print_function, division\n\nimport numpy as np\nfrom keras.layers import Convolution1D, Dense, MaxPooling1D, Flatten\nfrom keras.models import Sequential\n\n\n__date__ = '2016-07-22'\n\n\ndef make_timeseries_regressor(window_size, filter_length, nb_input_series=1, nb_outputs=1, nb_filter=4):\n    \"\"\":Return: a Keras Model for predicting the next value in a timeseries given a fixed-size lookback window of previous values.\n\n    The model can handle multiple input timeseries (`nb_input_series`) and multiple prediction targets (`nb_outputs`).\n\n    :param int window_size: The number of previous timeseries values to use as input features.  Also called lag or lookback.\n    :param int nb_input_series: The number of input timeseries; 1 for a single timeseries.\n      The `X` input to ``fit()`` should be an array of shape ``(n_instances, window_size, nb_input_series)``; each instance is\n      a 2D array of shape ``(window_size, nb_input_series)``.  For example, for `window_size` = 3 and `nb_input_series` = 1 (a\n      single timeseries), one instance could be ``[[0], [1], [2]]``. See ``make_timeseries_instances()``.\n    :param int nb_outputs: The output dimension, often equal to the number of inputs.\n      For each input instance (array with shape ``(window_size, nb_input_series)``), the output is a vector of size `nb_outputs`,\n      usually the value(s) predicted to come after the last value in that input instance, i.e., the next value\n      in the sequence. The `y` input to ``fit()`` should be an array of shape ``(n_instances, nb_outputs)``.\n    :param int filter_length: the size (along the `window_size` dimension) of the sliding window that gets convolved with\n      each position along each instance. The difference between 1D and 2D convolution is that a 1D filter's \"height\" is fixed\n      to the number of input timeseries (its \"width\" being `filter_length`), and it can only slide along the window\n      dimension.  This is useful as generally the input timeseries have no spatial/ordinal relationship, so it's not\n      meaningful to look for patterns that are invariant with respect to subsets of the timeseries.\n    :param int nb_filter: The number of different filters to learn (roughly, input patterns to recognize).\n    \"\"\"\n    model = Sequential((\n        # The first conv layer learns `nb_filter` filters (aka kernels), each of size ``(filter_length, nb_input_series)``.\n        # Its output will have shape (None, window_size - filter_length + 1, nb_filter), i.e., for each position in\n        # the input timeseries, the activation of each filter at that position.\n        Convolution1D(nb_filter=nb_filter, filter_length=filter_length, activation='relu', input_shape=(window_size, nb_input_series)),\n        MaxPooling1D(),     # Downsample the output of convolution by 2X.\n        Convolution1D(nb_filter=nb_filter, filter_length=filter_length, activation='relu'),\n        MaxPooling1D(),\n        Flatten(),\n        Dense(nb_outputs, activation='linear'),     # For binary classification, change the activation to 'sigmoid'\n    ))\n    model.compile(loss='mse', optimizer='adam', metrics=['mae'])\n    # To perform (binary) classification instead:\n    # model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['binary_accuracy'])\n    return model\n\n\ndef make_timeseries_instances(timeseries, window_size):\n    \"\"\"Make input features and prediction targets from a `timeseries` for use in machine learning.\n\n    :return: A tuple of `(X, y, q)`.  `X` are the inputs to a predictor, a 3D ndarray with shape\n      ``(timeseries.shape[0] - window_size, window_size, timeseries.shape[1] or 1)``.  For each row of `X`, the\n      corresponding row of `y` is the next value in the timeseries.  The `q` or query is the last instance, what you would use\n      to predict a hypothetical next (unprovided) value in the `timeseries`.\n    :param ndarray timeseries: Either a simple vector, or a matrix of shape ``(timestep, series_num)``, i.e., time is axis 0 (the\n      row) and the series is axis 1 (the column).\n    :param int window_size: The number of samples to use as input prediction features (also called the lag or lookback).\n    \"\"\"\n    timeseries = np.asarray(timeseries)\n    assert 0 < window_size < timeseries.shape[0]\n    X = np.atleast_3d(np.array([timeseries[start:start + window_size] for start in range(0, timeseries.shape[0] - window_size)]))\n    y = timeseries[window_size:]\n    q = np.atleast_3d([timeseries[-window_size:]])\n    return X, y, q\n\n\ndef evaluate_timeseries(timeseries, window_size):\n    \"\"\"Create a 1D CNN regressor to predict the next value in a `timeseries` using the preceding `window_size` elements\n    as input features and evaluate its performance.\n\n    :param ndarray timeseries: Timeseries data with time increasing down the rows (the leading dimension/axis).\n    :param int window_size: The number of previous timeseries values to use to predict the next.\n    \"\"\"\n    filter_length = 5\n    nb_filter = 4\n    timeseries = np.atleast_2d(timeseries)\n    if timeseries.shape[0] == 1:\n        timeseries = timeseries.T       # Convert 1D vectors to 2D column vectors\n\n    nb_samples, nb_series = timeseries.shape\n    print('\\n\\nTimeseries ({} samples by {} series):\\n'.format(nb_samples, nb_series), timeseries)\n    model = make_timeseries_regressor(window_size=window_size, filter_length=filter_length, nb_input_series=nb_series, nb_outputs=nb_series, nb_filter=nb_filter)\n    print('\\n\\nModel with input size {}, output size {}, {} conv filters of length {}'.format(model.input_shape, model.output_shape, nb_filter, filter_length))\n    model.summary()\n\n    X, y, q = make_timeseries_instances(timeseries, window_size)\n    print('\\n\\nInput features:', X, '\\n\\nOutput labels:', y, '\\n\\nQuery vector:', q, sep='\\n')\n    test_size = int(0.01 * nb_samples)           # In real life you'd want to use 0.2 - 0.5\n    X_train, X_test, y_train, y_test = X[:-test_size], X[-test_size:], y[:-test_size], y[-test_size:]\n    model.fit(X_train, y_train, nb_epoch=25, batch_size=2, validation_data=(X_test, y_test))\n\n    pred = model.predict(X_test)\n    print('\\n\\nactual', 'predicted', sep='\\t')\n    for actual, predicted in zip(y_test, pred.squeeze()):\n        print(actual.squeeze(), predicted, sep='\\t')\n    print('next', model.predict(q).squeeze(), sep='\\t')\n\n\ndef main():\n    \"\"\"Prepare input data, build model, evaluate.\"\"\"\n    np.set_printoptions(threshold=25)\n    ts_length = 1000\n    window_size = 50\n\n    print('\\nSimple single timeseries vector prediction')\n    timeseries = np.arange(ts_length)                   # The timeseries f(t) = t\n    evaluate_timeseries(timeseries, window_size)\n\n    print('\\nMultiple-input, multiple-output prediction')\n    timeseries = np.array([np.arange(ts_length), -np.arange(ts_length)]).T      # The timeseries f(t) = [t, -t]\n    evaluate_timeseries(timeseries, window_size)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\uff08 \u305d\u306e\u4ed6\u3001\u53c2\u8003 \uff09\n\n\nGoogle\u30b0\u30eb\u30fc\u30d7 Keras-users \u203a Convolution1D complete example?\n\n\n###__\uff08 \u95a2\u9023\u8a18\u4e8b \uff09__\n\n* [HirofumiYashima Qiita\u8a18\u4e8b \u300cKeras 1D-Convolution Net \u3067 \u6570\u5024\u6642\u7cfb\u5217\u89e3\u6790 \uff08\u975eNLP\u30c7\u30fc\u30bf\uff09\u3092 \u884c\u3046 \u30b3\u30fc\u30c9 \u3092 \u8aad\u307f\u8fbc\u3093 \u3067 1D ConvNet \u306e \u4f7f\u3044\u65b9 \u3092 \u5b66\u3076\u300d](http://qiita.com/HirofumiYashima/items/6d7125660823b092992c)\n\n___\n\n\nKeras \u306b\u306f\u3001Convolution1D\u5c64 \u3068 MaxPooling1D\u5c64 \u304c \u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\n__( Keras Documentation )__\n\n* [Keras Documentation _Convolution1D_](https://keras.io/layers/convolutional/)\n\n<img width=\"1210\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-26 15.06.21.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/5b480103-3620-ace3-fb58-76d2eb975a40.png\">\n\n\u4e0a\u8a18 \u306e Keras  Convolution1D \u30de\u30cb\u30e5\u30a2\u30eb\u4e2d \u306e \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 \u306f\u3001\n\u304a\u305d\u3089\u304f\u3001\u81ea\u7136\u8a00\u8a9e\u6587\u306e\u30c7\u30fc\u30bf \u3092\u6271\u3046\u5834\u9762 \u3092 \u60f3\u5b9a\u3057\u3066\u3001\n\u4ee5\u4e0b\u306e\u51e6\u7406 \u3092 _10 timesteps_\uff08\u56de\uff09\u5b9f\u884c\u3059\u308b\u3000\u5185\u5bb9  \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3060 \u3068 \u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n* \u300c32\u5358\u8a9e\u5206 \u306e \u5358\u8a9e\u306e\u6570\u5024ID \u914d\u5217\u300d \u3092 \u8aad\u307f\u8fbc\u3093\u3067\u3001\n*  \uff08\u9577\u3055\uff0932\u306e\u7dda\u5206\u4e0a \u3092\u3001\u533a\u9593\u9577 3 \u306e \u7a93\u95a2\u6570 \u304c\u30011\u305a\u3064\u6a2a\u306b\u305a\u308c\u306a\u304c\u3089\u3001\uff083\u5358\u8a9e\u5206\u306e\uff09\u7279\u5fb4 \u3092 \u7573\u307f\u8fbc\u3080 \u30d5\u30a3\u30eb\u30bf \u3092\u3001\n*  \u6307\u5b9a\u3057\u305f\u30d5\u30a3\u30eb\u30bf\u500b\uff08\u4f8b\u3067\u306f 64\u500b\uff09\u5206\u3060\u3051\u3001\u5b9f\u884c\u3059\u308b\u3002\n*  \u4e0a\u8a18 \u3092\u3001\u5165\u529b\u30c7\u30fc\u30bf \u306b \u683c\u7d0d\u3055\u308c\u305f \u300cID\u914d\u5217\uff08\uff1d1 sentence\uff09\u300d\u500b\u5206\u3060\u3051\uff08\u4f8b\u3067\u306f10\uff09\u3001\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3059\u308b\u3002\n\n___\n\n####__\uff08 \u4ee5\u4e0b\u3001\u30b3\u30fc\u30c9\u8a72\u5f53\u7b87\u6240 \uff09__\n\n* [Keras Documentation _Convolution1D_](https://keras.io/layers/convolutional/)\n\n\n__\u7573\u307f\u8fbc\u307f\u5c64\uff08 1D Conv\u5c64 \uff09__\n\n```{python:keras 1D convolution}\n# apply a convolution 1d of length 3 to a sequence with 10 timesteps, \n# with 64 output filters \n\nmodel = Sequential() \n\nmodel.add(Convolution1D(64, 3, border_mode='same', input_shape=(10, 32))) \n```\n\nKeras Documentation \u3067\u306f\u3001\n\n__*input_shape = (10, 128)*__\n\n\u306e \u5834\u5408\u3001 \u30e2\u30c7\u30eb \u306b \u4e0e\u3048\u3089\u3048\u308b \u30c7\u30fc\u30bf \u306f\u3001\n\n* \u300c\u8981\u7d20\u6570 128 \u306e \u30ea\u30b9\u30c8\u300d \u3092 10\u500b \u8981\u7d20 \u306b \u6301\u3064 \u4e8c\u91cd\u30ea\u30b9\u30c8\n\n\u3067\u3042\u308b\u3053\u3068 \u304c \u8ff0\u3079\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n> input_shape (tuple of integers, e.g. (10, 128) for sequences of 10 vectors of 128-dimensional vectors\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 \u3067\u306f\u3001\n\n> input_shape = (10, 32)\n\n\u306b \u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f \u306f\u3001\u4ee5\u4e0b\u306e\u5f15\u6570 \u3068\u3057\u3066\u30011 \u6b21\u5143 \u7573\u307f\u8fbc\u307f\u5c64\uff08 Convolution1D \uff09 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u306b \u6e21\u3055\u308c\u307e\u3059\u3002\n\n> input_shape = (10, 32)\n\n\u3055\u3089\u306b\u3001\u30d5\u30a3\u30eb\u30bf \u306e \u6570 \u3068 \u9577\u3055  \u306f\u3001 Convolution1D\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u306e \u7b2c\uff11\u5f15\u6570 \u3068 \u7b2c\uff12\u5f15\u6570 \u3067 \u6e21\u3059 \u3088\u3046\u3067\u3059\u3002\n\n>```{python:}\n> # apply a convolution 1d of length 3 to a sequence with 10 timesteps, \n># with 64 output filters \n>\n> model.add(Convolution1D(64, 3, border_mode='same', input_shape=(10, 32))) \n>```\n\n___\n\n\u30fb __\u30d5\u30a3\u30eb\u30bf \u306e \u6642\u9593\u9577__ : 3\u5909\u6570\u5e45\n\u203b 32\u500b\u3001\u6570\u5024\uff08\uff1d\u5358\u8a9eID\uff09 \u304c \uff11\u5217 \u306b \u4e26\u3093\u3060\uff11\u6b21\u5143\u7dda\u5206\u4e0a \u3092\u30011\u305a\u3064\u6a2a\u306b\u305a\u308c\u306a\u304c\u3089\u3001\u533a\u9593\u9577 3 \u306e \u7a93\u95a2\u6570 \u304c \u79fb\u52d5\u3057\u3066\u3001\u5024 \u3092 \u7573\u307f\u8fbc\u3093\u3067\u3044\u304f \u30a4\u30e1\u30fc\u30b8\n\n* __\u30d5\u30a3\u30eb\u30bf \u306e \u6570__ : 64 \n\n___\n\n##__input_shape \u3092 \u4f7f\u3046\u3068\u3001\u6587 \u8907\u6570\u4ef6 \u306b \u5bfe\u3057\u3066\u3001\u5206\u985e\u30af\u30e9\u30b9\u30e9\u30d9\u30eb 1\u4ef6 \u3067 \u6b63\u3057\u3044\uff1f__\n\n\u6559\u5e2b\u7528\uff08\u5206\u985e\uff09\u30e9\u30d9\u30eb \u306b\u3064\u3044\u3066\u306f\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u4e2d \u3067 \u8a00\u53ca \u304c \u306a\u3044\u3082\u306e\u306e\u3001\n\n> input_shape = (10, 32)\n\n\u3092 \u6307\u5b9a\u3059\u308b \u3068\u3001\n\n* \u300c\u5358\u8a9e\u657032\u306esentence \u304c 10 sentences\u300d\n\n\u304c\u3001\u6587\u5e30\u5c5e\u30af\u30e9\u30b9\n\uff08\u66f8\u3044\u305f\u4f5c\u5bb6\u306e\u6c0f\u540d\u30e9\u30d9\u30eb\uff08\u591a\u30af\u30e9\u30b9\uff09 or \u30dd\u30b8\u30cd\u30ac2\u30af\u30e9\u30b9\u7b49\uff09\n\n\u3092 \u5224\u5b9a\u3059\u308b \uff11\u4ef6 \u306e \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u306a\u308b\u305f\u3081\u3001\n\n\u6559\u5e2b\u30e9\u30d9\u30eb\u306f\u3001\n\n* \u300c\u5358\u8a9e\u657032\u306esentence \u304c 10 sentences \u63c3\u3063\u305f \u675f\u300d \u306b \u3064\u304d \uff11\u30e9\u30d9\u30eb\n\n\u306b \u306a\u308b\u3001\u3068\u89e3\u91c8\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u6b63\u3057\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\n>```{python:keras}\n>model.fit()\n>model.evaluate()\n>\n>```\n\n\u5b9f\u884c\u6642 \u306b\u3001\n\n___\n\n* __\u8aac\u660e\u5909\u6570__ : \u300c\u5358\u8a9eID\uff0832\u500b\uff09\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8\u300d \u3092 10\u4ef6\u3001\u8981\u7d20 \u306b \u6301\u3064 \u4e8c\u91cd\u30ea\u30b9\u30c8\u3000\n* __\u76ee\u7684\u5909\u6570__: \u30af\u30e9\u30b9\u30e9\u30d9\u30eb 1\u3064\uff08\u81ea\u7136\u6570 \u3067 \u6307\u5b9a\u3059\u308b\uff09\n \n___\n\n\u3092 \u6e21\u3059\u3082\u306e \u3068 \u601d\u308f\u308c\u307e\u3059\u3002\n\n#__input_dim \u3067\u3082 \u5165\u529b\u30c7\u30fc\u30bf\u306e\u6b21\u5143 \u3092 \u6307\u5b9a\u3067\u304d\u308b__\n\n> input_dim = 32\n\n\u3067 \u5165\u529b\u30c7\u30fc\u30bf \u3092 \u6307\u5b9a \u3059\u308b\u3068\u3001\n\n* \uff11timestep \u306b\u3001\u300c\u5358\u8a9eID\uff0832\u500b\uff09\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8\u300d \u3092 **1\u4ef6\u3060\u3051** \u4e0e\u3048\u308b\n\n\u5efa\u3066\u4ed8\u3051 \u306b \u306a\u308b\u305f\u3081\u3001\n\n* __\u3010 \u5165\u529b \u3011__ 32\u5358\u8a9e \u306e \u6587 *sentence* 1\u4ef6\n* __\u3010 \u51fa\u529b \u3011__ \u5165\u529b\u3057\u305f\u65871\u4ef6 \u306e \u5e30\u5c5e\u30af\u30e9\u30b9 \n\n\u3068\u3044\u3046\u3088\u3046 \u306b\u3001 \n\n__1 sentence\u5358\u4f4d \u3067 \u5165\u529b => 1 sentence\u5358\u4f4d \u306e \u30af\u30e9\u30b9\u5224\u5b9a__\n\n\u3092\u884c\u3048\u308b \u5206\u985e\u30e2\u30c7\u30eb \u3092 1d-CNN \u3067 \u7d44\u6210\u3067\u304d\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n##__input_shape() \u306e\u3000\u7b2c1\u5f15\u6570 \u306f\u3001channel\u306e\u6570\uff1f__\n\nKeras Documentation \u306b\u306f\u3001\nConvolution 1D \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u306e \u5f15\u6570\u4e00\u89a7 \u306b\u3001\u4ee5\u4e0b\u306e\u8a18\u8ff0 \u304c \u3042\u308b\u3002\n\n<img width=\"895\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-26 19.50.57.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/493d838e-4b2f-8694-e95f-7cb987d9d369.png\">\n\n\uff08 \u4ee5\u4e0b\u3001\u592a\u5b57 \u306f \u672c\u8a18\u4e8b\u57f7\u7b46\u8005 \u306b \u3088\u308b\uff09\n\n* input_dim: Number of __channels__/dimensions in the input. Either this argument or the keyword argument input_shapemust be provided when using this layer as the first layer in a model.\n\n\u30c1\u30e3\u30cd\u30eb \u306f\u30012d-CNN \u3067 \u753b\u50cf \u3092 \u6271\u3046\u5834\u5408 \u306e RGB\uff08\u30c1\u30e3\u30cd\u30eb\u6570\uff1a\uff13\uff09\u3092\u6271\u3046\u3082\u306e\u3002\n\n* \u540c\u3058\uff11\u679a\u306e\uff12\u6b21\u5143\u753b\u50cf \u306f\u3001\u5185\u90e8\u7684\u306b (Red, Green, Blue\uff09\u306e\u6570\u5024\u30bf\u30d7\u30eb \u306b \u306a\u3063\u3066\u3044\u308b\n\n\u307e\u305f\u3001\u900f\u660e\u5ea6\u03b1 \u304c \u52a0\u308f\u308a\u3001(Red, Green, Blue, \u03b1\uff09\u306b\u306a\u308c\u3070\u3001\u30c1\u30e3\u30cd\u30eb\u6570=4 \u306b \u306a\u308b\u3002\n\n\u672c\u8a18\u4e8b\u5192\u982d \u3067\u3001Keras Documentation \u306e \u30b5\u30f3\u30d7\u30eb\u30fb\u30b3\u30fc\u30c9 \u306f\u3001\n\u6587\u7ae0 *sentence* \u30c7\u30fc\u30bf \u3092 \u5ff5\u982d \u306b \u304a\u3044\u3066\u3044\u308b\u3001\n\u3068 \u6c7a\u3081\u3066\u304b\u304b\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u6587\u66f8\u30c7\u30fc\u30bf \u3067 \u30c1\u30e3\u30cd\u30eb \u304c\u3067\u3066\u304f\u308b \u4e8b\u4f8b \u306f \u8003\u3048\u306b\u304f\u304b\u3063\u305f\u304c\u3001\n\n\u6642\u9593\u65b9\u5411 \u306b \u9577\u3055 \u3092 \u6301\u3064 \u6570\u5024\u30c7\u30fc\u30bf \u3068\u3057\u3066\u3001\u4f8b\u3048\u3070\u3001\n\n\u4e00\u5b9a\u306e\u6642\u9593\u9593\u9694 \u3067 \u53d6\u5f97\u3067\u304d\u308b \u591a\u5909\u91cf\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\uff08\u4ee5\u4e0b\u3001\u4f8b\uff09\n\n* \u9867\u5ba2\u306e\u884c\u52d5\u5c65\u6b74\u30c7\u30fc\u30bf\uff08\u8907\u6570\u9805\u76ee\uff09\n* \u793e\u4f1a\u7d4c\u6e08\u30c7\u30fc\u30bf\uff08\u30de\u30af\u30ed\u7d4c\u6e08\u6307\u6a19\u3001Google\u691c\u7d22\u4e0a\u4f4d\u5358\u8a9e\u3001\u306a\u3069\u8907\u6570\u9805\u76ee\uff09\n* IoT\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\uff08\u8907\u6570\u30bb\u30f3\u30b5\uff09\n\n\u3092 \u8003\u3048\u308b\u306a\u3089\u3070\u3001\n\n* \u9867\u5ba2\u306e\u884c\u52d5\u5c65\u6b74\u30c7\u30fc\u30bf \u306e \u30c1\u30e3\u30cd\u30eb \u3068\u3057\u3066\u3001\n\n\uff08\u30c1\u30e3\u30cd\u30eb0\uff09\u65e5\u6b21 \u30ed\u30b0\u30a4\u30f3\u56de\u6570\n\uff08\u30c1\u30e3\u30cd\u30eb1\uff09\u65e5\u6b21 \u8cfc\u8cb7\u5408\u8a08\u91d1\u984d\n\uff08\u30c1\u30e3\u30cd\u30eb2\uff09\u65e5\u6b21 \u5408\u8a08\u30ed\u30b0\u30a4\u30f3\u6642\u9593\n\uff08\u30c1\u30e3\u30cd\u30eb3\uff09\u65e5\u6b21 \u95b2\u89a7\u30a6\u30a7\u30d6\u30da\u30fc\u30b8\u7a2e\u985e\u6570\n\n* \u793e\u4f1a\u7d4c\u6e08\u30c7\u30fc\u30bf \u3068\u3057\u3066\u3001\n\n\uff08\u30c1\u30e3\u30cd\u30eb0\uff09 \u56db\u534a\u671f GDP\uff08\u901f\u5831\u5024\uff09\n\uff08\u30c1\u30e3\u30cd\u30eb1\uff09 \u56db\u534a\u671f \u6709\u52b9\u6c42\u4eba\u500d\u7387\uff08\u901f\u5831\u5024\uff09\n\uff08\u30c1\u30e3\u30cd\u30eb2\uff09 \u56db\u534a\u671f \u4e00\u4e16\u5e2f\u5f53\u305f\u308a\u5e73\u5747\u56fd\u6c11\u6240\u5f97\uff08\u5b9f\u8cea\uff09\n\uff08\u30c1\u30e3\u30cd\u30eb3\uff09 \u56db\u534a\u671f 10\u5e74\u7269\u56fd\u50b5\u91d1\u5229 \u4e2d\u592e\u5024\uff08\u5b9f\u8cea\uff09\n\uff08\u30c1\u30e3\u30cd\u30eb4\uff09 \u56db\u534a\u671f \u6d88\u8cbb\u8005\u7269\u4fa1\u6307\u6570 \u4e2d\u592e\u5024\uff08\u5b9f\u8cea\uff09\n\uff08\u30c1\u30e3\u30cd\u30eb5\uff09 \u56db\u534a\u671f \u666f\u6cc1\u611f\u6307\u6570\n\uff08\u30c1\u30e3\u30cd\u30eb6\uff09 \u56db\u534a\u671f \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570 \u4e2d\u592e\u5024\n\uff08\u30c1\u30e3\u30cd\u30eb7\uff09 \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u306e\u56db\u534a\u671f \u6a19\u6e96\u504f\u5dee\n\uff08\u30c1\u30e3\u30cd\u30eb8\uff09 \u6050\u6016\uff08VIX\uff09\u6307\u6570\u306e\u56db\u534a\u671f \u4e2d\u592e\u5024\n\uff08\u30c1\u30e3\u30cd\u30eb9\uff09 \u6050\u6016\uff08VIX\uff09\u6307\u6570\u306e\u56db\u534a\u671f \u6a19\u6e96\u504f\u5dee\n\n\u306a\u3069\u3001\u30de\u30eb\u30c1\u30e2\u30fc\u30c0\u30eb \u306a \u8907\u6570\u30c7\u30fc\u30bf\u9805\u76ee \u3092 \u7528\u3044\u305f \u591a\u5909\u91cf\u6642\u7cfb\u5217\u89e3\u6790\uff08\u5206\u985e\u30fb\u56de\u5e30\uff09\u3092\u884c\u3046\u9053 \u304c \u958b\u3051\u308b\u3002\n\n###__\uff08 \u53c2\u8003 \uff09 \u8907\u6570\u306e\u6642\u7cfb\u5217 \u6570\u5024\u5909\u91cf \u3092 \u6271\u3046\u30a2\u30d7\u30ed\u30fc\u30c1\u306b\u306f\u3001\u5225\u9014\u5bfe\u5fdc \u304c \u5fc5\u8981__\n\n* [HirofumiYashima Qiita\u8a18\u4e8b \u300c\u3010\u6df1\u5c64\u5b66\u7fd2 \u3067 \u591a\u5909\u91cf\u6642\u7cfb\u5217\u89e3\u6790\u3011Deep Neural Network \u3067 \u591a\u5909\u91cf\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf \u3092 \u4f7f\u3063\u3066\u3001 \u5206\u985e\u4e88\u6e2c\u30fb\u56de\u5e30\u4e88\u6e2c\u3059\u308b\u65b9\u6cd5\u300d](http://qiita.com/HirofumiYashima/items/1cab35e27d765f08499e)\n\n___\n\n\n##__\u8996\u70b9\u3092\u5909\u3048\u3066\u30fb\u30fb\u30fb__\n####__\u4ee5\u4e0b \u3067\u3001\u5927\u91cf\u8aac\u660e\u5909\u6570\u306e\u7d44\u307f\u5408\u308f\u305b\u30d1\u30bf\u30fc\u30f3 \u3067 \u30af\u30e9\u30b9\u5206\u985e\u30fb\u56de\u5e30\u4e88\u6e2c\u3067\u304d\u305d\u3046\u3060__\n\n__\u3010 \u5165\u529b\u30c7\u30fc\u30bf \u3011__\n\n__\uff11\u6b21\u5143\u65b9\u5411__\uff1a\u5404\u8aac\u660e\u5909\u6570 \u306e \u5024\uff08\u914d\u5217\uff09\n__\u30c1\u30e3\u30cd\u30eb__ : \u6642\u9593\u6b21\u5143\n\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb0\uff09\u30001\u65e5\u524d\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb1\uff09\u30002\u65e5\u524d\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb3\uff09\u30003\u65e5\u524d\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb4\uff09\u30004\u65e5\u524d \n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb5\uff09\u30005\u65e5\u524d \n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb6\uff09\u30006\u65e5\u524d \n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb7\uff09\u30007\u65e5\u524d \n \n \n \u3064\u307e\u308a\u3001\u4ee5\u4e0b \u306b \u306a\u308b\u3002\n \n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb0\uff09\u30001\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb1\uff09\u30002\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb3\uff09\u30003\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb4\uff09\u30004\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb5\uff09\u30005\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb6\uff09\u30006\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \uff08\u30c1\u30e3\u30f3\u30cd\u30eb7\uff09\u30007\u65e5\u524d \u306e \u5404\u8aac\u660e\u5909\u6570\u306e\u5024\u306e\u914d\u5217\n \n__\u3010 \u6559\u5e2b\u30e9\u30d9\u30eb \u3011__\n\n\u4e0a\u8a18\u306e7\u30c1\u30e3\u30cd\u30eb \u5168\u4f53 \u3067\u30011\u30e9\u30d9\u30eb\n\n___\n\n\n#__MaxPooling\u5c64\u4ee5\u964d \u306e \u5c64__\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 \u306b \u7d9a\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u5c64\u304c\u7d9a\u304f \u3068 \u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n* MaxPooling1D\u5c64\n* \u5168\u7d50\u5408\u5c64\uff08Dense\u5c64\uff09\n* \u51fa\u529b\u5c64\n\u203b\uff08\u591a\u30af\u30e9\u30b9\u5206\u985e\u554f\u984c\uff09Softmax\u95a2\u6570\n\uff08\uff12\u30af\u30e9\u30b9\u5206\u985e\uff09sigmoid\u95a2\u6570\n\n####__\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\uff08 MaxPooling1D\u5c64 \uff09__\n\n\u7d9a\u3051\u3066\u3001__*MaxPooling1D*\u5c64__ \u3067 \u4f4d\u7f6e\u305a\u308c \u306b \u5bfe\u3059\u308b \u9811\u5f37\u6027\uff08\u30ed\u30d0\u30b9\u30c8\u6027\uff09\u3092 \u4ed8\u4e0e\u3059\u308b\u3002\n\n* [Keras Documentation _MaxPooling1D_](https://keras.io/ja/layers/pooling/)\n\n> keras.layers.pooling.MaxPooling1D(pool_length=2, stride=None, border_mode='valid'\n\n<img width=\"1210\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-26 15.05.46.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/0934244f-347d-fef2-a1c2-548f7f0e7ecf.png\">\n\n####__\u5168\u7d50\u5408\u5c64\uff08 Dense\u5c64 \uff09 \u53ca\u3073 Softmax\u95a2\u6570 \u3092 \u304b\u3051\u308b__\n\n* [Keras Documentation _Dense_](https://keras.io/ja/layers/core/)\n\n```{python:keras 1D convolution}\nmodel.add(Flatten())\n \nmodel.add(Dense(hidden_dims))\nmodel.add(Dropout(0.2))\nmodel.add(Activation('relu'))\n\n# 5\u30af\u30e9\u30b9\u5206\u985e\u3057\u305f\u5834\u5408\nmodel.add(Dense(5))\nmodel.add(Activation('softmax'))\nreturn model\n\n# \uff12\u30af\u30e9\u30b9\u5206\u985e\u306e\u5834\u5408\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\nreturn model\n```\n\n####__\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb \u3068 \u5b66\u7fd2\u30c7\u30fc\u30bf\u3078\u306e\u3042\u3066\u306f\u3081 & \u691c\u8a3c\u30c7\u30fc\u30bf\u3067\u306e\u5224\u5225\u7cbe\u5ea6\u30c6\u30b9\u30c8__\n\n__\uff08 \u53c2\u8003 \uff09__\n\n\u4ee5\u4e0b \u306f\u3001\uff11\u5909\u91cf\u306e\u30c7\u30fc\u30bf \u3092 \u6271\u3063\u3066\u3001keras \u3067 \u5206\u985e\u554f\u984c \u3092 \u89e3\u3044\u305f\u30b3\u30fc\u30c9\u4e8b\u4f8b__\n\n* [moxt\uff082016/08/23\uff09\u300cKeras\u306eCNN\u3092\u4f7f\u3063\u3066\u6587\u66f8\u5206\u985e\u3059\u308b\u300d](https://hogehuga.com/post-1464/)\n* [Hatena Blog \u4eba\u5de5\u77e5\u80fd\u306b\u95a2\u3059\u308b\u65ad\u5275\u9332 \uff082016/11/08\uff09\u300cKeras\u306b\u3088\u308b\u591a\u30af\u30e9\u30b9\u5206\u985e\uff08Iris\uff09\u300d](http://aidiary.hatenablog.com/entry/20161108/1478609028)\n\n```{python:keras 1D convolution}\n# \u591a\u30af\u30e9\u30b9\u5206\u985e\u306e\u5834\u5408\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# \uff12\u30af\u30e9\u30b9\u5206\u985e\u306e\u5834\u5408\nmodel.compile(loss='binary_crossentropy',\n              optimizer='adam',\n              metrics=['accuracy'])\n\n\nmodel.fit(train_X, train_Y, nb_epoch=50, batch_size=1, verbose=1)\n\n# \u30e2\u30c7\u30eb\u8a55\u4fa1\nloss, accuracy = model.evaluate(test_X, test_Y, verbose=0)\nprint(\"Accuracy = {:.2f}\".format(accuracy))\n```\n\n#__\u5358\u8a9eID \u4ee5\u5916 \u306e \u7d4c\u6e08\u6307\u6a19\u6570\u5024 \u3084 IoT\u30bb\u30f3\u30b5\u30c7\u30fc\u30bf \u3092 \u6271\u3046\u5834\u5408__\n\n\u4e00\u5b9a\u306e\u6642\u9593\u9593\u9694 \u3067 \u53d6\u5f97\u3067\u304d\u308b \u6642\u7cfb\u5217\u30c7\u30fc\u30bf \u3068\u3057\u3066 \u306f\u3001\n\n___\n\n* \u9867\u5ba2\u306e\u884c\u52d5\u5c65\u6b74\u30c7\u30fc\u30bf\uff08\u8907\u6570\u9805\u76ee\uff09\n* \u793e\u4f1a\u7d4c\u6e08\u30c7\u30fc\u30bf\uff08\u30de\u30af\u30ed\u7d4c\u6e08\u6307\u6a19\u3001Google\u691c\u7d22\u4e0a\u4f4d\u5358\u8a9e\u3001\u306a\u3069\uff09\n* \u6a5f\u5668\u306e\u52d5\u4f5c\u72b6\u614b \u306e \u89b3\u6e2c\u5024\uff08IoT\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\uff09\n\n___\n\n\u304c \u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\nConvolution1D\u5c64 \u3092 \u4f7f\u3063\u3066\u3001\n\u3053\u3046\u3057\u305f\u6570\u5024 \u6642\u7cfb\u5217\u30c7\u30fc\u30bf \u306e \u6642\u9593\u7279\u5fb4\u91cf \u3092 1\u6b21\u5143\u7573\u307f\u8fbc\u307f \u3067 \u5b66\u7fd2\u3055\u305b\u308b \u306b\u306f\u3001\n\n\u793e\u4f1a\u7d4c\u6e08\u30c7\u30fc\u30bf \u3068\u3057\u3066\u3001\n\n* \u6d88\u8cbb\u8005\u7269\u4fa1\u6307\u6570\uff08\u5b9f\u8cea\uff09\n\n\u306a\u3044\u3057\n\n* \u666f\u6cc1\u611f\u6307\u6570\n* \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u306e\u5e74\u4e2d\u592e\u5024\n\n\u306a\u3069\u3001**\u3044\u305a\u308c\u304b 1\u5909\u91cf\uff081\u5909\u6570\uff09** \n\u3092 \u9078\u629e\u3057\u305f\u4e0a \u3067\u3001\n\n\u9078\u629e\u3057\u305f 1\u5909\u6570 \u306e\u30c7\u30fc\u30bf \u3092 **\u4e00\u5b9a\u671f\u9593\u5206**\u3001**\u6570\u5024\u914d\u5217** \u3068\u3057\u3066 \u683c\u7d0d\u3057\u305f \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8 \u3092\u3001\n\nKeras Documentation \u6240\u53ce \u306e \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u305d\u306e\u307e\u307e \u306b \u53d6\u308a\u6271\u3048\u308b\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u4e00\u4f8b\u3068\u3057\u3066\u3001\n\n* \uff08\u65e5\u6b21\uff09\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\n\n* \u65e5\u6b21\u30c7\u30fc\u30bf \u3067 14\u671f\u9593\uff08 = 2\u9031\u9593 \uff09\n\n\u683c\u7d0d\u3057\u305f\u3001\u8981\u7d20\u657014 \u306e \u914d\u5217\u30ea\u30b9\u30c8 \u3092 \u53d7\u3051\u53d6\u308a\u3001\n\n> input_dim = 14\n\n\u30e2\u30c7\u30eb\u5b66\u7fd2\u6642 \u3068 \u691c\u8a3c\u6642 \u306e \u6559\u5e2b\u7528\u30af\u30e9\u30b9\u30e9\u30d9\u30eb \u3068\u3057\u3066\u3001\n\n* __\u7fcc\u9031 \uff11\u9031\u9593 \u306e \u300c\u5e02\u5834\u5fc3\u7406\u5b89\u5b9a\u5ea6 \u5206\u985e\u30af\u30e9\u30b9\u300d__\n\n\u306e \u5b9f\u7e3e\u5024\u3092\u6559\u5e2b\u30e9\u30d9\u30eb \u3068\u3057\u3066 \u4e0e\u3048\u308b \u3068\u3001\n\n__\uff08 \u5165\u529b\u5024 \uff09__\n\n* \u65b0\u898f\u30c7\u30fc\u30bf \u3068\u3057\u3066\u3001\u76f4\u8fd1\uff12\u9031\u9593 \u306e \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\uff08**\u5b9f\u7e3e\u5024**\uff09\n\n__\uff08 \u51fa\u529b\u5024 \uff09__\n\n* \u7fcc\u9031 \uff11\u9031\u9593 \u306e \u300c\u5e02\u5834\u5fc3\u7406\u5b89\u5b9a\u5ea6 \u5206\u985e\u30af\u30e9\u30b9\u300d\uff08**\u63a8\u5b9a\u5024**\uff09\n\n\u3092 \u4e88\u6e2c\u7d50\u679c \u3092 \u8fd4\u3059 \u5206\u985e\u30e2\u30c7\u30eb \u3092 \u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b \u3068 \u601d\u308f\u308c\u308b\u3002\n\n\n#__\u6570\u5024\u3092\u4e88\u6e2c \u3059\u308b \u56de\u5e30\u554f\u984c \u3082\u89e3\u304b\u305b\u308b\u3053\u3068 \u304c \u3067\u304d\u308b\u306f\u305a\u3002__\n\n###__\uff08 \u5fc5\u8981\u306a\u5909\u66f4 \uff09__\n\n___\n\n* \u6559\u5e2b\u30e9\u30d9\u30eb\u3067\u306f\u306a\u304f\u3001\u6559\u5e2b\u6570\u5024\uff08\u7fcc\u9031\u306e\u65e5\u7d4c\u5e73\u5747\u306e\u6a19\u6e96\u504f\u5dee _**volatility**_\u7b49\uff09\u3092 \u4e0e\u3048\u308b\n* \u640d\u5931\u95a2\u6570\uff08\u76ee\u7684\u95a2\u6570\uff09\u3092 \uff12\u4e57\u8aa4\u5dee\u95a2\u6570 \u306b \u3059\u308b\n\n___\n\n###__\uff08 \u53c2\u8003 \uff09 \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570__\n___\n\n* [e\u30ef\u30e9\u30f3\u30c8\u30b8\u30e3\u30fc\u30ca\u30eb](https://www.ewarrant-sec.jp/article/\u30c8\u30e9\u30f3\u30d7\u653f\u6a29\u306b\u3088\u308b\u4e0d\u78ba\u5b9f\u6027/)\n\n> __\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u3068\u306f__\n>\n> \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\uff08Economic Policy Uncertainty Index\uff09\u306f\u30b9\u30b3\u30c3\u30c8\u30fbR\u30fb\u30d9\u30fc\u30ab\u30fc\uff08\u30ce\u30fc\u30b9\u30a6\u30a7\u30b9\u30bf\u30f3\u5927\u5b66\u30b1\u30ed\u30c3\u30b0\u7d4c\u55b6\u5927\u5b66\u9662\u51c6\u6559\u6388\uff09\u3001\u30cb\u30c3\u30af\u30fb\u30d6\u30eb\u30fc\u30e0\uff08\u30b9\u30bf\u30f3\u30d5\u30a9\u30fc\u30c9\u5927\u5b66\u6559\u6388\uff09\u3001\u30b9\u30c6\u30a3\u30fc\u30d6\u30f3\u30fbJ\u30fb\u30c7\u30a4\u30f4\u30a3\u30b9\uff08\u30b7\u30ab\u30b4\u5927\u5b66\u30d6\u30fc\u30b9\u7d4c\u55b6\u5927\u5b66\u9662\u6559\u6388\uff09\u304c\u958b\u767a\u3057\u305f\u6307\u6570\u3067\u3001\u4e3b\u8981\u306a\u65b0\u805e\u304b\u3089\u7d4c\u6e08\u653f\u7b56\u306e\u4e0d\u78ba\u5b9f\u6027\u306b\u95a2\u3059\u308b\u8a18\u4e8b\u306e\u6570\u306a\u3069\u304b\u3089\u7d4c\u6e08\u653f\u7b56\u306e\u4e0d\u78ba\u5b9f\u6027\u3092\u6e2c\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n>\n> \u4e00\u65b9\u3067\u3001VIX\uff08\u30f4\u30a3\u30c3\u30af\u30b9\uff09\u3068\u306f\u3001S&P500\u6307\u6570\u3092\u5bfe\u8c61\u3068\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u53d6\u5f15\u4fa1\u683c\u304b\u3089\u63a8\u8a08\u3055\u308c\u308b\u4e88\u60f3\u5909\u52d5\u7387\uff08\u30dc\u30e9\u30c6\u30a3\u30ea\u30c6\u30a3\uff09\u3092\u3082\u3068\u306b\u3057\u305f\u6307\u6570\u3067\u3042\u308a\u3001\u682a\u5f0f\u5e02\u5834\u306e\u4e0b\u843d\u6642\u306b\u4e0a\u6607\u3059\u308b\u50be\u5411\u304c\u3042\u308b\u3053\u3068\u304b\u3089\u65e5\u672c\u3067\u306f\u6050\u6016\u6307\u6570\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n>\n> __\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u3068VIX\u306e\u95a2\u4fc2__\n>\n> \u56f31\u306f\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u3068VIX\u306e\u63a8\u79fb\u3092\u6bd4\u8f03\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n>\n> \u904e\u53bb\u306e\u7814\u7a76\u8ad6\u6587\u3067\u306fVIX\u306f\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u304c\u9ad8\u307e\u308b\u3068\u4e0a\u6607\u3059\u308b\u50be\u5411\u304c\u3042\u308b\u3068\u5831\u544a\u3055\u308c\u3066\u304a\u308a\u3001\u56f31\u306b\u304a\u3044\u3066\u3082\u305d\u306e\u95a2\u4fc2\u6027\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n>\n> \u3057\u304b\u3057\u306a\u304c\u3089\u56f32\u306b\u3042\u308a\u307e\u3059\u3088\u3046\u306b\u30012016\u5e74\u306b\u5165\u3063\u3066\u304b\u3089\u306f\u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u304c\u4e0a\u6607\u3057\u3066\u3044\u308b\u306b\u3082\u95a2\u308f\u3089\u305a\u3001VIX\u306f\u3055\u307b\u3069\u4e0a\u6607\u305b\u305a\u3001\u5e74\u672b\u306b\u304b\u3051\u3066\u4e56\u96e2\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n>\n> \u7279\u306b\u30c8\u30e9\u30f3\u30d7\u6c0f\u304c\u7c73\u56fd\u5927\u7d71\u9818\u9078\u6319\u3067\u52dd\u5229\u3057\u305f\u3053\u3068\u3092\u53d7\u3051\u3066\u300111\u6708\u672b\u6642\u70b9\u306e\u7d4c\u6e08\u653f\u7b56\u306e\u4e0d\u78ba\u5b9f\u6027\u306f1997\u5e74\u4ee5\u6765\u6700\u3082\u9ad8\u3044\u6c34\u6e96\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001VIX\u306f\u4f4e\u4e0b\u50be\u5411\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n>\n> \u7d4c\u6e08\u653f\u7b56\u4e0d\u78ba\u5b9f\u6027\u6307\u6570\u306f\u6708\u6b21\u3067\u306e\u516c\u8868\u3068\u306a\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001VIX\u306f\u65e5\u3005\u4e0a\u4e0b\u306b\u5909\u52d5\u3057\u307e\u3059\u306e\u3067\u3001\u6708\u672b\u3060\u3051\u3092\u898b\u308b\u3068\u6708\u4e2d\u306eVIX\u306e\u52d5\u304d\u3092\u6349\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n>\n> \u3057\u304b\u3057\u306a\u304c\u3089\u3001\u9577\u671f\u7684\u306a\u95a2\u4fc2\u6027\u304b\u3089\u5e02\u5834\u95a2\u4fc2\u8005\u304c\u6307\u6458\u3059\u308b\u3088\u3046\u306bVIX\u306f\u7d4c\u6e08\u653f\u7b56\u306e\u4e0d\u78ba\u5b9f\u6027\u3092\u7e54\u308a\u8fbc\u3093\u3067\u3044\u306a\u3044\u306e\u3067\u306f\u3001\u3068\u3044\u3046\u6307\u6458\u3082\u3082\u3063\u3068\u3082\u3089\u3057\u3044\u3068\u8a00\u3048\u305d\u3046\u3067\u3059\u3002\n\n* [Economic Policy Uncertainty](http://www.policyuncertainty.com)\n\n<img width=\"1216\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-26 18.39.42.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/3b2c88c1-aaba-86f3-ec30-b3a8c4eb0b70.png\">\n\n<img width=\"1216\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-26 18.39.49.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/08354e5d-11fb-2e4f-6f4e-6a85f8be7d33.png\">\n\n<img width=\"1210\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-02-26 18.39.54.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/43487/e81eef5e-5b99-5fc8-f2a3-3905a046e347.png\">\n\n* [\uff08 GitHub\uff09OriolAndres/news_risk](https://github.com/OriolAndres/news_risk)\n\n> __Political Uncertainty Index for Spain__\n>\n> Constructing an uncertainty index for Spain and assessing the predictive value on economic activity.\n>\n> We construct an economic uncertainty index (EU) and an economic policy uncertainty (EPU) index for Spain following the policyuncertainty.com methodology exploited in Baker, Bloom and Davis [BBD].\n>\n> We base the index on the archives of El Pais and Cinco D\u00edas.\n>\n> Following BBD, we conduct two different exercises to explore the impact of policy uncertainty on economic activity.\n\n___\n\n###__\u591a\u5909\u91cf \u6570\u5024\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3000\u3092 \u6271\u3046 \u30b3\u30fc\u30c9\u4f8b__\n\n**input_shape() \u3067 \u591a\u5909\u91cf\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf \u3092 \u6e21\u3057\u3066\u3044\u308b\u3002**\n\n* [convolutional neural network (CNN) for timeseries prediction](https://www.snip2code.com/Snippet/1371069/Example-of-using-Keras-to-implement-a-1D)\n\n> Example of using Keras to implement a 1D convolutional neural network (CNN) for timeseries prediction.: \ntimeseries_cnn.py\n\n```{python:keras}\n#!/usr/bin/env python\n\"\"\"\nExample of using Keras to implement a 1D convolutional neural network (CNN) for timeseries prediction.\n\"\"\"\n\nfrom __future__ import print_function, division\n\nimport numpy as np\nfrom keras.layers import Convolution1D, Dense, MaxPooling1D, Flatten\nfrom keras.models import Sequential\n\n\n__date__ = '2016-07-22'\n\n\ndef make_timeseries_regressor(window_size, filter_length, nb_input_series=1, nb_outputs=1, nb_filter=4):\n    \"\"\":Return: a Keras Model for predicting the next value in a timeseries given a fixed-size lookback window of previous values.\n\n    The model can handle multiple input timeseries (`nb_input_series`) and multiple prediction targets (`nb_outputs`).\n\n    :param int window_size: The number of previous timeseries values to use as input features.  Also called lag or lookback.\n    :param int nb_input_series: The number of input timeseries; 1 for a single timeseries.\n      The `X` input to ``fit()`` should be an array of shape ``(n_instances, window_size, nb_input_series)``; each instance is\n      a 2D array of shape ``(window_size, nb_input_series)``.  For example, for `window_size` = 3 and `nb_input_series` = 1 (a\n      single timeseries), one instance could be ``[[0], [1], [2]]``. See ``make_timeseries_instances()``.\n    :param int nb_outputs: The output dimension, often equal to the number of inputs.\n      For each input instance (array with shape ``(window_size, nb_input_series)``), the output is a vector of size `nb_outputs`,\n      usually the value(s) predicted to come after the last value in that input instance, i.e., the next value\n      in the sequence. The `y` input to ``fit()`` should be an array of shape ``(n_instances, nb_outputs)``.\n    :param int filter_length: the size (along the `window_size` dimension) of the sliding window that gets convolved with\n      each position along each instance. The difference between 1D and 2D convolution is that a 1D filter's \"height\" is fixed\n      to the number of input timeseries (its \"width\" being `filter_length`), and it can only slide along the window\n      dimension.  This is useful as generally the input timeseries have no spatial/ordinal relationship, so it's not\n      meaningful to look for patterns that are invariant with respect to subsets of the timeseries.\n    :param int nb_filter: The number of different filters to learn (roughly, input patterns to recognize).\n    \"\"\"\n    model = Sequential((\n        # The first conv layer learns `nb_filter` filters (aka kernels), each of size ``(filter_length, nb_input_series)``.\n        # Its output will have shape (None, window_size - filter_length + 1, nb_filter), i.e., for each position in\n        # the input timeseries, the activation of each filter at that position.\n        Convolution1D(nb_filter=nb_filter, filter_length=filter_length, activation='relu', input_shape=(window_size, nb_input_series)),\n        MaxPooling1D(),     # Downsample the output of convolution by 2X.\n        Convolution1D(nb_filter=nb_filter, filter_length=filter_length, activation='relu'),\n        MaxPooling1D(),\n        Flatten(),\n        Dense(nb_outputs, activation='linear'),     # For binary classification, change the activation to 'sigmoid'\n    ))\n    model.compile(loss='mse', optimizer='adam', metrics=['mae'])\n    # To perform (binary) classification instead:\n    # model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['binary_accuracy'])\n    return model\n\n\ndef make_timeseries_instances(timeseries, window_size):\n    \"\"\"Make input features and prediction targets from a `timeseries` for use in machine learning.\n\n    :return: A tuple of `(X, y, q)`.  `X` are the inputs to a predictor, a 3D ndarray with shape\n      ``(timeseries.shape[0] - window_size, window_size, timeseries.shape[1] or 1)``.  For each row of `X`, the\n      corresponding row of `y` is the next value in the timeseries.  The `q` or query is the last instance, what you would use\n      to predict a hypothetical next (unprovided) value in the `timeseries`.\n    :param ndarray timeseries: Either a simple vector, or a matrix of shape ``(timestep, series_num)``, i.e., time is axis 0 (the\n      row) and the series is axis 1 (the column).\n    :param int window_size: The number of samples to use as input prediction features (also called the lag or lookback).\n    \"\"\"\n    timeseries = np.asarray(timeseries)\n    assert 0 < window_size < timeseries.shape[0]\n    X = np.atleast_3d(np.array([timeseries[start:start + window_size] for start in range(0, timeseries.shape[0] - window_size)]))\n    y = timeseries[window_size:]\n    q = np.atleast_3d([timeseries[-window_size:]])\n    return X, y, q\n\n\ndef evaluate_timeseries(timeseries, window_size):\n    \"\"\"Create a 1D CNN regressor to predict the next value in a `timeseries` using the preceding `window_size` elements\n    as input features and evaluate its performance.\n\n    :param ndarray timeseries: Timeseries data with time increasing down the rows (the leading dimension/axis).\n    :param int window_size: The number of previous timeseries values to use to predict the next.\n    \"\"\"\n    filter_length = 5\n    nb_filter = 4\n    timeseries = np.atleast_2d(timeseries)\n    if timeseries.shape[0] == 1:\n        timeseries = timeseries.T       # Convert 1D vectors to 2D column vectors\n\n    nb_samples, nb_series = timeseries.shape\n    print('\\n\\nTimeseries ({} samples by {} series):\\n'.format(nb_samples, nb_series), timeseries)\n    model = make_timeseries_regressor(window_size=window_size, filter_length=filter_length, nb_input_series=nb_series, nb_outputs=nb_series, nb_filter=nb_filter)\n    print('\\n\\nModel with input size {}, output size {}, {} conv filters of length {}'.format(model.input_shape, model.output_shape, nb_filter, filter_length))\n    model.summary()\n\n    X, y, q = make_timeseries_instances(timeseries, window_size)\n    print('\\n\\nInput features:', X, '\\n\\nOutput labels:', y, '\\n\\nQuery vector:', q, sep='\\n')\n    test_size = int(0.01 * nb_samples)           # In real life you'd want to use 0.2 - 0.5\n    X_train, X_test, y_train, y_test = X[:-test_size], X[-test_size:], y[:-test_size], y[-test_size:]\n    model.fit(X_train, y_train, nb_epoch=25, batch_size=2, validation_data=(X_test, y_test))\n\n    pred = model.predict(X_test)\n    print('\\n\\nactual', 'predicted', sep='\\t')\n    for actual, predicted in zip(y_test, pred.squeeze()):\n        print(actual.squeeze(), predicted, sep='\\t')\n    print('next', model.predict(q).squeeze(), sep='\\t')\n\n\ndef main():\n    \"\"\"Prepare input data, build model, evaluate.\"\"\"\n    np.set_printoptions(threshold=25)\n    ts_length = 1000\n    window_size = 50\n\n    print('\\nSimple single timeseries vector prediction')\n    timeseries = np.arange(ts_length)                   # The timeseries f(t) = t\n    evaluate_timeseries(timeseries, window_size)\n\n    print('\\nMultiple-input, multiple-output prediction')\n    timeseries = np.array([np.arange(ts_length), -np.arange(ts_length)]).T      # The timeseries f(t) = [t, -t]\n    evaluate_timeseries(timeseries, window_size)\n\n\nif __name__ == '__main__':\n    main()\n```\n    \n\n___\n\n###__\uff08 \u305d\u306e\u4ed6\u3001\u53c2\u8003 \uff09__\n\n* [Google\u30b0\u30eb\u30fc\u30d7 Keras-users \u203a _Convolution1D complete example?_](https://groups.google.com/forum/#!topic/keras-users/_bwfgKOQD6Y)\n", "tags": ["Keras", "DeepLearning", "\u6df1\u5c64\u5b66\u7fd2", "\u6642\u7cfb\u5217\u89e3\u6790", "\u30c7\u30fc\u30bf\u5206\u6790"]}