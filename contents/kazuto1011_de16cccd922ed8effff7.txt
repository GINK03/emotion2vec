{"context": "\n\nResNet152Layers?\n\u5b66\u7fd2\u6e08\u307f ResNet \u306e\u5229\u7528\u304c\u697d\u30c1\u30f3\u306b\u306a\u308b ResNet50Layers \u30af\u30e9\u30b9\uff0e\n\u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e resnet.py \u3092\u3061\u3087\u3053\u3063\u3068\u7de8\u96c6\u3057\u3066\uff0c152 \u5c64\u306b\u3057\u307e\u3057\u305f\uff0e\n\u5168\u4f53\u306e\u30d5\u30a1\u30a4\u30eb\u306f gist \u306b\u7f6e\u3044\u3066\u3044\u307e\u3059\uff0e\n\u4f7f\u3044\u65b9\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\uff0e\n\n\u5909\u66f4\u70b9\ndef __init__(self, pretrained_model='auto'):\n    super(ResNet152Layers, self).__init__(\n-       conv1=Convolution2D(3, 64, 7, 2, 3, **kwargs),\n+       conv1=Convolution2D(3, 64, 7, 2, 3, nobias=True, **kwargs),\n        bn1=BatchNormalization(64),\n        res2=BuildingBlock(3, 64, 64, 256, 1, **kwargs),\n-       res3=BuildingBlock(4, 256, 128, 512, 2, **kwargs),\n-       res4=BuildingBlock(6, 512, 256, 1024, 2, **kwargs),\n+       res3=BuildingBlock(8, 256, 128, 512, 2, **kwargs),\n+       res4=BuildingBlock(36, 512, 256, 1024, 2, **kwargs),\n        res5=BuildingBlock(3, 1024, 512, 2048, 2, **kwargs),\n        fc6=Linear(2048, 1000),\n    )\n\ndef _transfer_resnet152(src, dst):\n    dst.conv1.W.data[:] = src.conv1.W.data\n+   # dst.conv1.b.data[:] = src.conv1.b.data\n    dst.bn1.avg_mean[:] = src.bn_conv1.avg_mean\n    dst.bn1.avg_var[:] = src.bn_conv1.avg_var\n    dst.bn1.gamma.data[:] = src.scale_conv1.W.data\n    dst.bn1.beta.data[:] = src.scale_conv1.bias.b.data\n\n    _transfer_block(src, dst.res2, ['2a', '2b', '2c'])\n-   _transfer_block(src, dst.res3, ['3a', '3b', '3c', '3d'])\n-   _transfer_block(src, dst.res4, ['4a', '4b', '4c', '4d', '4e', '4f'])\n+   _transfer_block(src, dst.res3, ['3a', '3b1', '3b2', '3b3', '3b4', '3b5', '3b6', '3b7'])\n+   _transfer_block(src, dst.res4, ['4a'] + ['4b{}'.format(x) for x in range(1, 36)])\n    _transfer_block(src, dst.res5, ['5a', '5b', '5c'])\n\n\n## ResNet152Layers?\n\u5b66\u7fd2\u6e08\u307f ResNet \u306e\u5229\u7528\u304c\u697d\u30c1\u30f3\u306b\u306a\u308b ResNet50Layers \u30af\u30e9\u30b9\uff0e\n\n\u516c\u5f0f\u30ea\u30dd\u30b8\u30c8\u30ea\u306e [resnet.py](https://github.com/pfnet/chainer/blob/master/chainer/links/model/vision/resnet.py) \u3092\u3061\u3087\u3053\u3063\u3068\u7de8\u96c6\u3057\u3066\uff0c152 \u5c64\u306b\u3057\u307e\u3057\u305f\uff0e\n\u5168\u4f53\u306e\u30d5\u30a1\u30a4\u30eb\u306f [gist](https://gist.github.com/kazuto1011/0b92f1fd4470d58689466f4807320ebe) \u306b\u7f6e\u3044\u3066\u3044\u307e\u3059\uff0e\n\u4f7f\u3044\u65b9\u306f[\u3053\u3061\u3089](https://github.com/pfnet/chainer/pull/1677)\u3092\u53c2\u7167\uff0e\n\n## \u5909\u66f4\u70b9\n```diff\ndef __init__(self, pretrained_model='auto'):\n    super(ResNet152Layers, self).__init__(\n-       conv1=Convolution2D(3, 64, 7, 2, 3, **kwargs),\n+       conv1=Convolution2D(3, 64, 7, 2, 3, nobias=True, **kwargs),\n        bn1=BatchNormalization(64),\n        res2=BuildingBlock(3, 64, 64, 256, 1, **kwargs),\n-       res3=BuildingBlock(4, 256, 128, 512, 2, **kwargs),\n-       res4=BuildingBlock(6, 512, 256, 1024, 2, **kwargs),\n+       res3=BuildingBlock(8, 256, 128, 512, 2, **kwargs),\n+       res4=BuildingBlock(36, 512, 256, 1024, 2, **kwargs),\n        res5=BuildingBlock(3, 1024, 512, 2048, 2, **kwargs),\n        fc6=Linear(2048, 1000),\n    )\n```\n\n```diff\ndef _transfer_resnet152(src, dst):\n    dst.conv1.W.data[:] = src.conv1.W.data\n+   # dst.conv1.b.data[:] = src.conv1.b.data\n    dst.bn1.avg_mean[:] = src.bn_conv1.avg_mean\n    dst.bn1.avg_var[:] = src.bn_conv1.avg_var\n    dst.bn1.gamma.data[:] = src.scale_conv1.W.data\n    dst.bn1.beta.data[:] = src.scale_conv1.bias.b.data\n\n    _transfer_block(src, dst.res2, ['2a', '2b', '2c'])\n-   _transfer_block(src, dst.res3, ['3a', '3b', '3c', '3d'])\n-   _transfer_block(src, dst.res4, ['4a', '4b', '4c', '4d', '4e', '4f'])\n+   _transfer_block(src, dst.res3, ['3a', '3b1', '3b2', '3b3', '3b4', '3b5', '3b6', '3b7'])\n+   _transfer_block(src, dst.res4, ['4a'] + ['4b{}'.format(x) for x in range(1, 36)])\n    _transfer_block(src, dst.res5, ['5a', '5b', '5c'])\n\n```\n", "tags": ["Chainer"]}