{"context": " More than 1 year has passed since last update.\n\n\u305d\u306e\uff11 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\nC#\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\"/>\n\n\u306e\u3042\u3068\u306b\u4ee5\u4e0b\u306e\u6587\u5b57\u5217\u3092\u633f\u5165\u3057\u307e\u3059\n<Target Name=\"AfterResolveReferences\">\n  <ItemGroup>\n    <EmbeddedResource Include=\"@(ReferenceCopyLocalPaths)\" Condition=\"'%(ReferenceCopyLocalPaths.Extension)' == '.dll'\">\n      <LogicalName>%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)</LogicalName>\n    </EmbeddedResource>\n  </ItemGroup>\n</Target>\n\n\n\u305d\u306e\uff12 EXE\u304b\u3089\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u30ed\u30fc\u30c9\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nstartup.cs\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Reflection;\nusing System.IO;\n\nnamespace StartUpCode //\u540d\u524d\u7a7a\u9593\u306f\u4f7f\u3044\u3084\u3059\u3044\u3082\u306e\u306b\u5909\u3048\u3066\u304f\u3060\u3055\u3044\n{\n    public class StartUp\n    {\n        [STAThread]\n        public static void Main()\n        {\n            AppDomain.CurrentDomain.AssemblyResolve += OnResolveAssembly;\n\n            App.Main(); // Run WPF startup code.\n        }\n\n        private static Assembly OnResolveAssembly(object sender, ResolveEventArgs e)\n        {\n            var thisAssembly = Assembly.GetExecutingAssembly();\n\n            // Get the Name of the AssemblyFile\n            var assemblyName = new AssemblyName(e.Name);\n            var dllName = assemblyName.Name + \".dll\";\n\n            // Load from Embedded Resources - This function is not called if the Assembly is already\n            // in the same folder as the app.\n            var resources = thisAssembly.GetManifestResourceNames().Where(s => s.EndsWith(dllName));\n            if (resources.Any())\n            {\n\n                // 99% of cases will only have one matching item, but if you don't,\n                // you will have to change the logic to handle those cases.\n                var resourceName = resources.First();\n                using (var stream = thisAssembly.GetManifestResourceStream(resourceName))\n                {\n                    if (stream == null) return null;\n                    var block = new byte[stream.Length];\n\n                    // Safely try to load the assembly.\n                    try\n                    {\n                        stream.Read(block, 0, block.Length);\n                        return Assembly.Load(block);\n                    }\n                    catch (IOException)\n                    {\n                        return null;\n                    }\n                    catch (BadImageFormatException)\n                    {\n                        return null;\n                    }\n                }\n            }\n            // in the case the resource doesn't exist, return null.\n            return null;\n        }\n    }\n}\n\n\n\n\n\u305d\u306e\uff13 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u8a2d\u5b9a\u3092\u5909\u66f4\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u3066\u3001\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u305d\u306e\uff12\u3067\u8ffd\u52a0\u3057\u305f\u30bd\u30fc\u30b9\u306b\u5909\u66f4\u3059\u308b\u3002\n\u3059\u3079\u3066\u7d42\u4e86\u3057\u305f\u3089\u30d3\u30eb\u30c9\u3059\u308c\u3070EXE\u5358\u72ec\u3067\u8d77\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001WPFToolkit\u306e\u30b0\u30e9\u30d5\u306e\u3088\u3046\u306bDLL\u304b\u3089DLL\u306e\u95a2\u6570\u3092\u547c\u3093\u3067\u3044\u305f\u308a\u3059\u308b\u3068\u52d5\u304b\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\uff11\uff10\uff10\uff05\u3068\u306f\u3044\u304d\u307e\u305b\u3093\u304c\uff19\uff19\uff05\u304f\u3089\u3044\u306f\u3053\u308c\u3067\u3044\u3051\u307e\u3059\u3002\nWPF\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3058\u3083\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u306e\u3067\u610f\u5916\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u4eca\u56de\u306e\u8a18\u4e8b\u306f\u6b21\u306e\u30b5\u30a4\u30c8\u306e\u65e5\u672c\u8a9e\u8a33\u3060\u3063\u305f\u308a\u3059\u308b\nhttp://blogs.interknowlogy.com/2011/07/13/merging-a-wpf-application-into-a-single-exe/\n##\u305d\u306e\uff11 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\nC#\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\n\n```xml\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\"/>\n```\n\n\u306e\u3042\u3068\u306b\u4ee5\u4e0b\u306e\u6587\u5b57\u5217\u3092\u633f\u5165\u3057\u307e\u3059\n\n```xml\n<Target Name=\"AfterResolveReferences\">\n  <ItemGroup>\n    <EmbeddedResource Include=\"@(ReferenceCopyLocalPaths)\" Condition=\"'%(ReferenceCopyLocalPaths.Extension)' == '.dll'\">\n      <LogicalName>%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)</LogicalName>\n    </EmbeddedResource>\n  </ItemGroup>\n</Target>\n```\n\n##\u305d\u306e\uff12 EXE\u304b\u3089\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u30ed\u30fc\u30c9\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```csharp:startup.cs\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Reflection;\nusing System.IO;\n\nnamespace StartUpCode //\u540d\u524d\u7a7a\u9593\u306f\u4f7f\u3044\u3084\u3059\u3044\u3082\u306e\u306b\u5909\u3048\u3066\u304f\u3060\u3055\u3044\n{\n\tpublic class StartUp\n\t{\n\t\t[STAThread]\n\t\tpublic static void Main()\n\t\t{\n\t\t\tAppDomain.CurrentDomain.AssemblyResolve += OnResolveAssembly;\n\n\t\t\tApp.Main(); // Run WPF startup code.\n\t\t}\n\n\t\tprivate static Assembly OnResolveAssembly(object sender, ResolveEventArgs e)\n\t\t{\n\t\t\tvar thisAssembly = Assembly.GetExecutingAssembly();\n\n\t\t\t// Get the Name of the AssemblyFile\n\t\t\tvar assemblyName = new AssemblyName(e.Name);\n\t\t\tvar dllName = assemblyName.Name + \".dll\";\n\n\t\t\t// Load from Embedded Resources - This function is not called if the Assembly is already\n\t\t\t// in the same folder as the app.\n\t\t\tvar resources = thisAssembly.GetManifestResourceNames().Where(s => s.EndsWith(dllName));\n\t\t\tif (resources.Any())\n\t\t\t{\n\n\t\t\t\t// 99% of cases will only have one matching item, but if you don't,\n\t\t\t\t// you will have to change the logic to handle those cases.\n\t\t\t\tvar resourceName = resources.First();\n\t\t\t\tusing (var stream = thisAssembly.GetManifestResourceStream(resourceName))\n\t\t\t\t{\n\t\t\t\t\tif (stream == null) return null;\n\t\t\t\t\tvar block = new byte[stream.Length];\n\n\t\t\t\t\t// Safely try to load the assembly.\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tstream.Read(block, 0, block.Length);\n\t\t\t\t\t\treturn Assembly.Load(block);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (IOException)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (BadImageFormatException)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// in the case the resource doesn't exist, return null.\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\n```\n\n##\u305d\u306e\uff13 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u8a2d\u5b9a\u3092\u5909\u66f4\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u3066\u3001\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u305d\u306e\uff12\u3067\u8ffd\u52a0\u3057\u305f\u30bd\u30fc\u30b9\u306b\u5909\u66f4\u3059\u308b\u3002\n\u3059\u3079\u3066\u7d42\u4e86\u3057\u305f\u3089\u30d3\u30eb\u30c9\u3059\u308c\u3070EXE\u5358\u72ec\u3067\u8d77\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001WPFToolkit\u306e\u30b0\u30e9\u30d5\u306e\u3088\u3046\u306bDLL\u304b\u3089DLL\u306e\u95a2\u6570\u3092\u547c\u3093\u3067\u3044\u305f\u308a\u3059\u308b\u3068\u52d5\u304b\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\uff11\uff10\uff10\uff05\u3068\u306f\u3044\u304d\u307e\u305b\u3093\u304c\uff19\uff19\uff05\u304f\u3089\u3044\u306f\u3053\u308c\u3067\u3044\u3051\u307e\u3059\u3002\n\nWPF\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3058\u3083\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u306e\u3067\u610f\u5916\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n \n\n\u4eca\u56de\u306e\u8a18\u4e8b\u306f\u6b21\u306e\u30b5\u30a4\u30c8\u306e\u65e5\u672c\u8a9e\u8a33\u3060\u3063\u305f\u308a\u3059\u308b\nhttp://blogs.interknowlogy.com/2011/07/13/merging-a-wpf-application-into-a-single-exe/\n", "tags": ["C#", "WPF", ".NET"]}