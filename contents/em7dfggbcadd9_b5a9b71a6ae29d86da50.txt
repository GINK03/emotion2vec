{"tags": ["DirectX12", "DirectX"], "context": "\n\n\u6ce8\u610f!\n\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306f\u53e4\u3044\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u65b0\u3057\u3044\u3082\u306e\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u306b\u304a\u9858\u3044\u3057\u307e\u3059\u3002\nDirectX12\u30673D\u63cf\u753b\n\n\u524d\u56de\u3067\u306f\u63cf\u753b\u5468\u308a\u3092\u3084\u308a\u307e\u3057\u305f\uff0e\u9802\u70b9\u306b\u8272\u3092\u6301\u305f\u305b\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u63cf\u753b\u3057\u307e\u3057\u305f\u304c\uff0c\u4eca\u56de\u306f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8cbc\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3068\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\uff0e\n//\u30e1\u30bd\u30c3\u30c9\nint CreateTexture();\nint CreateShaderResource();\nint CreateSampler();\n\n//\u5909\u6570\nID3D12DescriptorHeap    *pDescriptorHeapSRV;\nID3D12DescriptorHeap    *pDescriptorHeapSMP;\nID3D12Resource          *pTexture;\n\n\n1. RootSignature\u306e\u8a2d\u5b9a\n\u524d\u56de\u307e\u3067\u306f\uff0c\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30ec\u30b8\u30b9\u30bf\u306b\u306f\u30a2\u30d5\u30a3\u30f3\u5909\u63db\u306a\u3069\u306b\u7528\u3044\u308b\u5b9a\u6570\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3060\u3051\u3060\u3063\u305f\u306e\u3067\uff0cRootSignature\u306fCBV\u306e\u8a2d\u5b9a\u3060\u3051\u3067\u3057\u305f\u304c\uff0c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8cbc\u308b\u5834\u5408\u306f\u65b0\u305f\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3084\u30b5\u30f3\u30d7\u30e9\u30fc\u306a\u3069\u3082\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\uff0e\u306a\u306e\u3067RootSignature\u3092\u305d\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\nCreateRootSignature\nint D3D12Manager::CreateRootSignature(){\n    HRESULT hr;\n    D3D12_ROOT_SIGNATURE_DESC RootSignatureDesc;\n    D3D12_ROOT_PARAMETER RootParameters[3];\n\n    ZeroMemory(&RootSignatureDesc, sizeof(RootSignatureDesc));\n    ZeroMemory(RootParameters,     sizeof(RootParameters));\n\n    D3D12_DESCRIPTOR_RANGE range[2];\n    ZeroMemory(range, sizeof(range));\n\n    range[0].NumDescriptors     = 1;\n    range[0].BaseShaderRegister = 0;\n    range[0].RangeType          = D3D12_DESCRIPTOR_RANGE_TYPE_SRV;\n    range[0].OffsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND;\n\n    range[1].NumDescriptors     = 1;\n    range[1].BaseShaderRegister = 0;\n    range[1].RangeType          = D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER;\n    range[1].OffsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND;\n\n    RootParameters[0].ParameterType             = D3D12_ROOT_PARAMETER_TYPE_CBV;\n    RootParameters[0].ShaderVisibility          = D3D12_SHADER_VISIBILITY_ALL;\n    RootParameters[0].Descriptor.ShaderRegister = 0;\n    RootParameters[0].Descriptor.RegisterSpace  = 0;\n\n    RootParameters[1].ParameterType             = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE;\n    RootParameters[1].ShaderVisibility          = D3D12_SHADER_VISIBILITY_ALL;\n    RootParameters[1].DescriptorTable.NumDescriptorRanges = 1;\n    RootParameters[1].DescriptorTable.pDescriptorRanges   = &range[0];\n\n    RootParameters[2].ParameterType             = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE;\n    RootParameters[2].ShaderVisibility          = D3D12_SHADER_VISIBILITY_ALL;\n    RootParameters[2].DescriptorTable.NumDescriptorRanges = 1;\n    RootParameters[2].DescriptorTable.pDescriptorRanges   = &range[1];\n\n\n    RootSignatureDesc.Flags = D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;\n    RootSignatureDesc.NumParameters = _countof(RootParameters);\n    RootSignatureDesc.pParameters = RootParameters;\n\n    hr = D3D12SerializeRootSignature(&RootSignatureDesc, D3D_ROOT_SIGNATURE_VERSION_1, &pRootSignatureBlob, &pErrorBlob);\n    if(FAILED(hr)){\n        return -1;\n    }\n    hr = pDevice->CreateRootSignature(0, pRootSignatureBlob->GetBufferPointer(), pRootSignatureBlob->GetBufferSize(), IID_PPV_ARGS(&pRootSignature));\n    if(FAILED(hr)){\n        return -1;\n    }\n    return 0;\n}\n\n\n\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306f\u4eca\u307e\u3067\u3068\u540c\u3058\u3067\uff0c\u65b0\u305f\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u30b5\u30f3\u30d7\u30e9\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\uff0e\u3053\u3053\u306e\u8a2d\u5b9a\u306f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u3088\u3046\u3067\u3059\u304c\uff0c\u3069\u3046\u66f8\u3044\u305f\u3089\u30d9\u30b9\u30c8\u304b\u308f\u304b\u308a\u307e\u305b\u3093(\u2190)\uff0e\u8ab0\u304b\u304a\u3057\u3048\u3066\u304f\u3060\u3055\u3044f(^^;\n\u3068\u3082\u3042\u308c\u3053\u308c\u3067\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306f\u30b7\u30a7\u30fc\u30c0\u306eb0\u306b\uff0c\u30c6\u30af\u30b9\u30c1\u30e3\u306ft0\u306b\uff0c\u30b5\u30f3\u30d7\u30e9\u306fs0\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3057\u305f\uff0e\n\n2. \u9802\u70b9\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u8a2d\u5b9a\n\u524d\u56de\u3067\u4f7f\u7528\u3057\u305f\u9802\u70b9\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u306f\u5ea7\u6a19\u3068\u8272\u3092\u6271\u3044\u307e\u3057\u305f\uff0e\u4eca\u56de\u306f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u8272\u60c5\u5831\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff0e\u304b\u308f\u308a\u306bUV\u60c5\u5831\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u308c\u306f\u9802\u70b9\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u753b\u50cf\u306e\u3069\u306e\u4f4d\u7f6e\u306b\u5f53\u305f\u308b\u306e\u304b\u3092\u6c7a\u3081\u308b\u3082\u306e\u3067\u3059\uff0e\u306a\u306e\u3067\u9802\u70b9\u306e\u69cb\u9020\u4f53\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\nVertex3D\ntypedef struct Vertex3D{\n        XMFLOAT3 Position;\n        XMFLOAT2 UV0;\n    }Vertex3D;\n\n\nPSO\u306e\u9802\u70b9\u30ec\u30a4\u30a2\u30a6\u30c8\u3082\u5909\u308f\u308a\u307e\u3059\uff0e\n\nCreatePipelineStateObject\nint D3D12Manager::CreatePipelineStateObject(){\n    HRESULT hr;\n\n    // \u9802\u70b9\u30ec\u30a4\u30a2\u30a6\u30c8.\n    D3D12_INPUT_ELEMENT_DESC descInputElements[] = {\n        { \"POSITION\", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0,  0, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 },\n        { \"TEXCOORD\", 0, DXGI_FORMAT_R32G32_FLOAT,    0, 12, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 },\n    };\n\n//...\u7701\u7565\n\n\n\n3. \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\n\u7d9a\u3044\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\uff0e\u304b\u3064\u3066\u306eDirectX\u3067\u306f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8aad\u307f\u8fbc\u3080\u95a2\u6570\u7684\u306a\u3082\u306e\u304c\u3042\u3063\u305f\u3088\u3046\u3067\u3059\u304c (\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044...)\uff0cDirectX12\u3067\u306f\u305d\u306e\u3088\u3046\u306a\u3082\u306e\u306f\u306a\u304f\uff0c\u753b\u50cf\u3092\u81ea\u5206\u3067\u9811\u5f35\u3063\u3066\u8aad\u307f\u8fbc\u307f\u307e\u3059 (\u307e\u3058\u304b\uff01\u03a3(\uff9f\u0434\uff9f;))\uff0e\u3068\u308a\u3042\u3048\u305a\u30ea\u30bd\u30fc\u30b9\u4f5c\u3063\u3066\u66f8\u304d\u8fbc\u307f\u307e\u3059\uff0e\n\nCreateTexture\nint D3D12Manager::CreateTexture(){\n    HRESULT hr;\n    D3D12_RESOURCE_DESC descResourceTex;\n    D3D12_HEAP_PROPERTIES heapProps;\n    ZeroMemory(&heapProps, sizeof(heapProps));\n    ZeroMemory(&descResourceTex, sizeof(descResourceTex));\n\n    heapProps.Type                 = D3D12_HEAP_TYPE_CUSTOM;\n    heapProps.CPUPageProperty      = D3D12_CPU_PAGE_PROPERTY_WRITE_BACK;\n    heapProps.MemoryPoolPreference = D3D12_MEMORY_POOL_L0;\n    heapProps.CreationNodeMask     = 0;\n    heapProps.VisibleNodeMask      = 0;\n\n    descResourceTex.Dimension        = D3D12_RESOURCE_DIMENSION_TEXTURE2D;\n    descResourceTex.Width            = 256; //\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f256x256\u306e32bit\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u4f7f\u3046\u305f\u3081\uff0c\u6c7a\u3081\u6253\u3061\n    descResourceTex.Height           = 256;\n    descResourceTex.DepthOrArraySize = 1;\n    descResourceTex.MipLevels        = 1;\n    descResourceTex.Format           = DXGI_FORMAT_B8G8R8A8_UNORM;\n    descResourceTex.Layout           = D3D12_TEXTURE_LAYOUT_UNKNOWN;\n    descResourceTex.SampleDesc.Quality = 0;\n    descResourceTex.SampleDesc.Count   = 1;\n\n    hr = pDevice->CreateCommittedResource(&heapProps, D3D12_HEAP_FLAG_NONE, &descResourceTex, D3D12_RESOURCE_STATE_GENERIC_READ, nullptr, IID_PPV_ARGS(&pTexture));\n    if(FAILED(hr)){\n        return -1;\n    }\n\n\n    std::ifstream ifs(\"test.bmp\", std::ios_base::in | std::ios_base::binary);\n    if(!ifs){\n        return -1;\n    }\n    BYTE *dat = (BYTE*)malloc(4 * 256 * 256);\n    ifs.read((char*)dat, 139);  //\u4eca\u56de\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u306f\u628a\u63e1\u3057\u3066\u3044\u308b\u305f\u3081\u5207\u308a\u6368\u3066\n    ifs.read((char*)dat, 4  * 256 * 256);//\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\n    //\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f\n    D3D12_BOX box = {0, 0, 0, 256, 256, 1};\n    hr = pTexture->WriteToSubresource(0, &box, dat, 4 * 256, 4 * 256 * 256);\n    free(dat);\n    if(FAILED(hr)){\n        return -1;\n    }\n\n    return 0;\n}\n\n\n\u4eca\u56de\u306f\u81ea\u5206\u3067\u7528\u610f\u3057\u305f256x256\u306e32bit\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3057\u305f\uff0e\u624b\u629c\u304d\u306e\u305f\u3081\u30d8\u30c3\u30c0\u60c5\u5831\u306a\u3069\u306f\u53d6\u5f97\u3057\u3066\u304a\u3089\u305a\uff0c\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc\u51fa\u307e\u304f\u308a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\uff0e\u7686\u3055\u3093\u306f\u3082\u3063\u3068\u4e0a\u624b\u304f\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3088\u306d?f(^^;\nSDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c10.0.10240.0\u306e\u6642\u306f\nheapProps.Type                 = D3D12_HEAP_TYPE_UPLOAD;\n    heapProps.CPUPageProperty      = D3D12_CPU_PAGE_PROPERTY_UNKNOWN;\n    heapProps.MemoryPoolPreference = D3D12_MEMORY_POOL_UNKNOWN;\n\u3067\u3082\u52d5\u3044\u305f\u306e\u3067\u3059\u304c\uff0c10.0.10586.0\u306b\u3057\u305f\u3089\u52d5\u304b\u306a\u304f\u306a\u308a\u307e\u3057\u305f\uff0e\n\n4. ShaderResourceView \u306e\u4f5c\u6210\n\u6b21\u306bShaderResourceView \u306e\u4f5c\u6210\u3092\u884c\u3044\u307e\u3059\uff0e\u5b9f\u969b\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30a7\u30fc\u30c0\u30fc\u306b\u6e21\u3059\u305f\u3081\u306e\u30c7\u30b9\u30af\u30ea\u30d7\u30bf\u306e\u4f5c\u6210\u3067\u3059\uff0e\nint D3D12Manager::CreateShaderResource(){\n    HRESULT hr;\n    D3D12_DESCRIPTOR_HEAP_DESC descHeap;\n\n    ZeroMemory(&descHeap, sizeof(descHeap));\n    descHeap.NumDescriptors = 1;\n    descHeap.Type           = D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV;\n    descHeap.Flags          = D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;\n    descHeap.NodeMask       = 0;\n    hr = pDevice->CreateDescriptorHeap(&descHeap, IID_PPV_ARGS(&pDescriptorHeapSRV));\n    if (FAILED(hr)) {\n        return hr;\n    }\n\n    UINT strideSize = pDevice->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);\n    D3D12_CPU_DESCRIPTOR_HANDLE handleSRV;\n    D3D12_SHADER_RESOURCE_VIEW_DESC descSRV;\n    ZeroMemory(&descSRV, sizeof(descSRV));\n\n    descSRV.Format                        = DXGI_FORMAT_B8G8R8A8_UNORM;\n    descSRV.ViewDimension                 = D3D12_SRV_DIMENSION_TEXTURE2D;\n    descSRV.Texture2D.MipLevels           = 1;\n    descSRV.Texture2D.MostDetailedMip     = 0;\n    descSRV.Texture2D.PlaneSlice          = 0;\n    descSRV.Texture2D.ResourceMinLODClamp = 0.0F;\n    descSRV.Shader4ComponentMapping       = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;\n\n    handleSRV = pDescriptorHeapSRV->GetCPUDescriptorHandleForHeapStart();\n    pDevice->CreateShaderResourceView(pTexture, &descSRV, handleSRV);\n\n    return 0;\n}\n\n\n5. \u30b5\u30f3\u30d7\u30e9\u306e\u4f5c\u6210\n\u6b21\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b5\u30f3\u30d7\u30eb\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u30b5\u30f3\u30d7\u30e9\u306e\u4f5c\u6210\u3067\u3059\uff0e\u30c6\u30b9\u30b9\u30c1\u30e3\u3092\u30ef\u30fc\u30d7\u3067\u63cf\u753b\u3059\u308b\u304b\u30df\u30e9\u30fc\u3067\u63cf\u753b\u3059\u308b\u304b\u306a\u3069\u306e\u8a2d\u5b9a\u3092\u3059\u308b\u3082\u306e\u3067\u3059\uff0e\n\nCreateSampler\nint D3D12Manager::CreateSampler(){\n    HRESULT hr;\n    D3D12_DESCRIPTOR_HEAP_DESC descHeap;\n\n    ZeroMemory(&descHeap, sizeof(descHeap));\n    descHeap.NumDescriptors = 1;\n    descHeap.Type           = D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER;\n    descHeap.Flags          = D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;\n    descHeap.NodeMask       = 0;\n    hr = pDevice->CreateDescriptorHeap(&descHeap, IID_PPV_ARGS(&pDescriptorHeapSMP));\n    if (FAILED(hr)) {\n        return hr;\n    }\n\n    D3D12_CPU_DESCRIPTOR_HANDLE handleSampler;\n    D3D12_SAMPLER_DESC descSampler;\n    ZeroMemory(&descSampler, sizeof(descSampler));\n\n    descSampler.Filter          = D3D12_FILTER_MIN_MAG_MIP_POINT;\n    descSampler.AddressU        = D3D12_TEXTURE_ADDRESS_MODE_WRAP;\n    descSampler.AddressV        = D3D12_TEXTURE_ADDRESS_MODE_WRAP;\n    descSampler.AddressW        = D3D12_TEXTURE_ADDRESS_MODE_WRAP;\n    descSampler.MaxLOD          =  FLT_MAX;\n    descSampler.MinLOD          = -FLT_MAX;\n    descSampler.ComparisonFunc  = D3D12_COMPARISON_FUNC_NEVER;\n    descSampler.MipLODBias      = 0.0F;\n    descSampler.MaxAnisotropy   = 0;\n\n    handleSampler = pDescriptorHeapSMP->GetCPUDescriptorHandleForHeapStart();\n    pDevice->CreateSampler(&descSampler, handleSampler);\n\n    return 0;\n}\n\n\n\n6. \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u6539\u9020\n\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u30b7\u30a7\u30fc\u30c0\u30fc\u3092\u6539\u9020\u3057\u307e\u3059\uff0e\u66f8\u304d\u63db\u3048\u7b87\u6240\u306f\uff0c\u5b9a\u6570\u306e\u8ffd\u52a0\u3068\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u3059\uff0e\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u306f\u305d\u306e\u307e\u307e\u3067\u5927\u4e08\u592b\u3067\u3059\uff0e\n//\u5b9a\u6570\u5834\u30d5\u30a1\u30d5\u30a1\u306e\u5024\ncbuffer cbBuffer : register(b0){\n    float4x4 WVP;\n};\n\n//\u8ffd\u52a0\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u30b5\u30f3\u30d7\u30e9\nTexture2D<float4> tex0 : register(t0);\nSamplerState samp0 : register(s0);\n\nstruct VS_INPUT{\n    float3 Position : POSITION;\n    float2 UV0      : TEXCOORD;\n};\n\nstruct PS_INPUT{//(VS_OUTPUT)\n    float4 Position : SV_POSITION;\n    float2 UV0      : TEXCOORD;\n};\n\n\n\nPS_INPUT VSMain(VS_INPUT input){\n    PS_INPUT output;\n\n    float4 pos4 = float4(input.Position, 1.0);\n    output.Position = mul(pos4, WVP);\n    output.UV0      = input.UV0;\n\n    return output;\n}\n\n\nfloat4 PSMain(PS_INPUT input) : SV_TARGET{\n    return tex0.Sample(samp0, input.UV0);//\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8fd4\u3059\n}\n\n\n7. \u30b3\u30de\u30f3\u30c9\u30ea\u30b9\u30c8\u3078\u306e\u8ffd\u52a0\n\u63cf\u753b\u30b3\u30de\u30f3\u30c9\u306b\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff0e\n\nPopulateCommandList\n\nint D3D12Manager::PopulateCommandList(){\n    HRESULT hr;\n\n    FLOAT ClearColor[4] = {0.0f, 0.0f, 0.0f, 1.0f};\n\n    SetResourceBarrier(D3D12_RESOURCE_STATE_PRESENT, D3D12_RESOURCE_STATE_RENDER_TARGET);\n\n    pCommandList->ClearDepthStencilView(handleDSV, D3D12_CLEAR_FLAG_DEPTH, 1.0f, 0, 0, nullptr);\n    pCommandList->ClearRenderTargetView(handleRTV[RTVIdx], ClearColor, 0, nullptr);\n\n    pCommandList->SetGraphicsRootSignature(pRootSignature);\n    pCommandList->SetPipelineState(pPipelineState);\n    pCommandList->SetGraphicsRootConstantBufferView(0, pConstantBuffer->GetGPUVirtualAddress());\n\n//-----------------\u8ffd\u52a0\u7b87\u6240---------------------\n    ID3D12DescriptorHeap* heaps[] = { pDescriptorHeapSRV, pDescriptorHeapSMP };\n    pCommandList->SetDescriptorHeaps(_countof(heaps), heaps);\n    pCommandList->SetGraphicsRootDescriptorTable(1, pDescriptorHeapSRV->GetGPUDescriptorHandleForHeapStart());\n    pCommandList->SetGraphicsRootDescriptorTable(2, pDescriptorHeapSMP->GetGPUDescriptorHandleForHeapStart());\n//---------------------------------------------\n\n    pCommandList->RSSetViewports(1, &Viewport);\n    pCommandList->RSSetScissorRects(1, &RectScissor);\n\n    pCommandList->OMSetRenderTargets(1, &handleRTV[RTVIdx], TRUE, &handleDSV);\n\n    pCommandList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);\n    pCommandList->IASetVertexBuffers(0, 1, &VertexView);\n    pCommandList->IASetIndexBuffer(&IndexView);\n\n    pCommandList->DrawIndexedInstanced(6, 1, 0, 0, 0);\n\n    SetResourceBarrier(D3D12_RESOURCE_STATE_RENDER_TARGET, D3D12_RESOURCE_STATE_PRESENT);\n\n    hr = pCommandList->Close();\n    if(FAILED(hr)){\n        return -1;\n    }\n\n    return 0;\n}\n\n\n\n8. \u63cf\u753b\u30c7\u30fc\u30bf\u306e\u5909\u66f4\n\u63cf\u753b\u30c7\u30fc\u30bf\u3082\u5909\u66f4\u3057\u307e\u3059\uff0e\n\u30dd\u30ea\u30b4\u30f3\u306e\u9802\u70b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\nSetVertexData\nint D3D12Manager::SetVertexData(){\n    HRESULT hr;\n    void *Mapped;\n\n//-----------------\u5909\u66f4\u7b87\u6240-------------------\n    Vertex3D Vertices[] = {\n        {XMFLOAT3(-1.f,  1.f, 0.f), XMFLOAT2(0.f, 0.f)},\n        {XMFLOAT3( 1.f,  1.f, 0.f), XMFLOAT2(1.f, 0.f)},\n        {XMFLOAT3( 1.f, -1.f, 0.f), XMFLOAT2(1.f, 1.f)},\n        {XMFLOAT3(-1.f, -1.f, 0.f), XMFLOAT2(0.f, 1.f)},\n    };\n//-------------------------------------------\n    hr = pVertexBuffer->Map(0, nullptr, &Mapped);\n    if (SUCCEEDED(hr)) {\n        CopyMemory(Mapped, Vertices, sizeof(Vertices));\n        pVertexBuffer->Unmap(0, nullptr);\n        Mapped = nullptr;\n    }else{\n        return -1;\n    }\n    VertexView.BufferLocation = pVertexBuffer->GetGPUVirtualAddress();\n    VertexView.StrideInBytes  = sizeof(Vertex3D);\n    VertexView.SizeInBytes    = sizeof(Vertices);\n\n\n    //\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30c7\u30fc\u30bf\u3092IndexBuffer\u306b\u66f8\u304d\u8fbc\u3080\n    uint16_t Index[] = {0, 1, 3, 1, 2, 3};\n    hr = pIndexBuffer->Map(0, nullptr, &Mapped);\n    if (SUCCEEDED(hr)) {\n        CopyMemory(Mapped, Index, sizeof(Index));\n        pIndexBuffer->Unmap(0, nullptr);\n        Mapped = nullptr;\n    }else{\n        return -1;\n    }\n    IndexView.BufferLocation = pIndexBuffer->GetGPUVirtualAddress();\n    IndexView.SizeInBytes    = sizeof(Index);\n    IndexView.Format         = DXGI_FORMAT_R16_UINT;\n\n    return 0;\n}\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u5b9f\u884c\u3067\u304d\u307e\u3057\u305f\uff0e\u753b\u50cf\u306f\u9069\u5f53\u306b\u30da\u30a4\u30f3\u30c8\u30bd\u30d5\u30c8\u3067\u30dd\u30c1\u30dd\u30c1\u3057\u307e\u3057\u305f\uff0e\n\n\u304a\u308f\u308a\n\u6bce\u5ea6\u306e\u3053\u3068\u306a\u304c\u3089\u75b2\u308c\u307e\u3057\u305f\uff0ef(^^;\n\u306a\u3093\u3068\u304b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8cbc\u308b\u3068\u3053\u308d\u307e\u3067\u884c\u3051\u307e\u3057\u305f\uff0e\u306a\u304b\u306a\u304b\u9053\u306e\u308a\u306f\u967a\u3057\u305d\u3046\u3067\u3059...\n#\u6ce8\u610f!\n\u3053\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306f\u53e4\u3044\u3082\u306e\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u65b0\u3057\u3044\u3082\u306e\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u306b\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n[DirectX12\u30673D\u63cf\u753b](http://qiita.com/em7dfggbcadd9/items/a73b79ef9cd949de8926)\n\n***\n\n[\u524d\u56de](http://qiita.com/em7dfggbcadd9/items/89e7af2d9254fdb557b4)\u3067\u306f\u63cf\u753b\u5468\u308a\u3092\u3084\u308a\u307e\u3057\u305f\uff0e\u9802\u70b9\u306b\u8272\u3092\u6301\u305f\u305b\u3066\u30dd\u30ea\u30b4\u30f3\u3092\u63cf\u753b\u3057\u307e\u3057\u305f\u304c\uff0c\u4eca\u56de\u306f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8cbc\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3068\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\uff0e\n\n```cpp:\n//\u30e1\u30bd\u30c3\u30c9\nint CreateTexture();\nint CreateShaderResource();\nint CreateSampler();\n```\n```cpp:\n//\u5909\u6570\nID3D12DescriptorHeap\t*pDescriptorHeapSRV;\nID3D12DescriptorHeap\t*pDescriptorHeapSMP;\nID3D12Resource\t\t\t*pTexture;\n```\n\n# 1. RootSignature\u306e\u8a2d\u5b9a\n\u524d\u56de\u307e\u3067\u306f\uff0c\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u30ec\u30b8\u30b9\u30bf\u306b\u306f\u30a2\u30d5\u30a3\u30f3\u5909\u63db\u306a\u3069\u306b\u7528\u3044\u308b\u5b9a\u6570\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3060\u3051\u3060\u3063\u305f\u306e\u3067\uff0cRootSignature\u306fCBV\u306e\u8a2d\u5b9a\u3060\u3051\u3067\u3057\u305f\u304c\uff0c\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8cbc\u308b\u5834\u5408\u306f\u65b0\u305f\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3084\u30b5\u30f3\u30d7\u30e9\u30fc\u306a\u3069\u3082\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\uff0e\u306a\u306e\u3067RootSignature\u3092\u305d\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n```cpp:CreateRootSignature\nint D3D12Manager::CreateRootSignature(){\n\tHRESULT hr;\n\tD3D12_ROOT_SIGNATURE_DESC RootSignatureDesc;\n\tD3D12_ROOT_PARAMETER RootParameters[3];\n\n\tZeroMemory(&RootSignatureDesc, sizeof(RootSignatureDesc));\n\tZeroMemory(RootParameters,     sizeof(RootParameters));\n\n\tD3D12_DESCRIPTOR_RANGE range[2];\n\tZeroMemory(range, sizeof(range));\n\n\trange[0].NumDescriptors     = 1;\n\trange[0].BaseShaderRegister = 0;\n\trange[0].RangeType          = D3D12_DESCRIPTOR_RANGE_TYPE_SRV;\n\trange[0].OffsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND;\n\n\trange[1].NumDescriptors     = 1;\n\trange[1].BaseShaderRegister = 0;\n\trange[1].RangeType          = D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER;\n\trange[1].OffsetInDescriptorsFromTableStart = D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND;\n\n\tRootParameters[0].ParameterType             = D3D12_ROOT_PARAMETER_TYPE_CBV;\n\tRootParameters[0].ShaderVisibility          = D3D12_SHADER_VISIBILITY_ALL;\n\tRootParameters[0].Descriptor.ShaderRegister = 0;\n\tRootParameters[0].Descriptor.RegisterSpace  = 0;\n\n\tRootParameters[1].ParameterType             = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE;\n\tRootParameters[1].ShaderVisibility          = D3D12_SHADER_VISIBILITY_ALL;\n\tRootParameters[1].DescriptorTable.NumDescriptorRanges = 1;\n\tRootParameters[1].DescriptorTable.pDescriptorRanges   = &range[0];\n\n\tRootParameters[2].ParameterType             = D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE;\n\tRootParameters[2].ShaderVisibility          = D3D12_SHADER_VISIBILITY_ALL;\n\tRootParameters[2].DescriptorTable.NumDescriptorRanges = 1;\n\tRootParameters[2].DescriptorTable.pDescriptorRanges   = &range[1];\n\n\n\tRootSignatureDesc.Flags = D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT;\n\tRootSignatureDesc.NumParameters = _countof(RootParameters);\n\tRootSignatureDesc.pParameters = RootParameters;\n\n\thr = D3D12SerializeRootSignature(&RootSignatureDesc, D3D_ROOT_SIGNATURE_VERSION_1, &pRootSignatureBlob, &pErrorBlob);\n\tif(FAILED(hr)){\n\t\treturn -1;\n\t}\n\thr = pDevice->CreateRootSignature(0, pRootSignatureBlob->GetBufferPointer(), pRootSignatureBlob->GetBufferSize(), IID_PPV_ARGS(&pRootSignature));\n\tif(FAILED(hr)){\n\t\treturn -1;\n\t}\n\treturn 0;\n}\n```\n\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306f\u4eca\u307e\u3067\u3068\u540c\u3058\u3067\uff0c\u65b0\u305f\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u30b5\u30f3\u30d7\u30e9\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\uff0e\u3053\u3053\u306e\u8a2d\u5b9a\u306f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u5f71\u97ff\u3092\u4e0e\u3048\u308b\u3088\u3046\u3067\u3059\u304c\uff0c\u3069\u3046\u66f8\u3044\u305f\u3089\u30d9\u30b9\u30c8\u304b\u308f\u304b\u308a\u307e\u305b\u3093(\u2190)\uff0e\u8ab0\u304b\u304a\u3057\u3048\u3066\u304f\u3060\u3055\u3044f(^^;\n\u3068\u3082\u3042\u308c\u3053\u308c\u3067\u5b9a\u6570\u30d0\u30c3\u30d5\u30a1\u306f\u30b7\u30a7\u30fc\u30c0\u306eb0\u306b\uff0c\u30c6\u30af\u30b9\u30c1\u30e3\u306ft0\u306b\uff0c\u30b5\u30f3\u30d7\u30e9\u306fs0\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3057\u305f\uff0e\n\n# 2. \u9802\u70b9\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u8a2d\u5b9a\n\u524d\u56de\u3067\u4f7f\u7528\u3057\u305f\u9802\u70b9\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u306f\u5ea7\u6a19\u3068\u8272\u3092\u6271\u3044\u307e\u3057\u305f\uff0e\u4eca\u56de\u306f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u8272\u60c5\u5831\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff0e\u304b\u308f\u308a\u306bUV\u60c5\u5831\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u308c\u306f\u9802\u70b9\u304c\u30c6\u30af\u30b9\u30c1\u30e3\u753b\u50cf\u306e\u3069\u306e\u4f4d\u7f6e\u306b\u5f53\u305f\u308b\u306e\u304b\u3092\u6c7a\u3081\u308b\u3082\u306e\u3067\u3059\uff0e\u306a\u306e\u3067\u9802\u70b9\u306e\u69cb\u9020\u4f53\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```cpp:Vertex3D\ntypedef struct Vertex3D{\n\t\tXMFLOAT3 Position;\n\t\tXMFLOAT2 UV0;\n\t}Vertex3D;\n```\nPSO\u306e\u9802\u70b9\u30ec\u30a4\u30a2\u30a6\u30c8\u3082\u5909\u308f\u308a\u307e\u3059\uff0e\n\n```cpp:CreatePipelineStateObject\nint D3D12Manager::CreatePipelineStateObject(){\n\tHRESULT hr;\n\n\t// \u9802\u70b9\u30ec\u30a4\u30a2\u30a6\u30c8.\n\tD3D12_INPUT_ELEMENT_DESC descInputElements[] = {\n\t\t{ \"POSITION\", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0,  0, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 },\n\t\t{ \"TEXCOORD\", 0, DXGI_FORMAT_R32G32_FLOAT,    0, 12, D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0 },\n\t};\n\n//...\u7701\u7565\n```\n\n# 3. \u30c6\u30af\u30b9\u30c1\u30e3\u306e\u4f5c\u6210\n\u7d9a\u3044\u3066\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3059\uff0e\u304b\u3064\u3066\u306eDirectX\u3067\u306f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8aad\u307f\u8fbc\u3080\u95a2\u6570\u7684\u306a\u3082\u306e\u304c\u3042\u3063\u305f\u3088\u3046\u3067\u3059\u304c (\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044...)\uff0cDirectX12\u3067\u306f\u305d\u306e\u3088\u3046\u306a\u3082\u306e\u306f\u306a\u304f\uff0c\u753b\u50cf\u3092\u81ea\u5206\u3067\u9811\u5f35\u3063\u3066\u8aad\u307f\u8fbc\u307f\u307e\u3059 (\u307e\u3058\u304b\uff01\u03a3(\uff9f\u0434\uff9f;))\uff0e\u3068\u308a\u3042\u3048\u305a\u30ea\u30bd\u30fc\u30b9\u4f5c\u3063\u3066\u66f8\u304d\u8fbc\u307f\u307e\u3059\uff0e\n\n```cpp:CreateTexture\nint D3D12Manager::CreateTexture(){\n\tHRESULT hr;\n\tD3D12_RESOURCE_DESC descResourceTex;\n\tD3D12_HEAP_PROPERTIES heapProps;\n\tZeroMemory(&heapProps, sizeof(heapProps));\n\tZeroMemory(&descResourceTex, sizeof(descResourceTex));\n\n\theapProps.Type                 = D3D12_HEAP_TYPE_CUSTOM;\n\theapProps.CPUPageProperty      = D3D12_CPU_PAGE_PROPERTY_WRITE_BACK;\n\theapProps.MemoryPoolPreference = D3D12_MEMORY_POOL_L0;\n\theapProps.CreationNodeMask     = 0;\n\theapProps.VisibleNodeMask      = 0;\n\n\tdescResourceTex.Dimension        = D3D12_RESOURCE_DIMENSION_TEXTURE2D;\n\tdescResourceTex.Width            = 256;\t//\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f256x256\u306e32bit\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u4f7f\u3046\u305f\u3081\uff0c\u6c7a\u3081\u6253\u3061\n\tdescResourceTex.Height           = 256;\n\tdescResourceTex.DepthOrArraySize = 1;\n\tdescResourceTex.MipLevels        = 1;\n\tdescResourceTex.Format           = DXGI_FORMAT_B8G8R8A8_UNORM;\n\tdescResourceTex.Layout           = D3D12_TEXTURE_LAYOUT_UNKNOWN;\n\tdescResourceTex.SampleDesc.Quality = 0;\n\tdescResourceTex.SampleDesc.Count   = 1;\n\n\thr = pDevice->CreateCommittedResource(&heapProps, D3D12_HEAP_FLAG_NONE, &descResourceTex, D3D12_RESOURCE_STATE_GENERIC_READ, nullptr, IID_PPV_ARGS(&pTexture));\n\tif(FAILED(hr)){\n\t\treturn -1;\n\t}\n\n\t\n\tstd::ifstream ifs(\"test.bmp\", std::ios_base::in | std::ios_base::binary);\n\tif(!ifs){\n\t\treturn -1;\n\t}\n\tBYTE *dat = (BYTE*)malloc(4 * 256 * 256);\n\tifs.read((char*)dat, 139);\t//\u4eca\u56de\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u306f\u628a\u63e1\u3057\u3066\u3044\u308b\u305f\u3081\u5207\u308a\u6368\u3066\n\tifs.read((char*)dat, 4  * 256 * 256);//\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\t\n\t//\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f\n\tD3D12_BOX box = {0, 0, 0, 256, 256, 1};\n\thr = pTexture->WriteToSubresource(0, &box, dat, 4 * 256, 4 * 256 * 256);\n\tfree(dat);\n\tif(FAILED(hr)){\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n```\n\u4eca\u56de\u306f\u81ea\u5206\u3067\u7528\u610f\u3057\u305f256x256\u306e32bit\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3057\u305f\uff0e\u624b\u629c\u304d\u306e\u305f\u3081\u30d8\u30c3\u30c0\u60c5\u5831\u306a\u3069\u306f\u53d6\u5f97\u3057\u3066\u304a\u3089\u305a\uff0c\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc\u51fa\u307e\u304f\u308a\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\uff0e\u7686\u3055\u3093\u306f\u3082\u3063\u3068\u4e0a\u624b\u304f\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3088\u306d?f(^^;\nSDK\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c10.0.10240.0\u306e\u6642\u306f\n`heapProps.Type                 = D3D12_HEAP_TYPE_UPLOAD;\n\theapProps.CPUPageProperty      = D3D12_CPU_PAGE_PROPERTY_UNKNOWN;\n\theapProps.MemoryPoolPreference = D3D12_MEMORY_POOL_UNKNOWN;`\n\u3067\u3082\u52d5\u3044\u305f\u306e\u3067\u3059\u304c\uff0c10.0.10586.0\u306b\u3057\u305f\u3089\u52d5\u304b\u306a\u304f\u306a\u308a\u307e\u3057\u305f\uff0e\n\n# 4. ShaderResourceView \u306e\u4f5c\u6210\n\u6b21\u306bShaderResourceView \u306e\u4f5c\u6210\u3092\u884c\u3044\u307e\u3059\uff0e\u5b9f\u969b\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b7\u30a7\u30fc\u30c0\u30fc\u306b\u6e21\u3059\u305f\u3081\u306e\u30c7\u30b9\u30af\u30ea\u30d7\u30bf\u306e\u4f5c\u6210\u3067\u3059\uff0e\n\n```cpp:\nint D3D12Manager::CreateShaderResource(){\n\tHRESULT hr;\n\tD3D12_DESCRIPTOR_HEAP_DESC descHeap;\n\n\tZeroMemory(&descHeap, sizeof(descHeap));\n\tdescHeap.NumDescriptors = 1;\n\tdescHeap.Type           = D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV;\n\tdescHeap.Flags\t\t    = D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;\n\tdescHeap.NodeMask       = 0;\n\thr = pDevice->CreateDescriptorHeap(&descHeap, IID_PPV_ARGS(&pDescriptorHeapSRV));\n\tif (FAILED(hr)) {\n\t\treturn hr;\n\t}\n\n\tUINT strideSize = pDevice->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);\n\tD3D12_CPU_DESCRIPTOR_HANDLE handleSRV;\n\tD3D12_SHADER_RESOURCE_VIEW_DESC descSRV;\n\tZeroMemory(&descSRV, sizeof(descSRV));\n\n\tdescSRV.Format\t\t\t\t\t\t  = DXGI_FORMAT_B8G8R8A8_UNORM;\n\tdescSRV.ViewDimension\t\t\t\t  = D3D12_SRV_DIMENSION_TEXTURE2D;\n\tdescSRV.Texture2D.MipLevels\t\t\t  = 1;\n\tdescSRV.Texture2D.MostDetailedMip     = 0;\n\tdescSRV.Texture2D.PlaneSlice          = 0;\n\tdescSRV.Texture2D.ResourceMinLODClamp = 0.0F;\n\tdescSRV.Shader4ComponentMapping\t\t  = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;\n\n\thandleSRV = pDescriptorHeapSRV->GetCPUDescriptorHandleForHeapStart();\n\tpDevice->CreateShaderResourceView(pTexture, &descSRV, handleSRV);\n\n\treturn 0;\n}\n```\n\n# 5. \u30b5\u30f3\u30d7\u30e9\u306e\u4f5c\u6210\n\u6b21\u306b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u30b5\u30f3\u30d7\u30eb\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u30b5\u30f3\u30d7\u30e9\u306e\u4f5c\u6210\u3067\u3059\uff0e\u30c6\u30b9\u30b9\u30c1\u30e3\u3092\u30ef\u30fc\u30d7\u3067\u63cf\u753b\u3059\u308b\u304b\u30df\u30e9\u30fc\u3067\u63cf\u753b\u3059\u308b\u304b\u306a\u3069\u306e\u8a2d\u5b9a\u3092\u3059\u308b\u3082\u306e\u3067\u3059\uff0e\n\n```cpp:CreateSampler\nint D3D12Manager::CreateSampler(){\n\tHRESULT hr;\n\tD3D12_DESCRIPTOR_HEAP_DESC descHeap;\n\n\tZeroMemory(&descHeap, sizeof(descHeap));\n\tdescHeap.NumDescriptors = 1;\n\tdescHeap.Type\t\t\t= D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER;\n\tdescHeap.Flags\t\t\t= D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;\n\tdescHeap.NodeMask       = 0;\n\thr = pDevice->CreateDescriptorHeap(&descHeap, IID_PPV_ARGS(&pDescriptorHeapSMP));\n\tif (FAILED(hr)) {\n\t\treturn hr;\n\t}\n\n\tD3D12_CPU_DESCRIPTOR_HANDLE handleSampler;\n\tD3D12_SAMPLER_DESC descSampler;\n\tZeroMemory(&descSampler, sizeof(descSampler));\n\n\tdescSampler.Filter\t\t\t= D3D12_FILTER_MIN_MAG_MIP_POINT;\n\tdescSampler.AddressU\t\t= D3D12_TEXTURE_ADDRESS_MODE_WRAP;\n\tdescSampler.AddressV\t\t= D3D12_TEXTURE_ADDRESS_MODE_WRAP;\n\tdescSampler.AddressW\t\t= D3D12_TEXTURE_ADDRESS_MODE_WRAP;\n\tdescSampler.MaxLOD\t\t\t=  FLT_MAX;\n\tdescSampler.MinLOD\t\t\t= -FLT_MAX;\n\tdescSampler.ComparisonFunc\t= D3D12_COMPARISON_FUNC_NEVER;\n\tdescSampler.MipLODBias      = 0.0F;\n\tdescSampler.MaxAnisotropy   = 0;\n\n\thandleSampler = pDescriptorHeapSMP->GetCPUDescriptorHandleForHeapStart();\n\tpDevice->CreateSampler(&descSampler, handleSampler);\n\n\treturn 0;\n}\n```\n\n# 6. \u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u6539\u9020\n\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u63cf\u753b\u3067\u304d\u308b\u3088\u3046\u306b\u30b7\u30a7\u30fc\u30c0\u30fc\u3092\u6539\u9020\u3057\u307e\u3059\uff0e\u66f8\u304d\u63db\u3048\u7b87\u6240\u306f\uff0c\u5b9a\u6570\u306e\u8ffd\u52a0\u3068\u30d4\u30af\u30bb\u30eb\u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u3059\uff0e\u9802\u70b9\u30b7\u30a7\u30fc\u30c0\u30fc\u306f\u305d\u306e\u307e\u307e\u3067\u5927\u4e08\u592b\u3067\u3059\uff0e\n\n```cpp:\n//\u5b9a\u6570\u5834\u30d5\u30a1\u30d5\u30a1\u306e\u5024\ncbuffer cbBuffer : register(b0){\n\tfloat4x4 WVP;\n};\n\n//\u8ffd\u52a0\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3068\u30b5\u30f3\u30d7\u30e9\nTexture2D<float4> tex0 : register(t0);\nSamplerState samp0 : register(s0);\n\nstruct VS_INPUT{\n\tfloat3 Position : POSITION;\n\tfloat2 UV0      : TEXCOORD;\n};\n\nstruct PS_INPUT{//(VS_OUTPUT)\n\tfloat4 Position : SV_POSITION;\n\tfloat2 UV0      : TEXCOORD;\n};\n\n\n\nPS_INPUT VSMain(VS_INPUT input){\n\tPS_INPUT output;\n\n\tfloat4 pos4 = float4(input.Position, 1.0);\n\toutput.Position = mul(pos4, WVP);\n\toutput.UV0      = input.UV0;\n\n\treturn output;\n}\n\n\nfloat4 PSMain(PS_INPUT input) : SV_TARGET{\n\treturn tex0.Sample(samp0, input.UV0);//\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8fd4\u3059\n}\n```\n\n# 7. \u30b3\u30de\u30f3\u30c9\u30ea\u30b9\u30c8\u3078\u306e\u8ffd\u52a0\n\u63cf\u753b\u30b3\u30de\u30f3\u30c9\u306b\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3059\uff0e\n\n```cpp:PopulateCommandList\n\nint D3D12Manager::PopulateCommandList(){\n\tHRESULT hr;\n\t\n\tFLOAT ClearColor[4] = {0.0f, 0.0f, 0.0f, 1.0f};\n\n\tSetResourceBarrier(D3D12_RESOURCE_STATE_PRESENT, D3D12_RESOURCE_STATE_RENDER_TARGET);\n\n\tpCommandList->ClearDepthStencilView(handleDSV, D3D12_CLEAR_FLAG_DEPTH, 1.0f, 0, 0, nullptr);\n\tpCommandList->ClearRenderTargetView(handleRTV[RTVIdx], ClearColor, 0, nullptr);\n\n\tpCommandList->SetGraphicsRootSignature(pRootSignature);\n\tpCommandList->SetPipelineState(pPipelineState);\n\tpCommandList->SetGraphicsRootConstantBufferView(0, pConstantBuffer->GetGPUVirtualAddress());\n\n//-----------------\u8ffd\u52a0\u7b87\u6240---------------------\n\tID3D12DescriptorHeap* heaps[] = { pDescriptorHeapSRV, pDescriptorHeapSMP };\n\tpCommandList->SetDescriptorHeaps(_countof(heaps), heaps);\n\tpCommandList->SetGraphicsRootDescriptorTable(1, pDescriptorHeapSRV->GetGPUDescriptorHandleForHeapStart());\n\tpCommandList->SetGraphicsRootDescriptorTable(2, pDescriptorHeapSMP->GetGPUDescriptorHandleForHeapStart());\n//---------------------------------------------\n\n\tpCommandList->RSSetViewports(1, &Viewport);\n\tpCommandList->RSSetScissorRects(1, &RectScissor);\n\n\tpCommandList->OMSetRenderTargets(1, &handleRTV[RTVIdx], TRUE, &handleDSV);\n\n\tpCommandList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);\n\tpCommandList->IASetVertexBuffers(0, 1, &VertexView);\n\tpCommandList->IASetIndexBuffer(&IndexView);\n\n\tpCommandList->DrawIndexedInstanced(6, 1, 0, 0, 0);\n\n\tSetResourceBarrier(D3D12_RESOURCE_STATE_RENDER_TARGET, D3D12_RESOURCE_STATE_PRESENT);\n\n\thr = pCommandList->Close();\n\tif(FAILED(hr)){\n\t\treturn -1;\n\t}\n\n\treturn 0;\n}\n```\n\n# 8. \u63cf\u753b\u30c7\u30fc\u30bf\u306e\u5909\u66f4\n\u63cf\u753b\u30c7\u30fc\u30bf\u3082\u5909\u66f4\u3057\u307e\u3059\uff0e\n\n\u30dd\u30ea\u30b4\u30f3\u306e\u9802\u70b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```cpp:SetVertexData\nint D3D12Manager::SetVertexData(){\n\tHRESULT hr;\n\tvoid *Mapped;\n\n//-----------------\u5909\u66f4\u7b87\u6240-------------------\n\tVertex3D Vertices[] = {\n\t\t{XMFLOAT3(-1.f,  1.f, 0.f), XMFLOAT2(0.f, 0.f)},\n\t\t{XMFLOAT3( 1.f,  1.f, 0.f), XMFLOAT2(1.f, 0.f)},\n\t\t{XMFLOAT3( 1.f, -1.f, 0.f), XMFLOAT2(1.f, 1.f)},\n\t\t{XMFLOAT3(-1.f, -1.f, 0.f), XMFLOAT2(0.f, 1.f)},\n\t};\n//-------------------------------------------\n\thr = pVertexBuffer->Map(0, nullptr, &Mapped);\n\tif (SUCCEEDED(hr)) {\n\t\tCopyMemory(Mapped, Vertices, sizeof(Vertices));\n\t\tpVertexBuffer->Unmap(0, nullptr);\n\t\tMapped = nullptr;\n\t}else{\n\t\treturn -1;\n\t}\n\tVertexView.BufferLocation = pVertexBuffer->GetGPUVirtualAddress();\n\tVertexView.StrideInBytes  = sizeof(Vertex3D);\n\tVertexView.SizeInBytes    = sizeof(Vertices);\n\n\n\t//\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30c7\u30fc\u30bf\u3092IndexBuffer\u306b\u66f8\u304d\u8fbc\u3080\n\tuint16_t Index[] = {0, 1, 3, 1, 2, 3};\n\thr = pIndexBuffer->Map(0, nullptr, &Mapped);\n\tif (SUCCEEDED(hr)) {\n\t\tCopyMemory(Mapped, Index, sizeof(Index));\n\t\tpIndexBuffer->Unmap(0, nullptr);\n\t\tMapped = nullptr;\n\t}else{\n\t\treturn -1;\n\t}\n\tIndexView.BufferLocation = pIndexBuffer->GetGPUVirtualAddress();\n\tIndexView.SizeInBytes    = sizeof(Index);\n\tIndexView.Format         = DXGI_FORMAT_R16_UINT;\n\n\treturn 0;\n}\n\n```\n\n# \u5b9f\u884c\u7d50\u679c\n![directx12.png](https://qiita-image-store.s3.amazonaws.com/0/105303/2ffdf80e-e23c-2637-40c5-4ab5a0a3d8f5.png)\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u5b9f\u884c\u3067\u304d\u307e\u3057\u305f\uff0e\u753b\u50cf\u306f\u9069\u5f53\u306b\u30da\u30a4\u30f3\u30c8\u30bd\u30d5\u30c8\u3067\u30dd\u30c1\u30dd\u30c1\u3057\u307e\u3057\u305f\uff0e\n\n# \u304a\u308f\u308a\n\u6bce\u5ea6\u306e\u3053\u3068\u306a\u304c\u3089\u75b2\u308c\u307e\u3057\u305f\uff0ef(^^;\n\u306a\u3093\u3068\u304b\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u8cbc\u308b\u3068\u3053\u308d\u307e\u3067\u884c\u3051\u307e\u3057\u305f\uff0e\u306a\u304b\u306a\u304b\u9053\u306e\u308a\u306f\u967a\u3057\u305d\u3046\u3067\u3059...\n"}