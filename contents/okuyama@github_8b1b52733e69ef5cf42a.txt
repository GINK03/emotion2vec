{"context": " More than 1 year has passed since last update.Oracle\u306e\u30c7\u30fc\u30bf\u3092SQLite\u306b\u30b3\u30d4\u30fc\u3057\u3066\u3044\u3058\u308a\u304b\u3063\u305f\u3068\u3053\u308d\u306bSQLAlchemy\u304c\u3042\u3063\u305f\u306e\u3067\u91d1\u69cc\u306e\u6cd5\u5247\u3067\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nSQLAlchemy\u306e0.9.8\u3067\u8a66\u3057\u3066\u3044\u307e\u3059\u3002\nimport re\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.automap import automap_base\nfrom sqlalchemy.dialects.sqlite.base import SQLiteDDLCompiler, SQLiteTypeCompiler\n\nclass Oracle2SQLiteTypeCompiler(SQLiteTypeCompiler):\n    '''\u3068\u308a\u3044\u305d\u304e\u5fc5\u8981\u3060\u3063\u305f\u30ab\u30e9\u30e0\u3060\u3051\u8003\u3048\u308b'''\n    def visit_DOUBLE_PRECISION(self, type_):\n        pass\n    def visit_INTERVAL(self, type_):\n        pass\n    def visit_LONG(self, type_):\n        pass\n    def visit_NUMBER(self, type_, **kw):\n        return self.visit_NUMERIC(type_)\n    def visit_NVARCHAR2(self, type_):\n        return self.visit_NVARCHAR(type_)\n    def visit_RAW(self, type_):\n        pass\n    def visit_ROWID(self, type_):\n        pass\n    def visit_VARCHAR2(self, type_):\n        return self.visit_VARCHAR(type_)\n\nTODATE_REGEXP = re.compile(\"to_date\\('([^']+)'\")\n\nclass Oracle2SQLiteDDLCompiler(SQLiteDDLCompiler):\n    '''\u3068\u308a\u3044\u305d\u304e\u5fc5\u8981\u3060\u3063\u305f\u30ab\u30e9\u30e0\u3060\u3051\u8003\u3048\u308b'''\n    def get_column_default_string(self, column):\n        default_clause = super().get_column_default_string(column)\n        if default_clause is None:\n            return default_clause\n        default_clause_lower = default_clause.lower()\n        if 'sysdate' in default_clause_lower:\n            return 'current_date'\n        m = TODATE_REGEXP.match(default_clause_lower)\n        if m:\n            return \"'%s'\" % m.group(1)\n        return default_clause\n\nfrom_engine = create_engine('oracle://FROM_DB_USER:PASSWORD@HSOT:PORT/SID')\nto_engine = create_engine('sqlite:///to_db.db')\n\nto_engine.dialect.type_compiler = Oracle2SQLiteTypeCompiler(to_engine.dialect)\nto_engine.dialect.ddl_compiler = Oracle2SQLiteDDLCompiler\n\nbase = automap_base()\nbase.prepare(from_engine, reflect=True)\n\ntable = base.metadata.tables['db_table_name']\ntable.create(to_engine)\n\ndata = from_engine.execute(table.select()).fetchall()\nto_engine.execute(table.insert(), data)\n\n\nOracle\u306e\u30c7\u30fc\u30bf\u3092SQLite\u306b\u30b3\u30d4\u30fc\u3057\u3066\u3044\u3058\u308a\u304b\u3063\u305f\u3068\u3053\u308d\u306bSQLAlchemy\u304c\u3042\u3063\u305f\u306e\u3067\u91d1\u69cc\u306e\u6cd5\u5247\u3067\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nSQLAlchemy\u306e0.9.8\u3067\u8a66\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python\nimport re\n\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.ext.automap import automap_base\nfrom sqlalchemy.dialects.sqlite.base import SQLiteDDLCompiler, SQLiteTypeCompiler\n\nclass Oracle2SQLiteTypeCompiler(SQLiteTypeCompiler):\n    '''\u3068\u308a\u3044\u305d\u304e\u5fc5\u8981\u3060\u3063\u305f\u30ab\u30e9\u30e0\u3060\u3051\u8003\u3048\u308b'''\n    def visit_DOUBLE_PRECISION(self, type_):\n        pass\n    def visit_INTERVAL(self, type_):\n        pass\n    def visit_LONG(self, type_):\n        pass\n    def visit_NUMBER(self, type_, **kw):\n        return self.visit_NUMERIC(type_)\n    def visit_NVARCHAR2(self, type_):\n        return self.visit_NVARCHAR(type_)\n    def visit_RAW(self, type_):\n        pass\n    def visit_ROWID(self, type_):\n        pass\n    def visit_VARCHAR2(self, type_):\n        return self.visit_VARCHAR(type_)\n\nTODATE_REGEXP = re.compile(\"to_date\\('([^']+)'\")\n\nclass Oracle2SQLiteDDLCompiler(SQLiteDDLCompiler):\n    '''\u3068\u308a\u3044\u305d\u304e\u5fc5\u8981\u3060\u3063\u305f\u30ab\u30e9\u30e0\u3060\u3051\u8003\u3048\u308b'''\n    def get_column_default_string(self, column):\n        default_clause = super().get_column_default_string(column)\n        if default_clause is None:\n            return default_clause\n        default_clause_lower = default_clause.lower()\n        if 'sysdate' in default_clause_lower:\n            return 'current_date'\n        m = TODATE_REGEXP.match(default_clause_lower)\n        if m:\n            return \"'%s'\" % m.group(1)\n        return default_clause\n\nfrom_engine = create_engine('oracle://FROM_DB_USER:PASSWORD@HSOT:PORT/SID')\nto_engine = create_engine('sqlite:///to_db.db')\n\nto_engine.dialect.type_compiler = Oracle2SQLiteTypeCompiler(to_engine.dialect)\nto_engine.dialect.ddl_compiler = Oracle2SQLiteDDLCompiler\n\nbase = automap_base()\nbase.prepare(from_engine, reflect=True)\n\ntable = base.metadata.tables['db_table_name']\ntable.create(to_engine)\n\ndata = from_engine.execute(table.select()).fetchall()\nto_engine.execute(table.insert(), data)\n\n```\n", "tags": ["sqlalchemy", "oracle", "SQLite3"]}