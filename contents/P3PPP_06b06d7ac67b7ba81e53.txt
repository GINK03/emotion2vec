{"context": " More than 1 year has passed since last update.\n\nCallMethodAction\u3092\u4f7f\u3044\u305f\u3044\nXamarin.Forms 1.3.0\u3067Behaviors\u3001Triggers\u3001Actions\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u304c CallMethodAction \u304c\u542b\u307e\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u81ea\u4f5c\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nCallMethodAction\u306fCommand\u3092\u7d4c\u7531\u305b\u305a\u306bViewModel\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305b\u308b\u4fbf\u5229\u306a\u30e4\u30c4\u3067\u3059\u3002\n\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n<!-- \u3053\u3046\u3057\u305f\u3044 -->\n<Button>\n    <Button.Triggers>\n        <EventTrigger EventName=\"Clicked\">\n            <CallMethodAction\n                TargetObject=\"{Binding}\"\n                MethoName=\"Greet\" />\n        </EventTrigger>\n    </Button.Triggers>\n</Button>\n\n\u901a\u5e38\u3001\u81ea\u4f5cAction\u306f TriggerAction \u304b\u3089\u6d3e\u751f\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001 TriggerAction \u306f BindableObject \u304b\u3089\u6d3e\u751f\u3057\u3066\u3044\u306a\u3044\u305f\u3081BindableProperty\u3092\u6301\u3066\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u4eca\u56de\u306fBehavior<T>\u6d3e\u751f\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nAction\u3092Behavior\u3067\u4ee3\u7528\u3059\u308b\u306e\u3067Trigger\u30bb\u30c3\u30c8\u3067\u304d\u305a\u3001\u767a\u706b\u51e6\u7406\u3082\u81ea\u4f5c\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\u6700\u7d42\u7684\u306b\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n<Button>\n    <Button.Behaviors>\n        <!-- EventTrigger\u3001CallMethodAction\u3092Behaivor\u3067\u4ee3\u7528 -->\n        <local:EventTriggerCallMethodBehavior\n            EventName=\"Clicked\"\n            TargetObject=\"{Binding}\"\n            MethoName=\"Greet\" />\n    </Button.Behaviors>\n</Button>\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u6700\u521d\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u4f53\u3092\u8cbc\u3063\u3066\u304b\u3089\u500b\u5225\u306b\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n    public class EventTriggerCallMethodBehavior: Behavior<View>\n    {\n        #region MethodName \u30d0\u30a4\u30f3\u30c9\u53ef\u80fd\u30d7\u30ed\u30d1\u30c6\u30a3\n        public static readonly BindableProperty MethodNameProperty =\n            BindableProperty.Create<CallMethodBehaviorBase,string> (p => p.MethodName, default(string));\n\n        public string MethodName {\n            get { return (string)GetValue (MethodNameProperty); }\n            set { SetValue (MethodNameProperty, value); } \n        }\n        #endregion\n\n        #region TargetObject \u30d0\u30a4\u30f3\u30c9\u53ef\u80fd\u30d7\u30ed\u30d1\u30c6\u30a3\n        public static readonly BindableProperty TargetObjectProperty =\n            BindableProperty.Create<CallMethodBehaviorBase,object> (p => p.TargetObject, default(object));\n\n        public object TargetObject {\n            get { return (object)GetValue (TargetObjectProperty); }\n            set { SetValue (TargetObjectProperty, value); } \n        }\n        #endregion\n\n        #region EventName \u30d0\u30a4\u30f3\u30c9\u53ef\u80fd\u30d7\u30ed\u30d1\u30c6\u30a3\n        public static readonly BindableProperty EventNameProperty =\n            BindableProperty.Create<EventTriggerCallMethodBehavior,string> (p => p.EventName, default(string));\n\n        public string EventName {\n            get { return (string)GetValue (EventNameProperty); }\n            set { SetValue (EventNameProperty, value); } \n        }\n        #endregion\n\n        protected override void OnAttachedTo (View bindable)\n        {\n            base.OnAttachedTo (bindable);\n\n            // TargetObject=\"{Binding}\" \u3067\u30a2\u30bf\u30c3\u30c1\u5148\u306eBindingContext\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u4f1d\u64ad\u3055\u305b\u308b\n            bindable.BindingContextChanged += HandleBindingContextChanged;\n            BindingContext = bindable.BindingContext;\n\n            SubscribeEvent (bindable);\n        }\n\n        protected override void OnDetachingFrom (View bindable)\n        {\n            UnsubscribeEvent (bindable);\n\n            bindable.BindingContextChanged -= HandleBindingContextChanged;\n            BindingContext = null;\n\n            base.OnDetachingFrom (bindable);\n        }\n\n        private void HandleBindingContextChanged (object sender, EventArgs e)\n        {\n            BindingContext = ((View)sender).BindingContext;\n        }\n\n        protected void CallMethod()\n        {\n            if (TargetObject == null ||\n                string.IsNullOrEmpty(MethodName))\n                return;\n\n            var methodInfo = TargetObject.GetType().GetMethod (MethodName);\n            if (methodInfo == null)\n                return;\n\n            methodInfo.Invoke (TargetObject, null);\n        }\n\n        // \u8cfc\u8aad\u4e2d\u306e\u30a4\u30d9\u30f3\u30c8\n        private EventInfo subscribingEvent;\n\n        // \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\n        private void Invoke(object sender, EventArgs e)\n        {\n            CallMethod ();\n        }\n\n        // \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u767b\u9332\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n        private Delegate _Handler;\n        private Delegate Handler {\n            get {\n                if (_Handler == null)\n                {\n                    var handlerMethodInfo = \n                        typeof(EventTriggerCallMethodBehavior)\n                            .GetMethod(\"Invoke\", BindingFlags.NonPublic | BindingFlags.Instance);\n\n                    _Handler = Delegate.CreateDelegate (typeof(EventHandler), this, handlerMethodInfo);\n                }\n\n                return _Handler;\n            }\n        }\n\n        private void SubscribeEvent(object associatedObject)\n        {\n            // \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067EventInfo\u3092\u53d6\u5f97\n            this.subscribingEvent = associatedObject.GetType ().GetEvent (EventName);\n            if (subscribingEvent == null)\n                return;\n\n            // \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\n            // (bindable.EventName += Invoke \u306b\u76f8\u5f53)\n            subscribingEvent.GetAddMethod ().Invoke (associatedObject, new[]{ this.Handler } );\n        }\n\n        private void UnsubscribeEvent(object associatedObject)\n        {\n            if (this.subscribingEvent == null)\n                return;\n\n            // \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u89e3\u9664\n            // (bindable.EventName -= Invoke \u306b\u76f8\u5f53)\n            this.subscribingEvent.GetRemoveMethod ().Invoke (associatedObject, new[]{ this.Handler } );\n        }\n    }\n\n\n\u30a2\u30bf\u30c3\u30c1\u30fb\u30c7\u30bf\u30c3\u30c1\nBehavior\u304c\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306b\u767b\u9332\u3055\u308c\u305f\u308b\u30bf\u30a4\u30df\u30f3\u30b0(OnAttachedTo)\u3067\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u304c\u767a\u751f\u3057\u306a\u3044\u3088\u3046\u306b\u767b\u9332\u89e3\u9664\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0(OnDetachingFrom)\u306b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u89e3\u9664\u3057\u307e\u3059\u3002\n        protected override void OnAttachedTo (View bindable)\n        {\n            base.OnAttachedTo (bindable);\n\n            // TargetObject=\"{Binding}\" \u3067\u30a2\u30bf\u30c3\u30c1\u5148\u306eBindingContext\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u4f1d\u64ad\u3055\u305b\u308b\n            bindable.BindingContextChanged += HandleBindingContextChanged;\n            BindingContext = bindable.BindingContext;\n\n            SubscribeEvent (bindable);\n        }\n\n        protected override void OnDetachingFrom (View bindable)\n        {\n            UnsubscribeEvent (bindable);\n\n            bindable.BindingContextChanged -= HandleBindingContextChanged;\n            BindingContext = null;\n\n            base.OnDetachingFrom (bindable);\n        }\n\n\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u3088\u308b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u767b\u9332\n\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u578b\u60c5\u5831\u304b\u3089GetEvent\u30e1\u30bd\u30c3\u30c9\u3067XAML\u304b\u3089\u540d\u524d\u3067\u6307\u5b9a\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u306eEventInfo\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u3053\u306eEventInfo\u306f\u89e3\u9664\u3059\u308b\u6642\u306b\u4f7f\u3046\u306e\u3067\u4fdd\u6301\u3057\u307e\u3059\u3002\nEventInfo\u304b\u3089GetAddMethod\u30e1\u30bd\u30c3\u30c9\u3067Add\u30e1\u30bd\u30c3\u30c9\u3092\u53d6\u5f97\u3057\u3066\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u30a4\u30d9\u30f3\u30c8\u3092\u6301\u3063\u3066\u3044\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n        private void SubscribeEvent(object associatedObject)\n        {\n            // \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067EventInfo\u3092\u53d6\u5f97\n            this.subscribingEvent = associatedObject.GetType ().GetEvent (EventName);\n            if (subscribingEvent == null)\n                return;\n\n            // \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\n            // (bindable.EventName += Invoke \u306b\u76f8\u5f53)\n            subscribingEvent.GetAddMethod ().Invoke (associatedObject, new[]{ this.Handler } );\n        }\n\n\n\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\n\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u578b\u306f(object sender, EventArgs e)\u3092\u5f15\u6570\u306b\u3068\u308bEventHandler\u578b\u3067\u3059\u3002\u3053\u306e\u578b\u306b\u3059\u308b\u3053\u3068\u3067event EventHandler<T>\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u5168\u3066\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u767b\u9332\u3067\u304d\u307e\u3059\u3002CallMethod\u3092\u767a\u706b\u3055\u305b\u305f\u3044\u3060\u3051\u306a\u306e\u3067\u30ab\u30b9\u30bf\u30e0\u3055\u308c\u305fEventArgs\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\nGetAddMethod\u3067\u5fc5\u8981\u306aDelegate\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306fDelegate.CreateDelegate\u30e1\u30bd\u30c3\u30c9\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u308c\u306f\uff11\u5ea6\u4f5c\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u4f7f\u3044\u307e\u308f\u3057\u307e\u3059\u3002\n(typeof\u6f14\u7b97\u5b50\u306e\u3088\u3046\u306b\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306bMethodInfo\u3092\u53d6\u5f97\u3067\u304d\u308b\u6f14\u7b97\u5b50\u306f\u3042\u308a\u307e\u305b\u3093\u3088\u306d\uff1f)\n        // \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\n        private void Invoke(object sender, EventArgs e)\n        {\n            CallMethod ();\n        }\n\n        // \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u767b\u9332\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n        private Delegate _Handler;\n        private Delegate Handler {\n            get {\n                if (_Handler == null)\n                {\n                    var handlerMethodInfo = \n                        typeof(EventTriggerCallMethodBehavior)\n                            .GetMethod(\"Invoke\", BindingFlags.NonPublic | BindingFlags.Instance);\n\n                    _Handler = Delegate.CreateDelegate (typeof(EventHandler), this, handlerMethodInfo);\n                }\n\n                return _Handler;\n            }\n        }\n\n\n\u30bf\u30fc\u30b2\u30c3\u30c8\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\nTargetObject\u306e\u578b\u60c5\u5831\u304b\u3089GetMethod\u3067MethodName\u306b\u6307\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306eMethodInfo\u3092\u53d6\u5f97\u3001MethodInfo.Invoke\u3067\u8d77\u52d5\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u5f15\u6570\u7121\u3057\u306a\u306e\u3067Invoke\u306e\u7b2c\uff12\u5f15\u6570\u306fnull\u306b\u3057\u307e\u3059\u3002\n\u672c\u5bb6\u306eCallMethodAction\u306b\u6e96\u3058\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001MethodParameter\u306e\u3088\u3046\u306aBindableProperty\u3092\u8ffd\u52a0\u3057\u3066\u3082\u3044\u3044\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u306d\u3002\n        protected void CallMethod()\n        {\n            if (TargetObject == null ||\n                string.IsNullOrEmpty(MethodName))\n                return;\n\n            var methodInfo = TargetObject.GetType().GetMethod (MethodName);\n            if (methodInfo == null)\n                return;\n\n            methodInfo.Invoke (TargetObject, null);\n        }\n\n\n\u4f7f\u3063\u3066\u307f\u308b\n\u3053\u3093\u306a\u611f\u3058\u306eViewModel\u3092\u4f5c\u3063\u3066...\nusing System;\nusing Xamarin.Forms;\n\nnamespace CallMethodSample\n{\n    public class GreetViewModel : BindableObject\n    {\n        private string _Message;\n        public string Message {\n            get { return _Message; }\n            set\n            {\n                if (_Message == value)\n                    return;\n                _Message = value;\n                OnPropertyChanged (\"Message\");\n            }\n        }\n\n        public void Greet()\n        {\n            Message = \"Hello!\";\n        }\n    }\n}\n\n\u3053\u3093\u306a\u611f\u3058\u306ePage\u3092\u4f5c\u3063\u3066App\u30af\u30e9\u30b9\u306eMainPage\u306b\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:CallMethodSample;assembly=CallMethodSample\"\n             x:Class=\"CallMethodSample.GreetPage\">\n    <ContentPage.BindingContext>\n        <local:GreetViewModel />\n    </ContentPage.BindingContext>\n    <ContentPage.Content>\n        <StackLayout Orientation=\"Vertical\">\n            <Label  VerticalOptions=\"EndAndExpand\"\n                    HorizontalOptions=\"CenterAndExpand\"\n                    Text=\"{Binding Message}\" />\n            <Button Text=\"Click me!\"\n                    HorizontalOptions=\"CenterAndExpand\"\n                    VerticalOptions=\"StartAndExpand\">\n                <Button.Behaviors>\n                    <local:EventTriggerCallMethodBehavior\n                        EventName=\"Clicked\"\n                        MethodName=\"Greet\"\n                        TargetObject=\"{Binding }\" />\n                </Button.Behaviors>\n            </Button>\n        </StackLayout>\n    </ContentPage.Content>\n</ContentPage>\n\nButton\u306e\u30af\u30ea\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u306b\u53cd\u5fdc\u3057\u3066Greet\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5909\u308f\u308a\u307e\u3057\u305f\uff01\n \n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u52d5\u7684\u30b3\u30fc\u30c9\u751f\u6210\u306f\u884c\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u5b9f\u6a5fiOS\u3067\u3082\u4f7f\u3048\u307e\u3059\u3002(\u753b\u50cf\u306f\u5b9f\u6a5f\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u3059)\n\n\u53c2\u8003\n\u65b9\u6cd5 : \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u30d5\u30c3\u30af\u3059\u308b\n\n\n## CallMethodAction\u3092\u4f7f\u3044\u305f\u3044\n\nXamarin.Forms 1.3.0\u3067Behaviors\u3001Triggers\u3001Actions\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u304c `CallMethodAction` \u304c\u542b\u307e\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u81ea\u4f5c\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n[CallMethodAction](https://msdn.microsoft.com/ja-jp/library/microsoft.expression.interactivity.core.callmethodaction%28v=expression.40%29.aspx)\u306fCommand\u3092\u7d4c\u7531\u305b\u305a\u306bViewModel\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305b\u308b\u4fbf\u5229\u306a\u30e4\u30c4\u3067\u3059\u3002\n\n\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```xml:\n<!-- \u3053\u3046\u3057\u305f\u3044 -->\n<Button>\n\t<Button.Triggers>\n\t\t<EventTrigger EventName=\"Clicked\">\n\t\t\t<CallMethodAction\n\t\t\t\tTargetObject=\"{Binding}\"\n\t\t\t\tMethoName=\"Greet\" />\n\t\t</EventTrigger>\n\t</Button.Triggers>\n</Button>\n```\n\n\u901a\u5e38\u3001\u81ea\u4f5cAction\u306f `TriggerAction` \u304b\u3089\u6d3e\u751f\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001 `TriggerAction` \u306f `BindableObject` \u304b\u3089\u6d3e\u751f\u3057\u3066\u3044\u306a\u3044\u305f\u3081BindableProperty\u3092\u6301\u3066\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u4eca\u56de\u306f`Behavior<T>`\u6d3e\u751f\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nAction\u3092Behavior\u3067\u4ee3\u7528\u3059\u308b\u306e\u3067Trigger\u30bb\u30c3\u30c8\u3067\u304d\u305a\u3001\u767a\u706b\u51e6\u7406\u3082\u81ea\u4f5c\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u6700\u7d42\u7684\u306b\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```xml:\n<Button>\n\t<Button.Behaviors>\n\t\t<!-- EventTrigger\u3001CallMethodAction\u3092Behaivor\u3067\u4ee3\u7528 -->\n\t\t<local:EventTriggerCallMethodBehavior\n\t\t\tEventName=\"Clicked\"\n\t\t\tTargetObject=\"{Binding}\"\n\t\t\tMethoName=\"Greet\" />\n\t</Button.Behaviors>\n</Button>\n```\n\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u6700\u521d\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u4f53\u3092\u8cbc\u3063\u3066\u304b\u3089\u500b\u5225\u306b\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\n```c#:\n\tpublic class EventTriggerCallMethodBehavior: Behavior<View>\n\t{\n\t\t#region MethodName \u30d0\u30a4\u30f3\u30c9\u53ef\u80fd\u30d7\u30ed\u30d1\u30c6\u30a3\n\t\tpublic static readonly BindableProperty MethodNameProperty =\n\t\t\tBindableProperty.Create<CallMethodBehaviorBase,string> (p => p.MethodName, default(string));\n\n\t\tpublic string MethodName {\n\t\t\tget { return (string)GetValue (MethodNameProperty); }\n\t\t\tset { SetValue (MethodNameProperty, value); } \n\t\t}\n\t\t#endregion\n\n\t\t#region TargetObject \u30d0\u30a4\u30f3\u30c9\u53ef\u80fd\u30d7\u30ed\u30d1\u30c6\u30a3\n\t\tpublic static readonly BindableProperty TargetObjectProperty =\n\t\t\tBindableProperty.Create<CallMethodBehaviorBase,object> (p => p.TargetObject, default(object));\n\n\t\tpublic object TargetObject {\n\t\t\tget { return (object)GetValue (TargetObjectProperty); }\n\t\t\tset { SetValue (TargetObjectProperty, value); } \n\t\t}\n\t\t#endregion\n\n\t\t#region EventName \u30d0\u30a4\u30f3\u30c9\u53ef\u80fd\u30d7\u30ed\u30d1\u30c6\u30a3\n\t\tpublic static readonly BindableProperty EventNameProperty =\n\t\t\tBindableProperty.Create<EventTriggerCallMethodBehavior,string> (p => p.EventName, default(string));\n\n\t\tpublic string EventName {\n\t\t\tget { return (string)GetValue (EventNameProperty); }\n\t\t\tset { SetValue (EventNameProperty, value); } \n\t\t}\n\t\t#endregion\n\t\t\n\t\tprotected override void OnAttachedTo (View bindable)\n\t\t{\n\t\t\tbase.OnAttachedTo (bindable);\n\n\t\t\t// TargetObject=\"{Binding}\" \u3067\u30a2\u30bf\u30c3\u30c1\u5148\u306eBindingContext\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u4f1d\u64ad\u3055\u305b\u308b\n\t\t\tbindable.BindingContextChanged += HandleBindingContextChanged;\n\t\t\tBindingContext = bindable.BindingContext;\n\n\t\t\tSubscribeEvent (bindable);\n\t\t}\n\n\t\tprotected override void OnDetachingFrom (View bindable)\n\t\t{\n\t\t\tUnsubscribeEvent (bindable);\n\n\t\t\tbindable.BindingContextChanged -= HandleBindingContextChanged;\n\t\t\tBindingContext = null;\n\n\t\t\tbase.OnDetachingFrom (bindable);\n\t\t}\n\n\t\tprivate void HandleBindingContextChanged (object sender, EventArgs e)\n\t\t{\n\t\t\tBindingContext = ((View)sender).BindingContext;\n\t\t}\n\n\t\tprotected void CallMethod()\n\t\t{\n\t\t\tif (TargetObject == null ||\n\t\t\t\tstring.IsNullOrEmpty(MethodName))\n\t\t\t\treturn;\n\n\t\t\tvar methodInfo = TargetObject.GetType().GetMethod (MethodName);\n\t\t\tif (methodInfo == null)\n\t\t\t\treturn;\n\n\t\t\tmethodInfo.Invoke (TargetObject, null);\n\t\t}\n\n\t\t// \u8cfc\u8aad\u4e2d\u306e\u30a4\u30d9\u30f3\u30c8\n\t\tprivate EventInfo subscribingEvent;\n\n\t\t// \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\n\t\tprivate void Invoke(object sender, EventArgs e)\n\t\t{\n\t\t\tCallMethod ();\n\t\t}\n\n\t\t// \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u767b\u9332\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\t\tprivate Delegate _Handler;\n\t\tprivate Delegate Handler {\n\t\t\tget {\n\t\t\t\tif (_Handler == null)\n\t\t\t\t{\n\t\t\t\t\tvar handlerMethodInfo = \n\t\t\t\t\t\ttypeof(EventTriggerCallMethodBehavior)\n\t\t\t\t\t\t\t.GetMethod(\"Invoke\", BindingFlags.NonPublic | BindingFlags.Instance);\n\n\t\t\t\t\t_Handler = Delegate.CreateDelegate (typeof(EventHandler), this, handlerMethodInfo);\n\t\t\t\t}\n\n\t\t\t\treturn _Handler;\n\t\t\t}\n\t\t}\n\n\t\tprivate void SubscribeEvent(object associatedObject)\n\t\t{\n\t\t\t// \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067EventInfo\u3092\u53d6\u5f97\n\t\t\tthis.subscribingEvent = associatedObject.GetType ().GetEvent (EventName);\n\t\t\tif (subscribingEvent == null)\n\t\t\t\treturn;\n\n\t\t\t// \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\n\t\t\t// (bindable.EventName += Invoke \u306b\u76f8\u5f53)\n\t\t\tsubscribingEvent.GetAddMethod ().Invoke (associatedObject, new[]{ this.Handler } );\n\t\t}\n\n\t\tprivate void UnsubscribeEvent(object associatedObject)\n\t\t{\n\t\t\tif (this.subscribingEvent == null)\n\t\t\t\treturn;\n\n\t\t\t// \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u89e3\u9664\n\t\t\t// (bindable.EventName -= Invoke \u306b\u76f8\u5f53)\n\t\t\tthis.subscribingEvent.GetRemoveMethod ().Invoke (associatedObject, new[]{ this.Handler } );\n\t\t}\n\t}\n```\n\n### \u30a2\u30bf\u30c3\u30c1\u30fb\u30c7\u30bf\u30c3\u30c1\n\nBehavior\u304c\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306b\u767b\u9332\u3055\u308c\u305f\u308b\u30bf\u30a4\u30df\u30f3\u30b0(`OnAttachedTo`)\u3067\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u304c\u767a\u751f\u3057\u306a\u3044\u3088\u3046\u306b\u767b\u9332\u89e3\u9664\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0(`OnDetachingFrom`)\u306b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u89e3\u9664\u3057\u307e\u3059\u3002\n\n```c#:\n\t\tprotected override void OnAttachedTo (View bindable)\n\t\t{\n\t\t\tbase.OnAttachedTo (bindable);\n\n\t\t\t// TargetObject=\"{Binding}\" \u3067\u30a2\u30bf\u30c3\u30c1\u5148\u306eBindingContext\u3092\u53c2\u7167\u3059\u308b\u3088\u3046\u4f1d\u64ad\u3055\u305b\u308b\n\t\t\tbindable.BindingContextChanged += HandleBindingContextChanged;\n\t\t\tBindingContext = bindable.BindingContext;\n\n\t\t\tSubscribeEvent (bindable);\n\t\t}\n\n\t\tprotected override void OnDetachingFrom (View bindable)\n\t\t{\n\t\t\tUnsubscribeEvent (bindable);\n\n\t\t\tbindable.BindingContextChanged -= HandleBindingContextChanged;\n\t\t\tBindingContext = null;\n\n\t\t\tbase.OnDetachingFrom (bindable);\n\t\t}\n```\n\n### \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u3088\u308b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u767b\u9332\n\n\u30a2\u30bf\u30c3\u30c1\u3055\u308c\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306e\u578b\u60c5\u5831\u304b\u3089`GetEvent`\u30e1\u30bd\u30c3\u30c9\u3067XAML\u304b\u3089\u540d\u524d\u3067\u6307\u5b9a\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u306e`EventInfo`\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u3053\u306eEventInfo\u306f\u89e3\u9664\u3059\u308b\u6642\u306b\u4f7f\u3046\u306e\u3067\u4fdd\u6301\u3057\u307e\u3059\u3002\n\nEventInfo\u304b\u3089`GetAddMethod`\u30e1\u30bd\u30c3\u30c9\u3067Add\u30e1\u30bd\u30c3\u30c9\u3092\u53d6\u5f97\u3057\u3066\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u30a4\u30d9\u30f3\u30c8\u3092\u6301\u3063\u3066\u3044\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c#:\n\t\tprivate void SubscribeEvent(object associatedObject)\n\t\t{\n\t\t\t// \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067EventInfo\u3092\u53d6\u5f97\n\t\t\tthis.subscribingEvent = associatedObject.GetType ().GetEvent (EventName);\n\t\t\tif (subscribingEvent == null)\n\t\t\t\treturn;\n\n\t\t\t// \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\n\t\t\t// (bindable.EventName += Invoke \u306b\u76f8\u5f53)\n\t\t\tsubscribingEvent.GetAddMethod ().Invoke (associatedObject, new[]{ this.Handler } );\n\t\t}\n```\n\n### \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\n\n\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u578b\u306f`(object sender, EventArgs e)`\u3092\u5f15\u6570\u306b\u3068\u308b`EventHandler`\u578b\u3067\u3059\u3002\u3053\u306e\u578b\u306b\u3059\u308b\u3053\u3068\u3067`event EventHandler<T>`\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u5168\u3066\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u767b\u9332\u3067\u304d\u307e\u3059\u3002CallMethod\u3092\u767a\u706b\u3055\u305b\u305f\u3044\u3060\u3051\u306a\u306e\u3067\u30ab\u30b9\u30bf\u30e0\u3055\u308c\u305fEventArgs\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\n\n`GetAddMethod`\u3067\u5fc5\u8981\u306aDelegate\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f`Delegate.CreateDelegate`\u30e1\u30bd\u30c3\u30c9\u3067\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u308c\u306f\uff11\u5ea6\u4f5c\u308c\u3070\u5341\u5206\u306a\u306e\u3067\u4f7f\u3044\u307e\u308f\u3057\u307e\u3059\u3002\n\n\n(typeof\u6f14\u7b97\u5b50\u306e\u3088\u3046\u306b\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306bMethodInfo\u3092\u53d6\u5f97\u3067\u304d\u308b\u6f14\u7b97\u5b50\u306f\u3042\u308a\u307e\u305b\u3093\u3088\u306d\uff1f)\n\n```c#:\n\t\t// \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\n\t\tprivate void Invoke(object sender, EventArgs e)\n\t\t{\n\t\t\tCallMethod ();\n\t\t}\n\n\t\t// \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u767b\u9332\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n\t\tprivate Delegate _Handler;\n\t\tprivate Delegate Handler {\n\t\t\tget {\n\t\t\t\tif (_Handler == null)\n\t\t\t\t{\n\t\t\t\t\tvar handlerMethodInfo = \n\t\t\t\t\t\ttypeof(EventTriggerCallMethodBehavior)\n\t\t\t\t\t\t\t.GetMethod(\"Invoke\", BindingFlags.NonPublic | BindingFlags.Instance);\n\n\t\t\t\t\t_Handler = Delegate.CreateDelegate (typeof(EventHandler), this, handlerMethodInfo);\n\t\t\t\t}\n\n\t\t\t\treturn _Handler;\n\t\t\t}\n\t\t}\n```\n\n### \u30bf\u30fc\u30b2\u30c3\u30c8\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\n\nTargetObject\u306e\u578b\u60c5\u5831\u304b\u3089`GetMethod`\u3067MethodName\u306b\u6307\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306eMethodInfo\u3092\u53d6\u5f97\u3001`MethodInfo.Invoke`\u3067\u8d77\u52d5\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u5f15\u6570\u7121\u3057\u306a\u306e\u3067`Invoke`\u306e\u7b2c\uff12\u5f15\u6570\u306f`null`\u306b\u3057\u307e\u3059\u3002\n\n\u672c\u5bb6\u306e`CallMethodAction`\u306b\u6e96\u3058\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001`MethodParameter`\u306e\u3088\u3046\u306aBindableProperty\u3092\u8ffd\u52a0\u3057\u3066\u3082\u3044\u3044\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u306d\u3002\n\n```c#:\n\t\tprotected void CallMethod()\n\t\t{\n\t\t\tif (TargetObject == null ||\n\t\t\t\tstring.IsNullOrEmpty(MethodName))\n\t\t\t\treturn;\n\n\t\t\tvar methodInfo = TargetObject.GetType().GetMethod (MethodName);\n\t\t\tif (methodInfo == null)\n\t\t\t\treturn;\n\n\t\t\tmethodInfo.Invoke (TargetObject, null);\n\t\t}\n```\n\n## \u4f7f\u3063\u3066\u307f\u308b\n\n\u3053\u3093\u306a\u611f\u3058\u306eViewModel\u3092\u4f5c\u3063\u3066...\n\n```c#:\nusing System;\nusing Xamarin.Forms;\n\nnamespace CallMethodSample\n{\n\tpublic class GreetViewModel : BindableObject\n\t{\n\t\tprivate string _Message;\n\t\tpublic string Message {\n\t\t\tget { return _Message; }\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (_Message == value)\n\t\t\t\t\treturn;\n\t\t\t\t_Message = value;\n\t\t\t\tOnPropertyChanged (\"Message\");\n\t\t\t}\n\t\t}\n\n\t\tpublic void Greet()\n\t\t{\n\t\t\tMessage = \"Hello!\";\n\t\t}\n\t}\n}\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306ePage\u3092\u4f5c\u3063\u3066App\u30af\u30e9\u30b9\u306eMainPage\u306b\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\n```xml:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n\t\t\t xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n\t\t\t xmlns:local=\"clr-namespace:CallMethodSample;assembly=CallMethodSample\"\n\t\t\t x:Class=\"CallMethodSample.GreetPage\">\n\t<ContentPage.BindingContext>\n\t\t<local:GreetViewModel />\n\t</ContentPage.BindingContext>\n\t<ContentPage.Content>\n\t\t<StackLayout Orientation=\"Vertical\">\n\t\t\t<Label  VerticalOptions=\"EndAndExpand\"\n\t\t\t\t\tHorizontalOptions=\"CenterAndExpand\"\n\t\t\t\t\tText=\"{Binding Message}\" />\n\t\t\t<Button Text=\"Click me!\"\n\t\t\t\t\tHorizontalOptions=\"CenterAndExpand\"\n\t\t\t\t\tVerticalOptions=\"StartAndExpand\">\n\t\t\t\t<Button.Behaviors>\n\t\t\t\t\t<local:EventTriggerCallMethodBehavior\n\t\t\t\t\t\tEventName=\"Clicked\"\n\t\t\t\t\t\tMethodName=\"Greet\"\n\t\t\t\t\t\tTargetObject=\"{Binding }\" />\n\t\t\t\t</Button.Behaviors>\n\t\t\t</Button>\n\t\t</StackLayout>\n\t</ContentPage.Content>\n</ContentPage>\n```\n\nButton\u306e\u30af\u30ea\u30c3\u30af\u30a4\u30d9\u30f3\u30c8\u306b\u53cd\u5fdc\u3057\u3066Greet\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5909\u308f\u308a\u307e\u3057\u305f\uff01\n\n![IMG_0480.PNG](https://qiita-image-store.s3.amazonaws.com/0/40121/a49f67e3-7869-696e-2fbe-6831d0a8d584.png \"IMG_0480.PNG\") ![IMG_0481.PNG](https://qiita-image-store.s3.amazonaws.com/0/40121/e29207f4-bff2-3e19-4453-188abf12549b.png \"IMG_0481.PNG\")\n\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u52d5\u7684\u30b3\u30fc\u30c9\u751f\u6210\u306f\u884c\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u5b9f\u6a5fiOS\u3067\u3082\u4f7f\u3048\u307e\u3059\u3002(\u753b\u50cf\u306f\u5b9f\u6a5f\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u3067\u3059)\n\n## \u53c2\u8003\n\n[\u65b9\u6cd5 : \u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30ea\u30b2\u30fc\u30c8\u3092\u30d5\u30c3\u30af\u3059\u308b](https://msdn.microsoft.com/ja-jp/library/ms228976%28v=vs.110%29.aspx)\n", "tags": ["C#", "Xaml", "Xamarin", "Xamarin.Forms"]}