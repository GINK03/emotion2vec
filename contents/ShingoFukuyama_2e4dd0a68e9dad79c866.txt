{"context": " More than 1 year has passed since last update.\u95a2\u6570\u5185\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u5909\u6570\u3092\u4e00\u6642\u7684\u306b\u5909\u3048\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30d0\u30c3\u30c9\u30ce\u30a6\u30cf\u30a6\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u500b\u4eba\u7528\u306e\u8a2d\u5b9a\u306b\u306f\u3068\u3066\u3082\u6709\u7528\u3067\u3059\u3002\n\nDynamic scope\n(setq foo 1)\n\n(defun bar1 () foo)\n\n(let ((foo 2))\n  foo                        ; => 2\n  (bar1)                     ; => 2\n  )\n\nfoo                          ; => 1\n(bar1)                       ; => 1\n\n\u4e00\u6642\u7684\u306b\u95a2\u6570bar\u5185\u306e\u5909\u6570foo\u304c\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570foo\u3067\u306f\u306a\u304f\u3001let\u3067\u5b9a\u7fa9\u3057\u305ffoo\u3092\u898b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u30c0\u30a4\u30ca\u30df\u30c3\u30af\u30b9\u30b3\u30fc\u30d7\u6642\u306e\u307f\u6709\u52b9\u3067\u3059\u306e\u3067\u3001\u30ec\u30ad\u30b7\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306e\u5834\u5408\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\nLexical scope\n;;; -*- lexical-binding: t -*-\n\n(setq foo 1)\n\n(defun bar1 () foo)\n\n(let ((foo 2))\n  foo                        ; => 2\n  (bar1)                     ; => 1\n  )\n\nfoo                          ; => 1\n(bar1)                       ; => 1\n\n\u30ec\u30ad\u30b7\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u3067\u306f\u95a2\u6570bar1\u5185\u306e\u5909\u6570foo\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570foo\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n(1\u884c\u76ee\u306b\u7279\u6b8a\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u3044\u3066\u304a\u304f\u3068\u30ec\u30ad\u30b7\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u306a\u308a\u307e\u3059\u3002)\n\nOverride Inner variables safely\n;;; -*- lexical-binding: t -*-\n\n(setq foo 1)\n\n(defun bar1 () foo)\n\n(let ((_foo foo))\n  (unwind-protect\n      (progn\n        (setq foo 2)\n        foo                   ; => 2\n        (bar1)                ; => 2\n        )\n    (setq foo _foo))\n  )\n\nfoo                           ; => 1\n(bar1)                        ; => 1\n\n\u4e0a\u8a18\u306e\u65b9\u6cd5\u306a\u3089\u30c0\u30a4\u30ca\u30df\u30c3\u30af/\u30ec\u30ad\u30b7\u30ab\u30eb\u4e21\u65b9\u306e\u30b9\u30b3\u30fc\u30d7\u3067\u30bb\u30fc\u30d5\u3067\u3059\u306d\u3002\n\u4e00\u6642\u7684\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570foo\u306e\u5024\u3092\u5909\u66f4\u3057\u3066\u3001\u6700\u5f8c\u306bunwind-protect\u306b\u3088\u3063\u3066\u78ba\u5b9f\u306b\u5143\u306e\u5024\u306b\u623b\u3057\u3066\u3044\u307e\u3059\u3002\n\nMacro\n;;; -*- coding: utf-8; lexical-binding: t -*-\n\n(require 'cl-lib)\n(defmacro overriding-let (bindings &rest body)\n  (declare (indent 1))\n  (let (original-pairs\n        local-pairs\n        overriding-targets\n        (bin `,bindings))\n    (cl-dotimes (x (length bin))\n      (let ((b (nth x bin))\n            s v)\n        (cl-typecase b\n          (cons (setq s (or (ignore-errors (car b)) b))\n                (if (boundp s)\n                    (progn\n                      (setq v (symbol-value s))\n                      (setq original-pairs (cons (cons s v) original-pairs))\n                      (setq overriding-targets (cons b overriding-targets)))\n                  (setq local-pairs (cons b local-pairs))))\n          (symbol\n           (setq local-pairs (cons b local-pairs)))\n          (t (error \"Binding format error\")))))\n\n    `(let ,local-pairs\n       (unwind-protect\n           (progn\n             (mapc (lambda (x)\n                     (let ((s (intern (symbol-name (car x))))\n                           (v (car (cdr x))))\n                       (set s v)))\n                   ',overriding-targets)\n             ,@body)\n         (mapc (lambda (x)\n                 (let ((s (car x))\n                       (v (cdr x)))\n                   (set s v)))\n               ',original-pairs)))))\n\n\n(setq foo1 1)\n(setq foo2 9)\n\n(defun bar1 () foo1)\n(defun bar2 () foo2)\n\n(overriding-let ((foo1 2)\n                 (foo2 99)\n                 (foo3 30)  ;; \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u306f\u306a\u3044\u306e\u3067\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3068\u3057\u3066\u6271\u3046\n                 foo4)      ;; \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u306f\u306a\u3044\u306e\u3067\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3068\u3057\u3066\u6271\u3046 (\u5ba3\u8a00\u306e\u307f)\n  (bar1)                       ; => 2\n  (bar2)                       ; => 99\n  foo1                         ; => 2\n  foo2                         ; => 99\n  foo3                         ; => 30\n  foo4                         ; => nil\n  )\n\n(bar1)                         ; => 1\n(bar2)                         ; => 9\nfoo1                           ; => 1\nfoo2                           ; => 9\n(ignore-errors foo3)           ; => nil\n(ignore-errors foo4)           ; => nil\n\n\u30de\u30af\u30ed\u5316\u3057\u3066\u8a2d\u5b9a\u306b\u66f8\u3044\u3066\u304a\u304f\u3068\u3001\u9762\u5012\u306a\u8a18\u8ff0\u3092\u6e1b\u3089\u3057\u3066\u30b9\u30de\u30fc\u30c8\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n\u95a2\u6570\u5185\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u5909\u6570\u3092\u4e00\u6642\u7684\u306b\u5909\u3048\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30d0\u30c3\u30c9\u30ce\u30a6\u30cf\u30a6\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u500b\u4eba\u7528\u306e\u8a2d\u5b9a\u306b\u306f\u3068\u3066\u3082\u6709\u7528\u3067\u3059\u3002\n\n## Dynamic scope\n\n```el\n(setq foo 1)\n\n(defun bar1 () foo)\n\n(let ((foo 2))\n  foo                        ; => 2\n  (bar1)                     ; => 2\n  )\n\nfoo                          ; => 1\n(bar1)                       ; => 1\n```\n\n\u4e00\u6642\u7684\u306b\u95a2\u6570`bar`\u5185\u306e\u5909\u6570`foo`\u304c\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570`foo`\u3067\u306f\u306a\u304f\u3001`let`\u3067\u5b9a\u7fa9\u3057\u305f`foo`\u3092\u898b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u30c0\u30a4\u30ca\u30df\u30c3\u30af\u30b9\u30b3\u30fc\u30d7\u6642\u306e\u307f\u6709\u52b9\u3067\u3059\u306e\u3067\u3001\u30ec\u30ad\u30b7\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306e\u5834\u5408\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n## Lexical scope\n\n```el\n;;; -*- lexical-binding: t -*-\n\n(setq foo 1)\n\n(defun bar1 () foo)\n\n(let ((foo 2))\n  foo                        ; => 2\n  (bar1)                     ; => 1\n  )\n\nfoo                          ; => 1\n(bar1)                       ; => 1\n```\n\n\u30ec\u30ad\u30b7\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u3067\u306f\u95a2\u6570`bar1`\u5185\u306e\u5909\u6570`foo`\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570`foo`\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n(1\u884c\u76ee\u306b\u7279\u6b8a\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u3044\u3066\u304a\u304f\u3068\u30ec\u30ad\u30b7\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u306a\u308a\u307e\u3059\u3002)\n\n## Override Inner variables safely\n\n```el\n;;; -*- lexical-binding: t -*-\n\n(setq foo 1)\n\n(defun bar1 () foo)\n\n(let ((_foo foo))\n  (unwind-protect\n      (progn\n        (setq foo 2)\n        foo                   ; => 2\n        (bar1)                ; => 2\n        )\n    (setq foo _foo))\n  )\n\nfoo                           ; => 1\n(bar1)                        ; => 1\n```\n\n\u4e0a\u8a18\u306e\u65b9\u6cd5\u306a\u3089\u30c0\u30a4\u30ca\u30df\u30c3\u30af/\u30ec\u30ad\u30b7\u30ab\u30eb\u4e21\u65b9\u306e\u30b9\u30b3\u30fc\u30d7\u3067\u30bb\u30fc\u30d5\u3067\u3059\u306d\u3002\n\u4e00\u6642\u7684\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570`foo`\u306e\u5024\u3092\u5909\u66f4\u3057\u3066\u3001\u6700\u5f8c\u306b`unwind-protect`\u306b\u3088\u3063\u3066\u78ba\u5b9f\u306b\u5143\u306e\u5024\u306b\u623b\u3057\u3066\u3044\u307e\u3059\u3002\n\n## Macro\n\n```el\n;;; -*- coding: utf-8; lexical-binding: t -*-\n\n(require 'cl-lib)\n(defmacro overriding-let (bindings &rest body)\n  (declare (indent 1))\n  (let (original-pairs\n        local-pairs\n        overriding-targets\n        (bin `,bindings))\n    (cl-dotimes (x (length bin))\n      (let ((b (nth x bin))\n            s v)\n        (cl-typecase b\n          (cons (setq s (or (ignore-errors (car b)) b))\n                (if (boundp s)\n                    (progn\n                      (setq v (symbol-value s))\n                      (setq original-pairs (cons (cons s v) original-pairs))\n                      (setq overriding-targets (cons b overriding-targets)))\n                  (setq local-pairs (cons b local-pairs))))\n          (symbol\n           (setq local-pairs (cons b local-pairs)))\n          (t (error \"Binding format error\")))))\n\n    `(let ,local-pairs\n       (unwind-protect\n           (progn\n             (mapc (lambda (x)\n                     (let ((s (intern (symbol-name (car x))))\n                           (v (car (cdr x))))\n                       (set s v)))\n                   ',overriding-targets)\n             ,@body)\n         (mapc (lambda (x)\n                 (let ((s (car x))\n                       (v (cdr x)))\n                   (set s v)))\n               ',original-pairs)))))\n\n\n(setq foo1 1)\n(setq foo2 9)\n\n(defun bar1 () foo1)\n(defun bar2 () foo2)\n\n(overriding-let ((foo1 2)\n                 (foo2 99)\n                 (foo3 30)  ;; \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u306f\u306a\u3044\u306e\u3067\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3068\u3057\u3066\u6271\u3046\n                 foo4)      ;; \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3067\u306f\u306a\u3044\u306e\u3067\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3068\u3057\u3066\u6271\u3046 (\u5ba3\u8a00\u306e\u307f)\n  (bar1)                       ; => 2\n  (bar2)                       ; => 99\n  foo1                         ; => 2\n  foo2                         ; => 99\n  foo3                         ; => 30\n  foo4                         ; => nil\n  )\n\n(bar1)                         ; => 1\n(bar2)                         ; => 9\nfoo1                           ; => 1\nfoo2                           ; => 9\n(ignore-errors foo3)           ; => nil\n(ignore-errors foo4)           ; => nil\n```\n\n\u30de\u30af\u30ed\u5316\u3057\u3066\u8a2d\u5b9a\u306b\u66f8\u3044\u3066\u304a\u304f\u3068\u3001\u9762\u5012\u306a\u8a18\u8ff0\u3092\u6e1b\u3089\u3057\u3066\u30b9\u30de\u30fc\u30c8\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n", "tags": ["Emacs", "emacs-lisp"]}