{"context": " More than 1 year has passed since last update.\nJava\u306e\u6b63\u898f\u8868\u73fe.java\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.*;\nimport org.junit.Test;\n\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Stream;\n\npublic class Java\u306e\u6b63\u898f\u8868\u73fe {\n\n    /**\n     * matches()\u306f\u3001\u6587\u5b57\u5217\u5168\u4f53\u304c\u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3057\u3066\u3044\u308b\u304b<br/>\n     * find()\u306f\u3001\u6587\u5b57\u5217\u306e\u4e00\u90e8\u304c\u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3057\u3066\u3044\u308b\u304b\n     */\n    @Test\n    public void matchsfind(){\n\n        /***   ABC     ***/\n        Pattern pattern = Pattern.compile(\"ABC\");\n\n        Matcher matcher = pattern.matcher(\"ABC\");\n        assertThat(matcher.matches(), is(true));\n\n        matcher = pattern.matcher(\"ABC\");\n        assertThat(matcher.find(), is(true));\n\n        // AABC\n        matcher = pattern.matcher(\"AABC\");\n        assertThat(matcher.matches(), is(false));\n\n        matcher = pattern.matcher(\"AABC\");\n        assertThat(matcher.find(), is(true));\n\n        // ABCA\n        matcher = pattern.matcher(\"ABCA\");\n        assertThat(matcher.matches(), is(false));\n\n        matcher = pattern.matcher(\"ABCA\");\n        assertThat(matcher.find(), is(true));\n\n        // ABD\n        matcher = pattern.matcher(\"ABD\");\n        assertThat(matcher.matches(), is(false));\n\n        matcher = pattern.matcher(\"ABD\");\n        assertThat(matcher.find(), is(false));\n\n        /***   ^ABC$     ***/\n        pattern = Pattern.compile(\"^ABC$\");\n\n        // ABC\n        matcher = pattern.matcher(\"ABC\");\n        assertThat(matcher.matches(), is(true));\n\n        matcher = pattern.matcher(\"ABC\");\n        assertThat(matcher.find(), is(true));\n\n        // ABCD\n        matcher = pattern.matcher(\"ABCD\");\n        assertThat(matcher.matches(), is(false));\n\n        matcher = pattern.matcher(\"ABCD\");\n        assertThat(matcher.find(), is(false));\n    }\n\n    /**\n     * \u6b63\u898f\u8868\u73fe\u306e\u57fa\u790e(\u5143\u30cd\u30bf:http://java-reference.sakuraweb.com/java_string_regex.html)\n     */\n    @Test\n    public void \u4efb\u610f\u306e\u6587\u5b57\u3068\u7e70\u308a\u8fd4\u3057(){\n\n        Pattern pattern;\n\n        //.: \u4efb\u610f\u306e\uff11\u6587\u5b57\u306b\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"a.c\");\n        assertThat(pattern.matcher(\"abc\").matches(), is(true));\n        assertThat(pattern.matcher(\"abbc\").matches(), is(false));\n        assertThat(pattern.matcher(\"ac\").matches(), is(false));\n\n        //?: \u76f4\u524d\u306e\u6587\u5b57\u304c0\u500b\u307e\u305f\u306f1\u500b\u306b\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"^A?\");\n        assertThat(pattern.matcher(\"\").matches(), is(true));\n        assertThat(pattern.matcher(\"A\").matches(), is(true));\n        assertThat(pattern.matcher(\"AA\").matches(), is(false));\n        assertThat(pattern.matcher(\"B\").matches(), is(false));\n\n        //*: \u76f4\u524d\u306e\u6587\u5b57\u304c0\u500b\u4ee5\u4e0a\u306b\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"^A*\");\n        assertThat(pattern.matcher(\"\").matches(), is(true));\n        assertThat(pattern.matcher(\"A\").matches(), is(true));\n        assertThat(pattern.matcher(\"AA\").matches(), is(true));\n        assertThat(pattern.matcher(\"B\").matches(), is(false));\n\n        //+: \u76f4\u524d\u306e\u6587\u5b57\u304c1\u500b\u4ee5\u4e0a\u306b\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"^A+\");\n        assertThat(pattern.matcher(\"A\").matches(), is(true));\n        assertThat(pattern.matcher(\"AA\").matches(), is(true));\n        assertThat(pattern.matcher(\"B\").matches(), is(false));\n        assertThat(pattern.matcher(\"\").matches(), is(false));\n\n        //{n}:\u76f4\u524d\u306e\u6587\u5b57\u306bn\u56de\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"^A{3}\");\n        assertThat(pattern.matcher(\"AAA\").matches(), is(true));\n        assertThat(pattern.matcher(\"AA\").matches(), is(false));\n        assertThat(pattern.matcher(\"AAAA\").matches(), is(false));\n\n        //{n,}:\u76f4\u524d\u306e\u6587\u5b57\u306bn\u56de\u4ee5\u4e0a\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"^A{3,}\");\n        assertThat(pattern.matcher(\"AAA\").matches(), is(true));\n        assertThat(pattern.matcher(\"AAAA\").matches(), is(true));\n        assertThat(pattern.matcher(\"AA\").matches(), is(false));\n\n        //{n,m}:\u76f4\u524d\u306e\u6587\u5b57\u306bn\u56de\u4ee5\u4e0am\u56de\u4ee5\u4e0b\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"^A{3,4}\");\n        assertThat(pattern.matcher(\"AAA\").matches(), is(true));\n        assertThat(pattern.matcher(\"AAAA\").matches(), is(true));\n        assertThat(pattern.matcher(\"AA\").matches(), is(false));\n        assertThat(pattern.matcher(\"AAAAA\").matches(), is(false));\n    }\n\n    @Test\n    public void \u6700\u521d\u3068\u6700\u5f8c(){\n\n        Pattern pattern;\n\n        // \u300c^\u300d\u5148\u982d\u306b\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"^ab\");\n        assertThat(pattern.matcher(\"abcd\").find(), is(true));\n        assertThat(pattern.matcher(\"cdab\").find(), is(false));\n\n        //$: \u672b\u5c3e\u306b\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"ab$\");\n        assertThat(pattern.matcher(\"cdab\").find(), is(true));\n        assertThat(pattern.matcher(\"abcd\").find(), is(false));\n    }\n\n    @Test\n    public void \u5b9a\u7fa9\u6e08\u307f\u306e\u6587\u5b57\u30af\u30e9\u30b9(){\n\n        Pattern pattern;\n\n        //\\d: \u534a\u89d2\u6570\u5024(0\uff5e9)\u306b\u30de\u30c3\u30c1\u3059\u308b \u203b [0-9]\u3068\u540c\u3058\n        pattern = Pattern.compile(\"\\\\d\");\n        assertThat(pattern.matcher(\"0123\").find(), is(true));\n        assertThat(pattern.matcher(\"\uff10\uff11\uff12\uff13\").find(), is(false));\n        assertThat(pattern.matcher(\"abc\").find(), is(false));\n\n        //\\D: \u534a\u89d2\u6570\u5024(0\uff5e9)\u4ee5\u5916\u306b\u30de\u30c3\u30c1\u3059\u308b \u203b [^0-9]\u3068\u540c\u3058\n        pattern = Pattern.compile(\"\\\\D\");\n        assertThat(pattern.matcher(\"\uff10\uff11\uff12\uff13\").find(), is(true));\n        assertThat(pattern.matcher(\"abc\").find(), is(true));\n        assertThat(pattern.matcher(\"0123\").find(), is(false));\n\n        //\\w: \u534a\u89d2\u82f1\u6570\u5024(0\uff5e9\u3001a\uff5ez\u3001A\uff5eZ\u3001_)\u306b\u30de\u30c3\u30c1\u3059\u308b \u203b [0-9a-zA-Z_]\u3068\u540c\u3058\n        pattern = Pattern.compile(\"\\\\w\");\n        assertThat(pattern.matcher(\"012_AbC\").find(), is(true));\n        assertThat(pattern.matcher(\"\uff11\uff12\uff21\uff42\").find(), is(false));\n        assertThat(pattern.matcher(\"#$%&\").find(), is(false));\n\n        // \\W: \u534a\u89d2\u82f1\u6570\u5024(0\uff5e9\u3001a\uff5ez\u3001A\uff5eZ\u3001_)\u4ee5\u5916\u306b\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"\\\\W\");\n        assertThat(pattern.matcher(\"\uff11\uff12\uff21\uff42\").find(), is(true));\n        assertThat(pattern.matcher(\"#$%&\").find(), is(true));\n        assertThat(pattern.matcher(\"012_AbC\").find(), is(false));\n\n        // \\s: \u7a7a\u767d\u6587\u5b57:[ \\t\\n\\x0B\\f\\r]\n        pattern = Pattern.compile(\"\\\\s\");\n        assertThat(pattern.matcher(\" \").find(), is(true));\n        assertThat(pattern.matcher(\"A C\").find(), is(true));\n        assertThat(pattern.matcher(\"\").find(), is(false));\n        assertThat(pattern.matcher(\"ABC\").find(), is(false));\n    }\n\n    @Test\n    public void \u30b0\u30eb\u30fc\u30d7\u3068\u7d44\u307f\u5408\u308f\u305b(){\n\n        Pattern pattern;\n        //[ ]:\u3044\u305a\u308c\u304b\u306e\u6587\u5b57\u3068\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"[ABC]\");\n        assertThat(pattern.matcher(\"A\").find(), is(true));\n        assertThat(pattern.matcher(\"B\").find(), is(true));\n        assertThat(pattern.matcher(\"D\").find(), is(false));\n\n        //( ):\uff11\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u3068\u3057\u3066\u6271\u3046\n        pattern = Pattern.compile(\"(ABC)\");\n        assertThat(pattern.matcher(\"ABC\").find(), is(true));\n        assertThat(pattern.matcher(\"CBA\").find(), is(false));\n\n        //|:\u3044\u305a\u308c\u304b\u3068\u30de\u30c3\u30c1\u3059\u308b\n        pattern = Pattern.compile(\"ABC|DEF\");\n        assertThat(pattern.matcher(\"ABC\").find(), is(true));\n        assertThat(pattern.matcher(\"DEF\").find(), is(true));\n        assertThat(pattern.matcher(\"CBA\").find(), is(false));\n        assertThat(pattern.matcher(\"DE\").find(), is(false));\n\n        //-:\u7bc4\u56f2\u3092\u6307\u5b9a\u3059\u308b\n        pattern = Pattern.compile(\"[3-7]\");\n        assertThat(pattern.matcher(\"3\").find(), is(true));\n        assertThat(pattern.matcher(\"5\").find(), is(true));\n        assertThat(pattern.matcher(\"7\").find(), is(true));\n        assertThat(pattern.matcher(\"7.1\").find(), is(true));\n        assertThat(pattern.matcher(\"55\").find(), is(true));\n        assertThat(pattern.matcher(\"2\").find(), is(false));\n        assertThat(pattern.matcher(\"1\").find(), is(false));\n\n        //^:\u5426\u5b9a\uff08[ ]\u306e\u4e2d\u3067\u4f7f\u7528\u3059\u308b\uff09\n        pattern = Pattern.compile(\"[^AB]\");\n        assertThat(pattern.matcher(\"C\").find(), is(true));\n        assertThat(pattern.matcher(\"ABC\").find(), is(true));\n        assertThat(pattern.matcher(\"A\").find(), is(false));\n        assertThat(pattern.matcher(\"B\").find(), is(false));\n\n        //&&:\u304b\u3064\n        pattern = Pattern.compile(\"[0-9&&[^4]]\");\n        assertThat(pattern.matcher(\"0\").find(), is(true));\n        assertThat(pattern.matcher(\"5\").find(), is(true));\n        assertThat(pattern.matcher(\"4\").find(), is(false));\n    }\n\n    @Test\n    public void group(){\n\n        //                                          012345678901234\n        Matcher m = Pattern.compile(\"1.3\").matcher(\"abc123def1B3ghi\");\n\n        // \u901a\u5e38\u306fwhile(m.find)\u3067\u5b9f\u65bd\u3059\u308b\n        assertThat(m.find(), is(true));\n        assertThat(m.group(),is(\"123\"));\n        assertThat(m.group(0),is(\"123\"));\n        assertThat(m.start(), is(3));\n        assertThat(m.end(), is(6));\n\n        assertThat(m.find(), is(true));\n        assertThat(m.group(),is(\"1B3\"));\n        assertThat(m.group(0),is(\"1B3\"));\n        assertThat(m.start(), is(9));\n        assertThat(m.end(), is(12));\n\n        assertThat(m.find(), is(false));\n    }\n\n    @Test\n    public void group\u8907\u6570(){\n\n        //\u90f5\u4fbf\u756a\u53f7\u306e\u6b63\u898f\u8868\u73fe\n        Pattern pattern = Pattern.compile(\"(\\\\d{3})-(\\\\d{4})\");\n\n        Matcher matcher = pattern.matcher(\"123-4567\");\n        assertThat(matcher.matches(), is(true));\n\n        assertThat(matcher.groupCount(), is(2));\n        assertThat(matcher.group(0), is(\"123-4567\"));\n        assertThat(matcher.group(1), is(\"123\"));\n        assertThat(matcher.group(2), is(\"4567\"));\n\n\n        matcher = pattern.matcher(\"123-4567\");\n        assertThat(matcher.find(), is(true));\n    }\n\n    @Test\n    public void \u6642\u523b\u30c1\u30a7\u30c3\u30af(){\n\n        Pattern pattern = Pattern.compile(\"([0-2]?[0-9]):([0-9]{2})\");\n\n        Matcher matcher = pattern.matcher(\"12:00\");\n\n        if (matcher.find()){\n            int test= 100 * Integer.parseInt(matcher.group(1)) + Integer.parseInt(matcher.group(2));\n            assertThat(test, is(1200));\n        }\n\n        assertThat(pattern.matcher(\"1:30\").matches(), is(true));\n        assertThat(pattern.matcher(\"01:30\").matches(), is(true));\n        assertThat(pattern.matcher(\"1:00\").matches(), is(true));\n        assertThat(pattern.matcher(\"25:45\").matches(), is(true));\n\n        assertThat(pattern.matcher(\"0145\").matches(), is(false));\n        assertThat(pattern.matcher(\"A1:45\").matches(), is(false));\n        assertThat(pattern.matcher(\":45\").matches(), is(false));\n        assertThat(pattern.matcher(\"01:\").matches(), is(false));\n        assertThat(pattern.matcher(\"01:1\").matches(), is(false));\n        assertThat(pattern.matcher(\"01:123\").matches(), is(false));\n\n    }\n\n    @Test\n    public void \u30ab\u30c3\u30b3(){\n\n        // \u300c\u4ea4\u4ee3(\u6c0f\u540d)\u300d\u306b\u30d2\u30c3\u30c8\u3057\u3066\u3001\u6c0f\u540d\u306e\u307f\u3092\u53d6\u5f97\u3057\u305f\u3044\n        //  \u6b63\u898f\u8868\u73fe:\u4ea4\u4ee3\\(([^)]*)\\)\n        //               \\(       \\): \u30ab\u30c3\u30b3\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306e\u3067\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u306b\\\u3092\u4ed8\u3051\u3066\u3044\u308b\n        //                            \u6b63\u898f\u8868\u73fe\u3068Java\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u30bd\u30fc\u30b9\u3067\u306f\u300c\\\\(\u300d\u3068\u306a\u308b\n        //                 (     )  : \u30b0\u30eb\u30fc\u30d7\u306e()\n        //                  [^)]*   :\u300c)\u300d\u4ee5\u5916\u306e\u6587\u5b57\u306e\u9023\u7d9a\u3002\u300c)\u300d\u306e\u524d\u307e\u3067\u306e\u6587\u5b57\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\n        //                            []\u5185\u306e\u30ab\u30c3\u30b3\u306b\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u304c\u4e0d\u8981\u3089\u3057\u3044\u3001\u3001\u3001\n\n        Pattern ptnRelacement = Pattern.compile(\"\u4ea4\u4ee3\\\\(([^)]*)\\\\)\");\n\n        Matcher matcher = ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\u3046)\");\n        assertThat(matcher.matches(), is(true));\n        assertThat(matcher.group(), is(\"\u4ea4\u4ee3(\u3042\u3044\u3046)\"));\n        assertThat(matcher.group(1), is(\"\u3042\u3044\u3046\"));\n\n        assertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\u3046)\").matches(), is(true));\n        assertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3\u3042\u3044\u3046)\").matches(), is(false));\n        assertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\u3046\").matches(), is(false));\n\n\n        // \u3061\u3087\u3063\u3068\u30c6\u30b9\u30c8\n        ptnRelacement = Pattern.compile(\"\u4ea4\u4ee3\\\\(([^\\\\)]*)\\\\)\");\n        matcher = ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\\\\\u3046)\");\n        assertThat(matcher.matches(), is(true));\n        assertThat(matcher.group(), is(\"\u4ea4\u4ee3(\u3042\u3044\\\\\u3046)\"));\n        assertThat(matcher.group(1), is(\"\u3042\u3044\\\\\u3046\"));\n\n        ptnRelacement = Pattern.compile(\"\u4ea4\u4ee3\\\\(([^\\\\\\\\)]*)\\\\)\");\n        assertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\u3046)\").matches(), is(true));\n        assertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\\\\\u3046)\").matches(), is(false));\n        assertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3())\").matches(), is(false));\n\n    }\n\n\n    @Test\n    public void \u65e5\u672c\u8a9e\u30c6\u30ad\u30b9\u30c8\u3078\u306e\u30de\u30c3\u30c1(){\n\n        Pattern pattern;\n\n        // \u3072\u3089\u304c\u306a\n        pattern = Pattern.compile(\"[\\u3040-\\u309F]\");\n        assertThat(pattern.matcher(\"\u3042\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u3093\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u3070\").matches(), is(true));\n\n        assertThat(pattern.matcher(\"A\").matches(), is(false));\n        assertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n        assertThat(pattern.matcher(\"\uff71\").matches(), is(false));\n\n        // \u5168\u89d2\u30ab\u30bf\u30ab\u30ca\n        pattern = Pattern.compile(\"[\\u30A0-\\u30FF]\");\n        assertThat(pattern.matcher(\"\u30a2\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u30f3\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u30f4\").matches(), is(true));\n\n        assertThat(pattern.matcher(\"A\").matches(), is(false));\n        assertThat(pattern.matcher(\"\u3042\").matches(), is(false));\n        assertThat(pattern.matcher(\"\uff71\").matches(), is(false));\n\n        // \u534a\u89d2\u30ab\u30bf\u30ab\u30ca\n        pattern = Pattern.compile(\"[\\uFF61-\\uFF9F]\");\n        assertThat(pattern.matcher(\"\uff71\").matches(), is(true));\n        assertThat(pattern.matcher(\"\uff9d\").matches(), is(true));\n        assertThat(pattern.matcher(\"\uff9e\").matches(), is(true)); // \uff73\uff9e\uff67\u306e\u70b9\u3005\n\n        assertThat(pattern.matcher(\"A\").matches(), is(false));\n        assertThat(pattern.matcher(\"\u3042\").matches(), is(false));\n        assertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n\n        // \u6f22\u5b57\n        pattern = Pattern.compile(\"[\\u4E00-\\u9FFF]\");\n        assertThat(pattern.matcher(\"\u4e9c\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u4e21\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u5ee3\").matches(), is(true));\n\n        assertThat(pattern.matcher(\"A\").matches(), is(false));\n        assertThat(pattern.matcher(\"\u3042\").matches(), is(false));\n        assertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n        assertThat(pattern.matcher(\"\uff71\").matches(), is(false));\n    }\n\n    /**\n     * ?: \u6700\u77ed\u4e00\u81f4\u6570\u91cf\u5b50<br/>\n     * \u5143\u30cd\u30bf: http://www.javazuki.com/tag/\u6b63\u898f\u8868\u73fe\n     */\n    @Test\n    public void \u6b32\u5f35\u3089\u306a\u3044\u7e70\u308a\u8fd4\u3057(){\n\n        // \u901a\u5e38\u306e\u7e70\u308a\u8fd4\u3057\u3067\u306f\u3067\u304d\u308b\u9650\u308a\u305f\u304f\u3055\u3093\u30de\u30c3\u30c1\u3055\u305b\u3088\u3046\u3068\u3059\u308b\u3002\n        // (\u3044\u308f\u3086\u308b\u6b32\u5f35\u308a\u306a\u7e70\u308a\u8fd4\u3057)\n        Pattern pattern = Pattern.compile(\"<li>.*</li>\");\n        Matcher matcher = pattern.matcher(\"<li>baseball</li><li>soccer</li>\");\n        assertThat(matcher.matches(), is(true));\n        assertThat(matcher.group(), is(\"<li>baseball</li><li>soccer</li>\"));\n\n        // \u90e8\u5206\u62bd\u51fa\u306a\u3069\u7e70\u308a\u8fd4\u3057\u306e\u7bc4\u56f2\u3092\u72ed\u304f\u3057\u305f\u3044\u5834\u5408\u306f\n        // \uff62?\uff63(\u6700\u77ed\u4e00\u81f4\u6570\u91cf\u5b50)\u3092\u6307\u5b9a\u3059\u308b\u3002\n        pattern = Pattern.compile(\"<li>.*?</li>\");\n        matcher = pattern.matcher(\"<li>baseball</li><li>soccer</li>\");\n        assertThat(matcher.find(), is(true));\n        assertThat(matcher.group(), is(\"<li>baseball</li>\"));\n        assertThat(matcher.find(), is(true));\n        assertThat(matcher.group(), is(\"<li>soccer</li>\"));\n    }\n\n    @Test\n    public void \u7f6e\u63db(){\n        // \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u9023\u756a\u306f\u7dad\u6301\u3057\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u66f4\u3059\u308b\n        Pattern pattern = Pattern.compile(\"[^\\\\d.]+\");\n        Matcher matcher = pattern.matcher(\"IMG001.jpg\");\n        assertThat(matcher.find(), is(true));\n        assertThat(matcher.group(), is(\"IMG\"));\n        assertThat(matcher.replaceFirst(\"\u5199\u771f\"), is(\"\u5199\u771f001.jpg\"));\n        assertThat(matcher.replaceAll(\"\u5199\u771f\"), is(\"\u5199\u771f001.\u5199\u771f\"));\n    }\n\n    @Test\n    public void \u7f6e\u63db\u30ad\u30e3\u30e1\u30eb\u5f0f\u30b9\u30cd\u30fc\u30af\u5f0f(){\n        Pattern pattern = Pattern.compile(\"(^|_)(.)\");\n        Matcher matcher = pattern.matcher(\"this_is_a_pen\");\n        assertThat(matcher.replaceAll(\"\\\\u$2\"), is(\"ThisIsAPen\"));\n    }\n\n    /**\n     * \u300c\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u6b63\u898f\u8868\u73fe\u304c\u3081\u3061\u3083\u3081\u3061\u3083\u9045\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u4ef6\u306b\u3064\u3044\u3066\u300d<br/>\n     * (http://d.hatena.ne.jp/n_shuyo/20111020/regular_expression)<br/>\n     * \u3068\u3044\u3046\u8a18\u4e8b\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u30c6\u30b9\u30c8\u3002\u3053\u306e\u91cf\u3067\u306f\u5b9f\u611f\u3067\u304d\u305a\u3001\u3001\u3001<br/>\n     * \u8981\u7d04: \u9023\u7d9a\u6587\u5b57\u306e\u8868\u73fe\u306b\u300c+\u300d\u3092\u4f7f\u3046\u3088\u308a\u3001{1,64}\u3068\u5236\u9650\u3092\u3064\u3051\u305f\u9023\u7d9a\u6587\u5b57\u306e\u307b\u3046\u304c\u65e9\u3044\u3002<br/>\n     */\n    @Test\n    public void \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u9045\u3044(){\n\n        String[] mailAddresses = {\n                \"a234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n                ,\"b23456789012345678912345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n                ,\"c234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n                ,\"d234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n                ,\"e234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n                ,\"f234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"};\n\n\n        // \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u9023\u756a\u306f\u7dad\u6301\u3057\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u66f4\u3059\u308b\n        Pattern pattern = Pattern.compile(\"[-_.0-9A-Za-z]+@[-_0-9A-Za-z]+[-_.0-9A-Za-z]+\");\n\n        for(String address: mailAddresses){\n            assertThat(pattern.matcher(address).matches(), is(true));\n        }\n    }\n\n    @Test\n    public void \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u9045\u30442(){\n\n        String[] mailAddresses = {\n                \"a234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n                ,\"b23456789012345678912345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n                ,\"c234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n                ,\"d234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n                ,\"e234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n                ,\"f234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"};\n\n\n        // \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u9023\u756a\u306f\u7dad\u6301\u3057\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u66f4\u3059\u308b\n        Pattern pattern = Pattern.compile(\"[-_.0-9A-Za-z]{0,64}@[-_0-9A-Za-z]+[-_.0-9A-Za-z]+\");\n\n        for(String address: mailAddresses){\n            assertThat(pattern.matcher(address).matches(), is(true));\n        }\n    }\n\n    /**\n     * JDK 1.5\u4ee5\u964d<br/>\n     * MatchResult\uff08JDK1.5\u4ee5\u964d\uff09\u306f\u72ec\u7acb\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u5909\u5316\u3057\u306a\u3044\u3002<br/>\n     *\uff08\u305f\u3060\u3057MatchResult\u306fstart/end\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u3082\u30b3\u30d4\u30fc\u3057\u3066\u4fdd\u6301\u3059\u308b\u306e\u3067\u3001start/end\u3057\u304b\u4f7f\u308f\u306a\u3044\u306a\u3089\u3061\u3087\u3063\u3068\u30b3\u30b9\u30c8\u304c\u9ad8\u3044\u304b\u3082\uff09\n     */\n    @Test\n    public void matchResult(){\n\n        //                                          012345678901234\n        Matcher m = Pattern.compile(\"1.3\").matcher(\"abc123def1B3ghi\");\n\n        assertThat(m.find(), is(true));\n        MatchResult result1 = m.toMatchResult();\n        assertThat(result1.group(),is(\"123\"));\n        assertThat(result1.group(0),is(\"123\"));\n        assertThat(result1.start(), is(3));\n        assertThat(result1.end(), is(6));\n\n        assertThat(m.toMatchResult(), is(not(sameInstance(result1))));\n        assertThat(m.toMatchResult(), is(not(sameInstance(result1))));\n\n        assertThat(m.find(), is(true));\n        MatchResult result2 = m.toMatchResult();\n        assertThat(result2.group(),is(\"1B3\"));\n        assertThat(result2.group(0),is(\"1B3\"));\n        assertThat(result2.start(), is(9));\n        assertThat(result2.end(), is(12));\n\n        assertThat(m.find(), is(false));\n    }\n\n    /**\n     * \u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u304c\u5fc5\u8981\u306a\u6587\u5b57:<br/>\n     * \u00a5 * + . ? { } ( ) [ ] ^ $ - |\n     */\n    @Test\n    public void \u30e1\u30bf\u6587\u5b57(){\n        Pattern pattern = Pattern.compile(\"\\\\*\");\n\n        // \u3053\u3061\u3089\u306f\u5b9f\u884c\u30a8\u30e9\u30fc\n        //pattern = Pattern.compile(\"*\");\n\n        Matcher matcher = pattern.matcher(\"*\");\n        assertThat(matcher.matches(), is(true));\n\n        // \u6587\u5b57\u5217\u5185\u306b\u300c\\\u300d\u304c\u3042\u308b\u304b\u5224\u65ad\u3059\u308b\u5834\u5408\u3001\n        // Java\u30bd\u30fc\u30b9\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u3082\u5fc5\u8981\u306a\u305f\u3081\u3001\u300c\\\\\u300d\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u3064\u304d\u306f\u300c\\\\\\\\\u300d\u3068\u306a\u308b\n        // Java\u30bd\u30fc\u30b9\u5185\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3068\u3001Java\u5b9f\u884c\u74b0\u5883\u306e\u6b63\u898f\u8868\u73fe\u3067\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3092\u8003\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n        // (\u55da\u547c\u3001\u3084\u3084\u3053\u3057\u3044)\n        pattern = Pattern.compile(\"\\\\\\\\\");\n        matcher = pattern.matcher(\"\\\\\");\n        assertThat(matcher.find(), is(true));\n    }\n\n    /**\n     * \u53c2\u8003: http://homepage2.nifty.com/jr-kun/hidemaru_qa/4_regulr.html\n     */\n    @Test\n    public void \u30ad\u30e3\u30e9\u30af\u30bf\u30af\u30e9\u30b9(){\n        // \u6570\u5b57\n        Pattern pattern = Pattern.compile(\"[0-9]\");\n        assertThat(pattern.matcher(\"0\").matches(), is(true));\n        assertThat(pattern.matcher(\"9\").matches(), is(true));\n        assertThat(pattern.matcher(\"A\").matches(), is(false));\n\n        // \u5168\u89d2\u3072\u3089\u304c\u306a\n        pattern = Pattern.compile(\"[\u3041-\u3093]\");\n        assertThat(pattern.matcher(\"\u3042\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u3070\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n\n        // \u5168\u89d2\u30ab\u30bf\u30ab\u30ca\n        pattern = Pattern.compile(\"[\u30a1-\u30f6]\");\n        assertThat(pattern.matcher(\"\u30a1\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u30a2\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u3042\").matches(), is(false));\n\n        // \u4efb\u610f\u306e\uff11\u30d0\u30a4\u30c8\u6587\u5b57\n        pattern = Pattern.compile(\"[ -~]\");\n        assertThat(pattern.matcher(\"0\").matches(), is(true));\n        assertThat(pattern.matcher(\"A\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n\n        // \u6f22\u5b57\n        pattern = Pattern.compile(\"[\u4e9c-\u9ed1]\");\n        assertThat(pattern.matcher(\"\u4e9c\").matches(), is(true));\n        assertThat(pattern.matcher(\"\u5ee3\").matches(), is(true));\n        assertThat(pattern.matcher(\"0\").matches(), is(false));\n        assertThat(pattern.matcher(\"A\").matches(), is(false));\n        assertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n    }\n\n    /**\n     * JDK 1.5\u4ee5\u964d<br/>\n     * (\u3088\u304f\u308f\u304b\u3089\u3093\u304c\u3001)\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\n\n     */\n    @Test\n    public void quote(){\n        assertThat(Pattern.quote(\".\"), is(\"\\\\Q.\\\\E\"));\n        assertThat(Pattern.quote(\",\"), is(\"\\\\Q,\\\\E\"));\n        assertThat(Pattern.quote(\"\\\\\"), is(\"\\\\Q\\\\\\\\E\"));\n\n        assertThat(\"a.b.c\".split(\".\").length, is(0));\n        assertThat(\"a.b.c\".split(\"\\\\.\").length, is(3));\n        assertThat(\"a.b.c\".split(Pattern.quote(\".\")).length, is(3));\n    }\n\n    /**\n     * JDK 1.8\u4ee5\u964d\n     */\n    @Test\n    public void group\u540d\u524d\u3092\u6307\u5b9a(){\n\n        //\u96fb\u8a71\u756a\u53f7\u306e\u6b63\u898f\u8868\u73fe\n        Pattern pattern = Pattern.compile(\"0(?<shigai>\\\\d{1,4})-(?<shinai>\\\\d+)-(?<bango>\\\\d{4})\");\n\n        Matcher matcher = pattern.matcher(\"0120-863-5730\");\n        assertThat(matcher.matches(), is(true));\n        assertThat(matcher.groupCount(), is(3));\n\n        assertThat(matcher.group(0), is(\"0120-863-5730\"));\n        assertThat(matcher.group(1), is(\"120\"));\n        assertThat(matcher.group(2), is(\"863\"));\n        assertThat(matcher.group(3), is(\"5730\"));\n\n        assertThat(matcher.group(\"shigai\"), is(\"120\"));\n        assertThat(matcher.group(\"shinai\"), is(\"863\"));\n        assertThat(matcher.group(\"bango\"), is(\"5730\"));\n\n        // \u65e5\u672c\u8a9e\u3092\u4ed8\u3051\u308b\u3068\u3001\u5b9f\u884c\u30a8\u30e9\u30fc(\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u308b)\n        //Pattern pattern2 = Pattern.compile(\"0(?<\u5e02\u5916>\\\\d{1,4})-(?<\u5e02\u5185>\\\\d+)-(?<\u756a\u53f7>\\\\d{4})\");\n    }\n\n    /**\n     * JDK 1.8\u4ee5\u964d<br/>\n     * \u6587\u5b57\u5217\u5168\u4f53\u3067\u3082\u6587\u5b57\u5217\u306e\u4e00\u90e8\u3067\u3082\u30de\u30c3\u30c1\u3057\u3066\u3001\u4fbf\u5229\u305d\u3046<br/>\n     * predicate \u3010\u81ea\u52d5\u3011\u65ad\u8a00\u3059\u308b \u3010\u4ed6\u52d5\u3011\u3014\u884c\u52d5\u3084\u8b70\u8ad6\u306a\u3069\u306e\u3015\u57fa\u790e\u3092\u7f6e\u304f(alc.co.jp\u3088\u308a)\n     */\n    @Test\n    public void asPredicate(){\n\n        Predicate<String> predicate = Pattern.compile(\"ABC\").asPredicate();\n        assertThat(predicate.test(\"ABC\"), is(true));\n        assertThat(predicate.test(\"AABC\"), is(true));\n        assertThat(predicate.test(\"ABCA\"), is(true));\n        assertThat(predicate.test(\"ABD\"), is(false));\n    }\n\n    /**\n     * JDK 1.8\u4ee5\u964d\n     */\n    @Test\n    public void splitAsStream(){\n\n        Pattern pattern = Pattern.compile(\"-\");\n        Stream<String> stream = pattern.splitAsStream(\"0120-863-5730\");\n        assertThat(stream.count(), is(3L));\n    }\n\n}\n\n\n\n```java:Java\u306e\u6b63\u898f\u8868\u73fe.java\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.hamcrest.MatcherAssert.*;\nimport org.junit.Test;\n\nimport java.util.function.Predicate;\nimport java.util.regex.MatchResult;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\nimport java.util.stream.Stream;\n\npublic class Java\u306e\u6b63\u898f\u8868\u73fe {\n\n\t/**\n\t * matches()\u306f\u3001\u6587\u5b57\u5217\u5168\u4f53\u304c\u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3057\u3066\u3044\u308b\u304b<br/>\n\t * find()\u306f\u3001\u6587\u5b57\u5217\u306e\u4e00\u90e8\u304c\u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3057\u3066\u3044\u308b\u304b\n\t */\n\t@Test\n\tpublic void matchsfind(){\n\n\t\t/***   ABC     ***/\n\t\tPattern pattern = Pattern.compile(\"ABC\");\n\n\t\tMatcher matcher = pattern.matcher(\"ABC\");\n\t\tassertThat(matcher.matches(), is(true));\n\n\t\tmatcher = pattern.matcher(\"ABC\");\n\t\tassertThat(matcher.find(), is(true));\n\n\t\t// AABC\n\t\tmatcher = pattern.matcher(\"AABC\");\n\t\tassertThat(matcher.matches(), is(false));\n\n\t\tmatcher = pattern.matcher(\"AABC\");\n\t\tassertThat(matcher.find(), is(true));\n\n\t\t// ABCA\n\t\tmatcher = pattern.matcher(\"ABCA\");\n\t\tassertThat(matcher.matches(), is(false));\n\n\t\tmatcher = pattern.matcher(\"ABCA\");\n\t\tassertThat(matcher.find(), is(true));\n\n\t\t// ABD\n\t\tmatcher = pattern.matcher(\"ABD\");\n\t\tassertThat(matcher.matches(), is(false));\n\n\t\tmatcher = pattern.matcher(\"ABD\");\n\t\tassertThat(matcher.find(), is(false));\n\n\t\t/***   ^ABC$     ***/\n\t\tpattern = Pattern.compile(\"^ABC$\");\n\n\t\t// ABC\n\t\tmatcher = pattern.matcher(\"ABC\");\n\t\tassertThat(matcher.matches(), is(true));\n\n\t\tmatcher = pattern.matcher(\"ABC\");\n\t\tassertThat(matcher.find(), is(true));\n\n\t\t// ABCD\n\t\tmatcher = pattern.matcher(\"ABCD\");\n\t\tassertThat(matcher.matches(), is(false));\n\n\t\tmatcher = pattern.matcher(\"ABCD\");\n\t\tassertThat(matcher.find(), is(false));\n\t}\n\n\t/**\n\t * \u6b63\u898f\u8868\u73fe\u306e\u57fa\u790e(\u5143\u30cd\u30bf:http://java-reference.sakuraweb.com/java_string_regex.html)\n\t */\n\t@Test\n\tpublic void \u4efb\u610f\u306e\u6587\u5b57\u3068\u7e70\u308a\u8fd4\u3057(){\n\n\t\tPattern pattern;\n\n\t\t//.: \u4efb\u610f\u306e\uff11\u6587\u5b57\u306b\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"a.c\");\n\t\tassertThat(pattern.matcher(\"abc\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"abbc\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"ac\").matches(), is(false));\n\n\t\t//?: \u76f4\u524d\u306e\u6587\u5b57\u304c0\u500b\u307e\u305f\u306f1\u500b\u306b\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"^A?\");\n\t\tassertThat(pattern.matcher(\"\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"A\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"AA\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"B\").matches(), is(false));\n\n\t\t//*: \u76f4\u524d\u306e\u6587\u5b57\u304c0\u500b\u4ee5\u4e0a\u306b\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"^A*\");\n\t\tassertThat(pattern.matcher(\"\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"A\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"AA\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"B\").matches(), is(false));\n\n\t\t//+: \u76f4\u524d\u306e\u6587\u5b57\u304c1\u500b\u4ee5\u4e0a\u306b\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"^A+\");\n\t\tassertThat(pattern.matcher(\"A\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"AA\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"B\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\").matches(), is(false));\n\n\t\t//{n}:\u76f4\u524d\u306e\u6587\u5b57\u306bn\u56de\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"^A{3}\");\n\t\tassertThat(pattern.matcher(\"AAA\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"AA\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"AAAA\").matches(), is(false));\n\n\t\t//{n,}:\u76f4\u524d\u306e\u6587\u5b57\u306bn\u56de\u4ee5\u4e0a\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"^A{3,}\");\n\t\tassertThat(pattern.matcher(\"AAA\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"AAAA\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"AA\").matches(), is(false));\n\n\t\t//{n,m}:\u76f4\u524d\u306e\u6587\u5b57\u306bn\u56de\u4ee5\u4e0am\u56de\u4ee5\u4e0b\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"^A{3,4}\");\n\t\tassertThat(pattern.matcher(\"AAA\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"AAAA\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"AA\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"AAAAA\").matches(), is(false));\n\t}\n\n\t@Test\n\tpublic void \u6700\u521d\u3068\u6700\u5f8c(){\n\n\t\tPattern pattern;\n\n\t\t// \u300c^\u300d\u5148\u982d\u306b\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"^ab\");\n\t\tassertThat(pattern.matcher(\"abcd\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"cdab\").find(), is(false));\n\n\t\t//$: \u672b\u5c3e\u306b\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"ab$\");\n\t\tassertThat(pattern.matcher(\"cdab\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"abcd\").find(), is(false));\n\t}\n\n\t@Test\n\tpublic void \u5b9a\u7fa9\u6e08\u307f\u306e\u6587\u5b57\u30af\u30e9\u30b9(){\n\n\t\tPattern pattern;\n\n\t\t//\\d: \u534a\u89d2\u6570\u5024(0\uff5e9)\u306b\u30de\u30c3\u30c1\u3059\u308b \u203b [0-9]\u3068\u540c\u3058\n\t\tpattern = Pattern.compile(\"\\\\d\");\n\t\tassertThat(pattern.matcher(\"0123\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"\uff10\uff11\uff12\uff13\").find(), is(false));\n\t\tassertThat(pattern.matcher(\"abc\").find(), is(false));\n\n\t\t//\\D: \u534a\u89d2\u6570\u5024(0\uff5e9)\u4ee5\u5916\u306b\u30de\u30c3\u30c1\u3059\u308b \u203b [^0-9]\u3068\u540c\u3058\n\t\tpattern = Pattern.compile(\"\\\\D\");\n\t\tassertThat(pattern.matcher(\"\uff10\uff11\uff12\uff13\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"abc\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"0123\").find(), is(false));\n\n\t\t//\\w: \u534a\u89d2\u82f1\u6570\u5024(0\uff5e9\u3001a\uff5ez\u3001A\uff5eZ\u3001_)\u306b\u30de\u30c3\u30c1\u3059\u308b \u203b [0-9a-zA-Z_]\u3068\u540c\u3058\n\t\tpattern = Pattern.compile(\"\\\\w\");\n\t\tassertThat(pattern.matcher(\"012_AbC\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"\uff11\uff12\uff21\uff42\").find(), is(false));\n\t\tassertThat(pattern.matcher(\"#$%&\").find(), is(false));\n\n\t\t// \\W: \u534a\u89d2\u82f1\u6570\u5024(0\uff5e9\u3001a\uff5ez\u3001A\uff5eZ\u3001_)\u4ee5\u5916\u306b\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"\\\\W\");\n\t\tassertThat(pattern.matcher(\"\uff11\uff12\uff21\uff42\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"#$%&\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"012_AbC\").find(), is(false));\n\n\t\t// \\s: \u7a7a\u767d\u6587\u5b57:[ \\t\\n\\x0B\\f\\r]\n\t\tpattern = Pattern.compile(\"\\\\s\");\n\t\tassertThat(pattern.matcher(\" \").find(), is(true));\n\t\tassertThat(pattern.matcher(\"A C\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"\").find(), is(false));\n\t\tassertThat(pattern.matcher(\"ABC\").find(), is(false));\n\t}\n\n\t@Test\n\tpublic void \u30b0\u30eb\u30fc\u30d7\u3068\u7d44\u307f\u5408\u308f\u305b(){\n\n\t\tPattern pattern;\n\t\t//[ ]:\u3044\u305a\u308c\u304b\u306e\u6587\u5b57\u3068\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"[ABC]\");\n\t\tassertThat(pattern.matcher(\"A\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"B\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"D\").find(), is(false));\n\n\t\t//( ):\uff11\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u3068\u3057\u3066\u6271\u3046\n\t\tpattern = Pattern.compile(\"(ABC)\");\n\t\tassertThat(pattern.matcher(\"ABC\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"CBA\").find(), is(false));\n\n\t\t//|:\u3044\u305a\u308c\u304b\u3068\u30de\u30c3\u30c1\u3059\u308b\n\t\tpattern = Pattern.compile(\"ABC|DEF\");\n\t\tassertThat(pattern.matcher(\"ABC\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"DEF\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"CBA\").find(), is(false));\n\t\tassertThat(pattern.matcher(\"DE\").find(), is(false));\n\n\t\t//-:\u7bc4\u56f2\u3092\u6307\u5b9a\u3059\u308b\n\t\tpattern = Pattern.compile(\"[3-7]\");\n\t\tassertThat(pattern.matcher(\"3\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"5\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"7\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"7.1\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"55\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"2\").find(), is(false));\n\t\tassertThat(pattern.matcher(\"1\").find(), is(false));\n\n\t\t//^:\u5426\u5b9a\uff08[ ]\u306e\u4e2d\u3067\u4f7f\u7528\u3059\u308b\uff09\n\t\tpattern = Pattern.compile(\"[^AB]\");\n\t\tassertThat(pattern.matcher(\"C\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"ABC\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"A\").find(), is(false));\n\t\tassertThat(pattern.matcher(\"B\").find(), is(false));\n\n\t\t//&&:\u304b\u3064\n\t\tpattern = Pattern.compile(\"[0-9&&[^4]]\");\n\t\tassertThat(pattern.matcher(\"0\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"5\").find(), is(true));\n\t\tassertThat(pattern.matcher(\"4\").find(), is(false));\n\t}\n\n\t@Test\n\tpublic void group(){\n\n\t\t//                                          012345678901234\n\t\tMatcher m = Pattern.compile(\"1.3\").matcher(\"abc123def1B3ghi\");\n\n\t\t// \u901a\u5e38\u306fwhile(m.find)\u3067\u5b9f\u65bd\u3059\u308b\n\t\tassertThat(m.find(), is(true));\n\t\tassertThat(m.group(),is(\"123\"));\n\t\tassertThat(m.group(0),is(\"123\"));\n\t\tassertThat(m.start(), is(3));\n\t\tassertThat(m.end(), is(6));\n\n\t\tassertThat(m.find(), is(true));\n\t\tassertThat(m.group(),is(\"1B3\"));\n\t\tassertThat(m.group(0),is(\"1B3\"));\n\t\tassertThat(m.start(), is(9));\n\t\tassertThat(m.end(), is(12));\n\n\t\tassertThat(m.find(), is(false));\n\t}\n\n\t@Test\n\tpublic void group\u8907\u6570(){\n\n\t\t//\u90f5\u4fbf\u756a\u53f7\u306e\u6b63\u898f\u8868\u73fe\n\t\tPattern pattern = Pattern.compile(\"(\\\\d{3})-(\\\\d{4})\");\n\n\t\tMatcher matcher = pattern.matcher(\"123-4567\");\n\t\tassertThat(matcher.matches(), is(true));\n\n\t\tassertThat(matcher.groupCount(), is(2));\n\t\tassertThat(matcher.group(0), is(\"123-4567\"));\n\t\tassertThat(matcher.group(1), is(\"123\"));\n\t\tassertThat(matcher.group(2), is(\"4567\"));\n\n\n\t\tmatcher = pattern.matcher(\"123-4567\");\n\t\tassertThat(matcher.find(), is(true));\n\t}\n\n\t@Test\n\tpublic void \u6642\u523b\u30c1\u30a7\u30c3\u30af(){\n\n\t\tPattern pattern = Pattern.compile(\"([0-2]?[0-9]):([0-9]{2})\");\n\n\t\tMatcher matcher = pattern.matcher(\"12:00\");\n\n\t\tif (matcher.find()){\n\t\t\tint test= 100 * Integer.parseInt(matcher.group(1)) + Integer.parseInt(matcher.group(2));\n\t\t\tassertThat(test, is(1200));\n\t\t}\n\n\t\tassertThat(pattern.matcher(\"1:30\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"01:30\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"1:00\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"25:45\").matches(), is(true));\n\n\t\tassertThat(pattern.matcher(\"0145\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"A1:45\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\":45\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"01:\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"01:1\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"01:123\").matches(), is(false));\n\n\t}\n\n\t@Test\n\tpublic void \u30ab\u30c3\u30b3(){\n\n\t\t// \u300c\u4ea4\u4ee3(\u6c0f\u540d)\u300d\u306b\u30d2\u30c3\u30c8\u3057\u3066\u3001\u6c0f\u540d\u306e\u307f\u3092\u53d6\u5f97\u3057\u305f\u3044\n\t\t//  \u6b63\u898f\u8868\u73fe:\u4ea4\u4ee3\\(([^)]*)\\)\n\t\t//               \\(       \\): \u30ab\u30c3\u30b3\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306e\u3067\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u306b\\\u3092\u4ed8\u3051\u3066\u3044\u308b\n\t\t//                            \u6b63\u898f\u8868\u73fe\u3068Java\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u30bd\u30fc\u30b9\u3067\u306f\u300c\\\\(\u300d\u3068\u306a\u308b\n\t\t//                 (     )  : \u30b0\u30eb\u30fc\u30d7\u306e()\n\t\t//                  [^)]*   :\u300c)\u300d\u4ee5\u5916\u306e\u6587\u5b57\u306e\u9023\u7d9a\u3002\u300c)\u300d\u306e\u524d\u307e\u3067\u306e\u6587\u5b57\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\n\t\t//                            []\u5185\u306e\u30ab\u30c3\u30b3\u306b\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u304c\u4e0d\u8981\u3089\u3057\u3044\u3001\u3001\u3001\n\n\t\tPattern ptnRelacement = Pattern.compile(\"\u4ea4\u4ee3\\\\(([^)]*)\\\\)\");\n\n\t\tMatcher matcher = ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\u3046)\");\n\t\tassertThat(matcher.matches(), is(true));\n\t\tassertThat(matcher.group(), is(\"\u4ea4\u4ee3(\u3042\u3044\u3046)\"));\n\t\tassertThat(matcher.group(1), is(\"\u3042\u3044\u3046\"));\n\n\t\tassertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\u3046)\").matches(), is(true));\n\t\tassertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3\u3042\u3044\u3046)\").matches(), is(false));\n\t\tassertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\u3046\").matches(), is(false));\n\n\n\t\t// \u3061\u3087\u3063\u3068\u30c6\u30b9\u30c8\n\t\tptnRelacement = Pattern.compile(\"\u4ea4\u4ee3\\\\(([^\\\\)]*)\\\\)\");\n\t\tmatcher = ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\\\\\u3046)\");\n\t\tassertThat(matcher.matches(), is(true));\n\t\tassertThat(matcher.group(), is(\"\u4ea4\u4ee3(\u3042\u3044\\\\\u3046)\"));\n\t\tassertThat(matcher.group(1), is(\"\u3042\u3044\\\\\u3046\"));\n\n\t\tptnRelacement = Pattern.compile(\"\u4ea4\u4ee3\\\\(([^\\\\\\\\)]*)\\\\)\");\n\t\tassertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\u3046)\").matches(), is(true));\n\t\tassertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3(\u3042\u3044\\\\\u3046)\").matches(), is(false));\n\t\tassertThat(ptnRelacement.matcher(\"\u4ea4\u4ee3())\").matches(), is(false));\n\n\t}\n\n\n\t@Test\n\tpublic void \u65e5\u672c\u8a9e\u30c6\u30ad\u30b9\u30c8\u3078\u306e\u30de\u30c3\u30c1(){\n\n\t\tPattern pattern;\n\n\t\t// \u3072\u3089\u304c\u306a\n\t\tpattern = Pattern.compile(\"[\\u3040-\\u309F]\");\n\t\tassertThat(pattern.matcher(\"\u3042\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u3093\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u3070\").matches(), is(true));\n\n\t\tassertThat(pattern.matcher(\"A\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\uff71\").matches(), is(false));\n\n\t\t// \u5168\u89d2\u30ab\u30bf\u30ab\u30ca\n\t\tpattern = Pattern.compile(\"[\\u30A0-\\u30FF]\");\n\t\tassertThat(pattern.matcher(\"\u30a2\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u30f3\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u30f4\").matches(), is(true));\n\n\t\tassertThat(pattern.matcher(\"A\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\u3042\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\uff71\").matches(), is(false));\n\n\t\t// \u534a\u89d2\u30ab\u30bf\u30ab\u30ca\n\t\tpattern = Pattern.compile(\"[\\uFF61-\\uFF9F]\");\n\t\tassertThat(pattern.matcher(\"\uff71\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\uff9d\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\uff9e\").matches(), is(true)); // \uff73\uff9e\uff67\u306e\u70b9\u3005\n\n\t\tassertThat(pattern.matcher(\"A\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\u3042\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n\n\t\t// \u6f22\u5b57\n\t\tpattern = Pattern.compile(\"[\\u4E00-\\u9FFF]\");\n\t\tassertThat(pattern.matcher(\"\u4e9c\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u4e21\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u5ee3\").matches(), is(true));\n\n\t\tassertThat(pattern.matcher(\"A\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\u3042\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\uff71\").matches(), is(false));\n\t}\n\n\t/**\n\t * ?: \u6700\u77ed\u4e00\u81f4\u6570\u91cf\u5b50<br/>\n\t * \u5143\u30cd\u30bf: http://www.javazuki.com/tag/\u6b63\u898f\u8868\u73fe\n\t */\n\t@Test\n\tpublic void \u6b32\u5f35\u3089\u306a\u3044\u7e70\u308a\u8fd4\u3057(){\n\n\t\t// \u901a\u5e38\u306e\u7e70\u308a\u8fd4\u3057\u3067\u306f\u3067\u304d\u308b\u9650\u308a\u305f\u304f\u3055\u3093\u30de\u30c3\u30c1\u3055\u305b\u3088\u3046\u3068\u3059\u308b\u3002\n\t\t// (\u3044\u308f\u3086\u308b\u6b32\u5f35\u308a\u306a\u7e70\u308a\u8fd4\u3057)\n\t\tPattern pattern = Pattern.compile(\"<li>.*</li>\");\n\t\tMatcher matcher = pattern.matcher(\"<li>baseball</li><li>soccer</li>\");\n\t\tassertThat(matcher.matches(), is(true));\n\t\tassertThat(matcher.group(), is(\"<li>baseball</li><li>soccer</li>\"));\n\n\t\t// \u90e8\u5206\u62bd\u51fa\u306a\u3069\u7e70\u308a\u8fd4\u3057\u306e\u7bc4\u56f2\u3092\u72ed\u304f\u3057\u305f\u3044\u5834\u5408\u306f\n\t\t// \uff62?\uff63(\u6700\u77ed\u4e00\u81f4\u6570\u91cf\u5b50)\u3092\u6307\u5b9a\u3059\u308b\u3002\n\t\tpattern = Pattern.compile(\"<li>.*?</li>\");\n\t\tmatcher = pattern.matcher(\"<li>baseball</li><li>soccer</li>\");\n\t\tassertThat(matcher.find(), is(true));\n\t\tassertThat(matcher.group(), is(\"<li>baseball</li>\"));\n\t\tassertThat(matcher.find(), is(true));\n\t\tassertThat(matcher.group(), is(\"<li>soccer</li>\"));\n\t}\n\n\t@Test\n\tpublic void \u7f6e\u63db(){\n\t\t// \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u9023\u756a\u306f\u7dad\u6301\u3057\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u66f4\u3059\u308b\n\t\tPattern pattern = Pattern.compile(\"[^\\\\d.]+\");\n\t\tMatcher matcher = pattern.matcher(\"IMG001.jpg\");\n\t\tassertThat(matcher.find(), is(true));\n\t\tassertThat(matcher.group(), is(\"IMG\"));\n\t\tassertThat(matcher.replaceFirst(\"\u5199\u771f\"), is(\"\u5199\u771f001.jpg\"));\n\t\tassertThat(matcher.replaceAll(\"\u5199\u771f\"), is(\"\u5199\u771f001.\u5199\u771f\"));\n\t}\n\n\t@Test\n\tpublic void \u7f6e\u63db\u30ad\u30e3\u30e1\u30eb\u5f0f\u30b9\u30cd\u30fc\u30af\u5f0f(){\n\t\tPattern pattern = Pattern.compile(\"(^|_)(.)\");\n\t\tMatcher matcher = pattern.matcher(\"this_is_a_pen\");\n\t\tassertThat(matcher.replaceAll(\"\\\\u$2\"), is(\"ThisIsAPen\"));\n\t}\n\n\t/**\n\t * \u300c\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u6b63\u898f\u8868\u73fe\u304c\u3081\u3061\u3083\u3081\u3061\u3083\u9045\u304f\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u4ef6\u306b\u3064\u3044\u3066\u300d<br/>\n\t * (http://d.hatena.ne.jp/n_shuyo/20111020/regular_expression)<br/>\n\t * \u3068\u3044\u3046\u8a18\u4e8b\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u30c6\u30b9\u30c8\u3002\u3053\u306e\u91cf\u3067\u306f\u5b9f\u611f\u3067\u304d\u305a\u3001\u3001\u3001<br/>\n\t * \u8981\u7d04: \u9023\u7d9a\u6587\u5b57\u306e\u8868\u73fe\u306b\u300c+\u300d\u3092\u4f7f\u3046\u3088\u308a\u3001{1,64}\u3068\u5236\u9650\u3092\u3064\u3051\u305f\u9023\u7d9a\u6587\u5b57\u306e\u307b\u3046\u304c\u65e9\u3044\u3002<br/>\n\t */\n\t@Test\n\tpublic void \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u9045\u3044(){\n\n\t\tString[] mailAddresses = {\n\t\t\t\t\"a234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n\t\t\t\t,\"b23456789012345678912345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n\t\t\t\t,\"c234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n\t\t\t\t,\"d234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n\t\t\t\t,\"e234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n\t\t\t\t,\"f234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"};\n\n\n\t\t// \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u9023\u756a\u306f\u7dad\u6301\u3057\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u66f4\u3059\u308b\n\t\tPattern pattern = Pattern.compile(\"[-_.0-9A-Za-z]+@[-_0-9A-Za-z]+[-_.0-9A-Za-z]+\");\n\n\t\tfor(String address: mailAddresses){\n\t\t\tassertThat(pattern.matcher(address).matches(), is(true));\n\t\t}\n\t}\n\n\t@Test\n\tpublic void \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u9045\u30442(){\n\n\t\tString[] mailAddresses = {\n\t\t\t\t\"a234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n\t\t\t\t,\"b23456789012345678912345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n\t\t\t\t,\"c234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n\t\t\t\t,\"d234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n\t\t\t\t,\"e234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"\n\t\t\t\t,\"f234567890123456789012345678901234567890123456789012345678901234@bbbbbbbbbbbbbb.com\"};\n\n\n\t\t// \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u9023\u756a\u306f\u7dad\u6301\u3057\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u66f4\u3059\u308b\n\t\tPattern pattern = Pattern.compile(\"[-_.0-9A-Za-z]{0,64}@[-_0-9A-Za-z]+[-_.0-9A-Za-z]+\");\n\n\t\tfor(String address: mailAddresses){\n\t\t\tassertThat(pattern.matcher(address).matches(), is(true));\n\t\t}\n\t}\n\n\t/**\n\t * JDK 1.5\u4ee5\u964d<br/>\n\t * MatchResult\uff08JDK1.5\u4ee5\u964d\uff09\u306f\u72ec\u7acb\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u5909\u5316\u3057\u306a\u3044\u3002<br/>\n     *\uff08\u305f\u3060\u3057MatchResult\u306fstart/end\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\u3082\u30b3\u30d4\u30fc\u3057\u3066\u4fdd\u6301\u3059\u308b\u306e\u3067\u3001start/end\u3057\u304b\u4f7f\u308f\u306a\u3044\u306a\u3089\u3061\u3087\u3063\u3068\u30b3\u30b9\u30c8\u304c\u9ad8\u3044\u304b\u3082\uff09\n\t */\n\t@Test\n\tpublic void matchResult(){\n\n\t\t//                                          012345678901234\n\t\tMatcher m = Pattern.compile(\"1.3\").matcher(\"abc123def1B3ghi\");\n\n\t\tassertThat(m.find(), is(true));\n\t\tMatchResult result1 = m.toMatchResult();\n\t\tassertThat(result1.group(),is(\"123\"));\n\t\tassertThat(result1.group(0),is(\"123\"));\n\t\tassertThat(result1.start(), is(3));\n\t\tassertThat(result1.end(), is(6));\n\n\t\tassertThat(m.toMatchResult(), is(not(sameInstance(result1))));\n\t\tassertThat(m.toMatchResult(), is(not(sameInstance(result1))));\n\n\t\tassertThat(m.find(), is(true));\n\t\tMatchResult result2 = m.toMatchResult();\n\t\tassertThat(result2.group(),is(\"1B3\"));\n\t\tassertThat(result2.group(0),is(\"1B3\"));\n\t\tassertThat(result2.start(), is(9));\n\t\tassertThat(result2.end(), is(12));\n\n\t\tassertThat(m.find(), is(false));\n\t}\n\n\t/**\n\t * \u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u304c\u5fc5\u8981\u306a\u6587\u5b57:<br/>\n\t * \u00a5 * + . ? { } ( ) [ ] ^ $ - |\n\t */\n\t@Test\n\tpublic void \u30e1\u30bf\u6587\u5b57(){\n\t\tPattern pattern = Pattern.compile(\"\\\\*\");\n\n\t\t// \u3053\u3061\u3089\u306f\u5b9f\u884c\u30a8\u30e9\u30fc\n\t\t//pattern = Pattern.compile(\"*\");\n\n\t\tMatcher matcher = pattern.matcher(\"*\");\n\t\tassertThat(matcher.matches(), is(true));\n\n\t\t// \u6587\u5b57\u5217\u5185\u306b\u300c\\\u300d\u304c\u3042\u308b\u304b\u5224\u65ad\u3059\u308b\u5834\u5408\u3001\n\t\t// Java\u30bd\u30fc\u30b9\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u3082\u5fc5\u8981\u306a\u305f\u3081\u3001\u300c\\\\\u300d\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u3064\u304d\u306f\u300c\\\\\\\\\u300d\u3068\u306a\u308b\n\t\t// Java\u30bd\u30fc\u30b9\u5185\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3068\u3001Java\u5b9f\u884c\u74b0\u5883\u306e\u6b63\u898f\u8868\u73fe\u3067\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u6587\u5b57\u3092\u8003\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n\t\t// (\u55da\u547c\u3001\u3084\u3084\u3053\u3057\u3044)\n\t\tpattern = Pattern.compile(\"\\\\\\\\\");\n\t\tmatcher = pattern.matcher(\"\\\\\");\n\t\tassertThat(matcher.find(), is(true));\n\t}\n\n\t/**\n\t * \u53c2\u8003: http://homepage2.nifty.com/jr-kun/hidemaru_qa/4_regulr.html\n\t */\n\t@Test\n\tpublic void \u30ad\u30e3\u30e9\u30af\u30bf\u30af\u30e9\u30b9(){\n\t\t// \u6570\u5b57\n\t\tPattern pattern = Pattern.compile(\"[0-9]\");\n\t\tassertThat(pattern.matcher(\"0\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"9\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"A\").matches(), is(false));\n\n\t\t// \u5168\u89d2\u3072\u3089\u304c\u306a\n\t\tpattern = Pattern.compile(\"[\u3041-\u3093]\");\n\t\tassertThat(pattern.matcher(\"\u3042\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u3070\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n\n\t\t// \u5168\u89d2\u30ab\u30bf\u30ab\u30ca\n\t\tpattern = Pattern.compile(\"[\u30a1-\u30f6]\");\n\t\tassertThat(pattern.matcher(\"\u30a1\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u30a2\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u3042\").matches(), is(false));\n\n\t\t// \u4efb\u610f\u306e\uff11\u30d0\u30a4\u30c8\u6587\u5b57\n\t\tpattern = Pattern.compile(\"[ -~]\");\n\t\tassertThat(pattern.matcher(\"0\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"A\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n\n\t\t// \u6f22\u5b57\n\t\tpattern = Pattern.compile(\"[\u4e9c-\u9ed1]\");\n\t\tassertThat(pattern.matcher(\"\u4e9c\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"\u5ee3\").matches(), is(true));\n\t\tassertThat(pattern.matcher(\"0\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"A\").matches(), is(false));\n\t\tassertThat(pattern.matcher(\"\u30a2\").matches(), is(false));\n\t}\n\n\t/**\n\t * JDK 1.5\u4ee5\u964d<br/>\n\t * (\u3088\u304f\u308f\u304b\u3089\u3093\u304c\u3001)\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\n\n\t */\n\t@Test\n\tpublic void quote(){\n\t\tassertThat(Pattern.quote(\".\"), is(\"\\\\Q.\\\\E\"));\n\t\tassertThat(Pattern.quote(\",\"), is(\"\\\\Q,\\\\E\"));\n\t\tassertThat(Pattern.quote(\"\\\\\"), is(\"\\\\Q\\\\\\\\E\"));\n\n\t\tassertThat(\"a.b.c\".split(\".\").length, is(0));\n\t\tassertThat(\"a.b.c\".split(\"\\\\.\").length, is(3));\n\t\tassertThat(\"a.b.c\".split(Pattern.quote(\".\")).length, is(3));\n\t}\n\n\t/**\n\t * JDK 1.8\u4ee5\u964d\n\t */\n\t@Test\n\tpublic void group\u540d\u524d\u3092\u6307\u5b9a(){\n\n\t\t//\u96fb\u8a71\u756a\u53f7\u306e\u6b63\u898f\u8868\u73fe\n\t\tPattern pattern = Pattern.compile(\"0(?<shigai>\\\\d{1,4})-(?<shinai>\\\\d+)-(?<bango>\\\\d{4})\");\n\n\t\tMatcher matcher = pattern.matcher(\"0120-863-5730\");\n\t\tassertThat(matcher.matches(), is(true));\n\t\tassertThat(matcher.groupCount(), is(3));\n\n\t\tassertThat(matcher.group(0), is(\"0120-863-5730\"));\n\t\tassertThat(matcher.group(1), is(\"120\"));\n\t\tassertThat(matcher.group(2), is(\"863\"));\n\t\tassertThat(matcher.group(3), is(\"5730\"));\n\n\t\tassertThat(matcher.group(\"shigai\"), is(\"120\"));\n\t\tassertThat(matcher.group(\"shinai\"), is(\"863\"));\n\t\tassertThat(matcher.group(\"bango\"), is(\"5730\"));\n\n\t\t// \u65e5\u672c\u8a9e\u3092\u4ed8\u3051\u308b\u3068\u3001\u5b9f\u884c\u30a8\u30e9\u30fc(\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u901a\u308b)\n\t\t//Pattern pattern2 = Pattern.compile(\"0(?<\u5e02\u5916>\\\\d{1,4})-(?<\u5e02\u5185>\\\\d+)-(?<\u756a\u53f7>\\\\d{4})\");\n\t}\n\n\t/**\n\t * JDK 1.8\u4ee5\u964d<br/>\n\t * \u6587\u5b57\u5217\u5168\u4f53\u3067\u3082\u6587\u5b57\u5217\u306e\u4e00\u90e8\u3067\u3082\u30de\u30c3\u30c1\u3057\u3066\u3001\u4fbf\u5229\u305d\u3046<br/>\n\t * predicate \u3010\u81ea\u52d5\u3011\u65ad\u8a00\u3059\u308b \u3010\u4ed6\u52d5\u3011\u3014\u884c\u52d5\u3084\u8b70\u8ad6\u306a\u3069\u306e\u3015\u57fa\u790e\u3092\u7f6e\u304f(alc.co.jp\u3088\u308a)\n\t */\n\t@Test\n\tpublic void asPredicate(){\n\n\t\tPredicate<String> predicate = Pattern.compile(\"ABC\").asPredicate();\n\t\tassertThat(predicate.test(\"ABC\"), is(true));\n\t\tassertThat(predicate.test(\"AABC\"), is(true));\n\t\tassertThat(predicate.test(\"ABCA\"), is(true));\n\t\tassertThat(predicate.test(\"ABD\"), is(false));\n\t}\n\n\t/**\n\t * JDK 1.8\u4ee5\u964d\n\t */\n\t@Test\n\tpublic void splitAsStream(){\n\n\t\tPattern pattern = Pattern.compile(\"-\");\n\t\tStream<String> stream = pattern.splitAsStream(\"0120-863-5730\");\n\t\tassertThat(stream.count(), is(3L));\n\t}\n\n}\n```\n", "tags": ["Java", "\u6b63\u898f\u8868\u73fe"]}