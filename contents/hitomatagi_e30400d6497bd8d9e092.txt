{"context": "\n\n\u6982\u8981\nKeras, TensorFlow\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001MNIST\u306eCNN\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\nKeras\nKeras\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7c21\u5358\u306b\u8a18\u8ff0\u3067\u304d\u308bPython\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306f\u3001TensorFlow\u3068Theano\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u30022016/9\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fver.1.1.0\u304b\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u304cTensorFlow\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u69cb\u7bc9\u3059\u308b\u74b0\u5883\n\nAWS EC2 t2.micro\nUbuntu Server 16.04 LTS (HVM), SSD Volume Type - ami-0567c164\nPython: 3.5.2\nTensorFlow: 0.12\nKeras: 1.1.1\n\n\nPython\u74b0\u5883\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u203b Python 3.5.2 \u306f\u6700\u521d\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n$ sudo apt-get -y update\n$ sudo apt-get -y install python3-pip python3-dev\n\n\nTensorFlow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.11.0-cp35-cp35m-linux_x86_64.whl\n$ sudo -H pip3 install --upgrade $TF_BINARY_URL\n\nTensorFlow\u306e\u52d5\u4f5c\u30c1\u30a7\u30c3\u30af\n$ python3 /usr/local/lib/python3.5/dist-packages/tensorflow/models/image/mnist/convolutional.py\n\n\nKeras\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo -H pip3 install keras\n\n$ sudo apt-get -y install graphviz\n$ sudo -H sudo pip3 install pydot-ng\n$ sudo -H sudo pip3 install h5py\n\ngraphviz\u3068pydot-ng\u306f\u3001\u30e2\u30c7\u30eb\u3092\u753b\u50cf\u51fa\u529b\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\nh5py\u306f\u3001HDF5\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u60c5\u5831\u3092\u5165\u51fa\u529b\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\n\u25a0 Keras\u306e\u52d5\u4f5c\u30c1\u30a7\u30c3\u30af\nexamples\u306emnist_cnn.py\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n$ python3 mnist_cnn.py\nUsing TensorFlow backend.\nDownloading data from https://s3.amazonaws.com/img-datasets/mnist.pkl.gz\n15286272/15296311 [============================>.] - ETA: 0sX_train shape: (60000, 28, 28, 1)\n60000 train samples\n10000 test samples\nTrain on 60000 samples, validate on 10000 samples\nEpoch 1/12\n60000/60000 [==============================] - 214s - loss: 9.1101 - acc: 0.4070 - val_loss: 6.9043 - val_acc: 0.57                       02\nEpoch 2/12\n60000/60000 [==============================] - 214s - loss: 7.7077 - acc: 0.5201 - val_loss: 5.0885 - val_acc: 0.68                       33\nEpoch 3/12\n60000/60000 [==============================] - 214s - loss: 6.8004 - acc: 0.5765 - val_loss: 4.1852 - val_acc: 0.73                       90\nEpoch 4/12\n60000/60000 [==============================] - 219s - loss: 5.8370 - acc: 0.6363 - val_loss: 3.7302 - val_acc: 0.7668\nEpoch 5/12\n60000/60000 [==============================] - 220s - loss: 5.2334 - acc: 0.6739 - val_loss: 3.0775 - val_acc: 0.8081\nEpoch 6/12\n60000/60000 [==============================] - 219s - loss: 5.0515 - acc: 0.6850 - val_loss: 3.4284 - val_acc: 0.7862\nEpoch 7/12\n60000/60000 [==============================] - 219s - loss: 4.8637 - acc: 0.6966 - val_loss: 2.7935 - val_acc: 0.8254\nEpoch 8/12\n60000/60000 [==============================] - 219s - loss: 4.6540 - acc: 0.7101 - val_loss: 2.7168 - val_acc: 0.8302\nEpoch 9/12\n60000/60000 [==============================] - 254s - loss: 4.4473 - acc: 0.7227 - val_loss: 2.7631 - val_acc: 0.8280\nEpoch 10/12\n60000/60000 [==============================] - 716s - loss: 4.3329 - acc: 0.7299 - val_loss: 2.8391 - val_acc: 0.8232\nEpoch 11/12\n60000/60000 [==============================] - 2250s - loss: 4.2979 - acc: 0.7322 - val_loss: 2.5995 - val_acc: 0.8378\nEpoch 12/12\n60000/60000 [==============================] - 2137s - loss: 4.3999 - acc: 0.7259 - val_loss: 2.5785 - val_acc: 0.8392\nTest score: 2.57848101082\nTest accuracy: 0.8392\n\n\u25a0 \u30e2\u30c7\u30eb\u3092\u753b\u50cf\u51fa\u529b\nKeras\u306f\u69cb\u7bc9\u3057\u305fmodel\u3092plot()\u3067\u753b\u50cf\u51fa\u529b\u3067\u304d\u307e\u3059\u3002\nfrom keras.utils.visualize_util import plot\nplot(model, show_shapes=True, show_layer_names=True, to_file='model.png')\n\nmnist_cnn.py\u306f\u3053\u3093\u306a\u30e2\u30c7\u30eb\u3067\u3059\u3002\n\n\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u3061\u3089\u3002\nmodel.add(Convolution2D(nb_filters, kernel_size[0], kernel_size[1], border_mode='valid', input_shape=input_shape))\nmodel.add(Activation('relu'))\nmodel.add(Convolution2D(nb_filters, kernel_size[0], kernel_size[1]))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=pool_size))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(nb_classes))\nmodel.add(Activation('softmax'))\n\nKeras\u306f\u30e2\u30c7\u30eb\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\uff11\uff1a\uff11\u5bfe\u5fdc\u3067\u8a18\u8ff0\u3067\u304d\u308b\u306e\u3067\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u306d\u3002\n# \u6982\u8981\nKeras, TensorFlow\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001MNIST\u306eCNN\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n# Keras\nKeras\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u7c21\u5358\u306b\u8a18\u8ff0\u3067\u304d\u308bPython\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306f\u3001TensorFlow\u3068Theano\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u30022016/9\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fver.1.1.0\u304b\u3089\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u304cTensorFlow\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n# \u69cb\u7bc9\u3059\u308b\u74b0\u5883\n+ AWS EC2 t2.micro\n+ Ubuntu Server 16.04 LTS (HVM), SSD Volume Type - ami-0567c164\n+ Python: 3.5.2\n+ TensorFlow: 0.12\n+ Keras: 1.1.1\n\n# Python\u74b0\u5883\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u203b Python 3.5.2 \u306f\u6700\u521d\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\n$ sudo apt-get -y update\n$ sudo apt-get -y install python3-pip python3-dev\n```\n\n# TensorFlow\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\n$ export TF_BINARY_URL=https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.11.0-cp35-cp35m-linux_x86_64.whl\n$ sudo -H pip3 install --upgrade $TF_BINARY_URL\n```\n\nTensorFlow\u306e\u52d5\u4f5c\u30c1\u30a7\u30c3\u30af\n\n```\n$ python3 /usr/local/lib/python3.5/dist-packages/tensorflow/models/image/mnist/convolutional.py\n```\n\n# Keras\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\n$ sudo -H pip3 install keras\n\n$ sudo apt-get -y install graphviz\n$ sudo -H sudo pip3 install pydot-ng\n$ sudo -H sudo pip3 install h5py\n```\n\ngraphviz\u3068pydot-ng\u306f\u3001\u30e2\u30c7\u30eb\u3092\u753b\u50cf\u51fa\u529b\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\nh5py\u306f\u3001HDF5\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u60c5\u5831\u3092\u5165\u51fa\u529b\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n\u25a0 **Keras\u306e\u52d5\u4f5c\u30c1\u30a7\u30c3\u30af**\n\nexamples\u306e[mnist_cnn.py](https://github.com/fchollet/keras/blob/master/examples/mnist_cnn.py)\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n$ python3 mnist_cnn.py\nUsing TensorFlow backend.\nDownloading data from https://s3.amazonaws.com/img-datasets/mnist.pkl.gz\n15286272/15296311 [============================>.] - ETA: 0sX_train shape: (60000, 28, 28, 1)\n60000 train samples\n10000 test samples\nTrain on 60000 samples, validate on 10000 samples\nEpoch 1/12\n60000/60000 [==============================] - 214s - loss: 9.1101 - acc: 0.4070 - val_loss: 6.9043 - val_acc: 0.57                       02\nEpoch 2/12\n60000/60000 [==============================] - 214s - loss: 7.7077 - acc: 0.5201 - val_loss: 5.0885 - val_acc: 0.68                       33\nEpoch 3/12\n60000/60000 [==============================] - 214s - loss: 6.8004 - acc: 0.5765 - val_loss: 4.1852 - val_acc: 0.73                       90\nEpoch 4/12\n60000/60000 [==============================] - 219s - loss: 5.8370 - acc: 0.6363 - val_loss: 3.7302 - val_acc: 0.7668\nEpoch 5/12\n60000/60000 [==============================] - 220s - loss: 5.2334 - acc: 0.6739 - val_loss: 3.0775 - val_acc: 0.8081\nEpoch 6/12\n60000/60000 [==============================] - 219s - loss: 5.0515 - acc: 0.6850 - val_loss: 3.4284 - val_acc: 0.7862\nEpoch 7/12\n60000/60000 [==============================] - 219s - loss: 4.8637 - acc: 0.6966 - val_loss: 2.7935 - val_acc: 0.8254\nEpoch 8/12\n60000/60000 [==============================] - 219s - loss: 4.6540 - acc: 0.7101 - val_loss: 2.7168 - val_acc: 0.8302\nEpoch 9/12\n60000/60000 [==============================] - 254s - loss: 4.4473 - acc: 0.7227 - val_loss: 2.7631 - val_acc: 0.8280\nEpoch 10/12\n60000/60000 [==============================] - 716s - loss: 4.3329 - acc: 0.7299 - val_loss: 2.8391 - val_acc: 0.8232\nEpoch 11/12\n60000/60000 [==============================] - 2250s - loss: 4.2979 - acc: 0.7322 - val_loss: 2.5995 - val_acc: 0.8378\nEpoch 12/12\n60000/60000 [==============================] - 2137s - loss: 4.3999 - acc: 0.7259 - val_loss: 2.5785 - val_acc: 0.8392\nTest score: 2.57848101082\nTest accuracy: 0.8392\n```\n\n\u25a0 **\u30e2\u30c7\u30eb\u3092\u753b\u50cf\u51fa\u529b**\nKeras\u306f\u69cb\u7bc9\u3057\u305fmodel\u3092plot()\u3067\u753b\u50cf\u51fa\u529b\u3067\u304d\u307e\u3059\u3002\n\n```\nfrom keras.utils.visualize_util import plot\nplot(model, show_shapes=True, show_layer_names=True, to_file='model.png')\n```\n\n`mnist_cnn.py`\u306f\u3053\u3093\u306a\u30e2\u30c7\u30eb\u3067\u3059\u3002\n\n![model_mnist_cnn_mini.png](https://qiita-image-store.s3.amazonaws.com/0/107056/dc405d4d-10cd-1eaf-283f-58e7299a3a40.png)\n\n\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u3061\u3089\u3002\n\n```\nmodel.add(Convolution2D(nb_filters, kernel_size[0], kernel_size[1], border_mode='valid', input_shape=input_shape))\nmodel.add(Activation('relu'))\nmodel.add(Convolution2D(nb_filters, kernel_size[0], kernel_size[1]))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=pool_size))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(nb_classes))\nmodel.add(Activation('softmax'))\n```\n\nKeras\u306f\u30e2\u30c7\u30eb\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\uff11\uff1a\uff11\u5bfe\u5fdc\u3067\u8a18\u8ff0\u3067\u304d\u308b\u306e\u3067\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u306d\u3002\n", "tags": ["TensorFlow", "Keras", "DeepLearning"]}