{"context": " More than 1 year has passed since last update.bstring \u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u306f EEP-0035 \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3001binary string \u7528\u306e\u64cd\u4f5c\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3001\n\u7c21\u5358\u306b\u8a00\u3048\u3070 string \u306e\u30d0\u30a4\u30ca\u30ea\u7248\u3001\u305f\u3060\u672c\u5bb6\u306b\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u3002\nhttp://www.erlang.org/eeps/eep-0035.html\n\u8272\u3005\u5b9f\u88c5\u306f\u3042\u308b\u306e\u3060\u304c string:rchr/2 \u306b\u76f8\u5f53\u3059\u308b\u30e2\u30ce\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u5b9f\u88c5\u3057\u305f\u3002\n\u623b\u308a\u5024\u306f binary \u30e2\u30b8\u30e5\u30fc\u30eb\u306e part() \u578b\u306b\u3057\u3066\u307f\u305f\u3002\nindex \u306f binary \u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3042\u308f\u305b\u3066 0 \u304b\u3089\u306b\u3057\u305f\u3002\n\u305d\u306e\u305f\u3081\u3001\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408 0 \u3067\u8fd4\u3059\u308f\u3051\u306b\u3082\u884c\u304b\u306a\u3044\u306e\u3067 nomatch \u3092\u8fd4\u3057\u3066\u3044\u308b\u3002\n\u6ce8\u610f\u70b9\u304c\u4e8c\u3064\n\nCharacter \u306f\u30d0\u30a4\u30ca\u30ea\u3067\u306f\u306a\u304f /\u3084/\u3084/ \u3084 a \u306e char() \u578b\u3067\u6307\u5b9a\u3057\u3066\u3059\u308b\u3053\u3068\n\u9577\u3055\u304c 1 \u56fa\u5b9a\u306b\u306a\u3063\u3066\u3044\u308b \n\n-module(bstring).\n\n-export([rchr/2]).\n\n\n-spec rchr(binary(), char()) -> nomatch | binary:part().\nrchr(Binary, Character) ->\n    Pos = byte_size(Binary) - 1,\n    rchr(Binary, Character, Pos).\n\nrchr(_Binary, _Character, Pos) when Pos < 0 ->\n    nomatch;\nrchr(Binary, Character, Pos) ->\n    case binary:at(Binary, Pos) of\n        Character ->\n            {Pos, 1};\n        _ ->\n            rchr(Binary, Character, Pos - 1)\n    end.\n\n\n-ifdef(TEST).\n\n-include_lib(\"eunit/include/eunit.hrl\").\n\nrhcr_test() ->\n    ?assertEqual({3, 1}, rchr(<<\"a/b/c\">>, $/)),\n    ?assertEqual({1, 1}, rchr(<<\"a/bc\">>, $/)),\n    ?assertEqual(nomatch, rchr(<<\"abc\">>, $/)),\n    ok.\n\n-endif.\n\n\n\nbstring \u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u306f EEP-0035 \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3001binary string \u7528\u306e\u64cd\u4f5c\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3001\n\u7c21\u5358\u306b\u8a00\u3048\u3070 string \u306e\u30d0\u30a4\u30ca\u30ea\u7248\u3001\u305f\u3060\u672c\u5bb6\u306b\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\nhttp://www.erlang.org/eeps/eep-0035.html\n\n\u8272\u3005\u5b9f\u88c5\u306f\u3042\u308b\u306e\u3060\u304c string:rchr/2 \u306b\u76f8\u5f53\u3059\u308b\u30e2\u30ce\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u5b9f\u88c5\u3057\u305f\u3002\n\n\u623b\u308a\u5024\u306f binary \u30e2\u30b8\u30e5\u30fc\u30eb\u306e part() \u578b\u306b\u3057\u3066\u307f\u305f\u3002\nindex \u306f binary \u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3042\u308f\u305b\u3066 0 \u304b\u3089\u306b\u3057\u305f\u3002\n\n\u305d\u306e\u305f\u3081\u3001\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408 0 \u3067\u8fd4\u3059\u308f\u3051\u306b\u3082\u884c\u304b\u306a\u3044\u306e\u3067 nomatch \u3092\u8fd4\u3057\u3066\u3044\u308b\u3002\n\n\u6ce8\u610f\u70b9\u304c\u4e8c\u3064\n\n- Character \u306f\u30d0\u30a4\u30ca\u30ea\u3067\u306f\u306a\u304f $/ \u3084 $a \u306e char() \u578b\u3067\u6307\u5b9a\u3057\u3066\u3059\u308b\u3053\u3068\n- \u9577\u3055\u304c 1 \u56fa\u5b9a\u306b\u306a\u3063\u3066\u3044\u308b \n\n\n```erlang\n-module(bstring).\n\n-export([rchr/2]).\n\n\n-spec rchr(binary(), char()) -> nomatch | binary:part().\nrchr(Binary, Character) ->\n    Pos = byte_size(Binary) - 1,\n    rchr(Binary, Character, Pos).\n\nrchr(_Binary, _Character, Pos) when Pos < 0 ->\n    nomatch;\nrchr(Binary, Character, Pos) ->\n    case binary:at(Binary, Pos) of\n        Character ->\n            {Pos, 1};\n        _ ->\n            rchr(Binary, Character, Pos - 1)\n    end.\n\n\n-ifdef(TEST).\n\n-include_lib(\"eunit/include/eunit.hrl\").\n\nrhcr_test() ->\n    ?assertEqual({3, 1}, rchr(<<\"a/b/c\">>, $/)),\n    ?assertEqual({1, 1}, rchr(<<\"a/bc\">>, $/)),\n    ?assertEqual(nomatch, rchr(<<\"abc\">>, $/)),\n    ok.\n\n-endif.\n\n```", "tags": ["Erlang"]}