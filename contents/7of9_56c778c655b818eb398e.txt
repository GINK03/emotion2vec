{"tags": ["borgWarp", "Python", "numpy", "TensorFlow", "QMC"], "context": "\n\u52d5\u4f5c\u74b0\u5883\nUbuntu 14.04 LTS desktop amd64\nGeForce GTX 750 Ti\nASRock Z170M Pro4S [Intel Z170chipset]\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v7.5\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n\n\nTensorFlow\u306b\u304a\u3044\u3066mnist.next_batch()\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3046\u4e88\u5b9a\u306eQMC\u30b3\u30fc\u30c9\u3002\n\u5c0f\u3055\u306a\u30b3\u30fc\u30c9\u3067\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u3066\u307f\u305f\u3002\nimglist\u304b\u3089Halton Sequence\u3092\u7528\u3044\u3066\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\u3002\n\u95a2\u9023 http://qiita.com/7of9/items/7a8920531fd715d0b75a\n\u95a2\u9023 http://qiita.com/7of9/items/9db1251e714952794023\n\nv0.1\n\nsample.py\nimport numpy as np\n\nimglist = np.array([10,20,30,40,50,60,70,80,90])\n\ndef Halton_sequence(i0):\n    xbase = 2\n    ybase = 3\n\n    invxbase = 1.0 / xbase\n    facx = 1.0 / xbase\n\n    invybase = 1.0 / ybase\n    facy = 1.0 / ybase\n\n    inp = i0\n    x0 = 0.0\n    while inp > 0:\n        x0 = x0 + (inp % xbase) * invxbase\n        inp = inp / xbase\n        invxbase = invxbase * facx\n\n    inp = i0\n    y0 = 0.0\n    while inp > 0:\n        y0 = y0 + (inp % ybase) * invybase\n        inp = inp / ybase\n        invybase = invybase * facy\n\n    return x0, y0\n\nlength = len(imglist)\n\nidx = np.array([])\nfor i0 in range(10):\n    # discard 2nd\n    res, _ = Halton_sequence(i0)\n    # print res * length\n    idx = np.append(idx, res * length)\n\nprint idx\nprint imglist[idx.astype(int)]\n\n\n\n\u7d50\u679c\n$ python sample.py \n[ 0.      4.5     2.25    6.75    1.125   5.625   3.375   7.875   0.5625\n  5.0625]\n[10 50 30 70 20 60 40 80 10 60]\n\n\n\nv0.2 QMC_getIndex()\u8ffd\u52a0\n\nsample.py\n'''\nv0.2 2016 Oct. 22\n    - add QMC_getIndex()\nv0.1 2016 Oct. 22\n    - use Halton_sequence() together with unorganized code\n'''\n\nimport numpy as np\n\nimglist = np.array([10,20,30,40,50,60,70,80,90])\n\ndef Halton_sequence(i0):\n    xbase = 2\n    ybase = 3\n\n    invxbase = 1.0 / xbase\n    facx = 1.0 / xbase\n\n    invybase = 1.0 / ybase\n    facy = 1.0 / ybase\n\n    inp = i0\n    x0 = 0.0\n    while inp > 0:\n        x0 = x0 + (inp % xbase) * invxbase\n        inp = inp / xbase\n        invxbase = invxbase * facx\n\n    inp = i0\n    y0 = 0.0\n    while inp > 0:\n        y0 = y0 + (inp % ybase) * invybase\n        inp = inp / ybase\n        invybase = invybase * facy\n\n    return x0, y0\n\ndef QMC_getIndex(listSize, start, getsize):\n    idx = np.array([])\n    for i0 in range(start, start + getsize):\n        res, _ = Halton_sequence(i0) # discard 2nd dim\n        idx = np.append(idx, res * listSize)\n    return idx\n\nlength = len(imglist)\nidx = QMC_getIndex(length, 0, 10)\nprint \"idx:\",idx\nprint \"img:\",imglist[idx.astype(int)]\n\nidx = QMC_getIndex(length, 10, 10)\nprint \"idx:\",idx\nprint \"img:\",imglist[idx.astype(int)]\n\n\n\n\u7d50\u679c\n$ python sample.py \nidx: [ 0.      4.5     2.25    6.75    1.125   5.625   3.375   7.875   0.5625\n  5.0625]\nimg: [10 50 30 70 20 60 40 80 10 60]\nidx: [ 2.8125   7.3125   1.6875   6.1875   3.9375   8.4375   0.28125  4.78125\n  2.53125  7.03125]\nimg: [30 80 20 70 40 90 10 50 30 80]\n\n\n```txt:\u52d5\u4f5c\u74b0\u5883\nUbuntu 14.04 LTS desktop amd64\nGeForce GTX 750 Ti\nASRock Z170M Pro4S [Intel Z170chipset]\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v7.5\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n```\n\nTensorFlow\u306b\u304a\u3044\u3066mnist.next_batch()\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3046\u4e88\u5b9a\u306eQMC\u30b3\u30fc\u30c9\u3002\n\u5c0f\u3055\u306a\u30b3\u30fc\u30c9\u3067\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u3066\u307f\u305f\u3002\n\nimglist\u304b\u3089Halton Sequence\u3092\u7528\u3044\u3066\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\u3002\n\u95a2\u9023 http://qiita.com/7of9/items/7a8920531fd715d0b75a\n\u95a2\u9023 http://qiita.com/7of9/items/9db1251e714952794023\n\n## v0.1\n\n```sample.py\nimport numpy as np\n\nimglist = np.array([10,20,30,40,50,60,70,80,90])\n\ndef Halton_sequence(i0):\n    xbase = 2\n    ybase = 3\n\n    invxbase = 1.0 / xbase\n    facx = 1.0 / xbase\n\n    invybase = 1.0 / ybase\n    facy = 1.0 / ybase\n\n    inp = i0\n    x0 = 0.0\n    while inp > 0:\n        x0 = x0 + (inp % xbase) * invxbase\n        inp = inp / xbase\n        invxbase = invxbase * facx\n\n    inp = i0\n    y0 = 0.0\n    while inp > 0:\n        y0 = y0 + (inp % ybase) * invybase\n        inp = inp / ybase\n        invybase = invybase * facy\n\n    return x0, y0\n\nlength = len(imglist)\n\nidx = np.array([])\nfor i0 in range(10):\n\t# discard 2nd\n\tres, _ = Halton_sequence(i0)\n\t# print res * length\n\tidx = np.append(idx, res * length)\n\nprint idx\nprint imglist[idx.astype(int)]\n```\n\n```txt:\u7d50\u679c\n$ python sample.py \n[ 0.      4.5     2.25    6.75    1.125   5.625   3.375   7.875   0.5625\n  5.0625]\n[10 50 30 70 20 60 40 80 10 60]\n```\n\n## v0.2 QMC_getIndex()\u8ffd\u52a0\n\n```sample.py\n'''\nv0.2 2016 Oct. 22\n\t- add QMC_getIndex()\nv0.1 2016 Oct. 22\n\t- use Halton_sequence() together with unorganized code\n'''\n\nimport numpy as np\n\nimglist = np.array([10,20,30,40,50,60,70,80,90])\n\ndef Halton_sequence(i0):\n    xbase = 2\n    ybase = 3\n\n    invxbase = 1.0 / xbase\n    facx = 1.0 / xbase\n\n    invybase = 1.0 / ybase\n    facy = 1.0 / ybase\n\n    inp = i0\n    x0 = 0.0\n    while inp > 0:\n        x0 = x0 + (inp % xbase) * invxbase\n        inp = inp / xbase\n        invxbase = invxbase * facx\n\n    inp = i0\n    y0 = 0.0\n    while inp > 0:\n        y0 = y0 + (inp % ybase) * invybase\n        inp = inp / ybase\n        invybase = invybase * facy\n\n    return x0, y0\n\ndef QMC_getIndex(listSize, start, getsize):\n\tidx = np.array([])\n\tfor i0 in range(start, start + getsize):\n\t\tres, _ = Halton_sequence(i0) # discard 2nd dim\n\t\tidx = np.append(idx, res * listSize)\n\treturn idx\n\nlength = len(imglist)\nidx = QMC_getIndex(length, 0, 10)\nprint \"idx:\",idx\nprint \"img:\",imglist[idx.astype(int)]\n\nidx = QMC_getIndex(length, 10, 10)\nprint \"idx:\",idx\nprint \"img:\",imglist[idx.astype(int)]\n```\n\n```txt:\u7d50\u679c\n$ python sample.py \nidx: [ 0.      4.5     2.25    6.75    1.125   5.625   3.375   7.875   0.5625\n  5.0625]\nimg: [10 50 30 70 20 60 40 80 10 60]\nidx: [ 2.8125   7.3125   1.6875   6.1875   3.9375   8.4375   0.28125  4.78125\n  2.53125  7.03125]\nimg: [30 80 20 70 40 90 10 50 30 80]\n```\n\n\n"}