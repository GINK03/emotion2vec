{"tags": ["iOS", "Objective-C", "Realm"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u304d\u3063\u304b\u3051\n\u304d\u3063\u304b\u3051\u306fRealm\u30920.96.3\u304b\u30890.97.1\u306b\u3042\u3052\u305f\u969b\u3001\u7570\u5e38\u7cfb\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u304c\u901a\u3089\u306a\u304f\u306a\u3063\u3066\u6c17\u4ed8\u304d\u307e\u3057\u305f\u3002\n\n\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u611f\u3058\u306e\u30c6\u30b9\u30c8\nTweet *tweet = [Tweet objectForPrimaryKey:tweetID];\n__weak Tweet *weakTweet = tweet;\n\nXCTestExpectation *expectation = [self expectationWithDescription:[NSString stringWithFormat:@\"%s\", __func__]];\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    XCTAssertNotNil(weakTweet);\n\n    @try {\n        NSLog(@\"text: %@\", weakTweet.text);\n    }\n    @catch (NSException *exception) {\n        NSLog(@\"%s; exception = %@;\", __func__, exception);\n        [expectation fulfill];\n    }\n    @finally {\n    }\n});\n[self waitForExpectationsWithTimeout:5. handler:^(NSError *error) {\n    XCTAssertNil(error, @\"error: %@\", error);\n}];\n\n\n\u3053\u306e\u30c6\u30b9\u30c8\u306f@try\u5185\u3067\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u751f\u6210\u3057\u305ftweet\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308b\u306e\u3067\n\"Realm accessed from incorrect thread.\"\n\n\u3068\u3044\u3046\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\u306a\u305c\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u304b\u306fRLMObject\u306fRLMObject\u304c\u53c2\u7167\u3059\u308brealm\u304c\u751f\u6210\u3055\u308c\u305f\u30b9\u30ec\u30c3\u30c9\u3068\u30a2\u30af\u30bb\u30b9\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u304c\u540c\u4e00\u3067\u3042\u308b\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u3066\u304a\u308a\u3001\u30a2\u30af\u30bb\u30b9\u6bce\u306b\u5185\u90e8\u3067\u30c1\u30a7\u30c3\u30af\u3055\u308c\u7570\u306a\u308b\u5834\u5408\u306f\u4f8b\u5916\u3092\u6295\u3052\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\n0.96.3\u307e\u3067\u306f@throw\u3055\u308c\u3066\u3044\u307e\u3059\u3002realm-cocoa/Realm/RLMRealm_Private.hpp (38)\n\nrealm-cocoa/Realm/RLMRealm_Private.hpp\n// throw an exception if the realm is being used from the wrong thread\nstatic inline void RLMCheckThread(__unsafe_unretained RLMRealm *const realm) {\n    if (realm->_threadID != pthread_mach_thread_np(pthread_self())) {\n        @throw RLMException(@\"Realm accessed from incorrect thread\");\n    }\n}\n\n\n0.97.0\u3067\u306fC++\u306ethrow\u306b\u5909\u308f\u3063\u3066\u3044\u307e\u3059\u3002realm-cocoa/Realm/ObjectStore/shared_realm.cpp (267)\nvoid Realm::verify_thread() const\n{\n    if (m_thread_id != std::this_thread::get_id()) {\n        throw IncorrectThreadException();\n    }\n}\n\n\n\u554f\u984c\n\u3053\u308c\u306f\u4f55\u304c\u554f\u984c\u304b\u3068\u3044\u3046\u3068C++\u306ethrow\u306f64bit\u74b0\u5883\u3060\u3068@catch(id exception)\u3067\u306f\u4f8b\u5916\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u3067\u304d\u306a\u3044\u304b\u3089\u3067\u3059\u3002Exceptions in 64-Bit Executables\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f@catch(...)\u3068\u3044\u3046\u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u306e...\u3092\u5229\u7528\u3059\u308c\u3070\u826f\u3044\u3068\u306e\u3053\u3068\u3067\u3059(\u521d\u3081\u3066\u898b\u307e\u3057\u305f\u304c...\u3063\u3066\u53ef\u5909\u5f15\u6570\u4ee5\u5916\u3067\u3082\u4f7f\u3046\u3093\u3067\u3059\u306d)\u3002\n\n\u4fee\u6b63\u3057\u305f\u30c6\u30b9\u30c8\nTweet *tweet = [Tweet objectForPrimaryKey:tweetID];\n__weak Tweet *weakTweet = tweet;\n\nXCTestExpectation *expectation = [self expectationWithDescription:[NSString stringWithFormat:@\"%s\", __func__]];\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    XCTAssertNotNil(weakTweet);\n\n    @try {\n        NSLog(@\"text: %@\", weakTweet.text);\n    }\n    @catch (...) {\n        NSLog(@\"%s, Error\", __func__);\n        [expectation fulfill];\n    }\n    @finally {\n    }\n});\n[self waitForExpectationsWithTimeout:5. handler:^(NSError *error) {\n    XCTAssertNil(error, @\"error: %@\", error);\n}];\n\n\n\n\u307e\u3068\u3081\n\nRealm\u306e\u30b9\u30ec\u30c3\u30c9\u30c1\u30a7\u30c3\u30af\u306f0.97.0\u4ee5\u964d\u3067\u306fC++\u306ethrow\u304c\u4f7f\u308f\u308c\u3066\u304a\u308a\u3001@catch(...)\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n0.97.0\u4ee5\u964d\u3067\u3082@throw\u3082\u6b8b\u3063\u3066\u3044\u308b\u306e\u3067\u30b9\u30ec\u30c3\u30c9\u30c1\u30a7\u30c3\u30af\u3060\u3051\u4f55\u3089\u304b\u306e\u7406\u7531\u3067\u5909\u66f4\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002\n\n\n# \u304d\u3063\u304b\u3051\n\n\u304d\u3063\u304b\u3051\u306fRealm\u3092`0.96.3`\u304b\u3089`0.97.1`\u306b\u3042\u3052\u305f\u969b\u3001\u7570\u5e38\u7cfb\u306e\u5358\u4f53\u30c6\u30b9\u30c8\u304c\u901a\u3089\u306a\u304f\u306a\u3063\u3066\u6c17\u4ed8\u304d\u307e\u3057\u305f\u3002\n\n```objectviec:\u3060\u3044\u305f\u3044\u3053\u3093\u306a\u611f\u3058\u306e\u30c6\u30b9\u30c8\nTweet *tweet = [Tweet objectForPrimaryKey:tweetID];\n__weak Tweet *weakTweet = tweet;\n\nXCTestExpectation *expectation = [self expectationWithDescription:[NSString stringWithFormat:@\"%s\", __func__]];\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    XCTAssertNotNil(weakTweet);\n       \n    @try {\n        NSLog(@\"text: %@\", weakTweet.text);\n    }\n    @catch (NSException *exception) {\n        NSLog(@\"%s; exception = %@;\", __func__, exception);\n        [expectation fulfill];\n    }\n    @finally {\n    }\n});\n[self waitForExpectationsWithTimeout:5. handler:^(NSError *error) {\n    XCTAssertNil(error, @\"error: %@\", error);\n}];\n```\n\n\u3053\u306e\u30c6\u30b9\u30c8\u306f@try\u5185\u3067\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u751f\u6210\u3057\u305ftweet\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u308b\u306e\u3067\n\n\t\"Realm accessed from incorrect thread.\"\n\t\n\u3068\u3044\u3046\u4f8b\u5916\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\u306a\u305c\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u304b\u306fRLMObject\u306fRLMObject\u304c\u53c2\u7167\u3059\u308b`realm`\u304c\u751f\u6210\u3055\u308c\u305f\u30b9\u30ec\u30c3\u30c9\u3068\u30a2\u30af\u30bb\u30b9\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u304c\u540c\u4e00\u3067\u3042\u308b\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u3066\u304a\u308a\u3001\u30a2\u30af\u30bb\u30b9\u6bce\u306b\u5185\u90e8\u3067\u30c1\u30a7\u30c3\u30af\u3055\u308c\u7570\u306a\u308b\u5834\u5408\u306f\u4f8b\u5916\u3092\u6295\u3052\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u30b3\u30fc\u30c9\n\n`0.96.3`\u307e\u3067\u306f`@throw`\u3055\u308c\u3066\u3044\u307e\u3059\u3002[realm-cocoa/Realm/RLMRealm_Private.hpp (38)](https://github.com/realm/realm-cocoa/blob/v0.96.3/Realm/RLMRealm_Private.hpp#L38)\n\n```objectivec:realm-cocoa/Realm/RLMRealm_Private.hpp\n// throw an exception if the realm is being used from the wrong thread\nstatic inline void RLMCheckThread(__unsafe_unretained RLMRealm *const realm) {\n    if (realm->_threadID != pthread_mach_thread_np(pthread_self())) {\n        @throw RLMException(@\"Realm accessed from incorrect thread\");\n    }\n}\n```\n\n`0.97.0`\u3067\u306fC++\u306e`throw`\u306b\u5909\u308f\u3063\u3066\u3044\u307e\u3059\u3002[realm-cocoa/Realm/ObjectStore/shared_realm.cpp (267)](https://github.com/realm/realm-cocoa/blob/v0.97.0/Realm/ObjectStore/shared_realm.cpp#L267)\n\n```objectivec\nvoid Realm::verify_thread() const\n{\n    if (m_thread_id != std::this_thread::get_id()) {\n        throw IncorrectThreadException();\n    }\n}\n```\n\n# \u554f\u984c\n\n\u3053\u308c\u306f\u4f55\u304c\u554f\u984c\u304b\u3068\u3044\u3046\u3068C++\u306e`throw`\u306f64bit\u74b0\u5883\u3060\u3068`@catch(id exception)`\u3067\u306f\u4f8b\u5916\u3092\u53d7\u3051\u53d6\u308b\u3053\u3068\u3067\u304d\u306a\u3044\u304b\u3089\u3067\u3059\u3002[Exceptions in 64-Bit Executables](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Exceptions/Articles/Exceptions64Bit.html)\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f`@catch(...)`\u3068\u3044\u3046\u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u306e`...`\u3092\u5229\u7528\u3059\u308c\u3070\u826f\u3044\u3068\u306e\u3053\u3068\u3067\u3059(\u521d\u3081\u3066\u898b\u307e\u3057\u305f\u304c`...`\u3063\u3066\u53ef\u5909\u5f15\u6570\u4ee5\u5916\u3067\u3082\u4f7f\u3046\u3093\u3067\u3059\u306d)\u3002\n\n```objectviec:\u4fee\u6b63\u3057\u305f\u30c6\u30b9\u30c8\nTweet *tweet = [Tweet objectForPrimaryKey:tweetID];\n__weak Tweet *weakTweet = tweet;\n\nXCTestExpectation *expectation = [self expectationWithDescription:[NSString stringWithFormat:@\"%s\", __func__]];\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{\n    XCTAssertNotNil(weakTweet);\n       \n    @try {\n        NSLog(@\"text: %@\", weakTweet.text);\n    }\n    @catch (...) {\n        NSLog(@\"%s, Error\", __func__);\n        [expectation fulfill];\n    }\n    @finally {\n    }\n});\n[self waitForExpectationsWithTimeout:5. handler:^(NSError *error) {\n    XCTAssertNil(error, @\"error: %@\", error);\n}];\n```\n\n# \u307e\u3068\u3081\n\n- Realm\u306e\u30b9\u30ec\u30c3\u30c9\u30c1\u30a7\u30c3\u30af\u306f`0.97.0`\u4ee5\u964d\u3067\u306fC++\u306e`throw`\u304c\u4f7f\u308f\u308c\u3066\u304a\u308a\u3001`@catch(...)`\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n- `0.97.0`\u4ee5\u964d\u3067\u3082`@throw`\u3082\u6b8b\u3063\u3066\u3044\u308b\u306e\u3067\u30b9\u30ec\u30c3\u30c9\u30c1\u30a7\u30c3\u30af\u3060\u3051\u4f55\u3089\u304b\u306e\u7406\u7531\u3067\u5909\u66f4\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002\n"}