{"context": " More than 1 year has passed since last update.\n\nScala\u3067AOJ\n\u3053\u306e\u8a18\u4e8b\u306f Competitive Programming \uff08\u305d\u306e2\uff09 Advent Calendar 2015 \u306e10\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u79c1\u306fScala\u3082\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3082\u521d\u5fc3\u8005\u306a\u306e\u3067\u3001\u53b3\u5bc6\u3067\u306f\u306a\u3044\u8a00\u3044\u56de\u3057\u3084\u9593\u9055\u3044\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u4f55\u304b\u3042\u308c\u3070\u3054\u6307\u6458\u304f\u3060\u3055\u3044\u3002\n\n\u6982\u8981\nAOJ\u306bScala\u3092\u542b\u3080\uff13\u3064\u306e\u95a2\u6570\u578b\u8a00\u8a9e\u304c\u8ffd\u52a0\u3055\u308c\u305f\u306e\u3067\u3001Scala\u306b\u5165\u9580\u3057\u3064\u3064\u554f\u984c\u3092\u89e3\u3044\u305f\u6642\u306e\u3053\u3068\u3092\u66f8\u3044\u305f\u3002\n\n\n\u8aad\u3080\n\uff11\uff15\u5206\u3067\u3056\u3063\u304f\u308a\u5206\u304b\u308bScala\u5165\u9580\nScala\u306b\u5165\u9580\u3057\u3066\u307f\u305f \u305d\u306e\u6700\u5f8c\nScala\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff08\u5165\u51fa\u529b\u7de8\uff09\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3051\u308bScala\u306e\u6a19\u6e96\u5165\u529b\u3092\u697d\u306b\u3059\u308b\n\n\u89e3\u304f\n\nHello World\n\nobject Main {\n  def main(args: Array[String]): Unit = {\n    println(\"Hello World\")\n  }\n}\n\n\n10001: X Cubic\n\nimport scala.io.StdIn._\n\nobject Main{\n  def main(args: Array[String]): Unit = {\n      val x = readInt\n      println(x*x*x)\n  }\n}\n\n\nReversing Numbers\n\nsplit( ) \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u305f\u3061\u3092\u533a\u5207\u308a\u6587\u5b57\u3068\u3057\u3066\u5206\u5272\u3057\u3066\u304f\u308c\u308b\u3002\nmap( ) \u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u306b\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\n\u4f8b\u3048\u3070\u3001\n1 2 3 4 5\n\n\u307f\u305f\u3044\u306a\u6587\u5b57\u5217\u3092readLine\u3067\u8aad\u3080\u3068\"1 2 3 4 5\"\u3068\u3044\u3046\u6587\u5b57\u5217\u306b\u306a\u308b\u3002\n\u3088\u3063\u3066\u3001\nreadLine.split(\" \")\n\n\u3068\u3059\u308b\u3068\nArray(\"1\",\"2\",\"3\",\"4\",\"5\")\n\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308b\u3002\u3053\u306e\u5404\u8981\u7d20\u306b\u3001map\u95a2\u6570\u3067toInt\u3092\u9069\u7528\u3059\u308b\u3068\nreadLine.split(\" \").map(_.toInt)\n\n\u3068\u3044\u3046\u30b3\u30fc\u30c9\u304c\u51fa\u6765\u4e0a\u304c\u308b\u3002\u5f8c\u306f\u3053\u308c\u3092reverse\u3057\u3066mkString\u3057\u3066submit\u3002\nimport scala.io.StdIn.readLine\n\nobject Main {\n  def main(args: Array[String]): Unit = {\n    readLine\n    println(readLine.split(\" \").map(_.toInt).reverse.mkString(\" \"))\n  }\n}\n\n\nBinary Search\n\nimport scala.io.StdIn._\nimport scala.annotation.tailrec\n\nobject Main {\n  @tailrec\n  def binarySearch(f: Int => Int, l: Int, r: Int): Int = {\n    if(r-l<=1)f(l)\n    else if(f((l+r)/2) < 1)binarySearch(f,(l+r)/2,r)\n    else binarySearch(f,l,(l+r)/2)\n  }\n\n  def main(args: Array[String]): Unit = {\n    val n = readInt\n    val list = readLine.split(\" \").map(_.toInt)\n\n    val f = (ar: Seq[Int], a: Int) => (x: Int) => ar(x)-a\n\n    val q = readInt\n    val qlist = readLine.split(\" \").map(_.toInt)\n    val res = for(e <- qlist)yield binarySearch(f(list,e),0,n)\n    println(res.count(_ == 0))\n  }\n}\n\nbinarySearch\u95a2\u6570\u3092Int => Int\u578b\u306e\u95a2\u6570\u3092\u5f15\u6570\u3067\u3082\u3089\u3046\u5b9f\u88c5\u306b\u3057\u3066\u304a\u304f\u3002\nmain\u95a2\u6570\u3067\nf(\u30bd\u30fc\u30c8\u6e08\u307f\u30ea\u30b9\u30c8\u3001\u63a2\u3059)(\u4e8c\u5206\u63a2\u7d22\u6642\u306e\u6dfb\u5b57):\u6b21\u3069\u3063\u3061\u304b(-1,0,1)\n\u307f\u305f\u3044\u306a\u95a2\u6570\u3092\u4f5c\u3063\u3066\u3001binarySearch\u95a2\u6570\u306b\u6e21\u3059\u6642\u306b\u306f\u6dfb\u5b57\u6e21\u3059\u3060\u3051\u306e\u5f62\u306b\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u306e\u304b\u306a\u3042\u3068\u601d\u3063\u305f\u3002\n\nRange Minimum Query\n\nMonoid\u30c8\u30ec\u30a4\u30c8\u3092\u4f5c\u3063\u3066\u304a\u3044\u3066\u3001\u30bb\u30b0\u6728\u306e\u4e2d\u3067\u306fMonoid\u30c8\u30ec\u30a4\u30c8\u306b\u5b9a\u7fa9\u3055\u308c\u305fop\u3068zero\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u304a\u304f\u3068range minimum query\u3084range sum query\u306b\u3082\u3001\u30bb\u30b0\u6728\u4f5c\u308b\u6642\u306bMonoid\u4f5c\u3063\u3066\u6e21\u3059\u3060\u3051\u306b\u306a\u308b\u306e\u3067\u826f\u3044\u306e\u304b\u306a\u3042\u3068\u601d\u3063\u305f\u3002\nobject Main {\n  trait Monoid[A]{\n    def op(a1: A, a2: A): A\n    def zero: A\n  }\n\n  class SegmentTree[A](val numOfNode: Int, val M: Monoid[A]){\n\n    sealed trait Tree{ val value: A }\n    case object Leaf extends Tree{ val value: A = M.zero }\n    case class Node(value: A, left: Tree, right: Tree) extends Tree\n    object Node {\n        def apply(value: A) = new Node(value, Leaf, Leaf)\n        def apply(l: Tree, r: Tree) = new Node(M.op(l.value,r.value),l,r)\n    }\n\n    private[this] val empty: Node = Node(M.zero,Leaf,Leaf)\n    private[this] var root: Tree = empty\n\n    private def updateRec(id: Int, x:A, l: Int = 0, r: Int = numOfNode, t: Tree = root): Tree = {\n        def branch(now: Node): Node = {\n            val m = (l + r)>>1\n            if(r-l<=1)Node(x)\n            else if(id < m)Node(updateRec(id,x,l,m, now.left), now.right)\n            else Node(now.left,updateRec(id,x,m,r,now.right))\n        }\n        t match {\n            case now: Node => branch(now)\n            case _ => branch(empty)\n        }\n    }\n\n    def update(id: Int, x: A): Unit = {\n        root = updateRec(id, x)\n    }\n\n    def query(a: Int, b: Int, l: Int = 0, r: Int = numOfNode, t: Tree = root): A = {\n      val m = (l + r)/2\n      t match {\n        case now: Node =>\n          if(b<=l || r<=a)M.zero\n          else if(a<=l && r<=b)now.value\n          else M.op(query(a,b,l,m,now.left),query(a,b,m,r,now.right))\n        case _ => M.zero\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val line = scala.io.StdIn.readLine.split(\" \").map(_.toInt)\n    val n = line(0)\n    val q = line(1)\n    val m = new Monoid[Int]{\n        def op(a1: Int, a2: Int): Int = a1 min a2\n        def zero: Int = Int.MaxValue\n    }\n\n    val segtree = new SegmentTree[Int](n,m)\n\n    for(i <- 1 to q){\n        val input = scala.io.StdIn.readLine.split(\" \").map(_.toInt)\n        val x = input(1)\n        val y = input(2)\n        if(input(0)==0)segtree.update(x,y)\n        else println(segtree.query(x,y+1))\n    }\n  }\n}\n\n\n\u307e\u3068\u3081\nScala\u3092\u4f7f\u3063\u3066AOJ\u306e\u554f\u984c\u3092\u89e3\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u7406\u7531\u306f\uff12\u3064\u3042\u3063\u3066\u3001\n1.\u666e\u6bb5\u3068\u9055\u3046\u8a00\u8a9e\u3092\u4f7f\u3046\u306e\u304c\u9762\u767d\u305d\u3046\u3060\u3063\u305f\n2.\u3088\u308a\u6c4e\u7528\u7684(?)\u306a\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308c\u305d\u3046\u306b\u601d\u3048\u305f\n\u53c2\u8003\u8cc7\u6599\u306b\u3082\u3042\u3052\u305f\u3051\u3069\u6a19\u6e96\u5165\u529b\u3082\u305d\u3046\u3060\u3057\u3001\u300c\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3044\u3066\u300d\u3069\u3093\u306a\u5b9f\u88c5\u304c\u826f\u3044\u306e\u304b\u3001\u300c\u3053\u3046\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6642\u306f\u3053\u3046\u3059\u308b\u300d\u307f\u305f\u3044\u306a\u30a4\u30e1\u30fc\u30b8\u304c\u307e\u3060\u63b4\u3081\u3066\u3044\u306a\u3044\u3002\n#Scala\u3067AOJ\n\n\u3053\u306e\u8a18\u4e8b\u306f Competitive Programming \uff08\u305d\u306e2\uff09 Advent Calendar 2015 \u306e10\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\n\u79c1\u306fScala\u3082\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3082\u521d\u5fc3\u8005\u306a\u306e\u3067\u3001\u53b3\u5bc6\u3067\u306f\u306a\u3044\u8a00\u3044\u56de\u3057\u3084\u9593\u9055\u3044\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u4f55\u304b\u3042\u308c\u3070\u3054\u6307\u6458\u304f\u3060\u3055\u3044\u3002\n\n##\u6982\u8981\nAOJ\u306bScala\u3092\u542b\u3080\uff13\u3064\u306e\u95a2\u6570\u578b\u8a00\u8a9e\u304c\u8ffd\u52a0\u3055\u308c\u305f\u306e\u3067\u3001Scala\u306b\u5165\u9580\u3057\u3064\u3064\u554f\u984c\u3092\u89e3\u3044\u305f\u6642\u306e\u3053\u3068\u3092\u66f8\u3044\u305f\u3002\n\n<img width=\"361\" alt=\"advent1.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/76461/10e9c46a-cbc6-d314-e52a-01350e75c214.png\">\n\n##\u8aad\u3080\n[\uff11\uff15\u5206\u3067\u3056\u3063\u304f\u308a\u5206\u304b\u308bScala\u5165\u9580](http://www.slideshare.net/SatoYu1ro/scala-36162790)\n[Scala\u306b\u5165\u9580\u3057\u3066\u307f\u305f \u305d\u306e\u6700\u5f8c](http://d.hatena.ne.jp/derui/20121213/1355360062)\n[Scala\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff08\u5165\u51fa\u529b\u7de8\uff09](http://qiita.com/nel215/items/2cc03daaac29b03af176)\n[\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3051\u308bScala\u306e\u6a19\u6e96\u5165\u529b\u3092\u697d\u306b\u3059\u308b](http://qiita.com/cohalz/items/a54bfc70e4bbc33440cb)\n\n##\u89e3\u304f\n\n###[Hello World](http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ITP1_1_A)\n```scala\nobject Main {\n  def main(args: Array[String]): Unit = {\n    println(\"Hello World\")\n  }\n}\n```\n\n###[10001: X Cubic](http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=10001)\n```scala\nimport scala.io.StdIn._\n \nobject Main{\n  def main(args: Array[String]): Unit = {\n      val x = readInt\n      println(x*x*x)\n  }\n}\n```\n\n###[Reversing Numbers](http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ITP1_6_A)\nsplit( ) \u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u305f\u3061\u3092\u533a\u5207\u308a\u6587\u5b57\u3068\u3057\u3066\u5206\u5272\u3057\u3066\u304f\u308c\u308b\u3002\nmap( ) \u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u306b\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\n\n\u4f8b\u3048\u3070\u3001\n\n``` \n1 2 3 4 5\n```\n\u307f\u305f\u3044\u306a\u6587\u5b57\u5217\u3092readLine\u3067\u8aad\u3080\u3068\"1 2 3 4 5\"\u3068\u3044\u3046\u6587\u5b57\u5217\u306b\u306a\u308b\u3002\n\u3088\u3063\u3066\u3001\n\n```\nreadLine.split(\" \")\n```\n\u3068\u3059\u308b\u3068\n\n```\nArray(\"1\",\"2\",\"3\",\"4\",\"5\")\n```\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308b\u3002\u3053\u306e\u5404\u8981\u7d20\u306b\u3001map\u95a2\u6570\u3067toInt\u3092\u9069\u7528\u3059\u308b\u3068\n\n```\nreadLine.split(\" \").map(_.toInt)\n```\n\u3068\u3044\u3046\u30b3\u30fc\u30c9\u304c\u51fa\u6765\u4e0a\u304c\u308b\u3002\u5f8c\u306f\u3053\u308c\u3092reverse\u3057\u3066mkString\u3057\u3066submit\u3002\n\n```scala\nimport scala.io.StdIn.readLine\n \nobject Main {\n  def main(args: Array[String]): Unit = {\n    readLine\n    println(readLine.split(\" \").map(_.toInt).reverse.mkString(\" \"))\n  }\n}\n```\n\n###[Binary Search](http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_4_B)\n\n```scala\nimport scala.io.StdIn._\nimport scala.annotation.tailrec\n    \nobject Main {\n  @tailrec\n  def binarySearch(f: Int => Int, l: Int, r: Int): Int = {\n    if(r-l<=1)f(l)\n    else if(f((l+r)/2) < 1)binarySearch(f,(l+r)/2,r)\n    else binarySearch(f,l,(l+r)/2)\n  }\n   \n  def main(args: Array[String]): Unit = {\n    val n = readInt\n    val list = readLine.split(\" \").map(_.toInt)\n    \n    val f = (ar: Seq[Int], a: Int) => (x: Int) => ar(x)-a\n    \n    val q = readInt\n    val qlist = readLine.split(\" \").map(_.toInt)\n    val res = for(e <- qlist)yield binarySearch(f(list,e),0,n)\n    println(res.count(_ == 0))\n  }\n}\n```\nbinarySearch\u95a2\u6570\u3092Int => Int\u578b\u306e\u95a2\u6570\u3092\u5f15\u6570\u3067\u3082\u3089\u3046\u5b9f\u88c5\u306b\u3057\u3066\u304a\u304f\u3002\nmain\u95a2\u6570\u3067\nf(\u30bd\u30fc\u30c8\u6e08\u307f\u30ea\u30b9\u30c8\u3001\u63a2\u3059)(\u4e8c\u5206\u63a2\u7d22\u6642\u306e\u6dfb\u5b57):\u6b21\u3069\u3063\u3061\u304b(-1,0,1)\n\u307f\u305f\u3044\u306a\u95a2\u6570\u3092\u4f5c\u3063\u3066\u3001binarySearch\u95a2\u6570\u306b\u6e21\u3059\u6642\u306b\u306f\u6dfb\u5b57\u6e21\u3059\u3060\u3051\u306e\u5f62\u306b\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u306e\u304b\u306a\u3042\u3068\u601d\u3063\u305f\u3002\n\n###[Range Minimum Query](http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DSL_2_A)\nMonoid\u30c8\u30ec\u30a4\u30c8\u3092\u4f5c\u3063\u3066\u304a\u3044\u3066\u3001\u30bb\u30b0\u6728\u306e\u4e2d\u3067\u306fMonoid\u30c8\u30ec\u30a4\u30c8\u306b\u5b9a\u7fa9\u3055\u308c\u305fop\u3068zero\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u304a\u304f\u3068range minimum query\u3084range sum query\u306b\u3082\u3001\u30bb\u30b0\u6728\u4f5c\u308b\u6642\u306bMonoid\u4f5c\u3063\u3066\u6e21\u3059\u3060\u3051\u306b\u306a\u308b\u306e\u3067\u826f\u3044\u306e\u304b\u306a\u3042\u3068\u601d\u3063\u305f\u3002\n\n```scala\nobject Main {\n  trait Monoid[A]{\n    def op(a1: A, a2: A): A\n    def zero: A\n  }\n\n  class SegmentTree[A](val numOfNode: Int, val M: Monoid[A]){\n\n    sealed trait Tree{ val value: A }\n    case object Leaf extends Tree{ val value: A = M.zero }\n    case class Node(value: A, left: Tree, right: Tree) extends Tree\n    object Node {\n        def apply(value: A) = new Node(value, Leaf, Leaf)\n        def apply(l: Tree, r: Tree) = new Node(M.op(l.value,r.value),l,r)\n    }\n\n    private[this] val empty: Node = Node(M.zero,Leaf,Leaf)\n    private[this] var root: Tree = empty\n\n    private def updateRec(id: Int, x:A, l: Int = 0, r: Int = numOfNode, t: Tree = root): Tree = {\n        def branch(now: Node): Node = {\n            val m = (l + r)>>1\n            if(r-l<=1)Node(x)\n            else if(id < m)Node(updateRec(id,x,l,m, now.left), now.right)\n            else Node(now.left,updateRec(id,x,m,r,now.right))\n        }\n        t match {\n            case now: Node => branch(now)\n            case _ => branch(empty)\n        }\n    }\n\n    def update(id: Int, x: A): Unit = {\n        root = updateRec(id, x)\n    }\n\n    def query(a: Int, b: Int, l: Int = 0, r: Int = numOfNode, t: Tree = root): A = {\n      val m = (l + r)/2\n      t match {\n        case now: Node =>\n          if(b<=l || r<=a)M.zero\n          else if(a<=l && r<=b)now.value\n          else M.op(query(a,b,l,m,now.left),query(a,b,m,r,now.right))\n        case _ => M.zero\n      }\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val line = scala.io.StdIn.readLine.split(\" \").map(_.toInt)\n    val n = line(0)\n    val q = line(1)\n    val m = new Monoid[Int]{\n        def op(a1: Int, a2: Int): Int = a1 min a2\n        def zero: Int = Int.MaxValue\n    }\n\n    val segtree = new SegmentTree[Int](n,m)\n\n    for(i <- 1 to q){\n        val input = scala.io.StdIn.readLine.split(\" \").map(_.toInt)\n        val x = input(1)\n        val y = input(2)\n        if(input(0)==0)segtree.update(x,y)\n        else println(segtree.query(x,y+1))\n    }\n  }\n}\n```\n\n##\u307e\u3068\u3081\nScala\u3092\u4f7f\u3063\u3066AOJ\u306e\u554f\u984c\u3092\u89e3\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u7406\u7531\u306f\uff12\u3064\u3042\u3063\u3066\u3001\n1.\u666e\u6bb5\u3068\u9055\u3046\u8a00\u8a9e\u3092\u4f7f\u3046\u306e\u304c\u9762\u767d\u305d\u3046\u3060\u3063\u305f\n2.\u3088\u308a\u6c4e\u7528\u7684(?)\u306a\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308c\u305d\u3046\u306b\u601d\u3048\u305f\n\n\u53c2\u8003\u8cc7\u6599\u306b\u3082\u3042\u3052\u305f\u3051\u3069\u6a19\u6e96\u5165\u529b\u3082\u305d\u3046\u3060\u3057\u3001\u300c\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3044\u3066\u300d\u3069\u3093\u306a\u5b9f\u88c5\u304c\u826f\u3044\u306e\u304b\u3001\u300c\u3053\u3046\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6642\u306f\u3053\u3046\u3059\u308b\u300d\u307f\u305f\u3044\u306a\u30a4\u30e1\u30fc\u30b8\u304c\u307e\u3060\u63b4\u3081\u3066\u3044\u306a\u3044\u3002\n", "tags": ["Scala", "AOJ", "\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}