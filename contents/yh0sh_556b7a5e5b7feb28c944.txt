{"context": "scikit-learn\u306eRandomForestClassifier\u3092\u4f7f\u3046\u3053\u3068\u3067\uff0c\u5206\u985e\u554f\u984c\u3092\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u89e3\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u7279\u5fb4\u3068\u3057\u3066\uff0c\u540c\u3058\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u304b\u3089\uff0c\u30af\u30e9\u30b9\u3092\u4ee3\u8868\u3059\u308b\u5c5e\u6027\u5024\u3068\u306f\u96e2\u308c\u305f\u5024\u3092\u3082\u3064\u5916\u308c\u5024(outlier)\u306e\u30c7\u30fc\u30bf\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u516c\u5f0f\u306escikit-learn\u3067\u306f\u5916\u308c\u5024\u3092\u7b97\u51fa\u3059\u308b\u6a5f\u80fd\u304c\u306a\u3044\u305f\u3081\uff0c\u4eca\u56de\u306foutlier\u3092\u51fa\u529b\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\n(\u3061\u306a\u307f\u306bR\u3067\u306f\u7b97\u51fa\u304c\u53ef\u80fd\u3067\u3059)\n\u5916\u308c\u5024\u3068\u6c42\u3081\u308b\u305f\u3081\u306b\u306f\uff0cscikit-learn\u306eRandomForestClassifier\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3042\u308bapply\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\n\u3053\u308c\u306f\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u4f5c\u6210\u3057\u305f\u5404\u6c7a\u5b9a\u6728\u306b\u30d0\u30c3\u30c1\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u305f\u6642\uff0c\u5404\u30c7\u30fc\u30bf\u304c\u3069\u306e\u8449\u306b\u542b\u307e\u308c\u308b\u304b\u3092\u8449\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u8fd4\u3057\u3066\u304f\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\uff0e\n\nhttp://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\n\n\n\n\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\n\u5916\u308c\u5024\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u306f\uff0c\u306f\u3058\u3081\u306b\u5404\u30c7\u30fc\u30bf\u306e\u8fd1\u4f3c\u5ea6\u3092\u6c42\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u8fd1\u4f3c\u5ea6\u306e\u7b97\u51fa\napply\u30e1\u30bd\u30c3\u30c9\u304c\u8fd4\u3057\u3066\u304f\u308b\u914d\u5217\u3092\u5f15\u6570\u306b\u3057\u3066\uff0c\u5404\u30c7\u30fc\u30bf\u306e\u8fd1\u4f3c\u5ea6\u3092\u6c42\u3081\u307e\u3059\uff0e\napply\u30e1\u30bd\u30c3\u30c9\u306f[\u30b5\u30f3\u30d7\u30eb\u6570\uff0c\u6c7a\u5b9a\u6728\u306e\u6570]\u306e2\u6b21\u5143\u914d\u5217\u3067\u8fd4\u3057\u3066\u304d\u307e\u3059\uff0e\nproximity\u3067\u306f\uff0c\u30c7\u30fc\u30bf$x_{n}$\u3068\u540c\u3058\u8449\u306b\u542b\u307e\u308c\u308b\u30c7\u30fc\u30bf$x_{k}$\u3092\u30ab\u30a6\u30f3\u30c8\u3057\uff0c\u305d\u308c\u3092\u4f5c\u6210\u3057\u305f\u5168\u3066\u306e\u6c7a\u5b9a\u6728\u3067\u884c\u3063\u3066\u7dcf\u548c\u3092\u53d6\u308a\u307e\u3059\uff0e\n\u305d\u306e\u7d50\u679c\u3092\u6700\u5f8c\u306b\u6c7a\u5b9a\u6728\u306e\u6570\u3067\u5272\u308a\u6b63\u898f\u5316\u3059\u308b\u3053\u3068\u3067\uff0c\u30c7\u30fc\u30bf$x_{n}$\u306e\u8fd1\u4f3c\u5ea6\u3092\u6c42\u3081\u307e\u3059\uff0e\n\u6700\u7d42\u7684\u306a\u7d50\u679c\u3092[\u30b5\u30f3\u30d7\u30eb\u6570\uff0c\u30b5\u30f3\u30d7\u30eb\u6570]\u306e2\u6b21\u5143\u914d\u5217\u3067\u8fd4\u3057\u307e\u3059\uff0e\n(\u3061\u306a\u307f\u306b\u914d\u5217\u306f\u5bfe\u89d2\u884c\u5217\u306b\u306a\u308a\u307e\u3059)\ndef proximity(data):\n  n_samples = np.zeros((len(data),len(data)))\n  n_estimators = len(data[0])\n\n  for e,est in enumerate(np.transpose(np.array(data))):\n    for n,n_node in enumerate(est):\n      for k,k_node in enumerate(est):\n        if n_node == k_node:\n          n_samples[n][k] += 1\n\n  n_samples = 1.0 * np.array(n_samples) / n_estimators\n\n  return n_samples\n\n\n\u5916\u308c\u5024\u306e\u7b97\u51fa\n\u8fd1\u4f3c\u5ea6\u3092\u6c42\u3081\u305f\u3089\uff0c\u6b21\u306b\u5916\u308c\u5024\u3092\u6c42\u3081\u307e\u3059\uff0e\n\u540c\u3058\u30af\u30e9\u30b9\u5185\u306e\u5916\u308c\u5024\u306e\u7b97\u51fa\u306e\u305f\u3081\uff0c\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u914d\u5217\u3092\u5f15\u6570\u306b\u3057\u307e\u3059\uff0e\n\u51e6\u7406\u306e\u6d41\u308c\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u30af\u30e9\u30b9\u5185\u306e\u8fd1\u4f3c\u5ea6\u306e\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b\n\u5404\u30c7\u30fc\u30bf\u306e\u5916\u308c\u5024\u3092\u6c42\u3081\u308b\n\u5404\u30af\u30e9\u30b9\u306e\u5916\u308c\u5024\u306e\u4e2d\u592e\u5024\uff0c\u4e2d\u592e\u7d76\u5bfe\u504f\u5dee(MAD)\u3092\u6c42\u3081\u308b\n\u5404\u30c7\u30fc\u30bf\u306e\u5916\u308c\u5024\u3092\u4e2d\u592e\u5024\uff0c\u4e2d\u592e\u7d76\u5bfe\u504f\u5dee\u3067\u6b63\u898f\u5316\u3059\u308b\n\n\u51e6\u7406\u3068\u3057\u3066\u306f\u3053\u308c\u3060\u3051\u3067\uff0cnumpy\u3092\u4f7f\u3046\u3053\u3068\u3067\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059\uff0e\nfor\u6587\u3082\u5185\u5305\u8868\u8a18\u306b\u3059\u308c\u3070\uff0c\u3088\u308a\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\uff0e\n\u307e\u305f\uff0cXGBoost\u306escikit-learn\u30e9\u30c3\u30d1\u30fc\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\uff0cXGBoost\u3092\u4f7f\u3063\u305f\u5916\u308c\u5024\u306e\u7279\u5b9a\u3082\u53ef\u80fd\u3067\u3059\uff0e\n\u3061\u306a\u307f\u306b\u5916\u308c\u5024\u306e\u6b63\u898f\u5316\u3067\uff0c\u5e73\u5747\uff0c\u6a19\u6e96\u504f\u5dee\u3067\u306a\u304f\uff0c\u4e2d\u592e\u5024\uff0cMAD\u3092\u4f7f\u3046\u306e\u306f\uff0c\u5916\u308c\u5024\u306b\u5bfe\u3057\u3066\u5f71\u97ff\u3055\u308c\u306b\u304f\u3044\u7d71\u8a08\u91cf(\u30ed\u30d0\u30b9\u30c8)\u3067\u3042\u308b\u305f\u3081\u3067\u3059\uff0e\ndef outlier(data, label):\n  N = len(label)\n  pbar = [0] * N\n  data = np.square(data)\n\n  # \u30af\u30e9\u30b9\u5185\u306e\u8fd1\u4f3c\u5ea6\u306e\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b\n  for n,n_prox2 in enumerate(data):\n    for k,k_prox2 in enumerate(n_prox2):\n      if label[n] == label[k]:\n        pbar[n] += k_prox2\n    if pbar[n] == 0.0:\n      pbar[n] = 1.0e-32\n\n  # \u5916\u308c\u5024\u3092\u6c42\u3081\u308b\n  out = N / np.array(pbar)\n\n  # \u5404\u30af\u30e9\u30b9\u306e\u5916\u308c\u5024\u306e\u4e2d\u592e\u5024\u3092\u6c42\u3081\u308b\n  meds = {}\n  for n,l in enumerate(label):\n    if l not in meds.keys():\n      meds[l] = []\n    meds[l].append(out[n])\n\n  label_uniq = list(set(label))\n  med_uniq = {} # \u5b9f\u969b\u306e\u5404\u30af\u30e9\u30b9\u306e\u4e2d\u592e\u5024\u306f\u3053\u306e\u5909\u6570\u306b\u5165\u308b \n  for l in label_uniq:\n    med_uniq[l] = np.median(meds[l])\n\n  # \u5404\u30af\u30e9\u30b9\u306e\u5916\u308c\u5024\u306e\u4e2d\u592e\u7d76\u5bfe\u504f\u5dee(MAD)\u3092\u6c42\u3081\u308b\n  mads = {}\n  for n,l in enumerate(label):\n    if l not in mads.keys():\n      mads[l] = []\n    mads[l].append(np.abs(out[n] - med_uniq[l]))\n\n  mad_uniq = {} # \u5b9f\u969b\u306e\u5404\u30af\u30e9\u30b9\u306eMAD\u306f\u3053\u306e\u5909\u6570\u306b\u5165\u308b\n  for l in label_uniq:\n    mad_uniq[l] = np.median(mads[l])\n\n  # \u5404\u30c7\u30fc\u30bf\u306e\u5916\u308c\u5024\u3092\u4e2d\u592e\u5024\uff0cMAD\u3067\u6b63\u898f\u5316\u3059\u308b\n  outlier = [0] * N\n  for n,l in enumerate(label):\n    if mad_uniq[l] == 0.0:\n      outlier[n] = out[n] - med_uniq[l]\n    else:\n      outlier[n] = (out[n] - med_uniq[l]) / mad_uniq[l]\n\n  return outlier\n\n\n\u30b5\u30f3\u30d7\u30eb\n\u4e0a\u8a18\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\uff0csklearn\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306b\u3042\u308biris\u306e\u5916\u308c\u5024\u3092\u7279\u5b9a\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\n\u3053\u306e\u7d50\u679c\u306e\u753b\u50cf\u51fa\u529b\u307e\u3067\u884c\u3046\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6b21\u3067\u8f09\u305b\u3066\u3044\u307e\u3059\uff0e\n\n\n\u30b3\u30fc\u30c9\n\noutlier.py\nfrom sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomForestClassifier\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef proximity(data):\n  n_samples = np.zeros((len(data),len(data)))\n  n_estimators = len(data[0])\n  for e,est in enumerate(np.transpose(np.array(data))):\n    for n,n_node in enumerate(est):\n      for k,k_node in enumerate(est):\n        if n_node == k_node:\n          n_samples[n][k] += 1\n  n_samples = 1.0 * np.array(n_samples) / n_estimators\n  return n_samples\n\ndef outlier(data, label):\n  N = len(label)\n  pbar = [0] * N\n  data = np.square(data)\n\n  # \u30af\u30e9\u30b9\u5185\u306e\u8fd1\u4f3c\u5ea6\u306e\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b\n  for n,n_prox2 in enumerate(data):\n    for k,k_prox2 in enumerate(n_prox2):\n      if label[n] == label[k]:\n        pbar[n] += k_prox2\n    if pbar[n] == 0.0:\n      pbar[n] = 1.0e-32\n\n  # \u5916\u308c\u5024\u3092\u6c42\u3081\u308b\n  out = N / np.array(pbar)\n\n  # \u5404\u30af\u30e9\u30b9\u306e\u5916\u308c\u5024\u306e\u4e2d\u592e\u5024\u3092\u6c42\u3081\u308b\n  meds = {}\n  for n,l in enumerate(label):\n    if l not in meds.keys():\n      meds[l] = []\n    meds[l].append(out[n])\n\n  label_uniq = list(set(label))\n  med_uniq = {} # \u5b9f\u969b\u306e\u5404\u30af\u30e9\u30b9\u306e\u4e2d\u592e\u5024\u306f\u3053\u306e\u5909\u6570\u306b\u5165\u308b \n  for l in label_uniq:\n    med_uniq[l] = np.median(meds[l])\n\n  # \u5404\u30af\u30e9\u30b9\u306e\u5916\u308c\u5024\u306e\u4e2d\u592e\u7d76\u5bfe\u504f\u5dee(MAD)\u3092\u6c42\u3081\u308b\n  mads = {}\n  for n,l in enumerate(label):\n    if l not in mads.keys():\n      mads[l] = []\n    mads[l].append(np.abs(out[n] - med_uniq[l]))\n\n  mad_uniq = {} # \u5b9f\u969b\u306e\u5404\u30af\u30e9\u30b9\u306eMAD\u306f\u3053\u306e\u5909\u6570\u306b\u5165\u308b\n  for l in label_uniq:\n    mad_uniq[l] = np.median(mads[l])\n\n  # \u5404\u30c7\u30fc\u30bf\u306e\u5916\u308c\u5024\u3092\u4e2d\u592e\u5024\uff0cMAD\u3067\u6b63\u898f\u5316\u3059\u308b\n  outlier = [0] * N\n  for n,l in enumerate(label):\n    if mad_uniq[l] == 0.0:\n      outlier[n] = out[n] - med_uniq[l]\n    else:\n      outlier[n] = (out[n] - med_uniq[l]) / mad_uniq[l]\n\n  return outlier\n\n\nif __name__ == '__main__':\n  iris = load_iris()\n  X = iris.data\n  y = iris.target\n  div = 50\n  best_oob = len(y)\n\n  for i in range(20):\n    rf = RandomForestClassifier(max_depth=5,n_estimators=10,oob_score=True)\n    rf.fit(X, y)\n    if best_oob > rf.oob_score:\n      app = rf.apply(X)\n\n  prx = proximity(app)\n  out = outlier(prx,y)\n\n  fig = plt.figure(figsize=[7,4])\n  ax = fig.add_subplot(1,1,1)\n\n  ax.scatter(np.arange(div),out[:div], c=\"r\",marker='o', label='class 0')\n  ax.scatter(np.arange(div,div*2),out[div:div*2], c=\"b\",marker='^', label='class 1')\n  ax.scatter(np.arange(div*2,div*3),out[div*2:], c=\"g\",marker='s', label='class 2')\n\n  ax.set_ylabel('outlier') \n  ax.legend(loc=\"best\")\n  fig.savefig(\"out.png\")\n\n\n\n\n\u53c2\u8003\n\nRandom Forests Leo Breiman and Adele Cutler\n\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\n\u30ed\u30d0\u30b9\u30c8\u7d71\u8a08\uff1a\u5916\u308c\u5024\u3092\u542b\u3080\u30c7\u30fc\u30bf\u306e\u6271\u3044\u65b9\n\nscikit-learn\u306eRandomForestClassifier\u3092\u4f7f\u3046\u3053\u3068\u3067\uff0c\u5206\u985e\u554f\u984c\u3092\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3067\u89e3\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u306e\u7279\u5fb4\u3068\u3057\u3066\uff0c\u540c\u3058\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u30c7\u30fc\u30bf\u304b\u3089\uff0c\u30af\u30e9\u30b9\u3092\u4ee3\u8868\u3059\u308b\u5c5e\u6027\u5024\u3068\u306f\u96e2\u308c\u305f\u5024\u3092\u3082\u3064\u5916\u308c\u5024(outlier)\u306e\u30c7\u30fc\u30bf\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u516c\u5f0f\u306escikit-learn\u3067\u306f\u5916\u308c\u5024\u3092\u7b97\u51fa\u3059\u308b\u6a5f\u80fd\u304c\u306a\u3044\u305f\u3081\uff0c\u4eca\u56de\u306foutlier\u3092\u51fa\u529b\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\n(\u3061\u306a\u307f\u306bR\u3067\u306f\u7b97\u51fa\u304c\u53ef\u80fd\u3067\u3059)\n\n\u5916\u308c\u5024\u3068\u6c42\u3081\u308b\u305f\u3081\u306b\u306f\uff0cscikit-learn\u306eRandomForestClassifier\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u3042\u308bapply\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\n\u3053\u308c\u306f\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u4f5c\u6210\u3057\u305f\u5404\u6c7a\u5b9a\u6728\u306b\u30d0\u30c3\u30c1\u306e\u5165\u529b\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u305f\u6642\uff0c\u5404\u30c7\u30fc\u30bf\u304c\u3069\u306e\u8449\u306b\u542b\u307e\u308c\u308b\u304b\u3092\u8449\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u8fd4\u3057\u3066\u304f\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\uff0e\n\n- http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html\n\n![Screenshot from 2017-01-22 21-28-40.png](https://qiita-image-store.s3.amazonaws.com/0/63906/ccc72c5c-da4e-6f68-4a46-35fba41ec2e8.png)\n\n# \u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\n\n\u5916\u308c\u5024\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u306f\uff0c\u306f\u3058\u3081\u306b\u5404\u30c7\u30fc\u30bf\u306e\u8fd1\u4f3c\u5ea6\u3092\u6c42\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n## \u8fd1\u4f3c\u5ea6\u306e\u7b97\u51fa\n\napply\u30e1\u30bd\u30c3\u30c9\u304c\u8fd4\u3057\u3066\u304f\u308b\u914d\u5217\u3092\u5f15\u6570\u306b\u3057\u3066\uff0c\u5404\u30c7\u30fc\u30bf\u306e\u8fd1\u4f3c\u5ea6\u3092\u6c42\u3081\u307e\u3059\uff0e\napply\u30e1\u30bd\u30c3\u30c9\u306f[\u30b5\u30f3\u30d7\u30eb\u6570\uff0c\u6c7a\u5b9a\u6728\u306e\u6570]\u306e2\u6b21\u5143\u914d\u5217\u3067\u8fd4\u3057\u3066\u304d\u307e\u3059\uff0e\n\nproximity\u3067\u306f\uff0c\u30c7\u30fc\u30bf$x_{n}$\u3068\u540c\u3058\u8449\u306b\u542b\u307e\u308c\u308b\u30c7\u30fc\u30bf$x_{k}$\u3092\u30ab\u30a6\u30f3\u30c8\u3057\uff0c\u305d\u308c\u3092\u4f5c\u6210\u3057\u305f\u5168\u3066\u306e\u6c7a\u5b9a\u6728\u3067\u884c\u3063\u3066\u7dcf\u548c\u3092\u53d6\u308a\u307e\u3059\uff0e\n\u305d\u306e\u7d50\u679c\u3092\u6700\u5f8c\u306b\u6c7a\u5b9a\u6728\u306e\u6570\u3067\u5272\u308a\u6b63\u898f\u5316\u3059\u308b\u3053\u3068\u3067\uff0c\u30c7\u30fc\u30bf$x_{n}$\u306e\u8fd1\u4f3c\u5ea6\u3092\u6c42\u3081\u307e\u3059\uff0e\n\u6700\u7d42\u7684\u306a\u7d50\u679c\u3092[\u30b5\u30f3\u30d7\u30eb\u6570\uff0c\u30b5\u30f3\u30d7\u30eb\u6570]\u306e2\u6b21\u5143\u914d\u5217\u3067\u8fd4\u3057\u307e\u3059\uff0e\n(\u3061\u306a\u307f\u306b\u914d\u5217\u306f\u5bfe\u89d2\u884c\u5217\u306b\u306a\u308a\u307e\u3059)\n\n```py\ndef proximity(data):\n  n_samples = np.zeros((len(data),len(data)))\n  n_estimators = len(data[0])\n\n  for e,est in enumerate(np.transpose(np.array(data))):\n    for n,n_node in enumerate(est):\n      for k,k_node in enumerate(est):\n        if n_node == k_node:\n          n_samples[n][k] += 1\n\n  n_samples = 1.0 * np.array(n_samples) / n_estimators\n\n  return n_samples\n```\n\n## \u5916\u308c\u5024\u306e\u7b97\u51fa\n\n\u8fd1\u4f3c\u5ea6\u3092\u6c42\u3081\u305f\u3089\uff0c\u6b21\u306b\u5916\u308c\u5024\u3092\u6c42\u3081\u307e\u3059\uff0e\n\u540c\u3058\u30af\u30e9\u30b9\u5185\u306e\u5916\u308c\u5024\u306e\u7b97\u51fa\u306e\u305f\u3081\uff0c\u6b63\u89e3\u30e9\u30d9\u30eb\u306e\u914d\u5217\u3092\u5f15\u6570\u306b\u3057\u307e\u3059\uff0e\n\u51e6\u7406\u306e\u6d41\u308c\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\uff0e\n\n- \u30af\u30e9\u30b9\u5185\u306e\u8fd1\u4f3c\u5ea6\u306e\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b\n\n- \u5404\u30c7\u30fc\u30bf\u306e\u5916\u308c\u5024\u3092\u6c42\u3081\u308b\n\n- \u5404\u30af\u30e9\u30b9\u306e\u5916\u308c\u5024\u306e\u4e2d\u592e\u5024\uff0c\u4e2d\u592e\u7d76\u5bfe\u504f\u5dee(MAD)\u3092\u6c42\u3081\u308b\n\n- \u5404\u30c7\u30fc\u30bf\u306e\u5916\u308c\u5024\u3092\u4e2d\u592e\u5024\uff0c\u4e2d\u592e\u7d76\u5bfe\u504f\u5dee\u3067\u6b63\u898f\u5316\u3059\u308b\n\n\u51e6\u7406\u3068\u3057\u3066\u306f\u3053\u308c\u3060\u3051\u3067\uff0cnumpy\u3092\u4f7f\u3046\u3053\u3068\u3067\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059\uff0e\nfor\u6587\u3082\u5185\u5305\u8868\u8a18\u306b\u3059\u308c\u3070\uff0c\u3088\u308a\u9ad8\u901f\u5316\u3067\u304d\u307e\u3059\uff0e\n\n\u307e\u305f\uff0c[XGBoost\u306escikit-learn\u30e9\u30c3\u30d1\u30fc](https://github.com/dmlc/xgboost/blob/v0.60/python-package/xgboost/sklearn.py#L272)\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\uff0cXGBoost\u3092\u4f7f\u3063\u305f\u5916\u308c\u5024\u306e\u7279\u5b9a\u3082\u53ef\u80fd\u3067\u3059\uff0e\n\n\u3061\u306a\u307f\u306b\u5916\u308c\u5024\u306e\u6b63\u898f\u5316\u3067\uff0c\u5e73\u5747\uff0c\u6a19\u6e96\u504f\u5dee\u3067\u306a\u304f\uff0c\u4e2d\u592e\u5024\uff0cMAD\u3092\u4f7f\u3046\u306e\u306f\uff0c\u5916\u308c\u5024\u306b\u5bfe\u3057\u3066\u5f71\u97ff\u3055\u308c\u306b\u304f\u3044\u7d71\u8a08\u91cf(\u30ed\u30d0\u30b9\u30c8)\u3067\u3042\u308b\u305f\u3081\u3067\u3059\uff0e\n\n```py\ndef outlier(data, label):\n  N = len(label)\n  pbar = [0] * N\n  data = np.square(data)\n\n  # \u30af\u30e9\u30b9\u5185\u306e\u8fd1\u4f3c\u5ea6\u306e\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b\n  for n,n_prox2 in enumerate(data):\n    for k,k_prox2 in enumerate(n_prox2):\n      if label[n] == label[k]:\n        pbar[n] += k_prox2\n    if pbar[n] == 0.0:\n      pbar[n] = 1.0e-32\n\n  # \u5916\u308c\u5024\u3092\u6c42\u3081\u308b\n  out = N / np.array(pbar)\n\n  # \u5404\u30af\u30e9\u30b9\u306e\u5916\u308c\u5024\u306e\u4e2d\u592e\u5024\u3092\u6c42\u3081\u308b\n  meds = {}\n  for n,l in enumerate(label):\n    if l not in meds.keys():\n      meds[l] = []\n    meds[l].append(out[n])\n  \n  label_uniq = list(set(label))\n  med_uniq = {} # \u5b9f\u969b\u306e\u5404\u30af\u30e9\u30b9\u306e\u4e2d\u592e\u5024\u306f\u3053\u306e\u5909\u6570\u306b\u5165\u308b \n  for l in label_uniq:\n    med_uniq[l] = np.median(meds[l])\n  \n  # \u5404\u30af\u30e9\u30b9\u306e\u5916\u308c\u5024\u306e\u4e2d\u592e\u7d76\u5bfe\u504f\u5dee(MAD)\u3092\u6c42\u3081\u308b\n  mads = {}\n  for n,l in enumerate(label):\n    if l not in mads.keys():\n      mads[l] = []\n    mads[l].append(np.abs(out[n] - med_uniq[l]))\n\n  mad_uniq = {} # \u5b9f\u969b\u306e\u5404\u30af\u30e9\u30b9\u306eMAD\u306f\u3053\u306e\u5909\u6570\u306b\u5165\u308b\n  for l in label_uniq:\n    mad_uniq[l] = np.median(mads[l])\n\n  # \u5404\u30c7\u30fc\u30bf\u306e\u5916\u308c\u5024\u3092\u4e2d\u592e\u5024\uff0cMAD\u3067\u6b63\u898f\u5316\u3059\u308b\n  outlier = [0] * N\n  for n,l in enumerate(label):\n    if mad_uniq[l] == 0.0:\n      outlier[n] = out[n] - med_uniq[l]\n    else:\n      outlier[n] = (out[n] - med_uniq[l]) / mad_uniq[l]\n\n  return outlier\n```\n\n# \u30b5\u30f3\u30d7\u30eb\n\n\u4e0a\u8a18\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\uff0csklearn\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306b\u3042\u308biris\u306e\u5916\u308c\u5024\u3092\u7279\u5b9a\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\n\u3053\u306e\u7d50\u679c\u306e\u753b\u50cf\u51fa\u529b\u307e\u3067\u884c\u3046\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6b21\u3067\u8f09\u305b\u3066\u3044\u307e\u3059\uff0e\n\n![out.png](https://qiita-image-store.s3.amazonaws.com/0/63906/4349d7d2-ba33-7702-b38c-0c82cdbca45b.png)\n\n\n# \u30b3\u30fc\u30c9\n\n```py:outlier.py\nfrom sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomForestClassifier\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef proximity(data):\n  n_samples = np.zeros((len(data),len(data)))\n  n_estimators = len(data[0])\n  for e,est in enumerate(np.transpose(np.array(data))):\n    for n,n_node in enumerate(est):\n      for k,k_node in enumerate(est):\n        if n_node == k_node:\n          n_samples[n][k] += 1\n  n_samples = 1.0 * np.array(n_samples) / n_estimators\n  return n_samples\n\ndef outlier(data, label):\n  N = len(label)\n  pbar = [0] * N\n  data = np.square(data)\n\n  # \u30af\u30e9\u30b9\u5185\u306e\u8fd1\u4f3c\u5ea6\u306e\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b\n  for n,n_prox2 in enumerate(data):\n    for k,k_prox2 in enumerate(n_prox2):\n      if label[n] == label[k]:\n        pbar[n] += k_prox2\n    if pbar[n] == 0.0:\n      pbar[n] = 1.0e-32\n\n  # \u5916\u308c\u5024\u3092\u6c42\u3081\u308b\n  out = N / np.array(pbar)\n\n  # \u5404\u30af\u30e9\u30b9\u306e\u5916\u308c\u5024\u306e\u4e2d\u592e\u5024\u3092\u6c42\u3081\u308b\n  meds = {}\n  for n,l in enumerate(label):\n    if l not in meds.keys():\n      meds[l] = []\n    meds[l].append(out[n])\n  \n  label_uniq = list(set(label))\n  med_uniq = {} # \u5b9f\u969b\u306e\u5404\u30af\u30e9\u30b9\u306e\u4e2d\u592e\u5024\u306f\u3053\u306e\u5909\u6570\u306b\u5165\u308b \n  for l in label_uniq:\n    med_uniq[l] = np.median(meds[l])\n  \n  # \u5404\u30af\u30e9\u30b9\u306e\u5916\u308c\u5024\u306e\u4e2d\u592e\u7d76\u5bfe\u504f\u5dee(MAD)\u3092\u6c42\u3081\u308b\n  mads = {}\n  for n,l in enumerate(label):\n    if l not in mads.keys():\n      mads[l] = []\n    mads[l].append(np.abs(out[n] - med_uniq[l]))\n\n  mad_uniq = {} # \u5b9f\u969b\u306e\u5404\u30af\u30e9\u30b9\u306eMAD\u306f\u3053\u306e\u5909\u6570\u306b\u5165\u308b\n  for l in label_uniq:\n    mad_uniq[l] = np.median(mads[l])\n\n  # \u5404\u30c7\u30fc\u30bf\u306e\u5916\u308c\u5024\u3092\u4e2d\u592e\u5024\uff0cMAD\u3067\u6b63\u898f\u5316\u3059\u308b\n  outlier = [0] * N\n  for n,l in enumerate(label):\n    if mad_uniq[l] == 0.0:\n      outlier[n] = out[n] - med_uniq[l]\n    else:\n      outlier[n] = (out[n] - med_uniq[l]) / mad_uniq[l]\n\n  return outlier\n\n\nif __name__ == '__main__':\n  iris = load_iris()\n  X = iris.data\n  y = iris.target\n  div = 50\n  best_oob = len(y)\n\n  for i in range(20):\n    rf = RandomForestClassifier(max_depth=5,n_estimators=10,oob_score=True)\n    rf.fit(X, y)\n    if best_oob > rf.oob_score:\n      app = rf.apply(X)\n  \n  prx = proximity(app)\n  out = outlier(prx,y)\n  \n  fig = plt.figure(figsize=[7,4])\n  ax = fig.add_subplot(1,1,1)\n\n  ax.scatter(np.arange(div),out[:div], c=\"r\",marker='o', label='class 0')\n  ax.scatter(np.arange(div,div*2),out[div:div*2], c=\"b\",marker='^', label='class 1')\n  ax.scatter(np.arange(div*2,div*3),out[div*2:], c=\"g\",marker='s', label='class 2')\n  \n  ax.set_ylabel('outlier') \n  ax.legend(loc=\"best\")\n  fig.savefig(\"out.png\")\n  \n```\n\n# \u53c2\u8003\n- [Random Forests Leo Breiman and Adele Cutler](https://www.stat.berkeley.edu/~breiman/RandomForests/cc_home.htm#outliers)\n- [\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2](http://www.slideshare.net/holidayworking/ss-11948523)\n- [\u30ed\u30d0\u30b9\u30c8\u7d71\u8a08\uff1a\u5916\u308c\u5024\u3092\u542b\u3080\u30c7\u30fc\u30bf\u306e\u6271\u3044\u65b9](http://cl-www.msi.co.jp/reports/robust.html)\n", "tags": ["Python", "scikit-learn", "randomForest", "\u6a5f\u68b0\u5b66\u7fd2", "\u5916\u308c\u5024\u7279\u5b9a"]}