{"context": " More than 1 year has passed since last update.\u3057\u3070\u3089\u304f\u524d\u306b\u66f8\u304d\u307e\u3057\u305f\n\u30a4\u30f3\u30c6\u30eb\u00ae RealSense\u2122 3D\u30ab\u30e1\u30e9 \u3067Hand Tracking\n\u2191\u3053\u3061\u3089\u306e\u7d9a\u304d\u3068\u3057\u3066HandTracking\u306e\u5b9f\u88c5\u3092\u3057\u307e\u3057\u305f\u306e\u3067\u8a18\u4e8b\u3068\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\n\u672c\u8a18\u4e8b\u306e\u5168\u30bd\u30fc\u30b9\u306f\u4ee5\u4e0b\u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/aquaring/RealSenseTestCode\n\u300cRealSenseHandTracking\u300d\u3068\u3044\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\u203b\u30bd\u30fc\u30b9\u306f\u3042\u304f\u307e\u3067\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u3059\u306e\u3067\u3001\u53b3\u5bc6\u306b\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u307e\u305b\u3093\u3057\u3001\n\u3000\u30ab\u30e1\u30e9\u5236\u5fa1\u306e\u51e6\u7406\u306f\u30af\u30e9\u30b9\u306a\u3069\u306b\u305b\u305axaml.cs\u306b\u3079\u305f\u66f8\u304d\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u3042\u304f\u307e\u3067\u57fa\u672c\u7684\u306b\u4f7f\u7528\u65b9\u6cd5\u3092\u62bc\u3055\u3048\u308b\u76ee\u7684\u3067\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\u624b\u306e\u691c\u51fa\u901f\u5ea6\u3084\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u306e\u691c\u51fa\u7cbe\u5ea6\u3092\u898b\u3066\u9802\u304d\u305f\u304fgif\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306b\u3057\u307e\u3057\u305f\n\ngif\u30a2\u30cb\u306a\u306e\u3067\u3001\u304b\u306a\u308a\u753b\u50cf\u306f\u8352\u304f\u306a\u3063\u3066\u3044\u3066\u3059\u307f\u307e\u305b\u3093\u304c\n\u30fb\u4e0a\u306e\u753b\u50cf\u3000\u3000\u30ab\u30e9\u30fc\u30ab\u30e1\u30e9\u306e\u6620\u50cf\u306b\u691c\u51fa\u3057\u305f\u624b\u30fb\u6307\u306e\u4f4d\u7f6e\u306b\u9ec4\u7dd1\u8272\u306e\u70b9\u3092\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u66f8\u3044\u305f22\u70b9\u306e\u60c5\u5831\u3067\u3059\n\u30fb\u5de6\u4e0b\u306e\u753b\u50cf\u3000\u691c\u51fa\u3057\u305f\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u540d\u3001\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u30a4\u30e1\u30fc\u30b8\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u304cgif\u30a2\u30cb\u306a\u306e\u3067\u5b8c\u5168\u306b\u7121\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u307e\u3059\u304c)\n\u30fb\u53f3\u4e0b\u306e\u753b\u50cf\u3000\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u66f8\u3044\u305f\u300cBlob\u300d\u3068\u3057\u3066\u8a8d\u8b58\u3057\u305f\u90e8\u5206\u3092\u767d\u304f\u3057\u3066\u3044\u307e\u3059\n\u898b\u3066\u9802\u304f\u3068\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\n22\u70b9\u306e\u691c\u51fa\u901f\u5ea6\u3068\u3057\u3066\u306f\u601d\u3063\u305f\u3088\u308a\u3082\u65e9\u304f\u3066\u4f7f\u3048\u308b\u304b\u306a\u3041\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n(Leap\u3068\u6bd4\u3079\u308b\u3068\u5c11\u3057\u53cd\u5fdc\u304c\u9045\u3044\u3067\u3059\u304c\u753b\u9762\u64cd\u4f5c\u3068\u304b\u306b\u4f7f\u3046\u5206\u306b\u306f\u5168\u7136\u7533\u3057\u5206\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002)\n\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u306b\u3064\u3044\u3066\u306f\u8aa4\u691c\u51fa\u306f\u3059\u308b\u3082\u306e\u306e\u3001\u3046\u307e\u304f\u6761\u4ef6\u3092\u63c3\u3048\u308c\u3070\u5b9f\u7528\u306b\u8010\u3048\u308b\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u5b9f\u88c5\u306e\u30dd\u30a4\u30f3\u30c8\n\nHandTracking\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3001\u8a2d\u5b9a\n\nMainWindows.xaml.cs\n// Hand Tracking\u3092\u6709\u52b9\u5316\u3068\u8a2d\u5b9a\nm_Cm.EnableHand();\nPXCMHandModule handModule = m_Cm.QueryHand();\nPXCMHandConfiguration handConfig = handModule.CreateActiveConfiguration();\nhandConfig.SetTrackingMode(PXCMHandData.TrackingModeType.TRACKING_MODE_FULL_HAND);  // FULL_HAND\u30e2\u30fc\u30c9\nhandConfig.EnableSegmentationImage(true);   // SegmentationImage\u306e\u6709\u52b9\u5316\nhandConfig.EnableAllGestures();                 // \u3059\u3079\u3066\u306e\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u3092\u88dc\u8db3\nhandConfig.SubscribeGesture(OnFiredGesture);    // \u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u767a\u751f\u6642\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u30bb\u30c3\u30c8\nhandConfig.ApplyChanges();\n\n// HandData\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\nm_HandData = handModule.CreateOutput();\n\n\nPXCMSenseManager\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306bEnableHand()\u3057\u3066HandTracking\u3092\u6709\u52b9\u5316\u3057\u307e\u3059\u3002\nPXCMHandConfiguration\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066HandTracking\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u6700\u5f8c\u306bApplyChanges()\u3067\u8a2d\u5b9a\u3092\u53cd\u6620\u3057\u307e\u3059\u3002\nHand\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306bPXCMHandData\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3053\u3053\u3067\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\nHand\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n\u4eca\u307e\u3067\u306e\u30ab\u30e9\u30fc\u30a4\u30e1\u30fc\u30b8\u306e\u53d6\u5f97\u3068\u540c\u3058\u3088\u3046\u306b\u4eca\u56de\u3082Task\u3067\u30eb\u30fc\u30d7\u3059\u308b\u5f62\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\nPXCMHandData\u306eUpdate()\u3092\u547c\u3093\u3067Hand\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n(HandData\u306e\u66f4\u65b0\u304c\u3055\u308c\u305f\u6642\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3059\u308b\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u304c\u4eca\u56de\u306f\u3057\u3066\u3044\u307e\u305b\u3093)\n\u66f4\u65b0\u3055\u308c\u305fHand\u30c7\u30fc\u30bf\u306f\u3001DisplayHandTrackingData()\u306e\u4e2d\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u753b\u9762\u306b\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u9577\u3044\u3067\u3059\u304c\u3001\u30bd\u30fc\u30b9\u3092\u306e\u305b\u3066\u304a\u304d\u307e\u3059(\u8a73\u7d30\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3082\u3089\u3048\u308c\u3070\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u30fb\u30fb\u30fb)\n\nMainWindows.xaml.cs\n        /// <summary>\n        /// HandTracking\u3067\u53d6\u5f97\u3057\u305fHandData\u3092\u53d7\u3051\u53d6\u308a\n        /// \u753b\u9762\u306bHandData\u306e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\n        /// </summary>\n        private void DisplayHandTrackingData(PXCMHandData handData)\n        {\n            // SegmentationImage\u306e\u60c5\u5831\u683c\u7d0d\u7528\u306e\u5909\u6570\n            int segWbStride = 0;\n            Int32Rect segWbRect = new Int32Rect(0, 0, 0, 0);\n            Byte[] segImageBuffer = null;\n\n            // HandJoint\u306e\u60c5\u5831\u683c\u7d0d\u7528\u306e\u5909\u6570\n            List<List<PXCMHandData.JointData>> handJointsList = new List<List<PXCMHandData.JointData>>();\n\n            for (int handIndex = 0; handIndex < handData.QueryNumberOfHands(); handIndex++)\n            {\n                // IHandData\u3092\u53d6\u5f97\n                PXCMHandData.IHand iHandData;\n                if (handData.QueryHandData(PXCMHandData.AccessOrderType.ACCESS_ORDER_BY_TIME, handIndex, out iHandData) == pxcmStatus.PXCM_STATUS_NO_ERROR)\n                {\n                    // SegmentationImage\u3092\u53d6\u5f97\n                    PXCMImage image;\n                    iHandData.QuerySegmentationImage(out image);    // \u53d6\u5f97\u51fa\u6765\u308b\u753b\u50cf\u306f8bitGray\u30b9\u30b1\u30fc\u30eb\u753b\u50cf \u624b\u306e\u90e8\u5206\u304c0xff(\u767d) \u80cc\u666f\u304c0x00(\u9ed2)\n\n                    // Image\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n                    PXCMImage.ImageData data = null ;\n                    pxcmStatus sts = image.AcquireAccess(PXCMImage.Access.ACCESS_READ, PXCMImage.PixelFormat.PIXEL_FORMAT_Y8, out data);\n                    if (sts == pxcmStatus.PXCM_STATUS_NO_ERROR)\n                    {\n                        // ImageData\u304c\u53d6\u5f97\u3067\u304d\u305f\u3089WritableBitmap\u306b\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306b\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3059\u308b\n                        int length = data.pitches[0] * image.info.height;\n                        Byte[] tmpBuffer = data.ToByteArray(0, length);\n\n                        // \u30b9\u30c8\u30e9\u30a4\u30c9\u3068\u63cf\u753b\u9818\u57df\u3092\u53d6\u5f97\n                        segWbStride = data.pitches[0];\n                        segWbRect = new Int32Rect(0, 0, image.info.width, image.info.height);\n\n                        // Image\u30c7\u30fc\u30bf\u306e\u30a2\u30af\u30bb\u30b9\u3092\u7d42\u4e86\u3059\u308b\n                        image.ReleaseAccess(data);\n\n                        // HandSegmentationImage\u306f\u8907\u6570\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3059\u3067\u306b\u30d0\u30a4\u30c8\u914d\u5217\u3092\u53d6\u5f97\u305a\u307f\u306e\u5834\u5408\u306f\u91cd\u306d\u5408\u308f\u305b\u308b\n                        if (segImageBuffer == null)\n                        {\n                            // \u307e\u3060\u306a\u3044\u5834\u5408\u306f\u3001\u305d\u306e\u307e\u307e\u4f7f\u7528\u3059\u308b\n                            Array.Resize(ref segImageBuffer, tmpBuffer.Length);\n                            tmpBuffer.CopyTo(segImageBuffer, 0);\n\n                        }\n                        else\n                        {\n                            // \u65e2\u306b\u3072\u3068\u3064\u306e\u624b\u306e\u60c5\u5831\u304c\u3042\u308b\u5834\u5408\u306f\u624b\u306e\u767d\u90e8\u5206(0xff)\u306e\u307f\u91cd\u306d\u5408\u308f\u305b\u308b\n                            for (int i=0; i<segImageBuffer.Length; i++)\n                            {\n                                segImageBuffer[i] = (byte)(segImageBuffer[i] | tmpBuffer[i]);\n                            }\n                        }\n                    }\n\n                    // TODO:\u5f8c\u3067\u53d6\u5f97\u3057\u3066\u307f\u308b\n                    //iHandData.QueryBoundingBoxImage   // \u624b\u306e\u9818\u57df\n                    //iHandData.QueryMassCenterImage    // 2D Image coordinates\u3067\u306e\u624b\u306e\u4e2d\u5fc3\u5ea7\u6a19\n                    //iHandData.QueryMassCenterWorld    // 3D World Coordinates\u3067\u306e\u624b\u306e\u4e2d\u5fc3\u5ea7\u6a19\n                    //iHandData.QueryExtremityPoint // TODO:Extremities\u30e2\u30fc\u30c9\u3067\u53d6\u5f97\u3057\u3066\u307f\u308b\n\n                    // 1\u3064\u306e\u624b\u306eJoint\u3092\u5165\u308c\u308bList\u3092\u751f\u6210\n                    List<PXCMHandData.JointData> jointList = new List<PXCMHandData.JointData>();\n\n                    // \u624b\u306eJoint\u5ea7\u6a19\u3092\u53d6\u5f97\u3057\u3066List\u306b\u683c\u7d0d\n                    for (int jointIndex = 0; jointIndex < Enum.GetNames(typeof(PXCMHandData.JointType)).Length; jointIndex++)\n                    {\n                        // \u624b\u306e1\u3064\u306eJoint\u5ea7\u6a19\u3092\u53d6\u5f97\n                        PXCMHandData.JointData jointData;\n                        iHandData.QueryTrackedJoint((PXCMHandData.JointType)jointIndex, out jointData);\n\n                        jointList.Add(jointData);\n                    }\n\n                    // \u4f5c\u6210\u3057\u305f1\u3064\u306e\u624b\u306eJoint\u5ea7\u6a19\u30ea\u30b9\u30c8\u3092List\u306b\u683c\u7d0d\n                    handJointsList.Add(jointList);\n                }\n            }\n\n            // SegmentationImage\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u3057\u305f\u3082\u306e\u3092WriteableBitmap\u306b\u66f8\u304d\u8fbc\u3080\n            if (segImageBuffer != null)\n            {\n                m_HandSegmentWBitmap.Dispatcher.BeginInvoke\n                (\n                    new Action(() =>\n                    {\n                        m_HandSegmentWBitmap.WritePixels(segWbRect, segImageBuffer, segWbStride, 0);\n                    }\n                ));\n            }\n\n            // HandJoint\u306e\u5ea7\u6a19\u3092\u753b\u9762\u306b\u8868\u793a\n            if (handJointsList.Count > 0)\n            {\n                m_ColorWBitmap.Dispatcher.BeginInvoke\n                (\n                    new Action(() =>\n                    {\n                        foreach (List<PXCMHandData.JointData> jointList in handJointsList)\n                        {\n                            foreach (PXCMHandData.JointData joint in jointList)\n                            {\n\n                                PXCMPoint3DF32[] depthPoint = new PXCMPoint3DF32[1];\n\n                                depthPoint[0].x = joint.positionImage.x;\n                                depthPoint[0].y = joint.positionImage.y;\n                                depthPoint[0].z = joint.positionWorld.z * 1000; // mm\u3068pixcel\u3092\u5408\u308f\u3059\n\n                                PXCMPointF32[] colorPoint = new PXCMPointF32[1];\n                                pxcmStatus status = m_Projection.MapDepthToColor(depthPoint, colorPoint);\n\n                                // \u6307\u306e\u4f4d\u7f6e\u3092\u63cf\u753b                                \n                                m_ColorWBitmap.FillEllipseCentered((int)colorPoint[0].x,\n                                                                   (int)colorPoint[0].y,\n                                                                   10, 10, Colors.YellowGreen);\n                            }\n                        }\n\n                    }\n                ));\n            }\n\n            m_HandJointWBitmap.Dispatcher.BeginInvoke\n            (\n                new Action(() =>\n                {\n                    m_HandJointWBitmap.Clear();\n\n                    foreach (List<PXCMHandData.JointData> jointList in handJointsList)\n                    {\n                        foreach (PXCMHandData.JointData joint in jointList)\n                        {\n                            m_HandJointWBitmap.FillEllipse(\n                                               (int)joint.positionImage.x, (int)joint.positionImage.y,\n                                               (int)joint.positionImage.x + 6, (int)joint.positionImage.y + 6, Colors.YellowGreen);\n                        }\n                    }\n                }\n            ));\n\n\n        }\n\n\n\n\u30ab\u30e9\u30fc\u753b\u50cf\u3068\u306e\u5ea7\u6a19\u5909\u63db\nHand\u30c7\u30fc\u30bf\u306fDepth\u306e3\u6b21\u5143\u753b\u50cf\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u753b\u9762\u306b\u8868\u793a\u3057\u3066\u3044\u308b\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u5ea7\u6a19\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b\u300cPXCMProjection\u300d\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3053\u306e\u90e8\u5206\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\n\nMainWindows.xaml.cs\n// \u5ea7\u6a19\u5909\u63db\u306e\u305f\u3081\u306eProjection\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\nm_Projection = m_Cm.QueryCaptureManager().QueryDevice().CreateProjection();\n\n\n\u3053\u306e\u90e8\u5206\u3067\u5ea7\u6a19\u306e\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\nMainWindows.xaml.cs\nPXCMPoint3DF32[] depthPoint = new PXCMPoint3DF32[1];\n\ndepthPoint[0].x = joint.positionImage.x;\ndepthPoint[0].y = joint.positionImage.y;\ndepthPoint[0].z = joint.positionWorld.z * 1000; // mm\u3068pixcel\u3092\u5408\u308f\u3059\n\nPXCMPointF32[] colorPoint = new PXCMPointF32[1];\npxcmStatus status = m_Projection.MapDepthToColor(depthPoint, colorPoint);\n\n\n\n\u6240\u611f\n\u300cFull Hand\u300d\u306e\u53d6\u5f97\u3067\u3082\u601d\u3063\u305f\u3088\u308a\u3082\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3082\u60aa\u304f\u306a\u3044\u306e\u3067\u5341\u5206\u5b9f\u7528\u306b\u8010\u3048\u308b\u3068\u304a\u3082\u3044\u307e\u3057\u305f\u3002\n\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u306e\u691c\u77e5\u306b\u3064\u3044\u3066\u306f\u5b8c\u5168\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u4fc3\u3059\u306a\u3069\u304c\u5fc5\u8981\u304b\u306a\u3068\u304a\u3082\u3044\u307e\u3057\u305f\u3002\n\u3057\u3070\u3089\u304f\u524d\u306b\u66f8\u304d\u307e\u3057\u305f\n[\u30a4\u30f3\u30c6\u30eb\u00ae RealSense\u2122 3D\u30ab\u30e1\u30e9 \u3067Hand Tracking](http://qiita.com/n_kimura/items/fae0ab2edfc9968d7477)\n\u2191\u3053\u3061\u3089\u306e\u7d9a\u304d\u3068\u3057\u3066HandTracking\u306e\u5b9f\u88c5\u3092\u3057\u307e\u3057\u305f\u306e\u3067\u8a18\u4e8b\u3068\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\n\n#\u30bd\u30fc\u30b9\n\u672c\u8a18\u4e8b\u306e\u5168\u30bd\u30fc\u30b9\u306f\u4ee5\u4e0b\u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/aquaring/RealSenseTestCode\n\u300cRealSenseHandTracking\u300d\u3068\u3044\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\n\u203b\u30bd\u30fc\u30b9\u306f\u3042\u304f\u307e\u3067\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u3059\u306e\u3067\u3001\u53b3\u5bc6\u306b\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u307e\u305b\u3093\u3057\u3001\n\u3000\u30ab\u30e1\u30e9\u5236\u5fa1\u306e\u51e6\u7406\u306f\u30af\u30e9\u30b9\u306a\u3069\u306b\u305b\u305axaml.cs\u306b\u3079\u305f\u66f8\u304d\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u3042\u304f\u307e\u3067\u57fa\u672c\u7684\u306b\u4f7f\u7528\u65b9\u6cd5\u3092\u62bc\u3055\u3048\u308b\u76ee\u7684\u3067\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\n#\u5b9f\u884c\u7d50\u679c\n\u624b\u306e\u691c\u51fa\u901f\u5ea6\u3084\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u306e\u691c\u51fa\u7cbe\u5ea6\u3092\u898b\u3066\u9802\u304d\u305f\u304fgif\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u306b\u3057\u307e\u3057\u305f\n\n![HandTracking\u52d5\u753b](http://lab.aquaring.co.jp/contents/hand_tracking.gif)\n\ngif\u30a2\u30cb\u306a\u306e\u3067\u3001\u304b\u306a\u308a\u753b\u50cf\u306f\u8352\u304f\u306a\u3063\u3066\u3044\u3066\u3059\u307f\u307e\u305b\u3093\u304c\n\u30fb\u4e0a\u306e\u753b\u50cf\u3000\u3000\u30ab\u30e9\u30fc\u30ab\u30e1\u30e9\u306e\u6620\u50cf\u306b\u691c\u51fa\u3057\u305f\u624b\u30fb\u6307\u306e\u4f4d\u7f6e\u306b\u9ec4\u7dd1\u8272\u306e\u70b9\u3092\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u66f8\u3044\u305f22\u70b9\u306e\u60c5\u5831\u3067\u3059\n\u30fb\u5de6\u4e0b\u306e\u753b\u50cf\u3000\u691c\u51fa\u3057\u305f\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u540d\u3001\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000(\u30a4\u30e1\u30fc\u30b8\u306e\u30b0\u30e9\u30c7\u30fc\u30b7\u30e7\u30f3\u304cgif\u30a2\u30cb\u306a\u306e\u3067\u5b8c\u5168\u306b\u7121\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u307e\u3059\u304c)\n\u30fb\u53f3\u4e0b\u306e\u753b\u50cf\u3000\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u66f8\u3044\u305f\u300cBlob\u300d\u3068\u3057\u3066\u8a8d\u8b58\u3057\u305f\u90e8\u5206\u3092\u767d\u304f\u3057\u3066\u3044\u307e\u3059\n\n\u898b\u3066\u9802\u304f\u3068\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u304c\n22\u70b9\u306e\u691c\u51fa\u901f\u5ea6\u3068\u3057\u3066\u306f\u601d\u3063\u305f\u3088\u308a\u3082\u65e9\u304f\u3066\u4f7f\u3048\u308b\u304b\u306a\u3041\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n(Leap\u3068\u6bd4\u3079\u308b\u3068\u5c11\u3057\u53cd\u5fdc\u304c\u9045\u3044\u3067\u3059\u304c\u753b\u9762\u64cd\u4f5c\u3068\u304b\u306b\u4f7f\u3046\u5206\u306b\u306f\u5168\u7136\u7533\u3057\u5206\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002)\n\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u306b\u3064\u3044\u3066\u306f\u8aa4\u691c\u51fa\u306f\u3059\u308b\u3082\u306e\u306e\u3001\u3046\u307e\u304f\u6761\u4ef6\u3092\u63c3\u3048\u308c\u3070\u5b9f\u7528\u306b\u8010\u3048\u308b\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\n\n#\u5b9f\u88c5\u306e\u30dd\u30a4\u30f3\u30c8\n##HandTracking\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3001\u8a2d\u5b9a\n```csharp:MainWindows.xaml.cs\n// Hand Tracking\u3092\u6709\u52b9\u5316\u3068\u8a2d\u5b9a\nm_Cm.EnableHand();\nPXCMHandModule handModule = m_Cm.QueryHand();\nPXCMHandConfiguration handConfig = handModule.CreateActiveConfiguration();\nhandConfig.SetTrackingMode(PXCMHandData.TrackingModeType.TRACKING_MODE_FULL_HAND);  // FULL_HAND\u30e2\u30fc\u30c9\nhandConfig.EnableSegmentationImage(true);   // SegmentationImage\u306e\u6709\u52b9\u5316\nhandConfig.EnableAllGestures();                 // \u3059\u3079\u3066\u306e\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u3092\u88dc\u8db3\nhandConfig.SubscribeGesture(OnFiredGesture);    // \u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u767a\u751f\u6642\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u30bb\u30c3\u30c8\nhandConfig.ApplyChanges();\n\n// HandData\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\nm_HandData = handModule.CreateOutput();\n```\nPXCMSenseManager\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306bEnableHand()\u3057\u3066HandTracking\u3092\u6709\u52b9\u5316\u3057\u307e\u3059\u3002\nPXCMHandConfiguration\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066HandTracking\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u6700\u5f8c\u306bApplyChanges()\u3067\u8a2d\u5b9a\u3092\u53cd\u6620\u3057\u307e\u3059\u3002\n\nHand\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306bPXCMHandData\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3053\u3053\u3067\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n##Hand\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n\u4eca\u307e\u3067\u306e\u30ab\u30e9\u30fc\u30a4\u30e1\u30fc\u30b8\u306e\u53d6\u5f97\u3068\u540c\u3058\u3088\u3046\u306b\u4eca\u56de\u3082Task\u3067\u30eb\u30fc\u30d7\u3059\u308b\u5f62\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\nPXCMHandData\u306eUpdate()\u3092\u547c\u3093\u3067Hand\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n(HandData\u306e\u66f4\u65b0\u304c\u3055\u308c\u305f\u6642\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3059\u308b\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u304c\u4eca\u56de\u306f\u3057\u3066\u3044\u307e\u305b\u3093)\n\n\u66f4\u65b0\u3055\u308c\u305fHand\u30c7\u30fc\u30bf\u306f\u3001DisplayHandTrackingData()\u306e\u4e2d\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u753b\u9762\u306b\u8868\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u9577\u3044\u3067\u3059\u304c\u3001\u30bd\u30fc\u30b9\u3092\u306e\u305b\u3066\u304a\u304d\u307e\u3059(\u8a73\u7d30\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3082\u3089\u3048\u308c\u3070\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u30fb\u30fb\u30fb)\n\n```csharp:MainWindows.xaml.cs\n        /// <summary>\n        /// HandTracking\u3067\u53d6\u5f97\u3057\u305fHandData\u3092\u53d7\u3051\u53d6\u308a\n        /// \u753b\u9762\u306bHandData\u306e\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\n        /// </summary>\n        private void DisplayHandTrackingData(PXCMHandData handData)\n        {\n            // SegmentationImage\u306e\u60c5\u5831\u683c\u7d0d\u7528\u306e\u5909\u6570\n            int segWbStride = 0;\n            Int32Rect segWbRect = new Int32Rect(0, 0, 0, 0);\n            Byte[] segImageBuffer = null;\n\n            // HandJoint\u306e\u60c5\u5831\u683c\u7d0d\u7528\u306e\u5909\u6570\n            List<List<PXCMHandData.JointData>> handJointsList = new List<List<PXCMHandData.JointData>>();\n\n            for (int handIndex = 0; handIndex < handData.QueryNumberOfHands(); handIndex++)\n            {\n                // IHandData\u3092\u53d6\u5f97\n                PXCMHandData.IHand iHandData;\n                if (handData.QueryHandData(PXCMHandData.AccessOrderType.ACCESS_ORDER_BY_TIME, handIndex, out iHandData) == pxcmStatus.PXCM_STATUS_NO_ERROR)\n                {\n                    // SegmentationImage\u3092\u53d6\u5f97\n                    PXCMImage image;\n                    iHandData.QuerySegmentationImage(out image);    // \u53d6\u5f97\u51fa\u6765\u308b\u753b\u50cf\u306f8bitGray\u30b9\u30b1\u30fc\u30eb\u753b\u50cf \u624b\u306e\u90e8\u5206\u304c0xff(\u767d) \u80cc\u666f\u304c0x00(\u9ed2)\n\n                    // Image\u304b\u3089\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n                    PXCMImage.ImageData data = null ;\n                    pxcmStatus sts = image.AcquireAccess(PXCMImage.Access.ACCESS_READ, PXCMImage.PixelFormat.PIXEL_FORMAT_Y8, out data);\n                    if (sts == pxcmStatus.PXCM_STATUS_NO_ERROR)\n                    {\n                        // ImageData\u304c\u53d6\u5f97\u3067\u304d\u305f\u3089WritableBitmap\u306b\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306b\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3059\u308b\n                        int length = data.pitches[0] * image.info.height;\n                        Byte[] tmpBuffer = data.ToByteArray(0, length);\n\n                        // \u30b9\u30c8\u30e9\u30a4\u30c9\u3068\u63cf\u753b\u9818\u57df\u3092\u53d6\u5f97\n                        segWbStride = data.pitches[0];\n                        segWbRect = new Int32Rect(0, 0, image.info.width, image.info.height);\n\n                        // Image\u30c7\u30fc\u30bf\u306e\u30a2\u30af\u30bb\u30b9\u3092\u7d42\u4e86\u3059\u308b\n                        image.ReleaseAccess(data);\n\n                        // HandSegmentationImage\u306f\u8907\u6570\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u3059\u3067\u306b\u30d0\u30a4\u30c8\u914d\u5217\u3092\u53d6\u5f97\u305a\u307f\u306e\u5834\u5408\u306f\u91cd\u306d\u5408\u308f\u305b\u308b\n                        if (segImageBuffer == null)\n                        {\n                            // \u307e\u3060\u306a\u3044\u5834\u5408\u306f\u3001\u305d\u306e\u307e\u307e\u4f7f\u7528\u3059\u308b\n                            Array.Resize(ref segImageBuffer, tmpBuffer.Length);\n                            tmpBuffer.CopyTo(segImageBuffer, 0);\n\n                        }\n                        else\n                        {\n                            // \u65e2\u306b\u3072\u3068\u3064\u306e\u624b\u306e\u60c5\u5831\u304c\u3042\u308b\u5834\u5408\u306f\u624b\u306e\u767d\u90e8\u5206(0xff)\u306e\u307f\u91cd\u306d\u5408\u308f\u305b\u308b\n                            for (int i=0; i<segImageBuffer.Length; i++)\n                            {\n                                segImageBuffer[i] = (byte)(segImageBuffer[i] | tmpBuffer[i]);\n                            }\n                        }\n                    }\n\n                    // TODO:\u5f8c\u3067\u53d6\u5f97\u3057\u3066\u307f\u308b\n                    //iHandData.QueryBoundingBoxImage   // \u624b\u306e\u9818\u57df\n                    //iHandData.QueryMassCenterImage    // 2D Image coordinates\u3067\u306e\u624b\u306e\u4e2d\u5fc3\u5ea7\u6a19\n                    //iHandData.QueryMassCenterWorld    // 3D World Coordinates\u3067\u306e\u624b\u306e\u4e2d\u5fc3\u5ea7\u6a19\n                    //iHandData.QueryExtremityPoint // TODO:Extremities\u30e2\u30fc\u30c9\u3067\u53d6\u5f97\u3057\u3066\u307f\u308b\n\n                    // 1\u3064\u306e\u624b\u306eJoint\u3092\u5165\u308c\u308bList\u3092\u751f\u6210\n                    List<PXCMHandData.JointData> jointList = new List<PXCMHandData.JointData>();\n                    \n                    // \u624b\u306eJoint\u5ea7\u6a19\u3092\u53d6\u5f97\u3057\u3066List\u306b\u683c\u7d0d\n                    for (int jointIndex = 0; jointIndex < Enum.GetNames(typeof(PXCMHandData.JointType)).Length; jointIndex++)\n                    {\n                        // \u624b\u306e1\u3064\u306eJoint\u5ea7\u6a19\u3092\u53d6\u5f97\n                        PXCMHandData.JointData jointData;\n                        iHandData.QueryTrackedJoint((PXCMHandData.JointType)jointIndex, out jointData);\n\n                        jointList.Add(jointData);\n                    }\n\n                    // \u4f5c\u6210\u3057\u305f1\u3064\u306e\u624b\u306eJoint\u5ea7\u6a19\u30ea\u30b9\u30c8\u3092List\u306b\u683c\u7d0d\n                    handJointsList.Add(jointList);\n                }\n            }\n\n            // SegmentationImage\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u3057\u305f\u3082\u306e\u3092WriteableBitmap\u306b\u66f8\u304d\u8fbc\u3080\n            if (segImageBuffer != null)\n            {\n                m_HandSegmentWBitmap.Dispatcher.BeginInvoke\n                (\n                    new Action(() =>\n                    {\n                        m_HandSegmentWBitmap.WritePixels(segWbRect, segImageBuffer, segWbStride, 0);\n                    }\n                ));\n            }\n\n            // HandJoint\u306e\u5ea7\u6a19\u3092\u753b\u9762\u306b\u8868\u793a\n            if (handJointsList.Count > 0)\n            {\n                m_ColorWBitmap.Dispatcher.BeginInvoke\n                (\n                    new Action(() =>\n                    {\n                        foreach (List<PXCMHandData.JointData> jointList in handJointsList)\n                        {\n                            foreach (PXCMHandData.JointData joint in jointList)\n                            {\n\n                                PXCMPoint3DF32[] depthPoint = new PXCMPoint3DF32[1];\n                                \n                                depthPoint[0].x = joint.positionImage.x;\n                                depthPoint[0].y = joint.positionImage.y;\n                                depthPoint[0].z = joint.positionWorld.z * 1000; // mm\u3068pixcel\u3092\u5408\u308f\u3059\n\n                                PXCMPointF32[] colorPoint = new PXCMPointF32[1];\n                                pxcmStatus status = m_Projection.MapDepthToColor(depthPoint, colorPoint);\n\n                                // \u6307\u306e\u4f4d\u7f6e\u3092\u63cf\u753b                                \n                                m_ColorWBitmap.FillEllipseCentered((int)colorPoint[0].x,\n                                                                   (int)colorPoint[0].y,\n                                                                   10, 10, Colors.YellowGreen);\n                            }\n                        }\n                        \n                    }\n                ));\n            }\n\n            m_HandJointWBitmap.Dispatcher.BeginInvoke\n            (\n                new Action(() =>\n                {\n                    m_HandJointWBitmap.Clear();\n\n                    foreach (List<PXCMHandData.JointData> jointList in handJointsList)\n                    {\n                        foreach (PXCMHandData.JointData joint in jointList)\n                        {\n                            m_HandJointWBitmap.FillEllipse(\n                                               (int)joint.positionImage.x, (int)joint.positionImage.y,\n                                               (int)joint.positionImage.x + 6, (int)joint.positionImage.y + 6, Colors.YellowGreen);\n                        }\n                    }\n                }\n            ));\n            \n\n        }\n```\n\n##\u30ab\u30e9\u30fc\u753b\u50cf\u3068\u306e\u5ea7\u6a19\u5909\u63db\nHand\u30c7\u30fc\u30bf\u306fDepth\u306e3\u6b21\u5143\u753b\u50cf\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u753b\u9762\u306b\u8868\u793a\u3057\u3066\u3044\u308b\u30ab\u30e9\u30fc\u753b\u50cf\u306e\u5ea7\u6a19\u3068\u306f\u7570\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u5909\u63db\u3059\u308b\u305f\u3081\u306b\u300cPXCMProjection\u300d\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u90e8\u5206\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\n\n```csharp:MainWindows.xaml.cs\n// \u5ea7\u6a19\u5909\u63db\u306e\u305f\u3081\u306eProjection\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\nm_Projection = m_Cm.QueryCaptureManager().QueryDevice().CreateProjection();\n```\n\n\u3053\u306e\u90e8\u5206\u3067\u5ea7\u6a19\u306e\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```csharp:MainWindows.xaml.cs\nPXCMPoint3DF32[] depthPoint = new PXCMPoint3DF32[1];\n                                \ndepthPoint[0].x = joint.positionImage.x;\ndepthPoint[0].y = joint.positionImage.y;\ndepthPoint[0].z = joint.positionWorld.z * 1000; // mm\u3068pixcel\u3092\u5408\u308f\u3059\n\nPXCMPointF32[] colorPoint = new PXCMPointF32[1];\npxcmStatus status = m_Projection.MapDepthToColor(depthPoint, colorPoint);\n```\n\n\n\n#\u6240\u611f\n\u300cFull Hand\u300d\u306e\u53d6\u5f97\u3067\u3082\u601d\u3063\u305f\u3088\u308a\u3082\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3082\u60aa\u304f\u306a\u3044\u306e\u3067\u5341\u5206\u5b9f\u7528\u306b\u8010\u3048\u308b\u3068\u304a\u3082\u3044\u307e\u3057\u305f\u3002\n\u30b8\u30a7\u30b9\u30c1\u30e3\u30fc\u306e\u691c\u77e5\u306b\u3064\u3044\u3066\u306f\u5b8c\u5168\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u4fc3\u3059\u306a\u3069\u304c\u5fc5\u8981\u304b\u306a\u3068\u304a\u3082\u3044\u307e\u3057\u305f\u3002\n\n\n", "tags": ["C#", "WPF", "3D\u30ab\u30e1\u30e9", "\u30a4\u30f3\u30c6\u30ebRealSense"]}