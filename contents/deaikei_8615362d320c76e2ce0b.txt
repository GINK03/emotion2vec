{"context": "\n\n\u80cc\u666f\n\u524d\u56de\u3001k-means\u306e\u6700\u9069\u306ak\u6570\u3063\u3066\u3069\u3046\u3084\u3063\u3066\u63a2\u3059\u306e\uff1f\u3063\u3066\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\n\n\u2193\n\u30b3\u30e1\u30f3\u30c8\u6b04\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u300eX-means\u300f\u3092\u8abf\u3079\u307e\u3057\u305f\n\n\u30af\u30e9\u30b9\u30bf\u6570\u3092\u81ea\u52d5\u63a8\u5b9a\u3059\u308bX-means\u6cd5\u306b\u3064\u3044\u3066\n\nPelleg and Moore (2000)\u304c\u63d0\u6848\u3057\u305fK-means\u306e\u62e1\u5f35\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\n\n\n\u30af\u30e9\u30b9\u30bf\u30fc\u6570K\u3092\u81ea\u52d5\u6c7a\u5b9a\u3059\u308b\nk-means\u3092\u30c7\u30fc\u30bf\u6570\u304c\u591a\u304f\u3066\u3082\u9ad8\u901f\u306b\u52d5\u304f\u3088\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5de5\u592b\u3059\u308b\n\u3068\u3044\u3046\u70b9\u304c\u3001\u5f93\u6765\u306ek-means\u3068\u306e\u5dee\u5206\u3002\n\n\n\n\n\"x-means\"\u3067\u30b0\u30b0\u308b\u3068\u6700\u521d\u306b\u51fa\u3066\u304f\u308b2\u672c\u306epopular\u3063\u307d\u3044\u8ad6\u6587\n\n\nX-means: Extending K-means with Efficient Estimation of the Number of Clusters | Carnegie Mellon Univ. (2000)\n\nx-means\u306e\u63d0\u6848\u8ad6\u6587\n\n\n\n\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u81ea\u52d5\u6c7a\u5b9a\u3059\u308bk-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u62e1\u5f35\u306b\u3064\u3044\u3066 | \u5927\u5b66\u5165\u8a66\u30bb\u30f3\u30bf\u30fc \u7814\u7a76\u958b\u767a\u90e8 (2000) \n\n\u65e5\u672c\u4eba\u4f5c\n\u4e0a\u8a18\u306e\u5143\u7956\u8ad6\u6587\u3068\u540c\u5e74\u306b\u51fa\u3055\u308c\u305f x-means\u306e\u6539\u826f\u7248\u306b\u3064\u3044\u3066\u306e\u8ad6\u6587\n\u3053\u3061\u3089\u306f\u8457\u8005\u306b\u3088\u308bR\u3067\u306e\u5b9f\u88c5\u30b3\u30fc\u30c9\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\n\n\n\n\nx-means\u6982\u8981\n\nk-means\u306e\u9010\u6b21\u7e70\u308a\u8fd4\u3057\u3068BIC\u306b\u3088\u308b\u5206\u5272\u505c\u6b62\u57fa\u6e96\u3092\u7528\u3044\u3066\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u6c7a\u5b9a\u3059\u308b\n\nBIC\u306e\u8a08\u7b97\u65b9\u6cd5\u306b\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b\n\n\u57fa\u672c\u7684\u306a\u30a2\u30a4\u30c7\u30a2\u306f\u300c\u30c7\u30fc\u30bf\u306f\u3001\u91cd\u5fc3\u306e\u8fd1\u304f\u306b\u30ac\u30a6\u30b9\u5206\u5e03\u3057\u3066\u3044\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u4eee\u5b9a\u3057\u3066\u3001\n\u78ba\u7387\u5206\u5e03\u306e\u6982\u5ff5\u3092\u5c0e\u5165\u3057\u3001\u305d\u3053\u304b\u3089\u5c24\u5ea6\u3068\u3044\u3046\u6982\u5ff5\u304c\u751f\u307e\u308c\u308b\u306e\u3067\u3001\nBIC\u304c\u8a08\u7b97\u3067\u304d\u308b\u3068\u3044\u3046\u6d41\u308c\n\n\n\nx-means\u3067\u306fk-means\u3092\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3057\u5229\u7528\u3092\u3057\u3066\u3044\u308b\n\nk-means\u306e\u6b20\u70b9\uff08\u521d\u671f\u5024\u4f9d\u5b58\u6027\uff09\u3092\u3072\u304d\u3065\u3063\u3066\u3044\u308b\n\n\n\u30af\u30e9\u30b9\u30bf\u30fc\u306f\u8a08\u7b97\u6bce\u306b\u5c11\u3057\u3065\u3064\u5909\u308f\u308b\n\u3057\u304b\u3057\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u30b5\u30a4\u30ba\u306f\u5b89\u5b9a\u3057\u3066\u306e\u3067\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\u76ee\u5b89\u306b\u306f\u306a\u308b\n\n\n\n\n\u5148\u9a13\u60c5\u5831\u304c\u5168\u304f\u7121\u3044\u6642\u306b\u3001\u767a\u898b\u7684\u306a\u65b9\u6cd5\u306b\u62e0\u3089\u305ak-means\u306e\u304a\u304a\u3088\u305d2\u500d\u5f37\u306e\u8a08\u7b97\u91cf\u3067\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\n\u8a08\u7b97\u306e\u6d41\u308c\n\u5927\u96d1\u628a\u306a\u6d41\u308c\u306f\u3001\n\n\u5c11\u306a\u3044\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3067k-means\u3057\u3066\u3001\n\u51fa\u6765\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u30922-means\u3057\u3066\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u5206\u5272\u3057\u3001\n\u3082\u3057BIC\u304c\u5927\u304d\u304f\u306a\u3063\u305f\u3089\u3001\u63a1\u7528\n2\u306b\u623b\u308b\n\n\n1\u306e\u8ad6\u6587\u304b\u3089Fig\u5f15\u7528\n\n\n\n\uff08\u8ad6\u6587\u304b\u3089\u5f15\u7528\uff09\u6b63\u89e3\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u304c5\u500b\u306e\u6642\u306e\u7cbe\u5ea6\u6bd4\u8f03\n\n\nAIC\u3088\u308a\u3082BIC\u3067\u8a55\u4fa1\u3055\u305b\u305f\u6642\u306e\u307b\u3046\u304c\u6b63\u89e3\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u591a\u304f\u51fa\u3059\nAIC\u3067\u306f\u6bd4\u8f03\u7684\u5927\u304d\u3081\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u51fa\u3059\u50be\u5411\u304c\u3042\u308b\n\u767a\u898b\u7684\u65b9\u6cd5\uff08k-means\u3067\u624b\u52d5\u3067k\u6570\u3092\u6307\u5b9a\u3057\u3066\u3044\u304f\u65b9\u6cd5\uff09\u306e\u7d50\u679c\u304cBIC\u306e\u7d50\u679c\u3068\u8fd1\u3044\uff08\u624b\u52d5\u3067\u51fa\u3057\u305f\u7d50\u679c\u3068\u540c\u3058\u306a\u3089\u305d\u308c\u3092\u81ea\u52d5\u3067\u884c\u3046x-mean\u306e\u65b9\u304c\u512a\u79c0\uff01\uff09\n\n\n\n\n2\u3064\u306e\u8ad6\u6587\u306e\u30ed\u30b8\u30c3\u30af\u306e\u9055\u3044\n\n1 \u306e\u5143\u7956\u8ad6\u6587\u306e\u6982\u8981\n\n\u5168\u3066\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u3067\u540c\u3058\u5206\u6563\u3067\u30c7\u30fc\u30bf\u304c\u6563\u3089\u3070\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u6697\u9ed9\u306e\u3046\u3061\u306b\u4eee\u5b9a\u3057\u3066\u3044\u308b\n\n\n2 \u306e\u6539\u826f\u30ed\u30b8\u30c3\u30af\u8ad6\u6587\u306e\u6982\u8981\n\n\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u5927\u304d\u3055\u306b\u3088\u3063\u3066\u91cd\u5fc3\u304c\u9055\u3046\u306f\u305a\u306a\u306e\u3067\u3001\u305d\u3053\u3082\u63a8\u5b9a\u3059\u308b\u3088\u3046\u306b\u30ed\u30b8\u30c3\u30af\u3092\u4f5c\u3063\u3066\u3044\u308b\n\n\u305d\u306e\u4ed6\u3001x-means\u306b\u95a2\u3059\u308b\u30d6\u30ed\u30b0\u8a18\u4e8b: \n- Python\u3067x-means\u6cd5\u3092\u5b9f\u88c5\u3057\u305f\n- x-means \uff08OpenCV\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u304a\u3044\u3066\u3001k-means\u3092\u4f7f\u3063\u305f\u6e1b\u8272/\u753b\u50cf\u5206\u5272\u51e6\u7406\u3092x-means\u3067\u7f6e\u304d\u63db\u3048\u305f\u8a18\u4e8b\uff09\n- x-means\u6cd5\n- R\u3067k-means\u6cd5\u3068\u305d\u306e\u62e1\u5f352 x-means\u7de8 | \u30b5\u30dc\u30bf\u30fc\u30b8\u30e5\u7981\u6b62\u306e\u304a\u3055\u307c\u308a\u65e5\u8a18\n\nPython\u3067\u306eX-means\u30b9\u30af\u30ea\u30d7\u30c8\nPython\u3067x-means\u6cd5\u3092\u5b9f\u88c5\u3057\u305f [Gist\u30b3\u30fc\u30c9] \u3092\u30b3\u30d4\u30da\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, HTML # Jupyter notebook\u7528\n%matplotlib inline\n\nclass XMeans:\n    \"\"\"\n    x-means\u6cd5\u3092\u884c\u3046\u30af\u30e9\u30b9\n    \"\"\"\n\n    def __init__(self, k_init = 2, **k_means_args):\n        \"\"\"\n        k_init : The initial number of clusters applied to KMeans()\n        \"\"\"\n        self.k_init = k_init\n        self.k_means_args = k_means_args\n\n    def fit(self, X):\n        \"\"\"\n        x-means\u6cd5\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bfX\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\n        X : array-like or sparse matrix, shape=(n_samples, n_features)\n        \"\"\"\n        self.__clusters = [] \n\n        clusters = self.Cluster.build(X, KMeans(self.k_init, **self.k_means_args).fit(X))\n        self.__recursively_split(clusters)\n\n        self.labels_ = np.empty(X.shape[0], dtype = np.intp)\n        for i, c in enumerate(self.__clusters):\n            self.labels_[c.index] = i\n\n        self.cluster_centers_ = np.array([c.center for c in self.__clusters])\n        self.cluster_log_likelihoods_ = np.array([c.log_likelihood() for c in self.__clusters])\n        self.cluster_sizes_ = np.array([c.size for c in self.__clusters])\n\n        return self\n\n    def __recursively_split(self, clusters):\n        \"\"\"\n        \u5f15\u6570\u306eclusters\u3092\u518d\u5e30\u7684\u306b\u5206\u5272\u3059\u308b\n        clusters : list-like object, which contains instances of 'XMeans.Cluster'\n        'XMeans.Cluster'\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u542b\u3080\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n        \"\"\"\n        for cluster in clusters:\n            if cluster.size <= 3:\n                self.__clusters.append(cluster)\n                continue\n\n            k_means = KMeans(2, **self.k_means_args).fit(cluster.data)\n            c1, c2 = self.Cluster.build(cluster.data, k_means, cluster.index)\n\n            beta = np.linalg.norm(c1.center - c2.center) / np.sqrt(np.linalg.det(c1.cov) + np.linalg.det(c2.cov))\n            alpha = 0.5 / stats.norm.cdf(beta)\n            bic = -2 * (cluster.size * np.log(alpha) + c1.log_likelihood() + c2.log_likelihood()) + 2 * cluster.df * np.log(cluster.size)\n\n            if bic < cluster.bic():\n                self.__recursively_split([c1, c2])\n            else:\n                self.__clusters.append(cluster)\n\n    class Cluster:\n        \"\"\"\n        k-means\u6cd5\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\u30bf\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u6301\u3061\u3001\u5c24\u5ea6\u3084BIC\u306e\u8a08\u7b97\u3092\u884c\u3046\u30af\u30e9\u30b9\n        \"\"\"\n\n        @classmethod\n        def build(cls, X, k_means, index = None): \n            if index == None:\n                index = np.array(range(0, X.shape[0]))\n            labels = range(0, k_means.get_params()[\"n_clusters\"])  \n\n            return tuple(cls(X, index, k_means, label) for label in labels) \n\n        # index: X\u306e\u5404\u884c\u306b\u304a\u3051\u308b\u30b5\u30f3\u30d7\u30eb\u304c\u5143\u30c7\u30fc\u30bf\u306e\u4f55\u884c\u76ee\u306e\u3082\u306e\u304b\u3092\u793a\u3059\u30d9\u30af\u30c8\u30eb\n        def __init__(self, X, index, k_means, label):\n            self.data = X[k_means.labels_ == label]\n            self.index = index[k_means.labels_ == label]\n            self.size = self.data.shape[0]\n            self.df = self.data.shape[1] * (self.data.shape[1] + 3) / 2\n            self.center = k_means.cluster_centers_[label]\n            self.cov = np.cov(self.data.T)\n\n        def log_likelihood(self):\n            return sum(stats.multivariate_normal.logpdf(x, self.center, self.cov) for x in self.data)\n\n        def bic(self):\n            return -2 * self.log_likelihood() + self.df * np.log(self.size)\n\nif __name__ == \"__main__\":\n    import matplotlib.pyplot as plt\n\n    # \u30c7\u30fc\u30bf\u306e\u6e96\u5099\n    x = np.array([np.random.normal(loc, 0.1, 20) for loc in np.repeat([1,2], 2)]).flatten() #\u30e9\u30f3\u30c0\u30e0\u306a80\u500b\u306e\u6570\u3092\u751f\u6210\n    y = np.array([np.random.normal(loc, 0.1, 20) for loc in np.tile([1,2], 2)]).flatten() #\u30e9\u30f3\u30c0\u30e0\u306a80\u500b\u306e\u6570\u3092\u751f\u6210\n\n    # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u884c\n    x_means = XMeans(random_state = 1).fit(np.c_[x,y])  \n    print(x_means.labels_)\n    print(x_means.cluster_centers_)\n    print(x_means.cluster_log_likelihoods_)\n    print(x_means.cluster_sizes_)\n\n    # \u7d50\u679c\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.rcParams[\"font.family\"] = \"Hiragino Kaku Gothic Pro\"\n    plt.scatter(x, y, c = x_means.labels_, s = 30)\n    plt.scatter(x_means.cluster_centers_[:,0], x_means.cluster_centers_[:,1], c = \"r\", marker = \"+\", s = 100)\n    plt.xlim(0, 3)\n    plt.ylim(0, 3)\n    plt.title(\"x-means_test1\")\n    plt.legend()\n    plt.grid()\n    plt.show()\n    # plt.savefig(\"clustering.png\", dpi = 200)\n\n[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n 2 2 2 2 2 2]\n[[ 1.01854145  2.00982242]\n [ 1.00199794  1.02110352]\n [ 2.00022392  2.00435037]\n [ 2.04408807  1.0518478 ]]\n[ 42.91288569  44.48049658  37.32131967  29.6422041 ]\n[20 20 20 20]\n\n\n\u21d2\u30004\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066x-means\u3092\u884c\u3044\u3001\u660e\u793a\u7684\u306ak\u6570\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082\u78ba\u304b\u306b4\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u3051\u305f\uff01\n\n\u3082\u3046\u5c11\u3057\u305d\u308c\u3063\u307d\u3044\u30c7\u30fc\u30bf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u305b\u3066\u307f\u308b\n\uff08\u751f\u6210\u6642\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6307\u5b9a\u6570\u306f\u4e00\u5fdc5\uff09\nfrom sklearn.datasets import make_blobs\nX, y = make_blobs(n_samples=500,\n                  n_features=2,\n                  centers=5,\n                  cluster_std=0.8,\n                  center_box=(-10.0, 10.0),\n                  shuffle=True,\n                  random_state=1)  # For reproducibility\n\nx =X[:,0]\ny =X[:,1]\nX=np.c_[x,y]\n\nplt.scatter(x,y,c='white',marker='o',s=50)\nplt.grid()\nplt.show()\n\n\nif __name__ == \"__main__\":\n    import matplotlib.pyplot as plt\n\n    # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u884c\n    x_means = XMeans(random_state = 1).fit(np.c_[X])  \n\n    # \u7d50\u679c\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.rcParams[\"font.family\"] = \"Hiragino Kaku Gothic Pro\"\n    plt.scatter(x, y, c = x_means.labels_, s = 30)\n    plt.scatter(x_means.cluster_centers_[:,0], x_means.cluster_centers_[:,1], c = \"r\", marker = \"*\", s = 250)\n    plt.title(\"x-means_test2\")\n    plt.grid()\n    plt.show()\n\n\n\u21d2\u3000\u3053\u308c\u3082\u3061\u3083\u3093\u3068\u5206\u3051\u305f\uff01\n\n\u3055\u3089\u306b\u30e2\u30e4\u30c3\u3068\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u305b\u3066\u307f\u308b\n\uff08\u751f\u6210\u6642\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6307\u5b9a\u6570\u306f\u4e00\u5fdc8\uff09\nfrom sklearn.datasets import make_blobs\nX, y = make_blobs(n_samples=500,\n                  n_features=2,\n                  centers=8,\n                  cluster_std=1.5,\n                  center_box=(-10.0, 10.0),\n                  shuffle=True,\n                  random_state=1)  # For reproducibility\n\nx =X[:,0]\ny =X[:,1]\nX=np.c_[x,y]\n\nplt.scatter(X[:,0],X[:,1],c='white',marker='o',s=50)\nplt.grid()\nplt.show()\n\n\nif __name__ == \"__main__\":\n    import matplotlib.pyplot as plt\n\n    # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u884c\n    x_means = XMeans(random_state = 1).fit(np.c_[X])  \n\n    # \u7d50\u679c\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.rcParams[\"font.family\"] = \"Hiragino Kaku Gothic Pro\"\n    plt.scatter(x, y, c = x_means.labels_, s = 30)\n    plt.scatter(x_means.cluster_centers_[:,0], x_means.cluster_centers_[:,1], c = \"r\", marker = \"*\", s = 250)\n    plt.title(\"x-means_test3\")\n    plt.grid()\n    plt.show()\n\n\n=> x-means\u306e\u81ea\u52d5\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u306f\u3001\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u6570\u3092\"5\"\u3068\u3057\u3066\u8a08\u7b97\u3002\u305d\u308c\u3063\u307d\u304f\u5206\u3051\u3066\u3044\u308b\u611f\u3002\n\n\u6027\u61f2\u308a\u3082\u306a\u304f\u307e\u305f\u30a8\u30eb\u30dc\u30fc\u56f3\u66f8\u3044\u3066\u307f\u308b\n\u30a8\u30eb\u30dc\u30fc\u56f3\u306e\u898b\u65b9\u306b\u3064\u3044\u3066\u306f\u524d\u56de\u306e\u8a18\u4e8b\u3092\u53c2\u7167\n\uff08\u30af\u30e9\u30b9\u30bf\u30fc1~10\u307e\u3067\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u5185\u8aa4\u5dee\u5e73\u65b9\u548c\u3092\u307e\u3068\u3081\u3066\u51fa\u529b\uff09\ndistortions = []\n\nfor i  in range(1,11):                # 1~10\u30af\u30e9\u30b9\u30bf\u307e\u3067\u4e00\u6c17\u306b\u8a08\u7b97 \n    km = KMeans(n_clusters=i,         # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u500b\u6570\n                init='k-means++',     # k-means++\u6cd5\u306b\u3088\u308a\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3092\u9078\u629e\n                n_init=10,            # \u7570\u306a\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u7528\u3044\u305fk-means\u306e\u5b9f\u884c\u56de\u6570 default: '10' \u5b9f\u884c\u3057\u305f\u3046\u3061\u3082\u3063\u3068SSE\u5024\u304c\u5c0f\u3055\u3044\u30e2\u30c7\u30eb\u3092\u6700\u7d42\u30e2\u30c7\u30eb\u3068\u3057\u3066\u9078\u629e\n                max_iter=300,         # k-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u90e8\u306e\u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570  default: '300'\n                random_state=0)       # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u308b\u4e71\u6570\u767a\u751f\u5668\u306e\u72b6\u614b\n    km.fit(X)                         # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u8a08\u7b97\u3092\u5b9f\u884c\n    distortions.append(km.inertia_)   # km.fit\u3059\u308b\u3068km.inertia_\u304c\u6c42\u307e\u308b\n    y_km = km.fit_predict(X)\n\nplt.plot(range(1,11),distortions,marker='o')\nplt.xlabel('Number of clusters')\nplt.ylabel('Distortion')\nplt.show()\n\n\n=> \u3053\u306e\u56f3\u304b\u3089\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u6570\u3092\"5\"\u3068\u5224\u65ad\u3059\u308b\u306e\u306f\u3084\u306f\u308a\u96e3\u3057\u3044\n\n\u6027\u61f2\u308a\u3082\u306a\u304f\u307e\u305f\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u66f8\u3044\u3066\u307f\u308b\n\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306e\u898b\u65b9\u306b\u3064\u3044\u3066\u306f\u524d\u56de\u306e\u8a18\u4e8b\u3092\u53c2\u7167\n\uff08\u30af\u30e9\u30b9\u30bf\u30fc3~8\u307e\u3067\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u3092\u307e\u3068\u3081\u3066\u51fa\u529b\uff09  \nscikit-learn\u516c\u5f0f\u306e\u30da\u30fc\u30b8\u306e\u30b3\u30fc\u30c9\u3092\u62dd\u501f\uff08\u4e00\u90e8\u66f8\u304d\u63db\u3048\uff09\nkm = KMeans(n_clusters=5,       # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u500b\u6570\n            init='k-means++',   # k-means++\u6cd5\u306b\u3088\u308a\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3092\u9078\u629e\n            n_init=10,          # \u7570\u306a\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u7528\u3044\u305fk-means\u306e\u5b9f\u884c\u56de\u6570 default: '10' \u5b9f\u884c\u3057\u305f\u3046\u3061\u3082\u3063\u3068SSE\u5024\u304c\u5c0f\u3055\u3044\u30e2\u30c7\u30eb\u3092\u6700\u7d42\u30e2\u30c7\u30eb\u3068\u3057\u3066\u9078\u629e\n            max_iter=300,       # k-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u90e8\u306e\u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570  default: '300'\n            random_state=0)     # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u308b\u4e71\u6570\u767a\u751f\u5668\u306e\u72b6\u614b\ny_km = km.fit_predict(X)\n\nfrom __future__ import print_function\n\nfrom sklearn.datasets import make_blobs\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\nprint(__doc__)\n\n# Generating the sample data from make_blobs\n\nX, y = make_blobs(n_samples=500,\n                  n_features=2,\n                  centers=8,\n                  cluster_std=1.5,\n                  center_box=(-10.0, 10.0),\n                  shuffle=True,\n                  random_state=1)  # For reproducibility\n\nrange_n_clusters = [3, 4, 5, 6, 7, 8]\n\nfor n_clusters in range_n_clusters:\n    # Create a subplot with 1 row and 2 columns\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n\n    # The 1st subplot is the silhouette plot\n    # The silhouette coefficient can range from -1, 1 but in this example all\n    # lie within [-0.1, 1]\n    ax1.set_xlim([-0.1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    clusterer = KMeans(n_clusters=n_clusters, random_state=1)\n    cluster_labels = clusterer.fit_predict(X)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\n          \"The average silhouette_score is :\", silhouette_avg)\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(X, cluster_labels,metric='euclidean')\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.spectral(float(i) / n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhoutte score of all the values\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax1.set_yticks([])  # Clear the yaxis labels / ticks\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n    # 2nd Plot showing the actual clusters formed\n    colors = cm.spectral(cluster_labels.astype(float) / n_clusters)\n    ax2.scatter(X[:, 0], X[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors)\n\n    # Labeling the clusters\n    centers = clusterer.cluster_centers_\n    # Draw white circles at cluster centers\n    ax2.scatter(centers[:, 0], centers[:, 1],\n                marker='o', c=\"white\", alpha=1, s=200)\n\n    for i, c in enumerate(centers):\n        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1, s=100)\n\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 1st feature\")\n    ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n    plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n    plt.grid()\n    plt.show()\n\nAutomatically created module for IPython interactive environment\nFor n_clusters = 3 The average silhouette_score is : 0.500273979793\n\n\nFor n_clusters = 4 The average silhouette_score is : 0.473805434223\n\n\nFor n_clusters = 5 The average silhouette_score is : 0.451524016461\n\n\nFor n_clusters = 6 The average silhouette_score is : 0.428239776719\n\n\nFor n_clusters = 7 The average silhouette_score is : 0.427688325647\n\n\nFor n_clusters = 8 The average silhouette_score is : 0.409792863353\n\n\n=> \u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306e\u8a55\u4fa1\u6cd5\u7684\u306b\u306f\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u65707\u3068\u304b8\u3068\u304b\u304c\u826f\u3055\u305d\u3046\u306a\u611f\u3058\u304c\u3059\u308b\n\n\u7d50\u8ad6\n\nx-means\u306f\u78ba\u304b\u306b\u826f\u3044\u611f\u3058\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u304f\u308c\u305d\u3046\n\n\n\u305f\u3060\u3057\u3001\u305d\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\"\u7b54\u3048\u5408\u308f\u305b\"\u3059\u308b\u65b9\u6cd5\u3082\u7121\u3044\u3057\u3001\u3084\u306f\u308a\u300c\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\"\u76ee\u5b89\"\u3092\u5f97\u308b\u300d\u305f\u3081\u306b\u5229\u7528\u3059\u308b\u3068\u3044\u3046\u611f\u3058\u304b\uff1f\n\n\n\u30a8\u30eb\u30dc\u30fc\u56f3\u304b\u3089\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\u76ee\u5b89\u3092\u5f97\u308b\u306e\u306f\u3084\u306f\u308a\u96e3\u3057\u3044...\uff1f\n\u30b7\u30eb\u30a8\u30c3\u30c8\u6cd5\u3082\u540c\u3058\u304f...\n\n\u21d2 \u7d50\u5c40\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u76ee\u7684\u306b\u6cbf\u3063\u3066\u3001\u89e3\u91c8\u3057\u3084\u3059\u3044\u7d50\u679c\u3092\u5f97\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u3042\u308b\u7a0b\u5ea6\u6063\u610f\u7684\u306b\u9078\u629e\u3059\u308b\u611f\u3058\u306b\u306a\u308b\u306e\u304b\uff1f\n\nAppendix\uff08\u5185\u5bb9\u7406\u89e3\u306e\u305f\u3081\u306b\u3044\u308d\u3044\u308d\u8abf\u3079\u305f\u3053\u3068\uff09\nx-means\u6cd5\u306e\u30ed\u30b8\u30c3\u30af\u3092\u8abf\u3079\u3088\u3046\uff01\u2192\u30d9\u30a4\u30b8\u30a2\u30f3\u60c5\u5831\u91cf\u57fa\u6e96\uff08BIC\uff09\u304c\u308f\u304b\u3089\u3093\u2192\u305d\u3082\u305d\u3082AIC\u3082\u304d\u3061\u3093\u3068\u306f\u308f\u304b\u3089\u3093\u2192\u5c24\u5ea6 is \u7d50\u5c40\u4f55\uff1f\u2192\u5c24\u5ea6\u3092\u6c42\u3081\u308b\u306b\u306f\u6700\u5c24\u63a8\u5b9a\u4ee5\u5916\u306b\u3082\u30d9\u30a4\u30ba\u63a8\u5b9a\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u3063\u3066\u3058\u3083\u306a...\n\u305d\u3053\u304b\u3089\u5ef6\u3005\u3068\u7d9a\u304fyak shaving\n\n\"Acutally, my whole life is just one big yak shaving exercise.\" - Joi Ito\n\n\n\u8d64\u6c60\u60c5\u5831\u91cf\u898f\u6e96\uff1aAIC\uff08Akaike's Information Criterion\uff09\n\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u6301\u3064\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3059\u308b\u305f\u3081\u306e\u6307\u6a19\n\n\u3042\u308b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4f5c\u6210\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5897\u3084\u3059\u307b\u3069\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u3068\u306e\u9069\u5408\u5ea6\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304c\u3001\u904e\u5b66\u7fd2\u306b\u9665\u308b\n\u904e\u5b66\u7fd2\u306b\u9665\u3089\u306a\u3044\u305f\u3081\u306b\u306f\u30e2\u30c7\u30eb\u5316\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u6291\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u304c\u3001\u5b9f\u969b\u306b\u3069\u306e\u6570\u306b\u6291\u3048\u308b\u304b\u306f\u96e3\u3057\u3044\u554f\u984c\u3067\u3042\u308b\n\u30e2\u30c7\u30eb\u3067AIC\u3092\u8a08\u7b97\u3057\u3001\u6700\u5c0f\u306e\u5024\u3092\u793a\u305b\u3070\u591a\u304f\u306e\u5834\u5408\u826f\u3044\u30e2\u30c7\u30eb\u9078\u629e\u304c\u3067\u304d\u308b\nAIC\u306f\u30e2\u30c7\u30eb\u306e\u5bfe\u6570\u5c24\u5ea6\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u7cbe\u5ea6\u3068\u8907\u96d1\u3055\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u304c\u3044\u3044\u611f\u3058\u306b\u8a18\u8ff0\u3067\u304d\u3066\u3044\u308b\n\nAIC=\u22122lnL+2kAIC=\u22122lnL+2kAIC = -2\\ln{}L+2k L\u22ef\u3042\u308b\u30e2\u30c7\u30eb\u306b\u304a\u3051\u308b\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5024L \\cdots \u3042\u308b\u30e2\u30c7\u30eb\u306b\u304a\u3051\u308b\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5024 k\u22ef\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570k \\cdots \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570\n\n\u5f0f\u306e\u7b2c1\u9805\u304c\u30e2\u30c7\u30eb\u3078\u306e\u5f53\u3066\u306f\u307e\u308a\u306e\u826f\u3055\u3092\u3001\u7b2c2\u9805\u304c\u30e2\u30c7\u30eb\u306e\u8907\u96d1\u3055\u306b\u5bfe\u3059\u308b\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u8868\u3059\n\u7b2c2\u9805\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u6570\u304c\u5c11\u306a\u3044\u65b9\u304cOverfitting\u554f\u984c\u3092\u907f\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u6570\u3092\u62bc\u3055\u3048\u305f\u30e2\u30c7\u30eb\u306b\u512a\u4f4d\u306b\u50cd\u304f\n\n\n\u3042\u3066\u306f\u307e\u308a\u304c\u826f\u304f\u3066\u3082\u6ec5\u8336\u82e6\u8336\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u306f\u597d\u307e\u3057\u304f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u5f53\u3066\u306f\u307e\u308a\u304c\u826f\u304f\u3001\u306a\u304a\u304b\u3064\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u304c\u5fd7\u5411\u3055\u308c\u308b\u6307\u6a19\n\n\n\u5bfe\u8c61\u3068\u306a\u308b\u5168\u3066\u306e\u30e2\u30c7\u30eb\u3067AIC\u3092\u8a08\u7b97\u3057\u3066\u6700\u5c0f\u3068\u306a\u308b\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3059\u308b\u3068\u4e00\u822c\u7684\u306b\u306f\u826f\u3044\u30e2\u30c7\u30eb\u304c\u9078\u629e\u3067\u304d\u308b\u3068\u3044\u3048\u308b\n\n\u53c2\u8003:\n- Akaike Information Ctiteriion | wikipedia\n- \u6642\u7cfb\u5217\u5206\u6790II\u2015ARMA\u30e2\u30c7\u30eb\uff08\u81ea\u5df1\u56de\u5e30\u79fb\u52d5\u5e73\u5747\u30e2\u30c7\u30eb\uff09\u306e\u8a55\u4fa1\u3068\u5c06\u6765\u4e88\u6e2c | @IT\n\n\u30d9\u30a4\u30b8\u30a2\u30f3\u60c5\u5831\u91cf\u57fa\u6e96\uff1aBIC\uff08Bayesian Information Criterion\uff09\n\nBIC\u304c\u6700\u5c0f\u306e\u5024\u3092\u793a\u305b\u3070\u591a\u304f\u306e\u5834\u5408\u3001\u826f\u3044\u30e2\u30c7\u30eb\u9078\u629e\u304c\u3067\u304d\u308b\nAIC\u3068\u6bd4\u3079\u3001\u7b2c2\u9805\u306e\u30e2\u30c7\u30eb\u306e\u8907\u96d1\u3055\u306b\u5bfe\u3059\u308b\u7f70\u5247\u9805\u306b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u30b5\u30a4\u30ba\u3082\u8003\u616e\u3057\u305f\u6307\u6a19\nAIC\u3068\u306f\u7570\u306a\u308a\u3001\u3053\u306e\u57fa\u6e96\u306b\u3088\u308b\u9078\u629e\u306f\u4e00\u81f4\u6027\uff08\u6a19\u672c\u6570\u304c\u591a\u304f\u306a\u308b\u3068\u771f\u306e\u6b21\u6570\u3092\u3082\u305f\u3089\u3059\u3053\u3068\uff09\u3092\u6301\u3064\n\nBIC=\u22122lnL+k\u22c5ln(n)BIC = -2\\ln{}L+k\\cdot\\ln{(n)} L\u22ef\u3042\u308b\u30e2\u30c7\u30eb\u306b\u304a\u3051\u308b\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5024L \\cdots \u3042\u308b\u30e2\u30c7\u30eb\u306b\u304a\u3051\u308b\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5024 k\u22ef\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u500b\u6570k \\cdots \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u500b\u6570 n\u22ef\u6a19\u672c\u306e\u5927\u304d\u3055\u3042\u308b\u3044\u306f\u89b3\u6e2c\u306e\u6570n \\cdots \u6a19\u672c\u306e\u5927\u304d\u3055\u3042\u308b\u3044\u306f\u89b3\u6e2c\u306e\u6570\n\u53c2\u8003:\nBayesian Information Criterion | wikipedia\n\n\nAIC\u3068BIC\u306e\u9055\u3044\n\n\n\u76ee\u7684\u306e\u9055\u3044\n\n\u4e88\u6e2c\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u30e2\u30c7\u30eb\u9078\u629e\u3092\u3059\u308b\u306e\u3067\u3042\u308c\u3070AIC\u3092\u7528\u3044\u308b\n\u30c7\u30fc\u30bf\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u69cb\u9020\u3092\u77e5\u308d\u3046\u3068\u3059\u308b\u306e\u3067\u3042\u308c\u3070BIC\u3092\u7528\u3044\u308b\n\n\n\n\u6570\u5f0f\u7684\u306a\u9055\u3044\n\n\u7b2c2\u9805\u306e\u7f70\u5247\u9805\n\n\nAIC\u3067\u306f\u3001\u7f70\u5247\u9805\u304c\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u306b\u3088\u3089\u305a\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u3068\u304d\u306b\u7b2c1\u9805\u306e\u6bd4\u91cd\u304c\u5927\u304d\u304f\u306a\u308a\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u304c\u9078\u3070\u308c\u304c\u3061\nBIC\u3067\u306f\u3001\u7f70\u5247\u9805\u3067\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u304c\u8003\u616e\u3055\u308c\u308b\u306e\u3067AIC\u3088\u308a\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u304c\u9078\u3070\u308c\u304c\u3061\n\n\n\n\n\n\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u63a8\u6e2c\u30b9\u30c8\u30e9\u30c6\u30b8\u306e\u9055\u3044\n\nAIC\u306f\u6700\u5c24\u63a8\u5b9a\u306b\u3088\u3063\u3066\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5024\u3092\u6c7a\u5b9a\nBIC\u306f\u30d9\u30a4\u30ba\u63a8\u5b9a\u306b\u3088\u3063\u3066\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5024\u3092\u6c7a\u5b9a\n\u305f\u3060\u3057\u3001\u5fc5\u305a\u3057\u3082\u3053\u306e\u3088\u3046\u306b\u7528\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u3044\u3046\u30b3\u30f3\u30bb\u30f3\u30b5\u30b9\u306f\u306a\u3044\n\n\n\n\u53c2\u8003\uff1a\n- \u8d64\u6c60\u60c5\u5831\u91cf\u57fa\u6e96AIC\u3068\u30d9\u30a4\u30ba\u60c5\u5831\u91cf\u57fa\u6e96BIC | \u6559\u3048\u3066!goo\n- \u30d9\u30a4\u30ba\u60c5\u5831\u91cf\u898f\u6e96\u53ca\u3073\u305d\u306e\u767a\u5c55 \uff5e\u6982\u8aac\u7de8\uff5e | ALBERT Official Blog\n\n\u5c24\u5ea6\u306e\u5fa9\u7fd2\n\u300c\u305d\u3082\u305d\u3082\u5c24\u5ea6\u3063\u3066\u306a\u3093\u3060\u3063\u305f\u3063\u3051\uff1f\u300d\u306e\u5fa9\u7fd2 \n\n\u5f97\u3089\u308c\u305f\u30c7\u30fc\u30bf\u304b\u3089\u8003\u3048\u305f\u3068\u304d\u306e\u30e2\u30c7\u30eb\u306e\u5c24\u3082\u3089\u3057\u3055\u3092\u5c24\u5ea6\u3068\u3044\u3046\u3002\n\u5f15\u7528\u5143\n\u5c24\u5ea6\u95a2\u6570\u306e\u57fa\u672c\u6982\u5ff5\u306f\u3001\u300c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u30c7\u30fc\u30bf\u304c\u89b3\u6e2c\u3055\u308c\u305f\u5f8c\u3001\u305d\u306e\u30c7\u30fc\u30bf\u306f\u5143\u3005\u3069\u3046\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6301\u3064\u78ba\u7387\u5206\u5e03\u304b\u3089\u751f\u307e\u308c\u305f\u3082\u306e\u3060\u3063\u305f\u304b\uff1f\u300d\u3068\u8a00\u3046\u554f\u3044\u306b\u7b54\u3048\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\u5f15\u7528\u5143\n\u5c24\u5ea6\u3068\u306f\uff0c\u78ba\u7387\u3068\u305d\u3063\u304f\u308a\u3067\u3059\u3002\u3057\u304b\u3057\uff0c\u8003\u3048\u65b9\u304c\u9055\u3044\u307e\u3059\u3002\n\u78ba\u7387\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u56fa\u5b9a\u3057\u3066\u30c7\u30fc\u30bf\u304c\u5909\u5316\u3057\u307e\u3059\u304c\uff0c\u5c24\u5ea6\u306f\u30c7\u30fc\u30bf\u3092\u56fa\u5b9a\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5909\u5316\u3059\u308b\u306e\u3067\u3059\u3002\n\u5f15\u7528\u5143\n\n\u53c2\u8003\uff1a\n- \u3010\u7d71\u8a08\u5b66\u3011\u5c24\u5ea6\u3063\u3066\u4f55\uff1f\u3092\u30b0\u30e9\u30d5\u30a3\u30ab\u30eb\u306b\u8aac\u660e\u3057\u3066\u307f\u308b\u3002 | Qiita\n- \u5c24\u5ea6\u3068\u6700\u5c24\u63a8\u5b9a\u6cd5\u306b\u3064\u3044\u3066 | Sunny side up!\n\n\n\u6700\u5c24\u63a8\u5b9a\u3068\u306f\n\u5c24\u5ea6\u304c\u6700\u5927\u3068\u306a\u308b\u3068\u304d = \u63a8\u5b9a\u3057\u305f\u3044\u30e2\u30c7\u30eb\uff08\u78ba\u7387\u5206\u5e03\uff1a\u57fa\u672c\u306f\u30ac\u30a6\u30b9\u5206\u5e03)\u306e\u30d1\u30e9\u30e1\u30fc\u30bf(\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5834\u5408\u306f\u5e73\u5747\u3068\u5206\u6563)\u304c\u308f\u304b\u308b\n\n\u6700\u5c24\u63a8\u5b9a\u3068\u30d9\u30a4\u30ba\u63a8\u5b9a\u306e\u9055\u3044\n\n\n\n\nis\u4f55\uff1f\n\u65b9\u6cd5\n\u3064\u307e\u308a\n\n\n\n\n\u6700\u5c24\u63a8\u5b9a\n\n\u5c24\u5ea6\u3092\u6700\u5927\u5316\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\n\n\u5c24\u5ea6\u306e\u307f\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a\uff08\u4e8b\u524d\u78ba\u7387\u3068\u304b\u8003\u3048\u306a\u3044\uff09\n\u4eca\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u78ba\u7387\u306e\u307f\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a\n\n\n\u30d9\u30a4\u30ba\u63a8\u5b9a\n\n\u4e8b\u5f8c\u78ba\u7387\u3092\u6700\u5927\u5316\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\n\n\u4e8b\u524d\u78ba\u7387\u3068\u5c24\u5ea6\u306e\u4e21\u65b9\u3092\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a\n\u4eca\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3060\u3051\u3067\u306a\u304f\u3001\u4e8b\u524d\u78ba\u7387\u30fb\u4e8b\u5f8c\u78ba\u7387\u3082\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a\n\n\n\n\u53c2\u8003\uff1a\n- \u5c24\u5ea6\u3068\u306f\u4f55\u8005\u306a\u306e\u304b\uff1f | MyEnigma\n- \u30d9\u30a4\u30ba\u63a8\u5b9a\u3068\u6700\u5c24\u63a8\u5b9a\u306e\u9055\u3044 | Tech Tips\n\n\n\u6700\u5c24\u63a8\u5b9a\u3068\u30d9\u30a4\u30ba\u63a8\u5b9a\u3001\u3069\u3063\u3061\u3092\u4f7f\u3048\u3070\u826f\u3044\u306e\uff1f\n\n\uff08\u5927\u96d1\u628a\u306b\u8a00\u3048\u3070\uff09\u57fa\u672c\u7684\u306b\u306f\u3069\u3061\u3089\u3082\u540c\u3058\n\u6700\u5927\u306e\u9055\u3044\u306f\u300c\u4e8b\u524d\u78ba\u7387\u300d\u3092\u8003\u3048\u308b\u304b\u3069\u3046\u304b\n\n\u6700\u5c24\u63a8\u5b9a\u306f\u4e8b\u524d\u78ba\u7387\u3092\u8003\u3048\u306a\u3044\uff08=\u4e00\u69d8\u5206\u5e03\u3092\u4eee\u5b9a\u3057\u3066\u3044\u308b\u3001\u3068\u3082\u8a00\u3048\u308b\uff09\u3002\u3064\u307e\u308a\u4f55\u306b\u3082\u60c5\u5831\u304c\u306a\u3044\u72b6\u614b\u3092\u30b9\u30bf\u30fc\u30c8\u3068\u3057\u3066\u3044\u308b\n\u4e8b\u524d\u78ba\u7387\u304c\u4e00\u69d8\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u6700\u5c24\u63a8\u5b9a\u3068\u30d9\u30a4\u30ba\u63a8\u5b9a\u306e\u7d50\u679c\u306f\u7570\u306a\u308b\n\u30d9\u30a4\u30ba\u63a8\u5b9a\u3067\u306f\u3001\u6700\u9069\u306a\u4e8b\u524d\u78ba\u7387\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u3068\u3001\u3088\u308a\u7cbe\u5ea6\u306e\u9ad8\u3044\u63a8\u5b9a\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\n\n\n\u30d9\u30a4\u30ba\u63a8\u5b9a\u306e\u65b9\u304c\u3088\u308a\u591a\u304f\u306e\u60c5\u5831\u3092\u6d3b\u304b\u3057\u305f\u63a8\u5b9a\u3068\u306a\u3063\u3066\u3044\u308b\n\u4e8b\u524d\u78ba\u7387\u306e\u8a2d\u5b9a\u306f\u4e3b\u89b3\u7684\u306a\u3082\u306e\u306b\u306a\u308a\u304c\u3061\u3002\u3053\u306e\u3053\u3068\u304c\u6700\u5c24\u6d3e\u3068\u30d9\u30a4\u30ba\u6d3e\u306e\u8ad6\u4e89\u306e\u4e2d\u5fc3\u3068\u306a\u3063\u3066\u308b\u3089\u3057\u3044\n\u7279\u306b\u4e8b\u524d\u306b\u4f55\u306e\u4e88\u6e2c\u3082\u306a\u3044or\u6700\u9069\u306a\u4e8b\u524d\u5206\u5e03\u304c\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u300c\u7121\u60c5\u5831\u5206\u5e03\u300d\u3068\u3044\u3046\u4e8b\u524d\u5206\u5e03\u3092\u5229\u7528\u3059\u308b\uff08\u591a\u304f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u7121\u60c5\u5831\u5206\u5e03\u306b\u306a\u3063\u3066\u3044\u308b\uff09\n\n\n\n\n\n\u53c2\u8003\uff1a \u5f93\u6765\u306e\u63a8\u5b9a\u6cd5\u3068\u30d9\u30a4\u30ba\u63a8\u5b9a\u6cd5\u306e\u9055\u3044 | Sunny side up!\n\n\u30d9\u30a4\u30ba\u63a8\u5b9a\u306b\u3064\u3044\u3066\n\u30d9\u30a4\u30ba\u63a8\u5b9a\u306e\u9069\u5408\u5ea6\u3067\u4ee3\u8868\u7684\u306a\u6307\u6a19\u306f\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\uff08BF\uff09\n- BF\u306f2\u3064\u306e\u30e2\u30c7\u30eb\u306e\u5c24\u5ea6\u306e\u6bd4\u3092\u8868\u3059\n- BF\u306fBIC\uff08\u30d9\u30a4\u30ba\u60c5\u5831\u91cf\u57fa\u6e96\uff09\u306b\u8fd1\u4f3c\u53ef\u80fd\n    - 2\u3064\u306e\u30e2\u30c7\u30eb\u306eBIC\u306e\u5dee\u3000\u2252\u3000BF\u306e\u5bfe\u6570\u306e2\u500d \uff08\u203b\u8fd1\u4f3c\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u5225\u7269\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\uff09\n\u4eee\u8aacH0\u3092\u3082\u3064\u30e2\u30c7\u30ebM0\u3068\u4eee\u8aacH1\u3092\u6301\u3064\u30e2\u30c7\u30ebM1\u304c\u5b58\u5728\u3059\u308b\u6642\u3001 \u4eee\u8aacH_0\u3092\u3082\u3064\u30e2\u30c7\u30ebM_0\u3068\u4eee\u8aacH_1\u3092\u6301\u3064\u30e2\u30c7\u30ebM_1\u304c\u5b58\u5728\u3059\u308b\u6642\u3001\nP(H1|D)P(H0|D)=P(D|H1)P(H1)P(D|H0)P(H0)\u22ef\u2460\\frac{P(H_1|D)}{P(H_0|D)}=\\frac{P(D|H_1)P(H_1)}{P(D|H_0)P(H_0)} \\cdots \u2460\nP(D|H1)P(H1)P(D|H0)P(H0)=P(D|H1)P(D|H0)\u00d7P(H1)P(H0)\u22ef\u2461\\frac{P(D|H_1)P(H_1)}{P(D|H_0)P(H_0)}=\\frac{P(D|H_1)}{P(D|H_0)}\u00d7\\frac{P(H_1)}{P(H_0)} \\cdots \u2461\n\u2460\u3001\u2461\u3088\u308a \u2460\u3001\u2461\u3088\u308a \nP(D|H1)P(D|H0)=P(H1|D)P(H0|D)\u00d7P(H0)P(H1)\\frac{P(D|H_1)}{P(D|H_0)} = \\frac{P(H_1|D)}{P(H_0|D)} \u00d7 \\frac{P(H_0)}{P(H_1)}\n\u3064\u307e\u308a\u3064\u307e\u308a\n\u5c24\u5ea6\u306e\u6bd4\uff08\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\uff09=\u4e8b\u5f8c\u78ba\u7387\u306e\u6bd4\u00d7\u4e8b\u524d\u78ba\u7387\u306e\u6bd4\u5c24\u5ea6\u306e\u6bd4\uff08\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\uff09 = \u4e8b\u5f8c\u78ba\u7387\u306e\u6bd4 \u00d7 \u4e8b\u524d\u78ba\u7387\u306e\u6bd4 \n\u53c2\u8003\uff1a\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\u3068\u30e2\u30c7\u30eb\u9078\u629e | SlideShare\n\n\n\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\u306e\u57fa\u6e96\n\n\n\nBF\n2logBF  (\u2252BIC)\nM0\u3068\u6bd4\u3079\u305fM1\u306b\u5bfe\u3059\u308b\u5224\u65ad\n\n\n\n\nBF<1\n2logBF<0\nM0\u306e\u307b\u3046\u304c\u826f\u3044\n\n\n1<BF<3\n0<2logBF<2\nM1\u306e\u307b\u3046\u304c\u304b\u308d\u3046\u3058\u3066\u512a\u308c\u3066\u3044\u308b\n\n\n3<BF<12\n2<2logBF<5\nM1\u306e\u307b\u3046\u304c\u512a\u308c\u3066\u3044\u308b\uff08Positive\uff09\n\n\n12<BF<150\n5<2logBF<10\nM1\u306e\u307b\u3046\u304c\u304b\u306a\u308a\u512a\u308c\u3066\u3044\u308b\uff08Strong\uff09\n\n\n150<BF\n10<2logBF\nM1\u306e\u307b\u3046\u304c\u975e\u5e38\u306b\u512a\u308c\u3066\u3044\u308b\uff08Very Strong\uff09\n\n\n\n\n\n\u30e2\u30c7\u30eb\u8a55\u4fa1\u306b\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\u3092\u7528\u3044\u308b\u3053\u3068\u306e\u30e1\u30ea\u30c3\u30c8\u30fb\u554f\u984c\u70b9\n\u25a0\u30e1\u30ea\u30c3\u30c8\n\n\n\u5e30\u7121\u4eee\u8aac\u306e\u546a\u7e1b\u304b\u3089\u306e\u958b\u653e\n\n\u4f1d\u7d71\u7684\u306a\u691c\u5b9a\u306f\u300c\u5e30\u7121\u4eee\u8aac\u300d\u3068\u300c\u5bfe\u7acb\u4eee\u8aac\u300d\u3068\u3044\u3046\u69cb\u56f3\n\n\n\u3057\u304b\u3057\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\u306a\u3089\u300c\u72ec\u7acb\u3059\u308b2\u3064\u306e\u30e2\u30c7\u30eb(\u4eee\u8aac)\u300d\u3092\u6bd4\u8f03\u3059\u308b\u3060\u3051\n\n\n\u5225\u306b\u300c\u5e30\u7121\u4eee\u8aac\u300d\u306a\u3093\u3066\u306a\u304f\u3066\u3044\u3044\n\n\n\n\n\n\n\n\u6b63\u898f\u5206\u5e03\u306e\u546a\u7e1b\u304b\u3089\u306e\u958b\u653e\n\n\u30d9\u30a4\u30ba\u306e\u5f0f\u306b\u306f\u3001\u4e8b\u524d\u5206\u5e03\u3092\u7d44\u307f\u8fbc\u3093\u3067\u3044\u308b \n\n\n\u300c\u4e8b\u524d\u5206\u5e03\u306f\u6b63\u898f\u5206\u5e03\u3067\u306a\u304f\u3066\u3044\u3044\u300d \u2192 \u3088\u308a\u67d4\u8edf\u306a\u7d71\u8a08\u30e2\u30c7\u30eb\u3092\u3042\u3066\u306f\u3081\u3066\u691c\u8a0e\u53ef\u80fd \u30fb\u30fb\u30fb\u30d9\u30a4\u30ba\u63a8\u5b9a\u304c\u5229\u7528\u3055\u308c\u308b\n\n\n\n\n\n\u25a0\u554f\u984c\u70b9\n\n\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\u306f2\u3064\u306e\u30e2\u30c7\u30eb\u306e\u300c\u5c24\u5ea6\u306e\u6bd4\u300d\n\n\n\u6570\u5024\u306e\u5927\u5c0f\u306f\u3001\u300c2\u3064\u3092\u6bd4\u8f03\u3057\u3066\u3069\u3063\u3061\u304c\u3044\u3044\u304b\u300d\u306b\u3057\u304b\u306a\u3089\u306a\u3044 \n\n\n\u8907\u6570\u306e\u6307\u6a19\u3092\u7b97\u51fa\u3057\u3066\u3001\u30c8\u30fc\u30bf\u30eb\u3067\u8003\u3048\u3066\u3044\u304f\u306e\u304c\u826f\u3044\n\n\n\n\n\u8a08\u7b97\u304c\u5927\u5909\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5897\u3048\u305f\u308a\u4e8b\u524d\u5206\u5e03\u306a\u3069\u306b\u3088\u3063\u3066\u5927\u5909\u306b\u306a\u308b\n\n\n\n\u305d\u306e\u4ed6\u3001\u30d9\u30a4\u30ba\u63a8\u5b9a\u306e\u5229\u70b9\u3068\u6b20\u70b9\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u304c\u8a73\u3057\u3044\n\n\u305d\u306e\u4ed6\u3000\u6700\u9069\u306a\u30e2\u30c7\u30eb\u3092\u9078\u3076\u305f\u3081\u306e\u6307\u6a19\uff08\u76ee\u5b89\uff09\u3068\u306a\u308b\u3082\u306e\u3000\n\n\u504f\u5dee\u60c5\u5831\u91cf\u57fa\u6e96\uff1a DIC\uff08Deviance Information Criterion\uff09\n\u4e8b\u5f8c\u4e88\u6e2cP\u5024\n\nAIC\u3084BIC\u306a\u3069\u306e\u6307\u6a19\u306e\u554f\u984c\u70b9\u3068\u3057\u3066\u3001\u6f5c\u5728\u5909\u6570\u306a\u3069\u304c\u5165\u3063\u305f\u7279\u7570\u30e2\u30c7\u30eb\u306b\u306f\u9069\u7528\u3067\u304d\u306a\u3044\u70b9\u304c\u6319\u3052\u3089\u308c\u308b\n\n\u3053\u308c\u3089\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306b\u3001FIC\uff08Factorized Information Criterion)\u3084FAB\uff08Factorized Asymptotic Bayesian inference\uff09\u3068\u3044\u3046\u60c5\u5831\u91cf\u3082\u3042\u308b\u3089\u3057\u3044\n\n\n\n\u53c2\u8003\uff1a [\u8ad6\u6587] \u7570\u7a2e\u6df7\u5408\u5b66\u7fd2\u306b\u95a2\u3059\u308b\u7c21\u5358\u306a\u307e\u3068\u3081 | \u7cde\u30cd\u30c3\u30c8\u5f01\u6176\n\n# \u80cc\u666f\n\n\u524d\u56de\u3001[k-means\u306e\u6700\u9069\u306ak\u6570\u3063\u3066\u3069\u3046\u3084\u3063\u3066\u63a2\u3059\u306e\uff1f](http://qiita.com/deaikei/items/11a10fde5bb47a2cf2c2)\u3063\u3066\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\n![top.png](https://qiita-image-store.s3.amazonaws.com/0/100780/094cf1b5-f632-d53b-5cd2-1e2b0261f846.png)\n\u2193\n\u30b3\u30e1\u30f3\u30c8\u6b04\n![comment.png](https://qiita-image-store.s3.amazonaws.com/0/100780/ce426f92-191e-f5f4-eb8b-1351ffcdd6a4.png)\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u300eX-means\u300f\u3092\u8abf\u3079\u307e\u3057\u305f\n\n# \u30af\u30e9\u30b9\u30bf\u6570\u3092\u81ea\u52d5\u63a8\u5b9a\u3059\u308bX-means\u6cd5\u306b\u3064\u3044\u3066\n\n- Pelleg and Moore (2000)\u304c\u63d0\u6848\u3057\u305fK-means\u306e\u62e1\u5f35\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\n     1. \u30af\u30e9\u30b9\u30bf\u30fc\u6570K\u3092\u81ea\u52d5\u6c7a\u5b9a\u3059\u308b\n     2. k-means\u3092\u30c7\u30fc\u30bf\u6570\u304c\u591a\u304f\u3066\u3082\u9ad8\u901f\u306b\u52d5\u304f\u3088\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u5de5\u592b\u3059\u308b  \n\u3068\u3044\u3046\u70b9\u304c\u3001\u5f93\u6765\u306ek-means\u3068\u306e\u5dee\u5206\u3002\n     \n### \"x-means\"\u3067\u30b0\u30b0\u308b\u3068\u6700\u521d\u306b\u51fa\u3066\u304f\u308b2\u672c\u306epopular\u3063\u307d\u3044\u8ad6\u6587\n\n1. [X-means: Extending K-means with Efficient Estimation of the Number of Clusters | Carnegie Mellon Univ. (2000)](http://www.cs.cmu.edu/~dpelleg/download/xmeans.pdf)\n    - x-means\u306e\u63d0\u6848\u8ad6\u6587\n\n\n2. [\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u81ea\u52d5\u6c7a\u5b9a\u3059\u308bk-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u62e1\u5f35\u306b\u3064\u3044\u3066 | \u5927\u5b66\u5165\u8a66\u30bb\u30f3\u30bf\u30fc \u7814\u7a76\u958b\u767a\u90e8 (2000)](http://www.rd.dnc.ac.jp/~tunenori/doc/xmeans_euc.pdf)  \n    - \u65e5\u672c\u4eba\u4f5c\n    - \u4e0a\u8a18\u306e\u5143\u7956\u8ad6\u6587\u3068\u540c\u5e74\u306b\u51fa\u3055\u308c\u305f x-means\u306e\u6539\u826f\u7248\u306b\u3064\u3044\u3066\u306e\u8ad6\u6587\n    - \u3053\u3061\u3089\u306f\u8457\u8005\u306b\u3088\u308bR\u3067\u306e\u5b9f\u88c5\u30b3\u30fc\u30c9\u304c[\u516c\u958b](http://www.rd.dnc.ac.jp/~tunenori/src/xmeans.prog)\u3055\u308c\u3066\u3044\u308b\n    \n\n### x-means\u6982\u8981\n\n- k-means\u306e\u9010\u6b21\u7e70\u308a\u8fd4\u3057\u3068BIC\u306b\u3088\u308b\u5206\u5272\u505c\u6b62\u57fa\u6e96\u3092\u7528\u3044\u3066\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u6c7a\u5b9a\u3059\u308b\n- BIC\u306e\u8a08\u7b97\u65b9\u6cd5\u306b\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b\n    - \u57fa\u672c\u7684\u306a\u30a2\u30a4\u30c7\u30a2\u306f\u300c\u30c7\u30fc\u30bf\u306f\u3001\u91cd\u5fc3\u306e\u8fd1\u304f\u306b\u30ac\u30a6\u30b9\u5206\u5e03\u3057\u3066\u3044\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u4eee\u5b9a\u3057\u3066\u3001\n    - \u78ba\u7387\u5206\u5e03\u306e\u6982\u5ff5\u3092\u5c0e\u5165\u3057\u3001\u305d\u3053\u304b\u3089\u5c24\u5ea6\u3068\u3044\u3046\u6982\u5ff5\u304c\u751f\u307e\u308c\u308b\u306e\u3067\u3001\n    - BIC\u304c\u8a08\u7b97\u3067\u304d\u308b\u3068\u3044\u3046\u6d41\u308c\n    \n- x-means\u3067\u306fk-means\u3092\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3057\u5229\u7528\u3092\u3057\u3066\u3044\u308b\n    - k-means\u306e\u6b20\u70b9\uff08\u521d\u671f\u5024\u4f9d\u5b58\u6027\uff09\u3092\u3072\u304d\u3065\u3063\u3066\u3044\u308b\n        - \u30af\u30e9\u30b9\u30bf\u30fc\u306f\u8a08\u7b97\u6bce\u306b\u5c11\u3057\u3065\u3064\u5909\u308f\u308b\n        - \u3057\u304b\u3057\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u30b5\u30a4\u30ba\u306f\u5b89\u5b9a\u3057\u3066\u306e\u3067\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\u76ee\u5b89\u306b\u306f\u306a\u308b\n        \n- \u5148\u9a13\u60c5\u5831\u304c\u5168\u304f\u7121\u3044\u6642\u306b\u3001\u767a\u898b\u7684\u306a\u65b9\u6cd5\u306b\u62e0\u3089\u305ak-means\u306e\u304a\u304a\u3088\u305d2\u500d\u5f37\u306e\u8a08\u7b97\u91cf\u3067\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n    \n### \u8a08\u7b97\u306e\u6d41\u308c\n\u5927\u96d1\u628a\u306a\u6d41\u308c\u306f\u3001\n\n1. \u5c11\u306a\u3044\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3067k-means\u3057\u3066\u3001\n2. \u51fa\u6765\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u30922-means\u3057\u3066\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u5206\u5272\u3057\u3001\n3. \u3082\u3057BIC\u304c\u5927\u304d\u304f\u306a\u3063\u305f\u3089\u3001\u63a1\u7528\n4. 2\u306b\u623b\u308b\n\n#### 1\u306e\u8ad6\u6587\u304b\u3089Fig\u5f15\u7528\n![x-means.png](https://qiita-image-store.s3.amazonaws.com/0/100780/6ff4a3af-8527-24ec-9cf6-f3d39b0c1098.png)\n\n![fig.png](https://qiita-image-store.s3.amazonaws.com/0/100780/da18fdd3-745d-7ee5-9262-7c6d89c34221.png)\n\n\n- \uff08\u8ad6\u6587\u304b\u3089\u5f15\u7528\uff09\u6b63\u89e3\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u304c5\u500b\u306e\u6642\u306e\u7cbe\u5ea6\u6bd4\u8f03\n    - AIC\u3088\u308a\u3082BIC\u3067\u8a55\u4fa1\u3055\u305b\u305f\u6642\u306e\u307b\u3046\u304c\u6b63\u89e3\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u591a\u304f\u51fa\u3059\n    - AIC\u3067\u306f\u6bd4\u8f03\u7684\u5927\u304d\u3081\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\u51fa\u3059\u50be\u5411\u304c\u3042\u308b\n    - \u767a\u898b\u7684\u65b9\u6cd5\uff08k-means\u3067\u624b\u52d5\u3067k\u6570\u3092\u6307\u5b9a\u3057\u3066\u3044\u304f\u65b9\u6cd5\uff09\u306e\u7d50\u679c\u304cBIC\u306e\u7d50\u679c\u3068\u8fd1\u3044\uff08\u624b\u52d5\u3067\u51fa\u3057\u305f\u7d50\u679c\u3068\u540c\u3058\u306a\u3089\u305d\u308c\u3092\u81ea\u52d5\u3067\u884c\u3046x-mean\u306e\u65b9\u304c\u512a\u79c0\uff01\uff09\n\n### 2\u3064\u306e\u8ad6\u6587\u306e\u30ed\u30b8\u30c3\u30af\u306e\u9055\u3044\n\n#### 1 \u306e\u5143\u7956\u8ad6\u6587\u306e\u6982\u8981\n- \u5168\u3066\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u3067\u540c\u3058\u5206\u6563\u3067\u30c7\u30fc\u30bf\u304c\u6563\u3089\u3070\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u6697\u9ed9\u306e\u3046\u3061\u306b\u4eee\u5b9a\u3057\u3066\u3044\u308b\n\n\n#### 2 \u306e\u6539\u826f\u30ed\u30b8\u30c3\u30af\u8ad6\u6587\u306e\u6982\u8981\n- \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u5927\u304d\u3055\u306b\u3088\u3063\u3066\u91cd\u5fc3\u304c\u9055\u3046\u306f\u305a\u306a\u306e\u3067\u3001\u305d\u3053\u3082\u63a8\u5b9a\u3059\u308b\u3088\u3046\u306b\u30ed\u30b8\u30c3\u30af\u3092\u4f5c\u3063\u3066\u3044\u308b\n\n\n\u305d\u306e\u4ed6\u3001x-means\u306b\u95a2\u3059\u308b\u30d6\u30ed\u30b0\u8a18\u4e8b: \n- [Python\u3067x-means\u6cd5\u3092\u5b9f\u88c5\u3057\u305f](http://web-salad.hateblo.jp/entry/2014/07/19/200347)\n- [x-means](http://d.hatena.ne.jp/m-a-o/20100610/p1) \uff08OpenCV\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u304a\u3044\u3066\u3001k-means\u3092\u4f7f\u3063\u305f\u6e1b\u8272/\u753b\u50cf\u5206\u5272\u51e6\u7406\u3092x-means\u3067\u7f6e\u304d\u63db\u3048\u305f\u8a18\u4e8b\uff09\n- [x-means\u6cd5](http://cympfh.cc/paper/memo/xmeans.html)\n- [R\u3067k-means\u6cd5\u3068\u305d\u306e\u62e1\u5f352 x-means\u7de8 | \u30b5\u30dc\u30bf\u30fc\u30b8\u30e5\u7981\u6b62\u306e\u304a\u3055\u307c\u308a\u65e5\u8a18](http://aaaazzzz036.hatenablog.com/entry/2013/11/27/210355)\n\n# Python\u3067\u306eX-means\u30b9\u30af\u30ea\u30d7\u30c8\n\n[Python\u3067x-means\u6cd5\u3092\u5b9f\u88c5\u3057\u305f](http://web-salad.hateblo.jp/entry/2014/07/19/200347) [[Gist\u30b3\u30fc\u30c9]](https://gist.github.com/yasaichi/254a060eff56a3b3b858) \u3092\u30b3\u30d4\u30da\n\n\n```python\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy import stats\nfrom sklearn.cluster import KMeans\nimport matplotlib.pyplot as plt\nfrom IPython.display import display, HTML # Jupyter notebook\u7528\n%matplotlib inline\n```\n\n\n```python\nclass XMeans:\n    \"\"\"\n    x-means\u6cd5\u3092\u884c\u3046\u30af\u30e9\u30b9\n    \"\"\"\n\n    def __init__(self, k_init = 2, **k_means_args):\n        \"\"\"\n        k_init : The initial number of clusters applied to KMeans()\n        \"\"\"\n        self.k_init = k_init\n        self.k_means_args = k_means_args\n\n    def fit(self, X):\n        \"\"\"\n        x-means\u6cd5\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bfX\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\n        X : array-like or sparse matrix, shape=(n_samples, n_features)\n        \"\"\"\n        self.__clusters = [] \n\n        clusters = self.Cluster.build(X, KMeans(self.k_init, **self.k_means_args).fit(X))\n        self.__recursively_split(clusters)\n\n        self.labels_ = np.empty(X.shape[0], dtype = np.intp)\n        for i, c in enumerate(self.__clusters):\n            self.labels_[c.index] = i\n\n        self.cluster_centers_ = np.array([c.center for c in self.__clusters])\n        self.cluster_log_likelihoods_ = np.array([c.log_likelihood() for c in self.__clusters])\n        self.cluster_sizes_ = np.array([c.size for c in self.__clusters])\n\n        return self\n\n    def __recursively_split(self, clusters):\n        \"\"\"\n        \u5f15\u6570\u306eclusters\u3092\u518d\u5e30\u7684\u306b\u5206\u5272\u3059\u308b\n        clusters : list-like object, which contains instances of 'XMeans.Cluster'\n        'XMeans.Cluster'\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u542b\u3080\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n        \"\"\"\n        for cluster in clusters:\n            if cluster.size <= 3:\n                self.__clusters.append(cluster)\n                continue\n\n            k_means = KMeans(2, **self.k_means_args).fit(cluster.data)\n            c1, c2 = self.Cluster.build(cluster.data, k_means, cluster.index)\n           \n            beta = np.linalg.norm(c1.center - c2.center) / np.sqrt(np.linalg.det(c1.cov) + np.linalg.det(c2.cov))\n            alpha = 0.5 / stats.norm.cdf(beta)\n            bic = -2 * (cluster.size * np.log(alpha) + c1.log_likelihood() + c2.log_likelihood()) + 2 * cluster.df * np.log(cluster.size)\n\n            if bic < cluster.bic():\n                self.__recursively_split([c1, c2])\n            else:\n                self.__clusters.append(cluster)\n\n    class Cluster:\n        \"\"\"\n        k-means\u6cd5\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u305f\u30af\u30e9\u30b9\u30bf\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u6301\u3061\u3001\u5c24\u5ea6\u3084BIC\u306e\u8a08\u7b97\u3092\u884c\u3046\u30af\u30e9\u30b9\n        \"\"\"\n\n        @classmethod\n        def build(cls, X, k_means, index = None): \n            if index == None:\n                index = np.array(range(0, X.shape[0]))\n            labels = range(0, k_means.get_params()[\"n_clusters\"])  \n\n            return tuple(cls(X, index, k_means, label) for label in labels) \n\n        # index: X\u306e\u5404\u884c\u306b\u304a\u3051\u308b\u30b5\u30f3\u30d7\u30eb\u304c\u5143\u30c7\u30fc\u30bf\u306e\u4f55\u884c\u76ee\u306e\u3082\u306e\u304b\u3092\u793a\u3059\u30d9\u30af\u30c8\u30eb\n        def __init__(self, X, index, k_means, label):\n            self.data = X[k_means.labels_ == label]\n            self.index = index[k_means.labels_ == label]\n            self.size = self.data.shape[0]\n            self.df = self.data.shape[1] * (self.data.shape[1] + 3) / 2\n            self.center = k_means.cluster_centers_[label]\n            self.cov = np.cov(self.data.T)\n\n        def log_likelihood(self):\n            return sum(stats.multivariate_normal.logpdf(x, self.center, self.cov) for x in self.data)\n\n        def bic(self):\n            return -2 * self.log_likelihood() + self.df * np.log(self.size)\n```\n\n\n```python\nif __name__ == \"__main__\":\n    import matplotlib.pyplot as plt\n\n    # \u30c7\u30fc\u30bf\u306e\u6e96\u5099\n    x = np.array([np.random.normal(loc, 0.1, 20) for loc in np.repeat([1,2], 2)]).flatten() #\u30e9\u30f3\u30c0\u30e0\u306a80\u500b\u306e\u6570\u3092\u751f\u6210\n    y = np.array([np.random.normal(loc, 0.1, 20) for loc in np.tile([1,2], 2)]).flatten() #\u30e9\u30f3\u30c0\u30e0\u306a80\u500b\u306e\u6570\u3092\u751f\u6210\n\n    # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u884c\n    x_means = XMeans(random_state = 1).fit(np.c_[x,y])  \n    print(x_means.labels_)\n    print(x_means.cluster_centers_)\n    print(x_means.cluster_log_likelihoods_)\n    print(x_means.cluster_sizes_)\n\n    # \u7d50\u679c\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.rcParams[\"font.family\"] = \"Hiragino Kaku Gothic Pro\"\n    plt.scatter(x, y, c = x_means.labels_, s = 30)\n    plt.scatter(x_means.cluster_centers_[:,0], x_means.cluster_centers_[:,1], c = \"r\", marker = \"+\", s = 100)\n    plt.xlim(0, 3)\n    plt.ylim(0, 3)\n    plt.title(\"x-means_test1\")\n    plt.legend()\n    plt.grid()\n    plt.show()\n    # plt.savefig(\"clustering.png\", dpi = 200)\n```\n\n    [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n     0 0 0 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n     2 2 2 2 2 2]\n    [[ 1.01854145  2.00982242]\n     [ 1.00199794  1.02110352]\n     [ 2.00022392  2.00435037]\n     [ 2.04408807  1.0518478 ]]\n    [ 42.91288569  44.48049658  37.32131967  29.6422041 ]\n    [20 20 20 20]\n\n\n![output_7_2.png](https://qiita-image-store.s3.amazonaws.com/0/100780/ca37220a-1484-7653-62de-bd21fe35eea5.png)\n\n\n \u21d2\u30004\u30af\u30e9\u30b9\u30bf\u30fc\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066x-means\u3092\u884c\u3044\u3001\u660e\u793a\u7684\u306ak\u6570\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082\u78ba\u304b\u306b4\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u5206\u3051\u305f\uff01\n\n### \u3082\u3046\u5c11\u3057\u305d\u308c\u3063\u307d\u3044\u30c7\u30fc\u30bf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u305b\u3066\u307f\u308b\n\uff08\u751f\u6210\u6642\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6307\u5b9a\u6570\u306f\u4e00\u5fdc5\uff09\n\n\n```python\nfrom sklearn.datasets import make_blobs\nX, y = make_blobs(n_samples=500,\n                  n_features=2,\n                  centers=5,\n                  cluster_std=0.8,\n                  center_box=(-10.0, 10.0),\n                  shuffle=True,\n                  random_state=1)  # For reproducibility\n\nx =X[:,0]\ny =X[:,1]\nX=np.c_[x,y]\n\nplt.scatter(x,y,c='white',marker='o',s=50)\nplt.grid()\nplt.show()\n```\n\n\n![output_10_0.png](https://qiita-image-store.s3.amazonaws.com/0/100780/0565e168-45c0-5de4-b4a5-731b6dcb7803.png)\n\n\n\n\n```python\nif __name__ == \"__main__\":\n    import matplotlib.pyplot as plt\n\n    # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u884c\n    x_means = XMeans(random_state = 1).fit(np.c_[X])  \n\n    # \u7d50\u679c\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.rcParams[\"font.family\"] = \"Hiragino Kaku Gothic Pro\"\n    plt.scatter(x, y, c = x_means.labels_, s = 30)\n    plt.scatter(x_means.cluster_centers_[:,0], x_means.cluster_centers_[:,1], c = \"r\", marker = \"*\", s = 250)\n    plt.title(\"x-means_test2\")\n    plt.grid()\n    plt.show()\n```\n\n![output_11_1.png](https://qiita-image-store.s3.amazonaws.com/0/100780/397b4571-3972-0751-0ae5-53cd1f4f469e.png)\n\n\n\u21d2\u3000\u3053\u308c\u3082\u3061\u3083\u3093\u3068\u5206\u3051\u305f\uff01\n\n### \u3055\u3089\u306b\u30e2\u30e4\u30c3\u3068\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u305b\u3066\u307f\u308b\n\uff08\u751f\u6210\u6642\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6307\u5b9a\u6570\u306f\u4e00\u5fdc8\uff09\n\n\n```python\nfrom sklearn.datasets import make_blobs\nX, y = make_blobs(n_samples=500,\n                  n_features=2,\n                  centers=8,\n                  cluster_std=1.5,\n                  center_box=(-10.0, 10.0),\n                  shuffle=True,\n                  random_state=1)  # For reproducibility\n\nx =X[:,0]\ny =X[:,1]\nX=np.c_[x,y]\n\nplt.scatter(X[:,0],X[:,1],c='white',marker='o',s=50)\nplt.grid()\nplt.show()\n```\n\n\n![output_14_0.png](https://qiita-image-store.s3.amazonaws.com/0/100780/d3d2c032-97fb-891c-a7df-acf5a986a3d3.png)\n\n\n\n```python\nif __name__ == \"__main__\":\n    import matplotlib.pyplot as plt\n\n    # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u884c\n    x_means = XMeans(random_state = 1).fit(np.c_[X])  \n\n    # \u7d50\u679c\u3092\u30d7\u30ed\u30c3\u30c8\n    plt.rcParams[\"font.family\"] = \"Hiragino Kaku Gothic Pro\"\n    plt.scatter(x, y, c = x_means.labels_, s = 30)\n    plt.scatter(x_means.cluster_centers_[:,0], x_means.cluster_centers_[:,1], c = \"r\", marker = \"*\", s = 250)\n    plt.title(\"x-means_test3\")\n    plt.grid()\n    plt.show()\n```\n\n![output_15_1.png](https://qiita-image-store.s3.amazonaws.com/0/100780/d532df02-6f30-d747-3d47-50caed75113d.png)\n\n\n=> x-means\u306e\u81ea\u52d5\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3067\u306f\u3001\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u6570\u3092\"5\"\u3068\u3057\u3066\u8a08\u7b97\u3002\u305d\u308c\u3063\u307d\u304f\u5206\u3051\u3066\u3044\u308b\u611f\u3002\n\n### \u6027\u61f2\u308a\u3082\u306a\u304f\u307e\u305f\u30a8\u30eb\u30dc\u30fc\u56f3\u66f8\u3044\u3066\u307f\u308b\n\u30a8\u30eb\u30dc\u30fc\u56f3\u306e\u898b\u65b9\u306b\u3064\u3044\u3066\u306f[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/deaikei/items/11a10fde5bb47a2cf2c2)\u3092\u53c2\u7167\n\uff08\u30af\u30e9\u30b9\u30bf\u30fc1~10\u307e\u3067\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u5185\u8aa4\u5dee\u5e73\u65b9\u548c\u3092\u307e\u3068\u3081\u3066\u51fa\u529b\uff09\n\n\n```python\ndistortions = []\n\nfor i  in range(1,11):                # 1~10\u30af\u30e9\u30b9\u30bf\u307e\u3067\u4e00\u6c17\u306b\u8a08\u7b97 \n    km = KMeans(n_clusters=i,         # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u500b\u6570\n                init='k-means++',     # k-means++\u6cd5\u306b\u3088\u308a\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3092\u9078\u629e\n                n_init=10,            # \u7570\u306a\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u7528\u3044\u305fk-means\u306e\u5b9f\u884c\u56de\u6570 default: '10' \u5b9f\u884c\u3057\u305f\u3046\u3061\u3082\u3063\u3068SSE\u5024\u304c\u5c0f\u3055\u3044\u30e2\u30c7\u30eb\u3092\u6700\u7d42\u30e2\u30c7\u30eb\u3068\u3057\u3066\u9078\u629e\n                max_iter=300,         # k-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u90e8\u306e\u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570  default: '300'\n                random_state=0)       # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u308b\u4e71\u6570\u767a\u751f\u5668\u306e\u72b6\u614b\n    km.fit(X)                         # \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u8a08\u7b97\u3092\u5b9f\u884c\n    distortions.append(km.inertia_)   # km.fit\u3059\u308b\u3068km.inertia_\u304c\u6c42\u307e\u308b\n    y_km = km.fit_predict(X)\n    \nplt.plot(range(1,11),distortions,marker='o')\nplt.xlabel('Number of clusters')\nplt.ylabel('Distortion')\nplt.show()\n```\n\n\n![output_18_0.png](https://qiita-image-store.s3.amazonaws.com/0/100780/eb568e9c-3603-d595-578b-a551b1f3b38a.png)\n\n\n=> \u3053\u306e\u56f3\u304b\u3089\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u6570\u3092\"5\"\u3068\u5224\u65ad\u3059\u308b\u306e\u306f\u3084\u306f\u308a\u96e3\u3057\u3044\n\n### \u6027\u61f2\u308a\u3082\u306a\u304f\u307e\u305f\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u66f8\u3044\u3066\u307f\u308b\n\n\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306e\u898b\u65b9\u306b\u3064\u3044\u3066\u306f[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/deaikei/items/11a10fde5bb47a2cf2c2)\u3092\u53c2\u7167\n\uff08\u30af\u30e9\u30b9\u30bf\u30fc3~8\u307e\u3067\u306e\u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u3092\u307e\u3068\u3081\u3066\u51fa\u529b\uff09  \n\n[scikit-learn\u516c\u5f0f\u306e\u30da\u30fc\u30b8](http://scikit-learn.org/stable/auto_examples/cluster/plot_kmeans_silhouette_analysis.html#example-cluster-plot-kmeans-silhouette-analysis-py%5D)\u306e\u30b3\u30fc\u30c9\u3092\u62dd\u501f\uff08\u4e00\u90e8\u66f8\u304d\u63db\u3048\uff09\n\n```python\nkm = KMeans(n_clusters=5,       # \u30af\u30e9\u30b9\u30bf\u30fc\u306e\u500b\u6570\n            init='k-means++',   # k-means++\u6cd5\u306b\u3088\u308a\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u3092\u9078\u629e\n            n_init=10,          # \u7570\u306a\u308b\u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5024\u3092\u7528\u3044\u305fk-means\u306e\u5b9f\u884c\u56de\u6570 default: '10' \u5b9f\u884c\u3057\u305f\u3046\u3061\u3082\u3063\u3068SSE\u5024\u304c\u5c0f\u3055\u3044\u30e2\u30c7\u30eb\u3092\u6700\u7d42\u30e2\u30c7\u30eb\u3068\u3057\u3066\u9078\u629e\n            max_iter=300,       # k-means\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u90e8\u306e\u6700\u5927\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570  default: '300'\n            random_state=0)     # \u30bb\u30f3\u30c8\u30ed\u30a4\u30c9\u306e\u521d\u671f\u5316\u306b\u7528\u3044\u308b\u4e71\u6570\u767a\u751f\u5668\u306e\u72b6\u614b\ny_km = km.fit_predict(X)\n```\n\n\n```python\nfrom __future__ import print_function\n\nfrom sklearn.datasets import make_blobs\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_samples, silhouette_score\n\nimport matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\nprint(__doc__)\n\n# Generating the sample data from make_blobs\n\nX, y = make_blobs(n_samples=500,\n                  n_features=2,\n                  centers=8,\n                  cluster_std=1.5,\n                  center_box=(-10.0, 10.0),\n                  shuffle=True,\n                  random_state=1)  # For reproducibility\n\nrange_n_clusters = [3, 4, 5, 6, 7, 8]\n\nfor n_clusters in range_n_clusters:\n    # Create a subplot with 1 row and 2 columns\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    fig.set_size_inches(18, 7)\n\n    # The 1st subplot is the silhouette plot\n    # The silhouette coefficient can range from -1, 1 but in this example all\n    # lie within [-0.1, 1]\n    ax1.set_xlim([-0.1, 1])\n    # The (n_clusters+1)*10 is for inserting blank space between silhouette\n    # plots of individual clusters, to demarcate them clearly.\n    ax1.set_ylim([0, len(X) + (n_clusters + 1) * 10])\n\n    # Initialize the clusterer with n_clusters value and a random generator\n    # seed of 10 for reproducibility.\n    clusterer = KMeans(n_clusters=n_clusters, random_state=1)\n    cluster_labels = clusterer.fit_predict(X)\n\n    # The silhouette_score gives the average value for all the samples.\n    # This gives a perspective into the density and separation of the formed\n    # clusters\n    silhouette_avg = silhouette_score(X, cluster_labels)\n    print(\"For n_clusters =\", n_clusters,\n          \"The average silhouette_score is :\", silhouette_avg)\n\n    # Compute the silhouette scores for each sample\n    sample_silhouette_values = silhouette_samples(X, cluster_labels,metric='euclidean')\n\n    y_lower = 10\n    for i in range(n_clusters):\n        # Aggregate the silhouette scores for samples belonging to\n        # cluster i, and sort them\n        ith_cluster_silhouette_values = \\\n            sample_silhouette_values[cluster_labels == i]\n\n        ith_cluster_silhouette_values.sort()\n\n        size_cluster_i = ith_cluster_silhouette_values.shape[0]\n        y_upper = y_lower + size_cluster_i\n\n        color = cm.spectral(float(i) / n_clusters)\n        ax1.fill_betweenx(np.arange(y_lower, y_upper),\n                          0, ith_cluster_silhouette_values,\n                          facecolor=color, edgecolor=color, alpha=0.7)\n\n        # Label the silhouette plots with their cluster numbers at the middle\n        ax1.text(-0.05, y_lower + 0.5 * size_cluster_i, str(i))\n\n        # Compute the new y_lower for next plot\n        y_lower = y_upper + 10  # 10 for the 0 samples\n\n    ax1.set_title(\"The silhouette plot for the various clusters.\")\n    ax1.set_xlabel(\"The silhouette coefficient values\")\n    ax1.set_ylabel(\"Cluster label\")\n\n    # The vertical line for average silhoutte score of all the values\n    ax1.axvline(x=silhouette_avg, color=\"red\", linestyle=\"--\")\n\n    ax1.set_yticks([])  # Clear the yaxis labels / ticks\n    ax1.set_xticks([-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1])\n\n    # 2nd Plot showing the actual clusters formed\n    colors = cm.spectral(cluster_labels.astype(float) / n_clusters)\n    ax2.scatter(X[:, 0], X[:, 1], marker='.', s=30, lw=0, alpha=0.7,\n                c=colors)\n\n    # Labeling the clusters\n    centers = clusterer.cluster_centers_\n    # Draw white circles at cluster centers\n    ax2.scatter(centers[:, 0], centers[:, 1],\n                marker='o', c=\"white\", alpha=1, s=200)\n\n    for i, c in enumerate(centers):\n        ax2.scatter(c[0], c[1], marker='$%d$' % i, alpha=1, s=100)\n\n    ax2.set_title(\"The visualization of the clustered data.\")\n    ax2.set_xlabel(\"Feature space for the 1st feature\")\n    ax2.set_ylabel(\"Feature space for the 2nd feature\")\n\n    plt.suptitle((\"Silhouette analysis for KMeans clustering on sample data \"\n                  \"with n_clusters = %d\" % n_clusters),\n                 fontsize=14, fontweight='bold')\n    plt.grid()\n    plt.show()\n```\n\n    Automatically created module for IPython interactive environment\n    For n_clusters = 3 The average silhouette_score is : 0.500273979793\n\n\n\n![output_22_1.png](https://qiita-image-store.s3.amazonaws.com/0/100780/f2d92148-b6f3-0baf-3f12-be8f9c87a300.png)\n\n\n    For n_clusters = 4 The average silhouette_score is : 0.473805434223\n\n\n\n![output_22_3.png](https://qiita-image-store.s3.amazonaws.com/0/100780/e072898b-fae0-19d6-3c44-3782905b2865.png)\n\n\n    For n_clusters = 5 The average silhouette_score is : 0.451524016461\n\n\n\n![output_22_5.png](https://qiita-image-store.s3.amazonaws.com/0/100780/73d6eff8-c813-f2ad-9c25-43a5c46051df.png)\n\n\n    For n_clusters = 6 The average silhouette_score is : 0.428239776719\n\n\n\n![output_22_7.png](https://qiita-image-store.s3.amazonaws.com/0/100780/ff8040ce-1f3e-e0ca-68ae-1213979d3dd9.png)\n\n\n    For n_clusters = 7 The average silhouette_score is : 0.427688325647\n\n\n\n![output_22_9.png](https://qiita-image-store.s3.amazonaws.com/0/100780/b095fc68-3213-33f6-10f7-2ece7604b236.png)\n\n\n    For n_clusters = 8 The average silhouette_score is : 0.409792863353\n\n\n\n![output_22_11.png](https://qiita-image-store.s3.amazonaws.com/0/100780/dd12e3a6-6349-2eaa-8a9a-c5b1b7e5d4e1.png)\n\n=> \u30b7\u30eb\u30a8\u30c3\u30c8\u56f3\u306e\u8a55\u4fa1\u6cd5\u7684\u306b\u306f\u3001\u30af\u30e9\u30b9\u30bf\u30fc\u65707\u3068\u304b8\u3068\u304b\u304c\u826f\u3055\u305d\u3046\u306a\u611f\u3058\u304c\u3059\u308b\n\n\n### \u7d50\u8ad6\n\n- x-means\u306f\u78ba\u304b\u306b\u826f\u3044\u611f\u3058\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u304f\u308c\u305d\u3046\n    - \u305f\u3060\u3057\u3001\u305d\u306e\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u3092\"\u7b54\u3048\u5408\u308f\u305b\"\u3059\u308b\u65b9\u6cd5\u3082\u7121\u3044\u3057\u3001\u3084\u306f\u308a\u300c\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\"\u76ee\u5b89\"\u3092\u5f97\u308b\u300d\u305f\u3081\u306b\u5229\u7528\u3059\u308b\u3068\u3044\u3046\u611f\u3058\u304b\uff1f\n- \u30a8\u30eb\u30dc\u30fc\u56f3\u304b\u3089\u6700\u9069\u306a\u30af\u30e9\u30b9\u30bf\u30fc\u6570\u306e\u76ee\u5b89\u3092\u5f97\u308b\u306e\u306f\u3084\u306f\u308a\u96e3\u3057\u3044...\uff1f\n- \u30b7\u30eb\u30a8\u30c3\u30c8\u6cd5\u3082\u540c\u3058\u304f...\n\n\u21d2 \u7d50\u5c40\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u76ee\u7684\u306b\u6cbf\u3063\u3066\u3001\u89e3\u91c8\u3057\u3084\u3059\u3044\u7d50\u679c\u3092\u5f97\u305f\u30af\u30e9\u30b9\u30bf\u30fc\u3092\u3042\u308b\u7a0b\u5ea6\u6063\u610f\u7684\u306b\u9078\u629e\u3059\u308b\u611f\u3058\u306b\u306a\u308b\u306e\u304b\uff1f\n\n\n# Appendix\uff08\u5185\u5bb9\u7406\u89e3\u306e\u305f\u3081\u306b\u3044\u308d\u3044\u308d\u8abf\u3079\u305f\u3053\u3068\uff09\n\nx-means\u6cd5\u306e\u30ed\u30b8\u30c3\u30af\u3092\u8abf\u3079\u3088\u3046\uff01\u2192\u30d9\u30a4\u30b8\u30a2\u30f3\u60c5\u5831\u91cf\u57fa\u6e96\uff08BIC\uff09\u304c\u308f\u304b\u3089\u3093\u2192\u305d\u3082\u305d\u3082AIC\u3082\u304d\u3061\u3093\u3068\u306f\u308f\u304b\u3089\u3093\u2192\u5c24\u5ea6 is \u7d50\u5c40\u4f55\uff1f\u2192\u5c24\u5ea6\u3092\u6c42\u3081\u308b\u306b\u306f\u6700\u5c24\u63a8\u5b9a\u4ee5\u5916\u306b\u3082\u30d9\u30a4\u30ba\u63a8\u5b9a\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u3063\u3066\u3058\u3083\u306a...  \n\u305d\u3053\u304b\u3089\u5ef6\u3005\u3068\u7d9a\u304f[yak shaving](http://0xcc.net/blog/archives/000196.html)\n> \"Acutally, my whole life is just one big yak shaving exercise.\" - [Joi Ito](http://0xcc.net/blog/archives/000196.html)\n\n### \u8d64\u6c60\u60c5\u5831\u91cf\u898f\u6e96\uff1aAIC\uff08Akaike's Information Criterion\uff09\n\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u6301\u3064\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3059\u308b\u305f\u3081\u306e\u6307\u6a19\n\n- \u3042\u308b\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u4f5c\u6210\u3055\u308c\u305f\u30e2\u30c7\u30eb\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5897\u3084\u3059\u307b\u3069\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u3068\u306e\u9069\u5408\u5ea6\u3092\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304c\u3001\u904e\u5b66\u7fd2\u306b\u9665\u308b\n- \u904e\u5b66\u7fd2\u306b\u9665\u3089\u306a\u3044\u305f\u3081\u306b\u306f\u30e2\u30c7\u30eb\u5316\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u3092\u6291\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u304c\u3001\u5b9f\u969b\u306b\u3069\u306e\u6570\u306b\u6291\u3048\u308b\u304b\u306f\u96e3\u3057\u3044\u554f\u984c\u3067\u3042\u308b\n- \u30e2\u30c7\u30eb\u3067AIC\u3092\u8a08\u7b97\u3057\u3001**\u6700\u5c0f\u306e\u5024**\u3092\u793a\u305b\u3070\u591a\u304f\u306e\u5834\u5408\u826f\u3044\u30e2\u30c7\u30eb\u9078\u629e\u304c\u3067\u304d\u308b\n- AIC\u306f\u30e2\u30c7\u30eb\u306e\u5bfe\u6570\u5c24\u5ea6\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u7cbe\u5ea6\u3068\u8907\u96d1\u3055\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u304c\u3044\u3044\u611f\u3058\u306b\u8a18\u8ff0\u3067\u304d\u3066\u3044\u308b\n\n$$AIC = -2\\ln{}L+2k$$  $$L \\cdots \u3042\u308b\u30e2\u30c7\u30eb\u306b\u304a\u3051\u308b\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5024$$  $$k \\cdots \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570$$\n\n- \u5f0f\u306e\u7b2c1\u9805\u304c\u30e2\u30c7\u30eb\u3078\u306e\u5f53\u3066\u306f\u307e\u308a\u306e\u826f\u3055\u3092\u3001\u7b2c2\u9805\u304c\u30e2\u30c7\u30eb\u306e\u8907\u96d1\u3055\u306b\u5bfe\u3059\u308b\u30da\u30ca\u30eb\u30c6\u30a3\u3092\u8868\u3059\n- \u7b2c2\u9805\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u6570\u304c\u5c11\u306a\u3044\u65b9\u304cOverfitting\u554f\u984c\u3092\u907f\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u6570\u3092\u62bc\u3055\u3048\u305f\u30e2\u30c7\u30eb\u306b\u512a\u4f4d\u306b\u50cd\u304f\n    - \u3042\u3066\u306f\u307e\u308a\u304c\u826f\u304f\u3066\u3082\u6ec5\u8336\u82e6\u8336\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u306f\u597d\u307e\u3057\u304f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u5f53\u3066\u306f\u307e\u308a\u304c\u826f\u304f\u3001\u306a\u304a\u304b\u3064\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u304c\u5fd7\u5411\u3055\u308c\u308b\u6307\u6a19\n- \u5bfe\u8c61\u3068\u306a\u308b\u5168\u3066\u306e\u30e2\u30c7\u30eb\u3067AIC\u3092\u8a08\u7b97\u3057\u3066\u6700\u5c0f\u3068\u306a\u308b\u30e2\u30c7\u30eb\u3092\u9078\u629e\u3059\u308b\u3068\u4e00\u822c\u7684\u306b\u306f\u826f\u3044\u30e2\u30c7\u30eb\u304c\u9078\u629e\u3067\u304d\u308b\u3068\u3044\u3048\u308b\n\n\u53c2\u8003:\n- [Akaike Information Ctiteriion | wikipedia](https://ja.wikipedia.org/wiki/%E8%B5%A4%E6%B1%A0%E6%83%85%E5%A0%B1%E9%87%8F%E8%A6%8F%E6%BA%96)\n- [\u6642\u7cfb\u5217\u5206\u6790II\u2015ARMA\u30e2\u30c7\u30eb\uff08\u81ea\u5df1\u56de\u5e30\u79fb\u52d5\u5e73\u5747\u30e2\u30c7\u30eb\uff09\u306e\u8a55\u4fa1\u3068\u5c06\u6765\u4e88\u6e2c | @IT](http://www.atmarkit.co.jp/ait/articles/1409/01/news006_2.html)\n\n### \u30d9\u30a4\u30b8\u30a2\u30f3\u60c5\u5831\u91cf\u57fa\u6e96\uff1aBIC\uff08Bayesian Information Criterion\uff09\n\n- BIC\u304c\u6700\u5c0f\u306e\u5024\u3092\u793a\u305b\u3070\u591a\u304f\u306e\u5834\u5408\u3001\u826f\u3044\u30e2\u30c7\u30eb\u9078\u629e\u304c\u3067\u304d\u308b\n- AIC\u3068\u6bd4\u3079\u3001\u7b2c2\u9805\u306e\u30e2\u30c7\u30eb\u306e\u8907\u96d1\u3055\u306b\u5bfe\u3059\u308b\u7f70\u5247\u9805\u306b\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u30b5\u30a4\u30ba\u3082\u8003\u616e\u3057\u305f\u6307\u6a19\n- AIC\u3068\u306f\u7570\u306a\u308a\u3001\u3053\u306e\u57fa\u6e96\u306b\u3088\u308b\u9078\u629e\u306f\u4e00\u81f4\u6027\uff08\u6a19\u672c\u6570\u304c\u591a\u304f\u306a\u308b\u3068\u771f\u306e\u6b21\u6570\u3092\u3082\u305f\u3089\u3059\u3053\u3068\uff09\u3092\u6301\u3064\n\n$$BIC = -2\\ln{}L+k\\cdot\\ln{(n)}$$  $$L \\cdots \u3042\u308b\u30e2\u30c7\u30eb\u306b\u304a\u3051\u308b\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5024$$  $$k \\cdots \u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u500b\u6570$$  $$n \\cdots \u6a19\u672c\u306e\u5927\u304d\u3055\u3042\u308b\u3044\u306f\u89b3\u6e2c\u306e\u6570$$\n\n\u53c2\u8003:\n[Bayesian Information Criterion | wikipedia](https://en.wikipedia.org/wiki/Bayesian_information_criterion)\n<br>\n#### AIC\u3068BIC\u306e\u9055\u3044\n\n- \u76ee\u7684\u306e\u9055\u3044\n    - \u4e88\u6e2c\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u30e2\u30c7\u30eb\u9078\u629e\u3092\u3059\u308b\u306e\u3067\u3042\u308c\u3070AIC\u3092\u7528\u3044\u308b\n    - \u30c7\u30fc\u30bf\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u69cb\u9020\u3092\u77e5\u308d\u3046\u3068\u3059\u308b\u306e\u3067\u3042\u308c\u3070BIC\u3092\u7528\u3044\u308b\n\n- \u6570\u5f0f\u7684\u306a\u9055\u3044\n    - \u7b2c2\u9805\u306e\u7f70\u5247\u9805\n        - AIC\u3067\u306f\u3001\u7f70\u5247\u9805\u304c\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u306b\u3088\u3089\u305a\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u3068\u304d\u306b\u7b2c1\u9805\u306e\u6bd4\u91cd\u304c\u5927\u304d\u304f\u306a\u308a\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u304c\u9078\u3070\u308c\u304c\u3061\n        - BIC\u3067\u306f\u3001\u7f70\u5247\u9805\u3067\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba\u304c\u8003\u616e\u3055\u308c\u308b\u306e\u3067AIC\u3088\u308a\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u304c\u9078\u3070\u308c\u304c\u3061\n        \n        \n- \u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u63a8\u6e2c\u30b9\u30c8\u30e9\u30c6\u30b8\u306e\u9055\u3044\n    - AIC\u306f\u6700\u5c24\u63a8\u5b9a\u306b\u3088\u3063\u3066\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5024\u3092\u6c7a\u5b9a\n    - BIC\u306f\u30d9\u30a4\u30ba\u63a8\u5b9a\u306b\u3088\u3063\u3066\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5024\u3092\u6c7a\u5b9a\n\n    - \u305f\u3060\u3057\u3001\u5fc5\u305a\u3057\u3082\u3053\u306e\u3088\u3046\u306b\u7528\u3044\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u3044\u3046\u30b3\u30f3\u30bb\u30f3\u30b5\u30b9\u306f\u306a\u3044\n    \n\u53c2\u8003\uff1a\n- [\u8d64\u6c60\u60c5\u5831\u91cf\u57fa\u6e96AIC\u3068\u30d9\u30a4\u30ba\u60c5\u5831\u91cf\u57fa\u6e96BIC | \u6559\u3048\u3066!goo](http://oshiete.goo.ne.jp/qa/7913311.html)\n- [\u30d9\u30a4\u30ba\u60c5\u5831\u91cf\u898f\u6e96\u53ca\u3073\u305d\u306e\u767a\u5c55 \uff5e\u6982\u8aac\u7de8\uff5e | ALBERT Official Blog](http://blog.albert2005.co.jp/2016/04/19/%E3%83%99%E3%82%A4%E3%82%BA%E6%83%85%E5%A0%B1%E9%87%8F%E8%A6%8F%E6%BA%96%E5%8F%8A%E3%81%B3%E3%81%9D%E3%81%AE%E7%99%BA%E5%B1%95-%EF%BD%9E%E6%A6%82%E8%AA%AC%E7%B7%A8%EF%BD%9E/)\n\n### \u5c24\u5ea6\u306e\u5fa9\u7fd2\n\n\u300c\u305d\u3082\u305d\u3082\u5c24\u5ea6\u3063\u3066\u306a\u3093\u3060\u3063\u305f\u3063\u3051\uff1f\u300d\u306e\u5fa9\u7fd2 \n\n>\u5f97\u3089\u308c\u305f\u30c7\u30fc\u30bf\u304b\u3089\u8003\u3048\u305f\u3068\u304d\u306e\u30e2\u30c7\u30eb\u306e\u5c24\u3082\u3089\u3057\u3055\u3092\u5c24\u5ea6\u3068\u3044\u3046\u3002\n[\u5f15\u7528\u5143](http://norimune.net/708)\n\n>\u5c24\u5ea6\u95a2\u6570\u306e\u57fa\u672c\u6982\u5ff5\u306f\u3001**\u300c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u30c7\u30fc\u30bf\u304c\u89b3\u6e2c\u3055\u308c\u305f\u5f8c\u3001\u305d\u306e\u30c7\u30fc\u30bf\u306f\u5143\u3005\u3069\u3046\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u6301\u3064\u78ba\u7387\u5206\u5e03\u304b\u3089\u751f\u307e\u308c\u305f\u3082\u306e\u3060\u3063\u305f\u304b\uff1f\u300d**\u3068\u8a00\u3046\u554f\u3044\u306b\u7b54\u3048\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n[\u5f15\u7528\u5143](http://qiita.com/kenmatsu4/items/b28d1b3b3d291d0cc698)\n\n>\u5c24\u5ea6\u3068\u306f\uff0c\u78ba\u7387\u3068\u305d\u3063\u304f\u308a\u3067\u3059\u3002\u3057\u304b\u3057\uff0c\u8003\u3048\u65b9\u304c\u9055\u3044\u307e\u3059\u3002\n\u78ba\u7387\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u56fa\u5b9a\u3057\u3066\u30c7\u30fc\u30bf\u304c\u5909\u5316\u3057\u307e\u3059\u304c\uff0c\u5c24\u5ea6\u306f\u30c7\u30fc\u30bf\u3092\u56fa\u5b9a\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5909\u5316\u3059\u308b\u306e\u3067\u3059\u3002\n[\u5f15\u7528\u5143](http://norimune.net/2510)\n\n\n\u53c2\u8003\uff1a\n- [\u3010\u7d71\u8a08\u5b66\u3011\u5c24\u5ea6\u3063\u3066\u4f55\uff1f\u3092\u30b0\u30e9\u30d5\u30a3\u30ab\u30eb\u306b\u8aac\u660e\u3057\u3066\u307f\u308b\u3002 | Qiita](http://qiita.com/kenmatsu4/items/b28d1b3b3d291d0cc698)\n- [\u5c24\u5ea6\u3068\u6700\u5c24\u63a8\u5b9a\u6cd5\u306b\u3064\u3044\u3066 | Sunny side up!](http://norimune.net/2510)\n<br>\n#### \u6700\u5c24\u63a8\u5b9a\u3068\u306f\n\u5c24\u5ea6\u304c\u6700\u5927\u3068\u306a\u308b\u3068\u304d = \u63a8\u5b9a\u3057\u305f\u3044\u30e2\u30c7\u30eb\uff08\u78ba\u7387\u5206\u5e03\uff1a\u57fa\u672c\u306f\u30ac\u30a6\u30b9\u5206\u5e03)\u306e\u30d1\u30e9\u30e1\u30fc\u30bf(\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5834\u5408\u306f\u5e73\u5747\u3068\u5206\u6563)\u304c\u308f\u304b\u308b<br>\n### \u6700\u5c24\u63a8\u5b9a\u3068\u30d9\u30a4\u30ba\u63a8\u5b9a\u306e\u9055\u3044\n\n|  | is\u4f55\uff1f | \u65b9\u6cd5 | \u3064\u307e\u308a |\n|:-----------|:------------|:------------|:------------|\n| \u6700\u5c24\u63a8\u5b9a       | **\u5c24\u5ea6\u3092\u6700\u5927\u5316\u3059\u308b**\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5 |**\u5c24\u5ea6\u306e\u307f**\u3067\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a\uff08\u4e8b\u524d\u78ba\u7387\u3068\u304b\u8003\u3048\u306a\u3044\uff09 |\u4eca\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u306e\u78ba\u7387\u306e\u307f\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a|\n| \u30d9\u30a4\u30ba\u63a8\u5b9a     | **\u4e8b\u5f8c\u78ba\u7387\u3092\u6700\u5927\u5316\u3059\u308b**\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5 | **\u4e8b\u524d\u78ba\u7387\u3068\u5c24\u5ea6**\u306e\u4e21\u65b9\u3092\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a|\u4eca\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3060\u3051\u3067\u306a\u304f\u3001\u4e8b\u524d\u78ba\u7387\u30fb\u4e8b\u5f8c\u78ba\u7387\u3082\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a8\u5b9a|\n\n\u53c2\u8003\uff1a\n- [\u5c24\u5ea6\u3068\u306f\u4f55\u8005\u306a\u306e\u304b\uff1f | MyEnigma](http://myenigma.hatenablog.com/entry/20120624/1340538748)\n- [\u30d9\u30a4\u30ba\u63a8\u5b9a\u3068\u6700\u5c24\u63a8\u5b9a\u306e\u9055\u3044 | Tech Tips](http://techtipshoge.blogspot.jp/2011/09/blog-post_20.html)\n<br>\n#### \u6700\u5c24\u63a8\u5b9a\u3068\u30d9\u30a4\u30ba\u63a8\u5b9a\u3001\u3069\u3063\u3061\u3092\u4f7f\u3048\u3070\u826f\u3044\u306e\uff1f\n\n- \uff08\u5927\u96d1\u628a\u306b\u8a00\u3048\u3070\uff09\u57fa\u672c\u7684\u306b\u306f\u3069\u3061\u3089\u3082\u540c\u3058\n- \u6700\u5927\u306e\u9055\u3044\u306f**\u300c\u4e8b\u524d\u78ba\u7387\u300d\u3092\u8003\u3048\u308b\u304b\u3069\u3046\u304b**\n    - \u6700\u5c24\u63a8\u5b9a\u306f\u4e8b\u524d\u78ba\u7387\u3092\u8003\u3048\u306a\u3044\uff08=\u4e00\u69d8\u5206\u5e03\u3092\u4eee\u5b9a\u3057\u3066\u3044\u308b\u3001\u3068\u3082\u8a00\u3048\u308b\uff09\u3002\u3064\u307e\u308a\u4f55\u306b\u3082\u60c5\u5831\u304c\u306a\u3044\u72b6\u614b\u3092\u30b9\u30bf\u30fc\u30c8\u3068\u3057\u3066\u3044\u308b\n    - \u4e8b\u524d\u78ba\u7387\u304c\u4e00\u69d8\u3067\u306a\u3044\u5834\u5408\u306f\u3001\u6700\u5c24\u63a8\u5b9a\u3068\u30d9\u30a4\u30ba\u63a8\u5b9a\u306e\u7d50\u679c\u306f\u7570\u306a\u308b\n    - \u30d9\u30a4\u30ba\u63a8\u5b9a\u3067\u306f\u3001\u6700\u9069\u306a\u4e8b\u524d\u78ba\u7387\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u3068\u3001\u3088\u308a\u7cbe\u5ea6\u306e\u9ad8\u3044\u63a8\u5b9a\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\n        - \u30d9\u30a4\u30ba\u63a8\u5b9a\u306e\u65b9\u304c\u3088\u308a\u591a\u304f\u306e\u60c5\u5831\u3092\u6d3b\u304b\u3057\u305f\u63a8\u5b9a\u3068\u306a\u3063\u3066\u3044\u308b\n        - \u4e8b\u524d\u78ba\u7387\u306e\u8a2d\u5b9a\u306f\u4e3b\u89b3\u7684\u306a\u3082\u306e\u306b\u306a\u308a\u304c\u3061\u3002\u3053\u306e\u3053\u3068\u304c\u6700\u5c24\u6d3e\u3068\u30d9\u30a4\u30ba\u6d3e\u306e\u8ad6\u4e89\u306e\u4e2d\u5fc3\u3068\u306a\u3063\u3066\u308b\u3089\u3057\u3044\n        - \u7279\u306b\u4e8b\u524d\u306b\u4f55\u306e\u4e88\u6e2c\u3082\u306a\u3044or\u6700\u9069\u306a\u4e8b\u524d\u5206\u5e03\u304c\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u300c\u7121\u60c5\u5831\u5206\u5e03\u300d\u3068\u3044\u3046\u4e8b\u524d\u5206\u5e03\u3092\u5229\u7528\u3059\u308b\uff08\u591a\u304f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u7121\u60c5\u5831\u5206\u5e03\u306b\u306a\u3063\u3066\u3044\u308b\uff09\n\n\u53c2\u8003\uff1a [\u5f93\u6765\u306e\u63a8\u5b9a\u6cd5\u3068\u30d9\u30a4\u30ba\u63a8\u5b9a\u6cd5\u306e\u9055\u3044 | Sunny side up!](http://norimune.net/708)\n\n\n### \u30d9\u30a4\u30ba\u63a8\u5b9a\u306b\u3064\u3044\u3066\n\n\u30d9\u30a4\u30ba\u63a8\u5b9a\u306e\u9069\u5408\u5ea6\u3067\u4ee3\u8868\u7684\u306a\u6307\u6a19\u306f**\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\uff08BF\uff09**\n- BF\u306f2\u3064\u306e\u30e2\u30c7\u30eb\u306e**\u5c24\u5ea6\u306e\u6bd4**\u3092\u8868\u3059\n- BF\u306fBIC\uff08\u30d9\u30a4\u30ba\u60c5\u5831\u91cf\u57fa\u6e96\uff09\u306b\u8fd1\u4f3c\u53ef\u80fd\n    - 2\u3064\u306e\u30e2\u30c7\u30eb\u306eBIC\u306e\u5dee\u3000\u2252\u3000BF\u306e\u5bfe\u6570\u306e2\u500d \uff08\u203b\u8fd1\u4f3c\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u5225\u7269\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\uff09\n    \n\n\n$$ \u4eee\u8aacH_0\u3092\u3082\u3064\u30e2\u30c7\u30ebM_0\u3068\u4eee\u8aacH_1\u3092\u6301\u3064\u30e2\u30c7\u30ebM_1\u304c\u5b58\u5728\u3059\u308b\u6642\u3001$$\n\n$$\\frac{P(H_1|D)}{P(H_0|D)}=\\frac{P(D|H_1)P(H_1)}{P(D|H_0)P(H_0)} \\cdots \u2460$$\n\n$$\\frac{P(D|H_1)P(H_1)}{P(D|H_0)P(H_0)}=\\frac{P(D|H_1)}{P(D|H_0)}\u00d7\\frac{P(H_1)}{P(H_0)} \\cdots \u2461$$\n\n$$ \u2460\u3001\u2461\u3088\u308a $$\n\n$$\\frac{P(D|H_1)}{P(D|H_0)} = \\frac{P(H_1|D)}{P(H_0|D)} \u00d7 \\frac{P(H_0)}{P(H_1)}$$\n\n$$\u3064\u307e\u308a$$\n\n$$\u5c24\u5ea6\u306e\u6bd4\uff08\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\uff09 = \u4e8b\u5f8c\u78ba\u7387\u306e\u6bd4 \u00d7 \u4e8b\u524d\u78ba\u7387\u306e\u6bd4 $$\n\n    \n\u53c2\u8003\uff1a[\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\u3068\u30e2\u30c7\u30eb\u9078\u629e | SlideShare](http://www.slideshare.net/kazutantan/bayes-factor)\n<br>\n#### \u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\u306e\u57fa\u6e96\n\n| BF | 2logBF  (\u2252BIC)| M0\u3068\u6bd4\u3079\u305fM1\u306b\u5bfe\u3059\u308b\u5224\u65ad |\n|:-----------|:------------|:------------|:------------|\n| BF<1| 2logBF<0 | M0\u306e\u307b\u3046\u304c\u826f\u3044 |\n| 1<BF<3| 0<2logBF<2 | M1\u306e\u307b\u3046\u304c\u304b\u308d\u3046\u3058\u3066\u512a\u308c\u3066\u3044\u308b |\n| 3<BF<12| 2<2logBF<5 |M1\u306e\u307b\u3046\u304c\u512a\u308c\u3066\u3044\u308b\uff08Positive\uff09|\n| 12<BF<150| 5<2logBF<10 | M1\u306e\u307b\u3046\u304c\u304b\u306a\u308a\u512a\u308c\u3066\u3044\u308b\uff08Strong\uff09|\n| 150<BF| 10<2logBF | M1\u306e\u307b\u3046\u304c\u975e\u5e38\u306b\u512a\u308c\u3066\u3044\u308b\uff08Very Strong\uff09|  \n<br>\n\n#### \u30e2\u30c7\u30eb\u8a55\u4fa1\u306b\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\u3092\u7528\u3044\u308b\u3053\u3068\u306e\u30e1\u30ea\u30c3\u30c8\u30fb\u554f\u984c\u70b9\n\n\u25a0\u30e1\u30ea\u30c3\u30c8\n\n- \u5e30\u7121\u4eee\u8aac\u306e\u546a\u7e1b\u304b\u3089\u306e\u958b\u653e\n    - \u4f1d\u7d71\u7684\u306a\u691c\u5b9a\u306f\u300c\u5e30\u7121\u4eee\u8aac\u300d\u3068\u300c\u5bfe\u7acb\u4eee\u8aac\u300d\u3068\u3044\u3046\u69cb\u56f3\n        - \u3057\u304b\u3057\u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\u306a\u3089\u300c\u72ec\u7acb\u3059\u308b2\u3064\u306e\u30e2\u30c7\u30eb(\u4eee\u8aac)\u300d\u3092\u6bd4\u8f03\u3059\u308b\u3060\u3051\n            - \u5225\u306b\u300c\u5e30\u7121\u4eee\u8aac\u300d\u306a\u3093\u3066\u306a\u304f\u3066\u3044\u3044\n\n- \u6b63\u898f\u5206\u5e03\u306e\u546a\u7e1b\u304b\u3089\u306e\u958b\u653e\n    - \u30d9\u30a4\u30ba\u306e\u5f0f\u306b\u306f\u3001\u4e8b\u524d\u5206\u5e03\u3092\u7d44\u307f\u8fbc\u3093\u3067\u3044\u308b \n        - \u300c\u4e8b\u524d\u5206\u5e03\u306f\u6b63\u898f\u5206\u5e03\u3067\u306a\u304f\u3066\u3044\u3044\u300d \u2192 \u3088\u308a\u67d4\u8edf\u306a\u7d71\u8a08\u30e2\u30c7\u30eb\u3092\u3042\u3066\u306f\u3081\u3066\u691c\u8a0e\u53ef\u80fd \u30fb\u30fb\u30fb\u30d9\u30a4\u30ba\u63a8\u5b9a\u304c\u5229\u7528\u3055\u308c\u308b\n        \n\u25a0\u554f\u984c\u70b9\n\n- \u30d9\u30a4\u30ba\u30d5\u30a1\u30af\u30bf\u30fc\u306f2\u3064\u306e\u30e2\u30c7\u30eb\u306e\u300c\u5c24\u5ea6\u306e\u6bd4\u300d\n    - \u6570\u5024\u306e\u5927\u5c0f\u306f\u3001\u300c2\u3064\u3092\u6bd4\u8f03\u3057\u3066\u3069\u3063\u3061\u304c\u3044\u3044\u304b\u300d\u306b\u3057\u304b\u306a\u3089\u306a\u3044 \n        - \u8907\u6570\u306e\u6307\u6a19\u3092\u7b97\u51fa\u3057\u3066\u3001\u30c8\u30fc\u30bf\u30eb\u3067\u8003\u3048\u3066\u3044\u304f\u306e\u304c\u826f\u3044\n- \u8a08\u7b97\u304c\u5927\u5909\n    - \u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5897\u3048\u305f\u308a\u4e8b\u524d\u5206\u5e03\u306a\u3069\u306b\u3088\u3063\u3066\u5927\u5909\u306b\u306a\u308b\n\n\u305d\u306e\u4ed6\u3001\u30d9\u30a4\u30ba\u63a8\u5b9a\u306e\u5229\u70b9\u3068\u6b20\u70b9\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089](http://norimune.net/708)\u304c\u8a73\u3057\u3044\n\n#### \u305d\u306e\u4ed6\u3000\u6700\u9069\u306a\u30e2\u30c7\u30eb\u3092\u9078\u3076\u305f\u3081\u306e\u6307\u6a19\uff08\u76ee\u5b89\uff09\u3068\u306a\u308b\u3082\u306e\u3000\n\n- \u504f\u5dee\u60c5\u5831\u91cf\u57fa\u6e96\uff1a DIC\uff08Deviance Information Criterion\uff09\n- \u4e8b\u5f8c\u4e88\u6e2cP\u5024\n\n\n- AIC\u3084BIC\u306a\u3069\u306e\u6307\u6a19\u306e\u554f\u984c\u70b9\u3068\u3057\u3066\u3001\u6f5c\u5728\u5909\u6570\u306a\u3069\u304c\u5165\u3063\u305f\u7279\u7570\u30e2\u30c7\u30eb\u306b\u306f\u9069\u7528\u3067\u304d\u306a\u3044\u70b9\u304c\u6319\u3052\u3089\u308c\u308b\n    - \u3053\u308c\u3089\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306b\u3001FIC\uff08Factorized Information Criterion)\u3084FAB\uff08Factorized Asymptotic Bayesian inference\uff09\u3068\u3044\u3046\u60c5\u5831\u91cf\u3082\u3042\u308b\u3089\u3057\u3044\n\n\u53c2\u8003\uff1a [[\u8ad6\u6587] \u7570\u7a2e\u6df7\u5408\u5b66\u7fd2\u306b\u95a2\u3059\u308b\u7c21\u5358\u306a\u307e\u3068\u3081 | \u7cde\u30cd\u30c3\u30c8\u5f01\u6176](http://d.hatena.ne.jp/repose/20150718/1437152382)\n", "tags": ["Python", "x-means", "scikit-learn", "\u6a5f\u68b0\u5b66\u7fd2"]}