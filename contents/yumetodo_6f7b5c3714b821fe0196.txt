{"context": "\n\n\n\n\u306f\u3044\u3001\u96d1\u30b3\u30e9\u3059\u307f\u307e\u305b\u3093\u3002\u304d\u3063\u3068\n\u541b\u306e\u540d\u306f\u30fb\u30fbYARN\uff01\n\u306a\u3093\u3066\u3082\u306e\u3092\u898b\u305f\u305b\u3044\u3067\u3059(\u8cac\u4efb\u8ee2\u5ac1)\u3002\n\u307e\u3060\u6620\u753b\u4e0a\u6620\u3057\u3066\u3044\u307e\u3059\u304b\u3089\u898b\u306b\u884c\u304d\u307e\u3057\u3087\u3046\u3002\u539f\u4f5c\u5c0f\u8aac\u3082\u7d76\u8cdb\u767a\u58f2\u4e2d\u306a\u306e\u3067\u8cb7\u3044\u307e\u3057\u3087\u3046(\u5ba3\u4f1d\u306f\u57fa\u672c)\u3002\n\u6620\u753b\u300e\u541b\u306e\u540d\u306f\u3002\u300f\u516c\u5f0f\u30b5\u30a4\u30c8\n\nRe:C++\u306escoped enum\u3067\u95a2\u6570\u306e\u30d5\u30e9\u30b0\u6307\u5b9a\u3092\u3057\u305f\u3044\n\u6539\u3081\u307e\u3057\u3066\u307f\u306a\u3055\u307e\u3001\u30ca\u30de\u30b9\u30c6\u3002\u3053\u306e\u8a18\u4e8b\u306f\nC++\u306escoped enum\u3067\u95a2\u6570\u306e\u30d5\u30e9\u30b0\u6307\u5b9a\u3092\u3057\u305f\u3044\n\u3078\u306e\u8fd4\u4fe1\u8a18\u4e8b\u3067\u3059\u3002\n\u540c\u6642\u306b\nRe2: C++\u306escoped enum\u3067\u95a2\u6570\u306e\u30d5\u30e9\u30b0\u6307\u5b9a\u3092\u3057\u305f\u3044 & \u541b\u306e\u540d\u306f\u30fb\u30fb\u30fbenum class\n\u304b\u3089\u8fd4\u4fe1\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u300c\u541b\u306e\u540d\u306f\u3002\u300d\u3068\u300cRe:\u30bc\u30ed\u304b\u3089\u59cb\u3081\u308b\u7570\u4e16\u754c\u751f\u6d3b\u300d\u3068C++\u306e\u52a0\u91cd\u5e73\u5747\u3092\u3068\u3063\u305f\u3088\u3046\u306a\u8a18\u4e8b\u3067\u3059\u3002\n\n\u6ce8\u610f\n\u3053\u306e\u8a18\u4e8b\u306fSFINAE\u306b\u3064\u3044\u3066\u305d\u3053\u306f\u304b\u3068\u306a\u304f\u7406\u89e3\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u3092\u6e80\u305f\u3055\u306a\u3044\u4eba\u306f\u5148\u306b\u5404\u81ea\u30b0\u30b0\u3063\u3066\u304b\u3089\u8aad\u307f\u9032\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n\u305d\u3082\u305d\u3082\u30d5\u30e9\u30b0\u5b9a\u6570\u3068\u306f\n\u4f8b\u3048\u3070Win32API\u3067\u30ec\u30b8\u30b9\u30c8\u30ea\u306e\u5024\u3092\u8aad\u307f\u53d6\u308b\u3068\u304d\u3001\nHKEY key\nconst TCHAR* sub_key_root = _T(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders\")\nif (ERROR_SUCCESS != RegOpenKeyEx(HKEY_CURRENT_USER, sub_key_root, 0, KEY_READ | KEY_WOW64_64KEY, &key))\n    throw std::runtime_error(\"error\");\nDWORD dwType = REG_SZ;\nDWORD dwByte = 32;\nif (ERROR_SUCCESS != RegQueryValueEx(key, _T(\"Personal\"), 0, &dwType, nullptr, &dwByte) || REG_SZ != dwType)\n    throw std::runtime_error(\"error\");\nstd::basic_string<TCHAR> buf;\nbuf.resize(dwByte);\nRegQueryValueEx(key, _T(\"Personal\"), 0, nullptr, (LPBYTE)&buf[0], &dwByte);\nbuf.resize(std::char_traits<TCAHR>::length(buf.c_str()));\n\nKEY_READ | KEY_WOW64\u307f\u305f\u3044\u306b\u6307\u5b9a\u3059\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u3053\u308c\u304c\u3044\u308f\u3086\u308b\u30d5\u30e9\u30b0\u5b9a\u6570\u3067\u3059\u306d\u3002\n\nC++\u306a\u306e\u306b\u30de\u30af\u30ed\u3092\u3064\u304b\u3046\u306e\uff1f\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u3053\u308c\u307e\u3067C++\u3067\u306f\u30d5\u30e9\u30b0\u7528\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u305d\u3053\u306bstatic const\u5b9a\u6570\u3092\u4f5c\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\nVS2013\u306eios_base\u306e\u5b9f\u88c5\ntemplate<class _Dummy>\n    class _Iosb\n    {   // define templatized bitmask/enumerated types, instantiate on demand\npublic:\n    enum _Iostate\n        {   // constants for stream states\n        _Statmask = 0x17};\n\n    static const _Iostate goodbit = (_Iostate)0x0;\n    static const _Iostate eofbit = (_Iostate)0x1;\n    static const _Iostate failbit = (_Iostate)0x2;\n    static const _Iostate badbit = (_Iostate)0x4;\n    static const _Iostate _Hardfail = (_Iostate)0x10;\n};\n #define _BITMASK(Enum, Ty) typedef int Ty\n class _CRTIMP2_PURE ios_base\n    : public _Iosb<int>\n    {   // base class for ios\npublic:\n    _BITMASK(_Iostate, iostate);\n}:\n\n\n\u3061\u306a\u307f\u306bC++11\u3067\u306fstatic constexpr\u306b\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nstd::ios_base::iostate - cppreference.com\n\nstatic const\u5f0f\u306e\u554f\u984c\n\u30d5\u30e9\u30b0\u306e\u578b\u304cint\u3068\u304b\u306e\u6574\u6570\u578b\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u30d5\u30e9\u30b0\u540c\u58eb\u6df7\u305c\u3089\u308c\u308b\nstruct Flag1{\n    enum type {};\n    static constexpr type a = (type)1;\n    static constexpr type b = (type)2;\n};\nstruct Flag2{\n    enum type {};\n    static constexpr type a = (type)4;\n    static constexpr type b = (type)8;\n};\n\nvoid f(int){}\nvoid g(Flag1::type){}\nint main()\n{\n    f(Flag1::a);//OK\n    f(Flag2::b);//OK\u304a\u304a\u3063\u3068\uff01\uff1f\n    f(Flag1::a | Flag1::b);//OK\n    f(Flag1::a | Flag2::b);//OK\u304a\u304a\u3063\u3068\uff01\uff1f\n    g(Flag1::a);//OK\n    //g(Flag2::b);//NG:no matching function for call to 'g'\n    //g(Flag1::a | Flag1::b);//NG\u304a\u304a\u3063\u3068\uff01\uff1f:no known conversion from 'int' to 'Flag1::type' for 1st argument\n    //g(Flag1::a | Flag2::b);//NG:no known conversion from 'int' to 'Flag1::type' for 1st argument\n}\n\nhttp://melpon.org/wandbox/permlink/L3IKKsKuToOsT5re\n\nC++11\u306b\u306fenum class\u304c\u3042\u308b\n\u305d\u3053\u3067enum class\u306e\u51fa\u756a\u3067\u3059\u3002\nenum class Flag1 : int {\n    a = 1,\n    b = 2\n};\nenum class Flag2 : int {\n    a = 4,\n    b = 8\n};\nvoid f(int){}\nvoid g(Flag1){}\nint main()\n{\n    //f(Flag1::a);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\n    //f(Flag2::b);//NG:no known conversion from 'Flag2' to 'int' for 1st argument\n    //f(Flag1::a | Flag1::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag1')\n    //f(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n    g(Flag1::a);//OK\n    //g(Flag2::b);//NG:no known conversion from 'Flag2' to 'Flag1' for 1st argument\n    //g(Flag1::a | Flag1::b);//NG\u304a\u304a\u3063\u3068\uff01\uff1f:invalid operands to binary expression ('Flag1' and 'Flag1')\n    //g(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n}\n\nhttp://melpon.org/wandbox/permlink/JDSzJ4So6ZH09Bpz\nenum class\u306f\u57fa\u5e95\u578b\u306b\u6697\u9ed9\u5909\u63db\u3067\u304d\u307e\u305b\u3093\u3057\u3001\u540c\u3058\u57fa\u5e95\u578b\u306e\u3079\u3064\u306eenum class\u304b\u3089\u306e\u5909\u63db\u3082\u3082\u3061\u308d\u3093\u3067\u304d\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u3053\u308c\u3067\u306f\u540c\u3058enum class\u540c\u58eb\u306eOR\u6f14\u7b97\u3082\u3067\u304d\u307e\u305b\u3093\u3002\n\noperator overload\u3057\u3088\u3046\nenum class Flag1 : int {\n    a = 1,\n    b = 2\n};\nenum class Flag2 : int {\n    a = 4,\n    b = 8\n};\nconstexpr Flag1 operator|(Flag1 l, Flag1 r){\n    return static_cast<Flag1>(static_cast<int>(l) | static_cast<int>(r));\n}\nvoid f(int){}\nvoid g(Flag1){}\nint main()\n{\n    //f(Flag1::a);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\n    //f(Flag2::b);//NG:no known conversion from 'Flag2' to 'int' for 1st argument\n    //f(Flag1::a | Flag1::b);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\n    //f(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n    g(Flag1::a);//OK\n    //g(Flag2::b);//NG:no known conversion from 'Flag2' to 'Flag1' for 1st argument\n    g(Flag1::a | Flag1::b);//OK\n    //g(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n}\n\nhttp://melpon.org/wandbox/permlink/MoXC6w73gQNgxUgu\n\n\u6a5f\u68b0\u7684\u306boperator overload\u3092\u66f8\u304f\u306a\u3093\u3066\u3042\u306a\u305f\u3001\u6020\u60f0\u3067\u3059\u306d\uff5e\u3002\n\n\u3053\u306e\u65b9\u6cd5\u306e\u554f\u984c\u70b9\u306f\u3001\u5404enum class\u3054\u3068\u306boperator overload\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u70b9\u3067\u3059\u3002\n\u3057\u304b\u3082OR\u6f14\u7b97\u3060\u3051\u3067\u306a\u304f\u3066\u3001& &= |=\u3050\u3089\u3044\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f~ ^ ^=\u3082\u4f7f\u3048\u3066\u307b\u3057\u3044\u3068\u601d\u3046\u306e\u3067\u30017*[enum class\u306e\u500b\u6570]\u5206\u306eoperator overload\u3092\u66f8\u304f\u7fbd\u76ee\u306b\u30fb\u30fb\u30fb\u3002\n\u7d76\u5bfe\u30a4\u30e4\u3060\u3002\n\n\u305d\u3053\u3067concept\u7684\u306aoperator overload\u3067\u3059\u3088\n\n\u307e\u305a\u306fconcept\u3082\u3069\u304d\u3092\u3067\u3063\u3061\u4e0a\u3052\u308b\n\u3053\u308c\u304c\u809d\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u306eenum class\u304c\u6301\u3064\u6027\u8cea\u3068\u3044\u3046\u304b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3044\u3046\u304b\u3053\u306e\u5834\u5408\u3082\u3063\u3068\u8a00\u3063\u3066\u3057\u307e\u3048\u3070\u300c\u3069\u3093\u306aoperator\u304c\u4f7f\u3048\u308b\u306e\u304b\u300d\u3092\u5ba3\u8a00\u3059\u308b\u3082\u306e\u3068\u8a00\u3046\u610f\u5473\u3067\u79c1\u306fconcept\u3068\u8a00\u3063\u3066\u3044\u307e\u3059\u3002\n#include <type_traits>\nnamespace enum_concept{\n    template<typename T>\n    struct has_bitwise_operators : std::false_type {};\n    template<typename T>\n    struct has_and_or_operators : has_bitwise_operators<T> {};\n}\n\nhas_and_or_operators\u304chas_bitwise_operators\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u306e\u306f\u3001AND/OR\u6f14\u7b97\u304c\u305d\u306e\u4ed6Bit\u6f14\u7b97\u306b\u542b\u307e\u308c\u308b\u306e\u3067\u3001has_bitwise_operators\u3092\u6e80\u305f\u3059enum class\u306f\u5f53\u7136has_and_or_operators\u3092\u6e80\u305f\u3057\u307e\u3059\u306d\u3002\n\n\u3044\u3064\u3082\u306e\u3042\u308c\u3092\u66f8\u304f\n\u3044\u3064\u3082\u306e\u3042\u308c\u3001\u3067\u901a\u3058\u308b\u4eba\u3069\u306e\u304f\u3089\u3044\u3044\u308b\u3093\u3060\u308d\u3046\u304b\u3002\nstd::enable_if\u3092\u4f7f\u3063\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u6642\u3001enabler\u3092\u4f7f\u3046\uff1f\n\u3053\u308c\u3067\u3059\u3002\u6b21\u306e\u9805\u3067SFINAE\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\nnamespace type_traits{\n    template<bool con> using concept_t = typename std::enable_if<con, std::nullptr_t>::type;\n    template<typename T> using underlying_type_t = typename std::underlying_type<T>::type;//C++11\u306b\u306f\u306a\u3044\n}\n\n\nSFINAE\u3057\u3064\u3064operator overload\u3092\u66f8\u304f\n\u3042\u3093\u307e\u89e3\u8aac\u3059\u308b\u3053\u3068\u3082\u306a\u3044\u3051\u3069\u4e00\u5fdc\u3002\n\u307e\u305a\u3001enum\u306b\u3057\u308denum class\u306b\u3057\u308d\u3001\u57fa\u5e95\u578b\u3068\u3044\u3046\u3082\u306e\u304c\u5b58\u5728\u3057\u307e\u3059\u3002enum class\u306f\u57fa\u5e95\u578b\u306b\u660e\u793a\u5909\u63db\u3067\u304d\u307e\u3059\u3002\u57fa\u5e95\u578b\u306f\u6574\u6570\u578b\u306a\u306e\u3067\u3001\u3053\u308c\u304b\u3089orverload \u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308boperator\u306f\u3059\u3067\u306b\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u57fa\u5e95\u578b\u306fstd::underlying_type\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\n\u3088\u3063\u3066\u5404operator overload\u306e\u5b9f\u88c5\u6226\u7565\u3068\u3057\u3066\u306f\n\n\u5f15\u6570\u3092\u57fa\u5e95\u578b\u306bstatic_cast\u3059\u308b\n\u6f14\u7b97\u3059\u308b\n\u3082\u3068\u306e\u578b\u306bstatic_cast\u3059\u308b\n\n\u3068\u8a00\u3046\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\u305f\u3060static_cast<underlying_type_t<T>>\u3068\u66f8\u304f\u306e\u306f\u3060\u308b\u3044&\u53ef\u8aad\u6027\u4e0b\u304c\u308b&typo\u3057\u3084\u3059\u304f\u306a\u308b\u3068\u3001\uff13\u62cd\u5b50\u63c3\u3063\u3066\u3084\u308b\u3079\u304d\u3067\u306f\u306a\u3044\u306e\u3067\u3001underlying_cast\u3068\u3044\u3046\u306e\u3092\u3067\u3063\u3061\u4e0a\u3052\u3066\u3044\u307e\u3059\u3002\u7a4d\u6975\u7684\u306b\u6020\u3051\u3066\u3044\u3053\u3046\u306a\uff01\u3002\u307e\u3042std::underlying_type\u306etemplate\u7b2c\u4e00\u5f15\u6570\u306benum\u3058\u3083\u306a\u3044\u578b\u3092\u6e21\u305b\u306a\u3044\u304b\u3089SFINAE\u3057\u3066\u304a\u304d\u305f\u3044\u3001\u3068\u3044\u3046\u8a71\u3082\u3042\u308a\u307e\u3059\u304c\u3002C++\u304c\u3069\u3093\u306a\u554f\u984c\u3067\u3082\u3082\u3046\u4e00\u6bb5\u968e\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u304b\u307e\u3059\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u308b\u3002\u305f\u3060\u3057\u3001\u30e9\u30c3\u30d1\u30fc\u304c\u591a\u3059\u304e\u308b\u3068\u3044\u3046\u554f\u984c\u3092\u9664\u3044\u3066\u306f\u3002\u3068\u3044\u3046\u8a00\u8a9e\u3060\u3068\u3088\u304f\u308f\u304b\u308a\u307e\u3059\u306d\u3002\nnamespace detail{\n    using namespace type_traits;\n    template<typename T, concept_t<std::is_enum<T>::value> = nullptr>\n    constexpr underlying_type_t<T> underlying_cast(T e) { return static_cast<underlying_type_t<T>>(e); }\n}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_and_or_operators<T>::value> = nullptr>\nconstexpr T operator&(T l, T r) {return static_cast<T>(detail::underlying_cast(l) & detail::underlying_cast(r));}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_and_or_operators<T>::value> = nullptr>\nT& operator&=(T& l, T r) {\n    l = static_cast<T>(detail::underlying_cast(l) & detail::underlying_cast(r));\n    return l;\n}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_and_or_operators<T>::value> = nullptr>\nconstexpr T operator|(T l, T r) {return static_cast<T>(detail::underlying_cast(l) | detail::underlying_cast(r));}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_and_or_operators<T>::value> = nullptr>\nT& operator|=(T& l, T r) {\n    l = static_cast<T>(detail::underlying_cast(l) | detail::underlying_cast(r));\n    return l;\n}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_bitwise_operators<T>::value> = nullptr>\nconstexpr T operator^(T l, T r) {return static_cast<T>(detail::underlying_cast(l) ^ detail::underlying_cast(r));}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_bitwise_operators<T>::value> = nullptr>\nT& operator^=(T& l, T r) {\n    l = static_cast<T>(detail::underlying_cast(l) ^ detail::underlying_cast(r));\n    return l;\n}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_bitwise_operators<T>::value> = nullptr>\nconstexpr T operator~(T op) {return static_cast<T>(~detail::underlying_cast(op));}\n\n\n\u5bfe\u8c61\u3068\u306a\u308benum class\u3092\u5b9a\u7fa9\nenum class Flag1 : int {\n    a = 1,\n    b = 2\n};\nenum class Flag2 : int {\n    a = 4,\n    b = 8\n};\n\n\nconcept\u3082\u3069\u304d\u306e\u30af\u30e9\u30b9\u306etemplate\u7279\u6b8a\u5316\u3092\u66f8\u304f\n\u4eca\u56de\u306fFlag1\u306f& &= | |= ^ ^= ~\u3001Flag2\u306f& &= | |=\u306e\u6f14\u7b97\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\nnamespace enum_concept{\n    template<> struct has_bitwise_operators<Flag1> : std::true_type {};\n    template<> struct has_and_or_operators<Flag2> : std::true_type {};\n}\n\n\u3055\u304d\u307b\u3069\u3001has_bitwise_operators\u3084has_and_or_operators\u306foperator overload\u306eSFINAE\u306e\u6761\u4ef6\u306b\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u3053\u3067\u8a31\u53ef\u3059\u308btemplate\u7279\u6b8a\u5316\u3092\u66f8\u304f\u3053\u3068\u3067operator overload\u304c\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u306d\u3002\u5143\u8a18\u4e8b\u306e @akinomyoga \u3055\u3093\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u3067\u306funderlying_type \u3068\u306e\u6f14\u7b97\u3084\u4ed6\u306eenum class\u3068\u306e\u6f14\u7b97\u3092\u6709\u52b9\u306b\u3059\u308b\u624b\u6bb5\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4e00\u4f53\u3069\u3046\u3084\u3063\u305f\u3089\u305d\u3093\u306a\u3082\u306e\u304c\u5fc5\u8981\u306a\u306e\u304b\u7406\u89e3\u3067\u304d\u306a\u3044\u306e\u3067(\u305d\u308c\u304f\u3089\u3044\u30ad\u30e3\u30b9\u30c8\u66f8\u3051)\u4eca\u56de\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4f7f\u3063\u3066\u307f\u308b\nvoid f(Flag1){}\nvoid g(Flag2){}\nint main()\n{\n    f(Flag1::a | Flag1::b);\n    f(Flag1::a & Flag1::b);\n    f(Flag1::a ^ Flag1::b);\n    f(~Flag1::a);\n    g(Flag2::a | Flag2::b);\n    g(Flag2::a & Flag2::b);\n    //g(Flag2::a ^ Flag2::b);//invalid operands to binary expression ('Flag2' and 'Flag2')\n    //g(~Flag2::a);//invalid argument type 'Flag2' to unary expression\n}\n\nhttp://melpon.org/wandbox/permlink/A6XI2lDkeXfHQrJ8\n\n\u6ce8\u610f\u70b9\n\u4eca\u56de\u306fC++11\u306e\u7bc4\u56f2\u3067\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4ee3\u5165\u3082\u3059\u308b\u6f14\u7b97\u5b50\u306fC++14\u3058\u3083\u306a\u3044\u3068constexpr\u306b\u3067\u304d\u307e\u305b\u3093\u3002\u306a\u304aVisual Studio 2013\u3067\u306fconstexpr\u306f\u4f7f\u3048\u307e\u305b\u3093\u304c\u3001\u4e0a\u306e\u30b3\u30fc\u30c9\u304b\u3089constexpr\u3092\u7f6e\u63db\u3057\u3066\u53d6\u308a\u9664\u3051\u3070\u591a\u5206\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5f97\u3089\u308c\u305f\u3082\u306e\n\n\u30d5\u30e9\u30b0\u6307\u5b9a\u3059\u308b\u6642\u306e\u51e1\u30df\u30b9\u304c\u6e1b\u3089\u305b\u308b\u3088\u3046\u306b\u306a\u3063\u305f\nenum class\u306b\u5e0c\u671b\u304c\u6301\u3066\u305f\n\n\n\u5931\u3063\u305f\u3082\u306e\n\n\u3053\u306e\u8a18\u4e8b\u3092\u8aad\u3080\u306e\u306b\u8cbb\u3084\u3057\u305f\u6642\u9593\n\n\n\u305d\u308c\u306b\u3057\u3066\u3082\nconcept\u304c\u306a\u3044\u4e16\u754c\u306f\u3044\u3084\u3084\u30fc\uff01\u6765\u4e16\u306fconcept\u304c\u3042\u308b\u4e16\u754c\u306b\u7523\u307e\u308c\u3055\u305b\u3066\u304f\u3060\u3055\u30fc\u3044\uff01\nC++11\u306econcept\u3068C++17\u306b\u63d0\u6848\u3055\u308c\u3066\u3044\u305fconcept\u306b\u3064\u3044\u3066\u306f\n\u5e30\u3063\u3066\u304d\u305f\u30b3\u30f3\u30bb\u30d7\u30c8 | Boost\u52c9\u5f37\u4f1a #16 \u5927\u962a\n\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u3042C++17\u306bconcept\u304c\u5165\u3089\u306a\u3044\u3053\u3068\u304c\u78ba\u5b9a\u3057\u305f\u3051\u3069\u306a\uff01\n\n\u4f59\u8ac7\n\u51c4\u307e\u3058\u304f\u3069\u3046\u3067\u3082\u3044\u3044\u8a71\u3067\u3059\u304c\u3001\u5192\u982d\u306e\u96d1\u30b3\u30e9\u3001\u6700\u521d3\u679a\u306f\u30b7\u30fc\u30f3\u7684\u306b\u306f\u6620\u753b\u6700\u5f8c\u306e\u30b7\u30fc\u30f3\u3067(\u4e09\u8449\u3068\u7027\u304c\u30bf\u30a4\u30e0\u30b9\u30ea\u30c3\u30d7\u3057\u3066\u308b\u7d75\u3060\u3051\u3069)\u30012021\u5e7412\u6708\u3068\u3044\u3046\u8a2d\u5b9a\u3089\u3057\u3044\u306e\u3067C++17\u3068C++20\u306f\u51fa\u3066\u307e\u3059\u306d\u3002C++23\u306b\u5411\u3051\u3066\u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306b\u307e\u305fconcept\u3068\u304b\u304c\u63d0\u6848\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3002\n4\u679a\u76ee\u306f2013\u5e749\u6708\u3054\u308d\u306e\u306f\u305a\u306a\u306e\u3067\u3001C++11\u306bconcept\u304c\u5165\u3089\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u9593\u3082\u306a\u304fC++14\u304c\u3067\u308b\u3051\u3069\u3084\u3063\u3071\u308a\u306a\u3093\u3067concept\u306a\u3044\u3093\u3084\uff01\u3068\u3044\u3046\u6642\u671f\u3067\u3059\u306d\u3002C++17\u306b\u63d0\u6848\u3055\u308c\u3066\u3044\u3066\u307e\u305f\u3082reject\u3092\u55b0\u3089\u3063\u305fConcept Lite\u306e\u4f5c\u696d\u304c\u59cb\u307e\u3063\u305f\u306e\u304c2014/2/17\u3089\u3057\u3044\u306e\u3067\u307e\u3060\u4e09\u8449\u306f\u518d\u63d0\u6848\u306e\u8a71\u306f\u77e5\u3089\u306a\u3044\u306f\u305a\u3067\u3059\u306d\u3002\ncf.)\n\u3010\u30cd\u30bf\u30d0\u30ec\u89e3\u8aac\u3011\uff62\u541b\u306e\u540d\u306f\u3002\uff63\u8aad\u8005\u3068\u5171\u306b\u8aad\u89e3\u5165\u308c\u66ff\u308f\u308a\u6642\u7cfb\u5217\u3001\u56f3\u89e3\u3067\u89e3\u8aac!\uff62\u8ee2\u6821\u751f\uff63\u3069\u3053\u308d\u3058\u3083\u306a\u304b\u3063\u305f\u2026\u30c1\u30a7\u30fb\u30d6\u30f3\u30d6\u30f3\u306e\u30c6\u30a3\u30fc\u30de - Part 2\n![https://qiita-image-store.s3.amazonaws.com/0/94177/bad14252-5d04-b289-a3c3-8de401452c91.png](https://qiita-image-store.s3.amazonaws.com/0/94177/7dec4a2a-72be-2af6-26d1-02a1dcafac6f.png)\n![https://qiita-image-store.s3.amazonaws.com/0/94177/d0cf1077-71ed-51ed-b8b0-c114eb6afe90.png](https://qiita-image-store.s3.amazonaws.com/0/94177/8eb8ed3c-b11b-29e1-0311-7c2c0feb5d71.png)\n![https://qiita-image-store.s3.amazonaws.com/0/94177/af75d6ef-1c6d-70f8-1d00-e77932af499d.png](https://qiita-image-store.s3.amazonaws.com/0/94177/d527307f-92fa-d4de-e5f2-06afc1eea59e.png)\n![https://qiita-image-store.s3.amazonaws.com/0/94177/64174025-1492-17f2-9fa2-15087830ed08.png](https://qiita-image-store.s3.amazonaws.com/0/94177/659619e8-fea6-a9bd-db28-5bf569227a2c.png)\n\n\u306f\u3044\u3001\u96d1\u30b3\u30e9\u3059\u307f\u307e\u305b\u3093\u3002\u304d\u3063\u3068\n[\u541b\u306e\u540d\u306f\u30fb\u30fbYARN\uff01](http://qiita.com/endam/items/c77396705e2a158f1952)\n\u306a\u3093\u3066\u3082\u306e\u3092\u898b\u305f\u305b\u3044\u3067\u3059(\u8cac\u4efb\u8ee2\u5ac1)\u3002\n\n\u307e\u3060\u6620\u753b\u4e0a\u6620\u3057\u3066\u3044\u307e\u3059\u304b\u3089\u898b\u306b\u884c\u304d\u307e\u3057\u3087\u3046\u3002\u539f\u4f5c\u5c0f\u8aac\u3082\u7d76\u8cdb\u767a\u58f2\u4e2d\u306a\u306e\u3067**\u8cb7\u3044\u307e\u3057\u3087\u3046**(\u5ba3\u4f1d\u306f\u57fa\u672c)\u3002\n\n[\u6620\u753b\u300e\u541b\u306e\u540d\u306f\u3002\u300f\u516c\u5f0f\u30b5\u30a4\u30c8](http://www.kiminona.com/index.html)\n\n# Re:C++\u306escoped enum\u3067\u95a2\u6570\u306e\u30d5\u30e9\u30b0\u6307\u5b9a\u3092\u3057\u305f\u3044\n\n\u6539\u3081\u307e\u3057\u3066\u307f\u306a\u3055\u307e\u3001\u30ca\u30de\u30b9\u30c6\u3002\u3053\u306e\u8a18\u4e8b\u306f\n[C++\u306escoped enum\u3067\u95a2\u6570\u306e\u30d5\u30e9\u30b0\u6307\u5b9a\u3092\u3057\u305f\u3044](http://qiita.com/prickle/items/c4de8cc23556c6a3d93b)\n\u3078\u306e\u8fd4\u4fe1\u8a18\u4e8b\u3067\u3059\u3002\n\u540c\u6642\u306b\n[Re2: C++\u306escoped enum\u3067\u95a2\u6570\u306e\u30d5\u30e9\u30b0\u6307\u5b9a\u3092\u3057\u305f\u3044 & \u541b\u306e\u540d\u306f\u30fb\u30fb\u30fbenum class](http://qiita.com/akinomyoga/items/a5df34fc78efd86fa4ef)\n\u304b\u3089\u8fd4\u4fe1\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u898b\u3066\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u300c\u541b\u306e\u540d\u306f\u3002\u300d\u3068\u300cRe:\u30bc\u30ed\u304b\u3089\u59cb\u3081\u308b\u7570\u4e16\u754c\u751f\u6d3b\u300d\u3068C++\u306e\u52a0\u91cd\u5e73\u5747\u3092\u3068\u3063\u305f\u3088\u3046\u306a\u8a18\u4e8b\u3067\u3059\u3002\n\n## \u6ce8\u610f\n\n\u3053\u306e\u8a18\u4e8b\u306fSFINAE\u306b\u3064\u3044\u3066\u305d\u3053\u306f\u304b\u3068\u306a\u304f\u7406\u89e3\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\u3053\u308c\u3092\u6e80\u305f\u3055\u306a\u3044\u4eba\u306f\u5148\u306b\u5404\u81ea\u30b0\u30b0\u3063\u3066\u304b\u3089\u8aad\u307f\u9032\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n## \u305d\u3082\u305d\u3082\u30d5\u30e9\u30b0\u5b9a\u6570\u3068\u306f\n\n\u4f8b\u3048\u3070Win32API\u3067\u30ec\u30b8\u30b9\u30c8\u30ea\u306e\u5024\u3092\u8aad\u307f\u53d6\u308b\u3068\u304d\u3001\n\n```cpp\nHKEY key\nconst TCHAR* sub_key_root = _T(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders\")\nif (ERROR_SUCCESS != RegOpenKeyEx(HKEY_CURRENT_USER, sub_key_root, 0, KEY_READ | KEY_WOW64_64KEY, &key))\n\tthrow std::runtime_error(\"error\");\nDWORD dwType = REG_SZ;\nDWORD dwByte = 32;\nif (ERROR_SUCCESS != RegQueryValueEx(key, _T(\"Personal\"), 0, &dwType, nullptr, &dwByte) || REG_SZ != dwType)\n\tthrow std::runtime_error(\"error\");\nstd::basic_string<TCHAR> buf;\nbuf.resize(dwByte);\nRegQueryValueEx(key, _T(\"Personal\"), 0, nullptr, (LPBYTE)&buf[0], &dwByte);\nbuf.resize(std::char_traits<TCAHR>::length(buf.c_str()));\n```\n\n``KEY_READ | KEY_WOW64``\u307f\u305f\u3044\u306b\u6307\u5b9a\u3059\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u3053\u308c\u304c\u3044\u308f\u3086\u308b\u30d5\u30e9\u30b0\u5b9a\u6570\u3067\u3059\u306d\u3002\n\n## C++\u306a\u306e\u306b\u30de\u30af\u30ed\u3092\u3064\u304b\u3046\u306e\uff1f\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u3053\u308c\u307e\u3067C++\u3067\u306f\u30d5\u30e9\u30b0\u7528\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u305d\u3053\u306bstatic const\u5b9a\u6570\u3092\u4f5c\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\n```cpp:VS2013\u306eios_base\u306e\u5b9f\u88c5\ntemplate<class _Dummy>\n\tclass _Iosb\n\t{\t// define templatized bitmask/enumerated types, instantiate on demand\npublic:\n\tenum _Iostate\n\t\t{\t// constants for stream states\n\t\t_Statmask = 0x17};\n\n\tstatic const _Iostate goodbit = (_Iostate)0x0;\n\tstatic const _Iostate eofbit = (_Iostate)0x1;\n\tstatic const _Iostate failbit = (_Iostate)0x2;\n\tstatic const _Iostate badbit = (_Iostate)0x4;\n\tstatic const _Iostate _Hardfail = (_Iostate)0x10;\n};\n #define _BITMASK(Enum, Ty)\ttypedef int Ty\n class _CRTIMP2_PURE ios_base\n\t: public _Iosb<int>\n\t{\t// base class for ios\npublic:\n\t_BITMASK(_Iostate, iostate);\n}:\n```\n\n\u3061\u306a\u307f\u306bC++11\u3067\u306f``static constexpr``\u306b\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n[std::ios_base::iostate - cppreference.com](http://en.cppreference.com/w/cpp/io/ios_base/iostate)\n\n## static const\u5f0f\u306e\u554f\u984c\n\n\u30d5\u30e9\u30b0\u306e\u578b\u304cint\u3068\u304b\u306e\u6574\u6570\u578b\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u30d5\u30e9\u30b0\u540c\u58eb\u6df7\u305c\u3089\u308c\u308b\n\n```cpp\nstruct Flag1{\n    enum type {};\n    static constexpr type a = (type)1;\n    static constexpr type b = (type)2;\n};\nstruct Flag2{\n    enum type {};\n    static constexpr type a = (type)4;\n    static constexpr type b = (type)8;\n};\n\nvoid f(int){}\nvoid g(Flag1::type){}\nint main()\n{\n    f(Flag1::a);//OK\n    f(Flag2::b);//OK\u304a\u304a\u3063\u3068\uff01\uff1f\n    f(Flag1::a | Flag1::b);//OK\n    f(Flag1::a | Flag2::b);//OK\u304a\u304a\u3063\u3068\uff01\uff1f\n    g(Flag1::a);//OK\n    //g(Flag2::b);//NG:no matching function for call to 'g'\n    //g(Flag1::a | Flag1::b);//NG\u304a\u304a\u3063\u3068\uff01\uff1f:no known conversion from 'int' to 'Flag1::type' for 1st argument\n    //g(Flag1::a | Flag2::b);//NG:no known conversion from 'int' to 'Flag1::type' for 1st argument\n}\n```\n\nhttp://melpon.org/wandbox/permlink/L3IKKsKuToOsT5re\n\n## C++11\u306b\u306fenum class\u304c\u3042\u308b\n\n\u305d\u3053\u3067``enum class``\u306e\u51fa\u756a\u3067\u3059\u3002\n\n```cpp\nenum class Flag1 : int {\n    a = 1,\n    b = 2\n};\nenum class Flag2 : int {\n    a = 4,\n    b = 8\n};\nvoid f(int){}\nvoid g(Flag1){}\nint main()\n{\n    //f(Flag1::a);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\n    //f(Flag2::b);//NG:no known conversion from 'Flag2' to 'int' for 1st argument\n    //f(Flag1::a | Flag1::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag1')\n    //f(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n    g(Flag1::a);//OK\n    //g(Flag2::b);//NG:no known conversion from 'Flag2' to 'Flag1' for 1st argument\n    //g(Flag1::a | Flag1::b);//NG\u304a\u304a\u3063\u3068\uff01\uff1f:invalid operands to binary expression ('Flag1' and 'Flag1')\n    //g(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n}\n```\n\nhttp://melpon.org/wandbox/permlink/JDSzJ4So6ZH09Bpz\n\n``enum class``\u306f\u57fa\u5e95\u578b\u306b\u6697\u9ed9\u5909\u63db\u3067\u304d\u307e\u305b\u3093\u3057\u3001\u540c\u3058\u57fa\u5e95\u578b\u306e\u3079\u3064\u306e``enum class``\u304b\u3089\u306e\u5909\u63db\u3082\u3082\u3061\u308d\u3093\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u3057\u304b\u3057\u3053\u308c\u3067\u306f\u540c\u3058``enum class``\u540c\u58eb\u306eOR\u6f14\u7b97\u3082\u3067\u304d\u307e\u305b\u3093\u3002\n\n## operator overload\u3057\u3088\u3046\n\n```cpp\nenum class Flag1 : int {\n    a = 1,\n    b = 2\n};\nenum class Flag2 : int {\n    a = 4,\n    b = 8\n};\nconstexpr Flag1 operator|(Flag1 l, Flag1 r){\n    return static_cast<Flag1>(static_cast<int>(l) | static_cast<int>(r));\n}\nvoid f(int){}\nvoid g(Flag1){}\nint main()\n{\n    //f(Flag1::a);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\n    //f(Flag2::b);//NG:no known conversion from 'Flag2' to 'int' for 1st argument\n    //f(Flag1::a | Flag1::b);//NG:no known conversion from 'Flag1' to 'int' for 1st argument\n    //f(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n    g(Flag1::a);//OK\n    //g(Flag2::b);//NG:no known conversion from 'Flag2' to 'Flag1' for 1st argument\n    g(Flag1::a | Flag1::b);//OK\n    //g(Flag1::a | Flag2::b);//NG:invalid operands to binary expression ('Flag1' and 'Flag2')\n}\n```\n\nhttp://melpon.org/wandbox/permlink/MoXC6w73gQNgxUgu\n\n## \u6a5f\u68b0\u7684\u306boperator overload\u3092\u66f8\u304f\u306a\u3093\u3066[\u3042\u306a\u305f\u3001\u6020\u60f0\u3067\u3059\u306d\uff5e\u3002](http://dic.nicovideo.jp/a/%E3%83%9A%E3%83%86%E3%83%AB%E3%82%AE%E3%82%A6%E3%82%B9%E3%83%BB%E3%83%AD%E3%83%9E%E3%83%8D%E3%82%B3%E3%83%B3%E3%83%86%E3%82%A3)\n\n\u3053\u306e\u65b9\u6cd5\u306e\u554f\u984c\u70b9\u306f\u3001\u5404``enum class``\u3054\u3068\u306boperator overload\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u70b9\u3067\u3059\u3002\n\u3057\u304b\u3082OR\u6f14\u7b97\u3060\u3051\u3067\u306a\u304f\u3066\u3001``& &= |=``\u3050\u3089\u3044\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306f``~ ^ ^=``\u3082\u4f7f\u3048\u3066\u307b\u3057\u3044\u3068\u601d\u3046\u306e\u3067\u3001``7*[enum class\u306e\u500b\u6570]``\u5206\u306eoperator overload\u3092\u66f8\u304f\u7fbd\u76ee\u306b\u30fb\u30fb\u30fb\u3002\n**\u7d76\u5bfe\u30a4\u30e4\u3060**\u3002\n\n## \u305d\u3053\u3067concept\u7684\u306aoperator overload\u3067\u3059\u3088\n\n### \u307e\u305a\u306fconcept\u3082\u3069\u304d\u3092\u3067\u3063\u3061\u4e0a\u3052\u308b\n\n\u3053\u308c\u304c\u809d\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u306e``enum class``\u304c\u6301\u3064\u6027\u8cea\u3068\u3044\u3046\u304b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3044\u3046\u304b\u3053\u306e\u5834\u5408\u3082\u3063\u3068\u8a00\u3063\u3066\u3057\u307e\u3048\u3070\u300c\u3069\u3093\u306aoperator\u304c\u4f7f\u3048\u308b\u306e\u304b\u300d\u3092\u5ba3\u8a00\u3059\u308b\u3082\u306e\u3068\u8a00\u3046\u610f\u5473\u3067\u79c1\u306fconcept\u3068\u8a00\u3063\u3066\u3044\u307e\u3059\u3002\n\n```cpp\n#include <type_traits>\nnamespace enum_concept{\n    template<typename T>\n    struct has_bitwise_operators : std::false_type {};\n    template<typename T>\n    struct has_and_or_operators : has_bitwise_operators<T> {};\n}\n```\n\n``has_and_or_operators ``\u304c``has_bitwise_operators``\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u306e\u306f\u3001AND/OR\u6f14\u7b97\u304c\u305d\u306e\u4ed6Bit\u6f14\u7b97\u306b\u542b\u307e\u308c\u308b\u306e\u3067\u3001``has_bitwise_operators``\u3092\u6e80\u305f\u3059``enum class``\u306f\u5f53\u7136``has_and_or_operators``\u3092\u6e80\u305f\u3057\u307e\u3059\u306d\u3002\n\n### \u3044\u3064\u3082\u306e\u3042\u308c\u3092\u66f8\u304f\n\n\u3044\u3064\u3082\u306e\u3042\u308c\u3001\u3067\u901a\u3058\u308b\u4eba\u3069\u306e\u304f\u3089\u3044\u3044\u308b\u3093\u3060\u308d\u3046\u304b\u3002\n[std::enable_if\u3092\u4f7f\u3063\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u6642\u3001enabler\u3092\u4f7f\u3046\uff1f](http://qiita.com/kazatsuyu/items/203584ef4cb8b9e52462)\n\u3053\u308c\u3067\u3059\u3002\u6b21\u306e\u9805\u3067SFINAE\u3059\u308b\u306e\u306b\u4f7f\u3044\u307e\u3059\n\n```cpp\nnamespace type_traits{\n    template<bool con> using concept_t = typename std::enable_if<con, std::nullptr_t>::type;\n    template<typename T> using underlying_type_t = typename std::underlying_type<T>::type;//C++11\u306b\u306f\u306a\u3044\n}\n```\n\n### SFINAE\u3057\u3064\u3064operator overload\u3092\u66f8\u304f\n\n\u3042\u3093\u307e\u89e3\u8aac\u3059\u308b\u3053\u3068\u3082\u306a\u3044\u3051\u3069\u4e00\u5fdc\u3002\n\u307e\u305a\u3001``enum``\u306b\u3057\u308d``enum class``\u306b\u3057\u308d\u3001\u57fa\u5e95\u578b\u3068\u3044\u3046\u3082\u306e\u304c\u5b58\u5728\u3057\u307e\u3059\u3002``enum class``\u306f\u57fa\u5e95\u578b\u306b\u660e\u793a\u5909\u63db\u3067\u304d\u307e\u3059\u3002\u57fa\u5e95\u578b\u306f\u6574\u6570\u578b\u306a\u306e\u3067\u3001\u3053\u308c\u304b\u3089orverload \u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308boperator\u306f\u3059\u3067\u306b\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u57fa\u5e95\u578b\u306f``std::underlying_type``\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\n\n\u3088\u3063\u3066\u5404operator overload\u306e\u5b9f\u88c5\u6226\u7565\u3068\u3057\u3066\u306f\n\n1. \u5f15\u6570\u3092\u57fa\u5e95\u578b\u306b``static_cast``\u3059\u308b\n2. \u6f14\u7b97\u3059\u308b\n3. \u3082\u3068\u306e\u578b\u306b``static_cast``\u3059\u308b\n\n\u3068\u8a00\u3046\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305f\u3060``static_cast<underlying_type_t<T>>``\u3068\u66f8\u304f\u306e\u306f\u3060\u308b\u3044&\u53ef\u8aad\u6027\u4e0b\u304c\u308b&typo\u3057\u3084\u3059\u304f\u306a\u308b\u3068\u3001\uff13\u62cd\u5b50\u63c3\u3063\u3066\u3084\u308b\u3079\u304d\u3067\u306f\u306a\u3044\u306e\u3067\u3001``underlying_cast``\u3068\u3044\u3046\u306e\u3092\u3067\u3063\u3061\u4e0a\u3052\u3066\u3044\u307e\u3059\u3002[\u7a4d\u6975\u7684\u306b\u6020\u3051\u3066\u3044\u3053\u3046\u306a\uff01](http://qiita.com/akinomyoga/items/a5df34fc78efd86fa4ef#33-peel)\u3002\u307e\u3042``std::underlying_type``\u306etemplate\u7b2c\u4e00\u5f15\u6570\u306benum\u3058\u3083\u306a\u3044\u578b\u3092\u6e21\u305b\u306a\u3044\u304b\u3089SFINAE\u3057\u3066\u304a\u304d\u305f\u3044\u3001\u3068\u3044\u3046\u8a71\u3082\u3042\u308a\u307e\u3059\u304c\u3002C++\u304c[\u3069\u3093\u306a\u554f\u984c\u3067\u3082\u3082\u3046\u4e00\u6bb5\u968e\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u304b\u307e\u3059\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u308b\u3002\u305f\u3060\u3057\u3001\u30e9\u30c3\u30d1\u30fc\u304c\u591a\u3059\u304e\u308b\u3068\u3044\u3046\u554f\u984c\u3092\u9664\u3044\u3066\u306f\u3002](https://cpplover.blogspot.jp/2016/03/c-p0174r0-p0189r0.html)\u3068\u3044\u3046\u8a00\u8a9e\u3060\u3068\u3088\u304f\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\n```cpp\nnamespace detail{\n    using namespace type_traits;\n    template<typename T, concept_t<std::is_enum<T>::value> = nullptr>\n    constexpr underlying_type_t<T> underlying_cast(T e) { return static_cast<underlying_type_t<T>>(e); }\n}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_and_or_operators<T>::value> = nullptr>\nconstexpr T operator&(T l, T r) {return static_cast<T>(detail::underlying_cast(l) & detail::underlying_cast(r));}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_and_or_operators<T>::value> = nullptr>\nT& operator&=(T& l, T r) {\n    l = static_cast<T>(detail::underlying_cast(l) & detail::underlying_cast(r));\n    return l;\n}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_and_or_operators<T>::value> = nullptr>\nconstexpr T operator|(T l, T r) {return static_cast<T>(detail::underlying_cast(l) | detail::underlying_cast(r));}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_and_or_operators<T>::value> = nullptr>\nT& operator|=(T& l, T r) {\n    l = static_cast<T>(detail::underlying_cast(l) | detail::underlying_cast(r));\n    return l;\n}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_bitwise_operators<T>::value> = nullptr>\nconstexpr T operator^(T l, T r) {return static_cast<T>(detail::underlying_cast(l) ^ detail::underlying_cast(r));}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_bitwise_operators<T>::value> = nullptr>\nT& operator^=(T& l, T r) {\n    l = static_cast<T>(detail::underlying_cast(l) ^ detail::underlying_cast(r));\n    return l;\n}\ntemplate<typename T, type_traits::concept_t<enum_concept::has_bitwise_operators<T>::value> = nullptr>\nconstexpr T operator~(T op) {return static_cast<T>(~detail::underlying_cast(op));}\n```\n\n### \u5bfe\u8c61\u3068\u306a\u308benum class\u3092\u5b9a\u7fa9\n\n```cpp\nenum class Flag1 : int {\n    a = 1,\n    b = 2\n};\nenum class Flag2 : int {\n    a = 4,\n    b = 8\n};\n```\n\n### concept\u3082\u3069\u304d\u306e\u30af\u30e9\u30b9\u306etemplate\u7279\u6b8a\u5316\u3092\u66f8\u304f\n\n\u4eca\u56de\u306f``Flag1``\u306f``& &= | |= ^ ^= ~``\u3001``Flag2``\u306f``& &= | |=``\u306e\u6f14\u7b97\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n```cpp\nnamespace enum_concept{\n    template<> struct has_bitwise_operators<Flag1> : std::true_type {};\n    template<> struct has_and_or_operators<Flag2> : std::true_type {};\n}\n```\n\n\u3055\u304d\u307b\u3069\u3001``has_bitwise_operators``\u3084``has_and_or_operators``\u306foperator overload\u306eSFINAE\u306e\u6761\u4ef6\u306b\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u3053\u3067\u8a31\u53ef\u3059\u308btemplate\u7279\u6b8a\u5316\u3092\u66f8\u304f\u3053\u3068\u3067operator overload\u304c\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u306d\u3002\u5143\u8a18\u4e8b\u306e @akinomyoga \u3055\u3093\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u3067\u306funderlying_type \u3068\u306e\u6f14\u7b97\u3084\u4ed6\u306eenum class\u3068\u306e\u6f14\u7b97\u3092\u6709\u52b9\u306b\u3059\u308b\u624b\u6bb5\u3082\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4e00\u4f53\u3069\u3046\u3084\u3063\u305f\u3089\u305d\u3093\u306a\u3082\u306e\u304c\u5fc5\u8981\u306a\u306e\u304b\u7406\u89e3\u3067\u304d\u306a\u3044\u306e\u3067(\u305d\u308c\u304f\u3089\u3044\u30ad\u30e3\u30b9\u30c8\u66f8\u3051)\u4eca\u56de\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u4f7f\u3063\u3066\u307f\u308b\n\n```cpp\nvoid f(Flag1){}\nvoid g(Flag2){}\nint main()\n{\n    f(Flag1::a | Flag1::b);\n    f(Flag1::a & Flag1::b);\n    f(Flag1::a ^ Flag1::b);\n    f(~Flag1::a);\n    g(Flag2::a | Flag2::b);\n    g(Flag2::a & Flag2::b);\n    //g(Flag2::a ^ Flag2::b);//invalid operands to binary expression ('Flag2' and 'Flag2')\n    //g(~Flag2::a);//invalid argument type 'Flag2' to unary expression\n}\n```\n\nhttp://melpon.org/wandbox/permlink/A6XI2lDkeXfHQrJ8\n\n### \u6ce8\u610f\u70b9\n\n\u4eca\u56de\u306fC++11\u306e\u7bc4\u56f2\u3067\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u4ee3\u5165\u3082\u3059\u308b\u6f14\u7b97\u5b50\u306fC++14\u3058\u3083\u306a\u3044\u3068constexpr\u306b\u3067\u304d\u307e\u305b\u3093\u3002\u306a\u304aVisual Studio 2013\u3067\u306fconstexpr\u306f\u4f7f\u3048\u307e\u305b\u3093\u304c\u3001\u4e0a\u306e\u30b3\u30fc\u30c9\u304b\u3089constexpr\u3092\u7f6e\u63db\u3057\u3066\u53d6\u308a\u9664\u3051\u3070\u591a\u5206\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u5f97\u3089\u308c\u305f\u3082\u306e\n\n- \u30d5\u30e9\u30b0\u6307\u5b9a\u3059\u308b\u6642\u306e\u51e1\u30df\u30b9\u304c\u6e1b\u3089\u305b\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n- enum class\u306b\u5e0c\u671b\u304c\u6301\u3066\u305f\n\n## \u5931\u3063\u305f\u3082\u306e\n\n- \u3053\u306e\u8a18\u4e8b\u3092\u8aad\u3080\u306e\u306b\u8cbb\u3084\u3057\u305f\u6642\u9593\n\n## \u305d\u308c\u306b\u3057\u3066\u3082\n\n**concept\u304c\u306a\u3044\u4e16\u754c\u306f\u3044\u3084\u3084\u30fc\uff01\u6765\u4e16\u306fconcept\u304c\u3042\u308b\u4e16\u754c\u306b\u7523\u307e\u308c\u3055\u305b\u3066\u304f\u3060\u3055\u30fc\u3044\uff01**\n\nC++11\u306econcept\u3068C++17\u306b\u63d0\u6848\u3055\u308c\u3066\u3044\u305fconcept\u306b\u3064\u3044\u3066\u306f\n[\u5e30\u3063\u3066\u304d\u305f\u30b3\u30f3\u30bb\u30d7\u30c8 | Boost\u52c9\u5f37\u4f1a #16 \u5927\u962a](http://ezoeryou.github.io/boost-benkyokai-oosaka-16/#/)\n\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u3042C++17\u306bconcept\u304c\u5165\u3089\u306a\u3044\u3053\u3068\u304c\u78ba\u5b9a\u3057\u305f\u3051\u3069\u306a\uff01\n\n## \u4f59\u8ac7\n\n\u51c4\u307e\u3058\u304f\u3069\u3046\u3067\u3082\u3044\u3044\u8a71\u3067\u3059\u304c\u3001\u5192\u982d\u306e\u96d1\u30b3\u30e9\u3001\u6700\u521d3\u679a\u306f\u30b7\u30fc\u30f3\u7684\u306b\u306f\u6620\u753b\u6700\u5f8c\u306e\u30b7\u30fc\u30f3\u3067(\u4e09\u8449\u3068\u7027\u304c\u30bf\u30a4\u30e0\u30b9\u30ea\u30c3\u30d7\u3057\u3066\u308b\u7d75\u3060\u3051\u3069)\u30012021\u5e7412\u6708\u3068\u3044\u3046\u8a2d\u5b9a\u3089\u3057\u3044\u306e\u3067C++17\u3068C++20\u306f\u51fa\u3066\u307e\u3059\u306d\u3002C++23\u306b\u5411\u3051\u3066\u6a19\u6e96\u5316\u59d4\u54e1\u4f1a\u306b\u307e\u305fconcept\u3068\u304b\u304c\u63d0\u6848\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3002\n4\u679a\u76ee\u306f2013\u5e749\u6708\u3054\u308d\u306e\u306f\u305a\u306a\u306e\u3067\u3001C++11\u306bconcept\u304c\u5165\u3089\u306a\u3044\u3053\u3068\u306b\u306a\u308a\u9593\u3082\u306a\u304fC++14\u304c\u3067\u308b\u3051\u3069\u3084\u3063\u3071\u308a\u306a\u3093\u3067concept\u306a\u3044\u3093\u3084\uff01\u3068\u3044\u3046\u6642\u671f\u3067\u3059\u306d\u3002C++17\u306b\u63d0\u6848\u3055\u308c\u3066\u3044\u3066\u307e\u305f\u3082reject\u3092\u55b0\u3089\u3063\u305fConcept Lite\u306e\u4f5c\u696d\u304c\u59cb\u307e\u3063\u305f\u306e\u304c[2014/2/17\u3089\u3057\u3044\u306e\u3067](https://github.com/cplusplus/concepts-ts/commit/e0b420cefa63bc0fdf03dbe01dd189ee9c4ab64f)\u307e\u3060\u4e09\u8449\u306f\u518d\u63d0\u6848\u306e\u8a71\u306f\u77e5\u3089\u306a\u3044\u306f\u305a\u3067\u3059\u306d\u3002\n\ncf.)\n[\u3010\u30cd\u30bf\u30d0\u30ec\u89e3\u8aac\u3011\uff62\u541b\u306e\u540d\u306f\u3002\uff63\u8aad\u8005\u3068\u5171\u306b\u8aad\u89e3\u5165\u308c\u66ff\u308f\u308a\u6642\u7cfb\u5217\u3001\u56f3\u89e3\u3067\u89e3\u8aac!\uff62\u8ee2\u6821\u751f\uff63\u3069\u3053\u308d\u3058\u3083\u306a\u304b\u3063\u305f\u2026\u30c1\u30a7\u30fb\u30d6\u30f3\u30d6\u30f3\u306e\u30c6\u30a3\u30fc\u30de - Part 2](http://france-chebunbun.com/2016/08/29/post-7566/2/)\n", "tags": ["C++", "C++11"]}