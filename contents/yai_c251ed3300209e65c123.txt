{"context": "\u4ee5\u524d\uff081,2,3\uff09\u304b\u3089\u306e\u7d9a\u304d\u7269\u3002\n\u5206\u985e\u3070\u304b\u308a\u3067\u306f\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001\u56de\u5e30\u554f\u984c\u3092\u8a66\u3057\u305f\u3044\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u4eca\u56de\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afTensorFlow\u3084scikit-learn\u3092\u4f7f\u7528\u3057\u3066\u682a\u4fa1\u3092\u76f4\u63a5\u4e88\u60f3\u3059\u308b\u3068\u3044\u3046\u904a\u3073\u3002\u524d\u306f\u7fcc\u65e5\u306e\u682a\u4fa1\u304c\u300c\u4e0a\u304c\u308b or \u4e0b\u304c\u308b\u300d\u306e2\u629e\u306e\u5206\u985e\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u300c\u4f55\u5186\u304b\u300d\u3092\u76f4\u63a5\u4e88\u60f3\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001\u5165\u529b\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306f\u4f7f\u3044\u56de\u3057\u3067\u3059\u3002\u6bce\u56de\u30b9\u30df\u30de\u30bb\u30f3\u3002\n\n\u8da3\u65e8\n\nTensorFlow\u3084scikit-learn\u3092\u4f7f\u7528\u3057\u3066\u3001\u682a\u4fa1\u306e\u4e88\u60f3\u3092\u3057\u3066\u307f\u308b\u3002\n\u7cbe\u5ea6\u3084\u4f7f\u7528\u611f\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n\n\u3084\u308b\u3053\u3068\n\u300c\u6570\u65e5\u5206\u306e\u4e16\u754c\u4e2d\u306e\u682a\u4fa1\u6307\u6570\uff08\u30c0\u30a6\u3001\u65e5\u7d4c\u5e73\u5747\u3001DAX\u306a\u3069\uff09\u3092\u4f7f\u7528\u3057\u3066\u3001\u6b21\u306e\u65e5\u306e\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u3092\u4e88\u60f3\u3059\u308b\u300d\uff08\u56de\u5e30\uff09\n\n\u74b0\u5883\n\nscikit-learn\nscikit-learn 0.17.1\nPython 2.7\nWindows 7\n\nTensorFlow\nTensorFlow 0.7\nUbuntu 14.04\nPython 2.7\nAWS EC2 micro instance\n\n\u5b9f\u88c5\nQuandl\u3068\u3044\u3046\u30b5\u30a4\u30c8\u304b\u3089\u3001\u65e5\u7d4c\u3001\u30c0\u30a6\u3001\u9999\u6e2f\u30cf\u30f3\u30bb\u30f3\u3001\u30c9\u30a4\u30c4\u306e\u682a\u4fa1\u6307\u6570\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3002\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u30661\u3064\u306b\u307e\u3068\u3081\u307e\u3059\u3002\uff08\u624b\u4f5c\u696d\uff09\n\n\u30e9\u30d9\u30eb\n\u6b63\u89e3\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u7fcc\u65e5\u306e\u7d42\u5024\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\uff08\u7fcc\u65e5\u306e\u7d42\u5024\u3092\u4e88\u60f3\u3059\u308b\uff09\n\u3057\u304b\u3057\u3001\u76f4\u63a5\u682a\u4fa1\u3092\u30e9\u30d9\u30eb\u3068\u3057\u3066\u3064\u3063\u3053\u3093\u3067\u307f\u305f\u3068\u3053\u308d\u3001\u3076\u308c\u3063\u3076\u308c\u3067\u767a\u6563\u3057\u307e\u304f\u308a\u306a\u7d50\u679c\u3068\u306a\u3063\u305f\u305f\u3081\u4e00\u5de5\u592b\u3002\u4e88\u60f3\u3059\u308b\u5bfe\u8c61\u3092\u300c\u7fcc\u65e5\u306e\u7d42\u5024\u304c\u524d\u65e5\u3088\u308a\u4f55\u30d1\u30fc\u30bb\u30f3\u30c8\u4e0a\u4e0b\u3059\u308b\u304b\u300d\u3068\u3044\u3046\u9593\u63a5\u7684\u306a\u3082\u306e\u306b\u3057\u3001\u5f8c\u306b\u8a08\u7b97\u3057\u76f4\u3057\u3066\u7d42\u5024\u3092\u6c42\u3081\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u5f8c\u8ff0\u3059\u308b\u5165\u529b\u306b\u3082\u540c\u69d8\u306e\u5909\u5316\u7387\u3092\u4f7f\u3046\u306e\u3067\u3001\u7406\u306b\u9069\u3063\u3066\u3044\u308b\u30fb\u30fb\u30fb\u3068\u3044\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002(\u30fb\u30fb;)\n# JUDGE_DAY = 1, \u7b2c\u4e8c\u6dfb\u5b57\u306e[3]\u306f\u65e5\u7d4c\u5e73\u5747\u306e\u7d42\u5024\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\ny_array.append([(array_base[i][3] - array_base[i+JUDGE_DAY][3]) / array_base[i][3] * 100])\n\n\n\u5165\u529b\u30c7\u30fc\u30bf\n\u682a\u4fa1\u3092\u305d\u306e\u307e\u307e\u5165\u308c\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u300c\u524d\u65e5\u306b\u6bd4\u3079\u3066\u3069\u308c\u304f\u3089\u3044\uff08%\uff09\u4e0a\u4e0b\u3057\u305f\u304b\u300d\u306e\u30ea\u30b9\u30c8\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002\uff08\u682a\u4fa1\u3092\u305d\u306e\u307e\u307e\u5165\u308c\u3066\u3082\u5168\u7136\u4e0a\u624b\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u305f\u3081\uff09\ntmp_array = []\nfor j in xrange(i+1, i + data_num + 1):\n    for k in range(16):\n        tmp_array.append((array_base[j][k] - array_base[j+1][k]) / array_base[j][k] * 100)\nx_array.append(tmp_array)\n\n\nTensorFlow\u56fa\u6709\u306e\u8a71\n\n\u30b0\u30e9\u30d5\nTensorFlow\u306f\u96a0\u308c\u5c642\u3064\u3001\u30e6\u30cb\u30c3\u30c8\u6570\u306f\u305d\u308c\u305e\u308c50,25\u3068\u3057\u3066\u3044\u307e\u3059\u3002\nNUM_HIDDEN1 = 50\nNUM_HIDDEN2 = 25\n\ndef inference(x_ph, keep_prob):\n\n  with tf.name_scope('hidden1'):\n    weights = tf.Variable(tf.truncated_normal([data_num * price_num, NUM_HIDDEN1], stddev=stddev), name='weights')\n    biases = tf.Variable(tf.zeros([NUM_HIDDEN1]), name='biases')\n    hidden1 = tf.nn.relu(tf.matmul(x_ph, weights) + biases)\n\n  with tf.name_scope('hidden2'):\n    weights = tf.Variable(tf.truncated_normal([NUM_HIDDEN1, NUM_HIDDEN2], stddev=stddev), name='weights')\n    biases = tf.Variable(tf.zeros([NUM_HIDDEN2]), name='biases')\n    hidden2 = tf.nn.relu(tf.matmul(hidden1, weights) + biases)\n\n  #DropOut\n  dropout = tf.nn.dropout(hidden2, keep_prob)\n\n  with tf.name_scope('regression'):\n    weights = tf.Variable(tf.truncated_normal([NUM_HIDDEN2, 1], stddev=stddev), name='weights')\n    biases = tf.Variable(tf.zeros([1]), name='biases')\n    y = tf.matmul(dropout, weights) + biases\n\n  return y\n\n\n\u640d\u5931\n\u640d\u5931\u306e\u8a08\u7b97\u306fl2_loss()\u3092\u4f7f\u7528\u3002\n\u6570\u5024\u306e\u5dee\u5206\u304c\u640d\u5931\u306b\u5f53\u305f\u308b\u304b\u3089\u30b3\u30ec\u304c\u826f\u3044\u306e\u304b\u3068\u52dd\u624b\u306b\u601d\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u6b63\u3057\u3044\u306e\u304b\u4e0d\u660e\u3002\u300c\u9055\u3046\u3060\u308d\u300d\u3068\u3044\u3046\u65b9\u3001\u30b3\u30e1\u30f3\u30c8\u304a\u5f85\u3061\u3057\u3066\u3044\u307e\u3059\u3002\ndef loss(y, target):\n\n  return tf.reduce_mean(tf.nn.l2_loss((y - target)))\n\n\n\u6700\u9069\u5316\n\u7279\u7b46\u3059\u308b\u3053\u3068\u306f\u7121\u3044\u3067\u3059\u304b\u306d\u3002\n\ndef optimize(loss):\n  optimizer = tf.train.AdamOptimizer(learning_rate)\n  train_step = optimizer.minimize(loss)\n  return train_step\n\n\n\u8a13\u7df4\n\u3053\u3061\u3089\u3082\u7279\u306b\u7279\u7b46\u3059\u308b\u3068\u3053\u308d\u306f\u7121\u3044\u3067\u3059\u304b\u306d\u3002\ndef training(sess, train_step, loss, x_train_array, y_flg_train_array):\n\n  summary_op = tf.merge_all_summaries()\n  init = tf.initialize_all_variables()\n  sess.run(init)\n\n  summary_writer = tf.train.SummaryWriter(LOG_DIR, graph_def=sess.graph_def)\n\n  for i in range(int(len(x_train_array) / bach_size)):\n    batch_xs = getBachArray(x_train_array, i * bach_size, bach_size)\n    batch_ys = getBachArray(y_flg_train_array, i * bach_size, bach_size)\n    sess.run(train_step, feed_dict={x_ph: batch_xs, y_ph: batch_ys, keep_prob: 0.8})\n    ce = sess.run(loss, feed_dict={x_ph: batch_xs, y_ph: batch_ys, keep_prob: 1.0})\n\n    summary_str = sess.run(summary_op, feed_dict={x_ph: batch_xs, y_ph: batch_ys, keep_prob: 1.0})\n    summary_writer.add_summary(summary_str, i)\n\n\n\u8a55\u4fa1\n\u7cbe\u5ea6\u3068\u3057\u3066\u3001\u8a08\u7b97\u3067\u6c42\u3081\u305f\u682a\u4fa1\u306e\u5909\u52d5\u7387\u3068\u3001\u5b9f\u969b\u306e\u5909\u52d5\u7387\u306e\u5dee\u3092\u6c42\u3081\u3001\u305d\u306e\u7d76\u5bfe\u5024\u306e\u5e73\u5747\u3092\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u5e73\u5747\u8aa4\u5dee\u3092\u51fa\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\naccuracy = tf.reduce_mean(tf.abs(y - y_ph))\nprint \"accuracy\"\nprint(sess.run(accuracy, feed_dict={x_ph: test_batch_xs, y_ph: test_batch_ys, keep_prob: 1.0}))\n\n\nscikit-learn\u56fa\u6709\u306e\u8a71\n\n\u56de\u5e30\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u8272\u3005\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u30fb\u30fb\u30fb\u3069\u308c\u304c\u6700\u9069\u306a\u306e\u304b\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a3\u3064\u307b\u3069\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u5f15\u6570\u7121\u3057\u3067\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n# SGDRegressor\nclf = linear_model.SGDRegressor()\ntestClf(clf, x_train_array, y_train_array, x_test_array, y_test_array)\n\n# DecisionTreeRegressor\nclf = tree.DecisionTreeRegressor()\ntestClf(clf, x_train_array, y_train_array, x_test_array, y_test_array)\n\n# SVM\nclf = svm.SVR()\ntestClf(clf, x_train_array, y_train_array, x_test_array, y_test_array)\n\n\n\u8a13\u7df4\u3001\u8a55\u4fa1\n\u8a13\u7df4\u306ffit()\u3092\u5b9f\u884c\u3059\u308b\u306e\u307f\u3002\u8a55\u4fa1\u306fscore()\u3092\u5b9f\u884c\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u4e00\u90e8\u30de\u30a4\u30ca\u30b9\u5024\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u3069\u3046\u5224\u65ad\u3057\u3066\u3044\u3044\u306e\u304b\u3088\u304f\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\uff08\u3054\u5b58\u77e5\u306e\u65b9\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff09\u3001TensorFlow\u306e\u6642\u3068\u540c\u69d8\u3001\u4e88\u6e2c\u682a\u4fa1\u5909\u5316\u7387\u3092\u51fa\u3057\u3066\u3001\u5b9f\u969b\u306e\u682a\u4fa1\u306e\u5909\u5316\u7387\u306e\u5dee\u306e\u7d76\u5bfe\u5024\u306e\u5e73\u5747\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\uff08\u8981\u306f\u5e73\u5747\u8aa4\u5dee\uff09\u3002\ndef testClf(clf, x_train_array, y_flg_train_array, x_test_array, y_flg_test_array):\n\n    print clf\n    clf.fit(x_train_array, y_flg_train_array)\n    result = clf.predict(x_test_array)\n    print clf.score(x_test_array, y_flg_test_array)\n    print np.mean(np.abs(np.array(result) - np.array(y_flg_test_array)))\n\n\n\u7d50\u679c\nTensorFlow\n1.00044\n\nscikit-learn\nSGDRegressor: 0.943171296872\nDecisionTreeRegressor: 1.3551351662\nSVM: 0.945361479916\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6982\u306d1%\u7a0b\u5ea6\u306e\u8aa4\u5dee\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\u682a\u4fa1\u306e\u4e88\u60f3\u30671%\u306e\u8aa4\u5dee\u3063\u3066\u30fb\u30fb\u30fb\u3001\u5168\u304f\u4f7f\u3048\u306a\u30fb\u30fb\u30fb\u30b2\u30d5\u30f3\u30b2\u30d5\u30f3\u3002\n\n\u5b9f\u969b\u306b\u4e88\u60f3\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u5b9f\u969b\u306b\u4e88\u6e2c\u5024\u3092\u51fa\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u624b\u5143\u306e\u30c7\u30fc\u30bf\u304c2016/03/24\u307e\u3067\u306e\u30c7\u30fc\u30bf\u306a\u306e\u3067\u30012016/03/25\u306e\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u306e\u7d42\u5024\u3092\u4e88\u60f3\u3057\u307e\u3059\u3002scikit-learn\u306fSVM\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u203b\u6570\u5b57\u306e\u7f85\u5217\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u5165\u529b\u90e8\u5206\u306f\u7701\u7565\u3057\u307e\u3059\u3002\u3069\u3061\u3089\u3082data\u306b\u904e\u53bb\u6570\u65e5\u5206\u306e\u682a\u4fa1\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u300216892.33\u306f3/24\u306e\u7d42\u5024\u3067\u3059\u3002\n\nTensorFlow\np = sess.run(y, feed_dict={x_ph: data, keep_prob: 1.0})\nprice = ((p[0][0] / 100.) + 1.) * 16892.33\nprint price\n\n\n\nscikit-learn\np = clf.predict(data)\nprice = ((p[0] / 100.) + 1.) * 16892.33\nprint price\n\n\n\n\u7d50\u679c\n\nTensorFlow\n16804.3398821\n\n\n\nscikit-learn\n16822.6013292\n\n\n\u3067\u3001\u5b9f\u969b\u306e3/25\u306e\u682a\u4fa1\u306f\u30fb\u30fb\u30fb17,002.75\u3002\n\u30fb\u30fb\u30fb\u307e\u3041\u305d\u3093\u306a\u3082\u306e\u3067\u3059\u3088\u306d\u3002\n\n\u8003\u5bdf\n\n\u6a5f\u68b0\u5b66\u7fd2\u3068\u3044\u3063\u3066\u3082\u3001\u300c\u306a\u3093\u3067\u3082\u3064\u3063\u3053\u3093\u3067\u8a13\u7df4\u3057\u3066\u3084\u308c\u3070\u6a5f\u68b0\u304c\u9811\u5f35\u3063\u3066\u6700\u9069\u306a\u3082\u306e\u304c\u51fa\u3066\u304f\u308b\u300d\u308f\u3051\u3067\u306f\u306a\u3044\u3089\u3057\u3044\u3002\u4eba\u9593\u5074\u3082\u6a5f\u68b0\u304c\u8003\u3048\u3084\u3059\u304f\u7b54\u3048\u3092\u51fa\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u3079\u304d\u304b\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3002\n\n\n\u6240\u611f\n\n\u56de\u5e30\u554f\u984c\u697d\u3057\u3044\u3002\n\u5206\u985e\u306e\u3088\u3046\u306b\u3001\u300c\u5168\u90e8\u6700\u521d\u306e\u30ab\u30c6\u30b4\u30ea\u300d\u3068\u304b\u3084\u308b\u6c17\u306e\u7121\u3044\u56de\u7b54\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u30a8\u30e9\u30fc\u304c\u898b\u3064\u3051\u3084\u3059\u3044\u3002\n\u5206\u985e\u306e\u6642\u3068\u591a\u5c11\u30b3\u30fc\u30c9\u306f\u5909\u308f\u308b\u3051\u3069\u30018\u5272\u65b9\u4f7f\u3044\u307e\u308f\u305b\u308b\u306e\u3067\u958b\u767a\u306f\u697d\u3002\n\n\u4ee5\u524d\uff08[1](http://qiita.com/yai/items/5ec5bbfbcc53c9770c40),[2](http://qiita.com/yai/items/8c0ad280cc2f53e40256),[3](http://qiita.com/yai/items/1b7f8ef69f8f2343e3e9)\uff09\u304b\u3089\u306e\u7d9a\u304d\u7269\u3002\n\u5206\u985e\u3070\u304b\u308a\u3067\u306f\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001\u56de\u5e30\u554f\u984c\u3092\u8a66\u3057\u305f\u3044\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u4eca\u56de\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afTensorFlow\u3084scikit-learn\u3092\u4f7f\u7528\u3057\u3066\u682a\u4fa1\u3092\u76f4\u63a5\u4e88\u60f3\u3059\u308b\u3068\u3044\u3046\u904a\u3073\u3002\u524d\u306f\u7fcc\u65e5\u306e\u682a\u4fa1\u304c\u300c\u4e0a\u304c\u308b or \u4e0b\u304c\u308b\u300d\u306e2\u629e\u306e\u5206\u985e\u3067\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u300c\u4f55\u5186\u304b\u300d\u3092\u76f4\u63a5\u4e88\u60f3\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001\u5165\u529b\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u306f\u4f7f\u3044\u56de\u3057\u3067\u3059\u3002\u6bce\u56de\u30b9\u30df\u30de\u30bb\u30f3\u3002\n\n##\u8da3\u65e8\n- TensorFlow\u3084scikit-learn\u3092\u4f7f\u7528\u3057\u3066\u3001\u682a\u4fa1\u306e\u4e88\u60f3\u3092\u3057\u3066\u307f\u308b\u3002\n- \u7cbe\u5ea6\u3084\u4f7f\u7528\u611f\u3092\u78ba\u8a8d\u3059\u308b\u3002\n\n##\u3084\u308b\u3053\u3068\n\u300c\u6570\u65e5\u5206\u306e\u4e16\u754c\u4e2d\u306e\u682a\u4fa1\u6307\u6570\uff08\u30c0\u30a6\u3001\u65e5\u7d4c\u5e73\u5747\u3001DAX\u306a\u3069\uff09\u3092\u4f7f\u7528\u3057\u3066\u3001\u6b21\u306e\u65e5\u306e\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u3092\u4e88\u60f3\u3059\u308b\u300d\uff08\u56de\u5e30\uff09\n\n##\u74b0\u5883\n###scikit-learn\nscikit-learn 0.17.1\nPython 2.7\nWindows 7\n###TensorFlow\nTensorFlow 0.7\nUbuntu 14.04\nPython 2.7\nAWS EC2 micro instance\n\n##\u5b9f\u88c5\n[Quandl](https://www.quandl.com/data/YAHOO)\u3068\u3044\u3046\u30b5\u30a4\u30c8\u304b\u3089\u3001\u65e5\u7d4c\u3001\u30c0\u30a6\u3001\u9999\u6e2f\u30cf\u30f3\u30bb\u30f3\u3001\u30c9\u30a4\u30c4\u306e\u682a\u4fa1\u6307\u6570\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3002\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u30661\u3064\u306b\u307e\u3068\u3081\u307e\u3059\u3002\uff08\u624b\u4f5c\u696d\uff09\n\n###\u30e9\u30d9\u30eb\n\u6b63\u89e3\u306e\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u7fcc\u65e5\u306e\u7d42\u5024\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\uff08\u7fcc\u65e5\u306e\u7d42\u5024\u3092\u4e88\u60f3\u3059\u308b\uff09\n\u3057\u304b\u3057\u3001\u76f4\u63a5\u682a\u4fa1\u3092\u30e9\u30d9\u30eb\u3068\u3057\u3066\u3064\u3063\u3053\u3093\u3067\u307f\u305f\u3068\u3053\u308d\u3001\u3076\u308c\u3063\u3076\u308c\u3067\u767a\u6563\u3057\u307e\u304f\u308a\u306a\u7d50\u679c\u3068\u306a\u3063\u305f\u305f\u3081\u4e00\u5de5\u592b\u3002\u4e88\u60f3\u3059\u308b\u5bfe\u8c61\u3092\u300c\u7fcc\u65e5\u306e\u7d42\u5024\u304c\u524d\u65e5\u3088\u308a\u4f55\u30d1\u30fc\u30bb\u30f3\u30c8\u4e0a\u4e0b\u3059\u308b\u304b\u300d\u3068\u3044\u3046\u9593\u63a5\u7684\u306a\u3082\u306e\u306b\u3057\u3001\u5f8c\u306b\u8a08\u7b97\u3057\u76f4\u3057\u3066\u7d42\u5024\u3092\u6c42\u3081\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u5f8c\u8ff0\u3059\u308b\u5165\u529b\u306b\u3082\u540c\u69d8\u306e\u5909\u5316\u7387\u3092\u4f7f\u3046\u306e\u3067\u3001\u7406\u306b\u9069\u3063\u3066\u3044\u308b\u30fb\u30fb\u30fb\u3068\u3044\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002(\u30fb\u30fb;)\n\n```\n# JUDGE_DAY = 1, \u7b2c\u4e8c\u6dfb\u5b57\u306e[3]\u306f\u65e5\u7d4c\u5e73\u5747\u306e\u7d42\u5024\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\ny_array.append([(array_base[i][3] - array_base[i+JUDGE_DAY][3]) / array_base[i][3] * 100])\n```\n\n###\u5165\u529b\u30c7\u30fc\u30bf\n\u682a\u4fa1\u3092\u305d\u306e\u307e\u307e\u5165\u308c\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u300c\u524d\u65e5\u306b\u6bd4\u3079\u3066\u3069\u308c\u304f\u3089\u3044\uff08%\uff09\u4e0a\u4e0b\u3057\u305f\u304b\u300d\u306e\u30ea\u30b9\u30c8\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002\uff08\u682a\u4fa1\u3092\u305d\u306e\u307e\u307e\u5165\u308c\u3066\u3082\u5168\u7136\u4e0a\u624b\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u305f\u3081\uff09\n\n```\ntmp_array = []\nfor j in xrange(i+1, i + data_num + 1):\n    for k in range(16):\n        tmp_array.append((array_base[j][k] - array_base[j+1][k]) / array_base[j][k] * 100)\nx_array.append(tmp_array)\n```\n\n###TensorFlow\u56fa\u6709\u306e\u8a71\n####\u30b0\u30e9\u30d5\nTensorFlow\u306f\u96a0\u308c\u5c642\u3064\u3001\u30e6\u30cb\u30c3\u30c8\u6570\u306f\u305d\u308c\u305e\u308c50,25\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\nNUM_HIDDEN1 = 50\nNUM_HIDDEN2 = 25\n```\n\n```\ndef inference(x_ph, keep_prob):\n\n  with tf.name_scope('hidden1'):\n    weights = tf.Variable(tf.truncated_normal([data_num * price_num, NUM_HIDDEN1], stddev=stddev), name='weights')\n    biases = tf.Variable(tf.zeros([NUM_HIDDEN1]), name='biases')\n    hidden1 = tf.nn.relu(tf.matmul(x_ph, weights) + biases)\n  \n  with tf.name_scope('hidden2'):\n    weights = tf.Variable(tf.truncated_normal([NUM_HIDDEN1, NUM_HIDDEN2], stddev=stddev), name='weights')\n    biases = tf.Variable(tf.zeros([NUM_HIDDEN2]), name='biases')\n    hidden2 = tf.nn.relu(tf.matmul(hidden1, weights) + biases)\n  \n  #DropOut\n  dropout = tf.nn.dropout(hidden2, keep_prob)\n  \n  with tf.name_scope('regression'):\n    weights = tf.Variable(tf.truncated_normal([NUM_HIDDEN2, 1], stddev=stddev), name='weights')\n    biases = tf.Variable(tf.zeros([1]), name='biases')\n    y = tf.matmul(dropout, weights) + biases\n  \n  return y\n```\n\n####\u640d\u5931\n\u640d\u5931\u306e\u8a08\u7b97\u306f[l2_loss()](https://www.tensorflow.org/versions/r0.7/api_docs/python/nn.html#l2_loss)\u3092\u4f7f\u7528\u3002\n\u6570\u5024\u306e\u5dee\u5206\u304c\u640d\u5931\u306b\u5f53\u305f\u308b\u304b\u3089\u30b3\u30ec\u304c\u826f\u3044\u306e\u304b\u3068\u52dd\u624b\u306b\u601d\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u6b63\u3057\u3044\u306e\u304b\u4e0d\u660e\u3002\u300c\u9055\u3046\u3060\u308d\u300d\u3068\u3044\u3046\u65b9\u3001\u30b3\u30e1\u30f3\u30c8\u304a\u5f85\u3061\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\ndef loss(y, target):\n\n  return tf.reduce_mean(tf.nn.l2_loss((y - target)))\n```\n\n####\u6700\u9069\u5316\n\u7279\u7b46\u3059\u308b\u3053\u3068\u306f\u7121\u3044\u3067\u3059\u304b\u306d\u3002\n```\ndef optimize(loss):\n  optimizer = tf.train.AdamOptimizer(learning_rate)\n  train_step = optimizer.minimize(loss)\n  return train_step\n```\n\n####\u8a13\u7df4\n\u3053\u3061\u3089\u3082\u7279\u306b\u7279\u7b46\u3059\u308b\u3068\u3053\u308d\u306f\u7121\u3044\u3067\u3059\u304b\u306d\u3002\n\n```\ndef training(sess, train_step, loss, x_train_array, y_flg_train_array):\n  \n  summary_op = tf.merge_all_summaries()\n  init = tf.initialize_all_variables()\n  sess.run(init)\n  \n  summary_writer = tf.train.SummaryWriter(LOG_DIR, graph_def=sess.graph_def)\n  \n  for i in range(int(len(x_train_array) / bach_size)):\n    batch_xs = getBachArray(x_train_array, i * bach_size, bach_size)\n    batch_ys = getBachArray(y_flg_train_array, i * bach_size, bach_size)\n    sess.run(train_step, feed_dict={x_ph: batch_xs, y_ph: batch_ys, keep_prob: 0.8})\n    ce = sess.run(loss, feed_dict={x_ph: batch_xs, y_ph: batch_ys, keep_prob: 1.0})\n\n    summary_str = sess.run(summary_op, feed_dict={x_ph: batch_xs, y_ph: batch_ys, keep_prob: 1.0})\n    summary_writer.add_summary(summary_str, i)\n```\n####\u8a55\u4fa1\n\u7cbe\u5ea6\u3068\u3057\u3066\u3001\u8a08\u7b97\u3067\u6c42\u3081\u305f\u682a\u4fa1\u306e\u5909\u52d5\u7387\u3068\u3001\u5b9f\u969b\u306e\u5909\u52d5\u7387\u306e\u5dee\u3092\u6c42\u3081\u3001\u305d\u306e\u7d76\u5bfe\u5024\u306e\u5e73\u5747\u3092\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u5e73\u5747\u8aa4\u5dee\u3092\u51fa\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n```\naccuracy = tf.reduce_mean(tf.abs(y - y_ph))\nprint \"accuracy\"\nprint(sess.run(accuracy, feed_dict={x_ph: test_batch_xs, y_ph: test_batch_ys, keep_prob: 1.0}))\n```\n\n###scikit-learn\u56fa\u6709\u306e\u8a71\n####\u56de\u5e30\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u8272\u3005\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u30fb\u30fb\u30fb\u3069\u308c\u304c\u6700\u9069\u306a\u306e\u304b\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a3\u3064\u307b\u3069\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u5f15\u6570\u7121\u3057\u3067\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```\n# SGDRegressor\nclf = linear_model.SGDRegressor()\ntestClf(clf, x_train_array, y_train_array, x_test_array, y_test_array)\n\n# DecisionTreeRegressor\nclf = tree.DecisionTreeRegressor()\ntestClf(clf, x_train_array, y_train_array, x_test_array, y_test_array)\n\n# SVM\nclf = svm.SVR()\ntestClf(clf, x_train_array, y_train_array, x_test_array, y_test_array)\n```\n\n####\u8a13\u7df4\u3001\u8a55\u4fa1\n\u8a13\u7df4\u306ffit()\u3092\u5b9f\u884c\u3059\u308b\u306e\u307f\u3002\u8a55\u4fa1\u306fscore()\u3092\u5b9f\u884c\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u4e00\u90e8\u30de\u30a4\u30ca\u30b9\u5024\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u3069\u3046\u5224\u65ad\u3057\u3066\u3044\u3044\u306e\u304b\u3088\u304f\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\uff08\u3054\u5b58\u77e5\u306e\u65b9\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff09\u3001TensorFlow\u306e\u6642\u3068\u540c\u69d8\u3001\u4e88\u6e2c\u682a\u4fa1\u5909\u5316\u7387\u3092\u51fa\u3057\u3066\u3001\u5b9f\u969b\u306e\u682a\u4fa1\u306e\u5909\u5316\u7387\u306e\u5dee\u306e\u7d76\u5bfe\u5024\u306e\u5e73\u5747\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\uff08\u8981\u306f\u5e73\u5747\u8aa4\u5dee\uff09\u3002\n\n```\ndef testClf(clf, x_train_array, y_flg_train_array, x_test_array, y_flg_test_array):\n\n    print clf\n    clf.fit(x_train_array, y_flg_train_array)\n    result = clf.predict(x_test_array)\n    print clf.score(x_test_array, y_flg_test_array)\n    print np.mean(np.abs(np.array(result) - np.array(y_flg_test_array)))\n```\n\n##\u7d50\u679c\nTensorFlow\n\n```\n1.00044\n```\n\nscikit-learn\n\n```\nSGDRegressor: 0.943171296872\nDecisionTreeRegressor: 1.3551351662\nSVM: 0.945361479916\n```\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6982\u306d1%\u7a0b\u5ea6\u306e\u8aa4\u5dee\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\u682a\u4fa1\u306e\u4e88\u60f3\u30671%\u306e\u8aa4\u5dee\u3063\u3066\u30fb\u30fb\u30fb\u3001\u5168\u304f\u4f7f\u3048\u306a\u30fb\u30fb\u30fb\u30b2\u30d5\u30f3\u30b2\u30d5\u30f3\u3002\n\n##\u5b9f\u969b\u306b\u4e88\u60f3\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u5b9f\u969b\u306b\u4e88\u6e2c\u5024\u3092\u51fa\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u624b\u5143\u306e\u30c7\u30fc\u30bf\u304c2016/03/24\u307e\u3067\u306e\u30c7\u30fc\u30bf\u306a\u306e\u3067\u30012016/03/25\u306e\u65e5\u7d4c\u5e73\u5747\u682a\u4fa1\u306e\u7d42\u5024\u3092\u4e88\u60f3\u3057\u307e\u3059\u3002scikit-learn\u306fSVM\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u203b\u6570\u5b57\u306e\u7f85\u5217\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u5165\u529b\u90e8\u5206\u306f\u7701\u7565\u3057\u307e\u3059\u3002\u3069\u3061\u3089\u3082data\u306b\u904e\u53bb\u6570\u65e5\u5206\u306e\u682a\u4fa1\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u300216892.33\u306f3/24\u306e\u7d42\u5024\u3067\u3059\u3002\n\n```lang:TensorFlow\np = sess.run(y, feed_dict={x_ph: data, keep_prob: 1.0})\nprice = ((p[0][0] / 100.) + 1.) * 16892.33\nprint price\n```\n\n```lang:scikit-learn\np = clf.predict(data)\nprice = ((p[0] / 100.) + 1.) * 16892.33\nprint price\n```\n\n###\u7d50\u679c\n```lang:TensorFlow\n16804.3398821\n```\n\n```lang:scikit-learn\n16822.6013292\n```\n\u3067\u3001\u5b9f\u969b\u306e3/25\u306e\u682a\u4fa1\u306f\u30fb\u30fb\u30fb17,002.75\u3002\n**\u30fb\u30fb\u30fb\u307e\u3041\u305d\u3093\u306a\u3082\u306e\u3067\u3059\u3088\u306d\u3002**\n\n##\u8003\u5bdf\n- \u6a5f\u68b0\u5b66\u7fd2\u3068\u3044\u3063\u3066\u3082\u3001\u300c\u306a\u3093\u3067\u3082\u3064\u3063\u3053\u3093\u3067\u8a13\u7df4\u3057\u3066\u3084\u308c\u3070\u6a5f\u68b0\u304c\u9811\u5f35\u3063\u3066\u6700\u9069\u306a\u3082\u306e\u304c\u51fa\u3066\u304f\u308b\u300d\u308f\u3051\u3067\u306f\u306a\u3044\u3089\u3057\u3044\u3002\u4eba\u9593\u5074\u3082\u6a5f\u68b0\u304c\u8003\u3048\u3084\u3059\u304f\u7b54\u3048\u3092\u51fa\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u3079\u304d\u304b\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3002\n\n##\u6240\u611f\n- \u56de\u5e30\u554f\u984c\u697d\u3057\u3044\u3002\n- \u5206\u985e\u306e\u3088\u3046\u306b\u3001\u300c\u5168\u90e8\u6700\u521d\u306e\u30ab\u30c6\u30b4\u30ea\u300d\u3068\u304b\u3084\u308b\u6c17\u306e\u7121\u3044\u56de\u7b54\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u3001\u30a8\u30e9\u30fc\u304c\u898b\u3064\u3051\u3084\u3059\u3044\u3002\n- \u5206\u985e\u306e\u6642\u3068\u591a\u5c11\u30b3\u30fc\u30c9\u306f\u5909\u308f\u308b\u3051\u3069\u30018\u5272\u65b9\u4f7f\u3044\u307e\u308f\u305b\u308b\u306e\u3067\u958b\u767a\u306f\u697d\u3002\n", "tags": ["TensorFlow", "Python", "scikit-learn", "MachineLearning", "DeepLearning"]}