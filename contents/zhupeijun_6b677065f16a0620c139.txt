{"tags": ["C++11", "friend"], "context": "friend is a keyword that will ignore the property (private, protected, public) of class members. That is to say your friend class could access any of your members no matter it is private or public.\nThe definition of friend has nothing changed in C++11 but more convenient.\nAs you can see here, we do not need to specify the class keyword anymore.\nclass Enemy {\nprivate:\n    float hp;\n    float attack_damage;\n\n    // C++98 OK\n    // C++11 OK\n    friend class Admin;\n\n    // C++98 error: C++ requires a type specifier for all declarations\n    // C++11 OK\n    friend Admin;\n};\n\nThis change enables us to use the friend keyword to template.\ntemplate<typename T> class Enemy {\nprivate:\n    float hp;\n    float attack_damage;\n\n    friend T;\n};\n\nWhen T is int, nothing will happen.\nWith this we can specify which class can access the private member of this class when we create a class instance.\n`friend` is a keyword that will ignore the property (private, protected, public) of class members. That is to say your `friend` class could access any of your members no matter it is private or public.\n\nThe definition of `friend` has nothing changed in C++11 but more convenient.\n\nAs you can see here, we do not need to specify the `class` keyword anymore.\n\n```cpp\nclass Enemy {\nprivate:\n    float hp;\n    float attack_damage;\n\n    // C++98 OK\n    // C++11 OK\n    friend class Admin;\n\n    // C++98 error: C++ requires a type specifier for all declarations\n    // C++11 OK\n    friend Admin;\n};\n```\n\nThis change enables us to use the `friend` keyword to template.\n\n```cpp\ntemplate<typename T> class Enemy {\nprivate:\n    float hp;\n    float attack_damage;\n\n    friend T;\n};\n```\n\nWhen `T` is `int`, nothing will happen.\n\nWith this we can specify which class can access the private member of this class when we create a class instance.\n"}