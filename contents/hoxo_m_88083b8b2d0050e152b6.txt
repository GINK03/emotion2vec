{"tags": ["Scala", "slick"], "context": " More than 1 year has passed since last update.\u53c2\u8003\uff1a Scala \u3067Slick \u304b\u3089SQLite \u306b\u63a5\u7d9a\u3057\u3066\u307f\u305f\n\u4e0a\u8a18\u8a18\u4e8b\u306e Slick \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c 1.0.0\u3001\u73fe\u5728\u6700\u65b0\u7248\u304c 2.0.2 \u3067\u4ed5\u69d8\u304c\u304b\u306a\u308a\u5909\u308f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001Slick 2.0.2 \u3067 SQLite \u306b\u63a5\u7d9a\u3057\u3066\u57fa\u672c\u7684\u306a\u30af\u30a8\u30ea\u3092\u6d41\u3057\u3066\u307f\u307e\u3059\u3002\n\u3084\u3063\u3066\u308b\u3053\u3068\u306f Getting Start\uff08\u65e5\u672c\u8a9e\u8a33\uff09\u3068\u3001Queries\uff08\u65e5\u672c\u8a9e\u8a33\uff09\u3067\u3059\u3002\n\u65e5\u672c\u8a9e\u8a33\u306f Slick 2.0.0 \u3067\u3001\u3053\u3053\u3067\u4f7f\u3063\u3066\u3044\u308b 2.0.2 \u3088\u308a\u5c11\u3057\u53e4\u3044\u305f\u3081\u3001\u3068\u3053\u308d\u3069\u3053\u308d\u9055\u3046\u7b87\u6240\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u57fa\u672c\u7684\u306b\u6587\u7ae0\u306f\u65e5\u672c\u8a9e\u8a33\u3092\u898b\u3066\u3001\u30b3\u30fc\u30c9\u306f\u82f1\u8a9e\u306e\u65b9\u3092\u898b\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305a\u3001\u9069\u5f53\u306b SBT \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nbuild.sbt \u30d5\u30a1\u30a4\u30eb\u306b Slick \u3068 SQLite \u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002SLF4J \u306f Slick \u304c\u5185\u90e8\u3067\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u3082\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nbuild.sbt\nname := \"SlickTest\"\n\nversion := \"0.1\"\n\nscalaVersion := \"2.10.3\"\n\nlibraryDependencies ++= Seq(\n    \"com.typesafe.slick\" %% \"slick\" % \"2.0.2\",\n    \"org.slf4j\" % \"slf4j-nop\" % \"1.6.4\",\n    \"org.xerial\" % \"sqlite-jdbc\" % \"3.7.2\"\n)\n\n\n\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u3067 Slick \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nSlickTestMain.scala\nimport scala.slick.driver.SQLiteDriver.simple._\nimport java.io.File\n\nobject SlickTestMain {\n\n  // database \u30d5\u30a9\u30eb\u30c0\u306e test.sqlite3 \u30d5\u30a1\u30a4\u30eb\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u3057\u3066\u4f7f\u7528\n  val DatabasePath = \"./database/test.sqlite3\"\n  // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u3044\u5834\u5408\u306f\u521d\u671f\u5316\n  val Initialize = !new File(DatabasePath).exists()\n\n  def main(args: Array[String]) {\n    println(\"Start\")\n\n    // \u30b3\u30fc\u30d2\u30fc\u63d0\u4f9b\u8005\u306e\u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9\u3001\u30c6\u30fc\u30d6\u30eb\u540d\u306f SUPPLIERS\n    class Suppliers(tag: Tag) extends Table[(Int, String, String, String, String, String)](tag, \"SUPPLIERS\") {\n      // \u4f8b\u3048\u3070 SUP_ID \u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5074\u306e\u30ab\u30e9\u30e0\u540d\u3001Scala \u5074\u3067\u306f id \u3068\u3044\u3046\u540d\u524d\u3067\u53c2\u7167\u3059\u308b\n      def id = column[Int](\"SUP_ID\", O.PrimaryKey) // \u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\n      def name = column[String](\"SUP_NAME\")\n      def street = column[String](\"STREET\")\n      def city = column[String](\"CITY\")\n      def state = column[String](\"STATE\")\n      def zip = column[String](\"ZIP\")\n      // \u3053\u306e * \u306f\u30c6\u30fc\u30d6\u30eb\u3054\u3068\u306b\u5fc5\u9808\u3002\u901a\u5e38\u306f\u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u306e\u30bf\u30d7\u30eb\u3067\u826f\u3044\u304c\u3001\u3082\u3063\u3068\u8907\u96d1\u306b\u3082\u3067\u304d\u308b\n      def * = (id, name, street, city, state, zip)\n    }\n    // \u30c6\u30fc\u30d6\u30eb\u3054\u3068\u306b\u30af\u30a8\u30ea\u751f\u6210\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\n    val suppliers = TableQuery[Suppliers]\n\n    // \u30b3\u30fc\u30d2\u30fc\u306e\u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9\u3001\u30c6\u30fc\u30d6\u30eb\u540d\u306f COFFEES\n    class Coffees(tag: Tag) extends Table[(String, Int, Double, Int, Int)](tag, \"COFFEES\") {\n      def name = column[String](\"COF_NAME\", O.PrimaryKey) // \u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\n      def supID = column[Int](\"SUP_ID\")\n      def price = column[Double](\"PRICE\")\n      def sales = column[Int](\"SALES\")\n      def total = column[Int](\"TOTAL\")\n      def * = (name, supID, price, sales, total)\n      // \u5916\u90e8\u30ad\u30fc\u306e\u5b9a\u7fa9\n      def supplier = foreignKey(\"SUP_ID\", supID, suppliers)(_.id)\n    }\n    val coffees = TableQuery[Coffees]\n\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\u95a2\u6570\u3002\u30c6\u30fc\u30d6\u30eb\u3092 create \u3057\u3066\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\n    def initialize()(implicit session: Session) {\n      // DDL(data definition language)\u3092\u4f7f\u3046\u3068\u30c6\u30fc\u30d6\u30eb\u306e create \u3068 drop \u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\n      (suppliers.ddl ++ coffees.ddl).create\n\n      // \u4e00\u4ef6\u305a\u3064\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3059\u308b\u66f8\u304d\u65b9\n      suppliers += (101, \"Acme, Inc.\", \"99 Market Street\", \"Groundsville\",\"CA\",\"95199\")\n      suppliers += (49, \"Superior Coffee\", \"1 Party Place\", \"Mendocino\", \"CA\", \"95460\")\n      suppliers += (150, \"The High Ground\", \"100 Coffee Lane\", \"Meadows\", \"CA\",\"93966\")\n\n      // \u307e\u3068\u3081\u3066\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3059\u308b\u66f8\u304d\u65b9\n      coffees ++= Seq(\n        (\"Colombian\", 101, 7.99, 0, 0),\n        (\"French_Roast\", 49, 8.99, 0, 0),\n        (\"Espresso\", 150, 9.99, 0, 0),\n        (\"Colombian_Decaf\", 101, 8.99, 0, 0),\n        (\"French_Roast_Decaf\", 49, 9.99, 0, 0))\n    }\n\n    // \u3053\u3053\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u63a5\u7d9a\u3002withTransaction \u3092\u4f7f\u3046\u3068 auto commit \u3092 false \u306b\u3067\u304d\u308b\n    val db = Database.forURL(\"jdbc:sqlite:\" + DatabasePath, driver = \"org.sqlite.JDBC\")\n    db withSession { implicit session =>\n      // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u3044\u5834\u5408\u306f\u521d\u671f\u5316\n      if (Initialize) {\n        initialize()\n      }\n\n      // DB \u306e\u5185\u5bb9\u8868\u793a\u3002Collection \u3068\u540c\u3058\u3088\u3046\u306b\u6271\u3048\u308b\uff01\n      coffees foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"----\")\n\n      // \u3053\u306e\u66f8\u304d\u65b9\u3060\u3068 DB \u5185\u90e8\u3067\u578b\u5909\u63db\u304c\u884c\u308f\u308c\u308b\n      val query1 = for (c <- coffees)\n        yield LiteralColumn(\"  \") ++ c.name ++ \"\\t\" ++ c.supID.asColumnOf[String] ++\n        \"\\t\" ++ c.price.asColumnOf[String] ++ \"\\t\" ++ c.sales.asColumnOf[String] ++\n        \"\\t\" ++ c.total.asColumnOf[String]\n      query1 foreach println\n\n      println(\"----\")\n\n      // \u30d5\u30a3\u30eb\u30bf & \u30c6\u30fc\u30d6\u30eb\u7d50\u5408\n      val query2 = for {\n        c <- coffees if c.price < 9.0\n        s <- suppliers if s.id === c.supID\n      } yield (c.name, s.name)\n      query2 foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"----\")\n\n      // \u30c6\u30fc\u30d6\u30eb\u7d50\u5408\u306f\u5916\u90e8\u30ad\u30fc\u3092\u4f7f\u3063\u3066\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\n      val query3 = for {\n        c <- coffees if c.price < 9.0\n        s <- c.supplier\n      } yield (c.name, s.name)\n      query3 foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"---- filter ----\")\n\n      // \u30d5\u30a3\u30eb\u30bf\u3002\u30a4\u30b3\u30fc\u30eb\u306b\u306f === \u3092\u4f7f\u3046(is \u3082\u4f7f\u3048\u308b)\n      val query4 = coffees.filter(_.supID === 101)\n      query4 foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- drop & take ----\")\n\n      // LIMIT, OFFSET \u306f drop, take \u3067\u3067\u304d\u308b\u3002Collection \u307d\u3044\uff01\n      val query5 = coffees.drop(1).take(3)\n      query5 foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- sort ----\")\n\n      // \u30bd\u30fc\u30c8\n      val query6 = coffees.sortBy(_.name.desc.nullsFirst)\n      query6 foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- implicit cross join ----\")\n\n      val implicitCrossJoin = for {\n        c <- coffees\n        s <- suppliers\n      } yield (c.name, s.name)\n      implicitCrossJoin foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"---- implicit inner join ----\")\n\n      val implicitInnerJoin = for {\n        c <- coffees\n        s <- suppliers if c.supID === s.id\n      } yield (c.name, s.name)\n      implicitInnerJoin foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"---- explicit cross join ----\")\n\n      val explicitCrossJoin = for {\n        (c, s) <- coffees innerJoin suppliers\n      } yield (c.name, s.name)\n      explicitCrossJoin foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"---- explicit inner join ----\")\n\n      val explicitInnerJoin = for {\n        (c, s) <- coffees innerJoin suppliers on (_.supID === _.id)\n      } yield (c.name, s.name)\n      explicitInnerJoin foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"---- explicit left outer join ----\")\n\n      // s.name \u306e \u3042\u3068\u306b ? \u304c\u52a0\u308f\u3063\u3066\u3044\u308b\u306e\u306b\u6ce8\u610f\u3002Option \u306b\u3059\u308b\u305f\u3081\u3002\n      val explicitLeftOuterJoin = for {\n        (c, s) <- coffees leftJoin suppliers on (_.supID === _.id)\n      } yield (c.name, s.name.?)\n      explicitLeftOuterJoin foreach {\n        case (coffeeName, Some(supplierName)) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n        case (coffeeName, None) =>\n          println(\"  \" + coffeeName + \"\\t\" + \"<No Supplier>\")\n      }\n\n      // SQLite \u306f right outer join \u3068 full outer join \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u306a\u3044\n      // [SQLITE_ERROR] SQL error or missing database (RIGHT and FULL OUTER JOINs are not currently supported)\n\n      // SQLite \u306f row number \u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001zip \u7cfb\u306e\u30af\u30a8\u30ea\u306f\u4f7f\u3048\u306a\u3044\n      // SQLite does not support row numbers         \n\n      println(\"---- union ----\")\n\n      val query7 = coffees.filter(_.price < 8.0)\n      val query8 = coffees.filter(_.price > 9.0)\n\n      // \u548c\u96c6\u5408\n      val unionQuery = query7 union query8\n      unionQuery foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- union all ----\")\n\n      // ++ \u306f\u91cd\u8907\u3092\u9664\u53bb\u3057\u306a\u3044\u548c\u96c6\u5408\n      val unionAllQuery = query7 ++ query8\n      unionAllQuery foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- aggregation ----\")\n\n      val query9 = coffees.map(_.price)\n\n      val min = query9.min\n      val max = query9.max\n      val sum = query9.sum\n      val avg = query9.avg\n\n      println(\"  \" + \"min = \" + min.run.get)\n      println(\"  \" + \"max = \" + max.run.get)\n      println(\"  \" + \"sum = \" + sum.run.get)\n      println(\"  \" + \"avg = \" + avg.run.get)\n\n      val length = query9.length\n      val exists = query9.exists\n\n      println(\"  \" + \"length = \" + length.run)\n      println(\"  \" + \"exists = \" + exists.run)\n\n      println(\"---- group by ----\")\n\n      // \u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\n      val query10 = (for {\n        c <- coffees\n        s <- c.supplier\n      } yield (c, s)).groupBy(_._1.supID)\n\n      val query11 = query10.map {\n        case (supID, css) => // css \u306f c \u3068 s \u306e\u30bf\u30d7\u30eb\n          (supID, css.length, css.map(_._1.price).avg)\n      }\n      query11 foreach {\n        case (supID, length, avg) =>\n          println(\"  \" + supID + \"\\t\" + length + \"\\t\" + avg)\n      }\n\n      println(\"---- insert ----\")\n\n      coffees += (\"Hogehoge\", 101, 7.99, 0, 0)\n      coffees ++= Seq(\n        (\"Fugafuga\", 49, 8.99, 0, 0),\n        (\"Piyopiyo\", 150, 9.99, 0, 0))\n      coffees foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- delete ----\")\n\n      val query12 = coffees.filter(_.name inSetBind Seq(\"Hogehoge\", \"Fugafuga\",\"Piyopiyo\"))\n      query12.delete\n      coffees foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- update ----\")\n\n      // update \u306f\u5358\u4e00\u306e\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30ab\u30e9\u30e0\u3092\u9078\u3076\uff08\u8907\u6570\u53ef\uff09\n      val query13 = for {\n        c <- coffees if c.name === \"Espresso\"\n      } yield c.price\n      query13.update(10.49)\n      coffees foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n      query13.update(9.99)\n\n    }\n\n    println(\"End\")\n\n  }\n}\n\n\n\n\u51fa\u529b\nStart\n  Colombian 101 7.99    0   0\n  French_Roast  49  8.99    0   0\n  Espresso  150 9.99    0   0\n  Colombian_Decaf   101 8.99    0   0\n  French_Roast_Decaf    49  9.99    0   0\n----\n  Colombian 101 7.99    0   0\n  French_Roast  49  8.99    0   0\n  Espresso  150 9.99    0   0\n  Colombian_Decaf   101 8.99    0   0\n  French_Roast_Decaf    49  9.99    0   0\n----\n  Colombian Acme, Inc.\n  French_Roast  Superior Coffee\n  Colombian_Decaf   Acme, Inc.\n----\n  Colombian Acme, Inc.\n  French_Roast  Superior Coffee\n  Colombian_Decaf   Acme, Inc.\n---- filter ----\n  Colombian 101 7.99    0   0\n  Colombian_Decaf   101 8.99    0   0\n---- drop & take ----\n  French_Roast  49  8.99    0   0\n  Espresso  150 9.99    0   0\n  Colombian_Decaf   101 8.99    0   0\n---- sort ----\n  French_Roast_Decaf    49  9.99    0   0\n  French_Roast  49  8.99    0   0\n  Espresso  150 9.99    0   0\n  Colombian_Decaf   101 8.99    0   0\n  Colombian 101 7.99    0   0\n---- implicit cross join ----\n  Colombian hoge\n  Colombian Superior Coffee\n  Colombian Acme, Inc.\n  Colombian The High Ground\n  French_Roast  hoge\n  French_Roast  Superior Coffee\n  French_Roast  Acme, Inc.\n  French_Roast  The High Ground\n  Espresso  hoge\n  Espresso  Superior Coffee\n  Espresso  Acme, Inc.\n  Espresso  The High Ground\n  Colombian_Decaf   hoge\n  Colombian_Decaf   Superior Coffee\n  Colombian_Decaf   Acme, Inc.\n  Colombian_Decaf   The High Ground\n  French_Roast_Decaf    hoge\n  French_Roast_Decaf    Superior Coffee\n  French_Roast_Decaf    Acme, Inc.\n  French_Roast_Decaf    The High Ground\n---- implicit inner join ----\n  Colombian Acme, Inc.\n  French_Roast  Superior Coffee\n  Espresso  The High Ground\n  Colombian_Decaf   Acme, Inc.\n  French_Roast_Decaf    Superior Coffee\n---- explicit cross join ----\n  Colombian hoge\n  Colombian Superior Coffee\n  Colombian Acme, Inc.\n  Colombian The High Ground\n  French_Roast  hoge\n  French_Roast  Superior Coffee\n  French_Roast  Acme, Inc.\n  French_Roast  The High Ground\n  Espresso  hoge\n  Espresso  Superior Coffee\n  Espresso  Acme, Inc.\n  Espresso  The High Ground\n  Colombian_Decaf   hoge\n  Colombian_Decaf   Superior Coffee\n  Colombian_Decaf   Acme, Inc.\n  Colombian_Decaf   The High Ground\n  French_Roast_Decaf    hoge\n  French_Roast_Decaf    Superior Coffee\n  French_Roast_Decaf    Acme, Inc.\n  French_Roast_Decaf    The High Ground\n---- implicit inner join ----\n  Colombian Acme, Inc.\n  French_Roast  Superior Coffee\n  Espresso  The High Ground\n  Colombian_Decaf   Acme, Inc.\n  French_Roast_Decaf    Superior Coffee\n---- explicit left outer join ----\n  Colombian Acme, Inc.\n  French_Roast  Superior Coffee\n  Espresso  The High Ground\n  Colombian_Decaf   Acme, Inc.\n  French_Roast_Decaf    Superior Coffee\n---- union ----\n  Colombian 101 7.99    0   0\n  Espresso  150 9.99    0   0\n  French_Roast_Decaf    49  9.99    0   0\n---- union all ----\n  Colombian 101 7.99    0   0\n  Espresso  150 9.99    0   0\n  French_Roast_Decaf    49  9.99    0   0\n---- aggregation ----\n  min = 7.99\n  max = 9.99\n  sum = 45.95\n  avg = 9.190000000000001\n  length = 5\n  exists = true\n---- group by ----\n  49    2   Some(9.49)\n  101   2   Some(8.49)\n  150   1   Some(9.99)\n---- insert ----\n  Colombian 101 7.99    0   0\n  French_Roast  49  8.99    0   0\n  Espresso  150 9.99    0   0\n  Colombian_Decaf   101 8.99    0   0\n  French_Roast_Decaf    49  9.99    0   0\n  Hogehoge  101 7.99    0   0\n  Fugafuga  49  8.99    0   0\n  Piyopiyo  150 9.99    0   0\n---- delete ----\n  Colombian 101 7.99    0   0\n  French_Roast  49  8.99    0   0\n  Espresso  150 9.99    0   0\n  Colombian_Decaf   101 8.99    0   0\n  French_Roast_Decaf    49  9.99    0   0\n---- update ----\n  Colombian 101 7.99    0   0\n  French_Roast  49  8.99    0   0\n  Espresso  150 10.49   0   0\n  Colombian_Decaf   101 8.99    0   0\n  French_Roast_Decaf    49  9.99    0   0\nEnd\n\n\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\nSlick 2.0.2 \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u82f1\u8a9e)\n\u4e0a\u8a18\u306e\u65e5\u672c\u8a9e\u8a33(2.0.0\u306a\u306e\u3067\u3061\u3087\u3063\u3068\u53e4\u3044)\nPlay2 + Slick\u30cf\u30f3\u30ba\u30aa\u30f3(\u65e5\u672c\u8a9e)\nSlick\u30c1\u30fc\u30c8\u30b7\u30fc\u30c8(\u65e5\u672c\u8a9e)\n\n\u53c2\u8003\uff1a [Scala \u3067Slick \u304b\u3089SQLite \u306b\u63a5\u7d9a\u3057\u3066\u307f\u305f](http://blog.kenkov.jp/2013/04/02/slick.html)\n\n\u4e0a\u8a18\u8a18\u4e8b\u306e Slick \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c 1.0.0\u3001\u73fe\u5728\u6700\u65b0\u7248\u304c 2.0.2 \u3067\u4ed5\u69d8\u304c\u304b\u306a\u308a\u5909\u308f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001Slick 2.0.2 \u3067 SQLite \u306b\u63a5\u7d9a\u3057\u3066\u57fa\u672c\u7684\u306a\u30af\u30a8\u30ea\u3092\u6d41\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3084\u3063\u3066\u308b\u3053\u3068\u306f [Getting Start](http://slick.typesafe.com/doc/2.0.2/gettingstarted.html)\uff08[\u65e5\u672c\u8a9e\u8a33](http://krrrr38.github.io/slick-doc-ja/v2.0.out/%E5%A7%8B%E3%82%81%E3%82%88%E3%81%86.html)\uff09\u3068\u3001[Queries](http://slick.typesafe.com/doc/2.0.2/queries.html)\uff08[\u65e5\u672c\u8a9e\u8a33](http://krrrr38.github.io/slick-doc-ja/v2.0.out/Queries.html)\uff09\u3067\u3059\u3002\n\n\u65e5\u672c\u8a9e\u8a33\u306f Slick 2.0.0 \u3067\u3001\u3053\u3053\u3067\u4f7f\u3063\u3066\u3044\u308b 2.0.2 \u3088\u308a\u5c11\u3057\u53e4\u3044\u305f\u3081\u3001\u3068\u3053\u308d\u3069\u3053\u308d\u9055\u3046\u7b87\u6240\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u57fa\u672c\u7684\u306b\u6587\u7ae0\u306f\u65e5\u672c\u8a9e\u8a33\u3092\u898b\u3066\u3001\u30b3\u30fc\u30c9\u306f\u82f1\u8a9e\u306e\u65b9\u3092\u898b\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u3001\u9069\u5f53\u306b SBT \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n`build.sbt` \u30d5\u30a1\u30a4\u30eb\u306b Slick \u3068 SQLite \u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002SLF4J \u306f Slick \u304c\u5185\u90e8\u3067\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u3082\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```:build.sbt\nname := \"SlickTest\"\n\nversion := \"0.1\"\n\nscalaVersion := \"2.10.3\"\n\nlibraryDependencies ++= Seq(\n\t\"com.typesafe.slick\" %% \"slick\" % \"2.0.2\",\n\t\"org.slf4j\" % \"slf4j-nop\" % \"1.6.4\",\n\t\"org.xerial\" % \"sqlite-jdbc\" % \"3.7.2\"\n)\n```\n\n\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u3067 Slick \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```scala:SlickTestMain.scala\nimport scala.slick.driver.SQLiteDriver.simple._\nimport java.io.File\n\nobject SlickTestMain {\n\n  // database \u30d5\u30a9\u30eb\u30c0\u306e test.sqlite3 \u30d5\u30a1\u30a4\u30eb\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u3057\u3066\u4f7f\u7528\n  val DatabasePath = \"./database/test.sqlite3\"\n  // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u3044\u5834\u5408\u306f\u521d\u671f\u5316\n  val Initialize = !new File(DatabasePath).exists()\n\n  def main(args: Array[String]) {\n    println(\"Start\")\n\n    // \u30b3\u30fc\u30d2\u30fc\u63d0\u4f9b\u8005\u306e\u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9\u3001\u30c6\u30fc\u30d6\u30eb\u540d\u306f SUPPLIERS\n    class Suppliers(tag: Tag) extends Table[(Int, String, String, String, String, String)](tag, \"SUPPLIERS\") {\n      // \u4f8b\u3048\u3070 SUP_ID \u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u5074\u306e\u30ab\u30e9\u30e0\u540d\u3001Scala \u5074\u3067\u306f id \u3068\u3044\u3046\u540d\u524d\u3067\u53c2\u7167\u3059\u308b\n      def id = column[Int](\"SUP_ID\", O.PrimaryKey) // \u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\n      def name = column[String](\"SUP_NAME\")\n      def street = column[String](\"STREET\")\n      def city = column[String](\"CITY\")\n      def state = column[String](\"STATE\")\n      def zip = column[String](\"ZIP\")\n      // \u3053\u306e * \u306f\u30c6\u30fc\u30d6\u30eb\u3054\u3068\u306b\u5fc5\u9808\u3002\u901a\u5e38\u306f\u3059\u3079\u3066\u306e\u30ab\u30e9\u30e0\u306e\u30bf\u30d7\u30eb\u3067\u826f\u3044\u304c\u3001\u3082\u3063\u3068\u8907\u96d1\u306b\u3082\u3067\u304d\u308b\n      def * = (id, name, street, city, state, zip)\n    }\n    // \u30c6\u30fc\u30d6\u30eb\u3054\u3068\u306b\u30af\u30a8\u30ea\u751f\u6210\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u884c\u3046\n    val suppliers = TableQuery[Suppliers]\n\n    // \u30b3\u30fc\u30d2\u30fc\u306e\u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9\u3001\u30c6\u30fc\u30d6\u30eb\u540d\u306f COFFEES\n    class Coffees(tag: Tag) extends Table[(String, Int, Double, Int, Int)](tag, \"COFFEES\") {\n      def name = column[String](\"COF_NAME\", O.PrimaryKey) // \u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\n      def supID = column[Int](\"SUP_ID\")\n      def price = column[Double](\"PRICE\")\n      def sales = column[Int](\"SALES\")\n      def total = column[Int](\"TOTAL\")\n      def * = (name, supID, price, sales, total)\n      // \u5916\u90e8\u30ad\u30fc\u306e\u5b9a\u7fa9\n      def supplier = foreignKey(\"SUP_ID\", supID, suppliers)(_.id)\n    }\n    val coffees = TableQuery[Coffees]\n\n    // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u521d\u671f\u5316\u3059\u308b\u95a2\u6570\u3002\u30c6\u30fc\u30d6\u30eb\u3092 create \u3057\u3066\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\n    def initialize()(implicit session: Session) {\n      // DDL(data definition language)\u3092\u4f7f\u3046\u3068\u30c6\u30fc\u30d6\u30eb\u306e create \u3068 drop \u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\n      (suppliers.ddl ++ coffees.ddl).create\n\n      // \u4e00\u4ef6\u305a\u3064\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3059\u308b\u66f8\u304d\u65b9\n      suppliers += (101, \"Acme, Inc.\", \"99 Market Street\", \"Groundsville\",\"CA\",\"95199\")\n      suppliers += (49, \"Superior Coffee\", \"1 Party Place\", \"Mendocino\", \"CA\", \"95460\")\n      suppliers += (150, \"The High Ground\", \"100 Coffee Lane\", \"Meadows\", \"CA\",\"93966\")\n\n      // \u307e\u3068\u3081\u3066\u30c7\u30fc\u30bf\u3092\u8ffd\u52a0\u3059\u308b\u66f8\u304d\u65b9\n      coffees ++= Seq(\n        (\"Colombian\", 101, 7.99, 0, 0),\n        (\"French_Roast\", 49, 8.99, 0, 0),\n        (\"Espresso\", 150, 9.99, 0, 0),\n        (\"Colombian_Decaf\", 101, 8.99, 0, 0),\n        (\"French_Roast_Decaf\", 49, 9.99, 0, 0))\n    }\n\n    // \u3053\u3053\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u63a5\u7d9a\u3002withTransaction \u3092\u4f7f\u3046\u3068 auto commit \u3092 false \u306b\u3067\u304d\u308b\n    val db = Database.forURL(\"jdbc:sqlite:\" + DatabasePath, driver = \"org.sqlite.JDBC\")\n    db withSession { implicit session =>\n      // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304c\u7121\u3044\u5834\u5408\u306f\u521d\u671f\u5316\n      if (Initialize) {\n        initialize()\n      }\n\n      // DB \u306e\u5185\u5bb9\u8868\u793a\u3002Collection \u3068\u540c\u3058\u3088\u3046\u306b\u6271\u3048\u308b\uff01\n      coffees foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"----\")\n\n      // \u3053\u306e\u66f8\u304d\u65b9\u3060\u3068 DB \u5185\u90e8\u3067\u578b\u5909\u63db\u304c\u884c\u308f\u308c\u308b\n      val query1 = for (c <- coffees)\n        yield LiteralColumn(\"  \") ++ c.name ++ \"\\t\" ++ c.supID.asColumnOf[String] ++\n        \"\\t\" ++ c.price.asColumnOf[String] ++ \"\\t\" ++ c.sales.asColumnOf[String] ++\n        \"\\t\" ++ c.total.asColumnOf[String]\n      query1 foreach println\n\n      println(\"----\")\n\n      // \u30d5\u30a3\u30eb\u30bf & \u30c6\u30fc\u30d6\u30eb\u7d50\u5408\n      val query2 = for {\n        c <- coffees if c.price < 9.0\n        s <- suppliers if s.id === c.supID\n      } yield (c.name, s.name)\n      query2 foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"----\")\n\n      // \u30c6\u30fc\u30d6\u30eb\u7d50\u5408\u306f\u5916\u90e8\u30ad\u30fc\u3092\u4f7f\u3063\u3066\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\n      val query3 = for {\n        c <- coffees if c.price < 9.0\n        s <- c.supplier\n      } yield (c.name, s.name)\n      query3 foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"---- filter ----\")\n\n      // \u30d5\u30a3\u30eb\u30bf\u3002\u30a4\u30b3\u30fc\u30eb\u306b\u306f === \u3092\u4f7f\u3046(is \u3082\u4f7f\u3048\u308b)\n      val query4 = coffees.filter(_.supID === 101)\n      query4 foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- drop & take ----\")\n\n      // LIMIT, OFFSET \u306f drop, take \u3067\u3067\u304d\u308b\u3002Collection \u307d\u3044\uff01\n      val query5 = coffees.drop(1).take(3)\n      query5 foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- sort ----\")\n\n      // \u30bd\u30fc\u30c8\n      val query6 = coffees.sortBy(_.name.desc.nullsFirst)\n      query6 foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- implicit cross join ----\")\n\n      val implicitCrossJoin = for {\n        c <- coffees\n        s <- suppliers\n      } yield (c.name, s.name)\n      implicitCrossJoin foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"---- implicit inner join ----\")\n\n      val implicitInnerJoin = for {\n        c <- coffees\n        s <- suppliers if c.supID === s.id\n      } yield (c.name, s.name)\n      implicitInnerJoin foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"---- explicit cross join ----\")\n\n      val explicitCrossJoin = for {\n        (c, s) <- coffees innerJoin suppliers\n      } yield (c.name, s.name)\n      explicitCrossJoin foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"---- explicit inner join ----\")\n\n      val explicitInnerJoin = for {\n        (c, s) <- coffees innerJoin suppliers on (_.supID === _.id)\n      } yield (c.name, s.name)\n      explicitInnerJoin foreach {\n        case (coffeeName, supplierName) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n      }\n\n      println(\"---- explicit left outer join ----\")\n\n      // s.name \u306e \u3042\u3068\u306b ? \u304c\u52a0\u308f\u3063\u3066\u3044\u308b\u306e\u306b\u6ce8\u610f\u3002Option \u306b\u3059\u308b\u305f\u3081\u3002\n      val explicitLeftOuterJoin = for {\n        (c, s) <- coffees leftJoin suppliers on (_.supID === _.id)\n      } yield (c.name, s.name.?)\n      explicitLeftOuterJoin foreach {\n        case (coffeeName, Some(supplierName)) =>\n          println(\"  \" + coffeeName + \"\\t\" + supplierName)\n        case (coffeeName, None) =>\n          println(\"  \" + coffeeName + \"\\t\" + \"<No Supplier>\")\n      }\n\n      // SQLite \u306f right outer join \u3068 full outer join \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u306a\u3044\n      // [SQLITE_ERROR] SQL error or missing database (RIGHT and FULL OUTER JOINs are not currently supported)\n\n      // SQLite \u306f row number \u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001zip \u7cfb\u306e\u30af\u30a8\u30ea\u306f\u4f7f\u3048\u306a\u3044\n      // SQLite does not support row numbers         \n\n      println(\"---- union ----\")\n\n      val query7 = coffees.filter(_.price < 8.0)\n      val query8 = coffees.filter(_.price > 9.0)\n\n      // \u548c\u96c6\u5408\n      val unionQuery = query7 union query8\n      unionQuery foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- union all ----\")\n\n      // ++ \u306f\u91cd\u8907\u3092\u9664\u53bb\u3057\u306a\u3044\u548c\u96c6\u5408\n      val unionAllQuery = query7 ++ query8\n      unionAllQuery foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- aggregation ----\")\n\n      val query9 = coffees.map(_.price)\n\n      val min = query9.min\n      val max = query9.max\n      val sum = query9.sum\n      val avg = query9.avg\n\n      println(\"  \" + \"min = \" + min.run.get)\n      println(\"  \" + \"max = \" + max.run.get)\n      println(\"  \" + \"sum = \" + sum.run.get)\n      println(\"  \" + \"avg = \" + avg.run.get)\n\n      val length = query9.length\n      val exists = query9.exists\n\n      println(\"  \" + \"length = \" + length.run)\n      println(\"  \" + \"exists = \" + exists.run)\n\n      println(\"---- group by ----\")\n\n      // \u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\n      val query10 = (for {\n        c <- coffees\n        s <- c.supplier\n      } yield (c, s)).groupBy(_._1.supID)\n\n      val query11 = query10.map {\n        case (supID, css) => // css \u306f c \u3068 s \u306e\u30bf\u30d7\u30eb\n          (supID, css.length, css.map(_._1.price).avg)\n      }\n      query11 foreach {\n        case (supID, length, avg) =>\n          println(\"  \" + supID + \"\\t\" + length + \"\\t\" + avg)\n      }\n\n      println(\"---- insert ----\")\n\n      coffees += (\"Hogehoge\", 101, 7.99, 0, 0)\n      coffees ++= Seq(\n        (\"Fugafuga\", 49, 8.99, 0, 0),\n        (\"Piyopiyo\", 150, 9.99, 0, 0))\n      coffees foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- delete ----\")\n\n      val query12 = coffees.filter(_.name inSetBind Seq(\"Hogehoge\", \"Fugafuga\",\"Piyopiyo\"))\n      query12.delete\n      coffees foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n\n      println(\"---- update ----\")\n\n      // update \u306f\u5358\u4e00\u306e\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30ab\u30e9\u30e0\u3092\u9078\u3076\uff08\u8907\u6570\u53ef\uff09\n      val query13 = for {\n        c <- coffees if c.name === \"Espresso\"\n      } yield c.price\n      query13.update(10.49)\n      coffees foreach {\n        case (name, supID, price, sales, total) =>\n          println(\"  \" + name + \"\\t\" + supID + \"\\t\" + price + \"\\t\" + sales + \"\\t\" +total)\n      }\n      query13.update(9.99)\n\n    }\n\n    println(\"End\")\n\n  }\n}\n```\n\n```:\u51fa\u529b\nStart\n  Colombian\t101\t7.99\t0\t0\n  French_Roast\t49\t8.99\t0\t0\n  Espresso\t150\t9.99\t0\t0\n  Colombian_Decaf\t101\t8.99\t0\t0\n  French_Roast_Decaf\t49\t9.99\t0\t0\n----\n  Colombian\t101\t7.99\t0\t0\n  French_Roast\t49\t8.99\t0\t0\n  Espresso\t150\t9.99\t0\t0\n  Colombian_Decaf\t101\t8.99\t0\t0\n  French_Roast_Decaf\t49\t9.99\t0\t0\n----\n  Colombian\tAcme, Inc.\n  French_Roast\tSuperior Coffee\n  Colombian_Decaf\tAcme, Inc.\n----\n  Colombian\tAcme, Inc.\n  French_Roast\tSuperior Coffee\n  Colombian_Decaf\tAcme, Inc.\n---- filter ----\n  Colombian\t101\t7.99\t0\t0\n  Colombian_Decaf\t101\t8.99\t0\t0\n---- drop & take ----\n  French_Roast\t49\t8.99\t0\t0\n  Espresso\t150\t9.99\t0\t0\n  Colombian_Decaf\t101\t8.99\t0\t0\n---- sort ----\n  French_Roast_Decaf\t49\t9.99\t0\t0\n  French_Roast\t49\t8.99\t0\t0\n  Espresso\t150\t9.99\t0\t0\n  Colombian_Decaf\t101\t8.99\t0\t0\n  Colombian\t101\t7.99\t0\t0\n---- implicit cross join ----\n  Colombian\thoge\n  Colombian\tSuperior Coffee\n  Colombian\tAcme, Inc.\n  Colombian\tThe High Ground\n  French_Roast\thoge\n  French_Roast\tSuperior Coffee\n  French_Roast\tAcme, Inc.\n  French_Roast\tThe High Ground\n  Espresso\thoge\n  Espresso\tSuperior Coffee\n  Espresso\tAcme, Inc.\n  Espresso\tThe High Ground\n  Colombian_Decaf\thoge\n  Colombian_Decaf\tSuperior Coffee\n  Colombian_Decaf\tAcme, Inc.\n  Colombian_Decaf\tThe High Ground\n  French_Roast_Decaf\thoge\n  French_Roast_Decaf\tSuperior Coffee\n  French_Roast_Decaf\tAcme, Inc.\n  French_Roast_Decaf\tThe High Ground\n---- implicit inner join ----\n  Colombian\tAcme, Inc.\n  French_Roast\tSuperior Coffee\n  Espresso\tThe High Ground\n  Colombian_Decaf\tAcme, Inc.\n  French_Roast_Decaf\tSuperior Coffee\n---- explicit cross join ----\n  Colombian\thoge\n  Colombian\tSuperior Coffee\n  Colombian\tAcme, Inc.\n  Colombian\tThe High Ground\n  French_Roast\thoge\n  French_Roast\tSuperior Coffee\n  French_Roast\tAcme, Inc.\n  French_Roast\tThe High Ground\n  Espresso\thoge\n  Espresso\tSuperior Coffee\n  Espresso\tAcme, Inc.\n  Espresso\tThe High Ground\n  Colombian_Decaf\thoge\n  Colombian_Decaf\tSuperior Coffee\n  Colombian_Decaf\tAcme, Inc.\n  Colombian_Decaf\tThe High Ground\n  French_Roast_Decaf\thoge\n  French_Roast_Decaf\tSuperior Coffee\n  French_Roast_Decaf\tAcme, Inc.\n  French_Roast_Decaf\tThe High Ground\n---- implicit inner join ----\n  Colombian\tAcme, Inc.\n  French_Roast\tSuperior Coffee\n  Espresso\tThe High Ground\n  Colombian_Decaf\tAcme, Inc.\n  French_Roast_Decaf\tSuperior Coffee\n---- explicit left outer join ----\n  Colombian\tAcme, Inc.\n  French_Roast\tSuperior Coffee\n  Espresso\tThe High Ground\n  Colombian_Decaf\tAcme, Inc.\n  French_Roast_Decaf\tSuperior Coffee\n---- union ----\n  Colombian\t101\t7.99\t0\t0\n  Espresso\t150\t9.99\t0\t0\n  French_Roast_Decaf\t49\t9.99\t0\t0\n---- union all ----\n  Colombian\t101\t7.99\t0\t0\n  Espresso\t150\t9.99\t0\t0\n  French_Roast_Decaf\t49\t9.99\t0\t0\n---- aggregation ----\n  min = 7.99\n  max = 9.99\n  sum = 45.95\n  avg = 9.190000000000001\n  length = 5\n  exists = true\n---- group by ----\n  49\t2\tSome(9.49)\n  101\t2\tSome(8.49)\n  150\t1\tSome(9.99)\n---- insert ----\n  Colombian\t101\t7.99\t0\t0\n  French_Roast\t49\t8.99\t0\t0\n  Espresso\t150\t9.99\t0\t0\n  Colombian_Decaf\t101\t8.99\t0\t0\n  French_Roast_Decaf\t49\t9.99\t0\t0\n  Hogehoge\t101\t7.99\t0\t0\n  Fugafuga\t49\t8.99\t0\t0\n  Piyopiyo\t150\t9.99\t0\t0\n---- delete ----\n  Colombian\t101\t7.99\t0\t0\n  French_Roast\t49\t8.99\t0\t0\n  Espresso\t150\t9.99\t0\t0\n  Colombian_Decaf\t101\t8.99\t0\t0\n  French_Roast_Decaf\t49\t9.99\t0\t0\n---- update ----\n  Colombian\t101\t7.99\t0\t0\n  French_Roast\t49\t8.99\t0\t0\n  Espresso\t150\t10.49\t0\t0\n  Colombian_Decaf\t101\t8.99\t0\t0\n  French_Roast_Decaf\t49\t9.99\t0\t0\nEnd\n```\n\n### \u53c2\u8003\u30b5\u30a4\u30c8\n\n- [Slick 2.0.2 \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u82f1\u8a9e)](http://slick.typesafe.com/doc/2.0.2/)\n- [\u4e0a\u8a18\u306e\u65e5\u672c\u8a9e\u8a33(2.0.0\u306a\u306e\u3067\u3061\u3087\u3063\u3068\u53e4\u3044)](http://krrrr38.github.io/slick-doc-ja/v2.0.out/slick-doc-ja+2.0.html)\n- [Play2 + Slick\u30cf\u30f3\u30ba\u30aa\u30f3(\u65e5\u672c\u8a9e)](https://github.com/bizreach/play2-hands-on)\n- [Slick\u30c1\u30fc\u30c8\u30b7\u30fc\u30c8(\u65e5\u672c\u8a9e)](https://github.com/bizreach/slick-reference)\n"}