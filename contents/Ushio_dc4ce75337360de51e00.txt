{"context": "\n\n\u76ee\u7684\n\u4e71\u6570\u3092\u6563\u3089\u3059\u3068\u304d\u3001\u8907\u6570\u306e\u4e09\u89d2\u5f62\u306b\u307e\u305f\u304c\u308a\u5747\u4e00\u306b\u5206\u5e03\u3055\u305b\u305f\u3044\u6642\u304c\u3042\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u30e1\u30c3\u30b7\u30e5\u306e\u5f62\u72b6\u306b\u5408\u308f\u305b\u3066\u767a\u751f\u3055\u305b\u305f\u308a\u3001\n\u30ec\u30a4\u30c8\u30ec\u30fc\u30b7\u30f3\u30b0\u306b\u304a\u3051\u308b\u5149\u6e90\u306e\u76f4\u63a5\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3068\u3044\u3063\u305f\u3082\u306e\u304c\u3001\u4eca\u56de\u60f3\u5b9a\u3059\u308b\u7528\u9014\u3067\u3059\u3002\n\n\u4e71\u6570\n\u4f55\u306f\u3068\u3082\u3042\u308c\u3001\u30bd\u30fc\u30b9\u306b\u306a\u308b\u9023\u7d9a\u3057\u305f\u4e71\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u305f\u3060\u3001\u5f53\u7136\u306a\u304c\u3089\u3001\u4e00\u822c\u306b\u5b9f\u6570\u306e\u8868\u73fe\u3082\u30d3\u30c3\u30c8\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u4ee5\u4e0a\u3001\u96e2\u6563\u7684\u306a\u6570\u5024\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3002\n\u3042\u307e\u308a\u8e0f\u307f\u8fbc\u3080\u3068\u8131\u7dda\u3057\u3059\u304e\u308b\u306e\u3067\u3001\u3053\u3053\u306b\u3064\u3044\u3066\u306f\u3001\u30b3\u30fc\u30c9\u3092\u5f35\u308b\u3060\u3051\u306b\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4e71\u6570\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30a8\u30f3\u30b8\u30f3\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u633f\u3052\u66ff\u3048\u308b\u3053\u3068\u3060\u3051\u306f\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u3042\u3001\u72b6\u6cc1\u306b\u3088\u3063\u3066\u306f\u5fc5\u8981\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3002\n\n    struct Xor {\n        Xor() {\n\n        }\n        Xor(uint32_t seed) {\n            _y = std::max(seed, 1u);\n        }\n        uint32_t generate() {\n            _y = _y ^ (_y << 13); _y = _y ^ (_y >> 17);\n            return _y = _y ^ (_y << 5);\n        }\n    private:\n        uint32_t _y = 2463534242;\n    };\n    template <class Generator>\n    struct RandomEngine : public Generator {\n    public:\n        RandomEngine() :Generator() {\n        }\n        RandomEngine(uint32_t seed) :Generator(seed) {\n        }\n\n        void discard(int n) {\n            for (int i = 0; i < n; ++i) {\n                this->generate();\n            }\n        }\n\n        double continuous() {\n            uint32_t uniform = this->generate();\n            constexpr double c = 1.0 / static_cast<double>(0xffffffffLL + 1);\n            return static_cast<double>(uniform) * c;\n        }\n        // 0 <= x < 1\n        double continuous(double a, double b) {\n            return a + continuous() * (b - a);\n        }\n        // a <= x < b\n        double continuous(double a, double b) {\n            return a + continuous() * (b - a);\n        }\n        // \u305d\u306e\u4ed6\u306e\u30e1\u30bd\u30c3\u30c9\u7701\u7565\n    };\n\n\u305f\u3068\u3048\u3070\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u306d\n    lc::RandomEngine<lc::Xor> e;\n    e.discard(100);\n    float value = e.continuous();\n\n\u3061\u306a\u307f\u306bdiscard\u3068\u3044\u3046\u306e\u306f\u3001\u521d\u671f\u5316\u76f4\u5f8c\u306e\u4e71\u6570\u5024\u3068\u30b7\u30fc\u30c9\u306e\u5024\u3068\u306e\u95a2\u9023\u6027\u3092\u3042\u308b\u7a0b\u5ea6\u65ad\u3061\u5207\u308b\u305f\u3081\u306b\u3042\u308b\u3001\u30b9\u30ad\u30c3\u30d7\u7528\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3059\u3002\n\u4e00\u5fdc\u4e71\u6570\u306b\u3088\u3063\u3066\u8aad\u307f\u98db\u3070\u3059\u3079\u304d\u91cf\u306f\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u304c\u3001\u9762\u5012\u306a\u306e\u3067\u4eca\u56de\u306f\u6a2a\u7740\u3057\u3066\u9069\u5f53\u306a\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u3082\u3061\u308d\u3093C++\u6a19\u6e96\u306erandom\u3092\u7528\u3044\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\u305d\u306e\u5834\u5408\u3001\u3053\u3061\u3089\u304c\u53c2\u8003\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\nC++0x\u306e\u65b0\u3057\u3044\u4e71\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u3001random\nhttps://cpplover.blogspot.jp/2009/11/c0xrandom.html\n\u4eca\u56de\u306f\u81ea\u524d\u3067\u7d44\u307f\u7acb\u3066\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4e09\u89d2\u5f62\u306e\u30c7\u30fc\u30bf\u578b\n\u4e00\u5fdc\u5f8c\u3005\u306e\u30b3\u30fc\u30c9\u306e\u305f\u3081\u306b\u4e09\u89d2\u5f62\u306e\u30c7\u30fc\u30bf\u578b\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n    struct Triangle {\n        Triangle() {}\n        Triangle(const Vec3 &v0, const Vec3 &v1, const Vec3 &v2) :v{ v0, v1, v2 } {\n\n        }\n        Vec3 &operator[](std::size_t i) {\n            return v[i];\n        }\n        const Vec3 &operator[](std::size_t i) const {\n            return v[i];\n        }\n        std::array<Vec3, 3> v;\n    };\n\n\n\u5358\u4e00\u4e09\u89d2\u5f62\u5185\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3055\u305b\u308b\n\u30b0\u30b0\u308b\u3068\u3059\u3050\u306b\u51fa\u3066\u304d\u305f\u305f\u3081\u3001\u3072\u3068\u307e\u305a\u3053\u3061\u3089\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n0 <= \\varepsilon_1 < 1\\\\\n0 <= \\varepsilon_2 < 1\n0<=\u03b51<10<=\u03b52<1{0 <= \\varepsilon_1 < 1\\\\\n0 <= \\varepsilon_2 < 1\n}\n\u306e\u4e00\u69d8\u4e71\u6570\u3092\u4f7f\u3063\u3066\u3001\u70b9ABC\u4e0a\u306e\u70b9P\u306f\u3001\nP = A(1 - \\sqrt{\\varepsilon_1}) + B(\\sqrt{\\varepsilon_1}(1 - \\varepsilon_2)) + C\\sqrt{\\varepsilon_1}\\varepsilon_2 \nP=A(1\u2212\u221a\u03b51)+B(\u221a\u03b51(1\u2212\u03b52))+C\u221a\u03b51\u03b52{P = A(1 - \\sqrt{\\varepsilon_1}) + B(\\sqrt{\\varepsilon_1}(1 - \\varepsilon_2)) + C\\sqrt{\\varepsilon_1}\\varepsilon_2 \n}\n\u3067\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u306a\u3093\u3067\u3053\u308c\u3067\u3044\u3044\u306e\u304b\u306f\u30fb\u30fb\u30fb\u5f8c\u3005\u8abf\u3079\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\nhttp://stackoverflow.com/questions/4778147/sample-random-point-in-triangle\n\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n    template <class Generator>\n    inline Vec3 uniform_on_triangle(RandomEngine<Generator> &e, const Triangle &tri) {\n        double eps1 = e.continuous();\n        double eps2 = e.continuous();\n\n        double sqrt_r1 = glm::sqrt(eps1);\n        lc::Vec3 p =\n            (1.0 - sqrt_r1) * tri[0]\n            + sqrt_r1 * (1.0 - eps2) * tri[1]\n            + sqrt_r1 * eps2 * tri[2];\n        return p;\n    }\n\n\n\u8907\u6570\u4e09\u89d2\u5f62\u306b\u5bfe\u5fdc\u3059\u308b\n\u8907\u6570\u4e09\u89d2\u5f62\u306b\u5bfe\u5fdc\u3059\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u5358\u7d14\u306b\u8907\u6570\u306e\u4e09\u89d2\u5f62\u306e\u4e2d\u304b\u3089\u4e00\u69d8\u306b\u4e00\u3064\u9078\u3076\n\u3068\u3059\u308b\u3068\u3072\u3068\u307e\u305a\u306f\u3070\u3089\u307e\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3067\u3059\u304c\u3001\u3059\u3050\u306b\u6c17\u3065\u304d\u307e\u3059\u304c\u3001\u9762\u7a4d\u304c\u5c0f\u3055\u306a\u4e09\u89d2\u5f62\u306e\u70b9\u5bc6\u5ea6\u304c\u9ad8\u304f\u3001\u9006\u306b\u9762\u7a4d\u306e\u5927\u304d\u3044\u30dd\u30ea\u30b4\u30f3\u306f\u70b9\u5bc6\u5ea6\u304c\u4f4e\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u5fae\u5999\u3067\u3059\u306d\u3002\n\u3082\u3061\u308d\u3093\u30dd\u30ea\u30b4\u30f3\u306e\u9762\u7a4d\u304c\u307b\u3068\u3093\u3069\u5747\u4e00\u306e\u3082\u306e\u3092\u6271\u3046\u5834\u5408\u3067\u3001\u5206\u5e03\u306e\u7cbe\u5ea6\u304c\u3055\u307b\u3069\u5fc5\u8981\u3068\u3055\u308c\u306a\u3044\u5834\u9762\u3067\u306f\u3001\u3053\u308c\u3067\u3088\u3044\u3067\u3057\u3087\u3046\u3002\u59a5\u5f53\u306a\u5b9f\u88c5\u3067\u3042\u308b\u3068\u3044\u3048\u307e\u3059\u3002\n\n\u9762\u7a4d\u306b\u6bd4\u4f8b\u3059\u308b\u78ba\u7387\u5206\u5e03\u3067\u4e09\u89d2\u5f62\u306e\u4e2d\u304b\u3089\u4e00\u3064\u9078\u3076\n\u4e00\u6b69\u9032\u3093\u3067\u3001\u9762\u7a4d\u306b\u5bfe\u3057\u3066\u78ba\u7387\u3092\u6bd4\u4f8b\u3055\u305b\u308c\u3070\u3001\u30dd\u30ea\u30b4\u30f3\u306e\u5927\u304d\u3055\u304c\u3044\u304f\u3089\u504f\u3063\u3066\u3044\u3066\u3082\u3001\u5747\u4e00\u306b\u3070\u3089\u307e\u304f\u3053\u3068\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n\u4e09\u89d2\u5f62\u306e\u9762\u7a4d\u3092\u6c42\u3081\u308b\n\u9762\u7a4d\u306b\u6bd4\u4f8b\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u307e\u305a\u306f\u9762\u7a4d\u3092\u6c42\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306b\u306f\u3001\n\u4e8c\u3064\u306e\u30d9\u30af\u30c8\u30eb\u306e\u5916\u7a4d\u306e\u30ce\u30eb\u30e0\u306f\u3001\u305d\u306e\u30d9\u30af\u30c8\u30eb\u306e\u306a\u3059\u5e73\u884c\u56db\u8fba\u5f62\u306e\u9762\u7a4d\u306b\u7b49\u3057\u3044\n\u3068\u3044\u3046\u6027\u8cea\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u4e09\u89d2\u5f62\u306e\u5834\u5408\u306f\u534a\u5206\u306b\u3059\u308c\u3070\u3088\u3044\u3060\u3051\u3067\u3059\u3002\nArea = \\frac{\\|\\vec{a}\\times\\vec{b}\\|}{2}\nArea=\u2225\u2192a\u00d7\u2192b\u22252{Area = \\frac{\\|\\vec{a}\\times\\vec{b}\\|}{2}\n}\n\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n    inline double triangle_area(const Vec3 &p0, const Vec3 &p1, const Vec3 &p2) {\n        auto va = p0 - p1;\n        auto vb = p2 - p1;\n        return glm::length(glm::cross(va, vb)) * 0.5;\n    }\n\n\n\u78ba\u7387\u5206\u5e03\u3092\u5236\u5fa1\u3059\u308b\n\u9762\u7a4d\u306b\u5bfe\u3057\u3066\u78ba\u7387\u3092\u6bd4\u4f8b\u3055\u305b\u308b\u306b\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u9762\u7a4d\u3092\u7d2f\u7a4d\u7684\u306a\u6570\u5024\u306b\u5909\u63db\u3057\u3066\u3001\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3057\u3001\n\u305d\u308c\u3092\u53c2\u7167\u3057\u3066\u504f\u3089\u305b\u308c\u3070\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u3088\u308a\u5177\u4f53\u7684\u306b\u4f8b\u3092\u3042\u3052\u307e\u3059\u3002\n\u4e09\u89d2\u5f62A\u306e\u9762\u7a4d: 10\n\u4e09\u89d2\u5f62B\u306e\u9762\u7a4d: 20\n\u4e09\u89d2\u5f62C\u306e\u9762\u7a4d: 30\n\u306e\u3068\u304d\u3001\u7d2f\u7a4d\u9762\u7a4d\u30c6\u30fc\u30d6\u30eb\u306f\u3001\nA\u306e\u7d2f\u7a4d\u9762\u7a4d: 10 (10)\nB\u306e\u7d2f\u7a4d\u9762\u7a4d: 30 (10 + 20)\nC\u306e\u7d2f\u7a4d\u9762\u7a4d: 60 (10 + 20 + 30)\n\u3068\u306a\u308a\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\n\u4e71\u6570\u30920 <= x < 60\u3067\u767a\u751f\u3055\u305b\u307e\u3059\u3002\n\u305d\u306e\u3068\u304d\u3001x\u306e\u5024\u3068\u3001\u305d\u308c\u306b\u3088\u308a\u9078\u3070\u308c\u308b\u4e09\u89d2\u5f62\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\n0  <= x < 10 \u306e\u3068\u304dA\n10 <= x < 30 \u306e\u3068\u304dB\n30 <= x < 60 \u306e\u3068\u304dC\n\u3053\u306e\u3088\u3046\u306b\u6c7a\u3081\u3066\u3042\u3052\u308c\u3070\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u3001ABC\u3069\u308c\u3092\u9078\u3076\u304b\u9078\u5b9a\u3059\u308b\u3068\u304d\u306b\u3001\uff12\u5206\u63a2\u7d22\u3057\u305f\u307b\u3046\u304c\u3001\u30dd\u30ea\u30b4\u30f3\u306e\u500b\u6570\u304c\u591a\u3044\u5834\u5408\u306f\u6709\u5229\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002C++\u306b\u306f\u3001\u3042\u308b\u6570\u3088\u308a\u5927\u304d\u3044\u6570\u5024\u3092\u3082\u3064\u6700\u521d\u306e\u8981\u7d20\u3092\u63a2\u7d22\u3059\u308b\u305f\u3081\u306estd::upper_bound\u95a2\u6570\u304c\u3042\u308b\u305f\u3081\u3001\u5b9f\u88c5\u3092\u7701\u7565\u3067\u304d\u307e\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u9023\u7d9a\u7684\u306a\u5024\u3068\u96e2\u6563\u7684\u306a\u5024\u3092\u9023\u643a\u3055\u305b\u308b\u3068\u304d\u306b\u3001\u306a\u3093\u3060\u304b\u3093\u3060\u3068upper_bound\u3068\u3044\u3046\u306e\u306f\u4fbf\u5229\u306b\u4f7f\u3048\u307e\u3059\u306d\u3002\n\u3055\u3066\u3001\u305d\u308c\u3092\u8003\u616e\u306b\u3044\u308c\u3066\u5b9f\u88c5\u3059\u308b\u3068\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n    class UniformOnTriangle {\n    public:\n        void build() {\n            if (_triangles.empty()) {\n                _cumulative_areas.clear();\n                _area = 0.0;\n                return;\n            }\n\n            _cumulative_areas.resize(_triangles.size());\n            double area = 0.0;\n            for (int i = 0; i < _triangles.size(); ++i) {\n                const Triangle &tri = _triangles[i];\n                area += triangle_area(tri[0], tri[1], tri[2]);\n                _cumulative_areas[i] = area;\n            }\n            _area = area;\n        }\n\n        template <class Generator>\n        Vec3 uniform(RandomEngine<Generator> &e) const {\n            double p = e.continuous(0.0, _area);\n            auto it = std::upper_bound(_cumulative_areas.begin(), _cumulative_areas.end(), p);\n            std::size_t index = std::distance(_cumulative_areas.begin(), it);\n            index = std::min(index, _cumulative_areas.size() - 1);\n            return uniform_on_triangle(e, _triangles[index]);\n        }\n\n        void set_triangle(const std::vector<Triangle> &triangles) {\n            _triangles = triangles;\n        }\n        double get_area() const {\n            return _area;\n        }\n        std::vector<Triangle> _triangles;\n        std::vector<double> _cumulative_areas;\n        double _area = 0.0;\n    };\n\n\n\n\u7d50\u679c\n\u4ee5\u4e0a\u3092cinder\u3084openframeworks\u4e0a\u3067OpenGL\u3067\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u3084\u3063\u3071\u308a\u3053\u3046\u3044\u3046\u3068\u304d\u306f\u751f\u306eGL\u3092\u6271\u3046\u3068\u74b0\u5883\u69cb\u7bc9\u3060\u306a\u3093\u3060\u3068\u307e\u3063\u305f\u304f\u9762\u5012\u306a\u306e\u3067\u3001\u52a9\u304b\u308a\u307e\u3059\u306d\u3002win, mac\u9078\u3070\u306a\u3044\u306e\u3082\u3044\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u4f59\u8ac7\u3067\u3057\u305f\u3002\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5747\u4e00\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\u4e00\u5fdcCinder\u3067\u306e\u30c6\u30b9\u30c8\u7528\u5b9f\u88c5\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n#include \"cinder/app/App.h\"\n#include \"cinder/app/RendererGl.h\"\n#include \"cinder/gl/gl.h\"\n#include \"cinder/CameraUi.h\"\n\n#include \"random_engine.hpp\"\n#include \"triangle_area.hpp\"\n#include \"uniform_on_triangle.hpp\"\n\n#include <boost/format.hpp>\n\n#define TINYOBJLOADER_IMPLEMENTATION\n#include <tiny_obj_loader.h>\n\nusing namespace ci;\nusing namespace ci::app;\nusing namespace std;\n\nclass TriangleRandomApp : public App {\npublic:\n    void setup() override;\n    void keyDown(KeyEvent event) {\n        _index++;\n    }\n    void mouseDown(MouseEvent event) override;\n    void update() override;\n    void draw() override;\n\n    CameraPersp _camera;\n    CameraUi _cameraUi;\n    gl::BatchRef _plane;\n\n    int _index = 0;\n\n    lc::UniformOnTriangle _uniformTri;\n};\n\nvoid TriangleRandomApp::setup()\n{\n    _camera.lookAt(vec3(0, 0.0f, 4.0f), vec3(0.0f));\n    _camera.setPerspective(40.0f, getWindowAspectRatio(), 0.01f, 100.0f);\n    _cameraUi = CameraUi(&_camera, getWindow());\n\n    auto colorShader = gl::getStockShader(gl::ShaderDef().color());\n    _plane = gl::Batch::create(geom::WirePlane().size(vec2(10.0f)).subdivisions(ivec2(10)), colorShader);\n\n\n    std::vector<tinyobj::shape_t> shapes;\n    std::vector<tinyobj::material_t> materials;\n    std::string err;\n    std::string path = (getAssetPath(\"\") / \"poly.obj\").string();\n    bool ret = tinyobj::LoadObj(shapes, materials, err, path.c_str());\n\n    const tinyobj::shape_t &shape = shapes[0];\n    std::vector<lc::Triangle> triangles;\n    for (size_t i = 0; i < shape.mesh.indices.size(); i += 3) {\n        lc::Triangle tri;\n        for (int j = 0; j < 3; ++j) {\n            int idx = shape.mesh.indices[i + j];\n            for (int k = 0; k < 3; ++k) {\n                tri.v[j][k] = shape.mesh.positions[idx * 3 + k];\n            }\n        }\n        triangles.push_back(tri);\n    }\n\n    _uniformTri.set_triangle(triangles);\n    _uniformTri.build();\n\n    // \u9762\u7a4d\u691c\u8a3c\u30b3\u30fc\u30c9\n    /*\n    lc::RandomEngine<lc::Xor> e;\n    e.discard(100);\n    for (int i = 0; i < 100; ++i) {\n        lc::Vec3 p0(0.0, 0.0, 0.0);\n        lc::Vec3 p1(10.0, 0.0, 0.0);\n        lc::Vec3 p2(10.0, 10.0, 0.0);\n        double base_area = 50.0;\n\n        float scale = e.continuous(0.1f, 10.0f);\n\n        // \u56de\u8ee2\u3001\u79fb\u52d5\u304c\u884c\u308f\u308c\u3066\u3082\u3001\u6b63\u3057\u304f\u9762\u7a4d\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306f\u305a\u3067\u3042\u308b\n        lc::Vec3 translation(e.continuous(), e.continuous(), e.continuous());\n        lc::Quat rotation = glm::angleAxis(e.continuous(0.0, glm::pi<double>()), e.on_sphere());\n        p0 = rotation * (p0 + translation);\n        p1 = rotation * (p1 + translation);\n        p2 = rotation * (p2 + translation);\n\n        p0 *= scale;\n        p1 *= scale;\n        p2 *= scale;\n\n        double area = lc::triangle_area(p0, p1, p2);\n\n        // \u30b9\u30b1\u30fc\u30eb\u304cx\u500d\u3055\u308c\u308b\u3068\u304d\u3001\u9762\u7a4d\u306fx^2\u500d\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\n        double d = area - base_area * scale * scale;\n        if (0.000001 < d) {\n            abort();\n        }\n    }\n    */\n}\n\nvoid TriangleRandomApp::mouseDown(MouseEvent event)\n{\n}\n\nvoid TriangleRandomApp::update()\n{\n}\n\nvoid TriangleRandomApp::draw()\n{\n    gl::clear(Color(0, 0, 0));\n\n    // Set up the camera.\n    gl::ScopedMatrices push;\n    gl::setMatrices(_camera);\n\n    {\n        gl::ScopedColor color(Color::gray(0.2f));\n        _plane->draw();\n    }\n\n    gl::VertBatch vb(GL_POINTS);\n\n    static lc::RandomEngine<lc::Xor128> e_triin;\n    for (int i = 0; i < 10000; ++i) {\n        lc::Vec3 p = _uniformTri.uniform(e_triin);\n        vb.vertex(p);\n    }\n\n    vb.draw();\n\n    for (int i = 0; i < _uniformTri._triangles.size(); ++i) {\n        auto tri = _uniformTri._triangles[i];\n        for (int j = 0; j < 3; ++j) {\n            gl::drawLine(tri[j], tri[(j + 1) % 3]);\n        }\n    }\n}\n\nCINDER_APP(TriangleRandomApp, RendererGl, [](App::Settings *settings) {\n    settings->setConsoleWindowEnabled(true);\n})\n\n\n## \u76ee\u7684\n\u4e71\u6570\u3092\u6563\u3089\u3059\u3068\u304d\u3001\u8907\u6570\u306e\u4e09\u89d2\u5f62\u306b\u307e\u305f\u304c\u308a\u5747\u4e00\u306b\u5206\u5e03\u3055\u305b\u305f\u3044\u6642\u304c\u3042\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u3092\u30e1\u30c3\u30b7\u30e5\u306e\u5f62\u72b6\u306b\u5408\u308f\u305b\u3066\u767a\u751f\u3055\u305b\u305f\u308a\u3001\n\u30ec\u30a4\u30c8\u30ec\u30fc\u30b7\u30f3\u30b0\u306b\u304a\u3051\u308b\u5149\u6e90\u306e\u76f4\u63a5\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3068\u3044\u3063\u305f\u3082\u306e\u304c\u3001\u4eca\u56de\u60f3\u5b9a\u3059\u308b\u7528\u9014\u3067\u3059\u3002\n\n## \u4e71\u6570\n\u4f55\u306f\u3068\u3082\u3042\u308c\u3001\u30bd\u30fc\u30b9\u306b\u306a\u308b\u9023\u7d9a\u3057\u305f\u4e71\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u305f\u3060\u3001\u5f53\u7136\u306a\u304c\u3089\u3001\u4e00\u822c\u306b\u5b9f\u6570\u306e\u8868\u73fe\u3082\u30d3\u30c3\u30c8\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u4ee5\u4e0a\u3001\u96e2\u6563\u7684\u306a\u6570\u5024\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3002\n\u3042\u307e\u308a\u8e0f\u307f\u8fbc\u3080\u3068\u8131\u7dda\u3057\u3059\u304e\u308b\u306e\u3067\u3001\u3053\u3053\u306b\u3064\u3044\u3066\u306f\u3001\u30b3\u30fc\u30c9\u3092\u5f35\u308b\u3060\u3051\u306b\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4e71\u6570\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30a8\u30f3\u30b8\u30f3\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u633f\u3052\u66ff\u3048\u308b\u3053\u3068\u3060\u3051\u306f\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u3042\u3001\u72b6\u6cc1\u306b\u3088\u3063\u3066\u306f\u5fc5\u8981\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3002\n\n\n```cpp\n\n\tstruct Xor {\n\t\tXor() {\n\n\t\t}\n\t\tXor(uint32_t seed) {\n\t\t\t_y = std::max(seed, 1u);\n\t\t}\n\t\tuint32_t generate() {\n\t\t\t_y = _y ^ (_y << 13); _y = _y ^ (_y >> 17);\n\t\t\treturn _y = _y ^ (_y << 5);\n\t\t}\n\tprivate:\n\t\tuint32_t _y = 2463534242;\n\t};\n\ttemplate <class Generator>\n\tstruct RandomEngine : public Generator {\n\tpublic:\n\t\tRandomEngine() :Generator() {\n\t\t}\n\t\tRandomEngine(uint32_t seed) :Generator(seed) {\n\t\t}\n\n\t\tvoid discard(int n) {\n\t\t\tfor (int i = 0; i < n; ++i) {\n\t\t\t\tthis->generate();\n\t\t\t}\n\t\t}\n\n\t\tdouble continuous() {\n\t\t\tuint32_t uniform = this->generate();\n\t\t\tconstexpr double c = 1.0 / static_cast<double>(0xffffffffLL + 1);\n\t\t\treturn static_cast<double>(uniform) * c;\n\t\t}\n\t\t// 0 <= x < 1\n\t\tdouble continuous(double a, double b) {\n\t\t\treturn a + continuous() * (b - a);\n\t\t}\n\t\t// a <= x < b\n\t\tdouble continuous(double a, double b) {\n\t\t\treturn a + continuous() * (b - a);\n\t\t}\n\t\t// \u305d\u306e\u4ed6\u306e\u30e1\u30bd\u30c3\u30c9\u7701\u7565\n\t};\n```\n\n\u305f\u3068\u3048\u3070\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u306d\n\n```cpp\n\tlc::RandomEngine<lc::Xor> e;\n\te.discard(100);\n\tfloat value = e.continuous();\n```\n\n\u3061\u306a\u307f\u306bdiscard\u3068\u3044\u3046\u306e\u306f\u3001\u521d\u671f\u5316\u76f4\u5f8c\u306e\u4e71\u6570\u5024\u3068\u30b7\u30fc\u30c9\u306e\u5024\u3068\u306e\u95a2\u9023\u6027\u3092\u3042\u308b\u7a0b\u5ea6\u65ad\u3061\u5207\u308b\u305f\u3081\u306b\u3042\u308b\u3001\u30b9\u30ad\u30c3\u30d7\u7528\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3059\u3002\n\u4e00\u5fdc\u4e71\u6570\u306b\u3088\u3063\u3066\u8aad\u307f\u98db\u3070\u3059\u3079\u304d\u91cf\u306f\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u304c\u3001\u9762\u5012\u306a\u306e\u3067\u4eca\u56de\u306f\u6a2a\u7740\u3057\u3066\u9069\u5f53\u306a\u6570\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u3082\u3061\u308d\u3093C++\u6a19\u6e96\u306erandom\u3092\u7528\u3044\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\u305d\u306e\u5834\u5408\u3001\u3053\u3061\u3089\u304c\u53c2\u8003\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\nC++0x\u306e\u65b0\u3057\u3044\u4e71\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u3001random\nhttps://cpplover.blogspot.jp/2009/11/c0xrandom.html\n\n\u4eca\u56de\u306f\u81ea\u524d\u3067\u7d44\u307f\u7acb\u3066\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u4e09\u89d2\u5f62\u306e\u30c7\u30fc\u30bf\u578b\n\u4e00\u5fdc\u5f8c\u3005\u306e\u30b3\u30fc\u30c9\u306e\u305f\u3081\u306b\u4e09\u89d2\u5f62\u306e\u30c7\u30fc\u30bf\u578b\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```cpp\n\tstruct Triangle {\n\t\tTriangle() {}\n\t\tTriangle(const Vec3 &v0, const Vec3 &v1, const Vec3 &v2) :v{ v0, v1, v2 } {\n\n\t\t}\n\t\tVec3 &operator[](std::size_t i) {\n\t\t\treturn v[i];\n\t\t}\n\t\tconst Vec3 &operator[](std::size_t i) const {\n\t\t\treturn v[i];\n\t\t}\n\t\tstd::array<Vec3, 3> v;\n\t};\n```\n\n# \u5358\u4e00\u4e09\u89d2\u5f62\u5185\u306b\u4e00\u69d8\u306b\u5206\u5e03\u3055\u305b\u308b\n\u30b0\u30b0\u308b\u3068\u3059\u3050\u306b\u51fa\u3066\u304d\u305f\u305f\u3081\u3001\u3072\u3068\u307e\u305a\u3053\u3061\u3089\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```math\n0 <= \\varepsilon_1 < 1\\\\\n0 <= \\varepsilon_2 < 1\n```\n\n\u306e\u4e00\u69d8\u4e71\u6570\u3092\u4f7f\u3063\u3066\u3001\u70b9ABC\u4e0a\u306e\u70b9P\u306f\u3001\n\n```math\nP = A(1 - \\sqrt{\\varepsilon_1}) + B(\\sqrt{\\varepsilon_1}(1 - \\varepsilon_2)) + C\\sqrt{\\varepsilon_1}\\varepsilon_2 \n```\n\n\u3067\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u306a\u3093\u3067\u3053\u308c\u3067\u3044\u3044\u306e\u304b\u306f\u30fb\u30fb\u30fb\u5f8c\u3005\u8abf\u3079\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\nhttp://stackoverflow.com/questions/4778147/sample-random-point-in-triangle\n\n\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n```cpp\n\ttemplate <class Generator>\n\tinline Vec3 uniform_on_triangle(RandomEngine<Generator> &e, const Triangle &tri) {\n\t\tdouble eps1 = e.continuous();\n\t\tdouble eps2 = e.continuous();\n\n\t\tdouble sqrt_r1 = glm::sqrt(eps1);\n\t\tlc::Vec3 p =\n\t\t\t(1.0 - sqrt_r1) * tri[0]\n\t\t\t+ sqrt_r1 * (1.0 - eps2) * tri[1]\n\t\t\t+ sqrt_r1 * eps2 * tri[2];\n\t\treturn p;\n\t}\n```\n\n# \u8907\u6570\u4e09\u89d2\u5f62\u306b\u5bfe\u5fdc\u3059\u308b\n\u8907\u6570\u4e09\u89d2\u5f62\u306b\u5bfe\u5fdc\u3059\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n### \u5358\u7d14\u306b\u8907\u6570\u306e\u4e09\u89d2\u5f62\u306e\u4e2d\u304b\u3089\u4e00\u69d8\u306b\u4e00\u3064\u9078\u3076\n\u3068\u3059\u308b\u3068\u3072\u3068\u307e\u305a\u306f\u3070\u3089\u307e\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3067\u3059\u304c\u3001\u3059\u3050\u306b\u6c17\u3065\u304d\u307e\u3059\u304c\u3001\u9762\u7a4d\u304c\u5c0f\u3055\u306a\u4e09\u89d2\u5f62\u306e\u70b9\u5bc6\u5ea6\u304c\u9ad8\u304f\u3001\u9006\u306b\u9762\u7a4d\u306e\u5927\u304d\u3044\u30dd\u30ea\u30b4\u30f3\u306f\u70b9\u5bc6\u5ea6\u304c\u4f4e\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u5fae\u5999\u3067\u3059\u306d\u3002\n\u3082\u3061\u308d\u3093\u30dd\u30ea\u30b4\u30f3\u306e\u9762\u7a4d\u304c\u307b\u3068\u3093\u3069\u5747\u4e00\u306e\u3082\u306e\u3092\u6271\u3046\u5834\u5408\u3067\u3001\u5206\u5e03\u306e\u7cbe\u5ea6\u304c\u3055\u307b\u3069\u5fc5\u8981\u3068\u3055\u308c\u306a\u3044\u5834\u9762\u3067\u306f\u3001\u3053\u308c\u3067\u3088\u3044\u3067\u3057\u3087\u3046\u3002\u59a5\u5f53\u306a\u5b9f\u88c5\u3067\u3042\u308b\u3068\u3044\u3048\u307e\u3059\u3002\n\n### \u9762\u7a4d\u306b\u6bd4\u4f8b\u3059\u308b\u78ba\u7387\u5206\u5e03\u3067\u4e09\u89d2\u5f62\u306e\u4e2d\u304b\u3089\u4e00\u3064\u9078\u3076\n\u4e00\u6b69\u9032\u3093\u3067\u3001\u9762\u7a4d\u306b\u5bfe\u3057\u3066\u78ba\u7387\u3092\u6bd4\u4f8b\u3055\u305b\u308c\u3070\u3001\u30dd\u30ea\u30b4\u30f3\u306e\u5927\u304d\u3055\u304c\u3044\u304f\u3089\u504f\u3063\u3066\u3044\u3066\u3082\u3001\u5747\u4e00\u306b\u3070\u3089\u307e\u304f\u3053\u3068\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n### \u4e09\u89d2\u5f62\u306e\u9762\u7a4d\u3092\u6c42\u3081\u308b\n\u9762\u7a4d\u306b\u6bd4\u4f8b\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u307e\u305a\u306f\u9762\u7a4d\u3092\u6c42\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u306b\u306f\u3001\n**\u4e8c\u3064\u306e\u30d9\u30af\u30c8\u30eb\u306e\u5916\u7a4d\u306e\u30ce\u30eb\u30e0\u306f\u3001\u305d\u306e\u30d9\u30af\u30c8\u30eb\u306e\u306a\u3059\u5e73\u884c\u56db\u8fba\u5f62\u306e\u9762\u7a4d\u306b\u7b49\u3057\u3044**\n\u3068\u3044\u3046\u6027\u8cea\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u4e09\u89d2\u5f62\u306e\u5834\u5408\u306f\u534a\u5206\u306b\u3059\u308c\u3070\u3088\u3044\u3060\u3051\u3067\u3059\u3002\n\n```math\nArea = \\frac{\\|\\vec{a}\\times\\vec{b}\\|}{2}\n```\n\n\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n```cpp\n\n\tinline double triangle_area(const Vec3 &p0, const Vec3 &p1, const Vec3 &p2) {\n\t\tauto va = p0 - p1;\n\t\tauto vb = p2 - p1;\n\t\treturn glm::length(glm::cross(va, vb)) * 0.5;\n\t}\n```\n\n### \u78ba\u7387\u5206\u5e03\u3092\u5236\u5fa1\u3059\u308b\n\u9762\u7a4d\u306b\u5bfe\u3057\u3066\u78ba\u7387\u3092\u6bd4\u4f8b\u3055\u305b\u308b\u306b\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u9762\u7a4d\u3092\u7d2f\u7a4d\u7684\u306a\u6570\u5024\u306b\u5909\u63db\u3057\u3066\u3001\u30c6\u30fc\u30d6\u30eb\u306b\u683c\u7d0d\u3057\u3001\n\u305d\u308c\u3092\u53c2\u7167\u3057\u3066\u504f\u3089\u305b\u308c\u3070\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u3088\u308a\u5177\u4f53\u7684\u306b\u4f8b\u3092\u3042\u3052\u307e\u3059\u3002\n\n\u4e09\u89d2\u5f62A\u306e\u9762\u7a4d: **10**\n\u4e09\u89d2\u5f62B\u306e\u9762\u7a4d: **20**\n\u4e09\u89d2\u5f62C\u306e\u9762\u7a4d: **30**\n\n\u306e\u3068\u304d\u3001\u7d2f\u7a4d\u9762\u7a4d\u30c6\u30fc\u30d6\u30eb\u306f\u3001\n\nA\u306e\u7d2f\u7a4d\u9762\u7a4d: **10** (10)\nB\u306e\u7d2f\u7a4d\u9762\u7a4d: **30** (10 + 20)\nC\u306e\u7d2f\u7a4d\u9762\u7a4d: **60** (10 + 20 + 30)\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\n\u4e71\u6570\u3092**0 <= x < 60**\u3067\u767a\u751f\u3055\u305b\u307e\u3059\u3002\n\n\u305d\u306e\u3068\u304d\u3001x\u306e\u5024\u3068\u3001\u305d\u308c\u306b\u3088\u308a\u9078\u3070\u308c\u308b\u4e09\u89d2\u5f62\u3068\u306e\u95a2\u4fc2\u6027\u306f\u3001\n\n**0  <= x < 10** \u306e\u3068\u304dA\n**10 <= x < 30** \u306e\u3068\u304dB\n**30 <= x < 60** \u306e\u3068\u304dC\n\n\u3053\u306e\u3088\u3046\u306b\u6c7a\u3081\u3066\u3042\u3052\u308c\u3070\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u3001ABC\u3069\u308c\u3092\u9078\u3076\u304b\u9078\u5b9a\u3059\u308b\u3068\u304d\u306b\u3001\uff12\u5206\u63a2\u7d22\u3057\u305f\u307b\u3046\u304c\u3001\u30dd\u30ea\u30b4\u30f3\u306e\u500b\u6570\u304c\u591a\u3044\u5834\u5408\u306f\u6709\u5229\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002C++\u306b\u306f\u3001\u3042\u308b\u6570\u3088\u308a\u5927\u304d\u3044\u6570\u5024\u3092\u3082\u3064\u6700\u521d\u306e\u8981\u7d20\u3092\u63a2\u7d22\u3059\u308b\u305f\u3081\u306e**std::upper_bound\u95a2\u6570**\u304c\u3042\u308b\u305f\u3081\u3001\u5b9f\u88c5\u3092\u7701\u7565\u3067\u304d\u307e\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u9023\u7d9a\u7684\u306a\u5024\u3068\u96e2\u6563\u7684\u306a\u5024\u3092\u9023\u643a\u3055\u305b\u308b\u3068\u304d\u306b\u3001\u306a\u3093\u3060\u304b\u3093\u3060\u3068upper_bound\u3068\u3044\u3046\u306e\u306f\u4fbf\u5229\u306b\u4f7f\u3048\u307e\u3059\u306d\u3002\n\n\u3055\u3066\u3001\u305d\u308c\u3092\u8003\u616e\u306b\u3044\u308c\u3066\u5b9f\u88c5\u3059\u308b\u3068\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n\n\n```cpp\n\tclass UniformOnTriangle {\n\tpublic:\n\t\tvoid build() {\n\t\t\tif (_triangles.empty()) {\n\t\t\t\t_cumulative_areas.clear();\n\t\t\t\t_area = 0.0;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_cumulative_areas.resize(_triangles.size());\n\t\t\tdouble area = 0.0;\n\t\t\tfor (int i = 0; i < _triangles.size(); ++i) {\n\t\t\t\tconst Triangle &tri = _triangles[i];\n\t\t\t\tarea += triangle_area(tri[0], tri[1], tri[2]);\n\t\t\t\t_cumulative_areas[i] = area;\n\t\t\t}\n\t\t\t_area = area;\n\t\t}\n\n\t\ttemplate <class Generator>\n\t\tVec3 uniform(RandomEngine<Generator> &e) const {\n\t\t\tdouble p = e.continuous(0.0, _area);\n\t\t\tauto it = std::upper_bound(_cumulative_areas.begin(), _cumulative_areas.end(), p);\n\t\t\tstd::size_t index = std::distance(_cumulative_areas.begin(), it);\n\t\t\tindex = std::min(index, _cumulative_areas.size() - 1);\n\t\t\treturn uniform_on_triangle(e, _triangles[index]);\n\t\t}\n\n\t\tvoid set_triangle(const std::vector<Triangle> &triangles) {\n\t\t\t_triangles = triangles;\n\t\t}\n\t\tdouble get_area() const {\n\t\t\treturn _area;\n\t\t}\n\t\tstd::vector<Triangle> _triangles;\n\t\tstd::vector<double> _cumulative_areas;\n\t\tdouble _area = 0.0;\n\t};\n\n```\n\n### \u7d50\u679c\n\u4ee5\u4e0a\u3092cinder\u3084openframeworks\u4e0a\u3067OpenGL\u3067\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30ba\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u3084\u3063\u3071\u308a\u3053\u3046\u3044\u3046\u3068\u304d\u306f\u751f\u306eGL\u3092\u6271\u3046\u3068\u74b0\u5883\u69cb\u7bc9\u3060\u306a\u3093\u3060\u3068\u307e\u3063\u305f\u304f\u9762\u5012\u306a\u306e\u3067\u3001\u52a9\u304b\u308a\u307e\u3059\u306d\u3002win, mac\u9078\u3070\u306a\u3044\u306e\u3082\u3044\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u4f59\u8ac7\u3067\u3057\u305f\u3002\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5747\u4e00\u306b\u5206\u5e03\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n![image](https://s3-ap-northeast-1.amazonaws.com/ushiobucket1/qiita/random_on_triangles.gif)\n\n\u6700\u5f8c\u306b\u4e00\u5fdcCinder\u3067\u306e\u30c6\u30b9\u30c8\u7528\u5b9f\u88c5\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n```cpp\n\n#include \"cinder/app/App.h\"\n#include \"cinder/app/RendererGl.h\"\n#include \"cinder/gl/gl.h\"\n#include \"cinder/CameraUi.h\"\n\n#include \"random_engine.hpp\"\n#include \"triangle_area.hpp\"\n#include \"uniform_on_triangle.hpp\"\n\n#include <boost/format.hpp>\n\n#define TINYOBJLOADER_IMPLEMENTATION\n#include <tiny_obj_loader.h>\n\nusing namespace ci;\nusing namespace ci::app;\nusing namespace std;\n\nclass TriangleRandomApp : public App {\npublic:\n\tvoid setup() override;\n\tvoid keyDown(KeyEvent event) {\n\t\t_index++;\n\t}\n\tvoid mouseDown(MouseEvent event) override;\n\tvoid update() override;\n\tvoid draw() override;\n\n\tCameraPersp\t_camera;\n\tCameraUi _cameraUi;\n\tgl::BatchRef _plane;\n\n\tint _index = 0;\n\n\tlc::UniformOnTriangle _uniformTri;\n};\n\nvoid TriangleRandomApp::setup()\n{\n\t_camera.lookAt(vec3(0, 0.0f, 4.0f), vec3(0.0f));\n\t_camera.setPerspective(40.0f, getWindowAspectRatio(), 0.01f, 100.0f);\n\t_cameraUi = CameraUi(&_camera, getWindow());\n\n\tauto colorShader = gl::getStockShader(gl::ShaderDef().color());\n\t_plane = gl::Batch::create(geom::WirePlane().size(vec2(10.0f)).subdivisions(ivec2(10)), colorShader);\n\n\n\tstd::vector<tinyobj::shape_t> shapes;\n\tstd::vector<tinyobj::material_t> materials;\n\tstd::string err;\n\tstd::string path = (getAssetPath(\"\") / \"poly.obj\").string();\n\tbool ret = tinyobj::LoadObj(shapes, materials, err, path.c_str());\n\n\tconst tinyobj::shape_t &shape = shapes[0];\n\tstd::vector<lc::Triangle> triangles;\n\tfor (size_t i = 0; i < shape.mesh.indices.size(); i += 3) {\n\t\tlc::Triangle tri;\n\t\tfor (int j = 0; j < 3; ++j) {\n\t\t\tint idx = shape.mesh.indices[i + j];\n\t\t\tfor (int k = 0; k < 3; ++k) {\n\t\t\t\ttri.v[j][k] = shape.mesh.positions[idx * 3 + k];\n\t\t\t}\n\t\t}\n\t\ttriangles.push_back(tri);\n\t}\n\n\t_uniformTri.set_triangle(triangles);\n\t_uniformTri.build();\n\n\t// \u9762\u7a4d\u691c\u8a3c\u30b3\u30fc\u30c9\n\t/*\n\tlc::RandomEngine<lc::Xor> e;\n\te.discard(100);\n\tfor (int i = 0; i < 100; ++i) {\n\t\tlc::Vec3 p0(0.0, 0.0, 0.0);\n\t\tlc::Vec3 p1(10.0, 0.0, 0.0);\n\t\tlc::Vec3 p2(10.0, 10.0, 0.0);\n\t\tdouble base_area = 50.0;\n\n\t\tfloat scale = e.continuous(0.1f, 10.0f);\n\n\t\t// \u56de\u8ee2\u3001\u79fb\u52d5\u304c\u884c\u308f\u308c\u3066\u3082\u3001\u6b63\u3057\u304f\u9762\u7a4d\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306f\u305a\u3067\u3042\u308b\n\t\tlc::Vec3 translation(e.continuous(), e.continuous(), e.continuous());\n\t\tlc::Quat rotation = glm::angleAxis(e.continuous(0.0, glm::pi<double>()), e.on_sphere());\n\t\tp0 = rotation * (p0 + translation);\n\t\tp1 = rotation * (p1 + translation);\n\t\tp2 = rotation * (p2 + translation);\n\n\t\tp0 *= scale;\n\t\tp1 *= scale;\n\t\tp2 *= scale;\n\n\t\tdouble area = lc::triangle_area(p0, p1, p2);\n\n\t\t// \u30b9\u30b1\u30fc\u30eb\u304cx\u500d\u3055\u308c\u308b\u3068\u304d\u3001\u9762\u7a4d\u306fx^2\u500d\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\n\t\tdouble d = area - base_area * scale * scale;\n\t\tif (0.000001 < d) {\n\t\t\tabort();\n\t\t}\n\t}\n\t*/\n}\n\nvoid TriangleRandomApp::mouseDown(MouseEvent event)\n{\n}\n\nvoid TriangleRandomApp::update()\n{\n}\n\nvoid TriangleRandomApp::draw()\n{\n\tgl::clear(Color(0, 0, 0));\n\n\t// Set up the camera.\n\tgl::ScopedMatrices push;\n\tgl::setMatrices(_camera);\n\n\t{\n\t\tgl::ScopedColor color(Color::gray(0.2f));\n\t\t_plane->draw();\n\t}\n\n\tgl::VertBatch vb(GL_POINTS);\n\n\tstatic lc::RandomEngine<lc::Xor128> e_triin;\n\tfor (int i = 0; i < 10000; ++i) {\n\t\tlc::Vec3 p = _uniformTri.uniform(e_triin);\n\t\tvb.vertex(p);\n\t}\n\n\tvb.draw();\n\n\tfor (int i = 0; i < _uniformTri._triangles.size(); ++i) {\n\t\tauto tri = _uniformTri._triangles[i];\n\t\tfor (int j = 0; j < 3; ++j) {\n\t\t\tgl::drawLine(tri[j], tri[(j + 1) % 3]);\n\t\t}\n\t}\n}\n\nCINDER_APP(TriangleRandomApp, RendererGl, [](App::Settings *settings) {\n\tsettings->setConsoleWindowEnabled(true);\n})\n\n```\n", "tags": ["C++", "3D", "\u4e71\u6570"]}