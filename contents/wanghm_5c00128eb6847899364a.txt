{"context": " More than 1 year has passed since last update.\n\n1. nginx \u30e6\u30fc\u30b6\u4f5c\u6210\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nuseradd -s /sbin/nologin -d /usr/local/nginx -M nginx\nyum install -y gcc make automake autoconf libtool git\nyum install -y pcre pcre-devel libxml2 libxml2-devel curl curl-devel httpd-devel\nyum install -y openssl openssl-devel\nyum install zlib zlib-devel\n\n\n2. modsecurity\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ncd /usr/local/src/\nyum install git -y\ngit clone https://github.com/SpiderLabs/ModSecurity.git mod_security\ncd mod_security/\n\n./autogen.sh\n\nconfigure.ac\u3092\u4fee\u6b63\nAM_PROG_CC_C_O\n\u3092\u8ffd\u52a0\n./autogen.sh\n\n\nCFLAGS=\"-DDEFAULT_USER=\\\\\\\"nginx\\\\\\\" -DDEFAULT_GROUP=\\\\\\\"nginx\\\\\\\"\" CPPFLAGS=\"-I/usr/include/apr-1 -I/usr/include/httpd\" ./configure --disable-apache2-module --disable-mlogc --enable-standalone-module\nmake\nmake install\n\n\n3. nginx\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ncd /usr/local/src/\nwget http://nginx.org/download/nginx-1.8.0.tar.gz\ntar xzvf nginx-1.8.0.tar.gz \ncd nginx-1.8.0\n./configure --user=nginx --group=nginx --add-module=../mod_security/nginx/modsecurity --with-http_ssl_module --with-http_realip_module --with-cc-opt=\"-I/usr/include/apr-1 -I/usr/include/httpd\" --with-ld-opt=\"-lapr-1 -laprutil-1\"\nmake\nmake install\n\nvi /etc/init.d/nginx\nchmod +x /etc/init.d/nginx \nchkconfig --add nginx\nchkconfig nginx on\nchkconfig --list\n\n\n4. CRS\u30eb\u30fc\u30eb\u8ffd\u52a0\ncd  /usr/local/etc/\nmkdir modsecurity\ncd modsecurity\ngit clone https://github.com/SpiderLabs/owasp-modsecurity-crs crs\n\nln -s crs/base_rules/modsecurity_35_bad_robots.data .\nln -s crs/base_rules/modsecurity_40_generic_attacks.data .\nln -s crs/base_rules/modsecurity_35_scanners.data .\nln -s crs/base_rules/modsecurity_50_outbound.data .\nln -s crs/base_rules/modsecurity_50_outbound_malware.data .\n\ncp /usr/local/src/mod_security/modsecurity.conf-recommended modsecurity.conf\n\n\n5. \u30eb\u30fc\u30eb\u66f4\u65b0\ncd /usr/local/etc/modsecurity/crs\ngit pull\ncd ..\n\ncat crs/modsecurity_crs_10_setup.conf.example crs/base_rules/*.conf > modsecurity_crs.conf\n\n\n\u5099\u8003\uff1aFalse Positive\u306e\u554f\u984c\n\u305d\u306e\u307e\u307e\u30eb\u30fc\u30eb\u9069\u7528\u3057\u305f\u3089\u3001AWS\u306eELB\u304b\u3089\u306e\u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u3059\u3089\u901a\u3089\u306a\u3044\n\u307e\u305a\u3001modsecurity_crs.conf\n\u3067\nSecRuleEngine DetectionOnly\n\u3092\u8a2d\u5b9a\u3057\u3066\u304b\u3089\u3001\n/var/log/modsec_audit.log\n\u3092\u78ba\u8a8d\u3001\u30eb\u30fc\u30eb\u3092\u8abf\u6574\n\nnginx\u8d77\u52d5\u30b9\u30af\u30ea\u30d7\u30c8\n#!/bin/sh                                                                                                                                                                  \n#                                                                                                                                                                          \n# nginx - this script starts and stops the nginx daemon                                                                                                                    \n#                                                                                                                                                                          \n# chkconfig:   - 85 15                                                                                                                                                     \n# description:  Nginx is an HTTP(S) server, HTTP(S) reverse \\                                                                                                              \n#               proxy and IMAP/POP3 proxy server                                                                                                                           \n# processname: nginx                                                                                                                                                       \n\n# Source function library.                                                                                                                                                 \n. /etc/rc.d/init.d/functions\n\n# Source networking configuration.                                                                                                                                         \n. /etc/sysconfig/network\n\n# Check that networking is up.                                                                                                                                             \n[ \"$NETWORKING\" = \"no\" ] && exit 0\n\nnginx=\"/usr/local/nginx/sbin/nginx\"\nprog=$(basename $nginx)\n\nNGINX_CONF_FILE=\"/usr/local/nginx/conf/nginx.conf\"\n\nlockfile=/usr/local/nginx/logs/nginx.lock\n\nstart() {\n    [ -x $nginx ] || exit 5\n    [ -f $NGINX_CONF_FILE ] || exit 6\n    echo -n $\"Starting $prog: \"\n    daemon $nginx -c $NGINX_CONF_FILE\n    retval=$?\n    echo\n    [ $retval -eq 0 ] && touch $lockfile\n    return $retval\n}\n\nstop() {\n    echo -n $\"Stopping $prog: \"\n    killproc $prog -QUIT\n    retval=$?\n    echo\n    [ $retval -eq 0 ] && rm -f $lockfile\n    return $retval\n}\n\nrestart() {\n    configtest || return $?\n    stop\n    sleep 1\n    start\n}\n\nreload() {\n    configtest || return $?\n    echo -n $\"Reloading $prog: \"\n    killproc $nginx -HUP\n    RETVAL=$?\n    echo\n}\n\nforce_reload() {\n    restart\n}\n\nconfigtest() {\n  $nginx -t -c $NGINX_CONF_FILE\n}\n\nrh_status() {\n    status $prog\n}\n\nrh_status_q() {\n    rh_status >/dev/null 2>&1\n}\n\ncase \"$1\" in\n    start)\n        rh_status_q && exit 0\n        $1\n        ;;\n    stop)\n        rh_status_q || exit 0\n        $1\n        ;;\n    restart|configtest)\n        $1\n        ;;\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n    ;;\n    condrestart|try-restart)\n        rh_status_q || exit 0\n            ;;\n    *)\n        echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\"\n        exit 2\nesac\n\n\n\u53c2\u8003\nhttp://qiita.com/albatross/items/5b9034c80f9c49519442\nhttp://www.happytrap.jp/blogs/2012/02/23/8243/\nhttps://www.modsecurity.org/\nhttps://github.com/SpiderLabs/owasp-modsecurity-crs\nhttps://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project\nhttps://www.trustwave.com/Resources/SpiderLabs-Blog/ModSecurity-Advanced-Topic-of-the-Week--(Updated)-Exception-Handling/\nhttp://eterhost.net/knowledgebase.php?action=displayarticle&id=7\n\n \n### 1. nginx \u30e6\u30fc\u30b6\u4f5c\u6210\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n    useradd -s /sbin/nologin -d /usr/local/nginx -M nginx\n    yum install -y gcc make automake autoconf libtool git\n    yum install -y pcre pcre-devel libxml2 libxml2-devel curl curl-devel httpd-devel\n    yum install -y openssl openssl-devel\n    yum install zlib zlib-devel\n\n### 2. modsecurity\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n    cd /usr/local/src/\n    yum install git -y\n    git clone https://github.com/SpiderLabs/ModSecurity.git mod_security\n    cd mod_security/\n\n    ./autogen.sh\n\nconfigure.ac\u3092\u4fee\u6b63\n\nAM_PROG_CC_C_O\n\u3092\u8ffd\u52a0\n\n    ./autogen.sh\n\n\n    CFLAGS=\"-DDEFAULT_USER=\\\\\\\"nginx\\\\\\\" -DDEFAULT_GROUP=\\\\\\\"nginx\\\\\\\"\" CPPFLAGS=\"-I/usr/include/apr-1 -I/usr/include/httpd\" ./configure --disable-apache2-module --disable-mlogc --enable-standalone-module\n    make\n    make install\n\n### 3. nginx\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n    cd /usr/local/src/\n    wget http://nginx.org/download/nginx-1.8.0.tar.gz\n    tar xzvf nginx-1.8.0.tar.gz \n    cd nginx-1.8.0\n    ./configure --user=nginx --group=nginx --add-module=../mod_security/nginx/modsecurity --with-http_ssl_module --with-http_realip_module --with-cc-opt=\"-I/usr/include/apr-1 -I/usr/include/httpd\" --with-ld-opt=\"-lapr-1 -laprutil-1\"\n    make\n    make install\n\n    vi /etc/init.d/nginx\n    chmod +x /etc/init.d/nginx \n    chkconfig --add nginx\n    chkconfig nginx on\n    chkconfig --list\n\n\n\n### 4. CRS\u30eb\u30fc\u30eb\u8ffd\u52a0\n\n    cd  /usr/local/etc/\n    mkdir modsecurity\n    cd modsecurity\n    git clone https://github.com/SpiderLabs/owasp-modsecurity-crs crs\n\n    ln -s crs/base_rules/modsecurity_35_bad_robots.data .\n    ln -s crs/base_rules/modsecurity_40_generic_attacks.data .\n    ln -s crs/base_rules/modsecurity_35_scanners.data .\n    ln -s crs/base_rules/modsecurity_50_outbound.data .\n    ln -s crs/base_rules/modsecurity_50_outbound_malware.data .\n    \n    cp /usr/local/src/mod_security/modsecurity.conf-recommended modsecurity.conf\n    \n### 5. \u30eb\u30fc\u30eb\u66f4\u65b0\n\n    cd /usr/local/etc/modsecurity/crs\n    git pull\n    cd ..\n    \n    cat crs/modsecurity_crs_10_setup.conf.example crs/base_rules/*.conf > modsecurity_crs.conf\n\n\n### \u5099\u8003\uff1aFalse Positive\u306e\u554f\u984c\n\n\u305d\u306e\u307e\u307e\u30eb\u30fc\u30eb\u9069\u7528\u3057\u305f\u3089\u3001AWS\u306eELB\u304b\u3089\u306e\u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u3059\u3089\u901a\u3089\u306a\u3044\n\u307e\u305a\u3001modsecurity_crs.conf\n\u3067\nSecRuleEngine DetectionOnly\n\u3092\u8a2d\u5b9a\u3057\u3066\u304b\u3089\u3001\n/var/log/modsec_audit.log\n\u3092\u78ba\u8a8d\u3001\u30eb\u30fc\u30eb\u3092\u8abf\u6574\n\n\n\n### nginx\u8d77\u52d5\u30b9\u30af\u30ea\u30d7\u30c8\n\n```\n#!/bin/sh                                                                                                                                                                  \n#                                                                                                                                                                          \n# nginx - this script starts and stops the nginx daemon                                                                                                                    \n#                                                                                                                                                                          \n# chkconfig:   - 85 15                                                                                                                                                     \n# description:  Nginx is an HTTP(S) server, HTTP(S) reverse \\                                                                                                              \n#               proxy and IMAP/POP3 proxy server                                                                                                                           \n# processname: nginx                                                                                                                                                       \n\n# Source function library.                                                                                                                                                 \n. /etc/rc.d/init.d/functions\n\n# Source networking configuration.                                                                                                                                         \n. /etc/sysconfig/network\n\n# Check that networking is up.                                                                                                                                             \n[ \"$NETWORKING\" = \"no\" ] && exit 0\n\nnginx=\"/usr/local/nginx/sbin/nginx\"\nprog=$(basename $nginx)\n\nNGINX_CONF_FILE=\"/usr/local/nginx/conf/nginx.conf\"\n\nlockfile=/usr/local/nginx/logs/nginx.lock\n\nstart() {\n    [ -x $nginx ] || exit 5\n    [ -f $NGINX_CONF_FILE ] || exit 6\n    echo -n $\"Starting $prog: \"\n    daemon $nginx -c $NGINX_CONF_FILE\n    retval=$?\n    echo\n    [ $retval -eq 0 ] && touch $lockfile\n    return $retval\n}\n\nstop() {\n    echo -n $\"Stopping $prog: \"\n    killproc $prog -QUIT\n    retval=$?\n    echo\n    [ $retval -eq 0 ] && rm -f $lockfile\n    return $retval\n}\n\nrestart() {\n    configtest || return $?\n    stop\n    sleep 1\n    start\n}\n\nreload() {\n    configtest || return $?\n    echo -n $\"Reloading $prog: \"\n    killproc $nginx -HUP\n    RETVAL=$?\n    echo\n}\n\nforce_reload() {\n    restart\n}\n\nconfigtest() {\n  $nginx -t -c $NGINX_CONF_FILE\n}\n\nrh_status() {\n    status $prog\n}\n\nrh_status_q() {\n    rh_status >/dev/null 2>&1\n}\n\ncase \"$1\" in\n    start)\n        rh_status_q && exit 0\n        $1\n        ;;\n    stop)\n        rh_status_q || exit 0\n        $1\n        ;;\n    restart|configtest)\n        $1\n        ;;\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n    force-reload)\n        force_reload\n        ;;\n    status)\n        rh_status\n    ;;\n    condrestart|try-restart)\n        rh_status_q || exit 0\n            ;;\n    *)\n        echo $\"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}\"\n        exit 2\nesac\n```\n\n### \u53c2\u8003\n\nhttp://qiita.com/albatross/items/5b9034c80f9c49519442\nhttp://www.happytrap.jp/blogs/2012/02/23/8243/\n\nhttps://www.modsecurity.org/\nhttps://github.com/SpiderLabs/owasp-modsecurity-crs\nhttps://www.owasp.org/index.php/Category:OWASP_ModSecurity_Core_Rule_Set_Project\nhttps://www.trustwave.com/Resources/SpiderLabs-Blog/ModSecurity-Advanced-Topic-of-the-Week--(Updated)-Exception-Handling/\nhttp://eterhost.net/knowledgebase.php?action=displayarticle&id=7\n", "tags": ["nginx", "Security", "waf", "OWASP_CRS"]}