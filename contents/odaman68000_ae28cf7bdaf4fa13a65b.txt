{"tags": ["Python", "OpenCV", "numpy"], "context": " More than 1 year has passed since last update.\n\n\u521d\u3081\u306b\npython\u3067\u3001\u7279\u306bOpenCV\u306e\u652f\u63f4\u306b\u3088\u308b\u3068\u3053\u308d\u304c\u5927\u304d\u3044\u3067\u3059\u304c\u3001\u30d3\u30c7\u30aa\u30ab\u30e1\u30e9\u306e\u6620\u50cf\u304b\u3089\u8d64\u8272\u306e\u7269\u4f53\u3092\u8a8d\u8b58\u3057\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u8a18\u4e8b\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nOpenCV\u3092\u4f7f\u3046\u95a2\u4fc2\u4e0a\u3001\u4f55\u3082python\u3058\u3083\u306a\u304f\u3066\u3082C/C++\u3068\u304b\u3067\u3082\u5341\u5206\u53ef\u80fd\u306a\u306e\u3067\u3059\u304c\u3001python\u3067\u4f5c\u308b\u3068\u30d3\u30c3\u30af\u30ea\u3059\u308b\u307b\u3069\u5c11\u306a\u3044\u4f5c\u696d\u91cf\u3067\u66f8\u3051\u308b\u3068\u3044\u3046\u304b\u3001\u3084\u3063\u3071\u308a\u51c4\u3044\u306a\u3001\u3068\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u8a18\u4e8b\u306b\u3057\u3066\u307f\u308b\u306e\u3067\u3057\u305f\uff57\n\n\u8d64\u3044\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u306b\u306f\uff1f\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306a\u3093\u3066\u8a00\u8449\u3092\u4f7f\u3046\u3068\u30ab\u30c3\u30b3\u30a4\u30a4\u306e\u3067\u3059\u304c\u3001\u305d\u3053\u307e\u3067\u9ad8\u5c1a\u306a\u3082\u306e\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002\u8d64\u3044\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u4ed5\u7d44\u307f\u306b\u3061\u3087\u3063\u3068\u89e6\u308c\u3066\u304a\u3053\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u8272\u306e\u8868\u73fe\u65b9\u6cd5\u3068\u3057\u3066\u5b9a\u756a\u30c9\u30b3\u30ed\u3068\u3057\u3066\u3001RGB\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nR, G, B\u305d\u308c\u305e\u308c\u306e\u660e\u308b\u3055\u30920\u301c255\u3067\u8868\u73fe\u3059\u308b\u3053\u3068\u3067\u300124bit\u30ab\u30e9\u30fc\u306b\u306a\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3067\u306f\u3001\u3053\u306eRGB\u3092\u4f7f\u3063\u3066\u8d64\u8272\u3092\u5224\u5b9a\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\u5b9f\u306f\u7d50\u69cb\u96e3\u3057\u3044\u3093\u3067\u3059\u306d\u3002\u4f8b\u3048\u3070\u3001R=255,G=0,B=0\u306f\u3001\u8ab0\u304c\u4f55\u3068\u8a00\u304a\u3046\u3068\u8d64\u8272\u3067\u3057\u3087\u3046\u3002\u3057\u304b\u3057\u3001R=10,G=0,B=0\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f \u3053\u308c\u3063\u3066\u3001\u8d64\u3068\u3044\u3046\u3088\u308a\u9ed2\u3058\u3083\u306a\u3044\uff1f\u306a\u3093\u3066\u611f\u3058\u3082\u3057\u3066\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u3001RGB\u3067\u306f\u8272\u5408\u3044\u306e\u5224\u5b9a\u304c\u96e3\u3057\u3044\u306e\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001HSV\u8272\u7a7a\u9593\u3068\u3044\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4f7f\u3044\u307e\u3059\u3002(\u8a73\u3057\u304f\u306fWikipedia\u307e\u3067)\n\u3067\u306f\u3001\u95a2\u6570\u3092\u4f5c\u3063\u3066\u3001HSV\u8272\u7a7a\u9593\u3078\u306e\u5909\u63db\u3092\u884c\u3044\u307e\u3059\u3002OpenCV, numpy\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u306f\u5b9a\u756a\u3067\u3059\u3002\nimport cv2\nimport numpy as np\n\ndef find_rect_of_target_color(image):\n  hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV_FULL)\n  h = hsv[:, :, 0]\n  s = hsv[:, :, 1]\n\n\u3053\u3053\u307e\u3067\u3067\u3001\u753b\u50cf\u306eH\u6210\u5206\u3001S\u6210\u5206\u304c\u53d6\u308a\u51fa\u305b\u307e\u3057\u305f\u3002\nH\u6210\u5206\u306f\u3001Hue(\u8272\u76f8)\u3067\u3059\u3002\u5b9f\u969b\u306f\u3001360\u6bb5\u968e\u3067\u8d64\u2192\u7dd1\u2192\u9752\u2192\u8d64\u3068\u5186\u306e\u3088\u3046\u306b\u4e00\u5468\u3057\u307e\u3059\u3002\n\u5192\u982d\u306e\u51fa\u3060\u3057\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001RGB\u3067\u306f\u8272\u76f8\u306e\u5224\u5b9a\u306f\u96e3\u3057\u3044\u306e\u3067\u3059\u304c\u3001HSV\u306b\u5909\u63db\u3057\u3066\u3057\u307e\u3048\u3070\u3001H\u3092\u898b\u308b\u3053\u3068\u3067\u8272\u76f8\u306b\u3088\u308b\u5224\u5b9a\u304c\u3068\u3066\u3082\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u3002\nOpenCV\u306e\u5834\u5408\u3001H,S,V\u3068\u3082\u306b256\u6bb5\u968e\u3067\u4fdd\u6301\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u306e\u3067(COLOR_BGR2HSV_FULL\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408)\u3001\u672c\u6765\u306eH\u306f360\u6bb5\u968e\u3067\u3042\u308b\u3079\u304d\u3068\u3053\u308d\u304c256\u6bb5\u968e\u306b\u4e38\u3081\u3089\u308c\u3066\u307e\u3059\u3002\u305d\u306e\u8fba\u3092\u8a08\u7b97\u306b\u5165\u308c\u3066\u9032\u307f\u307e\u3059\u3002\nHue(\u8272\u76f8)\u3067\u8d64\u3068\u8a00\u3048\u3070\u3001\u7d2b\u3063\u307d\u3044\u7bc4\u56f2\u307e\u3067\u542b\u3081\u308c\u3070 280\u301c28\u00b0\u304f\u3089\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u3092256\u6bb5\u968e\u306b\u8a08\u7b97\u3057\u76f4\u3059\u3068\u3001200\u301c20\u304f\u3089\u3044\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001H\u306e\u5024\u304c (H < 20 | H > 200) \u306e\u7bc4\u56f2\u304c\u8d64\u8272\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u8272\u306e\u6fc3\u3055\u306b\u3082\u7740\u76ee\u3057\u307e\u3057\u3087\u3046\u3002\nHue(\u8272\u76f8)\u304c\u8d64\u3067\u3082\u3001\u8272\u306e\u6fc3\u3055\u304c\u5341\u5206\u8584\u3051\u308c\u3070\u3001\u767d\u3084\u9ed2\u306b\u8fd1\u3065\u3044\u3066\u3044\u304d\u307e\u3059\u3002\nS\u6210\u5206\u3001Saturation(\u5f69\u5ea6)\u3082\u540c\u6642\u306b\u5224\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u666e\u901a\u306b0\u301c255\u306e\u7bc4\u56f2\u3067\u3001\u6570\u5024\u304c\u5927\u304d\u304f\u306a\u308c\u3070\u306a\u308b\u307b\u3069\u300c\u9bae\u3084\u304b\u300d\u3068\u3044\u3046\u4e8b\u3092\u793a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u8d64\u8272\u306e\u5224\u5b9a\u306a\u306e\u3067\u3001S\u306e\u5024\u304c (S > 128) \u3067\u3042\u308b\u4e8b\u3092\u6761\u4ef6\u3068\u3057\u3066\u4ed8\u3051\u52a0\u3048\u307e\u3057\u3087\u3046\u3002\n\u3053\u308c\u3089\u3092\u7e8f\u3081\u3066 numpy \u7684\u306b\u66f8\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n  mask = np.zeros(h.shape, dtype=np.uint8)\n  mask[((h < 20) | (h > 200)) & (s > 128)] = 255\n\n\u3053\u308c\u3067\u3001\u8d64\u3044\u3068\u3053\u308d\u3092\u793a\u3059\u30de\u30b9\u30af\u30c7\u30fc\u30bf\u304c\u3067\u304d\u307e\u3057\u305f\u3002(\u8d64\u306f255\u3001\u975e\u8d64\u306f0)\n\u3067\u3082\u3001\u3053\u308c\u3067\u7d42\u308f\u308a\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u306e\u30de\u30b9\u30af\u30c7\u30fc\u30bf\u306f\u3001\u753b\u50cf\u306e\u300c\u30c9\u30c3\u30c8\u304c\u8d64\u3063\u307d\u3044\u3068\u3053\u308d\u300d\u3092\u793a\u3057\u3066\u3044\u308b\u306b\u904e\u304e\u307e\u305b\u3093\u3002\n\n\u30de\u30b9\u30af\u30c7\u30fc\u30bf\u3092\u89e3\u6790\u3059\u308b\n\u3084\u3063\u3071\u308a\u3001\u8d64\u3044\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u4ee5\u4e0a\u3001\u3042\u308b\u7a0b\u5ea6\u306e\u5927\u304d\u3055\u306e\u30c9\u30c3\u30c8\u306e\u584a\u3092\u8a8d\u8b58\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u4eca\u306e\u307e\u307e\u3067\u306f\u305f\u3060\u306e\u70b9\u7fa4\u3067\u3001\u7e8f\u307e\u308a\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\u3053\u306e\u3001\u305f\u3060\u306e\u70b9\u306b\u904e\u304e\u306a\u3044\u30c7\u30fc\u30bf\u3092\u584a\u3068\u3057\u3066\u8a8d\u8b58\u3059\u308b\u305f\u3081\u3001\u307e\u305a\u306f\u300c\u8f2a\u90ed\u300d\u3068\u3044\u3046\u3082\u306e\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u8f2a\u90ed\u304c\u3067\u304d\u308c\u3070\u3001\u305d\u306e\u8f2a\u90ed\u306b\u56f2\u307e\u308c\u305f\u584a\u304c\u308f\u304b\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n  contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n\nOpenCV\u3068python\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u5049\u5927\u3067\u3059\u3002\n\u305f\u3063\u305f\u306e1\u884c\u3067\u66f8\u3051\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3067\u3001\u6b21\u306f contours \u306e\u5185\u5bb9\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u5b9f\u306f\u3001\u3059\u3067\u306b\u8f2a\u90ed\u3092\u4f5c\u308b\u904e\u7a0b\u3067\u3001\u584a\u3054\u3068\u306b\u914d\u5217\u5316\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n  rects = []\n  for contour in contours:\n    approx = cv2.convexHull(contour)\n    rect = cv2.boundingRect(approx)\n    rects.append(rect)    \n\n\u307e\u305f\u540c\u3058\u3053\u3068\u66f8\u304d\u307e\u3059\u304c\u3001OpenCV\u3068python\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u5049\u5927\u3067\u3059\u3002\u5b9f\u306b\u7c21\u6f54\u306b\u66f8\u3051\u307e\u3059\u3002\ncv2.convexHull()\u306f\u3001\u51f9\u51f8\u306e\u3042\u308b\u584a\u3092\u5185\u5305\u3059\u308b\u3001\u51f8\u72b6\u306e\u5f62\u72b6\u3092\u7b97\u51fa\u3059\u308b\u95a2\u6570\u3067\u3059\u3002contour\u306b\u306f\u8f2a\u90ed\u3092\u6210\u3059\u30c9\u30c3\u30c8\u60c5\u5831\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3042\u304f\u307e\u3067\u3082\u8f2a\u90ed\u3067\u3059\u306e\u3067\u975e\u5e38\u306b\u8907\u96d1\u306a\u5f62\u72b6\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3001\u30ea\u30a2\u30b9\u5f0f\u6d77\u5cb8\u306e\u3088\u3046\u306a\u3002\u3053\u308c\u3092\u3001\u30de\u30eb\u30c3\u3068\u5305\u307f\u8fbc\u3080\u888b\u306e\u3088\u3046\u306a2D\u30dd\u30ea\u30b4\u30f3\u306b\u3057\u3066\u3057\u307e\u3046\u306e\u304c\u3001cv2.convexHull()\u3067\u3059\u3002\u5fa9\u5e30\u5024\u3067\u3042\u308bapprox\u306f\u3001(X, Y)\u306e\u914d\u5217\u3067\u3059\u3002\n\u305d\u3057\u3066\u3001\u888b\u72b6\u306b\u306a\u3063\u305f\u30dd\u30ea\u30b4\u30f3\u304c\u30b9\u30c3\u30dd\u30ea\u5165\u308b\u77e9\u5f62\u3092\u8a08\u7b97\u3059\u308b\u306e\u304c\u3001cv2.boundingRect()\u3067\u3059\u3002\u3053\u308c\u306f\u3001(x, y, width, height)\u3068\u3044\u3046\u5f62\u5f0f\u306e\u77e9\u5f62\u60c5\u5831\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3067\u3001\u70b9\u7fa4\u306e\u60c5\u5831\u304c\u3001\u584a\u3054\u3068\u306e\u77e9\u5f62\u306e\u30ea\u30b9\u30c8\u306b\u307e\u3068\u307e\u308a\u307e\u3057\u305f\u3002\n\u3055\u3066\u3001\u9806\u3092\u8ffd\u3063\u3066\u30d0\u30e9\u30d0\u30e9\u306b\u66f8\u3044\u305f\u3082\u306e\u3092\u4e00\u65e6\u7e4b\u3052\u3066\u307f\u307e\u3059\u3002\nimport cv2\nimport numpy as np\n\ndef find_rect_of_target_color(image):\n  hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV_FULL)\n  h = hsv[:, :, 0]\n  s = hsv[:, :, 1]\n  mask = np.zeros(h.shape, dtype=np.uint8)\n  mask[((h < 20) | (h > 200)) & (s > 128)] = 255\n  contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n  rects = []\n  for contour in contours:\n    approx = cv2.convexHull(contour)\n    rect = cv2.boundingRect(approx)\n    rects.append(np.array(rect))\n  return rects\n\n\u305f\u3063\u305f\u3053\u308c\u3060\u3051\u3002\u305f\u3063\u305f\u3053\u308c\u3060\u3051\u3067\u3001\u4e0e\u3048\u305f\u753b\u50cf\u304b\u3089\u8d64\u3044\u7b87\u6240\u3092\u7279\u5b9a\u3059\u308b\u77e9\u5f62\u306e\u914d\u5217\u3092\u8fd4\u3059\u95a2\u6570\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u30d3\u30c7\u30aa\u30ab\u30e1\u30e9\u304b\u3089\u306e\u6620\u50cf\u3092\u89e3\u6790\u3059\u308b\n\u3053\u3053\u307e\u3067\u4f5c\u3063\u305f\u3089\u3001\u305d\u306e\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u305f\u3044\u3067\u3059\u306d\u3002\n\u30d3\u30c7\u30aa\u30ab\u30e1\u30e9\u306e\u6620\u50cf\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u51e6\u7406\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nif __name__ == \"__main__\":\n  capture = cv2.VideoCapture()\n  while cv2.waitKey(30) < 0:\n    _, frame = capture.read()\n    rects = find_rect_of_target_color(frame)\n    for rect in rects:\n      cv2.rectangle(frame, tuple(rect[0:2]), tuple(rect[0:2] + rect[2:4]), (0, 0, 255), thickness=2)\n    cv2.imshow('red', frame)\n  capture.release()\n  cv2.destroyAllWindows()\n\n\u3069\u3046\u3067\u3059\u304b\uff1f \u601d\u3063\u305f\u901a\u308a\u306e\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u304b\uff1f\n\u30ef\u30bf\u30af\u30b7\u306e\u4e88\u60f3\u3067\u3059\u304c\u3001\u3044\u307e\u3044\u3061\u306a\u7d50\u679c\u3060\u3063\u305f\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u306f\u3001\u5927\u304d\u306a\u77e9\u5f62\u3082\u5c0f\u3055\u306a\u77e9\u5f62\u3082\u3001\u5168\u90e8\u3001\u300c\u8d64\u3044\u7269\u4f53\u300d\u3068\u3057\u3066\u8a8d\u8b58\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u30ce\u30a4\u30ba\u306e\u3088\u3046\u306a\u3082\u306e\u307e\u3067\u300c\u7269\u4f53\u300d\u3068\u6349\u3048\u308b\u306e\u306f\u30ca\u30f3\u30bb\u30f3\u30b9\u3067\u3059\u3002\u3042\u308b\u7a0b\u5ea6\u306e\u5927\u304d\u3055\u3068\u3044\u3046\u3053\u3068\u3067\u9593\u5f15\u304d\u307e\u3057\u3087\u3046\u3002\n\u3053\u3053\u3067\u3001\u3061\u3087\u3063\u3068\u304a\u52e7\u3081\u306f\u3001\u6700\u5927\u306e\u5927\u304d\u3055\u306e\u77e9\u5f62\u3060\u3051\u3092\u300c\u8d64\u3044\u7269\u4f53\u300d\u3068\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u3059\u3002\n\u8d64\u3044\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u3001\u624b\u8fd1\u306b\u6709\u3063\u305f\u8d64\u3044\u7269\u4f53\u3092\u30ab\u30e1\u30e9\u306e\u524d\u306b\u304b\u3056\u3057\u307e\u3057\u305f\u306d\uff1f \u3064\u307e\u308a\u3001\u30bd\u30ec\u3092\u691c\u51fa\u3057\u305f\u304b\u3063\u305f\u308f\u3051\u3067\u3059\u3002\u5f80\u3005\u306b\u3057\u3066\u3001\u691c\u51fa\u3057\u3066\u6b32\u3057\u3044\u3082\u306e\u306f\u4e00\u756a\u5927\u304d\u304f\u5199\u3059\u306e\u3067\u3059\u3002\n\u5f97\u3089\u308c\u305f\u77e9\u5f62\u30ea\u30b9\u30c8\u304b\u3089\u4e00\u756a\u9762\u7a4d\u306e\u5927\u304d\u3044\u3082\u306e\u3092\u63a2\u7d22\u3059\u308b\u3088\u3046\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\nif __name__ == \"__main__\":\n  capture = cv2.VideoCapture()\n  while cv2.waitKey(30) < 0:\n    _, frame = capture.read()\n    rects = find_rect_of_target_color(frame)\n    if len(rects) > 0:\n      rect = max(rects, key=(lambda x: x[2] * x[3]))\n      cv2.rectangle(frame, tuple(rect[0:2]), tuple(rect[0:2] + rect[2:4]), (0, 0, 255), thickness=2)\n    cv2.imshow('red', frame)\n  capture.release()\n  cv2.destroyAllWindows()\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3067\u3059\u3002\npython + OpenCV\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u3068\u3066\u3082\u4fbf\u5229\u3060\u306a\u3041\u3068\u611f\u5fc3\u3057\u307e\u3059\u3002\n##\u521d\u3081\u306b\npython\u3067\u3001\u7279\u306bOpenCV\u306e\u652f\u63f4\u306b\u3088\u308b\u3068\u3053\u308d\u304c\u5927\u304d\u3044\u3067\u3059\u304c\u3001\u30d3\u30c7\u30aa\u30ab\u30e1\u30e9\u306e\u6620\u50cf\u304b\u3089\u8d64\u8272\u306e\u7269\u4f53\u3092\u8a8d\u8b58\u3057\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u8a18\u4e8b\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nOpenCV\u3092\u4f7f\u3046\u95a2\u4fc2\u4e0a\u3001\u4f55\u3082python\u3058\u3083\u306a\u304f\u3066\u3082C/C++\u3068\u304b\u3067\u3082\u5341\u5206\u53ef\u80fd\u306a\u306e\u3067\u3059\u304c\u3001python\u3067\u4f5c\u308b\u3068\u30d3\u30c3\u30af\u30ea\u3059\u308b\u307b\u3069\u5c11\u306a\u3044\u4f5c\u696d\u91cf\u3067\u66f8\u3051\u308b\u3068\u3044\u3046\u304b\u3001\u3084\u3063\u3071\u308a\u51c4\u3044\u306a\u3001\u3068\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u8a18\u4e8b\u306b\u3057\u3066\u307f\u308b\u306e\u3067\u3057\u305f\uff57\n\n##\u8d64\u3044\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u306b\u306f\uff1f\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306a\u3093\u3066\u8a00\u8449\u3092\u4f7f\u3046\u3068\u30ab\u30c3\u30b3\u30a4\u30a4\u306e\u3067\u3059\u304c\u3001\u305d\u3053\u307e\u3067\u9ad8\u5c1a\u306a\u3082\u306e\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u3002\u8d64\u3044\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u4ed5\u7d44\u307f\u306b\u3061\u3087\u3063\u3068\u89e6\u308c\u3066\u304a\u3053\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u8272\u306e\u8868\u73fe\u65b9\u6cd5\u3068\u3057\u3066\u5b9a\u756a\u30c9\u30b3\u30ed\u3068\u3057\u3066\u3001RGB\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nR, G, B\u305d\u308c\u305e\u308c\u306e\u660e\u308b\u3055\u30920\u301c255\u3067\u8868\u73fe\u3059\u308b\u3053\u3068\u3067\u300124bit\u30ab\u30e9\u30fc\u306b\u306a\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3067\u306f\u3001\u3053\u306eRGB\u3092\u4f7f\u3063\u3066\u8d64\u8272\u3092\u5224\u5b9a\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\u5b9f\u306f\u7d50\u69cb\u96e3\u3057\u3044\u3093\u3067\u3059\u306d\u3002\u4f8b\u3048\u3070\u3001R=255,G=0,B=0\u306f\u3001\u8ab0\u304c\u4f55\u3068\u8a00\u304a\u3046\u3068\u8d64\u8272\u3067\u3057\u3087\u3046\u3002\u3057\u304b\u3057\u3001R=10,G=0,B=0\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\uff1f \u3053\u308c\u3063\u3066\u3001\u8d64\u3068\u3044\u3046\u3088\u308a\u9ed2\u3058\u3083\u306a\u3044\uff1f\u306a\u3093\u3066\u611f\u3058\u3082\u3057\u3066\u304d\u307e\u3059\u3002\u3064\u307e\u308a\u3001RGB\u3067\u306f\u8272\u5408\u3044\u306e\u5224\u5b9a\u304c\u96e3\u3057\u3044\u306e\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u3001HSV\u8272\u7a7a\u9593\u3068\u3044\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4f7f\u3044\u307e\u3059\u3002\\(\u8a73\u3057\u304f\u306f[Wikipedia](https://ja.wikipedia.org/wiki/HSV\u8272\u7a7a\u9593)\u307e\u3067\\)\n\n\u3067\u306f\u3001\u95a2\u6570\u3092\u4f5c\u3063\u3066\u3001HSV\u8272\u7a7a\u9593\u3078\u306e\u5909\u63db\u3092\u884c\u3044\u307e\u3059\u3002OpenCV, numpy\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u306f\u5b9a\u756a\u3067\u3059\u3002\n\n```py\nimport cv2\nimport numpy as np\n\ndef find_rect_of_target_color(image):\n  hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV_FULL)\n  h = hsv[:, :, 0]\n  s = hsv[:, :, 1]\n```\n\n\u3053\u3053\u307e\u3067\u3067\u3001\u753b\u50cf\u306eH\u6210\u5206\u3001S\u6210\u5206\u304c\u53d6\u308a\u51fa\u305b\u307e\u3057\u305f\u3002\nH\u6210\u5206\u306f\u3001Hue(\u8272\u76f8)\u3067\u3059\u3002\u5b9f\u969b\u306f\u3001360\u6bb5\u968e\u3067\u8d64\u2192\u7dd1\u2192\u9752\u2192\u8d64\u3068\u5186\u306e\u3088\u3046\u306b\u4e00\u5468\u3057\u307e\u3059\u3002\n\u5192\u982d\u306e\u51fa\u3060\u3057\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001RGB\u3067\u306f\u8272\u76f8\u306e\u5224\u5b9a\u306f\u96e3\u3057\u3044\u306e\u3067\u3059\u304c\u3001HSV\u306b\u5909\u63db\u3057\u3066\u3057\u307e\u3048\u3070\u3001H\u3092\u898b\u308b\u3053\u3068\u3067\u8272\u76f8\u306b\u3088\u308b\u5224\u5b9a\u304c\u3068\u3066\u3082\u7c21\u5358\u306b\u306a\u308a\u307e\u3059\u3002\n\nOpenCV\u306e\u5834\u5408\u3001H,S,V\u3068\u3082\u306b256\u6bb5\u968e\u3067\u4fdd\u6301\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u306e\u3067(`COLOR_BGR2HSV_FULL`\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408)\u3001\u672c\u6765\u306eH\u306f360\u6bb5\u968e\u3067\u3042\u308b\u3079\u304d\u3068\u3053\u308d\u304c256\u6bb5\u968e\u306b\u4e38\u3081\u3089\u308c\u3066\u307e\u3059\u3002\u305d\u306e\u8fba\u3092\u8a08\u7b97\u306b\u5165\u308c\u3066\u9032\u307f\u307e\u3059\u3002\nHue(\u8272\u76f8)\u3067\u8d64\u3068\u8a00\u3048\u3070\u3001\u7d2b\u3063\u307d\u3044\u7bc4\u56f2\u307e\u3067\u542b\u3081\u308c\u3070 280\u301c28\u00b0\u304f\u3089\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u3092256\u6bb5\u968e\u306b\u8a08\u7b97\u3057\u76f4\u3059\u3068\u3001200\u301c20\u304f\u3089\u3044\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001H\u306e\u5024\u304c (H < 20 | H > 200) \u306e\u7bc4\u56f2\u304c\u8d64\u8272\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u8272\u306e\u6fc3\u3055\u306b\u3082\u7740\u76ee\u3057\u307e\u3057\u3087\u3046\u3002\nHue(\u8272\u76f8)\u304c\u8d64\u3067\u3082\u3001\u8272\u306e\u6fc3\u3055\u304c\u5341\u5206\u8584\u3051\u308c\u3070\u3001\u767d\u3084\u9ed2\u306b\u8fd1\u3065\u3044\u3066\u3044\u304d\u307e\u3059\u3002\nS\u6210\u5206\u3001Saturation(\u5f69\u5ea6)\u3082\u540c\u6642\u306b\u5224\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u666e\u901a\u306b0\u301c255\u306e\u7bc4\u56f2\u3067\u3001\u6570\u5024\u304c\u5927\u304d\u304f\u306a\u308c\u3070\u306a\u308b\u307b\u3069\u300c\u9bae\u3084\u304b\u300d\u3068\u3044\u3046\u4e8b\u3092\u793a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u8d64\u8272\u306e\u5224\u5b9a\u306a\u306e\u3067\u3001S\u306e\u5024\u304c (S > 128) \u3067\u3042\u308b\u4e8b\u3092\u6761\u4ef6\u3068\u3057\u3066\u4ed8\u3051\u52a0\u3048\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u308c\u3089\u3092\u7e8f\u3081\u3066 numpy \u7684\u306b\u66f8\u304f\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py\n  mask = np.zeros(h.shape, dtype=np.uint8)\n  mask[((h < 20) | (h > 200)) & (s > 128)] = 255\n```\n\n\u3053\u308c\u3067\u3001\u8d64\u3044\u3068\u3053\u308d\u3092\u793a\u3059\u30de\u30b9\u30af\u30c7\u30fc\u30bf\u304c\u3067\u304d\u307e\u3057\u305f\u3002(\u8d64\u306f255\u3001\u975e\u8d64\u306f0)\n\u3067\u3082\u3001\u3053\u308c\u3067\u7d42\u308f\u308a\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u306e\u30de\u30b9\u30af\u30c7\u30fc\u30bf\u306f\u3001\u753b\u50cf\u306e\u300c\u30c9\u30c3\u30c8\u304c\u8d64\u3063\u307d\u3044\u3068\u3053\u308d\u300d\u3092\u793a\u3057\u3066\u3044\u308b\u306b\u904e\u304e\u307e\u305b\u3093\u3002\n\n##\u30de\u30b9\u30af\u30c7\u30fc\u30bf\u3092\u89e3\u6790\u3059\u308b\n\u3084\u3063\u3071\u308a\u3001\u8d64\u3044\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u4ee5\u4e0a\u3001\u3042\u308b\u7a0b\u5ea6\u306e\u5927\u304d\u3055\u306e\u30c9\u30c3\u30c8\u306e\u584a\u3092\u8a8d\u8b58\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\u4eca\u306e\u307e\u307e\u3067\u306f\u305f\u3060\u306e\u70b9\u7fa4\u3067\u3001\u7e8f\u307e\u308a\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\u3053\u306e\u3001\u305f\u3060\u306e\u70b9\u306b\u904e\u304e\u306a\u3044\u30c7\u30fc\u30bf\u3092\u584a\u3068\u3057\u3066\u8a8d\u8b58\u3059\u308b\u305f\u3081\u3001\u307e\u305a\u306f\u300c\u8f2a\u90ed\u300d\u3068\u3044\u3046\u3082\u306e\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u8f2a\u90ed\u304c\u3067\u304d\u308c\u3070\u3001\u305d\u306e\u8f2a\u90ed\u306b\u56f2\u307e\u308c\u305f\u584a\u304c\u308f\u304b\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n```py\n  contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n```\n\nOpenCV\u3068python\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u5049\u5927\u3067\u3059\u3002\n\u305f\u3063\u305f\u306e1\u884c\u3067\u66f8\u3051\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3067\u3001\u6b21\u306f `contours` \u306e\u5185\u5bb9\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u5b9f\u306f\u3001\u3059\u3067\u306b\u8f2a\u90ed\u3092\u4f5c\u308b\u904e\u7a0b\u3067\u3001\u584a\u3054\u3068\u306b\u914d\u5217\u5316\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\n```py\n  rects = []\n  for contour in contours:\n    approx = cv2.convexHull(contour)\n    rect = cv2.boundingRect(approx)\n    rects.append(rect)    \n```\n\n\u307e\u305f\u540c\u3058\u3053\u3068\u66f8\u304d\u307e\u3059\u304c\u3001OpenCV\u3068python\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u5049\u5927\u3067\u3059\u3002\u5b9f\u306b\u7c21\u6f54\u306b\u66f8\u3051\u307e\u3059\u3002\n`cv2.convexHull()`\u306f\u3001\u51f9\u51f8\u306e\u3042\u308b\u584a\u3092\u5185\u5305\u3059\u308b\u3001\u51f8\u72b6\u306e\u5f62\u72b6\u3092\u7b97\u51fa\u3059\u308b\u95a2\u6570\u3067\u3059\u3002`contour`\u306b\u306f\u8f2a\u90ed\u3092\u6210\u3059\u30c9\u30c3\u30c8\u60c5\u5831\u304c\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3042\u304f\u307e\u3067\u3082\u8f2a\u90ed\u3067\u3059\u306e\u3067\u975e\u5e38\u306b\u8907\u96d1\u306a\u5f62\u72b6\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3001\u30ea\u30a2\u30b9\u5f0f\u6d77\u5cb8\u306e\u3088\u3046\u306a\u3002\u3053\u308c\u3092\u3001\u30de\u30eb\u30c3\u3068\u5305\u307f\u8fbc\u3080\u888b\u306e\u3088\u3046\u306a2D\u30dd\u30ea\u30b4\u30f3\u306b\u3057\u3066\u3057\u307e\u3046\u306e\u304c\u3001`cv2.convexHull()`\u3067\u3059\u3002\u5fa9\u5e30\u5024\u3067\u3042\u308b`approx`\u306f\u3001(X, Y)\u306e\u914d\u5217\u3067\u3059\u3002\n\u305d\u3057\u3066\u3001\u888b\u72b6\u306b\u306a\u3063\u305f\u30dd\u30ea\u30b4\u30f3\u304c\u30b9\u30c3\u30dd\u30ea\u5165\u308b\u77e9\u5f62\u3092\u8a08\u7b97\u3059\u308b\u306e\u304c\u3001`cv2.boundingRect()`\u3067\u3059\u3002\u3053\u308c\u306f\u3001(x, y, width, height)\u3068\u3044\u3046\u5f62\u5f0f\u306e\u77e9\u5f62\u60c5\u5831\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3067\u3001\u70b9\u7fa4\u306e\u60c5\u5831\u304c\u3001\u584a\u3054\u3068\u306e\u77e9\u5f62\u306e\u30ea\u30b9\u30c8\u306b\u307e\u3068\u307e\u308a\u307e\u3057\u305f\u3002\n\n\u3055\u3066\u3001\u9806\u3092\u8ffd\u3063\u3066\u30d0\u30e9\u30d0\u30e9\u306b\u66f8\u3044\u305f\u3082\u306e\u3092\u4e00\u65e6\u7e4b\u3052\u3066\u307f\u307e\u3059\u3002\n\n```py\nimport cv2\nimport numpy as np\n\ndef find_rect_of_target_color(image):\n  hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV_FULL)\n  h = hsv[:, :, 0]\n  s = hsv[:, :, 1]\n  mask = np.zeros(h.shape, dtype=np.uint8)\n  mask[((h < 20) | (h > 200)) & (s > 128)] = 255\n  contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n  rects = []\n  for contour in contours:\n    approx = cv2.convexHull(contour)\n    rect = cv2.boundingRect(approx)\n    rects.append(np.array(rect))\n  return rects\n```\n\n\u305f\u3063\u305f\u3053\u308c\u3060\u3051\u3002\u305f\u3063\u305f\u3053\u308c\u3060\u3051\u3067\u3001\u4e0e\u3048\u305f\u753b\u50cf\u304b\u3089\u8d64\u3044\u7b87\u6240\u3092\u7279\u5b9a\u3059\u308b\u77e9\u5f62\u306e\u914d\u5217\u3092\u8fd4\u3059\u95a2\u6570\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n##\u30d3\u30c7\u30aa\u30ab\u30e1\u30e9\u304b\u3089\u306e\u6620\u50cf\u3092\u89e3\u6790\u3059\u308b\n\u3053\u3053\u307e\u3067\u4f5c\u3063\u305f\u3089\u3001\u305d\u306e\u52d5\u4f5c\u3092\u78ba\u304b\u3081\u305f\u3044\u3067\u3059\u306d\u3002\n\u30d3\u30c7\u30aa\u30ab\u30e1\u30e9\u306e\u6620\u50cf\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u51e6\u7406\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py\nif __name__ == \"__main__\":\n  capture = cv2.VideoCapture()\n  while cv2.waitKey(30) < 0:\n    _, frame = capture.read()\n    rects = find_rect_of_target_color(frame)\n    for rect in rects:\n      cv2.rectangle(frame, tuple(rect[0:2]), tuple(rect[0:2] + rect[2:4]), (0, 0, 255), thickness=2)\n    cv2.imshow('red', frame)\n  capture.release()\n  cv2.destroyAllWindows()\n```\n\n\u3069\u3046\u3067\u3059\u304b\uff1f \u601d\u3063\u305f\u901a\u308a\u306e\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u304b\uff1f\n\u30ef\u30bf\u30af\u30b7\u306e\u4e88\u60f3\u3067\u3059\u304c\u3001\u3044\u307e\u3044\u3061\u306a\u7d50\u679c\u3060\u3063\u305f\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u306f\u3001\u5927\u304d\u306a\u77e9\u5f62\u3082\u5c0f\u3055\u306a\u77e9\u5f62\u3082\u3001\u5168\u90e8\u3001\u300c\u8d64\u3044\u7269\u4f53\u300d\u3068\u3057\u3066\u8a8d\u8b58\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u30ce\u30a4\u30ba\u306e\u3088\u3046\u306a\u3082\u306e\u307e\u3067\u300c\u7269\u4f53\u300d\u3068\u6349\u3048\u308b\u306e\u306f\u30ca\u30f3\u30bb\u30f3\u30b9\u3067\u3059\u3002\u3042\u308b\u7a0b\u5ea6\u306e\u5927\u304d\u3055\u3068\u3044\u3046\u3053\u3068\u3067\u9593\u5f15\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u3053\u3067\u3001\u3061\u3087\u3063\u3068\u304a\u52e7\u3081\u306f\u3001\u6700\u5927\u306e\u5927\u304d\u3055\u306e\u77e9\u5f62\u3060\u3051\u3092\u300c\u8d64\u3044\u7269\u4f53\u300d\u3068\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u3059\u3002\n\u8d64\u3044\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u3001\u624b\u8fd1\u306b\u6709\u3063\u305f\u8d64\u3044\u7269\u4f53\u3092\u30ab\u30e1\u30e9\u306e\u524d\u306b\u304b\u3056\u3057\u307e\u3057\u305f\u306d\uff1f \u3064\u307e\u308a\u3001\u30bd\u30ec\u3092\u691c\u51fa\u3057\u305f\u304b\u3063\u305f\u308f\u3051\u3067\u3059\u3002\u5f80\u3005\u306b\u3057\u3066\u3001\u691c\u51fa\u3057\u3066\u6b32\u3057\u3044\u3082\u306e\u306f\u4e00\u756a\u5927\u304d\u304f\u5199\u3059\u306e\u3067\u3059\u3002\n\n\u5f97\u3089\u308c\u305f\u77e9\u5f62\u30ea\u30b9\u30c8\u304b\u3089\u4e00\u756a\u9762\u7a4d\u306e\u5927\u304d\u3044\u3082\u306e\u3092\u63a2\u7d22\u3059\u308b\u3088\u3046\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\n```py\nif __name__ == \"__main__\":\n  capture = cv2.VideoCapture()\n  while cv2.waitKey(30) < 0:\n    _, frame = capture.read()\n    rects = find_rect_of_target_color(frame)\n    if len(rects) > 0:\n      rect = max(rects, key=(lambda x: x[2] * x[3]))\n      cv2.rectangle(frame, tuple(rect[0:2]), tuple(rect[0:2] + rect[2:4]), (0, 0, 255), thickness=2)\n    cv2.imshow('red', frame)\n  capture.release()\n  cv2.destroyAllWindows()\n```\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3067\u3059\u3002\npython + OpenCV\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001\u3068\u3066\u3082\u4fbf\u5229\u3060\u306a\u3041\u3068\u611f\u5fc3\u3057\u307e\u3059\u3002\n\n"}