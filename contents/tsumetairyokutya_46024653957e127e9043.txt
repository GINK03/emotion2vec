{"tags": ["OpenCV", "C++"], "context": " More than 1 year has passed since last update.\nhogehogerennsyuu.cpp\ncv::Mat blob_convex_draw(\n        cv::Mat binary_img,\n        std::vector <std::vector <cv::Point> > contours,\n        const Scalar& color,\n        int thickness){\n    cv::Mat dst_img = cv::Mat::zeros(binary_img.rows, binary_img.cols, CV_8UC3);\n    int temp_blob_num = contours.size();\n    for (int i=0; i<temp_blob_num; i++){\n        cv::Mat temp_pointsf;\n        cv::Mat(contours[i]).convertTo(temp_pointsf, CV_32F);\n        std::vector<cv::Point2f> temp_hull;\n        cv::convexHull(temp_pointsf.reshape(2), temp_hull, false);\n        int temp_hnum = temp_hull.size();\n        for(int i=0; i<temp_hnum; ++i)\n            cv::line(dst_img, temp_hull[i], temp_hull[i+1<temp_hnum?i+1:0], color, thickness, CV_AA);\n    }\n    return dst_img;\n}\n\n\ncv::Mat simple_convex_draw(\n        cv::Mat binary_img,\n        std::vector <cv::Point> contours,\n        const Scalar& color,\n        int thickness){\n    cv::Mat dst_img = cv::Mat::zeros(binary_img.rows, binary_img.cols, CV_8UC3);\n    cv::Mat temp_pointsf;\n    cv::Mat(contours).convertTo(temp_pointsf, CV_32F);\n    std::vector<cv::Point2f> temp_hull;\n    cv::convexHull(temp_pointsf.reshape(2), temp_hull, false);\n    int temp_hnum = temp_hull.size();\n    for(int i=0; i<temp_hnum; ++i)\n        cv::line(dst_img, temp_hull[i], temp_hull[i+1<temp_hnum?i+1:0], color, thickness, CV_AA);\n    return dst_img;\n}\n\ncv::Mat simple_circle_draw(\n        cv::Mat binary_img,\n        std::vector <cv::Point> contours,\n        const Scalar& color,\n        int thickness){\n    cv::Mat dst_img = cv::Mat::zeros(binary_img.rows, binary_img.cols, CV_8UC3);\n    cv::Mat temp_pointsf;\n    cv::Mat(contours).convertTo(temp_pointsf, CV_32F);//\u70b9\u96c6\u5408\u306b\u5909\u63db\n    cv::Point2f center;\n    float radius;\n    cv::minEnclosingCircle(temp_pointsf.reshape(2), center, radius);\n    cv::circle(dst_img, center, radius, color, thickness, CV_AA);\n\n    return dst_img;\n}\n\nclass blob\n{\npublic:\n    blob();\n       std::vector <std::vector <cv::Point> > contours;\n       int total_contour_number;\n       int found_blob_number;\n       std::vector <cv::Point> blob_pts;\n       std::vector <double> blob_area;\n       std::vector <std::vector <cv::Point> > blob_contours;\n       std::vector <cv::Point>  group_contour;\n       cv::Point group_contour_pts;\n       double group_contour_area;\n       void simplelabel(cv::Mat binary_img, int minblob, int maxblob);\n};\n\n\nblob::blob()\n{\n    contours.clear();\n    total_contour_number = 0;\n    found_blob_number = 0;\n    blob_pts.clear();\n    blob_area.clear();\n    blob_contours.clear();\n    group_contour.clear();\n    group_contour_pts = cv::Point (0,0);\n    group_contour_area = 0;\n}\n\nvoid blob::simplelabel(cv::Mat binary_img, int min_blob_area, int max_blob_area)\n{\n    contours.clear();\n    blob_contours.clear();\n    blob_pts.clear();\n    blob_area.clear();\n    group_contour.clear();\n\n    cv::Moments contour_moment;\n    cv::Point contour_pts;\n    double contour_area;\n    cv::Mat img = binary_img.clone();\n\n    int temp_blob_number = 0;\n    found_blob_number = 0;\n\n    cv::Moments img_m=moments(binary_img, true);\n    if ((int)img_m.m00 > 0){\n        cv::findContours(img, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);\n        total_contour_number = contours.size();//\u898b\u3064\u304b\u3063\u305f\u8f2a\u90ed\u306e\u6570\n        if ((int)contours.size() > 0){\n            for(int i = 0; i < (int)contours.size(); i++){\n                contour_moment = cv::moments(contours[i], true);//\u8f2a\u90ed\u306e\u91cd\u5fc3\u70b9\n                contour_pts =  cv::Point((int)(contour_moment.m10/contour_moment.m00), (int)(contour_moment.m01/contour_moment.m00));\n                contour_area = cv::contourArea(contours[i]);\n                //size\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3068\u304d\u3060\u3051pushback\n                if((contour_area > min_blob_area) && (contour_area < max_blob_area)){\n                    blob_contours.push_back(contours[i]);\n                    blob_pts.push_back(contour_pts);\n                    blob_area.push_back(contour_area);\n                    temp_blob_number ++ ;\n                }\n            }\n\n            found_blob_number = temp_blob_number;\n\n//\u8907\u6570\u306eblob\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u3001blob\u5168\u4f53\u306e\u91cd\u5fc3\u70b9\u306a\u3069\u3092\u6c42\u3081\u308b\n            if (found_blob_number > 2){\n                std::vector<cv::Point> temp_group_contour;\n                temp_group_contour.clear();\n                for (int i=0; i < found_blob_number; i++){\n                    temp_group_contour.push_back(blob_pts[i]);\n                }\n                group_contour = temp_group_contour;\n                cv::Moments group_contour_moment;\n                group_contour_moment = cv::moments(temp_group_contour, true);\n                group_contour_pts =  cv::Point(\n                            (int)(group_contour_moment.m10/group_contour_moment.m00),\n                            (int)(group_contour_moment.m01/group_contour_moment.m00)\n                            );\n                group_contour_area = cv::contourArea(temp_group_contour);\n            }\n        }\n    }\n}\n\n\n\n```c++:hogehogerennsyuu.cpp\ncv::Mat blob_convex_draw(\n        cv::Mat binary_img,\n        std::vector <std::vector <cv::Point> > contours,\n        const Scalar& color,\n        int thickness){\n    cv::Mat dst_img = cv::Mat::zeros(binary_img.rows, binary_img.cols, CV_8UC3);\n    int temp_blob_num = contours.size();\n    for (int i=0; i<temp_blob_num; i++){\n        cv::Mat temp_pointsf;\n        cv::Mat(contours[i]).convertTo(temp_pointsf, CV_32F);\n        std::vector<cv::Point2f> temp_hull;\n        cv::convexHull(temp_pointsf.reshape(2), temp_hull, false);\n        int temp_hnum = temp_hull.size();\n        for(int i=0; i<temp_hnum; ++i)\n            cv::line(dst_img, temp_hull[i], temp_hull[i+1<temp_hnum?i+1:0], color, thickness, CV_AA);\n    }\n    return dst_img;\n}\n\n\ncv::Mat simple_convex_draw(\n        cv::Mat binary_img,\n        std::vector <cv::Point> contours,\n        const Scalar& color,\n        int thickness){\n    cv::Mat dst_img = cv::Mat::zeros(binary_img.rows, binary_img.cols, CV_8UC3);\n    cv::Mat temp_pointsf;\n    cv::Mat(contours).convertTo(temp_pointsf, CV_32F);\n    std::vector<cv::Point2f> temp_hull;\n    cv::convexHull(temp_pointsf.reshape(2), temp_hull, false);\n    int temp_hnum = temp_hull.size();\n    for(int i=0; i<temp_hnum; ++i)\n        cv::line(dst_img, temp_hull[i], temp_hull[i+1<temp_hnum?i+1:0], color, thickness, CV_AA);\n    return dst_img;\n}\n\ncv::Mat simple_circle_draw(\n        cv::Mat binary_img,\n        std::vector <cv::Point> contours,\n        const Scalar& color,\n        int thickness){\n    cv::Mat dst_img = cv::Mat::zeros(binary_img.rows, binary_img.cols, CV_8UC3);\n    cv::Mat temp_pointsf;\n    cv::Mat(contours).convertTo(temp_pointsf, CV_32F);//\u70b9\u96c6\u5408\u306b\u5909\u63db\n    cv::Point2f center;\n    float radius;\n    cv::minEnclosingCircle(temp_pointsf.reshape(2), center, radius);\n    cv::circle(dst_img, center, radius, color, thickness, CV_AA);\n\n    return dst_img;\n}\n\nclass blob\n{\npublic:\n    blob();\n       std::vector <std::vector <cv::Point> > contours;\n       int total_contour_number;\n       int found_blob_number;\n       std::vector <cv::Point> blob_pts;\n       std::vector <double> blob_area;\n       std::vector <std::vector <cv::Point> > blob_contours;\n       std::vector <cv::Point>  group_contour;\n       cv::Point group_contour_pts;\n       double group_contour_area;\n       void simplelabel(cv::Mat binary_img, int minblob, int maxblob);\n};\n\n\nblob::blob()\n{\n    contours.clear();\n    total_contour_number = 0;\n    found_blob_number = 0;\n    blob_pts.clear();\n    blob_area.clear();\n    blob_contours.clear();\n    group_contour.clear();\n    group_contour_pts = cv::Point (0,0);\n    group_contour_area = 0;\n}\n\nvoid blob::simplelabel(cv::Mat binary_img, int min_blob_area, int max_blob_area)\n{\n    contours.clear();\n    blob_contours.clear();\n    blob_pts.clear();\n    blob_area.clear();\n    group_contour.clear();\n\n    cv::Moments contour_moment;\n    cv::Point contour_pts;\n    double contour_area;\n    cv::Mat img = binary_img.clone();\n\n    int temp_blob_number = 0;\n    found_blob_number = 0;\n\n    cv::Moments img_m=moments(binary_img, true);\n    if ((int)img_m.m00 > 0){\n        cv::findContours(img, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);\n        total_contour_number = contours.size();//\u898b\u3064\u304b\u3063\u305f\u8f2a\u90ed\u306e\u6570\n        if ((int)contours.size() > 0){\n            for(int i = 0; i < (int)contours.size(); i++){\n                contour_moment = cv::moments(contours[i], true);//\u8f2a\u90ed\u306e\u91cd\u5fc3\u70b9\n                contour_pts =  cv::Point((int)(contour_moment.m10/contour_moment.m00), (int)(contour_moment.m01/contour_moment.m00));\n                contour_area = cv::contourArea(contours[i]);\n                //size\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3068\u304d\u3060\u3051pushback\n                if((contour_area > min_blob_area) && (contour_area < max_blob_area)){\n                    blob_contours.push_back(contours[i]);\n                    blob_pts.push_back(contour_pts);\n                    blob_area.push_back(contour_area);\n                    temp_blob_number ++ ;\n                }\n            }\n\n            found_blob_number = temp_blob_number;\n\n//\u8907\u6570\u306eblob\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u3001blob\u5168\u4f53\u306e\u91cd\u5fc3\u70b9\u306a\u3069\u3092\u6c42\u3081\u308b\n            if (found_blob_number > 2){\n                std::vector<cv::Point> temp_group_contour;\n                temp_group_contour.clear();\n                for (int i=0; i < found_blob_number; i++){\n                    temp_group_contour.push_back(blob_pts[i]);\n                }\n                group_contour = temp_group_contour;\n                cv::Moments group_contour_moment;\n                group_contour_moment = cv::moments(temp_group_contour, true);\n                group_contour_pts =  cv::Point(\n                            (int)(group_contour_moment.m10/group_contour_moment.m00),\n                            (int)(group_contour_moment.m01/group_contour_moment.m00)\n                            );\n                group_contour_area = cv::contourArea(temp_group_contour);\n            }\n        }\n    }\n}\n"}