{"tags": ["unittest", "Python", "peewee", "Mock"], "context": "ORM\u306bpeewee\u3092\u4f7f\u3046\u30af\u30e9\u30b9\u3092\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\uff0e\n\u30c6\u30b9\u30c8\u306b\u306fmock\u3092\u4f7f\u3044\uff0c\u30e2\u30c7\u30eb\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u6b63\u3057\u3044\u5024\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u304c\uff0c\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3059\u308b\u3082\u306e\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3067\u6e21\u3059\u5834\u5408\u306b\uff0cmock.Mock\u30af\u30e9\u30b9\u305d\u306e\u307e\u307e\u3067\u306f\u3046\u307e\u304f\u30c6\u30b9\u30c8\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\uff0c\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3092\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3059\u308b\u30e2\u30c3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\n\u306a\u304a\uff0cPython\u6b74\u304c\u307e\u30602\u30f6\u6708\u306a\u3082\u306e\u3067\uff0c\u5927\u304d\u306a\u52d8\u9055\u3044\u3092\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u305a\uff0c\u3082\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306a\u3084\u308a\u65b9\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u9593\u9055\u3044\u3084\u3088\u308a\u826f\u3044\u65b9\u6cd5\u3092\u77e5\u3063\u3066\u3044\u308b\u65b9\u304c\u3044\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u9802\u3051\u308b\u3068\u5927\u5909\u52a9\u304b\u308a\u307e\u3059\uff0e\n\n2016/10/15\u8ffd\u8a18\n\u3053\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u30e2\u30c3\u30af\u304c1\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3060\u3051\u4f5c\u6210\u3055\u308c\u308b\u30b1\u30fc\u30b9\u306b\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\uff0e\u8907\u6570\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u30b1\u30fc\u30b9\u306f\uff0c\u30b3\u30e1\u30f3\u30c8\u3067 @podhmo \u3055\u3093\u304c\u4f8b\u793a\u3057\u3066\u304f\u308c\u305f\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306a\u3084\u308a\u65b9\u304c\u5fc5\u8981\u3067\u3059\uff0e\n\n\n\u74b0\u5883\n\nPython 2.7.12\npeewee 2.8.5\nmock 2.0.0\n\n\n\u6e96\u5099\n$ pip install peewee\n$ pip install mock\n\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n$ tree\n.\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 model.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 service.py\n\u2514\u2500\u2500 test\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_service.py\n\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u30b3\u30fc\u30c9\n\npeewee\u306e\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305fmodel.HogeModel\u3092service.HogeService\u304c\u5229\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\n\n\nsrc/service.py\n# -*- coding: utf-8 -*-\n\nfrom model import HogeModel\n\nclass HogeService(object):\n    def run(self):\n        model = HogeModel(name='hoge name')\n        model.desc = 'hoge desc'\n        model.save()\n\n\n\nsrc/model.py\n# -*- coding: utf-8 -*-\n\nfrom peewee import SqliteDatabase\nfrom peewee import Model\nfrom peewee import PrimaryKeyField\nfrom peewee import CharField\n\ndb = SqliteDatabase('hoge.db')\n\nclass HogeModel(Model):\n    id = PrimaryKeyField\n    name = CharField()\n    desc = CharField()\n\n    class Meta:\n        database = db\n\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nservice.HogeService\u3092\u30c6\u30b9\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\n\u307e\u305a\u306f\u5358\u7d14\u306bmock.patch\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066model.HogeModel\u3092\u30e2\u30c3\u30af\u5316\u3057\u3066\u307f\u307e\u3057\u305f\n\u3053\u308c\u3092\u30c6\u30b9\u30c8\u5b9f\u884c\u3059\u308b\u30683\u3064\u76ee\u306e\u30c6\u30b9\u30c8\u3060\u3051NG\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\n\n\ntest/test_service.py\n# -*- coding: utf-8 -*-\n\nimport unittest\nfrom mock import patch\nfrom mock import Mock\nfrom service import HogeService\n\nclass TestHogeService(unittest.TestCase):\n\n    @patch('service.HogeModel')\n    def test_run(self, mock_hoge_model):\n        mock = Mock()\n        mock_hoge_model.return_value = mock\n        target = HogeService()\n        target.run()\n        self.assertEquals(1, mock.save.call_count)  # OK\n        self.assertEquals('hoge desc', mock.desc)  # OK\n        self.assertEquals('hoge name', mock.name)  # NG\n\nif __name__ == '__main__':\n    unittest.main()\n\n\n$ PYTHONPATH=src python test/test_service.py \nF\n======================================================================\nFAIL: test_run (__main__.TestHogeService)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/otti/.pyenv/versions/2.7.12/lib/python2.7/site-packages/mock/mock.py\", line 1305, in patched\n    return func(*args, **keywargs)\n  File \"test/test_service.py\", line 18, in test_run\n    self.assertEquals('hoge name', mock.name)  # NG\nAssertionError: 'hoge name' != <Mock name='HogeModel().name' id='4454023888'>\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3092\u30e2\u30c3\u30af\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3059\u308b\n\n\u30c6\u30b9\u30c8\u304c\u901a\u3089\u306a\u3044\u306e\u306f\uff0cservice.HogeService\u3067model = HogeModel(name='hoge name')\u3068\u66f8\u3044\u3066\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6e21\u3055\u308c\u305f\u3082\u306e\u304c\u30e2\u30c3\u30af\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u306f\u30bb\u30c3\u30c8\u3055\u308c\u306a\u3044\u304b\u3089\u3067\u3057\u305f\n\u305d\u3053\u3067\uff0c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6e21\u3055\u308c\u305f\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3092\u30e2\u30c3\u30af\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3057\uff0cpatch\u3057\u305f\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u6642\u306b\u305d\u306e\u30e2\u30c3\u30af\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u305f\n\u307e\u305f\uff0c\u30e2\u30c7\u30eb\u306b\u30bb\u30c3\u30c8\u3055\u308c\u305f\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3092\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067assert\u3057\u305f\u3044\u306e\u3067\uff0c\u751f\u6210\u3057\u305f\u30e2\u30c3\u30af\u306f\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u6301\u3064\u3088\u3046\u306b\u3057\u307e\u3057\u305f\n\n\ntest/test_service.py\n# -*- coding: utf-8 -*-\n\nimport unittest\nfrom mock import Mock\nfrom mock import patch\nfrom service import HogeService\n\nclass TestHogeService(unittest.TestCase):\n\n    def create_attr_set_mock(self, **kwargs):\n        self.mock = Mock()\n        # \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6e21\u3055\u308c\u305f\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3092\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3059\u308b\n        for k, v in kwargs.items():\n            self.mock.__dict__[k] = v\n        return self.mock\n\n    @patch('service.HogeModel')\n    def test_run(self, mock_hoge_model):\n        # \u5bfe\u8c61\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u6642\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3092\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3059\u308b\u30e2\u30c3\u30af\u3092\u8fd4\u3059\n        mock_hoge_model.side_effect = lambda **kwargs: self.create_attr_set_mock(**kwargs)\n        target = HogeService()\n        target.run()\n        self.assertEquals(1, self.mock.save.call_count) # OK\n        self.assertEquals('hoge desc', self.mock.desc) # OK\n        self.assertEquals('hoge name', self.mock.name) # OK\n\nif __name__ == '__main__':\n    unittest.main()\n\n\n PYTHONPATH=src python test/test_service.py \n.\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nOK\n\n\u3053\u308c\u3067\u671f\u5f85\u3059\u308b\u52d5\u4f5c\u3092\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30e2\u30c3\u30af\u304c\u4f5c\u308c\u307e\u3057\u305f\uff0e\nmock.Mock\u306b\u306f\u305d\u3082\u305d\u3082name\u3068\u3044\u3046\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u304c\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u5c11\u3057\u7d1b\u3089\u308f\u3057\u3044\u4f8b\u3067\u3057\u305f\u304c\uff0cname\u4ee5\u5916\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3067\u8a66\u3057\u3066\u3082\u540c\u69d8\u3067\u3057\u305f\uff0e\n\n\u53c2\u8003\n\n26.6. unittest.mock \u2014 \u5165\u9580 \u2014 Python 3.5.2 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n[python] \u307e\u3060mock\u3067\u6d88\u8017\u3057\u3066\u308b\u306e\uff1fmock\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306e3\u3064\u306e\u30dd\u30a4\u30f3\u30c8 - \u304f\u308d\u306e\u3066\nPython\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3001\u52d5\u7684\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3084\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b - Symfoware\n\nORM\u306b[peewee](http://docs.peewee-orm.com/en/latest/)\u3092\u4f7f\u3046\u30af\u30e9\u30b9\u3092\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\uff0e\n\u30c6\u30b9\u30c8\u306b\u306f[mock](https://pypi.python.org/pypi/mock)\u3092\u4f7f\u3044\uff0c\u30e2\u30c7\u30eb\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u6b63\u3057\u3044\u5024\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3088\u3046\u3068\u3057\u307e\u3057\u305f\u304c\uff0c\u30e2\u30c7\u30eb\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3059\u308b\u3082\u306e\u3092\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3067\u6e21\u3059\u5834\u5408\u306b\uff0cmock.Mock\u30af\u30e9\u30b9\u305d\u306e\u307e\u307e\u3067\u306f\u3046\u307e\u304f\u30c6\u30b9\u30c8\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\uff0c\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3092\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3059\u308b\u30e2\u30c3\u30af\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff0e\n\n\u306a\u304a\uff0cPython\u6b74\u304c\u307e\u30602\u30f6\u6708\u306a\u3082\u306e\u3067\uff0c\u5927\u304d\u306a\u52d8\u9055\u3044\u3092\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u305a\uff0c\u3082\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306a\u3084\u308a\u65b9\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u9593\u9055\u3044\u3084\u3088\u308a\u826f\u3044\u65b9\u6cd5\u3092\u77e5\u3063\u3066\u3044\u308b\u65b9\u304c\u3044\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u9802\u3051\u308b\u3068\u5927\u5909\u52a9\u304b\u308a\u307e\u3059\uff0e\n\n> 2016/10/15\u8ffd\u8a18\n> \u3053\u306e\u8a18\u4e8b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u30e2\u30c3\u30af\u304c1\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3060\u3051\u4f5c\u6210\u3055\u308c\u308b\u30b1\u30fc\u30b9\u306b\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u305b\u3093\uff0e\u8907\u6570\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u30b1\u30fc\u30b9\u306f\uff0c\u30b3\u30e1\u30f3\u30c8\u3067 @podhmo \u3055\u3093\u304c[\u4f8b\u793a\u3057\u3066\u304f\u308c\u305f\u30b3\u30fc\u30c9](https://gist.github.com/podhmo/c1f1c562149b1dd9b7bd619c31c48654)\u306e\u3088\u3046\u306a\u3084\u308a\u65b9\u304c\u5fc5\u8981\u3067\u3059\uff0e\n\n\n## \u74b0\u5883\n\n* Python 2.7.12\n* peewee 2.8.5\n* mock 2.0.0\n\n## \u6e96\u5099\n\n```bash\n$ pip install peewee\n$ pip install mock\n```\n\n## \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n\n```bash\n$ tree\n.\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 model.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 service.py\n\u2514\u2500\u2500 test\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_service.py\n```\n\n## \u30c6\u30b9\u30c8\u5bfe\u8c61\u30b3\u30fc\u30c9\n\n* peewee\u306e\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305fmodel.HogeModel\u3092service.HogeService\u304c\u5229\u7528\u3057\u3066\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\n\n```src/service.py\n# -*- coding: utf-8 -*-\n\nfrom model import HogeModel\n\nclass HogeService(object):\n    def run(self):\n        model = HogeModel(name='hoge name')\n        model.desc = 'hoge desc'\n        model.save()\n```\n\n```src/model.py\n# -*- coding: utf-8 -*-\n\nfrom peewee import SqliteDatabase\nfrom peewee import Model\nfrom peewee import PrimaryKeyField\nfrom peewee import CharField\n\ndb = SqliteDatabase('hoge.db')\n\nclass HogeModel(Model):\n    id = PrimaryKeyField\n    name = CharField()\n    desc = CharField()\n\n    class Meta:\n        database = db\n\n```\n\n## \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n* service.HogeService\u3092\u30c6\u30b9\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u3067\u3059\n* \u307e\u305a\u306f\u5358\u7d14\u306bmock.patch\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066model.HogeModel\u3092\u30e2\u30c3\u30af\u5316\u3057\u3066\u307f\u307e\u3057\u305f\n* \u3053\u308c\u3092\u30c6\u30b9\u30c8\u5b9f\u884c\u3059\u308b\u30683\u3064\u76ee\u306e\u30c6\u30b9\u30c8\u3060\u3051NG\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\n\n```test/test_service.py\n# -*- coding: utf-8 -*-\n\nimport unittest\nfrom mock import patch\nfrom mock import Mock\nfrom service import HogeService\n\nclass TestHogeService(unittest.TestCase):\n\n    @patch('service.HogeModel')\n    def test_run(self, mock_hoge_model):\n        mock = Mock()\n        mock_hoge_model.return_value = mock\n        target = HogeService()\n        target.run()\n        self.assertEquals(1, mock.save.call_count)  # OK\n        self.assertEquals('hoge desc', mock.desc)  # OK\n        self.assertEquals('hoge name', mock.name)  # NG\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n```bash\n$ PYTHONPATH=src python test/test_service.py \nF\n======================================================================\nFAIL: test_run (__main__.TestHogeService)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/otti/.pyenv/versions/2.7.12/lib/python2.7/site-packages/mock/mock.py\", line 1305, in patched\n    return func(*args, **keywargs)\n  File \"test/test_service.py\", line 18, in test_run\n    self.assertEquals('hoge name', mock.name)  # NG\nAssertionError: 'hoge name' != <Mock name='HogeModel().name' id='4454023888'>\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=1)\n```\n\n## \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3092\u30e2\u30c3\u30af\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3059\u308b\n\n* \u30c6\u30b9\u30c8\u304c\u901a\u3089\u306a\u3044\u306e\u306f\uff0cservice.HogeService\u3067`model = HogeModel(name='hoge name')`\u3068\u66f8\u3044\u3066\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6e21\u3055\u308c\u305f\u3082\u306e\u304c\u30e2\u30c3\u30af\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u306f\u30bb\u30c3\u30c8\u3055\u308c\u306a\u3044\u304b\u3089\u3067\u3057\u305f\n* \u305d\u3053\u3067\uff0c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6e21\u3055\u308c\u305f\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3092\u30e2\u30c3\u30af\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3057\uff0cpatch\u3057\u305f\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u6642\u306b\u305d\u306e\u30e2\u30c3\u30af\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u305f\n* \u307e\u305f\uff0c\u30e2\u30c7\u30eb\u306b\u30bb\u30c3\u30c8\u3055\u308c\u305f\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3092\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067assert\u3057\u305f\u3044\u306e\u3067\uff0c\u751f\u6210\u3057\u305f\u30e2\u30c3\u30af\u306f\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u6301\u3064\u3088\u3046\u306b\u3057\u307e\u3057\u305f\n\n```test/test_service.py\n# -*- coding: utf-8 -*-\n\nimport unittest\nfrom mock import Mock\nfrom mock import patch\nfrom service import HogeService\n\nclass TestHogeService(unittest.TestCase):\n\n    def create_attr_set_mock(self, **kwargs):\n        self.mock = Mock()\n        # \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u6e21\u3055\u308c\u305f\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3092\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3059\u308b\n        for k, v in kwargs.items():\n            self.mock.__dict__[k] = v\n        return self.mock\n\n    @patch('service.HogeModel')\n    def test_run(self, mock_hoge_model):\n        # \u5bfe\u8c61\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u6642\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u4ed8\u304d\u5f15\u6570\u3092\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306b\u30bb\u30c3\u30c8\u3059\u308b\u30e2\u30c3\u30af\u3092\u8fd4\u3059\n        mock_hoge_model.side_effect = lambda **kwargs: self.create_attr_set_mock(**kwargs)\n        target = HogeService()\n        target.run()\n        self.assertEquals(1, self.mock.save.call_count) # OK\n        self.assertEquals('hoge desc', self.mock.desc) # OK\n        self.assertEquals('hoge name', self.mock.name) # OK\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n```bash\n PYTHONPATH=src python test/test_service.py \n.\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nOK\n```\n\n\u3053\u308c\u3067\u671f\u5f85\u3059\u308b\u52d5\u4f5c\u3092\u3059\u308b\u30e2\u30c7\u30eb\u306e\u30e2\u30c3\u30af\u304c\u4f5c\u308c\u307e\u3057\u305f\uff0e\nmock.Mock\u306b\u306f\u305d\u3082\u305d\u3082name\u3068\u3044\u3046\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u304c\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u5c11\u3057\u7d1b\u3089\u308f\u3057\u3044\u4f8b\u3067\u3057\u305f\u304c\uff0cname\u4ee5\u5916\u306e\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3067\u8a66\u3057\u3066\u3082\u540c\u69d8\u3067\u3057\u305f\uff0e\n\n## \u53c2\u8003\n* [26.6. unittest.mock \u2014 \u5165\u9580 \u2014 Python 3.5.2 \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.python.jp/3/library/unittest.mock-examples.html#partial-mocking)\n* [[python] \u307e\u3060mock\u3067\u6d88\u8017\u3057\u3066\u308b\u306e\uff1fmock\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306e3\u3064\u306e\u30dd\u30a4\u30f3\u30c8 - \u304f\u308d\u306e\u3066](http://note.crohaco.net/2015/python-mock/)\n* [Python\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3001\u52d5\u7684\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3084\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b - Symfoware](http://symfoware.blog68.fc2.com/blog-entry-874.html)\n"}