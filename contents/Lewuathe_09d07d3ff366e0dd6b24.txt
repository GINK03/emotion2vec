{"tags": ["Python", "scikit-learn"], "context": " More than 1 year has passed since last update.scikit-learnCross Validation\u3068Grid Search\u3092\u3084\u3063\u3066\u307f\u305f\u3002\n\nCross Validation\n\u8a73\u3057\u3044\u3053\u3068\u306fWikipedia\u306b\u66f8\u3044\u3066\u3042\u308b\u3002\nCross Validation\u306f\u30e2\u30c7\u30eb\u306e\u59a5\u5f53\u6027\u3092\u691c\u8a3c\u3059\u308b\u65b9\u6cd5\u306e\u3072\u3068\u3064\u3002\u4e00\u822c\u7684\u306b\u958b\u767a\u7528\u306e\u30c7\u30fc\u30bf\u306f\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u306b\u5206\u304b\u308c\u308b\u3002\n\u3057\u304b\u3057\u3001\u3053\u306e\u307e\u307e\u884c\u3063\u3066\u3057\u307e\u3046\u3068\u6298\u89d2\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u304c\u6e1b\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u306b\u306a\u308b\u4e0a\u306b\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u9078\u3073\u65b9\u306b\u3088\u3063\u3066\u6c4e\u5316\u6027\u80fd\u304c\u4e0b\u304c\u3063\u3066\u3057\u307e\u3046\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\nWikipedia\u306b\u66f8\u3044\u3066\u3042\u308b\u3082\u306e\u306e\u30db\u30fc\u30eb\u30c9\u30fb\u30a2\u30a6\u30c8\u691c\u5b9a\u304c\u3053\u308c\u306b\u5f53\u305f\u308b\u3002\u4e00\u822c\u306b\u306f\u3053\u308c\u306fCross Validation\u306b\u306f\u3042\u305f\u3089\u306a\u3044\u3002\n\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308bK-\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u304c\u3053\u308c\u306b\u5f53\u305f\u308b\u3002K-\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u3067\u306f\u958b\u767a\u7528\u306e\u30c7\u30fc\u30bf\u3092K\u500b\u306b\u5206\u5272\u3057K-1\u500b\u3092\u8a13\u7df4\u7528\u306b\u3001\u6b8b\u308a\u306e\u4e00\u3064\u3092\u691c\u8a3c\u7528\u306b\u4f7f\u3044\u30e2\u30c7\u30eb\u306e\u6b63\u5f53\u6027\u3092\u8a08\u7b97\u3059\u308b\u3002\n\u3053\u308c\u306b\u3088\u308a\u4f7f\u3048\u308b\u8a13\u7df4\u30c7\u30fc\u30bf\u304c\u5897\u3048\u308b\u3068\u540c\u6642\u306b\u3001\u3053\u308c\u3089\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u5909\u3048\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u6c4e\u5316\u6027\u80fd\u3092\u4e0a\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nscikit-learn\u3067\u5177\u4f53\u7684\u306b\u3069\u306e\u3088\u3046\u306b\u884c\u3046\u306e\u304b\u66f8\u3044\u3066\u307f\u305f\u3002\u8a13\u7df4\u306b\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u3068\u3057\u3066\u306fKaggle\u306eData Science London\u3067\u51fa\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u7528\u3044\u305f\u3002\n\nSVM\n\u307e\u305a\u306f\u5358\u7d14\u306b\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\u3067\u30af\u30e9\u30b9\u5206\u3051\u3092\u3055\u305b\u305f\u6642\u306e\u30b3\u30fc\u30c9\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nfrom sklearn import svm\nimport numpy as np\nimport csv\n\nif __name__ == \"__main__\":\n    train_feature_file = np.genfromtxt(open(\"../data/train.csv\", \"rb\"), delimiter=\",\", dtype=float)\n    train_label_file = np.genfromtxt(open(\"../data/trainLabels.csv\", \"rb\"), delimiter=\",\", dtype=float)\n\n    train_features = []\n    train_labels = []\n    for train_feature, train_label in zip(train_feature_file, train_label_file):\n        train_features.append(train_feature)\n        train_labels.append(train_label)\n\n    train_features = np.array(train_features)\n    train_labels = np.array(train_labels)\n\n    clf = svm.SVC(C=100, cache_size=200, class_weight=None, coef0=0.0, degree=3,gamma=0.001, kernel=\"rbf\", max_iter=-1, probability=False,random_state=None, shrinking=True, tol=0.001, verbose=False)\n\n    clf.fit(train_features, train_labels)\n\n    test_feature_file = np.genfromtxt(open(\"../data/test.csv\", \"rb\"), delimiter=\",\", dtype=float)\n\n    test_features = []\n    print \"Id,Solution\"\n    i = 1\n    for test_feature in test_feature_file:\n        print str(i) + \",\" + str(int(clf.predict(test_feature)[0]))\n        i += 1\n\n\u3053\u306e\u30e2\u30c7\u30eb\u3092Cross Validation\u3067\u691c\u8a3c\u3057\u3066\u307f\u308b\u3002\ndef get_score(clf, train_features, train_labels):\n    X_train, X_test, y_train, y_test = cross_validation.train_test_split(train_features, train_labels, test_size=0.4, random_state=0)\n\n    clf.fit(X_train, y_train)\n    print clf.score(X_test, y_test) \n\ncross_validation.train_test_split\u306f\u4e00\u5b9a\u306e\u5272\u5408\u304c\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u3068\u306a\u308b\u3088\u3046\u306b\u958b\u767a\u7528\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u95a2\u6570\u3002\u3053\u306e\u5834\u5408\u306ftest_size=0.4\u3092\u6307\u5b9a\u3057\u305f\u306e\u3067\u300140%\u306e\u30c7\u30fc\u30bf\u3092\u691c\u8a3c\u7528\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\nfit\u304c60%\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3067\u884c\u3046\u3082\u306e\u3067\u3001score\u304c\u6b8b\u3055\u308c\u305f40%\u306e\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\u3092\u884c\u3044\u305d\u306e\u6b63\u7b54\u7387\u3092\u51fa\u3057\u3066\u304f\u308c\u308b\u3002\u3053\u308c\u304c\u3053\u306e\u30e2\u30c7\u30eb\u306e\u3001\u3053\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u6b63\u5f53\u6027\u3068\u306a\u308b\u3002\u3082\u3061\u308d\u3093\u3053\u308c\u304c\u9ad8\u3051\u308c\u3070\u9ad8\u3044\u307b\u3069\u3088\u3044\u304c\n\u6c4e\u5316\u6027\u80fd\u304c\u9ad8\u3044\u304b\u3069\u3046\u304b\u306f\u3053\u3053\u304b\u3089\u3067\u306f\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\u305d\u306e\u305f\u3081K\u5206\u5272\u3092\u884c\u3046\u3053\u3068\u3067K\u56de\u306e\u691c\u8a3c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3053\u308c\u3089\u306e\u30b9\u30b3\u30a2\u3092\u5e73\u5747\u3059\u308b\u3053\u3068\u3067\u6c4e\u5316\u6027\u80fd\u3082\u542b\u3081\u305f\u30e2\u30c7\u30eb\u306e\u6b63\u5f53\u6027\u3092\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\ndef get_accuracy(clf, train_features, train_labels):\n    scores = cross_validation.cross_val_score(clf, train_features, train_labels, cv=10)\n    print(\"Accuracy: %0.2f (+/- %0.2f)\" % (scores.mean(), scores.std() * 2))\n\ncross_validation_cross_val_score\u3067\u3053\u308c\u3089\u306e\u691c\u8a3c\u306e\u3059\u3079\u3066\u306escore\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002cv\u306fK\u5206\u5272\u306e\u5206\u5272\u306e\u500b\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u4eca\u56de\u306f\u958b\u767a\u7528\u306e\u30c7\u30fc\u30bf\u309210\u500b\u306b\u5206\u5272\u305710\u56de\u306e\u691c\u8a3c\u3092\u884c\u3046\u3002\nscores\u306b\u306f10\u500b\u306escore\u304c\u5165\u3063\u305f\u30ea\u30b9\u30c8\u304c\u8fd4\u3063\u3066\u304f\u308b\u3002\u3053\u308c\u306e\u5e73\u5747\u3092Accuracy\u3068\u3057\u3066\u51fa\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u3067\u6c4e\u5316\u6027\u80fd\u3082\u542b\u3081\u305f\u30e2\u30c7\u30eb\u306e\u6b63\u5f53\u6027\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304c\u3001\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u624b\u3067\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u624b\u3067\u8abf\u6574\u3057\u3066\u3001Accuracy\u3092\u8a08\u7b97\u3059\u308b\u3068\u3044\u3046\u306e\u306f\u975e\u5e38\u306b\u624b\u9593\u306a\u306e\u3067Grid Search\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3053\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3042\u308b\u7a0b\u5ea6\u81ea\u52d5\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nGrid Search\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u7d4c\u9a13\u7684\u306b\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u3092\u63a2\u7d22\u3059\u308b\u65b9\u6cd5\u304cGrid Search\u3002Python\u3067\u884c\u3046\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3002\ndef grid_search(train_features, train_labels):\n    param_grid = [\n        {'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n        {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001], 'kernel': ['rbf']},\n    ]\n\n    clf = GridSearchCV(svm.SVC(C=1), param_grid, n_jobs=-1)\n    clf.fit(train_features, train_labels)\n    print clf.best_estimator_\n\nparam_grid\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3053\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002n_jobs\u306b\u4e26\u5217\u306b\u8a08\u7b97\u3092\u884c\u3046\u30d7\u30ed\u30bb\u30b9\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002-1\u3092\u6307\u5b9a\u3059\u308b\u3068\u30b3\u30a2\u6570\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u9078\u3076\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u4e0e\u3048\u3089\u308c\u305f\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066Grid Search\u3092\u884c\u3046\u3002\n\u6642\u9593\u306f\u5c11\u3057\u304b\u304b\u308b\u304c\u3001\u3053\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u6700\u3082\u30b9\u30b3\u30a2\u304c\u9ad8\u304f\u306a\u308b\u3088\u3046\u306a\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9078\u3076\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3053\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u5b9f\u969b\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nscikit-learnCross Validation\u3068Grid Search\u3092\u3084\u3063\u3066\u307f\u305f\u3002\n\n### Cross Validation\n\n\u8a73\u3057\u3044\u3053\u3068\u306f[Wikipedia](http://ja.wikipedia.org/wiki/%E4%BA%A4%E5%B7%AE%E6%A4%9C%E5%AE%9A)\u306b\u66f8\u3044\u3066\u3042\u308b\u3002\nCross Validation\u306f\u30e2\u30c7\u30eb\u306e\u59a5\u5f53\u6027\u3092\u691c\u8a3c\u3059\u308b\u65b9\u6cd5\u306e\u3072\u3068\u3064\u3002\u4e00\u822c\u7684\u306b\u958b\u767a\u7528\u306e\u30c7\u30fc\u30bf\u306f\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u691c\u8a3c\u30c7\u30fc\u30bf\u306b\u5206\u304b\u308c\u308b\u3002\n\u3057\u304b\u3057\u3001\u3053\u306e\u307e\u307e\u884c\u3063\u3066\u3057\u307e\u3046\u3068\u6298\u89d2\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u304c\u6e1b\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u306b\u306a\u308b\u4e0a\u306b\u3001\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u9078\u3073\u65b9\u306b\u3088\u3063\u3066\u6c4e\u5316\u6027\u80fd\u304c\u4e0b\u304c\u3063\u3066\u3057\u307e\u3046\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\nWikipedia\u306b\u66f8\u3044\u3066\u3042\u308b\u3082\u306e\u306e\u30db\u30fc\u30eb\u30c9\u30fb\u30a2\u30a6\u30c8\u691c\u5b9a\u304c\u3053\u308c\u306b\u5f53\u305f\u308b\u3002\u4e00\u822c\u306b\u306f\u3053\u308c\u306fCross Validation\u306b\u306f\u3042\u305f\u3089\u306a\u3044\u3002\n\n\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308bK-\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u304c\u3053\u308c\u306b\u5f53\u305f\u308b\u3002K-\u5206\u5272\u4ea4\u5dee\u691c\u5b9a\u3067\u306f\u958b\u767a\u7528\u306e\u30c7\u30fc\u30bf\u3092K\u500b\u306b\u5206\u5272\u3057K-1\u500b\u3092\u8a13\u7df4\u7528\u306b\u3001\u6b8b\u308a\u306e\u4e00\u3064\u3092\u691c\u8a3c\u7528\u306b\u4f7f\u3044\u30e2\u30c7\u30eb\u306e\u6b63\u5f53\u6027\u3092\u8a08\u7b97\u3059\u308b\u3002\n\u3053\u308c\u306b\u3088\u308a\u4f7f\u3048\u308b\u8a13\u7df4\u30c7\u30fc\u30bf\u304c\u5897\u3048\u308b\u3068\u540c\u6642\u306b\u3001\u3053\u308c\u3089\u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u5909\u3048\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u6c4e\u5316\u6027\u80fd\u3092\u4e0a\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nscikit-learn\u3067\u5177\u4f53\u7684\u306b\u3069\u306e\u3088\u3046\u306b\u884c\u3046\u306e\u304b\u66f8\u3044\u3066\u307f\u305f\u3002\u8a13\u7df4\u306b\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u3068\u3057\u3066\u306fKaggle\u306e[Data Science London](http://www.kaggle.com/c/data-science-london-scikit-learn)\u3067\u51fa\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u7528\u3044\u305f\u3002\n\n### SVM\n\n\u307e\u305a\u306f\u5358\u7d14\u306b\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\u3067\u30af\u30e9\u30b9\u5206\u3051\u3092\u3055\u305b\u305f\u6642\u306e\u30b3\u30fc\u30c9\n\n```python\n# -*- coding: utf-8 -*-\n\nimport os\nimport sys\nfrom sklearn import svm\nimport numpy as np\nimport csv\n\nif __name__ == \"__main__\":\n    train_feature_file = np.genfromtxt(open(\"../data/train.csv\", \"rb\"), delimiter=\",\", dtype=float)\n    train_label_file = np.genfromtxt(open(\"../data/trainLabels.csv\", \"rb\"), delimiter=\",\", dtype=float)\n\n    train_features = []\n    train_labels = []\n    for train_feature, train_label in zip(train_feature_file, train_label_file):\n        train_features.append(train_feature)\n        train_labels.append(train_label)\n\n    train_features = np.array(train_features)\n    train_labels = np.array(train_labels)\n\n    clf = svm.SVC(C=100, cache_size=200, class_weight=None, coef0=0.0, degree=3,gamma=0.001, kernel=\"rbf\", max_iter=-1, probability=False,random_state=None, shrinking=True, tol=0.001, verbose=False)\n\n    clf.fit(train_features, train_labels)\n\n    test_feature_file = np.genfromtxt(open(\"../data/test.csv\", \"rb\"), delimiter=\",\", dtype=float)\n\n    test_features = []\n    print \"Id,Solution\"\n    i = 1\n    for test_feature in test_feature_file:\n        print str(i) + \",\" + str(int(clf.predict(test_feature)[0]))\n        i += 1\n```\n\n\u3053\u306e\u30e2\u30c7\u30eb\u3092Cross Validation\u3067\u691c\u8a3c\u3057\u3066\u307f\u308b\u3002\n\n```python\ndef get_score(clf, train_features, train_labels):\n    X_train, X_test, y_train, y_test = cross_validation.train_test_split(train_features, train_labels, test_size=0.4, random_state=0)\n\n    clf.fit(X_train, y_train)\n    print clf.score(X_test, y_test) \n```\n\ncross_validation.train_test_split\u306f\u4e00\u5b9a\u306e\u5272\u5408\u304c\u691c\u8a3c\u7528\u30c7\u30fc\u30bf\u3068\u306a\u308b\u3088\u3046\u306b\u958b\u767a\u7528\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u95a2\u6570\u3002\u3053\u306e\u5834\u5408\u306f`test_size=0.4`\u3092\u6307\u5b9a\u3057\u305f\u306e\u3067\u300140%\u306e\u30c7\u30fc\u30bf\u3092\u691c\u8a3c\u7528\u3068\u3057\u3066\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\n`fit`\u304c60%\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3067\u884c\u3046\u3082\u306e\u3067\u3001score\u304c\u6b8b\u3055\u308c\u305f40%\u306e\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\u3092\u884c\u3044\u305d\u306e\u6b63\u7b54\u7387\u3092\u51fa\u3057\u3066\u304f\u308c\u308b\u3002\u3053\u308c\u304c\u3053\u306e\u30e2\u30c7\u30eb\u306e\u3001\u3053\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u6b63\u5f53\u6027\u3068\u306a\u308b\u3002\u3082\u3061\u308d\u3093\u3053\u308c\u304c\u9ad8\u3051\u308c\u3070\u9ad8\u3044\u307b\u3069\u3088\u3044\u304c\n\u6c4e\u5316\u6027\u80fd\u304c\u9ad8\u3044\u304b\u3069\u3046\u304b\u306f\u3053\u3053\u304b\u3089\u3067\u306f\u8aad\u307f\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\u305d\u306e\u305f\u3081K\u5206\u5272\u3092\u884c\u3046\u3053\u3068\u3067K\u56de\u306e\u691c\u8a3c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3053\u308c\u3089\u306e\u30b9\u30b3\u30a2\u3092\u5e73\u5747\u3059\u308b\u3053\u3068\u3067\u6c4e\u5316\u6027\u80fd\u3082\u542b\u3081\u305f\u30e2\u30c7\u30eb\u306e\u6b63\u5f53\u6027\u3092\u8868\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```python\ndef get_accuracy(clf, train_features, train_labels):\n    scores = cross_validation.cross_val_score(clf, train_features, train_labels, cv=10)\n    print(\"Accuracy: %0.2f (+/- %0.2f)\" % (scores.mean(), scores.std() * 2))\n```\n\n`cross_validation_cross_val_score`\u3067\u3053\u308c\u3089\u306e\u691c\u8a3c\u306e\u3059\u3079\u3066\u306escore\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002`cv`\u306fK\u5206\u5272\u306e\u5206\u5272\u306e\u500b\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u4eca\u56de\u306f\u958b\u767a\u7528\u306e\u30c7\u30fc\u30bf\u309210\u500b\u306b\u5206\u5272\u305710\u56de\u306e\u691c\u8a3c\u3092\u884c\u3046\u3002\nscores\u306b\u306f10\u500b\u306escore\u304c\u5165\u3063\u305f\u30ea\u30b9\u30c8\u304c\u8fd4\u3063\u3066\u304f\u308b\u3002\u3053\u308c\u306e\u5e73\u5747\u3092Accuracy\u3068\u3057\u3066\u51fa\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u3067\u6c4e\u5316\u6027\u80fd\u3082\u542b\u3081\u305f\u30e2\u30c7\u30eb\u306e\u6b63\u5f53\u6027\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304c\u3001\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u624b\u3067\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u624b\u3067\u8abf\u6574\u3057\u3066\u3001Accuracy\u3092\u8a08\u7b97\u3059\u308b\u3068\u3044\u3046\u306e\u306f\u975e\u5e38\u306b\u624b\u9593\u306a\u306e\u3067Grid Search\u3068\u3044\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3053\u306e\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3042\u308b\u7a0b\u5ea6\u81ea\u52d5\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n### Grid Search\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u7d4c\u9a13\u7684\u306b\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u3092\u63a2\u7d22\u3059\u308b\u65b9\u6cd5\u304cGrid Search\u3002Python\u3067\u884c\u3046\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3002\n\n```python\ndef grid_search(train_features, train_labels):\n    param_grid = [\n        {'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n        {'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001], 'kernel': ['rbf']},\n    ]\n    \n    clf = GridSearchCV(svm.SVC(C=1), param_grid, n_jobs=-1)\n    clf.fit(train_features, train_labels)\n    print clf.best_estimator_\n```\n\nparam_grid\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3053\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002n_jobs\u306b\u4e26\u5217\u306b\u8a08\u7b97\u3092\u884c\u3046\u30d7\u30ed\u30bb\u30b9\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002-1\u3092\u6307\u5b9a\u3059\u308b\u3068\u30b3\u30a2\u6570\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u9078\u3076\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u4e0e\u3048\u3089\u308c\u305f\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066Grid Search\u3092\u884c\u3046\u3002\n\u6642\u9593\u306f\u5c11\u3057\u304b\u304b\u308b\u304c\u3001\u3053\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u6700\u3082\u30b9\u30b3\u30a2\u304c\u9ad8\u304f\u306a\u308b\u3088\u3046\u306a\u30e2\u30c7\u30eb\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9078\u3076\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3053\u306e\u8a13\u7df4\u30c7\u30fc\u30bf\u3092\u5b9f\u969b\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002"}