{"tags": ["ADDA"], "context": "\nMy_Environment\nUbuntu 14.04 LTS Japanese Remix\non VMWare Fusion v8.5.2 (4635224)\non OS X El Captian v10.11.4\n\nGNU bash, version 4.3.11(1)-release\n\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4 \n(also for g++)\nADDA v.1.3b6\n\n\nThis article is related to ADDA (light scattering simulator based on the discrete dipole approximation).\nIn http://qiita.com/7of9/items/ea30561156acf3ef792a, after reading 'xvec', the InitFieldfromE() is called to transform xvec into starting vector.\nThe InitFieldfromE() is defined as follows:\n\niterative.c\nstatic void InitFieldfromE(void)\n/* sets starting vector for linear system x_0, as well as A.x_0, r_0=b-A.x_0, and |r_0|^2 from given electric field;\n * assumes that xvec contains initial electric field, it is then replaced by x_0\n */\n{\n    // calculate x = (1/cc_sqrt)*V*chi*E (both x and E are stored in xvec)\n    doublecomplex mult[MAX_NMAT][3];\n    int i,j;\n    for (i=0;i<Nmat;i++) for (j=0;j<3;j++) mult[i][j]=1/(cc_sqrt[i][j]*chi_inv[i][j]);\n    nMultSelf_mat(xvec,mult);\n    // calculate A.x_0, r_0=b-A.x_0, and |r_0|^2\n    MatVec(xvec,Avecbuffer,NULL,false,&Timing_MVP,&Timing_MVPComm);\n    nSubtr(rvec,pvec,Avecbuffer,&inprodR,&Timing_InitIterComm);\n}\n\n\nThe nSubtr() is defined at linalg.c as follows:\n\nlinalg.c\noid nSubtr(doublecomplex * restrict a,const doublecomplex * restrict b,const doublecomplex * restrict c,\n    double * restrict inprod,TIME_TYPE *comm_timing)\n// a=b-c, inprod=|a|^2; !!! a,b,c must not alias !!!\n{\n   ...\n\n\n```txt:My_Environment\nUbuntu 14.04 LTS Japanese Remix\non VMWare Fusion v8.5.2 (4635224)\non OS X El Captian v10.11.4\n\nGNU bash, version 4.3.11(1)-release\n\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4 \n(also for g++)\nADDA v.1.3b6\n```\n\nThis article is related to [ADDA (light scattering simulator based on the discrete dipole approximation)](https://github.com/adda-team/adda/).\n\nIn http://qiita.com/7of9/items/ea30561156acf3ef792a, after reading 'xvec', the `InitFieldfromE()` is called to transform xvec into starting vector.\n\nThe `InitFieldfromE()` is defined as follows:\n\n```iterative.c\nstatic void InitFieldfromE(void)\n/* sets starting vector for linear system x_0, as well as A.x_0, r_0=b-A.x_0, and |r_0|^2 from given electric field;\n * assumes that xvec contains initial electric field, it is then replaced by x_0\n */\n{\n\t// calculate x = (1/cc_sqrt)*V*chi*E (both x and E are stored in xvec)\n\tdoublecomplex mult[MAX_NMAT][3];\n\tint i,j;\n\tfor (i=0;i<Nmat;i++) for (j=0;j<3;j++) mult[i][j]=1/(cc_sqrt[i][j]*chi_inv[i][j]);\n\tnMultSelf_mat(xvec,mult);\n\t// calculate A.x_0, r_0=b-A.x_0, and |r_0|^2\n\tMatVec(xvec,Avecbuffer,NULL,false,&Timing_MVP,&Timing_MVPComm);\n\tnSubtr(rvec,pvec,Avecbuffer,&inprodR,&Timing_InitIterComm);\n}\n```\n\nThe `nSubtr()` is defined at `linalg.c` as follows:\n\n```linalg.c\noid nSubtr(doublecomplex * restrict a,const doublecomplex * restrict b,const doublecomplex * restrict c,\n\tdouble * restrict inprod,TIME_TYPE *comm_timing)\n// a=b-c, inprod=|a|^2; !!! a,b,c must not alias !!!\n{\n   ...\n```\n\n"}