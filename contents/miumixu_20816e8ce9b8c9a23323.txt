{"context": " More than 1 year has passed since last update.Clojure \u697d\u3057\u3044\u3067\u3059\u306d\u3002\u4eca\u5e74\u306e 8 \u6708\u304f\u3089\u3044\u304b\u3089\u52c9\u5f37\u3057\u3066\u3044\u3066\u3001\u3044\u3044\u6a5f\u4f1a\u306a\u306e\u3067\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u306b\u53c2\u52a0\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u79c1\u306f\u3042\u307e\u308a\u307e\u3060 Clojure \u306b\u6163\u308c\u3066\u306a\u3044\u306e\u3067 clojure.core \u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u304b\u3089\u3042\u307e\u308a\u76ee\u7acb\u305f\u306a\u3044\u3051\u3069\u610f\u5916\u306b\u4fbf\u5229\u306a\u95a2\u6570\u3092\u7d39\u4ecb\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nalter-meta!\n\u4ed6\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u304b\u3089 Var \u3092\u6301\u3063\u3066\u304d\u3066\u5225\u540d\u3092\u3064\u3051\u3088\u3046\u3068\u3057\u305f\u308a\u3059\u308b\u3068\u304d\u306b\u3001\u843d\u3061\u3066\u3057\u307e\u3046\u30e1\u30bf\u60c5\u5831\u3092\u4ed8\u4e0e\u3057\u305f\u3044\u3068\u304d\u306b\u4f7f\u3048\u307e\u3059\u3002\nexample.core> (def my-inc #'clojure.core/inc)\n#'example.core/my-inc\nexample.core> (clojure.repl/doc my-inc)\n-------------------------\nexample.core/my-inc\n  nil\nnil\nexample.core> (alter-meta! #'my-inc merge\n                (select-keys (meta #'clojure.core/inc) [:doc :arglists]))\n{:line 37, :column 14, :file \"*cider-repl example*\", :name my-inc, :ns #object[clojure.lang.Namespace 0x3b450d77 \"example.core\"], :doc \"Returns a number one greater than num. Does not auto-promote\\n  longs, will throw on overflow. See also: inc'\", :arglists ([x])}\nexample.core> (clojure.repl/doc my-inc)\n-------------------------\nexample.core/my-inc\n([x])\n  Returns a number one greater than num. Does not auto-promote\n  longs, will throw on overflow. See also: inc'\nnil\n\n\nbit-flip\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u771f\u507d\u5024\u3092\u76f4\u63a5\u5165\u308c\u308b\u3053\u3068\u304c\u51fa\u6765\u306a\u304f\u3066\u3001 tinyint \u306a\u3093\u304b\u3067\u5b9f\u88c5\u3059\u308b\u3068\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u3067\u306f 0 or 1 \u306b\u306a\u308b\u3093\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u53cd\u8ee2\u3055\u305b\u305f\u3044\u3068\u304d\u3068\u304b\u306b\u4fbf\u5229\u3067\u3059\u3002\nexample.core> (bit-flip 1 0)\n0\nexample.core> (bit-flip 0 0)\n1\n\n\nbound?\n\u52d5\u7684\u675f\u7e1b\u3092\u4f7f\u3046\u5834\u5408\u3001\u5ba3\u8a00\u6642\u306b\u521d\u671f\u5024\u3092\u4e0e\u3048\u306a\u3044\u30b1\u30fc\u30b9\u304c\u3042\u3063\u3066\u3001\u305d\u3046\u3044\u3046\u3068\u304d\u306b nil? \u306a\u3069\u3068\u3057\u3066\u78ba\u304b\u3081\u3088\u3046\u306b\u3082\u5024\u306b\u675f\u7e1b\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067 false \u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u3046\u3044\u3046\u3068\u304d\u306b\u4f55\u306b\u3082\u675f\u7e1b\u3055\u308c\u3066\u306a\u3044\u3053\u3068\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u4f7f\u3044\u307e\u3059\u3002\nexample.core> (def foo)\n#'example.core/foo\nexample.core> (bound? foo)\nClassCastException clojure.lang.Var$Unbound cannot be cast to clojure.lang.Var  clojure.core/bound?/fn--5267 (core.clj:5283)\nexample.core> (bound? #'foo)\nfalse\n\n\nbutlast\nrest \u306e\u9006\u306b\u306a\u308a\u307e\u3059\u3002\u4e00\u756a\u6700\u5f8c\u3060\u3051\u3092\u53d6\u308a\u9664\u304d\u305f\u3044\u3068\u304d\u3068\u3044\u3046\u306e\u306f\u305f\u307e\u306b\u3042\u308b\u306e\u3067\u899a\u3048\u3066\u304a\u304f\u3068\u4f7f\u3048\u307e\u3059\u3002\nexample.core> (butlast [1 2 3])\n(1 2)\n\n\ndedupe\n\u3053\u308c\u306f\u3042\u307e\u308a\u4f7f\u308f\u306a\u3055\u305d\u3046\u3067\u3059\u304c\u3001 distinct \u306e\u3088\u3046\u306b\u5168\u3066\u306e\u91cd\u8907\u3092\u53d6\u308a\u9664\u304f( like set )\u306e\u3067\u306f\u306a\u304f\u3066\u3001\u9023\u7d9a\u3057\u305f\u91cd\u8907\u306e\u307f\u3092\u6392\u9664\u3057\u307e\u3059\u3002\nexample.core> (dedupe [1 2 3 3 4 5 1 2 3])\n(1 2 3 4 5 1 2 3)\n\n\nextenders\n\u30d7\u30ed\u30c8\u30b3\u30eb\u304c\u4f55\u306b\u7d99\u627f\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u77e5\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\nexample.core> (defprotocol Plus1 (plus1 [x]))\nPlus1\nexample.core> (extend-protocol Plus1 String (plus1 [x] (str x 1)))\nnil\nexample.core> (extend-protocol Plus1 Number (plus1 [x] (inc x)))\nnil\nexample.core> (extenders Plus1)\n(java.lang.String java.lang.Number)\n\n\nfnil\n\u305f\u307e\u306b\u4f7f\u3044\u307e\u3059\u3002\u3042\u308b\u95a2\u6570\u306b nil \u304c\u6e21\u3055\u308c\u305f\u3068\u304d\u306b nil \u306e\u4ee3\u308f\u308a\u306b\u6e21\u3059\u3082\u306e\u3092\u4e88\u3081\u6c7a\u3081\u305f\u65b0\u3057\u3044\u95a2\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\nexample.core> ((fnil inc 0) nil)\n1\nexample.core> ((fnil inc 0) 1)\n2\n\n\nkeep\nmap \u3068 remove \u3092\u8db3\u3057\u305f\u3088\u3046\u306a\u95a2\u6570\u3002 map \u3057\u305f\u3042\u3068\u306b nil \u3092\u524a\u9664\u3057\u305f\u3044\u3068\u304d\u306b\u4f7f\u3048\u307e\u3059\u3002\nexample.core> (defrecord Product [code name])\nexample.core.Product\nexample.core> (defn new-product\n                 ([code] (map->Product {:code code}))\n                 ([code name] (map->Product {:code code :name name})))\n#'example.core/new-product\nexample.core> (def products\n                [(new-product \"CLJ01\" \"clj-v1\")\n                 (new-product \"CLJ02\" \"clj-v2\")\n                 (new-product \"CLJ03\" \"clj-v3\")\n                 (new-product \"CLJ04\")\n                 (new-product \"CLJ05\")])\n#'example.core/products\nexample.core> (keep :name products)\n(\"clj-v1\" \"clj-v2\" \"clj-v3\")\n\n\nmax-key\n\u5168\u3066\u306e\u5f15\u6570\u306b\u5bfe\u3057\u3066\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u8fd4\u3063\u3066\u304d\u305f\u6570\u5024\u304c\u4e00\u756a\u5927\u304d\u3044\u3082\u306e\u3092\u8fd4\u3057\u307e\u3059\u3002\nexample.core> (apply max-key - (range 10))\n0\nexample.core> (apply max-key val {:foo 100 :bar 20 :baz 50})\n[:foo 100]\nexample.core> (max-key :age {:name \"miu\" :age 22} {:name \"mixu\" :age 20})\n{:name \"miu\", :age 22}\n\n\nns-unalias\n\u7279\u5b9a\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u304b\u3089\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u524a\u9664\u3057\u307e\u3059\u3002 REPL \u3067\u30a8\u30a4\u30ea\u30a2\u30b9\u4ed8\u3051\u3066\u3057\u307e\u3063\u305f\u3051\u3069\u4f7f\u308f\u306a\u304f\u306a\u3063\u305f\u3068\u304d\u306a\u3069\u306b\u4f7f\u3048\u307e\u3059\u3002\nexample.core> (require '[clojure.string :as str])\nnil\nexample.core> (str/join \", \" (range 10))\n\"0, 1, 2, 3, 4, 5, 6, 7, 8, 9\"\nexample.core> (ns-unalias *ns* 'str)\nnil\nexample.core> (str/join \", \" (range 10))\nCompilerException java.lang.RuntimeException: No such namespace: str, compiling:(*cider-repl example*:171:14) \n\n\nrand-nth\n\u4e3b\u306b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u3068\u304d\u306a\u3069\u306b\u91cd\u5b9d\u3057\u307e\u3059\u3002\nexample.core> (rand-nth [:foo :bar])\n:bar\nexample.core> (rand-nth [:foo :bar])\n:foo\n\n\nreduce-kv\nreduce \u306b\u5bfe\u3057\u3066\u30de\u30c3\u30d7\u3092\u6e21\u3057\u305f\u3068\u304d\u306b\u3088\u304f\u4f7f\u3046 (fn [x [k v]]) \u3092\u3082\u3063\u3068\u7d20\u76f4\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u305f\u95a2\u6570\u3067\u3059\u3002\nexample.core> (reduce-kv #(+ %1 %3)\n                         0\n                         {:foo 10\n                          :bar 20\n                          :baz 30})\n\n60\n\n\ntake-nth\n\u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u5076\u6570\u500b\u76ee\u3060\u3051\u3092\u53d6\u308a\u51fa\u3059\u306a\u3069\u3068\u3044\u3046\u3053\u3068\u304c\u7c21\u5358\u306b\u51fa\u6765\u307e\u3059\u3002\nexample.core> (defn coerce [& bindings]\n                {:pre [(zero? (rem (count bindings) 3))]}\n                (let [params (take-nth 3 bindings)\n                      fns    (take-nth 3 (drop 2 bindings))]\n                  (map #(%1 %2) fns params)))\n#'example.core/coerce\nexample.core> (coerce  42 :as str,\n                       5/2 :as long)\n(\"42\" 2)\n\n\nwhen-first\n\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u3060\u3051\u3092\u675f\u7e1b\u3059\u308b when \u3067\u3059\u3002\nexample.core> (when-first [x (range 10)]\n                (prn x))\n0\nnil\n\n\n\u307e\u3068\u3081\n\u7c21\u5358\u3067\u3059\u304c\u3001\u79c1\u304c\u4fbf\u5229\u3060\u306a\u3063\u3066\u601d\u3046\u95a2\u6570\u3092\u7d39\u4ecb\u3057\u3066\u307f\u307e\u3057\u305f\u3002 Clojure \u306f\u697d\u3057\u3044\u8a00\u8a9e\u3067\u3059\u306d\uff01\nClojure \u697d\u3057\u3044\u3067\u3059\u306d\u3002\u4eca\u5e74\u306e 8 \u6708\u304f\u3089\u3044\u304b\u3089\u52c9\u5f37\u3057\u3066\u3044\u3066\u3001\u3044\u3044\u6a5f\u4f1a\u306a\u306e\u3067\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u306b\u53c2\u52a0\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u79c1\u306f\u3042\u307e\u308a\u307e\u3060 Clojure \u306b\u6163\u308c\u3066\u306a\u3044\u306e\u3067 clojure.core \u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u304b\u3089\u3042\u307e\u308a\u76ee\u7acb\u305f\u306a\u3044\u3051\u3069\u610f\u5916\u306b\u4fbf\u5229\u306a\u95a2\u6570\u3092\u7d39\u4ecb\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## alter-meta!\n\n\u4ed6\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u304b\u3089 Var \u3092\u6301\u3063\u3066\u304d\u3066\u5225\u540d\u3092\u3064\u3051\u3088\u3046\u3068\u3057\u305f\u308a\u3059\u308b\u3068\u304d\u306b\u3001\u843d\u3061\u3066\u3057\u307e\u3046\u30e1\u30bf\u60c5\u5831\u3092\u4ed8\u4e0e\u3057\u305f\u3044\u3068\u304d\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n```clj\nexample.core> (def my-inc #'clojure.core/inc)\n#'example.core/my-inc\nexample.core> (clojure.repl/doc my-inc)\n-------------------------\nexample.core/my-inc\n  nil\nnil\nexample.core> (alter-meta! #'my-inc merge\n                (select-keys (meta #'clojure.core/inc) [:doc :arglists]))\n{:line 37, :column 14, :file \"*cider-repl example*\", :name my-inc, :ns #object[clojure.lang.Namespace 0x3b450d77 \"example.core\"], :doc \"Returns a number one greater than num. Does not auto-promote\\n  longs, will throw on overflow. See also: inc'\", :arglists ([x])}\nexample.core> (clojure.repl/doc my-inc)\n-------------------------\nexample.core/my-inc\n([x])\n  Returns a number one greater than num. Does not auto-promote\n  longs, will throw on overflow. See also: inc'\nnil\n```\n\n## bit-flip\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u771f\u507d\u5024\u3092\u76f4\u63a5\u5165\u308c\u308b\u3053\u3068\u304c\u51fa\u6765\u306a\u304f\u3066\u3001 tinyint \u306a\u3093\u304b\u3067\u5b9f\u88c5\u3059\u308b\u3068\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u4e0a\u3067\u306f 0 or 1 \u306b\u306a\u308b\u3093\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u53cd\u8ee2\u3055\u305b\u305f\u3044\u3068\u304d\u3068\u304b\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n```clj\nexample.core> (bit-flip 1 0)\n0\nexample.core> (bit-flip 0 0)\n1\n```\n\n## bound?\n\n\u52d5\u7684\u675f\u7e1b\u3092\u4f7f\u3046\u5834\u5408\u3001\u5ba3\u8a00\u6642\u306b\u521d\u671f\u5024\u3092\u4e0e\u3048\u306a\u3044\u30b1\u30fc\u30b9\u304c\u3042\u3063\u3066\u3001\u305d\u3046\u3044\u3046\u3068\u304d\u306b `nil?` \u306a\u3069\u3068\u3057\u3066\u78ba\u304b\u3081\u3088\u3046\u306b\u3082\u5024\u306b\u675f\u7e1b\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067 `false` \u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u3046\u3044\u3046\u3068\u304d\u306b\u4f55\u306b\u3082\u675f\u7e1b\u3055\u308c\u3066\u306a\u3044\u3053\u3068\u3092\u78ba\u304b\u3081\u308b\u305f\u3081\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```clj\nexample.core> (def foo)\n#'example.core/foo\nexample.core> (bound? foo)\nClassCastException clojure.lang.Var$Unbound cannot be cast to clojure.lang.Var  clojure.core/bound?/fn--5267 (core.clj:5283)\nexample.core> (bound? #'foo)\nfalse\n```\n\n## butlast\n\n`rest` \u306e\u9006\u306b\u306a\u308a\u307e\u3059\u3002\u4e00\u756a\u6700\u5f8c\u3060\u3051\u3092\u53d6\u308a\u9664\u304d\u305f\u3044\u3068\u304d\u3068\u3044\u3046\u306e\u306f\u305f\u307e\u306b\u3042\u308b\u306e\u3067\u899a\u3048\u3066\u304a\u304f\u3068\u4f7f\u3048\u307e\u3059\u3002\n\n```clj\nexample.core> (butlast [1 2 3])\n(1 2)\n```\n\n## dedupe \n\n\u3053\u308c\u306f\u3042\u307e\u308a\u4f7f\u308f\u306a\u3055\u305d\u3046\u3067\u3059\u304c\u3001 `distinct` \u306e\u3088\u3046\u306b\u5168\u3066\u306e\u91cd\u8907\u3092\u53d6\u308a\u9664\u304f( like `set` )\u306e\u3067\u306f\u306a\u304f\u3066\u3001\u9023\u7d9a\u3057\u305f\u91cd\u8907\u306e\u307f\u3092\u6392\u9664\u3057\u307e\u3059\u3002\n\n```clj\nexample.core> (dedupe [1 2 3 3 4 5 1 2 3])\n(1 2 3 4 5 1 2 3)\n```\n\n## extenders\n\n\u30d7\u30ed\u30c8\u30b3\u30eb\u304c\u4f55\u306b\u7d99\u627f\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u77e5\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n```clj\nexample.core> (defprotocol Plus1 (plus1 [x]))\nPlus1\nexample.core> (extend-protocol Plus1 String (plus1 [x] (str x 1)))\nnil\nexample.core> (extend-protocol Plus1 Number (plus1 [x] (inc x)))\nnil\nexample.core> (extenders Plus1)\n(java.lang.String java.lang.Number)\n```\n\n## fnil \n\n\u305f\u307e\u306b\u4f7f\u3044\u307e\u3059\u3002\u3042\u308b\u95a2\u6570\u306b `nil` \u304c\u6e21\u3055\u308c\u305f\u3068\u304d\u306b `nil` \u306e\u4ee3\u308f\u308a\u306b\u6e21\u3059\u3082\u306e\u3092\u4e88\u3081\u6c7a\u3081\u305f\u65b0\u3057\u3044\u95a2\u6570\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n\n```clj\nexample.core> ((fnil inc 0) nil)\n1\nexample.core> ((fnil inc 0) 1)\n2\n```\n\n## keep\n\n`map` \u3068 `remove` \u3092\u8db3\u3057\u305f\u3088\u3046\u306a\u95a2\u6570\u3002 `map` \u3057\u305f\u3042\u3068\u306b `nil` \u3092\u524a\u9664\u3057\u305f\u3044\u3068\u304d\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n```clj\nexample.core> (defrecord Product [code name])\nexample.core.Product\nexample.core> (defn new-product\n                 ([code] (map->Product {:code code}))\n                 ([code name] (map->Product {:code code :name name})))\n#'example.core/new-product\nexample.core> (def products\n                [(new-product \"CLJ01\" \"clj-v1\")\n                 (new-product \"CLJ02\" \"clj-v2\")\n                 (new-product \"CLJ03\" \"clj-v3\")\n                 (new-product \"CLJ04\")\n                 (new-product \"CLJ05\")])\n#'example.core/products\nexample.core> (keep :name products)\n(\"clj-v1\" \"clj-v2\" \"clj-v3\")\n```\n\n## max-key\n\n\u5168\u3066\u306e\u5f15\u6570\u306b\u5bfe\u3057\u3066\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u8fd4\u3063\u3066\u304d\u305f\u6570\u5024\u304c\u4e00\u756a\u5927\u304d\u3044\u3082\u306e\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```clj\nexample.core> (apply max-key - (range 10))\n0\nexample.core> (apply max-key val {:foo 100 :bar 20 :baz 50})\n[:foo 100]\nexample.core> (max-key :age {:name \"miu\" :age 22} {:name \"mixu\" :age 20})\n{:name \"miu\", :age 22}\n```\n\n## ns-unalias\n\n\u7279\u5b9a\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u304b\u3089\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u524a\u9664\u3057\u307e\u3059\u3002 REPL \u3067\u30a8\u30a4\u30ea\u30a2\u30b9\u4ed8\u3051\u3066\u3057\u307e\u3063\u305f\u3051\u3069\u4f7f\u308f\u306a\u304f\u306a\u3063\u305f\u3068\u304d\u306a\u3069\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n```clj\nexample.core> (require '[clojure.string :as str])\nnil\nexample.core> (str/join \", \" (range 10))\n\"0, 1, 2, 3, 4, 5, 6, 7, 8, 9\"\nexample.core> (ns-unalias *ns* 'str)\nnil\nexample.core> (str/join \", \" (range 10))\nCompilerException java.lang.RuntimeException: No such namespace: str, compiling:(*cider-repl example*:171:14) \n```\n\n## rand-nth \n\n\u4e3b\u306b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u3068\u304d\u306a\u3069\u306b\u91cd\u5b9d\u3057\u307e\u3059\u3002\n\n```clj\nexample.core> (rand-nth [:foo :bar])\n:bar\nexample.core> (rand-nth [:foo :bar])\n:foo\n```\n\n## reduce-kv\n\n`reduce` \u306b\u5bfe\u3057\u3066\u30de\u30c3\u30d7\u3092\u6e21\u3057\u305f\u3068\u304d\u306b\u3088\u304f\u4f7f\u3046 `(fn [x [k v]])` \u3092\u3082\u3063\u3068\u7d20\u76f4\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u305f\u95a2\u6570\u3067\u3059\u3002\n\n```clj\nexample.core> (reduce-kv #(+ %1 %3)\n                         0\n                         {:foo 10\n                          :bar 20\n                          :baz 30})\n\n60\n```\n\n## take-nth\n\n\u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u5076\u6570\u500b\u76ee\u3060\u3051\u3092\u53d6\u308a\u51fa\u3059\u306a\u3069\u3068\u3044\u3046\u3053\u3068\u304c\u7c21\u5358\u306b\u51fa\u6765\u307e\u3059\u3002\n\n```clj\nexample.core> (defn coerce [& bindings]\n                {:pre [(zero? (rem (count bindings) 3))]}\n                (let [params (take-nth 3 bindings)\n                      fns    (take-nth 3 (drop 2 bindings))]\n                  (map #(%1 %2) fns params)))\n#'example.core/coerce\nexample.core> (coerce  42 :as str,\n                       5/2 :as long)\n(\"42\" 2)\n```\n\n## when-first\n\n\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u5148\u982d\u3060\u3051\u3092\u675f\u7e1b\u3059\u308b `when` \u3067\u3059\u3002\n\n```clj\nexample.core> (when-first [x (range 10)]\n                (prn x))\n0\nnil\n```\n\n## \u307e\u3068\u3081\n\n\u7c21\u5358\u3067\u3059\u304c\u3001\u79c1\u304c\u4fbf\u5229\u3060\u306a\u3063\u3066\u601d\u3046\u95a2\u6570\u3092\u7d39\u4ecb\u3057\u3066\u307f\u307e\u3057\u305f\u3002 Clojure \u306f\u697d\u3057\u3044\u8a00\u8a9e\u3067\u3059\u306d\uff01\n", "tags": ["Clojure"]}