{"context": " More than 1 year has passed since last update.JavaScript\u3067\u306f\u69d8\u3005\u306a\u5024\u304c\u771f\u507d\u5024\u3068\u3057\u3066\u7279\u5fb4\u7684\u306a\u632f\u308b\u821e\u3044\u3092\u898b\u305b\u307e\u3059\u3002  \n\nfalse\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u5024\n\nundefined\nnull\nfalse\n-0, 0, NaN\n\"\"\n\n\ntrue\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u5024\n\ntrue\n-0, 0, NaN\u4ee5\u5916\u306enumber\n\"\"\u4ee5\u5916\u306estring\n\u305d\u306e\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\u3053\u308c\u3089\u306fif\u6587\u3067\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u8aad\u307f\u3084\u3059\u304f\u3082\u8aad\u307f\u306b\u304f\u304f\u3082\u306a\u308b\u9762\u767d\u3044\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u304c\u3001\u540c\u69d8\u306e\u3053\u3068\u3092Dart\u3067\u3082\u691c\u8a3c\u3057\u3066\u307f\u307e\u3057\u305f\u3002  \n\nundefined\nDart\u306b\u306f\u305d\u3082\u305d\u3082undefined\u3068\u3044\u3046\u5024\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u672a\u5b9a\u7fa9\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u547c\u3073\u3060\u305d\u3046\u3068\u3059\u308b\u3068\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u306e\u3067\u3001undefined\u306b\u3064\u3044\u3066\u306f\u771f\u507d\u5024\u304c\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\n  /// NoSuchMethodError: method not found 'get:obj'\n  test(\"undefined\", () {\n    if (obj) {\n      expect(true, isFalse);\n    } else {\n      expect(false, isFalse);\n   }\n  });\n\n\u9762\u767d\u3044\u306e\u306f\u3001obj\u3068\u3044\u3046\u540d\u524d\u306e\u5909\u6570\u304c\u306a\u3044\u3068\u304d\u3001obj\u306egetter\u304c\u306a\u3044\u3068\u3044\u3046\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3053\u3068\u3067\u3059\u306d\u3002\n\nnull\nnull\u306b\u95a2\u3057\u3066\u306fJavaScript\u3068\u540c\u69d8\u306e\u632f\u308b\u821e\u3044\u3092\u898b\u305b\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u76f4\u611f\u7684\u306a\u306e\u3067\u9055\u548c\u611f\u3082\u306a\u3044\u3067\u3059\u306d\u3002\n  /// Passed : null => false\n  test(\"null\", () {\n    var obj;\n    if (obj) {\n      expect(true, isFalse);\n    } else {\n      expect(false, isFalse);\n    }\n  });\n\n\nnumber\nnumber\u306f\u3059\u3079\u3066\u306e\u5834\u5408\u306b\u304a\u3044\u3066false\u3068\u3057\u3066\u632f\u308b\u821e\u3044\u307e\u3057\u305f\u3002\n  group(\"number\", () {\n    /// Passed : 0 => false\n    test(\"0\", () {\n      if (0) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Passed : -0 => false\n    test(\"-0\", () {\n      if (-0) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : -1 => false\n    test(\"-1\", () {\n      if (-1) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n    /// Failed : 1 => false\n    test(\"1\", () {\n      if (1) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n    /// Passed : NaN => false\n    test(\"NaN\", () {\n      if (double.NAN) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n  });\n\n\nstring\nstring\u306b\u304a\u3044\u3066\u3082\u3001\u3059\u3079\u3066\u306e\u5834\u5408\u3067false\u3068\u3057\u3066\u632f\u308b\u821e\u3044\u307e\u3057\u305f\u3002\n  group(\"string\", () {\n    /// Passed : \"\" => false\n    test(\"empty\", () {\n      if (\"\") {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : \"true\" => false\n    test(\"true string\", () {\n      if (\"true\") {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n  });\n\n\n\u305d\u306e\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\u305d\u306e\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u3057\u3066\u3082\u3059\u3079\u3066false\u306e\u632f\u308b\u821e\u3044\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n  group(\"object\", () {\n    /// Passed : {} => false\n    test(\"empty object\", () {\n      if ({\n      }) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : object => false\n    test(\"not empty object\", () {\n      if ({\n          \"name\" : \"laco\",\n          \"flag\" : false\n      }) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n  });\n\n\n\u307e\u3068\u3081\n\nDart\u3067true\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u5024\n\ntrue\n\n\nDart\u3067false\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u5024\n\n\u305d\u306e\u4ed6\u3059\u3079\u3066\n\n\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3055\u3059\u304c\u578b\u5b89\u5168\u3068\u3044\u3046\u3079\u304d\u3067\u3057\u3087\u3046\u3002\u611f\u52d5\u3057\u307e\u3057\u305f\u3002\u4eca\u56de\u306e\u8abf\u67fb\u306b\u4f7f\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u6700\u5f8c\u306b\u6dfb\u4ed8\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u5b9f\u884c\u306f$ dart object_as_bool_test.dart\u3067\u3059\u3002  \n\u3061\u306a\u307f\u306b\u3001dart\u306e\u5b9f\u884c\u6642\u306b$ dart --checked object_as_bool_test.dart\u3068\u3059\u308b\u3068\u3001boolean\u4ee5\u5916\u3092\u771f\u507d\u5024\u3068\u3057\u3066\u6271\u304a\u3046\u3068\u3057\u3066\u3044\u308b\u4e8b\u81ea\u4f53\u304c\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u30c6\u30b9\u30c8\u304c\u3059\u3079\u3066\u30a8\u30e9\u30fc\u843d\u3061\u3057\u307e\u3059\u3002use struct\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u3059\u306d\u3002  \n\nobject_as_bool_test.dart\nimport 'package:unittest/unittest.dart';\n\nmain() {\n\n  /// NoSuchMethodError: method not found 'get:obj'\n  test(\"undefined\", () {\n    if (obj) {\n      expect(true, isFalse);\n    } else {\n      expect(false, isFalse);\n    }\n  });\n  /// Passed : null => false\n  test(\"null\", () {\n    var obj;\n    if (obj) {\n      expect(true, isFalse);\n    } else {\n      expect(false, isFalse);\n    }\n  });\n  group(\"number\", () {\n    /// Passed : 0 => false\n    test(\"0\", () {\n      if (0) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Passed : -0 => false\n    test(\"-0\", () {\n      if (-0) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : -1 => false\n    test(\"-1\", () {\n      if (-1) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n    /// Failed : 1 => false\n    test(\"1\", () {\n      if (1) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n    /// Passed : NaN => false\n    test(\"NaN\", () {\n      if (double.NAN) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n  });\n  group(\"string\", () {\n    /// Passed : \"\" => false\n    test(\"empty\", () {\n      if (\"\") {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : \"true\" => false\n    test(\"true string\", () {\n      if (\"true\") {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n  });\n  group(\"object\", () {\n    /// Passed : {} => false\n    test(\"empty object\", () {\n      if ({\n      }) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : object => false\n    test(\"not empty object\", () {\n      if ({\n          \"name\" : \"laco\",\n          \"flag\" : false\n      }) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n  });\n}\n\n\nJavaScript\u3067\u306f\u69d8\u3005\u306a\u5024\u304c\u771f\u507d\u5024\u3068\u3057\u3066\u7279\u5fb4\u7684\u306a\u632f\u308b\u821e\u3044\u3092\u898b\u305b\u307e\u3059\u3002  \n\n### false\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u5024\n\n- undefined\n- null\n- false\n- -0, 0, NaN\n- \"\"\n\n### true\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u5024\n\n- true\n- -0, 0, NaN\u4ee5\u5916\u306enumber\n- \"\"\u4ee5\u5916\u306estring\n- \u305d\u306e\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\u3053\u308c\u3089\u306fif\u6587\u3067\u6d3b\u7528\u3059\u308b\u3053\u3068\u3067\u8aad\u307f\u3084\u3059\u304f\u3082\u8aad\u307f\u306b\u304f\u304f\u3082\u306a\u308b\u9762\u767d\u3044\u30c6\u30af\u30cb\u30c3\u30af\u3067\u3059\u304c\u3001\u540c\u69d8\u306e\u3053\u3068\u3092Dart\u3067\u3082\u691c\u8a3c\u3057\u3066\u307f\u307e\u3057\u305f\u3002  \n\n## undefined\n\nDart\u306b\u306f\u305d\u3082\u305d\u3082undefined\u3068\u3044\u3046\u5024\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u672a\u5b9a\u7fa9\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u547c\u3073\u3060\u305d\u3046\u3068\u3059\u308b\u3068\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u306e\u3067\u3001undefined\u306b\u3064\u3044\u3066\u306f\u771f\u507d\u5024\u304c\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\n\n```dart\n  /// NoSuchMethodError: method not found 'get:obj'\n  test(\"undefined\", () {\n    if (obj) {\n      expect(true, isFalse);\n    } else {\n      expect(false, isFalse);\n   }\n  });\n```\n\n\u9762\u767d\u3044\u306e\u306f\u3001`obj`\u3068\u3044\u3046\u540d\u524d\u306e\u5909\u6570\u304c\u306a\u3044\u3068\u304d\u3001`obj`\u306egetter\u304c\u306a\u3044\u3068\u3044\u3046\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3053\u3068\u3067\u3059\u306d\u3002\n\n## null\n\nnull\u306b\u95a2\u3057\u3066\u306fJavaScript\u3068\u540c\u69d8\u306e\u632f\u308b\u821e\u3044\u3092\u898b\u305b\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u76f4\u611f\u7684\u306a\u306e\u3067\u9055\u548c\u611f\u3082\u306a\u3044\u3067\u3059\u306d\u3002\n\n```dart\n  /// Passed : null => false\n  test(\"null\", () {\n    var obj;\n    if (obj) {\n      expect(true, isFalse);\n    } else {\n      expect(false, isFalse);\n    }\n  });\n```\n\n## number\n\nnumber\u306f\u3059\u3079\u3066\u306e\u5834\u5408\u306b\u304a\u3044\u3066false\u3068\u3057\u3066\u632f\u308b\u821e\u3044\u307e\u3057\u305f\u3002\n\n```dart\n  group(\"number\", () {\n    /// Passed : 0 => false\n    test(\"0\", () {\n      if (0) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Passed : -0 => false\n    test(\"-0\", () {\n      if (-0) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : -1 => false\n    test(\"-1\", () {\n      if (-1) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n    /// Failed : 1 => false\n    test(\"1\", () {\n      if (1) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n    /// Passed : NaN => false\n    test(\"NaN\", () {\n      if (double.NAN) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n  });\n```\n\n## string\n\nstring\u306b\u304a\u3044\u3066\u3082\u3001\u3059\u3079\u3066\u306e\u5834\u5408\u3067false\u3068\u3057\u3066\u632f\u308b\u821e\u3044\u307e\u3057\u305f\u3002\n\n```dart\n  group(\"string\", () {\n    /// Passed : \"\" => false\n    test(\"empty\", () {\n      if (\"\") {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : \"true\" => false\n    test(\"true string\", () {\n      if (\"true\") {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n  });\n```\n\n## \u305d\u306e\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\u305d\u306e\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u95a2\u3057\u3066\u3082\u3059\u3079\u3066false\u306e\u632f\u308b\u821e\u3044\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```dart\n  group(\"object\", () {\n    /// Passed : {} => false\n    test(\"empty object\", () {\n      if ({\n      }) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : object => false\n    test(\"not empty object\", () {\n      if ({\n          \"name\" : \"laco\",\n          \"flag\" : false\n      }) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n  });\n```\n\n# \u307e\u3068\u3081\n\n### Dart\u3067true\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u5024\n\n- true\n\n### Dart\u3067false\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u5024\n\n- \u305d\u306e\u4ed6\u3059\u3079\u3066\n\n\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3055\u3059\u304c\u578b\u5b89\u5168\u3068\u3044\u3046\u3079\u304d\u3067\u3057\u3087\u3046\u3002\u611f\u52d5\u3057\u307e\u3057\u305f\u3002\u4eca\u56de\u306e\u8abf\u67fb\u306b\u4f7f\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u6700\u5f8c\u306b\u6dfb\u4ed8\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u5b9f\u884c\u306f`$ dart object_as_bool_test.dart`\u3067\u3059\u3002  \n\n\u3061\u306a\u307f\u306b\u3001dart\u306e\u5b9f\u884c\u6642\u306b`$ dart --checked object_as_bool_test.dart`\u3068\u3059\u308b\u3068\u3001boolean\u4ee5\u5916\u3092\u771f\u507d\u5024\u3068\u3057\u3066\u6271\u304a\u3046\u3068\u3057\u3066\u3044\u308b\u4e8b\u81ea\u4f53\u304c\u30a8\u30e9\u30fc\u3068\u306a\u3063\u3066\u30c6\u30b9\u30c8\u304c\u3059\u3079\u3066\u30a8\u30e9\u30fc\u843d\u3061\u3057\u307e\u3059\u3002`use struct`\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u3059\u306d\u3002  \n\n```dart:object_as_bool_test.dart\nimport 'package:unittest/unittest.dart';\n\nmain() {\n\n  /// NoSuchMethodError: method not found 'get:obj'\n  test(\"undefined\", () {\n    if (obj) {\n      expect(true, isFalse);\n    } else {\n      expect(false, isFalse);\n    }\n  });\n  /// Passed : null => false\n  test(\"null\", () {\n    var obj;\n    if (obj) {\n      expect(true, isFalse);\n    } else {\n      expect(false, isFalse);\n    }\n  });\n  group(\"number\", () {\n    /// Passed : 0 => false\n    test(\"0\", () {\n      if (0) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Passed : -0 => false\n    test(\"-0\", () {\n      if (-0) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : -1 => false\n    test(\"-1\", () {\n      if (-1) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n    /// Failed : 1 => false\n    test(\"1\", () {\n      if (1) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n    /// Passed : NaN => false\n    test(\"NaN\", () {\n      if (double.NAN) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n  });\n  group(\"string\", () {\n    /// Passed : \"\" => false\n    test(\"empty\", () {\n      if (\"\") {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : \"true\" => false\n    test(\"true string\", () {\n      if (\"true\") {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n  });\n  group(\"object\", () {\n    /// Passed : {} => false\n    test(\"empty object\", () {\n      if ({\n      }) {\n        expect(true, isFalse);\n      } else {\n        expect(false, isFalse);\n      }\n    });\n    /// Failed : object => false\n    test(\"not empty object\", () {\n      if ({\n          \"name\" : \"laco\",\n          \"flag\" : false\n      }) {\n        expect(true, isTrue);\n      } else {\n        expect(false, isTrue);\n      }\n    });\n  });\n}\n```\n\n\n\n", "tags": ["Dart"]}