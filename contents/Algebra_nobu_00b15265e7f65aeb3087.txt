{"context": "\n\n\u3010\u30e9\u30a4\u30d6\u30e9\u30ea\u8aac\u660e\u3011\n\u3000pep8\u306e\u30b9\u30bf\u30a4\u30eb\u306b\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\n\n\u3010\u30d7\u30ed\u30b0\u30e9\u30e0\u3011\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u65b9\u6cd5\n\u3000autopep8 --in-place --aggressive --aggressive <filename>\n\u5b9f\u884c\u524d\n\nautopep8_before.py\nimport math, sys;\n\ndef example1():\n    ####This is a long comment. This should be wrapped to fit within 72 characters.\n    some_tuple=(   1,2, 3,'a'  );\n    some_variable={'long':'Long code lines should be wrapped within 79 characters.',\n    'other':[math.pi, 100,200,300,9876543210,'This is a long string that goes on'],\n    'more':{'inner':'This whole logical line should be wrapped.',some_tuple:[1,\n    20,300,40000,500000000,60000000000000000]}}\n    return (some_tuple, some_variable)\ndef example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\nclass Example3(   object ):\n    def __init__    ( self, bar ):\n     #Comments should have a space after the hash.\n     if bar : bar+=1;  bar=bar* bar   ; return bar\n     else:\n                    some_string = \"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"\n                    return (sys.path, some_string)\n\n\n\u5b9f\u884c\u5f8c\n\nautopep8_after.py\nimport math\nimport sys\n\n\ndef example1():\n    # This is a long comment. This should be wrapped to fit within 72\n    # characters.\n    some_tuple = (1, 2, 3, 'a')\n    some_variable = {\n        'long': 'Long code lines should be wrapped within 79 characters.',\n        'other': [\n            math.pi,\n            100,\n            200,\n            300,\n            9876543210,\n            'This is a long string that goes on'],\n        'more': {\n            'inner': 'This whole logical line should be wrapped.',\n            some_tuple: [\n                1,\n                20,\n                300,\n                40000,\n                500000000,\n                60000000000000000]}}\n    return (some_tuple, some_variable)\n\n\ndef example2(): return ('' in {'f': 2}) in {'has_key() is deprecated': True}\n\n\nclass Example3(object):\n\n    def __init__(self, bar):\n        # Comments should have a space after the hash.\n        if bar:\n            bar += 1\n            bar = bar * bar\n            return bar\n        else:\n            some_string = \"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"\n            return (sys.path, some_string)\n\n\n\n\n\u3010\u53c2\u8003\u30b5\u30a4\u30c8\u3011\n\u3000pypi\n\u3000github\n#\u3010\u30e9\u30a4\u30d6\u30e9\u30ea\u8aac\u660e\u3011\n\u3000pep8\u306e\u30b9\u30bf\u30a4\u30eb\u306b\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u3059\u308b\n\n#\u3010\u30d7\u30ed\u30b0\u30e9\u30e0\u3011\n\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u65b9\u6cd5\n\u3000`autopep8 --in-place --aggressive --aggressive <filename>`\n\n\u5b9f\u884c\u524d\n\n```py:autopep8_before.py\nimport math, sys;\n\ndef example1():\n    ####This is a long comment. This should be wrapped to fit within 72 characters.\n    some_tuple=(   1,2, 3,'a'  );\n    some_variable={'long':'Long code lines should be wrapped within 79 characters.',\n    'other':[math.pi, 100,200,300,9876543210,'This is a long string that goes on'],\n    'more':{'inner':'This whole logical line should be wrapped.',some_tuple:[1,\n    20,300,40000,500000000,60000000000000000]}}\n    return (some_tuple, some_variable)\ndef example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\nclass Example3(   object ):\n    def __init__    ( self, bar ):\n     #Comments should have a space after the hash.\n     if bar : bar+=1;  bar=bar* bar   ; return bar\n     else:\n                    some_string = \"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"\n                    return (sys.path, some_string)\n```\n\n\u5b9f\u884c\u5f8c\n\n```py:autopep8_after.py\nimport math\nimport sys\n\n\ndef example1():\n    # This is a long comment. This should be wrapped to fit within 72\n    # characters.\n    some_tuple = (1, 2, 3, 'a')\n    some_variable = {\n        'long': 'Long code lines should be wrapped within 79 characters.',\n        'other': [\n            math.pi,\n            100,\n            200,\n            300,\n            9876543210,\n            'This is a long string that goes on'],\n        'more': {\n            'inner': 'This whole logical line should be wrapped.',\n            some_tuple: [\n                1,\n                20,\n                300,\n                40000,\n                500000000,\n                60000000000000000]}}\n    return (some_tuple, some_variable)\n\n\ndef example2(): return ('' in {'f': 2}) in {'has_key() is deprecated': True}\n\n\nclass Example3(object):\n\n    def __init__(self, bar):\n        # Comments should have a space after the hash.\n        if bar:\n            bar += 1\n            bar = bar * bar\n            return bar\n        else:\n            some_string = \"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"\n            return (sys.path, some_string)\n\n```\n\n#\u3010\u53c2\u8003\u30b5\u30a4\u30c8\u3011\n\u3000[pypi](https://pypi.python.org/pypi/autopep8/1.2.1)\n\u3000[github](https://github.com/hhatto/autopep8)\n", "tags": ["\u3081\u3056\u305b\u30e9\u30a4\u30d6\u30e9\u30ea\u30de\u30b9\u30bf\u30fc", "Python", "python2.7"]}