{"tags": ["Try!Swift2017", "Swift", "XCTest", "iOS"], "context": "\n\n\u306f\u3058\u3081\u306b\nTry! Swift2017\u306b\u53c2\u52a0\u3057\u307e\u3057\u305f\u3002\n\u3068\u3066\u3082\u52c9\u5f37\u306b\u306a\u3063\u305f\u30c6\u30fc\u30de\u306e1\u3064\u3067\u3042\u308b\u300c\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3088\u308a\u4fbf\u5229\u306b\u3059\u308b\u300d\u3092\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3063\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3059\u308b\u30b3\u30c4\u3092Jon Reid\u3055\u3093\u304c\u767a\u8868\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u306a\u305c\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3059\u308b\u304b\uff1f\n\u30fb\u5b9f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3059\u308b\u3068\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\n\u30fb\u5b9f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3082\u3042\u308b\u305f\u3081\n\n\u4eca\u56de\u3054\u8aac\u660e\u3059\u308b\u4f8b\n\u30a6\u30a7\u30fc\u30bf\u30fc\u304c\u304a\u5ba2\u69d8\u304b\u3089\u306e\u6ce8\u6587\u3092\u53d7\u3051\u3001\u30b3\u30c3\u30af\u306b\u6ce8\u6587\u3092\u6b63\u3057\u304f\u4f1d\u3048\u3089\u308c\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u30e1\u30cb\u30e5\u30fc\u306f\u30e9\u30fc\u30e1\u30f3\u3067\u3059\u3002\n\n\u767b\u5834\u4eba\u7269\n\n\n\n\u767b\u5834\u4eba\u7269\n\u8aac\u660e\n\n\n\n\nWaiter\n\u30a6\u30a7\u30fc\u30bf\u30fc\u3000\n\n\nCookProtocol\n\u30e9\u30fc\u30e1\u30f3\u3092\u4f5c\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\n\n\nRealCook\n\u5b9f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30c3\u30af\n\n\nMockCook\n\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30c3\u30af\u3000\n\n\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306f\u3001Waiter\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\n\u5b9f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3082\u3001\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n1.\u6e96\u5099\n\n1.1.\u30e9\u30fc\u30e1\u30f3\u306e\u7a2e\u985e\n\u30e9\u30fc\u30e1\u30f3\u306e\u7a2e\u985e\u306f\u3001\u5869\u3001\u91a4\u6cb9\u3001\u5473\u564c\u3001\u8c5a\u9aa8\u306e4\u7a2e\u985e\u3068\u3057\u307e\u3059\u3002\n\nRamenSoup.swift\nimport Foundation\n\nenum RamenSoup {\n    case shio       //\u5869\n    case shoyu      //\u91a4\u6cb9\n    case miso       //\u5473\u564c\n    case tonkotu    //\u3068\u3093\u3053\u3064\n}\n\n\n\n1.2. \u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u5b9a\u7fa9\n\u30e9\u30fc\u30e1\u30f3\u3092\u4f5c\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u306f\u3001\u4f55\u676f\u304b\u3001\u30b9\u30fc\u30d7\u306e\u7a2e\u985e\u306f\u3001\u30c8\u30c3\u30d4\u30f3\u30b0\u306f\u4f55\u304b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u30c8\u30c3\u30d4\u30f3\u30b0\u306f\u8907\u6570\u500b\u9078\u3079\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\nCookProtocol.swift\nimport Foundation\n\nprotocol CookProtocol {\n\n    func cookRamen(\n        bowls: Int,                 // \u4f55\u676f\n        soup: RamenSoup,            // \u30b9\u30fc\u30d7\u306e\u7a2e\u985e\n        extras: [String]) -> Void   // \u30c8\u30c3\u30d4\u30f3\u30b0\n}\n\n\n\n1.3. \u30a6\u30a7\u30fc\u30bf\u30fc\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\n\u30a6\u30a7\u30fc\u30bf\u30fc\u306e\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u6ce8\u6587\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001\u5473\u564c\u30e9\u30fc\u30e1\u30f3\u30922\u676f\u3001\u308f\u304b\u3081\u3068\u5375\u3092\u30c8\u30c3\u30d4\u30f3\u30b0\u3068\u3057\u3066\u306e\u305b\u308b\u4f8b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\uff08\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u307e\u3059\u3002\uff09\n\nWaiter.swift\nimport Foundation\n\nstruct Waiter {\n    let cook: CookProtocol\n\n    /// \u30a6\u30a8\u30fc\u30bf\u30fc\u304c\u30e9\u30fc\u30e1\u30f3\u3092\u6ce8\u6587\u3059\u308b (\u5473\u564c\u30e9\u30fc\u30e1\u30f3\u30922\u676f\u3001\u308f\u304b\u3081\u3068\u5375\u3092\u30c8\u30c3\u30d4\u30f3\u30b0)\n    func order() {        \n        cook.cookRamen(bowls: 2, soup: .miso, extras: [\"wakame\",\"tamago\"])\n    }\n}\n\n\n\n2. \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\u305d\u308c\u3067\u306f\u3001\u672c\u984c\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n2.1. \u3010\u30d1\u30bf\u30fc\u30f31\u3011 Boolean\u3092\u5229\u7528\u3057\u3066\u5bfe\u8c61\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\nWaiter\u306eorder\u30e1\u30bd\u30c3\u30c9\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001order\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u304b\u5426\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n2.1.1. \u30e2\u30c3\u30af\n\nMockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n\n    var cookRamenWasCalled = false\n\n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenWasCalled = true\n    }\n}\n\n\n\n2.1.2. \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\nWaiterTests.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n    }\n\n    override func tearDown() {\n        super.tearDown()\n    }\n\n    func testOrder_ShouldCookRamen() {        \n\n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n\n        waiter.order()        \n        XCTAssertTrue(mocCook.cookRamenWasCalled)\n    }\n}\n\n\n\u3088\u304f\u3042\u308b\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u30d1\u30bf\u30fc\u30f3\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001order\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u304b\u306e\u78ba\u8a8d\u306f\u3067\u304d\u307e\u3059\u304c\u3001\nMockCook\u30af\u30e9\u30b9\u306b\u60c5\u5831\u304c\u4fdd\u5b58\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u4f55\u56de\u547c\u3070\u308c\u305f\u304b\u306e\u78ba\u8a8d\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n2.2. \u3010\u30d1\u30bf\u30fc\u30f32\u3011 \u4f55\u56de\u547c\u3070\u308c\u305f\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\n\u3053\u3053\u3067\u306f\u3001\u547c\u3070\u308c\u305f\u56de\u6570\u3092\u4fdd\u5b58\u3057\u3001\u4f55\u56de\u547c\u3070\u308c\u305f\u304b\u3092\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u6539\u826f\u3057\u307e\u3059\u3002\n1\u56de\u3057\u304b\u547c\u3070\u308c\u308b\u4e88\u5b9a\u304c\u306a\u3044\u306f\u305a\u304c\u3001\u8907\u6570\u56de\u547c\u3070\u308c\u3066\u3057\u307e\u3046\u30b1\u30fc\u30b9\u3092\u9632\u3052\u307e\u3059\u3002\n\n2.2.1. \u30e2\u30c3\u30af\n\nMockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n\n    var cookRamenCallCount = 0\n\n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenCallCount += 1\n    }\n}\n\n\n\n2.2.2. \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\nWaiterTests.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n    }\n\n    override func tearDown() {\n        super.tearDown()\n    }\n\n    func testOrder_ShouldCookRamen() {        \n\n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n\n        waiter.order()        \n        XCTAssertEqual(mocCook.cookRamenCallCount, 1)\n    }\n}\n\n\n\n2.3. \u3010\u30d1\u30bf\u30fc\u30f33\u3011 \u76f4\u8fd1\u5165\u529b\u3055\u308c\u305f\u5f15\u6570\u306e\u60c5\u5831\u3082\u30c6\u30b9\u30c8\u3059\u308b\n\u3053\u3053\u3067\u306f\u3001\u5165\u529b\u3055\u308c\u305f\u5f15\u6570\u306e\u60c5\u5831\u3092\u8a18\u9332\u3057\u3001\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u30aa\u30fc\u30c0\u30fc\u30df\u30b9\uff08\u6ce8\u6587\u3059\u308b\u30e9\u30fc\u30e1\u30f3\u306e\u7a2e\u985e\u3084\u30c8\u30c3\u30d4\u30f3\u30b0\u306a\u3069\uff09\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n2.3.1. \u30e2\u30c3\u30af\n\nMockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n\n    var cookRamenCallCount = 0\n    var cookRamenLastBowls = 0\n    var cookRamenLastSoup: RamenSoup?\n    var cookRamenLastExtras: [String] = []\n\n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenCallCount += 1\n        cookRamenLastBowls = bowls\n        cookRamenLastSoup = soup\n        cookRamenLastExtras = extras\n    }\n}\n\n\n\n2.3.2. \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\nWaiterTests.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n    }\n\n    override func tearDown() {\n        super.tearDown()\n    }\n\n    func testOrder_ShouldCookRamen() {        \n\n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n\n        waiter.order()        \n        XCTAssertEqual(mocCook.cookRamenCallCount, 1)\n        XCTAssertEqual(mocCook.cookRamenLastBowls, 2)\n        XCTAssertEqual(mocCook.cookRamenLastSoup, .miso)\n        XCTAssertEqual(mocCook.cookRamenLastExtras, [\"wakame\",\"tamago\"])        \n    }\n}\n\n\n\n(1) \u30d8\u30eb\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3059\u308b\n\u3053\u3053\u3067\u3001\u69d8\u3005\u306e\u30b1\u30fc\u30b9\u306b\u5bfe\u3057\u3066\u3001\u4f55\u5ea6\u3082\u540c\u3058\u3088\u3046\u306a\u30a2\u30b5\u30fc\u30c8\u3092\u66f8\u304b\u306c\u3088\u3046\u306b\u3001\n\u30d8\u30eb\u30d1\u30fc\u7528\u306e\u30e1\u30bd\u30c3\u30c9(verifyCookRamen)\u3092\u5b9a\u7fa9\u3057\u3001\u30c6\u30b9\u30c8\u3067\u305d\u306e\u30d8\u30eb\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\nMockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n\n    var cookRamenCallCount = 0\n    var cookRamenLastBowls = 0\n    var cookRamenLastSoup: RamenSoup?\n    var cookRamenLastExtras: [String] = []\n\n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenCallCount += 1\n        cookRamenLastBowls = bowls\n        cookRamenLastSoup = soup\n        cookRamenLastExtras = extras\n    }\n\n    func verifyCookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {\n\n        XCTAssertEqual(cookRamenCallCount, 1)\n        XCTAssertEqual(cookRamenLastBowls, bowls)\n        XCTAssertEqual(cookRamenLastSoup, soup)\n        XCTAssertEqual(cookRamenLastExtras, extras)\n    }\n}\n\n\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n    }\n\n    override func tearDown() {\n        super.tearDown()\n    }\n\n    func testOrder_ShouldCookRamen() {        \n\n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n\n        waiter.order()        \n        mocCook.verifyCookRamen(bowls: 2, soup: .miso, extras: [\"wakame\",\"tamago\"])\n    }    \n}\n\n\n(2) \u3069\u3053\u304b\u3089\u547c\u3070\u308c\u305f\u304b\u3082\u30c6\u30b9\u30c8\u3059\u308b\n\u3053\u3053\u3067\u306f\u3001\u4e88\u671f\u305b\u306c\u7b87\u6240\u304b\u3089\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u8003\u3048\u3089\u308c\u308b\u305f\u3081\u3001\n\u671f\u5f85\u3057\u305f\u7b87\u6240\u304b\u3089\u547c\u3070\u308c\u3066\u3044\u308b\u304b\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u884c\u6570\u3082\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\nMockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n\n    var cookRamenCallCount = 0\n    var cookRamenLastBowls = 0\n    var cookRamenLastSoup: RamenSoup?\n    var cookRamenLastExtras: [String] = []\n\n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenCallCount += 1\n        cookRamenLastBowls = bowls\n        cookRamenLastSoup = soup\n        cookRamenLastExtras = extras\n    }\n\n    func verifyCookRamen(bowls: Int, soup: RamenSoup, extras: [String],\n                         file: StaticString = #file,\n                         line: UInt = #line\n                         ) {\n\n        XCTAssertEqual(cookRamenCallCount, 1, file: file, line: line)\n        XCTAssertEqual(cookRamenLastBowls, bowls, file: file, line: line)\n        XCTAssertEqual(cookRamenLastSoup, soup, file: file, line: line)\n        XCTAssertEqual(cookRamenLastExtras, extras, file: file, line: line)\n    }\n}\n\n\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n    }\n\n    override func tearDown() {\n        super.tearDown()\n    }\n\n    func testOrder_ShouldCookRamen() {        \n\n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n\n        waiter.order()        \n        mocCook.verifyCookRamen(bowls: 2,\n                                soup: .miso,\n                                extras: [\"wakame\",\"tamago\"])\n    }    \n}\n\n\n(3) \u9806\u756a\u304c\u4efb\u610f\u306e\u5165\u529b\u3082\u30c6\u30b9\u30c8\u3059\u308b\n\u73fe\u72b6\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3067\u306f\u3001\u672c\u6765\u30c8\u30c3\u30d4\u30f3\u30b0\u306e\u9806\u756a\u306f\u95a2\u4fc2\u306a\u3044\u306e\u3067\u3059\u304c\u3001\n\u7279\u5b9a\u306e\u9806\u756a\u4ee5\u5916\u306fNG\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u914d\u5217\u306e\u9806\u5e8f\u3092\u610f\u8b58\u3057\u306a\u3044\u3088\u3046\u306b\u3001\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306b\u6539\u826f\u3057\u307e\u3059\u3002\n\nMockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n\n    var cookRamenCallCount = 0\n    var cookRamenLastBowls = 0\n    var cookRamenLastSoup: RamenSoup?\n    var cookRamenLastExtras: [String] = []\n\n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenCallCount += 1\n        cookRamenLastBowls = bowls\n        cookRamenLastSoup = soup\n        cookRamenLastExtras = extras\n    }\n\n    func verifyCookRamen(bowls: Int, soup: RamenSoup,\n                         extrasMatcher: (([String]) -> Bool),\n                         file: StaticString = #file,\n                         line: UInt = #line\n                         ) {\n\n        XCTAssertEqual(cookRamenCallCount, 1, file: file, line: line)\n        XCTAssertEqual(cookRamenLastBowls, bowls, file: file, line: line)\n        XCTAssertEqual(cookRamenLastSoup, soup, file: file, line: line)\n        XCTAssertTrue(extrasMatcher(cookRamenLastExtras),\n                       \"extras was \\(cookRamenLastExtras)\",\n                        file: file,line: line)\n    }\n}\n\n\n\nWaiterTests.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n    }\n\n    override func tearDown() {\n        super.tearDown()\n    }\n\n    func testOrder_ShouldCookRamen() {        \n\n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n\n        waiter.order()        \n        mocCook.verifyCookRamen(bowls: 2,\n                                soup: .miso,\n                                extrasMatcher:  { extras in\n                                    extras.count == 2 &&\n                                    extras.contains(\"wakame\") &&\n                                    extras.contains(\"tamago\")\n\n        })\n    }    \n}\n\n\n\u3053\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u30c8\u30c3\u30d4\u30f3\u30b0\u306e\u308f\u304b\u3081\u3068\u5375\u306e\u9806\u756a\u3092\u5909\u3048\u3066\u3082\u30c6\u30b9\u30c8\u304c\u901a\u308a\u307e\u3059\u3002\n\u6b63\u78ba\u306b\u306f\u30c8\u30c3\u30d4\u30f3\u30b0\u304c2\u500b\u3001\u308f\u304b\u3081\u3068\u5375\u3067\u3042\u308c\u3070OK\u3067\u3059\u3002\nClosure\u3092\u5229\u7528\u3057\u3066\u3001\u30c8\u30c3\u30d4\u30f3\u30b0\u4ef6\u6570\u3068\u914d\u5217\u5185\u306b\u7279\u5b9a\u306e\u6587\u5b57\u5217\u304c\u542b\u307e\u308c\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3057\u305f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u30b3\u30c4\u306f\u4e0b\u8a18\u306e4\u70b9\u3067\u3059\u3002\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u4f55\u56de\u547c\u3070\u308c\u305f\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3002\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u5197\u9577\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001\u30d8\u30eb\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u3002\n\u547c\u3070\u308c\u305f\u5834\u6240\u3082\u30c6\u30b9\u30c8\u3059\u308b\u3002\uff08\u30d5\u30a1\u30a4\u30eb\u540d\u3001\u884c\u6570\uff09\n\u30d5\u30e9\u30b8\u30e3\u30a4\u30eb\u30c6\u30b9\u30c8\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u5de5\u592b\u3059\u308b\u3002\n\n\u306a\u304a\u3001\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306f\u3001\u300c\u5927\u4e8b\u306a\u3082\u306e\u306b\u96c6\u4e2d\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u3082\u306e\u306f\u7121\u8996\u3057\u307e\u3057\u3087\u3046\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\u3068\u3066\u3082\u52c9\u5f37\u306b\u306a\u308a\u3001\u65e9\u901f\u53d6\u308a\u5165\u308c\u3066\u3044\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3001\u3053\u3061\u3089\u306b\u3042\u3052\u3066\u3042\u308a\u307e\u3059\u3002\n\u4ed6\u306b\u3082\u300cHamcrest Matchers\u300d\u3092\u5229\u7528\u3057\u305f\u4f8b\u3082\u3054\u7d39\u4ecb\u3055\u308c\u307e\u3057\u305f\u3002\n\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u53c2\u7167\u5143\nhttp://qualitycoding.org/tryswift2017\n# \u306f\u3058\u3081\u306b\nTry! Swift2017\u306b\u53c2\u52a0\u3057\u307e\u3057\u305f\u3002\n\u3068\u3066\u3082\u52c9\u5f37\u306b\u306a\u3063\u305f\u30c6\u30fc\u30de\u306e1\u3064\u3067\u3042\u308b\u300c\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3088\u308a\u4fbf\u5229\u306b\u3059\u308b\u300d\u3092\u3054\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3063\u3066\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3059\u308b\u30b3\u30c4\u3092[Jon Reid\u3055\u3093](https://twitter.com/qcoding)\u304c\u767a\u8868\u3055\u308c\u307e\u3057\u305f\u3002\n\n## \u306a\u305c\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3059\u308b\u304b\uff1f\n\u30fb\u5b9f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3059\u308b\u3068\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\n\u30fb\u5b9f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3082\u3042\u308b\u305f\u3081\n\n## \u4eca\u56de\u3054\u8aac\u660e\u3059\u308b\u4f8b\n\u30a6\u30a7\u30fc\u30bf\u30fc\u304c\u304a\u5ba2\u69d8\u304b\u3089\u306e\u6ce8\u6587\u3092\u53d7\u3051\u3001\u30b3\u30c3\u30af\u306b\u6ce8\u6587\u3092\u6b63\u3057\u304f\u4f1d\u3048\u3089\u308c\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u30e1\u30cb\u30e5\u30fc\u306f\u30e9\u30fc\u30e1\u30f3\u3067\u3059\u3002\n\n## \u767b\u5834\u4eba\u7269\n\n| \u767b\u5834\u4eba\u7269 | \u8aac\u660e |\n|---|---|\n| Waiter | \u30a6\u30a7\u30fc\u30bf\u30fc\u3000|\n| CookProtocol | \u30e9\u30fc\u30e1\u30f3\u3092\u4f5c\u308b\u30d7\u30ed\u30c8\u30b3\u30eb |\n| RealCook | \u5b9f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30c3\u30af |\n| MockCook | \u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30c3\u30af\u3000 |\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306f\u3001Waiter\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\n\u5b9f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3082\u3001\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# 1.\u6e96\u5099\n\n## 1.1.\u30e9\u30fc\u30e1\u30f3\u306e\u7a2e\u985e\n\u30e9\u30fc\u30e1\u30f3\u306e\u7a2e\u985e\u306f\u3001\u5869\u3001\u91a4\u6cb9\u3001\u5473\u564c\u3001\u8c5a\u9aa8\u306e4\u7a2e\u985e\u3068\u3057\u307e\u3059\u3002\n\n```swift:RamenSoup.swift\nimport Foundation\n\nenum RamenSoup {\n    case shio       //\u5869\n    case shoyu      //\u91a4\u6cb9\n    case miso       //\u5473\u564c\n    case tonkotu    //\u3068\u3093\u3053\u3064\n}\n```\n\n## 1.2. \u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u5b9a\u7fa9\n\u30e9\u30fc\u30e1\u30f3\u3092\u4f5c\u308b\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30c8\u30b3\u30eb\u3067\u306f\u3001\u4f55\u676f\u304b\u3001\u30b9\u30fc\u30d7\u306e\u7a2e\u985e\u306f\u3001\u30c8\u30c3\u30d4\u30f3\u30b0\u306f\u4f55\u304b\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u30c8\u30c3\u30d4\u30f3\u30b0\u306f\u8907\u6570\u500b\u9078\u3079\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\n```swift:CookProtocol.swift\nimport Foundation\n\nprotocol CookProtocol {\n    \n    func cookRamen(\n        bowls: Int,                 // \u4f55\u676f\n        soup: RamenSoup,            // \u30b9\u30fc\u30d7\u306e\u7a2e\u985e\n        extras: [String]) -> Void   // \u30c8\u30c3\u30d4\u30f3\u30b0\n}\n```\n\n## 1.3. \u30a6\u30a7\u30fc\u30bf\u30fc\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\n\u30a6\u30a7\u30fc\u30bf\u30fc\u306e\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u6ce8\u6587\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3001\u5473\u564c\u30e9\u30fc\u30e1\u30f3\u30922\u676f\u3001\u308f\u304b\u3081\u3068\u5375\u3092\u30c8\u30c3\u30d4\u30f3\u30b0\u3068\u3057\u3066\u306e\u305b\u308b\u4f8b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\uff08\u30cf\u30fc\u30c9\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u307e\u3059\u3002\uff09\n\n```swift:Waiter.swift\nimport Foundation\n\nstruct Waiter {\n    let cook: CookProtocol\n    \n    /// \u30a6\u30a8\u30fc\u30bf\u30fc\u304c\u30e9\u30fc\u30e1\u30f3\u3092\u6ce8\u6587\u3059\u308b (\u5473\u564c\u30e9\u30fc\u30e1\u30f3\u30922\u676f\u3001\u308f\u304b\u3081\u3068\u5375\u3092\u30c8\u30c3\u30d4\u30f3\u30b0)\n    func order() {        \n        cook.cookRamen(bowls: 2, soup: .miso, extras: [\"wakame\",\"tamago\"])\n    }\n}\n```\n\n# 2. \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\u305d\u308c\u3067\u306f\u3001\u672c\u984c\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## 2.1. \u3010\u30d1\u30bf\u30fc\u30f31\u3011 Boolean\u3092\u5229\u7528\u3057\u3066\u5bfe\u8c61\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\nWaiter\u306eorder\u30e1\u30bd\u30c3\u30c9\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001order\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u304b\u5426\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n### 2.1.1. \u30e2\u30c3\u30af\n\n```swift:MockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n    \n    var cookRamenWasCalled = false\n    \n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenWasCalled = true\n    }\n}\n```\n\n### 2.1.2. \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\n```swift:WaiterTests.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n    }\n    \n    override func tearDown() {\n        super.tearDown()\n    }\n    \n    func testOrder_ShouldCookRamen() {        \n        \n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n        \n        waiter.order()        \n        XCTAssertTrue(mocCook.cookRamenWasCalled)\n    }\n}\n```\n\n\u3088\u304f\u3042\u308b\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u30d1\u30bf\u30fc\u30f3\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u306f\u3001order\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u304b\u306e\u78ba\u8a8d\u306f\u3067\u304d\u307e\u3059\u304c\u3001\nMockCook\u30af\u30e9\u30b9\u306b\u60c5\u5831\u304c\u4fdd\u5b58\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u4f55\u56de\u547c\u3070\u308c\u305f\u304b\u306e\u78ba\u8a8d\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n## 2.2. \u3010\u30d1\u30bf\u30fc\u30f32\u3011 \u4f55\u56de\u547c\u3070\u308c\u305f\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\n\u3053\u3053\u3067\u306f\u3001\u547c\u3070\u308c\u305f\u56de\u6570\u3092\u4fdd\u5b58\u3057\u3001\u4f55\u56de\u547c\u3070\u308c\u305f\u304b\u3092\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u6539\u826f\u3057\u307e\u3059\u3002\n1\u56de\u3057\u304b\u547c\u3070\u308c\u308b\u4e88\u5b9a\u304c\u306a\u3044\u306f\u305a\u304c\u3001\u8907\u6570\u56de\u547c\u3070\u308c\u3066\u3057\u307e\u3046\u30b1\u30fc\u30b9\u3092\u9632\u3052\u307e\u3059\u3002\n\n### 2.2.1. \u30e2\u30c3\u30af\n\n```swift:MockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n    \n    var cookRamenCallCount = 0\n    \n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenCallCount += 1\n    }\n}\n```\n\n### 2.2.2. \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\n```swift:WaiterTests.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n    }\n    \n    override func tearDown() {\n        super.tearDown()\n    }\n    \n    func testOrder_ShouldCookRamen() {        \n        \n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n        \n        waiter.order()        \n        XCTAssertEqual(mocCook.cookRamenCallCount, 1)\n    }\n}\n```\n\n## 2.3. \u3010\u30d1\u30bf\u30fc\u30f33\u3011 \u76f4\u8fd1\u5165\u529b\u3055\u308c\u305f\u5f15\u6570\u306e\u60c5\u5831\u3082\u30c6\u30b9\u30c8\u3059\u308b\n\u3053\u3053\u3067\u306f\u3001\u5165\u529b\u3055\u308c\u305f\u5f15\u6570\u306e\u60c5\u5831\u3092\u8a18\u9332\u3057\u3001\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u30aa\u30fc\u30c0\u30fc\u30df\u30b9\uff08\u6ce8\u6587\u3059\u308b\u30e9\u30fc\u30e1\u30f3\u306e\u7a2e\u985e\u3084\u30c8\u30c3\u30d4\u30f3\u30b0\u306a\u3069\uff09\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n### 2.3.1. \u30e2\u30c3\u30af\n\n```swift:MockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n    \n    var cookRamenCallCount = 0\n    var cookRamenLastBowls = 0\n    var cookRamenLastSoup: RamenSoup?\n    var cookRamenLastExtras: [String] = []\n    \n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenCallCount += 1\n        cookRamenLastBowls = bowls\n        cookRamenLastSoup = soup\n        cookRamenLastExtras = extras\n    }\n}\n```\n\n### 2.3.2. \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\n\n```swift:WaiterTests.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n    }\n    \n    override func tearDown() {\n        super.tearDown()\n    }\n    \n    func testOrder_ShouldCookRamen() {        \n        \n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n        \n        waiter.order()        \n        XCTAssertEqual(mocCook.cookRamenCallCount, 1)\n        XCTAssertEqual(mocCook.cookRamenLastBowls, 2)\n        XCTAssertEqual(mocCook.cookRamenLastSoup, .miso)\n        XCTAssertEqual(mocCook.cookRamenLastExtras, [\"wakame\",\"tamago\"])        \n    }\n}\n```\n\n#### (1) \u30d8\u30eb\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3059\u308b\n\u3053\u3053\u3067\u3001\u69d8\u3005\u306e\u30b1\u30fc\u30b9\u306b\u5bfe\u3057\u3066\u3001\u4f55\u5ea6\u3082\u540c\u3058\u3088\u3046\u306a\u30a2\u30b5\u30fc\u30c8\u3092\u66f8\u304b\u306c\u3088\u3046\u306b\u3001\n\u30d8\u30eb\u30d1\u30fc\u7528\u306e\u30e1\u30bd\u30c3\u30c9(verifyCookRamen)\u3092\u5b9a\u7fa9\u3057\u3001\u30c6\u30b9\u30c8\u3067\u305d\u306e\u30d8\u30eb\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n```swift:MockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n    \n    var cookRamenCallCount = 0\n    var cookRamenLastBowls = 0\n    var cookRamenLastSoup: RamenSoup?\n    var cookRamenLastExtras: [String] = []\n    \n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenCallCount += 1\n        cookRamenLastBowls = bowls\n        cookRamenLastSoup = soup\n        cookRamenLastExtras = extras\n    }\n    \n    func verifyCookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {\n        \n        XCTAssertEqual(cookRamenCallCount, 1)\n        XCTAssertEqual(cookRamenLastBowls, bowls)\n        XCTAssertEqual(cookRamenLastSoup, soup)\n        XCTAssertEqual(cookRamenLastExtras, extras)\n    }\n}\n```\n\n```swift:\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n    }\n    \n    override func tearDown() {\n        super.tearDown()\n    }\n    \n    func testOrder_ShouldCookRamen() {        \n        \n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n        \n        waiter.order()        \n        mocCook.verifyCookRamen(bowls: 2, soup: .miso, extras: [\"wakame\",\"tamago\"])\n    }    \n}\n```\n\n#### (2) \u3069\u3053\u304b\u3089\u547c\u3070\u308c\u305f\u304b\u3082\u30c6\u30b9\u30c8\u3059\u308b\n\u3053\u3053\u3067\u306f\u3001\u4e88\u671f\u305b\u306c\u7b87\u6240\u304b\u3089\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u8003\u3048\u3089\u308c\u308b\u305f\u3081\u3001\n\u671f\u5f85\u3057\u305f\u7b87\u6240\u304b\u3089\u547c\u3070\u308c\u3066\u3044\u308b\u304b\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u884c\u6570\u3082\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n```swift:MockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n    \n    var cookRamenCallCount = 0\n    var cookRamenLastBowls = 0\n    var cookRamenLastSoup: RamenSoup?\n    var cookRamenLastExtras: [String] = []\n    \n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenCallCount += 1\n        cookRamenLastBowls = bowls\n        cookRamenLastSoup = soup\n        cookRamenLastExtras = extras\n    }\n    \n    func verifyCookRamen(bowls: Int, soup: RamenSoup, extras: [String],\n                         file: StaticString = #file,\n                         line: UInt = #line\n                         ) {\n        \n        XCTAssertEqual(cookRamenCallCount, 1, file: file, line: line)\n        XCTAssertEqual(cookRamenLastBowls, bowls, file: file, line: line)\n        XCTAssertEqual(cookRamenLastSoup, soup, file: file, line: line)\n        XCTAssertEqual(cookRamenLastExtras, extras, file: file, line: line)\n    }\n}\n```\n\n```swift:\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n    }\n    \n    override func tearDown() {\n        super.tearDown()\n    }\n    \n    func testOrder_ShouldCookRamen() {        \n        \n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n        \n        waiter.order()        \n        mocCook.verifyCookRamen(bowls: 2,\n                                soup: .miso,\n                                extras: [\"wakame\",\"tamago\"])\n    }    \n}\n```\n\n#### (3) \u9806\u756a\u304c\u4efb\u610f\u306e\u5165\u529b\u3082\u30c6\u30b9\u30c8\u3059\u308b\n\u73fe\u72b6\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3067\u306f\u3001\u672c\u6765\u30c8\u30c3\u30d4\u30f3\u30b0\u306e\u9806\u756a\u306f\u95a2\u4fc2\u306a\u3044\u306e\u3067\u3059\u304c\u3001\n\u7279\u5b9a\u306e\u9806\u756a\u4ee5\u5916\u306fNG\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u914d\u5217\u306e\u9806\u5e8f\u3092\u610f\u8b58\u3057\u306a\u3044\u3088\u3046\u306b\u3001\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306b\u6539\u826f\u3057\u307e\u3059\u3002\n\n```swift:MockCook.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass MockCook: CookProtocol {\n    \n    var cookRamenCallCount = 0\n    var cookRamenLastBowls = 0\n    var cookRamenLastSoup: RamenSoup?\n    var cookRamenLastExtras: [String] = []\n    \n    func cookRamen(bowls: Int, soup: RamenSoup, extras: [String]) {        \n        cookRamenCallCount += 1\n        cookRamenLastBowls = bowls\n        cookRamenLastSoup = soup\n        cookRamenLastExtras = extras\n    }\n    \n    func verifyCookRamen(bowls: Int, soup: RamenSoup,\n                         extrasMatcher: (([String]) -> Bool),\n                         file: StaticString = #file,\n                         line: UInt = #line\n                         ) {\n        \n        XCTAssertEqual(cookRamenCallCount, 1, file: file, line: line)\n        XCTAssertEqual(cookRamenLastBowls, bowls, file: file, line: line)\n        XCTAssertEqual(cookRamenLastSoup, soup, file: file, line: line)\n        XCTAssertTrue(extrasMatcher(cookRamenLastExtras),\n                       \"extras was \\(cookRamenLastExtras)\",\n                        file: file,line: line)\n    }\n}\n```\n\n```swift:WaiterTests.swift\nimport XCTest\n@testable import ios_swift_moc\n\nclass WaiterTests: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n    }\n    \n    override func tearDown() {\n        super.tearDown()\n    }\n    \n    func testOrder_ShouldCookRamen() {        \n        \n        let mocCook = MockCook()\n        let waiter = Waiter(cook: mocCook)\n        \n        waiter.order()        \n        mocCook.verifyCookRamen(bowls: 2,\n                                soup: .miso,\n                                extrasMatcher:  { extras in\n                                    extras.count == 2 &&\n                                    extras.contains(\"wakame\") &&\n                                    extras.contains(\"tamago\")\n                                    \n        })\n    }    \n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u30c8\u30c3\u30d4\u30f3\u30b0\u306e\u308f\u304b\u3081\u3068\u5375\u306e\u9806\u756a\u3092\u5909\u3048\u3066\u3082\u30c6\u30b9\u30c8\u304c\u901a\u308a\u307e\u3059\u3002\n\u6b63\u78ba\u306b\u306f\u30c8\u30c3\u30d4\u30f3\u30b0\u304c2\u500b\u3001\u308f\u304b\u3081\u3068\u5375\u3067\u3042\u308c\u3070OK\u3067\u3059\u3002\n\nClosure\u3092\u5229\u7528\u3057\u3066\u3001\u30c8\u30c3\u30d4\u30f3\u30b0\u4ef6\u6570\u3068\u914d\u5217\u5185\u306b\u7279\u5b9a\u306e\u6587\u5b57\u5217\u304c\u542b\u307e\u308c\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3057\u305f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u30b3\u30c4\u306f\u4e0b\u8a18\u306e4\u70b9\u3067\u3059\u3002\n\n1. \u30c6\u30b9\u30c8\u5bfe\u8c61\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u4f55\u56de\u547c\u3070\u308c\u305f\u304b\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3002\n2. \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u5197\u9577\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001\u30d8\u30eb\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u3002\n3. \u547c\u3070\u308c\u305f\u5834\u6240\u3082\u30c6\u30b9\u30c8\u3059\u308b\u3002\uff08\u30d5\u30a1\u30a4\u30eb\u540d\u3001\u884c\u6570\uff09\n4. \u30d5\u30e9\u30b8\u30e3\u30a4\u30eb\u30c6\u30b9\u30c8\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u5de5\u592b\u3059\u308b\u3002\n\n\u306a\u304a\u3001\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306f\u3001\u300c\u5927\u4e8b\u306a\u3082\u306e\u306b\u96c6\u4e2d\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u3082\u306e\u306f\u7121\u8996\u3057\u307e\u3057\u3087\u3046\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\u3068\u3066\u3082\u52c9\u5f37\u306b\u306a\u308a\u3001\u65e9\u901f\u53d6\u308a\u5165\u308c\u3066\u3044\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3001[\u3053\u3061\u3089](https://github.com/stv-ekushida/ios-swift-moc)\u306b\u3042\u3052\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u4ed6\u306b\u3082\u300cHamcrest Matchers\u300d\u3092\u5229\u7528\u3057\u305f\u4f8b\u3082\u3054\u7d39\u4ecb\u3055\u308c\u307e\u3057\u305f\u3002\n\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n## \u53c2\u7167\u5143\nhttp://qualitycoding.org/tryswift2017\n"}