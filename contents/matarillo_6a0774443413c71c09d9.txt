{"context": " More than 1 year has passed since last update.\u554f\u984c\u306f http://d.hatena.ne.jp/matarillo/20120515/p1\n\u5468\u671f7\u306e\u30c6\u30fc\u30d6\u30eb\u306a\u3093\u304b\u4f5c\u3089\u306a\u304f\u3066\u3082\u30011..15\u306e\u7bc4\u56f2\u306e\u4e2d\u3067\u89e3\u63a2\u7d22\u3057\u3066\u6700\u77ed\u306e\u3082\u306e\u3092\u9078\u3079\u3070\u3088\u304b\u3063\u305f\u3093\u3067\u3059\u306d\u3002\n\u554f\u984c\u6587\u306b\u3082\u3042\u308b\u3068\u304a\u308a\u3001IsFizzBuzz\u3068ToFizzBuzz\u3067\u6570\u5b57\u3092FizzBuzz\u306b\u5909\u63db\u3057\u3066\u3001\u5165\u529b\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u304b\u3081\u3066\u3044\u3063\u3066\u3044\u307e\u3059\u3002\n\nProgram.cs\nusing System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        WriteInverseFizzBuzz(new[] { \"fizz\" });\n        WriteInverseFizzBuzz(new[] { \"buzz\" });\n        WriteInverseFizzBuzz(new[] { \"fizz\", \"buzz\" });\n        WriteInverseFizzBuzz(new[] { \"buzz\", \"fizz\" });\n        WriteInverseFizzBuzz(new[] { \"fizz\", \"buzz\", \"fizz\" });\n        WriteInverseFizzBuzz(new[] { \"fizz\", \"fizz\" });\n        WriteInverseFizzBuzz(new[] { \"fizz\", \"fizz\", \"buzz\" });\n        WriteInverseFizzBuzz(new[] { \"buzz\", \"fizz\", \"buzz\" });\n    }\n\n    static void WriteInverseFizzBuzz(string[] input)\n    {\n        string input2 = string.Join(\",\", input);\n        string output2 = string.Join(\",\", InverseFizzBuzz(input));\n        Console.WriteLine(\"{0} -> {1}\", input2, output2);\n    }\n\n    static bool IsFizzBuzz(int number)\n    {\n        return (number % 3 == 0 || number % 5 == 0);\n    }\n\n    static string ToFizzBuzz(int number)\n    {\n        bool m3 = (number % 3 == 0);\n        bool m5 = (number % 5 == 0);\n        return\n            (m3 && m5) ? \"fizzbuzz\" :\n            (m5) ? \"buzz\" :\n            (m3) ? \"fizz\" :\n            null;\n    }\n\n    static Tuple<int, int> Inverse(string[] input, int start)\n    {\n        int n = start;\n        foreach (string element in input)\n        {\n            while (!IsFizzBuzz(n)) n++;\n            if (element != ToFizzBuzz(n)) return null;\n            n++;\n        }\n        return Tuple.Create(start, n);\n    }\n\n    static int[] InverseFizzBuzz(string[] input)\n    {\n        var list = Enumerable.Range(1, 15)\n            .Select(x => Inverse(input, x))\n            .Where(x => x != null);\n\n        if (list.Count() == 0) return new int[0];\n\n        var range = list\n            .OrderBy(x => x.Item2 - x.Item1)\n            .First();\n\n        return Enumerable.Range(range.Item1, range.Item2 - range.Item1)\n            .ToArray();\n    }\n}\n\n\n\u7d50\u679c\nfizz -> 3\nbuzz -> 5\nfizz,buzz -> 9,10\nbuzz,fizz -> 5,6\nfizz,buzz,fizz -> 3,4,5,6\nfizz,fizz -> 6,7,8,9\nfizz,fizz,buzz -> 6,7,8,9,10\nbuzz,fizz,buzz ->\n\n\u554f\u984c\u306f http://d.hatena.ne.jp/matarillo/20120515/p1\n\n\u5468\u671f7\u306e\u30c6\u30fc\u30d6\u30eb\u306a\u3093\u304b\u4f5c\u3089\u306a\u304f\u3066\u3082\u30011..15\u306e\u7bc4\u56f2\u306e\u4e2d\u3067\u89e3\u63a2\u7d22\u3057\u3066\u6700\u77ed\u306e\u3082\u306e\u3092\u9078\u3079\u3070\u3088\u304b\u3063\u305f\u3093\u3067\u3059\u306d\u3002\n\u554f\u984c\u6587\u306b\u3082\u3042\u308b\u3068\u304a\u308a\u3001IsFizzBuzz\u3068ToFizzBuzz\u3067\u6570\u5b57\u3092FizzBuzz\u306b\u5909\u63db\u3057\u3066\u3001\u5165\u529b\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u304b\u3081\u3066\u3044\u3063\u3066\u3044\u307e\u3059\u3002\n\n```c#:Program.cs\nusing System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        WriteInverseFizzBuzz(new[] { \"fizz\" });\n        WriteInverseFizzBuzz(new[] { \"buzz\" });\n        WriteInverseFizzBuzz(new[] { \"fizz\", \"buzz\" });\n        WriteInverseFizzBuzz(new[] { \"buzz\", \"fizz\" });\n        WriteInverseFizzBuzz(new[] { \"fizz\", \"buzz\", \"fizz\" });\n        WriteInverseFizzBuzz(new[] { \"fizz\", \"fizz\" });\n        WriteInverseFizzBuzz(new[] { \"fizz\", \"fizz\", \"buzz\" });\n        WriteInverseFizzBuzz(new[] { \"buzz\", \"fizz\", \"buzz\" });\n    }\n\n    static void WriteInverseFizzBuzz(string[] input)\n    {\n        string input2 = string.Join(\",\", input);\n        string output2 = string.Join(\",\", InverseFizzBuzz(input));\n        Console.WriteLine(\"{0} -> {1}\", input2, output2);\n    }\n\n    static bool IsFizzBuzz(int number)\n    {\n        return (number % 3 == 0 || number % 5 == 0);\n    }\n\n    static string ToFizzBuzz(int number)\n    {\n        bool m3 = (number % 3 == 0);\n        bool m5 = (number % 5 == 0);\n        return\n            (m3 && m5) ? \"fizzbuzz\" :\n            (m5) ? \"buzz\" :\n            (m3) ? \"fizz\" :\n            null;\n    }\n\n    static Tuple<int, int> Inverse(string[] input, int start)\n    {\n        int n = start;\n        foreach (string element in input)\n        {\n            while (!IsFizzBuzz(n)) n++;\n            if (element != ToFizzBuzz(n)) return null;\n            n++;\n        }\n        return Tuple.Create(start, n);\n    }\n\n    static int[] InverseFizzBuzz(string[] input)\n    {\n        var list = Enumerable.Range(1, 15)\n            .Select(x => Inverse(input, x))\n            .Where(x => x != null);\n\n        if (list.Count() == 0) return new int[0];\n\n        var range = list\n            .OrderBy(x => x.Item2 - x.Item1)\n            .First();\n\n        return Enumerable.Range(range.Item1, range.Item2 - range.Item1)\n            .ToArray();\n    }\n}\n```\n\n\u7d50\u679c\n\n```\nfizz -> 3\nbuzz -> 5\nfizz,buzz -> 9,10\nbuzz,fizz -> 5,6\nfizz,buzz,fizz -> 3,4,5,6\nfizz,fizz -> 6,7,8,9\nfizz,fizz,buzz -> 6,7,8,9,10\nbuzz,fizz,buzz ->\n```", "tags": ["C#", "FizzBuzz"]}