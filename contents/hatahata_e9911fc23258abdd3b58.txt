{"context": " More than 1 year has passed since last update.https://codeiq.jp/q/1597\n\nanida.php\n<?php\n\n/**\n * \u3042\u307f\u3060\u30de\u30c3\u30d7\u30af\u30e9\u30b9\n *\n * \u3042\u307f\u3060\u81ea\u8eab\u306e\u30de\u30c3\u30d7(\u914d\u5217)\u3092\u4fdd\u6301\u3057\n * \u81ea\u8eab\u306b\u95a2\u3059\u308b\u52d5\u4f5c\u306e\u8cac\u4efb\u3092\u6301\u3064\u30af\u30e9\u30b9\n */\nclass AmidaMap\n{\n    private $dataMap = array();\n    private $currentX = 0;\n    private $currentY = 0;\n    private $width = 0;\n    private $height = 0;\n\n    public function __construct($stdins)\n    {\n        $this->init($stdins);\n    }\n\n    protected function init($stdins)\n    {\n        foreach ($stdins as $std) {\n            $tmps = explode(',', $std);\n            $tmps[] = '0';\n            $this->width = count($tmps);\n            $this->dataMap[] = $tmps;\n        }\n        $this->height = count($this->dataMap);\n    }\n\n    public function clear($x, $y)\n    {\n        $this->currentX = $x;\n        $this->currentY = $y;\n    }\n\n    public function getAmidaSize()\n    {\n        return $this->width;\n    }\n\n    public function isScopeRange()\n    {\n        if ($this->width > 50 || $this->height > 50) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function get($x = null, $y = null) {\n        if (is_null($x) && is_null($y)) {\n            if (! isset($this->dataMap[$this->currentY][$this->currentX])) {\n                return 0;\n            }\n            return $this->dataMap[$this->currentY][$this->currentX];\n        } else if (! is_null($x) && is_null($y)) {\n            if (! isset($this->dataMap[$this->currentY][$x])) {\n                return 0;\n            }\n            return $this->dataMap[$this->currentY][$x];\n        } else if (is_null($x) && ! is_null($y)) {\n            if (! isset($this->dataMap[$y][$this->currentX])) {\n                return 0;\n            }\n            return $this->dataMap[$y][$this->currentX];\n        } else {\n            if (! isset($this->dataMap[$y][$x])) {\n                return 0;\n            }\n            return $this->dataMap[$y][$x];\n        }\n    }\n\n    public function slide()\n    {\n        if ($this->get()) {\n            $this->slideRight();\n        } else if ($this->get($this->currentX - 1)) {\n            $this->slideLeft();\n        }\n    }\n\n    protected function slideLeft()\n    {\n        $this->currentX--;\n    }\n\n    protected function slideRight()\n    {\n        $this->currentX++;\n    }\n\n    public function next()\n    {\n        if ($this->currentY + 1 > $this->height - 1) {\n            return false;\n        }\n        $this->currentY++;\n        return true;\n    }\n\n    public function getEndPoint()\n    {\n        return $this->currentX;\n    }\n}\n\n/**\n * \u3042\u307f\u3060\u30bb\u30f3\u30bf\u30fc\u30af\u30e9\u30b9\n *\n * \u3042\u307f\u3060\u30de\u30c3\u30d7\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u8cac\u4efb\u3092\u6301\u3064\u30af\u30e9\u30b9\n */\nclass AmidaCenter\n{\n    private $map;\n    private $current = 0;\n\n    public function __construct(AmidaMap $map)\n    {\n        $this->map = $map;\n    }\n\n    public function run()\n    {\n        if (! $this->map->isScopeRange()) {\n            echo 'range error';\n            exit;\n        }\n        $result = array();\n        $amidaWidthMax = $this->map->getAmidaSize();\n        for ($i = 0; $i < $amidaWidthMax; $i++) {\n            do {\n                $this->map->slide();\n            } while ($this->map->next());\n            $result[] = $this->map->getEndPoint() + 1;\n            $this->map->clear($i + 1, 0);\n        }\n\n        echo implode(',', $result);\n    }\n}\n\n/*\n * \u6a19\u6e96\u5165\u51fa\u529b\n */\n$stdins = array();\nwhile(true)\n{\n    $stdin = trim(fgets(STDIN));\n    if ($stdin === '')\n    {\n        break;\n    }\n    $stdins[] = $stdin;\n}\n\n$map = new AmidaMap($stdins);\n$center = new AmidaCenter($map);\n// \u3042\u307f\u3060\u306e\u5b9f\u884c\n$center->run();\n\n\nhttps://codeiq.jp/q/1597\n\n```lang:anida.php\n<?php\n\n/**\n * \u3042\u307f\u3060\u30de\u30c3\u30d7\u30af\u30e9\u30b9\n *\n * \u3042\u307f\u3060\u81ea\u8eab\u306e\u30de\u30c3\u30d7(\u914d\u5217)\u3092\u4fdd\u6301\u3057\n * \u81ea\u8eab\u306b\u95a2\u3059\u308b\u52d5\u4f5c\u306e\u8cac\u4efb\u3092\u6301\u3064\u30af\u30e9\u30b9\n */\nclass AmidaMap\n{\n    private $dataMap = array();\n    private $currentX = 0;\n    private $currentY = 0;\n    private $width = 0;\n    private $height = 0;\n\n    public function __construct($stdins)\n    {\n        $this->init($stdins);\n    }\n\n    protected function init($stdins)\n    {\n        foreach ($stdins as $std) {\n            $tmps = explode(',', $std);\n            $tmps[] = '0';\n            $this->width = count($tmps);\n            $this->dataMap[] = $tmps;\n        }\n        $this->height = count($this->dataMap);\n    }\n\n    public function clear($x, $y)\n    {\n        $this->currentX = $x;\n        $this->currentY = $y;\n    }\n\n    public function getAmidaSize()\n    {\n        return $this->width;\n    }\n\n    public function isScopeRange()\n    {\n        if ($this->width > 50 || $this->height > 50) {\n            return false;\n        }\n\n        return true;\n    }\n\n    protected function get($x = null, $y = null) {\n        if (is_null($x) && is_null($y)) {\n            if (! isset($this->dataMap[$this->currentY][$this->currentX])) {\n                return 0;\n            }\n            return $this->dataMap[$this->currentY][$this->currentX];\n        } else if (! is_null($x) && is_null($y)) {\n            if (! isset($this->dataMap[$this->currentY][$x])) {\n                return 0;\n            }\n            return $this->dataMap[$this->currentY][$x];\n        } else if (is_null($x) && ! is_null($y)) {\n            if (! isset($this->dataMap[$y][$this->currentX])) {\n                return 0;\n            }\n            return $this->dataMap[$y][$this->currentX];\n        } else {\n            if (! isset($this->dataMap[$y][$x])) {\n                return 0;\n            }\n            return $this->dataMap[$y][$x];\n        }\n    }\n\n    public function slide()\n    {\n        if ($this->get()) {\n            $this->slideRight();\n        } else if ($this->get($this->currentX - 1)) {\n            $this->slideLeft();\n        }\n    }\n\n    protected function slideLeft()\n    {\n        $this->currentX--;\n    }\n\n    protected function slideRight()\n    {\n        $this->currentX++;\n    }\n\n    public function next()\n    {\n        if ($this->currentY + 1 > $this->height - 1) {\n            return false;\n        }\n        $this->currentY++;\n        return true;\n    }\n\n    public function getEndPoint()\n    {\n        return $this->currentX;\n    }\n}\n\n/**\n * \u3042\u307f\u3060\u30bb\u30f3\u30bf\u30fc\u30af\u30e9\u30b9\n *\n * \u3042\u307f\u3060\u30de\u30c3\u30d7\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u8cac\u4efb\u3092\u6301\u3064\u30af\u30e9\u30b9\n */\nclass AmidaCenter\n{\n    private $map;\n    private $current = 0;\n\n    public function __construct(AmidaMap $map)\n    {\n        $this->map = $map;\n    }\n\n    public function run()\n    {\n        if (! $this->map->isScopeRange()) {\n            echo 'range error';\n            exit;\n        }\n        $result = array();\n        $amidaWidthMax = $this->map->getAmidaSize();\n        for ($i = 0; $i < $amidaWidthMax; $i++) {\n            do {\n                $this->map->slide();\n            } while ($this->map->next());\n            $result[] = $this->map->getEndPoint() + 1;\n            $this->map->clear($i + 1, 0);\n        }\n\n        echo implode(',', $result);\n    }\n}\n\n/*\n * \u6a19\u6e96\u5165\u51fa\u529b\n */\n$stdins = array();\nwhile(true)\n{\n    $stdin = trim(fgets(STDIN));\n    if ($stdin === '')\n    {\n        break;\n    }\n    $stdins[] = $stdin;\n}\n\n$map = new AmidaMap($stdins);\n$center = new AmidaCenter($map);\n// \u3042\u307f\u3060\u306e\u5b9f\u884c\n$center->run();\n```\n", "tags": ["PHP", "codeiq"]}