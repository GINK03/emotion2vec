{"context": "\n\nMersenne Twister Pseudo Random Number Generator\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4ed6\u306f\u3053\u3061\u3089\u306b\u3042\u308a\u307e\u3059\u3002\nhttp://github.com/ikwzm/MT32_Rand_Gen\n\nOverview\n\nIntroduction\n\u3053\u306eIP\u306fMersenne Twister\u6cd5\u306b\u3088\u308b\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u56de\u8def\u3067\u3059\u3002\n\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002Mersenne Twister HomePage (http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt.html)\nmt19937ar\u3092\u5143\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nFeatures\n\nMersenne Twister\u6cd5\u306b\u3088\u308b\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u56de\u8def\u3067\u3059\u3002\n\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u306e\u6570(N)\u306f624\u3067\u3059\u3002\nVHDL\u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\u8ad6\u7406\u5408\u6210\u53ef\u80fd\u3067\u3059\u3002Xilinx\u793e\u306eVivado\u3001Altera\u793e\u306eQuartusII\u3067\u78ba\u8a8d\u6e08\u307f\u3002\n\uff11\u30af\u30ed\u30c3\u30af\u30671\u30012\u30013\u30018\u300116\u30ef\u30fc\u30c9(1\u30ef\u30fc\u30c9\u306f32bit)\u306e\u4e71\u6570\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u5909\u6570\u3067SEED\u5024\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\nFig.1 Top-Level Signaling Interface\n\n\nLicensing\n\u4e8c\u6761\u9805BSD\u30e9\u30a4\u30bb\u30f3\u30b9 (2-clause BSD license) \u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\nSpecification\n\nParameter Descriptions\nTable.1 Parameter Descriptions\n\n\nName\nTYPE\nDefault\nDescription\n\n\nL\nInteger\n1\n1\u30af\u30ed\u30c3\u30af\u3067\u751f\u6210\u3059\u308b\u4e71\u6570\u306e\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6307\u5b9a\u3067\u304d\u308b\u6570\u306f\u30011\u30012\u30014\u30018\u300116\u306e\u3044\u305a\u308c\u304b\u3067\u3059\u3002\n\n\nSEED\nInteger\n-\n\u4e71\u6570\u306e\u30b7\u30fc\u30c9\u5024\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n\nPort Descriptions\nTable.2 Port  Descriptions\n\n\nName\nType\nWidth\nI/O\nDescription\n\n\nCLK\nSTD_LOGIC\n1\nin\n\u30af\u30ed\u30c3\u30af\u4fe1\u53f7\n\n\nRST\nSTD_LOGIC\n1\nin\n\u975e\u540c\u671f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7\u6ce8)\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u306e\u5185\u5bb9\u306f\u30ea\u30bb\u30c3\u30c8\u3057\u307e\u305b\u3093\n\n\nRND_RUN\nSTD_LOGIC\n1\nin\n\u4e71\u6570\u751f\u6210\u958b\u59cb\u4fe1\u53f7\u3053\u306e\u4fe1\u53f7\u304c'1'\u306b\u306a\u3063\u3066\u304b\u3089\uff13\u30af\u30ed\u30c3\u30af\u5f8c\u306b\u4e71\u6570\u3092\u51fa\u529b\u3057\u307e\u3059TBL_INIT\u304c'1'\u306e\u6642\u3001\u3053\u306e\u4fe1\u53f7\u3092'1'\u306b\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\n\n\nRND_VAL\nSTD_LOGIC\n1\nout\n\u4e71\u6570\u6709\u52b9\u4fe1\u53f7RND_NUM\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u4e71\u6570\u304c\u6709\u52b9\u3067\u3042\u308b\u3053\u3068\u3092\u3057\u3081\u3059\u4fe1\u53f7RND_RUN\u304c'1'\u306b\u306a\u3063\u3066\u304b\u30893\u30af\u30ed\u30c3\u30af\u5f8c\u306b'1'\u306b\u306a\u308a\u307e\u3059\n\n\nRND_NUM\nSTD_LOGIC_VECTOR\n32*L\nout\n\u4e71\u6570\u51fa\u529b\u4fe1\u53f7\u751f\u6210\u3055\u308c\u305f\u4e71\u6570\u3092\u51fa\u529b\u3059\u308b\u4fe1\u53f7RND_RUN\u304c'1'\u306b\u306a\u3063\u3066\u304b\u3089\uff13\u30af\u30ed\u30c3\u30af\u5f8c\u306b\u4e71\u6570\u3092\u51fa\u529b\u3057\u307e\u3059\n\n\nTBL_INIT\nSTD_LOGIC\n1\nin\n\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u521d\u671f\u5316\u4fe1\u53f7\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u3092\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3053\u306e\u4fe1\u53f7\u304c'1'\u306e\u6642\u306e\u307f\u3001TBL_*\u4fe1\u53f7\u306f\u6709\u52b9\u3067\u3059\u3053\u306e\u4fe1\u53f7\u3092'1'\u306b\u3059\u308b\u3068\u3001\u5185\u90e8\u306e\u30ab\u30a6\u30f3\u30bf\u304c\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059\n\n\nTBL_WE\nSTD_LOGIC_VECTOR\n1*L\nin\n\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u30e9\u30a4\u30c8\u4fe1\u53f7\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u30e9\u30a4\u30c8\u3092\u793a\u3059\u4fe1\u53f7\u30e9\u30a4\u30c8\u306f\u30ef\u30fc\u30c9(32bit)\u5358\u4f4d\u3067\u884c\u3044\u307e\u3059\n\n\nTBL_WPTR\nSTD_LOGIC_VECTOR\n16\nin\n\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u30e9\u30a4\u30c8\u30a2\u30c9\u30ec\u30b9\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u30e9\u30a4\u30c8\u30a2\u30c9\u30ec\u30b9\u3092\u30ef\u30fc\u30c9(32bit)\u5358\u4f4d\u3067\u793a\u3057\u307e\u3059\u4f8b\u3048\u3070\u3001LANE=2\u306e\u5834\u5408\u4e0b\u4f4d1\u30d3\u30c3\u30c8\u306f\u7121\u8996\u3055\u308c\u307e\u3059\n\n\nTBL_WDATA\nSTD_LOGIC_VECTOR\n32*L\nin\n\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u30e9\u30a4\u30c8\u30c7\u30fc\u30bf\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u30e9\u30a4\u30c8\u30c7\u30fc\u30bf\u3092LSB\u3067\u5165\u529b\u3057\u307e\u3059\n\n\nTBL_RPTR\nSTD_LOGIC_VECTOR\n16\nin\n\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u30ea\u30fc\u30c9\u30a2\u30c9\u30ec\u30b9\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u306e\u30ea\u30fc\u30c9\u30a2\u30c9\u30ec\u30b9\u3092\u30ef\u30fc\u30c9(32bit)\u5358\u4f4d\u3067\u793a\u3057\u307e\u3059\u4f8b\u3048\u3070\u3001LANE=2\u306e\u5834\u5408\u4e0b\u4f4d1\u30d3\u30c3\u30c8\u306f\u7121\u8996\u3055\u308c\u307e\u3059\n\n\nTBL_RDATA\nSTD_LOGIC_VECTOR\n32*L\nout\n\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u30ea\u30fc\u30c9\u30c7\u30fc\u30bf\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u306e\u30ea\u30fc\u30c9\u30c7\u30fc\u30bfTBL_RPTR\u306e\u5165\u529b\u306b\u5bfe\u3057\u3066\uff11\u30af\u30ed\u30c3\u30af\u5f8c\u306bTBL_RPTR\u3067\u793a\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u306e\u5024\u3092\u51fa\u529b\u3057\u307e\u3059\n\n\n\nFig.2 Generate Timing (L=1)\n\n\nFig.3 Generate Timing (L=4)\n\n\nResouces and Performance\nXilinx\u793e\u306eFPGA\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\u7d50\u679c\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\nParameter \u306eRAM \u306f\u3001\u5185\u90e8\u30e1\u30e2\u30ea\u306bBRAM(Block RAM)\u3092\u4f7f\u3046\u304b\u3001LUT\u3092\u4f7f\u3046\u304b\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002Performance\u306e\u751f\u6210\u901f\u5ea6\u306f\uff11\u79d2\u9593\u306b\u751f\u6210\u3067\u304d\u308b\u30ef\u30fc\u30c9\u6570(1\u30ef\u30fc\u30c9\u306f32bit)\u306e\u7406\u8ad6\u5024\u3067\u3059\u3002\nTable.3 Resouces and Performance(Xilinx)\n\n\nDevice\nParameter\nResouces\nPerformance\n\n\nFamily\nSpeed\nL\nRAM\nSlices\nRAMB\nFmax\nGenerate word/sec\n\n\nArtix-7\n3\n1\nBRAM\n112\n2\n250[MHz]\n250[Mword/sec]\n\n\nLUT\n1815\n0\n250[MHz]\n250[Mword/sec]\n\n\n2\nBRAM\n221\n4\n250[MHz]\n500[Mword/sec]\n\n\nLUT\n1911\n0\n250[MHz]\n500[Mword/sec]\n\n\n4\nBRAM\n443\n8\n250[MHz]\n1000[Mword/sec]\n\n\nLUT\n2101\n0\n250[MHz]\n1000[Mword/sec]\n\n\n8\nBRAM\n894\n16\n250[MHz]\n2000[Mword/sec]\n\n\nLUT\n2784\n0\n250[MHz]\n2000[Mword/sec]\n\n\n16\nBRAM\n1844\n32\n238[MHz]\n3808[Mword/sec]\n\n\nLUT\n3098\n0\n250[MHz]\n4000[Mword/sec]\n\n\n\nArchitecture\n\nBlock Diagram\n\u4e0b\u56f3\u306fL=1\u306e\u6642\u306e\u30d6\u30ed\u30c3\u30af\u56f3\u3067\u3059\u3002\n\nFig.4 Block Diagram(L=1)\n\n\nRAM\u306e\u69cb\u6210(L=1\u306e\u5834\u5408)\nMT32_Rand_Gen \u306f1\u30af\u30ed\u30c3\u30af\u30671\uff5eL\u306e\u4e71\u6570\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3068\u3053\u308d\u304cMersenne Twister\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3001\uff11\u3064\u306e\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u72b6\u614b\u30c6\u30fc\u30d6\u30eb(mt)\u306ei\u3001(i+1) mod  N\u3001(i+M) mod N\u306e\u4f4d\u7f6e\u306e\u5024\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nmt19937ar.vhd\n    procedure generate_word(\n        variable generator  : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable result     : out   RANDOM_NUMBER_TYPE\n    ) is\n        alias    mt         :       RANDOM_NUMBER_VECTOR(0 to generator.table'length-1) is generator.table;\n        variable i          :       integer range mt'low to mt'high;\n        variable x0,x1,xm   :       RANDOM_NUMBER_TYPE;\n        variable y          :       RANDOM_NUMBER_TYPE;\n        variable z          :       RANDOM_NUMBER_TYPE;\n        constant mag01      :       RANDOM_NUMBER_VECTOR(0 to 1) := (0 => X\"00000000\", 1 => MATRIX_A);\n    begin\n        i  := generator.index;\n        x0 := mt(i);\n        x1 := mt((i+1) mod mt'length);\n        xm := mt((i+M) mod mt'length);\n        y  := (x0 and UPPER_MASK) or (x1 and LOWER_MASK);\n        z  := xm xor (y srl 1) xor mag01(to_integer(y mod mag01'length));\n        mt(i) := z;\n        generator.index := (i+1) mod mt'length;\n        y  := z;\n        y  := y xor ((y srl 11));\n        y  := y xor ((y sll  7) and X\"9d2c5680\");\n        y  := y xor ((y sll 15) and X\"efc60000\");\n        y  := y xor ((y srl 18));\n        result := y;\n    end procedure; \n\n\n1\u30af\u30ed\u30c3\u30af\u3067\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u304b\u3089\uff13\u3064\u306e\u30a2\u30c9\u30ec\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u540c\u6642\u306b\u8aad\u307f\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u901a\u5e38\u306a\u3089\u30e9\u30a4\u30c8\uff11\u30dd\u30fc\u30c8\u3001\u30ea\u30fc\u30c9\uff13\u30dd\u30fc\u30c8\u306eRAM\u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u57fa\u672c\u7684\u306bi\u306f\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u305f\u3081\u3001\u4e00\u3064\u524d\u306e\u4e71\u6570\u751f\u6210\u6642\u306b\u4f7f\u7528\u3057\u305fMT[i+1]\u3092\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d\u3001\u6b21\u306e\u4e71\u6570\u751f\u6210\u6642\u306bMT[i]\u3068\u3057\u3066\u4f7f\u7528\u3059\u308c\u3070\u3001\u30e9\u30a4\u30c8\uff11\u30dd\u30fc\u30c8\u3001\u30ea\u30fc\u30c9\uff12\u30dd\u30fc\u30c8\u306eRAM\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002MT32_Rand_Gen\u3067\u306f\u3001\u30e9\u30a4\u30c8\uff11\u30dd\u30fc\u30c8\u3001\u30ea\u30fc\u30c9\uff12\u30dd\u30fc\u30c8\u306eRAM\u306f\u30e9\u30a4\u30c8\uff11\u30dd\u30fc\u30c8\u3001\u30ea\u30fc\u30c9\uff11\u30dd\u30fc\u30c8\u306eRAM\u3092\u4e8c\u3064\u4e26\u3079\u308b\u3053\u3068\u3067\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\nFig.5 RAM Read and Twist Timing Chart (L=1)\n\n\nRAM\u306e\u69cb\u6210(L>1\u306e\u5834\u5408)\nMT32_Rand_Gen\u3067\u306fL\u306b2\u30014\u30018\u300116\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\uff11\u30af\u30ed\u30c3\u30af\u3067\u305d\u308c\u305e\u308c2\u30ef\u30fc\u30c9\u30014\u30ef\u30fc\u30c9\u30018\u30ef\u30fc\u30c9\u300116\u30ef\u30fc\u30c9\u306e\u4e71\u6570\u3092\u540c\u6642\u306b\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u4f8b\u3048\u3070L=4\u306e\u5834\u5408\u3001\u6b21\u306e\uff19\u7b87\u6240\u306e\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u306e\u5024\u3092\uff11\u30af\u30ed\u30c3\u30af\u3067\u8aad\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\ni\n(i+1) mod N\n(i+2) mod N\n(i+3) mod N\n(i+4) mod N\n(i+0+M) mod N\n(i+1+M) mod N\n(i+2+M) mod N\n(i+3+M) mod N\n\nMT32_Rand_gen\u3067\u306fRAM\u306e\u69cb\u6210\u3092\u5de5\u592b\u3059\u308b\u3053\u3068\u3067\u3001\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u306e\u5024\u3092\u540c\u6642\u306b\u8aad\u3093\u3067\u3044\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001MT[i]\u3001MT[(i+1) mod N]\u3001MT[(i+2) mod N]\u3001MT[(i+3) mod N]\u3001MT[(i+4) mod N]\u306eRAM\u306e\u69cb\u6210\u3092\u6b21\u56f3\u306b\u793a\u3057\u307e\u3059\u3002\nL=1\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u3001MT[(i+4) mod N] \u306e\u5024\u3092\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3057\u3066\u304a\u304d\u3001\u6b21\u306eMT[i]\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nFig.6 Block Diagram(L=4)-1\n\n\u6b21\u306bMT[(i+0+M) mod N]\u3001MT[(i+1+M) mod N]\u3001MT[(i+2+M) mod N]\u3001MT[(i+3+M) mod N]\u306eRAM\u5468\u308a\u306e\u69cb\u6210\u3092\u6b21\u56f3\u306b\u793a\u3057\u307e\u3059\u3002\n\nFig.7 Block Diagram(L=4)-2\n\n\u6ce8\u610f\u70b9\u306f\u3001MT32_Rand_Gen \u3067\u306fM=397\u306a\u306e\u3067\u3001\u4f8b\u3048\u3070MT[i+0+M]\u306fZ[i+1]\u3092\u66f8\u304d\u8fbc\u3093\u3060RAM\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u5404RAM\u306e\u51fa\u529b\u306f1\u3060\u3051\u30ed\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u5404Twist\u306exm\u306b\u63a5\u7d9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nRAM\u306e\u30a2\u30c9\u30ec\u30b9\nRAM\u306e\u30a2\u30c9\u30ec\u30b9\u306e\u30bf\u30a4\u30d7\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\nmt32_rand_gen.vhd\n    function  CALC_MT_PTR_LOW return integer is\n        variable retval : integer;\n    begin\n        retval := 0;\n        while (2**retval < L) loop\n            retval := retval + 1;\n        end loop;\n        return retval;\n    end function;\n    function  CALC_MT_PTR_HIGH return integer is\n        variable retval : integer;\n    begin\n        retval := 0;\n        while (2**(retval+1) < N) loop\n            retval := retval + 1;\n        end loop;\n        return retval;\n    end function;\n    constant  MT_PTR_LOW           : integer := CALC_MT_PTR_LOW;\n    constant  MT_PTR_HIGH          : integer := CALC_MT_PTR_HIGH;\n    subtype   MT_PTR_TYPE         is std_logic_vector(MT_PTR_HIGH downto MT_PTR_LOW);\n\n\n\u307e\u305f i mod N\u306a\u3069\u3044\u3061\u3044\u3061\u5270\u4f59\u3092\u8a08\u7b97\u3059\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001i \u306f\u5e38\u306b\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nmt32_rand_gen.vhd\n    function  TO_MT_PTR(arg:integer) return MT_PTR_TYPE is\n        variable u : unsigned(MT_PTR_HIGH downto 0);\n    begin\n        u := to_unsigned(arg,u'length);\n        return std_logic_vector(u(MT_PTR_TYPE'range));\n    end function;\n    function  INC_MT_PTR(ptr:MT_PTR_TYPE) return MT_PTR_TYPE is\n        variable retval : MT_PTR_TYPE;\n    begin\n        if (unsigned(ptr) >= unsigned(TO_MT_PTR(N-1))) then\n            retval := (others => '0');\n        else\n            retval := std_logic_vector(unsigned(ptr)+1);\n        end if;\n        return retval;\n    end function;\n\n\n\u3055\u3089\u306b\u6b21\u306e\u3088\u3046\u306b\u5404RAM\u3078\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u5404\u4fe1\u53f7\u306e\u610f\u5473\u306f\u6b21\u306e\u901a\u308a\u3002\n\nx_curr_index = ((i) mod N)/L\nx_next_index = ((i+L) mod N)/L\nm_curr_index = ((i+M) mod N)/L\nm_next_index = ((i+L+M) mod N)/L\n\n\nmt32_rand_gen.vhd\n CTRL: process(CLK,RST) begin\n        if (RST = '1') then\n                x_curr_index <= TO_MT_PTR(0);\n                x_next_index <= TO_MT_PTR(0);\n                m_curr_index <= TO_MT_PTR(M);\n                m_next_index <= TO_MT_PTR(M);\n                z_curr_index <= TO_MT_PTR(0);\n                mt_read      <= '0';\n                z_val        <= '0';\n        elsif (CLK'event and CLK = '1') then\n            if    (TBL_INIT='1') then\n                x_curr_index <= TO_MT_PTR(0);\n                x_next_index <= TO_MT_PTR(0);\n                m_curr_index <= TO_MT_PTR(M);\n                m_next_index <= TO_MT_PTR(M);\n                z_curr_index <= TO_MT_PTR(0);\n                mt_read      <= '0';\n                z_val        <= '0';\n            else\n                if (RND_RUN = '1')then\n                    x_curr_index <= x_next_index;\n                    x_next_index <= INC_MT_PTR(x_next_index);\n                    m_curr_index <= m_next_index;\n                    m_next_index <= INC_MT_PTR(m_next_index);\n                    mt_read      <= '1';\n                else\n                    mt_read      <= '0';\n                end if;\n                if (mt_read = '1') then\n                    z_curr_index <= x_curr_index;\n                    z_val        <= '1';\n                else\n                    z_val        <= '0';\n                end if;\n            end if;\n        end if;\n    end process;\n\n\n\nSimulation\n\nGHDL\u306b\u3088\u308b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n\nGHDL\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\nGHDL\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f0.29\u3067\u3059\u3002\nGHDL\u306e\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u306f\u3053\u3061\u3089(http://ghdl.free.fr)\n\nMakefile\n\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7528\u306b Makefile \u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\nMakefile\nGHDL=ghdl\nGHDLFLAGS=--mb-comments\nWORK=work\nTEST_BENCH = test_bench \\\\\n             $(END_LIST)\nall: $(TEST_BENCH)\nclean:\n    rm -f *.o *.cf $(TEST_BENCH)\ntest_bench: mt19937ar.o test_bench.o mt32_rand_gen.o mt32_rand_ram.o mt32_rand_ram_auto.o \n     $(GHDL) -e $(GHDLFLAGS) $@\n    -$(GHDL) -r $(GHDLRUNFLAGS) $@\n\ntest_bench.o    :  ../../src/test/vhdl/test_bench.vhd mt32_rand_gen.o\n    $(GHDL) -a $(GHDLFLAGS) --work=work $<\n\nmt32_rand_gen.o :  ../../src/main/vhdl/mt32_rand_gen.vhd\n    $(GHDL) -a $(GHDLFLAGS) --work=mt32_rand_gen $<\n\nmt32_rand_ram.o:  ../../src/main/vhdl/mt32_rand_ram.vhd\n    $(GHDL) -a $(GHDLFLAGS) --work=mt32_rand_gen $<\n\nmt32_rand_ram_auto.o:  ../../src/main/vhdl/mt32_rand_ram_auto.vhd mt32_rand_ram.o\n    $(GHDL) -a $(GHDLFLAGS) --work=mt32_rand_gen $<\n\nmt19937ar.o    :  ../../src/main/vhdl/mt19937ar.vhd\n    $(GHDL) -a $(GHDLFLAGS) --work=mt32_rand_gen $<\n\n\n\n\n\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\n$ cd sim/ghdl\n$ cd make\nghdl -a --mb-comments --work=mt32_rand_gen ../../src/main/vhdl/mt19937ar.vhd\nghdl -a --mb-comments --work=mt32_rand_gen ../../src/main/vhdl/mt32_rand_gen.vhd\nghdl -a --mb-comments --work=work ../../src/test/vhdl/test_bench.vhd\nghdl -a --mb-comments --work=mt32_rand_gen ../../src/main/vhdl/mt32_rand_ram.vhd\nghdl -a --mb-comments --work=mt32_rand_gen ../../src/main/vhdl/mt32_rand_ram_auto.vhd\nghdl -e --mb-comments test_bench\nghdl -r  test_bench\n check prgn_1.table\n 1000 outputs of genrand_int32()\n2991312382 3062119789 1228959102 1840268610  974319580 \n2967327842 2367878886 3088727057 3090095699 2109339754 \n1817228411 3350193721 4212350166 1764906721 2941321312 \n    :\n    (\u4e2d\u7565)\n    :\n../../src/test/vhdl/test_bench.vhd:297:9:@51680ns:(assertion failure):   Run complete...\n./test_bench:error: assertion failed\n./test_bench:error: simulation failed\nghdl: compilation error\n\n\u6700\u5f8c\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u3053\u308c\u306fassert(FALSE)\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\nVivado\u306b\u3088\u308b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n\nVivado\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\nVivado 2015.1\n\nVivado \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\u3059\u3067\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u7701\u7565\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306eTcl\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\nsim/vivado/create_project.tcl\n\u4e0a\u8a18\u306eTcl\u30b9\u30af\u30ea\u30d7\u30c8\u3092Vivado \u3067\u5b9f\u884c\u3059\u308b\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\nVivado > Tools > Run Tcl Script > create_project.tcl\n\n\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\nVivado > Open Project > mt32_rand_gen.xpr\nFlow Navigator > Run Simulation > Run Behavioral Simulation\n\nSynthesis and Implementation\n\nVivado\u306b\u3088\u308b\u8ad6\u7406\u5408\u6210\n\nVivado\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\nVivado 2015.1\n\nVivado \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\u3059\u3067\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u7701\u7565\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306eTcl\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\nfpga/xilinx/vivado2015.1/mt32_rand_gen/create_project.tcl\n\u4e0a\u8a18\u306eTcl\u30b9\u30af\u30ea\u30d7\u30c8\u3092Vivado \u3067\u5b9f\u884c\u3059\u308b\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\nVivado > Tools > Run Tcl Script > create_project.tcl\n\u30c7\u30d0\u30a4\u30b9\u306f\u3068\u308a\u3042\u3048\u305axc7a15tcsg324-3\u3092\u6307\u5b9a\u3057\u307e\u3059\u304c\u3001\u5909\u66f4\u3057\u305f\u3044\u5834\u5408\u306f\u3001create_project.tcl \u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nSynthesis\nFlow Navigator > Run Synthesis\n\nImplementation\nFlow Navigator > Run Implementation\n\nQuartusII\u306b\u3088\u308b\u8ad6\u7406\u5408\u6210\n\nQuartusII\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\nQuartusII 13.1sp1\n\nQuartusII\u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\nfpga/altera/13.1sp1/mt32_rand_gen.qpf\n\nAcknowledgments\n\u3053\u306e\u3088\u3046\u306a\u8cb4\u91cd\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u60dc\u3057\u3052\u3082\u306a\u304f\u516c\u958b\u3057\u3066\u304f\u3060\u3055\u3063\u305f\u65b9\u3005\u306b\u306f\u3072\u305f\u3059\u3089\u611f\u8b1d\u3067\u3059\u3002\n#Mersenne Twister Pseudo Random Number Generator\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4ed6\u306f\u3053\u3061\u3089\u306b\u3042\u308a\u307e\u3059\u3002\n[http://github.com/ikwzm/MT32_Rand_Gen](http://github.com/ikwzm/MT32_Rand_Gen)\n\n#Overview\n\n\n##Introduction\n\n\n\u3053\u306eIP\u306fMersenne Twister\u6cd5\u306b\u3088\u308b\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u56de\u8def\u3067\u3059\u3002\n\n\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002Mersenne Twister HomePage (http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt.html)\n\nmt19937ar\u3092\u5143\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n##Features\n\n\n* Mersenne Twister\u6cd5\u306b\u3088\u308b\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u56de\u8def\u3067\u3059\u3002\n\n* \u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u306e\u6570(N)\u306f624\u3067\u3059\u3002\n\n* VHDL\u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\n* \u8ad6\u7406\u5408\u6210\u53ef\u80fd\u3067\u3059\u3002Xilinx\u793e\u306eVivado\u3001Altera\u793e\u306eQuartusII\u3067\u78ba\u8a8d\u6e08\u307f\u3002\n\n* \uff11\u30af\u30ed\u30c3\u30af\u30671\u30012\u30013\u30018\u300116\u30ef\u30fc\u30c9(1\u30ef\u30fc\u30c9\u306f32bit)\u306e\u4e71\u6570\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n* \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u5909\u6570\u3067SEED\u5024\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n* \u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\n![Fig.1 Top-Level Signaling Interface](https://qiita-image-store.s3.amazonaws.com/0/24981/9df62731-80aa-350d-cac1-c211d957242e.jpeg \"Fig.1 Top-Level Signaling Interface\")\n\n\nFig.1 Top-Level Signaling Interface\n\n<br />\n\n\n##Licensing\n\n\n\u4e8c\u6761\u9805BSD\u30e9\u30a4\u30bb\u30f3\u30b9 (2-clause BSD license) \u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n#Specification\n\n\n##Parameter Descriptions\n\n\nTable.1 Parameter Descriptions\n\n<table border=\"2\">\n  <tr>\n    <td align=\"center\">Name</td>\n    <td align=\"center\">TYPE</td>\n    <td align=\"center\">Default</td>\n    <td align=\"center\">Description</td>\n  </tr>\n  <tr>\n    <td>L</td>\n    <td align=\"center\">Integer</td>\n    <td align=\"center\">1</td>\n    <td>1\u30af\u30ed\u30c3\u30af\u3067\u751f\u6210\u3059\u308b\u4e71\u6570\u306e\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002<br />\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6307\u5b9a\u3067\u304d\u308b\u6570\u306f\u30011\u30012\u30014\u30018\u300116\u306e\u3044\u305a\u308c\u304b\u3067\u3059\u3002</td>\n  </tr>\n  <tr>\n    <td>SEED</td>\n    <td align=\"center\">Integer</td>\n    <td align=\"center\">-</td>\n    <td>\u4e71\u6570\u306e\u30b7\u30fc\u30c9\u5024\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002</td>\n  </tr>\n</table>\n\n\n\n\n##Port Descriptions\n\n\nTable.2 Port  Descriptions\n\n<table border=\"2\">\n  <tr>\n    <td align=\"center\">Name</td>\n    <td align=\"center\">Type</td>\n    <td align=\"center\">Width</td>\n    <td align=\"center\">I/O</td>\n    <td align=\"center\">Description</td>\n  </tr>\n  <tr>\n    <td>CLK</td>\n    <td align=\"center\">STD_LOGIC</td>\n    <td align=\"center\">1</td>\n    <td align=\"center\">in</td>\n    <td>\u30af\u30ed\u30c3\u30af\u4fe1\u53f7</td>\n  </tr>\n  <tr>\n    <td>RST</td>\n    <td align=\"center\">STD_LOGIC</td>\n    <td align=\"center\">1</td>\n    <td align=\"center\">in</td>\n    <td>\u975e\u540c\u671f\u30ea\u30bb\u30c3\u30c8\u4fe1\u53f7<br />\u6ce8)\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u306e\u5185\u5bb9\u306f\u30ea\u30bb\u30c3\u30c8\u3057\u307e\u305b\u3093</td>\n  </tr>\n  <tr>\n    <td>RND_RUN</td>\n    <td align=\"center\">STD_LOGIC</td>\n    <td align=\"center\">1</td>\n    <td align=\"center\">in</td>\n    <td>\u4e71\u6570\u751f\u6210\u958b\u59cb\u4fe1\u53f7<br />\u3053\u306e\u4fe1\u53f7\u304c'1'\u306b\u306a\u3063\u3066\u304b\u3089\uff13\u30af\u30ed\u30c3\u30af\u5f8c\u306b\u4e71\u6570\u3092\u51fa\u529b\u3057\u307e\u3059<br />TBL_INIT\u304c'1'\u306e\u6642\u3001\u3053\u306e\u4fe1\u53f7\u3092'1'\u306b\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093</td>\n  </tr>\n  <tr>\n    <td>RND_VAL</td>\n    <td align=\"center\">STD_LOGIC</td>\n    <td align=\"center\">1</td>\n    <td align=\"center\">out</td>\n    <td>\u4e71\u6570\u6709\u52b9\u4fe1\u53f7<br />RND_NUM\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u4e71\u6570\u304c\u6709\u52b9\u3067\u3042\u308b\u3053\u3068\u3092\u3057\u3081\u3059\u4fe1\u53f7<br />RND_RUN\u304c'1'\u306b\u306a\u3063\u3066\u304b\u30893\u30af\u30ed\u30c3\u30af\u5f8c\u306b'1'\u306b\u306a\u308a\u307e\u3059</td>\n  </tr>\n  <tr>\n    <td>RND_NUM</td>\n    <td align=\"center\">STD_LOGIC_VECTOR</td>\n    <td align=\"center\">32*L</td>\n    <td align=\"center\">out</td>\n    <td>\u4e71\u6570\u51fa\u529b\u4fe1\u53f7<br />\u751f\u6210\u3055\u308c\u305f\u4e71\u6570\u3092\u51fa\u529b\u3059\u308b\u4fe1\u53f7<br />RND_RUN\u304c'1'\u306b\u306a\u3063\u3066\u304b\u3089\uff13\u30af\u30ed\u30c3\u30af\u5f8c\u306b\u4e71\u6570\u3092\u51fa\u529b\u3057\u307e\u3059</td>\n  </tr>\n  <tr>\n    <td>TBL_INIT</td>\n    <td align=\"center\">STD_LOGIC</td>\n    <td align=\"center\">1</td>\n    <td align=\"center\">in</td>\n    <td>\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u521d\u671f\u5316\u4fe1\u53f7<br />\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u3092\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059<br />\u3053\u306e\u4fe1\u53f7\u304c'1'\u306e\u6642\u306e\u307f\u3001TBL_*\u4fe1\u53f7\u306f\u6709\u52b9\u3067\u3059\u3053\u306e\u4fe1\u53f7\u3092'1'\u306b\u3059\u308b\u3068\u3001\u5185\u90e8\u306e\u30ab\u30a6\u30f3\u30bf\u304c\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u307e\u3059</td>\n  </tr>\n  <tr>\n    <td>TBL_WE</td>\n    <td align=\"center\">STD_LOGIC_VECTOR</td>\n    <td align=\"center\">1*L</td>\n    <td align=\"center\">in</td>\n    <td>\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u30e9\u30a4\u30c8\u4fe1\u53f7<br />\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u30e9\u30a4\u30c8\u3092\u793a\u3059\u4fe1\u53f7<br />\u30e9\u30a4\u30c8\u306f\u30ef\u30fc\u30c9(32bit)\u5358\u4f4d\u3067\u884c\u3044\u307e\u3059</td>\n  </tr>\n  <tr>\n    <td>TBL_WPTR</td>\n    <td align=\"center\">STD_LOGIC_VECTOR</td>\n    <td align=\"center\">16</td>\n    <td align=\"center\">in</td>\n    <td>\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u30e9\u30a4\u30c8\u30a2\u30c9\u30ec\u30b9<br />\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u30e9\u30a4\u30c8\u30a2\u30c9\u30ec\u30b9\u3092\u30ef\u30fc\u30c9(32bit)\u5358\u4f4d\u3067\u793a\u3057\u307e\u3059<br />\u4f8b\u3048\u3070\u3001LANE=2\u306e\u5834\u5408\u4e0b\u4f4d1\u30d3\u30c3\u30c8\u306f\u7121\u8996\u3055\u308c\u307e\u3059</td>\n  </tr>\n  <tr>\n    <td>TBL_WDATA</td>\n    <td align=\"center\">STD_LOGIC_VECTOR</td>\n    <td align=\"center\">32*L</td>\n    <td align=\"center\">in</td>\n    <td>\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u30e9\u30a4\u30c8\u30c7\u30fc\u30bf<br />\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u3078\u306e\u30e9\u30a4\u30c8\u30c7\u30fc\u30bf\u3092LSB\u3067\u5165\u529b\u3057\u307e\u3059</td>\n  </tr>\n  <tr>\n    <td>TBL_RPTR</td>\n    <td align=\"center\">STD_LOGIC_VECTOR</td>\n    <td align=\"center\">16</td>\n    <td align=\"center\">in</td>\n    <td>\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u30ea\u30fc\u30c9\u30a2\u30c9\u30ec\u30b9<br />\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u306e\u30ea\u30fc\u30c9\u30a2\u30c9\u30ec\u30b9\u3092\u30ef\u30fc\u30c9(32bit)\u5358\u4f4d\u3067\u793a\u3057\u307e\u3059<br />\u4f8b\u3048\u3070\u3001LANE=2\u306e\u5834\u5408\u4e0b\u4f4d1\u30d3\u30c3\u30c8\u306f\u7121\u8996\u3055\u308c\u307e\u3059</td>\n  </tr>\n  <tr>\n    <td>TBL_RDATA</td>\n    <td align=\"center\">STD_LOGIC_VECTOR</td>\n    <td align=\"center\">32*L</td>\n    <td align=\"center\">out</td>\n    <td>\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u30fb\u30ea\u30fc\u30c9\u30c7\u30fc\u30bf<br />\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u306e\u30ea\u30fc\u30c9\u30c7\u30fc\u30bf<br />TBL_RPTR\u306e\u5165\u529b\u306b\u5bfe\u3057\u3066\uff11\u30af\u30ed\u30c3\u30af\u5f8c\u306bTBL_RPTR\u3067\u793a\u3057\u305f\u30a2\u30c9\u30ec\u30b9\u306e\u5024\u3092\u51fa\u529b\u3057\u307e\u3059</td>\n  </tr>\n</table>\n\n\n\n\n![Fig.2 Generate Timing (L=1)](https://qiita-image-store.s3.amazonaws.com/0/24981/f79d58d9-586d-a96b-abd2-5d13d316478b.jpeg \"Fig.2 Generate Timing (L=1)\")\n\nFig.2 Generate Timing (L=1)\n\n<br />\n\n\n![Fig.3 Generate Timing (L=4)](https://qiita-image-store.s3.amazonaws.com/0/24981/223b4b1b-aad8-0a08-e9ff-8b6963b2e599.jpeg \"Fig.3 Generate Timing (L=4)\")\n\n\nFig.3 Generate Timing (L=4)\n\n<br />\n\n\n##Resouces and Performance\n\n\nXilinx\u793e\u306eFPGA\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\u7d50\u679c\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\nParameter \u306eRAM \u306f\u3001\u5185\u90e8\u30e1\u30e2\u30ea\u306bBRAM(Block RAM)\u3092\u4f7f\u3046\u304b\u3001LUT\u3092\u4f7f\u3046\u304b\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002Performance\u306e\u751f\u6210\u901f\u5ea6\u306f\uff11\u79d2\u9593\u306b\u751f\u6210\u3067\u304d\u308b\u30ef\u30fc\u30c9\u6570(1\u30ef\u30fc\u30c9\u306f32bit)\u306e\u7406\u8ad6\u5024\u3067\u3059\u3002\n\nTable.3 Resouces and Performance(Xilinx)\n\n<table border=\"2\">\n  <tr>\n    <td align=\"center\" colspan=\"2\">Device</td>\n    <td align=\"center\" colspan=\"2\">Parameter</td>\n    <td align=\"center\" colspan=\"2\">Resouces</td>\n    <td align=\"center\" colspan=\"2\">Performance</td>\n  </tr>\n  <tr>\n    <td align=\"center\">Family</td>\n    <td align=\"center\">Speed</td>\n    <td align=\"center\">L</td>\n    <td align=\"center\">RAM</td>\n    <td align=\"center\">Slices</td>\n    <td align=\"center\">RAMB</td>\n    <td align=\"center\">Fmax</td>\n    <td align=\"center\">Generate word/sec</td>\n  </tr>\n  <tr>\n    <td rowspan=\"10\">Artix-7</td>\n    <td align=\"center\" rowspan=\"10\">3</td>\n    <td align=\"center\" rowspan=\"2\">1</td>\n    <td align=\"center\">BRAM</td>\n    <td align=\"right\">112</td>\n    <td align=\"center\">2</td>\n    <td align=\"right\">250[MHz]</td>\n    <td align=\"right\">250[Mword/sec]</td>\n  </tr>\n  <tr>\n    <td align=\"center\">LUT</td>\n    <td align=\"right\">1815</td>\n    <td align=\"center\">0</td>\n    <td align=\"right\">250[MHz]</td>\n    <td align=\"right\">250[Mword/sec]</td>\n  </tr>\n  <tr>\n    <td align=\"center\" rowspan=\"2\">2</td>\n    <td align=\"center\">BRAM</td>\n    <td align=\"right\">221</td>\n    <td align=\"center\">4</td>\n    <td align=\"right\">250[MHz]</td>\n    <td align=\"right\">500[Mword/sec]</td>\n  </tr>\n  <tr>\n    <td align=\"center\">LUT</td>\n    <td align=\"right\">1911</td>\n    <td align=\"center\">0</td>\n    <td align=\"right\">250[MHz]</td>\n    <td align=\"right\">500[Mword/sec]</td>\n  </tr>\n  <tr>\n    <td align=\"center\" rowspan=\"2\">4</td>\n    <td align=\"center\">BRAM</td>\n    <td align=\"right\">443</td>\n    <td align=\"center\">8</td>\n    <td align=\"right\">250[MHz]</td>\n    <td align=\"right\">1000[Mword/sec]</td>\n  </tr>\n  <tr>\n    <td align=\"center\">LUT</td>\n    <td align=\"right\">2101</td>\n    <td align=\"center\">0</td>\n    <td align=\"right\">250[MHz]</td>\n    <td align=\"right\">1000[Mword/sec]</td>\n  </tr>\n  <tr>\n    <td align=\"center\" rowspan=\"2\">8</td>\n    <td align=\"center\">BRAM</td>\n    <td align=\"right\">894</td>\n    <td align=\"center\">16</td>\n    <td align=\"right\">250[MHz]</td>\n    <td align=\"right\">2000[Mword/sec]</td>\n  </tr>\n  <tr>\n    <td align=\"center\">LUT</td>\n    <td align=\"right\">2784</td>\n    <td align=\"center\">0</td>\n    <td align=\"right\">250[MHz]</td>\n    <td align=\"right\">2000[Mword/sec]</td>\n  </tr>\n  <tr>\n    <td align=\"center\" rowspan=\"2\">16</td>\n    <td align=\"center\">BRAM</td>\n    <td align=\"right\">1844</td>\n    <td align=\"center\">32</td>\n    <td align=\"right\">238[MHz]</td>\n    <td align=\"right\">3808[Mword/sec]</td>\n  </tr>\n  <tr>\n    <td align=\"center\">LUT</td>\n    <td align=\"right\">3098</td>\n    <td align=\"center\">0</td>\n    <td align=\"right\">250[MHz]</td>\n    <td align=\"right\">4000[Mword/sec]</td>\n  </tr>\n</table>\n\n\n\n\n#Architecture\n\n\n##Block Diagram\n\n\n\u4e0b\u56f3\u306fL=1\u306e\u6642\u306e\u30d6\u30ed\u30c3\u30af\u56f3\u3067\u3059\u3002\n\n\n![Fig.4 Block Diagram(L=1)](https://qiita-image-store.s3.amazonaws.com/0/24981/c851b51b-a474-a62b-36b6-5bce9865fa38.jpeg \"Fig.4 Block Diagram(L=1)\")\n\nFig.4 Block Diagram(L=1)\n\n<br />\n\n\n##RAM\u306e\u69cb\u6210(L=1\u306e\u5834\u5408)\n\n\nMT32_Rand_Gen \u306f1\u30af\u30ed\u30c3\u30af\u30671\uff5eL\u306e\u4e71\u6570\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3068\u3053\u308d\u304cMersenne Twister\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3001\uff11\u3064\u306e\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u72b6\u614b\u30c6\u30fc\u30d6\u30eb(mt)\u306ei\u3001(i+1) mod  N\u3001(i+M) mod N\u306e\u4f4d\u7f6e\u306e\u5024\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\n```VHDL:mt19937ar.vhd\n    procedure generate_word(\n        variable generator  : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable result     : out   RANDOM_NUMBER_TYPE\n    ) is\n        alias    mt         :       RANDOM_NUMBER_VECTOR(0 to generator.table'length-1) is generator.table;\n        variable i          :       integer range mt'low to mt'high;\n        variable x0,x1,xm   :       RANDOM_NUMBER_TYPE;\n        variable y          :       RANDOM_NUMBER_TYPE;\n        variable z          :       RANDOM_NUMBER_TYPE;\n        constant mag01      :       RANDOM_NUMBER_VECTOR(0 to 1) := (0 => X\"00000000\", 1 => MATRIX_A);\n    begin\n        i  := generator.index;\n        x0 := mt(i);\n        x1 := mt((i+1) mod mt'length);\n        xm := mt((i+M) mod mt'length);\n        y  := (x0 and UPPER_MASK) or (x1 and LOWER_MASK);\n        z  := xm xor (y srl 1) xor mag01(to_integer(y mod mag01'length));\n        mt(i) := z;\n        generator.index := (i+1) mod mt'length;\n        y  := z;\n        y  := y xor ((y srl 11));\n        y  := y xor ((y sll  7) and X\"9d2c5680\");\n        y  := y xor ((y sll 15) and X\"efc60000\");\n        y  := y xor ((y srl 18));\n        result := y;\n    end procedure; \n```\n\n\n\n\n1\u30af\u30ed\u30c3\u30af\u3067\u4e71\u6570\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u304b\u3089\uff13\u3064\u306e\u30a2\u30c9\u30ec\u30b9\u306e\u30c7\u30fc\u30bf\u3092\u540c\u6642\u306b\u8aad\u307f\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u901a\u5e38\u306a\u3089\u30e9\u30a4\u30c8\uff11\u30dd\u30fc\u30c8\u3001\u30ea\u30fc\u30c9\uff13\u30dd\u30fc\u30c8\u306eRAM\u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u57fa\u672c\u7684\u306bi\u306f\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u305f\u3081\u3001\u4e00\u3064\u524d\u306e\u4e71\u6570\u751f\u6210\u6642\u306b\u4f7f\u7528\u3057\u305fMT[i+1]\u3092\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d\u3001\u6b21\u306e\u4e71\u6570\u751f\u6210\u6642\u306bMT[i]\u3068\u3057\u3066\u4f7f\u7528\u3059\u308c\u3070\u3001\u30e9\u30a4\u30c8\uff11\u30dd\u30fc\u30c8\u3001\u30ea\u30fc\u30c9\uff12\u30dd\u30fc\u30c8\u306eRAM\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002MT32_Rand_Gen\u3067\u306f\u3001\u30e9\u30a4\u30c8\uff11\u30dd\u30fc\u30c8\u3001\u30ea\u30fc\u30c9\uff12\u30dd\u30fc\u30c8\u306eRAM\u306f\u30e9\u30a4\u30c8\uff11\u30dd\u30fc\u30c8\u3001\u30ea\u30fc\u30c9\uff11\u30dd\u30fc\u30c8\u306eRAM\u3092\u4e8c\u3064\u4e26\u3079\u308b\u3053\u3068\u3067\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n\n\n\n![Fig.5 RAM Read and Twist Timing Chart (L=1)](https://qiita-image-store.s3.amazonaws.com/0/24981/b960aae5-b566-dfea-9058-7ca51ac62684.jpeg \"Fig.5 RAM Read and Twist Timing Chart (L=1)\")\n\nFig.5 RAM Read and Twist Timing Chart (L=1)\n\n<br />\n\n\n\n###RAM\u306e\u69cb\u6210(L>1\u306e\u5834\u5408)\n\n\nMT32_Rand_Gen\u3067\u306fL\u306b2\u30014\u30018\u300116\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\uff11\u30af\u30ed\u30c3\u30af\u3067\u305d\u308c\u305e\u308c2\u30ef\u30fc\u30c9\u30014\u30ef\u30fc\u30c9\u30018\u30ef\u30fc\u30c9\u300116\u30ef\u30fc\u30c9\u306e\u4e71\u6570\u3092\u540c\u6642\u306b\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u306b\u306f\u3001\u4f8b\u3048\u3070L=4\u306e\u5834\u5408\u3001\u6b21\u306e\uff19\u7b87\u6240\u306e\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u306e\u5024\u3092\uff11\u30af\u30ed\u30c3\u30af\u3067\u8aad\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n1. i\n\n2. (i+1) mod N\n\n3. (i+2) mod N\n\n4. (i+3) mod N\n\n5. (i+4) mod N\n\n6. (i+0+M) mod N\n\n7. (i+1+M) mod N\n\n8. (i+2+M) mod N\n\n9. (i+3+M) mod N\n\nMT32_Rand_gen\u3067\u306fRAM\u306e\u69cb\u6210\u3092\u5de5\u592b\u3059\u308b\u3053\u3068\u3067\u3001\u72b6\u614b\u30c6\u30fc\u30d6\u30eb\u306e\u5024\u3092\u540c\u6642\u306b\u8aad\u3093\u3067\u3044\u307e\u3059\u3002\n\n\n\n\n\n\n\n\n\n\n\n\u307e\u305a\u306f\u3001MT[i]\u3001MT[(i+1) mod N]\u3001MT[(i+2) mod N]\u3001MT[(i+3) mod N]\u3001MT[(i+4) mod N]\u306eRAM\u306e\u69cb\u6210\u3092\u6b21\u56f3\u306b\u793a\u3057\u307e\u3059\u3002\n\nL=1\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u3001MT[(i+4) mod N] \u306e\u5024\u3092\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3057\u3066\u304a\u304d\u3001\u6b21\u306eMT[i]\u3068\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\n![Fig.6 Block Diagram(L=4)-1](https://qiita-image-store.s3.amazonaws.com/0/24981/f44ace8c-915f-efbc-048c-2217a47ee227.jpeg \"Fig.6 Block Diagram(L=4)-1\")\n\nFig.6 Block Diagram(L=4)-1\n\n<br />\n\n\n\n\u6b21\u306bMT[(i+0+M) mod N]\u3001MT[(i+1+M) mod N]\u3001MT[(i+2+M) mod N]\u3001MT[(i+3+M) mod N]\u306eRAM\u5468\u308a\u306e\u69cb\u6210\u3092\u6b21\u56f3\u306b\u793a\u3057\u307e\u3059\u3002\n\n\n![Fig.7 Block Diagram(L=4)-2](https://qiita-image-store.s3.amazonaws.com/0/24981/64b82b9c-5b95-5f22-c42a-87b7efaf4853.jpeg \"Fig.7 Block Diagram(L=4)-2\")\n\n\nFig.7 Block Diagram(L=4)-2\n\n<br />\n\n\u6ce8\u610f\u70b9\u306f\u3001MT32_Rand_Gen \u3067\u306fM=397\u306a\u306e\u3067\u3001\u4f8b\u3048\u3070MT[i+0+M]\u306fZ[i+1]\u3092\u66f8\u304d\u8fbc\u3093\u3060RAM\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u5404RAM\u306e\u51fa\u529b\u306f1\u3060\u3051\u30ed\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u5404Twist\u306exm\u306b\u63a5\u7d9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n###RAM\u306e\u30a2\u30c9\u30ec\u30b9\n\n\nRAM\u306e\u30a2\u30c9\u30ec\u30b9\u306e\u30bf\u30a4\u30d7\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```VHDL:mt32_rand_gen.vhd\n    function  CALC_MT_PTR_LOW return integer is\n        variable retval : integer;\n    begin\n        retval := 0;\n        while (2**retval < L) loop\n            retval := retval + 1;\n        end loop;\n        return retval;\n    end function;\n    function  CALC_MT_PTR_HIGH return integer is\n        variable retval : integer;\n    begin\n        retval := 0;\n        while (2**(retval+1) < N) loop\n            retval := retval + 1;\n        end loop;\n        return retval;\n    end function;\n    constant  MT_PTR_LOW           : integer := CALC_MT_PTR_LOW;\n    constant  MT_PTR_HIGH          : integer := CALC_MT_PTR_HIGH;\n    subtype   MT_PTR_TYPE         is std_logic_vector(MT_PTR_HIGH downto MT_PTR_LOW);\n```\n\n\n\n\n\u307e\u305f i mod N\u306a\u3069\u3044\u3061\u3044\u3061\u5270\u4f59\u3092\u8a08\u7b97\u3059\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001i \u306f\u5e38\u306b\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u3053\u3068\u3092\u5229\u7528\u3057\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```VHDL:mt32_rand_gen.vhd\n    function  TO_MT_PTR(arg:integer) return MT_PTR_TYPE is\n        variable u : unsigned(MT_PTR_HIGH downto 0);\n    begin\n        u := to_unsigned(arg,u'length);\n        return std_logic_vector(u(MT_PTR_TYPE'range));\n    end function;\n    function  INC_MT_PTR(ptr:MT_PTR_TYPE) return MT_PTR_TYPE is\n        variable retval : MT_PTR_TYPE;\n    begin\n        if (unsigned(ptr) >= unsigned(TO_MT_PTR(N-1))) then\n            retval := (others => '0');\n        else\n            retval := std_logic_vector(unsigned(ptr)+1);\n        end if;\n        return retval;\n    end function;\n```\n\n\n\n\n\u3055\u3089\u306b\u6b21\u306e\u3088\u3046\u306b\u5404RAM\u3078\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u5404\u4fe1\u53f7\u306e\u610f\u5473\u306f\u6b21\u306e\u901a\u308a\u3002\n\n  * x_curr_index = ((i) mod N)/L\n\n  * x_next_index = ((i+L) mod N)/L\n\n  * m_curr_index = ((i+M) mod N)/L\n\n  * m_next_index = ((i+L+M) mod N)/L\n\n\n```VHDL:mt32_rand_gen.vhd\n CTRL: process(CLK,RST) begin\n        if (RST = '1') then\n                x_curr_index <= TO_MT_PTR(0);\n                x_next_index <= TO_MT_PTR(0);\n                m_curr_index <= TO_MT_PTR(M);\n                m_next_index <= TO_MT_PTR(M);\n                z_curr_index <= TO_MT_PTR(0);\n                mt_read      <= '0';\n                z_val        <= '0';\n        elsif (CLK'event and CLK = '1') then\n            if    (TBL_INIT='1') then\n                x_curr_index <= TO_MT_PTR(0);\n                x_next_index <= TO_MT_PTR(0);\n                m_curr_index <= TO_MT_PTR(M);\n                m_next_index <= TO_MT_PTR(M);\n                z_curr_index <= TO_MT_PTR(0);\n                mt_read      <= '0';\n                z_val        <= '0';\n            else\n                if (RND_RUN = '1')then\n                    x_curr_index <= x_next_index;\n                    x_next_index <= INC_MT_PTR(x_next_index);\n                    m_curr_index <= m_next_index;\n                    m_next_index <= INC_MT_PTR(m_next_index);\n                    mt_read      <= '1';\n                else\n                    mt_read      <= '0';\n                end if;\n                if (mt_read = '1') then\n                    z_curr_index <= x_curr_index;\n                    z_val        <= '1';\n                else\n                    z_val        <= '0';\n                end if;\n            end if;\n        end if;\n    end process;\n```\n\n\n\n\n\n#Simulation\n\n\n##GHDL\u306b\u3088\u308b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n\n\n####GHDL\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\nGHDL\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f0.29\u3067\u3059\u3002\n\nGHDL\u306e\u30db\u30fc\u30e0\u30da\u30fc\u30b8\u306f\u3053\u3061\u3089(http://ghdl.free.fr)\n\n\n###Makefile\n\n\n\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7528\u306b Makefile \u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```Makefile:Makefile\nGHDL=ghdl\nGHDLFLAGS=--mb-comments\nWORK=work\nTEST_BENCH = test_bench \\\\\n             $(END_LIST)\nall: $(TEST_BENCH)\nclean:\n\trm -f *.o *.cf $(TEST_BENCH)\ntest_bench: mt19937ar.o test_bench.o mt32_rand_gen.o mt32_rand_ram.o mt32_rand_ram_auto.o \n\t $(GHDL) -e $(GHDLFLAGS) $@\n\t-$(GHDL) -r $(GHDLRUNFLAGS) $@\n\ntest_bench.o    :  ../../src/test/vhdl/test_bench.vhd mt32_rand_gen.o\n\t$(GHDL) -a $(GHDLFLAGS) --work=work $<\n\nmt32_rand_gen.o :  ../../src/main/vhdl/mt32_rand_gen.vhd\n\t$(GHDL) -a $(GHDLFLAGS) --work=mt32_rand_gen $<\n\nmt32_rand_ram.o:  ../../src/main/vhdl/mt32_rand_ram.vhd\n\t$(GHDL) -a $(GHDLFLAGS) --work=mt32_rand_gen $<\n\nmt32_rand_ram_auto.o:  ../../src/main/vhdl/mt32_rand_ram_auto.vhd mt32_rand_ram.o\n\t$(GHDL) -a $(GHDLFLAGS) --work=mt32_rand_gen $<\n\nmt19937ar.o    :  ../../src/main/vhdl/mt19937ar.vhd\n\t$(GHDL) -a $(GHDLFLAGS) --work=mt32_rand_gen $<\n\n```\n\n\n\n###\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\n\n\n\n```Shell\n$ cd sim/ghdl\n$ cd make\nghdl -a --mb-comments --work=mt32_rand_gen ../../src/main/vhdl/mt19937ar.vhd\nghdl -a --mb-comments --work=mt32_rand_gen ../../src/main/vhdl/mt32_rand_gen.vhd\nghdl -a --mb-comments --work=work ../../src/test/vhdl/test_bench.vhd\nghdl -a --mb-comments --work=mt32_rand_gen ../../src/main/vhdl/mt32_rand_ram.vhd\nghdl -a --mb-comments --work=mt32_rand_gen ../../src/main/vhdl/mt32_rand_ram_auto.vhd\nghdl -e --mb-comments test_bench\nghdl -r  test_bench\n check prgn_1.table\n 1000 outputs of genrand_int32()\n2991312382 3062119789 1228959102 1840268610  974319580 \n2967327842 2367878886 3088727057 3090095699 2109339754 \n1817228411 3350193721 4212350166 1764906721 2941321312 \n\t:\n\t(\u4e2d\u7565)\n\t:\n../../src/test/vhdl/test_bench.vhd:297:9:@51680ns:(assertion failure):   Run complete...\n./test_bench:error: assertion failed\n./test_bench:error: simulation failed\nghdl: compilation error\n```\n\n\n\u6700\u5f8c\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u3053\u308c\u306fassert(FALSE)\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n\n\n\n\n##Vivado\u306b\u3088\u308b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n\n\n###Vivado\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\nVivado 2015.1\n\n\n###Vivado \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\n\n\u3059\u3067\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u7701\u7565\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306eTcl\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\nsim/vivado/create_project.tcl\n\n\n\n\u4e0a\u8a18\u306eTcl\u30b9\u30af\u30ea\u30d7\u30c8\u3092Vivado \u3067\u5b9f\u884c\u3059\u308b\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\n\n\nVivado > Tools > Run Tcl Script > create_project.tcl\n\n\n\n\n###\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\n\n\nVivado > Open Project > mt32_rand_gen.xpr\n\nFlow Navigator > Run Simulation > Run Behavioral Simulation\n\n\n\n\n#Synthesis and Implementation\n\n\n##Vivado\u306b\u3088\u308b\u8ad6\u7406\u5408\u6210\n\n\n###Vivado\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\nVivado 2015.1\n\n\n###Vivado \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\n\n\u3059\u3067\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u7701\u7565\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306eTcl\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\nfpga/xilinx/vivado2015.1/mt32_rand_gen/create_project.tcl\n\n\n\n\u4e0a\u8a18\u306eTcl\u30b9\u30af\u30ea\u30d7\u30c8\u3092Vivado \u3067\u5b9f\u884c\u3059\u308b\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u4f5c\u6210\u3055\u308c\u307e\u3059\u3002\n\n\n\nVivado > Tools > Run Tcl Script > create_project.tcl\n\n\n\n\u30c7\u30d0\u30a4\u30b9\u306f\u3068\u308a\u3042\u3048\u305axc7a15tcsg324-3\u3092\u6307\u5b9a\u3057\u307e\u3059\u304c\u3001\u5909\u66f4\u3057\u305f\u3044\u5834\u5408\u306f\u3001create_project.tcl \u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n\n###Synthesis\n\n\nFlow Navigator > Run Synthesis\n\n\n###Implementation\n\n\nFlow Navigator > Run Implementation\n\n\n\n\n\n##QuartusII\u306b\u3088\u308b\u8ad6\u7406\u5408\u6210\n\n\n###QuartusII\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\nQuartusII 13.1sp1\n\n\n\n\n###QuartusII\u7528\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\n\nfpga/altera/13.1sp1/mt32_rand_gen.qpf\n\n\n\n\n\n\n#Acknowledgments\n\n\n\u3053\u306e\u3088\u3046\u306a\u8cb4\u91cd\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u60dc\u3057\u3052\u3082\u306a\u304f\u516c\u958b\u3057\u3066\u304f\u3060\u3055\u3063\u305f\u65b9\u3005\u306b\u306f\u3072\u305f\u3059\u3089\u611f\u8b1d\u3067\u3059\u3002\n\n", "tags": ["VHDL", "HDL", "FPGA", "Random"]}