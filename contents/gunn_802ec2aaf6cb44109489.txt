{"tags": ["SIMD", "AVX"], "context": "\n\nfabs\nfabs: !sign_mask & x\n__m256d sign_mask = _mm256_set1_pd(-0.); // -0. == 0b100000...\nymm = _mm256_andnot_pd(sign_mask, ymm);\n\n\n\u578b\u5909\u63db\nfloat\u304b\u3089int\u3078\u3002_mm256_cvtps_epi32 \u304b _mm256_round_ps\u3092\u4f7f\u3046\u3002\n_mm256_round_ps\u306b\u306f\u30de\u30af\u30ed\u304c\u3042\u308b\u3002\n#define _mm256_ceil_ps(val)   _mm256_round_ps((val), _MM_FROUND_CEIL)\n#define _mm256_floor_ps(val)  _mm256_round_ps((val), _MM_FROUND_FLOOR)\n\nint main() {\n    int x;\n    float a[] = {1.1f, -2.2f, 3.3f, -4.4f, 5.5f, -6.6f, 7.7f, -8.8f};\n    int i[8];\n    float j[8];\n    float k[8];\n    float l[8];\n    __m256  mm_a = _mm256_loadu_ps(&a[0]);\n    __m256i mm_i = _mm256_cvtps_epi32(mm_a);\n    __m256  mm_j = _mm256_floor_ps(mm_a);\n    __m256  mm_k = _mm256_ceil_ps(mm_a);\n    __m256  mm_l = _mm256_round_ps(mm_a, _MM_FROUND_TO_NEAREST_INT);\n    _mm256_storeu_si256((__m256i *)&i[0], mm_i);\n    _mm256_storeu_ps(&j[0], mm_j);\n    _mm256_storeu_ps(&k[0], mm_k);\n    _mm256_storeu_ps(&l[0], mm_l);\n    for (x=0; x<8; x++) {\n        printf(\"[%d] %+.2f:  %+d  %+.2f  %+.2f  %+.2f\\n\", x, a[x], i[x], j[x], k[x], l[x]);\n    }\n    return 0;\n}\n\n    input:cvtps floor   ceil   near\n[0] +1.10:  +1  +1.00  +2.00  +1.00\n[1] -2.20:  -2  -3.00  -2.00  -2.00\n[2] +3.30:  +3  +3.00  +4.00  +3.00\n[3] -4.40:  -4  -5.00  -4.00  -4.00\n[4] +5.50:  +6  +5.00  +6.00  +6.00\n[5] -6.60:  -7  -7.00  -6.00  -7.00\n[6] +7.70:  +8  +7.00  +8.00  +8.00\n[7] -8.80:  -9  -9.00  -8.00  -9.00\n\n\n\u4e26\u3073\u66ff\u3048\n|7|6|5|4|3|2|1|0| \u21d2 |7|5|3|1|6|4|2|0| \u306b\u3057\u305f\u3044\nshuffle\u3067\u306f128\u30d3\u30c3\u30c8\u5883\u754c\u3092\u8d8a\u3048\u3089\u308c\u306a\u3044\u306e\u3067permute\nvoid permute()\n{\n  int src[] = {0, 1, 2, 3, 4, 5, 6, 7};\n  int dst[8] = {0};\n\n  __m256i ymm_src = _mm256_loadu_si256((__m256i*)(src));\n  __m256i ymm_idx = _mm256_set_epi32(7,5,3,1,6,4,2,0);\n  __m256i ymm_dst = _mm256_permutevar8x32_epi32(ymm_src, ymm_idx);\n  _mm256_storeu_si256((__m256i*)(dst), ymm_dst);\n  printf(\"src:\"); for (int i=0; i<8; i++) { printf(\" %d\", src[i]);} printf(\"\\n\");\n  printf(\"dst:\"); for (int i=0; i<8; i++) { printf(\" %d\", dst[i]);} printf(\"\\n\");\n\n  return;\n}\n\nsrc: 0 1 2 3 4 5 6 7\ndst: 0 2 4 6 1 3 5 7\n#fabs\nfabs: !sign_mask & x\n\n```c:\n__m256d sign_mask = _mm256_set1_pd(-0.); // -0. == 0b100000...\nymm = _mm256_andnot_pd(sign_mask, ymm);\n```\n\n#\u578b\u5909\u63db\nfloat\u304b\u3089int\u3078\u3002`_mm256_cvtps_epi32` \u304b `_mm256_round_ps`\u3092\u4f7f\u3046\u3002\n_mm256_round_ps\u306b\u306f\u30de\u30af\u30ed\u304c\u3042\u308b\u3002\n\n```\n#define _mm256_ceil_ps(val)   _mm256_round_ps((val), _MM_FROUND_CEIL)\n#define _mm256_floor_ps(val)  _mm256_round_ps((val), _MM_FROUND_FLOOR)\n```\n\n```c:\nint main() {\n    int x;\n    float a[] = {1.1f, -2.2f, 3.3f, -4.4f, 5.5f, -6.6f, 7.7f, -8.8f};\n    int i[8];\n    float j[8];\n    float k[8];\n    float l[8];\n    __m256  mm_a = _mm256_loadu_ps(&a[0]);\n    __m256i mm_i = _mm256_cvtps_epi32(mm_a);\n    __m256  mm_j = _mm256_floor_ps(mm_a);\n    __m256  mm_k = _mm256_ceil_ps(mm_a);\n    __m256  mm_l = _mm256_round_ps(mm_a, _MM_FROUND_TO_NEAREST_INT);\n    _mm256_storeu_si256((__m256i *)&i[0], mm_i);\n    _mm256_storeu_ps(&j[0], mm_j);\n    _mm256_storeu_ps(&k[0], mm_k);\n    _mm256_storeu_ps(&l[0], mm_l);\n    for (x=0; x<8; x++) {\n        printf(\"[%d] %+.2f:  %+d  %+.2f  %+.2f  %+.2f\\n\", x, a[x], i[x], j[x], k[x], l[x]);\n    }\n    return 0;\n}\n\n    input:cvtps floor   ceil   near\n[0] +1.10:  +1  +1.00  +2.00  +1.00\n[1] -2.20:  -2  -3.00  -2.00  -2.00\n[2] +3.30:  +3  +3.00  +4.00  +3.00\n[3] -4.40:  -4  -5.00  -4.00  -4.00\n[4] +5.50:  +6  +5.00  +6.00  +6.00\n[5] -6.60:  -7  -7.00  -6.00  -7.00\n[6] +7.70:  +8  +7.00  +8.00  +8.00\n[7] -8.80:  -9  -9.00  -8.00  -9.00\n```\n\n#\u4e26\u3073\u66ff\u3048\n|7|6|5|4|3|2|1|0| \u21d2 |7|5|3|1|6|4|2|0| \u306b\u3057\u305f\u3044\nshuffle\u3067\u306f128\u30d3\u30c3\u30c8\u5883\u754c\u3092\u8d8a\u3048\u3089\u308c\u306a\u3044\u306e\u3067permute\n\n```c:\nvoid permute()\n{\n  int src[] = {0, 1, 2, 3, 4, 5, 6, 7};\n  int dst[8] = {0};\n\n  __m256i ymm_src = _mm256_loadu_si256((__m256i*)(src));\n  __m256i ymm_idx = _mm256_set_epi32(7,5,3,1,6,4,2,0);\n  __m256i ymm_dst = _mm256_permutevar8x32_epi32(ymm_src, ymm_idx);\n  _mm256_storeu_si256((__m256i*)(dst), ymm_dst);\n  printf(\"src:\"); for (int i=0; i<8; i++) { printf(\" %d\", src[i]);} printf(\"\\n\");\n  printf(\"dst:\"); for (int i=0; i<8; i++) { printf(\" %d\", dst[i]);} printf(\"\\n\");\n\n  return;\n}\n```\nsrc: 0 1 2 3 4 5 6 7\ndst: 0 2 4 6 1 3 5 7\n"}