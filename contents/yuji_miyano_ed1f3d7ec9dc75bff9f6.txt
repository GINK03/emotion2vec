{"context": "\n\n1. \u6982\u8981\n\u4ee5\u524d\u306e\u8a18\u4e8b(Raspberry Pi 3\u3067openFrameworks\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u304b\u3059 - Qiita)\u306b\u66f8\u3044\u305f\u7d9a\u304d\u3067\u3059\u304c\u3001\u5c55\u793a\u7528\u306eMac\u3092Raspberry Pi\u3067\u7f6e\u304d\u63db\u3048\u3088\u3046\u3068\u3044\u3046\u8a66\u307f\u3067\u3059\u3002\n\u524d\u56de\u306fRaspberry Pi\u306boF\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u52d5\u304b\u3057\u305f\u3068\u3053\u308d\u307e\u3067\u3060\u3063\u305f\u306e\u3067\u3001\u4eca\u56de\u306fRaspbery Pi\u306bNFC\u30ea\u30fc\u30c0\u3092\u63a5\u7d9a\u3057\u3066python\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u8aad\u3093\u3060NFC\u306e\u30c7\u30fc\u30bf\u3092OSC\u3067openFrameworks\u306b\u9001\u308a\u307e\u3059\u3002\n\n2. \u4f5c\u696d\u74b0\u5883\n\nRaspberry Pi 3 + 2016-09-23-raspbian-jessie\nRFID-RC522 Amazon \u691c\u7d22:RC522\n\n\n\n3. \u53c2\u8003\u30b5\u30a4\u30c8\n\nRaspberry Pi 3 Model B\u306b SPI\u901a\u4fe1\u65b9\u5f0f\u306e NFC\u30ea\u30fc\u30c0\u30e9\u30a4\u30bf RFID-RC522\u3092\u63a5\u7d9a\u3057\u3066 NFC\u30bf\u30b0\u3092\u8aad\u3080\u65b9\u6cd5 (\u30e9\u30ba\u30d1\u30a4\uff13\u306b NXP MFRC522 RFID\u30ea\u30fc\u30c0\u30e9\u30a4\u30bf\u3092\u63a5\u7d9a\u3057\u3066\u975e\u63a5\u89e6\u3067 NFC\u30ab\u30fc\u30c9\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5)\nmxgxw/MFRC522-python: A small class to interface with the NFC reader Module MFRC522\nPython OSC (pyOSC) | \u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u306a\u65e5\u3005\npyOSC 0.3.5b-5294 : Python Package Index\nRaspberry  Pi2 \u3067 ofxFaceTracker \u3092\u5b9f\u73fe\u3055\u305b\u308b - Take\u2019s diary\n\n\n4. Raspberry Pi 3\u3067NFC\u30ea\u30fc\u30c0\u3092\u4f7f\u3046\n\u53c2\u8003\u30b5\u30a4\u30c81.\u3092\u983c\u308a\u306bNFC\u30ea\u30fc\u30c0\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u52d5\u304b\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u53c2\u8003\u30b5\u30a4\u30c82.\u306eRead.py\u3067\u3059\u3002\n\u53c2\u8003\u30b5\u30a4\u30c8\u901a\u308a\u3060\u3063\u305f\u306e\u3067\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\n\u6700\u521d\u306b\u8a66\u3057\u305f\u3068\u304d\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d70\u3089\u305b\u3066\u3082\u3001NFC\u30bf\u30b0\u306b\u53cd\u5fdc\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u30b5\u30a4\u30c8\u306b\u306fDevice Tree\u3092\u7121\u52b9\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3057\u305f\u304c\u3001sudo raspi-config\u3057\u3066\u3082Advanced Option\u306e\u4e2d\u306bDevice Tree\u304c\u898b\u5f53\u305f\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u304cRaspbian\u3092\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3089\u6cbb\u308a\u307e\u3057\u305f\u3002Raspbian 2016-02-26\u304c\u30d7\u30ea\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308bmicro SD\u30ab\u30fc\u30c9\u3092\u8cb7\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30d7\u30ea\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u304c\u826f\u304f\u306a\u304b\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n5. pyOSC\u3092\u5c0e\u5165\u3059\u308b\n4.\u3067\u52d5\u304b\u3057\u305fpython\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092openFrameworks\u306b\u6301\u3063\u3066\u3044\u304f\u306e\u306bosc\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\noF\u304b\u3089\u76f4\u63a5NFC\u30ea\u30fc\u30c0\u3092\u8aad\u3081\u308c\u3070\u3044\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3059\u308c\u3070\u826f\u3044\u306e\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u306e\u65b9\u6cd5\u3092\u63a1\u3063\u3066\u3044\u307e\u3059\u3002\n\u53c2\u8003\u30b5\u30a4\u30c83. (Python OSC (pyOSC) | \u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u306a\u65e5\u3005)\u3092\u898b\u306a\u304c\u3089pyOSC\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\npyOSC\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ngit clone https://gitorious.org/pyosc/devel.git\ncd devel\nsudo python setup.py install\n\n\n\u5931\u6557\n\u53c2\u8003\u30b5\u30a4\u30c8\uff13\uff0e\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a66\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u3046\u307e\u304f\u884c\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\ngit clone https://github.com/conanxin/Arduino-Meets-Blender-OSC.git\n\n\u30bf\u30fc\u30df\u30ca\u30eb2\u3064\u7acb\u3061\u4e0a\u3052\u3066\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\u3002\n\nterminal1\ncd Arduino-Meets-Blender-OSC/pyOSC_examples\npython basic_receive.py\n\n\n\nterminal2\ncd Arduino-Meets-Blender-OSC/pyOSC_examples\npython basic_send.py\n\n\nsend.py\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3057\u305f\u3002\n\nterminal2\nTraceback (most recent call last):\n  File \"basic_send.py\", line 28, in <module>\n    client.sendto(msg, ('127.0.0.1', 2014)) # note that the second arg is a tupple and not two arguments\n  File \"/usr/local/lib/python2.7/dist-packages/OSC.py\", line 1174, in sendto\n    ret = select.select([],[self._fd], [], timeout)\nAttributeError: 'OSCClient' object has no attribute '_fd'\n\n\n\u3061\u3087\u3063\u3068\u79c1\u306b\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u6210\u529f\n\u6c17\u3092\u53d6\u308a\u76f4\u3057\u3066\u5225\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\npyOSC\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fdevel\u30d5\u30a9\u30eb\u30c0\u306b\u3042\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\nterminal1\ncd devel/examples\npython knect-rcv.py\n\n\n\nterminal2\ncd devel/examples\npython knect-snd.py\n\n\nknect-snd.py\u3092\u5b9f\u884c\u3059\u308b\u3068knect-rcv.py\u306e\u753b\u9762\u306b\u4ee5\u4e0b\u306e\u8868\u793a\u304c\u3067\u307e\u3057\u305f\u3002\n\nterminal1\n('Now do something with', 'user1', 3.0, 1.0, -1.0)\n('Now do something with', 'user2', 4.0, 2.0, -2.0)\n('Now do something with', 'user3', 3.0999999046325684, 2.0, -2.0)\n('Now do something with', 'user4', 6.0, 3.200000047683716, -2.4000000953674316)\n\n\n\n6. RFID\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306bOSC\u306e\u51e6\u7406\u3092\u52a0\u3048\u308b\nDump.py\u306bknect-snd.py\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u631f\u307f\u8fbc\u3093\u3067\u3044\u304d\u307e\u3057\u305f\u3002\n\nDump_osc.py\n#!/usr/bin/env python\n# -*- coding: utf8 -*-\n\nimport RPi.GPIO as GPIO\nimport MFRC522\nimport signal\n\n# OSC setting\nfrom OSC import OSCClient, OSCMessage\nclient = OSCClient()\nclient.connect((\"localhost\", 7110))\n\ncontinue_reading = True\n\n# Capture SIGINT for cleanup when the script is aborted\ndef end_read(signal,frame):\n    global continue_reading\n    print \"Ctrl+C captured, ending read.\"\n    continue_reading = False\n    GPIO.cleanup()\n\n# Hook the SIGINT\nsignal.signal(signal.SIGINT, end_read)\n\n# Create an object of the class MFRC522\nMIFAREReader = MFRC522.MFRC522()\n\n# This loop keeps checking for chips. If one is near it will get the UID and authenticate\nwhile continue_reading:\n\n    # Scan for cards    \n    (status,TagType) = MIFAREReader.MFRC522_Request(MIFAREReader.PICC_REQIDL)\n\n    # If a card is found\n    if status == MIFAREReader.MI_OK:\n        print \"Card detected\"\n\n    # Get the UID of the card\n    (status,uid) = MIFAREReader.MFRC522_Anticoll()\n\n    # If we have the UID, continue\n    if status == MIFAREReader.MI_OK:\n\n        # Print UID\n        print \"Card read UID: \"+str(uid[0])+\",\"+str(uid[1])+\",\"+str(uid[2])+\",\"+str(uid[3])\n\n        # Send OSC\n        client.send( OSCMessage(\"/user/1\", [uid[0], uid[1], uid[2], uid[3]] ) )\n\n        # This is the default key for authentication\n        key = [0xFF,0xFF,0xFF,0xFF,0xFF,0xFF]\n\n        # Select the scanned tag\n        MIFAREReader.MFRC522_SelectTag(uid)\n\n\n\n7. openFrameworks\u3067OSC\u3092\u53d7\u4fe1\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\n\u3053\u3061\u3089\u3082\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6d41\u7528\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0oscReceiveExample\u3092openFrameworks/apps/myApps/\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\ncd openFrameworks/examples/addons\ncp -r oscReceiveExample /home/pi/openFrameworks/apps/myApps/\n\nofApp.h\u3092\u958b\u304d\u307e\u3059\u3002\ncd /home/pi/openFrameworks/apps/myApps/oscReceiveExample/src\nvim ofApp.h\n\n\u30dd\u30fc\u30c8\u756a\u53f7\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b7\u884c\u76ee\u306e#define PORT 12345\u3092#define PORT 7110\u306b\u5909\u66f4\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u4e00\u3064\u4e0a\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u623b\u3063\u3066make\u3057\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u7d42\u4e86\u3057\u305f\u3089make run\u3057\u307e\u3059\u3002\ncd ..\nmake\nmake run\n\n\u753b\u9762\u53f3\u4e0a\u306b\u9752\u8272\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u958b\u304d\u307e\u3059\u3002\n\u5225\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u7acb\u3061\u4e0a\u3052\u30666.\u3067\u4f5c\u6210\u3057\u305fDump_osc.py\u3092\u7acb\u3061\u4e0a\u3052\u307e\u3059\u3002\ncd MFRC522-python\npython Dump_osc.py\n\nNFC\u30ea\u30fc\u30c0\u306b\u4ed8\u5c5e\u306eNFC\u30ad\u30fc\u30db\u30eb\u30c0\u3092\u304b\u3056\u3059\u3068\u9752\u8272\u306e\u753b\u9762\u306b\u3082NFC\u306eUID\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u52d5\u753b\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\uff08\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068YouTube\u306b\u79fb\u52d5\u3057\u307e\u3059\uff09\n\n\u3053\u3053\u307e\u3067\u3067\u304d\u305f\u306e\u3067\u3001\u3042\u3068\u306foF\u3067\u53d7\u3051\u53d6\u3063\u305fUID\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u3057\u3066\u3044\u3051\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n# 1. \u6982\u8981\n\n\u4ee5\u524d\u306e\u8a18\u4e8b([Raspberry Pi 3\u3067openFrameworks\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u304b\u3059 - Qiita](http://qiita.com/yuji_miyano/items/9028acb88add5a73623d))\u306b\u66f8\u3044\u305f\u7d9a\u304d\u3067\u3059\u304c\u3001\u5c55\u793a\u7528\u306eMac\u3092Raspberry Pi\u3067\u7f6e\u304d\u63db\u3048\u3088\u3046\u3068\u3044\u3046\u8a66\u307f\u3067\u3059\u3002\n\n\u524d\u56de\u306fRaspberry Pi\u306boF\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u52d5\u304b\u3057\u305f\u3068\u3053\u308d\u307e\u3067\u3060\u3063\u305f\u306e\u3067\u3001\u4eca\u56de\u306fRaspbery Pi\u306bNFC\u30ea\u30fc\u30c0\u3092\u63a5\u7d9a\u3057\u3066python\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u8aad\u3093\u3060NFC\u306e\u30c7\u30fc\u30bf\u3092OSC\u3067openFrameworks\u306b\u9001\u308a\u307e\u3059\u3002\n\n# 2. \u4f5c\u696d\u74b0\u5883\n\n* Raspberry Pi 3 + 2016-09-23-raspbian-jessie\n* RFID-RC522 [Amazon \u691c\u7d22:RC522](https://www.amazon.co.jp/s/field-keywords=RC522)\n\n# 3. \u53c2\u8003\u30b5\u30a4\u30c8\n\n1. [Raspberry Pi 3 Model B\u306b SPI\u901a\u4fe1\u65b9\u5f0f\u306e NFC\u30ea\u30fc\u30c0\u30e9\u30a4\u30bf RFID-RC522\u3092\u63a5\u7d9a\u3057\u3066 NFC\u30bf\u30b0\u3092\u8aad\u3080\u65b9\u6cd5 (\u30e9\u30ba\u30d1\u30a4\uff13\u306b NXP MFRC522 RFID\u30ea\u30fc\u30c0\u30e9\u30a4\u30bf\u3092\u63a5\u7d9a\u3057\u3066\u975e\u63a5\u89e6\u3067 NFC\u30ab\u30fc\u30c9\u3092\u8aad\u307f\u8fbc\u3080\u65b9\u6cd5)](http://www.neko.ne.jp/~freewing/raspberry_pi/raspberry_pi_3_spi_nfc_rfid_rc522/)\n2. [mxgxw/MFRC522-python: A small class to interface with the NFC reader Module MFRC522](https://github.com/mxgxw/MFRC522-python)\n3. [Python OSC (pyOSC) | \u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u306a\u65e5\u3005](http://android.ohwada.jp/archives/7186)\n4. [pyOSC 0.3.5b-5294 : Python Package Index](https://pypi.python.org/pypi/pyOSC)\n5. [Raspberry  Pi2 \u3067 ofxFaceTracker \u3092\u5b9f\u73fe\u3055\u305b\u308b - Take\u2019s diary](http://takesan.hatenablog.com/entry/2015/07/28/100621)\n\n\n# 4. Raspberry Pi 3\u3067NFC\u30ea\u30fc\u30c0\u3092\u4f7f\u3046\n\n\u53c2\u8003\u30b5\u30a4\u30c81.\u3092\u983c\u308a\u306bNFC\u30ea\u30fc\u30c0\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u52d5\u304b\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u53c2\u8003\u30b5\u30a4\u30c82.\u306eRead.py\u3067\u3059\u3002\n\u53c2\u8003\u30b5\u30a4\u30c8\u901a\u308a\u3060\u3063\u305f\u306e\u3067\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6700\u521d\u306b\u8a66\u3057\u305f\u3068\u304d\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d70\u3089\u305b\u3066\u3082\u3001NFC\u30bf\u30b0\u306b\u53cd\u5fdc\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u30b5\u30a4\u30c8\u306b\u306fDevice Tree\u3092\u7121\u52b9\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3057\u305f\u304c\u3001```sudo raspi-config```\u3057\u3066\u3082Advanced Option\u306e\u4e2d\u306bDevice Tree\u304c\u898b\u5f53\u305f\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u304cRaspbian\u3092\u518d\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3089\u6cbb\u308a\u307e\u3057\u305f\u3002Raspbian 2016-02-26\u304c\u30d7\u30ea\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308bmicro SD\u30ab\u30fc\u30c9\u3092\u8cb7\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30d7\u30ea\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u304c\u826f\u304f\u306a\u304b\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n# 5. pyOSC\u3092\u5c0e\u5165\u3059\u308b\n\n4.\u3067\u52d5\u304b\u3057\u305fpython\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092openFrameworks\u306b\u6301\u3063\u3066\u3044\u304f\u306e\u306bosc\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\noF\u304b\u3089\u76f4\u63a5NFC\u30ea\u30fc\u30c0\u3092\u8aad\u3081\u308c\u3070\u3044\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3059\u308c\u3070\u826f\u3044\u306e\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u306e\u65b9\u6cd5\u3092\u63a1\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c83. ([Python OSC (pyOSC) | \u30a2\u30f3\u30c9\u30ed\u30a4\u30c9\u306a\u65e5\u3005](http://android.ohwada.jp/archives/7186))\u3092\u898b\u306a\u304c\u3089pyOSC\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\npyOSC\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\ngit clone https://gitorious.org/pyosc/devel.git\ncd devel\nsudo python setup.py install\n```\n\n### \u5931\u6557\n\n\u53c2\u8003\u30b5\u30a4\u30c8\uff13\uff0e\u306b\u66f8\u3044\u3066\u3042\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a66\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u3046\u307e\u304f\u884c\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n```\ngit clone https://github.com/conanxin/Arduino-Meets-Blender-OSC.git\n```\n\n\u30bf\u30fc\u30df\u30ca\u30eb2\u3064\u7acb\u3061\u4e0a\u3052\u3066\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\u3002\n\n``` :terminal1\ncd Arduino-Meets-Blender-OSC/pyOSC_examples\npython basic_receive.py\n```\n\n``` :terminal2\ncd Arduino-Meets-Blender-OSC/pyOSC_examples\npython basic_send.py\n```\n\nsend.py\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3057\u305f\u3002\n\n``` :terminal2\nTraceback (most recent call last):\n  File \"basic_send.py\", line 28, in <module>\n    client.sendto(msg, ('127.0.0.1', 2014)) # note that the second arg is a tupple and not two arguments\n  File \"/usr/local/lib/python2.7/dist-packages/OSC.py\", line 1174, in sendto\n    ret = select.select([],[self._fd], [], timeout)\nAttributeError: 'OSCClient' object has no attribute '_fd'\n````\n\n\u3061\u3087\u3063\u3068\u79c1\u306b\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n### \u6210\u529f\n\n\u6c17\u3092\u53d6\u308a\u76f4\u3057\u3066\u5225\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\npyOSC\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305fdevel\u30d5\u30a9\u30eb\u30c0\u306b\u3042\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n``` :terminal1\ncd devel/examples\npython knect-rcv.py\n```\n\n``` :terminal2\ncd devel/examples\npython knect-snd.py\n```\n\nknect-snd.py\u3092\u5b9f\u884c\u3059\u308b\u3068knect-rcv.py\u306e\u753b\u9762\u306b\u4ee5\u4e0b\u306e\u8868\u793a\u304c\u3067\u307e\u3057\u305f\u3002\n\n``` :terminal1\n('Now do something with', 'user1', 3.0, 1.0, -1.0)\n('Now do something with', 'user2', 4.0, 2.0, -2.0)\n('Now do something with', 'user3', 3.0999999046325684, 2.0, -2.0)\n('Now do something with', 'user4', 6.0, 3.200000047683716, -2.4000000953674316)\n```\n\n# 6. RFID\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306bOSC\u306e\u51e6\u7406\u3092\u52a0\u3048\u308b\n\nDump.py\u306bknect-snd.py\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u631f\u307f\u8fbc\u3093\u3067\u3044\u304d\u307e\u3057\u305f\u3002\n\n\n``` python:Dump_osc.py \n#!/usr/bin/env python\n# -*- coding: utf8 -*-\n\nimport RPi.GPIO as GPIO\nimport MFRC522\nimport signal\n\n# OSC setting\nfrom OSC import OSCClient, OSCMessage\nclient = OSCClient()\nclient.connect((\"localhost\", 7110))\n\ncontinue_reading = True\n\n# Capture SIGINT for cleanup when the script is aborted\ndef end_read(signal,frame):\n    global continue_reading\n    print \"Ctrl+C captured, ending read.\"\n    continue_reading = False\n    GPIO.cleanup()\n\n# Hook the SIGINT\nsignal.signal(signal.SIGINT, end_read)\n\n# Create an object of the class MFRC522\nMIFAREReader = MFRC522.MFRC522()\n\n# This loop keeps checking for chips. If one is near it will get the UID and authenticate\nwhile continue_reading:\n\n    # Scan for cards    \n    (status,TagType) = MIFAREReader.MFRC522_Request(MIFAREReader.PICC_REQIDL)\n\n    # If a card is found\n    if status == MIFAREReader.MI_OK:\n        print \"Card detected\"\n\n    # Get the UID of the card\n    (status,uid) = MIFAREReader.MFRC522_Anticoll()\n\n    # If we have the UID, continue\n    if status == MIFAREReader.MI_OK:\n\n        # Print UID\n        print \"Card read UID: \"+str(uid[0])+\",\"+str(uid[1])+\",\"+str(uid[2])+\",\"+str(uid[3])\n\n        # Send OSC\n        client.send( OSCMessage(\"/user/1\", [uid[0], uid[1], uid[2], uid[3]] ) )\n\n        # This is the default key for authentication\n        key = [0xFF,0xFF,0xFF,0xFF,0xFF,0xFF]\n\n        # Select the scanned tag\n        MIFAREReader.MFRC522_SelectTag(uid)\n```\n\n# 7. openFrameworks\u3067OSC\u3092\u53d7\u4fe1\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\n\n\u3053\u3061\u3089\u3082\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6d41\u7528\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0oscReceiveExample\u3092openFrameworks/apps/myApps/\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\n\n```\ncd openFrameworks/examples/addons\ncp -r oscReceiveExample /home/pi/openFrameworks/apps/myApps/\n```\n\nofApp.h\u3092\u958b\u304d\u307e\u3059\u3002\n\n```\ncd /home/pi/openFrameworks/apps/myApps/oscReceiveExample/src\nvim ofApp.h\n```\n\n\u30dd\u30fc\u30c8\u756a\u53f7\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b7\u884c\u76ee\u306e```#define PORT 12345```\u3092```#define PORT 7110```\u306b\u5909\u66f4\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n\u4e00\u3064\u4e0a\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u623b\u3063\u3066``make``\u3057\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u7d42\u4e86\u3057\u305f\u3089``make run``\u3057\u307e\u3059\u3002\n\n```\ncd ..\nmake\nmake run\n```\n\n\u753b\u9762\u53f3\u4e0a\u306b\u9752\u8272\u306e\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u958b\u304d\u307e\u3059\u3002\n\u5225\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u7acb\u3061\u4e0a\u3052\u30666.\u3067\u4f5c\u6210\u3057\u305fDump_osc.py\u3092\u7acb\u3061\u4e0a\u3052\u307e\u3059\u3002\n\n```\ncd MFRC522-python\npython Dump_osc.py\n```\n\nNFC\u30ea\u30fc\u30c0\u306b\u4ed8\u5c5e\u306eNFC\u30ad\u30fc\u30db\u30eb\u30c0\u3092\u304b\u3056\u3059\u3068\u9752\u8272\u306e\u753b\u9762\u306b\u3082NFC\u306eUID\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-25 00.03.14.png](https://qiita-image-store.s3.amazonaws.com/0/94069/9dc823ac-ad20-00fa-3bc9-24d990402982.png)\n\n\u52d5\u753b\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\uff08\u753b\u50cf\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068YouTube\u306b\u79fb\u52d5\u3057\u307e\u3059\uff09\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/r5j5DtQ_tZo/0.jpg)](http://www.youtube.com/watch?v=r5j5DtQ_tZo)\n\n\u3053\u3053\u307e\u3067\u3067\u304d\u305f\u306e\u3067\u3001\u3042\u3068\u306foF\u3067\u53d7\u3051\u53d6\u3063\u305fUID\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u3057\u3066\u3044\u3051\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n", "tags": ["Raspberrypi3", "NFC", "openFrameworks", "Python"]}