{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u6a19\u672c\u304b\u3089\u5f97\u3089\u308c\u305f\u5206\u5e03\u304c\u591a\u5cf0\u578b\u3067\u3042\u3063\u305f\u3068\u304d, \u5358\u7d14\u306a\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u30e2\u30c7\u30eb\u5316\u3059\u308b\u306e\u306f\u9069\u5207\u3067\u306f\u3042\u308a\u307e\u305b\u3093.\n\u591a\u5cf0\u578b\u306e\u5206\u5e03\u306f\u8907\u6570\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30eb\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.\n\u3053\u306e\u8a18\u4e8b\u3067\u306fEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u3066, \u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c7a\u5b9a\u3059\u308b\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3059.\n\n\u307e\u305a\u306f\u5358\u5cf0\u578b\u5206\u5e03\u304b\u3089\n\n\u6700\u5c24\u63a8\u5b9a\n\u6a19\u672c\u3092$x_n (n=1,\u2026,N)$\u3068\u3057\u307e\u3059.\n\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u6700\u5c24\u63a8\u5b9a\u306b\u3088\u3063\u3066, \u5e73\u5747\u3068\u5206\u6563\u3092\u4ee5\u4e0b\u306e\u5f62\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.\n\\mu_{ML}=\\frac{1}{N}\\sum_{n=1}^N x_n \\\\\\\n\\sigma^2_{ML}=\\frac{1}{N-1}\\sum_{n=1}^N (x_n-\\mu_{ML})^2\n\n\u5206\u6563\u306e\u5024\u306f\u4e0d\u504f\u63a8\u5b9a\u91cf\u3092\u7528\u3044\u3066\u3044\u307e\u3059.\n\n\u624b\u9806\n\n\u5e73\u57473.0, \u5206\u65632.0\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u304b\u308910000\u500b\u306e\u6a19\u672c\u3092\u751f\u6210\u3059\u308b.\n\u5f97\u3089\u308c\u305f\u6a19\u672c\u304b\u3089\u6700\u5c24\u63a8\u5b9a\u3092\u7528\u3044\u3066\u5e73\u5747\u3068\u5206\u6563\u3092\u63a8\u5b9a\u3059\u308b.\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\nimport math\n\n#\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u95a2\u6570\ndef draw_hist(xs, bins):\n    plt.hist(xs, bins=bins, normed=True, alpha=0.5)\n\n#\u4e0e\u3048\u3089\u308c\u305f\u6a19\u672c\u304b\u3089\u6700\u5c24\u63a8\u5b9a\u3092\u7528\u3044\u3066\u5e73\u5747\u3068\u5206\u6563\u3092\u6c42\u3081\u308b\u95a2\u6570\ndef predict(data):\n    mu = np.mean(data)\n    var = np.var(data, ddof=1)  #\u4e0d\u504f\u63a8\u5b9a\u91cf\u3092\u7528\u3044\u308b\n    return mu, var\n\ndef main():\n    #\u5e73\u5747mu, \u6a19\u6e96\u504f\u5deestd\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3046\u6a19\u672c\u3092N\u500b\u751f\u6210\u3059\u308b\n    mu = 3.0\n    v = 2.0\n    std = math.sqrt(v)\n    N = 10000\n    data = np.random.normal(mu, std, N)\n    #\u6700\u5c24\u63a8\u5b9a\u3092\u884c\u3044, \u5e73\u5747\u3068\u5206\u6563\u3092\u6c42\u3081\u308b\n    mu_predicted, var_predicted = predict(data)\n    #\u5206\u6563\u306e\u5024\u304b\u3089\u6a19\u6e96\u504f\u5dee\u3092\u6c42\u3081\u308b\n    std_predicted = math.sqrt(var_predicted)\n    print(\"original: mu={0}, var={1}\".format(mu, v))\n    print(\" predict: mu={0}, var={1}\".format(mu_predicted, var_predicted))\n\n    #\u7d50\u679c\u306e\u30d7\u30ed\u30c3\u30c8\n    draw_hist(data, bins=40)\n    xs = np.linspace(min(data), max(data), 200)\n    norm = mlab.normpdf(xs, mu_predicted, std_predicted)\n    plt.plot(xs, norm, color=\"red\")\n    plt.xlim(min(xs), max(xs))\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Probability\")\n    plt.show()\n\n\nif __name__ == '__main__':\n    main()\n\n\n\u5b9f\u884c\u7d50\u679c\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0(\u9752)\u306f\u6a19\u672c\u3092\u8868\u3057, \u8d64\u7dda\u306f\u63a8\u5b9a\u3055\u308c\u305f\u5024\u3092\u7528\u3044\u3066\u30e2\u30c7\u30eb\u5316\u3055\u308c\u305f\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u8868\u3057\u307e\u3059.\noriginal: mu=3.0, var=2.0\n predict: mu=2.98719564872, var=2.00297779707\n\n\n\u9069\u5207\u306a\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u30e2\u30c7\u30eb\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f.\n\n\u53cc\u5cf0\u578b\u306e\u5206\u5e03\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\nOld Faithful - \u9593\u6b20\u6cc9\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059. \u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059.\nOld Faithful\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e2d\u8eab\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059.\n\n1\u5217\u76ee: \u76f4\u8fd1\u306e\u5674\u51fa\u7d99\u7d9a\u6642\u9593(\u5206)\n2\u5217\u76ee: \u6b21\u56de\u306e\u5674\u51fa\u307e\u3067\u306e\u5f85\u3061\u6642\u9593(\u5206)\n\n\u4eca\u56de\u306f\u76f4\u8fd1\u306e\u5674\u51fa\u7d99\u7d9a\u6642\u9593(1\u5217\u76ee)\u3060\u3051\u3092\u6a19\u672c\u3068\u3057\u3066\u7528\u3044\u308b\u3053\u3068\u306b\u3057\u307e\u3059.\u3053\u306e\u6a19\u672c\u304b\u3089\u4ee5\u4e0b\u306e\u53cc\u5cf0\u578b\u5206\u5e03\u304c\u5f97\u3089\u308c\u307e\u3057\u305f.\n\n\u5206\u5e03\u3092\u898b\u305f\u611f\u3058\u5358\u7d14\u306a\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u306f\u30e2\u30c7\u30eb\u5316\u3067\u304d\u306a\u3055\u305d\u3046\u3067\u3059.\n\u3053\u3053\u3067, 2\u3064\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30eb\u5316\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059.\n\u30e2\u30c7\u30eb\u5316\u3059\u308b\u969b\u306b\u306f\u5e73\u5747$\\mu_1, \\mu_2$, \u5206\u6563$\\sigma_1^2, \\sigma_2^2$, \u6df7\u5408\u78ba\u7387$\\pi$\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c7a\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059.\n\u30ac\u30a6\u30b9\u5206\u5e03\u3092$\\phi(x|\\mu, \\sigma^2)$\u3068\u3059\u308b\u3068, \u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059.\ny=(1-\\pi)\\phi(x|\\mu_1, \\sigma^2_1)+\\pi\\phi(x|\\mu_2, \\sigma^2_2)\n\n\nEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5e73\u5747\u3068\u5206\u6563\u306f\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\u3092\u89e3\u6790\u7684\u306b\u89e3\u304f\u3053\u3068\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059(PRML\u306e\u00a72.3.4\u3092\u53c2\u7167).\n\u3057\u304b\u3057\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\u306f\u89e3\u6790\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u96e3\u3057\u3044\u305f\u3081, \u6700\u9069\u5316\u624b\u6cd5\u306e\u4e00\u3064\u3067\u3042\u308bEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066\u6700\u5927\u5316\u3092\u884c\u3044\u307e\u3059.\nEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306fE\u30b9\u30c6\u30c3\u30d7\u3068M\u30b9\u30c6\u30c3\u30d7\u306e2\u3064\u3092\u7e70\u308a\u8fd4\u3057\u884c\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059.\n\nE(Expectation)\u30b9\u30c6\u30c3\u30d7: \u8ca0\u62c5\u7387\u3092\u8a08\u7b97\u3059\u308b.\nM(Maximization)\u30b9\u30c6\u30c3\u30d7: \u91cd\u307f\u4ed8\u304d\u306e\u5e73\u5747\u3068\u5206\u6563\u3092\u8a08\u7b97\u3059\u308b.\n\n\u8a73\u3057\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u5bb9\u306fThe Elements of Statistical Learning\u306e\u00a78.5\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044.\n\u82f1\u8a9e\u7248\u306ePDF\u306f\u7121\u6599\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport math\nimport random\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\n\n#\u5e73\u5747m, \u5206\u6563v\u306e\u30ac\u30a6\u30b9\u5206\u5e03\ndef gaussian(x, m, v):\n    p = math.exp(- pow(x - m, 2) / (2 * v)) / math.sqrt(2 * math.pi * v)\n    return p\n\n#E\u30b9\u30c6\u30c3\u30d7\ndef e_step(xs, ms, vs, p):\n    burden_rates = []\n    for x in xs:\n        d = (1 - p) * gaussian(x, ms[0], vs[0]) + p * gaussian(x, ms[1], vs[1])\n        n = p * gaussian(x, ms[1], vs[1])\n        burden_rate = n / d\n        burden_rates.append(burden_rate)\n    return burden_rates\n\n\n#M\u30b9\u30c6\u30c3\u30d7\ndef m_step(xs, burden_rates):\n    d = sum([1 - r for r in burden_rates])\n    n = sum([(1 - r) * x for x, r in zip(xs, burden_rates)])\n    mu1 = n / d\n\n    n = sum([(1 - r) * pow(x - mu1, 2) for x, r in zip(xs, burden_rates)])\n    var1 = n / d\n\n    d = sum(burden_rates)\n    n = sum([r * x for x, r in zip(xs, burden_rates)])\n    mu2 = n / d\n\n    n = sum(r * pow(x - mu2, 2) for x, r in zip(xs, burden_rates))\n    var2 = n / d\n\n    N = len(xs)\n    p = sum(burden_rates) / N\n\n    return [mu1, mu2], [var1, var2], p\n\n\n#\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\ndef calc_log_likelihood(xs, ms, vs, p):\n    s = 0\n    for x in xs:\n        g1 = gaussian(x, ms[0], vs[0])\n        g2 = gaussian(x, ms[1], vs[1])\n        s += math.log((1 - p) * g1 + p * g2)\n    return s\n\n#\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u95a2\u6570\ndef draw_hist(xs, bins):\n    plt.hist(xs, bins=bins, normed=True, alpha=0.5)\n\ndef main():\n    #\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e1\u5217\u76ee\u3092\u8aad\u307f\u8fbc\u3080\n    fp = open(\"faithful.txt\")\n    data = []\n    for row in fp:\n        data.append(float((row.split()[0])))\n    fp.close()\n    #mu, vs, p\u306e\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3059\u308b\n    p = 0.5\n    ms = [random.choice(data), random.choice(data)]\n    vs = [np.var(data), np.var(data)]\n    T = 50  #\u53cd\u5fa9\u56de\u6570\n    ls = []  #\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u8a08\u7b97\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f\n    #EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n    for t in range(T):\n        burden_rates = e_step(data, ms, vs, p)\n        ms, vs, p = m_step(data, burden_rates)\n        ls.append(calc_log_likelihood(data, ms, vs, p))\n\n    print(\"predict: mu1={0}, mu2={1}, v1={2}, v2={3}, p={4}\".format(\n        ms[0], ms[1], vs[0], vs[1], p))\n    #\u7d50\u679c\u306e\u30d7\u30ed\u30c3\u30c8\n    plt.subplot(211)\n    xs = np.linspace(min(data), max(data), 200)\n    norm1 = mlab.normpdf(xs, ms[0], math.sqrt(vs[0]))\n    norm2 = mlab.normpdf(xs, ms[1], math.sqrt(vs[1]))\n    draw_hist(data, 20)\n    plt.plot(xs, (1 - p) * norm1 + p * norm2, color=\"red\", lw=3)\n    plt.xlim(min(data), max(data))\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Probability\")\n\n    plt.subplot(212)\n    plt.plot(np.arange(len(ls)), ls)\n    plt.xlabel(\"step\")\n    plt.ylabel(\"log_likelihood\")\n    plt.show()\n\nif __name__ == '__main__':\n    main()\n\n\n\u5b9f\u884c\u7d50\u679c\npredict: mu1=2.01860781706, mu2=4.27334342119, v1=0.0555176191851, v2=0.191024193785, p=0.651595365985\n\n\n\u4e0a\u306e\u56f3\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u5f97\u3089\u308c\u305f\u6a19\u672c\u3092\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u30e2\u30c7\u30eb\u5316\u3057\u305f\u7d50\u679c\u3092\u8868\u3057\u3066\u3044\u307e\u3059.\n\u4e0b\u306e\u56f3\u306fEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u5bfe\u6570\u5c24\u5ea6\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3044\u304f\u69d8\u5b50\u3092\u8868\u3057\u3066\u3044\u307e\u3059.\n\n\u305d\u306e\u4ed6\n\nEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u304a\u3051\u308b\u521d\u671f\u5024\n\u5e73\u5747\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3070\u308c\u305f\u6a19\u672c, \u5206\u6563\u306f\u6a19\u672c\u306e\u5206\u6563, \u6df7\u5408\u78ba\u7387\u306f0.5\u3092\u521d\u671f\u5024\u3068\u3057\u3066\u7528\u3044\u307e\u3057\u305f.\n\u521d\u671f\u5024\u306e\u9078\u3073\u65b9\u306f\u8272\u3005\u8003\u3048\u3089\u308c\u307e\u3059\u304c, \u3053\u308c\u3060\u3051\u3067\u8ad6\u6587\u306b\u306a\u3063\u3066\u3057\u307e\u3046(?)\u8a71\u306e\u3088\u3046\u3067\u3059.\n\n\u591a\u5cf0\u578b\u5206\u5e03\u306b\u3064\u3044\u3066\n\u4eca\u56de\u306e\u6a19\u672c\u306f\u53cc\u5cf0\u578b\u5206\u5e03\u306a\u306e\u3067, \u30ac\u30a6\u30b9\u5206\u5e03\u30922\u3064\u7d44\u307f\u5408\u308f\u305b\u307e\u3057\u305f.\n\u5f53\u71363\u3064\u4ee5\u4e0a\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c, \u6c7a\u5b9a\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570\u306f\u5897\u3048\u3066\u3044\u304d\u307e\u3059.\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6b21\u5143\u306b\u3064\u3044\u3066\n\u4eca\u56de\u306f1\u6b21\u5143\u306e\u6a19\u672c\u3092\u7528\u3044\u307e\u3057\u305f\u304c, \u591a\u5909\u91cf\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u3064\u3044\u3066\u3082EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.\n\u591a\u5909\u91cf\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306f, 1\u6b21\u5143\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u6bd4\u3079\u3066\u6c7a\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u975e\u5e38\u306b\u591a\u304f\u306a\u308a\u307e\u3059(\u5e73\u5747, \u5171\u5206\u6563\u884c\u5217).\n#\u6982\u8981\n\u6a19\u672c\u304b\u3089\u5f97\u3089\u308c\u305f\u5206\u5e03\u304c\u591a\u5cf0\u578b\u3067\u3042\u3063\u305f\u3068\u304d, \u5358\u7d14\u306a\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u30e2\u30c7\u30eb\u5316\u3059\u308b\u306e\u306f\u9069\u5207\u3067\u306f\u3042\u308a\u307e\u305b\u3093.\n\u591a\u5cf0\u578b\u306e\u5206\u5e03\u306f\u8907\u6570\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u7d44\u307f\u5408\u308f\u305b\u305f**\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03**\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30eb\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.\n\u3053\u306e\u8a18\u4e8b\u3067\u306fEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3063\u3066, **\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03**\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c7a\u5b9a\u3059\u308b\u4f8b\u3092\u7d39\u4ecb\u3057\u307e\u3059.\n\n#\u307e\u305a\u306f\u5358\u5cf0\u578b\u5206\u5e03\u304b\u3089\n##\u6700\u5c24\u63a8\u5b9a\n\u6a19\u672c\u3092$x_n (n=1,\u2026,N)$\u3068\u3057\u307e\u3059.\n\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u6700\u5c24\u63a8\u5b9a\u306b\u3088\u3063\u3066, \u5e73\u5747\u3068\u5206\u6563\u3092\u4ee5\u4e0b\u306e\u5f62\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.\n\n```math\n\\mu_{ML}=\\frac{1}{N}\\sum_{n=1}^N x_n \\\\\\\n\\sigma^2_{ML}=\\frac{1}{N-1}\\sum_{n=1}^N (x_n-\\mu_{ML})^2\n```\n\u5206\u6563\u306e\u5024\u306f\u4e0d\u504f\u63a8\u5b9a\u91cf\u3092\u7528\u3044\u3066\u3044\u307e\u3059.\n\n##\u624b\u9806\n1. \u5e73\u57473.0, \u5206\u65632.0\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u304b\u308910000\u500b\u306e\u6a19\u672c\u3092\u751f\u6210\u3059\u308b.\n2. \u5f97\u3089\u308c\u305f\u6a19\u672c\u304b\u3089\u6700\u5c24\u63a8\u5b9a\u3092\u7528\u3044\u3066\u5e73\u5747\u3068\u5206\u6563\u3092\u63a8\u5b9a\u3059\u308b.\n\n##\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n```py\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\nimport math\n\n#\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u95a2\u6570\ndef draw_hist(xs, bins):\n    plt.hist(xs, bins=bins, normed=True, alpha=0.5)\n\n#\u4e0e\u3048\u3089\u308c\u305f\u6a19\u672c\u304b\u3089\u6700\u5c24\u63a8\u5b9a\u3092\u7528\u3044\u3066\u5e73\u5747\u3068\u5206\u6563\u3092\u6c42\u3081\u308b\u95a2\u6570\ndef predict(data):\n    mu = np.mean(data)\n    var = np.var(data, ddof=1)  #\u4e0d\u504f\u63a8\u5b9a\u91cf\u3092\u7528\u3044\u308b\n    return mu, var\n\ndef main():\n    #\u5e73\u5747mu, \u6a19\u6e96\u504f\u5deestd\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3046\u6a19\u672c\u3092N\u500b\u751f\u6210\u3059\u308b\n    mu = 3.0\n    v = 2.0\n    std = math.sqrt(v)\n    N = 10000\n    data = np.random.normal(mu, std, N)\n    #\u6700\u5c24\u63a8\u5b9a\u3092\u884c\u3044, \u5e73\u5747\u3068\u5206\u6563\u3092\u6c42\u3081\u308b\n    mu_predicted, var_predicted = predict(data)\n    #\u5206\u6563\u306e\u5024\u304b\u3089\u6a19\u6e96\u504f\u5dee\u3092\u6c42\u3081\u308b\n    std_predicted = math.sqrt(var_predicted)\n    print(\"original: mu={0}, var={1}\".format(mu, v))\n    print(\" predict: mu={0}, var={1}\".format(mu_predicted, var_predicted))\n\n    #\u7d50\u679c\u306e\u30d7\u30ed\u30c3\u30c8\n    draw_hist(data, bins=40)\n    xs = np.linspace(min(data), max(data), 200)\n    norm = mlab.normpdf(xs, mu_predicted, std_predicted)\n    plt.plot(xs, norm, color=\"red\")\n    plt.xlim(min(xs), max(xs))\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Probability\")\n    plt.show()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n##\u5b9f\u884c\u7d50\u679c\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0(\u9752)\u306f\u6a19\u672c\u3092\u8868\u3057, \u8d64\u7dda\u306f\u63a8\u5b9a\u3055\u308c\u305f\u5024\u3092\u7528\u3044\u3066\u30e2\u30c7\u30eb\u5316\u3055\u308c\u305f\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u8868\u3057\u307e\u3059.\n\n```bash\noriginal: mu=3.0, var=2.0\n predict: mu=2.98719564872, var=2.00297779707\n```\n![single_sample.png](https://qiita-image-store.s3.amazonaws.com/0/58543/a1129222-3293-3c20-b5bf-f8c4236626c9.png)\n\n\u9069\u5207\u306a\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u30e2\u30c7\u30eb\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f.\n#\u53cc\u5cf0\u578b\u306e\u5206\u5e03\n##\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\nOld Faithful - \u9593\u6b20\u6cc9\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059. \u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059.\n[Old Faithful](http://www.math.pku.edu.cn/teachers/jjia/Computational%20Statistics/faithful.txt)\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4e2d\u8eab\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059.\n\n* 1\u5217\u76ee: \u76f4\u8fd1\u306e\u5674\u51fa\u7d99\u7d9a\u6642\u9593(\u5206)\n* 2\u5217\u76ee: \u6b21\u56de\u306e\u5674\u51fa\u307e\u3067\u306e\u5f85\u3061\u6642\u9593(\u5206)\n\n\u4eca\u56de\u306f\u76f4\u8fd1\u306e\u5674\u51fa\u7d99\u7d9a\u6642\u9593(1\u5217\u76ee)\u3060\u3051\u3092\u6a19\u672c\u3068\u3057\u3066\u7528\u3044\u308b\u3053\u3068\u306b\u3057\u307e\u3059.\u3053\u306e\u6a19\u672c\u304b\u3089\u4ee5\u4e0b\u306e\u53cc\u5cf0\u578b\u5206\u5e03\u304c\u5f97\u3089\u308c\u307e\u3057\u305f.\n![mult_sample.png](https://qiita-image-store.s3.amazonaws.com/0/58543/288ab6eb-5fcf-82f8-77b5-f9347428ce6d.png)\n\n\u5206\u5e03\u3092\u898b\u305f\u611f\u3058\u5358\u7d14\u306a\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u306f\u30e2\u30c7\u30eb\u5316\u3067\u304d\u306a\u3055\u305d\u3046\u3067\u3059.\n\u3053\u3053\u3067, 2\u3064\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u4f7f\u3063\u3066\u30e2\u30c7\u30eb\u5316\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059.\n\u30e2\u30c7\u30eb\u5316\u3059\u308b\u969b\u306b\u306f\u5e73\u5747$\\mu_1, \\mu_2$, \u5206\u6563$\\sigma_1^2, \\sigma_2^2$, \u6df7\u5408\u78ba\u7387$\\pi$\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6c7a\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059.\n\u30ac\u30a6\u30b9\u5206\u5e03\u3092$\\phi(x|\\mu, \\sigma^2)$\u3068\u3059\u308b\u3068, \u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u4e0e\u3048\u3089\u308c\u307e\u3059.\n\n```math\ny=(1-\\pi)\\phi(x|\\mu_1, \\sigma^2_1)+\\pi\\phi(x|\\mu_2, \\sigma^2_2)\n```\n\n##EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5e73\u5747\u3068\u5206\u6563\u306f\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\u3092\u89e3\u6790\u7684\u306b\u89e3\u304f\u3053\u3068\u3067\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059([PRML](http://research.microsoft.com/en-us/um/people/cmbishop/PRML/)\u306e\u00a72.3.4\u3092\u53c2\u7167).\n\u3057\u304b\u3057\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5c24\u5ea6\u95a2\u6570\u306e\u6700\u5927\u5316\u306f\u89e3\u6790\u7684\u306b\u89e3\u304f\u3053\u3068\u304c\u96e3\u3057\u3044\u305f\u3081, \u6700\u9069\u5316\u624b\u6cd5\u306e\u4e00\u3064\u3067\u3042\u308bEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u3066\u6700\u5927\u5316\u3092\u884c\u3044\u307e\u3059.\nEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306fE\u30b9\u30c6\u30c3\u30d7\u3068M\u30b9\u30c6\u30c3\u30d7\u306e2\u3064\u3092\u7e70\u308a\u8fd4\u3057\u884c\u3046\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059.\n\n* E(Expectation)\u30b9\u30c6\u30c3\u30d7: \u8ca0\u62c5\u7387\u3092\u8a08\u7b97\u3059\u308b.\n* M(Maximization)\u30b9\u30c6\u30c3\u30d7: \u91cd\u307f\u4ed8\u304d\u306e\u5e73\u5747\u3068\u5206\u6563\u3092\u8a08\u7b97\u3059\u308b.\n\n\u8a73\u3057\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5185\u5bb9\u306f[The Elements of Statistical Learning](http://statweb.stanford.edu/~tibs/ElemStatLearn/)\u306e\u00a78.5\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044.\n\u82f1\u8a9e\u7248\u306ePDF\u306f\u7121\u6599\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.\n\n##\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n```py\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport math\nimport random\nimport matplotlib.pyplot as plt\nimport matplotlib.mlab as mlab\n\n#\u5e73\u5747m, \u5206\u6563v\u306e\u30ac\u30a6\u30b9\u5206\u5e03\ndef gaussian(x, m, v):\n    p = math.exp(- pow(x - m, 2) / (2 * v)) / math.sqrt(2 * math.pi * v)\n    return p\n\n#E\u30b9\u30c6\u30c3\u30d7\ndef e_step(xs, ms, vs, p):\n    burden_rates = []\n    for x in xs:\n        d = (1 - p) * gaussian(x, ms[0], vs[0]) + p * gaussian(x, ms[1], vs[1])\n        n = p * gaussian(x, ms[1], vs[1])\n        burden_rate = n / d\n        burden_rates.append(burden_rate)\n    return burden_rates\n\n\n#M\u30b9\u30c6\u30c3\u30d7\ndef m_step(xs, burden_rates):\n    d = sum([1 - r for r in burden_rates])\n    n = sum([(1 - r) * x for x, r in zip(xs, burden_rates)])\n    mu1 = n / d\n\n    n = sum([(1 - r) * pow(x - mu1, 2) for x, r in zip(xs, burden_rates)])\n    var1 = n / d\n\n    d = sum(burden_rates)\n    n = sum([r * x for x, r in zip(xs, burden_rates)])\n    mu2 = n / d\n\n    n = sum(r * pow(x - mu2, 2) for x, r in zip(xs, burden_rates))\n    var2 = n / d\n\n    N = len(xs)\n    p = sum(burden_rates) / N\n\n    return [mu1, mu2], [var1, var2], p\n\n\n#\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\ndef calc_log_likelihood(xs, ms, vs, p):\n    s = 0\n    for x in xs:\n        g1 = gaussian(x, ms[0], vs[0])\n        g2 = gaussian(x, ms[1], vs[1])\n        s += math.log((1 - p) * g1 + p * g2)\n    return s\n\n#\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u95a2\u6570\ndef draw_hist(xs, bins):\n    plt.hist(xs, bins=bins, normed=True, alpha=0.5)\n\ndef main():\n    #\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e1\u5217\u76ee\u3092\u8aad\u307f\u8fbc\u3080\n    fp = open(\"faithful.txt\")\n    data = []\n    for row in fp:\n        data.append(float((row.split()[0])))\n    fp.close()\n    #mu, vs, p\u306e\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3059\u308b\n    p = 0.5\n    ms = [random.choice(data), random.choice(data)]\n    vs = [np.var(data), np.var(data)]\n    T = 50  #\u53cd\u5fa9\u56de\u6570\n    ls = []  #\u5bfe\u6570\u5c24\u5ea6\u95a2\u6570\u306e\u8a08\u7b97\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f\n    #EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n    for t in range(T):\n        burden_rates = e_step(data, ms, vs, p)\n        ms, vs, p = m_step(data, burden_rates)\n        ls.append(calc_log_likelihood(data, ms, vs, p))\n\n    print(\"predict: mu1={0}, mu2={1}, v1={2}, v2={3}, p={4}\".format(\n        ms[0], ms[1], vs[0], vs[1], p))\n    #\u7d50\u679c\u306e\u30d7\u30ed\u30c3\u30c8\n    plt.subplot(211)\n    xs = np.linspace(min(data), max(data), 200)\n    norm1 = mlab.normpdf(xs, ms[0], math.sqrt(vs[0]))\n    norm2 = mlab.normpdf(xs, ms[1], math.sqrt(vs[1]))\n    draw_hist(data, 20)\n    plt.plot(xs, (1 - p) * norm1 + p * norm2, color=\"red\", lw=3)\n    plt.xlim(min(data), max(data))\n    plt.xlabel(\"x\")\n    plt.ylabel(\"Probability\")\n\n    plt.subplot(212)\n    plt.plot(np.arange(len(ls)), ls)\n    plt.xlabel(\"step\")\n    plt.ylabel(\"log_likelihood\")\n    plt.show()\n\nif __name__ == '__main__':\n    main()\n```\n\n##\u5b9f\u884c\u7d50\u679c\n```bash\npredict: mu1=2.01860781706, mu2=4.27334342119, v1=0.0555176191851, v2=0.191024193785, p=0.651595365985\n```\n![EM.png](https://qiita-image-store.s3.amazonaws.com/0/58543/47d63392-d59e-577c-4537-3330efecf30b.png)\n\n\u4e0a\u306e\u56f3\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304b\u3089\u5f97\u3089\u308c\u305f\u6a19\u672c\u3092\u6df7\u5408\u30ac\u30a6\u30b9\u5206\u5e03\u3067\u30e2\u30c7\u30eb\u5316\u3057\u305f\u7d50\u679c\u3092\u8868\u3057\u3066\u3044\u307e\u3059.\n\u4e0b\u306e\u56f3\u306fEM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u5bfe\u6570\u5c24\u5ea6\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3044\u304f\u69d8\u5b50\u3092\u8868\u3057\u3066\u3044\u307e\u3059.\n\n#\u305d\u306e\u4ed6\n##EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u304a\u3051\u308b\u521d\u671f\u5024\n\u5e73\u5747\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3070\u308c\u305f\u6a19\u672c, \u5206\u6563\u306f\u6a19\u672c\u306e\u5206\u6563, \u6df7\u5408\u78ba\u7387\u306f0.5\u3092\u521d\u671f\u5024\u3068\u3057\u3066\u7528\u3044\u307e\u3057\u305f.\n\u521d\u671f\u5024\u306e\u9078\u3073\u65b9\u306f\u8272\u3005\u8003\u3048\u3089\u308c\u307e\u3059\u304c, \u3053\u308c\u3060\u3051\u3067\u8ad6\u6587\u306b\u306a\u3063\u3066\u3057\u307e\u3046(?)\u8a71\u306e\u3088\u3046\u3067\u3059.\n\n##\u591a\u5cf0\u578b\u5206\u5e03\u306b\u3064\u3044\u3066\n\u4eca\u56de\u306e\u6a19\u672c\u306f\u53cc\u5cf0\u578b\u5206\u5e03\u306a\u306e\u3067, \u30ac\u30a6\u30b9\u5206\u5e03\u30922\u3064\u7d44\u307f\u5408\u308f\u305b\u307e\u3057\u305f.\n\u5f53\u71363\u3064\u4ee5\u4e0a\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c, \u6c7a\u5b9a\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6570\u306f\u5897\u3048\u3066\u3044\u304d\u307e\u3059.\n\n##\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u6b21\u5143\u306b\u3064\u3044\u3066\n\u4eca\u56de\u306f1\u6b21\u5143\u306e\u6a19\u672c\u3092\u7528\u3044\u307e\u3057\u305f\u304c, \u591a\u5909\u91cf\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u3064\u3044\u3066\u3082EM\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059.\n\u591a\u5909\u91cf\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306f, 1\u6b21\u5143\u306e\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u6bd4\u3079\u3066\u6c7a\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u975e\u5e38\u306b\u591a\u304f\u306a\u308a\u307e\u3059(\u5e73\u5747, \u5171\u5206\u6563\u884c\u5217).\n", "tags": ["Python", "\u7d71\u8a08\u5b66", "\u6a5f\u68b0\u5b66\u7fd2"]}