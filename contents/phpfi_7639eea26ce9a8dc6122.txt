{"tags": ["PHP", "Symfony", "async", "Web"], "context": " More than 1 year has passed since last update.Asynchronous programming has become a synonym for high performance in server side web applications in the recent years. This is largely due to the rising popularity of JavaScript and Node.js, in which everything is async by default.\nPHP is nowadays very capable of asynchronous operations as well. Using Icicle co-routines is a very accessible way of doing async PHP, but there is still some things that are missing from the ecosystem.\nIt's only a matter of time until MySQL and other I/O gets full support for non-blocking async, so it's good to take a look at how you could start using Icicle for Symfony Framework controllers today:\n\n\n<?php\nnamespace AppBundle\\Controller;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Icicle\\Coroutine\\Coroutine;\nuse Icicle\\Loop;\nuse Icicle\\Awaitable;\nclass DefaultController extends Controller\n{\n    /**\n     * @Route(\"/\", name=\"homepage\")\n     */\n    public function indexAction(Request $request)\n    {\n        $messages = array();\n        $routine1 = new Coroutine($this->sayHello('Baby'));\n        $routine2 = new Coroutine($this->sayHello('Ginger'));\n        $routine3 = new Coroutine($this->sayHello('Posh'));\n        $routine4 = new Coroutine($this->sayHello('Scary'));\n        $routine5 = new Coroutine($this->sayHello('Sporty'));\n        $messages[] = $routine1->wait();\n        $messages[] = $routine2->wait();\n        $messages[] = $routine3->wait();\n        $messages[] = $routine4->wait();\n        $messages[] = $routine5->wait();\n        Loop\\Run();\n        // replace this example code with whatever you need\n        return $this->render('default/index.html.twig', [\n            'base_dir' => realpath($this->getParameter('kernel.root_dir').'/..'),\n            'messages' => $messages\n        ]);\n    }\n    public function sayHello($name){\n        $delay = rand(1,5);\n        $message = array(\"Hello! My name is \" . $name, $delay);\n        $promise = Awaitable\\resolve($message);\n        yield $promise->delay($delay);\n    }\n}\n\n\n\nLearn more about asynchronous programming in PHP:\nGoing Async in Symfony Controllers\nAsynchronous programming has become a synonym for high performance in server side web applications in the recent years. This is largely due to the rising popularity of JavaScript and Node.js, in which everything is async by default.\n\nPHP is nowadays very capable of asynchronous operations as well. Using Icicle co-routines is a very accessible way of doing async PHP, but there is still some things that are missing from the ecosystem.\n\nIt's only a matter of time until MySQL and other I/O gets full support for non-blocking async, so it's good to take a look at how you could start using <a href=\"https://icicle.io/\">Icicle</a> for <a href=\"http://symfony.com/\">Symfony Framework</a> controllers today:\n\n<pre>\n<code>\n&lt;?php\nnamespace AppBundle\\Controller;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\Controller;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Icicle\\Coroutine\\Coroutine;\nuse Icicle\\Loop;\nuse Icicle\\Awaitable;\nclass DefaultController extends Controller\n{\n    /**\n     * @Route(\"/\", name=\"homepage\")\n     */\n    public function indexAction(Request $request)\n    {\n        $messages = array();\n        $routine1 = new Coroutine($this->sayHello('Baby'));\n        $routine2 = new Coroutine($this->sayHello('Ginger'));\n        $routine3 = new Coroutine($this->sayHello('Posh'));\n        $routine4 = new Coroutine($this->sayHello('Scary'));\n        $routine5 = new Coroutine($this->sayHello('Sporty'));\n        $messages[] = $routine1->wait();\n        $messages[] = $routine2->wait();\n        $messages[] = $routine3->wait();\n        $messages[] = $routine4->wait();\n        $messages[] = $routine5->wait();\n        Loop\\Run();\n        // replace this example code with whatever you need\n        return $this->render('default/index.html.twig', [\n            'base_dir' => realpath($this->getParameter('kernel.root_dir').'/..'),\n            'messages' => $messages\n        ]);\n    }\n    public function sayHello($name){\n        $delay = rand(1,5);\n        $message = array(\"Hello! My name is \" . $name, $delay);\n        $promise = Awaitable\\resolve($message);\n        yield $promise->delay($delay);\n    }\n}\n\n</code>\n</pre>\n\nLearn more about asynchronous programming in PHP:\n<a href=\"https://www.symfony.fi/entry/going-async-in-symfony-controllers\">Going Async in Symfony Controllers</a>\n"}