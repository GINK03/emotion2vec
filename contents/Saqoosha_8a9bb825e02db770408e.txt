{"context": " More than 1 year has passed since last update.OpenType \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30ab\u30fc\u30cb\u30f3\u30b0\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044\u4e8b\u60c5\u304c\u3042\u3063\u3066\u3044\u308d\u3044\u308d\u8abf\u3079\u305f\u4f5c\u696d\u30ed\u30b0\u3002\n\n\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u3044\u3058\u308b\u3068\u304d\u306b\u3064\u304b\u3046\u5b9a\u756a\u30e9\u30a4\u30d6\u30e9\u30ea freetype 2.6 \u3067\u306f OpenType \u306e\u30ab\u30fc\u30cb\u30f3\u30b0\u60c5\u5831\u304c\u3072\u304d\u3060\u305b\u306a\u304b\u3063\u305f\u306e\u3067\uff08\u30d5\u30a9\u30f3\u30c8\u306b\u3082\u3088\u308b\u3068\u601d\u3046\u3051\u3069\uff09\u3001libotf (0.9.13) \u3067 OTF \u30d5\u30a1\u30a4\u30eb\u3092\u89e3\u6790\u3057\u3066\u53d6\u308a\u51fa\u3059\u3002\nOTF \u306e\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f Microsoft Typography - OpenType Specification \u306b\u307e\u3068\u307e\u3063\u3066\u308b\u3002\n\nThe TrueType Font File OpenType \u306f TrueType \u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u308b\u306e\u3067\u2191\u306b\u306a\u3044\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9\u3068\u304b\u306f\u3053\u306e\u3078\u3093\u3082\u898b\u308b\u3002\nlibotf \u306e example \u306b\u542b\u307e\u308c\u3066\u308b otfdump \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u3068\u3001OTF \u30d5\u30a1\u30a4\u30eb\u306e\u69cb\u9020\u3092\u30c4\u30ea\u30fc\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3067\u30c0\u30f3\u30d7\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u2193\u3001\u4ed5\u69d8\u66f8\u3068\u304f\u3089\u3079\u306a\u304c\u3089\u898b\u308b\u3068\u7406\u89e3\u3057\u3084\u3059\u3044\u3002\n\n(OTF\n  (OffsetTable\n    (sfnt-version 20308.21583)\n    (numTables 25)\n    (searchRange 256)\n    (enterSelector 4)\n    (rangeShift 384))\n  (Table 0 (tag \"BASE\" #x42415345)\n    (checkSum 6962C672) (offset #x00000430) (length: #x000001C8))\n  (Table 1 (tag \"CFF \" #x43464620)\n    (checkSum 0BDFCA60) (offset #x0034700C) (length: #x0080F295))\n  (Table 2 (tag \"EBDT\" #x45424454)\n    (checkSum E109E7DA) (offset #x00213B60) (length: #x001334AA))\n  (Table 3 (tag \"EBLC\" #x45424C43)\n    (checkSum 81D5AE36) (offset #x00002A58) (length: #x0001064C))\n  (Table 4 (tag \"GPOS\" #x47504F53)\n    (checkSum D6E4B8CC) (offset #x00036E04) (length: #x00015098))\n  (Table 5 (tag \"GSUB\" #x47535542)\n...\n\n\n\u30ab\u30fc\u30cb\u30f3\u30b0\u60c5\u5831\u306f\u2193\u3089\u3078\u3093\u306b\u306f\u3044\u3063\u3066\u308b\u3002\n\n\nkern \u30c6\u30fc\u30d6\u30eb\nkerx \u30c6\u30fc\u30d6\u30eb\n\nGPOS \u30c6\u30fc\u30d6\u30eb\u306e kern feature\n\n\n\nfreetype \u3067\u53d6\u308a\u51fa\u305b\u308b\u306e\u306f\u304a\u305d\u3089\u304f 1 \u306e kern \u30c6\u30fc\u30d6\u30eb\u306e\u307f\uff1f \u3057\u304b\u3082 Apple \u62e1\u5f35\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u3002TTX \u306f Apple \u62e1\u5f35\u5bfe\u5fdc\u3057\u3066\u308b\u3002\n\n\nlibotf \u3067\u30ab\u30fc\u30cb\u30f3\u30b0\u60c5\u5831\u3092\u5b9f\u969b\u306b\u3068\u308a\u3060\u3059\nGPOS \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u53d6\u308a\u51fa\u3059\u306e\u304c\u6b63\u653b\u6cd5\u3063\u307d\u3044\u306e\u3067\u305d\u3063\u304b\u3089\u3044\u304f\u3002\uff08/Library/Fonts/\u30d2\u30e9\u30ad\u3099\u30ce\u660e\u671d Pro W6.otf \u306b\u306f kerx \u30c6\u30fc\u30d6\u30eb\u3082\u3042\u3063\u305f\u3051\u3069\u3001\u5f8c\u65b9\u4e92\u63db\u3066\u304d\u306a\u3053\u3068\uff1f\uff09\n\nUnicode \u304b\u3089 Glyph ID\u306b\u5909\u63db\u3002\n\nGPOS \u30c6\u30fc\u30d6\u30eb\u306e ScriptList \u304b\u3089\u51e6\u7406\u5bfe\u8c61 Glyph \u306b\u5bfe\u5fdc\u3059\u308b Script \u3092\u9078\u3076\uff08\u2190\u3053\u3053\u304c\u3088\u304f\u308f\u304b\u3089\u3093\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u30ea\u30b9\u30c8\u306e\u3044\u3061\u3070\u3093\u6700\u521d\u306e Script \u306b\u3057\u3068\u304f\u3002\uff09\nScript \u306e\u306a\u304b\u304b\u3089\u5bfe\u5fdc\u3059\u308b LangSys \u3092\u9078\u3076\u3002\uff08\u2190\u3053\u308c\u3082\u3088\u304f\u308f\u304b\u3089\u3093\u3051\u3069\u57fa\u672c 1 \u500b\u3057\u304b\u306a\u3044\u306e\u3067\u305d\u308c\u3067\u3002\uff09\nLangSys \u306e\u4e0b\u306b\u3001\u5bfe\u5fdc\u3057\u3066\u308b Feature \u306e FeatureList \u5185\u306b\u304a\u3051\u308b index \u3092\u542b\u3093\u3060\u30ea\u30b9\u30c8\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u306a\u3081\u3066\u304f\u3002\n\nkern feature \u306e lookup table index \u304b\u3089 lookup table \u53d6\u5f97\u3002\nlookup \u306e\u306a\u304b\u306e sub table \u306e\u306a\u304b\u306e coverage \u69cb\u9020\u4f53\u306e\u306a\u304b\u306b\u5bfe\u8c61\u306e Glyph \u304c\u3042\u308c\u3070\u30ab\u30fc\u30cb\u30f3\u30b0\u5024\u304c\u3075\u304f\u307e\u308c\u3066\u308b\u3002\ncoverage \u5185\u306e glyph \u306e index \u304c pair set \u306e index \u3068\u5bfe\u5fdc\u3057\u3066\u308b\u3002\npair set \u5185\u306e pair value record \u3092\u3060\u30fc\u3063\u3068\u307f\u3066\u3044\u3063\u3066\u3001second glyph \u304c\u30ab\u30fc\u30cb\u30f3\u30b0\u30da\u30a2\u306e id \u3060\u3063\u305f\u3089\u305d\u308c\u304c\u5b9f\u969b\u306e\u30ab\u30fc\u30cb\u30f3\u30b0\u5024\u3002\n\n\u3063\u3066\u3001\u66f8\u3044\u3066\u3066\u308f\u3051\u308f\u304b\u3093\u306a\u304f\u306a\u3063\u3066\u304d\u305f\u3051\u3069\u3001\u30b3\u30fc\u30c9\u306b\u76f4\u3059\u3068\u2193\n#include <iostream>\n#include \"otf.h\"\n#include <ft2build.h>\n#include FT_FREETYPE_H\n\n\nint glyph_contains(OTF_Coverage *coverage, OTF_GlyphID glyph_id) {\n  if (coverage->CoverageFormat == 1) {\n    for (int i = 0; i < coverage->Count; i++) {\n      if (coverage->table.GlyphArray[i] == glyph_id) {\n        return i;\n      }\n    }\n  } else if (coverage->CoverageFormat == 2) {\n    for (int i = 0; i < coverage->Count; i++) {\n      OTF_RangeRecord *range = coverage->table.RangeRecord + i;\n      for (int j = range->Start; j <= range->End; j++) {\n        if (j == glyph_id) {\n          return j;\n        }\n      }\n    }\n  }\n  // \u3075\u304f\u307e\u308c\u3066\u306a\u3044\n  return -1;\n}\n\n\nOTF_PairValueRecord *get_pair_set(OTF_LookupSubTableGPOS *sub_table, OTF_GlyphID left, OTF_GlyphID right) {\n  //  printf(\"Coverage Format: %d, Count: %d, left: %d, right: %d\\n\", sub_table->Coverage.CoverageFormat,\n  //  sub_table->Coverage.Count, glyph_contains(&sub_table->Coverage, left), glyph_contains(&sub_table->Coverage,\n  //  right));\n  int pair_set_index = glyph_contains(&sub_table->Coverage, left);\n  if (pair_set_index < 0) {\n    // \u3053\u306e sub table \u306b\u306f left \u306e\u60c5\u5831\u7121\u3044\n    return NULL;\n  }\n\n  OTF_PairSet *pair_set = &sub_table->u.pair1.PairSet[pair_set_index];\n  for (int i = 0; i < pair_set->PairValueCount; i++) {\n    if (pair_set->PairValueRecord[i].SecondGlyph == right) {\n      return &pair_set->PairValueRecord[i];\n    }\n  }\n\n  // right \u3068\u306e\u60c5\u5831\u7121\u3044\n  return NULL;\n}\n\n\nint get_kerning_value(OTF *otf, OTF_GlyphString *gstring) {\n  char name[5];\n  OTF_Tag kern = OTF_tag(\"kern\");\n  //  OTF_Tag palt = OTF_tag(\"palt\");\n\n  // \u3088\u304f\u308f\u304b\u3089\u3093\u306e\u3067\u6700\u521d\u306e Script\n  OTF_LangSys *lang_sys = &otf->gpos->ScriptList.Script[0].DefaultLangSys;\n  for (int i = 0; i < lang_sys->FeatureCount; i++) {\n    int featureIndex = lang_sys->FeatureIndex[i];\n    OTF_Feature *feature = &otf->gpos->FeatureList.Feature[featureIndex];\n    OTF_tag_name(feature->FeatureTag, name);\n    //    printf(\"%d: %d, %s\\n\", i, featureIndex, name);\n    if (feature->FeatureTag != kern) continue;\n\n    // LookupListIndex \u306a\u304c\u3055 1 \u306a\u306e\u3067\u6700\u521d\u306e\u3084\u3064\u3002\u8907\u6570\u306f\u3044\u3063\u3066\u308b\u3053\u3068\u3063\u3066\u3042\u308b\u306e\uff1f\n    unsigned int lookupIndex = feature->LookupListIndex[0];\n    //    printf(\"%i: %s, %d\\n\", i, name, lookupIndex);\n    // \u3053\u306e\u3078\u3093\u3082\u30ea\u30b9\u30c8\u306e\u6700\u521d\u3060\u3051\n    OTF_PairValueRecord *value = get_pair_set(&otf->gpos->LookupList.Lookup[lookupIndex].SubTable.gpos[0], gstring->glyphs[0].glyph_id, gstring->glyphs[1].glyph_id);\n    if (value) {\n      // XAdvance \u4ee5\u5916\u306b\u5024\u306f\u3044\u3063\u3066\u308b\u3053\u3068\u3042\u308b\u306e\uff1f\n      return value->Value1.XAdvance;\n    }\n  }\n  return 0;\n}\n\n\nint main(int argc, const char *argv[]) {\n  OTF *otf = OTF_open(\"/Library/Fonts/\u30d2\u30e9\u30ad\u3099\u30ce\u660e\u671d Pro W6.otf\");\n  OTF_get_table(otf, \"GPOS\");\n\n  OTF_GlyphString gstring;\n  gstring.size = 2;\n  gstring.used = 2;\n  gstring.glyphs = (OTF_Glyph *)calloc(gstring.size, sizeof(OTF_Glyph));\n  gstring.glyphs[0].c = 0x3042;  // \u3042\n  gstring.glyphs[1].c = 0x3062;  // \u3062\n  OTF_drive_cmap(otf, &gstring);\n  printf(\"Left glyph=0x%04x, Right glyph=0x%04x\\n\", gstring.glyphs[0].glyph_id, gstring.glyphs[1].glyph_id);\n\n  int kerning_value = get_kerning_value(otf, &gstring);\n  printf(\"Kerning value=%d\\n\", kerning_value);\n\n  free(gstring.glyphs);\n  OTF_close(otf);\n\n  return 0;\n}\n\n\u3093\u3067\u3001\u3053\u308c\u3067\u306f\u307e\u3060\u6b63\u78ba\u306b\u30dd\u30b8\u30b7\u30e7\u30cb\u30f3\u30b0\u3067\u304d\u306a\u304f\u3066\u3001kern feature \u306e\u89e3\u8aac\u306e\u3068\u3053\u306b\u3001\n\nFeature interaction: If kern is activated, palt must also be activated if it exists. If palt is activated, there is no requirement that kern must also be activated.\n\n\u3063\u3066\u3042\u308b\u3088\u3046\u306b\u3001palt \u304c\u3042\u308b\u306a\u3089\u305d\u308c\u3082\u3061\u3083\u3093\u3068\u51e6\u7406\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002OTF \u8907\u96d1\u3059\u304e\u3001\u3001\u3001\n[OpenType](https://ja.wikipedia.org/wiki/OpenType) \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30ab\u30fc\u30cb\u30f3\u30b0\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3057\u305f\u3044\u4e8b\u60c5\u304c\u3042\u3063\u3066\u3044\u308d\u3044\u308d\u8abf\u3079\u305f\u4f5c\u696d\u30ed\u30b0\u3002\n\n- \u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u3044\u3058\u308b\u3068\u304d\u306b\u3064\u304b\u3046\u5b9a\u756a\u30e9\u30a4\u30d6\u30e9\u30ea [freetype 2.6](http://www.freetype.org/) \u3067\u306f OpenType \u306e\u30ab\u30fc\u30cb\u30f3\u30b0\u60c5\u5831\u304c\u3072\u304d\u3060\u305b\u306a\u304b\u3063\u305f\u306e\u3067\uff08\u30d5\u30a9\u30f3\u30c8\u306b\u3082\u3088\u308b\u3068\u601d\u3046\u3051\u3069\uff09\u3001[libotf (0.9.13)](http://www.nongnu.org/m17n/) \u3067 OTF \u30d5\u30a1\u30a4\u30eb\u3092\u89e3\u6790\u3057\u3066\u53d6\u308a\u51fa\u3059\u3002\n- OTF \u306e\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f [Microsoft Typography - OpenType Specification] (https://www.microsoft.com/typography/otspec/) \u306b\u307e\u3068\u307e\u3063\u3066\u308b\u3002\n- [The TrueType Font File](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6.html) OpenType \u306f TrueType \u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u308b\u306e\u3067\u2191\u306b\u306a\u3044\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9\u3068\u304b\u306f\u3053\u306e\u3078\u3093\u3082\u898b\u308b\u3002\n- libotf \u306e example \u306b\u542b\u307e\u308c\u3066\u308b `otfdump` \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u3068\u3001OTF \u30d5\u30a1\u30a4\u30eb\u306e\u69cb\u9020\u3092\u30c4\u30ea\u30fc\u4e0a\u306b\u30c6\u30ad\u30b9\u30c8\u3067\u30c0\u30f3\u30d7\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u2193\u3001\u4ed5\u69d8\u66f8\u3068\u304f\u3089\u3079\u306a\u304c\u3089\u898b\u308b\u3068\u7406\u89e3\u3057\u3084\u3059\u3044\u3002\n\n```\n(OTF\n  (OffsetTable\n    (sfnt-version 20308.21583)\n    (numTables 25)\n    (searchRange 256)\n    (enterSelector 4)\n    (rangeShift 384))\n  (Table 0 (tag \"BASE\" #x42415345)\n    (checkSum 6962C672) (offset #x00000430) (length: #x000001C8))\n  (Table 1 (tag \"CFF \" #x43464620)\n    (checkSum 0BDFCA60) (offset #x0034700C) (length: #x0080F295))\n  (Table 2 (tag \"EBDT\" #x45424454)\n    (checkSum E109E7DA) (offset #x00213B60) (length: #x001334AA))\n  (Table 3 (tag \"EBLC\" #x45424C43)\n    (checkSum 81D5AE36) (offset #x00002A58) (length: #x0001064C))\n  (Table 4 (tag \"GPOS\" #x47504F53)\n    (checkSum D6E4B8CC) (offset #x00036E04) (length: #x00015098))\n  (Table 5 (tag \"GSUB\" #x47535542)\n...\n```\n\n- \u30ab\u30fc\u30cb\u30f3\u30b0\u60c5\u5831\u306f\u2193\u3089\u3078\u3093\u306b\u306f\u3044\u3063\u3066\u308b\u3002\n    1. [`kern` \u30c6\u30fc\u30d6\u30eb](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6kern.html)\n    2. [`kerx` \u30c6\u30fc\u30d6\u30eb](https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6kerx.html)\n    3. [`GPOS` \u30c6\u30fc\u30d6\u30eb](https://www.microsoft.com/typography/otspec/GPOS.htm)\u306e [`kern` feature](https://www.microsoft.com/typography/otspec/features_ko.htm#kern)\n- freetype \u3067\u53d6\u308a\u51fa\u305b\u308b\u306e\u306f\u304a\u305d\u3089\u304f 1 \u306e `kern` \u30c6\u30fc\u30d6\u30eb\u306e\u307f\uff1f \u3057\u304b\u3082 Apple \u62e1\u5f35\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u3002[TTX](https://github.com/behdad/fonttools/) \u306f Apple \u62e1\u5f35\u5bfe\u5fdc\u3057\u3066\u308b\u3002\n\n\n## libotf \u3067\u30ab\u30fc\u30cb\u30f3\u30b0\u60c5\u5831\u3092\u5b9f\u969b\u306b\u3068\u308a\u3060\u3059\n\nGPOS \u30c6\u30fc\u30d6\u30eb\u304b\u3089\u53d6\u308a\u51fa\u3059\u306e\u304c\u6b63\u653b\u6cd5\u3063\u307d\u3044\u306e\u3067\u305d\u3063\u304b\u3089\u3044\u304f\u3002\uff08`/Library/Fonts/\u30d2\u30e9\u30ad\u3099\u30ce\u660e\u671d Pro W6.otf` \u306b\u306f `kerx` \u30c6\u30fc\u30d6\u30eb\u3082\u3042\u3063\u305f\u3051\u3069\u3001\u5f8c\u65b9\u4e92\u63db\u3066\u304d\u306a\u3053\u3068\uff1f\uff09\n\n1. Unicode \u304b\u3089 Glyph ID\u306b\u5909\u63db\u3002\n2. `GPOS` \u30c6\u30fc\u30d6\u30eb\u306e ScriptList \u304b\u3089\u51e6\u7406\u5bfe\u8c61 Glyph \u306b\u5bfe\u5fdc\u3059\u308b Script \u3092\u9078\u3076\uff08\u2190\u3053\u3053\u304c\u3088\u304f\u308f\u304b\u3089\u3093\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u30ea\u30b9\u30c8\u306e\u3044\u3061\u3070\u3093\u6700\u521d\u306e Script \u306b\u3057\u3068\u304f\u3002\uff09\n3. Script \u306e\u306a\u304b\u304b\u3089\u5bfe\u5fdc\u3059\u308b LangSys \u3092\u9078\u3076\u3002\uff08\u2190\u3053\u308c\u3082\u3088\u304f\u308f\u304b\u3089\u3093\u3051\u3069\u57fa\u672c 1 \u500b\u3057\u304b\u306a\u3044\u306e\u3067\u305d\u308c\u3067\u3002\uff09\n4. LangSys \u306e\u4e0b\u306b\u3001\u5bfe\u5fdc\u3057\u3066\u308b Feature \u306e FeatureList \u5185\u306b\u304a\u3051\u308b index \u3092\u542b\u3093\u3060\u30ea\u30b9\u30c8\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u306a\u3081\u3066\u304f\u3002\n5. `kern` feature \u306e lookup table index \u304b\u3089 lookup table \u53d6\u5f97\u3002\n6. lookup \u306e\u306a\u304b\u306e sub table \u306e\u306a\u304b\u306e coverage \u69cb\u9020\u4f53\u306e\u306a\u304b\u306b\u5bfe\u8c61\u306e Glyph \u304c\u3042\u308c\u3070\u30ab\u30fc\u30cb\u30f3\u30b0\u5024\u304c\u3075\u304f\u307e\u308c\u3066\u308b\u3002\n7. coverage \u5185\u306e glyph \u306e index \u304c pair set \u306e index \u3068\u5bfe\u5fdc\u3057\u3066\u308b\u3002\n8. pair set \u5185\u306e pair value record \u3092\u3060\u30fc\u3063\u3068\u307f\u3066\u3044\u3063\u3066\u3001second glyph \u304c\u30ab\u30fc\u30cb\u30f3\u30b0\u30da\u30a2\u306e id \u3060\u3063\u305f\u3089\u305d\u308c\u304c\u5b9f\u969b\u306e\u30ab\u30fc\u30cb\u30f3\u30b0\u5024\u3002\n\n\u3063\u3066\u3001\u66f8\u3044\u3066\u3066\u308f\u3051\u308f\u304b\u3093\u306a\u304f\u306a\u3063\u3066\u304d\u305f\u3051\u3069\u3001\u30b3\u30fc\u30c9\u306b\u76f4\u3059\u3068\u2193\n\n```c\n#include <iostream>\n#include \"otf.h\"\n#include <ft2build.h>\n#include FT_FREETYPE_H\n\n\nint glyph_contains(OTF_Coverage *coverage, OTF_GlyphID glyph_id) {\n  if (coverage->CoverageFormat == 1) {\n    for (int i = 0; i < coverage->Count; i++) {\n      if (coverage->table.GlyphArray[i] == glyph_id) {\n        return i;\n      }\n    }\n  } else if (coverage->CoverageFormat == 2) {\n    for (int i = 0; i < coverage->Count; i++) {\n      OTF_RangeRecord *range = coverage->table.RangeRecord + i;\n      for (int j = range->Start; j <= range->End; j++) {\n        if (j == glyph_id) {\n          return j;\n        }\n      }\n    }\n  }\n  // \u3075\u304f\u307e\u308c\u3066\u306a\u3044\n  return -1;\n}\n\n\nOTF_PairValueRecord *get_pair_set(OTF_LookupSubTableGPOS *sub_table, OTF_GlyphID left, OTF_GlyphID right) {\n  //  printf(\"Coverage Format: %d, Count: %d, left: %d, right: %d\\n\", sub_table->Coverage.CoverageFormat,\n  //  sub_table->Coverage.Count, glyph_contains(&sub_table->Coverage, left), glyph_contains(&sub_table->Coverage,\n  //  right));\n  int pair_set_index = glyph_contains(&sub_table->Coverage, left);\n  if (pair_set_index < 0) {\n    // \u3053\u306e sub table \u306b\u306f left \u306e\u60c5\u5831\u7121\u3044\n    return NULL;\n  }\n\n  OTF_PairSet *pair_set = &sub_table->u.pair1.PairSet[pair_set_index];\n  for (int i = 0; i < pair_set->PairValueCount; i++) {\n    if (pair_set->PairValueRecord[i].SecondGlyph == right) {\n      return &pair_set->PairValueRecord[i];\n    }\n  }\n\n  // right \u3068\u306e\u60c5\u5831\u7121\u3044\n  return NULL;\n}\n\n\nint get_kerning_value(OTF *otf, OTF_GlyphString *gstring) {\n  char name[5];\n  OTF_Tag kern = OTF_tag(\"kern\");\n  //  OTF_Tag palt = OTF_tag(\"palt\");\n\n  // \u3088\u304f\u308f\u304b\u3089\u3093\u306e\u3067\u6700\u521d\u306e Script\n  OTF_LangSys *lang_sys = &otf->gpos->ScriptList.Script[0].DefaultLangSys;\n  for (int i = 0; i < lang_sys->FeatureCount; i++) {\n    int featureIndex = lang_sys->FeatureIndex[i];\n    OTF_Feature *feature = &otf->gpos->FeatureList.Feature[featureIndex];\n    OTF_tag_name(feature->FeatureTag, name);\n    //    printf(\"%d: %d, %s\\n\", i, featureIndex, name);\n    if (feature->FeatureTag != kern) continue;\n\n    // LookupListIndex \u306a\u304c\u3055 1 \u306a\u306e\u3067\u6700\u521d\u306e\u3084\u3064\u3002\u8907\u6570\u306f\u3044\u3063\u3066\u308b\u3053\u3068\u3063\u3066\u3042\u308b\u306e\uff1f\n    unsigned int lookupIndex = feature->LookupListIndex[0];\n    //    printf(\"%i: %s, %d\\n\", i, name, lookupIndex);\n    // \u3053\u306e\u3078\u3093\u3082\u30ea\u30b9\u30c8\u306e\u6700\u521d\u3060\u3051\n    OTF_PairValueRecord *value = get_pair_set(&otf->gpos->LookupList.Lookup[lookupIndex].SubTable.gpos[0], gstring->glyphs[0].glyph_id, gstring->glyphs[1].glyph_id);\n    if (value) {\n      // XAdvance \u4ee5\u5916\u306b\u5024\u306f\u3044\u3063\u3066\u308b\u3053\u3068\u3042\u308b\u306e\uff1f\n      return value->Value1.XAdvance;\n    }\n  }\n  return 0;\n}\n\n\nint main(int argc, const char *argv[]) {\n  OTF *otf = OTF_open(\"/Library/Fonts/\u30d2\u30e9\u30ad\u3099\u30ce\u660e\u671d Pro W6.otf\");\n  OTF_get_table(otf, \"GPOS\");\n\n  OTF_GlyphString gstring;\n  gstring.size = 2;\n  gstring.used = 2;\n  gstring.glyphs = (OTF_Glyph *)calloc(gstring.size, sizeof(OTF_Glyph));\n  gstring.glyphs[0].c = 0x3042;  // \u3042\n  gstring.glyphs[1].c = 0x3062;  // \u3062\n  OTF_drive_cmap(otf, &gstring);\n  printf(\"Left glyph=0x%04x, Right glyph=0x%04x\\n\", gstring.glyphs[0].glyph_id, gstring.glyphs[1].glyph_id);\n\n  int kerning_value = get_kerning_value(otf, &gstring);\n  printf(\"Kerning value=%d\\n\", kerning_value);\n\n  free(gstring.glyphs);\n  OTF_close(otf);\n\n  return 0;\n}\n```\n\n\u3093\u3067\u3001\u3053\u308c\u3067\u306f\u307e\u3060\u6b63\u78ba\u306b\u30dd\u30b8\u30b7\u30e7\u30cb\u30f3\u30b0\u3067\u304d\u306a\u304f\u3066\u3001[`kern` feature \u306e\u89e3\u8aac\u306e\u3068\u3053](https://www.microsoft.com/typography/otspec/features_ko.htm#kern)\u306b\u3001\n\n> Feature interaction: If kern is activated, palt must also be activated if it exists. If palt is activated, there is no requirement that kern must also be activated.\n\n\u3063\u3066\u3042\u308b\u3088\u3046\u306b\u3001`palt` \u304c\u3042\u308b\u306a\u3089\u305d\u308c\u3082\u3061\u3083\u3093\u3068\u51e6\u7406\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002OTF \u8907\u96d1\u3059\u304e\u3001\u3001\u3001\n", "tags": ["font", "C"]}