{"context": "\n\n\u6982\u8981\n\u4eca\u56de\u306f\u3001myThings Developers\u3068\u30c7\u30d0\u30a4\u30b9\u3092\u7e4b\u3044\u3067\u3001IoT\u3063\u307d\u3044\u3082\u306e\u3092\u4f5c\u308b\u305f\u3081\u306e\u6e96\u5099\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u4f7f\u3046\u3082\u306e\n\nmyThings Developers\nAWS IoT\nAWS Lambda\nRaspberry Pi 3\n\n\n\u5b8c\u6210\u4e88\u60f3\u56f3\n\u4e0b\u56f3\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\u4f5c\u3063\u3066\u3044\u304f\u6d41\u308c\n\u3053\u3093\u306a\u6d41\u308c\u3067\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n 1. myThings Developers\u306e\u6e96\u5099\n 2. AWS Lambda\u306e\u6e96\u5099\n 3. AWS IoT\u306e\u6e96\u5099\n 4. \u30e9\u30ba\u30d1\u30a4\u306e\u6e96\u5099\n 5. \u52d5\u304b\u3057\u3066\u307f\u308b\n\n1. myThings Developers\u306e\u6e96\u5099\n\n1-1. \u5229\u7528\u8005\u767b\u9332\n\u307e\u305a\u306fmyThings Developers\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\n\u3059\u308b\u3068\u4e0b\u56f3\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\nYahoo! JAPAN ID\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u3001\u5229\u7528\u8005\u767b\u9332\u3092\u884c\u3044\u307e\u3059\u3002\n\uff08\u7121\u6599\u3067\u4f7f\u3048\u308b\u306e\u3067\u5b89\u5fc3\uff09\n\n1-2. \u30c7\u30fc\u30bf\u3092\u767b\u9332\n\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u9023\u643a\u3057\u3066\u52d5\u304b\u3057\u305f\u3044\u30b5\u30fc\u30d3\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u7d30\u304b\u3044\u6d41\u308c\u306f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4eca\u56de\u306f\u30e9\u30ba\u30d1\u30a4\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092Slack\u3078\u6295\u7a3f\u3059\u308b\u30b1\u30fc\u30b9\u3067\u3059\u3002\n\n\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306e\u8a2d\u5b9a\u306f\u3001\u4e0b\u56f3\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u30e9\u30ba\u30d1\u30a4\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092key01\u304b\u3089\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n\nSlack\u306e\u8a2d\u5b9a\u306f\u3001\u4e0b\u56f3\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u30e9\u30ba\u30d1\u30a4\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3057\u307e\u3059\u3002\n\n\n1-3. \u30c6\u30b9\u30c8\u5b9f\u884c\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u624b\u9806\u306b\u6cbf\u3063\u3066\u9032\u3081\u3001\u30c6\u30b9\u30c8\u5b9f\u884c\u3092\u884c\u3044\u307e\u3059\u3002\n\u4e0b\u56f3\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3001\u30c6\u30b9\u30c8\u5b9f\u884c\u3092\u884c\u3046\u3068Slack\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6295\u7a3f\u3055\u308c\u307e\u3059\u3002\n\nSlack\u306b\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6295\u7a3f\u3055\u308c\u307e\u3059\u3002\n\n\n1-4. \u758e\u901a\u78ba\u8a8d\n\u30c6\u30b9\u30c8\u5b9f\u884c\u3067Slack\u306b\u6295\u7a3f\u3067\u304d\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u305f\u306e\u3067\u3001\u6b21\u306f\u758e\u901a\u78ba\u8a8d\u3092\u884c\u3044\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3055\u305b\u307e\u3059\u3002\n\n\u3061\u3087\u3063\u3068\u305a\u308b\u3092\u3057\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u4e0b\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u4e0b\u56f3\u306e\u30b5\u30f3\u30d7\u30eb\u30ec\u30b9\u30dd\u30f3\u30b9\u304b\u3089url\u3092\u30b3\u30d4\u30da\u3057\u3066\u30d6\u30e9\u30a6\u30b6\u306e\u30a2\u30c9\u30ec\u30b9\u30d0\u30fc\u306b\u5165\u529b\u3059\u308b\u3068\u30e6\u30fc\u30b6\u30fc\u8a2d\u5b9a\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u4e0b\u56f3\u306e\u3088\u3046\u306a\u30e6\u30fc\u30b6\u30fc\u8a2d\u5b9a\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306b{{\u30ad\u30fc01}}\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001Step.2\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u4ee5\u4e0b\u306e\u5024\u3092\u30e1\u30e2\u5e33\u306a\u3069\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3059\u3002\uff08\u3042\u3068\u3067\u4f7f\u3044\u307e\u3059\u3002\uff09\n// \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u5b9f\u884cAPI\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u30db\u30b9\u30c8\u540d\u3068\u30d1\u30b9\nvar hostname = \"mythings-developers.yahooapis.jp\";\nvar path = \"/v2/services/\uff1c\u500b\u5225\u306e\u5024\uff1e/mythings/\uff1c\u500b\u5225\u306e\u5024\uff1e/run\";\n\n// \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3ID\nvar appid = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n// \u30b7\u30fc\u30af\u30ec\u30c3\u30c8\nvar secret = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n\n// \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\nvar accessToken = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n// \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\nvar refreshToken = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n\n\u4ee5\u4e0a\u3067myThings Developers\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n2. AWS Lambda\u306e\u6e96\u5099\n\n2-1. AWS Lambda\u306e\u9078\u629e\nAWS\u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3057\u305f\u5f8c\u306f\u3001\u30b5\u30fc\u30d3\u30b9\u304b\u3089Lambda\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n\n2-2. Create a Lambda function\nLambda function\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001Create a Lambda function\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002\n\nmyThings Developers\u3078https\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308a\u305f\u3044\u306e\u3067\u3001https\u3067\u691c\u7d22\u3057\u3066\u3001\nhttps-request\u306eblueprint\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\nAWS IoT \u3092trigger\u306b\u9078\u629e\u3057\u3001\u9069\u5f53\u306aRule name(RaspberryPi3_rule)\u3092\u8a2d\u5b9a\u3057\u3001\nSQL statement\u306bSELECT * FROM 'sdk/test/Python'\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\uff08\u4e0a\u8a18\u306eSQL statement\u306fAWS IoT\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\uff09\n\n\u9069\u5f53\u306afunction\u306e\u540d\u524d(RaspberryPi3_function)\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\nfunction code\u306b\u4e0b\u8a18\u306b\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u5185\u306e\uff1c\u500b\u5225\u306e\u5024\uff1e\u3068\u8a18\u8f09\u3057\u3066\u3044\u308b\u90e8\u5206\u306f\u3001myThings Developers\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304b\u3089\u53d6\u5f97\u3057\u305f\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nvar http = require(\"http\");\nvar https = require(\"https\");\n\n// \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u5b9f\u884cAPI\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u30db\u30b9\u30c8\u540d\u3068\u30d1\u30b9\nvar hostname = \"mythings-developers.yahooapis.jp\";\nvar path = \"/v2/services/\uff1c\u500b\u5225\u306e\u5024\uff1e/mythings/\uff1c\u500b\u5225\u306e\u5024\uff1e/run\";\n\n// \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3ID\nvar appid = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n// \u30b7\u30fc\u30af\u30ec\u30c3\u30c8\nvar secret = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n\n// \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\nvar accessToken = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n// \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\nvar refreshToken = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n\nexports.handler = function(event, context) {\n\n    // \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3057\u305f\u30ad\u30fc\u540d\u3068\u5024\u3092\u6307\u5b9a\n    var postArgs = {\n        \"key01\": event.message\n    };\n\n    var postData = require(\"querystring\").stringify( {\n            \"entry\": JSON.stringify(postArgs),\n    });\n\n    // \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306e\u5b9f\u884c\n    postRequestWithToken(hostname, path, accessToken, postData, refreshToken, appid, secret);\n};\n\n/**\n * postRequestWithToken\n *\n * @param string hostname myThings\u306e\u30db\u30b9\u30c8\n * @param string path \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u5b9f\u884cAPI\u306e\u30d1\u30b9\n * @param string accessToken \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\n * @param array postData POST\u30c7\u30fc\u30bf\n * @param string refreshToken \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\u3002\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u306f\u884c\u308f\u306a\u3044\n * @param string appid \u30a2\u30d7\u30ea\u30fc\u30b7\u30e7\u30f3ID\n * @param string secret secret\n */\nfunction postRequestWithToken(hostname, path, accessToken, postData, refreshToken, appid, secret)\n{\n    // \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306e\u51e6\u7406\n    if(typeof refreshToken === 'undefined') refreshToken = false;\n    if(typeof appid === 'undefined') appid = false;\n    if(typeof secret === 'undefined') secret = false;\n\n    // curl\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a\n    var options = {\n        hostname: hostname,\n        path: path,\n        port: 443,\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n            \"Authorization\": \"Bearer \" + accessToken,\n        },\n    };\n\n    // curl\u3067API\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3078\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\n    var req = https.request(options, function(res) {\n        // 401\u8a8d\u8a3c\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u3066\u3044\u307e\u3059\n        if(res.statusCode == 401) {\n            // \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u66f4\u65b0\n            if(refreshToken !== false) {\n                // \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u66f4\u65b0\n                refreshAccessToken(hostname, path, refreshToken, appid, secret, postData);\n            }\n        }\n\n        // \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u51e6\u7406\n        res.on('data', function(body){\n            parseData = JSON.parse(body);\n            console.log(parseData); \n            if(typeof( parseData[\"flag\"] ) != \"undefined\")\n            {\n                var msg = \"\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306e\u5b9f\u884c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u307e\u3057\u305f\u3002\";\n                console.log(msg);\n            }\n        }); \n    })\n    .on(\"error\", function(res) {\n        console.error(\"\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306e\u5b9f\u884c\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u53d7\u4ed8\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\");\n    });\n\n    // POST\u30c7\u30fc\u30bf\u306e\u30ea\u30af\u30a8\u30b9\u30c8\n    req.end(postData);\n}\n\n/**\n * refreshAccessToken\n *\n * @param string hostname myThings\u306e\u30db\u30b9\u30c8\n * @param string path \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u5b9f\u884cAPI\u306e\u30d1\u30b9\n * @param string refreshToken \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\n * @param string appid \u30a2\u30d7\u30ea\u30fc\u30b7\u30e7\u30f3ID\n * @param string secret secret\n */\nfunction refreshAccessToken(hostname, path, refreshToken, appid, secret, postDataWithToken)\n{\n    var postData = require(\"querystring\").stringify( {\n        \"grant_type\": \"refresh_token\",\n        \"refresh_token\": refreshToken\n    });\n\n    // \u30d9\u30fc\u30b8\u30c3\u30af\u8a8d\u8a3c\n    var buffer = new Buffer(appid + \":\" + secret, \"ascii\");\n    var options = {\n        hostname: \"auth.login.yahoo.co.jp\",\n        path: \"/yconnect/v1/token\",\n        port: 443,\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n            \"Authorization\": \"Basic \" + buffer.toString(\"base64\"),\n        }\n    };\n\n    // curl\u3067API\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3078\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\n    var req = https.request(options, function(res) {\n        // 401\u8a8d\u8a3c\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\u306e\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u3066\u3044\u307e\u3059\n        if(res.statusCode == 401) {\n            console.error(\"\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\u306e\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u307e\u3057\u305f\u3002myThings Developers\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304b\u3089\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\u3092\u518d\u53d6\u5f97\u3057\u3066\u4e0b\u3055\u3044\u3002\");\n        }\n\n        // \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u51e6\u7406\n        res.on('data', function(body){\n            parseData = JSON.parse(body);\n            // \u53d6\u5f97\u3057\u305f\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3067\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306e\u518d\u5b9f\u884c\n            postRequestWithToken(hostname, path, parseData['access_token'], postDataWithToken);\n        }); \n    });\n\n    // POST\u30c7\u30fc\u30bf\u306e\u30ea\u30af\u30a8\u30b9\u30c8\n    req.end(postData);\n}\n\n\nHander\u3092\u4e0b\u56f3\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\uff08\u521d\u671f\u8868\u793a\u304b\u3089\u5909\u66f4\u306a\u3057\uff09\nHander\u306e\u8a2d\u5b9a\u306f\u3001\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u4e0b\u8a18\u306e\u592a\u5b57\u90e8\u5206\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nexports.handler = function(event, context) {\n\n\u3042\u3068\u306f\u6b21\u306e\u30da\u30fc\u30b8\u3078\u9077\u79fb\u3057\u3066\u3001Create function\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u7d42\u4e86\u3067\u3059\u3002\n\n2-3. Test\n\u6700\u5f8c\u306bfunction\u304c\u6b63\u3057\u304f\u52d5\u3044\u3066\u3044\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u753b\u9762\u3067Test\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001\nExecution result: succeeded\u3068\u8868\u793a\u3055\u308c\u3066\u3044\u308c\u3070\u5b9f\u884c\u6210\u529f\u3067\u3059\u3002\n\n\u4ee5\u4e0a\u3067AWS Lambda\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n3. AWS IoT\u306e\u6e96\u5099\n\n3-1. AWS IoT\u306e\u9078\u629e\n\u30b5\u30fc\u30d3\u30b9\u304b\u3089AWS IoT\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n\n3-2. Register a thing\nAWS IoT \u3092\u958b\u304f\u3068\u5de6\u306b\u30e1\u30cb\u30e5\u30fc\u304c\u3042\u308b\u753b\u9762\u304c\u958b\u304b\u308c\u307e\u3059\u3002\n\u30c7\u30d0\u30a4\u30b9\u3092\u7e4b\u3050\u305f\u3081\u306b\u307e\u305a\u306fthing\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u5de6\u30e1\u30cb\u30e5\u30fc\u306eRegister>Things\u3092\u9078\u629e\u3057\u3001Register a thing\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u4eca\u56de\u306fName\u306bRaspberryPi3\u3068\u5165\u529b\u3057\u307e\u3059\u3002\n\n\n3-3. Test\nPublish\u306bsdk/test/Python\u3092\u5165\u529b\u3057\u3001Publish to topic\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u30c6\u30b9\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u98db\u3073\u307e\u3059\u3002\nSlack\u306b\u3082\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u98db\u3093\u3067\u3044\u308b\u306e\u3067\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4ee5\u4e0a\u3067AWS IoT\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n4. \u30e9\u30ba\u30d1\u30a4\u306e\u6e96\u5099\n\n4-1. SDK\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u30e9\u30ba\u30d1\u30a4\u3092\u8d77\u52d5\u3057\u3001\u30d6\u30e9\u30a6\u30b6\u3067AWS IoT\u306e\u30da\u30fc\u30b8\u3092\u958b\u304d\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u5148\u7a0b\u4f5c\u3063\u305fThings\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n\u8868\u793a\u3055\u308c\u305f\u30da\u30fc\u30b8\u3067Interact\u3092\u9078\u629e\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u753b\u9762\u53f3\u4e0a\u306eConnect a device\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\u3042\u3068\u3067\u4f7f\u3046\u306e\u3067\u3001\u3053\u306e\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308bEndpoint(XXXXX.amazonaws.com)\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304a\u3044\u3066\u4e0b\u3055\u3044\u3002\n\n\u74b0\u5883\u3068\u8a00\u8a9e\u3092\u8a2d\u5b9a\u3059\u308b\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001\nLinux/OSX > Python\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\u9032\u3081\u3066\u3044\u304f\u3068\u3001\u4e0b\u8a18\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001Download connection kit for\u306e\u4e0b\u306eLinux/OSX\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u3001ZIP\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\n\u6b21\u306e\u30da\u30fc\u30b8\u306e\u624b\u9806\u306b\u6cbf\u3063\u3066\u9032\u3081\u308b\u3068SDK\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5b8c\u4e86\u3057\u307e\u3059\u3002\n\n4-2. \u8a3c\u660e\u66f8\u306e\u6e96\u5099\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u52d5\u304b\u3059\u5834\u5408\u3001\u4e0b\u8a18\u306e\uff13\u3064\u306e\u8a3c\u660e\u66f8\u304c\u5fc5\u8981\u3067\u3059\u3002\n - RaspberryPi3.cert.pem\n - RaspberryPi3.private.key\n - rootCA.pem\nrootCA.pem\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\n\ncurl https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem -o rootCA.pem\n\n\n4-3. \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u4fee\u6b63\n\u4eca\u56de\u306f\u3001\u4e0b\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u304c\u3001Publish\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306fJSON\u5f62\u5f0f\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u4e00\u90e8\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\nhttps://github.com/aws/aws-iot-device-sdk-python/blob/master/samples/basicPubSub/basicPubSub.py\n\u4fee\u6b63\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n'''\n/*\n * Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n '''\n\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\nimport sys\nimport logging\nimport time\nimport getopt\nimport json\n\n# Custom MQTT message callback\ndef customCallback(client, userdata, message):\n    print(\"Received a new message: \")\n    print(message.payload)\n    print(\"from topic: \")\n    print(message.topic)\n    print(\"--------------\\n\\n\")\n\n# Usage\nusageInfo = \"\"\"Usage:\nUse certificate based mutual authentication:\npython basicPubSub.py -e <endpoint> -r <rootCAFilePath> -c <certFilePath> -k <privateKeyFilePath>\nUse MQTT over WebSocket:\npython basicPubSub.py -e <endpoint> -r <rootCAFilePath> -w\nType \"python basicPubSub.py -h\" for available options.\n\"\"\"\n# Help info\nhelpInfo = \"\"\"-e, --endpoint\n    Your AWS IoT custom endpoint\n-r, --rootCA\n    Root CA file path\n-c, --cert\n    Certificate file path\n-k, --key\n    Private key file path\n-w, --websocket\n    Use MQTT over WebSocket\n-h, --help\n    Help information\n\"\"\"\n\n# Read in command-line parameters\nuseWebsocket = False\nhost = \"\"\nrootCAPath = \"\"\ncertificatePath = \"\"\nprivateKeyPath = \"\"\ntry:\n    opts, args = getopt.getopt(sys.argv[1:], \"hwe:k:c:r:\", [\"help\", \"endpoint=\", \"key=\",\"cert=\",\"rootCA=\", \"websocket\"])\n    if len(opts) == 0:\n        raise getopt.GetoptError(\"No input parameters!\")\n    for opt, arg in opts:\n        if opt in (\"-h\", \"--help\"):\n            print(helpInfo)\n            exit(0)\n        if opt in (\"-e\", \"--endpoint\"):\n            host = arg\n        if opt in (\"-r\", \"--rootCA\"):\n            rootCAPath = arg\n        if opt in (\"-c\", \"--cert\"):\n            certificatePath = arg\n        if opt in (\"-k\", \"--key\"):\n            privateKeyPath = arg\n        if opt in (\"-w\", \"--websocket\"):\n            useWebsocket = True\nexcept getopt.GetoptError:\n    print(usageInfo)\n    exit(1)\n\n# Missing configuration notification\nmissingConfiguration = False\nif not host:\n    print(\"Missing '-e' or '--endpoint'\")\n    missingConfiguration = True\nif not rootCAPath:\n    print(\"Missing '-r' or '--rootCA'\")\n    missingConfiguration = True\nif not useWebsocket:\n    if not certificatePath:\n        print(\"Missing '-c' or '--cert'\")\n        missingConfiguration = True\n    if not privateKeyPath:\n        print(\"Missing '-k' or '--key'\")\n        missingConfiguration = True\nif missingConfiguration:\n    exit(2)\n\n# Configure logging\nlogger = logging.getLogger(\"AWSIoTPythonSDK.core\")\nlogger.setLevel(logging.DEBUG)\nstreamHandler = logging.StreamHandler()\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nstreamHandler.setFormatter(formatter)\nlogger.addHandler(streamHandler)\n\n# Init AWSIoTMQTTClient\nmyAWSIoTMQTTClient = None\nif useWebsocket:\n    myAWSIoTMQTTClient = AWSIoTMQTTClient(\"basicPubSub\", useWebsocket=True)\n    myAWSIoTMQTTClient.configureEndpoint(host, 443)\n    myAWSIoTMQTTClient.configureCredentials(rootCAPath)\nelse:\n    myAWSIoTMQTTClient = AWSIoTMQTTClient(\"basicPubSub\")\n    myAWSIoTMQTTClient.configureEndpoint(host, 8883)\n    myAWSIoTMQTTClient.configureCredentials(rootCAPath, privateKeyPath, certificatePath)\n\n# AWSIoTMQTTClient connection configuration\nmyAWSIoTMQTTClient.configureAutoReconnectBackoffTime(1, 32, 20)\nmyAWSIoTMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing\nmyAWSIoTMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz\nmyAWSIoTMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec\nmyAWSIoTMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec\n\n# Connect and subscribe to AWS IoT\nmyAWSIoTMQTTClient.connect()\nmyAWSIoTMQTTClient.subscribe(\"sdk/test/Python\", 1, customCallback)\ntime.sleep(2)\n\n# Publish to the same topic in a loop forever\nloopCount = 0\nwhile True:\n    json_data = {'message' : \"New Message \" + str(loopCount)}\n    myAWSIoTMQTTClient.publish(\"sdk/test/Python\", json.dumps(json_data), 1)\n    loopCount += 1\n    time.sleep(1)\n\n\n\u4ee5\u4e0a\u3067\u30e9\u30ba\u30d1\u30a4\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n5. \u52d5\u304b\u3057\u3066\u307f\u308b\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u52d5\u304b\u3059\u30681\u79d2\u9593\u9694\u3067Slack\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6295\u7a3f\u3055\u308c\u307e\u3059\u3002\npython aws-iot-device-sdk-python/samples/basicPubSub/basicPubSub.py -e XXXXX.amazonaws.com -r rootCA.pem -c RaspberryPi3.cert.pem -k RaspberryPi3.private.key\n\n10\u79d2\u9593\u52d5\u304b\u3059\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306bSlack\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6295\u7a3f\u3055\u308c\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u3067\u30c7\u30d0\u30a4\u30b9\uff08\u30e9\u30ba\u30d1\u30a4\uff09\u304b\u3089myThings Developers\u3092\u7d4c\u7531\u3057\u3066\u306eSlack\u3078\u306e\u6295\u7a3f\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n\u53c2\u8003\u8a18\u4e8b\n\nAWS IoT Device SDK for Python\u3092RaspberryPi\u3067\u52d5\u304b\u3059\n\n# \u6982\u8981\n\u4eca\u56de\u306f\u3001myThings Developers\u3068\u30c7\u30d0\u30a4\u30b9\u3092\u7e4b\u3044\u3067\u3001IoT\u3063\u307d\u3044\u3082\u306e\u3092\u4f5c\u308b\u305f\u3081\u306e\u6e96\u5099\u3092\u884c\u3044\u307e\u3059\u3002\n\n# \u4f7f\u3046\u3082\u306e\n - [myThings Developers][mlink]\n - [AWS IoT][alink]\n - [AWS Lambda][llink]\n - [Raspberry Pi 3][rlink]\n\n# \u5b8c\u6210\u4e88\u60f3\u56f3\n\u4e0b\u56f3\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n![\u5b8c\u6210\u4e88\u60f3\u56f3.png](https://qiita-image-store.s3.amazonaws.com/0/147237/8113ff2c-405c-d619-b46f-994707b35d1b.png)\n\n\n# \u4f5c\u3063\u3066\u3044\u304f\u6d41\u308c\n\u3053\u3093\u306a\u6d41\u308c\u3067\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n 1. [myThings Developers][mlink]\u306e\u6e96\u5099\n 2. [AWS Lambda][Llink]\u306e\u6e96\u5099\n 3. [AWS IoT][alink]\u306e\u6e96\u5099\n 4. \u30e9\u30ba\u30d1\u30a4\u306e\u6e96\u5099\n 5. \u52d5\u304b\u3057\u3066\u307f\u308b\n\n# 1. myThings Developers\u306e\u6e96\u5099\n## 1-1. \u5229\u7528\u8005\u767b\u9332\n\u307e\u305a\u306f[myThings Developers][mlink]\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\n\u3059\u308b\u3068\u4e0b\u56f3\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n![\u30c8\u30c3\u30d5\u309a\u753b\u9762.png](https://qiita-image-store.s3.amazonaws.com/0/147237/ba60d69b-0188-09bd-dc0e-643d2e656453.png)\nYahoo! JAPAN ID\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u3001\u5229\u7528\u8005\u767b\u9332\u3092\u884c\u3044\u307e\u3059\u3002\n\uff08\u7121\u6599\u3067\u4f7f\u3048\u308b\u306e\u3067\u5b89\u5fc3\uff09\n## 1-2. \u30c7\u30fc\u30bf\u3092\u767b\u9332\n\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u9023\u643a\u3057\u3066\u52d5\u304b\u3057\u305f\u3044\u30b5\u30fc\u30d3\u30b9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u7d30\u304b\u3044\u6d41\u308c\u306f[\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb][tlink]\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n![\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb.png](https://qiita-image-store.s3.amazonaws.com/0/147237/fcb04ecb-8e00-36ee-d5dd-108306a4bfdd.png)\n\n\u4eca\u56de\u306f\u30e9\u30ba\u30d1\u30a4\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092Slack\u3078\u6295\u7a3f\u3059\u308b\u30b1\u30fc\u30b9\u3067\u3059\u3002\n![\u7d44\u307f\u5408\u308f\u305b\u30a8\u30ea\u30a2.png](https://qiita-image-store.s3.amazonaws.com/0/147237/11e9c1e8-7dd9-71f4-fb21-0a4aca8b2f1c.png)\n\n\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306e\u8a2d\u5b9a\u306f\u3001\u4e0b\u56f3\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u30e9\u30ba\u30d1\u30a4\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092**key01**\u304b\u3089\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n![\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ab\u3099\u30fc\u8a2d\u5b9a.png](https://qiita-image-store.s3.amazonaws.com/0/147237/d0602720-02f9-fb51-983d-e4404fa6a88d.png)\n\nSlack\u306e\u8a2d\u5b9a\u306f\u3001\u4e0b\u56f3\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u30e9\u30ba\u30d1\u30a4\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u6e21\u3057\u307e\u3059\u3002\n![\u30a2\u30af\u30b7\u30e7\u30f3\u8a2d\u5b9a.png](https://qiita-image-store.s3.amazonaws.com/0/147237/4be86fc4-e2cd-9afa-960f-205d1204bfdf.png)\n\n## 1-3. \u30c6\u30b9\u30c8\u5b9f\u884c\n[\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb][tlink]\u306e\u624b\u9806\u306b\u6cbf\u3063\u3066\u9032\u3081\u3001\u30c6\u30b9\u30c8\u5b9f\u884c\u3092\u884c\u3044\u307e\u3059\u3002\n\u4e0b\u56f3\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3001\u30c6\u30b9\u30c8\u5b9f\u884c\u3092\u884c\u3046\u3068Slack\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6295\u7a3f\u3055\u308c\u307e\u3059\u3002\n![\u30c6\u30b9\u30c8\u5b9f\u884c.png](https://qiita-image-store.s3.amazonaws.com/0/147237/395c209a-d754-16c1-9fdf-f78494cdc0d9.png)\n\nSlack\u306b\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6295\u7a3f\u3055\u308c\u307e\u3059\u3002\n![slack\u6295\u7a3f.png](https://qiita-image-store.s3.amazonaws.com/0/147237/caa75966-9d04-5489-aece-bab9a13f2269.png)\n\n## 1-4. \u758e\u901a\u78ba\u8a8d\n\u30c6\u30b9\u30c8\u5b9f\u884c\u3067Slack\u306b\u6295\u7a3f\u3067\u304d\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u305f\u306e\u3067\u3001\u6b21\u306f\u758e\u901a\u78ba\u8a8d\u3092\u884c\u3044\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b**\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a**\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3055\u305b\u307e\u3059\u3002\n![\u758e\u901a\u78ba\u8a8d\u30bf\u30d5\u3099.png](https://qiita-image-store.s3.amazonaws.com/0/147237/dfa4a708-682c-2cd7-e065-4d38da1a55ed.png)\n\n\u3061\u3087\u3063\u3068\u305a\u308b\u3092\u3057\u3066\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u4e0b\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u4e0b\u56f3\u306e\u30b5\u30f3\u30d7\u30eb\u30ec\u30b9\u30dd\u30f3\u30b9\u304b\u3089url\u3092\u30b3\u30d4\u30da\u3057\u3066\u30d6\u30e9\u30a6\u30b6\u306e\u30a2\u30c9\u30ec\u30b9\u30d0\u30fc\u306b\u5165\u529b\u3059\u308b\u3068\u30e6\u30fc\u30b6\u30fc\u8a2d\u5b9a\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n![\u30b5\u30f3\u30d5\u309a\u30eb\u30ec\u30b9\u30db\u309a\u30f3\u30b9.png](https://qiita-image-store.s3.amazonaws.com/0/147237/f58aa229-9e2d-819f-dc05-311198601e36.png)\n\n\u4e0b\u56f3\u306e\u3088\u3046\u306a\u30e6\u30fc\u30b6\u30fc\u8a2d\u5b9a\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306b**{{\u30ad\u30fc01}}**\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n![\u30e6\u30fc\u30b5\u3099\u30fc\u8a2d\u5b9a.png](https://qiita-image-store.s3.amazonaws.com/0/147237/906418b3-c854-005d-4b85-5e85dd52e5ab.png)\n\n\u305d\u3057\u3066\u3001Step.2\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n![\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ab\u3099\u30fc\u30b5\u30f3\u30d5\u309a\u30eb\u547c\u3072\u3099\u51fa\u3057.png](https://qiita-image-store.s3.amazonaws.com/0/147237/61f516f3-be80-56eb-4f06-eb1de9cfda16.png)\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u4ee5\u4e0b\u306e\u5024\u3092\u30e1\u30e2\u5e33\u306a\u3069\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3059\u3002\uff08\u3042\u3068\u3067\u4f7f\u3044\u307e\u3059\u3002\uff09\n\n```\n// \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u5b9f\u884cAPI\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u30db\u30b9\u30c8\u540d\u3068\u30d1\u30b9\nvar hostname = \"mythings-developers.yahooapis.jp\";\nvar path = \"/v2/services/\uff1c\u500b\u5225\u306e\u5024\uff1e/mythings/\uff1c\u500b\u5225\u306e\u5024\uff1e/run\";\n\n// \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3ID\nvar appid = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n// \u30b7\u30fc\u30af\u30ec\u30c3\u30c8\nvar secret = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n\n// \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\nvar accessToken = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n// \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\nvar refreshToken = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n```\n\n\u4ee5\u4e0a\u3067**myThings Developers\u306e\u6e96\u5099**\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n# 2. AWS Lambda\u306e\u6e96\u5099\n## 2-1. AWS Lambda\u306e\u9078\u629e\nAWS\u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u767b\u9332\u3057\u305f\u5f8c\u306f\u3001\u30b5\u30fc\u30d3\u30b9\u304b\u3089**Lambda**\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n![AWS\u30b5\u30fc\u30d2\u3099\u30b9(Lambda).png](https://qiita-image-store.s3.amazonaws.com/0/147237/cb8039ab-5a1a-e890-f1b0-1438be3fcecc.png)\n\n## 2-2. Create a Lambda function\nLambda function\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u3001**Create a Lambda function**\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002\n![CreateLambda.png](https://qiita-image-store.s3.amazonaws.com/0/147237/748d9cc8-b101-bb4d-f83b-e3aedf0c76d5.png)\n\nmyThings Developers\u3078https\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308a\u305f\u3044\u306e\u3067\u3001https\u3067\u691c\u7d22\u3057\u3066\u3001\n**https-request**\u306eblueprint\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n![select_blueprint.png](https://qiita-image-store.s3.amazonaws.com/0/147237/87c8494a-848d-3b9b-3139-ddb10a6fe62e.png)\n\nAWS IoT \u3092trigger\u306b\u9078\u629e\u3057\u3001\u9069\u5f53\u306aRule name(**RaspberryPi3_rule**)\u3092\u8a2d\u5b9a\u3057\u3001\nSQL statement\u306b**SELECT * FROM 'sdk/test/Python'**\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\uff08\u4e0a\u8a18\u306eSQL statement\u306fAWS IoT\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\uff09\n![configure_trigger.png](https://qiita-image-store.s3.amazonaws.com/0/147237/4833cd09-db89-952b-18d5-f13307930d17.png)\n\n\u9069\u5f53\u306afunction\u306e\u540d\u524d(**RaspberryPi3_function**)\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n![configure_function.png](https://qiita-image-store.s3.amazonaws.com/0/147237/1e69439e-00e6-d6ca-d574-f8901de6a220.png)\n\n\nfunction code\u306b\u4e0b\u8a18\u306b\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5165\u529b\u3057\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u5185\u306e**\uff1c\u500b\u5225\u306e\u5024\uff1e**\u3068\u8a18\u8f09\u3057\u3066\u3044\u308b\u90e8\u5206\u306f\u3001myThings Developers\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304b\u3089\u53d6\u5f97\u3057\u305f\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u4e0b\u3055\u3044\u3002\n![function_code.png](https://qiita-image-store.s3.amazonaws.com/0/147237/11a056ae-ce52-b634-db8a-6b72601b548f.png)\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n```\n\nvar http = require(\"http\");\nvar https = require(\"https\");\n\n// \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u5b9f\u884cAPI\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u30db\u30b9\u30c8\u540d\u3068\u30d1\u30b9\nvar hostname = \"mythings-developers.yahooapis.jp\";\nvar path = \"/v2/services/\uff1c\u500b\u5225\u306e\u5024\uff1e/mythings/\uff1c\u500b\u5225\u306e\u5024\uff1e/run\";\n\n// \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3ID\nvar appid = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n// \u30b7\u30fc\u30af\u30ec\u30c3\u30c8\nvar secret = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n\n// \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\nvar accessToken = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n// \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\nvar refreshToken = \"\uff1c\u500b\u5225\u306e\u5024\uff1e\";\n\nexports.handler = function(event, context) {\n\n\t// \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306b\u8a2d\u5b9a\u3057\u305f\u30ad\u30fc\u540d\u3068\u5024\u3092\u6307\u5b9a\n\tvar postArgs = {\n\t\t\"key01\": event.message\n\t};\n\n\tvar postData = require(\"querystring\").stringify( {\n\t\t\t\"entry\": JSON.stringify(postArgs),\n\t});\n\n\t// \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306e\u5b9f\u884c\n\tpostRequestWithToken(hostname, path, accessToken, postData, refreshToken, appid, secret);\n};\n\n/**\n * postRequestWithToken\n *\n * @param string hostname myThings\u306e\u30db\u30b9\u30c8\n * @param string path \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u5b9f\u884cAPI\u306e\u30d1\u30b9\n * @param string accessToken \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\n * @param array postData POST\u30c7\u30fc\u30bf\n * @param string refreshToken \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\u3002\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u306f\u884c\u308f\u306a\u3044\n * @param string appid \u30a2\u30d7\u30ea\u30fc\u30b7\u30e7\u30f3ID\n * @param string secret secret\n */\nfunction postRequestWithToken(hostname, path, accessToken, postData, refreshToken, appid, secret)\n{\n\t// \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\u306e\u51e6\u7406\n\tif(typeof refreshToken === 'undefined') refreshToken = false;\n\tif(typeof appid === 'undefined') appid = false;\n\tif(typeof secret === 'undefined') secret = false;\n\n\t// curl\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a\n\tvar options = {\n\t\thostname: hostname,\n\t\tpath: path,\n\t\tport: 443,\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n\t\t\t\"Authorization\": \"Bearer \" + accessToken,\n\t\t},\n\t};\n\n\t// curl\u3067API\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3078\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\n\tvar req = https.request(options, function(res) {\n\t\t// 401\u8a8d\u8a3c\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u3066\u3044\u307e\u3059\n\t\tif(res.statusCode == 401) {\n\t\t\t// \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\u3067\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u66f4\u65b0\n\t\t\tif(refreshToken !== false) {\n\t\t\t\t// \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u66f4\u65b0\n\t\t\t\trefreshAccessToken(hostname, path, refreshToken, appid, secret, postData);\n\t\t\t}\n\t\t}\n\n\t\t// \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u51e6\u7406\n\t\tres.on('data', function(body){\n\t\t\tparseData = JSON.parse(body);\n\t\t\tconsole.log(parseData);\t\n\t\t\tif(typeof( parseData[\"flag\"] ) != \"undefined\")\n\t\t\t{\n\t\t\t\tvar msg = \"\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306e\u5b9f\u884c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u307e\u3057\u305f\u3002\";\n\t\t\t\tconsole.log(msg);\n\t\t\t}\n\t\t});\t\n\t})\n\t.on(\"error\", function(res) {\n\t\tconsole.error(\"\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306e\u5b9f\u884c\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u53d7\u4ed8\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\");\n\t});\n\n\t// POST\u30c7\u30fc\u30bf\u306e\u30ea\u30af\u30a8\u30b9\u30c8\n\treq.end(postData);\n}\n\n/**\n * refreshAccessToken\n *\n * @param string hostname myThings\u306e\u30db\u30b9\u30c8\n * @param string path \u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u5b9f\u884cAPI\u306e\u30d1\u30b9\n * @param string refreshToken \u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\n * @param string appid \u30a2\u30d7\u30ea\u30fc\u30b7\u30e7\u30f3ID\n * @param string secret secret\n */\nfunction refreshAccessToken(hostname, path, refreshToken, appid, secret, postDataWithToken)\n{\n\tvar postData = require(\"querystring\").stringify( {\n\t\t\"grant_type\": \"refresh_token\",\n\t\t\"refresh_token\": refreshToken\n\t});\n\n\t// \u30d9\u30fc\u30b8\u30c3\u30af\u8a8d\u8a3c\n\tvar buffer = new Buffer(appid + \":\" + secret, \"ascii\");\n\tvar options = {\n\t\thostname: \"auth.login.yahoo.co.jp\",\n\t\tpath: \"/yconnect/v1/token\",\n\t\tport: 443,\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n\t\t\t\"Authorization\": \"Basic \" + buffer.toString(\"base64\"),\n\t\t}\n\t};\n\n\t// curl\u3067API\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3078\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\n\tvar req = https.request(options, function(res) {\n\t\t// 401\u8a8d\u8a3c\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\u306e\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u3066\u3044\u307e\u3059\n\t\tif(res.statusCode == 401) {\n\t\t\tconsole.error(\"\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\u306e\u6709\u52b9\u671f\u9650\u304c\u5207\u308c\u307e\u3057\u305f\u3002myThings Developers\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304b\u3089\u30ea\u30d5\u30ec\u30c3\u30b7\u30e5\u30c8\u30fc\u30af\u30f3\u3092\u518d\u53d6\u5f97\u3057\u3066\u4e0b\u3055\u3044\u3002\");\n\t\t}\n\n\t\t// \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u51e6\u7406\n\t\tres.on('data', function(body){\n\t\t\tparseData = JSON.parse(body);\n\t\t\t// \u53d6\u5f97\u3057\u305f\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3067\u30ab\u30b9\u30bf\u30e0\u30c8\u30ea\u30ac\u30fc\u306e\u518d\u5b9f\u884c\n\t\t\tpostRequestWithToken(hostname, path, parseData['access_token'], postDataWithToken);\n\t\t});\t\n\t});\n\n\t// POST\u30c7\u30fc\u30bf\u306e\u30ea\u30af\u30a8\u30b9\u30c8\n\treq.end(postData);\n}\n\n```\n\nHander\u3092\u4e0b\u56f3\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\uff08\u521d\u671f\u8868\u793a\u304b\u3089\u5909\u66f4\u306a\u3057\uff09\nHander\u306e\u8a2d\u5b9a\u306f\u3001\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u4e0b\u8a18\u306e\u592a\u5b57\u90e8\u5206\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nexports.**handler** = function(event, context) {\n![handler.png](https://qiita-image-store.s3.amazonaws.com/0/147237/6f05abfa-e1e0-b262-e7d5-2785feef2654.png)\n\n\u3042\u3068\u306f\u6b21\u306e\u30da\u30fc\u30b8\u3078\u9077\u79fb\u3057\u3066\u3001**Create function**\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u7d42\u4e86\u3067\u3059\u3002\n\n## 2-3. Test\n\u6700\u5f8c\u306bfunction\u304c\u6b63\u3057\u304f\u52d5\u3044\u3066\u3044\u308b\u304b\u3092\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u753b\u9762\u3067**Test**\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001\n**Execution result: succeeded**\u3068\u8868\u793a\u3055\u308c\u3066\u3044\u308c\u3070\u5b9f\u884c\u6210\u529f\u3067\u3059\u3002\n![lambda_test.png](https://qiita-image-store.s3.amazonaws.com/0/147237/6297fee9-3dee-3b07-6742-96eeb21e8273.png)\n\n\u4ee5\u4e0a\u3067**AWS Lambda**\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n# 3. AWS IoT\u306e\u6e96\u5099\n## 3-1. AWS IoT\u306e\u9078\u629e\n\u30b5\u30fc\u30d3\u30b9\u304b\u3089**AWS IoT**\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n![AWS\u30b5\u30fc\u30d2\u3099\u30b9(IoT).png](https://qiita-image-store.s3.amazonaws.com/0/147237/47e48892-62b0-e048-7a86-f2c42e2aa6f4.png)\n\n## 3-2. Register a thing\nAWS IoT \u3092\u958b\u304f\u3068\u5de6\u306b\u30e1\u30cb\u30e5\u30fc\u304c\u3042\u308b\u753b\u9762\u304c\u958b\u304b\u308c\u307e\u3059\u3002\n\u30c7\u30d0\u30a4\u30b9\u3092\u7e4b\u3050\u305f\u3081\u306b\u307e\u305a\u306fthing\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u5de6\u30e1\u30cb\u30e5\u30fc\u306e**Register>Things**\u3092\u9078\u629e\u3057\u3001**Register a thing**\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u307e\u3059\u3002\n\n\u4e0b\u8a18\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u4eca\u56de\u306fName\u306b**RaspberryPi3**\u3068\u5165\u529b\u3057\u307e\u3059\u3002\n![register_a_thing.png](https://qiita-image-store.s3.amazonaws.com/0/147237/2fe99e3a-d587-1e5d-be4e-69385eb9ce81.png)\n\n## 3-3. Test\nPublish\u306b**sdk/test/Python**\u3092\u5165\u529b\u3057\u3001**Publish to topic**\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u30c6\u30b9\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u98db\u3073\u307e\u3059\u3002\nSlack\u306b\u3082\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u98db\u3093\u3067\u3044\u308b\u306e\u3067\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n![AWS_IoT_test.png](https://qiita-image-store.s3.amazonaws.com/0/147237/7e572f48-97e9-815b-192c-de55629066cc.png)\n\n\u4ee5\u4e0a\u3067**AWS IoT**\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n\n# 4. \u30e9\u30ba\u30d1\u30a4\u306e\u6e96\u5099\n## 4-1. SDK\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u30e9\u30ba\u30d1\u30a4\u3092\u8d77\u52d5\u3057\u3001\u30d6\u30e9\u30a6\u30b6\u3067AWS IoT\u306e\u30da\u30fc\u30b8\u3092\u958b\u304d\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u5148\u7a0b\u4f5c\u3063\u305fThings\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n![Things.png](https://qiita-image-store.s3.amazonaws.com/0/147237/d997e5fc-9e03-4041-8dee-17fedcc859ce.png)\n\n\u8868\u793a\u3055\u308c\u305f\u30da\u30fc\u30b8\u3067**Interact**\u3092\u9078\u629e\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u753b\u9762\u53f3\u4e0a\u306e**Connect a device**\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\u3042\u3068\u3067\u4f7f\u3046\u306e\u3067\u3001\u3053\u306e\u753b\u9762\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308bEndpoint(**XXXXX.amazonaws.com**)\u3092\u30b3\u30d4\u30fc\u3057\u3066\u304a\u3044\u3066\u4e0b\u3055\u3044\u3002\n![Things2.png](https://qiita-image-store.s3.amazonaws.com/0/147237/d459e1b2-e92f-0ccb-9210-d26afc7b7390.png)\n\n\u74b0\u5883\u3068\u8a00\u8a9e\u3092\u8a2d\u5b9a\u3059\u308b\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001\n**Linux/OSX > Python**\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\n\u9032\u3081\u3066\u3044\u304f\u3068\u3001\u4e0b\u8a18\u306e\u753b\u9762\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3067\u3001Download connection kit for\u306e\u4e0b\u306e**Linux/OSX**\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u3001ZIP\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n![Things4.png](https://qiita-image-store.s3.amazonaws.com/0/147237/d7b0ef38-3d40-1a39-6386-48c8befdb26b.png)\n\n\u6b21\u306e\u30da\u30fc\u30b8\u306e\u624b\u9806\u306b\u6cbf\u3063\u3066\u9032\u3081\u308b\u3068SDK\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5b8c\u4e86\u3057\u307e\u3059\u3002\n\n## 4-2. \u8a3c\u660e\u66f8\u306e\u6e96\u5099\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u52d5\u304b\u3059\u5834\u5408\u3001\u4e0b\u8a18\u306e\uff13\u3064\u306e\u8a3c\u660e\u66f8\u304c\u5fc5\u8981\u3067\u3059\u3002\n - RaspberryPi3.cert.pem\n - RaspberryPi3.private.key\n - rootCA.pem\n\nrootCA.pem\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\n```\ncurl https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem -o rootCA.pem\n```\n\n## 4-3. \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u4fee\u6b63\n\u4eca\u56de\u306f\u3001\u4e0b\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u304c\u3001Publish\u3059\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306fJSON\u5f62\u5f0f\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u4e00\u90e8\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3057\u307e\u3059\u3002\nhttps://github.com/aws/aws-iot-device-sdk-python/blob/master/samples/basicPubSub/basicPubSub.py\n\n\u4fee\u6b63\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n```\n\n'''\n/*\n * Copyright 2010-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\").\n * You may not use this file except in compliance with the License.\n * A copy of the License is located at\n *\n *  http://aws.amazon.com/apache2.0\n *\n * or in the \"license\" file accompanying this file. This file is distributed\n * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n * express or implied. See the License for the specific language governing\n * permissions and limitations under the License.\n */\n '''\n\nfrom AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\nimport sys\nimport logging\nimport time\nimport getopt\nimport json\n\n# Custom MQTT message callback\ndef customCallback(client, userdata, message):\n\tprint(\"Received a new message: \")\n\tprint(message.payload)\n\tprint(\"from topic: \")\n\tprint(message.topic)\n\tprint(\"--------------\\n\\n\")\n\n# Usage\nusageInfo = \"\"\"Usage:\nUse certificate based mutual authentication:\npython basicPubSub.py -e <endpoint> -r <rootCAFilePath> -c <certFilePath> -k <privateKeyFilePath>\nUse MQTT over WebSocket:\npython basicPubSub.py -e <endpoint> -r <rootCAFilePath> -w\nType \"python basicPubSub.py -h\" for available options.\n\"\"\"\n# Help info\nhelpInfo = \"\"\"-e, --endpoint\n\tYour AWS IoT custom endpoint\n-r, --rootCA\n\tRoot CA file path\n-c, --cert\n\tCertificate file path\n-k, --key\n\tPrivate key file path\n-w, --websocket\n\tUse MQTT over WebSocket\n-h, --help\n\tHelp information\n\"\"\"\n\n# Read in command-line parameters\nuseWebsocket = False\nhost = \"\"\nrootCAPath = \"\"\ncertificatePath = \"\"\nprivateKeyPath = \"\"\ntry:\n\topts, args = getopt.getopt(sys.argv[1:], \"hwe:k:c:r:\", [\"help\", \"endpoint=\", \"key=\",\"cert=\",\"rootCA=\", \"websocket\"])\n\tif len(opts) == 0:\n\t\traise getopt.GetoptError(\"No input parameters!\")\n\tfor opt, arg in opts:\n\t\tif opt in (\"-h\", \"--help\"):\n\t\t\tprint(helpInfo)\n\t\t\texit(0)\n\t\tif opt in (\"-e\", \"--endpoint\"):\n\t\t\thost = arg\n\t\tif opt in (\"-r\", \"--rootCA\"):\n\t\t\trootCAPath = arg\n\t\tif opt in (\"-c\", \"--cert\"):\n\t\t\tcertificatePath = arg\n\t\tif opt in (\"-k\", \"--key\"):\n\t\t\tprivateKeyPath = arg\n\t\tif opt in (\"-w\", \"--websocket\"):\n\t\t\tuseWebsocket = True\nexcept getopt.GetoptError:\n\tprint(usageInfo)\n\texit(1)\n\n# Missing configuration notification\nmissingConfiguration = False\nif not host:\n\tprint(\"Missing '-e' or '--endpoint'\")\n\tmissingConfiguration = True\nif not rootCAPath:\n\tprint(\"Missing '-r' or '--rootCA'\")\n\tmissingConfiguration = True\nif not useWebsocket:\n\tif not certificatePath:\n\t\tprint(\"Missing '-c' or '--cert'\")\n\t\tmissingConfiguration = True\n\tif not privateKeyPath:\n\t\tprint(\"Missing '-k' or '--key'\")\n\t\tmissingConfiguration = True\nif missingConfiguration:\n\texit(2)\n\n# Configure logging\nlogger = logging.getLogger(\"AWSIoTPythonSDK.core\")\nlogger.setLevel(logging.DEBUG)\nstreamHandler = logging.StreamHandler()\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nstreamHandler.setFormatter(formatter)\nlogger.addHandler(streamHandler)\n\n# Init AWSIoTMQTTClient\nmyAWSIoTMQTTClient = None\nif useWebsocket:\n\tmyAWSIoTMQTTClient = AWSIoTMQTTClient(\"basicPubSub\", useWebsocket=True)\n\tmyAWSIoTMQTTClient.configureEndpoint(host, 443)\n\tmyAWSIoTMQTTClient.configureCredentials(rootCAPath)\nelse:\n\tmyAWSIoTMQTTClient = AWSIoTMQTTClient(\"basicPubSub\")\n\tmyAWSIoTMQTTClient.configureEndpoint(host, 8883)\n\tmyAWSIoTMQTTClient.configureCredentials(rootCAPath, privateKeyPath, certificatePath)\n\n# AWSIoTMQTTClient connection configuration\nmyAWSIoTMQTTClient.configureAutoReconnectBackoffTime(1, 32, 20)\nmyAWSIoTMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing\nmyAWSIoTMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz\nmyAWSIoTMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec\nmyAWSIoTMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec\n\n# Connect and subscribe to AWS IoT\nmyAWSIoTMQTTClient.connect()\nmyAWSIoTMQTTClient.subscribe(\"sdk/test/Python\", 1, customCallback)\ntime.sleep(2)\n\n# Publish to the same topic in a loop forever\nloopCount = 0\nwhile True:\n\tjson_data = {'message' : \"New Message \" + str(loopCount)}\n\tmyAWSIoTMQTTClient.publish(\"sdk/test/Python\", json.dumps(json_data), 1)\n\tloopCount += 1\n\ttime.sleep(1)\n\n```\n\n\u4ee5\u4e0a\u3067**\u30e9\u30ba\u30d1\u30a4**\u306e\u6e96\u5099\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n\n# 5. \u52d5\u304b\u3057\u3066\u307f\u308b\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u52d5\u304b\u3059\u30681\u79d2\u9593\u9694\u3067Slack\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6295\u7a3f\u3055\u308c\u307e\u3059\u3002\n\n```\npython aws-iot-device-sdk-python/samples/basicPubSub/basicPubSub.py -e XXXXX.amazonaws.com -r rootCA.pem -c RaspberryPi3.cert.pem -k RaspberryPi3.private.key\n```\n\n10\u79d2\u9593\u52d5\u304b\u3059\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306bSlack\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6295\u7a3f\u3055\u308c\u307e\u3059\u3002\n![Slack_send.png](https://qiita-image-store.s3.amazonaws.com/0/147237/9d2d740a-6d8a-1765-c94d-adb81defe338.png)\n\n\u4ee5\u4e0a\u3067\u30c7\u30d0\u30a4\u30b9\uff08\u30e9\u30ba\u30d1\u30a4\uff09\u304b\u3089myThings Developers\u3092\u7d4c\u7531\u3057\u3066\u306eSlack\u3078\u306e\u6295\u7a3f\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n\n# \u53c2\u8003\u8a18\u4e8b\n - [AWS IoT Device SDK for Python\u3092RaspberryPi\u3067\u52d5\u304b\u3059](http://qiita.com/YamauchiHideki/items/13e1e6a28d4b71f7d159)\n\n\n[mlink]:https://mythings-developers.yahoo.co.jp\n[alink]:https://aws.amazon.com/jp/iot/\n[llink]:https://aws.amazon.com/jp/lambda/\n[rlink]:https://www.raspberrypi.org/products/raspberry-pi-3-model-b/\n[tlink]:https://mythings-developers.yahoo.co.jp/document/tutorial_section1\n", "tags": ["myThingsDevelopers", "RaspberryPi", "awsIoT", "AWSLambda"]}