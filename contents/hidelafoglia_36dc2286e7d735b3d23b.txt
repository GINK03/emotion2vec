{"context": " More than 1 year has passed since last update.\n\nWebContentView\nusing Foundation;\nusing System;\nusing System.CodeDom.Compiler;\nusing UIKit;\nusing ObjCRuntime;\n\n\nnamespace PhonePop\n{\n    partial class WebContentView : UIView\n    {\n        const string NibName = \"WebContentView\";\n\n        public UIWebView Html {get { return ContentHtml; }}\n\n        public WebContentView (IntPtr handle) : base (handle)\n        {\n        }\n\n        public static WebContentView Factory()\n        {\n            var arr = NSBundle.MainBundle.LoadNib (NibName, null, null);\n            return Runtime.GetNSObject<WebContentView> (arr.ValueAt(0));\n        }\n    }\n}\n\n\nWebContentViewController\nusing System;\n\nusing UIKit;\n\nusing Foundation;\nusing ObjCRuntime;\n\nnamespace PhonePop\n{\n    public partial class WebContentViewController : UIViewController\n    {\n        WebContentView HtmlView { get;set; }\n\n        public WebContentViewController () : base (\"WebContentViewController\", null)\n        {\n        }\n\n        public override void ViewDidLoad ()\n        {\n            base.ViewDidLoad ();\n            // Perform any additional setup after loading the view, typically from a nib.\n\n            HtmlView = WebContentView.Factory();\n            HtmlView.Frame = View.Frame;\n            View.AddSubview (HtmlView);\n\n            SetupHtml ();\n\n        }\n\n        void SetupHtml()\n        {\n            var dialog_delegete  = new MyWebView ();\n            dialog_delegete.OnNavigating += (\n                object sender,\n                NSUrlRequest request,\n                UIWebViewNavigationType naviType) => {\n                if (request.Url.AbsoluteString.IndexOf (\"close\") >= 0) {\n                    this.DismissViewController (true, () => {});\n                }\n            };\n\n            HtmlView.Html.Delegate = dialog_delegete;\n\n            string contentDirectoryPath =\n                System.IO.Path.Combine (NSBundle.MainBundle.BundlePath, \"\");\n\n            string htmml = @\"<html><body><a href=\"\"#close\"\">Close</a></body></html>\";\n\n            HtmlView.Html.LoadHtmlString(htmml,\n                new NSUrl(contentDirectoryPath, true));\n        }\n\n        public  class MyWebView : UIWebViewDelegate\n        {\n            public delegate void OnNavigatingEvent(\n                object sender, NSUrlRequest request,UIWebViewNavigationType naviType );\n            public event OnNavigatingEvent OnNavigating;\n            public bool ForceLoading {get;set; } = true;\n\n            public override bool ShouldStartLoad (\n                    UIWebView webView, NSUrlRequest request,\n                    UIWebViewNavigationType navigationType)\n            {\n                if (OnNavigating != null) {\n                    OnNavigating (webView, request, navigationType);\n                }\n\n                return ForceLoading;\n            }\n        }\n    }\n}\n\n\n\n## WebContentView\n\n~~~csharp\nusing Foundation;\nusing System;\nusing System.CodeDom.Compiler;\nusing UIKit;\nusing ObjCRuntime;\n\n\nnamespace PhonePop\n{\n\tpartial class WebContentView : UIView\n\t{\n\t\tconst string NibName = \"WebContentView\";\n\n\t\tpublic UIWebView Html {get { return ContentHtml; }}\n\n\t\tpublic WebContentView (IntPtr handle) : base (handle)\n\t\t{\n\t\t}\n\n\t\tpublic static WebContentView Factory()\n\t\t{\n\t\t\tvar arr = NSBundle.MainBundle.LoadNib (NibName, null, null);\n\t\t\treturn Runtime.GetNSObject<WebContentView> (arr.ValueAt(0));\n\t\t}\n\t}\n}\n~~~\n\n## WebContentViewController\n\n~~~csharp\nusing System;\n\nusing UIKit;\n\nusing Foundation;\nusing ObjCRuntime;\n\nnamespace PhonePop\n{\n\tpublic partial class WebContentViewController : UIViewController\n\t{\n\t\tWebContentView HtmlView { get;set; }\n\n\t\tpublic WebContentViewController () : base (\"WebContentViewController\", null)\n\t\t{\n\t\t}\n\n\t\tpublic override void ViewDidLoad ()\n\t\t{\n\t\t\tbase.ViewDidLoad ();\n\t\t\t// Perform any additional setup after loading the view, typically from a nib.\n\n\t\t\tHtmlView = WebContentView.Factory();\n\t\t\tHtmlView.Frame = View.Frame;\n\t\t\tView.AddSubview (HtmlView);\n\n\t\t\tSetupHtml ();\n\n\t\t}\n\n\t\tvoid SetupHtml()\n\t\t{\n\t\t\tvar dialog_delegete  = new MyWebView ();\n\t\t\tdialog_delegete.OnNavigating += (\n\t\t\t\tobject sender,\n\t\t\t\tNSUrlRequest request,\n\t\t\t\tUIWebViewNavigationType naviType) => {\n\t\t\t\tif (request.Url.AbsoluteString.IndexOf (\"close\") >= 0) {\n\t\t\t\t\tthis.DismissViewController (true, () => {});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tHtmlView.Html.Delegate = dialog_delegete;\n\n\t\t\tstring contentDirectoryPath =\n\t\t\t\tSystem.IO.Path.Combine (NSBundle.MainBundle.BundlePath, \"\");\n\n\t\t\tstring htmml = @\"<html><body><a href=\"\"#close\"\">Close</a></body></html>\";\n\n\t\t\tHtmlView.Html.LoadHtmlString(htmml,\n\t\t\t\tnew NSUrl(contentDirectoryPath, true));\n\t\t}\n\n\t\tpublic  class MyWebView : UIWebViewDelegate\n\t\t{\n\t\t\tpublic delegate void OnNavigatingEvent(\n\t\t\t\tobject sender, NSUrlRequest request,UIWebViewNavigationType naviType );\n\t\t\tpublic event OnNavigatingEvent OnNavigating;\n\t\t\tpublic bool ForceLoading {get;set; } = true;\n\n\t\t\tpublic override bool ShouldStartLoad (\n\t\t\t\t\tUIWebView webView, NSUrlRequest request,\n\t\t\t\t\tUIWebViewNavigationType navigationType)\n\t\t\t{\n\t\t\t\tif (OnNavigating != null) {\n\t\t\t\t\tOnNavigating (webView, request, navigationType);\n\t\t\t\t}\n\n\t\t\t\treturn ForceLoading;\n\t\t\t}\n\t\t}\n\t}\n}\n~~~\n", "tags": ["iOS", "Xamarin"]}