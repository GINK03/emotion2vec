{"context": " More than 1 year has passed since last update.\n\n\u76ee\u7684\nReactive Extensions\u306b\u304a\u3044\u3066\u3001\u7279\u5b9a\u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u5024\u3092\u307e\u3068\u3081\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u3002\nRxJava\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001Kotlin\u306b\u3088\u308b\u5b9f\u88c5\u3067\u3059\u3002\n\n\u30b3\u30fc\u30c9\nRxJava\u3067\u306fObservable\u30e1\u30bd\u30c3\u30c9\u306fOperator\u3092\u4f5c\u6210\u3057\u305d\u308c\u3092lift\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3057\u307e\u3059\u3002\npackage rx\n\nimport rx.Observable.Operator\nimport java.util.ArrayList\n\npublic fun <T> Observable<T>.bufferUntil(condition: (T) -> Boolean): Observable<List<T>> =\n        lift(OperatorBufferWithCondition<T>(condition))\n\npublic class OperatorBufferWithCondition<T>(private val condition: (T) -> Boolean) :\n        Operator<List<T>, T> {\n\n    public override fun call(child: Subscriber<in List<T>>): Subscriber<in T> {\n        return object : Subscriber<T>(child) {\n\n            var buffer: ArrayList<T>? = null\n\n            override fun onNext(t: T) {\n                if (buffer == null) {\n                    buffer = ArrayList<T>()\n                }\n                buffer?.add(t)\n                if (condition(t)) {\n                    val oldBuffer: List<T>? = buffer\n                    buffer = null\n                    child.onNext(oldBuffer)\n                }\n            }\n\n            override fun onError(e: Throwable) {\n                buffer = null\n                child.onError(e)\n            }\n\n            override fun onCompleted() {\n                val oldBuffer: List<T>? = buffer\n                buffer = null\n                if (oldBuffer != null) {\n                    try {\n                        child.onNext(oldBuffer)\n                    } catch (t: Throwable) {\n                        child.onError(t)\n                        return\n                    }\n                }\n                child.onCompleted()\n            }\n        }\n    }\n}\n\n\n\u4f7f\u7528\u4f8b\nKotlin\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u6a5f\u80fd\u306b\u3088\u308a\u3001\u3042\u305f\u304b\u3082\u5143\u304b\u3089Observable\u306b\u3042\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u3088\u3046\u306b\u4f7f\u3048\u307e\u3059\u3002\n\nObservable.from(listOf(\"Kotlin\", \"\u304b\u308f\u3044\u3044\", \"!\", \"\u6700\u9ad8\", \"!\"))\n            .bufferUntil { it == \"!\" }\n            .subscribe {\n                for (word in it) {\n                    System.out.print(word)\n                }\n                System.out.println()\n            }\n// > Kotlin\u304b\u308f\u3044\u3044!\n// > \u6700\u9ad8!\n\n\n\n\u7d42\u308f\u308a\u306b\n\u308f\u3056\u308f\u3056Operator\u3092\u5b9a\u7fa9\u3057\u306a\u304f\u3066\u3082Rx\u65e2\u5b58\u306e\u6a5f\u80fd\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u5b9f\u73fe\u3067\u304d\u308b\u6c17\u304c\u3057\u3066\u306a\u308a\u307e\u305b\u3093\u3002\n\u8a73\u3057\u3044\u65b9\u306f\u30b3\u30e1\u30f3\u30c8\u3067\u6559\u3048\u3066\u304f\u308c\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\nKotlin\u306f \u304b\u308f\u3044\u3044 \u7d20\u6674\u3089\u3057\u3044\u8a00\u8a9e\u306a\u306e\u3067\u3001Java\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u7686\u3055\u3093\u306f\u662f\u975e\u4e00\u5ea6\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n## \u76ee\u7684\n\nReactive Extensions\u306b\u304a\u3044\u3066\u3001\u7279\u5b9a\u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u5024\u3092\u307e\u3068\u3081\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u3002\nRxJava\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001Kotlin\u306b\u3088\u308b\u5b9f\u88c5\u3067\u3059\u3002\n\n## \u30b3\u30fc\u30c9\n\nRxJava\u3067\u306fObservable\u30e1\u30bd\u30c3\u30c9\u306fOperator\u3092\u4f5c\u6210\u3057\u305d\u308c\u3092lift\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3057\u307e\u3059\u3002\n\n```kotlin\npackage rx\n\nimport rx.Observable.Operator\nimport java.util.ArrayList\n\npublic fun <T> Observable<T>.bufferUntil(condition: (T) -> Boolean): Observable<List<T>> =\n        lift(OperatorBufferWithCondition<T>(condition))\n\npublic class OperatorBufferWithCondition<T>(private val condition: (T) -> Boolean) :\n        Operator<List<T>, T> {\n\n    public override fun call(child: Subscriber<in List<T>>): Subscriber<in T> {\n        return object : Subscriber<T>(child) {\n\n            var buffer: ArrayList<T>? = null\n\n            override fun onNext(t: T) {\n                if (buffer == null) {\n                    buffer = ArrayList<T>()\n                }\n                buffer?.add(t)\n                if (condition(t)) {\n                    val oldBuffer: List<T>? = buffer\n                    buffer = null\n                    child.onNext(oldBuffer)\n                }\n            }\n\n            override fun onError(e: Throwable) {\n                buffer = null\n                child.onError(e)\n            }\n\n            override fun onCompleted() {\n                val oldBuffer: List<T>? = buffer\n                buffer = null\n                if (oldBuffer != null) {\n                    try {\n                        child.onNext(oldBuffer)\n                    } catch (t: Throwable) {\n                        child.onError(t)\n                        return\n                    }\n                }\n                child.onCompleted()\n            }\n        }\n    }\n}\n```\n\n## \u4f7f\u7528\u4f8b\n\nKotlin\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u6a5f\u80fd\u306b\u3088\u308a\u3001\u3042\u305f\u304b\u3082\u5143\u304b\u3089Observable\u306b\u3042\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u3088\u3046\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n```kotlin\n\nObservable.from(listOf(\"Kotlin\", \"\u304b\u308f\u3044\u3044\", \"!\", \"\u6700\u9ad8\", \"!\"))\n            .bufferUntil { it == \"!\" }\n            .subscribe {\n                for (word in it) {\n                    System.out.print(word)\n                }\n                System.out.println()\n            }\n// > Kotlin\u304b\u308f\u3044\u3044!\n// > \u6700\u9ad8!\n\n```\n\n## \u7d42\u308f\u308a\u306b\n\n\u308f\u3056\u308f\u3056Operator\u3092\u5b9a\u7fa9\u3057\u306a\u304f\u3066\u3082Rx\u65e2\u5b58\u306e\u6a5f\u80fd\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u5b9f\u73fe\u3067\u304d\u308b\u6c17\u304c\u3057\u3066\u306a\u308a\u307e\u305b\u3093\u3002\n\u8a73\u3057\u3044\u65b9\u306f\u30b3\u30e1\u30f3\u30c8\u3067\u6559\u3048\u3066\u304f\u308c\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\u3002\n\nKotlin\u306f ~~\u304b\u308f\u3044\u3044~~ \u7d20\u6674\u3089\u3057\u3044\u8a00\u8a9e\u306a\u306e\u3067\u3001Java\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u7686\u3055\u3093\u306f\u662f\u975e\u4e00\u5ea6\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["ReactiveExtensions", "RxJava", "Kotlin"]}