{"context": " More than 1 year has passed since last update.GPGPU Advent Calendar24\u65e5\u76ee\u3067\u3059\uff01\u30a4\u30d6\u306e\u91cd\u8981\u306a\u65e5\u306b\u79c1\u306a\u3093\u304b\u3067\u3044\u3044\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\u4eca\u65e5\u306f\u3001\u524d\u56de\u66f8\u3044\u305f\u901a\u308a\u3001cuSPARSE\u306e\u8a71\u3092\u3057\u307e\u3059\u3002\ncuSPARSE\u3068\u306f\u3001CUDA\u7528\u306e\u758e\u884c\u5217\u8a08\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4f7f\u3044\u65b9\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3082\u3089\u3046\u306e\u304c\u4e00\u756a\u65e9\u3044\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u79c1\u306f\u82e5\u5e72\u3064\u307e\u3065\u3044\u305f\u306e\u3067\u3001\u3053\u3053\u306b\u300c\u758e\u884c\u5217\u00d7\u30d9\u30af\u30c8\u30eb\u300d\u306e\u6f14\u7b97\u3092\u5b9f\u884c\u3059\u308b\u307e\u3067\u306e\u7c21\u5358\u306a\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3063\u307d\u3044\u3053\u3068\u3092\u66f8\u304d\u307e\u3059\u3002\n\n\u5168\u6587\n\u3068\u3001\u7d30\u304b\u304f\u66f8\u3044\u3066\u304f\u3068\u5927\u5909\u306a\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u306e\u3067\u3001\u5168\u90e8\u30b3\u30fc\u30c9\uff0b\u30b3\u30e1\u30f3\u30c8\u3067\u66f8\u304d\u307e\u3059\uff01\u624b\u629c\u304d\u3058\u3083\u306a\u3044\u3088\uff01\uff01\n\nCsrMV.cpp\n#include<iostream>\n#include<cuda_runtime_api.h>\n#include<cublas_v2.h>\n#include<cusparse_v2.h>\n#include<thrust/device_vector.h>\n\nconst int N = 1024;\n\nint main()\n{\n    /**********************************/\n    /********** \u5165\u529b\u5024\u306e\u6e96\u5099 **********/\n    /**********************************/\n\n    // CSR\u5f62\u5f0f\u758e\u884c\u5217\u306e\u30c7\u30fc\u30bf\n    //* \u8981\u7d20\u306e\u5024\n    //* \u5217\u756a\u53f7\n    //* \u5404\u884c\u306e\u5148\u982d\u4f4d\u7f6e\n    double elements[N*3];\n    int columnIndeces[N*3];\n    int rowOffsets[N+1]\n\n    // \u4e2d\u592e\u5dee\u5206\u884c\u5217\u3092\u6e96\u5099\u3059\u308b\n    //\uff08\u5bfe\u89d2\u9805\u304c2\u3067\u305d\u306e\u96a3\u304c1\u306b\u306a\u308b\u3001\u2193\u3053\u3093\u306a\u3084\u3064\uff09\n    // | 2 1 0 0 0 0 0 0 \u30fb\u30fb\u30fb 0 0 0|\n    // | 1 2 1 0 0 0 0 0 \u30fb\u30fb\u30fb 0 0 0|\n    // | 0 1 2 1 0 0 0 0 \u30fb\u30fb\u30fb 0 0 0|\n    // | 0 0 1 2 1 0 0 0 \u30fb\u30fb\u30fb 0 0 0|\n    // | 0 0 0 1 2 1 0 0 \u30fb\u30fb\u30fb 0 0 0|\n    // | 0 0 0 0 1 2 1 0 \u30fb\u30fb\u30fb 0 0 0|\n    // | 0 0 0 0 0 1 2 1 \u30fb\u30fb\u30fb 0 0 0|\n    // | 0 0 0 0 0 0 1 2 \u30fb\u30fb\u30fb 0 0 0|\n    // | 0 0 0 0 0 0 0 0 \u30fb\u30fb\u30fb 2 1 0|\n    // | 0 0 0 0 0 0 0 0 \u30fb\u30fb\u30fb 1 2 1|\n    // | 0 0 0 0 0 0 0 0 \u30fb\u30fb\u30fb 0 1 2|\n    int nonZeroCount = 0;\n    rowOffsets[0] = 0;\n    for(int i = 0; i < N; i++)\n    {\n        // \u5bfe\u89d2\u9805\n        elements[nonZeroCount] = 2;\n        columnIndeces[nonZeroCount] = i;\n        nonZeroCount++;\n\n        // \u5bfe\u89d2\u9805\u306e\u5de6\u96a3\n        if(i > 0)\n        {\n            elements[nonZeroCount] = 1;\n            columnIndeces[nonZeroCount] = i - 1;\n            nonZeroCount++;\n        }\n\n        // \u5bfe\u89d2\u9805\u306e\u53f3\u96a3\n        if(i < N-1)\n        {\n            elements[nonZeroCount] = 1;\n            columnIndeces[nonZeroCount] = i + 1;\n            nonZeroCount++;\n        }\n\n        // \u6b21\u306e\u884c\u306e\u5148\u982d\u4f4d\u7f6e\n        rowOffsets[i+1] = nonZeroCount;\n    }\n\n    // \u304b\u3051\u308b\u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\n    double vector[N];\n    for(int i = 0; i < N; i++)\n    {\n        vector[i] = i * 0.1;\n    }\n\n    // \u7d50\u679c\u683c\u7d0d\u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\n    double result[N];\n\n    /**********************************/\n    /********** \u5165\u529b\u5024\u306e\u8ee2\u9001 **********/\n    /**********************************/\n    // GPU\u5074\u306e\u914d\u5217\u3092\u78ba\u4fdd\n    // \uff08\u30dd\u30a4\u30f3\u30bf\u7ba1\u7406\u304c\u9762\u5012\u306a\u306e\u3067thrust\u4f7f\u3046\u3068\u4fbf\u5229\uff01\uff09\n    thrust::device_vector<double> elementsDevice(N*3);\n    thrust::device_vector<int>    columnIndecesDevice(N*3);\n    thrust::device_vector<int>    rowOffsetsDevice(N+1);\n    thrust::device_vector<double> vectorDevice(N);\n    thrust::device_vector<double> resultDevice(N);\n\n    // GPU\u5074\u914d\u5217\u3078\u5165\u529b\u5024\uff08\u884c\u5217\u3068\u30d9\u30af\u30c8\u30eb\uff09\u3092\u8907\u88fd\n    thrust::copy_n(elements,      N*3, elementsDevice.begin());\n    thrust::copy_n(columnIndeces, N*3, columnIndecesDevice.begin());\n    thrust::copy_n(rowOffsets,    N+1, rowOffsetsDevice.begin());\n    thrust::copy_n(vector, N, vectorDevice.begin());\n\n\n\n    /************************************/\n    /********** cuSPARSE\u306e\u6e96\u5099 **********/\n    /************************************/\n    // cuSPARSE\u30cf\u30f3\u30c9\u30eb\u3092\u4f5c\u6210\n    ::cusparseHandle_t cusparse();\n    ::cusparseCreate(&cusparse);\n\n    // \u884c\u5217\u5f62\u5f0f\u3092\u4f5c\u6210\n    // * \u4e00\u822c\u7684\u306a\u5f62\u5f0f\n    // * \u756a\u53f7\u306f0\u304b\u3089\u958b\u59cb\n    ::cusparseMatDescr_t matDescr();\n    ::cusparseCreateMatDescr(&matDescr);\n    ::cusparseSetMatType(matDescr, CUSPARSE_MATRIX_TYPE_GENERAL);\n    ::cusparseSetMatIndexBase(matDescr, CUSPARSE_INDEX_BASE_ZERO);\n\n\n\n    /******************************************/\n    /********** \u884c\u5217\u00d7\u30d9\u30af\u30c8\u30eb\u306e\u8a08\u7b97 **********/\n    /******************************************/\n    // thrust\u914d\u5217\u304b\u3089CUDA\u7528\u30dd\u30a4\u30f3\u30bf\u306b\u5909\u63db\n    double* elementsPtr   = thrust::raw_pointer_cast(&(elementsDevice[0]));\n    int* columnIndecesPtr = thrust::raw_pointer_cast(&(columnIndecesDevice[0]));\n    int* rowOffsetsPtr    = thrust::raw_pointer_cast(&(rowOffsetsDevice[0]));\n    double* vectorPtr     = thrust::raw_pointer_cast(&(vectorDevice[0]));\n    double* resultPtr     = thrust::raw_pointer_cast(&(resultDevice[0]));\n\n    // Csrmv\uff08CSR\u5f62\u5f0f\u884c\u5217\u3068\u30d9\u30af\u30c8\u30eb\u306e\u7a4d\uff09\u3092\u5b9f\u884c\n    // y = \u03b1*Ax + \u03b2*y;\n    const double ALPHA = 1;\n    const double BETA = 0;\n    ::cusparseDcsrmv_v2(cusparse, CUSPARSE_OPERATION_NON_TRANSPOSE,\n        N, N, nonZeroCount,\n        &ALPHA, matDescr, elementsPtr, rowOffsetsPtr, columnIndecesPtr,\n        vectorPtr,\n        &BETA, resultPtr);\n\n\n\n    /************************************/\n    /********** \u8a08\u7b97\u7d50\u679c\u3092\u53d6\u5f97 **********/\n    /************************************/\n    // GPU\u5074\u914d\u5217\u304b\u3089\u7d50\u679c\u3092\u8907\u88fd\n    thrust::copy_n(resultDevice.begin(), N, resultDevice);\n\n    // \u7d50\u679c\u306e\u8868\u793a\n    for(int i = 0; i < N; i++)\n    {\n        std::cout << result[i] << std::endl;\n    }\n\n\n    return 0;\n}\n\n\n\n\u611f\u60f3\n\n\nmatDescr\u3068\u304b\u3081\u3093\u3069\u304f\u3055\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\nBLAS\u3092\u8e0f\u8972\u3057\u3066\u3044\u308b\u3068\u306f\u3044\u3048\u3001y=\u03b1*Ax + \u03b2*y\u3063\u3066\u5f62\u5f0f\u306f\u3044\u3061\u3044\u3061\u3081\u3093\u3069\u304f\u3055\u3044\u3002\u3064\u3044\u3067\u306b\u8a00\u3046\u3068\u3001\u03b1\u3068\u03b2\u304c\u30dd\u30a4\u30f3\u30bf\u3058\u3083\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304b\u3089\u4e00\u65e6\u306a\u3093\u304b\u306e\u5b9a\u6570\u306b\u5165\u308c\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3082\u304c\u3081\u3093\u3069\u304f\u3055\u3044\u3002\n\u3067\u3082\u304a\u304b\u3052\u3067\u7d50\u69cb\u901f\u3044\u3002OpenCL\u3067\u306e\u758e\u884c\u5217\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3046\u3068ViennaCL\u304c\u3042\u308b\u304c\uff08\u524d\u306e\u6295\u7a3f\u3082\u898b\u3066\u306d\uff01\uff09\u3001\u305d\u308c\u3088\u308a2\u500d\u3050\u3089\u3044\u901f\u304b\u3063\u305f\u3002\nthrust\u304c\u3042\u308b\u304a\u304b\u3052\u3067\u5c11\u3057\u697d\u306b\u306a\u3063\u3066\u308b\u3002\u9023\u643a\u3082\u7c21\u5358\u3002\n\n\n\u304a\u308f\u308a\u306b\nGPGPU Advent Calender\u53c2\u52a0\u3057\u3066\u307f\u3066\u601d\u3063\u305f\u306e\u306f\u3001\u79c1\u307f\u305f\u3044\u306a\u8a08\u7b97\u5c4b\u3055\u3093\u3082\u3044\u308c\u3070\u3001CG\u3068\u304b\u753b\u50cf\u306e\u4eba\u3082\u3044\u3066\u3001\u30b9\u30d1\u30b3\u30f3\u306a\u4eba\u3082\u3044\u3066\u3001GPGPUer\u306b\u3082\u8272\u3005\u3044\u308b\u3093\u3060\u306a\u3041\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u6765\u5e74\u306f\uff08\u3042\u308b\u306e\u304b\uff1f\uff09\u3082\u3063\u3068\u4eba\u304c\u5897\u3048\u308b\u3068\u3044\u3044\u3067\u3059\u306d\uff01\uff01\uff08GPGPU\u52c9\u5f37\u4f1a\u3067\u5ba3\u4f1d\u3059\u308b\u306e\u304c\u3044\u3044\uff1f\uff09\n\u3055\u3066\u3001\u660e\u65e5\u306f\u30af\u30ea\u30b9\u30de\u30b9\u5f53\u65e5\u3067\u3059\u304c\u3001\u8ab0\u304c\u66f8\u304f\u306e\u3060\u308d\u3046\u30fb\u30fb\u30fb\uff1f\u304a\u697d\u3057\u307f\u306b\uff01\n[GPGPU Advent Calendar](http://atnd.org/events/34539)24\u65e5\u76ee\u3067\u3059\uff01\u30a4\u30d6\u306e\u91cd\u8981\u306a\u65e5\u306b\u79c1\u306a\u3093\u304b\u3067\u3044\u3044\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u4eca\u65e5\u306f\u3001[\u524d\u56de](http://qiita.com/items/3c2a80181a01c7f22e7f)\u66f8\u3044\u305f\u901a\u308a\u3001cuSPARSE\u306e\u8a71\u3092\u3057\u307e\u3059\u3002\ncuSPARSE\u3068\u306f\u3001CUDA\u7528\u306e\u758e\u884c\u5217\u8a08\u7b97\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4f7f\u3044\u65b9\u306f[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.nvidia.com/cuda/cusparse/index.html)\u3092\u898b\u3066\u3082\u3089\u3046\u306e\u304c\u4e00\u756a\u65e9\u3044\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u79c1\u306f\u82e5\u5e72\u3064\u307e\u3065\u3044\u305f\u306e\u3067\u3001\u3053\u3053\u306b\u300c\u758e\u884c\u5217\u00d7\u30d9\u30af\u30c8\u30eb\u300d\u306e\u6f14\u7b97\u3092\u5b9f\u884c\u3059\u308b\u307e\u3067\u306e\u7c21\u5358\u306a\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3063\u307d\u3044\u3053\u3068\u3092\u66f8\u304d\u307e\u3059\u3002\n\n## \u5168\u6587\n\u3068\u3001\u7d30\u304b\u304f\u66f8\u3044\u3066\u304f\u3068\u5927\u5909\u306a\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u306e\u3067\u3001\u5168\u90e8\u30b3\u30fc\u30c9\uff0b\u30b3\u30e1\u30f3\u30c8\u3067\u66f8\u304d\u307e\u3059\uff01\u624b\u629c\u304d\u3058\u3083\u306a\u3044\u3088\uff01\uff01\n\n```CsrMV.cpp\n#include<iostream>\n#include<cuda_runtime_api.h>\n#include<cublas_v2.h>\n#include<cusparse_v2.h>\n#include<thrust/device_vector.h>\n\nconst int N = 1024;\n\nint main()\n{\n\t/**********************************/\n\t/********** \u5165\u529b\u5024\u306e\u6e96\u5099 **********/\n\t/**********************************/\n\t\n\t// CSR\u5f62\u5f0f\u758e\u884c\u5217\u306e\u30c7\u30fc\u30bf\n\t//* \u8981\u7d20\u306e\u5024\n\t//* \u5217\u756a\u53f7\n\t//* \u5404\u884c\u306e\u5148\u982d\u4f4d\u7f6e\n\tdouble elements[N*3];\n\tint columnIndeces[N*3];\n\tint rowOffsets[N+1]\n\t\n\t// \u4e2d\u592e\u5dee\u5206\u884c\u5217\u3092\u6e96\u5099\u3059\u308b\n\t//\uff08\u5bfe\u89d2\u9805\u304c2\u3067\u305d\u306e\u96a3\u304c1\u306b\u306a\u308b\u3001\u2193\u3053\u3093\u306a\u3084\u3064\uff09\n\t// | 2 1 0 0 0 0 0 0 \u30fb\u30fb\u30fb 0 0 0|\n\t// | 1 2 1 0 0 0 0 0 \u30fb\u30fb\u30fb 0 0 0|\n\t// | 0 1 2 1 0 0 0 0 \u30fb\u30fb\u30fb 0 0 0|\n\t// | 0 0 1 2 1 0 0 0 \u30fb\u30fb\u30fb 0 0 0|\n\t// | 0 0 0 1 2 1 0 0 \u30fb\u30fb\u30fb 0 0 0|\n\t// | 0 0 0 0 1 2 1 0 \u30fb\u30fb\u30fb 0 0 0|\n\t// | 0 0 0 0 0 1 2 1 \u30fb\u30fb\u30fb 0 0 0|\n\t// | 0 0 0 0 0 0 1 2 \u30fb\u30fb\u30fb 0 0 0|\n\t// | 0 0 0 0 0 0 0 0 \u30fb\u30fb\u30fb 2 1 0|\n\t// | 0 0 0 0 0 0 0 0 \u30fb\u30fb\u30fb 1 2 1|\n\t// | 0 0 0 0 0 0 0 0 \u30fb\u30fb\u30fb 0 1 2|\n\tint nonZeroCount = 0;\n\trowOffsets[0] = 0;\n\tfor(int i = 0; i < N; i++)\n\t{\n\t\t// \u5bfe\u89d2\u9805\n\t\telements[nonZeroCount] = 2;\n\t\tcolumnIndeces[nonZeroCount] = i;\n\t\tnonZeroCount++;\n\t\t\n\t\t// \u5bfe\u89d2\u9805\u306e\u5de6\u96a3\n\t\tif(i > 0)\n\t\t{\n\t\t\telements[nonZeroCount] = 1;\n\t\t\tcolumnIndeces[nonZeroCount] = i - 1;\n\t\t\tnonZeroCount++;\n\t\t}\n\t\t\n\t\t// \u5bfe\u89d2\u9805\u306e\u53f3\u96a3\n\t\tif(i < N-1)\n\t\t{\n\t\t\telements[nonZeroCount] = 1;\n\t\t\tcolumnIndeces[nonZeroCount] = i + 1;\n\t\t\tnonZeroCount++;\n\t\t}\n\t\t\n\t\t// \u6b21\u306e\u884c\u306e\u5148\u982d\u4f4d\u7f6e\n\t\trowOffsets[i+1] = nonZeroCount;\n\t}\n\t\n\t// \u304b\u3051\u308b\u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\n\tdouble vector[N];\n\tfor(int i = 0; i < N; i++)\n\t{\n\t\tvector[i] = i * 0.1;\n\t}\n\t\n\t// \u7d50\u679c\u683c\u7d0d\u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\n\tdouble result[N];\n\t\n\t/**********************************/\n\t/********** \u5165\u529b\u5024\u306e\u8ee2\u9001 **********/\n\t/**********************************/\n\t// GPU\u5074\u306e\u914d\u5217\u3092\u78ba\u4fdd\n\t// \uff08\u30dd\u30a4\u30f3\u30bf\u7ba1\u7406\u304c\u9762\u5012\u306a\u306e\u3067thrust\u4f7f\u3046\u3068\u4fbf\u5229\uff01\uff09\n\tthrust::device_vector<double> elementsDevice(N*3);\n\tthrust::device_vector<int>    columnIndecesDevice(N*3);\n\tthrust::device_vector<int>    rowOffsetsDevice(N+1);\n\tthrust::device_vector<double> vectorDevice(N);\n\tthrust::device_vector<double> resultDevice(N);\n\t\n\t// GPU\u5074\u914d\u5217\u3078\u5165\u529b\u5024\uff08\u884c\u5217\u3068\u30d9\u30af\u30c8\u30eb\uff09\u3092\u8907\u88fd\n\tthrust::copy_n(elements,      N*3, elementsDevice.begin());\n\tthrust::copy_n(columnIndeces, N*3, columnIndecesDevice.begin());\n\tthrust::copy_n(rowOffsets,    N+1, rowOffsetsDevice.begin());\n\tthrust::copy_n(vector, N, vectorDevice.begin());\n\t\n\t\n\t\n\t/************************************/\n\t/********** cuSPARSE\u306e\u6e96\u5099 **********/\n\t/************************************/\n\t// cuSPARSE\u30cf\u30f3\u30c9\u30eb\u3092\u4f5c\u6210\n\t::cusparseHandle_t cusparse();\n\t::cusparseCreate(&cusparse);\n\t\n\t// \u884c\u5217\u5f62\u5f0f\u3092\u4f5c\u6210\n\t// * \u4e00\u822c\u7684\u306a\u5f62\u5f0f\n\t// * \u756a\u53f7\u306f0\u304b\u3089\u958b\u59cb\n\t::cusparseMatDescr_t matDescr();\n\t::cusparseCreateMatDescr(&matDescr);\n\t::cusparseSetMatType(matDescr, CUSPARSE_MATRIX_TYPE_GENERAL);\n\t::cusparseSetMatIndexBase(matDescr, CUSPARSE_INDEX_BASE_ZERO);\n\n\t\n\t\n\t/******************************************/\n\t/********** \u884c\u5217\u00d7\u30d9\u30af\u30c8\u30eb\u306e\u8a08\u7b97 **********/\n\t/******************************************/\n\t// thrust\u914d\u5217\u304b\u3089CUDA\u7528\u30dd\u30a4\u30f3\u30bf\u306b\u5909\u63db\n\tdouble* elementsPtr   = thrust::raw_pointer_cast(&(elementsDevice[0]));\n\tint* columnIndecesPtr = thrust::raw_pointer_cast(&(columnIndecesDevice[0]));\n\tint* rowOffsetsPtr    = thrust::raw_pointer_cast(&(rowOffsetsDevice[0]));\n\tdouble* vectorPtr     = thrust::raw_pointer_cast(&(vectorDevice[0]));\n\tdouble* resultPtr     = thrust::raw_pointer_cast(&(resultDevice[0]));\n\t\n\t// Csrmv\uff08CSR\u5f62\u5f0f\u884c\u5217\u3068\u30d9\u30af\u30c8\u30eb\u306e\u7a4d\uff09\u3092\u5b9f\u884c\n\t// y = \u03b1*Ax + \u03b2*y;\n\tconst double ALPHA = 1;\n\tconst double BETA = 0;\n\t::cusparseDcsrmv_v2(cusparse, CUSPARSE_OPERATION_NON_TRANSPOSE,\n\t\tN, N, nonZeroCount,\n\t\t&ALPHA, matDescr, elementsPtr, rowOffsetsPtr, columnIndecesPtr,\n\t\tvectorPtr,\n\t\t&BETA, resultPtr);\n\t\n\t\n\t\n\t/************************************/\n\t/********** \u8a08\u7b97\u7d50\u679c\u3092\u53d6\u5f97 **********/\n\t/************************************/\n\t// GPU\u5074\u914d\u5217\u304b\u3089\u7d50\u679c\u3092\u8907\u88fd\n\tthrust::copy_n(resultDevice.begin(), N, resultDevice);\n\t\n\t// \u7d50\u679c\u306e\u8868\u793a\n\tfor(int i = 0; i < N; i++)\n\t{\n\t\tstd::cout << result[i] << std::endl;\n\t}\n\t\n\t\n\treturn 0;\n}\n```\n## \u611f\u60f3\n* `matDescr`\u3068\u304b\u3081\u3093\u3069\u304f\u3055\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n* BLAS\u3092\u8e0f\u8972\u3057\u3066\u3044\u308b\u3068\u306f\u3044\u3048\u3001y=\u03b1*Ax + \u03b2*y\u3063\u3066\u5f62\u5f0f\u306f\u3044\u3061\u3044\u3061\u3081\u3093\u3069\u304f\u3055\u3044\u3002\u3064\u3044\u3067\u306b\u8a00\u3046\u3068\u3001\u03b1\u3068\u03b2\u304c\u30dd\u30a4\u30f3\u30bf\u3058\u3083\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304b\u3089\u4e00\u65e6\u306a\u3093\u304b\u306e\u5b9a\u6570\u306b\u5165\u308c\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3082\u304c\u3081\u3093\u3069\u304f\u3055\u3044\u3002\n* \u3067\u3082\u304a\u304b\u3052\u3067\u7d50\u69cb\u901f\u3044\u3002OpenCL\u3067\u306e\u758e\u884c\u5217\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3046\u3068ViennaCL\u304c\u3042\u308b\u304c\uff08[\u524d\u306e\u6295\u7a3f](http://qiita.com/items/5ff83fc1a196592af64d)\u3082\u898b\u3066\u306d\uff01\uff09\u3001\u305d\u308c\u3088\u308a2\u500d\u3050\u3089\u3044\u901f\u304b\u3063\u305f\u3002\n* thrust\u304c\u3042\u308b\u304a\u304b\u3052\u3067\u5c11\u3057\u697d\u306b\u306a\u3063\u3066\u308b\u3002\u9023\u643a\u3082\u7c21\u5358\u3002\n\n## \u304a\u308f\u308a\u306b\nGPGPU Advent Calender\u53c2\u52a0\u3057\u3066\u307f\u3066\u601d\u3063\u305f\u306e\u306f\u3001\u79c1\u307f\u305f\u3044\u306a\u8a08\u7b97\u5c4b\u3055\u3093\u3082\u3044\u308c\u3070\u3001CG\u3068\u304b\u753b\u50cf\u306e\u4eba\u3082\u3044\u3066\u3001\u30b9\u30d1\u30b3\u30f3\u306a\u4eba\u3082\u3044\u3066\u3001GPGPUer\u306b\u3082\u8272\u3005\u3044\u308b\u3093\u3060\u306a\u3041\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u6765\u5e74\u306f\uff08\u3042\u308b\u306e\u304b\uff1f\uff09\u3082\u3063\u3068\u4eba\u304c\u5897\u3048\u308b\u3068\u3044\u3044\u3067\u3059\u306d\uff01\uff01\uff08GPGPU\u52c9\u5f37\u4f1a\u3067\u5ba3\u4f1d\u3059\u308b\u306e\u304c\u3044\u3044\uff1f\uff09\n\n\u3055\u3066\u3001\u660e\u65e5\u306f\u30af\u30ea\u30b9\u30de\u30b9\u5f53\u65e5\u3067\u3059\u304c\u3001\u8ab0\u304c\u66f8\u304f\u306e\u3060\u308d\u3046\u30fb\u30fb\u30fb\uff1f\u304a\u697d\u3057\u307f\u306b\uff01\n", "tags": ["CUDA", "GPGPU", "Thrust", "BLAS"]}