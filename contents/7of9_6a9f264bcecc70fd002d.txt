{"context": " More than 1 year has passed since last update.\u81ea\u5206\u306e\u904e\u53bb\u30e1\u30e2\uff082014\u5e74\u3053\u308d)\u3088\u308a\n\nMicroZed (CPU: 666MHz\u52d5\u4f5c)\n\n\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3053\u3068 (return fval\u3092\u8ffd\u52a0)\u3067\u3001\u904e\u5ea6\u306eoptimization\u3092\u56de\u907f\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001O0 option\u3067\u3082O2 option\u3067\u3082\u540c\u3058\u7d50\u679c\u3068\u306a\u3063\u305f\u3002\n\u8a08\u6642\u306b\u306fclock_gettime()\u3092\u7528\u3044\u305f\u3002clock_gettime()\u306etime granularity\u306f2700ns\u7a0b\u5ea6\u306e\u3088\u3046\u3060\u300210000\u56de\u306e\u30eb\u30fc\u30d7\u306b\u3059\u308b\u3053\u3068\u3067\u3001granularity\u306e\u5f71\u97ff\u3092\u56de\u907f\u3057\u305f\u3002\n\nfloat\u578b > \u8db3\u3057\u7b9710000\u56de\nstatic float funcToBeTimed_floatAdd(void)\n{\n    int idx;\n    float fval = 0.0f;\n    for(idx=0; idx<kLoopNum; idx++) {\n        fval = fval + 1.001f;\n    }\n    return fval;\n}\n\non MicroZed: 17.1(usec) >> 1\u56de\u306e\u6f14\u7b97\u306f17.1(nsec)\n\nfloat\u578b > \u639b\u3051\u7b9710000\u56de\nstatic float funcToBeTimed_floatMulti(void)\n{\n    int idx;\n    float fval = 3.14f;\n    for(idx=0; idx<kLoopNum; idx++) {\n        fval = fval * 1.001f;\n    }\n    return fval;\n}\n\non MicroZed: 18.2(usec) >> 1\u56de\u306e\u6f14\u7b97\u306f18.2(nsec)\nfloat\u578b > \u5272\u308a\u7b9710000\u56de\nstatic float funcToBeTimed_floatDiv(void)\n{\n    int idx;\n    float fval = 3141590000000.00f;\n    for(idx=0; idx<kLoopNum; idx++) {\n        fval = fval / 1.001f;\n    }\n    return fval;\n}\n\non MicroZed: 33.2(usec) >> 1\u56de\u306e\u6f14\u7b97\u306f33.2(nsec)\n\n(\u8ffd\u8a18 2016\u5e741\u6708)\n\u8a08\u6642\u306e\u3084\u308a\u65b9\u306b\u3064\u3044\u3066Stackoverflow\u3067\u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u3044\u305f\u3060\u3044\u305f\u304c\u30ea\u30f3\u30af\u60c5\u5831\u3092\u5931\u5ff5\u3057\u305f\u3002\n\u81ea\u5206\u306e\u904e\u53bb\u30e1\u30e2\uff082014\u5e74\u3053\u308d)\u3088\u308a\n\n- MicroZed (CPU: 666MHz\u52d5\u4f5c)\n\n\u4e0b\u306e\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3053\u3068 (return fval\u3092\u8ffd\u52a0)\u3067\u3001\u904e\u5ea6\u306eoptimization\u3092\u56de\u907f\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001O0 option\u3067\u3082O2 option\u3067\u3082\u540c\u3058\u7d50\u679c\u3068\u306a\u3063\u305f\u3002\n \n\u8a08\u6642\u306b\u306fclock_gettime()\u3092\u7528\u3044\u305f\u3002clock_gettime()\u306etime granularity\u306f2700ns\u7a0b\u5ea6\u306e\u3088\u3046\u3060\u300210000\u56de\u306e\u30eb\u30fc\u30d7\u306b\u3059\u308b\u3053\u3068\u3067\u3001granularity\u306e\u5f71\u97ff\u3092\u56de\u907f\u3057\u305f\u3002\n\n### float\u578b > \u8db3\u3057\u7b9710000\u56de\n\n```\nstatic float funcToBeTimed_floatAdd(void)\n{\n    int idx;\n    float fval = 0.0f;\n    for(idx=0; idx<kLoopNum; idx++) {\n        fval = fval + 1.001f;\n    }\n    return fval;\n}\n```\n\non MicroZed: 17.1(usec) >> 1\u56de\u306e\u6f14\u7b97\u306f17.1(nsec)\n\n### float\u578b > \u639b\u3051\u7b9710000\u56de\n\n```\nstatic float funcToBeTimed_floatMulti(void)\n{\n    int idx;\n    float fval = 3.14f;\n    for(idx=0; idx<kLoopNum; idx++) {\n        fval = fval * 1.001f;\n    }\n    return fval;\n}\n```\n\non MicroZed: 18.2(usec) >> 1\u56de\u306e\u6f14\u7b97\u306f18.2(nsec)\n\n float\u578b > \u5272\u308a\u7b9710000\u56de\n\n```\nstatic float funcToBeTimed_floatDiv(void)\n{\n    int idx;\n    float fval = 3141590000000.00f;\n    for(idx=0; idx<kLoopNum; idx++) {\n        fval = fval / 1.001f;\n    }\n    return fval;\n}\n```\n\non MicroZed: 33.2(usec) >> 1\u56de\u306e\u6f14\u7b97\u306f33.2(nsec)\n\n### (\u8ffd\u8a18 2016\u5e741\u6708)\n\n\u8a08\u6642\u306e\u3084\u308a\u65b9\u306b\u3064\u3044\u3066Stackoverflow\u3067\u30a2\u30c9\u30d0\u30a4\u30b9\u3092\u3044\u305f\u3060\u3044\u305f\u304c\u30ea\u30f3\u30af\u60c5\u5831\u3092\u5931\u5ff5\u3057\u305f\u3002\n", "tags": ["petalinux", "microzed", "performance"]}