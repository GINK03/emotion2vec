{"context": " More than 1 year has passed since last update.\n\n\u554f\u984c\u3068\u4ed6\u306e\u65b9\u306e\u89e3\u7b54\n\u554f\u984c: \u56de\u6587\u57fa\u6570 \u301c \u6a2a\u3078\u306a 2014.1.10 \u53c2\u8003\u554f\u984c\n\u4ed6\u306e\u65b9\u306e\u89e3\u7b54: \u7b2c17\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c\n\n\u79c1\u306e\u89e3\u7b54 in Clojure\n(ns ord17ref\n  (:require [clojure.test :refer (deftest are run-tests)]))\n\n(defn- columns [b]\n  (fn f [i]\n    (if (zero? i) '()\n      (cons (mod i b) (f (quot i b))))))\n\n(defn solve [s]\n  (let [i (read-string s)\n        bs (for [b (range 2 i)\n                 :let [cs ((columns b) i)]\n                 :when (= cs (reverse cs))]\n               b)]\n    (if (empty? bs) \"-\" (apply str (interpose \",\" bs)))))\n\n(deftest solve-test\n  (are [i o] (= (solve i) o)\n    \"17301\" \"5,38,100,218,236,5766,17300\"    \n    \"2\" \"-\"    \n    \"1\" \"-\"    \n    \"3\" \"2\"    \n    \"4\" \"3\"    \n    \"5\" \"2,4\"    \n    \"6\" \"5\"    \n    \"10\" \"3,4,9\"    \n    \"101\" \"10,100\"    \n    \"1001\" \"10,25,76,90,142,1000\"    \n    \"10001\" \"10,24,30,42,80,100,136,10000\"    \n    \"1212\" \"22,100,201,302,403,605,1211\"    \n    \"123412\" \"62,100,205,215,30852,61705,123411\"    \n    \"5179\" \"5178\"    \n    \"4919\" \"4918\"    \n    \"5791\" \"5790\"    \n    \"5498\" \"2748,5497\"    \n    \"453\" \"150,452\"    \n    \"134\" \"66,133\"    \n    \"8489\" \"27,652,8488\"    \n    \"1234\" \"22,616,1233\"    \n    \"5497\" \"41,238,5496\"    \n    \"4763\" \"19,35,432,4762\"    \n    \"3974\" \"17,27,1986,3973\"    \n    \"3521\" \"44,55,502,3520\"    \n    \"5513\" \"20,38,53,148,5512\"    \n    \"8042\" \"23,29,60,4020,8041\"    \n    \"7442\" \"37,60,121,3720,7441\"    \n    \"4857\" \"25,1618,4856\"    \n    \"22843\" \"49,69,91,141,430,22842\"    \n    \"194823\" \"84,121,21646,64940,194822\"    \n    \"435697\" \"160,169,235,626,1822,435696\"    \n    \"142\" \"3,7,70,141\"    \n    \"886\" \"5,14,442,885\"    \n    \"3102\" \"7,65,93,140,281,516,1033,1550,3101\"    \n    \"17326\" \"11,28,99,105,8662,17325\"    \n    \"32982\" \"13,72,238,477,716,1433,5496,10993,16490,32981\"    \n    \"36\" \"5,8,11,17,35\"    \n    \"37\" \"6,36\"    \n    \"251\" \"8,250\"    \n    \"252\" \"5,10,17,20,27,35,41,62,83,125,251\"    \n    \"253\" \"12,14,22,252\"    \n    \"6643\" \"2,3,9,81,90,510,948,6642\"    \n    \"5040\" \"71,79,83,89,104,111,119,125,139,143,167,179,209,239,251,279,314,335,359,419,503,559,629,719,839,1007,1259,1679,2519,5039\"    \n    \"9240\" \"23,38,62,104,109,119,131,139,153,164,167,209,219,230,263,279,307,329,384,419,439,461,615,659,769,839,923,1154,1319,1539,1847,2309,3079,4619,9239\"))\n\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\nClojure 1.6.0\nuser=> (ns ord17ref)\nnil\nord17ref=> (require 'ord17ref :reload-all)\nnil\nord17ref=> (run-tests)\n\nTesting ord17ref\n\nRan 1 tests containing 45 assertions.\n0 failures, 0 errors.\n{:type :summary, :fail 0, :error 0, :pass 45, :test 1}\n\n\n\u89e3\u8aac\n(defn- columns [b]\n  (fn f [i]\n    (if (zero? i) '()\n      (cons (mod i b) (f (quot i b))))))\n\ncolumns \u306f, \u57fa\u6570 b \u3092\u4e0e\u3048\u308b\u3068\u300c\u6574\u6570 i \u3092\u4e0e\u3048\u308b\u3068, i \u3092\u57fa\u6570 b \u3067\u8868\u3057\u305f\u5834\u5408\u306e, \u5404\u6841\u306e\u6570\u5024\u3092\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u8fd4\u3059\u95a2\u6570\u300d\u3092\u8fd4\u3057\u307e\u3059.\n\u95a2\u6570 f \u306f, \u6570\u5024 i \u3092\u4e0e\u3048\u308b\u3068\u300ci \u3092 b \u3067\u5272\u3063\u305f\u5546\u3092, \u81ea\u8eab f \u306b\u4e0e\u3048\u3066\u5f97\u3089\u308c\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u300d\u306e\u5148\u982d\u306b\u300ci \u3092 b \u3067\u5272\u3063\u305f\u4f59\u308a\u300d\u3092\u4ed8\u52a0\u3057\u307e\u3059. i \u304c 0 \u306e\u6642\u306f\u7a7a\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059.\n\u3053\u308c\u3067\u57fa\u6570 b \u306e\u5834\u5408\u306e\u5404\u6841\u3092\u4e0b\u4f4d\u304b\u3089\u4e26\u3079\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u5f97\u3089\u308c\u307e\u3059.\n\u5229\u7528\u4f8b\u3067\u3059.\nord17ref=> ((columns 2) 10)\n(0 1 0 1)\nord17ref=> ((columns 3) 10)\n(1 0 1)\nord17ref=> ((columns 4) 10)\n(2 2)\nord17ref=> ((columns 5) 10)\n(0 2)\n\n\n(defn solve [s]\n  (let [i (read-string s)\n        bs (for [b (range 2 i)\n                 :let [cs ((columns b) i)]\n                 :when (= cs (reverse cs))]\n               b)]\n    (if (empty? bs) \"-\" (apply str (interpose \",\" bs)))))\n\n\u6587\u5b57\u5217\u3067\u4e0e\u3048\u3089\u308c\u305f\u6570\u5b57\u5217 s \u3092 (read-string ...) \u3067\u6570\u5024\u306b\u3057, i \u3068\u3057\u307e\u3059.\n\u57fa\u6570 b \u3092 2 \u304b\u3089 i - 1 \u306e\u7bc4\u56f2\u3067\u5909\u5316\u3055\u305b, \u305d\u306e\u5834\u5408\u306e i \u306e\u5404\u6841\u3092\u4e0b\u4f4d\u304b\u3089\u4e26\u3079\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092 cs \u3068\u3057\u307e\u3059.\ncs \u3068 (reverse cs) \u304c\u4e00\u81f4\u3059\u308b\u5834\u5408\u306f, \u57fa\u6570 b \u3092\u62bd\u51fa\u3057\u307e\u3059.\n\u62bd\u51fa\u3057\u305f\u57fa\u6570\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092 bs \u3068\u3057\u307e\u3059.\nbs \u304c\u7a7a\u306a\u3089 \"-\" \u3092\u8fd4\u3057, \u305d\u3046\u3067\u306a\u3051\u308c\u3070, (interpose \",\" ...) \u3067 \",\" \u3092\u9593\u306b\u631f\u3093\u3067,\n(apply str ...) \u3067\u6587\u5b57\u5217\u5316\u3057\u307e\u3059.\n\u5404\u90e8\u5206\u306f\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\nord17ref=> (read-string \"17301\")\n17301\n\nord17ref=> (for [b (range 2 17301) :let [cs ((columns b) 17301)] :when (= cs (reverse cs))] b)\n(5 38 100 218 236 5766 17300)\n\nord17ref=> (interpose \",\" '(5 38 100 218 236 5766 17300))\n(5 \",\" 38 \",\" 100 \",\" 218 \",\" 236 \",\" 5766 \",\" 17300)\n\nord17ref=> (apply str '(5 \",\" 38 \",\" 100 \",\" 218 \",\" 236 \",\" 5766 \",\" 17300))\n\"5,38,100,218,236,5766,17300\"\n\n## \u554f\u984c\u3068\u4ed6\u306e\u65b9\u306e\u89e3\u7b54\n\n\u554f\u984c: [\u56de\u6587\u57fa\u6570 \u301c \u6a2a\u3078\u306a 2014.1.10 \u53c2\u8003\u554f\u984c](http://nabetani.sakura.ne.jp/hena/ord17scheherazade/)\n\u4ed6\u306e\u65b9\u306e\u89e3\u7b54: [\u7b2c17\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c](http://qiita.com/Nabetani/items/dabe8ec57e0313229552)\n\n## \u79c1\u306e\u89e3\u7b54 in Clojure\n\n```clojure\n(ns ord17ref\n  (:require [clojure.test :refer (deftest are run-tests)]))\n\n(defn- columns [b]\n  (fn f [i]\n    (if (zero? i) '()\n      (cons (mod i b) (f (quot i b))))))\n\n(defn solve [s]\n  (let [i (read-string s)\n        bs (for [b (range 2 i)\n                 :let [cs ((columns b) i)]\n                 :when (= cs (reverse cs))]\n               b)]\n    (if (empty? bs) \"-\" (apply str (interpose \",\" bs)))))\n\n(deftest solve-test\n  (are [i o] (= (solve i) o)\n    \"17301\" \"5,38,100,218,236,5766,17300\"    \n    \"2\" \"-\"    \n    \"1\" \"-\"    \n    \"3\" \"2\"    \n    \"4\" \"3\"    \n    \"5\" \"2,4\"    \n    \"6\" \"5\"    \n    \"10\" \"3,4,9\"    \n    \"101\" \"10,100\"    \n    \"1001\" \"10,25,76,90,142,1000\"    \n    \"10001\" \"10,24,30,42,80,100,136,10000\"    \n    \"1212\" \"22,100,201,302,403,605,1211\"    \n    \"123412\" \"62,100,205,215,30852,61705,123411\"    \n    \"5179\" \"5178\"    \n    \"4919\" \"4918\"    \n    \"5791\" \"5790\"    \n    \"5498\" \"2748,5497\"    \n    \"453\" \"150,452\"    \n    \"134\" \"66,133\"    \n    \"8489\" \"27,652,8488\"    \n    \"1234\" \"22,616,1233\"    \n    \"5497\" \"41,238,5496\"    \n    \"4763\" \"19,35,432,4762\"    \n    \"3974\" \"17,27,1986,3973\"    \n    \"3521\" \"44,55,502,3520\"    \n    \"5513\" \"20,38,53,148,5512\"    \n    \"8042\" \"23,29,60,4020,8041\"    \n    \"7442\" \"37,60,121,3720,7441\"    \n    \"4857\" \"25,1618,4856\"    \n    \"22843\" \"49,69,91,141,430,22842\"    \n    \"194823\" \"84,121,21646,64940,194822\"    \n    \"435697\" \"160,169,235,626,1822,435696\"    \n    \"142\" \"3,7,70,141\"    \n    \"886\" \"5,14,442,885\"    \n    \"3102\" \"7,65,93,140,281,516,1033,1550,3101\"    \n    \"17326\" \"11,28,99,105,8662,17325\"    \n    \"32982\" \"13,72,238,477,716,1433,5496,10993,16490,32981\"    \n    \"36\" \"5,8,11,17,35\"    \n    \"37\" \"6,36\"    \n    \"251\" \"8,250\"    \n    \"252\" \"5,10,17,20,27,35,41,62,83,125,251\"    \n    \"253\" \"12,14,22,252\"    \n    \"6643\" \"2,3,9,81,90,510,948,6642\"    \n    \"5040\" \"71,79,83,89,104,111,119,125,139,143,167,179,209,239,251,279,314,335,359,419,503,559,629,719,839,1007,1259,1679,2519,5039\"    \n    \"9240\" \"23,38,62,104,109,119,131,139,153,164,167,209,219,230,263,279,307,329,384,419,439,461,615,659,769,839,923,1154,1319,1539,1847,2309,3079,4619,9239\"))\n```\n\n## \u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\n\n```clojure\nClojure 1.6.0\nuser=> (ns ord17ref)\nnil\nord17ref=> (require 'ord17ref :reload-all)\nnil\nord17ref=> (run-tests)\n\nTesting ord17ref\n\nRan 1 tests containing 45 assertions.\n0 failures, 0 errors.\n{:type :summary, :fail 0, :error 0, :pass 45, :test 1}\n```\n\n## \u89e3\u8aac\n\n```clojure\n(defn- columns [b]\n  (fn f [i]\n    (if (zero? i) '()\n      (cons (mod i b) (f (quot i b))))))\n```\n\n`columns` \u306f, \u57fa\u6570 `b` \u3092\u4e0e\u3048\u308b\u3068\u300c\u6574\u6570 `i` \u3092\u4e0e\u3048\u308b\u3068, `i` \u3092\u57fa\u6570 `b` \u3067\u8868\u3057\u305f\u5834\u5408\u306e, \u5404\u6841\u306e\u6570\u5024\u3092\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u8fd4\u3059\u95a2\u6570\u300d\u3092\u8fd4\u3057\u307e\u3059.\n\n\u95a2\u6570 `f` \u306f, \u6570\u5024 `i` \u3092\u4e0e\u3048\u308b\u3068\u300c`i` \u3092 `b` \u3067\u5272\u3063\u305f\u5546\u3092, \u81ea\u8eab `f` \u306b\u4e0e\u3048\u3066\u5f97\u3089\u308c\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u300d\u306e\u5148\u982d\u306b\u300c`i` \u3092 `b` \u3067\u5272\u3063\u305f\u4f59\u308a\u300d\u3092\u4ed8\u52a0\u3057\u307e\u3059. `i` \u304c 0 \u306e\u6642\u306f\u7a7a\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059.\n\u3053\u308c\u3067\u57fa\u6570 `b` \u306e\u5834\u5408\u306e\u5404\u6841\u3092\u4e0b\u4f4d\u304b\u3089\u4e26\u3079\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u5f97\u3089\u308c\u307e\u3059.\n\n\u5229\u7528\u4f8b\u3067\u3059.\n\n```clojure\nord17ref=> ((columns 2) 10)\n(0 1 0 1)\nord17ref=> ((columns 3) 10)\n(1 0 1)\nord17ref=> ((columns 4) 10)\n(2 2)\nord17ref=> ((columns 5) 10)\n(0 2)\n```\n\n---\n\n```clojure\n(defn solve [s]\n  (let [i (read-string s)\n        bs (for [b (range 2 i)\n                 :let [cs ((columns b) i)]\n                 :when (= cs (reverse cs))]\n               b)]\n    (if (empty? bs) \"-\" (apply str (interpose \",\" bs)))))\n```\n\n\u6587\u5b57\u5217\u3067\u4e0e\u3048\u3089\u308c\u305f\u6570\u5b57\u5217 `s` \u3092 `(read-string ...)` \u3067\u6570\u5024\u306b\u3057, `i` \u3068\u3057\u307e\u3059.\n\u57fa\u6570 `b` \u3092 2 \u304b\u3089 `i` - 1 \u306e\u7bc4\u56f2\u3067\u5909\u5316\u3055\u305b, \u305d\u306e\u5834\u5408\u306e `i` \u306e\u5404\u6841\u3092\u4e0b\u4f4d\u304b\u3089\u4e26\u3079\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u3092 `cs` \u3068\u3057\u307e\u3059.\n`cs` \u3068 `(reverse cs)` \u304c\u4e00\u81f4\u3059\u308b\u5834\u5408\u306f, \u57fa\u6570 `b` \u3092\u62bd\u51fa\u3057\u307e\u3059.\n\u62bd\u51fa\u3057\u305f\u57fa\u6570\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092 `bs` \u3068\u3057\u307e\u3059.\n`bs` \u304c\u7a7a\u306a\u3089 `\"-\"` \u3092\u8fd4\u3057, \u305d\u3046\u3067\u306a\u3051\u308c\u3070, `(interpose \",\" ...)` \u3067 `\",\"` \u3092\u9593\u306b\u631f\u3093\u3067,\n`(apply str ...)` \u3067\u6587\u5b57\u5217\u5316\u3057\u307e\u3059.\n\n\u5404\u90e8\u5206\u306f\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6a5f\u80fd\u3057\u307e\u3059.\n\n```clojure\nord17ref=> (read-string \"17301\")\n17301\n\nord17ref=> (for [b (range 2 17301) :let [cs ((columns b) 17301)] :when (= cs (reverse cs))] b)\n(5 38 100 218 236 5766 17300)\n\nord17ref=> (interpose \",\" '(5 38 100 218 236 5766 17300))\n(5 \",\" 38 \",\" 100 \",\" 218 \",\" 236 \",\" 5766 \",\" 17300)\n\nord17ref=> (apply str '(5 \",\" 38 \",\" 100 \",\" 218 \",\" 236 \",\" 5766 \",\" 17300))\n\"5,38,100,218,236,5766,17300\"\n```\n\n", "tags": ["\u3069\u3046\u66f8\u304f", "Clojure", "yhpg"]}