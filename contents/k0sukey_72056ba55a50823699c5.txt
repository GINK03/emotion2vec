{"context": " More than 1 year has passed since last update.Titanium SDK 3.2.0.GA \u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f AttributedString \u3092 Alloy \u306e\u30d3\u30e5\u30fc\u3068\u30b9\u30bf\u30a4\u30eb\u306e\u307f\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3001Alloy \u81ea\u4f53\u306e\u6539\u9020\u306b\u306a\u308a\u307e\u3059\u3002\nTitanium SDK 3.6 \u7cfb\u304b\u3089 AttributedString \u304c Android \u3067\u3082\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3001\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3082 Ti.UI.iOS.AttributedString \u304b\u3089 Ti.UI.AttributedString \u3078\u5909\u66f4\u3055\u308c\u308b\u305f\u3081\u3001Alloy \u81ea\u4f53\u306e\u5bfe\u5fdc\u306f 1.6 \u7cfb\u304b\u3089\u3068\u306a\u308b\u3088\u3046\u3067\u3059\uff08\u5f85\u3066\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u304b\u3001\u8af8\u4e8b\u60c5\u3067 SDK \u3068 Alloy \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u52d5\u304b\u305b\u306a\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3057\uff09\u3002\n\u305d\u3082\u305d\u3082\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b Ti.UI.iOS.createAttributedStinrg \u3092\u76f4\u66f8\u304d\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u304c\u3001Alloy \u3092\u4f7f\u3063\u3066\u3044\u3066\u4eca\u66f4\u305d\u3093\u306a\u3053\u3068\u3082\u3057\u305f\u304f\u306a\u3044\u3067\u3059\u3057\u3002\u3002\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Alloy \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u624b\u3092\u5165\u308c\u3066\u3001\u30d3\u30e5\u30fc\u3068\u30b9\u30bf\u30a4\u30eb\u306e\u307f\u3067 AttributedString \u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\u5b9f\u969b\u306b\u3053\u308c\u3092\u9069\u7528\u3059\u308b\u3068\u3001\u30d3\u30e5\u30fc\u3068\u30b9\u30bf\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nindex.xml\n<Alloy>\n    <Window>\n        <Label>\n            <AttributedString class=\"as\">\n                Bacon ipsum dolor Appcelerator Titanium rocks! sit amet fatback leberkas salami sausage tongue strip steak.\n            </AttributedString>\n        </Label>\n        <TextField>\n            <AttributedString class=\"as\">\n                Bacon ipsum dolor Appcelerator Titanium rocks! sit amet fatback leberkas salami sausage tongue strip steak.\n            </AttributedString>\n            <AttributedHintText class=\"as\">\n                Bacon ipsum dolor Appcelerator Titanium rocks! sit amet fatback leberkas salami sausage tongue strip steak.\n            </AttributedHintText>\n        </TextField>\n        <TextArea>\n            <AttributedString class=\"as\">\n                Bacon ipsum dolor Appcelerator Titanium rocks! sit amet fatback leberkas salami sausage tongue strip steak.\n            </AttributedString>\n        </TextArea>\n    </Window>\n</Alloy>\n\nindex.tss\n\"Window\": {\n    backgroundColor: '#fff',\n    layout: 'vertical'\n},\n\"Label\": {\n    top: 20,\n    right: 10,\n    left: 10,\n    width: Ti.UI.FILL,\n    height: Ti.UI.SIZE\n},\n\"TextField\": {\n    top: 20,\n    right: 10,\n    left: 10,\n    width: Ti.UI.FILL,\n    height: 44\n},\n\"TextArea\": {\n    top: 20,\n    right: 10,\n    left: 10,\n    width: Ti.UI.FILL,\n    height: 200\n},\n\".as\": {\n    attributes: [\n        {\n            type: Ti.UI.ATTRIBUTE_UNDERLINES_STYLE,\n            value: Ti.UI.ATTRIBUTE_UNDERLINE_STYLE_SINGLE,\n            range: [0, 107]\n        },\n        {\n            type: Ti.UI.ATTRIBUTE_BACKGROUND_COLOR,\n            value: \"red\",\n            range: [18, 12]\n        },\n        {\n            type: Ti.UI.ATTRIBUTE_BACKGROUND_COLOR,\n            value: \"blue\",\n            range: [31, 2]\n        },\n        {\n            type: Ti.UI.ATTRIBUTE_BACKGROUND_COLOR,\n            value: \"yellow\",\n            range: [40, 6]\n        },\n        {\n            type: Ti.UI.ATTRIBUTE_FOREGROUND_COLOR,\n            value: \"orange\",\n            range: [0, 107]\n        },\n        {\n            type: Ti.UI.ATTRIBUTE_FOREGROUND_COLOR,\n            value: \"black\",\n            range: [40, 6]\n        }\n    ]\n}\n\n\u305d\u308c\u3067\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f Alloy \u306e\u30d5\u30a9\u30eb\u30c0\u3078\u79fb\u52d5\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u6539\u9020\u3092\u9069\u7528\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nalloy/Alloy/common/constants.js\n186 \u884c\u76ee\u306b\u3042\u308b AdView \u306e\u4e0b\u8fba\u308a\u306b\u3001\u4ee5\u4e0b\u306e 1 \u884c\u3092\u633f\u5165\u3057\u307e\u3059\u3002\nAttributedString: NS_TI_UI_IOS,\n\nalloy/Alloy/commands/compile/parsers/Ti.UI.iOS.AttributedString\nAttributedString \u7528\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u65b0\u898f\u306b\u8a2d\u7f6e\u3057\u307e\u3059\u3002\nvar _ = require('../../../lib/alloy/underscore'),\n    styler = require('../styler'),\n    U = require('../../../utils'),\n    CU = require('../compilerUtils'),\n    tiapp = require('../../../tiapp');\n\nvar MIN_VERSION = '3.2.0';\n\nexports.parse = function(node, state) {\n    return require('./base').parse(node, state, parse);\n};\n\nfunction parse(node, state, args) {\n    if (tiapp.version.lt(tiapp.getSdkVersion(), MIN_VERSION)) {\n        U.die('Ti.UI.iOS.AttributedString (line ' + node.lineNumber + ') requires Titanium 3.2.0+');\n    }\n\n    // Get label text from node text, if present\n    var nodeText = U.XML.getNodeText(node);\n    if (nodeText) {\n        if (U.isLocaleAlias(nodeText)) {\n            state.extraStyle = {'text': styler.STYLE_EXPR_PREFIX + nodeText};\n        } else {\n            state.extraStyle = styler.createVariableStyle('text', \"'\" + U.trim(nodeText.replace(/'/g, \"\\\\'\")) + \"'\");\n        }\n\n        if (nodeText.match(/\\{([^}]+)\\}/) !== null) {\n            state.extraStyle = nodeText;\n        }\n    }\n\n    var nodeState = require('./default').parse(node, state);\n    delete state.extraStyle;\n\n    var code = nodeState.code;\n\n    return {\n        parent: {\n            node: node,\n            symbol: args.symbol\n        },\n        code: code\n    };\n}\n\nalloy/Alloy/commands/compile/parsers/Ti.UI.Label\nTi.UI.Label \u306b AttributedString \u304c\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3057\u307e\u3059\u3002\nvar _ = require('../../../lib/alloy/underscore')._,\n    styler = require('../styler'),\n    CU = require('../compilerUtils'),\n    U = require('../../../utils');\n\nexports.parse = function(node, state) {\n    return require('./base').parse(node, state, parse);\n};\n\nfunction parse(node, state, args) {\n    var attributedStringsymbol,\n        attributedStringObj = {},\n        code = '';\n\n    _.each(U.XML.getElementsFromNodes(node.childNodes), function(child){\n        if (child.nodeName === 'AttributedString' && !child.hasAttribute('ns')) {\n            child.setAttribute('ns', 'Ti.UI.iOS');\n        }\n\n        if (CU.validateNodeName(child, 'Ti.UI.iOS.AttributedString')) {\n            code += CU.generateNodeExtended(child, state, {\n                parent: {},\n                post: function(node, state, args) {\n                    attributedStringsymbol = state.parent.symbol;\n                }\n            });\n\n            node.removeChild(child);\n        }\n    });\n\n    if (attributedStringsymbol) {\n        attributedStringObj = styler.createVariableStyle('attributedString', attributedStringsymbol);\n    }\n\n    // Get label text from node text, if present\n    var nodeText = U.XML.getNodeText(node),\n        textObj = {};\n    if (nodeText) {\n        if (U.isLocaleAlias(nodeText)) {\n            textObj = {'text': styler.STYLE_EXPR_PREFIX + nodeText};\n        } else {\n            textObj = styler.createVariableStyle('text', \"'\" + U.trim(nodeText.replace(/'/g, \"\\\\'\")) + \"'\");\n        }\n\n        if (nodeText.match(/\\{([^}]+)\\}/) !== null) {\n            textObj[\"text\"] = nodeText;\n        }\n    }\n\n    state.extraStyle = _.extend(attributedStringObj, textObj);\n\n    var nodeState = require('./default').parse(node, state);\n    code += nodeState.code;\n\n    // Generate runtime code using default\n    return _.extend(nodeState, {\n        code: code\n    });\n}\n\nalloy/Alloy/commands/compile/parsers/Ti.UI.TextField\nTi.UI.TextField \u306b AttributedString \u3068 AttributedHintText \u304c\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3057\u307e\u3059\u3002\nvar _ = require('../../../lib/alloy/underscore')._,\n    styler = require('../styler'),\n    U = require('../../../utils'),\n    CU = require('../compilerUtils'),\n    CONST = require('../../../common/constants');\n\nvar KEYBOARD_TYPES = [\n    'DEFAULT', 'ASCII', 'NUMBERS_PUNCTUATION', 'URL', 'EMAIL', 'DECIMAL_PAD', 'NAMEPHONE_PAD',\n    'NUMBER_PAD', 'PHONE_PAD'\n];\nvar RETURN_KEY_TYPES = [\n    'DEFAULT', 'DONE', 'EMERGENCY_CALL', 'GO', 'GOOGLE', 'JOIN', 'NEXT', 'ROUTE',\n    'SEARCH', 'SEND', 'YAHOO'\n];\nvar AUTOCAPITALIZATION_TYPES = [\n    'ALL', 'NONE', 'SENTENCES', 'WORDS'\n];\n\nexports.parse = function(node, state) {\n    return require('./base').parse(node, state, parse);\n};\n\nfunction parse(node, state, args) {\n    var code = '',\n        postCode = '',\n        extras = [],\n        proxyProperties = {};\n\n    // iterate through all children of the TextField\n    _.each(U.XML.getElementsFromNodes(node.childNodes), function(child) {\n        var fullname = CU.getNodeFullname(child),\n            isProxyProperty = false,\n            isControllerNode = false,\n            isAttributedString = false,\n            isAttributedHintText = false,\n            hasUiNodes = false,\n            controllerSymbol,\n            parentSymbol;\n\n        if (child.nodeName === 'AttributedString' && !child.hasAttribute('ns')) {\n            child.setAttribute('ns', 'Ti.UI.iOS');\n        }\n\n        if (child.nodeName === 'AttributedHintText' && !child.hasAttribute('ns')) {\n            child.nodeName = 'AttributedString';\n            child.setAttribute('ns', 'Ti.UI.iOS');\n            isAttributedHintText = true;\n        }\n\n        // validate the child element and determine if it's part of\n        // the textfield or a proxy property assigment\n        if (!CU.isNodeForCurrentPlatform(child)) {\n            return;\n        } else if (_.contains(CONST.CONTROLLER_NODES, fullname)) {\n            isControllerNode = true;\n        } else if (fullname.split('.')[0] === '_ProxyProperty') {\n            isProxyProperty = true;\n        } else if (CU.validateNodeName(child, 'Ti.UI.iOS.AttributedString')) {\n            if (!isAttributedHintText) {\n                isAttributedString = true;\n            }\n        }\n\n        // generate the node\n        code += CU.generateNodeExtended(child, state, {\n            parent: {},\n            post: function(node, state, args) {\n                controllerSymbol = state.controller;\n                parentSymbol = state.parent ? state.parent.symbol : state.item.symbol;\n            }\n        });\n\n        // manually handle controller node proxy properties\n        if (isControllerNode) {\n\n            // set up any proxy properties at the top-level of the controller\n            var inspect = CU.inspectRequireNode(child);\n            _.each(_.uniq(inspect.names), function(name) {\n                if (name.split('.')[0] === '_ProxyProperty') {\n                    var prop = U.proxyPropertyNameFromFullname(name);\n                    proxyProperties[prop] = controllerSymbol + '.getProxyPropertyEx(\"' + prop + '\", {recurse:true})';\n                } else {\n                    hasUiNodes = true;\n                }\n            });\n        }\n\n        // generate code for proxy property assignments\n        if (isProxyProperty) {\n            proxyProperties[U.proxyPropertyNameFromFullname(fullname)] = parentSymbol;\n\n        // generate code for the attribtuedString\n        } else if (isAttributedString) {\n            proxyProperties.attributedString = parentSymbol;\n            node.removeChild(child);\n\n        // generate code for the attribtuedHintText\n        } else if (isAttributedHintText) {\n            proxyProperties.attributedHintText = parentSymbol;\n            node.removeChild(child);\n\n        // generate code for the child components\n        } else if (hasUiNodes || !isControllerNode) {\n            postCode += '<%= parentSymbol %>.add(' + parentSymbol + ');';\n        }\n\n    });\n\n    // support shortcuts for keyboard type, return key type, and autocapitalization\n    var keyboardType = node.getAttribute('keyboardType');\n    if (_.contains(KEYBOARD_TYPES, keyboardType.toUpperCase())) {\n        node.setAttribute('keyboardType', 'Ti.UI.KEYBOARD_' + keyboardType.toUpperCase());\n    }\n    var returnKey = node.getAttribute('returnKeyType');\n    if (_.contains(RETURN_KEY_TYPES, returnKey.toUpperCase())) {\n        node.setAttribute('returnKeyType', 'Ti.UI.RETURNKEY_' + returnKey.toUpperCase());\n    }\n    var autocapitalization = node.getAttribute('keyboardType');\n    if (_.contains(AUTOCAPITALIZATION_TYPES, autocapitalization.toUpperCase())) {\n        node.setAttribute('autocapitalization', 'Ti.UI.TEXT_AUTOCAPITALIZATION_' + autocapitalization.toUpperCase());\n    }\n\n\n    // add all creation time properties to the state\n    if (node.hasAttribute('clearOnEdit')) {\n        var attr = node.getAttribute('clearOnEdit');\n        extras.push(['clearOnEdit', attr === 'true']);\n    }\n    _.each(proxyProperties, function(v, k) {\n        extras.push([k, v]);\n    });\n    if (extras.length) { state.extraStyle = styler.createVariableStyle(extras); }\n\n    // generate the code for the textfield itself\n    var nodeState = require('./default').parse(node, state);\n    code += nodeState.code;\n\n    // add the rows to the section\n    if (nodeState.parent && postCode) {\n        code += _.template(postCode, {\n            parentSymbol: nodeState.parent.symbol\n        });\n    }\n\n    // Update the parsing state\n    return _.extend(state, {\n        parent: nodeState.parent,\n        code: code\n    });\n}\n\nalloy/Alloy/commands/compile/parsers/Ti.UI.TextArea\nTi.UI.TextField \u306b AttributedString \u304c\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3057\u307e\u3059\u3002\nvar _ = require('../../../lib/alloy/underscore')._,\n    styler = require('../styler'),\n    CU = require('../compilerUtils'),\n    U = require('../../../utils'),\n    CONST = require('../../../common/constants');\n\nvar KEYBOARD_TYPES = [\n    'DEFAULT', 'ASCII', 'NUMBERS_PUNCTUATION', 'URL', 'EMAIL', 'DECIMAL_PAD', 'NAMEPHONE_PAD',\n    'NUMBER_PAD', 'PHONE_PAD'\n];\nvar RETURN_KEY_TYPES = [\n    'DEFAULT', 'DONE', 'EMERGENCY_CALL', 'GO', 'GOOGLE', 'JOIN', 'NEXT', 'ROUTE',\n    'SEARCH', 'SEND', 'YAHOO'\n];\nvar AUTOCAPITALIZATION_TYPES = [\n    'ALL', 'NONE', 'SENTENCES', 'WORDS'\n];\n\nexports.parse = function(node, state) {\n    return require('./base').parse(node, state, parse);\n};\n\nfunction parse(node, state, args) {\n    var code = '',\n        postCode = '',\n        extras = [],\n        proxyProperties = {};\n\n    // iterate through all children of the TextArea\n    _.each(U.XML.getElementsFromNodes(node.childNodes), function(child) {\n        var fullname = CU.getNodeFullname(child),\n            isProxyProperty = false,\n            isControllerNode = false,\n            isAttributedString = false,\n            hasUiNodes = false,\n            controllerSymbol,\n            parentSymbol;\n\n        if (child.nodeName === 'AttributedString' && !child.hasAttribute('ns')) {\n            child.setAttribute('ns', 'Ti.UI.iOS');\n        }\n\n        // validate the child element and determine if it's part of\n        // the textarea or a proxy property assigment\n        if (!CU.isNodeForCurrentPlatform(child)) {\n            return;\n        } else if (_.contains(CONST.CONTROLLER_NODES, fullname)) {\n            isControllerNode = true;\n        } else if (fullname.split('.')[0] === '_ProxyProperty') {\n            isProxyProperty = true;\n        } else if (CU.validateNodeName(child, 'Ti.UI.iOS.AttributedString')) {\n            isAttributedString = true;\n        }\n\n        // generate the node\n        code += CU.generateNodeExtended(child, state, {\n            parent: {},\n            post: function(node, state, args) {\n                controllerSymbol = state.controller;\n                parentSymbol = state.parent ? state.parent.symbol : null;\n            }\n        });\n\n        // manually handle controller node proxy properties\n        if (isControllerNode) {\n\n            // set up any proxy properties at the top-level of the controller\n            var inspect = CU.inspectRequireNode(child);\n            _.each(_.uniq(inspect.names), function(name) {\n                if (name.split('.')[0] === '_ProxyProperty') {\n                    var prop = U.proxyPropertyNameFromFullname(name);\n                    proxyProperties[prop] = controllerSymbol + '.getProxyPropertyEx(\"' + prop + '\", {recurse:true})';\n                } else {\n                    hasUiNodes = true;\n                }\n            });\n        }\n\n        // generate code for proxy property assignments\n        if (isProxyProperty) {\n            proxyProperties[U.proxyPropertyNameFromFullname(fullname)] = parentSymbol;\n\n        // generate code for the attribtuedString\n        } else if (isAttributedString) {\n            proxyProperties.attributedString = parentSymbol;\n            node.removeChild(child);\n\n        // generate code for the child components\n        } else if (hasUiNodes || !isControllerNode) {\n            postCode += '<%= parentSymbol %>.add(' + parentSymbol + ');';\n        }\n\n    });\n\n    // support shortcuts for keyboard type, return key type, and autocapitalization\n    var keyboardType = node.getAttribute('keyboardType');\n    if (_.contains(KEYBOARD_TYPES, keyboardType.toUpperCase())) {\n        node.setAttribute('keyboardType', 'Ti.UI.KEYBOARD_' + keyboardType.toUpperCase());\n    }\n    var returnKey = node.getAttribute('returnKeyType');\n    if (_.contains(RETURN_KEY_TYPES, returnKey.toUpperCase())) {\n        node.setAttribute('returnKeyType', 'Ti.UI.RETURNKEY_' + returnKey.toUpperCase());\n    }\n    var autocapitalization = node.getAttribute('keyboardType');\n    if (_.contains(AUTOCAPITALIZATION_TYPES, autocapitalization.toUpperCase())) {\n        node.setAttribute('autocapitalization', 'Ti.UI.TEXT_AUTOCAPITALIZATION_' + autocapitalization.toUpperCase());\n    }\n\n\n    // add all creation time properties to the state\n    if (node.hasAttribute('clearOnEdit')) {\n        var attr = node.getAttribute('clearOnEdit');\n        extras.push(['clearOnEdit', attr === 'true']);\n    }\n    _.each(proxyProperties, function(v, k) {\n        extras.push([k, v]);\n    });\n    if (extras.length) { state.extraStyle = styler.createVariableStyle(extras); }\n\n    // generate the code for the textarea itself\n    var nodeState = require('./default').parse(node, state);\n    code += nodeState.code;\n\n    // add the rows to the section\n    if (nodeState.parent && postCode) {\n        code += _.template(postCode, {\n            parentSymbol: nodeState.parent.symbol\n        });\n    }\n\n    // Update the parsing state\n    return _.extend(state, {\n        parent: nodeState.parent,\n        code: code\n    });\n}\n\n\u4ee5\u4e0a\u306b\u306a\u308a\u307e\u3059\u3002\u7279\u306b\u3001Ti.UI.TextField \u3067 hintText \u306e\u8272\u3092\u5909\u3048\u305f\u3044\u3068\u304b\u3001\u7d50\u69cb\u9700\u8981\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u3088\u306d\u3002\u4f1d\u7d71\u82b8\u80fd\u306a\u3001\u4e0a\u306b\u30e9\u30d9\u30eb\u3092\u304a\u3044\u3066 change \u30a4\u30d9\u30f3\u30c8\u3092\u62fe\u3063\u3066\u3002\u3002\u3002\u3068\u3044\u3046\u5b9f\u88c5\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001attributedHintText \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u65ad\u7136\u697d\u3067\u3059\u3002\n\u6ce8\u610f\u4e8b\u9805\n\u3053\u308c\u306f Alloy \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u81ea\u4f53\u306b\u624b\u3092\u5165\u308c\u308b\u305f\u3081\u3001\u81ea\u5df1\u8cac\u4efb\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\u307c\u304f\u306e\u74b0\u5883\u3067\u306f\u554f\u984c\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u307e\u3059\u304c\u3001\u6700\u60aa Alloy \u304c\u58ca\u308c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001Alloy 1.6 \u7cfb\u3067 AttributedString \u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308c\u3070\u3053\u306e\u6539\u9020\u306f\u4e0d\u8981\u306b\u306a\u308a\u307e\u3059\u3002\nTitanium SDK 3.2.0.GA \u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f AttributedString \u3092 Alloy \u306e\u30d3\u30e5\u30fc\u3068\u30b9\u30bf\u30a4\u30eb\u306e\u307f\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3001Alloy \u81ea\u4f53\u306e\u6539\u9020\u306b\u306a\u308a\u307e\u3059\u3002\n\nTitanium SDK 3.6 \u7cfb\u304b\u3089 AttributedString \u304c Android \u3067\u3082\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3001\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3082 Ti.UI.iOS.AttributedString \u304b\u3089 Ti.UI.AttributedString \u3078\u5909\u66f4\u3055\u308c\u308b\u305f\u3081\u3001Alloy \u81ea\u4f53\u306e\u5bfe\u5fdc\u306f 1.6 \u7cfb\u304b\u3089\u3068\u306a\u308b\u3088\u3046\u3067\u3059\uff08\u5f85\u3066\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u304b\u3001\u8af8\u4e8b\u60c5\u3067 SDK \u3068 Alloy \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u52d5\u304b\u305b\u306a\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3057\uff09\u3002\n\n\u305d\u3082\u305d\u3082\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b ```Ti.UI.iOS.createAttributedStinrg``` \u3092\u76f4\u66f8\u304d\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u304c\u3001Alloy \u3092\u4f7f\u3063\u3066\u3044\u3066\u4eca\u66f4\u305d\u3093\u306a\u3053\u3068\u3082\u3057\u305f\u304f\u306a\u3044\u3067\u3059\u3057\u3002\u3002\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Alloy \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u624b\u3092\u5165\u308c\u3066\u3001\u30d3\u30e5\u30fc\u3068\u30b9\u30bf\u30a4\u30eb\u306e\u307f\u3067 AttributedString \u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\u5b9f\u969b\u306b\u3053\u308c\u3092\u9069\u7528\u3059\u308b\u3068\u3001\u30d3\u30e5\u30fc\u3068\u30b9\u30bf\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n**index.xml**\n\n```xml\n<Alloy>\n\t<Window>\n\t\t<Label>\n\t\t\t<AttributedString class=\"as\">\n\t\t\t\tBacon ipsum dolor Appcelerator Titanium rocks! sit amet fatback leberkas salami sausage tongue strip steak.\n\t\t\t</AttributedString>\n\t\t</Label>\n\t\t<TextField>\n\t\t\t<AttributedString class=\"as\">\n\t\t\t\tBacon ipsum dolor Appcelerator Titanium rocks! sit amet fatback leberkas salami sausage tongue strip steak.\n\t\t\t</AttributedString>\n\t\t\t<AttributedHintText class=\"as\">\n\t\t\t\tBacon ipsum dolor Appcelerator Titanium rocks! sit amet fatback leberkas salami sausage tongue strip steak.\n\t\t\t</AttributedHintText>\n\t\t</TextField>\n\t\t<TextArea>\n\t\t\t<AttributedString class=\"as\">\n\t\t\t\tBacon ipsum dolor Appcelerator Titanium rocks! sit amet fatback leberkas salami sausage tongue strip steak.\n\t\t\t</AttributedString>\n\t\t</TextArea>\n\t</Window>\n</Alloy>\n```\n\n**index.tss**\n\n```css\n\"Window\": {\n\tbackgroundColor: '#fff',\n\tlayout: 'vertical'\n},\n\"Label\": {\n\ttop: 20,\n\tright: 10,\n\tleft: 10,\n\twidth: Ti.UI.FILL,\n\theight: Ti.UI.SIZE\n},\n\"TextField\": {\n\ttop: 20,\n\tright: 10,\n\tleft: 10,\n\twidth: Ti.UI.FILL,\n\theight: 44\n},\n\"TextArea\": {\n\ttop: 20,\n\tright: 10,\n\tleft: 10,\n\twidth: Ti.UI.FILL,\n\theight: 200\n},\n\".as\": {\n\tattributes: [\n\t\t{\n\t\t\ttype: Ti.UI.ATTRIBUTE_UNDERLINES_STYLE,\n\t\t\tvalue: Ti.UI.ATTRIBUTE_UNDERLINE_STYLE_SINGLE,\n\t\t\trange: [0, 107]\n\t\t},\n\t\t{\n\t\t\ttype: Ti.UI.ATTRIBUTE_BACKGROUND_COLOR,\n\t\t\tvalue: \"red\",\n\t\t\trange: [18, 12]\n\t\t},\n\t\t{\n\t\t\ttype: Ti.UI.ATTRIBUTE_BACKGROUND_COLOR,\n\t\t\tvalue: \"blue\",\n\t\t\trange: [31, 2]\n\t\t},\n\t\t{\n\t\t\ttype: Ti.UI.ATTRIBUTE_BACKGROUND_COLOR,\n\t\t\tvalue: \"yellow\",\n\t\t\trange: [40, 6]\n\t\t},\n\t\t{\n\t\t\ttype: Ti.UI.ATTRIBUTE_FOREGROUND_COLOR,\n\t\t\tvalue: \"orange\",\n\t\t\trange: [0, 107]\n\t\t},\n\t\t{\n\t\t\ttype: Ti.UI.ATTRIBUTE_FOREGROUND_COLOR,\n\t\t\tvalue: \"black\",\n\t\t\trange: [40, 6]\n\t\t}\n\t]\n}\n```\n\n\u305d\u308c\u3067\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f Alloy \u306e\u30d5\u30a9\u30eb\u30c0\u3078\u79fb\u52d5\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u6539\u9020\u3092\u9069\u7528\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n**alloy/Alloy/common/constants.js**\n\n186 \u884c\u76ee\u306b\u3042\u308b ```AdView``` \u306e\u4e0b\u8fba\u308a\u306b\u3001\u4ee5\u4e0b\u306e 1 \u884c\u3092\u633f\u5165\u3057\u307e\u3059\u3002\n\n```js\nAttributedString: NS_TI_UI_IOS,\n```\n\n**alloy/Alloy/commands/compile/parsers/Ti.UI.iOS.AttributedString**\n\nAttributedString \u7528\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u65b0\u898f\u306b\u8a2d\u7f6e\u3057\u307e\u3059\u3002\n\n```js\nvar _ = require('../../../lib/alloy/underscore'),\n\tstyler = require('../styler'),\n\tU = require('../../../utils'),\n\tCU = require('../compilerUtils'),\n\ttiapp = require('../../../tiapp');\n\nvar MIN_VERSION = '3.2.0';\n\nexports.parse = function(node, state) {\n\treturn require('./base').parse(node, state, parse);\n};\n\nfunction parse(node, state, args) {\n\tif (tiapp.version.lt(tiapp.getSdkVersion(), MIN_VERSION)) {\n\t\tU.die('Ti.UI.iOS.AttributedString (line ' + node.lineNumber + ') requires Titanium 3.2.0+');\n\t}\n\n\t// Get label text from node text, if present\n\tvar nodeText = U.XML.getNodeText(node);\n\tif (nodeText) {\n\t\tif (U.isLocaleAlias(nodeText)) {\n\t\t\tstate.extraStyle = {'text': styler.STYLE_EXPR_PREFIX + nodeText};\n\t\t} else {\n\t\t\tstate.extraStyle = styler.createVariableStyle('text', \"'\" + U.trim(nodeText.replace(/'/g, \"\\\\'\")) + \"'\");\n\t\t}\n\n\t\tif (nodeText.match(/\\{([^}]+)\\}/) !== null) {\n\t\t\tstate.extraStyle = nodeText;\n\t\t}\n\t}\n\n\tvar nodeState = require('./default').parse(node, state);\n\tdelete state.extraStyle;\n\n\tvar code = nodeState.code;\n\n\treturn {\n\t\tparent: {\n\t\t\tnode: node,\n\t\t\tsymbol: args.symbol\n\t\t},\n\t\tcode: code\n\t};\n}\n```\n\n**alloy/Alloy/commands/compile/parsers/Ti.UI.Label**\n\n```Ti.UI.Label``` \u306b ```AttributedString``` \u304c\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3057\u307e\u3059\u3002\n\n```js\nvar _ = require('../../../lib/alloy/underscore')._,\n\tstyler = require('../styler'),\n\tCU = require('../compilerUtils'),\n\tU = require('../../../utils');\n\nexports.parse = function(node, state) {\n\treturn require('./base').parse(node, state, parse);\n};\n\nfunction parse(node, state, args) {\n\tvar attributedStringsymbol,\n\t\tattributedStringObj = {},\n\t\tcode = '';\n\n\t_.each(U.XML.getElementsFromNodes(node.childNodes), function(child){\n\t\tif (child.nodeName === 'AttributedString' && !child.hasAttribute('ns')) {\n\t\t\tchild.setAttribute('ns', 'Ti.UI.iOS');\n\t\t}\n\n\t\tif (CU.validateNodeName(child, 'Ti.UI.iOS.AttributedString')) {\n\t\t\tcode += CU.generateNodeExtended(child, state, {\n\t\t\t\tparent: {},\n\t\t\t\tpost: function(node, state, args) {\n\t\t\t\t\tattributedStringsymbol = state.parent.symbol;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tnode.removeChild(child);\n\t\t}\n\t});\n\n\tif (attributedStringsymbol) {\n\t\tattributedStringObj = styler.createVariableStyle('attributedString', attributedStringsymbol);\n\t}\n\n\t// Get label text from node text, if present\n\tvar nodeText = U.XML.getNodeText(node),\n\t\ttextObj = {};\n\tif (nodeText) {\n\t\tif (U.isLocaleAlias(nodeText)) {\n\t\t\ttextObj = {'text': styler.STYLE_EXPR_PREFIX + nodeText};\n\t\t} else {\n\t\t\ttextObj = styler.createVariableStyle('text', \"'\" + U.trim(nodeText.replace(/'/g, \"\\\\'\")) + \"'\");\n\t\t}\n\n\t\tif (nodeText.match(/\\{([^}]+)\\}/) !== null) {\n\t\t\ttextObj[\"text\"] = nodeText;\n\t\t}\n\t}\n\n\tstate.extraStyle = _.extend(attributedStringObj, textObj);\n\n\tvar nodeState = require('./default').parse(node, state);\n\tcode += nodeState.code;\n\n\t// Generate runtime code using default\n\treturn _.extend(nodeState, {\n\t\tcode: code\n\t});\n}\n```\n\n**alloy/Alloy/commands/compile/parsers/Ti.UI.TextField**\n\n```Ti.UI.TextField``` \u306b ```AttributedString``` \u3068 ```AttributedHintText``` \u304c\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3057\u307e\u3059\u3002\n\n```js\nvar _ = require('../../../lib/alloy/underscore')._,\n\tstyler = require('../styler'),\n\tU = require('../../../utils'),\n\tCU = require('../compilerUtils'),\n\tCONST = require('../../../common/constants');\n\nvar KEYBOARD_TYPES = [\n\t'DEFAULT', 'ASCII', 'NUMBERS_PUNCTUATION', 'URL', 'EMAIL', 'DECIMAL_PAD', 'NAMEPHONE_PAD',\n\t'NUMBER_PAD', 'PHONE_PAD'\n];\nvar RETURN_KEY_TYPES = [\n\t'DEFAULT', 'DONE', 'EMERGENCY_CALL', 'GO', 'GOOGLE', 'JOIN', 'NEXT', 'ROUTE',\n\t'SEARCH', 'SEND', 'YAHOO'\n];\nvar AUTOCAPITALIZATION_TYPES = [\n\t'ALL', 'NONE', 'SENTENCES', 'WORDS'\n];\n\nexports.parse = function(node, state) {\n\treturn require('./base').parse(node, state, parse);\n};\n\nfunction parse(node, state, args) {\n\tvar code = '',\n\t\tpostCode = '',\n\t\textras = [],\n\t\tproxyProperties = {};\n\n\t// iterate through all children of the TextField\n\t_.each(U.XML.getElementsFromNodes(node.childNodes), function(child) {\n\t\tvar fullname = CU.getNodeFullname(child),\n\t\t\tisProxyProperty = false,\n\t\t\tisControllerNode = false,\n\t\t\tisAttributedString = false,\n\t\t\tisAttributedHintText = false,\n\t\t\thasUiNodes = false,\n\t\t\tcontrollerSymbol,\n\t\t\tparentSymbol;\n\n\t\tif (child.nodeName === 'AttributedString' && !child.hasAttribute('ns')) {\n\t\t\tchild.setAttribute('ns', 'Ti.UI.iOS');\n\t\t}\n\n\t\tif (child.nodeName === 'AttributedHintText' && !child.hasAttribute('ns')) {\n\t\t\tchild.nodeName = 'AttributedString';\n\t\t\tchild.setAttribute('ns', 'Ti.UI.iOS');\n\t\t\tisAttributedHintText = true;\n\t\t}\n\n\t\t// validate the child element and determine if it's part of\n\t\t// the textfield or a proxy property assigment\n\t\tif (!CU.isNodeForCurrentPlatform(child)) {\n\t\t\treturn;\n\t\t} else if (_.contains(CONST.CONTROLLER_NODES, fullname)) {\n\t\t\tisControllerNode = true;\n\t\t} else if (fullname.split('.')[0] === '_ProxyProperty') {\n\t\t\tisProxyProperty = true;\n\t\t} else if (CU.validateNodeName(child, 'Ti.UI.iOS.AttributedString')) {\n\t\t\tif (!isAttributedHintText) {\n\t\t\t\tisAttributedString = true;\n\t\t\t}\n\t\t}\n\n\t\t// generate the node\n\t\tcode += CU.generateNodeExtended(child, state, {\n\t\t\tparent: {},\n\t\t\tpost: function(node, state, args) {\n\t\t\t\tcontrollerSymbol = state.controller;\n\t\t\t\tparentSymbol = state.parent ? state.parent.symbol : state.item.symbol;\n\t\t\t}\n\t\t});\n\n\t\t// manually handle controller node proxy properties\n\t\tif (isControllerNode) {\n\n\t\t\t// set up any proxy properties at the top-level of the controller\n\t\t\tvar inspect = CU.inspectRequireNode(child);\n\t\t\t_.each(_.uniq(inspect.names), function(name) {\n\t\t\t\tif (name.split('.')[0] === '_ProxyProperty') {\n\t\t\t\t\tvar prop = U.proxyPropertyNameFromFullname(name);\n\t\t\t\t\tproxyProperties[prop] = controllerSymbol + '.getProxyPropertyEx(\"' + prop + '\", {recurse:true})';\n\t\t\t\t} else {\n\t\t\t\t\thasUiNodes = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// generate code for proxy property assignments\n\t\tif (isProxyProperty) {\n\t\t\tproxyProperties[U.proxyPropertyNameFromFullname(fullname)] = parentSymbol;\n\n\t\t// generate code for the attribtuedString\n\t\t} else if (isAttributedString) {\n\t\t\tproxyProperties.attributedString = parentSymbol;\n\t\t\tnode.removeChild(child);\n\n\t\t// generate code for the attribtuedHintText\n\t\t} else if (isAttributedHintText) {\n\t\t\tproxyProperties.attributedHintText = parentSymbol;\n\t\t\tnode.removeChild(child);\n\n\t\t// generate code for the child components\n\t\t} else if (hasUiNodes || !isControllerNode) {\n\t\t\tpostCode += '<%= parentSymbol %>.add(' + parentSymbol + ');';\n\t\t}\n\n\t});\n\n\t// support shortcuts for keyboard type, return key type, and autocapitalization\n\tvar keyboardType = node.getAttribute('keyboardType');\n\tif (_.contains(KEYBOARD_TYPES, keyboardType.toUpperCase())) {\n\t\tnode.setAttribute('keyboardType', 'Ti.UI.KEYBOARD_' + keyboardType.toUpperCase());\n\t}\n\tvar returnKey = node.getAttribute('returnKeyType');\n\tif (_.contains(RETURN_KEY_TYPES, returnKey.toUpperCase())) {\n\t\tnode.setAttribute('returnKeyType', 'Ti.UI.RETURNKEY_' + returnKey.toUpperCase());\n\t}\n\tvar autocapitalization = node.getAttribute('keyboardType');\n\tif (_.contains(AUTOCAPITALIZATION_TYPES, autocapitalization.toUpperCase())) {\n\t\tnode.setAttribute('autocapitalization', 'Ti.UI.TEXT_AUTOCAPITALIZATION_' + autocapitalization.toUpperCase());\n\t}\n\n\n\t// add all creation time properties to the state\n\tif (node.hasAttribute('clearOnEdit')) {\n\t\tvar attr = node.getAttribute('clearOnEdit');\n\t\textras.push(['clearOnEdit', attr === 'true']);\n\t}\n\t_.each(proxyProperties, function(v, k) {\n\t\textras.push([k, v]);\n\t});\n\tif (extras.length) { state.extraStyle = styler.createVariableStyle(extras); }\n\n\t// generate the code for the textfield itself\n\tvar nodeState = require('./default').parse(node, state);\n\tcode += nodeState.code;\n\n\t// add the rows to the section\n\tif (nodeState.parent && postCode) {\n\t\tcode += _.template(postCode, {\n\t\t\tparentSymbol: nodeState.parent.symbol\n\t\t});\n\t}\n\n\t// Update the parsing state\n\treturn _.extend(state, {\n\t\tparent: nodeState.parent,\n\t\tcode: code\n\t});\n}\n```\n\n**alloy/Alloy/commands/compile/parsers/Ti.UI.TextArea**\n\n```Ti.UI.TextField``` \u306b ```AttributedString``` \u304c\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3088\u3046\u306b\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30b3\u30d4\u30da\u3057\u307e\u3059\u3002\n\n```js\nvar _ = require('../../../lib/alloy/underscore')._,\n\tstyler = require('../styler'),\n\tCU = require('../compilerUtils'),\n\tU = require('../../../utils'),\n\tCONST = require('../../../common/constants');\n\nvar KEYBOARD_TYPES = [\n\t'DEFAULT', 'ASCII', 'NUMBERS_PUNCTUATION', 'URL', 'EMAIL', 'DECIMAL_PAD', 'NAMEPHONE_PAD',\n\t'NUMBER_PAD', 'PHONE_PAD'\n];\nvar RETURN_KEY_TYPES = [\n\t'DEFAULT', 'DONE', 'EMERGENCY_CALL', 'GO', 'GOOGLE', 'JOIN', 'NEXT', 'ROUTE',\n\t'SEARCH', 'SEND', 'YAHOO'\n];\nvar AUTOCAPITALIZATION_TYPES = [\n\t'ALL', 'NONE', 'SENTENCES', 'WORDS'\n];\n\nexports.parse = function(node, state) {\n\treturn require('./base').parse(node, state, parse);\n};\n\nfunction parse(node, state, args) {\n\tvar code = '',\n\t\tpostCode = '',\n\t\textras = [],\n\t\tproxyProperties = {};\n\n\t// iterate through all children of the TextArea\n\t_.each(U.XML.getElementsFromNodes(node.childNodes), function(child) {\n\t\tvar fullname = CU.getNodeFullname(child),\n\t\t\tisProxyProperty = false,\n\t\t\tisControllerNode = false,\n\t\t\tisAttributedString = false,\n\t\t\thasUiNodes = false,\n\t\t\tcontrollerSymbol,\n\t\t\tparentSymbol;\n\n\t\tif (child.nodeName === 'AttributedString' && !child.hasAttribute('ns')) {\n\t\t\tchild.setAttribute('ns', 'Ti.UI.iOS');\n\t\t}\n\n\t\t// validate the child element and determine if it's part of\n\t\t// the textarea or a proxy property assigment\n\t\tif (!CU.isNodeForCurrentPlatform(child)) {\n\t\t\treturn;\n\t\t} else if (_.contains(CONST.CONTROLLER_NODES, fullname)) {\n\t\t\tisControllerNode = true;\n\t\t} else if (fullname.split('.')[0] === '_ProxyProperty') {\n\t\t\tisProxyProperty = true;\n\t\t} else if (CU.validateNodeName(child, 'Ti.UI.iOS.AttributedString')) {\n\t\t\tisAttributedString = true;\n\t\t}\n\n\t\t// generate the node\n\t\tcode += CU.generateNodeExtended(child, state, {\n\t\t\tparent: {},\n\t\t\tpost: function(node, state, args) {\n\t\t\t\tcontrollerSymbol = state.controller;\n\t\t\t\tparentSymbol = state.parent ? state.parent.symbol : null;\n\t\t\t}\n\t\t});\n\n\t\t// manually handle controller node proxy properties\n\t\tif (isControllerNode) {\n\n\t\t\t// set up any proxy properties at the top-level of the controller\n\t\t\tvar inspect = CU.inspectRequireNode(child);\n\t\t\t_.each(_.uniq(inspect.names), function(name) {\n\t\t\t\tif (name.split('.')[0] === '_ProxyProperty') {\n\t\t\t\t\tvar prop = U.proxyPropertyNameFromFullname(name);\n\t\t\t\t\tproxyProperties[prop] = controllerSymbol + '.getProxyPropertyEx(\"' + prop + '\", {recurse:true})';\n\t\t\t\t} else {\n\t\t\t\t\thasUiNodes = true;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// generate code for proxy property assignments\n\t\tif (isProxyProperty) {\n\t\t\tproxyProperties[U.proxyPropertyNameFromFullname(fullname)] = parentSymbol;\n\n\t\t// generate code for the attribtuedString\n\t\t} else if (isAttributedString) {\n\t\t\tproxyProperties.attributedString = parentSymbol;\n\t\t\tnode.removeChild(child);\n\n\t\t// generate code for the child components\n\t\t} else if (hasUiNodes || !isControllerNode) {\n\t\t\tpostCode += '<%= parentSymbol %>.add(' + parentSymbol + ');';\n\t\t}\n\n\t});\n\n\t// support shortcuts for keyboard type, return key type, and autocapitalization\n\tvar keyboardType = node.getAttribute('keyboardType');\n\tif (_.contains(KEYBOARD_TYPES, keyboardType.toUpperCase())) {\n\t\tnode.setAttribute('keyboardType', 'Ti.UI.KEYBOARD_' + keyboardType.toUpperCase());\n\t}\n\tvar returnKey = node.getAttribute('returnKeyType');\n\tif (_.contains(RETURN_KEY_TYPES, returnKey.toUpperCase())) {\n\t\tnode.setAttribute('returnKeyType', 'Ti.UI.RETURNKEY_' + returnKey.toUpperCase());\n\t}\n\tvar autocapitalization = node.getAttribute('keyboardType');\n\tif (_.contains(AUTOCAPITALIZATION_TYPES, autocapitalization.toUpperCase())) {\n\t\tnode.setAttribute('autocapitalization', 'Ti.UI.TEXT_AUTOCAPITALIZATION_' + autocapitalization.toUpperCase());\n\t}\n\n\n\t// add all creation time properties to the state\n\tif (node.hasAttribute('clearOnEdit')) {\n\t\tvar attr = node.getAttribute('clearOnEdit');\n\t\textras.push(['clearOnEdit', attr === 'true']);\n\t}\n\t_.each(proxyProperties, function(v, k) {\n\t\textras.push([k, v]);\n\t});\n\tif (extras.length) { state.extraStyle = styler.createVariableStyle(extras); }\n\n\t// generate the code for the textarea itself\n\tvar nodeState = require('./default').parse(node, state);\n\tcode += nodeState.code;\n\n\t// add the rows to the section\n\tif (nodeState.parent && postCode) {\n\t\tcode += _.template(postCode, {\n\t\t\tparentSymbol: nodeState.parent.symbol\n\t\t});\n\t}\n\n\t// Update the parsing state\n\treturn _.extend(state, {\n\t\tparent: nodeState.parent,\n\t\tcode: code\n\t});\n}\n```\n\n\u4ee5\u4e0a\u306b\u306a\u308a\u307e\u3059\u3002\u7279\u306b\u3001```Ti.UI.TextField``` \u3067 hintText \u306e\u8272\u3092\u5909\u3048\u305f\u3044\u3068\u304b\u3001\u7d50\u69cb\u9700\u8981\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u3088\u306d\u3002\u4f1d\u7d71\u82b8\u80fd\u306a\u3001\u4e0a\u306b\u30e9\u30d9\u30eb\u3092\u304a\u3044\u3066 change \u30a4\u30d9\u30f3\u30c8\u3092\u62fe\u3063\u3066\u3002\u3002\u3002\u3068\u3044\u3046\u5b9f\u88c5\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001attributedHintText \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u65ad\u7136\u697d\u3067\u3059\u3002\n\n**\u6ce8\u610f\u4e8b\u9805**\n\n\u3053\u308c\u306f Alloy \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u81ea\u4f53\u306b\u624b\u3092\u5165\u308c\u308b\u305f\u3081\u3001\u81ea\u5df1\u8cac\u4efb\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002\u307c\u304f\u306e\u74b0\u5883\u3067\u306f\u554f\u984c\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u307e\u3059\u304c\u3001\u6700\u60aa Alloy \u304c\u58ca\u308c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001Alloy 1.6 \u7cfb\u3067 AttributedString \u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308c\u3070\u3053\u306e\u6539\u9020\u306f\u4e0d\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n", "tags": ["Titanium", "Alloy"]}