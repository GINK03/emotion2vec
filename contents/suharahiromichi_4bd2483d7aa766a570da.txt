{"context": " More than 1 year has passed since last update.\n\n\u300c\u30ea\u30b9\u30c8\u306f\u81ea\u5206\u81ea\u8eab\u306efoldr\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u300d\u306b\u3064\u3044\u3066\n2014_05_11 @suharahiromichi\n\n\u306f\u3058\u3081\u306b\nTAPL\uff08\u53c2\u8003\u6587\u732e1.)\u306b\u306f\u3001p.47\u3068p.275\u306e2\u7b87\u6240\u306b\u6e21\u3063\u3066\u3001\u300c\u30ea\u30b9\u30c8\u306f\u81ea\u5206\u81ea\u8eab\u306efoldr\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u300d\u3068\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\u3057\u304b\u3057\u3001\u524d\u5f8c\u306e\u8aac\u660e\u3092\u8aad\u3093\u3067\u3082\u3053\u306e\u4e00\u6587\u306e\u610f\u5473\u3059\u308b\u3053\u3068\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3002\n\u307e\u305f\u3001\u5225\u306a\u3068\u3053\u308d\uff08\u540c p.277\uff09\u3067\u3001\u300c(System F\u306f)fix\u306b\u983c\u308b\u3053\u3068\u306a\u304f\u7d14\u7c8b\u306a\u8a00\u8a9e\u3067\u30bd\u30fc\u30c8\u95a2\u6570\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u66f8\u3051\u308b\u2026\u300d\u3068\u6975\u3081\u3066\u91cd\u8981\u306a\u3053\u3068\u304c\u66f8\u3044\u3066\u3042\u308b\u3002\u3053\u308c\u306f\u3001\u30c1\u30e3\u30fc\u30c1\u6570\u3084\u30ea\u30b9\u30c8\u306e\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\u304c\u305d\u306e\u3088\u3046\u306a\u6027\u8cea\u3092\u6301\u3064\u306e\u3067\u3042\u3063\u3066\u3001System F\u306f\u305d\u308c\u3089\u3092\u6271\u3048\u308b\uff08\u578b\u4ed8\u3051\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff09\u3068\u7406\u89e3\u3059\u308b\u3079\u304d\u306a\u306e\u3060\u308d\u3046\u3002\n\u4ee5\u4e0a\u306e\u3053\u3068\u3092\u7d0d\u5f97\u3059\u308b\u305f\u3081\u306b\u3001\u6570\u3084\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\u3001\n\nInductive\u306a\u5b9a\u7fa9\n\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\nfold\u95a2\u6570\n\n\u306e\u95a2\u4fc2\u3092\u8abf\u3079\u3066\u307f\u308b\u3002\u8a3c\u660e\u306fCoq SSRefelct\u3067\u884c\u3046\u3002\n\u3053\u306e\u6587\u7ae0\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3001\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/suharahiromichi/coq/blob/master/ssr/ssr_church_number.v\n\nRequire Import ssreflect ssrbool ssrnat.\n\n\n\n\n\u30c1\u30e3\u30fc\u30c1\u6570\n\n\u30c1\u30e3\u30fc\u30c1\u6570(CNat)\n\nDefinition CNat := forall X, (X -> X) -> X -> X.\n\nDefinition C0 : CNat := fun X => fun s : X -> X =>\n                                   fun z : X => z.\nDefinition C1 : CNat := fun X => fun s : X -> X =>\n                                   fun z : X => s z.\nDefinition C2 : CNat := fun X => fun s : X -> X =>\n                                   fun z : X => s (s z).\nDefinition CSucc : CNat -> CNat :=\n  fun n : CNat => fun X =>\n                    fun s : X -> X =>\n                      fun z : X => s (n X s z).\nEval compute in CSucc C0.\n\n\n\n\nInductive\u306aNat\u306e\u5b9a\u7fa9\n\nInductive Nat : Type :=\n| O\n| S of Nat.\n\n\n\n\nCNat\u3068Nat\u306e\u9593\u306e\u5909\u63db\n\nCNat\u3092Nat\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n\nDefinition CNat2Nat (c : CNat) : Nat :=\n  c Nat S O.\n\nEval compute in CNat2Nat C2.\n\n\n= S (S O) : Nat\n\u3053\u308c\u306f\u30c1\u30e3\u30fc\u30c1\u6570c\u306b\u3001S\u3092fold\u3057\u3066\u3044\u308b\u3068\u307f\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\nFold\u95a2\u6570\nInductive\u306b\u5b9a\u7fa9\u3057\u305fNat\u306b\u5bfe\u3057\u3066\u306f\u3001Fold\u3092\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\nFixpoint foldNat (X : Type) (s : X -> X) (z : X) (n : Nat) : X :=\n  match n with\n    | O => z\n    | S n' => s (foldNat X s z n')\n  end.\n\nCheck foldNat.\n\n\n: forall X : Type, (X -> X) -> X -> Nat -> X\n\nNat\u3092CNat\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n\nDefinition Nat2CNat (n : Nat) : CNat :=\n  fun X =>\n    fun s : X -> X =>\n      fun z : X => foldNat X s z n.\n\nEval compute in Nat2CNat (S (S O)).\n\n\n= fun (X : Type) (s : X -> X) (z : X) => s (s z) : CNat\nInductive\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u6574\u6570n\u306b\u3001s\u3092Fold\u3057\u3001\u305d\u306es\u3092\u03bb\u62bd\u8c61\u3059\u308b\u3068\u3001\u30c1\u30e3\u30fc\u30c1\u6570\u304c\u5f97\u3089\u308c\u308b\u3002\n\n\u8a3c\u660e\n\nC0\u3068O\u304c\u540c\u3058\u3001CSucc\u3068S\u306e\u7d50\u679c\u304c\u540c\u3058\u306b\u306a\u308b\u3053\u3068\u306e\u8a3c\u660e\n\nTheorem CNat_Nat_zero :\n  CNat2Nat C0 = O.\nProof.\n    by [].\nQed.\n\nTheorem CNat_Nat_succ :\n  forall c n,\n    CNat2Nat c = n -> CNat2Nat (CSucc c) = S n.\nProof.\n  rewrite /CNat2Nat /CSucc.\n    by move=> c n ->.\nQed.\n\n\n\n\nCNat2Nat\u3068Nat2CNat\u3067\u5143\u306b\u623b\u308b\u3053\u3068\u306e\u8a3c\u660e\n\nTheorem CNat2Nat_Nat2CNat :\n  forall n : Nat, CNat2Nat(Nat2CNat n) = n.\nProof.\n  rewrite /CNat2Nat /Nat2CNat.\n  elim.\n    by [].\n  by move=> /= n0 ->.\nQed.\n\n\n\n\n\u81ea\u7136\u6570\u306e\u30ea\u30b9\u30c8\n\u8981\u7d20\u306e\u81ea\u7136\u6570\u306f\u3001SSReflect\u306enat\u306e\u5b9a\u7fa9\u3092\u4f7f\u3046\u3002\n\n\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\n\nDefinition CListNat := forall R, (nat -> R -> R) -> R -> R.\n\nDefinition CNil : CListNat :=\n  fun R => fun c : nat -> R -> R =>\n             fun n : R => n.                (* [] *)\nDefinition CL1 : CListNat :=\n  fun R => fun c : nat -> R -> R =>\n             fun n : R => c 1 n.            (* [1] *)\nDefinition CL2 : CListNat :=\n  fun R => fun c : nat -> R -> R =>\n             fun n : R => c 1 (c 2 n).      (* [1,2] *)\nDefinition CL3 : CListNat :=\n  fun R => fun c : nat -> R -> R =>\n             fun n : R => c 1 (c 2 (c 3 n)). (* [1,2,3] *)\nDefinition CCons : nat -> CListNat -> CListNat :=\n  fun hd : nat =>\n    fun tl : CListNat =>\n      fun R =>\n        fun c : nat -> R -> R =>\n          fun n : R => c hd (tl R c n).\nEval compute in CCons 1 CNil.\n\n\n\n\nInductive\u306a\u5b9a\u7fa9\n\nInductive ListNat : Type :=\n| Nil\n| Cons of nat & ListNat.\n\n\n\n\nclist\u3068list\u306e\u9593\u306e\u5909\u63db\n\nclist\u3092list\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n\nDefinition clist2list (c : CListNat) : ListNat :=\n  c ListNat Cons Nil.\n\nEval compute in clist2list CL2.\n\n\n= Cons 1 (Cons 2 Nil) : ListNat\nclist2list\u306f\u3001\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\u306e\u30ea\u30b9\u30c8c\u306b\u3001Cons\u3092foldr\u3057\u3066\u3044\u308b\u3068\u307f\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\nFoldr\u95a2\u6570\nInductive\u306b\u5b9a\u7fa9\u3057\u305flist\u306b\u5bfe\u3057\u3066\u306f\u3001Fold\u3092\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\nFixpoint foldr (R : Type) (c : nat -> R -> R) (n : R) (l : ListNat) : R :=\n  match l with\n    | Nil => n\n    | Cons x l' => c x (foldr R c n l')\n  end.\n\nCheck foldr.\n\n\n: forall R : Type, (nat -> R -> R) -> R -> ListNat -> R\n\nlist\u3092clist\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n\nDefinition list2clist (l : ListNat) : CListNat :=\n  fun R =>\n    fun c : nat -> R -> R =>\n      fun n : R => foldr R c n l.\n\nEval compute in list2clist (Cons 1 (Cons 2 Nil)).\n\n\n= fun (R : Type) (c : nat -> R -> R) (n : R) => c 1 (c 2 n) : CListNat\nInductive\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30ea\u30b9\u30c8l\u306b\u3001c\u3092Foldr\u3057\u3001\u305d\u306ec\u3092\u03bb\u62bd\u8c61\u3059\u308b\u3068\u3001\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\u3067\u8868\u3057\u305f\u30ea\u30b9\u30c8\u304c\u5f97\u3089\u308c\u308b\u3002\n\n\u8a3c\u660e\n\nCNil\u3068nil\u304c\u540c\u3058\u3001CCons\u3068Cons\u306e\u7d50\u679c\u304c\u540c\u3058\u306b\u306a\u308b\u3053\u3068\u306e\u8a3c\u660e\n\nTheorem clist_list_nil :\n  clist2list CNil = Nil.\nProof.\n    by [].\nQed.\n\nTheorem clist_list_cons :\n  forall c l n,\n    clist2list c = l ->\n    clist2list (CCons n c) = Cons n l.\nProof.\n  rewrite /clist2list /CCons.\n    by move=> c l n ->.\nQed.\n\n\n\n\nclist2list\u3068list2clist\u3067\u5143\u306b\u623b\u308b\u3053\u3068\u306e\u8a3c\u660e\n\nTheorem clist2list_list2clist :\n  forall l : ListNat, clist2list(list2clist l) = l.\nProof.\n  rewrite /clist2list /list2clist.\n  elim.\n    by [].\n  by move=> /= n l ->.\nQed.\n\n\n\n\n\u307e\u3068\u3081\n\u308f\u304b\u3063\u305f\u3053\u3068\u3002\u30c1\u30e3\u30fc\u30c1\u6570\u3084\u30ea\u30b9\u30c8\u306e\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\u306f\u3001\u305d\u308c\u81ea\u8eab\u306bFold\u306e\u6a5f\u80fd\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3002\u307e\u305f\u3001Inductive\u306b\u5b9a\u7fa9\u3057\u305fnat\u3084list\u306f\u3001Fold\u95a2\u6570\u306b\u3088\u3063\u3066\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\u306b\u5909\u63db\u3067\u304d\u308b\u3053\u3068\u3002\n\u53c2\u8003\u6587\u732e2.\u306f\u3001\u7121\u9650\u5927\u306e\u30c1\u30e3\u30fc\u30c1\u6570\u3068\u4e0d\u52d5\u70b9\u6f14\u7b97\u5b50\u306e\u95a2\u4fc2\u3092Haskell\u3067\u8ad6\u3058\u305f\u3082\u306e\u3067\u3001FoldNat\u306e\u5b9a\u7fa9\u306a\u3069\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u3002\n\n\u53c2\u8003\u6587\u732e\n\nPierce\u3001\u4f4f\u4e95 \u76e3\u8a33\u300c\u578b\u30b7\u30b9\u30c6\u30e0\u5165\u9580 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u578b\u306e\u7406\u8ad6\u300d\u30aa\u30fc\u30e0\u793e\n\u9152\u4e95 \u300c\u4e0d\u52d5\u70b9\u6f14\u7b97\u5b50\u306f\u30c1\u30e3\u30fc\u30c1\u6570\u3067\u306e\u7121\u9650\u5927?\u300d http://msakai.jp/d/?date=20100628\n\n\n\n\u300c\u30ea\u30b9\u30c8\u306f\u81ea\u5206\u81ea\u8eab\u306efoldr\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u300d\u306b\u3064\u3044\u3066\n=========\n\n2014_05_11 @suharahiromichi\n\n\n# \u306f\u3058\u3081\u306b\nTAPL\uff08\u53c2\u8003\u6587\u732e1.)\u306b\u306f\u3001p.47\u3068p.275\u306e2\u7b87\u6240\u306b\u6e21\u3063\u3066\u3001\u300c\u30ea\u30b9\u30c8\u306f\u81ea\u5206\u81ea\u8eab\u306efoldr\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u300d\u3068\u66f8\u304b\u308c\u3066\u3044\u308b\u3002\u3057\u304b\u3057\u3001\u524d\u5f8c\u306e\u8aac\u660e\u3092\u8aad\u3093\u3067\u3082\u3053\u306e\u4e00\u6587\u306e\u610f\u5473\u3059\u308b\u3053\u3068\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3002\n\u307e\u305f\u3001\u5225\u306a\u3068\u3053\u308d\uff08\u540c p.277\uff09\u3067\u3001\u300c(System F\u306f)fix\u306b\u983c\u308b\u3053\u3068\u306a\u304f\u7d14\u7c8b\u306a\u8a00\u8a9e\u3067\u30bd\u30fc\u30c8\u95a2\u6570\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u66f8\u3051\u308b\u2026\u300d\u3068\u6975\u3081\u3066\u91cd\u8981\u306a\u3053\u3068\u304c\u66f8\u3044\u3066\u3042\u308b\u3002\u3053\u308c\u306f\u3001\u30c1\u30e3\u30fc\u30c1\u6570\u3084\u30ea\u30b9\u30c8\u306e\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\u304c\u305d\u306e\u3088\u3046\u306a\u6027\u8cea\u3092\u6301\u3064\u306e\u3067\u3042\u3063\u3066\u3001System F\u306f\u305d\u308c\u3089\u3092\u6271\u3048\u308b\uff08\u578b\u4ed8\u3051\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff09\u3068\u7406\u89e3\u3059\u308b\u3079\u304d\u306a\u306e\u3060\u308d\u3046\u3002\n\u4ee5\u4e0a\u306e\u3053\u3068\u3092\u7d0d\u5f97\u3059\u308b\u305f\u3081\u306b\u3001\u6570\u3084\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\u3001\n\n1. Inductive\u306a\u5b9a\u7fa9\n2. \u30c1\u30e3\u30fc\u30c1\u8868\u73fe\n3. fold\u95a2\u6570\n\n\u306e\u95a2\u4fc2\u3092\u8abf\u3079\u3066\u307f\u308b\u3002\u8a3c\u660e\u306fCoq SSRefelct\u3067\u884c\u3046\u3002\n\u3053\u306e\u6587\u7ae0\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3001\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/suharahiromichi/coq/blob/master/ssr/ssr_church_number.v\n\n\n\n```coq:\n\nRequire Import ssreflect ssrbool ssrnat.\n\n\n```\n\n# \u30c1\u30e3\u30fc\u30c1\u6570\n\n\n## \u30c1\u30e3\u30fc\u30c1\u6570(CNat)\n\n\n```coq:\n\nDefinition CNat := forall X, (X -> X) -> X -> X.\n\nDefinition C0 : CNat := fun X => fun s : X -> X =>\n                                   fun z : X => z.\nDefinition C1 : CNat := fun X => fun s : X -> X =>\n                                   fun z : X => s z.\nDefinition C2 : CNat := fun X => fun s : X -> X =>\n                                   fun z : X => s (s z).\nDefinition CSucc : CNat -> CNat :=\n  fun n : CNat => fun X =>\n                    fun s : X -> X =>\n                      fun z : X => s (n X s z).\nEval compute in CSucc C0.\n\n\n```\n\n## Inductive\u306aNat\u306e\u5b9a\u7fa9\n\n\n```coq:\n\nInductive Nat : Type :=\n| O\n| S of Nat.\n\n\n```\n\n## CNat\u3068Nat\u306e\u9593\u306e\u5909\u63db\n\n### CNat\u3092Nat\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n\n\n```coq:\n\nDefinition CNat2Nat (c : CNat) : Nat :=\n  c Nat S O.\n\nEval compute in CNat2Nat C2.\n\n```\n\n= S (S O) : Nat\n\u3053\u308c\u306f\u30c1\u30e3\u30fc\u30c1\u6570c\u306b\u3001S\u3092fold\u3057\u3066\u3044\u308b\u3068\u307f\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\n### Fold\u95a2\u6570\nInductive\u306b\u5b9a\u7fa9\u3057\u305fNat\u306b\u5bfe\u3057\u3066\u306f\u3001Fold\u3092\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n\n```coq:\n\nFixpoint foldNat (X : Type) (s : X -> X) (z : X) (n : Nat) : X :=\n  match n with\n    | O => z\n    | S n' => s (foldNat X s z n')\n  end.\n\nCheck foldNat.\n\n```\n\n : forall X : Type, (X -> X) -> X -> Nat -> X\n\n\n### Nat\u3092CNat\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n\n\n```coq:\n\nDefinition Nat2CNat (n : Nat) : CNat :=\n  fun X =>\n    fun s : X -> X =>\n      fun z : X => foldNat X s z n.\n\nEval compute in Nat2CNat (S (S O)).\n\n```\n\n = fun (X : Type) (s : X -> X) (z : X) => s (s z) : CNat\nInductive\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u6574\u6570n\u306b\u3001s\u3092Fold\u3057\u3001\u305d\u306es\u3092\u03bb\u62bd\u8c61\u3059\u308b\u3068\u3001\u30c1\u30e3\u30fc\u30c1\u6570\u304c\u5f97\u3089\u308c\u308b\u3002\n\n\n## \u8a3c\u660e\n\n### C0\u3068O\u304c\u540c\u3058\u3001CSucc\u3068S\u306e\u7d50\u679c\u304c\u540c\u3058\u306b\u306a\u308b\u3053\u3068\u306e\u8a3c\u660e\n\n\n```coq:\n\nTheorem CNat_Nat_zero :\n  CNat2Nat C0 = O.\nProof.\n    by [].\nQed.\n\nTheorem CNat_Nat_succ :\n  forall c n,\n    CNat2Nat c = n -> CNat2Nat (CSucc c) = S n.\nProof.\n  rewrite /CNat2Nat /CSucc.\n    by move=> c n ->.\nQed.\n\n\n```\n\n### CNat2Nat\u3068Nat2CNat\u3067\u5143\u306b\u623b\u308b\u3053\u3068\u306e\u8a3c\u660e\n\n\n```coq:\n\nTheorem CNat2Nat_Nat2CNat :\n  forall n : Nat, CNat2Nat(Nat2CNat n) = n.\nProof.\n  rewrite /CNat2Nat /Nat2CNat.\n  elim.\n    by [].\n  by move=> /= n0 ->.\nQed.\n\n\n```\n\n# \u81ea\u7136\u6570\u306e\u30ea\u30b9\u30c8\n\u8981\u7d20\u306e\u81ea\u7136\u6570\u306f\u3001SSReflect\u306enat\u306e\u5b9a\u7fa9\u3092\u4f7f\u3046\u3002\n\n## \u30c1\u30e3\u30fc\u30c1\u8868\u73fe\n\n\n```coq:\n\nDefinition CListNat := forall R, (nat -> R -> R) -> R -> R.\n\nDefinition CNil : CListNat :=\n  fun R => fun c : nat -> R -> R =>\n             fun n : R => n.                (* [] *)\nDefinition CL1 : CListNat :=\n  fun R => fun c : nat -> R -> R =>\n             fun n : R => c 1 n.            (* [1] *)\nDefinition CL2 : CListNat :=\n  fun R => fun c : nat -> R -> R =>\n             fun n : R => c 1 (c 2 n).      (* [1,2] *)\nDefinition CL3 : CListNat :=\n  fun R => fun c : nat -> R -> R =>\n             fun n : R => c 1 (c 2 (c 3 n)). (* [1,2,3] *)\nDefinition CCons : nat -> CListNat -> CListNat :=\n  fun hd : nat =>\n    fun tl : CListNat =>\n      fun R =>\n        fun c : nat -> R -> R =>\n          fun n : R => c hd (tl R c n).\nEval compute in CCons 1 CNil.\n\n\n```\n\n## Inductive\u306a\u5b9a\u7fa9\n\n\n```coq:\n\nInductive ListNat : Type :=\n| Nil\n| Cons of nat & ListNat.\n\n\n```\n\n## clist\u3068list\u306e\u9593\u306e\u5909\u63db\n\n### clist\u3092list\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n\n\n```coq:\n\nDefinition clist2list (c : CListNat) : ListNat :=\n  c ListNat Cons Nil.\n\nEval compute in clist2list CL2.\n\n```\n\n= Cons 1 (Cons 2 Nil) : ListNat\nclist2list\u306f\u3001\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\u306e\u30ea\u30b9\u30c8c\u306b\u3001Cons\u3092foldr\u3057\u3066\u3044\u308b\u3068\u307f\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\n### Foldr\u95a2\u6570\nInductive\u306b\u5b9a\u7fa9\u3057\u305flist\u306b\u5bfe\u3057\u3066\u306f\u3001Fold\u3092\u5b9a\u7fa9\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\n\n```coq:\n\nFixpoint foldr (R : Type) (c : nat -> R -> R) (n : R) (l : ListNat) : R :=\n  match l with\n    | Nil => n\n    | Cons x l' => c x (foldr R c n l')\n  end.\n\nCheck foldr.\n\n```\n\n : forall R : Type, (nat -> R -> R) -> R -> ListNat -> R\n\n\n### list\u3092clist\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n\n\n```coq:\n\nDefinition list2clist (l : ListNat) : CListNat :=\n  fun R =>\n    fun c : nat -> R -> R =>\n      fun n : R => foldr R c n l.\n\nEval compute in list2clist (Cons 1 (Cons 2 Nil)).\n\n```\n\n = fun (R : Type) (c : nat -> R -> R) (n : R) => c 1 (c 2 n) : CListNat\nInductive\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30ea\u30b9\u30c8l\u306b\u3001c\u3092Foldr\u3057\u3001\u305d\u306ec\u3092\u03bb\u62bd\u8c61\u3059\u308b\u3068\u3001\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\u3067\u8868\u3057\u305f\u30ea\u30b9\u30c8\u304c\u5f97\u3089\u308c\u308b\u3002\n\n\n## \u8a3c\u660e\n\n### CNil\u3068nil\u304c\u540c\u3058\u3001CCons\u3068Cons\u306e\u7d50\u679c\u304c\u540c\u3058\u306b\u306a\u308b\u3053\u3068\u306e\u8a3c\u660e\n\n\n```coq:\n\nTheorem clist_list_nil :\n  clist2list CNil = Nil.\nProof.\n    by [].\nQed.\n\nTheorem clist_list_cons :\n  forall c l n,\n    clist2list c = l ->\n    clist2list (CCons n c) = Cons n l.\nProof.\n  rewrite /clist2list /CCons.\n    by move=> c l n ->.\nQed.\n\n\n```\n\n## clist2list\u3068list2clist\u3067\u5143\u306b\u623b\u308b\u3053\u3068\u306e\u8a3c\u660e\n\n\n\n```coq:\n\nTheorem clist2list_list2clist :\n  forall l : ListNat, clist2list(list2clist l) = l.\nProof.\n  rewrite /clist2list /list2clist.\n  elim.\n    by [].\n  by move=> /= n l ->.\nQed.\n\n\n```\n\n# \u307e\u3068\u3081\n\u308f\u304b\u3063\u305f\u3053\u3068\u3002\u30c1\u30e3\u30fc\u30c1\u6570\u3084\u30ea\u30b9\u30c8\u306e\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\u306f\u3001\u305d\u308c\u81ea\u8eab\u306bFold\u306e\u6a5f\u80fd\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3002\u307e\u305f\u3001Inductive\u306b\u5b9a\u7fa9\u3057\u305fnat\u3084list\u306f\u3001Fold\u95a2\u6570\u306b\u3088\u3063\u3066\u30c1\u30e3\u30fc\u30c1\u8868\u73fe\u306b\u5909\u63db\u3067\u304d\u308b\u3053\u3068\u3002\n\u53c2\u8003\u6587\u732e2.\u306f\u3001\u7121\u9650\u5927\u306e\u30c1\u30e3\u30fc\u30c1\u6570\u3068\u4e0d\u52d5\u70b9\u6f14\u7b97\u5b50\u306e\u95a2\u4fc2\u3092Haskell\u3067\u8ad6\u3058\u305f\u3082\u306e\u3067\u3001FoldNat\u306e\u5b9a\u7fa9\u306a\u3069\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u3002\n\n\n# \u53c2\u8003\u6587\u732e\n\n1. Pierce\u3001\u4f4f\u4e95 \u76e3\u8a33\u300c\u578b\u30b7\u30b9\u30c6\u30e0\u5165\u9580 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3068\u578b\u306e\u7406\u8ad6\u300d\u30aa\u30fc\u30e0\u793e\n2. \u9152\u4e95 \u300c\u4e0d\u52d5\u70b9\u6f14\u7b97\u5b50\u306f\u30c1\u30e3\u30fc\u30c1\u6570\u3067\u306e\u7121\u9650\u5927?\u300d http://msakai.jp/d/?date=20100628\n\n\n```\n", "tags": ["TaPL", "Coq", "ssreflect", "\u8a3c\u660e"]}