{"tags": ["Kinect", "VisualStudio", "C++", "OpenCV", "\u753b\u50cf\u51e6\u7406"], "context": " More than 1 year has passed since last update.\n\nKinectFusion\nKinectFusion\u3068\u306f\u3001Kinect\u3092\u7528\u3044\u3066SLAM\uff08Simultaneous Localization and Mapping\uff09\uff1a\u81ea\u5df1\u4f4d\u7f6e\u63a8\u5b9a\u3068\u5730\u56f3\u4f5c\u6210\u3092\u540c\u6642\u306b\u884c\u3046\u6280\u8853\u3067\u3042\u308b\u3002\nKinect Developer Toolkit 1.8\u3067\u3082\u4f53\u9a13\u3067\u304d\u308b\u304c\u3001\u5b9f\u969b\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3044\u3058\u3063\u3066\u3001Kinect\u3092\u52d5\u304b\u3057\u305f\u4f4d\u7f6e\u3092\u5f97\u3066\u307f\u3088\u3046\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u66f8\u7c4d\u300cKinect for Windows SDK \u5b9f\u8df5\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300d\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3002\u66f8\u7c4d\u3092\u305c\u3072\u8cb7\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u6570\u5c11\u306a\u3044Kinect v1 C++\u7de8\u306e\u826f\u66f8\u3067\u3059\u3002\n\nKinectFusion.cpp\u3000\u30fb\u30fb\u30fb\u30e1\u30a4\u30f3\nKinectFusionHelper.cpp\u3000\u30fb\u30fb\u30fb\u95a2\u6570\nKinectFusionHelper.h\u3000\u30fb\u30fb\u30fb\u95a2\u6570\u306e\u5b9a\u7fa9\n\n\n\u81ea\u5df1\u4f4d\u7f6e\u306e\u8868\u793a\n\u30e1\u30a4\u30f3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u898b\u3066\u307f\u3088\u3046\u3002\n\u81ea\u5df1\u4f4d\u7f6e\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5909\u6570\u306fworldToCameraTransform\u3067\u3042\u308b\u3002\nworldToCameraTransform\u306f4\u00d74\u306e\u884c\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\nworldToCameraTransform.M41\nworldToCameraTransform.M42\nworldToCameraTransform.M43\n\n\u304c\u305d\u308c\u305e\u308c\u81ea\u5df1\u4f4d\u7f6e\u306e\uff08X,Y,Z\uff09\u3092\u8868\u3057\u3066\u3044\u308b\u3002\u5358\u4f4d\u306f[m]\u3002\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306b\u8868\u793a\u3059\u308b\u5834\u5408\u30013\u6b21\u5143\u5f62\u72b6\u306e\u518d\u69cb\u6210\u51e6\u7406\u306e\u4e0b\u306b\u3001\nstd::cout << \"T = \" << worldToCameraTransform.M41 << \" \" << worldToCameraTransform.M42 << \" \" << worldToCameraTransform.M43 << std::endl;\n\n\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n\u81ea\u5df1\u4f4d\u7f6e\u306e\u4fdd\u5b58\n\u6bce\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u81ea\u5df1\u4f4d\u7f6e\u3092\u4fdd\u6301\u3057\u3066\u3044\u304f\u305f\u3081\u306b\u3001main\u306e\u6700\u521d\u306b\u3001\nstd::vector<Matrix4> worldToCameraTransformSeq;\n\n\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n3\u6b21\u5143\u5f62\u72b6\u306e\u518d\u69cb\u6210\u51e6\u7406\u306e\u4e0b\u306b\u3001\nworldToCameraTransformSeq.push_back(worldToCameraTransform);\n\n\u3092\u8ffd\u52a0\u3057\u3001\u81ea\u5df1\u4f4d\u7f6e\u3092\u30d7\u30c3\u30b7\u30e5\u30d0\u30c3\u30af\u3057\u3066\u3044\u304f\u3002\n3\u6b21\u5143\u518d\u69cb\u7bc9\u306e\u30a8\u30e9\u30fc\u304c\u591a\u3044\u5834\u5408\u3001\u30de\u30c3\u30d7\u304c\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u308b\u305f\u3081\u3001\u4fdd\u6301\u3057\u3066\u304d\u305f\u81ea\u5df1\u4f4d\u7f6e\u3082\u30ea\u30bb\u30c3\u30c8\u3057\u3088\u3046\u3002\nResetReconstruction(pReconstruction, &worldToCameraTransform);\n\n\u306e\u4e0b\u306b\u3001\u30ea\u30b5\u30a4\u30ba\u3067\u521d\u671f\u5316\u3059\u308b\u3002\nworldToCameraTransformSeq.resize(0);\n\n's'\u30ad\u30fc\u3067\u518d\u69cb\u7bc9\u3057\u305f\u30de\u30c3\u30d7(mesh.ply)\u3092\u4fdd\u5b58\u3067\u304d\u308b\u3002\u3053\u308c\u3068\u4e00\u7dd2\u306b\u81ea\u5df1\u4f4d\u7f6e\u3082\u70b9\u7fa4\u3068\u3057\u3066\u4fdd\u5b58\u3057\u3088\u3046\u3002KinectFusion.cpp\u306e\u4e2d\u3001\u30e1\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58(S\u30ad\u30fc)\u306e\u4e2d\u306b\u3001\nstd::cout << \"Save Camera Pose\" << std::endl;\nfileName = \"CameraPose.ply\";\nWriteAsciiPlyCameraPoseFile(&worldToCameraTransformSeq, fileName, true, true);\n\n\u3092\u8ffd\u52a0\u3057\u3066\u3001CameraPose.ply\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u5b9f\u969b\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u306fWriteAsciiPlyCameraPoseFile\u3067\u3042\u308b\u3002\nKinectFusionHelper.h\u306e\u4e2d\u306bWriteAsciiPlyCameraPoseFile\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n/// <summary>\n/// Write ASCII .PLY file\n/// See http://paulbourke.net/dataformats/ply/ for .PLY format\n/// </summary>\n/// <param name=\"worldToCameraTransformSeq\">The Kinect Fusion Camera Transform Matrix.</param>\n/// <param name=\"lpOleFileName\">The full path and filename of the file to save.</param>\n/// <param name=\"flipYZ\">Flag to determine whether the Y and Z values are flipped on save.</param>\n/// <param name=\"outputColor\">Set this true to write out the camera pose color to the file when it has been captured.</param>\n/// <returns>indicates success or failure</returns>\n/*HRESULT WriteAsciiPlyCameraPoseFile(std::vector<Matrix4> *worldToCameraTransformSeq, LPOLESTR lpOleFileName, bool flipYZ, bool outputColor)*/\nHRESULT WriteAsciiPlyCameraPoseFile(std::vector<Matrix4> *worldToCameraTransformSeq, char* lpOleFileName, bool flipYZ, bool outputColor);\n\nKinectFusionHelper.cpp\u306e\u4e2d\u306bWriteAsciiPlyCameraPoseFile\u306e\u4e2d\u8eab\u3092\u8a18\u8ff0\u3059\u308b\u3002\n/// <summary>\n/// Write ASCII .PLY file\n/// See http://paulbourke.net/dataformats/ply/ for .PLY format\n/// </summary>\n/// <param name=\"worldToCameraTransformSeq\">The Kinect Fusion Camera Transform Matrix.</param>\n/// <param name=\"lpOleFileName\">The full path and filename of the file to save.</param>\n/// <param name=\"flipYZ\">Flag to determine whether the Y and Z values are flipped on save.</param>\n/// <param name=\"outputColor\">Set this true to write out the camera pose color to the file when it has been captured.</param>\n/// <returns>indicates success or failure</returns>\n/*HRESULT WriteAsciiPlyCameraPoseFile(std::vector<Matrix4> *worldToCameraTransformSeq, LPOLESTR lpOleFileName, bool flipYZ, bool outputColor)*/\nHRESULT WriteAsciiPlyCameraPoseFile(std::vector<Matrix4> *worldToCameraTransformSeq, char* lpOleFileName, bool flipYZ, bool outputColor)\n{\n    HRESULT hr = S_OK;\n\n    If (NULL == worldToCameraTransformSeq)\n    {\n        return E_INVALIDARG;\n    }\n\n    unsigned int numVertices = worldToCameraTransformSeq->size();\n\n    if (0 == numVertices)\n    {\n        return E_INVALIDARG;\n    }\n\n    // Open File\n    /*USES_CONVERSION;*/\n    char* pszFileName = NULL;\n\n    try\n    {\n        /*pszFileName = OLE2A(lpOleFileName);*/\n        pszFileName = lpOleFileName;\n\n    }\n    catch (...)\n    {\n        return E_INVALIDARG;\n    }\n\n    FILE *cameraPoseFile = NULL;\n    errno_t err = fopen_s(&cameraPoseFile, pszFileName, \"wt\");\n\n    // Could not open file for writing - return\n    if (0 != err || NULL == cameraPoseFile)\n    {\n        return E_ACCESSDENIED;\n    }\n\n    // Write the header line\n    std::string header = \"ply\\nformat ascii 1.0\\ncomment file created by Microsoft Kinect Fusion\\n\";\n    fwrite(header.c_str(), sizeof(char), header.length(), cameraPoseFile);\n\n    const unsigned int bufSize = MAX_PATH * 3;\n    char outStr[bufSize];\n    int written = 0;\n\n    if (outputColor)\n    {\n        // Elements are: x,y,z, r,g,b\n        written = sprintf_s(outStr, bufSize, \"element vertex %u\\nproperty float x\\nproperty float y\\nproperty float z\\nproperty uchar red\\nproperty uchar green\\nproperty uchar blue\\n\", numVertices);\n        fwrite(outStr, sizeof(char), written, cameraPoseFile);\n    }\n    else\n    {\n        // Elements are: x,y,z\n        written = sprintf_s(outStr, bufSize, \"element vertex %u\\nproperty float x\\nproperty float y\\nproperty float z\\n\", numVertices);\n        fwrite(outStr, sizeof(char), written, cameraPoseFile);\n    }\n\n    written = sprintf_s(outStr, bufSize, \"end_header\\n\");\n    fwrite(outStr, sizeof(char), written, cameraPoseFile);\n\n    if (flipYZ)\n    {\n        if (outputColor)\n        {\n            //red color camera pose x -y -z\n            std::vector<Matrix4>::iterator begin = worldToCameraTransformSeq->begin();\n            std::vector<Matrix4>::iterator end = worldToCameraTransformSeq->end();\n\n            for (; begin != end; begin++){\n                written = sprintf_s(outStr, \"%lf %lf %lf 255 0 0\\n\", begin->M41, -begin->M42, -begin->M43);\n                fwrite(outStr, sizeof(char), written, cameraPoseFile);\n            }\n        }\n        else\n        {\n            //camera pose\n            std::vector<Matrix4>::iterator begin = worldToCameraTransformSeq->begin();\n            std::vector<Matrix4>::iterator end = worldToCameraTransformSeq->end();\n\n            for (; begin != end; begin++){\n                written = sprintf_s(outStr, \"%lf %lf %lf\\n\", begin->M41, -begin->M42, -begin->M43);\n                fwrite(outStr, sizeof(char), written, cameraPoseFile);\n            }\n        }\n    }\n    else\n    {\n        if (outputColor)\n        {\n            //read color camera pose\n            std::vector<Matrix4>::iterator begin = worldToCameraTransformSeq->begin();\n            std::vector<Matrix4>::iterator end = worldToCameraTransformSeq->end();\n\n            for (; begin != end; begin++){\n                written = sprintf_s(outStr, \"%lf %lf %lf 255 0 0\\n\", begin->M41, begin->M42, begin->M43);\n                fwrite(outStr, sizeof(char), written, cameraPoseFile);\n            }\n        }\n        else\n        {\n            //camera pose\n            std::vector<Matrix4>::iterator begin = worldToCameraTransformSeq->begin();\n            std::vector<Matrix4>::iterator end = worldToCameraTransformSeq->end();\n\n            for (; begin != end; begin++){\n                written = sprintf_s(outStr, \"%lf %lf %lf\\n\", begin->M41, begin->M42, begin->M43);\n                fwrite(outStr, sizeof(char), written, cameraPoseFile);\n            }\n        }\n    }\n\n    fflush(cameraPoseFile);\n    fclose(cameraPoseFile);\n\n    return hr;\n}\n\n\u3067\u304d\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\uff08Relese\u30e2\u30fc\u30c9\u3067\u3057\u304b\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\uff09\n\u5b9f\u884c\u3057\u3066\u3001's'\u30ad\u30fc\u3067\u4fdd\u5b58\u3057\u3001'esc'\u30ad\u30fc\u3067\u7d42\u4e86\u3002\nMeshLab\u3067mesh.ply\u3068CameraPose.ply\u3092\u540c\u6642\u306b\u958b\u304d\u3001\u898b\u3066\u307f\u308b\u3068\u3001\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3001Kinect\u30ab\u30e1\u30e9\u304c\u52d5\u3044\u305f\u4f4d\u7f6e\u304c\u8d64\u3044\u70b9\u7fa4\u3067\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3002\n\u203bKinect XBOX360\u3067\u78ba\u8a8d\u3059\u308b\u969b\u306b\u3001\u4e00\u90e8\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u90e8\u5206\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8&\u5909\u66f4\u3057\u305f\u3002Relese\u30e2\u30fc\u30c9\u3067\u3057\u304b\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n// Near Mode\u306e\u8a2d\u5b9a XBOX360\u3067\u306f\u3067\u304d\u306a\u3044\n//hResult = pSensor->NuiImageStreamSetImageFrameFlags(hDepthPlayerHandle, NUI_IMAGE_STREAM_FLAG_ENABLE_NEAR_MODE);\n//if (FAILED(hResult)){\n//  std::cerr << \"Error : NuiImageStreamSetImageFrameFlags\" << std::endl;\n//  return -1;\n//}\n\n// \u4f7f\u7528\u53ef\u80fd\u306a\u30e1\u30e2\u30ea\u91cf\nUINT memorySize = reconstructionParameter.voxelCountX * reconstructionParameter.voxelCountY * reconstructionParameter.voxelCountZ * 4 / 1024;//\u3060\u3044\u305f\u30444GB\n\n//XBOX360\u3067\u30a8\u30e9\u30fc\n//hResult = NuiFusionGetDeviceInfo(NUI_FUSION_RECONSTRUCTION_PROCESSOR_TYPE_AMP/*NUI_FUSION_RECONSTRUCTION_PROCESSOR_TYPE_CPU*/, -1, nullptr, 0, nullptr, 0, &memorySize);\n//if (FAILED(hResult)){\n//  std::cerr << \"Error : NuiFusionGetDeviceInfo\" << std::endl;\n//  return -1;\n//}\n\nKinect v2\u306b\u3088\u308bKinectFusion\u306f\u3053\u3061\u3089\n# KinectFusion\nKinectFusion\u3068\u306f\u3001Kinect\u3092\u7528\u3044\u3066SLAM\uff08Simultaneous Localization and Mapping\uff09\uff1a\u81ea\u5df1\u4f4d\u7f6e\u63a8\u5b9a\u3068\u5730\u56f3\u4f5c\u6210\u3092\u540c\u6642\u306b\u884c\u3046\u6280\u8853\u3067\u3042\u308b\u3002\nKinect Developer Toolkit 1.8\u3067\u3082\u4f53\u9a13\u3067\u304d\u308b\u304c\u3001\u5b9f\u969b\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3044\u3058\u3063\u3066\u3001Kinect\u3092\u52d5\u304b\u3057\u305f\u4f4d\u7f6e\u3092\u5f97\u3066\u307f\u3088\u3046\u3002\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u66f8\u7c4d\u300cKinect for Windows SDK \u5b9f\u8df5\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300d\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0](https://github.com/UnaNancyOwen/KinectBook2)\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3002\u66f8\u7c4d\u3092\u305c\u3072\u8cb7\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u6570\u5c11\u306a\u3044Kinect v1 C++\u7de8\u306e\u826f\u66f8\u3067\u3059\u3002\n\n- KinectFusion.cpp\u3000\u30fb\u30fb\u30fb\u30e1\u30a4\u30f3\n- KinectFusionHelper.cpp\u3000\u30fb\u30fb\u30fb\u95a2\u6570\n- KinectFusionHelper.h\u3000\u30fb\u30fb\u30fb\u95a2\u6570\u306e\u5b9a\u7fa9\n\n# \u81ea\u5df1\u4f4d\u7f6e\u306e\u8868\u793a\n\n\u30e1\u30a4\u30f3\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u898b\u3066\u307f\u3088\u3046\u3002\n\u81ea\u5df1\u4f4d\u7f6e\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5909\u6570\u306fworldToCameraTransform\u3067\u3042\u308b\u3002\nworldToCameraTransform\u306f4\u00d74\u306e\u884c\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n- worldToCameraTransform.M41\n- worldToCameraTransform.M42\n- worldToCameraTransform.M43\n\n\u304c\u305d\u308c\u305e\u308c\u81ea\u5df1\u4f4d\u7f6e\u306e\uff08X,Y,Z\uff09\u3092\u8868\u3057\u3066\u3044\u308b\u3002\u5358\u4f4d\u306f[m]\u3002\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306b\u8868\u793a\u3059\u308b\u5834\u5408\u30013\u6b21\u5143\u5f62\u72b6\u306e\u518d\u69cb\u6210\u51e6\u7406\u306e\u4e0b\u306b\u3001\n\n~~~\nstd::cout << \"T = \" << worldToCameraTransform.M41 << \" \" << worldToCameraTransform.M42 << \" \" << worldToCameraTransform.M43 << std::endl;\n~~~\n\n\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n# \u81ea\u5df1\u4f4d\u7f6e\u306e\u4fdd\u5b58\n\n\u6bce\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306e\u81ea\u5df1\u4f4d\u7f6e\u3092\u4fdd\u6301\u3057\u3066\u3044\u304f\u305f\u3081\u306b\u3001main\u306e\u6700\u521d\u306b\u3001\n\n~~~\nstd::vector<Matrix4> worldToCameraTransformSeq;\n~~~\n\n\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n3\u6b21\u5143\u5f62\u72b6\u306e\u518d\u69cb\u6210\u51e6\u7406\u306e\u4e0b\u306b\u3001\n\n\n~~~\nworldToCameraTransformSeq.push_back(worldToCameraTransform);\n~~~\n\n\u3092\u8ffd\u52a0\u3057\u3001\u81ea\u5df1\u4f4d\u7f6e\u3092\u30d7\u30c3\u30b7\u30e5\u30d0\u30c3\u30af\u3057\u3066\u3044\u304f\u3002\n\n3\u6b21\u5143\u518d\u69cb\u7bc9\u306e\u30a8\u30e9\u30fc\u304c\u591a\u3044\u5834\u5408\u3001\u30de\u30c3\u30d7\u304c\u30ea\u30bb\u30c3\u30c8\u3055\u308c\u308b\u305f\u3081\u3001\u4fdd\u6301\u3057\u3066\u304d\u305f\u81ea\u5df1\u4f4d\u7f6e\u3082\u30ea\u30bb\u30c3\u30c8\u3057\u3088\u3046\u3002\n\n~~~\nResetReconstruction(pReconstruction, &worldToCameraTransform);\n~~~\n\n\u306e\u4e0b\u306b\u3001\u30ea\u30b5\u30a4\u30ba\u3067\u521d\u671f\u5316\u3059\u308b\u3002\n\n~~~\nworldToCameraTransformSeq.resize(0);\n~~~\n\n's'\u30ad\u30fc\u3067\u518d\u69cb\u7bc9\u3057\u305f\u30de\u30c3\u30d7(mesh.ply)\u3092\u4fdd\u5b58\u3067\u304d\u308b\u3002\u3053\u308c\u3068\u4e00\u7dd2\u306b\u81ea\u5df1\u4f4d\u7f6e\u3082\u70b9\u7fa4\u3068\u3057\u3066\u4fdd\u5b58\u3057\u3088\u3046\u3002KinectFusion.cpp\u306e\u4e2d\u3001\u30e1\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58(S\u30ad\u30fc)\u306e\u4e2d\u306b\u3001\n\n~~~\nstd::cout << \"Save Camera Pose\" << std::endl;\nfileName = \"CameraPose.ply\";\nWriteAsciiPlyCameraPoseFile(&worldToCameraTransformSeq, fileName, true, true);\n~~~\n\n\u3092\u8ffd\u52a0\u3057\u3066\u3001CameraPose.ply\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u5b9f\u969b\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u306fWriteAsciiPlyCameraPoseFile\u3067\u3042\u308b\u3002\nKinectFusionHelper.h\u306e\u4e2d\u306bWriteAsciiPlyCameraPoseFile\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n~~~\n/// <summary>\n/// Write ASCII .PLY file\n/// See http://paulbourke.net/dataformats/ply/ for .PLY format\n/// </summary>\n/// <param name=\"worldToCameraTransformSeq\">The Kinect Fusion Camera Transform Matrix.</param>\n/// <param name=\"lpOleFileName\">The full path and filename of the file to save.</param>\n/// <param name=\"flipYZ\">Flag to determine whether the Y and Z values are flipped on save.</param>\n/// <param name=\"outputColor\">Set this true to write out the camera pose color to the file when it has been captured.</param>\n/// <returns>indicates success or failure</returns>\n/*HRESULT WriteAsciiPlyCameraPoseFile(std::vector<Matrix4> *worldToCameraTransformSeq, LPOLESTR lpOleFileName, bool flipYZ, bool outputColor)*/\nHRESULT WriteAsciiPlyCameraPoseFile(std::vector<Matrix4> *worldToCameraTransformSeq, char* lpOleFileName, bool flipYZ, bool outputColor);\n~~~\n\nKinectFusionHelper.cpp\u306e\u4e2d\u306bWriteAsciiPlyCameraPoseFile\u306e\u4e2d\u8eab\u3092\u8a18\u8ff0\u3059\u308b\u3002\n\n~~~\n/// <summary>\n/// Write ASCII .PLY file\n/// See http://paulbourke.net/dataformats/ply/ for .PLY format\n/// </summary>\n/// <param name=\"worldToCameraTransformSeq\">The Kinect Fusion Camera Transform Matrix.</param>\n/// <param name=\"lpOleFileName\">The full path and filename of the file to save.</param>\n/// <param name=\"flipYZ\">Flag to determine whether the Y and Z values are flipped on save.</param>\n/// <param name=\"outputColor\">Set this true to write out the camera pose color to the file when it has been captured.</param>\n/// <returns>indicates success or failure</returns>\n/*HRESULT WriteAsciiPlyCameraPoseFile(std::vector<Matrix4> *worldToCameraTransformSeq, LPOLESTR lpOleFileName, bool flipYZ, bool outputColor)*/\nHRESULT WriteAsciiPlyCameraPoseFile(std::vector<Matrix4> *worldToCameraTransformSeq, char* lpOleFileName, bool flipYZ, bool outputColor)\n{\n\tHRESULT hr = S_OK;\n\n\tIf (NULL == worldToCameraTransformSeq)\n\t{\n\t\treturn E_INVALIDARG;\n\t}\n\n\tunsigned int numVertices = worldToCameraTransformSeq->size();\n\t\n\tif (0 == numVertices)\n\t{\n\t\treturn E_INVALIDARG;\n\t}\n\n\t// Open File\n\t/*USES_CONVERSION;*/\n\tchar* pszFileName = NULL;\n\n\ttry\n\t{\n\t\t/*pszFileName = OLE2A(lpOleFileName);*/\n\t\tpszFileName = lpOleFileName;\n\n\t}\n\tcatch (...)\n\t{\n\t\treturn E_INVALIDARG;\n\t}\n\n\tFILE *cameraPoseFile = NULL;\n\terrno_t err = fopen_s(&cameraPoseFile, pszFileName, \"wt\");\n\n\t// Could not open file for writing - return\n\tif (0 != err || NULL == cameraPoseFile)\n\t{\n\t\treturn E_ACCESSDENIED;\n\t}\n\n\t// Write the header line\n\tstd::string header = \"ply\\nformat ascii 1.0\\ncomment file created by Microsoft Kinect Fusion\\n\";\n\tfwrite(header.c_str(), sizeof(char), header.length(), cameraPoseFile);\n\n\tconst unsigned int bufSize = MAX_PATH * 3;\n\tchar outStr[bufSize];\n\tint written = 0;\n\n\tif (outputColor)\n\t{\n\t\t// Elements are: x,y,z, r,g,b\n\t\twritten = sprintf_s(outStr, bufSize, \"element vertex %u\\nproperty float x\\nproperty float y\\nproperty float z\\nproperty uchar red\\nproperty uchar green\\nproperty uchar blue\\n\", numVertices);\n\t\tfwrite(outStr, sizeof(char), written, cameraPoseFile);\n\t}\n\telse\n\t{\n\t\t// Elements are: x,y,z\n\t\twritten = sprintf_s(outStr, bufSize, \"element vertex %u\\nproperty float x\\nproperty float y\\nproperty float z\\n\", numVertices);\n\t\tfwrite(outStr, sizeof(char), written, cameraPoseFile);\n\t}\n\n\twritten = sprintf_s(outStr, bufSize, \"end_header\\n\");\n\tfwrite(outStr, sizeof(char), written, cameraPoseFile);\n\n\tif (flipYZ)\n\t{\n\t\tif (outputColor)\n\t\t{\n\t\t\t//red color camera pose x -y -z\n\t\t\tstd::vector<Matrix4>::iterator begin = worldToCameraTransformSeq->begin();\n\t\t\tstd::vector<Matrix4>::iterator end = worldToCameraTransformSeq->end();\n\n\t\t\tfor (; begin != end; begin++){\n\t\t\t\twritten = sprintf_s(outStr, \"%lf %lf %lf 255 0 0\\n\", begin->M41, -begin->M42, -begin->M43);\n\t\t\t\tfwrite(outStr, sizeof(char), written, cameraPoseFile);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//camera pose\n\t\t\tstd::vector<Matrix4>::iterator begin = worldToCameraTransformSeq->begin();\n\t\t\tstd::vector<Matrix4>::iterator end = worldToCameraTransformSeq->end();\n\n\t\t\tfor (; begin != end; begin++){\n\t\t\t\twritten = sprintf_s(outStr, \"%lf %lf %lf\\n\", begin->M41, -begin->M42, -begin->M43);\n\t\t\t\tfwrite(outStr, sizeof(char), written, cameraPoseFile);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (outputColor)\n\t\t{\n\t\t\t//read color camera pose\n\t\t\tstd::vector<Matrix4>::iterator begin = worldToCameraTransformSeq->begin();\n\t\t\tstd::vector<Matrix4>::iterator end = worldToCameraTransformSeq->end();\n\n\t\t\tfor (; begin != end; begin++){\n\t\t\t\twritten = sprintf_s(outStr, \"%lf %lf %lf 255 0 0\\n\", begin->M41, begin->M42, begin->M43);\n\t\t\t\tfwrite(outStr, sizeof(char), written, cameraPoseFile);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//camera pose\n\t\t\tstd::vector<Matrix4>::iterator begin = worldToCameraTransformSeq->begin();\n\t\t\tstd::vector<Matrix4>::iterator end = worldToCameraTransformSeq->end();\n\n\t\t\tfor (; begin != end; begin++){\n\t\t\t\twritten = sprintf_s(outStr, \"%lf %lf %lf\\n\", begin->M41, begin->M42, begin->M43);\n\t\t\t\tfwrite(outStr, sizeof(char), written, cameraPoseFile);\n\t\t\t}\n\t\t}\n\t}\n\n\tfflush(cameraPoseFile);\n\tfclose(cameraPoseFile);\n\n\treturn hr;\n}\n~~~\n\n\u3067\u304d\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3061\u3089](https://github.com/SatoshiRobatoFujimoto/KinectFusionV1/tree/master/KinectFusionV1)\u3002\uff08Relese\u30e2\u30fc\u30c9\u3067\u3057\u304b\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\uff09\n\n\u5b9f\u884c\u3057\u3066\u3001's'\u30ad\u30fc\u3067\u4fdd\u5b58\u3057\u3001'esc'\u30ad\u30fc\u3067\u7d42\u4e86\u3002\nMeshLab\u3067mesh.ply\u3068CameraPose.ply\u3092\u540c\u6642\u306b\u958b\u304d\u3001\u898b\u3066\u307f\u308b\u3068\u3001\n\n![snapshot00 - sample.png](https://qiita-image-store.s3.amazonaws.com/0/63863/0802eac5-f063-0104-f98c-729edbb57d39.png)\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3001Kinect\u30ab\u30e1\u30e9\u304c\u52d5\u3044\u305f\u4f4d\u7f6e\u304c\u8d64\u3044\u70b9\u7fa4\u3067\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3002\n\n\u203bKinect XBOX360\u3067\u78ba\u8a8d\u3059\u308b\u969b\u306b\u3001\u4e00\u90e8\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u90e8\u5206\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8&\u5909\u66f4\u3057\u305f\u3002Relese\u30e2\u30fc\u30c9\u3067\u3057\u304b\u5b9f\u884c\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n~~~\n// Near Mode\u306e\u8a2d\u5b9a XBOX360\u3067\u306f\u3067\u304d\u306a\u3044\n//hResult = pSensor->NuiImageStreamSetImageFrameFlags(hDepthPlayerHandle, NUI_IMAGE_STREAM_FLAG_ENABLE_NEAR_MODE);\n//if (FAILED(hResult)){\n//\tstd::cerr << \"Error : NuiImageStreamSetImageFrameFlags\" << std::endl;\n//\treturn -1;\n//}\n~~~\n~~~\n// \u4f7f\u7528\u53ef\u80fd\u306a\u30e1\u30e2\u30ea\u91cf\nUINT memorySize = reconstructionParameter.voxelCountX * reconstructionParameter.voxelCountY * reconstructionParameter.voxelCountZ * 4 / 1024;//\u3060\u3044\u305f\u30444GB\n\n//XBOX360\u3067\u30a8\u30e9\u30fc\n//hResult = NuiFusionGetDeviceInfo(NUI_FUSION_RECONSTRUCTION_PROCESSOR_TYPE_AMP/*NUI_FUSION_RECONSTRUCTION_PROCESSOR_TYPE_CPU*/, -1, nullptr, 0, nullptr, 0, &memorySize);\n//if (FAILED(hResult)){\n//\tstd::cerr << \"Error : NuiFusionGetDeviceInfo\" << std::endl;\n//\treturn -1;\n//}\n~~~\n\nKinect v2\u306b\u3088\u308bKinectFusion\u306f[\u3053\u3061\u3089](http://qiita.com/SatoshiRobatoFujimoto/items/68da949478dd86a99905)\n"}