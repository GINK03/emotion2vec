{"tags": ["rust"], "context": " More than 1 year has passed since last update.\u3053\u3061\u3089\u306e\u8a18\u4e8b \u3067 Rust 0.5 \u5411\u3051\u306b\u66f8\u304b\u308c\u305f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306e\u30b3\u30fc\u30c9\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u3002\u304c\u3001\u3088\u304f\u8aad\u3080\u3068\u3001\u501f\u7528\u95a2\u9023\u3067\u3001Rust 1.0 \u4ee5\u964d\u3067\u306f\u3067\u304d\u306a\u3055\u305d\u3046\u306a\u70b9\u304c\u3042\u3063\u305f\u3002\n\nquicksort-0.5.rs\nfn partition<T: Ord>(ns: &mut [T], l: uint, r: uint) -> uint {\n  let p = &mut ns[l];\n  let mut i = l + 1;\n  for uint::range(l+1,r) |j| {\n    if ns[j] < *p {\n      ns[i] <-> ns[j];\n      i += 1;\n    }\n  }\n  ns[l] <-> ns[i-1];\n  i - 1\n}\n\n// \u4ee5\u4e0b\u7565\n\n\nlet p = &mut ns[l]; \u3067\u3001\u914d\u5217\u306e\u30b9\u30e9\u30a4\u30b9\u306e\uff11\u8981\u7d20\u306b\u3064\u3044\u3066\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u3092\u5909\u6570\u306b\u675f\u7e1b\u3057\u3001\u305d\u306e\u675f\u7e1b\u304c\u6709\u52b9\u306a\u9593\u306b\u3001ns[i] <-> ns[j]; \u3067\u3001\u540c\u3058\u30b9\u30e9\u30a4\u30b9\u306e\u5225\u306e\uff12\u3064\u306e\u8981\u7d20\u3092\u30b9\u30ef\u30c3\u30d7\u3057\u3066\u3044\u308b\u3002\u30b9\u30ef\u30c3\u30d7\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u3053\u3061\u3089\u3082\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u304c\u5fc5\u8981\u306a\u306f\u305a\u3002\n\u305f\u3057\u304b\u306b\u3053\u306e\uff13\u3064\u306e\u8981\u7d20\u306f\u5225\u306e\u5024\u3092\u6307\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5b89\u5168\u6027\u3067\u306f\u554f\u984c\u306a\u3044\u306f\u305a\u3060\u3051\u3069\u3001Rust 1.0 \u4ee5\u964d\u3067\u540c\u3058\u30b9\u30e9\u30a4\u30b9\u304b\u3089\uff12\u3064\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u3092\u6301\u3066\u305f\u304b\u306a\u3068\u3001\u7591\u554f\u306b\u601d\u3063\u305f\u308f\u3051\u3060\u3002\n\u30b3\u30fc\u30c9\u3092 Rust 1.0 \u4ee5\u964d\u5411\u3051\uff081.6\u5b89\u5b9a\u7248\u3092\u4f7f\u7528\uff09\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u308b\u3068\u3001\u3084\u306f\u308a\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\n\nquicksort-1.6-0.rs\nfn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n    let pivot = &mut ns[left];\n    let mut i = left + 1;\n    for j in (left + 1)..right {\n        if ns[j] < *pivot {\n            ns.swap(i, j);\n            i += 1;\n        }\n    }\n    i -= 1;\n    ns.swap(left, i);\n    i\n}\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\uff1a\nsrc/quicksort-1.6-0.rs:5:12: 5:14 error: cannot borrow `*ns` as immutable because `ns[..]` is also borrowed as mutable [E0502]\nsrc/quicksort-1.6-0.rs:5         if ns[j] < *pivot {\n                                    ^~\nsrc/quicksort-1.6-0.rs:2:22: 2:30 note: previous borrow of `ns[..]` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `ns[..]` until the borrow ends\nsrc/quicksort-1.6-0.rs:2     let pivot = &mut ns[left];\n                                              ^~~~~~~~\nsrc/quicksort-1.6-0.rs:13:2: 13:2 note: previous borrow ends here\nsrc/quicksort-1.6-0.rs:1 fn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n...\nsrc/quicksort-1.6-0.rs:13 }\n                          ^\nsrc/quicksort-1.6-0.rs:6:13: 6:15 error: cannot borrow `*ns` as mutable more than once at a time [E0499]\nsrc/quicksort-1.6-0.rs:6             ns.swap(i, j);\n                                     ^~\nsrc/quicksort-1.6-0.rs:6:13: 6:15 help: run `rustc --explain E0499` to see a detailed explanation\nsrc/quicksort-1.6-0.rs:2:22: 2:30 note: previous borrow of `ns[..]` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `ns[..]` until the borrow ends\nsrc/quicksort-1.6-0.rs:2     let pivot = &mut ns[left];\n                                              ^~~~~~~~\nsrc/quicksort-1.6-0.rs:13:2: 13:2 note: previous borrow ends here\nsrc/quicksort-1.6-0.rs:1 fn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n...\nsrc/quicksort-1.6-0.rs:13 }\n                          ^\nsrc/quicksort-1.6-0.rs:11:5: 11:7 error: cannot borrow `*ns` as mutable more than once at a time [E0499]\nsrc/quicksort-1.6-0.rs:11     ns.swap(left, i);\n                              ^~\nsrc/quicksort-1.6-0.rs:11:5: 11:7 help: run `rustc --explain E0499` to see a detailed explanation\nsrc/quicksort-1.6-0.rs:2:22: 2:30 note: previous borrow of `ns[..]` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `ns[..]` until the borrow ends\nsrc/quicksort-1.6-0.rs:2     let pivot = &mut ns[left];\n                                              ^~~~~~~~\nsrc/quicksort-1.6-0.rs:13:2: 13:2 note: previous borrow ends here\nsrc/quicksort-1.6-0.rs:1 fn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n...\nsrc/quicksort-1.6-0.rs:13 }\n                          ^\nerror: aborting due to 3 previous errors\n\n\u5185\u5bb9\u306f\u3001pivot \u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u304c\u6709\u52b9\u306a\u9593\u306b\u3001\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167 if ns[j] \u3082\u3001\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167 ns.swap(i, j) \u3082\u3067\u304d\u307e\u305b\u3093\u3001\u3068\u3044\u3046\u3082\u306e\u3002\n\u5b9f\u306f pivot \u306f\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3067\u3044\u3044\u306e\u3067\u3001let pivot = &ns[left] \u3082\u8a66\u3057\u3066\u307f\u305f\u304c\u3001ns.swap(i, j) \u3067\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u7d50\u5c40\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\u8abf\u3079\u3066\u307f\u305f\u3068\u3053\u308d\u3001\uff13\u3064\u306e\u89e3\u6c7a\u6cd5\u304c\u898b\u3064\u304b\u3063\u305f\u3002\n\n\u89e3\u6c7a\u6cd5\uff11\uff1a\u53c2\u7167\u3092\u5909\u6570\u306b\u675f\u7e1b\u3057\u306a\u3044\n\u5909\u6570 pivot \u306b\u30b9\u30e9\u30a4\u30b9\u306e\u53c2\u7167\u304c\u675f\u7e1b\u3057\u3066\u3044\u308b\u304b\u3089\u4ed6\u3068\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u3059\u308b\u308f\u3051\u3067\u3001\u305d\u308c\u3092\u3084\u3081\u308c\u3070\u3088\u3044\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001pivot \u304c\u53c2\u7167\u3057\u3066\u3044\u308b &ns[left] \u306e\u5024\u306f\u3001pivot \u304c\u5fc5\u8981\u306a\u9593\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u3082\u554f\u984c\u306a\u304f\u52d5\u304f\u3002\n\nquicksort-1.6-1.rs\nfn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n    let mut i = left + 1;\n    for j in (left + 1)..right {\n        if ns[j] < ns[left] {\n            ns.swap(i, j);\n            i += 1;\n        }\n    }\n    i -= 1;\n    ns.swap(left, i);\n    i\n}\n\n\nlet pivot = &mut ns[left]; \u3092\u524a\u9664\u3057\u3066\u3001if ns[j] < *pivot \u306e\u4ee3\u308f\u308a\u306b if ns[j] < ns[left] \u3068\u3057\u305f\u3002\n\n\u89e3\u6c7a\u6cd5\uff12\uff1a\u5024\u3092\u8907\u88fd\uff08clone\uff09\u3059\u308b\n\u5024\u304c\u5909\u66f4\u3055\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u5024\u3092\u8907\u88fd\uff08clone\uff09\u3057\u3066\u3082\u3044\u3044\u3002\u8907\u88fd\u3055\u308c\u305f\u5024\u306f\u5143\u306e ns[left] \u3068\u306f\u5225\u7269\u306a\u306e\u3067\u3001\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u3057\u306a\u3044\u3002\n\nquicksort-1.6-2.rs\nfn partition<T: PartialOrd + Clone>(ns: &mut [T], left: usize, right: usize) -> usize {\n    let pivot = ns[left].clone();\n    let mut i = left + 1;\n    for j in (left + 1)..right {\n        if ns[j] < pivot {\n            ns.swap(i, j);\n            i += 1;\n        }\n    }\n    i -= 1;\n    ns.swap(left, i);\n    i\n}\n\n\nlet pivot = ns[left].clone(); \u3092\u8ffd\u52a0\u3057\u305f\u3002\u306a\u304a\u3001clone() \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3079\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u30c8\u30ec\u30a4\u30c8\u5236\u9650\u306b Clone \u3092\u8ffd\u52a0\u3057\u305f\u3002\n\n\u89e3\u6c7a\u6cd5\uff13\uff1a\u30b9\u30e9\u30a4\u30b9\u306e\u501f\u7528\u3092\u5206\u5272\u3059\u308b\n\u3053\u308c\u306f\u3001Rust \u306e\u30a2\u30c9\u30d0\u30f3\u30b9\u30c9\u30e6\u30fc\u30b6\u30fc\u5411\u3051\u306e dark arts\uff08\u9b54\u8853\uff09\u672c\u3001\u300cThe Rustonomicon -- The Dark Arts of Advanced and Unsafe Rust Programming\u300d\u306e\u3001\u300cBorrow Splitting\u300d\u306e\u7ae0\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u305f\u65b9\u6cd5\u3002\n\u3068\u8a00\u3063\u3066\u3082\u3001\u5225\u306b\u90aa\u60aa\u3067\u3082\u4f55\u3067\u3082\u306a\u3044\u65b9\u6cd5\u3067\u3001Rust \u306e\u30b9\u30e9\u30a4\u30b9\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306b\u7528\u610f\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9 split_at_mut() \u3092\u547c\u3076\u3060\u3051\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001\u65e2\u5b58\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u3001\u8981\u7d20\u304c\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3057\u306a\u3044\uff12\u3064\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30b9\u30e9\u30a4\u30b9\u306b\u5206\u5272\u3067\u304d\u3001\u305d\u308c\u305e\u308c\u3092\u5225\u306b\u501f\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n\nquicksort-1.6-3.rs\nfn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n    let mut i = 0;\n    {\n        let (ns_left, ns_right) = ns.split_at_mut(left + 1);\n        let pivot = &ns_left[left];\n        for j in 0..(right - left - 1) {\n            if ns_right[j] < *pivot {\n                ns_right.swap(i, j);\n                i += 1;\n            }\n        }\n    }\n    i += left;\n    ns.swap(left, i);\n    i\n}\n\n\n\u3061\u306a\u307f\u306b\u3001split_at_mut() \u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u306f unsafe \u30d6\u30ed\u30c3\u30af\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u304c\u3001\u4f5c\u3089\u308c\u308b\u30b9\u30e9\u30a4\u30b9\u306f\u5168\u304f\u5b89\u5168\u306a\u3082\u306e\u3067\u3001\u4f7f\u7528\u306b\u3042\u305f\u3063\u3066\u306e\u6ce8\u610f\u306f\u5fc5\u8981\u306a\u3044\u3002\n\nsplit_at_mut\nfn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n    let len = self.len();\n    let ptr = self.as_mut_ptr();\n    assert!(mid <= len);\n    unsafe {\n        (from_raw_parts_mut(ptr, mid),\n         from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n    }\n}\n\n\n\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u3053\u306e\u65b9\u6cd5\u306f\u5c11\u3057\u3084\u308a\u904e\u304e\u306a\u611f\u304c\u3042\u308b\u304c\u3001\u899a\u3048\u3066\u304a\u304f\u3068\u4f55\u304b\u306e\u6642\u306b\u5f79\u7acb\u3064\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\u307e\u3068\u3081\n\n\u30b9\u30e9\u30a4\u30b9\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306e\u501f\u7528\u306f\u3001\u30b9\u30e9\u30a4\u30b9\u5168\u4f53\u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u308b\u3002\u8981\u7d20\u5358\u4f4d\u3067\u306f\u306a\u3044\u3002\n\u30b9\u30e9\u30a4\u30b9\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306e split_at_mut() \u3084 split_at() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001\u65e2\u5b58\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u3001\u8981\u7d20\u304c\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3057\u306a\u3044\uff12\u3064\u306e\u30b9\u30e9\u30a4\u30b9\u306b\u5206\u5272\u3067\u304d\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u305d\u308c\u305e\u308c\u3092\u5225\u306b\u501f\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n\n\n\u4ed8\u9332\uff1aRust 1.0 \u4ee5\u964d\u5411\u3051\u306b\u66f8\u304d\u63db\u3048\u305f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\u89e3\u6c7a\u6cd5\uff11\u3092\u63a1\u7528\nRust 1.6 \u5b89\u5b9a\u7248\u3067\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u6e08\u307f\n\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b Rust 0.5 \u5411\u3051\u306e\u30b3\u30fc\u30c9\u3092\u5143\u306b\u3057\u305f\n\u3053\u308c\u306f\u52c9\u5f37\u76ee\u7684\u306e\u30b3\u30fc\u30c9\u3002\u30b9\u30e9\u30a4\u30b9\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306b\u306f\u3001sort() \u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u901a\u5e38\u306f\u305d\u3061\u3089\u3092\u4f7f\u3046\u3079\u304d\u3002\n\n\nquicksort-1.6-1.rs\nfn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n    let mut i = left + 1;\n    for j in (left + 1)..right {\n        if ns[j] < ns[left] {\n            ns.swap(i, j);\n            i += 1;\n        }\n    }\n    i -= 1;\n    ns.swap(left, i);\n    i\n}\n\nfn quicksort<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n    if right - left <= 1 {\n        0\n    } else {\n        let pivot = partition(ns, left, right);\n        let a = quicksort(ns, left, pivot);\n        let b = quicksort(ns, pivot + 1, right);\n        a + b + (right - left - 1)\n    }\n}\n\nfn main() {\n    let mut nums = [1, 3, 2, 5, 10, 4, 6, 7, 8, 9];\n    let len = nums.len();\n    println!(\"{:?}\", &nums);\n    println!(\"\");\n    quicksort(&mut nums, 0, len);\n    println!(\"{:?}\", &nums);\n    assert_eq!([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums);\n}\n\n\n[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://qiita.com/nebutalab/items/2fcf078e27feab557fce) \u3067 Rust 0.5 \u5411\u3051\u306b\u66f8\u304b\u308c\u305f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306e\u30b3\u30fc\u30c9\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u305f\u3002\u304c\u3001\u3088\u304f\u8aad\u3080\u3068\u3001\u501f\u7528\u95a2\u9023\u3067\u3001Rust 1.0 \u4ee5\u964d\u3067\u306f\u3067\u304d\u306a\u3055\u305d\u3046\u306a\u70b9\u304c\u3042\u3063\u305f\u3002\n\n```rust:quicksort-0.5.rs\nfn partition<T: Ord>(ns: &mut [T], l: uint, r: uint) -> uint {\n  let p = &mut ns[l];\n  let mut i = l + 1;\n  for uint::range(l+1,r) |j| {\n    if ns[j] < *p {\n      ns[i] <-> ns[j];\n      i += 1;\n    }\n  }\n  ns[l] <-> ns[i-1];\n  i - 1\n}\n\n// \u4ee5\u4e0b\u7565\n```\n\n`let p = &mut ns[l];` \u3067\u3001\u914d\u5217\u306e\u30b9\u30e9\u30a4\u30b9\u306e\uff11\u8981\u7d20\u306b\u3064\u3044\u3066\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u3092\u5909\u6570\u306b\u675f\u7e1b\u3057\u3001\u305d\u306e\u675f\u7e1b\u304c\u6709\u52b9\u306a\u9593\u306b\u3001`ns[i] <-> ns[j];` \u3067\u3001\u540c\u3058\u30b9\u30e9\u30a4\u30b9\u306e\u5225\u306e\uff12\u3064\u306e\u8981\u7d20\u3092\u30b9\u30ef\u30c3\u30d7\u3057\u3066\u3044\u308b\u3002\u30b9\u30ef\u30c3\u30d7\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u3053\u3061\u3089\u3082\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u304c\u5fc5\u8981\u306a\u306f\u305a\u3002\n\n\u305f\u3057\u304b\u306b\u3053\u306e\uff13\u3064\u306e\u8981\u7d20\u306f\u5225\u306e\u5024\u3092\u6307\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5b89\u5168\u6027\u3067\u306f\u554f\u984c\u306a\u3044\u306f\u305a\u3060\u3051\u3069\u3001Rust 1.0 \u4ee5\u964d\u3067\u540c\u3058\u30b9\u30e9\u30a4\u30b9\u304b\u3089\uff12\u3064\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u3092\u6301\u3066\u305f\u304b\u306a\u3068\u3001\u7591\u554f\u306b\u601d\u3063\u305f\u308f\u3051\u3060\u3002\n\n\u30b3\u30fc\u30c9\u3092 Rust 1.0 \u4ee5\u964d\u5411\u3051\uff081.6\u5b89\u5b9a\u7248\u3092\u4f7f\u7528\uff09\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u308b\u3068\u3001\u3084\u306f\u308a\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\n\n```rust:quicksort-1.6-0.rs\nfn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n    let pivot = &mut ns[left];\n    let mut i = left + 1;\n    for j in (left + 1)..right {\n        if ns[j] < *pivot {\n            ns.swap(i, j);\n            i += 1;\n        }\n    }\n    i -= 1;\n    ns.swap(left, i);\n    i\n}\n```\n\n**\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\uff1a**\n\n```shell-session\nsrc/quicksort-1.6-0.rs:5:12: 5:14 error: cannot borrow `*ns` as immutable because `ns[..]` is also borrowed as mutable [E0502]\nsrc/quicksort-1.6-0.rs:5         if ns[j] < *pivot {\n                                    ^~\nsrc/quicksort-1.6-0.rs:2:22: 2:30 note: previous borrow of `ns[..]` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `ns[..]` until the borrow ends\nsrc/quicksort-1.6-0.rs:2     let pivot = &mut ns[left];\n                                              ^~~~~~~~\nsrc/quicksort-1.6-0.rs:13:2: 13:2 note: previous borrow ends here\nsrc/quicksort-1.6-0.rs:1 fn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n...\nsrc/quicksort-1.6-0.rs:13 }\n                          ^\nsrc/quicksort-1.6-0.rs:6:13: 6:15 error: cannot borrow `*ns` as mutable more than once at a time [E0499]\nsrc/quicksort-1.6-0.rs:6             ns.swap(i, j);\n                                     ^~\nsrc/quicksort-1.6-0.rs:6:13: 6:15 help: run `rustc --explain E0499` to see a detailed explanation\nsrc/quicksort-1.6-0.rs:2:22: 2:30 note: previous borrow of `ns[..]` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `ns[..]` until the borrow ends\nsrc/quicksort-1.6-0.rs:2     let pivot = &mut ns[left];\n                                              ^~~~~~~~\nsrc/quicksort-1.6-0.rs:13:2: 13:2 note: previous borrow ends here\nsrc/quicksort-1.6-0.rs:1 fn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n...\nsrc/quicksort-1.6-0.rs:13 }\n                          ^\nsrc/quicksort-1.6-0.rs:11:5: 11:7 error: cannot borrow `*ns` as mutable more than once at a time [E0499]\nsrc/quicksort-1.6-0.rs:11     ns.swap(left, i);\n                              ^~\nsrc/quicksort-1.6-0.rs:11:5: 11:7 help: run `rustc --explain E0499` to see a detailed explanation\nsrc/quicksort-1.6-0.rs:2:22: 2:30 note: previous borrow of `ns[..]` occurs here; the mutable borrow prevents subsequent moves, borrows, or modification of `ns[..]` until the borrow ends\nsrc/quicksort-1.6-0.rs:2     let pivot = &mut ns[left];\n                                              ^~~~~~~~\nsrc/quicksort-1.6-0.rs:13:2: 13:2 note: previous borrow ends here\nsrc/quicksort-1.6-0.rs:1 fn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n...\nsrc/quicksort-1.6-0.rs:13 }\n                          ^\nerror: aborting due to 3 previous errors\n```\n\n\u5185\u5bb9\u306f\u3001`pivot` \u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u304c\u6709\u52b9\u306a\u9593\u306b\u3001\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167 `if ns[j]` \u3082\u3001\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167 `ns.swap(i, j)` \u3082\u3067\u304d\u307e\u305b\u3093\u3001\u3068\u3044\u3046\u3082\u306e\u3002\n\n\u5b9f\u306f pivot \u306f\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3067\u3044\u3044\u306e\u3067\u3001`let pivot = &ns[left]` \u3082\u8a66\u3057\u3066\u307f\u305f\u304c\u3001`ns.swap(i, j)` \u3067\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u7d50\u5c40\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n\u8abf\u3079\u3066\u307f\u305f\u3068\u3053\u308d\u3001\uff13\u3064\u306e\u89e3\u6c7a\u6cd5\u304c\u898b\u3064\u304b\u3063\u305f\u3002\n\n\n## \u89e3\u6c7a\u6cd5\uff11\uff1a\u53c2\u7167\u3092\u5909\u6570\u306b\u675f\u7e1b\u3057\u306a\u3044\n\n\u5909\u6570 `pivot` \u306b\u30b9\u30e9\u30a4\u30b9\u306e\u53c2\u7167\u304c\u675f\u7e1b\u3057\u3066\u3044\u308b\u304b\u3089\u4ed6\u3068\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u3059\u308b\u308f\u3051\u3067\u3001\u305d\u308c\u3092\u3084\u3081\u308c\u3070\u3088\u3044\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001`pivot` \u304c\u53c2\u7167\u3057\u3066\u3044\u308b `&ns[left]` \u306e\u5024\u306f\u3001`pivot` \u304c\u5fc5\u8981\u306a\u9593\u306f\u5909\u66f4\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u3082\u554f\u984c\u306a\u304f\u52d5\u304f\u3002\n\n```rust:quicksort-1.6-1.rs\nfn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n    let mut i = left + 1;\n    for j in (left + 1)..right {\n        if ns[j] < ns[left] {\n            ns.swap(i, j);\n            i += 1;\n        }\n    }\n    i -= 1;\n    ns.swap(left, i);\n    i\n}\n```\n\n`let pivot = &mut ns[left];` \u3092\u524a\u9664\u3057\u3066\u3001`if ns[j] < *pivot` \u306e\u4ee3\u308f\u308a\u306b `if ns[j] < ns[left]` \u3068\u3057\u305f\u3002\n\n\n## \u89e3\u6c7a\u6cd5\uff12\uff1a\u5024\u3092\u8907\u88fd\uff08clone\uff09\u3059\u308b\n\n\u5024\u304c\u5909\u66f4\u3055\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u5024\u3092\u8907\u88fd\uff08clone\uff09\u3057\u3066\u3082\u3044\u3044\u3002\u8907\u88fd\u3055\u308c\u305f\u5024\u306f\u5143\u306e `ns[left]` \u3068\u306f\u5225\u7269\u306a\u306e\u3067\u3001\u30b3\u30f3\u30d5\u30ea\u30af\u30c8\u3057\u306a\u3044\u3002\n\n```rust:quicksort-1.6-2.rs\nfn partition<T: PartialOrd + Clone>(ns: &mut [T], left: usize, right: usize) -> usize {\n    let pivot = ns[left].clone();\n    let mut i = left + 1;\n    for j in (left + 1)..right {\n        if ns[j] < pivot {\n            ns.swap(i, j);\n            i += 1;\n        }\n    }\n    i -= 1;\n    ns.swap(left, i);\n    i\n}\n```\n\n`let pivot = ns[left].clone();` \u3092\u8ffd\u52a0\u3057\u305f\u3002\u306a\u304a\u3001`clone()` \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3079\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306e\u30c8\u30ec\u30a4\u30c8\u5236\u9650\u306b `Clone` \u3092\u8ffd\u52a0\u3057\u305f\u3002\n\n\n## \u89e3\u6c7a\u6cd5\uff13\uff1a\u30b9\u30e9\u30a4\u30b9\u306e\u501f\u7528\u3092\u5206\u5272\u3059\u308b\n\n\u3053\u308c\u306f\u3001Rust \u306e\u30a2\u30c9\u30d0\u30f3\u30b9\u30c9\u30e6\u30fc\u30b6\u30fc\u5411\u3051\u306e dark arts\uff08\u9b54\u8853\uff09\u672c\u3001\u300cThe Rustonomicon -- The Dark Arts of Advanced and Unsafe Rust Programming\u300d\u306e\u3001\u300c[Borrow Splitting](https://doc.rust-lang.org/nomicon/borrow-splitting.html)\u300d\u306e\u7ae0\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u305f\u65b9\u6cd5\u3002\n\n\u3068\u8a00\u3063\u3066\u3082\u3001\u5225\u306b\u90aa\u60aa\u3067\u3082\u4f55\u3067\u3082\u306a\u3044\u65b9\u6cd5\u3067\u3001Rust \u306e\u30b9\u30e9\u30a4\u30b9\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306b\u7528\u610f\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9 [split_at_mut()](https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut) \u3092\u547c\u3076\u3060\u3051\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001\u65e2\u5b58\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u3001\u8981\u7d20\u304c\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3057\u306a\u3044\uff12\u3064\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30b9\u30e9\u30a4\u30b9\u306b\u5206\u5272\u3067\u304d\u3001\u305d\u308c\u305e\u308c\u3092\u5225\u306b\u501f\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n\n\n```rust:quicksort-1.6-3.rs\nfn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n    let mut i = 0;\n    {\n        let (ns_left, ns_right) = ns.split_at_mut(left + 1);\n        let pivot = &ns_left[left];\n        for j in 0..(right - left - 1) {\n            if ns_right[j] < *pivot {\n                ns_right.swap(i, j);\n                i += 1;\n            }\n        }\n    }\n    i += left;\n    ns.swap(left, i);\n    i\n}\n```\n\n\u3061\u306a\u307f\u306b\u3001`split_at_mut()` \u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u306f `unsafe` \u30d6\u30ed\u30c3\u30af\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u304c\u3001\u4f5c\u3089\u308c\u308b\u30b9\u30e9\u30a4\u30b9\u306f\u5168\u304f\u5b89\u5168\u306a\u3082\u306e\u3067\u3001\u4f7f\u7528\u306b\u3042\u305f\u3063\u3066\u306e\u6ce8\u610f\u306f\u5fc5\u8981\u306a\u3044\u3002\n\n```rust:split_at_mut\nfn split_at_mut(&mut self, mid: usize) -> (&mut [T], &mut [T]) {\n    let len = self.len();\n    let ptr = self.as_mut_ptr();\n    assert!(mid <= len);\n    unsafe {\n        (from_raw_parts_mut(ptr, mid),\n         from_raw_parts_mut(ptr.offset(mid as isize), len - mid))\n    }\n}\n```\n\n\u4eca\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u3001\u3053\u306e\u65b9\u6cd5\u306f\u5c11\u3057\u3084\u308a\u904e\u304e\u306a\u611f\u304c\u3042\u308b\u304c\u3001\u899a\u3048\u3066\u304a\u304f\u3068\u4f55\u304b\u306e\u6642\u306b\u5f79\u7acb\u3064\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\n## \u307e\u3068\u3081\n\n- \u30b9\u30e9\u30a4\u30b9\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306e\u501f\u7528\u306f\u3001\u30b9\u30e9\u30a4\u30b9\u5168\u4f53\u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u308b\u3002\u8981\u7d20\u5358\u4f4d\u3067\u306f\u306a\u3044\u3002\n- \u30b9\u30e9\u30a4\u30b9\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306e `split_at_mut()` \u3084 `split_at()` \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3001\u65e2\u5b58\u306e\u30b9\u30e9\u30a4\u30b9\u3092\u3001\u8981\u7d20\u304c\u30aa\u30fc\u30d0\u30fc\u30e9\u30c3\u30d7\u3057\u306a\u3044\uff12\u3064\u306e\u30b9\u30e9\u30a4\u30b9\u306b\u5206\u5272\u3067\u304d\u308b\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u305d\u308c\u305e\u308c\u3092\u5225\u306b\u501f\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308b\u3002\n\n\n## \u4ed8\u9332\uff1aRust 1.0 \u4ee5\u964d\u5411\u3051\u306b\u66f8\u304d\u63db\u3048\u305f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\n\n- \u89e3\u6c7a\u6cd5\uff11\u3092\u63a1\u7528\n- Rust 1.6 \u5b89\u5b9a\u7248\u3067\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u6e08\u307f\n- [\u3053\u3061\u3089\u306e\u8a18\u4e8b\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b](http://qiita.com/nebutalab/items/2fcf078e27feab557fce) Rust 0.5 \u5411\u3051\u306e\u30b3\u30fc\u30c9\u3092\u5143\u306b\u3057\u305f\n- \u3053\u308c\u306f\u52c9\u5f37\u76ee\u7684\u306e\u30b3\u30fc\u30c9\u3002\u30b9\u30e9\u30a4\u30b9\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306b\u306f\u3001[sort()](https://doc.rust-lang.org/std/primitive.slice.html#method.sort) \u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u901a\u5e38\u306f\u305d\u3061\u3089\u3092\u4f7f\u3046\u3079\u304d\u3002\n\n```rust:quicksort-1.6-1.rs\nfn partition<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n    let mut i = left + 1;\n    for j in (left + 1)..right {\n        if ns[j] < ns[left] {\n            ns.swap(i, j);\n            i += 1;\n        }\n    }\n    i -= 1;\n    ns.swap(left, i);\n    i\n}\n\nfn quicksort<T: PartialOrd>(ns: &mut [T], left: usize, right: usize) -> usize {\n    if right - left <= 1 {\n        0\n    } else {\n        let pivot = partition(ns, left, right);\n        let a = quicksort(ns, left, pivot);\n        let b = quicksort(ns, pivot + 1, right);\n        a + b + (right - left - 1)\n    }\n}\n\nfn main() {\n    let mut nums = [1, 3, 2, 5, 10, 4, 6, 7, 8, 9];\n    let len = nums.len();\n    println!(\"{:?}\", &nums);\n    println!(\"\");\n    quicksort(&mut nums, 0, len);\n    println!(\"{:?}\", &nums);\n    assert_eq!([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nums);\n}\n```\n"}