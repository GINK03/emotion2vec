{"context": " More than 1 year has passed since last update.\n\nCommand\u304c\u6a19\u6e96\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u308bView\nXamarin.Forms\u3067\u6a19\u6e96\u3067Command\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u306f\u4e0b\u8a18\u306e3\u7a2e\u985e\u3060\u3051\u3067\u3059\u3002\n\u4ed6\u306eView\u3067Command\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u81ea\u524d\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nButton\nToolbarItem\nTextCell\n\n\u516c\u5f0f\uff1aPart 5. From Data Bindings to MVVM\n\nCommand\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5b9f\u88c5\u65b9\u6cd5\n\u5fc5\u8981\u306a\u306e\u306f\u4e0b\u8a18\u306e3\u7a2e\u985e\u3060\u3051\u3067\u3059\u3002\n\nobject CommandParameter\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9f\u88c5\nCommand Command\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9f\u88c5\nCommand\u306e\u547c\u3073\u51fa\u3057\u51e6\u7406\u3092\u5b9f\u88c5\n\n\nViewCell\u306e\u5b9f\u88c5\u4f8b\n\u4f8b\u3048\u3070ViewCell\u306a\u3089\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nC#\nusing Xamarin.Forms;\n\nnamespace MyProject.Controls\n{\n    public class CustomViewCell : ViewCell\n    {\n        public static readonly BindableProperty CommandParameterProperty = BindableProperty.Create<CustomViewCell, object>(i => i.CommandParameter, default(object), BindingMode.OneWay);\n\n        public object CommandParameter\n        {\n            get\n            {\n                return this.GetValue(CommandParameterProperty);\n            }\n            set\n            {\n                this.SetValue(CommandParameterProperty, value);\n            }\n        }\n\n        public static readonly BindableProperty CommandProperty = BindableProperty.Create<CustomViewCell, Command>(i => i.Command, null, BindingMode.OneWay);\n\n        public Command Command\n        {\n            get\n            {\n                return (Command)this.GetValue(CommandProperty);\n            }\n            set\n            {\n                this.SetValue(CommandProperty, value);\n            }\n        }\n\n        protected override void OnTapped()\n        {\n            base.OnTapped();\n\n            if (this.Command != null)\n            {\n                this.Command.Execute(this.CommandParameter ?? this);\n            }\n        }\n    }\n}\n\n\n\nStackLayout\u306e\u5b9f\u88c5\u4f8b\nStackLayout\u306a\u3089\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nViewCell\u306e\u3088\u3046\u306bOnTapped\u30a4\u30d9\u30f3\u30c8\u304c\u3082\u3068\u3082\u3068\u306a\u3044\u306e\u3067\u3001\nTapGestureRecognizer\u3092\u4f7f\u3063\u3066\u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8\u3092GestureRecognizers\u306b\u767b\u9332\u3057\u307e\u3059\u3002\n\nC#\nusing Xamarin.Forms;\n\nnamespace MyProject.Controls\n{\n    public class CustomStackLayout : StackLayout\n    {\n        public static readonly BindableProperty CommandParameterProperty = BindableProperty.Create<CustomStackLayout, object>(i => i.CommandParameter, default(object), BindingMode.OneWay);\n\n        public object CommandParameter\n        {\n            get\n            {\n                return this.GetValue(CommandParameterProperty);\n            }\n            set\n            {\n                this.SetValue(CommandParameterProperty, value);\n            }\n        }\n\n        public static readonly BindableProperty CommandProperty = BindableProperty.Create<CustomStackLayout, Command>(i => i.Command, null, BindingMode.OneWay);\n\n        public Command Command\n        {\n            get\n            {\n                return (Command)this.GetValue(CommandProperty);\n            }\n            set\n            {\n                this.SetValue(CommandProperty, value);\n            }\n        }\n\n        public CustomStackLayout()\n        {\n            var tgr = new TapGestureRecognizer();\n            tgr.Tapped += (s, e) => OnTapped();\n            this.GestureRecognizers.Add(tgr);\n        }\n\n        protected void OnTapped()\n        {\n            if (this.Command != null)\n            {\n                this.Command.Execute(this.CommandParameter ?? this);\n            }\n        }\n    }\n}\n\n\n## Command\u304c\u6a19\u6e96\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u308bView\nXamarin.Forms\u3067\u6a19\u6e96\u3067Command\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u306f\u4e0b\u8a18\u306e3\u7a2e\u985e\u3060\u3051\u3067\u3059\u3002\n\u4ed6\u306eView\u3067Command\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u81ea\u524d\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n - Button\n - ToolbarItem\n - TextCell\n\n\u516c\u5f0f\uff1a[Part 5. From Data Bindings to MVVM](https://developer.xamarin.com/guides/cross-platform/xamarin-forms/user-interface/xaml-basics/data_bindings_to_mvvm/)\n\n## Command\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5b9f\u88c5\u65b9\u6cd5\n\u5fc5\u8981\u306a\u306e\u306f\u4e0b\u8a18\u306e3\u7a2e\u985e\u3060\u3051\u3067\u3059\u3002\n\n1. object CommandParameter\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9f\u88c5\n2. Command Command\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9f\u88c5\n3. Command\u306e\u547c\u3073\u51fa\u3057\u51e6\u7406\u3092\u5b9f\u88c5\n\n## ViewCell\u306e\u5b9f\u88c5\u4f8b\n\u4f8b\u3048\u3070ViewCell\u306a\u3089\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```lang:C#\nusing Xamarin.Forms;\n\nnamespace MyProject.Controls\n{\n    public class CustomViewCell : ViewCell\n    {\n        public static readonly BindableProperty CommandParameterProperty = BindableProperty.Create<CustomViewCell, object>(i => i.CommandParameter, default(object), BindingMode.OneWay);\n\n        public object CommandParameter\n        {\n            get\n            {\n                return this.GetValue(CommandParameterProperty);\n            }\n            set\n            {\n                this.SetValue(CommandParameterProperty, value);\n            }\n        }\n\n        public static readonly BindableProperty CommandProperty = BindableProperty.Create<CustomViewCell, Command>(i => i.Command, null, BindingMode.OneWay);\n\n        public Command Command\n        {\n            get\n            {\n                return (Command)this.GetValue(CommandProperty);\n            }\n            set\n            {\n                this.SetValue(CommandProperty, value);\n            }\n        }\n       \n        protected override void OnTapped()\n        {\n            base.OnTapped();\n\n            if (this.Command != null)\n            {\n                this.Command.Execute(this.CommandParameter ?? this);\n            }\n        }\n    }\n}\n```\n\n## StackLayout\u306e\u5b9f\u88c5\u4f8b\nStackLayout\u306a\u3089\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nViewCell\u306e\u3088\u3046\u306bOnTapped\u30a4\u30d9\u30f3\u30c8\u304c\u3082\u3068\u3082\u3068\u306a\u3044\u306e\u3067\u3001\nTapGestureRecognizer\u3092\u4f7f\u3063\u3066\u30bf\u30c3\u30d7\u30a4\u30d9\u30f3\u30c8\u3092GestureRecognizers\u306b\u767b\u9332\u3057\u307e\u3059\u3002\n\n```lang:C#\nusing Xamarin.Forms;\n\nnamespace MyProject.Controls\n{\n    public class CustomStackLayout : StackLayout\n    {\n        public static readonly BindableProperty CommandParameterProperty = BindableProperty.Create<CustomStackLayout, object>(i => i.CommandParameter, default(object), BindingMode.OneWay);\n\n        public object CommandParameter\n        {\n            get\n            {\n                return this.GetValue(CommandParameterProperty);\n            }\n            set\n            {\n                this.SetValue(CommandParameterProperty, value);\n            }\n        }\n\n        public static readonly BindableProperty CommandProperty = BindableProperty.Create<CustomStackLayout, Command>(i => i.Command, null, BindingMode.OneWay);\n\n        public Command Command\n        {\n            get\n            {\n                return (Command)this.GetValue(CommandProperty);\n            }\n            set\n            {\n                this.SetValue(CommandProperty, value);\n            }\n        }\n\n        public CustomStackLayout()\n        {\n            var tgr = new TapGestureRecognizer();\n            tgr.Tapped += (s, e) => OnTapped();\n            this.GestureRecognizers.Add(tgr);\n        }\n\n        protected void OnTapped()\n        {\n            if (this.Command != null)\n            {\n                this.Command.Execute(this.CommandParameter ?? this);\n            }\n        }\n    }\n}\n```\n", "tags": ["Xamarin.Forms", "C#"]}