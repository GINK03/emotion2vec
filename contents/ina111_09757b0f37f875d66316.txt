{"context": " More than 1 year has passed since last update.python\u3092\u4f7f\u3063\u3066\u3001\u30d5\u30e9\u30a4\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306a\u3069\u5e38\u5fae\u5206\u65b9\u7a0b\u5f0f\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u308b\u7269\u7406\u30e2\u30c7\u30eb\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff08\u6570\u5024\u89e3\u6790\u30fb\u6570\u5024\u8a08\u7b97\uff09\u3092\u3059\u308b\u65b9\u6cd5\u3002\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306fScipy.integrate\u306e\u4e2d\u306b\u3042\u308bodeint\u3092\u4f7f\u3046\u3002Fortran\u306eOdepack\u306elsode\u3092\u4f7f\u3063\u3066\u3044\u308b\u3089\u3057\u3044\u306e\u3067\u3001\u8a08\u7b97\u306f\u65e9\u3044\u3002\n\n\u4f8b\n\u4f8b\u3068\u3057\u3066Octave(Matlab\u4e92\u63db\uff09\u306e\u30b3\u30fc\u30c9\u3068\u3057\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u98db\u884c\u6a5f\u306e\u30d5\u30e9\u30a4\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092python\u306b\u79fb\u690d\u3057\u3066\u307f\u308b\u3002\u8a08\u7b97\u306e\u4e2d\u8eab\u306b\u3064\u3044\u3066\u306f\u30ea\u30f3\u30af\u5148\u304c\u8a73\u3057\u3044\u3002\nButterfly_Effect( )  6DOF Flight Simulation\n\u6642\u9593\u7d4c\u904e\u306b\u3088\u3063\u3066\u52d5\u304f\u3082\u306e\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3059\u308b\u306e\u306b\u3001for\u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3068\u30aa\u30a4\u30e9\u30fc\u6cd5\u306a\u3069\u7c21\u5358\u306a\u6570\u5024\u8a08\u7b97\u6cd5\u3067\u3042\u3063\u3066\u3082python\u3067\u306f\u304b\u306a\u308a\u9045\u3044\u306e\u3067\u306a\u308b\u3079\u304fscipy\u306a\u3069\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3079\u304d\u3002\n\nmatlab\u3068python\u306e\u9055\u3044\nmatlab\u304b\u3089\u306e\u79fb\u690d\u3092\u3059\u308b\u3068\u304d\u306f\u884c\u5217\uff08ndarray\uff09\u306e*\u6f14\u7b97\u5b50\u304cmatlab:\u5185\u7a4d\u3001numpy:\u8981\u7d20\u7a4d\u3068\u9055\u3046\u306e\u3067\u6ce8\u610f\u3002\u307e\u305f\u3001python\u3067\u306f\u5c0f\u6570\u70b9\u3092\u660e\u793a\u3057\u306a\u3044\u3068\u6574\u6570\u9664\u7b97\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n\n\u30b3\u30fc\u30c9 - odeint\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom scipy.linalg import block_diag\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nplt.close('all')\n\n# import time\n# start = time.time()\n\ndef Rotation_X(Psi):\n    R_x = np.array([[np.cos(Psi), np.sin(Psi), 0],\n                    [-np.sin(Psi), np.cos(Psi), 0],\n                    [0, 0, 1]])\n    return R_x\n\ndef Rotation_Y(Theta):\n    R_y = np.array([[np.cos(Theta), 0, -np.sin(Theta)],\n                    [0, 1, 0],\n                    [np.sin(Theta), 0, np.cos(Theta)]])\n    return R_y\n\ndef Rotation_Z(Phi):\n    R_z = np.array([[1, 0, 0],\n                    [0, np.cos(Phi), np.sin(Phi)],\n                    [0, -np.sin(Phi), np.cos(Phi)]])\n    return R_z\n\n# \u904b\u52d5\u65b9\u7a0b\u5f0f\ndef dynamical_system(x, t, A, U0):\n    # x = [u,alpha,q,theta,beta,p,r,phi,psi,x,y,z]\n    dx = A.dot(x)\n    u = x[0]+U0 # \u901f\u5ea6\n    UVW = np.array([u, u*x[4], u*x[1]]) # \u901f\u5ea6\u30d9\u30af\u30c8\u30eb[U,V,W]\n    Rotation = Rotation_X(-x[8]).dot(Rotation_Y(-x[3])).dot(Rotation_Z(-x[7]))\n    dX = Rotation.dot(UVW)\n    dx[9]  = dX[0]\n    dx[10] = dX[1]\n    dx[11] = dX[2] \n    return dx\n\n# \u6709\u6b21\u5143\u5b89\u5b9a\u5fae\u4fc2\u6570\nXu = -0.01;   Zu = -0.1;   Mu = 0.001\nXa = 30.0;    Za = -200.0; Ma = -4.0\nXq = 0.3;     Zq = -5.0;   Mq = -1.0\nYb = -45.0;   Lb_= -2.0;   Nb_= 1.0\nYp = 0.5;     Lp_= -1.0;   Np_= -0.1\nYr = 3.0;     Lr_= 0.2;    Nr_=-0.2\n\n# \u305d\u306e\u4ed6\u306e\u30d1\u30e9\u30e1\u30bf\nW0 = 0.0;     U0 = 100.0;  theta0 = 0.05\ng  = 9.8 # \u91cd\u529b\u52a0\u901f\u5ea6\n\n# \u7e26\u306e\u30b7\u30b9\u30c6\u30e0\nA_lat = np.array([[Xu, Xa, -W0, -g*np.cos(theta0)],\n                  [Zu/U0, Za/U0, (U0+Zq)/U0, -g*np.sin(theta0)/U0],\n                  [Mu, Ma, Mq, 0],\n                  [0, 0, 1, 0]])\n\n# \u6a2a\u30fb\u65b9\u5411\u306e\u30b7\u30b9\u30c6\u30e0\nA_lon = np.array([[Yb, (W0+Yp), -(U0-Yr), g*np.cos(theta0), 0],\n                  [Lb_, Lp_, Lr_, 0, 0],\n                  [Nb_, Np_, Nr_, 0, 0],\n                  [0, 1, np.tan(theta0), 0, 0],\n                  [0, 0, 1/np.cos(theta0), 0, 0]])\n\n# \u5bfe\u89d2\u30d6\u30ed\u30c3\u30af\u3068\u3057\u3066\u30b7\u30b9\u30c6\u30e0\u3092\u7d50\u5408\u3059\u308b\nA = block_diag(A_lat, A_lon)\n\n# \u3055\u3089\u306b\u98db\u884c\u8ecc\u9053\u5206\u306e\u30b9\u30da\u30fc\u30b9\u3092\u78ba\u4fdd\u3057\u3066\u304a\u304f\nA = block_diag(A, np.zeros([3,3]))\n\n# \u8a08\u7b97\u6761\u4ef6\u306e\u8a2d\u5b9a\nendurance   = 200   # \u98db\u884c\u6642\u9593[sec]\nstep        = 10    # 1.0[sec]\u3042\u305f\u308a\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u6570\nt = np.linspace(0,endurance,endurance*step)\n\n# \u521d\u671f\u5024 x0 = [u,alpha,q,theta, beta,p,r,phi,psi]\n# \u5e38\u5fae\u5206\u65b9\u7a0b\u5f0f\u306b\u5165\u308c\u308b\u5909\u6570\u306f1\u6b21\u5143\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nx0_lat      = np.array([10, 0.1, 0.4, 0.2])     # \u7e26\u306e\u521d\u671f\u5024\nx0_lon      = np.array([0.0, 0.6, 0.4, 0.2, 0.2])   # \u6a2a\u30fb\u65b9\u5411\u306e\u521d\u671f\u5024\nx0_pos      = np.array([0, 0, -1000]) # \u98db\u884c\u6a5f\u306e\u521d\u671f\u4f4d\u7f6e\nx0 = np.hstack((x0_lat, x0_lon, x0_pos))\n\nx = odeint(dynamical_system, x0, t, args=(A,U0,))\nprint u\"run successfully.\"\n\n# \u53ef\u8996\u5316\nplt.ion()\nfig = plt.figure()\nax = Axes3D(fig)\n\nax.plot(x[:,9], x[:,10], x[:,11])\nax.set_xlabel(u\"x\");ax.set_ylabel(u\"y\");ax.set_zlabel(u\"z\")\nax.set_xlim([-5000,2000])\nax.set_ylim([-2000,5000])\nax.set_zlim([-5000,2000])\nplt.show()\n\n\n\n\u30b3\u30fc\u30c9 - ode\nscipy.integrate\u306e\u4e2d\u306b\u306fodeint\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3067\u4f5c\u3089\u308c\u3066\u3044\u308bode\u3068\u3044\u3046\u5e38\u5fae\u5206\u65b9\u7a0b\u5f0f\u306e\u6570\u5024\u8a08\u7b97\u306e\u6c4e\u7528\u7684\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3082\u3042\u308b\u3002\nodeint\u3068\u9055\u3063\u3066\u3001\u8a08\u7b97\u65b9\u6cd5\u304c\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001\u8a08\u7b97\u306e\u4e2d\u8eab\u3092\u6c7a\u3081\u305f\u3044\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u826f\u3044\u3002\u307e\u305f\u3001\u8a08\u7b97\u3092\u9014\u4e2d\u3067\u7d42\u308f\u3089\u305b\u308b\u3053\u3068\u3082\u51fa\u6765\u305d\u3046\u3002\n\u305f\u3060\u3057\u3001while\u3067\u8a08\u7b97\u3092\u56de\u3057\u3066\u3044\u308b\u306e\u3067step\u6570\u306b\u3082\u3088\u308b\u304c\u8a08\u7b97\u30b9\u30d4\u30fc\u30c9\u304c\u304b\u306a\u308a\u9045\u3044\u3002\u624b\u5143\u306e\u74b0\u5883\u3067\u306f10\u500d\u7a0b\u5ea6\u9045\u304b\u3063\u305f\u3002\u307e\u305f\u3001\u5fae\u5206\u65b9\u7a0b\u5f0f\u306e\u95a2\u6570\u306e\u5f15\u6570\u306e\u9806\u756a\u304c\uff08\u6642\u9593\u3001\u5909\u6570\uff09\u3068odeint\u3068\u9006\u306b\u306a\u3063\u3066\u305f\u308a\u3001\u30bf\u30d7\u30eb\u306e\u5f15\u6570\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u304b\u3063\u305f\u308a\u3068\u3001\u7d30\u3005\u9055\u3046\u306e\u3067\u6ce8\u610f\u5fc5\u8981\u3002\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom scipy.integrate import ode\nfrom scipy.linalg import block_diag\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nplt.close('all')\n\ndef Rotation_X(Psi):\n    R_x = np.array([[np.cos(Psi), np.sin(Psi), 0],\n                    [-np.sin(Psi), np.cos(Psi), 0],\n                    [0, 0, 1]])\n    return R_x\n\ndef Rotation_Y(Theta):\n    R_y = np.array([[np.cos(Theta), 0, -np.sin(Theta)],\n                    [0, 1, 0],\n                    [np.sin(Theta), 0, np.cos(Theta)]])\n    return R_y\n\ndef Rotation_Z(Phi):\n    R_z = np.array([[1, 0, 0],\n                    [0, np.cos(Phi), np.sin(Phi)],\n                    [0, -np.sin(Phi), np.cos(Phi)]])\n    return R_z\n\n# \u904b\u52d5\u65b9\u7a0b\u5f0f\n# odeint\u306e\u5834\u5408\u3068\u9055\u3063\u3066(time, x, args*)\u306a\u3053\u3068\u3001\u53ca\u3073args\u304c\u30bf\u30d7\u30eb\u306a\u3053\u3068\u306b\u6ce8\u610f\ndef dynamical_system(t, x, (A, U0)):\n    # x = [u,alpha,q,theta,beta,p,r,phi,psi,x,y,z]\n    dx = A.dot(x)\n    u = x[0]+U0 # \u901f\u5ea6\n    UVW = np.array([u, u*x[4], u*x[1]]) # \u901f\u5ea6\u30d9\u30af\u30c8\u30eb[U,V,W]\n    Rotation = Rotation_X(-x[8]).dot(Rotation_Y(-x[3])).dot(Rotation_Z(-x[7]))\n    dX = Rotation.dot(UVW)\n    dx[9]  = dX[0]\n    dx[10] = dX[1]\n    dx[11] = dX[2] \n    return dx\n\n# \u6709\u6b21\u5143\u5b89\u5b9a\u5fae\u4fc2\u6570\nXu = -0.01;   Zu = -0.1;   Mu = 0.001\nXa = 30.0;    Za = -200.0; Ma = -4.0\nXq = 0.3;     Zq = -5.0;   Mq = -1.0\nYb = -45.0;   Lb_= -2.0;   Nb_= 1.0\nYp = 0.5;     Lp_= -1.0;   Np_= -0.1\nYr = 3.0;     Lr_= 0.2;    Nr_=-0.2\n\n# \u305d\u306e\u4ed6\u306e\u30d1\u30e9\u30e1\u30bf\nW0 = 0.0;     U0 = 100.0;  theta0 = 0.05\ng  = 9.8 # \u91cd\u529b\u52a0\u901f\u5ea6\n\n# \u7e26\u306e\u30b7\u30b9\u30c6\u30e0\nA_lat = np.array([[Xu, Xa, -W0, -g*np.cos(theta0)],\n                  [Zu/U0, Za/U0, (U0+Zq)/U0, -g*np.sin(theta0)/U0],\n                  [Mu, Ma, Mq, 0],\n                  [0, 0, 1, 0]])\n\n# \u6a2a\u30fb\u65b9\u5411\u306e\u30b7\u30b9\u30c6\u30e0\nA_lon = np.array([[Yb, (W0+Yp), -(U0-Yr), g*np.cos(theta0), 0],\n                  [Lb_, Lp_, Lr_, 0, 0],\n                  [Nb_, Np_, Nr_, 0, 0],\n                  [0, 1, np.tan(theta0), 0, 0],\n                  [0, 0, 1/np.cos(theta0), 0, 0]])\n\n# \u5bfe\u89d2\u30d6\u30ed\u30c3\u30af\u3068\u3057\u3066\u30b7\u30b9\u30c6\u30e0\u3092\u7d50\u5408\u3059\u308b\nA = block_diag(A_lat, A_lon)\n\n# \u3055\u3089\u306b\u98db\u884c\u8ecc\u9053\u5206\u306e\u30b9\u30da\u30fc\u30b9\u3092\u78ba\u4fdd\u3057\u3066\u304a\u304f\nA = block_diag(A, np.zeros([3,3]))\n\n# \u8a08\u7b97\u6761\u4ef6\u306e\u8a2d\u5b9a\nendurance   = 200   # \u98db\u884c\u6642\u9593[sec]\nstep        = 10    # 1.0[sec]\u3042\u305f\u308a\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u6570\ndt          = 1.0 / step    # \u6642\u9593\u30b9\u30c6\u30c3\u30d7\u306e\u5e45[sec]\nt0          = 0.0   # \u958b\u59cb\u6642\u9593[sec]\nt = np.linspace(0,endurance,endurance*step)\n\n# \u521d\u671f\u5024 x0 = [u,alpha,q,theta, beta,p,r,phi,psi,x,y,z]\n# \u5e38\u5fae\u5206\u65b9\u7a0b\u5f0f\u306b\u5165\u308c\u308b\u5909\u6570\u306f1\u6b21\u5143\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nx0_lat      = np.array([10, 0.1, 0.4, 0.2])     # \u7e26\u306e\u521d\u671f\u5024\nx0_lon      = np.array([0.0, 0.6, 0.4, 0.2, 0.2])   # \u6a2a\u30fb\u65b9\u5411\u306e\u521d\u671f\u5024\nx0_pos      = np.array([0, 0, -1000]) # \u98db\u884c\u6a5f\u306e\u521d\u671f\u4f4d\u7f6e\nx0 = np.hstack((x0_lat, x0_lon, x0_pos))\n\n# ODE\u306e\u8a2d\u5b9a\nsolver = ode(dynamical_system).set_integrator('vode', method='bdf')\nsolver.set_initial_value(x0, t0)\nsolver.set_f_params((A, U0))\ndt = 1.0 / step\nx = np.zeros([int(endurance/dt)+1, 12])\nt = np.zeros([int(endurance/dt)+1])\n\nindex = 0\nwhile solver.successful() and solver.t < endurance:\n    solver.integrate(solver.t+dt)\n    x[index] = solver.y\n    t[index] = solver.t\n    index += 1\n\nprint u\"run successfully.\"\n\n# \u53ef\u8996\u5316\nplt.ion()\nfig = plt.figure()\nax = Axes3D(fig)\n\nax.plot(x[:,9], x[:,10], x[:,11])\nax.set_xlim([-5000,2000])\nax.set_ylim([-2000,5000])\nax.set_zlim([-5000,2000])\nplt.show()\n\npython\u3092\u4f7f\u3063\u3066\u3001\u30d5\u30e9\u30a4\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306a\u3069\u5e38\u5fae\u5206\u65b9\u7a0b\u5f0f\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u308b\u7269\u7406\u30e2\u30c7\u30eb\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff08\u6570\u5024\u89e3\u6790\u30fb\u6570\u5024\u8a08\u7b97\uff09\u3092\u3059\u308b\u65b9\u6cd5\u3002\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306fScipy.integrate\u306e\u4e2d\u306b\u3042\u308bodeint\u3092\u4f7f\u3046\u3002Fortran\u306eOdepack\u306elsode\u3092\u4f7f\u3063\u3066\u3044\u308b\u3089\u3057\u3044\u306e\u3067\u3001\u8a08\u7b97\u306f\u65e9\u3044\u3002\n\n# \u4f8b\n\u4f8b\u3068\u3057\u3066Octave(Matlab\u4e92\u63db\uff09\u306e\u30b3\u30fc\u30c9\u3068\u3057\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u98db\u884c\u6a5f\u306e\u30d5\u30e9\u30a4\u30c8\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092python\u306b\u79fb\u690d\u3057\u3066\u307f\u308b\u3002\u8a08\u7b97\u306e\u4e2d\u8eab\u306b\u3064\u3044\u3066\u306f\u30ea\u30f3\u30af\u5148\u304c\u8a73\u3057\u3044\u3002\n[Butterfly_Effect( )  6DOF Flight Simulation](http://butterfly-effect.hatenablog.com/archive/category/6DOF%20Flight%20Simulation)\n\n\u6642\u9593\u7d4c\u904e\u306b\u3088\u3063\u3066\u52d5\u304f\u3082\u306e\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3059\u308b\u306e\u306b\u3001for\u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3068\u30aa\u30a4\u30e9\u30fc\u6cd5\u306a\u3069\u7c21\u5358\u306a\u6570\u5024\u8a08\u7b97\u6cd5\u3067\u3042\u3063\u3066\u3082python\u3067\u306f\u304b\u306a\u308a\u9045\u3044\u306e\u3067\u306a\u308b\u3079\u304fscipy\u306a\u3069\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3079\u304d\u3002\n\n### matlab\u3068python\u306e\u9055\u3044\nmatlab\u304b\u3089\u306e\u79fb\u690d\u3092\u3059\u308b\u3068\u304d\u306f\u884c\u5217\uff08ndarray\uff09\u306e*\u6f14\u7b97\u5b50\u304cmatlab:\u5185\u7a4d\u3001numpy:\u8981\u7d20\u7a4d\u3068\u9055\u3046\u306e\u3067\u6ce8\u610f\u3002\u307e\u305f\u3001python\u3067\u306f\u5c0f\u6570\u70b9\u3092\u660e\u793a\u3057\u306a\u3044\u3068\u6574\u6570\u9664\u7b97\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n\n# \u30b3\u30fc\u30c9 - odeint\n````python\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom scipy.linalg import block_diag\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nplt.close('all')\n\n# import time\n# start = time.time()\n\ndef Rotation_X(Psi):\n\tR_x = np.array([[np.cos(Psi), np.sin(Psi), 0],\n\t\t\t\t\t[-np.sin(Psi), np.cos(Psi), 0],\n\t\t\t\t\t[0, 0, 1]])\n\treturn R_x\n\ndef Rotation_Y(Theta):\n\tR_y = np.array([[np.cos(Theta), 0, -np.sin(Theta)],\n\t\t\t\t\t[0, 1, 0],\n\t\t\t\t\t[np.sin(Theta), 0, np.cos(Theta)]])\n\treturn R_y\n\ndef Rotation_Z(Phi):\n\tR_z = np.array([[1, 0, 0],\n\t\t\t\t\t[0, np.cos(Phi), np.sin(Phi)],\n\t\t\t\t\t[0, -np.sin(Phi), np.cos(Phi)]])\n\treturn R_z\n\n# \u904b\u52d5\u65b9\u7a0b\u5f0f\ndef dynamical_system(x, t, A, U0):\n\t# x = [u,alpha,q,theta,beta,p,r,phi,psi,x,y,z]\n\tdx = A.dot(x)\n\tu = x[0]+U0 # \u901f\u5ea6\n\tUVW = np.array([u, u*x[4], u*x[1]]) # \u901f\u5ea6\u30d9\u30af\u30c8\u30eb[U,V,W]\n\tRotation = Rotation_X(-x[8]).dot(Rotation_Y(-x[3])).dot(Rotation_Z(-x[7]))\n\tdX = Rotation.dot(UVW)\n\tdx[9]  = dX[0]\n\tdx[10] = dX[1]\n\tdx[11] = dX[2] \n\treturn dx\n\n# \u6709\u6b21\u5143\u5b89\u5b9a\u5fae\u4fc2\u6570\nXu = -0.01;   Zu = -0.1;   Mu = 0.001\nXa = 30.0;    Za = -200.0; Ma = -4.0\nXq = 0.3;     Zq = -5.0;   Mq = -1.0\nYb = -45.0;   Lb_= -2.0;   Nb_= 1.0\nYp = 0.5;     Lp_= -1.0;   Np_= -0.1\nYr = 3.0;     Lr_= 0.2;    Nr_=-0.2\n\n# \u305d\u306e\u4ed6\u306e\u30d1\u30e9\u30e1\u30bf\nW0 = 0.0;     U0 = 100.0;  theta0 = 0.05\ng  = 9.8 # \u91cd\u529b\u52a0\u901f\u5ea6\n\n# \u7e26\u306e\u30b7\u30b9\u30c6\u30e0\nA_lat = np.array([[Xu, Xa, -W0, -g*np.cos(theta0)],\n    \t\t\t  [Zu/U0, Za/U0, (U0+Zq)/U0, -g*np.sin(theta0)/U0],\n    \t\t\t  [Mu, Ma, Mq, 0],\n    \t\t\t  [0, 0, 1, 0]])\n\n# \u6a2a\u30fb\u65b9\u5411\u306e\u30b7\u30b9\u30c6\u30e0\nA_lon = np.array([[Yb, (W0+Yp), -(U0-Yr), g*np.cos(theta0), 0],\n        \t\t  [Lb_, Lp_, Lr_, 0, 0],\n        \t\t  [Nb_, Np_, Nr_, 0, 0],\n        \t\t  [0, 1, np.tan(theta0), 0, 0],\n        \t\t  [0, 0, 1/np.cos(theta0), 0, 0]])\n\n# \u5bfe\u89d2\u30d6\u30ed\u30c3\u30af\u3068\u3057\u3066\u30b7\u30b9\u30c6\u30e0\u3092\u7d50\u5408\u3059\u308b\nA = block_diag(A_lat, A_lon)\n\n# \u3055\u3089\u306b\u98db\u884c\u8ecc\u9053\u5206\u306e\u30b9\u30da\u30fc\u30b9\u3092\u78ba\u4fdd\u3057\u3066\u304a\u304f\nA = block_diag(A, np.zeros([3,3]))\n\n# \u8a08\u7b97\u6761\u4ef6\u306e\u8a2d\u5b9a\nendurance\t= 200\t# \u98db\u884c\u6642\u9593[sec]\nstep\t\t= 10\t# 1.0[sec]\u3042\u305f\u308a\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u6570\nt = np.linspace(0,endurance,endurance*step)\n\n# \u521d\u671f\u5024 x0 = [u,alpha,q,theta, beta,p,r,phi,psi]\n# \u5e38\u5fae\u5206\u65b9\u7a0b\u5f0f\u306b\u5165\u308c\u308b\u5909\u6570\u306f1\u6b21\u5143\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nx0_lat\t\t= np.array([10, 0.1, 0.4, 0.2])\t\t# \u7e26\u306e\u521d\u671f\u5024\nx0_lon\t\t= np.array([0.0, 0.6, 0.4, 0.2, 0.2])\t# \u6a2a\u30fb\u65b9\u5411\u306e\u521d\u671f\u5024\nx0_pos\t\t= np.array([0, 0, -1000]) # \u98db\u884c\u6a5f\u306e\u521d\u671f\u4f4d\u7f6e\nx0 = np.hstack((x0_lat, x0_lon, x0_pos))\n\nx = odeint(dynamical_system, x0, t, args=(A,U0,))\nprint u\"run successfully.\"\n\n# \u53ef\u8996\u5316\nplt.ion()\nfig = plt.figure()\nax = Axes3D(fig)\n\nax.plot(x[:,9], x[:,10], x[:,11])\nax.set_xlabel(u\"x\");ax.set_ylabel(u\"y\");ax.set_zlabel(u\"z\")\nax.set_xlim([-5000,2000])\nax.set_ylim([-2000,5000])\nax.set_zlim([-5000,2000])\nplt.show()\n````\n\n![flight1.png](https://qiita-image-store.s3.amazonaws.com/0/40132/4d9d2433-da66-820c-defc-773177f2e893.png)\n\n\n# \u30b3\u30fc\u30c9 - ode\nscipy.integrate\u306e\u4e2d\u306b\u306fodeint\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3067\u4f5c\u3089\u308c\u3066\u3044\u308bode\u3068\u3044\u3046\u5e38\u5fae\u5206\u65b9\u7a0b\u5f0f\u306e\u6570\u5024\u8a08\u7b97\u306e\u6c4e\u7528\u7684\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3082\u3042\u308b\u3002\nodeint\u3068\u9055\u3063\u3066\u3001\u8a08\u7b97\u65b9\u6cd5\u304c\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001\u8a08\u7b97\u306e\u4e2d\u8eab\u3092\u6c7a\u3081\u305f\u3044\u5834\u5408\u306f\u3053\u3061\u3089\u304c\u826f\u3044\u3002\u307e\u305f\u3001\u8a08\u7b97\u3092\u9014\u4e2d\u3067\u7d42\u308f\u3089\u305b\u308b\u3053\u3068\u3082\u51fa\u6765\u305d\u3046\u3002\n\u305f\u3060\u3057\u3001while\u3067\u8a08\u7b97\u3092\u56de\u3057\u3066\u3044\u308b\u306e\u3067step\u6570\u306b\u3082\u3088\u308b\u304c\u8a08\u7b97\u30b9\u30d4\u30fc\u30c9\u304c\u304b\u306a\u308a\u9045\u3044\u3002\u624b\u5143\u306e\u74b0\u5883\u3067\u306f10\u500d\u7a0b\u5ea6\u9045\u304b\u3063\u305f\u3002\u307e\u305f\u3001\u5fae\u5206\u65b9\u7a0b\u5f0f\u306e\u95a2\u6570\u306e\u5f15\u6570\u306e\u9806\u756a\u304c\uff08\u6642\u9593\u3001\u5909\u6570\uff09\u3068odeint\u3068\u9006\u306b\u306a\u3063\u3066\u305f\u308a\u3001\u30bf\u30d7\u30eb\u306e\u5f15\u6570\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u304b\u3063\u305f\u308a\u3068\u3001\u7d30\u3005\u9055\u3046\u306e\u3067\u6ce8\u610f\u5fc5\u8981\u3002\n\n\n````python\n# -*- coding: utf-8 -*-\nimport numpy as np\nfrom scipy.integrate import odeint\nfrom scipy.integrate import ode\nfrom scipy.linalg import block_diag\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\nplt.close('all')\n\ndef Rotation_X(Psi):\n\tR_x = np.array([[np.cos(Psi), np.sin(Psi), 0],\n\t\t\t\t\t[-np.sin(Psi), np.cos(Psi), 0],\n\t\t\t\t\t[0, 0, 1]])\n\treturn R_x\n\ndef Rotation_Y(Theta):\n\tR_y = np.array([[np.cos(Theta), 0, -np.sin(Theta)],\n\t\t\t\t\t[0, 1, 0],\n\t\t\t\t\t[np.sin(Theta), 0, np.cos(Theta)]])\n\treturn R_y\n\ndef Rotation_Z(Phi):\n\tR_z = np.array([[1, 0, 0],\n\t\t\t\t\t[0, np.cos(Phi), np.sin(Phi)],\n\t\t\t\t\t[0, -np.sin(Phi), np.cos(Phi)]])\n\treturn R_z\n\n# \u904b\u52d5\u65b9\u7a0b\u5f0f\n# odeint\u306e\u5834\u5408\u3068\u9055\u3063\u3066(time, x, args*)\u306a\u3053\u3068\u3001\u53ca\u3073args\u304c\u30bf\u30d7\u30eb\u306a\u3053\u3068\u306b\u6ce8\u610f\ndef dynamical_system(t, x, (A, U0)):\n\t# x = [u,alpha,q,theta,beta,p,r,phi,psi,x,y,z]\n\tdx = A.dot(x)\n\tu = x[0]+U0 # \u901f\u5ea6\n\tUVW = np.array([u, u*x[4], u*x[1]]) # \u901f\u5ea6\u30d9\u30af\u30c8\u30eb[U,V,W]\n\tRotation = Rotation_X(-x[8]).dot(Rotation_Y(-x[3])).dot(Rotation_Z(-x[7]))\n\tdX = Rotation.dot(UVW)\n\tdx[9]  = dX[0]\n\tdx[10] = dX[1]\n\tdx[11] = dX[2] \n\treturn dx\n\n# \u6709\u6b21\u5143\u5b89\u5b9a\u5fae\u4fc2\u6570\nXu = -0.01;   Zu = -0.1;   Mu = 0.001\nXa = 30.0;    Za = -200.0; Ma = -4.0\nXq = 0.3;     Zq = -5.0;   Mq = -1.0\nYb = -45.0;   Lb_= -2.0;   Nb_= 1.0\nYp = 0.5;     Lp_= -1.0;   Np_= -0.1\nYr = 3.0;     Lr_= 0.2;    Nr_=-0.2\n\n# \u305d\u306e\u4ed6\u306e\u30d1\u30e9\u30e1\u30bf\nW0 = 0.0;     U0 = 100.0;  theta0 = 0.05\ng  = 9.8 # \u91cd\u529b\u52a0\u901f\u5ea6\n\n# \u7e26\u306e\u30b7\u30b9\u30c6\u30e0\nA_lat = np.array([[Xu, Xa, -W0, -g*np.cos(theta0)],\n    \t\t\t  [Zu/U0, Za/U0, (U0+Zq)/U0, -g*np.sin(theta0)/U0],\n    \t\t\t  [Mu, Ma, Mq, 0],\n    \t\t\t  [0, 0, 1, 0]])\n\n# \u6a2a\u30fb\u65b9\u5411\u306e\u30b7\u30b9\u30c6\u30e0\nA_lon = np.array([[Yb, (W0+Yp), -(U0-Yr), g*np.cos(theta0), 0],\n        \t\t  [Lb_, Lp_, Lr_, 0, 0],\n        \t\t  [Nb_, Np_, Nr_, 0, 0],\n        \t\t  [0, 1, np.tan(theta0), 0, 0],\n        \t\t  [0, 0, 1/np.cos(theta0), 0, 0]])\n\n# \u5bfe\u89d2\u30d6\u30ed\u30c3\u30af\u3068\u3057\u3066\u30b7\u30b9\u30c6\u30e0\u3092\u7d50\u5408\u3059\u308b\nA = block_diag(A_lat, A_lon)\n\n# \u3055\u3089\u306b\u98db\u884c\u8ecc\u9053\u5206\u306e\u30b9\u30da\u30fc\u30b9\u3092\u78ba\u4fdd\u3057\u3066\u304a\u304f\nA = block_diag(A, np.zeros([3,3]))\n\n# \u8a08\u7b97\u6761\u4ef6\u306e\u8a2d\u5b9a\nendurance\t= 200\t# \u98db\u884c\u6642\u9593[sec]\nstep\t\t= 10\t# 1.0[sec]\u3042\u305f\u308a\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u6570\ndt \t\t\t= 1.0 / step \t# \u6642\u9593\u30b9\u30c6\u30c3\u30d7\u306e\u5e45[sec]\nt0 \t\t\t= 0.0\t# \u958b\u59cb\u6642\u9593[sec]\nt = np.linspace(0,endurance,endurance*step)\n\n# \u521d\u671f\u5024 x0 = [u,alpha,q,theta, beta,p,r,phi,psi,x,y,z]\n# \u5e38\u5fae\u5206\u65b9\u7a0b\u5f0f\u306b\u5165\u308c\u308b\u5909\u6570\u306f1\u6b21\u5143\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nx0_lat\t\t= np.array([10, 0.1, 0.4, 0.2])\t\t# \u7e26\u306e\u521d\u671f\u5024\nx0_lon\t\t= np.array([0.0, 0.6, 0.4, 0.2, 0.2])\t# \u6a2a\u30fb\u65b9\u5411\u306e\u521d\u671f\u5024\nx0_pos\t\t= np.array([0, 0, -1000]) # \u98db\u884c\u6a5f\u306e\u521d\u671f\u4f4d\u7f6e\nx0 = np.hstack((x0_lat, x0_lon, x0_pos))\n\n# ODE\u306e\u8a2d\u5b9a\nsolver = ode(dynamical_system).set_integrator('vode', method='bdf')\nsolver.set_initial_value(x0, t0)\nsolver.set_f_params((A, U0))\ndt = 1.0 / step\nx = np.zeros([int(endurance/dt)+1, 12])\nt = np.zeros([int(endurance/dt)+1])\n\nindex = 0\nwhile solver.successful() and solver.t < endurance:\n\tsolver.integrate(solver.t+dt)\n\tx[index] = solver.y\n\tt[index] = solver.t\n\tindex += 1\n\nprint u\"run successfully.\"\n\n# \u53ef\u8996\u5316\nplt.ion()\nfig = plt.figure()\nax = Axes3D(fig)\n\nax.plot(x[:,9], x[:,10], x[:,11])\nax.set_xlim([-5000,2000])\nax.set_ylim([-2000,5000])\nax.set_zlim([-5000,2000])\nplt.show()\n```` \n", "tags": ["Python", "scipy", "ode", "odeint"]}