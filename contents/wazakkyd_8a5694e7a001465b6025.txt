{"context": "\n\n\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3092CUDA\u3067\u66f8\u304f\uff08\u914d\u5217\u540c\u58eb\u306e\u8db3\u3057\u7b97\uff09\n\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3092\u4e26\u5217\u5316\u3059\u308b\u3068\u304d\u3001\u305d\u306e\u76ee\u7684\u306b\u3088\u3063\u3066\u4e26\u5217\u5316\u306e\u624b\u6bb5\u304c\u9055\u3046\u3002\u5f79\u306b\u7acb\u3064\u304b\u3069\u3046\u304b\u306f\u7f6e\u3044\u3068\u3044\u3066\u3001\u3053\u3053\u3067\u306f\u57fa\u672c\u7684\u306a\u3053\u3068\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\n\u76ee\u7684\n\u914d\u5217\u540c\u58eb\u306e\u8db3\u3057\u7b97\u30d9\u30af\u30c8\u30eb\u548c\u3092\u8003\u3048\u307e\u3059\u3002\u4f8b\u3048\u3070\u305d\u308c\u305e\u308c\u3001\u5927\u304d\u3055\u304c $N$ \u500b\u306e\u914d\u5217 $A$ \u3068\u914d\u5217 $B$ \u306e\u5404\u8981\u7d20\u306e\u8db3\u3057\u7b97\u306e\u7d50\u679c\u3092\u3001\u914d\u5217 $C$ \u306b\u5165\u308c\u305f\u3044\u3068\u3044\u3046\u554f\u984c\u3092\u8003\u3048\u305f\u3068\u304d\u3001C\u8a00\u8a9e\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\nfor(int i=0;i<N;i++) C[i] = A[i] + B[i];\n\n\u3053\u308c\u3092CUDA\u3067\u4e26\u5217\u5316\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u4e00\u4f8b\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\nCUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3051\u308b\u57fa\u790e\u77e5\u8b58\n\n\u30b9\u30ec\u30c3\u30c9\u7ba1\u7406\u306b\u3064\u3044\u3066\n\nGPU\u306f\u591a\u304f\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002CUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u305d\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u3046\u307e\u304f\u5229\u7528\u3057\u3066\u5927\u898f\u6a21\u306a\u8a08\u7b97\u3092\u9ad8\u901f\u3067\u51e6\u7406\u3057\u307e\u3059\u3002\u3059\u306a\u308f\u3061\u3001\u4e26\u5217\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u3001\u3053\u306e\u300c\u30b9\u30ec\u30c3\u30c9\u300d\u3092\u610f\u8b58\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nCUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306fGPU\u304c\u3082\u3064\u5927\u91cf\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u3046\u3061\u5fc5\u8981\u306a\u6570\u3092\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u304c\u6307\u5b9a\u3057\u3066\u4e26\u5217\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\u305d\u306e\u969b\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306fCUDA\u3067\u6c7a\u3081\u3089\u308c\u305f\u30b9\u30ec\u30c3\u30c9\u306e\u7ba1\u7406\u65b9\u5f0f\u306b\u5f93\u3063\u3066\u3001\u305d\u306e\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30b9\u30ec\u30c3\u30c9\u306f\uff13\u3064\u306e\u968e\u5c64\u3067\u7ba1\u7406\u3055\u308c\u3001\u305d\u308c\u305e\u308c\u6700\u4e0b\u5c64\u300c\u30b9\u30ec\u30c3\u30c9\u300d\u3001\u4e2d\u5c64\u300c\u30d6\u30ed\u30c3\u30af\u300d\u3001\u6700\u4e0a\u5c64\u300c\u30b0\u30ea\u30c3\u30c9\u300d\u3068\u3044\u3046\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30b9\u30ec\u30c3\u30c9...\u968e\u5c64\u306e\u6700\u5c0f\u5358\u4f4d\n\u30d6\u30ed\u30c3\u30af...\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u584a\n\u30b0\u30ea\u30c3\u30c9...\u30d6\u30ed\u30c3\u30af\u5168\u4f53\u306e\u96c6\u5408\n\n\u4f8b\u3048\u3070\u3001\u5168\u90e8\u3067 $512\u00d72048 = 1048576$ \u500b\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3044\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\uff08\u30d6\u30ed\u30c3\u30af\u4e00\u3064\u5f53\u305f\u308a\u306e\u30b9\u30ec\u30c3\u30c9\u6570\uff09\u3092 $512$ \u3068\u3059\u308b\u3068\u3001\u5fc5\u8981\u306a\u30b0\u30ea\u30c3\u30c9\u30b5\u30a4\u30ba\u306f\u3001 $(512 \\times 2048)/512 = 2048 $\u3068\u306a\u308a\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u30b0\u30ea\u30c3\u30c9\u30b5\u30a4\u30ba\u3092 $2048$ \u3001\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\u3092 $512$ \u3068\u6307\u5b9a\u3059\u308c\u3070\u3001\u6240\u671b\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30b0\u30ea\u30c3\u30c9\u306e\u4e2d\u3067\u30d6\u30ed\u30c3\u30af\u306f\u3001\u300cx\u65b9\u5411\u3001y\u65b9\u5411\u3001z\u65b9\u5411\u300d\u3068\uff13\u6b21\u5143\u7684\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u30d6\u30ed\u30c3\u30af\u306e\u4e2d\u3067\u3082\u30b9\u30ec\u30c3\u30c9\u306f\u540c\u3058\u3088\u3046\u306bx,y,z\u3068\uff13\u6b21\u5143\u7684\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nCUDA7.5\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bSample\u306e\u4e00\u3064\u306b\u3001deviceQuey\u3068\u3044\u3046\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\u304c(\u53c2\u8003\uff1aCUDA 7.5 \u3092Windows10\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001Sample\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u307e\u3067)\u3001\u305d\u308c\u3092\u5b9f\u884c\u3055\u305b\u308b\u3068\u3001\u304a\u4f7f\u3044\u306eGPU\u3067\u3001\u5b9f\u969b\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u3069\u306e\u3088\u3046\u306b\u7ba1\u7406\u3067\u304d\u308b\u304b\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u79c1\u306e\u74b0\u5883(GeForce GTX 750 Ti)\u3067deviceQuey\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u3067\u307e\u3059\u3002\nCUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"GeForce GTX 750 Ti\"\n CUDA Driver Version / Runtime Version          7.5 / 7.5\n CUDA Capability Major/Minor version number:    5.0\n Total amount of global memory:                 2048 MBytes (2147483648 bytes)\n ( 5) Multiprocessors, (128) CUDA Cores/MP:     640 CUDA Cores\n GPU Max Clock rate:                            1085 MHz (1.08 GHz)\n Memory Clock rate:                             2700 Mhz\n Memory Bus Width:                              128-bit\n L2 Cache Size:                                 2097152 bytes\n Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)\n Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers\n Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers\n Total amount of constant memory:               65536 bytes\n Total amount of shared memory per block:       49152 bytes\n Total number of registers available per block: 65536\n Warp size:                                     32\n Maximum number of threads per multiprocessor:  2048\n Maximum number of threads per block:           1024\n Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n Maximum memory pitch:                          2147483647 bytes\n Texture alignment:                             512 bytes\n Concurrent copy and kernel execution:          Yes with 1 copy engine(s)\n Run time limit on kernels:                     Yes\n Integrated GPU sharing Host Memory:            No\n Support host page-locked memory mapping:       Yes\n Alignment requirement for Surfaces:            Yes\n Device has ECC support:                        Disabled\n CUDA Device Driver Mode (TCC or WDDM):         WDDM (Windows Display Driver Model)\n Device supports Unified Addressing (UVA):      Yes\n Device PCI Domain ID / Bus ID / location ID:   0 / 1 / 0\n Compute Mode:\n    < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 7.5, CUDA Runtime Version = 7.5, NumDevs = 1, Device0 = GeForce GTX 750 Ti\nResult = PASS\n\n\n\u3053\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u4e09\u884c\u306b\u6ce8\u76ee\u3059\u308b\u3068\u3001CUDA7.5\u3067GeForce GTX 750 Ti\u306e\u30b9\u30ec\u30c3\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7ba1\u7406\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\nMaximum number of threads per block:           1024\nMax dimension size of a thread block (x,y,z): (1024, 1024, 64)\nMax dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n\n\n\u30d6\u30ed\u30c3\u30af\u4e00\u3064\u3042\u305f\u308a\u3067\u6271\u3048\u308b\u6700\u5927\u30b9\u30ec\u30c3\u30c9\u6570\u3000$1024$\n\u30d6\u30ed\u30c3\u30af\u306e\u4e2d\u3067\u6271\u3048\u308b\u6b21\u5143\u6570\u3000$1024\u00d71024\u00d764$\n\u30b0\u30ea\u30c3\u30c9\u306e\u4e2d\u3067\u6271\u3048\u308b\u6b21\u5143\u6570\u3000$214743647\u00d765535\u00d765535$\n\n\u3053\u306e\u74b0\u5883\u3067\u30b9\u30ec\u30c3\u30c9\u3059\u3079\u3066\u3092\u4f7f\u3046\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u3001 $214743647\u00d765535\u00d765535$ \u306e\u30d6\u30ed\u30c3\u30af\u3092\u7528\u610f\u3057\u3066\u3001\u30d6\u30ed\u30c3\u30af\u306b\u306f\u6700\u5927\u3067\u30b9\u30ec\u30c3\u30c9\u3092 $1024$ \u500b\u305a\u3064\u3082\u305f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3053\u306eGPU\u3092\u4f7f\u3063\u3066CUDA\u3067\u540c\u6642\u306b\u51e6\u7406\u3067\u304d\u308b\u6700\u5927\u306e\u30b9\u30ec\u30c3\u30c9\u6570\u306f $214743647\u00d765535\u00d765535\u00d71024$ \u500b\uff08 $\\approx$ $10^{20}$ \u500b \uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u30db\u30b9\u30c8\u3001\u30c7\u30d0\u30a4\u30b9\n\nCUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306fCPU\u306e\u3053\u3068\u3092\u300c\u30db\u30b9\u30c8\u300d\u3001GPU\u306e\u3053\u3068\u3092\u300c\u30c7\u30d0\u30a4\u30b9\u300d\u3068\u547c\u3073\u3001\u533a\u5225\u3057\u307e\u3059\u3002\n\u30db\u30b9\u30c8\u3067\u4f5c\u3089\u308c\u305f\u547d\u4ee4\u3092\u30c7\u30d0\u30a4\u30b9\u306b\u6e21\u3057\u3066\u4e26\u5217\u51e6\u7406\u3092\u884c\u3044\u3001\u305d\u306e\u7d50\u679c\u3092\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u30db\u30b9\u30c8\u3078\u79fb\u3057\u3066\u30db\u30b9\u30c8\u306b\u3088\u3063\u3066\u305d\u306e\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u306e\u304c\u3001CUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u6d41\u308c\u3067\u3059\u3002\n\ndim3\u578b \u5909\u6570\n\n\u30db\u30b9\u30c8\u5074\u3067\u30c7\u30d0\u30a4\u30b9\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3068\u304d\u3001dim3\u578b\u3068\u3044\u30463\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306e\u5909\u6570\u3092\u4f7f\u3063\u3066\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\n\n\u30c7\u30d0\u30a4\u30b9\u5074\u306b\u30b9\u30ec\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u308b\u3068\u3001\u5404\u30b9\u30ec\u30c3\u30c9\u306b\u306f\u3001\u81ea\u5206\u306e\u4f4d\u7f6e\u3092\u793a\u3059ID\u304c\u964d\u3089\u308c\u307e\u3059\u3002\u3053\u306eID\u756a\u53f7\u306f\u5404\u30b9\u30ec\u30c3\u30c9\u306b\u7528\u610f\u3055\u308c\u305f\u300c\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u300d\u3068\u3044\u3046\u3082\u306e\u306b\u683c\u7d0d\u3055\u308c\u3001\u81ea\u7531\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u5909\u6570\u306f\u5ba3\u8a00\u305b\u305a\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u304c\u3001\u5185\u5bb9\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\n\nCUDA\u3067\u66f8\u304b\u308c\u308b\u30b3\u30fc\u30c9\u306f\u3001\u5927\u304d\u304f\u308f\u3051\u308b\u3068\u30db\u30b9\u30c8\u3067\u51e6\u7406\u3055\u308c\u308b\u90e8\u5206\u3068\u3001\u30c7\u30d0\u30a4\u30b9\u3067\u51e6\u7406\u3055\u308c\u308b\u90e8\u5206\u306e\u4e8c\u3064\u306b\u5206\u985e\u3067\u304d\u307e\u3059\u3002\n\u30c7\u30d0\u30a4\u30b9\u3067\u884c\u3046\u4e26\u5217\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u305f\u95a2\u6570\u306e\u3053\u3068\u3092\u300c\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u300d\u3068\u3044\u3044\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u3067\u306f\u305d\u308c\u3068\u308f\u304b\u308b\u3088\u3046\u5ba3\u8a00\u3092\u3057\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\u3067\u306f\u3001\u5177\u4f53\u7684\u306aCUDA\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u884c\u3046\u51e6\u7406\u306f\u3001\u305d\u308c\u305e\u308c\u8981\u7d20\u6570\u304c $N$ \u500b\u306e\u914d\u5217 $A$ \u3068 $B$ \u3092\u7528\u610f\u3057\u3001 $A$ \u306b\u30b9\u30ab\u30e9\u30fc\u5024 $k$ \u3092\u639b\u3051\u3066\u3001\u305d\u308c\u3068 $B$ \u3092\u8db3\u3057\u305f\u3082\u306e\u3092 \u540c\u3058\u8981\u7d20\u6570\u306e\u914d\u5217 $C$ \u306b\u4ee3\u5165\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n#include <stdio.h>\n\n//\u30ab\u30fc\u30cd\u30eb\u95a2\u6570vec_sum\u306e\u5ba3\u8a00\n__global__\nvoid vec_sum(float k, float *a, float *b, float *c)\n{\n  int i = blockIdx.x*blockDim.x + threadIdx.x;\n  c[i] = k*a[i] + b[i];\n}\n\n\nint main(void)\n{\n  //N = 512\u00d72048\n    int N = 1<<20;\n\n  //a,b,c\u306f\u30db\u30b9\u30c8\u7528\u3001d_a,d_b,d_c\u306f\u30c7\u30d0\u30a4\u30b9\u7528\u306e\u30dd\u30a4\u30f3\u30bf\n  float *a, *b, *c  *d_a, *d_b, *d_c;\n\n  //\u30db\u30b9\u30c8\u5074\u306e\u914d\u5217\u3092\u7528\u610f\n  a = (float*)malloc(N*sizeof(float));\n  b = (float*)malloc(N*sizeof(float));\n  c = (float*)malloc(N*sizeof(float));\n\n  //\u30c7\u30d0\u30a4\u30b9\u5074\u306e\u914d\u5217\u3092\u7528\u610f\n  cudaMalloc(&d_a, N*sizeof(float));\n  cudaMalloc(&d_b, N*sizeof(float));\n  cudaMalloc(&d_c, N*sizeof(float));\n\n //a,b\u306e\u914d\u5217\u306b\u305d\u308c\u305e\u308c1\uff0c2\u3092\u4ee3\u5165\u3057\u3001c\u3092\u521d\u671f\u5316\n  for (int i = 0; i < N; i++) {\n    a[i] = 1.0f;\n    b[i] = 2.0f;\n    c[i] = 0.0f;\n  }\n\n  //\u30db\u30b9\u30c8\u5074\u306e\u914d\u5217\u306e\u5185\u5bb9\u3092\u30c7\u30d0\u30a4\u30b9\u5074\u306b\u30b3\u30d4\u30fc\n  cudaMemcpy(d_a, a, N*sizeof(float), cudaMemcpyHostToDevice);\n  cudaMemcpy(d_b, b, N*sizeof(float), cudaMemcpyHostToDevice);\n  cudaMemcpy(d_c, c, N*sizeof(float), cudaMemcpyHostToDevice);\n\n\n  //\u30b9\u30ec\u30c3\u30c9\u306e\u8a2d\u5b9a\n  int blocksize = 512;\n\n  //\u30d6\u30ed\u30c3\u30af\u3042\u305f\u308a\u306e\u30b9\u30ec\u30c3\u30c9\u6570\uff08blocksize)\u3092512\u3001\n  //\u30d6\u30ed\u30c3\u30af\u306e\u7dcf\u6570\uff08gridsize\uff09\u3092N/512\u7528\u610f\u3059\u308b\n  //\u3057\u305f\u304c\u3063\u3066\u7dcf\u30b9\u30ec\u30c3\u30c9\u6570\u306f blocksize \u00d7 gridsize = N \u500b\n  dim3 block (blocksize, 1, 1);\n  dim3 grid  (N / block.x, 1, 1);\n\n  // \u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\n  vec_sum<<<grid, block>>>(2.0f, d_a, d_b,d_c);\n\n  //\u8a08\u7b97\u7d50\u679c\u3092\u30db\u30b9\u30c8\u3078\u30b3\u30d4\u30fc\n  cudaMemcpy(c, d_c, N*sizeof(float), cudaMemcpyDeviceToHost);\n\n  float maxError = 0.0f;\n\n  //\u8a08\u7b97\u7d50\u679c\u306e\u78ba\u8a8d\n    for (int i = 0; i < N; i++) maxError = max(maxError, abs(c[i]-4.0f));\n  printf(\"Max error: %f\", maxError);\n\n  //\u30e1\u30e2\u30ea\u306e\u958b\u653e\n  free(a);\n  free(b);\n  free(c);\n\n  cudaFree(d_a);\n  cudaFree(d_b);\n  cudaFree(d_c);\n\n return 0;\n}\n\n\n\n\n\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u90e8\u5206\n\n__global__\nvoid vec_sum(float k, float *a, float *b, float *c)\n{\n  int i = blockIdx.x*blockDim.x + threadIdx.x;\n  c[i] = k*a[i] + b[i];\n}\n\n\u30b3\u30fc\u30c9\u306e\u5192\u982d\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u3053\u306e\u95a2\u6570\u304c\u3001\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u5b9f\u884c\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3067\u3059\u3002\n__global__ \u306f\u95a2\u6570\u306b\u5bfe\u3059\u308b\u4fee\u98fe\u5b50\u3067\u3001\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u547c\u3073\u51fa\u3057\u305f\u3044\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u3053\u306e\u4e0b\u306b\u5ba3\u8a00\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u95a2\u6570vec_sum\u304c\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3068\u306a\u308a\u307e\u3059\u3002\n\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u4e2d\u306b\u767b\u5834\u3059\u308bblockIdx.x,blockDim.x,thereadIdx.x\u306f\u300c\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u300d\u3067\u3001\u3053\u308c\u3089\u306f\u5ba3\u8a00\u305b\u305a\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u306b\u306f\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u306eID\u306e\u5024\u304c\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u306f\u8aad\u307f\u8fbc\u307f\u5c02\u7528\u3067\u3001\u5185\u5bb9\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u308c\u305e\u308c\u306e\u5909\u6570\u306e\u7bc4\u56f2\u306f\u3001\u6307\u5b9a\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u6570\u306b\u3088\u3063\u3066\u5b9a\u307e\u308a\u307e\u3059\u3002\n\u4eca\u3001\u30b0\u30ea\u30c3\u30c9\u30b5\u30a4\u30ba $2048$ \u3001\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba $512$ \u3068\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u3068\u304d\u3001blockIdx.x,blockDim.x,thereadIdx.x\u305d\u308c\u305e\u308c\u306e\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nblockIdx.x $= 0$ ~ $2047$\nblockDim.x $= 512$\nthreadIdx.x $= 0$ ~ $511$\n\n\u3057\u305f\u304c\u3063\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306b\u304a\u3051\u308bi = blockIdx.x*blockDim.x + threadIdx.x\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u306b\u5fdc\u3058\u3066 $0$ ~ $1048575$ \u306e\u5024\u3092\u3068\u308a\u307e\u3059\u3002\n\u3088\u3063\u3066\u3001\u3053\u306e\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u30b9\u30ec\u30c3\u30c9\u3067\u306f\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u306b\u3088\u3063\u3066 i \u306e\u5024\u304c\u6c7a\u5b9a\u3057\u3001\u305d\u306e\u5024\u306b\u5fdc\u3058\u305f\u914d\u5217\u8981\u7d20\u306e\u6f14\u7b97\u3092\u884c\u3046\u3068\u3044\u3046\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u306f\u3053\u306e\u307b\u304b\u306b\u3082\n\n\ngridDim.x,gridDim.y,gridDim.z\n\n\nblockIdy.y,blockDim.y,thereadIdy.y\n\n\nblockIdz.z,blockDim.z,thereadIdz.z\n\n\n\u306a\u3069\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u3092\u99c6\u4f7f\u3057\u3066\u591a\u6b21\u5143\u7684\u306b\u4e26\u5217\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u5358\u7d14\u306a\u4f8b\u306a\u306e\u30671\u6b21\u5143\uff08\uff58\u8ef8\uff09\u3060\u3051\u3092\u4f7f\u3063\u3066\u6f14\u7b97\u51e6\u7406\u3092\u3057\u307e\u3059\u3002\n\n\n\u30b9\u30ec\u30c3\u30c9\u306e\u8a2d\u5b9a\n\nint blocksize = 512;\ndim3 block (blocksize, 1, 1);\ndim3 grid  (N / block.x, 1, 1);\n\n\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u306b\u6307\u5b9a\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u6570\u306e\u305f\u3081\u306b\u30d9\u30af\u30c8\u30eb\u5909\u6570dim3\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002dim3\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306b\ndim3 hoge(x,y,z);\n\n\u3068\u5ba3\u8a00\u3055\u308c\u307e\u3059\u3002\u30d9\u30af\u30c8\u30eb\u306e\u5404\u8981\u7d20x,y,z\u306b\u306f\u305d\u308c\u305e\u308c\u306e\u6b21\u5143\u306e\u6700\u5927\u5024\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306fhoge.x,hoge.y,hoge.z\u3067\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5185\u5bb9\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nhoge.x = 20;\nhoge.y = 2;\nhoge.z = 1;\n\n\u4eca\u56de\u306e\u4f8b\u3067\u306f\u5404\u8981\u7d20\u306e\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nblock.x $= 512$\nblock.y $= 1$\nblock.z $= 1$\ngrid.x $= N/512 = 2048$\ngrid.y $= 1$\ngrid.z $= 1$\n\n\n\n\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\n\n\u30db\u30b9\u30c8\u5074\u3067\u7528\u610f\u3057\u305f\u914d\u5217\u3092\u3001\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u7528\u610f\u3057\u305f\u914d\u5217\u306b\u30b3\u30d4\u30fc\u3057\u305f\u3042\u3068\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u305d\u306e\u3068\u304d\u30b0\u30ea\u30c3\u30c9\u3068\u30d6\u30ed\u30c3\u30af\u306e\u6570\u3092\u6307\u5b9a\u3057\u3066\u30c7\u30d0\u30a4\u30b9\u5074\u306e\u5909\u6570\u3092\u5f15\u6570\u3068\u3057\u3057\u307e\u3059\u3002\n  vec_sum<<<grid, block>>>(2.0f, d_a, d_b,d_c);\n\nC\u3068\u306e\u9055\u3044\u306f3\u91cd\u306e\u30ab\u30c3\u30b3\u8a18\u53f7<<<g,b>>>\u3067\u3059\u306d\u3002\u3053\u306e\u30ab\u30c3\u30b3\u306b\u3088\u3063\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u30b9\u30ec\u30c3\u30c9\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u4f8b\u3067\u306f\u30b0\u30ea\u30c3\u30c9\u5185\u306e\u30d6\u30ed\u30c3\u30af\u6570\u30922048\u500b\u3001\u30d6\u30ed\u30c3\u30af\u5185\u306e\u30b9\u30ec\u30c3\u30c9\u6570\u3092512\u500b\u3001\u305d\u308c\u305e\u308c\u4e00\u6b21\u5143\u8ef8\u4e0a\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u306f\u30011\u6b21\u5143\u3060\u3051\u3057\u304b\u4f7f\u308f\u306a\u3044\u5834\u5408\u3001dim3\u3067\u5ba3\u8a00\u3057\u305f\u5909\u6570\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u76f4\u63a5\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n  vec_sum<<<2048, 512>>>(2.0f, d_a, d_b,d_c);\n\n\n\u5b9f\u884c\u7d50\u679c\n\u3055\u3066\u3001\u5148\u306b\u793a\u3057\u305f\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\u3053\u306e\u307e\u307e\u3060\u3068\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001\u3059\u3053\u3057\u624b\u3092\u52a0\u3048\u3066\u6642\u9593\u8a08\u6e2c\u306e\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u305d\u306e\u7d50\u679c\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\ncpu time:0.003000 sec\ngpu time:0.000000 sec\n\nMax error: 0.000000\n\ncpu time\u304c\u3001\u30db\u30b9\u30c8\u5074\u3067\u3001\u8981\u7d20\u304c$512 \\times 2048$\u500b\u304b\u3089\u306a\u308b \u30d9\u30af\u30c8\u30eb\u548c\u306e\u8a08\u7b97\u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3001gpu time \u304c\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u306e\u8a08\u7b97\u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3067\u3059\u3002\u30db\u30b9\u30c8\u5074\u3067\u884c\u3063\u305f\u8a08\u7b97\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\nfor(int i=0;i<N;i++) C[i] = 2.0f*A[i] + B[i];\n\n100\u4e07\u56de\u306e\u51e6\u7406\u3067\u306fcpu\u3067\u3082\u307b\u307c\u4e00\u77ac\u3067\u7d42\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3001gpu\u306b\u81f3\u3063\u3066\u306f\u5c11\u306a\u304f\u3068\u3082\u8a08\u6e2c\u4e0d\u80fd\u306a\u307b\u3069\u901f\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u3053\u306e\u7d50\u679c\u304b\u3089\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u305d\u306e\u4ed6\u3001\u7591\u554f\u306a\u3069\n\u4e0a\u306e\u7d50\u679c\u306e\u3088\u3046\u306a100\u4e07\u56de\u306e\u51e6\u7406\u3067\u306fgpu\u306e\u3042\u308a\u304c\u305f\u307f\u304c\u3069\u3046\u3082\u898b\u3048\u3066\u3053\u306a\u3044\u306e\u3067\u3001N\u306e\u6570\u30921000\u4e07\u3084\uff11\u5104\u306b\u5897\u3084\u3057\u3066\u5b9f\u884c\u3057\u305f\u306e\u3067\u3059\u304c\u3001gpu\u5074\u3067\u8a08\u7b97\u7d50\u679c\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u3001\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u306a\u306b\u304c\u539f\u56e0\u306a\u306e\u304b\u3092\u77e5\u308b\u306b\u306f\u3001\u3082\u3046\u3059\u3053\u3057\u52c9\u5f37\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\u6b21\u306e\u66f4\u65b0\u3067\u306f\u3001\u7dcf\u548c\u51e6\u7406\u306e\u4e26\u5217\u5316\u306b\u3064\u3044\u3066\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c8\u30fb\u6587\u732e\n[1] \u8457\uff1aJohn Cheng,Max Grossman,Ty McKercher,\u8a33\uff1a\u682a\u5f0f\u4f1a\u793e\u30af\u30a4\u30fc\u30d7,\u76e3\u8a33\uff1a\u68ee\u91ce\u614e\u4e5f,\u3000CUDA C \u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u3000\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0, \u682a\u5f0f\u4f1a\u793eimpres, 2015\n[2] \u9752\u6728\u5c0a\u4e4b\uff0c\u984d\u7530\u5f70\uff0c\u306f\u3058\u3081\u3066\u306eCUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff0c\u5de5\u5b66\u793e\uff0c2009\n[3] Mark Harris , An Easy Introduction to CUDA C and C++, https://devblogs.nvidia.com/parallelforall/easy-introduction-cuda-c-and-c/ ,2012 (2016/07/6 \u30a2\u30af\u30bb\u30b9)\n#\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3092CUDA\u3067\u66f8\u304f\uff08\u914d\u5217\u540c\u58eb\u306e\u8db3\u3057\u7b97\uff09\n\n\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3092\u4e26\u5217\u5316\u3059\u308b\u3068\u304d\u3001\u305d\u306e\u76ee\u7684\u306b\u3088\u3063\u3066\u4e26\u5217\u5316\u306e\u624b\u6bb5\u304c\u9055\u3046\u3002\u5f79\u306b\u7acb\u3064\u304b\u3069\u3046\u304b\u306f\u7f6e\u3044\u3068\u3044\u3066\u3001\u3053\u3053\u3067\u306f\u57fa\u672c\u7684\u306a\u3053\u3068\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\n##\u76ee\u7684\n\u914d\u5217\u540c\u58eb\u306e\u8db3\u3057\u7b97\u30d9\u30af\u30c8\u30eb\u548c\u3092\u8003\u3048\u307e\u3059\u3002\u4f8b\u3048\u3070\u305d\u308c\u305e\u308c\u3001\u5927\u304d\u3055\u304c $N$ \u500b\u306e\u914d\u5217 $A$ \u3068\u914d\u5217 $B$ \u306e\u5404\u8981\u7d20\u306e\u8db3\u3057\u7b97\u306e\u7d50\u679c\u3092\u3001\u914d\u5217 $C$ \u306b\u5165\u308c\u305f\u3044\u3068\u3044\u3046\u554f\u984c\u3092\u8003\u3048\u305f\u3068\u304d\u3001C\u8a00\u8a9e\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n\n```c:\nfor(int i=0;i<N;i++) C[i] = A[i] + B[i];\n```\n\n\u3053\u308c\u3092CUDA\u3067\u4e26\u5217\u5316\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u4e00\u4f8b\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n##CUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3051\u308b\u57fa\u790e\u77e5\u8b58\n\n###\u30b9\u30ec\u30c3\u30c9\u7ba1\u7406\u306b\u3064\u3044\u3066\n---\nGPU\u306f\u591a\u304f\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002CUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u305d\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u3046\u307e\u304f\u5229\u7528\u3057\u3066\u5927\u898f\u6a21\u306a\u8a08\u7b97\u3092\u9ad8\u901f\u3067\u51e6\u7406\u3057\u307e\u3059\u3002\u3059\u306a\u308f\u3061\u3001\u4e26\u5217\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u3001\u3053\u306e\u300c\u30b9\u30ec\u30c3\u30c9\u300d\u3092\u610f\u8b58\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nCUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306fGPU\u304c\u3082\u3064\u5927\u91cf\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u3046\u3061\u5fc5\u8981\u306a\u6570\u3092\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u304c\u6307\u5b9a\u3057\u3066\u4e26\u5217\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\u305d\u306e\u969b\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306fCUDA\u3067\u6c7a\u3081\u3089\u308c\u305f\u30b9\u30ec\u30c3\u30c9\u306e\u7ba1\u7406\u65b9\u5f0f\u306b\u5f93\u3063\u3066\u3001\u305d\u306e\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30b9\u30ec\u30c3\u30c9\u306f\uff13\u3064\u306e\u968e\u5c64\u3067\u7ba1\u7406\u3055\u308c\u3001\u305d\u308c\u305e\u308c\u6700\u4e0b\u5c64\u300c\u30b9\u30ec\u30c3\u30c9\u300d\u3001\u4e2d\u5c64\u300c\u30d6\u30ed\u30c3\u30af\u300d\u3001\u6700\u4e0a\u5c64\u300c\u30b0\u30ea\u30c3\u30c9\u300d\u3068\u3044\u3046\u540d\u524d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n* \u30b9\u30ec\u30c3\u30c9...\u968e\u5c64\u306e\u6700\u5c0f\u5358\u4f4d\n* \u30d6\u30ed\u30c3\u30af...\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u584a\n* \u30b0\u30ea\u30c3\u30c9...\u30d6\u30ed\u30c3\u30af\u5168\u4f53\u306e\u96c6\u5408\n\n\u4f8b\u3048\u3070\u3001\u5168\u90e8\u3067 $512\u00d72048 = 1048576$ \u500b\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3044\u305f\u3044\u3068\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\uff08\u30d6\u30ed\u30c3\u30af\u4e00\u3064\u5f53\u305f\u308a\u306e\u30b9\u30ec\u30c3\u30c9\u6570\uff09\u3092 $512$ \u3068\u3059\u308b\u3068\u3001\u5fc5\u8981\u306a\u30b0\u30ea\u30c3\u30c9\u30b5\u30a4\u30ba\u306f\u3001 $(512 \\times 2048)/512 = 2048 $\u3068\u306a\u308a\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u30b0\u30ea\u30c3\u30c9\u30b5\u30a4\u30ba\u3092 $2048$ \u3001\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba\u3092 $512$ \u3068\u6307\u5b9a\u3059\u308c\u3070\u3001\u6240\u671b\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30b0\u30ea\u30c3\u30c9\u306e\u4e2d\u3067\u30d6\u30ed\u30c3\u30af\u306f\u3001\u300cx\u65b9\u5411\u3001y\u65b9\u5411\u3001z\u65b9\u5411\u300d\u3068\uff13\u6b21\u5143\u7684\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u30d6\u30ed\u30c3\u30af\u306e\u4e2d\u3067\u3082\u30b9\u30ec\u30c3\u30c9\u306f\u540c\u3058\u3088\u3046\u306bx,y,z\u3068\uff13\u6b21\u5143\u7684\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nCUDA7.5\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bSample\u306e\u4e00\u3064\u306b\u3001deviceQuey\u3068\u3044\u3046\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\u304c(\u53c2\u8003\uff1a[CUDA 7.5 \u3092Windows10\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001Sample\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u307e\u3067](http://qiita.com/wazakkyd/items/ab79920b22b24b385487#devicequey%E3%81%AE%E5%AE%9F%E8%A1%8C))\u3001\u305d\u308c\u3092\u5b9f\u884c\u3055\u305b\u308b\u3068\u3001\u304a\u4f7f\u3044\u306eGPU\u3067\u3001\u5b9f\u969b\u306b\u30b9\u30ec\u30c3\u30c9\u3092\u3069\u306e\u3088\u3046\u306b\u7ba1\u7406\u3067\u304d\u308b\u304b\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u79c1\u306e\u74b0\u5883(GeForce GTX 750 Ti)\u3067deviceQuey\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u3067\u307e\u3059\u3002\n\n```\nCUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"GeForce GTX 750 Ti\"\n CUDA Driver Version / Runtime Version          7.5 / 7.5\n CUDA Capability Major/Minor version number:    5.0\n Total amount of global memory:                 2048 MBytes (2147483648 bytes)\n ( 5) Multiprocessors, (128) CUDA Cores/MP:     640 CUDA Cores\n GPU Max Clock rate:                            1085 MHz (1.08 GHz)\n Memory Clock rate:                             2700 Mhz\n Memory Bus Width:                              128-bit\n L2 Cache Size:                                 2097152 bytes\n Maximum Texture Dimension Size (x,y,z)         1D=(65536), 2D=(65536, 65536), 3D=(4096, 4096, 4096)\n Maximum Layered 1D Texture Size, (num) layers  1D=(16384), 2048 layers\n Maximum Layered 2D Texture Size, (num) layers  2D=(16384, 16384), 2048 layers\n Total amount of constant memory:               65536 bytes\n Total amount of shared memory per block:       49152 bytes\n Total number of registers available per block: 65536\n Warp size:                                     32\n Maximum number of threads per multiprocessor:  2048\n Maximum number of threads per block:           1024\n Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n Maximum memory pitch:                          2147483647 bytes\n Texture alignment:                             512 bytes\n Concurrent copy and kernel execution:          Yes with 1 copy engine(s)\n Run time limit on kernels:                     Yes\n Integrated GPU sharing Host Memory:            No\n Support host page-locked memory mapping:       Yes\n Alignment requirement for Surfaces:            Yes\n Device has ECC support:                        Disabled\n CUDA Device Driver Mode (TCC or WDDM):         WDDM (Windows Display Driver Model)\n Device supports Unified Addressing (UVA):      Yes\n Device PCI Domain ID / Bus ID / location ID:   0 / 1 / 0\n Compute Mode:\n    < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 7.5, CUDA Runtime Version = 7.5, NumDevs = 1, Device0 = GeForce GTX 750 Ti\nResult = PASS\n\n```\n\n\u3053\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u4e09\u884c\u306b\u6ce8\u76ee\u3059\u308b\u3068\u3001CUDA7.5\u3067GeForce GTX 750 Ti\u306e\u30b9\u30ec\u30c3\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7ba1\u7406\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n```\nMaximum number of threads per block:           1024\nMax dimension size of a thread block (x,y,z): (1024, 1024, 64)\nMax dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n```\n\n* \u30d6\u30ed\u30c3\u30af\u4e00\u3064\u3042\u305f\u308a\u3067\u6271\u3048\u308b\u6700\u5927\u30b9\u30ec\u30c3\u30c9\u6570\u3000$1024$\n* \u30d6\u30ed\u30c3\u30af\u306e\u4e2d\u3067\u6271\u3048\u308b\u6b21\u5143\u6570\u3000$1024\u00d71024\u00d764$\n* \u30b0\u30ea\u30c3\u30c9\u306e\u4e2d\u3067\u6271\u3048\u308b\u6b21\u5143\u6570\u3000$214743647\u00d765535\u00d765535$\n\n\u3053\u306e\u74b0\u5883\u3067\u30b9\u30ec\u30c3\u30c9\u3059\u3079\u3066\u3092\u4f7f\u3046\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u3001 $214743647\u00d765535\u00d765535$ \u306e\u30d6\u30ed\u30c3\u30af\u3092\u7528\u610f\u3057\u3066\u3001\u30d6\u30ed\u30c3\u30af\u306b\u306f\u6700\u5927\u3067\u30b9\u30ec\u30c3\u30c9\u3092 $1024$ \u500b\u305a\u3064\u3082\u305f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3053\u306eGPU\u3092\u4f7f\u3063\u3066CUDA\u3067\u540c\u6642\u306b\u51e6\u7406\u3067\u304d\u308b\u6700\u5927\u306e\u30b9\u30ec\u30c3\u30c9\u6570\u306f $214743647\u00d765535\u00d765535\u00d71024$ \u500b\uff08 $\\approx$ $10^{20}$ \u500b \uff09\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n###\u30db\u30b9\u30c8\u3001\u30c7\u30d0\u30a4\u30b9\n---\nCUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306fCPU\u306e\u3053\u3068\u3092\u300c\u30db\u30b9\u30c8\u300d\u3001GPU\u306e\u3053\u3068\u3092\u300c\u30c7\u30d0\u30a4\u30b9\u300d\u3068\u547c\u3073\u3001\u533a\u5225\u3057\u307e\u3059\u3002\n\n\u30db\u30b9\u30c8\u3067\u4f5c\u3089\u308c\u305f\u547d\u4ee4\u3092\u30c7\u30d0\u30a4\u30b9\u306b\u6e21\u3057\u3066\u4e26\u5217\u51e6\u7406\u3092\u884c\u3044\u3001\u305d\u306e\u7d50\u679c\u3092\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u30db\u30b9\u30c8\u3078\u79fb\u3057\u3066\u30db\u30b9\u30c8\u306b\u3088\u3063\u3066\u305d\u306e\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u306e\u304c\u3001CUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u7684\u306a\u6d41\u308c\u3067\u3059\u3002\n\n###dim3\u578b \u5909\u6570\n---\n\u30db\u30b9\u30c8\u5074\u3067\u30c7\u30d0\u30a4\u30b9\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3068\u304d\u3001dim3\u578b\u3068\u3044\u30463\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306e\u5909\u6570\u3092\u4f7f\u3063\u3066\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n###\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\n---\n\u30c7\u30d0\u30a4\u30b9\u5074\u306b\u30b9\u30ec\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u308b\u3068\u3001\u5404\u30b9\u30ec\u30c3\u30c9\u306b\u306f\u3001\u81ea\u5206\u306e\u4f4d\u7f6e\u3092\u793a\u3059ID\u304c\u964d\u3089\u308c\u307e\u3059\u3002\u3053\u306eID\u756a\u53f7\u306f\u5404\u30b9\u30ec\u30c3\u30c9\u306b\u7528\u610f\u3055\u308c\u305f\u300c\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u300d\u3068\u3044\u3046\u3082\u306e\u306b\u683c\u7d0d\u3055\u308c\u3001\u81ea\u7531\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u5909\u6570\u306f\u5ba3\u8a00\u305b\u305a\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u304c\u3001\u5185\u5bb9\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n###\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\n---\nCUDA\u3067\u66f8\u304b\u308c\u308b\u30b3\u30fc\u30c9\u306f\u3001\u5927\u304d\u304f\u308f\u3051\u308b\u3068\u30db\u30b9\u30c8\u3067\u51e6\u7406\u3055\u308c\u308b\u90e8\u5206\u3068\u3001\u30c7\u30d0\u30a4\u30b9\u3067\u51e6\u7406\u3055\u308c\u308b\u90e8\u5206\u306e\u4e8c\u3064\u306b\u5206\u985e\u3067\u304d\u307e\u3059\u3002\n\n\u30c7\u30d0\u30a4\u30b9\u3067\u884c\u3046\u4e26\u5217\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u305f\u95a2\u6570\u306e\u3053\u3068\u3092\u300c\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u300d\u3068\u3044\u3044\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u3067\u306f\u305d\u308c\u3068\u308f\u304b\u308b\u3088\u3046\u5ba3\u8a00\u3092\u3057\u307e\u3059\u3002\n\n\n\n\n##\u30b3\u30fc\u30c9\n\u3067\u306f\u3001\u5177\u4f53\u7684\u306aCUDA\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u884c\u3046\u51e6\u7406\u306f\u3001\u305d\u308c\u305e\u308c\u8981\u7d20\u6570\u304c $N$ \u500b\u306e\u914d\u5217 $A$ \u3068 $B$ \u3092\u7528\u610f\u3057\u3001 $A$ \u306b\u30b9\u30ab\u30e9\u30fc\u5024 $k$ \u3092\u639b\u3051\u3066\u3001\u305d\u308c\u3068 $B$ \u3092\u8db3\u3057\u305f\u3082\u306e\u3092 \u540c\u3058\u8981\u7d20\u6570\u306e\u914d\u5217 $C$ \u306b\u4ee3\u5165\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n```cuda:\n#include <stdio.h>\n\n//\u30ab\u30fc\u30cd\u30eb\u95a2\u6570vec_sum\u306e\u5ba3\u8a00\n__global__\nvoid vec_sum(float k, float *a, float *b, float *c)\n{\n  int i = blockIdx.x*blockDim.x + threadIdx.x;\n  c[i] = k*a[i] + b[i];\n}\n\n\nint main(void)\n{\n  //N = 512\u00d72048\n\tint N = 1<<20;\n\n  //a,b,c\u306f\u30db\u30b9\u30c8\u7528\u3001d_a,d_b,d_c\u306f\u30c7\u30d0\u30a4\u30b9\u7528\u306e\u30dd\u30a4\u30f3\u30bf\n  float *a, *b, *c  *d_a, *d_b, *d_c;\n\n  //\u30db\u30b9\u30c8\u5074\u306e\u914d\u5217\u3092\u7528\u610f\n  a = (float*)malloc(N*sizeof(float));\n  b = (float*)malloc(N*sizeof(float));\n  c = (float*)malloc(N*sizeof(float));\n\n  //\u30c7\u30d0\u30a4\u30b9\u5074\u306e\u914d\u5217\u3092\u7528\u610f\n  cudaMalloc(&d_a, N*sizeof(float));\n  cudaMalloc(&d_b, N*sizeof(float));\n  cudaMalloc(&d_c, N*sizeof(float));\n\n //a,b\u306e\u914d\u5217\u306b\u305d\u308c\u305e\u308c1\uff0c2\u3092\u4ee3\u5165\u3057\u3001c\u3092\u521d\u671f\u5316\n  for (int i = 0; i < N; i++) {\n    a[i] = 1.0f;\n    b[i] = 2.0f;\n    c[i] = 0.0f;\n  }\n\n  //\u30db\u30b9\u30c8\u5074\u306e\u914d\u5217\u306e\u5185\u5bb9\u3092\u30c7\u30d0\u30a4\u30b9\u5074\u306b\u30b3\u30d4\u30fc\n  cudaMemcpy(d_a, a, N*sizeof(float), cudaMemcpyHostToDevice);\n  cudaMemcpy(d_b, b, N*sizeof(float), cudaMemcpyHostToDevice);\n  cudaMemcpy(d_c, c, N*sizeof(float), cudaMemcpyHostToDevice);\n\n\n  //\u30b9\u30ec\u30c3\u30c9\u306e\u8a2d\u5b9a\n  int blocksize = 512;\n\n  //\u30d6\u30ed\u30c3\u30af\u3042\u305f\u308a\u306e\u30b9\u30ec\u30c3\u30c9\u6570\uff08blocksize)\u3092512\u3001\n  //\u30d6\u30ed\u30c3\u30af\u306e\u7dcf\u6570\uff08gridsize\uff09\u3092N/512\u7528\u610f\u3059\u308b\n  //\u3057\u305f\u304c\u3063\u3066\u7dcf\u30b9\u30ec\u30c3\u30c9\u6570\u306f blocksize \u00d7 gridsize = N \u500b\n  dim3 block (blocksize, 1, 1);\n  dim3 grid  (N / block.x, 1, 1);\n\n  // \u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\n  vec_sum<<<grid, block>>>(2.0f, d_a, d_b,d_c);\n\n  //\u8a08\u7b97\u7d50\u679c\u3092\u30db\u30b9\u30c8\u3078\u30b3\u30d4\u30fc\n  cudaMemcpy(c, d_c, N*sizeof(float), cudaMemcpyDeviceToHost);\n\n  float maxError = 0.0f;\n\n  //\u8a08\u7b97\u7d50\u679c\u306e\u78ba\u8a8d\n\tfor (int i = 0; i < N; i++) maxError = max(maxError, abs(c[i]-4.0f));\n  printf(\"Max error: %f\", maxError);\n\n  //\u30e1\u30e2\u30ea\u306e\u958b\u653e\n  free(a);\n  free(b);\n  free(c);\n\n  cudaFree(d_a);\n  cudaFree(d_b);\n  cudaFree(d_c);\n\n return 0;\n}\n\n```\n\n---\n* **\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u90e8\u5206**\n\n```cuda:\n__global__\nvoid vec_sum(float k, float *a, float *b, float *c)\n{\n  int i = blockIdx.x*blockDim.x + threadIdx.x;\n  c[i] = k*a[i] + b[i];\n}\n```\n\u30b3\u30fc\u30c9\u306e\u5192\u982d\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u3053\u306e\u95a2\u6570\u304c\u3001\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u5b9f\u884c\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3067\u3059\u3002\n\n\n ` __global__ ` \u306f\u95a2\u6570\u306b\u5bfe\u3059\u308b\u4fee\u98fe\u5b50\u3067\u3001\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u547c\u3073\u51fa\u3057\u305f\u3044\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u3053\u306e\u4e0b\u306b\u5ba3\u8a00\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u95a2\u6570`vec_sum`\u304c\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u4e2d\u306b\u767b\u5834\u3059\u308b`blockIdx.x`,`blockDim.x`,`thereadIdx.x`\u306f\u300c\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u300d\u3067\u3001\u3053\u308c\u3089\u306f\u5ba3\u8a00\u305b\u305a\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u306b\u306f\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u306eID\u306e\u5024\u304c\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u306f\u8aad\u307f\u8fbc\u307f\u5c02\u7528\u3067\u3001\u5185\u5bb9\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u305d\u308c\u305e\u308c\u306e\u5909\u6570\u306e\u7bc4\u56f2\u306f\u3001\u6307\u5b9a\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u6570\u306b\u3088\u3063\u3066\u5b9a\u307e\u308a\u307e\u3059\u3002\n\u4eca\u3001\u30b0\u30ea\u30c3\u30c9\u30b5\u30a4\u30ba $2048$ \u3001\u30d6\u30ed\u30c3\u30af\u30b5\u30a4\u30ba $512$ \u3068\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u3068\u304d\u3001`blockIdx.x`,`blockDim.x`,`thereadIdx.x`\u305d\u308c\u305e\u308c\u306e\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n* blockIdx.x $= 0$ ~ $2047$\n* blockDim.x $= 512$\n* threadIdx.x $= 0$ ~ $511$\n\n\u3057\u305f\u304c\u3063\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306b\u304a\u3051\u308b`i = blockIdx.x*blockDim.x + threadIdx.x`\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u306b\u5fdc\u3058\u3066 $0$ ~ $1048575$ \u306e\u5024\u3092\u3068\u308a\u307e\u3059\u3002\n\u3088\u3063\u3066\u3001\u3053\u306e\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u30b9\u30ec\u30c3\u30c9\u3067\u306f\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3059\u308b\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u306b\u3088\u3063\u3066 `i` \u306e\u5024\u304c\u6c7a\u5b9a\u3057\u3001\u305d\u306e\u5024\u306b\u5fdc\u3058\u305f\u914d\u5217\u8981\u7d20\u306e\u6f14\u7b97\u3092\u884c\u3046\u3068\u3044\u3046\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u30d3\u30eb\u30c9\u30a4\u30f3\u5909\u6570\u306f\u3053\u306e\u307b\u304b\u306b\u3082\n\n* `gridDim.x`,`gridDim.y`,`gridDim.z`\n* `blockIdy.y`,`blockDim.y`,`thereadIdy.y`\n* `blockIdz.z`,`blockDim.z`,`thereadIdz.z`\n\n\u306a\u3069\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3089\u3092\u99c6\u4f7f\u3057\u3066\u591a\u6b21\u5143\u7684\u306b\u4e26\u5217\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u5358\u7d14\u306a\u4f8b\u306a\u306e\u30671\u6b21\u5143\uff08\uff58\u8ef8\uff09\u3060\u3051\u3092\u4f7f\u3063\u3066\u6f14\u7b97\u51e6\u7406\u3092\u3057\u307e\u3059\u3002\n\n---\n* **\u30b9\u30ec\u30c3\u30c9\u306e\u8a2d\u5b9a**\n\n```cuda:\nint blocksize = 512;\ndim3 block (blocksize, 1, 1);\ndim3 grid  (N / block.x, 1, 1);\n```\n\n\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u306b\u6307\u5b9a\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u6570\u306e\u305f\u3081\u306b\u30d9\u30af\u30c8\u30eb\u5909\u6570`dim3`\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002`dim3`\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306b\n\n```cuda:\ndim3 hoge(x,y,z);\n```\n\n\u3068\u5ba3\u8a00\u3055\u308c\u307e\u3059\u3002\u30d9\u30af\u30c8\u30eb\u306e\u5404\u8981\u7d20x,y,z\u306b\u306f\u305d\u308c\u305e\u308c\u306e\u6b21\u5143\u306e\u6700\u5927\u5024\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306f`hoge.x`,`hoge.y`,`hoge.z`\u3067\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5185\u5bb9\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```cuda:\nhoge.x = 20;\nhoge.y = 2;\nhoge.z = 1;\n```\n\n\n\u4eca\u56de\u306e\u4f8b\u3067\u306f\u5404\u8981\u7d20\u306e\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n* block.x $= 512$\n* block.y $= 1$\n* block.z $= 1$\n* grid.x $= N/512 = 2048$\n* grid.y $= 1$\n* grid.z $= 1$\n\n---\n\n* **\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057**\n\n\n\u30db\u30b9\u30c8\u5074\u3067\u7528\u610f\u3057\u305f\u914d\u5217\u3092\u3001\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u7528\u610f\u3057\u305f\u914d\u5217\u306b\u30b3\u30d4\u30fc\u3057\u305f\u3042\u3068\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u305d\u306e\u3068\u304d\u30b0\u30ea\u30c3\u30c9\u3068\u30d6\u30ed\u30c3\u30af\u306e\u6570\u3092\u6307\u5b9a\u3057\u3066\u30c7\u30d0\u30a4\u30b9\u5074\u306e\u5909\u6570\u3092\u5f15\u6570\u3068\u3057\u3057\u307e\u3059\u3002\n\n```cuda:\n  vec_sum<<<grid, block>>>(2.0f, d_a, d_b,d_c);\n```\n\nC\u3068\u306e\u9055\u3044\u306f3\u91cd\u306e\u30ab\u30c3\u30b3\u8a18\u53f7`<<<g,b>>>`\u3067\u3059\u306d\u3002\u3053\u306e\u30ab\u30c3\u30b3\u306b\u3088\u3063\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u30b9\u30ec\u30c3\u30c9\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u4f8b\u3067\u306f\u30b0\u30ea\u30c3\u30c9\u5185\u306e\u30d6\u30ed\u30c3\u30af\u6570\u30922048\u500b\u3001\u30d6\u30ed\u30c3\u30af\u5185\u306e\u30b9\u30ec\u30c3\u30c9\u6570\u3092512\u500b\u3001\u305d\u308c\u305e\u308c\u4e00\u6b21\u5143\u8ef8\u4e0a\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u306f\u30011\u6b21\u5143\u3060\u3051\u3057\u304b\u4f7f\u308f\u306a\u3044\u5834\u5408\u3001`dim3`\u3067\u5ba3\u8a00\u3057\u305f\u5909\u6570\u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u76f4\u63a5\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```cuda:\n  vec_sum<<<2048, 512>>>(2.0f, d_a, d_b,d_c);\n```\n\n##\u5b9f\u884c\u7d50\u679c\n\u3055\u3066\u3001\u5148\u306b\u793a\u3057\u305f\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\u3053\u306e\u307e\u307e\u3060\u3068\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001\u3059\u3053\u3057\u624b\u3092\u52a0\u3048\u3066\u6642\u9593\u8a08\u6e2c\u306e\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u305d\u306e\u7d50\u679c\u3092\u8868\u793a\u3057\u307e\u3059\u3002\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```\ncpu time:0.003000 sec\ngpu time:0.000000 sec\n\nMax error: 0.000000\n```\n\n`cpu time`\u304c\u3001\u30db\u30b9\u30c8\u5074\u3067\u3001\u8981\u7d20\u304c$512 \\times 2048$\u500b\u304b\u3089\u306a\u308b \u30d9\u30af\u30c8\u30eb\u548c\u306e\u8a08\u7b97\u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3001`gpu time` \u304c\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u306e\u8a08\u7b97\u51e6\u7406\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3067\u3059\u3002\u30db\u30b9\u30c8\u5074\u3067\u884c\u3063\u305f\u8a08\u7b97\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```c:\nfor(int i=0;i<N;i++) C[i] = 2.0f*A[i] + B[i];\n```\n\n100\u4e07\u56de\u306e\u51e6\u7406\u3067\u306fcpu\u3067\u3082\u307b\u307c\u4e00\u77ac\u3067\u7d42\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3001gpu\u306b\u81f3\u3063\u3066\u306f\u5c11\u306a\u304f\u3068\u3082\u8a08\u6e2c\u4e0d\u80fd\u306a\u307b\u3069\u901f\u3044\u3068\u3044\u3046\u3053\u3068\u304c\u3053\u306e\u7d50\u679c\u304b\u3089\u308f\u304b\u308a\u307e\u3059\u3002\n\n##\u305d\u306e\u4ed6\u3001\u7591\u554f\u306a\u3069\n\u4e0a\u306e\u7d50\u679c\u306e\u3088\u3046\u306a100\u4e07\u56de\u306e\u51e6\u7406\u3067\u306fgpu\u306e\u3042\u308a\u304c\u305f\u307f\u304c\u3069\u3046\u3082\u898b\u3048\u3066\u3053\u306a\u3044\u306e\u3067\u3001N\u306e\u6570\u30921000\u4e07\u3084\uff11\u5104\u306b\u5897\u3084\u3057\u3066\u5b9f\u884c\u3057\u305f\u306e\u3067\u3059\u304c\u3001gpu\u5074\u3067\u8a08\u7b97\u7d50\u679c\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u3001\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u306a\u306b\u304c\u539f\u56e0\u306a\u306e\u304b\u3092\u77e5\u308b\u306b\u306f\u3001\u3082\u3046\u3059\u3053\u3057\u52c9\u5f37\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\n\u6b21\u306e\u66f4\u65b0\u3067\u306f\u3001\u7dcf\u548c\u51e6\u7406\u306e\u4e26\u5217\u5316\u306b\u3064\u3044\u3066\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n##\u53c2\u8003\u30b5\u30a4\u30c8\u30fb\u6587\u732e\n[1] \u8457\uff1aJohn Cheng,Max Grossman,Ty McKercher,\u8a33\uff1a\u682a\u5f0f\u4f1a\u793e\u30af\u30a4\u30fc\u30d7,\u76e3\u8a33\uff1a\u68ee\u91ce\u614e\u4e5f,\u3000CUDA C \u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u3000\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0, \u682a\u5f0f\u4f1a\u793eimpres, 2015\n[2] \u9752\u6728\u5c0a\u4e4b\uff0c\u984d\u7530\u5f70\uff0c\u306f\u3058\u3081\u3066\u306eCUDA\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff0c\u5de5\u5b66\u793e\uff0c2009\n[3] Mark Harris\t, An Easy Introduction to CUDA C and C++, https://devblogs.nvidia.com/parallelforall/easy-introduction-cuda-c-and-c/ ,2012 (2016/07/6 \u30a2\u30af\u30bb\u30b9)\n", "tags": ["CUDA", "GPGPU", "C", "CUDA7.5"]}