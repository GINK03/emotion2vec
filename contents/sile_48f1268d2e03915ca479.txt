{"context": " More than 1 year has passed since last update.\n\n\u7d50\u8ad6\nR17.0\u304b\u3089\u5c0e\u5165\u3055\u308c\u305fmaps\u306f\u3001\u73fe\u5728\u306e\u5b9f\u88c5\u3067\u306f\u8981\u7d20\u6570\u304c\u4e00\u5b9a\u6570(ex. 1000)\u3092\u8d85\u3048\u308b\u3068\u6025\u6fc0\u306b\u6027\u80fd\u304c\u52a3\u5316\u3057\u3066\u3044\u304f\u3088\u3046\u306a\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n(\u78ba\u8a8d\u30d0\u30fc\u30b8\u30e7\u30f3\u306f R17.0 \u304a\u3088\u3073 R17.1)\n\n\u6027\u80fd\u8a08\u6e2c\n\n\u74b0\u5883\n\nCPU: Intel(R) Xeon(R) CPU E5-2680 v2 @ 2.80GHz (x8)\nOS: CentOS 6.5\nErlang: R17.1\n\n\n\u6e2c\u5b9a\u5bfe\u8c61\n\nmaps, dict, gb_trees\n\u5168\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306fHiPE\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\n\n\nmaps\u306f\u307b\u3068\u3093\u3069\u304cNIF\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067HiPE\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u610f\u5473\u306f\u307b\u307c\u306a\u3044\u304c\u3001\u4ed6\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u4e00\u5fdc\u5408\u308f\u305b\u3066\u304a\u3044\u305f\n\n\n\n\n\u6e2c\u5b9a\u65b9\u6cd5\n\u6e2c\u5b9a\u65b9\u6cd5\u306e\u6982\u8981:\n\n\u5165\u529b\u5024\u306f\u30010\u304b\u3089\u8981\u7d20\u6570\u672a\u6e80\u306e\u6570\u5024\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3079\u305f\u3082\u306e\n\u5165\u529b\u5024\u3092\u9806\u306b\u633f\u5165\u3057\u3066\u3044\u304d\u3001\u5168\u8981\u7d20\u3092\u633f\u5165\u3059\u308b\u307e\u3067\u306b\u639b\u304b\u3063\u305f\u6642\u9593\u3092\u8a08\u6e2c\n\u5168\u8981\u7d20\u306e\u51e6\u7406\u306b\u639b\u304b\u3063\u305f\u6642\u9593\u3092\u8981\u7d20\u6570\u3067\u5272\u3063\u3066\u3001\u4e00\u8981\u7d20\u306e\u633f\u5165\u306b\u639b\u304b\u3063\u305f\u5e73\u5747\u6642\u9593\u3092\u7b97\u51fa\n\n\n\u3053\u306e\u4e00\u8981\u7d20\u3042\u305f\u308a\u306e\u5e73\u5747\u51e6\u7406\u6642\u9593\u304c\u3001\u4eca\u56de\u306e\u6e2c\u5b9a\u7d50\u679c\u3068\u306a\u308b\n\u306a\u304a\u633f\u5165\u4ee5\u5916\u306e\u51e6\u7406(ex. \u524a\u9664\u3001\u691c\u7d22)\u306f\u4eca\u56de\u306e\u5bfe\u8c61\u5916\u3068\u3059\u308b\u304c\u633f\u5165\u3068\u540c\u69d8\u306e\u51e6\u7406\u50be\u5411\u3092\u793a\u3057\u3066\u3044\u305f\n\n\n\n\u5b9f\u969b\u306e\u6e2c\u5b9a\u30b3\u30fc\u30c9:\n\nbench.erl\n-module(bench).\n\n-export([bench/0]).\n\n-spec bench() -> [Result] when\n      Result :: {module(), ElementSize::pos_integer(), InsertAverageNanoSeconds::non_neg_integer()}.\nbench() ->\n    ElementSizeList = [1, 10, 100, 1000, 10000, 100000], \n    InputList = [shuffle(lists:seq(0, Size - 1)) || Size <- ElementSizeList],\n\n    ModuleList = [dict, gb_trees, maps],\n\n    lists:sort(\n      [do_bench(Module, Input) || Module <- ModuleList,\n                                  Input <- InputList]).\n\n-spec do_bench(module(), [non_neg_integer()]) -> Result when\n      Result :: {module(), ElementSize::pos_integer(), InsertAverageNanoSeconds::non_neg_integer()}.\ndo_bench(Module, Input) ->\n    ElementSize = length(Input),\n    LoopCount = 100000 div ElementSize,  % \u4e00\u56de\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u4e2d\u306e\u633f\u5165\u64cd\u4f5c\u306e\u56de\u6570\u3092\u7b49\u3057\u304f\u3055\u305b\u308b\u305f\u3081\u306b\u3001\u30eb\u30fc\u30d7\u6570\u3067\u8abf\u6574\u3059\u308b\n\n    Empty = make_empty(Module),\n    Fun   = get_insert_fun(Module),\n\n    {TotalMicroSeconds, _} =\n        timer:tc(fun () -> bench_loop(LoopCount, Empty, Fun, Input) end),\n    AverageNanoSeconds = round((TotalMicroSeconds * 1000) / 100000),\n    {Module, ElementSize, AverageNanoSeconds}.\n\n-spec make_empty(module()) -> term().\nmake_empty(dict)     -> dict:new();\nmake_empty(gb_trees) -> gb_trees:empty();\nmake_empty(maps)     -> maps:new().\n\n-spec get_insert_fun(module()) -> fun ((term(), term(), term()) -> term()).\nget_insert_fun(dict)     -> fun dict:store/3;\nget_insert_fun(gb_trees) -> fun gb_trees:enter/3;\nget_insert_fun(maps)     -> fun maps:put/3.\n\n-spec shuffle(list()) -> list().\nshuffle(List) ->\n    [X||{_,X} <- lists:keysort(1, [{random:uniform(), N} || N <- List])].\n\n-spec bench_loop(non_neg_integer(), term(), function(), [non_neg_integer()]) -> ok.\nbench_loop(0, _, _, _)                      -> ok;\nbench_loop(LoopCount, Empty, Fun, Input) ->\n    _ = lists:foldl(fun (N, Acc) -> Fun(N, N, Acc) end, Empty, Input),\n    bench_loop(LoopCount - 1, Empty, Fun, Input).\n\n\n\n\u6e2c\u5b9a\u7d50\u679c\n\u8868\u306e\u5024\u306f\u3001\u4e00\u3064\u306e\u633f\u5165\u64cd\u4f5c\u306b\u8981\u3057\u305f\u5e73\u5747\u6642\u9593(\u30ca\u30ce\u79d2\u5358\u4f4d)\u3002\n\n\n\n\u8981\u7d20\u6570 \uff3c \u30e2\u30b8\u30e5\u30fc\u30eb\ndict\ngb_trees\nmaps\n\n\n\n\n1\n355\n165\n192\n\n\n10\n260\n126\n162\n\n\n100\n321\n216\n375\n\n\n1000\n461\n344\n2444\n\n\n10000\n763\n564\n26274\n\n\n100000\n2076\n1255\n323424\n\n\n\n\u8981\u7d20\u6570\u304c100\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u3001HiPE\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u305fdict\u3084gb_trees\u3068\u540c\u7a0b\u5ea6\u306e\u6027\u80fd\u304c\u51fa\u3066\u3044\u308b\u304c\u30011000\u3092\u8d85\u3048\u308b\u3068\u8981\u7d20\u6570\u306b\u307b\u307c\u6bd4\u4f8b\u3059\u308b\u5f62\u3067\u3001\u633f\u5165\u51e6\u7406\u306e\u52b9\u7387\u304c\u60aa\u304f\u306a\u3063\u3066\u308b\u3002 \n\u3053\u3053\u307e\u3067\u6027\u80fd\u304c\u52a3\u5316\u3059\u308b\u306e\u306f\u30d0\u30b0\u3063\u307d\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u9060\u304f\u306a\u3044\u30ea\u30ea\u30fc\u30b9\u3067\u6539\u5584\u3055\u308c\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u305f\u3044\u304c\u3001\u73fe\u72b6\u3067\u306f\u8981\u7d20\u6570\u304c\u591a\u304f\u306a\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306fmaps\u306e\u4f7f\u7528\u306f\u907f\u3051\u305f\u65b9\u304c\u7121\u96e3\u305d\u3046\u3002\n\n\u8ffd\u8a18: 2014/07/06\nmaps\u306e\u5b9f\u88c5\u30b3\u30fc\u30c9(\u4f8b\u3048\u3070\u4e0b\u8a18\u306b\u5f15\u7528\u3057\u305fmaps:get/2\u306e\u5b9f\u88c5)\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u73fe\u72b6\u306f\u9023\u60f3\u30ea\u30b9\u30c8\u304c\u5185\u90e8\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u3057\u3066\u63a1\u7528\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\notp_src_17.1/erts/emulator/beam/erl_map.c\n/* maps:get/2\n * return value if key *matches* a key in the map                                                                                                                                                                                                                                                                    \n * exception bad_key if none matches\n */\n\nint erts_maps_get(Eterm key, Eterm map, Eterm *value) {\n    Eterm *ks,*vs;\n    map_t *mp;\n    Uint n,i;\n\n    mp  = (map_t*)map_val(map);\n    n   = map_get_size(mp);\n\n    if (n == 0)\n        return 0;\n\n    ks  = map_get_keys(mp);\n    vs  = map_get_values(mp);\n\n    if (is_immed(key)) {\n        for( i = 0; i < n; i++) {\n            if (ks[i] == key) {\n                *value = vs[i];\n                return 1;\n            }\n        }\n    }\n\n    for( i = 0; i < n; i++) {\n        if (EQ(ks[i], key)) {\n            *value = vs[i];\n            return 1;\n        }\n    }\n    return 0;\n}\n\n\nmaps\u304c\u63d0\u6848\u3055\u308c\u3066\u3044\u308bEEP-43\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6587\u7ae0\u304c\u3042\u3063\u305f\u305f\u3081\u306b\u3001\u52dd\u624b\u306b\u30ed\u30b0\u30aa\u30fc\u30c0\u30fc\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u304c\u3001\u305d\u3046\u3067\u306f\u306a\u304b\u3063\u305f\u3089\u3057\u3044\u3002(\u3053\u3053\u3067\u3082 shall \u3068\u3057\u3066\u8a00\u53ca\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u5225\u306b\u5fc5\u9808\u3068\u306f\u3055\u308c\u3066\u3044\u306a\u3044)\n\nThe new data-type shall have semantics, syntax and operations that:\n \u30fb... \u7565 ...\u3000\n \u30fbhas at most O(log N) time complexity in insert and lookup operations, where N is the number of key-value associations.\nSimilar data-types exists in other languages, i.e. perl hashes, ruby hashes, python dictionaries, or scala maps.\n\n\u305f\u3060\u3001EEP-43\u3092\u898b\u308b\u3068\u3044\u304f\u3064\u304b\u306e\u7b87\u6240\u3067\u3001maps\u306f\u8981\u7d20\u6570\u304c\u591a\u304f\u306a\u3063\u3066\u3082log(\u8981\u7d20\u6570)\u3067\u64cd\u4f5c\u304c\u884c\u3048\u308b\u3082\u306e\u306b\u6210\u308a\u5f97\u308b\u3053\u3068\u3092\u793a\u5506\u3059\u308b\u6587\u7ae0\u304c\u898b\u53d7\u3051\u3089\u308c\u308b\u306e\u3067\u3001\u5c06\u6765\u7684\u306b\u5185\u90e8\u69cb\u9020\u304c\u5909\u66f4\u3055\u308c\u308b\u53ef\u80fd\u6027\u306f\u3042\u308a\u305d\u3046\u3002\n\n\u8ffd\u8a18: 2014-12-31\n\u300eMAPs Now and Then\u300f\u3068\u3044\u3046\u30d3\u30c7\u30aa\u3067OTP17\u3067\u306emaps\u306e\u6271\u3044\u304c\u8a73\u7d30\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u305f\u3002\n\u4ee5\u4e0b\u3001\u8981\u7d04:\n\nmaps\u306f\u30ec\u30b3\u30fc\u30c9\u7684\u306a\u5f79\u5272\u3068dict(or gb_trees,proplists,etc)\u7684\u306a\u5f79\u5272\u306e\u4e21\u65b9\u3092\u679c\u305f\u3059\u3082\u306e\u3068\u3057\u3066\u5c0e\u5165\u3055\u308c\u305f\n\n\n\u524d\u8005\u306f\u30ad\u30fc\u30bb\u30c3\u30c8\u304c\u56fa\u5b9a\u304b\u3064\u5c11\u6570\n\u5f8c\u8005\u306f\u30ad\u30fc\u30bb\u30c3\u30c8\u304c\u52d5\u7684\u304b\u3064\u591a\u6570\u306b\u306a\u308a\u5f97\u308b\n\n\nOTP17\u3067\u306f\u3001\u30ec\u30b3\u30fc\u30c9\u7684\u306a\u5f79\u5272\u3068\u3057\u3066\u306e\u90e8\u5206\u306e\u307f\u304c\u5b9f\u88c5\u3055\u308c\u305f\n\n\n\u5185\u90e8\u8868\u73fe\u306f\u7dda\u5f62\u30ea\u30b9\u30c8\u3067\u3001\u8981\u7d20\u6570\u304c64\u4ee5\u4e0b\u7a0b\u5ea6\u306e\u6bd4\u8f03\u7684\u5c11\u6570\u306e\u3082\u306e\u3092\u60f3\u5b9a\n\n\nOTP18\u3067\u306f\u3001dict\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3082\u30ab\u30d0\u30fc\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u4e88\u5b9a\n\n\n\u8981\u7d20\u6570\u304c\u5927\u304d\u304f\u306a\u3063\u305f\u3089\u3001\u5185\u90e8\u8868\u73fe\u304cHash-Array-Mapped-Trie\u306b\u5207\u308a\u66ff\u308f\u308b\u3088\u3046\u306b\u3059\u308b(?)\n\n\n\n\n\u8ffd\u8a18: 2015-06-30\nOTP18.0\u3067\u306f\u7121\u4e8b\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u3066\u3044\u305f\u3002\n\u8a73\u7d30\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\u7d50\u8ad6\n====\nR17.0\u304b\u3089\u5c0e\u5165\u3055\u308c\u305f[maps](http://erlang.org/doc/man/maps.html)\u306f\u3001\u73fe\u5728\u306e\u5b9f\u88c5\u3067\u306f\u8981\u7d20\u6570\u304c\u4e00\u5b9a\u6570(ex. 1000)\u3092\u8d85\u3048\u308b\u3068\u6025\u6fc0\u306b\u6027\u80fd\u304c\u52a3\u5316\u3057\u3066\u3044\u304f\u3088\u3046\u306a\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n(\u78ba\u8a8d\u30d0\u30fc\u30b8\u30e7\u30f3\u306f R17.0 \u304a\u3088\u3073 R17.1)\n\n\u6027\u80fd\u8a08\u6e2c\n=======\n\n\u74b0\u5883\n----\n\n- CPU: Intel(R) Xeon(R) CPU E5-2680 v2 @ 2.80GHz (x8)\n- OS: CentOS 6.5\n- Erlang: R17.1\n\n\u6e2c\u5b9a\u5bfe\u8c61\n-------\n- maps, dict, gb_trees\n- \u5168\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306fHiPE\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\n  - maps\u306f\u307b\u3068\u3093\u3069\u304cNIF\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067HiPE\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u610f\u5473\u306f\u307b\u307c\u306a\u3044\u304c\u3001\u4ed6\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u4e00\u5fdc\u5408\u308f\u305b\u3066\u304a\u3044\u305f\n\n\u6e2c\u5b9a\u65b9\u6cd5\n-------\n\u6e2c\u5b9a\u65b9\u6cd5\u306e\u6982\u8981:\n\n1. \u5165\u529b\u5024\u306f\u30010\u304b\u3089\u8981\u7d20\u6570\u672a\u6e80\u306e\u6570\u5024\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3079\u305f\u3082\u306e\n2. \u5165\u529b\u5024\u3092\u9806\u306b\u633f\u5165\u3057\u3066\u3044\u304d\u3001\u5168\u8981\u7d20\u3092\u633f\u5165\u3059\u308b\u307e\u3067\u306b\u639b\u304b\u3063\u305f\u6642\u9593\u3092\u8a08\u6e2c\n3. \u5168\u8981\u7d20\u306e\u51e6\u7406\u306b\u639b\u304b\u3063\u305f\u6642\u9593\u3092\u8981\u7d20\u6570\u3067\u5272\u3063\u3066\u3001\u4e00\u8981\u7d20\u306e\u633f\u5165\u306b\u639b\u304b\u3063\u305f\u5e73\u5747\u6642\u9593\u3092\u7b97\u51fa\n    - \u3053\u306e\u4e00\u8981\u7d20\u3042\u305f\u308a\u306e\u5e73\u5747\u51e6\u7406\u6642\u9593\u304c\u3001\u4eca\u56de\u306e\u6e2c\u5b9a\u7d50\u679c\u3068\u306a\u308b\n    - \u306a\u304a\u633f\u5165\u4ee5\u5916\u306e\u51e6\u7406(ex. \u524a\u9664\u3001\u691c\u7d22)\u306f\u4eca\u56de\u306e\u5bfe\u8c61\u5916\u3068\u3059\u308b\u304c\u633f\u5165\u3068\u540c\u69d8\u306e\u51e6\u7406\u50be\u5411\u3092\u793a\u3057\u3066\u3044\u305f\n\n\u5b9f\u969b\u306e\u6e2c\u5b9a\u30b3\u30fc\u30c9:\n\n```erlang:bench.erl\n-module(bench).\n\n-export([bench/0]).\n\n-spec bench() -> [Result] when\n      Result :: {module(), ElementSize::pos_integer(), InsertAverageNanoSeconds::non_neg_integer()}.\nbench() ->\n    ElementSizeList = [1, 10, 100, 1000, 10000, 100000], \n    InputList = [shuffle(lists:seq(0, Size - 1)) || Size <- ElementSizeList],\n\n    ModuleList = [dict, gb_trees, maps],\n\n    lists:sort(\n      [do_bench(Module, Input) || Module <- ModuleList,\n                                  Input <- InputList]).\n\n-spec do_bench(module(), [non_neg_integer()]) -> Result when\n      Result :: {module(), ElementSize::pos_integer(), InsertAverageNanoSeconds::non_neg_integer()}.\ndo_bench(Module, Input) ->\n    ElementSize = length(Input),\n    LoopCount = 100000 div ElementSize,  % \u4e00\u56de\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u4e2d\u306e\u633f\u5165\u64cd\u4f5c\u306e\u56de\u6570\u3092\u7b49\u3057\u304f\u3055\u305b\u308b\u305f\u3081\u306b\u3001\u30eb\u30fc\u30d7\u6570\u3067\u8abf\u6574\u3059\u308b\n\n    Empty = make_empty(Module),\n    Fun   = get_insert_fun(Module),\n\n    {TotalMicroSeconds, _} =\n        timer:tc(fun () -> bench_loop(LoopCount, Empty, Fun, Input) end),\n    AverageNanoSeconds = round((TotalMicroSeconds * 1000) / 100000),\n    {Module, ElementSize, AverageNanoSeconds}.\n\n-spec make_empty(module()) -> term().\nmake_empty(dict)     -> dict:new();\nmake_empty(gb_trees) -> gb_trees:empty();\nmake_empty(maps)     -> maps:new().\n\n-spec get_insert_fun(module()) -> fun ((term(), term(), term()) -> term()).\nget_insert_fun(dict)     -> fun dict:store/3;\nget_insert_fun(gb_trees) -> fun gb_trees:enter/3;\nget_insert_fun(maps)     -> fun maps:put/3.\n\n-spec shuffle(list()) -> list().\nshuffle(List) ->\n    [X||{_,X} <- lists:keysort(1, [{random:uniform(), N} || N <- List])].\n\n-spec bench_loop(non_neg_integer(), term(), function(), [non_neg_integer()]) -> ok.\nbench_loop(0, _, _, _)                      -> ok;\nbench_loop(LoopCount, Empty, Fun, Input) ->\n    _ = lists:foldl(fun (N, Acc) -> Fun(N, N, Acc) end, Empty, Input),\n    bench_loop(LoopCount - 1, Empty, Fun, Input).\n```\n\n\u6e2c\u5b9a\u7d50\u679c\n-------\n\n\u8868\u306e\u5024\u306f\u3001\u4e00\u3064\u306e\u633f\u5165\u64cd\u4f5c\u306b\u8981\u3057\u305f\u5e73\u5747\u6642\u9593(\u30ca\u30ce\u79d2\u5358\u4f4d)\u3002\n\n| \u8981\u7d20\u6570 \uff3c \u30e2\u30b8\u30e5\u30fc\u30eb | dict       | gb_trees       | maps |\n|-------------------:|-----------:|---------------:|-----:|\n| 1                  | 355 | 165 | 192 |\n| 10                 | 260 | 126 | 162 |\n| 100                | 321 | 216 | 375 |\n| 1000               | 461 | 344 | 2444 |\n| 10000              | 763 | 564 | 26274 |\n| 100000             | 2076 | 1255 | 323424 |\n\n\u8981\u7d20\u6570\u304c100\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u3001HiPE\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u305fdict\u3084gb_trees\u3068\u540c\u7a0b\u5ea6\u306e\u6027\u80fd\u304c\u51fa\u3066\u3044\u308b\u304c\u30011000\u3092\u8d85\u3048\u308b\u3068\u8981\u7d20\u6570\u306b\u307b\u307c\u6bd4\u4f8b\u3059\u308b\u5f62\u3067\u3001\u633f\u5165\u51e6\u7406\u306e\u52b9\u7387\u304c\u60aa\u304f\u306a\u3063\u3066\u308b\u3002 \n\n\u3053\u3053\u307e\u3067\u6027\u80fd\u304c\u52a3\u5316\u3059\u308b\u306e\u306f\u30d0\u30b0\u3063\u307d\u3044\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u9060\u304f\u306a\u3044\u30ea\u30ea\u30fc\u30b9\u3067\u6539\u5584\u3055\u308c\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u305f\u3044\u304c\u3001\u73fe\u72b6\u3067\u306f\u8981\u7d20\u6570\u304c\u591a\u304f\u306a\u308b\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306fmaps\u306e\u4f7f\u7528\u306f\u907f\u3051\u305f\u65b9\u304c\u7121\u96e3\u305d\u3046\u3002\n\n\u8ffd\u8a18: 2014/07/06\n----------------\n\nmaps\u306e\u5b9f\u88c5\u30b3\u30fc\u30c9(\u4f8b\u3048\u3070\u4e0b\u8a18\u306b\u5f15\u7528\u3057\u305fmaps:get/2\u306e\u5b9f\u88c5)\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u73fe\u72b6\u306f\u9023\u60f3\u30ea\u30b9\u30c8\u304c\u5185\u90e8\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u3057\u3066\u63a1\u7528\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3002\n\n```c:otp_src_17.1/erts/emulator/beam/erl_map.c\n/* maps:get/2\n * return value if key *matches* a key in the map                                                                                                                                                                                                                                                                    \n * exception bad_key if none matches\n */\n\nint erts_maps_get(Eterm key, Eterm map, Eterm *value) {\n    Eterm *ks,*vs;\n    map_t *mp;\n    Uint n,i;\n\n    mp  = (map_t*)map_val(map);\n    n   = map_get_size(mp);\n\n    if (n == 0)\n        return 0;\n\n    ks  = map_get_keys(mp);\n    vs  = map_get_values(mp);\n\n    if (is_immed(key)) {\n        for( i = 0; i < n; i++) {\n            if (ks[i] == key) {\n                *value = vs[i];\n                return 1;\n            }\n        }\n    }\n\n    for( i = 0; i < n; i++) {\n        if (EQ(ks[i], key)) {\n            *value = vs[i];\n            return 1;\n        }\n    }\n    return 0;\n}\n```\n\nmaps\u304c\u63d0\u6848\u3055\u308c\u3066\u3044\u308b[EEP-43](http://www.erlang.org/eeps/eep-0043.html)\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6587\u7ae0\u304c\u3042\u3063\u305f\u305f\u3081\u306b\u3001\u52dd\u624b\u306b\u30ed\u30b0\u30aa\u30fc\u30c0\u30fc\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u304c\u3001\u305d\u3046\u3067\u306f\u306a\u304b\u3063\u305f\u3089\u3057\u3044\u3002(\u3053\u3053\u3067\u3082 **shall** \u3068\u3057\u3066\u8a00\u53ca\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u5225\u306b\u5fc5\u9808\u3068\u306f\u3055\u308c\u3066\u3044\u306a\u3044)\n\n> The new data-type shall have semantics, syntax and operations that:\n>  \u30fb... \u7565 ...\u3000\n>  \u30fbhas at most O(log N) time complexity in insert and lookup operations, where N is the number of key-value associations.\n> Similar data-types exists in other languages, i.e. perl hashes, ruby hashes, python dictionaries, or scala maps.\n\n\u305f\u3060\u3001EEP-43\u3092\u898b\u308b\u3068\u3044\u304f\u3064\u304b\u306e\u7b87\u6240\u3067\u3001maps\u306f\u8981\u7d20\u6570\u304c\u591a\u304f\u306a\u3063\u3066\u3082log(\u8981\u7d20\u6570)\u3067\u64cd\u4f5c\u304c\u884c\u3048\u308b\u3082\u306e\u306b\u6210\u308a\u5f97\u308b\u3053\u3068\u3092\u793a\u5506\u3059\u308b\u6587\u7ae0\u304c\u898b\u53d7\u3051\u3089\u308c\u308b\u306e\u3067\u3001\u5c06\u6765\u7684\u306b\u5185\u90e8\u69cb\u9020\u304c\u5909\u66f4\u3055\u308c\u308b\u53ef\u80fd\u6027\u306f\u3042\u308a\u305d\u3046\u3002\n\n\u8ffd\u8a18: 2014-12-31\n----------------\n[\u300eMAPs Now and Then\u300f](https://vimeo.com/99747090)\u3068\u3044\u3046\u30d3\u30c7\u30aa\u3067OTP17\u3067\u306emaps\u306e\u6271\u3044\u304c\u8a73\u7d30\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u305f\u3002\n\u4ee5\u4e0b\u3001\u8981\u7d04:\n\n- maps\u306f\u30ec\u30b3\u30fc\u30c9\u7684\u306a\u5f79\u5272\u3068dict(or gb_trees,proplists,etc)\u7684\u306a\u5f79\u5272\u306e\u4e21\u65b9\u3092\u679c\u305f\u3059\u3082\u306e\u3068\u3057\u3066\u5c0e\u5165\u3055\u308c\u305f\n  - \u524d\u8005\u306f\u30ad\u30fc\u30bb\u30c3\u30c8\u304c\u56fa\u5b9a\u304b\u3064\u5c11\u6570\n  - \u5f8c\u8005\u306f\u30ad\u30fc\u30bb\u30c3\u30c8\u304c\u52d5\u7684\u304b\u3064\u591a\u6570\u306b\u306a\u308a\u5f97\u308b\n- OTP17\u3067\u306f\u3001\u30ec\u30b3\u30fc\u30c9\u7684\u306a\u5f79\u5272\u3068\u3057\u3066\u306e\u90e8\u5206\u306e\u307f\u304c\u5b9f\u88c5\u3055\u308c\u305f\n  - \u5185\u90e8\u8868\u73fe\u306f\u7dda\u5f62\u30ea\u30b9\u30c8\u3067\u3001\u8981\u7d20\u6570\u304c64\u4ee5\u4e0b\u7a0b\u5ea6\u306e\u6bd4\u8f03\u7684\u5c11\u6570\u306e\u3082\u306e\u3092\u60f3\u5b9a\n- OTP18\u3067\u306f\u3001dict\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3082\u30ab\u30d0\u30fc\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u4e88\u5b9a\n  - \u8981\u7d20\u6570\u304c\u5927\u304d\u304f\u306a\u3063\u305f\u3089\u3001\u5185\u90e8\u8868\u73fe\u304cHash-Array-Mapped-Trie\u306b\u5207\u308a\u66ff\u308f\u308b\u3088\u3046\u306b\u3059\u308b(?)\n\n\u8ffd\u8a18: 2015-06-30\n----------------\n\nOTP18.0\u3067\u306f\u7121\u4e8b\u6027\u80fd\u304c\u6539\u5584\u3055\u308c\u3066\u3044\u305f\u3002\n\u8a73\u7d30\u306f[\u3053\u3061\u3089](http://qiita.com/sile/items/c2465f1542fa478c07f0)\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n", "tags": ["ErlangR17.1"]}