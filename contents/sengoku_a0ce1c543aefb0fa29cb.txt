{"context": "CSV\u306e\u8aad\u307f\u8fbc\u307f\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3089\u3001\u66f8\u304d\u8fbc\u307f\u3082\u3067\u304d\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u306d\u3002\n\u4f5c\u308a\u307e\u3057\u305f\u3002\nCSV\u5316\u306f\u3001\u4f8b\u306b\u3088\u3063\u3066\u300cPerl\u6b63\u898f\u8868\u73fe\u96d1\u6280\u300d\u304b\u3089\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\u611f\u8b1d  \n\n\u6982\u8981\n\u5217\u3068\u884c\u304c\u3042\u308b\u4e00\u822c\u7684\u306aCSV\u3092\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\u5217\u6570\u306f\u56fa\u5b9a\u3067\u3059\u3002\n\n\u7279\u9577\n\nCSV\u5217\u3068\u30af\u30e9\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5c5e\u6027\u3067\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3057\u307e\u3059\u3002\n\u5024\u4e2d\u306b\u3042\u308b\u30ab\u30f3\u30de\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u5024\u4e2d\u306b\u3042\u308b\u6539\u884c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u5024\u4e2d\u306b\u3042\u308b\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\u4f7f\u3044\u65b9\n\n\u6e96\u5099\nCSV\u3068\u3057\u3066\u66f8\u304d\u51fa\u3057\u305f\u3044\u30af\u30e9\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5c5e\u6027CSVColumn\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002\n\nSampleBean.cs\n    public class SampleBean\n    {\n        public string Ignored { get; set; }\n\n        [CSVColumn(1)]\n        public string Column1 { get; set; }\n\n        [CSVColumn(2, Name = \"Original, \\\"Name\")]\n        public string Column2 { get; set; }\n\n        [CSVColumn(3)]\n        public int MyNumber { get; set; }\n    }\n\n\n\u5c5e\u6027\u306e\u5f15\u6570\u306f2\u3064\u3067\u3059\u3002\n\n\n\n\u5f15\u6570\n\u5fc5\u9808\n\u8aac\u660e\n\n\n\n\nOrder\n\u3007\nCSV\u3068\u3057\u3066\u66f8\u304d\u51fa\u3059\u3068\u304d\u306e\u5217\u9806\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\nName\n\nCSV\u30d5\u30a1\u30a4\u30eb\u306e\u30d8\u30c3\u30c0\u306b\u51fa\u529b\u3059\u308b\u540d\u524d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u672a\u6307\u5b9a\u306e\u6642\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u304b\u3089\u81ea\u52d5\u751f\u6210\u3057\u307e\u3059\u3002\n\n\n\n\n\u66f8\u304d\u51fa\u3057\n\u3042\u3089\u304b\u3058\u3081Stream\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nCSV\u306b\u51fa\u529b\u3059\u308b\u30af\u30e9\u30b9\u3092\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u6e21\u3057\u307e\u3059\u3002\n\u3042\u3068\u306fWriteHeaderLine\u3092\u547c\u3079\u3070\u30d8\u30c3\u30c0\u304c\u66f8\u304d\u51fa\u3055\u308c\u3001WriteLine\u3092\u547c\u3079\u3070\u884c\u304c\u66f8\u304d\u51fa\u3055\u308c\u307e\u3059\u3002\nIEnumebable<SampleBean> sampleBeans;\n// \u51fa\u529b\u3057\u305f\u3044\u30af\u30e9\u30b9\u7fa4\u304c\u3042\u308b\u3068\u3059\u308b\u3058\u3083\u308d\u3002\n\n// ...\n\nusing (var writer = new CSVWriter<SampleBean>(stream, Encoding.UTF8))\n{\n    writer.WriteHeaderLine(); // \u30d8\u30c3\u30c0\u884c\u3092\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\n    foreach (var i in sampleBeans) {\n        writer.WriteLine(i); // \u66f8\u304d\u51fa\u3057\n    }\n\n    writer.Close();\n}\n\n\n\u30bd\u30fc\u30b9\n\n\u5c5e\u6027\n\nCSVColumnAttribute.cs\n    /// <summary>\n    /// CSV column definition\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Property, AllowMultiple =false)]\n    public class CSVColumnAttribute : System.Attribute\n    {\n        private readonly int _order;\n\n        public CSVColumnAttribute(int order)\n        {\n            _order = order;\n        }\n\n        public int Order { get { return _order; } }\n        public string Name { get; set; }\n    }\n\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\nICSVWriter.cs\n    /// <summary>\n    /// Write object to the stream as CSV\n    /// </summary>\n    public interface ICSVWriter<T> : IDisposable\n    {\n        /// <summary>\n        /// Write a header line\n        /// </summary>\n        void WriteHeaderLine();\n\n        /// <summary>\n        /// Write a line\n        /// </summary>\n        /// <param name=\"record\"></param>\n        void WriteLine(T record);\n    }\n\n\n\n\u30b3\u30f3\u30af\u30ea\u30fc\u30c8\u30af\u30e9\u30b9\n\nCSVWriter.cs\npublic class CSVWriter<T> : ICSVWriter<T>\n    {\n        private static readonly string DELIMITER = \",\";\n        private readonly StreamWriter _writer;\n        private List<BindingProperty> _bindingProperties;\n\n        public CSVWriter(Stream stream, Encoding encoding)\n        {\n            _writer = new StreamWriter(stream, encoding);\n            _bindingProperties = extractBindingProperties();\n        }\n\n        private List<BindingProperty> extractBindingProperties()\n        {\n            var targetType = GetType().GetGenericArguments()[0];\n\n            return targetType\n                .GetProperties()\n                .Select(i => new BindingProperty()\n                {\n                    Property = i,\n                    CSVColumn = i.GetCustomAttributes(typeof(CSVColumnAttribute), false).FirstOrDefault() as CSVColumnAttribute\n                })\n                .Where(i => i.CSVColumn != null)\n                .OrderBy(i => i.CSVColumn.Order)\n                .ToList();\n        }\n\n\n        public void WriteLine(T record)\n        {\n            var values = _bindingProperties\n                .Select(i => i.Property.GetValue(record))\n                .Select(i => Quote(i))\n                .ToArray();\n\n            _writer.WriteLine(string.Join(DELIMITER, values));\n        }\n\n        public void WriteHeaderLine()\n        {\n            var headers = _bindingProperties\n                            .Select(i => i.CSVColumn.Name ?? CamelCase2Title(i.Property.Name))\n                            .Select(i => Quote(i))\n                            .ToArray();\n\n            _writer.WriteLine(string.Join(DELIMITER, headers));\n        }\n\n        public void Flush()\n        {\n            _writer.Flush();\n        }\n\n        public void Close()\n        {\n            _writer.Close();\n        }\n\n        private string CamelCase2Title(string src)\n        {\n            return Regex.Replace(src, \"(?<!^)([A-Z])(?![A-Z])\", \" ${1}\");\n        }\n\n\n        private string Quote(object src)\n        {\n            string ssrc = src != null ? src.ToString() : \"\";\n\n            // via http://www.din.or.jp/~ohzaki/perl.htm#CSVfromValues\n            // join ',', map {(s/\"/\"\"/g or /[\\r\\n,]/) ? qq(\"$_\") : $_} @values;\n\n            if (Regex.Match(ssrc, \"[\\\"\\\\r\\\\n,]\").Success)\n            {\n                return \"\\\"\" + ssrc.Replace(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";\n            }\n            else\n            {\n                return ssrc;\n            }\n        }\n\n        private class BindingProperty\n        {\n            internal PropertyInfo Property;\n            internal CSVColumnAttribute CSVColumn;\n        }\n\n        #region IDisposable Support\n        private bool disposedValue = false; // To detect redundant calls\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (!disposedValue)\n            {\n                if (disposing)\n                {\n                    _writer.Dispose();\n                }\n\n                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.\n                // TODO: set large fields to null.\n\n                disposedValue = true;\n            }\n        }\n\n        // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.\n        // ~CSVWriter() {\n        //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.\n        //   Dispose(false);\n        // }\n\n        // This code added to correctly implement the disposable pattern.\n        public void Dispose()\n        {\n            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.\n            Dispose(true);\n            // TODO: uncomment the following line if the finalizer is overridden above.\n            // GC.SuppressFinalize(this);\n        }\n        #endregion\n    }\n\n\n\n\u30c6\u30b9\u30c8\n\nCSVWriterTests.cs\n[TestClass]\n    public class CSVWriterTests\n    {\n        [TestMethod]\n        public void TestWriterHeaderLine()\n        {\n            using (var stream = new MemoryStream())\n            using (var instance = new CSVWriter<SampleBean>(stream, Encoding.UTF8))\n            {\n                instance.WriteHeaderLine();\n\n                instance.Flush();\n\n                stream.Seek(0, SeekOrigin.Begin);\n\n                var result = Encoding.UTF8.GetString(stream.ToArray());\n\n                Check.That(result).IsEqualTo(\"Column1,\\\"Original, \\\"\\\"Name\\\",My Number\\r\\n\");\n            }\n        }\n\n        [TestMethod]\n        public void TestWriteLine()\n        {\n            var bean = new SampleBean()\n            {\n                Column1 =\"value1\",\n                Column2 =\"value\\nvalue,value\\\"\",\n                MyNumber= 1234\n            };\n\n            using (var stream = new MemoryStream())\n            using (var instance = new CSVWriter<SampleBean>(stream, Encoding.UTF8))\n            {\n                instance.WriteLine(bean);\n\n                instance.Flush();\n\n                stream.Seek(0, SeekOrigin.Begin);\n\n                var result = Encoding.UTF8.GetString(stream.ToArray());\n\n                Check.That(result).IsEqualTo(\"value1,\\\"value\\nvalue,value\\\"\\\"\\\",1234\\r\\n\");\n            }\n\n        }\n\n        private class SampleBean\n        {\n\n            public string Ignored { get; set; }\n\n            [CSVColumn(1)]\n            public string Column1 { get; set; }\n\n            [CSVColumn(2, Name = \"Original, \\\"Name\")]\n            public string Column2 { get; set; }\n\n            [CSVColumn(3)]\n            public int MyNumber { get; set; }\n        }\n\n    }\n\n\n[CSV\u306e\u8aad\u307f\u8fbc\u307f](http://qiita.com/sengoku/items/578bc526f3c14f8625d9)\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3089\u3001\u66f8\u304d\u8fbc\u307f\u3082\u3067\u304d\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u306d\u3002\n\n\u4f5c\u308a\u307e\u3057\u305f\u3002\n\nCSV\u5316\u306f\u3001\u4f8b\u306b\u3088\u3063\u3066\u300cPerl\u6b63\u898f\u8868\u73fe\u96d1\u6280\u300d\u304b\u3089\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\u611f\u8b1d :smile: \n\n# \u6982\u8981\n\n\u5217\u3068\u884c\u304c\u3042\u308b\u4e00\u822c\u7684\u306aCSV\u3092\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\u5217\u6570\u306f\u56fa\u5b9a\u3067\u3059\u3002\n\n## \u7279\u9577\n\n* CSV\u5217\u3068\u30af\u30e9\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5c5e\u6027\u3067\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3057\u307e\u3059\u3002\n* \u5024\u4e2d\u306b\u3042\u308b\u30ab\u30f3\u30de\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n* \u5024\u4e2d\u306b\u3042\u308b\u6539\u884c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n* \u5024\u4e2d\u306b\u3042\u308b\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n# \u4f7f\u3044\u65b9\n\n## \u6e96\u5099\n\nCSV\u3068\u3057\u3066\u66f8\u304d\u51fa\u3057\u305f\u3044\u30af\u30e9\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5c5e\u6027`CSVColumn`\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002\n\n```csharp:SampleBean.cs\n    public class SampleBean\n    {\n        public string Ignored { get; set; }\n\n        [CSVColumn(1)]\n        public string Column1 { get; set; }\n\n        [CSVColumn(2, Name = \"Original, \\\"Name\")]\n        public string Column2 { get; set; }\n\n        [CSVColumn(3)]\n        public int MyNumber { get; set; }\n    }\n```\n\n\u5c5e\u6027\u306e\u5f15\u6570\u306f2\u3064\u3067\u3059\u3002\n\n| \u5f15\u6570 | \u5fc5\u9808 | \u8aac\u660e |\n|:--|:--|:--|\n| Order | \u3007 | CSV\u3068\u3057\u3066\u66f8\u304d\u51fa\u3059\u3068\u304d\u306e\u5217\u9806\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002  |\n| Name |   | CSV\u30d5\u30a1\u30a4\u30eb\u306e\u30d8\u30c3\u30c0\u306b\u51fa\u529b\u3059\u308b\u540d\u524d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u672a\u6307\u5b9a\u306e\u6642\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u304b\u3089\u81ea\u52d5\u751f\u6210\u3057\u307e\u3059\u3002  |\n\n## \u66f8\u304d\u51fa\u3057\n\n\u3042\u3089\u304b\u3058\u3081`Stream`\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nCSV\u306b\u51fa\u529b\u3059\u308b\u30af\u30e9\u30b9\u3092\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u3067\u6e21\u3057\u307e\u3059\u3002\n\n\u3042\u3068\u306f`WriteHeaderLine`\u3092\u547c\u3079\u3070\u30d8\u30c3\u30c0\u304c\u66f8\u304d\u51fa\u3055\u308c\u3001`WriteLine`\u3092\u547c\u3079\u3070\u884c\u304c\u66f8\u304d\u51fa\u3055\u308c\u307e\u3059\u3002\n\n```csharp:\nIEnumebable<SampleBean> sampleBeans;\n// \u51fa\u529b\u3057\u305f\u3044\u30af\u30e9\u30b9\u7fa4\u304c\u3042\u308b\u3068\u3059\u308b\u3058\u3083\u308d\u3002\n\n// ...\n\nusing (var writer = new CSVWriter<SampleBean>(stream, Encoding.UTF8))\n{\n    writer.WriteHeaderLine(); // \u30d8\u30c3\u30c0\u884c\u3092\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\n    foreach (var i in sampleBeans) {\n        writer.WriteLine(i); // \u66f8\u304d\u51fa\u3057\n    }\n\n    writer.Close();\n}\n```\n\n# \u30bd\u30fc\u30b9\n\n## \u5c5e\u6027\n\n```csharp:CSVColumnAttribute.cs\n    /// <summary>\n    /// CSV column definition\n    /// </summary>\n    [AttributeUsage(AttributeTargets.Property, AllowMultiple =false)]\n    public class CSVColumnAttribute : System.Attribute\n    {\n        private readonly int _order;\n\n        public CSVColumnAttribute(int order)\n        {\n            _order = order;\n        }\n\n        public int Order { get { return _order; } }\n        public string Name { get; set; }\n    }\n```\n\n## \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\n```csharp:ICSVWriter.cs\n    /// <summary>\n    /// Write object to the stream as CSV\n    /// </summary>\n    public interface ICSVWriter<T> : IDisposable\n    {\n        /// <summary>\n        /// Write a header line\n        /// </summary>\n        void WriteHeaderLine();\n\n        /// <summary>\n        /// Write a line\n        /// </summary>\n        /// <param name=\"record\"></param>\n        void WriteLine(T record);\n    }\n```\n\n## \u30b3\u30f3\u30af\u30ea\u30fc\u30c8\u30af\u30e9\u30b9\n\n```csharp:CSVWriter.cs\npublic class CSVWriter<T> : ICSVWriter<T>\n    {\n        private static readonly string DELIMITER = \",\";\n        private readonly StreamWriter _writer;\n        private List<BindingProperty> _bindingProperties;\n\n        public CSVWriter(Stream stream, Encoding encoding)\n        {\n            _writer = new StreamWriter(stream, encoding);\n            _bindingProperties = extractBindingProperties();\n        }\n\n        private List<BindingProperty> extractBindingProperties()\n        {\n            var targetType = GetType().GetGenericArguments()[0];\n\n            return targetType\n                .GetProperties()\n                .Select(i => new BindingProperty()\n                {\n                    Property = i,\n                    CSVColumn = i.GetCustomAttributes(typeof(CSVColumnAttribute), false).FirstOrDefault() as CSVColumnAttribute\n                })\n                .Where(i => i.CSVColumn != null)\n                .OrderBy(i => i.CSVColumn.Order)\n                .ToList();\n        }\n\n\n        public void WriteLine(T record)\n        {\n            var values = _bindingProperties\n                .Select(i => i.Property.GetValue(record))\n                .Select(i => Quote(i))\n                .ToArray();\n\n            _writer.WriteLine(string.Join(DELIMITER, values));\n        }\n\n        public void WriteHeaderLine()\n        {\n            var headers = _bindingProperties\n                            .Select(i => i.CSVColumn.Name ?? CamelCase2Title(i.Property.Name))\n                            .Select(i => Quote(i))\n                            .ToArray();\n\n            _writer.WriteLine(string.Join(DELIMITER, headers));\n        }\n\n        public void Flush()\n        {\n            _writer.Flush();\n        }\n\n        public void Close()\n        {\n            _writer.Close();\n        }\n\n        private string CamelCase2Title(string src)\n        {\n            return Regex.Replace(src, \"(?<!^)([A-Z])(?![A-Z])\", \" ${1}\");\n        }\n\n\n        private string Quote(object src)\n        {\n            string ssrc = src != null ? src.ToString() : \"\";\n\n            // via http://www.din.or.jp/~ohzaki/perl.htm#CSVfromValues\n            // join ',', map {(s/\"/\"\"/g or /[\\r\\n,]/) ? qq(\"$_\") : $_} @values;\n\n            if (Regex.Match(ssrc, \"[\\\"\\\\r\\\\n,]\").Success)\n            {\n                return \"\\\"\" + ssrc.Replace(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";\n            }\n            else\n            {\n                return ssrc;\n            }\n        }\n\n        private class BindingProperty\n        {\n            internal PropertyInfo Property;\n            internal CSVColumnAttribute CSVColumn;\n        }\n\n        #region IDisposable Support\n        private bool disposedValue = false; // To detect redundant calls\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (!disposedValue)\n            {\n                if (disposing)\n                {\n                    _writer.Dispose();\n                }\n\n                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.\n                // TODO: set large fields to null.\n\n                disposedValue = true;\n            }\n        }\n\n        // TODO: override a finalizer only if Dispose(bool disposing) above has code to free unmanaged resources.\n        // ~CSVWriter() {\n        //   // Do not change this code. Put cleanup code in Dispose(bool disposing) above.\n        //   Dispose(false);\n        // }\n\n        // This code added to correctly implement the disposable pattern.\n        public void Dispose()\n        {\n            // Do not change this code. Put cleanup code in Dispose(bool disposing) above.\n            Dispose(true);\n            // TODO: uncomment the following line if the finalizer is overridden above.\n            // GC.SuppressFinalize(this);\n        }\n        #endregion\n    }\n```\n\n# \u30c6\u30b9\u30c8\n\n```csharp:CSVWriterTests.cs\n[TestClass]\n    public class CSVWriterTests\n    {\n        [TestMethod]\n        public void TestWriterHeaderLine()\n        {\n            using (var stream = new MemoryStream())\n            using (var instance = new CSVWriter<SampleBean>(stream, Encoding.UTF8))\n            {\n                instance.WriteHeaderLine();\n\n                instance.Flush();\n\n                stream.Seek(0, SeekOrigin.Begin);\n\n                var result = Encoding.UTF8.GetString(stream.ToArray());\n\n                Check.That(result).IsEqualTo(\"Column1,\\\"Original, \\\"\\\"Name\\\",My Number\\r\\n\");\n            }\n        }\n\n        [TestMethod]\n        public void TestWriteLine()\n        {\n            var bean = new SampleBean()\n            {\n                Column1 =\"value1\",\n                Column2 =\"value\\nvalue,value\\\"\",\n                MyNumber= 1234\n            };\n\n            using (var stream = new MemoryStream())\n            using (var instance = new CSVWriter<SampleBean>(stream, Encoding.UTF8))\n            {\n                instance.WriteLine(bean);\n\n                instance.Flush();\n\n                stream.Seek(0, SeekOrigin.Begin);\n\n                var result = Encoding.UTF8.GetString(stream.ToArray());\n\n                Check.That(result).IsEqualTo(\"value1,\\\"value\\nvalue,value\\\"\\\"\\\",1234\\r\\n\");\n            }\n\n        }\n\n        private class SampleBean\n        {\n\n            public string Ignored { get; set; }\n\n            [CSVColumn(1)]\n            public string Column1 { get; set; }\n\n            [CSVColumn(2, Name = \"Original, \\\"Name\")]\n            public string Column2 { get; set; }\n\n            [CSVColumn(3)]\n            public int MyNumber { get; set; }\n        }\n\n    }\n```\n", "tags": ["C#", ".NET"]}