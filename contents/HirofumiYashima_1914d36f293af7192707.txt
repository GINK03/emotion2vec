{"context": " More than 1 year has passed since last update.\n\n\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304c\u9762\u767d\u3044\n\n\nHatena::Diary \u300c\u4e3b\u306b\u8a00\u8a9e\u3068\u30b7\u30b9\u30c6\u30e0\u958b\u767a\u306b\u95a2\u3057\u3066 \u300d(2010/03/09) \u300cSQL\u3067\uff0c\u30c6\u30fc\u30d6\u30eb\u306b\u5b58\u5728\u3057\u306a\u3044\u8907\u6570\u884c\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3000\uff08PostgreSQL\u306e generate_series\u95a2\u6570\u3092\u30de\u30b9\u30bf\u30fc\u3057\u3088\u3046\uff09\u300d\n\n\n\uff08\uff11\uff09\uff11\uff10\uff10\u306e\u7d04\u6570(\uff1d\uff11\uff10\uff10\u3092\u5272\u308a\u5207\u308b\u6570)\u3092\u5168\u90e8\u6c42\u3081\u308bSQL\n\n\n\npostgresql\nSELECT\n*\nFROM\n  generate_series( 1, 100 ) as s(i)\nWHERE\n  MOD( 100, s.i ) = 0\n;\n\n\n\u5b9f\u884c\u7d50\u679c:\n1\n2\n4\n5\n10\n20\n25\n50\n100\n```\n\n\n\n\uff082\uff091,000\u4ee5\u4e0b\u306e\u7d20\u6570\u3092\u6c42\u3081\u308bSQL\n\n\nNOT EXISTS(\uff5e\uff5e) \u306e\u90e8\u5206\u306f\uff0c\u300cs1.i \u306b\u306f\u7d04\u6570\u304c\u5b58\u5728\u3057\u306a\u3044\u304b\uff1f\u300d\u3068\u3044\u3046\u5224\u5b9a\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u3002\n\n\npostgresql\nSELECT\n    s1.i AS prime\nFROM\n    generate_series( 1, 1000 ) as s1(i)\nWHERE\n    s1.i > 1\n        AND\n\n    NOT EXISTS(\n        SELECT\n            *\n        FROM\n            generate_series( 1, 1000 ) as s2(i)\n        WHERE\n            s2.i > 1\n                AND\n            s2.i <= s1.i / 2\n                AND\n            MOD( s1.i, s2.i ) = 0\n    )\n\nORDER BY\n    s1.i\n;\n\n\n\n\n\n\nSQL\u3067\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217 \uff5e With recursive \u3067\u300c\u518d\u5e30SQL\u300d\u3092\u4f7f\u3063\u3066\u3001\u518d\u5e30\u51e6\u7406\u3067\u751f\u6210\n\n\n\u300c\u518d\u5e30SQL\u300d\u3068\u306f\uff1f\n\n\nLet's postgres \u300c\u518d\u5e30SQL\u300d\n\n\n\u518d\u5e30SQL\u306f\u4e0a\u8a18\u306eWITH\u53e5\u3092\u66f4\u306b\u62e1\u5f35\u3057\u305f\u69cb\u6587\u3067\u3001\u300cWITH (\u521d\u671f\u5019\u88dc) UNION ALL\u300d\u306e\u5f62\u5f0f\u3067\u4f7f\u3044\u307e\u3059\u3002\n\u5178\u578b\u7684\u306a\u5229\u7528\u65b9\u6cd5\u306f\u3001\u89aa\u5b50\u95a2\u4fc2\u3092\u6301\u3064\u6728\u69cb\u9020\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3057\u3066\u7e70\u308a\u8fd4\u3057\u81ea\u5df1\u7d50\u5408 (\u30bb\u30eb\u30d5\u30b8\u30e7\u30a4\u30f3; Self-Join) \u3092\u884c\u3046\u5834\u5408\u3067\u3059\u3002\n\u3053\u308c\u307e\u3067\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067\u7e70\u308a\u8fd4\u3057\u7d50\u5408\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u518d\u5e30SQL\u3092\u4f7f\u3046\u3068 PostgreSQL \u5185\u3067\u7e70\u308a\u8fd4\u3057\u304c\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u901a\u4fe1\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u7121\u304f\u306a\u308a\u9ad8\u901f\u5316\u304c\u671f\u5f85\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306e\u6761\u4ef6\u3092\u9593\u9055\u3048\u308b\u3068\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u307e\u3067\u7121\u9650\u30eb\u30fc\u30d7\u306b\u9665\u308b\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\u6728\u69cb\u9020\n\u4f8b\uff1a\u89aa\u306eID\u3092\u6307\u5b9a\u3057\u3066\u305d\u306e\u5b50\u5b6b\u3092\u5168\u3066\u53d6\u5f97\n\n\n\n\n\niakio\u306e\u65e5\u8a18 (2008/06/29) \u300cPostgreSQL\u3067\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u300d\n\n\u4ee5\u4e0b\u3067\u3067\u304d\u308b\n\u3010 \u6ce8\u610f \u3011AWS Redshift\u306f\u518d\u5e30SQL\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\n\nRedshift\nERROR: 0A000: WITH RECURSIVE is not supported\n\n\naws documentation Amazon Redshift \u300c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044 PostgreSQL \u6a5f\u80fd\u300d\n__\n\uff08\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3088\u308a\u8ee2\u8f09)\n\npostgresql\nwith recursive r(a, b) as (\n    select 1 as a,\n           1 as b\n    union all\n    select b,\n           a + b\n    from r where a < 100\n) select * from r;\n\n\n\n\ni am BEST (2012/05/16) \u300c\u300e\u518d\u5e30\u30af\u30a8\u30ea\u300f\u306e\u52d5\u304d\u3092\u30b7\u30f3\u30d7\u30eb\u306a\u4f8b\u3067\u78ba\u304b\u3081\u3066\u307f\u3088\u3046\uff01\u300d\n\n\nDB2\u7528\u306e SQL \u306a\u306e\u3067 sysibm.sysdummy1 \u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001Oracle \u3067\u3082 Dual \u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u540c\u69d8\u306b\u5b9f\u884c\u3067\u304d\u308b\u3067\u3057\u3087\u3046\n\n\nDB2\nWITH Numbers (n)              \n  AS (SELECT CAST(1 AS INTEGER) \n        FROM sysibm.sysdummy1 \n      UNION ALL               \n      SELECT n + 1            \n        FROM Numbers          \n       WHERE n < 100)         \nSELECT n                      \n  FROM Numbers; \n\n\n\u4ee5\u4e0b\u3001Oracle\u7528\u306b\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002Oracle\u3067\u306e\u52d5\u4f5c\u306f\u672a\u78ba\u8a8d\u3067\u3059\u3002\n\nOracle\nWITH recursive Numbers(n)              \n  AS (\n  SELECT CAST(1 AS INTEGER) \n  FROM dual\n  UNION ALL               \n  SELECT n+1            \n  FROM Numbers          \n  WHERE n < 100\n  )         \n SELECT n                      \n FROM Numbers\n; \n\n\n\u4ee5\u4e0b\u3001PostgreSQL\u7528\n\nPostgreSQL\nWITH recursive Numbers(n)              \n  AS (\n  SELECT CAST(1 AS INTEGER) \n  UNION ALL               \n  SELECT n+1            \n  FROM Numbers          \n  WHERE n < 100\n  )         \n SELECT n                      \n FROM Numbers\n; \n\n\n\n\n\uff08 \u4e2d\u7565 \uff09\n\n__\n\n\u3010 \u53c2\u8003 \u3011\u30c6\u30fc\u30d6\u30eb\u306b\u3001\u62ec\u5f27\u3092\u4f34\u3046\u5225\u540d\u3092\u3064\u3051\u308b\u3068\u3001\u30c6\u30fc\u30d6\u30eb\u5225\u540d.\u62ec\u5f27\u5185\u306b\u6307\u5b9a\u3057\u305f\u8a18\u53f7 \u3067\u30ab\u30e9\u30e0\u3092\u53d6\u5f97\u3067\u304d\u308b\uff1f\uff1f\n\n\npostgresql\nSELECT\n    s.i\nFROM\n    generate_series( 1, 20 ) as s(i)\n;\n\n\n( \u5b9f\u884c\u7d50\u679c )\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n\u4ee5\u4e0b\u306f\u5b9f\u884c\u30a8\u30e9\u30fc\n\n\npostgresql\nSELECT\n    s\nFROM\n    generate_series( 1, 20 ) as s(i)\n;\n\n\n( \u5b9f\u884c\u7d50\u679c )\n\npostgresql\nERROR: 42703: column \"s\" does not exist in s\n\n\n\n\u4ee5\u4e0b\u3082\u5b9f\u884c\u30a8\u30e9\u30fc\n\n\npostgresql\nSELECT\n    s.i,\n    s.j\nFROM\n    generate_series( 1, 20 ) as s(i, j)\n;\n\n\n\npostgresql\nERROR: 42P10: too many column aliases specified for function generate series\n\n\n\n##__\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304c\u9762\u767d\u3044__\n\n#### [Hatena::Diary \u300c\u4e3b\u306b\u8a00\u8a9e\u3068\u30b7\u30b9\u30c6\u30e0\u958b\u767a\u306b\u95a2\u3057\u3066 \u300d(2010/03/09) \u300cSQL\u3067\uff0c\u30c6\u30fc\u30d6\u30eb\u306b\u5b58\u5728\u3057\u306a\u3044\u8907\u6570\u884c\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3000\uff08PostgreSQL\u306e generate_series\u95a2\u6570\u3092\u30de\u30b9\u30bf\u30fc\u3057\u3088\u3046\uff09\u300d](http://d.hatena.ne.jp/language_and_engineering/20100309/p1)\n\n### __\uff08\uff11\uff09\uff11\uff10\uff10\u306e\u7d04\u6570(\uff1d\uff11\uff10\uff10\u3092\u5272\u308a\u5207\u308b\u6570)\u3092\u5168\u90e8\u6c42\u3081\u308bSQL__\n\n\n>```{sql:postgresql}\n>SELECT\n> *\n>FROM\n>\tgenerate_series( 1, 100 ) as s(i)\n>WHERE\n>\tMOD( 100, s.i ) = 0\n>;\n>```\n>\n> __\u5b9f\u884c\u7d50\u679c:__\n>\n>1\n>2\n>4\n>5\n>10\n>20\n>25\n>50\n>100\n>```\n\n___\n\n### __\uff082\uff091,000\u4ee5\u4e0b\u306e\u7d20\u6570\u3092\u6c42\u3081\u308bSQL__\n\n\n> NOT EXISTS(\uff5e\uff5e) \u306e\u90e8\u5206\u306f\uff0c\u300cs1.i \u306b\u306f\u7d04\u6570\u304c\u5b58\u5728\u3057\u306a\u3044\u304b\uff1f\u300d\u3068\u3044\u3046\u5224\u5b9a\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u3002\n\n```{sql:postgresql}\nSELECT\n\ts1.i AS prime\nFROM\n\tgenerate_series( 1, 1000 ) as s1(i)\nWHERE\n\ts1.i > 1\n\t\tAND\n\t\t\n\tNOT EXISTS(\n\t\tSELECT\n\t\t\t*\n\t\tFROM\n\t\t\tgenerate_series( 1, 1000 ) as s2(i)\n\t\tWHERE\n\t\t\ts2.i > 1\n\t\t\t\tAND\n\t\t\ts2.i <= s1.i / 2\n\t\t\t\tAND\n\t\t\tMOD( s1.i, s2.i ) = 0\n\t)\n\t\nORDER BY\n\ts1.i\n;\n```\n\n![1.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/14f191c1-1675-e573-8111-07805d752673.png)\n\n\n![2.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/c41a5508-3a50-5dee-2109-73939df63373.png)\n\n___\n\n### __SQL\u3067\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217 \uff5e With recursive \u3067\u300c\u518d\u5e30SQL\u300d\u3092\u4f7f\u3063\u3066\u3001\u518d\u5e30\u51e6\u7406\u3067\u751f\u6210__\n\n#### __\u300c\u518d\u5e30SQL\u300d\u3068\u306f\uff1f__\n\n* [Let's postgres \u300c\u518d\u5e30SQL\u300d](http://lets.postgresql.jp/documents/technical/with_recursive)\n\n> \u518d\u5e30SQL\u306f\u4e0a\u8a18\u306eWITH\u53e5\u3092\u66f4\u306b\u62e1\u5f35\u3057\u305f\u69cb\u6587\u3067\u3001\u300cWITH (\u521d\u671f\u5019\u88dc) UNION [ALL] (\u7e70\u308a\u8fd4\u3057\u51e6\u7406)\u300d\u306e\u5f62\u5f0f\u3067\u4f7f\u3044\u307e\u3059\u3002\n>\n> \u5178\u578b\u7684\u306a\u5229\u7528\u65b9\u6cd5\u306f\u3001\u89aa\u5b50\u95a2\u4fc2\u3092\u6301\u3064\u6728\u69cb\u9020\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3057\u3066\u7e70\u308a\u8fd4\u3057\u81ea\u5df1\u7d50\u5408 (\u30bb\u30eb\u30d5\u30b8\u30e7\u30a4\u30f3; Self-Join) \u3092\u884c\u3046\u5834\u5408\u3067\u3059\u3002\n> \u3053\u308c\u307e\u3067\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067\u7e70\u308a\u8fd4\u3057\u7d50\u5408\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u518d\u5e30SQL\u3092\u4f7f\u3046\u3068 PostgreSQL \u5185\u3067\u7e70\u308a\u8fd4\u3057\u304c\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u901a\u4fe1\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u7121\u304f\u306a\u308a\u9ad8\u901f\u5316\u304c\u671f\u5f85\u3067\u304d\u307e\u3059\u3002\n>\n> \u305f\u3060\u3057\u3001\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306e\u6761\u4ef6\u3092\u9593\u9055\u3048\u308b\u3068\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u307e\u3067\u7121\u9650\u30eb\u30fc\u30d7\u306b\u9665\u308b\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u6ce8\u610f\u3057\u307e\u3057\u3087\u3046\u3002\n\u6728\u69cb\u9020\n\u4f8b\uff1a\u89aa\u306eID\u3092\u6307\u5b9a\u3057\u3066\u305d\u306e\u5b50\u5b6b\u3092\u5168\u3066\u53d6\u5f97\n\n___\n\n![ref.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/64c5523e-7aa6-2315-b400-954c051598bf.png)\n\n___\n\n#### [iakio\u306e\u65e5\u8a18 (2008/06/29) \u300cPostgreSQL\u3067\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u300d](http://postgresql.g.hatena.ne.jp/iakio/20080629/1214732599)\n\n__\u4ee5\u4e0b\u3067\u3067\u304d\u308b__\n\n__\u3010 \u6ce8\u610f \u3011AWS Redshift\u306f\u518d\u5e30SQL\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044__\n\n```{sql:Redshift}\nERROR: 0A000: WITH RECURSIVE is not supported\n```\n\n[aws documentation Amazon Redshift \u300c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044 PostgreSQL \u6a5f\u80fd\u300d](http://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_unsupported-postgresql-features.html)\n\n__\n\n__\uff08\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3088\u308a\u8ee2\u8f09)__\n\n```{sql:postgresql}\nwith recursive r(a, b) as (\n\tselect 1 as a,\n\t\t   1 as b\n\tunion all\n\tselect b,\n\t       a + b\n\tfrom r where a < 100\n) select * from r;\n```\n\n\n![4.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/3f511f1c-4c4d-f11b-2219-377a63dfc676.png)\n\n\n#### [i am BEST (2012/05/16) \u300c\u300e\u518d\u5e30\u30af\u30a8\u30ea\u300f\u306e\u52d5\u304d\u3092\u30b7\u30f3\u30d7\u30eb\u306a\u4f8b\u3067\u78ba\u304b\u3081\u3066\u307f\u3088\u3046\uff01\u300d](http://blog.livedoor.jp/i_am_best/archives/7080267.html)\n\n> DB2\u7528\u306e SQL \u306a\u306e\u3067 sysibm.sysdummy1 \u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001Oracle \u3067\u3082 Dual \u30c6\u30fc\u30d6\u30eb\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u540c\u69d8\u306b\u5b9f\u884c\u3067\u304d\u308b\u3067\u3057\u3087\u3046\n\n```{sql:DB2}\nWITH Numbers (n)              \n  AS (SELECT CAST(1 AS INTEGER) \n        FROM sysibm.sysdummy1 \n      UNION ALL               \n      SELECT n + 1            \n        FROM Numbers          \n       WHERE n < 100)         \nSELECT n                      \n  FROM Numbers; \n```\n\n__\u4ee5\u4e0b\u3001Oracle\u7528\u306b\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002Oracle\u3067\u306e\u52d5\u4f5c\u306f\u672a\u78ba\u8a8d\u3067\u3059\u3002__\n\n```{sql:Oracle}\nWITH recursive Numbers(n)              \n  AS (\n  SELECT CAST(1 AS INTEGER) \n  FROM dual\n  UNION ALL               \n  SELECT n+1            \n  FROM Numbers          \n  WHERE n < 100\n  )         \n SELECT n                      \n FROM Numbers\n; \n```\n\n__\u4ee5\u4e0b\u3001PostgreSQL\u7528__\n\n```{sql:PostgreSQL}\nWITH recursive Numbers(n)              \n  AS (\n  SELECT CAST(1 AS INTEGER) \n  UNION ALL               \n  SELECT n+1            \n  FROM Numbers          \n  WHERE n < 100\n  )         \n SELECT n                      \n FROM Numbers\n; \n```\n\n![6.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/61b0e679-8366-f127-bf44-3862b10ee50a.png)\n\n\n![7.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/96d139c1-0631-8da4-55cf-16784078f476.png)\n\n__\uff08 \u4e2d\u7565 \uff09__\n\n![8.PNG](https://qiita-image-store.s3.amazonaws.com/0/43487/414161c2-6a24-b1e4-5a07-057d035c380d.png)\n\n__\n\n### __\u3010 \u53c2\u8003 \u3011\u30c6\u30fc\u30d6\u30eb\u306b\u3001\u62ec\u5f27\u3092\u4f34\u3046\u5225\u540d\u3092\u3064\u3051\u308b\u3068\u3001\u30c6\u30fc\u30d6\u30eb\u5225\u540d.\u62ec\u5f27\u5185\u306b\u6307\u5b9a\u3057\u305f\u8a18\u53f7 \u3067\u30ab\u30e9\u30e0\u3092\u53d6\u5f97\u3067\u304d\u308b\uff1f\uff1f__\n\n```{sql:postgresql}\nSELECT\n\ts.i\nFROM\n\tgenerate_series( 1, 20 ) as s(i)\n;\n```\n\n__( \u5b9f\u884c\u7d50\u679c )__\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n```\n\n\n#### __\u4ee5\u4e0b\u306f\u5b9f\u884c\u30a8\u30e9\u30fc__\n\n\n```{sql:postgresql}\nSELECT\n\ts\nFROM\n\tgenerate_series( 1, 20 ) as s(i)\n;\n```\n\n__( \u5b9f\u884c\u7d50\u679c )__\n\n\n```{sql:postgresql}\nERROR: 42703: column \"s\" does not exist in s\n```\n\n#### __\u4ee5\u4e0b\u3082\u5b9f\u884c\u30a8\u30e9\u30fc__\n\n```{sql:postgresql}\nSELECT\n\ts.i,\n\ts.j\nFROM\n\tgenerate_series( 1, 20 ) as s(i, j)\n;\n```\n\n```{sql:postgresql}\nERROR: 42P10: too many column aliases specified for function generate series\n```\n", "tags": ["SQL", "PostgreSQL", "\u518d\u5e30SQL", "math", "\u6570\u5b66"]}