{"context": " More than 1 year has passed since last update.\u7d71\u8a08\u5b66\u306e\u57fa\u790e\u306e\u57fa\u790e\u306b\u3064\u3044\u3066\u8a71\u3092\u3057\u3066\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u30b9\u30e9\u30a4\u30c9\u3068\u3001\u305d\u3053\u3067\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n  \u7d71\u8a08\u5b66\u306e\u57fa\u790e\u306e\u57fa\u790e  from Ken'ichi Matsui \n\u3053\u306e\u30b9\u30e9\u30a4\u30c9\u306e\u4e2d\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u308b\u6a19\u6e96\u504f\u5dee\u306e\u3055\u3089\u306b\u8a73\u7d30\u306a\u8aac\u660e\u306f\u3010\u7d71\u8a08\u5b66\u3011\u521d\u3081\u3066\u306e\u300c\u6a19\u6e96\u504f\u5dee\u300d\uff08\u7d71\u8a08\u5b66\u306b\u632b\u6298\u3057\u306a\u3044\u305f\u3081\u306b\uff09\u306b\u3082\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u3088\u3051\u308c\u3070\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\u4ee5\u4e0b\u3001\u30b9\u30e9\u30a4\u30c9\u4e2d\u3067\u30b0\u30e9\u30d5\u63cf\u753b\u3084\u3001\u4e71\u6570\u751f\u6210\u3092\u884c\u3063\u305fPython\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u30a4\u30f3\u30dd\u30fc\u30c8\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nimport seaborn as sns\nimport numpy as np\nimport numpy.random as rd\nimport pandas as pd\nimport html5lib, time, sys\nfrom datetime import datetime as dt\nimport statsmodels.graphics.tsaplots as tsaplots\nimport statsmodels.api as sm\nimport cPickle as pickle\nimport scipy.stats as st\n\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\ntips = sns.load_dataset(\"tips\")\n\n\nTOEIC\u30c7\u30fc\u30bf\n\nurl = 'http://www.toeic.or.jp/toeic/about/data/data_avelist/data_dist01_04.html'\nfetched_dataframes = pd.io.html.read_html(url, header=0, index_col=0)\ndf_total = fetched_dataframes[0]\n\ndf_total = df_total[['Unnamed: 5','Unnamed: 6','Unnamed: 7']]\ndf_total.columns = ['score','num','ratio']\ndf_total.index = df_total['score']\ndf_total = df_total.drop([u'\uff08\u30b9\u30b3\u30a2\u533a\u5206\uff09']).drop(['Total']).drop(['score'], axis=1).convert_objects(convert_numeric=True)\ndf_total['sortkey'] = [int(idx.replace(u'\\uff5e','')) for idx in df_total.index]\n\ndf_total.sort(columns='sortkey')['num'].plot(kind='bar', color='b', figsize=(10,7),width=1)\nplt.plot([11.7,11.7],[0,10000], color='r')\nplt.text(11.8, 100, '583.7')\nplt.show()\n\n\n\n\u30b0\u30e9\u30d5\u3092\u63cf\u304f\ntips.total_bill.plot(kind=\"hist\", bins=20, figsize=(10,7))\nm = np.mean(tips.total_bill)\nprint m\nplt.plot([m, m],[0, 40], 'r')\nplt.text(21, 1, \"mean:{0:.3f}\".format(m), size=16)\nplt.show()\n\n\n\n\nsns.set(style=\"white\", palette=\"muted\", color_codes=True)\nrs = np.random.RandomState(11)\n\n# Set up the matplotlib figure\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Generate a random univariate dataset\nd = rs.normal(30, 5, size=100)\nd2 = rs.normal(45, 5, size=100)\n\n# Plot a simple histogram with binsize determined automatically\nsns.distplot(d, kde=False, rug=True, color=\"r\", bins=10)\nsns.distplot(d2, kde=False, rug=True, color=\"b\", bins=10)\n\nplt.show()\n\n\n\n\ntips.hist(by='day', column='total_bill', bins=20, figsize=(10,7), sharex=True)\nplt.show()\n\n\n\nsns.boxplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips, palette=\"PRGn\")\nax = sns.stripplot(x=\"day\", y=\"total_bill\", data=tips,  hue=\"sex\",\n                   size=4, jitter=True, edgecolor=\"gray\")\nsns.despine(offset=10, trim=True)\n\n\n\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\ntips = sns.load_dataset(\"tips\")\ngrid = sns.JointGrid(tips.total_bill, tips.tip, space=0, size=8, ratio=10)\ngrid.plot_joint(plt.scatter, color=\"b\")\nplt.show()\n\n\n\nsns.jointplot(\"total_bill\", \"tip\", data=tips, kind=\"reg\", xlim=(0, 60), ylim=(0, 12), color=\"b\", size=7)\nplt.show()\n\n\nsns.set(style=\"white\", palette=\"muted\", color_codes=True)\nrs = np.random.RandomState(10)\n\n# Set up the matplotlib figure\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Generate a random univariate dataset\nd = rs.normal(30, 5, size=100)\nd2 = rs.normal(45, 5, size=100)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(d, hist=False, rug=True, color=\"r\")#, ax=axes[0, 0])\nsns.distplot(d2, hist=False, rug=True, color=\"b\")#, ax=axes[0, 0])\n\n# Calculate average\nm = np.mean(d)\nm2 = np.mean(d2)\n\nplt.plot([m,m],[0,0.09], 'r')\nplt.plot([m2,m2],[0,0.09], 'b')\n\nplt.show()\n\n\n\n\n\u76f8\u95a2\u4fc2\u6570\n# In[14]:\n\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\ntips = sns.load_dataset(\"tips\")\ngrid = sns.JointGrid(tips.total_bill, tips.tip, space=0, size=8, ratio=10)\ngrid.plot_joint(plt.scatter, color=\"b\")\ntips[['total_bill', 'tip']].corr()\n\n\n\n\n\ntotal_bill\ntip\n\n\n\n\ntotal_bill\n1.000000\n0.675734\n\n\ntip\n0.675734\n1.000000\n\n\n\n\nplt.figure(figsize=(8,6))\n\nr = 0.8\nmean = [0,0]\ncov =  [[1,  r],\n        [r,  1]]\n\n\nX = rd.multivariate_normal(mean, cov, size=100)\nm1 = np.mean(X[:,0])\nm2 = np.mean(X[:,1])\n\nplt.scatter(X[:,0], X[:,1])\nplt.title(\"Correlation: {0:.3f}\".format(r))\nplt.scatter([m1], [m2], c=\"r\", s=100, zorder=100)\nplt.plot([m1, m1], [-4,4], \"k--\", alpha=.6)\nplt.plot([-4,4], [m2, m2], \"k--\", alpha=.6)\n\nplt.xlim(-4, 4)\nplt.ylim(-4, 4)\n\nplt.tight_layout()\nplt.show()\n\n\nnn = 5\nplt.figure(figsize=(18,12))\n\nrel = np.linspace(-1,1, nn * nn)\nfor n in range(nn * nn):\n    plt.subplot(nn, nn, n+1)\n    r = -rel[n]\n    mean = [0,0]\n    cov =  [[1,  r],\n            [r,  1]]\n    X = rd.multivariate_normal(mean, cov, size=100)\n    plt.scatter(X[:,0], X[:,1])\n    plt.title(\"Correlation: {0:.3f}\".format(r))\n\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\u6b63\u898f\u5206\u5e03\u306e\u6210\u308a\u7acb\u3061\n# \u30b3\u30a4\u30f3\u6295\u3052, 20\u56de\u6295\u3052\u3066\u8868\u304c1, \u88cf\u304c0\ncoin_toss = st.bernoulli.rvs(p=0.5, size=20)\ncoin_toss\n\n\n\nout\narray([0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1])\n\n\n\n20\u56de\u30b3\u30a4\u30f3\u3092\u6295\u3052\u3066\u8868\u304c\u51fa\u305f\u56de\u6570\u3092\u6570\u3048\u308b\u3002\u3053\u308c\u3092100\u30bb\u30c3\u30c8\u5b9f\u65bd\nset_20 = []\nfor i in range(100):\n    coin_toss = st.bernoulli.rvs(p=0.5, size=20)\n    print np.sum(coin_toss),\n\n\nout\n12 12 10 6 9 14 9 8 11 7 13 9 6 14 9 7 8 8 13 7 6 10 9 11 10 10 9 9 13 10 11 12 12 11 12 10 6 9 6 11 9 9 9 11 7 10 8 9 8 11 8 11 8 10 13 6 12 12 10 12 8 14 9 9 11 9 14 10 13 9 11 9 10 9 12 8 6 10 11 9 9 11 8 8 8 12 8 10 11 11 10 11 6 7 11 9 10 11 8 10\n\n\n\n10000\u30bb\u30c3\u30c8\u5b9f\u65bd\nset_20 = []\nfor i in range(10000):\n    coin_toss = st.bernoulli.rvs(p=0.5, size=20)\n    n = np.sum(coin_toss)\n    set_20.append(n)\n\nsns.set(style=\"white\", palette=\"muted\", color_codes=True)\n\n# Set up the matplotlib figure\ndata = np.array(set_20)\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\nm = data.mean()\ns = data.std()\n# Plot a kernel density estimate and rug plot\nsns.distplot(data, hist=True, kde=True, bins=16, rug=False, color=\"b\", kde_kws={\"lw\":0})\nplt.xticks(range(21))\n\nxx = np.linspace(-5, 20, 501)\nyy = st.norm.pdf(xx, loc=m, scale=s)\nplt.plot(xx+.5,yy,\"r\")\nplt.xlim(-1,20)\nplt.ylim(0,0.20)\nplt.show()\n\n\n\n100\u4e07\u4ef6\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u751f\u6210\nrs = np.random.RandomState(71)\n\n# Generate a random univariate dataset\nd = rs.normal(30, 5, size=1000000)\n\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u63cf\u753b\n# Set up the matplotlib figure\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(d, hist=True, kde=True, rug=False, color=\"b\")\n\n# Calculate average\nm = np.mean(d)\nprint \"average:{}\".format(m)\nplt.plot([m,m],[0,0.09], 'r')\n\nplt.show()\n\n\n\n\u5272\u5408\u3092\u6570\u3048\u3066\u307f\u308b\nd = np.array(d)\n\nall = len(d)              # \u5168\u30c7\u30fc\u30bf\u6570\nsmall = len(d[d < 20])    # 20\u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u306e\u500b\u6570\nlarge = len(d[d > 40])    # 40\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u306e\u500b\u6570\nmid = all - small - large # \u305d\u306e\u4e2d\u9593\u306b\u3042\u308b\u500b\u6570\n\nprint \"all:\\t{0:7d}\".format(all)\nprint \"small:\\t{0:7d}({1:.2f}%)\".format(small, small/float(all)*100)\nprint \"mid:\\t{0:7d}({1:.2f}%)\".format(mid, mid/float(all)*100)\nprint \"large:\\t{0:7d}({1:.2f}%)\".format(large, large/float(all)*100)\n\n\n\nout\nall:    1000000\nsmall:    22641(2.26%)\nmid:     954600(95.46%)\nlarge:    22759(2.28%)\n\n\n\n100\u4e07\u4ef6\u304b\u3089100\u500b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\n\ndf = pd.DataFrame(d, columns=['data'])\nsample = df.sample(n=100,random_state=71)\nsample\n\n\n\n\n\ndata\n\n\n\n\n329401\n19.371665\n\n\n818859\n29.955302\n\n\n318049\n30.866991\n\n\n167751\n24.089591\n\n\n...\n...\n\n\n409987\n37.775277\n\n\n307745\n33.821469\n\n\n532797\n29.343810\n\n\n16381\n33.377021\n\n\n\n\n100\u500b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(sample, hist=True, kde=True, rug=False, color=\"g\", bins=10)\n\n# Calculate average\nn = len(sample)\nm = np.mean(sample)\nsd = np.sqrt(np.var(sample))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(float(m-2*sd/np.sqrt(n)), float(m+2*sd/np.sqrt(n)))\n\nplt.plot([m,m],[0,0.09], 'r')\n\nplt.xlim(10,55)\nplt.show()\n\n\nout\naverage:data    30.588533\ndtype: float64\nsd:data    5.036523\ndtype: float64\nlower:29.581, upper:31.596\n\n\n\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(sample, hist=True, kde=True, rug=False, color=\"g\", bins=10)\n\n# Calculate average\nn = len(sample)\nm = np.mean(sample)\nsd = np.sqrt(np.var(sample))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(float(m-2*sd/np.sqrt(n)), float(m+2*sd/np.sqrt(n)))\n\nplt.plot([m,m],[0,0.09], 'r')\nplt.plot([m,m+sd],[0.05,0.05], 'b')\n\nplt.xlim(10,55)\nplt.show()\n\n\nout\naverage:data    30.588533\ndtype: float64\nsd:data    5.036523\ndtype: float64\nlower:29.581, upper:31.596\n\n\n\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(sample, hist=True, kde=True, rug=False, color=\"g\", bins=10)\n\n# Calculate average\nn = len(sample)\nm = np.mean(sample)\nsd = np.sqrt(np.var(sample))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(float(m-2*sd/np.sqrt(n)), float(m+2*sd/np.sqrt(n)))\n\nplt.plot([m,m],[0,0.11], 'r')\nplt.plot([m,m+sd/np.sqrt(n)],[0.05,0.05], 'b')\n\nplt.plot([m-2*sd/np.sqrt(n),m-2*sd/np.sqrt(n)],[0,0.11], \"k--\", alpha=.5)\nplt.plot([m+2*sd/np.sqrt(n),m+2*sd/np.sqrt(n)],[0,0.11], \"k--\", alpha=.5)\n\nplt.xlim(10,55)\nplt.ylim(0,.09)\nplt.show()\n\n\nout\naverage:data    30.588533\ndtype: float64\nsd:data    5.036523\ndtype: float64\nlower:29.581, upper:31.596\n\n\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(sample, hist=True, kde=True, rug=False, color=\"g\", bins=10)\n\n# Calculate average\nn = len(sample)\nm = np.mean(sample)\nsd = np.sqrt(np.var(sample))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(float(m-2*sd/np.sqrt(n)), float(m+2*sd/np.sqrt(n)))\n\nplt.plot([m,m],[0,0.11], 'r')\nplt.plot([m,m+sd/np.sqrt(n)],[0.05,0.05], 'b')\n\nplt.plot([m-2*sd/np.sqrt(n),m-2*sd/np.sqrt(n)],[0,0.11], \"k--\", alpha=.5)\nplt.plot([m+2*sd/np.sqrt(n),m+2*sd/np.sqrt(n)],[0,0.11], \"k--\", alpha=.5)\n\nplt.xlim(28,35)\nplt.ylim(0,.10)\nplt.show()\n\n\n\nout\naverage:data    30.588533\ndtype: float64\nsd:data    5.036523\ndtype: float64\nlower:29.581, upper:31.596\n\n\n\n\n\u305f\u304f\u3055\u3093\u66f8\u3044\u3066\u773a\u3081\u3066\u307f\u308b\nncol = 4\nnrow = 4\n\nf, axes = plt.subplots(nrow, ncol, figsize=(nrow*4, ncol*3))\n\nfor i in range(nrow):\n    for j in range(ncol):\n        print \"({},{})\".format(i, j), \n        sample = df.sample(n=100)\n        m = np.mean(sample)\n        sns.distplot(sample, hist=True, kde=True, rug=False, color=\"g\", ax=axes[i, j], \n                     axlabel=\"average:{0:.3f}\".format(float(m)))\n        axes[i, j].plot([m,m],[0,0.09], 'r')\n        axes[i, j].set_xlim(10,55)\n\n\n\n\u3055\u3089\u306b\u305f\u304f\u3055\u3093(1000\u56de)\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3001\u305d\u306e\u5e73\u5747\u5024\u3092\u96c6\u3081\u3066\u307f\u308b\n# \u3061\u3087\u3063\u3068\u6642\u9593\u304b\u304b\u308a\u307e\u3059\nave_list = [np.mean(df.sample(n=100)) for _ in range(1000)]\n\n\n1000\u500b\u306e\u5e73\u5747\u5024\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u3044\u3066\u307f\u308b\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(ave_list, hist=True, kde=True, rug=False, bins=20, color=\"r\")\n\n# Calculate average\nm = np.mean(ave_list)\nprint \"average:{}\".format(m)\nplt.plot([m,m],[0,0.9], 'r')\nplt.xlim(10,55)\nplt.show()\n\n\nout\naverage:30.0018428235\n\n\n\n\n\u62e1\u5927\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(ave_list, hist=True, kde=True, rug=False, bins=20, color=\"r\")\n\n# Calculate average\nm = np.mean(ave_list)\nsd = np.sqrt(np.var(ave_list))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nplt.plot([m,m],[0,0.9], 'r')\nplt.text(m+.1,0.02,\"average:{0:.3f}\".format(m), size=12)\nplt.plot([m,m+sd],[0.5,0.5],\"b\")\nplt.text(m+.1,0.52,\"sd:{0:.3f}\".format(sd), size=12)\n#plt.plot([m-2*sd,m+2*sd],[0.4,0.4])\n#plt.plot([m-2*sd,m-2*sd],[0,0.9], \"k--\", alpha=.5)\n#plt.plot([m+2*sd,m+2*sd],[0,0.9], \"k--\", alpha=.5)\n\nplt.xlim(27.5,32.5)\nplt.show()\n\n\nout\naverage:30.0018428235\nsd:0.499635405099\n\n\n\n\n\u4fe1\u983c\u533a\u9593\u3092\u8868\u793a\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(ave_list, hist=True, kde=True, rug=False, bins=20, color=\"r\")\n\n# Calculate average\nm = np.mean(ave_list)\nsd = np.sqrt(np.var(ave_list))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nplt.plot([m,m],[0,0.9], 'r')\nplt.text(m+.1,0.02,\"average:{0:.3f}\".format(m), size=12)\nplt.plot([m,m+sd],[0.5,0.5],\"r\")\nplt.text(m+.1,0.52,\"sd:{0:.3f}\".format(sd), size=12)\nplt.plot([m-2*sd,m+2*sd],[0.4,0.4])\nplt.plot([m-2*sd,m-2*sd],[0,0.9], \"k--\", alpha=.5)\nplt.plot([m+2*sd,m+2*sd],[0,0.9], \"k--\", alpha=.5)\n\nplt.xlim(27.5,32.5)\nplt.show()\n\n\n\nout\naverage:30.0018428235\nsd:0.499635405099\n\n\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\n#sns.distplot(ave_list, hist=True, kde=True, rug=False, bins=20, color=\"r\")\n\n# Calculate average\nm = np.mean(ave_list)\nsd = np.sqrt(np.var(ave_list))\n\nxx = np.linspace(27.5,32.5, 301)\nyy = st.norm.pdf(xx, loc=m, scale=sd)\n\nplt.plot(xx,yy,\"r\")\n\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(m-2*sd, m+2*sd)\n\nplt.plot([m,m],[0,0.9], 'r')\nplt.text(m+.1,0.02,\"average:{0:.3f}\".format(m), size=12)\nplt.plot([m,m+sd],[0.48,0.48],\"r\")\nplt.text(m+.05,0.50,\"sd:{0:.3f}\".format(sd), size=12)\nplt.plot([m-2*sd,m+2*sd],[0.4,0.4])\nplt.plot([m-2*sd,m-2*sd],[0,0.9], \"k--\", alpha=.5)\nplt.plot([m+2*sd,m+2*sd],[0,0.9], \"k--\", alpha=.5)\n\nplt.xlim(27.5,32.5)\nplt.show()\n\n\nout\naverage:30.0018428235\nsd:0.499635405099\nlower:29.003, upper:31.001\n\n\n\n\n\u6a19\u672c\u5e73\u5747\u306e\u4fe1\u983c\u533a\u9593\u3092\u3044\u304f\u3064\u3082\u63cf\u3044\u3066\u307f\u308b\nsample = [df.sample(n=100) for _ in range(50)]\n\nres = []\nfor d in sample:\n    m = np.mean(d)\n    sd = np.sqrt(np.var(d))\n    n = len(d)\n    upper = m + 2*sd/np.sqrt(n)\n    lower = m - 2*sd/np.sqrt(n)\n    #print \"(u:{0:.3f}, l:{1:.3f},)\".format(float(upper), float(lower))\n    res.append((float(lower), float(upper)))\n\nplt.figure(figsize=(14, 7))\n\ncnt = 0\nfor i, d in enumerate(res):\n    plt.plot([d[0],d[1]], [i+1, i+1], \"b\")\n    if d[0] > 30 or d[1] < 30:\n        cnt += 1\n\nplt.plot([30, 30],[0,52], \"k--\")\nplt.ylim(0,52)\nprint cnt/float(len(res))\n\n\n\n\u6bcd\u96c6\u56e3\u306e\u5e73\u5747\u306e\u691c\u5b9a\n# \u6bcd\u96c6\u56e3\nnp.random.seed(32)\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\nm = 450\nsd = 80\n\nxx = np.linspace(0,800, 501)\nyy = st.norm.pdf(xx, loc=m, scale=sd)\n\nplt.plot(xx,yy,zorder=100)\nplt.xticks(range(0,800,50))\nplt.plot([450,450],[0,0.18],\"k\",alpha=.8)\n\nplt.ylim(0,0.0055)\nplt.show()\n\n\n\n\n\u4eca\u5e74\u306e\u65b0\u5165\u751f\u306e\u7d50\u679c(36\u4eba\u5206)\nnp.random.seed(32)\ndata = st.norm.rvs(loc=480, scale=80, size=36)\ndata = np.array(map(int, data)) - 22\n\ndata[7] -= 22\ndata[1]  -= 2\nprint data\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\nn = len(data)\nm = data.mean()\nsd = data.std()\nm_sd = sd/np.sqrt(n)\n\nprint \"data size:{}\".format(n)\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\n\nxx = np.linspace(-15,10, 501)\nyy = st.norm.pdf(xx, loc=m, scale=sd)\n\nsns.distplot(data, hist=True, kde=True, bins=8, rug=False, color=\"b\", kde_kws={\"lw\":0})\nplt.show()\n\n\n\nout\n[430 534 504 463 520 504 575 569 437 402 402 613 602 494 412 467 579 486\n 450 531 498 392 489 424 461 415 417 386 545 511 372 555 727 391 430 309]\ndata size:36\naverage:480.444444444\nsd:82.0120060467\n\n\n\n\n# \u4eca\u5e74\u306e\u65b0\u5165\u751f\u306e\u7d50\u679c(36\u4eba\u5206)\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\nn = len(data)\nm = data.mean()\nsd = data.std()\nm_sd = sd/np.sqrt(n)\nup  = m+2*m_sd\nlow = m-2*m_sd\n\nprint \"data size:{}\".format(n)\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"m_sd:{}\".format(sd/np.sqrt(n)) \nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(low, up)\n\nxx = np.linspace(400,550, 501)\nyy = st.norm.pdf(xx, loc=m, scale=m_sd)\n\nplt.plot(xx,yy,\"r\",zorder=100)\nplt.plot([450,450],[0,0.03],\"k\",alpha=.8)\n\nplt.plot([m,m],[0,0.03],\"k--\", lw=1, alpha=.8)\nplt.plot([low, low],[0,0.03],\"k--\", lw=1, alpha=.8)\nplt.plot([up, up],[0,0.03],\"k--\", lw=1, alpha=.8)\n\nplt.show()\n\n\nlog\ndata size:36\naverage:480.444444444\nsd:82.0120060467\nm_sd:13.6686676744\nlower:453.107, upper:507.782\n\n\n\n\u7d71\u8a08\u5b66\u306e\u57fa\u790e\u306e\u57fa\u790e\u306b\u3064\u3044\u3066\u8a71\u3092\u3057\u3066\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u30b9\u30e9\u30a4\u30c9\u3068\u3001\u305d\u3053\u3067\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n\n<a href=\"http://www.slideshare.net/matsukenbook/ss-53235145\"><img src=\"https://qiita-image-store.s3.amazonaws.com/0/50670/3a1c25d7-7ce8-7449-523b-74df9f44cab3.png\"></a>\n<div style=\"margin-bottom:5px\"> <strong> <a href=\"//www.slideshare.net/matsukenbook/ss-53235145\" title=\"\u7d71\u8a08\u5b66\u306e\u57fa\u790e\u306e\u57fa\u790e\" target=\"_blank\">\u7d71\u8a08\u5b66\u306e\u57fa\u790e\u306e\u57fa\u790e</a> </strong> from <strong><a href=\"//www.slideshare.net/matsukenbook\" target=\"_blank\">Ken&#x27;ichi Matsui</a></strong> </div>\n\n\u3053\u306e\u30b9\u30e9\u30a4\u30c9\u306e\u4e2d\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u308b\u6a19\u6e96\u504f\u5dee\u306e\u3055\u3089\u306b\u8a73\u7d30\u306a\u8aac\u660e\u306f[\u3010\u7d71\u8a08\u5b66\u3011\u521d\u3081\u3066\u306e\u300c\u6a19\u6e96\u504f\u5dee\u300d\uff08\u7d71\u8a08\u5b66\u306b\u632b\u6298\u3057\u306a\u3044\u305f\u3081\u306b\uff09](http://qiita.com/kenmatsu4/items/e6c6acb289c02609e619)\u306b\u3082\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u3088\u3051\u308c\u3070\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\n\u4ee5\u4e0b\u3001\u30b9\u30e9\u30a4\u30c9\u4e2d\u3067\u30b0\u30e9\u30d5\u63cf\u753b\u3084\u3001\u4e71\u6570\u751f\u6210\u3092\u884c\u3063\u305fPython\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n## \u30e2\u30b8\u30e5\u30fc\u30eb\u30a4\u30f3\u30dd\u30fc\u30c8\n\n```py \n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib import gridspec\nimport seaborn as sns\nimport numpy as np\nimport numpy.random as rd\nimport pandas as pd\nimport html5lib, time, sys\nfrom datetime import datetime as dt\nimport statsmodels.graphics.tsaplots as tsaplots\nimport statsmodels.api as sm\nimport cPickle as pickle\nimport scipy.stats as st\n\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\ntips = sns.load_dataset(\"tips\")\n```\n\n## TOEIC\u30c7\u30fc\u30bf\n\n```py\n\nurl = 'http://www.toeic.or.jp/toeic/about/data/data_avelist/data_dist01_04.html'\nfetched_dataframes = pd.io.html.read_html(url, header=0, index_col=0)\ndf_total = fetched_dataframes[0]\n\ndf_total = df_total[['Unnamed: 5','Unnamed: 6','Unnamed: 7']]\ndf_total.columns = ['score','num','ratio']\ndf_total.index = df_total['score']\ndf_total = df_total.drop([u'\uff08\u30b9\u30b3\u30a2\u533a\u5206\uff09']).drop(['Total']).drop(['score'], axis=1).convert_objects(convert_numeric=True)\ndf_total['sortkey'] = [int(idx.replace(u'\\uff5e','')) for idx in df_total.index]\n\ndf_total.sort(columns='sortkey')['num'].plot(kind='bar', color='b', figsize=(10,7),width=1)\nplt.plot([11.7,11.7],[0,10000], color='r')\nplt.text(11.8, 100, '583.7')\nplt.show()\n```\n![Unknown.png](https://qiita-image-store.s3.amazonaws.com/0/50670/33efe60b-0d12-eeeb-3e5b-5315f7429914.png)\n\n## \u30b0\u30e9\u30d5\u3092\u63cf\u304f\n\n```py\ntips.total_bill.plot(kind=\"hist\", bins=20, figsize=(10,7))\nm = np.mean(tips.total_bill)\nprint m\nplt.plot([m, m],[0, 40], 'r')\nplt.text(21, 1, \"mean:{0:.3f}\".format(m), size=16)\nplt.show()\n\n```\n\n![Unknown-1.png](https://qiita-image-store.s3.amazonaws.com/0/50670/8d22cc04-9ae3-2b90-b76a-20ba3c278c0f.png)\n\n```py\n\nsns.set(style=\"white\", palette=\"muted\", color_codes=True)\nrs = np.random.RandomState(11)\n\n# Set up the matplotlib figure\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Generate a random univariate dataset\nd = rs.normal(30, 5, size=100)\nd2 = rs.normal(45, 5, size=100)\n\n# Plot a simple histogram with binsize determined automatically\nsns.distplot(d, kde=False, rug=True, color=\"r\", bins=10)\nsns.distplot(d2, kde=False, rug=True, color=\"b\", bins=10)\n\nplt.show()\n\n```\n![Unknown-2.png](https://qiita-image-store.s3.amazonaws.com/0/50670/b56113b1-cb43-6878-1ccf-ff7f3e554eae.png)\n\n\n```py\n\ntips.hist(by='day', column='total_bill', bins=20, figsize=(10,7), sharex=True)\nplt.show()\n```\n\n![Unknown-3.png](https://qiita-image-store.s3.amazonaws.com/0/50670/e27c6767-25b5-41a3-11a5-cebc23f998df.png)\n\n\n```py\n\nsns.boxplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips, palette=\"PRGn\")\nax = sns.stripplot(x=\"day\", y=\"total_bill\", data=tips,  hue=\"sex\",\n                   size=4, jitter=True, edgecolor=\"gray\")\nsns.despine(offset=10, trim=True)\n```\n\n![Unknown-4.png](https://qiita-image-store.s3.amazonaws.com/0/50670/fee944fd-7795-b2b4-b517-fa0e23da9bd6.png)\n\n\n```py\n\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\ntips = sns.load_dataset(\"tips\")\ngrid = sns.JointGrid(tips.total_bill, tips.tip, space=0, size=8, ratio=10)\ngrid.plot_joint(plt.scatter, color=\"b\")\nplt.show()\n```\n\n![Unknown-6.png](https://qiita-image-store.s3.amazonaws.com/0/50670/9d69fb92-e19e-4963-b366-98638bae1656.png)\n\n\n```py\n\nsns.jointplot(\"total_bill\", \"tip\", data=tips, kind=\"reg\", xlim=(0, 60), ylim=(0, 12), color=\"b\", size=7)\nplt.show()\n```\n\n![Unknown-5.png](https://qiita-image-store.s3.amazonaws.com/0/50670/f992f8ce-780e-8834-83dd-51f0775ea116.png)\n\n\n```py\nsns.set(style=\"white\", palette=\"muted\", color_codes=True)\nrs = np.random.RandomState(10)\n\n# Set up the matplotlib figure\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Generate a random univariate dataset\nd = rs.normal(30, 5, size=100)\nd2 = rs.normal(45, 5, size=100)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(d, hist=False, rug=True, color=\"r\")#, ax=axes[0, 0])\nsns.distplot(d2, hist=False, rug=True, color=\"b\")#, ax=axes[0, 0])\n\n# Calculate average\nm = np.mean(d)\nm2 = np.mean(d2)\n\nplt.plot([m,m],[0,0.09], 'r')\nplt.plot([m2,m2],[0,0.09], 'b')\n\nplt.show()\n\n```\n\n![Unknown-7.png](https://qiita-image-store.s3.amazonaws.com/0/50670/fa901d83-e75d-52b9-f06d-dd638bc8bc31.png)\n\n\n\n## \u76f8\u95a2\u4fc2\u6570\n\n\n```py\n# In[14]:\n\nsns.set(style=\"whitegrid\", palette=\"muted\", color_codes=True)\ntips = sns.load_dataset(\"tips\")\ngrid = sns.JointGrid(tips.total_bill, tips.tip, space=0, size=8, ratio=10)\ngrid.plot_joint(plt.scatter, color=\"b\")\ntips[['total_bill', 'tip']].corr()\n```\n\n<table >\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>total_bill</th>\n      <td>1.000000</td>\n      <td>0.675734</td>\n    </tr>\n    <tr>\n      <th>tip</th>\n      <td>0.675734</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n\n![Unknown-6.png](https://qiita-image-store.s3.amazonaws.com/0/50670/b00efaf9-fab4-bbca-e94f-5193767f3f17.png)\n\n\n```py\nplt.figure(figsize=(8,6))\n\nr = 0.8\nmean = [0,0]\ncov =  [[1,  r],\n        [r,  1]]\n\n\nX = rd.multivariate_normal(mean, cov, size=100)\nm1 = np.mean(X[:,0])\nm2 = np.mean(X[:,1])\n\nplt.scatter(X[:,0], X[:,1])\nplt.title(\"Correlation: {0:.3f}\".format(r))\nplt.scatter([m1], [m2], c=\"r\", s=100, zorder=100)\nplt.plot([m1, m1], [-4,4], \"k--\", alpha=.6)\nplt.plot([-4,4], [m2, m2], \"k--\", alpha=.6)\n\nplt.xlim(-4, 4)\nplt.ylim(-4, 4)\n\nplt.tight_layout()\nplt.show()\n```\n\n![Unknown-9.png](https://qiita-image-store.s3.amazonaws.com/0/50670/5e1f2457-c940-5845-7163-a057c4e7efa0.png)\n\n```py\nnn = 5\nplt.figure(figsize=(18,12))\n\nrel = np.linspace(-1,1, nn * nn)\nfor n in range(nn * nn):\n    plt.subplot(nn, nn, n+1)\n    r = -rel[n]\n    mean = [0,0]\n    cov =  [[1,  r],\n            [r,  1]]\n    X = rd.multivariate_normal(mean, cov, size=100)\n    plt.scatter(X[:,0], X[:,1])\n    plt.title(\"Correlation: {0:.3f}\".format(r))\n\n\nplt.tight_layout()\nplt.show()\n\n```\n\n![Unknown-10.png](https://qiita-image-store.s3.amazonaws.com/0/50670/0ec3694b-3d0b-1e5c-c4b9-a17b5659df4e.png)\n\n\n## \u6b63\u898f\u5206\u5e03\u306e\u6210\u308a\u7acb\u3061\n\n\n```py\n# \u30b3\u30a4\u30f3\u6295\u3052, 20\u56de\u6295\u3052\u3066\u8868\u304c1, \u88cf\u304c0\ncoin_toss = st.bernoulli.rvs(p=0.5, size=20)\ncoin_toss\n\n```\n\n```log:out\narray([0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1])\n```\n\n\n## 20\u56de\u30b3\u30a4\u30f3\u3092\u6295\u3052\u3066\u8868\u304c\u51fa\u305f\u56de\u6570\u3092\u6570\u3048\u308b\u3002\u3053\u308c\u3092100\u30bb\u30c3\u30c8\u5b9f\u65bd\n\n```py\nset_20 = []\nfor i in range(100):\n    coin_toss = st.bernoulli.rvs(p=0.5, size=20)\n    print np.sum(coin_toss),\n```\n\n```log:out\n12 12 10 6 9 14 9 8 11 7 13 9 6 14 9 7 8 8 13 7 6 10 9 11 10 10 9 9 13 10 11 12 12 11 12 10 6 9 6 11 9 9 9 11 7 10 8 9 8 11 8 11 8 10 13 6 12 12 10 12 8 14 9 9 11 9 14 10 13 9 11 9 10 9 12 8 6 10 11 9 9 11 8 8 8 12 8 10 11 11 10 11 6 7 11 9 10 11 8 10\n```\n\n## 10000\u30bb\u30c3\u30c8\u5b9f\u65bd\n\n\n```py\nset_20 = []\nfor i in range(10000):\n    coin_toss = st.bernoulli.rvs(p=0.5, size=20)\n    n = np.sum(coin_toss)\n    set_20.append(n)\n```\n\n```py\nsns.set(style=\"white\", palette=\"muted\", color_codes=True)\n\n# Set up the matplotlib figure\ndata = np.array(set_20)\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\nm = data.mean()\ns = data.std()\n# Plot a kernel density estimate and rug plot\nsns.distplot(data, hist=True, kde=True, bins=16, rug=False, color=\"b\", kde_kws={\"lw\":0})\nplt.xticks(range(21))\n\nxx = np.linspace(-5, 20, 501)\nyy = st.norm.pdf(xx, loc=m, scale=s)\nplt.plot(xx+.5,yy,\"r\")\nplt.xlim(-1,20)\nplt.ylim(0,0.20)\nplt.show()\n```\n\n![Unknown-11.png](https://qiita-image-store.s3.amazonaws.com/0/50670/80ab4071-4e31-a75f-256a-e3f0f6bc25b9.png)\n\n\n## 100\u4e07\u4ef6\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u751f\u6210\n\n\n```py\nrs = np.random.RandomState(71)\n\n# Generate a random univariate dataset\nd = rs.normal(30, 5, size=1000000)\n```\n\n## \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u63cf\u753b\n\n```py\n# Set up the matplotlib figure\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(d, hist=True, kde=True, rug=False, color=\"b\")\n\n# Calculate average\nm = np.mean(d)\nprint \"average:{}\".format(m)\nplt.plot([m,m],[0,0.09], 'r')\n\nplt.show()\n```\n\n![Unknown-12.png](https://qiita-image-store.s3.amazonaws.com/0/50670/d3aa60be-9d45-8253-c3d3-872802f84d77.png)\n\n\n## \u5272\u5408\u3092\u6570\u3048\u3066\u307f\u308b\n\n\n```py\nd = np.array(d)\n\nall = len(d)              # \u5168\u30c7\u30fc\u30bf\u6570\nsmall = len(d[d < 20])    # 20\u3088\u308a\u5c0f\u3055\u3044\u3082\u306e\u306e\u500b\u6570\nlarge = len(d[d > 40])    # 40\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u306e\u500b\u6570\nmid = all - small - large # \u305d\u306e\u4e2d\u9593\u306b\u3042\u308b\u500b\u6570\n\nprint \"all:\\t{0:7d}\".format(all)\nprint \"small:\\t{0:7d}({1:.2f}%)\".format(small, small/float(all)*100)\nprint \"mid:\\t{0:7d}({1:.2f}%)\".format(mid, mid/float(all)*100)\nprint \"large:\\t{0:7d}({1:.2f}%)\".format(large, large/float(all)*100)\n\n```\n\n```log:out\nall:\t1000000\nsmall:\t  22641(2.26%)\nmid:\t 954600(95.46%)\nlarge:\t  22759(2.28%)\n```\n\n## 100\u4e07\u4ef6\u304b\u3089100\u500b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3059\u308b\n\n\n```py\n\ndf = pd.DataFrame(d, columns=['data'])\nsample = df.sample(n=100,random_state=71)\nsample\n```\n\n\n<table >\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>data</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>329401</th>\n      <td>19.371665</td>\n    </tr>\n    <tr>\n      <th>818859</th>\n      <td>29.955302</td>\n    </tr>\n    <tr>\n      <th>318049</th>\n      <td>30.866991</td>\n    </tr>\n    <tr>\n      <th>167751</th>\n      <td>24.089591</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>409987</th>\n      <td>37.775277</td>\n    </tr>\n    <tr>\n      <th>307745</th>\n      <td>33.821469</td>\n    </tr>\n    <tr>\n      <th>532797</th>\n      <td>29.343810</td>\n    </tr>\n    <tr>\n      <th>16381</th>\n      <td>33.377021</td>\n    </tr>\n  </tbody>\n</table>\n\n## 100\u500b\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n\n```py\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(sample, hist=True, kde=True, rug=False, color=\"g\", bins=10)\n\n# Calculate average\nn = len(sample)\nm = np.mean(sample)\nsd = np.sqrt(np.var(sample))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(float(m-2*sd/np.sqrt(n)), float(m+2*sd/np.sqrt(n)))\n\nplt.plot([m,m],[0,0.09], 'r')\n\nplt.xlim(10,55)\nplt.show()\n```\n\n```log:out\naverage:data    30.588533\ndtype: float64\nsd:data    5.036523\ndtype: float64\nlower:29.581, upper:31.596\n```\n\n![Unknown-13.png](https://qiita-image-store.s3.amazonaws.com/0/50670/497802d8-f7af-9e67-6ac4-bef0b85156b3.png)\n\n\n\n\n```py\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(sample, hist=True, kde=True, rug=False, color=\"g\", bins=10)\n\n# Calculate average\nn = len(sample)\nm = np.mean(sample)\nsd = np.sqrt(np.var(sample))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(float(m-2*sd/np.sqrt(n)), float(m+2*sd/np.sqrt(n)))\n\nplt.plot([m,m],[0,0.09], 'r')\nplt.plot([m,m+sd],[0.05,0.05], 'b')\n\nplt.xlim(10,55)\nplt.show()\n```\n\n```log:out\naverage:data    30.588533\ndtype: float64\nsd:data    5.036523\ndtype: float64\nlower:29.581, upper:31.596\n```\n\n![Unknown-14.png](https://qiita-image-store.s3.amazonaws.com/0/50670/6757aebf-861a-9981-c064-2e4afebe3f77.png)\n\n\n```py\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(sample, hist=True, kde=True, rug=False, color=\"g\", bins=10)\n\n# Calculate average\nn = len(sample)\nm = np.mean(sample)\nsd = np.sqrt(np.var(sample))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(float(m-2*sd/np.sqrt(n)), float(m+2*sd/np.sqrt(n)))\n\nplt.plot([m,m],[0,0.11], 'r')\nplt.plot([m,m+sd/np.sqrt(n)],[0.05,0.05], 'b')\n\nplt.plot([m-2*sd/np.sqrt(n),m-2*sd/np.sqrt(n)],[0,0.11], \"k--\", alpha=.5)\nplt.plot([m+2*sd/np.sqrt(n),m+2*sd/np.sqrt(n)],[0,0.11], \"k--\", alpha=.5)\n\nplt.xlim(10,55)\nplt.ylim(0,.09)\nplt.show()\n```\n\n```log:out\naverage:data    30.588533\ndtype: float64\nsd:data    5.036523\ndtype: float64\nlower:29.581, upper:31.596\n```\n\n\n![Unknown-15.png](https://qiita-image-store.s3.amazonaws.com/0/50670/8d4b8259-2e2f-24db-4d52-01bd9a098ba3.png)\n\n\n\n```py\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(sample, hist=True, kde=True, rug=False, color=\"g\", bins=10)\n\n# Calculate average\nn = len(sample)\nm = np.mean(sample)\nsd = np.sqrt(np.var(sample))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(float(m-2*sd/np.sqrt(n)), float(m+2*sd/np.sqrt(n)))\n\nplt.plot([m,m],[0,0.11], 'r')\nplt.plot([m,m+sd/np.sqrt(n)],[0.05,0.05], 'b')\n\nplt.plot([m-2*sd/np.sqrt(n),m-2*sd/np.sqrt(n)],[0,0.11], \"k--\", alpha=.5)\nplt.plot([m+2*sd/np.sqrt(n),m+2*sd/np.sqrt(n)],[0,0.11], \"k--\", alpha=.5)\n\nplt.xlim(28,35)\nplt.ylim(0,.10)\nplt.show()\n\n```\n\n```log:out\naverage:data    30.588533\ndtype: float64\nsd:data    5.036523\ndtype: float64\nlower:29.581, upper:31.596\n```\n\n![Unknown-16.png](https://qiita-image-store.s3.amazonaws.com/0/50670/9fccb086-6d57-409b-e698-01b05b1a0ff5.png)\n\n\n## \u305f\u304f\u3055\u3093\u66f8\u3044\u3066\u773a\u3081\u3066\u307f\u308b\n\n```py\nncol = 4\nnrow = 4\n\nf, axes = plt.subplots(nrow, ncol, figsize=(nrow*4, ncol*3))\n\nfor i in range(nrow):\n    for j in range(ncol):\n        print \"({},{})\".format(i, j), \n        sample = df.sample(n=100)\n        m = np.mean(sample)\n        sns.distplot(sample, hist=True, kde=True, rug=False, color=\"g\", ax=axes[i, j], \n                     axlabel=\"average:{0:.3f}\".format(float(m)))\n        axes[i, j].plot([m,m],[0,0.09], 'r')\n        axes[i, j].set_xlim(10,55)\n```\n\n![Unknown-17.png](https://qiita-image-store.s3.amazonaws.com/0/50670/7dcb8cb5-5ad4-761f-52e6-698505db0617.png)\n\n\n## \u3055\u3089\u306b\u305f\u304f\u3055\u3093(1000\u56de)\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3001\u305d\u306e\u5e73\u5747\u5024\u3092\u96c6\u3081\u3066\u307f\u308b\n\n\n```py\n# \u3061\u3087\u3063\u3068\u6642\u9593\u304b\u304b\u308a\u307e\u3059\nave_list = [np.mean(df.sample(n=100)) for _ in range(1000)]\n```\n\n\n## 1000\u500b\u306e\u5e73\u5747\u5024\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u63cf\u3044\u3066\u307f\u308b\n\n\n```py\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(ave_list, hist=True, kde=True, rug=False, bins=20, color=\"r\")\n\n# Calculate average\nm = np.mean(ave_list)\nprint \"average:{}\".format(m)\nplt.plot([m,m],[0,0.9], 'r')\nplt.xlim(10,55)\nplt.show()\n```\n\n```log:out\naverage:30.0018428235\n```\n\n![Unknown-18.png](https://qiita-image-store.s3.amazonaws.com/0/50670/14385255-16d1-beb3-474e-420b2ec2cb62.png)\n\n\n## \u62e1\u5927\n\n```py\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(ave_list, hist=True, kde=True, rug=False, bins=20, color=\"r\")\n\n# Calculate average\nm = np.mean(ave_list)\nsd = np.sqrt(np.var(ave_list))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nplt.plot([m,m],[0,0.9], 'r')\nplt.text(m+.1,0.02,\"average:{0:.3f}\".format(m), size=12)\nplt.plot([m,m+sd],[0.5,0.5],\"b\")\nplt.text(m+.1,0.52,\"sd:{0:.3f}\".format(sd), size=12)\n#plt.plot([m-2*sd,m+2*sd],[0.4,0.4])\n#plt.plot([m-2*sd,m-2*sd],[0,0.9], \"k--\", alpha=.5)\n#plt.plot([m+2*sd,m+2*sd],[0,0.9], \"k--\", alpha=.5)\n\nplt.xlim(27.5,32.5)\nplt.show()\n```\n\n```log:out\naverage:30.0018428235\nsd:0.499635405099\n```\n\n\n![Unknown-19.png](https://qiita-image-store.s3.amazonaws.com/0/50670/6f27ef58-4799-8bb6-9c33-761ed08350bf.png)\n\n## \u4fe1\u983c\u533a\u9593\u3092\u8868\u793a\n\n```py\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\nsns.distplot(ave_list, hist=True, kde=True, rug=False, bins=20, color=\"r\")\n\n# Calculate average\nm = np.mean(ave_list)\nsd = np.sqrt(np.var(ave_list))\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nplt.plot([m,m],[0,0.9], 'r')\nplt.text(m+.1,0.02,\"average:{0:.3f}\".format(m), size=12)\nplt.plot([m,m+sd],[0.5,0.5],\"r\")\nplt.text(m+.1,0.52,\"sd:{0:.3f}\".format(sd), size=12)\nplt.plot([m-2*sd,m+2*sd],[0.4,0.4])\nplt.plot([m-2*sd,m-2*sd],[0,0.9], \"k--\", alpha=.5)\nplt.plot([m+2*sd,m+2*sd],[0,0.9], \"k--\", alpha=.5)\n\nplt.xlim(27.5,32.5)\nplt.show()\n\n```\n\n```log:out\naverage:30.0018428235\nsd:0.499635405099\n```\n\n![Unknown-20.png](https://qiita-image-store.s3.amazonaws.com/0/50670/f16e2fe3-baa8-c6b7-a938-1228a90d837e.png)\n\n\n\n```py\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\n# Plot a kernel density estimate and rug plot\n#sns.distplot(ave_list, hist=True, kde=True, rug=False, bins=20, color=\"r\")\n\n# Calculate average\nm = np.mean(ave_list)\nsd = np.sqrt(np.var(ave_list))\n\nxx = np.linspace(27.5,32.5, 301)\nyy = st.norm.pdf(xx, loc=m, scale=sd)\n\nplt.plot(xx,yy,\"r\")\n\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(m-2*sd, m+2*sd)\n\nplt.plot([m,m],[0,0.9], 'r')\nplt.text(m+.1,0.02,\"average:{0:.3f}\".format(m), size=12)\nplt.plot([m,m+sd],[0.48,0.48],\"r\")\nplt.text(m+.05,0.50,\"sd:{0:.3f}\".format(sd), size=12)\nplt.plot([m-2*sd,m+2*sd],[0.4,0.4])\nplt.plot([m-2*sd,m-2*sd],[0,0.9], \"k--\", alpha=.5)\nplt.plot([m+2*sd,m+2*sd],[0,0.9], \"k--\", alpha=.5)\n\nplt.xlim(27.5,32.5)\nplt.show()\n```\n\n```log:out\naverage:30.0018428235\nsd:0.499635405099\nlower:29.003, upper:31.001\n```\n\n![Unknown-21.png](https://qiita-image-store.s3.amazonaws.com/0/50670/fe15fdae-1400-3e12-a602-5c44f1ce4784.png)\n\n\n\n\n## \u6a19\u672c\u5e73\u5747\u306e\u4fe1\u983c\u533a\u9593\u3092\u3044\u304f\u3064\u3082\u63cf\u3044\u3066\u307f\u308b\n\n```py\nsample = [df.sample(n=100) for _ in range(50)]\n\nres = []\nfor d in sample:\n    m = np.mean(d)\n    sd = np.sqrt(np.var(d))\n    n = len(d)\n    upper = m + 2*sd/np.sqrt(n)\n    lower = m - 2*sd/np.sqrt(n)\n    #print \"(u:{0:.3f}, l:{1:.3f},)\".format(float(upper), float(lower))\n    res.append((float(lower), float(upper)))\n\nplt.figure(figsize=(14, 7))\n\ncnt = 0\nfor i, d in enumerate(res):\n    plt.plot([d[0],d[1]], [i+1, i+1], \"b\")\n    if d[0] > 30 or d[1] < 30:\n        cnt += 1\n    \nplt.plot([30, 30],[0,52], \"k--\")\nplt.ylim(0,52)\nprint cnt/float(len(res))\n```\n\n![Unknown-22.png](https://qiita-image-store.s3.amazonaws.com/0/50670/5d98861a-e145-54e2-f4a8-5ddfa5f065f4.png)\n\n\n## \u6bcd\u96c6\u56e3\u306e\u5e73\u5747\u306e\u691c\u5b9a\n\n\n```py\n# \u6bcd\u96c6\u56e3\nnp.random.seed(32)\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\nm = 450\nsd = 80\n\nxx = np.linspace(0,800, 501)\nyy = st.norm.pdf(xx, loc=m, scale=sd)\n\nplt.plot(xx,yy,zorder=100)\nplt.xticks(range(0,800,50))\nplt.plot([450,450],[0,0.18],\"k\",alpha=.8)\n\nplt.ylim(0,0.0055)\nplt.show()\n\n```\n\n![Unknown-23.png](https://qiita-image-store.s3.amazonaws.com/0/50670/a77d81ec-ac57-6751-4b1a-d9de23a73894.png)\n\n\n## \u4eca\u5e74\u306e\u65b0\u5165\u751f\u306e\u7d50\u679c(36\u4eba\u5206)\n\n\n```py\nnp.random.seed(32)\ndata = st.norm.rvs(loc=480, scale=80, size=36)\ndata = np.array(map(int, data)) - 22\n\ndata[7] -= 22\ndata[1]  -= 2\nprint data\n\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\nn = len(data)\nm = data.mean()\nsd = data.std()\nm_sd = sd/np.sqrt(n)\n\nprint \"data size:{}\".format(n)\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\n\nxx = np.linspace(-15,10, 501)\nyy = st.norm.pdf(xx, loc=m, scale=sd)\n\nsns.distplot(data, hist=True, kde=True, bins=8, rug=False, color=\"b\", kde_kws={\"lw\":0})\nplt.show()\n\n```\n\n```log:out\n[430 534 504 463 520 504 575 569 437 402 402 613 602 494 412 467 579 486\n 450 531 498 392 489 424 461 415 417 386 545 511 372 555 727 391 430 309]\ndata size:36\naverage:480.444444444\nsd:82.0120060467\n```\n\n![Unknown-24.png](https://qiita-image-store.s3.amazonaws.com/0/50670/52f1676e-16dc-92ed-3fc2-3c846d2d42e2.png)\n\n\n```py\n\n# \u4eca\u5e74\u306e\u65b0\u5165\u751f\u306e\u7d50\u679c(36\u4eba\u5206)\nf, axes = plt.subplots(1, 1, figsize=(12, 5), sharex=True)\nsns.despine(left=True)\n\nn = len(data)\nm = data.mean()\nsd = data.std()\nm_sd = sd/np.sqrt(n)\nup  = m+2*m_sd\nlow = m-2*m_sd\n\nprint \"data size:{}\".format(n)\nprint \"average:{}\".format(m)\nprint \"sd:{}\".format(sd)\nprint \"m_sd:{}\".format(sd/np.sqrt(n)) \nprint \"lower:{0:.3f}, upper:{1:.3f}\".format(low, up)\n\nxx = np.linspace(400,550, 501)\nyy = st.norm.pdf(xx, loc=m, scale=m_sd)\n\nplt.plot(xx,yy,\"r\",zorder=100)\nplt.plot([450,450],[0,0.03],\"k\",alpha=.8)\n\nplt.plot([m,m],[0,0.03],\"k--\", lw=1, alpha=.8)\nplt.plot([low, low],[0,0.03],\"k--\", lw=1, alpha=.8)\nplt.plot([up, up],[0,0.03],\"k--\", lw=1, alpha=.8)\n\nplt.show()\n```\n\n```out:log\ndata size:36\naverage:480.444444444\nsd:82.0120060467\nm_sd:13.6686676744\nlower:453.107, upper:507.782\n```\n\n![Unknown-25.png](https://qiita-image-store.s3.amazonaws.com/0/50670/4c578a1e-9aad-43ec-1b5e-43fbb9d49f8d.png)\n", "tags": ["\u7d71\u8a08\u5b66", "statistics", "Python"]}