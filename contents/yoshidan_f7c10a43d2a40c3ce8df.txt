{"context": " More than 1 year has passed since last update.\n\n\u307e\u305a\u306f\u52d5\u304b\u3059\n\n\u4f9d\u5b58\u95a2\u4fc2\u306e\u8ffd\u52a0\n\nmaven\u306e\u5834\u5408pom\u306bspring-boot-starter\u3068spring-boot-starter-redis\u3092\u8ffd\u52a0\u3059\u308b\u3002\nSpring Data \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fJedis\u3092\u5229\u7528\u3057\u3066Redis\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002\n\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.3.0.M5</version>\n</parent>\n\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-redis</artifactId>\n    </dependency>\n</dependencies>\n\n\n\u8a2d\u5b9a\n\n\u8d77\u52d5\u30af\u30e9\u30b9\u306b@SpringBootApplication\u3092\u3064\u3051\u308b\u3060\u3051\u3067spring-boot-autoconfigure\u304c\u81ea\u52d5\u7684\u306bRedisTemplate\u3092\u5229\u7528\u53ef\u80fd\u306b\u3057\u3066\u304f\u308c\u308b\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306flocalhost:6379\u306b\u63a5\u7d9a\u3059\u308b\u3002\n\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u305f\u3051\u308c\u3070application.yml\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8f09\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u306e\u8a2d\u5b9a\u306a\u3069\u3082\u8a18\u8f09\u53ef\u80fd\u3002\n\nspring:\n    data:\n        redis:\n            host: 192.168.33.11\n            port: 6379   \n\n\n\u5229\u7528\u65b9\u6cd5\nRedisTemplate\u3092\u4f7f\u3063\u3066Redis\u3092\u64cd\u4f5c\u3059\u308b\u3002\n@Autowired\nRedisTemplate redisTemplate;\n\npublic void write() {\n\n    redisTemplate.opsForZSet().add(userId, itemId ,new Date().getTime()))\n\n}\n\npublic List<History> read(long begin , long end) {\n    return redisTemplate.opsForZSet().reverseRangeWithScores(null, begin , end))\n            .stream().map(e -> {\n             History history = new History();\n             history.setDate( new Date((long)(e.getScore())));\n             history.setItemId( result.getValue());\n             return history;\n    }).collect(Collectors.toList());\n}\n\n\n\u4e0a\u8a18\u306fSortedSet\u3092\u5229\u7528\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002SortedSet\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u53ef\u80fd\u3002\n\n\n\u5546\u54c1ID\u306e\u91cd\u8907\u3092\u8a31\u53ef\u3057\u306a\u3044\u305f\u3081\u3001\u540c\u3058\u5546\u54c1\u3092\u4f55\u5ea6\u898b\u3089\u308c\u3066\u30821\u4ef6\u3068\u3057\u3066\u6271\u308f\u308c\u308b\n2\u65e5\u524d\u306b\u5546\u54c1A\u3092\u898b\u305f->1\u65e5\u524d\u306b\u5546\u54c1B\u3092\u898b\u305f->\u4eca\u65e5\u5546\u54c1A\u3092\u307e\u305f\u898b\u305f\u3001\u306e\u5834\u5408\u306b\u5546\u54c1A\u3092\u5546\u54c1B\u3088\u308a\u512a\u5148\u3059\u308b\n\n\n\n\nspring-context\u306eCache\u3068\u9023\u643a\u3055\u305b\u308b\n\u4eca\u5ea6\u306fRedis\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u3057\u3066\u4f7f\u3063\u3066\u307f\u308b\u3002\n\n\u8a2d\u5b9a\n\nCachingConfigurerSupport\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066CacheManager\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n@EnableCaching\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4ed8\u4e0e\u3082\u5fc5\u8981\u3002\n\n@Configuration\n@EnableCaching\npublic class RedisConfiguration extends CachingConfigurerSupport {\n\n    @Bean\n    @Autowired\n    public CacheManager cacheManager(RedisTemplate<Object,Object> redisTemplate>){\n\n        RedisCacheManager cacheManager = new RedisCacheManager(redisTemplate)\n\n        // \u30ad\u30e3\u30c3\u30b7\u30e5\u6709\u52b9\u671f\u9650\u306e\u8a2d\u5b9a(\u79d2)\n        Map<String, Long> expires = new HashMap<String, Long>();\n        expires.put(\"cache.day\", new Long(24 * 60 * 60));\n        expires.put(\"cache.short\", new Long(3 * 60));\n        cacheManager.setExpires(expires);\n        return cacheManager;\n    }\n}  \n\n\n\u5229\u7528\u65b9\u6cd5\n\nCacheable\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4e57\u305b\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002\nvalue\u5c5e\u6027\u306b\u306f\u4e0a\u306eexpires\u306b\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u6307\u5b9a\u3059\u308b\u3068\u5c02\u7528\u306e\u6709\u52b9\u671f\u9650\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3002\nexpires\u306b\u5b58\u5728\u3057\u306a\u3044\u5024\u306b\u3059\u308b\u3068\u7121\u671f\u9650\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\u306b\u306a\u308b\u3002\nkey\u5c5e\u6027\u306b\u306fredis\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u3057\u3066\u767b\u9332\u3057\u305f\u3044\u30ad\u30fc\u3092\u8a18\u8f09\u3059\u308b\u3002EL\u5f0f\u3092\u8a18\u8f09\u3059\u308b\u3053\u3068\u3067\u5f15\u6570\u306e\u5024\u3092\u542b\u3093\u3060\u30ad\u30fc\u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n  @Cacheable(value = \"cache.day\", key = \"'item/' #itemId\")\n  public Item find(String itemId) {\n    // execute database sql\n  }\n\n\n\u3053\u306e\u4f8b\u3067\u306fvalue\u5c5e\u6027\u306bcache.day\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u3081\u6709\u52b9\u671f\u9650(Redis\u306ettl)\u304c24\u6642\u9593\u3068\u306a\u308b\u3002\n\u547c\u3073\u51fa\u3057\u5143\u304b\u3089find(\"001\")\u3067\u30b3\u30fc\u30eb\u3057\u305f\u3068\u304dredis\u306b\u767b\u9332\u3055\u308c\u308bkey\u5024\u306f\u300citem/001\u300d\u3068\u306a\u308b\u3002\nitem/001\u306b\u5bfe\u3059\u308bvalue\u306fsqlTemplate.find(itemId)\u306e\u7d50\u679c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308bItem\u3092Serialize\u3057\u305f\u3082\u306e\u306b\u306a\u308b\u3002Serializer\u306fRedisTemplate\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5909\u66f4\u53ef\u80fd\u3002\n\n\n\u5185\u90e8\u52d5\u4f5c\n@Cacheable\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u305f\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066CacheInterceptor\u304c\u50cd\u304f\u3002\n\u4e0b\u306e\u56f3\u306f\u4e0a\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u305f\u6642\u306e\u6d41\u308c\u3002\n\n\u2460EXISTS cache.day~lock\n\n\u3053\u308c\u306f\u30ed\u30c3\u30af\u3092\u53d6\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3002\ncache.day~lock\u306fRedisCache#clean\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u6642\u306b\u4f5c\u6210\u3055\u308c\u308b\u30ad\u30fc\u3067\u3001\u3053\u306e\u30ad\u30fc\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u9593\u306fRedisCache\u5074\u3067wait\u3059\u308b\u3002\nwait\u3068\u3044\u3063\u3066\u3082\u3053\u306e\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u304f\u306a\u308b\u307e\u3067300msec\u6bce\u306bEXIST\u6295\u3052\u308b\u30eb\u30fc\u30d7\u3057\u3066\u3044\u308b\u3060\u3051\uff08spring data redis 1.6.0.RELEASE\u3067\u78ba\u8a8d)\n\u2461GET item/001\n\n\n\u30ad\u30fc\u300citem/001\u300d\u306b\u8a72\u5f53\u3059\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u7d50\u679c\u304c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u3053\u3053\u3067@Cacheable\u3092\u4ed8\u4e0e\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\u7a7a\u30c7\u30fc\u30bf\u3067\u3082\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308c\u3070\u30e1\u30bd\u30c3\u30c9\u306f\u547c\u3073\u51fa\u3055\u308c\u306a\u3044\u3002\n\u7d50\u679c\u304c\u5b58\u5728\u3057\u3066\u308c\u3070\u547c\u3073\u51fa\u3057\u5143\u306bRedis\u304b\u3089\u53d6\u5f97\u3057\u305f\u5024\u3092\u8fd4\u5374\u3057\u3066\u7d42\u4e86\u3002\n\n\u2463EXISTS cache.day~lock\n\nGET\u6642\u3068\u540c\u3058\u304fSET\u306e\u305f\u3081\u306b\u30ed\u30c3\u30af\u306e\u6709\u7121\u3092\u78ba\u8a8d\u3002\n\u2464MULTI\u301c\u2468EXEC\n\n\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u958b\u59cb\u3057\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u2468EXEC\u307e\u3067\u306f\u540c\u4e00\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u51e6\u7406\u3055\u308c\u308b\u3002\n\u2465\u3067\u5024\u3092\u30bb\u30c3\u30c8\u3002\n\u2466\u3067\u306fkey\u3092cache.day~keys\u3068\u3044\u3046SortedSet\u306b\u767b\u9332\u3002@Cacheable\u306evalue\u5024\u6bce\u306b\u30ad\u30fc\u306e\u4e00\u89a7\u3092\u7ba1\u7406\u3059\u308b\u5f62\u306b\u306a\u308b\u3002\u7d50\u679c\u3068\u3057\u3066\u6709\u52b9\u671f\u9650\u6bce\u306b\u30ad\u30fc\u306e\u4e00\u89a7\u304c\u7ba1\u7406\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\u2467\u6709\u52b9\u671f\u9650\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308c\u3070EXPIRE\u30b3\u30de\u30f3\u30c9\u767a\u884c\u3002\n\n\n\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u7834\u68c4\n\n\n@CacheEvict\u3092\u4ed8\u4e0e\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3068DEL\u3059\u308b\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3068value\u5c5e\u6027\u3092@Cacheable\u306evalue\u3068\u540c\u4e00\u306b\u3059\u308b\u3053\u3068\u3067\u5bfe\u5fdc\u3059\u308b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5168\u3066\u524a\u9664\u3067\u304d\u308b\u3002\n\n@CacheEvict(value = \"cache.day\", allEntries = true)\npublic void evict() {\n    // delete DB data \n}\n\n\nCache\u30a8\u30e9\u30fc\u6642\u306e\u6240\u4f5c\u5909\u66f4\nCacheErrorHandler\u3092Bean\u306b\u767b\u9332\u3059\u308b\u3053\u3068\u3067Cache\u306b\u95a2\u3059\u308b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u6642\u306e\u632f\u308b\u821e\u3044\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u4ee5\u4e0b\u306fCache\u306b\u95a2\u3059\u308b\u5168\u3066\u306eException\u3092\u30ed\u30b0\u306b\u51fa\u529b\u3057\u3066\u3001\u547c\u3073\u51fa\u3057\u5143\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u3088\u308b\u30a8\u30e9\u30fc\u3092\u610f\u8b58\u3055\u305b\u305a\u306b\u3001\u5fc5\u305a@Cacheable\u4ed8\u4e0e\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u30b5\u30f3\u30d7\u30eb\n@Bean\n@Override\npublic CacheErrorHandler errorHandler() {\n  return new CacheErrorHandler() {\n    @Override\n    public void handleCacheGetError(RuntimeException exception, Cache cache, Object key) {\n      LOGGER.error(String.format(\"%s:%s:%s\", cache.getName(), key, exception.getMessage()),\n            exception);\n    }\n\n    @Override\n    public void handleCachePutError(RuntimeException exception, Cache cache, Object key,\n          Object value) {\n      LOGGER.error(String.format(\"%s:%s:%s\", cache.getName(), key, exception.getMessage()),\n            exception);\n    }\n\n    @Override\n    public void handleCacheEvictError(RuntimeException exception, Cache cache, Object key) {\n        LOGGER.error(String.format(\"%s:%s:%s\", cache.getName(), key, exception.getMessage()),\n            exception);\n      LOGGER.error(exception.getMessage(), exception);\n    }\n\n    @Override\n    public void handleCacheClearError(RuntimeException exception, Cache cache) {\n      LOGGER.error(String.format(\"%s:%s\", cache.getName(), exception.getMessage()), exception);\n      LOGGER.error(exception.getMessage(), exception);\n    }\n  };\n}\n\n\n# \u307e\u305a\u306f\u52d5\u304b\u3059\n\n## \u4f9d\u5b58\u95a2\u4fc2\u306e\u8ffd\u52a0\n\n* maven\u306e\u5834\u5408pom\u306bspring-boot-starter\u3068spring-boot-starter-redis\u3092\u8ffd\u52a0\u3059\u308b\u3002\n* Spring Data \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fJedis\u3092\u5229\u7528\u3057\u3066Redis\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002\n\n```\n<parent>\n\t<groupId>org.springframework.boot</groupId>\n\t<artifactId>spring-boot-starter-parent</artifactId>\n\t<version>1.3.0.M5</version>\n</parent>\n    \n<dependencies>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n  \t\t<artifactId>spring-boot-starter</artifactId>\n\t</dependency>\n\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n  \t\t<artifactId>spring-boot-starter-redis</artifactId>\n\t</dependency>\n</dependencies>\n```\n\n## \u8a2d\u5b9a\n\n* \u8d77\u52d5\u30af\u30e9\u30b9\u306b@SpringBootApplication\u3092\u3064\u3051\u308b\u3060\u3051\u3067spring-boot-autoconfigure\u304c\u81ea\u52d5\u7684\u306bRedisTemplate\u3092\u5229\u7528\u53ef\u80fd\u306b\u3057\u3066\u304f\u308c\u308b\u3002\n* \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306flocalhost:6379\u306b\u63a5\u7d9a\u3059\u308b\u3002\n* \u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u305f\u3051\u308c\u3070application.yml\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8f09\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u306e\u8a2d\u5b9a\u306a\u3069\u3082\u8a18\u8f09\u53ef\u80fd\u3002\n\n```\nspring:\n    data:\n        redis:\n            host: 192.168.33.11\n            port: 6379   \n```                        \n\n## \u5229\u7528\u65b9\u6cd5\n\nRedisTemplate\u3092\u4f7f\u3063\u3066Redis\u3092\u64cd\u4f5c\u3059\u308b\u3002\n\n```\n@Autowired\nRedisTemplate redisTemplate;\n\npublic void write() {\n\n\tredisTemplate.opsForZSet().add(userId, itemId ,new Date().getTime()))\n\n}\n\npublic List<History> read(long begin , long end) {\n\treturn redisTemplate.opsForZSet().reverseRangeWithScores(null, begin , end))\n        \t.stream().map(e -> {\n         \t History history = new History();\n          \t history.setDate( new Date((long)(e.getScore())));\n          \t history.setItemId( result.getValue());\n          \t return history;\n    }).collect(Collectors.toList());\n}\n```\n\n* \u4e0a\u8a18\u306fSortedSet\u3092\u5229\u7528\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002SortedSet\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u53ef\u80fd\u3002\n\t- \u5546\u54c1ID\u306e\u91cd\u8907\u3092\u8a31\u53ef\u3057\u306a\u3044\u305f\u3081\u3001\u540c\u3058\u5546\u54c1\u3092\u4f55\u5ea6\u898b\u3089\u308c\u3066\u30821\u4ef6\u3068\u3057\u3066\u6271\u308f\u308c\u308b\n\t- 2\u65e5\u524d\u306b\u5546\u54c1A\u3092\u898b\u305f->1\u65e5\u524d\u306b\u5546\u54c1B\u3092\u898b\u305f->\u4eca\u65e5\u5546\u54c1A\u3092\u307e\u305f\u898b\u305f\u3001\u306e\u5834\u5408\u306b\u5546\u54c1A\u3092\u5546\u54c1B\u3088\u308a\u512a\u5148\u3059\u308b\n\n# spring-context\u306eCache\u3068\u9023\u643a\u3055\u305b\u308b\n\n\u4eca\u5ea6\u306fRedis\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u3057\u3066\u4f7f\u3063\u3066\u307f\u308b\u3002\n\n## \u8a2d\u5b9a\n* CachingConfigurerSupport\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066CacheManager\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b\u3002\n* @EnableCaching\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4ed8\u4e0e\u3082\u5fc5\u8981\u3002\n\n```\n@Configuration\n@EnableCaching\npublic class RedisConfiguration extends CachingConfigurerSupport {\n\n\t@Bean\n\t@Autowired\n\tpublic CacheManager cacheManager(RedisTemplate<Object,Object> redisTemplate>){\n\n    \tRedisCacheManager cacheManager = new RedisCacheManager(redisTemplate)\n\t\t\n\t\t// \u30ad\u30e3\u30c3\u30b7\u30e5\u6709\u52b9\u671f\u9650\u306e\u8a2d\u5b9a(\u79d2)\n\t\tMap<String, Long> expires = new HashMap<String, Long>();\n    \texpires.put(\"cache.day\", new Long(24 * 60 * 60));\n    \texpires.put(\"cache.short\", new Long(3 * 60));\n   \t \tcacheManager.setExpires(expires);\n   \t \treturn cacheManager;\n\t}\n}  \n```\n\n## \u5229\u7528\u65b9\u6cd5\n\n* Cacheable\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4e57\u305b\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002\n* value\u5c5e\u6027\u306b\u306f\u4e0a\u306eexpires\u306b\u8a2d\u5b9a\u3057\u305f\u5024\u3092\u6307\u5b9a\u3059\u308b\u3068\u5c02\u7528\u306e\u6709\u52b9\u671f\u9650\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3002\n* expires\u306b\u5b58\u5728\u3057\u306a\u3044\u5024\u306b\u3059\u308b\u3068\u7121\u671f\u9650\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\u306b\u306a\u308b\u3002\n* key\u5c5e\u6027\u306b\u306fredis\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u3057\u3066\u767b\u9332\u3057\u305f\u3044\u30ad\u30fc\u3092\u8a18\u8f09\u3059\u308b\u3002EL\u5f0f\u3092\u8a18\u8f09\u3059\u308b\u3053\u3068\u3067\u5f15\u6570\u306e\u5024\u3092\u542b\u3093\u3060\u30ad\u30fc\u3068\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```\n  @Cacheable(value = \"cache.day\", key = \"'item/' #itemId\")\n  public Item find(String itemId) {\n    // execute database sql\n  }\n```\n\n* \u3053\u306e\u4f8b\u3067\u306fvalue\u5c5e\u6027\u306bcache.day\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u3081\u6709\u52b9\u671f\u9650(Redis\u306ettl)\u304c24\u6642\u9593\u3068\u306a\u308b\u3002\n* \u547c\u3073\u51fa\u3057\u5143\u304b\u3089find(\"001\")\u3067\u30b3\u30fc\u30eb\u3057\u305f\u3068\u304dredis\u306b\u767b\u9332\u3055\u308c\u308bkey\u5024\u306f\u300citem/001\u300d\u3068\u306a\u308b\u3002\n* item/001\u306b\u5bfe\u3059\u308bvalue\u306fsqlTemplate.find(itemId)\u306e\u7d50\u679c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308bItem\u3092Serialize\u3057\u305f\u3082\u306e\u306b\u306a\u308b\u3002Serializer\u306fRedisTemplate\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u5909\u66f4\u53ef\u80fd\u3002\n\n## \u5185\u90e8\u52d5\u4f5c\n\n@Cacheable\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u305f\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066CacheInterceptor\u304c\u50cd\u304f\u3002\n\u4e0b\u306e\u56f3\u306f\u4e0a\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u305f\u6642\u306e\u6d41\u308c\u3002\n\n![RedisCache.001.png](https://qiita-image-store.s3.amazonaws.com/0/39230/5d1cc168-6f65-9c3d-10ae-c1f1806023bf.png \"RedisCache.001.png\")\n\n\n```\n\u2460EXISTS cache.day~lock\n```\n\n\u3053\u308c\u306f\u30ed\u30c3\u30af\u3092\u53d6\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3002\ncache.day~lock\u306fRedisCache#clean\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u6642\u306b\u4f5c\u6210\u3055\u308c\u308b\u30ad\u30fc\u3067\u3001\u3053\u306e\u30ad\u30fc\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u9593\u306fRedisCache\u5074\u3067wait\u3059\u308b\u3002\nwait\u3068\u3044\u3063\u3066\u3082\u3053\u306e\u30ad\u30fc\u304c\u5b58\u5728\u3057\u306a\u304f\u306a\u308b\u307e\u3067300msec\u6bce\u306bEXIST\u6295\u3052\u308b\u30eb\u30fc\u30d7\u3057\u3066\u3044\u308b\u3060\u3051\uff08spring data redis 1.6.0.RELEASE\u3067\u78ba\u8a8d)\n\n```\n\u2461GET item/001\n```\n* \u30ad\u30fc\u300citem/001\u300d\u306b\u8a72\u5f53\u3059\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3002\n* \u7d50\u679c\u304c\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u3053\u3053\u3067@Cacheable\u3092\u4ed8\u4e0e\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\u7a7a\u30c7\u30fc\u30bf\u3067\u3082\u30ad\u30fc\u304c\u5b58\u5728\u3059\u308c\u3070\u30e1\u30bd\u30c3\u30c9\u306f\u547c\u3073\u51fa\u3055\u308c\u306a\u3044\u3002\n* \u7d50\u679c\u304c\u5b58\u5728\u3057\u3066\u308c\u3070\u547c\u3073\u51fa\u3057\u5143\u306bRedis\u304b\u3089\u53d6\u5f97\u3057\u305f\u5024\u3092\u8fd4\u5374\u3057\u3066\u7d42\u4e86\u3002\n\n```\n\u2463EXISTS cache.day~lock\n```\n\nGET\u6642\u3068\u540c\u3058\u304fSET\u306e\u305f\u3081\u306b\u30ed\u30c3\u30af\u306e\u6709\u7121\u3092\u78ba\u8a8d\u3002\n\n```\n\u2464MULTI\u301c\u2468EXEC\n```\n* \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u958b\u59cb\u3057\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u2468EXEC\u307e\u3067\u306f\u540c\u4e00\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u51e6\u7406\u3055\u308c\u308b\u3002\n* \u2465\u3067\u5024\u3092\u30bb\u30c3\u30c8\u3002\n* \u2466\u3067\u306fkey\u3092cache.day~keys\u3068\u3044\u3046SortedSet\u306b\u767b\u9332\u3002@Cacheable\u306evalue\u5024\u6bce\u306b\u30ad\u30fc\u306e\u4e00\u89a7\u3092\u7ba1\u7406\u3059\u308b\u5f62\u306b\u306a\u308b\u3002\u7d50\u679c\u3068\u3057\u3066\u6709\u52b9\u671f\u9650\u6bce\u306b\u30ad\u30fc\u306e\u4e00\u89a7\u304c\u7ba1\u7406\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n* \u2467\u6709\u52b9\u671f\u9650\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308c\u3070EXPIRE\u30b3\u30de\u30f3\u30c9\u767a\u884c\u3002\n\n## \u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u7834\u68c4\n\n* @CacheEvict\u3092\u4ed8\u4e0e\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3068DEL\u3059\u308b\u3002\n* \u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u3068value\u5c5e\u6027\u3092@Cacheable\u306evalue\u3068\u540c\u4e00\u306b\u3059\u308b\u3053\u3068\u3067\u5bfe\u5fdc\u3059\u308b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5168\u3066\u524a\u9664\u3067\u304d\u308b\u3002\n\n```\n@CacheEvict(value = \"cache.day\", allEntries = true)\npublic void evict() {\n\t// delete DB data \n}\n```\n\n## Cache\u30a8\u30e9\u30fc\u6642\u306e\u6240\u4f5c\u5909\u66f4\n\nCacheErrorHandler\u3092Bean\u306b\u767b\u9332\u3059\u308b\u3053\u3068\u3067Cache\u306b\u95a2\u3059\u308b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u6642\u306e\u632f\u308b\u821e\u3044\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u4ee5\u4e0b\u306fCache\u306b\u95a2\u3059\u308b\u5168\u3066\u306eException\u3092\u30ed\u30b0\u306b\u51fa\u529b\u3057\u3066\u3001\u547c\u3073\u51fa\u3057\u5143\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u3088\u308b\u30a8\u30e9\u30fc\u3092\u610f\u8b58\u3055\u305b\u305a\u306b\u3001\u5fc5\u305a@Cacheable\u4ed8\u4e0e\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u30b5\u30f3\u30d7\u30eb\n\n```\n@Bean\n@Override\npublic CacheErrorHandler errorHandler() {\n  return new CacheErrorHandler() {\n    @Override\n    public void handleCacheGetError(RuntimeException exception, Cache cache, Object key) {\n      LOGGER.error(String.format(\"%s:%s:%s\", cache.getName(), key, exception.getMessage()),\n            exception);\n    }\n\n    @Override\n    public void handleCachePutError(RuntimeException exception, Cache cache, Object key,\n          Object value) {\n      LOGGER.error(String.format(\"%s:%s:%s\", cache.getName(), key, exception.getMessage()),\n            exception);\n    }\n\n    @Override\n    public void handleCacheEvictError(RuntimeException exception, Cache cache, Object key) {\n        LOGGER.error(String.format(\"%s:%s:%s\", cache.getName(), key, exception.getMessage()),\n            exception);\n      LOGGER.error(exception.getMessage(), exception);\n    }\n\n    @Override\n    public void handleCacheClearError(RuntimeException exception, Cache cache) {\n      LOGGER.error(String.format(\"%s:%s\", cache.getName(), exception.getMessage()), exception);\n      LOGGER.error(exception.getMessage(), exception);\n    }\n  };\n}\n```\n\n\n\n\n\n", "tags": ["Redis", "Cache", "spring", "spring-boot"]}