{"context": " More than 1 year has passed since last update.\n\nhaarcascade\u306e\u7279\u5fb4\u91cf\u306f\u56de\u8ee2\u4e0d\u5909\u3058\u3083\u306a\u3044\uff01\nOpenCV\u306ehaarcascade_frontalface\u3092\u4f7f\u3063\u3066\u3001\u9854\u8a8d\u8b58\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082SIFT\u3084SURF\u3068\u9055\u3063\u3066\u3001\u56de\u8ee2\u306b\u4e0d\u5909\u306a\u7279\u5fb4\u3067\u306f\u306a\u3044\u3088\u3046\u3067\u3001\u9854\u3092\u3061\u3087\u3063\u3068\u50be\u3051\u305f\u3060\u3051\u3067\u9854\u304c\u8a8d\u8b58\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\u30ab\u30e1\u30e9\u753b\u50cf\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u691c\u51fa\u3059\u308b\u969b\u306f\u3001\u30ab\u30e1\u30e9\u3092\u3061\u3083\u3093\u3068\u307e\u3063\u3059\u3050\u306b\u7f6e\u3044\u3066\u304a\u3051\u3070\u3001\u666e\u901a\u306e\u4eba\u306f\u9996\u3092\u307e\u3063\u3059\u3050\u306b\u5411\u3051\u3066\u3044\u308b\u306e\u3067\u305d\u3053\u305d\u3053\u8a8d\u8b58\u3055\u308c\u308b\u306e\u3067\u3059\u304c\n\u3053\u3093\u306a\u611f\u3058\u3067\u9854\u3092\u50be\u3051\u3066\u3044\u308b\u5199\u771f\u3092\u5358\u4f53\u3067\u691c\u51fa\u3059\u308b\u3068\u3001\u3061\u3083\u3093\u3068\u8a8d\u8b58\u3055\u308c\u306a\u3044\u3002\n\n\u3053\u306e\u5199\u771f\u3067\u306f\u3001\u307e\u3063\u3059\u3050\u6b63\u9762\u3092\u5411\u3044\u3066\u308b\u9ad8\u57ce\u308c\u306b\u3055\u3093\u3057\u304b\u9854\u306e\u691c\u51fa\u304c\u3055\u308c\u3066\u3044\u306a\u3044\n\n\u89e3\u6c7a\u65b9\u6cd5\n\u4e00\u5b9a\u306e\u89d2\u5ea6\u3057\u304b\u8a8d\u8b58\u3057\u306a\u3044\u306e\u306a\u3089\u3001\u753b\u50cf\u81ea\u4f53\u3092\u50be\u3051\u3066\u3057\u307e\u3048\u3070\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3001\u3068\u306e\u7740\u60f3\u3067\u3001\u5c0f\u523b\u307f\u306b\u50be\u304d\u3092\u5909\u3048\u305f\u753b\u50cf\u5168\u3066\u3092\u5224\u5b9a\u3055\u305b\u308c\u3070\u3001\u5168\u3066\u306e\u50be\u304d\u306e\u9854\u304c\u691c\u51fa\u3055\u308c\u308b\u3060\u308d\u3046\u3002\n\u30b9\u30c6\u30c3\u30d7\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n1. \u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\n2. \u9ad8\u3055\u5e45\u304c\u305d\u308c\u305e\u308c2\u500d\u306e\u7a7a\u753b\u50cf\u3092\u7528\u610f\u3059\u308b\n3. \u8aad\u307f\u3053\u3093\u3060\u753b\u50cf\u30925\u5ea6\u3060\u3051\u50be\u3051\u308b\n4. \u7a7a\u306e\u753b\u50cf\u306e\u4e2d\u5fc3\u306b\u3001\u50be\u3051\u305f\u753b\u50cf\u3092\u8cbc\u308a\u4ed8\u3051\u308b\n5. \u9854\u3092\u5224\u5b9a\u3059\u308b\n6. 2~5\u3092\u7e70\u308a\u8fd4\u3059\n\u56f3\u3067\u8868\u3059\u3068\u3053\u3093\u306a\u611f\u3058\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u9854\u5199\u771f\u3092\u5207\u308a\u629c\u3044\u3066\u4fdd\u5b58\u3059\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\nimport cv2\nimport numpy as np\nimport os\nfrom math import ceil\n\ntemp_face_img_path = 'work/temp/face/'\n\n# \u9854\u5224\u5b9a\u3067\u4f7f\u3046xml\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u3002\ncascade_path =  os.path.dirname(os.path.abspath(__file__)) + \"/haarcascade_frontalface_alt2.xml\"\n\nclass classifyPhoto:\n    def __init__(self):\n        print(\"init\")\n\n    # \u753b\u50cf\u304b\u3089\u9854\u3092\u5207\u308a\u53d6\u308a\u3001\u4fdd\u5b58\u3001\u30d1\u30b9\u3092\u8fd4\u3059\n    def crop_face(self, img_path):\n        # \u30d5\u30a1\u30a4\u30eb\u540d\u89e3\u6790\n        base_name = os.path.basename(img_path)\n        name,ext = os.path.splitext(base_name)\n        if (ext != '.jpg') and (ext != '.jpeg') :\n            print('not a jpg image')\n            return\n\n        img_src = cv2.imread(img_path, 1)\n        # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\n        img_gray = cv2.cvtColor(img_src, cv2.COLOR_BGR2GRAY)\n        cascade = cv2.CascadeClassifier(cascade_path)\n\n        org_width = img_src.shape[1]\n        org_height = img_src.shape[0]\n        i = 0\n\n        for j in range(0,71):\n            # \u62e1\u5927\u753b\u50cf\u306e\u4f5c\u6210\n            big_img = np.zeros((org_height * 2, org_width * 2 ,3), np.uint8)\n            big_img[ceil(org_height/2.0):ceil(org_height/2.0*3.0), ceil(org_width/2.0):ceil(org_width/2.0*3.0)] = img_src\n\n            # \u753b\u50cf\u306e\u4e2d\u5fc3\u4f4d\u7f6e\n            center = tuple(np.array([big_img.shape[1] * 0.5, big_img.shape[0] * 0.5]))\n\n            # \u753b\u50cf\u30b5\u30a4\u30ba\u306e\u53d6\u5f97(\u6a2a, \u7e26)\n            size = tuple(np.array([big_img.shape[1], big_img.shape[0]]))\n\n            # \u56de\u8ee2\u3055\u305b\u305f\u3044\u89d2\u5ea6\n            angle = 5.0 * float(j)\n            # \u62e1\u5927\u6bd4\u7387\n            scale = 1.0\n\n            # \u56de\u8ee2\u5909\u63db\u884c\u5217\u306e\u7b97\u51fa\n            rotation_matrix = cv2.getRotationMatrix2D(center, angle, scale)\n\n            # \u30a2\u30d5\u30a3\u30f3\u5909\u63db\n            img_rot = cv2.warpAffine(big_img, rotation_matrix, size, flags=cv2.INTER_CUBIC)\n            rot_gray = cv2.cvtColor(img_rot, cv2.COLOR_BGR2GRAY)\n\n            #\u9854\u5224\u5b9a\n            faces  =  cascade.detectMultiScale(img_rot, scaleFactor=1.2, minNeighbors=2, minSize=(50, 50))\n            # \u9854\u304c\u3042\u3063\u305f\u5834\u5408\n            if len(faces) > 0:\n                for (x,y,w,h) in faces:\n                    face = img_rot[y:y+h, x:x+w]\n                    file_name =  name + \"_face_\" + str(i) + ext\n                    cv2.imwrite(temp_face_img_path + file_name, face )\n                    i += 1\n\n            else :\n                print('does not have any faces')\n\n        return \n\nif __name__ == '__main__':\n    classifier = classifyPhoto()\n    classifier.crop_faceo('image.jpg')\n\n\n\u7d50\u679c\n\n\n\u5168\u90e8\u306740\u679a\u307b\u3069\u691c\u51fa\n\u308c\u306b\u3061\u3083\u3093\u304c8\u679a\u3001\u3042\u30fc\u308a\u3093\u304c9\u679a\u3001\u3082\u3082\u304b\u3068\u3057\u304a\u308a\u3093\u304c\uff11\u679a\u3001\u304b\u306a\u3053\u306f0\u679a\u3001\u305d\u306e\u4ed6\u9854\u30d1\u30fc\u30c4\u3084\u670d\u306a\u3069\u306e\u8aa4\u691c\u51fa\n\n\n\u8003\u5bdf\n\n\u5224\u5b9a\u679a\u6570\u304c\u5897\u3048\u305f\u5206\u3001\u8aa4\u691c\u51fa\u304c\u5897\u3048\u305f\n\u30e1\u30f3\u30d0\u30fc\u306b\u3088\u3063\u3066\u504f\u308a\u304c\u3042\u308b\u3002\u5358\u306b\u50be\u304d\u3060\u3051\u3067\u306a\u304f\u3001\u9854\u8a8d\u8b58\u306e\u7cbe\u5ea6\u304c\u60aa\u3044\u3060\u3051\u306e\u53ef\u80fd\u6027\u3082\u3002\n\u8907\u6570\u679a\u691c\u51fa\u3055\u308c\u305f\u30e1\u30f3\u30d0\u30fc\u306f\u3001\u5ea7\u6a19\u5909\u63db\uff0b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308c\u3070\u307e\u3068\u3081\u3089\u308c\u305d\u3046\n5\u5ea6\u523b\u307f\u306b\u305d\u308c\u305e\u308c\u8a08\u7b97\u3057\u3066\u308b\u306e\u3067\u3001\u8a08\u7b97\u91cf\u304c72\u500d\u306b\u306a\u308b\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308c\u3070\u3082\u3063\u3068\u30de\u30b7\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u591a\u5206\u4f7f\u3048\u307e\u305b\u3093\u3002\n## haarcascade\u306e\u7279\u5fb4\u91cf\u306f\u56de\u8ee2\u4e0d\u5909\u3058\u3083\u306a\u3044\uff01\nOpenCV\u306ehaarcascade_frontalface\u3092\u4f7f\u3063\u3066\u3001\u9854\u8a8d\u8b58\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082SIFT\u3084SURF\u3068\u9055\u3063\u3066\u3001\u56de\u8ee2\u306b\u4e0d\u5909\u306a\u7279\u5fb4\u3067\u306f\u306a\u3044\u3088\u3046\u3067\u3001\u9854\u3092\u3061\u3087\u3063\u3068\u50be\u3051\u305f\u3060\u3051\u3067\u9854\u304c\u8a8d\u8b58\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u30ab\u30e1\u30e9\u753b\u50cf\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u691c\u51fa\u3059\u308b\u969b\u306f\u3001\u30ab\u30e1\u30e9\u3092\u3061\u3083\u3093\u3068\u307e\u3063\u3059\u3050\u306b\u7f6e\u3044\u3066\u304a\u3051\u3070\u3001\u666e\u901a\u306e\u4eba\u306f\u9996\u3092\u307e\u3063\u3059\u3050\u306b\u5411\u3051\u3066\u3044\u308b\u306e\u3067\u305d\u3053\u305d\u3053\u8a8d\u8b58\u3055\u308c\u308b\u306e\u3067\u3059\u304c\n\u3053\u3093\u306a\u611f\u3058\u3067\u9854\u3092\u50be\u3051\u3066\u3044\u308b\u5199\u771f\u3092\u5358\u4f53\u3067\u691c\u51fa\u3059\u308b\u3068\u3001\u3061\u3083\u3093\u3068\u8a8d\u8b58\u3055\u308c\u306a\u3044\u3002\n\n![Show FACES Image_screenshot_18.09.2015.jpg](https://qiita-image-store.s3.amazonaws.com/0/50474/ee2a0788-a9a6-fe18-ad1f-42a2a8f52716.jpeg)\n\u3053\u306e\u5199\u771f\u3067\u306f\u3001\u307e\u3063\u3059\u3050\u6b63\u9762\u3092\u5411\u3044\u3066\u308b\u9ad8\u57ce\u308c\u306b\u3055\u3093\u3057\u304b\u9854\u306e\u691c\u51fa\u304c\u3055\u308c\u3066\u3044\u306a\u3044\n\n## \u89e3\u6c7a\u65b9\u6cd5\n\u4e00\u5b9a\u306e\u89d2\u5ea6\u3057\u304b\u8a8d\u8b58\u3057\u306a\u3044\u306e\u306a\u3089\u3001\u753b\u50cf\u81ea\u4f53\u3092\u50be\u3051\u3066\u3057\u307e\u3048\u3070\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3001\u3068\u306e\u7740\u60f3\u3067\u3001\u5c0f\u523b\u307f\u306b\u50be\u304d\u3092\u5909\u3048\u305f\u753b\u50cf\u5168\u3066\u3092\u5224\u5b9a\u3055\u305b\u308c\u3070\u3001\u5168\u3066\u306e\u50be\u304d\u306e\u9854\u304c\u691c\u51fa\u3055\u308c\u308b\u3060\u308d\u3046\u3002\n\n\u30b9\u30c6\u30c3\u30d7\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n1. \u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\n2. \u9ad8\u3055\u5e45\u304c\u305d\u308c\u305e\u308c2\u500d\u306e\u7a7a\u753b\u50cf\u3092\u7528\u610f\u3059\u308b\n3. \u8aad\u307f\u3053\u3093\u3060\u753b\u50cf\u30925\u5ea6\u3060\u3051\u50be\u3051\u308b\n4. \u7a7a\u306e\u753b\u50cf\u306e\u4e2d\u5fc3\u306b\u3001\u50be\u3051\u305f\u753b\u50cf\u3092\u8cbc\u308a\u4ed8\u3051\u308b\n5. \u9854\u3092\u5224\u5b9a\u3059\u308b\n6. 2~5\u3092\u7e70\u308a\u8fd4\u3059\n\n\u56f3\u3067\u8868\u3059\u3068\u3053\u3093\u306a\u611f\u3058\n![\u56de\u8ee2\u4e0d\u5909.001.jpg](https://qiita-image-store.s3.amazonaws.com/0/50474/fe7b1db4-68a1-9750-267f-5bf76e7cca4b.jpeg)\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u9854\u5199\u771f\u3092\u5207\u308a\u629c\u3044\u3066\u4fdd\u5b58\u3059\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```py\nimport cv2\nimport numpy as np\nimport os\nfrom math import ceil\n\ntemp_face_img_path = 'work/temp/face/'\n\n# \u9854\u5224\u5b9a\u3067\u4f7f\u3046xml\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u3002\ncascade_path =  os.path.dirname(os.path.abspath(__file__)) + \"/haarcascade_frontalface_alt2.xml\"\n\nclass classifyPhoto:\n    def __init__(self):\n        print(\"init\")\n\n    # \u753b\u50cf\u304b\u3089\u9854\u3092\u5207\u308a\u53d6\u308a\u3001\u4fdd\u5b58\u3001\u30d1\u30b9\u3092\u8fd4\u3059\n    def crop_face(self, img_path):\n        # \u30d5\u30a1\u30a4\u30eb\u540d\u89e3\u6790\n        base_name = os.path.basename(img_path)\n        name,ext = os.path.splitext(base_name)\n        if (ext != '.jpg') and (ext != '.jpeg') :\n            print('not a jpg image')\n            return\n\n        img_src = cv2.imread(img_path, 1)\n        # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\n        img_gray = cv2.cvtColor(img_src, cv2.COLOR_BGR2GRAY)\n        cascade = cv2.CascadeClassifier(cascade_path)\n\n        org_width = img_src.shape[1]\n        org_height = img_src.shape[0]\n        i = 0\n\n        for j in range(0,71):\n            # \u62e1\u5927\u753b\u50cf\u306e\u4f5c\u6210\n            big_img = np.zeros((org_height * 2, org_width * 2 ,3), np.uint8)\n            big_img[ceil(org_height/2.0):ceil(org_height/2.0*3.0), ceil(org_width/2.0):ceil(org_width/2.0*3.0)] = img_src\n\n            # \u753b\u50cf\u306e\u4e2d\u5fc3\u4f4d\u7f6e\n            center = tuple(np.array([big_img.shape[1] * 0.5, big_img.shape[0] * 0.5]))\n\n            # \u753b\u50cf\u30b5\u30a4\u30ba\u306e\u53d6\u5f97(\u6a2a, \u7e26)\n            size = tuple(np.array([big_img.shape[1], big_img.shape[0]]))\n\n            # \u56de\u8ee2\u3055\u305b\u305f\u3044\u89d2\u5ea6\n            angle = 5.0 * float(j)\n            # \u62e1\u5927\u6bd4\u7387\n            scale = 1.0\n\n            # \u56de\u8ee2\u5909\u63db\u884c\u5217\u306e\u7b97\u51fa\n            rotation_matrix = cv2.getRotationMatrix2D(center, angle, scale)\n\n            # \u30a2\u30d5\u30a3\u30f3\u5909\u63db\n            img_rot = cv2.warpAffine(big_img, rotation_matrix, size, flags=cv2.INTER_CUBIC)\n            rot_gray = cv2.cvtColor(img_rot, cv2.COLOR_BGR2GRAY)\n\n            #\u9854\u5224\u5b9a\n            faces  =  cascade.detectMultiScale(img_rot, scaleFactor=1.2, minNeighbors=2, minSize=(50, 50))\n            # \u9854\u304c\u3042\u3063\u305f\u5834\u5408\n            if len(faces) > 0:\n                for (x,y,w,h) in faces:\n                    face = img_rot[y:y+h, x:x+w]\n                    file_name =  name + \"_face_\" + str(i) + ext\n                    cv2.imwrite(temp_face_img_path + file_name, face )\n                    i += 1\n\n            else :\n                print('does not have any faces')\n\n        return \n\nif __name__ == '__main__':\n    classifier = classifyPhoto()\n    classifier.crop_faceo('image.jpg')\n```\n\n## \u7d50\u679c\n\n![\u56de\u8ee2\u4e0d\u5909.002.jpg](https://qiita-image-store.s3.amazonaws.com/0/50474/c1835052-eefb-d938-b747-97c20877e7c1.jpeg)\n\n* \u5168\u90e8\u306740\u679a\u307b\u3069\u691c\u51fa\n* \u308c\u306b\u3061\u3083\u3093\u304c8\u679a\u3001\u3042\u30fc\u308a\u3093\u304c9\u679a\u3001\u3082\u3082\u304b\u3068\u3057\u304a\u308a\u3093\u304c\uff11\u679a\u3001\u304b\u306a\u3053\u306f0\u679a\u3001\u305d\u306e\u4ed6\u9854\u30d1\u30fc\u30c4\u3084\u670d\u306a\u3069\u306e\u8aa4\u691c\u51fa\n\n\n## \u8003\u5bdf\n* \u5224\u5b9a\u679a\u6570\u304c\u5897\u3048\u305f\u5206\u3001\u8aa4\u691c\u51fa\u304c\u5897\u3048\u305f\n* \u30e1\u30f3\u30d0\u30fc\u306b\u3088\u3063\u3066\u504f\u308a\u304c\u3042\u308b\u3002\u5358\u306b\u50be\u304d\u3060\u3051\u3067\u306a\u304f\u3001\u9854\u8a8d\u8b58\u306e\u7cbe\u5ea6\u304c\u60aa\u3044\u3060\u3051\u306e\u53ef\u80fd\u6027\u3082\u3002\n* \u8907\u6570\u679a\u691c\u51fa\u3055\u308c\u305f\u30e1\u30f3\u30d0\u30fc\u306f\u3001\u5ea7\u6a19\u5909\u63db\uff0b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308c\u3070\u307e\u3068\u3081\u3089\u308c\u305d\u3046\n* 5\u5ea6\u523b\u307f\u306b\u305d\u308c\u305e\u308c\u8a08\u7b97\u3057\u3066\u308b\u306e\u3067\u3001**\u8a08\u7b97\u91cf\u304c72\u500d**\u306b\u306a\u308b\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308c\u3070\u3082\u3063\u3068\u30de\u30b7\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u591a\u5206\u4f7f\u3048\u307e\u305b\u3093\u3002\n", "tags": ["OpenCV", "Python"]}