{"tags": ["DeepLearning", "Theano", "CNN", "Python", "\u6a5f\u68b0\u5b66\u7fd2"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u6700\u8fd1chainer\u3068caffe\u306b\u7d9a\u3044\u3066\u7b2c\uff13\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066Theano\u3092\u4f7f\u3044\u59cb\u3081\u305f\u306e\u3067\u3001Theano\u3092\u4f7f\u3063\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(CNN)\u306e\u5b9f\u88c5\u306e\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002Theano\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306f\u4ed6\u306e\u8a18\u4e8b\u3084\u516c\u5f0ftutorial\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u672c\u8a18\u4e8b\u306fdeep learning tutorial\u306eDeep Convolutional Network\u306b\u6cbf\u3063\u3066\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u30b3\u30fc\u30c9\u306f\u89e3\u8aac\u7528\u306b\u5909\u66f4\u3057\u3066\u3042\u308a\u307e\u3059\u304c\u5927\u307e\u304b\u306a\u6d41\u308c\u306f\u540c\u3058\u3067\u3059\u3002\n\u3042\u304f\u307e\u3067Theano\u3092\u4f7f\u3063\u305fCNN\u306e\u5b9f\u88c5\u306e\u89e3\u8aac\u3067Deep Learning\u81ea\u4f53\u306e\u89e3\u8aac\u3084theano\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306e\u89e3\u8aac\u306f\u306a\u3044\u306e\u3067\u305d\u306e\u8fba\u308a\u306f\u4ed6\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u5b9f\u88c5\u306e\u89e3\u8aac\u3068\u8a00\u3063\u3066\u3082Theano\u3092\u4f7f\u3044\u59cb\u3081\u3066\u6570\u65e5\u3001\u672c\u4eba\u306e\u5b9f\u88c5\u80fd\u529b\u306f\u305d\u3093\u306a\u306b\u9ad8\u304f\u306a\u3044\u4e0a\u82f1\u8a9e\u3082\u5f97\u610f\u3067\u306f\u306a\u3044\u306e\u3067(\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u82f1\u8a9e)\u81f3\u3089\u306a\u3044\u70b9\u3082\u591a\u3005\u3042\u308a\u307e\u3059\u3002(\u672c\u4eba\u306e\u5099\u5fd8\u9332\u611f\u899a\u306e\u305f\u3081\u305d\u3053\u307e\u3067\u671f\u5f85\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u7b11)\n\nLeNet\ndeep learning tutorial\u306b\u6cbf\u3063\u3066LeNet\u3092\u30d9\u30fc\u30b9\u306bminst\u306e\u624b\u66f8\u304d\u6587\u5b57\u8a8d\u8b58\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002LeNet\u306f\u7573\u307f\u8fbc\u307f\u5c64\u00d72\u3068\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u00d72\u3001\u5168\u7d50\u5408\u5c64\u304b\u3089\u306a\u308b\u57fa\u672c\u7684\u306aCNN\u3067\u3059\u3002\u672c\u8a18\u4e8b\u3067\u306f\u6d3b\u6027\u5316\u95a2\u6570\u306a\u3069\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u672c\u6765\u306e\u3082\u306e\u3068\u306f\u5909\u3048\u3066\u307e\u3059\u304c\u57fa\u672c\u7684\u306a\u69cb\u9020\u306f\u540c\u3058\u3067\u3059\u3002(\u8a73\u3057\u3044LeNet\u306e\u89e3\u8aac\u306f\u5143\u8ad6\u6587\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044)\n\n\u5b9f\u88c5\n\u4e0a\u8a18\u306eLeNet\u306b\u57fa\u3065\u3044\u305fCNN\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u524d\u63d0\u3068\u3057\u3066\u4ee5\u4e0b\u3092import\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\nimport theano\nimport theano.tensor as T\nimport numpy as np\n\n\n\u7573\u307f\u8fbc\u307f\u5c64\n\u307e\u305a\u306f\u3058\u3081\u306b\u7573\u307f\u8fbc\u307f\u5c64\u306b\u3064\u3044\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002Theano\u3067\u306f\u7573\u307f\u8fbc\u307f\u3092\u884c\u3046\u30b7\u30f3\u30dc\u30eb\u3068\u3057\u3066\u3001T.nnet.conv.conv2d\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002Theano\u306f\u91cd\u307f\u3084\u30d0\u30a4\u30a2\u30b9\u3092\u81ea\u5206\u3067\u8a18\u8ff0\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081numpy\u3068theano.shared\u3092\u7528\u3044\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u306f\u5b66\u7fd2\u306b\u3088\u3063\u3066\u66f4\u65b0\u3055\u308c\u3066\u3044\u304f\u5024\u3067\u3042\u308b\u305f\u3081\u3001theano.shared\u3092\u7528\u3044\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u7573\u307f\u8fbc\u307f\u5c64\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3073\u5c64\u3092\u8a18\u8ff0\u3059\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067class\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u7573\u307f\u8fbc\u307f\u5c64class\u306e\u5b9f\u88c5\u4f8b\u3068\u306a\u308a\u307e\u3059\u3002\nclass Conv2d(object):\n    def __init__(self, input, out_c, in_c, k_size)\n        self._input = input #\u5165\u529b\u3055\u308c\u308b\u30b7\u30f3\u30dc\u30eb\n        self._out_c = out_c #\u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u6570\n        self._in_c = in_c #\u5165\u529b\u30c1\u30e3\u30cd\u30eb\u6570\n        w_shp = (out_c, in_c, k_size, k_size) #\u91cd\u307f\u306eshape\n        w_bound = np.sqrt(6. / (in_c * k_size * k_size + \\\n                        out_c * k_size * k_size)) #\u91cd\u307f\u306e\u5236\u7d04\n        #\u91cd\u307f\u306e\u5b9a\u7fa9\n        self.W = theano.shared( np.asarray(\n                        np.random.uniform( #\u4e71\u6570\u3067\u521d\u671f\u5316\n                            low=-w_bound,\n                            high=w_bound,\n                            size=w_shp),\n                        dtype=self._intype.dtype), name ='W', borrow=True)\n        b_shp = out_c, #\u30d0\u30a4\u30a2\u30b9\u306eshape\n        #\u30d0\u30a4\u30a2\u30b9\u306e\u5b9a\u7fa9(\u30bc\u30ed\u3067\u521d\u671f\u5316)\n        self.b = theano.shared(np.zeros(b_shp,\n                        dtype=self._input.dtype), name ='b', borrow=True)\n        #\u7573\u307f\u8fbc\u307f\u306e\u30b7\u30f3\u30dc\u30eb\u306e\u5b9a\u7fa9\n        self.output = T.nnet.conv.conv2d(self._input, self.W) \\\n                        + self.b.dimshuffle('x', 0, 'x', 'x')\n        #\u66f4\u65b0\u3055\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4fdd\u5b58\n        self.params = [self.W, self.b]\n\ndimshuffle\u306f\u30d0\u30a4\u30a2\u30b9\u9805\u306e\u6b21\u5143\u3092vector\u304b\u3089T.nnet.conv.conv2d\u306e\u51fa\u529b\u3067\u3042\u308btensor4\u306b\u5408\u308f\u305b\u308b\u64cd\u4f5c\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u611f\u899a\u7684\u306b\u306freshape\u3068np.transpose\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u611f\u3058\u3067\u3059\u3002('x', 0, 'x', 'x')\u306e\u5834\u5408self.b\u306eshape\u306f\uff081, self.b.shape[0], 1, 1\uff09\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6d3b\u6027\u5316\u95a2\u6570\n\u672c\u6765LeNet\u306e\u6d3b\u6027\u5316\u95a2\u6570\u306ftanh\u3067\u3059\u304c\u3001\u4eca\u56de\u306frelu\u3092\u7528\u3044\u307e\u3059\u3002relu\u306fmax(0, x)\u3068\u8a00\u3046\u7c21\u5358\u306a\u6570\u5f0f\u3067\u8868\u3055\u308c\u308b\u6d3b\u6027\u5316\u95a2\u6570\u3067\u3059\u3002Theano\u306b\u306frelu\u306e\u30b7\u30f3\u30dc\u30eb\u306f\u306a\u3044\u305f\u3081\u81ea\u5206\u3067\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Theano\u306eT.max()\u30b7\u30f3\u30dc\u30eb\u306f\u5b9f\u6570\u5024\u3092\u4e2d\u306b\u5165\u308c\u3089\u308c\u306a\u3044(\u3084\u308a\u65b9\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c)\u306e\u3068\u30b7\u30f3\u30dc\u30eb\u306b\u5bfe\u3057if\u6587\u3092\u4f7f\u3048\u306a\u3044\u305f\u3081\u5c11\u3057\u7279\u6b8a\u306a\u66f8\u304d\u65b9\u3092\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u304crelu\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\nclass relu(object):\n    def __init__(self, input):\n        self._input = input\n        self.output  = T.switch(self._input < 0, 0, self._input)\n\n\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306fTheano\u306b\u7f6e\u3044\u3066theano.tensor.signal.pool.pool_2d\u306b\u30b7\u30f3\u30dc\u30eb\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306f\u7573\u307f\u8fbc\u307f\u305d\u3046\u3068\u9055\u3044\u91cd\u307f\u3084\u30d0\u30a4\u30a2\u30b9\u3068\u3044\u3063\u305f\u66f4\u65b0\u3092\u884c\u3046\u30b7\u30f3\u30dc\u30eb\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059\u3002\u4ee5\u4e0b\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\nfrom theano.tensor.signal import pool\n\nclass Pool2d(object):\n    def __init__(self, input, k_size, st, pad=0, mode='max'):\n        self._input = input\n        #\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306e\u30b7\u30f3\u30dc\u30eb\u306e\u5b9a\u7fa9\n        self.output = pool.pool_2d(self._input, \n                            (k_size, k_size), #\u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\n                            ignore_border=True, #\u7aef\u306e\u51e6\u7406(\u57fa\u672c\u7684\u306bTrue\u3067ok,\u8a73\u3057\u304f\u306f\u516c\u5f0fDocument\u3078)\n                            st=(st, st), #\u30b9\u30c8\u30e9\u30a4\u30c9\n                            padding=(pad, pad), #\u30d1\u30c7\u30a3\u30f3\u30b0\n                            mode=mode) #\u30d7\u30fc\u30ea\u30f3\u30b0\u306e\u7a2e\u985e('max', 'sum', 'average_inc_pad', 'average_exc_pad')\n\n\n\u5168\u7d50\u5408\u5c64\n\u5168\u7d50\u5408\u5c64\u306ftheano\u3067\u30b7\u30f3\u30dc\u30eb\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u81ea\u5206\u3067\u8a18\u8ff0\u3057\u307e\u304c\u3001\u884c\u5217\u306e\u5185\u7a4d\u8a08\u7b97\u3067\u8868\u73fe\u3067\u304d\u3001\u5185\u7a4d\u306e\u30b7\u30f3\u30dc\u30eb\u304cT.dot()\u3067\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u305f\u3081\u7279\u306b\u96e3\u3057\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u7573\u307f\u8fbc\u307f\u5c64\u540c\u69d8\u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u304c\u3042\u308b\u305f\u3081\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3092\u884c\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u5168\u7d50\u5408\u5c64\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\nclass FullyConnect(object):\n    def __init__(self, input, inunit, outunit):\n        self._input = input\n        #\u91cd\u307f\u306e\u5b9a\u7fa9\n        W = np.asarray(\n            np.random.uniform(\n            low=-np.sqrt(6. / (inunit + outunit)),\n            high=np.sqrt(6. / (inunit + outunit)),\n            size=(inunit, outunit)\n            ),\n            dtype=theano.config.floatX)\n        self.W = theano.shared(value=W, name='W', borrow=True)\n        #\u30d0\u30a4\u30a2\u30b9\u306e\u5b9a\u7fa9\n        b = np.zeros((outunit,), dtype=theano.config.floatX) #\u30bc\u30ed\u3067\u521d\u671f\u5316\n        self.b = theano.shared(value=b, name='b', borrow=True)\n        #\u5168\u7d50\u5408\u5c64\u306e\u30b7\u30f3\u30dc\u30eb\u306e\u5b9a\u7fa9\n        self.output = T.dot(self._input, self.W) + self.b\n        #\u66f4\u65b0\u3055\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4fdd\u5b58\n        self.params = [self.W, self.b]\n\n\n\u30ed\u30b9\u95a2\u6570\n\u30ed\u30b9\u95a2\u6570\u306fmnist\u306e10\u30af\u30e9\u30b9\u5206\u985e\u3092\u89e3\u304f\u305f\u3081softmax cross entropy\u3092\u7528\u3044\u307e\u3059\u3002softmax\u306e\u30b7\u30f3\u30dc\u30eb\u306fTheano\u3067\u306fT.nnet.softmax()\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\nclass softmax(object):\n    def __init__(self, input, y):\n        self._input = input\n        #softmax\u306e\u30b7\u30f3\u30dc\u30eb\u5b9a\u7fa9\n        self.output = nnet.softmax(self._input)\n        #cross entropy\u306e\u30b7\u30f3\u30dc\u30eb\u5b9a\u7fa9(\u6570\u5f0f\u7684\u306b\u306fsum\u3067\u3059\u304c\u3053\u3053\u3067\u306fmean\u3092\u7528\u3044\u307e\u3059)\n        self.cost = -T.mean(T.log(self.output)[T.arange(y.shape[0]), y])\n\ny\u306f\u6559\u5e2b\u30e9\u30d9\u30eb\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u8868\u3057\u307e\u3059\u3002[T.arange(y.shape[0]),y]\u306fT.mean\u3092\u884c\u3046\u969b\u306by[0]\u304b\u3089y[y.shape[0]-1]\u307e\u3067\u52a0\u7b97\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\nLeNet\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\u5404\u5c64\u306e\u5b9a\u7fa9\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u3053\u3053\u304b\u3089LeNet\u306e\u5b9f\u88c5\u306b\u79fb\u308a\u307e\u3059\u3002\u307e\u305a\u306fmnist\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u307e\u3059\u3002pkl\u30c7\u30fc\u30bf\u304chttp://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u3092\u9069\u5f53\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u3053\u3053\u304b\u3089train\u3068validation\u3068test\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u4f8b\u3002\nimport gzip\nimport cPickle\n\ndef shared_dataset(data_xy):\n    data_x, data_y = data_xy\n    set_x = theano.shared(np.asarray(data_x,\n                  dtype=theano.config.floatX).reshape(-1,1,28,28),\n                  borrow=True)\n    set_y = T.cast(theano.shared(np.asarray(data_y,\n                  dtype=theano.config.floatX), borrow=True), 'int32')\n    return set_x, set_y\n\nwith open('/path/to/mnist.pkl.gz', 'rb') as f:\n    train_set, valid_set, test_set = cPickle.load(f)\n\ntrain_set_x, train_set_y = shared_dataset(train_set)\nvalid_set_x, valid_set_y = shared_dataset(valid_set)\ntest_set_x, test_set_y = shared_dataset(test_set)\n\n\u3053\u3053\u3067\u306f\u5b9f\u88c5\u306e\u90fd\u5408\u4e0a\u30c7\u30fc\u30bf\u3092theano.shared\u306e\u30b7\u30f3\u30dc\u30eb\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5165\u529b\u306fnumpy\u306e\u914d\u5217\u3067\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u305f\u3060\u3001theano.shared\u3067\u5b9a\u7fa9\u3059\u308b\u3068\u5b9f\u88c5\u304c\u5e7e\u5206\u304b\u3059\u3063\u304d\u308a\u3057\u307e\u3059\u3002\n\u6b21\u306b\u5165\u529b\u30c7\u30fc\u30bf\u3068\u6559\u5e2b\u30e9\u30d9\u30eb\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u5165\u529b\u30c7\u30fc\u30bf\u306f(\u30d0\u30c3\u30c1\u6570, \u30c1\u30e3\u30cd\u30eb\u6570, \u7e26, \u6a2a)\u306e4\u6b21\u5143\u306a\u306e\u3067T.tensor4()\u3068\u306a\u308a\u6559\u5e2b\u30e9\u30d9\u30eb\u306f1\u6b21\u5143\u306e\u6574\u6570\u5024\u306e\u30d9\u30af\u30c8\u30eb\u306a\u306e\u3067T.ivector()\u306b\u306a\u308a\u307e\u3059\u3002\nx = T.tensor4() #\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30b7\u30f3\u30dc\u30eb\ny = T.ivector() #\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u30b7\u30f3\u30dc\u30eb\n\n\n\u5c64\u306e\u5b9a\u7fa9\n\u3053\u3053\u304b\u3089\u5404\u5c64\u306e\u5b9a\u7fa9\u306b\u306a\u308a\u307e\u3059\u3002\u4e0a\u3067\u305d\u308c\u305e\u308c\u306eclass\u3092\u4f5c\u6210\u3057\u3066\u3042\u308b\u306e\u3067\u3044\u304f\u3089\u304b\u697d\u306b\u66f8\u3051\u307e\u3059\u3002\nconv1 = Conv2d(x, 20, 1, 5) #x\u3092\u5165\u529b\u3068\u3057\u3001\u51fa\u529b\u304c20\u30c1\u30e3\u30cd\u30eb\u3001\u5165\u529b\u304c1\u30c1\u30e3\u30cd\u30eb\u3001\u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba5\nrelu1 = relu(conv1.output) #conv1\u306e\u51fa\u529b\u3092\u5165\u529b\u3068\u3059\u308b\npool1 = Pool2d(relu1.output, 2, 2) #relu1\u306e\u51fa\u529b\u3092\u5165\u529b\u3068\u3057, \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba2\u3001\u30b9\u30c8\u30e9\u30a4\u30c92\n\nconv2 = Conv2d(pool1.output, 50, 20, 5) #poo1\u306e\u51fa\u529b\u3092\u5165\u529b\u3068\u3057\u3001\u51fa\u529b\u304c50\u30c1\u30e3\u30cd\u30eb\u3001\u5165\u529b\u304c20\u30c1\u30e3\u30cd\u30eb\u3001\u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba5\nrelu2 = relu(conv2.output) #conv2\u306e\u51fa\u529b\u3092\u5165\u529b\u3068\u3059\u308b\npool2 = Pool2d(relu2.output, 2, 2) #relu2\u306e\u51fa\u529b\u3092\u5165\u529b\u3068\u3057, \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba2\u3001\u30b9\u30c8\u30e9\u30a4\u30c92\n\nfc1_input = pool2.output.flatten(2) #pool2\u306e\u51fa\u529b\u306e\u30b7\u30f3\u30dc\u30eb\u306fT.tensor4\u306e\u305f\u3081\u3001flatten()\u3092\u4f7f\u3063\u3066\u5168\u7d50\u5408\u5c64\u306e\u5165\u529b\u306e\u30b7\u30f3\u30dc\u30eb\u306b\u5408\u308f\u305b\u308b\nfc1 = FullyConnect(fc1_input, 50*4*4, 500) #\u5165\u529b\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c50*4*4(\u30c1\u30e3\u30cd\u30eb\u6570*\u7e26*\u6a2a)\u3001\u51fa\u529b\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c500\nrelu3 = relu(fc1.output)\nfc2 = FullyConnect(relu3.output, 500, 10) #\u5165\u529b\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c500\u3001\u51fa\u529b\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c10(10\u30af\u30e9\u30b9\u5206\u985e\u306e\u305f\u3081)\nloss = softmax(fc2.output, y)\n\n\u3053\u308c\u3067LeNet\u306e\u5b9a\u7fa9\u304c\u66f8\u3051\u307e\u3057\u305f\u3002\u5404\u5c64\u306e\u51fa\u529b\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u6b21\u306e\u5c64\u306e\u5165\u529b\u306e\u30b7\u30f3\u30dc\u30eb\u306b\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u5168\u3066\u306e\u30b7\u30f3\u30dc\u30eb\u304c\u7e4b\u304c\u308a\u3001\u52fe\u914d\u8a08\u7b97\u3092\u4e00\u5ea6\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3059\u306a\u308f\u3061\u3001\n\u30fb\u30fb\u30fbT.nnet.conv.conv2d(pool.pool2d(T.nnet.conv.conv2d()))\u30fb\u30fb\u30fb\n\u306e\u3088\u3046\u306a\u9577\u3044\u30b7\u30f3\u30dc\u30eb\u304c\u5b9a\u7fa9\u3055\u308c\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081T.grad()\u306b\u6700\u7d42\u7684\u306a\u30b7\u30f3\u30dc\u30eb(\u4eca\u56de\u306floss.cost)\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u7c21\u5358\u306b\u5168\u3066\u306e\u5c64\u306e\u52fe\u914d\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5b66\u7fd2\n\u6700\u5f8c\u306b\u5b66\u7fd2\u3068validation data\u3001test data\u306b\u3088\u308b\u8a55\u4fa1\u306efunction\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u3053\u307e\u3067\u306f\u30b7\u30f3\u30dc\u30eb\u3092\u5b9a\u7fa9\u3057\u305f\u3060\u3051\u306a\u306e\u3067\u5b9f\u969b\u306e\u5024\u3092\u5165\u529b\u3057\u3066\u5b66\u7fd2\u306a\u3069\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u30b7\u30f3\u30dc\u30eb\u3092theano.function\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\u3092\u884c\u3046\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5b66\u7fd2\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306fSGD\u3092\u7528\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\u3092\u884c\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u5b66\u7fd2\u306etheano.function\u306e\u5b9f\u88c5\u4f8b\u306b\u306a\u308a\u307e\u3059\u3002\n#\u5b66\u7fd2\u3055\u308c\u308b\u5168\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ea\u30b9\u30c8\u306b\u307e\u3068\u3081\u308b\nparams = conv1.params + conv2.params + fc1.params + fc2.params \n#\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5fae\u5206\u3092\u8a08\u7b97\ngrads = T.grad(loss.cost, params)\n#\u5b66\u7fd2\u7387\u306e\u5b9a\u7fa9\nlearning_rate = 0.001\n#\u66f4\u65b0\u5f0f\u3092\u5b9a\u7fa9\nupdates = [(param_i, param_i - learning_rate * grad_i) for param_i, grad_i in zip(params, grads)]\n#\u5b66\u7fd2\u306etheano.function\u3092\u5b9a\u7fa9\nindex = T.lscalar()\nbatch_size = 128\ntrain_model = theano.function(inputs=[index], #\u5165\u529b\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u306eindex\n                       outputs=loss.cost, #\u51fa\u529b\u306floss.cost\n                       updates=updates, #\u66f4\u65b0\u5f0f\n                       givens={\n                            x: train_set_x[index: index + batch_size], #\u5165\u529b\u306ex\u306btrain_set_x\u3092\u4e0e\u3048\u308b\n                            y: train_set_y[index: index + batch_size] #\u5165\u529b\u306ey\u306btrain_set_y\u3092\u4e0e\u3048\u308b\n                       })\n\n\u307e\u305a\u3001params\u306f\u5404\u5c64\u306e\u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u306e\u30b7\u30f3\u30dc\u30eb\u304b\u3089\u306a\u308b\u30ea\u30b9\u30c8\u306b\u306a\u308a\u307e\u3059(\u30ea\u30b9\u30c8\u540c\u58eb\u306e\u8db3\u3057\u7b97\u3067\u3042\u308b\u305f\u3081)\u3002T.grads()\u306f\u5909\u6570\u3092\u30ea\u30b9\u30c8\u3067\u4e0e\u3048\u308b\u3068\u305d\u308c\u305e\u308c\u306e\u5909\u6570\u3067\u5fae\u5206\u3057\u305f\u30b7\u30f3\u30dc\u30eb\u3092\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\u305f\u3081\u3001grads\u306floss.cost\u3092\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5fae\u5206\u3057\u305f\u30b7\u30f3\u30dc\u30eb\u3092\u6301\u3064\u30ea\u30b9\u30c8\u306b\u306a\u3063\u3066\u307e\u3059\u3002updates\u3082\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\u5f0f\u306e\u30ea\u30b9\u30c8\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b21\u306btrain_model\u306e\u5b9a\u7fa9\u3067\u3059\u304c\u3001\u524d\u8ff0\u3057\u305f\u3088\u3046\u306bconv1\u304b\u3089loss.cost\u307e\u3067\u304c\u6700\u521d\u306b\u5b9a\u7fa9\u3057\u305fx\u3068y\u3092\u5165\u529b\u3068\u3059\u308b\u4e00\u3064\u306e\u30b7\u30f3\u30dc\u30eb\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002train_model\u5185\u3067x\u306ftrain_set_x\u3092y\u304ctrain_set_y\u3092\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002train_set_x\u3068train_set_y\u306findex\u3092\u53d7\u3051\u53d6\u3063\u3066\u53d7\u3051\u53d6\u3063\u305findex\u304b\u3089batch_size\u5206\u306e\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u70batrain_model\u306b\u306f\u5f15\u6570\u3068\u3057\u3066index\u306e\u307f\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001index\u304b\u3089index + batch_size\u307e\u3067\u306etrain_set_x\u3068train_set_y\u306e\u5024\u3092x, y\u306b\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002\n\u3042\u3068\u306f\u3053\u306etrain_model\u3092for\u6587\u306a\u3069\u3067\u7e70\u308a\u8fd4\u3057\u547c\u3076\u3053\u3068\u3067\u5b66\u7fd2\u304c\u3067\u304d\u307e\u3059\u3002\nfor i in range(0, train_set_y.get_value().shape[0], batch_size):\n    train_model(i)\n\n\n\u8a55\u4fa1\n\u6700\u5f8c\u306b\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u8a55\u4fa1\u3092\u884c\u3046theano.function\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u8a55\u4fa1\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\u3092\u884c\u308f\u306a\u3044\u305f\u3081\u51fa\u529b\u306ferror rate\u306b\u3057\u307e\u3059\u3002loss.output\u306bsoftmax\u306e\u30b7\u30f3\u30dc\u30eb\u304c\u3042\u308b\u305f\u3081\u3053\u308c\u3092\u4f7f\u3063\u3066error rate\u3092\u7b97\u51fa\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3001error rate\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u4f7f\u3063\u3066\u8a55\u4fa1\u3092\u884c\u3046theano.function\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\npred = T.argmax(loss.output, axis=1) #\u4e88\u6e2c\u3055\u308c\u305f\u78ba\u7387\u304c\u6700\u3082\u9ad8\u3044\u30af\u30e9\u30b9\u3092\u8fd4\u3059\nerror = T.mean(T.neq(pred,y)) #\u4e88\u6e2c\u3055\u308c\u305f\u30af\u30e9\u30b9\u3092\u6b63\u89e3\u30e9\u30d9\u30eb\u3068\u6bd4\u8f03\ntest_model = theano.function(inputs=[index],\n                             outputs=error,\n                             givens={\n                             x: test_set_x[index: index + batch_size],\n                             y: test_set_y[index: index + batch_size]\n                             })\n\nval_model = theano.function(inputs=[index],\n                             outputs=error,\n                             givens={\n                             x: test_set_x[index: index + batch_size],\n                             y: test_set_y[index: index + batch_size]\n                             })\n\n\u3053\u308c\u3067validation\u3068test data\u7528\u306e\u8a55\u4fa1function\u304c\u5b9a\u7fa9\u3067\u304d\u305f\u306e\u3067train_model\u3068\u540c\u69d8\u306bfor\u6587\u3092\u4f7f\u3046\u3053\u3068\u3067\u8a55\u4fa1\u304c\u3067\u304d\u307e\u3059\u3002\ntest_losses = [test_model(i)\n               for i in range(0, test_set_y.get_value().shape[0], batch_size] #\u30d0\u30c3\u30c1\u3054\u3068\u306e\u5e73\u5747\u306eloss\u3092\u30ea\u30b9\u30c8\u306b\u4fdd\u5b58\nmean_test_loss = np.mean(test_losses) #\u5168\u4f53\u306e\u5e73\u5747\u3092\u7b97\u51fa\n\n\u4ee5\u4e0a\u3067theano\u3092\u7528\u3044\u305fCNN\u306e\u5b66\u7fd2\u3001\u8a55\u4fa1\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u307e\u3057\u305f\u3002\u5b9f\u969b\u306e\u5b66\u7fd2\u7d50\u679c\u306f\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u5168\u3066\u3064\u306a\u3052\u3066\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044(\u81ea\u5206\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3092Quiita\u7528\u306b\u6240\u3005\u5909\u3048\u3066\u30c7\u30d0\u30c3\u30b0\u3057\u306a\u3044\u307e\u307e\u66f8\u3044\u305f\u306e\u3067\u52d5\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u7b11)\u3002\u4e0d\u660e\u306a\u70b9\u3084\u30b3\u30fc\u30c9\u3001\u89e3\u8aac\u306b\u8aa4\u308a\u304c\u3042\u308b\u5834\u5408\u306f\u30b3\u30e1\u30f3\u30c8\u3067\u77e5\u3089\u305b\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u307e\u3068\u3081\nTheano\u3092\u4f7f\u3063\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9f\u88c5\u306e\u89e3\u8aac\u3092\u3057\u307e\u3057\u305f\u3002\u4e00\u898b\u30b3\u30fc\u30c9\u304c\u9577\u304f\u9762\u5012\u306b\u601d\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u81ea\u5206\u306e\u6271\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u5c64\u306e\u30af\u30e9\u30b9\u3092\u4e00\u5ea6\u5b9a\u7fa9\u3057\u3066\u3057\u307e\u3048\u3070\u3042\u3068\u306f\u697d\u306b\u66f8\u3051\u307e\u3059\u3002\u81ea\u5206\u3067\u8272\u3005\u3068\u5b9a\u7fa9\u3067\u304d\u308b\u306e\u304cTheano\u306e\u5229\u70b9\u3067\u3059\u306d(\u305d\u306e\u5206\u9762\u5012\u3067\u3059\u304c)\u3002LeNet\u4ee5\u5916\u306e\u5b9f\u88c5\u306f\u5c64\u306e\u5b9a\u7fa9\u306e\u90e8\u5206\u3092\u5909\u66f4\u3059\u308c\u3070\u69d8\u3005\u306a\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u30ed\u30b9\u95a2\u6570\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\u624b\u6cd5\u3082\u30b7\u30f3\u30dc\u30eb\u3092\u5b9a\u7fa9\u3059\u308c\u3070\u81ea\u7531\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u3053\u308c\u304b\u3089Theano\u3092\u4f7f\u304a\u3046\u3068\u3057\u3066\u3044\u308b\u4eba\u306e\u5f79\u306b\u7acb\u3066\u3070\u5e78\u3044\u3067\u3059\u3002\n#\u306f\u3058\u3081\u306b\n\u6700\u8fd1chainer\u3068caffe\u306b\u7d9a\u3044\u3066\u7b2c\uff13\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066Theano\u3092\u4f7f\u3044\u59cb\u3081\u305f\u306e\u3067\u3001Theano\u3092\u4f7f\u3063\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af(CNN)\u306e\u5b9f\u88c5\u306e\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002Theano\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306f[\u4ed6\u306e\u8a18\u4e8b](http://qiita.com/mokemokechicken/items/3fbf6af714c1f66f99e9)\u3084[\u516c\u5f0ftutorial](http://deeplearning.net/software/theano/tutorial/ )\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u672c\u8a18\u4e8b\u306f[deep learning tutorial\u306eDeep Convolutional Network] (http://deeplearning.net/tutorial/lenet.html#lenet )\u306b\u6cbf\u3063\u3066\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u30b3\u30fc\u30c9\u306f\u89e3\u8aac\u7528\u306b\u5909\u66f4\u3057\u3066\u3042\u308a\u307e\u3059\u304c\u5927\u307e\u304b\u306a\u6d41\u308c\u306f\u540c\u3058\u3067\u3059\u3002\n\u3042\u304f\u307e\u3067Theano\u3092\u4f7f\u3063\u305fCNN\u306e\u5b9f\u88c5\u306e\u89e3\u8aac\u3067Deep Learning\u81ea\u4f53\u306e\u89e3\u8aac\u3084theano\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306e\u89e3\u8aac\u306f\u306a\u3044\u306e\u3067\u305d\u306e\u8fba\u308a\u306f\u4ed6\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u307e\u305f\u5b9f\u88c5\u306e\u89e3\u8aac\u3068\u8a00\u3063\u3066\u3082Theano\u3092\u4f7f\u3044\u59cb\u3081\u3066\u6570\u65e5\u3001\u672c\u4eba\u306e\u5b9f\u88c5\u80fd\u529b\u306f\u305d\u3093\u306a\u306b\u9ad8\u304f\u306a\u3044\u4e0a\u82f1\u8a9e\u3082\u5f97\u610f\u3067\u306f\u306a\u3044\u306e\u3067(\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u82f1\u8a9e)\u81f3\u3089\u306a\u3044\u70b9\u3082\u591a\u3005\u3042\u308a\u307e\u3059\u3002(\u672c\u4eba\u306e\u5099\u5fd8\u9332\u611f\u899a\u306e\u305f\u3081\u305d\u3053\u307e\u3067\u671f\u5f85\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u7b11)\n\n#LeNet\ndeep learning tutorial\u306b\u6cbf\u3063\u3066LeNet\u3092\u30d9\u30fc\u30b9\u306bminst\u306e\u624b\u66f8\u304d\u6587\u5b57\u8a8d\u8b58\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002LeNet\u306f\u7573\u307f\u8fbc\u307f\u5c64\u00d72\u3068\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u00d72\u3001\u5168\u7d50\u5408\u5c64\u304b\u3089\u306a\u308b\u57fa\u672c\u7684\u306aCNN\u3067\u3059\u3002\u672c\u8a18\u4e8b\u3067\u306f\u6d3b\u6027\u5316\u95a2\u6570\u306a\u3069\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u672c\u6765\u306e\u3082\u306e\u3068\u306f\u5909\u3048\u3066\u307e\u3059\u304c\u57fa\u672c\u7684\u306a\u69cb\u9020\u306f\u540c\u3058\u3067\u3059\u3002(\u8a73\u3057\u3044LeNet\u306e\u89e3\u8aac\u306f\u5143\u8ad6\u6587\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044)\n\n#\u5b9f\u88c5\n\u4e0a\u8a18\u306eLeNet\u306b\u57fa\u3065\u3044\u305fCNN\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u524d\u63d0\u3068\u3057\u3066\u4ee5\u4e0b\u3092import\u3057\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\n\n\n```py\nimport theano\nimport theano.tensor as T\nimport numpy as np\n```\n\n\n\n\n###\u7573\u307f\u8fbc\u307f\u5c64\n\n\u307e\u305a\u306f\u3058\u3081\u306b\u7573\u307f\u8fbc\u307f\u5c64\u306b\u3064\u3044\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002Theano\u3067\u306f\u7573\u307f\u8fbc\u307f\u3092\u884c\u3046\u30b7\u30f3\u30dc\u30eb\u3068\u3057\u3066\u3001T.nnet.conv.conv2d\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002Theano\u306f\u91cd\u307f\u3084\u30d0\u30a4\u30a2\u30b9\u3092\u81ea\u5206\u3067\u8a18\u8ff0\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081numpy\u3068theano.shared\u3092\u7528\u3044\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002\u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u306f\u5b66\u7fd2\u306b\u3088\u3063\u3066\u66f4\u65b0\u3055\u308c\u3066\u3044\u304f\u5024\u3067\u3042\u308b\u305f\u3081\u3001theano.shared\u3092\u7528\u3044\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u7573\u307f\u8fbc\u307f\u5c64\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3073\u5c64\u3092\u8a18\u8ff0\u3059\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067class\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u7573\u307f\u8fbc\u307f\u5c64class\u306e\u5b9f\u88c5\u4f8b\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n```py\nclass Conv2d(object):\n    def __init__(self, input, out_c, in_c, k_size)\n        self._input = input #\u5165\u529b\u3055\u308c\u308b\u30b7\u30f3\u30dc\u30eb\n        self._out_c = out_c #\u51fa\u529b\u30c1\u30e3\u30cd\u30eb\u6570\n        self._in_c = in_c #\u5165\u529b\u30c1\u30e3\u30cd\u30eb\u6570\n        w_shp = (out_c, in_c, k_size, k_size) #\u91cd\u307f\u306eshape\n        w_bound = np.sqrt(6. / (in_c * k_size * k_size + \\\n                        out_c * k_size * k_size)) #\u91cd\u307f\u306e\u5236\u7d04\n        #\u91cd\u307f\u306e\u5b9a\u7fa9\n        self.W = theano.shared( np.asarray(\n                        np.random.uniform( #\u4e71\u6570\u3067\u521d\u671f\u5316\n                            low=-w_bound,\n                            high=w_bound,\n                            size=w_shp),\n                        dtype=self._intype.dtype), name ='W', borrow=True)\n        b_shp = out_c, #\u30d0\u30a4\u30a2\u30b9\u306eshape\n        #\u30d0\u30a4\u30a2\u30b9\u306e\u5b9a\u7fa9(\u30bc\u30ed\u3067\u521d\u671f\u5316)\n        self.b = theano.shared(np.zeros(b_shp,\n                        dtype=self._input.dtype), name ='b', borrow=True)\n        #\u7573\u307f\u8fbc\u307f\u306e\u30b7\u30f3\u30dc\u30eb\u306e\u5b9a\u7fa9\n        self.output = T.nnet.conv.conv2d(self._input, self.W) \\\n                        + self.b.dimshuffle('x', 0, 'x', 'x')\n        #\u66f4\u65b0\u3055\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4fdd\u5b58\n        self.params = [self.W, self.b]\n```\ndimshuffle\u306f\u30d0\u30a4\u30a2\u30b9\u9805\u306e\u6b21\u5143\u3092vector\u304b\u3089T.nnet.conv.conv2d\u306e\u51fa\u529b\u3067\u3042\u308btensor4\u306b\u5408\u308f\u305b\u308b\u64cd\u4f5c\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u611f\u899a\u7684\u306b\u306freshape\u3068np.transpose\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u611f\u3058\u3067\u3059\u3002('x', 0, 'x', 'x')\u306e\u5834\u5408self.b\u306eshape\u306f\uff081, self.b.shape[0], 1, 1\uff09\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n###\u6d3b\u6027\u5316\u95a2\u6570\n\n\u672c\u6765LeNet\u306e\u6d3b\u6027\u5316\u95a2\u6570\u306ftanh\u3067\u3059\u304c\u3001\u4eca\u56de\u306frelu\u3092\u7528\u3044\u307e\u3059\u3002relu\u306fmax(0, x)\u3068\u8a00\u3046\u7c21\u5358\u306a\u6570\u5f0f\u3067\u8868\u3055\u308c\u308b\u6d3b\u6027\u5316\u95a2\u6570\u3067\u3059\u3002Theano\u306b\u306frelu\u306e\u30b7\u30f3\u30dc\u30eb\u306f\u306a\u3044\u305f\u3081\u81ea\u5206\u3067\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Theano\u306eT.max()\u30b7\u30f3\u30dc\u30eb\u306f\u5b9f\u6570\u5024\u3092\u4e2d\u306b\u5165\u308c\u3089\u308c\u306a\u3044(\u3084\u308a\u65b9\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c)\u306e\u3068\u30b7\u30f3\u30dc\u30eb\u306b\u5bfe\u3057if\u6587\u3092\u4f7f\u3048\u306a\u3044\u305f\u3081\u5c11\u3057\u7279\u6b8a\u306a\u66f8\u304d\u65b9\u3092\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u304crelu\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\n```py\nclass relu(object):\n    def __init__(self, input):\n        self._input = input\n        self.output  = T.switch(self._input < 0, 0, self._input)\n```\n\n###\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\n\n\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306fTheano\u306b\u7f6e\u3044\u3066theano.tensor.signal.pool.pool_2d\u306b\u30b7\u30f3\u30dc\u30eb\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306f\u7573\u307f\u8fbc\u307f\u305d\u3046\u3068\u9055\u3044\u91cd\u307f\u3084\u30d0\u30a4\u30a2\u30b9\u3068\u3044\u3063\u305f\u66f4\u65b0\u3092\u884c\u3046\u30b7\u30f3\u30dc\u30eb\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059\u3002\u4ee5\u4e0b\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\n```py\nfrom theano.tensor.signal import pool\n\nclass Pool2d(object):\n    def __init__(self, input, k_size, st, pad=0, mode='max'):\n        self._input = input\n        #\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u306e\u30b7\u30f3\u30dc\u30eb\u306e\u5b9a\u7fa9\n        self.output = pool.pool_2d(self._input, \n                            (k_size, k_size), #\u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\n                            ignore_border=True, #\u7aef\u306e\u51e6\u7406(\u57fa\u672c\u7684\u306bTrue\u3067ok,\u8a73\u3057\u304f\u306f\u516c\u5f0fDocument\u3078)\n                            st=(st, st), #\u30b9\u30c8\u30e9\u30a4\u30c9\n                            padding=(pad, pad), #\u30d1\u30c7\u30a3\u30f3\u30b0\n                            mode=mode) #\u30d7\u30fc\u30ea\u30f3\u30b0\u306e\u7a2e\u985e('max', 'sum', 'average_inc_pad', 'average_exc_pad')\n```\n###\u5168\u7d50\u5408\u5c64\n\n\u5168\u7d50\u5408\u5c64\u306ftheano\u3067\u30b7\u30f3\u30dc\u30eb\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u81ea\u5206\u3067\u8a18\u8ff0\u3057\u307e\u304c\u3001\u884c\u5217\u306e\u5185\u7a4d\u8a08\u7b97\u3067\u8868\u73fe\u3067\u304d\u3001\u5185\u7a4d\u306e\u30b7\u30f3\u30dc\u30eb\u304cT.dot()\u3067\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u305f\u3081\u7279\u306b\u96e3\u3057\u3044\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u7573\u307f\u8fbc\u307f\u5c64\u540c\u69d8\u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u304c\u3042\u308b\u305f\u3081\u305d\u308c\u305e\u308c\u5b9a\u7fa9\u3092\u884c\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u5168\u7d50\u5408\u5c64\u306e\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\n```py\nclass FullyConnect(object):\n    def __init__(self, input, inunit, outunit):\n        self._input = input\n        #\u91cd\u307f\u306e\u5b9a\u7fa9\n        W = np.asarray(\n            np.random.uniform(\n            low=-np.sqrt(6. / (inunit + outunit)),\n            high=np.sqrt(6. / (inunit + outunit)),\n            size=(inunit, outunit)\n            ),\n            dtype=theano.config.floatX)\n        self.W = theano.shared(value=W, name='W', borrow=True)\n        #\u30d0\u30a4\u30a2\u30b9\u306e\u5b9a\u7fa9\n        b = np.zeros((outunit,), dtype=theano.config.floatX) #\u30bc\u30ed\u3067\u521d\u671f\u5316\n        self.b = theano.shared(value=b, name='b', borrow=True)\n        #\u5168\u7d50\u5408\u5c64\u306e\u30b7\u30f3\u30dc\u30eb\u306e\u5b9a\u7fa9\n        self.output = T.dot(self._input, self.W) + self.b\n        #\u66f4\u65b0\u3055\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4fdd\u5b58\n        self.params = [self.W, self.b]\n```\n###\u30ed\u30b9\u95a2\u6570\n\n\u30ed\u30b9\u95a2\u6570\u306fmnist\u306e10\u30af\u30e9\u30b9\u5206\u985e\u3092\u89e3\u304f\u305f\u3081softmax cross entropy\u3092\u7528\u3044\u307e\u3059\u3002softmax\u306e\u30b7\u30f3\u30dc\u30eb\u306fTheano\u3067\u306fT.nnet.softmax()\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u5b9f\u88c5\u4f8b\u3067\u3059\u3002\n\n```py\nclass softmax(object):\n    def __init__(self, input, y):\n        self._input = input\n        #softmax\u306e\u30b7\u30f3\u30dc\u30eb\u5b9a\u7fa9\n        self.output = nnet.softmax(self._input)\n        #cross entropy\u306e\u30b7\u30f3\u30dc\u30eb\u5b9a\u7fa9(\u6570\u5f0f\u7684\u306b\u306fsum\u3067\u3059\u304c\u3053\u3053\u3067\u306fmean\u3092\u7528\u3044\u307e\u3059)\n        self.cost = -T.mean(T.log(self.output)[T.arange(y.shape[0]), y])\n```\ny\u306f\u6559\u5e2b\u30e9\u30d9\u30eb\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u8868\u3057\u307e\u3059\u3002[T.arange(y.shape[0]),y]\u306fT.mean\u3092\u884c\u3046\u969b\u306by[0]\u304b\u3089y[y.shape[0]-1]\u307e\u3067\u52a0\u7b97\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\n###LeNet\n####\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\u5404\u5c64\u306e\u5b9a\u7fa9\u304c\u7d42\u308f\u3063\u305f\u306e\u3067\u3053\u3053\u304b\u3089LeNet\u306e\u5b9f\u88c5\u306b\u79fb\u308a\u307e\u3059\u3002\u307e\u305a\u306fmnist\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u307e\u3059\u3002pkl\u30c7\u30fc\u30bf\u304chttp://www.iro.umontreal.ca/~lisa/deep/data/mnist/mnist.pkl.gz \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u3092\u9069\u5f53\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\u3053\u3053\u304b\u3089train\u3068validation\u3068test\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u4f8b\u3002\n\n```py\nimport gzip\nimport cPickle\n\ndef shared_dataset(data_xy):\n    data_x, data_y = data_xy\n    set_x = theano.shared(np.asarray(data_x,\n                  dtype=theano.config.floatX).reshape(-1,1,28,28),\n                  borrow=True)\n    set_y = T.cast(theano.shared(np.asarray(data_y,\n                  dtype=theano.config.floatX), borrow=True), 'int32')\n    return set_x, set_y\n\nwith open('/path/to/mnist.pkl.gz', 'rb') as f:\n    train_set, valid_set, test_set = cPickle.load(f)\n\ntrain_set_x, train_set_y = shared_dataset(train_set)\nvalid_set_x, valid_set_y = shared_dataset(valid_set)\ntest_set_x, test_set_y = shared_dataset(test_set)\n```\n\u3053\u3053\u3067\u306f\u5b9f\u88c5\u306e\u90fd\u5408\u4e0a\u30c7\u30fc\u30bf\u3092theano.shared\u306e\u30b7\u30f3\u30dc\u30eb\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5165\u529b\u306fnumpy\u306e\u914d\u5217\u3067\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u305f\u3060\u3001theano.shared\u3067\u5b9a\u7fa9\u3059\u308b\u3068\u5b9f\u88c5\u304c\u5e7e\u5206\u304b\u3059\u3063\u304d\u308a\u3057\u307e\u3059\u3002\n\u6b21\u306b\u5165\u529b\u30c7\u30fc\u30bf\u3068\u6559\u5e2b\u30e9\u30d9\u30eb\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u5165\u529b\u30c7\u30fc\u30bf\u306f(\u30d0\u30c3\u30c1\u6570, \u30c1\u30e3\u30cd\u30eb\u6570, \u7e26, \u6a2a)\u306e4\u6b21\u5143\u306a\u306e\u3067T.tensor4()\u3068\u306a\u308a\u6559\u5e2b\u30e9\u30d9\u30eb\u306f1\u6b21\u5143\u306e\u6574\u6570\u5024\u306e\u30d9\u30af\u30c8\u30eb\u306a\u306e\u3067T.ivector()\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py\nx = T.tensor4() #\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30b7\u30f3\u30dc\u30eb\ny = T.ivector() #\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u30b7\u30f3\u30dc\u30eb\n```\n####\u5c64\u306e\u5b9a\u7fa9\n\u3053\u3053\u304b\u3089\u5404\u5c64\u306e\u5b9a\u7fa9\u306b\u306a\u308a\u307e\u3059\u3002\u4e0a\u3067\u305d\u308c\u305e\u308c\u306eclass\u3092\u4f5c\u6210\u3057\u3066\u3042\u308b\u306e\u3067\u3044\u304f\u3089\u304b\u697d\u306b\u66f8\u3051\u307e\u3059\u3002\n\n```py\nconv1 = Conv2d(x, 20, 1, 5) #x\u3092\u5165\u529b\u3068\u3057\u3001\u51fa\u529b\u304c20\u30c1\u30e3\u30cd\u30eb\u3001\u5165\u529b\u304c1\u30c1\u30e3\u30cd\u30eb\u3001\u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba5\nrelu1 = relu(conv1.output) #conv1\u306e\u51fa\u529b\u3092\u5165\u529b\u3068\u3059\u308b\npool1 = Pool2d(relu1.output, 2, 2) #relu1\u306e\u51fa\u529b\u3092\u5165\u529b\u3068\u3057, \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba2\u3001\u30b9\u30c8\u30e9\u30a4\u30c92\n\nconv2 = Conv2d(pool1.output, 50, 20, 5) #poo1\u306e\u51fa\u529b\u3092\u5165\u529b\u3068\u3057\u3001\u51fa\u529b\u304c50\u30c1\u30e3\u30cd\u30eb\u3001\u5165\u529b\u304c20\u30c1\u30e3\u30cd\u30eb\u3001\u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba5\nrelu2 = relu(conv2.output) #conv2\u306e\u51fa\u529b\u3092\u5165\u529b\u3068\u3059\u308b\npool2 = Pool2d(relu2.output, 2, 2) #relu2\u306e\u51fa\u529b\u3092\u5165\u529b\u3068\u3057, \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba2\u3001\u30b9\u30c8\u30e9\u30a4\u30c92\n\nfc1_input = pool2.output.flatten(2) #pool2\u306e\u51fa\u529b\u306e\u30b7\u30f3\u30dc\u30eb\u306fT.tensor4\u306e\u305f\u3081\u3001flatten()\u3092\u4f7f\u3063\u3066\u5168\u7d50\u5408\u5c64\u306e\u5165\u529b\u306e\u30b7\u30f3\u30dc\u30eb\u306b\u5408\u308f\u305b\u308b\nfc1 = FullyConnect(fc1_input, 50*4*4, 500) #\u5165\u529b\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c50*4*4(\u30c1\u30e3\u30cd\u30eb\u6570*\u7e26*\u6a2a)\u3001\u51fa\u529b\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c500\nrelu3 = relu(fc1.output)\nfc2 = FullyConnect(relu3.output, 500, 10) #\u5165\u529b\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c500\u3001\u51fa\u529b\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u304c10(10\u30af\u30e9\u30b9\u5206\u985e\u306e\u305f\u3081)\nloss = softmax(fc2.output, y)\n```\n\u3053\u308c\u3067LeNet\u306e\u5b9a\u7fa9\u304c\u66f8\u3051\u307e\u3057\u305f\u3002\u5404\u5c64\u306e\u51fa\u529b\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u6b21\u306e\u5c64\u306e\u5165\u529b\u306e\u30b7\u30f3\u30dc\u30eb\u306b\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u5168\u3066\u306e\u30b7\u30f3\u30dc\u30eb\u304c\u7e4b\u304c\u308a\u3001\u52fe\u914d\u8a08\u7b97\u3092\u4e00\u5ea6\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3059\u306a\u308f\u3061\u3001\n\u30fb\u30fb\u30fbT.nnet.conv.conv2d(pool.pool2d(T.nnet.conv.conv2d()))\u30fb\u30fb\u30fb\n\u306e\u3088\u3046\u306a\u9577\u3044\u30b7\u30f3\u30dc\u30eb\u304c\u5b9a\u7fa9\u3055\u308c\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081T.grad()\u306b\u6700\u7d42\u7684\u306a\u30b7\u30f3\u30dc\u30eb(\u4eca\u56de\u306floss.cost)\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u7c21\u5358\u306b\u5168\u3066\u306e\u5c64\u306e\u52fe\u914d\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\n###\u5b66\u7fd2\n\u6700\u5f8c\u306b\u5b66\u7fd2\u3068validation data\u3001test data\u306b\u3088\u308b\u8a55\u4fa1\u306efunction\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u3053\u3053\u307e\u3067\u306f\u30b7\u30f3\u30dc\u30eb\u3092\u5b9a\u7fa9\u3057\u305f\u3060\u3051\u306a\u306e\u3067\u5b9f\u969b\u306e\u5024\u3092\u5165\u529b\u3057\u3066\u5b66\u7fd2\u306a\u3069\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u30b7\u30f3\u30dc\u30eb\u3092theano.function\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\u3092\u884c\u3046\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u5b66\u7fd2\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4eca\u56de\u306fSGD\u3092\u7528\u3044\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\u3092\u884c\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u5b66\u7fd2\u306etheano.function\u306e\u5b9f\u88c5\u4f8b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py\n#\u5b66\u7fd2\u3055\u308c\u308b\u5168\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ea\u30b9\u30c8\u306b\u307e\u3068\u3081\u308b\nparams = conv1.params + conv2.params + fc1.params + fc2.params \n#\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5fae\u5206\u3092\u8a08\u7b97\ngrads = T.grad(loss.cost, params)\n#\u5b66\u7fd2\u7387\u306e\u5b9a\u7fa9\nlearning_rate = 0.001\n#\u66f4\u65b0\u5f0f\u3092\u5b9a\u7fa9\nupdates = [(param_i, param_i - learning_rate * grad_i) for param_i, grad_i in zip(params, grads)]\n#\u5b66\u7fd2\u306etheano.function\u3092\u5b9a\u7fa9\nindex = T.lscalar()\nbatch_size = 128\ntrain_model = theano.function(inputs=[index], #\u5165\u529b\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u306eindex\n                       outputs=loss.cost, #\u51fa\u529b\u306floss.cost\n                       updates=updates, #\u66f4\u65b0\u5f0f\n                       givens={\n                            x: train_set_x[index: index + batch_size], #\u5165\u529b\u306ex\u306btrain_set_x\u3092\u4e0e\u3048\u308b\n                            y: train_set_y[index: index + batch_size] #\u5165\u529b\u306ey\u306btrain_set_y\u3092\u4e0e\u3048\u308b\n                       })\n```\n\u307e\u305a\u3001params\u306f\u5404\u5c64\u306e\u91cd\u307f\u3068\u30d0\u30a4\u30a2\u30b9\u306e\u30b7\u30f3\u30dc\u30eb\u304b\u3089\u306a\u308b\u30ea\u30b9\u30c8\u306b\u306a\u308a\u307e\u3059(\u30ea\u30b9\u30c8\u540c\u58eb\u306e\u8db3\u3057\u7b97\u3067\u3042\u308b\u305f\u3081)\u3002T.grads()\u306f\u5909\u6570\u3092\u30ea\u30b9\u30c8\u3067\u4e0e\u3048\u308b\u3068\u305d\u308c\u305e\u308c\u306e\u5909\u6570\u3067\u5fae\u5206\u3057\u305f\u30b7\u30f3\u30dc\u30eb\u3092\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\u305f\u3081\u3001grads\u306floss.cost\u3092\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u5fae\u5206\u3057\u305f\u30b7\u30f3\u30dc\u30eb\u3092\u6301\u3064\u30ea\u30b9\u30c8\u306b\u306a\u3063\u3066\u307e\u3059\u3002updates\u3082\u5404\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u66f4\u65b0\u5f0f\u306e\u30ea\u30b9\u30c8\u3068\u306a\u308a\u307e\u3059\u3002\n\u6b21\u306btrain_model\u306e\u5b9a\u7fa9\u3067\u3059\u304c\u3001\u524d\u8ff0\u3057\u305f\u3088\u3046\u306bconv1\u304b\u3089loss.cost\u307e\u3067\u304c\u6700\u521d\u306b\u5b9a\u7fa9\u3057\u305fx\u3068y\u3092\u5165\u529b\u3068\u3059\u308b\u4e00\u3064\u306e\u30b7\u30f3\u30dc\u30eb\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002train_model\u5185\u3067x\u306ftrain_set_x\u3092y\u304ctrain_set_y\u3092\u306e\u5024\u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002train_set_x\u3068train_set_y\u306findex\u3092\u53d7\u3051\u53d6\u3063\u3066\u53d7\u3051\u53d6\u3063\u305findex\u304b\u3089batch_size\u5206\u306e\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u70batrain_model\u306b\u306f\u5f15\u6570\u3068\u3057\u3066index\u306e\u307f\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001index\u304b\u3089index + batch_size\u307e\u3067\u306etrain_set_x\u3068train_set_y\u306e\u5024\u3092x, y\u306b\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002\n\u3042\u3068\u306f\u3053\u306etrain_model\u3092for\u6587\u306a\u3069\u3067\u7e70\u308a\u8fd4\u3057\u547c\u3076\u3053\u3068\u3067\u5b66\u7fd2\u304c\u3067\u304d\u307e\u3059\u3002\n\n```py\nfor i in range(0, train_set_y.get_value().shape[0], batch_size):\n    train_model(i)\n```\n\n####\u8a55\u4fa1\n\u6700\u5f8c\u306b\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u7cbe\u5ea6\u8a55\u4fa1\u3092\u884c\u3046theano.function\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u8a55\u4fa1\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\u3092\u884c\u308f\u306a\u3044\u305f\u3081\u51fa\u529b\u306ferror rate\u306b\u3057\u307e\u3059\u3002loss.output\u306bsoftmax\u306e\u30b7\u30f3\u30dc\u30eb\u304c\u3042\u308b\u305f\u3081\u3053\u308c\u3092\u4f7f\u3063\u3066error rate\u3092\u7b97\u51fa\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u3092\u5b9a\u7fa9\u3057\u3066\u3001error rate\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u4f7f\u3063\u3066\u8a55\u4fa1\u3092\u884c\u3046theano.function\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```py\npred = T.argmax(loss.output, axis=1) #\u4e88\u6e2c\u3055\u308c\u305f\u78ba\u7387\u304c\u6700\u3082\u9ad8\u3044\u30af\u30e9\u30b9\u3092\u8fd4\u3059\nerror = T.mean(T.neq(pred,y)) #\u4e88\u6e2c\u3055\u308c\u305f\u30af\u30e9\u30b9\u3092\u6b63\u89e3\u30e9\u30d9\u30eb\u3068\u6bd4\u8f03\ntest_model = theano.function(inputs=[index],\n                             outputs=error,\n                             givens={\n                             x: test_set_x[index: index + batch_size],\n                             y: test_set_y[index: index + batch_size]\n                             })\n\nval_model = theano.function(inputs=[index],\n                             outputs=error,\n                             givens={\n                             x: test_set_x[index: index + batch_size],\n                             y: test_set_y[index: index + batch_size]\n                             })\n```\n\u3053\u308c\u3067validation\u3068test data\u7528\u306e\u8a55\u4fa1function\u304c\u5b9a\u7fa9\u3067\u304d\u305f\u306e\u3067train_model\u3068\u540c\u69d8\u306bfor\u6587\u3092\u4f7f\u3046\u3053\u3068\u3067\u8a55\u4fa1\u304c\u3067\u304d\u307e\u3059\u3002\n\n```py\ntest_losses = [test_model(i)\n               for i in range(0, test_set_y.get_value().shape[0], batch_size] #\u30d0\u30c3\u30c1\u3054\u3068\u306e\u5e73\u5747\u306eloss\u3092\u30ea\u30b9\u30c8\u306b\u4fdd\u5b58\nmean_test_loss = np.mean(test_losses) #\u5168\u4f53\u306e\u5e73\u5747\u3092\u7b97\u51fa\n```\n\u4ee5\u4e0a\u3067theano\u3092\u7528\u3044\u305fCNN\u306e\u5b66\u7fd2\u3001\u8a55\u4fa1\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u307e\u3057\u305f\u3002\u5b9f\u969b\u306e\u5b66\u7fd2\u7d50\u679c\u306f\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u5168\u3066\u3064\u306a\u3052\u3066\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044(\u81ea\u5206\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3092Quiita\u7528\u306b\u6240\u3005\u5909\u3048\u3066\u30c7\u30d0\u30c3\u30b0\u3057\u306a\u3044\u307e\u307e\u66f8\u3044\u305f\u306e\u3067\u52d5\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u7b11)\u3002\u4e0d\u660e\u306a\u70b9\u3084\u30b3\u30fc\u30c9\u3001\u89e3\u8aac\u306b\u8aa4\u308a\u304c\u3042\u308b\u5834\u5408\u306f\u30b3\u30e1\u30f3\u30c8\u3067\u77e5\u3089\u305b\u3066\u304f\u3060\u3055\u3044\u3002\n\n#\u307e\u3068\u3081\nTheano\u3092\u4f7f\u3063\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9f\u88c5\u306e\u89e3\u8aac\u3092\u3057\u307e\u3057\u305f\u3002\u4e00\u898b\u30b3\u30fc\u30c9\u304c\u9577\u304f\u9762\u5012\u306b\u601d\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u81ea\u5206\u306e\u6271\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u5c64\u306e\u30af\u30e9\u30b9\u3092\u4e00\u5ea6\u5b9a\u7fa9\u3057\u3066\u3057\u307e\u3048\u3070\u3042\u3068\u306f\u697d\u306b\u66f8\u3051\u307e\u3059\u3002\u81ea\u5206\u3067\u8272\u3005\u3068\u5b9a\u7fa9\u3067\u304d\u308b\u306e\u304cTheano\u306e\u5229\u70b9\u3067\u3059\u306d(\u305d\u306e\u5206\u9762\u5012\u3067\u3059\u304c)\u3002LeNet\u4ee5\u5916\u306e\u5b9f\u88c5\u306f\u5c64\u306e\u5b9a\u7fa9\u306e\u90e8\u5206\u3092\u5909\u66f4\u3059\u308c\u3070\u69d8\u3005\u306a\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u30ed\u30b9\u95a2\u6570\u3084\u30d1\u30e9\u30e1\u30fc\u30bf\u66f4\u65b0\u624b\u6cd5\u3082\u30b7\u30f3\u30dc\u30eb\u3092\u5b9a\u7fa9\u3059\u308c\u3070\u81ea\u7531\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u3053\u308c\u304b\u3089Theano\u3092\u4f7f\u304a\u3046\u3068\u3057\u3066\u3044\u308b\u4eba\u306e\u5f79\u306b\u7acb\u3066\u3070\u5e78\u3044\u3067\u3059\u3002\n"}