{"context": " More than 1 year has passed since last update.\n\nTL;DR\n\u4f55\u3084\u3089\u6d41\u884c\u3063\u3066\u3044\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3002\n\u9014\u4e2d\u3067\u5c11\u3057\u30c0\u30eb\u304f\u306a\u3063\u3066\u547d\u540d\u304c\u30c6\u30ad\u30c8\u30fc\u3067\u3059\u304c\u3002\u3002\u3002\n\ncalculateMyNumber.scm\n(use gauche.sequence)\n\n;; \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u8a08\u7b97\n;; dataPair = (\"11\u6841\u306e\u6570\u5024\u6587\u5b57\u5217\" . \u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8)\n(define (calculateMyNumber dataPair)\n  ;; \u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u306e\u5224\u5b9a\n  (define (judgeDigit modValue checkDigit)\n    (cond ((= modValue 0) (= checkDigit 0))\n          ((= modValue 1) (= checkDigit 0))\n          (else           (= checkDigit (- 11 modValue))) ))\n  ;; Pn * Qn \u3092\u8fd4\u3059\n  (define (getPn*Qn pn n)\n          (if (< 6 n)\n              (* pn (- n 5))\n              (* pn (+ n 1))))\n  (judgeDigit (mod (fold + 0 (map-with-index (lambda (n x) (getPn*Qn (digit->integer x) (+ n 1)))\n                                             (reverse (string->list (car dataPair)))))\n                   11)\n              (string->number (cdr dataPair))))\n\n;; \u59a5\u5f53\u306a\u5f62\u5f0f\u304b(\u6570\u5024\u6587\u5b57\u5217\u304b\u3001\u6841\u6570\u306f\u6b63\u3057\u3044\u304b)\uff1f\n(define (validMyNumber? value)\n  (if (string? value)\n      (if (= (string-length value) 12)\n          (string->number value)\n          #f)\n      #f))\n\n(define (verifiMyNumber numberString)\n  (if (validMyNumber? numberString)\n      (calculateMyNumber ((lambda (value)\n                                  (cons (substring value  0 11)\n                                        (substring value 11 12)))\n                          numberString))\n      #f))\n\n(for-each (lambda (x) (print x \" : \" (verifiMyNumber x)))\n          '(\"123456789010\"\n            \"123456789011\"\n            \"123456789012\"\n            \"123456789013\"\n            \"123456789014\"\n            \"123456789015\"\n            \"123456789016\"\n            \"123456789017\"\n            \"123456789018\"\n            \"123456789019\"\n            \"023456789013\"))\n\n\n\n\u7d50\u679c.txt\n123456789010 : #f\n123456789011 : #f\n123456789012 : #f\n123456789013 : #f\n123456789014 : #f\n123456789015 : #f\n123456789016 : #f\n123456789017 : #f\n123456789018 : #t\n123456789019 : #f\n023456789013 : #t\n\n\n\u3082\u3063\u3068\u30b5\u30e9\u30ea\u3068\u3057\u305f\u30b3\u30fc\u30c9\u304c\u66f8\u304d\u305f\u3044\u3002\n\n\u4fee\u6b63\n\n\n\u5408\u8a08\u3092\u8a08\u7b97\u3059\u308b\u306e\u306b\u540d\u524d\u4ed8\u304dlet\u3067\u30eb\u30fc\u30d7\u3059\u308b\u5fc5\u8981\u306a\u3093\u3066\u306a\u304b\u3063\u305f\u3093\u3084\n\n\n\u5c11\u3057\u6c17\u6301\u3061\u304c\u30b9\u30c3\u30ad\u30ea\u3057\u305f\u3002\n\n\n\u305b\u3063\u304b\u304f\u3060\u304b\u3089Gauche\u306e\u4fbf\u5229\u306a map-with-index \u3092\u9078\u3076\u305c\n\u30a4\u30f3\u30c7\u30f3\u30c8\u3057\u3066\u307f\u308b\u3068\u5408\u8a08\u306e\u4f59\u308a\u3092\u51fa\u3059\u305f\u3081\u306e 11 \u304c\u306a\u3093\u304b\u30b7\u30e5\u30fc\u30eb\n\n\n\u3055\u3089\u306b\u4fee\u6b63\n\n\n\u3082\u3061\u3063\u3068\u30b3\u30fc\u30c9\u3092\u6574\u7406 \n\n\n\u7121\u540d\u95a2\u6570\u547c\u3073\u51fa\u3057\u306b\u3057\u305f\u308a\u3001\u540d\u524d\u3092\u5909\u3048\u305f\u308a\u3001\u898b\u305f\u76ee\u3092\u8abf\u6574\u3057\u305f\u308a \n\n\n\n\n\n# TL;DR\n\u4f55\u3084\u3089\u6d41\u884c\u3063\u3066\u3044\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3002\n\n\u9014\u4e2d\u3067\u5c11\u3057\u30c0\u30eb\u304f\u306a\u3063\u3066\u547d\u540d\u304c\u30c6\u30ad\u30c8\u30fc\u3067\u3059\u304c\u3002\u3002\u3002\n\n```calculateMyNumber.scm\n(use gauche.sequence)\n\n;; \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u8a08\u7b97\n;; dataPair = (\"11\u6841\u306e\u6570\u5024\u6587\u5b57\u5217\" . \u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8)\n(define (calculateMyNumber dataPair)\n  ;; \u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u306e\u5224\u5b9a\n  (define (judgeDigit modValue checkDigit)\n    (cond ((= modValue 0) (= checkDigit 0))\n          ((= modValue 1) (= checkDigit 0))\n          (else           (= checkDigit (- 11 modValue))) ))\n  ;; Pn * Qn \u3092\u8fd4\u3059\n  (define (getPn*Qn pn n)\n          (if (< 6 n)\n              (* pn (- n 5))\n              (* pn (+ n 1))))\n  (judgeDigit (mod (fold + 0 (map-with-index (lambda (n x) (getPn*Qn (digit->integer x) (+ n 1)))\n                                             (reverse (string->list (car dataPair)))))\n                   11)\n              (string->number (cdr dataPair))))\n\n;; \u59a5\u5f53\u306a\u5f62\u5f0f\u304b(\u6570\u5024\u6587\u5b57\u5217\u304b\u3001\u6841\u6570\u306f\u6b63\u3057\u3044\u304b)\uff1f\n(define (validMyNumber? value)\n  (if (string? value)\n      (if (= (string-length value) 12)\n          (string->number value)\n          #f)\n      #f))\n\n(define (verifiMyNumber numberString)\n  (if (validMyNumber? numberString)\n      (calculateMyNumber ((lambda (value)\n                                  (cons (substring value  0 11)\n                                        (substring value 11 12)))\n                          numberString))\n      #f))\n\n(for-each (lambda (x) (print x \" : \" (verifiMyNumber x)))\n          '(\"123456789010\"\n            \"123456789011\"\n            \"123456789012\"\n            \"123456789013\"\n            \"123456789014\"\n            \"123456789015\"\n            \"123456789016\"\n            \"123456789017\"\n            \"123456789018\"\n            \"123456789019\"\n            \"023456789013\"))\n```\n```\u7d50\u679c.txt\n123456789010 : #f\n123456789011 : #f\n123456789012 : #f\n123456789013 : #f\n123456789014 : #f\n123456789015 : #f\n123456789016 : #f\n123456789017 : #f\n123456789018 : #t\n123456789019 : #f\n023456789013 : #t\n```\n\u3082\u3063\u3068\u30b5\u30e9\u30ea\u3068\u3057\u305f\u30b3\u30fc\u30c9\u304c\u66f8\u304d\u305f\u3044\u3002\n\n* \u4fee\u6b63\n    - \u5408\u8a08\u3092\u8a08\u7b97\u3059\u308b\u306e\u306b\u540d\u524d\u4ed8\u304dlet\u3067\u30eb\u30fc\u30d7\u3059\u308b\u5fc5\u8981\u306a\u3093\u3066\u306a\u304b\u3063\u305f\u3093\u3084\n        - \u5c11\u3057\u6c17\u6301\u3061\u304c\u30b9\u30c3\u30ad\u30ea\u3057\u305f\u3002\n    - \u305b\u3063\u304b\u304f\u3060\u304b\u3089Gauche\u306e\u4fbf\u5229\u306a `map-with-index` \u3092\u9078\u3076\u305c\n    - \u30a4\u30f3\u30c7\u30f3\u30c8\u3057\u3066\u307f\u308b\u3068\u5408\u8a08\u306e\u4f59\u308a\u3092\u51fa\u3059\u305f\u3081\u306e 11 \u304c\u306a\u3093\u304b\u30b7\u30e5\u30fc\u30eb\n* \u3055\u3089\u306b\u4fee\u6b63\n    - \u3082\u3061\u3063\u3068\u30b3\u30fc\u30c9\u3092\u6574\u7406 \n        - \u7121\u540d\u95a2\u6570\u547c\u3073\u51fa\u3057\u306b\u3057\u305f\u308a\u3001\u540d\u524d\u3092\u5909\u3048\u305f\u308a\u3001\u898b\u305f\u76ee\u3092\u8abf\u6574\u3057\u305f\u308a \n", "tags": ["Gauche", "Scheme"]}