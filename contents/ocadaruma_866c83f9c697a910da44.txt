{"context": "@ryoppy \u3055\u3093\u306b\u5148\u3092\u8d8a\u3055\u308c\u3066\u3057\u307e\u3063\u305f\u304c\u3001\u3053\u3061\u3089\u306f\u30de\u30af\u30ed\u3058\u3083\u306a\u304f\u3066\u7dda\u5f62\u5408\u540c\u6cd5\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u5b9a\u5f0f\u5316\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u306f\n\n\u300c\u30ba\u30f3\u300d\u300c\u30c9\u30b3\u300d\u306e\u3044\u305a\u308c\u304b\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u51fa\u529b\u3057\u7d9a\u3051\u3066\u300c\u30ba\u30f3\u300d\u300c\u30ba\u30f3\u300d\u300c\u30ba\u30f3\u300d\u300c\u30ba\u30f3\u300d\u300c\u30c9\u30b3\u300d\u306e\u914d\u5217\u304c\u51fa\u305f\u3089\u300c\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u300d\u3063\u3066\u51fa\u529b\u3057\u305f\u5f8c\u7d42\u4e86\u3063\u3066\u95a2\u6570\u4f5c\u3063\u305f\u3089\u6e80\u70b9\u3067\u5358\u4f4d\u8cb0\u3063\u3066\u305f\n\n\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u578b\u30ec\u30d9\u30eb\u3067\u5b9f\u88c5\u3057\u305f\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u554f\u984c\u3092\u5b9a\u5f0f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u4ee5\u4e0b\u3092\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u3068\u5b9a\u7fa9\u3057\u3066\u89e3\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u5b9a\u6570A, C, M\u304a\u3088\u3073\u521d\u671f\u5024X0X0X_0, \u95be\u5024T\u3092\u4e0e\u3048\u3001\u6b21\u306e\u5f0f\u3067\u30ba\u30f3\u30c9\u30b3\u5217{ZnZnZn}\u3092\u751f\u6210\u3059\u308b (\u7dda\u5f62\u5408\u540c\u6cd5)\n\n\nXn+1=(AXn+C)modMXn+1=(AXn+C)modMX_{n+1} = (AX_n+C)modM \u306b\u5bfe\u3057\u3001Xn>=TXn>=TXn >= T\u306a\u3089\u30ba\u30f3, Xn<TXn<TXn < T\u306a\u3089\u30c9\u30b3\n\n\nZn\u22123,Zn\u22122,Zn\u22121,ZnZn\u22123,Zn\u22122,Zn\u22121,ZnZ_{n-3}, Z_{n-2}, Z_{n-1}, Z_{n} = \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3\u3092\u307f\u305f\u3059nnn\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u3001{ZnZnZ_n}\u306e\u5f8c\u306b\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u3092\u51fa\u529b\u3057\u3066\u7d42\u4e86\n\n\n\u7dda\u5f62\u5408\u540c\u6cd5\u3067 \u30ba\u30f3 or \u30c9\u30b3\u3092\u51fa\u529b\nimport shapeless._, nat.ops._\n\ntrait \u30ba\u30f3\ntrait \u30c9\u30b3\ntrait `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01`\ncase object \u30ba\u30f3 extends \u30ba\u30f3\ncase object \u30c9\u30b3 extends \u30c9\u30b3\ncase object `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01` extends `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01`\n\ntrait GenZD[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, \u30ba\u30f3\u30c9\u30b3, OutX <: Nat] {\n  def apply: \u30ba\u30f3\u30c9\u30b3\n}\n\nobject GenZD {\n  implicit def zun[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, `A*X` <: Nat, `A*X+C` <: Nat, `(A*X+C)%M` <: Nat](\n    implicit prod: Prod.Aux[A, X, `A*X`], sum: Sum.Aux[`A*X`, C, `A*X+C`], mod: Mod.Aux[`A*X+C`, M, `(A*X+C)%M`], gteq: GTEq[`(A*X+C)%M`, T]): GenZD[A, C, M, X, T, \u30ba\u30f3, mod.Out] =\n    new GenZD[A, C, M, X, T, \u30ba\u30f3, mod.Out] {\n      def apply: \u30ba\u30f3 = \u30ba\u30f3\n    }\n\n  implicit def doko[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, `A*X` <: Nat, `A*X+C` <: Nat, `(A*X+C)%M` <: Nat](\n    implicit prod: Prod.Aux[A, X, `A*X`], sum: Sum.Aux[`A*X`, C, `A*X+C`], mod: Mod.Aux[`A*X+C`, M, `(A*X+C)%M`], lt: LT[`(A*X+C)%M`, T]): GenZD[A, C, M, X, T, \u30c9\u30b3, mod.Out] =\n    new GenZD[A, C, M, X, T, \u30c9\u30b3, mod.Out] {\n      def apply: \u30c9\u30b3 = \u30c9\u30b3\n    }\n}\n\n\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3059\nimplicitly[GenZD[_3, _2, _4, _1, _2, \u30c9\u30b3, _1]].apply // (3 * 1 + 2) % 4 = 1\u306f2\u3088\u308a\u5c0f\u3055\u304f\u30c9\u30b3\u306a\u306e\u3067OK\nimplicitly[GenZD[_3, _2, _4, _1, _2, \u30ba\u30f3, _1]].apply // \u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\n\n\n\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\n\u30ba\u30f3\u30c9\u30b3\u3092\u5f97\u308b\u95a2\u6570\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\ntrait ZDK[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, Acc <: HList] {\n  type Out <: HList\n  def apply(acc: Acc): Out\n}\n\ntrait LowerPriorityZDK {\n\n  implicit def loop[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, ZD, NextX <: Nat, Acc <: HList](\n    implicit genZD: GenZD[A, C, M, X, T, ZD, NextX], zdk: Lazy[ZDK[A, C, M, NextX, T, ZD :: Acc]]): ZDK[A, C, M, X, T, Acc] =\n    new ZDK[A, C, M, X, T, Acc] {\n      type Out = zdk.value.Out\n      def apply(acc: Acc): Out = zdk.value(genZD.apply :: acc)\n    }\n}\n\nobject ZDK extends LowerPriorityZDK {\n  type Aux[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, Acc <: HList, Out0 <: HList] = ZDK[A, C, M, X, T, Acc] { type Out = Out0 }\n\n  implicit def end[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, Acc <: HList](\n    implicit ev: Acc <:< (\u30c9\u30b3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: HList)): ZDK[A, C, M, X, T, Acc] = new ZDK[A, C, M, X, T, Acc] {\n\n    type Out = `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01` :: Acc\n    def apply(acc: Acc): Out = `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01` :: acc\n  }\n\n  def apply[A <: Nat, C <: Nat, M <: Nat, Init <: Nat, T <: Nat, Acc <: HList](implicit zdk: ZDK[A, C, M, Init, T, Acc]): Aux[A, C, M, Init, T, Acc, zdk.Out] = zdk\n}\n\n\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\nA=5,C=3,M=8,X0=1,T=4A=5,C=3,M=8,X0=1,T=4A=5, C=3, M=8, X_0=1, T=4\u3067\u4e0a\u8a18\u306e\u65b9\u6cd5\u3067\u4e71\u6570\u5217X1,X2,...X1,X2,...X_1, X_2,...\u3068\u30ba\u30f3\u30c9\u30b3\u5217Z1,Z2,...Z1,Z2,...Z_1, Z_2,...\u3092\u751f\u6210\u3059\u308b\u3068\nX1,X2,...=0,3,2,5,4,7,6,1,0,...X1,X2,...=0,3,2,5,4,7,6,1,0,...X_1,X_2,... = 0, 3, 2, 5, 4, 7, 6, 1, 0, ...\nZ1,Z2,...=\u30c9\u30b3,\u30c9\u30b3,\u30c9\u30b3,\u30ba\u30f3,\u30ba\u30f3,\u30ba\u30f3,\u30ba\u30f3,\u30c9\u30b3,\u30c9\u30b3,...Z1,Z2,...=\u30c9\u30b3,\u30c9\u30b3,\u30c9\u30b3,\u30ba\u30f3,\u30ba\u30f3,\u30ba\u30f3,\u30ba\u30f3,\u30c9\u30b3,\u30c9\u30b3,...Z_1,Z_2,... = \u30c9\u30b3, \u30c9\u30b3, \u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3, \u30c9\u30b3, ...\n\u306a\u306e\u3067\u3001 \u30ad\u30fb\u30e8\u30fb\u30b7\uff01 :: \u30c9\u30b3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30c9\u30b3 :: \u30c9\u30b3 :: \u30c9\u30b3 :: HNil \u3068\u306a\u308b\u306f\u305a\u3067\u3059\u3002\nscala> implicitly[ZDK[_5, _3, _8, _1, _4, HNil]].apply(HNil)\nres1: ZDK[shapeless.Nat._5,shapeless.Nat._3,shapeless.Nat._8,shapeless.Nat._1,shapeless.Nat._4,shapeless.HNil]#Out = \u30ad\u30fb\u30e8\u30fb\u30b7\uff01 :: \u30c9\u30b3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30c9\u30b3 :: \u30c9\u30b3 :: \u30c9\u30b3 :: HNil\n\n\u3067\u304d\u305f\u30fc\uff01\uff01\n\u3051\u3069\u3001\n\nREPL\u306b\u8cbc\u3063\u3064\u3051\u308b\u3068\u3046\u307e\u304f\u3044\u304f(\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u304b\u306a\u308a\u6642\u9593\u304b\u304b\u308b\u304c)\n\nimplicitly[ZDK[_5, _3, _8, _1, _4, HNil]].apply(HNil)\u3092\u4e00\u7dd2\u306e\u30bd\u30fc\u30b9\u306b\u5165\u308c\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068compile error\n\nmkLazy\u30de\u30af\u30ed\u306e\u5f71\u97ff\u3068\u601d\u3046\u304c...\n\n\u53c2\u8003\n\nhttp://qiita.com/ryoppy/items/1a4436b56912c41f0bf7\nshapeless\u306eexample\n\n@ryoppy \u3055\u3093\u306b[\u5148\u3092\u8d8a\u3055\u308c\u3066\u3057\u307e\u3063\u305f](http://qiita.com/ryoppy/items/1a4436b56912c41f0bf7)\u304c\u3001\u3053\u3061\u3089\u306f\u30de\u30af\u30ed\u3058\u3083\u306a\u304f\u3066\u7dda\u5f62\u5408\u540c\u6cd5\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n## \u5b9a\u5f0f\u5316\n\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u306f\n\n> \u300c\u30ba\u30f3\u300d\u300c\u30c9\u30b3\u300d\u306e\u3044\u305a\u308c\u304b\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u51fa\u529b\u3057\u7d9a\u3051\u3066\u300c\u30ba\u30f3\u300d\u300c\u30ba\u30f3\u300d\u300c\u30ba\u30f3\u300d\u300c\u30ba\u30f3\u300d\u300c\u30c9\u30b3\u300d\u306e\u914d\u5217\u304c\u51fa\u305f\u3089\u300c\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u300d\u3063\u3066\u51fa\u529b\u3057\u305f\u5f8c\u7d42\u4e86\u3063\u3066\u95a2\u6570\u4f5c\u3063\u305f\u3089\u6e80\u70b9\u3067\u5358\u4f4d\u8cb0\u3063\u3066\u305f\n\n\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u578b\u30ec\u30d9\u30eb\u3067\u5b9f\u88c5\u3057\u305f\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u554f\u984c\u3092\u5b9a\u5f0f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3001\u4ee5\u4e0b\u3092\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u3068\u5b9a\u7fa9\u3057\u3066\u89e3\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n- \u5b9a\u6570A, C, M\u304a\u3088\u3073\u521d\u671f\u5024$X_0$, \u95be\u5024T\u3092\u4e0e\u3048\u3001\u6b21\u306e\u5f0f\u3067\u30ba\u30f3\u30c9\u30b3\u5217{$Zn$}\u3092\u751f\u6210\u3059\u308b (\u7dda\u5f62\u5408\u540c\u6cd5)\n  - $X_{n+1} = (AX_n+C)modM$ \u306b\u5bfe\u3057\u3001$Xn >= T$\u306a\u3089\u30ba\u30f3, $Xn < T$\u306a\u3089\u30c9\u30b3\n- $Z_{n-3}, Z_{n-2}, Z_{n-1}, Z_{n}$ = \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3\u3092\u307f\u305f\u3059$n$\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u3001{$Z_n$}\u306e\u5f8c\u306b\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u3092\u51fa\u529b\u3057\u3066\u7d42\u4e86\n\n## \u7dda\u5f62\u5408\u540c\u6cd5\u3067 \u30ba\u30f3 or \u30c9\u30b3\u3092\u51fa\u529b\n\n\n```scala\nimport shapeless._, nat.ops._\n\ntrait \u30ba\u30f3\ntrait \u30c9\u30b3\ntrait `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01`\ncase object \u30ba\u30f3 extends \u30ba\u30f3\ncase object \u30c9\u30b3 extends \u30c9\u30b3\ncase object `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01` extends `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01`\n\ntrait GenZD[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, \u30ba\u30f3\u30c9\u30b3, OutX <: Nat] {\n  def apply: \u30ba\u30f3\u30c9\u30b3\n}\n\nobject GenZD {\n  implicit def zun[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, `A*X` <: Nat, `A*X+C` <: Nat, `(A*X+C)%M` <: Nat](\n    implicit prod: Prod.Aux[A, X, `A*X`], sum: Sum.Aux[`A*X`, C, `A*X+C`], mod: Mod.Aux[`A*X+C`, M, `(A*X+C)%M`], gteq: GTEq[`(A*X+C)%M`, T]): GenZD[A, C, M, X, T, \u30ba\u30f3, mod.Out] =\n    new GenZD[A, C, M, X, T, \u30ba\u30f3, mod.Out] {\n      def apply: \u30ba\u30f3 = \u30ba\u30f3\n    }\n\n  implicit def doko[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, `A*X` <: Nat, `A*X+C` <: Nat, `(A*X+C)%M` <: Nat](\n    implicit prod: Prod.Aux[A, X, `A*X`], sum: Sum.Aux[`A*X`, C, `A*X+C`], mod: Mod.Aux[`A*X+C`, M, `(A*X+C)%M`], lt: LT[`(A*X+C)%M`, T]): GenZD[A, C, M, X, T, \u30c9\u30b3, mod.Out] =\n    new GenZD[A, C, M, X, T, \u30c9\u30b3, mod.Out] {\n      def apply: \u30c9\u30b3 = \u30c9\u30b3\n    }\n}\n```\n\n\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3059\n\n```scala\nimplicitly[GenZD[_3, _2, _4, _1, _2, \u30c9\u30b3, _1]].apply // (3 * 1 + 2) % 4 = 1\u306f2\u3088\u308a\u5c0f\u3055\u304f\u30c9\u30b3\u306a\u306e\u3067OK\nimplicitly[GenZD[_3, _2, _4, _1, _2, \u30ba\u30f3, _1]].apply // \u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\n```\n\n## \u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\n\n\u30ba\u30f3\u30c9\u30b3\u3092\u5f97\u308b\u95a2\u6570\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```scala\ntrait ZDK[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, Acc <: HList] {\n  type Out <: HList\n  def apply(acc: Acc): Out\n}\n\ntrait LowerPriorityZDK {\n\n  implicit def loop[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, ZD, NextX <: Nat, Acc <: HList](\n    implicit genZD: GenZD[A, C, M, X, T, ZD, NextX], zdk: Lazy[ZDK[A, C, M, NextX, T, ZD :: Acc]]): ZDK[A, C, M, X, T, Acc] =\n    new ZDK[A, C, M, X, T, Acc] {\n      type Out = zdk.value.Out\n      def apply(acc: Acc): Out = zdk.value(genZD.apply :: acc)\n    }\n}\n\nobject ZDK extends LowerPriorityZDK {\n  type Aux[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, Acc <: HList, Out0 <: HList] = ZDK[A, C, M, X, T, Acc] { type Out = Out0 }\n\n  implicit def end[A <: Nat, C <: Nat, M <: Nat, X <: Nat, T <: Nat, Acc <: HList](\n    implicit ev: Acc <:< (\u30c9\u30b3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: HList)): ZDK[A, C, M, X, T, Acc] = new ZDK[A, C, M, X, T, Acc] {\n\n    type Out = `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01` :: Acc\n    def apply(acc: Acc): Out = `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01` :: acc\n  }\n\n  def apply[A <: Nat, C <: Nat, M <: Nat, Init <: Nat, T <: Nat, Acc <: HList](implicit zdk: ZDK[A, C, M, Init, T, Acc]): Aux[A, C, M, Init, T, Acc, zdk.Out] = zdk\n}\n```\n\n\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n$A=5, C=3, M=8, X_0=1, T=4$\u3067\u4e0a\u8a18\u306e\u65b9\u6cd5\u3067\u4e71\u6570\u5217$X_1, X_2,...$\u3068\u30ba\u30f3\u30c9\u30b3\u5217$Z_1, Z_2,...$\u3092\u751f\u6210\u3059\u308b\u3068\n\n$X_1,X_2,... = 0, 3, 2, 5, 4, 7, 6, 1, 0, ...$\n$Z_1,Z_2,... = \u30c9\u30b3, \u30c9\u30b3, \u30c9\u30b3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30ba\u30f3, \u30c9\u30b3, \u30c9\u30b3, ...$\n\n\u306a\u306e\u3067\u3001 `\u30ad\u30fb\u30e8\u30fb\u30b7\uff01 :: \u30c9\u30b3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30c9\u30b3 :: \u30c9\u30b3 :: \u30c9\u30b3 :: HNil` \u3068\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n```scala:\nscala> implicitly[ZDK[_5, _3, _8, _1, _4, HNil]].apply(HNil)\nres1: ZDK[shapeless.Nat._5,shapeless.Nat._3,shapeless.Nat._8,shapeless.Nat._1,shapeless.Nat._4,shapeless.HNil]#Out = \u30ad\u30fb\u30e8\u30fb\u30b7\uff01 :: \u30c9\u30b3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30ba\u30f3 :: \u30c9\u30b3 :: \u30c9\u30b3 :: \u30c9\u30b3 :: HNil\n```\n\n\u3067\u304d\u305f\u30fc\uff01\uff01\n\n\u3051\u3069\u3001\n\n- REPL\u306b\u8cbc\u3063\u3064\u3051\u308b\u3068\u3046\u307e\u304f\u3044\u304f(\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u304b\u306a\u308a\u6642\u9593\u304b\u304b\u308b\u304c)\n- `implicitly[ZDK[_5, _3, _8, _1, _4, HNil]].apply(HNil)`\u3092\u4e00\u7dd2\u306e\u30bd\u30fc\u30b9\u306b\u5165\u308c\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068compile error\n\nmkLazy\u30de\u30af\u30ed\u306e\u5f71\u97ff\u3068\u601d\u3046\u304c...\n\n## \u53c2\u8003\n\n- http://qiita.com/ryoppy/items/1a4436b56912c41f0bf7\n- [shapeless\u306eexample](https://github.com/milessabin/shapeless/tree/master/examples/src/main/scala/shapeless/examples)\n", "tags": ["Scala", "shapeless", "\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7"]}