{"tags": ["Python", "APIGateway", "chalice", "lambda", "zappa"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Serverless(2) Advent Calendar 2016 23\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nPython \u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\nPython\u3067\u30b5\u30fc\u30d0\u30ec\u30b9\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u3057\u3066\u306f\u3001\u4ee5\u4e0b\u306e2\u3064\u304c\u4eba\u6c17\u306e\u3088\u3046\u3067\u3059\u3002\n\nawslabs/chalice: Python Serverless Microframework for AWS\nMiserlou/Zappa: Serverless Python Web Services\n\n\u4eca\u56de\u306f\u3053\u306e2\u3064\u3092\u3056\u3063\u304f\u308a\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3059\u3002\n\u3061\u306a\u307f\u306bNode.js\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001Serverless Framework\u3084Apex\u304c\u6709\u540d\u3067\u3059\u3002\n\u4ed6\u306b\u3069\u3046\u3044\u3063\u305f\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c\u3042\u308b\u304b\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u30b9\u30e9\u30a4\u30c9\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\nUnlimited Frameworks\n\nchalice\nPython Serverless Microframework for AWS\n\nAmazon\u88fd\u3060\u3051\u3042\u3063\u3066AWS\u5c02\u7528\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\u7c21\u5358\u306b\u958b\u767a\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u3066\u3001Flask\u3084Bottole\u306e\u3088\u3046\u306a\u30c7\u30b3\u30ec\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u8efd\u91cf\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\nIAM\u30dd\u30ea\u30b7\u30fc\u3092\u81ea\u52d5\u751f\u6210\u3057\u3066\u304f\u308c\u308b\nGateway\u3068Lambda\u5168\u3066\u306eAPI\u3092\u7db2\u7f85\u3057\u3066\u3044\u306a\u3044\nS3\u3084DynamoDB\u306a\u3069\u306e\u4ed6\u306eAWS\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3082\u3067\u304d\u306a\u3044\nAPI Gateway\u306b\u7279\u5316\u3057\u3066\u3044\u308b\n\n\u7528\u610f\u3057\u3066\u3042\u308b\u30b3\u30de\u30f3\u30c9\u306f\u3053\u308c\u3060\u3051\u3002\nCommands:\n  deploy\n  gen-policy\n  generate-sdk\n  local\n  logs\n  new-project\n  url\n\n\u5b9f\u969b\u306echalice\u3092\u4f7f\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092How to create a thumbnail API service with AWS Lambda\u3092\u53c2\u8003\u306b\u307f\u3066\u307f\u307e\u3059\u3002\n\u5199\u771f\u3092POST\u3067\u53d7\u3051\u53d6\u3063\u3066\u30b5\u30e0\u30cd\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u51e6\u7406\u3092app.py\u304c\u884c\u306a\u3063\u3066\u307e\u3059\u3002\nimport base64\nimport uuid\nfrom subprocess import Popen, PIPE\n\nimport boto3\nfrom chalice import BadRequestError, Chalice\n\n\napp = Chalice(app_name='thumbnail-service')\napp.debug = True  # TODO: Disable on production\n\nS3 = boto3.client('s3')\nS3_BUCKET = ''  # TODO: Replace with valid bucket name\n\n\n@app.route('/', methods=['POST'])\ndef index():\n    body = app.current_request.json_body\n\n    image = base64.b64decode(body['data'])\n    format = {'jpg': 'jpeg', 'png': 'png'}[body.get('format', 'jpg').lower()]\n    mode = {'max': '', 'min': '^', 'exact': '!'}[body.get('mode', 'max').lower()]\n    width = int(body.get('width', 128))\n    height = int(body.get('height', 128))\n\n    cmd = [\n        'convert',  # ImageMagick Convert\n        '-',  # Read original picture from StdIn\n        '-auto-orient',  # Detect picture orientation from metadata\n        '-thumbnail', '{}x{}{}'.format(width, height, mode),  # Thumbnail size\n        '-extent', '{}x{}'.format(width, height),  # Fill if original picture is smaller than thumbnail\n        '-gravity', 'Center',  # Extend (fill) from the thumbnail middle\n        '-unsharp',' 0x.5',  # Un-sharpen slightly to improve small thumbnails\n        '-quality', '80%',  # Thumbnail JPG quality\n        '{}:-'.format(format),  # Write thumbnail with `format` to StdOut\n    ]\n\n    p = Popen(cmd, stdout=PIPE, stdin=PIPE)\n    thumbnail = p.communicate(input=image)[0]\n\n    if not thumbnail:\n        raise BadRequestError('Image format not supported')\n\n    filename = '{}_{}x{}.{}'.format(uuid.uuid4(), width, height, format)\n    S3.put_object(\n        Bucket=S3_BUCKET,\n        Key=filename,\n        Body=thumbnail,\n        ACL='public-read',\n        ContentType='image/{}'.format(format),\n    )\n\n    return {\n        'url': 'https://s3.amazonaws.com/{}/{}'.format(S3_BUCKET, filename)\n    }\n\n\nZappa\nServerless Python Web Services\n\nWSGI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b\n\u306a\u306e\u3067chalice\u3068\u9055\u3063\u3066\u3001AWS\u4ee5\u5916\u306e\u30af\u30e9\u30a6\u30c9\u306b\u3082\u5bfe\u5fdc\u53ef\u80fd\n\u591a\u6a5f\u80fd\u306a\u30d5\u30eb\u30b9\u30bf\u30c3\u30af\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\"\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5fc5\u8981\u3068\u306a\u308b\u3001AWS\u30a4\u30d9\u30f3\u30c8\u30bd\u30fc\u30b9\u5168\u3066\u3092\u81ea\u52d5\u30b5\u30dd\u30fc\u30c8\n\n\u305d\u308c\u3067\u306fchalice\u540c\u69d8\u306b\u3001POST\u3067\u53d7\u3051\u53d6\u3063\u305f\u5199\u771f\u306e\u30b5\u30e0\u30cd\u30a4\u30eb\u751f\u6210\u3092\u884c\u3046\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092Building Serverless Microservices with Zappa and Flask - Gun.io\u3092\u53c2\u8003\u306b\u307f\u3066\u307f\u307e\u3059\u3002\nimport base64\nimport boto3\nimport calendar\nimport io\n\nfrom datetime import datetime, timedelta\nfrom flask import Flask, request, render_template\nfrom PIL import Image\n\ns3 = boto3.resource('s3')\nBUCKET_NAME = 'your_public_s3_bucket'\nand a new route:\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        new_file_b64 = request.form['b64file']\n        if new_file_b64:\n\n            # Decode the image\n            new_file = base64.b64decode(new_file_b64)\n\n            # Crop the Image\n            img = Image.open(io.BytesIO(new_file))\n            img.thumbnail((200, 200))\n\n            # Tag this filename with an expiry time\n            future = datetime.utcnow() + timedelta(days=10)\n            timestamp = str(calendar.timegm(future.timetuple()))\n            filename = \"thumb.%s.jpg\" % timestamp\n\n            # Send the Bytes to S3\n            img_bytes = io.BytesIO()\n            img.save(img_bytes, format='JPEG')\n            s3_object = s3.Object(BUCKET_NAME, filename)\n            resp = s3_object.put(\n                Body=img_bytes.getvalue(),\n                ContentType='image/jpeg'\n                )\n\n            if resp['ResponseMetadata']['HTTPStatusCode'] == 200:\n\n                # Make the result public\n                object_acl = s3_object.Acl()\n                response = object_acl.put(\n                    ACL='public-read')\n\n                # And return the URL\n                object_url = \"https://{0}.s3.amazonaws.com/{1}\".format(\n                    BUCKET_NAME,\n                    filename)\n                return object_url, 200\n            else:\n                return \"Something went wrong :(\", 400\n\n    return render_template('upload.html')\n\nchalice\u3068\u9055\u3063\u3066WSGI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30c7\u30d7\u30ed\u30a4\u3067\u304d\u308b\u306e\u3067\u3001\u5199\u771f\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u753b\u9762\u306a\u3069\u3082\u4e00\u7dd2\u306b\u7528\u610f\u3067\u304d\u307e\u3059\u3002\n\u307e\u305fAWS\u30a4\u30d9\u30f3\u30c8\u30bd\u30fc\u30b9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001S3\u3078\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3092\u30d5\u30c3\u30af\u306b\u30b5\u30e0\u30cd\u30a4\u30eb\u51e6\u7406\u3092\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n# zappa_settings.yml\n---\ndev:\n  app_function: your_project.main.app\n  events:\n  - function: your_project.users.thumbnailer\n    event_source:\n      arn: arn:aws:s3:::your_public_s3_bucket\n      events:\n      - s3:ObjectCreated:*\n\n# your_project/users.py\nimport Pillow\n\ndef thumbnailer(event, context):\n    \"\"\" Upon PUT, thumbnail! \"\"\"\n\n    # Get the bytes from S3\n    in_bucket = event['Records']['s3']['bucket']['name']\n    key = event['Records']['s3']['object']['key']\n    image_bytes = s3_client.download_file(in_bucket, key, '/tmp/' + key).read()\n\n    # Thumbnail it\n    size = (250, 250)\n    thumb = ImageOps.fit(image_bytes, size, Image.ANTIALIAS)\n\n    # Put it back on S3\n    s3_client.put_object(\n        ACL='public-read',\n        Body=thumb,\n        Key=key + 'thumbnail.jpg',\n        Bucket='avatar-bucket')\n\n\u8a73\u3057\u304f\u306fServer-less Framework Comparison - Zappa Versus Chalice\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u53c2\u8003\u306b\u3057\u305f\u3082\u306e\n\nServer-less Framework Comparison - Zappa Versus Chalice\nHow to create a thumbnail API service with AWS Lambda\nBuilding Serverless Microservices with Zappa and Flask - Gun.io\nAWS Lambda + API Gateway + Chalice(Python2)\u3067LINE BOT - c-bata web\n\n\n\u304a\u308f\u308a\u306b\nTop 10 Python libraries of 2016 - Tryolabs Blog\u3067\u3082Zappa\u304c1\u4f4d\u306b\u8f1d\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u30012016\u5e7412\u6708\u306e\u6642\u70b9\u3067\u306fchalice\u3088\u308a\u3082Zappa\u306e\u65b9\u304c\u4eba\u6c17\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u3057\u304b\u3057\u3053\u3053\u3067\u898b\u3066\u304d\u305f\u3088\u3046\u306b2\u3064\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u7279\u5fb4\u304c\u306f\u3063\u304d\u308a\u3057\u3066\u3044\u3066\u5dee\u5225\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u7528\u9014\u306b\u5408\u308f\u305b\u3066\u4f7f\u3044\u5206\u3051\u308b\u3053\u3068\u3067\u3001Python\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u754c\u9688\u304c\u76db\u308a\u4e0a\u304c\u3063\u3066\u3044\u304f\u3068\u3044\u3044\u3067\u3059\u306d\u3002\n## \u306f\u3058\u3081\u306b\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001[Serverless(2) Advent Calendar 2016](http://qiita.com/advent-calendar/2016/serverless2) 23\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n## Python \u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\nPython\u3067\u30b5\u30fc\u30d0\u30ec\u30b9\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3068\u3057\u3066\u306f\u3001\u4ee5\u4e0b\u306e2\u3064\u304c\u4eba\u6c17\u306e\u3088\u3046\u3067\u3059\u3002\n\n+ [awslabs/chalice: Python Serverless Microframework for AWS](https://github.com/awslabs/chalice)\n+ [Miserlou/Zappa: Serverless Python Web Services](https://github.com/Miserlou/Zappa)\n\n\n\u4eca\u56de\u306f\u3053\u306e2\u3064\u3092\u3056\u3063\u304f\u308a\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306bNode.js\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001[Serverless Framework](https://github.com/serverless/serverless)\u3084[Apex](https://github.com/apex/apex)\u304c\u6709\u540d\u3067\u3059\u3002\n\u4ed6\u306b\u3069\u3046\u3044\u3063\u305f\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c\u3042\u308b\u304b\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306e\u30b9\u30e9\u30a4\u30c9\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n[Unlimited Frameworks](http://www.slideshare.net/marcyterui/unlimited-frameworks)\n\n## chalice\n**Python Serverless Microframework for AWS**\n\n\n+ Amazon\u88fd\u3060\u3051\u3042\u3063\u3066AWS\u5c02\u7528\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n+ \u7c21\u5358\u306b\u958b\u767a\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u3066\u3001Flask\u3084Bottole\u306e\u3088\u3046\u306a\u30c7\u30b3\u30ec\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u8efd\u91cf\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n+ IAM\u30dd\u30ea\u30b7\u30fc\u3092\u81ea\u52d5\u751f\u6210\u3057\u3066\u304f\u308c\u308b\n+ Gateway\u3068Lambda\u5168\u3066\u306eAPI\u3092\u7db2\u7f85\u3057\u3066\u3044\u306a\u3044\n+ S3\u3084DynamoDB\u306a\u3069\u306e\u4ed6\u306eAWS\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3082\u3067\u304d\u306a\u3044\n+ API Gateway\u306b\u7279\u5316\u3057\u3066\u3044\u308b\n\n\u7528\u610f\u3057\u3066\u3042\u308b\u30b3\u30de\u30f3\u30c9\u306f\u3053\u308c\u3060\u3051\u3002\n\n```\nCommands:\n  deploy\n  gen-policy\n  generate-sdk\n  local\n  logs\n  new-project\n  url\n```\n\n\u5b9f\u969b\u306echalice\u3092\u4f7f\u3063\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092[How to create a thumbnail API service with AWS Lambda](https://www.mschweighauser.com/create-a-thumbnail-api-service/)\u3092\u53c2\u8003\u306b\u307f\u3066\u307f\u307e\u3059\u3002\n\n\u5199\u771f\u3092POST\u3067\u53d7\u3051\u53d6\u3063\u3066\u30b5\u30e0\u30cd\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u51e6\u7406\u3092`app.py`\u304c\u884c\u306a\u3063\u3066\u307e\u3059\u3002\n\n```python\nimport base64\nimport uuid\nfrom subprocess import Popen, PIPE\n\nimport boto3\nfrom chalice import BadRequestError, Chalice\n\n\napp = Chalice(app_name='thumbnail-service')\napp.debug = True  # TODO: Disable on production\n\nS3 = boto3.client('s3')\nS3_BUCKET = ''  # TODO: Replace with valid bucket name\n\n\n@app.route('/', methods=['POST'])\ndef index():\n    body = app.current_request.json_body\n\n    image = base64.b64decode(body['data'])\n    format = {'jpg': 'jpeg', 'png': 'png'}[body.get('format', 'jpg').lower()]\n    mode = {'max': '', 'min': '^', 'exact': '!'}[body.get('mode', 'max').lower()]\n    width = int(body.get('width', 128))\n    height = int(body.get('height', 128))\n\n    cmd = [\n        'convert',  # ImageMagick Convert\n        '-',  # Read original picture from StdIn\n        '-auto-orient',  # Detect picture orientation from metadata\n        '-thumbnail', '{}x{}{}'.format(width, height, mode),  # Thumbnail size\n        '-extent', '{}x{}'.format(width, height),  # Fill if original picture is smaller than thumbnail\n        '-gravity', 'Center',  # Extend (fill) from the thumbnail middle\n        '-unsharp',' 0x.5',  # Un-sharpen slightly to improve small thumbnails\n        '-quality', '80%',  # Thumbnail JPG quality\n        '{}:-'.format(format),  # Write thumbnail with `format` to StdOut\n    ]\n\n    p = Popen(cmd, stdout=PIPE, stdin=PIPE)\n    thumbnail = p.communicate(input=image)[0]\n\n    if not thumbnail:\n        raise BadRequestError('Image format not supported')\n\n    filename = '{}_{}x{}.{}'.format(uuid.uuid4(), width, height, format)\n    S3.put_object(\n        Bucket=S3_BUCKET,\n        Key=filename,\n        Body=thumbnail,\n        ACL='public-read',\n        ContentType='image/{}'.format(format),\n    )\n\n    return {\n        'url': 'https://s3.amazonaws.com/{}/{}'.format(S3_BUCKET, filename)\n    }\n```\n\n## Zappa\n\n**Serverless Python Web Services**\n\n+ WSGI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b\n+ \u306a\u306e\u3067chalice\u3068\u9055\u3063\u3066\u3001AWS\u4ee5\u5916\u306e\u30af\u30e9\u30a6\u30c9\u306b\u3082\u5bfe\u5fdc\u53ef\u80fd\n+ \u591a\u6a5f\u80fd\u306a\u30d5\u30eb\u30b9\u30bf\u30c3\u30af\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n+ \"\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5fc5\u8981\u3068\u306a\u308b\u3001AWS\u30a4\u30d9\u30f3\u30c8\u30bd\u30fc\u30b9\u5168\u3066\u3092\u81ea\u52d5\u30b5\u30dd\u30fc\u30c8\n\n\u305d\u308c\u3067\u306fchalice\u540c\u69d8\u306b\u3001POST\u3067\u53d7\u3051\u53d6\u3063\u305f\u5199\u771f\u306e\u30b5\u30e0\u30cd\u30a4\u30eb\u751f\u6210\u3092\u884c\u3046\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092[Building Serverless Microservices with Zappa and Flask - Gun.io](https://gun.io/blog/serverless-microservices-with-zappa-and-flask/)\u3092\u53c2\u8003\u306b\u307f\u3066\u307f\u307e\u3059\u3002\n\n```python\nimport base64\nimport boto3\nimport calendar\nimport io\n\nfrom datetime import datetime, timedelta\nfrom flask import Flask, request, render_template\nfrom PIL import Image\n\ns3 = boto3.resource('s3')\nBUCKET_NAME = 'your_public_s3_bucket'\nand a new route:\n@app.route('/upload', methods=['GET', 'POST'])\ndef upload_file():\n    if request.method == 'POST':\n        new_file_b64 = request.form['b64file']\n        if new_file_b64:\n\n            # Decode the image\n            new_file = base64.b64decode(new_file_b64)\n\n            # Crop the Image\n            img = Image.open(io.BytesIO(new_file))\n            img.thumbnail((200, 200))\n\n            # Tag this filename with an expiry time\n            future = datetime.utcnow() + timedelta(days=10)\n            timestamp = str(calendar.timegm(future.timetuple()))\n            filename = \"thumb.%s.jpg\" % timestamp\n\n            # Send the Bytes to S3\n            img_bytes = io.BytesIO()\n            img.save(img_bytes, format='JPEG')\n            s3_object = s3.Object(BUCKET_NAME, filename)\n            resp = s3_object.put(\n                Body=img_bytes.getvalue(),\n                ContentType='image/jpeg'\n                )\n\n            if resp['ResponseMetadata']['HTTPStatusCode'] == 200:\n\n                # Make the result public\n                object_acl = s3_object.Acl()\n                response = object_acl.put(\n                    ACL='public-read')\n\n                # And return the URL\n                object_url = \"https://{0}.s3.amazonaws.com/{1}\".format(\n                    BUCKET_NAME,\n                    filename)\n                return object_url, 200\n            else:\n                return \"Something went wrong :(\", 400\n\n    return render_template('upload.html')\n```\n\nchalice\u3068\u9055\u3063\u3066WSGI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30c7\u30d7\u30ed\u30a4\u3067\u304d\u308b\u306e\u3067\u3001\u5199\u771f\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u753b\u9762\u306a\u3069\u3082\u4e00\u7dd2\u306b\u7528\u610f\u3067\u304d\u307e\u3059\u3002\n\n\u307e\u305fAWS\u30a4\u30d9\u30f3\u30c8\u30bd\u30fc\u30b9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001S3\u3078\u306e\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3092\u30d5\u30c3\u30af\u306b\u30b5\u30e0\u30cd\u30a4\u30eb\u51e6\u7406\u3092\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306b\u5b9f\u884c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```\n# zappa_settings.yml\n---\ndev:\n  app_function: your_project.main.app\n  events:\n  - function: your_project.users.thumbnailer\n    event_source:\n      arn: arn:aws:s3:::your_public_s3_bucket\n      events:\n      - s3:ObjectCreated:*\n```\n```\n# your_project/users.py\nimport Pillow\n\ndef thumbnailer(event, context):\n    \"\"\" Upon PUT, thumbnail! \"\"\"\n\n    # Get the bytes from S3\n    in_bucket = event['Records']['s3']['bucket']['name']\n    key = event['Records']['s3']['object']['key']\n    image_bytes = s3_client.download_file(in_bucket, key, '/tmp/' + key).read()\n\n    # Thumbnail it\n    size = (250, 250)\n    thumb = ImageOps.fit(image_bytes, size, Image.ANTIALIAS)\n\n    # Put it back on S3\n    s3_client.put_object(\n        ACL='public-read',\n        Body=thumb,\n        Key=key + 'thumbnail.jpg',\n        Bucket='avatar-bucket')\n```\n\n\u8a73\u3057\u304f\u306f[Server-less Framework Comparison - Zappa Versus Chalice](https://blog.zappa.io/posts/comparison-zappa-verus-chalice)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u53c2\u8003\u306b\u3057\u305f\u3082\u306e\n\n+ [Server-less Framework Comparison - Zappa Versus Chalice](https://blog.zappa.io/posts/comparison-zappa-verus-chalice)\n+ [How to create a thumbnail API service with AWS Lambda](https://www.mschweighauser.com/create-a-thumbnail-api-service/)\n+ [Building Serverless Microservices with Zappa and Flask - Gun.io](https://gun.io/blog/serverless-microservices-with-zappa-and-flask/)\n+ [AWS Lambda + API Gateway + Chalice(Python2)\u3067LINE BOT - c-bata web](http://nwpct1.hatenablog.com/entry/aws-lambda-apigateway-line-bot)\n\n\n## \u304a\u308f\u308a\u306b\n\n[Top 10 Python libraries of 2016 - Tryolabs Blog](https://tryolabs.com/blog/2016/12/20/top-10-python-libraries-of-2016)\u3067\u3082Zappa\u304c1\u4f4d\u306b\u8f1d\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u30012016\u5e7412\u6708\u306e\u6642\u70b9\u3067\u306fchalice\u3088\u308a\u3082Zappa\u306e\u65b9\u304c\u4eba\u6c17\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3057\u304b\u3057\u3053\u3053\u3067\u898b\u3066\u304d\u305f\u3088\u3046\u306b2\u3064\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u7279\u5fb4\u304c\u306f\u3063\u304d\u308a\u3057\u3066\u3044\u3066\u5dee\u5225\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u7528\u9014\u306b\u5408\u308f\u305b\u3066\u4f7f\u3044\u5206\u3051\u308b\u3053\u3068\u3067\u3001Python\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u754c\u9688\u304c\u76db\u308a\u4e0a\u304c\u3063\u3066\u3044\u304f\u3068\u3044\u3044\u3067\u3059\u306d\u3002\n\n\n\n"}