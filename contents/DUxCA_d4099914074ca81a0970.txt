{"context": " More than 1 year has passed since last update.Lisp\u306e\u7df4\u7fd2\u3067\u66f8\u3044\u305f\u306e\u3067\u3053\u3053\u3067\u306f\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u306e\u8a71\u306f\u3057\u306a\u3044\u3002\n\n\u7d20\u76f4\u306a\u5b9f\u88c5\n(defpackage naive-prime-search)\n(in-package naive-prime-search)\n\n;; prime-number?:: Num -> List Num -> Bool\n(defun prime-number? (n primes)\n  (cond\n    ((atom primes)               t)\n    ((eq 0 (mod n (car primes))) nil)\n    (t                           (prime-number? n (cdr primes)))))\n\n;; search-prime:: Num -> List Num -> Num -> List Num\n(defun search-prime (n primes max)\n  (cond\n    ((> n max)                primes)\n    ((prime-number? n primes) (search-prime (1+ n) (append primes (list n)) max))\n                              ;; append\u3092\u4f7f\u3046\u4e8b\u3067\u30ea\u30b9\u30c8\u5b8c\u5168\u30b3\u30d4\u30fc\u3002\u3069\u3046\u307f\u3066\u3082\u9045\u3044\n                              ;; \u672b\u5c3e\u518d\u5e30\u6700\u9069\u5316\u3055\u308c\u306a\u3055\u305d\u3046\u306a\u66f8\u304d\u65b9\n    (t                        (search-prime (1+ n) primes max))))\n\n(time (search-prime 3 '(2) 100000))\n\n\u526f\u4f5c\u7528\u306e\u306a\u3044 append \u3068\u304b cond \u3067\u672b\u5c3e\u518d\u5e30\u3067\u306a\u3044\u66f8\u304d\u65b9\u3068\u304b\u3001\u3082\u3046\u898b\u308b\u304b\u3089\u306b\u9045\u305d\u3046\u3002\n$ clisp -c naive-prime-search.lisp\n$ clisp naive-prime-search.fas\nReal time: 11.719404 sec.\nRun time: 11.668685 sec.\nSpace: 736128576 Bytes\nGC: 906, GC time: 4.034319 sec.\n\nGC\u304c\u91cd\u305f\u3044\u3002\n\n\u9ad8\u901f\u5316\u5f8c\n(defpackage optimised-naive-prime-search)\n(in-package optimised-naive-prime-search)\n\n;; \u30ea\u30b9\u30c8\u3092\u63a2\u7d22\u3057\u305f\u3064\u3044\u3067\u306b\u7d20\u6570\u3092\u8ffd\u52a0\u3059\u3079\u304d\u672b\u5c3e\u30dd\u30a4\u30f3\u30bf\u3092\u8fd4\u3059\n;; (prime-number? n primes (cons 0 primes)) \u306e\u3088\u3046\u306a\u5f62\u3067 pre-primes \u306b\u306f\u9069\u5f53\u306a\u30ea\u30b9\u30c8\u3092\u7528\u610f\u3059\u308b\n;; prime-number?:: Num -> List Num -> List Num -> (Bool, List Num)\n(defun prime-number? (n primes pre-primes)\n  (cond\n    ((atom primes)               (cons t pre-primes))\n    ((eq 0 (mod n (car primes))) (cons nil pre-primes))\n    (t                           (prime-number? n (cdr primes) primes))))\n\n;; search-prime:: Num -> List Num -> Num -> List Num\n(defun search-prime (n primes max)\n  (if (> n max)\n    primes ;; \u63a2\u7d22\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u3089\u7d42\u4e86\n    (let* ((tmp (prime-number? n primes (cons 0 primes)))\n           (prime? (car tmp)) ;; prime?: boolean\n           (ptr (cdr tmp)))   ;; ptr: \u3082\u3057\u7d20\u6570\u306a\u3089cdr\u3092\u66f8\u304d\u63db\u3048\u308b\u3079\u304d\u30b3\u30f3\u30b9\u30bb\u30eb\n      (if prime?\n        (setf (cdr ptr) (cons n nil)))    ;; setf\u306b\u3088\u308b\u30b3\u30f3\u30b9\u30bb\u30eb\u66f8\u304d\u63db\u3048\u3002\u30b3\u30d4\u30fc\u306f\u767a\u751f\u3057\u306a\u3044\n      (search-prime (1+ n) primes max)))) ;; clisp\u3067\u305d\u306e\u307e\u307e\u5b9f\u884c\u3057\u3066\u3082\u672b\u5c3e\u518d\u5e30\u6700\u9069\u5316\u3055\u308c\u306a\u3044\u3002clisp -c hoge.lisp \u3057\u3066\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304a\u3044\u3066\u304b\u3089 clisp hoge.fas \u3057\u3088\u3046\n\n(time (search-prime 3 '(2) 100000))\n\n\u672b\u5c3e\u518d\u5e30\u3068\u3001\u7834\u58ca\u7684\u306a\u30ea\u30b9\u30c8\u3078\u306e\u8ffd\u52a0\u3068\u30ea\u30b9\u30c8\u672b\u5c3e\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u3044\u56de\u3059\u3088\u3046\u306a\u9ad8\u901f\u5316\u3092\u8a66\u307f\u308b\u3002\n$ clisp -c naive-prime-search.lisp\n$ clisp naive-prime-search.fas\nReal time: 7.283802 sec.\nRun time: 7.255682 sec.\nSpace: 3353536 Bytes\nGC: 5, GC time: 0.022078 sec.\n\n\u5148\u307b\u3069\u3088\u308aGC\u6642\u9593\u304c\u5c11\u306a\u3044\u3002\n\n\u6240\u611f\n\nGC\u6642\u9593\u3092\u8003\u3048\u306a\u3051\u308c\u3070\u30eb\u30fc\u30d7\u901f\u5ea6\u306f\u305d\u308c\u307b\u3069\u5909\u308f\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u3060\uff1f\nclisp(GNU CLISP 2.49)\u306e\u5834\u5408\u3001 (defun a () (cond (flag1 nil) (flag2 (a)) (t (a)))) \u306e\u3088\u3046\u306a\u8907\u6570\u306e\u518d\u5e30\u304c\u3042\u308b\u5834\u5408\u3067\u3082goto\u7684\u306a\u672b\u5c3e\u518d\u5e30\u6700\u9069\u5316\u304c\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\n\nLisp\u306e\u7df4\u7fd2\u3067\u66f8\u3044\u305f\u306e\u3067\u3053\u3053\u3067\u306f[\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9](https://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9)\u306e\u8a71\u306f\u3057\u306a\u3044\u3002\n\n## \u7d20\u76f4\u306a\u5b9f\u88c5\n\n```cl\n(defpackage naive-prime-search)\n(in-package naive-prime-search)\n\n;; prime-number?:: Num -> List Num -> Bool\n(defun prime-number? (n primes)\n  (cond\n    ((atom primes)               t)\n    ((eq 0 (mod n (car primes))) nil)\n    (t                           (prime-number? n (cdr primes)))))\n\n;; search-prime:: Num -> List Num -> Num -> List Num\n(defun search-prime (n primes max)\n  (cond\n    ((> n max)                primes)\n    ((prime-number? n primes) (search-prime (1+ n) (append primes (list n)) max))\n                              ;; append\u3092\u4f7f\u3046\u4e8b\u3067\u30ea\u30b9\u30c8\u5b8c\u5168\u30b3\u30d4\u30fc\u3002\u3069\u3046\u307f\u3066\u3082\u9045\u3044\n                              ;; \u672b\u5c3e\u518d\u5e30\u6700\u9069\u5316\u3055\u308c\u306a\u3055\u305d\u3046\u306a\u66f8\u304d\u65b9\n    (t                        (search-prime (1+ n) primes max))))\n\n(time (search-prime 3 '(2) 100000))\n```\n\n\u526f\u4f5c\u7528\u306e\u306a\u3044 `append` \u3068\u304b `cond` \u3067\u672b\u5c3e\u518d\u5e30\u3067\u306a\u3044\u66f8\u304d\u65b9\u3068\u304b\u3001\u3082\u3046\u898b\u308b\u304b\u3089\u306b\u9045\u305d\u3046\u3002\n\n```sh\n$ clisp -c naive-prime-search.lisp\n$ clisp naive-prime-search.fas\nReal time: 11.719404 sec.\nRun time: 11.668685 sec.\nSpace: 736128576 Bytes\nGC: 906, GC time: 4.034319 sec.\n```\n\nGC\u304c\u91cd\u305f\u3044\u3002\n\n## \u9ad8\u901f\u5316\u5f8c\n\n```cl\n(defpackage optimised-naive-prime-search)\n(in-package optimised-naive-prime-search)\n\n;; \u30ea\u30b9\u30c8\u3092\u63a2\u7d22\u3057\u305f\u3064\u3044\u3067\u306b\u7d20\u6570\u3092\u8ffd\u52a0\u3059\u3079\u304d\u672b\u5c3e\u30dd\u30a4\u30f3\u30bf\u3092\u8fd4\u3059\n;; (prime-number? n primes (cons 0 primes)) \u306e\u3088\u3046\u306a\u5f62\u3067 pre-primes \u306b\u306f\u9069\u5f53\u306a\u30ea\u30b9\u30c8\u3092\u7528\u610f\u3059\u308b\n;; prime-number?:: Num -> List Num -> List Num -> (Bool, List Num)\n(defun prime-number? (n primes pre-primes)\n  (cond\n    ((atom primes)               (cons t pre-primes))\n    ((eq 0 (mod n (car primes))) (cons nil pre-primes))\n    (t                           (prime-number? n (cdr primes) primes))))\n\n;; search-prime:: Num -> List Num -> Num -> List Num\n(defun search-prime (n primes max)\n  (if (> n max)\n    primes ;; \u63a2\u7d22\u7bc4\u56f2\u3092\u8d85\u3048\u305f\u3089\u7d42\u4e86\n    (let* ((tmp (prime-number? n primes (cons 0 primes)))\n           (prime? (car tmp)) ;; prime?: boolean\n           (ptr (cdr tmp)))   ;; ptr: \u3082\u3057\u7d20\u6570\u306a\u3089cdr\u3092\u66f8\u304d\u63db\u3048\u308b\u3079\u304d\u30b3\u30f3\u30b9\u30bb\u30eb\n      (if prime?\n        (setf (cdr ptr) (cons n nil)))    ;; setf\u306b\u3088\u308b\u30b3\u30f3\u30b9\u30bb\u30eb\u66f8\u304d\u63db\u3048\u3002\u30b3\u30d4\u30fc\u306f\u767a\u751f\u3057\u306a\u3044\n      (search-prime (1+ n) primes max)))) ;; clisp\u3067\u305d\u306e\u307e\u307e\u5b9f\u884c\u3057\u3066\u3082\u672b\u5c3e\u518d\u5e30\u6700\u9069\u5316\u3055\u308c\u306a\u3044\u3002clisp -c hoge.lisp \u3057\u3066\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u304a\u3044\u3066\u304b\u3089 clisp hoge.fas \u3057\u3088\u3046\n\n(time (search-prime 3 '(2) 100000))\n```\n\n\u672b\u5c3e\u518d\u5e30\u3068\u3001\u7834\u58ca\u7684\u306a\u30ea\u30b9\u30c8\u3078\u306e\u8ffd\u52a0\u3068\u30ea\u30b9\u30c8\u672b\u5c3e\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u3044\u56de\u3059\u3088\u3046\u306a\u9ad8\u901f\u5316\u3092\u8a66\u307f\u308b\u3002\n\n```sh\n$ clisp -c naive-prime-search.lisp\n$ clisp naive-prime-search.fas\nReal time: 7.283802 sec.\nRun time: 7.255682 sec.\nSpace: 3353536 Bytes\nGC: 5, GC time: 0.022078 sec.\n```\n\n\u5148\u307b\u3069\u3088\u308aGC\u6642\u9593\u304c\u5c11\u306a\u3044\u3002\n\n## \u6240\u611f\n\n* GC\u6642\u9593\u3092\u8003\u3048\u306a\u3051\u308c\u3070\u30eb\u30fc\u30d7\u901f\u5ea6\u306f\u305d\u308c\u307b\u3069\u5909\u308f\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u3060\uff1f\n* clisp(GNU CLISP 2.49)\u306e\u5834\u5408\u3001 `(defun a () (cond (flag1 nil) (flag2 (a)) (t (a))))` \u306e\u3088\u3046\u306a\u8907\u6570\u306e\u518d\u5e30\u304c\u3042\u308b\u5834\u5408\u3067\u3082goto\u7684\u306a\u672b\u5c3e\u518d\u5e30\u6700\u9069\u5316\u304c\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\n", "tags": ["common-lisp"]}