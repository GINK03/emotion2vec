{"context": " More than 1 year has passed since last update.\u500b\u4eba\u7684\u306b\u9b45\u4e86\u3055\u308c\u305fpython\u306e\u7279\u5fb4\u306e\u4e00\u3064\u3067\u3082\u3042\u308bdo a lot with little\u3068\u3044\u3046\u8003\u3048\u65b9\u3092\u30e1\u30e2\u4ee3\u308f\u308a\u306b\u3068\u3002\u3069\u3046\u3084\u3089\u3053\u306elist comprehension\u3068\u3044\u3046\u624b\u6cd5\u3092\u4f7f\u3048\u3070\u3088\u308a\u52b9\u7387\u7684\u306bpython\u3092\u64cd\u308c\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3068\u805e\u3044\u305f\u306e\u3067\u3001try it out see if its as kwl as it appears to be\u3067\u3059\u3002\n\nlist comprehension\u3068\u306f\nlist comprehensions\u3068\u306f\u7c21\u5358\u306b\u3044\u3048\u3070\u300c\u4f55\u884c\u306b\u3082\u6e21\u3063\u3066\u30eb\u30fc\u30d7\u4f7f\u3063\u3066\u5909\u6570\u3092\u3044\u3058\u3063\u3066\u3044\u304f\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u30ea\u30b9\u30c8\u306e\u4e2d\u3067\u5168\u3066\u5b8c\u7d50\u3055\u305b\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u300d\u3063\u3066\u3053\u3068\u3002\u4e00\u822c\u7684\u306a\u30e2\u30c7\u30eb\u306f[thing for thing in list_of_things]\u3002\n\u4f8b\u3048\u3070\u30ea\u30b9\u30c8\u306e\u4e2d\u8eab\u306e\u6570\u30922\u500d\u306b\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u95a2\u6570\u3092\u4f5c\u308a\u305f\u3044\u3068\u3059\u308b\u3002\u901a\u5e38\u306a\u3089:\nmylist = [1,2,3]\n\ndef list_doubler(lst):\n    doubled = []\n    for num in lst:\n        double.append(num*2)\n    return doubled\n\n\u95a2\u6570\u306e\u4e2d\u3067place holder\u3068\u3057\u3066doubled = []\u3068\u3057\u305d\u3053\u306b\u51e6\u7406\u3092\u7d42\u3048\u305f\u6570\u5b57\u3092\u4e00\u3064\u3065\u3064\u5165\u308c\u3066\u3044\u304f\u30a4\u30e1\u30fc\u30b8\u3002\u3064\u307e\u308amy_doubled_list = list_doubler(lst) #[2,4,6]\u3068\u3057\u3066my_doubled_list\u306b\u5165\u308c\u3066\u304a\u304f\u3053\u3068\u3082\u53ef\u80fd\u3002\u78ba\u304b\u306b\u3053\u3046\u3044\u3046\u3084\u308a\u304b\u305f\u3067\u3082\u3044\u3044\u306e\u3060\u304c\u3001\u6975\u7aef\u306a\u8a71\u308f\u3056\u308f\u3056\u3053\u3093\u306a\u306b\u9577\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304b\u306a\u304f\u3066\u3082\u5b9f\u8cea\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u30ea\u30b9\u30c8\u306e\u4e2d\u8eab\u3092\u5f04\u308a\u305f\u3044\u3060\u3051\u306a\u306e\u3067\u30ea\u30b9\u30c8\u306e\u4e2d\u3067\u3069\u3046\u306b\u304b\u5b8c\u7d50\u3055\u305b\u3089\u308c\u306a\u3044\u306e\uff1f\u3068\u3002\u3053\u3053\u3067list comprehension\u306e\u51fa\u756a\u3002\n\nlist comprehension\u3092\u4f5c\u3063\u3066\u307f\u308b\ndoubled = [thing for thing in list_of_things]\n\ndoubled = [num*2 for num in lst]\n# for\u306e\u524d\u306b\u3042\u308b\u306e\u304cdoubled\u306b\u8ffd\u52a0\u3055\u308c\u308b\n\n\u3053\u308c\u3067lst\u306e\u4e2d\u306b\u3042\u308b\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092\u4e00\u500b\u305a\u3064num\u304c\u30eb\u30fc\u30d7\u3057\u3066num*2\u3057\u3066\u304f\u308c\u308b\u3002\u76f4\u611f\u7684\u306b\u30ea\u30b9\u30c8\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u304ddoubled\u3068\u3044\u3046\u30ea\u30b9\u30c8\u306b\u4fdd\u5b58\u3055\u308c\u308b\u3002\u3053\u308c\u3092\u4e00\u756a\u6700\u521d\u306b\u4f7f\u3063\u305f\u95a2\u6570\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068:\ndef list_doubler(lst):\n    doubled = [num*2 for num in lst]\n    return doubled\n\n\u4f55\u884c\u3082\u304b\u3051\u3066\u66f8\u3044\u305ffor loop\u304c\u305f\u3063\u305f\u306e\u4e00\u884c\u306b\u3002\u3053\u308c\u306f\u3059\u3054\u3044\u3002\u3053\u308c\u306b\u9650\u3063\u305f\u3053\u3068\u3067\u306f\u306a\u3044\u304c\u3001\u3053\u306e\u95a2\u6570\u306b\u9069\u5f53\u306a\u30ea\u30b9\u30c8\u3092\u653e\u308a\u8fbc\u3093\u3067\u8fd4\u3063\u3066\u304d\u305f\u5024\uff08\u6b63\u78ba\u306b\u306f\u8fd4\u3063\u3066\u304d\u305f\u5024\u3092\u307e\u3068\u3081\u305f\u30ea\u30b9\u30c8\uff09\u3092\u4ed6\u306e\u5909\u6570\u306b\u4fdd\u5b58\u3059\u308b\u3002\u3068\u3044\u3046\u304b\u3053\u306e\u5834\u5408\u306f\u666e\u901a\u306b:\ndef list_doubler(lst):\n    return [num*2 for num in lst]\n\n\n\u305d\u306e\u4ed6\u306e\u4f8b\n>>> squares = []\n>>> for x in range(10):\n...     squares.append(x**2)\n...\n>>>squares\n[0,1,4,9,16,25,36,49,64,81]\n\n\u305f\u3060\u3053\u306e\u5834\u5408\u306fx\u304cside-effct\u3068\u3057\u3066\u6b8b\u3063\u3066\u3057\u307e\u3046\u3002\u305d\u3053\u3067:\nsquares = list(map(lambda x: x**2, range(10)))\n\u3067\u7dba\u9e97\u3055\u3063\u3071\u308a\u3002\u3082\u3057\u304f\u306flist comprehension\u3092\u4f7f\u3063\u3066:\nsquares = [x**2 for x in range(10)]\n\u3053\u308c\u306e\u307b\u3046\u304c\u8aad\u307f\u3084\u3059\u3044\u3057\u3001\u3055\u3063\u3071\u308a\u3057\u305f\u69cb\u9020\u306b\u306a\u308b\u3002\u4ee5\u4e0b\u306f\u30ea\u30b9\u30c8\u306e\u4e2d\u8eab\u3092\u8abf\u3079\u3066\u9055\u3046\u8981\u7d20\u304c\u5165\u3063\u3066\u3044\u305f\u3089\u304f\u3063\u3064\u3051\u3066\u304f\u308c\u308b\u3002\n>>> [(x,y) for x in [1,2,3] for y in [3,1,4] if x != y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n\n>>> combs = []\n>>> for x in [1,2,3]:\n        for y in [3,1,4]:\n            if x != y:\n                combs.append((x,y))\n...\n...\n>>> combs\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n\n\u305d\u306e\u4ed6\u6709\u52b9\u6d3b\u7528\u3067\u304d\u305d\u3046\u306a\u3082\u306e\u3092\u307e\u3068\u3081\u3066\u304a\u3044\u305f\u3002\n>>> vec = [-4, -2, 0, 2, 4]\n>>> # create a new list with the values doubled\n>>> [x*2 for x in vec]\n[-8, -4, 0, 4, 8]\n>>> # filter the list to exclude negative numbers\n>>> [x for x in vec if x >= 0]\n[0, 2, 4]\n>>> # apply a function to all the elements\n>>> [abs(x) for x in vec]\n[4, 2, 0, 2, 4]\n>>> # call a method on each element\n>>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']\n>>> [weapon.strip() for weapon in freshfruit]\n['banana', 'loganberry', 'passion fruit']\n>>> # create a list of 2-tuples like (number, square)\n>>> [(x, x**2) for x in range(6)]\n[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n>>> # the tuple must be parenthesized, otherwise an error is raised\n>>> [x, x**2 for x in range(6)]\n  File \"<stdin>\", line 1, in ?\n    [x, x**2 for x in range(6)]\n               ^\nSyntaxError: invalid syntax\n>>> # flatten a list using a listcomp with two 'for'\n>>> vec = [[1,2,3], [4,5,6], [7,8,9]]\n>>> [num for elem in vec for num in elem]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n>>> from math import pi\n>>> [str(round(pi, i)) for i in range(1, 6)]\n['3.1', '3.14', '3.142', '3.1416', '3.14159']\n\n\nList Comprehension with conditionals\n\u4e00\u822c\u7684\u306a\u5f62\u306f[thing for thing in list if (condition)]\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306a\u300c5\u6587\u5b57\u4ee5\u4e0a\u306e\u5358\u8a9e\u3092\u30ea\u30b9\u30c8\u306b\u3044\u308c\u3066\u8fd4\u3059\u300d\u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u3063\u305f\u3068\u3059\u308b\u3002\ndef long_words(lst):\n    words = []\n    for word in lst:\n        if len(word) > 5:\n            words.append(word)\n    return words\n\n\u5b9f\u969b\u306blist comprehension\u3092\u9069\u7528\u3055\u305b\u308b\u3068:\ndef long_words(lst):\n    return [word for word in lst]\n\ndef long_words(lst):\n    return [word for word in list if len(word) > 5]\n\n\nNested List Comprehensions\nList comprehension\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u8868\u306b\u3082\u9069\u7528\u3067\u304d\u308b\u3002\n>> matrix = [\n...     [1, 2, 3, 4],\n...     [5, 6, 7, 8],\n...     [9, 10, 11, 12],\n... ]\n\n>>> [[row[i] for row in matrix] for i in range(4)]\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n\n\u56f3\u3067\u8868\u3059\u3068\u3053\u3093\u306a\u611f\u3058:\n\n\u3053\u308c\u306f\u4ee5\u4e0b\uff12\u3064\u3068\u540c\u3058\u3067\u3042\u308b\u3002\n>>> transposed = []\n>>> for i in range(4):\n...     transposed.append([row[i] for row in matrix])\n...\n>>> transposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n\n>>> transposed = []\n>>> for i in range(4):\n...     # the following 3 lines implement the nested listcomp\n...     transposed_row = []\n...     for row in matrix:\n...         transposed_row.append(row[i])\n...     transposed.append(transposed_row)\n...\n>>> transposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n\n\nList Slicing\n\u53c2\u8003\u306e\u305f\u3081\u306b\u3064\u3044\u3067\u306b\u30ea\u30b9\u30c8\u30b9\u30e9\u30a4\u30b9\u3082SO\u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u306e\u3092\u8cbc\u3063\u3066\u304a\u304f\u3002\na[start:end] # items start through end-1\na[start:]    # items start through the rest of the array\na[:end]      # items from the beginning through end-1\na[:]         # a copy of the whole array\na[start:end:step] # start through not past end, by step\n\n\u3082\u3046\u65e2\u306b\u77e5\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\n\nThe key point to remember is that the :end value represents the first value that is not in the selected slice. So, the difference beween end and start is the number of elements selected (if step is 1, the default).\n\n\u6587\u5b57\u3092\u3072\u3063\u304f\u308a\u8fd4\u3057\u305f\u3044\u6642\u3068\u304b\u306b\u5f79\u306b\u7acb\u3064\u306e\u304c\u4ee5\u4e0b:\na[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items\n\n\u3061\u306a\u307f\u306b\u30ea\u30b9\u30c8\u306b\u306a\u3044\u3082\u306e\u3092\u6307\u5b9a\u3059\u308b\u3068\u7a7a\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u6ce8\u610f\u3002\n\nPython is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.\n\n\n\u53c2\u8003\u306b\u3057\u305f\u30ea\u30f3\u30af\n\nPython Single Line For Loops\n2. Built-in Functions\n5. Data Structures\nExplain Python's slice notation\n\n\u500b\u4eba\u7684\u306b\u9b45\u4e86\u3055\u308c\u305fpython\u306e\u7279\u5fb4\u306e\u4e00\u3064\u3067\u3082\u3042\u308b`do a lot with little`\u3068\u3044\u3046\u8003\u3048\u65b9\u3092\u30e1\u30e2\u4ee3\u308f\u308a\u306b\u3068\u3002\u3069\u3046\u3084\u3089\u3053\u306e`list comprehension`\u3068\u3044\u3046\u624b\u6cd5\u3092\u4f7f\u3048\u3070\u3088\u308a\u52b9\u7387\u7684\u306bpython\u3092\u64cd\u308c\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3068\u805e\u3044\u305f\u306e\u3067\u3001try it out see if its as kwl as it appears to be\u3067\u3059\u3002\n\n#list comprehension\u3068\u306f\n\nlist comprehensions\u3068\u306f\u7c21\u5358\u306b\u3044\u3048\u3070\u300c\u4f55\u884c\u306b\u3082\u6e21\u3063\u3066\u30eb\u30fc\u30d7\u4f7f\u3063\u3066\u5909\u6570\u3092\u3044\u3058\u3063\u3066\u3044\u304f\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u30ea\u30b9\u30c8\u306e\u4e2d\u3067\u5168\u3066\u5b8c\u7d50\u3055\u305b\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u300d\u3063\u3066\u3053\u3068\u3002\u4e00\u822c\u7684\u306a\u30e2\u30c7\u30eb\u306f`[thing for thing in list_of_things]`\u3002\n\n\u4f8b\u3048\u3070\u30ea\u30b9\u30c8\u306e\u4e2d\u8eab\u306e\u6570\u30922\u500d\u306b\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u95a2\u6570\u3092\u4f5c\u308a\u305f\u3044\u3068\u3059\u308b\u3002\u901a\u5e38\u306a\u3089:\n\n```\nmylist = [1,2,3]\n\ndef list_doubler(lst):\n    doubled = []\n    for num in lst:\n        double.append(num*2)\n    return doubled\n```\n\u95a2\u6570\u306e\u4e2d\u3067place holder\u3068\u3057\u3066`doubled = []`\u3068\u3057\u305d\u3053\u306b\u51e6\u7406\u3092\u7d42\u3048\u305f\u6570\u5b57\u3092\u4e00\u3064\u3065\u3064\u5165\u308c\u3066\u3044\u304f\u30a4\u30e1\u30fc\u30b8\u3002\u3064\u307e\u308a`my_doubled_list = list_doubler(lst) #[2,4,6]`\u3068\u3057\u3066`my_doubled_list`\u306b\u5165\u308c\u3066\u304a\u304f\u3053\u3068\u3082\u53ef\u80fd\u3002\u78ba\u304b\u306b\u3053\u3046\u3044\u3046\u3084\u308a\u304b\u305f\u3067\u3082\u3044\u3044\u306e\u3060\u304c\u3001\u6975\u7aef\u306a\u8a71\u308f\u3056\u308f\u3056\u3053\u3093\u306a\u306b\u9577\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304b\u306a\u304f\u3066\u3082\u5b9f\u8cea\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u30ea\u30b9\u30c8\u306e\u4e2d\u8eab\u3092\u5f04\u308a\u305f\u3044\u3060\u3051\u306a\u306e\u3067\u30ea\u30b9\u30c8\u306e\u4e2d\u3067\u3069\u3046\u306b\u304b\u5b8c\u7d50\u3055\u305b\u3089\u308c\u306a\u3044\u306e\uff1f\u3068\u3002\u3053\u3053\u3067list comprehension\u306e\u51fa\u756a\u3002\n\n##list comprehension\u3092\u4f5c\u3063\u3066\u307f\u308b\n\n```\ndoubled = [thing for thing in list_of_things]\n```\n\n```\ndoubled = [num*2 for num in lst]\n# for\u306e\u524d\u306b\u3042\u308b\u306e\u304cdoubled\u306b\u8ffd\u52a0\u3055\u308c\u308b\n```\n\n\u3053\u308c\u3067`lst`\u306e\u4e2d\u306b\u3042\u308b\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092\u4e00\u500b\u305a\u3064`num`\u304c\u30eb\u30fc\u30d7\u3057\u3066`num*2`\u3057\u3066\u304f\u308c\u308b\u3002\u76f4\u611f\u7684\u306b\u30ea\u30b9\u30c8\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u304d`doubled`\u3068\u3044\u3046\u30ea\u30b9\u30c8\u306b\u4fdd\u5b58\u3055\u308c\u308b\u3002\u3053\u308c\u3092\u4e00\u756a\u6700\u521d\u306b\u4f7f\u3063\u305f\u95a2\u6570\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068:\n\n```\ndef list_doubler(lst):\n    doubled = [num*2 for num in lst]\n    return doubled\n```\n\n\u4f55\u884c\u3082\u304b\u3051\u3066\u66f8\u3044\u305ffor loop\u304c\u305f\u3063\u305f\u306e\u4e00\u884c\u306b\u3002\u3053\u308c\u306f\u3059\u3054\u3044\u3002\u3053\u308c\u306b\u9650\u3063\u305f\u3053\u3068\u3067\u306f\u306a\u3044\u304c\u3001\u3053\u306e\u95a2\u6570\u306b\u9069\u5f53\u306a\u30ea\u30b9\u30c8\u3092\u653e\u308a\u8fbc\u3093\u3067\u8fd4\u3063\u3066\u304d\u305f\u5024\uff08\u6b63\u78ba\u306b\u306f\u8fd4\u3063\u3066\u304d\u305f\u5024\u3092\u307e\u3068\u3081\u305f\u30ea\u30b9\u30c8\uff09\u3092\u4ed6\u306e\u5909\u6570\u306b\u4fdd\u5b58\u3059\u308b\u3002\u3068\u3044\u3046\u304b\u3053\u306e\u5834\u5408\u306f\u666e\u901a\u306b:\n\n```\ndef list_doubler(lst):\n    return [num*2 for num in lst]\n```\n\n##\u305d\u306e\u4ed6\u306e\u4f8b\n\n```\n>>> squares = []\n>>> for x in range(10):\n...     squares.append(x**2)\n...\n>>>squares\n[0,1,4,9,16,25,36,49,64,81]\n```\n\u305f\u3060\u3053\u306e\u5834\u5408\u306f`x`\u304c[side-effct](http://qiita.com/weedslayer/items/9ac165613bc896a1aaa1)\u3068\u3057\u3066\u6b8b\u3063\u3066\u3057\u307e\u3046\u3002\u305d\u3053\u3067:\n\n`squares = list(map(lambda x: x**2, range(10)))`\n\n\u3067\u7dba\u9e97\u3055\u3063\u3071\u308a\u3002\u3082\u3057\u304f\u306flist comprehension\u3092\u4f7f\u3063\u3066:\n\n`squares = [x**2 for x in range(10)]`\n\n\u3053\u308c\u306e\u307b\u3046\u304c\u8aad\u307f\u3084\u3059\u3044\u3057\u3001\u3055\u3063\u3071\u308a\u3057\u305f\u69cb\u9020\u306b\u306a\u308b\u3002\u4ee5\u4e0b\u306f\u30ea\u30b9\u30c8\u306e\u4e2d\u8eab\u3092\u8abf\u3079\u3066\u9055\u3046\u8981\u7d20\u304c\u5165\u3063\u3066\u3044\u305f\u3089\u304f\u3063\u3064\u3051\u3066\u304f\u308c\u308b\u3002\n\n```\n>>> [(x,y) for x in [1,2,3] for y in [3,1,4] if x != y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n```\n\n```\n>>> combs = []\n>>> for x in [1,2,3]:\n        for y in [3,1,4]:\n            if x != y:\n                combs.append((x,y))\n...\n...\n>>> combs\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n```\n\n\u305d\u306e\u4ed6\u6709\u52b9\u6d3b\u7528\u3067\u304d\u305d\u3046\u306a\u3082\u306e\u3092\u307e\u3068\u3081\u3066\u304a\u3044\u305f\u3002\n\n```\n>>> vec = [-4, -2, 0, 2, 4]\n>>> # create a new list with the values doubled\n>>> [x*2 for x in vec]\n[-8, -4, 0, 4, 8]\n>>> # filter the list to exclude negative numbers\n>>> [x for x in vec if x >= 0]\n[0, 2, 4]\n>>> # apply a function to all the elements\n>>> [abs(x) for x in vec]\n[4, 2, 0, 2, 4]\n>>> # call a method on each element\n>>> freshfruit = ['  banana', '  loganberry ', 'passion fruit  ']\n>>> [weapon.strip() for weapon in freshfruit]\n['banana', 'loganberry', 'passion fruit']\n>>> # create a list of 2-tuples like (number, square)\n>>> [(x, x**2) for x in range(6)]\n[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]\n>>> # the tuple must be parenthesized, otherwise an error is raised\n>>> [x, x**2 for x in range(6)]\n  File \"<stdin>\", line 1, in ?\n    [x, x**2 for x in range(6)]\n               ^\nSyntaxError: invalid syntax\n>>> # flatten a list using a listcomp with two 'for'\n>>> vec = [[1,2,3], [4,5,6], [7,8,9]]\n>>> [num for elem in vec for num in elem]\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n>>> from math import pi\n>>> [str(round(pi, i)) for i in range(1, 6)]\n['3.1', '3.14', '3.142', '3.1416', '3.14159']\n```\n\n#List Comprehension with conditionals\n\n\u4e00\u822c\u7684\u306a\u5f62\u306f`[thing for thing in list if (condition)]`\u3002\n\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u69d8\u306a\u300c5\u6587\u5b57\u4ee5\u4e0a\u306e\u5358\u8a9e\u3092\u30ea\u30b9\u30c8\u306b\u3044\u308c\u3066\u8fd4\u3059\u300d\u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u3063\u305f\u3068\u3059\u308b\u3002\n\n```\ndef long_words(lst):\n    words = []\n    for word in lst:\n        if len(word) > 5:\n            words.append(word)\n    return words\n```\n\n\u5b9f\u969b\u306blist comprehension\u3092\u9069\u7528\u3055\u305b\u308b\u3068:\n\n```\ndef long_words(lst):\n    return [word for word in lst]\n```\n\n```\ndef long_words(lst):\n    return [word for word in list if len(word) > 5]\n```\n\n#Nested List Comprehensions\n\nList comprehension\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u30de\u30c8\u30ea\u30c3\u30af\u30b9\u8868\u306b\u3082\u9069\u7528\u3067\u304d\u308b\u3002\n\n```\n>> matrix = [\n...     [1, 2, 3, 4],\n...     [5, 6, 7, 8],\n...     [9, 10, 11, 12],\n... ]\n\n>>> [[row[i] for row in matrix] for i in range(4)]\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n```\n\n\u56f3\u3067\u8868\u3059\u3068\u3053\u3093\u306a\u611f\u3058:\n\n![Screen Shot 2016-02-05 at 1.20.30 AM.png](https://qiita-image-store.s3.amazonaws.com/0/87666/7e519e1d-af8e-fbb6-676c-b4c9d80ababf.png)\n\n\u3053\u308c\u306f\u4ee5\u4e0b\uff12\u3064\u3068\u540c\u3058\u3067\u3042\u308b\u3002\n\n```\n>>> transposed = []\n>>> for i in range(4):\n...     transposed.append([row[i] for row in matrix])\n...\n>>> transposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n```\n\n```\n>>> transposed = []\n>>> for i in range(4):\n...     # the following 3 lines implement the nested listcomp\n...     transposed_row = []\n...     for row in matrix:\n...         transposed_row.append(row[i])\n...     transposed.append(transposed_row)\n...\n>>> transposed\n[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]\n```\n#List Slicing\n\n\u53c2\u8003\u306e\u305f\u3081\u306b\u3064\u3044\u3067\u306b\u30ea\u30b9\u30c8\u30b9\u30e9\u30a4\u30b9\u3082SO\u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u306e\u3092\u8cbc\u3063\u3066\u304a\u304f\u3002\n\n```\na[start:end] # items start through end-1\na[start:]    # items start through the rest of the array\na[:end]      # items from the beginning through end-1\na[:]         # a copy of the whole array\na[start:end:step] # start through not past end, by step\n```\n\n\u3082\u3046\u65e2\u306b\u77e5\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\n>\n_The key point to remember is that the :end value represents the first value that is not in the selected slice. So, the difference beween end and start is the number of elements selected (if step is 1, the default)._\n\n\u6587\u5b57\u3092\u3072\u3063\u304f\u308a\u8fd4\u3057\u305f\u3044\u6642\u3068\u304b\u306b\u5f79\u306b\u7acb\u3064\u306e\u304c\u4ee5\u4e0b:\n\n```\na[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items\n```\n\n\u3061\u306a\u307f\u306b\u30ea\u30b9\u30c8\u306b\u306a\u3044\u3082\u306e\u3092\u6307\u5b9a\u3059\u308b\u3068\u7a7a\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n>\n_Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen._\n\n#\u53c2\u8003\u306b\u3057\u305f\u30ea\u30f3\u30af\n\n- [Python Single Line For Loops](http://blog.teamtreehouse.com/python-single-line-loops)\n- [2. Built-in Functions](https://docs.python.org/3/library/functions.html#round)\n- [5. Data Structures](https://docs.python.org/3/tutorial/datastructures.html)\n- [Explain Python's slice notation](http://stackoverflow.com/questions/509211/explain-pythons-slice-notation)\n", "tags": ["list", "python3"]}