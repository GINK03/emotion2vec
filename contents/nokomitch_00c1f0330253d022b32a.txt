{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nCoursera\u306eMachine Learning\u30af\u30e9\u30b9(Andrew Ng\u5148\u751f)\u306e\u8ab2\u984c\u3092Python\u3067\u5b9f\u88c5\u3059\u308b\u30b7\u30ea\u30fc\u30ba\u3002\nex6\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3(SVM)\u3092\u4f7f\u3063\u305f\u5206\u985e\u3092\u3084\u308a\u307e\u3059\u3002\n\n\u7dda\u5f62SVM\n\u307e\u305a\u306f\u7dda\u5f62\uff08\u30ab\u30fc\u30cd\u30eb\u306a\u3057\uff09SVM\u3067\u3059\u3002scikit-learn\u3067\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u304c\u7d71\u4e00\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3093\u306a\u30e2\u30c7\u30eb\u3067\u3082\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u3063\u3066\u304b\u3089 model.fit(X,y) \u3067\u5b66\u7fd2\u3067\u304d\u307e\u3059\u3002\u7dda\u5f62\u56de\u5e30\u3067\u3042\u308d\u3046\u304c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u3042\u308d\u3046\u304cSVM\u3067\u3042\u308d\u3046\u304c\u540c\u3058\u6587\u6cd5\u306b\u306a\u308a\u307e\u3059\u3002SVM\u306fsklearn.svm.SVC()\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n\u3044\u3064\u3082\u3068\u540c\u3058\u3088\u3046\u306b\u3001scipy.scio.loadmat\u3092\u4f7f\u3063\u3066Matlab\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u5b66\u7fd2\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as scio\nfrom sklearn import svm\n\n# scipy.io.loadmat()\u3092\u4f7f\u3063\u3066matlab\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ndata = scio.loadmat('ex6data1.mat')\nX = data['X']\ny = data['y'].ravel()\n\npos = (y==1) # numpy bool index\nneg = (y==0) # numpy bool index\nplt.scatter(X[pos,0], X[pos,1], marker='+', c='k')\nplt.scatter(X[neg,0], X[neg,1], marker='o', c='y')\n\n# \u7dda\u5f62SVM\nmodel = svm.SVC(C=1.0, kernel='linear')\nmodel.fit(X, y)\n\n# \u6c7a\u5b9a\u5883\u754c\u3092\u63cf\u304f\npx = np.linspace( np.min(X[:,0]), np.max(X[:,0]), 100)\nw = model.coef_[0]\npy = - (w[0]*px + model.intercept_[0]) / w[1]\nplt.plot(px,py)\nplt.show()\n\n\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n\n\u3053\u3053\u3067\u8ab2\u984c\u306b\u5f93\u3063\u3066\u3001SVM\u306e\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308bC\u3092\u8abf\u6574\u3057\u3066\u6319\u52d5\u306e\u5909\u5316\u3092\u898b\u307e\u3059\u3002C=100.0\u3068\u3057\u305f\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n\nC\u3092\u5927\u304d\u304f\u3059\u308b\u3068\u6b63\u5247\u5316\u304c\u5f31\u307e\u308a\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u3001\u5de6\u306e\u65b9\u306b\u3042\u308b\u5916\u308c\u5024\u3082\u3061\u3083\u3093\u3068\u5206\u985e\u3059\u308b\u3088\u3046\u306b\u6c7a\u5b9a\u5883\u754c\u304c\u5909\u5316\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u306f\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c8\uff08\u904e\u5b66\u7fd2\uff09\u6c17\u5473\u3067\u3001\u5148\u307b\u3069\u306eC=1.0\u3068\u3057\u305f\u6642\u306e\u307b\u3046\u304c\u81ea\u7136\u306a\u5f62\u306e\u5206\u985e\u3068\u3044\u3048\u308b\u3067\u3057\u3087\u3046\u3002\n\n\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30ebSVM\n\u6b21\u306e\u8ab2\u984c\u3067\u306f\u3001\u76f4\u7dda\u3067\u306f\u5206\u3051\u308b\u306e\u304c\u96e3\u3057\u3044\u5225\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30ebSVM\u3067\u5206\u985e\u3057\u307e\u3059\u3002\n\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u3092\u4f7f\u3046\u306e\u3067\u3001svm.SVC\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067kernel='rbf'\u3068\u3057\u307e\u3059\u3002\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as scio\nfrom sklearn import svm\n\n# scipy.io.loadmat()\u3092\u4f7f\u3063\u3066matlab\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ndata = scio.loadmat('ex6data2.mat')\nX = data['X']\ny = data['y'].ravel()\n\npos = (y==1) # numpy bool index\nneg = (y==0) # numpy bool index\nplt.scatter(X[pos,0], X[pos,1], marker='+', c='k')\nplt.scatter(X[neg,0], X[neg,1], marker='o', c='y')\n\n# \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb(RBF)SVM\nmodel = svm.SVC(C=1.0, gamma=50.0, kernel='rbf', probability=True)\nmodel.fit(X, y)\n\n# Decision Boundary(\u6c7a\u5b9a\u5883\u754c)\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\npx = np.arange(0, 1, 0.01)\npy = np.arange(0, 1, 0.01)\nPX, PY = np.meshgrid(px, py) # PX,PY\u306f\u305d\u308c\u305e\u308c 100x100 \u884c\u5217\nXX = np.c_[PX.ravel(), PY.ravel()] # XX\u306f 10000x2\u884c\u5217\nZ = model.predict_proba(XX)[:,1] # SVM\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3002y=1\u306e\u78ba\u7387\u306f\u7d50\u679c\u306e2\u5217\u76ee\u306b\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u53d6\u308a\u51fa\u3059\u3002Z\u306f10000\u6b21\u5143\u30d9\u30af\u30c8\u30eb\nZ = Z.reshape(PX.shape) # Z\u3092100x100\u884c\u5217\u306b\u5909\u63db\nplt.contour(PX, PY, Z, levels=[0.5], linewidths=3) # Z=0.5\u306e\u7b49\u9ad8\u7dda\u304c\u6c7a\u5b9a\u5883\u754c\u3068\u306a\u308b\nplt.xlim(0.0,1.0)\nplt.ylim(0.4,1.0)\nplt.show()\n\n\u7d50\u679c\u306e\u30d7\u30ed\u30c3\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u3001\u8907\u96d1\u306a\u5f62\u306e\u6c7a\u5b9a\u5883\u754c\u306b\u306a\u308b\u30c7\u30fc\u30bf\u3067\u3082\u304d\u308c\u3044\u306b\u5206\u985e\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u30dd\u30a4\u30f3\u30c8\u306b\u306a\u308b\u306e\u304c\u3001SVM\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u3064\u3067\u3042\u308bRBF\u30ab\u30fc\u30cd\u30eb\u306egamma\u306b\u3064\u3044\u3066\u3002Coursera\u3067\u306f\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u306f\nKgaussian(x(i),x(j))=exp(\u2212||x(i)\u2212x(j)||22\u03c32)Kgaussian(x(i),x(j))=exp(\u2212||x(i)\u2212x(j)||22\u03c32) K_{gaussian}(x^{(i)},x^{(j)}) = \\exp(-\\frac{||x^{(i)} - x^{(j)}||^2}{2\\sigma^2}) \n\u306e\u5f62\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u5bfe\u3057\u3001scikit-learn\u3067\u306eRBF\u30ab\u30fc\u30cd\u30eb\u306f\nexp(\u2212\u03b3|x\u2212x\u2032|2) \\exp(-\\gamma \\left| x-x' \\right| ^2) \n\u306e\u5f62\u306b\u306a\u3063\u3066\u304a\u308a\u3001sklearn.svm.SVC()\u306b\u306f\u03b3\\gamma gamma\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u30022\u5f0f\u3092\u898b\u6bd4\u3079\u308b\u3068\u3001\u03b3=12\u03c32 \\gamma = \\frac{1}{2\\sigma^2}  \u3068\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002Coursera\u306e\u4f8b\u984c\u3067\u306f \u03c3=0.1\\sigma = 0.1 \u3068\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u3053\u308c\u306b\u5bfe\u5fdc\u3057\u3066 \u03b3=50\\gamma = 50 \u3068\u3057\u307e\u3057\u305f\u3002\n\n\u30d1\u30e9\u30e1\u30fc\u30bf C\u3068\u03c3 \u306e\u8abf\u6574\u6cd5\n\u3053\u3053\u307e\u3067\u3067\u898b\u305f\u3088\u3046\u306b\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30ebSVM\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bfC\u3068\u03c3\\sigma\u306e\u8abf\u6574\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n\nC\u306f\u6b63\u5247\u5316\u306e\u5f37\u3055\u3002C\u304c\u5c0f\u3055\u3044\u307b\u3069\u6b63\u5247\u5316\u3059\u308b\uff08\uff1d\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u306a\u304f\u306a\u308b\u3001\u6c4e\u5316\u6027\u80fd\u304c\u5f37\u304f\u306a\u308b\uff09\u3001C\u304c\u5927\u304d\u3044\u307b\u3069\u6b63\u5247\u5316\u3057\u306a\u3044\uff08\uff1d\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3001\u904e\u5b66\u7fd2\u306b\u306a\u308b\uff09\n\u03c3\\sigma\u306f\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u306e\u5e45\u306e\u5e83\u3055\u3002\u03c3\\sigma\u304c\u5927\u304d\u3044\u307b\u3069\u5206\u985e\u5883\u754c\u304c\u306a\u3081\u3089\u304b\u306b\u306a\u308b\n\n\u3068\u3044\u3046\u7279\u6027\u3092\u8e0f\u307e\u3048\u3066\u3001\u4e21\u65b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u3067\u3001\u6b21\u306e\u8ab2\u984c\u3067\u306f\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3001\u7570\u306a\u308bC\u3068\u03c3\\sigma\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u5b66\u7fd2\u3092\u5b9f\u65bd\u3057\u3001\u5206\u985e\u306e\u6b63\u7b54\u7387\u304c\u6700\u3082\u9ad8\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u3092\u63a1\u7528\u3057\u307e\u3059\u3002C\u3068\u03c3\\sigma\u306e\u5024\u3068\u3057\u3066 0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30 \u306e8\u7a2e\u985e\u306e\u5024\u3092\u8a66\u3059\u306e\u3067\u30018x8=64\u56de\u5b66\u7fd2\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as scio\nfrom sklearn import svm\n\n# scipy.io.loadmat()\u3092\u4f7f\u3063\u3066matlab\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ndata = scio.loadmat('ex6data3.mat')\nX = data['X']\ny = data['y'].ravel()\nXval = data['Xval']\nyval = data['yval'].ravel()\n\nc_values = np.array([0.01, 0.03, 0.1, 0.3, 1.0, 3.0, 10.0, 30.0])\ngamma_values = 1/ (2* c_values**2)\n\n# C \u3068 gamma \u3092\u5909\u3048\u3066 \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb(RBF)SVM\u3092\u5b66\u7fd2\nscores = np.zeros([8,8])\nfor i_c in range(0,8):\n    for i_g in range(0,8):\n        model = svm.SVC(C=c_values[i_c], gamma=gamma_values[i_g], kernel='rbf')\n        model.fit(X, y)\n        # \u4ea4\u5dee\u691c\u5b9a\u7528\u30c7\u30fc\u30bf\u3067\u306e\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\n        scores[i_c, i_g] = model.score(Xval, yval) \n\n# Score\u304c\u6700\u5927\u306eC,gamma\u3092\u6c42\u3081\u308b\nmax_idx = np.unravel_index(np.argmax(scores), scores.shape)\n# \u6700\u5927\u306eC, gamma\u3092\u4f7f\u3063\u3066\u518d\u5ea6SVM\u3092\u5b66\u7fd2\nmodel = svm.SVC(C=c_values[max_idx[0]], gamma=gamma_values[max_idx[1]], kernel='rbf', probability=True)\nmodel.fit(X, y)\n\n# \u4ea4\u5dee\u691c\u5b9a\u30c7\u30fc\u30bf\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\npos = (yval==1) # numpy bool index\nneg = (yval==0) # numpy bool index\nplt.scatter(Xval[pos,0], Xval[pos,1], marker='+', c='k')\nplt.scatter(Xval[neg,0], Xval[neg,1], marker='o', c='y')\n\n# Decision Boundary(\u6c7a\u5b9a\u5883\u754c)\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\npx = np.arange(-0.6, 0.25, 0.01)\npy = np.arange(-0.8, 0.6, 0.01)\nPX, PY = np.meshgrid(px, py) # PX,PY\u306f\u305d\u308c\u305e\u308c 100x100 \u884c\u5217\nXX = np.c_[PX.ravel(), PY.ravel()] # XX\u306f 10000x2\u884c\u5217\nZ = model.predict_proba(XX)[:,1] # SVM\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3002y=1\u306e\u78ba\u7387\u306f\u7d50\u679c\u306e2\u5217\u76ee\u306b\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u53d6\u308a\u51fa\u3059\u3002Z\u306f10000\u6b21\u5143\u30d9\u30af\u30c8\u30eb\nZ = Z.reshape(PX.shape) # Z\u3092100x100\u884c\u5217\u306b\u5909\u63db\nplt.contour(PX, PY, Z, levels=[0.5], linewidths=3) # Z=0.5\u306e\u7b49\u9ad8\u7dda\u304c\u6c7a\u5b9a\u5883\u754c\u3068\u306a\u308b\nplt.show()\n\n\u4ea4\u5dee\u691c\u5b9a\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\u3057\u305f\u7d50\u679c C=1.0, gamma=0.1\u304c\u6700\u3082\u6027\u80fd\u304c\u9ad8\u304f\u306a\u308a\u3001\u305d\u306e\u5206\u985e\u5668\u306e\u6c7a\u5b9a\u5883\u754c\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u30e1\u30e2\n- numpy 2\u6b21\u5143\u914d\u5217A\u306e\u4e2d\u304b\u3089\u6700\u5927\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6c42\u3081\u308b\u65b9\u6cd5 --> np.unravel_index(np.argmax(A),A.shape) \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u5165\u3063\u305f\u30bf\u30d7\u30eb\u304c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u3063\u3066\u304f\u308b\u3002\n\n\u307e\u3068\u3081\nAndrew\u5148\u751f\u306f\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3001\u7dda\u5f62SVM\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30ebSVM\u306e\u4f7f\u3044\u5206\u3051\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u3092\u51fa\u3057\u3066\u3044\u307e\u3057\u305f\u3002\nm= \u30b5\u30f3\u30d7\u30eb\uff08\u8a13\u7df4\u30c7\u30fc\u30bf\uff09\u6570\u3001n= feature\u306e\u6570\u3068\u3059\u308b\u3068\n\nn \u304c\u5927\u304d\u304f (~10000) m\u304c\u5c0f\u3055\u3044 (~1000) \u306a\u3089\u3070\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30 \u307e\u305f\u306f \u7dda\u5f62SVM\uff08-->\u8907\u96d1\u306a\u975e\u7dda\u5f62\u6c7a\u5b9a\u5883\u754c\u3092\u3064\u304f\u308b\u307b\u3069\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u591a\u304f\u306a\u3044\u304b\u3089\uff09\nn \u304c\u5c0f\u3055\u304f (1~1000) m\u304c\u307b\u3069\u307b\u3069 (~5\u4e07)\u306a\u3089\u3070 \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30ebSVM\nn \u304c\u5c0f\u3055\u304f (1~1000) m\u304c\u3068\u3066\u3082\u5927\u304d\u3044\uff08100\u4e07\u3068\u304b\uff09\u306a\u3089\u3070 Feature\u3092\u8ffd\u52a0\u3057\u3066\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u307e\u305f\u306f\u7dda\u5f62SVM \uff08m\u304c\u5927\u304d\u3044\u3068\u30ac\u30a6\u30b7\u30a2\u30f3SVM\u306f\u9045\u3044\u304b\u3089\uff09\n\nex6\u306e\u5f8c\u534a\uff08SVM\u3092\u7528\u3044\u305f\u30b9\u30d1\u30e0\u30d5\u30a3\u30eb\u30bf\u30fc\uff09\u306f\u5225\u9014\u3084\u308a\u307e\u3059\u3002\n### \u306f\u3058\u3081\u306b\n\nCoursera\u306eMachine Learning\u30af\u30e9\u30b9(Andrew Ng\u5148\u751f)\u306e\u8ab2\u984c\u3092Python\u3067\u5b9f\u88c5\u3059\u308b\u30b7\u30ea\u30fc\u30ba\u3002\nex6\u3067\u306f\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3(SVM)\u3092\u4f7f\u3063\u305f\u5206\u985e\u3092\u3084\u308a\u307e\u3059\u3002\n\n### \u7dda\u5f62SVM\n\n\u307e\u305a\u306f\u7dda\u5f62\uff08\u30ab\u30fc\u30cd\u30eb\u306a\u3057\uff09SVM\u3067\u3059\u3002scikit-learn\u3067\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u306e\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u304c\u7d71\u4e00\u3055\u308c\u3066\u304a\u308a\u3001\u3069\u3093\u306a\u30e2\u30c7\u30eb\u3067\u3082\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u3063\u3066\u304b\u3089 `model.fit(X,y)` \u3067\u5b66\u7fd2\u3067\u304d\u307e\u3059\u3002\u7dda\u5f62\u56de\u5e30\u3067\u3042\u308d\u3046\u304c\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3067\u3042\u308d\u3046\u304cSVM\u3067\u3042\u308d\u3046\u304c\u540c\u3058\u6587\u6cd5\u306b\u306a\u308a\u307e\u3059\u3002SVM\u306f`sklearn.svm.SVC()`\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n\u3044\u3064\u3082\u3068\u540c\u3058\u3088\u3046\u306b\u3001`scipy.scio.loadmat`\u3092\u4f7f\u3063\u3066Matlab\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u5b66\u7fd2\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\n```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as scio\nfrom sklearn import svm\n\n# scipy.io.loadmat()\u3092\u4f7f\u3063\u3066matlab\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ndata = scio.loadmat('ex6data1.mat')\nX = data['X']\ny = data['y'].ravel()\n\npos = (y==1) # numpy bool index\nneg = (y==0) # numpy bool index\nplt.scatter(X[pos,0], X[pos,1], marker='+', c='k')\nplt.scatter(X[neg,0], X[neg,1], marker='o', c='y')\n\n# \u7dda\u5f62SVM\nmodel = svm.SVC(C=1.0, kernel='linear')\nmodel.fit(X, y)\n\n# \u6c7a\u5b9a\u5883\u754c\u3092\u63cf\u304f\npx = np.linspace( np.min(X[:,0]), np.max(X[:,0]), 100)\nw = model.coef_[0]\npy = - (w[0]*px + model.intercept_[0]) / w[1]\nplt.plot(px,py)\nplt.show()\n```\n\n\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n![ex6-1.PNG](https://qiita-image-store.s3.amazonaws.com/0/96897/89418cf5-c055-7ec8-18a1-af1041e1ec1c.png)\n\n\u3053\u3053\u3067\u8ab2\u984c\u306b\u5f93\u3063\u3066\u3001SVM\u306e\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b`C`\u3092\u8abf\u6574\u3057\u3066\u6319\u52d5\u306e\u5909\u5316\u3092\u898b\u307e\u3059\u3002`C=100.0`\u3068\u3057\u305f\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n![ex6-2.PNG](https://qiita-image-store.s3.amazonaws.com/0/96897/2a4fd160-318f-755d-be88-0bc92b109859.png)\n\n`C`\u3092\u5927\u304d\u304f\u3059\u308b\u3068\u6b63\u5247\u5316\u304c\u5f31\u307e\u308a\u307e\u3059\u3002\u3053\u306e\u305f\u3081\u3001\u5de6\u306e\u65b9\u306b\u3042\u308b\u5916\u308c\u5024\u3082\u3061\u3083\u3093\u3068\u5206\u985e\u3059\u308b\u3088\u3046\u306b\u6c7a\u5b9a\u5883\u754c\u304c\u5909\u5316\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u306f\u30aa\u30fc\u30d0\u30fc\u30d5\u30a3\u30c3\u30c8\uff08\u904e\u5b66\u7fd2\uff09\u6c17\u5473\u3067\u3001\u5148\u307b\u3069\u306e`C=1.0`\u3068\u3057\u305f\u6642\u306e\u307b\u3046\u304c\u81ea\u7136\u306a\u5f62\u306e\u5206\u985e\u3068\u3044\u3048\u308b\u3067\u3057\u3087\u3046\u3002\n\n### \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30ebSVM\n\n\u6b21\u306e\u8ab2\u984c\u3067\u306f\u3001\u76f4\u7dda\u3067\u306f\u5206\u3051\u308b\u306e\u304c\u96e3\u3057\u3044\u5225\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30ebSVM\u3067\u5206\u985e\u3057\u307e\u3059\u3002\n\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u3092\u4f7f\u3046\u306e\u3067\u3001`svm.SVC`\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067` kernel='rbf' `\u3068\u3057\u307e\u3059\u3002\n\n```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as scio\nfrom sklearn import svm\n\n# scipy.io.loadmat()\u3092\u4f7f\u3063\u3066matlab\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ndata = scio.loadmat('ex6data2.mat')\nX = data['X']\ny = data['y'].ravel()\n\npos = (y==1) # numpy bool index\nneg = (y==0) # numpy bool index\nplt.scatter(X[pos,0], X[pos,1], marker='+', c='k')\nplt.scatter(X[neg,0], X[neg,1], marker='o', c='y')\n\n# \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb(RBF)SVM\nmodel = svm.SVC(C=1.0, gamma=50.0, kernel='rbf', probability=True)\nmodel.fit(X, y)\n\n# Decision Boundary(\u6c7a\u5b9a\u5883\u754c)\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\npx = np.arange(0, 1, 0.01)\npy = np.arange(0, 1, 0.01)\nPX, PY = np.meshgrid(px, py) # PX,PY\u306f\u305d\u308c\u305e\u308c 100x100 \u884c\u5217\nXX = np.c_[PX.ravel(), PY.ravel()] # XX\u306f 10000x2\u884c\u5217\nZ = model.predict_proba(XX)[:,1] # SVM\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3002y=1\u306e\u78ba\u7387\u306f\u7d50\u679c\u306e2\u5217\u76ee\u306b\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u53d6\u308a\u51fa\u3059\u3002Z\u306f10000\u6b21\u5143\u30d9\u30af\u30c8\u30eb\nZ = Z.reshape(PX.shape) # Z\u3092100x100\u884c\u5217\u306b\u5909\u63db\nplt.contour(PX, PY, Z, levels=[0.5], linewidths=3) # Z=0.5\u306e\u7b49\u9ad8\u7dda\u304c\u6c7a\u5b9a\u5883\u754c\u3068\u306a\u308b\nplt.xlim(0.0,1.0)\nplt.ylim(0.4,1.0)\nplt.show()\n```\n\n\u7d50\u679c\u306e\u30d7\u30ed\u30c3\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u3001\u8907\u96d1\u306a\u5f62\u306e\u6c7a\u5b9a\u5883\u754c\u306b\u306a\u308b\u30c7\u30fc\u30bf\u3067\u3082\u304d\u308c\u3044\u306b\u5206\u985e\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n![ex6-3.PNG](https://qiita-image-store.s3.amazonaws.com/0/96897/95c6efb7-023d-2456-092f-08158bc208e5.png)\n\n\n\u4eca\u56de\u30dd\u30a4\u30f3\u30c8\u306b\u306a\u308b\u306e\u304c\u3001SVM\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4e00\u3064\u3067\u3042\u308bRBF\u30ab\u30fc\u30cd\u30eb\u306e`gamma`\u306b\u3064\u3044\u3066\u3002Coursera\u3067\u306f\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u306f\n$$ K_{gaussian}(x^{(i)},x^{(j)}) = \\exp(-\\frac{||x^{(i)} - x^{(j)}||^2}{2\\sigma^2}) $$\n\u306e\u5f62\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u5bfe\u3057\u3001scikit-learn\u3067\u306eRBF\u30ab\u30fc\u30cd\u30eb\u306f\n$$ \\exp(-\\gamma \\left| x-x' \\right| ^2) $$\n\u306e\u5f62\u306b\u306a\u3063\u3066\u304a\u308a\u3001`sklearn.svm.SVC()`\u306b\u306f$\\gamma$ `gamma`\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u30022\u5f0f\u3092\u898b\u6bd4\u3079\u308b\u3068\u3001$ \\gamma = \\frac{1}{2\\sigma^2} $ \u3068\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002Coursera\u306e\u4f8b\u984c\u3067\u306f $\\sigma = 0.1$ \u3068\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u305f\u306e\u3067\u3001\u3053\u308c\u306b\u5bfe\u5fdc\u3057\u3066 $\\gamma = 50$ \u3068\u3057\u307e\u3057\u305f\u3002\n\n### \u30d1\u30e9\u30e1\u30fc\u30bf `C`\u3068\u03c3 \u306e\u8abf\u6574\u6cd5\n\n\u3053\u3053\u307e\u3067\u3067\u898b\u305f\u3088\u3046\u306b\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30ebSVM\u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf`C`\u3068$\\sigma$\u306e\u8abf\u6574\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n- `C`\u306f\u6b63\u5247\u5316\u306e\u5f37\u3055\u3002C\u304c\u5c0f\u3055\u3044\u307b\u3069\u6b63\u5247\u5316\u3059\u308b\uff08\uff1d\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3057\u306a\u304f\u306a\u308b\u3001\u6c4e\u5316\u6027\u80fd\u304c\u5f37\u304f\u306a\u308b\uff09\u3001C\u304c\u5927\u304d\u3044\u307b\u3069\u6b63\u5247\u5316\u3057\u306a\u3044\uff08\uff1d\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3001\u904e\u5b66\u7fd2\u306b\u306a\u308b\uff09\n- $\\sigma$\u306f\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u306e\u5e45\u306e\u5e83\u3055\u3002$\\sigma$\u304c\u5927\u304d\u3044\u307b\u3069\u5206\u985e\u5883\u754c\u304c\u306a\u3081\u3089\u304b\u306b\u306a\u308b\n\n\u3068\u3044\u3046\u7279\u6027\u3092\u8e0f\u307e\u3048\u3066\u3001\u4e21\u65b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u3067\u3001\u6b21\u306e\u8ab2\u984c\u3067\u306f\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u5bfe\u3057\u3001\u7570\u306a\u308b`C`\u3068$\\sigma$\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u5b66\u7fd2\u3092\u5b9f\u65bd\u3057\u3001\u5206\u985e\u306e\u6b63\u7b54\u7387\u304c\u6700\u3082\u9ad8\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u3092\u63a1\u7528\u3057\u307e\u3059\u3002`C`\u3068$\\sigma$\u306e\u5024\u3068\u3057\u3066 0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30 \u306e8\u7a2e\u985e\u306e\u5024\u3092\u8a66\u3059\u306e\u3067\u30018x8=64\u56de\u5b66\u7fd2\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n\n```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as scio\nfrom sklearn import svm\n\n# scipy.io.loadmat()\u3092\u4f7f\u3063\u3066matlab\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\ndata = scio.loadmat('ex6data3.mat')\nX = data['X']\ny = data['y'].ravel()\nXval = data['Xval']\nyval = data['yval'].ravel()\n\nc_values = np.array([0.01, 0.03, 0.1, 0.3, 1.0, 3.0, 10.0, 30.0])\ngamma_values = 1/ (2* c_values**2)\n\n# C \u3068 gamma \u3092\u5909\u3048\u3066 \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb(RBF)SVM\u3092\u5b66\u7fd2\nscores = np.zeros([8,8])\nfor i_c in range(0,8):\n    for i_g in range(0,8):\n        model = svm.SVC(C=c_values[i_c], gamma=gamma_values[i_g], kernel='rbf')\n        model.fit(X, y)\n        # \u4ea4\u5dee\u691c\u5b9a\u7528\u30c7\u30fc\u30bf\u3067\u306e\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\n        scores[i_c, i_g] = model.score(Xval, yval) \n\n# Score\u304c\u6700\u5927\u306eC,gamma\u3092\u6c42\u3081\u308b\nmax_idx = np.unravel_index(np.argmax(scores), scores.shape)\n# \u6700\u5927\u306eC, gamma\u3092\u4f7f\u3063\u3066\u518d\u5ea6SVM\u3092\u5b66\u7fd2\nmodel = svm.SVC(C=c_values[max_idx[0]], gamma=gamma_values[max_idx[1]], kernel='rbf', probability=True)\nmodel.fit(X, y)\n\n# \u4ea4\u5dee\u691c\u5b9a\u30c7\u30fc\u30bf\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\npos = (yval==1) # numpy bool index\nneg = (yval==0) # numpy bool index\nplt.scatter(Xval[pos,0], Xval[pos,1], marker='+', c='k')\nplt.scatter(Xval[neg,0], Xval[neg,1], marker='o', c='y')\n\n# Decision Boundary(\u6c7a\u5b9a\u5883\u754c)\u3092\u30d7\u30ed\u30c3\u30c8\u3059\u308b\npx = np.arange(-0.6, 0.25, 0.01)\npy = np.arange(-0.8, 0.6, 0.01)\nPX, PY = np.meshgrid(px, py) # PX,PY\u306f\u305d\u308c\u305e\u308c 100x100 \u884c\u5217\nXX = np.c_[PX.ravel(), PY.ravel()] # XX\u306f 10000x2\u884c\u5217\nZ = model.predict_proba(XX)[:,1] # SVM\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3002y=1\u306e\u78ba\u7387\u306f\u7d50\u679c\u306e2\u5217\u76ee\u306b\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u53d6\u308a\u51fa\u3059\u3002Z\u306f10000\u6b21\u5143\u30d9\u30af\u30c8\u30eb\nZ = Z.reshape(PX.shape) # Z\u3092100x100\u884c\u5217\u306b\u5909\u63db\nplt.contour(PX, PY, Z, levels=[0.5], linewidths=3) # Z=0.5\u306e\u7b49\u9ad8\u7dda\u304c\u6c7a\u5b9a\u5883\u754c\u3068\u306a\u308b\nplt.show()\n```\n\n\u4ea4\u5dee\u691c\u5b9a\u30c7\u30fc\u30bf\u3067\u691c\u8a3c\u3057\u305f\u7d50\u679c `C=1.0, gamma=0.1`\u304c\u6700\u3082\u6027\u80fd\u304c\u9ad8\u304f\u306a\u308a\u3001\u305d\u306e\u5206\u985e\u5668\u306e\u6c7a\u5b9a\u5883\u754c\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n![ex6-4.PNG](https://qiita-image-store.s3.amazonaws.com/0/96897/c5ab8395-c218-73cb-a2db-e8e3aadc65ee.png)\n\n\u30e1\u30e2\n- numpy 2\u6b21\u5143\u914d\u5217`A`\u306e\u4e2d\u304b\u3089\u6700\u5927\u5024\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u6c42\u3081\u308b\u65b9\u6cd5 --> `np.unravel_index(np.argmax(A),A.shape)` \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u5165\u3063\u305f\u30bf\u30d7\u30eb\u304c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u3063\u3066\u304f\u308b\u3002\n\n### \u307e\u3068\u3081\n\nAndrew\u5148\u751f\u306f\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3001\u7dda\u5f62SVM\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30ebSVM\u306e\u4f7f\u3044\u5206\u3051\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3\u3092\u51fa\u3057\u3066\u3044\u307e\u3057\u305f\u3002\nm= \u30b5\u30f3\u30d7\u30eb\uff08\u8a13\u7df4\u30c7\u30fc\u30bf\uff09\u6570\u3001n= feature\u306e\u6570\u3068\u3059\u308b\u3068\n\n- n \u304c\u5927\u304d\u304f (~10000) m\u304c\u5c0f\u3055\u3044 (~1000) \u306a\u3089\u3070\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30 \u307e\u305f\u306f \u7dda\u5f62SVM\uff08-->\u8907\u96d1\u306a\u975e\u7dda\u5f62\u6c7a\u5b9a\u5883\u754c\u3092\u3064\u304f\u308b\u307b\u3069\u30b5\u30f3\u30d7\u30eb\u6570\u304c\u591a\u304f\u306a\u3044\u304b\u3089\uff09\n- n \u304c\u5c0f\u3055\u304f (1~1000) m\u304c\u307b\u3069\u307b\u3069 (~5\u4e07)\u306a\u3089\u3070 \u30ac\u30a6\u30b7\u30a2\u30f3\u30ab\u30fc\u30cd\u30ebSVM\n- n \u304c\u5c0f\u3055\u304f (1~1000) m\u304c\u3068\u3066\u3082\u5927\u304d\u3044\uff08100\u4e07\u3068\u304b\uff09\u306a\u3089\u3070 Feature\u3092\u8ffd\u52a0\u3057\u3066\u3001\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u307e\u305f\u306f\u7dda\u5f62SVM \uff08m\u304c\u5927\u304d\u3044\u3068\u30ac\u30a6\u30b7\u30a2\u30f3SVM\u306f\u9045\u3044\u304b\u3089\uff09\n\nex6\u306e\u5f8c\u534a\uff08SVM\u3092\u7528\u3044\u305f\u30b9\u30d1\u30e0\u30d5\u30a3\u30eb\u30bf\u30fc\uff09\u306f\u5225\u9014\u3084\u308a\u307e\u3059\u3002\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "Python", "coursera", "MachineLearning", "svm"]}