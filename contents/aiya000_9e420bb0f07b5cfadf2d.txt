{"tags": ["Haskell", "Monad", "\u30e2\u30ca\u30c9"], "context": "\n\nHaskell\u306e(>>)\u3063\u3066\u3082\u3057\u304b\u3057\u3066\u3059\u3054\u3044\u4fbf\u5229\u3058\u3083\u306a\u3044\uff1f\n(>>) :: Monad m => m a -> m b -> m b\n\n\n\u4eca\u307e\u3067\u306e\u5370\u8c61\n\n\n\u578b\u304b\u3089\u3057\u3066\u660e\u3089\u304b\u306b\u5e38\u306b\u53f3\u3092\u53d6\u308b\ndo\u5f0f\u306e\u306e\u308a\u3065\u3051\u95a2\u6570\n\n\n\u4eca\u56de\u6c17\u3065\u3044\u305f\u3053\u3068\n\n\n\u5024\u306e\u4e16\u754c\u306b\u3064\u3044\u3066\u8a00\u53ca\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3089\u3001\u5de6\u306e\u5024\u3092\u53d6\u308b\u3053\u3068\u304c\u3042\u308b\n\n\n\nm >> n = n\u3068\u3044\u3063\u305f\u6cd5\u5247\u306f\u8981\u6c42\u3055\u308c\u3066\u306a\u3044\n\n\n\n\n\n\n\u4e8b\u306e\u767a\u7aef\n\u3000\u4e8b\u306e\u767a\u7aef\u306fMonadThrow\u306e(>>)\u306e\u8981\u8acb\u3059\u308b\u3053\u306e\u6cd5\u5247\u3092\u898b\u305f\u6642\u306b\u6c17\u3065\u304d\u3092\u5f97\u305f\u3002\nthrowM x >> y = throwM x\n\nMaybe\u3084Either e\u3082MonadThrow\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u306e\u3067\u3001\u4e0a\u8a18\u306e\u6cd5\u5247\u3092\u6e80\u305f\u3059\u3063\u307d\u3044\uff01\n\u4f8b\u3048\u3070Maybe\u306f\u3053\u3046\nNothing >> Just 10 = Nothing\n\nEither\u306f\u3053\u3046\u3002\nLeft \"error\" >> Right 10 = Left \"error\"\n\n\u3053\u308c\u3063\u3066\u3059\u3054\u3044\u4fbf\u5229\u3058\u3083\u306a\u3044\uff1f\n\n\u6d3b\u7528\u3059\u308b\nhoge :: IO a  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\nfoo  :: IO b  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\nbar  :: IO c  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n\n\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u3042\u3063\u305f\u6642\u3001\u3053\u3093\u306amain\u306f\u5acc\u3060\u3088\u306d\uff01\uff01 X(\nmain :: IO ()\nmain = do\n  x <- try hoge\n  y <- try foo\n  z <- try bar\n  -- \u3044\u305a\u308c\u304b\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u3044\u308c\u3070\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u305f\u3044\n  case x of\n    Left  e -> print (e :: SomeException)\n    Right _ ->\n      case y of\n        Left  e' -> print (e' :: SomeException)\n        Right _  ->\n          case z of\n            Left  e'' -> print (e'' :: SomeException)\n            Right _   -> putStrLn \"The program is succeed\"\n\n\u3053\u3046\u3059\u308b\u3002\nmain :: IO ()\nmain = do\n  x <- try hoge\n  y <- try foo\n  z <- try bar\n  -- \u3044\u305a\u308c\u304b\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u3044\u308c\u3070\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u305f\u3044\n  let a = x >> y >> z\n  case a of\n    Left e  -> print (e :: SomeException)\n    Right _ -> putStrLn \"The program is succeed\"\n\n\u3053\u308c\nx >> y >> z\n\n\u306f\u3001\u5358\u306a\u308b\u3053\u3093\u306a\u611f\u3058\u306eintegrate\u95a2\u6570\u306e\u7565\u8a18\u30d0\u30fc\u30b8\u30e7\u30f3\u3060\uff01 :D\nintegrate :: Either e a1 -> Either e a2 -> Either e a3 -> Either e a3\nintegrate e1 e2 e3 = do\n  x <- e1\n  y <- e2\n  z <- e3\n  return z\n\n\u5b9f\u969b\u306b\u8a66\u3059\u7528\u306e\u30b3\u30fc\u30c9\u3092\u8f09\u3063\u3051\u3066\u304a\u304f\u306d\u3002\nimport Control.Monad.Catch (try, SomeException)\n\nhoge :: IO Int  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\nhoge = return 10\nfoo  :: IO Char  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\nfoo = fail \"foo is failed\"\nbar  :: IO Bool  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\nbar = return True\n\nmain :: IO ()\nmain = do\n  x <- try hoge\n  y <- try foo\n  z <- try bar\n  -- \u3044\u305a\u308c\u304b\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u3044\u308c\u3070\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u305f\u3044\n  let a = x >> y >> z\n  case a of\n    Left e  -> print (e :: SomeException)\n    Right _ -> putStrLn \"The program is succeed\"\n\n\n\n\u5fdc\u7528\n\u3000\u3053\u3093\u306a\u3053\u3068\u3082\u3067\u304d\u308b :D\nfirstLeftOrLastRight :: [Either e a] -> Either e a\nfirstLeftOrLastRight = foldr1 (>>)\n\nmain :: IO ()\nmain = do\n  let rights   = [Right 1, Right 2, Right 3, Right 4] :: [Either String Int]\n  let someLeft = [Right 1, Right 2, Left \"oops!\", Right 4]\n  print $ foldr1 (>>) rights\n  print $ foldr1 (>>) someLeft\n\n\u4fbf\u5229\uff01\uff01\n# Haskell\u306e(>>)\u3063\u3066\u3082\u3057\u304b\u3057\u3066\u3059\u3054\u3044\u4fbf\u5229\u3058\u3083\u306a\u3044\uff1f\n\n```haskell\n(>>) :: Monad m => m a -> m b -> m b\n```\n\n- \u4eca\u307e\u3067\u306e\u5370\u8c61\n    - \u578b\u304b\u3089\u3057\u3066\u660e\u3089\u304b\u306b\u5e38\u306b\u53f3\u3092\u53d6\u308b\n    - do\u5f0f\u306e\u306e\u308a\u3065\u3051\u95a2\u6570\n- \u4eca\u56de\u6c17\u3065\u3044\u305f\u3053\u3068\n    - \u5024\u306e\u4e16\u754c\u306b\u3064\u3044\u3066\u8a00\u53ca\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3089\u3001\u5de6\u306e\u5024\u3092\u53d6\u308b\u3053\u3068\u304c\u3042\u308b\n        - `m >> n = n`\u3068\u3044\u3063\u305f\u6cd5\u5247\u306f\u8981\u6c42\u3055\u308c\u3066\u306a\u3044\n\n\n## \u4e8b\u306e\u767a\u7aef\n\u3000\u4e8b\u306e\u767a\u7aef\u306f`MonadThrow`\u306e`(>>)`\u306e\u8981\u8acb\u3059\u308b\u3053\u306e\u6cd5\u5247\u3092\u898b\u305f\u6642\u306b\u6c17\u3065\u304d\u3092\u5f97\u305f\u3002\n\n```haskell\nthrowM x >> y = throwM x\n```\n\n`Maybe`\u3084`Either e`\u3082`MonadThrow`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u306e\u3067\u3001\u4e0a\u8a18\u306e\u6cd5\u5247\u3092\u6e80\u305f\u3059\u3063\u307d\u3044\uff01  \n\u4f8b\u3048\u3070`Maybe`\u306f\u3053\u3046\n\n```haskell\nNothing >> Just 10 = Nothing\n```\n\n`Either`\u306f\u3053\u3046\u3002\n\n```haskell\nLeft \"error\" >> Right 10 = Left \"error\"\n```\n\n\u3053\u308c\u3063\u3066\u3059\u3054\u3044\u4fbf\u5229\u3058\u3083\u306a\u3044\uff1f\n\n\n## \u6d3b\u7528\u3059\u308b\n\n```haskell\nhoge :: IO a  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\nfoo  :: IO b  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\nbar  :: IO c  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\n```\n\n\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u3042\u3063\u305f\u6642\u3001\u3053\u3093\u306a`main`\u306f\u5acc\u3060\u3088\u306d\uff01\uff01 X(\n\n```haskell\nmain :: IO ()\nmain = do\n  x <- try hoge\n  y <- try foo\n  z <- try bar\n  -- \u3044\u305a\u308c\u304b\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u3044\u308c\u3070\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u305f\u3044\n  case x of\n    Left  e -> print (e :: SomeException)\n    Right _ ->\n      case y of\n        Left  e' -> print (e' :: SomeException)\n        Right _  ->\n          case z of\n            Left  e'' -> print (e'' :: SomeException)\n            Right _   -> putStrLn \"The program is succeed\"\n```\n\n\u3053\u3046\u3059\u308b\u3002\n\n```haskell\nmain :: IO ()\nmain = do\n  x <- try hoge\n  y <- try foo\n  z <- try bar\n  -- \u3044\u305a\u308c\u304b\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u3044\u308c\u3070\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u305f\u3044\n  let a = x >> y >> z\n  case a of\n    Left e  -> print (e :: SomeException)\n    Right _ -> putStrLn \"The program is succeed\"\n```\n\n\u3053\u308c\n\n```haskell\nx >> y >> z\n```\n\n\u306f\u3001\u5358\u306a\u308b\u3053\u3093\u306a\u611f\u3058\u306e`integrate`\u95a2\u6570\u306e\u7565\u8a18\u30d0\u30fc\u30b8\u30e7\u30f3\u3060\uff01 :D\n\n```haskell\nintegrate :: Either e a1 -> Either e a2 -> Either e a3 -> Either e a3\nintegrate e1 e2 e3 = do\n  x <- e1\n  y <- e2\n  z <- e3\n  return z\n```\n\n\n\u5b9f\u969b\u306b\u8a66\u3059\u7528\u306e\u30b3\u30fc\u30c9\u3092\u8f09\u3063\u3051\u3066\u304a\u304f\u306d\u3002\n\n```haskell\nimport Control.Monad.Catch (try, SomeException)\n\nhoge :: IO Int  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\nhoge = return 10\nfoo  :: IO Char  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\nfoo = fail \"foo is failed\"\nbar  :: IO Bool  -- \u4f8b\u5916\u3092\u767a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\nbar = return True\n\nmain :: IO ()\nmain = do\n  x <- try hoge\n  y <- try foo\n  z <- try bar\n  -- \u3044\u305a\u308c\u304b\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u3044\u308c\u3070\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d42\u4e86\u3057\u305f\u3044\n  let a = x >> y >> z\n  case a of\n    Left e  -> print (e :: SomeException)\n    Right _ -> putStrLn \"The program is succeed\"\n\n```\n\n\n## \u5fdc\u7528\n\u3000\u3053\u3093\u306a\u3053\u3068\u3082\u3067\u304d\u308b :D\n\n```haskell\nfirstLeftOrLastRight :: [Either e a] -> Either e a\nfirstLeftOrLastRight = foldr1 (>>)\n\nmain :: IO ()\nmain = do\n  let rights   = [Right 1, Right 2, Right 3, Right 4] :: [Either String Int]\n  let someLeft = [Right 1, Right 2, Left \"oops!\", Right 4]\n  print $ foldr1 (>>) rights\n  print $ foldr1 (>>) someLeft\n```\n\n\n\u4fbf\u5229\uff01\uff01\n"}