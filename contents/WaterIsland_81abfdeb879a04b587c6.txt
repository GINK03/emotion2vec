{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u308c\u307e\u3067\u591a\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3092\u3044\u3058\u3063\u3066\u304d\u305f\u304c\u3001\u305d\u308d\u305d\u308dCNN\u306b\u5165\u308d\u3046\uff01\u3068\u3044\u3046\u308f\u3051\u3067\u65e9\u901f\u8a71\u3092\u9032\u3081\u3088\u3046\u3068\u601d\u3046\u3002\n\n\u30bd\u30fc\u30b9\nmnist_CNN_Graph_adhoc.py\n\n\uff08\u4eee\uff09\u30af\u30e9\u30b9\u5c0e\u5165\u4fee\u6b63\u7248 mnist_CNN_Graph_adhoc2.py\n\uff08\u4eee\uff09\u30af\u30e9\u30b9\u5c0e\u5165\u4fee\u6b63\u7248 ExtendedTensorflowCNN.py\n\n\n\u5b9f\u88c5\u306e\u6982\u8981\nCNN(Convolutional Neural Net)\u306e\u5b9f\u88c5\u304c\u4eca\u56de\u5b9f\u65bd\u3057\u305f\u5185\u5bb9\u3067\u3042\u308b\u3002\n\u30bd\u30fc\u30b9\u306e\u51fa\u5143\u306f\u3001\u672c\u5bb6\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3067\u3042\u308b\u3002\u305d\u308c\u306b\u5bfe\u3057\u3066\u3001Tensorboard \u306e GRAPHS \u3068 EVENTS \u3092\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u6539\u826f\u3057\u3066\u3044\u308b\u3002\n\n\u5b9f\u884c\u74b0\u5883\n\u3056\u3063\u304f\u308a\u4ee5\u4e0b\u306e\u74b0\u5883\u3002\n\u30fbMac OS X 10.10.5\n\u30fbPython 3.5.1\n\u30fbvirtualenv\n\u30fbIPython\n\n\u51e6\u7406\u5185\u5bb9\uff08\u7279\u7b46\u3059\u3079\u304d\u51e6\u7406\uff09\n\u5192\u982d\u3067\u3082\u66f8\u3044\u305f\u304c\u3001Tensorboard \u306e GRAPHS \u3092\u51fa\u529b\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\u4ee5\u524d\u66f8\u3044\u305f\u30bd\u30fc\u30b9\u306e\u5982\u304f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a with\u30d6\u30ed\u30c3\u30af\u304c\u4e71\u7acb\u3057\u3066\u3044\u308b\u90e8\u5206\u304c GRAPHS \u51fa\u529b\u306b\u8a72\u5f53\u3059\u308b\u3002\n\nmnist_CNN_Graph_adhoc.py\n    with tf.name_scope('input') as scope:\n        x = tf.placeholder(tf.float32, shape=[None, 784], name='x') # --> \u7d14\u7c8b\u306a\u5165\u529b\u683c\u7d0d\u5148\n        x_image = tf.reshape(x, [-1,28,28,1], name='x-pixel_order') # --> \u753b\u7d20\u9806\u306b\u4e26\u3079\u66ff\u3048\u305f\u5165\u529b\u683c\u7d0d\u5148\n    with tf.name_scope('teach') as scope:\n        y_ = tf.placeholder(tf.float32, shape=[None, 10], name='d') # --> \u51fa\u529b\u3068\u6bd4\u8f03\u3059\u308b\u305f\u3081\u306e\u6559\u5e2b\u683c\u7d0d\u5148\n\n\n\u305d\u308c\u3068\u3001EVENTS\u306e\u51fa\u529b\u306f\u3001\u4ee5\u4e0b\u306e \"tf.scalar_summary(\u301c)\" \u306e\u90e8\u5206\u3067\u3042\u308b\u3002\n\u3053\u3053\u3067\u3082 GRAPHS \u51fa\u529b\u306e with \u30d6\u30ed\u30c3\u30af\u304c\u3042\u308b\u3053\u3068\u306b\u6c17\u3065\u304f\u3060\u308d\u3046\u3002\n\nmnist_CNN_Graph_adhoc.py\n    with tf.name_scope('loss') as scope:\n        cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(y_conv, y_)) # --> \u640d\u5931\u95a2\u6570\u306e\u5b9a\u7fa9\n        tf.scalar_summary('cross_entropy', cross_entropy) # --> Tensorboard \u306e EVENTS \u3067\u898b\u308b\u305f\u3081\u306e\u8a18\u8ff0\n    with tf.name_scope('training') as scope:\n        train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy) # --> \u5b66\u7fd2\u6cd5\u306e\u5b9a\u7fa9\n    with tf.name_scope('test') as scope:\n        correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1)) # --> \u540c\u3058\u5834\u6240\u306b\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) # --> \u6b63\u7b54\u7387\u306e\u5b9a\u7fa9\n        tf.scalar_summary('accuracy', accuracy) # --> Tensorboard \u306e EVENTS \u3067\u898b\u308b\u305f\u3081\u306e\u8a18\u8ff0\n\n\n\u305d\u308c\u3068\u3001\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3042\u308b\u3002\u30b3\u30e1\u30f3\u30c8\u306b\u30a2\u30c9\u30db\u30c3\u30af\u306a\u30c6\u30af\u30cb\u30c3\u30af\u3068\u66f8\u3044\u3066\u3044\u308b\u901a\u308a\u3001\u6ce5\u81ed\u3044\u624b\u6cd5\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u309220\u5206\u5272\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3066\u3044\u308b\u3002\n\uff03\u3000\u30c6\u30b9\u30c8\u3057\u3088\u3046\u3068\u3057\u305f\u3089\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c\uff16GB\u8d85\u3048\u3066\u3048\u3089\u3044\u3053\u3068\u306b...\u3044\u3044\u30de\u30b7\u30f3\u307b\u3057\u3044\uff08\u518d\u3073\uff09\n\uff03\u3000\u672c\u6765\u306f\u3001\u4e00\u756a\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3055\u308c\u3066\u3044\u308b\uff12\u884c\u3067\u89e3\u6c7a\uff01\n\nmnist_CNN_Graph_adhoc.py\n    # adhoc technique\n    split_number = 20 # --> 20\u5206\u5272\u3057\u307e\u3059\u3088\u3002\u4ee5\u4e0b\u3001\u7565\u3002\n    total_number = len(mnist.test.images)\n    odd_number = total_number % split_number\n    div_number = int((total_number - odd_number) / split_number)\n    numbers = [div_number for i in range(split_number)]\n    if odd_number > 0:\n        numbers.append(odd_number)\n        split_number = split_number + 1\n    print(numbers)\n\n    total_accuracy = 0\n    start_number = 0\n    for i in range(split_number):\n        local_accuracy = accuracy.eval(feed_dict={x: mnist.test.images[start_number:start_number + numbers[i]], \n                                       y_: mnist.test.labels[start_number:start_number + numbers[i]], \n                                       keep_prob: 1.0})\n        total_accuracy = total_accuracy + local_accuracy * numbers[i]\n        print(\"[%5d-%5d]test accuracy[%d]: %.3f\" % (start_number, start_number + numbers[i], i, local_accuracy))\n        start_number = start_number + numbers[i]\n\n    print(\"Total Accuracy is %.3f\" % (total_accuracy / total_number))\n#    print(\"test accuracy %g\"%accuracy.eval(feed_dict={\n#        x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))    \n\n\n\n\n\u51e6\u7406\u7d50\u679c\n\u672c\u6765\u306f\u5b66\u7fd2\u306720000\u56de\u3076\u3093\u307e\u308f\u3059\u304c\u3001\u6642\u9593\u306e\u90fd\u5408\u4e0a\u30011001\u56de\u306b\u3057\u305f\u3002\n1001\u56de\uff1f\u4e2d\u9014\u534a\u7aef\uff01\u3068\u601d\u3046\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001Tensorbord \u306b\u51fa\u529b\u3059\u308b EVENTS \u306e\u90fd\u5408\u3067\u3042\u308b\u3002\n\uff03\u3000EVENTS \u306f200\u56de\u6bce\u306b\u51fa\u529b\u3059\u308b\u3002\u3050\u3046\u305f\u3089\u306e\u7523\u7269\u3067\u3042\u308b...\n\u307e\u305f\u3001\u5b66\u7fd2\u4e0b\u306e\u753b\u50cf\u3067\u308f\u304b\u308b\u3068\u601d\u3046\u304c\u3001\u5b66\u7fd2\uff11\u30b9\u30c6\u30c3\u30d7\u304c\u5927\u4f53 0.35\u79d2\u3050\u3089\u3044\u3067\u3042\u308b\u300220000\u56de\u5b66\u7fd2\u3059\u308b\u3068\u3001\u7d042\u6642\u9593\u304b\u304b\u308b\u3002\u6642\u9593\u304c\u3042\u308b\u3068\u304d\u306b\u3057\u3088\u3046\uff01\u3068\u8003\u3048\u3066\u306e\u6240\u4f5c\u3067\u3042\u308b\u3002\n\uff03\u3000\u4f59\u8ac7\u3060\u304c\u3001\u4ee5\u524d\u3001\u81ea\u5206\u3067\u66f8\u3044\u305f\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u306a\u591a\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8 \u3088\u308a\u65e9\u3044\u3068\u304b\u3001Google\u3059\u3054\u3044\u306e\u4e00\u8a00\u3067\u3042\u308b\u3002\n\u3053\u3093\u306a\u611f\u3058\u3067\u3042\u308b\u3002\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b accuracy \u306f 96.0% \u3067\u3042\u308b\u3002\n\n\u3067\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b accuracy \u306f 96.1% \u3067\u3042\u308b\u3002\n\uff03\u3000\u3061\u3083\u3093\u306820000\u56de\u5b66\u7fd2\u3057\u305f\u3089\u672c\u5bb6\u304c\u6b4c\u3046\u3088\u3046\u306b99.2%\u306b\u884c\u304f\u3093\u3060\u308d\u3046\u3002\n\n\n\u51e6\u7406\u7d50\u679c\uff08Tensorborad \u3092\u5b9f\u884c\u3057\u3088\u3046\uff01\uff09\n\u8d77\u52d5\u65b9\u6cd5\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\n\u51e6\u7406\u7d50\u679c\uff08Tensorborad \u3067 EVENTS \u3092\u898b\u3088\u3046\uff01\uff09\n\n\n\u51e6\u7406\u7d50\u679c\uff08Tensorborad \u3067 GRAPHS \u3092\u898b\u3088\u3046\uff01\uff09\n\u5358\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u898b\u308b\u3088\u308a\u306f\u7406\u89e3\u3057\u3084\u3059\u3044\u3060\u308d\u3046\u3002\n\n\ninput \u3092\u753b\u7d20\u9806\u5e8f\u306b\u4e26\u3079\u66ff\u3048\u308b\u51e6\u7406\u3092 input \u306b\u307e\u3068\u3081\u305f\u3002 2016/10/11\n\n\u3061\u306a\u307f\u306b\u3001\u7573\u307f\u8fbc\u307f\u5c64\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3042\u308b\u3002\n\u3061\u3083\u3093\u3068\u66f8\u3044\u305f\u51e6\u7406\u901a\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u76ee\u8996\u3067\u304d\u308b\u306e\u3067\u305f\u307e\u3089\u3093\u3067\u3059\u306d\u3002\n\n\u6b21\u306fyaml\u3067\u521d\u671f\u5316\u304b\u3001\u5b66\u7fd2\u5f8c\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u7e4b\u304e\u5909\u3048\u8fba\u308afine-tuning\u3092\u3084\u308a\u305f\u3044\u306a\u30fc\u3068\u601d\u3046\u3002\n\uff03\u3000\u6c17\u5206\u6b21\u7b2c\uff01\n# \u306f\u3058\u3081\u306b\n\n\u3053\u308c\u307e\u3067\u591a\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3092\u3044\u3058\u3063\u3066\u304d\u305f\u304c\u3001\u305d\u308d\u305d\u308dCNN\u306b\u5165\u308d\u3046\uff01\u3068\u3044\u3046\u308f\u3051\u3067\u65e9\u901f\u8a71\u3092\u9032\u3081\u3088\u3046\u3068\u601d\u3046\u3002\n\n\n# \u30bd\u30fc\u30b9\n[mnist_CNN_Graph_adhoc.py](https://github.com/WaterIsland/DLStudy/blob/master/tensorflow/source/mine/mnist/mnist_CNN_Graph_adhoc.py)\n\n>\uff08\u4eee\uff09\u30af\u30e9\u30b9\u5c0e\u5165\u4fee\u6b63\u7248 [mnist_CNN_Graph_adhoc2.py]\n(https://github.com/WaterIsland/DLStudy/blob/master/tensorflow/source/mine/mnist/mnist_CNN_Graph_adhoc2.py)\n>\uff08\u4eee\uff09\u30af\u30e9\u30b9\u5c0e\u5165\u4fee\u6b63\u7248 [ExtendedTensorflowCNN.py](https://github.com/WaterIsland/DLStudy/blob/master/tensorflow/source/mine/mnist/ExtendedTensorflowCNN.py)\n\n\n# \u5b9f\u88c5\u306e\u6982\u8981\n\nCNN(Convolutional Neural Net)\u306e\u5b9f\u88c5\u304c\u4eca\u56de\u5b9f\u65bd\u3057\u305f\u5185\u5bb9\u3067\u3042\u308b\u3002\n\u30bd\u30fc\u30b9\u306e\u51fa\u5143\u306f\u3001[\u672c\u5bb6](https://www.tensorflow.org/versions/r0.11/tutorials/mnist/pros/index.html)\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3067\u3042\u308b\u3002\u305d\u308c\u306b\u5bfe\u3057\u3066\u3001Tensorboard \u306e GRAPHS \u3068 EVENTS \u3092\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306b\u6539\u826f\u3057\u3066\u3044\u308b\u3002\n\n\n# \u5b9f\u884c\u74b0\u5883\n\u3056\u3063\u304f\u308a\u4ee5\u4e0b\u306e\u74b0\u5883\u3002\n\u30fbMac OS X 10.10.5\n\u30fbPython 3.5.1\n\u30fbvirtualenv\n\u30fbIPython\n\n\n# \u51e6\u7406\u5185\u5bb9\uff08\u7279\u7b46\u3059\u3079\u304d\u51e6\u7406\uff09\n\u5192\u982d\u3067\u3082\u66f8\u3044\u305f\u304c\u3001Tensorboard \u306e GRAPHS \u3092\u51fa\u529b\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n[\u4ee5\u524d\u66f8\u3044\u305f\u30bd\u30fc\u30b9\u306e\u5982\u304f](https://github.com/WaterIsland/DLStudy/blob/master/tensorflow/source/mine/mnist/mnist_SGD_graph.py)\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a with\u30d6\u30ed\u30c3\u30af\u304c\u4e71\u7acb\u3057\u3066\u3044\u308b\u90e8\u5206\u304c GRAPHS \u51fa\u529b\u306b\u8a72\u5f53\u3059\u308b\u3002\n\n```py:mnist_CNN_Graph_adhoc.py\n    with tf.name_scope('input') as scope:\n        x = tf.placeholder(tf.float32, shape=[None, 784], name='x') # --> \u7d14\u7c8b\u306a\u5165\u529b\u683c\u7d0d\u5148\n        x_image = tf.reshape(x, [-1,28,28,1], name='x-pixel_order') # --> \u753b\u7d20\u9806\u306b\u4e26\u3079\u66ff\u3048\u305f\u5165\u529b\u683c\u7d0d\u5148\n    with tf.name_scope('teach') as scope:\n        y_ = tf.placeholder(tf.float32, shape=[None, 10], name='d') # --> \u51fa\u529b\u3068\u6bd4\u8f03\u3059\u308b\u305f\u3081\u306e\u6559\u5e2b\u683c\u7d0d\u5148\n```\n\n\u305d\u308c\u3068\u3001EVENTS\u306e\u51fa\u529b\u306f\u3001\u4ee5\u4e0b\u306e \"tf.scalar_summary(\u301c)\" \u306e\u90e8\u5206\u3067\u3042\u308b\u3002\n\u3053\u3053\u3067\u3082 GRAPHS \u51fa\u529b\u306e with \u30d6\u30ed\u30c3\u30af\u304c\u3042\u308b\u3053\u3068\u306b\u6c17\u3065\u304f\u3060\u308d\u3046\u3002\n\n```py:mnist_CNN_Graph_adhoc.py\n    with tf.name_scope('loss') as scope:\n        cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(y_conv, y_)) # --> \u640d\u5931\u95a2\u6570\u306e\u5b9a\u7fa9\n        tf.scalar_summary('cross_entropy', cross_entropy) # --> Tensorboard \u306e EVENTS \u3067\u898b\u308b\u305f\u3081\u306e\u8a18\u8ff0\n    with tf.name_scope('training') as scope:\n        train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy) # --> \u5b66\u7fd2\u6cd5\u306e\u5b9a\u7fa9\n    with tf.name_scope('test') as scope:\n        correct_prediction = tf.equal(tf.argmax(y_conv,1), tf.argmax(y_,1)) # --> \u540c\u3058\u5834\u6240\u306b\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) # --> \u6b63\u7b54\u7387\u306e\u5b9a\u7fa9\n        tf.scalar_summary('accuracy', accuracy) # --> Tensorboard \u306e EVENTS \u3067\u898b\u308b\u305f\u3081\u306e\u8a18\u8ff0\n```\n\n\n\u305d\u308c\u3068\u3001\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3042\u308b\u3002\u30b3\u30e1\u30f3\u30c8\u306b\u30a2\u30c9\u30db\u30c3\u30af\u306a\u30c6\u30af\u30cb\u30c3\u30af\u3068\u66f8\u3044\u3066\u3044\u308b\u901a\u308a\u3001\u6ce5\u81ed\u3044\u624b\u6cd5\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u309220\u5206\u5272\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3066\u3044\u308b\u3002\n\uff03\u3000\u30c6\u30b9\u30c8\u3057\u3088\u3046\u3068\u3057\u305f\u3089\u30e1\u30e2\u30ea\u6d88\u8cbb\u91cf\u304c\uff16GB\u8d85\u3048\u3066\u3048\u3089\u3044\u3053\u3068\u306b...\u3044\u3044\u30de\u30b7\u30f3\u307b\u3057\u3044\uff08\u518d\u3073\uff09\n\uff03\u3000\u672c\u6765\u306f\u3001\u4e00\u756a\u4e0b\u306e\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3055\u308c\u3066\u3044\u308b\uff12\u884c\u3067\u89e3\u6c7a\uff01\n\n```py:mnist_CNN_Graph_adhoc.py\n    # adhoc technique\n    split_number = 20 # --> 20\u5206\u5272\u3057\u307e\u3059\u3088\u3002\u4ee5\u4e0b\u3001\u7565\u3002\n    total_number = len(mnist.test.images)\n    odd_number = total_number % split_number\n    div_number = int((total_number - odd_number) / split_number)\n    numbers = [div_number for i in range(split_number)]\n    if odd_number > 0:\n        numbers.append(odd_number)\n        split_number = split_number + 1\n    print(numbers)\n\n    total_accuracy = 0\n    start_number = 0\n    for i in range(split_number):\n        local_accuracy = accuracy.eval(feed_dict={x: mnist.test.images[start_number:start_number + numbers[i]], \n                                       y_: mnist.test.labels[start_number:start_number + numbers[i]], \n                                       keep_prob: 1.0})\n        total_accuracy = total_accuracy + local_accuracy * numbers[i]\n        print(\"[%5d-%5d]test accuracy[%d]: %.3f\" % (start_number, start_number + numbers[i], i, local_accuracy))\n        start_number = start_number + numbers[i]\n\n    print(\"Total Accuracy is %.3f\" % (total_accuracy / total_number))\n#    print(\"test accuracy %g\"%accuracy.eval(feed_dict={\n#        x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0}))    \n\n```\n\n\n# \u51e6\u7406\u7d50\u679c\n\n\u672c\u6765\u306f\u5b66\u7fd2\u306720000\u56de\u3076\u3093\u307e\u308f\u3059\u304c\u3001\u6642\u9593\u306e\u90fd\u5408\u4e0a\u30011001\u56de\u306b\u3057\u305f\u3002\n1001\u56de\uff1f\u4e2d\u9014\u534a\u7aef\uff01\u3068\u601d\u3046\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001Tensorbord \u306b\u51fa\u529b\u3059\u308b EVENTS \u306e\u90fd\u5408\u3067\u3042\u308b\u3002\n\uff03\u3000EVENTS \u306f200\u56de\u6bce\u306b\u51fa\u529b\u3059\u308b\u3002\u3050\u3046\u305f\u3089\u306e\u7523\u7269\u3067\u3042\u308b...\n\u307e\u305f\u3001\u5b66\u7fd2\u4e0b\u306e\u753b\u50cf\u3067\u308f\u304b\u308b\u3068\u601d\u3046\u304c\u3001\u5b66\u7fd2\uff11\u30b9\u30c6\u30c3\u30d7\u304c\u5927\u4f53 0.35\u79d2\u3050\u3089\u3044\u3067\u3042\u308b\u300220000\u56de\u5b66\u7fd2\u3059\u308b\u3068\u3001\u7d042\u6642\u9593\u304b\u304b\u308b\u3002\u6642\u9593\u304c\u3042\u308b\u3068\u304d\u306b\u3057\u3088\u3046\uff01\u3068\u8003\u3048\u3066\u306e\u6240\u4f5c\u3067\u3042\u308b\u3002\n\uff03\u3000\u4f59\u8ac7\u3060\u304c\u3001[\u4ee5\u524d\u3001\u81ea\u5206\u3067\u66f8\u3044\u305f\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u306a\u591a\u5c64\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8](https://github.com/WaterIsland/DLStudy/tree/master/mln/release) \u3088\u308a\u65e9\u3044\u3068\u304b\u3001Google\u3059\u3054\u3044\u306e\u4e00\u8a00\u3067\u3042\u308b\u3002\n\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3042\u308b\u3002\n\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b accuracy \u306f 96.0% \u3067\u3042\u308b\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-10 21.33.10.png](https://qiita-image-store.s3.amazonaws.com/0/143341/7c477e4f-59b2-2d45-a069-cc5c5a9c1aa7.png)\n\n\u3067\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b accuracy \u306f 96.1% \u3067\u3042\u308b\u3002\n\uff03\u3000\u3061\u3083\u3093\u306820000\u56de\u5b66\u7fd2\u3057\u305f\u3089\u672c\u5bb6\u304c\u6b4c\u3046\u3088\u3046\u306b99.2%\u306b\u884c\u304f\u3093\u3060\u308d\u3046\u3002\n\n![06979918-d871-8d97-10e5-1fc613a46b3b.png](https://qiita-image-store.s3.amazonaws.com/0/143341/6ea75153-e86f-fdc1-1d98-348613888f4c.png)\n\n\n## \u51e6\u7406\u7d50\u679c\uff08Tensorborad \u3092\u5b9f\u884c\u3057\u3088\u3046\uff01\uff09\n\u8d77\u52d5\u65b9\u6cd5\u306f[\u3053\u3061\u3089](http://qiita.com/WaterIsland/items/506e42cd45862b0b9174#\u51e6\u7406\u7d50\u679ctensorborad-\u3092\u5b9f\u884c\u3057\u3088\u3046)\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\n\n### \u51e6\u7406\u7d50\u679c\uff08Tensorborad \u3067 EVENTS \u3092\u898b\u3088\u3046\uff01\uff09\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-10 22.06.54.png](https://qiita-image-store.s3.amazonaws.com/0/143341/f7051ace-c8fa-e21e-39a3-4274917fe658.png)\n\n\n### \u51e6\u7406\u7d50\u679c\uff08Tensorborad \u3067 GRAPHS \u3092\u898b\u3088\u3046\uff01\uff09\n\u5358\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u898b\u308b\u3088\u308a\u306f\u7406\u89e3\u3057\u3084\u3059\u3044\u3060\u308d\u3046\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-11 10.43.29.png](https://qiita-image-store.s3.amazonaws.com/0/143341/c2e76625-2230-9b0c-670a-8627d77f8093.png)\n\n>input \u3092\u753b\u7d20\u9806\u5e8f\u306b\u4e26\u3079\u66ff\u3048\u308b\u51e6\u7406\u3092 input \u306b\u307e\u3068\u3081\u305f\u3002 2016/10/11\n\n\n\u3061\u306a\u307f\u306b\u3001\u7573\u307f\u8fbc\u307f\u5c64\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3042\u308b\u3002\n\u3061\u3083\u3093\u3068\u66f8\u3044\u305f\u51e6\u7406\u901a\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u76ee\u8996\u3067\u304d\u308b\u306e\u3067\u305f\u307e\u3089\u3093\u3067\u3059\u306d\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-10 22.09.09.png](https://qiita-image-store.s3.amazonaws.com/0/143341/95bf9c6a-c535-2697-7998-5c7f56f54e6f.png)\n\n\n\u6b21\u306f[yaml\u3067\u521d\u671f\u5316](http://qiita.com/WaterIsland/items/2d7dcefdf0cd4f2e4153)\u304b\u3001\u5b66\u7fd2\u5f8c\u306e~~\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u7e4b\u304e\u5909\u3048\u8fba\u308a~~fine-tuning\u3092\u3084\u308a\u305f\u3044\u306a\u30fc\u3068\u601d\u3046\u3002\n\uff03\u3000\u6c17\u5206\u6b21\u7b2c\uff01\n", "tags": ["TensorFlow", "ConvolutionalNeuralNetworks", "DeepLearning", "MNIST"]}