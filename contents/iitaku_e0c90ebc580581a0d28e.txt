{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306fGPGPU Advent Calendar\u306e17\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\u3048\u3048\u3001\u73fe\u5728\u6642\u523b\u306f12\u670817\u65e5\u306e27\u6642\u3067\u3059\u304c\u3001\u4f55\u304b\uff1f\n\nrepl\u3092\u4f5c\u308d\u3046\nRead-Eval-Print-Loop\u3001\u305d\u308c\u306f\u95c7\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3068\u306a\u308a\u3057\u8005\u306b\u8a2a\u308c\u308b\u904b\u547d\u30fb\u30fb\u30fb\u5f7c\u306f\u901d\u3063\u3066\u3057\u307e\u3063\u305f\u308f\u3001\u5186\u74b0\u306e\u7406\u306b\u5c0e\u304b\u308c\u3066\u30fb\u30fb\u30fb\n\u3068\u3044\u3046\u3053\u3068\u3067\u305d\u308c\u304c\u4e16\u754c\u306e\u9078\u629e\u306a\u306e\u3067repl\u3092\u4f5c\u3063\u3066LLVM PTX Backend\u3067\u904a\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\u6700\u5f8c\u307e\u3067\u8aad\u3081\u3070\u3001\u3053\u306e\u884c\u70ba\u304c\u58ee\u5927\u306a\u7121\u99c4\u3067\u3042\u308b\u3053\u3068\u304c\u304d\u3063\u3068\u308f\u304b\u308b\u306f\u305a\uff01\n\n\u304a\u3055\u3089\u3044\n\u524d\u56de\u306e\u5185\u5bb9\u3092\u3075\u308a\u304b\u3048\u308b\u3068\u3001\n\nLLVM 3.2\u3067LLVM IR\u304b\u3089PTX\u304c\u5410\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\nllc\uff08LLVM System Compiler\uff09\u3092\u4f7f\u3063\u3066LLVM IR\u3092PTX\u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3057\u305f\nPTX\u306b\u5909\u63db\u3067\u304d\u308bLLVM IR\u306b\u306f\u3044\u304f\u3064\u304b\u30eb\u30fc\u30eb\u304c\u5b58\u5728\u3059\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u3056\u3063\u3068\u898b\u307e\u3057\u305f\n\n\u3068\u3044\u3046\u4e8b\u3067\u3057\u305f\u3002\n\n\u76ee\u6a19\nrepl\u3068\u304b\u8a00\u3063\u305f\u304crpl\u90e8\u5206\u306f\u307e\u3042\u9069\u5f53\u3067\u3044\u3044\u3060\u308d\u30fb\u30fb\u30fb\u3063\u3066\u3053\u3068\u3067\n\nS\u5f0f\u3063\u307d\u3044\u4f55\u304b\uff08\u6574\u6570\u5373\u5024\u304a\u3088\u3073\u56db\u5247\u6f14\u7b97 +-*/ \u306e\u30dd\u30fc\u30e9\u30f3\u30c9\u8a18\u6cd5\u306e\u4e8c\u9805\u6f14\u7b97\uff09\u3092\u8aad\u3093\u3067\u69cb\u6587\u6728\u306b\u5909\u63db\u3059\u308b\n\u69cb\u6587\u6728\u304b\u3089LLVM IR\u3092\u751f\u6210\u3059\u308b\nPTX\u306b\u5909\u63db\u3059\u308b\nCUDA\u306e\u30c9\u30e9\u30a4\u30d0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u5b9f\u884c\u3059\u308b\n\n\u3068\u3044\u3046\u611f\u3058\u3092\u76ee\u6a19\u306b\u3057\u307e\u3059\u3002llc\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3084CUDA\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u7d44\u307f\u5408\u308f\u305b\u308c\u3070\u7c21\u5358\u306b\u3067\u304d\u305d\u3046\u3067\u3059\u304c\u3001\u3068\u306f\u3044\u3048\u5e7e\u3064\u304b\u58c1\u304c\u3042\u308a\u307e\u3059\u3002\n\nLLVM IR\u3063\u3066\u3069\u3046\u3084\u3063\u3066\u751f\u6210\u3059\u3093\u306e\u3088\n\u306a\u3093\u3060\u304b\u3044\u304f\u3064\u304b\u3084\u308a\u65b9\u306f\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u304c\u3001\u4e3b\u306a\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\nContext\u3092\u3064\u304f\u308b\nContext\u3092\u4f7f\u3063\u3066Module\u3092\u3064\u304f\u308b\nModule\u306e\u4e2d\u306bFunction\u3092\u3064\u304f\u308b\nFunction\u306e\u4e2d\u306bBasicBlock\u3092\u6700\u4f4e1\u3064\u306f\u3064\u304f\u308b\nIRBuilder<>\u3092\u3064\u304f\u3063\u3066\u5e0c\u671b\u306eBasicBlock\u306b\u5411\u3051\u308b\nIRBuilder\u3092\u4f7f\u3063\u3066\u547d\u4ee4\u5217\u3092\u66f8\u304d\u8fbc\u3080\n\n\u3048\u3048\u3001\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u306d\u3002\u5177\u4f53\u4f8b\u3092\u3002\nLLVMContext context;\nModule *module = new Module(\"repl_module\", context);\n\nstd::vector<Type*> arg_types;\narg_types.push_back(PointerType::get(Type::getInt32Ty(context), 1));\n\nFunctionType *function_type = FunctionType::get( Type::getVoidTy(context), arg_types, false);\n\nFunction *function = cast<Function>(module->getOrInsertFunction(\"repl_function\", function_type));\nBasicBlock::Create(context, \"EntryBlock\", function);\n\nContext\u3092\u4f5c\u3063\u3066\u3001Module\u306b\u540d\u524d\u3092\u3064\u3051\u3066\u3001Function\u306e\u578b\u3092\u3064\u304f\u3063\u3066\u3001BasicBlock\u3092\u4f5c\u3063\u3066\u3001\u3053\u3053\u307e\u3067\u304c4\u306e\u624b\u9806\u3067\u3059\u3002\n\u3055\u3089\u306b\u3001\u4eca\u56de\u306fPTX\u5411\u3051\u306eLLVM IR\u3092\u4f5c\u3089\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u304b\u3089\u3001\n\nkernel\u95a2\u6570\u3067\u3042\u308b\u3053\u3068\u3092metadata\u3092\u4f7f\u7528\u3057\u3066\u660e\u793a\u3059\u308b\nglobal memory\u306eaddrspace\u3092\u304d\u3061\u3093\u3068\u6307\u5b9a\u3059\u308b\n\n\u3068\u3044\u3063\u305f\u624b\u9806\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u306e\u3068\u304a\u308a\u3002\nNamedMDNode *annotate = module->getOrInsertNamedMetadata(\"nvvm.annotations\");\nstd::vector<Value *> vals;\nvals.push_back(function);\nvals.push_back(MDString::get(context, \"kernel\"));  vals.push_back(ConstantInt::get(Type::getInt32Ty(context), 1));\nannotate->addOperand(MDNode::get(context, vals));\n\naddrspace\u306f\u6700\u521d\u306e\u4f8b\u306earg_types\u3092\u4f5c\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306b\u3042\u308a\u307e\u3059\u3002\narg_types.push_back(PointerType::get(Type::getInt32Ty(context), 1));\n\nPointerType::get\u306e\u3075\u305f\u3064\u3081\u306e\u5f15\u6570\u306e1\u304cglobal memory\u306eaddrspace\u3067\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304caddrspace\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bNVPTX.h\u306fLLVM\u306e\u516c\u958b\u30d8\u30c3\u30c0\u3067\u306f\u7121\u3044\u306e\u3067\u3053\u3046\u3044\u3046\u6642\u3061\u3087\u3063\u3068\u5fae\u5999\u3067\u3059\u306d\u30fb\u30fb\u30fb\n\u3042\u3068\u306f\u3001\u69cb\u6587\u6728\u3092\u624b\u7e70\u3063\u3066\u5f0f\u3092\u3064\u304f\u308a\u3001\u305d\u306e\u7d50\u679c\u3092int *dst\u306e\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u306b\u30b9\u30c8\u30a2\u3059\u308b\u3001\u3068\u3044\u3046\u547d\u4ee4\u5217\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\nglobal::builder = new IRBuilder<>(bb);\nAstNode *node = parse(buf);\nArgument *dst = function->arg_begin();\nValue *value = node->get();\nglobal::builder->CreateStore(value, dst);\nglobal::builder->CreateRetVoid();\n\nAstNode\u30af\u30e9\u30b9\u304c\u69cb\u6587\u6728\u3092\u8868\u3059\u57fa\u5e95\u30af\u30e9\u30b9\u3067\u3059\u3002BinOpNode\u3068ValueNode\u304c\u3053\u308c\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\nAstNode\u30af\u30e9\u30b9\u306fllvm::Value get(void)\u3068\u3044\u3046\u30b7\u30b0\u30cd\u30c1\u30e3\u306e\u4eee\u60f3\u95a2\u6570\u3092\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u3092\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3057\u3066\u69cb\u6587\u6728\u3092LLVM IR\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\u7d9a\u3044\u3066IRBBuilder<>::CreateStore\u3067\u30b9\u30c8\u30a2\u547d\u4ee4\u3092\u3064\u304f\u308a\u3001\u6700\u5f8c\u306bIRBuilder<>::CreateRetVoid\u3067\u95a2\u6570\u306e\u7d42\u4e86\u3092\u660e\u793a\u3057\u307e\u3059\u3002\n\nPTX Backend\u3063\u3066\u3069\u3046\u4f7f\u3046\u306e\u3088\n\u3055\u3066\u3001\u3053\u308c\u3067LLVM IR\u306f\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u3092PTX\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3069\u3093\u306a\u624b\u9806\u304c\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u307e\u305a\u306fNVPTX\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u521d\u671f\u5316\u304c\u5fc5\u8981\u3067\u3059\u3002\n// Initialize LLVM subsystems\nLLVMInitializeNVPTXTargetInfo();\nLLVMInitializeNVPTXTarget();\nLLVMInitializeNVPTXTargetMC();\nLLVMInitializeNVPTXAsmPrinter();\n\nPassRegistry *Registry = PassRegistry::getPassRegistry();\ninitializeCore(*Registry);\ninitializeCodeGen(*Registry);\ninitializeLoopStrengthReducePass(*Registry);\ninitializeLowerIntrinsicsPass(*Registry);\ninitializeUnreachableBlockElimPass(*Registry);\n\nLLVMInitializeNVPTX*\u3068\u3044\u3046\u95a2\u6570\u3067\u3059\u304c\u3001\u30d8\u30c3\u30c0\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u9069\u5f53\u306b\u5ba3\u8a00\u3057\u3066\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002llc\u3060\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3059\u3079\u3066\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u521d\u671f\u5316\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306fPTX\u3060\u3051\u3067\u3088\u304f\u3001\u4f59\u8a08\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ea\u30f3\u30af\u3059\u308b\u3068\u30d3\u30eb\u30c9\u306e\u305f\u3073\u306b\u3048\u3089\u304f\u6642\u9593\u3092\u98df\u3046\u306e\u3067\u3053\u3046\u306a\u308a\u307e\u3057\u305f\u3002\n\u6b21\u306b\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u5e7e\u3064\u304b\u5165\u529b\u3057\u3066\u3084\u308a\u307e\u3059\u3002\nTriple triple;\nstd::string err;\nconst Target *target = TargetRegistry::lookupTarget(\"nvptx64\", triple, err);\n\nstd::auto_ptr<TargetMachine> target_machine(target->createTargetMachine(triple.getTriple(), \"sm_20\", \"\", TargetOptions()));\n\nTargetMachine\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\nTargetRegistry::lookupTarget\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u540d\u304b\u3089\u9069\u5207\u306aTriple\uff08\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u60c5\u5831\u3092\u8868\u30593\u3064\u7d44\u306e\u6587\u5b57\u5217\uff09\u3092\u5c0e\u51fa\u3067\u304d\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u7528\u3057\u3066TargetMachine\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001GPU\u306eCompute Capability \"sm_20\"\u7b49\u3082\u3053\u3053\u3067\u6587\u5b57\u5217\u3068\u3057\u3066\u4e0e\u3048\u307e\u3059\u3002\n\u3055\u3066\u3001\u305d\u3057\u3066\u3044\u3088\u3044\u3088PTX\u3078\u306e\u5909\u63db\u90e8\u5206\u3067\u3059\u3002\nPassManager pm;\npm.add(new TargetLibraryInfo(triple));\npm.add(new TargetTransformInfo(target_machine->getScalarTargetTransformInfo(), target_machine->getVectorTargetTransformInfo()));\npm.add(new DataLayout(*(target_machine->getDataLayout())));\n\ntarget_machine->setAsmVerbosityDefault(true);\n\nstd::string ptxcode;\nraw_string_ostream ros(ptxcode);\nformatted_raw_ostream fos(ros);\ntarget_machine->addPassesToEmitFile(pm, fos, TargetMachine::CGFT_AssemblyFile);\n\nPassManager\u3068\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3059\u3053\u3057\u3060\u3051LLVM\u306e\u5185\u90e8\u5b9f\u88c5\u306e\u8a71\u306b\u306a\u308a\u307e\u3059\u304c\u3001LLVM\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306f\u30d1\u30b9\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u30d1\u30b9\u3068\u306f\u3001\u7c21\u5358\u306b\u8a00\u3063\u3066\u3057\u307e\u3048\u3070Module\u3084Function\u3092\u53d6\u3063\u3066\u3001\u305d\u308c\u3092\u6539\u5909\u3057\u305f\u308a\u5916\u306b\u30c0\u30f3\u30d7\u3057\u305f\u308a\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3060\u3051\u3067\u306a\u304fLLVM IR\u306e\u6700\u9069\u5316\u3082\u3053\u306e\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\u3001llc\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30d5\u30a7\u30fc\u30ba\u306f\u4f55\u5341\u304b\u3089\u4f55\u767e\u3068\u3044\u3046\u69d8\u3005\u306a\u30d1\u30b9\u306e\u7d44\u307f\u5408\u308f\u305b\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fPassManager\u306b\u5bfe\u3057\u3066\u3001ptxcode\u3068\u3044\u3046std::string\u3092\u30d0\u30c3\u30d5\u30a1\u306b\u3082\u3064stream\u306b\u30a2\u30bb\u30f3\u30d6\u30ea\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3068\u3044\u3046\u30d1\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002repl\u306e\u30eb\u30fc\u30d7\u4e2d\u3067\u3001\u3053\u308c\u3089\u306e\u30d1\u30b9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n// Codegen PTX using NVPTX\npm.run(*module);\nfos.flush();\n\nfos.flush()\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002raw_string_ostream\u306f\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5927\u304d\u3055\u304c\u4e00\u5b9a\u4ee5\u4e0a\u306e\u5927\u304d\u3055\u306b\u306a\u308b\u307e\u3067\u3001\u5916\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3057\u307e\u305b\u3093\u3002\n\u3053\u308c\u3067\u3081\u3067\u305f\u304fptxcode\u306bPTX\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\nPTX\u3092\u3069\u3046\u3084\u3063\u3066GPU\u3067\u5b9f\u884c\u3055\u305b\u3093\u306e\u3088\nCUDA\u306e\u30c9\u30e9\u30a4\u30d0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9(cuda*\u3067\u306f\u306a\u304fcu*\u3068\u3044\u3046\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9)\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u52d5\u7684\u306bPTX\u3092\u30ed\u30fc\u30c9\u3057\u3066GPU\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n// Load PTX and Exec\n\n// CUmodule\u3092\u3064\u304f\u308a\u307e\u3059\nCUmodule cu_module;\ncuModuleLoadDataEx(&cu_module, ptxcode.c_str(), 0, 0, 0);\n\n// CUfunction\u3092\u3064\u304f\u308a\u307e\u3059\nCUfunction cu_function;\ncuModuleGetFunction(&cu_function, cu_module, \"repl_function\");\n\n// Block\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3059\ncuFuncSetBlockShape(cu_function, 1, 1, 1);\n\n// \u30ab\u30fc\u30cd\u30eb\u306e\u5f15\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\ncuParamSetv(cu_function, 0, &d_dstptr, sizeof(d_dstptr));\ncuParamSetSize(cu_function, sizeof(d_dstptr));\n\n// \u3044\u3051\uff01\ncuLaunchGrid(cu_function, 1, 1);\n\n// \u7d50\u679c\u304f\u308c\ncudaMemcpy(&h_dst, d_dstptr, sizeof(int32_t), cudaMemcpyDeviceToHost);\n\n\u7c21\u5358\u3067\u3059\u306d\u3002\n\n\u7d50\u679c\n$ rlwrap ./gpu-repl\n>>> (+ 1 2)\n3\n>>> (* (+ 1 2) 4)\n12\n>>>\n\n\u3075\u3080\u3001\u306a\u306b\u3084\u3089\u52d5\u3044\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u306d\u3002\u3067\u3082\u307b\u3093\u3068\u306b\u52d5\u3044\u3066\u3044\u308b\u306e\u304b\u5fc3\u914d\u306a\u306e\u3067PTX\u3092\u30c0\u30f3\u30d7\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n>>> (* (+ 1 2) 4)\n//\n// Generated by LLVM NVPTX Back-End\n//\n\n.version 3.1\n.target sm_20, texmode_independent\n.address_size 64\n\n\n    // .globl   repl_function\n.entry repl_function(\n    .param .u64 .ptr .global .align 4 repl_function_param_0\n)                                       // @repl_function\n{\n    .reg .pred %p<396>;\n    .reg .s16 %rc<396>;\n    .reg .s16 %rs<396>;\n    .reg .s32 %r<396>;\n    .reg .s64 %rl<396>;\n    .reg .f32 %f<396>;\n    .reg .f64 %fl<396>;\n\n// BB#0:                                // %EntryBlock\n    mov.u32     %r0, 12;\n    ld.param.u64    %rl0, [repl_function_param_0];\n    st.global.u32   [%rl0], %r0;\n    ret;\n}\n\n\n12\n>>> \n\n12\u3092\u30b9\u30c8\u30a2\u30fb\u30fb\u30fb\u3060\u3068\u30fb\u30fb\u30fbLLVM IR\u306f\u3069\u3046\u306a\u306e\u3055\n>>> (* (+ 1 2) 4)\n; ModuleID = 'repl_module'\n\ndefine void @repl_function(i32 addrspace(1)*) {\nEntryBlock:\n  store i32 12, i32 addrspace(1)* %0\n  ret void\n}\n\ndeclare void @abort()\n\n!nvvm.annotations = !{!0}\n\n!0 = metadata !{void (i32 addrspace(1)*)* @repl_function, metadata !\"kernel\", i32 1}\n12\n>>> \n\n\n\u30fb\u30fb\u30fb\u307e\u3042\u3001\u305d\u30fc\u3067\u3059\u3088\u306d\u30fc\n\u4eca\u56de\u306erepl\u306e\u5165\u529b\u304c\u53d7\u3051\u4ed8\u3051\u308b\u306e\u306f\u6574\u6570\u5b9a\u6570\u306a\u306e\u3067\u3001IR\u306e\u69cb\u7bc9\u6642\u306b\u5168\u3066Constant Folding\u3055\u308c\u3066\u5b9a\u6570\u30b9\u30c8\u30a2\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3057\u305f\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\uff01GPU\u306e\u6709\u308a\u4f59\u308b\u8a08\u7b97\u30d1\u30ef\u30fc\u3092\u4f7f\u3063\u3066\uff01\u5b9a\u6570\u3067\u30e1\u30e2\u30ea\u3092\u57cb\u3081\u308b\u3068\u3044\u3046\u65b0\u305f\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3053\u3053\u306b\u7206\u8a95\u3057\u307e\u3057\u305f\uff01\u304a\u3081\u3067\u3068\u3046\uff01\u3042\u308a\u304c\u3068\u3046\uff01\n\n\u30b5\u30f3\u30bf\u3055\u3093\u304b\u3089\u306e\u30d7\u30ec\u30bc\u30f3\u30c8\u3060\u3088\u3049\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u305d\u308c\u3067\u306f\u7686\u3055\u3093\u826f\u3044\u30af\u30ea\u30b9\u30de\u30b9\u3092\u3002\n\n\u3053\u306e\u8a18\u4e8b\u306fGPGPU Advent Calendar\u306e17\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\u3048\u3048\u3001\u73fe\u5728\u6642\u523b\u306f12\u670817\u65e5\u306e27\u6642\u3067\u3059\u304c\u3001\u4f55\u304b\uff1f\n\n# repl\u3092\u4f5c\u308d\u3046\nRead-Eval-Print-Loop\u3001\u305d\u308c\u306f\u95c7\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3068\u306a\u308a\u3057\u8005\u306b\u8a2a\u308c\u308b\u904b\u547d\u30fb\u30fb\u30fb\u5f7c\u306f\u901d\u3063\u3066\u3057\u307e\u3063\u305f\u308f\u3001\u5186\u74b0\u306e\u7406\u306b\u5c0e\u304b\u308c\u3066\u30fb\u30fb\u30fb\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u305d\u308c\u304c\u4e16\u754c\u306e\u9078\u629e\u306a\u306e\u3067repl\u3092\u4f5c\u3063\u3066LLVM PTX Backend\u3067\u904a\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\u6700\u5f8c\u307e\u3067\u8aad\u3081\u3070\u3001\u3053\u306e\u884c\u70ba\u304c\u58ee\u5927\u306a\u7121\u99c4\u3067\u3042\u308b\u3053\u3068\u304c\u304d\u3063\u3068\u308f\u304b\u308b\u306f\u305a\uff01\n\n## \u304a\u3055\u3089\u3044\n[\u524d\u56de] (http://qiita.com/items/58a64629d4f01da82f2e)\u306e\u5185\u5bb9\u3092\u3075\u308a\u304b\u3048\u308b\u3068\u3001\n\n- LLVM 3.2\u3067LLVM IR\u304b\u3089PTX\u304c\u5410\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\n- llc\uff08LLVM System Compiler\uff09\u3092\u4f7f\u3063\u3066LLVM IR\u3092PTX\u306b\u5909\u63db\u3057\u3066\u307f\u307e\u3057\u305f\n- PTX\u306b\u5909\u63db\u3067\u304d\u308bLLVM IR\u306b\u306f\u3044\u304f\u3064\u304b\u30eb\u30fc\u30eb\u304c\u5b58\u5728\u3059\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u3056\u3063\u3068\u898b\u307e\u3057\u305f\n\n\u3068\u3044\u3046\u4e8b\u3067\u3057\u305f\u3002\n\n## \u76ee\u6a19\nrepl\u3068\u304b\u8a00\u3063\u305f\u304crpl\u90e8\u5206\u306f\u307e\u3042\u9069\u5f53\u3067\u3044\u3044\u3060\u308d\u30fb\u30fb\u30fb\u3063\u3066\u3053\u3068\u3067\n\n1. S\u5f0f\u3063\u307d\u3044\u4f55\u304b\uff08\u6574\u6570\u5373\u5024\u304a\u3088\u3073\u56db\u5247\u6f14\u7b97 +-*/ \u306e\u30dd\u30fc\u30e9\u30f3\u30c9\u8a18\u6cd5\u306e\u4e8c\u9805\u6f14\u7b97\uff09\u3092\u8aad\u3093\u3067\u69cb\u6587\u6728\u306b\u5909\u63db\u3059\u308b\n2. \u69cb\u6587\u6728\u304b\u3089LLVM IR\u3092\u751f\u6210\u3059\u308b\n3. PTX\u306b\u5909\u63db\u3059\u308b\n4. CUDA\u306e\u30c9\u30e9\u30a4\u30d0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u5b9f\u884c\u3059\u308b\n\n\u3068\u3044\u3046\u611f\u3058\u3092\u76ee\u6a19\u306b\u3057\u307e\u3059\u3002llc\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3084CUDA\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u7d44\u307f\u5408\u308f\u305b\u308c\u3070\u7c21\u5358\u306b\u3067\u304d\u305d\u3046\u3067\u3059\u304c\u3001\u3068\u306f\u3044\u3048\u5e7e\u3064\u304b\u58c1\u304c\u3042\u308a\u307e\u3059\u3002\n\n## LLVM IR\u3063\u3066\u3069\u3046\u3084\u3063\u3066\u751f\u6210\u3059\u3093\u306e\u3088\n\u306a\u3093\u3060\u304b\u3044\u304f\u3064\u304b\u3084\u308a\u65b9\u306f\u3042\u308b\u307f\u305f\u3044\u3067\u3059\u304c\u3001\u4e3b\u306a\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n1. Context\u3092\u3064\u304f\u308b\n2. Context\u3092\u4f7f\u3063\u3066Module\u3092\u3064\u304f\u308b\n3. Module\u306e\u4e2d\u306bFunction\u3092\u3064\u304f\u308b\n4. Function\u306e\u4e2d\u306bBasicBlock\u3092\u6700\u4f4e1\u3064\u306f\u3064\u304f\u308b\n5. IRBuilder<>\u3092\u3064\u304f\u3063\u3066\u5e0c\u671b\u306eBasicBlock\u306b\u5411\u3051\u308b\n6. IRBuilder\u3092\u4f7f\u3063\u3066\u547d\u4ee4\u5217\u3092\u66f8\u304d\u8fbc\u3080\n\n\u3048\u3048\u3001\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u306d\u3002\u5177\u4f53\u4f8b\u3092\u3002\n\n```\nLLVMContext context;\nModule *module = new Module(\"repl_module\", context);\n\nstd::vector<Type*> arg_types;\narg_types.push_back(PointerType::get(Type::getInt32Ty(context), 1));\n\nFunctionType *function_type = FunctionType::get( Type::getVoidTy(context), arg_types, false);\n\nFunction *function = cast<Function>(module->getOrInsertFunction(\"repl_function\", function_type));\nBasicBlock::Create(context, \"EntryBlock\", function);\n```\n\nContext\u3092\u4f5c\u3063\u3066\u3001Module\u306b\u540d\u524d\u3092\u3064\u3051\u3066\u3001Function\u306e\u578b\u3092\u3064\u304f\u3063\u3066\u3001BasicBlock\u3092\u4f5c\u3063\u3066\u3001\u3053\u3053\u307e\u3067\u304c4\u306e\u624b\u9806\u3067\u3059\u3002\n\n\u3055\u3089\u306b\u3001\u4eca\u56de\u306fPTX\u5411\u3051\u306eLLVM IR\u3092\u4f5c\u3089\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u304b\u3089\u3001\n\n1. kernel\u95a2\u6570\u3067\u3042\u308b\u3053\u3068\u3092metadata\u3092\u4f7f\u7528\u3057\u3066\u660e\u793a\u3059\u308b\n2. global memory\u306eaddrspace\u3092\u304d\u3061\u3093\u3068\u6307\u5b9a\u3059\u308b\n\n\u3068\u3044\u3063\u305f\u624b\u9806\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u306e\u3068\u304a\u308a\u3002\n\n```metadata\nNamedMDNode *annotate = module->getOrInsertNamedMetadata(\"nvvm.annotations\");\nstd::vector<Value *> vals;\nvals.push_back(function);\nvals.push_back(MDString::get(context, \"kernel\"));  vals.push_back(ConstantInt::get(Type::getInt32Ty(context), 1));\nannotate->addOperand(MDNode::get(context, vals));\n```\n\naddrspace\u306f\u6700\u521d\u306e\u4f8b\u306earg_types\u3092\u4f5c\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u306b\u3042\u308a\u307e\u3059\u3002\n\n```\narg_types.push_back(PointerType::get(Type::getInt32Ty(context), 1));\n```\n\nPointerType::get\u306e\u3075\u305f\u3064\u3081\u306e\u5f15\u6570\u306e1\u304cglobal memory\u306eaddrspace\u3067\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304caddrspace\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bNVPTX.h\u306fLLVM\u306e\u516c\u958b\u30d8\u30c3\u30c0**\u3067\u306f\u7121\u3044**\u306e\u3067\u3053\u3046\u3044\u3046\u6642\u3061\u3087\u3063\u3068\u5fae\u5999\u3067\u3059\u306d\u30fb\u30fb\u30fb\n\n\u3042\u3068\u306f\u3001\u69cb\u6587\u6728\u3092\u624b\u7e70\u3063\u3066\u5f0f\u3092\u3064\u304f\u308a\u3001\u305d\u306e\u7d50\u679c\u3092int *dst\u306e\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u306b\u30b9\u30c8\u30a2\u3059\u308b\u3001\u3068\u3044\u3046\u547d\u4ee4\u5217\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\n\n```\nglobal::builder = new IRBuilder<>(bb);\nAstNode *node = parse(buf);\nArgument *dst = function->arg_begin();\nValue *value = node->get();\nglobal::builder->CreateStore(value, dst);\nglobal::builder->CreateRetVoid();\n```\n\nAstNode\u30af\u30e9\u30b9\u304c\u69cb\u6587\u6728\u3092\u8868\u3059\u57fa\u5e95\u30af\u30e9\u30b9\u3067\u3059\u3002BinOpNode\u3068ValueNode\u304c\u3053\u308c\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\nAstNode\u30af\u30e9\u30b9\u306fllvm::Value get(void)\u3068\u3044\u3046\u30b7\u30b0\u30cd\u30c1\u30e3\u306e\u4eee\u60f3\u95a2\u6570\u3092\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u304a\u308a\u3001\u3053\u308c\u3092\u518d\u5e30\u7684\u306b\u547c\u3073\u51fa\u3057\u3066\u69cb\u6587\u6728\u3092LLVM IR\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\u7d9a\u3044\u3066IRBBuilder<>::CreateStore\u3067\u30b9\u30c8\u30a2\u547d\u4ee4\u3092\u3064\u304f\u308a\u3001\u6700\u5f8c\u306bIRBuilder<>::CreateRetVoid\u3067\u95a2\u6570\u306e\u7d42\u4e86\u3092\u660e\u793a\u3057\u307e\u3059\u3002\n\n## PTX Backend\u3063\u3066\u3069\u3046\u4f7f\u3046\u306e\u3088\n\u3055\u3066\u3001\u3053\u308c\u3067LLVM IR\u306f\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u3092PTX\u306b\u5909\u63db\u3059\u308b\u306b\u306f\u3069\u3093\u306a\u624b\u9806\u304c\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u307e\u305a\u306fNVPTX\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u521d\u671f\u5316\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n```\n// Initialize LLVM subsystems\nLLVMInitializeNVPTXTargetInfo();\nLLVMInitializeNVPTXTarget();\nLLVMInitializeNVPTXTargetMC();\nLLVMInitializeNVPTXAsmPrinter();\n\nPassRegistry *Registry = PassRegistry::getPassRegistry();\ninitializeCore(*Registry);\ninitializeCodeGen(*Registry);\ninitializeLoopStrengthReducePass(*Registry);\ninitializeLowerIntrinsicsPass(*Registry);\ninitializeUnreachableBlockElimPass(*Registry);\n```\n\nLLVMInitializeNVPTX*\u3068\u3044\u3046\u95a2\u6570\u3067\u3059\u304c\u3001\u30d8\u30c3\u30c0\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u9069\u5f53\u306b\u5ba3\u8a00\u3057\u3066\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002llc\u3060\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3059\u3079\u3066\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u521d\u671f\u5316\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306fPTX\u3060\u3051\u3067\u3088\u304f\u3001\u4f59\u8a08\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ea\u30f3\u30af\u3059\u308b\u3068\u30d3\u30eb\u30c9\u306e\u305f\u3073\u306b\u3048\u3089\u304f\u6642\u9593\u3092\u98df\u3046\u306e\u3067\u3053\u3046\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u6b21\u306b\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u5e7e\u3064\u304b\u5165\u529b\u3057\u3066\u3084\u308a\u307e\u3059\u3002\n\n```\nTriple triple;\nstd::string err;\nconst Target *target = TargetRegistry::lookupTarget(\"nvptx64\", triple, err);\n\nstd::auto_ptr<TargetMachine> target_machine(target->createTargetMachine(triple.getTriple(), \"sm_20\", \"\", TargetOptions()));\n```\n\nTargetMachine\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u4fdd\u6301\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\nTargetRegistry::lookupTarget\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u540d\u304b\u3089\u9069\u5207\u306aTriple\uff08\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u60c5\u5831\u3092\u8868\u30593\u3064\u7d44\u306e\u6587\u5b57\u5217\uff09\u3092\u5c0e\u51fa\u3067\u304d\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u7528\u3057\u3066TargetMachine\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001GPU\u306eCompute Capability \"sm_20\"\u7b49\u3082\u3053\u3053\u3067\u6587\u5b57\u5217\u3068\u3057\u3066\u4e0e\u3048\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u305d\u3057\u3066\u3044\u3088\u3044\u3088PTX\u3078\u306e\u5909\u63db\u90e8\u5206\u3067\u3059\u3002\n\n```\nPassManager pm;\npm.add(new TargetLibraryInfo(triple));\npm.add(new TargetTransformInfo(target_machine->getScalarTargetTransformInfo(), target_machine->getVectorTargetTransformInfo()));\npm.add(new DataLayout(*(target_machine->getDataLayout())));\n\ntarget_machine->setAsmVerbosityDefault(true);\n\nstd::string ptxcode;\nraw_string_ostream ros(ptxcode);\nformatted_raw_ostream fos(ros);\ntarget_machine->addPassesToEmitFile(pm, fos, TargetMachine::CGFT_AssemblyFile);\n```\n\nPassManager\u3068\u306f\u4f55\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3059\u3053\u3057\u3060\u3051LLVM\u306e\u5185\u90e8\u5b9f\u88c5\u306e\u8a71\u306b\u306a\u308a\u307e\u3059\u304c\u3001LLVM\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u306f\u30d1\u30b9\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u30d1\u30b9\u3068\u306f\u3001\u7c21\u5358\u306b\u8a00\u3063\u3066\u3057\u307e\u3048\u3070Module\u3084Function\u3092\u53d6\u3063\u3066\u3001\u305d\u308c\u3092\u6539\u5909\u3057\u305f\u308a\u5916\u306b\u30c0\u30f3\u30d7\u3057\u305f\u308a\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3060\u3051\u3067\u306a\u304fLLVM IR\u306e\u6700\u9069\u5316\u3082\u3053\u306e\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\u3001llc\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30d5\u30a7\u30fc\u30ba\u306f\u4f55\u5341\u304b\u3089\u4f55\u767e\u3068\u3044\u3046\u69d8\u3005\u306a\u30d1\u30b9\u306e\u7d44\u307f\u5408\u308f\u305b\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306fPassManager\u306b\u5bfe\u3057\u3066\u3001ptxcode\u3068\u3044\u3046std::string\u3092\u30d0\u30c3\u30d5\u30a1\u306b\u3082\u3064stream\u306b\u30a2\u30bb\u30f3\u30d6\u30ea\u5f62\u5f0f\u3067\u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\u3068\u3044\u3046\u30d1\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002repl\u306e\u30eb\u30fc\u30d7\u4e2d\u3067\u3001\u3053\u308c\u3089\u306e\u30d1\u30b9\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\n// Codegen PTX using NVPTX\npm.run(*module);\nfos.flush();\n```\n\nfos.flush()\u3092\u5fd8\u308c\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002raw_string_ostream\u306f\u5185\u90e8\u30d0\u30c3\u30d5\u30a1\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5927\u304d\u3055\u304c\u4e00\u5b9a\u4ee5\u4e0a\u306e\u5927\u304d\u3055\u306b\u306a\u308b\u307e\u3067\u3001\u5916\u90e8\u30d0\u30c3\u30d5\u30a1\u306b\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3057\u307e\u305b\u3093\u3002\n\n\u3053\u308c\u3067\u3081\u3067\u305f\u304fptxcode\u306bPTX\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\n## PTX\u3092\u3069\u3046\u3084\u3063\u3066GPU\u3067\u5b9f\u884c\u3055\u305b\u3093\u306e\u3088\nCUDA\u306e\u30c9\u30e9\u30a4\u30d0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9(cuda*\u3067\u306f\u306a\u304fcu*\u3068\u3044\u3046\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9)\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u52d5\u7684\u306bPTX\u3092\u30ed\u30fc\u30c9\u3057\u3066GPU\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```\n// Load PTX and Exec\n\n// CUmodule\u3092\u3064\u304f\u308a\u307e\u3059\nCUmodule cu_module;\ncuModuleLoadDataEx(&cu_module, ptxcode.c_str(), 0, 0, 0);\n\n// CUfunction\u3092\u3064\u304f\u308a\u307e\u3059\nCUfunction cu_function;\ncuModuleGetFunction(&cu_function, cu_module, \"repl_function\");\n\n// Block\u306e\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\u3057\u307e\u3059\ncuFuncSetBlockShape(cu_function, 1, 1, 1);\n\n// \u30ab\u30fc\u30cd\u30eb\u306e\u5f15\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\ncuParamSetv(cu_function, 0, &d_dstptr, sizeof(d_dstptr));\ncuParamSetSize(cu_function, sizeof(d_dstptr));\n\n// \u3044\u3051\uff01\ncuLaunchGrid(cu_function, 1, 1);\n\n// \u7d50\u679c\u304f\u308c\ncudaMemcpy(&h_dst, d_dstptr, sizeof(int32_t), cudaMemcpyDeviceToHost);\n```\n\n\u7c21\u5358\u3067\u3059\u306d\u3002\n\n## \u7d50\u679c\n```gpu-repl\n$ rlwrap ./gpu-repl\n>>> (+ 1 2)\n3\n>>> (* (+ 1 2) 4)\n12\n>>>\n```\n\n\u3075\u3080\u3001\u306a\u306b\u3084\u3089\u52d5\u3044\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u306d\u3002\u3067\u3082\u307b\u3093\u3068\u306b\u52d5\u3044\u3066\u3044\u308b\u306e\u304b\u5fc3\u914d\u306a\u306e\u3067PTX\u3092\u30c0\u30f3\u30d7\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\n>>> (* (+ 1 2) 4)\n//\n// Generated by LLVM NVPTX Back-End\n//\n\n.version 3.1\n.target sm_20, texmode_independent\n.address_size 64\n\n\n    // .globl   repl_function\n.entry repl_function(\n    .param .u64 .ptr .global .align 4 repl_function_param_0\n)                                       // @repl_function\n{\n    .reg .pred %p<396>;\n    .reg .s16 %rc<396>;\n    .reg .s16 %rs<396>;\n    .reg .s32 %r<396>;\n    .reg .s64 %rl<396>;\n    .reg .f32 %f<396>;\n    .reg .f64 %fl<396>;\n\n// BB#0:                                // %EntryBlock\n    mov.u32     %r0, 12;\n    ld.param.u64    %rl0, [repl_function_param_0];\n    st.global.u32   [%rl0], %r0;\n    ret;\n}\n\n\n12\n>>> \n```\n\n12\u3092\u30b9\u30c8\u30a2\u30fb\u30fb\u30fb\u3060\u3068\u30fb\u30fb\u30fbLLVM IR\u306f\u3069\u3046\u306a\u306e\u3055\n\n```\n>>> (* (+ 1 2) 4)\n; ModuleID = 'repl_module'\n\ndefine void @repl_function(i32 addrspace(1)*) {\nEntryBlock:\n  store i32 12, i32 addrspace(1)* %0\n  ret void\n}\n\ndeclare void @abort()\n\n!nvvm.annotations = !{!0}\n\n!0 = metadata !{void (i32 addrspace(1)*)* @repl_function, metadata !\"kernel\", i32 1}\n12\n>>> \n\n```\n\n\u30fb\u30fb\u30fb\u307e\u3042\u3001\u305d\u30fc\u3067\u3059\u3088\u306d\u30fc\n\n\u4eca\u56de\u306erepl\u306e\u5165\u529b\u304c\u53d7\u3051\u4ed8\u3051\u308b\u306e\u306f\u6574\u6570\u5b9a\u6570\u306a\u306e\u3067\u3001IR\u306e\u69cb\u7bc9\u6642\u306b\u5168\u3066Constant Folding\u3055\u308c\u3066\u5b9a\u6570\u30b9\u30c8\u30a2\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3057\u305f\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\uff01GPU\u306e\u6709\u308a\u4f59\u308b\u8a08\u7b97\u30d1\u30ef\u30fc\u3092\u4f7f\u3063\u3066\uff01\u5b9a\u6570\u3067\u30e1\u30e2\u30ea\u3092\u57cb\u3081\u308b\u3068\u3044\u3046\u65b0\u305f\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3053\u3053\u306b\u7206\u8a95\u3057\u307e\u3057\u305f\uff01\u304a\u3081\u3067\u3068\u3046\uff01\u3042\u308a\u304c\u3068\u3046\uff01\n\n## \u30b5\u30f3\u30bf\u3055\u3093\u304b\u3089\u306e\u30d7\u30ec\u30bc\u30f3\u30c8\u3060\u3088\u3049\n[\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9] (https://bitbucket.org/iitaku/gpu-repl)\n\n\u305d\u308c\u3067\u306f\u7686\u3055\u3093\u826f\u3044\u30af\u30ea\u30b9\u30de\u30b9\u3092\u3002", "tags": ["GPU", "LLVM", "NVIDIA"]}