{"context": " More than 1 year has passed since last update.\u524d\u56de\u306b\u7d9a\u3044\u3066\u3001PRML1\u7ae0\u304b\u3089\u300c1.2.6 \u30d9\u30a4\u30ba\u63a8\u5b9a\u300d\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u56f31.17\u306e\u518d\u73fe\u3067\u3059\u304c\u3001M=9\u3068\u3057\u305f\u4e0a\u3067\u3001\u4e88\u6e2c\u5206\u5e03\u306e\u5e73\u5747\u3068\u00b11\u03c3\u306e\u7bc4\u56f2\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\u6570\u5f0f\u8ffd\u3063\u3066\u308b\u3060\u3051\u3060\u3068\u62bd\u8c61\u7684\u3067\u3001\u3044\u307e\u3044\u3061\u30d4\u30f3\u3068\u6765\u306a\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3001\n\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u3001(1.70)\u3001(1.71)\u304c\u5206\u5e03\u3092\u793a\u3059\u3053\u3068\u304c\u5177\u4f53\u7684\u306b\u53ef\u8996\u5316\u3055\u308c\u3066\u8179\u306b\u843d\u3061\u307e\u3057\u305f\u3002\n\u3053\u306e\u4e88\u6e2c\u7cbe\u5ea6\u304c\u3001\u524d\u56de\u306e\u591a\u9805\u5f0f\u66f2\u7dda\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3068\u3069\u3046\u7570\u306a\u308b\u306e\u304b\u306f\u4eca\u56de\u306e\u4f8b\u304b\u3089\u306f\u5224\u65ad\u3067\u304d\u307e\u305b\u3093\u304c\u3001\n\u305d\u308c\u305e\u308c\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u304b\u3092\u7406\u89e3\u3059\u308b\u4e0a\u3067\u306f\u5927\u5909\u5f79\u7acb\u3061\u307e\u3057\u305f\u3002\n\n\u5b9f\u88c5\u306e\u5927\u307e\u304b\u306a\u6d41\u308c\n\u2460\u6c42\u3081\u305f\u3044\u306e\u306f\u4e88\u6e2c\u5206\u5e03(1.69)\u3002\n p(t| x, {\\bf x}, {\\bf t}) = N(t| m(x), s^2(x)) (1.69)\n\n\u2461\u4eca\u56de\u3001\u57fa\u5e95\u95a2\u6570\u306f$\\phi_i(x) = x^i$ for $i = 0,...M$ \u3002\n\u2462\u4e88\u6e2c\u5206\u5e03\u306e\u5e73\u5747\u3001\u5206\u6563\u3092\u6c42\u3081\u308b\u5f0f\u306f\u4e0b\u8a18\u306e3\u3064\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u305d\u308c\u305e\u308c\u5b9f\u88c5\u3057\u3066\u3001\u4e88\u6e2c\u7bc4\u56f2 $0.0<x<1.0$\u306e\u5206\u5e03\u3092\u53ef\u8996\u5316\u3059\u308b\u3002\nm(x) = \\beta\\phi(x)^{\\bf T}{\\bf S} \\sum_{n=1}^N \\phi(x_n)t_n(1.70)]\n\n s^2(x) = \\beta^{-1} + \\phi(x)^{\\bf T} {\\bf S} \\phi(x)(1.71)\n\n{\\bf S}^{-1} = \\alpha {\\bf I} + \\beta \\sum_{n=1}^N \\phi(x_n)\\phi(x_n)^{\\bf T}(1.72)\n\n\n\u30b3\u30fc\u30c9\nimport numpy as np\nfrom numpy.linalg import inv\nimport pandas as pd\nfrom pylab import *\nimport matplotlib.pyplot as plt\n\n#From p31 the auther define phi as following\ndef phi(x):\n    return np.array([x**i for i in xrange(M+1)]).reshape((M+1, 1))\n\n#(1.70) Mean of predictive distribution\ndef m(x, x_train, y_train, S):\n    sum = np.array(zeros((M+1, 1)))\n    for n in xrange(len(x_train)):\n        sum += np.dot(phi(x_train[n]), y_train[n])\n    return Beta * phi(x).T.dot(S).dot(sum)\n\n\n#(1.71) Variance of predictive distribution   \ndef s2(x, S):\n    return 1.0/Beta + phi(x).T.dot(S).dot(phi(x))\n\n#(1.72)\ndef S(x_train, y_train):\n    I = np.identity(M+1)\n    Sigma = np.zeros((M+1, M+1))\n    for n in range(len(x_train)):\n        Sigma += np.dot(phi(x_train[n]), phi(x_train[n]).T)\n    S_inv = alpha*I + Beta*Sigma\n    S = inv(S_inv)\n    return S\n\nif __name__ == \"__main__\":\n    alpha = 0.005\n    Beta = 11.1\n    M = 9\n\n    #Sine curve\n    x_real = np.arange(0, 1, 0.01)\n    y_real = np.sin(2*np.pi*x_real)\n\n    ##Training Data\n    N=10\n    x_train = np.linspace(0, 1, 10)\n\n    #Set \"small level of random noise having a Gaussian distribution\"\n    loc = 0\n    scale = 0.3\n    y_train =  np.sin(2*np.pi*x_train) + np.random.normal(loc,scale,N)\n\n\n    S = S(x_train, y_train)\n\n    #Seek predictive distribution corespponding to entire x\n    mean = [m(x, x_train, y_train, S)[0,0] for x in x_real]\n    variance = [s2(x, S)[0,0] for x in x_real]\n    SD = np.sqrt(variance)\n    upper = mean + SD\n    lower = mean - SD\n\n\n    plot(x_train, y_train, 'bo')\n    plot(x_real, y_real, 'g-')\n    plot(x_real, mean, 'r-')\n    fill_between(x_real, upper, lower, color='pink')\n    xlim(0.0, 1.0)\n    ylim(-2, 2)\n    title(\"Figure 1.17\")\n\n\n\u7d50\u679c\n\n\u524d\u56de\u306b\u7d9a\u3044\u3066\u3001PRML1\u7ae0\u304b\u3089\u300c1.2.6 \u30d9\u30a4\u30ba\u63a8\u5b9a\u300d\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u56f31.17\u306e\u518d\u73fe\u3067\u3059\u304c\u3001M=9\u3068\u3057\u305f\u4e0a\u3067\u3001\u4e88\u6e2c\u5206\u5e03\u306e\u5e73\u5747\u3068\u00b11\u03c3\u306e\u7bc4\u56f2\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6570\u5f0f\u8ffd\u3063\u3066\u308b\u3060\u3051\u3060\u3068\u62bd\u8c61\u7684\u3067\u3001\u3044\u307e\u3044\u3061\u30d4\u30f3\u3068\u6765\u306a\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3001\n\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u3001(1.70)\u3001(1.71)\u304c\u5206\u5e03\u3092\u793a\u3059\u3053\u3068\u304c\u5177\u4f53\u7684\u306b\u53ef\u8996\u5316\u3055\u308c\u3066\u8179\u306b\u843d\u3061\u307e\u3057\u305f\u3002\n\u3053\u306e\u4e88\u6e2c\u7cbe\u5ea6\u304c\u3001\u524d\u56de\u306e\u591a\u9805\u5f0f\u66f2\u7dda\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3068\u3069\u3046\u7570\u306a\u308b\u306e\u304b\u306f\u4eca\u56de\u306e\u4f8b\u304b\u3089\u306f\u5224\u65ad\u3067\u304d\u307e\u305b\u3093\u304c\u3001\n\u305d\u308c\u305e\u308c\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u304b\u3092\u7406\u89e3\u3059\u308b\u4e0a\u3067\u306f\u5927\u5909\u5f79\u7acb\u3061\u307e\u3057\u305f\u3002\n\n##\u5b9f\u88c5\u306e\u5927\u307e\u304b\u306a\u6d41\u308c\n\u2460\u6c42\u3081\u305f\u3044\u306e\u306f\u4e88\u6e2c\u5206\u5e03(1.69)\u3002\n\n```math\n p(t| x, {\\bf x}, {\\bf t}) = N(t| m(x), s^2(x)) (1.69)\n```\n\n\u2461\u4eca\u56de\u3001\u57fa\u5e95\u95a2\u6570\u306f$\\phi_i(x) = x^i$ for $i = 0,...M$ \u3002\n\n\u2462\u4e88\u6e2c\u5206\u5e03\u306e\u5e73\u5747\u3001\u5206\u6563\u3092\u6c42\u3081\u308b\u5f0f\u306f\u4e0b\u8a18\u306e3\u3064\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u305d\u308c\u305e\u308c\u5b9f\u88c5\u3057\u3066\u3001\u4e88\u6e2c\u7bc4\u56f2 $0.0<x<1.0$\u306e\u5206\u5e03\u3092\u53ef\u8996\u5316\u3059\u308b\u3002\n\n```math\nm(x) = \\beta\\phi(x)^{\\bf T}{\\bf S} \\sum_{n=1}^N \\phi(x_n)t_n(1.70)]\n```\n\n```math\n s^2(x) = \\beta^{-1} + \\phi(x)^{\\bf T} {\\bf S} \\phi(x)(1.71)\n```\n\n```math\n{\\bf S}^{-1} = \\alpha {\\bf I} + \\beta \\sum_{n=1}^N \\phi(x_n)\\phi(x_n)^{\\bf T}(1.72)\n```\n\n##\u30b3\u30fc\u30c9\n```python\nimport numpy as np\nfrom numpy.linalg import inv\nimport pandas as pd\nfrom pylab import *\nimport matplotlib.pyplot as plt\n\n#From p31 the auther define phi as following\ndef phi(x):\n    return np.array([x**i for i in xrange(M+1)]).reshape((M+1, 1))\n\n#(1.70) Mean of predictive distribution\ndef m(x, x_train, y_train, S):\n    sum = np.array(zeros((M+1, 1)))\n    for n in xrange(len(x_train)):\n        sum += np.dot(phi(x_train[n]), y_train[n])\n    return Beta * phi(x).T.dot(S).dot(sum)\n\n    \n#(1.71) Variance of predictive distribution   \ndef s2(x, S):\n    return 1.0/Beta + phi(x).T.dot(S).dot(phi(x))\n\n#(1.72)\ndef S(x_train, y_train):\n    I = np.identity(M+1)\n    Sigma = np.zeros((M+1, M+1))\n    for n in range(len(x_train)):\n        Sigma += np.dot(phi(x_train[n]), phi(x_train[n]).T)\n    S_inv = alpha*I + Beta*Sigma\n    S = inv(S_inv)\n    return S\n\nif __name__ == \"__main__\":\n    alpha = 0.005\n    Beta = 11.1\n    M = 9\n    \n    #Sine curve\n    x_real = np.arange(0, 1, 0.01)\n    y_real = np.sin(2*np.pi*x_real)\n    \n    ##Training Data\n    N=10\n    x_train = np.linspace(0, 1, 10)\n    \n    #Set \"small level of random noise having a Gaussian distribution\"\n    loc = 0\n    scale = 0.3\n    y_train =  np.sin(2*np.pi*x_train) + np.random.normal(loc,scale,N)\n    \n    \n    S = S(x_train, y_train)\n    \n    #Seek predictive distribution corespponding to entire x\n    mean = [m(x, x_train, y_train, S)[0,0] for x in x_real]\n    variance = [s2(x, S)[0,0] for x in x_real]\n    SD = np.sqrt(variance)\n    upper = mean + SD\n    lower = mean - SD\n    \n    \n    plot(x_train, y_train, 'bo')\n    plot(x_real, y_real, 'g-')\n    plot(x_real, mean, 'r-')\n    fill_between(x_real, upper, lower, color='pink')\n    xlim(0.0, 1.0)\n    ylim(-2, 2)\n    title(\"Figure 1.17\")\n```\n\n##\u7d50\u679c\n![Screen Shot 2015-09-18 at 07.22.52.png](https://qiita-image-store.s3.amazonaws.com/0/62779/5eab063a-48ea-ff52-0976-af3bf2ae44cf.png)\n", "tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "PRML"]}