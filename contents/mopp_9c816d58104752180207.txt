{"context": " More than 1 year has passed since last update.\n\nIntroduction Rust for Creating Your Operating System\n\u3053\u308c\u306f\u3001Rust\u3092\u4f7f\u3063\u3066\u81ea\u4f5cOS\u3092\u3059\u308b\u305f\u3081\u306e\u624b\u5f15\u517c\u30e1\u30e2\u3067\u3059.\n\u9593\u9055\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u4f55\u304b\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u3092\u304a\u306d\u304c\u3044\u3057\u307e\u3059.\n\nIntroduction\nRust\u306f\u3001Mozilla\u306b\u3088\u3063\u3066\u958b\u767a\u3055\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3042\u308a\u3001\u76ee\u6a19\u306e\u4e00\u3064\u306bCPU\u3084OS\u306a\u3069\u306eLow-level\u306a\u3082\u306e\u3092\u62bd\u8c61\u5316\u3059\u308b\u3053\u3068\u304c\u3042\u308b.\n\u7279\u5fb4\u3068\u3057\u3066\u306f\u3001\u30e1\u30e2\u30ea\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306e\u8a00\u8a9e\u7684\u6a5f\u80fd\u306a\u3069\u306a\u3069\u3068\u3044\u308d\u3044\u308d\u3042\u308b\u304c\u3001\u89e6\u308c\u308b\u3068\u9577\u304f\u306a\u308b\u306e\u3067\u7c21\u5358\u306b\u3001OS\u3092\u4f5c\u308b\u3053\u3068\u3092\u8003\u3048\u305f\u6642\u306b\u6c17\u306b\u306a\u308b\u3067\u3042\u308d\u3046\u4e8b\u9805\u3092\u66f8\u3044\u3066\u304a\u304f.\n\u307e\u305f\u3001\u7279\u306b\u4e0a\u304b\u3089\u9806\u306b\u8aad\u3080\u5fc5\u8981\u306f\u306a\u304f\u3001\u5fc5\u8981\u306a\u7b87\u6240\u3060\u3051\u5fc5\u8981\u306a\u3068\u304d\u306b\u53c2\u7167\u3059\u308b\u3057\u3066\u307b\u3057\u3044.\nstable\u306arust\u3060\u3068\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u304c\u4f7f\u3048\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\u5148\u306bEnvironment\u306e\u9805\u3092\u898b\u3066\u3001\u30d3\u30eb\u30c9\u3057\u3066\u304a\u304f\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3059\u308b.\n\nFeatures of Rust\n\u3053\u308c\u3089\u306b\u3064\u3044\u3066\u3001\u7c21\u5358\u306b\u66f8\u3053\u3046\u3068\u601d\u3044\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\u975e\u5e38\u306b\u3088\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u6295\u7a3f\u3092\u767a\u898b\u3057\u305f\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044.\n* Rust1.0\u5b66\u7fd2\u7528\u79c1\u7684\u30e1\u30e2\n* Rust\u306e\u30dd\u30a4\u30f3\u30bf\uff08\u6240\u6709\u6a29\u30fb\u53c2\u7167\uff09\u30fb\u53ef\u5909\u6027\u306b\u3064\u3044\u3066\u306e\u7c21\u5358\u306a\u307e\u3068\u3081\n* Borrow and AsRef\n\u307e\u305f\u3001References\u306e\u6bb5\u843d\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u304c\u3001\u4ee5\u4e0b\u306e2\u3064\u304crust\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3068reference\u3067\u3042\u308b.\n* The Rust Programming Language\n* The Rust Reference\n\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308b\u8a00\u8a9e\u7684\u306a\u3053\u3068\u306f\u3001\u3082\u3061\u308d\u3093\u5168\u3066\u3001\u3053\u308c\u3089\u306e\u4e2d\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u3088\u308a\u53b3\u5bc6\u3067\u8a73\u7d30\u306a\u4e8b\u67c4\u304c\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u3001\u305d\u3061\u3089\u3092\u8aad\u3093\u3067\u3044\u305f\u3060\u304d\u305f\u3044.\n\nunsafe block\nOS\u3092\u81ea\u4f5c\u3059\u308b\u969b\u3001Video memory\u3084\u30c7\u30d0\u30a4\u30b9IO\u306a\u3069\u3001\u30e1\u30e2\u30ea\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u76f4\u306b\u6307\u5b9a\u3057\u3001\u8aad\u307f\u66f8\u304d\u3092\u884c\u3046\u3053\u3068\u304c\u3088\u304f\u3042\u308b.\nC\u8a00\u8a9e\u3067\u3053\u308c\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u5b9a\u77f3\u3060\u3068\u601d\u308f\u308c\u308b.\n// vram.c\n// Fill in text mode vram with blue.\nfor (size_t i = 0xB8000; i < 0xC0000; i += 2) {\n    *(uint16_t*)(i) = 0x1220;\n}\n\n\u3053\u306e\u3088\u3046\u306a\u64cd\u4f5c\u3092rust\u3067\u884c\u3046\u5834\u5408\u306b\u306funsafe\u30d6\u30ed\u30c3\u30af\u3067\u8a72\u5f53\u7b87\u6240\u3092\u56f2\u307f\u3001rust\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3001\u30d6\u30ed\u30c3\u30af\u5185\u306e\u52d5\u4f5c\u306f\u30d7\u30ed\u30b0\u30e9\u30de\u3067\u8cac\u4efb\u3092\u6301\u3064\u3068\u3044\u3046\u3053\u3068\u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\n\u4e0a\u8a18C\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u3053\u3068\u3092\u884c\u3046rust\u30d7\u30ed\u30b0\u30e9\u30e0\u4ee5\u4e0b\u306b\u306a\u308b.\n// vram.rs\nlet mut i = 0xB8000;\nwhile i < 0xC0000 {\n    unsafe {\n        *(i as *mut u16) = 0x1220;\n    }\n    i += 2;\n}\n\n\u305f\u3060\u3057\u3001rust\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6069\u6075\u3092\u6700\u5927\u9650\u306b\u53d7\u3051\u308b\u305f\u3081\u306bunsafe\u30d6\u30ed\u30c3\u30af\u306a\u3044\u306e\u30b3\u30fc\u30c9\u306f\u6700\u5c0f\u9650\u306b\u7559\u3081\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044.\n\u4ed6\u306b\u3082\u5177\u4f53\u7684\u306bunsafe\u30d6\u30ed\u30c3\u30af\u5185\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308b.\n* \u751f\u30dd\u30a4\u30f3\u30bf\u306e\u53c2\u7167\u5916\u3057 (\u4e0a\u8a18\u306e\u4f8b)\n* FFI(Foreign Function Interface)\u7d4c\u7531\u3067\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\n* \u30d3\u30c3\u30c8\u5358\u4f4d\u3067\u306e\u30ad\u30e3\u30b9\u30c8\n* \u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30ea\n\nno_std\n\u901a\u5e38\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u4f55\u3089\u304b\u306eOS\u306e\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u3001\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u5fc5\u8981\u3068\u3059\u308b(\u30d7\u30ed\u30bb\u30b9\u306e\u751f\u6210\u3068\u7d42\u4e86\u3001\u5165\u51fa\u529b\u306a\u3069\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u591a\u304f\u306f\u305d\u308c\u3092\u5fc5\u8981\u3068\u3059\u308b).\n\u3057\u304b\u3057\u3001\u305d\u308c\u3089\u306e\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306fOS\u304c\u63d0\u4f9b\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u304b\u3089\u3001OS\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306b\u4f7f\u3046\u308f\u3051\u306b\u306f\u884c\u304b\u306a\u3044(\u3068\u3044\u3046\u3088\u308a\u306a\u3044\u3082\u306e\u306f\u4f7f\u3048\u306a\u3044\u3001printf\u306f\u5049\u5927\u306a\u306e\u3060).\n\u3060\u3044\u3076\u5927\u96d1\u628a\u306a\u8aac\u660e\u3060\u304c\u3001\u305d\u308c\u3089\u3092\u7121\u52b9\u306b\u3057\u305f\u74b0\u5883\u3092freestanding\u3068\u3044\u3046.\nC\u3067\u306f\u3001\u30ea\u30f3\u30ab\u3084\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6e21\u3057\u3066freestanding\u306a\u30d0\u30a4\u30ca\u30ea(bare-metal\u306a\u30d0\u30a4\u30ca\u30ea)\u3092\u751f\u6210\u3059\u308b.\nrust\u3082\u540c\u69d8\u306b\u3057\u3066\u3001\u30b3\u30fc\u30c9\u4e2d\u306b#[no_std]\u5c5e\u6027\u3092\u6307\u5b9a\u3057\u3066\u884c\u3046.\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u6a5f\u80fd\u306a\u3069\u304c\u7121\u52b9\u5316\u3055\u308c\u308b.\n* \u30e1\u30e2\u30ea\u78ba\u4fdd\n* \u30b9\u30ec\u30c3\u30c9\n* \u51fa\u529b\nno_std\u306e\u6b20\u70b9\u3068\u3057\u3066\u3001std\u306b\u542b\u307e\u308c\u3066\u3044\u308bOS\u975e\u4f9d\u5b58\u306e\u6709\u7528\u306a\u6a5f\u80fd\u307e\u3067\u7121\u52b9\u5316\u3055\u308c\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b(\u4f8b\u3048\u3070\u3001\u30a4\u30c6\u30ec\u30fc\u30bf).\n\u3057\u304b\u3057\u3001libcore\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u3044\u304f\u3064\u304b\u306e\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b.\n\u305f\u3060\u3001libcore\u306funstable\u3067\u3042\u308b\u306e\u3067\u3001\u53ef\u80fd\u306a\u9650\u308astd\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u308b.\n\u3068\u306f\u3044\u3063\u3066\u3082\u3001OS\u3092\u4f5c\u308b\u306e\u306bstd\u3092\u4f7f\u3046\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u306a\u306e\u3067\u30ac\u30f3\u30ac\u30f3libcore\u3092\u4f7f\u3063\u3066\u3044\u3053\u3046\u3068\u8003\u3048\u3066\u3044\u308b.\n\nLang Items\nRust\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6307\u793a\u3092\u51fa\u3059\u305f\u3081\u306b\u4f7f\u3046.\n\u4f8b\u3048\u3070\u3001\u8a00\u8a9e\u5185\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u304c\u3001\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\u3001\u5b58\u5728\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f1d\u3048\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b.\n\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308b\n#[lang = \"...\"]\n\n\u73fe\u5728(2015/09/11), lang item\u306funstable\u3067\u3042\u308b.\n\nError output from rustc\nrustc\u30b3\u30de\u30f3\u30c9\u3067rust\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u304c\u3001\u9a5a\u304f\u307b\u3069\u4e01\u5be7\u306a\u30a8\u30e9\u30fc\u30ed\u30b0\u3060\u3063\u305f\u306e\u3067\u3001\u66f8\u3044\u3066\u304a\u304f.\n\u4f8b\u3068\u3057\u3066\u3001\u4e0a\u90e8\u3067\u30ea\u30f3\u30af\u3092\u8a18\u8f09\u3057\u3066\u304a\u3044\u305f\u3001rust\u306b\u304a\u3051\u308b\u6240\u6709\u6a29\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u898b\u308b\u30b3\u30fc\u30c9\u3092\u6319\u3052\u308b.\nstruct Sushi {\n    neta:&'static str,\n}\n\npub fn main() {\n    let sushi1 = Sushi {neta:\"\u7099\u308a\u3048\u3093\u304c\u308f\"};\n    let sushi2 = sushi1;\n\n    println!(\"{}\", sushi1.neta);\n    println!(\"{}\", sushi2.neta);\n}\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306fsushi1\u304csushi2\u306bmove\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001sushi1.neta\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044.\n\u8a66\u3057\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u3092\u5f97\u3089\u308c\u308b.\n% rustc ./sushi.rs\n./sushi.rs:9:20: 9:31 error: use of moved value: `sushi1.neta` [E0382]\n./sushi.rs:9     println!(\"{}\", sushi1.neta);\n                                ^~~~~~~~~~~\n<std macros>:2:25: 2:56 note: in this expansion of format_args!\n<std macros>:3:1: 3:54 note: in this expansion of print! (defined in <std macros>)\n./sushi.rs:9:5: 9:33 note: in this expansion of println! (defined in <std macros>)\n./sushi.rs:9:20: 9:31 help: run `rustc --explain E0382` to see a detailed explanation\n./sushi.rs:7:9: 7:15 note: `sushi1` moved here because it has type `Sushi`, which is moved by default\n./sushi.rs:7     let sushi2 = sushi1;\n                     ^~~~~~\n./sushi.rs:7:9: 7:15 help: if you would like to borrow the value instead, use a `ref` binding as shown:\n./sushi.rs:      let ref sushi2 = sushi1;\nerror: aborting due to previous error\n\n\u307e\u305a\u3001\u771f\u3063\u5148\u306bmove\u3055\u308c\u3066\u308b\u304b\u3089\u30a8\u30e9\u30fc\u3067\u3042\u308b\u3068\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u3042\u308b.\n\u305d\u306e\u5f8c\u306b\u3001\u5927\u62ec\u5f27\u3067\u66f8\u3044\u3066\u3042\u308b\u306e\u304c\u30a8\u30e9\u30fc\u7a2e\u985e\u306b\u306a\u308b.\n\u3082\u3046\u5c11\u3057\u4e0b\u3092\u898b\u3066\u307f\u308b\u3068\n./sushi.rs:9:20: 9:31 help: run `rustc --explain E0382` to see a detailed explanation\n\n\u3068\u306e\u3053\u3068\u306a\u306e\u3067\u3001rustc --explain E0382\u3092\u5b9f\u884c\u3057\u3066\u307f\u308b.\n:% rustc --explain E0382\nThis error occurs when an attempt is made to use a variable after its contents\nhave been moved elsewhere. For example:\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nIf we own the type, the easiest way to address this problem is to implement\n`Copy` and `Clone` on it, as shown below. This allows `y` to copy the\ninformation in `x`, while leaving the original version owned by `x`. Subsequent\nchanges to `x` will not be reflected when accessing `y`.\n\n#[derive(Copy, Clone)]\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow.s);\n}\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the chapter in the\nBook:\n\nhttps://doc.rust-lang.org/book/ownership.html\n\n\u61c7\u5207\u4e01\u5be7\u306a\u4f8b\u984c\u4ed8\u304d(\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3078\u306e\u30ea\u30f3\u30af\u307e\u3067\u3042\u308b)\u306e\u8aac\u660e\u304c\u51fa\u529b\u3055\u308c\u305f.\n\u3044\u3061\u3044\u3061\u30b0\u30b0\u3089\u306a\u304f\u3066\u3082\u5927\u4f53\u306e\u3053\u3068\u306f\u3053\u308c\u3067\u7406\u89e3\u3067\u304d\u308b\u306f\u305a\u3060.\n\u5927\u5909\u3042\u308a\u304c\u305f\u3044.\n\u3057\u304b\u3057\u3001\u3059\u3079\u3066\u306e\u30a8\u30e9\u30fc\u306b\u3064\u3044\u3066\u3001\u3053\u3046\u3044\u3063\u305f\u8aac\u660e\u304c\u3042\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3089\u3057\u3044.\n\u3053\u306e\u6587\u66f8\u304cMarkdown\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u524a\u9664\u3057\u3066\u3057\u307e\u3063\u305f\u304c\u3001\u8aac\u660e\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30d0\u30c3\u30af\u30af\u30a9\u30fc\u30c8\u3067\u56f2\u307e\u308c\u3066\u3044\u308b.\n\nTesting\nRust\u3067\u306f\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u5185\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b.\n\u4eca\u307e\u3067\u3001C\u8a00\u8a9e\u3067\u66f8\u3044\u3066\u3044\u305f\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u975e\u5e38\u306b\u4fbf\u5229\u3060.\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306f\u3001\u5f53\u7136\u3001\u6a19\u6e96\u51fa\u529b\u306b\u4f55\u304b\u3092\u8868\u793a\u3057\u3066\u30c7\u30d0\u30c3\u30b0\u3092\u884c\u3044\u305f\u304f\u306a\u308b.\nC\u8a00\u8a9e\u3067\u306f\u3001\u30de\u30af\u30ed\u3084Makefile\u306a\u3069\u3092\u99c6\u4f7f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u3053\u308c\u306f\u975e\u5e38\u306b\u9762\u5012\u304f\u3055\u304b\u3063\u305f.\n\u3082\u3057\u3084\u3001Rust\u3067\u3082\u3001\u305d\u3046\u306a\u306e\u3067\u306f\u7121\u3044\u304b\u3068\u5371\u60e7\u3057\u305f\u304c\u7d50\u679c\u3068\u3057\u3066\u3001\u7c21\u5358\u3060\u3063\u305f.\nRust\u3067\u306f\u3001\u6761\u4ef6\u4ed8\u304d\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u305f\u3081\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066\u30bd\u30fc\u30b9\u306b\u3044\u304f\u3064\u304b\u66f8\u304d\u52a0\u3048\u308b\u3060\u3051\u3067\u3001\u30c6\u30b9\u30c8\u6642\u306e\u307f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u3068\u3044\u3063\u305f\u3053\u3068\u304c\u53ef\u80fd\u3060\u3063\u305f.\n\u3064\u307e\u308a\u3001\u81ea\u4f5cOS\u3067\u306flibcore\u3092\u3001\u30c6\u30b9\u30c8\u3067\u306flibstd\u3092\u4f7f\u3046\u3068\u3044\u3046\u5207\u308a\u66ff\u3048\u3092\u884c\u3046\u4e8b\u304c\u3067\u304d\u305f. (\u305f\u3060\u3001libcore\u306funstable\u306a\u306e\u3067\u3001\u305d\u308c\u304c\u6c17\u304c\u304b\u308a\u3067\u3042\u308b...)\n\u66f8\u304d\u304b\u3051\u306e\u3082\u306e\u3067\u7533\u3057\u8a33\u306a\u3044\u304c\u3001text\u30e2\u30fc\u30c9\u3067\u63cf\u753b\u3059\u308b\u305f\u3081\u306eOS\u5185\u306egraphic\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b.\n#![feature(core)]\n#![feature(no_std)]\n#![no_std]\n\nuse core::cell::Cell;\n\npub static COLOR_TEXT_BLACK: u8         = 0x0;\npub static COLOR_TEXT_BLUE: u8          = 0x1;\npub static COLOR_TEXT_GREEN: u8         = 0x2;\npub static COLOR_TEXT_CYAN: u8          = 0x3;\npub static COLOR_TEXT_RED: u8           = 0x4;\npub static COLOR_TEXT_MAGENTA: u8       = 0x5;\npub static COLOR_TEXT_BROWN: u8         = 0x6;\npub static COLOR_TEXT_LIGHT_GRAY: u8    = 0x7;\npub static COLOR_TEXT_DARK_GRAY: u8     = 0x8;\npub static COLOR_TEXT_LIGHT_BLUE: u8    = 0x9;\npub static COLOR_TEXT_LIGHT_GREEN: u8   = 0xA;\npub static COLOR_TEXT_LIGHT_CYAN: u8    = 0xB;\npub static COLOR_TEXT_LIGHT_RED: u8     = 0xC;\npub static COLOR_TEXT_LIGHT_MAGENTA: u8 = 0xD;\npub static COLOR_TEXT_YELLOW: u8        = 0xE;\npub static COLOR_TEXT_WHITE: u8         = 0xF;\n\npub struct Graphic {\n    vram_addr: usize,\n    is_text_mode: bool,\n    pub color_background: Cell<u8>,\n    pub color_foreground: Cell<u8>,\n}\n\n\nimpl Graphic {\n    pub fn new(is_text: bool, vaddr: usize) -> Graphic\n    {\n        let default_bg = if is_text == true { COLOR_TEXT_BLACK } else { 0 };\n        let default_fg = if is_text == true { COLOR_TEXT_GREEN } else { 0 };\n        Graphic {\n            vram_addr:vaddr,\n            is_text_mode:is_text,\n            color_background:Cell::new(default_bg),\n            color_foreground:Cell::new(default_fg),\n        }\n    }\n\n    pub fn change_color(&self, bg: u8, fg: u8)\n    {\n        self.color_background.set(bg);\n        self.color_foreground.set(fg);\n    }\n\n    fn get_one_pixel(&self, c: &char) -> u16\n    {\n        let bg = self.color_background.get() as u16;\n        let fg = self.color_foreground.get() as u16;\n        (bg << 12) | (fg << 8) | (*c as u16)\n    }\n}\n\n\n// Test codes.\n#[cfg(test)]\n#[macro_use]\nextern crate std;\n\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn get_one_pixel() {\n        let graphic = Graphic::new(true, 0xB800);\n        graphic.change_color(COLOR_TEXT_BLUE, COLOR_TEXT_GREEN);\n        assert_eq!(graphic.get_one_pixel(&'A'), 0x1241);\n        println!(\"\\t0x{:x}\", graphic.get_one_pixel(&'A'));\n    }\n}\n\n\u3053\u306e\u4e2d\u306e#[cfg(test)]\u3068\u3044\u3046\u306e\u304c\u6761\u4ef6\u4ed8\u304d\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u8a2d\u5b9a\u5024\u3067\u3001\u30c6\u30b9\u30c8\u6642\u306e\u307f\u6709\u52b9\u306b\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3060.\n\u30d5\u30a1\u30a4\u30eb\u5148\u982d\u3067#![no_std]\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u305f\u3081\u306b\u3001\u30c6\u30b9\u30c8\u6642\u306e\u307fextern crate std;\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b.\n% rustc --test ./graphic.rs\n% ./graphic\n\nrunning 1 test\ntest test::get_one_pixel ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u306e\u3082\u7279\u306b\u96e3\u3057\u304f\u306a\u304f\u3001--test\u3092\u3064\u3051\u308b\u3060\u3051\u3068\u3044\u3046\u3001\u624b\u8efd\u3055\u304c\u3088\u3044.\n\u307e\u305f\u3001\u5b9f\u884c\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u7d50\u679c\u3082\u81ea\u52d5\u3067\u307e\u3068\u3081\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u3053\u308c\u3082\u307e\u305f\u3042\u308a\u304c\u305f\u3044.\n\nReferences\nThe Rust Programming Language\nThe Rust Reference\nRust\u306e\u30dd\u30a4\u30f3\u30bf\uff08\u6240\u6709\u6a29\u30fb\u53c2\u7167\uff09\u30fb\u53ef\u5909\u6027\u306b\u3064\u3044\u3066\u306e\u7c21\u5358\u306a\u307e\u3068\u3081\nBorrow and AsRef\nRust1.0\u5b66\u7fd2\u7528\u79c1\u7684\u30e1\u30e2\nWriting Unsafe and Low-Level Code in Rust\nWriting an OS in Rust in tiny steps (Steps 1-5)\n\nEnvironment\nRust\u306estable(1.2)\u3067\u306f, OS\u3092\u81ea\u4f5c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u6a5f\u80fd\u304c\"Experimental\u306a\u306e\u3067\u4f7f\u7528\u3067\u304d\u306a\u3044\u3088\"\u3068\u306e\u30a8\u30e9\u30fc\u304c\u3067\u308b\u306e\u3067,nightly\u7248\u3092\u30d3\u30eb\u30c9\u3059\u308b.\n\u3082\u3057\u304f\u306f\u3001\u3053\u3053\u304b\u3089nightly\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3082\u826f\u3044.\n\u3053\u3053\u3067\u306e\u5fc5\u8981\u306a\u6a5f\u80fd\u3068\u306f\u3001\u524d\u9805\u3067\u8aac\u660e\u3057\u305ffreestanding\u306a\u30d0\u30a4\u30ca\u30ea\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3082\u306e\u3067\u3042\u308b.\n\u4ee5\u964d\u3067\u306f\u3001github\u306b\u3042\u308brust\u306e\u30bd\u30fc\u30b9\u304b\u3089\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5bfe\u5fdc\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u3092\u751f\u6210\u3067\u304d\u308brust\u30b3\u30f3\u30d1\u30a4\u30e9(rustc)\u306e\u30d3\u30eb\u30c9\u306b\u3064\u3044\u3066\u8aac\u660e\u3092\u3059\u308b.\n\u4f3c\u305f\u624b\u9806\u3067ARM\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u306a\u306e\u3067\u3001\u8a73\u3057\u304f\u306fReferences\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044.\n\u307e\u305f\u3001rust\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f\u3053\u3053\u3092\u898b\u308b\u3068\u308f\u304b\u308b.\n* i686-unknown-linux-gnu\n* x86_64-unknown-linux-gnu\nrust\u3067\u306f\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306bx86_64\u3067\u306f\u306a\u304f\u3001i686\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f (i386\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\u3068\u3044\u3046\u610f\u5473\u306a\u306e\u304b\u3069\u3046\u304b\u306f\u308f\u304b\u3089\u306a\u3044).\n\u307e\u305f\u3001target\u306ftarget triple\u3068\u3044\u3046\u5f62\u5f0f\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u306b\u3082\u6ce8\u610f\u304c\u5fc5\u8981.\n\u30d3\u30eb\u30c9\u3092\u5b9f\u884c\u3057\u305f\u74b0\u5883\u306fArch Linux\u306a\u306e\u3067\u3001Arch Linux\u57fa\u6e96\u3067\u8aac\u660e\u3059\u308b.\n\u4ed6\u306eLinux\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u3082\u3001\u5927\u4f53\u306f\u540c\u3058\u306f\u305a\u3067\u3042\u308b.\n\u307e\u305f\u3001rust\u306b\u9650\u3063\u305f\u8a71\u3067\u306f\u306a\u3044\u304c\u3001\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306bbuild, target, host\u3092\u6df7\u4e71\u3057\u304c\u3061\u306a\u306e\u3067\u3001\u306f\u3063\u304d\u308a\u3055\u305b\u3066\u304a\u304f.\n\u8a73\u3057\u304f\u306f\u3053\u306e\u8a18\u4e8b\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u53c2\u7167\u3057\u3066\u307b\u3057\u3044.\n\n\n\n\u9805\u76ee\n\u8a2d\u5b9a\n\n\n\n\nBuild\nx86_64\n\n\nHost\nx86_64\n\n\nTarget\nx86_64, i686\n\n\n\n\u307e\u305a\u3001i686\u5f62\u5f0f\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u3001multilib\u5bfe\u5fdc\u306eC/C++\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u5fc5\u8981\u3068\u306a\u308b.\nclang\u3067\u3082\u30d3\u30eb\u30c9\u53ef\u80fd\u306a\u306f\u305a\u3060\u304c\u3001utility\u30d8\u30c3\u30c0\u304c\u306a\u3044\u3068\u3044\u3046\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u3069\u3046\u3057\u3066\u3082\u53d6\u308c\u306a\u304b\u3063\u305f\u305f\u3081gcc\u3092\u4f7f\u3063\u305f.\n\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308c\u3070\u3001\u5c0f\u4e00\u6642\u9593\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u7d42\u308f\u308b\u306f\u305a\u3067\u3042\u308b.\nyaourt -S gcc-multilib lib32-gcc-libs\ngit clone https://github.com/rust-lang/rust.git\ncd rust\n./configure --target=i686-unknown-linux-gnu,x86_64-unknown-linux-gnu\nmake -j 4\nsudo make install\n\n\u3053\u306e\u6642\u3001\u30b7\u30b9\u30c6\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(/usr/local/)\u3067\u306f\u306a\u304f\u3001$HOME/.local/\u306a\u3069\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f\u3001configure\u3067\u8a2d\u5b9a\u3092\u5e30\u308b\u3068\u3088\u3044.\n\u305f\u3060\u3057\u3001rustc\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306e\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u3068\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u3001LD_LIBRARY_PATH\u3092\u8a2d\u5b9a\u3059\u308b\u304b\u3001ldconfig\u3059\u308b\u304b\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3068\u306a\u308b.\n\u3053\u3053\u3092\u53c2\u8003\u306b\u597d\u304d\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u3068\u3088\u3044.\n\u3064\u3044\u3067\u306b\u3001cargo\u3082\u5165\u308c\u3066\u304a\u304f\u3068\u4fbf\u5229\u304b\u3082\u3057\u308c\u306a\u3044.\nCargo\u306frust\u5c02\u7528\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u3067\u3042\u308a\u3001\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u3067\u3001\u4f9d\u5b58\u95a2\u4fc2\u304c\u3042\u308b\u30d3\u30eb\u30c9\u306a\u3069\u3082\u7dba\u9e97\u306b\u8a2d\u5b9a\u3067\u304d\u308b\u3053\u3068\u304c\u58f2\u308a\u3089\u3057\u3044.\n\u305f\u3060\u3001OS\u3092\u30d3\u30eb\u30c9\u3059\u308b\u306e\u306f\u96e3\u3057\u305d\u3046\u3060\u3063\u305f\u306e\u3067make\u3092\u4f7f\u3063\u3066\u3044\u308b.\n\u4f59\u8ac7\u3060\u304c\u3001rust\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3053\u3068\u3092crate\u3068\u3044\u3044\u3001\u6728\u7bb1\u306e\u610f\u5473.\n\u305d\u3057\u3066\u3001cargo\u306f\u8ca8\u7269\u3068\u3044\u3046\u610f\u5473.\n\u3064\u307e\u308a\u3001\u6728\u7bb1\u3092\u8ca8\u7269\u3067\u904b\u3076\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b.\n\nReferences\nRust binary archives\nHow to build rust for cross-compiling?\nEmbedded Rust Right Now!\nCannot link against core library when cross compiling\nRust bare metal on ARM microcontroller\nruststrap/1-how-to-cross-compile.md\nRust\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u306blibrustc_driver\u304c\u7121\u3044\u3068\u3044\u308f\u308c\u308b\u73fe\u8c61\u306b\u3064\u3044\u3066\njaparic/rust-on-openwrt\nrust/src/librustc_back/target/\n\nExamples\n\u3053\u3053\u3067\u306f\u3001\u5177\u4f53\u7684\u306a\u4f8b\u3092\u7d39\u4ecb\u3059\u308b.\n\nRust\u306e\u95a2\u6570\u3092C\u304b\u3089\u547c\u3073\u51fa\u3059\nructc\n% rustc -vV\nrustc 1.5.0-dev (e362679bb 2015-10-08)\nbinary: rustc\ncommit-hash: e362679bb6a76064442492fdd5e07f06854f5605\ncommit-date: 2015-10-08\nhost: x86_64-unknown-linux-gnu\nrelease: 1.5.0-dev\n\n\u4ee5\u4e0b\u306eRust\u30d7\u30ed\u30b0\u30e9\u30e0\u304cC\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b\u5074.\n// hello.rs\n#![feature(no_std, lang_items, core_str_ext)]\n#![no_main] // main\u95a2\u6570\u304c\u7121\u3044\u3068\u3044\u3046\u3053\u3068\u3092rustc\u306b\u4f1d\u3048\u3066\u3044\u308b.\n#![no_std]  // \u540c\u69d8\u306b\u3001std\u3092\u4f7f\u7528\u3057\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3092rustc\u306b\u4f1d\u3048\u3066\u3044\u308b.\n\n// C\u304b\u3089\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306bmangling\u3092\u7121\u52b9\u306b\u3059\u308b.\n#[no_mangle]\npub extern fn hello_rust() -> *const u8\n{\n    \"Hello, world!\\0\".as_ptr()\n}\n\n// \u3053\u306e\u8fba\u306f\u3044\u307e\u3044\u3061\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\n// \u304a\u307e\u3058\u306a\u3044\u72b6\u614b\u3067\u3042\u308b.\n#[lang=\"stack_exhausted\"] extern fn stack_exhausted() {}\n#[lang=\"eh_personality\"] extern fn eh_personality() {}\n#[lang=\"panic_fmt\"]\npub fn panic_fmt(_: &core::fmt::Arguments, _: &(&'static str, usize)) -> !\n{\n    loop { }\n}\n\n\u547c\u3073\u51fa\u3059\u5074\u306eC\u30d7\u30ed\u30b0\u30e9\u30e0.\n// main.c\n#include <stdio.h>\n\nextern char const* hello_rust(void);\n\nint main(int argc, char const* argv[])\n{\n    puts(hello_rust());\n    return 0;\n}\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u5b9f\u52b9\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b.\n% rustc --emit=obj hello.rs\n% clang hello.o main.c\n% ./a.out\nHello, world!\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u3078\u306e\u6307\u793a\u304c\u3044\u304f\u3064\u3082\u304b\u3051\u308b\u306e\u306f\u975e\u5e38\u306b\u4fbf\u5229\u3060.\n\u304a\u305d\u3089\u304f\u3001OS\u3092\u4f5c\u308a\u59cb\u3081\u3066\u3044\u304f\u6642\u3082\u3001\u3053\u3093\u306a\u3075\u3046\u306arust\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u308f\u308c\u308b.\nmangling\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3053\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044.\n\nOS Bootloader\n\u3053\u306e\u6587\u66f8\u306fRust\u3092\u4f7f\u3063\u3066\u81ea\u4f5cOS\u3092\u4f5c\u308b\u305f\u3081\u306e\u624b\u5f15\u3067\u3042\u308b\u306e\u3067\u3001\u5c11\u3057\u306f\u81ea\u4f5cOS\u3089\u3057\u3044\u4f8b\u3082\u8f09\u305b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u601d\u3046.\n\u305d\u3053\u3067\u3001nasm\u3067\u66f8\u3044\u305f\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u304b\u3089rust\u306e\u30ab\u30fc\u30cd\u30eb\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u547c\u3073\u51fa\u3059\u3068\u3044\u3046\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u308b.\n\u306a\u304a\u3001multiboot-specification\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u3001\u53b3\u5bc6\u306b\u306f\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u3068\u3044\u3046\u3088\u308a\u306f\u3001nasm\u30b3\u30fc\u30c9\u81ea\u4f53\u304c\u30ab\u30fc\u30cd\u30eb\u30a8\u30f3\u30c8\u30ea\u30fc\u306b\u306a\u308a\u3001rust\u30b3\u30fc\u30c9\u306f\u30ab\u30fc\u30cd\u30eb\u5185\u306e\u5225\u95a2\u6570\u3068\u3044\u3046\u65b9\u304c\u53b3\u5bc6\u304b\u3082\u3057\u308c\u306a\u3044.\n\u4f8b\u306e\u3054\u3068\u304f\u3001multiboot-specification\u306b\u3064\u3044\u3066\u306f\u3053\u3053\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044.\n\u307e\u305f\u3001multiboot-specification\u306b\u5bfe\u5fdc\u3059\u308b\u30ed\u30fc\u30c0\u30fc\u306e\u4e00\u3064\u304cgrub2\u3067\u3042\u308b\u306e\u3067\u3001grub2\u3092\u4f7f\u3046.\n512\u30d0\u30a4\u30c8(MBR\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u9664\u3051\u3070446\u30d0\u30a4\u30c8)\u3067\u7e1b\u308a\u30d7\u30ec\u30a4\u306e\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u304b\u3089\u30ac\u30ea\u30ac\u30ea\u66f8\u3044\u3066\u3044\u304f\u306e\u306f\u6700\u9ad8\u306b\u30a8\u30ad\u30b5\u30a4\u30c6\u30a3\u30f3\u30b0\u3060\u3057\u3001\u81ea\u4f5cOS\u306e\u6700\u521d\u306e\u918d\u9190\u5473\u3067\u306f\u3042\u308b\u304c\u3001\u30b3\u30fc\u30c9\u304c\u9577\u304f\u306a\u308b\u306e\u3067\u3069\u3046\u304b\u8a31\u3057\u3066\u307b\u3057\u3044.\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u4ee5\u4e0b\u304cnasm\u306e\u4e00\u756a\u521d\u3081\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u90e8\u5206\u306b\u306a\u308b.\n; boot.asm\n; vim:ft=nasm:foldmethod=marker\nbits 32\n\n; Multiboot header section.\n; This header is read by multiboot bootstraps loader (E.g., grub2).\n; And based on \"The Multiboot Specification version 0.6.96\"\n; {{{\nMULTIBOOT_HEADER_MAGIC     equ 0x1BADB002 ; The magic number identifying the header\nMULTIBOOT_PAGE_ALIGN_BIT   equ 0x00000001 ; Align all boot modules on i386 page (4KB) boundaries.\nMULTIBOOT_MEMORY_INFO_BIT  equ 0x00000002 ; Must pass memory information to OS.\nMULTIBOOT_VIDEO_MODE_BIT   equ 0x00000004 ; Must pass video information to OS.\nMULTIBOOT_BOOTLOADER_MAGIC equ 0x2BADB002 ; This must be set in %eax by bootloader.\n\nsection .multiboot_header\nalign 4\n    dd MULTIBOOT_HEADER_MAGIC\n    dd (MULTIBOOT_PAGE_ALIGN_BIT | MULTIBOOT_MEMORY_INFO_BIT | MULTIBOOT_VIDEO_MODE_BIT)\n    dd -(MULTIBOOT_HEADER_MAGIC + (MULTIBOOT_PAGE_ALIGN_BIT | MULTIBOOT_MEMORY_INFO_BIT | MULTIBOOT_VIDEO_MODE_BIT))\n\n    ; Address field (this fields are required in a.out format)\n    dd $0\n    dd $0\n    dd $0\n    dd $0\n    dd $0\n\n    ; Graphic field\n    dd $1\n    dd $0\n    dd $0\n    dd $0\n; }}}\n\n\n; Boot kernel section\n; This section invoked by bootloader.\n; Then, This calls kernel main routine.\n; {{{\nsection .boot_kernel\nalign 4\nglobal boot_kernel\nextern main\nboot_kernel:\n    ; NOTE that We cannot use eax and ebx.\n    ; Because eax and ebx has multiboot magic number and multiboot info struct addr.\n    cli\n\n    ; Check multiboot magic number.\n    ; If mismatched, goto sleep loop.\n    cmp eax, MULTIBOOT_BOOTLOADER_MAGIC\n    jne sleep\n\n    ; Set kernel stack.\n    mov esp, kernel_init_stack_top\n\n    ; ebx is pointer to multiboot info struct.\n    push ebx\n\n    ; Jump to main routine\n    call main\n\nsleep:\n    hlt\n    jmp sleep\n; }}}\n\n\n; BSS (Block Started by Symbol) section\n; This allocate initial kernel stack witch is 4KB.\n; {{{\nsection .bss\nalign 4\nKERNEL_INIT_STACK_SIZE equ 0x1000\nglobal kernel_init_stack_top\nkernel_init_stack_bottom:\n    resb KERNEL_INIT_STACK_SIZE\nkernel_init_stack_top:\n; }}}\n\n\u6b21\u306b\u3001main\u95a2\u6570\u3092\u6301\u3064rust\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u3067\u3042\u308b.\n// main.rs\n#![feature(lang_items)]\n#![feature(start)]\n#![no_main]\n#![feature(no_std)]\n#![no_std]\n#![feature(asm)]\n\n#[no_mangle]\n#[start]\npub extern fn main()\n{\n    let mut i = 0xB8000;\n    while i < 0xC0000 {\n        unsafe {\n            *(i as *mut u16) = 0x1220;\n        }\n        i += 2;\n    }\n    loop {\n        unsafe {\n            asm!(\"hlt\");\n        }\n    }\n}\n\n#[lang = \"stack_exhausted\"]\nextern fn stack_exhausted() {}\n#[lang = \"eh_personality\"]\nextern fn eh_personality() {}\n#[lang = \"panic_fmt\"]\npub fn panic_fmt(_: &core::fmt::Arguments, _: &(&'static str, usize)) -> !\n{\n    loop { }\n}\n\n\u3053\u3061\u3089\u306f\u5148\u307b\u3069\u3068\u5bfe\u3057\u3066\u5909\u308f\u3089\u306a\u3044.\nmain\u95a2\u6570\u306e\u4e2d\u3067\u306f\u753b\u9762\u3092\u4e00\u8272\u3067\u5857\u308a\u3064\u3076\u3059\u3068\u3044\u3046\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b(\u3053\u308c\u306f\u3001\u5225\u306e\u6bb5\u843d\u306e\u4f8b\u3068\u3057\u3066\u4e0a\u3052\u305f\u51e6\u7406\u3067\u3042\u308b).\n\u306a\u304a\u3001\u3053\u306emain\u95a2\u6570\u306f\u901a\u5e38\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306emain\u95a2\u6570\u3068\u306f\u5c11\u3057\u9055\u3046\u306e\u3067\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044.\n\u305d\u306e\u8a3c\u62e0\u306b#[start]\u3068\u3044\u3046attribute\u304c\u66f8\u3044\u3066\u3042\u308b.\n\u3053\u308c\u306f\u3001\u3053\u3053\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306b\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3042\u308b.\n\u6b21\u306b\u3001\u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u3044\u304b\u306b\u306a\u308b.\nOUTPUT_FORMAT(\"elf32-i386\")\n\n\nSECTIONS {\n    /* OS booting entry point. */\n    ENTRY(boot_kernel)\n\n    LD_KERNEL_START = .;\n\n    . = 0x00100000;\n\n    /*\n     * Entry point.\n     * This is called by bootstraps loader.\n     * NOTE that AT command indicates load memory address.\n     * Kernel load address is NOT equal virtual address.\n     * So, We subtract virtual base address.\n     */\n    .boot_kernel BLOCK(4K) : ALIGN(4K)\n    {\n        *(.multiboot_header)\n        *(.boot_kernel)\n    }\n\n\n    .text BLOCK(4K) : ALIGN(4K)\n    {\n        *(.text*)\n    }\n\n\n    .data BLOCK(4K) : ALIGN(4K)\n    {\n        *(.data*)\n        *(.rodata*)\n    }\n\n\n    .bss BLOCK(4K) : ALIGN(4K)\n    {\n        LD_KERNEL_BSS_START = .;\n        *(.bss*)\n        *(COMMON)\n        LD_KERNEL_BSS_END = .;\n    }\n\n\n    LD_KERNEL_BSS_SIZE = LD_KERNEL_BSS_END - LD_KERNEL_BSS_START;\n    LD_KERNEL_END = .;\n    LD_KERNEL_SIZE = LD_KERNEL_END - LD_KERNEL_START;\n}\n\n\nmultiboot header\u304c\u30d0\u30a4\u30ca\u30ea\u306e\u5148\u982d8KB\u5185\u306b\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001nasm\u3067\u66f8\u3044\u305f\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u5148\u982d\u306e\u65b9\u306b\u6301\u3063\u3066\u304d\u3066\u3044\u308b.\n\u307e\u305f\u3001OS\u30d0\u30a4\u30ca\u30ea\u306felf\u5f62\u5f0f\u3092\u4f7f\u7528\u3059\u308b.\n% rustc -Z no-landing-pads --target=i686-unknown-linux-gnu --emit=obj ./main.rs -o main.o -C lto -C opt-level=2\n% nasm -f elf32 boot.asm -o boot.o\n% ld -Map kernel.map -m elf_i386 --format elf32-i386 -nostartfiles -nodefaultlibs -nostdlib -static -T link.ld -o axel.bin boot.o main.o\n% cp axel.bin ./img/boot/\n% grub-mkimage -O i386-pc -o ./img/efi.img multiboot biosdisk iso9660\n% grub-mkrescue -o axel.iso ./img\n% qemu-system-i386 -monitor stdio -vga std -m 32 -boot order=dc -no-reboot -d int -cdrom ./axel.iso\n\n\u4e0a\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3067OS\u30d0\u30a4\u30ca\u30ea\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u3001qemu\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b.\n\nReferences\nEmbedded Rust Right Now!\n# Introduction Rust for Creating Your Operating System\n\u3053\u308c\u306f\u3001Rust\u3092\u4f7f\u3063\u3066\u81ea\u4f5cOS\u3092\u3059\u308b\u305f\u3081\u306e\u624b\u5f15\u517c\u30e1\u30e2\u3067\u3059.\n\u9593\u9055\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u4f55\u304b\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u3092\u304a\u306d\u304c\u3044\u3057\u307e\u3059.\n\n\n## Introduction\nRust\u306f\u3001Mozilla\u306b\u3088\u3063\u3066\u958b\u767a\u3055\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3042\u308a\u3001\u76ee\u6a19\u306e\u4e00\u3064\u306bCPU\u3084OS\u306a\u3069\u306eLow-level\u306a\u3082\u306e\u3092\u62bd\u8c61\u5316\u3059\u308b\u3053\u3068\u304c\u3042\u308b.\n\u7279\u5fb4\u3068\u3057\u3066\u306f\u3001\u30e1\u30e2\u30ea\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306e\u8a00\u8a9e\u7684\u6a5f\u80fd\u306a\u3069\u306a\u3069\u3068\u3044\u308d\u3044\u308d\u3042\u308b\u304c\u3001\u89e6\u308c\u308b\u3068\u9577\u304f\u306a\u308b\u306e\u3067\u7c21\u5358\u306b\u3001OS\u3092\u4f5c\u308b\u3053\u3068\u3092\u8003\u3048\u305f\u6642\u306b\u6c17\u306b\u306a\u308b\u3067\u3042\u308d\u3046\u4e8b\u9805\u3092\u66f8\u3044\u3066\u304a\u304f.\n\u307e\u305f\u3001\u7279\u306b\u4e0a\u304b\u3089\u9806\u306b\u8aad\u3080\u5fc5\u8981\u306f\u306a\u304f\u3001\u5fc5\u8981\u306a\u7b87\u6240\u3060\u3051\u5fc5\u8981\u306a\u3068\u304d\u306b\u53c2\u7167\u3059\u308b\u3057\u3066\u307b\u3057\u3044.\nstable\u306arust\u3060\u3068\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u304c\u4f7f\u3048\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\u5148\u306bEnvironment\u306e\u9805\u3092\u898b\u3066\u3001\u30d3\u30eb\u30c9\u3057\u3066\u304a\u304f\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3059\u308b.\n\n### Features of Rust\n\u3053\u308c\u3089\u306b\u3064\u3044\u3066\u3001\u7c21\u5358\u306b\u66f8\u3053\u3046\u3068\u601d\u3044\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\u975e\u5e38\u306b\u3088\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u6295\u7a3f\u3092\u767a\u898b\u3057\u305f\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044.\n* [Rust1.0\u5b66\u7fd2\u7528\u79c1\u7684\u30e1\u30e2](http://qiita.com/yohhoy/items/e78dcc4d168f247d83ce)\n* [Rust\u306e\u30dd\u30a4\u30f3\u30bf\uff08\u6240\u6709\u6a29\u30fb\u53c2\u7167\uff09\u30fb\u53ef\u5909\u6027\u306b\u3064\u3044\u3066\u306e\u7c21\u5358\u306a\u307e\u3068\u3081](http://qiita.com/nebutalab/items/1d7a03c36c087c3f6360)\n* [Borrow and AsRef](http://qiita.com/hibariya/items/b24f893f88d0dc931c61)\n\n\u307e\u305f\u3001References\u306e\u6bb5\u843d\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u304c\u3001\u4ee5\u4e0b\u306e2\u3064\u304crust\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3068reference\u3067\u3042\u308b.\n* [The Rust Programming Language](https://doc.rust-lang.org/book/README.html)\n* [The Rust Reference](https://doc.rust-lang.org/nightly/reference.html)\n\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308b\u8a00\u8a9e\u7684\u306a\u3053\u3068\u306f\u3001\u3082\u3061\u308d\u3093\u5168\u3066\u3001\u3053\u308c\u3089\u306e\u4e2d\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u3088\u308a\u53b3\u5bc6\u3067\u8a73\u7d30\u306a\u4e8b\u67c4\u304c\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u3001\u305d\u3061\u3089\u3092\u8aad\u3093\u3067\u3044\u305f\u3060\u304d\u305f\u3044.\n\n### unsafe block\nOS\u3092\u81ea\u4f5c\u3059\u308b\u969b\u3001Video memory\u3084\u30c7\u30d0\u30a4\u30b9IO\u306a\u3069\u3001\u30e1\u30e2\u30ea\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u76f4\u306b\u6307\u5b9a\u3057\u3001\u8aad\u307f\u66f8\u304d\u3092\u884c\u3046\u3053\u3068\u304c\u3088\u304f\u3042\u308b.\nC\u8a00\u8a9e\u3067\u3053\u308c\u3092\u884c\u3046\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u5b9a\u77f3\u3060\u3068\u601d\u308f\u308c\u308b.\n\n```c\n// vram.c\n// Fill in text mode vram with blue.\nfor (size_t i = 0xB8000; i < 0xC0000; i += 2) {\n    *(uint16_t*)(i) = 0x1220;\n}\n```\n\u3053\u306e\u3088\u3046\u306a\u64cd\u4f5c\u3092rust\u3067\u884c\u3046\u5834\u5408\u306b\u306funsafe\u30d6\u30ed\u30c3\u30af\u3067\u8a72\u5f53\u7b87\u6240\u3092\u56f2\u307f\u3001rust\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3001\u30d6\u30ed\u30c3\u30af\u5185\u306e\u52d5\u4f5c\u306f\u30d7\u30ed\u30b0\u30e9\u30de\u3067\u8cac\u4efb\u3092\u6301\u3064\u3068\u3044\u3046\u3053\u3068\u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b.\n\u4e0a\u8a18C\u30d7\u30ed\u30b0\u30e9\u30e0\u3068\u540c\u3058\u3053\u3068\u3092\u884c\u3046rust\u30d7\u30ed\u30b0\u30e9\u30e0\u4ee5\u4e0b\u306b\u306a\u308b.\n\n```rust\n// vram.rs\nlet mut i = 0xB8000;\nwhile i < 0xC0000 {\n    unsafe {\n        *(i as *mut u16) = 0x1220;\n    }\n    i += 2;\n}\n```\n\u305f\u3060\u3057\u3001rust\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6069\u6075\u3092\u6700\u5927\u9650\u306b\u53d7\u3051\u308b\u305f\u3081\u306bunsafe\u30d6\u30ed\u30c3\u30af\u306a\u3044\u306e\u30b3\u30fc\u30c9\u306f\u6700\u5c0f\u9650\u306b\u7559\u3081\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044.  \n\u4ed6\u306b\u3082\u5177\u4f53\u7684\u306bunsafe\u30d6\u30ed\u30c3\u30af\u5185\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308b.\n* \u751f\u30dd\u30a4\u30f3\u30bf\u306e\u53c2\u7167\u5916\u3057 (\u4e0a\u8a18\u306e\u4f8b)\n* FFI(Foreign Function Interface)\u7d4c\u7531\u3067\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\n* \u30d3\u30c3\u30c8\u5358\u4f4d\u3067\u306e\u30ad\u30e3\u30b9\u30c8\n* \u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30ea\n\n### no_std\n\u901a\u5e38\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u4f55\u3089\u304b\u306eOS\u306e\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u3001\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u5fc5\u8981\u3068\u3059\u308b(\u30d7\u30ed\u30bb\u30b9\u306e\u751f\u6210\u3068\u7d42\u4e86\u3001\u5165\u51fa\u529b\u306a\u3069\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u591a\u304f\u306f\u305d\u308c\u3092\u5fc5\u8981\u3068\u3059\u308b).\n\u3057\u304b\u3057\u3001\u305d\u308c\u3089\u306e\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306fOS\u304c\u63d0\u4f9b\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u304b\u3089\u3001OS\u3092\u4f5c\u6210\u3059\u308b\u3068\u304d\u306b\u4f7f\u3046\u308f\u3051\u306b\u306f\u884c\u304b\u306a\u3044(\u3068\u3044\u3046\u3088\u308a\u306a\u3044\u3082\u306e\u306f\u4f7f\u3048\u306a\u3044\u3001printf\u306f\u5049\u5927\u306a\u306e\u3060).\n\u3060\u3044\u3076\u5927\u96d1\u628a\u306a\u8aac\u660e\u3060\u304c\u3001\u305d\u308c\u3089\u3092\u7121\u52b9\u306b\u3057\u305f\u74b0\u5883\u3092**freestanding**\u3068\u3044\u3046.\nC\u3067\u306f\u3001\u30ea\u30f3\u30ab\u3084\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6e21\u3057\u3066freestanding\u306a\u30d0\u30a4\u30ca\u30ea(bare-metal\u306a\u30d0\u30a4\u30ca\u30ea)\u3092\u751f\u6210\u3059\u308b.\nrust\u3082\u540c\u69d8\u306b\u3057\u3066\u3001\u30b3\u30fc\u30c9\u4e2d\u306b#[no_std]\u5c5e\u6027\u3092\u6307\u5b9a\u3057\u3066\u884c\u3046.\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u6a5f\u80fd\u306a\u3069\u304c\u7121\u52b9\u5316\u3055\u308c\u308b.\n* \u30e1\u30e2\u30ea\u78ba\u4fdd\n* \u30b9\u30ec\u30c3\u30c9\n* \u51fa\u529b\n\nno_std\u306e\u6b20\u70b9\u3068\u3057\u3066\u3001std\u306b\u542b\u307e\u308c\u3066\u3044\u308bOS\u975e\u4f9d\u5b58\u306e\u6709\u7528\u306a\u6a5f\u80fd\u307e\u3067\u7121\u52b9\u5316\u3055\u308c\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u3042\u308b(\u4f8b\u3048\u3070\u3001\u30a4\u30c6\u30ec\u30fc\u30bf).\n\u3057\u304b\u3057\u3001**libcore**\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u3044\u304f\u3064\u304b\u306e\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b.\n\u305f\u3060\u3001libcore\u306funstable\u3067\u3042\u308b\u306e\u3067\u3001\u53ef\u80fd\u306a\u9650\u308astd\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u308b.\n\u3068\u306f\u3044\u3063\u3066\u3082\u3001OS\u3092\u4f5c\u308b\u306e\u306bstd\u3092\u4f7f\u3046\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u306a\u306e\u3067\u30ac\u30f3\u30ac\u30f3libcore\u3092\u4f7f\u3063\u3066\u3044\u3053\u3046\u3068\u8003\u3048\u3066\u3044\u308b.\n\n### Lang Items\nRust\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6307\u793a\u3092\u51fa\u3059\u305f\u3081\u306b\u4f7f\u3046.\n\u4f8b\u3048\u3070\u3001\u8a00\u8a9e\u5185\u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u304c\u3001\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\u3001\u5b58\u5728\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f1d\u3048\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u308b.\n\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308b\n\n```rust\n#[lang = \"...\"]\n```\n\u73fe\u5728(2015/09/11), lang item\u306funstable\u3067\u3042\u308b.\n\n### Error output from rustc\nrustc\u30b3\u30de\u30f3\u30c9\u3067rust\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u304c\u3001\u9a5a\u304f\u307b\u3069\u4e01\u5be7\u306a\u30a8\u30e9\u30fc\u30ed\u30b0\u3060\u3063\u305f\u306e\u3067\u3001\u66f8\u3044\u3066\u304a\u304f.  \n\u4f8b\u3068\u3057\u3066\u3001\u4e0a\u90e8\u3067\u30ea\u30f3\u30af\u3092\u8a18\u8f09\u3057\u3066\u304a\u3044\u305f\u3001rust\u306b\u304a\u3051\u308b\u6240\u6709\u6a29\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u898b\u308b\u30b3\u30fc\u30c9\u3092\u6319\u3052\u308b.\n\n```rust\nstruct Sushi {\n    neta:&'static str,\n}\n\npub fn main() {\n    let sushi1 = Sushi {neta:\"\u7099\u308a\u3048\u3093\u304c\u308f\"};\n    let sushi2 = sushi1;\n\n    println!(\"{}\", sushi1.neta);\n    println!(\"{}\", sushi2.neta);\n}\n```\n\u3053\u306e\u30b3\u30fc\u30c9\u3067\u306f`sushi1`\u304c`sushi2`\u306bmove\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001`sushi1.neta`\u3092\u51fa\u529b\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044.\n\u8a66\u3057\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51fa\u529b\u3092\u5f97\u3089\u308c\u308b.\n\n```shell-session\n% rustc ./sushi.rs\n./sushi.rs:9:20: 9:31 error: use of moved value: `sushi1.neta` [E0382]\n./sushi.rs:9     println!(\"{}\", sushi1.neta);\n                                ^~~~~~~~~~~\n<std macros>:2:25: 2:56 note: in this expansion of format_args!\n<std macros>:3:1: 3:54 note: in this expansion of print! (defined in <std macros>)\n./sushi.rs:9:5: 9:33 note: in this expansion of println! (defined in <std macros>)\n./sushi.rs:9:20: 9:31 help: run `rustc --explain E0382` to see a detailed explanation\n./sushi.rs:7:9: 7:15 note: `sushi1` moved here because it has type `Sushi`, which is moved by default\n./sushi.rs:7     let sushi2 = sushi1;\n                     ^~~~~~\n./sushi.rs:7:9: 7:15 help: if you would like to borrow the value instead, use a `ref` binding as shown:\n./sushi.rs:      let ref sushi2 = sushi1;\nerror: aborting due to previous error\n```\n\u307e\u305a\u3001\u771f\u3063\u5148\u306bmove\u3055\u308c\u3066\u308b\u304b\u3089\u30a8\u30e9\u30fc\u3067\u3042\u308b\u3068\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u3042\u308b.\n\u305d\u306e\u5f8c\u306b\u3001\u5927\u62ec\u5f27\u3067\u66f8\u3044\u3066\u3042\u308b\u306e\u304c\u30a8\u30e9\u30fc\u7a2e\u985e\u306b\u306a\u308b.\n\u3082\u3046\u5c11\u3057\u4e0b\u3092\u898b\u3066\u307f\u308b\u3068\n\n```shell-session\n./sushi.rs:9:20: 9:31 help: run `rustc --explain E0382` to see a detailed explanation\n```\n\u3068\u306e\u3053\u3068\u306a\u306e\u3067\u3001`rustc --explain E0382`\u3092\u5b9f\u884c\u3057\u3066\u307f\u308b.\n\n```shell-session\n:% rustc --explain E0382\nThis error occurs when an attempt is made to use a variable after its contents\nhave been moved elsewhere. For example:\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nIf we own the type, the easiest way to address this problem is to implement\n`Copy` and `Clone` on it, as shown below. This allows `y` to copy the\ninformation in `x`, while leaving the original version owned by `x`. Subsequent\nchanges to `x` will not be reflected when accessing `y`.\n\n#[derive(Copy, Clone)]\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow.s);\n}\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the chapter in the\nBook:\n\nhttps://doc.rust-lang.org/book/ownership.html\n```\n\u61c7\u5207\u4e01\u5be7\u306a\u4f8b\u984c\u4ed8\u304d(\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3078\u306e\u30ea\u30f3\u30af\u307e\u3067\u3042\u308b)\u306e\u8aac\u660e\u304c\u51fa\u529b\u3055\u308c\u305f.\n\u3044\u3061\u3044\u3061\u30b0\u30b0\u3089\u306a\u304f\u3066\u3082\u5927\u4f53\u306e\u3053\u3068\u306f\u3053\u308c\u3067\u7406\u89e3\u3067\u304d\u308b\u306f\u305a\u3060.\n\u5927\u5909\u3042\u308a\u304c\u305f\u3044.\n\u3057\u304b\u3057\u3001\u3059\u3079\u3066\u306e\u30a8\u30e9\u30fc\u306b\u3064\u3044\u3066\u3001\u3053\u3046\u3044\u3063\u305f\u8aac\u660e\u304c\u3042\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3089\u3057\u3044.\n\u3053\u306e\u6587\u66f8\u304cMarkdown\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u524a\u9664\u3057\u3066\u3057\u307e\u3063\u305f\u304c\u3001\u8aac\u660e\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30d0\u30c3\u30af\u30af\u30a9\u30fc\u30c8\u3067\u56f2\u307e\u308c\u3066\u3044\u308b.\n\n### Testing\nRust\u3067\u306f\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u5185\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b.\n\u4eca\u307e\u3067\u3001C\u8a00\u8a9e\u3067\u66f8\u3044\u3066\u3044\u305f\u3053\u3068\u3092\u8003\u3048\u308b\u3068\u975e\u5e38\u306b\u4fbf\u5229\u3060.\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306f\u3001\u5f53\u7136\u3001\u6a19\u6e96\u51fa\u529b\u306b\u4f55\u304b\u3092\u8868\u793a\u3057\u3066\u30c7\u30d0\u30c3\u30b0\u3092\u884c\u3044\u305f\u304f\u306a\u308b.\nC\u8a00\u8a9e\u3067\u306f\u3001\u30de\u30af\u30ed\u3084Makefile\u306a\u3069\u3092\u99c6\u4f7f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u3053\u308c\u306f\u975e\u5e38\u306b\u9762\u5012\u304f\u3055\u304b\u3063\u305f.\n\u3082\u3057\u3084\u3001Rust\u3067\u3082\u3001\u305d\u3046\u306a\u306e\u3067\u306f\u7121\u3044\u304b\u3068\u5371\u60e7\u3057\u305f\u304c\u7d50\u679c\u3068\u3057\u3066\u3001\u7c21\u5358\u3060\u3063\u305f.\nRust\u3067\u306f\u3001\u6761\u4ef6\u4ed8\u304d\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u305f\u3081\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066\u30bd\u30fc\u30b9\u306b\u3044\u304f\u3064\u304b\u66f8\u304d\u52a0\u3048\u308b\u3060\u3051\u3067\u3001\u30c6\u30b9\u30c8\u6642\u306e\u307f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u3068\u3044\u3063\u305f\u3053\u3068\u304c\u53ef\u80fd\u3060\u3063\u305f.\n\u3064\u307e\u308a\u3001\u81ea\u4f5cOS\u3067\u306flibcore\u3092\u3001\u30c6\u30b9\u30c8\u3067\u306flibstd\u3092\u4f7f\u3046\u3068\u3044\u3046\u5207\u308a\u66ff\u3048\u3092\u884c\u3046\u4e8b\u304c\u3067\u304d\u305f. (\u305f\u3060\u3001libcore\u306funstable\u306a\u306e\u3067\u3001\u305d\u308c\u304c\u6c17\u304c\u304b\u308a\u3067\u3042\u308b...)\n\u66f8\u304d\u304b\u3051\u306e\u3082\u306e\u3067\u7533\u3057\u8a33\u306a\u3044\u304c\u3001text\u30e2\u30fc\u30c9\u3067\u63cf\u753b\u3059\u308b\u305f\u3081\u306eOS\u5185\u306egraphic\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b.\n\n```rust\n#![feature(core)]\n#![feature(no_std)]\n#![no_std]\n\nuse core::cell::Cell;\n\npub static COLOR_TEXT_BLACK: u8         = 0x0;\npub static COLOR_TEXT_BLUE: u8          = 0x1;\npub static COLOR_TEXT_GREEN: u8         = 0x2;\npub static COLOR_TEXT_CYAN: u8          = 0x3;\npub static COLOR_TEXT_RED: u8           = 0x4;\npub static COLOR_TEXT_MAGENTA: u8       = 0x5;\npub static COLOR_TEXT_BROWN: u8         = 0x6;\npub static COLOR_TEXT_LIGHT_GRAY: u8    = 0x7;\npub static COLOR_TEXT_DARK_GRAY: u8     = 0x8;\npub static COLOR_TEXT_LIGHT_BLUE: u8    = 0x9;\npub static COLOR_TEXT_LIGHT_GREEN: u8   = 0xA;\npub static COLOR_TEXT_LIGHT_CYAN: u8    = 0xB;\npub static COLOR_TEXT_LIGHT_RED: u8     = 0xC;\npub static COLOR_TEXT_LIGHT_MAGENTA: u8 = 0xD;\npub static COLOR_TEXT_YELLOW: u8        = 0xE;\npub static COLOR_TEXT_WHITE: u8         = 0xF;\n\npub struct Graphic {\n    vram_addr: usize,\n    is_text_mode: bool,\n    pub color_background: Cell<u8>,\n    pub color_foreground: Cell<u8>,\n}\n\n\nimpl Graphic {\n    pub fn new(is_text: bool, vaddr: usize) -> Graphic\n    {\n        let default_bg = if is_text == true { COLOR_TEXT_BLACK } else { 0 };\n        let default_fg = if is_text == true { COLOR_TEXT_GREEN } else { 0 };\n        Graphic {\n            vram_addr:vaddr,\n            is_text_mode:is_text,\n            color_background:Cell::new(default_bg),\n            color_foreground:Cell::new(default_fg),\n        }\n    }\n\n    pub fn change_color(&self, bg: u8, fg: u8)\n    {\n        self.color_background.set(bg);\n        self.color_foreground.set(fg);\n    }\n\n    fn get_one_pixel(&self, c: &char) -> u16\n    {\n        let bg = self.color_background.get() as u16;\n        let fg = self.color_foreground.get() as u16;\n        (bg << 12) | (fg << 8) | (*c as u16)\n    }\n}\n\n\n// Test codes.\n#[cfg(test)]\n#[macro_use]\nextern crate std;\n\n#[cfg(test)]\nmod test {\n    use super::*;\n\n    #[test]\n    fn get_one_pixel() {\n        let graphic = Graphic::new(true, 0xB800);\n        graphic.change_color(COLOR_TEXT_BLUE, COLOR_TEXT_GREEN);\n        assert_eq!(graphic.get_one_pixel(&'A'), 0x1241);\n        println!(\"\\t0x{:x}\", graphic.get_one_pixel(&'A'));\n    }\n}\n```\n\u3053\u306e\u4e2d\u306e`#[cfg(test)] `\u3068\u3044\u3046\u306e\u304c\u6761\u4ef6\u4ed8\u304d\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u8a2d\u5b9a\u5024\u3067\u3001\u30c6\u30b9\u30c8\u6642\u306e\u307f\u6709\u52b9\u306b\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3060.\n\u30d5\u30a1\u30a4\u30eb\u5148\u982d\u3067`#![no_std]`\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u305f\u3081\u306b\u3001\u30c6\u30b9\u30c8\u6642\u306e\u307f`extern crate std;`\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b.\n\n```shell-session\n% rustc --test ./graphic.rs\n% ./graphic\n\nrunning 1 test\ntest test::get_one_pixel ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured\n```\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u306e\u3082\u7279\u306b\u96e3\u3057\u304f\u306a\u304f\u3001`--test`\u3092\u3064\u3051\u308b\u3060\u3051\u3068\u3044\u3046\u3001\u624b\u8efd\u3055\u304c\u3088\u3044.\n\u307e\u305f\u3001\u5b9f\u884c\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u7d50\u679c\u3082\u81ea\u52d5\u3067\u307e\u3068\u3081\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u3053\u308c\u3082\u307e\u305f\u3042\u308a\u304c\u305f\u3044.\n\n\n### References\n[The Rust Programming Language](https://doc.rust-lang.org/book/README.html)\n[The Rust Reference](https://doc.rust-lang.org/nightly/reference.html)\n[Rust\u306e\u30dd\u30a4\u30f3\u30bf\uff08\u6240\u6709\u6a29\u30fb\u53c2\u7167\uff09\u30fb\u53ef\u5909\u6027\u306b\u3064\u3044\u3066\u306e\u7c21\u5358\u306a\u307e\u3068\u3081](http://qiita.com/nebutalab/items/1d7a03c36c087c3f6360)\n[Borrow and AsRef](http://qiita.com/hibariya/items/b24f893f88d0dc931c61)\n[Rust1.0\u5b66\u7fd2\u7528\u79c1\u7684\u30e1\u30e2](http://qiita.com/yohhoy/items/e78dcc4d168f247d83ce)\n[Writing Unsafe and Low-Level Code in Rust](http://smallcultfollowing.com/rust-int-variations/isize-usize/guide-unsafe.html)\n[Writing an OS in Rust in tiny steps (Steps 1-5)](http://jvns.ca/blog/2014/03/12/the-rust-os-story/)\n\n## Environment\nRust\u306estable(1.2)\u3067\u306f, OS\u3092\u81ea\u4f5c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u6a5f\u80fd\u304c\"Experimental\u306a\u306e\u3067\u4f7f\u7528\u3067\u304d\u306a\u3044\u3088\"\u3068\u306e\u30a8\u30e9\u30fc\u304c\u3067\u308b\u306e\u3067,nightly\u7248\u3092\u30d3\u30eb\u30c9\u3059\u308b.\n\u3082\u3057\u304f\u306f\u3001[\u3053\u3053](http://static.rust-lang.org/dist/index.html)\u304b\u3089nightly\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3082\u826f\u3044.\n\u3053\u3053\u3067\u306e\u5fc5\u8981\u306a\u6a5f\u80fd\u3068\u306f\u3001\u524d\u9805\u3067\u8aac\u660e\u3057\u305ffreestanding\u306a\u30d0\u30a4\u30ca\u30ea\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3082\u306e\u3067\u3042\u308b.\n\u4ee5\u964d\u3067\u306f\u3001github\u306b\u3042\u308brust\u306e\u30bd\u30fc\u30b9\u304b\u3089\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5bfe\u5fdc\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u3092\u751f\u6210\u3067\u304d\u308brust\u30b3\u30f3\u30d1\u30a4\u30e9(rustc)\u306e\u30d3\u30eb\u30c9\u306b\u3064\u3044\u3066\u8aac\u660e\u3092\u3059\u308b.\n\u4f3c\u305f\u624b\u9806\u3067ARM\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u306a\u306e\u3067\u3001\u8a73\u3057\u304f\u306fReferences\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044.\n\u307e\u305f\u3001rust\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306f[\u3053\u3053](https://github.com/rust-lang/rust/tree/master/src/librustc_back/target)\u3092\u898b\u308b\u3068\u308f\u304b\u308b.\n* i686-unknown-linux-gnu\n* x86_64-unknown-linux-gnu\n\nrust\u3067\u306f\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306bx86_64\u3067\u306f\u306a\u304f\u3001i686\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f (i386\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\u3068\u3044\u3046\u610f\u5473\u306a\u306e\u304b\u3069\u3046\u304b\u306f\u308f\u304b\u3089\u306a\u3044).\n\u307e\u305f\u3001target\u306ftarget triple\u3068\u3044\u3046\u5f62\u5f0f\u3067\u6307\u5b9a\u3059\u308b\u3053\u3068\u306b\u3082\u6ce8\u610f\u304c\u5fc5\u8981.\n\u30d3\u30eb\u30c9\u3092\u5b9f\u884c\u3057\u305f\u74b0\u5883\u306fArch Linux\u306a\u306e\u3067\u3001Arch Linux\u57fa\u6e96\u3067\u8aac\u660e\u3059\u308b.\n\u4ed6\u306eLinux\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3\u3067\u3082\u3001\u5927\u4f53\u306f\u540c\u3058\u306f\u305a\u3067\u3042\u308b.\n\u307e\u305f\u3001rust\u306b\u9650\u3063\u305f\u8a71\u3067\u306f\u306a\u3044\u304c\u3001\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306bbuild, target, host\u3092\u6df7\u4e71\u3057\u304c\u3061\u306a\u306e\u3067\u3001\u306f\u3063\u304d\u308a\u3055\u305b\u3066\u304a\u304f.\n\u8a73\u3057\u304f\u306f[\u3053\u306e\u8a18\u4e8b](http://d.hatena.ne.jp/maminus/20100129/1264781242)\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u53c2\u7167\u3057\u3066\u307b\u3057\u3044.\n\n| \u9805\u76ee   | \u8a2d\u5b9a         |\n|:-------|:-------------|\n| Build  | x86_64       |\n| Host   | x86_64       |\n| Target | x86_64, i686 |\n\n\u307e\u305a\u3001i686\u5f62\u5f0f\u3092\u51fa\u529b\u3059\u308b\u305f\u3081\u3001multilib\u5bfe\u5fdc\u306eC/C++\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u5fc5\u8981\u3068\u306a\u308b.\nclang\u3067\u3082\u30d3\u30eb\u30c9\u53ef\u80fd\u306a\u306f\u305a\u3060\u304c\u3001utility\u30d8\u30c3\u30c0\u304c\u306a\u3044\u3068\u3044\u3046\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u3069\u3046\u3057\u3066\u3082\u53d6\u308c\u306a\u304b\u3063\u305f\u305f\u3081gcc\u3092\u4f7f\u3063\u305f.\n\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308c\u3070\u3001\u5c0f\u4e00\u6642\u9593\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u7d42\u308f\u308b\u306f\u305a\u3067\u3042\u308b.\n\n```shell-session\nyaourt -S gcc-multilib lib32-gcc-libs\ngit clone https://github.com/rust-lang/rust.git\ncd rust\n./configure --target=i686-unknown-linux-gnu,x86_64-unknown-linux-gnu\nmake -j 4\nsudo make install\n```\n\u3053\u306e\u6642\u3001\u30b7\u30b9\u30c6\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(/usr/local/)\u3067\u306f\u306a\u304f\u3001$HOME/.local/\u306a\u3069\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044\u5834\u5408\u306f\u3001configure\u3067\u8a2d\u5b9a\u3092\u5e30\u308b\u3068\u3088\u3044.\n\u305f\u3060\u3057\u3001rustc\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306e\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u3068\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u306e\u3067\u3001LD_LIBRARY_PATH\u3092\u8a2d\u5b9a\u3059\u308b\u304b\u3001ldconfig\u3059\u308b\u304b\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3068\u306a\u308b.\n[\u3053\u3053](http://d.hatena.ne.jp/eel3/20150607/1433653643)\u3092\u53c2\u8003\u306b\u597d\u304d\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u3068\u3088\u3044.\n\n\u3064\u3044\u3067\u306b\u3001**cargo**\u3082\u5165\u308c\u3066\u304a\u304f\u3068\u4fbf\u5229\u304b\u3082\u3057\u308c\u306a\u3044.\nCargo\u306frust\u5c02\u7528\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30de\u30cd\u30fc\u30b8\u30e3\u3067\u3042\u308a\u3001\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u3067\u3001\u4f9d\u5b58\u95a2\u4fc2\u304c\u3042\u308b\u30d3\u30eb\u30c9\u306a\u3069\u3082\u7dba\u9e97\u306b\u8a2d\u5b9a\u3067\u304d\u308b\u3053\u3068\u304c\u58f2\u308a\u3089\u3057\u3044.\n\u305f\u3060\u3001OS\u3092\u30d3\u30eb\u30c9\u3059\u308b\u306e\u306f\u96e3\u3057\u305d\u3046\u3060\u3063\u305f\u306e\u3067make\u3092\u4f7f\u3063\u3066\u3044\u308b.\n\u4f59\u8ac7\u3060\u304c\u3001rust\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3053\u3068\u3092crate\u3068\u3044\u3044\u3001\u6728\u7bb1\u306e\u610f\u5473.\n\u305d\u3057\u3066\u3001cargo\u306f\u8ca8\u7269\u3068\u3044\u3046\u610f\u5473.\n\u3064\u307e\u308a\u3001\u6728\u7bb1\u3092\u8ca8\u7269\u3067\u904b\u3076\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b.\n\n### References\n[Rust binary archives](http://static.rust-lang.org/dist/index.html)\n[How to build rust for cross-compiling?](https://users.rust-lang.org/t/how-to-build-rust-for-cross-compiling/1366)\n[Embedded Rust Right Now!](http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/)\n[Cannot link against core library when cross compiling](http://stackoverflow.com/questions/28031806/cannot-link-against-core-library-when-cross-compiling)\n[Rust bare metal on ARM microcontroller](http://antoinealb.net/programming/2015/05/01/rust-on-arm-microcontroller.html)\n[ruststrap/1-how-to-cross-compile.md](https://github.com/japaric/ruststrap/blob/master/1-how-to-cross-compile.md)\n[Rust\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u306blibrustc_driver\u304c\u7121\u3044\u3068\u3044\u308f\u308c\u308b\u73fe\u8c61\u306b\u3064\u3044\u3066](http://d.hatena.ne.jp/eel3/20150607/1433653643)\n[japaric/rust-on-openwrt](https://github.com/japaric/rust-on-openwrt)\n[rust/src/librustc_back/target/](https://github.com/rust-lang/rust/tree/master/src/librustc_back/target)\n\n\n## Examples\n\u3053\u3053\u3067\u306f\u3001\u5177\u4f53\u7684\u306a\u4f8b\u3092\u7d39\u4ecb\u3059\u308b.\n\n### Rust\u306e\u95a2\u6570\u3092C\u304b\u3089\u547c\u3073\u51fa\u3059\nructc\n\n```shell-session\n% rustc -vV\nrustc 1.5.0-dev (e362679bb 2015-10-08)\nbinary: rustc\ncommit-hash: e362679bb6a76064442492fdd5e07f06854f5605\ncommit-date: 2015-10-08\nhost: x86_64-unknown-linux-gnu\nrelease: 1.5.0-dev\n```\n\u4ee5\u4e0b\u306eRust\u30d7\u30ed\u30b0\u30e9\u30e0\u304cC\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b\u5074.\n\n```rust\n// hello.rs\n#![feature(no_std, lang_items, core_str_ext)]\n#![no_main] // main\u95a2\u6570\u304c\u7121\u3044\u3068\u3044\u3046\u3053\u3068\u3092rustc\u306b\u4f1d\u3048\u3066\u3044\u308b.\n#![no_std]  // \u540c\u69d8\u306b\u3001std\u3092\u4f7f\u7528\u3057\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3092rustc\u306b\u4f1d\u3048\u3066\u3044\u308b.\n\n// C\u304b\u3089\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306bmangling\u3092\u7121\u52b9\u306b\u3059\u308b.\n#[no_mangle]\npub extern fn hello_rust() -> *const u8\n{\n    \"Hello, world!\\0\".as_ptr()\n}\n\n// \u3053\u306e\u8fba\u306f\u3044\u307e\u3044\u3061\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\n// \u304a\u307e\u3058\u306a\u3044\u72b6\u614b\u3067\u3042\u308b.\n#[lang=\"stack_exhausted\"] extern fn stack_exhausted() {}\n#[lang=\"eh_personality\"] extern fn eh_personality() {}\n#[lang=\"panic_fmt\"]\npub fn panic_fmt(_: &core::fmt::Arguments, _: &(&'static str, usize)) -> !\n{\n    loop { }\n}\n```\n\u547c\u3073\u51fa\u3059\u5074\u306eC\u30d7\u30ed\u30b0\u30e9\u30e0.\n\n```c\n// main.c\n#include <stdio.h>\n\nextern char const* hello_rust(void);\n\nint main(int argc, char const* argv[])\n{\n    puts(hello_rust());\n    return 0;\n}\n```\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u5b9f\u52b9\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b.\n\n```shell-session\n% rustc --emit=obj hello.rs\n% clang hello.o main.c\n% ./a.out\nHello, world!\n```\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u3078\u306e\u6307\u793a\u304c\u3044\u304f\u3064\u3082\u304b\u3051\u308b\u306e\u306f\u975e\u5e38\u306b\u4fbf\u5229\u3060.\n\u304a\u305d\u3089\u304f\u3001OS\u3092\u4f5c\u308a\u59cb\u3081\u3066\u3044\u304f\u6642\u3082\u3001\u3053\u3093\u306a\u3075\u3046\u306arust\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304f\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u308f\u308c\u308b.\nmangling\u306b\u3064\u3044\u3066\u306f\u3001[\u3053\u3053](http://d.hatena.ne.jp/yupo5656/20040901/p2)\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044.\n\n### OS Bootloader\n\u3053\u306e\u6587\u66f8\u306fRust\u3092\u4f7f\u3063\u3066\u81ea\u4f5cOS\u3092\u4f5c\u308b\u305f\u3081\u306e\u624b\u5f15\u3067\u3042\u308b\u306e\u3067\u3001\u5c11\u3057\u306f\u81ea\u4f5cOS\u3089\u3057\u3044\u4f8b\u3082\u8f09\u305b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u601d\u3046.\n\u305d\u3053\u3067\u3001nasm\u3067\u66f8\u3044\u305f\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u304b\u3089rust\u306e\u30ab\u30fc\u30cd\u30eb\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u547c\u3073\u51fa\u3059\u3068\u3044\u3046\u3053\u3068\u3092\u3084\u3063\u3066\u307f\u308b.\n\u306a\u304a\u3001multiboot-specification\u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\u3001\u53b3\u5bc6\u306b\u306f\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u3068\u3044\u3046\u3088\u308a\u306f\u3001nasm\u30b3\u30fc\u30c9\u81ea\u4f53\u304c\u30ab\u30fc\u30cd\u30eb\u30a8\u30f3\u30c8\u30ea\u30fc\u306b\u306a\u308a\u3001rust\u30b3\u30fc\u30c9\u306f\u30ab\u30fc\u30cd\u30eb\u5185\u306e\u5225\u95a2\u6570\u3068\u3044\u3046\u65b9\u304c\u53b3\u5bc6\u304b\u3082\u3057\u308c\u306a\u3044.\n\u4f8b\u306e\u3054\u3068\u304f\u3001multiboot-specification\u306b\u3064\u3044\u3066\u306f[\u3053\u3053](http://softwaretechnique.jp/OS_Development/Tips/multi_boot.html)\u3092\u53c2\u7167\u3057\u3066\u307b\u3057\u3044.\n\u307e\u305f\u3001multiboot-specification\u306b\u5bfe\u5fdc\u3059\u308b\u30ed\u30fc\u30c0\u30fc\u306e\u4e00\u3064\u304cgrub2\u3067\u3042\u308b\u306e\u3067\u3001grub2\u3092\u4f7f\u3046.\n512\u30d0\u30a4\u30c8(MBR\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u9664\u3051\u3070446\u30d0\u30a4\u30c8)\u3067\u7e1b\u308a\u30d7\u30ec\u30a4\u306e\u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\u30fc\u304b\u3089\u30ac\u30ea\u30ac\u30ea\u66f8\u3044\u3066\u3044\u304f\u306e\u306f\u6700\u9ad8\u306b\u30a8\u30ad\u30b5\u30a4\u30c6\u30a3\u30f3\u30b0\u3060\u3057\u3001\u81ea\u4f5cOS\u306e\u6700\u521d\u306e\u918d\u9190\u5473\u3067\u306f\u3042\u308b\u304c\u3001\u30b3\u30fc\u30c9\u304c\u9577\u304f\u306a\u308b\u306e\u3067\u3069\u3046\u304b\u8a31\u3057\u3066\u307b\u3057\u3044.  \n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u4ee5\u4e0b\u304cnasm\u306e\u4e00\u756a\u521d\u3081\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u90e8\u5206\u306b\u306a\u308b.\n\n```asm\n; boot.asm\n; vim:ft=nasm:foldmethod=marker\nbits 32\n\n; Multiboot header section.\n; This header is read by multiboot bootstraps loader (E.g., grub2).\n; And based on \"The Multiboot Specification version 0.6.96\"\n; {{{\nMULTIBOOT_HEADER_MAGIC     equ 0x1BADB002 ; The magic number identifying the header\nMULTIBOOT_PAGE_ALIGN_BIT   equ 0x00000001 ; Align all boot modules on i386 page (4KB) boundaries.\nMULTIBOOT_MEMORY_INFO_BIT  equ 0x00000002 ; Must pass memory information to OS.\nMULTIBOOT_VIDEO_MODE_BIT   equ 0x00000004 ; Must pass video information to OS.\nMULTIBOOT_BOOTLOADER_MAGIC equ 0x2BADB002 ; This must be set in %eax by bootloader.\n\nsection .multiboot_header\nalign 4\n    dd MULTIBOOT_HEADER_MAGIC\n    dd (MULTIBOOT_PAGE_ALIGN_BIT | MULTIBOOT_MEMORY_INFO_BIT | MULTIBOOT_VIDEO_MODE_BIT)\n    dd -(MULTIBOOT_HEADER_MAGIC + (MULTIBOOT_PAGE_ALIGN_BIT | MULTIBOOT_MEMORY_INFO_BIT | MULTIBOOT_VIDEO_MODE_BIT))\n\n    ; Address field (this fields are required in a.out format)\n    dd $0\n    dd $0\n    dd $0\n    dd $0\n    dd $0\n\n    ; Graphic field\n    dd $1\n    dd $0\n    dd $0\n    dd $0\n; }}}\n\n\n; Boot kernel section\n; This section invoked by bootloader.\n; Then, This calls kernel main routine.\n; {{{\nsection .boot_kernel\nalign 4\nglobal boot_kernel\nextern main\nboot_kernel:\n    ; NOTE that We cannot use eax and ebx.\n    ; Because eax and ebx has multiboot magic number and multiboot info struct addr.\n    cli\n\n    ; Check multiboot magic number.\n    ; If mismatched, goto sleep loop.\n    cmp eax, MULTIBOOT_BOOTLOADER_MAGIC\n    jne sleep\n\n    ; Set kernel stack.\n    mov esp, kernel_init_stack_top\n\n    ; ebx is pointer to multiboot info struct.\n    push ebx\n\n    ; Jump to main routine\n    call main\n\nsleep:\n    hlt\n    jmp sleep\n; }}}\n\n\n; BSS (Block Started by Symbol) section\n; This allocate initial kernel stack witch is 4KB.\n; {{{\nsection .bss\nalign 4\nKERNEL_INIT_STACK_SIZE equ 0x1000\nglobal kernel_init_stack_top\nkernel_init_stack_bottom:\n    resb KERNEL_INIT_STACK_SIZE\nkernel_init_stack_top:\n; }}}\n```\n\u6b21\u306b\u3001main\u95a2\u6570\u3092\u6301\u3064rust\u30b3\u30fc\u30c9\u304c\u4ee5\u4e0b\u3067\u3042\u308b.\n\n```rust\n// main.rs\n#![feature(lang_items)]\n#![feature(start)]\n#![no_main]\n#![feature(no_std)]\n#![no_std]\n#![feature(asm)]\n\n#[no_mangle]\n#[start]\npub extern fn main()\n{\n    let mut i = 0xB8000;\n    while i < 0xC0000 {\n        unsafe {\n            *(i as *mut u16) = 0x1220;\n        }\n        i += 2;\n    }\n    loop {\n        unsafe {\n            asm!(\"hlt\");\n        }\n    }\n}\n\n#[lang = \"stack_exhausted\"]\nextern fn stack_exhausted() {}\n#[lang = \"eh_personality\"]\nextern fn eh_personality() {}\n#[lang = \"panic_fmt\"]\npub fn panic_fmt(_: &core::fmt::Arguments, _: &(&'static str, usize)) -> !\n{\n    loop { }\n}\n```\n\u3053\u3061\u3089\u306f\u5148\u307b\u3069\u3068\u5bfe\u3057\u3066\u5909\u308f\u3089\u306a\u3044.\nmain\u95a2\u6570\u306e\u4e2d\u3067\u306f\u753b\u9762\u3092\u4e00\u8272\u3067\u5857\u308a\u3064\u3076\u3059\u3068\u3044\u3046\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u308b(\u3053\u308c\u306f\u3001\u5225\u306e\u6bb5\u843d\u306e\u4f8b\u3068\u3057\u3066\u4e0a\u3052\u305f\u51e6\u7406\u3067\u3042\u308b).\n\u306a\u304a\u3001\u3053\u306emain\u95a2\u6570\u306f\u901a\u5e38\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306emain\u95a2\u6570\u3068\u306f\u5c11\u3057\u9055\u3046\u306e\u3067\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044.\n\u305d\u306e\u8a3c\u62e0\u306b`#[start]`\u3068\u3044\u3046attribute\u304c\u66f8\u3044\u3066\u3042\u308b.\n\u3053\u308c\u306f\u3001\u3053\u3053\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\u306b\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3042\u308b.\n\n\u6b21\u306b\u3001\u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u3044\u304b\u306b\u306a\u308b.\n\n```ld\nOUTPUT_FORMAT(\"elf32-i386\")\n\n\nSECTIONS {\n    /* OS booting entry point. */\n    ENTRY(boot_kernel)\n\n    LD_KERNEL_START = .;\n\n    . = 0x00100000;\n\n    /*\n     * Entry point.\n     * This is called by bootstraps loader.\n     * NOTE that AT command indicates load memory address.\n     * Kernel load address is NOT equal virtual address.\n     * So, We subtract virtual base address.\n     */\n    .boot_kernel BLOCK(4K) : ALIGN(4K)\n    {\n        *(.multiboot_header)\n        *(.boot_kernel)\n    }\n\n\n    .text BLOCK(4K) : ALIGN(4K)\n    {\n        *(.text*)\n    }\n\n\n    .data BLOCK(4K) : ALIGN(4K)\n    {\n        *(.data*)\n        *(.rodata*)\n    }\n\n\n    .bss BLOCK(4K) : ALIGN(4K)\n    {\n        LD_KERNEL_BSS_START = .;\n        *(.bss*)\n        *(COMMON)\n        LD_KERNEL_BSS_END = .;\n    }\n\n\n    LD_KERNEL_BSS_SIZE = LD_KERNEL_BSS_END - LD_KERNEL_BSS_START;\n    LD_KERNEL_END = .;\n    LD_KERNEL_SIZE = LD_KERNEL_END - LD_KERNEL_START;\n}\n\n```\nmultiboot header\u304c\u30d0\u30a4\u30ca\u30ea\u306e\u5148\u982d8KB\u5185\u306b\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001nasm\u3067\u66f8\u3044\u305f\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u5148\u982d\u306e\u65b9\u306b\u6301\u3063\u3066\u304d\u3066\u3044\u308b.\n\u307e\u305f\u3001OS\u30d0\u30a4\u30ca\u30ea\u306felf\u5f62\u5f0f\u3092\u4f7f\u7528\u3059\u308b.\n\n```shell-session\n% rustc -Z no-landing-pads --target=i686-unknown-linux-gnu --emit=obj ./main.rs -o main.o -C lto -C opt-level=2\n% nasm -f elf32 boot.asm -o boot.o\n% ld -Map kernel.map -m elf_i386 --format elf32-i386 -nostartfiles -nodefaultlibs -nostdlib -static -T link.ld -o axel.bin boot.o main.o\n% cp axel.bin ./img/boot/\n% grub-mkimage -O i386-pc -o ./img/efi.img multiboot biosdisk iso9660\n% grub-mkrescue -o axel.iso ./img\n% qemu-system-i386 -monitor stdio -vga std -m 32 -boot order=dc -no-reboot -d int -cdrom ./axel.iso\n```\n\u4e0a\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3067OS\u30d0\u30a4\u30ca\u30ea\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u3001qemu\u4e0a\u3067\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b.\n\n#### References\n[Embedded Rust Right Now!](http://spin.atomicobject.com/2015/02/20/rust-language-c-embedded/)\n", "tags": ["rust", "OS", "\u81ea\u4f5cOS"]}