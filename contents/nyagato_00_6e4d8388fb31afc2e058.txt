{"context": "\u3053\u308c\u306f\u5ca9\u624b\u770c\u7acb\u5927\u5b66\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc22\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u306f\u3058\u3081\u306b\n\u3000\u5ca9\u624b\u770c\u7acb\u5927\u5b66\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u60c5\u5831\u5b66\u7814\u7a76\u79d1\u4fee\u58eb2\u5e74\u306enyagato_00\u3067\u3059\uff0e\u81ea\u5206\u306e\u7814\u7a76\u306e\u4e2d\u3067\uff0c\u8907\u6570\u53f0\u306e\u30ab\u30e1\u30e9\u3092\u7528\u3044\u3066\u64ae\u5f71\u7bc4\u56f2\u3092\u62e1\u5f35\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\uff0c\u3082\u3063\u3068\u3082\u7c21\u5358\u306a\uff12\u53f0\u306e\u30ab\u30e1\u30e9\u304b\u3089\u64ae\u5f71\u3057\u305f\u753b\u50cf\u3092\u7528\u3044\u3066\u753b\u50cf\u5408\u6210\u3092\u884c\u3046\u65b9\u6cd5\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3059\uff0e\n\u3000\u81ea\u5206\u81ea\u8eab\u306fC++\u3092\u4f7f\u3046\u4e0a\u3067\u4fbf\u5229\u306a\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3042\u308bopenframeworks\u3092\u5229\u7528\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\uff0e\u30d9\u30fc\u30b9\u304cC++\u3067\u3042\u308b\u305f\u3081\uff0c\u8c4a\u5bcc\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u308b\u3060\u3051\u3067\u306a\u304f\uff0c\u30a2\u30c9\u30aa\u30f3\u3092\u8ffd\u52a0\u3057\u3066\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3060\u3051\u3067\u3088\u308a\u62e1\u5f35\u6027\u306e\u9ad8\u3044\u30bd\u30d5\u30c8\u306e\u958b\u767a\u304c\u884c\u3048\u307e\u3059\uff0e\n\u3000\n\nOpenCV\u306e\u5358\u72ec\u3067\u306e\u5229\u7528\u3067\u306f\u306a\u304f\uff0copenframeworks\u3092\u7528\u3044\u3066\u5229\u7528\u3059\u308b\u306e\u304b\n\u3000OpenCV\u306f\uff0c\u3053\u3061\u3089\u3082C/C++ Java, Python\uff0cMATLAB\u306a\u3069\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u3059\u306a\u308f\u3061\uff0copenframeworks\u3092\u308f\u3056\u308f\u3056\u5229\u7528\u3057\u306a\u304f\u3066\u3082C++\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u306a\u30b3\u30fc\u30c9\u3067\u3082\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e\u3057\u304b\u3057\u306a\u304c\u3089\uff0cOpenCV\u306eGUI\u306f\u5c11\u3057\u4f7f\u3044\u3065\u3089\u304fC++\u306b\u306f\u4ed6\u306e\u4fbf\u5229\u306aGUI\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u3089\u3092\u8907\u5408\u7684\u306b\u5229\u7528\u3059\u308b\u969b\u306b\u4fbf\u5229\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304copenframeworks\u3067\u3042\u308b\u305f\u3081\uff0c\u79c1\u306f\u3053\u306e\u74b0\u5883\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\n\u3000\u203b\u6240\u5c5e\u8b1b\u5ea7\u304c\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\u305f\u3081\u4ed6\u306e\u65b9\u3068\u306e\u3084\u308a\u53d6\u308a\u304c\u697d\u3067\u3042\u308b\u3068\u3044\u3046\u7406\u7531\u3082\u3042\u308a\u307e\u3059\uff0e\n\n\u30ab\u30e1\u30e9\u306e\u753b\u89d2\n\u3000\u30ab\u30e1\u30e9\u306e\u753b\u89d2\u3068\u306f\uff0c\u4e00\u822c\u7684\u306b\u306f\u30ec\u30f3\u30ba\u306b\u5bfe\u3059\u308b\u7126\u70b9\u8ddd\u96e2\u306b\u3088\u3063\u3066\u6c7a\u307e\u308a\u307e\u3059\uff0e\u307e\u305f\uff0c\u30ec\u30f3\u30ba\u304c\u5e83\u89d2\u30ec\u30f3\u30ba\u3067\u3042\u308b\u304b\u671b\u9060\u30ec\u30f3\u30ba\u3067\u3042\u308b\u304b\u306b\u3088\u3063\u3066\u3082\u5909\u308f\u308a\u307e\u3059\uff0e\u5358\u7d14\u306b\u64ae\u5f71\u7bc4\u56f2\u3092\u62e1\u5f35\u3059\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u5e83\u89d2\u30ec\u30f3\u30ba\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3057\u307e\u3059\uff0e\u3057\u304b\u308a\u306a\u304c\u3089\uff0c\u5e83\u89d2\u30ec\u30f3\u30ba\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306f\uff0c\u753b\u50cf\u306b\u6b6a\u307f\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u9069\u5207\u306a\u30ec\u30f3\u30ba\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3053\u3068\u3067\u3042\u308b\u7a0b\u5ea6\u306e\u6b6a\u307f\u306e\u88dc\u6b63\u3092\u884c\u3046\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c\uff0c\u9650\u754c\u306f\u3042\u308a\u307e\u3059\uff0e\u79c1\u3082\u5e83\u7bc4\u56f2\u3092\u64ae\u5f71\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059\u304c\uff0c\u3053\u306e\u6b6a\u307f\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u3068\u753b\u50cf\u4e0a\u304b\u3089\u7b97\u51fa\u3057\u305f\u7279\u5fb4\u70b9\u306e\u5ea7\u6a19\u304c\u5b9f\u969b\u306e\u5ea7\u6a19\u3088\u308a\u3082\u305a\u308c\u3066\u3057\u307e\u3044\u8aa4\u5dee\u306e\u539f\u56e0\u3068\u306a\u308a\u307e\u3059\uff0e\u305d\u3053\u3067\u753b\u50cf\u306e\u6b6a\u307f\u304c\u5c0f\u3055\u3044\u5bfe\u89d2\u7dda\u753b\u89d260\u00b0\u306e\u30ec\u30f3\u30ba\u3092\u7528\u3044\u308b\u30ab\u30e1\u30e9\u30922\u53f0\u4e26\u884c\u306b\u4e26\u3079\u64ae\u5f71\u3092\u884c\u3044\uff0c2\u53f0\u306e\u30ab\u30e1\u30e9\u304b\u3089\u306e\u753b\u50cf\u3092\u5408\u6210\u3057\u753b\u89d2\u306e\u5927\u304d\u306a\u753b\u50cf\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n\n\u6ce8\u610f\u4e8b\u9805\nOpenCV2.4\u3067\u306f\uff0cSURF\u3084SIFT\u306a\u3069\u306e\u5229\u7528\u3092\u5236\u9650\u3057\u3066\u304a\u308a\uff0cOpenCV\u3092\u5358\u7d14\u306b\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u305f\u3051\u3067\u306f\u5229\u7528\u3067\u304d\u306a\u3044\uff0e\n\nofApp.h\n#include \"ofMain.h\"\n#include \"ofxCv.h\"\n#include \"ofxOpenCv.h\"\n#include <opencv2/nonfree/features2d.hpp> // \u2190 \u624b\u52d5\u3067nonfree\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\n#include <opencv2/legacy/legacy.hpp>      // \u2190 \u624b\u52d5\u3067legacy\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\n\n\n\n2\u679a\u306e\u753b\u50cf\u306e\u7279\u5fb4\u91cf\u306e\u7b97\u51fa\n\u3000\u753b\u50cf\u306e\u7279\u5fb4\u91cf\u3092\u7b97\u51fa\u65b9\u6cd5\u306b\u306f\u5e7e\u3064\u304b\u306e\u7a2e\u985e\u304c\u3042\u308b\u304c\uff0c\u4eca\u56de\u306fSURF(Speeded Up Robust Features)\u3092\u7528\u3044\u3066\u7279\u5fb4\u91cf\u306e\u7b97\u51fa\u3092\u884c\u3046\uff0e\n\u3000SURF\u306fSIFT\u306b\u6bd4\u3079\u9ad8\u901f\u3067\u3042\u308a\uff0c\u7279\u5fb4\u91cf\u306e\u7b97\u51fa\u7cbe\u5ea6\u3082SIFT\u3088\u308a\u5c11\u3057\u52a3\u308b\u7a0b\u5ea6\u3067\u3042\u308b\u305f\u3081\uff0c\u63a1\u7528\u3057\u305f\uff0e\n \u3053\u3061\u3089\u306e2\u679a\u306e\u753b\u50cf\u304b\u3089\u753b\u50cf\u306e\u5408\u6210\u3092\u884c\u3046\uff0e\n\n\n\nofApp.cpp\n// SURT\u7279\u5fb4\u5668\u3092\u4f7f\u3046\u5834\u5408\ncv::SurfFeatureDetector surf;\n// SURT\u306e\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u30fc\ncv::SurfDescriptorExtractor surfDesc;\n\n//\u753b\u50cf\u6bce\u306ekey points\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u914d\u5217\nstd::vector<cv::KeyPoint> keyPoints[2];\n//\u753b\u50cf\u6bce\u306e\u7279\u5fb4\u91cf\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u914d\u5217\ncv::Mat descriptors[2];\n\n// \u305d\u308c\u305e\u308c\u306e\u5165\u529b\u753b\u50cf\u306b\u5bfe\u3057\u3066detect\u95a2\u6570\u3092\u7528\u3044\u3066key points\u3092\u7b97\u51fa\nsurf.detect(gray1, keyPoints[0]);\nsurf.detect(gray2, keyPoints[1]);\n\n// \u305d\u308c\u305e\u308c\u306e\u5165\u529b\u753b\u50cf\u306b\u5bfe\u3057\u3066compute\u95a2\u6570\u3092\u7528\u3044\u3066\u7279\u5fb4\u91cf\u3092\u7b97\u51fa\nsurfDesc.compute(gray1, keyPoints[0], descriptors[0]);\nsurfDesc.compute(gray2, keyPoints[1], descriptors[1]);\n\n\n\n\u524d\u8ff0\u306e\u901a\u308a\uff0c\u5165\u529b\u753b\u50cf\u304b\u3089\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u304c\u7b97\u51fa\u3067\u304d\u308b\uff0e2\u679a\u306e\u753b\u50cf\u306b\u5bfe\u3057\u3066\u540c\u4e00\u306e\u7279\u5fb4\u91cf\u3092\u6c42\u3081\uff0c\u53cc\u65b9\u306e\u753b\u50cf\u304b\u3089\u4f3c\u3066\u3044\u308b\u3068\u3053\u308d\u7b97\u51fa\u3059\u308b\uff0e\n\nofApp.cpp\n// 2\u679a\u306e\u753b\u50cf\u304b\u3089\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u7279\u5fb4\u70b9\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nstd::vector<cv::DMatch> matches;\n// 1\u679a\u76ee\u306e\u753b\u50cf\u306e\u5404\u7279\u5fb4\u70b9\u306b\u5bfe\u3057\u3066\uff0c2\u679a\u76ee\u306e\u753b\u50cf\u304b\u3089\u6700\u3082\u8fd1\u3044\u7279\u5fb4\u70b9\u3092\u898b\u3064\u3051\u308b\ncv::BruteForceMatcher<cv::L2<float>> matcher;\nmatcher.match(descriptors[0], descriptors[1], matches);\n\n// 2\u679a\u76ee\u306e\u753b\u50cf\u306b\u5bfe\u3057\u3066\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3092\u5165\u529b\nstd::vector<cv::Vec2f> getPoints1(matches.size());\n// 1\u679a\u76ee\u306e\u753b\u50cf\u306b\u5bfe\u3057\u3066\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3092\u5165\u529b\nstd::vector<cv::Vec2f> getPoints2(matches.size());\n\nfor (size_t i = 0; i < matches.size(); i++) {\n    getPoints1[i][0] = keyPoints[0][matches[i].queryIdx].pt.x;\n    getPoints1[i][1] = keyPoints[0][matches[i].queryIdx].pt.y;\n\n    getPoints2[i][0] = keyPoints[1][matches[i].trainIdx].pt.x;\n    getPoints2[i][1] = keyPoints[1][matches[i].trainIdx].pt.y;\n\n}\n\n\n2\u679a\u306e\u753b\u50cf\u304b\u3089\u5f97\u3089\u308c\u305f\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u7279\u5fb4\u70b9\u3092\u753b\u50cf\u306b\u63cf\u753b\u3059\u308b\n\nofApp.cpp\n// \u30de\u30c3\u30c1\u30f3\u30b0\u7d50\u679c\u3092\u63cf\u753b\u3059\u308b\u305f\u3081\u306eMat\u578b\u5909\u6570\u3092\u5b9a\u7fa9\ncv::Mat matchedImg;\n\n// drawMatches\u95a2\u6570\u3092\u7528\u3044\u3066\u5165\u529b\u753b\u50cf\u306b\u5bfe\u3059\u308b\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3092\u63cf\u753b\ncv::drawMatches(CamMat1, keyPoints[0], CamMat2, keyPoints[1], matches, matchedImg);\n\n\n\n\u3053\u306e\u3088\u3046\u306bkey points\u306f\u5186\u3067\uff0c2\u3064\u306ekey point\u3092\u7d50\u3076\u7dda\u5206\u3092\u753b\u50cf\u306b\u91cd\u306d\u3066\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n\n\u30db\u30e2\u30b0\u30e9\u30d5\u30a3(\u5c04\u5f71\u5909\u63db)\u3092\u7528\u3044\u3066\u753b\u50cf\u306e\u5408\u6210\n\u3000\u305d\u308c\u305e\u308c\u306e\u753b\u50cf\u306e\u7279\u5fb4\u70b9\u3092\u884c\u5217\u3068\u3057\u3066\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\u3044\u308b\uff0e2\u3064\u306e\u884c\u5217\u3092\u7528\u3044\u3066\u5c04\u5f71\u5909\u63db\u884c\u5217(\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217)\u3092\u7b97\u51fa\u3059\u308b\uff0e\n\nofApp.cpp\n// findHomography\u95a2\u6570\u3092\u7528\u3044\u3066\u5c04\u5f71\u5909\u63db\u884c\u5217\u3092\u7b97\u51fa\u3059\u308b\uff0e\ncv::Mat homographyImg = cv::findHomography(getPoints1, getPoints2, CV_RANSAC);\n\n//  \u753b\u50cf\u306b\u5bfe\u3057\u3066\u900f\u8996\u5909\u63db\u3092\u884c\u3046\ncv::warpPerspective(CamMat1, result, homographyImg, cv::Size(static_cast<int>(CamMat1.cols * 1.5), static_cast<int>(CamMat1.rows * 1.1)));\n\n// 2\u679a\u76ee\u306e\u753b\u50cf\u306e\u753b\u7d20\u3092at\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066result\u3078\u4ee3\u5165\nfor (int y = 0; y < CamMat2.rows; y++){\n    for (int x = 0; x < CamMat2.cols; x++){\n        result.at<cv::Vec3b>(y, x) = CamMat2.at<cv::Vec3b>(y, x);\n    }\n}\n\n\n\n\u3053\u306e\u3088\u3046\u306b\uff0c2\u679a\u306e\u753b\u50cf\u3092\u5408\u6210\u3057\u30d1\u30ce\u30e9\u30de\u306a\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n\u4eca\u56de\u306f\u3082\u3063\u3068\u3082\u7c21\u5358\u306a\u753b\u50cf\u306e\u5408\u6210\u3092\u884c\u3063\u305f\u304c\uff0c\u52d5\u753b\u50cf\u3067\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u3082\u3046\u5c11\u3057\u30b3\u30fc\u30c9\u3092\u6539\u4fee\u3059\u308b\u5fc5\u8981\u304c\u308b\uff0e\n\u4ee5\u4e0b\u306b\u5168\u30b3\u30fc\u30c9\u3092\u793a\u3059\uff0e\u5197\u9577\u306a\u7b87\u6240\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\uff0e\n\u307e\u305f\uff0c\u5909\u6570\u9593\u306e\u3084\u308a\u53d6\u308a\u3092\u30dd\u30a4\u30f3\u30bf\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3088\u308a\u9ad8\u901f\u5316\u51fa\u6765\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\nofApp.h\n#pragma once\n\n#include \"ofMain.h\"\n#include \"ofxCv.h\"\n#include \"ofxOpenCv.h\"\n#include <opencv2/nonfree/features2d.hpp>\n#include <opencv2/legacy/legacy.hpp>\n\nclass ofApp : public ofBaseApp{\n\n    public:\n        void setup();\n        void update();\n        void draw();\n\n        void keyPressed(int key);\n        void keyReleased(int key);\n        void mouseMoved(int x, int y );\n        void mouseDragged(int x, int y, int button);\n        void mousePressed(int x, int y, int button);\n        void mouseReleased(int x, int y, int button);\n        void mouseEntered(int x, int y);\n        void mouseExited(int x, int y);\n        void windowResized(int w, int h);\n        void dragEvent(ofDragInfo dragInfo);\n        void gotMessage(ofMessage msg);\n\n\n                ofVideoGrabber  Cam1;\n                ofVideoGrabber  Cam2;\n                ofImage         img1;\n                ofImage         img2;\n                cv::Mat         CamMat1,\n                                CamMat2;\n                cv::Mat         matchedImg_r;\n                cv::Mat         result;\n\n};\n\n\n\nofApp.cpp\n#include \"ofApp.h\"\n\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n    img1.load(\"6.jpg\");\n    img2.load(\"5.jpg\");\n\n    CamMat2 = ofxCv::toCv(img2);\n    CamMat1 = ofxCv::toCv(img1);\n    cv::Mat gray1, gray2;\n\n    cv::cvtColor(CamMat1, gray1, CV_BGR2GRAY);\n    cv::cvtColor(CamMat2, gray2, CV_BGR2GRAY);\n\n\n    cv::SurfFeatureDetector surf;\n    cv::SurfDescriptorExtractor surfDesc;\n\n    std::vector<cv::KeyPoint> keyPoints[2];\n    cv::Mat descriptors[2];\n\n    surf.detect(gray1, keyPoints[0]);\n    surf.detect(gray2, keyPoints[1]);\n\n    surfDesc.compute(gray1, keyPoints[0], descriptors[0]);\n    surfDesc.compute(gray2, keyPoints[1], descriptors[1]);\n\n    std::vector<cv::DMatch> matches;\n    cv::BruteForceMatcher<cv::L2<float>> matcher;\n    matcher.match(descriptors[0], descriptors[1], matches);\n\n    std::vector<cv::Vec2f> getPoints1(matches.size());\n    std::vector<cv::Vec2f> getPoints2(matches.size());\n\n    for (size_t i = 0; i < matches.size(); i++) {\n        getPoints1[i][0] = keyPoints[0][matches[i].queryIdx].pt.x;\n        getPoints1[i][1] = keyPoints[0][matches[i].queryIdx].pt.y;\n\n        getPoints2[i][0] = keyPoints[1][matches[i].trainIdx].pt.x;\n        getPoints2[i][1] = keyPoints[1][matches[i].trainIdx].pt.y;\n\n    }\n\n    cv::Mat matchedImg;\n    cv::drawMatches(CamMat1, keyPoints[0], CamMat2, keyPoints[1], matches, matchedImg);\n\n    cv::Mat homographyImg = cv::findHomography(getPoints1, getPoints2, CV_RANSAC);\n\n\n    cv::warpPerspective(CamMat1, result, homographyImg, cv::Size(static_cast<int>(CamMat1.cols * 1.5), static_cast<int>(CamMat1.rows * 1.1)));\n    for (int y = 0; y < CamMat2.rows; y++){\n        for (int x = 0; x < CamMat2.cols; x++){\n            result.at<cv::Vec3b>(y, x) = CamMat2.at<cv::Vec3b>(y, x);\n        }\n    }\n}\n\n//--------------------------------------------------------------\nvoid ofApp::update(){\n    // \u4eca\u56de\u306f\u5229\u7528\u3057\u306a\u3044\n}\n\n//--------------------------------------------------------------\nvoid ofApp::draw(){\n    ofxCv::drawMat(CamMat1, 0, 0, CamMat1.cols/2, CamMat1.rows/2);\n    ofxCv::drawMat(CamMat2, CamMat1.cols/2, 0, CamMat2.cols/2, CamMat2.rows/2);\n    ofxCv::drawMat(matchedImg_r, 0, CamMat1.rows/2);\n}\n\n// \u4ee5\u4e0b\u7701\u7565\n\n\n\u660e\u65e5\u306e@fksk\u3055\u3093\u306b\u7e4b\u304e\u307e\u3059\uff0e\n\u3053\u308c\u306f\u5ca9\u624b\u770c\u7acb\u5927\u5b66\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc22\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n# \u306f\u3058\u3081\u306b\n\u3000\u5ca9\u624b\u770c\u7acb\u5927\u5b66\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u60c5\u5831\u5b66\u7814\u7a76\u79d1\u4fee\u58eb2\u5e74\u306enyagato_00\u3067\u3059\uff0e\u81ea\u5206\u306e\u7814\u7a76\u306e\u4e2d\u3067\uff0c\u8907\u6570\u53f0\u306e\u30ab\u30e1\u30e9\u3092\u7528\u3044\u3066\u64ae\u5f71\u7bc4\u56f2\u3092\u62e1\u5f35\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\uff0c\u3082\u3063\u3068\u3082\u7c21\u5358\u306a\uff12\u53f0\u306e\u30ab\u30e1\u30e9\u304b\u3089\u64ae\u5f71\u3057\u305f\u753b\u50cf\u3092\u7528\u3044\u3066\u753b\u50cf\u5408\u6210\u3092\u884c\u3046\u65b9\u6cd5\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3059\uff0e\n\u3000\u81ea\u5206\u81ea\u8eab\u306fC++\u3092\u4f7f\u3046\u4e0a\u3067\u4fbf\u5229\u306a\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3042\u308bopenframeworks\u3092\u5229\u7528\u3057\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\uff0e\u30d9\u30fc\u30b9\u304cC++\u3067\u3042\u308b\u305f\u3081\uff0c\u8c4a\u5bcc\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u308b\u3060\u3051\u3067\u306a\u304f\uff0c\u30a2\u30c9\u30aa\u30f3\u3092\u8ffd\u52a0\u3057\u3066\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3060\u3051\u3067\u3088\u308a\u62e1\u5f35\u6027\u306e\u9ad8\u3044\u30bd\u30d5\u30c8\u306e\u958b\u767a\u304c\u884c\u3048\u307e\u3059\uff0e\n\u3000\n# OpenCV\u306e\u5358\u72ec\u3067\u306e\u5229\u7528\u3067\u306f\u306a\u304f\uff0copenframeworks\u3092\u7528\u3044\u3066\u5229\u7528\u3059\u308b\u306e\u304b\n\u3000OpenCV\u306f\uff0c\u3053\u3061\u3089\u3082C/C++ Java, Python\uff0cMATLAB\u306a\u3069\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u3059\u306a\u308f\u3061\uff0copenframeworks\u3092\u308f\u3056\u308f\u3056\u5229\u7528\u3057\u306a\u304f\u3066\u3082C++\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u306a\u30b3\u30fc\u30c9\u3067\u3082\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e\u3057\u304b\u3057\u306a\u304c\u3089\uff0cOpenCV\u306eGUI\u306f\u5c11\u3057\u4f7f\u3044\u3065\u3089\u304fC++\u306b\u306f\u4ed6\u306e\u4fbf\u5229\u306aGUI\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u3089\u3092\u8907\u5408\u7684\u306b\u5229\u7528\u3059\u308b\u969b\u306b\u4fbf\u5229\u306a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304copenframeworks\u3067\u3042\u308b\u305f\u3081\uff0c\u79c1\u306f\u3053\u306e\u74b0\u5883\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\n\u3000\u203b\u6240\u5c5e\u8b1b\u5ea7\u304c\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3046\u3053\u3068\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\u305f\u3081\u4ed6\u306e\u65b9\u3068\u306e\u3084\u308a\u53d6\u308a\u304c\u697d\u3067\u3042\u308b\u3068\u3044\u3046\u7406\u7531\u3082\u3042\u308a\u307e\u3059\uff0e\n\n# \u30ab\u30e1\u30e9\u306e\u753b\u89d2\n\u3000\u30ab\u30e1\u30e9\u306e\u753b\u89d2\u3068\u306f\uff0c\u4e00\u822c\u7684\u306b\u306f\u30ec\u30f3\u30ba\u306b\u5bfe\u3059\u308b\u7126\u70b9\u8ddd\u96e2\u306b\u3088\u3063\u3066\u6c7a\u307e\u308a\u307e\u3059\uff0e\u307e\u305f\uff0c\u30ec\u30f3\u30ba\u304c\u5e83\u89d2\u30ec\u30f3\u30ba\u3067\u3042\u308b\u304b\u671b\u9060\u30ec\u30f3\u30ba\u3067\u3042\u308b\u304b\u306b\u3088\u3063\u3066\u3082\u5909\u308f\u308a\u307e\u3059\uff0e\u5358\u7d14\u306b\u64ae\u5f71\u7bc4\u56f2\u3092\u62e1\u5f35\u3059\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u5e83\u89d2\u30ec\u30f3\u30ba\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3057\u307e\u3059\uff0e\u3057\u304b\u308a\u306a\u304c\u3089\uff0c\u5e83\u89d2\u30ec\u30f3\u30ba\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u306f\uff0c\u753b\u50cf\u306b\u6b6a\u307f\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u9069\u5207\u306a\u30ec\u30f3\u30ba\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3053\u3068\u3067\u3042\u308b\u7a0b\u5ea6\u306e\u6b6a\u307f\u306e\u88dc\u6b63\u3092\u884c\u3046\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c\uff0c\u9650\u754c\u306f\u3042\u308a\u307e\u3059\uff0e\u79c1\u3082\u5e83\u7bc4\u56f2\u3092\u64ae\u5f71\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059\u304c\uff0c\u3053\u306e\u6b6a\u307f\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u3068\u753b\u50cf\u4e0a\u304b\u3089\u7b97\u51fa\u3057\u305f\u7279\u5fb4\u70b9\u306e\u5ea7\u6a19\u304c\u5b9f\u969b\u306e\u5ea7\u6a19\u3088\u308a\u3082\u305a\u308c\u3066\u3057\u307e\u3044\u8aa4\u5dee\u306e\u539f\u56e0\u3068\u306a\u308a\u307e\u3059\uff0e\u305d\u3053\u3067\u753b\u50cf\u306e\u6b6a\u307f\u304c\u5c0f\u3055\u3044\u5bfe\u89d2\u7dda\u753b\u89d260\u00b0\u306e\u30ec\u30f3\u30ba\u3092\u7528\u3044\u308b\u30ab\u30e1\u30e9\u30922\u53f0\u4e26\u884c\u306b\u4e26\u3079\u64ae\u5f71\u3092\u884c\u3044\uff0c2\u53f0\u306e\u30ab\u30e1\u30e9\u304b\u3089\u306e\u753b\u50cf\u3092\u5408\u6210\u3057\u753b\u89d2\u306e\u5927\u304d\u306a\u753b\u50cf\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n\n# \u6ce8\u610f\u4e8b\u9805\n OpenCV2.4\u3067\u306f\uff0cSURF\u3084SIFT\u306a\u3069\u306e\u5229\u7528\u3092\u5236\u9650\u3057\u3066\u304a\u308a\uff0cOpenCV\u3092\u5358\u7d14\u306b\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u305f\u3051\u3067\u306f\u5229\u7528\u3067\u304d\u306a\u3044\uff0e\n\n```ofApp.h\n#include \"ofMain.h\"\n#include \"ofxCv.h\"\n#include \"ofxOpenCv.h\"\n#include <opencv2/nonfree/features2d.hpp> // \u2190 \u624b\u52d5\u3067nonfree\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\n#include <opencv2/legacy/legacy.hpp>      // \u2190 \u624b\u52d5\u3067legacy\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\n```\n\n# 2\u679a\u306e\u753b\u50cf\u306e\u7279\u5fb4\u91cf\u306e\u7b97\u51fa\n\u3000\u753b\u50cf\u306e\u7279\u5fb4\u91cf\u3092\u7b97\u51fa\u65b9\u6cd5\u306b\u306f\u5e7e\u3064\u304b\u306e\u7a2e\u985e\u304c\u3042\u308b\u304c\uff0c\u4eca\u56de\u306fSURF(Speeded Up Robust Features)\u3092\u7528\u3044\u3066\u7279\u5fb4\u91cf\u306e\u7b97\u51fa\u3092\u884c\u3046\uff0e\n\u3000SURF\u306fSIFT\u306b\u6bd4\u3079\u9ad8\u901f\u3067\u3042\u308a\uff0c\u7279\u5fb4\u91cf\u306e\u7b97\u51fa\u7cbe\u5ea6\u3082SIFT\u3088\u308a\u5c11\u3057\u52a3\u308b\u7a0b\u5ea6\u3067\u3042\u308b\u305f\u3081\uff0c\u63a1\u7528\u3057\u305f\uff0e\n \u3053\u3061\u3089\u306e2\u679a\u306e\u753b\u50cf\u304b\u3089\u753b\u50cf\u306e\u5408\u6210\u3092\u884c\u3046\uff0e\n![5.jpg](https://qiita-image-store.s3.amazonaws.com/0/50627/787dd8ef-cc41-6974-c6f8-883f4254b5f6.jpeg)\n\n![6.jpg](https://qiita-image-store.s3.amazonaws.com/0/50627/5cb32630-0f95-594f-cbe6-39189a56d063.jpeg)\n\n```ofApp.cpp\n// SURT\u7279\u5fb4\u5668\u3092\u4f7f\u3046\u5834\u5408\ncv::SurfFeatureDetector surf;\n// SURT\u306e\u7279\u5fb4\u91cf\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306e\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u30fc\ncv::SurfDescriptorExtractor surfDesc;\n\n//\u753b\u50cf\u6bce\u306ekey points\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u914d\u5217\nstd::vector<cv::KeyPoint> keyPoints[2];\n//\u753b\u50cf\u6bce\u306e\u7279\u5fb4\u91cf\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u914d\u5217\ncv::Mat descriptors[2];\n\n// \u305d\u308c\u305e\u308c\u306e\u5165\u529b\u753b\u50cf\u306b\u5bfe\u3057\u3066detect\u95a2\u6570\u3092\u7528\u3044\u3066key points\u3092\u7b97\u51fa\nsurf.detect(gray1, keyPoints[0]);\nsurf.detect(gray2, keyPoints[1]);\n\n// \u305d\u308c\u305e\u308c\u306e\u5165\u529b\u753b\u50cf\u306b\u5bfe\u3057\u3066compute\u95a2\u6570\u3092\u7528\u3044\u3066\u7279\u5fb4\u91cf\u3092\u7b97\u51fa\nsurfDesc.compute(gray1, keyPoints[0], descriptors[0]);\nsurfDesc.compute(gray2, keyPoints[1], descriptors[1]);\n\n```\n\n\u524d\u8ff0\u306e\u901a\u308a\uff0c\u5165\u529b\u753b\u50cf\u304b\u3089\u305d\u308c\u305e\u308c\u306e\u7279\u5fb4\u91cf\u304c\u7b97\u51fa\u3067\u304d\u308b\uff0e2\u679a\u306e\u753b\u50cf\u306b\u5bfe\u3057\u3066\u540c\u4e00\u306e\u7279\u5fb4\u91cf\u3092\u6c42\u3081\uff0c\u53cc\u65b9\u306e\u753b\u50cf\u304b\u3089\u4f3c\u3066\u3044\u308b\u3068\u3053\u308d\u7b97\u51fa\u3059\u308b\uff0e\n\n```ofApp.cpp\n// 2\u679a\u306e\u753b\u50cf\u304b\u3089\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u7279\u5fb4\u70b9\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\nstd::vector<cv::DMatch> matches;\n// 1\u679a\u76ee\u306e\u753b\u50cf\u306e\u5404\u7279\u5fb4\u70b9\u306b\u5bfe\u3057\u3066\uff0c2\u679a\u76ee\u306e\u753b\u50cf\u304b\u3089\u6700\u3082\u8fd1\u3044\u7279\u5fb4\u70b9\u3092\u898b\u3064\u3051\u308b\ncv::BruteForceMatcher<cv::L2<float>> matcher;\nmatcher.match(descriptors[0], descriptors[1], matches);\n\n// 2\u679a\u76ee\u306e\u753b\u50cf\u306b\u5bfe\u3057\u3066\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3092\u5165\u529b\nstd::vector<cv::Vec2f> getPoints1(matches.size());\n// 1\u679a\u76ee\u306e\u753b\u50cf\u306b\u5bfe\u3057\u3066\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3092\u5165\u529b\nstd::vector<cv::Vec2f> getPoints2(matches.size());\n    \nfor (size_t i = 0; i < matches.size(); i++) {\n    getPoints1[i][0] = keyPoints[0][matches[i].queryIdx].pt.x;\n    getPoints1[i][1] = keyPoints[0][matches[i].queryIdx].pt.y;\n        \n    getPoints2[i][0] = keyPoints[1][matches[i].trainIdx].pt.x;\n    getPoints2[i][1] = keyPoints[1][matches[i].trainIdx].pt.y;\n        \n}\n```\n\n2\u679a\u306e\u753b\u50cf\u304b\u3089\u5f97\u3089\u308c\u305f\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u7279\u5fb4\u70b9\u3092\u753b\u50cf\u306b\u63cf\u753b\u3059\u308b\n\n```ofApp.cpp\n// \u30de\u30c3\u30c1\u30f3\u30b0\u7d50\u679c\u3092\u63cf\u753b\u3059\u308b\u305f\u3081\u306eMat\u578b\u5909\u6570\u3092\u5b9a\u7fa9\ncv::Mat matchedImg;\n\n// drawMatches\u95a2\u6570\u3092\u7528\u3044\u3066\u5165\u529b\u753b\u50cf\u306b\u5bfe\u3059\u308b\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3092\u63cf\u753b\ncv::drawMatches(CamMat1, keyPoints[0], CamMat2, keyPoints[1], matches, matchedImg);\n```\n\n![matchedImg_r_of.png](https://qiita-image-store.s3.amazonaws.com/0/50627/846ed97e-a4cd-d810-045d-38e011faf3b3.png)\n\u3053\u306e\u3088\u3046\u306bkey points\u306f\u5186\u3067\uff0c2\u3064\u306ekey point\u3092\u7d50\u3076\u7dda\u5206\u3092\u753b\u50cf\u306b\u91cd\u306d\u3066\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n\n# \u30db\u30e2\u30b0\u30e9\u30d5\u30a3(\u5c04\u5f71\u5909\u63db)\u3092\u7528\u3044\u3066\u753b\u50cf\u306e\u5408\u6210\n\u3000\u305d\u308c\u305e\u308c\u306e\u753b\u50cf\u306e\u7279\u5fb4\u70b9\u3092\u884c\u5217\u3068\u3057\u3066\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\u3044\u308b\uff0e2\u3064\u306e\u884c\u5217\u3092\u7528\u3044\u3066\u5c04\u5f71\u5909\u63db\u884c\u5217(\u30db\u30e2\u30b0\u30e9\u30d5\u30a3\u884c\u5217)\u3092\u7b97\u51fa\u3059\u308b\uff0e\n\n```ofApp.cpp\n// findHomography\u95a2\u6570\u3092\u7528\u3044\u3066\u5c04\u5f71\u5909\u63db\u884c\u5217\u3092\u7b97\u51fa\u3059\u308b\uff0e\ncv::Mat homographyImg = cv::findHomography(getPoints1, getPoints2, CV_RANSAC);\n\n//  \u753b\u50cf\u306b\u5bfe\u3057\u3066\u900f\u8996\u5909\u63db\u3092\u884c\u3046\ncv::warpPerspective(CamMat1, result, homographyImg, cv::Size(static_cast<int>(CamMat1.cols * 1.5), static_cast<int>(CamMat1.rows * 1.1)));\n\n// 2\u679a\u76ee\u306e\u753b\u50cf\u306e\u753b\u7d20\u3092at\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066result\u3078\u4ee3\u5165\nfor (int y = 0; y < CamMat2.rows; y++){\n    for (int x = 0; x < CamMat2.cols; x++){\n        result.at<cv::Vec3b>(y, x) = CamMat2.at<cv::Vec3b>(y, x);\n    }\n}\n```\n\n![result_of.png](https://qiita-image-store.s3.amazonaws.com/0/50627/db1432d2-9670-273c-b1c3-6dd4ce0938ca.png)\n\u3053\u306e\u3088\u3046\u306b\uff0c2\u679a\u306e\u753b\u50cf\u3092\u5408\u6210\u3057\u30d1\u30ce\u30e9\u30de\u306a\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n\n\u4eca\u56de\u306f\u3082\u3063\u3068\u3082\u7c21\u5358\u306a\u753b\u50cf\u306e\u5408\u6210\u3092\u884c\u3063\u305f\u304c\uff0c\u52d5\u753b\u50cf\u3067\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u3082\u3046\u5c11\u3057\u30b3\u30fc\u30c9\u3092\u6539\u4fee\u3059\u308b\u5fc5\u8981\u304c\u308b\uff0e\n\n\u4ee5\u4e0b\u306b\u5168\u30b3\u30fc\u30c9\u3092\u793a\u3059\uff0e\u5197\u9577\u306a\u7b87\u6240\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u9802\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\uff0e\n\u307e\u305f\uff0c\u5909\u6570\u9593\u306e\u3084\u308a\u53d6\u308a\u3092\u30dd\u30a4\u30f3\u30bf\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3088\u308a\u9ad8\u901f\u5316\u51fa\u6765\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n```ofApp.h\n#pragma once\n\n#include \"ofMain.h\"\n#include \"ofxCv.h\"\n#include \"ofxOpenCv.h\"\n#include <opencv2/nonfree/features2d.hpp>\n#include <opencv2/legacy/legacy.hpp>\n\nclass ofApp : public ofBaseApp{\n\n\tpublic:\n\t\tvoid setup();\n\t\tvoid update();\n\t\tvoid draw();\n\n\t\tvoid keyPressed(int key);\n\t\tvoid keyReleased(int key);\n\t\tvoid mouseMoved(int x, int y );\n\t\tvoid mouseDragged(int x, int y, int button);\n\t\tvoid mousePressed(int x, int y, int button);\n\t\tvoid mouseReleased(int x, int y, int button);\n\t\tvoid mouseEntered(int x, int y);\n\t\tvoid mouseExited(int x, int y);\n\t\tvoid windowResized(int w, int h);\n\t\tvoid dragEvent(ofDragInfo dragInfo);\n\t\tvoid gotMessage(ofMessage msg);\n\t\t\n   \n                ofVideoGrabber  Cam1;\n                ofVideoGrabber  Cam2;\n                ofImage         img1;\n                ofImage         img2;\n                cv::Mat         CamMat1,\n                                CamMat2;\n                cv::Mat         matchedImg_r;\n                cv::Mat         result;\n    \n};\n```\n\n```ofApp.cpp\n#include \"ofApp.h\"\n\n//--------------------------------------------------------------\nvoid ofApp::setup(){\n    img1.load(\"6.jpg\");\n    img2.load(\"5.jpg\");\n    \n    CamMat2 = ofxCv::toCv(img2);\n    CamMat1 = ofxCv::toCv(img1);\n    cv::Mat gray1, gray2;\n    \n    cv::cvtColor(CamMat1, gray1, CV_BGR2GRAY);\n    cv::cvtColor(CamMat2, gray2, CV_BGR2GRAY);\n    \n    \n    cv::SurfFeatureDetector surf;\n    cv::SurfDescriptorExtractor surfDesc;\n    \n    std::vector<cv::KeyPoint> keyPoints[2];\n    cv::Mat descriptors[2];\n    \n    surf.detect(gray1, keyPoints[0]);\n    surf.detect(gray2, keyPoints[1]);\n    \n    surfDesc.compute(gray1, keyPoints[0], descriptors[0]);\n    surfDesc.compute(gray2, keyPoints[1], descriptors[1]);\n    \n    std::vector<cv::DMatch> matches;\n    cv::BruteForceMatcher<cv::L2<float>> matcher;\n    matcher.match(descriptors[0], descriptors[1], matches);\n    \n    std::vector<cv::Vec2f> getPoints1(matches.size());\n    std::vector<cv::Vec2f> getPoints2(matches.size());\n    \n    for (size_t i = 0; i < matches.size(); i++) {\n        getPoints1[i][0] = keyPoints[0][matches[i].queryIdx].pt.x;\n        getPoints1[i][1] = keyPoints[0][matches[i].queryIdx].pt.y;\n        \n        getPoints2[i][0] = keyPoints[1][matches[i].trainIdx].pt.x;\n        getPoints2[i][1] = keyPoints[1][matches[i].trainIdx].pt.y;\n        \n    }\n    \n    cv::Mat matchedImg;\n    cv::drawMatches(CamMat1, keyPoints[0], CamMat2, keyPoints[1], matches, matchedImg);\n    \n    cv::Mat homographyImg = cv::findHomography(getPoints1, getPoints2, CV_RANSAC);\n\n    \n    cv::warpPerspective(CamMat1, result, homographyImg, cv::Size(static_cast<int>(CamMat1.cols * 1.5), static_cast<int>(CamMat1.rows * 1.1)));\n    for (int y = 0; y < CamMat2.rows; y++){\n        for (int x = 0; x < CamMat2.cols; x++){\n            result.at<cv::Vec3b>(y, x) = CamMat2.at<cv::Vec3b>(y, x);\n        }\n    }\n}\n\n//--------------------------------------------------------------\nvoid ofApp::update(){\n    // \u4eca\u56de\u306f\u5229\u7528\u3057\u306a\u3044\n}\n\n//--------------------------------------------------------------\nvoid ofApp::draw(){\n    ofxCv::drawMat(CamMat1, 0, 0, CamMat1.cols/2, CamMat1.rows/2);\n    ofxCv::drawMat(CamMat2, CamMat1.cols/2, 0, CamMat2.cols/2, CamMat2.rows/2);\n    ofxCv::drawMat(matchedImg_r, 0, CamMat1.rows/2);\n}\n\n// \u4ee5\u4e0b\u7701\u7565\n```\n\n\n\u660e\u65e5\u306e@fksk\u3055\u3093\u306b\u7e4b\u304e\u307e\u3059\uff0e\n\n\n\n\n\n\n\n", "tags": ["OpenCV", "openFrameworks"]}