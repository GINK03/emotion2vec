{"context": "\n\n\u3084\u308b\u3053\u3068\n\n\u52d5\u7684\u6700\u9069\u5316\u306e\u7c21\u5358\u306a\u78ba\u8a8d\n\u30b4\u30eb\u30d5\u306e\u671f\u5f85\u5024\u306e\u8a08\u7b97\n\n\n\u52d5\u7684\u6700\u9069\u5316\u306e\u7c21\u5358\u306a\u78ba\u8a8d\n\n\u52d5\u7684\u6700\u9069\u5316\u3068\u306f\n\n\u52d5\u7684\u6700\u9069\u5316(Dynamic Optimization)\u3068\u306f\u3001\u52d5\u7684\u8a08\u753b\u6cd5(Dynamic Programming)\u306e\u6700\u8fd1\u306e\u3088\u3073\u65b9\u3067\u3059\u3002\n\u90e8\u5206\u554f\u984c\u3092\u89e3\u304d\u3001\u305d\u306e\u7d50\u679c\u3092\u5229\u7528\u3057\u3066\u3001\u554f\u984c\u5168\u4f53\u3092\u89e3\u304d\u307e\u3059\u3002\u305d\u306e\u3068\u304d\u3001\u7e70\u8fd4\u3057 \u3042\u3089\u308f\u308c\u308b\u540c\u3058\u90e8\u5206\u554f\u984c\u306b\u5bfe\u3057\u3066\u3001\u7d50\u679c\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f7f\u3063\u3066\u52b9\u7387\u3088\u304f\u8a08\u7b97\u3057\u307e\u3059(\u30e1\u30e2\u5316)\u3002\n\n\n\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3067\u7c21\u5358\u306a\u78ba\u8a8d\nPython\u3067\u306f\u3001lru_cache\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306b\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3067\u304d\u307e\u3059\u3002(\u5f15\u6570\u304c\u30cf\u30c3\u30b7\u30e5\u5316\u53ef\u80fd\u306a\u5834\u5408)\n\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3067\u52b9\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\npython\n%matplotlib inline\nimport numpy as np, matplotlib.pyplot as plt\nfrom functools import lru_cache\nplt.rcParams['font.family'] = 'IPAexGothic'\nplt.rcParams['font.size'] = 16\n\ncount = 0\nnp.random.seed(1)\n_size = np.random.randint(100, 200, 100)\n_weight = np.random.randint(100, 200, 100)\n\ndef make_sample(n):\n    size = tuple(_size[:n])\n    weight = tuple(_weight[:n])\n    capacity = sum(size) // 3 * 2\n    return size, weight, capacity\n\ndef knapsack1(size, weight, capacity):\n    if len(size) == 0 or capacity < min(size):\n        return 0\n    global count\n    count += 1\n    r = capacity - size[0]\n    if r < 0:\n        return knapsack1(size[1:], weight[1:], capacity)\n    else:\n        return max(weight[0] + knapsack1(size[1:], weight[1:], r),\n                    knapsack1(size[1:], weight[1:], capacity))\n\n@lru_cache(None)\ndef knapsack2(size, weight, capacity):\n    if len(size) == 0 or capacity < min(size):\n        return 0\n    global count\n    count += 1\n    r = capacity - size[0]\n    if r < 0:\n        return knapsack2(size[1:], weight[1:], capacity)\n    else:\n        return max(weight[0] + knapsack2(size[1:], weight[1:], r),\n                    knapsack2(size[1:], weight[1:], capacity))\n\ndef count_knapsack1(n):\n    global count\n    count = 0\n    knapsack1(*make_sample(n))\n    return count\n\ndef count_knapsack2(n):\n    global count\n    count = 0\n    knapsack2(*make_sample(n))\n    return count\n\n\n\u3053\u3053\u3067\u306f\u3001\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3092\u6700\u521d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u3076\u304b\u9078\u3070\u306a\u3044\u304b\u3067\u90e8\u5206\u554f\u984c\u306b\u5206\u3051\u3066\u3001\u518d\u5e30\u7684\u306b\u89e3\u304d\u307e\u3059\u3002\n\ncount_knapsack1\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u306a\u3057\u306e\u547c\u51fa\u3057\u56de\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\ncount_knapsack2\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u3042\u308a\u306e\u547c\u51fa\u3057\u56de\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n\u9055\u3044\u306f\u3001lru_cache\u306e\u6709\u7121\u3060\u3051\u3067\u3059\u3002\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\npython\nrng = [10, 12, 14, 16, 18, 20]\nres1 = [count_knapsack1(i) for i in rng]\nres2 = [count_knapsack2(i) for i in rng]\n\nplt.plot(rng, res1, label='\u30ad\u30e3\u30c3\u30b7\u30e5\u306a\u3057')\nplt.plot(rng, res2, label='\u30ad\u30e3\u30c3\u30b7\u30e5\u3042\u308a')\nplt.xlabel('\u30a2\u30a4\u30c6\u30e0\u6570')\nplt.ylabel('\u547c\u51fa\u3057\u56de\u6570')\nplt.yscale('log')\nplt.legend(loc='lower right');\n\n\n\n\u7e26\u8ef8\u306f\u5bfe\u6570\u8ef8\u306a\u306e\u3067\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u3088\u308a\u3001\u304b\u306a\u308a\u9ad8\u901f\u5316\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u30b4\u30eb\u30d5\u306e\u671f\u5f85\u5024\u306e\u8a08\u7b97\n\u6b21\u306b\u3001\u7c21\u5358\u306a\u30b4\u30eb\u30d5\u306e\u554f\u984c\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n\u81ea\u5206\u3068\u76f8\u624b\u306e2\u4eba\u306718\u30db\u30fc\u30eb\u306e\u30b9\u30b3\u30a2\u3092\u7af6\u3044\u307e\u3059\u3002\u52dd\u3066\u3070+1\u70b9\u3001\u8ca0\u3051\u308c\u3070\u20151\u70b9\u3001\u5f15\u304d\u5206\u3051\u306f0\u70b9\u3068\u3057\u307e\u3059\u3002\n18\u30db\u30fc\u30eb\u3067\u3059\u304c\u3001\u5168\u3066\u540c\u3058\u6761\u4ef6\u3068\u3057\u307e\u3059\u3002\n\u76f8\u624b\u306f\u300120%\u306e\u78ba\u7387\u3067\u30dc\u30ae\u30fc\u300160%\u306e\u78ba\u7387\u3067\u30d1\u30fc\u300120%\u306e\u78ba\u7387\u3067\u30d0\u30fc\u30c7\u30a3\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\u81ea\u5206\u306f\u3001\u5404\u30db\u30fc\u30eb\u3054\u3068\u306b\u3001\u5b89\u5168\u7b56\u3068\u5f37\u786c\u7b56\u306e\u3069\u3061\u3089\u304b\u3092\u5fc5\u305a\u9078\u3076\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\n\n\u5b89\u5168\u7b56\u306f\u300110%\u306e\u78ba\u7387\u3067\u30dc\u30ae\u30fc\u300180%\u306e\u78ba\u7387\u3067\u30d1\u30fc\u300110%\u306e\u78ba\u7387\u3067\u30d0\u30fc\u30c7\u30a3\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\u5f37\u786c\u7b56\u306f\u300130%\u306e\u78ba\u7387\u3067\u30dc\u30ae\u30fc\u300140%\u306e\u78ba\u7387\u3067\u30d1\u30fc\u300130%\u306e\u78ba\u7387\u3067\u30d0\u30fc\u30c7\u30a3\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\n\u7b56\u3054\u3068\u306e\u53ef\u80fd\u6027(%)\u3092\u8868\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\n\u5b89\u5168\u7b56\n\u5f37\u786c\u7b56\n\n\n\u76f8\uff3c\u81ea\n+1\n0\n-1\n\n\u76f8\uff3c\u81ea\n+1\n0\n-1\n\n\n+1\n2\n16\n2\n\n+1\n6\n8\n6\n\n\n0\n6\n48\n6\n\n+0\n18\n24\n18\n\n\n-1\n2\n16\n2\n\n-1\n6\n8\n6\n\n\n\u30b9\u30b3\u30a2\u5dee\u3067\u307f\u308b\u3068[-2, -1, 0, +1, +2]\u306e5\u901a\u308a\u3067\u3059\u3002\n\u90e8\u5206\u554f\u984c\u306f\u3001\u3053\u306e10\u901a\u308a(\u5b89\u5168\u7b565\u901a\u308a\uff0b\u5f37\u786c\u7b565\u901a\u308a)\u3092\u5834\u5408\u5206\u3051\u3057\u3066\u4f5c\u308a\u307e\u3059\u3002\n\npython\na0 = np.arange(-2, 3)\na1 = [0.02, 0.22, 0.52, 0.22, 0.02]\na2 = [0.06, 0.26, 0.36, 0.26, 0.06]\n@lru_cache(None)\ndef golf(rem, df):\n    \"\"\"\n    rem: \u6b8b\u308a\u30db\u30fc\u30eb\u6570\n    df: \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u5dee(\u8ca0\u304c\u52dd\u3061)\n    \u8fd4\u308a\u5024: \u5b89\u5168\u7b56\u3092\u53d6\u308b\u304b\u3069\u3046\u304b, \u5f97\u70b9\u671f\u5f85\u5024\n    \"\"\"\n    if rem == 1: # \u6700\u7d42\u30db\u30fc\u30eb\n        s1 = np.inner(a1, (a0+df)<0) - np.inner(a1, (a0+df)>0)\n        s2 = np.inner(a2, (a0+df)<0) - np.inner(a2, (a0+df)>0)\n    else:\n        a = [golf(rem-1, df+i)[1] for i in a0]\n        s1 = np.inner(a, a1)\n        s2 = np.inner(a, a2)\n    return s1 >= s2, max(s1, s2)\n\nrng = range(18,0,-1)\nplt.xlabel('\u6b8b\u308a\u30db\u30fc\u30eb\u6570')\nplt.ylabel('\u5f97\u70b9\u671f\u5f85\u5024')\nplt.plot(range(18), [golf(i, 0)[1] for i in rng]);\nplt.xticks(range(18), rng);\n\n\n\n\u6b8b\u308a\u30db\u30fc\u30eb\u6570\u304c\u591a\u3044\u307b\u3069\u3001\u81ea\u5206\u306e\u5f97\u70b9\u671f\u5f85\u5024\u304c\u9ad8\u3044\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u6709\u5229\u306a\u5834\u5408\u306f\u5b89\u5168\u7b56\u3001\u4e0d\u5229\u306a\u5834\u5408\u306f\u5f37\u786c\u7b56\u3092\u53d6\u308c\u308b\u305f\u3081\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\u4ee5\u4e0a\n# \u3084\u308b\u3053\u3068\n- \u52d5\u7684\u6700\u9069\u5316\u306e\u7c21\u5358\u306a\u78ba\u8a8d\n- \u30b4\u30eb\u30d5\u306e\u671f\u5f85\u5024\u306e\u8a08\u7b97\n\n## \u52d5\u7684\u6700\u9069\u5316\u306e\u7c21\u5358\u306a\u78ba\u8a8d\n### \u52d5\u7684\u6700\u9069\u5316\u3068\u306f\n- \u52d5\u7684\u6700\u9069\u5316(Dynamic Optimization)\u3068\u306f\u3001[\u52d5\u7684\u8a08\u753b\u6cd5](\u52d5\u7684\u8a08\u753b\u6cd5)(Dynamic Programming)\u306e\u6700\u8fd1\u306e\u3088\u3073\u65b9\u3067\u3059\u3002\n- \u90e8\u5206\u554f\u984c\u3092\u89e3\u304d\u3001\u305d\u306e\u7d50\u679c\u3092\u5229\u7528\u3057\u3066\u3001\u554f\u984c\u5168\u4f53\u3092\u89e3\u304d\u307e\u3059\u3002\u305d\u306e\u3068\u304d\u3001\u7e70\u8fd4\u3057 \u3042\u3089\u308f\u308c\u308b\u540c\u3058\u90e8\u5206\u554f\u984c\u306b\u5bfe\u3057\u3066\u3001\u7d50\u679c\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f7f\u3063\u3066\u52b9\u7387\u3088\u304f\u8a08\u7b97\u3057\u307e\u3059(\u30e1\u30e2\u5316)\u3002\n\n### \u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3067\u7c21\u5358\u306a\u78ba\u8a8d\n\nPython\u3067\u306f\u3001lru_cache\u3092\u4f7f\u3046\u3068\u7c21\u5358\u306b\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3067\u304d\u307e\u3059\u3002(\u5f15\u6570\u304c\u30cf\u30c3\u30b7\u30e5\u5316\u53ef\u80fd\u306a\u5834\u5408)\n\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3067\u52b9\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3:python\n%matplotlib inline\nimport numpy as np, matplotlib.pyplot as plt\nfrom functools import lru_cache\nplt.rcParams['font.family'] = 'IPAexGothic'\nplt.rcParams['font.size'] = 16\n\ncount = 0\nnp.random.seed(1)\n_size = np.random.randint(100, 200, 100)\n_weight = np.random.randint(100, 200, 100)\n\ndef make_sample(n):\n    size = tuple(_size[:n])\n    weight = tuple(_weight[:n])\n    capacity = sum(size) // 3 * 2\n    return size, weight, capacity\n\ndef knapsack1(size, weight, capacity):\n    if len(size) == 0 or capacity < min(size):\n        return 0\n    global count\n    count += 1\n    r = capacity - size[0]\n    if r < 0:\n        return knapsack1(size[1:], weight[1:], capacity)\n    else:\n        return max(weight[0] + knapsack1(size[1:], weight[1:], r),\n                    knapsack1(size[1:], weight[1:], capacity))\n\n@lru_cache(None)\ndef knapsack2(size, weight, capacity):\n    if len(size) == 0 or capacity < min(size):\n        return 0\n    global count\n    count += 1\n    r = capacity - size[0]\n    if r < 0:\n        return knapsack2(size[1:], weight[1:], capacity)\n    else:\n        return max(weight[0] + knapsack2(size[1:], weight[1:], r),\n                    knapsack2(size[1:], weight[1:], capacity))\n\ndef count_knapsack1(n):\n    global count\n    count = 0\n    knapsack1(*make_sample(n))\n    return count\n\ndef count_knapsack2(n):\n    global count\n    count = 0\n    knapsack2(*make_sample(n))\n    return count\n```\n\n\u3053\u3053\u3067\u306f\u3001\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3092\u6700\u521d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u9078\u3076\u304b\u9078\u3070\u306a\u3044\u304b\u3067\u90e8\u5206\u554f\u984c\u306b\u5206\u3051\u3066\u3001\u518d\u5e30\u7684\u306b\u89e3\u304d\u307e\u3059\u3002\n\n- count_knapsack1\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u306a\u3057\u306e\u547c\u51fa\u3057\u56de\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n- count_knapsack2\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u3042\u308a\u306e\u547c\u51fa\u3057\u56de\u6570\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n\u9055\u3044\u306f\u3001lru_cache\u306e\u6709\u7121\u3060\u3051\u3067\u3059\u3002\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3:python\nrng = [10, 12, 14, 16, 18, 20]\nres1 = [count_knapsack1(i) for i in rng]\nres2 = [count_knapsack2(i) for i in rng]\n\nplt.plot(rng, res1, label='\u30ad\u30e3\u30c3\u30b7\u30e5\u306a\u3057')\nplt.plot(rng, res2, label='\u30ad\u30e3\u30c3\u30b7\u30e5\u3042\u308a')\nplt.xlabel('\u30a2\u30a4\u30c6\u30e0\u6570')\nplt.ylabel('\u547c\u51fa\u3057\u56de\u6570')\nplt.yscale('log')\nplt.legend(loc='lower right');\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/7fcdccae-f066-f5df-230f-a6cd4b2034d7.png)\n\n\u7e26\u8ef8\u306f\u5bfe\u6570\u8ef8\u306a\u306e\u3067\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u3088\u308a\u3001\u304b\u306a\u308a\u9ad8\u901f\u5316\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\n## \u30b4\u30eb\u30d5\u306e\u671f\u5f85\u5024\u306e\u8a08\u7b97\n\u6b21\u306b\u3001\u7c21\u5358\u306a\u30b4\u30eb\u30d5\u306e\u554f\u984c\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n- \u81ea\u5206\u3068\u76f8\u624b\u306e2\u4eba\u306718\u30db\u30fc\u30eb\u306e\u30b9\u30b3\u30a2\u3092\u7af6\u3044\u307e\u3059\u3002\u52dd\u3066\u3070+1\u70b9\u3001\u8ca0\u3051\u308c\u3070\u20151\u70b9\u3001\u5f15\u304d\u5206\u3051\u306f0\u70b9\u3068\u3057\u307e\u3059\u3002\n- 18\u30db\u30fc\u30eb\u3067\u3059\u304c\u3001\u5168\u3066\u540c\u3058\u6761\u4ef6\u3068\u3057\u307e\u3059\u3002\n- \u76f8\u624b\u306f\u300120%\u306e\u78ba\u7387\u3067\u30dc\u30ae\u30fc\u300160%\u306e\u78ba\u7387\u3067\u30d1\u30fc\u300120%\u306e\u78ba\u7387\u3067\u30d0\u30fc\u30c7\u30a3\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n- \u81ea\u5206\u306f\u3001\u5404\u30db\u30fc\u30eb\u3054\u3068\u306b\u3001\u5b89\u5168\u7b56\u3068\u5f37\u786c\u7b56\u306e\u3069\u3061\u3089\u304b\u3092\u5fc5\u305a\u9078\u3076\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n    - \u5b89\u5168\u7b56\u306f\u300110%\u306e\u78ba\u7387\u3067\u30dc\u30ae\u30fc\u300180%\u306e\u78ba\u7387\u3067\u30d1\u30fc\u300110%\u306e\u78ba\u7387\u3067\u30d0\u30fc\u30c7\u30a3\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n    - \u5f37\u786c\u7b56\u306f\u300130%\u306e\u78ba\u7387\u3067\u30dc\u30ae\u30fc\u300140%\u306e\u78ba\u7387\u3067\u30d1\u30fc\u300130%\u306e\u78ba\u7387\u3067\u30d0\u30fc\u30c7\u30a3\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u7b56\u3054\u3068\u306e\u53ef\u80fd\u6027(%)\u3092\u8868\u306b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n<table>\n<tr><td colspan=\"5\">\u5b89\u5168\u7b56</td><td colspan=\"4\">\u5f37\u786c\u7b56</td></tr>\n<tr><td>\u76f8\uff3c\u81ea</td><td>+1</td><td>0</td><td>-1</td><td></td><td>\u76f8\uff3c\u81ea</td><td>+1</td><td>0</td><td>-1</td></tr>\n<tr><td>+1</td><td>2</td><td>16</td><td>2</td><td></td><td>+1</td><td>6</td><td>8</td><td>6</td></tr>\n<tr><td>0</td><td>6</td><td>48</td><td>6</td><td></td><td>+0</td><td>18</td><td>24</td><td>18</td></tr>\n<tr><td>-1</td><td>2</td><td>16</td><td>2</td><td></td><td>-1</td><td>6</td><td>8</td><td>6</td></tr>\n</table>\n\n\u30b9\u30b3\u30a2\u5dee\u3067\u307f\u308b\u3068[-2, -1, 0, +1, +2]\u306e5\u901a\u308a\u3067\u3059\u3002\n\u90e8\u5206\u554f\u984c\u306f\u3001\u3053\u306e10\u901a\u308a(\u5b89\u5168\u7b565\u901a\u308a\uff0b\u5f37\u786c\u7b565\u901a\u308a)\u3092\u5834\u5408\u5206\u3051\u3057\u3066\u4f5c\u308a\u307e\u3059\u3002\n\n```py3:python\na0 = np.arange(-2, 3)\na1 = [0.02, 0.22, 0.52, 0.22, 0.02]\na2 = [0.06, 0.26, 0.36, 0.26, 0.06]\n@lru_cache(None)\ndef golf(rem, df):\n    \"\"\"\n    rem: \u6b8b\u308a\u30db\u30fc\u30eb\u6570\n    df: \u73fe\u5728\u306e\u30b9\u30b3\u30a2\u5dee(\u8ca0\u304c\u52dd\u3061)\n    \u8fd4\u308a\u5024: \u5b89\u5168\u7b56\u3092\u53d6\u308b\u304b\u3069\u3046\u304b, \u5f97\u70b9\u671f\u5f85\u5024\n    \"\"\"\n    if rem == 1: # \u6700\u7d42\u30db\u30fc\u30eb\n        s1 = np.inner(a1, (a0+df)<0) - np.inner(a1, (a0+df)>0)\n        s2 = np.inner(a2, (a0+df)<0) - np.inner(a2, (a0+df)>0)\n    else:\n        a = [golf(rem-1, df+i)[1] for i in a0]\n        s1 = np.inner(a, a1)\n        s2 = np.inner(a, a2)\n    return s1 >= s2, max(s1, s2)\n\nrng = range(18,0,-1)\nplt.xlabel('\u6b8b\u308a\u30db\u30fc\u30eb\u6570')\nplt.ylabel('\u5f97\u70b9\u671f\u5f85\u5024')\nplt.plot(range(18), [golf(i, 0)[1] for i in rng]);\nplt.xticks(range(18), rng);\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/a420e9ff-f7b0-238e-cdc3-355cdc9f4021.png)\n\n\u6b8b\u308a\u30db\u30fc\u30eb\u6570\u304c\u591a\u3044\u307b\u3069\u3001\u81ea\u5206\u306e\u5f97\u70b9\u671f\u5f85\u5024\u304c\u9ad8\u3044\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u6709\u5229\u306a\u5834\u5408\u306f\u5b89\u5168\u7b56\u3001\u4e0d\u5229\u306a\u5834\u5408\u306f\u5f37\u786c\u7b56\u3092\u53d6\u308c\u308b\u305f\u3081\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u4ee5\u4e0a\n", "tags": ["\u7d44\u5408\u305b\u6700\u9069\u5316", "\u6700\u9069\u5316", "\u52d5\u7684\u6700\u9069\u5316", "Python", "\u6570\u5b66"]}