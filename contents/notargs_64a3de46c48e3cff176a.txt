{"context": "\n\n\u81ea\u5df1\u7d39\u4ecb\n\n\u306e\u305f\u3050\u3059(@notargs)\n- \u30b7\u30a7\u30fc\u30c0\u30fc\u66f8\u3044\u305f\u308aUI\u4f5c\u3063\u305f\u308a\u3057\u3066\u307e\u3059\n\nLGTM Shaders\n\n \n\n\u3088\u304f\u805e\u304f\u8a71\n\n\u300cMesh\u3063\u3066\u30c7\u30b6\u30a4\u30ca\u30fc\u304c\u5f04\u308b\u3082\u306e\u3067\u3057\u3087\uff1f\u300d\n\u300cMesh\u3063\u3066\u30b2\u30fc\u30e0\u30a8\u30f3\u30b8\u30f3\u306b\u4efb\u305b\u308b\u3082\u306e\u3067\u3057\u3087\uff1f\uff1f\u300d\n\u300cMesh\u3092\u52d5\u7684\u306b\u5207\u65ad\u3057\u305f\u3044\u3051\u3069\u5168\u7136\u30a4\u30e1\u30fc\u30b8\u3064\u304b\u306a\u3044\u300d\n\n\n\u4eca\u56de\u306e\u8a71\u306e\u6982\u8981\n\nMesh\u6016\u304f\u306a\u3044\u3088\uff01\uff01\nUnity\u306eMesh\u3092\u4f7f\u3044\u3053\u306a\u305b\u3070\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3067\u3082\u30e2\u30c7\u30ea\u30f3\u30b0\u3067\u304d\u308b\uff01\u3068\u3044\u3046\u8a71\n\n\n\n\u5185\u5bb9\n\nMesh\u306e\u5185\u90e8\u69cb\u9020\u306b\u3064\u3044\u3066\u89e3\u8aac\n\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089Mesh\u3092\u7d44\u307f\u7acb\u3066\u308b\u65b9\u6cd5\n\u5fdc\u7528\u4f8b\n\n\n\u3069\u3046\u3044\u3046\u3068\u304d\u306b\u5f79\u7acb\u3064\u306e\uff1f\n\n\u5e7e\u4f55\u5f62\u4f53\u306a\u3069\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u751f\u6210\u3057\u305f\u65b9\u304c\u65e9\u3044\u3068\u304d\n\u540c\u3058\u7269\u4f53\u3092\u7b49\u9593\u9694\u306b\u4e26\u3079\u305f\u3044\u3068\u304d\nSetPassCall\u524a\u6e1b\n\u30e2\u30c7\u30ea\u30f3\u30b0\u30c4\u30fc\u30eb\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u3068\u304d\n\n\n\u57fa\u790e\u7de8: Mesh\u304c\u6301\u3064\u60c5\u5831\n\nVertex(\u9802\u70b9\u4f4d\u7f6e)\n\n\u5404\u9802\u70b9\u306e\u4f4d\u7f6e\n\u5185\u90e8\u306f\u305f\u3060\u306eVector3\u578b\u306e\u914d\u5217\n\n\n\nNormal(\u6cd5\u7dda)\n\n\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u306e\u9762\u306e\u5411\u304d\n\u30e9\u30a4\u30c6\u30a3\u30f3\u30b0\u3084\u885d\u7a81\u5224\u5b9a\u306a\u3069\u306b\u6d3b\u7528\u3055\u308c\u308b\nVertex\u3068\u540c\u3058\u9577\u3055\u306eVector3\u578b\u914d\u5217\n\n\n\nTangent(\u63a5\u7dda) \uff06 Binormal(\u5f93\u6cd5\u7dda)\n\n\u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u306eNormal\u306b\u5bfe\u3057\u3066\u76f4\u4ea4\u306a\u30d9\u30af\u30c8\u30eb\n\u30e9\u30a4\u30c6\u30a3\u30f3\u30b0\u6642\u306bNormal\u3092\u88dc\u52a9\u3059\u308b\u5f62\u3067\u4f7f\u308f\u308c\u308b\n\u6cd5\u7dda\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5f35\u308b\u3068\u304d\u306a\u3069\u306b\u5fc5\u9808\n\n\n\n\nUV1 ~ UV4(\u30c6\u30af\u30b9\u30c1\u30e3\u5ea7\u6a19)\n\n\u9802\u70b9\u3054\u3068\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u4f4d\u7f6e\n1\u3064\u306e\u9802\u70b9\u306b\u3064\u304d4\u500b\u307e\u3067\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\n2\u500b\u76ee\u4ee5\u964d\u306f\u8907\u6570\u679a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u91cd\u306d\u305f\u3044\u6642\u306a\u3069\u306b\u6d3b\u7528\n\n\n\nColor(\u9802\u70b9\u30ab\u30e9\u30fc)\n\n\u9802\u70b9\u3054\u3068\u306e\u8272\u60c5\u5831\nStandard\u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u306f\u51fa\u529b\u3055\u308c\u306a\u3044\u70b9\u306f\u6ce8\u610f\n\u4e0b\u306e\u753b\u50cf\u306fSprite\u30b7\u30a7\u30fc\u30c0\u30fc\n\n\n\nIndex(\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9)\n\n\u30dd\u30ea\u30b4\u30f3\u3092\u5b9a\u7fa9\u3059\u308b\n\u914d\u5217\u4e0a\u3067\u306e\u9802\u70b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30923\u3064\u305a\u3064\u4e26\u3079\u3066\u6307\u5b9a\n\u6642\u8a08\u56de\u308aor\u53cd\u6642\u8a08\u56de\u308a\u3067\u30dd\u30ea\u30b4\u30f3\u306e\u88cfor\u8868\u304c\u6c7a\u307e\u308b\n\n\n\nBounds(\u9818\u57df)\n\nMesh\u5168\u4f53\u3092\u8986\u3046\u9577\u65b9\u5f62\n\u30ab\u30e1\u30e9\u304b\u3089\u898b\u305f\u5185\u5916\u5224\u5b9a\u306a\u3069\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\n\n\n\n\u5fdc\u7528\u7de81: Quad\u3092\u81ea\u4f5c\u3057\u3066\u307f\u308b\n\n4\u3064\u306e\u9802\u70b9\u3092\u5b9a\u7fa9\n2\u3064\u306e\u30dd\u30ea\u30b4\u30f3\u3092\u5b9a\u7fa9\n\n\n\nMeshCreator.cs\nvoid Start()\n{\n    // Mesh\u3092\u4f5c\u6210\n    var mesh = new Mesh();\n\n    // \u9802\u70b9\u3092\u8a2d\u5b9a\n    mesh.vertices = (\n        from y in new[] {-1, 1}\n        from x in new[] {-1, 1}\n        select new Vector3(x, y, 0)).ToArray();\n\n    // \u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8a2d\u5b9a\n    mesh.triangles = new[] {0, 1, 2, 2, 1, 3};\n\n    // \u9818\u57df\u3068\u6cd5\u7dda\u3092\u81ea\u52d5\u3067\u518d\u8a08\u7b97\u3059\u308b\n    mesh.RecalculateBounds();\n    mesh.RecalculateNormals();\n\n    // MeshFilter\u306b\u8a2d\u5b9a\n    GetComponent<MeshFilter>().mesh = mesh;\n}\n\n\n\nMeshFilter\u3068MeshRenderer\u3092\u6301\u3063\u305fGameObject\u3092\u4f5c\u3063\u3066\u5148\u307b\u3069\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u30a2\u30bf\u30c3\u30c1\n\n\n\u5b9f\u884c\u3059\u308b\u3068Quad\u304c\u8868\u793a\u3055\u308c\u308b\n\n\n\u5927\u91cf\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u3067\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306b\u3082\n\n\n\u5fdc\u7528\u7de82: \u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3\u3092\u81ea\u4f5c\u3057\u3066\u307f\u308b\n\n\u30da\u30f3\u306e\u8a2d\u8a08\n\n\n\u30da\u30f3\u306e\u5b9f\u88c5\nvoid Pen(Matrix4x4 world)\n{\n    var indexOffset = vertices.Count;\n\n    const int ySize = 11;\n    const int xSize = 6;\n    vertices.AddRange(\n        from y in Enumerable.Range(0, ySize)\n        from x in Enumerable.Range(0, xSize)\n        from y2 in new[] { -0.5f, 0.5f }.Select(v => v + y - ySize / 2.0f)\n        from x2 in new[] { -0.5f, 0.5f }.Select(v => v + x - xSize / 2.0f)\n        select world.MultiplyPoint(Quaternion.AngleAxis(x2 / xSize * 360.0f, Vector3.up) * Vector3.forward\n        * Mathf.Clamp01(y2 + ySize / 2) * 0.05f + Vector3.up * y2 / ySize * 2.0f)\n    );\n\n    colors.AddRange(Enumerable.Range(0, vertices.Count - indexOffset).Select(_ => new Color(0.2f, 0.1f, 0.1f)));\n\n    foreach (var x in Enumerable.Range(0, (vertices.Count - indexOffset) / 4))\n    {\n        triangles.AddRange(new []\n        {\n            0, 1, 2,\n            2, 1, 3,\n        }.Select(i => indexOffset + x * 4 + i));\n    }\n}\n\n\n\n\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u306e\u8a2d\u8a08\n\n\n\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u306e\u8449\u3063\u3071\u306e\u5b9f\u88c5\nvoid PineappleGlass(Matrix4x4 world)\n{\n    var indexOffset = vertices.Count;\n\n    const int ySize = 7;\n    const int xSize = 4;\n    vertices.AddRange(\n        from y in Enumerable.Range(0, ySize)\n        from x in Enumerable.Range(0, xSize)\n        from y2 in new[] { 0, 1 }.Select(v => v + y)\n        from x2 in new[] { 0, 1 }.Select(v => v + x - xSize / 2.0f)\n        from vec in new [] { Quaternion.AngleAxis(x2 / xSize * 360.0f + 45, Vector3.up) * new Vector3(0, y2, 1) }\n        select world.MultiplyPoint(new Vector3(vec.x * (1 - vec.y / ySize), vec.y * 0.5f, vec.z * 0.3f + Mathf.Pow(vec.y / ySize * 2.0f, 2.0f)))\n    );\n\n    colors.AddRange(Enumerable.Range(0, vertices.Count - indexOffset).Select(_ => new Color(0.2f, 0.6f, 0.2f)));\n\n    foreach (var x in Enumerable.Range(0, (vertices.Count - indexOffset) / 4))\n    {\n        triangles.AddRange(new[]\n        {\n            0, 1, 2,\n            2, 1, 3,\n        }.Select(i => indexOffset + x * 4 + i));\n    }\n}\n\n\n\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u306e\u5b9f\u88c5\nvoid Pineapple(Matrix4x4 world)\n{\n    var indexOffset = vertices.Count;\n\n    const int ySize = 11;\n    const int xSize = 20;\n    vertices.AddRange(\n        from y in Enumerable.Range(0, ySize)\n        from x in Enumerable.Range(0, xSize)\n        from y2 in new[] { 0, 1 }.Select(v => v + y - ySize / 2.0f)\n        from x2 in new[] { 0, 1 }.Select(v => v + x - xSize / 2.0f)\n        select world.MultiplyPoint(Quaternion.AngleAxis(x2 / xSize * 360.0f, Vector3.up)\n        * new Vector3(0, Mathf.Sin(y2 / ySize * Mathf.PI) * 1.3f, Mathf.Cos(y2 / ySize * Mathf.PI)) * Mathf.Cos(y2 * 0.1f))\n    );\n\n    colors.AddRange(Enumerable.Range(0, vertices.Count - indexOffset).Select(_ => new Color(0.6f, 0.6f, 0.2f)));\n\n    foreach (var x in Enumerable.Range(0, (vertices.Count - indexOffset) / 4))\n    {\n        triangles.AddRange(new []\n        {\n            0, 1, 2,\n            2, 1, 3,\n        }.Select(i => indexOffset + x * 4 + i));\n    }\n\n    for (var i = 0; i < 30; ++i)\n    {\n        PineappleGlass(world * Matrix4x4.TRS(Vector3.up * (1 + Random.Range(0.0f, 1.0f)), Quaternion.AngleAxis(Random.Range(0, 360), Vector3.up), Vector3.one * 0.3f));\n    }\n}\n\n\n\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\n\n\n\u30a2\u30c3\u30d7\u30eb\u306e\u8a2d\u8a08\n\n\n\u30a2\u30c3\u30d7\u30eb\u306e\u8a66\u4f5c\n\u9020\u5f62\u304c\u96e3\u3057\u3044\u306e\u3067GLSL Sandbox\u3067\u8a66\u4f5c\n\n\n\u30a2\u30c3\u30d7\u30eb\u306e\u5b9f\u88c5\n\nstatic Vector3 ProtApple(float t)\n{\n    t += 0.5f;\n    var p = new Vector2(Mathf.Sin(t * Mathf.PI), Mathf.Cos(t * Mathf.PI)) * 0.3f * (Mathf.Pow(t, 0.8f) * Mathf.Pow(1.0f - t, 0.1f) + 0.3f);\n    if (t < 0.02f)\n    {\n        p.y = 0.2f;\n    }\n    return p;\n}\n\nvoid Apple(Matrix4x4 world)\n{\n    var indexOffset = vertices.Count;\n\n    const int ySize = 80;\n    const int xSize = 30;\n    vertices.AddRange(\n        from y in Enumerable.Range(0, ySize)\n        from x in Enumerable.Range(0, xSize)\n        from y2 in new[] { 0, 1 }.Select(v => v + y - ySize / 2.0f)\n        from x2 in new[] { 0, 1 }.Select(v => v + x - xSize / 2.0f)\n        select world.MultiplyPoint(Quaternion.AngleAxis(x2 / xSize * 360.0f, Vector3.up) * ProtApple(y2 / ySize))\n    );\n\n    colors.AddRange(Enumerable.Range(0, vertices.Count - indexOffset).Select(_ => new Color(0.5f, 0.1f, 0.1f)));\n\n    foreach (var x in Enumerable.Range(0, (vertices.Count - indexOffset) / 4))\n    {\n        triangles.AddRange(new[]\n        {\n            0, 2, 1,\n            1, 2, 3,\n        }.Select(i => indexOffset + x * 4 + i));\n    }\n}\n\n\n\u30a2\u30c3\u30d7\u30eb\u306e\u52d5\u4f5c\n\n\n\u5168\u3066\u3092\u7d50\u5408\u3057\u3066\u30e1\u30c3\u30b7\u30e5\u3092\u4f5c\u6210\nMesh mesh;\n\nList<Vector3> vertices;\nList<Color> colors;\nList<int> triangles;\n\nvoid Start ()\n{\n    mesh = new Mesh();\n\n    vertices = new List<Vector3>();\n    colors = new List<Color>();\n    triangles = new List<int>();\n\n    Pen(Matrix4x4.TRS(new Vector3(-1.75f, 0, 0), Quaternion.AngleAxis(90, Vector3.forward), Vector3.one * 0.7f));\n    Pineapple(Matrix4x4.TRS(new Vector3(-0.5f, 0, 0), Quaternion.identity, Vector3.one * 0.7f));\n    Apple(Matrix4x4.TRS(new Vector3(0.5f, 0, 0), Quaternion.identity, Vector3.one * 1.3f));\n    Pen(Matrix4x4.TRS(new Vector3(1.35f, 0, 0), Quaternion.AngleAxis(-90, Vector3.forward), Vector3.one * 0.7f));\n\n    mesh.SetVertices(vertices);\n    mesh.SetTriangles(triangles, 0);\n    mesh.SetColors(colors);\n    mesh.RecalculateNormals();\n    mesh.RecalculateBounds();\n\n    GetComponent<MeshFilter>().mesh = mesh;\n}\n\n\n\u52d5\u4f5c\n\n\n\n\u4e00\u3064\u306e\u30e1\u30c3\u30b7\u30e5\u306a\u306e\u3067SetPassCall\u3082\u5c11\u306a\u3044\uff01\n\n\n\u81ea\u524d\u3067\u30e1\u30c3\u30b7\u30e5\u3092\u4f5c\u3063\u3066\u308b\u306e\u3067\u3001\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u81ea\u7531\u5ea6\u3082\u9ad8\u3044\uff01\n\n\n\u7d50\u8ad6\n\n\nMaya\u3067\u4f5c\u3063\u305f\u65b9\u304c\u65e9\u3044  \n\u30b7\u30a7\u30fc\u30c0\u30fc\u6cbc\u306f\u3044\u3044\u305e\uff01\uff01\n\n# \u81ea\u5df1\u7d39\u4ecb\n![cat2.png](https://qiita-image-store.s3.amazonaws.com/0/52576/904d522d-09f7-8c67-6796-25af57f10fc7.png)\n\n\u306e\u305f\u3050\u3059(@notargs)\n- \u30b7\u30a7\u30fc\u30c0\u30fc\u66f8\u3044\u305f\u308aUI\u4f5c\u3063\u305f\u308a\u3057\u3066\u307e\u3059\n\n## LGTM Shaders\n![LGTM](https://github.com/notargs/LGTM-Shaders/raw/master/Shader010.gif)\n![LGTM](https://github.com/notargs/LGTM-Shaders/raw/master/Shader009.gif) \n\n\n# \u3088\u304f\u805e\u304f\u8a71\n- \u300cMesh\u3063\u3066\u30c7\u30b6\u30a4\u30ca\u30fc\u304c\u5f04\u308b\u3082\u306e\u3067\u3057\u3087\uff1f\u300d\n- \u300cMesh\u3063\u3066\u30b2\u30fc\u30e0\u30a8\u30f3\u30b8\u30f3\u306b\u4efb\u305b\u308b\u3082\u306e\u3067\u3057\u3087\uff1f\uff1f\u300d\n- \u300cMesh\u3092\u52d5\u7684\u306b\u5207\u65ad\u3057\u305f\u3044\u3051\u3069\u5168\u7136\u30a4\u30e1\u30fc\u30b8\u3064\u304b\u306a\u3044\u300d\n\n# \u4eca\u56de\u306e\u8a71\u306e\u6982\u8981\n- Mesh\u6016\u304f\u306a\u3044\u3088\uff01\uff01\n- Unity\u306eMesh\u3092\u4f7f\u3044\u3053\u306a\u305b\u3070**\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3067\u3082\u30e2\u30c7\u30ea\u30f3\u30b0\u3067\u304d\u308b\uff01**\u3068\u3044\u3046\u8a71\n\n![SnapCrab_NoName_2016-12-6_11-18-34_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/df794e07-1df9-e3bb-f47a-5f36507231fc.png)\n\n# \u5185\u5bb9\n- Mesh\u306e\u5185\u90e8\u69cb\u9020\u306b\u3064\u3044\u3066\u89e3\u8aac\n- \u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089Mesh\u3092\u7d44\u307f\u7acb\u3066\u308b\u65b9\u6cd5\n- \u5fdc\u7528\u4f8b\n\n# \u3069\u3046\u3044\u3046\u3068\u304d\u306b\u5f79\u7acb\u3064\u306e\uff1f\n- \u5e7e\u4f55\u5f62\u4f53\u306a\u3069\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u751f\u6210\u3057\u305f\u65b9\u304c\u65e9\u3044\u3068\u304d\n- \u540c\u3058\u7269\u4f53\u3092\u7b49\u9593\u9694\u306b\u4e26\u3079\u305f\u3044\u3068\u304d\n- SetPassCall\u524a\u6e1b\n- \u30e2\u30c7\u30ea\u30f3\u30b0\u30c4\u30fc\u30eb\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u3068\u304d\n\n# \u57fa\u790e\u7de8: Mesh\u304c\u6301\u3064\u60c5\u5831\n\n## Vertex(\u9802\u70b9\u4f4d\u7f6e)\n- \u5404\u9802\u70b9\u306e\u4f4d\u7f6e\n- \u5185\u90e8\u306f\u305f\u3060\u306eVector3\u578b\u306e\u914d\u5217\n\n![temp.png](https://qiita-image-store.s3.amazonaws.com/0/52576/44b0325d-b613-acc1-e652-01342f2345aa.png)\n\n## Normal(\u6cd5\u7dda)\n- \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u306e\u9762\u306e\u5411\u304d\n- \u30e9\u30a4\u30c6\u30a3\u30f3\u30b0\u3084\u885d\u7a81\u5224\u5b9a\u306a\u3069\u306b\u6d3b\u7528\u3055\u308c\u308b\n- Vertex\u3068\u540c\u3058\u9577\u3055\u306eVector3\u578b\u914d\u5217\n\n![temp.png](https://qiita-image-store.s3.amazonaws.com/0/52576/c40061cc-da62-55cc-99c5-d70c86ac102c.png)\n\n## Tangent(\u63a5\u7dda) \uff06 Binormal(\u5f93\u6cd5\u7dda)\n- \u5404\u9802\u70b9\u306b\u3064\u3044\u3066\u306eNormal\u306b\u5bfe\u3057\u3066\u76f4\u4ea4\u306a\u30d9\u30af\u30c8\u30eb\n- \u30e9\u30a4\u30c6\u30a3\u30f3\u30b0\u6642\u306bNormal\u3092\u88dc\u52a9\u3059\u308b\u5f62\u3067\u4f7f\u308f\u308c\u308b\n- \u6cd5\u7dda\u30de\u30c3\u30d7\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u5f35\u308b\u3068\u304d\u306a\u3069\u306b\u5fc5\u9808\n\n![temp.png](https://qiita-image-store.s3.amazonaws.com/0/52576/b7ed6e69-cba6-4ca3-54b1-8dc5d8094c39.png)\n\n---\n\n## UV1 ~ UV4(\u30c6\u30af\u30b9\u30c1\u30e3\u5ea7\u6a19)\n- \u9802\u70b9\u3054\u3068\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u4f4d\u7f6e\n- 1\u3064\u306e\u9802\u70b9\u306b\u3064\u304d4\u500b\u307e\u3067\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\n- 2\u500b\u76ee\u4ee5\u964d\u306f\u8907\u6570\u679a\u306e\u30c6\u30af\u30b9\u30c1\u30e3\u3092\u91cd\u306d\u305f\u3044\u6642\u306a\u3069\u306b\u6d3b\u7528\n\n![SnapCrab_NoName_2016-12-6_10-49-16_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/54991ea3-2447-ee5f-f615-28b52017af7c.png)\n\n## Color(\u9802\u70b9\u30ab\u30e9\u30fc)\n- \u9802\u70b9\u3054\u3068\u306e\u8272\u60c5\u5831\n- Standard\u30b7\u30a7\u30fc\u30c0\u30fc\u3067\u306f\u51fa\u529b\u3055\u308c\u306a\u3044\u70b9\u306f\u6ce8\u610f\n- \u4e0b\u306e\u753b\u50cf\u306fSprite\u30b7\u30a7\u30fc\u30c0\u30fc\n\n![SnapCrab_NoName_2016-12-6_10-56-51_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/12534adb-3097-242c-dc63-0c4d11ffae4c.png)\n\n## Index(\u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9)\n- \u30dd\u30ea\u30b4\u30f3\u3092\u5b9a\u7fa9\u3059\u308b\n- \u914d\u5217\u4e0a\u3067\u306e\u9802\u70b9\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30923\u3064\u305a\u3064\u4e26\u3079\u3066\u6307\u5b9a\n- \u6642\u8a08\u56de\u308aor\u53cd\u6642\u8a08\u56de\u308a\u3067\u30dd\u30ea\u30b4\u30f3\u306e\u88cfor\u8868\u304c\u6c7a\u307e\u308b\n\n![\u7121\u984c.png](https://qiita-image-store.s3.amazonaws.com/0/52576/3430b18f-d000-d87a-c685-46432410126d.png)\n\n## Bounds(\u9818\u57df)\n- Mesh\u5168\u4f53\u3092\u8986\u3046\u9577\u65b9\u5f62\n- \u30ab\u30e1\u30e9\u304b\u3089\u898b\u305f\u5185\u5916\u5224\u5b9a\u306a\u3069\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\n\n![SnapCrab_NoName_2016-12-6_11-18-34_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/df794e07-1df9-e3bb-f47a-5f36507231fc.png)\n\n# \u5fdc\u7528\u7de81: Quad\u3092\u81ea\u4f5c\u3057\u3066\u307f\u308b\n\n- 4\u3064\u306e\u9802\u70b9\u3092\u5b9a\u7fa9\n- 2\u3064\u306e\u30dd\u30ea\u30b4\u30f3\u3092\u5b9a\u7fa9\n\n![\u7121\u984c.png](https://qiita-image-store.s3.amazonaws.com/0/52576/3430b18f-d000-d87a-c685-46432410126d.png)\n\n```MeshCreator.cs\nvoid Start()\n{\n    // Mesh\u3092\u4f5c\u6210\n    var mesh = new Mesh();\n\n    // \u9802\u70b9\u3092\u8a2d\u5b9a\n    mesh.vertices = (\n        from y in new[] {-1, 1}\n        from x in new[] {-1, 1}\n        select new Vector3(x, y, 0)).ToArray();\n\n    // \u9802\u70b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8a2d\u5b9a\n    mesh.triangles = new[] {0, 1, 2, 2, 1, 3};\n\n    // \u9818\u57df\u3068\u6cd5\u7dda\u3092\u81ea\u52d5\u3067\u518d\u8a08\u7b97\u3059\u308b\n    mesh.RecalculateBounds();\n    mesh.RecalculateNormals();\n\n    // MeshFilter\u306b\u8a2d\u5b9a\n    GetComponent<MeshFilter>().mesh = mesh;\n}\n```\n\n## MeshFilter\u3068MeshRenderer\u3092\u6301\u3063\u305fGameObject\u3092\u4f5c\u3063\u3066\u5148\u307b\u3069\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u30a2\u30bf\u30c3\u30c1\n\n![SnapCrab_NoName_2016-12-6_11-23-11_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/0b026c7e-fe8d-3edb-3107-3ff77ca15636.png)\n\n## \u5b9f\u884c\u3059\u308b\u3068Quad\u304c\u8868\u793a\u3055\u308c\u308b\n\n![SnapCrab_NoName_2016-12-6_11-24-12_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/b9aad530-15c0-f878-a08d-97bd1693ddc3.png)\n\n## \u5927\u91cf\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u3067\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306b\u3082\n![\u7121\u984c7.png](https://qiita-image-store.s3.amazonaws.com/0/52576/ed778087-08ed-830f-dbf8-e88b62d641e2.png)\n\n# \u5fdc\u7528\u7de82: \u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3\u3092\u81ea\u4f5c\u3057\u3066\u307f\u308b\n\n## \u30da\u30f3\u306e\u8a2d\u8a08\n\n![pen.jpeg](https://qiita-image-store.s3.amazonaws.com/0/52576/66e74d16-55bb-2493-b866-9447cb68474c.jpeg)\n\n## \u30da\u30f3\u306e\u5b9f\u88c5\n```c#\nvoid Pen(Matrix4x4 world)\n{\n    var indexOffset = vertices.Count;\n\n    const int ySize = 11;\n    const int xSize = 6;\n    vertices.AddRange(\n        from y in Enumerable.Range(0, ySize)\n        from x in Enumerable.Range(0, xSize)\n        from y2 in new[] { -0.5f, 0.5f }.Select(v => v + y - ySize / 2.0f)\n        from x2 in new[] { -0.5f, 0.5f }.Select(v => v + x - xSize / 2.0f)\n        select world.MultiplyPoint(Quaternion.AngleAxis(x2 / xSize * 360.0f, Vector3.up) * Vector3.forward\n        * Mathf.Clamp01(y2 + ySize / 2) * 0.05f + Vector3.up * y2 / ySize * 2.0f)\n    );\n\n    colors.AddRange(Enumerable.Range(0, vertices.Count - indexOffset).Select(_ => new Color(0.2f, 0.1f, 0.1f)));\n\n    foreach (var x in Enumerable.Range(0, (vertices.Count - indexOffset) / 4))\n    {\n        triangles.AddRange(new []\n        {\n            0, 1, 2,\n            2, 1, 3,\n        }.Select(i => indexOffset + x * 4 + i));\n    }\n}\n```\n![SnapCrab_NoName_2016-12-9_19-43-49_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/039c166f-44d3-8697-9f55-50782ab7e5cc.png)\n\n## \u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u306e\u8a2d\u8a08\n\n![pineapple.jpeg](https://qiita-image-store.s3.amazonaws.com/0/52576/9d690f5f-ae46-64ff-34f8-4ae508d796ba.jpeg)\n\n## \u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u306e\u8449\u3063\u3071\u306e\u5b9f\u88c5\n```c#\nvoid PineappleGlass(Matrix4x4 world)\n{\n    var indexOffset = vertices.Count;\n\n    const int ySize = 7;\n    const int xSize = 4;\n    vertices.AddRange(\n        from y in Enumerable.Range(0, ySize)\n        from x in Enumerable.Range(0, xSize)\n        from y2 in new[] { 0, 1 }.Select(v => v + y)\n        from x2 in new[] { 0, 1 }.Select(v => v + x - xSize / 2.0f)\n        from vec in new [] { Quaternion.AngleAxis(x2 / xSize * 360.0f + 45, Vector3.up) * new Vector3(0, y2, 1) }\n        select world.MultiplyPoint(new Vector3(vec.x * (1 - vec.y / ySize), vec.y * 0.5f, vec.z * 0.3f + Mathf.Pow(vec.y / ySize * 2.0f, 2.0f)))\n    );\n\n    colors.AddRange(Enumerable.Range(0, vertices.Count - indexOffset).Select(_ => new Color(0.2f, 0.6f, 0.2f)));\n\n    foreach (var x in Enumerable.Range(0, (vertices.Count - indexOffset) / 4))\n    {\n        triangles.AddRange(new[]\n        {\n            0, 1, 2,\n            2, 1, 3,\n        }.Select(i => indexOffset + x * 4 + i));\n    }\n}\n```\n## \u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u306e\u5b9f\u88c5\n\n```c#\nvoid Pineapple(Matrix4x4 world)\n{\n    var indexOffset = vertices.Count;\n\n    const int ySize = 11;\n    const int xSize = 20;\n    vertices.AddRange(\n        from y in Enumerable.Range(0, ySize)\n        from x in Enumerable.Range(0, xSize)\n        from y2 in new[] { 0, 1 }.Select(v => v + y - ySize / 2.0f)\n        from x2 in new[] { 0, 1 }.Select(v => v + x - xSize / 2.0f)\n        select world.MultiplyPoint(Quaternion.AngleAxis(x2 / xSize * 360.0f, Vector3.up)\n        * new Vector3(0, Mathf.Sin(y2 / ySize * Mathf.PI) * 1.3f, Mathf.Cos(y2 / ySize * Mathf.PI)) * Mathf.Cos(y2 * 0.1f))\n    );\n\n    colors.AddRange(Enumerable.Range(0, vertices.Count - indexOffset).Select(_ => new Color(0.6f, 0.6f, 0.2f)));\n\n    foreach (var x in Enumerable.Range(0, (vertices.Count - indexOffset) / 4))\n    {\n        triangles.AddRange(new []\n        {\n            0, 1, 2,\n            2, 1, 3,\n        }.Select(i => indexOffset + x * 4 + i));\n    }\n\n    for (var i = 0; i < 30; ++i)\n    {\n        PineappleGlass(world * Matrix4x4.TRS(Vector3.up * (1 + Random.Range(0.0f, 1.0f)), Quaternion.AngleAxis(Random.Range(0, 360), Vector3.up), Vector3.one * 0.3f));\n    }\n}\n```\n## \u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\n![SnapCrab_NoName_2016-12-10_14-3-18_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/e9b37348-1e2b-573d-7572-4eade2a6cb4b.png)\n\n## \u30a2\u30c3\u30d7\u30eb\u306e\u8a2d\u8a08\n\n![apple.jpeg](https://qiita-image-store.s3.amazonaws.com/0/52576/85504f11-8218-4b78-0349-04d480ca3ecf.jpeg)\n\n## \u30a2\u30c3\u30d7\u30eb\u306e\u8a66\u4f5c\n\u9020\u5f62\u304c\u96e3\u3057\u3044\u306e\u3067GLSL Sandbox\u3067\u8a66\u4f5c\n![SnapCrab_NoName_2016-12-9_8-53-37_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/9613ba27-e22f-5e74-3ff1-cbc0a7a67eb7.png)\n\n## \u30a2\u30c3\u30d7\u30eb\u306e\u5b9f\u88c5\n\n```c#\n\nstatic Vector3 ProtApple(float t)\n{\n    t += 0.5f;\n    var p = new Vector2(Mathf.Sin(t * Mathf.PI), Mathf.Cos(t * Mathf.PI)) * 0.3f * (Mathf.Pow(t, 0.8f) * Mathf.Pow(1.0f - t, 0.1f) + 0.3f);\n    if (t < 0.02f)\n    {\n        p.y = 0.2f;\n    }\n    return p;\n}\n\nvoid Apple(Matrix4x4 world)\n{\n    var indexOffset = vertices.Count;\n        \n    const int ySize = 80;\n    const int xSize = 30;\n    vertices.AddRange(\n        from y in Enumerable.Range(0, ySize)\n        from x in Enumerable.Range(0, xSize)\n        from y2 in new[] { 0, 1 }.Select(v => v + y - ySize / 2.0f)\n        from x2 in new[] { 0, 1 }.Select(v => v + x - xSize / 2.0f)\n        select world.MultiplyPoint(Quaternion.AngleAxis(x2 / xSize * 360.0f, Vector3.up) * ProtApple(y2 / ySize))\n    );\n\n    colors.AddRange(Enumerable.Range(0, vertices.Count - indexOffset).Select(_ => new Color(0.5f, 0.1f, 0.1f)));\n\n    foreach (var x in Enumerable.Range(0, (vertices.Count - indexOffset) / 4))\n    {\n        triangles.AddRange(new[]\n        {\n            0, 2, 1,\n            1, 2, 3,\n        }.Select(i => indexOffset + x * 4 + i));\n    }\n}\n```\n\n## \u30a2\u30c3\u30d7\u30eb\u306e\u52d5\u4f5c\n\n![SnapCrab_NoName_2016-12-9_19-47-31_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/e7fe41f3-a822-5262-7ce2-dcfaf168a61a.png)\n\n# \u5168\u3066\u3092\u7d50\u5408\u3057\u3066\u30e1\u30c3\u30b7\u30e5\u3092\u4f5c\u6210\n\n```c#\nMesh mesh;\n\nList<Vector3> vertices;\nList<Color> colors;\nList<int> triangles;\n\nvoid Start ()\n{\n\tmesh = new Mesh();\n\n    vertices = new List<Vector3>();\n    colors = new List<Color>();\n    triangles = new List<int>();\n\n    Pen(Matrix4x4.TRS(new Vector3(-1.75f, 0, 0), Quaternion.AngleAxis(90, Vector3.forward), Vector3.one * 0.7f));\n    Pineapple(Matrix4x4.TRS(new Vector3(-0.5f, 0, 0), Quaternion.identity, Vector3.one * 0.7f));\n    Apple(Matrix4x4.TRS(new Vector3(0.5f, 0, 0), Quaternion.identity, Vector3.one * 1.3f));\n    Pen(Matrix4x4.TRS(new Vector3(1.35f, 0, 0), Quaternion.AngleAxis(-90, Vector3.forward), Vector3.one * 0.7f));\n\n    mesh.SetVertices(vertices);\n    mesh.SetTriangles(triangles, 0);\n    mesh.SetColors(colors);\n    mesh.RecalculateNormals();\n    mesh.RecalculateBounds();\n\n    GetComponent<MeshFilter>().mesh = mesh;\n}\n```\n\n# \u52d5\u4f5c\n![SnapCrab_NoName_2016-12-9_19-40-58_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/6968d539-1d44-d404-f5ad-25336da93f73.png)\n![glsl.gif](https://qiita-image-store.s3.amazonaws.com/0/52576/73bfb86a-83a0-65e6-5838-61416a5e7c16.gif)\n\n##\u4e00\u3064\u306e\u30e1\u30c3\u30b7\u30e5\u306a\u306e\u3067SetPassCall\u3082\u5c11\u306a\u3044\uff01\n\n![SnapCrab_NoName_2016-12-9_19-41-46_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/52576/e2e47c98-c6ac-d585-9f6a-ebdd64006d40.png)\n\n## \u81ea\u524d\u3067\u30e1\u30c3\u30b7\u30e5\u3092\u4f5c\u3063\u3066\u308b\u306e\u3067\u3001\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u81ea\u7531\u5ea6\u3082\u9ad8\u3044\uff01\n![glsl2.gif](https://qiita-image-store.s3.amazonaws.com/0/52576/6ef75d0f-1716-6bc1-716e-6e00ea33e7dc.gif)\n\n\n\n# \u7d50\u8ad6\n\n- **Maya\u3067\u4f5c\u3063\u305f\u65b9\u304c\u65e9\u3044** :innocent: \n- \u30b7\u30a7\u30fc\u30c0\u30fc\u6cbc\u306f\u3044\u3044\u305e\uff01\uff01\n", "tags": ["Unity", "PPAP", "\u30da\u30f3\u30d1\u30a4\u30ca\u30c3\u30dd\u30fc\u30a2\u30c3\u30dd\u30fc\u30da\u30f3", "Mesh", "\u30d1\u30fc\u30c6\u30a3\u30af\u30eb"]}