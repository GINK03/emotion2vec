{"context": "\n\n \u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u300c\u30c7\u30fc\u30bf\u524d\u51e6\u7406\u7de8\u300d\u304b\u3089\u6642\u9593\u304c\u7a7a\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306fTwitter\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n 3\u884c\u3067\u307e\u3068\u3081\n\n\uff08\u3084\u3063\u3068\uff09\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3002\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3092matplotlib\u3067\u53ef\u8996\u5316\u3057\u305f\u3002\n\u6b21\u56de\u306f\u8107\u9053\u3067\u53ef\u8996\u5316\u306e\u5c0f\u6280\u7d39\u4ecb\u306b\u306a\u308b\u304b\u3082\u3002\n\n\n \u3044\u304d\u306a\u308a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\uff08\u53ef\u8996\u5316\u4ee5\u5916\uff09\n\u524d\u56de\u306e\u300c\u30d9\u30af\u30c8\u30e9\u30a4\u30ba\u300d\u306e\u5b9f\u88c5\u306b\u300c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u300d\u300c\u6b21\u5143\u5727\u7e2e\u300d\u306e\u5b9f\u88c5\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\u3002\uff08\u300c\u53ef\u8996\u5316\u300d\u306e\u30bd\u30fc\u30b9\u306f\u3061\u3087\u3063\u3068\u9577\u3044\u306e\u3067\u5f8c\u3067\uff09\n\ntw_ml.py(\u629c\u7c8b)\n#! /usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport MeCab as mc\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import TruncatedSVD\n\nMECAB_OPT = \"-Ochasen -d C:\\\\tmp\\\\mecab-ipadic-neologd\\\\\"\n\nNUM_CLUSTER = 3\nSAMPLE_DATA = [\n    # \u524d\u56de\u3068\u540c\u3058\u306a\u306e\u3067\u7701\u7565\n]\n\ndef mecab_tokenizer(text):\n    # \u524d\u56de\u3068\u540c\u3058\u306a\u306e\u3067\u7701\u7565\n\ndef main():\n\n    # \u30d9\u30af\u30c8\u30e9\u30a4\u30b6\u30af\u30e9\u30b9\u521d\u671f\u5316\uff08\u524d\u56de\u3068\u540c\u3058\uff09\n    vectorizer = TfidfVectorizer(\n        min_df=1, stop_words=[u\"Perfume\", u\"HTTPS\"],\n        tokenizer=mecab_tokenizer)\n    # \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u30d9\u30af\u30c8\u30eb\u5316\uff08\u524d\u56de\u3068\u540c\u3058\uff09\n    tfidf_weighted_matrix = vectorizer.fit_transform(SAMPLE_DATA)\n\n    # K-Means\u306e\u30af\u30e9\u30b9\u30bf\u5206\u6790\u30af\u30e9\u30b9\u521d\u671f\u5316\n    km_model = KMeans(n_clusters=NUM_CLUSTER)\n    # \u30d9\u30af\u30c8\u30eb\u60c5\u5831\u3092\u98df\u308f\u305b\u3066\u3001\u30af\u30e9\u30b9\u30bf\u5206\u6790\u3092\u5b9f\u884c\n    km_model.fit(tfidf_weighted_matrix)\n\n    # \u6b21\u5143\u5727\u7e2e\uff08\u7279\u7570\u5024\u5206\u89e3\uff09\u30af\u30e9\u30b9\u521d\u671f\u5316\n    lsa = TruncatedSVD(2)\n    # \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3001\u53ca\u3073\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u70b9\u306e\u30d9\u30af\u30c8\u30eb\u60c5\u5831\u30922\u6b21\u5143\u306b\u5727\u7e2e\n    compressed_text_list = lsa.fit_transform(tfidf_weighted_matrix)\n    compressed_center_list = lsa.fit_transform(km_model.cluster_centers_)\n\nif __name__ == '__main__':\n    main()\n\n\n\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u304b\u3001\u3061\u3087\u3063\u3068\u305a\u3064\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n# K-Means\u306e\u30af\u30e9\u30b9\u30bf\u5206\u6790\u30af\u30e9\u30b9\u521d\u671f\u5316\nkm_model = KMeans(n_clusters=NUM_CLUSTER)\n# \u30d9\u30af\u30c8\u30eb\u60c5\u5831\u3092\u98df\u308f\u305b\u3066\u3001\u30af\u30e9\u30b9\u30bf\u5206\u6790\u3092\u5b9f\u884c\nkm_model.fit(tfidf_weighted_matrix)\n\n\u51e6\u7406\u5185\u5bb9\u306f\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3002\u3053\u3053\u3067\u60a9\u3080\u306e\u306fKMeans\u30af\u30e9\u30b9\u521d\u671f\u5316\u6642\u306b\u6e21\u3059\u30d1\u30e9\u30e1\u30bf\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u304b\u3059\u3060\u3051\u306a\u3089\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u307b\u307c\u4e0d\u8981\u3067\u3059\u3002\u4eca\u56de\u306f\u6271\u3046\u30c7\u30fc\u30bf\u306e\u4ef6\u6570\u304c5\u4ef6\u3068\u5c11\u306a\u3044\u70ba\u3001\u30af\u30e9\u30b9\u30bf\u6570\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e8\u304b\u30893\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u307e\u307e\u3067\u3059\u3002\n\uff08\u305d\u306e\u4ed6\u306e\u30d1\u30e9\u30e1\u30bf\u306e\u8a73\u7d30: sklearn.cluster.KMeans\uff09\n\u521d\u671f\u5316\u5f8c\u306ffit\u3067\u30c7\u30fc\u30bf\u3092\u98df\u308f\u305b\u3066\u5206\u6790\u3059\u308b\u3060\u3051\u3002\n\u4e3b\u306a\u5206\u6790\u7d50\u679c\u306f\u3001km_model\u306e\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\n\n\u30d1\u30e9\u30e1\u30bf\n\u5185\u5bb9\n\u5024\u306e\u4f8b\n\n\n\n\nkm_model.cluster_centers_\n\u30af\u30e9\u30b9\u30bf\u3054\u3068\u306e\u4e2d\u5fc3\u70b9\u306e\u30d9\u30af\u30c8\u30eb\u60c5\u5831\n[[0, 0, 0.46369322, 0.46369322, 0, 0.46369322, 0, 0, 0, 0, 0, 0, 0, 0.37410477]...\uff08\u30af\u30e9\u30b9\u30bf\u306e\u6570\u3060\u3051\uff09]\n\n\nkm_model.labels_\n\u5206\u6790\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u8981\u7d20\u3054\u3068\u306e\u30e9\u30d9\u30eb\uff08\u3069\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5c5e\u3059\u308b\u304b\u3092\u793a\u3059\u5024\uff09\n[2 1 1 0 1]\n\n\n\n\u305f\u3060\u3001\u3053\u306e\u7d50\u679c\uff08\u6570\u5024\u306e\u7f85\u5217\uff09\u3092\u898b\u305b\u3089\u308c\u3066\u3082\u30ca\u30f3\u30ce\u30b3\u30c3\u30c1\u30e3\u904e\u304e\u308b\u306e\u3067\u3001\u30af\u30e9\u30b9\u30bf\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u5fc5\u8981\u306a\u306e\u304c\u6b21\u306e\u6b21\u5143\u5727\u7e2e\u3067\u3059\u3002\n\n \uff08\u53ef\u8996\u5316\u306e\u70ba\u306e\uff09\u6b21\u5143\u5727\u7e2e\n# \u6b21\u5143\u5727\u7e2e\uff08\u7279\u7570\u5024\u5206\u89e3\uff09\u30af\u30e9\u30b9\u521d\u671f\u5316\nlsa = TruncatedSVD(2)\n# \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3001\u53ca\u3073\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u70b9\u306e\u30d9\u30af\u30c8\u30eb\u60c5\u5831\u30922\u6b21\u5143\u306b\u5727\u7e2e\ncompressed_text_list = lsa.fit_transform(tfidf_weighted_matrix)\ncompressed_center_list = lsa.fit_transform(km_model.cluster_centers_)\n\n\"\u6b21\u5143\u5727\u7e2e\"\u3068\u805e\u304f\u3068\u53cd\u5c04\u7684\u306b\u30d5\u30a1\u30a4\u30ca\u30eb\u25cb\u30a1\u30f3\u30bf\u30b8\u30fc\u2164\u3084\u2167\u304c\u8133\u88cf\u306b\u6d6e\u304b\u3076\u4e16\u4ee3\u3067\u3059\u3002\u3069\u3046\u3082SF\u7684\u306a\u4f55\u304b\u3092\u5f77\u5f7f\u3055\u305b\u308b\u5b57\u9762\u3067\u3059\u306d\u3002\u305f\u3060\u3001\u76ee\u7684\u306f\u300c\u9ad8\u6b21\u5143\u306a\u60c5\u5831\u306a\u3093\u3066\u56f3\u793a\u3067\u304d\u306a\u3044\u304b\u3089\u3001\uff08\u8fd1\u4f3c\u3067\u826f\u3044\u306e\u3067\uff09xy\u306e2\u6b21\u5143\u306b\u5909\u63db\u3057\u305f\u3044\u300d\u3068\u3044\u3046\u3060\u3051\u3067\u3001\uff08\u304b\u306a\u308a\u5f37\u5f15\u306a\u7406\u89e3\u3060\u3051\u3069\uff09\u5b57\u9762\u307b\u3069\u6570\u5b66\u754c\u9688\u306e\u5c16\u3063\u305f\u8a00\u8449\u3068\u3044\u3046\u4e8b\u3067\u3082\u306a\u3044\u306e\u3067\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u4eca\u56de\u6b21\u5143\u6570\u306f\u300c\u5168\u30c6\u30ad\u30b9\u30c8\u306b\u767b\u5834\u3059\u308b\u5358\u8a9e\u306e\u7a2e\u985e\u300d\u3068\u306a\u3063\u3066\u3044\u308b\u70ba\u3001\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a14\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u56f3\u793a\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3067\u3059\u306d\u3002\n[0, 0, 0.46369322, 0.46369322, 0, 0.46369322, 0, 0, 0, 0, 0, 0, 0, 0.37410477]\n\u3053\u308c\u3092\u6b21\u5143\u5727\u7e2e\u306b\u3088\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a2\u6b21\u5143\u306b\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u308c\u306a\u3089xy\u306e2\u8ef8\u306e\u56f3\u306b\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u307e\u3059\u306d\u3002\n[9.98647967e-01, 0.00000000e+00]\n\u306a\u304a\u6b21\u5143\u5727\u7e2e\u306e\u624b\u6cd5\u3082\u8272\u3005\u3068\u3042\u308b\u306e\u3067\u3059\u304c\u4eca\u56de\u306f\u6f5c\u5728\u610f\u5473\u89e3\u6790(LSA)\u3068\u3044\u3046\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u307e\u305f\u5f37\u305d\u3046\u306a\u5b57\u9762\u3067\u3059\u304c\u3001\u4e0a\u8a18\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u901a\u308a\u3001scikit-lean\u3092\u4f7f\u3048\u3070\u7c21\u5358\u3067\u3059\uff08\u4eca\u56de\u306fTruncatedSVD\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\u4ed6\u306b\u3082\u3042\u308b\u307f\u305f\u3044\u3067\u3059\uff09\u3002\u4e0a\u8a18\u306e\u5b9f\u88c5\u3067\u306f14\u6b21\u5143\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u30d9\u30af\u30c8\u30eb\u60c5\u5831\u3001\u30af\u30e9\u30b9\u30bf\u5206\u6790\u7d50\u679c\u306e\u4e2d\u5fc3\u70b9\u306e\u30d9\u30af\u30c8\u30eb\u60c5\u5831\u30922\u6b21\u5143\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3067\u53ef\u8996\u5316\u306e\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002\n\n \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\uff08\u53ef\u8996\u5316\u90e8\u5206\uff09\n\u3053\u3053\u307e\u3067\u306e\u5b9f\u88c5\u3067\u3001\u30af\u30e9\u30b9\u30bf\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u60c5\u5831\u306f\u63c3\u3063\u305f\u306e\u3067\u3001matplotlib\u3092\u4f7f\u3063\u305f\u63cf\u753b\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\u3002\n\ntw_ml.py(\u53ef\u8996\u5316\u90e8\u5206\u306e\u629c\u7c8b)\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport matplotlib.font_manager as fm\n\nFP = fm.FontProperties(\n    fname=r'C:\\WINDOWS\\Fonts\\YuGothL.ttc',\n    size=7)\n\ndef draw_km(text_list, km_text_labels,\n            compressed_center_list, compressed_text_list):\n\n    # \u63cf\u753b\u958b\u59cb\u3002\n    fig = plt.figure()\n    axes = fig.add_subplot(111)\n    for label in range(NUM_CLUSTER):\n\n        # \u30e9\u30d9\u30eb\u3054\u3068\u306b\u8272\u3092\u5206\u3051\u308b\u3002\n        # \u8272\u306f\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\uff08cool\uff09\u306b\u304a\u307e\u304b\u305b\u3059\u308b\u3002\n        color = cm.cool(float(label) / NUM_CLUSTER)\n\n        # \u30e9\u30d9\u30eb\u306e\u4e2d\u5fc3\u3092\u30d7\u30ed\u30c3\u30c8\n        xc, yc = compressed_center_list[label]\n        axes.plot(xc, yc,\n                  color=color,\n                  ms=6.0, zorder=3, marker=\"o\")\n\n        # \u30af\u30e9\u30b9\u30bf\u306e\u30e9\u30d9\u30eb\u3082\u30d7\u30ed\u30c3\u30c8\n        axes.annotate(\n            label, xy=(xc, yc), fontproperties=FP)\n\n        for text_num, text_label in enumerate(km_text_labels):\n\n            if text_label == label:\n                # label\u304c\u4e00\u81f4\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30c3\u30c8\n                x, y = compressed_text_list[text_num]\n                axes.plot(x, y,\n                          color=color,\n                          ms=5.0, zorder=2, marker=\"x\")\n\n                # \u30c6\u30ad\u30b9\u30c8\u3082\u30d7\u30ed\u30c3\u30c8\n                axes.annotate(\n                    text_list[text_num], xy=(x, y), fontproperties=FP)\n\n                # \u30e9\u30d9\u30eb\u306e\u4e2d\u5fc3\u70b9\u304b\u3089\u306e\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\n                axes.plot([x, xc], [y, yc],\n                          color=color,\n                          linewidth=0.5, zorder=1, linestyle=\"--\")\n\n    plt.axis('tight')\n    plt.show()\n\ndef main():\n    # \u6b21\u5143\u5727\u7e2e\u307e\u3067\u306f\u540c\u3058\u306a\u306e\u3067\u7701\u7565\n\n    # \u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\n    # \u203bkm_model.labels_\u306bSAMPLE_DATA\u306e\u5404\u8981\u7d20\u306e\u30e9\u30d9\u30eb\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n    draw_km(SAMPLE_DATA, km_model.labels_,\n            compressed_center_list, compressed_text_list)\n\nif __name__ == '__main__':\n    main()\n\n\n\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\uff01\n\n\n\n\n\u30c6\u30ad\u30b9\u30c8\n\u30af\u30e9\u30b9\u30bf\n\n\n\n\n\u306e\u3063\u3061\u53ef\u611b\u3044 #Perfume https://t.co/xxx\n\n2\n\n\nPerfume\u306e\u6f14\u51fa\u30b9\u30b4\u30a4 #prfm #Perfume_um https://t.co/xxx\n\n1\n\n\n\u30c1\u30e7\u30b3\u30ec\u30a4\u30c8\u30fb\u30c7\u30a3\u30b9\u30b3 / Perfume #NowPlaying https://t.co/xxx\n\n1\n\n\nPerfume A Gallery Experience in London\u306b\u884c\u3063\u3066\u304d\u307e\u3057\u305f https://t.co/xxx\n\n0\n\n\n\u30c1\u30e7\u30b3\u30ec\u30a4\u30c8\u30c7\u30a3\u30b9\u30b3\u306e\u6f14\u51fa\u30ab\u30c3\u30b3\u3044\u3044\u3002\u30e9\u30a4\u30d6\u884c\u304d\u305f\u3044\u3002#Perfume https://t.co/xxx\n\n1\n\n\n\n\u30c7\u30fc\u30bf\u6570\u304c\u5c11\u306a\u3044\u304b\u3089\u898b\u6804\u3048\u304c\u5fae\u5999\u2026\u3002\n\u3067\u3082\u306a\u3093\u3068\u306a\u30fc\u304f\u3001\u5206\u985e\u51fa\u6765\u3066\u308b\u6c17\u304c\u3059\u308b\uff01\n\n \u3064\u3044\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u51fa\u6765\u305f\uff01\nK-means\u6cd5\u3092\u4f7f\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u89e6\u308a\u90e8\u5206\u306f\u51fa\u6765\u307e\u3057\u305f\u3002km_models\u306b\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u3092\u98df\u308f\u305b\u308c\u3070\u3001\u3069\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5206\u985e\u3059\u308b\u304b\u89e3\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u306f\u305a\u3002\uff08\u3064\u307e\u308a\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u5668\uff01\uff09\n\u6b21\u56de\u306f\u5b9f\u969b\u306b\u65b0\u898f\u30c7\u30fc\u30bf\u3092\u5206\u985e\u3001\u30c7\u30fc\u30bf\u6570\u3092\u5897\u3084\u3057\u305f\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\u3042\u3068\u8107\u9053\u306b\u9038\u308c\u3061\u3083\u3044\u307e\u3059\u304cmatplotlib\u3067\u306e\u898b\u305b\u65b9\u3092\u3061\u3087\u3063\u3068\u3060\u3051\u5de5\u592b\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# <i class=\"fa fa-forward\" style=\"font-size:1em;\"></i> \u306f\u3058\u3081\u306b\n\u524d\u56de\u306e[\u300c\u30c7\u30fc\u30bf\u524d\u51e6\u7406\u7de8\u300d](http://qiita.com/yuuki_1204_/items/c26cb09fba8aad35dc0a)\u304b\u3089\u6642\u9593\u304c\u7a7a\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306fTwitter\u306e\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n# <i class=\"fa fa-bolt\" style=\"font-size:1em;\"></i> 3\u884c\u3067\u307e\u3068\u3081\n- \uff08\u3084\u3063\u3068\uff09\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3002\n- \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3092matplotlib\u3067\u53ef\u8996\u5316\u3057\u305f\u3002\n- \u6b21\u56de\u306f\u8107\u9053\u3067\u53ef\u8996\u5316\u306e\u5c0f\u6280\u7d39\u4ecb\u306b\u306a\u308b\u304b\u3082\u3002\n\n# <i class=\"fa fa-file-code-o\" style=\"font-size:1em;\"></i> \u3044\u304d\u306a\u308a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\uff08\u53ef\u8996\u5316\u4ee5\u5916\uff09\n\n[\u524d\u56de](http://qiita.com/yuuki_1204_/items/c26cb09fba8aad35dc0a)\u306e\u300c\u30d9\u30af\u30c8\u30e9\u30a4\u30ba\u300d\u306e\u5b9f\u88c5\u306b**\u300c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u300d****\u300c\u6b21\u5143\u5727\u7e2e\u300d**\u306e\u5b9f\u88c5\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\u3002\uff08\u300c\u53ef\u8996\u5316\u300d\u306e\u30bd\u30fc\u30b9\u306f\u3061\u3087\u3063\u3068\u9577\u3044\u306e\u3067\u5f8c\u3067\uff09\n\n```py:tw_ml.py(\u629c\u7c8b)\n#! /usr/bin/env python\n# -*- coding:utf-8 -*-\n\nimport MeCab as mc\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.cluster import KMeans\nfrom sklearn.decomposition import TruncatedSVD\n\nMECAB_OPT = \"-Ochasen -d C:\\\\tmp\\\\mecab-ipadic-neologd\\\\\"\n\nNUM_CLUSTER = 3\nSAMPLE_DATA = [\n    # \u524d\u56de\u3068\u540c\u3058\u306a\u306e\u3067\u7701\u7565\n]\n\ndef mecab_tokenizer(text):\n    # \u524d\u56de\u3068\u540c\u3058\u306a\u306e\u3067\u7701\u7565\n\ndef main():\n\n    # \u30d9\u30af\u30c8\u30e9\u30a4\u30b6\u30af\u30e9\u30b9\u521d\u671f\u5316\uff08\u524d\u56de\u3068\u540c\u3058\uff09\n    vectorizer = TfidfVectorizer(\n        min_df=1, stop_words=[u\"Perfume\", u\"HTTPS\"],\n        tokenizer=mecab_tokenizer)\n    # \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u30d9\u30af\u30c8\u30eb\u5316\uff08\u524d\u56de\u3068\u540c\u3058\uff09\n    tfidf_weighted_matrix = vectorizer.fit_transform(SAMPLE_DATA)\n\n    # K-Means\u306e\u30af\u30e9\u30b9\u30bf\u5206\u6790\u30af\u30e9\u30b9\u521d\u671f\u5316\n    km_model = KMeans(n_clusters=NUM_CLUSTER)\n    # \u30d9\u30af\u30c8\u30eb\u60c5\u5831\u3092\u98df\u308f\u305b\u3066\u3001\u30af\u30e9\u30b9\u30bf\u5206\u6790\u3092\u5b9f\u884c\n    km_model.fit(tfidf_weighted_matrix)\n\n    # \u6b21\u5143\u5727\u7e2e\uff08\u7279\u7570\u5024\u5206\u89e3\uff09\u30af\u30e9\u30b9\u521d\u671f\u5316\n    lsa = TruncatedSVD(2)\n    # \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3001\u53ca\u3073\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u70b9\u306e\u30d9\u30af\u30c8\u30eb\u60c5\u5831\u30922\u6b21\u5143\u306b\u5727\u7e2e\n    compressed_text_list = lsa.fit_transform(tfidf_weighted_matrix)\n    compressed_center_list = lsa.fit_transform(km_model.cluster_centers_)\n\nif __name__ == '__main__':\n    main()\n```\n\n\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u304b\u3001\u3061\u3087\u3063\u3068\u305a\u3064\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n## <i class=\"fa fa-cubes\" style=\"font-size:1em;\"></i> \u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\n```py:\n# K-Means\u306e\u30af\u30e9\u30b9\u30bf\u5206\u6790\u30af\u30e9\u30b9\u521d\u671f\u5316\nkm_model = KMeans(n_clusters=NUM_CLUSTER)\n# \u30d9\u30af\u30c8\u30eb\u60c5\u5831\u3092\u98df\u308f\u305b\u3066\u3001\u30af\u30e9\u30b9\u30bf\u5206\u6790\u3092\u5b9f\u884c\nkm_model.fit(tfidf_weighted_matrix)\n```\n\n\u51e6\u7406\u5185\u5bb9\u306f\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3002\u3053\u3053\u3067\u60a9\u3080\u306e\u306fKMeans\u30af\u30e9\u30b9\u521d\u671f\u5316\u6642\u306b\u6e21\u3059\u30d1\u30e9\u30e1\u30bf\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u304b\u3059\u3060\u3051\u306a\u3089\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306f\u307b\u307c\u4e0d\u8981\u3067\u3059\u3002\u4eca\u56de\u306f\u6271\u3046\u30c7\u30fc\u30bf\u306e\u4ef6\u6570\u304c5\u4ef6\u3068\u5c11\u306a\u3044\u70ba\u3001\u30af\u30e9\u30b9\u30bf\u6570\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e**8**\u304b\u3089**3**\u306b\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u307e\u307e\u3067\u3059\u3002\n\uff08\u305d\u306e\u4ed6\u306e\u30d1\u30e9\u30e1\u30bf\u306e\u8a73\u7d30: [sklearn.cluster.KMeans](http://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html)\uff09\n\n\u521d\u671f\u5316\u5f8c\u306ffit\u3067\u30c7\u30fc\u30bf\u3092\u98df\u308f\u305b\u3066\u5206\u6790\u3059\u308b\u3060\u3051\u3002\n\u4e3b\u306a\u5206\u6790\u7d50\u679c\u306f\u3001km_model\u306e\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n|\u30d1\u30e9\u30e1\u30bf|\u5185\u5bb9|\u5024\u306e\u4f8b|\n|:-----------|:-----------|:-----------|\n|km_model.cluster_centers_|\u30af\u30e9\u30b9\u30bf\u3054\u3068\u306e\u4e2d\u5fc3\u70b9\u306e\u30d9\u30af\u30c8\u30eb\u60c5\u5831|[[0, 0, 0.46369322, 0.46369322, 0, 0.46369322, 0, 0, 0, 0, 0, 0, 0, 0.37410477]...\uff08\u30af\u30e9\u30b9\u30bf\u306e\u6570\u3060\u3051\uff09]|\n|km_model.labels_|\u5206\u6790\u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u8981\u7d20\u3054\u3068\u306e\u30e9\u30d9\u30eb\uff08\u3069\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5c5e\u3059\u308b\u304b\u3092\u793a\u3059\u5024\uff09|[2 1 1 0 1] |\n\n\u305f\u3060\u3001\u3053\u306e\u7d50\u679c\uff08\u6570\u5024\u306e\u7f85\u5217\uff09\u3092\u898b\u305b\u3089\u308c\u3066\u3082\u30ca\u30f3\u30ce\u30b3\u30c3\u30c1\u30e3\u904e\u304e\u308b\u306e\u3067\u3001\u30af\u30e9\u30b9\u30bf\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u5fc5\u8981\u306a\u306e\u304c\u6b21\u306e**\u6b21\u5143\u5727\u7e2e**\u3067\u3059\u3002\n\n## <i class=\"fa fa-compress\" style=\"font-size:1em;\"></i> \uff08\u53ef\u8996\u5316\u306e\u70ba\u306e\uff09\u6b21\u5143\u5727\u7e2e\n\n```py:\n# \u6b21\u5143\u5727\u7e2e\uff08\u7279\u7570\u5024\u5206\u89e3\uff09\u30af\u30e9\u30b9\u521d\u671f\u5316\nlsa = TruncatedSVD(2)\n# \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3001\u53ca\u3073\u30af\u30e9\u30b9\u30bf\u4e2d\u5fc3\u70b9\u306e\u30d9\u30af\u30c8\u30eb\u60c5\u5831\u30922\u6b21\u5143\u306b\u5727\u7e2e\ncompressed_text_list = lsa.fit_transform(tfidf_weighted_matrix)\ncompressed_center_list = lsa.fit_transform(km_model.cluster_centers_)\n```\n\n\"\u6b21\u5143\u5727\u7e2e\"\u3068\u805e\u304f\u3068\u53cd\u5c04\u7684\u306b\u30d5\u30a1\u30a4\u30ca\u30eb\u25cb\u30a1\u30f3\u30bf\u30b8\u30fc\u2164\u3084\u2167\u304c\u8133\u88cf\u306b\u6d6e\u304b\u3076\u4e16\u4ee3\u3067\u3059\u3002\u3069\u3046\u3082SF\u7684\u306a\u4f55\u304b\u3092\u5f77\u5f7f\u3055\u305b\u308b\u5b57\u9762\u3067\u3059\u306d\u3002\u305f\u3060\u3001\u76ee\u7684\u306f\u300c\u9ad8\u6b21\u5143\u306a\u60c5\u5831\u306a\u3093\u3066\u56f3\u793a\u3067\u304d\u306a\u3044\u304b\u3089\u3001\uff08\u8fd1\u4f3c\u3067\u826f\u3044\u306e\u3067\uff09**xy\u306e2\u6b21\u5143\u306b\u5909\u63db\u3057\u305f\u3044**\u300d\u3068\u3044\u3046\u3060\u3051\u3067\u3001\uff08\u304b\u306a\u308a\u5f37\u5f15\u306a\u7406\u89e3\u3060\u3051\u3069\uff09\u5b57\u9762\u307b\u3069\u6570\u5b66\u754c\u9688\u306e\u5c16\u3063\u305f\u8a00\u8449\u3068\u3044\u3046\u4e8b\u3067\u3082\u306a\u3044\u306e\u3067\u3059\u3002\n\n\u5177\u4f53\u7684\u306b\u306f\u3001\u4eca\u56de\u6b21\u5143\u6570\u306f\u300c\u5168\u30c6\u30ad\u30b9\u30c8\u306b\u767b\u5834\u3059\u308b\u5358\u8a9e\u306e\u7a2e\u985e\u300d\u3068\u306a\u3063\u3066\u3044\u308b\u70ba\u3001\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a14\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u56f3\u793a\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3067\u3059\u306d\u3002\n**[0, 0, 0.46369322, 0.46369322, 0, 0.46369322, 0, 0, 0, 0, 0, 0, 0, 0.37410477]**\n\n\u3053\u308c\u3092\u6b21\u5143\u5727\u7e2e\u306b\u3088\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a2\u6b21\u5143\u306b\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u308c\u306a\u3089xy\u306e2\u8ef8\u306e\u56f3\u306b\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u307e\u3059\u306d\u3002\n**[9.98647967e-01, 0.00000000e+00]**\n\n\u306a\u304a\u6b21\u5143\u5727\u7e2e\u306e\u624b\u6cd5\u3082\u8272\u3005\u3068\u3042\u308b\u306e\u3067\u3059\u304c\u4eca\u56de\u306f**\u6f5c\u5728\u610f\u5473\u89e3\u6790(LSA)**\u3068\u3044\u3046\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u307e\u305f\u5f37\u305d\u3046\u306a\u5b57\u9762\u3067\u3059\u304c\u3001\u4e0a\u8a18\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u901a\u308a\u3001scikit-lean\u3092\u4f7f\u3048\u3070\u7c21\u5358\u3067\u3059\uff08\u4eca\u56de\u306fTruncatedSVD\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\u4ed6\u306b\u3082\u3042\u308b\u307f\u305f\u3044\u3067\u3059\uff09\u3002\u4e0a\u8a18\u306e\u5b9f\u88c5\u3067\u306f14\u6b21\u5143\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u30d9\u30af\u30c8\u30eb\u60c5\u5831\u3001\u30af\u30e9\u30b9\u30bf\u5206\u6790\u7d50\u679c\u306e\u4e2d\u5fc3\u70b9\u306e\u30d9\u30af\u30c8\u30eb\u60c5\u5831\u30922\u6b21\u5143\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3067\u53ef\u8996\u5316\u306e\u6e96\u5099\u304c\u6574\u3044\u307e\u3057\u305f\u3002\n\n# <i class=\"fa fa-file-code-o\" style=\"font-size:1em;\"></i> \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\uff08\u53ef\u8996\u5316\u90e8\u5206\uff09\n\n\u3053\u3053\u307e\u3067\u306e\u5b9f\u88c5\u3067\u3001\u30af\u30e9\u30b9\u30bf\u3092\u53ef\u8996\u5316\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u60c5\u5831\u306f\u63c3\u3063\u305f\u306e\u3067\u3001matplotlib\u3092\u4f7f\u3063\u305f\u63cf\u753b\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py:tw_ml.py(\u53ef\u8996\u5316\u90e8\u5206\u306e\u629c\u7c8b)\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import cm\nimport matplotlib.font_manager as fm\n\nFP = fm.FontProperties(\n    fname=r'C:\\WINDOWS\\Fonts\\YuGothL.ttc',\n    size=7)\n\ndef draw_km(text_list, km_text_labels,\n            compressed_center_list, compressed_text_list):\n\n    # \u63cf\u753b\u958b\u59cb\u3002\n    fig = plt.figure()\n    axes = fig.add_subplot(111)\n    for label in range(NUM_CLUSTER):\n\n        # \u30e9\u30d9\u30eb\u3054\u3068\u306b\u8272\u3092\u5206\u3051\u308b\u3002\n        # \u8272\u306f\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\uff08cool\uff09\u306b\u304a\u307e\u304b\u305b\u3059\u308b\u3002\n        color = cm.cool(float(label) / NUM_CLUSTER)\n\n        # \u30e9\u30d9\u30eb\u306e\u4e2d\u5fc3\u3092\u30d7\u30ed\u30c3\u30c8\n        xc, yc = compressed_center_list[label]\n        axes.plot(xc, yc,\n                  color=color,\n                  ms=6.0, zorder=3, marker=\"o\")\n\n        # \u30af\u30e9\u30b9\u30bf\u306e\u30e9\u30d9\u30eb\u3082\u30d7\u30ed\u30c3\u30c8\n        axes.annotate(\n            label, xy=(xc, yc), fontproperties=FP)\n\n        for text_num, text_label in enumerate(km_text_labels):\n\n            if text_label == label:\n                # label\u304c\u4e00\u81f4\u3059\u308b\u30c6\u30ad\u30b9\u30c8\u3092\u30d7\u30ed\u30c3\u30c8\n                x, y = compressed_text_list[text_num]\n                axes.plot(x, y,\n                          color=color,\n                          ms=5.0, zorder=2, marker=\"x\")\n\n                # \u30c6\u30ad\u30b9\u30c8\u3082\u30d7\u30ed\u30c3\u30c8\n                axes.annotate(\n                    text_list[text_num], xy=(x, y), fontproperties=FP)\n\n                # \u30e9\u30d9\u30eb\u306e\u4e2d\u5fc3\u70b9\u304b\u3089\u306e\u7dda\u3092\u30d7\u30ed\u30c3\u30c8\n                axes.plot([x, xc], [y, yc],\n                          color=color,\n                          linewidth=0.5, zorder=1, linestyle=\"--\")\n\n    plt.axis('tight')\n    plt.show()\n\ndef main():\n    # \u6b21\u5143\u5727\u7e2e\u307e\u3067\u306f\u540c\u3058\u306a\u306e\u3067\u7701\u7565\n\n    # \u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\n    # \u203bkm_model.labels_\u306bSAMPLE_DATA\u306e\u5404\u8981\u7d20\u306e\u30e9\u30d9\u30eb\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n    draw_km(SAMPLE_DATA, km_model.labels_,\n            compressed_center_list, compressed_text_list)\n\nif __name__ == '__main__':\n    main()\n```\n\n\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\uff01\n![figure_1.png](https://qiita-image-store.s3.amazonaws.com/0/82760/236ef8c6-fc1f-d59a-2352-c4964c07eb19.png)\n\n\n|\u30c6\u30ad\u30b9\u30c8|\u30af\u30e9\u30b9\u30bf|\n|:-----------|:-----------|\n|\u306e\u3063\u3061\u53ef\u611b\u3044 #Perfume https://t.co/xxx|2|\n|Perfume\u306e\u6f14\u51fa\u30b9\u30b4\u30a4 #prfm #Perfume_um https://t.co/xxx|1|\n|\u30c1\u30e7\u30b3\u30ec\u30a4\u30c8\u30fb\u30c7\u30a3\u30b9\u30b3 / Perfume #NowPlaying https://t.co/xxx|1|\n|Perfume A Gallery Experience in London\u306b\u884c\u3063\u3066\u304d\u307e\u3057\u305f https://t.co/xxx|0|\n|\u30c1\u30e7\u30b3\u30ec\u30a4\u30c8\u30c7\u30a3\u30b9\u30b3\u306e\u6f14\u51fa\u30ab\u30c3\u30b3\u3044\u3044\u3002\u30e9\u30a4\u30d6\u884c\u304d\u305f\u3044\u3002#Perfume https://t.co/xxx|1|\n\n\u30c7\u30fc\u30bf\u6570\u304c\u5c11\u306a\u3044\u304b\u3089\u898b\u6804\u3048\u304c\u5fae\u5999\u2026\u3002\n\u3067\u3082\u306a\u3093\u3068\u306a\u30fc\u304f\u3001\u5206\u985e\u51fa\u6765\u3066\u308b\u6c17\u304c\u3059\u308b\uff01\n\n# <i class=\"fa fa-hand-rock-o\" style=\"font-size:1em;\"></i> \u3064\u3044\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u51fa\u6765\u305f\uff01\n\nK-means\u6cd5\u3092\u4f7f\u3063\u305f\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u89e6\u308a\u90e8\u5206\u306f\u51fa\u6765\u307e\u3057\u305f\u3002km_models\u306b\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u3092\u98df\u308f\u305b\u308c\u3070\u3001\u3069\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5206\u985e\u3059\u308b\u304b\u89e3\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u306f\u305a\u3002\uff08\u3064\u307e\u308a*\u30c6\u30ad\u30b9\u30c8\u5206\u985e\u5668\uff01*\uff09\n\n\u6b21\u56de\u306f\u5b9f\u969b\u306b\u65b0\u898f\u30c7\u30fc\u30bf\u3092\u5206\u985e\u3001\u30c7\u30fc\u30bf\u6570\u3092\u5897\u3084\u3057\u305f\u7d50\u679c\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\u3042\u3068\u8107\u9053\u306b\u9038\u308c\u3061\u3083\u3044\u307e\u3059\u304cmatplotlib\u3067\u306e\u898b\u305b\u65b9\u3092\u3061\u3087\u3063\u3068\u3060\u3051\u5de5\u592b\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "Twitter", "\u65e5\u672c\u8a9e", "scikit-learn"]}