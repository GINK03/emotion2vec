{"tags": ["RSA", "Java"], "context": "\n\n\u6982\u8981\nRSA\u6697\u53f7\u306e\u9375\u30da\u30a2\u306e\u751f\u6210\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u306a\u304b\u306a\u304b\u306a\u304b\u3063\u305f\u306e\u3067Java\u3067\u81ea\u4f5c\u3057\u3066\u307f\u305f\u3002\u6570\u5024\u306e\u751f\u6210\u306e\u307f\u3067\u8a3c\u660e\u66f8\u30fb\u516c\u958b\u9375\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\u7b49\u306e\u51e6\u7406\u306f\u3057\u3066\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306fJava 1.8.0 update 92\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u305f\u3002\n\nMain.java\nimport java.math.BigInteger;\nimport java.security.KeyFactory;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\nimport java.security.SecureRandom;\nimport java.security.spec.RSAPrivateKeySpec;\nimport java.security.spec.RSAPublicKeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.xml.bind.DatatypeConverter;\n\n/**\n * RSA\u9375\u30da\u30a2\u751f\u6210\n */\npublic class Main {\n    /**\n     * */\n    private static final String CIPHER_ALGORITHM = \"RSA\";\n    /**\n     * */\n    private static final String CIPHER_MODE = CIPHER_ALGORITHM + \"/ECB/PKCS1PADDING\";\n\n    public static void main(String[] args) throws Exception {\n\n        /** \u5e73\u6587 */\n        String plainText = \"\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\";\n\n        /** \u7d20\u6570\u751f\u6210\u6e90 */\n        SecureRandom rnd = SecureRandom.getInstanceStrong();\n\n        /** \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d1\u30e9\u30e1\u30fc\u30bf(n\u306e\u30d3\u30c3\u30c8\u9577) */\n        int nBitLength = 1 << 10;\n        /** p\u306e\u30d3\u30c3\u30c8\u9577 */\n        int pBitLength = (nBitLength >> 1) + (nBitLength & 0x01);\n        /** q\u306e\u30d3\u30c3\u30c8\u9577 */\n        int qBitLength = nBitLength >> 1;\n        /**\n         * \u7d20\u6570\u78ba\u5b9f\u5ea6 \u6570\u5024\u304c\u5927\u304d\u3044\u307b\u3069\u7d20\u6570\u3067\u3042\u308b\u78ba\u7387\u304c\u9ad8\u304f\u306a\u308b (\u4ee3\u308f\u308a\u306b\u5b9f\u884c\u6642\u9593\u304c\u9577\u304f\u306a\u308b)\n         */\n        int certainty = 100;\n        /** \u7d20\u6570q */\n        BigInteger p = null;\n        /** \u7d20\u6570q */\n        BigInteger q = null;\n        /**  */\n        BigInteger n = null;\n        /** \u03a6(n) 1\u304b\u3089n\u307e\u3067\u306e\u81ea\u7136\u6570\u306e\u3046\u3061 n \u3068\u4e92\u3044\u306b\u7d20\u306a\u3082\u306e\u306e\u500b\u6570 */\n        BigInteger phiN = null;\n        /** \u516c\u958b\u6307\u6570 \u6c7a\u3081\u6253\u3061 */\n        BigInteger publicExponent = BigInteger.valueOf(65537L);\n        /** \u975e\u516c\u958b\u6307\u6570 */\n        BigInteger d = null;\n\n        /* \u7d20\u6570p\u751f\u6210 */\n        p = new BigInteger(pBitLength, certainty, rnd);\n        do {\n            do {\n                /* \u7d20\u6570q\u751f\u6210 */\n                q = new BigInteger(qBitLength, certainty, rnd);\n            } while (p.equals(q));\n            /* q\u304cp\u3068\u7b49\u3057\u3044\u5834\u5408\u306f\u518d\u751f\u6210 */\n            /* p < q \u306a\u3089\u3070p\u3068q\u3092\u5165\u308c\u66ff\u3048\u308b */\n            if (p.compareTo(q) < 0) {\n                BigInteger tmp = q;\n                q = p;\n                p = tmp;\n            }\n            n = p.multiply(q);\n        } while (n.bitLength() != nBitLength);\n        /* n\u306e\u30d3\u30c3\u30c8\u9577\u304c\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u9054\u3057\u306a\u3044\u5834\u5408\u7d20\u6570\u3092\u518d\u751f\u6210 */\n        System.out.println(\"\u7d20\u6570\u751f\u6210\u5b8c\u4e86\");\n        System.out.printf(\"p : %d%n\", p);\n        System.out.printf(\"q : %d%n\", q);\n        System.out.printf(\"n : %d%n\", n);\n        System.out.printf(\"n bit length : %d%n\", n.bitLength());\n        System.out.println(\"--------------------------------------------------------------\");\n        /* \u03a6(n)=(p-1)(q-1) */\n        phiN = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));\n        /* (d * publicExponent) \u2261 1 mod \u03a6(n) \u3092\u6e80\u305f\u3059 d\u3092\u6c42\u3081\u308b */\n        d = publicExponent.modInverse(phiN);\n        System.out.printf(\"d : %d%n\", d);\n\n        /* \u3053\u3053\u307e\u3067\u3067\u9375\u30da\u30a2\u751f\u6210\u5b8c\u4e86 \u4ee5\u4e0b\u6697\u53f7\u5316\u30c6\u30b9\u30c8 */\n\n        RSAPrivateKeySpec privateKeySpec = new RSAPrivateKeySpec(n, d);\n        RSAPublicKeySpec publicKeySpec = new RSAPublicKeySpec(n, publicExponent);\n\n        KeyFactory factory = KeyFactory.getInstance(\"RSA\");\n        PrivateKey privateKey = factory.generatePrivate(privateKeySpec);\n        PublicKey publicKey = factory.generatePublic(publicKeySpec);\n\n        byte[] cipher = encryptionTest(plainText.getBytes(), publicKey);\n        System.out.println(DatatypeConverter.printHexBinary(cipher));\n        byte[] decryptedText = decryptionTest(cipher, privateKey);\n        String restoredText = new String(decryptedText);\n        System.out.println(restoredText);\n        System.out.println(plainText.equals(restoredText));\n    }\n\n    /* \u6697\u53f7\u5316\u30c6\u30b9\u30c8 */\n    static byte[] encryptionTest(byte[] plainText, PublicKey key) throws Exception {\n        Cipher cipher = Cipher.getInstance(CIPHER_MODE);\n        cipher.init(Cipher.ENCRYPT_MODE, key);\n        return cipher.doFinal(plainText, 0, plainText.length);\n    }\n\n    /* \u5fa9\u53f7\u30c6\u30b9\u30c8 */\n    static byte[] decryptionTest(byte[] cipherText, PrivateKey key) throws Exception {\n        Cipher cipher = Cipher.getInstance(CIPHER_MODE);\n        cipher.init(Cipher.DECRYPT_MODE, key);\n        return cipher.doFinal(cipherText, 0, cipherText.length);\n    }\n}\n\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3002\n\u7d20\u6570\u751f\u6210\u5b8c\u4e86\np : 11986036157968132346520837773856659201839110728802035511508317831681007979436002145500826499755663463491872944597086946814559027949874736415090464605880137\nq : 9937658523438649360213691713305392768344928118607991280259811429812816516088395721590675912116362768528361503738754901598727081542350764090985811794454401\nn : 119113134387475851867985689657000237177931905808165300526766493837814859856182158624264860506081520590229037346555991460737484576589634306133175864861578710606314396664765864609431629037347673593139937885276064477678386183356481130329007362710327345476281951711747292607172340202378498591050053012312318132937\nn bit length : 1024\n--------------------------------------------------------------\nd : 7637111718512802379560795702255443438388541864990930204517643577009903430362656675452964643583846522119450309447003618078625969922786263551453453532330647570751911798130055257188134949112601213437337415154759051002112119038305133224325974939586200458322929216589258225550317239149829329203948856756075599873\n4418EBA57209FED2C9B852673EF6D42F320066EC1B0175B2AF4B3E103F3B2719684CF39811D8BA6E2F8A455DD621079B7C0ACBB7ADCA368806BED51097822CCF05F72D8E9F001737EF3FE9993CCC62E4C1F87585CF95FF4639579150254DD2D4C995DD8A84848035DA7C3364EFAF922903CC96191E6E32763E13852CDA965BBE\n\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\ntrue\n\n\n#\u6982\u8981\nRSA\u6697\u53f7\u306e\u9375\u30da\u30a2\u306e\u751f\u6210\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u306a\u304b\u306a\u304b\u306a\u304b\u3063\u305f\u306e\u3067Java\u3067\u81ea\u4f5c\u3057\u3066\u307f\u305f\u3002\u6570\u5024\u306e\u751f\u6210\u306e\u307f\u3067\u8a3c\u660e\u66f8\u30fb\u516c\u958b\u9375\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\u7b49\u306e\u51e6\u7406\u306f\u3057\u3066\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306fJava 1.8.0 update 92\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u305f\u3002\n\n```java:Main.java\nimport java.math.BigInteger;\nimport java.security.KeyFactory;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\nimport java.security.SecureRandom;\nimport java.security.spec.RSAPrivateKeySpec;\nimport java.security.spec.RSAPublicKeySpec;\n\nimport javax.crypto.Cipher;\nimport javax.xml.bind.DatatypeConverter;\n\n/**\n * RSA\u9375\u30da\u30a2\u751f\u6210\n */\npublic class Main {\n\t/**\n\t * */\n\tprivate static final String CIPHER_ALGORITHM = \"RSA\";\n\t/**\n\t * */\n\tprivate static final String CIPHER_MODE = CIPHER_ALGORITHM + \"/ECB/PKCS1PADDING\";\n\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t/** \u5e73\u6587 */\n\t\tString plainText = \"\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\";\n\n\t\t/** \u7d20\u6570\u751f\u6210\u6e90 */\n\t\tSecureRandom rnd = SecureRandom.getInstanceStrong();\n\n\t\t/** \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d1\u30e9\u30e1\u30fc\u30bf(n\u306e\u30d3\u30c3\u30c8\u9577) */\n\t\tint nBitLength = 1 << 10;\n\t\t/** p\u306e\u30d3\u30c3\u30c8\u9577 */\n\t\tint pBitLength = (nBitLength >> 1) + (nBitLength & 0x01);\n\t\t/** q\u306e\u30d3\u30c3\u30c8\u9577 */\n\t\tint qBitLength = nBitLength >> 1;\n\t\t/**\n\t\t * \u7d20\u6570\u78ba\u5b9f\u5ea6 \u6570\u5024\u304c\u5927\u304d\u3044\u307b\u3069\u7d20\u6570\u3067\u3042\u308b\u78ba\u7387\u304c\u9ad8\u304f\u306a\u308b (\u4ee3\u308f\u308a\u306b\u5b9f\u884c\u6642\u9593\u304c\u9577\u304f\u306a\u308b)\n\t\t */\n\t\tint certainty = 100;\n\t\t/** \u7d20\u6570q */\n\t\tBigInteger p = null;\n\t\t/** \u7d20\u6570q */\n\t\tBigInteger q = null;\n\t\t/**  */\n\t\tBigInteger n = null;\n\t\t/** \u03a6(n) 1\u304b\u3089n\u307e\u3067\u306e\u81ea\u7136\u6570\u306e\u3046\u3061 n \u3068\u4e92\u3044\u306b\u7d20\u306a\u3082\u306e\u306e\u500b\u6570 */\n\t\tBigInteger phiN = null;\n\t\t/** \u516c\u958b\u6307\u6570 \u6c7a\u3081\u6253\u3061 */\n\t\tBigInteger publicExponent = BigInteger.valueOf(65537L);\n\t\t/** \u975e\u516c\u958b\u6307\u6570 */\n\t\tBigInteger d = null;\n\n\t\t/* \u7d20\u6570p\u751f\u6210 */\n\t\tp = new BigInteger(pBitLength, certainty, rnd);\n\t\tdo {\n\t\t\tdo {\n\t\t\t\t/* \u7d20\u6570q\u751f\u6210 */\n\t\t\t\tq = new BigInteger(qBitLength, certainty, rnd);\n\t\t\t} while (p.equals(q));\n\t\t\t/* q\u304cp\u3068\u7b49\u3057\u3044\u5834\u5408\u306f\u518d\u751f\u6210 */\n\t\t\t/* p < q \u306a\u3089\u3070p\u3068q\u3092\u5165\u308c\u66ff\u3048\u308b */\n\t\t\tif (p.compareTo(q) < 0) {\n\t\t\t\tBigInteger tmp = q;\n\t\t\t\tq = p;\n\t\t\t\tp = tmp;\n\t\t\t}\n\t\t\tn = p.multiply(q);\n\t\t} while (n.bitLength() != nBitLength);\n\t\t/* n\u306e\u30d3\u30c3\u30c8\u9577\u304c\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u9054\u3057\u306a\u3044\u5834\u5408\u7d20\u6570\u3092\u518d\u751f\u6210 */\n\t\tSystem.out.println(\"\u7d20\u6570\u751f\u6210\u5b8c\u4e86\");\n\t\tSystem.out.printf(\"p : %d%n\", p);\n\t\tSystem.out.printf(\"q : %d%n\", q);\n\t\tSystem.out.printf(\"n : %d%n\", n);\n\t\tSystem.out.printf(\"n bit length : %d%n\", n.bitLength());\n\t\tSystem.out.println(\"--------------------------------------------------------------\");\n\t\t/* \u03a6(n)=(p-1)(q-1) */\n\t\tphiN = p.subtract(BigInteger.ONE).multiply(q.subtract(BigInteger.ONE));\n\t\t/* (d * publicExponent) \u2261 1 mod \u03a6(n) \u3092\u6e80\u305f\u3059 d\u3092\u6c42\u3081\u308b */\n\t\td = publicExponent.modInverse(phiN);\n\t\tSystem.out.printf(\"d : %d%n\", d);\n\n\t\t/* \u3053\u3053\u307e\u3067\u3067\u9375\u30da\u30a2\u751f\u6210\u5b8c\u4e86 \u4ee5\u4e0b\u6697\u53f7\u5316\u30c6\u30b9\u30c8 */\n\n\t\tRSAPrivateKeySpec privateKeySpec = new RSAPrivateKeySpec(n, d);\n\t\tRSAPublicKeySpec publicKeySpec = new RSAPublicKeySpec(n, publicExponent);\n\n\t\tKeyFactory factory = KeyFactory.getInstance(\"RSA\");\n\t\tPrivateKey privateKey = factory.generatePrivate(privateKeySpec);\n\t\tPublicKey publicKey = factory.generatePublic(publicKeySpec);\n\n\t\tbyte[] cipher = encryptionTest(plainText.getBytes(), publicKey);\n\t\tSystem.out.println(DatatypeConverter.printHexBinary(cipher));\n\t\tbyte[] decryptedText = decryptionTest(cipher, privateKey);\n\t\tString restoredText = new String(decryptedText);\n\t\tSystem.out.println(restoredText);\n\t\tSystem.out.println(plainText.equals(restoredText));\n\t}\n\n\t/* \u6697\u53f7\u5316\u30c6\u30b9\u30c8 */\n\tstatic byte[] encryptionTest(byte[] plainText, PublicKey key) throws Exception {\n\t\tCipher cipher = Cipher.getInstance(CIPHER_MODE);\n\t\tcipher.init(Cipher.ENCRYPT_MODE, key);\n\t\treturn cipher.doFinal(plainText, 0, plainText.length);\n\t}\n\n\t/* \u5fa9\u53f7\u30c6\u30b9\u30c8 */\n\tstatic byte[] decryptionTest(byte[] cipherText, PrivateKey key) throws Exception {\n\t\tCipher cipher = Cipher.getInstance(CIPHER_MODE);\n\t\tcipher.init(Cipher.DECRYPT_MODE, key);\n\t\treturn cipher.doFinal(cipherText, 0, cipherText.length);\n\t}\n}\n\n```\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3002\n\n```text\n\u7d20\u6570\u751f\u6210\u5b8c\u4e86\np : 11986036157968132346520837773856659201839110728802035511508317831681007979436002145500826499755663463491872944597086946814559027949874736415090464605880137\nq : 9937658523438649360213691713305392768344928118607991280259811429812816516088395721590675912116362768528361503738754901598727081542350764090985811794454401\nn : 119113134387475851867985689657000237177931905808165300526766493837814859856182158624264860506081520590229037346555991460737484576589634306133175864861578710606314396664765864609431629037347673593139937885276064477678386183356481130329007362710327345476281951711747292607172340202378498591050053012312318132937\nn bit length : 1024\n--------------------------------------------------------------\nd : 7637111718512802379560795702255443438388541864990930204517643577009903430362656675452964643583846522119450309447003618078625969922786263551453453532330647570751911798130055257188134949112601213437337415154759051002112119038305133224325974939586200458322929216589258225550317239149829329203948856756075599873\n4418EBA57209FED2C9B852673EF6D42F320066EC1B0175B2AF4B3E103F3B2719684CF39811D8BA6E2F8A455DD621079B7C0ACBB7ADCA368806BED51097822CCF05F72D8E9F001737EF3FE9993CCC62E4C1F87585CF95FF4639579150254DD2D4C995DD8A84848035DA7C3364EFAF922903CC96191E6E32763E13852CDA965BBE\n\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\u30c6\u30b9\u30c8\u3066\u3059\u3068\ntrue\n\n```\n"}