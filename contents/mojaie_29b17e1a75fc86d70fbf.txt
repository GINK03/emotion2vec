{"tags": ["Python", "python3", "tornado"], "context": " More than 1 year has passed since last update.Tornado\u306e\u30b3\u30eb\u30fc\u30c1\u30f3\u3067\u30b8\u30e7\u30d6\u5f85\u3061\u884c\u5217\u3092\u4f5c\u3063\u305f\u6642\u306e\u30e1\u30e2\u3067\u3059\u3002\nWorkerQueue\u306eput\u30e1\u30bd\u30c3\u30c9\u3067\u30b8\u30e7\u30d6(\u95a2\u6570\u3068\u5f15\u6570)\u3092\u30ad\u30e5\u30fc\u306b\u5165\u308c\u307e\u3059\u3002\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u30b8\u30e7\u30d6\u304c\u7d42\u4e86\u6b21\u7b2c\u3001\u30ad\u30e5\u30fc\u306b\u3042\u308b\u30b8\u30e7\u30d6\u304c\u53e4\u3044\u3082\u306e\u304b\u3089\u9806\u306b\uff11\u3064\u305a\u3064\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\nTornado\u306e\u30d0\u30fc\u30b8\u30e7\u30f34.2\u3067\u5b9f\u88c5\u3055\u308c\u305fQueue\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002Tornado\u306e\u30ad\u30e5\u30fc\u306fPython\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u540c\u671f\u30ad\u30e5\u30fc(queue.Queue)\u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001put\u3084get\u304ctornado.concurrent.Future\u3092\u8fd4\u3059\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\nfilename\nfrom concurrent.futures import ProcessPoolExecutor\nimport time\n\nfrom tornado import ioloop, gen, process\nfrom tornado.queues import Queue\n\n\nclass WorkerQueue(object):\n    def __init__(self):\n        self.queue = Queue()\n        self.current_worker_id = None\n        self.current_worker = None\n        self.queued_ids = []\n        self._dispatcher()\n\n    def put(self, id_, func, args):\n        worker = Worker(func, args)\n        self.queued_ids.append(id_)\n        self.queue.put_nowait((id_, worker))\n        print(\"Put: {}\".format(id_))\n\n    def status(self, id_):\n        if id_ in self.queued_ids:\n            return \"Queued\"\n        elif id_ == self.current_worker_id:\n            return \"Running\"\n        else:\n            return \"Ready\"\n\n    @gen.coroutine\n    def _dispatcher(self):\n        while 1:\n            id_, worker = yield self.queue.get()\n            self.queued_ids.remove(id_)\n            self.current_worker_id = id_\n            self.current_worker = worker\n            print(\"Start: {}\".format(id_))\n            res = yield self.current_worker.execute()\n            self.current_worker_id = None\n            self.current_worker = None\n            print(\"{} is {}.\".format(id_, res))\n\n\nclass Worker(object):\n    def __init__(self, func, args):\n        self.func = func\n        self.args = args\n\n    @gen.coroutine\n    def execute(self):\n        with ProcessPoolExecutor(process.cpu_count()) as exec_:\n            res = yield exec_.submit(self.func, *self.args)\n        return res\n\n\ndef job(sec):\n    time.sleep(sec)\n    return \"done\"\n\n\n@gen.coroutine\ndef run():\n    q = WorkerQueue()\n    q.put(\"Job1\", job, (2,))\n    q.put(\"Job2\", job, (2,))\n    print(\"Job1 <{}>\".format(q.status(\"Job1\")))\n    print(\"Job2 <{}>\".format(q.status(\"Job2\")))\n    yield gen.sleep(1)\n    print(\"Job1 <{}>\".format(q.status(\"Job1\")))\n    print(\"Job2 <{}>\".format(q.status(\"Job2\")))\n    yield gen.sleep(2)\n    print(\"Job1 <{}>\".format(q.status(\"Job1\")))\n    print(\"Job2 <{}>\".format(q.status(\"Job2\")))\n    yield gen.sleep(2)\n    print(\"Job1 <{}>\".format(q.status(\"Job1\")))\n    print(\"Job2 <{}>\".format(q.status(\"Job2\")))\n\n\nif __name__ == \"__main__\":\n    ioloop.IOLoop.current().run_sync(run)\n\n\n\u5b9f\u884c\u7d50\u679c\nPut: Job1\nPut: Job2\nJob1 <Queued>\nJob2 <Queued>\nStart: Job1\nJob1 <Running>\nJob2 <Queued>\nJob1 is done\nStart: Job2\nJob1 <Ready>\nJob2 <Running>\nJob2 is done\nJob1 <Ready>\nJob2 <Ready>\n\n(2015.11.7\u8ffd\u8a18)\n\u5927\u5bb9\u91cf\u30c7\u30fc\u30bf\u3092\u6271\u3046\u969b\u306b\u306f\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u554f\u984c\u306b\u306a\u3063\u3066\u304f\u308b\u306e\u3067\u3001\u30ad\u30e5\u30fc\u306e\u9577\u3055\u3092\u9650\u5b9a\u3057\u3066producer\u3092\u5f85\u305f\u305b\u308b\u306a\u3069\u306e\u5de5\u592b\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nTornado\u306e\u30b3\u30eb\u30fc\u30c1\u30f3\u3067\u30b8\u30e7\u30d6\u5f85\u3061\u884c\u5217\u3092\u4f5c\u3063\u305f\u6642\u306e\u30e1\u30e2\u3067\u3059\u3002\n\nWorkerQueue\u306eput\u30e1\u30bd\u30c3\u30c9\u3067\u30b8\u30e7\u30d6(\u95a2\u6570\u3068\u5f15\u6570)\u3092\u30ad\u30e5\u30fc\u306b\u5165\u308c\u307e\u3059\u3002\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u30b8\u30e7\u30d6\u304c\u7d42\u4e86\u6b21\u7b2c\u3001\u30ad\u30e5\u30fc\u306b\u3042\u308b\u30b8\u30e7\u30d6\u304c\u53e4\u3044\u3082\u306e\u304b\u3089\u9806\u306b\uff11\u3064\u305a\u3064\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\nTornado\u306e\u30d0\u30fc\u30b8\u30e7\u30f34.2\u3067\u5b9f\u88c5\u3055\u308c\u305fQueue\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002Tornado\u306e\u30ad\u30e5\u30fc\u306fPython\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u540c\u671f\u30ad\u30e5\u30fc(queue.Queue)\u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001put\u3084get\u304ctornado.concurrent.Future\u3092\u8fd4\u3059\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\n\n\n\n```py3:filename\nfrom concurrent.futures import ProcessPoolExecutor\nimport time\n\nfrom tornado import ioloop, gen, process\nfrom tornado.queues import Queue\n\n\nclass WorkerQueue(object):\n    def __init__(self):\n        self.queue = Queue()\n        self.current_worker_id = None\n        self.current_worker = None\n        self.queued_ids = []\n        self._dispatcher()\n\n    def put(self, id_, func, args):\n        worker = Worker(func, args)\n        self.queued_ids.append(id_)\n        self.queue.put_nowait((id_, worker))\n        print(\"Put: {}\".format(id_))\n\n    def status(self, id_):\n        if id_ in self.queued_ids:\n            return \"Queued\"\n        elif id_ == self.current_worker_id:\n            return \"Running\"\n        else:\n            return \"Ready\"\n\n    @gen.coroutine\n    def _dispatcher(self):\n        while 1:\n            id_, worker = yield self.queue.get()\n            self.queued_ids.remove(id_)\n            self.current_worker_id = id_\n            self.current_worker = worker\n            print(\"Start: {}\".format(id_))\n            res = yield self.current_worker.execute()\n            self.current_worker_id = None\n            self.current_worker = None\n            print(\"{} is {}.\".format(id_, res))\n\n\nclass Worker(object):\n    def __init__(self, func, args):\n        self.func = func\n        self.args = args\n\n    @gen.coroutine\n    def execute(self):\n        with ProcessPoolExecutor(process.cpu_count()) as exec_:\n            res = yield exec_.submit(self.func, *self.args)\n        return res\n\n\ndef job(sec):\n    time.sleep(sec)\n    return \"done\"\n\n\n@gen.coroutine\ndef run():\n    q = WorkerQueue()\n    q.put(\"Job1\", job, (2,))\n    q.put(\"Job2\", job, (2,))\n    print(\"Job1 <{}>\".format(q.status(\"Job1\")))\n    print(\"Job2 <{}>\".format(q.status(\"Job2\")))\n    yield gen.sleep(1)\n    print(\"Job1 <{}>\".format(q.status(\"Job1\")))\n    print(\"Job2 <{}>\".format(q.status(\"Job2\")))\n    yield gen.sleep(2)\n    print(\"Job1 <{}>\".format(q.status(\"Job1\")))\n    print(\"Job2 <{}>\".format(q.status(\"Job2\")))\n    yield gen.sleep(2)\n    print(\"Job1 <{}>\".format(q.status(\"Job1\")))\n    print(\"Job2 <{}>\".format(q.status(\"Job2\")))\n\n\nif __name__ == \"__main__\":\n    ioloop.IOLoop.current().run_sync(run)\n```\n\n\u5b9f\u884c\u7d50\u679c\n\n```\nPut: Job1\nPut: Job2\nJob1 <Queued>\nJob2 <Queued>\nStart: Job1\nJob1 <Running>\nJob2 <Queued>\nJob1 is done\nStart: Job2\nJob1 <Ready>\nJob2 <Running>\nJob2 is done\nJob1 <Ready>\nJob2 <Ready>\n```\n\n(2015.11.7\u8ffd\u8a18)\n\u5927\u5bb9\u91cf\u30c7\u30fc\u30bf\u3092\u6271\u3046\u969b\u306b\u306f\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u554f\u984c\u306b\u306a\u3063\u3066\u304f\u308b\u306e\u3067\u3001\u30ad\u30e5\u30fc\u306e\u9577\u3055\u3092\u9650\u5b9a\u3057\u3066producer\u3092\u5f85\u305f\u305b\u308b\u306a\u3069\u306e\u5de5\u592b\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\n"}