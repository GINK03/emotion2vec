{"tags": ["ADDA", "conjugateGradient"], "context": "\nMy_Environment\nUbuntu 14.04 LTS Japanese Remix\non VMWare Fusion v8.5.2 (4635224)\non OS X El Captian v10.11.4\n\nGNU bash, version 4.3.11(1)-release\n\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4 \n(also for g++)\nADDA v.1.3b6\n\n\nThis article is related to ADDA (light scattering simulator based on the discrete dipole approximation).\nIn the source files, I found itertive.c.\nhttps://github.com/adda-team/adda/blob/master/src/iterative.c\nI was wondering what is the index of iterative solvers among those defined such as BCGS2, BiCG_CS, etc.\nIt seems that the method_in is the index of iterative solver.\nIn IterativeSolver():\n\niterative.c\nint IterativeSolver(const enum iter method_in,const enum incpol which)\n...\n    /* determine index of the iterative solver, which is further used to get its parameters from list 'params'. This way\n     * it should be resistant to inconsistencies in orders of iterative solvers inside the list of identifiers in\n     * const.h and in the list 'params' above.\n     */\n    ind_m=0;\n    while (params[ind_m].meth!=method_in) {\n        ind_m++;\n        if (ind_m>=LENGTH(params))\n            LogError(ONE_POS,\"Parameters for the given iterative solver are not found in list 'params'\");\n    }\n\n\nThe IterativeSolver() is called from int CalculateE() of CalculateE.c.\n\nCalculateE.c\nint CalculateE(const enum incpol which,const enum Eftype type)\n{\n    ...\n    D(\"Iterative solver started\");\n    exit_status=IterativeSolver(IterMethod,which);\n\n\n\n```txt:My_Environment\nUbuntu 14.04 LTS Japanese Remix\non VMWare Fusion v8.5.2 (4635224)\non OS X El Captian v10.11.4\n\nGNU bash, version 4.3.11(1)-release\n\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4 \n(also for g++)\nADDA v.1.3b6\n```\n\nThis article is related to [ADDA (light scattering simulator based on the discrete dipole approximation)](https://github.com/adda-team/adda/).\n\nIn the source files, I found `itertive.c`.\nhttps://github.com/adda-team/adda/blob/master/src/iterative.c\n\nI was wondering what is the index of iterative solvers among those defined such as BCGS2, BiCG_CS, etc.\n\nIt seems that the `method_in` is the index of iterative solver.\n\nIn IterativeSolver():\n\n```iterative.c\nint IterativeSolver(const enum iter method_in,const enum incpol which)\n...\n\t/* determine index of the iterative solver, which is further used to get its parameters from list 'params'. This way\n\t * it should be resistant to inconsistencies in orders of iterative solvers inside the list of identifiers in\n\t * const.h and in the list 'params' above.\n\t */\n\tind_m=0;\n\twhile (params[ind_m].meth!=method_in) {\n\t\tind_m++;\n\t\tif (ind_m>=LENGTH(params))\n\t\t\tLogError(ONE_POS,\"Parameters for the given iterative solver are not found in list 'params'\");\n\t}\n```\n\nThe `IterativeSolver()` is called from `int CalculateE() of CalculateE.c`.\n\n```CalculateE.c\nint CalculateE(const enum incpol which,const enum Eftype type)\n{\n    ...\n    D(\"Iterative solver started\");\n    exit_status=IterativeSolver(IterMethod,which);\n\n```\n"}