{"context": " More than 1 year has passed since last update.\n\n\u8981\u6c42\nstd::tuple \u306b\u3088\u308b\u4efb\u610f\u306e\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u30bf\u30d7\u30eb TUPLE_TYPE \u578b\u306e tuple \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u4efb\u610f\u306e\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u30d5\u30a1\u30f3\u30af\u30bf\u30fc FUNCTOR_TYPE \u578b\u306e functor \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b apply \u95a2\u6570\u3092\u4f5c\u6210\u3057\u305f\u3044\u3002\n\n\u671f\u5f85\u3055\u308c\u308b\u4f7f\u7528\u4f8b\nauto tuple = std::make_tuple( 1, 2.3f, '4', \"567\" );\nauto functor = []( auto value ){ std::cout << value << \"\\n\"; };\napply( tuple, functor ); // <-- \u3053\u308c\u3092\u4f5c\u308a\u305f\u3044\n\n\n\u671f\u5f85\u3055\u308c\u308b\u7d50\u679c\n\u3053\u306e apply \u306b\u671f\u5f85\u3055\u308c\u308b\u7d50\u679c\u3068\u3057\u3066\u6b21\u306e\u51fa\u529b\u3092\u5f97\u305f\u3044\u3002\n1\n2.3\n4\n567\n\n\n\u305d\u306e\u3088\u3046\u306a apply \u306e\u4f5c\u308a\u65b9\n#include <cstddef>\n#include <tuple>\n#include <utility>\n\ntemplate < typename TUPLE_TYPE, typename FUNCTOR_TYPE, std::size_t ... INDICES >\nvoid apply( TUPLE_TYPE&& tuple, FUNCTOR_TYPE&& functor, std::index_sequence< INDICES ... > )\n{\n  using swallow = int[];\n  (void) swallow { 1, ( functor( std::get< INDICES >( std::forward< TUPLE_TYPE >( tuple ) ) ), void(), int {} ) ... };\n}\n\ntemplate < typename TUPLE_TYPE, typename FUNCTOR_TYPE >\nvoid apply( TUPLE_TYPE&& tuple, FUNCTOR_TYPE&& functor )\n{\n  constexpr std::size_t SIZE = std::tuple_size< std::remove_reference_t< TUPLE_TYPE > >::value;\n  apply( std::forward< TUPLE_TYPE >( tuple ), std::forward< FUNCTOR_TYPE >( functor ), std::make_index_sequence< SIZE >{ } );\n}\n\n\n\u4f7f\u3044\u65b9\n#include <iostream>\n\nauto main() -> int\n{\n  apply\n  ( std::make_tuple( 1, 2.3f, '4', \"567\" )\n  , []( auto value ) { std::cout << value << \"\\n\"; }\n  );\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n1\n2.3\n4\n567\n\n\nWandbox\n\nhttp://melpon.org/wandbox/permlink/ceeFpSkMnjNyMvDB\n\n\n\u30dd\u30a4\u30f3\u30c8\n\nC++14 \u306e\u6a5f\u80fd : std::make_index_sequence, std::remove_reference_t\n\nC++11 \u306e\u6a5f\u80fd : variadic-templates, r-value-references, constexpr, auto, std::tuple_size, std::forward\n\n\n\n\u30c8\u30ea\u30c3\u30af\n\n\napple \u306e swallow \u578b\uff08\u3064\u307e\u308a int[] \u578b\uff09\u306e\u30d6\u30ec\u30fc\u30b9\u521d\u671f\u5316\u306b\u3088\u308a\u3001functor( std::get< INDEX >( tuple ) ) \u7684\u306a\u52d5\u4f5c\u306b\u3064\u3044\u3066 INDEX \u3092 INDICES ... \u306b\u3064\u3044\u3066\u4e00\u6319\u306b\u5b9a\u7fa9\u3059\u308b\u3002\n\n\n\u3053\u306e\u6642\u3001C++ \u3067\u306f void[] \u578b\u3067\u306f\u6271\u3048\u306a\u3044\u306e\u3067 int[] \u3068\u3057\u3066\u3044\u308b\u3002\n\n\n\u3088\u3063\u3066\u3001int \u578b\u3092\u4f5c\u3089\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u304b\u3089 swallow \u3067\u521d\u671f\u5316\u3055\u308c\u308b\u500b\u3005\u306e\u8981\u7d20\u306f , int{ } \uff08\u30ab\u30f3\u30de\u6f14\u7b97\u5b50\uff0bint\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\uff09\u3092\u4ed8\u52a0\u3057\u3001\u7d50\u679c\u304c int \u578b\u3068\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\n\n\u3053\u306e\u30c8\u30ea\u30c3\u30af\u306e\u305f\u3081\u306b INDICES \u304c\u5c55\u958b\u3055\u308c\u305f\u969b\u306b\u5b8c\u5168\u306b f() \u3068 , int { } \u3060\u3051\u3067\u306f f() \u304c int \u3092\u8fd4\u3059\u3068\u56f0\u308b\u306e\u3067\u9593\u306b , void() \u3082\u631f\u3080\u3002\n\n\n\n\n\nswallow \u306f\u751f\u6210\u3055\u308c\u305f\u5f8c\u306b\u305d\u308c\u81ea\u4f53\u306f apply \u306e\u4e2d\u3067\u306f\u4f7f\u308f\u306a\u3044\u306e\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u304c warning \u3092\u51fa\u3059\u3002\u305d\u3053\u3067 (void) \u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u4e0d\u8981\u306a\u8b66\u544a\u304c\u51fa\u3067\u7169\u308f\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n\u7a7a\u3063\u307d\u306e int[] { } \u3092\u5b9a\u7fa9\u3057\u306a\u3044\u305f\u3081\u306b\u30c0\u30df\u30fc\u3067\u5148\u982d\u306b 1 \u3092\u5165\u308c\u3066\u3044\u308b\u3002\n\n\n\n\nReference\n\n\nStackExchange - CODE REVIEW - std::tuple foreach implementation - Answer ( Louis Dionne )\n\n\u4eca\u56de\u306e\u8a18\u4e8b\u306f\u3053\u306e Answer \u3092\u5143\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n# \u8981\u6c42\n\n`std::tuple` \u306b\u3088\u308b\u4efb\u610f\u306e\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u30bf\u30d7\u30eb `TUPLE_TYPE` \u578b\u306e `tuple` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u4efb\u610f\u306e\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u30d5\u30a1\u30f3\u30af\u30bf\u30fc `FUNCTOR_TYPE` \u578b\u306e `functor` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u9069\u7528\u3059\u308b `apply` \u95a2\u6570\u3092\u4f5c\u6210\u3057\u305f\u3044\u3002\n\n## \u671f\u5f85\u3055\u308c\u308b\u4f7f\u7528\u4f8b\n\n```cpp\nauto tuple = std::make_tuple( 1, 2.3f, '4', \"567\" );\nauto functor = []( auto value ){ std::cout << value << \"\\n\"; };\napply( tuple, functor ); // <-- \u3053\u308c\u3092\u4f5c\u308a\u305f\u3044\n```\n\n## \u671f\u5f85\u3055\u308c\u308b\u7d50\u679c\n\n\u3053\u306e apply \u306b\u671f\u5f85\u3055\u308c\u308b\u7d50\u679c\u3068\u3057\u3066\u6b21\u306e\u51fa\u529b\u3092\u5f97\u305f\u3044\u3002\n\n```\n1\n2.3\n4\n567\n```\n\n# \u305d\u306e\u3088\u3046\u306a `apply` \u306e\u4f5c\u308a\u65b9\n\n```cpp\n#include <cstddef>\n#include <tuple>\n#include <utility>\n\ntemplate < typename TUPLE_TYPE, typename FUNCTOR_TYPE, std::size_t ... INDICES >\nvoid apply( TUPLE_TYPE&& tuple, FUNCTOR_TYPE&& functor, std::index_sequence< INDICES ... > )\n{\n  using swallow = int[];\n  (void) swallow { 1, ( functor( std::get< INDICES >( std::forward< TUPLE_TYPE >( tuple ) ) ), void(), int {} ) ... };\n}\n\ntemplate < typename TUPLE_TYPE, typename FUNCTOR_TYPE >\nvoid apply( TUPLE_TYPE&& tuple, FUNCTOR_TYPE&& functor )\n{\n  constexpr std::size_t SIZE = std::tuple_size< std::remove_reference_t< TUPLE_TYPE > >::value;\n  apply( std::forward< TUPLE_TYPE >( tuple ), std::forward< FUNCTOR_TYPE >( functor ), std::make_index_sequence< SIZE >{ } );\n}\n```\n\n## \u4f7f\u3044\u65b9\n\n```cpp\n#include <iostream>\n\nauto main() -> int\n{\n  apply\n  ( std::make_tuple( 1, 2.3f, '4', \"567\" )\n  , []( auto value ) { std::cout << value << \"\\n\"; }\n  );\n}\n```\n\n## \u5b9f\u884c\u7d50\u679c\n\n```\n1\n2.3\n4\n567\n```\n\n## Wandbox\n\n- http://melpon.org/wandbox/permlink/ceeFpSkMnjNyMvDB\n\n# \u30dd\u30a4\u30f3\u30c8\n\n- C++14 \u306e\u6a5f\u80fd : `std::make_index_sequence`, `std::remove_reference_t`\n- C++11 \u306e\u6a5f\u80fd : variadic-templates, r-value-references, `constexpr`, `auto`, `std::tuple_size`, `std::forward`\n\n## \u30c8\u30ea\u30c3\u30af\n\n- `apple` \u306e `swallow` \u578b\uff08\u3064\u307e\u308a `int[]` \u578b\uff09\u306e\u30d6\u30ec\u30fc\u30b9\u521d\u671f\u5316\u306b\u3088\u308a\u3001`functor( std::get< INDEX >( tuple ) )` \u7684\u306a\u52d5\u4f5c\u306b\u3064\u3044\u3066 `INDEX` \u3092 `INDICES ...` \u306b\u3064\u3044\u3066\u4e00\u6319\u306b\u5b9a\u7fa9\u3059\u308b\u3002\n    - \u3053\u306e\u6642\u3001C++ \u3067\u306f `void[]` \u578b\u3067\u306f\u6271\u3048\u306a\u3044\u306e\u3067 `int[]` \u3068\u3057\u3066\u3044\u308b\u3002\n        - \u3088\u3063\u3066\u3001`int` \u578b\u3092\u4f5c\u3089\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u304b\u3089 `swallow` \u3067\u521d\u671f\u5316\u3055\u308c\u308b\u500b\u3005\u306e\u8981\u7d20\u306f `, int{ }` \uff08\u30ab\u30f3\u30de\u6f14\u7b97\u5b50\uff0b`int`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\uff09\u3092\u4ed8\u52a0\u3057\u3001\u7d50\u679c\u304c `int` \u578b\u3068\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n            - \u3053\u306e\u30c8\u30ea\u30c3\u30af\u306e\u305f\u3081\u306b `INDICES` \u304c\u5c55\u958b\u3055\u308c\u305f\u969b\u306b\u5b8c\u5168\u306b `f()` \u3068 `, int { }` \u3060\u3051\u3067\u306f `f()` \u304c `int` \u3092\u8fd4\u3059\u3068\u56f0\u308b\u306e\u3067\u9593\u306b `, void()` \u3082\u631f\u3080\u3002\n    - `swallow` \u306f\u751f\u6210\u3055\u308c\u305f\u5f8c\u306b\u305d\u308c\u81ea\u4f53\u306f `apply` \u306e\u4e2d\u3067\u306f\u4f7f\u308f\u306a\u3044\u306e\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u304c warning \u3092\u51fa\u3059\u3002\u305d\u3053\u3067 `(void)` \u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u304a\u304f\u3053\u3068\u3067\u4e0d\u8981\u306a\u8b66\u544a\u304c\u51fa\u3067\u7169\u308f\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002\n    - \u7a7a\u3063\u307d\u306e `int[] { } ` \u3092\u5b9a\u7fa9\u3057\u306a\u3044\u305f\u3081\u306b\u30c0\u30df\u30fc\u3067\u5148\u982d\u306b `1` \u3092\u5165\u308c\u3066\u3044\u308b\u3002\n\n# Reference\n\n- [StackExchange - CODE REVIEW - std::tuple foreach implementation - Answer ( Louis Dionne )](http://codereview.stackexchange.com/questions/51407/stdtuple-foreach-implementation?answertab=active#tab-top)\n    - \u4eca\u56de\u306e\u8a18\u4e8b\u306f\u3053\u306e Answer \u3092\u5143\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n", "tags": ["C++", "tuple", "Functor", "apply", "C++14"]}