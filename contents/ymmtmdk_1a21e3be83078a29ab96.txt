{"context": " More than 1 year has passed since last update.\u306a\u3093\u304b\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u30d6\u30fc\u30e0\u304c\u81ea\u5206\u306e\u4e2d\u3067\u8d77\u304d\u3066\u307e\u3057\u305f\u3002\n\u65e9\u304f\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308b\u3093\u3060\u308d\u3046\u3068\u8003\u3048\u3066\u3066\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7684\u306b\u3070\u3057\u3063\u3068\u5206\u5272\u3059\u308b\u3093\u3060\u304b\u3089\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u884c\u3051\u308b\u3093\u3058\u3083\u306d\u3068\u601d\u3063\u3066OpenMP\u5316\u3057\u3066\u307f\u305f\u3002\n\nqsort.cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <omp.h>\n\ntemplate<typename T>\nclass Rand{\n  T x = 1;\npublic:\n  T next() {\n    x ^= x >> 12;\n    x ^= x << 25;\n    x ^= x >> 27;\n    return x * 2685821657736338717;\n  }\n};\n\ntemplate<typename T>\nvoid part(T a[], int& i, int& j) {\n  const T pivot = a[i];\n  while (1) {\n    while (a[i] < pivot) i++;\n    while (pivot < a[j]) j--;\n    if (i >= j) break;\n    const T tmp = a[i]; a[i] = a[j]; a[j] = tmp;\n    i++; j--;\n  }\n}\n\ntemplate<typename T>\nvoid _qsort(T a[], const int left, const int right) {\n  if (left < right) {\n    int i = left, j = right;\n    part(a, i, j);\n    _qsort(a, left, i - 1);\n    _qsort(a, j + 1, right);\n  }\n}\n\ntemplate<typename T>\nvoid qsort(T a[], const int left1, const int right1) {\n  if (left1 >= right1) return;\n\n  int i1 = left1, j1 = right1;\n  part(a, i1, j1);\n  const int left2 = left1, right2 = i1-1;\n  const int left3 = j1+1, right3 = right1;\n\n  int i2 = left2, j2 = right2;\n  int i3 = left3, j3 = right3;\n  part(a, i2, j2);\n  part(a, i3, j3);\n\n#pragma omp parallel shared(a)\n  {\n#pragma omp sections\n    {\n#pragma omp section\n      _qsort(a, left2, i2 - 1);\n#pragma omp section\n      _qsort(a, j2 + 1, right2);\u3002\n#pragma omp section\n      _qsort(a, left3, i3 - 1);\n#pragma omp section\n      _qsort(a, j3 + 1, right3);\n    }\n  }\n}\n\nint main(int argc, char** argv) {\n  const int size = 10000000;\n\n  auto rand = new Rand<int>();\n\n  auto a = new int[size];\n  for (int i = 0; i < size; i++) {\n    a[i] = rand->next();\n  }\n\n  double st = omp_get_wtime();\n  qsort(a, 0, size-1);\n  double ut = omp_get_wtime() - st;\n  printf(\"Used time         = %2.6lf (s)\\n\", ut);\n\n  delete a;\n  return 0;\n}\n\n\n\u3084\u308a\u65b9\u306f\u4e00\u767a\u76ee\u306b\u547c\u3070\u308c\u308bqsort\u95a2\u6570\u3067\u914d\u5217\u30924\u3064\u306b\u5206\u5272\u3057\u3066\u3001\u305d\u308c\u3092\u30b9\u30ec\u30c3\u30c9\u306b\u3057\u3066\u666e\u901a\u306e\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u3042\u308b_qsort\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\u611f\u3058\u3002\u666e\u901a\u306e\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306b\u30e9\u30c3\u30d1\u30fc\u304b\u307e\u3059\u30a4\u30e1\u30fc\u30b8\u3002\nqsort\u95a2\u6570\u304c\u3054\u3061\u3083\u3063\u3066\u308b\u306e\u306f\u672c\u6765\u3001\u518d\u5e30\u306a\u51e6\u7406\u3092\u4e00\u6bb5\u968e\u3001\u7121\u7406\u3084\u308a\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3057\u3066\u308b\u304b\u3089\u3002\u307e\u305a\u5168\u4f53\u3092\u5206\u5272(part\u95a2\u6570)\u3057\u3066\u3001\u3055\u3089\u306b\u305d\u308c\u305e\u308c\u3092\u5206\u5272(part\u95a2\u6570)\u3059\u308b\u3053\u3068\u30674\u5206\u5272\u306b\u3057\u3066\u3001_qsort\u306b\u6e21\u3059\u3001\u3063\u3066\u3044\u3046\u30e9\u30c3\u30d1\u30fc\u304c\u3053\u306e\u95a2\u6570\u3002\n\u809d\u5fc3\u306e\u901f\u5ea6\u306f\u5272\u3068\u65e9\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u306a\u3093\u304b\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u30d6\u30fc\u30e0\u304c\u81ea\u5206\u306e\u4e2d\u3067\u8d77\u304d\u3066\u307e\u3057\u305f\u3002\n\u65e9\u304f\u3059\u308b\u306b\u306f\u3069\u3046\u3059\u308b\u3093\u3060\u308d\u3046\u3068\u8003\u3048\u3066\u3066\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u7684\u306b\u3070\u3057\u3063\u3068\u5206\u5272\u3059\u308b\u3093\u3060\u304b\u3089\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u884c\u3051\u308b\u3093\u3058\u3083\u306d\u3068\u601d\u3063\u3066OpenMP\u5316\u3057\u3066\u307f\u305f\u3002\n\n\n```c++:qsort.cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <omp.h>\n\ntemplate<typename T>\nclass Rand{\n  T x = 1;\npublic:\n  T next() {\n    x ^= x >> 12;\n    x ^= x << 25;\n    x ^= x >> 27;\n    return x * 2685821657736338717;\n  }\n};\n\ntemplate<typename T>\nvoid part(T a[], int& i, int& j) {\n  const T pivot = a[i];\n  while (1) {\n    while (a[i] < pivot) i++;\n    while (pivot < a[j]) j--;\n    if (i >= j) break;\n    const T tmp = a[i]; a[i] = a[j]; a[j] = tmp;\n    i++; j--;\n  }\n}\n\ntemplate<typename T>\nvoid _qsort(T a[], const int left, const int right) {\n  if (left < right) {\n    int i = left, j = right;\n    part(a, i, j);\n    _qsort(a, left, i - 1);\n    _qsort(a, j + 1, right);\n  }\n}\n\ntemplate<typename T>\nvoid qsort(T a[], const int left1, const int right1) {\n  if (left1 >= right1) return;\n\n  int i1 = left1, j1 = right1;\n  part(a, i1, j1);\n  const int left2 = left1, right2 = i1-1;\n  const int left3 = j1+1, right3 = right1;\n\n  int i2 = left2, j2 = right2;\n  int i3 = left3, j3 = right3;\n  part(a, i2, j2);\n  part(a, i3, j3);\n\n#pragma omp parallel shared(a)\n  {\n#pragma omp sections\n    {\n#pragma omp section\n      _qsort(a, left2, i2 - 1);\n#pragma omp section\n      _qsort(a, j2 + 1, right2);\u3002\n#pragma omp section\n      _qsort(a, left3, i3 - 1);\n#pragma omp section\n      _qsort(a, j3 + 1, right3);\n    }\n  }\n}\n\nint main(int argc, char** argv) {\n  const int size = 10000000;\n\n  auto rand = new Rand<int>();\n\n  auto a = new int[size];\n  for (int i = 0; i < size; i++) {\n    a[i] = rand->next();\n  }\n\n  double st = omp_get_wtime();\n  qsort(a, 0, size-1);\n  double ut = omp_get_wtime() - st;\n  printf(\"Used time         = %2.6lf (s)\\n\", ut);\n\n  delete a;\n  return 0;\n}\n```\n\n\u3084\u308a\u65b9\u306f\u4e00\u767a\u76ee\u306b\u547c\u3070\u308c\u308bqsort\u95a2\u6570\u3067\u914d\u5217\u30924\u3064\u306b\u5206\u5272\u3057\u3066\u3001\u305d\u308c\u3092\u30b9\u30ec\u30c3\u30c9\u306b\u3057\u3066\u666e\u901a\u306e\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3067\u3042\u308b_qsort\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\u611f\u3058\u3002\u666e\u901a\u306e\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306b\u30e9\u30c3\u30d1\u30fc\u304b\u307e\u3059\u30a4\u30e1\u30fc\u30b8\u3002\n\nqsort\u95a2\u6570\u304c\u3054\u3061\u3083\u3063\u3066\u308b\u306e\u306f\u672c\u6765\u3001\u518d\u5e30\u306a\u51e6\u7406\u3092\u4e00\u6bb5\u968e\u3001\u7121\u7406\u3084\u308a\u30a4\u30f3\u30e9\u30a4\u30f3\u5316\u3057\u3066\u308b\u304b\u3089\u3002\u307e\u305a\u5168\u4f53\u3092\u5206\u5272(part\u95a2\u6570)\u3057\u3066\u3001\u3055\u3089\u306b\u305d\u308c\u305e\u308c\u3092\u5206\u5272(part\u95a2\u6570)\u3059\u308b\u3053\u3068\u3067\b4\u5206\u5272\u306b\u3057\u3066\u3001_qsort\u306b\u6e21\u3059\u3001\u3063\u3066\u3044\u3046\u30e9\u30c3\u30d1\u30fc\u304c\u3053\u306e\u95a2\u6570\u3002\n\n\u809d\u5fc3\u306e\u901f\u5ea6\u306f\u5272\u3068\u65e9\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n", "tags": ["C++", "OpenMP"]}