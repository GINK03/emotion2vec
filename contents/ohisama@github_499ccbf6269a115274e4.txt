{"tags": ["Arduino", "I2C", "BMP085"], "context": " More than 1 year has passed since last update.\u30aa\u30fc\u30af\u30b7\u30e7\u30f3\u3067\u624b\u306b\u5165\u308c\u305f\u3001BMP085\u3092arduino uno\u306b\u3064\u306a\u3044\u3067\u898b\u307e\u3057\u305f\u3002\n\n\u5199\u771f\n\n\n\u30cf\u30a4\u30d1\u30fc\u30bf\u30fc\u30df\u30ca\u30eb\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\nhttps://github.com/ohisama/Bmp085\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n#include <Wire.h>\n#include <Bmp085.h>\n\nBmp085 dps = Bmp085();\nlong Temperature = 0, Pressure = 0, Altitude = 0;\nvoid setup(void)\n{\n    pinMode(13, OUTPUT);\n    Serial.begin(9600);\n    delay(1000);\n    dps.init();\n    showall();\n    Serial.println(\"Registers dump\");\n    dumpRegisters();\n    Serial.println(\"Calibration data\");\n    dps.dumpCalData();\n    delay(5000);\n}\nvoid loop(void)\n{\n    dps.getTemperature(&Temperature);\n    dps.getPressure(&Pressure);\n    dps.getAltitude(&Altitude);\n    Serial.print(\"Temp(C): \");\n    Serial.print(Temperature);\n    Serial.print(\" Alt(cm): \");\n    Serial.print(Altitude);\n    Serial.print(\" Pressure(Pa): \");\n    Serial.println(Pressure);\n    digitalWrite(13, HIGH);\n    delay(1000);\n    digitalWrite(13, LOW);\n    delay(1000);\n}\nvoid showall(void)\n{ \n    Serial.println(\"Current Bmp085 settings\");\n    Serial.print(\"device address = 0x\");\n    Serial.println(dps.getDevAddr(), HEX);\n    Serial.print(\"Mode = \");\n    switch (dps.getMode())\n    {\n    case MODE_ULTRA_LOW_POWER:\n        Serial.println(\"MODE_ULTRA_LOW_POWER\");\n    break;\n    case MODE_STANDARD:\n        Serial.println(\"MODE_STANDARD\");\n    break;\n    case MODE_HIGHRES:\n        Serial.println(\"MODE_HIGHRES\");\n    break;\n    case MODE_ULTRA_HIGHRES:\n        Serial.println(\"MODE_ULTRA_HIGHRES\");\n    break;\n    }\n}\nvoid dumpRegisters()\n{\n    byte ValidRegisterAddr[] = {\n        0xAA,\n        0xAB,\n        0xAC,\n        0xAD,\n        0xAE,\n        0xAF,\n        0xB0,\n        0xB1,\n        0xB2,\n        0xB3,\n        0xB4,\n        0xB5,\n        0xB6,\n        0xB7,\n        0xB8,\n        0xB9,\n        0xBA,\n        0xBB,\n        0xBC,\n        0xBD,\n        0xBE,\n        0xBF,\n        0xF6,\n        0xF7,\n        0xF8,\n        0xF9\n    };\n    byte _b, i, totregisters = sizeof(ValidRegisterAddr);\n    Serial.println(\"---dump start---\");\n    Serial.println(\"Register address|Register data\");\n    Serial.println(\"Reg.address(hex, dec) Reg.data(bin, hex, dec)\");\n    for (i = 0; i < totregisters; i++)\n    {\n        Serial.print(\"0x\");\n        Serial.print(ValidRegisterAddr[i], HEX);\n        Serial.print(\", \");\n        Serial.print(ValidRegisterAddr[i], DEC);\n        Serial.print(\", \");\n        dps.readmem(ValidRegisterAddr[i], 1, &_b);\n        Serial.print(\"b\");\n        print_bits(_b);\n        Serial.print(\", 0x\");\n        Serial.print(_b,HEX);\n        Serial.print(\", \");\n        Serial.println(_b,DEC);\n    }\n    Serial.println(\"---dump end---\");\n}\nvoid print_bits(byte val)\n{\n    int i;\n    for (i = 7; i >= 0; i--) Serial.print(val >> i & 1, BIN);\n}\n\n\n\u30aa\u30fc\u30af\u30b7\u30e7\u30f3\u3067\u624b\u306b\u5165\u308c\u305f\u3001BMP085\u3092arduino uno\u306b\u3064\u306a\u3044\u3067\u898b\u307e\u3057\u305f\u3002\n##\u5199\u771f\n![MVC-018S.JPG](https://qiita-image-store.s3.amazonaws.com/0/18104/2668bdde-7054-cd17-b03d-80021fd11fe8.jpeg)\n\n##\u30cf\u30a4\u30d1\u30fc\u30bf\u30fc\u30df\u30ca\u30eb\n![bmp085.PNG](https://qiita-image-store.s3.amazonaws.com/0/18104/ea72d85f-a3d2-eef8-d206-1e85170ed23d.png)\n\n##\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\nhttps://github.com/ohisama/Bmp085\n##\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```\n#include <Wire.h>\n#include <Bmp085.h>\n\nBmp085 dps = Bmp085();\nlong Temperature = 0, Pressure = 0, Altitude = 0;\nvoid setup(void)\n{\n\tpinMode(13, OUTPUT);\n\tSerial.begin(9600);\n\tdelay(1000);\n\tdps.init();\n\tshowall();\n\tSerial.println(\"Registers dump\");\n\tdumpRegisters();\n\tSerial.println(\"Calibration data\");\n\tdps.dumpCalData();\n\tdelay(5000);\n}\nvoid loop(void)\n{\n\tdps.getTemperature(&Temperature);\n\tdps.getPressure(&Pressure);\n\tdps.getAltitude(&Altitude);\n\tSerial.print(\"Temp(C): \");\n\tSerial.print(Temperature);\n\tSerial.print(\" Alt(cm): \");\n\tSerial.print(Altitude);\n\tSerial.print(\" Pressure(Pa): \");\n\tSerial.println(Pressure);\n\tdigitalWrite(13, HIGH);\n\tdelay(1000);\n\tdigitalWrite(13, LOW);\n\tdelay(1000);\n}\nvoid showall(void)\n{ \n\tSerial.println(\"Current Bmp085 settings\");\n\tSerial.print(\"device address = 0x\");\n\tSerial.println(dps.getDevAddr(), HEX);\n\tSerial.print(\"Mode = \");\n\tswitch (dps.getMode())\n\t{\n\tcase MODE_ULTRA_LOW_POWER:\n\t\tSerial.println(\"MODE_ULTRA_LOW_POWER\");\n\tbreak;\n\tcase MODE_STANDARD:\n\t\tSerial.println(\"MODE_STANDARD\");\n\tbreak;\n\tcase MODE_HIGHRES:\n\t\tSerial.println(\"MODE_HIGHRES\");\n\tbreak;\n\tcase MODE_ULTRA_HIGHRES:\n\t\tSerial.println(\"MODE_ULTRA_HIGHRES\");\n\tbreak;\n\t}\n}\nvoid dumpRegisters()\n{\n\tbyte ValidRegisterAddr[] = {\n\t\t0xAA,\n\t\t0xAB,\n\t\t0xAC,\n\t\t0xAD,\n\t\t0xAE,\n\t\t0xAF,\n\t\t0xB0,\n\t\t0xB1,\n\t\t0xB2,\n\t\t0xB3,\n\t\t0xB4,\n\t\t0xB5,\n\t\t0xB6,\n\t\t0xB7,\n\t\t0xB8,\n\t\t0xB9,\n\t\t0xBA,\n\t\t0xBB,\n\t\t0xBC,\n\t\t0xBD,\n\t\t0xBE,\n\t\t0xBF,\n\t\t0xF6,\n\t\t0xF7,\n\t\t0xF8,\n\t\t0xF9\n\t};\n\tbyte _b, i, totregisters = sizeof(ValidRegisterAddr);\n\tSerial.println(\"---dump start---\");\n\tSerial.println(\"Register address|Register data\");\n\tSerial.println(\"Reg.address(hex, dec) Reg.data(bin, hex, dec)\");\n\tfor (i = 0; i < totregisters; i++)\n\t{\n\t\tSerial.print(\"0x\");\n\t\tSerial.print(ValidRegisterAddr[i], HEX);\n\t\tSerial.print(\", \");\n\t\tSerial.print(ValidRegisterAddr[i], DEC);\n\t\tSerial.print(\", \");\n\t\tdps.readmem(ValidRegisterAddr[i], 1, &_b);\n\t\tSerial.print(\"b\");\n\t\tprint_bits(_b);\n\t\tSerial.print(\", 0x\");\n\t\tSerial.print(_b,HEX);\n\t\tSerial.print(\", \");\n\t\tSerial.println(_b,DEC);\n\t}\n\tSerial.println(\"---dump end---\");\n}\nvoid print_bits(byte val)\n{\n\tint i;\n\tfor (i = 7; i >= 0; i--) Serial.print(val >> i & 1, BIN);\n}\n\n```\n\n\n"}