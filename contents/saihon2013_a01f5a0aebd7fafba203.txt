{"context": " More than 1 year has passed since last update.c++11 & boost\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u89e3\u304d\u307e\u3057\u305f\u3002\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <boost/algorithm/string.hpp>\n\nstruct num_list\n{\n    int l[9];\n};\n\n\nstruct num_list solve(std::string const &input , const struct num_list nlist)\n{\n    struct num_list out_nlist = {0};\n    const unsigned long n = strtoul(input.c_str(), NULL, 16);\n    unsigned long tmp = 0;\n\n    for(int j = 0; j < 9; ++j)\n    {\n        int count_up = 0;\n        int count_down = 0;\n        for(int i = 0; i < 8; ++i)\n        {\n            tmp = (n >> (7-(j+i))) & 0x1;\n            if(tmp == 0x1)\n                count_up++;\n            else\n                break;\n        }\n        for(int i = 0; i < 8; ++i)\n        {\n            tmp = (n >> (8-(j-i))) & 0x1;\n            if(tmp == 0x1)\n                count_down++;\n            else\n                break;\n        }\n        if(count_up != 0 && count_down == 0)\n            out_nlist.l[j+count_up] = nlist.l[j];\n        else if(count_up == 0 && count_down != 0)\n            out_nlist.l[j-count_down] = nlist.l[j];\n        else\n            out_nlist.l[j] = nlist.l[j];\n    }\n    return out_nlist;\n}\n\nvoid test(std::string const & input, std::string const & ans)\n{\n    std::list<std::string> results;     //\u5206\u5272\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\n    boost::split(results, input, boost::is_any_of(\"-\")); //-\u533a\u5207\u308a\n    struct num_list nlist = {{0,1,2,3,4,5,6,7,8}};\n\n    for(const std::string str: results )\n        nlist = solve(str,nlist);\n\n    std::stringstream ss;\n    for(const int l: nlist.l)\n        ss << l;\n\n    std::string output = (ss.str() == ans) ? \"OK\": \"NG\";\n    std::cout << output << std::endl;\n    return;\n}\n\nint main (void)\n{\n/*0*/ test( \"d6-7b-e1-9e\", \"740631825\" );\n/*1*/ test( \"83-4c-20-10\", \"123805476\" );\n/*2*/ test( \"fb-f7-7e-df\", \"274056813\" );\n/*3*/ test( \"55-33-0f-ff\", \"123456780\" );\n/*4*/ test( \"00-00-00-00\", \"012345678\" );\n/*5*/ test( \"00-00-00-55\", \"021436587\" );\n/*6*/ test( \"40-10-04-01\", \"021436587\" );\n/*7*/ test( \"00-00-aa-00\", \"103254768\" );\n/*8*/ test( \"80-20-08-02\", \"103254768\" );\n/*9*/ test( \"ff-7e-3c-18\", \"876543210\" );\n/*10*/ test( \"aa-55-aa-55\", \"351708264\" );\n/*11*/ test( \"55-aa-aa-55\", \"012345678\" );\n/*12*/ test( \"db-24-db-e7\", \"812543670\" );\n/*13*/ test( \"00-01-00-40\", \"021345687\" );\n/*14*/ test( \"00-00-80-00\", \"102345678\" );\n/*15*/ test( \"01-40-00-00\", \"021345687\" );\n/*16*/ test( \"00-00-00-02\", \"012345768\" );\n/*17*/ test( \"00-00-02-00\", \"012345768\" );\n/*18*/ test( \"00-14-00-00\", \"012436578\" );\n/*19*/ test( \"00-00-01-40\", \"021345687\" );\n/*20*/ test( \"00-80-01-00\", \"102345687\" );\n/*21*/ test( \"c8-00-00-81\", \"120354687\" );\n/*22*/ test( \"05-48-08-14\", \"021435687\" );\n/*23*/ test( \"24-05-00-f0\", \"413205687\" );\n/*24*/ test( \"40-08-14-01\", \"021536487\" );\n/*25*/ test( \"18-c8-80-80\", \"210534678\" );\n/*26*/ test( \"1c-88-52-00\", \"120564738\" );\n/*27*/ test( \"ec-dc-67-62\", \"213468705\" );\n/*28*/ test( \"0a-b6-60-e9\", \"035162784\" );\n/*29*/ test( \"52-d6-c6-c2\", \"120345678\" );\n/*30*/ test( \"47-e7-b0-36\", \"231047658\" );\n/*31*/ test( \"0f-85-91-aa\", \"108263754\" );\n/*32*/ test( \"76-b6-ed-f3\", \"601435782\" );\n/*33*/ test( \"f5-5e-f7-3d\", \"025847163\" );\n/*34*/ test( \"dd-e7-fb-f9\", \"610247538\" );\n/*35*/ test( \"8f-f4-af-fd\", \"583246017\" );\n/*36*/ test( \"bf-fb-cb-f7\", \"105382674\" );\n/*37*/ test( \"e5-fd-ff-ff\", \"512046378\" );\n/*38*/ test( \"ef-df-ef-fe\", \"713205648\" );\n/*39*/ test( \"bf-7f-fd-d7\", \"826437105\" );\n/*40*/ test( \"36-ff-df-de\", \"814527603\" );\n/*41*/ test( \"6f-dd-ff-ff\", \"230685147\" );\n    return 0;\n}\n\nc++11 & boost\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u89e3\u304d\u307e\u3057\u305f\u3002\n\n```cpp \n#include <iostream>\n#include <string>\n#include <sstream>\n#include <boost/algorithm/string.hpp>\n\nstruct num_list\n{\n\tint l[9];\n};\n\n\nstruct num_list solve(std::string const &input , const struct num_list nlist)\n{\n\tstruct num_list out_nlist = {0};\n\tconst unsigned long n = strtoul(input.c_str(), NULL, 16);\n\tunsigned long tmp = 0;\n\t\n\tfor(int j = 0; j < 9; ++j)\n\t{\n\t\tint count_up = 0;\n\t\tint count_down = 0;\n\t\tfor(int i = 0; i < 8; ++i)\n\t\t{\n\t\t\ttmp = (n >> (7-(j+i))) & 0x1;\n\t\t\tif(tmp == 0x1)\n\t\t\t\tcount_up++;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\tfor(int i = 0; i < 8; ++i)\n\t\t{\n\t\t\ttmp = (n >> (8-(j-i))) & 0x1;\n\t\t\tif(tmp == 0x1)\n\t\t\t\tcount_down++;\n\t\t\telse\n\t\t\t\tbreak;\n\t\t}\n\t\tif(count_up != 0 && count_down == 0)\n\t\t\tout_nlist.l[j+count_up] = nlist.l[j];\n\t\telse if(count_up == 0 && count_down != 0)\n\t\t\tout_nlist.l[j-count_down] = nlist.l[j];\n\t\telse\n\t\t\tout_nlist.l[j] = nlist.l[j];\n\t}\n\treturn out_nlist;\n}\n\nvoid test(std::string const & input, std::string const & ans)\n{\n\tstd::list<std::string> results;\t\t//\u5206\u5272\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\n\tboost::split(results, input, boost::is_any_of(\"-\")); //-\u533a\u5207\u308a\n\tstruct num_list nlist = {{0,1,2,3,4,5,6,7,8}};\n\t\n\tfor(const std::string str: results )\n\t\tnlist = solve(str,nlist);\n\t\n\tstd::stringstream ss;\n\tfor(const int l: nlist.l)\n\t\tss << l;\n\t\n\tstd::string output = (ss.str() == ans) ? \"OK\": \"NG\";\n\tstd::cout << output << std::endl;\n\treturn;\n}\n\nint main (void)\n{\n/*0*/ test( \"d6-7b-e1-9e\", \"740631825\" );\n/*1*/ test( \"83-4c-20-10\", \"123805476\" );\n/*2*/ test( \"fb-f7-7e-df\", \"274056813\" );\n/*3*/ test( \"55-33-0f-ff\", \"123456780\" );\n/*4*/ test( \"00-00-00-00\", \"012345678\" );\n/*5*/ test( \"00-00-00-55\", \"021436587\" );\n/*6*/ test( \"40-10-04-01\", \"021436587\" );\n/*7*/ test( \"00-00-aa-00\", \"103254768\" );\n/*8*/ test( \"80-20-08-02\", \"103254768\" );\n/*9*/ test( \"ff-7e-3c-18\", \"876543210\" );\n/*10*/ test( \"aa-55-aa-55\", \"351708264\" );\n/*11*/ test( \"55-aa-aa-55\", \"012345678\" );\n/*12*/ test( \"db-24-db-e7\", \"812543670\" );\n/*13*/ test( \"00-01-00-40\", \"021345687\" );\n/*14*/ test( \"00-00-80-00\", \"102345678\" );\n/*15*/ test( \"01-40-00-00\", \"021345687\" );\n/*16*/ test( \"00-00-00-02\", \"012345768\" );\n/*17*/ test( \"00-00-02-00\", \"012345768\" );\n/*18*/ test( \"00-14-00-00\", \"012436578\" );\n/*19*/ test( \"00-00-01-40\", \"021345687\" );\n/*20*/ test( \"00-80-01-00\", \"102345687\" );\n/*21*/ test( \"c8-00-00-81\", \"120354687\" );\n/*22*/ test( \"05-48-08-14\", \"021435687\" );\n/*23*/ test( \"24-05-00-f0\", \"413205687\" );\n/*24*/ test( \"40-08-14-01\", \"021536487\" );\n/*25*/ test( \"18-c8-80-80\", \"210534678\" );\n/*26*/ test( \"1c-88-52-00\", \"120564738\" );\n/*27*/ test( \"ec-dc-67-62\", \"213468705\" );\n/*28*/ test( \"0a-b6-60-e9\", \"035162784\" );\n/*29*/ test( \"52-d6-c6-c2\", \"120345678\" );\n/*30*/ test( \"47-e7-b0-36\", \"231047658\" );\n/*31*/ test( \"0f-85-91-aa\", \"108263754\" );\n/*32*/ test( \"76-b6-ed-f3\", \"601435782\" );\n/*33*/ test( \"f5-5e-f7-3d\", \"025847163\" );\n/*34*/ test( \"dd-e7-fb-f9\", \"610247538\" );\n/*35*/ test( \"8f-f4-af-fd\", \"583246017\" );\n/*36*/ test( \"bf-fb-cb-f7\", \"105382674\" );\n/*37*/ test( \"e5-fd-ff-ff\", \"512046378\" );\n/*38*/ test( \"ef-df-ef-fe\", \"713205648\" );\n/*39*/ test( \"bf-7f-fd-d7\", \"826437105\" );\n/*40*/ test( \"36-ff-df-de\", \"814527603\" );\n/*41*/ test( \"6f-dd-ff-ff\", \"230685147\" );\n\treturn 0;\n}\n```\n", "tags": ["C++", "\u3069\u3046\u66f8\u304f", "yhpg"]}