{"tags": ["JavaScript", "Node.js", "power-assert", "babel"], "context": "\npower-assert is fully compatible with assert. So functions below are also available though they are not enhanced (does not produce descriptive message).\n\nassert.fail(actual, expected, message, operator)\nassert.throws(block, [error], [message])\nassert.doesNotThrow(block, [message])\nassert.ifError(value)\n\nAPI - power-assert/v1.3.1/README.md\n\n\u3068\u3042\u308b\u3088\u3046\u306b\u3001assert.throws\u306f\u30c6\u30b9\u30c8\u5931\u6557\u6642\u306b\u6574\u5f62\u3055\u308c\u307e\u305b\u3093\u3002\n\ntest.js\nimport assert from 'power-assert';\n\nassert.throws(\n  () => {\n    throw new Error('foo');\n  },\n  /^bar$/\n);\n// Error: foo\n//    at test.js:5:11\n\n\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u6bd4\u8f03\u3092\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\ntest.js\nimport assert from 'power-assert';\n\nassert.throws(\n  () => {\n    throw new Error('foo');\n  },\n  (error) => {\n    assert(error.message === 'bar');\n    return true; // requirement :(\n  }\n);\n// AssertionError:   # test.js:8\n//\n//   assert(error.message === 'bar')\n//          |     |       |\n//          |     \"foo\"   false\n//          Error{}\n\n\n\nthrows\u306e\u6539\u5584\n\u3053\u306e\u307e\u307e\u3067\u3082\u8aad\u3081\u306a\u304f\u306f\u7121\u3044\u3067\u3059\u304c\u3001\u3053\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u884c\u6570\u3092\u3082\u3046\u5c11\u3057\u6e1b\u3089\u3057\u305f\u3044\u306e\u3067\u3001\u30d8\u30eb\u30d1\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\ntest.js\nimport assert from 'power-assert';\n\nfunction throws(block) {\n  let error = {};\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nassert(throws(\n  () => {throw new Error('foo');},\n).message === 'bar');\n//\n// AssertionError:   # test.js:13\n//\n//   assert(throws(() => { throw new Error('foo'); }).message === 'bar')\n//          |                                         |       |\n//          Error{}                                   \"foo\"   false\n\n\n\u307e\u305f\u4e0a\u8a18\u30d8\u30eb\u30d1\u306f\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u304b\u3063\u305f\u3068\u304d\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u51fa\u529b\u3092\u5f97\u307e\u3059\u3002\n\ntest.js\n// ...\nassert(throws(\n  () => {/* noop */},\n).message === 'bar');\n//\n// AssertionError:   # test.js:13\n//\n//   assert(throws(() => {}).message === 'bar')\n//          |                |       |\n//          |                |       false\n//          Object{}         undefined\n\n\n\nPromise\u306erejected\u306e\u30c6\u30b9\u30c8\nPromise\u304creject\u3055\u308c\u305f\u30c6\u30b9\u30c8\u3092\u66f8\u304d\u305f\u3044\u3068\u304d\u3082\u3001\u5358\u7d14\u306b\u66f8\u304f\u3068\u3084\u3084\u52a9\u9577\u3067\u3059\u3002\n\ntest.js\nimport Promise from 'bluebird';\nimport assert from 'power-assert';\n\nPromise.resolve('foo').then(\n  () => {\n    throw new Error('Missing expected rejection..');\n  },\n  (reason) => {\n    assert(reason.message === 'bar');\n  }\n);\n// Unhandled rejection Error: Missing expected rejection..\n\nPromise.reject(new Error('foo')).then(\n  () => {\n    throw new Error('Missing expected rejection..');\n  },\n  (reason) => {\n    assert(reason.message === 'bar');\n  }\n);\n//\n// Unhandled rejection AssertionError:   # test.js:9\n//\n//   assert(reason.message === 'bar')\n//          |      |       |\n//          |      \"foo\"   false\n//          Error{}\n\n\n\n\u30d3\u30eb\u30c9\u30a4\u30f3\u306ePromise\u306fthrow\u3059\u308b\u3068\u4f55\u3082\u51fa\u529b\u3057\u306a\u3044\u305f\u3081\u3001bluebird\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n\nbabel-stage-1\u3068babel-polyfill\u3067async/await\u6587\u304c\u4f7f\u3048\u308b\u305f\u3081\u3001\u3053\u308c\u3082\u30d8\u30eb\u30d1\u3092\u5229\u7528\u3057\u3066\u7c21\u7d20\u306b\u66f8\u304f\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\ntest.js\nimport Promise from 'bluebird';\nimport assert from 'power-assert';\n\nfunction rejects(promise) {\n  return promise\n  .then(\n    () => Promise.reject(new Error('Missing expected rejection..')),\n    (reason) => Promise.resolve(reason),\n  );\n}\n\nasync function test1() {\n  assert((await rejects(Promise.resolve('foo'))).message === 'bar');\n}\nasync function test2() {\n  assert((await rejects(Promise.reject(new Error('foo')))).message === 'bar');\n}\n\ntest1();\n// Unhandled rejection Error: Missing expected rejection..\n\ntest2();\n// Unhandled rejection AssertionError:   # test.js:14\n//\n//   assert((await rejects(Promise.reject(new Error('foo')))).message === 'bar')\n//           |             |       |      |                   |       |\n//           |             |       |      Error{}             \"foo\"   false\n//           |             |       Promise{_bitField:16777216,\"_fulfillmentHandler0\":#Error#,\"_rejectionHandler0\":undefined,\"_promise0\":undefined,\"_receiver0\":undefined}\n//           Error{}       #function#\n\n\n\nassert-exception\n\u4e0a\u8a18\u30d8\u30eb\u30d1throws, rejects\u3092\u3001assert-exception\u3068\u3044\u3046\u540d\u524d\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n> \npower-assert is fully compatible with [assert](https://nodejs.org/api/assert.html). So functions below are also available though they are not enhanced (does not produce descriptive message).\n> \n* `assert.fail(actual, expected, message, operator)`\n* `assert.throws(block, [error], [message])`\n* `assert.doesNotThrow(block, [message])`\n* `assert.ifError(value)`\n>\n[API - power-assert/v1.3.1/README.md](https://github.com/power-assert-js/power-assert/blob/v1.3.1/README.md#api)\n\n\u3068\u3042\u308b\u3088\u3046\u306b\u3001`assert.throws`\u306f\u30c6\u30b9\u30c8\u5931\u6557\u6642\u306b\u6574\u5f62\u3055\u308c\u307e\u305b\u3093\u3002\n\n```js:test.js\nimport assert from 'power-assert';\n\nassert.throws(\n  () => {\n    throw new Error('foo');\n  },\n  /^bar$/\n);\n// Error: foo\n//    at test.js:5:11\n```\n\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u6bd4\u8f03\u3092\u3057\u305f\u3044\u3068\u304d\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```js:test.js\nimport assert from 'power-assert';\n\nassert.throws(\n  () => {\n    throw new Error('foo');\n  },\n  (error) => {\n    assert(error.message === 'bar');\n    return true; // requirement :(\n  }\n);\n// AssertionError:   # test.js:8\n//\n//   assert(error.message === 'bar')\n//          |     |       |\n//          |     \"foo\"   false\n//          Error{}\n```\n\nthrows\u306e\u6539\u5584\n---\n\n\u3053\u306e\u307e\u307e\u3067\u3082\u8aad\u3081\u306a\u304f\u306f\u7121\u3044\u3067\u3059\u304c\u3001\u3053\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u884c\u6570\u3092\u3082\u3046\u5c11\u3057\u6e1b\u3089\u3057\u305f\u3044\u306e\u3067\u3001\u30d8\u30eb\u30d1\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```js:test.js\nimport assert from 'power-assert';\n\nfunction throws(block) {\n  let error = {};\n  try {\n    block();\n  } catch (e) {\n    error = e;\n  }\n  return error;\n}\n\nassert(throws(\n  () => {throw new Error('foo');},\n).message === 'bar');\n//\n// AssertionError:   # test.js:13\n//\n//   assert(throws(() => { throw new Error('foo'); }).message === 'bar')\n//          |                                         |       |\n//          Error{}                                   \"foo\"   false\n```\n\n\u307e\u305f\u4e0a\u8a18\u30d8\u30eb\u30d1\u306f\u3001\u4f8b\u5916\u304c\u767a\u751f\u3057\u306a\u304b\u3063\u305f\u3068\u304d\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u51fa\u529b\u3092\u5f97\u307e\u3059\u3002\n\n```js:test.js\n// ...\nassert(throws(\n  () => {/* noop */},\n).message === 'bar');\n//\n// AssertionError:   # test.js:13\n//\n//   assert(throws(() => {}).message === 'bar')\n//          |                |       |\n//          |                |       false\n//          Object{}         undefined\n```\n\nPromise\u306erejected\u306e\u30c6\u30b9\u30c8\n---\n`Promise`\u304creject\u3055\u308c\u305f\u30c6\u30b9\u30c8\u3092\u66f8\u304d\u305f\u3044\u3068\u304d\u3082\u3001\u5358\u7d14\u306b\u66f8\u304f\u3068\u3084\u3084\u52a9\u9577\u3067\u3059\u3002\n\n```js:test.js\nimport Promise from 'bluebird';\nimport assert from 'power-assert';\n\nPromise.resolve('foo').then(\n  () => {\n    throw new Error('Missing expected rejection..');\n  },\n  (reason) => {\n    assert(reason.message === 'bar');\n  }\n);\n// Unhandled rejection Error: Missing expected rejection..\n\nPromise.reject(new Error('foo')).then(\n  () => {\n    throw new Error('Missing expected rejection..');\n  },\n  (reason) => {\n    assert(reason.message === 'bar');\n  }\n);\n//\n// Unhandled rejection AssertionError:   # test.js:9\n//\n//   assert(reason.message === 'bar')\n//          |      |       |\n//          |      \"foo\"   false\n//          Error{}\n```\n\n> \u30d3\u30eb\u30c9\u30a4\u30f3\u306e`Promise`\u306fthrow\u3059\u308b\u3068\u4f55\u3082\u51fa\u529b\u3057\u306a\u3044\u305f\u3081\u3001[bluebird](https://github.com/petkaantonov/bluebird#readme)\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n\n`babel-stage-1`\u3068`babel-polyfill`\u3067`async/await`\u6587\u304c\u4f7f\u3048\u308b\u305f\u3081\u3001\u3053\u308c\u3082\u30d8\u30eb\u30d1\u3092\u5229\u7528\u3057\u3066\u7c21\u7d20\u306b\u66f8\u304f\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n```js:test.js\nimport Promise from 'bluebird';\nimport assert from 'power-assert';\n\nfunction rejects(promise) {\n  return promise\n  .then(\n    () => Promise.reject(new Error('Missing expected rejection..')),\n    (reason) => Promise.resolve(reason),\n  );\n}\n\nasync function test1() {\n  assert((await rejects(Promise.resolve('foo'))).message === 'bar');\n}\nasync function test2() {\n  assert((await rejects(Promise.reject(new Error('foo')))).message === 'bar');\n}\n\ntest1();\n// Unhandled rejection Error: Missing expected rejection..\n\ntest2();\n// Unhandled rejection AssertionError:   # test.js:14\n//\n//   assert((await rejects(Promise.reject(new Error('foo')))).message === 'bar')\n//           |             |       |      |                   |       |\n//           |             |       |      Error{}             \"foo\"   false\n//           |             |       Promise{_bitField:16777216,\"_fulfillmentHandler0\":#Error#,\"_rejectionHandler0\":undefined,\"_promise0\":undefined,\"_receiver0\":undefined}\n//           Error{}       #function#\n```\n\nassert-exception\n---\n\u4e0a\u8a18\u30d8\u30eb\u30d1`throws`, `rejects`\u3092\u3001[assert-exception](https://github.com/59naga/assert-exception#readme)\u3068\u3044\u3046\u540d\u524d\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n"}