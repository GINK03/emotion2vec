{"tags": ["C#", "WPF"], "context": " More than 1 year has passed since last update.\n\n\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u3055\u308c\u305f\u578b\n\u72ec\u81ea\u306b\u5b9a\u7fa9\u3055\u308c\u305fUserColor\u578b\u304c\u3042\u308b\u3068\u3059\u308b\u2026\n\n\u72ec\u81ea\u5b9a\u7fa9\u3055\u308c\u305f\u578b\nusing System.Windows.Media;\npublic sealed class UserColor {\n    public Color Value {\n        get;\n        set;\n    }\n\n    public static bool TryParse( string input , out UserColor value ) {\n        value = new UserColor();\n\n        switch( input ) {\n            case \"\u8d64\":\n                value.Value = Colors.Red;\n                return true;\n            case \"\u9752\":\n                value.Value = Colors.Blue;\n                return true;\n            case \"\u9ec4\":\n                value.Value = Colors.Yellow;\n                return true;\n            default:\n                break;\n        }\n\n        return false;\n    }\n\n    public override string ToString() => this.Value.ToString();\n}\n\n\n\u6b21\u306bUserColor\u578b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4e00\u3064\u6301\u3064\u3001\u30d3\u30e5\u30fc\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n\u30d3\u30e5\u30fc\u30e2\u30c7\u30eb\nusing System.ComponentModel;\npublic sealed class ViewModel : INotifyPropertyChanged {\n    public UserColor SelectColor {\n        get {\n            return this._SelectColor;\n        }\n        set {\n            if( this._SelectColor == value )\n                return;\n            this._SelectColor = value;\n            this.PropertyChanged?.Invoke( this , new PropertyChangedEventArgs( nameof(SelectColor) ) );\n        }\n    }\n    private UserColor _SelectColor;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n}\n\n\n\n\u30c7\u30fc\u30bf\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\nXAML\u3067\u306f\u3001SelectColor\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u30c7\u30fc\u30bf\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u3068\u304d\u3001\u305d\u306e\u5024\u3092\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u5358\u7d14\u3067\u306f\u3042\u308b\u304c\u3001IValueConverter\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u3066\u3001UserColor\u7528\u306e\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u305f\u3002\npublic sealed class UserColorConverter : IValueConverter {\n    public object Convert( object value , Type targetType , object parameter , CultureInfo culture ) => value?.ToString();\n\n    public object ConvertBack( object value , Type targetType , object parameter , CultureInfo culture ) {\n        UserColor tmp;\n        UserColor.TryParse( value as string , out tmp );\n        return tmp;\n    }\n}\n\n\nXAML\n<Window\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfApplication1\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"180\" Width=\"200\">\n\n    <Window.DataContext>\n        <local:ViewModel/>\n    </Window.DataContext>\n\n    <Window.Resources>\n        <local:UserColorConverter x:Key=\"userColor\"/>\n    </Window.Resources>\n\n    <StackPanel>\n        <TextBox Text=\"{Binding SelectColor,Converter={StaticResource userColor}}\"/>\n    </StackPanel>\n</Window>\n\n\n\n\u554f\u984c\u70b9\u3068\u89e3\u6c7a\u7b56\nUserColor\u306e\u3088\u3046\u306a\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\u304c\u5897\u3048\u308b\u5ea6\u306b\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u9762\u5012\u3059\u304e\u308b\u3002\n\nTryParse\u30e1\u30bd\u30c3\u30c9\u3067\u6587\u5b57\u5217\u304b\u3089\u5024\u306b\u5909\u63db\u3059\u308b\u3002\nToString\u30e1\u30bd\u30c3\u30c9\u3067\u6587\u5b57\u5217\u8868\u73fe\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u4e8b\u8db3\u308a\u308b\u3002\n\u305d\u3053\u3067\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u6cbf\u3063\u305f\u6c4e\u7528\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\n\n\u30b3\u30f3\u30d0\u30fc\u30bf\u306e\u5b9f\u88c5\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq.Expressions;\nusing System.Windows.Data;\nusing System.Windows.Markup;\n\nnamespace WpfApplication1 {\n    public sealed class TryParseConverter : IValueConverter {\n        private readonly static Dictionary<Type , IValueConverter> converters = new Dictionary<Type , IValueConverter>();\n\n        private static IValueConverter getConverter( Type targetType ) {\n            IValueConverter converter;\n            if( converters.TryGetValue( targetType , out converter ) )\n                return converter;\n            converter = Activator.CreateInstance( typeof(TryParseConverter<>).MakeGenericType( targetType ) ) as IValueConverter;\n            if( converter == null )\n                throw new InvalidCastException( string.Format( \"\u578b {0}\u306f\u3001{1}\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\" , targetType , nameof(IValueConverter) ) );\n            converters.Add( targetType , converter );\n            return converter;\n        }\n\n        public object Convert( object value , Type targetType , object parameter , CultureInfo culture )\n            => value == null ? null : getConverter( value.GetType() ).Convert( value , targetType , parameter , culture );\n\n        public object ConvertBack( object value , Type targetType , object parameter , CultureInfo culture )\n            => getConverter( targetType ).ConvertBack( value , targetType , parameter , culture );\n    }\n\n    public sealed class TryParseConverter<T> : IValueConverter {\n        private delegate bool TryParse( string input , out T value );\n        private static readonly TryParse _tryParse;\n\n        static TryParseConverter() {\n            var tryParse = typeof(T).GetMethod( nameof(Int32.TryParse) , new[] { typeof(string) , typeof(T).MakeByRefType() } );\n            if( tryParse == null )\n                throw new TypeAccessException( \"TryParse\u30e1\u30bd\u30c3\u30c9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\" );\n            var value = Expression.Parameter( typeof(T).MakeByRefType() );\n            var input = Expression.Parameter( typeof(string) );\n            _tryParse = Expression.Lambda<TryParse>( Expression.Call( tryParse , input , value ) , input , value ).Compile();\n        }\n\n        public object Convert( object value , Type targetType , object parameter , CultureInfo culture ) {\n            // to string\n            if( value == null )\n                return null;\n            if( value is IFormattable && parameter is string )\n                return ( (IFormattable)value ).ToString( (string)parameter , null );\n            else\n                return value.ToString();\n        }\n\n        public object ConvertBack( object value , Type targetType , object parameter , CultureInfo culture ) {\n            // to object\n            if( value == null )\n                return null;\n            T tmp;\n            _tryParse( value as string , out tmp );\n            return tmp;\n        }\n    }\n}\n\n\n\n\u4f7f\u7528\u4f8b\n<Window\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfApplication1\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"180\" Width=\"200\">\n\n    <Window.DataContext>\n        <local:ViewModel/>\n    </Window.DataContext>\n\n    <Window.Resources>\n        <local:TryParseConverter x:Key=\"tryParse\"/>\n    </Window.Resources>\n\n    <StackPanel>\n        <TextBox Text=\"{Binding SelectColor,Converter={StaticResource tryParse}}\"/>\n    </StackPanel>\n</Window>\n\n\nstatic bool TryParse( string input , T out value ) \u304c\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\u3001ToString\u3067\u9069\u5207\u306a\u6587\u5b57\u5217\u8868\u73fe\u3092\n\u5f97\u3089\u308c\u308b\u578b\u3067\u3042\u308c\u3070\u3001\u578b\u3054\u3068\u306b\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u7121\u304f\u306a\u308b\u3002\n### \u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u3055\u308c\u305f\u578b\n\n\u72ec\u81ea\u306b\u5b9a\u7fa9\u3055\u308c\u305fUserColor\u578b\u304c\u3042\u308b\u3068\u3059\u308b\u2026\n\n````c#:\u72ec\u81ea\u5b9a\u7fa9\u3055\u308c\u305f\u578b\nusing System.Windows.Media;\npublic sealed class UserColor {\n    public Color Value {\n        get;\n        set;\n    }\n\n    public static bool TryParse( string input , out UserColor value ) {\n        value = new UserColor();\n\n        switch( input ) {\n            case \"\u8d64\":\n                value.Value = Colors.Red;\n                return true;\n            case \"\u9752\":\n                value.Value = Colors.Blue;\n                return true;\n            case \"\u9ec4\":\n                value.Value = Colors.Yellow;\n                return true;\n            default:\n                break;\n        }\n\n        return false;\n    }\n\n    public override string ToString() => this.Value.ToString();\n}\n````\n\n\u6b21\u306bUserColor\u578b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4e00\u3064\u6301\u3064\u3001\u30d3\u30e5\u30fc\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n````c#:\u30d3\u30e5\u30fc\u30e2\u30c7\u30eb\nusing System.ComponentModel;\npublic sealed class ViewModel : INotifyPropertyChanged {\n    public UserColor SelectColor {\n        get {\n            return this._SelectColor;\n        }\n        set {\n            if( this._SelectColor == value )\n                return;\n            this._SelectColor = value;\n            this.PropertyChanged?.Invoke( this , new PropertyChangedEventArgs( nameof(SelectColor) ) );\n        }\n    }\n    private UserColor _SelectColor;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n}\n````\n\n#### \u30c7\u30fc\u30bf\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\n\nXAML\u3067\u306f\u3001SelectColor\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u30c7\u30fc\u30bf\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u3068\u304d\u3001\u305d\u306e\u5024\u3092\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u5358\u7d14\u3067\u306f\u3042\u308b\u304c\u3001IValueConverter\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u3066\u3001UserColor\u7528\u306e\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u305f\u3002\n\n```c#\npublic sealed class UserColorConverter : IValueConverter {\n    public object Convert( object value , Type targetType , object parameter , CultureInfo culture ) => value?.ToString();\n\n    public object ConvertBack( object value , Type targetType , object parameter , CultureInfo culture ) {\n        UserColor tmp;\n        UserColor.TryParse( value as string , out tmp );\n        return tmp;\n    }\n}\n```\n\n```xml:XAML\n<Window\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfApplication1\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"180\" Width=\"200\">\n\n\t<Window.DataContext>\n\t\t<local:ViewModel/>\n\t</Window.DataContext>\n\n\t<Window.Resources>\n\t\t<local:UserColorConverter x:Key=\"userColor\"/>\n\t</Window.Resources>\n\n\t<StackPanel>\n\t\t<TextBox Text=\"{Binding SelectColor,Converter={StaticResource userColor}}\"/>\n\t</StackPanel>\n</Window>\n```\n\n### \u554f\u984c\u70b9\u3068\u89e3\u6c7a\u7b56\n\nUserColor\u306e\u3088\u3046\u306a\u30e6\u30fc\u30b6\u5b9a\u7fa9\u578b\u304c\u5897\u3048\u308b\u5ea6\u306b\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u9762\u5012\u3059\u304e\u308b\u3002\n\n* TryParse\u30e1\u30bd\u30c3\u30c9\u3067\u6587\u5b57\u5217\u304b\u3089\u5024\u306b\u5909\u63db\u3059\u308b\u3002\n* ToString\u30e1\u30bd\u30c3\u30c9\u3067\u6587\u5b57\u5217\u8868\u73fe\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u4e8b\u8db3\u308a\u308b\u3002\n\u305d\u3053\u3067\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u6cbf\u3063\u305f\u6c4e\u7528\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\n\n````c#:\u30b3\u30f3\u30d0\u30fc\u30bf\u306e\u5b9f\u88c5\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq.Expressions;\nusing System.Windows.Data;\nusing System.Windows.Markup;\n\nnamespace WpfApplication1 {\n\tpublic sealed class TryParseConverter : IValueConverter {\n\t\tprivate readonly static Dictionary<Type , IValueConverter> converters = new Dictionary<Type , IValueConverter>();\n\n\t\tprivate static IValueConverter getConverter( Type targetType ) {\n\t\t\tIValueConverter converter;\n\t\t\tif( converters.TryGetValue( targetType , out converter ) )\n\t\t\t\treturn converter;\n\t\t\tconverter = Activator.CreateInstance( typeof(TryParseConverter<>).MakeGenericType( targetType ) ) as IValueConverter;\n\t\t\tif( converter == null )\n\t\t\t\tthrow new InvalidCastException( string.Format( \"\u578b {0}\u306f\u3001{1}\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u305b\u3093\u3002\" , targetType , nameof(IValueConverter) ) );\n\t\t\tconverters.Add( targetType , converter );\n\t\t\treturn converter;\n\t\t}\n\n\t\tpublic object Convert( object value , Type targetType , object parameter , CultureInfo culture )\n\t\t\t=> value == null ? null : getConverter( value.GetType() ).Convert( value , targetType , parameter , culture );\n\n\t\tpublic object ConvertBack( object value , Type targetType , object parameter , CultureInfo culture )\n\t\t\t=> getConverter( targetType ).ConvertBack( value , targetType , parameter , culture );\n\t}\n\n\tpublic sealed class TryParseConverter<T> : IValueConverter {\n\t\tprivate delegate bool TryParse( string input , out T value );\n\t\tprivate static readonly TryParse _tryParse;\n\n\t\tstatic TryParseConverter() {\n\t\t\tvar tryParse = typeof(T).GetMethod( nameof(Int32.TryParse) , new[] { typeof(string) , typeof(T).MakeByRefType() } );\n\t\t\tif( tryParse == null )\n\t\t\t\tthrow new TypeAccessException( \"TryParse\u30e1\u30bd\u30c3\u30c9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\" );\n\t\t\tvar value = Expression.Parameter( typeof(T).MakeByRefType() );\n\t\t\tvar input = Expression.Parameter( typeof(string) );\n\t\t\t_tryParse = Expression.Lambda<TryParse>( Expression.Call( tryParse , input , value ) , input , value ).Compile();\n\t\t}\n\n\t\tpublic object Convert( object value , Type targetType , object parameter , CultureInfo culture ) {\n\t\t\t// to string\n\t\t\tif( value == null )\n\t\t\t\treturn null;\n\t\t\tif( value is IFormattable && parameter is string )\n\t\t\t\treturn ( (IFormattable)value ).ToString( (string)parameter , null );\n\t\t\telse\n\t\t\t\treturn value.ToString();\n\t\t}\n\n\t\tpublic object ConvertBack( object value , Type targetType , object parameter , CultureInfo culture ) {\n\t\t\t// to object\n\t\t\tif( value == null )\n\t\t\t\treturn null;\n\t\t\tT tmp;\n\t\t\t_tryParse( value as string , out tmp );\n\t\t\treturn tmp;\n\t\t}\n\t}\n}\n````\n\n```xml:\u4f7f\u7528\u4f8b\n<Window\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfApplication1\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\" Height=\"180\" Width=\"200\">\n\n\t<Window.DataContext>\n\t\t<local:ViewModel/>\n\t</Window.DataContext>\n\n\t<Window.Resources>\n\t\t<local:TryParseConverter x:Key=\"tryParse\"/>\n\t</Window.Resources>\n\n\t<StackPanel>\n\t\t<TextBox Text=\"{Binding SelectColor,Converter={StaticResource tryParse}}\"/>\n\t</StackPanel>\n</Window>\n```\n\nstatic bool TryParse( string input , T out value ) \u304c\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\u3001ToString\u3067\u9069\u5207\u306a\u6587\u5b57\u5217\u8868\u73fe\u3092\n\u5f97\u3089\u308c\u308b\u578b\u3067\u3042\u308c\u3070\u3001\u578b\u3054\u3068\u306b\u30b3\u30f3\u30d0\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u7121\u304f\u306a\u308b\u3002\n\n\n\n\n"}