{"context": "\u3053\u306e\u6295\u7a3f\u306fOpenCV Advent Calendar 2016\u306e13\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u9023\u756a\u30d5\u30a1\u30a4\u30eb\n\u52d5\u753b\u3092\u9023\u756a\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u6271\u3046\u3068\u3044\u3046\u30b7\u30fc\u30f3\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u30013\u6841\u306e\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\uff08\u5b9f\u969b\u306b\u306f\u63a5\u982d\u8f9e\u3001\u63a5\u5c3e\u8f9e\u306a\u3069\u304c\u4ed8\u304f\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\uff09\n001.jpg\n002.jpg\n003.jpg\n\ufe19\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u9023\u756a\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092OpenCV\u3067\u8aad\u307f\u66f8\u304d\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\ncv::imread()/cv::imwrite()\nOpenCV\u3067\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306fcv::imread()\u3001\u66f8\u304d\u51fa\u3059\u306b\u306fcv::imwrite()\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u9023\u756a\u306e\u52d5\u7684\u751f\u6210\n\u8aad\u307f\u66f8\u304d\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5217\u6319\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u6e96\u5099\u3057\u3066\u304a\u304f\u306e\u30821\u3064\u306e\u624b\u6bb5\u3067\u3059\u304c\u3001\n\u3053\u3053\u3067\u306f\u9023\u756a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u751f\u6210\u3059\u308b\u3053\u3068\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u6574\u5f62\u3092\u5229\u7528\u3057\u3066\u9023\u756a\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u306b\u5408\u308f\u305b\u3066\u63a5\u982d\u8f9e\u3084\u62e1\u5f35\u5b50\u306a\u3069\u3092\u4ed8\u308b\u3053\u3068\u3067\u9023\u756a\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\n\ncpp\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n\nint main( int argc, char* argv[] )\n{\n    // Generate Consecutive Number File Names ( e.g. 000.jpg, 001.jpg, ..., 998.jpg, 999.jpg )\n    for( int i = 0; i < 1000; i++ ){\n        std::ostringstream oss;\n        oss << std::setfill( '0' ) << std::setw( 3 ) << i;\n        std::cout << oss.str() + \".jpg\" << std::endl;\n    }\n\n    return 0;\n}\n\n\n\ncv::imread()\u3067\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\ncv::imread()\u306b\u751f\u6210\u3057\u305f\u9023\u756a\u3092\u4f7f\u3063\u3066\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001input_000.jpg\u3001input_001.jpg\u306e\u3088\u3046\u306a\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\u9023\u756a\u751f\u6210\u306e\u521d\u671f\u5024\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\ncpp\n#include <sstream>\n#include <iomanip>\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    while( true ){\n        // Generate Consecutive Number ( e.g. 000, 001, ... )\n        static int i = 0;\n        std::ostringstream oss;        \n        oss << std::setfill( '0' ) << std::setw( 3 ) << i++;\n\n        // Read Image from File ( e.g. input_000.jpg, input_001.jpg, ... )\n        cv::Mat image = cv::imread( \"input_\" + oss.str() + \".jpg\" );\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\ncv::imwrite()\u3067\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3059\ncv::imwrite()\u306b\u751f\u6210\u3057\u305f\u9023\u756a\u3092\u4f7f\u3063\u3066\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001output_000.jpg\u3001output_001.jpg\u306e\u3088\u3046\u306a\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\u9023\u756a\u751f\u6210\u306e\u521d\u671f\u5024\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u66f8\u304d\u51fa\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\ncpp\n#include <sstream>\n#include <iomanip>\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    while( true ){\n        // Generate Consecutive Number ( e.g. 000, 001, ... )\n        static int i = 0;\n        std::ostringstream oss;\n        oss << std::setfill( '0' ) << std::setw( 3 ) << i++;\n\n        cv::Mat image = cv::Mat( 480, 640, CV_8UC3 );\n\n        /* Image Processing */\n\n        // Write Image to File ( e.g. output_000.jpg, output_001.jpg, ... )\n        cv::imwrite( \"output_\" + oss.str() + \".jpg\", image );\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\ncv::VideoCapture()/cv::VideoWriter()\nOpenCV\u3067\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306fcv::VideoCapture()\u3001\u66f8\u304d\u51fa\u3059\u306b\u306fcv::VideoWriter()\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u5b9f\u306f\u3053\u306ecv::VideoCapture()\u3001cv::VideoWriter()\u306b\u306f\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u6a5f\u80fd\u304c\u3042\u308a\u3001\u52d5\u753b\u3068\u540c\u3058\u3088\u3046\u306b\u9023\u756a\u753b\u50cf\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u9023\u756a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\n\u305f\u3068\u3048\u3070%03d\u306e\u3088\u3046\u306b\u9023\u756a\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3068\u30013\u6841\u306e\u6574\u6570\u306e\u6570\u5024(000~)\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002\n\u3053\u306e\u6570\u5024\u306fcv::VideoCapture()\u3001cv::VideoWriter()\u3067\u8aad\u307f\u8fbc\u307f\u30fb\u66f8\u304d\u51fa\u3059\u3054\u3068\u306b\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\n%03d.jpg\n000.jpg\n001.jpg\n002.jpg\n\ufe19\n\n\n\u306a\u304a\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u306e\u306f\u6700\u521d\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u306e\u307f\u3067\u3059\u3002\n\u8907\u6570\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u304c\u3042\u308b\u5834\u5408\u3001\u4ee5\u964d\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u306f\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u307e\u305b\u3093\u3002\n\n%03d_%03d.jpg\n000_000.jpg\n001_000.jpg\n002_000.jpg\n\ufe19\n\n\n\u307e\u305f\u3001\u6574\u6570\u4ee5\u5916\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u306f\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3057\u3066\u6271\u3048\u307e\u305b\u3093\u3002\n\n%3.2f.jpg\n0.00.jpg\n0.00.jpg\n0.00.jpg\n\ufe19\n\n\n\ncv::VideoCapture()\u3067\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\ncv::VideoCapture()\u306e\u7b2c1\u5f15\u6570(filename)\u306b\u9023\u756a\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u3057\u305f\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4e0e\u3048\u307e\u3059\u3002\n\u7b2c2\u5f15\u6570(apiPreference)\u306b\u306f\u9023\u756a\u753b\u50cf\u3092\u6271\u3046\u3053\u3068\u3092\u660e\u793a\u7684\u306b\u793a\u3059\u305f\u3081\u3001cv::CAP_IMAGES\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3068\u30011\u3064\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u52d5\u753b\u306e1\u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\ncpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Capture\n    cv::VideoCapture capture( \"input_%03d.jpg\", cv::CAP_IMAGES );\n    if( !capture.isOpened() ){\n        return -1;\n    }\n\n    while( true ){\n        cv::Mat image;\n\n        // Capture Image from File ( e.g. input_000.jpg, input_001.jpg, ... )\n        capture >> image;\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\ncv::VideoCapture()\u3067\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u9023\u756a\u306e\u5148\u982d\u756a\u53f7(000)\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30b7\u30fc\u30f3\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001cv::VideoCapture::set()\u306bcv::CAP_PROP_POS_FRAMES\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001030\u304b\u3089\u9806\u306b\u8aad\u307f\u8fbc\u307f\u305f\u3044\u5834\u5408\u306fcv::VideoCapture::set( cv::CAP_PROP_POS_FRAMES, 30 )\u306e\u3088\u3046\u306b\u4efb\u610f\u306e\u958b\u59cb\u756a\u53f7\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306fcv::VideoCapture()\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\ncpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Capture\n    cv::VideoCapture capture( \"input_%03d.jpg\", cv::CAP_IMAGES );\n    if( !capture.isOpened() ){\n        return -1;\n    }\n\n    // Set Capture Start Number ( e.g. 30 )\n    const double index = 30;\n    capture.set( cv::CAP_PROP_POS_FRAMES, index );\n\n    while( true ){\n        cv::Mat image;\n\n        // Capture Image from File ( e.g. input_030.jpg, input_031.jpg, ... )\n        capture >> image;\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\u307e\u305f\u3001cv::VideoCapture()\u306e\u7b2c1\u5f15\u6570(filename)\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u308f\u305a\u306b\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001030\u304b\u3089\u9806\u306b\u8aad\u307f\u8fbc\u307f\u305f\u3044\u5834\u5408\u306finput_030.jpg\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\ncv::VideoCapture()\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u6574\u6570\u5024\u3092\u9023\u756a\u306e\u521d\u671f\u756a\u53f7\u3068\u5224\u65ad\u3057\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\ncpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Capture ( e.g. input_030.jpg )\n    cv::VideoCapture capture( \"input_030.jpg\", cv::CAP_IMAGES );\n    if( !capture.isOpened() ){\n        return -1;\n    }\n\n    while( true ){\n        cv::Mat image;\n\n        // Capture Image from File ( e.g. input_030.jpg, input_031.jpg, ... )\n        capture >> image;\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\ncv::VideoCapture()\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\ncv::VideoCapture()\u3067\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53d6\u5f97\u30fb\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\ncv::VideoCapture::get( int propid )\n\ncv::VideoCapture()\u3067\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\ncv::CAP_PROP_FRAME_COUNT\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u542b\u307e\u308c\u308b\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u3068\u8a8d\u8b58\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n\n\u30d7\u30ed\u30d1\u30c6\u30a3ID\n\u53d6\u5f97\u3067\u304d\u308b\u5024\n\n\n\n\ncv::CAP_PROP_FRAME_WIDTH\n\u5e45\n\n\ncv::CAP_PROP_FRAME_HEIGHT\n\u9ad8\u3055\n\n\ncv::CAP_PROP_FRAME_COUNT\n\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u6570\n\n\ncv::CAP_PROP_POS_FRAMES\n\u9023\u756a\n\n\ncv::CAP_PROP_POS_AVI_RATIO\n\u76f8\u5bfe\u4f4d\u7f6e[0.0-1.0]\n\n\n\n\ncpp\n#include <iostream>\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Capture\n    cv::VideoCapture capture( \"input_%03d.jpg\", cv::CAP_IMAGES );\n    if( !capture.isOpened() ){\n        return -1;\n    }\n\n    // Get Image Width ( e.g. 640 )\n    const int width = static_cast<int>( capture.get( cv::CAP_PROP_FRAME_WIDTH ) );\n    std::cout << \"width : \" << width << std::endl;\n\n    // Get Image Height ( e.g. 480 )\n    const int height = static_cast<int>( capture.get( cv::CAP_PROP_FRAME_HEIGHT ) );\n    std::cout << \"height : \" << height << std::endl;\n\n    // Get Image Counts ( e.g. 100 )\n    const int counts = static_cast<int>( capture.get( cv::CAP_PROP_FRAME_COUNT ) );\n    std::cout << \"counts : \" << counts << std::endl;\n\n    while( true ){\n        cv::Mat image;\n\n        // Get Current Index ( e.g. 0, 1, ... )\n        const int index = static_cast<int>( capture.get( cv::CAP_PROP_POS_FRAMES  ) );\n        std::cout << \"index : \" << index << std::endl;\n\n        // Get Current Relative Position ( e.g. 0.00, 0.01, ...)\n        const double position = capture.get( cv::CAP_PROP_POS_AVI_RATIO );\n        std::cout << \"position : \" << position << std::endl;\n\n        // Capture Image from File ( e.g. input_000.jpg, input_001.jpg, ... )\n        capture >> image;\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\ncv::VideoCapture::set( int propid, double value )\n\ncv::VideoCapture()\u3067\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\ncv::CAP_PROP_POS_FRAMES\u3084cv::PROP_POS_AVI_RATIO\u3067\u756a\u53f7\u3084\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u756a\u53f7\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u3092\u306f\u3058\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\n\u30d7\u30ed\u30d1\u30c6\u30a3ID\n\u8a2d\u5b9a\u3067\u304d\u308b\u5024\n\n\n\n\ncv::CAP_PROP_POS_FRAMES\n\u9023\u756a\n\n\ncv::CAP_PROP_POS_AVI_RATIO\n\u76f8\u5bfe\u4f4d\u7f6e[0.0-1.0]\n\n\n\n\ncpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Capture\n    cv::VideoCapture capture( \"input_%03d.jpg\", cv::CAP_IMAGES );\n    if( !capture.isOpened() ){\n        return -1;\n    }\n\n    // Set Capture Start Number ( e.g. 30 )\n    const int index = 30;\n    capture.set( cv::CAP_PROP_POS_FRAMES, static_cast<double>( index ) );\n\n    // Set Capture Start Relative Position ( e.g. 30% )\n    const double position = 0.30;\n    capture.set( cv::CAP_PROP_POS_FRAMES, position );\n\n    while( true ){\n        cv::Mat image;\n\n        // Capture Image from File ( e.g. input_030.jpg, input_031.jpg, ... )\n        capture >> image;\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\ncv::VideoWriter()\u3067\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\ncv::VideoWriter()\u306e\u7b2c1\u5f15\u6570(filename)\u306b\u9023\u756a\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u3057\u305f\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u540d\u3001\u7b2c2\u5f15\u6570(fourcc)\u306b0\u3001\u7b2c3\u5f15\u6570(fps)\u306b0.0\u3092\u4e0e\u3048\u307e\u3059\u3002\uff08\u7b2c2\u5f15\u6570\u307e\u305f\u306f\u7b2c3\u5f15\u6570\u304c0\u3067\u3042\u308c\u3070\u3088\u3044\u3002\uff09\n\u3053\u306e\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3068\u3001\u52d5\u753b\u306e1\u30d5\u30ec\u30fc\u30e0\u30921\u3064\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\ncpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Writer\n    cv::VideoWriter writer( \"output_%03d.jpg\", 0, 0.0, cv::Size( 640, 480 ) );\n    if( !writer.isOpened() ){\n        return -1;\n    }\n\n    while( true ){\n        cv::Mat image = cv::Mat( 480, 640, CV_8UC3 );\n\n        /* Image Processing */\n\n        // Write Image to File ( e.g. output_000.jpg, output_001.jpg, ... )\n        writer << image;\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\ncv::VideoWriter()\u3067\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3059\n\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u66f8\u304d\u51fa\u3059\u3068\u304d\u3082\u540c\u69d8\u306b\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u66f8\u304d\u51fa\u3057\u305f\u3044\u30b7\u30fc\u30f3\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u5834\u5408\u3082\u540c\u3058\u3088\u3046\u306b\u3001cv::VideoWriter()\u306e\u7b2c1\u5f15\u6570(filename)\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u308f\u305a\u306b\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u76f4\u63a5\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001030\u304b\u3089\u9806\u306b\u66f8\u304d\u51fa\u3057\u305f\u3044\u5834\u5408\u306foutput_030.jpg\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\ncv::VideoWriter()\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u6574\u6570\u5024\u3092\u9023\u756a\u306e\u521d\u671f\u756a\u53f7\u3068\u5224\u65ad\u3057\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u66f8\u304d\u51fa\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\ncpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Writer ( e.g. output_030.jpg )\n    cv::VideoWriter writer( \"output_030.jpg\", 0, 0.0, cv::Size( 640, 480 ) );\n    if( !writer.isOpened() ){\n        return -1;\n    }\n\n    while( true ){\n        cv::Mat image = cv::Mat( 480, 640, CV_8UC3 );\n\n        /* Image Processing */\n\n        // Write Image to File ( e.g. output_030.jpg, output_031.jpg, ... )\n        writer << image;\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\ncv::VideoWriter()\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\ncv::VideoWriter()\u3067\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u5834\u5408\u3001\u53d6\u5f97\u30fb\u8a2d\u5b9a\u3067\u304d\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u304a\u307e\u3051\uff1a\u672a\u5b9f\u88c5\u306e\u6a5f\u80fd\u306b\u3064\u3044\u3066\ncv::imwrite()\u3067\u306f\u7b2c3\u5f15\u6570(params)\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001OpenCV 3.1\u306e\u5b9f\u88c5\u3067\u306fcv::VideoWriter()\u3067\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u672c\u6765\u3067\u3042\u308c\u3070cv::VideoWriter::set()\u3067cv::imwrite()\u3068\u540c\u7b49\u306e\u8a2d\u5b9a\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3079\u304d\u3067\u3059\u3002\nOpenCV\u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u305d\u3046\u3067\u3059\u3001\u5b9f\u88c5\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u3002\n\u2192 \u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002(\uff40\u30fb\u03c9\u30fb\u00b4)b\n\u3077\u308b\u308a\u304f\u304c\u307e\u30fc\u3058\u3055\u308c\u305f\u306e\u3067OpenCV 3.2\u304b\u3089\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u30fd(\u0e51\u2579\u25e1\u2579)\uff89\nAdd support image save parameters in VideoWriter #7761 | OpenCV\n\ncpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Writer\n    cv::VideoWriter writer( \"output_%03d.jpg\", 0, 0.0, cv::Size( 640, 480 ) );\n    if( !writer.isOpened() ){\n        return -1;\n    }\n\n    // Set Write Image Parameters ( Available from OpenCV Next Version )\n    writer.set( cv::CAP_PROP_IMAGES_BASE + cv::IMWRITE_JPEG_QUALITY, 80 ); // PR#7761(Merged)\n\n    while( true ){\n        cv::Mat image = cv::Mat( 480, 640, CV_8UC3 );\n\n        /* Image Processing */\n\n        // Write Image to File\n        writer << image;\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n\n\n\n\u307e\u3068\u3081\n\u597d\u304d\u306a\u65b9\u6cd5\u3092\u4f7f\u3048\u3070\u3044\u3044\u3088\u3002\n\n\u5099\u8003\n\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\nVisual Studio 2015 \nOpenCV 3.1.0\n\n\u3053\u306e\u6295\u7a3f\u306f[OpenCV Advent Calendar 2016](http://qiita.com/advent-calendar/2016/opencv)\u306e13\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n# \u9023\u756a\u30d5\u30a1\u30a4\u30eb\n\u52d5\u753b\u3092\u9023\u756a\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u6271\u3046\u3068\u3044\u3046\u30b7\u30fc\u30f3\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u30013\u6841\u306e\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\uff08\u5b9f\u969b\u306b\u306f\u63a5\u982d\u8f9e\u3001\u63a5\u5c3e\u8f9e\u306a\u3069\u304c\u4ed8\u304f\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\uff09\n\n```text\n001.jpg\n002.jpg\n003.jpg\n\ufe19\n```\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u9023\u756a\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092OpenCV\u3067\u8aad\u307f\u66f8\u304d\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n# cv::imread()/cv::imwrite()\nOpenCV\u3067\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f<code>cv::imread()</code>\u3001\u66f8\u304d\u51fa\u3059\u306b\u306f<code>cv::imwrite()</code>\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n## \u9023\u756a\u306e\u52d5\u7684\u751f\u6210\n\u8aad\u307f\u66f8\u304d\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5217\u6319\u3057\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u6e96\u5099\u3057\u3066\u304a\u304f\u306e\u30821\u3064\u306e\u624b\u6bb5\u3067\u3059\u304c\u3001\n\u3053\u3053\u3067\u306f\u9023\u756a\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u751f\u6210\u3059\u308b\u3053\u3068\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u6574\u5f62\u3092\u5229\u7528\u3057\u3066\u9023\u756a\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u306b\u5408\u308f\u305b\u3066\u63a5\u982d\u8f9e\u3084\u62e1\u5f35\u5b50\u306a\u3069\u3092\u4ed8\u308b\u3053\u3068\u3067\u9023\u756a\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\n\n```cpp:cpp\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n\nint main( int argc, char* argv[] )\n{\n    // Generate Consecutive Number File Names ( e.g. 000.jpg, 001.jpg, ..., 998.jpg, 999.jpg )\n    for( int i = 0; i < 1000; i++ ){\n        std::ostringstream oss;\n        oss << std::setfill( '0' ) << std::setw( 3 ) << i;\n        std::cout << oss.str() + \".jpg\" << std::endl;\n    }\n\n    return 0;\n}\n```\n\n## cv::imread()\u3067\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n<code>cv::imread()</code>\u306b\u751f\u6210\u3057\u305f\u9023\u756a\u3092\u4f7f\u3063\u3066\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001<code>input_000.jpg</code>\u3001<code>input_001.jpg</code>\u306e\u3088\u3046\u306a\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\u9023\u756a\u751f\u6210\u306e\u521d\u671f\u5024\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```cpp:cpp\n#include <sstream>\n#include <iomanip>\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    while( true ){\n        // Generate Consecutive Number ( e.g. 000, 001, ... )\n        static int i = 0;\n        std::ostringstream oss;        \n        oss << std::setfill( '0' ) << std::setw( 3 ) << i++;\n\n        // Read Image from File ( e.g. input_000.jpg, input_001.jpg, ... )\n        cv::Mat image = cv::imread( \"input_\" + oss.str() + \".jpg\" );\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n## cv::imwrite()\u3067\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3059\n<code>cv::imwrite()</code>\u306b\u751f\u6210\u3057\u305f\u9023\u756a\u3092\u4f7f\u3063\u3066\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001<code>output_000.jpg</code>\u3001<code>output_001.jpg</code>\u306e\u3088\u3046\u306a\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\u9023\u756a\u751f\u6210\u306e\u521d\u671f\u5024\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u66f8\u304d\u51fa\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```cpp:cpp\n#include <sstream>\n#include <iomanip>\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    while( true ){\n        // Generate Consecutive Number ( e.g. 000, 001, ... )\n        static int i = 0;\n        std::ostringstream oss;\n        oss << std::setfill( '0' ) << std::setw( 3 ) << i++;\n\n        cv::Mat image = cv::Mat( 480, 640, CV_8UC3 );\n\n        /* Image Processing */\n\n        // Write Image to File ( e.g. output_000.jpg, output_001.jpg, ... )\n        cv::imwrite( \"output_\" + oss.str() + \".jpg\", image );\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n# cv::VideoCapture()/cv::VideoWriter()\nOpenCV\u3067\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f<code>cv::VideoCapture()</code>\u3001\u66f8\u304d\u51fa\u3059\u306b\u306f<code>cv::VideoWriter()</code>\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u5b9f\u306f\u3053\u306e<code>cv::VideoCapture()</code>\u3001<code>cv::VideoWriter()</code>\u306b\u306f\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u6a5f\u80fd\u304c\u3042\u308a\u3001\u52d5\u753b\u3068\u540c\u3058\u3088\u3046\u306b\u9023\u756a\u753b\u50cf\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u9023\u756a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\n\u305f\u3068\u3048\u3070<code>%03d</code>\u306e\u3088\u3046\u306b\u9023\u756a\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3068\u30013\u6841\u306e\u6574\u6570\u306e\u6570\u5024(000~)\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u307e\u3059\u3002\n\u3053\u306e\u6570\u5024\u306f<code>cv::VideoCapture()</code>\u3001<code>cv::VideoWriter()</code>\u3067\u8aad\u307f\u8fbc\u307f\u30fb\u66f8\u304d\u51fa\u3059\u3054\u3068\u306b\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\n```text:%03d.jpg\n000.jpg\n001.jpg\n002.jpg\n\ufe19\n```\n\n\u306a\u304a\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u306e\u306f\u6700\u521d\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u306e\u307f\u3067\u3059\u3002\n\u8907\u6570\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u304c\u3042\u308b\u5834\u5408\u3001\u4ee5\u964d\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u306f\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u307e\u305b\u3093\u3002\n\n```text:%03d_%03d.jpg\n000_000.jpg\n001_000.jpg\n002_000.jpg\n\ufe19\n```\n\n\u307e\u305f\u3001\u6574\u6570\u4ee5\u5916\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u306f\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u306a\u3044\u305f\u3081\u3001\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3057\u3066\u6271\u3048\u307e\u305b\u3093\u3002\n\n```text:%3.2f.jpg\n0.00.jpg\n0.00.jpg\n0.00.jpg\n\ufe19\n```\n\n## cv::VideoCapture()\u3067\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n<code>cv::VideoCapture()</code>\u306e\u7b2c1\u5f15\u6570(filename)\u306b\u9023\u756a\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u3057\u305f\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4e0e\u3048\u307e\u3059\u3002\n\u7b2c2\u5f15\u6570(apiPreference)\u306b\u306f\u9023\u756a\u753b\u50cf\u3092\u6271\u3046\u3053\u3068\u3092\u660e\u793a\u7684\u306b\u793a\u3059\u305f\u3081\u3001<code>cv::CAP_IMAGES</code>\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3068\u30011\u3064\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u52d5\u753b\u306e1\u30d5\u30ec\u30fc\u30e0\u3068\u3057\u3066\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```cpp:cpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Capture\n    cv::VideoCapture capture( \"input_%03d.jpg\", cv::CAP_IMAGES );\n    if( !capture.isOpened() ){\n        return -1;\n    }\n\n    while( true ){\n        cv::Mat image;\n\n        // Capture Image from File ( e.g. input_000.jpg, input_001.jpg, ... )\n        capture >> image;\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n## cv::VideoCapture()\u3067\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u9023\u756a\u306e\u5148\u982d\u756a\u53f7(000)\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3067\u3044\u307e\u3059\u304c\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u8aad\u307f\u8fbc\u307f\u305f\u3044\u30b7\u30fc\u30f3\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u306b\u306f\u3001<code>cv::VideoCapture::set()</code>\u306b<code>cv::CAP_PROP_POS_FRAMES</code>\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001030\u304b\u3089\u9806\u306b\u8aad\u307f\u8fbc\u307f\u305f\u3044\u5834\u5408\u306f<code>cv::VideoCapture::set( cv::CAP_PROP_POS_FRAMES, 30 )</code>\u306e\u3088\u3046\u306b\u4efb\u610f\u306e\u958b\u59cb\u756a\u53f7\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f[cv::VideoCapture()\u306e\u30d7\u30ed\u30d1\u30c6\u30a3](#cv::VideoCapture()\u306e\u30d7\u30ed\u30d1\u30c6\u30a3)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```cpp:cpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Capture\n    cv::VideoCapture capture( \"input_%03d.jpg\", cv::CAP_IMAGES );\n    if( !capture.isOpened() ){\n        return -1;\n    }\n\n    // Set Capture Start Number ( e.g. 30 )\n    const double index = 30;\n    capture.set( cv::CAP_PROP_POS_FRAMES, index );\n\n    while( true ){\n        cv::Mat image;\n\n        // Capture Image from File ( e.g. input_030.jpg, input_031.jpg, ... )\n        capture >> image;\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n\u307e\u305f\u3001<code>cv::VideoCapture()</code>\u306e\u7b2c1\u5f15\u6570(filename)\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u308f\u305a\u306b\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001030\u304b\u3089\u9806\u306b\u8aad\u307f\u8fbc\u307f\u305f\u3044\u5834\u5408\u306f<code>input_030.jpg</code>\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n<code>cv::VideoCapture()</code>\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u6574\u6570\u5024\u3092\u9023\u756a\u306e\u521d\u671f\u756a\u53f7\u3068\u5224\u65ad\u3057\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n```cpp:cpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Capture ( e.g. input_030.jpg )\n    cv::VideoCapture capture( \"input_030.jpg\", cv::CAP_IMAGES );\n    if( !capture.isOpened() ){\n        return -1;\n    }\n\n    while( true ){\n        cv::Mat image;\n\n        // Capture Image from File ( e.g. input_030.jpg, input_031.jpg, ... )\n        capture >> image;\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n## cv::VideoCapture()\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\n<code>cv::VideoCapture()</code>\u3067\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53d6\u5f97\u30fb\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n### <code>cv::VideoCapture::get( int propid )</code>\n<code>cv::VideoCapture()</code>\u3067\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n<code>cv::CAP_PROP_FRAME_COUNT</code>\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u542b\u307e\u308c\u308b\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u3068\u8a8d\u8b58\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n| \u30d7\u30ed\u30d1\u30c6\u30a3ID                | \u53d6\u5f97\u3067\u304d\u308b\u5024       |\n|:--------------------------:|:-----------------:|\n| cv::CAP_PROP_FRAME_WIDTH   | \u5e45                |\n| cv::CAP_PROP_FRAME_HEIGHT  | \u9ad8\u3055              |\n| cv::CAP_PROP_FRAME_COUNT   | \u9023\u756a\u30d5\u30a1\u30a4\u30eb\u6570     |\n| cv::CAP_PROP_POS_FRAMES    | \u9023\u756a              |\n| cv::CAP_PROP_POS_AVI_RATIO     | \u76f8\u5bfe\u4f4d\u7f6e[0.0-1.0] |\n\n```cpp:cpp\n#include <iostream>\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Capture\n    cv::VideoCapture capture( \"input_%03d.jpg\", cv::CAP_IMAGES );\n    if( !capture.isOpened() ){\n        return -1;\n    }\n\n    // Get Image Width ( e.g. 640 )\n    const int width = static_cast<int>( capture.get( cv::CAP_PROP_FRAME_WIDTH ) );\n    std::cout << \"width : \" << width << std::endl;\n\n    // Get Image Height ( e.g. 480 )\n    const int height = static_cast<int>( capture.get( cv::CAP_PROP_FRAME_HEIGHT ) );\n    std::cout << \"height : \" << height << std::endl;\n\n    // Get Image Counts ( e.g. 100 )\n    const int counts = static_cast<int>( capture.get( cv::CAP_PROP_FRAME_COUNT ) );\n    std::cout << \"counts : \" << counts << std::endl;\n\n    while( true ){\n        cv::Mat image;\n\n        // Get Current Index ( e.g. 0, 1, ... )\n        const int index = static_cast<int>( capture.get( cv::CAP_PROP_POS_FRAMES  ) );\n        std::cout << \"index : \" << index << std::endl;\n\n        // Get Current Relative Position ( e.g. 0.00, 0.01, ...)\n        const double position = capture.get( cv::CAP_PROP_POS_AVI_RATIO );\n        std::cout << \"position : \" << position << std::endl;\n\n        // Capture Image from File ( e.g. input_000.jpg, input_001.jpg, ... )\n        capture >> image;\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n### <code>cv::VideoCapture::set( int propid, double value )</code>\n<code>cv::VideoCapture()</code>\u3067\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n<code>cv::CAP_PROP_POS_FRAMES</code>\u3084<code>cv::PROP_POS_AVI_RATIO</code>\u3067\u756a\u53f7\u3084\u4f4d\u7f6e\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u4efb\u610f\u306e\u756a\u53f7\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u3092\u306f\u3058\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n| \u30d7\u30ed\u30d1\u30c6\u30a3ID                | \u8a2d\u5b9a\u3067\u304d\u308b\u5024       |\n|:--------------------------:|:-----------------:|\n| cv::CAP_PROP_POS_FRAMES    | \u9023\u756a              |\n| cv::CAP_PROP_POS_AVI_RATIO     | \u76f8\u5bfe\u4f4d\u7f6e[0.0-1.0] |\n\n```cpp:cpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Capture\n    cv::VideoCapture capture( \"input_%03d.jpg\", cv::CAP_IMAGES );\n    if( !capture.isOpened() ){\n        return -1;\n    }\n\n    // Set Capture Start Number ( e.g. 30 )\n    const int index = 30;\n    capture.set( cv::CAP_PROP_POS_FRAMES, static_cast<double>( index ) );\n\n    // Set Capture Start Relative Position ( e.g. 30% )\n    const double position = 0.30;\n    capture.set( cv::CAP_PROP_POS_FRAMES, position );\n\n    while( true ){\n        cv::Mat image;\n\n        // Capture Image from File ( e.g. input_030.jpg, input_031.jpg, ... )\n        capture >> image;\n        if( image.empty() ){\n            break;\n        }\n\n        /* Image Processing */\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n## cv::VideoWriter()\u3067\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\n<code>cv::VideoWriter()</code>\u306e\u7b2c1\u5f15\u6570(filename)\u306b\u9023\u756a\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u3057\u305f\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u540d\u3001\u7b2c2\u5f15\u6570(fourcc)\u306b0\u3001\u7b2c3\u5f15\u6570(fps)\u306b0.0\u3092\u4e0e\u3048\u307e\u3059\u3002\uff08\u7b2c2\u5f15\u6570\u307e\u305f\u306f\u7b2c3\u5f15\u6570\u304c0\u3067\u3042\u308c\u3070\u3088\u3044\u3002\uff09\n\u3053\u306e\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3068\u3001\u52d5\u753b\u306e1\u30d5\u30ec\u30fc\u30e0\u30921\u3064\u306e\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\n```cpp:cpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Writer\n    cv::VideoWriter writer( \"output_%03d.jpg\", 0, 0.0, cv::Size( 640, 480 ) );\n    if( !writer.isOpened() ){\n        return -1;\n    }\n\n    while( true ){\n        cv::Mat image = cv::Mat( 480, 640, CV_8UC3 );\n\n        /* Image Processing */\n\n        // Write Image to File ( e.g. output_000.jpg, output_001.jpg, ... )\n        writer << image;\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n## cv::VideoWriter()\u3067\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u9023\u756a\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3059\n\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u66f8\u304d\u51fa\u3059\u3068\u304d\u3082\u540c\u69d8\u306b\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u66f8\u304d\u51fa\u3057\u305f\u3044\u30b7\u30fc\u30f3\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u5834\u5408\u3082\u540c\u3058\u3088\u3046\u306b\u3001<code>cv::VideoWriter()</code>\u306e\u7b2c1\u5f15\u6570(filename)\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u3092\u4f7f\u308f\u305a\u306b\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u76f4\u63a5\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001030\u304b\u3089\u9806\u306b\u66f8\u304d\u51fa\u3057\u305f\u3044\u5834\u5408\u306f<code>output_030.jpg</code>\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n<code>cv::VideoWriter()</code>\u306f\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u6574\u6570\u5024\u3092\u9023\u756a\u306e\u521d\u671f\u756a\u53f7\u3068\u5224\u65ad\u3057\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u4efb\u610f\u306e\u756a\u53f7\u304b\u3089\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u66f8\u304d\u51fa\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```cpp:cpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Writer ( e.g. output_030.jpg )\n    cv::VideoWriter writer( \"output_030.jpg\", 0, 0.0, cv::Size( 640, 480 ) );\n    if( !writer.isOpened() ){\n        return -1;\n    }\n\n    while( true ){\n        cv::Mat image = cv::Mat( 480, 640, CV_8UC3 );\n\n        /* Image Processing */\n\n        // Write Image to File ( e.g. output_030.jpg, output_031.jpg, ... )\n        writer << image;\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n## cv::VideoWriter()\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\n<code>cv::VideoWriter()</code>\u3067\u9023\u756a\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u5834\u5408\u3001\u53d6\u5f97\u30fb\u8a2d\u5b9a\u3067\u304d\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n## \u304a\u307e\u3051\uff1a\u672a\u5b9f\u88c5\u306e\u6a5f\u80fd\u306b\u3064\u3044\u3066\n<code>cv::imwrite()</code>\u3067\u306f\u7b2c3\u5f15\u6570(params)\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001OpenCV 3.1\u306e\u5b9f\u88c5\u3067\u306f<code>cv::VideoWriter()</code>\u3067\u3053\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u672c\u6765\u3067\u3042\u308c\u3070<code>cv::VideoWriter::set()</code>\u3067<code>cv::imwrite()</code>\u3068\u540c\u7b49\u306e\u8a2d\u5b9a\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3079\u304d\u3067\u3059\u3002\n\nOpenCV\u306f\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u305d\u3046\u3067\u3059\u3001\u5b9f\u88c5\u3059\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u3002\n\n\u2192 \u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002(\uff40\u30fb\u03c9\u30fb\u00b4)b\n\n\u3077\u308b\u308a\u304f\u304c\u307e\u30fc\u3058\u3055\u308c\u305f\u306e\u3067OpenCV 3.2\u304b\u3089\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u30fd(\u0e51\u2579\u25e1\u2579)\uff89\n[Add support image save parameters in VideoWriter #7761 | OpenCV](https://github.com/opencv/opencv/pull/7761)\n\n```cpp:cpp\n#include <opencv2/opencv.hpp>\n\nint main( int argc, char* argv[] )\n{\n    // Create Video Writer\n    cv::VideoWriter writer( \"output_%03d.jpg\", 0, 0.0, cv::Size( 640, 480 ) );\n    if( !writer.isOpened() ){\n        return -1;\n    }\n\n    // Set Write Image Parameters ( Available from OpenCV Next Version )\n    writer.set( cv::CAP_PROP_IMAGES_BASE + cv::IMWRITE_JPEG_QUALITY, 80 ); // PR#7761(Merged)\n\n    while( true ){\n        cv::Mat image = cv::Mat( 480, 640, CV_8UC3 );\n\n        /* Image Processing */\n\n        // Write Image to File\n        writer << image;\n\n        cv::imshow( \"image\", image );\n        if( cv::waitKey( 30 ) >= 0 ){\n            break;\n        }\n    }\n\n    cv::destroyAllWindows();\n\n    return 0;\n}\n```\n\n# \u307e\u3068\u3081\n\u597d\u304d\u306a\u65b9\u6cd5\u3092\u4f7f\u3048\u3070\u3044\u3044\u3088\u3002\n\n# \u5099\u8003\n\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n* Visual Studio 2015 \n* OpenCV 3.1.0\n", "tags": ["OpenCV", "C++", "\u753b\u50cf\u51e6\u7406"]}