{"tags": ["Python", "numpy", "C++", "boost"], "context": " More than 1 year has passed since last update.\n\n\u76ee\u7684\nboost.python\u3084boost.numpy\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001c++\u3067numpy.ndarray\u3092\u6271\u3048\u308bpython\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nboost.numpy\u306f\u826f\u304f\u3067\u304d\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u304c\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u4f7f\u3048\u306a\u3044\u306a\u3069\u30c7\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u3084\u3084\u4e0d\u4fbf\u306a\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30c7\u30fc\u30bf\u3078\u7c21\u5358\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u80cc\u666f\n\nnumpy.ndarray\u3068\u306f\npython\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e00\u3064numpy\u304c\u63d0\u4f9b\u3059\u308b\u591a\u6b21\u5143\u914d\u5217\u3067\u3059\u3002\u3053\u308c\u306a\u3057\u306bpython\u3067\u306e\u6570\u5024\u8a08\u7b97\u304c\u3042\u308a\u5f97\u306a\u3044\u304f\u3089\u3044\u5e83\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\nboost.numpy\u3068\u306f\nnumpy\u3092c++\u304b\u3089\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\nnamespace bp = boost::python;\nnamespace np = boost::numpy;\n\nvoid func(np::ndarray &data2d) {\n  // data2d \u306f\u4e8c\u6b21\u5143\u914d\u5217\u3068\u3057\u3066i,j\u8981\u7d20\u306b0\u3092\u4ee3\u5165\n  for (int i = 0; i < data2d.shape(0); ++i) {\n    for (int j = 0; j < data2d.shape(1); ++j) {\n      data2d[bp::make_tuple(i, j)] = 0.0;\n    }\n  }\n}\n\n\n\u5c0f\u6280\u306e\u6761\u4ef6\n\u3053\u306e\u5c0f\u6280\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u914d\u5217\u306e\u6b21\u5143\u6570\u3001\u8981\u7d20\u578b\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3067\u3042\u308b\nnumpy.ndarray\u306e\u30c7\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u304c\u9023\u7d9a\u3067\u3042\u308b\n\n\u4e00\u3064\u76ee\u306e\u6761\u4ef6\u306f\u591a\u304f\u306e\u5834\u5408\u3067\u6e80\u305f\u3055\u308c\u308b\u3092\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u4e8c\u3064\u76ee\u306b\u95a2\u3057\u3066\u3082\u3001\u5143\u3005\u306f\u5927\u304d\u306a\u914d\u5217\u304b\u3089\u4e00\u90e8\u3092\u5207\u308a\u51fa\u3057\u305f\u5909\u6570\u3067\u306a\u3044\u9650\u308a\u306f\u3001\u6e80\u305f\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\n\u5229\u7528\u3059\u308b\u306e\u306fboost.multi_array_ref\u3067\u3059\u3002\nnumpy.ndarray\u304cpython\u306e\u591a\u6b21\u5143\u914d\u5217\u306a\u306e\u3067\u3001c++\u3067\u3082\u591a\u6b21\u5143\u914d\u5217\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u307e\u3059\u3002\nboost.multi_array_ref\u306fboost.multi_array\u306e\u81ea\u5206\u3067\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002boost.multi_array\u306e\u8a73\u3057\u3044\u8aac\u660e\u306f\u3053\u3061\u3089\u3092\u3069\u3046\u305e\u3002(boost::multi_array - Kmonos.net) \u3061\u306a\u307f\u306b\u3001boost.const_multi_array_ref\u3068\u3044\u3046\u8aad\u307f\u8fbc\u307f\u306e\u307f\u3067\u3001\u66f8\u304d\u8fbc\u307f\u3067\u304d\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u5177\u4f53\u4f8b\nvoid func(np:ndarray &data2d) {\n  const std::array<int, 2> shape = {data2d.shape(0), data2d.shape(1)};\n  boost::multi_array_ref<double, 2> wrapper(reinterpret_cast<double*>(data2d.get_data()), shape);\n  // i,j\u8981\u7d20\u3078\u306fwrapper[i][j]\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u304c\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5229\u7528\n  for (boost::multi_array_ref_double, 2>::subarray<1>::type &&sub : wrapper) {\n    boost::fill(sub, 0.0);\n  }\n}\n\n\u305d\u3046\u3059\u308b\u3068\u3001\u3053\u3093\u306a\u611f\u3058\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n\u3082\u3061\u308d\u3093\u3001boost.multi_array_ref\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308b\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u65b9\u6cd5(C++\u3067Python\u3092\u62e1\u5f35\u3059\u308b\u305f\u3081\u306eBoost.NumPy\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb(\u5b9f\u8df5\u7de8))\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u591a\u5c11\u306e\u30aa\u30fc\u30d0\u30d8\u30c3\u30c9\u306f\u6c17\u306b\u305b\u305a\u5b89\u5168\u7b56\u3067\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u308f\u304b\u308a\u3084\u3059\u3055\u3084\u3001\u7d39\u4ecb\u306e\u610f\u5473\u3082\u3042\u308b\u306e\u3067boost::multi_array_ref<double, 2>\u30682\u6b21\u5143\u914d\u5217\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u304c\u3001\nconst std::array<int, 1> shape = {data2d.shape(0) * data2d.shape(1)};\n  boost::multi_array_ref<double, 1> wrapper(reinterpret_cast<double*>(data2d.get_data()), shape); \nboost::fill(wrapper, 0.0);\n\n\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u4e00\u767a\u3067\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\n\u3084\u3063\u3071\u308a\u3053\u3053\u3067\u3082boost\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u983c\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ed6\u306b\u3044\u3044\u65b9\u6cd5(boost.multi_array_ref\u4ee5\u5916\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3001boost.numpy\u306b\u4ee3\u308f\u308b\u4f55\u304b\u306a\u3069)\u3092\u3054\u5b58\u77e5\u306e\u65b9\u306f\u3001\u662f\u975e\u3068\u3082\u304a\u77e5\u3089\u305b\u304f\u3060\u3055\u3044\u3002\n#\u76ee\u7684\nboost.python\u3084boost.numpy\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001c++\u3067numpy.ndarray\u3092\u6271\u3048\u308bpython\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u7c21\u5358\u306b\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nboost.numpy\u306f\u826f\u304f\u3067\u304d\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u304c\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u4f7f\u3048\u306a\u3044\u306a\u3069\u30c7\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u3084\u3084\u4e0d\u4fbf\u306a\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u30c7\u30fc\u30bf\u3078\u7c21\u5358\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n# \u80cc\u666f\n## numpy.ndarray\u3068\u306f\npython\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e00\u3064numpy\u304c\u63d0\u4f9b\u3059\u308b\u591a\u6b21\u5143\u914d\u5217\u3067\u3059\u3002\u3053\u308c\u306a\u3057\u306bpython\u3067\u306e\u6570\u5024\u8a08\u7b97\u304c\u3042\u308a\u5f97\u306a\u3044\u304f\u3089\u3044\u5e83\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n## boost.numpy\u3068\u306f\nnumpy\u3092c++\u304b\u3089\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\n\n```cpp\nnamespace bp = boost::python;\nnamespace np = boost::numpy;\n\nvoid func(np::ndarray &data2d) {\n  // data2d \u306f\u4e8c\u6b21\u5143\u914d\u5217\u3068\u3057\u3066i,j\u8981\u7d20\u306b0\u3092\u4ee3\u5165\n  for (int i = 0; i < data2d.shape(0); ++i) {\n    for (int j = 0; j < data2d.shape(1); ++j) {\n      data2d[bp::make_tuple(i, j)] = 0.0;\n    }\n  }\n}\n```\n\n# \u5c0f\u6280\u306e\u6761\u4ef6\n\u3053\u306e\u5c0f\u6280\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n* \u914d\u5217\u306e\u6b21\u5143\u6570\u3001\u8981\u7d20\u578b\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3067\u3042\u308b\n* numpy.ndarray\u306e\u30c7\u30fc\u30bf\u306e\u30e1\u30e2\u30ea\u304c\u9023\u7d9a\u3067\u3042\u308b\n\n\u4e00\u3064\u76ee\u306e\u6761\u4ef6\u306f\u591a\u304f\u306e\u5834\u5408\u3067\u6e80\u305f\u3055\u308c\u308b\u3092\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u4e8c\u3064\u76ee\u306b\u95a2\u3057\u3066\u3082\u3001\u5143\u3005\u306f\u5927\u304d\u306a\u914d\u5217\u304b\u3089\u4e00\u90e8\u3092\u5207\u308a\u51fa\u3057\u305f\u5909\u6570\u3067\u306a\u3044\u9650\u308a\u306f\u3001\u6e80\u305f\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\n\u5229\u7528\u3059\u308b\u306e\u306fboost.multi_array_ref\u3067\u3059\u3002\nnumpy.ndarray\u304cpython\u306e\u591a\u6b21\u5143\u914d\u5217\u306a\u306e\u3067\u3001c++\u3067\u3082\u591a\u6b21\u5143\u914d\u5217\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u307e\u3059\u3002\nboost.multi_array_ref\u306fboost.multi_array\u306e\u81ea\u5206\u3067\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002boost.multi_array\u306e\u8a73\u3057\u3044\u8aac\u660e\u306f\u3053\u3061\u3089\u3092\u3069\u3046\u305e\u3002([boost::multi_array - Kmonos.net](http://www.kmonos.net/alang/boost/classes/multi_array.html)) \u3061\u306a\u307f\u306b\u3001boost.const_multi_array_ref\u3068\u3044\u3046\u8aad\u307f\u8fbc\u307f\u306e\u307f\u3067\u3001\u66f8\u304d\u8fbc\u307f\u3067\u304d\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3082\u3042\u308a\u307e\u3059\u3002\n## \u5177\u4f53\u4f8b\n\n```cpp\nvoid func(np:ndarray &data2d) {\n  const std::array<int, 2> shape = {data2d.shape(0), data2d.shape(1)};\n  boost::multi_array_ref<double, 2> wrapper(reinterpret_cast<double*>(data2d.get_data()), shape);\n  // i,j\u8981\u7d20\u3078\u306fwrapper[i][j]\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u304c\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5229\u7528\n  for (boost::multi_array_ref_double, 2>::subarray<1>::type &&sub : wrapper) {\n    boost::fill(sub, 0.0);\n  }\n}\n```\n\n\u305d\u3046\u3059\u308b\u3068\u3001\u3053\u3093\u306a\u611f\u3058\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n\n\u3082\u3061\u308d\u3093\u3001boost.multi_array_ref\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308b\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u65b9\u6cd5([C++\u3067Python\u3092\u62e1\u5f35\u3059\u308b\u305f\u3081\u306eBoost.NumPy\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb(\u5b9f\u8df5\u7de8)](http://qiita.com/termoshtt/items/81eeb0467d9087958f7f))\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u591a\u5c11\u306e\u30aa\u30fc\u30d0\u30d8\u30c3\u30c9\u306f\u6c17\u306b\u305b\u305a\u5b89\u5168\u7b56\u3067\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u308f\u304b\u308a\u3084\u3059\u3055\u3084\u3001\u7d39\u4ecb\u306e\u610f\u5473\u3082\u3042\u308b\u306e\u3067`boost::multi_array_ref<double, 2>`\u30682\u6b21\u5143\u914d\u5217\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u304c\u3001\n\n```cpp\nconst std::array<int, 1> shape = {data2d.shape(0) * data2d.shape(1)};\n  boost::multi_array_ref<double, 1> wrapper(reinterpret_cast<double*>(data2d.get_data()), shape); \nboost::fill(wrapper, 0.0);\n```\n\n\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u4e00\u767a\u3067\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u307e\u3059\u3002\n\n\n# \u6700\u5f8c\u306b\n\u3084\u3063\u3071\u308a\u3053\u3053\u3067\u3082boost\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u983c\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\u4ed6\u306b\u3044\u3044\u65b9\u6cd5(boost.multi_array_ref\u4ee5\u5916\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3001boost.numpy\u306b\u4ee3\u308f\u308b\u4f55\u304b\u306a\u3069)\u3092\u3054\u5b58\u77e5\u306e\u65b9\u306f\u3001\u662f\u975e\u3068\u3082\u304a\u77e5\u3089\u305b\u304f\u3060\u3055\u3044\u3002\n\n"}