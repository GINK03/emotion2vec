{"context": "\n\n\u6982\u8981\n.NET Framework\u3067\u897f\u66a6\u304b\u3089\u548c\u66a6\u306b\u5909\u63db\u3057\u3001\u548c\u66a6\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\u897f\u66a6\u304b\u3089\u548c\u66a6\u306b\u5909\u63db\u3059\u308b\u6d41\u308c\n\n\n\u30ab\u30eb\u30c1\u30e3\u30fc\u3092\u4f5c\u6210\n\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u548c\u66a6\u306b\u5909\u66f4\n\u897f\u66a6\u65e5\u4ed8\u3092\u6e21\u3057\u3066\u548c\u66a6\u306b\u5909\u63db\n\n\n\n\n\u30ab\u30eb\u30c1\u30e3\u30fc\u3068\u30ab\u30ec\u30f3\u30c0\u30fc\u30af\u30e9\u30b9\u306e\u8a2d\u5b9a\nExcel\u3068\u540c\u3058\u3088\u3046\u306b.NET Framework\u3067\u3082\u6a19\u6e96\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306f\u30b0\u30ec\u30b4\u30ea\u30aa\u66a6\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u548c\u66a6\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\u548c\u66a6\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306f\u3001JapaneseCalendar\u30af\u30e9\u30b9\uff08System.Globalization\u540d\u524d\u7a7a\u9593\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30ab\u30eb\u30c1\u30e3\u30fc\u3068\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u8a2d\u5b9a\nusing System.Globalization;\n\n// 1\u756a\u76ee\u306e\u5f15\u6570\uff1a\u56fd\u3092\u9078\u629e\n// 2\u756a\u76ee\u306e\u5f15\u6570\uff1a\u30ab\u30ec\u30f3\u30c0\u30fc\u7b49\u3092\u3069\u306e\u3088\u3046\u306b\u521d\u671f\u5316\u3059\u308b\u304b\u3092\u9078\u629e\n//    true\u306e\u5834\u5408\u306f\u3001\u56fd\u306e\u8a2d\u5b9a\u304c\u5408\u3048\u3070\u3001\u30b7\u30b9\u30c6\u30e0\u8a2d\u5b9a\u306e\u3010\u5730\u57df\u3068\u8a00\u8a9e\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3011\u306e\u5024\u3092\u4f7f\u7528\uff08\u56fd\u306e\u8a2d\u5b9a\u304c\u5408\u308f\u306a\u3044\u5834\u5408\u306f\u672a\u5b9a\u7fa9\uff09\n//    false\u306e\u5834\u5408\u306f\u3001.NET Framework\u898f\u5b9a\u306e\u5024\u3092\u4f7f\u7528\nculture = new CultureInfo(\"ja-JP\", true); \n\n// \u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u548c\u66a6\u306b\u5909\u66f4\nculture.DateTimeFormat.Calendar = new JapaneseCalendar();\n\n\n\n\u53d6\u5f97\u53ef\u80fd\u306a\u60c5\u5831\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n\n\n\u540d\u524d\n\u8aac\u660e\n\n\n\n\nJapaneseDate()\nJapaneseDate\u306e\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30920001/01/01 00:00:00\u3067\u521d\u671f\u5316\u3059\u308b\u3002\u5229\u7528\u3059\u308b\u5834\u5408\u306b\u306fSetDate(DateTime)\u30e1\u30bd\u30c3\u30c9\u3067\u65e5\u4ed8\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n\nJapaneseDate(DateTime)\nJapaneseDate\u306e\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6307\u5b9a\u3057\u305f\u65e5\u4ed8\u3067\u521d\u671f\u5316\u3059\u308b\u3002\n\n\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\n\n\n\n\n\u540d\u524d\n\u8aac\u660e\n\n\n\n\n\u897f\u66a6\u65e5\u4ed8\nOriginalDate\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u307e\u305f\u306fSetDate\u3067\u6307\u5b9a\u3055\u308c\u305fDateTime\u578b\u306e\u897f\u66a6\u65e5\u4ed8\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\n\u548c\u66a6\u5909\u63db\u4e0d\u53ef\nIsConvert\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u307e\u305f\u306fSetDate\u3067\u6307\u5b9a\u3055\u308c\u305f\u897f\u66a6\u65e5\u4ed8\u304c\u548c\u66a6\u5909\u63db\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u8868\u3059\u3002\uff08True\uff1a\u5909\u63db\u53ef\u80fd\u3001False\uff1a\u5909\u63db\u4e0d\u80fd\uff09\n\n\n\u9577\u3044\u6f22\u5b57\u306e\u5143\u53f7\nLongEra\n\u9577\u3044\u6f22\u5b57\u306e\u5143\u53f7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08\u660e\u6cbb\u3001\u5927\u6b63\u3001\u662d\u548c\u3001\u5e73\u6210\uff09\n\n\n\u77ed\u3044\u6f22\u5b57\u306e\u5143\u53f7\nShortEra\n\u77ed\u3044\u6f22\u5b57\u306e\u5143\u53f7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08\u660e\u3001\u5927\u3001\u662d\u3001\u5e73\uff09\n\n\n\u82f1\u5b57\u306e\u5143\u53f7\nAlphabetEra\n\u82f1\u5b57\u306e\u5143\u53f7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08M\u3001T\u3001S\u3001H\uff09\n\n\n\u5e74\nYear\n\u548c\u66a6\u306e\u5e74\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\n\u6708\nMonth\n\u6708\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\n\u65e5\nDay\n\u65e5\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\n\u9577\u3044\u66dc\u65e5\nLongDayOfWeek\n\u9577\u3044\u66dc\u65e5\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08\u6708\u66dc\u65e5\u3001\u706b\u66dc\u65e5\u3001\u6c34\u66dc\u65e5\u3001\u6728\u66dc\u65e5\u3001\u91d1\u66dc\u65e5\u3001\u571f\u66dc\u65e5\u3001\u65e5\u66dc\u65e5\uff09\n\n\n\u77ed\u3044\u66dc\u65e5\nShortDayOfWeek\n\u77ed\u3044\u66dc\u65e5\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08\u6708\u3001\u706b\u3001\u6c34\u3001\u6728\u3001\u91d1\u3001\u571f\u3001\u65e5\uff09\n\n\n\u5f53\u65e5\u65e5\u4ed8\nToday\n\u5f53\u65e5\u65e5\u4ed8\u306e\u548c\u66a6\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306fStatic\u5c5e\u6027\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\n\u30e1\u30bd\u30c3\u30c9\n\n\n\n\n\u540d\u524d\n\u8aac\u660e\n\n\n\n\n\u897f\u66a6\u306e\u8a2d\u5b9a\nSetDate(DateTime)\n\u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u897f\u66a6\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\n\n\n\u548c\u66a6\u30af\u30e9\u30b9\n\n\u548c\u66a6\u30af\u30e9\u30b9\nusing System;\nusing System.Globalization;\n\nnamespace Bss.Tools\n{\n    public class JapaneseDate\n    {\n        private CultureInfo culture;\n\n        // \u897f\u66a6\u306e\u65e5\u4ed8\uff08\u3053\u306e\u65e5\u4ed8\u306b\u57fa\u3065\u3044\u3066\u548c\u66a6\u7b49\u304c\u7b97\u51fa\u3055\u308c\u3066\u3044\u308b\uff09\n        public DateTime OriginalDate { get; private set; }\n        // \u5f53\u65e5\u65e5\u4ed8\u306e\u548c\u66a6\n        private static JapaneseDate today = new JapaneseDate(DateTime.Today);\n        // \u548c\u66a6\u306b\u5909\u63db\u3067\u304d\u305f\u304b\uff08true:\u5909\u63db\u53ef\u80fd\u3001false:\u5909\u63db\u4e0d\u53ef\uff09\n        public bool IsConvert { get; private set; }\n        // \u548c\u66a6\u306e\u5e74\n        public int Year { get; private set; }\n        // \u6708\n        public int Month { get; private set; }\n        // \u65e5\n        public int Day { get; private set; }\n        // \u9577\u3044\u6f22\u5b57\u306e\u5143\u53f7\uff08\u660e\u6cbb\u3001\u5927\u6b63\u3001\u662d\u548c\u3001\u5e73\u6210\uff09\n        public String LongEra { get; private set; }\n        // \u77ed\u3044\u6f22\u5b57\u306e\u5143\u53f7\uff08\u660e\u3001\u5927\u3001\u662d\u3001\u5e73\uff09\n        public String ShortEra { get; private set; }\n        // \u82f1\u5b57\u306e\u5143\u53f7\uff08M\u3001T\u3001S\u3001H\uff09\n        public String AlphabetEra { get; private set; }\n        // \u9577\u3044\u66dc\u65e5\uff08\u6708\u66dc\u65e5\u3001\u706b\u66dc\u65e5\u3001\u6c34\u66dc\u65e5\u3001\u6728\u66dc\u65e5\u3001\u91d1\u66dc\u65e5\u3001\u571f\u66dc\u65e5\u3001\u65e5\u66dc\u65e5\uff09\n        public string LongDayOfWeek { get; private set; }\n        // \u77ed\u3044\u66dc\u65e5\uff08\u6708\u3001\u706b\u3001\u6c34\u3001\u6728\u3001\u91d1\u3001\u571f\u3001\u65e5\uff09\n        public string ShortDayOfWeek { get; private set; }\n\n        /// <summary>\n        /// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u521d\u671f\u5316\u3059\u308b\u3002\n        /// \u5909\u63db\u3059\u308b\u897f\u66a6\u65e5\u4ed8\u306fSetDate\u3067\u8a2d\u5b9a\u3059\u308b\u3002\n        /// </summary>\n        public JapaneseDate()\n        {\n            SetCulture();\n\n            OriginalDate   = DateTime.MinValue;\n            IsConvert      = false;\n            Year           = 0;\n            Month          = 0;\n            Day            = 0;\n            LongEra        = \"\";\n            ShortEra       = \"\";\n            AlphabetEra    = \"\";\n            LongDayOfWeek  = \"\";\n            ShortDayOfWeek = \"\";\n        }\n\n        /// <summary>\n        /// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u897f\u66a6\u65e5\u4ed8\u3092\u3082\u3068\u306b\u521d\u671f\u5316\u3059\u308b\u3002\n        /// </summary>\n        /// <param name=\"ymd\">\n        /// \u521d\u671f\u5316\u3082\u3068\u3068\u306a\u308b\u897f\u66a6\u65e5\u4ed8\n        /// </param>\n        public JapaneseDate(DateTime ymd) : this()\n        {\n            OriginalDate  = ymd;\n            Month         = ymd.Month;\n            Day           = ymd.Day;\n\n            IsConvert = CheckRange();\n\n            if (IsConvert)\n            {\n                Year = culture.DateTimeFormat.Calendar.GetYear(OriginalDate);\n                SetEra();\n                SetDayOfWeek();\n            }\n        }\n\n        /// <summary>\n        /// \u897f\u66a6\u65e5\u4ed8\u3092\u3082\u3068\u306b\u521d\u671f\u5316\u3059\u308b\u3002\n        /// </summary>\n        /// <param name=\"ymd\">\n        /// \u521d\u671f\u5316\u3082\u3068\u3068\u306a\u308b\u897f\u66a6\u65e5\u4ed8\n        /// </param>\n        public void SetDate(DateTime ymd)\n        {\n            var japaneseDate = new JapaneseDate(ymd);\n\n            OriginalDate   = japaneseDate.OriginalDate;\n            IsConvert      = japaneseDate.IsConvert;\n            Year           = japaneseDate.Year;\n            Month          = japaneseDate.Month;\n            Day            = japaneseDate.Day;\n            LongEra        = japaneseDate.LongEra;\n            ShortEra       = japaneseDate.ShortEra;\n            AlphabetEra    = japaneseDate.AlphabetEra;\n            LongDayOfWeek  = japaneseDate.LongDayOfWeek;\n            ShortDayOfWeek = japaneseDate.ShortDayOfWeek;\n        }\n\n        /// <summary>\n        /// \u5f53\u65e5\u65e5\u4ed8\u306e\u548c\u66a6\u3092\u53d6\u5f97\u3059\u308b\u3002\n        /// \u5229\u7528\u4e2d\u306b\u65e5\u4ed8\u304c\u5909\u308f\u3063\u305f\u5834\u5408\u3092\u8003\u3048\u3066\u6bd4\u8f03\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n        /// </summary>\n        public static JapaneseDate Today\n        {\n            get\n            {\n                if (today.OriginalDate != DateTime.Today)\n                {\n                    today = new JapaneseDate(DateTime.Today);\n                }\n\n                return today;\n            }\n        }\n\n        /// <summary>\n        /// \u53d6\u5f97\u3057\u305f\u897f\u66a6\u65e5\u4ed8\u304c\u548c\u66a6\u306b\u5909\u63db\u3067\u304d\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3002\n        /// </summary>\n        /// <returns>\n        /// \u548c\u66a6\u306b\u5909\u63db\u3067\u304d\u305f\u304b\u7d50\u679c\u3092\u8fd4\u3059\u3002\n        /// true \uff1a\u5909\u63db\u3067\u304d\u305f\n        /// false\uff1a\u5909\u63db\u3067\u304d\u306a\u3044\n        /// </returns>\n        private bool CheckRange()\n        {\n            return (culture.DateTimeFormat.Calendar.MinSupportedDateTime <= OriginalDate &&\n                    culture.DateTimeFormat.Calendar.MaxSupportedDateTime >= OriginalDate);\n        }\n\n        /// <summary>\n        /// \u548c\u66a6\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u6301\u3064\u30ab\u30eb\u30c1\u30e3\u30fc\u3092\u4f5c\u6210\u3059\u308b\u3002\n        /// </summary>\n        private void SetCulture()\n        {\n            // 1\u756a\u76ee\u306e\u5f15\u6570\uff1a\u56fd\u3092\u9078\u629e\n            // 2\u756a\u76ee\u306e\u5f15\u6570\uff1a\u30ab\u30ec\u30f3\u30c0\u30fc\u7b49\u3092\u3069\u306e\u3088\u3046\u306b\u521d\u671f\u5316\u3059\u308b\u304b\u3092\u9078\u629e\n            //    true\u306e\u5834\u5408\u306f\u3001\u56fd\u306e\u8a2d\u5b9a\u304c\u5408\u3048\u3070\u3001\u30b7\u30b9\u30c6\u30e0\u8a2d\u5b9a\u306e\u3010\u5730\u57df\u3068\u8a00\u8a9e\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3011\u306e\u5024\u3092\u4f7f\u7528\uff08\u56fd\u306e\u8a2d\u5b9a\u304c\u5408\u308f\u306a\u3044\u5834\u5408\u306f\u672a\u5b9a\u7fa9\uff09\n            //    false\u306e\u5834\u5408\u306f\u3001.NET Framework\u898f\u5b9a\u306e\u5024\u3092\u4f7f\u7528\n            culture = new CultureInfo(\"ja-JP\", true);\n\n            // \u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u548c\u66a6\u306b\u5909\u66f4\n            culture.DateTimeFormat.Calendar = new JapaneseCalendar();\n        }\n\n        /// <summary>\n        /// \u5143\u53f7\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n        /// </summary>\n        private void SetEra()\n        {\n            // \u897f\u66a6\u65e5\u4ed8\u304b\u3089\u5143\u53f7\u756a\u53f7\u3092\u53d6\u5f97\n            int era = culture.DateTimeFormat.Calendar.GetEra(OriginalDate);\n\n            LongEra  = culture.DateTimeFormat.GetEraName(era);\n            ShortEra = culture.DateTimeFormat.GetAbbreviatedEraName(era);\n\n            string[] alphabets = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n                                  \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n\n            foreach (string alphabet in alphabets)\n            {\n                // \u897f\u66a6\u65e5\u4ed8\u304b\u3089\u53d6\u5f97\u3057\u305f\u5143\u53f7\u756a\u53f7\u3068\u4e00\u81f4\u3059\u308b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u63a2\u7d22\n                // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u4e00\u6587\u5b57\u304b\u3089\u3082\u5143\u53f7\u756a\u53f7\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\n                if (culture.DateTimeFormat.GetEra(alphabet) == era)\n                {\n                    AlphabetEra = alphabet;\n                    break;\n                }\n            }\n        }\n\n        /// <summary>\n        /// \u66dc\u65e5\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n        /// </summary>\n        private void SetDayOfWeek()\n        {\n            DayOfWeek dayOfWeek = culture.DateTimeFormat.Calendar.GetDayOfWeek(OriginalDate);\n\n            LongDayOfWeek  = culture.DateTimeFormat.GetDayName(dayOfWeek);\n            ShortDayOfWeek = culture.DateTimeFormat.GetAbbreviatedDayName(dayOfWeek);\n        }\n    }\n}\n\n\n\n\u5229\u7528\u65b9\u6cd5\n\u5229\u7528\u65b9\u6cd5\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u897f\u66a6\u65e5\u4ed8\u3092\u6e21\u3059\u304b\u3001SetDate\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u3002\n\n\u5229\u7528\u65b9\u6cd5\nvar initDate = new DateTime(1868, 9, 8);\nvar japaneseDate = new JapaneseDate(initDate);\n\nif (japaneseDate.IsConvert)\n{\n    string date = string.Format(\"{0}{1}\u5e74{2}\u6708{3}\u65e5\", \n                                japaneseDate.LongEra,\n                                japaneseDate.Year,\n                                japaneseDate.Month,\n                                japaneseDate.Day);\n}\n\n\n\u51fa\u529b\u7d50\u679c\uff1a\u5e73\u621029\u5e742\u670812\u65e5\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System;\n\nnamespace Bss.Tools.Tests\n{\n    [TestClass()]\n    public class JapaneseDateUnitTests\n    {\n        [TestMethod()]\n        public void JapaneseDateUnitTest1()\n        {\n            var initDate = new DateTime(1868, 9, 7);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsFalse(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 0);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest2()\n        {\n            var initDate = new DateTime(1868, 9, 8);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 1);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u660e\u6cbb\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u660e\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"M\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u706b\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u706b\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest3()\n        {\n            var initDate = new DateTime(1912, 7, 29);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 45);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u660e\u6cbb\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u660e\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"M\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u6708\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u6708\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest4()\n        {\n            var initDate = new DateTime(1912, 7, 30);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 1);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5927\u6b63\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5927\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"T\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u706b\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u706b\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest5()\n        {\n            var initDate = new DateTime(1926, 12, 24);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 15);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5927\u6b63\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5927\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"T\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u91d1\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u91d1\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest6()\n        {\n            var initDate = new DateTime(1926, 12, 25);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 1);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u662d\u548c\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u662d\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"S\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u571f\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u571f\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest7()\n        {\n            var initDate = new DateTime(1989, 1, 7);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 64);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u662d\u548c\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u662d\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"S\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u571f\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u571f\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest8()\n        {\n            var initDate = new DateTime(1989, 1, 8);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 1);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u65e5\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u65e5\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest9()\n        {\n            var initDate = new DateTime(2017, 2, 5);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u65e5\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u65e5\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest10()\n        {\n            var initDate = new DateTime(2017, 2, 6);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u6708\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u6708\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest11()\n        {\n            var initDate = new DateTime(2017, 2, 7);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u706b\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u706b\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest12()\n        {\n            var initDate = new DateTime(2017, 2, 8);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u6c34\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u6c34\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest13()\n        {\n            var initDate = new DateTime(2017, 2, 9);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u6728\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u6728\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest14()\n        {\n            var initDate = new DateTime(2017, 2, 10);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u91d1\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u91d1\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest15()\n        {\n            var initDate = new DateTime(2017, 2, 11);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u571f\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u571f\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest16()\n        {\n            var initDate = new DateTime(2017, 2, 11);\n            var japaneseDate = new JapaneseDate();\n\n            japaneseDate.SetDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u571f\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u571f\");\n        }\n\n        [Ignore()]\n        [TestMethod()]\n        public void JapaneseDateUnitTest17()\n        {\n            Assert.AreEqual(JapaneseDate.Today.OriginalDate, DateTime.Today);\n            Assert.IsTrue(JapaneseDate.Today.IsConvert);\n            Assert.AreEqual(JapaneseDate.Today.Year, 29);\n            Assert.AreEqual(JapaneseDate.Today.Month, DateTime.Today.Month);\n            Assert.AreEqual(JapaneseDate.Today.Day, DateTime.Today.Day);\n            Assert.AreEqual(JapaneseDate.Today.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(JapaneseDate.Today.ShortEra, \"\u5e73\");\n            Assert.AreEqual(JapaneseDate.Today.AlphabetEra, \"H\");\n            Assert.AreEqual(JapaneseDate.Today.LongDayOfWeek, \"\u6708\u66dc\u65e5\");\n            Assert.AreEqual(JapaneseDate.Today.ShortDayOfWeek, \"\u6708\");\n        }\n    }\n}\n\n\n\n## \u6982\u8981\n.NET Framework\u3067\u897f\u66a6\u304b\u3089\u548c\u66a6\u306b\u5909\u63db\u3057\u3001\u548c\u66a6\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n- \u897f\u66a6\u304b\u3089\u548c\u66a6\u306b\u5909\u63db\u3059\u308b\u6d41\u308c\n    1. \u30ab\u30eb\u30c1\u30e3\u30fc\u3092\u4f5c\u6210\n    2. \u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u548c\u66a6\u306b\u5909\u66f4\n    3. \u897f\u66a6\u65e5\u4ed8\u3092\u6e21\u3057\u3066\u548c\u66a6\u306b\u5909\u63db\n\n## \u30ab\u30eb\u30c1\u30e3\u30fc\u3068\u30ab\u30ec\u30f3\u30c0\u30fc\u30af\u30e9\u30b9\u306e\u8a2d\u5b9a\nExcel\u3068\u540c\u3058\u3088\u3046\u306b.NET Framework\u3067\u3082\u6a19\u6e96\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306f\u30b0\u30ec\u30b4\u30ea\u30aa\u66a6\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u548c\u66a6\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\u548c\u66a6\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u306f\u3001JapaneseCalendar\u30af\u30e9\u30b9\uff08System.Globalization\u540d\u524d\u7a7a\u9593\uff09\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp:\u30ab\u30eb\u30c1\u30e3\u30fc\u3068\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u8a2d\u5b9a\nusing System.Globalization;\n\n// 1\u756a\u76ee\u306e\u5f15\u6570\uff1a\u56fd\u3092\u9078\u629e\n// 2\u756a\u76ee\u306e\u5f15\u6570\uff1a\u30ab\u30ec\u30f3\u30c0\u30fc\u7b49\u3092\u3069\u306e\u3088\u3046\u306b\u521d\u671f\u5316\u3059\u308b\u304b\u3092\u9078\u629e\n//    true\u306e\u5834\u5408\u306f\u3001\u56fd\u306e\u8a2d\u5b9a\u304c\u5408\u3048\u3070\u3001\u30b7\u30b9\u30c6\u30e0\u8a2d\u5b9a\u306e\u3010\u5730\u57df\u3068\u8a00\u8a9e\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3011\u306e\u5024\u3092\u4f7f\u7528\uff08\u56fd\u306e\u8a2d\u5b9a\u304c\u5408\u308f\u306a\u3044\u5834\u5408\u306f\u672a\u5b9a\u7fa9\uff09\n//    false\u306e\u5834\u5408\u306f\u3001.NET Framework\u898f\u5b9a\u306e\u5024\u3092\u4f7f\u7528\nculture = new CultureInfo(\"ja-JP\", true); \n\n// \u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u548c\u66a6\u306b\u5909\u66f4\nculture.DateTimeFormat.Calendar = new JapaneseCalendar();\n```\n\n## \u53d6\u5f97\u53ef\u80fd\u306a\u60c5\u5831\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n|\u540d\u524d|\u8aac\u660e|\n|:-----------|:----|\n|JapaneseDate()|JapaneseDate\u306e\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30920001/01/01 00:00:00\u3067\u521d\u671f\u5316\u3059\u308b\u3002\u5229\u7528\u3059\u308b\u5834\u5408\u306b\u306fSetDate(DateTime)\u30e1\u30bd\u30c3\u30c9\u3067\u65e5\u4ed8\u3092\u8a2d\u5b9a\u3059\u308b\u3002|\n|JapaneseDate(DateTime)|JapaneseDate\u306e\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6307\u5b9a\u3057\u305f\u65e5\u4ed8\u3067\u521d\u671f\u5316\u3059\u308b\u3002|\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\n\n| |\u540d\u524d|\u8aac\u660e|\n|:------|:-----------|:----|\n|\u897f\u66a6\u65e5\u4ed8|OriginalDate|\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u307e\u305f\u306fSetDate\u3067\u6307\u5b9a\u3055\u308c\u305fDateTime\u578b\u306e\u897f\u66a6\u65e5\u4ed8\u3092\u53d6\u5f97\u3059\u308b\u3002|\n|\u548c\u66a6\u5909\u63db\u4e0d\u53ef|IsConvert|\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u307e\u305f\u306fSetDate\u3067\u6307\u5b9a\u3055\u308c\u305f\u897f\u66a6\u65e5\u4ed8\u304c\u548c\u66a6\u5909\u63db\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u8868\u3059\u3002\uff08True\uff1a\u5909\u63db\u53ef\u80fd\u3001False\uff1a\u5909\u63db\u4e0d\u80fd\uff09|\n|\u9577\u3044\u6f22\u5b57\u306e\u5143\u53f7|LongEra|\u9577\u3044\u6f22\u5b57\u306e\u5143\u53f7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08\u660e\u6cbb\u3001\u5927\u6b63\u3001\u662d\u548c\u3001\u5e73\u6210\uff09|\n|\u77ed\u3044\u6f22\u5b57\u306e\u5143\u53f7|ShortEra|\u77ed\u3044\u6f22\u5b57\u306e\u5143\u53f7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08\u660e\u3001\u5927\u3001\u662d\u3001\u5e73\uff09|\n|\u82f1\u5b57\u306e\u5143\u53f7|AlphabetEra|\u82f1\u5b57\u306e\u5143\u53f7\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08M\u3001T\u3001S\u3001H\uff09|\n|\u5e74|Year|\u548c\u66a6\u306e\u5e74\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002|\n|\u6708|Month|\u6708\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002|\n|\u65e5|Day|\u65e5\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002|\n|\u9577\u3044\u66dc\u65e5|LongDayOfWeek|\u9577\u3044\u66dc\u65e5\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08\u6708\u66dc\u65e5\u3001\u706b\u66dc\u65e5\u3001\u6c34\u66dc\u65e5\u3001\u6728\u66dc\u65e5\u3001\u91d1\u66dc\u65e5\u3001\u571f\u66dc\u65e5\u3001\u65e5\u66dc\u65e5\uff09|\n|\u77ed\u3044\u66dc\u65e5|ShortDayOfWeek|\u77ed\u3044\u66dc\u65e5\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\uff08\u6708\u3001\u706b\u3001\u6c34\u3001\u6728\u3001\u91d1\u3001\u571f\u3001\u65e5\uff09|\n|\u5f53\u65e5\u65e5\u4ed8|Today|\u5f53\u65e5\u65e5\u4ed8\u306e\u548c\u66a6\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306fStatic\u5c5e\u6027\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30e1\u30bd\u30c3\u30c9\n\n| |\u540d\u524d|\u8aac\u660e|\n|:------|:-----------|:----|\n|\u897f\u66a6\u306e\u8a2d\u5b9a|SetDate(DateTime)|\u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u897f\u66a6\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n## \u548c\u66a6\u30af\u30e9\u30b9\n```csharp:\u548c\u66a6\u30af\u30e9\u30b9\nusing System;\nusing System.Globalization;\n\nnamespace Bss.Tools\n{\n    public class JapaneseDate\n    {\n        private CultureInfo culture;\n\n        // \u897f\u66a6\u306e\u65e5\u4ed8\uff08\u3053\u306e\u65e5\u4ed8\u306b\u57fa\u3065\u3044\u3066\u548c\u66a6\u7b49\u304c\u7b97\u51fa\u3055\u308c\u3066\u3044\u308b\uff09\n        public DateTime OriginalDate { get; private set; }\n        // \u5f53\u65e5\u65e5\u4ed8\u306e\u548c\u66a6\n        private static JapaneseDate today = new JapaneseDate(DateTime.Today);\n        // \u548c\u66a6\u306b\u5909\u63db\u3067\u304d\u305f\u304b\uff08true:\u5909\u63db\u53ef\u80fd\u3001false:\u5909\u63db\u4e0d\u53ef\uff09\n        public bool IsConvert { get; private set; }\n        // \u548c\u66a6\u306e\u5e74\n        public int Year { get; private set; }\n        // \u6708\n        public int Month { get; private set; }\n        // \u65e5\n        public int Day { get; private set; }\n        // \u9577\u3044\u6f22\u5b57\u306e\u5143\u53f7\uff08\u660e\u6cbb\u3001\u5927\u6b63\u3001\u662d\u548c\u3001\u5e73\u6210\uff09\n        public String LongEra { get; private set; }\n        // \u77ed\u3044\u6f22\u5b57\u306e\u5143\u53f7\uff08\u660e\u3001\u5927\u3001\u662d\u3001\u5e73\uff09\n        public String ShortEra { get; private set; }\n        // \u82f1\u5b57\u306e\u5143\u53f7\uff08M\u3001T\u3001S\u3001H\uff09\n        public String AlphabetEra { get; private set; }\n        // \u9577\u3044\u66dc\u65e5\uff08\u6708\u66dc\u65e5\u3001\u706b\u66dc\u65e5\u3001\u6c34\u66dc\u65e5\u3001\u6728\u66dc\u65e5\u3001\u91d1\u66dc\u65e5\u3001\u571f\u66dc\u65e5\u3001\u65e5\u66dc\u65e5\uff09\n        public string LongDayOfWeek { get; private set; }\n        // \u77ed\u3044\u66dc\u65e5\uff08\u6708\u3001\u706b\u3001\u6c34\u3001\u6728\u3001\u91d1\u3001\u571f\u3001\u65e5\uff09\n        public string ShortDayOfWeek { get; private set; }\n\n        /// <summary>\n        /// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u521d\u671f\u5316\u3059\u308b\u3002\n        /// \u5909\u63db\u3059\u308b\u897f\u66a6\u65e5\u4ed8\u306fSetDate\u3067\u8a2d\u5b9a\u3059\u308b\u3002\n        /// </summary>\n        public JapaneseDate()\n        {\n            SetCulture();\n\n            OriginalDate   = DateTime.MinValue;\n            IsConvert      = false;\n            Year           = 0;\n            Month          = 0;\n            Day            = 0;\n            LongEra        = \"\";\n            ShortEra       = \"\";\n            AlphabetEra    = \"\";\n            LongDayOfWeek  = \"\";\n            ShortDayOfWeek = \"\";\n        }\n\n        /// <summary>\n        /// \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u897f\u66a6\u65e5\u4ed8\u3092\u3082\u3068\u306b\u521d\u671f\u5316\u3059\u308b\u3002\n        /// </summary>\n        /// <param name=\"ymd\">\n        /// \u521d\u671f\u5316\u3082\u3068\u3068\u306a\u308b\u897f\u66a6\u65e5\u4ed8\n        /// </param>\n        public JapaneseDate(DateTime ymd) : this()\n        {\n            OriginalDate  = ymd;\n            Month         = ymd.Month;\n            Day           = ymd.Day;\n\n            IsConvert = CheckRange();\n\n            if (IsConvert)\n            {\n                Year = culture.DateTimeFormat.Calendar.GetYear(OriginalDate);\n                SetEra();\n                SetDayOfWeek();\n            }\n        }\n\n        /// <summary>\n        /// \u897f\u66a6\u65e5\u4ed8\u3092\u3082\u3068\u306b\u521d\u671f\u5316\u3059\u308b\u3002\n        /// </summary>\n        /// <param name=\"ymd\">\n        /// \u521d\u671f\u5316\u3082\u3068\u3068\u306a\u308b\u897f\u66a6\u65e5\u4ed8\n        /// </param>\n        public void SetDate(DateTime ymd)\n        {\n            var japaneseDate = new JapaneseDate(ymd);\n\n            OriginalDate   = japaneseDate.OriginalDate;\n            IsConvert      = japaneseDate.IsConvert;\n            Year           = japaneseDate.Year;\n            Month          = japaneseDate.Month;\n            Day            = japaneseDate.Day;\n            LongEra        = japaneseDate.LongEra;\n            ShortEra       = japaneseDate.ShortEra;\n            AlphabetEra    = japaneseDate.AlphabetEra;\n            LongDayOfWeek  = japaneseDate.LongDayOfWeek;\n            ShortDayOfWeek = japaneseDate.ShortDayOfWeek;\n        }\n\n        /// <summary>\n        /// \u5f53\u65e5\u65e5\u4ed8\u306e\u548c\u66a6\u3092\u53d6\u5f97\u3059\u308b\u3002\n        /// \u5229\u7528\u4e2d\u306b\u65e5\u4ed8\u304c\u5909\u308f\u3063\u305f\u5834\u5408\u3092\u8003\u3048\u3066\u6bd4\u8f03\u3092\u884c\u3063\u3066\u3044\u308b\u3002\n        /// </summary>\n        public static JapaneseDate Today\n        {\n            get\n            {\n                if (today.OriginalDate != DateTime.Today)\n                {\n                    today = new JapaneseDate(DateTime.Today);\n                }\n\n                return today;\n            }\n        }\n\n        /// <summary>\n        /// \u53d6\u5f97\u3057\u305f\u897f\u66a6\u65e5\u4ed8\u304c\u548c\u66a6\u306b\u5909\u63db\u3067\u304d\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3002\n        /// </summary>\n        /// <returns>\n        /// \u548c\u66a6\u306b\u5909\u63db\u3067\u304d\u305f\u304b\u7d50\u679c\u3092\u8fd4\u3059\u3002\n        /// true \uff1a\u5909\u63db\u3067\u304d\u305f\n        /// false\uff1a\u5909\u63db\u3067\u304d\u306a\u3044\n        /// </returns>\n        private bool CheckRange()\n        {\n            return (culture.DateTimeFormat.Calendar.MinSupportedDateTime <= OriginalDate &&\n                    culture.DateTimeFormat.Calendar.MaxSupportedDateTime >= OriginalDate);\n        }\n\n        /// <summary>\n        /// \u548c\u66a6\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u6301\u3064\u30ab\u30eb\u30c1\u30e3\u30fc\u3092\u4f5c\u6210\u3059\u308b\u3002\n        /// </summary>\n        private void SetCulture()\n        {\n            // 1\u756a\u76ee\u306e\u5f15\u6570\uff1a\u56fd\u3092\u9078\u629e\n            // 2\u756a\u76ee\u306e\u5f15\u6570\uff1a\u30ab\u30ec\u30f3\u30c0\u30fc\u7b49\u3092\u3069\u306e\u3088\u3046\u306b\u521d\u671f\u5316\u3059\u308b\u304b\u3092\u9078\u629e\n            //    true\u306e\u5834\u5408\u306f\u3001\u56fd\u306e\u8a2d\u5b9a\u304c\u5408\u3048\u3070\u3001\u30b7\u30b9\u30c6\u30e0\u8a2d\u5b9a\u306e\u3010\u5730\u57df\u3068\u8a00\u8a9e\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3011\u306e\u5024\u3092\u4f7f\u7528\uff08\u56fd\u306e\u8a2d\u5b9a\u304c\u5408\u308f\u306a\u3044\u5834\u5408\u306f\u672a\u5b9a\u7fa9\uff09\n            //    false\u306e\u5834\u5408\u306f\u3001.NET Framework\u898f\u5b9a\u306e\u5024\u3092\u4f7f\u7528\n            culture = new CultureInfo(\"ja-JP\", true);\n\n            // \u30ab\u30ec\u30f3\u30c0\u30fc\u3092\u548c\u66a6\u306b\u5909\u66f4\n            culture.DateTimeFormat.Calendar = new JapaneseCalendar();\n        }\n\n        /// <summary>\n        /// \u5143\u53f7\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n        /// </summary>\n        private void SetEra()\n        {\n            // \u897f\u66a6\u65e5\u4ed8\u304b\u3089\u5143\u53f7\u756a\u53f7\u3092\u53d6\u5f97\n            int era = culture.DateTimeFormat.Calendar.GetEra(OriginalDate);\n\n            LongEra  = culture.DateTimeFormat.GetEraName(era);\n            ShortEra = culture.DateTimeFormat.GetAbbreviatedEraName(era);\n\n            string[] alphabets = {\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\",\n                                  \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"};\n\n            foreach (string alphabet in alphabets)\n            {\n                // \u897f\u66a6\u65e5\u4ed8\u304b\u3089\u53d6\u5f97\u3057\u305f\u5143\u53f7\u756a\u53f7\u3068\u4e00\u81f4\u3059\u308b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3092\u63a2\u7d22\n                // \u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u4e00\u6587\u5b57\u304b\u3089\u3082\u5143\u53f7\u756a\u53f7\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\n                if (culture.DateTimeFormat.GetEra(alphabet) == era)\n                {\n                    AlphabetEra = alphabet;\n                    break;\n                }\n            }\n        }\n\n        /// <summary>\n        /// \u66dc\u65e5\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n        /// </summary>\n        private void SetDayOfWeek()\n        {\n            DayOfWeek dayOfWeek = culture.DateTimeFormat.Calendar.GetDayOfWeek(OriginalDate);\n\n            LongDayOfWeek  = culture.DateTimeFormat.GetDayName(dayOfWeek);\n            ShortDayOfWeek = culture.DateTimeFormat.GetAbbreviatedDayName(dayOfWeek);\n        }\n    }\n}\n```\n\n## \u5229\u7528\u65b9\u6cd5\n\u5229\u7528\u65b9\u6cd5\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u897f\u66a6\u65e5\u4ed8\u3092\u6e21\u3059\u304b\u3001SetDate\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u3002\n\n```csharp:\u5229\u7528\u65b9\u6cd5\nvar initDate = new DateTime(1868, 9, 8);\nvar japaneseDate = new JapaneseDate(initDate);\n\nif (japaneseDate.IsConvert)\n{\n    string date = string.Format(\"{0}{1}\u5e74{2}\u6708{3}\u65e5\", \n                                japaneseDate.LongEra,\n                                japaneseDate.Year,\n                                japaneseDate.Month,\n                                japaneseDate.Day);\n}\n```\n\u51fa\u529b\u7d50\u679c\uff1a\u5e73\u621029\u5e742\u670812\u65e5\n\n## \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n```csharp:\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System;\n\nnamespace Bss.Tools.Tests\n{\n    [TestClass()]\n    public class JapaneseDateUnitTests\n    {\n        [TestMethod()]\n        public void JapaneseDateUnitTest1()\n        {\n            var initDate = new DateTime(1868, 9, 7);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsFalse(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 0);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest2()\n        {\n            var initDate = new DateTime(1868, 9, 8);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 1);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u660e\u6cbb\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u660e\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"M\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u706b\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u706b\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest3()\n        {\n            var initDate = new DateTime(1912, 7, 29);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 45);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u660e\u6cbb\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u660e\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"M\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u6708\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u6708\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest4()\n        {\n            var initDate = new DateTime(1912, 7, 30);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 1);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5927\u6b63\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5927\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"T\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u706b\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u706b\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest5()\n        {\n            var initDate = new DateTime(1926, 12, 24);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 15);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5927\u6b63\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5927\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"T\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u91d1\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u91d1\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest6()\n        {\n            var initDate = new DateTime(1926, 12, 25);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 1);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u662d\u548c\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u662d\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"S\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u571f\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u571f\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest7()\n        {\n            var initDate = new DateTime(1989, 1, 7);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 64);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u662d\u548c\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u662d\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"S\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u571f\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u571f\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest8()\n        {\n            var initDate = new DateTime(1989, 1, 8);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 1);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u65e5\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u65e5\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest9()\n        {\n            var initDate = new DateTime(2017, 2, 5);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u65e5\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u65e5\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest10()\n        {\n            var initDate = new DateTime(2017, 2, 6);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u6708\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u6708\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest11()\n        {\n            var initDate = new DateTime(2017, 2, 7);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u706b\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u706b\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest12()\n        {\n            var initDate = new DateTime(2017, 2, 8);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u6c34\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u6c34\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest13()\n        {\n            var initDate = new DateTime(2017, 2, 9);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u6728\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u6728\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest14()\n        {\n            var initDate = new DateTime(2017, 2, 10);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u91d1\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u91d1\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest15()\n        {\n            var initDate = new DateTime(2017, 2, 11);\n            var japaneseDate = new JapaneseDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u571f\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u571f\");\n        }\n\n        [TestMethod()]\n        public void JapaneseDateUnitTest16()\n        {\n            var initDate = new DateTime(2017, 2, 11);\n            var japaneseDate = new JapaneseDate();\n\n            japaneseDate.SetDate(initDate);\n\n            Assert.AreEqual(japaneseDate.OriginalDate, initDate);\n            Assert.IsTrue(japaneseDate.IsConvert);\n            Assert.AreEqual(japaneseDate.Year, 29);\n            Assert.AreEqual(japaneseDate.Month, initDate.Month);\n            Assert.AreEqual(japaneseDate.Day, initDate.Day);\n            Assert.AreEqual(japaneseDate.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(japaneseDate.ShortEra, \"\u5e73\");\n            Assert.AreEqual(japaneseDate.AlphabetEra, \"H\");\n            Assert.AreEqual(japaneseDate.LongDayOfWeek, \"\u571f\u66dc\u65e5\");\n            Assert.AreEqual(japaneseDate.ShortDayOfWeek, \"\u571f\");\n        }\n\n        [Ignore()]\n        [TestMethod()]\n        public void JapaneseDateUnitTest17()\n        {\n            Assert.AreEqual(JapaneseDate.Today.OriginalDate, DateTime.Today);\n            Assert.IsTrue(JapaneseDate.Today.IsConvert);\n            Assert.AreEqual(JapaneseDate.Today.Year, 29);\n            Assert.AreEqual(JapaneseDate.Today.Month, DateTime.Today.Month);\n            Assert.AreEqual(JapaneseDate.Today.Day, DateTime.Today.Day);\n            Assert.AreEqual(JapaneseDate.Today.LongEra, \"\u5e73\u6210\");\n            Assert.AreEqual(JapaneseDate.Today.ShortEra, \"\u5e73\");\n            Assert.AreEqual(JapaneseDate.Today.AlphabetEra, \"H\");\n            Assert.AreEqual(JapaneseDate.Today.LongDayOfWeek, \"\u6708\u66dc\u65e5\");\n            Assert.AreEqual(JapaneseDate.Today.ShortDayOfWeek, \"\u6708\");\n        }\n    }\n}\n```\n\n", "tags": ["C#", ".NET", "framework"]}