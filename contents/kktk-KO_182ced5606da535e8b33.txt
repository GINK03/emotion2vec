{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nBoost.SIMD\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\nTakahashi\u69d8\u306e\u30b9\u30e9\u30a4\u30c9\u304c\u53c2\u8003\u306b\u306a\u308b\u3002\n\u307e\u3060\u6b63\u5f0f\u306b\u306fBoost\u5165\u308a\u3057\u3066\u3044\u306a\u3044\u3002\nSPARC\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u4e0b\u3055\u3044\u3002\u306a\u3093\u3067\u3082\u3057\u307e\u3059\u304b\u3089\u3002\n\u5b9f\u969b\u306e\u6240\u3001\u3053\u308c\u306f\u795e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b\u3002\n\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\u3068\u308a\u3042\u3048\u305a\u30d9\u30af\u30c8\u30eb\u306e\u5185\u7a4d\u3092Boost.SIMD\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\n#include <boost/simd/sdk/simd/pack.hpp>\n#include <boost/simd/include/functions/sum.hpp>\n#include <boost/simd/include/functions/load.hpp>\n#include <boost/simd/include/functions/plus.hpp>\n#include <boost/simd/include/functions/multiplies.hpp>\n\ntemplate<typename Iterator, typename Iterator2, typename Value = typename remove_const_reference<(*(std::declval<Iterator>()))>::type>\nValue dot(Iterator first1, Iterator last1, Iterator2 first2) //\u5185\u7a4d\n{\n    typedef boost::simd::pack<Value> pack_t; // SIMD\u30ec\u30b8\u30b9\u30bf\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\n    pack_t tmp(0); \n    while(first1 != last1)\n    {\n        pack_t x1 = boost::simd::load<pack_t>(&*first1); // memory -> SIMD register load\n        pack_t x2 = boost::simd::load<pack_t>(&*first2);\n\n        tmp = tmp + x1 * x2; //SIMD\u30ec\u30b8\u30b9\u30bf\u9593\u306e\u6f14\u7b97\n\n        first1 += pack_t::static_size; //SIMD\u30ec\u30b8\u30b9\u30bf\u9577\u5206\u3060\u3051\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u56de\u3059\n        first2 += pack_t::static_size;\n    }\n    return sum(tmp); // SIMD\u30ec\u30b8\u30b9\u30bf\u5185\u306e\u548c\n}\n\n\u610f\u5473\u306f\u5206\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3046\u3002\n\u65e2\u5b58\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30a2\u30c0\u30d7\u30c8\u3057\u3066\u3001SIMD\u30ec\u30b8\u30b9\u30bf\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\u4e8b\u3082\u3067\u304d\u308b\u3002\n#include <boost/simd/sdk/simd/pack.hpp>\n#include <boost/simd/include/functions/sum.hpp>\n#include <boost/simd/include/functions/load.hpp>\n#include <boost/simd/include/functions/plus.hpp>\n#include <boost/simd/include/functions/multiplies.hpp>\n#include <boost/simd/memory/iterator.hpp>\n\ntemplate<typename Iterator, typename Iterator2, typename Value = typename remove_const_reference<(*(std::declval<Iterator>()))>::type>\nValue dot(Iterator first1, Iterator last1, Iterator2 first2) //\u5185\u7a4d\n{\n    auto it1 = boost::simd::input_begin(first1); // \u30a4\u30c6\u30ec\u30fc\u30bf\u30a2\u30c0\u30d7\u30bf\n    auto e1  = boost::simd::input_end(last1);\n    auto it2 = boost::simd::input_begin(first2);\n\n    for(;it1!=e1;++it1,++it2)\n    {\n        tmp = tmp + (*it1) * (*it2); //SIMD\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3059\u308b\u3068\u81ea\u52d5\u7684\u306bSIMD\u30ec\u30b8\u30b9\u30bf\u4e0a\u306b\u30ed\u30fc\u30c9\u3059\u308b\u3002\n    }\n    return sum(tmp); // SIMD\u30ec\u30b8\u30b9\u30bf\u5185\u306e\u548c\n}\n\n\u3061\u306a\u307f\u306bobjdump\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u307f\u308b\u3068\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u8907\u96d1\u306a\u30b3\u30fc\u30c9\u30d1\u30b9\u3092\u6301\u3063\u3066\u3057\u307e\u3046\u3002\n\u3053\u308c\u306f\u3001\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306e\u30b3\u30fc\u30c9\u304c\u304f\u3063\u3064\u3044\u3066\u304d\u3066\u3057\u307e\u3046\u304b\u3089\u3060\u3002\n\u6700\u521d\u304b\u3089\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u63c3\u3048\u3066\u304a\u3051\u3070\u826f\u3044\u306e\u3060\u304c\u3001\u30b3\u30fc\u30c9\u306b\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u304c\u63c3\u3063\u3066\u3044\u308b\u4e8b\u3092\u6559\u3048\u308b\u306b\u306f\u6b21\u306e\u69d8\u306b\u3059\u308c\u3070\u826f\u3044\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u30c1\u30a7\u30c3\u30af\u306bBOOST_ASSERT\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30ea\u30ea\u30fc\u30b9\u6642\u306b\u306fNDEBUG\u3092define\u3057\u3066\u304a\u304f\u3002\n    auto it1 = boost::simd::aligned_input_begin(first1); // \u30a4\u30c6\u30ec\u30fc\u30bf\u30a2\u30c0\u30d7\u30bf\n    auto e1  = boost::simd::aligned_input_end(last1);\n    auto it2 = boost::simd::aligned_input_begin(first2);\n\nSTL\u30b3\u30f3\u30c6\u30ca\u3092\u4f7f\u3063\u3066\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u63c3\u3048\u308b\u305f\u3081\u306b\u3001Boost.SIMD\u306f\u30ab\u30b9\u30bf\u30e0\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002\n\n#include <boost/simd/memory/allocator.hpp>\nstd::vector<double, boost::simd::allocator<double>> v1; //\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u304c\u63c3\u3048\u3089\u308c\u305f\u30b3\u30f3\u30c6\u30ca\n\n\u3061\u306a\u307f\u306b\u3001\u81ea\u4f5c\u30a2\u30ed\u30b1\u30fc\u30bf\u306e\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u63c3\u3048\u308b\u305f\u3081\u306e\u3001\u30a2\u30ed\u30b1\u30fc\u30bf\u30a2\u30c0\u30d7\u30bf\u3082\u3042\u308b\u3002\u8a73\u3057\u304f\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3002\n\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\nstd::vector<double, boost::simd::allocator<double>>\u306b\u5bfe\u3057\u3066\u4e0a\u8a18\u306edot\u3092\u8d70\u3089\u305b\u3066\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u53d6\u3063\u305f\u3002\n\u6bd4\u8f03\u3068\u3057\u3066Intel MKL 14.0.3\u306eddot\u95a2\u6570\u3092\u7528\u3044\u3066\u540c\u3058\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30bf\u306e\u5185\u7a4d\u3092\u8a08\u7b97\u3055\u305b\u3066\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u53d6\u3063\u305f\u3002\nOS: CentOS6.4\nCPU: Intel Xeon E5-2667 v2 \nBoost.SIMD\u3092\u7528\u3044\u305f\u30b3\u30fc\u30c9\u306fclang 3.6.0\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\nIntel MKL\u3092\u7528\u3044\u305f\u30b3\u30fc\u30c9\u306ficpc 14.0.3\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u306f -O3 -m64 -mavx -mfma -std=c++11\n\u305d\u308c\u305e\u308c\u306e\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30bf\u306b\u5bfe\u3057\u3066\u5185\u7a4d\u309216\u56de\u8a08\u7b97\u3057\u3001\u305d\u306e\u5e73\u5747\u51e6\u7406\u6642\u9593\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u306e\u304c\u4e0b\u56f3\u3067\u3042\u308b\u3002\n\n\u3053\u306e\u7d50\u679c\u3092\u898b\u308b\u9650\u308a\u3001MKL\u306eddot\u306f1M\u6b21\u5143\u4ee5\u4e0b\u3067\u3082\u975e\u5e38\u306b\u5927\u304d\u306a\u30b5\u30a4\u30ba\u306e\u30d6\u30ed\u30c3\u30af\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u8ee2\u9001\u3057\u3066\u304b\u3089\u8a08\u7b97\u3057\u3066\u3044\u308b\u69d8\u3060\u3002\n\u5927\u304d\u3044\u30b5\u30a4\u30ba\u3067\u306fMKL\u306e\u65b9\u304c\u901f\u3044\u3002\n\u8a08\u7b97\u305d\u306e\u3082\u306e\u306b\u5927\u3057\u3066\u9055\u3044\u304c\u3042\u308b\u3068\u306f\u601d\u3048\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u9055\u3044\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u8ee2\u9001\u5468\u308a\u306e\u30b3\u30fc\u30c9\u304b\u3089\u304f\u308b\u3068\u601d\u308f\u308c\u308b\u3002\n\u3061\u306a\u307f\u306bMKL\u306eBLAS1,2\u306f\u4e26\u5217\u5316\u3055\u308c\u306a\u3044\u3002\n#\u6982\u8981\n[Boost.SIMD](http://isocpp.org/blog/2014/02/nt2-boos)\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\nTakahashi\u69d8\u306e[\u30b9\u30e9\u30a4\u30c9](http://www.slideshare.net/faithandbrave/boostsimd)\u304c\u53c2\u8003\u306b\u306a\u308b\u3002\n\n\u307e\u3060\u6b63\u5f0f\u306b\u306fBoost\u5165\u308a\u3057\u3066\u3044\u306a\u3044\u3002\nSPARC\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u4e0b\u3055\u3044\u3002\u306a\u3093\u3067\u3082\u3057\u307e\u3059\u304b\u3089\u3002\n\n\u5b9f\u969b\u306e\u6240\u3001\u3053\u308c\u306f\u795e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b\u3002\n\n#\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\u3068\u308a\u3042\u3048\u305a\u30d9\u30af\u30c8\u30eb\u306e\u5185\u7a4d\u3092Boost.SIMD\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\n\n```cpp\n#include <boost/simd/sdk/simd/pack.hpp>\n#include <boost/simd/include/functions/sum.hpp>\n#include <boost/simd/include/functions/load.hpp>\n#include <boost/simd/include/functions/plus.hpp>\n#include <boost/simd/include/functions/multiplies.hpp>\n\ntemplate<typename Iterator, typename Iterator2, typename Value = typename remove_const_reference<(*(std::declval<Iterator>()))>::type>\nValue dot(Iterator first1, Iterator last1, Iterator2 first2) //\u5185\u7a4d\n{\n    typedef boost::simd::pack<Value> pack_t; // SIMD\u30ec\u30b8\u30b9\u30bf\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\n    pack_t tmp(0); \n    while(first1 != last1)\n    {\n        pack_t x1 = boost::simd::load<pack_t>(&*first1); // memory -> SIMD register load\n        pack_t x2 = boost::simd::load<pack_t>(&*first2);\n\n        tmp = tmp + x1 * x2; //SIMD\u30ec\u30b8\u30b9\u30bf\u9593\u306e\u6f14\u7b97\n\n        first1 += pack_t::static_size; //SIMD\u30ec\u30b8\u30b9\u30bf\u9577\u5206\u3060\u3051\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u56de\u3059\n        first2 += pack_t::static_size;\n    }\n    return sum(tmp); // SIMD\u30ec\u30b8\u30b9\u30bf\u5185\u306e\u548c\n}\n```\n\n\u610f\u5473\u306f\u5206\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3046\u3002\n\n\u65e2\u5b58\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30a2\u30c0\u30d7\u30c8\u3057\u3066\u3001SIMD\u30ec\u30b8\u30b9\u30bf\u3092\u8fd4\u3057\u3066\u304f\u308c\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\u4e8b\u3082\u3067\u304d\u308b\u3002\n\n```cpp\n#include <boost/simd/sdk/simd/pack.hpp>\n#include <boost/simd/include/functions/sum.hpp>\n#include <boost/simd/include/functions/load.hpp>\n#include <boost/simd/include/functions/plus.hpp>\n#include <boost/simd/include/functions/multiplies.hpp>\n#include <boost/simd/memory/iterator.hpp>\n\ntemplate<typename Iterator, typename Iterator2, typename Value = typename remove_const_reference<(*(std::declval<Iterator>()))>::type>\nValue dot(Iterator first1, Iterator last1, Iterator2 first2) //\u5185\u7a4d\n{\n    auto it1 = boost::simd::input_begin(first1); // \u30a4\u30c6\u30ec\u30fc\u30bf\u30a2\u30c0\u30d7\u30bf\n    auto e1  = boost::simd::input_end(last1);\n    auto it2 = boost::simd::input_begin(first2);\n\n    for(;it1!=e1;++it1,++it2)\n    {\n        tmp = tmp + (*it1) * (*it2); //SIMD\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3059\u308b\u3068\u81ea\u52d5\u7684\u306bSIMD\u30ec\u30b8\u30b9\u30bf\u4e0a\u306b\u30ed\u30fc\u30c9\u3059\u308b\u3002\n    }\n    return sum(tmp); // SIMD\u30ec\u30b8\u30b9\u30bf\u5185\u306e\u548c\n}\n```\n\n\u3061\u306a\u307f\u306bobjdump\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u307f\u308b\u3068\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u8907\u96d1\u306a\u30b3\u30fc\u30c9\u30d1\u30b9\u3092\u6301\u3063\u3066\u3057\u307e\u3046\u3002\n\u3053\u308c\u306f\u3001\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306e\u30b3\u30fc\u30c9\u304c\u304f\u3063\u3064\u3044\u3066\u304d\u3066\u3057\u307e\u3046\u304b\u3089\u3060\u3002\n\n\u6700\u521d\u304b\u3089\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u63c3\u3048\u3066\u304a\u3051\u3070\u826f\u3044\u306e\u3060\u304c\u3001\u30b3\u30fc\u30c9\u306b\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u304c\u63c3\u3063\u3066\u3044\u308b\u4e8b\u3092\u6559\u3048\u308b\u306b\u306f\u6b21\u306e\u69d8\u306b\u3059\u308c\u3070\u826f\u3044\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u30c1\u30a7\u30c3\u30af\u306bBOOST_ASSERT\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30ea\u30ea\u30fc\u30b9\u6642\u306b\u306fNDEBUG\u3092define\u3057\u3066\u304a\u304f\u3002\n\n```cpp\n    auto it1 = boost::simd::aligned_input_begin(first1); // \u30a4\u30c6\u30ec\u30fc\u30bf\u30a2\u30c0\u30d7\u30bf\n    auto e1  = boost::simd::aligned_input_end(last1);\n    auto it2 = boost::simd::aligned_input_begin(first2);\n```\n\nSTL\u30b3\u30f3\u30c6\u30ca\u3092\u4f7f\u3063\u3066\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u63c3\u3048\u308b\u305f\u3081\u306b\u3001Boost.SIMD\u306f\u30ab\u30b9\u30bf\u30e0\u30a2\u30ed\u30b1\u30fc\u30bf\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002\n\n```cpp\n\n#include <boost/simd/memory/allocator.hpp>\nstd::vector<double, boost::simd::allocator<double>> v1; //\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u304c\u63c3\u3048\u3089\u308c\u305f\u30b3\u30f3\u30c6\u30ca\n```\n\n\u3061\u306a\u307f\u306b\u3001\u81ea\u4f5c\u30a2\u30ed\u30b1\u30fc\u30bf\u306e\u30a2\u30e9\u30a4\u30e1\u30f3\u30c8\u3092\u63c3\u3048\u308b\u305f\u3081\u306e\u3001\u30a2\u30ed\u30b1\u30fc\u30bf\u30a2\u30c0\u30d7\u30bf\u3082\u3042\u308b\u3002\u8a73\u3057\u304f\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3002\n\n#\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\n`std::vector<double, boost::simd::allocator<double>>`\u306b\u5bfe\u3057\u3066\u4e0a\u8a18\u306e`dot`\u3092\u8d70\u3089\u305b\u3066\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u53d6\u3063\u305f\u3002\n\u6bd4\u8f03\u3068\u3057\u3066Intel MKL 14.0.3\u306e`ddot`\u95a2\u6570\u3092\u7528\u3044\u3066\u540c\u3058\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30bf\u306e\u5185\u7a4d\u3092\u8a08\u7b97\u3055\u305b\u3066\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u53d6\u3063\u305f\u3002\n\nOS: CentOS6.4\nCPU: Intel Xeon E5-2667 v2 \n\nBoost.SIMD\u3092\u7528\u3044\u305f\u30b3\u30fc\u30c9\u306fclang 3.6.0\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\nIntel MKL\u3092\u7528\u3044\u305f\u30b3\u30fc\u30c9\u306ficpc 14.0.3\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u306f -O3 -m64 -mavx -mfma -std=c++11\n\n\u305d\u308c\u305e\u308c\u306e\u30b5\u30a4\u30ba\u306e\u30d9\u30af\u30bf\u306b\u5bfe\u3057\u3066\u5185\u7a4d\u309216\u56de\u8a08\u7b97\u3057\u3001\u305d\u306e\u5e73\u5747\u51e6\u7406\u6642\u9593\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u306e\u304c\u4e0b\u56f3\u3067\u3042\u308b\u3002\n\n![bench.png](https://qiita-image-store.s3.amazonaws.com/0/46436/b55e5106-5af3-56aa-43b9-8dec23c6b0ff.png)\n\n\u3053\u306e\u7d50\u679c\u3092\u898b\u308b\u9650\u308a\u3001MKL\u306eddot\u306f1M\u6b21\u5143\u4ee5\u4e0b\u3067\u3082\u975e\u5e38\u306b\u5927\u304d\u306a\u30b5\u30a4\u30ba\u306e\u30d6\u30ed\u30c3\u30af\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u8ee2\u9001\u3057\u3066\u304b\u3089\u8a08\u7b97\u3057\u3066\u3044\u308b\u69d8\u3060\u3002\n\u5927\u304d\u3044\u30b5\u30a4\u30ba\u3067\u306fMKL\u306e\u65b9\u304c\u901f\u3044\u3002\n\u8a08\u7b97\u305d\u306e\u3082\u306e\u306b\u5927\u3057\u3066\u9055\u3044\u304c\u3042\u308b\u3068\u306f\u601d\u3048\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u9055\u3044\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u8ee2\u9001\u5468\u308a\u306e\u30b3\u30fc\u30c9\u304b\u3089\u304f\u308b\u3068\u601d\u308f\u308c\u308b\u3002\n\u3061\u306a\u307f\u306bMKL\u306eBLAS1,2\u306f\u4e26\u5217\u5316\u3055\u308c\u306a\u3044\u3002\n", "tags": ["boost"]}