{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Django Advent Calendar 2016 7\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u3084\u308b\u3053\u3068\n\ncookiecutter-django\u306e\u7d39\u4ecb\n\u4fbf\u5229\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5b66\u3076\n\u4fbf\u5229\u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u3092\u5b66\u3076\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u3092\u5b66\u3076\n\n\ncookiecutter\u3068\u306f\nhttps://github.com/audreyr/cookiecutter\n\nA command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.\n\nPython\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u96db\u5f62\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306eCLI\u30c4\u30fc\u30eb\n$ pip install cookiecutter\n$ cookiecutter [repository]\n\n\ncookiecutter-django\u3068\u306f\n\n\nTwo Scoops of Django: Best Practices for Django 1.8\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\n\n\n\u3053\u306e\u672c\u306b\u3064\u3044\u3066\u306f5\u65e5\u76ee\u306e@aki_yok\u3055\u3093\u304c\u30d9\u30b9\u30c8\u30fb\u30aa\u30d6\u30fbDjango\u672c\uff01 - akiyoko blog\u3067\u53d6\u308a\u4e0a\u3052\u3066\u3044\u307e\u3059\n\n\n\nDjango Packages : Cookiecutters\u3084GitHub\u3067\u306e\u691c\u7d22\u306b\u304a\u3044\u3066\u3082\u4e00\u756a\u4eba\u6c17\n\n$ cookiecutter https://github.com/pydanny/cookiecutter-django\n\n\n\u8a2d\u5b9a\u30aa\u30d7\u30b7\u30e7\u30f3\nProject Generation Options \u2014 Cookiecutter Django 2016.49.3 documentation\nCloning into 'cookiecutter-django'...\nremote: Counting objects: 550, done.\nremote: Compressing objects: 100% (310/310), done.\nremote: Total 550 (delta 283), reused 479 (delta 222)\nReceiving objects: 100% (550/550), 127.66 KiB | 58 KiB/s, done.\nResolving deltas: 100% (283/283), done.\nproject_name [Project Name]: Reddit Clone\nproject_slug [reddit_clone]: reddit\nauthor_name [Daniel Roy Greenfeld]: Daniel Greenfeld\nemail [you@example.com]: pydanny@gmail.com\ndescription [A short description of the project.]: A reddit clone.\ndomain_name [example.com]: myreddit.com\nversion [0.1.0]: 0.0.1\ntimezone [UTC]: America/Los_Angeles\nuse_whitenoise [y]: n\nuse_celery [n]: y\nuse_mailhog [n]: n\nuse_sentry_for_error_reporting [y]: y\nuse_opbeat [n]: y\nuse_pycharm [n]: y\nwindows [n]: n\nuse_python3 [y]: y\nuse_docker [y]: n\nuse_heroku [n]: y\nuse_compressor [n]: y\nSelect postgresql_version:\n1 - 9.5\n2 - 9.4\n3 - 9.3\n4 - 9.2\nChoose from 1, 2, 3, 4 [1]: 1\nSelect js_task_runner:\n1 - Gulp\n2 - Grunt\n3 - Webpack\n4 - None\nChoose from 1, 2, 3, 4 [1]: 1\nuse_lets_encrypt [n]: n\nSelect open_source_license:\n1 - MIT\n2 - BSD\n3 - GPLv3\n4 - Apache Software License 2.0\n5 - Not open source\nChoose from 1, 2, 3, 4, 5 [1]: 1\nuse_elasticbeanstalk_experimental: n\n\n\nFeatures\n\n\nFor Django 1.10\nRenders Django projects with 100% starting test coverage\nTwitter Bootstrap v4.0.0 - alpha 4 (maintained Foundation fork also available)\n12-Factor based settings via django-environ\nOptimized development and production settings\nRegistration via django-allauth\nComes with custom user model ready to go\nGrunt build for compass and livereload\nSend emails via Anymail (using Mailgun by default, but switchable)\nMedia storage using Amazon S3\nDocker support using docker-compose for development and production\nProcfile for deploying to Heroku\nInstructions for deploying to PythonAnywhere\nWorks with Python 2.7.x or 3.5.x\nRun tests with unittest or py.test\nCustomizable PostgreSQL version\nExperimental support for Amazon Elastic Beanstalk\n\n\n\nOptional Integrations\n\n\nServe static files from Amazon S3 or Whitenoise\nConfiguration for Celery\nIntegration with MailHog for local email testing\nIntegration with Sentry for error logging\nIntegration with Opbeat for performance monitoring\n\n\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u7d39\u4ecb\n\n\nBootstrap\n\n\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\n\n\ndjango-environ\n\n\u74b0\u5883\u5909\u6570\u7ba1\u7406\n\n\n\ndjango-allauth\n\n\u30a2\u30ab\u30a6\u30f3\u30c8\u8a8d\u8a3c\n\n\n\ndjango-anymail\n\n\u5404ESP\u5bfe\u5fdcEmail\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\n\n\n\n\n\u9023\u643a\u53ef\u80fd\u30b5\u30fc\u30d3\u30b9\n\n\nWhiteNoise\n\n\u9759\u7684\u30d5\u30a1\u30a4\u30eb\u914d\u4fe1\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fAmazon S3\n\n\n\nCelery\n\n\u30bf\u30b9\u30af\u30ad\u30e5\u30fc\n\n\n\nMailHog\n\n\u30e1\u30fc\u30eb\u30c6\u30b9\u30c8\n\n\n\nSentry\n\n\u30a8\u30e9\u30fc\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\n\n\n\nOpbeat\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u76e3\u8996\n\n\n\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n~\n\u251c\u2500\u2500 compose\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 django\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile-dev\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 entrypoint.sh\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gunicorn.sh\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 start-dev.sh\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nginx\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 nginx.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 postgres\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 backup.sh\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 list-backups.sh\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 restore.sh\n~\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 settings\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 common.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 local.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 production.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 urls.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wsgi.py\n~\n\u251c\u2500\u2500 requirements\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 base.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 local.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test.txt\n\n\n\ndocker-compose\u306e\u305f\u3081\u306bcompose\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210\n\nsettings\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5404\u74b0\u5883\u3054\u3068\u306e\u30d5\u30a1\u30a4\u30eb\u683c\u7d0d\n\nrequirements\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5404\u74b0\u5883\u3054\u3068\u306e\u30d5\u30a1\u30a4\u30eb\u683c\u7d0d\n\n\u3053\u306e\u8fba\u308a\u304c\u53c2\u8003\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u4ed6\u306e\u69cb\u6210\u306f\u5b9f\u969b\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u304a\u308f\u308a\u306b\n\u7c21\u5358\u306bcookiecutter-django\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u304d\u307e\u3057\u305f\u3002Django\u3067\u958b\u767a\u3059\u308b\u3046\u3048\u3067\u306e\u77e5\u898b\u304c\u5f97\u3089\u308c\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u305c\u3072\u89e6\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n\u3061\u306a\u307f\u306bDjango\u958b\u767a\u306b\u304a\u3044\u3066\u306f\u3001Awesome Django\u3082\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u308b\u3068\u65b0\u305f\u306a\u767a\u898b\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u306f\u3058\u3081\u306b\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001[Django Advent Calendar 2016](http://qiita.com/advent-calendar/2016/django) 7\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n## \u3053\u3053\u3067\u3084\u308b\u3053\u3068\n\n+ cookiecutter-django\u306e\u7d39\u4ecb\n+ \u4fbf\u5229\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5b66\u3076\n+ \u4fbf\u5229\u5916\u90e8\u30b5\u30fc\u30d3\u30b9\u3092\u5b66\u3076\n+ \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u3092\u5b66\u3076\n\n## cookiecutter\u3068\u306f\n\nhttps://github.com/audreyr/cookiecutter\n\n> A command-line utility that creates projects from cookiecutters (project templates). E.g. Python package projects, jQuery plugin projects.\n\nPython\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u96db\u5f62\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306eCLI\u30c4\u30fc\u30eb\n\n```\n$ pip install cookiecutter\n$ cookiecutter [repository]\n```\n\n## cookiecutter-django\u3068\u306f\n\n+ [Two Scoops of Django: Best Practices for Django 1.8](https://www.twoscoopspress.com/products/two-scoops-of-django-1-8)\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\n\t+ \u3053\u306e\u672c\u306b\u3064\u3044\u3066\u306f5\u65e5\u76ee\u306e[@aki_yok](http://qiita.com/aki_yok)\u3055\u3093\u304c[\u30d9\u30b9\u30c8\u30fb\u30aa\u30d6\u30fbDjango\u672c\uff01 - akiyoko blog](http://akiyoko.hatenablog.jp/entry/2016/12/05/023834)\u3067\u53d6\u308a\u4e0a\u3052\u3066\u3044\u307e\u3059\n+ [Django Packages : Cookiecutters](https://djangopackages.org/grids/g/cookiecutters/)\u3084[GitHub\u3067\u306e\u691c\u7d22](https://github.com/search?utf8=%E2%9C%93&q=django+cookiecutter)\u306b\u304a\u3044\u3066\u3082\u4e00\u756a\u4eba\u6c17\n\n```\n$ cookiecutter https://github.com/pydanny/cookiecutter-django\n```\n\n## \u8a2d\u5b9a\u30aa\u30d7\u30b7\u30e7\u30f3\n\n[Project Generation Options &mdash; Cookiecutter Django 2016.49.3 documentation](http://cookiecutter-django.readthedocs.io/en/latest/project-generation-options.html)\n\n```\nCloning into 'cookiecutter-django'...\nremote: Counting objects: 550, done.\nremote: Compressing objects: 100% (310/310), done.\nremote: Total 550 (delta 283), reused 479 (delta 222)\nReceiving objects: 100% (550/550), 127.66 KiB | 58 KiB/s, done.\nResolving deltas: 100% (283/283), done.\nproject_name [Project Name]: Reddit Clone\nproject_slug [reddit_clone]: reddit\nauthor_name [Daniel Roy Greenfeld]: Daniel Greenfeld\nemail [you@example.com]: pydanny@gmail.com\ndescription [A short description of the project.]: A reddit clone.\ndomain_name [example.com]: myreddit.com\nversion [0.1.0]: 0.0.1\ntimezone [UTC]: America/Los_Angeles\nuse_whitenoise [y]: n\nuse_celery [n]: y\nuse_mailhog [n]: n\nuse_sentry_for_error_reporting [y]: y\nuse_opbeat [n]: y\nuse_pycharm [n]: y\nwindows [n]: n\nuse_python3 [y]: y\nuse_docker [y]: n\nuse_heroku [n]: y\nuse_compressor [n]: y\nSelect postgresql_version:\n1 - 9.5\n2 - 9.4\n3 - 9.3\n4 - 9.2\nChoose from 1, 2, 3, 4 [1]: 1\nSelect js_task_runner:\n1 - Gulp\n2 - Grunt\n3 - Webpack\n4 - None\nChoose from 1, 2, 3, 4 [1]: 1\nuse_lets_encrypt [n]: n\nSelect open_source_license:\n1 - MIT\n2 - BSD\n3 - GPLv3\n4 - Apache Software License 2.0\n5 - Not open source\nChoose from 1, 2, 3, 4, 5 [1]: 1\nuse_elasticbeanstalk_experimental: n\n```\n\n### Features\n> \n+ For Django 1.10\n+ Renders Django projects with 100% starting test coverage\n+ Twitter Bootstrap v4.0.0 - alpha 4 (maintained Foundation fork also available)\n+ 12-Factor based settings via django-environ\n+ Optimized development and production settings\n+ Registration via django-allauth\n+ Comes with custom user model ready to go\n+ Grunt build for compass and livereload\n+ Send emails via Anymail (using Mailgun by default, but switchable)\n+ Media storage using Amazon S3\n+ Docker support using docker-compose for development and production\n+ Procfile for deploying to Heroku\n+ Instructions for deploying to PythonAnywhere\n+ Works with Python 2.7.x or 3.5.x\n+ Run tests with unittest or py.test\n+ Customizable PostgreSQL version\n+ Experimental support for Amazon Elastic Beanstalk\n\n### Optional Integrations\n> \n+ Serve static files from Amazon S3 or Whitenoise\n+ Configuration for Celery\n+ Integration with MailHog for local email testing\n+ Integration with Sentry for error logging\n+ Integration with Opbeat for performance monitoring\n\n## \u30d1\u30c3\u30b1\u30fc\u30b8\u7d39\u4ecb\n\n+ [Bootstrap](https://github.com/twbs/bootstrap)\n\t+ \u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n+ [django-environ](https://github.com/joke2k/django-environ)\n\t+ \u74b0\u5883\u5909\u6570\u7ba1\u7406\n+ [django-allauth](https://github.com/pennersr/django-allauth)\n\t+ \u30a2\u30ab\u30a6\u30f3\u30c8\u8a8d\u8a3c\n+ [django-anymail](https://github.com/anymail/django-anymail)\n\t+ \u5404ESP\u5bfe\u5fdcEmail\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\n\n## \u9023\u643a\u53ef\u80fd\u30b5\u30fc\u30d3\u30b9\n+ [WhiteNoise](https://whitenoise.readthedocs.io/en/stable/)\n\t+ \u9759\u7684\u30d5\u30a1\u30a4\u30eb\u914d\u4fe1\n\t+ \u30c7\u30d5\u30a9\u30eb\u30c8\u306fAmazon S3\n+ [Celery](http://www.celeryproject.org/)\n\t+ \u30bf\u30b9\u30af\u30ad\u30e5\u30fc\n+ [MailHog](https://github.com/mailhog/MailHog)\n\t+ \u30e1\u30fc\u30eb\u30c6\u30b9\u30c8\n+ [Sentry](https://sentry.io/welcome/)\n\t+ \u30a8\u30e9\u30fc\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\n+ [Opbeat](https://opbeat.com/)\n\t+ \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u76e3\u8996\n\n## \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n```\n~\n\u251c\u2500\u2500 compose\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 django\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile-dev\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 entrypoint.sh\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 gunicorn.sh\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 start-dev.sh\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 nginx\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 nginx.conf\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 postgres\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 Dockerfile\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 backup.sh\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 list-backups.sh\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 restore.sh\n~\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 settings\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 common.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 local.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 production.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 test.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 urls.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wsgi.py\n~\n\u251c\u2500\u2500 requirements\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 base.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 local.txt\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 production.txt\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test.txt\n```\n\n+ `docker-compose`\u306e\u305f\u3081\u306b`compose`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210\n+ `settings`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5404\u74b0\u5883\u3054\u3068\u306e\u30d5\u30a1\u30a4\u30eb\u683c\u7d0d\n+ `requirements`\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u5404\u74b0\u5883\u3054\u3068\u306e\u30d5\u30a1\u30a4\u30eb\u683c\u7d0d\n\n\u3053\u306e\u8fba\u308a\u304c\u53c2\u8003\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u4ed6\u306e\u69cb\u6210\u306f\u5b9f\u969b\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u304a\u308f\u308a\u306b\n\n\u7c21\u5358\u306bcookiecutter-django\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u304d\u307e\u3057\u305f\u3002Django\u3067\u958b\u767a\u3059\u308b\u3046\u3048\u3067\u306e\u77e5\u898b\u304c\u5f97\u3089\u308c\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u305c\u3072\u89e6\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n\n\u3061\u306a\u307f\u306bDjango\u958b\u767a\u306b\u304a\u3044\u3066\u306f\u3001[Awesome Django](http://awesome-django.com/)\u3082\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u308b\u3068\u65b0\u305f\u306a\u767a\u898b\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Python", "Django"]}