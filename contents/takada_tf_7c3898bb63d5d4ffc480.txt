{"tags": ["Python", "Kinesis", "AWS", "Streams"], "context": "\u3053\u306e\u8a18\u4e8b\u3067\u306f\u30ed\u30fc\u30ab\u30eb\u30db\u30b9\u30c8\u3084EC2\u304b\u3089\u6a19\u6e96\u5165\u529b\u3067Kinesis Streams\u306b\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3059\u308bpython\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n\u74b0\u5883\n\u30fbAmazon linux \n\u30fb\u8a00\u8a9e\uff1apython 2.7\u3001shell\n\u30fb\u5165\u529b\u30c7\u30fc\u30bf\u5f62\u5f0f\uff1aCSV\n\u4e0b\u8a18\u306bKinesis Streams\u306b\u683c\u7d0d\u3059\u308bpython script\u3092\u8a18\u8f09\u3059\u308b\u3002\n\u3053\u306escript\u3067\u306f500\u30ec\u30b3\u30fc\u30c9/\u79d2\u203b\u306b\u96c6\u7d04\u3057\u3066\u683c\u7d0d\u3057\u3066\u3044\u308b\u3002\u3002(\u96c6\u7d04\u306e\u610f\u5473\u306fKPL\u3092\u4f7f\u3063\u3066\uff11\u30ec\u30b3\u30fc\u30c9\u306baggrigation\u3057\u3066\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044\uff09\n\u203b500\u4ee5\u4e0a\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u300cfailed to satisfy constraint: Member must have length less than or equal to 500\u300d\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\n\nscript\n\nbuffer_insert.py\nimport sys\nimport json\nimport random\nimport boto3\nimport time\n\ndef create_json(buffered_data, streamname):\n    jdat = {}\n    dat = []\n    jdat[\"StreamName\"] = streamname      \n    for rec in buffered_data :\n        dat.append({\"Data\" : rec, \"PartitionKey\" : str(random.randint(1,1000))})\n    jdat[\"Records\"] = dat\n    return jdat\n\nif __name__ == '__main__':\n\n  args = sys.argv\n  streamname=args[1]\n\n  cnt = 0\n  buf = []\n\n  client = boto3.client('kinesis')\n  while 1:\n      if len(buf) == 500:\n          ret = client.put_records(**create_json(buf,streamname ))\n          time.sleep(1)\n          print ret\n          buf = []\n      line = sys.stdin.readline()\n      if not line:\n          break\n      buf.append(line[:-1])\n\n\n\u4e0a\u8a18script\u3067\u306faccess-key\u3084secret-key\u306ecredential\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001client()\u5185\u3067\u8a2d\u5b9a\u3057\u3066\u307b\u3057\u3044\u3002\u8a73\u7d30\u306f\u4e0b\u8a18boto3\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u9802\u304d\u305f\u3044\u3002 http://boto3.readthedocs.io/en/latest/guide/configuration.html\n\u5b9f\u884c\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\u30fbStreams\u306ekinesis_streams_test\u304c\u4f5c\u6210\u3057\u3066\u304a\u304f\u3053\u3068\n\u30fbtest.csv\u3068\u3044\u3046\u30c7\u30fc\u30bf\u3092\u5165\u529b\n>\u5b9f\u884c\ncat test.csv | python buffer_insert.py kinesis_streams_test\n\n>\u7d50\u679c\n{u'ShardId': u'shardId-000000000000', u'SequenceNumber': u'49571046543942031937439475265378143459129484557577879554'}, {u'ShardId': u'shardId-000000000001', u'SequenceNumber': u'49571046543964332682638005888401204447079899259962654738'}, {u'ShardId': u'shardId-000000000000', u'SequenceNumber': u'49571046543942031937439475265379352384949099186752585730'}, {u'ShardId': u'shardId-000000000000', u'SequenceNumber': u'49571046543942031937439475265380561310768713815927291906'}, {u'ShardId': u'shardId-000000000000', u'SequenceNumber': u'49571046543942031937439475265381770236588328445101998082'}, {u'ShardId': u'shardId-000000000000', u'SequenceNumber': u'49571046543942031937439475265382979162407943074276704258'}, {u'ShardId': u'shardId-000000000001', u'SequenceNumber': u'49571046543964332682638005888402413372899513889137360914'}, {u'ShardId': u'shardId-000000000001', u'SequenceNumber': u'49571046543964332682638005888403622298719128518312067090'}], 'ResponseMetadata': {'HTTPStatusCode': 200, 'RequestId': 'e8d1fc47-17eb-1f03-b9e4-17c6595f9a22'}}\n\nKinesis Streams\u306b\u683c\u7d0d\u3067\u304d\u305f\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4e0b\u8a18\u306b\u8a18\u8f09\u3002(\u6a2a\u7740\u3057\u3066\u3001python\u3067\u306f\u306a\u304fAWS CLI\u304b\u3089\u3067\u3059\u304c\u3002\u3002\u3002python\u304b\u3089\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3082\u3061\u308d\u3093\u3067\u304d\u307e\u3059\u3002\uff09\n\nget_record.sh\n#!/bin/bash\n\nstream_name=$1\nshard_array_index=${2:-0}\nshard_iterator_type=${3:-TRIM_HORIZON}\n\n\nshard_id=$(aws kinesis describe-stream --stream-name ${stream_name} --query \"StreamDescription.Shards[${shard_array_index}].ShardId\" --output text)\necho $shard_id\nshard_iterator=$(aws kinesis get-shard-iterator --stream-name ${stream_name} --shard-id ${shard_id} --shard-iterator-type ${shard_iterator_type} --query \"ShardIterator\" --output text)\necho $shard_iterator\naws kinesis get-records --shard-iterator ${shard_iterator}\n\n\nput_record\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306fBase64 \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001consumer\u5074\u3067\u30c7\u30b3\u30fc\u30c9\u51e6\u7406\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002AWS CLI\u3067\u306fbase64\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u884c\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001Base64 \u30c7\u30b3\u30fc\u30c0\uff08https://www.base64decode.org/ \u306a\u3069\uff09\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u6b21\u56de\u306fKPL\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u96c6\u7d04\u3057\u3001Kinesis Streams\u306b\u683c\u7d0d\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u30ed\u30fc\u30ab\u30eb\u30db\u30b9\u30c8\u3084EC2\u304b\u3089\u6a19\u6e96\u5165\u529b\u3067Kinesis Streams\u306b\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3059\u308bpython\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n#\u74b0\u5883\n\u30fbAmazon linux \n\u30fb\u8a00\u8a9e\uff1apython 2.7\u3001shell\n\u30fb\u5165\u529b\u30c7\u30fc\u30bf\u5f62\u5f0f\uff1aCSV\n\n\n\n\u4e0b\u8a18\u306bKinesis Streams\u306b\u683c\u7d0d\u3059\u308bpython script\u3092\u8a18\u8f09\u3059\u308b\u3002\n\u3053\u306escript\u3067\u306f500\u30ec\u30b3\u30fc\u30c9/\u79d2\u203b\u306b\u96c6\u7d04\u3057\u3066\u683c\u7d0d\u3057\u3066\u3044\u308b\u3002\u3002(\u96c6\u7d04\u306e\u610f\u5473\u306fKPL\u3092\u4f7f\u3063\u3066\uff11\u30ec\u30b3\u30fc\u30c9\u306baggrigation\u3057\u3066\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044\uff09\n\u203b500\u4ee5\u4e0a\u306b\u8a2d\u5b9a\u3059\u308b\u3068\u300cfailed to satisfy constraint: Member must have length less than or equal to 500\u300d\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\n\n#script\n```buffer_insert.py\nimport sys\nimport json\nimport random\nimport boto3\nimport time\n\ndef create_json(buffered_data, streamname):\n    jdat = {}\n    dat = []\n    jdat[\"StreamName\"] = streamname      \n    for rec in buffered_data :\n        dat.append({\"Data\" : rec, \"PartitionKey\" : str(random.randint(1,1000))})\n    jdat[\"Records\"] = dat\n    return jdat\n\nif __name__ == '__main__':\n\n  args = sys.argv\n  streamname=args[1]\n\n  cnt = 0\n  buf = []\n\n  client = boto3.client('kinesis')\n  while 1:\n      if len(buf) == 500:\n          ret = client.put_records(**create_json(buf,streamname ))\n          time.sleep(1)\n          print ret\n          buf = []\n      line = sys.stdin.readline()\n      if not line:\n          break\n      buf.append(line[:-1])\n```\n\n\u4e0a\u8a18script\u3067\u306faccess-key\u3084secret-key\u306ecredential\u60c5\u5831\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001client()\u5185\u3067\u8a2d\u5b9a\u3057\u3066\u307b\u3057\u3044\u3002\u8a73\u7d30\u306f\u4e0b\u8a18boto3\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u9802\u304d\u305f\u3044\u3002 http://boto3.readthedocs.io/en/latest/guide/configuration.html\n\n\u5b9f\u884c\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\u30fbStreams\u306ekinesis_streams_test\u304c\u4f5c\u6210\u3057\u3066\u304a\u304f\u3053\u3068\n\u30fbtest.csv\u3068\u3044\u3046\u30c7\u30fc\u30bf\u3092\u5165\u529b\n\n```\n>\u5b9f\u884c\ncat test.csv | python buffer_insert.py kinesis_streams_test\n\n>\u7d50\u679c\n{u'ShardId': u'shardId-000000000000', u'SequenceNumber': u'49571046543942031937439475265378143459129484557577879554'}, {u'ShardId': u'shardId-000000000001', u'SequenceNumber': u'49571046543964332682638005888401204447079899259962654738'}, {u'ShardId': u'shardId-000000000000', u'SequenceNumber': u'49571046543942031937439475265379352384949099186752585730'}, {u'ShardId': u'shardId-000000000000', u'SequenceNumber': u'49571046543942031937439475265380561310768713815927291906'}, {u'ShardId': u'shardId-000000000000', u'SequenceNumber': u'49571046543942031937439475265381770236588328445101998082'}, {u'ShardId': u'shardId-000000000000', u'SequenceNumber': u'49571046543942031937439475265382979162407943074276704258'}, {u'ShardId': u'shardId-000000000001', u'SequenceNumber': u'49571046543964332682638005888402413372899513889137360914'}, {u'ShardId': u'shardId-000000000001', u'SequenceNumber': u'49571046543964332682638005888403622298719128518312067090'}], 'ResponseMetadata': {'HTTPStatusCode': 200, 'RequestId': 'e8d1fc47-17eb-1f03-b9e4-17c6595f9a22'}}\n```\n\nKinesis Streams\u306b\u683c\u7d0d\u3067\u304d\u305f\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4e0b\u8a18\u306b\u8a18\u8f09\u3002(\u6a2a\u7740\u3057\u3066\u3001python\u3067\u306f\u306a\u304fAWS CLI\u304b\u3089\u3067\u3059\u304c\u3002\u3002\u3002python\u304b\u3089\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3082\u3061\u308d\u3093\u3067\u304d\u307e\u3059\u3002\uff09\n\n\n```get_record.sh\n#!/bin/bash\n\nstream_name=$1\nshard_array_index=${2:-0}\nshard_iterator_type=${3:-TRIM_HORIZON}\n\n\nshard_id=$(aws kinesis describe-stream --stream-name ${stream_name} --query \"StreamDescription.Shards[${shard_array_index}].ShardId\" --output text)\necho $shard_id\nshard_iterator=$(aws kinesis get-shard-iterator --stream-name ${stream_name} --shard-id ${shard_id} --shard-iterator-type ${shard_iterator_type} --query \"ShardIterator\" --output text)\necho $shard_iterator\naws kinesis get-records --shard-iterator ${shard_iterator}\n```\nput_record\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306fBase64 \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001consumer\u5074\u3067\u30c7\u30b3\u30fc\u30c9\u51e6\u7406\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002AWS CLI\u3067\u306fbase64\u306e\u30b5\u30dd\u30fc\u30c8\u3092\u884c\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001Base64 \u30c7\u30b3\u30fc\u30c0\uff08https://www.base64decode.org/ \u306a\u3069\uff09\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\n\n\u6b21\u56de\u306fKPL\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u96c6\u7d04\u3057\u3001Kinesis Streams\u306b\u683c\u7d0d\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n"}