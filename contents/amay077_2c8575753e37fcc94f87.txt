{"context": " More than 1 year has passed since last update.\n\nC# \u3068 Reactive Extensions \u3067\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\n\n\u8abf\u5b50\u306b\u4e57\u3063\u3066 RxJava \u3067\u3082\u3084\u3063\u3066\u307f\u305f\u3002\n\u304c\u3093\u3070\u3063\u3066 Observable.window \u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\n\nzondoko.java\n\n// \u306a\u3093\u3061\u3083\u3063\u3066\u30e9\u30e0\u30c0\u4f7f\u7528\u3002\u3042\u3068 Android\u3002\npublic void doZondoko() {\n    final Random random = new Random();\n    final List<String> PATTERN = Arrays.asList(\"\u305a\u3093\", \"\u305a\u3093\", \"\u305a\u3093\", \"\u305a\u3093\", \"\u3069\u3053\");\n    final String K = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\";\n\n    Observable.concat( // \u203b \u306e Observable<List<String>> \u3092\u76f4\u5217\u306b\u9023\u7d50\n        Observable.interval(500, TimeUnit.MILLISECONDS)\n            .map(_ -> random.nextInt(2) == 0 ? \"\u305a\u3093\" : \"\u3069\u3053\") // \u30e9\u30f3\u30c0\u30e0\u306b \u305a\u3093 or \u3069\u3053\n            .window(PATTERN.size(), 1) // \u8981\u7d20\u65705\u306eWindow\u30921\u305a\u3064\u30ba\u30e9\u3057\u3066\u304f\n            .map(window -> window.toList())) // Observable<Observable<String>> \u3092 Observable<List<String>> \u306b\u5909\u63db \u203b\n        .flatMap(window -> {\n            if (sequenceEqual(window, PATTERN)) { // \u30d1\u30bf\u30fc\u30f3\u3068\u4e00\u81f4\u3057\u3066\u3044\u305f\u3089\u2026\n                final List<String> says = new ArrayList<>();\n                says.addAll(window);\n                says.add(K);                      // \u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u3092\u8ffd\u52a0\n                return Observable.concat(\n                        Observable.just(says),\n                        Observable.just(Collections.<String>emptyList())); // \u7d42\u4e86\u5224\u5b9a\u7528\u306e\u7a7a\u30ea\u30b9\u30c8\n            } else {\n                return Observable.just(window);\n            }\n        })\n        .takeWhile(says -> !says.isEmpty())  // \u7a7a\u30ea\u30b9\u30c8\u306b\u306a\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n        .subscribe(says -> Log.d(TAG, dump(says)));\n}\n\n/** \u30ea\u30b9\u30c8\u3068\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u4e00\u81f4 */\nprivate boolean sequenceEqual(List<String> listA, List<String> listB) {\n    Iterator<String> iterA = listA.iterator();\n    Iterator<String> iterB = listB.iterator();\n\n    while (iterA.hasNext() && iterB.hasNext()) {\n        if (iterA.next() != iterB.next()) {\n            return false;\n        }\n    }\n    return (!iterA.hasNext() && !iterB.hasNext());\n}\n\n/** \u30ea\u30b9\u30c8\u5185\u5bb9\u3092\u30c0\u30f3\u30d7 */\nprivate String dump(List<String> list) {\n    final StringBuilder b = new StringBuilder();\n    for (String s : list) {\n        if (!TextUtils.isEmpty(b.toString())) {\n            b.append(\", \");\n        }\n        b.append(s);\n    }\n\n    return b.toString();\n}\n\n\n\n\u3069\u3053, \u305a\u3093, \u3069\u3053, \u3069\u3053, \u305a\u3093\n\u305a\u3093, \u3069\u3053, \u3069\u3053, \u305a\u3093, \u3069\u3053\n\u3069\u3053, \u3069\u3053, \u305a\u3093, \u3069\u3053, \u305a\u3093\n\u3069\u3053, \u305a\u3093, \u3069\u3053, \u305a\u3093, \u3069\u3053\n\u305a\u3093, \u3069\u3053, \u305a\u3093, \u3069\u3053, \u3069\u3053\n\u3069\u3053, \u305a\u3093, \u3069\u3053, \u3069\u3053, \u305a\u3093\n\u305a\u3093, \u3069\u3053, \u3069\u3053, \u305a\u3093, \u305a\u3093\n\u3069\u3053, \u3069\u3053, \u305a\u3093, \u305a\u3093, \u305a\u3093\n\u3069\u3053, \u305a\u3093, \u305a\u3093, \u305a\u3093, \u305a\u3093\n\u305a\u3093, \u305a\u3093, \u305a\u3093, \u305a\u3093, \u3069\u3053, \u30ad\u30fb\u30e8\u30fb\u30b7\uff01\n\n\u300cwindow(5, 1) -> toList -> concat \u3057\u3066\u308b\u306a\u3089\u305d\u308c\u306f buffer(5, 1) \u3084\u3093\u3051\u300d\u3068\u3044\u3046\u306e\u3092 \u3053\u3061\u3089 \u3067\u77e5\u3063\u3066\u3001 buffer \u7248\u3082\u66f8\u3044\u3066\u307f\u305f\u3002\n\nZondoko_buffer.java\npublic void doZondoko() {\n    final Random random = new Random();\n    final List<String> PATTERN = Arrays.asList(\"\u305a\u3093\", \"\u305a\u3093\", \"\u305a\u3093\", \"\u305a\u3093\", \"\u3069\u3053\");\n    final String K = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\";\n\n    Observable.interval(500, TimeUnit.MILLISECONDS)\n        .map(_ -> random.nextInt(2) == 0 ? \"\u305a\u3093\" : \"\u3069\u3053\") // \u30e9\u30f3\u30c0\u30e0\u306b \u305a\u3093 or \u3069\u3053\n        .buffer(PATTERN.size(), 1) // \u8981\u7d20\u65705\u306eBuffer\u30921\u305a\u3064\u30ba\u30e9\u3057\u3066\u304f\n        .flatMap(buf -> {\n            if (sequenceEqual(buf, PATTERN)) { // \u30d1\u30bf\u30fc\u30f3\u3068\u4e00\u81f4\u3057\u3066\u3044\u305f\u3089\u2026\n                final List<String> says = new ArrayList<>();\n                says.addAll(buf);\n                says.add(K);                      // \u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u3092\u8ffd\u52a0\n                return Observable.concat(\n                        Observable.just(says),\n                        Observable.just(Collections.<String>emptyList())); // \u7d42\u4e86\u5224\u5b9a\u7528\u306e\u7a7a\u30ea\u30b9\u30c8\n            } else {\n                return Observable.just(buf);\n            }\n        })\n        .takeWhile(says -> !says.isEmpty())  // \u7a7a\u30ea\u30b9\u30c8\u306b\u306a\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n        .subscribe(says -> Log.d(TAG, dump(says)));\n}\n\n\n\n\u3055\u307e\u3056\u307e\u306a\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\n\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u307e\u3068\u3081\n\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Java\u306e\u8b1b\u7fa9\u3001\u8a66\u9a13\u304c\u300c\u81ea\u4f5c\u95a2\u6570\u3092\u4f5c\u308a\u8a18\u8ff0\u3057\u306a\u3055\u3044\u300d\u3063\u3066\u554f\u984c\u3060\u3063\u305f\u304b\u3089<br>\u300c\u30ba\u30f3\u300d\u300c\u30c9\u30b3\u300d\u306e\u3044\u305a\u308c\u304b\u3092\u30e9\u30f3\u30c0\u30e0\u3067\u51fa\u529b\u3057\u7d9a\u3051\u3066\u300c\u30ba\u30f3\u300d\u300c\u30ba\u30f3\u300d\u300c\u30ba\u30f3\u300d\u300c\u30ba\u30f3\u300d\u300c\u30c9\u30b3\u300d\u306e\u914d\u5217\u304c\u51fa\u305f\u3089\u300c\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u300d\u3063\u3066\u51fa\u529b\u3057\u305f\u5f8c\u7d42\u4e86\u3063\u3066\u95a2\u6570\u4f5c\u3063\u305f\u3089\u6e80\u70b9\u3067\u5358\u4f4d\u8cb0\u3063\u3066\u305f</p>&mdash; \u3066\u304f\u3082 (@kumiromilk) <a href=\"https://twitter.com/kumiromilk/status/707437861881180160\">2016\u5e743\u67089\u65e5</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n* [C# \u3068 Reactive Extensions \u3067\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7](http://qiita.com/amay077/items/85dfc4bd194f57c52c57)\n\n\n\u8abf\u5b50\u306b\u4e57\u3063\u3066 RxJava \u3067\u3082\u3084\u3063\u3066\u307f\u305f\u3002\n\u304c\u3093\u3070\u3063\u3066 [``Observable.window``](http://reactivex.io/documentation/operators/window.html) \u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\n\n```java:zondoko.java\n\n// \u306a\u3093\u3061\u3083\u3063\u3066\u30e9\u30e0\u30c0\u4f7f\u7528\u3002\u3042\u3068 Android\u3002\npublic void doZondoko() {\n    final Random random = new Random();\n    final List<String> PATTERN = Arrays.asList(\"\u305a\u3093\", \"\u305a\u3093\", \"\u305a\u3093\", \"\u305a\u3093\", \"\u3069\u3053\");\n    final String K = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\";\n\n    Observable.concat( // \u203b \u306e Observable<List<String>> \u3092\u76f4\u5217\u306b\u9023\u7d50\n        Observable.interval(500, TimeUnit.MILLISECONDS)\n            .map(_ -> random.nextInt(2) == 0 ? \"\u305a\u3093\" : \"\u3069\u3053\") // \u30e9\u30f3\u30c0\u30e0\u306b \u305a\u3093 or \u3069\u3053\n            .window(PATTERN.size(), 1) // \u8981\u7d20\u65705\u306eWindow\u30921\u305a\u3064\u30ba\u30e9\u3057\u3066\u304f\n            .map(window -> window.toList())) // Observable<Observable<String>> \u3092 Observable<List<String>> \u306b\u5909\u63db \u203b\n        .flatMap(window -> {\n            if (sequenceEqual(window, PATTERN)) { // \u30d1\u30bf\u30fc\u30f3\u3068\u4e00\u81f4\u3057\u3066\u3044\u305f\u3089\u2026\n                final List<String> says = new ArrayList<>();\n                says.addAll(window);\n                says.add(K);                      // \u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u3092\u8ffd\u52a0\n                return Observable.concat(\n                        Observable.just(says),\n                        Observable.just(Collections.<String>emptyList())); // \u7d42\u4e86\u5224\u5b9a\u7528\u306e\u7a7a\u30ea\u30b9\u30c8\n            } else {\n                return Observable.just(window);\n            }\n        })\n        .takeWhile(says -> !says.isEmpty())  // \u7a7a\u30ea\u30b9\u30c8\u306b\u306a\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n        .subscribe(says -> Log.d(TAG, dump(says)));\n}\n\n/** \u30ea\u30b9\u30c8\u3068\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u4e00\u81f4 */\nprivate boolean sequenceEqual(List<String> listA, List<String> listB) {\n    Iterator<String> iterA = listA.iterator();\n    Iterator<String> iterB = listB.iterator();\n\n    while (iterA.hasNext() && iterB.hasNext()) {\n        if (iterA.next() != iterB.next()) {\n            return false;\n        }\n    }\n    return (!iterA.hasNext() && !iterB.hasNext());\n}\n\n/** \u30ea\u30b9\u30c8\u5185\u5bb9\u3092\u30c0\u30f3\u30d7 */\nprivate String dump(List<String> list) {\n    final StringBuilder b = new StringBuilder();\n    for (String s : list) {\n        if (!TextUtils.isEmpty(b.toString())) {\n            b.append(\", \");\n        }\n        b.append(s);\n    }\n\n    return b.toString();\n}\n```\n\n> \u3069\u3053, \u305a\u3093, \u3069\u3053, \u3069\u3053, \u305a\u3093\n\u305a\u3093, \u3069\u3053, \u3069\u3053, \u305a\u3093, \u3069\u3053\n\u3069\u3053, \u3069\u3053, \u305a\u3093, \u3069\u3053, \u305a\u3093\n\u3069\u3053, \u305a\u3093, \u3069\u3053, \u305a\u3093, \u3069\u3053\n\u305a\u3093, \u3069\u3053, \u305a\u3093, \u3069\u3053, \u3069\u3053\n\u3069\u3053, \u305a\u3093, \u3069\u3053, \u3069\u3053, \u305a\u3093\n\u305a\u3093, \u3069\u3053, \u3069\u3053, \u305a\u3093, \u305a\u3093\n\u3069\u3053, \u3069\u3053, \u305a\u3093, \u305a\u3093, \u305a\u3093\n\u3069\u3053, \u305a\u3093, \u305a\u3093, \u305a\u3093, \u305a\u3093\n\u305a\u3093, \u305a\u3093, \u305a\u3093, \u305a\u3093, \u3069\u3053, \u30ad\u30fb\u30e8\u30fb\u30b7\uff01\n\n\u300cwindow(5, 1) -> toList -> concat \u3057\u3066\u308b\u306a\u3089\u305d\u308c\u306f ``buffer(5, 1)`` \u3084\u3093\u3051\u300d\u3068\u3044\u3046\u306e\u3092 [\u3053\u3061\u3089](http://qiita.com/do6gop/items/c4941f6fb2bdc1c0c0f1) \u3067\u77e5\u3063\u3066\u3001 ``buffer`` \u7248\u3082\u66f8\u3044\u3066\u307f\u305f\u3002\n\n```java:Zondoko_buffer.java\npublic void doZondoko() {\n    final Random random = new Random();\n    final List<String> PATTERN = Arrays.asList(\"\u305a\u3093\", \"\u305a\u3093\", \"\u305a\u3093\", \"\u305a\u3093\", \"\u3069\u3053\");\n    final String K = \"\u30ad\u30fb\u30e8\u30fb\u30b7\uff01\";\n\n    Observable.interval(500, TimeUnit.MILLISECONDS)\n        .map(_ -> random.nextInt(2) == 0 ? \"\u305a\u3093\" : \"\u3069\u3053\") // \u30e9\u30f3\u30c0\u30e0\u306b \u305a\u3093 or \u3069\u3053\n        .buffer(PATTERN.size(), 1) // \u8981\u7d20\u65705\u306eBuffer\u30921\u305a\u3064\u30ba\u30e9\u3057\u3066\u304f\n        .flatMap(buf -> {\n            if (sequenceEqual(buf, PATTERN)) { // \u30d1\u30bf\u30fc\u30f3\u3068\u4e00\u81f4\u3057\u3066\u3044\u305f\u3089\u2026\n                final List<String> says = new ArrayList<>();\n                says.addAll(buf);\n                says.add(K);                      // \u30ad\u30fb\u30e8\u30fb\u30b7\uff01\u3092\u8ffd\u52a0\n                return Observable.concat(\n                        Observable.just(says),\n                        Observable.just(Collections.<String>emptyList())); // \u7d42\u4e86\u5224\u5b9a\u7528\u306e\u7a7a\u30ea\u30b9\u30c8\n            } else {\n                return Observable.just(buf);\n            }\n        })\n        .takeWhile(says -> !says.isEmpty())  // \u7a7a\u30ea\u30b9\u30c8\u306b\u306a\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n        .subscribe(says -> Log.d(TAG, dump(says)));\n}\n```\n\n\n* [\u3055\u307e\u3056\u307e\u306a\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7](http://qiita.com/B73W56H84/items/519e27a1aed5e6d5304f#%E3%81%82%E3%82%8F%E3%81%9B%E3%81%A6%E8%AA%AD%E3%81%BF%E3%81%9F%E3%81%84)\n* [\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7\u307e\u3068\u3081](http://qiita.com/shunsugai@github/items/971a15461de29563bf90)\n", "tags": ["RxJava", "Java", "ReactiveX", "\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7"]}