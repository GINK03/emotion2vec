{"context": "\u521d\u3081\u3066Watson IoT Platform\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u3001\u3068\u3044\u3046\u304b\u305f\u306e\u305f\u3081\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002\nWatson IoT Platform\u3092\u4f7f\u3063\u3066\u307f\u308b\u3067IoT\u30a2\u30d7\u30ea\u3092\u6e96\u5099\u3057\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u306f\u30b5\u30f3\u30d7\u30eb\u306eIoT\u30bb\u30f3\u30b5\u30fc\u304b\u3089\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066TensorFlow\u3067\u6a5f\u68b0\u5b66\u7fd2\u3057\u3001\u691c\u77e5\u3055\u308c\u305f\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u304b\u3089\u30a2\u30de\u30c1\u30e5\u30a2/\u666e\u901a/\u30d7\u30ed\u306e\u5224\u5b9a\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n1. TensorFlow\u3092\u6e96\u5099\u3057\u307e\u3059\n\n\nBluemix\u306eDocker\u30b3\u30f3\u30c6\u30ca\u74b0\u5883\u306bTensorFlow\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3092\u53c2\u7167\u3057\u3001Bluemix\u74b0\u5883\u306bTensorFlow\u3092\u6e96\u5099\u3057\u307e\u3059\n\u300c\u30c7\u30d7\u30ed\u30a4\u300d\u30b9\u30c6\u30fc\u30b8\u3092\u69cb\u6210\u3059\u308b\u30b9\u30c6\u30c3\u30d7\u3067\u3001port\u3068\u3057\u3066\u30018888\u4ee5\u5916\u306b\u30016006\u30689000\u3082\u958b\u3051\u3066\u304a\u304f\u3088\u3046\u306b\u3057\u307e\u3059\n\n\n3. Python\u5b9f\u884c\u74b0\u5883\u306bflask\u3068pandas\u3092\u5165\u308c\u3066\u304a\u304d\u307e\u3059\u3002flask\u306fpip istall flask\u306a\u3069\u3067\u3001pandas\u306fpip install pandas\u306a\u3069\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u53ef\u80fd\u3067\u3059\n4. TenserFlow\u306eDocker\u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30d7\u30ed\u30a4\u306b\u3088\u308aBluemix\u304b\u3089\u63d0\u4f9b\u3055\u308c\u308bIP\u30a2\u30c9\u30ec\u30b9\u306e\u3046\u3061\u3001\u300c\u30d1\u30d6\u30ea\u30c3\u30afIP\u300d\u3092\u4f7f\u7528\u3057\u3066\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002flask\u30b5\u30fc\u30d0\u30fc\u306f\u300c\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8IP\u300d\u3092\u6307\u5b9a\u3057\u30669000\u30dd\u30fc\u30c8\u3092\u958b\u3051\u307e\u3059\n\n2. \u30b5\u30f3\u30d7\u30eb\u3092\u6e96\u5099\u3057\u307e\u3059\n\n\u7528\u610f\u3057\u305fTensorFlow\u74b0\u5883\u306b\u4e0b\u8a18\u306e\u30bd\u30fc\u30b9\u3092\u914d\u7f6e\u3057\u307e\u3059\u3002\n\nmodel.py\u3067\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\n\n\n\u96a0\u308c\u5c642\u3067\u305d\u308c\u305e\u308c32\u300116\u500b\u306eReLu\u3067\u69cb\u6210\u3057\u3066\u3044\u307e\u3059\n\nCOLUMN_SIZE\u306b\u5bfe\u8c61\u306b\u3059\u308b\u30c7\u30fc\u30bf\u306e\u9805\u76ee\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001'accel', 'gyro', 'temp', 'humid'\u3092\u5bfe\u8c61\u306b\u3057\u3066\u3044\u307e\u3059\n\nactual_class\u306b\u5224\u5b9a\u306b\u4f7f\u7528\u3059\u308b\u76ee\u7684\u5909\u6570\u306e\u9805\u76ee\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f amateur = 0, regular = 1, pros = 2\u306e\uff13\u500b\u306e\u5024\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n\u3053\u3053\u3067\u306fGradientDescentOptimizer\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001AdamOptimizer\u306a\u3069\u7570\u306a\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\u4e8b\u3082\u53ef\u80fd\u3067\u3059\n\u5b66\u7fd2\uff11\uff10\uff10\u56de\u6bce\u306b\u5b66\u7fd2\u3068\u30c6\u30b9\u30c8\u306e\u7cbe\u5ea6\u3092\u51fa\u529b\u3057\u307e\u3059\n\u305d\u306e\u4ed6\u8a73\u7d30\u306fTensorFlow\u306eTutorial\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\n\n\n\n\nmodel.py\n# -*- coding: utf-8 -*-\n\nimport tensorflow as tf\nimport numpy as np\n\nclass Model:\n    HIDDEN_UNIT_SIZE  = 32\n    HIDDEN_UNIT_SIZE2 = 16\n    # \u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u9805\u76ee\u6570\n    COLUMN_SIZE = 4\n\n    def __init__(self):\n        self.__setup_placeholder()\n        self.__setup_model()\n        self.__setup_ops()\n\n    def __enter__(self):\n        self.session = tf.Session()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.session.close()\n        return False\n\n    def save(self, path):\n        saver = tf.train.Saver()\n        saver.save(self.session, path)\n\n    def restore(self, path):\n        saver = tf.train.Saver()\n        saver.restore(self.session, path)\n\n    def __setup_placeholder(self):\n        column_size = Model.COLUMN_SIZE\n        self.iot_data   = tf.placeholder(\"float\", [None, column_size])\n        # \u76ee\u7684\u5909\u6570\u304c\uff13\u5024\n        self.actual_class = tf.placeholder(\"float\", [None, 3])\n        self.keep_prob    = tf.placeholder(\"float\")\n        self.label        = tf.placeholder(\"string\")\n\n    def __setup_model(self):\n        column_size = Model.COLUMN_SIZE\n        w1 = tf.Variable(tf.truncated_normal([column_size, Predictor.HIDDEN_UNIT_SIZE], stddev=0.1))\n        b1 = tf.Variable(tf.constant(0.1, shape=[Predictor.HIDDEN_UNIT_SIZE]))\n        h1 = tf.nn.relu(tf.matmul(self.iot_data, w1) + b1)\n\n        w2 = tf.Variable(tf.truncated_normal([Predictor.HIDDEN_UNIT_SIZE, Predictor.HIDDEN_UNIT_SIZE2], stddev=0.1))\n        b2 = tf.Variable(tf.constant(0.1, shape=[Predictor.HIDDEN_UNIT_SIZE2]))\n        h2 = tf.nn.relu(tf.matmul(h1, w2) + b2)\n\n        h2_drop = tf.nn.dropout(h2, self.keep_prob)\n        # \u76ee\u7684\u5909\u6570\u304c\uff13\u5024\n        w2 = tf.Variable(tf.truncated_normal([Predictor.HIDDEN_UNIT_SIZE2, 3], stddev=0.1))\n        # \u76ee\u7684\u5909\u6570\u304c\uff13\u5024\n        b2 = tf.Variable(tf.constant(0.1, shape=[3]))\n        self.output = tf.nn.softmax(tf.matmul(h2_drop, w2) + b2)\n\n    def __setup_ops(self):\n        cross_entropy = -tf.reduce_sum(self.actual_class * tf.log(self.output))\n        self.summary = tf.scalar_summary(self.label, cross_entropy)\n        # \u7570\u306a\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u53ef\u80fd\n        # self.train_op = tf.train.AdamOptimizer(0.0001).minimize(cross_entropy)\n        self.train_op = tf.train.GradientDescentOptimizer(0.0001).minimize(cross_entropy)\n        self.merge_summaries = tf.merge_summary([self.summary])\n        correct_prediction = tf.equal(tf.argmax(self.output,1), tf.argmax(self.actual_class,1))\n        self.accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n\nclass Trainer(Model):\n\n    def train(self, steps, data):\n        self.__prepare_train(self.session)\n        for i in range(steps):\n            self.__do_train(self.session, i, data)\n            if i %100 == 0:\n                self.__add_summary(self.session, i, data)\n                self.__print_status(self.session, i, data)\n\n    def __prepare_train(self, session):\n        self.summary_writer = tf.train.SummaryWriter('logs', graph_def=session.graph_def)\n        session.run(tf.initialize_all_variables())\n\n    def __do_train(self, session, i, data):\n        session.run(self.train_op, feed_dict=self.train_feed_dict(data))\n\n    def __add_summary(self, session, i, data):\n        summary_str = session.run(self.merge_summaries, feed_dict=self.train_feed_dict(data))\n        summary_str += session.run(self.merge_summaries, feed_dict=self.test_feed_dict(data))\n        self.summary_writer.add_summary(summary_str, i)\n\n    def __print_status(self, session, i, data):\n        train_accuracy = session.run(self.accuracy, feed_dict=self.train_feed_dict(data))\n        test_accuracy  = session.run(self.accuracy, feed_dict=self.test_feed_dict(data))\n        print 'step {} ,train_accuracy={} ,test_accuracy={} '.format(i, train_accuracy, test_accuracy)\n\n    def train_feed_dict(self, data):\n        return {\n            self.iot_data: data.train_data(),\n            self.actual_class: data.train_up_down(),\n            self.keep_prob: 0.8,\n            self.label: \"train\"\n        }\n\n    def test_feed_dict(self, data):\n        return {\n            self.iot_data: data.test_data(),\n            self.actual_class: data.test_up_down(),\n            self.keep_prob: 1,\n            self.label: \"test\"\n        }\n\n\nclass Predictor(Model):\n\n    def predict( self, data ):\n        return self.session.run(tf.argmax(self.output,1), feed_dict=self.predict_feed_dict(data))\n\n    def predict_feed_dict(self, data):\n        return {\n            self.iot_data: data,\n            self.keep_prob: 1,\n            self.label: \"predict\"\n        }\n\n\n\n\n\n\niot_results_loader.py\u3067\u5b66\u7fd2\u7528\u306e\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\n\n\n\u3053\u3053\u3067\u306f\u3001\u30b5\u30f3\u30d7\u30eb\u7528\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n\noutcome\u9805\u3067\u7d50\u679c\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\n\u5168\u4f53\u306e\uff12/\uff13\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u3001\uff11/\uff13\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n\n\n\n\niot_results_loader.py\n# -*- coding: utf-8 -*-\n\nimport pandas as pd\n\nclass IoTResults:\n\n    def __float__(data):\n        return 1.0\n\n    def __init__(self, data):\n        self.raw  = data.copy()\n        self.data = data\n\n    def predictor_data(self):\n        return self.data\n\n    def train_data(self):\n        return self.__drop_outcome(self.__train_data())\n\n    def test_data(self):\n        return self.__drop_outcome(self.__test_data())\n\n    def train_up_down(self):\n        return self.__good_bad(self.__train_data()[\"outcome\"])\n\n    def test_up_down(self):\n        return self.__good_bad(self.__test_data()[\"outcome\"])\n\n    def __train_data(self):\n        # \u5168\u30c7\u30fc\u30bf\u306e 2/3 \u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\n        return self.data.loc[lambda df: df.index % 3 != 0, :]\n\n    def __test_data(self):\n        # \u5168\u30c7\u30fc\u30bf\u306e 1/3 \u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\n        return self.data.loc[lambda df: df.index % 3 == 0, :]\n\n    def __drop_outcome(self, data):\n        return data.drop(\"outcome\", axis=1)\n\n    def __good_bad(self, outcome):\n        return outcome.apply(\n            lambda p: pd.Series([\n                1 if p <=  0 else 0,\n                1 if p ==1  else 0,\n                1 if p > 1  else 0\n            ], index=['amateur', 'regular', 'pros']))\n\n\nclass IoTResultsLoader:\n\n    def retrieve_iot_data(self):\n        df = pd.DataFrame(\n            {'accel': [5,5,23,8,7,8,16,0,7,5,6,18,7,0,8,13,6,7,8,6,8,16,8,1,8,7,18,10,8,7,9,0,7,6,14,12,8,5,7,6,8,1,8,7,10,6,7,7,8,18,7,6,8,0,8,6,5,0,8,16,7,8,6,7,9,9,8,7,8,0,8,7,6,7,9,8,9,15,8,7,6,1,8,7,9,7,6,9,8,14,7,6,7,9,8,0,7,8,8,9],\n             'gyro': [4,8,20,6,2,4,12,2,12,6,8,14,6,2,8,22,0,10,6,4,8,18,2,4,4,8,20,8,4,6,4,2,4,6,12,12,2,6,4,2,10,2,8,4,6,2,0,4,0,14,2,4,0,4,10,8,4,2,4,12,8,4,2,0,4,0,8,4,6,2,2,0,4,8,6,4,0,12,0,4,8,1,10,4,2,0,2,4,6,12,4,2,2,0,4,3,4,0,2,4],\n             'temp': [20,18,25,21,23,25,26,8,19,18,20,48,22,6,24,42,23,19,20,18,23,35,22,6,24,22,40,19,20,30,22,7,28,24,33,28,25,30,28,29,27,6,12,20,18,20,22,21,22,34,28,30,26,7,25,20,19,6,21,27,18,20,18,20,24,26,22,28,24,8,24,25,21,22,28,26,19,32,23,21,24,6,21,20,19,22,25,27,26,34,24,20,23,19,22,7,27,23,24,18],\n             'humid': [50,44,58,56,48,42,60,40,58,54,56,60,44,40,58,62,50,52,54,56,48,46,50,42,56,60,64,52,56,60,58,44,44,48,54,52,56,60,62,64,58,48,58,48,48,50,54,60,62,52,48,44,50,54,52,58,46,48,50,56,62,60,54,48,44,52,54,58,50,48,48,52,58,62,60,52,60,58,56,48,44,52,56,54,58,48,52,54,50,58,54,56,62,60,60,52,48,46,58,48],\n             'outcome': [1,1,0,1,1,1,0,2,1,1,1,0,1,2,1,0,1,1,1,1,1,0,1,2,1,1,0,1,1,1,1,2,1,1,0,0,1,1,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,2,1,1,1,2,1,0,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1]})\n        return df\n\n\n\n\n\ntrain.py\u3067\u5b66\u7fd2\u3055\u305b\u307e\u3059\n\n\n\u5fc5\u8981\u306b\u5fdc\u3058\u5b66\u7fd2\u56de\u6570\u3092\u5909\u66f4\u3057\u3066\u8a66\u3057\u3066\u307f\u307e\u3059\n\u5b66\u7fd2\u7d50\u679c\u304c./model.ckpt\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\n\n\n\n\ntrain.py\n\n# -*- coding: utf-8 -*-\n\nfrom iot_results_loader import *\nfrom model import *\n\nloader = IoTResultsLoader()\ndata = IoTResults(loader.retrieve_iot_data())\n\nwith Trainer() as trainer:\n    # \u5b66\u7fd2\u56de\u6570\n    trainer.train(3000, data)\n    trainer.save(\"./model.ckpt\")\n\n\n\n\n\nserver.py\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u5b9f\u884c\u3057\u307e\u3059\n\n\nflask\u30679000\u30dd\u30fc\u30c8\u3067\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002TenserFlow\u306eDocker\u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30d7\u30ed\u30a4\u306b\u3088\u308aBluemix\u304b\u3089\u63d0\u4f9b\u3055\u308c\u308bIP\u30a2\u30c9\u30ec\u30b9\u306e\u3046\u3061\u3001\u30d1\u30d6\u30ea\u30c3\u30afIP\u3092\u4f7f\u7528\u3057\u3066\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002flask\u30b5\u30fc\u30d0\u30fc\u306f\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8IP\u3078\u5411\u30519000\u30dd\u30fc\u30c8\u3092\u958b\u3051\u307e\u3059\n\n\n\n\nserver.py\n\n# -*- coding: utf-8 -*-\n\nimport pandas as pd\nfrom flask import Flask, jsonify, request\nfrom iot_results_loader import *\nfrom model import *\n\nloader = IoTResultsLoader()\n\npredictor = Predictor()\npredictor.__enter__()\npredictor.restore(\"./model.ckpt\")\n\niot_data  = loader.retrieve_iot_data()\n\n# webapp\napp = Flask(__name__)\n\n@app.route('/api/predictor', methods=['POST'])\ndef predict():\n    data = pd.DataFrame(eval(request.data))\n    results = predictor.predict(IoTResults(data).predictor_data().iloc[[0]])\n    return jsonify(result=(\"pros!\" if results[0] == 2 else \"regular\" if results[0] == 1 else \"amateur!\"))\n\nif __name__ == '__main__':\n    app.run(host='172.30.0.3', port=9000)\n\n\n\n\nNode-RED\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\n\n\nTensorFlow\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30d5\u30ed\u30fc\n[{\"id\":\"e1d1df28.30cdb\",\"type\":\"inject\",\"z\":\"23ccc58c.26b582\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"x\":120,\"y\":100,\"wires\":[[\"c3e01383.ee175\"]]},{\"id\":\"81d9e766.6e82\",\"type\":\"http request\",\"z\":\"23ccc58c.26b582\",\"name\":\"\",\"method\":\"POST\",\"ret\":\"txt\",\"url\":\"http://xx.xx.xx.xx:9000/api/predictor\",\"tls\":\"\",\"x\":450,\"y\":160,\"wires\":[[\"40a2e5d8.976e6c\"]]},{\"id\":\"11916de2.fb6c0a\",\"type\":\"debug\",\"z\":\"23ccc58c.26b582\",\"name\":\"\",\"active\":true,\"console\":\"false\",\"complete\":\"false\",\"x\":690,\"y\":240,\"wires\":[]},{\"id\":\"c3e01383.ee175\",\"type\":\"template\",\"z\":\"23ccc58c.26b582\",\"name\":\"amateur\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"{'accel': [13], 'gyro': [20], 'temp': [25], 'humid': [58]}\\t\",\"x\":280,\"y\":100,\"wires\":[[\"81d9e766.6e82\"]]},{\"id\":\"c00d807a.6e942\",\"type\":\"template\",\"z\":\"23ccc58c.26b582\",\"name\":\"pros\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"{'accel': [0], 'gyro': [2], 'temp': [8], 'humid': [40]}\\t\",\"x\":270,\"y\":220,\"wires\":[[\"81d9e766.6e82\"]]},{\"id\":\"ba871882.501c9\",\"type\":\"template\",\"z\":\"23ccc58c.26b582\",\"name\":\"regular\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"{'accel': [5], 'gyro': [4], 'temp': [20], 'humid': [50]}\\t\",\"x\":270,\"y\":160,\"wires\":[[\"81d9e766.6e82\"]]},{\"id\":\"473e7329.e15e1c\",\"type\":\"inject\",\"z\":\"23ccc58c.26b582\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"x\":120,\"y\":220,\"wires\":[[\"c00d807a.6e942\"]]},{\"id\":\"ca48901b.3e3678\",\"type\":\"inject\",\"z\":\"23ccc58c.26b582\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"x\":120,\"y\":160,\"wires\":[[\"ba871882.501c9\"]]},{\"id\":\"f662f04b.eb2808\",\"type\":\"template\",\"z\":\"23ccc58c.26b582\",\"name\":\"\u51fa\u529b\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"\u3042\u306a\u305f\u306f {{payload}} \u3067\u3059\u306d\uff01\",\"x\":530,\"y\":240,\"wires\":[[\"11916de2.fb6c0a\"]]},{\"id\":\"40a2e5d8.976e6c\",\"type\":\"function\",\"z\":\"23ccc58c.26b582\",\"name\":\"\u53d6\u308a\u51fa\u3057\",\"func\":\"var data = JSON.parse(msg.payload);\\nmsg.payload = data.result;\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"x\":620,\"y\":160,\"wires\":[[\"f662f04b.eb2808\"]]}]\n\n\n\n\n3. \u5b9f\u884c\u3057\u307e\u3059\n\npython train.py\u3067\u5b66\u7fd2\u3055\u305b\u307e\u3059\n\npython server.py\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u5b9f\u884c\u3057\u307e\u3059\n\u4e0a\u8a18\u306eNode-RED\u306e\u30d5\u30ed\u30fc\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3001amateur/regular/pros\u306e\u5224\u5b9a\u3092\u78ba\u8a8d\u3057\u307e\u3059\n\npython -m tensorflow.tensorboard --logdir=./logs\u306a\u3069\u3067tensorboard\u3092\u7a3c\u50cd\u3057\u30d6\u30e9\u30a6\u30b6\u30676006\u30dd\u30fc\u30c8\u3078\u30a2\u30af\u30bb\u30b9\u3057\u3066\u5b66\u7fd2\u306e\u72b6\u6cc1\u306a\u3069\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002IP\u30a2\u30c9\u30ec\u30b9\u306fTenserFlow\u306eDocker\u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30d7\u30ed\u30a4\u306b\u3088\u308aBluemix\u304b\u3089\u63d0\u4f9b\u3055\u308c\u308bIP\u30a2\u30c9\u30ec\u30b9\u306e\u3046\u3061\u3001\u30d1\u30d6\u30ea\u30c3\u30afIP\u3092\u4f7f\u7528\u3057\u3066\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\n\n\n\n\n\u53c2\u8003\nTensorFlow\u3092\u4f7f\u3063\u305f\u70ba\u66ff(FX)\u306e\u30c8\u30ec\u30fc\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u5927\u5909\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u521d\u3081\u3066Watson IoT Platform\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u3001\u3068\u3044\u3046\u304b\u305f\u306e\u305f\u3081\u306e\u30ac\u30a4\u30c9\u3067\u3059\u3002\n[Watson IoT Platform\u3092\u4f7f\u3063\u3066\u307f\u308b](http://qiita.com/egplnt/items/af867711a7191923b2ff)\u3067IoT\u30a2\u30d7\u30ea\u3092\u6e96\u5099\u3057\u307e\u3057\u305f\u3002\n\u3053\u3053\u3067\u306f\u30b5\u30f3\u30d7\u30eb\u306eIoT\u30bb\u30f3\u30b5\u30fc\u304b\u3089\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066TensorFlow\u3067\u6a5f\u68b0\u5b66\u7fd2\u3057\u3001\u691c\u77e5\u3055\u308c\u305f\u30bb\u30f3\u30b5\u30fc\u30c7\u30fc\u30bf\u304b\u3089\u30a2\u30de\u30c1\u30e5\u30a2/\u666e\u901a/\u30d7\u30ed\u306e\u5224\u5b9a\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n# 1. TensorFlow\u3092\u6e96\u5099\u3057\u307e\u3059\n1. [Bluemix\u306eDocker\u30b3\u30f3\u30c6\u30ca\u74b0\u5883\u306bTensorFlow\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b](http://qiita.com/takeyan/items/7956ec65e9cca367f8bd)\u3092\u53c2\u7167\u3057\u3001Bluemix\u74b0\u5883\u306bTensorFlow\u3092\u6e96\u5099\u3057\u307e\u3059\n2. \u300c\u30c7\u30d7\u30ed\u30a4\u300d\u30b9\u30c6\u30fc\u30b8\u3092\u69cb\u6210\u3059\u308b\u30b9\u30c6\u30c3\u30d7\u3067\u3001port\u3068\u3057\u3066\u30018888\u4ee5\u5916\u306b\u30016006\u30689000\u3082\u958b\u3051\u3066\u304a\u304f\u3088\u3046\u306b\u3057\u307e\u3059\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-31 15.25.45.png](https://qiita-image-store.s3.amazonaws.com/0/125842/77c817b1-4e4e-46cf-de24-e208b73c94b8.png)\n3. Python\u5b9f\u884c\u74b0\u5883\u306bflask\u3068pandas\u3092\u5165\u308c\u3066\u304a\u304d\u307e\u3059\u3002flask\u306f`pip istall flask`\u306a\u3069\u3067\u3001pandas\u306f`pip install pandas`\u306a\u3069\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u53ef\u80fd\u3067\u3059\n4. TenserFlow\u306eDocker\u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30d7\u30ed\u30a4\u306b\u3088\u308aBluemix\u304b\u3089\u63d0\u4f9b\u3055\u308c\u308bIP\u30a2\u30c9\u30ec\u30b9\u306e\u3046\u3061\u3001\u300c\u30d1\u30d6\u30ea\u30c3\u30afIP\u300d\u3092\u4f7f\u7528\u3057\u3066\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002flask\u30b5\u30fc\u30d0\u30fc\u306f\u300c\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8IP\u300d\u3092\u6307\u5b9a\u3057\u30669000\u30dd\u30fc\u30c8\u3092\u958b\u3051\u307e\u3059\n\n# 2. \u30b5\u30f3\u30d7\u30eb\u3092\u6e96\u5099\u3057\u307e\u3059\n- \u7528\u610f\u3057\u305fTensorFlow\u74b0\u5883\u306b\u4e0b\u8a18\u306e\u30bd\u30fc\u30b9\u3092\u914d\u7f6e\u3057\u307e\u3059\u3002\n- `model.py`\u3067\u30e2\u30c7\u30eb\u3092\u5b9a\u7fa9\u3057\u307e\u3059\n    - \u96a0\u308c\u5c642\u3067\u305d\u308c\u305e\u308c32\u300116\u500b\u306eReLu\u3067\u69cb\u6210\u3057\u3066\u3044\u307e\u3059\n    - `COLUMN_SIZE`\u306b\u5bfe\u8c61\u306b\u3059\u308b\u30c7\u30fc\u30bf\u306e\u9805\u76ee\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001'accel', 'gyro', 'temp', 'humid'\u3092\u5bfe\u8c61\u306b\u3057\u3066\u3044\u307e\u3059\n    - `actual_class`\u306b\u5224\u5b9a\u306b\u4f7f\u7528\u3059\u308b\u76ee\u7684\u5909\u6570\u306e\u9805\u76ee\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f amateur = 0, regular = 1, pros = 2\u306e\uff13\u500b\u306e\u5024\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n    - \u3053\u3053\u3067\u306fGradientDescentOptimizer\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001AdamOptimizer\u306a\u3069\u7570\u306a\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3059\u308b\u4e8b\u3082\u53ef\u80fd\u3067\u3059\n    - \u5b66\u7fd2\uff11\uff10\uff10\u56de\u6bce\u306b\u5b66\u7fd2\u3068\u30c6\u30b9\u30c8\u306e\u7cbe\u5ea6\u3092\u51fa\u529b\u3057\u307e\u3059\n    - \u305d\u306e\u4ed6\u8a73\u7d30\u306f[TensorFlow\u306eTutorial](https://www.tensorflow.org/versions/r0.9/tutorials/index.html)\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\n\n```py:model.py\n# -*- coding: utf-8 -*-\n\nimport tensorflow as tf\nimport numpy as np\n\nclass Model:\n    HIDDEN_UNIT_SIZE  = 32\n    HIDDEN_UNIT_SIZE2 = 16\n    # \u5bfe\u8c61\u30c7\u30fc\u30bf\u306e\u9805\u76ee\u6570\n    COLUMN_SIZE = 4\n\n    def __init__(self):\n        self.__setup_placeholder()\n        self.__setup_model()\n        self.__setup_ops()\n\n    def __enter__(self):\n        self.session = tf.Session()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.session.close()\n        return False\n\n    def save(self, path):\n        saver = tf.train.Saver()\n        saver.save(self.session, path)\n\n    def restore(self, path):\n        saver = tf.train.Saver()\n        saver.restore(self.session, path)\n\n    def __setup_placeholder(self):\n        column_size = Model.COLUMN_SIZE\n        self.iot_data   = tf.placeholder(\"float\", [None, column_size])\n        # \u76ee\u7684\u5909\u6570\u304c\uff13\u5024\n        self.actual_class = tf.placeholder(\"float\", [None, 3])\n        self.keep_prob    = tf.placeholder(\"float\")\n        self.label        = tf.placeholder(\"string\")\n\n    def __setup_model(self):\n        column_size = Model.COLUMN_SIZE\n        w1 = tf.Variable(tf.truncated_normal([column_size, Predictor.HIDDEN_UNIT_SIZE], stddev=0.1))\n        b1 = tf.Variable(tf.constant(0.1, shape=[Predictor.HIDDEN_UNIT_SIZE]))\n        h1 = tf.nn.relu(tf.matmul(self.iot_data, w1) + b1)\n\n        w2 = tf.Variable(tf.truncated_normal([Predictor.HIDDEN_UNIT_SIZE, Predictor.HIDDEN_UNIT_SIZE2], stddev=0.1))\n        b2 = tf.Variable(tf.constant(0.1, shape=[Predictor.HIDDEN_UNIT_SIZE2]))\n        h2 = tf.nn.relu(tf.matmul(h1, w2) + b2)\n\n        h2_drop = tf.nn.dropout(h2, self.keep_prob)\n        # \u76ee\u7684\u5909\u6570\u304c\uff13\u5024\n        w2 = tf.Variable(tf.truncated_normal([Predictor.HIDDEN_UNIT_SIZE2, 3], stddev=0.1))\n        # \u76ee\u7684\u5909\u6570\u304c\uff13\u5024\n        b2 = tf.Variable(tf.constant(0.1, shape=[3]))\n        self.output = tf.nn.softmax(tf.matmul(h2_drop, w2) + b2)\n\n    def __setup_ops(self):\n        cross_entropy = -tf.reduce_sum(self.actual_class * tf.log(self.output))\n        self.summary = tf.scalar_summary(self.label, cross_entropy)\n        # \u7570\u306a\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u53ef\u80fd\n        # self.train_op = tf.train.AdamOptimizer(0.0001).minimize(cross_entropy)\n        self.train_op = tf.train.GradientDescentOptimizer(0.0001).minimize(cross_entropy)\n        self.merge_summaries = tf.merge_summary([self.summary])\n        correct_prediction = tf.equal(tf.argmax(self.output,1), tf.argmax(self.actual_class,1))\n        self.accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n\nclass Trainer(Model):\n\n    def train(self, steps, data):\n        self.__prepare_train(self.session)\n        for i in range(steps):\n            self.__do_train(self.session, i, data)\n            if i %100 == 0:\n                self.__add_summary(self.session, i, data)\n                self.__print_status(self.session, i, data)\n\n    def __prepare_train(self, session):\n        self.summary_writer = tf.train.SummaryWriter('logs', graph_def=session.graph_def)\n        session.run(tf.initialize_all_variables())\n\n    def __do_train(self, session, i, data):\n        session.run(self.train_op, feed_dict=self.train_feed_dict(data))\n\n    def __add_summary(self, session, i, data):\n        summary_str = session.run(self.merge_summaries, feed_dict=self.train_feed_dict(data))\n        summary_str += session.run(self.merge_summaries, feed_dict=self.test_feed_dict(data))\n        self.summary_writer.add_summary(summary_str, i)\n\n    def __print_status(self, session, i, data):\n        train_accuracy = session.run(self.accuracy, feed_dict=self.train_feed_dict(data))\n        test_accuracy  = session.run(self.accuracy, feed_dict=self.test_feed_dict(data))\n        print 'step {} ,train_accuracy={} ,test_accuracy={} '.format(i, train_accuracy, test_accuracy)\n\n    def train_feed_dict(self, data):\n        return {\n            self.iot_data: data.train_data(),\n            self.actual_class: data.train_up_down(),\n            self.keep_prob: 0.8,\n            self.label: \"train\"\n        }\n\n    def test_feed_dict(self, data):\n        return {\n            self.iot_data: data.test_data(),\n            self.actual_class: data.test_up_down(),\n            self.keep_prob: 1,\n            self.label: \"test\"\n        }\n\n\nclass Predictor(Model):\n\n    def predict( self, data ):\n        return self.session.run(tf.argmax(self.output,1), feed_dict=self.predict_feed_dict(data))\n\n    def predict_feed_dict(self, data):\n        return {\n            self.iot_data: data,\n            self.keep_prob: 1,\n            self.label: \"predict\"\n        }\n\n\n```\n\n- `iot_results_loader.py`\u3067\u5b66\u7fd2\u7528\u306e\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3057\u307e\u3059\n    - \u3053\u3053\u3067\u306f\u3001\u30b5\u30f3\u30d7\u30eb\u7528\u30c7\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n    - `outcome`\u9805\u3067\u7d50\u679c\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\n    - \u5168\u4f53\u306e\uff12/\uff13\u3092\u5b66\u7fd2\u30c7\u30fc\u30bf\u306b\u3001\uff11/\uff13\u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\n\n```py:iot_results_loader.py\n# -*- coding: utf-8 -*-\n\nimport pandas as pd\n\nclass IoTResults:\n\n    def __float__(data):\n        return 1.0\n\n    def __init__(self, data):\n        self.raw  = data.copy()\n        self.data = data\n\n    def predictor_data(self):\n        return self.data\n\n    def train_data(self):\n        return self.__drop_outcome(self.__train_data())\n\n    def test_data(self):\n        return self.__drop_outcome(self.__test_data())\n\n    def train_up_down(self):\n        return self.__good_bad(self.__train_data()[\"outcome\"])\n\n    def test_up_down(self):\n        return self.__good_bad(self.__test_data()[\"outcome\"])\n\n    def __train_data(self):\n        # \u5168\u30c7\u30fc\u30bf\u306e 2/3 \u3092\u8a13\u7df4\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\n        return self.data.loc[lambda df: df.index % 3 != 0, :]\n\n    def __test_data(self):\n        # \u5168\u30c7\u30fc\u30bf\u306e 1/3 \u3092\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\n        return self.data.loc[lambda df: df.index % 3 == 0, :]\n\n    def __drop_outcome(self, data):\n        return data.drop(\"outcome\", axis=1)\n\n    def __good_bad(self, outcome):\n        return outcome.apply(\n            lambda p: pd.Series([\n                1 if p <=  0 else 0,\n                1 if p ==1  else 0,\n                1 if p > 1  else 0\n            ], index=['amateur', 'regular', 'pros']))\n\n\nclass IoTResultsLoader:\n\n    def retrieve_iot_data(self):\n        df = pd.DataFrame(\n            {'accel': [5,5,23,8,7,8,16,0,7,5,6,18,7,0,8,13,6,7,8,6,8,16,8,1,8,7,18,10,8,7,9,0,7,6,14,12,8,5,7,6,8,1,8,7,10,6,7,7,8,18,7,6,8,0,8,6,5,0,8,16,7,8,6,7,9,9,8,7,8,0,8,7,6,7,9,8,9,15,8,7,6,1,8,7,9,7,6,9,8,14,7,6,7,9,8,0,7,8,8,9],\n             'gyro': [4,8,20,6,2,4,12,2,12,6,8,14,6,2,8,22,0,10,6,4,8,18,2,4,4,8,20,8,4,6,4,2,4,6,12,12,2,6,4,2,10,2,8,4,6,2,0,4,0,14,2,4,0,4,10,8,4,2,4,12,8,4,2,0,4,0,8,4,6,2,2,0,4,8,6,4,0,12,0,4,8,1,10,4,2,0,2,4,6,12,4,2,2,0,4,3,4,0,2,4],\n             'temp': [20,18,25,21,23,25,26,8,19,18,20,48,22,6,24,42,23,19,20,18,23,35,22,6,24,22,40,19,20,30,22,7,28,24,33,28,25,30,28,29,27,6,12,20,18,20,22,21,22,34,28,30,26,7,25,20,19,6,21,27,18,20,18,20,24,26,22,28,24,8,24,25,21,22,28,26,19,32,23,21,24,6,21,20,19,22,25,27,26,34,24,20,23,19,22,7,27,23,24,18],\n             'humid': [50,44,58,56,48,42,60,40,58,54,56,60,44,40,58,62,50,52,54,56,48,46,50,42,56,60,64,52,56,60,58,44,44,48,54,52,56,60,62,64,58,48,58,48,48,50,54,60,62,52,48,44,50,54,52,58,46,48,50,56,62,60,54,48,44,52,54,58,50,48,48,52,58,62,60,52,60,58,56,48,44,52,56,54,58,48,52,54,50,58,54,56,62,60,60,52,48,46,58,48],\n             'outcome': [1,1,0,1,1,1,0,2,1,1,1,0,1,2,1,0,1,1,1,1,1,0,1,2,1,1,0,1,1,1,1,2,1,1,0,0,1,1,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,2,1,1,1,2,1,0,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,2,1,1,1,1,1,1,1,0,1,1,1,1,1,2,1,1,1,1]})\n        return df\n\n```\n\n- `train.py`\u3067\u5b66\u7fd2\u3055\u305b\u307e\u3059\n    - \u5fc5\u8981\u306b\u5fdc\u3058\u5b66\u7fd2\u56de\u6570\u3092\u5909\u66f4\u3057\u3066\u8a66\u3057\u3066\u307f\u307e\u3059\n    - \u5b66\u7fd2\u7d50\u679c\u304c./model.ckpt\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\n\n```py:train.py\n\n# -*- coding: utf-8 -*-\n\nfrom iot_results_loader import *\nfrom model import *\n\nloader = IoTResultsLoader()\ndata = IoTResults(loader.retrieve_iot_data())\n\nwith Trainer() as trainer:\n    # \u5b66\u7fd2\u56de\u6570\n    trainer.train(3000, data)\n    trainer.save(\"./model.ckpt\")\n\n```\n\n- `server.py`\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u5b9f\u884c\u3057\u307e\u3059\n    - flask\u30679000\u30dd\u30fc\u30c8\u3067\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002TenserFlow\u306eDocker\u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30d7\u30ed\u30a4\u306b\u3088\u308aBluemix\u304b\u3089\u63d0\u4f9b\u3055\u308c\u308bIP\u30a2\u30c9\u30ec\u30b9\u306e\u3046\u3061\u3001\u30d1\u30d6\u30ea\u30c3\u30afIP\u3092\u4f7f\u7528\u3057\u3066\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002flask\u30b5\u30fc\u30d0\u30fc\u306f\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8IP\u3078\u5411\u30519000\u30dd\u30fc\u30c8\u3092\u958b\u3051\u307e\u3059\n\n\n```py:server.py\n\n# -*- coding: utf-8 -*-\n\nimport pandas as pd\nfrom flask import Flask, jsonify, request\nfrom iot_results_loader import *\nfrom model import *\n\nloader = IoTResultsLoader()\n\npredictor = Predictor()\npredictor.__enter__()\npredictor.restore(\"./model.ckpt\")\n\niot_data  = loader.retrieve_iot_data()\n\n# webapp\napp = Flask(__name__)\n\n@app.route('/api/predictor', methods=['POST'])\ndef predict():\n    data = pd.DataFrame(eval(request.data))\n    results = predictor.predict(IoTResults(data).predictor_data().iloc[[0]])\n    return jsonify(result=(\"pros!\" if results[0] == 2 else \"regular\" if results[0] == 1 else \"amateur!\"))\n\nif __name__ == '__main__':\n    app.run(host='172.30.0.3', port=9000)\n\n```\n\n- Node-RED\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\n\n```lang:TensorFlow\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30d5\u30ed\u30fc\n[{\"id\":\"e1d1df28.30cdb\",\"type\":\"inject\",\"z\":\"23ccc58c.26b582\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"x\":120,\"y\":100,\"wires\":[[\"c3e01383.ee175\"]]},{\"id\":\"81d9e766.6e82\",\"type\":\"http request\",\"z\":\"23ccc58c.26b582\",\"name\":\"\",\"method\":\"POST\",\"ret\":\"txt\",\"url\":\"http://xx.xx.xx.xx:9000/api/predictor\",\"tls\":\"\",\"x\":450,\"y\":160,\"wires\":[[\"40a2e5d8.976e6c\"]]},{\"id\":\"11916de2.fb6c0a\",\"type\":\"debug\",\"z\":\"23ccc58c.26b582\",\"name\":\"\",\"active\":true,\"console\":\"false\",\"complete\":\"false\",\"x\":690,\"y\":240,\"wires\":[]},{\"id\":\"c3e01383.ee175\",\"type\":\"template\",\"z\":\"23ccc58c.26b582\",\"name\":\"amateur\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"{'accel': [13], 'gyro': [20], 'temp': [25], 'humid': [58]}\\t\",\"x\":280,\"y\":100,\"wires\":[[\"81d9e766.6e82\"]]},{\"id\":\"c00d807a.6e942\",\"type\":\"template\",\"z\":\"23ccc58c.26b582\",\"name\":\"pros\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"{'accel': [0], 'gyro': [2], 'temp': [8], 'humid': [40]}\\t\",\"x\":270,\"y\":220,\"wires\":[[\"81d9e766.6e82\"]]},{\"id\":\"ba871882.501c9\",\"type\":\"template\",\"z\":\"23ccc58c.26b582\",\"name\":\"regular\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"{'accel': [5], 'gyro': [4], 'temp': [20], 'humid': [50]}\\t\",\"x\":270,\"y\":160,\"wires\":[[\"81d9e766.6e82\"]]},{\"id\":\"473e7329.e15e1c\",\"type\":\"inject\",\"z\":\"23ccc58c.26b582\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"x\":120,\"y\":220,\"wires\":[[\"c00d807a.6e942\"]]},{\"id\":\"ca48901b.3e3678\",\"type\":\"inject\",\"z\":\"23ccc58c.26b582\",\"name\":\"\",\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"x\":120,\"y\":160,\"wires\":[[\"ba871882.501c9\"]]},{\"id\":\"f662f04b.eb2808\",\"type\":\"template\",\"z\":\"23ccc58c.26b582\",\"name\":\"\u51fa\u529b\",\"field\":\"payload\",\"fieldType\":\"msg\",\"format\":\"handlebars\",\"syntax\":\"mustache\",\"template\":\"\u3042\u306a\u305f\u306f {{payload}} \u3067\u3059\u306d\uff01\",\"x\":530,\"y\":240,\"wires\":[[\"11916de2.fb6c0a\"]]},{\"id\":\"40a2e5d8.976e6c\",\"type\":\"function\",\"z\":\"23ccc58c.26b582\",\"name\":\"\u53d6\u308a\u51fa\u3057\",\"func\":\"var data = JSON.parse(msg.payload);\\nmsg.payload = data.result;\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"x\":620,\"y\":160,\"wires\":[[\"f662f04b.eb2808\"]]}]\n\n```\n\n\n# 3. \u5b9f\u884c\u3057\u307e\u3059\n\n1. `python train.py`\u3067\u5b66\u7fd2\u3055\u305b\u307e\u3059\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-31 15.43.41.png](https://qiita-image-store.s3.amazonaws.com/0/125842/6da6d173-35aa-76bf-1350-5ea5a8793826.png)\n\n2. `python server.py`\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u5b9f\u884c\u3057\u307e\u3059\n3. \u4e0a\u8a18\u306eNode-RED\u306e\u30d5\u30ed\u30fc\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3001amateur/regular/pros\u306e\u5224\u5b9a\u3092\u78ba\u8a8d\u3057\u307e\u3059\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-31 15.12.10.png](https://qiita-image-store.s3.amazonaws.com/0/125842/cb54d68d-5a2b-afe6-0a8e-d060d209c6a8.png)\n\n4. `python -m tensorflow.tensorboard --logdir=./logs`\u306a\u3069\u3067tensorboard\u3092\u7a3c\u50cd\u3057\u30d6\u30e9\u30a6\u30b6\u30676006\u30dd\u30fc\u30c8\u3078\u30a2\u30af\u30bb\u30b9\u3057\u3066\u5b66\u7fd2\u306e\u72b6\u6cc1\u306a\u3069\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002IP\u30a2\u30c9\u30ec\u30b9\u306fTenserFlow\u306eDocker\u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30d7\u30ed\u30a4\u306b\u3088\u308aBluemix\u304b\u3089\u63d0\u4f9b\u3055\u308c\u308bIP\u30a2\u30c9\u30ec\u30b9\u306e\u3046\u3061\u3001\u30d1\u30d6\u30ea\u30c3\u30afIP\u3092\u4f7f\u7528\u3057\u3066\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-31 15.11.26.png](https://qiita-image-store.s3.amazonaws.com/0/125842/6bf2a11d-af40-e359-d06c-03e562cdc3d7.png)\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-10-31 16.13.53.png](https://qiita-image-store.s3.amazonaws.com/0/125842/49f763ae-5758-3a6a-19fe-b60d9f56e2fe.png)\n\n### \u53c2\u8003\n\n[TensorFlow\u3092\u4f7f\u3063\u305f\u70ba\u66ff(FX)\u306e\u30c8\u30ec\u30fc\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb](http://qiita.com/jiji_platform/items/268377c542706e6f44b1)\u3092\u5927\u5909\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n", "tags": ["watsoniotplatform", "node-red", "IoT", "wiotp", "wiotp407"]}