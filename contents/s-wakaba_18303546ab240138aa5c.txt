{"context": " More than 1 year has passed since last update.\u524d\u56de\u306b\u88dc\u8db3\u3002\n\u524d\u56de\u306e\u4f8b\u3067\u3001\u8272\u3005\u306a\u578b\u3092\u8fd4\u3059\u95a2\u6570\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3060\u3063\u305f\u5834\u5408\u3001\u524d\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u4e0a\u624b\u304f\u884c\u304b\u306a\u3044\u3002\n\u305d\u3053\u3067\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\u3002\n\nsample_membfuncs.cpp\n#include <string>\n#include <iostream>\n\nstd::string get_functype(int) {\n    return \"You have returned an int value.\";\n}\n\nstd::string get_functype(double) {\n    return \"You have returned a double value.\";\n}\n\nstd::string get_functype(void) {\n    return \"You have returned nothing.\";\n}\n\nclass MyClass {\npublic:\n    int int_func(int n1, int n2) {\n        auto ret = n1 + n2;\n        std::cout << \"I will return \" << ret << \".\" << std::endl;\n        return ret;\n    }\n    double double_func(double ret) {\n        std::cout << \"I will return \" << ret << \".\" << std::endl;\n        return ret;\n    }\n    void void_func(void) {\n        std::cout << \"I will return nothing.\" << std::endl;\n    }\n};\n\n\ntemplate<typename RET>\nstruct get_functype_switch_helper {\n    template<typename CLS, typename... ARGS>\n    static auto x(CLS &obj, RET(CLS::*func)(ARGS...), ARGS... args) {\n        return get_functype((obj.*func)(args...));\n    }\n};\n\ntemplate<>\nstruct get_functype_switch_helper<void> {\n    template<typename CLS, typename... ARGS>\n    static auto x(CLS &obj, void(CLS::*func)(ARGS...), ARGS... args) {\n        (obj.*func)(args...);\n        return get_functype();\n    }\n};\n\ntemplate<typename CLS, typename FUNC, typename... ARGS>\ninline auto get_functype_switch(CLS &obj, FUNC func, ARGS... args) {\n    return get_functype_switch_helper<decltype((obj.*func)(args...))>::template x<CLS, ARGS...>(obj, func, args...);\n}\n\n\nint main(void) {\n    MyClass obj;\n    std::cout << get_functype_switch(obj, &MyClass::int_func, 30, 70) << std::endl;\n    std::cout << get_functype_switch(obj, &MyClass::double_func, 3.14) << std::endl;\n    std::cout << get_functype_switch(obj, &MyClass::void_func) << std::endl;\n    return 0;\n}\n\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u4ee5\u4e0a\u3002\n[\u524d\u56de](http://qiita.com/s-wakaba/items/91a67d841f66cc294861)\u306b\u88dc\u8db3\u3002\n\n\u524d\u56de\u306e\u4f8b\u3067\u3001\u8272\u3005\u306a\u578b\u3092\u8fd4\u3059\u95a2\u6570\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3060\u3063\u305f\u5834\u5408\u3001\u524d\u56de\u306e\u30b1\u30fc\u30b9\u3067\u306f\u4e0a\u624b\u304f\u884c\u304b\u306a\u3044\u3002\n\n\u305d\u3053\u3067\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\u3002\n\n```cpp:sample_membfuncs.cpp\n#include <string>\n#include <iostream>\n\nstd::string get_functype(int) {\n    return \"You have returned an int value.\";\n}\n\nstd::string get_functype(double) {\n    return \"You have returned a double value.\";\n}\n\nstd::string get_functype(void) {\n    return \"You have returned nothing.\";\n}\n\nclass MyClass {\npublic:\n    int int_func(int n1, int n2) {\n        auto ret = n1 + n2;\n        std::cout << \"I will return \" << ret << \".\" << std::endl;\n        return ret;\n    }\n    double double_func(double ret) {\n        std::cout << \"I will return \" << ret << \".\" << std::endl;\n        return ret;\n    }\n    void void_func(void) {\n        std::cout << \"I will return nothing.\" << std::endl;\n    }\n};\n\n\ntemplate<typename RET>\nstruct get_functype_switch_helper {\n    template<typename CLS, typename... ARGS>\n    static auto x(CLS &obj, RET(CLS::*func)(ARGS...), ARGS... args) {\n        return get_functype((obj.*func)(args...));\n    }\n};\n\ntemplate<>\nstruct get_functype_switch_helper<void> {\n    template<typename CLS, typename... ARGS>\n    static auto x(CLS &obj, void(CLS::*func)(ARGS...), ARGS... args) {\n        (obj.*func)(args...);\n        return get_functype();\n    }\n};\n\ntemplate<typename CLS, typename FUNC, typename... ARGS>\ninline auto get_functype_switch(CLS &obj, FUNC func, ARGS... args) {\n    return get_functype_switch_helper<decltype((obj.*func)(args...))>::template x<CLS, ARGS...>(obj, func, args...);\n}\n\n\nint main(void) {\n    MyClass obj;\n    std::cout << get_functype_switch(obj, &MyClass::int_func, 30, 70) << std::endl;\n    std::cout << get_functype_switch(obj, &MyClass::double_func, 3.14) << std::endl;\n    std::cout << get_functype_switch(obj, &MyClass::void_func) << std::endl;\n    return 0;\n}\n```\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u4ee5\u4e0a\u3002\n", "tags": ["C++", "C++11"]}