{"context": "\n\n\u4f55\u304c\u3057\u305f\u3044\u306e\u304b\nLINQ\u306eSelect\u306e\u64cd\u4f5c\u306b\u3001\u91cd\u3044\u51e6\u7406\u304c\u5165\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u6b8b\u5ff5\u306a\u304c\u3089Paralell.ForEach\u4f7f\u3063\u3066\u3082\u91cd\u3044Select\u3067\u8a70\u307e\u3063\u3066\u3057\u307e\u3063\u3066\u4e26\u5217\u5316\u304c\u3042\u3093\u307e\u308a\u3046\u307e\u304f\u884c\u304b\u306a\u3044\n\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n    internal class Program\n    {\n        internal static void Main()\n        {\n            IEnumerable<int> sequence = Enumerable.Range(0, 10)\n                .Select(x =>\n                {\n                    //\u91cd\u305f\u3044\u51e6\u7406\u306e\u4ee3\u7528\n                    if (x%2 == 0) Thread.Sleep(1000);\n                    return x + 100;\n                });\n\n            Console.WriteLine(\"Use foreach\");\n            Stopwatch chrono = new Stopwatch();\n\n            chrono.Start();\n            foreach (var i in sequence)\n            {\n                Console.WriteLine(i);\n            }\n            chrono.Stop();\n\n            Console.WriteLine(chrono.Elapsed);\n\n            Console.WriteLine();\n            Console.WriteLine(\"Use Parallel.ForEach\");\n            chrono.Restart();\n            Parallel.ForEach(sequence, x => Console.WriteLine(x));\n            chrono.Stop();\n\n            Console.WriteLine(chrono.Elapsed);\n        }\n    }\n}\n\n\n\u304b\u304b\u3063\u305f\u6642\u9593\u306f\u4ee5\u4e0b\u306e\u901a\u308a\nUse foreach\n00:00:05.0069716\n\nUse Parallel.ForEach\n00:00:05.0657797\n\n\n\u3053\u308c\u306f\u3001Paralell.ForEach\u3067\u306f\u3001body\u3067\u6e21\u3057\u305f\u51e6\u7406\u3092\u4e26\u5217\u5316\u3059\u308b\u3053\u3068\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u308b\u306e\u306b\u3001\u305d\u306e\u4e0a\u6d41\u306b\u3042\u308bSelect\u30e1\u30bd\u30c3\u30c9\u306e\u51e6\u7406\u304c\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u5b8c\u5168\u306b\u30b9\u30dd\u30a4\u30eb\u3055\u308c\u3066\u3044\u308b\u5f62\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u3053\u3044\u3064\u3092\u4f55\u3068\u304b\u3057\u3066\u9ad8\u901f\u5316\u3067\u304d\u306a\u3044\u304b\u3063\u3066\u306e\u304c\u3001\u4eca\u56de\u306e\u304a\u984c\n\n\u305d\u306e1\uff1a\u91cd\u305f\u3044\u51e6\u7406\u3092Paralell.Foreach\u5074\u306b\u6301\u3063\u3066\u884c\u304f\n\u30b3\u30ec\u306f\u975e\u5e38\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u4f8b\u3002\u91cd\u305f\u3044\u51e6\u7406\u3092\u4e26\u5217\u5316\u306e\u5185\u65b9\u306b\u66f8\u3044\u3066\u3057\u307e\u3048\u3070\u826f\u3044\u3058\u3083\u306a\u3044\uff01\u3063\u3066\u8003\u3048\u65b9\n\u66f8\u304d\u63db\u3048\u305f\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n    internal class Program\n    {\n        internal static void Main()\n        {\n\n            Func<int, int> process = x =>\n            {\n                if (x%2 == 0) Thread.Sleep(1000);\n                return x + 100;\n            };\n\n            IEnumerable<int> sequence = Enumerable.Range(0, 10)\n                .Select(x => process(x));\n\n            Console.WriteLine(\"Use foreach\");\n            Stopwatch chrono = new Stopwatch();\n\n            chrono.Start();\n            foreach (var i in sequence)\n            {\n                Console.WriteLine(i);\n            }\n            chrono.Stop();\n\n            Console.WriteLine(chrono.Elapsed);\n\n            Console.WriteLine();\n            Console.WriteLine(\"Use Parallel.ForEach\");\n            chrono.Restart();\n            Parallel.ForEach(Enumerable.Range(0,10), x =>\n            {\n                Console.WriteLine(process(x));\n            });\n            chrono.Stop();\n\n            Console.WriteLine(chrono.Elapsed);\n        }\n    }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\nUse foreach\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n00:00:05.0067171\n\nUse Parallel.ForEach\n103\n105\n101\n109\n107\n100\n106\n104\n102\n108\n00:00:01.0559463\n\n\u4e26\u5217\u5316\u304c\u52b9\u3044\u3066\u3001\u9ad8\u901f\u5316\u304c\u56f3\u3089\u308c\u3066\u3044\u308b\u53cd\u9762\u3001\u6295\u5165\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9806\u5e8f\u3068\u3001\u51fa\u529b\u3055\u308c\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9806\u5e8f\u304c\u4e00\u81f4\u3057\u306a\u3044\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u306e\u70b9\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n\n\u305d\u306e2\uff1aSelect\u306e\u4e2d\u8eab\u3092Task\u306b\u304f\u308b\u3093\u3067\u3057\u307e\u3046\n\u5148\u306e\u4f8b\u3067\u306f\u3001Parallel.ForEach\u306e\u65b9\u3078\u3001\u91cd\u3044\u51e6\u7406\u3092\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u4e26\u5217\u5316\u306e\u3046\u307e\u307f\u3092\u5f15\u304d\u51fa\u3057\u3066\u3044\u305f\u3002\n\u3051\u308c\u3069\u3001\u72b6\u6cc1\u306b\u3088\u3063\u3066\u306fSelect\u306e\u4e2d\u8eab\u3092\u79fb\u52d5\u3067\u304d\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u3002\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bSelect\u306e\u51e6\u7406\u305d\u306e\u3082\u306e\u3092Task\u306b\u3057\u3066\u3057\u307e\u3063\u3066\u3001\u51e6\u7406\u3059\u308b\u306e\u3082\u6709\u308a\u3058\u3083\u306a\u3044\u304b\u3068\u3002\n\u4f46\u3057\u3001\u305b\u3063\u304b\u304fTask\u306b\u3057\u3066\u3082\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u3059\u3063\u3054\u304f\u6b8b\u5ff5\u306a\u7d50\u679c\u306b\u306a\u308b\u3002\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n    internal class Program\n    {\n        internal static void Main()\n        {\n\n\n            IEnumerable<Task<int>> sequence = Enumerable.Range(0, 10)\n                .Select(async x =>\n                {\n                    if (x%2 == 0) await Task.Delay(1000);\n                    return x + 100;\n                } );\n\n            Console.WriteLine(\"Use foreach\");\n            Stopwatch chrono = new Stopwatch();\n\n            chrono.Start();\n            foreach (var task in sequence)\n            {\n                task.Wait();\n                Console.WriteLine(task.Result);\n            }\n            chrono.Stop();\n        }\n    }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\nUse foreach\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n00:00:05.0224940\n\n\n\u3061\u3087\u3063\u3068\u8003\u3048\u308c\u3070\u5f53\u305f\u308a\u524d\u3067\u3001\u305b\u3063\u304b\u304fTask\u306b\u3057\u305f\u306e\u306b\u3001foreach\u306e\u4e2d\u3067\u3001\u9010\u6b21\u5f85\u6a5f\u3092\u3057\u3066\u3057\u307e\u3063\u3066\u3001\u3046\u307e\u307f\u304c\u5b8c\u5168\u306b\u30b9\u30dd\u30a4\u30eb\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u305d\u306e2\uff0d1\uff1a\u914d\u5217\u3068\u304b\u30ea\u30b9\u30c8\u306b\u3057\u3066\u3057\u307e\u3063\u3066\u3001\u4e00\u62ec\u5f85\u6a5f\u3059\u308b\n\u9010\u6b21\u5f85\u6a5f\u3067\u3060\u3081\u306a\u3089\u3001\u3069\u3053\u304b\u3067\u30d7\u30ea\u30ed\u30fc\u30c9\u3057\u3066\u4e00\u62ec\u5f85\u6a5f\u3059\u308c\u3070\u826f\u3044\u3093\u3058\u3083\u306d\uff1f\u3063\u3066\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u4ee5\u4e0b\u306e\u4e8b\u4f8b\u3002\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n    internal class Program\n    {\n        internal static void Main()\n        {\n\n\n            IEnumerable<Task<int>> sequence = Enumerable.Range(0, 10)\n                .Select(async x =>\n                {\n                    if (x%2 == 0) await Task.Delay(1000);\n                    return x + 100;\n                } );\n\n            Stopwatch chrono = new Stopwatch();\n\n            chrono.Start();\n\n            var array = sequence.ToArray();\n\n            Task.WaitAll(array);\n\n\n            foreach (var task in array)\n            {\n                Console.WriteLine(task.Result);\n            }\n            chrono.Stop();\n            Console.WriteLine(chrono.Elapsed);\n\n        }\n    }\n}\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n00:00:01.0605011\n\n\u304d\u3061\u3093\u3068\u4e26\u5217\u5316\u3055\u308c\u3066\u308b\u3057\u3001\u3057\u304b\u3082\u9806\u5e8f\u304c\u4e00\u81f4\u3057\u3066\u3044\u3066\u30b3\u30ec\u306f\u30b3\u30ec\u3067\u3068\u3066\u3082\u4f7f\u3044\u3084\u3059\u3044\u65b9\u6cd5\u3060\u3068\u601d\u3046\u3002\n\u4f46\u3057\u3001\u4e00\u5ea6ToArray\u3067\u914d\u5217\u5316\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u8981\u7d20\u6570\u304c\u81a8\u5927\u3067\u3042\u3063\u305f\u308a\u3001\u7121\u9650\u306e\u5834\u5408\u3001\u3053\u306e\u65b9\u6cd5\u306f\u4f7f\u3048\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n\u305d\u306e2\uff0d2\uff1aParalell\u306e\u4e2d\u3067\u5f85\u6a5f\u3059\u308b\n\u8981\u7d20\u6570\u306e\u30b5\u30a4\u30ba\u304c\u3067\u304b\u3059\u304e\u3066ToArray\u3059\u308b\u30b3\u30c8\u304c\u51fa\u6765\u306a\u3044\u5834\u5408\u3001Paralell.ForEach\u306e\u4e2d\u3067\u5f85\u6a5f\u3057\u3066\u3057\u307e\u3046\u306e\u3082\u4e00\u3064\u306e\u65b9\u6cd5\u3060\u3068\u601d\u3046\u3002\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n    internal class Program\n    {\n        internal static void Main()\n        {\n\n\n            IEnumerable<Task<int>> sequence = Enumerable.Range(0, 10)\n                .Select(async x =>\n                {\n                    if (x%2 == 0) await Task.Delay(1000);\n                    return x + 100;\n                } );\n\n            Stopwatch chrono = new Stopwatch();\n\n            chrono.Start();\n\n            Parallel.ForEach(sequence, x =>\n            {\n                x.Wait();\n                Console.WriteLine(x.Result);\n            });\n\n\n\n\n            chrono.Stop();\n            Console.WriteLine(chrono.Elapsed);\n\n        }\n    }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n101\n105\n109\n103\n107\n108\n102\n104\n106\n100\n00:00:01.1083322\n\n\u9806\u5e8f\u304c\u4e0d\u4e00\u81f4\u306a\u306e\u306f\u5b8c\u4e86\u3057\u305f\u9806\u5e8f\u3067ForEach\u306ebody\u3092\u51e6\u7406\u3057\u3066\u3044\u308b\u305f\u3081\u3002\n\u30d7\u30ea\u30ed\u30fc\u30c9\u3067\u304d\u306a\u3044\u4e8b\u60c5\u304c\u3042\u308a\u3001\u9806\u4e0d\u540c\u3067\u304b\u307e\u308f\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u3053\u308c\u3067\u3082\u3044\u3044\u3068\u601d\u3046\u3002\n\n\u4f59\u8ac7\uff1aSelect\u3092\u8907\u6570\u56de\u9069\u7528\u3059\u308b\u65b9\u6cd5\nSelect\u3067Task\u5316\u3057\u305f\u30e2\u30ce\u3092\u3001\u3055\u3089\u306bSelect\u3057\u305f\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u306e\u304c\u30b9\u30de\u30fc\u30c8\u3058\u3083\u306a\u3044\u304b\u306a\u3068\u601d\u3063\u305f\u3002\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n    internal class Program\n    {\n        internal static void Main()\n        {\n            IEnumerable<Task<int>> sequence = Enumerable.Range(0, 10)\n                .Select(async x =>\n                {\n                    if (x%2 == 0) await Task.Delay(1000);\n                    return x + 100;\n                } );\n\n            IEnumerable<Task<string>> stringSeq = sequence.Select(x => x.ContinueWith(y => y.Result.ToString()));\n\n            Parallel.ForEach(stringSeq, x =>\n            {\n                x.Wait();\n                Console.WriteLine(x.Result);\n            });\n        }\n    }\n}\n\n#\u4f55\u304c\u3057\u305f\u3044\u306e\u304b\n\nLINQ\u306eSelect\u306e\u64cd\u4f5c\u306b\u3001\u91cd\u3044\u51e6\u7406\u304c\u5165\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u5834\u5408\u3001\u6b8b\u5ff5\u306a\u304c\u3089Paralell.ForEach\u4f7f\u3063\u3066\u3082\u91cd\u3044Select\u3067\u8a70\u307e\u3063\u3066\u3057\u307e\u3063\u3066\u4e26\u5217\u5316\u304c\u3042\u3093\u307e\u308a\u3046\u307e\u304f\u884c\u304b\u306a\u3044\n\n\n```csharp\n\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n\tinternal class Program\n\t{\n\t\tinternal static void Main()\n\t\t{\n\t\t\tIEnumerable<int> sequence = Enumerable.Range(0, 10)\n\t\t\t\t.Select(x =>\n\t\t\t\t{\n\t\t\t\t\t//\u91cd\u305f\u3044\u51e6\u7406\u306e\u4ee3\u7528\n\t\t\t\t\tif (x%2 == 0) Thread.Sleep(1000);\n\t\t\t\t\treturn x + 100;\n\t\t\t\t});\n\n\t\t\tConsole.WriteLine(\"Use foreach\");\n\t\t\tStopwatch chrono = new Stopwatch();\n\n\t\t\tchrono.Start();\n\t\t\tforeach (var i in sequence)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(i);\n\t\t\t}\n\t\t\tchrono.Stop();\n\n\t\t\tConsole.WriteLine(chrono.Elapsed);\n\n\t\t\tConsole.WriteLine();\n\t\t\tConsole.WriteLine(\"Use Parallel.ForEach\");\n\t\t\tchrono.Restart();\n\t\t\tParallel.ForEach(sequence, x => Console.WriteLine(x));\n\t\t\tchrono.Stop();\n\n\t\t\tConsole.WriteLine(chrono.Elapsed);\n\t\t}\n\t}\n}\n\n```\n\n\u304b\u304b\u3063\u305f\u6642\u9593\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n```\nUse foreach\n00:00:05.0069716\n\nUse Parallel.ForEach\n00:00:05.0657797\n\n```\n\n\u3053\u308c\u306f\u3001Paralell.ForEach\u3067\u306f\u3001body\u3067\u6e21\u3057\u305f\u51e6\u7406\u3092\u4e26\u5217\u5316\u3059\u308b\u3053\u3068\u3067\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5411\u4e0a\u3055\u305b\u308b\u306e\u306b\u3001\u305d\u306e\u4e0a\u6d41\u306b\u3042\u308bSelect\u30e1\u30bd\u30c3\u30c9\u306e\u51e6\u7406\u304c\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u5b8c\u5168\u306b\u30b9\u30dd\u30a4\u30eb\u3055\u308c\u3066\u3044\u308b\u5f62\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u3053\u3044\u3064\u3092\u4f55\u3068\u304b\u3057\u3066\u9ad8\u901f\u5316\u3067\u304d\u306a\u3044\u304b\u3063\u3066\u306e\u304c\u3001\u4eca\u56de\u306e\u304a\u984c\n\n#\u305d\u306e1\uff1a\u91cd\u305f\u3044\u51e6\u7406\u3092Paralell.Foreach\u5074\u306b\u6301\u3063\u3066\u884c\u304f\n\n\u30b3\u30ec\u306f\u975e\u5e38\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u4f8b\u3002\u91cd\u305f\u3044\u51e6\u7406\u3092\u4e26\u5217\u5316\u306e\u5185\u65b9\u306b\u66f8\u3044\u3066\u3057\u307e\u3048\u3070\u826f\u3044\u3058\u3083\u306a\u3044\uff01\u3063\u3066\u8003\u3048\u65b9\n\u66f8\u304d\u63db\u3048\u305f\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n\n```csharp\n\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n\tinternal class Program\n\t{\n\t\tinternal static void Main()\n\t\t{\n\n\t\t\tFunc<int, int> process = x =>\n\t\t\t{\n\t\t\t\tif (x%2 == 0) Thread.Sleep(1000);\n\t\t\t\treturn x + 100;\n\t\t\t};\n\n\t\t\tIEnumerable<int> sequence = Enumerable.Range(0, 10)\n\t\t\t\t.Select(x => process(x));\n\n\t\t\tConsole.WriteLine(\"Use foreach\");\n\t\t\tStopwatch chrono = new Stopwatch();\n\n\t\t\tchrono.Start();\n\t\t\tforeach (var i in sequence)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(i);\n\t\t\t}\n\t\t\tchrono.Stop();\n\n\t\t\tConsole.WriteLine(chrono.Elapsed);\n\n\t\t\tConsole.WriteLine();\n\t\t\tConsole.WriteLine(\"Use Parallel.ForEach\");\n\t\t\tchrono.Restart();\n\t\t\tParallel.ForEach(Enumerable.Range(0,10), x =>\n\t\t\t{\n\t\t\t\tConsole.WriteLine(process(x));\n\t\t\t});\n\t\t\tchrono.Stop();\n\n\t\t\tConsole.WriteLine(chrono.Elapsed);\n\t\t}\n\t}\n}\n\n```\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```\nUse foreach\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n00:00:05.0067171\n\nUse Parallel.ForEach\n103\n105\n101\n109\n107\n100\n106\n104\n102\n108\n00:00:01.0559463\n```\n\n\u4e26\u5217\u5316\u304c\u52b9\u3044\u3066\u3001\u9ad8\u901f\u5316\u304c\u56f3\u3089\u308c\u3066\u3044\u308b\u53cd\u9762\u3001\u6295\u5165\u3057\u305f\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9806\u5e8f\u3068\u3001\u51fa\u529b\u3055\u308c\u308b\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u9806\u5e8f\u304c\u4e00\u81f4\u3057\u306a\u3044\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u306e\u70b9\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3002\n\n#\u305d\u306e2\uff1aSelect\u306e\u4e2d\u8eab\u3092Task\u306b\u304f\u308b\u3093\u3067\u3057\u307e\u3046\n\n\u5148\u306e\u4f8b\u3067\u306f\u3001Parallel.ForEach\u306e\u65b9\u3078\u3001\u91cd\u3044\u51e6\u7406\u3092\u79fb\u52d5\u3055\u305b\u308b\u3053\u3068\u3067\u4e26\u5217\u5316\u306e\u3046\u307e\u307f\u3092\u5f15\u304d\u51fa\u3057\u3066\u3044\u305f\u3002\n\u3051\u308c\u3069\u3001\u72b6\u6cc1\u306b\u3088\u3063\u3066\u306fSelect\u306e\u4e2d\u8eab\u3092\u79fb\u52d5\u3067\u304d\u306a\u3044\u3053\u3068\u3082\u3042\u308b\u3002\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bSelect\u306e\u51e6\u7406\u305d\u306e\u3082\u306e\u3092Task\u306b\u3057\u3066\u3057\u307e\u3063\u3066\u3001\u51e6\u7406\u3059\u308b\u306e\u3082\u6709\u308a\u3058\u3083\u306a\u3044\u304b\u3068\u3002\n\u4f46\u3057\u3001\u305b\u3063\u304b\u304fTask\u306b\u3057\u3066\u3082\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\u3059\u3063\u3054\u304f\u6b8b\u5ff5\u306a\u7d50\u679c\u306b\u306a\u308b\u3002\n\n```csharp\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n\tinternal class Program\n\t{\n\t\tinternal static void Main()\n\t\t{\n\n\n\t\t\tIEnumerable<Task<int>> sequence = Enumerable.Range(0, 10)\n\t\t\t\t.Select(async x =>\n\t\t\t\t{\n\t\t\t\t\tif (x%2 == 0) await Task.Delay(1000);\n\t\t\t\t\treturn x + 100;\n\t\t\t\t} );\n\n\t\t\tConsole.WriteLine(\"Use foreach\");\n\t\t\tStopwatch chrono = new Stopwatch();\n\n\t\t\tchrono.Start();\n\t\t\tforeach (var task in sequence)\n\t\t\t{\n\t\t\t\ttask.Wait();\n\t\t\t\tConsole.WriteLine(task.Result);\n\t\t\t}\n\t\t\tchrono.Stop();\n\t\t}\n\t}\n}\n\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n```\n\nUse foreach\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n00:00:05.0224940\n\n```\n\u3061\u3087\u3063\u3068\u8003\u3048\u308c\u3070\u5f53\u305f\u308a\u524d\u3067\u3001\u305b\u3063\u304b\u304fTask\u306b\u3057\u305f\u306e\u306b\u3001foreach\u306e\u4e2d\u3067\u3001\u9010\u6b21\u5f85\u6a5f\u3092\u3057\u3066\u3057\u307e\u3063\u3066\u3001\u3046\u307e\u307f\u304c\u5b8c\u5168\u306b\u30b9\u30dd\u30a4\u30eb\u3055\u308c\u3066\u3044\u308b\u3002\n\n##\u305d\u306e2\uff0d1\uff1a\u914d\u5217\u3068\u304b\u30ea\u30b9\u30c8\u306b\u3057\u3066\u3057\u307e\u3063\u3066\u3001\u4e00\u62ec\u5f85\u6a5f\u3059\u308b\n\n\u9010\u6b21\u5f85\u6a5f\u3067\u3060\u3081\u306a\u3089\u3001\u3069\u3053\u304b\u3067\u30d7\u30ea\u30ed\u30fc\u30c9\u3057\u3066\u4e00\u62ec\u5f85\u6a5f\u3059\u308c\u3070\u826f\u3044\u3093\u3058\u3083\u306d\uff1f\u3063\u3066\u30a2\u30d7\u30ed\u30fc\u30c1\u304c\u4ee5\u4e0b\u306e\u4e8b\u4f8b\u3002\n\n\n```csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n\tinternal class Program\n\t{\n\t\tinternal static void Main()\n\t\t{\n\n\n\t\t\tIEnumerable<Task<int>> sequence = Enumerable.Range(0, 10)\n\t\t\t\t.Select(async x =>\n\t\t\t\t{\n\t\t\t\t\tif (x%2 == 0) await Task.Delay(1000);\n\t\t\t\t\treturn x + 100;\n\t\t\t\t} );\n\n\t\t\tStopwatch chrono = new Stopwatch();\n\n\t\t\tchrono.Start();\n\n\t\t\tvar array = sequence.ToArray();\n\n\t\t\tTask.WaitAll(array);\n\n\n\t\t\tforeach (var task in array)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(task.Result);\n\t\t\t}\n\t\t\tchrono.Stop();\n\t\t\tConsole.WriteLine(chrono.Elapsed);\n\n\t\t}\n\t}\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n```\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n00:00:01.0605011\n```\n\n\u304d\u3061\u3093\u3068\u4e26\u5217\u5316\u3055\u308c\u3066\u308b\u3057\u3001\u3057\u304b\u3082\u9806\u5e8f\u304c\u4e00\u81f4\u3057\u3066\u3044\u3066\u30b3\u30ec\u306f\u30b3\u30ec\u3067\u3068\u3066\u3082\u4f7f\u3044\u3084\u3059\u3044\u65b9\u6cd5\u3060\u3068\u601d\u3046\u3002\n\u4f46\u3057\u3001\u4e00\u5ea6ToArray\u3067\u914d\u5217\u5316\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u8981\u7d20\u6570\u304c\u81a8\u5927\u3067\u3042\u3063\u305f\u308a\u3001\u7121\u9650\u306e\u5834\u5408\u3001\u3053\u306e\u65b9\u6cd5\u306f\u4f7f\u3048\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n##\u305d\u306e2\uff0d2\uff1aParalell\u306e\u4e2d\u3067\u5f85\u6a5f\u3059\u308b\n\n\u8981\u7d20\u6570\u306e\u30b5\u30a4\u30ba\u304c\u3067\u304b\u3059\u304e\u3066ToArray\u3059\u308b\u30b3\u30c8\u304c\u51fa\u6765\u306a\u3044\u5834\u5408\u3001Paralell.ForEach\u306e\u4e2d\u3067\u5f85\u6a5f\u3057\u3066\u3057\u307e\u3046\u306e\u3082\u4e00\u3064\u306e\u65b9\u6cd5\u3060\u3068\u601d\u3046\u3002\n\n\n```csharp\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n\tinternal class Program\n\t{\n\t\tinternal static void Main()\n\t\t{\n\n\n\t\t\tIEnumerable<Task<int>> sequence = Enumerable.Range(0, 10)\n\t\t\t\t.Select(async x =>\n\t\t\t\t{\n\t\t\t\t\tif (x%2 == 0) await Task.Delay(1000);\n\t\t\t\t\treturn x + 100;\n\t\t\t\t} );\n\n\t\t\tStopwatch chrono = new Stopwatch();\n\n\t\t\tchrono.Start();\n\n\t\t\tParallel.ForEach(sequence, x =>\n\t\t\t{\n\t\t\t\tx.Wait();\n\t\t\t\tConsole.WriteLine(x.Result);\n\t\t\t});\n\n\n\n\n\t\t\tchrono.Stop();\n\t\t\tConsole.WriteLine(chrono.Elapsed);\n\n\t\t}\n\t}\n}\n\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n```\n101\n105\n109\n103\n107\n108\n102\n104\n106\n100\n00:00:01.1083322\n```\n\n\u9806\u5e8f\u304c\u4e0d\u4e00\u81f4\u306a\u306e\u306f\u5b8c\u4e86\u3057\u305f\u9806\u5e8f\u3067ForEach\u306ebody\u3092\u51e6\u7406\u3057\u3066\u3044\u308b\u305f\u3081\u3002\n\u30d7\u30ea\u30ed\u30fc\u30c9\u3067\u304d\u306a\u3044\u4e8b\u60c5\u304c\u3042\u308a\u3001\u9806\u4e0d\u540c\u3067\u304b\u307e\u308f\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u3053\u308c\u3067\u3082\u3044\u3044\u3068\u601d\u3046\u3002\n\n##\u4f59\u8ac7\uff1aSelect\u3092\u8907\u6570\u56de\u9069\u7528\u3059\u308b\u65b9\u6cd5\n\nSelect\u3067Task\u5316\u3057\u305f\u30e2\u30ce\u3092\u3001\u3055\u3089\u306bSelect\u3057\u305f\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308b\u306e\u304c\u30b9\u30de\u30fc\u30c8\u3058\u3083\u306a\u3044\u304b\u306a\u3068\u601d\u3063\u305f\u3002\n\n```csharp\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace TestBench\n{\n\tinternal class Program\n\t{\n\t\tinternal static void Main()\n\t\t{\n\t\t\tIEnumerable<Task<int>> sequence = Enumerable.Range(0, 10)\n\t\t\t\t.Select(async x =>\n\t\t\t\t{\n\t\t\t\t\tif (x%2 == 0) await Task.Delay(1000);\n\t\t\t\t\treturn x + 100;\n\t\t\t\t} );\n\n\t\t\tIEnumerable<Task<string>> stringSeq = sequence.Select(x => x.ContinueWith(y => y.Result.ToString()));\n\n\t\t\tParallel.ForEach(stringSeq, x =>\n\t\t\t{\n\t\t\t\tx.Wait();\n\t\t\t\tConsole.WriteLine(x.Result);\n\t\t\t});\n\t\t}\n\t}\n}\n```\n\n\n\n\n\n\n\n\n", "tags": ["C#6.0", "LINQ", ".NETFramework4.6.1"]}