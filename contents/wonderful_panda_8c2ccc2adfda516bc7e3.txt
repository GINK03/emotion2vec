{"context": " More than 1 year has passed since last update.\n\n\u3084\u308a\u305f\u3044\u3053\u3068\nyield return \u3092\u4f7f\u308f\u305a\u306b\u3001\u304b\u3064\u306a\u308b\u3079\u304f\u697d\u3057\u3066 IEnumerable<T> \u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u305f\u3044\n\n\u672c\u984c\nC#\u3001\u3067\u3001\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u3053\u308c\u3092Linq to Object\u306e\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306e\u4e2d\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nlinqex.cs\n/// <summary>\n/// \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u3001\u540c\u4e00\u306e\u30ad\u30fc\u3092\u6301\u3064\u8981\u7d20\u306e\u91cd\u8907\u3092\u53d6\u308a\u9664\u304f\n/// </summary>\npublic static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector)\n{\n    var done = new HashSet<TKey>();\n    foreach (var item in source)\n    {\n        if (done.Add(keySelector(item)))\n            yield return item;\n    }\n}\n\n\n\u3053\u308c\u3068\u540c\u3058\u3053\u3068\u3092 yield return \u3092\u4f7f\u308f\u305a\u306b\u5b9f\u73fe\u3057\u3088\u3046\u3068\u601d\u3046\u3068\u3001\u6b63\u653b\u6cd5\u3067\u306f IEnumerable<T> \u3068 IEnumerator<T> \u3092\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u3092\u305d\u308c\u305e\u308c\u7528\u610f\u3057\u3066\u3001\u3068\u3044\u3046\u611f\u3058\u3067\u7d50\u69cb\u9762\u5012\u304f\u3055\u3044\u3002\n\u3060\u3063\u305f\u3089\u3053\u3093\u306a\u611f\u3058\u306b\u3059\u308c\u3070\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u306e\uff1f\u3068\u601d\u3063\u3066\u3084\u3063\u3066\u307f\u308b\u3068\u3001\n\nlinqex.cs\npublic static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector)\n{\n    var done = new HashSet<TKey>();\n    return source.Where(x => done.Add(keySelector(x)));\n}\n\n\n\u4e00\u898b\u3046\u307e\u304f\u3044\u304f\u3093\u3060\u3051\u3069\u3001\u4e0b\u306e\u4f8b\u307f\u305f\u3044\u306b\u751f\u6210\u3055\u308c\u305f IEnumerable<T> \u3092\u8907\u6570\u56de\u5217\u6319\u3059\u308b\u3068\uff12\u56de\u76ee\u4ee5\u964d\u306e\u7d50\u679c\u304c\u304a\u304b\u3057\u304f\u306a\u308b\u3002\n\u3053\u3046\u3044\u3046\u4f7f\u3044\u65b9\u3092\u3059\u308b\u306e\u306f\u30ec\u30a2\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3042\u308b\u306e\u3060\u3051\u308c\u3069\u3002\n\ntest.cs\n[Test]\npublic void EnumerateTwice()\n{\n    var ret = new [] {1, 2, 3, 1, 2}.DistinctBy(x => x);\n    Assert.That(ret.ToArray(), Is.EqualTo(new [] {1, 2, 3}));  // PASS\n    Assert.That(ret.ToArray(), Is.EqualTo(new [] {1, 2, 3}));  // FAIL ret.ToArray() \u306f\u7a7a\u306e\u914d\u5217\u306b\u306a\u308b\n}\n\n\n\u8981\u306f\u521d\u671f\u5316(\u3053\u306e\u5834\u5408\u306fHashSet\u306e\u751f\u6210)\u51e6\u7406\u3092\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306e\u5916\u3067\u3084\u3063\u3066\u308b\u306e\u304c\u554f\u984c\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306b\u57cb\u3081\u8fbc\u3093\u3067\u3057\u307e\u3048\u3070\u3044\u3044\u8a33\u3067\u3001\u3053\u3093\u306a\u611f\u3058\u306b\u5909\u3048\u3066\u3084\u308b\u3068\u610f\u56f3\u3057\u305f\u3068\u304a\u308a\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308b\u3002\n\nlinqex.cs\npublic static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector)\n{\n    return new[] { source }.SelectMany(s =>\n        {\n            var done = new HashSet<TKey>();\n            return s.Where(x => done.Add(keySelector(x)));\n        });\n}\n\n\n\u5225\u306e\u4f8b\n\nlinqex.cs\n/// <summary>\n/// \u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u6307\u5b9a\u3055\u308c\u305f\u30b5\u30a4\u30ba\u3054\u3068\u306b\u5206\u5272\u3059\u308b.\n/// [1, 2, 3, 4, 5, 6, 7].EachSlice(3) -> [1, 2, 3], [4, 5, 6], [7]\n/// </summary>\npublic static IEnumerable<T[]> EachSlice<T>(this IEnumerable<T> source, int size)\n{\n    return new[] { source }.SelectMany(s =>\n        {\n            var r = Enumerable.Repeat(s.GetEnumerator(), size).ToArray();\n            return Enumerable.Repeat(0, int.MaxValue)\n                             .Select(_ => r.TakeWhile(e => e.MoveNext()).Select(e => e.Current).ToArray())\n                             .TakeWhile(arr => arr.Length > 0);\n        });\n}\n\n\n\n\u304a\u3068\u306a\u3057\u304fyield\u4f7f\u3048\u3070\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u306e\uff1f\n\uff83\uff9e\uff7d\uff96\uff88\uff70\nVisual Studio 2010\u3067VB\u3092\u66f8\u304f\u3068\u304b\u305d\u3046\u3044\u3046\u7e1b\u308a\u30d7\u30ec\u30a4\u3092\u5f37\u3044\u3089\u308c\u3066\u308b\u6642\u306b\u306f\u305d\u308c\u306a\u308a\u306b\u5f79\u306b\u7acb\u3064\u6c17\u304c\u3059\u308b\u3002\nC#\u306a\u3089\u3001\u307e\u3042yield\u4f7f\u3044\u307e\u3059\u3088\u306d\u3002\u306f\u3044\u3002\n## \u3084\u308a\u305f\u3044\u3053\u3068\n`yield return` \u3092\u4f7f\u308f\u305a\u306b\u3001\u304b\u3064\u306a\u308b\u3079\u304f\u697d\u3057\u3066 `IEnumerable<T>` \u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u305f\u3044\n\n## \u672c\u984c\n\nC#\u3001\u3067\u3001\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u3053\u308c\u3092Linq to Object\u306e\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306e\u4e2d\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```csharp:linqex.cs\n/// <summary>\n/// \u30b7\u30fc\u30b1\u30f3\u30b9\u304b\u3089\u3001\u540c\u4e00\u306e\u30ad\u30fc\u3092\u6301\u3064\u8981\u7d20\u306e\u91cd\u8907\u3092\u53d6\u308a\u9664\u304f\n/// </summary>\npublic static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector)\n{\n    var done = new HashSet<TKey>();\n    foreach (var item in source)\n    {\n        if (done.Add(keySelector(item)))\n            yield return item;\n    }\n}\n```\n\n\u3053\u308c\u3068\u540c\u3058\u3053\u3068\u3092 `yield return` \u3092\u4f7f\u308f\u305a\u306b\u5b9f\u73fe\u3057\u3088\u3046\u3068\u601d\u3046\u3068\u3001\u6b63\u653b\u6cd5\u3067\u306f `IEnumerable<T>` \u3068 `IEnumerator<T>` \u3092\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u3092\u305d\u308c\u305e\u308c\u7528\u610f\u3057\u3066\u3001\u3068\u3044\u3046\u611f\u3058\u3067\u7d50\u69cb\u9762\u5012\u304f\u3055\u3044\u3002\n\n\u3060\u3063\u305f\u3089\u3053\u3093\u306a\u611f\u3058\u306b\u3059\u308c\u3070\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u306e\uff1f\u3068\u601d\u3063\u3066\u3084\u3063\u3066\u307f\u308b\u3068\u3001\n\n```csharp:linqex.cs\npublic static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector)\n{\n    var done = new HashSet<TKey>();\n    return source.Where(x => done.Add(keySelector(x)));\n}\n```\n\n\u4e00\u898b\u3046\u307e\u304f\u3044\u304f\u3093\u3060\u3051\u3069\u3001\u4e0b\u306e\u4f8b\u307f\u305f\u3044\u306b\u751f\u6210\u3055\u308c\u305f `IEnumerable<T>` \u3092\u8907\u6570\u56de\u5217\u6319\u3059\u308b\u3068\uff12\u56de\u76ee\u4ee5\u964d\u306e\u7d50\u679c\u304c\u304a\u304b\u3057\u304f\u306a\u308b\u3002\n\u3053\u3046\u3044\u3046\u4f7f\u3044\u65b9\u3092\u3059\u308b\u306e\u306f\u30ec\u30a2\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3042\u308b\u306e\u3060\u3051\u308c\u3069\u3002\n\n```csharp:test.cs\n[Test]\npublic void EnumerateTwice()\n{\n    var ret = new [] {1, 2, 3, 1, 2}.DistinctBy(x => x);\n    Assert.That(ret.ToArray(), Is.EqualTo(new [] {1, 2, 3}));  // PASS\n    Assert.That(ret.ToArray(), Is.EqualTo(new [] {1, 2, 3}));  // FAIL ret.ToArray() \u306f\u7a7a\u306e\u914d\u5217\u306b\u306a\u308b\n}\n```\n\n\u8981\u306f\u521d\u671f\u5316(\u3053\u306e\u5834\u5408\u306fHashSet\u306e\u751f\u6210)\u51e6\u7406\u3092\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306e\u5916\u3067\u3084\u3063\u3066\u308b\u306e\u304c\u554f\u984c\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306b\u57cb\u3081\u8fbc\u3093\u3067\u3057\u307e\u3048\u3070\u3044\u3044\u8a33\u3067\u3001\u3053\u3093\u306a\u611f\u3058\u306b\u5909\u3048\u3066\u3084\u308b\u3068\u610f\u56f3\u3057\u305f\u3068\u304a\u308a\u306b\u52d5\u304f\u3088\u3046\u306b\u306a\u308b\u3002\n\n```csharp:linqex.cs\npublic static IEnumerable<T> DistinctBy<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector)\n{\n    return new[] { source }.SelectMany(s =>\n        {\n            var done = new HashSet<TKey>();\n            return s.Where(x => done.Add(keySelector(x)));\n        });\n}\n```\n\n\u5225\u306e\u4f8b\n\n```csharp:linqex.cs\n/// <summary>\n/// \u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u6307\u5b9a\u3055\u308c\u305f\u30b5\u30a4\u30ba\u3054\u3068\u306b\u5206\u5272\u3059\u308b.\n/// [1, 2, 3, 4, 5, 6, 7].EachSlice(3) -> [1, 2, 3], [4, 5, 6], [7]\n/// </summary>\npublic static IEnumerable<T[]> EachSlice<T>(this IEnumerable<T> source, int size)\n{\n    return new[] { source }.SelectMany(s =>\n        {\n            var r = Enumerable.Repeat(s.GetEnumerator(), size).ToArray();\n            return Enumerable.Repeat(0, int.MaxValue)\n                             .Select(_ => r.TakeWhile(e => e.MoveNext()).Select(e => e.Current).ToArray())\n                             .TakeWhile(arr => arr.Length > 0);\n        });\n}\n```\n\n## \u304a\u3068\u306a\u3057\u304fyield\u4f7f\u3048\u3070\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u306e\uff1f\n\uff83\uff9e\uff7d\uff96\uff88\uff70\nVisual Studio 2010\u3067VB\u3092\u66f8\u304f\u3068\u304b\u305d\u3046\u3044\u3046\u7e1b\u308a\u30d7\u30ec\u30a4\u3092\u5f37\u3044\u3089\u308c\u3066\u308b\u6642\u306b\u306f\u305d\u308c\u306a\u308a\u306b\u5f79\u306b\u7acb\u3064\u6c17\u304c\u3059\u308b\u3002\nC#\u306a\u3089\u3001\u307e\u3042yield\u4f7f\u3044\u307e\u3059\u3088\u306d\u3002\u306f\u3044\u3002\n\n", "tags": ["C#", "LINQ"]}