{"context": " More than 1 year has passed since last update.\n\n\u76ee\u7684\nWikipedia\u306e\u30a2\u30cb\u30e1\u8a18\u4e8b\u4e2d\u306e\u300c\u30a2\u30cb\u30e1\u30bf\u30a4\u30c8\u30eb\u300d\u3001\u300c\u76e3\u7763\u300d\u3001\u300c\u811a\u672c\u300d\u3001\u300c\u97f3\u697d\u300d\u3001\u300c\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5236\u4f5c\u300d\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\u30b3\u30fc\u30c9\nWikipedia.ts\ngetWikiInfo\u95a2\u6570\u306e\u5f15\u6570\u306b\u8a18\u4e8b\u30bf\u30a4\u30c8\u30eb\u3092\u5165\u308c\u308b\u3002\n\u8a18\u4e8b\u30bf\u30a4\u30c8\u30eb\u306f\u300cTypeScript\u3067Wikipedia API\u304b\u3089\u60c5\u5831\u53d6\u5f97\u300d\u3067\u53d6\u5f97\u3059\u308b\u3002\nJSON\u306e\u4e2d\u8eab\u306fWiki\u8a18\u6cd5\u306e\u6587\u5b57\u5217\u306a\u306e\u3067\u3001\u6b63\u898f\u8868\u73fe\u3067\u76ee\u7684\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002(\u30bf\u30b0\u306e\u524a\u9664\u3001<br>\u30bf\u30b0\u306b\u3088\u308b\u30ea\u30b9\u30c8\u5316\u3082\u884c\u3063\u3066\u3044\u308b)\nUnderscore.js\u306e\u304a\u304b\u3052\u3067\u914d\u5217\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fbf\u5229\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\nWikipedia.ts\nnamespace utils.Wikipedia {\n    const ENDPOINT = 'https://ja.wikipedia.org/w/api.php?'\n    const SEARCH_BASE_URL = ENDPOINT + 'action=query&list=search&format=json&srsearch='\n\n    export function getWikiInfo(title: string, success: (info: WikiInfo) => void, fail?: (jqXhr: JQueryXHR) => void) {\n        var url = INFO_BASE_URL + encodeURIComponent(title)\n        var xhr = $.ajax({\n            url: url,\n            type: 'GET',\n            dataType: 'jsonp',\n            jsonpCallback: 'callback'\n        })\n        xhr.then((json: ContentResponseJson) => {\n            var pages = json.query.pages\n            var page: PageJson = _.first(_.values(pages))\n            var revision = _.first(page.revisions)\n            var content = revision['*']\n            var tvAnimeInfobox = getTvAnimeInfoboxText(content)\n            success({\n                pageTitle: page.title,\n                title: split(getValue(tvAnimeInfobox, '\u30bf\u30a4\u30c8\u30eb')),\n                director: split(getValue(tvAnimeInfobox, '\u76e3\u7763')),\n                writer: split(getValue(tvAnimeInfobox, '\u811a\u672c')),\n                music: split(getValue(tvAnimeInfobox, '\u97f3\u697d')),\n                studio: split(getValue(tvAnimeInfobox, '\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5236\u4f5c'))\n            })\n        }, fail)\n    }\n\n    function getTvAnimeInfoboxText(input: string): string {\n        var regex = /\\{\\{Infobox animanga\\/TVAnime([\\s\\S]+?)\\}\\}/\n        return regex.exec(input)[1]\n    }\n\n    function getValue(text: string, key: string): string {\n        var regex = new RegExp('^\\\\| *' + key + ' *= *(.+?)$', 'm')\n        var execArray = regex.exec(text)\n        if (_.isEmpty(execArray)) {\n            return ''\n        } else {\n            return removeSquareBracket(execArray[1])\n        }\n    }\n\n    function removeSquareBracket(input: string) {\n        return input.replace(/\\[|\\]/g, '')\n    }\n\n    function removeHtmlTag(input: string) {\n        return input.replace(/<(?:\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '')\n    }\n\n    function split(input: string): Array<string> {\n        var splitted = input.split(/<br ?\\/?>/)\n        var tagRemoved = _.map(splitted, (value) => {\n            return removeHtmlTag(value)\n        })\n        return _.compact(tagRemoved)\n    }\n\n    interface ContentResponseJson {\n        query: {\n            pages: Object\n        }\n    }\n\n    interface PageJson {\n        pageId: number,\n        title: string,\n        revisions: Array<{\n            '*': string\n        }>\n    }\n\n    export interface WikiInfo {\n        pageTitle: string,\n        title: Array<string>,\n        director: Array<string>,\n        writer: Array<string>,\n        music: Array<string>,\n        studio: Array<string>\n    }\n}\n\n\n\n\u30b5\u30a4\u30c8\u306b\u53cd\u6620\n\u30a2\u30cb\u30e1\u60c5\u5831\u30b5\u30fc\u30d0\u30fc\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308bWeb\u30b5\u30a4\u30c8\u3067\u4f5c\u6210\u3057\u305fAnime Info Client\u306bWikipedia\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u30da\u30fc\u30b8\u3092\u8ffd\u52a0\u3057\u305f\u3002\n\n\nGithub\nAnimeInfoClient\n# \u76ee\u7684\nWikipedia\u306e\u30a2\u30cb\u30e1\u8a18\u4e8b\u4e2d\u306e\u300c\u30a2\u30cb\u30e1\u30bf\u30a4\u30c8\u30eb\u300d\u3001\u300c\u76e3\u7763\u300d\u3001\u300c\u811a\u672c\u300d\u3001\u300c\u97f3\u697d\u300d\u3001\u300c\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5236\u4f5c\u300d\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n# \u30b3\u30fc\u30c9\n[Wikipedia.ts](https://github.com/kumo2ji/AnimeInfoClient/blob/master/AnimeInfoClientType/Wikipedia.ts)\ngetWikiInfo\u95a2\u6570\u306e\u5f15\u6570\u306b\u8a18\u4e8b\u30bf\u30a4\u30c8\u30eb\u3092\u5165\u308c\u308b\u3002\n\u8a18\u4e8b\u30bf\u30a4\u30c8\u30eb\u306f\u300c[TypeScript\u3067Wikipedia API\u304b\u3089\u60c5\u5831\u53d6\u5f97](http://qiita.com/kumo2ji/items/acc917c6bf613f44c166)\u300d\u3067\u53d6\u5f97\u3059\u308b\u3002\nJSON\u306e\u4e2d\u8eab\u306fWiki\u8a18\u6cd5\u306e\u6587\u5b57\u5217\u306a\u306e\u3067\u3001\u6b63\u898f\u8868\u73fe\u3067\u76ee\u7684\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002(\u30bf\u30b0\u306e\u524a\u9664\u3001```<br>```\u30bf\u30b0\u306b\u3088\u308b\u30ea\u30b9\u30c8\u5316\u3082\u884c\u3063\u3066\u3044\u308b)\nUnderscore.js\u306e\u304a\u304b\u3052\u3067\u914d\u5217\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fbf\u5229\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u305f\u3002\n\n```ts:Wikipedia.ts\nnamespace utils.Wikipedia {\n    const ENDPOINT = 'https://ja.wikipedia.org/w/api.php?'\n    const SEARCH_BASE_URL = ENDPOINT + 'action=query&list=search&format=json&srsearch='\n\n    export function getWikiInfo(title: string, success: (info: WikiInfo) => void, fail?: (jqXhr: JQueryXHR) => void) {\n        var url = INFO_BASE_URL + encodeURIComponent(title)\n        var xhr = $.ajax({\n            url: url,\n            type: 'GET',\n            dataType: 'jsonp',\n            jsonpCallback: 'callback'\n        })\n        xhr.then((json: ContentResponseJson) => {\n            var pages = json.query.pages\n            var page: PageJson = _.first(_.values(pages))\n            var revision = _.first(page.revisions)\n            var content = revision['*']\n            var tvAnimeInfobox = getTvAnimeInfoboxText(content)\n            success({\n                pageTitle: page.title,\n                title: split(getValue(tvAnimeInfobox, '\u30bf\u30a4\u30c8\u30eb')),\n                director: split(getValue(tvAnimeInfobox, '\u76e3\u7763')),\n                writer: split(getValue(tvAnimeInfobox, '\u811a\u672c')),\n                music: split(getValue(tvAnimeInfobox, '\u97f3\u697d')),\n                studio: split(getValue(tvAnimeInfobox, '\u30a2\u30cb\u30e1\u30fc\u30b7\u30e7\u30f3\u5236\u4f5c'))\n            })\n        }, fail)\n    }\n\n    function getTvAnimeInfoboxText(input: string): string {\n        var regex = /\\{\\{Infobox animanga\\/TVAnime([\\s\\S]+?)\\}\\}/\n        return regex.exec(input)[1]\n    }\n\n    function getValue(text: string, key: string): string {\n        var regex = new RegExp('^\\\\| *' + key + ' *= *(.+?)$', 'm')\n        var execArray = regex.exec(text)\n        if (_.isEmpty(execArray)) {\n            return ''\n        } else {\n            return removeSquareBracket(execArray[1])\n        }\n    }\n\n    function removeSquareBracket(input: string) {\n        return input.replace(/\\[|\\]/g, '')\n    }\n\n    function removeHtmlTag(input: string) {\n        return input.replace(/<(?:\"[^\"]*\"|'[^']*'|[^'\">])*>/g, '')\n    }\n\n    function split(input: string): Array<string> {\n        var splitted = input.split(/<br ?\\/?>/)\n        var tagRemoved = _.map(splitted, (value) => {\n            return removeHtmlTag(value)\n        })\n        return _.compact(tagRemoved)\n    }\n\n    interface ContentResponseJson {\n        query: {\n            pages: Object\n        }\n    }\n\n    interface PageJson {\n        pageId: number,\n        title: string,\n        revisions: Array<{\n            '*': string\n        }>\n    }\n\n    export interface WikiInfo {\n        pageTitle: string,\n        title: Array<string>,\n        director: Array<string>,\n        writer: Array<string>,\n        music: Array<string>,\n        studio: Array<string>\n    }\n}\n```\n\n# \u30b5\u30a4\u30c8\u306b\u53cd\u6620\n[\u30a2\u30cb\u30e1\u60c5\u5831\u30b5\u30fc\u30d0\u30fc\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308bWeb\u30b5\u30a4\u30c8](http://qiita.com/kumo2ji/items/4f0e074223dbb9bfb7d6)\u3067\u4f5c\u6210\u3057\u305f[Anime Info Client](https://animeinfoclient.appspot.com/wikipedia.html)\u306bWikipedia\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u30da\u30fc\u30b8\u3092\u8ffd\u52a0\u3057\u305f\u3002\n![Wikipedia\u60c5\u5831.PNG](https://qiita-image-store.s3.amazonaws.com/0/56307/8347c066-d552-a212-e453-56987c70aa6e.png)\n\n# Github\n[AnimeInfoClient](https://github.com/kumo2ji/AnimeInfoClient)\n", "tags": ["TypeScript", "Wikipedia", "mediawiki", "Underscore.js"]}