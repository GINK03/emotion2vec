{"context": "\n\n\u306f\u3058\u3081\u306b\npython\u30673\u5c64\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5b9f\u88c5\u3057\uff0cXNOR\u306e\u8b58\u5225\u3092\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\n\u6570\u5f0f\u3082\u8f09\u305b\u305f\u306e\u3067\uff0c\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u8aad\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\n\u6559\u79d1\u66f8\u3068\u3057\u3066\u300e\u6df1\u5c64\u5b66\u7fd2\u300f\u3092\u4f7f\u3044\u307e\u3057\u305f\uff0e\n\u672c\u8a18\u4e8b\u306e\u69cb\u6210\n\n\u306f\u3058\u3081\u306b\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n\n\n\u91cd\u307f\u306e\u66f4\u65b0\n\u8aa4\u5dee\u9006\u4f1d\u64ad\n\n\nXNOR\npython\u3067\u306e\u5b9f\u88c5\n\u7d50\u679c\n\u304a\u308f\u308a\u306b\n\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u306f\uff0c\u4eba\u9593\u306e\u8133\u306e\u795e\u7d4c\u56de\u8def\u3092\u6a21\u3057\u305f\u30e2\u30c7\u30eb\u3067\u3059\uff0e\u3053\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3046\u3053\u3068\u3067\uff0c\u753b\u50cf\u8a8d\u8b58\u3084\u97f3\u58f0\u8a8d\u8b58\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\uff0e\n\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u5165\u529b\u5c64\uff0c\u4e2d\u9593\u5c64(1\u5c64)\uff0c\u51fa\u529b\u5c64\u306e3\u5c64\u69cb\u9020\u3067\u3059\uff0e\n\n\u91cd\u307f\u306e\u66f4\u65b0\n\u4e0b\u306e\u56f3\u3067\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\nl\u22121l\u22121l-1 \u5c64\u76ee\u306e iii \u756a\u76ee\u306e\u30e6\u30cb\u30c3\u30c8\u304b\u3089 lll \u5c64\u76ee\u306e jjj \u756a\u76ee\u306e\u30e6\u30cb\u30c3\u30c8\u3078\u306e\u91cd\u307f\u3092 w(l)jiw(l)jiw_{ji}^{(l)} \u3068\u3057\u307e\u3059\uff0e\n\u307e\u305f\uff0cl\u22121l\u22121l-1 \u5c64\u76ee\u306e iii \u756a\u76ee\u306e\u30e6\u30cb\u30c3\u30c8\u304c\u4fdd\u6301\u3057\u3066\u3044\u308b\u5024\u3092 u(l\u22121)iu(l\u22121)iu_{i}^{(l-1)} \u3068\u3057\u307e\u3059\uff0e\n\u6d3b\u6027\u5316\u95a2\u6570\u3068\u3057\u3066\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570 g(x)g(x)g(x) \u3092\u7528\u3044\u307e\u3059\uff0e\u5fae\u5206\u5024\u304c\u5fae\u5206\u3059\u308b\u524d\u306e\u5024\u3092\u4f7f\u3063\u3066\u6c42\u3081\u3089\u308c\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\uff0e\ng(x) = \\frac{1}{1 + \\exp(-x)} \\\\\ng'(x) = g(x)(1 - g(x))\ng(x)=11+exp(\u2212x)g\u2032(x)=g(x)(1\u2212g(x))g(x)=11+exp(\u2212x)g\u2032(x)=g(x)(1\u2212g(x)){g(x) = \\frac{1}{1 + \\exp(-x)} \\\\\ng'(x) = g(x)(1 - g(x))\n}\n2\u4e57\u8aa4\u5dee EnE_n \u3092\u76ee\u7684\u95a2\u6570\u3068\u3057\uff0c\u4e0b\u306e\u5f0f\u3067\u91cd\u307f\u3092\u66f4\u65b0\u3059\u308b\u3053\u3068\u3067\u6700\u5c0f\u5316\u3092\u56f3\u308a\u307e\u3059\uff0eEnE_n \u306f1\u30b5\u30f3\u30d7\u30eb\u306b\u3088\u3063\u3066\u751f\u3058\u308b\u8aa4\u5dee\u3067\uff0c\u3053\u306e EnE_n \u3092\u4f7f\u3063\u3066\u91cd\u307f\u306e\u66f4\u65b0\u3092\u3059\u308b\u65b9\u6cd5\u3092\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u3068\u547c\u3073\u307e\u3059\uff0e\n\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u306f\uff0c\u76ee\u7684\u95a2\u6570\u304c\u66f4\u65b0\u3055\u308c\u308b\u3054\u3068\u306b\u5909\u5316\u3059\u308b\u305f\u3081\uff0c\u5c40\u6240\u89e3\u306b\u30c8\u30e9\u30c3\u30d7\u3055\u308c\u306b\u304f\u304f\u306a\u308b\u3068\u3044\u3046\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\uff0e\n\u03f5\\epsilon \u306f\u5b66\u7fd2\u7387\u3068\u547c\u3070\u308c\uff0c\u5b66\u7fd2\u306e\u901f\u5ea6\u3092\u6c7a\u3081\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\uff0e\n\u504f\u5fae\u5206\u306e\u9805\u3092\u3069\u306e\u3088\u3046\u306b\u8a08\u7b97\u3059\u308b\u304b\u304c\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308a\u307e\u3059\uff0e\n{{w}_{ji}^{(l)}}_{new} = {w_{ji}^{(l)}}_{old} - \\epsilon\\frac{\\partial E_n}{\\partial {w_{ji}^{(l)}}_{old}}\nw(l)jinew=w(l)jiold\u2212\u03f5\u2202En\u2202w(l)jiold{{{w}_{ji}^{(l)}}_{new} = {w_{ji}^{(l)}}_{old} - \\epsilon\\frac{\\partial E_n}{\\partial {w_{ji}^{(l)}}_{old}}\n}\n\n\u8aa4\u5dee\u9006\u4f1d\u64ad\n\u3067\u306f\uff0c\u2202En\u2202w(l)ji\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}} \u306e\u6c42\u3081\u65b9\u3092\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u51fa\u529b\u5c64\u3068\u4e2d\u9593\u5c64\u3068\u3067\u6c42\u3081\u65b9\u304c\u82e5\u5e72\u7570\u306a\u308b\u306e\u3067\uff0c\u5206\u3051\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n< \u51fa\u529b\u5c64 >\n\u6559\u5e2b\u3092 tjt_j \u3067\u8868\u3057\u307e\u3059\uff0e2\u4e57\u8aa4\u5dee EnE_n \u3092\u51fa\u529b\u5c64\u306e\u91cd\u307f w(l)jiw_{ji}^{(l)} \u3067\u504f\u5fae\u5206\u3059\u308b\u3068\uff0c\n\\begin{align}\n\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}} &= \\frac{\\partial}{\\partial w_{ji}^{(l)}}\\frac{1}{2}(t_j - g(u_{j}^{(l)}))^{2} \\\\\n&= (t_j - g(u_{j}^{(l)}))\\cdot\\frac{\\partial}{\\partial w_{ji}^{(l)}}(t_j - g(u_{j}^{(l)})) \\\\\n&= (t_j - g(u_{j}^{(l)}))\\cdot\\frac{\\partial}{\\partial u_{j}^{(l)}}(t_j - g(u_{j}^{(l)}))\\cdot\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} \\\\\n\\\\\n&= (t_j - g(u_{j}^{(l)})\\cdot g'(u_{j}^{(l)})\\cdot g(u_{i}^{(l-1)}) \\\\\n\\\\\n&= (t_j - g(u_{j}^{(l)}))g(u_{j}^{(l)})(1 - g(u_{j}^{(l)}))g(u_{i}^{(l-1)})\n\\end{align}\n\u2202En\u2202w(l)ji=\u2202\u2202w(l)ji12(tj\u2212g(u(l)j))2=(tj\u2212g(u(l)j))\u22c5\u2202\u2202w(l)ji(tj\u2212g(u(l)j))=(tj\u2212g(u(l)j))\u22c5\u2202\u2202u(l)j(tj\u2212g(u(l)j))\u22c5\u2202u(l)j\u2202w(l)ji=(tj\u2212g(u(l)j)\u22c5g\u2032(u(l)j)\u22c5g(u(l\u22121)i)=(tj\u2212g(u(l)j))g(u(l)j)(1\u2212g(u(l)j))g(u(l\u22121)i){\\begin{align}\n\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}} &= \\frac{\\partial}{\\partial w_{ji}^{(l)}}\\frac{1}{2}(t_j - g(u_{j}^{(l)}))^{2} \\\\\n&= (t_j - g(u_{j}^{(l)}))\\cdot\\frac{\\partial}{\\partial w_{ji}^{(l)}}(t_j - g(u_{j}^{(l)})) \\\\\n&= (t_j - g(u_{j}^{(l)}))\\cdot\\frac{\\partial}{\\partial u_{j}^{(l)}}(t_j - g(u_{j}^{(l)}))\\cdot\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} \\\\\n\\\\\n&= (t_j - g(u_{j}^{(l)})\\cdot g'(u_{j}^{(l)})\\cdot g(u_{i}^{(l-1)}) \\\\\n\\\\\n&= (t_j - g(u_{j}^{(l)}))g(u_{j}^{(l)})(1 - g(u_{j}^{(l)}))g(u_{i}^{(l-1)})\n\\end{align}\n}\n< \u4e2d\u9593\u5c64 >\n2\u4e57\u8aa4\u5dee EnE_n \u3092\u4e2d\u9593\u5c64\u306e\u91cd\u307f w(l)jiw_{ji}^{(l)} \u3067\u504f\u5fae\u5206\u3059\u308b\u3068\uff0c\n\\begin{align}\n\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}} &= \\frac{\\partial E_n}{\\partial u_{j}^{(l)}}\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} \\\\\n\\\\\n&= \\delta_{j}^{(l)}\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}}\n\\end{align}\n\u2202En\u2202w(l)ji=\u2202En\u2202u(l)j\u2202u(l)j\u2202w(l)ji=\u03b4(l)j\u2202u(l)j\u2202w(l)ji{\\begin{align}\n\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}} &= \\frac{\\partial E_n}{\\partial u_{j}^{(l)}}\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} \\\\\n\\\\\n&= \\delta_{j}^{(l)}\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}}\n\\end{align}\n}\n\u53f3\u8fba\u7b2c1\u9805\u306f\uff0c\n\\begin{align}\n\\delta_{j}^{(l)} &= \\frac{\\partial E_n}{\\partial u_{j}^{(l)}} \\\\\n&= \\sum_{k}\\frac{\\partial E_n}{\\partial u_{k}^{(l+1)}}\\frac{\\partial u_{k}^{(l+1)}}{\\partial u_{j}^{(l)}} \\\\\n\\\\\n&= \\sum_{k}\\delta_{k}^{(l+1)}w_{kj}^{(l+1)}g'(u_{j}^{(l)}) \\\\\n\\\\\n&= \\Bigl(\\sum_{k}\\delta_{k}^{(l+1)}w_{kj}^{(l+1)}\\Bigr)g(u_{j}^{(l)})(1 - g(u_{j}^{(l)}))\n\\end{align}\n\u03b4(l)j=\u2202En\u2202u(l)j=\u2211k\u2202En\u2202u(l+1)k\u2202u(l+1)k\u2202u(l)j=\u2211k\u03b4(l+1)kw(l+1)kjg\u2032(u(l)j)=(\u2211k\u03b4(l+1)kw(l+1)kj)g(u(l)j)(1\u2212g(u(l)j)){\\begin{align}\n\\delta_{j}^{(l)} &= \\frac{\\partial E_n}{\\partial u_{j}^{(l)}} \\\\\n&= \\sum_{k}\\frac{\\partial E_n}{\\partial u_{k}^{(l+1)}}\\frac{\\partial u_{k}^{(l+1)}}{\\partial u_{j}^{(l)}} \\\\\n\\\\\n&= \\sum_{k}\\delta_{k}^{(l+1)}w_{kj}^{(l+1)}g'(u_{j}^{(l)}) \\\\\n\\\\\n&= \\Bigl(\\sum_{k}\\delta_{k}^{(l+1)}w_{kj}^{(l+1)}\\Bigr)g(u_{j}^{(l)})(1 - g(u_{j}^{(l)}))\n\\end{align}\n}\n\u53f3\u8fba\u7b2c2\u9805\u306f\uff0c\n\\begin{align}\n\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} &= g(u_{i}^{(l-1)})\n\\end{align}\n\u2202u(l)j\u2202w(l)ji=g(u(l\u22121)i){\\begin{align}\n\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} &= g(u_{i}^{(l-1)})\n\\end{align}\n}\n\u4ee5\u4e0a\u3088\u308a\uff0c\n\\begin{align}\n\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}} &= \\delta_{j}^{(l)}\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} \\\\\n\\\\\n&= \\Bigl(\\sum_{k}\\delta_{k}^{(l+1)}w_{kj}^{(l+1)}\\Bigr)g(u_{j}^{(l)})(1 - g(u_{j}^{(l)}))g(u_{i}^{(l-1)})\n\\end{align}\n\u2202En\u2202w(l)ji=\u03b4(l)j\u2202u(l)j\u2202w(l)ji=(\u2211k\u03b4(l+1)kw(l+1)kj)g(u(l)j)(1\u2212g(u(l)j))g(u(l\u22121)i){\\begin{align}\n\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}} &= \\delta_{j}^{(l)}\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} \\\\\n\\\\\n&= \\Bigl(\\sum_{k}\\delta_{k}^{(l+1)}w_{kj}^{(l+1)}\\Bigr)g(u_{j}^{(l)})(1 - g(u_{j}^{(l)}))g(u_{i}^{(l-1)})\n\\end{align}\n}\n\u4e2d\u9593\u5c64 ll \u306e\u91cd\u307f\u3092\u66f4\u65b0\u3059\u308b\u3068\u304d\u306f\uff0c\u305d\u306e\u6b21\u306e\u5c64 l+1l+1 \u306e \u03b4(l+1)k\\delta_{k}^{(l+1)} \u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\uff0e\n\u51fa\u529b\u5c64\u3067\u306e \u03b4\\delta \u306f\uff0c\u51fa\u529b\u5024\u3068\u6559\u5e2b\u306e\u5dee\u3068\u3057\u3066\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\uff0c\u3053\u308c\u3092\u51fa\u529b\u5c64\u304b\u3089\u5165\u529b\u5c64\u306e\u65b9\u5411\u306b\u9806\u756a\u306b\u4f1d\u64ad\u3055\u305b\u308b\u3053\u3068\u3067\uff0c\u4e2d\u9593\u5c64\u306e\u91cd\u307f\u3092\u66f4\u65b0\u3057\u307e\u3059\uff0e\u3053\u308c\u304c\u8aa4\u5dee\u9006\u4f1d\u64ad\u3068\u547c\u3070\u308c\u308b\u6240\u4ee5\u3067\u3059\uff0e\n\nXNOR\nXNOR\u306f\u5165\u529b\u5024\u304c\u7b49\u3057\u3044\u3068\u304d 11 \u3092\u51fa\u529b\u3057\uff0c\u5165\u529b\u5024\u304c\u7570\u306a\u308b\u3068\u304d 00 \u3092\u51fa\u529b\u3057\u307e\u3059\uff0e\u3053\u308c\u306f\u7dda\u5f62\u8b58\u5225\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\uff0e\n\n\n\nx1x_1\nx2x_2\ntt\n\n\n\n\n0\n0\n1\n\n\n0\n1\n0\n\n\n1\n0\n0\n\n\n1\n1\n1\n\n\n\n\n\npython\u3067\u306e\u5b9f\u88c5\nXNOR\u3092\u8b58\u5225\u3059\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\uff0e\n\u4e2d\u9593\u5c64\u306e\u6570\u306f1\u3064\uff0c\u4e2d\u9593\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u306e\u6570\u306f2\u3064\u306b\u3057\u3066\u3044\u307e\u3059\uff0e\u5b66\u7fd2\u7387 \u03f5=0.1\\epsilon = 0.1\uff0c\u30e2\u30e1\u30f3\u30bf\u30e0\u306e\u4fc2\u6570 \u03bc=0.9\\mu = 0.9 \u3068\u3057\u3066\u3044\u307e\u3059\uff0e\n(\u30e2\u30e1\u30f3\u30bf\u30e0\u306f\u53ce\u675f\u6027\u80fd\u3092\u5411\u4e0a\u3055\u305b\u308b\u65b9\u6cd5\u306e\u4e00\u3064\u3067\uff0c\u91cd\u307f\u306e\u4fee\u6b63\u91cf\u306b\uff0c\u524d\u56de\u306e\u91cd\u307f\u306e\u4fee\u6b63\u91cf\u306b\u4fc2\u6570\u3092\u304b\u3051\u305f\u3082\u306e\u3092\u52a0\u7b97\u3057\u307e\u3059\uff0e)\n\nneuralnetwork.py\nimport numpy\nimport math\nimport random\nfrom matplotlib import pyplot\n\nclass Neural:\n\n    # constructor\n    def __init__(self, n_input, n_hidden, n_output):\n        self.hidden_weight = numpy.random.random_sample((n_hidden, n_input + 1))\n        self.output_weight = numpy.random.random_sample((n_output, n_hidden + 1))\n        self.hidden_momentum = numpy.zeros((n_hidden, n_input + 1))\n        self.output_momentum = numpy.zeros((n_output, n_hidden + 1))\n\n\n# public method\n    def train(self, X, T, epsilon, mu, epoch):\n        self.error = numpy.zeros(epoch)\n        N = X.shape[0]\n        for epo in range(epoch):\n            for i in range(N):\n                x = X[i, :]\n                t = T[i, :]\n\n                self.__update_weight(x, t, epsilon, mu)\n\n            self.error[epo] = self.__calc_error(X, T)\n\n\n    def predict(self, X):\n        N = X.shape[0]\n        C = numpy.zeros(N).astype('int')\n        Y = numpy.zeros((N, X.shape[1]))\n        for i in range(N):\n            x = X[i, :]\n            z, y = self.__forward(x)\n\n            Y[i] = y\n            C[i] = y.argmax()\n\n        return (C, Y)\n\n\n    def error_graph(self):\n        pyplot.ylim(0.0, 2.0)\n        pyplot.plot(numpy.arange(0, self.error.shape[0]), self.error)\n        pyplot.show()\n\n\n# private method\n    def __sigmoid(self, arr):\n        return numpy.vectorize(lambda x: 1.0 / (1.0 + math.exp(-x)))(arr)\n\n\n    def __forward(self, x):\n        # z: output in hidden layer, y: output in output layer\n        z = self.__sigmoid(self.hidden_weight.dot(numpy.r_[numpy.array([1]), x]))\n        y = self.__sigmoid(self.output_weight.dot(numpy.r_[numpy.array([1]), z]))\n\n        return (z, y)\n\n    def __update_weight(self, x, t, epsilon, mu):\n        z, y = self.__forward(x)\n\n        # update output_weight\n        output_delta = (y - t) * y * (1.0 - y)\n        _output_weight = self.output_weight\n        self.output_weight -= epsilon * output_delta.reshape((-1, 1)) * numpy.r_[numpy.array([1]), z] - mu * self.output_momentum\n        self.output_momentum = self.output_weight - _output_weight\n\n        # update hidden_weight\n        hidden_delta = (self.output_weight[:, 1:].T.dot(output_delta)) * z * (1.0 - z)\n        _hidden_weight = self.hidden_weight\n        self.hidden_weight -= epsilon * hidden_delta.reshape((-1, 1)) * numpy.r_[numpy.array([1]), x]\n        self.hidden_momentum = self.hidden_weight - _hidden_weight\n\n\n    def __calc_error(self, X, T):\n        N = X.shape[0]\n        err = 0.0\n        for i in range(N):\n            x = X[i, :]\n            t = T[i, :]\n\n            z, y = self.__forward(x)\n            err += (y - t).dot((y - t).reshape((-1, 1))) / 2.0\n\n        return err\n\n\n\nmain.py\nfrom neuralnetwork import *\n\nif __name__ == '__main__':\n\n    X = numpy.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n    T = numpy.array([[1, 0], [0, 1], [0, 1], [1, 0]])\n    N = X.shape[0] # number of data\n\n    input_size = X.shape[1]\n    hidden_size = 2\n    output_size = 2\n    epsilon = 0.1\n    mu = 0.9\n    epoch = 10000\n\n    nn = Neural(input_size, hidden_size, output_size)\n    nn.train(X, T, epsilon, mu, epoch)\n    nn.error_graph()\n\n    C, Y = nn.predict(X)\n\n    for i in range(N):\n        x = X[i, :]\n        y = Y[i, :]\n        c = C[i]\n\n        print x\n        print y\n        print c\n        print \"\"\n\n\n\n\u7d50\u679c\n\u6b63\u3057\u304f\u8b58\u5225\u3067\u304d\u3066\u3044\u307e\u3059\uff0e\n\n\n\nx1x_1\nx2x_2\ntt\nyy\n\n\n\n\n0\n0\n[ 1, 0 ]\n[ 0.92598739, 0.07297757 ]\n\n\n0\n1\n[ 0, 1 ]\n[ 0.06824915, 0.93312514 ]\n\n\n1\n0\n[ 0, 1 ]\n[ 0.06828438, 0.93309010 ]\n\n\n1\n1\n[ 1, 0 ]\n[ 0.92610205, 0.07220633 ]\n\n\n\n\u8aa4\u5dee\u304c\u6e1b\u5c11\u3057\u3066\u3044\u304f\u69d8\u5b50\u3092\u30b0\u30e9\u30d5\u306b\u3057\u307e\u3057\u305f\uff0e\u6a2a\u8ef8\u304c\u30a8\u30dd\u30c3\u30af\u6570\uff0c\u7e26\u8ef8\u304c\u8aa4\u5dee\u3067\u3059\uff0e\n\n\n\u304a\u308f\u308a\u306b\n3\u5c64\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5b9f\u88c5\u3057\uff0cXNOR\u3092\u8b58\u5225\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\uff0e\n\u5b66\u7fd2\u306e\u30c8\u30ea\u30c3\u30af(\u91cd\u307f\u306e\u521d\u671f\u5024\u306e\u6c7a\u5b9a\u65b9\u6cd5\uff0c\u5b66\u7fd2\u7387\u306e\u6c7a\u5b9a\u65b9\u6cd5\uff0cAdaGrad\uff0c\u30e2\u30e1\u30f3\u30bf\u30e0)\u306a\u3069\u52c9\u5f37\u3059\u3079\u304d\u3053\u3068\u306f\u307e\u3060\u307e\u3060\u3042\u308a\u307e\u3059\u304c\uff0c\u4e00\u65e6\u3053\u308c\u3067\u7d42\u308f\u308a\u306b\u3057\u307e\u3059\uff0e\n# \u306f\u3058\u3081\u306b\n\npython\u30673\u5c64\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5b9f\u88c5\u3057\uff0cXNOR\u306e\u8b58\u5225\u3092\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\n\u6570\u5f0f\u3082\u8f09\u305b\u305f\u306e\u3067\uff0c\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u8aad\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\n\u6559\u79d1\u66f8\u3068\u3057\u3066[\u300e\u6df1\u5c64\u5b66\u7fd2\u300f](http://www.amazon.co.jp/\u6df1\u5c64\u5b66\u7fd2-\u6a5f\u68b0\u5b66\u7fd2\u30d7\u30ed\u30d5\u30a7\u30c3\u30b7\u30e7\u30ca\u30eb\u30b7\u30ea\u30fc\u30ba-\u5ca1\u8c37-\u8cb4\u4e4b/dp/4061529021)\u3092\u4f7f\u3044\u307e\u3057\u305f\uff0e\n\n\u672c\u8a18\u4e8b\u306e\u69cb\u6210\n\n* \u306f\u3058\u3081\u306b\n* \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n    * \u91cd\u307f\u306e\u66f4\u65b0\n    * \u8aa4\u5dee\u9006\u4f1d\u64ad\n* XNOR\n* python\u3067\u306e\u5b9f\u88c5\n* \u7d50\u679c\n* \u304a\u308f\u308a\u306b\n\n\n# \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u306f\uff0c\u4eba\u9593\u306e\u8133\u306e\u795e\u7d4c\u56de\u8def\u3092\u6a21\u3057\u305f\u30e2\u30c7\u30eb\u3067\u3059\uff0e\u3053\u306e\u30e2\u30c7\u30eb\u3092\u4f7f\u3046\u3053\u3068\u3067\uff0c\u753b\u50cf\u8a8d\u8b58\u3084\u97f3\u58f0\u8a8d\u8b58\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\uff0e\n\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306f\u5165\u529b\u5c64\uff0c\u4e2d\u9593\u5c64(1\u5c64)\uff0c\u51fa\u529b\u5c64\u306e3\u5c64\u69cb\u9020\u3067\u3059\uff0e\n\n## \u91cd\u307f\u306e\u66f4\u65b0\n\n\u4e0b\u306e\u56f3\u3067\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n<img width=360 alt=\"neu.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/82527/8fb0bd49-0068-c66e-ebb8-c7c1e91cfbdf.png\">\n\n$l-1$ \u5c64\u76ee\u306e $i$ \u756a\u76ee\u306e\u30e6\u30cb\u30c3\u30c8\u304b\u3089 $l$ \u5c64\u76ee\u306e $j$ \u756a\u76ee\u306e\u30e6\u30cb\u30c3\u30c8\u3078\u306e\u91cd\u307f\u3092 $w_{ji}^{(l)}$ \u3068\u3057\u307e\u3059\uff0e\n\u307e\u305f\uff0c$l-1$ \u5c64\u76ee\u306e $i$ \u756a\u76ee\u306e\u30e6\u30cb\u30c3\u30c8\u304c\u4fdd\u6301\u3057\u3066\u3044\u308b\u5024\u3092 $u_{i}^{(l-1)}$ \u3068\u3057\u307e\u3059\uff0e\n\u6d3b\u6027\u5316\u95a2\u6570\u3068\u3057\u3066\u30b7\u30b0\u30e2\u30a4\u30c9\u95a2\u6570 $g(x)$ \u3092\u7528\u3044\u307e\u3059\uff0e\u5fae\u5206\u5024\u304c\u5fae\u5206\u3059\u308b\u524d\u306e\u5024\u3092\u4f7f\u3063\u3066\u6c42\u3081\u3089\u308c\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\uff0e\n\n```math\ng(x) = \\frac{1}{1 + \\exp(-x)} \\\\\ng'(x) = g(x)(1 - g(x))\n```\n\n2\u4e57\u8aa4\u5dee $E_n$ \u3092\u76ee\u7684\u95a2\u6570\u3068\u3057\uff0c\u4e0b\u306e\u5f0f\u3067\u91cd\u307f\u3092\u66f4\u65b0\u3059\u308b\u3053\u3068\u3067\u6700\u5c0f\u5316\u3092\u56f3\u308a\u307e\u3059\uff0e$E_n$ \u306f1\u30b5\u30f3\u30d7\u30eb\u306b\u3088\u3063\u3066\u751f\u3058\u308b\u8aa4\u5dee\u3067\uff0c\u3053\u306e $E_n$ \u3092\u4f7f\u3063\u3066\u91cd\u307f\u306e\u66f4\u65b0\u3092\u3059\u308b\u65b9\u6cd5\u3092\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u3068\u547c\u3073\u307e\u3059\uff0e\n\u78ba\u7387\u7684\u52fe\u914d\u964d\u4e0b\u6cd5\u306f\uff0c\u76ee\u7684\u95a2\u6570\u304c\u66f4\u65b0\u3055\u308c\u308b\u3054\u3068\u306b\u5909\u5316\u3059\u308b\u305f\u3081\uff0c\u5c40\u6240\u89e3\u306b\u30c8\u30e9\u30c3\u30d7\u3055\u308c\u306b\u304f\u304f\u306a\u308b\u3068\u3044\u3046\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\uff0e\n$\\epsilon$ \u306f\u5b66\u7fd2\u7387\u3068\u547c\u3070\u308c\uff0c\u5b66\u7fd2\u306e\u901f\u5ea6\u3092\u6c7a\u3081\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3059\uff0e\n\u504f\u5fae\u5206\u306e\u9805\u3092\u3069\u306e\u3088\u3046\u306b\u8a08\u7b97\u3059\u308b\u304b\u304c\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308a\u307e\u3059\uff0e\n\n```math\n{{w}_{ji}^{(l)}}_{new} = {w_{ji}^{(l)}}_{old} - \\epsilon\\frac{\\partial E_n}{\\partial {w_{ji}^{(l)}}_{old}}\n```\n\n## \u8aa4\u5dee\u9006\u4f1d\u64ad\n\n\u3067\u306f\uff0c$\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}}$ \u306e\u6c42\u3081\u65b9\u3092\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u51fa\u529b\u5c64\u3068\u4e2d\u9593\u5c64\u3068\u3067\u6c42\u3081\u65b9\u304c\u82e5\u5e72\u7570\u306a\u308b\u306e\u3067\uff0c\u5206\u3051\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n**< \u51fa\u529b\u5c64 >**\n\u6559\u5e2b\u3092 $t_j$ \u3067\u8868\u3057\u307e\u3059\uff0e2\u4e57\u8aa4\u5dee $E_n$ \u3092\u51fa\u529b\u5c64\u306e\u91cd\u307f $w_{ji}^{(l)}$ \u3067\u504f\u5fae\u5206\u3059\u308b\u3068\uff0c\n\n```math\n\\begin{align}\n\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}} &= \\frac{\\partial}{\\partial w_{ji}^{(l)}}\\frac{1}{2}(t_j - g(u_{j}^{(l)}))^{2} \\\\\n&= (t_j - g(u_{j}^{(l)}))\\cdot\\frac{\\partial}{\\partial w_{ji}^{(l)}}(t_j - g(u_{j}^{(l)})) \\\\\n&= (t_j - g(u_{j}^{(l)}))\\cdot\\frac{\\partial}{\\partial u_{j}^{(l)}}(t_j - g(u_{j}^{(l)}))\\cdot\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} \\\\\n\\\\\n&= (t_j - g(u_{j}^{(l)})\\cdot g'(u_{j}^{(l)})\\cdot g(u_{i}^{(l-1)}) \\\\\n\\\\\n&= (t_j - g(u_{j}^{(l)}))g(u_{j}^{(l)})(1 - g(u_{j}^{(l)}))g(u_{i}^{(l-1)})\n\\end{align}\n```\n\n**< \u4e2d\u9593\u5c64 >**\n2\u4e57\u8aa4\u5dee $E_n$ \u3092\u4e2d\u9593\u5c64\u306e\u91cd\u307f $w_{ji}^{(l)}$ \u3067\u504f\u5fae\u5206\u3059\u308b\u3068\uff0c\n\n```math\n\\begin{align}\n\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}} &= \\frac{\\partial E_n}{\\partial u_{j}^{(l)}}\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} \\\\\n\\\\\n&= \\delta_{j}^{(l)}\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}}\n\\end{align}\n```\n\n\u53f3\u8fba\u7b2c1\u9805\u306f\uff0c\n\n```math\n\\begin{align}\n\\delta_{j}^{(l)} &= \\frac{\\partial E_n}{\\partial u_{j}^{(l)}} \\\\\n&= \\sum_{k}\\frac{\\partial E_n}{\\partial u_{k}^{(l+1)}}\\frac{\\partial u_{k}^{(l+1)}}{\\partial u_{j}^{(l)}} \\\\\n\\\\\n&= \\sum_{k}\\delta_{k}^{(l+1)}w_{kj}^{(l+1)}g'(u_{j}^{(l)}) \\\\\n\\\\\n&= \\Bigl(\\sum_{k}\\delta_{k}^{(l+1)}w_{kj}^{(l+1)}\\Bigr)g(u_{j}^{(l)})(1 - g(u_{j}^{(l)}))\n\\end{align}\n```\n\n\u53f3\u8fba\u7b2c2\u9805\u306f\uff0c\n\n```math\n\\begin{align}\n\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} &= g(u_{i}^{(l-1)})\n\\end{align}\n```\n\n\u4ee5\u4e0a\u3088\u308a\uff0c\n\n```math\n\\begin{align}\n\\frac{\\partial E_n}{\\partial w_{ji}^{(l)}} &= \\delta_{j}^{(l)}\\frac{\\partial u_{j}^{(l)}}{\\partial w_{ji}^{(l)}} \\\\\n\\\\\n&= \\Bigl(\\sum_{k}\\delta_{k}^{(l+1)}w_{kj}^{(l+1)}\\Bigr)g(u_{j}^{(l)})(1 - g(u_{j}^{(l)}))g(u_{i}^{(l-1)})\n\\end{align}\n```\n\n\u4e2d\u9593\u5c64 $l$ \u306e\u91cd\u307f\u3092\u66f4\u65b0\u3059\u308b\u3068\u304d\u306f\uff0c\u305d\u306e\u6b21\u306e\u5c64 $l+1$ \u306e $\\delta_{k}^{(l+1)}$ \u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\uff0e\n\u51fa\u529b\u5c64\u3067\u306e $\\delta$ \u306f\uff0c\u51fa\u529b\u5024\u3068\u6559\u5e2b\u306e\u5dee\u3068\u3057\u3066\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\uff0c\u3053\u308c\u3092\u51fa\u529b\u5c64\u304b\u3089\u5165\u529b\u5c64\u306e\u65b9\u5411\u306b\u9806\u756a\u306b\u4f1d\u64ad\u3055\u305b\u308b\u3053\u3068\u3067\uff0c\u4e2d\u9593\u5c64\u306e\u91cd\u307f\u3092\u66f4\u65b0\u3057\u307e\u3059\uff0e\u3053\u308c\u304c\u8aa4\u5dee\u9006\u4f1d\u64ad\u3068\u547c\u3070\u308c\u308b\u6240\u4ee5\u3067\u3059\uff0e\n\n\n# XNOR\n\nXNOR\u306f\u5165\u529b\u5024\u304c\u7b49\u3057\u3044\u3068\u304d $1$ \u3092\u51fa\u529b\u3057\uff0c\u5165\u529b\u5024\u304c\u7570\u306a\u308b\u3068\u304d $0$ \u3092\u51fa\u529b\u3057\u307e\u3059\uff0e\u3053\u308c\u306f\u7dda\u5f62\u8b58\u5225\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\uff0e\n\n|$x_1$|$x_2$|$t$|\n|-----|-----|---|\n|0    |0    |1  |\n|0    |1    |0  |\n|1    |0    |0  |\n|1    |1    |1  |\n\n<img width=360 alt=\"xnor.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/82527/afa16cf9-6af1-63ef-13fe-3306fd54f5b4.png\">\n\n\n# python\u3067\u306e\u5b9f\u88c5\n\nXNOR\u3092\u8b58\u5225\u3059\u308b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\uff0e\n\u4e2d\u9593\u5c64\u306e\u6570\u306f1\u3064\uff0c\u4e2d\u9593\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u306e\u6570\u306f2\u3064\u306b\u3057\u3066\u3044\u307e\u3059\uff0e\u5b66\u7fd2\u7387 $\\epsilon = 0.1$\uff0c\u30e2\u30e1\u30f3\u30bf\u30e0\u306e\u4fc2\u6570 $\\mu = 0.9$ \u3068\u3057\u3066\u3044\u307e\u3059\uff0e\n(\u30e2\u30e1\u30f3\u30bf\u30e0\u306f\u53ce\u675f\u6027\u80fd\u3092\u5411\u4e0a\u3055\u305b\u308b\u65b9\u6cd5\u306e\u4e00\u3064\u3067\uff0c\u91cd\u307f\u306e\u4fee\u6b63\u91cf\u306b\uff0c\u524d\u56de\u306e\u91cd\u307f\u306e\u4fee\u6b63\u91cf\u306b\u4fc2\u6570\u3092\u304b\u3051\u305f\u3082\u306e\u3092\u52a0\u7b97\u3057\u307e\u3059\uff0e)\n\n```neuralnetwork.py\nimport numpy\nimport math\nimport random\nfrom matplotlib import pyplot\n\nclass Neural:\n\n\t# constructor\n\tdef __init__(self, n_input, n_hidden, n_output):\n\t\tself.hidden_weight = numpy.random.random_sample((n_hidden, n_input + 1))\n\t\tself.output_weight = numpy.random.random_sample((n_output, n_hidden + 1))\n\t\tself.hidden_momentum = numpy.zeros((n_hidden, n_input + 1))\n\t\tself.output_momentum = numpy.zeros((n_output, n_hidden + 1))\n\n\n# public method\n\tdef train(self, X, T, epsilon, mu, epoch):\n\t\tself.error = numpy.zeros(epoch)\n\t\tN = X.shape[0]\n\t\tfor epo in range(epoch):\n\t\t\tfor i in range(N):\n\t\t\t\tx = X[i, :]\n\t\t\t\tt = T[i, :]\n\n\t\t\t\tself.__update_weight(x, t, epsilon, mu)\n\n\t\t\tself.error[epo] = self.__calc_error(X, T)\n\n\n\tdef predict(self, X):\n\t\tN = X.shape[0]\n\t\tC = numpy.zeros(N).astype('int')\n\t\tY = numpy.zeros((N, X.shape[1]))\n\t\tfor i in range(N):\n\t\t\tx = X[i, :]\n\t\t\tz, y = self.__forward(x)\n\n\t\t\tY[i] = y\n\t\t\tC[i] = y.argmax()\n\n\t\treturn (C, Y)\n\n\n\tdef error_graph(self):\n\t\tpyplot.ylim(0.0, 2.0)\n\t\tpyplot.plot(numpy.arange(0, self.error.shape[0]), self.error)\n\t\tpyplot.show()\n\n\n# private method\n\tdef __sigmoid(self, arr):\n\t\treturn numpy.vectorize(lambda x: 1.0 / (1.0 + math.exp(-x)))(arr)\n\n\n\tdef __forward(self, x):\n\t\t# z: output in hidden layer, y: output in output layer\n\t\tz = self.__sigmoid(self.hidden_weight.dot(numpy.r_[numpy.array([1]), x]))\n\t\ty = self.__sigmoid(self.output_weight.dot(numpy.r_[numpy.array([1]), z]))\n\n\t\treturn (z, y)\n\n\tdef __update_weight(self, x, t, epsilon, mu):\n\t\tz, y = self.__forward(x)\n\n\t\t# update output_weight\n\t\toutput_delta = (y - t) * y * (1.0 - y)\n\t\t_output_weight = self.output_weight\n\t\tself.output_weight -= epsilon * output_delta.reshape((-1, 1)) * numpy.r_[numpy.array([1]), z] - mu * self.output_momentum\n\t\tself.output_momentum = self.output_weight - _output_weight\n\n\t\t# update hidden_weight\n\t\thidden_delta = (self.output_weight[:, 1:].T.dot(output_delta)) * z * (1.0 - z)\n\t\t_hidden_weight = self.hidden_weight\n\t\tself.hidden_weight -= epsilon * hidden_delta.reshape((-1, 1)) * numpy.r_[numpy.array([1]), x]\n\t\tself.hidden_momentum = self.hidden_weight - _hidden_weight\n\n\n\tdef __calc_error(self, X, T):\n\t\tN = X.shape[0]\n\t\terr = 0.0\n\t\tfor i in range(N):\n\t\t\tx = X[i, :]\n\t\t\tt = T[i, :]\n\n\t\t\tz, y = self.__forward(x)\n\t\t\terr += (y - t).dot((y - t).reshape((-1, 1))) / 2.0\n\n\t\treturn err\n```\n\n\n```main.py\nfrom neuralnetwork import *\n\nif __name__ == '__main__':\n\n\tX = numpy.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n\tT = numpy.array([[1, 0], [0, 1], [0, 1], [1, 0]])\n\tN = X.shape[0] # number of data\n\n\tinput_size = X.shape[1]\n\thidden_size = 2\n\toutput_size = 2\n\tepsilon = 0.1\n\tmu = 0.9\n\tepoch = 10000\n\n\tnn = Neural(input_size, hidden_size, output_size)\n\tnn.train(X, T, epsilon, mu, epoch)\n\tnn.error_graph()\n\n\tC, Y = nn.predict(X)\n\n\tfor i in range(N):\n\t\tx = X[i, :]\n\t\ty = Y[i, :]\n\t\tc = C[i]\n\n\t\tprint x\n\t\tprint y\n\t\tprint c\n\t\tprint \"\"\n```\n\n\n# \u7d50\u679c\n\n\u6b63\u3057\u304f\u8b58\u5225\u3067\u304d\u3066\u3044\u307e\u3059\uff0e\n\n|$x_1$|$x_2$|$t$      |$y$                        |\n|:---:|:---:|:-------:|:-------------------------:|\n|0    |0    |[ 1, 0 ] |[ 0.92598739, 0.07297757 ] |\n|0    |1    |[ 0, 1 ] |[ 0.06824915, 0.93312514 ] |\n|1    |0    |[ 0, 1 ] |[ 0.06828438, 0.93309010 ] |\n|1    |1    |[ 1, 0 ] |[ 0.92610205, 0.07220633 ] |\n\n\u8aa4\u5dee\u304c\u6e1b\u5c11\u3057\u3066\u3044\u304f\u69d8\u5b50\u3092\u30b0\u30e9\u30d5\u306b\u3057\u307e\u3057\u305f\uff0e\u6a2a\u8ef8\u304c\u30a8\u30dd\u30c3\u30af\u6570\uff0c\u7e26\u8ef8\u304c\u8aa4\u5dee\u3067\u3059\uff0e\n\n<img width=840 alt=\"error.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/82527/865e697e-2f9b-69ce-e579-e5b9e1e2e723.png\">\n\n\n# \u304a\u308f\u308a\u306b\n\n3\u5c64\u306e\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u5b9f\u88c5\u3057\uff0cXNOR\u3092\u8b58\u5225\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\uff0e\n\u5b66\u7fd2\u306e\u30c8\u30ea\u30c3\u30af(\u91cd\u307f\u306e\u521d\u671f\u5024\u306e\u6c7a\u5b9a\u65b9\u6cd5\uff0c\u5b66\u7fd2\u7387\u306e\u6c7a\u5b9a\u65b9\u6cd5\uff0cAdaGrad\uff0c\u30e2\u30e1\u30f3\u30bf\u30e0)\u306a\u3069\u52c9\u5f37\u3059\u3079\u304d\u3053\u3068\u306f\u307e\u3060\u307e\u3060\u3042\u308a\u307e\u3059\u304c\uff0c\u4e00\u65e6\u3053\u308c\u3067\u7d42\u308f\u308a\u306b\u3057\u307e\u3059\uff0e\n\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af", "Python"]}