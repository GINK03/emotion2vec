{"context": " More than 1 year has passed since last update.\n\n\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u65b9\u7a0b\u5f0f\u306b\u304a\u3051\u308b\u30ab\u30aa\u30b9\n\n\u30ab\u30aa\u30b9\n\u30ab\u30aa\u30b9\u306f\u6c7a\u5b9a\u8ad6\u7684\u65b9\u7a0b\u5f0f\u306e\u521d\u671f\u5024\u654f\u611f\u6027\u3092\u3055\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u6709\u540d\u306a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u65b9\u7a0b\u5f0f xn+1=axn(1.0\u2212xn)xn+1=axn(1.0\u2212xn)x_{n+1} = a x_n (1.0- x_n) \u306b\u304a\u3051\u308b\u521d\u671f\u5024\u4f9d\u5b58\u6027\u3092\u898b\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\uff08\u305f\u3060\u30570.0\u2264x\u22641.0,0.0\u2264x\u22641.0,0.0\\le x \\le 1.0, 0\u2264a\u22644.00\u2264a\u22644.00\\le a \\le 4.0\uff09\n\nFortran \u306e\u5229\u7528\nFortran \u306b\u306f TINY \u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u3063\u3066\u3001\u3053\u308c\u306f\u6700\u5c0f\u306e\u6b63\u898f\u5316\u6570\u3092\u4e0e\u3048\u307e\u3059\u3002\u307e\u305f\u3001\u3042\u308b\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u6700\u96a3\u63a5\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u5f97\u308b NEAREST \u3068\u3044\u3046\u95a2\u6570\u3082\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u975e\u6b63\u898f\u5316\u6570\u3082\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u3055\u3066\u3053\u3053\u3067\u306f\u3001\u6700\u5c0f\u306e\u6b63\u898f\u5316\u6570\u3068\u305d\u306e\u4e21\u96a3\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u51fa\u767a\u5024\u3068\u3057\u3066\u53cd\u5fa9\u3092\u884c\u3044\u3001\u305d\u308c\u305e\u308c\u3092 R,G,B \u306e\u4e09\u8272\u306b\u5272\u308a\u5f53\u3066\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u66f2\u7dda\u3092\u63cf\u3044\u3066\u305d\u306e\u5dee\u3092\u898b\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u3082\u3057\u3001\u5dee\u304c\u306a\u3051\u308c\u3070 RGB \u306e\u548c\u3067\u3042\u308b\u767d\u8272\u3068\u306a\u308a\u3001\u5dee\u304c\u51fa\u308c\u3070\u305d\u308c\u305e\u308c\u306e\u8272\uff08\u307e\u305f\u306f\u305d\u306e\u5408\u6210\uff09\u304c\u73fe\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u8a08\u7b97\u306f\u500d\u7cbe\u5ea6\u3067\u884c\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\n\u6570\u5024\n\u307e\u305a\u3001\u4e09\u3064\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\u5ff5\u306e\u305f\u3081\u4e8c\u9032\u8868\u73fe\u3082\u8868\u793a\u3057\u3066\u3001\u6700\u5c0f\u30d3\u30c3\u30c8\u306e\u307f\u306e\u5dee\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u6570\u306f\u7d04 0.5e-323 \u3060\u3051\u96e2\u308c\u3066\u3044\u307e\u3059\u3002\n  0.22250738585072009-307  0.22250738585072014-307  0.22250738585072019-307\n  0000000000001111111111111111111111111111111111111111111111111111\n  0000000000010000000000000000000000000000000000000000000000000000\n  0000000000010000000000000000000000000000000000000000000000000001\n\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n\n\n\u753b\u50cf\n\u6b21\u306b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u66f2\u7dda\u306e\u753b\u50cf\u3092\u793a\u3057\u307e\u3059\u3002BMP \u30d5\u30a1\u30a4\u30eb\u3092 MS-PAINT \u3067 PNG \u306b\u76f4\u3057\u3066\u3046\uff50\u3057\u307e\u3057\u305f\u3002\u6a2a\u8ef8\u306f 2.4\u2264a\u22644.02.4\u2264a\u22644.02.4\\le a \\le 4.0 \u306e\u7bc4\u56f2\u3067\u3001\u7e26\u8ef8\u306f 0.0\u2264x\u22641.00.0\u2264x\u22641.00.0\\le x \\le 1.0 \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\uff08\u53f3\u30af\u30ea\u30c3\u30af\u3000\u65b0\u3057\u3044\u30bf\u30d6\u3067\u753b\u50cf\u3092\u958b\u304f\u3000\u3067\u5927\u304d\u306a\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u304c\u898b\u3089\u308c\u307e\u3059\u3002\uff09\n\u56f3\u304b\u3089\u660e\u3089\u304b\u306a\u3088\u3046\u306b\u3001\u306f\u3058\u3081\u306f\u767d\u3044\u66f2\u7dda\u3060\u3063\u305f\u3082\u306e\u304c\u3001\u53f3\u5074\u306e\u30ab\u30aa\u30b9\u304c\u59cb\u307e\u308b\u9818\u57df\u3067\u306f\u3001\u8272\u306e\u4ed8\u3044\u305f\u70b9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u500d\u7cbe\u5ea6\u306e\u6700\u5c0f\u6b63\u898f\u5316\u6570\u3068\u305d\u306e\u6700\u96a3\u63a5\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3068\u3044\u3046\u308f\u305a\u304b\u306a\u51fa\u767a\u6570\u5024\u306e\u5dee\u304c\u3001\u30ab\u30aa\u30b9\u9818\u57df\u3067\u306f\u5927\u304d\u304f\u62e1\u5927\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u3057\u3066\u3057\u3066\u3044\u307e\u3059\u3002\n\u521d\u671f\u5024\u306e\u9055\u3044\u3067\u5927\u304d\u304f\u7570\u306a\u3063\u305f\u6642\u9593\u767a\u5c55\u3092\u898b\u305b\u308b\u3068\u3044\u3046\u30ab\u30aa\u30b9\u73fe\u8c61\u304c\u3001\u308f\u305a\u304b\u500d\u7cbe\u5ea6\u306e 1ulp \u306e\u5dee\u3067\u3082\u73fe\u308c\u308b\u3053\u3068\u304c\u78ba\u304b\u3081\u3089\u308c\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u30ab\u30aa\u30b9\u3067\u306f\u521d\u671f\u5024\u3067\u306e\u5dee\u304c\u6307\u6570\u95a2\u6570\u7684\u306b\u62e1\u5927\u3057\u3066\u3044\u304f\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5358\u7cbe\u5ea6\u3068\u500d\u7cbe\u5ea6\u3067\u6bd4\u8f03\u306b\u3088\u3063\u3066\u5b9a\u6027\u7684\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u5358\u7cbe\u5ea6\u3068\u500d\u7cbe\u5ea6\u3067\u306f\u521d\u671f\u5024\u3067\u306e\u5dee\u304c\u6307\u6570\u90e8\u306e\u5dee\u3067\u7279\u5fb4\u3065\u3051\u3089\u308c\u307e\u3059\u304c\u3001\u305d\u306e\u30d5\u30a1\u30af\u30bf\u30fc\u500d\u7a0b\u5ea6\u306b\u53cd\u5fa9\u6570\u3092\u5897\u3084\u3059\u3060\u3051\u3067\u540c\u69d8\u306e\u30ab\u30aa\u30b9\u7684\u632f\u308b\u821e\u3044\u304c\u898b\u3089\u308c\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\nIntel Fortran v.15 Beta \u56fa\u6709\u306e\u30d0\u30b0\u7b49\u306b\u82e6\u3057\u3081\u3089\u308c\u3066\u3001\u3061\u3087\u3063\u3068\u4e71\u308c\u307e\u3057\u305f\u3002\nparameterized derived type \u306f\u3001\u578b\u5ba3\u8a00\u3092\u3057\u305f Module \u5185\u3067\u3001\u5b9f\u4f7f\u7528\u30b5\u30a4\u30ba\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306e dummy \u5909\u6570\u3092\u78ba\u4fdd\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u5185\u90e8\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\u307e\u305f\u3053\u308c\u3092\u56de\u907f\u3057\u305f\u5f8c\u3067\u3082 debug mode \u3067\u306f\u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u304c\u3067\u3066\u52d5\u304b\u306a\u3044\u306e\u3067 release mode \u3067\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3055\u3089\u306b\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u6f14\u7b97\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u901f\u5ea6\u91cd\u8996\u306b\u306a\u3063\u3066\u3044\u3066\u975e\u6b63\u898f\u5316\u6570\u306e\u6f14\u7b97\u304c\u3046\u307e\u304f\u884c\u308f\u308c\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u3092 strict \u30e2\u30fc\u30c9\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n    module m_bmp\n      implicit none\n      type :: t_bmp_file_header\n        sequence  \n        integer(2) :: bfType = transfer('BM', 0_2, 1) ! BitMap\n        integer(4) :: bfSize          ! file size in bytes\n        integer(2) :: bfReserved1 = 0 ! always 0\n        integer(2) :: bfReserved2 = 0 ! always 0\n        integer(4) :: bfOffBits\n      end type t_bmp_file_header\n      ! \n      type :: t_bmp_info_header\n        sequence\n        integer(4) :: biSize     = Z'28' ! size of bmp_info_header ; 40bytes \n        integer(4) :: biWidth\n        integer(4) :: biHeight\n        integer(2) :: biPlanes   = 1 ! always 1\n        integer(2) :: biBitCount\n        integer(4) :: biCompression = 0 !0:nocompression,1:8bitRLE,2:4bitRLE,3:bitfield\n        integer(4) :: biSizeImage\n        integer(4) :: biXPelsPerMeter = 3780 ! 96dpi\n        integer(4) :: biYPelsPerMeter = 3780 ! 96dpi \n        integer(4) :: biClrUsed      = 0\n        integer(4) :: biClrImportant = 0 \n      end type t_bmp_info_header\n      !\n      type :: t_rgb\n        sequence\n        character :: b, g, r  ! order is b g r \n      end type t_rgb \n      !\n      type :: t_bmp(n_width, n_height)\n        integer, len:: n_width, n_height  \n        type(t_rgb) :: rgb(n_width, n_height) \n      contains \n        procedure :: wr => wr_bmp\n        procedure :: point => point_bmp\n      end type\n      !\n      ! bug of intel fortran v.15beta ? not working in debug mode\n      ! parametrized derived type  \n      type(t_bmp(1280, 720)) :: dummy\n      !\n    contains   \n      subroutine wr_bmp(bmp, fn)\n        class(t_bmp(*, *)), intent(in) :: bmp \n        character(len = *), intent(in) :: fn\n        type(t_bmp_file_header) :: bmp_file_header\n        type(t_bmp_info_header) :: bmp_info_header\n        associate(nx => size(bmp%rgb, 1), ny => size(bmp%rgb, 2))\n          bmp_file_header%bfSize      = 14 + 40 + 0 + nx * ny * 3\n          bmp_file_header%bfOffBits   = 14 + 40\n          bmp_info_header%biWidth     = nx\n          bmp_info_header%biHeight    = ny\n          bmp_info_header%biBitCount  = 24 \n          bmp_info_header%biSizeImage = nx * ny * 3\n        end associate\n        open(9, file = fn//'.bmp', form = 'binary', status = 'unknown')\n        write(9) bmp_file_header\n        write(9) bmp_info_header\n        write(9) bmp%rgb\n        close(9)\n        return\n      end subroutine wr_bmp\n      !\n      subroutine point_bmp(bmp, ix, iy, rgb)\n        class(t_bmp(*, *)), intent(in out) :: bmp \n        integer, intent(in) :: ix, iy\n        type(t_rgb), intent(in) :: rgb\n        integer :: ir, ig, ib\n        ir = iachar(bmp%rgb(ix, iy)%r) + iachar(rgb%r)\n        ig = iachar(bmp%rgb(ix, iy)%g) + iachar(rgb%g)\n        ib = iachar(bmp%rgb(ix, iy)%b) + iachar(rgb%b)\n        bmp%rgb(ix, iy) = t_rgb(achar(ib), achar(ig), achar(ir))\n      end subroutine point_bmp  \n    end module m_bmp\n\n    program Chaos\n      use m_bmp\n      implicit none\n      integer, parameter :: kd = kind(1.0d0)\n      type (t_rgb), parameter :: blue  = t_rgb(achar(255), achar(0), achar(0))\n      type (t_rgb), parameter :: green = t_rgb(achar(0), achar(255), achar(0))\n      type (t_rgb), parameter :: red   = t_rgb(achar(0), achar(0), achar(255))\n      real(kd) :: a, a0, a1, x0, x(3)\n      integer :: i, k, ix(3)\n      type (t_bmp(1280, 720)) :: fig \n !\n      fig%rgb = t_rgb(achar(0),achar(0),achar(0))\n      x0 = tiny(0.0_kd)\n      a0 = 2.4_kd\n      a1 = 4.0_kd\n      do k = 0, fig%n_width - 1\n        a = (a1 - a0) / real(fig%n_width - 1, kd) * k + a0 \n        x = [nearest(x0, -1.0_kd), x0, nearest(x0, +1.0_kd)]\n        if (k == 0) print '(3e25.17/3(b66.64/))', x, x\n        do i = 1, 1000\n          x = a * x * (1.0_kd - x)\n        end do\n        do i = 1, 100\n          x = a * x * (1.0_kd - x)\n          ix = x * (fig%n_height - 1) + 1\n          call fig%point(k, ix(1), green)\n          call fig%point(k, ix(2), red  )\n          call fig%point(k, ix(3), blue )\n        end do\n      end do \n      call fig%wr('chaos')\n    end program Chaos\n\n\n\u88dc\u8db3\uff1a rbg \u306e\u3068\u3053\u308d\u3067\u3001achar \u3084 iachar \u3092\u4f7f\u3063\u3066\u3044\u308b\u7406\u7531\u3002\nFortran \u306b\u306f\u7b26\u53f7\u306a\u3057\u6574\u6570\u304c\u306a\u3044\u305f\u3081\u306b\u30011byte \u6574\u6570\u578b\u3092\u7528\u3044\u308b\u3068 128 \u4ee5\u4e0a\u306e\u6570\u304c\u8ca0\u6570\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u8272\u3005\u9762\u5012\u306a\u3053\u3068\u304c\u8d77\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u3001\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u7b26\u53f7\u306a\u3057 1byte \u6574\u6570\u306e\u4ee3\u7528\u3068\u3057\u3066\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n#\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u65b9\u7a0b\u5f0f\u306b\u304a\u3051\u308b\u30ab\u30aa\u30b9\n###\u30ab\u30aa\u30b9\n\u30ab\u30aa\u30b9\u306f\u6c7a\u5b9a\u8ad6\u7684\u65b9\u7a0b\u5f0f\u306e\u521d\u671f\u5024\u654f\u611f\u6027\u3092\u3055\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u6709\u540d\u306a\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u65b9\u7a0b\u5f0f $x_{n+1} = a x_n (1.0- x_n)$ \u306b\u304a\u3051\u308b\u521d\u671f\u5024\u4f9d\u5b58\u6027\u3092\u898b\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\uff08\u305f\u3060\u3057$0.0\\le x \\le 1.0,$ $0\\le a \\le 4.0$\uff09\n###Fortran \u306e\u5229\u7528\nFortran \u306b\u306f TINY \u3068\u3044\u3046\u95a2\u6570\u304c\u3042\u3063\u3066\u3001\u3053\u308c\u306f\u6700\u5c0f\u306e\u6b63\u898f\u5316\u6570\u3092\u4e0e\u3048\u307e\u3059\u3002\u307e\u305f\u3001\u3042\u308b\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u6700\u96a3\u63a5\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u5f97\u308b NEAREST \u3068\u3044\u3046\u95a2\u6570\u3082\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u975e\u6b63\u898f\u5316\u6570\u3082\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u3055\u3066\u3053\u3053\u3067\u306f\u3001\u6700\u5c0f\u306e\u6b63\u898f\u5316\u6570\u3068\u305d\u306e\u4e21\u96a3\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u51fa\u767a\u5024\u3068\u3057\u3066\u53cd\u5fa9\u3092\u884c\u3044\u3001\u305d\u308c\u305e\u308c\u3092 R,G,B \u306e\u4e09\u8272\u306b\u5272\u308a\u5f53\u3066\u3066\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u66f2\u7dda\u3092\u63cf\u3044\u3066\u305d\u306e\u5dee\u3092\u898b\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u3082\u3057\u3001\u5dee\u304c\u306a\u3051\u308c\u3070 RGB \u306e\u548c\u3067\u3042\u308b\u767d\u8272\u3068\u306a\u308a\u3001\u5dee\u304c\u51fa\u308c\u3070\u305d\u308c\u305e\u308c\u306e\u8272\uff08\u307e\u305f\u306f\u305d\u306e\u5408\u6210\uff09\u304c\u73fe\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u8a08\u7b97\u306f\u500d\u7cbe\u5ea6\u3067\u884c\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n##\u5b9f\u884c\u7d50\u679c\n###\u6570\u5024\n\u307e\u305a\u3001\u4e09\u3064\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3092\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\u5ff5\u306e\u305f\u3081\u4e8c\u9032\u8868\u73fe\u3082\u8868\u793a\u3057\u3066\u3001\u6700\u5c0f\u30d3\u30c3\u30c8\u306e\u307f\u306e\u5dee\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u6570\u306f\u7d04 0.5e-323 \u3060\u3051\u96e2\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\n  0.22250738585072009-307  0.22250738585072014-307  0.22250738585072019-307\n  0000000000001111111111111111111111111111111111111111111111111111\n  0000000000010000000000000000000000000000000000000000000000000000\n  0000000000010000000000000000000000000000000000000000000000000001\n\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n```\n\n###\u753b\u50cf\n\u6b21\u306b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u66f2\u7dda\u306e\u753b\u50cf\u3092\u793a\u3057\u307e\u3059\u3002BMP \u30d5\u30a1\u30a4\u30eb\u3092 MS-PAINT \u3067 PNG \u306b\u76f4\u3057\u3066\u3046\uff50\u3057\u307e\u3057\u305f\u3002\u6a2a\u8ef8\u306f $2.4\\le a \\le 4.0$ \u306e\u7bc4\u56f2\u3067\u3001\u7e26\u8ef8\u306f $0.0\\le x \\le 1.0$ \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n![chaos.png](https://qiita-image-store.s3.amazonaws.com/0/44522/82d3fa2e-3bf5-b892-694d-5082559628b7.png)\n\uff08\u53f3\u30af\u30ea\u30c3\u30af\u3000\u65b0\u3057\u3044\u30bf\u30d6\u3067\u753b\u50cf\u3092\u958b\u304f\u3000\u3067\u5927\u304d\u306a\u30b5\u30a4\u30ba\u306e\u753b\u50cf\u304c\u898b\u3089\u308c\u307e\u3059\u3002\uff09\n\n\u56f3\u304b\u3089\u660e\u3089\u304b\u306a\u3088\u3046\u306b\u3001\u306f\u3058\u3081\u306f\u767d\u3044\u66f2\u7dda\u3060\u3063\u305f\u3082\u306e\u304c\u3001\u53f3\u5074\u306e\u30ab\u30aa\u30b9\u304c\u59cb\u307e\u308b\u9818\u57df\u3067\u306f\u3001\u8272\u306e\u4ed8\u3044\u305f\u70b9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u500d\u7cbe\u5ea6\u306e\u6700\u5c0f\u6b63\u898f\u5316\u6570\u3068\u305d\u306e\u6700\u96a3\u63a5\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3068\u3044\u3046\u308f\u305a\u304b\u306a\u51fa\u767a\u6570\u5024\u306e\u5dee\u304c\u3001\u30ab\u30aa\u30b9\u9818\u57df\u3067\u306f\u5927\u304d\u304f\u62e1\u5927\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u3057\u3066\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u521d\u671f\u5024\u306e\u9055\u3044\u3067\u5927\u304d\u304f\u7570\u306a\u3063\u305f\u6642\u9593\u767a\u5c55\u3092\u898b\u305b\u308b\u3068\u3044\u3046\u30ab\u30aa\u30b9\u73fe\u8c61\u304c\u3001\u308f\u305a\u304b\u500d\u7cbe\u5ea6\u306e 1ulp \u306e\u5dee\u3067\u3082\u73fe\u308c\u308b\u3053\u3068\u304c\u78ba\u304b\u3081\u3089\u308c\u307e\u3057\u305f\u3002\n\n\u307e\u305f\u3001\u30ab\u30aa\u30b9\u3067\u306f\u521d\u671f\u5024\u3067\u306e\u5dee\u304c\u6307\u6570\u95a2\u6570\u7684\u306b\u62e1\u5927\u3057\u3066\u3044\u304f\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5358\u7cbe\u5ea6\u3068\u500d\u7cbe\u5ea6\u3067\u6bd4\u8f03\u306b\u3088\u3063\u3066\u5b9a\u6027\u7684\u306b\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u5358\u7cbe\u5ea6\u3068\u500d\u7cbe\u5ea6\u3067\u306f\u521d\u671f\u5024\u3067\u306e\u5dee\u304c\u6307\u6570\u90e8\u306e\u5dee\u3067\u7279\u5fb4\u3065\u3051\u3089\u308c\u307e\u3059\u304c\u3001\u305d\u306e\u30d5\u30a1\u30af\u30bf\u30fc\u500d\u7a0b\u5ea6\u306b\u53cd\u5fa9\u6570\u3092\u5897\u3084\u3059\u3060\u3051\u3067\u540c\u69d8\u306e\u30ab\u30aa\u30b9\u7684\u632f\u308b\u821e\u3044\u304c\u898b\u3089\u308c\u307e\u3059\u3002\n\n###\u30d7\u30ed\u30b0\u30e9\u30e0\nIntel Fortran v.15 Beta \u56fa\u6709\u306e\u30d0\u30b0\u7b49\u306b\u82e6\u3057\u3081\u3089\u308c\u3066\u3001\u3061\u3087\u3063\u3068\u4e71\u308c\u307e\u3057\u305f\u3002\n\nparameterized derived type \u306f\u3001\u578b\u5ba3\u8a00\u3092\u3057\u305f Module \u5185\u3067\u3001\u5b9f\u4f7f\u7528\u30b5\u30a4\u30ba\u3068\u540c\u3058\u30b5\u30a4\u30ba\u306e dummy \u5909\u6570\u3092\u78ba\u4fdd\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u5185\u90e8\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\u307e\u305f\u3053\u308c\u3092\u56de\u907f\u3057\u305f\u5f8c\u3067\u3082 debug mode \u3067\u306f\u30e9\u30f3\u30bf\u30a4\u30e0\u30a8\u30e9\u30fc\u304c\u3067\u3066\u52d5\u304b\u306a\u3044\u306e\u3067 release mode \u3067\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3055\u3089\u306b\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u6f14\u7b97\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u901f\u5ea6\u91cd\u8996\u306b\u306a\u3063\u3066\u3044\u3066\u975e\u6b63\u898f\u5316\u6570\u306e\u6f14\u7b97\u304c\u3046\u307e\u304f\u884c\u308f\u308c\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u3092 strict \u30e2\u30fc\u30c9\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```fortran\n    module m_bmp\n      implicit none\n      type :: t_bmp_file_header\n        sequence  \n        integer(2) :: bfType = transfer('BM', 0_2, 1) ! BitMap\n        integer(4) :: bfSize          ! file size in bytes\n        integer(2) :: bfReserved1 = 0 ! always 0\n        integer(2) :: bfReserved2 = 0 ! always 0\n        integer(4) :: bfOffBits\n      end type t_bmp_file_header\n      ! \n      type :: t_bmp_info_header\n        sequence\n        integer(4) :: biSize     = Z'28' ! size of bmp_info_header ; 40bytes \n        integer(4) :: biWidth\n        integer(4) :: biHeight\n        integer(2) :: biPlanes   = 1 ! always 1\n        integer(2) :: biBitCount\n        integer(4) :: biCompression = 0 !0:nocompression,1:8bitRLE,2:4bitRLE,3:bitfield\n        integer(4) :: biSizeImage\n        integer(4) :: biXPelsPerMeter = 3780 ! 96dpi\n        integer(4) :: biYPelsPerMeter = 3780 ! 96dpi \n        integer(4) :: biClrUsed      = 0\n        integer(4) :: biClrImportant = 0 \n      end type t_bmp_info_header\n      !\n      type :: t_rgb\n        sequence\n        character :: b, g, r  ! order is b g r \n      end type t_rgb \n      !\n      type :: t_bmp(n_width, n_height)\n        integer, len:: n_width, n_height  \n        type(t_rgb) :: rgb(n_width, n_height) \n      contains \n        procedure :: wr => wr_bmp\n        procedure :: point => point_bmp\n      end type\n      !\n      ! bug of intel fortran v.15beta ? not working in debug mode\n      ! parametrized derived type  \n      type(t_bmp(1280, 720)) :: dummy\n      !\n    contains   \n      subroutine wr_bmp(bmp, fn)\n        class(t_bmp(*, *)), intent(in) :: bmp \n        character(len = *), intent(in) :: fn\n        type(t_bmp_file_header) :: bmp_file_header\n        type(t_bmp_info_header) :: bmp_info_header\n        associate(nx => size(bmp%rgb, 1), ny => size(bmp%rgb, 2))\n          bmp_file_header%bfSize      = 14 + 40 + 0 + nx * ny * 3\n          bmp_file_header%bfOffBits   = 14 + 40\n          bmp_info_header%biWidth     = nx\n          bmp_info_header%biHeight    = ny\n          bmp_info_header%biBitCount  = 24 \n          bmp_info_header%biSizeImage = nx * ny * 3\n        end associate\n        open(9, file = fn//'.bmp', form = 'binary', status = 'unknown')\n        write(9) bmp_file_header\n        write(9) bmp_info_header\n        write(9) bmp%rgb\n        close(9)\n        return\n      end subroutine wr_bmp\n      !\n      subroutine point_bmp(bmp, ix, iy, rgb)\n        class(t_bmp(*, *)), intent(in out) :: bmp \n        integer, intent(in) :: ix, iy\n        type(t_rgb), intent(in) :: rgb\n        integer :: ir, ig, ib\n        ir = iachar(bmp%rgb(ix, iy)%r) + iachar(rgb%r)\n        ig = iachar(bmp%rgb(ix, iy)%g) + iachar(rgb%g)\n        ib = iachar(bmp%rgb(ix, iy)%b) + iachar(rgb%b)\n        bmp%rgb(ix, iy) = t_rgb(achar(ib), achar(ig), achar(ir))\n      end subroutine point_bmp  \n    end module m_bmp\n```\n\n```fortran    \n    program Chaos\n      use m_bmp\n      implicit none\n      integer, parameter :: kd = kind(1.0d0)\n      type (t_rgb), parameter :: blue  = t_rgb(achar(255), achar(0), achar(0))\n      type (t_rgb), parameter :: green = t_rgb(achar(0), achar(255), achar(0))\n      type (t_rgb), parameter :: red   = t_rgb(achar(0), achar(0), achar(255))\n      real(kd) :: a, a0, a1, x0, x(3)\n      integer :: i, k, ix(3)\n      type (t_bmp(1280, 720)) :: fig \n !\n      fig%rgb = t_rgb(achar(0),achar(0),achar(0))\n      x0 = tiny(0.0_kd)\n      a0 = 2.4_kd\n      a1 = 4.0_kd\n      do k = 0, fig%n_width - 1\n        a = (a1 - a0) / real(fig%n_width - 1, kd) * k + a0 \n        x = [nearest(x0, -1.0_kd), x0, nearest(x0, +1.0_kd)]\n        if (k == 0) print '(3e25.17/3(b66.64/))', x, x\n        do i = 1, 1000\n          x = a * x * (1.0_kd - x)\n        end do\n        do i = 1, 100\n          x = a * x * (1.0_kd - x)\n          ix = x * (fig%n_height - 1) + 1\n          call fig%point(k, ix(1), green)\n          call fig%point(k, ix(2), red  )\n          call fig%point(k, ix(3), blue )\n        end do\n      end do \n      call fig%wr('chaos')\n    end program Chaos\n```\n\n###\u88dc\u8db3\uff1a rbg \u306e\u3068\u3053\u308d\u3067\u3001achar \u3084 iachar \u3092\u4f7f\u3063\u3066\u3044\u308b\u7406\u7531\u3002\nFortran \u306b\u306f\u7b26\u53f7\u306a\u3057\u6574\u6570\u304c\u306a\u3044\u305f\u3081\u306b\u30011byte \u6574\u6570\u578b\u3092\u7528\u3044\u308b\u3068 128 \u4ee5\u4e0a\u306e\u6570\u304c\u8ca0\u6570\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u8272\u3005\u9762\u5012\u306a\u3053\u3068\u304c\u8d77\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u3001\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u7b26\u53f7\u306a\u3057 1byte \u6574\u6570\u306e\u4ee3\u7528\u3068\u3057\u3066\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n", "tags": ["Fortran2003", "\u30ab\u30aa\u30b9", "IEEE754"]}