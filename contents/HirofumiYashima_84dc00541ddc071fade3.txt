{"tags": ["Python", "NLP", "\u30c7\u30fc\u30bf\u5206\u6790", "\u7d71\u8a08\u5b66", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"], "context": "\u5358\u7d14\u306a\u30b3\u30fc\u30c9\u3067\u3059\u304c\u3001\u4e45\u3057\u3076\u308a\u306b\u5229\u7528\u5834\u9762\u306b\u906d\u9047\u3059\u308b\u3068\u5fd8\u308c\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306e\u5099\u5fd8\u9332\u307e\u3067\u3002\n\n\n\uff08 Wikipedia\uff08\u65e5\u672c\u8a9e\uff09\u5168\u91cf\u30c7\u30fc\u30bf\u3092DL\u3057\u305f\u3082\u306e \u3092 \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u4f7f\u7528 \uff09\n\n\nTerminal\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ ls | head \nall_wiki_sentences.txt\njawiki-latest-pages-articles.xml-001.txt\njawiki-latest-pages-articles.xml-002.txt\njawiki-latest-pages-articles.xml-003.txt\njawiki-latest-pages-articles.xml-004.txt\njawiki-latest-pages-articles.xml-005.txt\njawiki-latest-pages-articles.xml-006.txt\njawiki-latest-pages-articles.xml-007.txt\njawiki-latest-pages-articles.xml-008.txt\njawiki-latest-pages-articles.xml-009.txt\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ \nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ wc -l all_wiki_sentences.txt \n 40438738 all_wiki_sentences.txt\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ wc -l jawiki-latest-pages-articles.xml-* | head\n  121056 jawiki-latest-pages-articles.xml-001.txt\n  103388 jawiki-latest-pages-articles.xml-002.txt\n  108988 jawiki-latest-pages-articles.xml-003.txt\n  113225 jawiki-latest-pages-articles.xml-004.txt\n  111754 jawiki-latest-pages-articles.xml-005.txt\n  114759 jawiki-latest-pages-articles.xml-006.txt\n  103803 jawiki-latest-pages-articles.xml-007.txt\n  112778 jawiki-latest-pages-articles.xml-008.txt\n  117041 jawiki-latest-pages-articles.xml-009.txt\n  122210 jawiki-latest-pages-articles.xml-010.txt\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ \nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ head jawiki-latest-pages-articles.xml-001.txt\n[[\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9]]\n\n\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9 (ampersand, &) \u3068\u306f\u300c\u2026\u3068\u2026\u300d\u3092\u610f\u5473\u3059\u308b\u8a18\u53f7\u3067\u3042\u308b\u3002\u82f1\u8a9e\u306e \"and\" \u306b\u76f8\u5f53\u3059\u308b\u30e9\u30c6\u30f3\u8a9e\u306e \"et\" \u306e\u5408\u5b57\u3067\u3001\"etc.\" (et cetera = and so forth)\u3092 \"&c.\" \u3068\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u306f\u305d\u306e\u305f\u3081\u3002Trebuchet MS\u30d5\u30a9\u30f3\u30c8\u3067\u306f\u300110px\u3068\u8868\u793a\u3055\u308c \"et\" \u306e\u5408\u5b57\u3067\u3042\u308b\u3053\u3068\u304c\u5bb9\u6613\u306b\u308f\u304b\u308b\u3002\n\n==\u6b74\u53f2==\n\n\u305d\u306e\u4f7f\u7528\u306f1\u4e16\u7d00\u306b\u9061\u308b\u3053\u3068\u304c\u3067\u304d (1)\u30015\u4e16\u7d00\u4e2d\u8449 (2,3) \u304b\u3089\u73fe\u4ee3 (4-6) \u306b\u81f3\u308b\u307e\u3067\u306e\u5909\u9077\u304c\u308f\u304b\u308b\u3002\n\nZ \u306b\u7d9a\u304f\u30e9\u30c6\u30f3\u6587\u5b57\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e27\u5b57\u76ee\u3068\u3055\u308c\u305f\u6642\u671f\u3082\u3042\u308b\u3002\n\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ \nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ head jawiki-latest-pages-articles.xml-002.txt\n[[\u5171\u6709\u30e1\u30e2\u30ea]]\n\n\u60c5\u5831\u51e6\u7406\u306b\u304a\u3044\u3066\u5171\u6709\u30e1\u30e2\u30ea\uff08\u304d\u3087\u3046\u3086\u3046-\uff09\u3068\u306f\u3001\u8907\u6570\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u540c\u6642\u4e26\u884c\u7684\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30e1\u30e2\u30ea\u3067\u3042\u308b\u3002\n\n==\u6982\u8981==\n\n\u8907\u6570\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u9593\u306e\u901a\u4fe1\u624b\u6bb5\u3068\u3057\u3066\u4f7f\u3046\u5834\u5408\u3068\u3001\u5358\u306b\u8907\u88fd\u3092\u7528\u610f\u3059\u308b\u5197\u9577\u3055\u3092\u9632\u3050\u76ee\u7684\u306e\u5834\u5408\u306a\u3069\u304c\u3042\u308b\u3002\u5171\u6709\u30e1\u30e2\u30ea\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u9593\u3067\u30c7\u30fc\u30bf\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u52b9\u7387\u7684\u624b\u6bb5\u3067\u3042\u308b\u3002\u6587\u8108\u306b\u3088\u3063\u3066\u3001\u305d\u308c\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5358\u4e00\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u4e0a\u3067\u52d5\u4f5c\u3059\u308b\u5834\u5408\u3068\u8907\u6570\u306e\u7570\u306a\u308b\u30d7\u30ed\u30bb\u30c3\u30b5\u7fa4\u4e0a\u3067\u52d5\u4f5c\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u3002\u5358\u4e00\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5185\u90e8\u3067\u30e1\u30e2\u30ea\u3092\u4f7f\u3063\u3066\u901a\u4fe1\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u3001\u4f8b\u3048\u3070\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u304c\u5178\u578b\u7684\u3060\u304c\u3001\u4eee\u60f3\u7a7a\u9593\u3092\u3082\u3068\u3082\u3068\u5171\u6709\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u300c\u5171\u6709\u30e1\u30e2\u30ea\u300d\u3068\u306f\u547c\u3070\u306a\u3044\u3002\n\n==\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306b\u3088\u308b\u5171\u6709\u30e1\u30e2\u30ea==\n\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ \n\n\n\n\nPython 3.5.2 \u3067 (string\u578b\u3067\uff09\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n\n\nPython 3.5.2\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ python\nPython 3.5.2 (default, Jul 23 2016, 14:25:12) \n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n>>> import codecs\n>>> \n>>> with codecs.open(\"jawiki-latest-pages-articles.xml-001.txt\", \"r\", \"utf-8\") as f:\n...     corpus = f.read()\n... \n>>>\n\n\n\nPython 3.5.2\n>>> import types\n>>> type(corpus)\n<class 'str'>\n>>> \n>>> len(corpus)\n4417260\n>>>\n\n\n\nPython 3.5.2\n>>> print(corpus[0:100])\n[[\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9]]\n\n\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9 (ampersand, &) \u3068\u306f\u300c\u2026\u3068\u2026\u300d\u3092\u610f\u5473\u3059\u308b\u8a18\u53f7\u3067\u3042\u308b\u3002\u82f1\u8a9e\u306e \"and\" \u306b\u76f8\u5f53\u3059\u308b\u30e9\u30c6\u30f3\u8a9e\u306e \"et\" \u306e\u5408\u5b57\u3067\u3001\"etc.\" (et cetera\n>>> \n>>> print(corpus[-100: ])\nRandy Kath, Microsoft Developer Network Technology Group, 12 December 1992 |date= 20100622062522 }}\n\n>>> \n\n\n\n\nMecab ipadic-neologd\u8f9e\u66f8\u3067\u3001\u5206\u304b\u3061\u66f8\u304d\u306e\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8 \u306b \u3059\u308b\n\n\nPython 3.5.2\n>>> import MeCab\n>>> tagger_owakati = MeCab.Tagger(\"-Ochasen -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd -Owakati\")\n>>> \n>>> mecab_owakati_result = tagger_owakati.parse(corpus)\n>>> \n>>> type(mecab_owakati_result)\n<class 'NoneType'>\n>>> \n>>> print(mecab_owakati_result)\nNone\n>>>\n\n\n\nNone\u304c\u8fd4\u3055\u308c\u305f\n\n\n\u6587\u5b57\u6570\u304c\u591a\u3059\u304e\u308b\u3068\u3001\u591a\u5206\u304b\u3061\u66f8\u304d\u304c\u30b3\u30b1\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\n\n\u4ee5\u4e0b\u306f\u3001\u5206\u304b\u3061\u66f8\u304d\u304c\u3061\u3083\u3093\u3068\u8fd4\u3055\u308c\u308b\nHirofumiYashima Qiitakiji (\u6700\u7d42\u66f4\u65b0\u65e5: 2016\u5e7408\u670830\u65e5) \u300cmecab-ipadic-neologd \u4f7f\u3063\u3066 \u5206\u304b\u3061\u66f8\u304d\u3059\u308b\u306b\u306f\u3001mecab -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd \u306e \u5f8c\u306b -Owakati \u3092 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570 \u306b \u4e0e\u3048\u308c\u3070 \u51fa\u6765\u308b\u300d \n\n\nPython 3.5.2\n>>> mecab_owakati_result = tagger_owakati.parse(\"\u56fd\u9023\u306e\u6b21\u306e\u4e8b\u52d9\u7dcf\u9577\u3092\u9078\u3076\uff13\u56de\u76ee\u306e\u6295\u7968\u304c\u5b89\u5168\u4fdd\u969c\u7406\u4e8b\u4f1a\u3067\u884c\u308f\u308c\u3001\u904e\u53bb\uff12\u56de\u306e\u6295\u7968\u306b\u7d9a\u3044\u3066\u30b0\u30c6\u30fc\u30ec\u30b9\u524d\u56fd\u9023\u96e3\u6c11\u9ad8\u7b49\u5f01\u52d9\u5b98\u304c\u6700\u3082\u591a \u3044\u652f\u6301\u3092\u7372\u5f97\u3057\u3001\u4eca\u5f8c\u3001\u62d2\u5426\u6a29\u3092\u6301\u3064\u5e38\u4efb\u7406\u4e8b\u56fd\u304c\u3069\u306e\u3088\u3046\u306a\u5bfe\u5fdc\u3092\u898b\u305b\u308b\u306e\u304b\u3001\u6ce8\u76ee\u3055\u308c\u307e\u3059\u3002\")\n>>> print(mecab_owakati_result)\n\u56fd\u9023 \u306e \u6b21 \u306e \u4e8b\u52d9\u7dcf\u9577 \u3092 \u9078\u3076 \uff13 \u56de \u76ee \u306e \u6295\u7968 \u304c \u5b89\u5168\u4fdd\u969c\u7406\u4e8b\u4f1a \u3067 \u884c\u308f \u308c \u3001 \u904e\u53bb \uff12 \u56de \u306e \u6295\u7968 \u306b \u7d9a\u3044 \u3066 \u30b0\u30c6\u30fc\u30ec\u30b9 \u524d \u56fd\u9023\u96e3\u6c11\u9ad8\u7b49\u5f01\u52d9\u5b98 \u304c \u6700\u3082 \u591a\u3044 \u652f\u6301 \u3092 \u7372\u5f97 \u3057 \u3001 \u4eca\u5f8c \u3001 \u62d2\u5426\u6a29 \u3092 \u6301\u3064 \u5e38\u4efb\u7406\u4e8b\u56fd \u304c \u3069\u306e \u3088\u3046 \u306a \u5bfe\u5fdc \u3092 \u898b\u305b\u308b \u306e \u304b \u3001 \u6ce8\u76ee \u3055 \u308c \u307e\u3059 \u3002 \n\n>>>\n\n\n\n\n\u534a\u5206\u307e\u3067\u8aad\u307f\u8fbc\u3093\u3067\u3082\u3001None \u304c \u8fd4\u3063\u3066\u304f\u308b\n\n\nPython 3.5.2\n>>> length = len(corpus)\n>>> index = length/2\n>>> print(index)\n2208630.0\n>>> \n>>> index = int(length/2)\n>>> print(index)\n2208630\n>>> \n>>> \n>>> partial_corpus = corpus[0:index]\n>>> len(partial_corpus)\n2208630\n>>> \n>>> mecab_owakati_result = tagger_owakati.parse(partial_corpus)\n>>> len(mecab_owakati_result)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: object of type 'NoneType' has no len()\n>>>\n\n\n\n1,000\u6587\u5b57 \u306a\u3089 OK\n\n\nPython 3.5.2\n>>> mecab_owakati_result = tagger_owakati.parse(corpus[0:1000])\n>>> len(mecab_owakati_result)\n1415\n>>>\n\n\n\n100\u4e07\u6587\u5b57 \u3067 \u8fd4\u308a\u5024\u304c\u5f97\u3089\u308c\u305f\u306e\u3067\u3001\u5192\u982d 100\u4e07\u6587\u5b57 \u3092 \u90e8\u5206\u30b3\u30fc\u30d1\u30b9\u30c8 \u3068\u3057\u3066 \u4f7f\u7528\n\n\nPython 3.5.2\n>>> mecab_owakati_result = tagger_owakati.parse(corpus[0:1000000])\n>>> len(mecab_owakati_result)\n1402061\n>>> \n>>> print(mecab_owakati_result[0:10])\n[[ \u30a2\u30f3\u30d1\u30b5\u30f3\u30c9 \n>>> \n>>> from pprint import pprint\n>>> pprint(mecab_owakati_result[0:50])\n'[[ \u30a2\u30f3\u30d1\u30b5\u30f3\u30c9 ]] \u30a2\u30f3\u30d1\u30b5\u30f3\u30c9 ( ampersand , &) \u3068 \u306f \u300c \u2026 \u3068 \u2026 \u300d'\n>>> \n>>> type(mecab_owakati_result)\n<class 'str'>\n>>>\n\n\n\n\u5206\u304b\u3061\u66f8\u304d\u3067\u5207\u308a\u51fa\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u3092\u8981\u7d20 \u306b \u6301\u3064 \u30ea\u30b9\u30c8\uff08\u914d\u5217\uff09 \u3092 \u751f\u6210\n\n\nPython 3.5.2\n>>> token_list = mecab_owakati_result.split(\" \")\n>>> type(token_list)\n<class 'list'>\n>>> len(token_list)\n454289\n>>>\n\n\n\nPython 3.5.2\n>>> pprint(token_list[0:50])\n['[[',\n '\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9',\n ']]',\n '\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9',\n '(',\n 'ampersand',\n ',',\n '&)',\n '\u3068',\n '\u306f',\n '\u300c',\n '\u2026',\n '\u3068',\n '\u2026',\n '\u300d',\n '\u3092',\n '\u610f\u5473',\n '\u3059\u308b',\n '\u8a18\u53f7',\n '\u3067',\n '\u3042\u308b',\n '\u3002',\n '\u82f1\u8a9e',\n '\u306e',\n '\"',\n 'and',\n '\"',\n '\u306b',\n '\u76f8\u5f53',\n '\u3059\u308b',\n '\u30e9\u30c6\u30f3\u8a9e',\n '\u306e',\n '\"',\n 'et',\n '\"',\n '\u306e',\n '\u5408\u5b57',\n '\u3067',\n '\u3001',\n '\"',\n 'etc.',\n '\"',\n '(',\n 'et',\n 'cetera',\n '=',\n 'and',\n 'so',\n 'forth',\n ')']\n>>> \n>>> len(list(set(token_list)))\n42776\n>>> \n>>> len(token_list)\n454289\n>>> \n\n\n\ncollections.Counter\u30e2\u30b8\u30e5\u30fc\u30eb \u306e counter\u30e1\u30bd\u30c3\u30c9 \u3092 \u7528\u3044\u3066 \u30c8\u30fc\u30af\u30f3\u3054\u3068\u306e\u51fa\u73fe\u56de\u6570 \u3092 \u96c6\u8a08\u3059\u308b\n\n\nPython 3.5.2\n>>> from collections import Counter\n>>> counter = Counter(token_list)\n>>>\n>>> corpus_token_freq_list = [(word, cnt) for [word, cnt] in counter.most_common()]\n>>> len(corpus_token_freq_list)\n42776\n>>> \n>>> pprint(corpus_token_freq_list[0:200])\n[('\u3001', 20112),\n ('\u306e', 19970),\n ('\u306f', 11583),\n ('\u3002', 11479),\n ('\u306b', 10866),\n ('\u3092', 9694),\n ('\u304c', 9176),\n ('\u3067', 8122),\n ('\u305f', 6796),\n ('[[', 6447),\n ('\u3068', 6418),\n (']]', 6113),\n ('\u3066', 5782),\n ('*', 5649),\n ('\uff09', 5560),\n ('\u3057', 4620),\n ('\uff08', 4577),\n ('|', 3483),\n ('\u300c', 3476),\n ('\u300d', 3444),\n ('\u3042\u308b', 3391),\n ('\u3059\u308b', 2961),\n ('\u3082', 2899),\n ('\u30fb', 2811),\n ('\u3044\u308b', 2715),\n ('-', 2715),\n ('\u3055', 2698),\n ('\u308c', 2678),\n ('\u306a', 2356),\n ('=', 1964),\n ('\u3053\u3068', 1963),\n ('===', 1851),\n ('==', 1788),\n ('\u306a\u3069', 1751),\n ('(', 1633),\n ('\u300f', 1625),\n ('\u300e', 1580),\n ('\u3084', 1578),\n ('\u304b\u3089', 1537),\n ('.', 1522),\n ('\u308c\u308b', 1341),\n ('*[[', 1332),\n ('\u306a\u3044', 1307),\n ('\u7684', 1273),\n ('\u3068\u3057\u3066', 1212),\n ('/', 1108),\n (']]\uff08', 1063),\n ('\u3088\u3046', 981),\n (':', 896),\n ('\u3082\u306e', 866),\n ('\u3044', 843),\n ('\u306a\u3063', 821),\n (')', 808),\n ('\u3068\u3044\u3046', 789),\n ('\u305d\u306e', 762),\n ('\u3053\u306e', 752),\n ('**', 723),\n ('\u305f\u3081', 719),\n ('\u3042\u308a', 712),\n (',', 660),\n ('\u307e\u305f', 617),\n (']]\u3001[[', 604),\n (')|', 575),\n ('\u306b\u3088\u3063\u3066', 563),\n ('\u8a00\u8a9e', 561),\n ('\u306a\u308b', 556),\n ('1', 548),\n ('}}', 546),\n ('\u3089\u308c', 523),\n ('{{', 516),\n ('\u4eba', 509),\n ('2', 508),\n ('\u304b', 490),\n (']]\uff09', 487),\n ('ref', 483),\n ('\u3042\u3063', 475),\n ('\u3089\u308c\u308b', 474),\n ('\u5834\u5408', 468),\n ('\u306b\u3088\u308b', 453),\n ('\u8a9e', 450),\n ('\u7b2c', 438),\n ('\u307e\u3067', 437),\n ('\u65e5\u672c', 428),\n ('\u4f5c\u54c1', 423),\n (';', 418),\n ('\u3053\u308c', 398),\n ('\u3060', 397),\n ('\u3078', 392),\n ('====', 389),\n ('\u306b\u304a\u3044\u3066', 387),\n ('\u304a\u308a', 387),\n ('http://', 386),\n ('\u5316', 378),\n ('\u5f8c', 368),\n ('\u4e2d', 361),\n ('\u591a\u304f', 357),\n ('\u306b\u3088\u308a', 354),\n ('\u30b2\u30fc\u30e0', 353),\n ('\u7814\u7a76', 352),\n ('\u73fe\u5728', 352),\n ('\u30d1\u30ea', 349),\n ('\u65e5\u672c\u8a9e', 345),\n ('\u306b\u3064\u3044\u3066', 342),\n ('\u5b58\u5728', 342),\n ('\u3088\u308a', 339),\n ('4', 333),\n ('\u8005', 320),\n ('\u3070', 310),\n ('3', 310),\n ('\u53f7', 309),\n ('\u591a\u3044', 303),\n ('\u306a\u304f', 296),\n (':*', 296),\n ('\u4e0a', 294),\n ('\u305d\u308c', 291),\n ('\u4ed6', 285),\n ('\u3067\u304d\u308b', 285),\n ('\u97f3\u697d', 282),\n ('\u305a', 276),\n ('www', 274),\n ('\u7528\u3044', 274),\n ('\u4e16\u754c', 266),\n ('\u8457\u4f5c\u6a29', 263),\n ('\u65b9\u8a00', 258),\n ('>', 255),\n ('\u5dfb', 255),\n ('#', 255),\n ('<', 253),\n ('\u54f2\u5b66', 246),\n ('[', 244),\n ('\u5730\u57df', 239),\n ('ISBN', 238),\n ('\u4e00\u89a7', 237),\n ('\u9023\u8f09', 235),\n ('\u5168', 234),\n ('\u306a\u308a', 232),\n ('\u3057\u304b\u3057', 230),\n ('\u56fd', 229),\n ('\u4e07', 229),\n ('</', 226),\n ('\u610f\u5473', 224),\n ('en', 223),\n (']', 221),\n ('\u95a2\u4fc2', 218),\n ('\u4f7f\u7528', 217),\n ('\u6642', 216),\n ('\u97f3', 215),\n ('\u305b', 215),\n ('\u4e00', 214),\n ('%', 213),\n ('\u8457\u4f5c\u7269', 212),\n ('\u6f2b\u753b', 210),\n ('_', 209),\n ('\uff1a', 206),\n ('\u5206\u91ce', 205),\n ('\u304d', 204),\n ('\u304a\u3088\u3073', 200),\n ('\u7b49', 200),\n ('\"', 199),\n ('\u6570', 197),\n ('\u5206\u985e', 196),\n (']]\u3001', 194),\n ('\u6f2b\u753b\u5bb6', 194),\n ('\u30a4\u30e9\u30f3', 194),\n ('\u5f71\u97ff', 193),\n ('\u547c\u3070', 190),\n ('\u4eba\u9593', 188),\n ('\u554f\u984c', 188),\n ('\u793e\u4f1a', 187),\n ('\u767a\u97f3', 187),\n ('\u898b', 186),\n ('\u884c\u308f', 186),\n ('\u6642\u4ee3', 183),\n ('\u5927', 183),\n ('\u306b\u304a\u3051\u308b', 182),\n ('\u3046', 179),\n ('5', 179),\n ('\u6620\u753b', 177),\n ('\u4f8b', 177),\n ('\\u3000', 176),\n ('\u30aa\u30fc\u30b9\u30c8\u30ea\u30a2', 176),\n ('\u30d4\u30a2\u30ce', 175),\n ('\u3053\u308c\u3089', 173),\n ('\u4f7f\u308f', 171),\n ('\u4e00\u822c', 170),\n ('\u8868\u73fe', 169),\n (\"'''\", 167),\n ('\u30e8\u30fc\u30ed\u30c3\u30d1', 167),\n ('\u4ee5\u964d', 166),\n ('\uff08[[', 166),\n ('\u305f\u308a', 166),\n ('\u95a2\u9023', 165),\n ('\u9593', 164),\n (']]\uff08[[', 163),\n ('\u53ef\u80fd', 162),\n ('\u9803', 162),\n ('\u4e00\u65b9', 161),\n ('\u306a\u304b\u3063', 160),\n ('\u4ee5\u4e0b', 160),\n ('\u305f\u3060\u3057', 158)]\n>>>\n\n\n\n\u9069\u5f53\u306a\u30c7\u30fc\u30bf\u5f62\u5f0f \u306b \u51fa\u529b\n\n\nPython 3.5.2\n>>> corpus_token_freq_list = [\"{word}, {cnt}\".format(word=word,cnt=cnt) for word, cnt in counter.most_common()]\n>>> print(corpus_token_freq_list[0:20])\n['\u3001, 20112', '\u306e, 19970', '\u306f, 11583', '\u3002, 11479', '\u306b, 10866', '\u3092, 9694', '\u304c, 9176', '\u3067, 8122', '\u305f, 6796', '[[, 6447', '\u3068, 6418', ']], 6113', '\u3066, 5782', '*, 5649', '\uff09, 5560', '\u3057, 4620', '\uff08, 4577', '|, 3483', '\u300c, 3476', '\u300d, 3444']\n>>>\n\n\n\nPython 3.5.2\n>>> pprint(corpus_token_freq_list[0:50])\n['\u3001, 20112',\n '\u306e, 19970',\n '\u306f, 11583',\n '\u3002, 11479',\n '\u306b, 10866',\n '\u3092, 9694',\n '\u304c, 9176',\n '\u3067, 8122',\n '\u305f, 6796',\n '[[, 6447',\n '\u3068, 6418',\n ']], 6113',\n '\u3066, 5782',\n '*, 5649',\n '\uff09, 5560',\n '\u3057, 4620',\n '\uff08, 4577',\n '|, 3483',\n '\u300c, 3476',\n '\u300d, 3444',\n '\u3042\u308b, 3391',\n '\u3059\u308b, 2961',\n '\u3082, 2899',\n '\u30fb, 2811',\n '\u3044\u308b, 2715',\n '-, 2715',\n '\u3055, 2698',\n '\u308c, 2678',\n '\u306a, 2356',\n '=, 1964',\n '\u3053\u3068, 1963',\n '===, 1851',\n '==, 1788',\n '\u306a\u3069, 1751',\n '(, 1633',\n '\u300f, 1625',\n '\u300e, 1580',\n '\u3084, 1578',\n '\u304b\u3089, 1537',\n '., 1522',\n '\u308c\u308b, 1341',\n '*[[, 1332',\n '\u306a\u3044, 1307',\n '\u7684, 1273',\n '\u3068\u3057\u3066, 1212',\n '/, 1108',\n ']]\uff08, 1063',\n '\u3088\u3046, 981',\n ':, 896',\n '\u3082\u306e, 866']\n>>>\n\n\n\nPython 3.5.2\n>>> pprint(corpus_token_freq_list[-50:])\n['\u7d0d, 1',\n '\u30b8\u30e7\u30e0\u30d5\u30fc\u30ea\u30fc\u30a4\u30a7\u30fb\u30a8\u30b9\u30e9\u30fc\u30df\u30fc\u30a4\u30a7\u30fb\u30a4\u30fc\u30e9\u30fc\u30f3, 1',\n '\u30d0\u30f3\u30c0\u30a4\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b9, 1',\n '\u30cf\u30fc\u30c4\u30db\u30fc\u30f3, 1',\n 'Pfandl, 1',\n '4753656225, 1',\n 'Parisiens, 1',\n '\u52e2, 1',\n '\u5b66\u3079, 1',\n '\u5c71\u53e3\u770c, 1',\n 'gomasio, 1',\n '\u30ed\u30fc\u30b6\u30fb\u30eb\u30af\u30bb\u30f3\u30d6\u30eb\u30af, 1',\n '\u30c8\u30f3\u30c7\u30e2, 1',\n '\u5fd7\u6751\u8cb4\u5b50, 1',\n 'Mucho, 1',\n '\u30d5\u30ea\u30fc\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2, 1',\n '\u30b5\u30f3\u30dc, 1',\n '\u6771\u4eac\u56fd\u969b\u7a7a\u6e2f, 1',\n '\u30bf\u30a4\u30c8\u30fb\u30d3\u30fc, 1',\n '\u30e9\u30b7\u30e5\u30c8, 1',\n '\u30e2\u30ca\u30b9\u30c6\u30a3\u30eb, 1',\n 'Conisch, 1',\n 'Vernon, 1',\n '\u6a2a\u624b\u5e02, 1',\n '\u30cf\u30d7\u30b9\u30d6\u30eb\u30af\u541b\u4e3b\u56fd, 1',\n '\u6e80\u671f, 1',\n '\u30dd\u30fc\u30c4\u30de\u30b9\u6761\u7d04, 1',\n 'Erich, 1',\n '\u7121\u985e, 1',\n '\u4e09\u5b85\u5f0f\u3053\u304f\u3054\u30c9\u30ea\u30eb, 1',\n '\u304a\u7d75\u304b\u304d, 1',\n '\u53e4\u5178\u8a9e, 1',\n '\u304c\u3089\u304c\u3089, 1',\n '\uff13\u3064, 1',\n '\u7d42\u6b62\u7b26, 1',\n '\u30a6\u30c9\u30e0\u30eb\u30c8, 1',\n '\u958b\u50ac\u56fd, 1',\n '\u30b5\u30c7\u30a3\u30fc\u30ad, 1',\n '\u4e8b\u7531, 1',\n '\u6771\u5317\u6025\u884c\u30d0\u30b9, 1',\n 'Jandarma, 1',\n '\u30ae\u30fc\u30e9\u30fc\u30f3\u5171\u548c\u56fd, 1',\n '\u30ec\u30aa\u30fb\u30b7\u30e5\u30c8\u30e9\u30a6\u30b9, 1',\n '\u5408\u540c\u4f1a\u8b70, 1',\n '\u30c7\u30b9\u30e9\u30c3\u30b7\u30e5\u30d0\u30a6\u30f3\u30c9, 1',\n '\u3086\u3063\u304f\u308a, 1',\n 'resource, 1',\n '\u30ef\u30e4\u30f3\u30fb\u30af\u30ea, 1',\n 'INJ, 1',\n '\u6843\u592a\u90ce\u96fb\u9244\u30b7\u30ea\u30fc\u30ba, 1']\n>>> \n>>> \n\n\n\n\n\u7279\u5b9a\u306e\u6587\u5b57\u5217\u3092\u542b\u3080\u30c8\u30fc\u30af\u30f3 \u306e \u51fa\u73fe\u56de\u6570 \u3092 \u8a72\u5f53\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3054\u3068 \u306b \u51fa\u529b\n\n\nPython 3.5.2\n>>> for token_cnt in corpus_token_freq_list:\n...     if \"\u4f1a\u8b70\" in token_cnt:\n...             print(token_cnt)\n... \n\u4f1a\u8b70, 33\n\u9023\u90a6\u4f1a\u8b70, 3\n\u5186\u5353\u4f1a\u8b70, 2\n\u30d9\u30eb\u30ea\u30f3\u4f1a\u8b70, 2\n\u56fd\u5bb6\u5b89\u5168\u4fdd\u969c\u4f1a\u8b70, 2\n\u30a4\u30d9\u30ed\u30a2\u30e1\u30ea\u30ab\u9996\u8133\u4f1a\u8b70, 1\n\u30d1\u30ea\u8b1b\u548c\u4f1a\u8b70, 1\n\u6700\u9ad8\u4f1a\u8b70, 1\n\u5168\u6b27\u5b89\u5168\u4fdd\u969c\u5354\u529b\u4f1a\u8b70, 1\n2013\u5e74\u6771\u4eac\u90fd\u8b70\u4f1a\u8b70\u54e1\u9078\u6319, 1\n\u8457\u4f5c\u6a29\u4fdd\u8b77\u671f\u9593\u306e\u5ef6\u9577\u554f\u984c\u3092\u8003\u3048\u308b\u56fd\u6c11\u4f1a\u8b70, 1\n\u30a6\u30a3\u30fc\u30f3\u4f1a\u8b70, 1\n\u5927\u672c\u55b6\u653f\u5e9c\u9023\u7d61\u4f1a\u8b70, 1\n\u5546\u5de5\u4f1a\u8b70\u6240, 1\n\u30c0\u30fc\u30c8\u30de\u30b9\u4f1a\u8b70, 1\n\u6b27\u5dde\u8b70\u4f1a\u8b70\u54e1, 1\n\u5408\u540c\u4f1a\u8b70, 1\n>>> \n\n\n\nPython 3.5.2\n>>> for token_cnt in corpus_token_freq_list:\n...     if \"\u30b5\u30c3\u30ab\u30fc\" in token_cnt:\n...             print(token_cnt)\n... \n\u30b5\u30c3\u30ab\u30fc, 16\n\u30b5\u30c3\u30ab\u30fc\u30af\u30e9\u30d6, 3\n\u56fd\u969b\u30b5\u30c3\u30ab\u30fc\u9023\u76df, 2\n\u30d7\u30ed\u30b5\u30c3\u30ab\u30fc\u30af\u30e9\u30d6\u3092\u3064\u304f\u308d\u3046, 2\n\u30b5\u30c3\u30ab\u30fc\u30a4\u30e9\u30af\u4ee3\u8868, 2\n\u30b5\u30c3\u30ab\u30fc\u304f\u3058, 1\n\u30b5\u30c3\u30ab\u30fc\u30ea\u30fc\u30b0, 1\n\u30ed\u30b7\u30a2\u30b5\u30c3\u30ab\u30fc\u30fb\u30d7\u30ec\u30df\u30a2\u30ea\u30fc\u30b0, 1\n\u30b5\u30c3\u30ab\u30fc\u30a4\u30e9\u30f3\u4ee3\u8868, 1\n\u30b5\u30c3\u30ab\u30fc\u5834, 1\n\u30b5\u30c3\u30ab\u30fc\u5354\u4f1a, 1\n>>>  \n\n\n\u5358\u7d14\u306a\u30b3\u30fc\u30c9\u3067\u3059\u304c\u3001\u4e45\u3057\u3076\u308a\u306b\u5229\u7528\u5834\u9762\u306b\u906d\u9047\u3059\u308b\u3068\u5fd8\u308c\u308b\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306e\u5099\u5fd8\u9332\u307e\u3067\u3002\n\n___\n\n####__\uff08 Wikipedia\uff08\u65e5\u672c\u8a9e\uff09\u5168\u91cf\u30c7\u30fc\u30bf\u3092DL\u3057\u305f\u3082\u306e \u3092 \u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u4f7f\u7528 \uff09__\n\n```{bash:Terminal}\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ ls | head \nall_wiki_sentences.txt\njawiki-latest-pages-articles.xml-001.txt\njawiki-latest-pages-articles.xml-002.txt\njawiki-latest-pages-articles.xml-003.txt\njawiki-latest-pages-articles.xml-004.txt\njawiki-latest-pages-articles.xml-005.txt\njawiki-latest-pages-articles.xml-006.txt\njawiki-latest-pages-articles.xml-007.txt\njawiki-latest-pages-articles.xml-008.txt\njawiki-latest-pages-articles.xml-009.txt\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ \nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ wc -l all_wiki_sentences.txt \n 40438738 all_wiki_sentences.txt\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ wc -l jawiki-latest-pages-articles.xml-* | head\n  121056 jawiki-latest-pages-articles.xml-001.txt\n  103388 jawiki-latest-pages-articles.xml-002.txt\n  108988 jawiki-latest-pages-articles.xml-003.txt\n  113225 jawiki-latest-pages-articles.xml-004.txt\n  111754 jawiki-latest-pages-articles.xml-005.txt\n  114759 jawiki-latest-pages-articles.xml-006.txt\n  103803 jawiki-latest-pages-articles.xml-007.txt\n  112778 jawiki-latest-pages-articles.xml-008.txt\n  117041 jawiki-latest-pages-articles.xml-009.txt\n  122210 jawiki-latest-pages-articles.xml-010.txt\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ \nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ head jawiki-latest-pages-articles.xml-001.txt\n[[\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9]]\n\n\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9 (ampersand, &) \u3068\u306f\u300c\u2026\u3068\u2026\u300d\u3092\u610f\u5473\u3059\u308b\u8a18\u53f7\u3067\u3042\u308b\u3002\u82f1\u8a9e\u306e \"and\" \u306b\u76f8\u5f53\u3059\u308b\u30e9\u30c6\u30f3\u8a9e\u306e \"et\" \u306e\u5408\u5b57\u3067\u3001\"etc.\" (et cetera = and so forth)\u3092 \"&c.\" \u3068\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u306f\u305d\u306e\u305f\u3081\u3002Trebuchet MS\u30d5\u30a9\u30f3\u30c8\u3067\u306f\u300110px\u3068\u8868\u793a\u3055\u308c \"et\" \u306e\u5408\u5b57\u3067\u3042\u308b\u3053\u3068\u304c\u5bb9\u6613\u306b\u308f\u304b\u308b\u3002\n\n==\u6b74\u53f2==\n\n\u305d\u306e\u4f7f\u7528\u306f1\u4e16\u7d00\u306b\u9061\u308b\u3053\u3068\u304c\u3067\u304d (1)\u30015\u4e16\u7d00\u4e2d\u8449 (2,3) \u304b\u3089\u73fe\u4ee3 (4-6) \u306b\u81f3\u308b\u307e\u3067\u306e\u5909\u9077\u304c\u308f\u304b\u308b\u3002\n\nZ \u306b\u7d9a\u304f\u30e9\u30c6\u30f3\u6587\u5b57\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e27\u5b57\u76ee\u3068\u3055\u308c\u305f\u6642\u671f\u3082\u3042\u308b\u3002\n\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ \nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ head jawiki-latest-pages-articles.xml-002.txt\n[[\u5171\u6709\u30e1\u30e2\u30ea]]\n\n\u60c5\u5831\u51e6\u7406\u306b\u304a\u3044\u3066\u5171\u6709\u30e1\u30e2\u30ea\uff08\u304d\u3087\u3046\u3086\u3046-\uff09\u3068\u306f\u3001\u8907\u6570\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u540c\u6642\u4e26\u884c\u7684\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30e1\u30e2\u30ea\u3067\u3042\u308b\u3002\n\n==\u6982\u8981==\n\n\u8907\u6570\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u9593\u306e\u901a\u4fe1\u624b\u6bb5\u3068\u3057\u3066\u4f7f\u3046\u5834\u5408\u3068\u3001\u5358\u306b\u8907\u88fd\u3092\u7528\u610f\u3059\u308b\u5197\u9577\u3055\u3092\u9632\u3050\u76ee\u7684\u306e\u5834\u5408\u306a\u3069\u304c\u3042\u308b\u3002\u5171\u6709\u30e1\u30e2\u30ea\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u9593\u3067\u30c7\u30fc\u30bf\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u52b9\u7387\u7684\u624b\u6bb5\u3067\u3042\u308b\u3002\u6587\u8108\u306b\u3088\u3063\u3066\u3001\u305d\u308c\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5358\u4e00\u306e\u30d7\u30ed\u30bb\u30c3\u30b5\u4e0a\u3067\u52d5\u4f5c\u3059\u308b\u5834\u5408\u3068\u8907\u6570\u306e\u7570\u306a\u308b\u30d7\u30ed\u30bb\u30c3\u30b5\u7fa4\u4e0a\u3067\u52d5\u4f5c\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u3002\u5358\u4e00\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5185\u90e8\u3067\u30e1\u30e2\u30ea\u3092\u4f7f\u3063\u3066\u901a\u4fe1\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u3001\u4f8b\u3048\u3070\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u304c\u5178\u578b\u7684\u3060\u304c\u3001\u4eee\u60f3\u7a7a\u9593\u3092\u3082\u3068\u3082\u3068\u5171\u6709\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u300c\u5171\u6709\u30e1\u30e2\u30ea\u300d\u3068\u306f\u547c\u3070\u306a\u3044\u3002\n\n==\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306b\u3088\u308b\u5171\u6709\u30e1\u30e2\u30ea==\n\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ \n```\n\n\n\n\n___\n\n####__Python 3.5.2 \u3067 (string\u578b\u3067\uff09\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f__\n\n```{python:Python 3.5.2}\nHirofumiYashima-no-MacBook:wikipedia hirofumiyashima$ python\nPython 3.5.2 (default, Jul 23 2016, 14:25:12) \n[GCC 4.2.1 Compatible Apple LLVM 7.3.0 (clang-703.0.31)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n>>> import codecs\n>>> \n>>> with codecs.open(\"jawiki-latest-pages-articles.xml-001.txt\", \"r\", \"utf-8\") as f:\n...     corpus = f.read()\n... \n>>>\n```\n\n```{python:Python 3.5.2}\n>>> import types\n>>> type(corpus)\n<class 'str'>\n>>> \n>>> len(corpus)\n4417260\n>>>\n```\n\n```{python:Python 3.5.2}\n>>> print(corpus[0:100])\n[[\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9]]\n\n\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9 (ampersand, &) \u3068\u306f\u300c\u2026\u3068\u2026\u300d\u3092\u610f\u5473\u3059\u308b\u8a18\u53f7\u3067\u3042\u308b\u3002\u82f1\u8a9e\u306e \"and\" \u306b\u76f8\u5f53\u3059\u308b\u30e9\u30c6\u30f3\u8a9e\u306e \"et\" \u306e\u5408\u5b57\u3067\u3001\"etc.\" (et cetera\n>>> \n>>> print(corpus[-100: ])\nRandy Kath, Microsoft Developer Network Technology Group, 12 December 1992 |date= 20100622062522 }}\n\n>>> \n```\n\n___\n\n###__Mecab ipadic-neologd\u8f9e\u66f8\u3067\u3001\u5206\u304b\u3061\u66f8\u304d\u306e\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8 \u306b \u3059\u308b__\n\n```{python:Python 3.5.2}\n>>> import MeCab\n>>> tagger_owakati = MeCab.Tagger(\"-Ochasen -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd -Owakati\")\n>>> \n>>> mecab_owakati_result = tagger_owakati.parse(corpus)\n>>> \n>>> type(mecab_owakati_result)\n<class 'NoneType'>\n>>> \n>>> print(mecab_owakati_result)\nNone\n>>>\n```\n\n####__None\u304c\u8fd4\u3055\u308c\u305f__\n\n* __\u6587\u5b57\u6570\u304c\u591a\u3059\u304e\u308b\u3068\u3001\u591a\u5206\u304b\u3061\u66f8\u304d\u304c\u30b3\u30b1\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002__\n\n___\n\n* __\u4ee5\u4e0b\u306f\u3001\u5206\u304b\u3061\u66f8\u304d\u304c\u3061\u3083\u3093\u3068\u8fd4\u3055\u308c\u308b__\n\n* [HirofumiYashima Qiitakiji (\u6700\u7d42\u66f4\u65b0\u65e5: 2016\u5e7408\u670830\u65e5) \u300cmecab-ipadic-neologd \u4f7f\u3063\u3066 \u5206\u304b\u3061\u66f8\u304d\u3059\u308b\u306b\u306f\u3001mecab -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd \u306e \u5f8c\u306b -Owakati \u3092 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570 \u306b \u4e0e\u3048\u308c\u3070 \u51fa\u6765\u308b\u300d ](http://qiita.com/HirofumiYashima/items/cb6d00effbb2144d121b)\n\n\n```{python:Python 3.5.2}\n>>> mecab_owakati_result = tagger_owakati.parse(\"\u56fd\u9023\u306e\u6b21\u306e\u4e8b\u52d9\u7dcf\u9577\u3092\u9078\u3076\uff13\u56de\u76ee\u306e\u6295\u7968\u304c\u5b89\u5168\u4fdd\u969c\u7406\u4e8b\u4f1a\u3067\u884c\u308f\u308c\u3001\u904e\u53bb\uff12\u56de\u306e\u6295\u7968\u306b\u7d9a\u3044\u3066\u30b0\u30c6\u30fc\u30ec\u30b9\u524d\u56fd\u9023\u96e3\u6c11\u9ad8\u7b49\u5f01\u52d9\u5b98\u304c\u6700\u3082\u591a \u3044\u652f\u6301\u3092\u7372\u5f97\u3057\u3001\u4eca\u5f8c\u3001\u62d2\u5426\u6a29\u3092\u6301\u3064\u5e38\u4efb\u7406\u4e8b\u56fd\u304c\u3069\u306e\u3088\u3046\u306a\u5bfe\u5fdc\u3092\u898b\u305b\u308b\u306e\u304b\u3001\u6ce8\u76ee\u3055\u308c\u307e\u3059\u3002\")\n>>> print(mecab_owakati_result)\n\u56fd\u9023 \u306e \u6b21 \u306e \u4e8b\u52d9\u7dcf\u9577 \u3092 \u9078\u3076 \uff13 \u56de \u76ee \u306e \u6295\u7968 \u304c \u5b89\u5168\u4fdd\u969c\u7406\u4e8b\u4f1a \u3067 \u884c\u308f \u308c \u3001 \u904e\u53bb \uff12 \u56de \u306e \u6295\u7968 \u306b \u7d9a\u3044 \u3066 \u30b0\u30c6\u30fc\u30ec\u30b9 \u524d \u56fd\u9023\u96e3\u6c11\u9ad8\u7b49\u5f01\u52d9\u5b98 \u304c \u6700\u3082 \u591a\u3044 \u652f\u6301 \u3092 \u7372\u5f97 \u3057 \u3001 \u4eca\u5f8c \u3001 \u62d2\u5426\u6a29 \u3092 \u6301\u3064 \u5e38\u4efb\u7406\u4e8b\u56fd \u304c \u3069\u306e \u3088\u3046 \u306a \u5bfe\u5fdc \u3092 \u898b\u305b\u308b \u306e \u304b \u3001 \u6ce8\u76ee \u3055 \u308c \u307e\u3059 \u3002 \n\n>>>\n```\n\n___\n\n\n* __\u534a\u5206\u307e\u3067\u8aad\u307f\u8fbc\u3093\u3067\u3082\u3001None \u304c \u8fd4\u3063\u3066\u304f\u308b__\n\n```{python:Python 3.5.2}\n>>> length = len(corpus)\n>>> index = length/2\n>>> print(index)\n2208630.0\n>>> \n>>> index = int(length/2)\n>>> print(index)\n2208630\n>>> \n>>> \n>>> partial_corpus = corpus[0:index]\n>>> len(partial_corpus)\n2208630\n>>> \n>>> mecab_owakati_result = tagger_owakati.parse(partial_corpus)\n>>> len(mecab_owakati_result)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: object of type 'NoneType' has no len()\n>>>\n```\n\n* __1,000\u6587\u5b57 \u306a\u3089 OK__\n \n```{python:Python 3.5.2}\n>>> mecab_owakati_result = tagger_owakati.parse(corpus[0:1000])\n>>> len(mecab_owakati_result)\n1415\n>>>\n```\n\n* __100\u4e07\u6587\u5b57 \u3067 \u8fd4\u308a\u5024\u304c\u5f97\u3089\u308c\u305f\u306e\u3067\u3001\u5192\u982d 100\u4e07\u6587\u5b57 \u3092 \u90e8\u5206\u30b3\u30fc\u30d1\u30b9\u30c8 \u3068\u3057\u3066 \u4f7f\u7528__\n \n```{python:Python 3.5.2}\n>>> mecab_owakati_result = tagger_owakati.parse(corpus[0:1000000])\n>>> len(mecab_owakati_result)\n1402061\n>>> \n>>> print(mecab_owakati_result[0:10])\n[[ \u30a2\u30f3\u30d1\u30b5\u30f3\u30c9 \n>>> \n>>> from pprint import pprint\n>>> pprint(mecab_owakati_result[0:50])\n'[[ \u30a2\u30f3\u30d1\u30b5\u30f3\u30c9 ]] \u30a2\u30f3\u30d1\u30b5\u30f3\u30c9 ( ampersand , &) \u3068 \u306f \u300c \u2026 \u3068 \u2026 \u300d'\n>>> \n>>> type(mecab_owakati_result)\n<class 'str'>\n>>>\n```\n* __\u5206\u304b\u3061\u66f8\u304d\u3067\u5207\u308a\u51fa\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u3092\u8981\u7d20 \u306b \u6301\u3064 \u30ea\u30b9\u30c8\uff08\u914d\u5217\uff09 \u3092 \u751f\u6210__\n\n```{python:Python 3.5.2}\n>>> token_list = mecab_owakati_result.split(\" \")\n>>> type(token_list)\n<class 'list'>\n>>> len(token_list)\n454289\n>>>\n```\n \n\n```{python:Python 3.5.2}\n>>> pprint(token_list[0:50])\n['[[',\n '\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9',\n ']]',\n '\u30a2\u30f3\u30d1\u30b5\u30f3\u30c9',\n '(',\n 'ampersand',\n ',',\n '&)',\n '\u3068',\n '\u306f',\n '\u300c',\n '\u2026',\n '\u3068',\n '\u2026',\n '\u300d',\n '\u3092',\n '\u610f\u5473',\n '\u3059\u308b',\n '\u8a18\u53f7',\n '\u3067',\n '\u3042\u308b',\n '\u3002',\n '\u82f1\u8a9e',\n '\u306e',\n '\"',\n 'and',\n '\"',\n '\u306b',\n '\u76f8\u5f53',\n '\u3059\u308b',\n '\u30e9\u30c6\u30f3\u8a9e',\n '\u306e',\n '\"',\n 'et',\n '\"',\n '\u306e',\n '\u5408\u5b57',\n '\u3067',\n '\u3001',\n '\"',\n 'etc.',\n '\"',\n '(',\n 'et',\n 'cetera',\n '=',\n 'and',\n 'so',\n 'forth',\n ')']\n>>> \n>>> len(list(set(token_list)))\n42776\n>>> \n>>> len(token_list)\n454289\n>>> \n```\n\n###__collections.Counter\u30e2\u30b8\u30e5\u30fc\u30eb \u306e counter\u30e1\u30bd\u30c3\u30c9 \u3092 \u7528\u3044\u3066 \u30c8\u30fc\u30af\u30f3\u3054\u3068\u306e\u51fa\u73fe\u56de\u6570 \u3092 \u96c6\u8a08\u3059\u308b__\n\n```{python:Python 3.5.2}\n>>> from collections import Counter\n>>> counter = Counter(token_list)\n>>>\n>>> corpus_token_freq_list = [(word, cnt) for [word, cnt] in counter.most_common()]\n>>> len(corpus_token_freq_list)\n42776\n>>> \n>>> pprint(corpus_token_freq_list[0:200])\n[('\u3001', 20112),\n ('\u306e', 19970),\n ('\u306f', 11583),\n ('\u3002', 11479),\n ('\u306b', 10866),\n ('\u3092', 9694),\n ('\u304c', 9176),\n ('\u3067', 8122),\n ('\u305f', 6796),\n ('[[', 6447),\n ('\u3068', 6418),\n (']]', 6113),\n ('\u3066', 5782),\n ('*', 5649),\n ('\uff09', 5560),\n ('\u3057', 4620),\n ('\uff08', 4577),\n ('|', 3483),\n ('\u300c', 3476),\n ('\u300d', 3444),\n ('\u3042\u308b', 3391),\n ('\u3059\u308b', 2961),\n ('\u3082', 2899),\n ('\u30fb', 2811),\n ('\u3044\u308b', 2715),\n ('-', 2715),\n ('\u3055', 2698),\n ('\u308c', 2678),\n ('\u306a', 2356),\n ('=', 1964),\n ('\u3053\u3068', 1963),\n ('===', 1851),\n ('==', 1788),\n ('\u306a\u3069', 1751),\n ('(', 1633),\n ('\u300f', 1625),\n ('\u300e', 1580),\n ('\u3084', 1578),\n ('\u304b\u3089', 1537),\n ('.', 1522),\n ('\u308c\u308b', 1341),\n ('*[[', 1332),\n ('\u306a\u3044', 1307),\n ('\u7684', 1273),\n ('\u3068\u3057\u3066', 1212),\n ('/', 1108),\n (']]\uff08', 1063),\n ('\u3088\u3046', 981),\n (':', 896),\n ('\u3082\u306e', 866),\n ('\u3044', 843),\n ('\u306a\u3063', 821),\n (')', 808),\n ('\u3068\u3044\u3046', 789),\n ('\u305d\u306e', 762),\n ('\u3053\u306e', 752),\n ('**', 723),\n ('\u305f\u3081', 719),\n ('\u3042\u308a', 712),\n (',', 660),\n ('\u307e\u305f', 617),\n (']]\u3001[[', 604),\n (')|', 575),\n ('\u306b\u3088\u3063\u3066', 563),\n ('\u8a00\u8a9e', 561),\n ('\u306a\u308b', 556),\n ('1', 548),\n ('}}', 546),\n ('\u3089\u308c', 523),\n ('{{', 516),\n ('\u4eba', 509),\n ('2', 508),\n ('\u304b', 490),\n (']]\uff09', 487),\n ('ref', 483),\n ('\u3042\u3063', 475),\n ('\u3089\u308c\u308b', 474),\n ('\u5834\u5408', 468),\n ('\u306b\u3088\u308b', 453),\n ('\u8a9e', 450),\n ('\u7b2c', 438),\n ('\u307e\u3067', 437),\n ('\u65e5\u672c', 428),\n ('\u4f5c\u54c1', 423),\n (';', 418),\n ('\u3053\u308c', 398),\n ('\u3060', 397),\n ('\u3078', 392),\n ('====', 389),\n ('\u306b\u304a\u3044\u3066', 387),\n ('\u304a\u308a', 387),\n ('http://', 386),\n ('\u5316', 378),\n ('\u5f8c', 368),\n ('\u4e2d', 361),\n ('\u591a\u304f', 357),\n ('\u306b\u3088\u308a', 354),\n ('\u30b2\u30fc\u30e0', 353),\n ('\u7814\u7a76', 352),\n ('\u73fe\u5728', 352),\n ('\u30d1\u30ea', 349),\n ('\u65e5\u672c\u8a9e', 345),\n ('\u306b\u3064\u3044\u3066', 342),\n ('\u5b58\u5728', 342),\n ('\u3088\u308a', 339),\n ('4', 333),\n ('\u8005', 320),\n ('\u3070', 310),\n ('3', 310),\n ('\u53f7', 309),\n ('\u591a\u3044', 303),\n ('\u306a\u304f', 296),\n (':*', 296),\n ('\u4e0a', 294),\n ('\u305d\u308c', 291),\n ('\u4ed6', 285),\n ('\u3067\u304d\u308b', 285),\n ('\u97f3\u697d', 282),\n ('\u305a', 276),\n ('www', 274),\n ('\u7528\u3044', 274),\n ('\u4e16\u754c', 266),\n ('\u8457\u4f5c\u6a29', 263),\n ('\u65b9\u8a00', 258),\n ('>', 255),\n ('\u5dfb', 255),\n ('#', 255),\n ('<', 253),\n ('\u54f2\u5b66', 246),\n ('[', 244),\n ('\u5730\u57df', 239),\n ('ISBN', 238),\n ('\u4e00\u89a7', 237),\n ('\u9023\u8f09', 235),\n ('\u5168', 234),\n ('\u306a\u308a', 232),\n ('\u3057\u304b\u3057', 230),\n ('\u56fd', 229),\n ('\u4e07', 229),\n ('</', 226),\n ('\u610f\u5473', 224),\n ('en', 223),\n (']', 221),\n ('\u95a2\u4fc2', 218),\n ('\u4f7f\u7528', 217),\n ('\u6642', 216),\n ('\u97f3', 215),\n ('\u305b', 215),\n ('\u4e00', 214),\n ('%', 213),\n ('\u8457\u4f5c\u7269', 212),\n ('\u6f2b\u753b', 210),\n ('_', 209),\n ('\uff1a', 206),\n ('\u5206\u91ce', 205),\n ('\u304d', 204),\n ('\u304a\u3088\u3073', 200),\n ('\u7b49', 200),\n ('\"', 199),\n ('\u6570', 197),\n ('\u5206\u985e', 196),\n (']]\u3001', 194),\n ('\u6f2b\u753b\u5bb6', 194),\n ('\u30a4\u30e9\u30f3', 194),\n ('\u5f71\u97ff', 193),\n ('\u547c\u3070', 190),\n ('\u4eba\u9593', 188),\n ('\u554f\u984c', 188),\n ('\u793e\u4f1a', 187),\n ('\u767a\u97f3', 187),\n ('\u898b', 186),\n ('\u884c\u308f', 186),\n ('\u6642\u4ee3', 183),\n ('\u5927', 183),\n ('\u306b\u304a\u3051\u308b', 182),\n ('\u3046', 179),\n ('5', 179),\n ('\u6620\u753b', 177),\n ('\u4f8b', 177),\n ('\\u3000', 176),\n ('\u30aa\u30fc\u30b9\u30c8\u30ea\u30a2', 176),\n ('\u30d4\u30a2\u30ce', 175),\n ('\u3053\u308c\u3089', 173),\n ('\u4f7f\u308f', 171),\n ('\u4e00\u822c', 170),\n ('\u8868\u73fe', 169),\n (\"'''\", 167),\n ('\u30e8\u30fc\u30ed\u30c3\u30d1', 167),\n ('\u4ee5\u964d', 166),\n ('\uff08[[', 166),\n ('\u305f\u308a', 166),\n ('\u95a2\u9023', 165),\n ('\u9593', 164),\n (']]\uff08[[', 163),\n ('\u53ef\u80fd', 162),\n ('\u9803', 162),\n ('\u4e00\u65b9', 161),\n ('\u306a\u304b\u3063', 160),\n ('\u4ee5\u4e0b', 160),\n ('\u305f\u3060\u3057', 158)]\n>>>\n```\n\n####__\u9069\u5f53\u306a\u30c7\u30fc\u30bf\u5f62\u5f0f \u306b \u51fa\u529b__\n\n\n```{python:Python 3.5.2}\n>>> corpus_token_freq_list = [\"{word}, {cnt}\".format(word=word,cnt=cnt) for word, cnt in counter.most_common()]\n>>> print(corpus_token_freq_list[0:20])\n['\u3001, 20112', '\u306e, 19970', '\u306f, 11583', '\u3002, 11479', '\u306b, 10866', '\u3092, 9694', '\u304c, 9176', '\u3067, 8122', '\u305f, 6796', '[[, 6447', '\u3068, 6418', ']], 6113', '\u3066, 5782', '*, 5649', '\uff09, 5560', '\u3057, 4620', '\uff08, 4577', '|, 3483', '\u300c, 3476', '\u300d, 3444']\n>>>\n```\n\n\n```{python:Python 3.5.2}\n>>> pprint(corpus_token_freq_list[0:50])\n['\u3001, 20112',\n '\u306e, 19970',\n '\u306f, 11583',\n '\u3002, 11479',\n '\u306b, 10866',\n '\u3092, 9694',\n '\u304c, 9176',\n '\u3067, 8122',\n '\u305f, 6796',\n '[[, 6447',\n '\u3068, 6418',\n ']], 6113',\n '\u3066, 5782',\n '*, 5649',\n '\uff09, 5560',\n '\u3057, 4620',\n '\uff08, 4577',\n '|, 3483',\n '\u300c, 3476',\n '\u300d, 3444',\n '\u3042\u308b, 3391',\n '\u3059\u308b, 2961',\n '\u3082, 2899',\n '\u30fb, 2811',\n '\u3044\u308b, 2715',\n '-, 2715',\n '\u3055, 2698',\n '\u308c, 2678',\n '\u306a, 2356',\n '=, 1964',\n '\u3053\u3068, 1963',\n '===, 1851',\n '==, 1788',\n '\u306a\u3069, 1751',\n '(, 1633',\n '\u300f, 1625',\n '\u300e, 1580',\n '\u3084, 1578',\n '\u304b\u3089, 1537',\n '., 1522',\n '\u308c\u308b, 1341',\n '*[[, 1332',\n '\u306a\u3044, 1307',\n '\u7684, 1273',\n '\u3068\u3057\u3066, 1212',\n '/, 1108',\n ']]\uff08, 1063',\n '\u3088\u3046, 981',\n ':, 896',\n '\u3082\u306e, 866']\n>>>\n```\n\n\n\n```{python:Python 3.5.2}\n>>> pprint(corpus_token_freq_list[-50:])\n['\u7d0d, 1',\n '\u30b8\u30e7\u30e0\u30d5\u30fc\u30ea\u30fc\u30a4\u30a7\u30fb\u30a8\u30b9\u30e9\u30fc\u30df\u30fc\u30a4\u30a7\u30fb\u30a4\u30fc\u30e9\u30fc\u30f3, 1',\n '\u30d0\u30f3\u30c0\u30a4\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b9, 1',\n '\u30cf\u30fc\u30c4\u30db\u30fc\u30f3, 1',\n 'Pfandl, 1',\n '4753656225, 1',\n 'Parisiens, 1',\n '\u52e2, 1',\n '\u5b66\u3079, 1',\n '\u5c71\u53e3\u770c, 1',\n 'gomasio, 1',\n '\u30ed\u30fc\u30b6\u30fb\u30eb\u30af\u30bb\u30f3\u30d6\u30eb\u30af, 1',\n '\u30c8\u30f3\u30c7\u30e2, 1',\n '\u5fd7\u6751\u8cb4\u5b50, 1',\n 'Mucho, 1',\n '\u30d5\u30ea\u30fc\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2, 1',\n '\u30b5\u30f3\u30dc, 1',\n '\u6771\u4eac\u56fd\u969b\u7a7a\u6e2f, 1',\n '\u30bf\u30a4\u30c8\u30fb\u30d3\u30fc, 1',\n '\u30e9\u30b7\u30e5\u30c8, 1',\n '\u30e2\u30ca\u30b9\u30c6\u30a3\u30eb, 1',\n 'Conisch, 1',\n 'Vernon, 1',\n '\u6a2a\u624b\u5e02, 1',\n '\u30cf\u30d7\u30b9\u30d6\u30eb\u30af\u541b\u4e3b\u56fd, 1',\n '\u6e80\u671f, 1',\n '\u30dd\u30fc\u30c4\u30de\u30b9\u6761\u7d04, 1',\n 'Erich, 1',\n '\u7121\u985e, 1',\n '\u4e09\u5b85\u5f0f\u3053\u304f\u3054\u30c9\u30ea\u30eb, 1',\n '\u304a\u7d75\u304b\u304d, 1',\n '\u53e4\u5178\u8a9e, 1',\n '\u304c\u3089\u304c\u3089, 1',\n '\uff13\u3064, 1',\n '\u7d42\u6b62\u7b26, 1',\n '\u30a6\u30c9\u30e0\u30eb\u30c8, 1',\n '\u958b\u50ac\u56fd, 1',\n '\u30b5\u30c7\u30a3\u30fc\u30ad, 1',\n '\u4e8b\u7531, 1',\n '\u6771\u5317\u6025\u884c\u30d0\u30b9, 1',\n 'Jandarma, 1',\n '\u30ae\u30fc\u30e9\u30fc\u30f3\u5171\u548c\u56fd, 1',\n '\u30ec\u30aa\u30fb\u30b7\u30e5\u30c8\u30e9\u30a6\u30b9, 1',\n '\u5408\u540c\u4f1a\u8b70, 1',\n '\u30c7\u30b9\u30e9\u30c3\u30b7\u30e5\u30d0\u30a6\u30f3\u30c9, 1',\n '\u3086\u3063\u304f\u308a, 1',\n 'resource, 1',\n '\u30ef\u30e4\u30f3\u30fb\u30af\u30ea, 1',\n 'INJ, 1',\n '\u6843\u592a\u90ce\u96fb\u9244\u30b7\u30ea\u30fc\u30ba, 1']\n>>> \n>>> \n```\n\n\n___\n\n####__\u7279\u5b9a\u306e\u6587\u5b57\u5217\u3092\u542b\u3080\u30c8\u30fc\u30af\u30f3 \u306e \u51fa\u73fe\u56de\u6570 \u3092 \u8a72\u5f53\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3054\u3068 \u306b \u51fa\u529b__\n\n\n```{python:Python 3.5.2}\n>>> for token_cnt in corpus_token_freq_list:\n...     if \"\u4f1a\u8b70\" in token_cnt:\n...             print(token_cnt)\n... \n\u4f1a\u8b70, 33\n\u9023\u90a6\u4f1a\u8b70, 3\n\u5186\u5353\u4f1a\u8b70, 2\n\u30d9\u30eb\u30ea\u30f3\u4f1a\u8b70, 2\n\u56fd\u5bb6\u5b89\u5168\u4fdd\u969c\u4f1a\u8b70, 2\n\u30a4\u30d9\u30ed\u30a2\u30e1\u30ea\u30ab\u9996\u8133\u4f1a\u8b70, 1\n\u30d1\u30ea\u8b1b\u548c\u4f1a\u8b70, 1\n\u6700\u9ad8\u4f1a\u8b70, 1\n\u5168\u6b27\u5b89\u5168\u4fdd\u969c\u5354\u529b\u4f1a\u8b70, 1\n2013\u5e74\u6771\u4eac\u90fd\u8b70\u4f1a\u8b70\u54e1\u9078\u6319, 1\n\u8457\u4f5c\u6a29\u4fdd\u8b77\u671f\u9593\u306e\u5ef6\u9577\u554f\u984c\u3092\u8003\u3048\u308b\u56fd\u6c11\u4f1a\u8b70, 1\n\u30a6\u30a3\u30fc\u30f3\u4f1a\u8b70, 1\n\u5927\u672c\u55b6\u653f\u5e9c\u9023\u7d61\u4f1a\u8b70, 1\n\u5546\u5de5\u4f1a\u8b70\u6240, 1\n\u30c0\u30fc\u30c8\u30de\u30b9\u4f1a\u8b70, 1\n\u6b27\u5dde\u8b70\u4f1a\u8b70\u54e1, 1\n\u5408\u540c\u4f1a\u8b70, 1\n>>> \n```\n\n```{python:Python 3.5.2}\n>>> for token_cnt in corpus_token_freq_list:\n...     if \"\u30b5\u30c3\u30ab\u30fc\" in token_cnt:\n...             print(token_cnt)\n... \n\u30b5\u30c3\u30ab\u30fc, 16\n\u30b5\u30c3\u30ab\u30fc\u30af\u30e9\u30d6, 3\n\u56fd\u969b\u30b5\u30c3\u30ab\u30fc\u9023\u76df, 2\n\u30d7\u30ed\u30b5\u30c3\u30ab\u30fc\u30af\u30e9\u30d6\u3092\u3064\u304f\u308d\u3046, 2\n\u30b5\u30c3\u30ab\u30fc\u30a4\u30e9\u30af\u4ee3\u8868, 2\n\u30b5\u30c3\u30ab\u30fc\u304f\u3058, 1\n\u30b5\u30c3\u30ab\u30fc\u30ea\u30fc\u30b0, 1\n\u30ed\u30b7\u30a2\u30b5\u30c3\u30ab\u30fc\u30fb\u30d7\u30ec\u30df\u30a2\u30ea\u30fc\u30b0, 1\n\u30b5\u30c3\u30ab\u30fc\u30a4\u30e9\u30f3\u4ee3\u8868, 1\n\u30b5\u30c3\u30ab\u30fc\u5834, 1\n\u30b5\u30c3\u30ab\u30fc\u5354\u4f1a, 1\n>>>  \n```\n"}