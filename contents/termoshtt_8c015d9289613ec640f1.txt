{"context": "Rust\u306b\u306f\u4f8b\u5916\u304c\u306a\u3044\u3002\n\u5168\u3066\u306e\u5931\u6557\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u8a08\u7b97\u306fOption\u3084Result\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3059\u308b\u3002\nfn read_file(filename: &str) -> Result<String, io::Error> {\n    let mut f = fs::File::open(filename)?;\n    let mut s = String::new();\n    f.read_to_string(&mut s)?;\n    Ok(s)\n}\n\n?\u6f14\u7b97\u5b50\u304c\u5b9f\u88c5\u3055\u308c\u305f\u3053\u3068\u3067\u8a18\u8ff0\u3082\u7c21\u5358\u306b\u306a\u3063\u305f\u3002\n\u3053\u306e\u4f8b\u3067\u306f\u4e8c\u3064\u306e?\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u3089\u306f\u3068\u3082\u306bio::Error\u3092\u8fd4\u3059\u306e\u3067Result<String, io::Error>\u3092\u4f7f\u7528\u3067\u304d\u308b\u3002\n\u3057\u304b\u3057\u3001\u5225\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u5834\u5408\u306f\u3069\u3046\u3060\u308d\u3046\uff1f\u4f8b\u3048\u3070\u30c7\u30fc\u30bf\u304cmsgpack\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u305f\u3068\u3059\u308b\u3068:\nfn read_msg<T: Decodable>(&self, filename: &str) -> Result<T, _> {\n    let mut buf = File::open(filename)?; // raise io::Error\n    let mut dec = Decoder::new(&mut buf);\n    let obj = Decodable::decode(&mut dec)?; // raise decode::Error\n    Ok(obj)\n}\n\n\u3082\u3061\u308d\u3093\u3053\u306e\u30b3\u30fc\u30c9\u306f\u52d5\u304b\u306a\u3044\u3002Result\u304c\u3061\u3083\u3093\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3089\u3060\u3002\n\u3067\u306f\u3053\u3053\u306b\u306f\u3069\u3093\u306a\u30a8\u30e9\u30fc\u3092\u5165\u308c\u308c\u3070\u3044\u3044\u306e\u3060\u308d\u3046\u304b\uff1f\u3053\u306e\u554f\u984c\u306f\u4ee5\u4e0b\u306e\u516c\u5f0f\u306eHP\u3067\u8b70\u8ad6\u3055\u308c\u3066\u3044\u308b\nhttps://doc.rust-lang.org/book/error-handling.html\n\u4e00\u756a\u7c21\u5358\u306a\u9078\u629e\u80a2\u306fBox<Error>\u3092\u4f7f\u3046\u3053\u3068\u3060\uff1a\nfn read_msg<T: Decodable>(&self, filename: &str) -> Result<T, Box<Error>> {\n    let mut buf = File::open(filename)?; // raise io::Error\n    let mut dec = Decoder::new(&mut buf);\n    let obj = Decodable::decode(&mut dec)?; // raise decode::Error\n    Ok(obj)\n}\n\n\u3061\u306a\u307f\u306b\u3053\u306eError\u306fstd::error::Error trait\u3092\u6307\u3059\uff08use\u6587\u306f\u7701\u7565\u3057\u3066\u3044\u308b\uff09\u3002\n\u5358\u7d14\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3053\u308c\u3067\u5341\u5206\u3060\u308d\u3046\u3002\u3057\u304b\u3057\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u63d0\u4f9b\u3059\u308b\u5834\u5408\u3001\n\u307e\u305f\u8907\u6570\u4eba\u6570\u3067\u5927\u898f\u6a21\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3061\u3083\u3093\u3068\u3057\u305f\u30a8\u30e9\u30fc\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u65b9\u304c\u90fd\u5408\u304c\u826f\u3044\u3002\n#[derive(Debug)]\nenum LoadError {\n    Io(io::Error),\n    Msgpack(decode::Error),\n}\n\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\uff1a\nfn read_msg<T: Decodable>(&self, filename: &str) -> Result<T, LoadError> {\n    let mut buf = File::open(filename)?; // raise io::Error\n    let mut dec = Decoder::new(&mut buf);\n    let obj = Decodable::decode(&mut dec)?; // raise decode::Error\n    Ok(obj)\n}\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3053\u308c\u306f\u52d5\u304b\u306a\u3044\u3002io::Error\u3084decode::Error\u304b\u3089LoadError\u306b\u5909\u63db\u3067\u304d\u306a\u3044\u304b\u3089\u3060\u3002\n\u4e0a\u8ff0\u306eHP\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3001From<io::Error>, From<decode::Error>\u3092\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3055\u3089\u306b\u3053\u308c\u306f\u30a8\u30e9\u30fc\u578b\u306a\u306e\u3067std::fmt::Display\u3068std::error::Error\u3092\u5b9f\u88c5\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u5f37\u304f\u63a8\u5968\u3055\u308c\u308b\u304c\u3001\n\u305d\u308c\u3089\u306fderive\u3067\u81ea\u52d5\u5b9f\u88c5\u3067\u304d\u306a\u3044\u3002\n\u3053\u308c\u307e\u3067\u306f\u3053\u308c\u3092\u81ea\u5206\u3067\u66f8\u3044\u3066\u304d\u305f\u306e\u3060\u304c\u3001\u3055\u3059\u304c\u306b\u9762\u5012\u306a\u306e\u3067\u3001enum-error-derive\u3092\u4f5c\u6210\u3057\u305f\u3002\nRust 1.15\u3088\u308a\u5c0e\u5165\u3055\u308c\u305fproc_macro\u3092\u4f7f\u7528\u3057\u3066\u3001\u81ea\u52d5\u3067\u4e0a\u8ff0\u306etrait\u3092\u5b9f\u88c5\u3059\u308b\u3002\u4f7f\u3044\u65b9\u306f\u7c21\u5358\u3067\u3001\n#[macro_use]\nextern crate enum_error_derive;\n\n#[derive(Debug, EnumError)]\nenum LoadError {\n    Io(io::Error),\n    Msgpack(decode::Error),\n}\n\n\u3053\u308c\u3060\u3051\u3067\u4e0a\u8ff0\u306eLoadError\u3092\u4f7f\u7528\u3057\u305fread_msg\u304c\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u3053\u308c\u3067\u7c21\u5358\u306b\u30a8\u30e9\u30fc\u3092\u5408\u6210\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002\n\u3084\u3063\u305f\u306d\uff01\nRust\u306b\u306f\u4f8b\u5916\u304c\u306a\u3044\u3002\n\u5168\u3066\u306e\u5931\u6557\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u8a08\u7b97\u306fOption\u3084Result\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3059\u308b\u3002\n\n```rust\nfn read_file(filename: &str) -> Result<String, io::Error> {\n    let mut f = fs::File::open(filename)?;\n    let mut s = String::new();\n    f.read_to_string(&mut s)?;\n    Ok(s)\n}\n```\n\n`?`\u6f14\u7b97\u5b50\u304c\u5b9f\u88c5\u3055\u308c\u305f\u3053\u3068\u3067\u8a18\u8ff0\u3082\u7c21\u5358\u306b\u306a\u3063\u305f\u3002\n\u3053\u306e\u4f8b\u3067\u306f\u4e8c\u3064\u306e`?`\u304c\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u3089\u306f\u3068\u3082\u306b`io::Error`\u3092\u8fd4\u3059\u306e\u3067`Result<String, io::Error>`\u3092\u4f7f\u7528\u3067\u304d\u308b\u3002\n\u3057\u304b\u3057\u3001\u5225\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u5834\u5408\u306f\u3069\u3046\u3060\u308d\u3046\uff1f\u4f8b\u3048\u3070\u30c7\u30fc\u30bf\u304cmsgpack\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u305f\u3068\u3059\u308b\u3068:\n\n```rust\nfn read_msg<T: Decodable>(&self, filename: &str) -> Result<T, _> {\n    let mut buf = File::open(filename)?; // raise io::Error\n    let mut dec = Decoder::new(&mut buf);\n    let obj = Decodable::decode(&mut dec)?; // raise decode::Error\n    Ok(obj)\n}\n```\n\n\u3082\u3061\u308d\u3093\u3053\u306e\u30b3\u30fc\u30c9\u306f\u52d5\u304b\u306a\u3044\u3002`Result`\u304c\u3061\u3083\u3093\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u3089\u3060\u3002\n\u3067\u306f\u3053\u3053\u306b\u306f\u3069\u3093\u306a\u30a8\u30e9\u30fc\u3092\u5165\u308c\u308c\u3070\u3044\u3044\u306e\u3060\u308d\u3046\u304b\uff1f\u3053\u306e\u554f\u984c\u306f\u4ee5\u4e0b\u306e\u516c\u5f0f\u306eHP\u3067\u8b70\u8ad6\u3055\u308c\u3066\u3044\u308b\nhttps://doc.rust-lang.org/book/error-handling.html\n\n\u4e00\u756a\u7c21\u5358\u306a\u9078\u629e\u80a2\u306f`Box<Error>`\u3092\u4f7f\u3046\u3053\u3068\u3060\uff1a\n\n```rust\nfn read_msg<T: Decodable>(&self, filename: &str) -> Result<T, Box<Error>> {\n    let mut buf = File::open(filename)?; // raise io::Error\n    let mut dec = Decoder::new(&mut buf);\n    let obj = Decodable::decode(&mut dec)?; // raise decode::Error\n    Ok(obj)\n}\n```\n\n\u3061\u306a\u307f\u306b\u3053\u306e`Error`\u306f`std::error::Error` trait\u3092\u6307\u3059\uff08use\u6587\u306f\u7701\u7565\u3057\u3066\u3044\u308b\uff09\u3002\n\u5358\u7d14\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3053\u308c\u3067\u5341\u5206\u3060\u308d\u3046\u3002\u3057\u304b\u3057\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u63d0\u4f9b\u3059\u308b\u5834\u5408\u3001\n\u307e\u305f\u8907\u6570\u4eba\u6570\u3067\u5927\u898f\u6a21\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u3061\u3083\u3093\u3068\u3057\u305f\u30a8\u30e9\u30fc\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u65b9\u304c\u90fd\u5408\u304c\u826f\u3044\u3002\n\n```rust\n#[derive(Debug)]\nenum LoadError {\n    Io(io::Error),\n    Msgpack(decode::Error),\n}\n```\n\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\uff1a\n\n```rust\nfn read_msg<T: Decodable>(&self, filename: &str) -> Result<T, LoadError> {\n    let mut buf = File::open(filename)?; // raise io::Error\n    let mut dec = Decoder::new(&mut buf);\n    let obj = Decodable::decode(&mut dec)?; // raise decode::Error\n    Ok(obj)\n}\n```\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3053\u308c\u306f\u52d5\u304b\u306a\u3044\u3002`io::Error`\u3084`decode::Error`\u304b\u3089`LoadError`\u306b\u5909\u63db\u3067\u304d\u306a\u3044\u304b\u3089\u3060\u3002\n\u4e0a\u8ff0\u306eHP\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3001`From<io::Error>`, `From<decode::Error>`\u3092\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3055\u3089\u306b\u3053\u308c\u306f\u30a8\u30e9\u30fc\u578b\u306a\u306e\u3067`std::fmt::Display`\u3068`std::error::Error`\u3092\u5b9f\u88c5\u3057\u3066\u304a\u304f\u3053\u3068\u304c\u5f37\u304f\u63a8\u5968\u3055\u308c\u308b\u304c\u3001\n\u305d\u308c\u3089\u306fderive\u3067\u81ea\u52d5\u5b9f\u88c5\u3067\u304d\u306a\u3044\u3002\n\n\u3053\u308c\u307e\u3067\u306f\u3053\u308c\u3092\u81ea\u5206\u3067\u66f8\u3044\u3066\u304d\u305f\u306e\u3060\u304c\u3001\u3055\u3059\u304c\u306b\u9762\u5012\u306a\u306e\u3067\u3001[enum-error-derive](https://github.com/termoshtt/enum-error-derive)\u3092\u4f5c\u6210\u3057\u305f\u3002\nRust 1.15\u3088\u308a\u5c0e\u5165\u3055\u308c\u305fproc_macro\u3092\u4f7f\u7528\u3057\u3066\u3001\u81ea\u52d5\u3067\u4e0a\u8ff0\u306etrait\u3092\u5b9f\u88c5\u3059\u308b\u3002\u4f7f\u3044\u65b9\u306f\u7c21\u5358\u3067\u3001\n\n```rust\n#[macro_use]\nextern crate enum_error_derive;\n\n#[derive(Debug, EnumError)]\nenum LoadError {\n    Io(io::Error),\n    Msgpack(decode::Error),\n}\n```\n\n\u3053\u308c\u3060\u3051\u3067\u4e0a\u8ff0\u306e`LoadError`\u3092\u4f7f\u7528\u3057\u305f`read_msg`\u304c\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u3053\u308c\u3067\u7c21\u5358\u306b\u30a8\u30e9\u30fc\u3092\u5408\u6210\u3059\u308b\u4e8b\u304c\u3067\u304d\u308b\u3002\n\n\u3084\u3063\u305f\u306d\uff01\n", "tags": ["rust", "proc_macro"]}