{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306fFOSS4G Advent Calendar 2014\u306e\u30018\u65e5\u76ee\u306e\u53c2\u52a0\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\nadvent calendar\u306b\u306f\u521d\u53c2\u52a0\u306a\u306e\u3067\u7dca\u5f35\u3057\u307e\u3059\u304c\u3001\u751f\u6696\u304b\u3044\u76ee\u3067\u898b\u5b88\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u3055\u3066\u3001\u4eca\u56de\u306e\u30c6\u30fc\u30de\u3067\u3059\u304c\u3002\nopenlayers\u3068\u304b\u4f7f\u3063\u3066\u3066\u3053\u3046\u601d\u3046\u3053\u3068\u306f\u306a\u304b\u3063\u305f\u3067\u3059\u304b\u3002\n\u300clabel\u304c\u91cd\u306a\u3063\u3066\u3057\u307e\u3046\uff01\u300d\n\u300cpopup\u304c\u91cd\u306a\u3063\u3066\u3057\u307e\u3046\uff01\u300d\n\u72ed\u3044\u5730\u57df\u3067\u8907\u6570\u9078\u629e\u3059\u308b\u3068\u3054\u3061\u3083\u3054\u3061\u3083\u3068\u91cd\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u624b\u3067\u8abf\u6574\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u3067\u304d\u308c\u3070\u81ea\u52d5\u3067\u3067\u304d\u306a\u3044\u3060\u308d\u3046\u304b\u3068\u3002\n\u305d\u3093\u306a\u6642\u3001\u5929\u5553\u304d\u307e\u3057\u305f\u3002\n\u300copenlayers\u3067\u51fa\u6765\u306a\u3044\u306a\u3089postgis\u3067\u3084\u308c\u3070\u3044\u3044\u3058\u3083\u306a\u3044\u300d\n\u30fb\u30fb\u30fb\u3068\u3044\u3046\u3053\u3068\u3067\u4eca\u56de\u306fpostgis\u3067div\u306e\u885d\u7a81\u56de\u907f\u3092\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u6b63\u76f4javascript\u306e\u7269\u7406\u30a8\u30f3\u30b8\u30f3\u3068\u304bD3\u306e\u30d5\u30a9\u30fc\u30b9\u30ec\u30a4\u30a2\u30a6\u30c8\u3068\u304b\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u3068\u306f\u601d\u3046\u3093\u3067\u3059\u304c\u3001\npostgis\u3067\u7269\u7406\u6f14\u7b97\u51e6\u7406\u304c\u4f7f\u3048\u308b\u306e\u304b\u8208\u5473\u304c\u3042\u3063\u305f\u306e\u3067\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u624b\u59cb\u3081\u306bdiv\u30bf\u30b0\u306e\u5ea7\u6a19\u3092postgis\u306b\u9001\u308a\u307e\u3059\u3002\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u306ftop,left,width,height\u3092\u5143\u306b5\u70b9\u306e\u5ea7\u6a19\u60c5\u5831\u306b\u5909\u63db\u3059\u308b\u3068\u3053\u3067\u3057\u3087\u3046\u304b\u3002\npostgis\u306epolygon\u306f\u5fc5\u305a\u9589\u3058\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u3067\u3001BOX\u3067\u3042\u308c\u3070\u6700\u521d\u306e\u5ea7\u6a19\u3092\u4e00\u756a\u6700\u5f8c\u306b\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n[0 0,1 0,1 1,0 1,0 0]\n\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n\u5b9f\u969b\u306bjQuery\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u304b\u3093\u3058\u3067\u3059\u3002\n\npostgis.html\n$(\"div\").each(function(i){\n    var width=$(this).width();\n    var height=$(this).height();\n    var position = $(this).position();\n    polygon.push({id:$(this).attr(\"id\"),positions:position.left+\" \"+position.top+\",\"+position.left+\" \"+(position.top+height)+\",\"+(position.left+width)+\" \"+(position.top+height)+\",\"+(position.left+width)+\" \"+position.top+\",\"+position.left+\" \"+position.top});\n});\nvar param={polygons:polygon};\n\n\n\u30c6\u30b9\u30c8\u3067\u4f5c\u3063\u305fDIV\u5ea7\u6a19\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\npostgis.html\n<div id='bbox1' style=\"width:100px; height:100px; left:210px; top:200px;\"></div>\n<div id='bbox2' style=\"width:100px; height:100px; left:220px; top:230px;\"></div>\n<div id='bbox3' style=\"width:100px; height:100px; left:210px; top:210px;\"></div>\n\n\n\n\u3053\u308c\u3092\u30e9\u30c3\u30d1\u30fc\u7528\u306ephp\u306b\u6295\u3052\u3066\u304a\u304d\u307e\u3059\u3002\n\npostgis.html\n// PostGIS\u306bDIV\u5ea7\u6a19\u3092\u9001\u308a\u8a08\u7b97\u3057\u307e\u3059\n$.ajax({\n    url: \"collision.php\",\n    type: \"POST\",\n    async: false,\n    datatype: \"json\",\n    data: param\n}).done(function(response){\n    var data =JSON.parse(response);\n    //\u8a08\u7b97\u7d50\u679c\u3092DIV\u306b\u9069\u7528\u3057\u307e\u3059\u3002\n    for(val in data){\n        $(\"#\"+data[val].id).css({top:data[val].x+\"px\",left:data[val].y+\"px\"});\n    }\n});\n\n\ncollision.php\u306e\u4e2d\u8eab\u306f\u6b86\u3069\u4f55\u3082\u3042\u308a\u307e\u305b\u3093\u3002\u30b9\u30c8\u30a2\u30c9\u306b\u9001\u3063\u3066\u8fd4\u308a\u5024\u3092json\u306b\u3057\u3066javascript\u306b\u8fd4\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\ncollision.php\n<?php\n// DB\u63a5\u7d9a\n$db = pg_connect(\"host=localhost dbname=postgisdb user=postgres password=postgres\");\n\n$polygons = $_POST[\"polygons\"];\n$matrix_array = array();\nforeach($polygons as $val){\n    $matrix_array[]=\"['\".$val[\"id\"].\"','\".$val[\"positions\"].\"']\";\n}\n$sql = \"SELECT * from getNotCollisionPos(ARRAY[\".implode(\",\",$matrix_array).\"])\";\n$result = pg_query($sql);\n\n$list = array();\nwhile ($row = pg_fetch_assoc($result)) {\n    $list[]=$row;\n}\n\necho json_encode($list);\n\n// DB\u5207\u65ad\npg_close($link);\n\n\n\u3053\u308c\u3067postgis\u306bdiv\u30bf\u30b0\u306e\u5ea7\u6a19\u304c\u6e21\u308a\u307e\u3059\u3002\n\n\u3055\u3066\u3044\u3088\u3044\u3088\u672c\u984c\u306epostgis\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u5c11\u3057\u4e2d\u5b66\u6821\u3067\u7fd2\u3063\u305f\u4ee3\u6570\u5e7e\u4f55\u5b66\u304c\u5165\u3063\u3066\u304d\u307e\u3059\u3002\n\u3061\u3087\u3063\u3068\u624b\u66f8\u304d\u3067\u308f\u304b\u308a\u3065\u3089\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5168\u4f53\u306e\u91cd\u5fc3\u304b\u3089\u305d\u308c\u305e\u308c\u306e\u91cd\u5fc3\u306e\u5ef6\u9577\u4e0a\u306b\n\u3042\u308b\uff08m:n\uff09\u5916\u5206\u70b9\u3078\u79fb\u52d5\u3092\u3057\u3001\u79fb\u52d5\u3057\u305f\u3089\u885d\u7a81\u30c1\u30a7\u30c3\u30af\u3092\u7e70\u308a\u8fd4\u3057\u3001\u30c0\u30e1\u3060\u3063\u305f\u3089\u3082\u3046\u4e00\u5ea6\u5916\u5206\u70b9\u3078\u79fb\u52d5\u2026\n\u3068\u3044\u3046\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3068\u8003\u3048\u307e\u3057\u305f\uff08\u3082\u3057\u304b\u3057\u305f\u3089\u885d\u7a81\u56de\u907f\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u306f\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u3082\uff09\u3002\n\n\u3053\u306e\u518d\u5e30\u51e6\u7406\u306fphp\u4e0a\u3067\u3084\u308b\u3068\u9045\u304f\u306a\u308a\u305d\u3046\u306a\u306e\u3067\u5168\u3066\u30b9\u30c8\u30a2\u30c9\u4e0a\u306e\u518d\u5e30\u51e6\u7406\u3067\u884c\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u307e\u305a\u306f\u547c\u3073\u51fa\u3057\u5143\u306e\u89aa\u30b9\u30c8\u30a2\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\ncollision.sql\ncreate or replace function getnotcollisionpos(text[]) returns table(id varchar, x float, y float) as $$\ndeclare\n    matrix_array alias for $1;\n    matrix text[];\n    matrix_all_centroid_x float8;\n    matrix_all_centroid_y float8;\n    rec record;\n    rec2 record;\n    cu refcursor;\nbegin\n    --div\u8a08\u7b97\u7d50\u679c\u30c6\u30f3\u30dd\u30e9\u30ea\u30c6\u30fc\u30d6\u30eb\n    execute 'create temporary table calc_result (id varchar(255),x float,y float);';\n    --div\u885d\u7a81\u8a08\u7b97\u7528\u30c6\u30f3\u30dd\u30e9\u30ea\u30c6\u30fc\u30d6\u30eb\n    execute 'create temporary table collision (id varchar(255),geom geometry);';\n    --div\u7528\u30dd\u30ea\u30b4\u30f3\u4f5c\u6210\n    foreach matrix slice 1 in array matrix_array\n    loop\n        execute 'insert into collision(id,geom) values (''' || matrix[1] || ''', ''polygon((' || matrix[2] || '))'');';\n    end loop;\n\n    --\u5168div\u306e\u91cd\u5fc3\u53d6\u5f97\n    execute 'select st_x(geom) as matrix_centroid_x,st_y(geom) as matrix_centroid_y from (select st_centroid(st_collect(geom)) as geom from collision) as t0' into rec;\n    matrix_all_centroid_x:=rec.matrix_centroid_x;\n    matrix_all_centroid_y:=rec.matrix_centroid_y;\n\n    --\u5404div\u304c\u885d\u7a81\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\n    foreach matrix slice 1 in array matrix_array\n    loop\n        open cu for execute 'select id,ST_Intersects(geom,(select st_collect(geom) from collision where id<>''' || matrix[1] || ''')) as intersect from collision where id=''' || matrix[1] || '''';\n        loop\n            fetch cu into rec;\n                if not found then\n                exit;\n            end if;\n            --\u885d\u7a81\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u5916\u5206\u7dda\u4e0a\u306b\u79fb\u52d5\u3055\u305b\u3066update\n            if rec.intersect=true then\n                raise notice 'matrix is intersect(getnotcollisionpos)';\n                perform chkcollision(matrix, matrix_all_centroid_x, matrix_all_centroid_y);\n            else\n                raise notice 'matrix is not intersect(getnotcollisionpos)';\n                --\u885d\u7a81\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306fx,y\u53d6\u5f97\n                execute 'select st_xmin(geom) as x,st_ymin(geom) as y from collision where id=''' || matrix[1] || '''' into rec2;\n                execute 'insert into calc_result(id,x,y) values (''' || matrix[1] || ''', ''' || rec2.x || ''', ''' || rec2.y || ''');';\n            end if;\n        end loop;\n        close cu;\n    end loop;\n    return query select * from calc_result;\nend;\n$$ language 'plpgsql';\n\n\n\u518d\u5e30\u51e6\u7406\u3067\u30c1\u30a7\u30c3\u30af\u3092\u7e70\u308a\u8fd4\u3059\u5b50\u30b9\u30c8\u30a2\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\ncollision.sql\ncreate or replace function chkcollision(text[], float8, float8) returns boolean as $$\ndeclare\n    matrix alias for $1;\n    matrix_all_centroid_x alias for $2;\n    matrix_all_centroid_y alias for $3;\n    matrix_centroid_x float8;\n    matrix_centroid_y float8;\n    m int:=10;\n    n int:=1;\n    target_x float8;\n    target_y float8;\n    rec record;\n    cu refcursor;\nbegin\n    --\u91cd\u5fc3\u3092\u53d6\u5f97\n    execute 'select st_x(geom) as matrix_centroid_x,st_y(geom) as matrix_centroid_y from (select st_centroid(geom) as geom from collision where id=''' || matrix[1] || ''') as t0' into rec;\n    matrix_centroid_x:=rec.matrix_centroid_x;\n    matrix_centroid_y:=rec.matrix_centroid_y;\n\n    --\u5168div\u304b\u3089\u73fediv\u306e\u91cd\u5fc3\u3092\u5143\u306b\u5916\u5206\u7dda\u4e0a(m:n)\u306b\u79fb\u52d5\n    target_x=((-n*matrix_all_centroid_x+m*matrix_centroid_x)/(m-n))-matrix_centroid_x;\n    target_y=((-n*matrix_all_centroid_y+m*matrix_centroid_y)/(m-n))-matrix_centroid_y;\n    execute 'update collision set geom=st_translate(geom,''' || target_x || ''',''' || target_y || ''') where id=''' || matrix[1] || ''';';\n\n    --\u79fb\u52d5\u5f8c\u306b\u885d\u7a81\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\n    execute 'select id,ST_Intersects(geom,(select st_collect(geom) from collision where id<>''' || matrix[1] || ''')) as intersect from collision where id=''' || matrix[1] || '''' into rec;\n    if rec.intersect=true then\n        raise notice 'matrix is intersect(chkcollision): id:%, target_x:% target_y:%', matrix[1],target_x,target_y;\n        --\u885d\u7a81\u3057\u306a\u304f\u306a\u308b\u307e\u3067\u518d\u5e30\n        perform chkcollision(matrix, matrix_all_centroid_x, matrix_all_centroid_y);\n    else\n        raise notice 'matrix is not intersect(chkcollision)';\n        --\u885d\u7a81\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306fx,y\u53d6\u5f97\n        execute 'select st_xmin(geom) as x,st_ymin(geom) as y from collision where id=''' || matrix[1] || '''' into rec;\n        execute 'insert into calc_result(id,x,y) values (''' || matrix[1] || ''', ''' || rec.x || ''', ''' || rec.y || ''');';\n        return true;\n    end if;\n    return false;\nend;\n$$ language 'plpgsql';\n\n\n\u6ce8\u610f\u3057\u305f\u70b9\u3068\u3057\u3066\u306f\u885d\u7a81\u30c1\u30a7\u30c3\u30af\u3092\u305d\u308c\u305e\u308c\u3067\u3084\u308b\u306e\u306f\u9762\u5012\u3060\u3063\u305f\u306e\u3067st_collect\u3067\u81ea\u5206\u4ee5\u5916\u3092\u30de\u30fc\u30b8\u3057\u3066ST_Intersects\u3067bbox\u3067\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u5224\u5b9a\u3057\u3066\u307e\u3059\u3002\n\u3042\u3068\u3001\u5b9f\u30c6\u30fc\u30d6\u30eb\u3067\u306f\u306a\u304f\u51e6\u7406\u901f\u5ea6\u3092\u7a3c\u3050\u305f\u3081\u30c6\u30f3\u30dd\u30e9\u30ea\u30c6\u30fc\u30d6\u30eb\u3067\u8a08\u7b97\u3057\u3066\u307e\u3059\u3002\n\u4e00\u65e5\u3067\u4f5c\u3063\u305f\u306e\u3067\u591a\u5206\u30d0\u30b0\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u8fba\u306f\u898b\u9003\u3057\u3066\u304f\u3060\u3055\u3044orz\n\npostgis\u3067\u9069\u5f53\u306b\u30dd\u30ea\u30b4\u30f3\u98df\u308f\u305b\u308b\u3068\u3001\u306a\u3093\u304b\u305d\u308c\u3063\u307d\u3044\u611f\u3058\u3067\u5ea7\u6a19\u3092\u5410\u304d\u51fa\u3057\u3066\u304f\u308c\u307e\u3057\u305f\u3002\n\n\u5927\u4f53\u6570\u5341msec\u306a\u306e\u3067\u901f\u5ea6\u7684\u306b\u306f\u305d\u3053\u305d\u3053\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\nIE7\u3068\u304b\u30ec\u30ac\u30b7\u30fc\u74b0\u5883\u3067\u52d5\u7684\u306a\u885d\u7a81\u30c1\u30a7\u30c3\u30af\u304c\u3057\u305f\u3044\u3068\u304d\u306b\u306f\u3053\u306e\u3084\u308a\u65b9\u3082\u3042\u308a\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3053\u3093\u306a\u7528\u9014\u306bpostgis\u3092\u4f7f\u3046\u4eba\u306f\u3044\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u3051\u3069\u3001github\u306b\u304a\u3044\u3066\u304a\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u3088\u308d\u3057\u3051\u308c\u3070\u898b\u3066\u3084\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://github.com/makinux/postgis_chkcollision\n\u3053\u306e\u8a18\u4e8b\u306f[FOSS4G Advent Calendar 2014](http://qiita.com/advent-calendar/2014/foss4goss4g)\u306e\u30018\u65e5\u76ee\u306e\u53c2\u52a0\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\nadvent calendar\u306b\u306f\u521d\u53c2\u52a0\u306a\u306e\u3067\u7dca\u5f35\u3057\u307e\u3059\u304c\u3001\u751f\u6696\u304b\u3044\u76ee\u3067\u898b\u5b88\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3055\u3066\u3001\u4eca\u56de\u306e\u30c6\u30fc\u30de\u3067\u3059\u304c\u3002\n\nopenlayers\u3068\u304b\u4f7f\u3063\u3066\u3066\u3053\u3046\u601d\u3046\u3053\u3068\u306f\u306a\u304b\u3063\u305f\u3067\u3059\u304b\u3002\n\u300clabel\u304c\u91cd\u306a\u3063\u3066\u3057\u307e\u3046\uff01\u300d\n\u300cpopup\u304c\u91cd\u306a\u3063\u3066\u3057\u307e\u3046\uff01\u300d\n\n\u72ed\u3044\u5730\u57df\u3067\u8907\u6570\u9078\u629e\u3059\u308b\u3068\u3054\u3061\u3083\u3054\u3061\u3083\u3068\u91cd\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u624b\u3067\u8abf\u6574\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u3067\u304d\u308c\u3070\u81ea\u52d5\u3067\u3067\u304d\u306a\u3044\u3060\u308d\u3046\u304b\u3068\u3002\n\u305d\u3093\u306a\u6642\u3001\u5929\u5553\u304d\u307e\u3057\u305f\u3002\n\u300copenlayers\u3067\u51fa\u6765\u306a\u3044\u306a\u3089postgis\u3067\u3084\u308c\u3070\u3044\u3044\u3058\u3083\u306a\u3044\u300d\n\n\u30fb\u30fb\u30fb\u3068\u3044\u3046\u3053\u3068\u3067\u4eca\u56de\u306fpostgis\u3067div\u306e\u885d\u7a81\u56de\u907f\u3092\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6b63\u76f4javascript\u306e\u7269\u7406\u30a8\u30f3\u30b8\u30f3\u3068\u304bD3\u306e\u30d5\u30a9\u30fc\u30b9\u30ec\u30a4\u30a2\u30a6\u30c8\u3068\u304b\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u3068\u306f\u601d\u3046\u3093\u3067\u3059\u304c\u3001\npostgis\u3067\u7269\u7406\u6f14\u7b97\u51e6\u7406\u304c\u4f7f\u3048\u308b\u306e\u304b\u8208\u5473\u304c\u3042\u3063\u305f\u306e\u3067\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n* * *\n\u307e\u305a\u624b\u59cb\u3081\u306bdiv\u30bf\u30b0\u306e\u5ea7\u6a19\u3092postgis\u306b\u9001\u308a\u307e\u3059\u3002\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u306ftop,left,width,height\u3092\u5143\u306b*5\u70b9*\u306e\u5ea7\u6a19\u60c5\u5831\u306b\u5909\u63db\u3059\u308b\u3068\u3053\u3067\u3057\u3087\u3046\u304b\u3002\npostgis\u306epolygon\u306f\u5fc5\u305a\u9589\u3058\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u3067\u3001BOX\u3067\u3042\u308c\u3070\u6700\u521d\u306e\u5ea7\u6a19\u3092\u4e00\u756a\u6700\u5f8c\u306b\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n`[0 0,1 0,1 1,0 1,0 0]`\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n\n\u5b9f\u969b\u306bjQuery\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u304b\u3093\u3058\u3067\u3059\u3002\n\n```Javascript:postgis.html\n$(\"div\").each(function(i){\n\tvar width=$(this).width();\n\tvar height=$(this).height();\n\tvar position = $(this).position();\n\tpolygon.push({id:$(this).attr(\"id\"),positions:position.left+\" \"+position.top+\",\"+position.left+\" \"+(position.top+height)+\",\"+(position.left+width)+\" \"+(position.top+height)+\",\"+(position.left+width)+\" \"+position.top+\",\"+position.left+\" \"+position.top});\n});\nvar param={polygons:polygon};\n```\n\n\u30c6\u30b9\u30c8\u3067\u4f5c\u3063\u305fDIV\u5ea7\u6a19\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```HTML:postgis.html\n<div id='bbox1' style=\"width:100px; height:100px; left:210px; top:200px;\"></div>\n<div id='bbox2' style=\"width:100px; height:100px; left:220px; top:230px;\"></div>\n<div id='bbox3' style=\"width:100px; height:100px; left:210px; top:210px;\"></div>\n```\n![foss4g_blog1.jpg](https://qiita-image-store.s3.amazonaws.com/0/58671/38dd88f5-8178-8bc2-d3c1-f72af38d5b96.jpeg)\n\n\u3053\u308c\u3092\u30e9\u30c3\u30d1\u30fc\u7528\u306ephp\u306b\u6295\u3052\u3066\u304a\u304d\u307e\u3059\u3002\n\n```Javascript:postgis.html\n// PostGIS\u306bDIV\u5ea7\u6a19\u3092\u9001\u308a\u8a08\u7b97\u3057\u307e\u3059\n$.ajax({\n\turl: \"collision.php\",\n\ttype: \"POST\",\n\tasync: false,\n\tdatatype: \"json\",\n\tdata: param\n}).done(function(response){\n\tvar data =JSON.parse(response);\n\t//\u8a08\u7b97\u7d50\u679c\u3092DIV\u306b\u9069\u7528\u3057\u307e\u3059\u3002\n\tfor(val in data){\n\t\t$(\"#\"+data[val].id).css({top:data[val].x+\"px\",left:data[val].y+\"px\"});\n\t}\n});\n```\n\ncollision.php\u306e\u4e2d\u8eab\u306f\u6b86\u3069\u4f55\u3082\u3042\u308a\u307e\u305b\u3093\u3002\u30b9\u30c8\u30a2\u30c9\u306b\u9001\u3063\u3066\u8fd4\u308a\u5024\u3092json\u306b\u3057\u3066javascript\u306b\u8fd4\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n```php:collision.php\n<?php\n// DB\u63a5\u7d9a\n$db = pg_connect(\"host=localhost dbname=postgisdb user=postgres password=postgres\");\n\n$polygons = $_POST[\"polygons\"];\n$matrix_array = array();\nforeach($polygons as $val){\n\t$matrix_array[]=\"['\".$val[\"id\"].\"','\".$val[\"positions\"].\"']\";\n}\n$sql = \"SELECT * from getNotCollisionPos(ARRAY[\".implode(\",\",$matrix_array).\"])\";\n$result = pg_query($sql);\n\n$list = array();\nwhile ($row = pg_fetch_assoc($result)) {\n\t$list[]=$row;\n}\n\necho json_encode($list);\n\n// DB\u5207\u65ad\npg_close($link);\n```\n\n\u3053\u308c\u3067postgis\u306bdiv\u30bf\u30b0\u306e\u5ea7\u6a19\u304c\u6e21\u308a\u307e\u3059\u3002\n\n* * *\n\u3055\u3066\u3044\u3088\u3044\u3088\u672c\u984c\u306epostgis\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u5c11\u3057\u4e2d\u5b66\u6821\u3067\u7fd2\u3063\u305f\u4ee3\u6570\u5e7e\u4f55\u5b66\u304c\u5165\u3063\u3066\u304d\u307e\u3059\u3002\n\u3061\u3087\u3063\u3068\u624b\u66f8\u304d\u3067\u308f\u304b\u308a\u3065\u3089\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5168\u4f53\u306e\u91cd\u5fc3\u304b\u3089\u305d\u308c\u305e\u308c\u306e\u91cd\u5fc3\u306e\u5ef6\u9577\u4e0a\u306b\n\u3042\u308b\uff08m:n\uff09\u5916\u5206\u70b9\u3078\u79fb\u52d5\u3092\u3057\u3001\u79fb\u52d5\u3057\u305f\u3089\u885d\u7a81\u30c1\u30a7\u30c3\u30af\u3092\u7e70\u308a\u8fd4\u3057\u3001\u30c0\u30e1\u3060\u3063\u305f\u3089\u3082\u3046\u4e00\u5ea6\u5916\u5206\u70b9\u3078\u79fb\u52d5\u2026\n\u3068\u3044\u3046\u51e6\u7406\u3092\u7e70\u308a\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3068\u8003\u3048\u307e\u3057\u305f\uff08\u3082\u3057\u304b\u3057\u305f\u3089\u885d\u7a81\u56de\u907f\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u306f\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u3082\uff09\u3002\n\n![foss4g_blog2.jpg](https://qiita-image-store.s3.amazonaws.com/0/58671/3f8dcb82-d9e4-9aab-6a3c-b72836d56ae9.jpeg)\n\n\n\u3053\u306e\u518d\u5e30\u51e6\u7406\u306fphp\u4e0a\u3067\u3084\u308b\u3068\u9045\u304f\u306a\u308a\u305d\u3046\u306a\u306e\u3067\u5168\u3066\u30b9\u30c8\u30a2\u30c9\u4e0a\u306e\u518d\u5e30\u51e6\u7406\u3067\u884c\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u306f\u547c\u3073\u51fa\u3057\u5143\u306e\u89aa\u30b9\u30c8\u30a2\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```SQL:collision.sql\ncreate or replace function getnotcollisionpos(text[]) returns table(id varchar, x float, y float) as $$\ndeclare\n\tmatrix_array alias for $1;\n\tmatrix text[];\n\tmatrix_all_centroid_x float8;\n\tmatrix_all_centroid_y float8;\n\trec record;\n\trec2 record;\n\tcu refcursor;\nbegin\n\t--div\u8a08\u7b97\u7d50\u679c\u30c6\u30f3\u30dd\u30e9\u30ea\u30c6\u30fc\u30d6\u30eb\n\texecute 'create temporary table calc_result (id varchar(255),x float,y float);';\n\t--div\u885d\u7a81\u8a08\u7b97\u7528\u30c6\u30f3\u30dd\u30e9\u30ea\u30c6\u30fc\u30d6\u30eb\n\texecute 'create temporary table collision (id varchar(255),geom geometry);';\n\t--div\u7528\u30dd\u30ea\u30b4\u30f3\u4f5c\u6210\n\tforeach matrix slice 1 in array matrix_array\n\tloop\n\t\texecute 'insert into collision(id,geom) values (''' || matrix[1] || ''', ''polygon((' || matrix[2] || '))'');';\n\tend loop;\n\t\n\t--\u5168div\u306e\u91cd\u5fc3\u53d6\u5f97\n\texecute 'select st_x(geom) as matrix_centroid_x,st_y(geom) as matrix_centroid_y from (select st_centroid(st_collect(geom)) as geom from collision) as t0' into rec;\n\tmatrix_all_centroid_x:=rec.matrix_centroid_x;\n\tmatrix_all_centroid_y:=rec.matrix_centroid_y;\n\t\n\t--\u5404div\u304c\u885d\u7a81\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\n\tforeach matrix slice 1 in array matrix_array\n\tloop\n\t\topen cu for execute 'select id,ST_Intersects(geom,(select st_collect(geom) from collision where id<>''' || matrix[1] || ''')) as intersect from collision where id=''' || matrix[1] || '''';\n\t\tloop\n\t\t\tfetch cu into rec;\n\t\t\t\tif not found then\n\t\t\t\texit;\n\t\t\tend if;\n\t\t\t--\u885d\u7a81\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u5916\u5206\u7dda\u4e0a\u306b\u79fb\u52d5\u3055\u305b\u3066update\n\t\t\tif rec.intersect=true then\n\t\t\t\traise notice 'matrix is intersect(getnotcollisionpos)';\n\t\t\t\tperform chkcollision(matrix, matrix_all_centroid_x, matrix_all_centroid_y);\n\t\t\telse\n\t\t\t\traise notice 'matrix is not intersect(getnotcollisionpos)';\n\t\t\t\t--\u885d\u7a81\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306fx,y\u53d6\u5f97\n\t\t\t\texecute 'select st_xmin(geom) as x,st_ymin(geom) as y from collision where id=''' || matrix[1] || '''' into rec2;\n\t\t\t\texecute 'insert into calc_result(id,x,y) values (''' || matrix[1] || ''', ''' || rec2.x || ''', ''' || rec2.y || ''');';\n\t\t\tend if;\n\t\tend loop;\n\t\tclose cu;\n\tend loop;\n\treturn query select * from calc_result;\nend;\n$$ language 'plpgsql';\n```\n\n\n\u518d\u5e30\u51e6\u7406\u3067\u30c1\u30a7\u30c3\u30af\u3092\u7e70\u308a\u8fd4\u3059\u5b50\u30b9\u30c8\u30a2\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```sql:collision.sql\ncreate or replace function chkcollision(text[], float8, float8) returns boolean as $$\ndeclare\n\tmatrix alias for $1;\n\tmatrix_all_centroid_x alias for $2;\n\tmatrix_all_centroid_y alias for $3;\n\tmatrix_centroid_x float8;\n\tmatrix_centroid_y float8;\n\tm int:=10;\n\tn int:=1;\n\ttarget_x float8;\n\ttarget_y float8;\n\trec record;\n\tcu refcursor;\nbegin\n\t--\u91cd\u5fc3\u3092\u53d6\u5f97\n\texecute 'select st_x(geom) as matrix_centroid_x,st_y(geom) as matrix_centroid_y from (select st_centroid(geom) as geom from collision where id=''' || matrix[1] || ''') as t0' into rec;\n\tmatrix_centroid_x:=rec.matrix_centroid_x;\n\tmatrix_centroid_y:=rec.matrix_centroid_y;\n\t\n\t--\u5168div\u304b\u3089\u73fediv\u306e\u91cd\u5fc3\u3092\u5143\u306b\u5916\u5206\u7dda\u4e0a(m:n)\u306b\u79fb\u52d5\n\ttarget_x=((-n*matrix_all_centroid_x+m*matrix_centroid_x)/(m-n))-matrix_centroid_x;\n\ttarget_y=((-n*matrix_all_centroid_y+m*matrix_centroid_y)/(m-n))-matrix_centroid_y;\n\texecute 'update collision set geom=st_translate(geom,''' || target_x || ''',''' || target_y || ''') where id=''' || matrix[1] || ''';';\n\t\n\t--\u79fb\u52d5\u5f8c\u306b\u885d\u7a81\u3057\u3066\u3044\u308b\u304b\u30c1\u30a7\u30c3\u30af\n\texecute 'select id,ST_Intersects(geom,(select st_collect(geom) from collision where id<>''' || matrix[1] || ''')) as intersect from collision where id=''' || matrix[1] || '''' into rec;\n\tif rec.intersect=true then\n\t\traise notice 'matrix is intersect(chkcollision): id:%, target_x:% target_y:%', matrix[1],target_x,target_y;\n\t\t--\u885d\u7a81\u3057\u306a\u304f\u306a\u308b\u307e\u3067\u518d\u5e30\n\t\tperform chkcollision(matrix, matrix_all_centroid_x, matrix_all_centroid_y);\n\telse\n\t\traise notice 'matrix is not intersect(chkcollision)';\n\t\t--\u885d\u7a81\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306fx,y\u53d6\u5f97\n\t\texecute 'select st_xmin(geom) as x,st_ymin(geom) as y from collision where id=''' || matrix[1] || '''' into rec;\n\t\texecute 'insert into calc_result(id,x,y) values (''' || matrix[1] || ''', ''' || rec.x || ''', ''' || rec.y || ''');';\n\t\treturn true;\n\tend if;\n\treturn false;\nend;\n$$ language 'plpgsql';\n```\n\n\u6ce8\u610f\u3057\u305f\u70b9\u3068\u3057\u3066\u306f\u885d\u7a81\u30c1\u30a7\u30c3\u30af\u3092\u305d\u308c\u305e\u308c\u3067\u3084\u308b\u306e\u306f\u9762\u5012\u3060\u3063\u305f\u306e\u3067st_collect\u3067\u81ea\u5206\u4ee5\u5916\u3092\u30de\u30fc\u30b8\u3057\u3066ST_Intersects\u3067bbox\u3067\u91cd\u306a\u3063\u3066\u3044\u308b\u304b\u5224\u5b9a\u3057\u3066\u307e\u3059\u3002\n\u3042\u3068\u3001\u5b9f\u30c6\u30fc\u30d6\u30eb\u3067\u306f\u306a\u304f\u51e6\u7406\u901f\u5ea6\u3092\u7a3c\u3050\u305f\u3081\u30c6\u30f3\u30dd\u30e9\u30ea\u30c6\u30fc\u30d6\u30eb\u3067\u8a08\u7b97\u3057\u3066\u307e\u3059\u3002\n\n\u4e00\u65e5\u3067\u4f5c\u3063\u305f\u306e\u3067\u591a\u5206\u30d0\u30b0\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u306e\u8fba\u306f\u898b\u9003\u3057\u3066\u304f\u3060\u3055\u3044orz\n\n* * *\npostgis\u3067\u9069\u5f53\u306b\u30dd\u30ea\u30b4\u30f3\u98df\u308f\u305b\u308b\u3068\u3001\u306a\u3093\u304b\u305d\u308c\u3063\u307d\u3044\u611f\u3058\u3067\u5ea7\u6a19\u3092\u5410\u304d\u51fa\u3057\u3066\u304f\u308c\u307e\u3057\u305f\u3002\n\n![foss4g_blog3.jpg](https://qiita-image-store.s3.amazonaws.com/0/58671/d3ac1b51-a7da-d15d-2568-4ab4ae20b203.jpeg)\n\n\u5927\u4f53\u6570\u5341msec\u306a\u306e\u3067\u901f\u5ea6\u7684\u306b\u306f\u305d\u3053\u305d\u3053\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\nIE7\u3068\u304b\u30ec\u30ac\u30b7\u30fc\u74b0\u5883\u3067\u52d5\u7684\u306a\u885d\u7a81\u30c1\u30a7\u30c3\u30af\u304c\u3057\u305f\u3044\u3068\u304d\u306b\u306f\u3053\u306e\u3084\u308a\u65b9\u3082\u3042\u308a\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3053\u3093\u306a\u7528\u9014\u306bpostgis\u3092\u4f7f\u3046\u4eba\u306f\u3044\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u3051\u3069\u3001github\u306b\u304a\u3044\u3066\u304a\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u3088\u308d\u3057\u3051\u308c\u3070\u898b\u3066\u3084\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nhttps://github.com/makinux/postgis_chkcollision\n", "tags": ["PostGIS2.0"]}