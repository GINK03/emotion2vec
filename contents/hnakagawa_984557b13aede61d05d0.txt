{"context": " More than 1 year has passed since last update.Controller\u5c64\u3068Model\u5c64\u306e\u9593\u306eCallback\u306f\u3001\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3084\u30b9\u30ec\u30c3\u30c9\u306e\u5883\u754c\u306b\u306a\u3063\u3066\u3044\u3066\u8a2d\u8a08\u306b\u60a9\u3080\u4e8b\u304c\u591a\u3044\u3067\u3059\u3088\u306d?\n\u305d\u308c\u3089\u306b\u5bfe\u3059\u308b\u81ea\u5206\u306e\u8a00\u3044\u305f\u3044\u4e8b\u306f\u3001\u5f0a\u793eKeithYokoma\u304c\u5927\u4f53 \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068\u4e0a\u624b\u306b\u4ed8\u304d\u5408\u3046 \u3067\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u3067\u81ea\u5206\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u7d39\u4ecb\u3057\u307e\u3059(\"\u4e2d\u7d1a\u7de81\uff1a\u8907\u6570\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u5bfe\u5fdc\u3059\u308b\"\u306b\u4f3c\u3066\u3044\u307e\u3059)\u3002\n\n\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d1\u30bf\u30fc\u30f3\n\u305d\u3093\u306a\u540d\u524d\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u7121\u3044\u3067\u3059(\u591a\u5206)\u81ea\u5206\u304c\u52dd\u624b\u306b\u547d\u540d\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3001Model\u5c64\u306e\u30e9\u30d5\u30b5\u30a4\u30af\u30eb\u3088\u308a\u3001\u5c0f\u3055\u3044\u53c8\u306f\u540c\u7b49\u306e\u30b9\u30b3\u30fc\u30d7\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u8868\u3059\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u7ba1\u7406\u3059\u308b\u4e8b\u3067\u3059\u3002\n\u767e\u805e\u306f\u4e00\u898b\u306b\u3057\u304b\u305a\u3002\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u5c64\u3068\u30e2\u30c7\u30eb\u5c64\u306e\u4f8b\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u5c64\n\n\nExampleActivity.java\npublic class ExampleActivity extends Activity implements CallbackLifecycle, View.OnClickListener {\n    //\u7701\u7565\n    @Override\n    protected void onDestroy() {\n        mMessageManager.removeCallbackFor(this); //\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u7d50\u3073\u3064\u3044\u305fCallback\u3092\u4e00\u62ec\u524a\u9664\n        super.onDestroy();\n    }\n\n    @Override\n    public void onClick(View v) {\n        mMessageManager.send(this, getMessageFromView(), new Callback<Result>() {\n            @Override\n            public void done(Result result) {\n                //do something...\n            }\n\n            @Override\n            public void error(Exception exception) {\n                //do something...\n            }\n        });\n    }\n    //\u7701\u7565\n}\n\n\n\n\u30e2\u30c7\u30eb\u5c64\n\n\nMessageManager.java\npublic class MessageManager {\n    private final ThreadPool mThreadPool = new ThreadPool();\n    private final CallbackHelper<Callback<Result>> mCallbackHelper = new CallbackHelper<>();\n    private final Handler mHandler = new Handler(Looper.getMainLooper());\n\n    //AsyncTaskLoader\u7b49\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u306f\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\u3002\n    public Result blockingSend(Message message) throws IOException {\n        ThreadAssertion.assertNotMainThread(); //\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u547c\u3070\u308c\u308b\u3068\u4f8b\u5916\u767a\u751f\n        //\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30af\u30bb\u30b9\u306a\u3069blocking\u3059\u308b\u51e6\u7406\u3092\u884c\u3044Result\u3092\u8fd4\u3059\n    }\n\n    public int send(CallbackLifecycle lifecycle, final Message message, Callback<Result> callback) {\n        final WeakReference<CallbackLifecycle> ref = new WeakReference<>(lifecycle);\n        final int seq = mCallbackHelper.getAndIncrementSeq();\n        mCallbackHelper.put(lifecycle, callback, seq);\n\n        //\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u4ee5\u5916\u3067blocking\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\n        mThreadPool.execute(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Result result = blockingSend(message);\n                    performDone(ref, seq, result);\n                } catch (IOException exp) {\n                    performError(ref, seq, exp);\n                }\n            }\n        });\n\n        return seq;\n    }\n\n    private void performDone(final WeakReference<CallbackLifecycle> ref, final int seq, final Result result) {\n        if (ref.get() == null)\n            return;\n\n        mHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                Callback<Result> callback = mCallbackHelper.getAndRemove(ref.get(), seq);\n                if (callback != null)\n                    callback.done(result);\n            }\n        });\n    }\n\n    private void performError(final WeakReference<CallbackLifecycle> ref, final int seq, final Exception exp) {\n        if (ref.get() == null)\n            return;\n\n        mHandler.post(new Runnable() {\n            @Override\n            public void run() {\n                Callback<?> callback = mCallbackHelper.getAndRemove(ref.get(), seq);\n                if (callback != null)\n                    callback.error(exp);\n            }\n        });\n    }\n\n    public void removeCallbackFor(CallbackLifecycle lifecycle) {\n        mCallbackHelper.remove(lifecycle);\n    }\n}\n\n\n\n\u307e\u3068\u3081\n\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306e\u30e1\u30ea\u30c3\u30c8\u306f\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30b9\u30c6\u30fc\u30c8\u30cf\u30f3\u30c9\u30e9\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u4e00\u62ec\u524a\u9664\u3067\u304d\u308b\u306e\u3067\u3001onDestory\u5f8c\u7b49\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u4e8b\u3092\u9632\u3052\u308b\nCallback\u8d77\u56e0\u306e\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u9632\u3052\u308b\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u304c\u660e\u78ba\n\n\u3067\u3057\u3087\u3046\u304b\u3002\n\u56e0\u307f\u306b\u3001\u672c\u6765\u4f8b\u306e\u3088\u3046\u306aLoader\u3092\u4f7f\u7528\u3067\u304d\u308b\u7b87\u6240\u3067\u306f\u3001Loader\u3092\u4f7f\u7528\u3057\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068Context\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u5206\u96e2\u3057\u3066\u3084\u308b\u306e\u304c\u7b4b\u3067\u3059\u3002\n\u6700\u5f8c\u306b\u3001\u4f8b\u3067\u51fa\u3066\u304d\u305fCallbackHelper\u306e\u5b9f\u88c5\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\nCallbackHelper.java\npublic class CallbackHelper<T> {\n    private final Map<CallbackLifecycle, SparseArray<T>> mCallbacks = new WeakHashMap<>();\n\n    private final AtomicInteger mSeqId = new AtomicInteger(1);\n\n    public int getAndIncrementSeq() {\n        return mSeqId.getAndIncrement();\n    }\n\n    public synchronized T getAndRemove(CallbackLifecycle lifecycle, int seq) {\n        if (lifecycle == null)\n            return null;\n\n        SparseArray<T> arr = mCallbacks.get(lifecycle);\n        if (arr == null)\n            return null;\n\n        T callback = arr.get(seq);\n        arr.remove(seq);\n        if (arr.size() == 0)\n            mCallbacks.remove(lifecycle);\n\n        return callback;\n    }\n\n    public synchronized void put(CallbackLifecycle lifecycle, T callback, int seq) {\n        if (lifecycle == null || callback == null)\n            return;\n\n        SparseArray<T> arr = mCallbacks.get(lifecycle);\n        if (arr == null) {\n            arr = new SparseArray<T>();\n            mCallbacks.put(lifecycle, arr);\n        }\n        arr.put(seq, callback);\n    }\n\n    public synchronized void remove(CallbackLifecycle lifecycle) {\n        if (lifecycle == null)\n            return;\n\n        mCallbacks.remove(lifecycle);\n    }\n}\n\n\nController\u5c64\u3068Model\u5c64\u306e\u9593\u306eCallback\u306f\u3001\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3084\u30b9\u30ec\u30c3\u30c9\u306e\u5883\u754c\u306b\u306a\u3063\u3066\u3044\u3066\u8a2d\u8a08\u306b\u60a9\u3080\u4e8b\u304c\u591a\u3044\u3067\u3059\u3088\u306d?\n\n\u305d\u308c\u3089\u306b\u5bfe\u3059\u308b\u81ea\u5206\u306e\u8a00\u3044\u305f\u3044\u4e8b\u306f\u3001\u5f0a\u793eKeithYokoma\u304c\u5927\u4f53 [\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068\u4e0a\u624b\u306b\u4ed8\u304d\u5408\u3046](http://qiita.com/KeithYokoma/items/f19a732aad3beff9387c) \u3067\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u3067\u81ea\u5206\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u7d39\u4ecb\u3057\u307e\u3059(\"\u4e2d\u7d1a\u7de81\uff1a\u8907\u6570\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u5bfe\u5fdc\u3059\u308b\"\u306b\u4f3c\u3066\u3044\u307e\u3059)\u3002\n\n## \u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d1\u30bf\u30fc\u30f3\n\u305d\u3093\u306a\u540d\u524d\u306e\u30d1\u30bf\u30fc\u30f3\u306f\u7121\u3044\u3067\u3059(\u591a\u5206)\u81ea\u5206\u304c\u52dd\u624b\u306b\u547d\u540d\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3001Model\u5c64\u306e\u30e9\u30d5\u30b5\u30a4\u30af\u30eb\u3088\u308a\u3001\u5c0f\u3055\u3044\u53c8\u306f\u540c\u7b49\u306e\u30b9\u30b3\u30fc\u30d7\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u8868\u3059\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u3001\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u7ba1\u7406\u3059\u308b\u4e8b\u3067\u3059\u3002\n\n\u767e\u805e\u306f\u4e00\u898b\u306b\u3057\u304b\u305a\u3002\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u5c64\u3068\u30e2\u30c7\u30eb\u5c64\u306e\u4f8b\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n* \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u5c64\n\n```Java:ExampleActivity.java\npublic class ExampleActivity extends Activity implements CallbackLifecycle, View.OnClickListener {\n\t//\u7701\u7565\n\t@Override\n\tprotected void onDestroy() {\n\t\tmMessageManager.removeCallbackFor(this); //\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u7d50\u3073\u3064\u3044\u305fCallback\u3092\u4e00\u62ec\u524a\u9664\n\t\tsuper.onDestroy();\n\t}\n\n\t@Override\n\tpublic void onClick(View v) {\n\t\tmMessageManager.send(this, getMessageFromView(), new Callback<Result>() {\n\t\t\t@Override\n\t\t\tpublic void done(Result result) {\n\t\t\t\t//do something...\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void error(Exception exception) {\n\t\t\t\t//do something...\n\t\t\t}\n\t\t});\n\t}\n\t//\u7701\u7565\n}\n```\n\n* \u30e2\u30c7\u30eb\u5c64\n\n```Java:MessageManager.java\npublic class MessageManager {\n\tprivate final ThreadPool mThreadPool = new ThreadPool();\n\tprivate final CallbackHelper<Callback<Result>> mCallbackHelper = new CallbackHelper<>();\n\tprivate final Handler mHandler = new Handler(Looper.getMainLooper());\n\n\t//AsyncTaskLoader\u7b49\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u306f\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\u3002\n\tpublic Result blockingSend(Message message) throws IOException {\n\t\tThreadAssertion.assertNotMainThread(); //\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u547c\u3070\u308c\u308b\u3068\u4f8b\u5916\u767a\u751f\n\t\t//\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30af\u30bb\u30b9\u306a\u3069blocking\u3059\u308b\u51e6\u7406\u3092\u884c\u3044Result\u3092\u8fd4\u3059\n\t}\n\n\tpublic int send(CallbackLifecycle lifecycle, final Message message, Callback<Result> callback) {\n\t\tfinal WeakReference<CallbackLifecycle> ref = new WeakReference<>(lifecycle);\n\t\tfinal int seq = mCallbackHelper.getAndIncrementSeq();\n\t\tmCallbackHelper.put(lifecycle, callback, seq);\n\n\t\t//\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u4ee5\u5916\u3067blocking\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\n\t\tmThreadPool.execute(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tResult result = blockingSend(message);\n\t\t\t\t\tperformDone(ref, seq, result);\n\t\t\t\t} catch (IOException exp) {\n\t\t\t\t\tperformError(ref, seq, exp);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn seq;\n\t}\n\n\tprivate void performDone(final WeakReference<CallbackLifecycle> ref, final int seq, final Result result) {\n\t\tif (ref.get() == null)\n\t\t\treturn;\n\n\t\tmHandler.post(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tCallback<Result> callback = mCallbackHelper.getAndRemove(ref.get(), seq);\n\t\t\t\tif (callback != null)\n\t\t\t\t\tcallback.done(result);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate void performError(final WeakReference<CallbackLifecycle> ref, final int seq, final Exception exp) {\n\t\tif (ref.get() == null)\n\t\t\treturn;\n\n\t\tmHandler.post(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tCallback<?> callback = mCallbackHelper.getAndRemove(ref.get(), seq);\n\t\t\t\tif (callback != null)\n\t\t\t\t\tcallback.error(exp);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic void removeCallbackFor(CallbackLifecycle lifecycle) {\n\t\tmCallbackHelper.remove(lifecycle);\n\t}\n}\n```\n\n## \u307e\u3068\u3081\n\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306e\u30e1\u30ea\u30c3\u30c8\u306f\n\n* \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u30b9\u30c6\u30fc\u30c8\u30cf\u30f3\u30c9\u30e9\u3067\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u4e00\u62ec\u524a\u9664\u3067\u304d\u308b\u306e\u3067\u3001onDestory\u5f8c\u7b49\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u4e8b\u3092\u9632\u3052\u308b\n* Callback\u8d77\u56e0\u306e\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3092\u9632\u3052\u308b\n* \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u304c\u660e\u78ba\n\n\u3067\u3057\u3087\u3046\u304b\u3002\n\u56e0\u307f\u306b\u3001\u672c\u6765\u4f8b\u306e\u3088\u3046\u306aLoader\u3092\u4f7f\u7528\u3067\u304d\u308b\u7b87\u6240\u3067\u306f\u3001Loader\u3092\u4f7f\u7528\u3057\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068Context\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u5206\u96e2\u3057\u3066\u3084\u308b\u306e\u304c\u7b4b\u3067\u3059\u3002\n\n\n\u6700\u5f8c\u306b\u3001\u4f8b\u3067\u51fa\u3066\u304d\u305fCallbackHelper\u306e\u5b9f\u88c5\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n```Java:CallbackHelper.java\npublic class CallbackHelper<T> {\n\tprivate final Map<CallbackLifecycle, SparseArray<T>> mCallbacks = new WeakHashMap<>();\n\n\tprivate final AtomicInteger mSeqId = new AtomicInteger(1);\n\n\tpublic int getAndIncrementSeq() {\n\t\treturn mSeqId.getAndIncrement();\n\t}\n\n\tpublic synchronized T getAndRemove(CallbackLifecycle lifecycle, int seq) {\n\t\tif (lifecycle == null)\n\t\t\treturn null;\n\n\t\tSparseArray<T> arr = mCallbacks.get(lifecycle);\n\t\tif (arr == null)\n\t\t\treturn null;\n\n\t\tT callback = arr.get(seq);\n\t\tarr.remove(seq);\n\t\tif (arr.size() == 0)\n\t\t\tmCallbacks.remove(lifecycle);\n\n\t\treturn callback;\n\t}\n\n\tpublic synchronized void put(CallbackLifecycle lifecycle, T callback, int seq) {\n\t\tif (lifecycle == null || callback == null)\n\t\t\treturn;\n\n\t\tSparseArray<T> arr = mCallbacks.get(lifecycle);\n\t\tif (arr == null) {\n\t\t\tarr = new SparseArray<T>();\n\t\t\tmCallbacks.put(lifecycle, arr);\n\t\t}\n\t\tarr.put(seq, callback);\n\t}\n\n\tpublic synchronized void remove(CallbackLifecycle lifecycle) {\n\t\tif (lifecycle == null)\n\t\t\treturn;\n\n\t\tmCallbacks.remove(lifecycle);\n\t}\n}\n```\n", "tags": ["Android", "Java", "\u8a2d\u8a08"]}