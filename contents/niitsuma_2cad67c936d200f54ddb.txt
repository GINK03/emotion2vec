{"context": "genntoo\u306bredpen\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308bebuild\u3092\u4f5c\u3063\u305f\u3002\nhttps://github.com/niitsuma/niitsuma-overlay/tree/master/app-text/redpen\n/opt/redpen/bin/redpen\n\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u306a\u304a\u3084\u3063\u3066\u3044\u308b\u51e6\u7406\u306farclinux\u306eredpen\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u540c\u3058\nhttps://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=redpen\nemacs\u306e\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u305f\uff0e\n(\u4e00\u5fdc\u306f\u52d5\u3044\u3066\u3044\u308b\u304c\u81ea\u4fe1\u306f\u3042\u307e\u308a\u306a\u3044)\n\nredpen-paragraph-conf.el\n(require 'redpen-paragraph)\n(defvar redpen-commands\n   '(\"/opt/redpen/bin/redpen -r json -c /opt/redpen/conf/redpen-conf-en.xml %s 2>/dev/null\"\n     \"/opt/redpen/bin/redpen -r json -c /opt/redpen/conf/redpen-conf-ja.xml %s 2>/dev/null\"))\n\n(add-to-list\n 'redpen-paragraph-alist\n `(LaTeX-mode\n   . ,(lambda () \"get visible string on current paragraph.\"\n        (let ((end (if (use-region-p)\n                       (region-end)\n                       (point-max)))\n              (begin (if (use-region-p)\n                         (region-beginning)\n                         (point-min))))\n            (apply 'string\n                   (cl-loop\n                    for pos from begin to end\n                    when (not (get-text-property pos 'invisible))\n                    collect (char-after pos))))))\n\n  `(markdown-mode\n   . ,(lambda () \"get visible string on current paragraph.\"\n        (let ((end (if (use-region-p)\n                       (region-end)\n                       (point-max)))\n              (begin (if (use-region-p)\n                         (region-beginning)\n                         (point-min))))\n            (apply 'string\n                   (cl-loop\n                    for pos from begin to end\n                    when (not (get-text-property pos 'invisible))\n                    collect (char-after pos))))))\n )\n\n\n;;(define-key global-map (kbd \"C-c C-r\") 'redpen-paragraph)\n\n\n\ngenntoo\u306b[redpen](http://redpen.cc/)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308bebuild\u3092\u4f5c\u3063\u305f\u3002\n\nhttps://github.com/niitsuma/niitsuma-overlay/tree/master/app-text/redpen\n\n/opt/redpen/bin/redpen\n\n\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u306a\u304a\u3084\u3063\u3066\u3044\u308b\u51e6\u7406\u306farclinux\u306eredpen\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u540c\u3058\nhttps://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=redpen\n\nemacs\u306e\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u305f\uff0e\n(\u4e00\u5fdc\u306f\u52d5\u3044\u3066\u3044\u308b\u304c\u81ea\u4fe1\u306f\u3042\u307e\u308a\u306a\u3044)\n\n```redpen-paragraph-conf.el\n(require 'redpen-paragraph)\n(defvar redpen-commands\n   '(\"/opt/redpen/bin/redpen -r json -c /opt/redpen/conf/redpen-conf-en.xml %s 2>/dev/null\"\n     \"/opt/redpen/bin/redpen -r json -c /opt/redpen/conf/redpen-conf-ja.xml %s 2>/dev/null\"))\n\n(add-to-list\n 'redpen-paragraph-alist\n `(LaTeX-mode\n   . ,(lambda () \"get visible string on current paragraph.\"\n        (let ((end (if (use-region-p)\n                       (region-end)\n                       (point-max)))\n              (begin (if (use-region-p)\n                         (region-beginning)\n                         (point-min))))\n            (apply 'string\n                   (cl-loop\n                    for pos from begin to end\n                    when (not (get-text-property pos 'invisible))\n                    collect (char-after pos))))))\n \n  `(markdown-mode\n   . ,(lambda () \"get visible string on current paragraph.\"\n        (let ((end (if (use-region-p)\n                       (region-end)\n                       (point-max)))\n              (begin (if (use-region-p)\n                         (region-beginning)\n                         (point-min))))\n            (apply 'string\n                   (cl-loop\n                    for pos from begin to end\n                    when (not (get-text-property pos 'invisible))\n                    collect (char-after pos))))))\n )\n\n\n;;(define-key global-map (kbd \"C-c C-r\") 'redpen-paragraph)\n\n```\n", "tags": ["RedPen", "Gentoo", "ebuild"]}