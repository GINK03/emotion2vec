{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nRuby\u306e\u306f\u914d\u5217\u306f\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u3002\uff08Enumerable\u30e2\u30b8\u30e5\u30fc\u30eb\uff09\nRuby\u306eEnumerable\u3067\u3067\u304d\u308b\u3053\u3068\u304c\u3001C++\u3067\u306f\u3069\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u307e\u3068\u3081\u3066\u304a\u304f\u3002\n\n\u524d\u63d0\u6761\u4ef6\n\n\nC++11\n\u30b3\u30f3\u30c6\u30ca\u306fvector\uff08map\u3084list\u306b\u3064\u3044\u3066\u306f\u5225\u30a8\u30f3\u30c8\u30ea\u3067\uff09\n\n\n\n\n\u30e1\u30bd\u30c3\u30c9\n\neach\n\u8981\u7d20\u306b\u5bfe\u3057\u3066\u30eb\u30fc\u30d7\u3092\u56de\u3059\n\nruby\n\n[1,2,3,4,5].each do |x|\n  print \"#{2*x},\"    #=> 2,4,6,8,10,\nend\n\n\nc++\n\n\nc++11\u304b\u3089\u7bc4\u56f2\u306b\u57fa\u3065\u304ffor\u30eb\u30fc\u30d7\u304c\u4f7f\u3048\u308b\u3002c++03\u306b\u6bd4\u3079\u3066\u3060\u3044\u3076\u7c21\u6f54\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n\n\nstd::vector<long> a = {1,2,3,4,5};\nfor( const auto& x : a ) {\n  std::cout << 2 * x << \",\";    // => 2,4,6,8,10\n}\n\n\neach_with_index\nindex\u3068\u4e00\u7dd2\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3059\n\nruby\n\n[5,4,3,2,1].each_with_index do |x,idx|\n  print \"#{idx}:#{x}, \"\nend\n# => 0:5, 1:4, 2:3, 3:2, 4:1,\n\n\nc++\n\n\nindex\u3092\u53d6\u308a\u305f\u3044\u5834\u5408\u306f\u30eb\u30fc\u30d7\u5909\u6570\u3092\u4f7f\u3046\n\n\n\nstd::vector<long> a = {5,4,3,2,1};\nfor( size_t i=0; i < a.size(); i++) {\n  std::cout << i << \":\" << a[i] << \", \";\n}\n// => 0:5, 1:4, 2:3, 3:2, 4:1,\n\n\nconcat\n\u914d\u5217\u306e\u7d50\u5408\n\nruby\n\n\n\nconcat \u3060\u3068\u7834\u58ca\u7684\u306a\u64cd\u4f5c, +\u3060\u3068\u975e\u7834\u58ca\u7684\u64cd\u4f5c\n\n\n\na1 = [1,2,3]\na2 = [4,5]\na1.concat(a2)\n# a1 => [1,2,3,4,5], a2 => [4,5]\n\n\nc++\n\n\nv1\u304c\u5909\u66f4\u3055\u308c\u308b\uff08\u7834\u58ca\u7684\u64cd\u4f5c\uff09\u3002v2\u306e\u8981\u7d20\u304c\u30b3\u30d4\u30fc\u3055\u308c\u308b\u3002O(N)\n\n\n\nstd::vector<long> v1 = {1,2,3};\nstd::vector<long> v2 = {4,5};\nv1.insert( v1.end(), v2.begin(), v2.end() );\n// v1 => [1,2,3,4,5] , v2 => [4,5]\n\n\n<<, push\n\u672b\u5c3e\u306b\u8981\u7d20\u3092\u8ffd\u52a0\n\nruby\n\na = [1,2]\na << 3\n# a => [1,2,3]\n\n\ncpp\n\nstd::vector<long> a = {1,2};\na.push_back(3);\n// a => [1,2,3]\n\n\nmap\n\nruby\n\n[1,2,3].map! {|x| 2*x }  #=> [2,4,6]\n\n\nc++\n\nstd::vector<long> a = {1,2,3};\nauto twice = [](long x)->long { return 2*x; };\nfor( auto& x : a ) { twice(x); }\n// a => [2,4,6]\n\n\nfind\n\nruby\n\n\n\u8981\u7d20\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306fnil\u304c\u8fd4\u308b\n\n\n\n[7,8,9,10,11].find {|x| x%5 == 0 }  #=> 10\n\n\nc++\n\n\n\nstd::find_if \u3092\u4f7f\u3046\u3002#include <algorithm> \u304c\u5fc5\u8981\u3002\n\u8981\u7d20\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f v.end() \u304c\u8fd4\u308b\n\n\n\nstd::vector<long> v = {7,8,9,10,11};\nauto f = [](long x)->bool { return (x%5==0); };\nauto found = std::find_if( v.begin(), v.end(), f );\nif( found == v.end() ) {\n  std::cout << \"Not found\" << std::endl;\n}\nelse {\n  std::cout << \"Found: \" << *found << std::endl;\n}\n// Found: 10\n\n\nc++\uff08\u4e8b\u524d\u306b\u914d\u5217\u304c\u30bd\u30fc\u30c8\u3057\u3066\u3042\u308b\u5834\u5408\uff09\n\n\nbinary search \u3067 O(logN) \u3067\u63a2\u305b\u308b\u3002\n\n\n\nstd::vector<long> v = {7,8,9,10,11};\n\nauto found = std::lower_bound( v.begin(), v.end(), 10 );\nif( found == v.end() ) { std::cout << \"Not found\" << std::endl; }\nelse { std::cout << \"Found: \" << *found << std::endl; }\n//  *found = 10\n\n\nfind_all\n\nruby\n\n[1,2,3,4,5].find_all {|x| x>3 }  #=> [4,5]\n\n\nc++\n\nstd::vector<long> a = {1,2,3,4,5};\nstd::vector<long> result;\nauto condition = [](long x)->bool { return (x>3); };\nfor( const auto& x : a ) {\n  if( condition(x) ) { result.push_back(x); }\n} \n// result => [4,5]\n\n\nsort\n\nruby\n\n[4,1,3,2,5].sort!  #=> [1,2,3,4,5]\n\n\nc++\n\nstd::vector<long> v = {4,1,3,2,5};\nstd::sort( v.begin(), v.end() );\n// v => [1,2,3,4,5]\n\n\nsort_by\n\nruby\n\n[4,1,2,3,5].sort_by! {|x| (3-x).abs }  #=> [3,4,2,1,5]\n\n\ncpp\n\n\n\nstd::sort\u3092\u4f7f\u3046\u3002#include <algorithm> \u304c\u5fc5\u8981\n\u7b2c\uff13\u5f15\u6570\u306b\u306f \"less than\" \u3092\u5b9a\u7fa9\u3059\u308b\u30d5\u30a1\u30f3\u30af\u30bf\u3092\u6e21\u3059\n\n\n\nstd::vector<long> v = {4,1,2,3,5};\nauto f = [](long x)->long { return std::abs(3-x); };\n\nstd::sort(\n    v.begin(),\n    v.end(),\n    [&](const long& lhs, const long& rhs)->bool {\n      return( f(lhs) < f(rhs) );\n      }\n    );\n// v => [3,4,2,1,5]\n\n\nindex\n\nruby\n\n[5,1,4,2,3].index(2)  #=> 3\n\n\nc++\n\n\n\nfind_if \u3067iterator\u3092\u53d6\u5f97\u3057\u3066\u3001\u5148\u982d\u304b\u3089\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u3068index\u306b\u306a\u308b\u3002\n\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001v.size()\u3068\u7b49\u3057\u304f\u306a\u308b\u3002\n\n\n\nstd::vector<long> v = {5,1,4,2,3};\nauto f = [](long x)->bool { return (x == 2); };\nauto found = std::find_if(v.begin(), v.end(), f ); \nsize_t dist = std::distance(v.begin(), found);\n\n\nall?\n\nruby\n\n[2,4,6,8].all? {|x| x % 2 == 0 }  #=> true\n[2,4,6,9].all? {|x| x % 2 == 0 }  #=> false\n\n\nc++\n\nstd::vector<long> v = {2,4,6,8};\nbool b1 = std::all_of( v.begin(), v.end(), [](long x) {\n  return x%2==0;\n});\n// b1 => true\n\nstd::vector<long> v = {2,4,6,9};\nbool b2 = std::all_of( v.begin(), v.end(), [](long x) {\n  return x%2==0;\n});\n// b2 => false\n\n\nsum\n\nruby\n\n\ninject\u3092\u4f7f\u3046\n\n\n\n[1,3,5].inject(:+)   #=> 9\n\n\nc++\n\n\naccumulate \u3092\u4f7f\u3046\u3068\u7c21\u5358\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8db3\u3057\u7b97\u3092\u884c\u3046\n\n#include <numeric> \u304c\u5fc5\u8981\n\n\n\nstd::vector<long> v = {1,3,5};\nlong sum = std::accumulate(v.begin(), v.end(), 0);  // => 9\n\n\ninject (reduce)\n\nruby\n\n[1,2,3,4,5].inject(1) {|acc,x| acc*x }   #=> 120\n[1,2,3,4,5].inject(\"\") {|acc,x| acc + (x%2==0?'e':'o') }   #=> oeoeo\n\n\nc++\n\nstd::vector<long> v = {1,2,3,4,5};\nlong prod = std::accumulate(v.begin(), v.end(), 1, [](long acc, long x) {\n  return acc*x;\n});\n// prod => 120\n\nstd::string str = std::accumulate(v.begin(), v.end(), std::string(), [](const std::string& acc, long x)->std::string {\n  return acc + ((x%2==0)?\"e\":\"o\");\n});\n// str => \"oeoeo\"\n\n\nuniq\n\nruby\n\n[5,1,1,2,3,5,5].uniq!  #=> [5,1,2,3]\n\n\nc++\n\n\nset\u3092\u4f5c\u3063\u3066insert\u3057\u3066\u3044\u304f\u3002insert\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f\u914d\u5217\u306b\u6b8b\u3059\u304c\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u914d\u5217\u304b\u3089\u9664\u304f\n(\u6ce8\u610f) std::unique \u306f\u914d\u5217\u306e\u9023\u7d9a\u3059\u308b\u91cd\u8907\u8981\u7d20\u3092\u53d6\u308a\u9664\u304f\u305f\u3081\u306b\u3057\u304b\u4f7f\u3048\u306a\u3044\u3002\n\n\n\u4e8b\u524d\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3042\u308b\u914d\u5217\u306b\u306f\u4f7f\u3048\u308b\n\n\n\n\n\nstd::vector<long> v = {5,1,1,2,3,5,5};\n\nstd::set<long> tmpset;\nauto sorted = v.begin();\nfor( auto it = v.begin(); it != v.end(); ++it ) {\n  if( tmpset.insert(*it).second ) {\n    *sorted = *it;\n    sorted++;\n  }\n}\nv.erase( sorted, v.end() );\n// v => [5,1,2,3]\n\n\nc++ (\u30bd\u30fc\u30c8\u6e08\u307f\u306e\u5834\u5408)\n\nstd::vector<long> v = {1,1,2,3,4,4,4};\nv.erase( std::unique(v.begin(), v.end()), v.end() );\n// v => [1,2,3,4]\n\n\nuniq { block }\n\nruby\n\n\n\u30d6\u30ed\u30c3\u30af\u3092\u8a55\u4fa1\u3057\u305f\u7d50\u679c\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u3082\u306e\u3092\u524a\u9664\u3059\u308b\n\n\n\n[4,5,1,2,3,4,5].uniq! {|x| x % 3 }   #=> [4,5,3]\n\n\nc++\n\nstd::vector<long> v = {4,5,1,2,3,4,5};\nauto f = [](long x)->long { return x % 3; };\n\nstd::set<long> tmpset;\nauto sorted = v.begin();\nfor( auto it = v.begin(); it != v.end(); ++it ) {\n  if( tmpset.insert( f(*it) ).second ) {\n    *sorted = *it;\n    ++sorted;\n  }\n}\nv.erase( sorted, v.end() );\n// v => [4,5,3]\n\n\njoin\n\nruby\n\n[1,5,3,2].join(\":\")  #=> \"1:5:3:2\"\n\n\nc++\n\n\n\nostringstream \u3092\u4f7f\u3046\u306b\u306f #include <sstream> \u304c\u5fc5\u8981\n\n\n\nstd::vector<long> v = {1,5,3,2};\nauto io = std::ostringstream();\nstd::string separator = \":\";\n\nfor(auto it = v.begin(); it != v.end(); ) {\n  io << *it;\n  if( (++it) != v.end() ) { io << separator; }\n}\n\n\nreverse\n\nruby\n\n[1,2,3].reverse!  #=> [3,2,1]\n\n\nc++\n\n\n\n#include <algorithm> \u304c\u5fc5\u8981\n\n\n\nstd::vector<long> v = {1,2,3};\nstd::reverse( v.begin(), v.end() );\n// v => [3,2,1] \n\n\ngroup_by\n\nruby\n\n[\"cat\",\"bat\",\"bear\",\"camel\",\"alpaca\"].group_by {|x| x[0]}\n# {\"c\"=>[\"cat\", \"camel\"], \"b\"=>[\"bat\", \"bear\"], \"a\"=>[\"alpaca\"]}\n\n\nc++\n\n\n\u7d50\u679c\u306fmap\u306b\u683c\u7d0d\u3059\u308b\u3002#include <map> \u304c\u5fc5\u8981\n\n\n\nstd::vector<std::string> v = {\"cat\",\"bat\",\"bear\",\"camel\",\"alpaca\"};\nauto f = [](const std::string& s)-> char { return s.c_str()[0]; };\n\nstd::map<char, std::vector<std::string> > result;\nfor( const auto& x : v ) {\n  result[ f(x) ].push_back(x);\n}\n//  { 'a' => [\"alpaca\"], 'b' => [\"bat\", \"bear\"], 'c' => [\"cat\", \"camel\"] } \n\n\nshuffle\n\nruby\n\n[1,2,3,4,5,6,7].shuffle   #=> [2, 6, 4, 7, 5, 3, 1]\n\n\nc++\n\n\n\n#include <random> \u304c\u5fc5\u8981\n\n\n\nstd::vector<long> v = {1,2,3,4,5,6,7};\n\nstd::mt19937 rnd(1234);\nstd::shuffle(v.begin(), v.end(), rnd);\n// v => [4, 7, 2, 1, 5, 3, 6]\n\n\ninspect\n\u914d\u5217\u306e\u4e2d\u8eab\u306e\u8868\u793a\uff08\u30c7\u30d0\u30c3\u30b0\u7528\uff09\n\nRuby\n\n[1,2,3].inspect  # \"[1, 2, 3]\"\n\n\nC++\n\ntemplate <class T>\nstd::string Inspect( const std::vector<T>& v ) {\n  std::ostringstream oss;  // #include <sstream> \u304c\u5fc5\u8981\n  oss << \"[\";\n  for( size_t i=0; i < v.size(); i++) {\n    oss << v[i];\n    if( i != v.size() - 1 ) { oss << \", \"; }\n    else { oss << \"]\" << std::endl; }\n  }\n  oss.str();\n}\n\nstd::vector<long> v = {1,2,3};\nInspect(v);   // => [1,2,3]\n\n## \u6982\u8981\n\nRuby\u306e\u306f\u914d\u5217\u306f\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u3002\uff08Enumerable\u30e2\u30b8\u30e5\u30fc\u30eb\uff09\nRuby\u306eEnumerable\u3067\u3067\u304d\u308b\u3053\u3068\u304c\u3001C++\u3067\u306f\u3069\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u307e\u3068\u3081\u3066\u304a\u304f\u3002\n\n- \u524d\u63d0\u6761\u4ef6\n  - C++11\n  - \u30b3\u30f3\u30c6\u30ca\u306fvector\uff08map\u3084list\u306b\u3064\u3044\u3066\u306f\u5225\u30a8\u30f3\u30c8\u30ea\u3067\uff09\n\n## \u30e1\u30bd\u30c3\u30c9\n\n\n### each\n\n\u8981\u7d20\u306b\u5bfe\u3057\u3066\u30eb\u30fc\u30d7\u3092\u56de\u3059\n\n- ruby\n\n```rb\n[1,2,3,4,5].each do |x|\n  print \"#{2*x},\"    #=> 2,4,6,8,10,\nend\n```\n\n- c++\n  - c++11\u304b\u3089\u7bc4\u56f2\u306b\u57fa\u3065\u304ffor\u30eb\u30fc\u30d7\u304c\u4f7f\u3048\u308b\u3002c++03\u306b\u6bd4\u3079\u3066\u3060\u3044\u3076\u7c21\u6f54\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n```cpp\nstd::vector<long> a = {1,2,3,4,5};\nfor( const auto& x : a ) {\n  std::cout << 2 * x << \",\";    // => 2,4,6,8,10\n}\n```\n\n### each_with_index\n\nindex\u3068\u4e00\u7dd2\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3059\n\n- ruby\n\n```rb\n[5,4,3,2,1].each_with_index do |x,idx|\n  print \"#{idx}:#{x}, \"\nend\n# => 0:5, 1:4, 2:3, 3:2, 4:1,\n```\n\n- c++\n  - index\u3092\u53d6\u308a\u305f\u3044\u5834\u5408\u306f\u30eb\u30fc\u30d7\u5909\u6570\u3092\u4f7f\u3046\n\n```cpp\nstd::vector<long> a = {5,4,3,2,1};\nfor( size_t i=0; i < a.size(); i++) {\n  std::cout << i << \":\" << a[i] << \", \";\n}\n// => 0:5, 1:4, 2:3, 3:2, 4:1,\n```\n\n### concat\n\n\u914d\u5217\u306e\u7d50\u5408\n\n- ruby\n  - `concat` \u3060\u3068\u7834\u58ca\u7684\u306a\u64cd\u4f5c, `+`\u3060\u3068\u975e\u7834\u58ca\u7684\u64cd\u4f5c\n\n```rb\na1 = [1,2,3]\na2 = [4,5]\na1.concat(a2)\n# a1 => [1,2,3,4,5], a2 => [4,5]\n```\n\n- c++\n  - v1\u304c\u5909\u66f4\u3055\u308c\u308b\uff08\u7834\u58ca\u7684\u64cd\u4f5c\uff09\u3002v2\u306e\u8981\u7d20\u304c\u30b3\u30d4\u30fc\u3055\u308c\u308b\u3002O(N)\n\n```cpp\nstd::vector<long> v1 = {1,2,3};\nstd::vector<long> v2 = {4,5};\nv1.insert( v1.end(), v2.begin(), v2.end() );\n// v1 => [1,2,3,4,5] , v2 => [4,5]\n```\n\n### <<, push\n\n\u672b\u5c3e\u306b\u8981\u7d20\u3092\u8ffd\u52a0\n\n- ruby\n\n```rb\na = [1,2]\na << 3\n# a => [1,2,3]\n```\n\n- cpp\n\n```cpp\nstd::vector<long> a = {1,2};\na.push_back(3);\n// a => [1,2,3]\n```\n\n### map\n\n- ruby\n\n```rb\n[1,2,3].map! {|x| 2*x }  #=> [2,4,6]\n```\n\n- c++\n\n```cpp\nstd::vector<long> a = {1,2,3};\nauto twice = [](long x)->long { return 2*x; };\nfor( auto& x : a ) { twice(x); }\n// a => [2,4,6]\n```\n\n### find\n\n- ruby\n  - \u8981\u7d20\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306fnil\u304c\u8fd4\u308b\n\n```rb\n[7,8,9,10,11].find {|x| x%5 == 0 }  #=> 10\n```\n\n- c++\n  - `std::find_if` \u3092\u4f7f\u3046\u3002`#include <algorithm>` \u304c\u5fc5\u8981\u3002\n  - \u8981\u7d20\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f `v.end()` \u304c\u8fd4\u308b\n\n```cpp\nstd::vector<long> v = {7,8,9,10,11};\nauto f = [](long x)->bool { return (x%5==0); };\nauto found = std::find_if( v.begin(), v.end(), f );\nif( found == v.end() ) {\n  std::cout << \"Not found\" << std::endl;\n}\nelse {\n  std::cout << \"Found: \" << *found << std::endl;\n}\n// Found: 10\n```\n\n- c++\uff08\u4e8b\u524d\u306b\u914d\u5217\u304c\u30bd\u30fc\u30c8\u3057\u3066\u3042\u308b\u5834\u5408\uff09\n  - binary search \u3067 O(logN) \u3067\u63a2\u305b\u308b\u3002\n\n```cpp\nstd::vector<long> v = {7,8,9,10,11};\n\nauto found = std::lower_bound( v.begin(), v.end(), 10 );\nif( found == v.end() ) { std::cout << \"Not found\" << std::endl; }\nelse { std::cout << \"Found: \" << *found << std::endl; }\n//  *found = 10\n```\n\n### find_all\n\n- ruby\n\n```rb\n[1,2,3,4,5].find_all {|x| x>3 }  #=> [4,5]\n```\n\n- c++\n\n```cpp\nstd::vector<long> a = {1,2,3,4,5};\nstd::vector<long> result;\nauto condition = [](long x)->bool { return (x>3); };\nfor( const auto& x : a ) {\n  if( condition(x) ) { result.push_back(x); }\n} \n// result => [4,5]\n```\n\n### sort\n\n- ruby\n\n```rb\n[4,1,3,2,5].sort!  #=> [1,2,3,4,5]\n```\n\n- c++\n\n```cpp\nstd::vector<long> v = {4,1,3,2,5};\nstd::sort( v.begin(), v.end() );\n// v => [1,2,3,4,5]\n```\n\n### sort_by\n\n- ruby\n\n```rb\n[4,1,2,3,5].sort_by! {|x| (3-x).abs }  #=> [3,4,2,1,5]\n```\n\n- cpp\n  - `std::sort`\u3092\u4f7f\u3046\u3002`#include <algorithm>` \u304c\u5fc5\u8981\n  - \u7b2c\uff13\u5f15\u6570\u306b\u306f \"less than\" \u3092\u5b9a\u7fa9\u3059\u308b\u30d5\u30a1\u30f3\u30af\u30bf\u3092\u6e21\u3059\n\n```cpp\nstd::vector<long> v = {4,1,2,3,5};\nauto f = [](long x)->long { return std::abs(3-x); };\n\nstd::sort(\n    v.begin(),\n    v.end(),\n    [&](const long& lhs, const long& rhs)->bool {\n      return( f(lhs) < f(rhs) );\n      }\n    );\n// v => [3,4,2,1,5]\n```\n\n### index\n\n- ruby\n\n```rb\n[5,1,4,2,3].index(2)  #=> 3\n```\n\n- c++\n  - \b`find_if` \u3067iterator\u3092\u53d6\u5f97\u3057\u3066\u3001\u5148\u982d\u304b\u3089\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u3068index\u306b\u306a\u308b\u3002\n  - \u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001`v.size()`\u3068\u7b49\u3057\u304f\u306a\u308b\u3002\n\n```cpp\nstd::vector<long> v = {5,1,4,2,3};\nauto f = [](long x)->bool { return (x == 2); };\nauto found = std::find_if(v.begin(), v.end(), f ); \nsize_t dist = std::distance(v.begin(), found);\n```\n\n### all?\n\n- ruby\n\n```rb\n[2,4,6,8].all? {|x| x % 2 == 0 }  #=> true\n[2,4,6,9].all? {|x| x % 2 == 0 }  #=> false\n```\n\n- c++\n\n```cpp\nstd::vector<long> v = {2,4,6,8};\nbool b1 = std::all_of( v.begin(), v.end(), [](long x) {\n  return x%2==0;\n});\n// b1 => true\n\nstd::vector<long> v = {2,4,6,9};\nbool b2 = std::all_of( v.begin(), v.end(), [](long x) {\n  return x%2==0;\n});\n// b2 => false\n```\n\n### sum\n\n- ruby\n  - inject\u3092\u4f7f\u3046\n\n```rb\n[1,3,5].inject(:+)   #=> 9\n```\n\n- c++\n  - accumulate \u3092\u4f7f\u3046\u3068\u7c21\u5358\n  - \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8db3\u3057\u7b97\u3092\u884c\u3046\n  - `#include <numeric>` \u304c\u5fc5\u8981\n\n```cpp\nstd::vector<long> v = {1,3,5};\nlong sum = std::accumulate(v.begin(), v.end(), 0);  // => 9\n```\n\n### inject (reduce)\n\n- ruby\n\n```rb\n[1,2,3,4,5].inject(1) {|acc,x| acc*x }   #=> 120\n[1,2,3,4,5].inject(\"\") {|acc,x| acc + (x%2==0?'e':'o') }   #=> oeoeo\n```\n\n- c++\n\n```cpp\nstd::vector<long> v = {1,2,3,4,5};\nlong prod = std::accumulate(v.begin(), v.end(), 1, [](long acc, long x) {\n  return acc*x;\n});\n// prod => 120\n\nstd::string str = std::accumulate(v.begin(), v.end(), std::string(), [](const std::string& acc, long x)->std::string {\n  return acc + ((x%2==0)?\"e\":\"o\");\n});\n// str => \"oeoeo\"\n```\n\n### uniq\n\n- ruby\n\n```rb\n[5,1,1,2,3,5,5].uniq!  #=> [5,1,2,3]\n```\n\n- c++\n  - set\u3092\u4f5c\u3063\u3066insert\u3057\u3066\u3044\u304f\u3002insert\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f\u914d\u5217\u306b\u6b8b\u3059\u304c\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f\u914d\u5217\u304b\u3089\u9664\u304f\n  - (\u6ce8\u610f) `std::unique` \u306f\u914d\u5217\u306e**\u9023\u7d9a\u3059\u308b**\u91cd\u8907\u8981\u7d20\u3092\u53d6\u308a\u9664\u304f\u305f\u3081\u306b\u3057\u304b\u4f7f\u3048\u306a\u3044\u3002\n      - \u4e8b\u524d\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3042\u308b\u914d\u5217\u306b\u306f\u4f7f\u3048\u308b\n\n```cpp\nstd::vector<long> v = {5,1,1,2,3,5,5};\n\nstd::set<long> tmpset;\nauto sorted = v.begin();\nfor( auto it = v.begin(); it != v.end(); ++it ) {\n  if( tmpset.insert(*it).second ) {\n    *sorted = *it;\n    sorted++;\n  }\n}\nv.erase( sorted, v.end() );\n// v => [5,1,2,3]\n```\n\n- c++ (\u30bd\u30fc\u30c8\u6e08\u307f\u306e\u5834\u5408)\n\n```cpp\nstd::vector<long> v = {1,1,2,3,4,4,4};\nv.erase( std::unique(v.begin(), v.end()), v.end() );\n// v => [1,2,3,4]\n```\n\n### uniq { block }\n\n- ruby\n  - \u30d6\u30ed\u30c3\u30af\u3092\u8a55\u4fa1\u3057\u305f\u7d50\u679c\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u3082\u306e\u3092\u524a\u9664\u3059\u308b\n\n```rb\n[4,5,1,2,3,4,5].uniq! {|x| x % 3 }   #=> [4,5,3]\n```\n\n- c++\n\n```cpp\nstd::vector<long> v = {4,5,1,2,3,4,5};\nauto f = [](long x)->long { return x % 3; };\n\nstd::set<long> tmpset;\nauto sorted = v.begin();\nfor( auto it = v.begin(); it != v.end(); ++it ) {\n  if( tmpset.insert( f(*it) ).second ) {\n    *sorted = *it;\n    ++sorted;\n  }\n}\nv.erase( sorted, v.end() );\n// v => [4,5,3]\n```\n\n### join\n\n- ruby\n\n```rb\n[1,5,3,2].join(\":\")  #=> \"1:5:3:2\"\n```\n\n- c++\n  - `ostringstream` \u3092\u4f7f\u3046\u306b\u306f `#include <sstream>` \u304c\u5fc5\u8981\n\n```cpp\nstd::vector<long> v = {1,5,3,2};\nauto io = std::ostringstream();\nstd::string separator = \":\";\n\nfor(auto it = v.begin(); it != v.end(); ) {\n  io << *it;\n  if( (++it) != v.end() ) { io << separator; }\n}\n```\n\n### reverse\n\n- ruby\n\n```rb\n[1,2,3].reverse!  #=> [3,2,1]\n```\n\n- c++\n  - `#include <algorithm>` \u304c\u5fc5\u8981\n\n```cpp\nstd::vector<long> v = {1,2,3};\nstd::reverse( v.begin(), v.end() );\n// v => [3,2,1] \n```\n\n### group_by\n\n- ruby\n\n```rb\n[\"cat\",\"bat\",\"bear\",\"camel\",\"alpaca\"].group_by {|x| x[0]}\n# {\"c\"=>[\"cat\", \"camel\"], \"b\"=>[\"bat\", \"bear\"], \"a\"=>[\"alpaca\"]}\n```\n\n- c++\n  - \u7d50\u679c\u306fmap\u306b\u683c\u7d0d\u3059\u308b\u3002`#include <map>` \u304c\u5fc5\u8981\n\n```cpp\nstd::vector<std::string> v = {\"cat\",\"bat\",\"bear\",\"camel\",\"alpaca\"};\nauto f = [](const std::string& s)-> char { return s.c_str()[0]; };\n\nstd::map<char, std::vector<std::string> > result;\nfor( const auto& x : v ) {\n  result[ f(x) ].push_back(x);\n}\n//  { 'a' => [\"alpaca\"], 'b' => [\"bat\", \"bear\"], 'c' => [\"cat\", \"camel\"] } \n```\n\n### shuffle\n\n- ruby\n\n```rb\n[1,2,3,4,5,6,7].shuffle   #=> [2, 6, 4, 7, 5, 3, 1]\n```\n\n- c++\n  - `#include <random>` \u304c\u5fc5\u8981\n\n```cpp\nstd::vector<long> v = {1,2,3,4,5,6,7};\n\nstd::mt19937 rnd(1234);\nstd::shuffle(v.begin(), v.end(), rnd);\n// v => [4, 7, 2, 1, 5, 3, 6]\n```\n\n### inspect\n\n\u914d\u5217\u306e\u4e2d\u8eab\u306e\u8868\u793a\uff08\u30c7\u30d0\u30c3\u30b0\u7528\uff09\n\n- Ruby\n\n```rb\n[1,2,3].inspect  # \"[1, 2, 3]\"\n```\n\n- C++\n\n```cpp\ntemplate <class T>\nstd::string Inspect( const std::vector<T>& v ) {\n  std::ostringstream oss;  // #include <sstream> \u304c\u5fc5\u8981\n  oss << \"[\";\n  for( size_t i=0; i < v.size(); i++) {\n    oss << v[i];\n    if( i != v.size() - 1 ) { oss << \", \"; }\n    else { oss << \"]\" << std::endl; }\n  }\n  oss.str();\n}\n\nstd::vector<long> v = {1,2,3};\nInspect(v);   // => [1,2,3]\n```\n", "tags": ["Ruby", "C++", "C++11"]}