{"tags": ["Python", "MachineLearning", "\u6a5f\u68b0\u5b66\u7fd2", "Cython"], "context": "\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\nPython\u3092\u901f\u304f\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a9e\u308a\u307e\u3059\n\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u306b\u3088\u3063\u3066CPU\u30d0\u30a6\u30f3\u30c9\u306a\u51e6\u7406\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092\u898b\u3064\u3051\u307e\u3059\n\u898b\u3064\u3051\u305f\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092Cython\u3067\u6539\u5584\u3057\u307e\u3059\n\n\n\u306f\u3058\u3081\u306b\n\u5148\u65e5Bayesian Personalized Ranking (BPR)\u3068\u3044\u3046\u30ec\u30b3\u30e1\u30f3\u30c9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u3053\u3061\u3089\u306e\u8ad6\u6587\u306e\u5f0f\u3092\u53c2\u8003\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u5b9f\u884c\u3057\u3066\u307f\u305f\u3089\u3061\u3087\u3063\u3068\u9045\u3059\u304e\u3066\u4f7f\u3048\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u51e6\u7406\u901f\u5ea6\u306e\u6539\u5584\u306b\u53d6\u308a\u7d44\u307f\u307e\u3057\u305f\u3002\n\u305d\u306e\u6642\u306b\u8a66\u3057\u305f\u3053\u3068\u3092\u5099\u5fd8\u9332\u7684\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u7528\u3044\u308b\u624b\u6cd5\u3068\u30b3\u30fc\u30c9\nBPR\u306f\u30e6\u30fc\u30b6 x \u30a2\u30a4\u30c6\u30e0\u306e\u884c\u5217\u306e\u884c\u5217\u5206\u89e3\u3092\u4e0e\u3048\u307e\u3059\u3002\n\u30e6\u30fc\u30b6 x \u30a2\u30a4\u30c6\u30e0\u306e\u884c\u5217XXX\u3092\u3001\u30e6\u30fc\u30b6 x \u30d5\u30a1\u30af\u30bf\u30fc\u306e\u884c\u5217UU\u3068\u30a2\u30a4\u30c6\u30e0 x \u30d5\u30a1\u30af\u30bf\u30fc\u306e\u884c\u5217VV\u306b\u5206\u89e3\u3057\u307e\u3059\u3002\nX = U \\cdot V^T\nX=U\u22c5VT{X = U \\cdot V^T\n}\n\u3053\u306e\u554f\u984c\u3092\u3069\u306e\u3088\u3046\u306b\u89e3\u304f\u304b\u306fBPR\u306e\u5143\u8ad6\u6587\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\u3053\u306e\u624b\u6cd5\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002XX\u306fscipy.sparse.lil_matrix\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u5206\u89e3\u5f8c\u306eUU\u3068VV\u306fnumpy.array\u3067\u3059\u3002\n\u5b66\u7fd2\u306b\u7528\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3001\u305d\u306e\u5f8cU,VU,V\u3092\u66f4\u65b0\u3059\u308b\u3068\u3044\u3046\u6d41\u308c\u3067\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u3001\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u306e\u90e8\u5206\u3067\u3042\u308bbuildModel()\u3092\u6539\u5584\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nMFbpr.py\nclass MFbpr(Recommender):\n    '''\n    \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u304b\u4ed6\u306e\u51e6\u7406\n    '''\n\n    def buildModel(self):\n        loss_pre = sys.float_info.max\n        nonzeros = self.trainMatrix.nnz\n        hr_prev = 0.0\n        sys.stderr.write(\"Run for BPR. \\n\")\n        for itr in xrange(self.maxIter):\n            start = time.time()\n\n            # Each training epoch\n            for s in xrange(nonzeros):\n                # sample a user\n                u = np.random.randint(self.userCount)\n                itemList = self.trainMatrix.getrowview(u).rows[0]\n                if len(itemList) == 0:\n                    continue\n                # sample a positive item\n                i = random.choice(itemList)\n\n                # One SGD step update\n                self.update_ui(u, i)\n\n    def update_ui(self, u, i):\n        # sample a negative item(uniformly random)\n        j = np.random.randint(self.itemCount)\n        while self.trainMatrix[u, j] != 0:\n            j = np.random.randint(self.itemCount)\n\n        # BPR update rules\n        y_pos = self.predict(u, i)  # target value of positive instance\n        y_neg = self.predict(u, j)  # target value of negative instance\n        mult = -self.partial_loss(y_pos - y_neg)\n\n        for f in xrange(self.factors):\n            grad_u = self.V[i, f] - self.V[j, f]\n            self.U[u, f] -= self.lr * (mult * grad_u + self.reg * self.U[u, f])\n\n            grad = self.U[u, f]\n            self.V[i, f] -= self.lr * (mult * grad + self.reg * self.V[i, f])\n            self.V[j, f] -= self.lr * (-mult * grad + self.reg * self.V[j, f])\n\n\n\nexec_bpr.py\nfrom MFbpr import MFbpr\n\ndef load_data(ratingFile, testRatio=0.1):\n    '''\n    \u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3059\u308b\u51e6\u7406\n    '''\n    return trainMatrix, testRatings\n\nif __name__ == \"__main__\":\n    # data\n    trainMatrix, testRatings = load_data('yelp.rating')\n\n    # settings\n    topK = 100\n    factors = 64\n    maxIter = 10\n    maxIterOnline = 1\n    lr = 0.01\n    adaptive = False\n    init_mean = 0.0\n    init_stdev = 0.1\n    reg = 0.01\n    showProgress = False\n    showLoss = True\n\n    bpr = MFbpr(trainMatrix, testRatings, topK, factors, maxIter, lr, adaptive, reg, init_mean, init_stdev, showProgress, showLoss)\n    bpr.buildModel()\n\n\n\n\u306a\u304a\u3001\u30b3\u30fc\u30c9\u306e\u5168\u91cf\u306fgithub\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u884c\u3057\u3066\u307f\u308b\n\u3068\u308a\u3042\u3048\u305a\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u8a2d\u5b9a\n\n\u30c7\u30fc\u30bf\n\n\u30e6\u30fc\u30b6\u6570\uff1a25,677\n\u30a2\u30a4\u30c6\u30e0\u6570\uff1a25,815\n\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u6570(\u8a55\u4fa1\u304c\u5b58\u5728\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u306e\u500b\u6570)\uff1a627,775\n\n\n\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\n\n\u30d5\u30a1\u30af\u30bf\u30fc\u6570\uff1a64\n\n\n\u5b9f\u884c\u74b0\u5883\nVirtualBox\u4e0a\u306b\u69cb\u7bc9\u3057\u305f\u30e1\u30e2\u30ea2G\u3001\u30d7\u30ed\u30bb\u30c3\u30b52\u500b\u306eubuntu\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\u3072\u3068\u3064\u76ee\u306e\u9375\u62ec\u5f27\u304c1\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u304b\u304b\u3063\u305f\u6642\u9593[s]\u3001\u6700\u5f8c\u306e\u9375\u62ec\u5f27\u306floss\u306e\u8a08\u7b97\u306b\u304b\u304b\u3063\u305f\u6642\u9593[s]\u3067\u3059\u3002\n> python exex_bpr.py\n\nData    yelp.rating\n#Users  25677, #newUser: 588\n#Items  25815\n#Ratings     627775.0 (train), 73167(test), 10056(#newTestRatings)\nRun for BPR. \nIter=0 [128.6936481]     [-]loss: 624484.357765 [8.16665792465]\nIter=1 [137.202406883]   [-]loss: 616970.769244 [7.11149096489]\nIter=2 [131.134891987]   [-]loss: 609361.307524 [7.12593793869]\nIter=3 [134.665620804]   [-]loss: 601240.628869 [8.45840716362]\nIter=4 [134.722868919]   [-]loss: 592053.155587 [7.6300880909]\n\n\u7d0460\u4e07\u30b5\u30f3\u30d7\u30eb\u306b\u3064\u3044\u3066\u8a08\u7b97\u3057\u3066\u3044\u308b\u3068\u306f\u3044\u3048\u30011\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3130\u79d2\u306f\u304b\u304b\u308a\u904e\u304e\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\n\n\u5168\u4f53\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\n\u307e\u305a\u306f\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u90e8\u5206\u306e\u7279\u5b9a\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\nPython\u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u306ecProfile\u3092\u4f7f\u3063\u3066\u51e6\u7406\u901f\u5ea6\u3092\u8a08\u6e2c\u3057\u307e\u3059\u3002\npython -m cProfile -s cumulative ***.py\n\u3068\u5b9f\u884c\u3059\u308c\u3070\u6642\u9593\u306e\u304b\u304b\u3063\u305f\u51e6\u7406\u3092\u964d\u9806\u3067\u8868\u793a\u3092\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n> python -m cProfile -s cumulative exex_bpr.py\n\nData    yelp.rating\n#Users  25677, #newUser: 588\n#Items  25815\n#Ratings     627775.0 (train), 73167(test), 10056(#newTestRatings)\nRun for BPR. \nIter=0 [244.87996006]    [-]loss: 624394.802988 [53.4806399345]\nIter=1 [248.624686956]   [-]loss: 616876.50976 [48.6073460579]\nIter=2 [253.822627068]   [-]loss: 609269.820414 [52.5446169376]\nIter=3 [261.039247036]   [-]loss: 601207.904104 [53.8221797943]\nIter=4 [260.285779953]   [-]loss: 592212.148141 [54.9556028843]\n         369374621 function calls (368041918 primitive calls) in 1808.492 seconds\n\n   Ordered by: cumulative time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.171    0.171 1808.493 1808.493 exex_bpr.py:3(<module>)\n        1   34.307   34.307 1532.124 1532.124 MFbpr.py:40(buildModel)\n  3067088  535.383    0.000  830.046    0.000 MFbpr.py:92(update_ui)\n  6209078   48.829    0.000  433.564    0.000 lil.py:228(__getitem__)\n  3292937   26.140    0.000  376.631    0.000 lil.py:191(getrowview)\n  3292939   66.488    0.000  346.337    0.000 lil.py:85(__init__)\n        5    0.000    0.000  263.411   52.682 MFbpr.py:117(_showLoss)\n        5   22.098    4.420  263.410   52.682 MFbpr.py:128(loss)\n        1    9.443    9.443  242.550  242.550 exex_bpr.py:9(load_data)\n\nOrdered by: cumulative time\u3068\u3044\u3046\u884c\u306e\u4e0b\u304b\u3089\u3001\u95a2\u6570\u540d\u3068\u51e6\u7406\u306b\u8981\u3057\u305f\u6642\u9593\u304c\u7f85\u5217\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u898b\u308b\u3068update_ui\u3068\u3044\u3046\u95a2\u6570\u304c3,067,088\u56de\u547c\u3070\u308c\u3066\u30c8\u30fc\u30bf\u30eb535.383\u79d2\u304b\u304b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n(\u307e\u3042\u3001buildModel\u306e\u4e2d\u3067\u306f\u307b\u3068\u3093\u3069update_ui\u3057\u304b\u547c\u3093\u3067\u306a\u3044\u306e\u3067\u5f53\u7136\u3068\u3044\u3048\u3070\u5f53\u7136\u3067\u3059\u304c\uff0e\uff0e\uff0e)\n\u306a\u304a\u30011\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u6642\u9593\u304c\u5148\u7a0b\u3088\u308a\u5927\u304d\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u306fcProfile\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3067\u3059\u3002\n\n\u884c\u5358\u4f4d\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\nline_profiler\u3092\u4f7f\u3048\u3070\u6ce8\u76ee\u3057\u3066\u3044\u308b\u95a2\u6570\u306b\u3064\u3044\u3066\u884c\u5358\u4f4d\u3067\u8a08\u6e2c\u3067\u304d\u307e\u3059\u3002\npip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n> pip install line_profiler\n\nline_profiler\u3067\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3059\u308b\u305f\u3081\u306b\u306f\u6ce8\u76ee\u3057\u3066\u3044\u308b\u95a2\u6570\u306b@profile\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nMFbpr.py\n    @profile\n    def update_ui(self, u, i):\n        # sample a negative item(uniformly random)\n        j = np.random.randint(self.itemCount)\n        while self.trainMatrix[u, j] != 0:\n            j = np.random.randint(self.itemCount)\n\n        # BPR update rules\n        y_pos = self.predict(u, i)  # target value of positive instance\n        y_neg = self.predict(u, j)  # target value of negative instance\n        mult = -self.partial_loss(y_pos - y_neg)\n\n        for f in xrange(self.factors):\n            grad_u = self.V[i, f] - self.V[j, f]\n            self.U[u, f] -= self.lr * (mult * grad_u + self.reg * self.U[u, f])\n\n            grad = self.U[u, f]\n            self.V[i, f] -= self.lr * (mult * grad + self.reg * self.V[i, f])\n            self.V[j, f] -= self.lr * (-mult * grad + self.reg * self.V[j, f])\n\n\n\n\u3042\u3068\u306fkernprof\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n> kernprof -l -v exex_bpr.py\n\nData    yelp.rating\n#Users  25677, #newUser: 588\n#Items  25815\n#Ratings     627775.0 (train), 73167(test), 10056(#newTestRatings)\nRun for BPR. \nIter=0 [953.993126154]   [-]loss: 624406.940531 [7.50253987312]\nIter=1 [962.82383585]    [-]loss: 616855.373858 [7.96375918388]\nWrote profile results to exex_bpr.py.lprof\nTimer unit: 1e-06 s\n\nTotal time: 1082.55 s\nFile: MFbpr.py\nFunction: update_ui at line 92\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    92                                               @profile\n    93                                               def update_ui(self, u, i):\n    94                                                   # sample a negative item(uniformly random)\n    95   1226961      8241361      6.7      0.8          j = np.random.randint(self.itemCount)\n    96   1228124     39557350     32.2      3.7          while self.trainMatrix[u, j] != 0:\n    97      1163         6123      5.3      0.0              j = np.random.randint(self.itemCount)\n    98                                                       \n    99                                                   # BPR update rules\n   100   1226961      9495381      7.7      0.9          y_pos = self.predict(u, i)  # target value of positive instance\n   101   1226961      4331378      3.5      0.4          y_neg = self.predict(u, j)  # target value of negative instance\n   102   1226961     10002355      8.2      0.9          mult = -self.partial_loss(y_pos - y_neg)\n   103                                                   \n   104  79752465    126523856      1.6     11.7          for f in xrange(self.factors):\n   105  78525504    161882071      2.1     15.0              grad_u = self.V[i, f] - self.V[j, f]\n   106  78525504    191293505      2.4     17.7              self.U[u, f] -= self.lr * (mult * grad_u + self.reg * self.U[u, f])\n   107                                                           \n   108  78525504    137871145      1.8     12.7              grad = self.U[u, f]\n   109  78525504    194033291      2.5     17.9              self.V[i, f] -= self.lr * (mult * grad + self.reg * self.V[i, f])\n   110  78525504    199315454      2.5     18.4              self.V[j, f] -= self.lr * (-mult * grad + self.reg * self.V[j, f])\n\n\n% Time\u306e\u30ab\u30e9\u30e0\u3092\u898b\u308b\u3068\u3001update_ui\u306e\u51e6\u7406\u6642\u9593\u306e\u3046\u3061\u300190%\u4ee5\u4e0a\u304cfor\u6587\u4ee5\u4e0b\u3067\u8cbb\u3084\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n1\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u304c1,000\u79d2\u5f31\u3068\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nCython\u3067\u9ad8\u901f\u5316\n\n\u5b9f\u88c5\n\u5148\u307b\u3069\u306efor\u30eb\u30fc\u30d7\u3092Cython\u3067\u66f8\u304d\u76f4\u3057\u307e\u3059\u3002\nPython\u304c\u9045\u3044\u539f\u56e0\u306e\u3072\u3068\u3064\u304c\u3001Python\u306f\u52d5\u7684\u578b\u4ed8\u3051\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u305f\u3073\u306b\u578b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5909\u6570\u306e\u53c2\u7167\u304c\u591a\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u306e\u64cd\u4f5c\u306b\u304b\u304b\u308b\u6642\u9593\u304c\u7121\u8996\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u304d\u307e\u3059\u3002\nCython\u3092\u4f7f\u3063\u3066\u66f8\u3051\u3070c\u8a00\u8a9e\u306e\u3088\u3046\u306b\u5909\u6570\u306e\u578b\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u3044\u3061\u3044\u3061\u578b\u306e\u78ba\u8a8d\u304c\u884c\u308f\u308c\u306a\u3044\u306e\u3067\u304b\u306a\u308a\u306e\u9ad8\u901f\u5316\u304c\u671f\u5f85\u3067\u304d\u307e\u3059\u3002\n\u5909\u6570\u306e\u5ba3\u8a00\u306fcdef\u3067\u884c\u3044\u307e\u3059\u3002\u8a08\u7b97\u306b\u7528\u3044\u308b\u3059\u3079\u3066\u306e\u5909\u6570\u306e\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nfastupdfn.pyx\nimport numpy as np\ncimport numpy as np\ncimport cython\n\nDOUBLE = np.float64\nctypedef np.float64_t DOUBLE_t\n\ncpdef c_upd(np.ndarray[DOUBLE_t, ndim=2] U, \n          np.ndarray[DOUBLE_t, ndim=2] V,\n          double mult,\n          double lr,\n          double reg,\n          unsigned int u,\n          unsigned int i,\n          unsigned int j,\n          unsigned int factors):\n    cdef unsigned int f\n    cdef double grad_u, grad\n    for f in xrange(factors):\n        grad_u = V[i, f] - V[j, f]\n        U[u, f] -= lr * (mult * grad_u + reg * U[u, f])\n\n        grad = U[u, f]\n        V[i, f] -= lr * (mult * grad + reg * V[i, f])\n        V[j, f] -= lr * (-mult * grad + reg * V[j, f])\n\n    return U, V\n\n\n\u547c\u3073\u51fa\u3057\u5143\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\nMFbpr.py\nimport fastupd    # \u8ffd\u52a0\n\nclass MFbpr(Recommender):\n    \"\"\"\n    \u4e2d\u7565\n    \"\"\"\n    def update_ui(self, u, i):\n        # sample a negative item(uniformly random)\n        j = np.random.randint(self.itemCount)\n        while self.trainMatrix[u, j] != 0:\n            j = np.random.randint(self.itemCount)\n\n        # BPR update rules\n        y_pos = self.predict(u, i)  # target value of positive instance\n        y_neg = self.predict(u, j)  # target value of negative instance\n        mult = -self.partial_loss(y_pos - y_neg)\n\n        # Cython\u5b9f\u88c5\u3092\u547c\u3073\u51fa\u3059\n        self.U, self.V = fastupd.c_upd(self.U, self.V, mult, self.lr, self.reg, u, i, j, self.factors) \n\n\n\n\u307e\u305f\u3001Cython\u5b9f\u88c5\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u305f\u3081\u306esetup.py\u3082\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nsetup.py\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\n\nsetup(\n    cmdclass={'build_ext': build_ext},\n    ext_modules=[Extension(\"fastupd\", [\"fastupdfn.pyx\"])]\n)\n\n\n\u6e96\u5099\u304c\u6e08\u3093\u3060\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u3059\u3002\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n> python setup.py build_ext --inplace\n\n\n\u5b9f\u884c\n\u5b9f\u884c\u3057\u307e\u3059\u3002\n> python exec_bpr.py\n\nData    yelp.rating\n#Users  25677, #newUser: 588\n#Items  25815\n#Ratings     627775.0 (train), 73167(test), 10056(#newTestRatings)\nRun for BPR. \nIter=0 [38.7308020592]   [-]loss: 624282.459815 [8.64863014221]\nIter=1 [36.7822458744]   [-]loss: 616740.942017 [8.62252616882]\nIter=2 [35.8996829987]   [-]loss: 609119.520253 [7.9108710289]\nIter=3 [35.1236720085]   [-]loss: 600992.740207 [8.14179396629]\nIter=4 [34.9632918835]   [-]loss: 591877.909123 [8.81325411797]\n\n1\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u6642\u9593\u304c40\u79d2\u304b\u304b\u3089\u306a\u3044\u7a0b\u5ea6\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u6700\u521d\u3068\u6bd4\u3079\u308b\u30683~4\u500d\u901f\u304f\u306a\u3063\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\nline_profiler\u306e\u7d50\u679c\u3082\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n> kernprof -l -v exex_bpr.py\n\nData    yelp.rating\n#Users  25677, #newUser: 588\n#Items  25815\n#Ratings     627775.0 (train), 73167(test), 10056(#newTestRatings)\nRun for BPR. \nIter=0 [66.7851500511]   [-]loss: 624400.680806 [7.92221903801]\nIter=1 [62.5339269638]   [-]loss: 616866.244211 [7.85720801353]\nIter=2 [65.6408250332]   [-]loss: 609235.226048 [8.48338794708]\nIter=3 [66.0613160133]   [-]loss: 601140.035318 [8.52119803429]\nIter=4 [66.5882000923]   [-]loss: 592026.927719 [8.32318806648]\nWrote profile results to exex_bpr.py.lprof\nTimer unit: 1e-06 s\n\nTotal time: 164.139 s\nFile: MFbpr.py\nFunction: update_ui at line 93\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    93                                               @profile\n    94                                               def update_ui(self, u, i):\n    95                                                   # sample a negative item(uniformly random)\n    96   3066856     17642519      5.8     10.7          j = np.random.randint(self.itemCount)\n    97   3069840     79530375     25.9     48.5          while self.trainMatrix[u, j] != 0:\n    98      2984        15027      5.0      0.0              j = np.random.randint(self.itemCount)\n    99                                                       \n   100                                                   # BPR update rules\n   101   3066856     17651846      5.8     10.8          y_pos = self.predict(u, i)  # target value of positive instance\n   102   3066856     10985781      3.6      6.7          y_neg = self.predict(u, j)  # target value of negative instance\n   103   3066856     18993291      6.2     11.6          mult = -self.partial_loss(y_pos - y_neg)\n   104                                                  \n   105   3066856     19320147      6.3     11.8          self.U, self.V = fastupd.c_upd(self.U, self.V, mult, self.lr, self.reg, u, i, j, self.factors) \n\n\n\u3082\u3068\u3082\u306890%\u4ee5\u4e0a\u3092\u8cbb\u3084\u3057\u3066\u3044\u305f\u884c\u5217\u66f4\u65b0\u306e\u90e8\u5206\u304c11.8%\u306b\u6e1b\u5c11\u3057\u307e\u3057\u305f\u3002Cython\u306e\u52b9\u679c\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u307e\u3068\u3081\ncPrifile\u3084line_profiler\u3092\u7528\u3044\u305f\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u306b\u3088\u3063\u3066\u51e6\u7406\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u304c\u767a\u898b\u3067\u304d\u3001Cython\u3092\u4f7f\u3063\u3066\u6539\u5584\u3057\u307e\u3057\u305f\u3002\n1\u7b87\u6240\u66f8\u304d\u63db\u3048\u305f\u3060\u3051\u3067\u3059\u304c\u30014\u500d\u5f31\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001Cython\u3092\u9069\u7528\u3057\u305f\u30b3\u30fc\u30c9\u306fgithub\u306ew_cython\u30d6\u30e9\u30f3\u30c1\u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\u305d\u306e\u3046\u3061master\u306b\u30de\u30fc\u30b8\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u304a\u307e\u3051\uff1f\nfor\u6587\u306e\u90e8\u5206\u306f\u3001\u884c\u5217\u306e\u8981\u7d20\u3092\u72ec\u7acb\u306b\u66f4\u65b0\u3057\u3066\u3044\u308b\u306e\u3067\u5b8c\u5168\u306b\u4e26\u5217\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u3002Cython\u306b\u306fprange()\u3068\u3044\u3046\u3001for\u6587\u306e\u51e6\u7406\u3092\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3082\u3046\u5c11\u3057\u6539\u5584\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n#\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\n- Python\u3092\u901f\u304f\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a9e\u308a\u307e\u3059\n- \u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u306b\u3088\u3063\u3066CPU\u30d0\u30a6\u30f3\u30c9\u306a\u51e6\u7406\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092\u898b\u3064\u3051\u307e\u3059\n- \u898b\u3064\u3051\u305f\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092Cython\u3067\u6539\u5584\u3057\u307e\u3059\n\n# \u306f\u3058\u3081\u306b\n\u5148\u65e5Bayesian Personalized Ranking (BPR)\u3068\u3044\u3046\u30ec\u30b3\u30e1\u30f3\u30c9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n[\u3053\u3061\u3089\u306e\u8ad6\u6587](http://arxiv.org/abs/1205.2618)\u306e\u5f0f\u3092\u53c2\u8003\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u5b9f\u884c\u3057\u3066\u307f\u305f\u3089\u3061\u3087\u3063\u3068\u9045\u3059\u304e\u3066\u4f7f\u3048\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u51e6\u7406\u901f\u5ea6\u306e\u6539\u5584\u306b\u53d6\u308a\u7d44\u307f\u307e\u3057\u305f\u3002\n\u305d\u306e\u6642\u306b\u8a66\u3057\u305f\u3053\u3068\u3092\u5099\u5fd8\u9332\u7684\u306b\u307e\u3068\u3081\u307e\u3059\u3002\n\n# \u3053\u306e\u8a18\u4e8b\u3067\u7528\u3044\u308b\u624b\u6cd5\u3068\u30b3\u30fc\u30c9\nBPR\u306f\u30e6\u30fc\u30b6 x \u30a2\u30a4\u30c6\u30e0\u306e\u884c\u5217\u306e\u884c\u5217\u5206\u89e3\u3092\u4e0e\u3048\u307e\u3059\u3002\n\u30e6\u30fc\u30b6 x \u30a2\u30a4\u30c6\u30e0\u306e\u884c\u5217$X$\u3092\u3001\u30e6\u30fc\u30b6 x \u30d5\u30a1\u30af\u30bf\u30fc\u306e\u884c\u5217$U$\u3068\u30a2\u30a4\u30c6\u30e0 x \u30d5\u30a1\u30af\u30bf\u30fc\u306e\u884c\u5217$V$\u306b\u5206\u89e3\u3057\u307e\u3059\u3002\n\n```math\nX = U \\cdot V^T\n```\n\n\u3053\u306e\u554f\u984c\u3092\u3069\u306e\u3088\u3046\u306b\u89e3\u304f\u304b\u306fBPR\u306e[\u5143\u8ad6\u6587](http://arxiv.org/abs/1205.2618)\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u306e\u624b\u6cd5\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002$X$\u306f`scipy.sparse.lil_matrix`\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u5206\u89e3\u5f8c\u306e$U$\u3068$V$\u306f`numpy.array`\u3067\u3059\u3002\n\u5b66\u7fd2\u306b\u7528\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u30d6\u30fc\u30c8\u30b9\u30c8\u30e9\u30c3\u30d7\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u3001\u305d\u306e\u5f8c$U,V$\u3092\u66f4\u65b0\u3059\u308b\u3068\u3044\u3046\u6d41\u308c\u3067\u3059\u3002\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u3001\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u306e\u90e8\u5206\u3067\u3042\u308b`buildModel()`\u3092\u6539\u5584\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n```py:MFbpr.py\nclass MFbpr(Recommender):\n    '''\n    \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u304b\u4ed6\u306e\u51e6\u7406\n    '''\n    \n    def buildModel(self):\n        loss_pre = sys.float_info.max\n        nonzeros = self.trainMatrix.nnz\n        hr_prev = 0.0\n        sys.stderr.write(\"Run for BPR. \\n\")\n        for itr in xrange(self.maxIter):\n            start = time.time()\n            \n            # Each training epoch\n            for s in xrange(nonzeros):\n                # sample a user\n                u = np.random.randint(self.userCount)\n                itemList = self.trainMatrix.getrowview(u).rows[0]\n                if len(itemList) == 0:\n                    continue\n                # sample a positive item\n                i = random.choice(itemList)\n                \n                # One SGD step update\n                self.update_ui(u, i)\n                \n    def update_ui(self, u, i):\n        # sample a negative item(uniformly random)\n        j = np.random.randint(self.itemCount)\n        while self.trainMatrix[u, j] != 0:\n            j = np.random.randint(self.itemCount)\n            \n        # BPR update rules\n        y_pos = self.predict(u, i)  # target value of positive instance\n        y_neg = self.predict(u, j)  # target value of negative instance\n        mult = -self.partial_loss(y_pos - y_neg)\n        \n        for f in xrange(self.factors):\n            grad_u = self.V[i, f] - self.V[j, f]\n            self.U[u, f] -= self.lr * (mult * grad_u + self.reg * self.U[u, f])\n                \n            grad = self.U[u, f]\n            self.V[i, f] -= self.lr * (mult * grad + self.reg * self.V[i, f])\n            self.V[j, f] -= self.lr * (-mult * grad + self.reg * self.V[j, f])\n```\n\n```py:exec_bpr.py\nfrom MFbpr import MFbpr\n\ndef load_data(ratingFile, testRatio=0.1):\n    '''\n    \u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3059\u308b\u51e6\u7406\n    '''\n    return trainMatrix, testRatings\n\nif __name__ == \"__main__\":\n    # data\n    trainMatrix, testRatings = load_data('yelp.rating')\n\n    # settings\n    topK = 100\n    factors = 64\n    maxIter = 10\n    maxIterOnline = 1\n    lr = 0.01\n    adaptive = False\n    init_mean = 0.0\n    init_stdev = 0.1\n    reg = 0.01\n    showProgress = False\n    showLoss = True\n\n    bpr = MFbpr(trainMatrix, testRatings, topK, factors, maxIter, lr, adaptive, reg, init_mean, init_stdev, showProgress, showLoss)\n    bpr.buildModel()\n\n```\n\n\u306a\u304a\u3001\u30b3\u30fc\u30c9\u306e\u5168\u91cf\u306f[github](https://github.com/tn1031/bpr)\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u5b9f\u884c\u3057\u3066\u307f\u308b\n\u3068\u308a\u3042\u3048\u305a\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n###\u8a2d\u5b9a\n#####\u30c7\u30fc\u30bf\n- \u30e6\u30fc\u30b6\u6570\uff1a25,677\n- \u30a2\u30a4\u30c6\u30e0\u6570\uff1a25,815\n- \u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u6570(\u8a55\u4fa1\u304c\u5b58\u5728\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u306e\u500b\u6570)\uff1a627,775\n\n#####\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\n- \u30d5\u30a1\u30af\u30bf\u30fc\u6570\uff1a64\n\n#####\u5b9f\u884c\u74b0\u5883\nVirtualBox\u4e0a\u306b\u69cb\u7bc9\u3057\u305f\u30e1\u30e2\u30ea2G\u3001\u30d7\u30ed\u30bb\u30c3\u30b52\u500b\u306eubuntu\u3067\u3059\u3002\n\n###\u5b9f\u884c\u7d50\u679c\n\u3072\u3068\u3064\u76ee\u306e\u9375\u62ec\u5f27\u304c1\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u304b\u304b\u3063\u305f\u6642\u9593[s]\u3001\u6700\u5f8c\u306e\u9375\u62ec\u5f27\u306floss\u306e\u8a08\u7b97\u306b\u304b\u304b\u3063\u305f\u6642\u9593[s]\u3067\u3059\u3002\n\n```\n> python exex_bpr.py\n\nData\tyelp.rating\n#Users\t25677, #newUser: 588\n#Items\t25815\n#Ratings\t 627775.0 (train), 73167(test), 10056(#newTestRatings)\nRun for BPR. \nIter=0 [128.6936481]\t [-]loss: 624484.357765 [8.16665792465]\nIter=1 [137.202406883]\t [-]loss: 616970.769244 [7.11149096489]\nIter=2 [131.134891987]\t [-]loss: 609361.307524 [7.12593793869]\nIter=3 [134.665620804]\t [-]loss: 601240.628869 [8.45840716362]\nIter=4 [134.722868919]\t [-]loss: 592053.155587 [7.6300880909]\n```\n\n\n\u7d0460\u4e07\u30b5\u30f3\u30d7\u30eb\u306b\u3064\u3044\u3066\u8a08\u7b97\u3057\u3066\u3044\u308b\u3068\u306f\u3044\u3048\u30011\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3130\u79d2\u306f\u304b\u304b\u308a\u904e\u304e\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n# \u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\n## \u5168\u4f53\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\n\u307e\u305a\u306f\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3044\u308b\u90e8\u5206\u306e\u7279\u5b9a\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\nPython\u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u306e`cProfile`\u3092\u4f7f\u3063\u3066\u51e6\u7406\u901f\u5ea6\u3092\u8a08\u6e2c\u3057\u307e\u3059\u3002\n`python -m cProfile -s cumulative ***.py`\n\u3068\u5b9f\u884c\u3059\u308c\u3070\u6642\u9593\u306e\u304b\u304b\u3063\u305f\u51e6\u7406\u3092\u964d\u9806\u3067\u8868\u793a\u3092\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\n```\n> python -m cProfile -s cumulative exex_bpr.py\n\nData\tyelp.rating\n#Users\t25677, #newUser: 588\n#Items\t25815\n#Ratings\t 627775.0 (train), 73167(test), 10056(#newTestRatings)\nRun for BPR. \nIter=0 [244.87996006]\t [-]loss: 624394.802988 [53.4806399345]\nIter=1 [248.624686956]\t [-]loss: 616876.50976 [48.6073460579]\nIter=2 [253.822627068]\t [-]loss: 609269.820414 [52.5446169376]\nIter=3 [261.039247036]\t [-]loss: 601207.904104 [53.8221797943]\nIter=4 [260.285779953]\t [-]loss: 592212.148141 [54.9556028843]\n         369374621 function calls (368041918 primitive calls) in 1808.492 seconds\n\n   Ordered by: cumulative time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.171    0.171 1808.493 1808.493 exex_bpr.py:3(<module>)\n        1   34.307   34.307 1532.124 1532.124 MFbpr.py:40(buildModel)\n  3067088  535.383    0.000  830.046    0.000 MFbpr.py:92(update_ui)\n  6209078   48.829    0.000  433.564    0.000 lil.py:228(__getitem__)\n  3292937   26.140    0.000  376.631    0.000 lil.py:191(getrowview)\n  3292939   66.488    0.000  346.337    0.000 lil.py:85(__init__)\n        5    0.000    0.000  263.411   52.682 MFbpr.py:117(_showLoss)\n        5   22.098    4.420  263.410   52.682 MFbpr.py:128(loss)\n        1    9.443    9.443  242.550  242.550 exex_bpr.py:9(load_data)\n```\n\n`Ordered by: cumulative time`\u3068\u3044\u3046\u884c\u306e\u4e0b\u304b\u3089\u3001\u95a2\u6570\u540d\u3068\u51e6\u7406\u306b\u8981\u3057\u305f\u6642\u9593\u304c\u7f85\u5217\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u898b\u308b\u3068`update_ui`\u3068\u3044\u3046\u95a2\u6570\u304c3,067,088\u56de\u547c\u3070\u308c\u3066\u30c8\u30fc\u30bf\u30eb535.383\u79d2\u304b\u304b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n(\u307e\u3042\u3001`buildModel`\u306e\u4e2d\u3067\u306f\u307b\u3068\u3093\u3069`update_ui`\u3057\u304b\u547c\u3093\u3067\u306a\u3044\u306e\u3067\u5f53\u7136\u3068\u3044\u3048\u3070\u5f53\u7136\u3067\u3059\u304c\uff0e\uff0e\uff0e)\n\n\u306a\u304a\u30011\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u6642\u9593\u304c\u5148\u7a0b\u3088\u308a\u5927\u304d\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u306fcProfile\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u3067\u3059\u3002\n\n\n## \u884c\u5358\u4f4d\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\n[line_profiler](https://pypi.python.org/pypi/line_profiler/)\u3092\u4f7f\u3048\u3070\u6ce8\u76ee\u3057\u3066\u3044\u308b\u95a2\u6570\u306b\u3064\u3044\u3066\u884c\u5358\u4f4d\u3067\u8a08\u6e2c\u3067\u304d\u307e\u3059\u3002\npip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n```\n> pip install line_profiler\n```\n\n`line_profiler`\u3067\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u3059\u308b\u305f\u3081\u306b\u306f\u6ce8\u76ee\u3057\u3066\u3044\u308b\u95a2\u6570\u306b`@profile`\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```py:MFbpr.py\n    @profile\n    def update_ui(self, u, i):\n        # sample a negative item(uniformly random)\n        j = np.random.randint(self.itemCount)\n        while self.trainMatrix[u, j] != 0:\n            j = np.random.randint(self.itemCount)\n\n        # BPR update rules\n        y_pos = self.predict(u, i)  # target value of positive instance\n        y_neg = self.predict(u, j)  # target value of negative instance\n        mult = -self.partial_loss(y_pos - y_neg)\n\n        for f in xrange(self.factors):\n            grad_u = self.V[i, f] - self.V[j, f]\n            self.U[u, f] -= self.lr * (mult * grad_u + self.reg * self.U[u, f])\n\n            grad = self.U[u, f]\n            self.V[i, f] -= self.lr * (mult * grad + self.reg * self.V[i, f])\n            self.V[j, f] -= self.lr * (-mult * grad + self.reg * self.V[j, f])\n\n```\n\n\u3042\u3068\u306f`kernprof`\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n```\n> kernprof -l -v exex_bpr.py\n\nData\tyelp.rating\n#Users\t25677, #newUser: 588\n#Items\t25815\n#Ratings\t 627775.0 (train), 73167(test), 10056(#newTestRatings)\nRun for BPR. \nIter=0 [953.993126154]\t [-]loss: 624406.940531 [7.50253987312]\nIter=1 [962.82383585]\t [-]loss: 616855.373858 [7.96375918388]\nWrote profile results to exex_bpr.py.lprof\nTimer unit: 1e-06 s\n\nTotal time: 1082.55 s\nFile: MFbpr.py\nFunction: update_ui at line 92\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    92                                               @profile\n    93                                               def update_ui(self, u, i):\n    94                                                   # sample a negative item(uniformly random)\n    95   1226961      8241361      6.7      0.8          j = np.random.randint(self.itemCount)\n    96   1228124     39557350     32.2      3.7          while self.trainMatrix[u, j] != 0:\n    97      1163         6123      5.3      0.0              j = np.random.randint(self.itemCount)\n    98                                                       \n    99                                                   # BPR update rules\n   100   1226961      9495381      7.7      0.9          y_pos = self.predict(u, i)  # target value of positive instance\n   101   1226961      4331378      3.5      0.4          y_neg = self.predict(u, j)  # target value of negative instance\n   102   1226961     10002355      8.2      0.9          mult = -self.partial_loss(y_pos - y_neg)\n   103                                                   \n   104  79752465    126523856      1.6     11.7          for f in xrange(self.factors):\n   105  78525504    161882071      2.1     15.0              grad_u = self.V[i, f] - self.V[j, f]\n   106  78525504    191293505      2.4     17.7              self.U[u, f] -= self.lr * (mult * grad_u + self.reg * self.U[u, f])\n   107                                                           \n   108  78525504    137871145      1.8     12.7              grad = self.U[u, f]\n   109  78525504    194033291      2.5     17.9              self.V[i, f] -= self.lr * (mult * grad + self.reg * self.V[i, f])\n   110  78525504    199315454      2.5     18.4              self.V[j, f] -= self.lr * (-mult * grad + self.reg * self.V[j, f])\n\n```\n\n`% Time`\u306e\u30ab\u30e9\u30e0\u3092\u898b\u308b\u3068\u3001`update_ui`\u306e\u51e6\u7406\u6642\u9593\u306e\u3046\u3061\u3001**90%\u4ee5\u4e0a\u304cfor\u6587\u4ee5\u4e0b\u3067\u8cbb\u3084\u3055\u308c\u3066\u3044\u308b**\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\n1\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u304c1,000\u79d2\u5f31\u3068\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n#Cython\u3067\u9ad8\u901f\u5316\n##\u5b9f\u88c5\n\u5148\u307b\u3069\u306efor\u30eb\u30fc\u30d7\u3092Cython\u3067\u66f8\u304d\u76f4\u3057\u307e\u3059\u3002\nPython\u304c\u9045\u3044\u539f\u56e0\u306e\u3072\u3068\u3064\u304c\u3001Python\u306f\u52d5\u7684\u578b\u4ed8\u3051\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u305f\u3073\u306b\u578b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5909\u6570\u306e\u53c2\u7167\u304c\u591a\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3053\u306e\u64cd\u4f5c\u306b\u304b\u304b\u308b\u6642\u9593\u304c\u7121\u8996\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n\nCython\u3092\u4f7f\u3063\u3066\u66f8\u3051\u3070c\u8a00\u8a9e\u306e\u3088\u3046\u306b\u5909\u6570\u306e\u578b\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\u3044\u3061\u3044\u3061\u578b\u306e\u78ba\u8a8d\u304c\u884c\u308f\u308c\u306a\u3044\u306e\u3067\u304b\u306a\u308a\u306e\u9ad8\u901f\u5316\u304c\u671f\u5f85\u3067\u304d\u307e\u3059\u3002\n\n\u5909\u6570\u306e\u5ba3\u8a00\u306f`cdef`\u3067\u884c\u3044\u307e\u3059\u3002\u8a08\u7b97\u306b\u7528\u3044\u308b\u3059\u3079\u3066\u306e\u5909\u6570\u306e\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```py:fastupdfn.pyx\nimport numpy as np\ncimport numpy as np\ncimport cython\n\nDOUBLE = np.float64\nctypedef np.float64_t DOUBLE_t\n\ncpdef c_upd(np.ndarray[DOUBLE_t, ndim=2] U, \n          np.ndarray[DOUBLE_t, ndim=2] V,\n          double mult,\n          double lr,\n          double reg,\n          unsigned int u,\n          unsigned int i,\n          unsigned int j,\n          unsigned int factors):\n    cdef unsigned int f\n    cdef double grad_u, grad\n    for f in xrange(factors):\n        grad_u = V[i, f] - V[j, f]\n        U[u, f] -= lr * (mult * grad_u + reg * U[u, f])\n        \n        grad = U[u, f]\n        V[i, f] -= lr * (mult * grad + reg * V[i, f])\n        V[j, f] -= lr * (-mult * grad + reg * V[j, f])\n        \n    return U, V\n```\n\n\u547c\u3073\u51fa\u3057\u5143\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```py:MFbpr.py\nimport fastupd    # \u8ffd\u52a0\n\nclass MFbpr(Recommender):\n    \"\"\"\n    \u4e2d\u7565\n    \"\"\"\n    def update_ui(self, u, i):\n        # sample a negative item(uniformly random)\n        j = np.random.randint(self.itemCount)\n        while self.trainMatrix[u, j] != 0:\n            j = np.random.randint(self.itemCount)\n            \n        # BPR update rules\n        y_pos = self.predict(u, i)  # target value of positive instance\n        y_neg = self.predict(u, j)  # target value of negative instance\n        mult = -self.partial_loss(y_pos - y_neg)\n       \n        # Cython\u5b9f\u88c5\u3092\u547c\u3073\u51fa\u3059\n        self.U, self.V = fastupd.c_upd(self.U, self.V, mult, self.lr, self.reg, u, i, j, self.factors) \n\n```\n\n\u307e\u305f\u3001Cython\u5b9f\u88c5\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u305f\u3081\u306e`setup.py`\u3082\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```py:setup.py\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\n\nsetup(\n    cmdclass={'build_ext': build_ext},\n    ext_modules=[Extension(\"fastupd\", [\"fastupdfn.pyx\"])]\n)\n```\n\n\u6e96\u5099\u304c\u6e08\u3093\u3060\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u3059\u3002\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\n```\n> python setup.py build_ext --inplace\n```\n\n##\u5b9f\u884c\n\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\n> python exec_bpr.py\n\nData\tyelp.rating\n#Users\t25677, #newUser: 588\n#Items\t25815\n#Ratings\t 627775.0 (train), 73167(test), 10056(#newTestRatings)\nRun for BPR. \nIter=0 [38.7308020592]\t [-]loss: 624282.459815 [8.64863014221]\nIter=1 [36.7822458744]\t [-]loss: 616740.942017 [8.62252616882]\nIter=2 [35.8996829987]\t [-]loss: 609119.520253 [7.9108710289]\nIter=3 [35.1236720085]\t [-]loss: 600992.740207 [8.14179396629]\nIter=4 [34.9632918835]\t [-]loss: 591877.909123 [8.81325411797]\n```\n\n1\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\u6642\u9593\u304c40\u79d2\u304b\u304b\u3089\u306a\u3044\u7a0b\u5ea6\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u6700\u521d\u3068\u6bd4\u3079\u308b\u3068**3~4\u500d\u901f\u304f\u306a\u3063\u305f**\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n`line_profiler`\u306e\u7d50\u679c\u3082\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n```\n> kernprof -l -v exex_bpr.py\n\nData\tyelp.rating\n#Users\t25677, #newUser: 588\n#Items\t25815\n#Ratings\t 627775.0 (train), 73167(test), 10056(#newTestRatings)\nRun for BPR. \nIter=0 [66.7851500511]\t [-]loss: 624400.680806 [7.92221903801]\nIter=1 [62.5339269638]\t [-]loss: 616866.244211 [7.85720801353]\nIter=2 [65.6408250332]\t [-]loss: 609235.226048 [8.48338794708]\nIter=3 [66.0613160133]\t [-]loss: 601140.035318 [8.52119803429]\nIter=4 [66.5882000923]\t [-]loss: 592026.927719 [8.32318806648]\nWrote profile results to exex_bpr.py.lprof\nTimer unit: 1e-06 s\n\nTotal time: 164.139 s\nFile: MFbpr.py\nFunction: update_ui at line 93\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    93                                               @profile\n    94                                               def update_ui(self, u, i):\n    95                                                   # sample a negative item(uniformly random)\n    96   3066856     17642519      5.8     10.7          j = np.random.randint(self.itemCount)\n    97   3069840     79530375     25.9     48.5          while self.trainMatrix[u, j] != 0:\n    98      2984        15027      5.0      0.0              j = np.random.randint(self.itemCount)\n    99                                                       \n   100                                                   # BPR update rules\n   101   3066856     17651846      5.8     10.8          y_pos = self.predict(u, i)  # target value of positive instance\n   102   3066856     10985781      3.6      6.7          y_neg = self.predict(u, j)  # target value of negative instance\n   103   3066856     18993291      6.2     11.6          mult = -self.partial_loss(y_pos - y_neg)\n   104                                                  \n   105   3066856     19320147      6.3     11.8          self.U, self.V = fastupd.c_upd(self.U, self.V, mult, self.lr, self.reg, u, i, j, self.factors) \n\n```\n\n\u3082\u3068\u3082\u306890%\u4ee5\u4e0a\u3092\u8cbb\u3084\u3057\u3066\u3044\u305f\u884c\u5217\u66f4\u65b0\u306e\u90e8\u5206\u304c11.8%\u306b\u6e1b\u5c11\u3057\u307e\u3057\u305f\u3002Cython\u306e\u52b9\u679c\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n#\u307e\u3068\u3081\n`cPrifile`\u3084`line_profiler`\u3092\u7528\u3044\u305f\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u306b\u3088\u3063\u3066\u51e6\u7406\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u304c\u767a\u898b\u3067\u304d\u3001`Cython`\u3092\u4f7f\u3063\u3066\u6539\u5584\u3057\u307e\u3057\u305f\u3002\n1\u7b87\u6240\u66f8\u304d\u63db\u3048\u305f\u3060\u3051\u3067\u3059\u304c\u30014\u500d\u5f31\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u3001Cython\u3092\u9069\u7528\u3057\u305f\u30b3\u30fc\u30c9\u306f[github](https://github.com/tn1031/bpr)\u306ew_cython\u30d6\u30e9\u30f3\u30c1\u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\u305d\u306e\u3046\u3061master\u306b\u30de\u30fc\u30b8\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n#\u304a\u307e\u3051\uff1f\nfor\u6587\u306e\u90e8\u5206\u306f\u3001\u884c\u5217\u306e\u8981\u7d20\u3092\u72ec\u7acb\u306b\u66f4\u65b0\u3057\u3066\u3044\u308b\u306e\u3067\u5b8c\u5168\u306b\u4e26\u5217\u5b9f\u884c\u53ef\u80fd\u3067\u3059\u3002Cython\u306b\u306f`prange()`\u3068\u3044\u3046\u3001for\u6587\u306e\u51e6\u7406\u3092\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u3067\u3082\u3046\u5c11\u3057\u6539\u5584\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n"}