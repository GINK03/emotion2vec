{"context": " More than 1 year has passed since last update.\u306a\u3093\u304b\u3044\u308d\u3044\u308d\u306f\u307e\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u307e\u305a\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u3001\n\nAlamofire\u306f multipart/form-data \u306b\u672a\u5bfe\u5fdc(2014/12/21\u6642\u70b9)\nAlamofire\u3067\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306eAPI\u306f\u4e8c\u3064\u3042\u308b\u304c\u3001NSData\u3092\u5f15\u6570\u306b\u3068\u308b\u65b9\u306f\u3069\u3046\u3082\u30d0\u30b0\u3063\u3066\u3044\u308b\u3002NSURL(Filepath)\u3092\u5f15\u6570\u306b\u3068\u308b\u307b\u3046\u3092\u5229\u7528\u3059\u308b\u3002\nGrape\u3067 multipart/form-data \u3067\u306f\u306a\u304f\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u5834\u5408\u306f\u3061\u3087\u3063\u3068\u7d30\u5de5\u304c\u5fc5\u8981\n\n\u3053\u306e\u3042\u305f\u308a\u3067\u3057\u3087\u3046\u304b\u3002\n\nAlamofire\u5074\u306e\u30bd\u30fc\u30b9\nAlamofire-SwiftyJSON \u4f7f\u3063\u3066\u307e\u3059\u3002\n\nApi.swift\n//\n//  Api.swift\n//\n//  Created by Takatomo Okitsu on 2014/12/09.\n//  Copyright (c) 2014\u5e74 Takatomo Okitsu. All rights reserved.\n//\n\nimport Foundation\nimport Alamofire\n\nclass Api: NSObject{\n\n    class func upload(\n        path: String,\n        filePath: NSURL,\n        success: (NSURLRequest, NSHTTPURLResponse?, JSON) -> Void,\n        invalid: (NSURLRequest, NSHTTPURLResponse?, ApiError) -> Void,\n        failure: (NSURLRequest, NSHTTPURLResponse?, NSError?) -> Void) -> Void\n    {\n        let method:Alamofire.Method = .POST\n        var url:String = makeUrl(method, path: path, isBinary: true)\n\n        Alamofire.upload(method, url, filePath)\n            .responseSwiftyJSON { (request, response, json, error) in\n                if error != nil {\n                    failure(request, response, error)\n                } else {\n                    if json[\"error\"] != nil {\n                        var apiError = ApiError(error: json[\"error\"].object, code: 0, response: json)\n                        invalid(request, response, apiError)\n                    } else {\n                        success(request, response, json)\n                    }\n                }\n        }\n    }\n\n    class func makeUrl(method:Alamofire.Method, path:String?, isBinary:Bool? = false) -> String{\n        var urlString = \"http://localhost:3000\"\n        if path != nil && !isBinary! {\n            urlString += path! + \".json\"\n        } else if isBinary! {\n            urlString += path! + \".binary\" // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u9001\u308b\u5834\u5408\u306f\u3001URL\u306e\u6700\u5f8c\u306b.binary\u3092\u4ed8\u4e0e\u3059\u308b\n        }\n        return urlString;\n    }\n}\n\n\n\n\u547c\u3073\u51fa\u3057\u5074\n        let image:UIImage = ...\n        // alamofire workaround...\n        //\u3000NSURL\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u3044\u3063\u305f\u3093\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\u3002\n        let data:NSData = NSData(data: UIImageJPEGRepresentation(image, 1))\n        let tmpFilePath:String = NSTemporaryDirectory() + \"/icon_tmp.jpg\";\n        data.writeToFile(tmpFilePath, atomically: true)\n        Api.upload(\"/api/v1/images/image\", filePath: NSURL(fileURLWithPath: tmpFilePath)!,\n            success: { (request, response, json) -> Void in\n                success(json)\n            }, invalid: invalid, failure: failure)\n\n\n\nRails+Grape\u5074\u306e\u30b3\u30fc\u30c9\n\u3053\u3093\u306a\u611f\u3058\u3067\u3044\u3051\u307e\u3057\u305f\u3002\n\nImages.rb\nmodule V1\n  class Images < Grape::API\n    # ContentType\u304capplication/octet-stream\u306e\u5834\u5408\u306e\u5b9a\u7fa9\n    content_type :binary, 'application/octet-stream'\n    format :binary\n\n    helpers do\n      def uploaded_image\n        data = env['api.request.input']\n\n        temp_img_file = Tempfile.new('image')\n        temp_img_file.binmode\n        temp_img_file << data\n        temp_img_file.rewind\n        attachment = {\n          :filename => 'image.jpg',\n          :tempfile => temp_img_file\n        }\n\n        return ActionDispatch::Http::UploadedFile.new(attachment)\n      end\n    end\n\n    resource :images do\n      post :image do\n        content_type \"application/json\"\n\n        @user = current_user\n        @user.image = uploaded_image //\u3053\u3053\u3067\u306fCareerwWave\u3064\u304b\u3063\u3066\u308b\u524d\u63d0\u3067\u66f8\u3044\u3066\u307e\u3059\u3002\n        if @user.save\n          return {\n            image: {\n              small: @user.image.small.url,\n              medium: @user.image.medium.url,\n              large: @user.image.large.url\n            }\n          }\n        else\n          return error!(@user.errors.full_messages, 200)\n        end\n      end\n    end\n  end\nend\n\n\n\nv1.rb\nmodule V1\n  class V1 < Grape::API\n    version 'v1', using: :path\n    mount V1::Images\n  end\nend\n\n\napi.rb\nmodule API\n  class Base < Grape::API\n    prefix 'api'\n    format :json\n    formatter :json, Grape::Formatter::Jbuilder\n    rescue_from :all, :backtrace => true\n\n    mount V1::V1\n  end\nend\n\n\n\u7d50\u8ad6\nAlamofire\u306f\u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u307e\u3067\u5229\u7528\u3059\u308b\u306e\u3084\u3081\u305f\u307b\u3046\u304c\u4f55\u304b\u3068\u697d\u3002\u30b5\u30fc\u30d0\u3082\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3082\u4e21\u65b9\u3068\u3082\u3081\u3093\u3069\u3044\n\n\u306a\u3093\u304b\u3044\u308d\u3044\u308d\u306f\u307e\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u307e\u305a\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u3001\n\n- Alamofire\u306f multipart/form-data \u306b\u672a\u5bfe\u5fdc(2014/12/21\u6642\u70b9)\n- Alamofire\u3067\u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306eAPI\u306f\u4e8c\u3064\u3042\u308b\u304c\u3001NSData\u3092\u5f15\u6570\u306b\u3068\u308b\u65b9\u306f\u3069\u3046\u3082\u30d0\u30b0\u3063\u3066\u3044\u308b\u3002NSURL(Filepath)\u3092\u5f15\u6570\u306b\u3068\u308b\u307b\u3046\u3092\u5229\u7528\u3059\u308b\u3002\n- Grape\u3067 multipart/form-data \u3067\u306f\u306a\u304f\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u5834\u5408\u306f\u3061\u3087\u3063\u3068\u7d30\u5de5\u304c\u5fc5\u8981\n\n\u3053\u306e\u3042\u305f\u308a\u3067\u3057\u3087\u3046\u304b\u3002\n\n# Alamofire\u5074\u306e\u30bd\u30fc\u30b9\n[Alamofire-SwiftyJSON](https://github.com/SwiftyJSON/Alamofire-SwiftyJSON) \u4f7f\u3063\u3066\u307e\u3059\u3002\n\n### Api.swift\n\n```\n//\n//  Api.swift\n//\n//  Created by Takatomo Okitsu on 2014/12/09.\n//  Copyright (c) 2014\u5e74 Takatomo Okitsu. All rights reserved.\n//\n\nimport Foundation\nimport Alamofire\n\nclass Api: NSObject{\n    \n    class func upload(\n        path: String,\n        filePath: NSURL,\n        success: (NSURLRequest, NSHTTPURLResponse?, JSON) -> Void,\n        invalid: (NSURLRequest, NSHTTPURLResponse?, ApiError) -> Void,\n        failure: (NSURLRequest, NSHTTPURLResponse?, NSError?) -> Void) -> Void\n    {\n        let method:Alamofire.Method = .POST\n        var url:String = makeUrl(method, path: path, isBinary: true)\n        \n        Alamofire.upload(method, url, filePath)\n            .responseSwiftyJSON { (request, response, json, error) in\n                if error != nil {\n                    failure(request, response, error)\n                } else {\n                    if json[\"error\"] != nil {\n                        var apiError = ApiError(error: json[\"error\"].object, code: 0, response: json)\n                        invalid(request, response, apiError)\n                    } else {\n                        success(request, response, json)\n                    }\n                }\n        }\n    }\n\n    class func makeUrl(method:Alamofire.Method, path:String?, isBinary:Bool? = false) -> String{\n        var urlString = \"http://localhost:3000\"\n        if path != nil && !isBinary! {\n            urlString += path! + \".json\"\n        } else if isBinary! {\n            urlString += path! + \".binary\" // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u9001\u308b\u5834\u5408\u306f\u3001URL\u306e\u6700\u5f8c\u306b.binary\u3092\u4ed8\u4e0e\u3059\u308b\n        }\n        return urlString;\n    }\n}\n\n```\n\n### \u547c\u3073\u51fa\u3057\u5074\n```\n\t\tlet image:UIImage = ...\n        // alamofire workaround...\n\t\t//\u3000NSURL\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u3044\u3063\u305f\u3093\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\u3002\n        let data:NSData = NSData(data: UIImageJPEGRepresentation(image, 1))\n        let tmpFilePath:String = NSTemporaryDirectory() + \"/icon_tmp.jpg\";\n        data.writeToFile(tmpFilePath, atomically: true)\n        Api.upload(\"/api/v1/images/image\", filePath: NSURL(fileURLWithPath: tmpFilePath)!,\n            success: { (request, response, json) -> Void in\n                success(json)\n            }, invalid: invalid, failure: failure)\n\n```\n\n# Rails+Grape\u5074\u306e\u30b3\u30fc\u30c9\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3044\u3051\u307e\u3057\u305f\u3002\n\n### Images.rb\n```\nmodule V1\n  class Images < Grape::API\n\t# ContentType\u304capplication/octet-stream\u306e\u5834\u5408\u306e\u5b9a\u7fa9\n    content_type :binary, 'application/octet-stream'\n    format :binary\n\n    helpers do\n      def uploaded_image\n        data = env['api.request.input']\n\n        temp_img_file = Tempfile.new('image')\n        temp_img_file.binmode\n        temp_img_file << data\n        temp_img_file.rewind\n        attachment = {\n          :filename => 'image.jpg',\n          :tempfile => temp_img_file\n        }\n\n        return ActionDispatch::Http::UploadedFile.new(attachment)\n      end\n    end\n\n    resource :images do\n      post :image do\n        content_type \"application/json\"\n\n        @user = current_user\n        @user.image = uploaded_image //\u3053\u3053\u3067\u306fCareerwWave\u3064\u304b\u3063\u3066\u308b\u524d\u63d0\u3067\u66f8\u3044\u3066\u307e\u3059\u3002\n        if @user.save\n          return {\n            image: {\n              small: @user.image.small.url,\n              medium: @user.image.medium.url,\n              large: @user.image.large.url\n            }\n          }\n        else\n          return error!(@user.errors.full_messages, 200)\n        end\n      end\n    end\n  end\nend\n\n```\n\n### v1.rb\n```\nmodule V1\n  class V1 < Grape::API\n    version 'v1', using: :path\n    mount V1::Images\n  end\nend\n```\n\n### api.rb\n```\nmodule API\n  class Base < Grape::API\n    prefix 'api'\n    format :json\n    formatter :json, Grape::Formatter::Jbuilder\n    rescue_from :all, :backtrace => true\n\n    mount V1::V1\n  end\nend\n```\n\n\n\n# \u7d50\u8ad6\nAlamofire\u306f\u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u307e\u3067\u5229\u7528\u3059\u308b\u306e\u3084\u3081\u305f\u307b\u3046\u304c\u4f55\u304b\u3068\u697d\u3002\u30b5\u30fc\u30d0\u3082\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3082\u4e21\u65b9\u3068\u3082\u3081\u3093\u3069\u3044\n", "tags": ["iOS", "Swift", "afnetworking", "Alamofire"]}