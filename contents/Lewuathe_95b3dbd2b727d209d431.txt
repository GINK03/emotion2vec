{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306fSpark Advent Calendar 2015\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nSpark\u306eSecurity\nHadoop\u3082Spark\u3068\u540c\u3058\u3088\u3046\u306b\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u305f\u3081\u306e\u5206\u6563\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306a\u306e\u3067secure\u306a\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u306f\u307e\u307e\u3042\u308a\u307e\u3059\u3002Spark\u306f\u305d\u308c\u5358\u4f53\u3067\u306f\u30b9\u30c8\u30ec\u30fc\u30b8\u30ec\u30a4\u30e4\u30fc\u3092\u542b\u307e\u306a\u3044\u3082\u306e\u306e(Tachiyon\u3068\u304b\u6700\u8fd1\u3067\u3066\u304d\u307e\u3057\u305f\u304c)\u305d\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3046job\u3092\u597d\u304d\u306a\u3088\u3046\u306b\u6295\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u901a\u5e38HDFS\u3084S3\u306b\u3042\u308b\u30c7\u30fc\u30bf\u306f\u8a8d\u8a3c\u3001\u8a8d\u53ef\u3092\u7d4c\u3066\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u305d\u308c\u3088\u308a\u3082\u4e0a\u306e\u5c64\u306eSpark\u306ejob\u81ea\u4f53\u3092submit\u3059\u308b\u3068\u304d\u3001job\u306e\u60c5\u5831\u3092\u53c2\u7167\u3059\u308b\u3068\u304d\u306e\u8a8d\u8a3c\u3001\u8a8d\u53ef\u304c\u3069\u306e\u3088\u3046\u306b\u884c\u308f\u308c\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nSpark\u3067\u306e\u8a8d\u8a3c\n\nShared secret\n\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u65b9\u6cd5\u306fshared secret token\u3092\u4f7f\u3046\u65b9\u6cd5\u3067\u3059\u3002shared secret token\u306f\u4e88\u3081Spark\u30af\u30e9\u30b9\u30bf\u306e\u65b9\u306b\u767b\u9332\u3055\u308c\u305ftoken\u3092\u4f7f\u3063\u3066\u3057\u304bjob\u304csubmit\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\u7c21\u5358\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u3059\u3002\n\u3053\u306etoken\u306f\u30af\u30e9\u30b9\u30bf\u5074\u3067\u306fspark.authenticate.secret\u3068\u3044\u3046configuration\u3067\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\nspark.authenticate\u306f\u8a8d\u8a3c\u3092\u6709\u52b9\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u6c7a\u3081\u308b\u8a2d\u5b9a\u5024\u3067\u3059\u3002\u3053\u306e2\u3064\u306e\u8a2d\u5b9a\u3092\u304a\u3053\u306a\u3044\u3001Standalone\u30af\u30e9\u30b9\u30bf\u3092\u7acb\u3061\u4e0a\u3052\u3066\u307f\u307e\u3059\u3002\nspark-defaults.conf\u30d5\u30a1\u30a4\u30eb\u306b\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\nspark.authenticate=true\nspark.authenticate.secret=mysecret\n\nStandalone\u30af\u30e9\u30b9\u30bf\u3092\u7acb\u3061\u4e0a\u3052\u307e\u3059\u3002\n\n$ $SPARK_HOME/sbin/start-master.sh\n$ $SPARK_HOME/sbin/start-slave.sh spark://your-spark-master:7077\n\n\u3053\u306eStandalone\u30af\u30e9\u30b9\u30bf\u306bjob\u3092submit\u3059\u308b\u5834\u5408\u306b\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306bsecret\u3092\u540c\u3058\u3088\u3046\u306b\u4ed8\u4e0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n$ ./bin/spark-shell \\\n    --conf spark.authenticate.secret=mysecret \\\n    --master spark://your-spark-master:7077 \n\n\u3053\u3053\u3067secret\u3092\u4ed8\u4e0e\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u9055\u3046secret\u3092\u4ed8\u4e0e\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3059\u3002\n$ /bin/spark-shell \\\n    --conf spark.authenticate.secret=wrongsecret \\\n    --master spark://your-spark-master:7077\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel).\nWelcome to\n      ____              __\n     / __/__  ___ _____/ /__\n    _\\ \\/ _ \\/ _ `/ __/  '_/\n   /___/ .__/\\_,_/_/ /_/\\_\\   version 2.0.0-SNAPSHOT\n      /_/\n\nUsing Scala version 2.10.5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_60)\nType in expressions to have them evaluated.\nType :help for more information.\n15/12/22 18:07:34 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n15/12/22 18:07:35 ERROR TransportClientFactory: Exception while bootstrapping client after 77 ms\njava.lang.RuntimeException: java.lang.RuntimeException: javax.security.sasl.SaslException: DIGEST-MD5: digest response format violation. Mismatched response.\n    at org.spark-project.guava.base.Throwables.propagate(Throwables.java:160)\n    at org.apache.spark.network.sasl.SparkSaslServer.response(SparkSaslServer.java:121)\n    at org.apache.spark.network.sasl.SaslRpcHandler.receive(SaslRpcHandler.java:101)\n    at org.apache.spark.network.server.TransportRequestHandler.processRpcRequest(TransportRequestHandler.java:159)\n    at org.apache.spark.network.server.TransportRequestHandler.handle(TransportRequestHandler.java:107)\n    at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:119)\n    at org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:51)\n    at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)\n\n\nServlet Filter\njob\u306e\u5b9f\u884c\u72b6\u6cc1\u3084\u8a2d\u5b9a\u3092\u52dd\u624b\u306b\u898b\u3089\u308c\u3066\u56f0\u308b\u5834\u5408\u306fapplication\u306eUI\u306bJava\u306eServlet Filter\u3092\u304b\u307e\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306fspark.ui.filters\u3067\u30af\u30e9\u30b9\u540d\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002Servlet Filter\u81ea\u4f53\u306fSpark\u3068\u306f\u95a2\u4fc2\u306a\u3044\u306e\u3067\u81ea\u524d\u3067\u597d\u304d\u306a\u3088\u3046\u306b\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070Basic\u8a8d\u8a3c\u3092\u884c\u3046Filter(\u30e6\u30fc\u30b6\u540d\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u6c7a\u3081\u6253\u3061\u3067\u3059\u304c)\u3092\u304b\u307e\u305b\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\npackage my.application.filter\n\nimport com.sun.jersey.core.util.Base64;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.util.StringTokenizer;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\n\npublic class BasicAuthFilter implements Filter {\n    String username = null;\n    String password = null;\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        // \u30e6\u30fc\u30b6\u540d \"spark-user\"\n        this.username = \"spark-user\";\n        // \u30d1\u30b9\u30ef\u30fc\u30c9 \"spark-password\"\n        this.password = \"spark-password\";\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n                         FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest)servletRequest;\n        HttpServletResponse response = (HttpServletResponse)servletResponse;\n\n        String authHeader = request.getHeader(\"Authorization\");\n        if (authHeader != null) {\n            StringTokenizer st = new StringTokenizer(authHeader);\n            if (st.hasMoreTokens()) {\n                String basic = st.nextToken();\n                if (basic.equalsIgnoreCase(\"Basic\")) {\n                    try {\n                        String credentials = new String(Base64.decode(st.nextToken()), \"UTF-8\");\n                        int pos = credentials.indexOf(\":\");\n                        if (pos != -1) {\n                            String username = credentials.substring(0, pos).trim();\n                            String password = credentials.substring(pos + 1).trim();\n\n                            if (!username.equals(this.username) || \n                                !password.equals(this.password)) {\n                                // \u8a8d\u8a3c\u3055\u308c\u306a\u3044\u5834\u5408\u306f401\u3092\u8fd4\u3059\n                                unauthorized(response, \"Unauthorized:\" +\n                                        this.getClass().getCanonicalName());\n                            }\n\n                            filterChain.doFilter(servletRequest, servletResponse);\n                        } else {\n                            unauthorized(response, \"Unauthorized:\" +\n                                    this.getClass().getCanonicalName());\n                        }\n                    } catch (UnsupportedEncodingException e) {\n                        throw new Error(\"Counldn't retrieve authorization information\", e);\n                    }\n                }\n            }\n        } else {\n            unauthorized(response, \"Unauthorized:\" + this.getClass().getCanonicalName());\n        }\n    }\n\n    @Override\n    public void destroy() {}\n\n    private void unauthorized(HttpServletResponse response, String message) throws IOException {\n        response.setHeader(\"WWW-Authenticate\", \"Basic realm=\\\"Spark Realm\\\"\");\n        response.sendError(401, message);\n    }\n\n}\n\n\u3053\u308c\u3092\u81ea\u5206\u306eapplication\u306b\u7d44\u307f\u8fbc\u3093\u3067jar\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\u5b9f\u969b\u306bjob\u3092submit\u3059\u308b\u3068\u304d\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bjar\u3068\u3068\u3082\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n$ $SPARK_HOME/bin/spark-submit \\\n    --jars your-application.jar \\\n    --master spark://your-spark-master:7077 \\\n    --conf spark.ui.filters=my.application.filter.BasicAuthFilter\n\n\u3053\u306eapplication\u306eWeb UI\u306b\u30a2\u30af\u30bb\u30b9\u3057\u306b\u3044\u304f\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306aprompt\u304c\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u3067\u307e\u3059\u3002(\u3061\u306a\u307f\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3042\u308c\u3070master\u306eUI port\u306f8088\u3067application\u306eUI\u306f\u305d\u3053\u304b\u3089\u305f\u3069\u308c\u307e\u3059)\n\n\nusername: spark-user\npassword: spark-password\n\n\u3092\u5165\u529b\u3059\u308c\u3070\u7121\u4e8b\u306bWeb UI\u306b\u305f\u3069\u308a\u7740\u3051\u307e\u3059\u3002\u9593\u9055\u3048\u308b\u3068\u305f\u3069\u308a\u3064\u3051\u307e\u305b\u3093\u3002\u3053\u3053\u306f\u666e\u901a\u306eBasic\u8a8d\u8a3c\u306e\u6319\u52d5\u3068\u540c\u3058\u3067\u3059\u3002\n\nSpark\u3067\u306e\u8a8d\u53ef\n\u8a8d\u8a3c\u3055\u308c\u305f\u30e6\u30fc\u30b6\u3054\u3068\u306eACL\u3082\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306fServlet\u306eHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5165\u3063\u3066\u3044\u308b\u30e6\u30fc\u30b6\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u901a\u5e38\u306f\u5916\u90e8\u306e\u8a8d\u8a3c\u30b7\u30b9\u30c6\u30e0\u304c\u3053\u306eHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u8a8d\u8a3c\u3055\u308c\u305f\u30e6\u30fc\u30b6\u540d\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3059\u304c\u4eca\u56de\u306f\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u305d\u308c\u7528\u306eFilter\u3092\u4f5c\u3063\u3066\u7121\u7406\u3084\u308a\u56fa\u5b9a\u306e\u540d\u524d\u3067\u8a8d\u8a3c\u3055\u305b\u307e\u3059\u3002\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class UserRoleFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, \n      ServletResponse servletResponse, FilterChain filterChain) \n      throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest)servletRequest;\n        String user = \"spark-userA\";\n        List<String> userList = Arrays.asList(\"spark-userA\", \"spark-userB\", \"spark-userC\");\n\n        // \u3053\u306efilter\u3067\u7121\u7406\u3084\u308aspark-usreA\u3068\u3044\u3046\u540d\u524d\u3067\u8a8d\u8a3c\u3055\u305b\u305f\u3053\u3068\u306b\u3057\u3066\n        // HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092Wrap\u3059\u308b\n        filterChain.doFilter(new UserRoleRequestWrapper(user, userList, request), servletResponse);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n\n\u3053\u3061\u3089\u304c\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306eWrapper\u30af\u30e9\u30b9\u3002\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport java.util.List;\n\npublic class UserRoleRequestWrapper extends HttpServletRequestWrapper {\n    String user;\n    List<String> userList = null;\n    HttpServletRequest request;\n\n    public UserRoleRequestWrapper(String user, List<String> userList, HttpServletRequest originalRequest) {\n        super(originalRequest);\n        this.user = user;\n        this.userList = userList;\n        this.request = originalRequest;\n    }\n\n    @Override\n    public String getRemoteUser() {\n        // \u30e6\u30fc\u30b6\u30ea\u30b9\u30c8\u306b\u542b\u307e\u308c\u3066\u3044\u305f\u3089\"spark-userA\"\n        // \u3067\u30ed\u30b0\u30a4\u30f3\u3055\u305b\u308b\u3068\u3044\u3046\u306a\u3093\u306e\u610f\u5473\u3082\u306a\u3044\u8a8d\u8a3c\u3092\u901a\u3059\n        if (this.userList.contains(this.user)) {\n            return this.user;\n        }\n        return null;\n    }\n}\n\n\u3053\u308c\u3067\u64ec\u4f3c\u7684\u306bWeb UI\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\"spark-userA\"\u3068\u3044\u3046\u540d\u524d\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u3066UI\u3092\u898b\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u30af\u30e9\u30b9\u3092\u542b\u3081\u3066application\u7528\u306ejar\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\u3053\u306e\u30e6\u30fc\u30b6\u3092ACL\u306b\u52a0\u3048\u308b\u306b\u306f\n\nACL\u3092\u30af\u30e9\u30b9\u30bf\u5074\u3067\u6709\u52b9\u306b\u3059\u308b\nJob\u306bACL\u306b\"spark-userA\"\u3092\u52a0\u3048\u308b\n\n\u3068\u3057\u307e\u3059\u3002\n\nACL\u3092\u30af\u30e9\u30b9\u30bf\u5074\u3067\u6709\u52b9\u306b\u3059\u308b\nspark-defaults.conf\u306b\u4e0b\u8a18\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\nspark.acls.enable=true\n\n\u3053\u308c\u3067\u5148\u307b\u3069\u3068\u540c\u3058\u3088\u3046\u306bStandalone mode\u3067\u30af\u30e9\u30b9\u30bf\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n\nJob\u306bACL\u306b\"spark-userA\"\u3092\u52a0\u3048\u308b\n$ ./bin/spark-shell --jars your-application.jar \\\n    --master spark://your-spark-master:7077 \\\n    --conf spark.ui.filters=org.apache.spark.examples.UserRoleFilter \n    --conf spark.ui.view.acls=spark-userA\n\n\u3053\u308c\u3067\u901a\u5e38\u3068\u540c\u3058\u3088\u3046\u306bWeb UI\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306eFilter\u3067\u306f\u3044\u3064\u3082spark-userA\u3068\u3057\u3066\u8a8d\u8a3c\u3057\u307e\u3059\u306e\u3067\u3082\u3057spark-userB\u306e\u307f\u3092ACL\u306b\u542b\u3081\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u898b\u3048\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u3053\u308c\u3067ACL\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u306e\u307f\u304cWeb UI\u3092\u898b\u3089\u308c\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u3053\u306e\u4ed6\u306b\u3082Admin\u6a29\u9650\u3084job\u306ekill\u306b\u95a2\u3059\u308b\u6a29\u9650\u306a\u3069\u3092\u5225\u9014\u7ba1\u7406\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\nSpark\u3067\u306e\u6697\u53f7\u5316\nSpark\u306f\u90e8\u5206\u7684\u306bSSL/TLS\u901a\u4fe1\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u73fe\u72b6\u3067\u306fSpark cluster\u3067\u52d5\u304f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u9593\u306e\u901a\u4fe1\u3092\u30d7\u30ed\u30c8\u30b3\u30eb\u3054\u3068\u306bSSL/TLS\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u306f\n\nspark.ssl.akka : Akka\u3092\u4f7f\u3063\u305f\u901a\u4fe1\nspark.ssl.fs : Broadcast\u306a\u3069\u306b\u4f7f\u308f\u308c\u308bHTTP\n\n\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002SSL/TLS\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3044\u304f\u3064\u304b\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u305d\u308c\u3089\u306f\u30d7\u30ed\u30c8\u30b3\u30eb\u3054\u3068\u306b\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070Java\u306eSASL\u3067\u4f7f\u3046Trust Store\u306e\u8a2d\u5b9a\u306fAkka\u306b\u5bfe\u3057\u3066\u306a\u3089spark.ssl.akka.trustStore, HTTP\u306b\u5bfe\u3057\u3066\u306a\u3089spark.ssl.fs.trustStore, \u4e21\u65b9\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u5bfe\u3057\u3066\u306a\u3089spark.ssl.trustStore\u306b\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n\u3042\u307e\u308aSpark\u3068\u76f4\u63a5\u95a2\u4fc2\u306a\u304f\u306a\u3063\u3066\u304f\u308b\u4e0a\u306b\u3001\u898b\u3048\u308b\u6319\u52d5\u304c\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3059\u304cSSL/TLS\u901a\u4fe1\u3092\u884c\u3046Spark\u30af\u30e9\u30b9\u30bf\u3092\u7acb\u3066\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u9375\u306a\u3069\u3092\u6e96\u5099\u3059\u308b\u306b\u306fkeytool\u3068\u3044\u3046JDK\u306b\u4ed8\u5c5e\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u30b5\u30fc\u30d0\u5074\u7528\u306e\u79d8\u5bc6\u9375\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u8a3c\u660e\u66f8\u7f72\u540d\u8981\u6c42(CSR)\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u8a8d\u8a3c\u5c40(CA)\u306b\u7f72\u540d\u3055\u308c\u305f\u8a3c\u660e\u66f8\u3092\u53d6\u5f97\u3057\u307e\u3059\n\u7f72\u540d\u3055\u308c\u305f\u8a3c\u660e\u66f8\u3092trusted store\u306b\u5165\u308c\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u30aa\u30ec\u30aa\u30ec\u3067\u3082\u3068\u308a\u3042\u3048\u305a\u8a66\u305b\u308c\u3070\u3044\u3044\u306e\u3067\u8a8d\u8a3c\u5c40\u3067\u306e\u7f72\u540d\u306f\u884c\u3044\u307e\u305b\u3093\u3002\u3053\u306e\u3042\u305f\u308a\u306f\u3082\u3063\u3068\u8a73\u3057\u3044\u8a18\u4e8b\u304c\u3044\u3063\u3071\u3044\u3042\u308a\u307e\u3059\u306e\u3067\u3068\u308a\u3042\u3048\u305aSpark\u3067\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u308b\u307e\u3067\u306f\u5148\u3092\u6025\u304e\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b5\u30fc\u30d0\u5074\u7528\u306e\u79d8\u5bc6\u9375\u3092\u7528\u610f\n\n$ keytool -genkey \\\n          -alias ssltest \\          # \u79d8\u5bc6\u9375\u306e\u540d\u524d\u3002\u3053\u308c\u304b\u3089\u3082\u4f7f\u3046\u306e\u3067\u899a\u3048\u3066\u304a\u304f\n          -keyalg RSA \\\u2028             # \u9375\u306e\u6697\u53f7\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n          -keysize 2048 \\\n          -keypass key_password \\\u2028\u3000\u3000# \u9375\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3002\u4f7f\u3046\u306e\u3067\u899a\u3048\u3066\u304a\u304f\n          -storetype JKS \\\n          -keystore my_key_store \\\n\u2028          -storepass store_password\u3000#  \u9375\u3092\u5165\u308c\u305fkey store\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3002\u899a\u3048\u3066\u304a\u304f\u3002\n\n\n\u306f\u98db\u3070\u3057\u3066\n\n\n\u3055\u3063\u304d\u306e\u9375\u304b\u3089\u81ea\u5206\u3067\u8a3c\u660e\u66f8\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n$ keytool -export \\\n          -alias ssltest \\       # \u3055\u3063\u304d\u6c7a\u3081\u305f\u79d8\u5bc6\u9375\u306e\u540d\u524d\n          -file my_cert.cer \\    # export\u3059\u308b\u8a3c\u660e\u66f8\u306e\u540d\u524d\n          -keystore my_key_store # \u3055\u3063\u304d\u9375\u3092\u3044\u308c\u3066\u304a\u3044\u3066key store\u306epath\n\n\n\u3053\u306e\u8a3c\u660e\u66f8\u3092Trusted Store\u306b\u3044\u308c\u307e\u3059\n$ keytool -import -v \\\u2028 \n          -trustcacerts \\\n \u2028         -alias ssltest \\\u2028\n          -file my_cert.cer \\         # \u3055\u3063\u304dexport\u3057\u305f\u8a3c\u660e\u66f8\u30d5\u30a1\u30a4\u30eb\n \u2028         -keyStore my_trust_store \\\u3000# Trust Store\u306e\u540d\u524d\n \u2028         -keypass store_password     # Trust Store\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3002\u899a\u3048\u3066\u304a\u304f\n\n\u3042\u3068\u306f\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u7fa4\u306f\u3067\u304d\u305f\u306e\u3067\u3053\u308c\u3089\u3092\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u5fc5\u8981\u306a\u8a2d\u5b9a\u5024\u306f\u3059\u3079\u3066\u51fa\u63c3\u3063\u3066\u3044\u308b\u306e\u3067\u8a18\u8ff0\u3059\u308b\u3060\u3051\u3067\u3059\u3002\nspark-defaults.conf\u306b\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\n# SSL/TLS\u3092\u6709\u52b9\u306b\u3059\u308b\u304b\u3069\u3046\u304b\nspark.ssl.enabled                  true\n# SSL\u3067\u4f7f\u3046\u6697\u53f7\u30b9\u30a4\u30fc\u30c8\nspark.ssl.enabledAlgorithms        TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA\nspark.ssl.protocol                 TLSv1.2\n# \u6697\u53f7\u5316\u306b\u4f7f\u3046\u79d8\u5bc6\u9375\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3002\u6700\u521d\u306b\u4f5c\u6210\u3057\u305f\u3082\u306e\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\nspark.ssl.keyPassword              key_password\n# Key Store\u3078\u306epath\nspark.ssl.keyStore                 /path/to/my_key_store\n# Key Store\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\nspark.ssl.keyStorePassword         store_password\n# Trust Store\u3078\u306epath\nspark.ssl.trustStore               /path/to/my_trust_store\n# Trust Store\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\nspark.ssl.trustStorePassword       store_password\n\n\u3053\u308c\u3067\u307e\u305fStandalone mode\u3067\u30af\u30e9\u30b9\u30bf\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30ed\u30b0\u304c\u3067\u3066\u3044\u308c\u3070SSL/TLS\u901a\u4fe1\u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002(\u305f\u3060\u3057DEBUG\u30ec\u30d9\u30eb\u3092\u51fa\u529b\u3067\u304d\u308b\u3088\u3046\u306blog4j.properties\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044)\n15/12/06 14:01:07 DEBUG SecurityManager: SSLConfiguration for file server: SSLOptions{enabled=true, keyStore=Some(/Users/sasakikai/my_key_store), keyStorePassword=Some(xxx), trustStore=Some(/Users/sasakikai/my_trust_store), trustStorePassword=Some(xxx), protocol=Some(TLSv1.2), enabledAlgorithms=Set(TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA)}\n\n15/12/06 14:01:07 DEBUG SecurityManager: SSLConfiguration for Akka: SSLOptions{enabled=true, keyStore=Some(/Users/sasakikai/my_key_store), keyStorePassword=Some(xxx), trustStore=Some(/Users/sasakikai/my_trust_store), trustStorePassword=Some(xxx), protocol=Some(TLSv1.2), enabledAlgorithms=Set(TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA)}\n\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306e\u5185\u5bb9\u306f\u3059\u3079\u3066Security\u3068 Configuration\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u8aad\u3093\u3067\u3082\u3042\u307e\u308a\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u81ea\u5206\u3067\u624b\u3092\u52d5\u304b\u3057\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u30aa\u30ec\u30aa\u30ec\u8a8d\u8a3c\u3092\u901a\u3059\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u5b9f\u7528\u7684\u306a\u5074\u9762\u304c\u5c11\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u305e\u308c\u306e\u8a2d\u5b9a\u304c\u3069\u306e\u3088\u3046\u306b\u4f7f\u308f\u308c\u308b\u304b\u306e\u7406\u89e3\u306e\u52a9\u3051\u306b\u306a\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f[Spark Advent Calendar 2015](http://qiita.com/advent-calendar/2015/apache-spark)\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n# Spark\u306eSecurity\n\nHadoop\u3082Spark\u3068\u540c\u3058\u3088\u3046\u306b\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u305f\u3081\u306e\u5206\u6563\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306a\u306e\u3067secure\u306a\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u306f\u307e\u307e\u3042\u308a\u307e\u3059\u3002Spark\u306f\u305d\u308c\u5358\u4f53\u3067\u306f\u30b9\u30c8\u30ec\u30fc\u30b8\u30ec\u30a4\u30e4\u30fc\u3092\u542b\u307e\u306a\u3044\u3082\u306e\u306e([Tachiyon](http://tachyon-project.org/)\u3068\u304b\u6700\u8fd1\u3067\u3066\u304d\u307e\u3057\u305f\u304c)\u305d\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3046job\u3092\u597d\u304d\u306a\u3088\u3046\u306b\u6295\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u901a\u5e38HDFS\u3084S3\u306b\u3042\u308b\u30c7\u30fc\u30bf\u306f\u8a8d\u8a3c\u3001\u8a8d\u53ef\u3092\u7d4c\u3066\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u305d\u308c\u3088\u308a\u3082\u4e0a\u306e\u5c64\u306eSpark\u306ejob\u81ea\u4f53\u3092submit\u3059\u308b\u3068\u304d\u3001job\u306e\u60c5\u5831\u3092\u53c2\u7167\u3059\u308b\u3068\u304d\u306e\u8a8d\u8a3c\u3001\u8a8d\u53ef\u304c\u3069\u306e\u3088\u3046\u306b\u884c\u308f\u308c\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# Spark\u3067\u306e\u8a8d\u8a3c\n\n## Shared secret\n\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u65b9\u6cd5\u306f**shared secret token**\u3092\u4f7f\u3046\u65b9\u6cd5\u3067\u3059\u3002shared secret token\u306f\u4e88\u3081Spark\u30af\u30e9\u30b9\u30bf\u306e\u65b9\u306b\u767b\u9332\u3055\u308c\u305ftoken\u3092\u4f7f\u3063\u3066\u3057\u304bjob\u304csubmit\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\u7c21\u5358\u306a\u30d1\u30b9\u30ef\u30fc\u30c9\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u3059\u3002\n\n\u3053\u306etoken\u306f\u30af\u30e9\u30b9\u30bf\u5074\u3067\u306f`spark.authenticate.secret`\u3068\u3044\u3046configuration\u3067\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n\n`spark.authenticate`\u306f\u8a8d\u8a3c\u3092\u6709\u52b9\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u6c7a\u3081\u308b\u8a2d\u5b9a\u5024\u3067\u3059\u3002\u3053\u306e2\u3064\u306e\u8a2d\u5b9a\u3092\u304a\u3053\u306a\u3044\u3001Standalone\u30af\u30e9\u30b9\u30bf\u3092\u7acb\u3061\u4e0a\u3052\u3066\u307f\u307e\u3059\u3002\n`spark-defaults.conf`\u30d5\u30a1\u30a4\u30eb\u306b\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n```\nspark.authenticate=true\nspark.authenticate.secret=mysecret\n```\n\nStandalone\u30af\u30e9\u30b9\u30bf\u3092\u7acb\u3061\u4e0a\u3052\u307e\u3059\u3002\n\n```bash\n\n$ $SPARK_HOME/sbin/start-master.sh\n$ $SPARK_HOME/sbin/start-slave.sh spark://your-spark-master:7077\n```\n\n\u3053\u306eStandalone\u30af\u30e9\u30b9\u30bf\u306bjob\u3092submit\u3059\u308b\u5834\u5408\u306b\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306bsecret\u3092\u540c\u3058\u3088\u3046\u306b\u4ed8\u4e0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```bash\n\n$ ./bin/spark-shell \\\n    --conf spark.authenticate.secret=mysecret \\\n    --master spark://your-spark-master:7077 \n```\n\n\u3053\u3053\u3067secret\u3092\u4ed8\u4e0e\u3057\u306a\u304b\u3063\u305f\u308a\u3001\u9055\u3046secret\u3092\u4ed8\u4e0e\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u3067\u307e\u3059\u3002\n\n```\n$ /bin/spark-shell \\\n    --conf spark.authenticate.secret=wrongsecret \\\n    --master spark://your-spark-master:7077\nSetting default log level to \"WARN\".\nTo adjust logging level use sc.setLogLevel(newLevel).\nWelcome to\n      ____              __\n     / __/__  ___ _____/ /__\n    _\\ \\/ _ \\/ _ `/ __/  '_/\n   /___/ .__/\\_,_/_/ /_/\\_\\   version 2.0.0-SNAPSHOT\n      /_/\n\nUsing Scala version 2.10.5 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_60)\nType in expressions to have them evaluated.\nType :help for more information.\n15/12/22 18:07:34 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n15/12/22 18:07:35 ERROR TransportClientFactory: Exception while bootstrapping client after 77 ms\njava.lang.RuntimeException: java.lang.RuntimeException: javax.security.sasl.SaslException: DIGEST-MD5: digest response format violation. Mismatched response.\n\tat org.spark-project.guava.base.Throwables.propagate(Throwables.java:160)\n\tat org.apache.spark.network.sasl.SparkSaslServer.response(SparkSaslServer.java:121)\n\tat org.apache.spark.network.sasl.SaslRpcHandler.receive(SaslRpcHandler.java:101)\n\tat org.apache.spark.network.server.TransportRequestHandler.processRpcRequest(TransportRequestHandler.java:159)\n\tat org.apache.spark.network.server.TransportRequestHandler.handle(TransportRequestHandler.java:107)\n\tat org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:119)\n\tat org.apache.spark.network.server.TransportChannelHandler.channelRead0(TransportChannelHandler.java:51)\n\tat io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)\n```\n\n## Servlet Filter\n\njob\u306e\u5b9f\u884c\u72b6\u6cc1\u3084\u8a2d\u5b9a\u3092\u52dd\u624b\u306b\u898b\u3089\u308c\u3066\u56f0\u308b\u5834\u5408\u306fapplication\u306eUI\u306bJava\u306eServlet Filter\u3092\u304b\u307e\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u8a2d\u5b9a\u306fspark.ui.filters\u3067\u30af\u30e9\u30b9\u540d\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002Servlet Filter\u81ea\u4f53\u306fSpark\u3068\u306f\u95a2\u4fc2\u306a\u3044\u306e\u3067\u81ea\u524d\u3067\u597d\u304d\u306a\u3088\u3046\u306b\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070Basic\u8a8d\u8a3c\u3092\u884c\u3046Filter(\u30e6\u30fc\u30b6\u540d\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u6c7a\u3081\u6253\u3061\u3067\u3059\u304c)\u3092\u304b\u307e\u305b\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\n```scala\npackage my.application.filter\n\nimport com.sun.jersey.core.util.Base64;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.util.StringTokenizer;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\n\npublic class BasicAuthFilter implements Filter {\n    String username = null;\n    String password = null;\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        // \u30e6\u30fc\u30b6\u540d \"spark-user\"\n        this.username = \"spark-user\";\n        // \u30d1\u30b9\u30ef\u30fc\u30c9 \"spark-password\"\n        this.password = \"spark-password\";\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,\n                         FilterChain filterChain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest)servletRequest;\n        HttpServletResponse response = (HttpServletResponse)servletResponse;\n\n        String authHeader = request.getHeader(\"Authorization\");\n        if (authHeader != null) {\n            StringTokenizer st = new StringTokenizer(authHeader);\n            if (st.hasMoreTokens()) {\n                String basic = st.nextToken();\n                if (basic.equalsIgnoreCase(\"Basic\")) {\n                    try {\n                        String credentials = new String(Base64.decode(st.nextToken()), \"UTF-8\");\n                        int pos = credentials.indexOf(\":\");\n                        if (pos != -1) {\n                            String username = credentials.substring(0, pos).trim();\n                            String password = credentials.substring(pos + 1).trim();\n\n                            if (!username.equals(this.username) || \n                                !password.equals(this.password)) {\n                                // \u8a8d\u8a3c\u3055\u308c\u306a\u3044\u5834\u5408\u306f401\u3092\u8fd4\u3059\n                                unauthorized(response, \"Unauthorized:\" +\n                                        this.getClass().getCanonicalName());\n                            }\n\n                            filterChain.doFilter(servletRequest, servletResponse);\n                        } else {\n                            unauthorized(response, \"Unauthorized:\" +\n                                    this.getClass().getCanonicalName());\n                        }\n                    } catch (UnsupportedEncodingException e) {\n                        throw new Error(\"Counldn't retrieve authorization information\", e);\n                    }\n                }\n            }\n        } else {\n            unauthorized(response, \"Unauthorized:\" + this.getClass().getCanonicalName());\n        }\n    }\n\n    @Override\n    public void destroy() {}\n\n    private void unauthorized(HttpServletResponse response, String message) throws IOException {\n        response.setHeader(\"WWW-Authenticate\", \"Basic realm=\\\"Spark Realm\\\"\");\n        response.sendError(401, message);\n    }\n\n}\n```\n\n\u3053\u308c\u3092\u81ea\u5206\u306eapplication\u306b\u7d44\u307f\u8fbc\u3093\u3067jar\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\u5b9f\u969b\u306bjob\u3092submit\u3059\u308b\u3068\u304d\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bjar\u3068\u3068\u3082\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```bash\n$ $SPARK_HOME/bin/spark-submit \\\n    --jars your-application.jar \\\n    --master spark://your-spark-master:7077 \\\n    --conf spark.ui.filters=my.application.filter.BasicAuthFilter\n```\n\n\u3053\u306eapplication\u306eWeb UI\u306b\u30a2\u30af\u30bb\u30b9\u3057\u306b\u3044\u304f\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306aprompt\u304c\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u3067\u307e\u3059\u3002(\u3061\u306a\u307f\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3042\u308c\u3070master\u306eUI port\u306f8088\u3067application\u306eUI\u306f\u305d\u3053\u304b\u3089\u305f\u3069\u308c\u307e\u3059)\n\n<img width=\"392\" alt=\"Screen Shot 2015-12-22 at 6.18.43 PM.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/7129/227971a5-f01c-8c32-3f75-a61e95b5816d.png\">\n\n\n- username: spark-user\n- password: spark-password\n\n\u3092\u5165\u529b\u3059\u308c\u3070\u7121\u4e8b\u306bWeb UI\u306b\u305f\u3069\u308a\u7740\u3051\u307e\u3059\u3002\u9593\u9055\u3048\u308b\u3068\u305f\u3069\u308a\u3064\u3051\u307e\u305b\u3093\u3002\u3053\u3053\u306f\u666e\u901a\u306eBasic\u8a8d\u8a3c\u306e\u6319\u52d5\u3068\u540c\u3058\u3067\u3059\u3002\n\n# Spark\u3067\u306e\u8a8d\u53ef\n\n\u8a8d\u8a3c\u3055\u308c\u305f\u30e6\u30fc\u30b6\u3054\u3068\u306eACL\u3082\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306fServlet\u306eHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5165\u3063\u3066\u3044\u308b\u30e6\u30fc\u30b6\u540d\u3092\u4f7f\u3044\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u901a\u5e38\u306f\u5916\u90e8\u306e\u8a8d\u8a3c\u30b7\u30b9\u30c6\u30e0\u304c\u3053\u306eHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u8a8d\u8a3c\u3055\u308c\u305f\u30e6\u30fc\u30b6\u540d\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3059\u304c\u4eca\u56de\u306f\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067\u305d\u308c\u7528\u306eFilter\u3092\u4f5c\u3063\u3066\u7121\u7406\u3084\u308a\u56fa\u5b9a\u306e\u540d\u524d\u3067\u8a8d\u8a3c\u3055\u305b\u307e\u3059\u3002\n\n```java\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class UserRoleFilter implements Filter {\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n    }\n\n    @Override\n    public void doFilter(ServletRequest servletRequest, \n      ServletResponse servletResponse, FilterChain filterChain) \n      throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest)servletRequest;\n        String user = \"spark-userA\";\n        List<String> userList = Arrays.asList(\"spark-userA\", \"spark-userB\", \"spark-userC\");\n\n        // \u3053\u306efilter\u3067\u7121\u7406\u3084\u308aspark-usreA\u3068\u3044\u3046\u540d\u524d\u3067\u8a8d\u8a3c\u3055\u305b\u305f\u3053\u3068\u306b\u3057\u3066\n        // HTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092Wrap\u3059\u308b\n        filterChain.doFilter(new UserRoleRequestWrapper(user, userList, request), servletResponse);\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n```\n\n\u3053\u3061\u3089\u304c\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306eWrapper\u30af\u30e9\u30b9\u3002\n\n```java\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\nimport java.util.List;\n\npublic class UserRoleRequestWrapper extends HttpServletRequestWrapper {\n    String user;\n    List<String> userList = null;\n    HttpServletRequest request;\n\n    public UserRoleRequestWrapper(String user, List<String> userList, HttpServletRequest originalRequest) {\n        super(originalRequest);\n        this.user = user;\n        this.userList = userList;\n        this.request = originalRequest;\n    }\n\n    @Override\n    public String getRemoteUser() {\n        // \u30e6\u30fc\u30b6\u30ea\u30b9\u30c8\u306b\u542b\u307e\u308c\u3066\u3044\u305f\u3089\"spark-userA\"\n        // \u3067\u30ed\u30b0\u30a4\u30f3\u3055\u305b\u308b\u3068\u3044\u3046\u306a\u3093\u306e\u610f\u5473\u3082\u306a\u3044\u8a8d\u8a3c\u3092\u901a\u3059\n        if (this.userList.contains(this.user)) {\n            return this.user;\n        }\n        return null;\n    }\n}\n```\n\n\u3053\u308c\u3067\u64ec\u4f3c\u7684\u306bWeb UI\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\"spark-userA\"\u3068\u3044\u3046\u540d\u524d\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u3066UI\u3092\u898b\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u30af\u30e9\u30b9\u3092\u542b\u3081\u3066application\u7528\u306ejar\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u3053\u306e\u30e6\u30fc\u30b6\u3092ACL\u306b\u52a0\u3048\u308b\u306b\u306f\n\n1. ACL\u3092\u30af\u30e9\u30b9\u30bf\u5074\u3067\u6709\u52b9\u306b\u3059\u308b\n2. Job\u306bACL\u306b\"spark-userA\"\u3092\u52a0\u3048\u308b\n\n\u3068\u3057\u307e\u3059\u3002\n\n### ACL\u3092\u30af\u30e9\u30b9\u30bf\u5074\u3067\u6709\u52b9\u306b\u3059\u308b\nspark-defaults.conf\u306b\u4e0b\u8a18\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n```\nspark.acls.enable=true\n```\n\n\u3053\u308c\u3067\u5148\u307b\u3069\u3068\u540c\u3058\u3088\u3046\u306bStandalone mode\u3067\u30af\u30e9\u30b9\u30bf\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n### Job\u306bACL\u306b\"spark-userA\"\u3092\u52a0\u3048\u308b\n\n```\n$ ./bin/spark-shell --jars your-application.jar \\\n    --master spark://your-spark-master:7077 \\\n    --conf spark.ui.filters=org.apache.spark.examples.UserRoleFilter \n    --conf spark.ui.view.acls=spark-userA\n```\n\n\u3053\u308c\u3067\u901a\u5e38\u3068\u540c\u3058\u3088\u3046\u306bWeb UI\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u306eFilter\u3067\u306f\u3044\u3064\u3082spark-userA\u3068\u3057\u3066\u8a8d\u8a3c\u3057\u307e\u3059\u306e\u3067\u3082\u3057spark-userB\u306e\u307f\u3092ACL\u306b\u542b\u3081\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306a\u753b\u9762\u304c\u898b\u3048\u308b\u306f\u305a\u3067\u3059\u3002\n\n<img width=\"432\" alt=\"Screen Shot 2015-12-23 at 12.18.33 AM.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/7129/6645c1c8-9c98-2669-f95f-2019b5b73b97.png\">\n\n\u3053\u308c\u3067ACL\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u306e\u307f\u304cWeb UI\u3092\u898b\u3089\u308c\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u3053\u306e\u4ed6\u306b\u3082[Admin\u6a29\u9650\u3084job\u306ekill\u306b\u95a2\u3059\u308b\u6a29\u9650](https://spark.apache.org/docs/latest/configuration.html#security)\u306a\u3069\u3092\u5225\u9014\u7ba1\u7406\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n# Spark\u3067\u306e\u6697\u53f7\u5316\n\nSpark\u306f\u90e8\u5206\u7684\u306bSSL/TLS\u901a\u4fe1\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u73fe\u72b6\u3067\u306fSpark cluster\u3067\u52d5\u304f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u9593\u306e\u901a\u4fe1\u3092\u30d7\u30ed\u30c8\u30b3\u30eb\u3054\u3068\u306bSSL/TLS\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u73fe\u5728\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u306f\n\n- spark.ssl.akka : Akka\u3092\u4f7f\u3063\u305f\u901a\u4fe1\n- spark.ssl.fs : Broadcast\u306a\u3069\u306b\u4f7f\u308f\u308c\u308bHTTP\n\n\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002SSL/TLS\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3044\u304f\u3064\u304b\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u305d\u308c\u3089\u306f\u30d7\u30ed\u30c8\u30b3\u30eb\u3054\u3068\u306b\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070Java\u306eSASL\u3067\u4f7f\u3046Trust Store\u306e\u8a2d\u5b9a\u306fAkka\u306b\u5bfe\u3057\u3066\u306a\u3089`spark.ssl.akka.trustStore`, HTTP\u306b\u5bfe\u3057\u3066\u306a\u3089`spark.ssl.fs.trustStore`, \u4e21\u65b9\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u5bfe\u3057\u3066\u306a\u3089`spark.ssl.trustStore`\u306b\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n\n\u3042\u307e\u308aSpark\u3068\u76f4\u63a5\u95a2\u4fc2\u306a\u304f\u306a\u3063\u3066\u304f\u308b\u4e0a\u306b\u3001\u898b\u3048\u308b\u6319\u52d5\u304c\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3059\u304cSSL/TLS\u901a\u4fe1\u3092\u884c\u3046Spark\u30af\u30e9\u30b9\u30bf\u3092\u7acb\u3066\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u9375\u306a\u3069\u3092\u6e96\u5099\u3059\u308b\u306b\u306f`keytool`\u3068\u3044\u3046JDK\u306b\u4ed8\u5c5e\u306e\u30c4\u30fc\u30eb\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n1. \u30b5\u30fc\u30d0\u5074\u7528\u306e\u79d8\u5bc6\u9375\u3092\u4f5c\u6210\u3057\u307e\u3059\n2. \u8a3c\u660e\u66f8\u7f72\u540d\u8981\u6c42(CSR)\u3092\u4f5c\u6210\u3057\u307e\u3059\n3. \u8a8d\u8a3c\u5c40(CA)\u306b\u7f72\u540d\u3055\u308c\u305f\u8a3c\u660e\u66f8\u3092\u53d6\u5f97\u3057\u307e\u3059\n4. \u7f72\u540d\u3055\u308c\u305f\u8a3c\u660e\u66f8\u3092trusted store\u306b\u5165\u308c\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u30aa\u30ec\u30aa\u30ec\u3067\u3082\u3068\u308a\u3042\u3048\u305a\u8a66\u305b\u308c\u3070\u3044\u3044\u306e\u3067\u8a8d\u8a3c\u5c40\u3067\u306e\u7f72\u540d\u306f\u884c\u3044\u307e\u305b\u3093\u3002\u3053\u306e\u3042\u305f\u308a\u306f\u3082\u3063\u3068\u8a73\u3057\u3044\u8a18\u4e8b\u304c\u3044\u3063\u3071\u3044\u3042\u308a\u307e\u3059\u306e\u3067\u3068\u308a\u3042\u3048\u305aSpark\u3067\u306e\u8a2d\u5b9a\u304c\u3067\u304d\u308b\u307e\u3067\u306f\u5148\u3092\u6025\u304e\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n### \u30b5\u30fc\u30d0\u5074\u7528\u306e\u79d8\u5bc6\u9375\u3092\u7528\u610f\n\n```bash\n\n$ keytool -genkey \\\n          -alias ssltest \\          # \u79d8\u5bc6\u9375\u306e\u540d\u524d\u3002\u3053\u308c\u304b\u3089\u3082\u4f7f\u3046\u306e\u3067\u899a\u3048\u3066\u304a\u304f\n          -keyalg RSA \\\u2028             # \u9375\u306e\u6697\u53f7\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n          -keysize 2048 \\\n          -keypass key_password \\\u2028\u3000\u3000# \u9375\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3002\u4f7f\u3046\u306e\u3067\u899a\u3048\u3066\u304a\u304f\n          -storetype JKS \\\n          -keystore my_key_store \\\n\u2028          -storepass store_password\u3000#  \u9375\u3092\u5165\u308c\u305fkey store\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3002\u899a\u3048\u3066\u304a\u304f\u3002\n```\n\n2. \u306f\u98db\u3070\u3057\u3066\n\n### \u3055\u3063\u304d\u306e\u9375\u304b\u3089\u81ea\u5206\u3067\u8a3c\u660e\u66f8\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```bash\n\n$ keytool -export \\\n          -alias ssltest \\       # \u3055\u3063\u304d\u6c7a\u3081\u305f\u79d8\u5bc6\u9375\u306e\u540d\u524d\n          -file my_cert.cer \\    # export\u3059\u308b\u8a3c\u660e\u66f8\u306e\u540d\u524d\n          -keystore my_key_store # \u3055\u3063\u304d\u9375\u3092\u3044\u308c\u3066\u304a\u3044\u3066key store\u306epath\n```\n\n### \u3053\u306e\u8a3c\u660e\u66f8\u3092Trusted Store\u306b\u3044\u308c\u307e\u3059\n\n```\n$ keytool -import -v \\\u2028 \n          -trustcacerts \\\n \u2028         -alias ssltest \\\u2028\n          -file my_cert.cer \\         # \u3055\u3063\u304dexport\u3057\u305f\u8a3c\u660e\u66f8\u30d5\u30a1\u30a4\u30eb\n \u2028         -keyStore my_trust_store \\\u3000# Trust Store\u306e\u540d\u524d\n \u2028         -keypass store_password     # Trust Store\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3002\u899a\u3048\u3066\u304a\u304f\n```\n\n\u3042\u3068\u306f\u5fc5\u8981\u306a\u30d5\u30a1\u30a4\u30eb\u7fa4\u306f\u3067\u304d\u305f\u306e\u3067\u3053\u308c\u3089\u3092\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u5fc5\u8981\u306a\u8a2d\u5b9a\u5024\u306f\u3059\u3079\u3066\u51fa\u63c3\u3063\u3066\u3044\u308b\u306e\u3067\u8a18\u8ff0\u3059\u308b\u3060\u3051\u3067\u3059\u3002\nspark-defaults.conf\u306b\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u307e\u3059\n\n\n```\n# SSL/TLS\u3092\u6709\u52b9\u306b\u3059\u308b\u304b\u3069\u3046\u304b\nspark.ssl.enabled                  true\n# SSL\u3067\u4f7f\u3046\u6697\u53f7\u30b9\u30a4\u30fc\u30c8\nspark.ssl.enabledAlgorithms        TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA\nspark.ssl.protocol                 TLSv1.2\n# \u6697\u53f7\u5316\u306b\u4f7f\u3046\u79d8\u5bc6\u9375\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3002\u6700\u521d\u306b\u4f5c\u6210\u3057\u305f\u3082\u306e\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\nspark.ssl.keyPassword              key_password\n# Key Store\u3078\u306epath\nspark.ssl.keyStore                 /path/to/my_key_store\n# Key Store\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\nspark.ssl.keyStorePassword         store_password\n# Trust Store\u3078\u306epath\nspark.ssl.trustStore               /path/to/my_trust_store\n# Trust Store\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\nspark.ssl.trustStorePassword       store_password\n```\n\n\u3053\u308c\u3067\u307e\u305fStandalone mode\u3067\u30af\u30e9\u30b9\u30bf\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30ed\u30b0\u304c\u3067\u3066\u3044\u308c\u3070SSL/TLS\u901a\u4fe1\u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002(\u305f\u3060\u3057DEBUG\u30ec\u30d9\u30eb\u3092\u51fa\u529b\u3067\u304d\u308b\u3088\u3046\u306blog4j.properties\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044)\n\n```\n15/12/06 14:01:07 DEBUG SecurityManager: SSLConfiguration for file server: SSLOptions{enabled=true, keyStore=Some(/Users/sasakikai/my_key_store), keyStorePassword=Some(xxx), trustStore=Some(/Users/sasakikai/my_trust_store), trustStorePassword=Some(xxx), protocol=Some(TLSv1.2), enabledAlgorithms=Set(TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA)}\n\n15/12/06 14:01:07 DEBUG SecurityManager: SSLConfiguration for Akka: SSLOptions{enabled=true, keyStore=Some(/Users/sasakikai/my_key_store), keyStorePassword=Some(xxx), trustStore=Some(/Users/sasakikai/my_trust_store), trustStorePassword=Some(xxx), protocol=Some(TLSv1.2), enabledAlgorithms=Set(TLS_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_CBC_SHA)}\n```\n\n# \u307e\u3068\u3081\n\n\u4eca\u56de\u306e\u5185\u5bb9\u306f\u3059\u3079\u3066[Security](https://spark.apache.org/docs/latest/security.html)\u3068 [Configuration](https://spark.apache.org/docs/latest/configuration.html#security)\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u8aad\u3093\u3067\u3082\u3042\u307e\u308a\u3088\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u81ea\u5206\u3067\u624b\u3092\u52d5\u304b\u3057\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u30aa\u30ec\u30aa\u30ec\u8a8d\u8a3c\u3092\u901a\u3059\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u5b9f\u7528\u7684\u306a\u5074\u9762\u304c\u5c11\u306a\u3044\u3067\u3059\u304c\u3001\u305d\u308c\u305e\u308c\u306e\u8a2d\u5b9a\u304c\u3069\u306e\u3088\u3046\u306b\u4f7f\u308f\u308c\u308b\u304b\u306e\u7406\u89e3\u306e\u52a9\u3051\u306b\u306a\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n", "tags": ["hadoop", "Spark"]}