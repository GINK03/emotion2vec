{"tags": ["AWS", "aws-cli", "RDS"], "context": " More than 1 year has passed since last update.\u4e0b\u8a18\u306e\u8a18\u4e8b\u306e\u3088\u3046\u306b RDS \u3092\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u524a\u9664\u2192\u30ea\u30b9\u30c8\u30a2\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u3053\u308d\u3001\n\nRDS, Redshift\u306e\u8d77\u52d5\u505c\u6b62\u30b9\u30af\u30ea\u30d7\u30c8(\u691c\u8a3c\u74b0\u5883\u7528) \uff5c Developers.IO\n\n\u306a\u305c\u304b --vpc-security-group-ids \u304c\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3057\u304b\u3082\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306f\u30ea\u30b9\u30c8\u30a2\u3092\u958b\u59cb\u3057\u305f\u5f8c\u3001\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u307e\u3067\u5909\u66f4\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u6700\u65b0\u306e\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u304b\u3089\u30ea\u30b9\u30c8\u30a2\u3092\u3057\u3064\u3064\u3001\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u307e\u3067\u5f85\u3063\u3066\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u3092\u5909\u66f4\u3059\u308b\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n#!/bin/bash\n\nset -eu\n\nfunction rds_start()\n{\n    for id in \"$@\"; do\n        aws rds describe-db-instances \\\n            --db-instance-identifier \"$id\" \\\n            --query \"DBInstances[].DBInstanceStatus\" \\\n            --output text >/dev/null 2>&1 &&:\n\n        if [ $? -eq 0 ]; then\n            echo \"rds $id has been created\"\n        else\n            snapshot=$(aws rds describe-db-snapshots \\\n                --query \"reverse(sort_by(DBSnapshots,&SnapshotCreateTime))\n                    [?DBInstanceIdentifier==\\`${id}\\`]|[0].[DBSnapshotIdentifier]\" \\\n                --output text)\n\n            echo \"rds $id restore from $snapshot\"\n\n            aws rds restore-db-instance-from-db-snapshot \\\n                --db-instance-identifier \"${id}\" \\\n                --db-snapshot-identifier \"${snapshot}\" \\\n                --db-instance-class \"db.t2.micro\" \\\n                --db-subnet-group-name \"ore-subnet\" \\\n                --no-multi-az \\\n                --no-publicly-accessible \\\n                --no-auto-minor-version-upgrade \\\n                --storage-type gp2 > /dev/null\n        fi\n    done\n}\n\nfunction rds_wait()\n{\n    for id in \"$@\"; do\n        echo -n \"rds $id wait for available\"\n        while :; do\n            status=$(aws rds describe-db-instances \\\n                --db-instance-identifier \"$id\" \\\n                --query \"DBInstances[].DBInstanceStatus\" \\\n                --output text)\n\n            if [ \"$status\" == \"available\" ]; then\n                echo \" now $status\"\n                break\n            fi\n\n            echo -n .\n            sleep 1\n        done\n    done\n}\n\nfunction rds_sg()\n{\n    for id in \"$@\"; do\n        echo \"rds $id modify security-group\"\n\n        sg=$(aws ec2 describe-security-groups \\\n            --filter 'Name=group-name,Values=ore-group' \\\n            --query 'SecurityGroups[].GroupId' \\\n            --output text)\n\n        aws rds modify-db-instance \\\n            --db-instance-identifier \"$id\" \\\n            --vpc-security-group-ids \"$sg\" \\\n            --apply-immediately > /dev/null\n    done\n}\n\nfunction rds_start_wait_sg()\n{\n    rds_start \"$@\"\n    rds_wait \"$@\"\n    rds_sg \"$@\"\n}\n\nrds_start_wait_sg ore-db are-db\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30b5\u30a4\u30ba\u3068\u304b\u3001\u30b5\u30d6\u30cd\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306e\u540d\u524d\u3068\u304b\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306e\u540d\u524d\u3068\u304b\u306f\u30d9\u30bf\u66f8\u304d\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u8a18\u4e8b\u306e\u3088\u3046\u306b RDS \u3092\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u524a\u9664\u2192\u30ea\u30b9\u30c8\u30a2\u3057\u3088\u3046\u3068\u3057\u305f\u3068\u3053\u308d\u3001\n\n- [RDS, Redshift\u306e\u8d77\u52d5\u505c\u6b62\u30b9\u30af\u30ea\u30d7\u30c8(\u691c\u8a3c\u74b0\u5883\u7528) \uff5c Developers.IO](http://dev.classmethod.jp/cloud/aws/rds-redshift-start-stop/ \"RDS, Redshift\u306e\u8d77\u52d5\u505c\u6b62\u30b9\u30af\u30ea\u30d7\u30c8(\u691c\u8a3c\u74b0\u5883\u7528) \uff5c Developers.IO\")\n\n\u306a\u305c\u304b `--vpc-security-group-ids` \u304c\u6307\u5b9a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u3057\u304b\u3082\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306f\u30ea\u30b9\u30c8\u30a2\u3092\u958b\u59cb\u3057\u305f\u5f8c\u3001\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u307e\u3067\u5909\u66f4\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u306a\u306e\u3067\u3001\u6700\u65b0\u306e\u30b9\u30ca\u30c3\u30d7\u30b7\u30e7\u30c3\u30c8\u304b\u3089\u30ea\u30b9\u30c8\u30a2\u3092\u3057\u3064\u3064\u3001\u5229\u7528\u53ef\u80fd\u306b\u306a\u308b\u307e\u3067\u5f85\u3063\u3066\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u3092\u5909\u66f4\u3059\u308b\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n```sh\n#!/bin/bash\n\nset -eu\n\nfunction rds_start()\n{\n    for id in \"$@\"; do\n        aws rds describe-db-instances \\\n            --db-instance-identifier \"$id\" \\\n            --query \"DBInstances[].DBInstanceStatus\" \\\n            --output text >/dev/null 2>&1 &&:\n\n        if [ $? -eq 0 ]; then\n            echo \"rds $id has been created\"\n        else\n            snapshot=$(aws rds describe-db-snapshots \\\n                --query \"reverse(sort_by(DBSnapshots,&SnapshotCreateTime))\n                    [?DBInstanceIdentifier==\\`${id}\\`]|[0].[DBSnapshotIdentifier]\" \\\n                --output text)\n\n            echo \"rds $id restore from $snapshot\"\n\n            aws rds restore-db-instance-from-db-snapshot \\\n                --db-instance-identifier \"${id}\" \\\n                --db-snapshot-identifier \"${snapshot}\" \\\n                --db-instance-class \"db.t2.micro\" \\\n                --db-subnet-group-name \"ore-subnet\" \\\n                --no-multi-az \\\n                --no-publicly-accessible \\\n                --no-auto-minor-version-upgrade \\\n                --storage-type gp2 > /dev/null\n        fi\n    done\n}\n\nfunction rds_wait()\n{\n    for id in \"$@\"; do\n        echo -n \"rds $id wait for available\"\n        while :; do\n            status=$(aws rds describe-db-instances \\\n                --db-instance-identifier \"$id\" \\\n                --query \"DBInstances[].DBInstanceStatus\" \\\n                --output text)\n\n            if [ \"$status\" == \"available\" ]; then\n                echo \" now $status\"\n                break\n            fi\n\n            echo -n .\n            sleep 1\n        done\n    done\n}\n\nfunction rds_sg()\n{\n    for id in \"$@\"; do\n        echo \"rds $id modify security-group\"\n\n        sg=$(aws ec2 describe-security-groups \\\n            --filter 'Name=group-name,Values=ore-group' \\\n            --query 'SecurityGroups[].GroupId' \\\n            --output text)\n\n        aws rds modify-db-instance \\\n            --db-instance-identifier \"$id\" \\\n            --vpc-security-group-ids \"$sg\" \\\n            --apply-immediately > /dev/null\n    done\n}\n\nfunction rds_start_wait_sg()\n{\n    rds_start \"$@\"\n    rds_wait \"$@\"\n    rds_sg \"$@\"\n}\n\nrds_start_wait_sg ore-db are-db\n```\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30b5\u30a4\u30ba\u3068\u304b\u3001\u30b5\u30d6\u30cd\u30c3\u30c8\u30b0\u30eb\u30fc\u30d7\u306e\u540d\u524d\u3068\u304b\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30b0\u30eb\u30fc\u30d7\u306e\u540d\u524d\u3068\u304b\u306f\u30d9\u30bf\u66f8\u304d\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n"}