{"context": "\n\n\u524d\u56de\nENTRY(stext)\u3067MMU\u3092ON\u306b\u3059\u308b\u307e\u3067(\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4f9d\u5b58\u90e8\u3092\u629c\u3051\u51fa\u3059\u307e\u3067)\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u304b\u3089\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u4f9d\u5b58\u3057\u306a\u3044\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\u3002\n\nstart_kernel()\u306e\u5185\u5bb9\n\u4ee5\u4e0b\u306b\u3001start_kernel(init/main.c)\u306e\u51e6\u7406\u3092\u5168\u3066\u8a18\u8f09\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306e\u51e6\u7406\u306f\u3001init\u30d7\u30ed\u30bb\u30b9\u304c\u52d5\u304d\u51fa\u3059\u307e\u3067\u306b\u300c\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u521d\u671f\u5316\u300d\u3001\n\u300c\u30c7\u30d0\u30a4\u30b9\u306e\u521d\u671f\u5316\u300d\u3001\u300c\u5272\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u306e\u7ba1\u7406\u300d\u3001\u300c\u30c7\u30d0\u30c3\u30b0\u7528\u6a5f\u80fd\u306e\u521d\u671f\u5316\u300d\u306a\u3069\u3067\u3059\u3002\n\u3053\u306e\u521d\u671f\u5316\u3092\u8ffd\u3046\u4e8b\u306b\u3088\u3063\u3066\u3001Linux Kernel\u304c\u3069\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u6709\u3059\u308b\u306e\u304b\u304c\u3042\u308b\u7a0b\u5ea6\u3001\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\n\u521d\u671f\u5316\u306e\u5bfe\u8c61\u304c\u591a\u3044\u305f\u3081\u3001\u4eca\u56de\u306fboot_init_stack_canary()\u307e\u3067\u3092\u89e3\u8aad\u3057\u307e\u3059\u3002\n\ninit/main.c\nasmlinkage __visible void __init start_kernel(void)\n{\n    char *command_line;\n    char *after_dashes;\n\n    /*\n     * Need to run as early as possible, to initialize the\n     * lockdep hash:\n     */\n    lockdep_init();\n    set_task_stack_end_magic(&init_task);\n    smp_setup_processor_id();\n    debug_objects_early_init();\n\n    /*\n     * Set up the the initial canary ASAP:\n     */\n    boot_init_stack_canary();\n\n    cgroup_init_early();\n\n    local_irq_disable();\n    early_boot_irqs_disabled = true;\n\n/*\n * Interrupts are still disabled. Do necessary setups, then\n * enable them\n */\n    boot_cpu_init();\n    page_address_init();\n    pr_notice(\"%s\", linux_banner);\n    setup_arch(&command_line);\n    mm_init_cpumask(&init_mm);\n    setup_command_line(command_line);\n    setup_nr_cpu_ids();\n    setup_per_cpu_areas();\n    smp_prepare_boot_cpu(); /* arch-specific boot-cpu hooks */\n\n    build_all_zonelists(NULL, NULL);\n    page_alloc_init();\n\n    pr_notice(\"Kernel command line: %s\\n\", boot_command_line);\n    parse_early_param();\n    after_dashes = parse_args(\"Booting kernel\",\n                  static_command_line, __start___param,\n                  __stop___param - __start___param,\n                  -1, -1, &unknown_bootoption);\n    if (!IS_ERR_OR_NULL(after_dashes))\n        parse_args(\"Setting init args\", after_dashes, NULL, 0, -1, -1,\n               set_init_arg);\n\n    jump_label_init();\n\n    /*\n     * These use large bootmem allocations and must precede\n     * kmem_cache_init()\n     */\n    setup_log_buf(0);\n    pidhash_init();\n    vfs_caches_init_early();\n    sort_main_extable();\n    trap_init();\n    mm_init();\n\n    /*\n     * Set up the scheduler prior starting any interrupts (such as the\n     * timer interrupt). Full topology setup happens at smp_init()\n     * time - but meanwhile we still have a functioning scheduler.\n     */\n    sched_init();\n    /*\n     * Disable preemption - early bootup scheduling is extremely\n     * fragile until we cpu_idle() for the first time.\n     */\n    preempt_disable();\n    if (WARN(!irqs_disabled(),\n         \"Interrupts were enabled *very* early, fixing it\\n\"))\n        local_irq_disable();\n    idr_init_cache();\n    rcu_init();\n\n    /* trace_printk() and trace points may be used after this */\n    trace_init();\n\n    context_tracking_init();\n    radix_tree_init();\n    /* init some links before init_ISA_irqs() */\n    early_irq_init();\n    init_IRQ();\n    tick_init();\n    rcu_init_nohz();\n    init_timers();\n    hrtimers_init();\n    softirq_init();\n    timekeeping_init();\n    time_init();\n    sched_clock_postinit();\n    perf_event_init();\n    profile_init();\n    call_function_init();\n    WARN(!irqs_disabled(), \"Interrupts were enabled early\\n\");\n    early_boot_irqs_disabled = false;\n    local_irq_enable();\n\n    kmem_cache_init_late();\n\n    /*\n     * HACK ALERT! This is early. We're enabling the console before\n     * we've done PCI setups etc, and console_init() must be aware of\n     * this. But we do want output early, in case something goes wrong.\n     */\n    console_init();\n    if (panic_later)\n        panic(\"Too many boot %s vars at `%s'\", panic_later,\n              panic_param);\n\n    lockdep_info();\n\n    /*\n     * Need to run this when irqs are enabled, because it wants\n     * to self-test [hard/soft]-irqs on/off lock inversion bugs\n     * too:\n     */\n    locking_selftest();\n\n#ifdef CONFIG_BLK_DEV_INITRD\n    if (initrd_start && !initrd_below_start_ok &&\n        page_to_pfn(virt_to_page((void *)initrd_start)) < min_low_pfn) {\n        pr_crit(\"initrd overwritten (0x%08lx < 0x%08lx) - disabling it.\\n\",\n            page_to_pfn(virt_to_page((void *)initrd_start)),\n            min_low_pfn);\n        initrd_start = 0;\n    }\n#endif\n    page_ext_init();\n    debug_objects_mem_init();\n    kmemleak_init();\n    setup_per_cpu_pageset();\n    numa_policy_init();\n    if (late_time_init)\n        late_time_init();\n    sched_clock_init();\n    calibrate_delay();\n    pidmap_init();\n    anon_vma_init();\n    acpi_early_init();\n#ifdef CONFIG_X86\n    if (efi_enabled(EFI_RUNTIME_SERVICES))\n        efi_enter_virtual_mode();\n#endif\n#ifdef CONFIG_X86_ESPFIX64\n    /* Should be run before the first non-init thread is created */\n    init_espfix_bsp();\n#endif\n    thread_info_cache_init();\n    cred_init();\n    fork_init();\n    proc_caches_init();\n    buffer_init();\n    key_init();\n    security_init();\n    dbg_late_init();\n    vfs_caches_init(totalram_pages);\n    signals_init();\n    /* rootfs populating might need page-writeback */\n    page_writeback_init();\n    proc_root_init();\n    nsfs_init();\n    cpuset_init();\n    cgroup_init();\n    taskstats_init_early();\n    delayacct_init();\n\n    check_bugs();\n\n    acpi_subsystem_init();\n    sfi_init_late();\n\n    if (efi_enabled(EFI_RUNTIME_SERVICES)) {\n        efi_late_init();\n        efi_free_boot_services();\n    }\n\n    ftrace_init();\n\n    /* Do the rest non-__init'ed, we're now alive */\n    rest_init();\n}\n\n\n\n\"asmlinkage\"\u3001\"__visible\"\u3001\"__init\"\u30de\u30af\u30ed\u306b\u3064\u3044\u3066\n\u307e\u305a\u3001asmlinkage __visible void __init start_kernel(void)\u306e\n\"asmlinkage\"\u3001\"__visible\"\u3001\"__init\"\u306e\u5f79\u5272\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\ninclude/linux/linkage.c\n#ifndef asmlinkage\n#define asmlinkage CPP_ASMLINKAGE\n#endif\n\n#ifdef __cplusplus\n#define CPP_ASMLINKAGE extern \"C\"\n#else\n#define CPP_ASMLINKAGE\n#endif\n\n\nasmlinkage\u306f\u3001gcc\u306b\u3088\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3001\u6307\u5b9a\u3057\u305f\u95a2\u6570\u3092C\u8a00\u8a9e\u3068\u3057\u3066\u53d6\u308a\u6271\u3046\u305f\u3081\u306e\u30de\u30af\u30ed\u3067\u3059\u3002\nC++\u306e\u95a2\u6570\u3068\u3057\u3066\u53d6\u308a\u6271\u3046\u3068\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb(\u6a5f\u68b0\u8a9e)\u6bb5\u968e\u3067\u3001\n\u95a2\u6570\u540d\u306b\u60c5\u5831(\u5f15\u6570\u306e\u6570\u3001\u5f15\u6570\u306e\u578b\u306e\u60c5\u5831)\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\n\u3053\u3053\u3067\u8ffd\u52a0\u3055\u308c\u308b\u60c5\u5831\u306f\u3001\u300c\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306b\u3088\u3063\u3066\u8907\u6570\u5b58\u5728\u3059\u308b\u540c\u540d\u95a2\u6570\u306e\u4e2d\u304b\u3089\u3001\n\u30b7\u30b9\u30c6\u30e0\u304c\u3069\u306e\u95a2\u6570\u3092\u30b3\u30fc\u30eb\u3059\u308c\u3070\u826f\u3044\u306e\u304b\u3092\u5224\u65ad\u3059\u308b\u969b\u300d\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\nC\u8a00\u8a9e\u306f\u3001\u95a2\u6570\u540d\u306b\u8ffd\u52a0\u60c5\u5831\u304c\u542b\u307e\u308c\u308b\u4e8b\u3092\u524d\u63d0\u3068\u3057\u3066\u52d5\u4f5c\u3057\u306a\u3044\u305f\u3081\u3001\nC++\u3068\u3057\u3066\u95a2\u6570\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3057\u307e\u3063\u305f\u5834\u5408\u3001\u30ea\u30f3\u30af\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\u3053\u306e\u30a8\u30e9\u30fc\u306e\u89e3\u6c7a\u306basmlinkage\u30de\u30af\u30ed(extern \"C\")\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\n\u6b21\u306b\u3001__visible\u306e\u5b9a\u7fa9\u3067\u3059\u3002\n\u3053\u306e\u30de\u30af\u30ed\u306f\u4f7f\u7528\u3059\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u3001\u5b9a\u7fa9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u5b9a\u7fa9\u306f#define __visible (\u7a7a\u767d)\u306e\u5834\u5408\u304b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3059\u3002\n\nlinux/include/compiler-gcc5.h\n#define __visible __attribute__((externally_visible))\n\n\nGCC\u306e\u62e1\u5f35\u6a5f\u80fd\u3067\u3042\u308b__attribute__\u306f\u3001\u5f15\u6570\u306e\u5024\u306b\u3088\u3063\u3066\u95a2\u6570\u3001\u5909\u6570\u3001\u578b\u306b\u5bfe\u3057\u3066\u69d8\u3005\u306a\u5c5e\u6027\u3092\u4ed8\u52a0\u3067\u304d\u307e\u3059\u3002\nexternally_visible\u306f\u3001gcc\u306eFunction Attribute\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nexternally_visible\nThis attribute, attached to a global variable or function, nullifies the effect of the -fwhole-program >command-line option, so the object remains visible outside the current compilation unit.\nIf -fwhole-program is used together with -flto and gold is used as the linker plugin, externally_visible >attributes are automatically added to functions (not variable yet due to a current gold issue) that are >accessed outside of LTO objects according to resolution file produced by gold. For other linkers that >cannot generate resolution file, explicit externally_visible attributes are still necessary. \n\nexternally_visible\u306e\u5f79\u5272\u306f\u3001gcc\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\"-fwhole_program(\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3)\"\u3092\u7121\u52b9\u306b\u3057\u3001\nflto\u304a\u3088\u3073gold\u306b\u3088\u308b\u30d5\u30a1\u30a4\u30eb\u9593\u306e\u30ea\u30f3\u30af\u3092\u884c\u308f\u305b\u308b\u4e8b\u3067\u3059\u3002\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u7406\u89e3\u304c\u4e0d\u5341\u5206\u306a\u70b9\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30ea\u30f3\u30af\u306e\u65b9\u6cd5\u304c\u4e8c\u7a2e\u985e\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u3001\n\u7247\u65b9\u306e\u65b9\u6cd5(flto\u304a\u3088\u3073gold\u3092\u5229\u7528\u3059\u308b\u624b\u6cd5)\u3092\u63a1\u7528\u3059\u308b\u3068\u3044\u3046\u4e8b\u3067\u3057\u3087\u3046\u304b\u3002\u5f8c\u65e5\u3001\u8ffd\u8a18\u30fb\u4fee\u6b63\u3057\u307e\u3059\u3002\n \u3000\u3000\n\u3000\u3000\n\u6700\u5f8c\u306b\u3001__init\"\u306e\u5b9a\u7fa9\u3067\u3059\u3002\n\nkernel/include/linux/init.h\n#define __init      __section(.init.text) __cold notrace\n\n\n__section(.init.text)\u306f\u3001\u30e1\u30e2\u30ea\u4e0a\u306e\u521d\u671f\u5316\u95a2\u6570\u7528\u306e\u9818\u57df\u306b\u95a2\u6570\u306e\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3059\u308b\u305f\u3081\u306e\u5ba3\u8a00\u3067\u3059\u3002\n\u30e1\u30e2\u30ea\u306esection\u306f\u3001\u95a2\u6570\u3092\u914d\u7f6e\u3059\u308b\u9818\u57df\u3001\u30b9\u30bf\u30c3\u30af\u7528\u306e\u9818\u57df\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u7528\u306e\u9818\u57df\u306a\u3069\u306e\u5206\u3051\u65b9\u304c\u3042\u308a\u307e\u3059\u3002\nRTOS(Real Time OS)\u306esection\u5206\u3051\u304c\u898f\u6a21\u3082\u5c0f\u3055\u304f\u3001\u5358\u7d14\u3067\u5206\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u65b9\u306f\u8abf\u67fb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n__cold\u306f\u3001__visible\u3068\u540c\u3058\u304f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u5185\u5bb9\u306f#define __cold (\u7a7a\u767d)\u306e\u5834\u5408\u304b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3059\u3002\n\nlinux/include/compiler-gcc5.h\n#define __cold          __attribute__((__cold__))\n\n\n__attribute__\u3067__cold\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306e\u52b9\u679c\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059(\u4e00\u90e8\u629c\u7c8b)\u3002\n\ncold\nThe cold attribute on functions is used to inform the compiler that the function is unlikely to be \nexecuted. The function is optimized for size rather than speed and on many targets it is placed into\nspecial subsection of the text section so all cold functions appears close together improving code \nlocality of non-cold parts of program. \n\n\u3053\u3053\u3067\u306e\u8aac\u660e\u3092\u8aad\u3080\u9650\u308a\u3001__section(.init.text)\u3068\u540c\u3058\u5f79\u5272\u3092\u679c\u305f\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u601d\u308f\u308c\u307e\u3059\u3002\n\u4e88\u60f3\u3067\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u308a\u3001__section()\u304b__cold\u306e\u7247\u65b9\u306e\u307f\u304c\u6709\u52b9\u306b\u306a\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3002\n\u305d\u3057\u3066\u3001\u6700\u5f8c\u306enotrace\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\ninclude/linux/compiler.h\n#define notrace __attribute__((no_instrument_function))\n\n\nno_instrument_function\u306b\u3088\u3063\u3066\u3001\u95a2\u6570\u306e\u518d\u5e30\u547c\u3073\u51fa\u3057\u3092\u9632\u6b62\u3057\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306b\u3001__init\u3067\u4fee\u98fe\u3055\u308c\u305f\u95a2\u6570\u306f\u30e1\u30e2\u30ea\u304b\u3089\u524a\u9664\u3055\u308c\u307e\u3059\u304c\u3001\n\u305d\u306e\u5f79\u5272\u3092\u62c5\u3063\u3066\u3044\u308b\u30de\u30af\u30ed\u306fnotrace\u306a\u3093\u3067\u3057\u3087\u3046\u304b? \n\u4e00\u3064\u4e00\u3064\u30de\u30af\u30ed\u3092\u8abf\u3079\u307e\u3057\u305f\u304c\u3001\u5224\u660e\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\nboot_init_stack_canary()\u307e\u3067\u306e\u51e6\u7406\u5185\u5bb9\u306b\u3064\u3044\u3066\n\ninit/main.c\nasmlinkage __visible void __init start_kernel(void)\n{\n    char *command_line;\n    char *after_dashes;\n\n    /*\n     * Need to run as early as possible, to initialize the\n     * lockdep hash:\n     */\n    lockdep_init();\n    set_task_stack_end_magic(&init_task);\n    smp_setup_processor_id();\n    debug_objects_early_init();\n\n    /*\n     * Set up the the initial canary ASAP:\n     */\n    boot_init_stack_canary();\n\n\n\u307e\u305a\u3001lockdep_init(kernel/locking/lockdep.c)\u3067\u306f\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\nlockdep\u306e\u8a73\u3057\u3044\u8aac\u660e\u306f\u3001`Documentation/locking/lockdep-design.txt'\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u6587\u7ae0\u3092\u8aad\u3080\u3068\u3001lockdep\u304cLock-class\uff08spinlock\u3084mutex\uff09\u306e\u72b6\u614b\u3092\n\u691c\u8a3c\u3059\u308b\u305f\u3081\u306e\u30c7\u30d0\u30c3\u30b0\u30c4\u30fc\u30eb\u3067\u3042\u308b\u4e8b\u304c\u5206\u304b\u308a\u307e\u3059\u3002\nKconfig\u3067\u53d6\u6368\u9078\u629e\u3055\u308c\u305d\u3046\u306a\u6a5f\u80fd\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u6700\u521d\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u9762\u767d\u3044\u3067\u3059\u306d\u3002\n(\u983b\u7e41\u306b\u4f7f\u7528\u3055\u308c\u308b\u4ed5\u7d44\u307f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u305d\u308c\u306a\u308a\u306b\u767a\u751f\u3057\u305d\u3046\u306a\u4ed5\u7d44\u307f\u3067\u3059\u3051\u3069)\n\u3000\n\u3000\n\u6b21\u306eset_task_stack_end_magic(&init_task)\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nkernel/fork.c\nvoid set_task_stack_end_magic(struct task_struct *tsk)\n{\n    unsigned long *stackend;\n\n    stackend = end_of_stack(tsk);\n    *stackend = STACK_END_MAGIC;    /* for overflow detection */\n}\n\n\n\ninit/init/task.c\nstruct task_struct init_task = INIT_TASK(init_task);\n\n\n\u5f15\u6570\u3067\u3042\u308binit_task\u306f\u3001include/linux/sched.h\u3067\u5ba3\u8a00\u3055\u308c\u3001\n\u305d\u306e\u5b9f\u4f53\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30bb\u30b9\u306e\u5b9f\u4f53\u3068\u3057\u3066\u52d5\u7684\u306b\u751f\u6210\u30fb\u6d88\u6ec5\u3059\u308btask_struct\u69cb\u9020\u4f53\u306e\u4e2d\u3067\u3001\ninit_task\u306f\u9759\u7684\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3001\u5e38\u306b\u30e1\u30e2\u30ea\u4e0a\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u5b58\u5728\u3057\u307e\u3059\u3002\n\u4f55\u6545\u3001\u3053\u306e\u3088\u3046\u306a\u30bf\u30b9\u30af\u304c\u5fc5\u8981\u304b\u5fc5\u8981\u306a\u306e\u304b\u8abf\u67fb\u3057\u305f\u3068\u3053\u308d\u3001\n\u5faa\u74b0\u5f0f\u30ea\u30b9\u30c8\u306e\u30a2\u30f3\u30ab\u30fc\u30fb\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066init_task\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\u4f8b\uff1a(\u59cb\u70b9)init_task > task_A > task_B > \u2026\u2026 > (\u7d42\u70b9)init_task\n\u305d\u3057\u3066\u3001\u4eca\u56de\u306e\u5834\u5408\u306f\u3001end_of_stack(include/linux/sched.h)\u3067\u3001\n\u30b9\u30bf\u30c3\u30af\u306e\u4e0a\u9650\u5024(\u30a2\u30c9\u30ec\u30b9)\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3000\n\u3000\n\u6b21\u306esmp_setup_processor_id(init/main.c)\u306f\u3001\u51e6\u7406\u304c\u3042\u308a\u307e\u305b\u3093(\u30b3\u30fc\u30eb\u3055\u308c\u305f\u5f8c\u3001\u76f4\u3050\u30ea\u30bf\u30fc\u30f3\u3059\u308b)\u3002\n\u524d\u56de\u8aac\u660e\u3057\u305f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4f9d\u5b58\u90e8\u3067\u3001\u30d7\u30ed\u30bb\u30c3\u30b5\u60c5\u5831\u3092\u53d6\u5f97\u3057\u305f\u304b\u3089\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u306e\u95a2\u6570\u306e\u610f\u56f3\u304c\u4e0d\u660e\u3067\u3059\u3002\n\u3000\n\u3000\n\u6b21\u306edebug_objects_early_init\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nlib/debugobjects.c\nstruct debug_bucket {\n    struct hlist_head   list;\n    raw_spinlock_t      lock;\n};\nstatic struct debug_bucket  obj_hash[ODEBUG_HASH_SIZE];\n\nvoid __init debug_objects_early_init(void)\n{\n    int i;\n\n    for (i = 0; i < ODEBUG_HASH_SIZE; i++)\n        raw_spin_lock_init(&obj_hash[i].lock);\n\n    for (i = 0; i < ODEBUG_POOL_SIZE; i++)\n        hlist_add_head(&obj_static_pool[i].node, &obj_pool);\n}\n\n\nraw_spin_lock_init(include/linux/spinlock.h)\u3067\u306f\u3001raw_spinlock_t\u69cb\u9020\u4f53\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3068\u306f\u3001\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b5\u30b7\u30b9\u30c6\u30e0\u306e\u540c\u671f\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u30ed\u30c3\u30af\u3092\u639b\u3051\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u8cc7\u6e90\u304c\u89e3\u653e\u3055\u308c\u308b\u307e\u3067\u3001\u77ed\u3044\u30eb\u30fc\u30d7\u3092\u7e70\u308a\u8fd4\u3057\u306a\u304c\u3089\u5f85\u6a5f\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306e\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u306f\u8cc7\u6e90(\u5909\u6570)\u306e\u8aad\u307f\u66f8\u304d\u7528\u3067\u306f\u306a\u304f\u3001\n\"lifetime debugging of objects(\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u5b58\u671f\u9593\u306e\u30c7\u30d0\u30c3\u30b0)\"\u306b\u7528\u3044\u3089\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\u3000\n\u3000\n\u6b21\u306eboot_init_stack_canary()\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\narch/arm/include/asm/stackprotector.h\nstatic __always_inline void boot_init_stack_canary(void)\n{\n    unsigned long canary;\n\n    /* Try to get a semi random initial value. */\n    get_random_bytes(&canary, sizeof(canary));\n    canary ^= LINUX_VERSION_CODE;\n\n    current->stack_canary = canary;\n    __stack_chk_guard = current->stack_canary;\n}\n\n\n\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5bfe\u7b56\u3068\u3057\u3066\u3001current(\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30bb\u30b9)\u306e\u30b9\u30bf\u30c3\u30af\u306b\u3001\u30ab\u30ca\u30ea\u30a2\u30b3\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306b\u3001\u30b9\u30bf\u30c3\u30af\u306b\u306f\u5f15\u6570\u3001\u30ea\u30bf\u30fc\u30f3\u30a2\u30c9\u30ec\u30b9\u306a\u3069\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u304c\u3001\n\u3053\u306e\u5185\u5bb9\u3092\u7b2c\u4e09\u8005\u304c\u66f8\u304d\u63db\u3048\u308b\u4e8b\u304c\u3067\u304d\u308c\u3070\u3001\u4efb\u610f\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u95a2\u6570\u306e\u51e6\u7406\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u306f\u30b9\u30bf\u30c3\u30af\u304b\u3089\u30ea\u30bf\u30fc\u30f3\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u304c\u3001\n\u3053\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u95a2\u4fc2\u306e\u306a\u3044\u95a2\u6570\u3078\u306e\u30a2\u30c9\u30ec\u30b9\u3060\u3063\u305f\u5834\u5408\u3001\u30b7\u30b9\u30c6\u30e0\u304c\u60f3\u5b9a\u5916\u306e\u6319\u52d5\u3092\u8d77\u3053\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u9632\u3050\u305f\u3081\u306b(\u30b9\u30bf\u30c3\u30af\u306e\u66f8\u304d\u63db\u3048\u3092\u691c\u77e5\u3059\u308b\u305f\u3081\u306b)\u3001\n\u30ab\u30ca\u30ea\u30a2\u30b3\u30fc\u30c9(\u30e9\u30f3\u30c0\u30e0\u5024)\u3092\u30b9\u30bf\u30c3\u30af\u306b\u4ed5\u8fbc\u3093\u3067\u3001\u30b9\u30bf\u30c3\u30af\u304c\u66f8\u304d\u63db\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u4eca\u56de\u3001\u79c1\u306f\u3053\u306e\u51e6\u7406\u3092\u8aad\u3093\u3067\u3001\u521d\u3081\u3066\u30ab\u30ca\u30ea\u30a2\u306b\u3088\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5bfe\u7b56\u3092\u77e5\u308a\u307e\u3057\u305f\u3002\n\u30ab\u30ca\u30ea\u30a2\u30b3\u30fc\u30c9\u306f\u3001\u70ad\u9271\u4f5c\u696d\u306a\u3069\u306e\u73fe\u5834\u3067\u6bd2\u30ac\u30b9\u306e\u6709\u7121\u3092\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u969b\u306b\u3001\n\u30ab\u30ca\u30ea\u30a2\u304c\u6bd2\u6c17\u306b\u53cd\u5fdc\u3057\u3066\u304f\u308c\u308b\u4e8b\u306b\u7531\u6765\u3059\u308b\u305d\u3046\u3067\u3059\u3002\u4f55\u304b\u53ef\u54c0\u60f3\u3002\n\n\u7591\u554f\u70b9\n\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u4f8b\u3002\n\n\u6b21\u56de\ncgroup\u306e\u521d\u671f\u5316\u304b\u3089\u30da\u30fc\u30b8\u30a2\u30c9\u30ec\u30b9\u306e\u521d\u671f\u5316\u307e\u3067\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\nFunction Attributes - Using the GNU Compiler\nlinux\u30ab\u30fc\u30cd\u30eb\u304c\u63d0\u4f9b\u3059\u308b\u30ea\u30b9\u30c8\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\n##\u524d\u56de\n[ENTRY(stext)\u3067MMU\u3092ON\u306b\u3059\u308b\u307e\u3067(\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4f9d\u5b58\u90e8\u3092\u629c\u3051\u51fa\u3059\u307e\u3067)](http://qiita.com/Mogura1215/items/0f29cf4361dce85bfe0f)\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u304b\u3089\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u4f9d\u5b58\u3057\u306a\u3044\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\u3002\n\n##start_kernel()\u306e\u5185\u5bb9\n\u4ee5\u4e0b\u306b\u3001start_kernel(`init/main.c`)\u306e\u51e6\u7406\u3092\u5168\u3066\u8a18\u8f09\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306e\u51e6\u7406\u306f\u3001init\u30d7\u30ed\u30bb\u30b9\u304c\u52d5\u304d\u51fa\u3059\u307e\u3067\u306b\u300c\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u521d\u671f\u5316\u300d\u3001\n\u300c\u30c7\u30d0\u30a4\u30b9\u306e\u521d\u671f\u5316\u300d\u3001\u300c\u5272\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u306e\u7ba1\u7406\u300d\u3001\u300c\u30c7\u30d0\u30c3\u30b0\u7528\u6a5f\u80fd\u306e\u521d\u671f\u5316\u300d\u306a\u3069\u3067\u3059\u3002\n\u3053\u306e\u521d\u671f\u5316\u3092\u8ffd\u3046\u4e8b\u306b\u3088\u3063\u3066\u3001Linux Kernel\u304c\u3069\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u6709\u3059\u308b\u306e\u304b\u304c\u3042\u308b\u7a0b\u5ea6\u3001\u7406\u89e3\u3067\u304d\u307e\u3059\u3002\n\u521d\u671f\u5316\u306e\u5bfe\u8c61\u304c\u591a\u3044\u305f\u3081\u3001\u4eca\u56de\u306fboot_init_stack_canary()\u307e\u3067\u3092\u89e3\u8aad\u3057\u307e\u3059\u3002\n\n```init/main.c\nasmlinkage __visible void __init start_kernel(void)\n{\n\tchar *command_line;\n\tchar *after_dashes;\n\n\t/*\n\t * Need to run as early as possible, to initialize the\n\t * lockdep hash:\n\t */\n\tlockdep_init();\n\tset_task_stack_end_magic(&init_task);\n\tsmp_setup_processor_id();\n\tdebug_objects_early_init();\n\n\t/*\n\t * Set up the the initial canary ASAP:\n\t */\n\tboot_init_stack_canary();\n\n\tcgroup_init_early();\n\n\tlocal_irq_disable();\n\tearly_boot_irqs_disabled = true;\n\n/*\n * Interrupts are still disabled. Do necessary setups, then\n * enable them\n */\n\tboot_cpu_init();\n\tpage_address_init();\n\tpr_notice(\"%s\", linux_banner);\n\tsetup_arch(&command_line);\n\tmm_init_cpumask(&init_mm);\n\tsetup_command_line(command_line);\n\tsetup_nr_cpu_ids();\n\tsetup_per_cpu_areas();\n\tsmp_prepare_boot_cpu();\t/* arch-specific boot-cpu hooks */\n\n\tbuild_all_zonelists(NULL, NULL);\n\tpage_alloc_init();\n\n\tpr_notice(\"Kernel command line: %s\\n\", boot_command_line);\n\tparse_early_param();\n\tafter_dashes = parse_args(\"Booting kernel\",\n\t\t\t\t  static_command_line, __start___param,\n\t\t\t\t  __stop___param - __start___param,\n\t\t\t\t  -1, -1, &unknown_bootoption);\n\tif (!IS_ERR_OR_NULL(after_dashes))\n\t\tparse_args(\"Setting init args\", after_dashes, NULL, 0, -1, -1,\n\t\t\t   set_init_arg);\n\n\tjump_label_init();\n\n\t/*\n\t * These use large bootmem allocations and must precede\n\t * kmem_cache_init()\n\t */\n\tsetup_log_buf(0);\n\tpidhash_init();\n\tvfs_caches_init_early();\n\tsort_main_extable();\n\ttrap_init();\n\tmm_init();\n\n\t/*\n\t * Set up the scheduler prior starting any interrupts (such as the\n\t * timer interrupt). Full topology setup happens at smp_init()\n\t * time - but meanwhile we still have a functioning scheduler.\n\t */\n\tsched_init();\n\t/*\n\t * Disable preemption - early bootup scheduling is extremely\n\t * fragile until we cpu_idle() for the first time.\n\t */\n\tpreempt_disable();\n\tif (WARN(!irqs_disabled(),\n\t\t \"Interrupts were enabled *very* early, fixing it\\n\"))\n\t\tlocal_irq_disable();\n\tidr_init_cache();\n\trcu_init();\n\n\t/* trace_printk() and trace points may be used after this */\n\ttrace_init();\n\n\tcontext_tracking_init();\n\tradix_tree_init();\n\t/* init some links before init_ISA_irqs() */\n\tearly_irq_init();\n\tinit_IRQ();\n\ttick_init();\n\trcu_init_nohz();\n\tinit_timers();\n\thrtimers_init();\n\tsoftirq_init();\n\ttimekeeping_init();\n\ttime_init();\n\tsched_clock_postinit();\n\tperf_event_init();\n\tprofile_init();\n\tcall_function_init();\n\tWARN(!irqs_disabled(), \"Interrupts were enabled early\\n\");\n\tearly_boot_irqs_disabled = false;\n\tlocal_irq_enable();\n\n\tkmem_cache_init_late();\n\n\t/*\n\t * HACK ALERT! This is early. We're enabling the console before\n\t * we've done PCI setups etc, and console_init() must be aware of\n\t * this. But we do want output early, in case something goes wrong.\n\t */\n\tconsole_init();\n\tif (panic_later)\n\t\tpanic(\"Too many boot %s vars at `%s'\", panic_later,\n\t\t      panic_param);\n\n\tlockdep_info();\n\n\t/*\n\t * Need to run this when irqs are enabled, because it wants\n\t * to self-test [hard/soft]-irqs on/off lock inversion bugs\n\t * too:\n\t */\n\tlocking_selftest();\n\n#ifdef CONFIG_BLK_DEV_INITRD\n\tif (initrd_start && !initrd_below_start_ok &&\n\t    page_to_pfn(virt_to_page((void *)initrd_start)) < min_low_pfn) {\n\t\tpr_crit(\"initrd overwritten (0x%08lx < 0x%08lx) - disabling it.\\n\",\n\t\t    page_to_pfn(virt_to_page((void *)initrd_start)),\n\t\t    min_low_pfn);\n\t\tinitrd_start = 0;\n\t}\n#endif\n\tpage_ext_init();\n\tdebug_objects_mem_init();\n\tkmemleak_init();\n\tsetup_per_cpu_pageset();\n\tnuma_policy_init();\n\tif (late_time_init)\n\t\tlate_time_init();\n\tsched_clock_init();\n\tcalibrate_delay();\n\tpidmap_init();\n\tanon_vma_init();\n\tacpi_early_init();\n#ifdef CONFIG_X86\n\tif (efi_enabled(EFI_RUNTIME_SERVICES))\n\t\tefi_enter_virtual_mode();\n#endif\n#ifdef CONFIG_X86_ESPFIX64\n\t/* Should be run before the first non-init thread is created */\n\tinit_espfix_bsp();\n#endif\n\tthread_info_cache_init();\n\tcred_init();\n\tfork_init();\n\tproc_caches_init();\n\tbuffer_init();\n\tkey_init();\n\tsecurity_init();\n\tdbg_late_init();\n\tvfs_caches_init(totalram_pages);\n\tsignals_init();\n\t/* rootfs populating might need page-writeback */\n\tpage_writeback_init();\n\tproc_root_init();\n\tnsfs_init();\n\tcpuset_init();\n\tcgroup_init();\n\ttaskstats_init_early();\n\tdelayacct_init();\n\n\tcheck_bugs();\n\n\tacpi_subsystem_init();\n\tsfi_init_late();\n\n\tif (efi_enabled(EFI_RUNTIME_SERVICES)) {\n\t\tefi_late_init();\n\t\tefi_free_boot_services();\n\t}\n\n\tftrace_init();\n\n\t/* Do the rest non-__init'ed, we're now alive */\n\trest_init();\n}\n```\n\n##\"asmlinkage\"\u3001\"\\_\\_visible\"\u3001\"\\_\\_init\"\u30de\u30af\u30ed\u306b\u3064\u3044\u3066\n\u307e\u305a\u3001`asmlinkage __visible void __init start_kernel(void)`\u306e\n\"asmlinkage\"\u3001\"\\_\\_visible\"\u3001\"\\_\\_init\"\u306e\u5f79\u5272\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\n\n```include/linux/linkage.c\n#ifndef asmlinkage\n#define asmlinkage CPP_ASMLINKAGE\n#endif\n\n#ifdef __cplusplus\n#define CPP_ASMLINKAGE extern \"C\"\n#else\n#define CPP_ASMLINKAGE\n#endif\n```\nasmlinkage\u306f\u3001gcc\u306b\u3088\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u3001\u6307\u5b9a\u3057\u305f\u95a2\u6570\u3092C\u8a00\u8a9e\u3068\u3057\u3066\u53d6\u308a\u6271\u3046\u305f\u3081\u306e\u30de\u30af\u30ed\u3067\u3059\u3002\nC++\u306e\u95a2\u6570\u3068\u3057\u3066\u53d6\u308a\u6271\u3046\u3068\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb(\u6a5f\u68b0\u8a9e)\u6bb5\u968e\u3067\u3001\n\u95a2\u6570\u540d\u306b\u60c5\u5831(\u5f15\u6570\u306e\u6570\u3001\u5f15\u6570\u306e\u578b\u306e\u60c5\u5831)\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\n\u3053\u3053\u3067\u8ffd\u52a0\u3055\u308c\u308b\u60c5\u5831\u306f\u3001\u300c[\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9](http://wisdom.sakura.ne.jp/programming/cpp/cpp16.html)\u306b\u3088\u3063\u3066\u8907\u6570\u5b58\u5728\u3059\u308b\u540c\u540d\u95a2\u6570\u306e\u4e2d\u304b\u3089\u3001\n\u30b7\u30b9\u30c6\u30e0\u304c\u3069\u306e\u95a2\u6570\u3092\u30b3\u30fc\u30eb\u3059\u308c\u3070\u826f\u3044\u306e\u304b\u3092\u5224\u65ad\u3059\u308b\u969b\u300d\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\nC\u8a00\u8a9e\u306f\u3001\u95a2\u6570\u540d\u306b\u8ffd\u52a0\u60c5\u5831\u304c\u542b\u307e\u308c\u308b\u4e8b\u3092\u524d\u63d0\u3068\u3057\u3066\u52d5\u4f5c\u3057\u306a\u3044\u305f\u3081\u3001\nC++\u3068\u3057\u3066\u95a2\u6570\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3057\u307e\u3063\u305f\u5834\u5408\u3001\u30ea\u30f3\u30af\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\u3053\u306e\u30a8\u30e9\u30fc\u306e\u89e3\u6c7a\u306basmlinkage\u30de\u30af\u30ed(extern \"C\")\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\n \n\u6b21\u306b\u3001\\_\\_visible\u306e\u5b9a\u7fa9\u3067\u3059\u3002\n\u3053\u306e\u30de\u30af\u30ed\u306f\u4f7f\u7528\u3059\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u3001\u5b9a\u7fa9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u5b9a\u7fa9\u306f`#define __visible (\u7a7a\u767d)`\u306e\u5834\u5408\u304b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3059\u3002\n\n```linux/include/compiler-gcc5.h\n#define __visible __attribute__((externally_visible))\n```\nGCC\u306e\u62e1\u5f35\u6a5f\u80fd\u3067\u3042\u308b\\_\\_attribute__\u306f\u3001\u5f15\u6570\u306e\u5024\u306b\u3088\u3063\u3066\u95a2\u6570\u3001\u5909\u6570\u3001\u578b\u306b\u5bfe\u3057\u3066\u69d8\u3005\u306a\u5c5e\u6027\u3092\u4ed8\u52a0\u3067\u304d\u307e\u3059\u3002\nexternally\\_visible\u306f\u3001gcc\u306e[Function Attribute](https://gcc.gnu.org/onlinedocs/gcc-4.9.2/gcc/Function-Attributes.html)\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n>externally_visible\n>This attribute, attached to a global variable or function, nullifies the effect of the -fwhole-program >command-line option, so the object remains visible outside the current compilation unit.\n>If -fwhole-program is used together with -flto and gold is used as the linker plugin, externally_visible >attributes are automatically added to functions (not variable yet due to a current gold issue) that are >accessed outside of LTO objects according to resolution file produced by gold. For other linkers that >cannot generate resolution file, explicit externally_visible attributes are still necessary. \n\nexternally\\_visible\u306e\u5f79\u5272\u306f\u3001gcc\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\"-fwhole\\_program(\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3)\"\u3092\u7121\u52b9\u306b\u3057\u3001\nflto\u304a\u3088\u3073gold\u306b\u3088\u308b\u30d5\u30a1\u30a4\u30eb\u9593\u306e\u30ea\u30f3\u30af\u3092\u884c\u308f\u305b\u308b\u4e8b\u3067\u3059\u3002\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u7406\u89e3\u304c\u4e0d\u5341\u5206\u306a\u70b9\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30ea\u30f3\u30af\u306e\u65b9\u6cd5\u304c\u4e8c\u7a2e\u985e\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u3001\n\u7247\u65b9\u306e\u65b9\u6cd5(flto\u304a\u3088\u3073gold\u3092\u5229\u7528\u3059\u308b\u624b\u6cd5)\u3092\u63a1\u7528\u3059\u308b\u3068\u3044\u3046\u4e8b\u3067\u3057\u3087\u3046\u304b\u3002\u5f8c\u65e5\u3001\u8ffd\u8a18\u30fb\u4fee\u6b63\u3057\u307e\u3059\u3002\n \u3000\u3000\n\u3000\u3000\n\u6700\u5f8c\u306b\u3001\\_\\_init\"\u306e\u5b9a\u7fa9\u3067\u3059\u3002\n\n```kernel/include/linux/init.h\n#define __init\t\t__section(.init.text) __cold notrace\n```\n\\_\\_section(.init.text)\u306f\u3001\u30e1\u30e2\u30ea\u4e0a\u306e\u521d\u671f\u5316\u95a2\u6570\u7528\u306e\u9818\u57df\u306b\u95a2\u6570\u306e\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\u3059\u308b\u305f\u3081\u306e\u5ba3\u8a00\u3067\u3059\u3002\n\u30e1\u30e2\u30ea\u306esection\u306f\u3001\u95a2\u6570\u3092\u914d\u7f6e\u3059\u308b\u9818\u57df\u3001\u30b9\u30bf\u30c3\u30af\u7528\u306e\u9818\u57df\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u7528\u306e\u9818\u57df\u306a\u3069\u306e\u5206\u3051\u65b9\u304c\u3042\u308a\u307e\u3059\u3002\nRTOS(Real Time OS)\u306esection\u5206\u3051\u304c\u898f\u6a21\u3082\u5c0f\u3055\u304f\u3001\u5358\u7d14\u3067\u5206\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u65b9\u306f\u8abf\u67fb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\\_\\_cold\u306f\u3001\\_\\_visible\u3068\u540c\u3058\u304f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u5185\u5bb9\u306f`#define __cold (\u7a7a\u767d)`\u306e\u5834\u5408\u304b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3067\u3059\u3002\n\n```linux/include/compiler-gcc5.h\n#define __cold\t\t\t__attribute__((__cold__))\n```\n\\_\\_attribute__\u3067\\_\\_cold\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306e\u52b9\u679c\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059(\u4e00\u90e8\u629c\u7c8b)\u3002\n>cold\n>The cold attribute on functions is used to inform the compiler that the function is unlikely to be \n>executed. The function is optimized for size rather than speed and on many targets **it is placed into\n>special subsection of the text section** so all cold functions appears close together improving code \n>locality of non-cold parts of program. \n\n\u3053\u3053\u3067\u306e\u8aac\u660e\u3092\u8aad\u3080\u9650\u308a\u3001\\_\\_section(.init.text)\u3068\u540c\u3058\u5f79\u5272\u3092\u679c\u305f\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u601d\u308f\u308c\u307e\u3059\u3002\n\u4e88\u60f3\u3067\u3059\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3088\u308a\u3001\\_\\_section()\u304b\\_\\_cold\u306e\u7247\u65b9\u306e\u307f\u304c\u6709\u52b9\u306b\u306a\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u3002\n\u305d\u3057\u3066\u3001\u6700\u5f8c\u306enotrace\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```include/linux/compiler.h\n#define notrace __attribute__((no_instrument_function))\n```\nno_instrument_function\u306b\u3088\u3063\u3066\u3001\u95a2\u6570\u306e\u518d\u5e30\u547c\u3073\u51fa\u3057\u3092\u9632\u6b62\u3057\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306b\u3001__init\u3067\u4fee\u98fe\u3055\u308c\u305f\u95a2\u6570\u306f\u30e1\u30e2\u30ea\u304b\u3089\u524a\u9664\u3055\u308c\u307e\u3059\u304c\u3001\n\u305d\u306e\u5f79\u5272\u3092\u62c5\u3063\u3066\u3044\u308b\u30de\u30af\u30ed\u306fnotrace\u306a\u3093\u3067\u3057\u3087\u3046\u304b? \n\u4e00\u3064\u4e00\u3064\u30de\u30af\u30ed\u3092\u8abf\u3079\u307e\u3057\u305f\u304c\u3001\u5224\u660e\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n##boot_init_stack_canary()\u307e\u3067\u306e\u51e6\u7406\u5185\u5bb9\u306b\u3064\u3044\u3066\n```init/main.c\nasmlinkage __visible void __init start_kernel(void)\n{\n\tchar *command_line;\n\tchar *after_dashes;\n\n\t/*\n\t * Need to run as early as possible, to initialize the\n\t * lockdep hash:\n\t */\n\tlockdep_init();\n\tset_task_stack_end_magic(&init_task);\n\tsmp_setup_processor_id();\n\tdebug_objects_early_init();\n\n\t/*\n\t * Set up the the initial canary ASAP:\n\t */\n\tboot_init_stack_canary();\n```\n\n\u307e\u305a\u3001lockdep_init(`kernel/locking/lockdep.c`)\u3067\u306f\u3001\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\nlockdep\u306e\u8a73\u3057\u3044\u8aac\u660e\u306f\u3001`[Documentation/locking/lockdep-design.txt](https://sites.google.com/site/kandamotohiro/linux/lockdep-design-txt)'\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u6587\u7ae0\u3092\u8aad\u3080\u3068\u3001lockdep\u304cLock-class\uff08spinlock\u3084mutex\uff09\u306e\u72b6\u614b\u3092\n\u691c\u8a3c\u3059\u308b\u305f\u3081\u306e\u30c7\u30d0\u30c3\u30b0\u30c4\u30fc\u30eb\u3067\u3042\u308b\u4e8b\u304c\u5206\u304b\u308a\u307e\u3059\u3002\nKconfig\u3067\u53d6\u6368\u9078\u629e\u3055\u308c\u305d\u3046\u306a\u6a5f\u80fd\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u6700\u521d\u306b\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u9762\u767d\u3044\u3067\u3059\u306d\u3002\n(\u983b\u7e41\u306b\u4f7f\u7528\u3055\u308c\u308b\u4ed5\u7d44\u307f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u305d\u308c\u306a\u308a\u306b\u767a\u751f\u3057\u305d\u3046\u306a\u4ed5\u7d44\u307f\u3067\u3059\u3051\u3069)\n\u3000\n\u3000\n\u6b21\u306eset_task_stack_end_magic(&init_task)\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```kernel/fork.c\nvoid set_task_stack_end_magic(struct task_struct *tsk)\n{\n\tunsigned long *stackend;\n\n\tstackend = end_of_stack(tsk);\n\t*stackend = STACK_END_MAGIC;\t/* for overflow detection */\n}\n```\n\n```init/init/task.c\nstruct task_struct init_task = INIT_TASK(init_task);\n```\n\n\u5f15\u6570\u3067\u3042\u308binit_task\u306f\u3001`include/linux/sched.h`\u3067\u5ba3\u8a00\u3055\u308c\u3001\n\u305d\u306e\u5b9f\u4f53\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30bb\u30b9\u306e\u5b9f\u4f53\u3068\u3057\u3066\u52d5\u7684\u306b\u751f\u6210\u30fb\u6d88\u6ec5\u3059\u308btask_struct\u69cb\u9020\u4f53\u306e\u4e2d\u3067\u3001\ninit_task\u306f\u9759\u7684\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3001\u5e38\u306b\u30e1\u30e2\u30ea\u4e0a\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u3057\u3066\u5b58\u5728\u3057\u307e\u3059\u3002\n\u4f55\u6545\u3001\u3053\u306e\u3088\u3046\u306a\u30bf\u30b9\u30af\u304c\u5fc5\u8981\u304b\u5fc5\u8981\u306a\u306e\u304b\u8abf\u67fb\u3057\u305f\u3068\u3053\u308d\u3001\n\u5faa\u74b0\u5f0f\u30ea\u30b9\u30c8\u306e\u30a2\u30f3\u30ab\u30fc\u30fb\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066init_task\u3092\u5229\u7528\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\u4f8b\uff1a(\u59cb\u70b9)init_task > task_A > task_B > \u2026\u2026 > (\u7d42\u70b9)init_task\n\u305d\u3057\u3066\u3001\u4eca\u56de\u306e\u5834\u5408\u306f\u3001end_of_stack(`include/linux/sched.h`)\u3067\u3001\n\u30b9\u30bf\u30c3\u30af\u306e\u4e0a\u9650\u5024(\u30a2\u30c9\u30ec\u30b9)\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3000\n\u3000\n\u6b21\u306esmp_setup_processor_id(`init/main.c`)\u306f\u3001\u51e6\u7406\u304c\u3042\u308a\u307e\u305b\u3093(\u30b3\u30fc\u30eb\u3055\u308c\u305f\u5f8c\u3001\u76f4\u3050\u30ea\u30bf\u30fc\u30f3\u3059\u308b)\u3002\n\u524d\u56de\u8aac\u660e\u3057\u305f\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4f9d\u5b58\u90e8\u3067\u3001\u30d7\u30ed\u30bb\u30c3\u30b5\u60c5\u5831\u3092\u53d6\u5f97\u3057\u305f\u304b\u3089\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u306e\u95a2\u6570\u306e\u610f\u56f3\u304c\u4e0d\u660e\u3067\u3059\u3002\n\u3000\n\u3000\n\u6b21\u306edebug_objects_early_init\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```lib/debugobjects.c\nstruct debug_bucket {\n\tstruct hlist_head\tlist;\n\traw_spinlock_t\t\tlock;\n};\nstatic struct debug_bucket\tobj_hash[ODEBUG_HASH_SIZE];\n\nvoid __init debug_objects_early_init(void)\n{\n\tint i;\n\n\tfor (i = 0; i < ODEBUG_HASH_SIZE; i++)\n\t\traw_spin_lock_init(&obj_hash[i].lock);\n\n\tfor (i = 0; i < ODEBUG_POOL_SIZE; i++)\n\t\thlist_add_head(&obj_static_pool[i].node, &obj_pool);\n}\n```\nraw_spin_lock_init(`include/linux/spinlock.h`)\u3067\u306f\u3001[raw_spinlock_t](http://lxr.free-electrons.com/source/include/linux/spinlock_types.h#L20)\u69cb\u9020\u4f53\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3068\u306f\u3001\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b5\u30b7\u30b9\u30c6\u30e0\u306e\u540c\u671f\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u30ed\u30c3\u30af\u3092\u639b\u3051\u3066\u4f7f\u7528\u3057\u3066\u3044\u308b\u8cc7\u6e90\u304c\u89e3\u653e\u3055\u308c\u308b\u307e\u3067\u3001\u77ed\u3044\u30eb\u30fc\u30d7\u3092\u7e70\u308a\u8fd4\u3057\u306a\u304c\u3089\u5f85\u6a5f\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306e\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u306f\u8cc7\u6e90(\u5909\u6570)\u306e\u8aad\u307f\u66f8\u304d\u7528\u3067\u306f\u306a\u304f\u3001\n\"lifetime debugging of objects(\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u5b58\u671f\u9593\u306e\u30c7\u30d0\u30c3\u30b0)\"\u306b\u7528\u3044\u3089\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\u3000\n\u3000\n\u6b21\u306eboot_init_stack_canary()\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```arch/arm/include/asm/stackprotector.h\nstatic __always_inline void boot_init_stack_canary(void)\n{\n\tunsigned long canary;\n\n\t/* Try to get a semi random initial value. */\n\tget_random_bytes(&canary, sizeof(canary));\n\tcanary ^= LINUX_VERSION_CODE;\n\n\tcurrent->stack_canary = canary;\n\t__stack_chk_guard = current->stack_canary;\n}\n```\n\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5bfe\u7b56\u3068\u3057\u3066\u3001current(\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u30d7\u30ed\u30bb\u30b9)\u306e\u30b9\u30bf\u30c3\u30af\u306b\u3001\u30ab\u30ca\u30ea\u30a2\u30b3\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u4e00\u822c\u7684\u306b\u3001\u30b9\u30bf\u30c3\u30af\u306b\u306f\u5f15\u6570\u3001\u30ea\u30bf\u30fc\u30f3\u30a2\u30c9\u30ec\u30b9\u306a\u3069\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u304c\u3001\n\u3053\u306e\u5185\u5bb9\u3092\u7b2c\u4e09\u8005\u304c\u66f8\u304d\u63db\u3048\u308b\u4e8b\u304c\u3067\u304d\u308c\u3070\u3001\u4efb\u610f\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u95a2\u6570\u306e\u51e6\u7406\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u306f\u30b9\u30bf\u30c3\u30af\u304b\u3089\u30ea\u30bf\u30fc\u30f3\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u304c\u3001\n\u3053\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u95a2\u4fc2\u306e\u306a\u3044\u95a2\u6570\u3078\u306e\u30a2\u30c9\u30ec\u30b9\u3060\u3063\u305f\u5834\u5408\u3001\u30b7\u30b9\u30c6\u30e0\u304c\u60f3\u5b9a\u5916\u306e\u6319\u52d5\u3092\u8d77\u3053\u3057\u307e\u3059\u3002\n\u3053\u308c\u3092\u9632\u3050\u305f\u3081\u306b(\u30b9\u30bf\u30c3\u30af\u306e\u66f8\u304d\u63db\u3048\u3092\u691c\u77e5\u3059\u308b\u305f\u3081\u306b)\u3001\n\u30ab\u30ca\u30ea\u30a2\u30b3\u30fc\u30c9(\u30e9\u30f3\u30c0\u30e0\u5024)\u3092\u30b9\u30bf\u30c3\u30af\u306b\u4ed5\u8fbc\u3093\u3067\u3001\u30b9\u30bf\u30c3\u30af\u304c\u66f8\u304d\u63db\u3048\u3089\u308c\u3066\u3044\u306a\u3044\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n\u4eca\u56de\u3001\u79c1\u306f\u3053\u306e\u51e6\u7406\u3092\u8aad\u3093\u3067\u3001\u521d\u3081\u3066\u30ab\u30ca\u30ea\u30a2\u306b\u3088\u308b\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u5bfe\u7b56\u3092\u77e5\u308a\u307e\u3057\u305f\u3002\n\u30ab\u30ca\u30ea\u30a2\u30b3\u30fc\u30c9\u306f\u3001\u70ad\u9271\u4f5c\u696d\u306a\u3069\u306e\u73fe\u5834\u3067\u6bd2\u30ac\u30b9\u306e\u6709\u7121\u3092\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u969b\u306b\u3001\n\u30ab\u30ca\u30ea\u30a2\u304c\u6bd2\u6c17\u306b\u53cd\u5fdc\u3057\u3066\u304f\u308c\u308b\u4e8b\u306b\u7531\u6765\u3059\u308b\u305d\u3046\u3067\u3059\u3002\u4f55\u304b\u53ef\u54c0\u60f3\u3002\n\n\n##\u7591\u554f\u70b9\n\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u4f8b\u3002\n\n##\u6b21\u56de\n[cgroup\u306e\u521d\u671f\u5316\u304b\u3089\u30da\u30fc\u30b8\u30a2\u30c9\u30ec\u30b9\u306e\u521d\u671f\u5316\u307e\u3067](http://qiita.com/Mogura1215/items/c07dd13346a7f74eb98b)\u3092\u8aac\u660e\u3057\u3066\u3044\u307e\u3059\u3002\n\n##\u53c2\u8003\n[Function Attributes - Using the GNU Compiler](https://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html)\n[linux\u30ab\u30fc\u30cd\u30eb\u304c\u63d0\u4f9b\u3059\u308b\u30ea\u30b9\u30c8\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066](http://d.hatena.ne.jp/mmitou/20120626/1340731801)\n", "tags": ["RaspberryPi", "Linux", "kernel", "C\u8a00\u8a9e"]}