{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nCore Data\u3092JSON\u5f62\u5f0f\u3067\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3057\u305f\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u3044\u3044\u60c5\u5831\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3068\u308a\u3042\u3048\u305a\u306e\u5b9f\u88c5\u306a\u306e\u3067\u3001\u3082\u3063\u3068\u77ed\u304f\u30b9\u30de\u30fc\u30c8\u306b\u304b\u3051\u308b\u306e\u3067\u3069\u3093\u3069\u3093\u3044\u3058\u3063\u3066\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nNSManagedObject\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304cint\u3001float\u306b\u306a\u308b\u3053\u3068\u306f\u7121\u3044\u306e\u3067\u3001\u4e0d\u8981\u306a\u90e8\u5206\u304c\u591a\u3044\u3067\u3059\u304c\u5225\u306e\u6a5f\u4f1a\u306b\u4f7f\u3048\u305d\u3046\u306a\u306e\u3067\u3042\u3048\u3066\u6b8b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\n    NSMutableArray *mutableFetchResults = [[context executeFetchRequest:request error:nil] mutableCopy];\n\n    if (mutableFetchResults == nil) {\n        NSLog(@\"no results\");\n    }\n    NSMutableArray *marray = [NSMutableArray array];\n\n    for(id tmpEntity in mutableFetchResults){\n        NSMutableDictionary *tmpDict = [NSMutableDictionary dictionary];\n        unsigned int count;\n        objc_property_t* props = class_copyPropertyList([tmpEntity class], &count);\n        for (int i = 0; i < count; i++) {\n            objc_property_t property = props[i];\n            const char * name = property_getName(property);\n            NSString *propertyName = [NSString stringWithCString:name encoding:NSUTF8StringEncoding];\n            const char * type = property_getAttributes(property);\n            NSString *attr = [NSString stringWithCString:type encoding:NSUTF8StringEncoding];\n            NSString * typeString = [NSString stringWithUTF8String:type];\n            NSArray * attributes = [typeString componentsSeparatedByString:@\",\"];\n            NSString * typeAttribute = [attributes objectAtIndex:0];\n            NSString * propertyType = [typeAttribute substringFromIndex:1];\n            const char * rawPropertyType = [propertyType UTF8String];\n\n            if (strcmp(rawPropertyType, @encode(float)) == 0) {\n                //it's a float\n                float tmpValue = [[tmpEntity valueForKey:propertyName] floatValue];\n                NSString *value = [NSString stringWithFormat:@\"%f\",tmpValue];\n                [tmpDict setObject:value forKey:propertyName];\n            } else if (strcmp(rawPropertyType, @encode(int)) == 0) {\n                //it's an int\n                int tmpValue = [[tmpEntity valueForKey:propertyName] intValue];\n                NSString *value = [NSString stringWithFormat:@\"%d\",tmpValue];\n                [tmpDict setObject:value forKey:propertyName];\n            } else if (strcmp(rawPropertyType, @encode(id)) == 0) {\n                //it's some sort of object\n            } else {\n                // According to Apples Documentation you can determine the corresponding encoding values\n            }\n\n            if ([typeAttribute hasPrefix:@\"T@\"]) {\n                NSString * typeClassName = [typeAttribute substringWithRange:NSMakeRange(3, [typeAttribute length]-4)];  //turns @\"NSDate\" into NSDate\n                Class typeClass = NSClassFromString(typeClassName);\n                if (typeClass != nil) {\n                    // Here is the corresponding class even for nil values\n                    if(typeClass == [NSString class]){\n                        NSString *string = [tmpEntity valueForKey:propertyName];\n                        if(string == nil)continue;\n                            [tmpDict setObject:string forKey:propertyName];\n\n                    }else if(typeClass ==[NSDate class]){\n                        NSDate *date = [tmpEntity valueForKey:propertyName];\n                        if(date == nil)continue;\n                        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n                        [formatter setDateFormat:@\"yyyy-MM-dd HH:mm:ss zzz\"];\n                        [formatter setTimeZone:[NSTimeZone timeZoneWithName:@\"Asia/Tokyo\"]];\n                        NSString *stringFromDate = [formatter stringFromDate:date];\n                        [tmpDict setObject:stringFromDate forKey:propertyName];\n                    }else if(typeClass == [NSNumber class]){\n                        NSNumber *number = [tmpEntity valueForKey:propertyName];\n                        if(number == nil)continue;\n                        NSString *stringFromNum = [number stringValue];\n                        [tmpDict setObject:stringFromNum forKey:propertyName];\n                    }\n                }\n            }\n\n        }\n        [marray addObject:tmpDict];\n        free(props);\n    }\n\n    NSError *error;\n    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:marray\n                                                       options:NSJSONWritingPrettyPrinted // Pass 0 if you don't care about the readability of the generated string\n                                                         error:&error];\n\n    if (! jsonData) {\n        NSLog(@\"Got an error: %@\", error);\n    } else {\n        NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n    }\n\n#\u306f\u3058\u3081\u306b\nCore Data\u3092JSON\u5f62\u5f0f\u3067\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3057\u305f\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u3044\u3044\u60c5\u5831\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u3068\u308a\u3042\u3048\u305a\u306e\u5b9f\u88c5\u306a\u306e\u3067\u3001\u3082\u3063\u3068\u77ed\u304f\u30b9\u30de\u30fc\u30c8\u306b\u304b\u3051\u308b\u306e\u3067\u3069\u3093\u3069\u3093\u3044\u3058\u3063\u3066\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\nNSManagedObject\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304cint\u3001float\u306b\u306a\u308b\u3053\u3068\u306f\u7121\u3044\u306e\u3067\u3001\u4e0d\u8981\u306a\u90e8\u5206\u304c\u591a\u3044\u3067\u3059\u304c\u5225\u306e\u6a5f\u4f1a\u306b\u4f7f\u3048\u305d\u3046\u306a\u306e\u3067\u3042\u3048\u3066\u6b8b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n##\u30b3\u30fc\u30c9\n```objc\n    NSMutableArray *mutableFetchResults = [[context executeFetchRequest:request error:nil] mutableCopy];\n    \n    if (mutableFetchResults == nil) {\n        NSLog(@\"no results\");\n    }\n    NSMutableArray *marray = [NSMutableArray array];\n    \n    for(id tmpEntity in mutableFetchResults){\n        NSMutableDictionary *tmpDict = [NSMutableDictionary dictionary];\n        unsigned int count;\n        objc_property_t* props = class_copyPropertyList([tmpEntity class], &count);\n        for (int i = 0; i < count; i++) {\n            objc_property_t property = props[i];\n            const char * name = property_getName(property);\n            NSString *propertyName = [NSString stringWithCString:name encoding:NSUTF8StringEncoding];\n            const char * type = property_getAttributes(property);\n            NSString *attr = [NSString stringWithCString:type encoding:NSUTF8StringEncoding];\n            NSString * typeString = [NSString stringWithUTF8String:type];\n            NSArray * attributes = [typeString componentsSeparatedByString:@\",\"];\n            NSString * typeAttribute = [attributes objectAtIndex:0];\n            NSString * propertyType = [typeAttribute substringFromIndex:1];\n            const char * rawPropertyType = [propertyType UTF8String];\n            \n            if (strcmp(rawPropertyType, @encode(float)) == 0) {\n                //it's a float\n                float tmpValue = [[tmpEntity valueForKey:propertyName] floatValue];\n                NSString *value = [NSString stringWithFormat:@\"%f\",tmpValue];\n                [tmpDict setObject:value forKey:propertyName];\n            } else if (strcmp(rawPropertyType, @encode(int)) == 0) {\n                //it's an int\n                int tmpValue = [[tmpEntity valueForKey:propertyName] intValue];\n                NSString *value = [NSString stringWithFormat:@\"%d\",tmpValue];\n                [tmpDict setObject:value forKey:propertyName];\n            } else if (strcmp(rawPropertyType, @encode(id)) == 0) {\n                //it's some sort of object\n            } else {\n                // According to Apples Documentation you can determine the corresponding encoding values\n            }\n            \n            if ([typeAttribute hasPrefix:@\"T@\"]) {\n                NSString * typeClassName = [typeAttribute substringWithRange:NSMakeRange(3, [typeAttribute length]-4)];  //turns @\"NSDate\" into NSDate\n                Class typeClass = NSClassFromString(typeClassName);\n                if (typeClass != nil) {\n                    // Here is the corresponding class even for nil values\n                    if(typeClass == [NSString class]){\n                        NSString *string = [tmpEntity valueForKey:propertyName];\n                        if(string == nil)continue;\n                            [tmpDict setObject:string forKey:propertyName];\n                        \n                    }else if(typeClass ==[NSDate class]){\n                        NSDate *date = [tmpEntity valueForKey:propertyName];\n                        if(date == nil)continue;\n                        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];\n                        [formatter setDateFormat:@\"yyyy-MM-dd HH:mm:ss zzz\"];\n                        [formatter setTimeZone:[NSTimeZone timeZoneWithName:@\"Asia/Tokyo\"]];\n                        NSString *stringFromDate = [formatter stringFromDate:date];\n                        [tmpDict setObject:stringFromDate forKey:propertyName];\n                    }else if(typeClass == [NSNumber class]){\n                        NSNumber *number = [tmpEntity valueForKey:propertyName];\n                        if(number == nil)continue;\n                        NSString *stringFromNum = [number stringValue];\n                        [tmpDict setObject:stringFromNum forKey:propertyName];\n                    }\n                }\n            }\n            \n        }\n        [marray addObject:tmpDict];\n        free(props);\n    }\n    \n    NSError *error;\n    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:marray\n                                                       options:NSJSONWritingPrettyPrinted // Pass 0 if you don't care about the readability of the generated string\n                                                         error:&error];\n    \n    if (! jsonData) {\n        NSLog(@\"Got an error: %@\", error);\n    } else {\n        NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n    }\n```\n", "tags": ["Objective-C", "CoreData", "iOS"]}