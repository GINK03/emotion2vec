{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nPython\u306f\u56fa\u5b9a\u306eGUI\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u306a\u304f\u3001\u3044\u304f\u3064\u304b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e2d\u304b\u3089\u3001\u81ea\u5206\u306e\u76ee\u7684\u306b\u5408\u3063\u305f\u3082\u306e\u3092\u4f7f\u3046\u3002\u5358\u4f53\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3060\u3051\u4f7f\u3063\u3066\u3044\u308b\u5206\u306b\u306f\u69cb\u308f\u306a\u3044\u304c\u3001\u8907\u6570\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3046\u3068\u306a\u308b\u3068\u5fc5\u305a\u3068\u8a00\u3063\u3066\u3088\u3044\u307b\u3069\u7af6\u5408\u304c\u8d77\u304d\u308b\u3002\u3053\u306e\u30da\u30fc\u30b8\u306f\u305d\u306e\u4e2d\u3067\u3082\u3001PySide\u3068matplotlib\u306e\u9023\u643a\u306b\u3064\u3044\u3066\u306e\u30ea\u30de\u30a4\u30f3\u30c0\u3067\u3042\u308b\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nPySide\u306fQt\u306ePython\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3067\u3042\u308b\u3002Python\u306b\u4ed8\u5c5e\u3057\u3066\u3044\u308bTkinter(GUI\u30e9\u30a4\u30d6\u30e9\u30ea)\u306e\u4ee3\u308f\u308a\u3068\u3057\u3066\u7528\u3044\u3089\u308c\u308b\u3002PyQt4\u3068\u60a9\u3080\u3068\u3053\u308d\u3060\u304c\u3001Mac\u306b\u304a\u3044\u3066\u306fPySite\u306e\u65b9\u304c\u9065\u304b\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u697d\u3067\u3042\u308b\u3002\u5177\u4f53\u7684\u306b\u306fbrew\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u826f\u3044\n$ brew intall pyside\n\n\nPySide\u3068matplotlib\u306e\u9023\u643a\nmatplotlib\u306fGUI\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3046\u306b\u306f\u5c11\u3057\u8a9e\u5f0a\u304c\u3042\u308b\u304c\u3001\u30ad\u30fc\u30a4\u30d9\u30f3\u30c8\u306a\u3069\u306e\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u3067\u30b0\u30e9\u30d5\u306e\u9077\u79fb\u3092\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u67d4\u8edf\u3067\u3001\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b\u3002\u4f8b\u3048\u3070\u3001\u68d2\u30b0\u30e9\u30d5\u3092\u30c9\u30e9\u30c3\u30b0\u30a2\u30f3\u30c9\u30c9\u30ed\u30c3\u30d7\u3067\u79fb\u52d5\u3055\u305b\u308b\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\ndraggable_rectangle.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nclass DraggableRectangle:\n    def __init__(self, rect):\n        self.rect = rect\n        self.press = None\n\n    def connect(self):\n        'connect to all the events we need'\n        self.cidpress = self.rect.figure.canvas.mpl_connect(\n            'button_press_event', self.on_press)\n        self.cidrelease = self.rect.figure.canvas.mpl_connect(\n            'button_release_event', self.on_release)\n        self.cidmotion = self.rect.figure.canvas.mpl_connect(\n            'motion_notify_event', self.on_motion)\n\n    def on_press(self, event):\n        '''\n        on button press we will see if the mouse is over us and store some data\n        '''\n        if event.inaxes != self.rect.axes:\n            return\n\n        contains, attrd = self.rect.contains(event)\n        if not contains:\n            return\n        print 'event contains', self.rect.xy\n        x0, y0 = self.rect.xy\n        self.press = x0, y0, event.xdata, event.ydata\n\n    def on_motion(self, event):\n        'on motion we will move the rect if the mouse is over us'\n        if self.press is None:\n            return\n        if event.inaxes != self.rect.axes:\n            return\n        x0, y0, xpress, ypress = self.press\n        dx = event.xdata - xpress\n        dy = event.ydata - ypress\n\n        self.rect.set_x(x0 + dx)\n        self.rect.set_y(y0 + dy)\n\n        self.rect.figure.canvas.draw()\n\n    def on_release(self, event):\n        'on release we reset the press data'\n        self.press = None\n        self.rect.figure.canvas.draw()\n\n    def disconnect(self):\n        'disconnect all the stored connection ids'\n        self.rect.figure.canvas.mpl_disconnect(self.cidpress)\n        self.rect.figure.canvas.mpl_disconnect(self.cidrelease)\n        self.rect.figure.canvas.mpl_disconnect(self.cidmotion)\n\n\nif __name__ == '__main__':\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    rects = ax.bar(range(10), 20 * np.random.rand(10))\n    drs = []\n    for rect in rects:\n        dr = DraggableRectangle(rect)\n        dr.connect()\n        drs.append(dr)\n\n    plt.show()\n\n\nGUI\u306e\u30b3\u30fc\u30c9\u3068\u3057\u3066\u306f\u7834\u683c\u306e\u884c\u6570\u306e\u5c11\u306a\u3055\u3067\u5b9f\u88c5\u304c\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3068\u601d\u3046\u3002\u3053\u306e\u3088\u3046\u306aGUI\u306b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3084\u30dc\u30bf\u30f3\u3068\u3044\u3063\u305fGUI\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u914d\u7f6e\u3057\u305f\u3044\u3068\u601d\u3046\u3068\u3001Qt\u3092\u4f7f\u3063\u305fUI\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u308a\u305f\u304f\u306a\u308b\u3002matplotlib\u3082\u5185\u90e8\u3067Qt\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53e9\u3044\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\u3001\u3053\u306e\u9023\u643a\u306f\u697d\u306b\u601d\u3048\u308b\u304c\u3001\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u306a\u308b\u3068\u3001\u8272\u3005\u3068\u969c\u5bb3\u304c\u51fa\u3066\u304f\u308b\u3002\u305d\u3053\u3067\u3001PySide\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3063\u3066\u540c\u3058\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3092\u8a66\u307f\u308b\u3002\n\u305d\u306e\u7d50\u679c\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3060\u3002\n\ndraggable_rectangle_with_pyside.py\n#!/usr/bin/env python\n# coding: utf-8\n\nimport matplotlib\nmatplotlib.rcParams['backend.qt4'] = 'PySide'\nmatplotlib.use('Qt4Agg')\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom matplotlib.backends.backend_qt4agg \\\n    import FigureCanvasQTAgg as FigureCanvas\nfrom PySide.QtGui import QApplication\nfrom PySide.QtGui import QMainWindow\nfrom PySide.QtCore import Qt\n\n\nclass DraggableRectangle(object):\n    def __init__(self, rect):\n        self.rect = rect\n        self.press = None\n\n    def connect(self):\n        'connect to all the events we need'\n        self.cidpress = self.rect.figure.canvas.mpl_connect(\n            'button_press_event', self.on_press)\n        self.cidrelease = self.rect.figure.canvas.mpl_connect(\n            'button_release_event', self.on_release)\n        self.cidmotion = self.rect.figure.canvas.mpl_connect(\n            'motion_notify_event', self.on_motion)\n\n    def on_press(self, event):\n        '''\n        on button press we will see if the mouse is over us and store some data\n        '''\n        if event.inaxes != self.rect.axes:\n            return\n\n        contains, attrd = self.rect.contains(event)\n        if not contains:\n            return\n        print 'event contains', self.rect.xy\n        x0, y0 = self.rect.xy\n        self.press = x0, y0, event.xdata, event.ydata\n\n    def on_motion(self, event):\n        'on motion we will move the rect if the mouse is over us'\n        if self.press is None:\n            return\n        if event.inaxes != self.rect.axes:\n            return\n        x0, y0, xpress, ypress = self.press\n        dx = event.xdata - xpress\n        dy = event.ydata - ypress\n\n        self.rect.set_x(x0 + dx)\n        self.rect.set_y(y0 + dy)\n\n        self.rect.figure.canvas.draw()\n\n    def on_release(self, event):\n        'on release we reset the press data'\n        self.press = None\n        self.rect.figure.canvas.draw()\n\n    def disconnect(self):\n        'disconnect all the stored connection ids'\n        self.rect.figure.canvas.mpl_disconnect(self.cidpress)\n        self.rect.figure.canvas.mpl_disconnect(self.cidrelease)\n        self.rect.figure.canvas.mpl_disconnect(self.cidmotion)\n\n\nif __name__ == '__main__':\n    import sys\n\n    app = QApplication.instance()\n    if app is None:\n        app = QApplication(sys.argv)\n\n    window = QMainWindow()\n    fig = plt.figure()\n    canvas = FigureCanvas(fig)\n    ax = fig.add_subplot(111)\n    rects = ax.bar(range(10), 20 * np.random.rand(10))\n    drs = []\n    for rect in rects:\n        dr = DraggableRectangle(rect)\n        dr.connect()\n        drs.append(dr)\n\n    #plt.show()\n    canvas.setFocusPolicy(Qt.StrongFocus)\n    canvas.setFocus()\n    window.setCentralWidget(canvas)\n\n    window.show()\n\n    app.exec_()\n\n\n\u30dd\u30a4\u30f3\u30c8\u306f\nimport matplotlib\nmatplotlib.rcParams['backend.qt4'] = 'PySide'\nmatplotlib.use('Qt4Agg')\n\n\u306e\u90e8\u5206\u3067\u3001Qt, PySide\u3092\u4f7f\u3046\u3053\u3068\u660e\u793a\u3059\u308b\u3053\u3068\u3068\u3001\nif __name__ == '__main__':\n    import sys\n\n    app = QApplication.instance()\n    if app is None:\n        app = QApplication(sys.argv)\n\n    window = QMainWindow()\n    fig = plt.figure()\n    canvas = FigureCanvas(fig)\n    ax = fig.add_subplot(111)\n    rects = ax.bar(range(10), 20 * np.random.rand(10))\n    drs = []\n    for rect in rects:\n        dr = DraggableRectangle(rect)\n        dr.connect()\n        drs.append(dr)\n\n    #plt.show()\n    canvas.setFocusPolicy(Qt.StrongFocus)\n    canvas.setFocus()\n    window.setCentralWidget(canvas)\n\n    window.show()\n\n    app.exec_()\n\n\u306e\u90e8\u5206\u3067\u3001Figure\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092FigureCanvas\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u53d6\u308a\u8fbc\u3080\u3053\u3068\u3067\u3042\u308b\u3002\n\n# \u306f\u3058\u3081\u306b\n\nPython\u306f\u56fa\u5b9a\u306eGUI\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u306a\u304f\u3001\u3044\u304f\u3064\u304b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u4e2d\u304b\u3089\u3001\u81ea\u5206\u306e\u76ee\u7684\u306b\u5408\u3063\u305f\u3082\u306e\u3092\u4f7f\u3046\u3002\u5358\u4f53\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3060\u3051\u4f7f\u3063\u3066\u3044\u308b\u5206\u306b\u306f\u69cb\u308f\u306a\u3044\u304c\u3001\u8907\u6570\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3046\u3068\u306a\u308b\u3068\u5fc5\u305a\u3068\u8a00\u3063\u3066\u3088\u3044\u307b\u3069\u7af6\u5408\u304c\u8d77\u304d\u308b\u3002\u3053\u306e\u30da\u30fc\u30b8\u306f\u305d\u306e\u4e2d\u3067\u3082\u3001PySide\u3068matplotlib\u306e\u9023\u643a\u306b\u3064\u3044\u3066\u306e\u30ea\u30de\u30a4\u30f3\u30c0\u3067\u3042\u308b\u3002\n\n# \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nPySide\u306fQt\u306ePython\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3067\u3042\u308b\u3002Python\u306b\u4ed8\u5c5e\u3057\u3066\u3044\u308bTkinter(GUI\u30e9\u30a4\u30d6\u30e9\u30ea)\u306e\u4ee3\u308f\u308a\u3068\u3057\u3066\u7528\u3044\u3089\u308c\u308b\u3002PyQt4\u3068\u60a9\u3080\u3068\u3053\u308d\u3060\u304c\u3001Mac\u306b\u304a\u3044\u3066\u306fPySite\u306e\u65b9\u304c\u9065\u304b\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u697d\u3067\u3042\u308b\u3002\u5177\u4f53\u7684\u306b\u306fbrew\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308c\u3070\u826f\u3044\n\n```\n$ brew intall pyside\n```\n\n# PySide\u3068matplotlib\u306e\u9023\u643a\n\nmatplotlib\u306fGUI\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3046\u306b\u306f\u5c11\u3057\u8a9e\u5f0a\u304c\u3042\u308b\u304c\u3001\u30ad\u30fc\u30a4\u30d9\u30f3\u30c8\u306a\u3069\u306e\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u3067\u30b0\u30e9\u30d5\u306e\u9077\u79fb\u3092\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u67d4\u8edf\u3067\u3001\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b\u3002\u4f8b\u3048\u3070\u3001\u68d2\u30b0\u30e9\u30d5\u3092\u30c9\u30e9\u30c3\u30b0\u30a2\u30f3\u30c9\u30c9\u30ed\u30c3\u30d7\u3067\u79fb\u52d5\u3055\u305b\u308b\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n```draggable_rectangle.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n\nclass DraggableRectangle:\n    def __init__(self, rect):\n        self.rect = rect\n        self.press = None\n\n    def connect(self):\n        'connect to all the events we need'\n        self.cidpress = self.rect.figure.canvas.mpl_connect(\n            'button_press_event', self.on_press)\n        self.cidrelease = self.rect.figure.canvas.mpl_connect(\n            'button_release_event', self.on_release)\n        self.cidmotion = self.rect.figure.canvas.mpl_connect(\n            'motion_notify_event', self.on_motion)\n\n    def on_press(self, event):\n        '''\n        on button press we will see if the mouse is over us and store some data\n        '''\n        if event.inaxes != self.rect.axes:\n            return\n\n        contains, attrd = self.rect.contains(event)\n        if not contains:\n            return\n        print 'event contains', self.rect.xy\n        x0, y0 = self.rect.xy\n        self.press = x0, y0, event.xdata, event.ydata\n\n    def on_motion(self, event):\n        'on motion we will move the rect if the mouse is over us'\n        if self.press is None:\n            return\n        if event.inaxes != self.rect.axes:\n            return\n        x0, y0, xpress, ypress = self.press\n        dx = event.xdata - xpress\n        dy = event.ydata - ypress\n\n        self.rect.set_x(x0 + dx)\n        self.rect.set_y(y0 + dy)\n\n        self.rect.figure.canvas.draw()\n\n    def on_release(self, event):\n        'on release we reset the press data'\n        self.press = None\n        self.rect.figure.canvas.draw()\n\n    def disconnect(self):\n        'disconnect all the stored connection ids'\n        self.rect.figure.canvas.mpl_disconnect(self.cidpress)\n        self.rect.figure.canvas.mpl_disconnect(self.cidrelease)\n        self.rect.figure.canvas.mpl_disconnect(self.cidmotion)\n\n\nif __name__ == '__main__':\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    rects = ax.bar(range(10), 20 * np.random.rand(10))\n    drs = []\n    for rect in rects:\n        dr = DraggableRectangle(rect)\n        dr.connect()\n        drs.append(dr)\n\n    plt.show()\n```\n\nGUI\u306e\u30b3\u30fc\u30c9\u3068\u3057\u3066\u306f\u7834\u683c\u306e\u884c\u6570\u306e\u5c11\u306a\u3055\u3067\u5b9f\u88c5\u304c\u3067\u304d\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3068\u601d\u3046\u3002\u3053\u306e\u3088\u3046\u306aGUI\u306b\u30c6\u30ad\u30b9\u30c8\u30dc\u30c3\u30af\u30b9\u3084\u30dc\u30bf\u30f3\u3068\u3044\u3063\u305fGUI\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u914d\u7f6e\u3057\u305f\u3044\u3068\u601d\u3046\u3068\u3001Qt\u3092\u4f7f\u3063\u305fUI\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u308a\u305f\u304f\u306a\u308b\u3002matplotlib\u3082\u5185\u90e8\u3067Qt\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53e9\u3044\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\u3001\u3053\u306e\u9023\u643a\u306f\u697d\u306b\u601d\u3048\u308b\u304c\u3001\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u306a\u308b\u3068\u3001\u8272\u3005\u3068\u969c\u5bb3\u304c\u51fa\u3066\u304f\u308b\u3002\u305d\u3053\u3067\u3001PySide\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3063\u3066\u540c\u3058\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u3092\u8a66\u307f\u308b\u3002\n\n\u305d\u306e\u7d50\u679c\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3060\u3002\n\n```draggable_rectangle_with_pyside.py\n#!/usr/bin/env python\n# coding: utf-8\n\nimport matplotlib\nmatplotlib.rcParams['backend.qt4'] = 'PySide'\nmatplotlib.use('Qt4Agg')\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom matplotlib.backends.backend_qt4agg \\\n    import FigureCanvasQTAgg as FigureCanvas\nfrom PySide.QtGui import QApplication\nfrom PySide.QtGui import QMainWindow\nfrom PySide.QtCore import Qt\n\n\nclass DraggableRectangle(object):\n    def __init__(self, rect):\n        self.rect = rect\n        self.press = None\n\n    def connect(self):\n        'connect to all the events we need'\n        self.cidpress = self.rect.figure.canvas.mpl_connect(\n            'button_press_event', self.on_press)\n        self.cidrelease = self.rect.figure.canvas.mpl_connect(\n            'button_release_event', self.on_release)\n        self.cidmotion = self.rect.figure.canvas.mpl_connect(\n            'motion_notify_event', self.on_motion)\n\n    def on_press(self, event):\n        '''\n        on button press we will see if the mouse is over us and store some data\n        '''\n        if event.inaxes != self.rect.axes:\n            return\n\n        contains, attrd = self.rect.contains(event)\n        if not contains:\n            return\n        print 'event contains', self.rect.xy\n        x0, y0 = self.rect.xy\n        self.press = x0, y0, event.xdata, event.ydata\n\n    def on_motion(self, event):\n        'on motion we will move the rect if the mouse is over us'\n        if self.press is None:\n            return\n        if event.inaxes != self.rect.axes:\n            return\n        x0, y0, xpress, ypress = self.press\n        dx = event.xdata - xpress\n        dy = event.ydata - ypress\n\n        self.rect.set_x(x0 + dx)\n        self.rect.set_y(y0 + dy)\n\n        self.rect.figure.canvas.draw()\n\n    def on_release(self, event):\n        'on release we reset the press data'\n        self.press = None\n        self.rect.figure.canvas.draw()\n\n    def disconnect(self):\n        'disconnect all the stored connection ids'\n        self.rect.figure.canvas.mpl_disconnect(self.cidpress)\n        self.rect.figure.canvas.mpl_disconnect(self.cidrelease)\n        self.rect.figure.canvas.mpl_disconnect(self.cidmotion)\n\n\nif __name__ == '__main__':\n    import sys\n\n    app = QApplication.instance()\n    if app is None:\n        app = QApplication(sys.argv)\n\n    window = QMainWindow()\n    fig = plt.figure()\n    canvas = FigureCanvas(fig)\n    ax = fig.add_subplot(111)\n    rects = ax.bar(range(10), 20 * np.random.rand(10))\n    drs = []\n    for rect in rects:\n        dr = DraggableRectangle(rect)\n        dr.connect()\n        drs.append(dr)\n\n    #plt.show()\n    canvas.setFocusPolicy(Qt.StrongFocus)\n    canvas.setFocus()\n    window.setCentralWidget(canvas)\n\n    window.show()\n\n    app.exec_()\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f\n\n```\nimport matplotlib\nmatplotlib.rcParams['backend.qt4'] = 'PySide'\nmatplotlib.use('Qt4Agg')\n```\n\n\u306e\u90e8\u5206\u3067\u3001Qt, PySide\u3092\u4f7f\u3046\u3053\u3068\u660e\u793a\u3059\u308b\u3053\u3068\u3068\u3001\n\n```\nif __name__ == '__main__':\n    import sys\n\n    app = QApplication.instance()\n    if app is None:\n        app = QApplication(sys.argv)\n\n    window = QMainWindow()\n    fig = plt.figure()\n    canvas = FigureCanvas(fig)\n    ax = fig.add_subplot(111)\n    rects = ax.bar(range(10), 20 * np.random.rand(10))\n    drs = []\n    for rect in rects:\n        dr = DraggableRectangle(rect)\n        dr.connect()\n        drs.append(dr)\n\n    #plt.show()\n    canvas.setFocusPolicy(Qt.StrongFocus)\n    canvas.setFocus()\n    window.setCentralWidget(canvas)\n\n    window.show()\n\n    app.exec_()\n```\n\n\u306e\u90e8\u5206\u3067\u3001Figure\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092FigureCanvas\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u53d6\u308a\u8fbc\u3080\u3053\u3068\u3067\u3042\u308b\u3002\n", "tags": ["matplotlib", "Mac", "PySide"]}