{"context": "\u3053\u306e\u8a18\u4e8b\u306fMaya-Python\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2016\u306e12\u670820\u65e5\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u306f\u3058\u3081\u306b\nmaya.cmds \u3067\u306f\u3001\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3059\u30d5\u30e9\u30b0\u3092 \u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u3068\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u306e\uff12\u3064\u306e\u65b9\u6cd5\u3067\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3048\u3070maya.cmds.optionMenu\u30b3\u30de\u30f3\u30c9\u3067\u3001\u540c\u3058\u610f\u5473\u306e\u51e6\u7406\u3092\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u3068\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u3067\u66f8\u304f\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n# \u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\ncmds.optionMenu(name, en=True, l=\"top_node:\",\n                vis=True, ann=u\"\u30c8\u30c3\u30d7\u30ce\u30fc\u30c9\u3092\u9078\u629e\", w=200,\n                cc=partial(self.change_topnode, name))\n\n# \u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\ncmds.optionMenu(name, enable=True, label=\"top_node:\",\n                visible=True, annotation=u\"\u30c8\u30c3\u30d7\u30ce\u30fc\u30c9\u3092\u9078\u629e\", width=200,\n                changeCommand=partial(self.change_topnode, name))\n\n\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u306e\u65b9\u304c\u30b3\u30fc\u30c9\u304c\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u306a\u308b\u306e\u3067\u3001\u6163\u308c\u305f\u4eba\u306b\u306f\u3053\u3061\u3089\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305f\u3060\u3001\u79c1\u306e\u3088\u3046\u306a maya.cmds \u521d\u5fc3\u8005\u306b\u3068\u3063\u3066\u306f\u3001\u4ed6\u4eba\u306e\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3092\u5f15\u304d\u7d99\u3050\u6642\u3084\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u969b\u306b\u3001\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u306e\u30d5\u30e9\u30b0\u304c\u767b\u5834\u3059\u308b\u5ea6\u306bAutodesk\u306eMayaPython\u30b3\u30de\u30f3\u30c9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u898b\u308b\u7fbd\u76ee\u306b\u306a\u308a\u3001\u52b9\u7387\u304c\u60aa\u3044\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u306e\u30d5\u30e9\u30b0\u3092\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u306b\u4e00\u62ec\u7f6e\u63db\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u3063\u3066\u3057\u307e\u304a\u3046\u3068\u3044\u3046\u306e\u304c\u4eca\u56de\u306e\u304a\u8a71\u3067\u3059\u3002\n\n\u74b0\u5883\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u52d5\u4f5c\u78ba\u8a8d\u306f\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u884c\u3044\u307e\u3057\u305f\u3002\n\nmac\npython2.7 (mayapy)\nMaya 2015\n\n\n\u6e96\u5099\nastor\u3068\u3044\u3046\u5916\u90e8\u30e2\u30b8\u30e5\u30fc\u30eb\u3060\u3051\u5fc5\u8981\u3067\u3059\u306e\u3067\u3001pip \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\npip install astor\n\n\nAST(\u62bd\u8c61\u69cb\u6587\u6728)\u3092\u4f7f\u3046\nmaya.cmds\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b\u4f7f\u7528\u3055\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u3092\u89e3\u6790\u30fb\u7f6e\u63db\u3092\u884c\u3046\u305f\u3081\u3001AST(\u62bd\u8c61\u69cb\u6587\u6728)\u3092\u4f7f\u3044\u307e\u3059\u3002\npython \u6a19\u6e96\u306b\u542b\u307e\u308c\u308b ast\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3048\u3070\u3001\u89e3\u6790\u3057\u305f\u3044\u30b3\u30fc\u30c9\u3092parse\u3059\u308b\u3060\u3051\u3067AST\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\nimport ast\n\n\nif __name__ == '__main__':\n\n    example = \"\"\"def fake(x):\n        import maya.cmds as cmds\n        cmds.optionMenu(name, q=True, v=True)\n        return 0\n    \"\"\"\n\n    tree = ast.parse(example)\n    print ast.dump(tree)\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nModule(body=[FunctionDef(name='fake', args=arguments(args=[Name(id='x', ctx=Param())], \nvararg=None, kwarg=None, defaults=[]), body=[Import(names=[alias(name='maya.cmds', \nasname='cmds')]), Expr(value=Call(func=Attribute(value=Name(id='cmds', ctx=Load()), \nattr='optionMenu', ctx=Load()), args=[Name(id='name', ctx=Load())], \nkeywords=[keyword(arg='q', value=Name(id='True', ctx=Load())), keyword(arg='v', \nvalue=Name(id='True', ctx=Load()))], starargs=None, kwargs=None)), \nReturn(value=Num(n=0))], decorator_list=[])])\n\n\u3061\u3087\u3063\u3068\u9577\u304f\u3066\u8aad\u307f\u3065\u3089\u3044\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3001\n\nid='cmds'\nattr='optionMenu'\nkeyword(arg='q')\nkeyword(arg='v')\n\n\u3042\u305f\u308a\u306e\u60c5\u5831\u304c\u53d6\u5f97\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001maya.cmds \u306e\u3069\u306e\u30b3\u30de\u30f3\u30c9\u3092\u3001\u3069\u3046\u3044\u3063\u305f\u30d5\u30e9\u30b0\u5f15\u6570\u3067\u5b9f\u884c\u3057\u3066\u3044\u308b\u306e\u304b\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\nmayapy \u3092\u4f7f\u3063\u3066 help()\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\n\u30b3\u30fc\u30c9\u5185\u3067\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306fAST\u3092\u4f7f\u3048\u3070\u53d6\u5f97\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u306e\u3067\u3001\u6b21\u306f\u5404maya.cmds\u306e\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u3068\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u306e\u5bfe\u5fdc\u8868\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nmaya.cmds.help()\u306b\u30b3\u30de\u30f3\u30c9\u540d\u3092\u6e21\u3059\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u3068\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nimport maya.cmds\nprint(maya.cmds.help(\"optionMenu\"))\n\n-----------------------------------------------------\n\u8981\u7d04: optionMenu [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -acc -alwaysCallChangeCommand \n -ann -annotation               String\n -bgc -backgroundColor          Float Float Float\n  -cc -changeCommand            Script\n...(\u7701\u7565)\n\n\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u3066 \u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u3092key\u3001\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u3092value\u3068\u3057\u305f\u8f9e\u66f8(dict)\u3092\u52d5\u7684\u306b\u751f\u6210\u3057\u307e\u3059\u3002\n\nhelp_regex.py\nmethod_name_dict = {}\n\nhelp_messages = cmds.help(method_name)\nmethod_name_dict[method_name] = {}\n\nfor line in help_messages.split(os.linesep):\n    arg_names = re.search(r\"-([a-zA-Z0-9]+) -([a-zA-Z0-9]+)\", line)\n    if arg_names:\n        method_name_dict[method_name][arg_names.group(1)] = arg_names.group(2)\n\n\n\u3053\u3093\u306a\u611f\u3058\u306edict\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3067\u304d\u307e\u3059\n[('optionMenu', {u'en': u'enable', u'cc': u'changeCommand', u'm': u'manage', u'ann': u'annotation',  ...(\u7701\u7565)\n\n\u305f\u3060\u3057\u3001maya.cmds.help()\u30b3\u30de\u30f3\u30c9\u306f\u3001maya\u306epython\u5b9f\u884c\u74b0\u5883\u3067\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\uff08\u666e\u901a\u306b python aaa.py \u3068\u304b\u3067\u5b9f\u884c\u3057\u3066\u3082\u4f55\u3082\u8fd4\u3063\u3066\u304d\u307e\u305b\u3093\uff09\nMac\u3067\u3042\u308c\u3070\n/Applications/Autodesk/maya2015/Maya.app/Contents/bin/mayapy\nWindows\u3067\u3042\u308c\u3070\nC:\\Program Files\\Autodesk\\Maya2015\\bin\\mayapy.exe\n\u306e\u3042\u305f\u308a\u306b mayapy \u304c\u3042\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u7528\u3044\u3066python\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001help()\u30b3\u30de\u30f3\u30c9\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n/Applications/Autodesk/maya2015/Maya.app/Contents/bin/mayapy aaa.py\n\u3053\u308c\u3067\u3001\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u3092\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u306b\u7f6e\u63db\u3059\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\nast.NodeTransformer\u3067\u30ce\u30fc\u30c9\u3092\u7f6e\u63db\nAST\u306e\u5404\u8981\u7d20\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u7f6e\u304d\u63db\u3048\u305f\u308a\u524a\u9664\u3092\u3059\u308b\u306b\u306f\u3001NodeTransformer\u3092\u7528\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4eca\u56de\u306e\u3088\u3046\u306b\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057(Call)\u306e\u30ce\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u4f55\u304b\u51e6\u7406\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306f\u3001visit_Call(self, node)\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u51e6\u7406\u3092\u66f8\u304d\u307e\u3059\u3002\nclass MayaPythonShort2LongNameNodeTransformer(ast.NodeTransformer):\n    def visit_Call(self, node):\n        # \u3053\u3053\u306b\u7f6e\u63db\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u304f\n\nNodeTransformer\u3067\u30d5\u30e9\u30b0\u540d\u3092\u7f6e\u63db\u3057\u305f\u3089\u3001\u6700\u5f8c\u306bastor.to_source()\u3067\u518d\u5ea6python\u30b3\u30fc\u30c9\u306b\u3082\u3069\u3057\u307e\u3059\u3002\nprint(astor.to_source(tree).decode(\"unicode-escape\"))\n\n\n\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0 -> \u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u7f6e\u63db\u30b9\u30af\u30ea\u30d7\u30c8\n\u4ee5\u4e0a\u306e\u51e6\u7406\u3092\u9069\u5f53\u306b\u307e\u3068\u3081\u305f\u306e\u304c\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\nmaya_cmds_name_converter.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\nimport os\nimport re\nimport ast\nimport astor\nimport maya.standalone\nimport maya.cmds as cmds\n\n\nclass MayaPythonShort2LongNameNodeTransformer(ast.NodeTransformer):\n    def __init__(self):\n        self.method_name_dict = {}\n\n    @staticmethod\n    def is_maya_cmds_func(node):\n        return hasattr(node, \"func\") and hasattr(node.func, \"value\") and hasattr(node.func.value, \"id\") and \\\n            node.func.value.id == \"cmds\"\n\n    def visit_Call(self, node):\n\n        if self.is_maya_cmds_func(node):\n            method_name = node.func.attr\n\n            if not self.method_name_dict.get(method_name):\n                # short_name \u3068 long_name \u306e\u5bfe\u5fdcdict\u3092\u4f5c\u308b\n                try:\n                    help_messages = cmds.help(method_name)\n                except RuntimeError:\n                    # print(u\"help()\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u306a\u3044\u30b3\u30de\u30f3\u30c9\u3067\u3059: \" + method_name)\n                    return node\n\n                self.method_name_dict[method_name] = {}\n                for line in help_messages.split(os.linesep):\n                    arg_names = re.search(r\"-([a-zA-Z0-9]+) -([a-zA-Z0-9]+)\", line)\n                    if arg_names:\n                        self.method_name_dict[method_name][arg_names.group(1)] = arg_names.group(2)\n\n            for keyword in node.keywords:\n                if keyword.arg in {\"q\", \"e\", \"c\", \"m\"}:\n                    # \u57fa\u672c\u30d5\u30e9\u30b0\u306e\u5834\u5408\u306f\u7121\u8996\n                    continue\n\n                long_name = self.method_name_dict[method_name].get(keyword.arg)\n                if long_name:\n                    if long_name == \"import\":\n                        # \u3053\u306e\u5834\u5408\u306fpython\u7684\u306b\u304a\u304b\u3057\u304f\u306a\u308b\n                        continue\n\n                    # print(keyword.arg + u\"\u3092\" + long_name + u\"\u306b\u5909\u63db\u3057\u307e\u3059\")\n                    keyword.arg = long_name\n\n        return node\n\n\nif __name__ == '__main__':\n    maya.standalone.initialize(name='python')\n\n    # \u30c6\u30b9\u30c8\u7528\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n    example = \"\"\"def fake(x):\n        import maya.cmds as cmds\n        cmds.optionMenu(name, en=True, l=\"top_node:\",\n                vis=True, ann=u\"\u30c8\u30c3\u30d7\u30ce\u30fc\u30c9\u3092\u9078\u629e\", w=200,\n                cc=partial(self.change_topnode, name))\n        return top_node\n    \"\"\"\n\n    tree = ast.parse(example)\n    tree = MayaPythonShort2LongNameNodeTransformer().visit(tree)\n\n    # after convert python code\n    print(astor.to_source(tree).decode(\"unicode-escape\"))\n\n    if float(cmds.about(v=True)) >= 2016:\n        maya.standalone.uninitialize()\n\n\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u5192\u982d\u3067\u7d39\u4ecb\u3057\u305f\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u30d5\u30e9\u30b0\u306e\u30b3\u30de\u30f3\u30c9\u304c\u3001\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u306b\u7f6e\u63db\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\u7f6e\u63db\u524d\ndef fake(x):\n        import maya.cmds as cmds\n        cmds.optionMenu(name, en=True, l=\"top_node:\",\n                vis=True, ann=u\"\u30c8\u30c3\u30d7\u30ce\u30fc\u30c9\u3092\u9078\u629e\", w=200,\n                cc=partial(self.change_topnode, name))\n        return top_node\n\n\n\n\u7f6e\u63db\u5f8c\ndef fake(x):\n    import maya.cmds as cmds\n    cmds.optionMenu(name, enable=True, label='top_node:', visible=True, annotation=u'\u30c8\u30c3\u30d7\u30ce\u30fc\u30c9\u3092\u9078\u629e', width=200, changeCommand=partial(self.change_topnode, name))\n    return top_node\n\n\n\n\u6ce8\u610f\u30fb\u5236\u9650\u4e8b\u9805\n\u3046\u307e\u304f\u3044\u3063\u305f\u3088\u3046\u306b\u898b\u3048\u305f\u306e\u3067\u3059\u304c\u3001python\u30b3\u30fc\u30c9\u3092ast.parse\u3057\u305f\u5f8c\u3001astor.to_source()\u3067python\u30b3\u30fc\u30c9\u306b\u623b\u3059\u969b\u306b\u3001\u3044\u308d\u3044\u308d\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u60c5\u5831\u304c\u5931\u308f\u308c\u307e\u3059\u3002\n\nu\"\"\" \u3053\u308c\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u6587\u5b57\u5217\u3067\u3059 \"\"\" \u304c\u3001\u5168\u3066 u`\u3053\u308c\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u6587\u5b57\u5217\u3067\u3059` \u306b\u306a\u308b\n\u6587\u306e\u9014\u4e2d\u3067\u5165\u308c\u3066\u3044\u308b\u6539\u884c\u304c\u6d88\u3048\u308b\nif not aaa:  \u304c if (not aaa): \u306e\u3088\u3046\u306b\u52dd\u624b\u306b\u30ab\u30c3\u30b3\u304c\u3064\u3051\u3089\u308c\u308b\n\u5143\u306e\u30b3\u30fc\u30c9\u5185\u306b '\\n' \u306e\u6539\u884c\u30b3\u30fc\u30c9\u3092\u793a\u3059\u6587\u5b57\u5217\u304c\u3042\u308b\u3068\u3001\u5fa9\u5143\u6642\u306b\u6539\u884c\u3068\u3057\u3066\u6271\u308f\u308c\u3066\u3057\u307e\u3046\n\n\n\u3053\u308c\u306f\u3001os.linesep\u3092\u4f7f\u3046\u3053\u3068\u3067\u56de\u907f\u3059\u308b\n\n\n\n\u306a\u306e\u3067\u79c1\u306f\u3001\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0->\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u7f6e\u63db\u5b9f\u65bd\u5f8c\u3001PyCharm\u3067AutoFormatter\u30fb\u8b66\u544a\u524a\u9664\u30fb\u7f6e\u63db\u3067\u5225\u9014\u304a\u6383\u9664\u3057\u3066\u3044\u307e\u3059\u3002\u3002\n\n\u307e\u3068\u3081\n\u6163\u308c\u3066\u304f\u308c\u3070\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u306e\u65b9\u304c\u66f8\u304d\u3084\u3059\u3044\u3057\u8aad\u307f\u3084\u3059\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001maya.cmds\u306b\u542b\u307e\u308c\u308b\u81a8\u5927\u306a\u30d5\u30e9\u30b0\u305f\u3061\u3092\u79c1\u306f\u307e\u3060\u307e\u3060\u899a\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3055\u3059\u304c\u306b l\u306flabel\u3001v\u306fvalue \u306a\u3069\u5206\u304b\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306b\u95a2\u308f\u308b\u30c1\u30fc\u30e0\u306e\u7fd2\u719f\u5ea6\u306b\u5408\u308f\u305b\u3066\u30d5\u30e9\u30b0\u540d\u306e\u30eb\u30fc\u30eb\u3092\u6c7a\u3081\u308b\u306e\u3082\u3088\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4f7f\u7528\u983b\u5ea6\u304c\u4f4e\u305d\u3046\u306a\u30d5\u30e9\u30b0\u3060\u3068\u3001\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u3092\u898b\u308c\u3070\u610f\u5473\u304c\u306a\u3093\u3068\u306a\u304f\u7406\u89e3\u3067\u304d\u307e\u3059\u304c\u3001\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u3060\u3068\u9593\u9055\u3044\u306a\u304f\u30b3\u30de\u30f3\u30c9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u9001\u308a\u306b\u306a\u308b\u3082\u306e\u304c\u3042\u308b\u306e\u3067\u3001\u6c17\u3092\u3064\u3051\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\nbsp -> beforeShowPopup\nnpm -> numberOfPopupMenus\nvcc -> visibleChangeCommand\n\u3068\u304b\u3002\n\u3053\u306e\u8a18\u4e8b\u306f[Maya-Python\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2016](http://qiita.com/advent-calendar/2016/maya-python)\u306e12\u670820\u65e5\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\n# \u306f\u3058\u3081\u306b\n\nmaya.cmds \u3067\u306f\u3001\u30b3\u30de\u30f3\u30c9\u306b\u6e21\u3059\u30d5\u30e9\u30b0\u3092 **\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18**\u3068**\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18**\u306e\uff12\u3064\u306e\u65b9\u6cd5\u3067\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3048\u3070maya.cmds.optionMenu\u30b3\u30de\u30f3\u30c9\u3067\u3001\u540c\u3058\u610f\u5473\u306e\u51e6\u7406\u3092\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u3068\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u3067\u66f8\u304f\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` \n# \u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\ncmds.optionMenu(name, en=True, l=\"top_node:\",\n                vis=True, ann=u\"\u30c8\u30c3\u30d7\u30ce\u30fc\u30c9\u3092\u9078\u629e\", w=200,\n                cc=partial(self.change_topnode, name))\n\n# \u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\ncmds.optionMenu(name, enable=True, label=\"top_node:\",\n                visible=True, annotation=u\"\u30c8\u30c3\u30d7\u30ce\u30fc\u30c9\u3092\u9078\u629e\", width=200,\n                changeCommand=partial(self.change_topnode, name))\n```\n\n\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u306e\u65b9\u304c\u30b3\u30fc\u30c9\u304c\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u306a\u308b\u306e\u3067\u3001\u6163\u308c\u305f\u4eba\u306b\u306f\u3053\u3061\u3089\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u305f\u3060\u3001\u79c1\u306e\u3088\u3046\u306a maya.cmds \u521d\u5fc3\u8005\u306b\u3068\u3063\u3066\u306f\u3001\u4ed6\u4eba\u306e\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3092\u5f15\u304d\u7d99\u3050\u6642\u3084\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u969b\u306b\u3001\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u306e\u30d5\u30e9\u30b0\u304c\u767b\u5834\u3059\u308b\u5ea6\u306b[Autodesk\u306eMayaPython\u30b3\u30de\u30f3\u30c9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](http://help.autodesk.com/cloudhelp/2016/JPN/Maya-Tech-Docs/CommandsPython/index.html)\u3092\u898b\u308b\u7fbd\u76ee\u306b\u306a\u308a\u3001\u52b9\u7387\u304c\u60aa\u3044\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u3001\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u306e\u30d5\u30e9\u30b0\u3092\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u306b\u4e00\u62ec\u7f6e\u63db\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u3063\u3066\u3057\u307e\u304a\u3046\u3068\u3044\u3046\u306e\u304c\u4eca\u56de\u306e\u304a\u8a71\u3067\u3059\u3002\n\n\n# \u74b0\u5883\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u52d5\u4f5c\u78ba\u8a8d\u306f\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u884c\u3044\u307e\u3057\u305f\u3002\n\n- mac\n- python2.7 (mayapy)\n- Maya 2015\n\n# \u6e96\u5099\n\nastor\u3068\u3044\u3046\u5916\u90e8\u30e2\u30b8\u30e5\u30fc\u30eb\u3060\u3051\u5fc5\u8981\u3067\u3059\u306e\u3067\u3001pip \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n```\npip install astor\n```\n\n# AST(\u62bd\u8c61\u69cb\u6587\u6728)\u3092\u4f7f\u3046\nmaya.cmds\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b\u4f7f\u7528\u3055\u308c\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u540d\u3092\u89e3\u6790\u30fb\u7f6e\u63db\u3092\u884c\u3046\u305f\u3081\u3001AST(\u62bd\u8c61\u69cb\u6587\u6728)\u3092\u4f7f\u3044\u307e\u3059\u3002\npython \u6a19\u6e96\u306b\u542b\u307e\u308c\u308b ast\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3048\u3070\u3001\u89e3\u6790\u3057\u305f\u3044\u30b3\u30fc\u30c9\u3092parse\u3059\u308b\u3060\u3051\u3067AST\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n```\nimport ast\n\n\nif __name__ == '__main__':\n\n    example = \"\"\"def fake(x):\n        import maya.cmds as cmds\n        cmds.optionMenu(name, q=True, v=True)\n        return 0\n    \"\"\"\n\n    tree = ast.parse(example)\n    print ast.dump(tree)\n```\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```\nModule(body=[FunctionDef(name='fake', args=arguments(args=[Name(id='x', ctx=Param())], \nvararg=None, kwarg=None, defaults=[]), body=[Import(names=[alias(name='maya.cmds', \nasname='cmds')]), Expr(value=Call(func=Attribute(value=Name(id='cmds', ctx=Load()), \nattr='optionMenu', ctx=Load()), args=[Name(id='name', ctx=Load())], \nkeywords=[keyword(arg='q', value=Name(id='True', ctx=Load())), keyword(arg='v', \nvalue=Name(id='True', ctx=Load()))], starargs=None, kwargs=None)), \nReturn(value=Num(n=0))], decorator_list=[])])\n```\n\n\u3061\u3087\u3063\u3068\u9577\u304f\u3066\u8aad\u307f\u3065\u3089\u3044\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3001\n\n- id='cmds'\n- attr='optionMenu'\n- keyword(arg='q')\n- keyword(arg='v')\n\n\u3042\u305f\u308a\u306e\u60c5\u5831\u304c\u53d6\u5f97\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u91cd\u8981\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001maya.cmds \u306e\u3069\u306e\u30b3\u30de\u30f3\u30c9\u3092\u3001\u3069\u3046\u3044\u3063\u305f\u30d5\u30e9\u30b0\u5f15\u6570\u3067\u5b9f\u884c\u3057\u3066\u3044\u308b\u306e\u304b\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\n# mayapy \u3092\u4f7f\u3063\u3066 help()\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\n\n\u30b3\u30fc\u30c9\u5185\u3067\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306fAST\u3092\u4f7f\u3048\u3070\u53d6\u5f97\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u306e\u3067\u3001\u6b21\u306f\u5404maya.cmds\u306e\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u3068\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u306e\u5bfe\u5fdc\u8868\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nmaya.cmds.help()\u306b\u30b3\u30de\u30f3\u30c9\u540d\u3092\u6e21\u3059\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u3068\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```\nimport maya.cmds\nprint(maya.cmds.help(\"optionMenu\"))\n\n-----------------------------------------------------\n\u8981\u7d04: optionMenu [flags] [String]\nFlags:\n   -e -edit\n   -q -query\n -acc -alwaysCallChangeCommand \n -ann -annotation               String\n -bgc -backgroundColor          Float Float Float\n  -cc -changeCommand            Script\n...(\u7701\u7565)\n```\n\n\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u3066 \u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u3092key\u3001\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u3092value\u3068\u3057\u305f\u8f9e\u66f8(dict)\u3092\u52d5\u7684\u306b\u751f\u6210\u3057\u307e\u3059\u3002\n\n```help_regex.py\nmethod_name_dict = {}\n\nhelp_messages = cmds.help(method_name)\nmethod_name_dict[method_name] = {}\n\nfor line in help_messages.split(os.linesep):\n    arg_names = re.search(r\"-([a-zA-Z0-9]+) -([a-zA-Z0-9]+)\", line)\n    if arg_names:\n        method_name_dict[method_name][arg_names.group(1)] = arg_names.group(2)\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306edict\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3067\u304d\u307e\u3059\n\n```\n[('optionMenu', {u'en': u'enable', u'cc': u'changeCommand', u'm': u'manage', u'ann': u'annotation',  ...(\u7701\u7565)\n```\n\n\u305f\u3060\u3057\u3001maya.cmds.help()\u30b3\u30de\u30f3\u30c9\u306f\u3001maya\u306epython\u5b9f\u884c\u74b0\u5883\u3067\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\uff08\u666e\u901a\u306b python aaa.py \u3068\u304b\u3067\u5b9f\u884c\u3057\u3066\u3082\u4f55\u3082\u8fd4\u3063\u3066\u304d\u307e\u305b\u3093\uff09\n\nMac\u3067\u3042\u308c\u3070\n`/Applications/Autodesk/maya2015/Maya.app/Contents/bin/mayapy`\nWindows\u3067\u3042\u308c\u3070\n`C:\\Program Files\\Autodesk\\Maya2015\\bin\\mayapy.exe`\n\n\u306e\u3042\u305f\u308a\u306b mayapy \u304c\u3042\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u7528\u3044\u3066python\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001help()\u30b3\u30de\u30f3\u30c9\u306e\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n`/Applications/Autodesk/maya2015/Maya.app/Contents/bin/mayapy aaa.py`\n\n\u3053\u308c\u3067\u3001\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u3092\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u306b\u7f6e\u63db\u3059\u308b\u6e96\u5099\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n# ast.NodeTransformer\u3067\u30ce\u30fc\u30c9\u3092\u7f6e\u63db\n\nAST\u306e\u5404\u8981\u7d20\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\u7f6e\u304d\u63db\u3048\u305f\u308a\u524a\u9664\u3092\u3059\u308b\u306b\u306f\u3001NodeTransformer\u3092\u7528\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4eca\u56de\u306e\u3088\u3046\u306b\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057(Call)\u306e\u30ce\u30fc\u30c9\u306b\u5bfe\u3057\u3066\u4f55\u304b\u51e6\u7406\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306f\u3001visit_Call(self, node)\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u51e6\u7406\u3092\u66f8\u304d\u307e\u3059\u3002\n\n```\nclass MayaPythonShort2LongNameNodeTransformer(ast.NodeTransformer):\n    def visit_Call(self, node):\n        # \u3053\u3053\u306b\u7f6e\u63db\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u304f\n```\n\nNodeTransformer\u3067\u30d5\u30e9\u30b0\u540d\u3092\u7f6e\u63db\u3057\u305f\u3089\u3001\u6700\u5f8c\u306bastor.to_source()\u3067\u518d\u5ea6python\u30b3\u30fc\u30c9\u306b\u3082\u3069\u3057\u307e\u3059\u3002\n\n```\nprint(astor.to_source(tree).decode(\"unicode-escape\"))\n```\n\n# \u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0 -> \u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u7f6e\u63db\u30b9\u30af\u30ea\u30d7\u30c8\n\n\u4ee5\u4e0a\u306e\u51e6\u7406\u3092\u9069\u5f53\u306b\u307e\u3068\u3081\u305f\u306e\u304c\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```python:maya_cmds_name_converter.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, division, print_function, unicode_literals\nimport os\nimport re\nimport ast\nimport astor\nimport maya.standalone\nimport maya.cmds as cmds\n\n\nclass MayaPythonShort2LongNameNodeTransformer(ast.NodeTransformer):\n    def __init__(self):\n        self.method_name_dict = {}\n\n    @staticmethod\n    def is_maya_cmds_func(node):\n        return hasattr(node, \"func\") and hasattr(node.func, \"value\") and hasattr(node.func.value, \"id\") and \\\n            node.func.value.id == \"cmds\"\n\n    def visit_Call(self, node):\n\n        if self.is_maya_cmds_func(node):\n            method_name = node.func.attr\n\n            if not self.method_name_dict.get(method_name):\n                # short_name \u3068 long_name \u306e\u5bfe\u5fdcdict\u3092\u4f5c\u308b\n                try:\n                    help_messages = cmds.help(method_name)\n                except RuntimeError:\n                    # print(u\"help()\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u306a\u3044\u30b3\u30de\u30f3\u30c9\u3067\u3059: \" + method_name)\n                    return node\n\n                self.method_name_dict[method_name] = {}\n                for line in help_messages.split(os.linesep):\n                    arg_names = re.search(r\"-([a-zA-Z0-9]+) -([a-zA-Z0-9]+)\", line)\n                    if arg_names:\n                        self.method_name_dict[method_name][arg_names.group(1)] = arg_names.group(2)\n\n            for keyword in node.keywords:\n                if keyword.arg in {\"q\", \"e\", \"c\", \"m\"}:\n                    # \u57fa\u672c\u30d5\u30e9\u30b0\u306e\u5834\u5408\u306f\u7121\u8996\n                    continue\n\n                long_name = self.method_name_dict[method_name].get(keyword.arg)\n                if long_name:\n                    if long_name == \"import\":\n                        # \u3053\u306e\u5834\u5408\u306fpython\u7684\u306b\u304a\u304b\u3057\u304f\u306a\u308b\n                        continue\n\n                    # print(keyword.arg + u\"\u3092\" + long_name + u\"\u306b\u5909\u63db\u3057\u307e\u3059\")\n                    keyword.arg = long_name\n\n        return node\n\n\nif __name__ == '__main__':\n    maya.standalone.initialize(name='python')\n\n    # \u30c6\u30b9\u30c8\u7528\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n    example = \"\"\"def fake(x):\n        import maya.cmds as cmds\n        cmds.optionMenu(name, en=True, l=\"top_node:\",\n                vis=True, ann=u\"\u30c8\u30c3\u30d7\u30ce\u30fc\u30c9\u3092\u9078\u629e\", w=200,\n                cc=partial(self.change_topnode, name))\n        return top_node\n    \"\"\"\n\n    tree = ast.parse(example)\n    tree = MayaPythonShort2LongNameNodeTransformer().visit(tree)\n\n    # after convert python code\n    print(astor.to_source(tree).decode(\"unicode-escape\"))\n\n    if float(cmds.about(v=True)) >= 2016:\n        maya.standalone.uninitialize()\n\n```\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u5192\u982d\u3067\u7d39\u4ecb\u3057\u305f\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u30d5\u30e9\u30b0\u306e\u30b3\u30de\u30f3\u30c9\u304c\u3001\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u8868\u8a18\u306b\u7f6e\u63db\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\n```:\u7f6e\u63db\u524d\ndef fake(x):\n        import maya.cmds as cmds\n        cmds.optionMenu(name, en=True, l=\"top_node:\",\n                vis=True, ann=u\"\u30c8\u30c3\u30d7\u30ce\u30fc\u30c9\u3092\u9078\u629e\", w=200,\n                cc=partial(self.change_topnode, name))\n        return top_node\n```\n\n\n```:\u7f6e\u63db\u5f8c\ndef fake(x):\n    import maya.cmds as cmds\n    cmds.optionMenu(name, enable=True, label='top_node:', visible=True, annotation=u'\u30c8\u30c3\u30d7\u30ce\u30fc\u30c9\u3092\u9078\u629e', width=200, changeCommand=partial(self.change_topnode, name))\n    return top_node\n```\n\n\n# \u6ce8\u610f\u30fb\u5236\u9650\u4e8b\u9805\n\u3046\u307e\u304f\u3044\u3063\u305f\u3088\u3046\u306b\u898b\u3048\u305f\u306e\u3067\u3059\u304c\u3001python\u30b3\u30fc\u30c9\u3092ast.parse\u3057\u305f\u5f8c\u3001astor.to_source()\u3067python\u30b3\u30fc\u30c9\u306b\u623b\u3059\u969b\u306b\u3001\u3044\u308d\u3044\u308d\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u60c5\u5831\u304c\u5931\u308f\u308c\u307e\u3059\u3002\n\n- u\"\"\" \u3053\u308c\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u6587\u5b57\u5217\u3067\u3059 \"\"\" \u304c\u3001\u5168\u3066 u\\`\u3053\u308c\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u6587\u5b57\u5217\u3067\u3059\\` \u306b\u306a\u308b\n- \u6587\u306e\u9014\u4e2d\u3067\u5165\u308c\u3066\u3044\u308b\u6539\u884c\u304c\u6d88\u3048\u308b\n- if not aaa:  \u304c if (not aaa): \u306e\u3088\u3046\u306b\u52dd\u624b\u306b\u30ab\u30c3\u30b3\u304c\u3064\u3051\u3089\u308c\u308b\n- \u5143\u306e\u30b3\u30fc\u30c9\u5185\u306b '\\n' \u306e\u6539\u884c\u30b3\u30fc\u30c9\u3092\u793a\u3059\u6587\u5b57\u5217\u304c\u3042\u308b\u3068\u3001\u5fa9\u5143\u6642\u306b\u6539\u884c\u3068\u3057\u3066\u6271\u308f\u308c\u3066\u3057\u307e\u3046\n    - \u3053\u308c\u306f\u3001os.linesep\u3092\u4f7f\u3046\u3053\u3068\u3067\u56de\u907f\u3059\u308b\n\n\u306a\u306e\u3067\u79c1\u306f\u3001\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0->\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u7f6e\u63db\u5b9f\u65bd\u5f8c\u3001PyCharm\u3067AutoFormatter\u30fb\u8b66\u544a\u524a\u9664\u30fb\u7f6e\u63db\u3067\u5225\u9014\u304a\u6383\u9664\u3057\u3066\u3044\u307e\u3059\u3002\u3002\n\n\n# \u307e\u3068\u3081\n\n\u6163\u308c\u3066\u304f\u308c\u3070\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u8868\u8a18\u306e\u65b9\u304c\u66f8\u304d\u3084\u3059\u3044\u3057\u8aad\u307f\u3084\u3059\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001maya.cmds\u306b\u542b\u307e\u308c\u308b\u81a8\u5927\u306a\u30d5\u30e9\u30b0\u305f\u3061\u3092\u79c1\u306f\u307e\u3060\u307e\u3060\u899a\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u3055\u3059\u304c\u306b l\u306flabel\u3001v\u306fvalue \u306a\u3069\u5206\u304b\u3063\u3066\u304d\u305f\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306b\u95a2\u308f\u308b\u30c1\u30fc\u30e0\u306e\u7fd2\u719f\u5ea6\u306b\u5408\u308f\u305b\u3066\u30d5\u30e9\u30b0\u540d\u306e\u30eb\u30fc\u30eb\u3092\u6c7a\u3081\u308b\u306e\u3082\u3088\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4f7f\u7528\u983b\u5ea6\u304c\u4f4e\u305d\u3046\u306a\u30d5\u30e9\u30b0\u3060\u3068\u3001\u30ed\u30f3\u30b0\u30cd\u30fc\u30e0\u3092\u898b\u308c\u3070\u610f\u5473\u304c\u306a\u3093\u3068\u306a\u304f\u7406\u89e3\u3067\u304d\u307e\u3059\u304c\u3001\u30b7\u30e7\u30fc\u30c8\u30cd\u30fc\u30e0\u3060\u3068\u9593\u9055\u3044\u306a\u304f\u30b3\u30de\u30f3\u30c9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u9001\u308a\u306b\u306a\u308b\u3082\u306e\u304c\u3042\u308b\u306e\u3067\u3001\u6c17\u3092\u3064\u3051\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nbsp -> beforeShowPopup\nnpm -> numberOfPopupMenus\nvcc -> visibleChangeCommand\n\u3068\u304b\u3002\n\n", "tags": ["maya", "Python"]}