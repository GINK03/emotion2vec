{"tags": ["TypeScript", "Angular2"], "context": "\n\n\u6982\u8981\nComponent Interaction\u306e\u81ea\u5206\u7528\u30e1\u30e2\u3002\n\u3042\u307e\u308a\u3088\u304f\u5206\u304b\u3063\u3066\u3044\u306a\u3044\u90e8\u5206\u3082\u3042\u308a\u3002\n\n\u89aa\u304b\u3089\u5b50\u306b\u6e21\u3059\u3002\nPass data from parent to child with input binding\n<hero-child [hero]=\"hero\">  \u89aa\u3002\n@Input() hero:Hero \u5b50\u3002\nThe second @Input aliases the child component property name masterName as 'master'.\n\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n<hero-child [master]=\"master\"> \u89aa\u3002\n@Input('master') masterName: string; \u5b50\u3002\n\nhero-child\nimport { Component, Input } from '@angular/core';\nimport { Hero } from './hero';\n@Component({\n  selector: 'hero-child',\n  template: `\n    <h3>{{hero.name}} says:</h3>\n    <p>I, {{hero.name}}, am at your service, {{masterName}}.</p>\n  `\n})\nexport class HeroChildComponent {\n  @Input() hero: Hero;\n  @Input('master') masterName: string;\n}\n\n\n\nhero-parent\nimport { Component } from '@angular/core';\nimport { HEROES } from './hero';\n@Component({\n  selector: 'hero-parent',\n  template: `\n    <h2>{{master}} controls {{heroes.length}} heroes</h2>\n    <hero-child *ngFor=\"let hero of heroes\"\n      [hero]=\"hero\"\n      [master]=\"master\">\n    </hero-child>\n  `\n})\nexport class HeroParentComponent {\n  heroes = HEROES;\n  master: string = 'Master';\n}\n\n\n\n\u51e6\u7406\u3092\u52a0\u3048\u3066\u683c\u7d0d\u3002\nIntercept input property changes with a setter\n@Input() set name(name:string){...}\n\n\nname-child\nimport { Component, Input } from '@angular/core';\n@Component({\n  selector: 'name-child',\n  template: `\n    <h3>\"{{name}}\"</h3>\n  `\n})\nexport class NameChildComponent {\n  _name: string = '<no name set>';\n  @Input()\n  set name(name: string) {\n    this._name = (name && name.trim()) || '<no name set>';\n  }\n  get name() { return this._name; }\n}\n\n\n\nname-parent\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'name-parent',\n  template: `\n    <h2>Master controls {{names.length}} names</h2>\n    <name-child *ngFor=\"let name of names\"\n      [name]=\"name\">\n    </name-child>\n  `\n})\nexport class NameParentComponent {\n  // Displays 'Mr. IQ', '<no name set>', 'Bombasto'\n  names = ['Mr. IQ', '   ', '  Bombasto  '];\n}\n\n\n\n\u89aa\u3067\u306e\u5909\u66f4\u3092\u5b50\u3067\u691c\u77e5\nIntercept input property changes with ngOnChanges\n\nversion-child\nimport { Component, Input, OnChanges, SimpleChange } from '@angular/core';\n@Component({\n  selector: 'version-child',\n  template: `\n    <h3>Version {{major}}.{{minor}}</h3>\n    <h4>Change log:</h4>\n    <ul>\n      <li *ngFor=\"let change of changeLog\">{{change}}</li>\n    </ul>\n  `\n})\nexport class VersionChildComponent implements OnChanges {\n  @Input() major: number;\n  @Input() minor: number;\n  changeLog: string[] = [];\n  ngOnChanges(changes: {[propKey: string]: SimpleChange}) {\n    let log: string[] = [];\n    for (let propName in changes) {\n      let changedProp = changes[propName];\n      let from = JSON.stringify(changedProp.previousValue);\n      let to =   JSON.stringify(changedProp.currentValue);\n      log.push( `${propName} changed from ${from} to ${to}`);\n    }\n    this.changeLog.push(log.join(', '));\n  }\n}\n\n\n\nversion-parent\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'version-parent',\n  template: `\n    <h2>Source code version</h2>\n    <button (click)=\"newMinor()\">New minor version</button>\n    <button (click)=\"newMajor()\">New major version</button>\n    <version-child [major]=\"major\" [minor]=\"minor\"></version-child>\n  `\n})\nexport class VersionParentComponent {\n  major: number = 1;\n  minor: number = 23;\n  newMinor() {\n    this.minor++;\n  }\n  newMajor() {\n    this.major++;\n    this.minor = 0;\n  }\n}\n\n\n\n\u5b50\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u89aa\u3067\u691c\u77e5\nParent listens for child event\n\nmy-voter\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n@Component({\n  selector: 'my-voter',\n  template: `\n    <h4>{{name}}</h4>\n    <button (click)=\"vote(true)\"  [disabled]=\"voted\">Agree</button>\n    <button (click)=\"vote(false)\" [disabled]=\"voted\">Disagree</button>\n  `\n})\nexport class VoterComponent {\n  @Input()  name: string;\n  @Output() onVoted = new EventEmitter<boolean>();\n  voted = false;\n  vote(agreed: boolean) {\n    this.onVoted.emit(agreed);\n    this.voted = true;\n  }\n}\n\n\n\nvote-taker\nimport { Component }      from '@angular/core';\n@Component({\n  selector: 'vote-taker',\n  template: `\n    <h2>Should mankind colonize the Universe?</h2>\n    <h3>Agree: {{agreed}}, Disagree: {{disagreed}}</h3>\n    <my-voter *ngFor=\"let voter of voters\"\n      [name]=\"voter\"\n      (onVoted)=\"onVoted($event)\">\n    </my-voter>\n  `\n})\nexport class VoteTakerComponent {\n  agreed = 0;\n  disagreed = 0;\n  voters = ['Mr. IQ', 'Ms. Universe', 'Bombasto'];\n  onVoted(agreed: boolean) {\n    agreed ? this.agreed++ : this.disagreed++;\n  }\n}\n\n\n\n\u89aa\u304b\u3089\u5b50\u3092\u5909\u6570\u3068\u3057\u3066\u4f7f\u3046\uff08template)\nParent interacts with child via local variable\n\ncountdown-timer\nimport { Component, OnDestroy, OnInit } from '@angular/core';\n@Component({\n  selector: 'countdown-timer',\n  template: '<p>{{message}}</p>'\n})\nexport class CountdownTimerComponent implements OnInit, OnDestroy {\n  intervalId = 0;\n  message = '';\n  seconds = 11;\n  clearTimer() { clearInterval(this.intervalId); }\n  ngOnInit()    { this.start(); }\n  ngOnDestroy() { this.clearTimer(); }\n  start() { this.countDown(); }\n  stop()  {\n    this.clearTimer();\n    this.message = `Holding at T-${this.seconds} seconds`;\n  }\n  private countDown() {\n    this.clearTimer();\n    this.intervalId = window.setInterval(() => {\n      this.seconds -= 1;\n      if (this.seconds === 0) {\n        this.message = 'Blast off!';\n      } else {\n        if (this.seconds < 0) { this.seconds = 10; } // reset\n        this.message = `T-${this.seconds} seconds and counting`;\n      }\n    }, 1000);\n  }\n}\n\n\n\ncountdown-parent-lv\nimport { Component }                from '@angular/core';\nimport { CountdownTimerComponent }  from './countdown-timer.component';\n@Component({\n  selector: 'countdown-parent-lv',\n  template: `\n  <h3>Countdown to Liftoff (via local variable)</h3>\n  <button (click)=\"timer.start()\">Start</button>\n  <button (click)=\"timer.stop()\">Stop</button>\n  <div class=\"seconds\">{{timer.seconds}}</div>\n  <countdown-timer #timer></countdown-timer>\n  `,\n  styleUrls: ['demo.css']\n})\nexport class CountdownLocalVarParentComponent { }\n\n\nWe can place a local variable (#timer) on the tag () representing the child component. That gives us a reference to the child component itself and the ability to access any of its properties or methods from within the parent template.\n\u5b50\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092#timer\u5909\u6570\u306b\u3044\u308c\u3066\u4f7f\u3046\u3002\n\n\u89aa\u304b\u3089\u5b50\u3092\u5909\u6570\u3068\u3057\u3066\u4f7f\u3046(component\u5185\uff09\nParent calls a ViewChild\n\ncountdown-parent-vc\nimport { AfterViewInit, ViewChild } from '@angular/core';\nimport { Component }                from '@angular/core';\nimport { CountdownTimerComponent }  from './countdown-timer.component';\n@Component({\n  selector: 'countdown-parent-vc',\n  template: `\n  <h3>Countdown to Liftoff (via ViewChild)</h3>\n  <button (click)=\"start()\">Start</button>\n  <button (click)=\"stop()\">Stop</button>\n  <div class=\"seconds\">{{ seconds() }}</div>\n  <countdown-timer></countdown-timer>\n  `,\n  styleUrls: ['demo.css']\n})\nexport class CountdownViewChildParentComponent implements AfterViewInit {\n  @ViewChild(CountdownTimerComponent)\n  private timerComponent: CountdownTimerComponent;\n  seconds() { return 0; }\n  ngAfterViewInit() {\n    // Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ...\n    // but wait a tick first to avoid one-time devMode\n    // unidirectional-data-flow-violation error\n    setTimeout(() => this.seconds = () => this.timerComponent.seconds, 0);\n  }\n  start() { this.timerComponent.start(); }\n  stop() { this.timerComponent.stop(); }\n}\n\n\nWe import references to the ViewChild decorator and the AfterViewInit lifecycle hook.\nWe inject the child CountdownTimerComponent into the private timerComponent property via the @ViewChild property decoration.\n@ViewChild\u3067\u5b50\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u81ea\u8eab\u3092\u53d6\u5f97\u3002\n\n\u5b50\u3092\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u5171\u6709\u3059\u308b\nParent and children communicate via a service\n\nMissionService\nimport { Injectable } from '@angular/core';\nimport { Subject }    from 'rxjs/Subject';\n@Injectable()\nexport class MissionService {\n  // Observable string sources\n  private missionAnnouncedSource = new Subject<string>();\n  private missionConfirmedSource = new Subject<string>();\n  // Observable string streams\n  missionAnnounced$ = this.missionAnnouncedSource.asObservable();\n  missionConfirmed$ = this.missionConfirmedSource.asObservable();\n  // Service message commands\n  announceMission(mission: string) {\n    this.missionAnnouncedSource.next(mission);\n  }\n  confirmMission(astronaut: string) {\n    this.missionConfirmedSource.next(astronaut);\n  }\n}\n\n\n\nmission-control\nimport { Component }          from '@angular/core';\nimport { MissionService }     from './mission.service';\n@Component({\n  selector: 'mission-control',\n  template: `\n    <h2>Mission Control</h2>\n    <button (click)=\"announce()\">Announce mission</button>\n    <my-astronaut *ngFor=\"let astronaut of astronauts\"\n      [astronaut]=\"astronaut\">\n    </my-astronaut>\n    <h3>History</h3>\n    <ul>\n      <li *ngFor=\"let event of history\">{{event}}</li>\n    </ul>\n  `,\n  providers: [MissionService]\n})\nexport class MissionControlComponent {\n  astronauts = ['Lovell', 'Swigert', 'Haise'];\n  history: string[] = [];\n  missions = ['Fly to the moon!',\n              'Fly to mars!',\n              'Fly to Vegas!'];\n  nextMission = 0;\n  constructor(private missionService: MissionService) {\n    missionService.missionConfirmed$.subscribe(\n      astronaut => {\n        this.history.push(`${astronaut} confirmed the mission`);\n      });\n  }\n  announce() {\n    let mission = this.missions[this.nextMission++];\n    this.missionService.announceMission(mission);\n    this.history.push(`Mission \"${mission}\" announced`);\n    if (this.nextMission >= this.missions.length) { this.nextMission = 0; }\n  }\n}\n\n\n\n\u53c2\u8003\u8cc7\u6599\nComponent Interaction\nAngular 2 @Output\u306e\u30a2\u30ec\u30b3\u30ec\nAngular 2 @Output\u306fObserver\u30d1\u30bf\u30fc\u30f3\u306a\u306e\u304b\u3092\u8abf\u3079\u3066\u307f\u305f\nAttribute Directives\n# \u6982\u8981\n[Component Interaction][link1]\u306e\u81ea\u5206\u7528\u30e1\u30e2\u3002\n\u3042\u307e\u308a\u3088\u304f\u5206\u304b\u3063\u3066\u3044\u306a\u3044\u90e8\u5206\u3082\u3042\u308a\u3002\n\n##\u89aa\u304b\u3089\u5b50\u306b\u6e21\u3059\u3002\nPass data from parent to child with input binding\n\n`<hero-child [hero]=\"hero\">`  \u89aa\u3002\n`@Input() hero:Hero` \u5b50\u3002\n\nThe second @Input aliases the child component property name masterName as 'master'.\n\u30d7\u30ed\u30d1\u30c6\u30a3\u540d\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n`<hero-child [master]=\"master\">` \u89aa\u3002\n`@Input('master') masterName: string;` \u5b50\u3002\n\n\n```ts:hero-child\nimport { Component, Input } from '@angular/core';\nimport { Hero } from './hero';\n@Component({\n  selector: 'hero-child',\n  template: `\n    <h3>{{hero.name}} says:</h3>\n    <p>I, {{hero.name}}, am at your service, {{masterName}}.</p>\n  `\n})\nexport class HeroChildComponent {\n  @Input() hero: Hero;\n  @Input('master') masterName: string;\n}\n```\n\n```ts:hero-parent\nimport { Component } from '@angular/core';\nimport { HEROES } from './hero';\n@Component({\n  selector: 'hero-parent',\n  template: `\n    <h2>{{master}} controls {{heroes.length}} heroes</h2>\n    <hero-child *ngFor=\"let hero of heroes\"\n      [hero]=\"hero\"\n      [master]=\"master\">\n    </hero-child>\n  `\n})\nexport class HeroParentComponent {\n  heroes = HEROES;\n  master: string = 'Master';\n}\n```\n\n##\u51e6\u7406\u3092\u52a0\u3048\u3066\u683c\u7d0d\u3002\nIntercept input property changes with a setter\n\n```\n@Input() set name(name:string){...}\n```\n\n```ts:name-child\nimport { Component, Input } from '@angular/core';\n@Component({\n  selector: 'name-child',\n  template: `\n    <h3>\"{{name}}\"</h3>\n  `\n})\nexport class NameChildComponent {\n  _name: string = '<no name set>';\n  @Input()\n  set name(name: string) {\n    this._name = (name && name.trim()) || '<no name set>';\n  }\n  get name() { return this._name; }\n}\n```\n\n```ts:name-parent\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'name-parent',\n  template: `\n    <h2>Master controls {{names.length}} names</h2>\n    <name-child *ngFor=\"let name of names\"\n      [name]=\"name\">\n    </name-child>\n  `\n})\nexport class NameParentComponent {\n  // Displays 'Mr. IQ', '<no name set>', 'Bombasto'\n  names = ['Mr. IQ', '   ', '  Bombasto  '];\n}\n```\n\n##\u89aa\u3067\u306e\u5909\u66f4\u3092\u5b50\u3067\u691c\u77e5\nIntercept input property changes with ngOnChanges\n\n```ts:version-child\nimport { Component, Input, OnChanges, SimpleChange } from '@angular/core';\n@Component({\n  selector: 'version-child',\n  template: `\n    <h3>Version {{major}}.{{minor}}</h3>\n    <h4>Change log:</h4>\n    <ul>\n      <li *ngFor=\"let change of changeLog\">{{change}}</li>\n    </ul>\n  `\n})\nexport class VersionChildComponent implements OnChanges {\n  @Input() major: number;\n  @Input() minor: number;\n  changeLog: string[] = [];\n  ngOnChanges(changes: {[propKey: string]: SimpleChange}) {\n    let log: string[] = [];\n    for (let propName in changes) {\n      let changedProp = changes[propName];\n      let from = JSON.stringify(changedProp.previousValue);\n      let to =   JSON.stringify(changedProp.currentValue);\n      log.push( `${propName} changed from ${from} to ${to}`);\n    }\n    this.changeLog.push(log.join(', '));\n  }\n}\n```\n\n```ts:version-parent\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'version-parent',\n  template: `\n    <h2>Source code version</h2>\n    <button (click)=\"newMinor()\">New minor version</button>\n    <button (click)=\"newMajor()\">New major version</button>\n    <version-child [major]=\"major\" [minor]=\"minor\"></version-child>\n  `\n})\nexport class VersionParentComponent {\n  major: number = 1;\n  minor: number = 23;\n  newMinor() {\n    this.minor++;\n  }\n  newMajor() {\n    this.major++;\n    this.minor = 0;\n  }\n}\n```\n\n##\u5b50\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u89aa\u3067\u691c\u77e5\nParent listens for child event\n\n```ts:my-voter\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n@Component({\n  selector: 'my-voter',\n  template: `\n    <h4>{{name}}</h4>\n    <button (click)=\"vote(true)\"  [disabled]=\"voted\">Agree</button>\n    <button (click)=\"vote(false)\" [disabled]=\"voted\">Disagree</button>\n  `\n})\nexport class VoterComponent {\n  @Input()  name: string;\n  @Output() onVoted = new EventEmitter<boolean>();\n  voted = false;\n  vote(agreed: boolean) {\n    this.onVoted.emit(agreed);\n    this.voted = true;\n  }\n}\n```\n\n```ts:vote-taker\nimport { Component }      from '@angular/core';\n@Component({\n  selector: 'vote-taker',\n  template: `\n    <h2>Should mankind colonize the Universe?</h2>\n    <h3>Agree: {{agreed}}, Disagree: {{disagreed}}</h3>\n    <my-voter *ngFor=\"let voter of voters\"\n      [name]=\"voter\"\n      (onVoted)=\"onVoted($event)\">\n    </my-voter>\n  `\n})\nexport class VoteTakerComponent {\n  agreed = 0;\n  disagreed = 0;\n  voters = ['Mr. IQ', 'Ms. Universe', 'Bombasto'];\n  onVoted(agreed: boolean) {\n    agreed ? this.agreed++ : this.disagreed++;\n  }\n}\n```\n\n\n##\u89aa\u304b\u3089\u5b50\u3092\u5909\u6570\u3068\u3057\u3066\u4f7f\u3046\uff08template)\nParent interacts with child via local variable\n\n```ts:countdown-timer\nimport { Component, OnDestroy, OnInit } from '@angular/core';\n@Component({\n  selector: 'countdown-timer',\n  template: '<p>{{message}}</p>'\n})\nexport class CountdownTimerComponent implements OnInit, OnDestroy {\n  intervalId = 0;\n  message = '';\n  seconds = 11;\n  clearTimer() { clearInterval(this.intervalId); }\n  ngOnInit()    { this.start(); }\n  ngOnDestroy() { this.clearTimer(); }\n  start() { this.countDown(); }\n  stop()  {\n    this.clearTimer();\n    this.message = `Holding at T-${this.seconds} seconds`;\n  }\n  private countDown() {\n    this.clearTimer();\n    this.intervalId = window.setInterval(() => {\n      this.seconds -= 1;\n      if (this.seconds === 0) {\n        this.message = 'Blast off!';\n      } else {\n        if (this.seconds < 0) { this.seconds = 10; } // reset\n        this.message = `T-${this.seconds} seconds and counting`;\n      }\n    }, 1000);\n  }\n}\n```\n\n```ts:countdown-parent-lv\nimport { Component }                from '@angular/core';\nimport { CountdownTimerComponent }  from './countdown-timer.component';\n@Component({\n  selector: 'countdown-parent-lv',\n  template: `\n  <h3>Countdown to Liftoff (via local variable)</h3>\n  <button (click)=\"timer.start()\">Start</button>\n  <button (click)=\"timer.stop()\">Stop</button>\n  <div class=\"seconds\">{{timer.seconds}}</div>\n  <countdown-timer #timer></countdown-timer>\n  `,\n  styleUrls: ['demo.css']\n})\nexport class CountdownLocalVarParentComponent { }\n```\n\nWe can place a local variable (#timer) on the tag (<countdown-timer>) representing the child component. That gives us a reference to the child component itself and the ability to access any of its properties or methods from within the parent template.\n\n\u5b50\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092#timer\u5909\u6570\u306b\u3044\u308c\u3066\u4f7f\u3046\u3002\n\n##\u89aa\u304b\u3089\u5b50\u3092\u5909\u6570\u3068\u3057\u3066\u4f7f\u3046(component\u5185\uff09\nParent calls a ViewChild\n\n```ts:countdown-parent-vc\nimport { AfterViewInit, ViewChild } from '@angular/core';\nimport { Component }                from '@angular/core';\nimport { CountdownTimerComponent }  from './countdown-timer.component';\n@Component({\n  selector: 'countdown-parent-vc',\n  template: `\n  <h3>Countdown to Liftoff (via ViewChild)</h3>\n  <button (click)=\"start()\">Start</button>\n  <button (click)=\"stop()\">Stop</button>\n  <div class=\"seconds\">{{ seconds() }}</div>\n  <countdown-timer></countdown-timer>\n  `,\n  styleUrls: ['demo.css']\n})\nexport class CountdownViewChildParentComponent implements AfterViewInit {\n  @ViewChild(CountdownTimerComponent)\n  private timerComponent: CountdownTimerComponent;\n  seconds() { return 0; }\n  ngAfterViewInit() {\n    // Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ...\n    // but wait a tick first to avoid one-time devMode\n    // unidirectional-data-flow-violation error\n    setTimeout(() => this.seconds = () => this.timerComponent.seconds, 0);\n  }\n  start() { this.timerComponent.start(); }\n  stop() { this.timerComponent.stop(); }\n}\n```\n\nWe import references to the ViewChild decorator and the AfterViewInit lifecycle hook.\n\nWe inject the child CountdownTimerComponent into the private timerComponent property via the @ViewChild property decoration.\n\n@ViewChild\u3067\u5b50\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u81ea\u8eab\u3092\u53d6\u5f97\u3002\n\n\n##\u5b50\u3092\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066\u5171\u6709\u3059\u308b\nParent and children communicate via a service\n\n```ts:MissionService\nimport { Injectable } from '@angular/core';\nimport { Subject }    from 'rxjs/Subject';\n@Injectable()\nexport class MissionService {\n  // Observable string sources\n  private missionAnnouncedSource = new Subject<string>();\n  private missionConfirmedSource = new Subject<string>();\n  // Observable string streams\n  missionAnnounced$ = this.missionAnnouncedSource.asObservable();\n  missionConfirmed$ = this.missionConfirmedSource.asObservable();\n  // Service message commands\n  announceMission(mission: string) {\n    this.missionAnnouncedSource.next(mission);\n  }\n  confirmMission(astronaut: string) {\n    this.missionConfirmedSource.next(astronaut);\n  }\n}\n```\n\n```ts:mission-control\nimport { Component }          from '@angular/core';\nimport { MissionService }     from './mission.service';\n@Component({\n  selector: 'mission-control',\n  template: `\n    <h2>Mission Control</h2>\n    <button (click)=\"announce()\">Announce mission</button>\n    <my-astronaut *ngFor=\"let astronaut of astronauts\"\n      [astronaut]=\"astronaut\">\n    </my-astronaut>\n    <h3>History</h3>\n    <ul>\n      <li *ngFor=\"let event of history\">{{event}}</li>\n    </ul>\n  `,\n  providers: [MissionService]\n})\nexport class MissionControlComponent {\n  astronauts = ['Lovell', 'Swigert', 'Haise'];\n  history: string[] = [];\n  missions = ['Fly to the moon!',\n              'Fly to mars!',\n              'Fly to Vegas!'];\n  nextMission = 0;\n  constructor(private missionService: MissionService) {\n    missionService.missionConfirmed$.subscribe(\n      astronaut => {\n        this.history.push(`${astronaut} confirmed the mission`);\n      });\n  }\n  announce() {\n    let mission = this.missions[this.nextMission++];\n    this.missionService.announceMission(mission);\n    this.history.push(`Mission \"${mission}\" announced`);\n    if (this.nextMission >= this.missions.length) { this.nextMission = 0; }\n  }\n}\n```\n\n\n\n#\u53c2\u8003\u8cc7\u6599\n[Component Interaction][link1]\n[Angular 2 @Output\u306e\u30a2\u30ec\u30b3\u30ec][link3]\n[Angular 2 @Output\u306fObserver\u30d1\u30bf\u30fc\u30f3\u306a\u306e\u304b\u3092\u8abf\u3079\u3066\u307f\u305f][link2]\n[Attribute Directives][link4]\n\n\n[link1]:https://angular.io/docs/ts/latest/cookbook/component-communication.html\n[link2]:http://qiita.com/armorik83/items/84fa9337e7298cc329f4\n[link3]:http://qiita.com/armorik83/items/5f429cf7be4adb8c9126\n[link4]:https://angular.io/docs/ts/latest/guide/attribute-directives.html#!#input\n"}