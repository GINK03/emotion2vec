{"tags": ["C++", "C++11", "SFINAE"], "context": "Swift \u306b\u3064\u3044\u3066\u3001\u305d\u3057\u3066\u305d\u308c\u3092\u3044\u304f\u3064\u304b\u306e\u8a00\u8a9e\u3068\u6bd4\u8f03\u3059\u308b\u8208\u5473\u6df1\u3044\u8a18\u4e8b\u304c\u6295\u7a3f\u3055\u308c\u3066\u3044\u308b\u306e\u3092\u8aad\u307f\u307e\u3057\u305f\u3002\n\u226b Swift\u306e\u5f37\u529b\u306a\u6a5f\u80fd\u3067\u3042\u308bstatic\u30e1\u30bd\u30c3\u30c9\u5236\u7d04\u306e\u7d39\u4ecb\u3068\u3001Kotlin, TypeScript, Java, Scala, C++\u3068\u306e\u6bd4\u8f03\n\u6bd4\u8f03\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u8a00\u8a9e\u306e\u5185\u3067\u79c1\u304c\u3088\u304f\u77e5\u3063\u3066\u3044\u308b\u306e\u306f C++ \u3060\u3051\u306a\u306e\u3067\u4ed6\u306e\u8a18\u8ff0\u306f\u6d41\u3057\u8aad\u307f\u3067\u306f\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3042\u308b\u578b\u306e\u6027\u8cea\u3092\u5f37\u5236\u3059\u308b\u4ed5\u7d44\u307f\u3068\u3057\u3066 C++ \u3067\u306f\u300c\u30b3\u30f3\u30bb\u30d7\u30c8\u300d\u3068\u3044\u3046\u6982\u5ff5\u304c\u304b\u306a\u308a\u524d\u304b\u3089\u691c\u8a0e\u3055\u308c\u3066\u3044\u307e\u3059\u3002 (\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u53d7\u3051\u5165\u308c\u53ef\u80fd\u306a\u578b\u306e\u6027\u8cea\u3092\u8a18\u8ff0\u3059\u308b\u5f62\u3067\u4f7f\u3044\u3001\u3042\u308b\u578b\u304c\u7279\u5b9a\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u73fe\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u70b9\u3067\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u306f\u7570\u306a\u308b\u3088\u3046\u3067\u3059\u3002) \u305d\u308c\u304c\u306a\u304b\u306a\u304b\u6c7a\u5b9a\u306b\u81f3\u3089\u306a\u3044\u306e\u3067\u3001\u307e\u308f\u308a\u304f\u3069\u3044\u69d8\u3005\u306a\u3084\u308a\u65b9\u3067\u5236\u7d04\u3092\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u304c\u751f\u307f\u51fa\u3055\u308c\u3066\u304d\u307e\u3057\u305f\u3002 \u4eca\u56de\u306f\u3001\u3042\u308b\u30af\u30e9\u30b9\u304c\u7279\u5b9a\u306e\u540d\u524d\u3068\u578b\u3092\u3082\u3064\u30e1\u30f3\u30d0\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u5143\u8a18\u4e8b\u306e IsLoadable \u3092\u7f6e\u304d\u63db\u3048\u308b\u5f62\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 \u5143\u8a18\u4e8b\u306e C++ \u7248\u306f\u3042\u308b\u30af\u30e9\u30b9\u304c loadable \u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u8868\u73fe\u3092\u3075\u305f\u3064\u306b\u5206\u96e2\u3057\u3066\u3044\u307e\u3059\u3002\n\nloadable \u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059 (\u30af\u30e9\u30b9\u304c\u30e1\u30f3\u30d0\u95a2\u6570 load \u3092\u6301\u3064)\nloadable \u3067\u3042\u308b\u3068\u5b9a\u7fa9\u3059\u308b (IsLoadable<T>::value \u304c\u771f\u5024\u3067\u3042\u308b)\n\n\u306e\u3075\u305f\u3064\u3067\u3059\u3002\n\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u304d\u3061\u3093\u3068\u898f\u7d04\u3092\u5b88\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306a\u3089\u3070\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u53ef\u80fd\u3067\u3042\u308c\u3070\n\nloadable \u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059\u306a\u3089\u3070 loadable \u3067\u3042\u308b\n\n\u3068\u3044\u3046\u5f62\u306b\u4e00\u672c\u5316\u3057\u305f\u3044\u308f\u3051\u3067\u3059\u3002\n\u305d\u308c\u3092\u6e80\u305f\u3059\u30c8\u30ec\u30a4\u30c8 is_loadable \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 \ntemplate<class T>\nclass is_loadable {\n  template<class U, U (*)(Iterator<std::string>&)>\n  struct helper_t { typedef T type; };\n\n  template<class U, class V = T>\n  struct helper : std::false_type {};\n\n  template<class U>\n  struct helper<U, typename helper_t<U, &U::load>::type> : std::true_type {};\n\npublic:\n  static const bool value = helper<T>::value;\n};\n\n\u30af\u30e9\u30b9 T \u304c load \u3092\u6301\u3061\u3001\u306a\u304a\u304b\u3064\u305d\u306e\u578b\u304c T (*)(Iterator<std::string>&) \u3067\u3042\u308c\u3070 is_loadable<T>::value \u306f\u771f\u3067\u3059\u3002\n\u30af\u30e9\u30b9 Employee \u304c loadable \u3067\u3042\u308b\u3053\u3068\u3092\u967d\u306b\u8868\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001Employee \u3092\u5b9a\u7fa9\u3057\u305f\u5f8c\u306b\u4ee5\u4e0b\u306e\u8a18\u8ff0\u3092\u5165\u308c\u3066\u304a\u3051\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\nstatic_assert(is_loadable<Employee>::value, \"Employee is not loadable\");\n\n\u3042\u308b\u3044\u306f\u30de\u30af\u30ed\u306b\u3057\u3066\u3057\u307e\u3063\u305f\u65b9\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n#define declare_loadable(t) \\\n  static_assert(is_loadable<t>::value, #t \" is not loadable\")\n\ndeclare_loadable(Employee);\n\n\u4ee5\u4e0a\u306f\u5fdc\u7528\u7bc4\u56f2\u306e\u5e83\u3044\u624b\u6cd5\u306a\u306e\u3067\u3001\u6d3b\u7528\u3059\u308c\u3070\u3067\u304d\u308b\u3053\u3068\u306f\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nSwift \u306b\u3064\u3044\u3066\u3001\u305d\u3057\u3066\u305d\u308c\u3092\u3044\u304f\u3064\u304b\u306e\u8a00\u8a9e\u3068\u6bd4\u8f03\u3059\u308b\u8208\u5473\u6df1\u3044\u8a18\u4e8b\u304c\u6295\u7a3f\u3055\u308c\u3066\u3044\u308b\u306e\u3092\u8aad\u307f\u307e\u3057\u305f\u3002\n\n\u226b [Swift\u306e\u5f37\u529b\u306a\u6a5f\u80fd\u3067\u3042\u308bstatic\u30e1\u30bd\u30c3\u30c9\u5236\u7d04\u306e\u7d39\u4ecb\u3068\u3001Kotlin, TypeScript, Java, Scala, C++\u3068\u306e\u6bd4\u8f03](http://qiita.com/omochimetaru/items/621f1ef62b9798ee5ff5)\n\n\u6bd4\u8f03\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u8a00\u8a9e\u306e\u5185\u3067\u79c1\u304c\u3088\u304f\u77e5\u3063\u3066\u3044\u308b\u306e\u306f C++ \u3060\u3051\u306a\u306e\u3067\u4ed6\u306e\u8a18\u8ff0\u306f\u6d41\u3057\u8aad\u307f\u3067\u306f\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3042\u308b\u578b\u306e\u6027\u8cea\u3092\u5f37\u5236\u3059\u308b\u4ed5\u7d44\u307f\u3068\u3057\u3066 C++ \u3067\u306f\u300c\u30b3\u30f3\u30bb\u30d7\u30c8\u300d\u3068\u3044\u3046\u6982\u5ff5\u304c\u304b\u306a\u308a\u524d\u304b\u3089\u691c\u8a0e\u3055\u308c\u3066\u3044\u307e\u3059\u3002 (\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u53d7\u3051\u5165\u308c\u53ef\u80fd\u306a\u578b\u306e\u6027\u8cea\u3092\u8a18\u8ff0\u3059\u308b\u5f62\u3067\u4f7f\u3044\u3001\u3042\u308b\u578b\u304c\u7279\u5b9a\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u73fe\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u70b9\u3067\u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u306f\u7570\u306a\u308b\u3088\u3046\u3067\u3059\u3002) \u305d\u308c\u304c\u306a\u304b\u306a\u304b\u6c7a\u5b9a\u306b\u81f3\u3089\u306a\u3044\u306e\u3067\u3001\u307e\u308f\u308a\u304f\u3069\u3044\u69d8\u3005\u306a\u3084\u308a\u65b9\u3067\u5236\u7d04\u3092\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u304c\u751f\u307f\u51fa\u3055\u308c\u3066\u304d\u307e\u3057\u305f\u3002 \u4eca\u56de\u306f\u3001\u3042\u308b\u30af\u30e9\u30b9\u304c\u7279\u5b9a\u306e\u540d\u524d\u3068\u578b\u3092\u3082\u3064\u30e1\u30f3\u30d0\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u5143\u8a18\u4e8b\u306e `IsLoadable` \u3092\u7f6e\u304d\u63db\u3048\u308b\u5f62\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 \u5143\u8a18\u4e8b\u306e C++ \u7248\u306f\u3042\u308b\u30af\u30e9\u30b9\u304c loadable \u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u306e\u8868\u73fe\u3092\u3075\u305f\u3064\u306b\u5206\u96e2\u3057\u3066\u3044\u307e\u3059\u3002\n\n- loadable \u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059 (\u30af\u30e9\u30b9\u304c\u30e1\u30f3\u30d0\u95a2\u6570 `load` \u3092\u6301\u3064)\n- loadable \u3067\u3042\u308b\u3068\u5b9a\u7fa9\u3059\u308b (`IsLoadable<T>::value` \u304c\u771f\u5024\u3067\u3042\u308b)\n\n\u306e\u3075\u305f\u3064\u3067\u3059\u3002\n\n\u3053\u306e\u6a5f\u80fd\u3092\u4f7f\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u304d\u3061\u3093\u3068\u898f\u7d04\u3092\u5b88\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306a\u3089\u3070\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u53ef\u80fd\u3067\u3042\u308c\u3070\n\n- loadable \u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059\u306a\u3089\u3070 loadable \u3067\u3042\u308b\n\n\u3068\u3044\u3046\u5f62\u306b\u4e00\u672c\u5316\u3057\u305f\u3044\u308f\u3051\u3067\u3059\u3002\n\n\u305d\u308c\u3092\u6e80\u305f\u3059\u30c8\u30ec\u30a4\u30c8 `is_loadable` \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 \n\n```cpp\ntemplate<class T>\nclass is_loadable {\n  template<class U, U (*)(Iterator<std::string>&)>\n  struct helper_t { typedef T type; };\n\n  template<class U, class V = T>\n  struct helper : std::false_type {};\n\n  template<class U>\n  struct helper<U, typename helper_t<U, &U::load>::type> : std::true_type {};\n\npublic:\n  static const bool value = helper<T>::value;\n};\n```\n\n\u30af\u30e9\u30b9 `T` \u304c `load` \u3092\u6301\u3061\u3001\u306a\u304a\u304b\u3064\u305d\u306e\u578b\u304c `T (*)(Iterator<std::string>&)` \u3067\u3042\u308c\u3070 `is_loadable<T>::value` \u306f\u771f\u3067\u3059\u3002\n\n\u30af\u30e9\u30b9 `Employee` \u304c loadable \u3067\u3042\u308b\u3053\u3068\u3092\u967d\u306b\u8868\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001`Employee` \u3092\u5b9a\u7fa9\u3057\u305f\u5f8c\u306b\u4ee5\u4e0b\u306e\u8a18\u8ff0\u3092\u5165\u308c\u3066\u304a\u3051\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n```cpp\nstatic_assert(is_loadable<Employee>::value, \"Employee is not loadable\");\n```\n\n\u3042\u308b\u3044\u306f\u30de\u30af\u30ed\u306b\u3057\u3066\u3057\u307e\u3063\u305f\u65b9\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n```cpp\n#define declare_loadable(t) \\\n  static_assert(is_loadable<t>::value, #t \" is not loadable\")\n\ndeclare_loadable(Employee);\n```\n\n\u4ee5\u4e0a\u306f\u5fdc\u7528\u7bc4\u56f2\u306e\u5e83\u3044\u624b\u6cd5\u306a\u306e\u3067\u3001\u6d3b\u7528\u3059\u308c\u3070\u3067\u304d\u308b\u3053\u3068\u306f\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n"}