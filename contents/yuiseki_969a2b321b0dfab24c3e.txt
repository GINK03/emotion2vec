{"context": " More than 1 year has passed since last update.jsonschema \u3092\u3064\u304b\u3063\u3066post\u3055\u308c\u3066\u304d\u305fjson\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u3001\u30a8\u30e9\u30fc\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u3042\u3063\u305f\u3089\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u3066\u3069\u3053\u306b\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u306e\u304b\u3092\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9400\u306ejson\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3059\u308b\n\napp.py\nfrom flask import Flask\napp = Flask(__name__)\n\nimport json_schema\nimport json\n\n\nschema = {\n  \"name\": {\n    \"type\": \"string\",\n    \"required\": True\n  },\n  \"age\": {\n    \"type\": \"number\",\n    \"required\": True\n    \"maximum\": 120,\n    \"minimum\": 0\n  }\n}\n\n@app.route(\"/\")\n@json_schema.validate(\"POST\", schema)\ndef index():\n    if request.is_post:\n        data = json.loads(request.data)\n        print data[\"name\"]\n        print data[\"age\"]\n        return \"Hi! \"+data[\"name\"]\n    else:\n        return \"Hi!\"\n\nif __name__ == \"__main__\":\n    app.run()\n\n\n\nhttps://gist.github.com/yuiseki/9715d6289ff65fa6e1b2\n\njson_schema.py\nimport json\nfrom jsonschema import ValidationError, exceptions\nfrom jsonschema.validators import Draft3Validator\n\nfrom functools import wraps\n\nfrom flask import _request_ctx_stack, request, jsonify\n\ndef _validate(schema, data):\n    reqv = Draft3Validator(schema)\n    errors = []\n    for e in reqv.iter_errors(data):\n        errors.append(dict(name=e.path[0], reason=e.validator))\n    return errors\n\ndef validate(method, schema):\n    def decorator(f):\n        @wraps(f)\n        def decorated_func(*args, **kws):\n            ctype = request.headers.get(\"Content-Type\")\n            method_ = request.headers.get(\"X-HTTP-Method-Override\", request.method)\n            if method_.lower() == method.lower() and \"json\" in ctype:\n                data = json.loads(request.data)\n                errors = _validate(schema, data)\n                if len(errors) > 0:\n                    resp = jsonify(result=\"failure\", reason=\"invalid json\", errors=errors)\n                    resp.status_code = 400\n                    return resp\n            return f(*args, **kws)\n        return decorated_func\n    return decorator\n\n\njsonschema \u3092\u3064\u304b\u3063\u3066post\u3055\u308c\u3066\u304d\u305fjson\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3044\u3001\u30a8\u30e9\u30fc\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u3042\u3063\u305f\u3089\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u3066\u3069\u3053\u306b\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u306e\u304b\u3092\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9400\u306ejson\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3059\u308b\n\n\n```py:app.py\nfrom flask import Flask\napp = Flask(__name__)\n\nimport json_schema\nimport json\n\n\nschema = {\n  \"name\": {\n    \"type\": \"string\",\n    \"required\": True\n  },\n  \"age\": {\n    \"type\": \"number\",\n    \"required\": True\n    \"maximum\": 120,\n    \"minimum\": 0\n  }\n}\n\n@app.route(\"/\")\n@json_schema.validate(\"POST\", schema)\ndef index():\n    if request.is_post:\n        data = json.loads(request.data)\n        print data[\"name\"]\n        print data[\"age\"]\n        return \"Hi! \"+data[\"name\"]\n    else:\n        return \"Hi!\"\n\nif __name__ == \"__main__\":\n    app.run()\n```\n\n-----\n\nhttps://gist.github.com/yuiseki/9715d6289ff65fa6e1b2\n\n```py:json_schema.py\nimport json\nfrom jsonschema import ValidationError, exceptions\nfrom jsonschema.validators import Draft3Validator\n \nfrom functools import wraps\n \nfrom flask import _request_ctx_stack, request, jsonify\n \ndef _validate(schema, data):\n    reqv = Draft3Validator(schema)\n    errors = []\n    for e in reqv.iter_errors(data):\n        errors.append(dict(name=e.path[0], reason=e.validator))\n    return errors\n \ndef validate(method, schema):\n    def decorator(f):\n        @wraps(f)\n        def decorated_func(*args, **kws):\n            ctype = request.headers.get(\"Content-Type\")\n            method_ = request.headers.get(\"X-HTTP-Method-Override\", request.method)\n            if method_.lower() == method.lower() and \"json\" in ctype:\n                data = json.loads(request.data)\n                errors = _validate(schema, data)\n                if len(errors) > 0:\n                    resp = jsonify(result=\"failure\", reason=\"invalid json\", errors=errors)\n                    resp.status_code = 400\n                    return resp\n            return f(*args, **kws)\n        return decorated_func\n    return decorator\n```\n", "tags": ["jsonschema", "Flask", "Python", "JSON"]}