{"context": " More than 1 year has passed since last update.\n\nNTZ\u3068NLZ\nNTZ\u306f\u6700\u4e0b\u4f4d\u30d3\u30c3\u30c8\u304b\u3089\u9023\u7d9a\u3059\u308b\u7acb\u3063\u3066\u3044\u306a\u3044\u30d3\u30c3\u30c8\u306e\u6570\u3001NLZ\u306f\u6700\u4e0a\u4f4d\u30d3\u30c3\u30c8\u304b\u3089\u9023\u7d9a\u3059\u308b\u7acb\u3063\u3066\u3044\u306a\u3044\u30d3\u30c3\u30c8\u306e\u6570\u306e\u3053\u3068\u3092\u8a00\u3044\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u8a00\u3046\u3068\u30018bit\u306e\n00101000\n\u3068\u3044\u3046\u30d3\u30c3\u30c8\u5217\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u6700\u4e0b\u4f4d\u30d3\u30c3\u30c8\u304b\u3089\u306f0\u304c3\u3064\u9023\u7d9a\u3057\u3066\u3044\u308b\u306e\u3067NTZ\u306f3\u3001\u6700\u4e0a\u4f4d\u30d3\u30c3\u30c8\u304b\u3089\u306f0\u304c2\u3064\u9023\u7d9a\u3057\u3066\u3044\u308b\u306e\u3067NLZ\u306f2\u306b\u306a\u308a\u307e\u3059\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9ad8\u901f\u5316\u306a\u3069\u3092\u8003\u3048\u308b\u3068\u5272\u3068\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3044\u307e\u3044\u3061\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u6574\u7406\u3055\u308c\u3066\u3044\u306a\u3044\u611f\u304c\u3042\u308a\u307e\u3059\u3002\nCPU\u306e\u547d\u4ee4\u30bb\u30c3\u30c8\u306b\u3082\u542b\u307e\u308c\u3066\u3044\u305f\u308a\u3059\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u5168\u3066\u306e\u30d3\u30c3\u30c8\u304c0\u3060\u3063\u305f\u6642\u306e\u7d50\u679c\u304c\u30d0\u30e9\u30d0\u30e9\u3060\u3063\u305f\u308a\u3082\u3059\u308b\u306e\u3067\u3001\u3042\u307e\u308a\u4f7f\u3044\u7269\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u8a33\u3067\u3001NTZ\u3068NLZ\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u306f\u8a00\u3048\u3001\u3069\u3046\u3044\u3046\u65b9\u6cd5\u3067\u5b9f\u88c5\u3059\u308c\u3070\u3044\u3044\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u3001\u65e2\u306b\u30cd\u30c3\u30c8\u4e0a\u3067\u60c5\u5831\u3092\u63a2\u308c\u3070\u8272\u3005\u51fa\u3066\u304f\u308b\u306e\u3067\u3001\u4eca\u66f4\u79c1\u304c\u89e3\u8aac\u3057\u3066\u3082\u4ed5\u65b9\u3042\u308a\u307e\u305b\u3093\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u306a\u308b\u3079\u304f\u6c4e\u7528\u7684\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u65b9\u6cd5\n\u307e\u305a\u306f\u4f55\u3082\u8a00\u308f\u305a\u306b\u3053\u3053\u3092\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n\u5f53\u9762C#\u3068.NET\u306a\u8a18\u9332: [C#] \u4e00\u756a\u53f3\u7aef\u306e\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u4f4d\u7f6e\u3092\u6c42\u3081\u308b\u300c\u3082\u306e\u3059\u3054\u3044\u300d\u30b3\u30fc\u30c9\n\u4e0a\u8a18\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u9ed2\u9b54\u8853\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u306fC#\u306e\u3082\u306e\u3067\u3059\u304c\u3001C++\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u8a18\u4e8b\u3067\u306f64bit\u306b\u95a2\u3057\u3066\u6271\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5168\u3066\u306e\u6574\u6570\u578b\u306b\u5bfe\u5fdc\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u300132bit\u300116bit\u30018bit\u306e\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u8b0e\u306e\u6570\u5024\u3068\u914d\u5217\n\u4e0a\u8a18\u3067\u7d39\u4ecb\u3057\u305f\u8a18\u4e8b\u306b\u51fa\u3066\u3044\u305f\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc\u3068\u30c6\u30fc\u30d6\u30eb\u3092\u62e1\u5f35\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u6570\u5024\u3068\u914d\u5217\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nntz_nlz.hpp\n//8bit\u7248\nstatic constexpr auto magic8 = 0x1DU;\nstatic constexpr int ntz_table8[15] = {8,  0, -1,  1,  6, -1, -1,  2,  7, -1,  5, -1, -1,  4,  3};\nstatic constexpr int nlz_table8[15] = {8,  7, -1,  6,  1, -1, -1,  5,  0, -1,  2, -1, -1,  3,  4};\n//16bit\u7248\nstatic constexpr auto magic16 = 0x0F2DU;\nstatic constexpr int ntz_table16[31] = {\n    16,  0, -1,  1, -1,  8, -1,  2, 14, -1, -1,  9, -1, 11, -1,  3,\n    15, -1,  7, -1, 13, -1, 10, -1, -1,  6, 12, -1,  5, -1,  4,\n};\nstatic constexpr int nlz_table16[31] = {\n    16, 15, -1, 14, -1,  7, -1, 13,  1, -1, -1,  6, -1,  4, -1, 12,\n     0, -1,  8, -1,  2, -1,  5, -1, -1,  9,  3, -1, 10, -1, 11,\n};\n// 32bit\u7248\nstatic constexpr auto magic32 = 0x07C56E99U;\nstatic constexpr int ntz_table32[63] = {\n    32,  0, -1,  1, -1, 10, -1,  2, 29, -1, 11, -1, 25, -1, -1,  3,\n    30, -1, -1, 23, -1, 12, 14, -1, -1, 26, -1, 16, -1, 19, -1,  4,\n    31, -1,  9, -1, 28, -1, 24, -1, -1, 22, -1, 13, -1, 15, 18, -1,\n    -1,  8, 27, -1, 21, -1, -1, 17,  7, -1, 20, -1,  6, -1,  5\n};\nstatic constexpr int nlz_table32[63] = {\n    32, 31, -1, 30, -1, 21, -1, 29,  2, -1, 20, -1,  6, -1, -1, 28,\n     1, -1, -1,  8, -1, 19, 17, -1, -1,  5, -1, 15, -1, 12, -1, 27,\n     0, -1, 22, -1,  3, -1,  7, -1, -1,  9, -1, 18, -1, 16, 13, -1,\n    -1, 23,  4, -1, 10, -1, -1, 14, 24, -1, 11, -1, 25, -1, 26\n};\n// 64bit\u7248\nstatic constexpr auto magic64 = 0x03F0A933ADCBD8D1ULL;\nstatic constexpr int ntz_table64[127] = {\n    64,  0, -1,  1, -1, 12, -1,  2, 60, -1, 13, -1, -1, 53, -1,  3,\n    61, -1, -1, 21, -1, 14, -1, 42, -1, 24, 54, -1, -1, 28, -1,  4,\n    62, -1, 58, -1, 19, -1, 22, -1, -1, 17, 15, -1, -1, 33, -1, 43,\n    -1, 50, -1, 25, 55, -1, -1, 35, -1, 38, 29, -1, -1, 45, -1,  5,\n    63, -1, 11, -1, 59, -1, 52, -1, -1, 20, -1, 41, 23, -1, 27, -1,\n    -1, 57, 18, -1, 16, -1, 32, -1, 49, -1, -1, 34, 37, -1, 44, -1,\n    -1, 10, -1, 51, -1, 40, -1, 26, 56, -1, -1, 31, 48, -1, 36, -1,\n     9, -1, 39, -1, -1, 30, 47, -1,  8, -1, -1, 46,  7, -1,  6,\n};\nstatic constexpr int nlz_table64[127] = {\n    64, 63, -1, 62, -1, 51, -1, 61,  3, -1, 50, -1, -1, 10, -1, 60,\n     2, -1, -1, 42, -1, 49, -1, 21, -1, 39,  9, -1, -1, 35, -1, 59,\n     1, -1,  5, -1, 44, -1, 41, -1, -1, 46, 48, -1, -1, 30, -1, 20,\n    -1, 13, -1, 38,  8, -1, -1, 28, -1, 25, 34, -1, -1, 18, -1, 58,\n     0, -1, 52, -1,  4, -1, 11, -1, -1, 43, -1, 22, 40, -1, 36, -1,\n    -1,  6, 45, -1, 47, -1, 31, -1, 14, -1, -1, 29, 26, -1, 19, -1,\n    -1, 53, -1, 12, -1, 23, -1, 37,  7, -1, -1, 32, 15, -1, 27, -1,\n    54, -1, 24, -1, -1, 33, 16, -1, 55, -1, -1, 17, 56, -1, 57,\n};\n\n\n1bit\u5206\u62e1\u5f35\u3059\u308b\u3053\u3068\u3067\u30010\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u6027\u3092\u306a\u304f\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5206\u30c6\u30fc\u30d6\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u5897\u3048\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u304c\u3001\u305b\u3044\u305c\u30441KB\u7a0b\u5ea6\u306a\u306e\u3067\u3001\u5927\u62b5\u306e\u5834\u5408\u306f\u6c17\u306b\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\n\u3061\u306a\u307f\u306b\u3001-1\u3067\u57cb\u3081\u3089\u308c\u3066\u3044\u308b\u90e8\u5206\u306f\u4f7f\u7528\u3055\u308c\u307e\u305b\u3093\u3002\n\nNTZ, NLZ\u7528\u306e\u578b\u7279\u6027\u30af\u30e9\u30b9\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u6271\u3046\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7279\u6027\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\n\nntz_nlz.hpp\ntemplate<std::size_t size>\nstruct ntz_traits;\n\ntemplate<>\nstruct ntz_traits<1>\n{\n    using type = std::uint8_t;\n    static constexpr int shift = 4;\n    static constexpr auto magic = magic8;\n    static constexpr auto ntz_table = ntz_table8;\n    static constexpr auto nlz_table = nlz_table8;\n};\n\ntemplate<>\nstruct ntz_traits<2>\n{\n    using type = std::uint16_t;\n    static constexpr int shift = 11;\n    static constexpr auto magic = magic16;\n    static constexpr auto ntz_table = ntz_table16;\n    static constexpr auto nlz_table = nlz_table16;\n};\n\ntemplate<>\nstruct ntz_traits<4>\n{\n    using type = std::uint32_t;\n    static constexpr int shift = 26;\n    static constexpr auto magic = magic32;\n    static constexpr auto ntz_table = ntz_table32;\n    static constexpr auto nlz_table = nlz_table32;\n};\n\ntemplate<>\nstruct ntz_traits<8>\n{\n    using type = std::uint64_t;\n    static constexpr int shift = 57;\n    static constexpr auto magic = magic64;\n    static constexpr auto ntz_table = ntz_table64;\n    static constexpr auto nlz_table = nlz_table64;\n};\n\n\n\u3053\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u6574\u6570\u578bT\u306b\u5bfe\u3057\u3066\u3001ntz_traits<sizeof(T)>\u3092\u4f7f\u7528\u3057\u3066\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc\u3084\u30c6\u30fc\u30d6\u30eb\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u6574\u6570\u578b\u306e\u30d3\u30c3\u30c8\u6df1\u5ea6\u304c8, 16, 32, 64\u3067\u306a\u3044\u74b0\u5883\u306b\u95a2\u3057\u3066\u306f\u3001\u3068\u308a\u3042\u3048\u305a\u8003\u3048\u307e\u305b\u3093\u3002\u9762\u5012\u306a\u306e\u3067\u3002\n\nNTZ\u306e\u5b9f\u88c5\n\u3055\u3066\u3001\u3053\u308c\u3060\u3051\u5b9a\u7fa9\u3057\u3066\u3057\u307e\u3048\u3070\u3001NTZ\u306e\u5b9f\u88c5\u306f\u7c21\u5358\u3067\u3059\u3002\n\nntz_nlz.hpp\n// SFINAE\u306b\u5fc5\u8981\u306a\u3082\u308d\u3082\u308d\nextern void* enabler;\ntemplate<bool condition, typename T = void>\nusing enable_if_type = typename std::enable_if<condition, T>::type;\ntemplate<typename T>\nusing make_unsigned_type = typename std::make_unsigned<T>::type;\n\n// unsigned\u578b\u306eNTZ\u3002\u4f8b\u306e\u9ed2\u9b54\u8853\ntemplate<typename T, enable_if_type<std::is_unsigned<T>{}>*& = enabler>\ninline constexpr int ntz(T val) noexcept {\n    using tr= ntz_traits<sizeof(T)>;\n    using type = typename tr::type;\n    return tr::ntz_table[static_cast<type>(tr::magic*static_cast<type>(val&-val))>>tr::shift];\n}\n\n// signd\u306a\u578b\u306funsigned\u306a\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\ntemplate<typename T, enable_if_type<std::is_signed<T>{}>*& = enabler>\ninline constexpr int ntz(T val) noexcept {\n    return ntz(static_cast<make_unsigned_type<T>>(val));\n}\n\n// enum\u578b\u306f\u540c\u3058\u30b5\u30a4\u30ba\u306e\u6574\u6570\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\ntemplate<typename T, enable_if_type<std::is_enum<T>{}>*& = enabler>\ninline constexpr int ntz(T val) noexcept {\n    return ntz(static_cast<typename ntz_traits<sizeof(T)>::type>(val));\n}\n\n// \u30dd\u30a4\u30f3\u30bf\u578b\u306fuintptr_t\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u6574\u6570\u578b\u3068\u3057\u3066\u6271\u3046\ntemplate<typename T>\ninline int ntz(T* val) noexcept { return ntz(reinterpret_cast<std::uintptr_t>(val)); }\n\n// bool\u578b\u306f1bit\u3068\u307f\u306a\u3059\ninline constexpr int ntz(bool val) noexcept { return val?0:1; }\n\n// nullptr\u306f0bit\u3068\u307f\u306a\u3059\u3002\u591a\u5206\u4f7f\u308f\u306a\u3044\u3051\u3069\ninline constexpr int ntz(std::nullptr_t) noexcept { return 0; }\n\n\n\n\u7b26\u53f7\u306a\u3057\u306e\u6574\u6570\u578b\u3092\u57fa\u672c\u306b\u3001\u7b26\u53f7\u4ed8\u304d\u306e\u578b\u3001\u5217\u6319\u578b\u3001\u30dd\u30a4\u30f3\u30bf\u578b\u306b\u95a2\u3057\u3066\u306f\u3001\u540c\u3058\u30b5\u30a4\u30ba\u306e\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u547c\u3073\u51fa\u3059\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001bool\u578b\u3068nullptr_t\u578b\u306b\u95a2\u3057\u3066\u306f\u7279\u6b8a\u306a\u306e\u3067\u5225\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\nNLZ\u306e\u5b9f\u88c5\n\u3055\u3066\u3001ntz\u3067\u306fval&-val\u3068\u3044\u3046\u5f0f\u3092\u4f7f\u3063\u3066\u4e00\u756a\u4e0b\u4f4d\u306e\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u3092\u6b8b\u3059\u3068\u3044\u3046\u8a08\u7b97\u3092\u884c\u3063\u305f\u308f\u3051\u3067\u3059\u304c\u3001\u4e00\u756a\u4e0a\u4f4d\u306e\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u3092\u6b8b\u3059\u306e\u306f\u5c11\u3057\u624b\u9593\u306e\u304b\u304b\u308b\u64cd\u4f5c\u3067\u3059\u3002\n\u8003\u3048\u65b9\u306f\u5358\u7d14\u3067\u3001\u4f8b\u3048\u3070val\u304c64bit\u306e\u578b\u306a\u3089\u3001\nval = val | (val>>32);\nval = val | (val>>16);\nval = val | (val>>8);\nval = val | (val>>4);\nval = val | (val>>2);\nval = val | (val>>1);\nval = val ^ (val>>1);\n\n\u3068\u3001\u4e00\u756a\u4e0a\u4f4d\u306e\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u304b\u3089\u4e0b\u3092\u5168\u90e81\u306b\u3057\u3066\u304b\u3089\u3001\u4e00\u756a\u4e0a\u4f4d\u4ee5\u5916\u306e\u30d3\u30c3\u30c8\u3092\u5168\u3066\u53cd\u8ee2\u3057\u307e\u3059\u3002\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3001\u304b\u3064C++11\u306econstexpr\u3067\u3082\u5229\u7528\u53ef\u80fd\u306a\u518d\u5e30\u95a2\u6570\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u3057\u307e\u3059\u3002\n\nntz_nlz.hpp\ntemplate<int n>\nstruct highest_bit\n{\n    template<typename T>\n    static inline constexpr T get(T val) noexcept {\n        return highest_bit<n/2>::get(static_cast<T>(val | (val >> n)));\n    }\n};\ntemplate<>\nstruct highest_bit<1>\n{\n    template<typename T>\n    static inline constexpr T get_2(T val) noexcept { return static_cast<T>(val ^ (val >> 1)); }\n    template<typename T>\n    static inline constexpr T get(T val) noexcept { return get_2(static_cast<T>(val | (val >> 1))); }\n};\ntemplate<typename T>\ninline constexpr T get_highest_bit(T val) noexcept { return highest_bit<sizeof(T)*4>::get(val); }\n\n\n\u3053\u308c\u3055\u3048\u5b9a\u7fa9\u3055\u308c\u308c\u3070\u3001\u5f8c\u306fntz\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\nntz_nlz.hpp\n\n// unsigned\u578b\u306eNLZ\ntemplate<typename T, enable_if_type<std::is_unsigned<T>{}>*& = enabler>\ninline constexpr int nlz(T val) noexcept {\n    using tr= ntz_traits<sizeof(T)>;\n    using type = typename tr::type;\n    return tr::nlz_table[static_cast<type>(tr::magic*get_highest_bit(val))>>tr::shift];\n}\n\ntemplate<typename T, enable_if_type<std::is_signed<T>{}>*& = enabler>\ninline constexpr int nlz(T val) noexcept {\n    return nlz(static_cast<make_unsigned_type<T>>(val));\n}\n\ntemplate<typename T, enable_if_type<std::is_enum<T>{}>*& = enabler>\ninline constexpr int nlz(T val) noexcept {\n    return nlz(static_cast<typename ntz_traits<sizeof(T)>::type>(val));\n}\n\ntemplate<typename T>\ninline int nlz(T* val) noexcept { return nlz(reinterpret_cast<std::uintptr_t>(val)); }\n\ninline constexpr int nlz(bool val) noexcept { return val?0:1; }\n\ninline constexpr int nlz(std::nullptr_t) noexcept { return 0; }\n\n\n\n\n\u7d42\u308f\u308a\u306b\n\u5192\u982d\u3067\u7d39\u4ecb\u3057\u305f\u8a18\u4e8b\u3092\u8aad\u3093\u3067\u3001\u300c\u3053\u308a\u3083\u30b9\u30b2\u30a8\uff01\u300d\u3068\u601d\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3082\u306e\u306e\u3001\u5168\u3066\u306e\u30b9\u30ab\u30e9\u30fc\u578b\u306b\u5bfe\u5fdc\u3057\u3088\u3046\u306a\u3093\u3066\u601d\u3063\u305f\u3089\u610f\u5916\u3068\u9762\u5012\u3067\u3057\u305f\u3002\n\u3042\u3001\u3067\u3082\u3053\u308c\u5168\u3066\u3058\u3083\u306a\u3044\u3067\u3059\u306d\u3002float\u3068double\u3068long double\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3002\n\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\u3082\u3001reinterpret_cast\u3092\u4f7f\u7528\u3057\u3066\u7121\u7406\u3084\u308aIEEE754\u306e\u5185\u90e8\u8868\u73fe\u3092\u30d3\u30c3\u30c8\u5217\u3068\u898b\u505a\u3057\u3066NTZ\u3068NLZ\u3092\u3068\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c\u3001\u7279\u306blong double\u8fba\u308a\u306f64bit\u3088\u308a\u5927\u304d\u3044\u74b0\u5883\u3082\u3042\u3063\u305f\u308a\u3057\u3066\u9762\u5012\u3067\u3059\u3057\u3001\u9762\u5012\u306a\u5272\u306b\u306f\u4f7f\u3044\u3069\u3053\u308d\u304c\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u4eca\u56de\u306f\u7701\u304d\u307e\u3057\u305f\u3002\nNTZ\u306f\u6574\u6570\u578b\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3057\u305f\u6642\u306e2\u306e\u6b21\u6570\u3067\u3059\u3002\u3053\u308c\u304c\u5206\u304b\u308b\u3068\u3001\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u3088\u308a\u65e9\u3044\uff08\u9664\u7b97\u3092\u4f7f\u308f\u306a\u3044\uff09\u6700\u5c0f\u516c\u500d\u6570\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u308a\u3057\u307e\u3059\u3002\nNLZ\u3092\u4f7f\u3048\u3070\u30012\u3064\u306e\u6574\u6570\u578b\u306b\u5bfe\u3057\u3066\u3001\u300c\u4e0a\u4f4d\u30d3\u30c3\u30c8\u304b\u3089\u898b\u3066\u521d\u3081\u3066\u7570\u306a\u308b\u30d3\u30c3\u30c8\u304c\u73fe\u308c\u308b\u4f4d\u7f6e\u300d\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u305d\u308c\u304c\u5206\u304b\u3063\u3066\u4f55\u306b\u306a\u308b\u3093\u3060\u3068\u601d\u308f\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u306b\u95a2\u3057\u3066\u306f\u5f8c\u65e5\u5225\u306e\u8a18\u4e8b\u3067\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u672c\u65e5\u306f\u3053\u306e\u8fba\u3067\u3002\n\n#NTZ\u3068NLZ\nNTZ\u306f\u6700\u4e0b\u4f4d\u30d3\u30c3\u30c8\u304b\u3089\u9023\u7d9a\u3059\u308b\u7acb\u3063\u3066\u3044\u306a\u3044\u30d3\u30c3\u30c8\u306e\u6570\u3001NLZ\u306f\u6700\u4e0a\u4f4d\u30d3\u30c3\u30c8\u304b\u3089\u9023\u7d9a\u3059\u308b\u7acb\u3063\u3066\u3044\u306a\u3044\u30d3\u30c3\u30c8\u306e\u6570\u306e\u3053\u3068\u3092\u8a00\u3044\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u8a00\u3046\u3068\u30018bit\u306e\n00101000\n\u3068\u3044\u3046\u30d3\u30c3\u30c8\u5217\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u6700\u4e0b\u4f4d\u30d3\u30c3\u30c8\u304b\u3089\u306f0\u304c3\u3064\u9023\u7d9a\u3057\u3066\u3044\u308b\u306e\u3067NTZ\u306f3\u3001\u6700\u4e0a\u4f4d\u30d3\u30c3\u30c8\u304b\u3089\u306f0\u304c2\u3064\u9023\u7d9a\u3057\u3066\u3044\u308b\u306e\u3067NLZ\u306f2\u306b\u306a\u308a\u307e\u3059\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u9ad8\u901f\u5316\u306a\u3069\u3092\u8003\u3048\u308b\u3068\u5272\u3068\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3044\u307e\u3044\u3061\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u6574\u7406\u3055\u308c\u3066\u3044\u306a\u3044\u611f\u304c\u3042\u308a\u307e\u3059\u3002\nCPU\u306e\u547d\u4ee4\u30bb\u30c3\u30c8\u306b\u3082\u542b\u307e\u308c\u3066\u3044\u305f\u308a\u3059\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u5168\u3066\u306e\u30d3\u30c3\u30c8\u304c0\u3060\u3063\u305f\u6642\u306e\u7d50\u679c\u304c\u30d0\u30e9\u30d0\u30e9\u3060\u3063\u305f\u308a\u3082\u3059\u308b\u306e\u3067\u3001\u3042\u307e\u308a\u4f7f\u3044\u7269\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u8a33\u3067\u3001NTZ\u3068NLZ\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3068\u306f\u8a00\u3048\u3001\u3069\u3046\u3044\u3046\u65b9\u6cd5\u3067\u5b9f\u88c5\u3059\u308c\u3070\u3044\u3044\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u3001\u65e2\u306b\u30cd\u30c3\u30c8\u4e0a\u3067\u60c5\u5831\u3092\u63a2\u308c\u3070\u8272\u3005\u51fa\u3066\u304f\u308b\u306e\u3067\u3001\u4eca\u66f4\u79c1\u304c\u89e3\u8aac\u3057\u3066\u3082\u4ed5\u65b9\u3042\u308a\u307e\u305b\u3093\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u306a\u308b\u3079\u304f\u6c4e\u7528\u7684\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n#\u65b9\u6cd5\n\u307e\u305a\u306f\u4f55\u3082\u8a00\u308f\u305a\u306b\u3053\u3053\u3092\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n[\u5f53\u9762C#\u3068.NET\u306a\u8a18\u9332: [C#] \u4e00\u756a\u53f3\u7aef\u306e\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u4f4d\u7f6e\u3092\u6c42\u3081\u308b\u300c\u3082\u306e\u3059\u3054\u3044\u300d\u30b3\u30fc\u30c9](http://d.hatena.ne.jp/siokoshou/20090704#p1)\n\u4e0a\u8a18\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u9ed2\u9b54\u8853\u3092\u4f7f\u3044\u307e\u3059\u3002\u3053\u308c\u306fC#\u306e\u3082\u306e\u3067\u3059\u304c\u3001C++\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u8a18\u4e8b\u3067\u306f64bit\u306b\u95a2\u3057\u3066\u6271\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u5168\u3066\u306e\u6574\u6570\u578b\u306b\u5bfe\u5fdc\u3057\u3088\u3046\u3068\u601d\u3063\u305f\u3089\u300132bit\u300116bit\u30018bit\u306e\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n#\u8b0e\u306e\u6570\u5024\u3068\u914d\u5217\n\u4e0a\u8a18\u3067\u7d39\u4ecb\u3057\u305f\u8a18\u4e8b\u306b\u51fa\u3066\u3044\u305f\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc\u3068\u30c6\u30fc\u30d6\u30eb\u3092\u62e1\u5f35\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u6570\u5024\u3068\u914d\u5217\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```ntz_nlz.hpp\n//8bit\u7248\nstatic constexpr auto magic8 = 0x1DU;\nstatic constexpr int ntz_table8[15] = {8,  0, -1,  1,  6, -1, -1,  2,  7, -1,  5, -1, -1,  4,  3};\nstatic constexpr int nlz_table8[15] = {8,  7, -1,  6,  1, -1, -1,  5,  0, -1,  2, -1, -1,  3,  4};\n//16bit\u7248\nstatic constexpr auto magic16 = 0x0F2DU;\nstatic constexpr int ntz_table16[31] = {\n    16,  0, -1,  1, -1,  8, -1,  2, 14, -1, -1,  9, -1, 11, -1,  3,\n    15, -1,  7, -1, 13, -1, 10, -1, -1,  6, 12, -1,  5, -1,  4,\n};\nstatic constexpr int nlz_table16[31] = {\n    16, 15, -1, 14, -1,  7, -1, 13,  1, -1, -1,  6, -1,  4, -1, 12,\n     0, -1,  8, -1,  2, -1,  5, -1, -1,  9,  3, -1, 10, -1, 11,\n};\n// 32bit\u7248\nstatic constexpr auto magic32 = 0x07C56E99U;\nstatic constexpr int ntz_table32[63] = {\n    32,  0, -1,  1, -1, 10, -1,  2, 29, -1, 11, -1, 25, -1, -1,  3,\n    30, -1, -1, 23, -1, 12, 14, -1, -1, 26, -1, 16, -1, 19, -1,  4,\n    31, -1,  9, -1, 28, -1, 24, -1, -1, 22, -1, 13, -1, 15, 18, -1,\n    -1,  8, 27, -1, 21, -1, -1, 17,  7, -1, 20, -1,  6, -1,  5\n};\nstatic constexpr int nlz_table32[63] = {\n    32, 31, -1, 30, -1, 21, -1, 29,  2, -1, 20, -1,  6, -1, -1, 28,\n     1, -1, -1,  8, -1, 19, 17, -1, -1,  5, -1, 15, -1, 12, -1, 27,\n     0, -1, 22, -1,  3, -1,  7, -1, -1,  9, -1, 18, -1, 16, 13, -1,\n    -1, 23,  4, -1, 10, -1, -1, 14, 24, -1, 11, -1, 25, -1, 26\n};\n// 64bit\u7248\nstatic constexpr auto magic64 = 0x03F0A933ADCBD8D1ULL;\nstatic constexpr int ntz_table64[127] = {\n    64,  0, -1,  1, -1, 12, -1,  2, 60, -1, 13, -1, -1, 53, -1,  3,\n    61, -1, -1, 21, -1, 14, -1, 42, -1, 24, 54, -1, -1, 28, -1,  4,\n    62, -1, 58, -1, 19, -1, 22, -1, -1, 17, 15, -1, -1, 33, -1, 43,\n    -1, 50, -1, 25, 55, -1, -1, 35, -1, 38, 29, -1, -1, 45, -1,  5,\n    63, -1, 11, -1, 59, -1, 52, -1, -1, 20, -1, 41, 23, -1, 27, -1,\n    -1, 57, 18, -1, 16, -1, 32, -1, 49, -1, -1, 34, 37, -1, 44, -1,\n    -1, 10, -1, 51, -1, 40, -1, 26, 56, -1, -1, 31, 48, -1, 36, -1,\n     9, -1, 39, -1, -1, 30, 47, -1,  8, -1, -1, 46,  7, -1,  6,\n};\nstatic constexpr int nlz_table64[127] = {\n    64, 63, -1, 62, -1, 51, -1, 61,  3, -1, 50, -1, -1, 10, -1, 60,\n     2, -1, -1, 42, -1, 49, -1, 21, -1, 39,  9, -1, -1, 35, -1, 59,\n     1, -1,  5, -1, 44, -1, 41, -1, -1, 46, 48, -1, -1, 30, -1, 20,\n    -1, 13, -1, 38,  8, -1, -1, 28, -1, 25, 34, -1, -1, 18, -1, 58,\n     0, -1, 52, -1,  4, -1, 11, -1, -1, 43, -1, 22, 40, -1, 36, -1,\n    -1,  6, 45, -1, 47, -1, 31, -1, 14, -1, -1, 29, 26, -1, 19, -1,\n    -1, 53, -1, 12, -1, 23, -1, 37,  7, -1, -1, 32, 15, -1, 27, -1,\n    54, -1, 24, -1, -1, 33, 16, -1, 55, -1, -1, 17, 56, -1, 57,\n};\n```\n1bit\u5206\u62e1\u5f35\u3059\u308b\u3053\u3068\u3067\u30010\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u6027\u3092\u306a\u304f\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5206\u30c6\u30fc\u30d6\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u5897\u3048\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u304c\u3001\u305b\u3044\u305c\u30441KB\u7a0b\u5ea6\u306a\u306e\u3067\u3001\u5927\u62b5\u306e\u5834\u5408\u306f\u6c17\u306b\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\n\u3061\u306a\u307f\u306b\u3001-1\u3067\u57cb\u3081\u3089\u308c\u3066\u3044\u308b\u90e8\u5206\u306f\u4f7f\u7528\u3055\u308c\u307e\u305b\u3093\u3002\n\n#NTZ, NLZ\u7528\u306e\u578b\u7279\u6027\u30af\u30e9\u30b9\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u6271\u3046\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7279\u6027\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u307e\u3059\n\n```ntz_nlz.hpp\ntemplate<std::size_t size>\nstruct ntz_traits;\n\ntemplate<>\nstruct ntz_traits<1>\n{\n    using type = std::uint8_t;\n    static constexpr int shift = 4;\n    static constexpr auto magic = magic8;\n    static constexpr auto ntz_table = ntz_table8;\n    static constexpr auto nlz_table = nlz_table8;\n};\n\ntemplate<>\nstruct ntz_traits<2>\n{\n    using type = std::uint16_t;\n    static constexpr int shift = 11;\n    static constexpr auto magic = magic16;\n    static constexpr auto ntz_table = ntz_table16;\n    static constexpr auto nlz_table = nlz_table16;\n};\n\ntemplate<>\nstruct ntz_traits<4>\n{\n    using type = std::uint32_t;\n    static constexpr int shift = 26;\n    static constexpr auto magic = magic32;\n    static constexpr auto ntz_table = ntz_table32;\n    static constexpr auto nlz_table = nlz_table32;\n};\n\ntemplate<>\nstruct ntz_traits<8>\n{\n    using type = std::uint64_t;\n    static constexpr int shift = 57;\n    static constexpr auto magic = magic64;\n    static constexpr auto ntz_table = ntz_table64;\n    static constexpr auto nlz_table = nlz_table64;\n};\n```\n\u3053\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u6574\u6570\u578bT\u306b\u5bfe\u3057\u3066\u3001`ntz_traits<sizeof(T)>`\u3092\u4f7f\u7528\u3057\u3066\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc\u3084\u30c6\u30fc\u30d6\u30eb\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\u6574\u6570\u578b\u306e\u30d3\u30c3\u30c8\u6df1\u5ea6\u304c8, 16, 32, 64\u3067\u306a\u3044\u74b0\u5883\u306b\u95a2\u3057\u3066\u306f\u3001\u3068\u308a\u3042\u3048\u305a\u8003\u3048\u307e\u305b\u3093\u3002\u9762\u5012\u306a\u306e\u3067\u3002\n\n#NTZ\u306e\u5b9f\u88c5\n\u3055\u3066\u3001\u3053\u308c\u3060\u3051\u5b9a\u7fa9\u3057\u3066\u3057\u307e\u3048\u3070\u3001NTZ\u306e\u5b9f\u88c5\u306f\u7c21\u5358\u3067\u3059\u3002\n\n```ntz_nlz.hpp\n// SFINAE\u306b\u5fc5\u8981\u306a\u3082\u308d\u3082\u308d\nextern void* enabler;\ntemplate<bool condition, typename T = void>\nusing enable_if_type = typename std::enable_if<condition, T>::type;\ntemplate<typename T>\nusing make_unsigned_type = typename std::make_unsigned<T>::type;\n\n// unsigned\u578b\u306eNTZ\u3002\u4f8b\u306e\u9ed2\u9b54\u8853\ntemplate<typename T, enable_if_type<std::is_unsigned<T>{}>*& = enabler>\ninline constexpr int ntz(T val) noexcept {\n    using tr= ntz_traits<sizeof(T)>;\n    using type = typename tr::type;\n    return tr::ntz_table[static_cast<type>(tr::magic*static_cast<type>(val&-val))>>tr::shift];\n}\n\n// signd\u306a\u578b\u306funsigned\u306a\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\ntemplate<typename T, enable_if_type<std::is_signed<T>{}>*& = enabler>\ninline constexpr int ntz(T val) noexcept {\n    return ntz(static_cast<make_unsigned_type<T>>(val));\n}\n\n// enum\u578b\u306f\u540c\u3058\u30b5\u30a4\u30ba\u306e\u6574\u6570\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\ntemplate<typename T, enable_if_type<std::is_enum<T>{}>*& = enabler>\ninline constexpr int ntz(T val) noexcept {\n    return ntz(static_cast<typename ntz_traits<sizeof(T)>::type>(val));\n}\n\n// \u30dd\u30a4\u30f3\u30bf\u578b\u306fuintptr_t\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u6574\u6570\u578b\u3068\u3057\u3066\u6271\u3046\ntemplate<typename T>\ninline int ntz(T* val) noexcept { return ntz(reinterpret_cast<std::uintptr_t>(val)); }\n\n// bool\u578b\u306f1bit\u3068\u307f\u306a\u3059\ninline constexpr int ntz(bool val) noexcept { return val?0:1; }\n\n// nullptr\u306f0bit\u3068\u307f\u306a\u3059\u3002\u591a\u5206\u4f7f\u308f\u306a\u3044\u3051\u3069\ninline constexpr int ntz(std::nullptr_t) noexcept { return 0; }\n\n```\n\u7b26\u53f7\u306a\u3057\u306e\u6574\u6570\u578b\u3092\u57fa\u672c\u306b\u3001\u7b26\u53f7\u4ed8\u304d\u306e\u578b\u3001\u5217\u6319\u578b\u3001\u30dd\u30a4\u30f3\u30bf\u578b\u306b\u95a2\u3057\u3066\u306f\u3001\u540c\u3058\u30b5\u30a4\u30ba\u306e\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u547c\u3073\u51fa\u3059\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001`bool`\u578b\u3068`nullptr_t`\u578b\u306b\u95a2\u3057\u3066\u306f\u7279\u6b8a\u306a\u306e\u3067\u5225\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\n#NLZ\u306e\u5b9f\u88c5\n\u3055\u3066\u3001`ntz`\u3067\u306f`val&-val`\u3068\u3044\u3046\u5f0f\u3092\u4f7f\u3063\u3066\u4e00\u756a\u4e0b\u4f4d\u306e\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u3092\u6b8b\u3059\u3068\u3044\u3046\u8a08\u7b97\u3092\u884c\u3063\u305f\u308f\u3051\u3067\u3059\u304c\u3001\u4e00\u756a\u4e0a\u4f4d\u306e\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u3092\u6b8b\u3059\u306e\u306f\u5c11\u3057\u624b\u9593\u306e\u304b\u304b\u308b\u64cd\u4f5c\u3067\u3059\u3002\n\u8003\u3048\u65b9\u306f\u5358\u7d14\u3067\u3001\u4f8b\u3048\u3070`val`\u304c64bit\u306e\u578b\u306a\u3089\u3001\n\n```cpp:\nval = val | (val>>32);\nval = val | (val>>16);\nval = val | (val>>8);\nval = val | (val>>4);\nval = val | (val>>2);\nval = val | (val>>1);\nval = val ^ (val>>1);\n```\n\u3068\u3001\u4e00\u756a\u4e0a\u4f4d\u306e\u7acb\u3063\u3066\u3044\u308b\u30d3\u30c3\u30c8\u304b\u3089\u4e0b\u3092\u5168\u90e81\u306b\u3057\u3066\u304b\u3089\u3001\u4e00\u756a\u4e0a\u4f4d\u4ee5\u5916\u306e\u30d3\u30c3\u30c8\u3092\u5168\u3066\u53cd\u8ee2\u3057\u307e\u3059\u3002\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3001\u304b\u3064C++11\u306econstexpr\u3067\u3082\u5229\u7528\u53ef\u80fd\u306a\u518d\u5e30\u95a2\u6570\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u3057\u307e\u3059\u3002\n\n```ntz_nlz.hpp\ntemplate<int n>\nstruct highest_bit\n{\n    template<typename T>\n    static inline constexpr T get(T val) noexcept {\n        return highest_bit<n/2>::get(static_cast<T>(val | (val >> n)));\n    }\n};\ntemplate<>\nstruct highest_bit<1>\n{\n    template<typename T>\n    static inline constexpr T get_2(T val) noexcept { return static_cast<T>(val ^ (val >> 1)); }\n    template<typename T>\n    static inline constexpr T get(T val) noexcept { return get_2(static_cast<T>(val | (val >> 1))); }\n};\ntemplate<typename T>\ninline constexpr T get_highest_bit(T val) noexcept { return highest_bit<sizeof(T)*4>::get(val); }\n```\n\u3053\u308c\u3055\u3048\u5b9a\u7fa9\u3055\u308c\u308c\u3070\u3001\u5f8c\u306fntz\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\n```ntz_nlz.hpp\n\n// unsigned\u578b\u306eNLZ\ntemplate<typename T, enable_if_type<std::is_unsigned<T>{}>*& = enabler>\ninline constexpr int nlz(T val) noexcept {\n    using tr= ntz_traits<sizeof(T)>;\n    using type = typename tr::type;\n    return tr::nlz_table[static_cast<type>(tr::magic*get_highest_bit(val))>>tr::shift];\n}\n\ntemplate<typename T, enable_if_type<std::is_signed<T>{}>*& = enabler>\ninline constexpr int nlz(T val) noexcept {\n    return nlz(static_cast<make_unsigned_type<T>>(val));\n}\n\ntemplate<typename T, enable_if_type<std::is_enum<T>{}>*& = enabler>\ninline constexpr int nlz(T val) noexcept {\n    return nlz(static_cast<typename ntz_traits<sizeof(T)>::type>(val));\n}\n\ntemplate<typename T>\ninline int nlz(T* val) noexcept { return nlz(reinterpret_cast<std::uintptr_t>(val)); }\n\ninline constexpr int nlz(bool val) noexcept { return val?0:1; }\n\ninline constexpr int nlz(std::nullptr_t) noexcept { return 0; }\n\n```\n\n#\u7d42\u308f\u308a\u306b\n\u5192\u982d\u3067\u7d39\u4ecb\u3057\u305f\u8a18\u4e8b\u3092\u8aad\u3093\u3067\u3001\u300c\u3053\u308a\u3083\u30b9\u30b2\u30a8\uff01\u300d\u3068\u601d\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3082\u306e\u306e\u3001\u5168\u3066\u306e\u30b9\u30ab\u30e9\u30fc\u578b\u306b\u5bfe\u5fdc\u3057\u3088\u3046\u306a\u3093\u3066\u601d\u3063\u305f\u3089\u610f\u5916\u3068\u9762\u5012\u3067\u3057\u305f\u3002\n\u3042\u3001\u3067\u3082\u3053\u308c\u5168\u3066\u3058\u3083\u306a\u3044\u3067\u3059\u306d\u3002`float`\u3068`double`\u3068`long double`\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3002\n\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b\u3082\u3001`reinterpret_cast`\u3092\u4f7f\u7528\u3057\u3066\u7121\u7406\u3084\u308aIEEE754\u306e\u5185\u90e8\u8868\u73fe\u3092\u30d3\u30c3\u30c8\u5217\u3068\u898b\u505a\u3057\u3066NTZ\u3068NLZ\u3092\u3068\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c\u3001\u7279\u306b`long double`\u8fba\u308a\u306f64bit\u3088\u308a\u5927\u304d\u3044\u74b0\u5883\u3082\u3042\u3063\u305f\u308a\u3057\u3066\u9762\u5012\u3067\u3059\u3057\u3001\u9762\u5012\u306a\u5272\u306b\u306f\u4f7f\u3044\u3069\u3053\u308d\u304c\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u4eca\u56de\u306f\u7701\u304d\u307e\u3057\u305f\u3002\n\nNTZ\u306f\u6574\u6570\u578b\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3057\u305f\u6642\u306e2\u306e\u6b21\u6570\u3067\u3059\u3002\u3053\u308c\u304c\u5206\u304b\u308b\u3068\u3001\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u306e\u4e92\u9664\u6cd5\u3088\u308a\u65e9\u3044\uff08\u9664\u7b97\u3092\u4f7f\u308f\u306a\u3044\uff09\u6700\u5c0f\u516c\u500d\u6570\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u308a\u3057\u307e\u3059\u3002\nNLZ\u3092\u4f7f\u3048\u3070\u30012\u3064\u306e\u6574\u6570\u578b\u306b\u5bfe\u3057\u3066\u3001\u300c\u4e0a\u4f4d\u30d3\u30c3\u30c8\u304b\u3089\u898b\u3066\u521d\u3081\u3066\u7570\u306a\u308b\u30d3\u30c3\u30c8\u304c\u73fe\u308c\u308b\u4f4d\u7f6e\u300d\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u305d\u308c\u304c\u5206\u304b\u3063\u3066\u4f55\u306b\u306a\u308b\u3093\u3060\u3068\u601d\u308f\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u306b\u95a2\u3057\u3066\u306f\u5f8c\u65e5\u5225\u306e\u8a18\u4e8b\u3067\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u672c\u65e5\u306f\u3053\u306e\u8fba\u3067\u3002\n", "tags": ["C++11", "C++11", "NTZ", "NLZ", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}