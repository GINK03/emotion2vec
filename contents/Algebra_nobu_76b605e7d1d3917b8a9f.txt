{"tags": ["Python", "scikit-learn", "\u9854\u8a8d\u8b58", "Windows8.1"], "context": "\n\n\u3010\u74b0\u5883\u3011\n\u3000windows8.1\n\u3000Anaconda(python2.7)\n\n\u3010\u6982\u8981\u3011\n\u3000\u5800\u5317\u771f\u5e0c\u304b\u3069\u3046\u304b\u753b\u50cf\u304b\u3089\u6c7a\u5b9a\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3000\u9854\u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3092\u96c6\u3081\u3066\u3001\u305d\u308c\u3089\u3092\u6570\u5024\u5316\u3057\u3066scikit-learn\u3067\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\n\n\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\n|---face_category\n\u3000\u3000\u3000\u3000\u3000|---horikita_face(\u5800\u5317\u771f\u5e0c\u306e\u9854\u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3000\uff12\uff10\uff10\u500b)\n\u3000\u3000\u3000\u3000\u3000|---joyu_face(\u5800\u5317\u771f\u5e0c\u4ee5\u5916\u306e\u9854\u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3000\uff12\uff10\uff10\u500b)\n\u3000\u3000\u3000\u3000\u3000|---horikita_siken(\u30c6\u30b9\u30c8\u7528\u306e\u5800\u5317\u771f\u5e0c\u306e\u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3000\uff12\uff10\u500b)\n\u3000\u3000\u3000\u3000\u3000|---face_rec2.py(horikita_siken\u306e\u753b\u50cf\u304b\u3089\u9854\u3092\u62bd\u51fa)\n\u3000\u3000\u3000\u3000\u3000|---LinearSVC.py(\u30e1\u30a4\u30f3\u51e6\u7406)\n\u3000\u3000\u3000\u3000\u3000|---haarcascade_frontalface_alt.xml(\u30ab\u30b9\u30b1\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb)\n\n\n\nface_rec2.py\n#-*- coding:utf-8 -*-\ndef picture_face(before_image, num):\n\n    import cv2\n    import os\n    import sys\n\n    cascade_path = \"haarcascade_frontalface_alt.xml\"\n\n    #\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n    image_file = cv2.imread('C:/Users/nobu/Desktop/my_programs/face_category/horikita_siken/%s' % before_image)\n\n    #\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5909\u63db\n    image_gray = cv2.cvtColor(image_file, cv2.COLOR_BGR2GRAY)\n\n    #\u30ab\u30b9\u30b1\u30fc\u30c9\u5206\u985e\u5668\u306e\u7279\u5fb4\u91cf\u3092\u53d6\u5f97\u3059\u308b\n    cascade = cv2.CascadeClassifier(cascade_path)\n\n    #\u7269\u4f53\u8a8d\u8b58\uff08\u9854\u8a8d\u8b58\uff09\u306e\u5b9f\u884c\n    facerect = cascade.detectMultiScale(image_gray, scaleFactor=1.2, minNeighbors=2, minSize=(10, 10))\n\n    if facerect == None:\n        sys.exit()\n\n    for rect in facerect:\n        #\u9854\u3060\u3051\u5207\u308a\u51fa\u3057\u3066\u4fdd\u5b58\n        x = rect[0]\n        y = rect[1]\n        width = rect[2]\n        height = rect[3]\n        dst = image_file[y:y+height, x:x+width]\n        resize_image = cv2.resize(dst,(256,256))\n        new_image_path = 'C:/Users/nobu/Desktop/my_programs/face_category/' + str(num) + '_face.jpg'\n        print new_image_path\n        cv2.imwrite(new_image_path, resize_image)\n\n\n\u3000\n\nLinearSVC.py\n# -*- coding:utf-8 -*-\n\nfrom sklearn.svm import LinearSVC\nfrom PIL import Image\nimport os\nimport glob\nimport numpy as np\nimport face_rec2\n\ncurrent_dir = os.getcwd()\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\n#\u5800\u5317\u771f\u5e0c\u306e\u753b\u50cf\u3092\u6570\u5024\u3078\u5909\u63db\nhorikita_list = glob.glob(current_dir + \"\\\\horikita_face\\\\*\") \n\nhorikita_dim2 = []\n\nfor image in horikita_list:\n    #\u30b7\u30b9\u30c6\u30e0\u30d5\u30a1\u30a4\u30eb\u306e\u9664\u5916\n    if image == current_dir + \"\\\\horikita_face\\\\Thumbs.db\":\n        continue\n    else:\n        x = np.array([])\n        horikita_dim3 = np.array(Image.open(image).convert('L'))\n        #scikit-learn\u3067\u306f\uff13\u6b21\u5143\u4ee5\u4e0a\u306f\u6271\u3048\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\uff12\u6b21\u5143\u3078\u5909\u63db\n        for i in xrange(256):\n            x = np.r_[x,horikita_dim3[i]]\n        horikita_dim2.append(x)\n\ndata_training1 = horikita_dim2\n\n#\u5800\u5317\u771f\u5e0c\u4ee5\u5916\u306e\u753b\u50cf\u3092\u6570\u5024\u3078\u5909\u63db\njoyu_list = glob.glob(current_dir + \"\\\\joyu_face\\\\*\") \n\njoyu_dim2 = []\n\nfor image in joyu_list:\n    #\u30b7\u30b9\u30c6\u30e0\u30d5\u30a1\u30a4\u30eb\u306e\u9664\u5916\n    if image == current_dir + \"\\\\joyu_face\\\\Thumbs.db\":\n        continue\n    else:\n        x = np.array([])\n        joyu_dim3 = np.array(Image.open(image).convert('L'))\n        #scikit-learn\u3067\u306f\uff13\u6b21\u5143\u4ee5\u4e0a\u306f\u6271\u3048\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\uff12\u6b21\u5143\u3078\u5909\u63db\n        for i in xrange(256):\n            x = np.r_[x,joyu_dim3[i]]\n        joyu_dim2.append(x)\ndata_training2 = joyu_dim2\n\ndata_training = np.r_[data_training1, data_training2]\n\n#\u30e9\u30d9\u30eb\u8a2d\u5b9a\nlabel_training = []\nfor i in xrange(400):\n    if i < 200:\n        label_training.append(1)\n    else:\n        label_training.append(0)\n\n # \u5b66\u7fd2\nestimator = LinearSVC(C=0.5)\nestimator.fit(data_training, label_training)\n\nj = 0\n# \u8a66\u9a13\u30c7\u30fc\u30bf\nfor i in xrange(1,21):\n    face_rec2.picture_face(str(i) + '.jpg', i)\n    horikita_siken = np.array([])\n    try:\n        horikita = np.array(Image.open('C:/Users/nobu/Desktop/my_programs/face_category/' + str(i) + '_face.jpg').convert('L'))\n        for j in xrange(256):\n                    horikita_siken = np.r_[horikita_siken,horikita[j]]\n        data_test = horikita_siken\n\n        # \u4e88\u6e2c\u3059\u308b\u3088\u30fc\n        label_prediction = estimator.predict(data_test)\n\n        if label_prediction == 1:\n            print \"----------------------------------------------\"\n            print str(i) + \".jpg\u3000\u306f\u5800\u5317\u771f\u5e0c\u3067\u3059\"\n            print \"----------------------------------------------\"\n        else:\n            print \"----------------------------------------------\"\n            print str(i) + \".jpg\u3000\u306f\u5800\u5317\u771f\u5e0c\u3067\u306f\u3042\u308a\u307e\u305b\u3093\"\n            print \"----------------------------------------------\"\n    except:\n        print \"----------------------------------------------\"\n        print str(i) + \".jpg\u306f\u51e6\u7406\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\"\n        print \"----------------------------------------------\"\n        continue\n\n\n\n\u3010\u7d50\u679c\u3011\n\u3000\u5931\u6557\u30fb\u30fb\u30fb  \n\u3000\u30c6\u30b9\u30c8\u7528\u306e\u5800\u5317\u771f\u5e0c\u306e\u9854\u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3000\uff12\uff10\u500b\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3057\u305f\u304c\u3001\u306a\u305c\u304b\n\u3000\u300c\u5800\u5317\u771f\u5e0c\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u300d\u3068\u3044\u304f\u3064\u304b\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3000\u4f55\u304b\u89e3\u6c7a\u7b56\u3084\u6539\u5584\u70b9\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\n\n\u3010\u53c2\u8003\u30b5\u30a4\u30c8\u3011\nscikit-learn\u3067\u6a5f\u68b0\u5b66\u7fd2\u3092\u8a66\u3059 SVM\nOpenCV\u3067\u9854\u8a8d\u8b58\u3092\u884c\u3044\u3001\u9854\u306e\u90e8\u5206\u3060\u3051\u30c8\u30ea\u30df\u30f3\u30b0\u3057\u3066\u4fdd\u5b58\u3059\u308b\u3010Python\u3011\n#\u3010\u74b0\u5883\u3011\n\u3000windows8.1\n\u3000Anaconda(python2.7)\n\n#\u3010\u6982\u8981\u3011\n\u3000\u5800\u5317\u771f\u5e0c\u304b\u3069\u3046\u304b\u753b\u50cf\u304b\u3089\u6c7a\u5b9a\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3000\u9854\u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3092\u96c6\u3081\u3066\u3001\u305d\u308c\u3089\u3092\u6570\u5024\u5316\u3057\u3066scikit-learn\u3067\u5b66\u7fd2\u3055\u305b\u307e\u3059\u3002\n\n\n```text:\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\n|---face_category\n\u3000\u3000\u3000\u3000\u3000|---horikita_face(\u5800\u5317\u771f\u5e0c\u306e\u9854\u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3000\uff12\uff10\uff10\u500b)\n\u3000\u3000\u3000\u3000\u3000|---joyu_face(\u5800\u5317\u771f\u5e0c\u4ee5\u5916\u306e\u9854\u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3000\uff12\uff10\uff10\u500b)\n\u3000\u3000\u3000\u3000\u3000|---horikita_siken(\u30c6\u30b9\u30c8\u7528\u306e\u5800\u5317\u771f\u5e0c\u306e\u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3000\uff12\uff10\u500b)\n\u3000\u3000\u3000\u3000\u3000|---face_rec2.py(horikita_siken\u306e\u753b\u50cf\u304b\u3089\u9854\u3092\u62bd\u51fa)\n\u3000\u3000\u3000\u3000\u3000|---LinearSVC.py(\u30e1\u30a4\u30f3\u51e6\u7406)\n\u3000\u3000\u3000\u3000\u3000|---haarcascade_frontalface_alt.xml(\u30ab\u30b9\u30b1\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb)\n```\n\n```py:face_rec2.py\n#-*- coding:utf-8 -*-\ndef picture_face(before_image, num):\n\n    import cv2\n    import os\n    import sys\n    \n    cascade_path = \"haarcascade_frontalface_alt.xml\"\n    \n    #\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n    image_file = cv2.imread('C:/Users/nobu/Desktop/my_programs/face_category/horikita_siken/%s' % before_image)\n    \n    #\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5909\u63db\n    image_gray = cv2.cvtColor(image_file, cv2.COLOR_BGR2GRAY)\n    \n    #\u30ab\u30b9\u30b1\u30fc\u30c9\u5206\u985e\u5668\u306e\u7279\u5fb4\u91cf\u3092\u53d6\u5f97\u3059\u308b\n    cascade = cv2.CascadeClassifier(cascade_path)\n    \n    #\u7269\u4f53\u8a8d\u8b58\uff08\u9854\u8a8d\u8b58\uff09\u306e\u5b9f\u884c\n    facerect = cascade.detectMultiScale(image_gray, scaleFactor=1.2, minNeighbors=2, minSize=(10, 10))\n    \n    if facerect == None:\n        sys.exit()\n    \n    for rect in facerect:\n        #\u9854\u3060\u3051\u5207\u308a\u51fa\u3057\u3066\u4fdd\u5b58\n        x = rect[0]\n        y = rect[1]\n        width = rect[2]\n        height = rect[3]\n        dst = image_file[y:y+height, x:x+width]\n        resize_image = cv2.resize(dst,(256,256))\n        new_image_path = 'C:/Users/nobu/Desktop/my_programs/face_category/' + str(num) + '_face.jpg'\n        print new_image_path\n        cv2.imwrite(new_image_path, resize_image)\n```\n\n\u3000\n\n```py:LinearSVC.py\n# -*- coding:utf-8 -*-\n\nfrom sklearn.svm import LinearSVC\nfrom PIL import Image\nimport os\nimport glob\nimport numpy as np\nimport face_rec2\n\ncurrent_dir = os.getcwd()\n\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\n#\u5800\u5317\u771f\u5e0c\u306e\u753b\u50cf\u3092\u6570\u5024\u3078\u5909\u63db\nhorikita_list = glob.glob(current_dir + \"\\\\horikita_face\\\\*\") \n\nhorikita_dim2 = []\n\nfor image in horikita_list:\n    #\u30b7\u30b9\u30c6\u30e0\u30d5\u30a1\u30a4\u30eb\u306e\u9664\u5916\n    if image == current_dir + \"\\\\horikita_face\\\\Thumbs.db\":\n        continue\n    else:\n        x = np.array([])\n        horikita_dim3 = np.array(Image.open(image).convert('L'))\n        #scikit-learn\u3067\u306f\uff13\u6b21\u5143\u4ee5\u4e0a\u306f\u6271\u3048\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\uff12\u6b21\u5143\u3078\u5909\u63db\n        for i in xrange(256):\n            x = np.r_[x,horikita_dim3[i]]\n        horikita_dim2.append(x)\n\ndata_training1 = horikita_dim2\n\n#\u5800\u5317\u771f\u5e0c\u4ee5\u5916\u306e\u753b\u50cf\u3092\u6570\u5024\u3078\u5909\u63db\njoyu_list = glob.glob(current_dir + \"\\\\joyu_face\\\\*\") \n\njoyu_dim2 = []\n\nfor image in joyu_list:\n    #\u30b7\u30b9\u30c6\u30e0\u30d5\u30a1\u30a4\u30eb\u306e\u9664\u5916\n    if image == current_dir + \"\\\\joyu_face\\\\Thumbs.db\":\n        continue\n    else:\n        x = np.array([])\n        joyu_dim3 = np.array(Image.open(image).convert('L'))\n        #scikit-learn\u3067\u306f\uff13\u6b21\u5143\u4ee5\u4e0a\u306f\u6271\u3048\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001\uff12\u6b21\u5143\u3078\u5909\u63db\n        for i in xrange(256):\n            x = np.r_[x,joyu_dim3[i]]\n        joyu_dim2.append(x)\ndata_training2 = joyu_dim2\n\ndata_training = np.r_[data_training1, data_training2]\n\n#\u30e9\u30d9\u30eb\u8a2d\u5b9a\nlabel_training = []\nfor i in xrange(400):\n    if i < 200:\n        label_training.append(1)\n    else:\n        label_training.append(0)\n\n # \u5b66\u7fd2\nestimator = LinearSVC(C=0.5)\nestimator.fit(data_training, label_training)\n\nj = 0\n# \u8a66\u9a13\u30c7\u30fc\u30bf\nfor i in xrange(1,21):\n    face_rec2.picture_face(str(i) + '.jpg', i)\n    horikita_siken = np.array([])\n    try:\n        horikita = np.array(Image.open('C:/Users/nobu/Desktop/my_programs/face_category/' + str(i) + '_face.jpg').convert('L'))\n        for j in xrange(256):\n                    horikita_siken = np.r_[horikita_siken,horikita[j]]\n        data_test = horikita_siken\n        \n        # \u4e88\u6e2c\u3059\u308b\u3088\u30fc\n        label_prediction = estimator.predict(data_test)\n        \n        if label_prediction == 1:\n            print \"----------------------------------------------\"\n            print str(i) + \".jpg\u3000\u306f\u5800\u5317\u771f\u5e0c\u3067\u3059\"\n            print \"----------------------------------------------\"\n        else:\n            print \"----------------------------------------------\"\n            print str(i) + \".jpg\u3000\u306f\u5800\u5317\u771f\u5e0c\u3067\u306f\u3042\u308a\u307e\u305b\u3093\"\n            print \"----------------------------------------------\"\n    except:\n        print \"----------------------------------------------\"\n        print str(i) + \".jpg\u306f\u51e6\u7406\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\"\n        print \"----------------------------------------------\"\n        continue\n```\n\n#\u3010\u7d50\u679c\u3011\n\u3000\u5931\u6557\u30fb\u30fb\u30fb :weary: \n\u3000\u30c6\u30b9\u30c8\u7528\u306e\u5800\u5317\u771f\u5e0c\u306e\u9854\u753b\u50cf\u30d5\u30a9\u30eb\u30c0\u3000\uff12\uff10\u500b\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3057\u305f\u304c\u3001\u306a\u305c\u304b\n\u3000\u300c\u5800\u5317\u771f\u5e0c\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u300d\u3068\u3044\u304f\u3064\u304b\u51fa\u529b\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3000\u4f55\u304b\u89e3\u6c7a\u7b56\u3084\u6539\u5584\u70b9\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\n\n#\u3010\u53c2\u8003\u30b5\u30a4\u30c8\u3011\n[scikit-learn\u3067\u6a5f\u68b0\u5b66\u7fd2\u3092\u8a66\u3059 SVM](http://qiita.com/yasunori/items/8720c85e75b4679cae47)\n[OpenCV\u3067\u9854\u8a8d\u8b58\u3092\u884c\u3044\u3001\u9854\u306e\u90e8\u5206\u3060\u3051\u30c8\u30ea\u30df\u30f3\u30b0\u3057\u3066\u4fdd\u5b58\u3059\u308b\u3010Python\u3011](http://famirror.hateblo.jp/entry/2015/12/19/180000)\n"}