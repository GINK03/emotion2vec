{"tags": ["math"], "context": " More than 1 year has passed since last update.\n\n\u304d\u3063\u304b\u3051\n\u3000\u3000\u5bb6\u5ead\u6559\u5e2b\u3067\u9023\u7acb\u65b9\u7a0b\u5f0f\u6559\u3048\u3066\u3066\u3075\u3068\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u305f\u304f\u306a\u308a\u307e\u3057\u3066\u3001\n\u3000\u3000\u610f\u5916\u3068\u3081\u3093\u3069\u304f\u3055\u305d\u3049\u3068\u601d\u3044\u306a\u304c\u3089\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u9023\u7acb\u65b9\u7a0b\u5f0f\n\u3000\u3000\u3053\u306e\u65b9\u7a0b\u5f0f\u3063\u3066\u610f\u5916\u3068\u4e0d\u601d\u8b70\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3060\u3068\u66f8\u304d\u3065\u3089\u3044\u6c17\u304c\u3057\u307e\u3059\n\u3000\u3000\u305d\u3053\u3067\u5b66\u90e8\uff11\u5e74\u3060\u3063\u305f\u6642\n\u3000\u3000\u7ae5\u8c9e\u304f\u3055\u3044\u6559\u6388\u300c\u9006\u884c\u5217\u3092\u4f7f\u3048\uff01\u300d\n\u3000\u3000\u3055\u3059\u304c\u7ae5\u8c9e\u8a00\u3046\u3053\u3068\u9055\u3046\u305c\u3068\u601d\u3044\n\u3000\u3000python\u306enumpy\u306b\u656c\u793c\u3092\u3057\u306a\u304c\u3089\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\uff01\n\n\u9023\u7acb\u65b9\u7a0b\u5f0f.py\n  1 # -*- coding: utf-8 -*-\n  2 import numpy\n  3 \n  4 '''\n  5 2(x1)+5(x2)=17\n  6 5(x1)-2(x2)=-1 \u306e\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u6c42\u3081\u308b\n  7 '''\n  8 \n  9 def inver(a1,a2,b1,b2):\n 10         mat=numpy.matrix([[a1,a2],[b1,b2]])\n 11         return mat.I\n 12 \n 13 def ans(con1,con2,inver_mat):\n 14         con_vec=numpy.matrix([[con1],[con2]])\n 15         return numpy.dot(inver_mat,con_vec)\n 16 \n 17 ans_mat=ans(17,-1,inver(2,5,5,-2))\n 18 \n 19 for index,num in enumerate(ans_mat):\n 20         print \"x{0}={1}\".format(index,num)\n\n\n\u306a\u3093\u304b\u3059\u3052\u3047\u7df4\u7fd2\u306e\u3064\u3082\u308a\u3067\u66f8\u3044\u305f\u3051\u3069(\u30b3\u30fc\u30c9\u304c\u6c5a\u3044\u50d5\u3067\u3082\uff09\u307e\u3060\u7dba\u9e97\u30fb\u30fb\u30fbw\n\u3055\u3059\u304cpython\u3067\u3059\u306d\u3002\n\uff08\u3061\u306a\u307f\u306b\u81ea\u5206\u306fpython\u306e\"py\"\u3063\u3066\u3044\u3046\u3068\u3053\u308d\u304c\u597d\u304d\u3067\u4f7f\u3044\u59cb\u3081\u307e\u3057\u305f\uff09\n\u3061\u3087\u3063\u3068\u3053\u308c\u3092\u4eca\u5ea6\u306fn\u6b21\u306e\u9023\u7acb\u3067\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u30fc\n# \u304d\u3063\u304b\u3051\n\u3000\u3000\u5bb6\u5ead\u6559\u5e2b\u3067\u9023\u7acb\u65b9\u7a0b\u5f0f\u6559\u3048\u3066\u3066\u3075\u3068\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u305f\u304f\u306a\u308a\u307e\u3057\u3066\u3001\n\u3000\u3000\u610f\u5916\u3068\u3081\u3093\u3069\u304f\u3055\u305d\u3049\u3068\u601d\u3044\u306a\u304c\u3089\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n# \u9023\u7acb\u65b9\u7a0b\u5f0f\n\u3000\u3000\u3053\u306e\u65b9\u7a0b\u5f0f\u3063\u3066\u610f\u5916\u3068\u4e0d\u601d\u8b70\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3060\u3068\u66f8\u304d\u3065\u3089\u3044\u6c17\u304c\u3057\u307e\u3059\n\u3000\u3000\u305d\u3053\u3067\u5b66\u90e8\uff11\u5e74\u3060\u3063\u305f\u6642\n\u3000\u3000\u7ae5\u8c9e\u304f\u3055\u3044\u6559\u6388\u300c\u9006\u884c\u5217\u3092\u4f7f\u3048\uff01\u300d\n\u3000\u3000\u3055\u3059\u304c\u7ae5\u8c9e\u8a00\u3046\u3053\u3068\u9055\u3046\u305c\u3068\u601d\u3044\n\u3000\u3000python\u306enumpy\u306b\u656c\u793c\u3092\u3057\u306a\u304c\u3089\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\uff01\n\n```lang:\u9023\u7acb\u65b9\u7a0b\u5f0f.py\n  1 # -*- coding: utf-8 -*-\n  2 import numpy\n  3 \n  4 '''\n  5 2(x1)+5(x2)=17\n  6 5(x1)-2(x2)=-1 \u306e\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u6c42\u3081\u308b\n  7 '''\n  8 \n  9 def inver(a1,a2,b1,b2):\n 10         mat=numpy.matrix([[a1,a2],[b1,b2]])\n 11         return mat.I\n 12 \n 13 def ans(con1,con2,inver_mat):\n 14         con_vec=numpy.matrix([[con1],[con2]])\n 15         return numpy.dot(inver_mat,con_vec)\n 16 \n 17 ans_mat=ans(17,-1,inver(2,5,5,-2))\n 18 \n 19 for index,num in enumerate(ans_mat):\n 20         print \"x{0}={1}\".format(index,num)\n```\n\n\u306a\u3093\u304b\u3059\u3052\u3047\u7df4\u7fd2\u306e\u3064\u3082\u308a\u3067\u66f8\u3044\u305f\u3051\u3069(\u30b3\u30fc\u30c9\u304c\u6c5a\u3044\u50d5\u3067\u3082\uff09\u307e\u3060\u7dba\u9e97\u30fb\u30fb\u30fbw\n\u3055\u3059\u304cpython\u3067\u3059\u306d\u3002\n\uff08\u3061\u306a\u307f\u306b\u81ea\u5206\u306fpython\u306e\"py\"\u3063\u3066\u3044\u3046\u3068\u3053\u308d\u304c\u597d\u304d\u3067\u4f7f\u3044\u59cb\u3081\u307e\u3057\u305f\uff09\n\u3061\u3087\u3063\u3068\u3053\u308c\u3092\u4eca\u5ea6\u306fn\u6b21\u306e\u9023\u7acb\u3067\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u30fc\n"}