{"context": " More than 1 year has passed since last update.\u5272\u3068\u305f\u3060\u306e\u30e1\u30e2\u66f8\u304d\u306a\u306e\u3067\u3001\u8aad\u307e\u306a\u304f\u3066\u3088\u3044\u3067\u3059\uff01\n\u305f\u3060\u5206\u304b\u3063\u3066\u3044\u308b\u3068RecyclerView\u3068\u4ef2\u826f\u304f\u306a\u308c\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\nRecyclerView\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304b\uff1f\n\u3044\u304f\u3064\u304b\u306e\u30d1\u30fc\u30c4\u3067\u51fa\u6765\u3066\u3044\u3066\u7d50\u69cb\u3067\u304b\u3044\u3067\u3059\u3088\u306d\u3001\u3001\n\u666e\u901a\u306b\u8aad\u3080\u3068\u3064\u3089\u305d\u3046\u3067\u3059(\u81ea\u5206\u306b\u306f\u8f9b\u3044\u3067\u3059)\n\u307e\u305f\u3001\u4ee5\u4e0b\u306e\u69d8\u306a\u753b\u50cf\u304cAndroid Developer\u306b\u3042\u308a\u307e\u3059\u304c\u3061\u3087\u3063\u3068\u3053\u308c\u3060\u3051\u3060\u3068\u3061\u3087\u3063\u3068\u3046\u30fc\u3093\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\u3002\nhttps://developer.android.com/training/material/lists-cards.html\n\n\u3067\u3059\u304cRecyclerView\u3082\u305f\u3060\u306eViewGrop\u3092\u7d99\u627f\u3057\u305fView\u306e\u306f\u305a\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u666e\u901a\u306b\u30ab\u30b9\u30bf\u30e0ViewGroup\u3068\u540c\u3058\u3088\u3046\u306bonLayout()\u304c\u3042\u308a\u307e\u3059\u3002\nRecyclerView\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30c7\u30d0\u30c3\u30ac\u30fc\u3067\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u3064\u3051\u308c\u3070\u3001\u51fa\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3068\u540c\u3058\u5834\u6240\u3092\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u8aad\u3080\u3068\u304d\u306b\u5fc5\u8981\u306a\u5834\u6240\u3060\u3051\u8aad\u3081\u3066\u826f\u3044\u3067\u3059\u3002\n\u4eca\u56de\u306f\u30d0\u30fc\u30b8\u30e7\u30f3\u304c23.1.0\u3067LinearLayoutManager\u3067\u7e26\u306b\u4e26\u3079\u3066\u666e\u901a\u306b\u8868\u793a\u3059\u308b\u5834\u5408\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u5b50View\u304c\u4f5c\u3089\u308c\u308b\u307e\u3067(Adapter.onCreateViewHolder\u304c\u547c\u3070\u308c\u308b\u307e\u3067)\nRecyclerView#onLayout()\u3067RecyclerView#dispatchLayout()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002(\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304cTraceCompat\u4fbf\u5229\u305d\u3046\u3067\u3059\u306d\u3001\u3001)\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        eatRequestLayout();\n        TraceCompat.beginSection(TRACE_ON_LAYOUT_TAG);\n        dispatchLayout();\n        TraceCompat.endSection();\n        resumeRequestLayout(false);\n        mFirstLayoutComplete = true;\n    }\n\nRecyclerView#dispatchLayout();\n    void dispatchLayout() {\n...\n        mState.mItemCount = mAdapter.getItemCount();\n\n\u3055\u3063\u305d\u304fmAdapter\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u306e\u6570\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\uff01\u3053\u308c\u306fRecyclerView.Adapter\u3067\u3044\u3064\u3082\u5b9f\u88c5\u3059\u308b\u3084\u3064\u3067\u3059\uff01\n\u307e\u3060RecyclerView#dispatchLayout()\u3067\u3059\u3002\n...\n        mLayout.onLayoutChildren(mRecycler, mState);\n...\n\n\u3053\u306emLayout\u306fLayoutManager\u3067\u3059\u3002\nLinearLayoutManager#onLayoutChildren()\u3092\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {\n\n...\n        if (mAnchorInfo.mLayoutFromEnd) {\n...\n        } else {\n//\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u6307\u5b9a\u306e\u4ed5\u65b9\u306f\u666e\u901aLayoutFromEnd\u306b\u3057\u306a\u3044\u3068\u304a\u3082\u3046\u306e\u3067\u3053\u3061\u3089\u3067\u3059\u3002\n            fill(recycler, mLayoutState, state, false);\n\nRecyclerView.LayoutState\u30af\u30e9\u30b9\u3067fill\u3059\u308b\u3068\u304d\u306e\u72b6\u614b\u3092\u7ba1\u7406\u3059\u308b\u307f\u305f\u3044\u3067\u3059\n    /**\n     * Helper class that keeps temporary state while {LayoutManager} is filling out the empty\n     * space.\n     */\n    static class LayoutState {\n\nLinearLayoutManager#fill\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n    /**\n     * The magic functions :). Fills the given layout, defined by the layoutState. This is fairly\n     * independent from the rest of the {@link android.support.v7.widget.LinearLayoutManager}\n     * and with little change, can be made publicly available as a helper class.\n     *\n     * @param recycler        Current recycler that is attached to RecyclerView\n     * @param layoutState     Configuration on how we should fill out the available space.\n     * @param state           Context passed by the RecyclerView to control scroll steps.\n     * @param stopOnFocusable If true, filling stops in the first focusable new child\n     * @return Number of pixels that it added. Useful for scoll functions.\n     */\n    int fill(RecyclerView.Recycler recycler, LayoutState layoutState,\n            RecyclerView.State state, boolean stopOnFocusable) {\n...\n        while (remainingSpace > 0 && layoutState.hasMore(state)) {\n...\n            layoutChunk(recycler, state, layoutState, layoutChunkResult);\n...\n\n\u3053\u3053\u306ewhile\u3067\u5b50View\u4e00\u500b\u4e00\u500b\u3092\u5b9f\u969b\u306b\u30ec\u30a4\u30a2\u30a6\u30c8\u3057\u3066\u3044\u304d\u307e\u3059\uff01\uff01\nremainingSpace > 0\u3067\u6b8b\u308a\u306e\u8868\u793a\u30b9\u30da\u30fc\u30b9\u304c\u6709\u308b\u304b\u3069\u3046\u304b\u3068\u3001\u6b21\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308b\u304b\u3092layoutState.hasMore\u3067\u805e\u3044\u3066\u3001\u306a\u3051\u308c\u3070while\u304c\u7d42\u308f\u308a\u307e\u3059\u3002\nLayoutManager#layoutChunk()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u5185\u3067View\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u307b\u3068\u3093\u3069\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n    void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,\n            LayoutState layoutState, LayoutChunkResult result) {\n        View view = layoutState.next(recycler);\n\nLayoutState#next()\n        View next(RecyclerView.Recycler recycler) {\n...\n            final View view = recycler.getViewForPosition(mCurrentPosition);\n            mCurrentPosition += mItemDirection;\n            return view;\n        }\n\nRecycler#getViewForPosition()\n\u5206\u304b\u308a\u3084\u3059\u3044\u540d\u524d\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u3068\u3066\u3082\u3067\u304b\u3044\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\nscrap\u3068\u3044\u3046\u518d\u5229\u7528\u3059\u308bViewHolder\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u99c6\u4f7f\u3057\u3066View\u3092\u8fd4\u305d\u3046\u3068\u3057\u307e\u3059\u3002\n        View getViewForPosition(int position, boolean dryRun) {\n...\n            ViewHolder holder = null;\n...\n            if (holder == null) {\n                holder = getScrapViewForPosition(position, INVALID_TYPE, dryRun);\n...\n\ngetScrapViewForPosition\u3092\u5b9f\u884c\u3057\u307e\u3059\u304cScrap(RecyclerView\u306eViewHolder\u306e\u30ad\u30e3\u30c3\u30b7\u30e5)\u304c\u306a\u3044\u306e\u3067holder\u306fnull\u3067\u3059\u3002\nRecycler#getViewForPosition()\u7d9a\u304d\n...\n            if (holder == null) {\n...\n                final int type = mAdapter.getItemViewType(offsetPosition);\n\n\u3053\u3053\u3067Adapter\u304b\u3089getItemViewType\u3057\u3066ViewType\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nRecyclerView\u306b\u306fView\u306e\u7a2e\u985e\u3092\u7ba1\u7406\u3059\u308b\u4ed5\u7d44\u307f\u304c\u3042\u308a\u3001\u305d\u306e\u4ed5\u7d44\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\nRecycler#getViewForPosition()\u7d9a\u304d\n...\n    holder = getRecycledViewPool().getRecycledView(type);\n...\n\n\u3053\u3061\u3089\u3082scrap\u304b\u3089\u53d6\u308a\u51fa\u305d\u3046\u3068\u3059\u308b\u51e6\u7406\u306e\u3088\u3046\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u884c\u3063\u305f\u5f8c\u3082\u3001\u307e\u3060null\u3067\u3059\u3002\nRecycler#getViewForPosition()\u7d9a\u304d\n                    holder = mAdapter.createViewHolder(RecyclerView.this, type);\n\n\u3084\u3063\u3068Adapter\u306eonCreateViewHolder\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u6765\u307e\u3057\u305f\uff01\nRecyclerView.Adapter#createViewHolder\n        public final VH createViewHolder(ViewGroup parent, int viewType) {\n            TraceCompat.beginSection(TRACE_CREATE_VIEW_TAG);\n            final VH holder = onCreateViewHolder(parent, viewType);\n            holder.mItemViewType = viewType;\n            TraceCompat.endSection();\n            return holder;\n        }\n\n\u3053\u308c\u3067RecyclerView.Adapter\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067onCreateViewHolder\u304c\u547c\u3073\u3060\u3055\u308c\u307e\u3057\u305f\uff01\nholder.mItemViewType\u3092\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b50View\u306b\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u307e\u3067(Adapter.onBindViewHolder\u304c\u547c\u3070\u308c\u308b\u307e\u3067)\nRecycler#getViewForPosition()\u7d9a\u304d\n                final int offsetPosition = mAdapterHelper.findPositionOffset(position);\n                holder.mOwnerRecyclerView = RecyclerView.this;\n                mAdapter.bindViewHolder(holder, offsetPosition);\n\nmAdapterHelper.findPositionOffset\u3053\u3061\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u3067postponed\uff1f\u306b\u306a\u3063\u3066\u3044\u308b\u6570\u3092\u9664\u3044\u3066position\u304c\u53d6\u5f97\u3067\u304d\u3066\u3001RecyclerView.Adapter#bindViewHolder\u3092\u547c\u3073\u51fa\u3057\u3066\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\uff01\n\nView\u306e\u5927\u304d\u3055\u3092\u6c7a\u5b9a\u3059\u308b\n            final ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();\n            final LayoutParams rvLayoutParams;\n...\n                rvLayoutParams = (LayoutParams) generateLayoutParams(lp);\n                holder.itemView.setLayoutParams(rvLayoutParams);\n...\n            rvLayoutParams.mViewHolder = holder;\n...\n            return holder.itemView;\n\n\u5927\u4f53\u306f\u666e\u901a\u306bLayoutParams\u3092\u4f5c\u6210\u3057\u3066\u30bb\u30c3\u30c8\u3059\u308b\u306e\u307f\u3067\u3059\u3002\u7279\u5225\u306a\u3053\u3068\u306f\u591a\u5206\u3053\u306e\u6642\u70b9\u3067\u306f\u3057\u3066\u3044\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305f\u3053\u3053\u3067LayoutParams\u306bViewHolder\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067LinearLayoutManager#layoutChunk()\u307e\u3067\u623b\u3063\u3066\u304d\u307e\u3057\u305f\u3002\nlayoutState.next(recycler)\u3067Adapter\u3092\u4f7f\u3063\u3066View\u3092\u4f5c\u3063\u3066\u3001\u30c7\u30fc\u30bf\u304c\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305fView\u304c\u53d6\u5f97\u3055\u308c\u307e\u3057\u305f\u3002\n    void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,\n            LayoutState layoutState, LayoutChunkResult result) {\n...\n        View view = layoutState.next(recycler); // \u2190\u3053\u3053\u307e\u3067\u3067\u30af\u30ea\u30a2\uff01\n...\n        LayoutParams params = (LayoutParams) view.getLayoutParams();\n...\n                addView(view);\n\n\u3053\u308c\u3067\u3084\u3063\u3068\u30ec\u30a4\u30a2\u30a6\u30c8\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\nLinearLayoutManager#layoutChunk\u5185\n        measureChildWithMargins(view, 0, 0);\n\n        public void measureChildWithMargins(View child, int widthUsed, int heightUsed) {\n            final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n\n            final Rect insets = mRecyclerView.getItemDecorInsetsForChild(child);\n            widthUsed += insets.left + insets.right;\n            heightUsed += insets.top + insets.bottom;\n\n            final int widthSpec = getChildMeasureSpec(getWidth(),\n                    getPaddingLeft() + getPaddingRight() +\n                            lp.leftMargin + lp.rightMargin + widthUsed, lp.width,\n                    canScrollHorizontally());\n            final int heightSpec = getChildMeasureSpec(getHeight(),\n                    getPaddingTop() + getPaddingBottom() +\n                            lp.topMargin + lp.bottomMargin + heightUsed, lp.height,\n                    canScrollVertically());\n            child.measure(widthSpec, heightSpec);\n        }\n\n\u5b50View\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u5927\u304d\u3055\u304c\u3053\u306e\u30b3\u30fc\u30c9\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\nRecyclerView#getItemDecorInsetsForChild\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\n    Rect getItemDecorInsetsForChild(View child) {\n        final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n        if (!lp.mInsetsDirty) {\n            return lp.mDecorInsets;\n        }\n\n        final Rect insets = lp.mDecorInsets;\n        insets.set(0, 0, 0, 0);\n        final int decorCount = mItemDecorations.size();\n        for (int i = 0; i < decorCount; i++) {\n            mTempRect.set(0, 0, 0, 0);\n            mItemDecorations.get(i).getItemOffsets(mTempRect, child, this, mState);\n            insets.left += mTempRect.left;\n            insets.top += mTempRect.top;\n            insets.right += mTempRect.right;\n            insets.bottom += mTempRect.bottom;\n        }\n        lp.mInsetsDirty = false;\n        return insets;\n    }\n\n\u3053\u308c\u3067\u3001ItemDecorator\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u53cd\u6620\u3057\u305f\u5b50View\u306e\u5927\u304d\u3055\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\u3053\u308c\u3067\u5b50View\u306e\u5927\u304d\u3055\u304c\u6c7a\u5b9a\u3055\u308c\u307e\u3057\u305f\n\nView\u306e\u4f4d\u7f6e(x, y)\u3092\u6c7a\u5b9a\u3059\u308b\nLinearLayoutManager#layoutChunk\u5185\n        result.mConsumed = mOrientationHelper.getDecoratedMeasurement(view);\n        int left, top, right, bottom;\n        if (mOrientation == VERTICAL) {\n            if (isLayoutRTL()) {\n...\n            } else {\n                left = getPaddingLeft();\n                right = left + mOrientationHelper.getDecoratedMeasurementInOther(view);\n...\n\nresult.mConsumed\u306fView\u306e\u9ad8\u3055\u306b\u306a\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u5148\u307b\u3069\u6c7a\u307e\u3063\u305f\u5927\u304d\u3055\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nOrientationHelper.getDecoratedMeasurementInOther\u3067\u5148\u307b\u3069\u5927\u304d\u3055\u304c\u6c7a\u5b9a\u3057\u305f\u306e\u3092\u8003\u616e\u3057\u3066\u3001\u6a2a\u5e45\u3092\u53d6\u5f97\u3057\u3066\u3001\u53f3\u3068\u5de6\u306e\u5834\u6240\u3092\u6c7a\u5b9a\u3057\u307e\u3057\u305f\u3002\n                top = layoutState.mOffset;\n                bottom = layoutState.mOffset + result.mConsumed;\n\nlayoutState\u304c\u6301\u3063\u3066\u3044\u305fmOffset\u3067y\u304c\u6c7a\u307e\u308a\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u3053\u306emOffset\u306ffill\u30e1\u30bd\u30c3\u30c9\u5185\u3067layoutChunk\u304c\u7d42\u308f\u3063\u305f\u5f8c\u66f4\u65b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nLinearLayoutManager#layoutChunk\u7d9a\u304d\n        layoutDecorated(view, left + params.leftMargin, top + params.topMargin,\n                right - params.rightMargin, bottom - params.bottomMargin);\n\n        public void layoutDecorated(View child, int left, int top, int right, int bottom) {\n            final Rect insets = ((LayoutParams) child.getLayoutParams()).mDecorInsets;\n            child.layout(left + insets.left, top + insets.top, right - insets.right,\n                    bottom - insets.bottom);\n        }\n\n\u3084\u3063\u3068\u3001\u3001\u5b50View\u304c\u30ec\u30a4\u30a2\u30a6\u30c8\u3055\u308c\u307e\u3057\u305f\u3001\u3001\n\u3053\u308c\u3092LinearLayoutManager#fill\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u5fc5\u8981\u306aView\u306e\u6570\u3001\u3050\u308b\u3050\u308b\u56de\u3057\u3066layoutChunk\u3092\u547c\u3076\u3053\u3068\u3067\u3001Layout\u3057\u3066\u3044\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u591a\u5206\u3053\u3053\u307e\u3067\u8aad\u3093\u3067\u304f\u308c\u305f\u4eba\u306f\u3044\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\n\n\u307e\u3068\u3081\nViewGroup#onLayout\u304b\u3089\u59cb\u307e\u3063\u3066\u3001\nRecyclerView.Adapter\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u6570\u3092\u53d6\u5f97\u3057\u3066\u3001\nRecyclerView.Adapter\u304b\u3089View\u3092\u53d6\u5f97\u3057\u3066\u3001\nLayoutState\u3067\u30ec\u30a4\u30a2\u30a6\u30c8\u4e2d\u306e\u72b6\u614b\u3092\u7ba1\u7406\u3057\u3066\u3001\n\u30c7\u30fc\u30bf\u3092Bind\u3057\u3066\u3001addView\u3057\u3066\u3001\nItemDecolator\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u7d4c\u3066\u30ec\u30a4\u30a2\u30a6\u30c8\u3055\u308c\u307e\u3057\u305f\u3002\nLayoutManager\u306f\u30ec\u30a4\u30a2\u30a6\u30c8\u95a2\u9023\u306e\u3068\u3053\u308d\u3092\u884c\u3046\u3002\nRecyclerView\u304c\u30ea\u30b5\u30a4\u30af\u30eb\u95a2\u9023\u306e\u90e8\u5206\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u3002\n\u306a\u3069\u304c\u5f79\u5272\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u306e\u306f\u540d\u524d\u3067\u5206\u304b\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u5c11\u3057\u5177\u4f53\u7684\u306b\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u3053\u3053\u306f\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u304b\u3001\u3053\u3046\u3044\u3046\u610f\u5473\u3060\u3068\u304b\u3001RecyclerView\u5185\u3067\u3053\u3053\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u306e\u3092\u304a\u3059\u3059\u3081\u3059\u308b\u3088\u3068\u304b\u3001\u305d\u3046\u3044\u3063\u305f\u3053\u3068\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u304a\u6559\u3048\u304f\u3060\u3055\u3044\uff01\uff01\n\u5272\u3068\u305f\u3060\u306e\u30e1\u30e2\u66f8\u304d\u306a\u306e\u3067\u3001\u8aad\u307e\u306a\u304f\u3066\u3088\u3044\u3067\u3059\uff01\n\u305f\u3060\u5206\u304b\u3063\u3066\u3044\u308b\u3068RecyclerView\u3068\u4ef2\u826f\u304f\u306a\u308c\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\nRecyclerView\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304b\uff1f\n\u3044\u304f\u3064\u304b\u306e\u30d1\u30fc\u30c4\u3067\u51fa\u6765\u3066\u3044\u3066\u7d50\u69cb\u3067\u304b\u3044\u3067\u3059\u3088\u306d\u3001\u3001\n\u666e\u901a\u306b\u8aad\u3080\u3068\u3064\u3089\u305d\u3046\u3067\u3059(\u81ea\u5206\u306b\u306f\u8f9b\u3044\u3067\u3059)\n\u307e\u305f\u3001\u4ee5\u4e0b\u306e\u69d8\u306a\u753b\u50cf\u304cAndroid Developer\u306b\u3042\u308a\u307e\u3059\u304c\u3061\u3087\u3063\u3068\u3053\u308c\u3060\u3051\u3060\u3068\u3061\u3087\u3063\u3068\u3046\u30fc\u3093\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\u3002\nhttps://developer.android.com/training/material/lists-cards.html\n![\u516c\u5f0f\u306e\u753b\u50cf](https://developer.android.com/training/material/images/RecyclerView.png)\n\n\n\n\u3067\u3059\u304cRecyclerView\u3082\u305f\u3060\u306eViewGrop\u3092\u7d99\u627f\u3057\u305fView\u306e\u306f\u305a\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u666e\u901a\u306b\u30ab\u30b9\u30bf\u30e0ViewGroup\u3068\u540c\u3058\u3088\u3046\u306bonLayout()\u304c\u3042\u308a\u307e\u3059\u3002\n\nRecyclerView\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30c7\u30d0\u30c3\u30ac\u30fc\u3067\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u3064\u3051\u308c\u3070\u3001\u51fa\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3068\u540c\u3058\u5834\u6240\u3092\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u8aad\u3080\u3068\u304d\u306b\u5fc5\u8981\u306a\u5834\u6240\u3060\u3051\u8aad\u3081\u3066\u826f\u3044\u3067\u3059\u3002\n\n\n\u4eca\u56de\u306f\u30d0\u30fc\u30b8\u30e7\u30f3\u304c23.1.0\u3067LinearLayoutManager\u3067\u7e26\u306b\u4e26\u3079\u3066\u666e\u901a\u306b\u8868\u793a\u3059\u308b\u5834\u5408\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\n## \u5b50View\u304c\u4f5c\u3089\u308c\u308b\u307e\u3067(Adapter.onCreateViewHolder\u304c\u547c\u3070\u308c\u308b\u307e\u3067)\n\nRecyclerView#onLayout()\u3067RecyclerView#dispatchLayout()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002(\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304cTraceCompat\u4fbf\u5229\u305d\u3046\u3067\u3059\u306d\u3001\u3001)\n\n\n```java\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        eatRequestLayout();\n        TraceCompat.beginSection(TRACE_ON_LAYOUT_TAG);\n        dispatchLayout();\n        TraceCompat.endSection();\n        resumeRequestLayout(false);\n        mFirstLayoutComplete = true;\n    }\n```\n\nRecyclerView#dispatchLayout();\n\n```java\n    void dispatchLayout() {\n...\n        mState.mItemCount = mAdapter.getItemCount();\n```\n\u3055\u3063\u305d\u304fmAdapter\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u306e\u6570\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\uff01\u3053\u308c\u306fRecyclerView.Adapter\u3067\u3044\u3064\u3082\u5b9f\u88c5\u3059\u308b\u3084\u3064\u3067\u3059\uff01\n\u307e\u3060RecyclerView#dispatchLayout()\u3067\u3059\u3002\n\n```java\n...\n        mLayout.onLayoutChildren(mRecycler, mState);\n...\n```\n\u3053\u306emLayout\u306fLayoutManager\u3067\u3059\u3002\n\nLinearLayoutManager#onLayoutChildren()\u3092\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n\n```java\n public void onLayoutChildren(RecyclerView.Recycler recycler, RecyclerView.State state) {\n\n...\n        if (mAnchorInfo.mLayoutFromEnd) {\n...\n        } else {\n//\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u6307\u5b9a\u306e\u4ed5\u65b9\u306f\u666e\u901aLayoutFromEnd\u306b\u3057\u306a\u3044\u3068\u304a\u3082\u3046\u306e\u3067\u3053\u3061\u3089\u3067\u3059\u3002\n            fill(recycler, mLayoutState, state, false);\n```\nRecyclerView.LayoutState\u30af\u30e9\u30b9\u3067fill\u3059\u308b\u3068\u304d\u306e\u72b6\u614b\u3092\u7ba1\u7406\u3059\u308b\u307f\u305f\u3044\u3067\u3059\n\n```java\n    /**\n     * Helper class that keeps temporary state while {LayoutManager} is filling out the empty\n     * space.\n     */\n    static class LayoutState {\n```\n\n\nLinearLayoutManager#fill\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\n```\n    /**\n     * The magic functions :). Fills the given layout, defined by the layoutState. This is fairly\n     * independent from the rest of the {@link android.support.v7.widget.LinearLayoutManager}\n     * and with little change, can be made publicly available as a helper class.\n     *\n     * @param recycler        Current recycler that is attached to RecyclerView\n     * @param layoutState     Configuration on how we should fill out the available space.\n     * @param state           Context passed by the RecyclerView to control scroll steps.\n     * @param stopOnFocusable If true, filling stops in the first focusable new child\n     * @return Number of pixels that it added. Useful for scoll functions.\n     */\n    int fill(RecyclerView.Recycler recycler, LayoutState layoutState,\n            RecyclerView.State state, boolean stopOnFocusable) {\n...\n        while (remainingSpace > 0 && layoutState.hasMore(state)) {\n...\n            layoutChunk(recycler, state, layoutState, layoutChunkResult);\n...\n```\n\n\u3053\u3053\u306ewhile\u3067\u5b50View\u4e00\u500b\u4e00\u500b\u3092\u5b9f\u969b\u306b\u30ec\u30a4\u30a2\u30a6\u30c8\u3057\u3066\u3044\u304d\u307e\u3059\uff01\uff01\nremainingSpace > 0\u3067\u6b8b\u308a\u306e\u8868\u793a\u30b9\u30da\u30fc\u30b9\u304c\u6709\u308b\u304b\u3069\u3046\u304b\u3068\u3001\u6b21\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308b\u304b\u3092layoutState.hasMore\u3067\u805e\u3044\u3066\u3001\u306a\u3051\u308c\u3070while\u304c\u7d42\u308f\u308a\u307e\u3059\u3002\n\nLayoutManager#layoutChunk()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u5185\u3067View\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u307b\u3068\u3093\u3069\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\n```java\n    void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,\n            LayoutState layoutState, LayoutChunkResult result) {\n        View view = layoutState.next(recycler);\n```\n\nLayoutState#next()\n\n```java\n        View next(RecyclerView.Recycler recycler) {\n...\n            final View view = recycler.getViewForPosition(mCurrentPosition);\n            mCurrentPosition += mItemDirection;\n            return view;\n        }\n```\n\nRecycler#getViewForPosition()\n\u5206\u304b\u308a\u3084\u3059\u3044\u540d\u524d\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u3068\u3066\u3082\u3067\u304b\u3044\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\nscrap\u3068\u3044\u3046\u518d\u5229\u7528\u3059\u308bViewHolder\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u99c6\u4f7f\u3057\u3066View\u3092\u8fd4\u305d\u3046\u3068\u3057\u307e\u3059\u3002\n\n```java\n        View getViewForPosition(int position, boolean dryRun) {\n...\n            ViewHolder holder = null;\n...\n            if (holder == null) {\n                holder = getScrapViewForPosition(position, INVALID_TYPE, dryRun);\n...\n```\n\ngetScrapViewForPosition\u3092\u5b9f\u884c\u3057\u307e\u3059\u304cScrap(RecyclerView\u306eViewHolder\u306e\u30ad\u30e3\u30c3\u30b7\u30e5)\u304c\u306a\u3044\u306e\u3067holder\u306fnull\u3067\u3059\u3002\n\n\nRecycler#getViewForPosition()\u7d9a\u304d\n\n```java\n...\n            if (holder == null) {\n...\n                final int type = mAdapter.getItemViewType(offsetPosition);\n```\n\n\n\u3053\u3053\u3067Adapter\u304b\u3089getItemViewType\u3057\u3066ViewType\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nRecyclerView\u306b\u306fView\u306e\u7a2e\u985e\u3092\u7ba1\u7406\u3059\u308b\u4ed5\u7d44\u307f\u304c\u3042\u308a\u3001\u305d\u306e\u4ed5\u7d44\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\nRecycler#getViewForPosition()\u7d9a\u304d\n\n```\n...\n    holder = getRecycledViewPool().getRecycledView(type);\n...\n```\n\u3053\u3061\u3089\u3082scrap\u304b\u3089\u53d6\u308a\u51fa\u305d\u3046\u3068\u3059\u308b\u51e6\u7406\u306e\u3088\u3046\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u884c\u3063\u305f\u5f8c\u3082\u3001\u307e\u3060null\u3067\u3059\u3002\n\nRecycler#getViewForPosition()\u7d9a\u304d\n\n```java\n                    holder = mAdapter.createViewHolder(RecyclerView.this, type);\n```\n\u3084\u3063\u3068Adapter\u306eonCreateViewHolder\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u6765\u307e\u3057\u305f\uff01\n\nRecyclerView.Adapter#createViewHolder\n\n```java\n        public final VH createViewHolder(ViewGroup parent, int viewType) {\n            TraceCompat.beginSection(TRACE_CREATE_VIEW_TAG);\n            final VH holder = onCreateViewHolder(parent, viewType);\n            holder.mItemViewType = viewType;\n            TraceCompat.endSection();\n            return holder;\n        }\n```\n\n\u3053\u308c\u3067**RecyclerView.Adapter\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067onCreateViewHolder\u304c\u547c\u3073\u3060\u3055\u308c\u307e\u3057\u305f\uff01**\nholder.mItemViewType\u3092\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n# \u5b50View\u306b\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u307e\u3067(Adapter.onBindViewHolder\u304c\u547c\u3070\u308c\u308b\u307e\u3067)\n\nRecycler#getViewForPosition()\u7d9a\u304d\n\n```java\n                final int offsetPosition = mAdapterHelper.findPositionOffset(position);\n                holder.mOwnerRecyclerView = RecyclerView.this;\n                mAdapter.bindViewHolder(holder, offsetPosition);\n```\n\nmAdapterHelper.findPositionOffset\u3053\u3061\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u3067postponed\uff1f\u306b\u306a\u3063\u3066\u3044\u308b\u6570\u3092\u9664\u3044\u3066position\u304c\u53d6\u5f97\u3067\u304d\u3066\u3001**`RecyclerView.Adapter#bindViewHolder`\u3092\u547c\u3073\u51fa\u3057\u3066\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\uff01**\n\n# View\u306e\u5927\u304d\u3055\u3092\u6c7a\u5b9a\u3059\u308b\n\n```java\n            final ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();\n            final LayoutParams rvLayoutParams;\n...\n                rvLayoutParams = (LayoutParams) generateLayoutParams(lp);\n                holder.itemView.setLayoutParams(rvLayoutParams);\n...\n            rvLayoutParams.mViewHolder = holder;\n...\n            return holder.itemView;\n```\n\n\u5927\u4f53\u306f\u666e\u901a\u306bLayoutParams\u3092\u4f5c\u6210\u3057\u3066\u30bb\u30c3\u30c8\u3059\u308b\u306e\u307f\u3067\u3059\u3002\u7279\u5225\u306a\u3053\u3068\u306f\u591a\u5206\u3053\u306e\u6642\u70b9\u3067\u306f\u3057\u3066\u3044\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305f\u3053\u3053\u3067LayoutParams\u306bViewHolder\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\u3053\u3053\u3067LinearLayoutManager#layoutChunk()\u307e\u3067\u623b\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n`layoutState.next(recycler)`\u3067Adapter\u3092\u4f7f\u3063\u3066View\u3092\u4f5c\u3063\u3066\u3001\u30c7\u30fc\u30bf\u304c\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305fView\u304c\u53d6\u5f97\u3055\u308c\u307e\u3057\u305f\u3002\n\n\n```java\n    void layoutChunk(RecyclerView.Recycler recycler, RecyclerView.State state,\n            LayoutState layoutState, LayoutChunkResult result) {\n...\n        View view = layoutState.next(recycler); // \u2190\u3053\u3053\u307e\u3067\u3067\u30af\u30ea\u30a2\uff01\n...\n        LayoutParams params = (LayoutParams) view.getLayoutParams();\n...\n                addView(view);\n```\n\u3053\u308c\u3067\u3084\u3063\u3068\u30ec\u30a4\u30a2\u30a6\u30c8\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\nLinearLayoutManager#layoutChunk\u5185\n\n```java\n        measureChildWithMargins(view, 0, 0);\n```\n\n```java\n        public void measureChildWithMargins(View child, int widthUsed, int heightUsed) {\n            final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n\n            final Rect insets = mRecyclerView.getItemDecorInsetsForChild(child);\n            widthUsed += insets.left + insets.right;\n            heightUsed += insets.top + insets.bottom;\n\n            final int widthSpec = getChildMeasureSpec(getWidth(),\n                    getPaddingLeft() + getPaddingRight() +\n                            lp.leftMargin + lp.rightMargin + widthUsed, lp.width,\n                    canScrollHorizontally());\n            final int heightSpec = getChildMeasureSpec(getHeight(),\n                    getPaddingTop() + getPaddingBottom() +\n                            lp.topMargin + lp.bottomMargin + heightUsed, lp.height,\n                    canScrollVertically());\n            child.measure(widthSpec, heightSpec);\n        }\n```\n\n\u5b50View\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u5927\u304d\u3055\u304c\u3053\u306e\u30b3\u30fc\u30c9\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002\n`RecyclerView#getItemDecorInsetsForChild`\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\n\n\n\n```java\n    Rect getItemDecorInsetsForChild(View child) {\n        final LayoutParams lp = (LayoutParams) child.getLayoutParams();\n        if (!lp.mInsetsDirty) {\n            return lp.mDecorInsets;\n        }\n\n        final Rect insets = lp.mDecorInsets;\n        insets.set(0, 0, 0, 0);\n        final int decorCount = mItemDecorations.size();\n        for (int i = 0; i < decorCount; i++) {\n            mTempRect.set(0, 0, 0, 0);\n            mItemDecorations.get(i).getItemOffsets(mTempRect, child, this, mState);\n            insets.left += mTempRect.left;\n            insets.top += mTempRect.top;\n            insets.right += mTempRect.right;\n            insets.bottom += mTempRect.bottom;\n        }\n        lp.mInsetsDirty = false;\n        return insets;\n    }\n```\n\u3053\u308c\u3067\u3001ItemDecorator\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u53cd\u6620\u3057\u305f\u5b50View\u306e\u5927\u304d\u3055\u306e\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\u3053\u308c\u3067**\u5b50View\u306e\u5927\u304d\u3055\u304c\u6c7a\u5b9a\u3055\u308c\u307e\u3057\u305f**\n\n\n# View\u306e\u4f4d\u7f6e(x, y)\u3092\u6c7a\u5b9a\u3059\u308b\n\n\nLinearLayoutManager#layoutChunk\u5185\n\n```java\n        result.mConsumed = mOrientationHelper.getDecoratedMeasurement(view);\n        int left, top, right, bottom;\n        if (mOrientation == VERTICAL) {\n            if (isLayoutRTL()) {\n...\n            } else {\n                left = getPaddingLeft();\n                right = left + mOrientationHelper.getDecoratedMeasurementInOther(view);\n...\n```\nresult.mConsumed\u306fView\u306e\u9ad8\u3055\u306b\u306a\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u5148\u307b\u3069\u6c7a\u307e\u3063\u305f\u5927\u304d\u3055\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\nOrientationHelper.getDecoratedMeasurementInOther\u3067\u5148\u307b\u3069\u5927\u304d\u3055\u304c\u6c7a\u5b9a\u3057\u305f\u306e\u3092\u8003\u616e\u3057\u3066\u3001\u6a2a\u5e45\u3092\u53d6\u5f97\u3057\u3066\u3001\u53f3\u3068\u5de6\u306e\u5834\u6240\u3092\u6c7a\u5b9a\u3057\u307e\u3057\u305f\u3002\n\n```java\n                top = layoutState.mOffset;\n                bottom = layoutState.mOffset + result.mConsumed;\n```\n\n\nlayoutState\u304c\u6301\u3063\u3066\u3044\u305fmOffset\u3067y\u304c\u6c7a\u307e\u308a\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u3053\u306emOffset\u306ffill\u30e1\u30bd\u30c3\u30c9\u5185\u3067layoutChunk\u304c\u7d42\u308f\u3063\u305f\u5f8c\u66f4\u65b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\nLinearLayoutManager#layoutChunk\u7d9a\u304d\n\n```java\n        layoutDecorated(view, left + params.leftMargin, top + params.topMargin,\n                right - params.rightMargin, bottom - params.bottomMargin);\n```\n\n```java\n        public void layoutDecorated(View child, int left, int top, int right, int bottom) {\n            final Rect insets = ((LayoutParams) child.getLayoutParams()).mDecorInsets;\n            child.layout(left + insets.left, top + insets.top, right - insets.right,\n                    bottom - insets.bottom);\n        }\n```\n\n\n\u3084\u3063\u3068\u3001\u3001**\u5b50View\u304c\u30ec\u30a4\u30a2\u30a6\u30c8\u3055\u308c\u307e\u3057\u305f**\u3001\u3001\n\n\u3053\u308c\u3092LinearLayoutManager#fill\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u5fc5\u8981\u306aView\u306e\u6570\u3001\u3050\u308b\u3050\u308b\u56de\u3057\u3066layoutChunk\u3092\u547c\u3076\u3053\u3068\u3067\u3001Layout\u3057\u3066\u3044\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u591a\u5206\u3053\u3053\u307e\u3067\u8aad\u3093\u3067\u304f\u308c\u305f\u4eba\u306f\u3044\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\n\n# \u307e\u3068\u3081\nViewGroup#onLayout\u304b\u3089\u59cb\u307e\u3063\u3066\u3001\nRecyclerView.Adapter\u304b\u3089\u30a2\u30a4\u30c6\u30e0\u6570\u3092\u53d6\u5f97\u3057\u3066\u3001\nRecyclerView.Adapter\u304b\u3089View\u3092\u53d6\u5f97\u3057\u3066\u3001\nLayoutState\u3067\u30ec\u30a4\u30a2\u30a6\u30c8\u4e2d\u306e\u72b6\u614b\u3092\u7ba1\u7406\u3057\u3066\u3001\n\u30c7\u30fc\u30bf\u3092Bind\u3057\u3066\u3001addView\u3057\u3066\u3001\nItemDecolator\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u7d4c\u3066\u30ec\u30a4\u30a2\u30a6\u30c8\u3055\u308c\u307e\u3057\u305f\u3002\n\nLayoutManager\u306f\u30ec\u30a4\u30a2\u30a6\u30c8\u95a2\u9023\u306e\u3068\u3053\u308d\u3092\u884c\u3046\u3002\nRecyclerView\u304c\u30ea\u30b5\u30a4\u30af\u30eb\u95a2\u9023\u306e\u90e8\u5206\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u3002\n\u306a\u3069\u304c\u5f79\u5272\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u306e\u306f\u540d\u524d\u3067\u5206\u304b\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u5c11\u3057\u5177\u4f53\u7684\u306b\u77e5\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u3053\u3053\u306f\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u304b\u3001\u3053\u3046\u3044\u3046\u610f\u5473\u3060\u3068\u304b\u3001RecyclerView\u5185\u3067\u3053\u3053\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3080\u306e\u3092\u304a\u3059\u3059\u3081\u3059\u308b\u3088\u3068\u304b\u3001\u305d\u3046\u3044\u3063\u305f\u3053\u3068\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u304a\u6559\u3048\u304f\u3060\u3055\u3044\uff01\uff01\n", "tags": ["Android", "RecyclerView", "SupportLibrary", "\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0"]}