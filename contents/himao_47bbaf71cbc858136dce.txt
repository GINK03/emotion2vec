{"context": "https://github.com/kaepa3/imaging\n\u3068\u30bb\u30df\u9023\u52d5\u4e2d\n\n\u4eca\u65e5\u306e\u304a\u984c\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u51fa\u529b\n\n\u30c6\u30ad\u30b9\u30c8\u306e\u65b9\u306f\u3064\u3044\u306b\u300c\u30b3\u30fc\u30c9\u306f\u7a7a\u767d\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u300d\u3068\u304b\u8a00\u3063\u3066\u307e\u3059\u3002\n\u30bf\u30a4\u30c8\u30eb\u304b\u3089\u3059\u308b\u3068\u3001\u305d\u3046\u8a00\u3063\u305f\u30b3\u30fc\u30c9\u304c\u3042\u308b\u306e\u304c\u30a6\u30ea\u306e\u672c\u3058\u3083\u306a\u3044\u306e\u304b\u3068\u601d\u3044\u3064\u3064\n\u3084\u3063\u3066\u304d\u307e\u3059\u3002\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u51fa\u529b\n\u3068\u308a\u3042\u3048\u305a\u3001\u30b0\u30e9\u30d5\u306f\u4ee5\u4e0b\u306e\u3092\u53c2\u8003\u306b\u3059\u308b\u3002\nhttp://takedajs.hatenablog.jp/entry/2016/04/03/094529\n\u3053\u306e\u8fba\n    \"github.com/gonum/plot\"\n    \"github.com/gonum/plot/plotter\"\n    \"github.com/gonum/plot/plotutil\"\n\n\u3092\u4f7f\u3046\u3068\u3044\u3046\u3053\u3068\u3067go get\n$ go get github.com/gonum/plot\n\nbezier\u304c\u306a\u3044\u305d\u3046\u306a\u306e\u3067\u3001\u8ffd\u52a0\n$ go get github.com/biogo/graphics/bezier\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\nfunc (ef *effect) Histogram() {\n    //  \u30b0\u30e9\u30d5\u306e\u6e96\u5099\n    p, _ := plot.New()\n    p.Title.Text = \"histogram\"\n    p.X.Label.Text = \"X\"\n    p.Y.Label.Text = \"Y\"\n    //\u30d7\u30ed\u30c3\u30c8\u306e\u6e96\u5099\n    // \u5148\u306b\u5165\u308c\u7269\u3092\u4f5c\u308b\n    const ColorSize = math.MaxUint8 + 1\n    var dataSet [RGBAMax][ColorSize]uint16\n\n    ef.imageLoop(ef.inputImage.Bounds(), func(x, y int) color.RGBA64 {\n        //\u753b\u7d20\u3092\u305d\u308c\u305e\u308c\u6570\u3048\u308b\n        r, g, b, a := ef.inputImage.At(x, y).RGBA()\n        dataSet[IndexR][getIndex(r)]++\n        dataSet[IndexG][getIndex(g)]++\n        dataSet[IndexB][getIndex(b)]++\n        dataSet[IndexA][getIndex(a)]++\n        return color.RGBA64{0, 0, 0, 0}\n    })\n    // \u5404\u5024\u30b0\u30e9\u30d5\u306e\u30d7\u30ed\u30c3\u30c8\n    for key, v := range dataSet {\n        if key == IndexA {\n            continue\n        }\n        var line plotter.XYer\n        plots := make(plotter.XYs, ColorSize)\n        line = plots\n        for i := 0; i < len(v); i++ {\n            plots[i].X = float64(i)\n            plots[i].Y = float64(v[i])\n        }\n        graph, _, _ := plotter.NewLinePoints(line)\n        graph.Color = plotutil.Color(key)\n        p.Add(graph)\n        p.Legend.Add(\"line:\"+strconv.Itoa(key), graph)\n\n    }\n    p.Save(5*vg.Inch, 5*vg.Inch, \"sampleimage/line_sample.png\")\n    return\n}\n\n\u753b\u50cf\u306e\u69cb\u6210\u8981\u7d20\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u306d\u3002\nplot\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u898b\u3066\u3044\u308b\u3068image.Image\u3092\u8fd4\u305b\u305d\u3046\u3060\u3051\u3069\u3001\u5bfe\u5fdc\u306f\u305d\u306e\u3046\u3061\u3002\n\u3082\u3057\u304f\u306f\u5b66\u7fd2\u7528\u3060\u3057\u3084\u3089\u306a\u3044\u3002\u3057\u3001\u305d\u308c\u306a\u3089\u95a2\u6570\u5206\u3051\u305f\u3044\u3002\n\n\u51fa\u529b\u753b\u50cf\n\n\n\u7dda\u5f62\u6fc3\u5ea6\u5909\u63db\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\uff12\uff15\uff15\u968e\u8abf\u3060\u3068\uff11\uff10\uff10\u301c\uff12\uff10\uff10\u307e\u3067\u3057\u304b\u4f7f\u3063\u3066\u306a\u3044\u3002\u305d\u3046\u8a00\u3063\u305f\u5834\u5408\u306b\u57fa\u6e96\u306e\uff11\uff10\uff10\u3092\uff10\u3068\u3057\u3066\u3001\uff12\uff10\uff10\u3092\uff12\uff15\uff15\u3068\u3057\u305f\u3089\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u304c\u306f\u3063\u304d\u308a\u3059\u308b\u3093\u3067\u306a\u3044\u306e\uff1f\u3063\u3066\u3044\u3046\u8a71\u3060\u3068\u601d\u3046\u3002\n$ Z' = Z_{max} \\times \\bigr(\\frac{Z-a}{b-a}\\bigl)$\n\u6570\u5f0f\u773a\u3081\u308b\u3068\u4eca\u306eZ\u306e\u5024\u306fa\u304b\u3089b\u306e\u4f55\u5206\u306e\uff11\u3067\u3057\u3087\u3046\u304b\uff1f\u3068\u3044\u3046\u8a71\u3067\u3059\u306d\u3002\n\u6587\u5b57\u3088\u308a\u6570\u5f0f\u773a\u3081\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u306a\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\na\u3068b\u306e\u5024\u306f\u4eca\u56de\u56fa\u5b9a\u3068\u3057\u3066\u3044\u307e\u3059\u3002\nfunc (ef *effect) LinearDensity() image.Image {\n    con := func(val uint32) uint16 {\n        var levelA uint16 = 0x10\n        var levelB uint16 = 0xFF00\n\n        v := math.MaxUint16 * (float64((uint16(val) - levelA)) / float64((levelB - levelA)))\n        if v > math.MaxUint16 {\n            v = math.MaxUint16\n        } else if v < 0 {\n            v = 0\n        }\n        return uint16(v)\n    }\n    return ef.imageLoop(ef.inputImage.Bounds(), func(x, y int) color.RGBA64 {\n        r, g, _, a := ef.inputImage.At(x, y).RGBA()\n        return color.RGBA64{con(r), con(g), con(g), uint16(a)}\n    })\n}\n\n\u7279\u51fa\u3059\u3079\u304d\u306f\u5148\u306e\u6570\u5f0f\u3068\u6bd4\u8f03\u3057\u3066a\u4ee5\u4e0b\u306e\u5024\u3001b\u4ee5\u4e0a\u306e\u753b\u7d20\u304c\u542b\u307e\u308c\u305f\u5834\u5408\u306eif\u6587\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002a\u304c10\u3068\u3057\u3066\u30828\u3068\u304b\u306e\u6570\u5024\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5bfe\u7b56\u3067\u3059\u306d\u3002\n\u3042\u3068\u3001float64\u306b\u3057\u306a\u3044\u3068\u6841\u843d\u3061\u306e\u8aa4\u5dee\u3067\u51fa\u529b\u304c\u6b7b\u306b\u307e\u3059\u3002\u306a\u308b\u307b\u3069\u306a\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\n\u51fa\u529b\u753b\u50cf\n\n\u3055\u3063\u304d\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304b\u3089\u9752\u306e\u8981\u7d20\u304c\u306a\u3044\u306e\u306b\u30d5\u30a3\u30eb\u30bf\u3057\u3066\u308b\u304b\u3089\u30ce\u30a4\u30ba\u304c\u4e57\u308b\u3068\u3002\n\u5b9f\u7528\u3092\u8003\u3048\u305f\u3089RGB\u305d\u308c\u305e\u308c\u306e\u5024\u306b\u5bfe\u3057\u3066\u8a2d\u5b9a\u5024\uff08a\u3068b\uff09\u304c\u5fc5\u8981\u306b\u306a\u308b\u3093\u3067\u3057\u3087\u3046\u306a\u3002\n\n\u975e\u7dda\u5f62\u306a\u6fc3\u5ea6\u5909\u63db\n\u660e\u308b\u3055\u3060\u305d\u3046\u306a\u3002\n$ Z' = Z_{max} \\times \\bigr(\\frac{Z}{Z_{max}}\\bigl)^\u03b3$\n\u03b3\u306e\u5024\u304c\uff11\u3088\u308a\u5927\u304d\u3044\u3068\u6697\u304f\u306a\u3063\u3066\u3001\u305d\u308c\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070\u660e\u308b\u304f\u306a\u308b\u3068\u3002\n\u660e\u308b\u304f\u3059\u308b\u5834\u5408\u306f\u5143\u753b\u50cf\u306er\u306e\u5024\u304c2\u306a\u3089\uff14\u306b\u3059\u308b\u307f\u305f\u3044\u306a\u611f\u3058\u3060\u3068\u601d\u3046\u3002\n\u5168\u90e8\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u898b\u306a\u304c\u3089\u4f5c\u696d\u3057\u308d\u3063\u3066\u8a71\u306a\u3093\u3060\u308d\u3046\u3051\u3069\u3001\u9762\u5012\u3060\u304b\u3089\u307e\u305f\u4eca\u5ea6\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\ncon\u306e\u5185\u5bb9\u5909\u3048\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u305d\u3053\u3060\u3051\u62bd\u51fa\n    con := func(val uint32) uint16 {\n        gamma := 0.5\n        v := math.MaxUint16 * math.Pow(float64(val)/float64(math.MaxUint16), gamma)\n        if v > math.MaxUint16 {\n            v = math.MaxUint16\n        } else if v < 0 {\n            v = 0\n        }\n        return uint16(v)\n    }\n\n\n\u51fa\u529b\u7d50\u679c\n\u306f\u3044\u3001\u660e\u308b\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n\u3000\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u6539\u5584\nZmax/2\u3088\u308a\u5927\u304d\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u4e0e\u3048\u3089\u308c\n$ Z' = \\frac{Z_{max}}{2} \\times \\sqrt{\\frac{2Z - Z_{max}}{Z_{max}}} $\n\u5c0f\u3055\u3044\u6642\u306f\n$ Z' = Z_{max} \\times \\bigr(\\frac{Z}{Z_{max}}\\bigl)^2$\n\u3068\u3059\u308b\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\ncon := func(val uint32) uint16 {\n    maxUint := float64(math.MaxUint16)\n    var v uint16\n    if val > math.MaxUint16/2 {\n        v = uint16((maxUint / 2.0) * (1.0 + math.Sqrt((2.0*float64(val)-maxUint)/maxUint)))\n    } else {\n        // \u975e\u7dda\u5f62\u6fc3\u5ea6\u5909\u63db\n        v = unlinerCon(val, 2)\n    }\n    if v > math.MaxUint16 {\n        v = math.MaxUint16\n    } else if v < 0 {\n        v = 0\n    }\n    return uint16(v)\n}\n\n\n\u51fa\u529b\u7d50\u679c\n\n\u3053\u306e\u8fba\u3092\u30b9\u30e9\u30a4\u30c0\u30fc\u3068\u304b\u3067\u3067\u304d\u308b\u3082\u306e\u3092\u4f5c\u3089\u3093\u3068\u3001\u4eca\u5f8c\u3060\u308b\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u3051\u3069\u30b5\u30f3\u30d7\u30eb\u3068\u30cb\u30a2\u30ea\u30fc\u3060\u304b\u3089\u826f\u3044\u3068\u3044\u3046\u65b9\u5411\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u5e73\u5766\u5316\n\u3053\u3053\u306b\u95a2\u3057\u3066\u306f\u5f0f\u3092\u3042\u3066\u306b\u3059\u308b\u306e\u304c\u6b63\u89e3\u3060\u3063\u305f\u6570\u5f0f\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttp://ipr20.cs.ehime-u.ac.jp/column/gazo_syori/chapter2.html\n\n\u3067\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n// \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u5e73\u5747\u5316\nfunc (ef *effect) AverageHistogram() image.Image {\n    rect := ef.inputImage.Bounds()\n    //\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u53d6\u5f97\n    _, _, _, hisL := ef.makeHistogramData()\n    //lookupTBL\u306e\u4f5c\u6210\n    luTbl := createLookupTable(hisL, rect)\n    //\u63cf\u753b\n    var buf effect\n    buf.inputImage = ef.imageLoop(rect, func(x, y int) color.RGBA64 {\n        r, g, b, a := ef.inputImage.At(x, y).RGBA()\n        return color.RGBA64{luTbl[r], luTbl[g], luTbl[b], uint16(a)}\n    })\n    //  \u753b\u50cf\u306e\u4f5c\u6210\n    buf.Histogram(\"ave histgram\", \"x\", \"y\", \"sampleimage/hist_ave.png\")\n    return buf.inputImage\n}\n\n\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\nfunc createLookupTable(his [ColorWidth]uint16, rect image.Rectangle) (table [ColorWidth]uint16) {\n    var sum, val uint16\n    //\u5e73\u5747\u753b\u7d20\u6570\n    average := uint16(((rect.Size(). * rect.Size().Y) / ColorWidth) + 1)\n    //\u5e73\u5747\u5024\u306e\u8a08\u7b97\n    for i, v := range his {\n        sum += v\n        val += sum / average\n        sum %= average\n        table[i] = val\n    }\n    return\n}\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u3068\u3057\u3066\u3044\u308b\n1. (NTSC \u7cfb\u52a0\u91cd\u5e73\u5747\u6cd5)\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304b\u3089\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\n2. \u5909\u63db\u30c6\u30fc\u30d6\u30eb\uff08lookupTBL\uff09\u306f\u6700\u521d\u306b\u66f8\u3044\u305f\u6570\u5f0f\n\u304f\u3089\u3044\u3002\n\n\u3000\u51fa\u529b\u753b\u50cf\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n\n\u307e\u3041\u3001\u898b\u3084\u3059\u304f\u306a\u3063\u3066\u308b\u304b\u3089\u6982\u306d\u3088\u304b\u308d\u3046\n\u3055\u3089\u3063\u3068\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3082\u6539\u9020\u3057\u51fa\u3057\u3066\u308b\u3057\u3001\n\u6b21\u7ae0\u306b\u5165\u308b\u524d\u306b\u304d\u3063\u3061\u308a\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3067\u3059\u306d\u3002\n\nhttps://github.com/kaepa3/imaging\n\u3068\u30bb\u30df\u9023\u52d5\u4e2d\n\n# \u4eca\u65e5\u306e\u304a\u984c\n1. \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u51fa\u529b\n\n\u30c6\u30ad\u30b9\u30c8\u306e\u65b9\u306f\u3064\u3044\u306b\u300c\u30b3\u30fc\u30c9\u306f\u7a7a\u767d\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u300d\u3068\u304b\u8a00\u3063\u3066\u307e\u3059\u3002\n\u30bf\u30a4\u30c8\u30eb\u304b\u3089\u3059\u308b\u3068\u3001\u305d\u3046\u8a00\u3063\u305f\u30b3\u30fc\u30c9\u304c\u3042\u308b\u306e\u304c\u30a6\u30ea\u306e\u672c\u3058\u3083\u306a\u3044\u306e\u304b\u3068\u601d\u3044\u3064\u3064\n\u3084\u3063\u3066\u304d\u307e\u3059\u3002\n\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u51fa\u529b\n\u3068\u308a\u3042\u3048\u305a\u3001\u30b0\u30e9\u30d5\u306f\u4ee5\u4e0b\u306e\u3092\u53c2\u8003\u306b\u3059\u308b\u3002\nhttp://takedajs.hatenablog.jp/entry/2016/04/03/094529\n\n\u3053\u306e\u8fba\n\n```go\n\t\"github.com/gonum/plot\"\n\t\"github.com/gonum/plot/plotter\"\n\t\"github.com/gonum/plot/plotutil\"\n```\n\u3092\u4f7f\u3046\u3068\u3044\u3046\u3053\u3068\u3067go get\n\n```cmd\n$ go get github.com/gonum/plot\n```\nbezier\u304c\u306a\u3044\u305d\u3046\u306a\u306e\u3067\u3001\u8ffd\u52a0\n\n```cmd\n$ go get github.com/biogo/graphics/bezier\n```\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```\nfunc (ef *effect) Histogram() {\n\t//\t\u30b0\u30e9\u30d5\u306e\u6e96\u5099\n\tp, _ := plot.New()\n\tp.Title.Text = \"histogram\"\n\tp.X.Label.Text = \"X\"\n\tp.Y.Label.Text = \"Y\"\n\t//\u30d7\u30ed\u30c3\u30c8\u306e\u6e96\u5099\n\t// \u5148\u306b\u5165\u308c\u7269\u3092\u4f5c\u308b\n\tconst ColorSize = math.MaxUint8 + 1\n\tvar dataSet [RGBAMax][ColorSize]uint16\n\n\tef.imageLoop(ef.inputImage.Bounds(), func(x, y int) color.RGBA64 {\n\t\t//\u753b\u7d20\u3092\u305d\u308c\u305e\u308c\u6570\u3048\u308b\n\t\tr, g, b, a := ef.inputImage.At(x, y).RGBA()\n\t\tdataSet[IndexR][getIndex(r)]++\n\t\tdataSet[IndexG][getIndex(g)]++\n\t\tdataSet[IndexB][getIndex(b)]++\n\t\tdataSet[IndexA][getIndex(a)]++\n\t\treturn color.RGBA64{0, 0, 0, 0}\n\t})\n\t// \u5404\u5024\u30b0\u30e9\u30d5\u306e\u30d7\u30ed\u30c3\u30c8\n\tfor key, v := range dataSet {\n\t\tif key == IndexA {\n\t\t\tcontinue\n\t\t}\n\t\tvar line plotter.XYer\n\t\tplots := make(plotter.XYs, ColorSize)\n\t\tline = plots\n\t\tfor i := 0; i < len(v); i++ {\n\t\t\tplots[i].X = float64(i)\n\t\t\tplots[i].Y = float64(v[i])\n\t\t}\n\t\tgraph, _, _ := plotter.NewLinePoints(line)\n\t\tgraph.Color = plotutil.Color(key)\n\t\tp.Add(graph)\n\t\tp.Legend.Add(\"line:\"+strconv.Itoa(key), graph)\n\n\t}\n\tp.Save(5*vg.Inch, 5*vg.Inch, \"sampleimage/line_sample.png\")\n\treturn\n}\n```\n\u753b\u50cf\u306e\u69cb\u6210\u8981\u7d20\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u306d\u3002\n\nplot\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u898b\u3066\u3044\u308b\u3068image.Image\u3092\u8fd4\u305b\u305d\u3046\u3060\u3051\u3069\u3001\u5bfe\u5fdc\u306f\u305d\u306e\u3046\u3061\u3002\n\u3082\u3057\u304f\u306f\u5b66\u7fd2\u7528\u3060\u3057\u3084\u3089\u306a\u3044\u3002\u3057\u3001\u305d\u308c\u306a\u3089\u95a2\u6570\u5206\u3051\u305f\u3044\u3002\n## \u51fa\u529b\u753b\u50cf\n![line_sample.png](https://qiita-image-store.s3.amazonaws.com/0/51009/e4a2764b-54f0-bba8-a2f2-4fed7c5fcec4.png \"line_sample.png\")\n\n# \u7dda\u5f62\u6fc3\u5ea6\u5909\u63db\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\uff12\uff15\uff15\u968e\u8abf\u3060\u3068\uff11\uff10\uff10\u301c\uff12\uff10\uff10\u307e\u3067\u3057\u304b\u4f7f\u3063\u3066\u306a\u3044\u3002\u305d\u3046\u8a00\u3063\u305f\u5834\u5408\u306b\u57fa\u6e96\u306e\uff11\uff10\uff10\u3092\uff10\u3068\u3057\u3066\u3001\uff12\uff10\uff10\u3092\uff12\uff15\uff15\u3068\u3057\u305f\u3089\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u304c\u306f\u3063\u304d\u308a\u3059\u308b\u3093\u3067\u306a\u3044\u306e\uff1f\u3063\u3066\u3044\u3046\u8a71\u3060\u3068\u601d\u3046\u3002\n\n$ Z' = Z_{max} \\times \\bigr(\\frac{Z-a}{b-a}\\bigl)$\n\n\u6570\u5f0f\u773a\u3081\u308b\u3068\u4eca\u306eZ\u306e\u5024\u306fa\u304b\u3089b\u306e\u4f55\u5206\u306e\uff11\u3067\u3057\u3087\u3046\u304b\uff1f\u3068\u3044\u3046\u8a71\u3067\u3059\u306d\u3002\n\u6587\u5b57\u3088\u308a\u6570\u5f0f\u773a\u3081\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u306a\u3002\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\na\u3068b\u306e\u5024\u306f\u4eca\u56de\u56fa\u5b9a\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n```go\nfunc (ef *effect) LinearDensity() image.Image {\n\tcon := func(val uint32) uint16 {\n\t\tvar levelA uint16 = 0x10\n\t\tvar levelB uint16 = 0xFF00\n\n\t\tv := math.MaxUint16 * (float64((uint16(val) - levelA)) / float64((levelB - levelA)))\n\t\tif v > math.MaxUint16 {\n\t\t\tv = math.MaxUint16\n\t\t} else if v < 0 {\n\t\t\tv = 0\n\t\t}\n\t\treturn uint16(v)\n\t}\n\treturn ef.imageLoop(ef.inputImage.Bounds(), func(x, y int) color.RGBA64 {\n\t\tr, g, _, a := ef.inputImage.At(x, y).RGBA()\n\t\treturn color.RGBA64{con(r), con(g), con(g), uint16(a)}\n\t})\n}\n```\n\n\u7279\u51fa\u3059\u3079\u304d\u306f\u5148\u306e\u6570\u5f0f\u3068\u6bd4\u8f03\u3057\u3066a\u4ee5\u4e0b\u306e\u5024\u3001b\u4ee5\u4e0a\u306e\u753b\u7d20\u304c\u542b\u307e\u308c\u305f\u5834\u5408\u306eif\u6587\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u307e\u3059\u3002a\u304c10\u3068\u3057\u3066\u30828\u3068\u304b\u306e\u6570\u5024\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5bfe\u7b56\u3067\u3059\u306d\u3002\n\u3042\u3068\u3001float64\u306b\u3057\u306a\u3044\u3068\u6841\u843d\u3061\u306e\u8aa4\u5dee\u3067\u51fa\u529b\u304c\u6b7b\u306b\u307e\u3059\u3002\u306a\u308b\u307b\u3069\u306a\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\n## \u51fa\u529b\u753b\u50cf\n![test_linerden.jpg](https://qiita-image-store.s3.amazonaws.com/0/51009/82fa70cc-c405-33e2-7f2a-c923487f279e.jpeg \"test_linerden.jpg\")\n\u3055\u3063\u304d\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304b\u3089\u9752\u306e\u8981\u7d20\u304c\u306a\u3044\u306e\u306b\u30d5\u30a3\u30eb\u30bf\u3057\u3066\u308b\u304b\u3089\u30ce\u30a4\u30ba\u304c\u4e57\u308b\u3068\u3002\n\u5b9f\u7528\u3092\u8003\u3048\u305f\u3089RGB\u305d\u308c\u305e\u308c\u306e\u5024\u306b\u5bfe\u3057\u3066\u8a2d\u5b9a\u5024\uff08a\u3068b\uff09\u304c\u5fc5\u8981\u306b\u306a\u308b\u3093\u3067\u3057\u3087\u3046\u306a\u3002\n\n# \u975e\u7dda\u5f62\u306a\u6fc3\u5ea6\u5909\u63db\n\u660e\u308b\u3055\u3060\u305d\u3046\u306a\u3002\n\n$ Z' = Z_{max} \\times \\bigr(\\frac{Z}{Z_{max}}\\bigl)^\u03b3$\n\n\u03b3\u306e\u5024\u304c\uff11\u3088\u308a\u5927\u304d\u3044\u3068\u6697\u304f\u306a\u3063\u3066\u3001\u305d\u308c\u3088\u308a\u5c0f\u3055\u3051\u308c\u3070\u660e\u308b\u304f\u306a\u308b\u3068\u3002\n\u660e\u308b\u304f\u3059\u308b\u5834\u5408\u306f\u5143\u753b\u50cf\u306er\u306e\u5024\u304c2\u306a\u3089\uff14\u306b\u3059\u308b\u307f\u305f\u3044\u306a\u611f\u3058\u3060\u3068\u601d\u3046\u3002\n\u5168\u90e8\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u898b\u306a\u304c\u3089\u4f5c\u696d\u3057\u308d\u3063\u3066\u8a71\u306a\u3093\u3060\u308d\u3046\u3051\u3069\u3001\u9762\u5012\u3060\u304b\u3089\u307e\u305f\u4eca\u5ea6\u3002\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\ncon\u306e\u5185\u5bb9\u5909\u3048\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u305d\u3053\u3060\u3051\u62bd\u51fa\n\n```go \n\tcon := func(val uint32) uint16 {\n\t\tgamma := 0.5\n\t\tv := math.MaxUint16 * math.Pow(float64(val)/float64(math.MaxUint16), gamma)\n\t\tif v > math.MaxUint16 {\n\t\t\tv = math.MaxUint16\n\t\t} else if v < 0 {\n\t\t\tv = 0\n\t\t}\n\t\treturn uint16(v)\n\t}\n```\n\n## \u51fa\u529b\u7d50\u679c\n\u306f\u3044\u3001\u660e\u308b\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n![test_unden.jpg](https://qiita-image-store.s3.amazonaws.com/0/51009/a428c2c8-026a-a67a-ad86-63a33e6c5845.jpeg \"test_unden.jpg\")\n\n#\u3000\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u6539\u5584\nZmax/2\u3088\u308a\u5927\u304d\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u5f0f\u3067\u4e0e\u3048\u3089\u308c\n$ Z' = \\frac{Z_{max}}{2} \\times \\sqrt{\\frac{2Z - Z_{max}}{Z_{max}}} $\n\u5c0f\u3055\u3044\u6642\u306f\n$ Z' = Z_{max} \\times \\bigr(\\frac{Z}{Z_{max}}\\bigl)^2$\n\u3068\u3059\u308b\u3002\n\n## \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```go\ncon := func(val uint32) uint16 {\n\tmaxUint := float64(math.MaxUint16)\n\tvar v uint16\n\tif val > math.MaxUint16/2 {\n\t\tv = uint16((maxUint / 2.0) * (1.0 + math.Sqrt((2.0*float64(val)-maxUint)/maxUint)))\n\t} else {\n\t\t// \u975e\u7dda\u5f62\u6fc3\u5ea6\u5909\u63db\n\t\tv = unlinerCon(val, 2)\n\t}\n\tif v > math.MaxUint16 {\n\t\tv = math.MaxUint16\n\t} else if v < 0 {\n\t\tv = 0\n\t}\n\treturn uint16(v)\n}\n```\n\n## \u51fa\u529b\u7d50\u679c\n![test_contrast.jpg](https://qiita-image-store.s3.amazonaws.com/0/51009/f0157788-64db-3f4d-5c02-a274948b3df3.jpeg \"test_contrast.jpg\")\n\u3053\u306e\u8fba\u3092\u30b9\u30e9\u30a4\u30c0\u30fc\u3068\u304b\u3067\u3067\u304d\u308b\u3082\u306e\u3092\u4f5c\u3089\u3093\u3068\u3001\u4eca\u5f8c\u3060\u308b\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u3051\u3069\u30b5\u30f3\u30d7\u30eb\u3068\u30cb\u30a2\u30ea\u30fc\u3060\u304b\u3089\u826f\u3044\u3068\u3044\u3046\u65b9\u5411\n\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u5e73\u5766\u5316\n\b\u3053\u3053\u306b\u95a2\u3057\u3066\u306f\u5f0f\u3092\u3042\u3066\u306b\u3059\u308b\u306e\u304c\u6b63\u89e3\u3060\u3063\u305f\u6570\u5f0f\u306f\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\u3002\nhttp://ipr20.cs.ehime-u.ac.jp/column/gazo_syori/chapter2.html\n\n\n## \u3067\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```go\n// \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u5e73\u5747\u5316\nfunc (ef *effect) AverageHistogram() image.Image {\n\trect := ef.inputImage.Bounds()\n\t//\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u53d6\u5f97\n\t_, _, _, hisL := ef.makeHistogramData()\n\t//lookupTBL\u306e\u4f5c\u6210\n\tluTbl := createLookupTable(hisL, rect)\n\t//\u63cf\u753b\n\tvar buf effect\n\tbuf.inputImage = ef.imageLoop(rect, func(x, y int) color.RGBA64 {\n\t\tr, g, b, a := ef.inputImage.At(x, y).RGBA()\n\t\treturn color.RGBA64{luTbl[r], luTbl[g], luTbl[b], uint16(a)}\n\t})\n\t//\t\u753b\u50cf\u306e\u4f5c\u6210\n\tbuf.Histogram(\"ave histgram\", \"x\", \"y\", \"sampleimage/hist_ave.png\")\n\treturn buf.inputImage\n}\n```\n\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\n\n\n```go\nfunc createLookupTable(his [ColorWidth]uint16, rect image.Rectangle) (table [ColorWidth]uint16) {\n\tvar sum, val uint16\n\t//\u5e73\u5747\u753b\u7d20\u6570\n\taverage := uint16(((rect.Size(). * rect.Size().Y) / ColorWidth) + 1)\n\t//\u5e73\u5747\u5024\u306e\u8a08\u7b97\n\tfor i, v := range his {\n\t\tsum += v\n\t\tval += sum / average\n\t\tsum %= average\n\t\ttable[i] = val\n\t}\n\treturn\n}\n```\n\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u3068\u3057\u3066\u3044\u308b\n1. (NTSC \u7cfb\u52a0\u91cd\u5e73\u5747\u6cd5)\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u304b\u3089\u5909\u63db\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\n2. \u5909\u63db\u30c6\u30fc\u30d6\u30eb\uff08lookupTBL\uff09\u306f\u6700\u521d\u306b\u66f8\u3044\u305f\u6570\u5f0f\n\n\u304f\u3089\u3044\u3002\n##\u3000\u51fa\u529b\u753b\u50cf\n![test_ave.png](https://qiita-image-store.s3.amazonaws.com/0/51009/110193a0-81d9-f487-a2e5-e4e830217867.png \"test_ave.png\")\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n![hist_ave.png](https://qiita-image-store.s3.amazonaws.com/0/51009/efc59d3c-29fa-eb78-ec95-db5051beb984.png \"hist_ave.png\")\n\n\u307e\u3041\u3001\u898b\u3084\u3059\u304f\u306a\u3063\u3066\u308b\u304b\u3089\u6982\u306d\u3088\u304b\u308d\u3046\n\u3055\u3089\u3063\u3068\u3001\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3082\u6539\u9020\u3057\u51fa\u3057\u3066\u308b\u3057\u3001\n\u6b21\u7ae0\u306b\u5165\u308b\u524d\u306b\u304d\u3063\u3061\u308a\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3067\u3059\u306d\u3002\n\n\n\n", "tags": ["\u753b\u50cf\u51e6\u7406", "golang", "Go"]}