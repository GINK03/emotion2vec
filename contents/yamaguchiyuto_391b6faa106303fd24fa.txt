{"context": " More than 1 year has passed since last update.\n\n\u524d\u7f6e\u304d\nSimRank\u306f\u30b0\u30e9\u30d5\u306b\u304a\u3051\u308b\u30ce\u30fc\u30c9\u9593\u306e\u985e\u4f3c\u5ea6\u3092\uff08\u518d\u5e30\u7684\u306b\uff09\u8a08\u7b97\u3059\u308b\u624b\u6cd5\n\u5171\u901a\u306e\u96a3\u63a5\u30ce\u30fc\u30c9\u3092\u3082\u3063\u3066\u3044\u306a\u304f\u3066\u3082\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3067\u304d\u308b\u3068\u3044\u3046\u7279\u5fb4\u3092\u6301\u3064\n\u8ad6\u6587\n\u308f\u304b\u308a\u3084\u3059\u3044\u65e5\u672c\u8a9e\u306e\u8aac\u660e\nWikipedia\uff08\u82f1\u8a9e\uff09\n\u3061\u306a\u307f\u306b\u3001SimRank\u8ad6\u6587\u306e\u7b2c\u4e8c\u8457\u8005\u306f\u8d85\u8457\u540d\u306aDB\u7814\u7a76\u8005\n\n\u5b9f\u88c5\n\u8ad6\u6587\u4e2d\u3067\u306f\u4e8c\u90e8\u30b0\u30e9\u30d5\u306b\u5bfe\u3057\u3066\u3082SimRank\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u304c\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u305d\u308c\u3082\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3002\n\nsimrank.py\nimport numpy as np\n\ndef simrank(G,C,n,t=10):\n    S = np.identity(n)\n    I = np.identity(n)\n    G = normalize(G)\n    i = 1\n    while True:\n        S = C * np.dot(np.dot(G.T,S),G) + (1-C) * I\n        for j in range(n):\n            S[j][j] = 1\n        if i >= t:\n            break\n        i += 1\n    return S\n\ndef bipertite_simrank(G,C,n,m,diag_1=True,t=10):\n    S1 = np.identity(n)\n    S2 = np.identity(m)\n    I1 = np.identity(n)\n    I2 = np.identity(m)\n    G_T = normalize(G.T)\n    G = normalize(G)\n    i = 1\n    while True:\n        S2 = C * np.dot(np.dot(G.T,S1),G) + (1-C) * I2\n        for j in range(m):\n            S2[j][j] = 1\n        S1 = C * np.dot(np.dot(G_T.T,S2),G_T) + (1-C) * I1\n        for j in range(n):\n            S1[j][j] = 1\n        if i >= t:\n            break\n        i += 1\n    return (S1,S2)\n\ndef normalize(G):\n    s = G.sum(0)\n    return G/s\n\nif __name__ == '__main__':\n    C = 0.8\n\n    \"\"\" univ \"\"\"\n    n = 5\n    G = np.zeros((n,n))\n    G[0][1] = 1\n    G[0][2] = 1\n    G[1][3] = 1\n    G[2][4] = 1\n    G[3][0] = 1\n    G[4][2] = 1\n\n    S = simrank(G,C,n)\n    print S\n\n    print '=================='\n\n    \"\"\" cake \"\"\"\n    n = 2\n    m = 4\n    G = np.zeros((n,m))\n    G[0][0] = 1\n    G[0][1] = 1\n    G[0][2] = 1\n    G[1][1] = 1\n    G[1][2] = 1\n    G[1][3] = 1\n\n    S1, S2 = bipertite_simrank(G,C,n,m)\n    print S1\n    print S2\n\n\n\u5b9f\u969b\u306e\u3068\u3053\u308d\u884c\u5217\u7a4d\u3092\u307b\u3044\u307b\u3044\u8a08\u7b97\u3057\u3066\u66f4\u65b0\u3057\u3066\u3044\u304f\u3060\u3051\nC\u306e\u5024\u306f\u8ad6\u6587\u4e2d\u3067\u306f0.8\u304f\u3089\u3044\u304c\u3044\u3044\u3068\u3055\u308c\u3066\u3044\u308b\u3051\u3069\u3001\u305d\u306e\u5f8c\u306e\u7814\u7a76\u30670.6\u304f\u3089\u3044\u304c\u3044\u3044\u3088\u306d\u3063\u3066\u306a\u3063\u3066\u308b\u3089\u3057\u3044\uff08\u51fa\u5178\u306fWikipedia\uff09\u3002\n\u305d\u308c\u3068\u3001\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570\u306f\u8ad6\u6587\u4e2d\u3067\u306f\uff15\u56de\u4f4d\u3067\u5341\u5206\u3063\u3066\u306a\u3063\u3066\u3044\u308b\u3051\u3069\u3001\u3053\u308c\u3082\u305d\u306e\u5f8c\u306e\u7814\u7a76\u3067\u3082\u3063\u3068\u3084\u3063\u305f\u307b\u3046\u304c\u826f\u3055\u3052\u3068\u8a00\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3089\u3057\u3044\uff08\u51fa\u5178\u306fWikipedia\uff09\u3002\n\n\u7d50\u679c\n>> python simrank.py\n[[ 1.          0.          0.1321943   0.          0.032768  ]\n [ 0.          1.          0.4131072   0.          0.10575544]\n [ 0.1321943   0.4131072   1.          0.04096     0.08687124]\n [ 0.          0.          0.04096     1.          0.33048576]\n [ 0.032768    0.10575544  0.08687124  0.33048576  1.        ]]\n==================\n[[ 1.          0.54658196]\n [ 0.54658196  1.        ]]\n[[ 1.          0.61863088  0.61863088  0.43726175]\n [ 0.61863088  1.          0.61863088  0.61863088]\n [ 0.61863088  0.61863088  1.          0.61863088]\n [ 0.43726175  0.61863088  0.61863088  1.        ]]\n\n\u8ad6\u6587\u4e2d\u306e\u7d50\u679c\uff08Figure1\u3001Figure2\uff09\u3068\u4e00\u81f4\u3057\u3066\u308b\u304b\u3089\u5408\u3063\u3066\u308b\u3093\u3067\u3057\u3087\u3046\u304d\u3063\u3068\uff01\n\n##\u524d\u7f6e\u304d\n\nSimRank\u306f\u30b0\u30e9\u30d5\u306b\u304a\u3051\u308b\u30ce\u30fc\u30c9\u9593\u306e\u985e\u4f3c\u5ea6\u3092\uff08\u518d\u5e30\u7684\u306b\uff09\u8a08\u7b97\u3059\u308b\u624b\u6cd5\n\n\u5171\u901a\u306e\u96a3\u63a5\u30ce\u30fc\u30c9\u3092\u3082\u3063\u3066\u3044\u306a\u304f\u3066\u3082\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3067\u304d\u308b\u3068\u3044\u3046\u7279\u5fb4\u3092\u6301\u3064\n\n[\u8ad6\u6587](http://faculty.ksu.edu.sa/73693/web%20mining/SimRank%20A%20Measure%20of%20Structural-Context%20Similarity.pdf)\n[\u308f\u304b\u308a\u3084\u3059\u3044\u65e5\u672c\u8a9e\u306e\u8aac\u660e](http://www.dbl.k.hosei.ac.jp/~miurat/readings/July1111.pdf)\n[Wikipedia\uff08\u82f1\u8a9e\uff09](http://en.wikipedia.org/wiki/SimRank)\n\n\u3061\u306a\u307f\u306b\u3001SimRank\u8ad6\u6587\u306e\u7b2c\u4e8c\u8457\u8005\u306f\u8d85\u8457\u540d\u306aDB\u7814\u7a76\u8005\n\n##\u5b9f\u88c5\n\n\u8ad6\u6587\u4e2d\u3067\u306f\u4e8c\u90e8\u30b0\u30e9\u30d5\u306b\u5bfe\u3057\u3066\u3082SimRank\u3092\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u304c\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u305d\u308c\u3082\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3002\n\n```simrank.py\nimport numpy as np\n\ndef simrank(G,C,n,t=10):\n    S = np.identity(n)\n    I = np.identity(n)\n    G = normalize(G)\n    i = 1\n    while True:\n        S = C * np.dot(np.dot(G.T,S),G) + (1-C) * I\n        for j in range(n):\n            S[j][j] = 1\n        if i >= t:\n            break\n        i += 1\n    return S\n\ndef bipertite_simrank(G,C,n,m,diag_1=True,t=10):\n    S1 = np.identity(n)\n    S2 = np.identity(m)\n    I1 = np.identity(n)\n    I2 = np.identity(m)\n    G_T = normalize(G.T)\n    G = normalize(G)\n    i = 1\n    while True:\n        S2 = C * np.dot(np.dot(G.T,S1),G) + (1-C) * I2\n        for j in range(m):\n            S2[j][j] = 1\n        S1 = C * np.dot(np.dot(G_T.T,S2),G_T) + (1-C) * I1\n        for j in range(n):\n            S1[j][j] = 1\n        if i >= t:\n            break\n        i += 1\n    return (S1,S2)\n\ndef normalize(G):\n    s = G.sum(0)\n    return G/s\n\nif __name__ == '__main__':\n    C = 0.8\n\n    \"\"\" univ \"\"\"\n    n = 5\n    G = np.zeros((n,n))\n    G[0][1] = 1\n    G[0][2] = 1\n    G[1][3] = 1\n    G[2][4] = 1\n    G[3][0] = 1\n    G[4][2] = 1\n\n    S = simrank(G,C,n)\n    print S\n\n    print '=================='\n\n    \"\"\" cake \"\"\"\n    n = 2\n    m = 4\n    G = np.zeros((n,m))\n    G[0][0] = 1\n    G[0][1] = 1\n    G[0][2] = 1\n    G[1][1] = 1\n    G[1][2] = 1\n    G[1][3] = 1\n\n    S1, S2 = bipertite_simrank(G,C,n,m)\n    print S1\n    print S2\n```\n\n\u5b9f\u969b\u306e\u3068\u3053\u308d\u884c\u5217\u7a4d\u3092\u307b\u3044\u307b\u3044\u8a08\u7b97\u3057\u3066\u66f4\u65b0\u3057\u3066\u3044\u304f\u3060\u3051\n\nC\u306e\u5024\u306f\u8ad6\u6587\u4e2d\u3067\u306f0.8\u304f\u3089\u3044\u304c\u3044\u3044\u3068\u3055\u308c\u3066\u3044\u308b\u3051\u3069\u3001\u305d\u306e\u5f8c\u306e\u7814\u7a76\u30670.6\u304f\u3089\u3044\u304c\u3044\u3044\u3088\u306d\u3063\u3066\u306a\u3063\u3066\u308b\u3089\u3057\u3044\uff08\u51fa\u5178\u306fWikipedia\uff09\u3002\n\n\u305d\u308c\u3068\u3001\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570\u306f\u8ad6\u6587\u4e2d\u3067\u306f\uff15\u56de\u4f4d\u3067\u5341\u5206\u3063\u3066\u306a\u3063\u3066\u3044\u308b\u3051\u3069\u3001\u3053\u308c\u3082\u305d\u306e\u5f8c\u306e\u7814\u7a76\u3067\u3082\u3063\u3068\u3084\u3063\u305f\u307b\u3046\u304c\u826f\u3055\u3052\u3068\u8a00\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3089\u3057\u3044\uff08\u51fa\u5178\u306fWikipedia\uff09\u3002\n\n##\u7d50\u679c\n\n```\u7d50\u679c\n>> python simrank.py\n[[ 1.          0.          0.1321943   0.          0.032768  ]\n [ 0.          1.          0.4131072   0.          0.10575544]\n [ 0.1321943   0.4131072   1.          0.04096     0.08687124]\n [ 0.          0.          0.04096     1.          0.33048576]\n [ 0.032768    0.10575544  0.08687124  0.33048576  1.        ]]\n==================\n[[ 1.          0.54658196]\n [ 0.54658196  1.        ]]\n[[ 1.          0.61863088  0.61863088  0.43726175]\n [ 0.61863088  1.          0.61863088  0.61863088]\n [ 0.61863088  0.61863088  1.          0.61863088]\n [ 0.43726175  0.61863088  0.61863088  1.        ]]\n```\n\n\u8ad6\u6587\u4e2d\u306e\u7d50\u679c\uff08Figure1\u3001Figure2\uff09\u3068\u4e00\u81f4\u3057\u3066\u308b\u304b\u3089\u5408\u3063\u3066\u308b\u3093\u3067\u3057\u3087\u3046\u304d\u3063\u3068\uff01\n", "tags": ["Python", "numpy", "simrank", "\u6a5f\u68b0\u5b66\u7fd2"]}