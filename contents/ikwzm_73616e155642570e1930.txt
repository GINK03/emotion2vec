{"tags": ["VHDL", "HDL", "FPGA", "Random"], "context": "\n\nTiny Mersenne Twister 32bit (TinyMT32) Pseudo Random Number Generator VHDL Package and RTL.\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e00\u5f0f\u306fgist\u306b\u3042\u308a\u307e\u3059\u3002\nTiny Mersenne Twister 32bit (TinyMT32) Pseudo Random Number Generator VHDL Package and RTL.\n\nOverview\n\nIntroduction\nTiny Mersenne Twister(TinyMT)\u6cd5\u306b\u3088\u308b\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u8ad6\u7406\u5408\u6210\u53ef\u80fd\u306a\u30b5\u30f3\u30d7\u30eb\u56de\u8def\u3067\u3059\u3002\n\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3082\u3046\uff14\u5e74\u8fd1\u304f\u524d\u306b\u4f5c\u3063\u3066\u516c\u958b\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u5148\u65e5\u300c\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7 with VHDL on FPGA\u300d\u3067\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3063\u305f\u3053\u3068\u3082\u3042\u308a\u3001\u3042\u3089\u305f\u3081\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\nTiny Mersenne Twister(TinyMT)\u6cd5\u306b\u95a2\u3057\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nTiny Mersenne Twister(TinyMT) Home Page\n\nFeatures\n\ntinymt32 \u3092\u5143\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u5358\u7cbe\u5ea6\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u306f\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u305b\u3093\u300232\u30d3\u30c3\u30c8\u6574\u6570\u304b\u5b9f\u6570\u306e\u307f\u3067\u3059\u3002\ntinymt32.vhd \u306f\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002\n\u3053\u306e\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3001\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u306a\u3069\u306e\u30e2\u30c7\u30eb\u304b\u3089\u3082\u3001\u8ad6\u7406\u56de\u8def\u304b\u3089\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ntinymt32_gen.vhd \u306f\u8ad6\u7406\u5408\u6210\u53ef\u80fd\u306a\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u56de\u8def\u306e\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n\nLicensing\n\u4e8c\u6761\u9805BSD\u30e9\u30a4\u30bb\u30f3\u30b9 (2-clause BSD license) \u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\nSource Code\n\u53c2\u8003\u307e\u3067\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8cbc\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\ntinymt32.vhd(\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u30d1\u30c3\u30b1\u30fc\u30b8)\n\ntinymt32.vhd\n-----------------------------------------------------------------------------------\n--!     @file    tinymt32.vhd\n--!     @brief   Pseudo Random Number Generator Package(TinyMT32).\n--!     @version 1.0.0\n--!     @date    2012/8/1\n--!     @author  Ichiro Kawazome <ichiro_k@ca2.so-net.ne.jp>\n-----------------------------------------------------------------------------------\n--\n--      Copyright (C) 2012 Ichiro Kawazome\n--      All rights reserved.\n--\n--      Redistribution and use in source and binary forms, with or without\n--      modification, are permitted provided that the following conditions\n--      are met:\n--\n--        1. Redistributions of source code must retain the above copyright\n--           notice, this list of conditions and the following disclaimer.\n--\n--        2. Redistributions in binary form must reproduce the above copyright\n--           notice, this list of conditions and the following disclaimer in\n--           the documentation and/or other materials provided with the\n--           distribution.\n--\n--      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n--      \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n--      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n--      A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n--      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n--      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n--      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n--      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n--      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n--      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n--      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--\n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\nuse     ieee.numeric_std.all;\n-----------------------------------------------------------------------------------\n--! @brief   Pseudo Random Number Generator Package(TinyMT32).\n-----------------------------------------------------------------------------------\npackage TINYMT32 is\n    -------------------------------------------------------------------------------\n    --! @brief Type of Random Number.\n    -------------------------------------------------------------------------------\n    subtype  RANDOM_NUMBER_TYPE   is unsigned(31 downto 0);\n    -------------------------------------------------------------------------------\n    --! @brief Vector of Random Number.\n    -------------------------------------------------------------------------------\n    type     RANDOM_NUMBER_VECTOR is array(integer range <>) of RANDOM_NUMBER_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Convert Integer to RANDOM_NUMBER_TYPE\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    arg       Integer.\n    --! @return             Generated random number.\n    -------------------------------------------------------------------------------\n    function TO_RANDOM_NUMBER_TYPE(arg:integer) return RANDOM_NUMBER_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Type of Seed Number for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    subtype  SEED_TYPE            is unsigned(31 downto 0);\n    -------------------------------------------------------------------------------\n    --! @brief Vector of Seed Number for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    type     SEED_VECTOR          is array(integer range <>) of SEED_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Convert Integer to SEED_TYPE\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    arg       Integer.\n    --! @return             Generated seed number.\n    -------------------------------------------------------------------------------\n    function TO_SEED_TYPE(arg:integer) return SEED_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Type of Record for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    type     PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE is record\n        status  : RANDOM_NUMBER_VECTOR(0 to 3);\n        mat1    : SEED_TYPE;\n        mat2    : SEED_TYPE;\n        tmat    : RANDOM_NUMBER_TYPE;\n    end record;    \n    -------------------------------------------------------------------------------\n    --! @brief Generate instance for Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number for Pseudo Random Number Generator.\n    --! @return             Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    function  NEW_PSEUDO_RANDOM_NUMBER_GENERATOR(\n                 mat1      :       SEED_TYPE;\n                 mat2      :       SEED_TYPE;\n                 tmat      :       RANDOM_NUMBER_TYPE;\n                 seed      :       SEED_TYPE\n    )            return            PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Generate instance for Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number Vector for Pseudo Random Number Generator.\n    --! @return             Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    function  NEW_PSEUDO_RANDOM_NUMBER_GENERATOR(\n                 mat1      :       SEED_TYPE;\n                 mat2      :       SEED_TYPE;\n                 tmat      :       RANDOM_NUMBER_TYPE;\n                 seed      :       SEED_VECTOR\n    )            return            PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Initialize Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n                 mat1      : in    SEED_TYPE;\n                 mat2      : in    SEED_TYPE;\n                 tmat      : in    RANDOM_NUMBER_TYPE;\n                 seed      : in    SEED_TYPE\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Initialize Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number Vector for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n                 mat1      : in    SEED_TYPE;\n                 mat2      : in    SEED_TYPE;\n                 tmat      : in    RANDOM_NUMBER_TYPE;\n                 seed      : in    SEED_VECTOR\n    );\n    -------------------------------------------------------------------------------\n    --! @brief This function changes internal state of tinymt32.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! * Users should not call this function directly.\n    --! @param    generator Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    );\n    -------------------------------------------------------------------------------\n    --! @brief This function outputs 32-bit unsigned integer from internal state.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! * Users should not call this function directly.\n    --! @param    generator Pseudo Random Number Generator.\n    --! @return             Generated temper number.\n    -------------------------------------------------------------------------------\n    function  GENERATE_TEMPER(\n                 generator : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    )            return      RANDOM_NUMBER_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_NUMBER(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   RANDOM_NUMBER_TYPE\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on (std_logic_vector).\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_STD_LOGIC_VECTOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   std_logic_vector\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,0x7fffffff]-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_INT31(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   integer\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,1]-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL1(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,1)-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL2(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on (0,1)-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL3(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    );\nend     TINYMT32;\n-----------------------------------------------------------------------------------\n-- \n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\nuse     ieee.numeric_std.all;\npackage body TINYMT32 is\n    -------------------------------------------------------------------------------\n    -- Period parameters\n    -------------------------------------------------------------------------------\n    constant  MEXP            : integer := 127;\n    constant  SH0             : integer :=   1;\n    constant  SH1             : integer :=  10;\n    constant  SH8             : integer :=   8;\n    constant  MASK            : RANDOM_NUMBER_TYPE := (RANDOM_NUMBER_TYPE'high => '0', others => '1');\n    constant  LINEARITY_CHECK : boolean := FALSE;\n    constant  MIN_LOOP        : integer :=   8;\n    constant  PRE_LOOP        : integer :=   8;\n    -------------------------------------------------------------------------------\n    --! @brief Convert Integer to SEED_TYPE\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    arg       Integer.\n    --! @return             Generated seed number.\n    -------------------------------------------------------------------------------\n    function  TO_SEED_TYPE(arg:integer) return SEED_TYPE is\n    begin\n        return to_unsigned(arg,SEED_TYPE'length);\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief Convert Integer to RANDOM_NUMBER_TYPE\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    arg       Integer.\n    --! @return             Generated random number.\n    -------------------------------------------------------------------------------\n    function  TO_RANDOM_NUMBER_TYPE(arg:integer) return RANDOM_NUMBER_TYPE is\n    begin\n        return to_unsigned(arg,RANDOM_NUMBER_TYPE'length);\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief Convert from Random Number to real.\n    ---------------------------------------------------------------------------\n    function  TO_REAL(arg:RANDOM_NUMBER_TYPE) return real is\n        variable result: real := 0.0;\n    begin\n        for i in arg'range loop\n            result := result + result;\n            if (arg(i) = '1') then\n                result := result + 1.0;\n            end if;\n        end loop;\n        return result;\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief RANDOM_NUMBER_TYPE multiplied by integer.\n    -------------------------------------------------------------------------------\n    function MUL_K(k:integer;arg:RANDOM_NUMBER_TYPE) return RANDOM_NUMBER_TYPE is\n        variable tmp : unsigned(2*RANDOM_NUMBER_TYPE'length-1 downto 0);\n    begin\n        tmp := arg * TO_RANDOM_NUMBER_TYPE(k);\n        return tmp(RANDOM_NUMBER_TYPE'range);\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief Generate instance for Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number for Pseudo Random Number Generator.\n    --! @return             Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    function  NEW_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        mat1    : SEED_TYPE;\n        mat2    : SEED_TYPE;\n        tmat    : RANDOM_NUMBER_TYPE;\n        seed    : SEED_TYPE\n    )   return    PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    is\n        variable generator : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    begin\n        INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator,mat1,mat2,tmat,seed);\n        return generator;\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief Generate instance for Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number Vector for Pseudo Random Number Generator.\n    --! @return             Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    function  NEW_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        mat1    : SEED_TYPE;\n        mat2    : SEED_TYPE;\n        tmat    : RANDOM_NUMBER_TYPE;\n        seed    : SEED_VECTOR\n    )   return    PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    is\n        variable generator : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    begin\n        INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator,mat1,mat2,tmat,seed);\n        return generator;\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief This function certificate the period of 2^127-1.\n    -------------------------------------------------------------------------------\n    procedure period_certification(generator:inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE) is\n    begin \n        if ((generator.status(0) and MASK) = 0) and\n            (generator.status(1)           = 0) and\n            (generator.status(2)           = 0) and\n            (generator.status(3)           = 0) then\n             generator.status(0) := TO_RANDOM_NUMBER_TYPE(84); -- 'T'\n         generator.status(1) := TO_RANDOM_NUMBER_TYPE(57); -- 'I';\n         generator.status(2) := TO_RANDOM_NUMBER_TYPE(78); -- 'N';\n         generator.status(3) := TO_RANDOM_NUMBER_TYPE(89); -- 'Y';\n        end if;\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Initialize Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n                 mat1      : in    SEED_TYPE;\n                 mat2      : in    SEED_TYPE;\n                 tmat      : in    RANDOM_NUMBER_TYPE;\n                 seed      : in    SEED_TYPE\n    ) is\n    begin \n        generator.mat1      := mat1;\n        generator.mat2      := mat2;\n        generator.tmat      := tmat;\n        generator.status(0) := seed;\n        generator.status(1) := mat1;\n        generator.status(2) := mat2;\n        generator.status(3) := tmat;\n        for i in 1 to MIN_LOOP-1 loop\n            generator.status(i mod 4) := generator.status(i mod 4) xor\n                                         (MUL_K(1812433253,\n                                               ((generator.status((i-1) mod 4)) xor\n                                                (generator.status((i-1) mod 4) srl 30))) + i);\n        end loop;\n        period_certification(generator);\n        for i in 0 to PRE_LOOP-1 loop\n           NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        end loop;\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Initialize Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number Vector for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n                 mat1      : in    SEED_TYPE;\n                 mat2      : in    SEED_TYPE;\n                 tmat      : in    RANDOM_NUMBER_TYPE;\n                 seed      : in    SEED_VECTOR\n    ) is\n        constant lag       : integer := 1;\n        constant mid       : integer := 1;\n        constant size      : integer := 4;\n        variable i,j       : integer;\n        variable count     : integer;\n        variable r         : RANDOM_NUMBER_TYPE;\n        alias    init_key  : SEED_VECTOR(1 to seed'length) is seed;\n        function ini_func1(x:RANDOM_NUMBER_TYPE) return RANDOM_NUMBER_TYPE is\n        begin \n            return MUL_K(1664525   ,(x xor (x srl 27)));\n        end function;\n        function ini_func2(x:RANDOM_NUMBER_TYPE) return RANDOM_NUMBER_TYPE is\n        begin \n            return MUL_K(1566083941,(x xor (x srl 27)));\n        end function;\n    begin\n        generator.mat1      := mat1;\n        generator.mat2      := mat2;\n        generator.tmat      := tmat;\n        generator.status(0) := TO_RANDOM_NUMBER_TYPE(0);\n        generator.status(1) := mat1;\n        generator.status(2) := mat2;\n        generator.status(3) := tmat;\n        if (init_key'length + 1 > MIN_LOOP) then\n            count := init_key'length + 1;\n        else\n            count := MIN_LOOP;\n        end if;\n        i := 0;\n        for j in 0 to count-1 loop\n            r := ini_func1(generator.status(i) xor\n                           generator.status((i+mid) mod size) xor\n                           generator.status((i+size-1) mod size));\n            generator.status((i+mid    ) mod size) := generator.status((i+mid    ) mod size) + r;\n            if    (j = 0) then\n                r := r + init_key'length;\n            elsif (init_key'low <= j and j <= init_key'high) then\n                r := r + init_key(j) + i;\n            else\n                r := r + i;\n            end if;\n            generator.status((i+mid+lag) mod size) := generator.status((i+mid+lag) mod size) + r;\n            generator.status(i) := r;\n            i := (i + 1) mod size;\n        end loop;\n        for j in 0 to size-1 loop\n            r := ini_func2(generator.status(i) +\n                           generator.status((i+mid   ) mod size) +\n                           generator.status((i+size-1) mod size));\n            generator.status((i+mid    ) mod size) := generator.status((i+mid    ) mod size) xor r;\n            r := r - i;\n            generator.status((i+mid+lag) mod size) := generator.status((i+mid+lag) mod size) xor r;\n            generator.status(i) := r;\n            i := (i + 1) mod size;\n        end loop;\n        period_certification(generator);\n        for i in 0 to PRE_LOOP-1 loop\n            NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        end loop;\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief This function changes internal state of tinymt32.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! * Users should not call this function directly.\n    --! @param    generator Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator  : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    ) is\n        variable x          :       RANDOM_NUMBER_TYPE;\n        variable y          :       RANDOM_NUMBER_TYPE;\n    begin \n        x := (generator.status(0) and MASK) xor generator.status(1) xor generator.status(2);\n        y :=  generator.status(3);\n        x := x xor (x sll SH0);\n        y := y xor (y srl SH0) xor x;\n        generator.status(0) := generator.status(1);\n        generator.status(1) := generator.status(2);\n        generator.status(2) := x xor (y sll SH1);\n        generator.status(3) := y;\n        if (y(0) = '1') then\n            generator.status(1) := generator.status(1) xor generator.mat1;\n            generator.status(2) := generator.status(2) xor generator.mat2;\n        end if;\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief This function outputs 32-bit unsigned integer from internal state.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! * Users should not call this function directly.\n    --! @param    generator Pseudo Random Number Generator.\n    --! @return             Generated temper number.\n    -------------------------------------------------------------------------------\n    function GENERATE_TEMPER(\n                 generator  :       PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    )            return             RANDOM_NUMBER_TYPE\n    is\n        variable t0         :       RANDOM_NUMBER_TYPE;\n        variable t1         :       RANDOM_NUMBER_TYPE;\n    begin\n        t0 := generator.status(3);\n        if (LINEARITY_CHECK) then\n            t1 := generator.status(0) xor (generator.status(2) srl SH8);\n        else\n            t1 := generator.status(0)  +  (generator.status(2) srl SH8);\n        end if;\n        t0 := t0 xor t1;\n        if (t1(0) = '1') then\n            t0 := t0 xor generator.tmat;\n        end if;\n        return t0;\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_NUMBER(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   RANDOM_NUMBER_TYPE\n    ) is\n    begin \n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        number := GENERATE_TEMPER(generator);\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on (std_logic_vector).\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_STD_LOGIC_VECTOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   std_logic_vector\n    ) is\n        variable word      :       RANDOM_NUMBER_TYPE;\n        variable number_t  :       std_logic_vector(number'length-1 downto 0);\n    begin\n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        word := GENERATE_TEMPER(generator);\n        for i in number_t'range loop\n            if (word(i) = '1') then\n                number_t(i) := '1';\n            else\n                number_t(i) := '0';\n            end if;\n        end loop;  \n        number := number_t;\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,0x7fffffff]-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_INT31(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   integer\n    ) is\n        variable word      :       RANDOM_NUMBER_TYPE;\n    begin\n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        word := GENERATE_TEMPER(generator);\n        number := to_integer(word(31 downto 1));\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,1]-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL1(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    ) is\n        variable word      :       RANDOM_NUMBER_TYPE;\n    begin\n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        word := GENERATE_TEMPER(generator);\n        number := (1.0/4294967295.0)*TO_REAL(word);\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,1)-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL2(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    ) is\n        variable word      :       RANDOM_NUMBER_TYPE;\n    begin\n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        word := GENERATE_TEMPER(generator);\n        number := (1.0/4294967296.0)*TO_REAL(word);\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on (0,1)-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL3(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    ) is\n        variable word      :       RANDOM_NUMBER_TYPE;\n    begin\n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        word := GENERATE_TEMPER(generator);\n        number := (1.0/4294967296.0)*(0.5+TO_REAL(word));\n    end procedure;\nend     TINYMT32;\n\n\n\ntinymt32_gen.vhd(\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u56de\u8def\u306e\u30b5\u30f3\u30d7\u30eb)\n\ntinymt32_gen.vhd\n-----------------------------------------------------------------------------------\n--!     @file    tinymt32_gen.vhd\n--!     @brief   Pseudo Random Number Generator (TinyMT32).\n--!     @version 1.0.0\n--!     @date    2012/8/1\n--!     @author  Ichiro Kawazome <ichiro_k@ca2.so-net.ne.jp>\n-----------------------------------------------------------------------------------\n--\n--      Copyright (C) 2012 Ichiro Kawazome\n--      All rights reserved.\n--\n--      Redistribution and use in source and binary forms, with or without\n--      modification, are permitted provided that the following conditions\n--      are met:\n--\n--        1. Redistributions of source code must retain the above copyright\n--           notice, this list of conditions and the following disclaimer.\n--\n--        2. Redistributions in binary form must reproduce the above copyright\n--           notice, this list of conditions and the following disclaimer in\n--           the documentation and/or other materials provided with the\n--           distribution.\n--\n--      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n--      \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n--      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n--      A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n--      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n--      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n--      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n--      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n--      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n--      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n--      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--\n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\nuse     work.TINYMT32.RANDOM_NUMBER_TYPE;\nuse     work.TINYMT32.PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\nentity  TINYMT32_GEN is\n    port (\n        CLK         : in  std_logic;\n        RST         : in  std_logic;\n        INIT        : in  std_logic;\n        INIT_PARAM  : in  PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        RND_RUN     : in  std_logic;\n        RND_VAL     : out std_logic;\n        RND_NUM     : out RANDOM_NUMBER_TYPE\n    );\nend     TINYMT32_GEN;\n-----------------------------------------------------------------------------------\n--\n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\nuse     ieee.numeric_std.all;\nuse     work.TINYMT32.all;\narchitecture RTL of TINYMT32_GEN is\n    constant  DEFAULT_PARAM    : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE :=\n                                 NEW_PSEUDO_RANDOM_NUMBER_GENERATOR(\n                                     X\"8f7011ee\",\n                                     X\"fc78ff1f\",\n                                     X\"3793fdff\",\n                                     TO_SEED_TYPE(1)\n                                 );\n    signal    curr_status      : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    signal    status_valid     : std_logic;\nbegin\n    process(CLK, RST)\n        variable next_status   : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    begin\n        if (RST = '1') then\n                curr_status  <= DEFAULT_PARAM;\n                status_valid <= '0';\n                RND_VAL      <= '0';\n                RND_NUM      <= (others => '0');\n        elsif (CLK'event and CLK = '1') then\n            if (INIT = '1') then\n                curr_status  <= INIT_PARAM;\n                status_valid <= '0';\n                RND_VAL      <= '0';\n                RND_NUM      <= (others => '0');\n            else\n                if (RND_RUN = '1') then\n                    next_status := curr_status;\n                    NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(next_status);\n                    curr_status  <= next_status;\n                    status_valid <= '1';\n                else\n                    status_valid <= '0';\n                end if;\n                if (status_valid = '1') then\n                    RND_NUM <= GENERATE_TEMPER(curr_status);\n                    RND_VAL <= '1';\n                else\n                    RND_VAL <= '0';\n                end if;\n            end if;\n        end if;\n    end process;\nend RTL;\n\n\n\n#Tiny Mersenne Twister 32bit (TinyMT32) Pseudo Random Number Generator VHDL Package and RTL.\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e00\u5f0f\u306fgist\u306b\u3042\u308a\u307e\u3059\u3002\n[Tiny Mersenne Twister 32bit (TinyMT32) Pseudo Random Number Generator VHDL Package and RTL.](https://gist.github.com/ikwzm/2176977)\n\n#Overview\n\n##Introduction\n\nTiny Mersenne Twister(TinyMT)\u6cd5\u306b\u3088\u308b\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u8ad6\u7406\u5408\u6210\u53ef\u80fd\u306a\u30b5\u30f3\u30d7\u30eb\u56de\u8def\u3067\u3059\u3002\n\n\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3082\u3046\uff14\u5e74\u8fd1\u304f\u524d\u306b\u4f5c\u3063\u3066\u516c\u958b\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u5148\u65e5[\u300c\u30ba\u30f3\u30c9\u30b3\u30ad\u30e8\u30b7 with VHDL on FPGA\u300d](http://qiita.com/ikwzm/items/fb68798172fe980b77b2)\u3067\u3053\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3063\u305f\u3053\u3068\u3082\u3042\u308a\u3001\u3042\u3089\u305f\u3081\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nTiny Mersenne Twister(TinyMT)\u6cd5\u306b\u95a2\u3057\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n[Tiny Mersenne Twister(TinyMT) Home Page](http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/TINYMT/index-jp.html)\n\n##Features\n\n * tinymt32 \u3092\u5143\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n * \u5358\u7cbe\u5ea6\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u306f\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u305b\u3093\u300232\u30d3\u30c3\u30c8\u6574\u6570\u304b\u5b9f\u6570\u306e\u307f\u3067\u3059\u3002\n * tinymt32.vhd \u306f\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3059\u3002\n   \u3053\u306e\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3001\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u306a\u3069\u306e\u30e2\u30c7\u30eb\u304b\u3089\u3082\u3001\u8ad6\u7406\u56de\u8def\u304b\u3089\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n * tinymt32_gen.vhd \u306f\u8ad6\u7406\u5408\u6210\u53ef\u80fd\u306a\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u56de\u8def\u306e\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n##Licensing\n\n\u4e8c\u6761\u9805BSD\u30e9\u30a4\u30bb\u30f3\u30b9 (2-clause BSD license) \u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n#Source Code\n\n\u53c2\u8003\u307e\u3067\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8cbc\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n##tinymt32.vhd(\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u30d1\u30c3\u30b1\u30fc\u30b8)\n\n````VHDL:tinymt32.vhd\n-----------------------------------------------------------------------------------\n--!     @file    tinymt32.vhd\n--!     @brief   Pseudo Random Number Generator Package(TinyMT32).\n--!     @version 1.0.0\n--!     @date    2012/8/1\n--!     @author  Ichiro Kawazome <ichiro_k@ca2.so-net.ne.jp>\n-----------------------------------------------------------------------------------\n--\n--      Copyright (C) 2012 Ichiro Kawazome\n--      All rights reserved.\n--\n--      Redistribution and use in source and binary forms, with or without\n--      modification, are permitted provided that the following conditions\n--      are met:\n--\n--        1. Redistributions of source code must retain the above copyright\n--           notice, this list of conditions and the following disclaimer.\n--\n--        2. Redistributions in binary form must reproduce the above copyright\n--           notice, this list of conditions and the following disclaimer in\n--           the documentation and/or other materials provided with the\n--           distribution.\n--\n--      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n--      \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n--      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n--      A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n--      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n--      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n--      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n--      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n--      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n--      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n--      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--\n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\nuse     ieee.numeric_std.all;\n-----------------------------------------------------------------------------------\n--! @brief   Pseudo Random Number Generator Package(TinyMT32).\n-----------------------------------------------------------------------------------\npackage TINYMT32 is\n    -------------------------------------------------------------------------------\n    --! @brief Type of Random Number.\n    -------------------------------------------------------------------------------\n    subtype  RANDOM_NUMBER_TYPE   is unsigned(31 downto 0);\n    -------------------------------------------------------------------------------\n    --! @brief Vector of Random Number.\n    -------------------------------------------------------------------------------\n    type     RANDOM_NUMBER_VECTOR is array(integer range <>) of RANDOM_NUMBER_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Convert Integer to RANDOM_NUMBER_TYPE\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    arg       Integer.\n    --! @return             Generated random number.\n    -------------------------------------------------------------------------------\n    function TO_RANDOM_NUMBER_TYPE(arg:integer) return RANDOM_NUMBER_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Type of Seed Number for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    subtype  SEED_TYPE            is unsigned(31 downto 0);\n    -------------------------------------------------------------------------------\n    --! @brief Vector of Seed Number for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    type     SEED_VECTOR          is array(integer range <>) of SEED_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Convert Integer to SEED_TYPE\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    arg       Integer.\n    --! @return             Generated seed number.\n    -------------------------------------------------------------------------------\n    function TO_SEED_TYPE(arg:integer) return SEED_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Type of Record for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    type     PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE is record\n        status  : RANDOM_NUMBER_VECTOR(0 to 3);\n        mat1    : SEED_TYPE;\n        mat2    : SEED_TYPE;\n        tmat    : RANDOM_NUMBER_TYPE;\n    end record;    \n    -------------------------------------------------------------------------------\n    --! @brief Generate instance for Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number for Pseudo Random Number Generator.\n    --! @return             Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    function  NEW_PSEUDO_RANDOM_NUMBER_GENERATOR(\n                 mat1      :       SEED_TYPE;\n                 mat2      :       SEED_TYPE;\n                 tmat      :       RANDOM_NUMBER_TYPE;\n                 seed      :       SEED_TYPE\n    )            return            PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Generate instance for Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number Vector for Pseudo Random Number Generator.\n    --! @return             Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    function  NEW_PSEUDO_RANDOM_NUMBER_GENERATOR(\n                 mat1      :       SEED_TYPE;\n                 mat2      :       SEED_TYPE;\n                 tmat      :       RANDOM_NUMBER_TYPE;\n                 seed      :       SEED_VECTOR\n    )            return            PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Initialize Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n                 mat1      : in    SEED_TYPE;\n                 mat2      : in    SEED_TYPE;\n                 tmat      : in    RANDOM_NUMBER_TYPE;\n                 seed      : in    SEED_TYPE\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Initialize Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number Vector for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n                 mat1      : in    SEED_TYPE;\n                 mat2      : in    SEED_TYPE;\n                 tmat      : in    RANDOM_NUMBER_TYPE;\n                 seed      : in    SEED_VECTOR\n    );\n    -------------------------------------------------------------------------------\n    --! @brief This function changes internal state of tinymt32.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! * Users should not call this function directly.\n    --! @param    generator Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    );\n    -------------------------------------------------------------------------------\n    --! @brief This function outputs 32-bit unsigned integer from internal state.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! * Users should not call this function directly.\n    --! @param    generator Pseudo Random Number Generator.\n    --! @return             Generated temper number.\n    -------------------------------------------------------------------------------\n    function  GENERATE_TEMPER(\n                 generator : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    )            return      RANDOM_NUMBER_TYPE;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_NUMBER(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   RANDOM_NUMBER_TYPE\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on (std_logic_vector).\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_STD_LOGIC_VECTOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   std_logic_vector\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,0x7fffffff]-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_INT31(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   integer\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,1]-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL1(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,1)-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL2(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    );\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on (0,1)-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL3(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    );\nend     TINYMT32;\n-----------------------------------------------------------------------------------\n-- \n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\nuse     ieee.numeric_std.all;\npackage body TINYMT32 is\n    -------------------------------------------------------------------------------\n    -- Period parameters\n    -------------------------------------------------------------------------------\n    constant  MEXP            : integer := 127;\n    constant  SH0             : integer :=   1;\n    constant  SH1             : integer :=  10;\n    constant  SH8             : integer :=   8;\n    constant  MASK            : RANDOM_NUMBER_TYPE := (RANDOM_NUMBER_TYPE'high => '0', others => '1');\n    constant  LINEARITY_CHECK : boolean := FALSE;\n    constant  MIN_LOOP        : integer :=   8;\n    constant  PRE_LOOP        : integer :=   8;\n    -------------------------------------------------------------------------------\n    --! @brief Convert Integer to SEED_TYPE\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    arg       Integer.\n    --! @return             Generated seed number.\n    -------------------------------------------------------------------------------\n    function  TO_SEED_TYPE(arg:integer) return SEED_TYPE is\n    begin\n        return to_unsigned(arg,SEED_TYPE'length);\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief Convert Integer to RANDOM_NUMBER_TYPE\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    arg       Integer.\n    --! @return             Generated random number.\n    -------------------------------------------------------------------------------\n    function  TO_RANDOM_NUMBER_TYPE(arg:integer) return RANDOM_NUMBER_TYPE is\n    begin\n        return to_unsigned(arg,RANDOM_NUMBER_TYPE'length);\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief Convert from Random Number to real.\n    ---------------------------------------------------------------------------\n    function  TO_REAL(arg:RANDOM_NUMBER_TYPE) return real is\n        variable result: real := 0.0;\n    begin\n        for i in arg'range loop\n            result := result + result;\n            if (arg(i) = '1') then\n                result := result + 1.0;\n            end if;\n        end loop;\n        return result;\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief RANDOM_NUMBER_TYPE multiplied by integer.\n    -------------------------------------------------------------------------------\n    function MUL_K(k:integer;arg:RANDOM_NUMBER_TYPE) return RANDOM_NUMBER_TYPE is\n        variable tmp : unsigned(2*RANDOM_NUMBER_TYPE'length-1 downto 0);\n    begin\n        tmp := arg * TO_RANDOM_NUMBER_TYPE(k);\n        return tmp(RANDOM_NUMBER_TYPE'range);\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief Generate instance for Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number for Pseudo Random Number Generator.\n    --! @return             Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    function  NEW_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        mat1    : SEED_TYPE;\n        mat2    : SEED_TYPE;\n        tmat    : RANDOM_NUMBER_TYPE;\n        seed    : SEED_TYPE\n    )   return    PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    is\n        variable generator : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    begin\n        INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator,mat1,mat2,tmat,seed);\n        return generator;\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief Generate instance for Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number Vector for Pseudo Random Number Generator.\n    --! @return             Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    function  NEW_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        mat1    : SEED_TYPE;\n        mat2    : SEED_TYPE;\n        tmat    : RANDOM_NUMBER_TYPE;\n        seed    : SEED_VECTOR\n    )   return    PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    is\n        variable generator : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    begin\n        INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator,mat1,mat2,tmat,seed);\n        return generator;\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief This function certificate the period of 2^127-1.\n    -------------------------------------------------------------------------------\n    procedure period_certification(generator:inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE) is\n    begin \n        if ((generator.status(0) and MASK) = 0) and\n            (generator.status(1)           = 0) and\n            (generator.status(2)           = 0) and\n            (generator.status(3)           = 0) then\n             generator.status(0) := TO_RANDOM_NUMBER_TYPE(84); -- 'T'\n\t     generator.status(1) := TO_RANDOM_NUMBER_TYPE(57); -- 'I';\n\t     generator.status(2) := TO_RANDOM_NUMBER_TYPE(78); -- 'N';\n\t     generator.status(3) := TO_RANDOM_NUMBER_TYPE(89); -- 'Y';\n        end if;\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Initialize Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n                 mat1      : in    SEED_TYPE;\n                 mat2      : in    SEED_TYPE;\n                 tmat      : in    RANDOM_NUMBER_TYPE;\n                 seed      : in    SEED_TYPE\n    ) is\n    begin \n        generator.mat1      := mat1;\n        generator.mat2      := mat2;\n        generator.tmat      := tmat;\n        generator.status(0) := seed;\n        generator.status(1) := mat1;\n        generator.status(2) := mat2;\n        generator.status(3) := tmat;\n        for i in 1 to MIN_LOOP-1 loop\n            generator.status(i mod 4) := generator.status(i mod 4) xor\n                                         (MUL_K(1812433253,\n                                               ((generator.status((i-1) mod 4)) xor\n                                                (generator.status((i-1) mod 4) srl 30))) + i);\n        end loop;\n        period_certification(generator);\n        for i in 0 to PRE_LOOP-1 loop\n           NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        end loop;\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Initialize Pseudo Random Number Generator.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    mat1      Parameter for Pseudo Random Number Generator.\n    --! @param    mat2      Parameter for Pseudo Random Number Generator.\n    --! @param    tmat      Parameter for Pseudo Random Number Generator.\n    --! @param    seed      Seed Number Vector for Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure INIT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n                 mat1      : in    SEED_TYPE;\n                 mat2      : in    SEED_TYPE;\n                 tmat      : in    RANDOM_NUMBER_TYPE;\n                 seed      : in    SEED_VECTOR\n    ) is\n        constant lag       : integer := 1;\n        constant mid       : integer := 1;\n        constant size      : integer := 4;\n        variable i,j       : integer;\n        variable count     : integer;\n        variable r         : RANDOM_NUMBER_TYPE;\n        alias    init_key  : SEED_VECTOR(1 to seed'length) is seed;\n        function ini_func1(x:RANDOM_NUMBER_TYPE) return RANDOM_NUMBER_TYPE is\n        begin \n            return MUL_K(1664525   ,(x xor (x srl 27)));\n        end function;\n        function ini_func2(x:RANDOM_NUMBER_TYPE) return RANDOM_NUMBER_TYPE is\n        begin \n            return MUL_K(1566083941,(x xor (x srl 27)));\n        end function;\n    begin\n        generator.mat1      := mat1;\n        generator.mat2      := mat2;\n        generator.tmat      := tmat;\n        generator.status(0) := TO_RANDOM_NUMBER_TYPE(0);\n        generator.status(1) := mat1;\n        generator.status(2) := mat2;\n        generator.status(3) := tmat;\n        if (init_key'length + 1 > MIN_LOOP) then\n            count := init_key'length + 1;\n        else\n            count := MIN_LOOP;\n        end if;\n        i := 0;\n        for j in 0 to count-1 loop\n            r := ini_func1(generator.status(i) xor\n                           generator.status((i+mid) mod size) xor\n                           generator.status((i+size-1) mod size));\n            generator.status((i+mid    ) mod size) := generator.status((i+mid    ) mod size) + r;\n            if    (j = 0) then\n                r := r + init_key'length;\n            elsif (init_key'low <= j and j <= init_key'high) then\n                r := r + init_key(j) + i;\n            else\n                r := r + i;\n            end if;\n            generator.status((i+mid+lag) mod size) := generator.status((i+mid+lag) mod size) + r;\n            generator.status(i) := r;\n            i := (i + 1) mod size;\n        end loop;\n        for j in 0 to size-1 loop\n            r := ini_func2(generator.status(i) +\n                           generator.status((i+mid   ) mod size) +\n                           generator.status((i+size-1) mod size));\n            generator.status((i+mid    ) mod size) := generator.status((i+mid    ) mod size) xor r;\n            r := r - i;\n            generator.status((i+mid+lag) mod size) := generator.status((i+mid+lag) mod size) xor r;\n            generator.status(i) := r;\n            i := (i + 1) mod size;\n        end loop;\n        period_certification(generator);\n        for i in 0 to PRE_LOOP-1 loop\n            NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        end loop;\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief This function changes internal state of tinymt32.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! * Users should not call this function directly.\n    --! @param    generator Pseudo Random Number Generator.\n    -------------------------------------------------------------------------------\n    procedure NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(\n        variable generator  : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    ) is\n        variable x          :       RANDOM_NUMBER_TYPE;\n        variable y          :       RANDOM_NUMBER_TYPE;\n    begin \n        x := (generator.status(0) and MASK) xor generator.status(1) xor generator.status(2);\n        y :=  generator.status(3);\n        x := x xor (x sll SH0);\n        y := y xor (y srl SH0) xor x;\n        generator.status(0) := generator.status(1);\n        generator.status(1) := generator.status(2);\n        generator.status(2) := x xor (y sll SH1);\n        generator.status(3) := y;\n        if (y(0) = '1') then\n            generator.status(1) := generator.status(1) xor generator.mat1;\n            generator.status(2) := generator.status(2) xor generator.mat2;\n        end if;\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief This function outputs 32-bit unsigned integer from internal state.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! * Users should not call this function directly.\n    --! @param    generator Pseudo Random Number Generator.\n    --! @return             Generated temper number.\n    -------------------------------------------------------------------------------\n    function GENERATE_TEMPER(\n                 generator  :       PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE\n    )            return             RANDOM_NUMBER_TYPE\n    is\n        variable t0         :       RANDOM_NUMBER_TYPE;\n        variable t1         :       RANDOM_NUMBER_TYPE;\n    begin\n        t0 := generator.status(3);\n        if (LINEARITY_CHECK) then\n            t1 := generator.status(0) xor (generator.status(2) srl SH8);\n        else\n            t1 := generator.status(0)  +  (generator.status(2) srl SH8);\n        end if;\n        t0 := t0 xor t1;\n        if (t1(0) = '1') then\n            t0 := t0 xor generator.tmat;\n        end if;\n        return t0;\n    end function;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_NUMBER(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   RANDOM_NUMBER_TYPE\n    ) is\n    begin \n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        number := GENERATE_TEMPER(generator);\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on (std_logic_vector).\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_STD_LOGIC_VECTOR(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   std_logic_vector\n    ) is\n        variable word      :       RANDOM_NUMBER_TYPE;\n        variable number_t  :       std_logic_vector(number'length-1 downto 0);\n    begin\n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        word := GENERATE_TEMPER(generator);\n        for i in number_t'range loop\n            if (word(i) = '1') then\n                number_t(i) := '1';\n            else\n                number_t(i) := '0';\n            end if;\n        end loop;  \n        number := number_t;\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,0x7fffffff]-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_INT31(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   integer\n    ) is\n        variable word      :       RANDOM_NUMBER_TYPE;\n    begin\n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        word := GENERATE_TEMPER(generator);\n        number := to_integer(word(31 downto 1));\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,1]-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL1(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    ) is\n        variable word      :       RANDOM_NUMBER_TYPE;\n    begin\n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        word := GENERATE_TEMPER(generator);\n        number := (1.0/4294967295.0)*TO_REAL(word);\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on [0,1)-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL2(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    ) is\n        variable word      :       RANDOM_NUMBER_TYPE;\n    begin\n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        word := GENERATE_TEMPER(generator);\n        number := (1.0/4294967296.0)*TO_REAL(word);\n    end procedure;\n    -------------------------------------------------------------------------------\n    --! @brief Generates a random number on (0,1)-real-interval.\n    --! - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    --! @param    generator Pseudo Random Number Generator.\n    --! @param    number    Generated random number.\n    -------------------------------------------------------------------------------\n    procedure GENERATE_RANDOM_REAL3(\n        variable generator : inout PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        variable number    : out   real\n    ) is\n        variable word      :       RANDOM_NUMBER_TYPE;\n    begin\n        NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(generator);\n        word := GENERATE_TEMPER(generator);\n        number := (1.0/4294967296.0)*(0.5+TO_REAL(word));\n    end procedure;\nend     TINYMT32;\n````\n\n##tinymt32_gen.vhd(\u64ec\u4f3c\u4e71\u6570\u751f\u6210\u56de\u8def\u306e\u30b5\u30f3\u30d7\u30eb)\n\n````VHDL:tinymt32_gen.vhd\n-----------------------------------------------------------------------------------\n--!     @file    tinymt32_gen.vhd\n--!     @brief   Pseudo Random Number Generator (TinyMT32).\n--!     @version 1.0.0\n--!     @date    2012/8/1\n--!     @author  Ichiro Kawazome <ichiro_k@ca2.so-net.ne.jp>\n-----------------------------------------------------------------------------------\n--\n--      Copyright (C) 2012 Ichiro Kawazome\n--      All rights reserved.\n--\n--      Redistribution and use in source and binary forms, with or without\n--      modification, are permitted provided that the following conditions\n--      are met:\n--\n--        1. Redistributions of source code must retain the above copyright\n--           notice, this list of conditions and the following disclaimer.\n--\n--        2. Redistributions in binary form must reproduce the above copyright\n--           notice, this list of conditions and the following disclaimer in\n--           the documentation and/or other materials provided with the\n--           distribution.\n--\n--      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n--      \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n--      LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n--      A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n--      OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n--      SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n--      LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n--      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n--      THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n--      (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n--      OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--\n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\nuse     work.TINYMT32.RANDOM_NUMBER_TYPE;\nuse     work.TINYMT32.PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\nentity  TINYMT32_GEN is\n    port (\n        CLK         : in  std_logic;\n        RST         : in  std_logic;\n        INIT        : in  std_logic;\n        INIT_PARAM  : in  PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n        RND_RUN     : in  std_logic;\n        RND_VAL     : out std_logic;\n        RND_NUM     : out RANDOM_NUMBER_TYPE\n    );\nend     TINYMT32_GEN;\n-----------------------------------------------------------------------------------\n--\n-----------------------------------------------------------------------------------\nlibrary ieee;\nuse     ieee.std_logic_1164.all;\nuse     ieee.numeric_std.all;\nuse     work.TINYMT32.all;\narchitecture RTL of TINYMT32_GEN is\n    constant  DEFAULT_PARAM    : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE :=\n                                 NEW_PSEUDO_RANDOM_NUMBER_GENERATOR(\n                                     X\"8f7011ee\",\n                                     X\"fc78ff1f\",\n                                     X\"3793fdff\",\n                                     TO_SEED_TYPE(1)\n                                 );\n    signal    curr_status      : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    signal    status_valid     : std_logic;\nbegin\n    process(CLK, RST)\n        variable next_status   : PSEUDO_RANDOM_NUMBER_GENERATOR_TYPE;\n    begin\n        if (RST = '1') then\n                curr_status  <= DEFAULT_PARAM;\n                status_valid <= '0';\n                RND_VAL      <= '0';\n                RND_NUM      <= (others => '0');\n        elsif (CLK'event and CLK = '1') then\n            if (INIT = '1') then\n                curr_status  <= INIT_PARAM;\n                status_valid <= '0';\n                RND_VAL      <= '0';\n                RND_NUM      <= (others => '0');\n            else\n                if (RND_RUN = '1') then\n                    next_status := curr_status;\n                    NEXT_PSEUDO_RANDOM_NUMBER_GENERATOR(next_status);\n                    curr_status  <= next_status;\n                    status_valid <= '1';\n                else\n                    status_valid <= '0';\n                end if;\n                if (status_valid = '1') then\n                    RND_NUM <= GENERATE_TEMPER(curr_status);\n                    RND_VAL <= '1';\n                else\n                    RND_VAL <= '0';\n                end if;\n            end if;\n        end if;\n    end process;\nend RTL;\n````\n"}