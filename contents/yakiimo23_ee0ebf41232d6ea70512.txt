{"context": " More than 1 year has passed since last update.Rails\u3067\u306eAPI\u958b\u767a\u306bGrape\u3092\u4f7f\u3063\u3066\u3044\u3066\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u8a8d\u8a3c\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nhttps://mikecoutermarsh.com/rails-grape-api-key-authentication/\n\u81ea\u5206\u3067\u89e3\u91c8\u3059\u308b\u70ba\u306b\u4e00\u90e8\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u3057\u305f\u3082\u306e\u3092\u307e\u3068\u3081\u3066\u307e\u3059\u3002\n\nHow do works\n\n\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u6642\u306f\u3001Username/Password\u3092API\u306bPOST\u3059\u308b\n\u30e6\u30fc\u30b6\u30fc\u8a8d\u8a3c\u3057\u3001API Key\u3092\u8fd4\u5374\u3059\u308b\n\u305d\u306e\u5f8c\u306e\u5168\u3066\u306eAPI\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001API Key\u3068\u4e00\u7dd2\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3002\n\n\nHow do it\n\nAPI Key\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\n\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30ab\u30e9\u30e0\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\naccess_token\nexpires_at\nuser_id\n\nrails g model api_key access_token:string expires_at:datetime user_id:integer active:boolean\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\nmigration\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3001 api_key \u3068 user_id \u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nclass CreateApiKeys < ActiveRecord::Migration  \n  def change\n    create_table :api_keys do |t|\n      t.string :access_token,      null: false\n      t.integer :user_id,          null: false\n      t.datetime :expires_at\n\n      t.timestamps\n    end\n\n    add_index :api_keys, [\"user_id\"], name: \"index_api_keys_on_user_id\", unique: false\n    add_index :api_keys, [\"access_token\"], name: \"index_api_keys_on_access_token\", unique: true\n  end\nend\n\nmigration\u3092\u8d70\u3089\u305b\u3066\u5b9f\u969b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3066\u4e0b\u3055\u3044\u3002\nrake db:migrate\n\n\nToken\u306e\u4f5c\u6210\napi_key.rb\u3092\u958b\u3044\u3066\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\nclass ApiKey < ActiveRecord::Base  \n  attr_accessible :access_token, :expires_at, :user_id\n  before_create :generate_access_token\n  before_create :set_expiration\n  belongs_to :user\n\n  def expired?\n    DateTime.now >= self.expires_at\n  end\n\n  private\n  def generate_access_token\n    begin\n      self.access_token = SecureRandom.hex\n    end while self.class.exists?(access_token: access_token)\n  end\n\n  def set_expiration\n    self.expires_at = DateTime.now+30\n  end\nend\n\n\u3053\u308c\u3067API Key\u306e\u4f5c\u6210\u6642\u306baccess_token\u304c\u4f5c\u6210\u3055\u308c\u3001expires_at\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\n\nAuthentication helpers\u3092Grape\u306b\u8ffd\u52a0\nAPI\u304c\u547c\u3070\u308c\u305f\u969b\u306b\u30e6\u30fc\u30b6\u30fc\u8a8d\u8a3c\u3092\u3059\u308b\u51e6\u7406\u3092Grape\u306ehelper\u306b\u66f8\u304d\u8db3\u3057\u307e\u3059\u3002\nhelpers do  \n    def authenticate!\n      error!('Unauthorized. Invalid or expired token.', 401) unless current_user\n    end\n\n    def current_user\n      # \u30c8\u30fc\u30af\u30f3\u3092\u691c\u7d22\n      token = ApiKey.where(access_token: params[:token]).first\n      if token && !token.expired?\n        @current_user = User.find(token.user_id)\n      else\n        false\n      end\n    end\nend\n\n\nGrape\u306bAPI Key\u4f5c\u6210\u51e6\u7406\u3092\u8ffd\u52a0\nPOST /api/auth \u3067\u8a8d\u8a3c\u3057\u307e\u3059\u3002\nGET /api/ping \u3067API Key\u304c\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\n# /api/auth\nresource :auth do\n\n  desc \"Creates and returns access_token if valid login\"\n  params do\n    requires :email, type: String, desc: \"Email address\"\n    requires :password, type: String, desc: \"Password\"\n  end\n  post :login do\n    user = User.where(email: params[:email]).first\n\n    if user && user.authenticate(params[:password])\n      key = ApiKey.create(user_id: user.id)\n      {token: key.access_token}\n    else\n      error!('Unauthorized.', 401)\n    end\n  end\n\n  desc \"Returns pong if logged in correctly\"\n  params do\n    requires :token, type: String, desc: \"Access token.\"\n  end\n  get :ping do\n    authenticate!\n    { message: \"pong\" }\n  end\nend\n\n\nRails\u3067\u306eAPI\u958b\u767a\u306bGrape\u3092\u4f7f\u3063\u3066\u3044\u3066\u3001\u30b7\u30f3\u30d7\u30eb\u306a\u8a8d\u8a3c\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nhttps://mikecoutermarsh.com/rails-grape-api-key-authentication/\n\u81ea\u5206\u3067\u89e3\u91c8\u3059\u308b\u70ba\u306b\u4e00\u90e8\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u3057\u305f\u3082\u306e\u3092\u307e\u3068\u3081\u3066\u307e\u3059\u3002\n\n## How do works\n- \u30e6\u30fc\u30b6\u30fc\u767b\u9332\u6642\u306f\u3001Username/Password\u3092API\u306bPOST\u3059\u308b\n- \u30e6\u30fc\u30b6\u30fc\u8a8d\u8a3c\u3057\u3001API Key\u3092\u8fd4\u5374\u3059\u308b\n- \u305d\u306e\u5f8c\u306e\u5168\u3066\u306eAPI\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u3001API Key\u3068\u4e00\u7dd2\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u3059\u308b\u3002\n\n## How do it\n\n### API Key\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\n\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u30ab\u30e9\u30e0\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n- access_token\n- expires_at\n- user_id\n\n```\nrails g model api_key access_token:string expires_at:datetime user_id:integer active:boolean\n```\n\n### \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\nmigration\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u3046\u306e\u3067\u3001 __api_key__ \u3068 __user_id__ \u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```rb\nclass CreateApiKeys < ActiveRecord::Migration  \n  def change\n    create_table :api_keys do |t|\n      t.string :access_token,      null: false\n      t.integer :user_id,          null: false\n      t.datetime :expires_at\n\n      t.timestamps\n    end\n\n    add_index :api_keys, [\"user_id\"], name: \"index_api_keys_on_user_id\", unique: false\n    add_index :api_keys, [\"access_token\"], name: \"index_api_keys_on_access_token\", unique: true\n  end\nend\n```\n\nmigration\u3092\u8d70\u3089\u305b\u3066\u5b9f\u969b\u306b\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n```\nrake db:migrate\n```\n\n### Token\u306e\u4f5c\u6210\napi_key.rb\u3092\u958b\u3044\u3066\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```rb\nclass ApiKey < ActiveRecord::Base  \n  attr_accessible :access_token, :expires_at, :user_id\n  before_create :generate_access_token\n  before_create :set_expiration\n  belongs_to :user\n\n  def expired?\n    DateTime.now >= self.expires_at\n  end\n\n  private\n  def generate_access_token\n    begin\n      self.access_token = SecureRandom.hex\n    end while self.class.exists?(access_token: access_token)\n  end\n\n  def set_expiration\n    self.expires_at = DateTime.now+30\n  end\nend\n```\n\n\u3053\u308c\u3067API Key\u306e\u4f5c\u6210\u6642\u306baccess_token\u304c\u4f5c\u6210\u3055\u308c\u3001expires_at\u304c\u8a2d\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n### Authentication helpers\u3092Grape\u306b\u8ffd\u52a0\nAPI\u304c\u547c\u3070\u308c\u305f\u969b\u306b\u30e6\u30fc\u30b6\u30fc\u8a8d\u8a3c\u3092\u3059\u308b\u51e6\u7406\u3092Grape\u306ehelper\u306b\u66f8\u304d\u8db3\u3057\u307e\u3059\u3002\n\n```rb\nhelpers do  \n    def authenticate!\n      error!('Unauthorized. Invalid or expired token.', 401) unless current_user\n    end\n\n    def current_user\n      # \u30c8\u30fc\u30af\u30f3\u3092\u691c\u7d22\n      token = ApiKey.where(access_token: params[:token]).first\n      if token && !token.expired?\n        @current_user = User.find(token.user_id)\n      else\n        false\n      end\n    end\nend\n```\n\n### Grape\u306bAPI Key\u4f5c\u6210\u51e6\u7406\u3092\u8ffd\u52a0\n__POST /api/auth__ \u3067\u8a8d\u8a3c\u3057\u307e\u3059\u3002\n__GET /api/ping__ \u3067API Key\u304c\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```rb\n# /api/auth\nresource :auth do\n\n  desc \"Creates and returns access_token if valid login\"\n  params do\n    requires :email, type: String, desc: \"Email address\"\n    requires :password, type: String, desc: \"Password\"\n  end\n  post :login do\n    user = User.where(email: params[:email]).first\n\n    if user && user.authenticate(params[:password])\n      key = ApiKey.create(user_id: user.id)\n      {token: key.access_token}\n    else\n      error!('Unauthorized.', 401)\n    end\n  end\n\n  desc \"Returns pong if logged in correctly\"\n  params do\n    requires :token, type: String, desc: \"Access token.\"\n  end\n  get :ping do\n    authenticate!\n    { message: \"pong\" }\n  end\nend\n```\n", "tags": ["Rails", "grape", "Ruby"]}