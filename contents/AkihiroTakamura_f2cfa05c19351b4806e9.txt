{"tags": ["Node", "Express", "OAuth2.0"], "context": "\n\nnode-auth-server\nAuthorization Server by node\n\nreffrences\n\nref1: here\n\nref2: here\n\nref3: here here\n\n\n\nsource code\n\ngithub\n\n\nGetting Stated\n\ninstall mongoDB(mac)\n# install\nbrew install mongodb\n\n# mongoDB auto start\nln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\nlaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\n\n\n\ninstall mongoDB(Linux with yum)\n\nmake repository file\n\n\n/etc/yum.repos.d/mongodb.repo\n[mongodb]\nname=MongoDB Repository\nbaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/\ngpgcheck=0\nenabled=1\n\n\n\ninstall and run\n\nsudo yum install -y mongodb-org\nsudo chkconfig mongod on\nsudo service mongod start\n\n\n\ninstall node(mac)(if not installed)\nbrew install node \nnpm install -g n\nn stable\n\n\ninstall node(Linux)(if not installed)\nyum install nodejs npm --enablerepo=epel\nnpm install -g n\nn stable\n\n\ninstall global node modules\nnpm install -g node-inspector gulp nodemon pm2\n\n\n\nhow to debug application\ngit clone ...\ncd node-auth-server\nnpm install\ngulp\n\n\nhow to run application\nexport NODE_ENV=production\npm2 start server.js --name=\"node-auth-server\" --watch\n\n\n\nFunctions\n\nUser Authentification by id/pass\n\n\nbasic authenticate/form authenticate\n\n\nApplication Authorization by clientid/clientsecret\n\n\nOAuth2.0 grant code flow\n\n\nManagement page for User/Role/Client and so on.\n\n\nTutorial\n\nfirst setting by Management view\n\nhttp://localhost:9999/\nDefault User\n\n\nusername: admin\npassword: admin\n\n\n\n\ndefault user is defined config/*.json\n\n\n\nregist client\n\nfor regist oauth2 client, select 'Manage Client' from Menu first.\n\n\n\nclick add button\n\n\n\nregist client.\n\n\nwe suppose set your hostname which  callback after authorization to domain(redirect url)\n\n\n\n\n\nafter client registed, application secret is shown. please note this for oauth connection.\n\n\n\nGet Oauth Code\n\nAfter registed client, you can get Access Token by web api.\nfirst, you have to get oauth2 code.\nopen browser and input following url.\n\nhttp://localhost:9999/api/oauth2/authorize?client_id=example&response_type=code&redirect_uri=http://localhost:9999&scope=username role fullName email phone image\n\n\nauthorization page opened, click 'aoorove and continue'\n\n\n\nsee url bar in your browser.\nurl includes oauth code like http://localhost:9999/code=mf7IOpFpY8kb6g5B\n\nnote the code\n\n\nExchange Oauth code to accessToken\n\nplease open postman.\nurl: /api/oauth2/token\nmethod: POST\n\nheader:\n\nAuthorization: Basic [converted base64 string 'clientid:client secret']\n\n\n\nbody\n\ncode: mf7IOpFpY8kb6g5B\n\n\n\n\nset OAuthCode - you noted a little while ago\n\n\ngrant_type: authorization_code\n\n\n\n\nif ok, return access token by json\n\n\n\nplease note that, OAuth Code is One-Time useage.\nif you try again, go back browser and re get Oauth code.\n\n\nGet Profile Information by accessToken\n\nurl: /api/profile\nmethod: GET\nheader\n\n\nAuthorization: Bearer \n\n\n\n\n\nGrant Types\n\nauthorization_code\n\nsee Tutorial\n\n\nResource Owner Password Credentials\n\nExchange username/password to AccessToken\n\n\nurl: /api/oauth2/token\nmethod: POST\nheader\n\n\nAuthorization: Basic clientid:clientsecret\n\n\nbody\n\n\ngrant_type: password\nusername: user id\npassword: user password\nscope: scopes\n\n\n\n\n\n\nClient Credentials\n\nExchange client_id/client_secret to AccessToken\n\n\nurl: /api/oauth2/token\nmethod: POST\nheader\n\n\nAuthorization: Basic clientid:clientsecret\n\n\nbody\n\n\ngrant_type: client_credentials\nscope: username,role,fullName,email,phone\n\n\n\n\nrefresh token\n\nurl: /api/oauth2/token\nmethod: POST\nheader\n\n\nAuthorization: Basic clientid:clientsecret\n\n\nbody\n\n\ngrant_type: refresh_token\nrefresh_token: refresh token\n\n\n\n\n\nAPIs\n\nadd user\n\nurl: /api/users\nmethod: POST\nheader\n\n\nAuthorization: Bearer \n\n\nbody\n\n\nusername: user id\npassword: user password\nfullName: user full name\nroles: user roles(Array)\n\n\n\n\nadd client\n\nurl: /api/clients\nmethod: POST\nheader\n\n\nAuthorization: Bearer \n\n\nbody\n\n\nname: client(application) name\nid: client(application) id\ndomain: client(application) domain e.g)hostname\n\n\n\n\n# node-auth-server\n Authorization Server by node\n\n# reffrences\n* ref1: [here](https://github.com/scottksmith95/beerlocker)\n* ref2: [here](https://github.com/IGZangelsanchez/oauth2orize-example-extended)\n* ref3: [here](https://hnryjms.github.io/2014/04/authentication/) [here](https://hnryjms.github.io/2014/07/oauth2/)\n\n# source code\n* [github](https://github.com/AkihiroTakamura/node-auth-server)\n\n\n# Getting Stated\n\n## install mongoDB(mac)\n\n```\n# install\nbrew install mongodb\n\n# mongoDB auto start\nln -sfv /usr/local/opt/mongodb/*.plist ~/Library/LaunchAgents\nlaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.mongodb.plist\n\n```\n\n## install mongoDB(Linux with yum)\n\n* make repository file\n\n```/etc/yum.repos.d/mongodb.repo\n[mongodb]\nname=MongoDB Repository\nbaseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/\ngpgcheck=0\nenabled=1\n```\n\n* install and run\n\n```\nsudo yum install -y mongodb-org\nsudo chkconfig mongod on\nsudo service mongod start\n\n```\n\n\n## install node(mac)(if not installed)\n\n```\nbrew install node \nnpm install -g n\nn stable\n```\n\n## install node(Linux)(if not installed)\n\n```\nyum install nodejs npm --enablerepo=epel\nnpm install -g n\nn stable\n```\n\n## install global node modules\n\n```\nnpm install -g node-inspector gulp nodemon pm2\n\n```\n\n\n## how to debug application\n\n```\ngit clone ...\ncd node-auth-server\nnpm install\ngulp\n```\n\n## how to run application\n\n```\nexport NODE_ENV=production\npm2 start server.js --name=\"node-auth-server\" --watch\n\n```\n\n\n\n\n# Functions\n* User Authentification by id/pass\n  * basic authenticate/form authenticate\n* Application Authorization by clientid/clientsecret\n  * OAuth2.0 grant code flow\n* Management page for User/Role/Client and so on.\n\n\n# Tutorial\n\n## first setting by Management view\n* http://localhost:9999/\n* Default User\n  * username: admin\n  * password: admin\n\n> default user is defined config/*.json\n\n![Kobito.lO2E2S.png](https://qiita-image-store.s3.amazonaws.com/0/60056/576b920d-4264-7768-7879-cf443ee82028.png \"Kobito.lO2E2S.png\")\n\n## regist client\n\n* for regist oauth2 client, select 'Manage Client' from Menu first.\n\n![Kobito.jWpQA6.png](https://qiita-image-store.s3.amazonaws.com/0/60056/ef6d14f5-9fe4-baf0-1421-1a8639dcea42.png \"Kobito.jWpQA6.png\")\n\n* click add button\n\n![Kobito.BkD1wk.png](https://qiita-image-store.s3.amazonaws.com/0/60056/ac869c5a-5615-3e90-e976-0676b179a5b1.png \"Kobito.BkD1wk.png\")\n\n* regist client.\n  * we suppose set your hostname which  callback after authorization to domain(redirect url)\n\n![Kobito.nyxfJc.png](https://qiita-image-store.s3.amazonaws.com/0/60056/8deeda95-f864-97ef-fb93-3c67efc6c040.png \"Kobito.nyxfJc.png\")\n\n\n* after client registed, application secret is shown. please note this for oauth connection.\n\n![Kobito.qYLYnv.png](https://qiita-image-store.s3.amazonaws.com/0/60056/08525f1b-6ac3-28b4-cae3-fb94ed4f1e4b.png \"Kobito.qYLYnv.png\")\n\n\n## Get Oauth Code\n* After registed client, you can get Access Token by web api.\n\n* first, you have to get oauth2 code.\n* open browser and input following url.\n\n```\nhttp://localhost:9999/api/oauth2/authorize?client_id=example&response_type=code&redirect_uri=http://localhost:9999&scope=username role fullName email phone image\n```\n\n* authorization page opened, click 'aoorove and continue'\n\n![Kobito.qNCcT3.png](https://qiita-image-store.s3.amazonaws.com/0/60056/bdc894d3-4821-0770-ae50-96f28fba975e.png \"Kobito.qNCcT3.png\")\n\n\n* see url bar in your browser.\n* url includes oauth code like http://localhost:9999/code=mf7IOpFpY8kb6g5B\n* note the code\n\n\n## Exchange Oauth code to accessToken\n\n* please open postman.\n\n* url: /api/oauth2/token\n* method: POST\n* header:\n\t* Authorization: Basic [converted base64 string 'clientid:client secret']\n* body\n  * code: mf7IOpFpY8kb6g5B\n\n  > set OAuthCode - you noted a little while ago\n\n  * grant_type: authorization_code\n\n![Kobito.nnD6w0.png](https://qiita-image-store.s3.amazonaws.com/0/60056/86a9cd86-d3f2-9b7e-ab95-1e7c334b2fbe.png \"Kobito.nnD6w0.png\")\n\n\n![Kobito.Ec05Hd.png](https://qiita-image-store.s3.amazonaws.com/0/60056/0888ff29-08bc-678a-0b13-9902a7fcd023.png \"Kobito.Ec05Hd.png\")\n\n\n* if ok, return access token by json\n\n![Kobito.FnvIZH.png](https://qiita-image-store.s3.amazonaws.com/0/60056/df70a5bc-7022-4e2b-fc62-e1f7026a69aa.png \"Kobito.FnvIZH.png\")\n\n\n\n> please note that, OAuth Code is One-Time useage.\n> if you try again, go back browser and re get Oauth code.\n\n\n## Get Profile Information by accessToken\n* url: /api/profile\n* method: GET\n* header\n  * Authorization: Bearer <accesstoken>\n\n![Kobito.EHf6NK.png](https://qiita-image-store.s3.amazonaws.com/0/60056/8eb21a5f-8b95-23ee-afb4-1549a534feeb.png \"Kobito.EHf6NK.png\")\n\n\n# Grant Types\n## authorization_code\n* see Tutorial\n\n\n## Resource Owner Password Credentials\n> Exchange username/password to AccessToken\n\n* url: /api/oauth2/token\n* method: POST\n* header\n  * Authorization: Basic clientid:clientsecret\n* body\n  * grant_type: password\n  * username: user id\n  * password: user password\n  * scope: scopes\n\n\n![Kobito.pZ7Mjj.png](https://qiita-image-store.s3.amazonaws.com/0/60056/83754b14-42ab-4a90-b7cc-301d24259078.png \"Kobito.pZ7Mjj.png\")\n\n![Kobito.M1l2ge.png](https://qiita-image-store.s3.amazonaws.com/0/60056/0c11acb4-c4d6-a932-96b8-7a1b9def7d4d.png \"Kobito.M1l2ge.png\")\n\n## Client Credentials\n> Exchange client_id/client_secret to AccessToken\n\n* url: /api/oauth2/token\n* method: POST\n* header\n  * Authorization: Basic clientid:clientsecret\n* body\n  * grant_type: client_credentials\n  * scope: username,role,fullName,email,phone\n\n\n## refresh token\n* url: /api/oauth2/token\n* method: POST\n* header\n  * Authorization: Basic clientid:clientsecret\n* body\n  * grant_type: refresh_token\n  * refresh_token: refresh token\n\n![Kobito.ydlc18.png](https://qiita-image-store.s3.amazonaws.com/0/60056/015ee593-74f4-1f0c-28ee-b7f967abd23a.png \"Kobito.ydlc18.png\")\n\n\n# APIs\n\n## add user\n* url: /api/users\n* method: POST\n* header\n  * Authorization: Bearer <accesstoken>\n* body\n  * username: user id\n  * password: user password\n  * fullName: user full name\n  * roles: user roles(Array)\n\n## add client\n* url: /api/clients\n* method: POST\n* header\n  * Authorization: Bearer <accesstoken>\n* body\n  * name: client(application) name\n  * id: client(application) id\n  * domain: client(application) domain e.g)hostname\n\n"}