{"context": " More than 1 year has passed since last update.\n\n\u30b9\u30c8\u30fc\u30ea\u30fc\nLisp \u306f\u3001\u300c\u62ec\u5f27\u304c\u591a\u304f\u300d\u300c\u524d\u7f6e\u8a18\u6cd5\u300d\u3067\u3042\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5229\u7528\u8005\u304c\u4f38\u3073\u60a9\u3093\u3067\u3044\u308b\u3068\u8a00\u308f\u308c\u3066\u3044\u308b\u3002Lisper \u5171\u306b\u3068\u3063\u3066\u306f\u3001\u8a18\u6cd5\u306a\u3069\u898b\u6804\u3048\u306e\u554f\u984c\u306b\u904e\u304e\u305a\u3001\u3053\u308c\u3092\u7701\u307f\u308b\u8005\u306f\u3044\u306a\u3044\u3002\u3068\u306f\u3044\u3048\u3001\u4e2d\u7f6e\u8a18\u6cd5\u306b\u67d3\u3081\u3089\u308c\u305f\u4eba\u3005\u304c\u4e00\u5b9a\u6570\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3082\u307e\u305f\u4e8b\u5b9f\u3067\u3042\u308d\u3046\u3002\n\u3053\u308c\u306f\u3001\u5f7c\u3089\u3092\u3053\u3061\u3089\u306b\u3044\u3056\u306a\u3046\u305f\u3081\u306b\u3001\u4e2d\u7f6e\u8a18\u6cd5\u3092\u53d6\u308a\u5165\u308c\u3066\u307f\u308b\u4e00\u3064\u306e\u5b9f\u9a13\u3067\u3042\u308b\u3002\n\n\u771f\u306e\u30b9\u30c8\u30fc\u30ea\u30fc: \u79c1\u306e\u4f53\u9a13\n\u3042\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u3001 Common Lisp \u3067\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3044\u7acb\u3061\u307e\u3057\u305f\u3002\u305d\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u306f\u3001\u65e2\u306b C \u8a00\u8a9e\u3067\u306e\u5b9f\u88c5\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u300c\u307e\u3042\u5143\u3005\u306e\u8ad6\u6587\u3092\u8aad\u3080\u306e\u306f\u9762\u5012\u3060\u3057\u3001\u3068\u308a\u3042\u3048\u305a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30b3\u30d4\u30da\u3059\u308b\u304b\u300d\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u79c1\u306f\u601d\u3063\u305f\u306e\u3067\u3059: Common Lisp \u306e\u914d\u5217\u53c2\u7167\u306f\u9762\u5012\u3059\u304e\u308b!\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e C \u306e\u5f0f\u3092\u8003\u3048\u307e\u3059:\nx[i] = y[ z[i + 1] + 1 ] - 1;\n\n\u3053\u308c\u304c\u3001 Common Lisp \u3060\u3068:\n(setf (aref x i)\n      (1- (aref y (1+ (aref z (1+ i))))))\n\nCommon Lisp \u7248\u306f\u3001\u306a\u3093\u3060\u304b\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\u914d\u5217\u53c2\u7167\u306b\u3064\u3044\u3066\u304f\u3089\u3044\u3001DSL\u7684\u306a\u611f\u3058\u3067 C \u8a00\u8a9e\u306e\u69cb\u6587\u3092\u53d6\u308a\u5165\u308c\u3089\u308c\u306a\u3044\u304b\u3057\u3089\u3001\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u4f55\u304b\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u3044\u305f\u3089\u30fb\u30fb\u914d\u5217\u53c2\u7167\u4ee5\u5916\u3082\u3001\u7d50\u69cb\u306a C \u306e\u69cb\u6587\u304c\u98df\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u66f8\u3044\u305f\u3082\u306e: with-c-syntax \u30de\u30af\u30ed\n\nHello, World!\n(with-c-syntax ()\n{\n   print \\( \"Hello, World!\" \\) \\;\n})\n\nwith-c-syntax \u3068\u3064\u3051\u3066\u62ec\u5f27\u3067\u56f2\u3081\u3070\u3001\u305d\u306e\u4e2d\u3067\u306f C \u8a00\u8a9e\u7684\u306a\u69cb\u6587\u304c\u4f7f\u3044\u653e\u984c\u3002\u305d\u3093\u306a\u30de\u30af\u30ed\u3067\u3059\u3002\n( ) ; \u3068\u3044\u3046\u6587\u5b57\u306f\u3001 Lisp \u3067\u306f\u7279\u6b8a\u306a\u610f\u5473\u304c\u3042\u308b\u306e\u3067\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002\n\n\u5024\u3092\u8fd4\u3057\u3066\u307f\u308b\n(defun test-add-args (x y)\n  (with-c-syntax ()\n    {\n    return x + y \\;\n    })\n  )\n\n(test-add-args 1 2) ; => 3\n\nlexical \u306b\u898b\u3048\u3066\u3044\u308b\u5909\u6570\u306a\u3089\u3001\u305d\u306e\u307e\u307e\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\nfor \u30eb\u30fc\u30d7\u3067\u3001 1 \u304b\u3089 100 \u307e\u3067\u8db3\u305d\u3046\n(defun test-for-loop ()\n  (let ((i 0) (sum 0))\n    (with-c-syntax ()\n      {\n      for \\( i = 0 \\; i < 100 \\; ++ i \\)\n         sum += i \\;\n      })\n    sum))\n\n(test-for-loop) ; => 5050\n\nfor \u30eb\u30fc\u30d7, \u4ee3\u5165\u6f14\u7b97\u5b50 (= \u3068 +=), \u4e8c\u9805\u6f14\u7b97 (<), \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3082\u4f7f\u3048\u307e\u3059\u3002\n\n\u30eb\u30fc\u30d7\u3092 break \u3057\u305f\u308a continue \u3057\u305f\u308a Lisp \u5f0f\u3092\u6df7\u305c\u305f\u308a\n;; 50 \u672a\u6e80\u306e\u5076\u6570\u306e\u548c\u3092\u53d6\u308b\n(defun test-loop-continue-break ()\n  (with-c-syntax ((i 0) (sum 0))\n   {\n    for \\( i = 0 \\; i < 100 \\; ++ i \\) {\n      if \\( (oddp i) \\) ; Lisp \u95a2\u6570 oddp\n        continue \\;\n      if \\( i == 50 \\)\n        break \\;\n      sum += i \\;\n      (format t \"i ~A, sum ~A~%\" i sum) \\; ; Lisp \u95a2\u6570 format\n    }\n   return sum \\;\n   }))\n\n(test-loop-continue-break) ; => 600\n\nC \u7cfb\u8a00\u8a9e\u3067\u304a\u99b4\u67d3\u307f\u306e continue, break \u306f\u3001\u307f\u306a\u3055\u3093\u3054\u5b58\u77e5\u306e\u6319\u52d5\u3092\u3057\u307e\u3059\u3002\nLisp \u5f0f\u3092\u6df7\u305c\u8fbc\u3080\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u62ec\u5f27\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u306a\u3051\u308c\u3070\u3001 Lisp \u306e\u62ec\u5f27\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002\n\nswitch-case \u3057\u3088\u3046\n(defun test-switch ()\n  (flet ((fun (x)\n           (with-c-syntax ((x x))\n    {\n      format \\( t \\, \"[~A] \" \\, x \\) \\;\n      switch \\( x \\) {\n      case 1 \\:\n        (format t \"case 1~%\") \\;\n        break \\;\n      case 2 \\:\n        (format t \"case 2~%\") \\;\n        (format t \"fall-though 2->3~%\") \\;\n      case 3 \\:\n        (format t \"case 3~%\") \\;\n        break \\;\n      case 4 \\:\n        (format t \"case 4~%\") \\;\n        break \\;\n      default \\:\n        (format t \"default~%\") \\;\n      }\n    })))\n    (loop for i from 0 to 5\n       do (fun i))))\n\n(test-switch)\n;; \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5370\u5b57\u3055\u308c\u308b\n#|\n[0] default\n[1] case 1\n[2] case 2\nfall-though 2->3\ncase 3\n[3] case 3\n[4] case 4\n[5] default\n|#\n\nswitch - case \u3082\u305d\u306e\u307e\u307e\u306b\u3002 switch \u6587\u3067 break \u3092\u5fd8\u308c\u308b\u3068 fall through \u3057\u3061\u3083\u3046\u306e\u3082\u305d\u306e\u307e\u307e\u518d\u73fe!!\n\ngoto \u7121\u53cc\n(defun test-goto ()\n  (with-c-syntax ()\n    {\n      goto d \\;\n    a \\:\n      princ \\( \"a\" \\) \\;\n    b \\:\n      princ \\( \"b\" \\) \\;\n      goto e \\;\n    c \\:\n      princ \\( \"c\" \\) \\;\n      return \\;\n    d \\:\n      princ \\( \"d\" \\) \\;\n      goto a \\;  \n    e \\:\n      princ \\( \"e\" \\) \\;\n      goto c \\;\n    })\n  )\n\n(test-goto)\n;; \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5370\u5b57\u3055\u308c\u308b\n#|\ndabec\n|#\n\nCommon Lisp \u306b\u304a\u3044\u3066\u3082\u3001 goto \u306f\u3068\u3066\u3082\u91cd\u8981\u306a\u5236\u5fa1\u69cb\u6587\u3067\u3059\u3002\n\nDuff's Device\n(defun test-duff-device (to-seq from-seq cnt)\n  (with-c-syntax ((to-seq to-seq) (from-seq from-seq) (cnt cnt)\n                  to from n)\n    {\n    to = & to-seq \\;          ; produces a pointer\n    from = & from-seq \\;      ; (same as above)\n\n    n = \\( cnt + 7 \\) / 8 \\;\n    n = floor \\( n \\) \\;                ; CL:/ produces rational. cast it.\n    switch \\( cnt % 8 \\) {\n    case 0 \\:   do {    * to ++ = * from ++ \\;\n    case 7 \\:       * to ++ = * from ++ \\;\n    case 6 \\:       * to ++ = * from ++ \\;\n    case 5 \\:       * to ++ = * from ++ \\;\n    case 4 \\:       * to ++ = * from ++ \\;\n    case 3 \\:       * to ++ = * from ++ \\;\n    case 2 \\:       * to ++ = * from ++ \\;\n    case 1 \\:       * to ++ = * from ++ \\;\n      } while \\( -- n > 0 \\) \\;\n    }\n    })\n  to-seq)\n\n#| \n\u5b9f\u884c\u4f8b\n\nCL-USER> (setf arr1 (make-array 20 :initial-element 1))\n#(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)\nCL-USER> (setf arr2 (make-array 20 :initial-element 2))\n#(2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)\nCL-USER> (test-duff-device arr1 arr2 10)\n#(2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1)\nCL-USER> arr1\n#(2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1)\n\n\u3053\u3093\u306a \u3068\u3093\u3067\u3082\u306a\u304f\u66f2\u304c\u308a\u304f\u306d\u3063\u305f \u30b3\u30fc\u30c9\u3060\u3063\u3066\u4f7f\u3048\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u73fe\u5728\u306e\u5b9f\u88c5\u306e\u9032\u6357\n\u5f0f (Expression) \u3068\u3001\u6587 (statement) \u306f\u3001\u307b\u307c\u4f55\u3067\u3082\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u672a\u5bfe\u5fdc\u306a\u306e\u306f\u3001 sizeof \u3068, \u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u3060\u3051\u3067\u3059\u3002\n\u4e00\u65b9\u3001\u5ba3\u8a00 (declaration) \u306f\u4e00\u5207\u4f7f\u3048\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001 with-c-syntax \u5185\u90e8\u3067\u5909\u6570\u3092\u4f5c\u308c\u306a\u3044\u3068\u3044\u3046\u91cd\u5927\u306a\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u76f4\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001 Lisp \u30ea\u30fc\u30c0\u304c\u72ec\u81ea\u306e\u89e3\u91c8\u3092\u3059\u308b\u6587\u5b57\u306b\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u304f\u3063\u3064\u3044\u3066\u3057\u307e\u3046\u6587\u5b57\u306b\u306f\u7a7a\u767d\u3092\u5165\u308c\u3066\u96e2\u3059\u5fc5\u8981\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u9069\u5207\u306a\u30ea\u30fc\u30c0\u30fc\u30de\u30af\u30ed\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u89e3\u6c7a\u3067\u304d\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\nhttps://github.com/y2q-actionman/with-c-syntax.git\n\n\u86c7\u8db3: \u5b9f\u88c5\u8a73\u7d30\n\n\u5927\u67a0\n\nC \u306e BNF \u3092\u62fe\u3046\n\ncl-yacc \u306b\u639b\u3051\u3066\u3001\u30d1\u30fc\u30b6\u3092\u4f5c\u308b\u3002\n\u30d1\u30fc\u30b6\u3092\u4f7f\u3044\u3001 C \u8a00\u8a9e\u7684\u30b7\u30f3\u30dc\u30eb\u5217\u3092 Lisp \u5f0f\u306b\u5909\u63db\u3057\u3066\u5410\u304b\u305b\u308b\u3002\n\u30de\u30af\u30ed\u3067\u30e6\u30fc\u30b6\u306e\u6e21\u3057\u305f\u5f0f\u3092\u53d7\u3051\u3068\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\u4ee5\u4e0b\u3001\u5909\u63db\u4f8b\u3068\u3068\u3082\u306b\u3001\u5b9f\u88c5\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\u5f0f (expression) \u306e\u5909\u63db\n\n\u5358\u7d14\u306a\u5f0f\n\u5358\u9805\u6f14\u7b97\u5b50\u3084\u4e8c\u9805\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u6587\u6cd5\u306e\u8aad\u307f\u304b\u3048\u3092\u3059\u308b\u3053\u3068\u304c\u5927\u90e8\u5206\u306e\u4ed5\u4e8b\u3067\u3059\u3002\n\u305d\u3057\u3066\u3053\u308c\u306f\u3001 cl-yacc \u306b\u3061\u3087\u3063\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4ed5\u8fbc\u3080\u3060\u3051\u3067\u7d42\u308f\u308a\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059:\nx + y     // -> (+ x y)\nx < y     // -> (< x y)\nx || y    // -> (or x y)   ;; CL:or \u3082\u77ed\u7d61\u7684\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u4f7f\u7528\n\nx ? y : z // -> (if x y z) ;; CL:if \u3092\u305d\u306e\u307e\u307e\u4f7f\u7528\n\n!x        // -> (not x)\n\nx[y]      // -> (aref x y) \nx(y)      // -> (x y)      ;; x \u3092\u95a2\u6570\u3060\u3068\u601d\u3063\u3066\u547c\u3073\u51fa\u3057\nx.y       // -> (y x)      ;; y \u3092\u69cb\u9020\u4f53\u306e reader function \u3068\u601d\u3063\u3066\u547c\u3073\u51fa\u3057\n\n\n\u4ee3\u5165\u6f14\u7b97\u5b50, \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8, \u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n\u3053\u308c\u3089\u306f\u3001 \u4ee3\u5165\u5148\u306f setf \u53ef\u80fd\u306a\u5834\u6240\u3067\u3042\u308b \u3068\u6c7a\u3081\u6253\u3061\u3057\u3066\u3001 setf \u306b\u5c55\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nx = 2     // -> (setf x 2)\nx++       // -> (incf x)\n\n+= \u306a\u3069\u306f\u3001 let \u3067\u4e2d\u9593\u7d50\u679c\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3088\u3046\u306b\u5c55\u958b\u3057\u307e\u3059:\nx += 2    // -> (LET ((#:G1016 X)) (SETF X (+ #:G1016 2)))\n\n\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001 define-modify-macro \u3092\u4f7f\u3063\u3066\u3001\u3082\u3063\u3068\u5b9f\u88c5\u4e0a\u306e\u8a18\u8ff0\u3092\u7c21\u5358\u306b\u3059\u308b\u624b\u6bb5\u306f\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3068\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306b\u306f\u3001\u305d\u308c\u305e\u308c incf, decf \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3044\u308f\u3086\u308b post-increment \u306f\u3001 let \u3092\u4f7f\u7528\u3059\u308b\u5f62\u3067\u5c55\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n++x       // -> (incf x)\nx++       // ->  (LET ((#:G1017 X)) (SETF X (+ #:G1017 1))\n\n\n\n\u30dd\u30a4\u30f3\u30bf\n\u79c1\u306e\u77e5\u308b\u304b\u304e\u308a\u3001 Common Lisp \u306b\u306f\u3001\u4efb\u610f\u306e\u5834\u6240\u3092\u6307\u3059\u3053\u3068\u304c\u51fa\u6765\u3066\u3001\u3057\u304b\u3082\u6574\u6570\u578b\u3092\u540c\u3058\u3088\u3046\u306a\u6f14\u7b97\u304c\u51fa\u6765\u308b\u3088\u3046\u306a\u578b\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\u4ed5\u65b9\u304c\u306a\u3044\u306e\u3067\u3001 pseudo-pointer \u306a\u308b\u3082\u306e\u3092\u81ea\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u3001\u7a3f\u3092\u6539\u3081\u3066\u66f8\u304f\u4e88\u5b9a\u3067\u3059\u3002\n\n\u30ad\u30e3\u30b9\u30c8, sizeof\n\u3053\u308c\u3089\u306f\u3001\u73fe\u5728\u306f\u5b9f\u88c5\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\n\u30ad\u30e3\u30b9\u30c8\u306e\u5b9f\u88c5\u306b\u306f\u3001 C \u8a00\u8a9e\u306e\u5ba3\u8a00\u306e\u69cb\u6587\u3092\u89e3\u91c8\u3057\u3001\u5bfe\u5fdc\u3059\u308b\u578b\u3092\u5f15\u304d\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nsizeof \u306e\u5b9f\u88c5\u306b\u306f\u3001\u3055\u3089\u306b\u305d\u308c\u3089\u304c\u5360\u3081\u308b\u30e1\u30e2\u30ea\u9818\u57df\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u5ba3\u8a00\u306e\u69cb\u6587\u3092\u89e3\u91c8\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308c\u3070\u3001\u30ad\u30e3\u30b9\u30c8\u306f\u5b9f\u88c5\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u3002\n\u3057\u304b\u3057\u3001 sizeof \u306f\u9762\u5012\u305d\u3046\u3067\u3059\u3002\n\n\u6587 (statement) \u306e\u5909\u63db\n\ngoto\n\n\u3044\u304d\u306a\u308a goto \u304b\u3089\u3067\u3059\u3002\u3053\u308c\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u304c\u3001\u3053\u306e\u5b9f\u88c5\u306e\u5927\u67a0\u306b\u5f71\u97ff\u3057\u3066\u3044\u307e\u3059\u3002\nCommon Lisp \u3067 goto \u3068\u3044\u3048\u3070\u3001 tagbody \u3068 go \u3067\u3042\u308a\u3001\u4eca\u56de\u306e\u5b9f\u88c5\u3082\u305d\u308c\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\ntagbody \u3067\u306f\u3001 lexical \u306b\u898b\u3048\u3066\u3044\u308b go tag \u306b go \u3057\u3066\u98db\u3076\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u3055\u3066\u3001 C \u8a00\u8a9e\u306e goto \u30e9\u30d9\u30eb\u306f\u3001\u6050\u308b\u3079\u304d\u3053\u3068\u306b\u95a2\u6570\u5168\u4f53\u306b\u30b9\u30b3\u30fc\u30d7\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001 goto \u306f\u8907\u6587\u306e\u4e2d\u3067\u3082\u3069\u3053\u306b\u3067\u3082\u98db\u3079\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3064\u307e\u308a\u3053\u308c\u3092 tagbody \u3067\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u5168\u3066\u306e\u8907\u6587\u3092\u30d5\u30e9\u30c3\u30c8\u306b\u5c55\u958b\u3057\u3066\u3001 go tag \u304c tagbody \u304b\u3089\u898b\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059! \u3053\u308c\u304c\u3001\u3053\u306e\u5f8c\u306e\u5168\u3066\u306b\u5f71\u97ff\u3057\u3066\u3044\u307e\u3059\u3002\n\u4f8b:\n(with-c-syntax ()\n  {\n    goto d \\;\n\n  a \\:\n    princ \\( \"a\" \\) \\;\n\n  b \\:\n    princ \\( \"b\" \\) \\;\n    goto e \\;\n\n  c \\:\n    princ \\( \"c\" \\) \\;\n    return \\;\n\n  d \\:\n    princ \\( \"d\" \\) \\;\n    goto a \\;  \n\n  e \\:\n    princ \\( \"e\" \\) \\;\n    goto c \\;\n  })\n\n\u5c55\u958b\u7d50\u679c\u3067\u306f\u3001\u6697\u9ed9\u7684\u306a tagbody \u3092\u542b\u3080 prog \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n(PROG ()\n   (GO D)\n  A\n   (PRINC \"a\")\n  B\n   (PRINC \"b\")\n   (GO E)\n  C\n   (PRINC \"c\")\n   (RETURN (VALUES))\n  D\n   (PRINC \"d\")\n   (GO A)\n  E\n   (PRINC \"e\")\n   (GO C))\n\n\nif\n\nif \u306f\u3001\u305d\u306e\u307e\u307e Common Lisp \u306e if \u306b\u3059\u308c\u3070\u3044\u3044\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u304c\u3001 if \u306e\u7bc0\u306e\u4e2d\u306b goto \u30e9\u30d9\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u8003\u3048\u3089\u308c\u308b\u305f\u3081\u3001 tagbody \u3092\u4f7f\u3046\u5f62\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\nthen \u7bc0 \u3068 else \u7bc0\u306e\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066 gensym \u3067 go tag \u3092\u4ed8\u3051\u3001\u5192\u982d\u3067\u305d\u3053\u3078\u306e go \u3092\u3057\u307e\u3059\u3002\n\u4f8b:\n(with-c-syntax ()\n  {\n  if \\( x \\) {\n    1 + 2 \\;\n  } else {\n    2 + 4 \\;\n  }\n  })\n\n\u5c55\u958b\u7d50\u679c:\n(PROG ()\n  (IF X\n      (GO #:|(if then)1053|)\n      (GO #:|(if else)1054|))\n #:|(if then)1053|\n  (+ 1 2)\n  (GO #:|(if end)1055|)\n #:|(if else)1054|\n  (+ 2 4)\n  (GO #:|(if end)1055|)\n #:|(if end)1055|))))\n\n\n\u30eb\u30fc\u30d7\u69cb\u6587\n\u30eb\u30fc\u30d7\u3082 tagbody \u3092\u4f7f\u3046\u5f62\u306b\u5c55\u958b\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u5834\u6240\u306b\u98db\u3076\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001 go tag \u3092\u4ed5\u8fbc\u3093\u3067\u5c55\u958b\u3057\u307e\u3059:\n\n\u30eb\u30fc\u30d7\u306e\u6761\u4ef6\u7bc0 (\u30eb\u30fc\u30d7\u306e\u672c\u4f53\u304b\u3089\u3001\u3082\u3057\u304f\u306f while, for \u30eb\u30fc\u30d7\u306e\u521d\u56de\u3068\u3001 continue)\n\u30eb\u30fc\u30d7\u306e\u672c\u4f53 (\u30eb\u30fc\u30d7\u306e\u6761\u4ef6\u7bc0\u304b\u3089\u3001\u3082\u3057\u304f\u306f do-while \u306e\u521d\u56de)\n\u30eb\u30fc\u30d7\u306e\u51fa\u53e3 (\u30eb\u30fc\u30d7\u306e\u6761\u4ef6\u7bc0\u304b\u3089\u3001\u3082\u3057\u304f\u306f break)\n\n(\u5c55\u958b\u7d50\u679c\u306f\u3001\u9577\u3044\u306e\u3067\u7565)\n\nswitch \u3068 case\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059:\n\n\ncase \u3084 default \u3092\u898b\u3064\u3051\u305f\u3089\u3001 go tag \u3092 gensym \u3059\u308b\u3002\u305d\u308c\u3092\u30b9\u30da\u30b7\u30e3\u30eb\u5909\u6570\u306b\u8caf\u3081\u3066\u304a\u304f\u3002\n\nswitch \u3092\u898b\u3064\u3051\u305f\u3089\u3001\u5024\u3092\u8a08\u7b97\u3057\u3066 go \u3059\u308b\u30b8\u30e3\u30f3\u30d7\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u3002\n\nbreak \u3067\u306e\u98db\u3073\u5148\u3092 gensym \u3057\u3066\u5c55\u958b\u3059\u308b\u3002\n\n(\u5c55\u958b\u7d50\u679c\u306f\u3001\u9577\u3044\u306e\u3067\u7565)\n\nreturn\n\u3053\u308c\u306b\u306f\u3001 Common Lisp \u306e return \u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u5c55\u958b\u3055\u308c\u305f\u69cb\u6587\u5168\u4f53\u3092\u3001\u540d\u524d\u304c nil \u306e block \u3067\u56f2\u3046\u3053\u3068\u3067\u3001 return \u3067\u8131\u51fa\u3067\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001 tagbody \u3068 \u540d\u524d\u304c nil \u306e block \u3067\u56f2\u3046\u3053\u3068\u306e\u4e21\u65b9\u306e\u6a5f\u80fd\u3092\u6301\u3064 prog \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u4f8b:\n  (with-c-syntax ()\n    {\n    return 1 + 2 \\;\n    })\n\n\u5c55\u958b\u7d50\u679c:\n(PROG () (RETURN (+ 1 2)))\n\n# \u30b9\u30c8\u30fc\u30ea\u30fc\nLisp \u306f\u3001\u300c\u62ec\u5f27\u304c\u591a\u304f\u300d\u300c\u524d\u7f6e\u8a18\u6cd5\u300d\u3067\u3042\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5229\u7528\u8005\u304c\u4f38\u3073\u60a9\u3093\u3067\u3044\u308b\u3068\u8a00\u308f\u308c\u3066\u3044\u308b\u3002Lisper \u5171\u306b\u3068\u3063\u3066\u306f\u3001\u8a18\u6cd5\u306a\u3069\u898b\u6804\u3048\u306e\u554f\u984c\u306b\u904e\u304e\u305a\u3001\u3053\u308c\u3092\u7701\u307f\u308b\u8005\u306f\u3044\u306a\u3044\u3002\u3068\u306f\u3044\u3048\u3001\u4e2d\u7f6e\u8a18\u6cd5\u306b\u67d3\u3081\u3089\u308c\u305f\u4eba\u3005\u304c\u4e00\u5b9a\u6570\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3082\u307e\u305f\u4e8b\u5b9f\u3067\u3042\u308d\u3046\u3002\n\n\u3053\u308c\u306f\u3001\u5f7c\u3089\u3092\u3053\u3061\u3089\u306b\u3044\u3056\u306a\u3046\u305f\u3081\u306b\u3001\u4e2d\u7f6e\u8a18\u6cd5\u3092\u53d6\u308a\u5165\u308c\u3066\u307f\u308b\u4e00\u3064\u306e\u5b9f\u9a13\u3067\u3042\u308b\u3002\n\n# \u771f\u306e\u30b9\u30c8\u30fc\u30ea\u30fc: \u79c1\u306e\u4f53\u9a13\n\u3042\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u3001 Common Lisp \u3067\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3044\u7acb\u3061\u307e\u3057\u305f\u3002\u305d\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u306f\u3001\u65e2\u306b C \u8a00\u8a9e\u3067\u306e\u5b9f\u88c5\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u300c\u307e\u3042\u5143\u3005\u306e\u8ad6\u6587\u3092\u8aad\u3080\u306e\u306f\u9762\u5012\u3060\u3057\u3001\u3068\u308a\u3042\u3048\u305a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u30b3\u30d4\u30da\u3059\u308b\u304b\u300d\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u305d\u3053\u3067\u79c1\u306f\u601d\u3063\u305f\u306e\u3067\u3059: **Common Lisp \u306e\u914d\u5217\u53c2\u7167\u306f\u9762\u5012\u3059\u304e\u308b!**\n\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e C \u306e\u5f0f\u3092\u8003\u3048\u307e\u3059:\n\n```c\nx[i] = y[ z[i + 1] + 1 ] - 1;\n```\n\n\u3053\u308c\u304c\u3001 Common Lisp \u3060\u3068:\n\n```cl\n(setf (aref x i)\n      (1- (aref y (1+ (aref z (1+ i))))))\n```\n\nCommon Lisp \u7248\u306f\u3001\u306a\u3093\u3060\u304b\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u6c17\u304c\u3057\u307e\u3059\u3002\u914d\u5217\u53c2\u7167\u306b\u3064\u3044\u3066\u304f\u3089\u3044\u3001DSL\u7684\u306a\u611f\u3058\u3067 C \u8a00\u8a9e\u306e\u69cb\u6587\u3092\u53d6\u308a\u5165\u308c\u3089\u308c\u306a\u3044\u304b\u3057\u3089\u3001\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u4f55\u304b\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u3044\u305f\u3089\u30fb\u30fb\u914d\u5217\u53c2\u7167\u4ee5\u5916\u3082\u3001\u7d50\u69cb\u306a C \u306e\u69cb\u6587\u304c\u98df\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n# \u66f8\u3044\u305f\u3082\u306e: with-c-syntax \u30de\u30af\u30ed\n## Hello, World!\n```cl\n(with-c-syntax ()\n{\n   print \\( \"Hello, World!\" \\) \\;\n})\n```\n\n`with-c-syntax` \u3068\u3064\u3051\u3066\u62ec\u5f27\u3067\u56f2\u3081\u3070\u3001\u305d\u306e\u4e2d\u3067\u306f C \u8a00\u8a9e\u7684\u306a\u69cb\u6587\u304c\u4f7f\u3044\u653e\u984c\u3002\u305d\u3093\u306a\u30de\u30af\u30ed\u3067\u3059\u3002\n`( ) ;` \u3068\u3044\u3046\u6587\u5b57\u306f\u3001 Lisp \u3067\u306f\u7279\u6b8a\u306a\u610f\u5473\u304c\u3042\u308b\u306e\u3067\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u4ed8\u3051\u3066\u3044\u307e\u3059\u3002\n\n## \u5024\u3092\u8fd4\u3057\u3066\u307f\u308b\n```cl\n(defun test-add-args (x y)\n  (with-c-syntax ()\n    {\n    return x + y \\;\n    })\n  )\n\n(test-add-args 1 2) ; => 3\n```\n\nlexical \u306b\u898b\u3048\u3066\u3044\u308b\u5909\u6570\u306a\u3089\u3001\u305d\u306e\u307e\u307e\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n## for \u30eb\u30fc\u30d7\u3067\u3001 1 \u304b\u3089 100 \u307e\u3067\u8db3\u305d\u3046\n```cl \n(defun test-for-loop ()\n  (let ((i 0) (sum 0))\n    (with-c-syntax ()\n      {\n      for \\( i = 0 \\; i < 100 \\; ++ i \\)\n         sum += i \\;\n      })\n    sum))\n\n(test-for-loop) ; => 5050\n```\n\n`for` \u30eb\u30fc\u30d7, \u4ee3\u5165\u6f14\u7b97\u5b50 (`=` \u3068 `+=`), \u4e8c\u9805\u6f14\u7b97 (`<`), \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3082\u4f7f\u3048\u307e\u3059\u3002\n\n## \u30eb\u30fc\u30d7\u3092 break \u3057\u305f\u308a continue \u3057\u305f\u308a Lisp \u5f0f\u3092\u6df7\u305c\u305f\u308a\n```cl\n;; 50 \u672a\u6e80\u306e\u5076\u6570\u306e\u548c\u3092\u53d6\u308b\n(defun test-loop-continue-break ()\n  (with-c-syntax ((i 0) (sum 0))\n   {\n    for \\( i = 0 \\; i < 100 \\; ++ i \\) {\n      if \\( (oddp i) \\) ; Lisp \u95a2\u6570 oddp\n        continue \\;\n      if \\( i == 50 \\)\n        break \\;\n      sum += i \\;\n      (format t \"i ~A, sum ~A~%\" i sum) \\; ; Lisp \u95a2\u6570 format\n    }\n   return sum \\;\n   }))\n\n(test-loop-continue-break) ; => 600\n```\n\nC \u7cfb\u8a00\u8a9e\u3067\u304a\u99b4\u67d3\u307f\u306e `continue`, `break` \u306f\u3001\u307f\u306a\u3055\u3093\u3054\u5b58\u77e5\u306e\u6319\u52d5\u3092\u3057\u307e\u3059\u3002\nLisp \u5f0f\u3092\u6df7\u305c\u8fbc\u3080\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u62ec\u5f27\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3057\u306a\u3051\u308c\u3070\u3001 Lisp \u306e\u62ec\u5f27\u3068\u3057\u3066\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002\n\n## switch-case \u3057\u3088\u3046\n```cl \n(defun test-switch ()\n  (flet ((fun (x)\n           (with-c-syntax ((x x))\n    {\n      format \\( t \\, \"[~A] \" \\, x \\) \\;\n      switch \\( x \\) {\n      case 1 \\:\n        (format t \"case 1~%\") \\;\n        break \\;\n      case 2 \\:\n        (format t \"case 2~%\") \\;\n        (format t \"fall-though 2->3~%\") \\;\n      case 3 \\:\n        (format t \"case 3~%\") \\;\n        break \\;\n      case 4 \\:\n        (format t \"case 4~%\") \\;\n        break \\;\n      default \\:\n        (format t \"default~%\") \\;\n      }\n    })))\n    (loop for i from 0 to 5\n       do (fun i))))\n\n(test-switch)\n;; \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5370\u5b57\u3055\u308c\u308b\n#|\n[0] default\n[1] case 1\n[2] case 2\nfall-though 2->3\ncase 3\n[3] case 3\n[4] case 4\n[5] default\n|#\n```\n\n`switch` - `case` \u3082\u305d\u306e\u307e\u307e\u306b\u3002 `switch` \u6587\u3067 `break` \u3092\u5fd8\u308c\u308b\u3068 fall through \u3057\u3061\u3083\u3046\u306e\u3082\u305d\u306e\u307e\u307e\u518d\u73fe!!\n\n## goto \u7121\u53cc\n```cl\n(defun test-goto ()\n  (with-c-syntax ()\n    {\n      goto d \\;\n    a \\:\n      princ \\( \"a\" \\) \\;\n    b \\:\n      princ \\( \"b\" \\) \\;\n      goto e \\;\n    c \\:\n      princ \\( \"c\" \\) \\;\n      return \\;\n    d \\:\n      princ \\( \"d\" \\) \\;\n      goto a \\;  \n    e \\:\n      princ \\( \"e\" \\) \\;\n      goto c \\;\n    })\n  )\n\n(test-goto)\n;; \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5370\u5b57\u3055\u308c\u308b\n#|\ndabec\n|#\n```\n\nCommon Lisp \u306b\u304a\u3044\u3066\u3082\u3001 `goto` \u306f\u3068\u3066\u3082\u91cd\u8981\u306a\u5236\u5fa1\u69cb\u6587\u3067\u3059\u3002\n\n## Duff's Device\n```cl \n(defun test-duff-device (to-seq from-seq cnt)\n  (with-c-syntax ((to-seq to-seq) (from-seq from-seq) (cnt cnt)\n                  to from n)\n    {\n    to = & to-seq \\;          ; produces a pointer\n    from = & from-seq \\;      ; (same as above)\n\n    n = \\( cnt + 7 \\) / 8 \\;\n    n = floor \\( n \\) \\;                ; CL:/ produces rational. cast it.\n    switch \\( cnt % 8 \\) {\n    case 0 \\:\tdo {\t* to ++ = * from ++ \\;\n    case 7 \\:\t\t* to ++ = * from ++ \\;\n    case 6 \\:\t\t* to ++ = * from ++ \\;\n    case 5 \\:\t\t* to ++ = * from ++ \\;\n    case 4 \\:\t\t* to ++ = * from ++ \\;\n    case 3 \\:\t\t* to ++ = * from ++ \\;\n    case 2 \\:\t\t* to ++ = * from ++ \\;\n    case 1 \\:\t\t* to ++ = * from ++ \\;\n      } while \\( -- n > 0 \\) \\;\n    }\n    })\n  to-seq)\n\n#| \n\u5b9f\u884c\u4f8b\n\nCL-USER> (setf arr1 (make-array 20 :initial-element 1))\n#(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1)\nCL-USER> (setf arr2 (make-array 20 :initial-element 2))\n#(2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2)\nCL-USER> (test-duff-device arr1 arr2 10)\n#(2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1)\nCL-USER> arr1\n#(2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1)\n```\n\n\u3053\u3093\u306a *\u3068\u3093\u3067\u3082\u306a\u304f\u66f2\u304c\u308a\u304f\u306d\u3063\u305f* \u30b3\u30fc\u30c9\u3060\u3063\u3066\u4f7f\u3048\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n# \u73fe\u5728\u306e\u5b9f\u88c5\u306e\u9032\u6357\n\u5f0f (Expression) \u3068\u3001\u6587 (statement) \u306f\u3001\u307b\u307c\u4f55\u3067\u3082\u51e6\u7406\u3067\u304d\u307e\u3059\u3002\u672a\u5bfe\u5fdc\u306a\u306e\u306f\u3001 `sizeof` \u3068, \u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u3060\u3051\u3067\u3059\u3002\n\n\u4e00\u65b9\u3001\u5ba3\u8a00 (declaration) \u306f\u4e00\u5207\u4f7f\u3048\u307e\u305b\u3093\u3002\u305d\u306e\u305f\u3081\u3001 `with-c-syntax` \u5185\u90e8\u3067\u5909\u6570\u3092\u4f5c\u308c\u306a\u3044\u3068\u3044\u3046\u91cd\u5927\u306a\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u76f4\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001 Lisp \u30ea\u30fc\u30c0\u304c\u72ec\u81ea\u306e\u89e3\u91c8\u3092\u3059\u308b\u6587\u5b57\u306b\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u304f\u3063\u3064\u3044\u3066\u3057\u307e\u3046\u6587\u5b57\u306b\u306f\u7a7a\u767d\u3092\u5165\u308c\u3066\u96e2\u3059\u5fc5\u8981\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u9069\u5207\u306a\u30ea\u30fc\u30c0\u30fc\u30de\u30af\u30ed\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u89e3\u6c7a\u3067\u304d\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n# \u30b3\u30fc\u30c9\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\n\nhttps://github.com/y2q-actionman/with-c-syntax.git\n\n# \u86c7\u8db3: \u5b9f\u88c5\u8a73\u7d30\n## \u5927\u67a0\n1. C \u306e BNF \u3092\u62fe\u3046\n2. `cl-yacc` \u306b\u639b\u3051\u3066\u3001\u30d1\u30fc\u30b6\u3092\u4f5c\u308b\u3002\n3. \u30d1\u30fc\u30b6\u3092\u4f7f\u3044\u3001 C \u8a00\u8a9e\u7684\u30b7\u30f3\u30dc\u30eb\u5217\u3092 Lisp \u5f0f\u306b\u5909\u63db\u3057\u3066\u5410\u304b\u305b\u308b\u3002\n4. \u30de\u30af\u30ed\u3067\u30e6\u30fc\u30b6\u306e\u6e21\u3057\u305f\u5f0f\u3092\u53d7\u3051\u3068\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n\u4ee5\u4e0b\u3001\u5909\u63db\u4f8b\u3068\u3068\u3082\u306b\u3001\u5b9f\u88c5\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n## \u5f0f (expression) \u306e\u5909\u63db\n\n### \u5358\u7d14\u306a\u5f0f\n\u5358\u9805\u6f14\u7b97\u5b50\u3084\u4e8c\u9805\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u6587\u6cd5\u306e\u8aad\u307f\u304b\u3048\u3092\u3059\u308b\u3053\u3068\u304c\u5927\u90e8\u5206\u306e\u4ed5\u4e8b\u3067\u3059\u3002\n\u305d\u3057\u3066\u3053\u308c\u306f\u3001 `cl-yacc` \u306b\u3061\u3087\u3063\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4ed5\u8fbc\u3080\u3060\u3051\u3067\u7d42\u308f\u308a\u3067\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059:\n\n```c\nx + y     // -> (+ x y)\nx < y     // -> (< x y)\nx || y    // -> (or x y)   ;; CL:or \u3082\u77ed\u7d61\u7684\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u4f7f\u7528\n\nx ? y : z // -> (if x y z) ;; CL:if \u3092\u305d\u306e\u307e\u307e\u4f7f\u7528\n\n!x        // -> (not x)\n\nx[y]      // -> (aref x y) \nx(y)      // -> (x y)      ;; x \u3092\u95a2\u6570\u3060\u3068\u601d\u3063\u3066\u547c\u3073\u51fa\u3057\nx.y       // -> (y x)      ;; y \u3092\u69cb\u9020\u4f53\u306e reader function \u3068\u601d\u3063\u3066\u547c\u3073\u51fa\u3057\n```\n\n### \u4ee3\u5165\u6f14\u7b97\u5b50, \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8, \u30c7\u30af\u30ea\u30e1\u30f3\u30c8\n\u3053\u308c\u3089\u306f\u3001 *\u4ee3\u5165\u5148\u306f `setf` \u53ef\u80fd\u306a\u5834\u6240\u3067\u3042\u308b* \u3068\u6c7a\u3081\u6253\u3061\u3057\u3066\u3001 `setf` \u306b\u5c55\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```c\nx = 2     // -> (setf x 2)\nx++       // -> (incf x)\n```\n\n`+=` \u306a\u3069\u306f\u3001 `let` \u3067\u4e2d\u9593\u7d50\u679c\u3092\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3088\u3046\u306b\u5c55\u958b\u3057\u307e\u3059:\n\n```c\nx += 2    // -> (LET ((#:G1016 X)) (SETF X (+ #:G1016 2)))\n```\n\n\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001 `define-modify-macro` \u3092\u4f7f\u3063\u3066\u3001\u3082\u3063\u3068\u5b9f\u88c5\u4e0a\u306e\u8a18\u8ff0\u3092\u7c21\u5358\u306b\u3059\u308b\u624b\u6bb5\u306f\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\n\n\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3068\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306b\u306f\u3001\u305d\u308c\u305e\u308c `incf`, `decf` \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u3044\u308f\u3086\u308b post-increment \u306f\u3001 `let` \u3092\u4f7f\u7528\u3059\u308b\u5f62\u3067\u5c55\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```c\n++x       // -> (incf x)\nx++       // ->  (LET ((#:G1017 X)) (SETF X (+ #:G1017 1))\n\n```\n\n### \u30dd\u30a4\u30f3\u30bf\n\u79c1\u306e\u77e5\u308b\u304b\u304e\u308a\u3001 Common Lisp \u306b\u306f\u3001\u4efb\u610f\u306e\u5834\u6240\u3092\u6307\u3059\u3053\u3068\u304c\u51fa\u6765\u3066\u3001\u3057\u304b\u3082\u6574\u6570\u578b\u3092\u540c\u3058\u3088\u3046\u306a\u6f14\u7b97\u304c\u51fa\u6765\u308b\u3088\u3046\u306a\u578b\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u4ed5\u65b9\u304c\u306a\u3044\u306e\u3067\u3001 `pseudo-pointer` \u306a\u308b\u3082\u306e\u3092\u81ea\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u3001\u7a3f\u3092\u6539\u3081\u3066\u66f8\u304f\u4e88\u5b9a\u3067\u3059\u3002\n\n### \u30ad\u30e3\u30b9\u30c8, sizeof\n\u3053\u308c\u3089\u306f\u3001\u73fe\u5728\u306f\u5b9f\u88c5\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u30ad\u30e3\u30b9\u30c8\u306e\u5b9f\u88c5\u306b\u306f\u3001 C \u8a00\u8a9e\u306e\u5ba3\u8a00\u306e\u69cb\u6587\u3092\u89e3\u91c8\u3057\u3001\u5bfe\u5fdc\u3059\u308b\u578b\u3092\u5f15\u304d\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n`sizeof` \u306e\u5b9f\u88c5\u306b\u306f\u3001\u3055\u3089\u306b\u305d\u308c\u3089\u304c\u5360\u3081\u308b\u30e1\u30e2\u30ea\u9818\u57df\u3092\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5ba3\u8a00\u306e\u69cb\u6587\u3092\u89e3\u91c8\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308c\u3070\u3001\u30ad\u30e3\u30b9\u30c8\u306f\u5b9f\u88c5\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u3002\n\u3057\u304b\u3057\u3001 `sizeof` \u306f\u9762\u5012\u305d\u3046\u3067\u3059\u3002\n\n## \u6587 (statement) \u306e\u5909\u63db\n\n### `goto`\n\u3044\u304d\u306a\u308a `goto` \u304b\u3089\u3067\u3059\u3002\u3053\u308c\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u304c\u3001\u3053\u306e\u5b9f\u88c5\u306e\u5927\u67a0\u306b\u5f71\u97ff\u3057\u3066\u3044\u307e\u3059\u3002\n\nCommon Lisp \u3067 `goto` \u3068\u3044\u3048\u3070\u3001 `tagbody` \u3068 `go` \u3067\u3042\u308a\u3001\u4eca\u56de\u306e\u5b9f\u88c5\u3082\u305d\u308c\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n`tagbody` \u3067\u306f\u3001 lexical \u306b\u898b\u3048\u3066\u3044\u308b go tag \u306b `go` \u3057\u3066\u98db\u3076\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u3055\u3066\u3001 C \u8a00\u8a9e\u306e goto \u30e9\u30d9\u30eb\u306f\u3001\u6050\u308b\u3079\u304d\u3053\u3068\u306b\u95a2\u6570\u5168\u4f53\u306b\u30b9\u30b3\u30fc\u30d7\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001 `goto` \u306f\u8907\u6587\u306e\u4e2d\u3067\u3082\u3069\u3053\u306b\u3067\u3082\u98db\u3079\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u3064\u307e\u308a\u3053\u308c\u3092 `tagbody` \u3067\u5b9f\u88c5\u3059\u308b\u306b\u306f\u3001\u5168\u3066\u306e\u8907\u6587\u3092\u30d5\u30e9\u30c3\u30c8\u306b\u5c55\u958b\u3057\u3066\u3001 go tag \u304c `tagbody` \u304b\u3089\u898b\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3059! \u3053\u308c\u304c\u3001\u3053\u306e\u5f8c\u306e\u5168\u3066\u306b\u5f71\u97ff\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4f8b:\n\n```cl\n(with-c-syntax ()\n  {\n    goto d \\;\n\n  a \\:\n    princ \\( \"a\" \\) \\;\n\n  b \\:\n    princ \\( \"b\" \\) \\;\n    goto e \\;\n\n  c \\:\n    princ \\( \"c\" \\) \\;\n    return \\;\n\n  d \\:\n    princ \\( \"d\" \\) \\;\n    goto a \\;  \n  \n  e \\:\n    princ \\( \"e\" \\) \\;\n    goto c \\;\n  })\n```\n\n\u5c55\u958b\u7d50\u679c\u3067\u306f\u3001\u6697\u9ed9\u7684\u306a `tagbody` \u3092\u542b\u3080 `prog` \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n```cl\n(PROG ()\n   (GO D)\n  A\n   (PRINC \"a\")\n  B\n   (PRINC \"b\")\n   (GO E)\n  C\n   (PRINC \"c\")\n   (RETURN (VALUES))\n  D\n   (PRINC \"d\")\n   (GO A)\n  E\n   (PRINC \"e\")\n   (GO C))\n```\n\n### `if`\n`if` \u306f\u3001\u305d\u306e\u307e\u307e Common Lisp \u306e `if` \u306b\u3059\u308c\u3070\u3044\u3044\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u304c\u3001 `if` \u306e\u7bc0\u306e\u4e2d\u306b goto \u30e9\u30d9\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u8003\u3048\u3089\u308c\u308b\u305f\u3081\u3001 `tagbody` \u3092\u4f7f\u3046\u5f62\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\nthen \u7bc0 \u3068 else \u7bc0\u306e\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066 `gensym` \u3067 go tag \u3092\u4ed8\u3051\u3001\u5192\u982d\u3067\u305d\u3053\u3078\u306e `go` \u3092\u3057\u307e\u3059\u3002\n\n\u4f8b:\n\n```cl\n(with-c-syntax ()\n  {\n  if \\( x \\) {\n    1 + 2 \\;\n  } else {\n    2 + 4 \\;\n  }\n  })\n```\n\n\u5c55\u958b\u7d50\u679c:\n\n```cl\n(PROG ()\n  (IF X\n      (GO #:|(if then)1053|)\n      (GO #:|(if else)1054|))\n #:|(if then)1053|\n  (+ 1 2)\n  (GO #:|(if end)1055|)\n #:|(if else)1054|\n  (+ 2 4)\n  (GO #:|(if end)1055|)\n #:|(if end)1055|))))\n```\n\n### \u30eb\u30fc\u30d7\u69cb\u6587\n\u30eb\u30fc\u30d7\u3082 `tagbody` \u3092\u4f7f\u3046\u5f62\u306b\u5c55\u958b\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u5834\u6240\u306b\u98db\u3076\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001 go tag \u3092\u4ed5\u8fbc\u3093\u3067\u5c55\u958b\u3057\u307e\u3059:\n\n* \u30eb\u30fc\u30d7\u306e\u6761\u4ef6\u7bc0 (\u30eb\u30fc\u30d7\u306e\u672c\u4f53\u304b\u3089\u3001\u3082\u3057\u304f\u306f `while`, `for` \u30eb\u30fc\u30d7\u306e\u521d\u56de\u3068\u3001 `continue`)\n* \u30eb\u30fc\u30d7\u306e\u672c\u4f53 (\u30eb\u30fc\u30d7\u306e\u6761\u4ef6\u7bc0\u304b\u3089\u3001\u3082\u3057\u304f\u306f `do`-`while` \u306e\u521d\u56de)\n* \u30eb\u30fc\u30d7\u306e\u51fa\u53e3 (\u30eb\u30fc\u30d7\u306e\u6761\u4ef6\u7bc0\u304b\u3089\u3001\u3082\u3057\u304f\u306f `break`)\n\n(\u5c55\u958b\u7d50\u679c\u306f\u3001\u9577\u3044\u306e\u3067\u7565)\n\n### `switch` \u3068 `case`\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059:\n\n* `case` \u3084 `default` \u3092\u898b\u3064\u3051\u305f\u3089\u3001 go tag \u3092 `gensym` \u3059\u308b\u3002\u305d\u308c\u3092\u30b9\u30da\u30b7\u30e3\u30eb\u5909\u6570\u306b\u8caf\u3081\u3066\u304a\u304f\u3002\n* `switch` \u3092\u898b\u3064\u3051\u305f\u3089\u3001\u5024\u3092\u8a08\u7b97\u3057\u3066 `go` \u3059\u308b\u30b8\u30e3\u30f3\u30d7\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u3002\n* `break` \u3067\u306e\u98db\u3073\u5148\u3092 `gensym` \u3057\u3066\u5c55\u958b\u3059\u308b\u3002\n\n(\u5c55\u958b\u7d50\u679c\u306f\u3001\u9577\u3044\u306e\u3067\u7565)\n\n### return\n\u3053\u308c\u306b\u306f\u3001 Common Lisp \u306e `return` \u3092\u305d\u306e\u307e\u307e\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u5c55\u958b\u3055\u308c\u305f\u69cb\u6587\u5168\u4f53\u3092\u3001\u540d\u524d\u304c `nil` \u306e `block` \u3067\u56f2\u3046\u3053\u3068\u3067\u3001 `return` \u3067\u8131\u51fa\u3067\u304d\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3001 `tagbody` \u3068 \u540d\u524d\u304c `nil` \u306e `block` \u3067\u56f2\u3046\u3053\u3068\u306e\u4e21\u65b9\u306e\u6a5f\u80fd\u3092\u6301\u3064 `prog` \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4f8b:\n\n```cl\n  (with-c-syntax ()\n    {\n    return 1 + 2 \\;\n    })\n```\n\n\u5c55\u958b\u7d50\u679c:\n\n```cl\n(PROG () (RETURN (+ 1 2)))\n```\n\n", "tags": ["common-lisp", "C", "CommonLisp", "lisp"]}