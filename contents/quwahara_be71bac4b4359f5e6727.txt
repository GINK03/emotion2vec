{"context": "\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306bprintln\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u3092\u5c11\u3057\u62e1\u5f35\u3057\u3066\u95a2\u6570\u5b9a\u7fa9\u3068\u547c\u3073\u51fa\u3057\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u95a2\u6570\u5b9a\u7fa9\u3068\u547c\u3073\u51fa\u3057\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u3001\u3084\u3089\u306a\u3044\u3053\u3068\n\u5b9f\u88c5\u306b\u3042\u305f\u308a\u3001\u5177\u4f53\u7684\u306b\u3084\u308a\u305f\u3044\u3053\u3068\u3068\u3084\u3089\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0b\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3042\u3063\u305f\u3089\u3001addV()\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3001\u6a19\u6e96\u51fa\u529b\u306b3\u3068\u51fa\u529b\u3055\u308c\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\nv = 0\nfunction addV(num) {\n  v = v + num\n}\naddV(3)\nprintln(v)\n\n\u305d\u3057\u3066\u7c21\u5358\u306e\u305f\u3081\u306b\u3084\u3089\u306a\u3044\u3053\u3068\u3082\u6c7a\u3081\u307e\u3059\u3002\n\u95a2\u6570\u306e\u5f15\u6570\u306f1\u3064\u3057\u304b\u5bfe\u5fdc\u3057\u307e\u305b\u3093\u3002\u5f15\u6570\u306a\u3057\u30842\u3064\u4ee5\u4e0a\u306e\u5f15\u6570\u306b\u306f\u5bfe\u5fdc\u3057\u307e\u305b\u3093\u3002\n\u95a2\u6570\u306e\u623b\u308a\u5024\u306b\u5bfe\u5fdc\u3057\u307e\u305b\u3093\u3002\n\u5909\u6570\u306e\u30b9\u30b3\u30fc\u30d7\u306b\u5bfe\u5fdc\u3057\u307e\u305b\u3093\u3002\u4eee\u5f15\u6570\u306e\u5909\u6570\u540d\u3082\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\n\u5b9f\u88c5\u306e\u4ed5\u65b9\n\u5b9f\u88c5\u306e\u4ed5\u65b9\u306b\u3064\u3044\u3066\u3001\u5b57\u53e5\u89e3\u6790(Lexer)\u3001\u69cb\u6587\u89e3\u6790(Parser)\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u3068\u9806\u306b\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u5b57\u53e5\u89e3\u6790(Lexer)\u3078\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\u5b9f\u88c5\u3057\u305f\u5b57\u53e5\u89e3\u6790\u306b\u306f\u6ce2\u62ec\u5f27\u3001{\u3068}\u3092\u89e3\u6790\u3059\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u305d\u308c\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n\u69cb\u6587\u89e3\u6790(Parser)\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\u307e\u305a\u306f\u95a2\u6570\u5b9a\u7fa9\u6587\u3092\u69cb\u6587\u89e3\u6790\u3059\u308b\u5b9f\u88c5\u3092\u8003\u3048\u307e\u3059\u3002\n\u5b9f\u88c5\u306e\u4ed5\u65b9\u3092\u8003\u3048\u308b\u305f\u3081\u306b\u3001\u95a2\u6570\u5b9a\u7fa9function addV(num) {}\u306e\u30c8\u30fc\u30af\u30f3\u306e\u4e26\u3073\u3092\u3088\u304f\u89b3\u5bdf\u3057\u307e\u3059\u3002\n\u89b3\u5bdf\u3059\u308b\u3068\u30ad\u30fc\u30ef\u30fc\u30c9function\u304c\u3044\u3064\u3082\u30c8\u30fc\u30af\u30f3\u306e\u4e26\u3073\u306e\u59cb\u3081\u306b\u304f\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u30c8\u30fc\u30af\u30f3\u306e\u4e26\u3073\u306b\u6c7a\u307e\u3063\u305f\u30c8\u30fc\u30af\u30f3\u304c\u59cb\u3081\u306b\u304f\u308b\u3001\u540c\u3058\u3088\u3046\u306a\u4e26\u3073\u306e\u4ed6\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u306a\u3044\u304b\u3092\u8003\u3048\u3001\n\u305d\u308c\u306b\u8fd1\u3044\u304b\u305f\u3061\u3067\u5b9f\u88c5\u3067\u304d\u306a\u3044\u304b\u3092\u8003\u3048\u307e\u3059\u3002\n\u305d\u3046\u8003\u3048\u308b\u3068\u5358\u9805\u6f14\u7b97\u5b50\u306e-1\u3084+1\u304c\u8fd1\u3044\u304b\u305f\u3061\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u59cb\u3081\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u306e-\u3084+\u304c\u6c7a\u307e\u308c\u3070\u3001\u5358\u9805\u6f14\u7b97\u5b50\u3068\u6c7a\u307e\u308b\u304b\u3089\u3067\u3059\u3002\n\u95a2\u6570\u5b9a\u7fa9\u306e\u69cb\u6587\u89e3\u6790\u3082\u305d\u308c\u306b\u8fd1\u3044\u304b\u305f\u3061\u3067\u5b9f\u88c5\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u6b21\u306b\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u6587\u306e\u69cb\u6587\u89e3\u6790\u306e\u5b9f\u88c5\u3092\u8003\u3048\u307e\u3059\u3002\n\u547c\u3073\u51fa\u3057\u306e\u65b9\u306f\u3001\u5148\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308bprintln(v)\u3068\u540c\u3058\u69cb\u6587\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5f93\u3063\u3066\u3059\u3067\u306b\u5b9f\u88c5\u304c\u3067\u304d\u3066\u3044\u308b\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\u307e\u305a\u95a2\u6570\u306e\u5b9a\u7fa9\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u3067\u3059\u3002\nprintln()\u3092\u5b9f\u88c5\u3057\u305f\u3068\u304d\u306b\u95a2\u6570\u3092\u8868\u3059\u30af\u30e9\u30b9\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002\nprintln()\u95a2\u6570\u306e\u5b9f\u88c5\u306fFunc\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\n\u95a2\u6570\u5b9a\u7fa9\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3078\u306e\u5b9f\u88c5\u3082\u3001\u540c\u3058\u3088\u3046\u306bFunc\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308c\u3070\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u305d\u3057\u3066\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306e\u5b9f\u884c\u4e2d\u3067\u95a2\u6570\u5b9a\u7fa9\u306e\u90e8\u5206\u306b\u51fa\u4f1a\u3063\u305f\u3089\u3001\n\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u52d5\u7684\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\u6b21\u306b\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u3067\u3059\u3002\n\u547c\u3073\u51fa\u3057\u306e\u65b9\u306f\u69cb\u6587\u89e3\u6790\u306e\u3068\u304d\u3068\u540c\u3058\u3088\u3046\u306b\u3001println()\u306e\u5b9f\u88c5\u304c\u305d\u306e\u307e\u307e\u4f7f\u3048\u308b\u306e\u3067\n\u5b9f\u88c5\u3067\u304d\u305f\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nJava\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\u5b9f\u88c5\u306b\u3046\u3064\u308a\u307e\u3059\u3002\n\u5b57\u53e5\u89e3\u6790(Lexer)\u3001\u69cb\u6587\u89e3\u6790(Parser)\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u306b\u3064\u3044\u3066\u3001\n\u5909\u66f4\u3068\u8ffd\u52a0\u3092\u3057\u305f\u3068\u3053\u308d\u3092\u9806\u306b\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\nLexer.java\nLexer.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u306f\u62ec\u5f27\u3001{\u3068}\u3092\u89e3\u6790\u3059\u308b\u6a5f\u80fd\u306e\u8ffd\u52a0\u3067\u3059\u3002\n\u6ce2\u62ec\u5f27\u306e\u7d42\u308f\u308a\u306e\u307b\u3046}\u306f\u3001\u30d6\u30ed\u30c3\u30af\u306e\u7d42\u308f\u308a\u3068\u3057\u3066\u7279\u5225\u6271\u3044\u3057\u305f\u3044\u305f\u3081\u3001\n\u610f\u5473\u3092eob(End of Block)\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nLexer.java\n\n   private boolean isCurlyStart(char c) {\n        return c == '{' || c == '}';\n    }\n\n    private Token curly() throws Exception {\n        Token t = new Token();\n        if (c() == '{') {\n            t.kind = \"curly\";\n        } else {\n            t.kind = \"eob\";\n        }\n        t.value = Character.toString(next());\n        return t;\n    }\n\n\n\u6ce2\u62ec\u5f27\u89e3\u6790\u306e\u547c\u3073\u51fa\u3057\u90e8\u5206\u3092\u8ffd\u52a0\u3057\u3066\u3042\u3052\u307e\u3059\u3002\nLexer.java\u306e\u5b9f\u88c5\u306f\u7d42\u4e86\u3067\u3059\u3002\n\nLexer.java\n    public Token nextToken() throws Exception {\n        skipSpace();\n        if (isEOT()) {\n            return null;\n        } else if (isSignStart(c())) {\n            return sign();\n        } else if (isDigitStart(c())) {\n            return digit();\n        } else if (isIdentStart(c())) {\n            return ident();\n        } else if (isParenStart(c())) {\n            return paren();\n        } else if (isCurlyStart(c())) {\n            return curly();\n        } else {\n            throw new Exception(\"Not a character for tokens\");\n        }\n    }\n\n\n\nParser.java\nParser.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u5bfe\u3057\u3066\u3001\u3069\u3046\u52d5\u4f5c\u3059\u308b\u304b\u306e\u5b9a\u7fa9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n<-- Add\u306e\u7b87\u6240\u3067\u4e88\u7d04\u8a9e\u3092\u5b9a\u7fa9\u3059\u308breserved\u3092\u8ffd\u52a0\u3057\u3001\u305d\u3061\u3089\u3078function\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nParser.java\nprivate Map<String, Integer> degrees;\n    private List<String> factorKinds;\n    private List<String> binaryKinds;\n    private List<String> rightAssocs;\n    private List<String> unaryOperators;\n    private List<String> reserved;  // <-- Add\n\n    public Parser() {\n        degrees = new HashMap<>();\n        degrees.put(\"(\", 80);\n        degrees.put(\"*\", 60);\n        degrees.put(\"/\", 60);\n        degrees.put(\"+\", 50);\n        degrees.put(\"-\", 50);\n        degrees.put(\"=\", 10);\n        factorKinds = Arrays.asList(new String[] { \"digit\", \"ident\" });\n        binaryKinds = Arrays.asList(new String[] { \"sign\" });\n        rightAssocs = Arrays.asList(new String[] { \"=\" });\n        unaryOperators = Arrays.asList(new String[] { \"+\", \"-\" });\n        reserved = Arrays.asList(new String[] { \"function\" });  // <-- Add\n    }\n\n\n\u89e3\u6790\u3092\u884c\u3046\u90e8\u5206\u306e\u5909\u66f4\u3067\u3059\u3002\n\u95a2\u6570\u5b9a\u7fa9\u306e\u89e3\u6790\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9func()\u306e\u547c\u3073\u51fa\u3057\u3092<-- Add\u304c\u3042\u308bif\u6587\u306e\u7b87\u6240\u3078\u52a0\u3048\u307e\u3057\u305f\u3002\n\u5358\u9805\u6f14\u7b97\u5b50(unary)\u306e\u51e6\u7406\u3068\u540c\u3058\u3088\u3046\u306b\u30011\u3064\u3081\u306e\u30c8\u30fc\u30af\u30f3\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u69cb\u6587\u89e3\u6790\u65b9\u6cd5\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\nParser.java\n\n    private Token lead(Token token) throws Exception {\n        if (token.kind.equals(\"ident\") && token.value.equals(\"function\")) {  // <-- Add\n            return func(token);\n        } else if (factorKinds.contains(token.kind)) {\n            return token;\n        } else if (unaryOperators.contains(token.value)) {\n            token.kind = \"unary\";\n            token.left = expression(70);\n            return token;\n        } else if (token.kind.equals(\"paren\") && token.value.equals(\"(\")) {\n            Token expr = expression(0);\n            consume(\")\");\n            return expr;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n\n\n\u95a2\u6570\u5b9a\u7fa9\u306e\u89e3\u6790\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9func()\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\u95a2\u6570\u5b9a\u7fa9\u306e\u89e3\u6790\u7d50\u679c\u306f\u5f15\u6570\u306etoken\u306b\u307e\u3068\u3081\u3089\u308c\u307e\u3059\u3002\n\u307e\u3068\u3081\u308b\u306b\u3042\u305f\u308a\u3001Token\u30af\u30e9\u30b9\u3078\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\u8ffd\u52a0\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u306fident\u3001param\u3001block\u3067\u3059\u3002\nident\u306f\u95a2\u6570\u540d\u3092\u3042\u3089\u308f\u3059\u30c8\u30fc\u30af\u30f3\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\nparam\u306f\u4eee\u5f15\u6570\u3092\u3042\u3089\u308f\u3059\u30c8\u30fc\u30af\u30f3\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\nblock\u306f\u95a2\u6570\u306e\u51e6\u7406\u30d6\u30ed\u30c3\u30af\u3092\u4fdd\u6301\u3057\u3001\u305d\u306e\u578b\u306fList<Token>\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nfunc()\u30e1\u30bd\u30c3\u30c9\u3067\u306e\u51e6\u7406\u306f\u3001\u95a2\u6570\u5b9a\u7fa9\u306e\u30c8\u30fc\u30af\u30f3\u3092\u9806\u306b\u306a\u305e\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u6700\u521d\u306b\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u3092func\u3067\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\u6b21\u306b\u95a2\u6570\u540d\u3092ident()\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\nident()\u30e1\u30bd\u30c3\u30c9\u306f\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u304cident\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3001\u305d\u306e\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u6b21\u306b\u5f15\u6570\u306e\u59cb\u307e\u308a\u306e(\u3092\u6d88\u8cbb\u3057\u307e\u3059\u3002\n\u4eee\u5f15\u6570\u3092\u518d\u3073ident()\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u6b21\u306b\u5f15\u6570\u306e\u7d42\u308f\u308a\u306e)\u3092\u6d88\u8cbb\u3057\u3001\u30d6\u30ed\u30c3\u30af\u306e\u59cb\u307e\u308a\u306e{\u3092\u6d88\u8cbb\u3057\u307e\u3059\u3002\n\u30d6\u30ed\u30c3\u30af\u306e\u4e2d\u8eab\u306f\u3059\u3067\u306b\u3042\u308bblock()\u306e\u623b\u308a\u5024\u3092\u305d\u306e\u307e\u307e\u5272\u308a\u4ed8\u3051\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u30d6\u30ed\u30c3\u30af\u306e\u7d42\u308f\u308a\u306e}\u3092\u6d88\u8cbb\u3059\u308c\u3070\u3001\u95a2\u6570\u5b9a\u7fa9\u306e\u69cb\u6587\u89e3\u6790\u306f\u5b8c\u4e86\u3067\u3059\u3002\nParser.java\u306e\u5b9f\u88c5\u3082\u7d42\u4e86\u3067\u3059\u3002\n\nParser.java\n  private Token func(Token token) throws Exception {\n        token.kind = \"func\";\n        token.ident = ident();\n        consume(\"(\");\n        token.param = ident();\n        consume(\")\");\n        consume(\"{\");\n        token.block = block();\n        consume(\"}\");\n        return token;\n    }\n\n    private Token ident() throws Exception {\n        Token id = next();\n        if (!id.kind.equals(\"ident\")) {\n            throw new Exception(\"Not an identical token.\");\n        }\n        if (reserved.contains(id.value)) {\n            throw new Exception(\"The token was reserved.\");\n        }\n        return id;\n    }\n\n\n\nInterpreter.java\nInterpreter.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u95a2\u6570\u3092\u8868\u3059\u30af\u30e9\u30b9DynamicFunc\u3092\u5c0e\u5165\u3057\u307e\u3059\u3002\nFunc\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\n\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u306b\u306f\u3001\n\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u99c6\u52d5\u3059\u308b\u305f\u3081\u306econtext\n\n\u4eee\u5f15\u6570\u3092\u3042\u3089\u308f\u3059param\n\n\u30d6\u30ed\u30c3\u30af\u3092\u4fdd\u6301\u3059\u308bblock\n\n\n\u304c\u3042\u308a\u307e\u3059\u3002\ninvoke()\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u306f\u3001\u5f15\u6570\u3092\u5024\u3068\u3057\u3066\u89e3\u6c7a\u3057\u3001\u305d\u308c\u3092\u4eee\u5f15\u6570\u306e\u5024\u3078\u4fdd\u6301\u3055\u305b\u307e\u3059\u3002\n\u305d\u306e\u72b6\u614b\u3067\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u3042\u308bcontext\u3078\u3001block\u3092\u5b9f\u884c\u3055\u305b\u307e\u3059\u3002\n\nInterpreter.java\n    public static class DynamicFunc extends Func {\n\n        public Interpreter context;\n        public Variable param;\n        public List<Token> block;\n\n        @Override\n        public Object invoke(Object arg) throws Exception {\n            param.value = context.value(arg);\n            context.body(block);\n            return null;\n        }\n    }\n\n\n\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u3088\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u3092\u51e6\u7406\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u5206\u3051\u308b\u90e8\u5206\u306e\u5909\u66f4\u3067\u3059\u3002\n\u95a2\u6570\u5b9a\u7fa9\u3092<-- Add\u304c\u3042\u308b\u7b87\u6240\u3078\u52a0\u3048\u307e\u3057\u305f\u3002\n\nInterpreter.java\n    public Object expression(Token expr) throws Exception {\n        if (expr.kind.equals(\"digit\")) {\n            return digit(expr);\n        } else if (expr.kind.equals(\"ident\")) {\n            return ident(expr);\n        } else if (expr.kind.equals(\"func\")) { // <-- Add\n            return func(expr);\n        } else if (expr.kind.equals(\"paren\")) {\n            return invoke(expr);\n        } else if (expr.kind.equals(\"sign\") && expr.value.equals(\"=\")) {\n            return assign(expr);\n        } else if (expr.kind.equals(\"unary\")) {\n            return unaryCalc(expr);\n        } else if (expr.kind.equals(\"sign\")) {\n            return calc(expr);\n        } else {\n            throw new Exception(\"Expression error\");\n        }\n    }\n\n\n\u95a2\u6570\u5b9a\u7fa9\u90e8\u5206\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u95a2\u6570\u540d\u3068\u4eee\u5f15\u6570\u540d\u304c\u3059\u3067\u306b\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u95a2\u6570\u3092\u8868\u3059\u30af\u30e9\u30b9DynamicFunc\u3092\u751f\u6210\u3057\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u3078\u5024\u3092\u5272\u308a\u4ed8\u3051\u307e\u3059\u3002\n\u4eee\u5f15\u6570param\u306f\u3042\u3089\u304b\u3058\u3081\u5909\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3057\u307e\u3044\u3001\n\u5909\u6570\u3092\u3042\u3089\u308f\u3059\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u3078\u5272\u308a\u4ed8\u3051\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u95a2\u6570\u540d\u3068\u305d\u306e\u5024\u3092\u4fdd\u6301\u3059\u308bMap\u3078\u8ffd\u52a0\u3057\u3066\u3042\u3052\u3001\u95a2\u6570\u5b9a\u7fa9\u304c\u5b8c\u4e86\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public Object func(Token token) throws Exception {\n        String name = token.ident.value;\n        if (functions.containsKey(name)) {\n            throw new Exception(\"Name was used\");\n        }\n        if (variables.containsKey(name)) {\n            throw new Exception(\"Name was used\");\n        }\n        String param = token.param.value;\n        if (functions.containsKey(param)) {\n            throw new Exception(\"Parameter name was used\");\n        }\n        if (variables.containsKey(param)) {\n            throw new Exception(\"Parameter name was used\");\n        }\n        DynamicFunc func = new DynamicFunc();\n        func.context = this;\n        func.name = name;\n        func.param = variable(ident(token.param));\n        func.block = token.block;\n        functions.put(name, func);\n        return null;\n    }\n\n\n\u4ee5\u4e0a\u306e\u5b9f\u88c5\u3092\u4f7f\u3063\u3066\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\nv = 0\nfunction addV(num) {\n  v = v + num\n}\naddV(3)\nprintln(v)\n\n\u3092\u5b9f\u884c\u3057\u3001\u5909\u6570v\u3078\u4ee3\u5165\u3055\u308c\u308b\u50243\u3092\u6a19\u6e96\u51fa\u529b\u3078\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\u3002\n\nInterpreter.java\npublic static void main(String[] args) throws Exception {\n        String text = \"\";\n        text += \"v = 0\";\n        text += \"function addV(num) {\";\n        text += \"  v = v + num\";\n        text += \"}\";\n        text += \"addV(3)\";\n        text += \"println(v)\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        new Interpreter().init(blk).run();\n        // --> 3\n    }\n}\n\n\n\u5b9f\u88c5\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\u3042\u308a\u304c\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\u304a\u308f\u308a\u306b\n\u30bd\u30fc\u30b9\u306e\u5168\u6587\u306f\u3053\u3061\u3089\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nCalc\nhttps://github.com/quwahara/Calc/tree/article-7-function/Calc/src/main/java\n\u7d9a\u304d\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\u8907\u6570\u306e\u5f15\u6570\u306b\u5bfe\u5fdc\u3059\u308b\nhttp://qiita.com/quwahara/items/0bea3bad4eedd2d803cf\n# \u306f\u3058\u3081\u306b\n\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067[\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306bprintln](http://qiita.com/quwahara/items/82067b00cbe1cb974e4a)\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u3092\u5c11\u3057\u62e1\u5f35\u3057\u3066\u95a2\u6570\u5b9a\u7fa9\u3068\u547c\u3073\u51fa\u3057\u3092\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n# \u95a2\u6570\u5b9a\u7fa9\u3068\u547c\u3073\u51fa\u3057\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u3001\u3084\u3089\u306a\u3044\u3053\u3068\n\n\u5b9f\u88c5\u306b\u3042\u305f\u308a\u3001\u5177\u4f53\u7684\u306b\u3084\u308a\u305f\u3044\u3053\u3068\u3068\u3084\u3089\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0b\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3042\u3063\u305f\u3089\u3001`addV()`\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3001\u6a19\u6e96\u51fa\u529b\u306b`3`\u3068\u51fa\u529b\u3055\u308c\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\n\n```JS\nv = 0\nfunction addV(num) {\n  v = v + num\n}\naddV(3)\nprintln(v)\n```\n\n\u305d\u3057\u3066\u7c21\u5358\u306e\u305f\u3081\u306b\u3084\u3089\u306a\u3044\u3053\u3068\u3082\u6c7a\u3081\u307e\u3059\u3002\n\u95a2\u6570\u306e\u5f15\u6570\u306f1\u3064\u3057\u304b\u5bfe\u5fdc\u3057\u307e\u305b\u3093\u3002\u5f15\u6570\u306a\u3057\u30842\u3064\u4ee5\u4e0a\u306e\u5f15\u6570\u306b\u306f\u5bfe\u5fdc\u3057\u307e\u305b\u3093\u3002\n\u95a2\u6570\u306e\u623b\u308a\u5024\u306b\u5bfe\u5fdc\u3057\u307e\u305b\u3093\u3002\n\u5909\u6570\u306e\u30b9\u30b3\u30fc\u30d7\u306b\u5bfe\u5fdc\u3057\u307e\u305b\u3093\u3002\u4eee\u5f15\u6570\u306e\u5909\u6570\u540d\u3082\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\n# \u5b9f\u88c5\u306e\u4ed5\u65b9\n\n\u5b9f\u88c5\u306e\u4ed5\u65b9\u306b\u3064\u3044\u3066\u3001\u5b57\u53e5\u89e3\u6790(Lexer)\u3001\u69cb\u6587\u89e3\u6790(Parser)\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u3068\u9806\u306b\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\n## \u5b57\u53e5\u89e3\u6790(Lexer)\u3078\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\n\u5b9f\u88c5\u3057\u305f\u5b57\u53e5\u89e3\u6790\u306b\u306f\u6ce2\u62ec\u5f27\u3001`{`\u3068`}`\u3092\u89e3\u6790\u3059\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u305b\u3093\u306e\u3067\u3001\u305d\u308c\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n## \u69cb\u6587\u89e3\u6790(Parser)\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\n\u307e\u305a\u306f\u95a2\u6570\u5b9a\u7fa9\u6587\u3092\u69cb\u6587\u89e3\u6790\u3059\u308b\u5b9f\u88c5\u3092\u8003\u3048\u307e\u3059\u3002\n\u5b9f\u88c5\u306e\u4ed5\u65b9\u3092\u8003\u3048\u308b\u305f\u3081\u306b\u3001\u95a2\u6570\u5b9a\u7fa9`function addV(num) {}`\u306e\u30c8\u30fc\u30af\u30f3\u306e\u4e26\u3073\u3092\u3088\u304f\u89b3\u5bdf\u3057\u307e\u3059\u3002\n\u89b3\u5bdf\u3059\u308b\u3068\u30ad\u30fc\u30ef\u30fc\u30c9`function`\u304c\u3044\u3064\u3082\u30c8\u30fc\u30af\u30f3\u306e\u4e26\u3073\u306e\u59cb\u3081\u306b\u304f\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u30c8\u30fc\u30af\u30f3\u306e\u4e26\u3073\u306b\u6c7a\u307e\u3063\u305f\u30c8\u30fc\u30af\u30f3\u304c\u59cb\u3081\u306b\u304f\u308b\u3001\u540c\u3058\u3088\u3046\u306a\u4e26\u3073\u306e\u4ed6\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u306a\u3044\u304b\u3092\u8003\u3048\u3001\n\u305d\u308c\u306b\u8fd1\u3044\u304b\u305f\u3061\u3067\u5b9f\u88c5\u3067\u304d\u306a\u3044\u304b\u3092\u8003\u3048\u307e\u3059\u3002\n\u305d\u3046\u8003\u3048\u308b\u3068\u5358\u9805\u6f14\u7b97\u5b50\u306e`-1`\u3084`+1`\u304c\u8fd1\u3044\u304b\u305f\u3061\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u59cb\u3081\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u306e`-`\u3084`+`\u304c\u6c7a\u307e\u308c\u3070\u3001\u5358\u9805\u6f14\u7b97\u5b50\u3068\u6c7a\u307e\u308b\u304b\u3089\u3067\u3059\u3002\n\u95a2\u6570\u5b9a\u7fa9\u306e\u69cb\u6587\u89e3\u6790\u3082\u305d\u308c\u306b\u8fd1\u3044\u304b\u305f\u3061\u3067\u5b9f\u88c5\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n\u6b21\u306b\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u6587\u306e\u69cb\u6587\u89e3\u6790\u306e\u5b9f\u88c5\u3092\u8003\u3048\u307e\u3059\u3002\n\u547c\u3073\u51fa\u3057\u306e\u65b9\u306f\u3001\u5148\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b`println(v)`\u3068\u540c\u3058\u69cb\u6587\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5f93\u3063\u3066\u3059\u3067\u306b\u5b9f\u88c5\u304c\u3067\u304d\u3066\u3044\u308b\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n## \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\n\u307e\u305a\u95a2\u6570\u306e\u5b9a\u7fa9\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u3067\u3059\u3002\n`println()`\u3092\u5b9f\u88c5\u3057\u305f\u3068\u304d\u306b\u95a2\u6570\u3092\u8868\u3059\u30af\u30e9\u30b9\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002\n`println()`\u95a2\u6570\u306e\u5b9f\u88c5\u306f`Func`\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\n\u95a2\u6570\u5b9a\u7fa9\u306e\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3078\u306e\u5b9f\u88c5\u3082\u3001\u540c\u3058\u3088\u3046\u306b`Func`\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308c\u3070\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\u305d\u3057\u3066\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306e\u5b9f\u884c\u4e2d\u3067\u95a2\u6570\u5b9a\u7fa9\u306e\u90e8\u5206\u306b\u51fa\u4f1a\u3063\u305f\u3089\u3001\n\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u52d5\u7684\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\n\u6b21\u306b\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u3067\u3059\u3002\n\u547c\u3073\u51fa\u3057\u306e\u65b9\u306f\u69cb\u6587\u89e3\u6790\u306e\u3068\u304d\u3068\u540c\u3058\u3088\u3046\u306b\u3001`println()`\u306e\u5b9f\u88c5\u304c\u305d\u306e\u307e\u307e\u4f7f\u3048\u308b\u306e\u3067\n\u5b9f\u88c5\u3067\u304d\u305f\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n# Java\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\n\u5b9f\u88c5\u306b\u3046\u3064\u308a\u307e\u3059\u3002\n\u5b57\u53e5\u89e3\u6790(Lexer)\u3001\u69cb\u6587\u89e3\u6790(Parser)\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u306b\u3064\u3044\u3066\u3001\n\u5909\u66f4\u3068\u8ffd\u52a0\u3092\u3057\u305f\u3068\u3053\u308d\u3092\u9806\u306b\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n## Lexer.java\n\nLexer.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u306f\u62ec\u5f27\u3001`{`\u3068`}`\u3092\u89e3\u6790\u3059\u308b\u6a5f\u80fd\u306e\u8ffd\u52a0\u3067\u3059\u3002\n\u6ce2\u62ec\u5f27\u306e\u7d42\u308f\u308a\u306e\u307b\u3046`}`\u306f\u3001\u30d6\u30ed\u30c3\u30af\u306e\u7d42\u308f\u308a\u3068\u3057\u3066\u7279\u5225\u6271\u3044\u3057\u305f\u3044\u305f\u3081\u3001\n\u610f\u5473\u3092`eob`(End of Block)\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```Java:Lexer.java\n    \n   private boolean isCurlyStart(char c) {\n        return c == '{' || c == '}';\n    }\n\n    private Token curly() throws Exception {\n        Token t = new Token();\n        if (c() == '{') {\n            t.kind = \"curly\";\n        } else {\n            t.kind = \"eob\";\n        }\n        t.value = Character.toString(next());\n        return t;\n    }\n```\n\n\u6ce2\u62ec\u5f27\u89e3\u6790\u306e\u547c\u3073\u51fa\u3057\u90e8\u5206\u3092\u8ffd\u52a0\u3057\u3066\u3042\u3052\u307e\u3059\u3002\nLexer.java\u306e\u5b9f\u88c5\u306f\u7d42\u4e86\u3067\u3059\u3002\n\n```Java:Lexer.java\n    public Token nextToken() throws Exception {\n        skipSpace();\n        if (isEOT()) {\n            return null;\n        } else if (isSignStart(c())) {\n            return sign();\n        } else if (isDigitStart(c())) {\n            return digit();\n        } else if (isIdentStart(c())) {\n            return ident();\n        } else if (isParenStart(c())) {\n            return paren();\n        } else if (isCurlyStart(c())) {\n            return curly();\n        } else {\n            throw new Exception(\"Not a character for tokens\");\n        }\n    }\n```\n\n## Parser.java\n\nParser.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u5bfe\u3057\u3066\u3001\u3069\u3046\u52d5\u4f5c\u3059\u308b\u304b\u306e\u5b9a\u7fa9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n`<-- Add`\u306e\u7b87\u6240\u3067\u4e88\u7d04\u8a9e\u3092\u5b9a\u7fa9\u3059\u308b`reserved`\u3092\u8ffd\u52a0\u3057\u3001\u305d\u3061\u3089\u3078`function`\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```Java:Parser.java\nprivate Map<String, Integer> degrees;\n    private List<String> factorKinds;\n    private List<String> binaryKinds;\n    private List<String> rightAssocs;\n    private List<String> unaryOperators;\n    private List<String> reserved;  // <-- Add\n\n    public Parser() {\n        degrees = new HashMap<>();\n        degrees.put(\"(\", 80);\n        degrees.put(\"*\", 60);\n        degrees.put(\"/\", 60);\n        degrees.put(\"+\", 50);\n        degrees.put(\"-\", 50);\n        degrees.put(\"=\", 10);\n        factorKinds = Arrays.asList(new String[] { \"digit\", \"ident\" });\n        binaryKinds = Arrays.asList(new String[] { \"sign\" });\n        rightAssocs = Arrays.asList(new String[] { \"=\" });\n        unaryOperators = Arrays.asList(new String[] { \"+\", \"-\" });\n        reserved = Arrays.asList(new String[] { \"function\" });  // <-- Add\n    }\n```\n\n\u89e3\u6790\u3092\u884c\u3046\u90e8\u5206\u306e\u5909\u66f4\u3067\u3059\u3002\n\u95a2\u6570\u5b9a\u7fa9\u306e\u89e3\u6790\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9`func()`\u306e\u547c\u3073\u51fa\u3057\u3092`<-- Add`\u304c\u3042\u308bif\u6587\u306e\u7b87\u6240\u3078\u52a0\u3048\u307e\u3057\u305f\u3002\n\u5358\u9805\u6f14\u7b97\u5b50(unary)\u306e\u51e6\u7406\u3068\u540c\u3058\u3088\u3046\u306b\u30011\u3064\u3081\u306e\u30c8\u30fc\u30af\u30f3\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u69cb\u6587\u89e3\u6790\u65b9\u6cd5\u3092\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\n```Java:Parser.java\n\n    private Token lead(Token token) throws Exception {\n        if (token.kind.equals(\"ident\") && token.value.equals(\"function\")) {  // <-- Add\n            return func(token);\n        } else if (factorKinds.contains(token.kind)) {\n            return token;\n        } else if (unaryOperators.contains(token.value)) {\n            token.kind = \"unary\";\n            token.left = expression(70);\n            return token;\n        } else if (token.kind.equals(\"paren\") && token.value.equals(\"(\")) {\n            Token expr = expression(0);\n            consume(\")\");\n            return expr;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n```\n\n\u95a2\u6570\u5b9a\u7fa9\u306e\u89e3\u6790\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9`func()`\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\u95a2\u6570\u5b9a\u7fa9\u306e\u89e3\u6790\u7d50\u679c\u306f\u5f15\u6570\u306e`token`\u306b\u307e\u3068\u3081\u3089\u308c\u307e\u3059\u3002\n\u307e\u3068\u3081\u308b\u306b\u3042\u305f\u308a\u3001`Token`\u30af\u30e9\u30b9\u3078\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\u8ffd\u52a0\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u306f`ident`\u3001`param`\u3001`block`\u3067\u3059\u3002\n`ident`\u306f\u95a2\u6570\u540d\u3092\u3042\u3089\u308f\u3059\u30c8\u30fc\u30af\u30f3\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n`param`\u306f\u4eee\u5f15\u6570\u3092\u3042\u3089\u308f\u3059\u30c8\u30fc\u30af\u30f3\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n`block`\u306f\u95a2\u6570\u306e\u51e6\u7406\u30d6\u30ed\u30c3\u30af\u3092\u4fdd\u6301\u3057\u3001\u305d\u306e\u578b\u306f`List<Token>`\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n`func()`\u30e1\u30bd\u30c3\u30c9\u3067\u306e\u51e6\u7406\u306f\u3001\u95a2\u6570\u5b9a\u7fa9\u306e\u30c8\u30fc\u30af\u30f3\u3092\u9806\u306b\u306a\u305e\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u6700\u521d\u306b\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u3092`func`\u3067\u6c7a\u5b9a\u3057\u307e\u3059\u3002\n\u6b21\u306b\u95a2\u6570\u540d\u3092`ident()`\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\n`ident()`\u30e1\u30bd\u30c3\u30c9\u306f\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u304c`ident`\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3001\u305d\u306e\u30c8\u30fc\u30af\u30f3\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u6b21\u306b\u5f15\u6570\u306e\u59cb\u307e\u308a\u306e`(`\u3092\u6d88\u8cbb\u3057\u307e\u3059\u3002\n\u4eee\u5f15\u6570\u3092\u518d\u3073`ident()`\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u6b21\u306b\u5f15\u6570\u306e\u7d42\u308f\u308a\u306e`)`\u3092\u6d88\u8cbb\u3057\u3001\u30d6\u30ed\u30c3\u30af\u306e\u59cb\u307e\u308a\u306e`{`\u3092\u6d88\u8cbb\u3057\u307e\u3059\u3002\n\u30d6\u30ed\u30c3\u30af\u306e\u4e2d\u8eab\u306f\u3059\u3067\u306b\u3042\u308b`block()`\u306e\u623b\u308a\u5024\u3092\u305d\u306e\u307e\u307e\u5272\u308a\u4ed8\u3051\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u30d6\u30ed\u30c3\u30af\u306e\u7d42\u308f\u308a\u306e`}`\u3092\u6d88\u8cbb\u3059\u308c\u3070\u3001\u95a2\u6570\u5b9a\u7fa9\u306e\u69cb\u6587\u89e3\u6790\u306f\u5b8c\u4e86\u3067\u3059\u3002\nParser.java\u306e\u5b9f\u88c5\u3082\u7d42\u4e86\u3067\u3059\u3002\n\n```Java:Parser.java\n  private Token func(Token token) throws Exception {\n        token.kind = \"func\";\n        token.ident = ident();\n        consume(\"(\");\n        token.param = ident();\n        consume(\")\");\n        consume(\"{\");\n        token.block = block();\n        consume(\"}\");\n        return token;\n    }\n\n    private Token ident() throws Exception {\n        Token id = next();\n        if (!id.kind.equals(\"ident\")) {\n            throw new Exception(\"Not an identical token.\");\n        }\n        if (reserved.contains(id.value)) {\n            throw new Exception(\"The token was reserved.\");\n        }\n        return id;\n    }\n```\n\n## Interpreter.java\n\nInterpreter.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\n\u95a2\u6570\u3092\u8868\u3059\u30af\u30e9\u30b9`DynamicFunc`\u3092\u5c0e\u5165\u3057\u307e\u3059\u3002\n`Func`\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u306b\u306f\u3001\n\n* \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u99c6\u52d5\u3059\u308b\u305f\u3081\u306e`context`\n* \u4eee\u5f15\u6570\u3092\u3042\u3089\u308f\u3059`param`\n* \u30d6\u30ed\u30c3\u30af\u3092\u4fdd\u6301\u3059\u308b`block`\n\n\u304c\u3042\u308a\u307e\u3059\u3002\n\n`invoke()`\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u306f\u3001\u5f15\u6570\u3092\u5024\u3068\u3057\u3066\u89e3\u6c7a\u3057\u3001\u305d\u308c\u3092\u4eee\u5f15\u6570\u306e\u5024\u3078\u4fdd\u6301\u3055\u305b\u307e\u3059\u3002\n\u305d\u306e\u72b6\u614b\u3067\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u3042\u308b`context`\u3078\u3001`block`\u3092\u5b9f\u884c\u3055\u305b\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public static class DynamicFunc extends Func {\n\n        public Interpreter context;\n        public Variable param;\n        public List<Token> block;\n\n        @Override\n        public Object invoke(Object arg) throws Exception {\n            param.value = context.value(arg);\n            context.body(block);\n            return null;\n        }\n    }\n```\n\n\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u3088\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u3092\u51e6\u7406\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u5206\u3051\u308b\u90e8\u5206\u306e\u5909\u66f4\u3067\u3059\u3002\n\u95a2\u6570\u5b9a\u7fa9\u3092`<-- Add`\u304c\u3042\u308b\u7b87\u6240\u3078\u52a0\u3048\u307e\u3057\u305f\u3002\n\n```Java:Interpreter.java\n    public Object expression(Token expr) throws Exception {\n        if (expr.kind.equals(\"digit\")) {\n            return digit(expr);\n        } else if (expr.kind.equals(\"ident\")) {\n            return ident(expr);\n        } else if (expr.kind.equals(\"func\")) { // <-- Add\n            return func(expr);\n        } else if (expr.kind.equals(\"paren\")) {\n            return invoke(expr);\n        } else if (expr.kind.equals(\"sign\") && expr.value.equals(\"=\")) {\n            return assign(expr);\n        } else if (expr.kind.equals(\"unary\")) {\n            return unaryCalc(expr);\n        } else if (expr.kind.equals(\"sign\")) {\n            return calc(expr);\n        } else {\n            throw new Exception(\"Expression error\");\n        }\n    }\n```\n\n\u95a2\u6570\u5b9a\u7fa9\u90e8\u5206\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u95a2\u6570\u540d\u3068\u4eee\u5f15\u6570\u540d\u304c\u3059\u3067\u306b\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u95a2\u6570\u3092\u8868\u3059\u30af\u30e9\u30b9`DynamicFunc`\u3092\u751f\u6210\u3057\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u3078\u5024\u3092\u5272\u308a\u4ed8\u3051\u307e\u3059\u3002\n\u4eee\u5f15\u6570`param`\u306f\u3042\u3089\u304b\u3058\u3081\u5909\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3057\u307e\u3044\u3001\n\u5909\u6570\u3092\u3042\u3089\u308f\u3059\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u3078\u5272\u308a\u4ed8\u3051\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u95a2\u6570\u540d\u3068\u305d\u306e\u5024\u3092\u4fdd\u6301\u3059\u308bMap\u3078\u8ffd\u52a0\u3057\u3066\u3042\u3052\u3001\u95a2\u6570\u5b9a\u7fa9\u304c\u5b8c\u4e86\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public Object func(Token token) throws Exception {\n        String name = token.ident.value;\n        if (functions.containsKey(name)) {\n            throw new Exception(\"Name was used\");\n        }\n        if (variables.containsKey(name)) {\n            throw new Exception(\"Name was used\");\n        }\n        String param = token.param.value;\n        if (functions.containsKey(param)) {\n            throw new Exception(\"Parameter name was used\");\n        }\n        if (variables.containsKey(param)) {\n            throw new Exception(\"Parameter name was used\");\n        }\n        DynamicFunc func = new DynamicFunc();\n        func.context = this;\n        func.name = name;\n        func.param = variable(ident(token.param));\n        func.block = token.block;\n        functions.put(name, func);\n        return null;\n    }\n```\n\n\u4ee5\u4e0a\u306e\u5b9f\u88c5\u3092\u4f7f\u3063\u3066\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\n\n```JS\nv = 0\nfunction addV(num) {\n  v = v + num\n}\naddV(3)\nprintln(v)\n```\n\n\u3092\u5b9f\u884c\u3057\u3001\u5909\u6570`v`\u3078\u4ee3\u5165\u3055\u308c\u308b\u5024`3`\u3092\u6a19\u6e96\u51fa\u529b\u3078\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\npublic static void main(String[] args) throws Exception {\n        String text = \"\";\n        text += \"v = 0\";\n        text += \"function addV(num) {\";\n        text += \"  v = v + num\";\n        text += \"}\";\n        text += \"addV(3)\";\n        text += \"println(v)\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        new Interpreter().init(blk).run();\n        // --> 3\n    }\n}\n```\n\n\u5b9f\u88c5\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\u3042\u308a\u304c\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n# \u304a\u308f\u308a\u306b\n\n\u30bd\u30fc\u30b9\u306e\u5168\u6587\u306f\u3053\u3061\u3089\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n**Calc**\nhttps://github.com/quwahara/Calc/tree/article-7-function/Calc/src/main/java\n\n\u7d9a\u304d\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\n**\u8907\u6570\u306e\u5f15\u6570\u306b\u5bfe\u5fdc\u3059\u308b**\nhttp://qiita.com/quwahara/items/0bea3bad4eedd2d803cf\n", "tags": ["Java", "Interpreter", "compiler"]}