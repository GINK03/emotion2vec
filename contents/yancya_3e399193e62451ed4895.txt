{"context": "Ruby \u3067\u89e3\u304d\u307e\u3057\u305f\n\n\u554f\u984c\n\nhttp://mtsmfm.github.io/2016/06/04/doukaku-e04.html\n\n\n\u65b9\u91dd\n\n\u5168\u4f53\u306e\u6a2a\u9053\u306e\u6570\u3060\u3051\u30b9\u30c6\u30c3\u30d7\u304c\u3042\u308b\n\u5404\u30b9\u30c6\u30c3\u30d7\u3067\u3001\u3069\u306e\u6a2a\u9053\u306b\u5165\u308b\u304b\u3068\u3044\u3046\u60c5\u5831\u306e\u30ea\u30b9\u30c8\u304c\u77f3\u5074\u3001\u767b\u5c71\u5bb6\u5074\u306e\u4e21\u65b9\u3067\u4f5c\u308c\u308b\n\u3044\u305a\u308c\u304b\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u77f3\u306e\u901a\u308b\u6a2a\u9053\u3068\u88ab\u3063\u3066\u3057\u307e\u3046\u767b\u5c71\u5bb6\u306f\u30a2\u30a6\u30c8\uff08\u610f\u5473\u6df1\uff09\n\u77f3\u304c\u5168\u304f\u6a2a\u9053\u306b\u5165\u3089\u306a\u3044\u5834\u5408\u3001\u6700\u521d\u306b\u77f3\u304c\u843d\u3061\u59cb\u3081\u305f\u65b9\u89d2\u306b\u3044\u308b\u767b\u5c71\u5bb6\u306f\u30a2\u30a6\u30c8\uff08\u610f\u5473\u6df1\uff09\n\n\n\u30b3\u30fc\u30c9\n# coding: utf-8\nLABELS = (\"A\"..\"H\").to_a\n\ndef hoge(code)\n  # code #=> \"2512:C\"\n\n  sideways, start = code.split(\":\").tap { |a, b|\n    break [\n      a.chars.map(&:to_i).\n        map { |n| [LABELS[n-1], LABELS[n % 8]].join },\n      b\n    ]\n  }\n\n  # sideways #=> [\"BC\", \"EF\", \"AB\", \"BC\"]\n  # start    #=> \"C\"\n\n  router = -> ((d, log), way) {\n    if way.match(d)\n      [way.gsub(d, \"\"), log + [way]]\n    else\n      [d, log + [nil]]\n    end\n  }\n\n  routes = LABELS.map { |l| sideways.reverse.reduce([l, []], &router) }.to_h\n\n  # \u9e93\u304b\u3089\u767b\u3063\u305f\u3068\u304d\u306e\u30b4\u30fc\u30eb\u304c key\u3001\u7d4c\u8def\u304c value\n  # routes #=> {\n  #              \"C\" => [ nil, \"AB\",  nil, \"BC\"],\n  #              \"B\" => [\"BC\",  nil,  nil, \"BC\"],\n  #              \"A\" => [\"BC\", \"AB\",  nil,  nil],\n  #              \"D\" => [ nil,  nil,  nil,  nil],\n  #              \"F\" => [ nil,  nil, \"EF\",  nil],\n  #              \"E\" => [ nil,  nil, \"EF\",  nil],\n  #              \"G\" => [ nil,  nil,  nil,  nil],\n  #              \"H\" => [ nil,  nil,  nil,  nil]\n  #            }\n\n  # \u77f3\u306e\u30b9\u30bf\u30fc\u30c8\u65b9\u5411\u304c\u30b4\u30fc\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u7d4c\u8def\u306e\u9006\u9806\u304c\u77f3\u306e\u7d4c\u8def\n  danger_route = routes[start].reverse\n\n  # danger_route #=> [\"BC\", nil, \"AB\", nil]\n\n  routes.values.map { |route|\n    route.\n      zip(danger_route.reverse).\n      map { |(a, b)| a && a == b ? \"\u6b7b\" : \"\u30bb\u30fc\u30d5\" }.\n      index(\"\u6b7b\") ? \"\u6b7b\" : \"\u751f\"\n  }.map.with_index { |judge, i| #=> [\"\u6b7b\", \"\u6b7b\", \"\u6b7b\", \"\u751f\", \"\u751f\", \"\u751f\", \"\u751f\", \"\u751f\"]\n    LABELS[i] if judge == \"\u751f\"\n  }.         #=> [nil, nil, nil, \"D\", \"E\", \"F\", \"G\", \"H\"]\n    compact. #=> [\"D\", \"E\", \"F\", \"G\", \"H\"]\n    join.    #=> \"DEFGH\"\n    gsub(danger_route.none? ? start : \"\", \"\") #=> \"DEFGH\"\nend\n\nrequire 'test-unit'\nclass MainTest < Test::Unit::TestCase\n  data(\n    \"/*00*/\" => [\"2512:C\", \"DEFGH\"],\n    \"/*01*/\" => [\"1:A\", \"CDEFGH\"],\n    \"/*02*/\" => [\":C\", \"ABDEFGH\"],\n    \"/*03*/\" => [\"2345:B\", \"AGH\"],\n    \"/*04*/\" => [\"1256:E\", \"ABCDH\"],\n    \"/*05*/\" => [\"1228:A\", \"ADEFG\"],\n    \"/*06*/\" => [\"5623:B\", \"AEFGH\"],\n    \"/*07*/\" => [\"8157:C\", \"ABDEFGH\"],\n    \"/*08*/\" => [\"74767:E\", \"ABCFGH\"],\n    \"/*09*/\" => [\"88717:D\", \"ABCEFGH\"],\n    \"/*10*/\" => [\"148647:A\", \"ACDEFH\"],\n    \"/*11*/\" => [\"374258:H\", \"BCDEFH\"],\n    \"/*12*/\" => [\"6647768:F\", \"ABCDEH\"],\n    \"/*13*/\" => [\"4786317:E\", \"ABFGH\"],\n    \"/*14*/\" => [\"3456781:C\", \"\"],\n    \"/*15*/\" => [\"225721686547123:C\", \"CEF\"],\n    \"/*16*/\" => [\"2765356148824666:F\", \"ABCDEH\"],\n    \"/*17*/\" => [\"42318287535641783:F\", \"BDE\"],\n    \"/*18*/\" => [\"584423584751745261:D\", \"FGH\"],\n    \"/*19*/\" => [\"8811873415472513884:D\", \"CFG\"],\n    \"/*20*/\" => [\"74817442725737422451:H\", \"BCDEF\"],\n    \"/*21*/\" => [\"223188865746766511566:C\", \"ABGH\"],\n    \"/*22*/\" => [\"2763666483242552567747:F\", \"ABCG\"],\n    \"/*23*/\" => [\"76724442325377753577138:E\", \"EG\"],\n    \"/*24*/\" => [\"327328486656448784712618:B\", \"\"],\n    \"/*25*/\" => [\"4884637666662548114774288:D\", \"DGH\"],\n    \"/*26*/\" => [\"84226765313786654637511248:H\", \"DEF\"],\n    \"/*27*/\" => [\"486142154163288126476238756:A\", \"CDF\"],\n    \"/*28*/\" => [\"1836275732415226326155464567:F\", \"BCD\"],\n    \"/*29*/\" => [\"62544434452376661746517374245:G\", \"G\"],\n    \"/*30*/\" => [\"381352782758218463842725673473:B\", \"A\"],\n  )\n  test \"hoge\" do |(actual, expected)|\n    assert { hoge(actual) == expected }\n  end\nend\n\nRuby \u3067\u89e3\u304d\u307e\u3057\u305f\n\n## \u554f\u984c\n\n- http://mtsmfm.github.io/2016/06/04/doukaku-e04.html\n\n## \u65b9\u91dd\n\n- \u5168\u4f53\u306e\u6a2a\u9053\u306e\u6570\u3060\u3051\u30b9\u30c6\u30c3\u30d7\u304c\u3042\u308b\n- \u5404\u30b9\u30c6\u30c3\u30d7\u3067\u3001\u3069\u306e\u6a2a\u9053\u306b\u5165\u308b\u304b\u3068\u3044\u3046\u60c5\u5831\u306e\u30ea\u30b9\u30c8\u304c\u77f3\u5074\u3001\u767b\u5c71\u5bb6\u5074\u306e\u4e21\u65b9\u3067\u4f5c\u308c\u308b\n- \u3044\u305a\u308c\u304b\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u77f3\u306e\u901a\u308b\u6a2a\u9053\u3068\u88ab\u3063\u3066\u3057\u307e\u3046\u767b\u5c71\u5bb6\u306f\u30a2\u30a6\u30c8\uff08\u610f\u5473\u6df1\uff09\n- \u77f3\u304c\u5168\u304f\u6a2a\u9053\u306b\u5165\u3089\u306a\u3044\u5834\u5408\u3001\u6700\u521d\u306b\u77f3\u304c\u843d\u3061\u59cb\u3081\u305f\u65b9\u89d2\u306b\u3044\u308b\u767b\u5c71\u5bb6\u306f\u30a2\u30a6\u30c8\uff08\u610f\u5473\u6df1\uff09\n\n## \u30b3\u30fc\u30c9\n\n```rb\n# coding: utf-8\nLABELS = (\"A\"..\"H\").to_a\n\ndef hoge(code)\n  # code #=> \"2512:C\"\n\n  sideways, start = code.split(\":\").tap { |a, b|\n    break [\n      a.chars.map(&:to_i).\n        map { |n| [LABELS[n-1], LABELS[n % 8]].join },\n      b\n    ]\n  }\n\n  # sideways #=> [\"BC\", \"EF\", \"AB\", \"BC\"]\n  # start    #=> \"C\"\n\n  router = -> ((d, log), way) {\n    if way.match(d)\n      [way.gsub(d, \"\"), log + [way]]\n    else\n      [d, log + [nil]]\n    end\n  }\n\n  routes = LABELS.map { |l| sideways.reverse.reduce([l, []], &router) }.to_h\n\n  # \u9e93\u304b\u3089\u767b\u3063\u305f\u3068\u304d\u306e\u30b4\u30fc\u30eb\u304c key\u3001\u7d4c\u8def\u304c value\n  # routes #=> {\n  #              \"C\" => [ nil, \"AB\",  nil, \"BC\"],\n  #              \"B\" => [\"BC\",  nil,  nil, \"BC\"],\n  #              \"A\" => [\"BC\", \"AB\",  nil,  nil],\n  #              \"D\" => [ nil,  nil,  nil,  nil],\n  #              \"F\" => [ nil,  nil, \"EF\",  nil],\n  #              \"E\" => [ nil,  nil, \"EF\",  nil],\n  #              \"G\" => [ nil,  nil,  nil,  nil],\n  #              \"H\" => [ nil,  nil,  nil,  nil]\n  #            }\n\n  # \u77f3\u306e\u30b9\u30bf\u30fc\u30c8\u65b9\u5411\u304c\u30b4\u30fc\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u7d4c\u8def\u306e\u9006\u9806\u304c\u77f3\u306e\u7d4c\u8def\n  danger_route = routes[start].reverse\n\n  # danger_route #=> [\"BC\", nil, \"AB\", nil]\n\n  routes.values.map { |route|\n    route.\n      zip(danger_route.reverse).\n      map { |(a, b)| a && a == b ? \"\u6b7b\" : \"\u30bb\u30fc\u30d5\" }.\n      index(\"\u6b7b\") ? \"\u6b7b\" : \"\u751f\"\n  }.map.with_index { |judge, i| #=> [\"\u6b7b\", \"\u6b7b\", \"\u6b7b\", \"\u751f\", \"\u751f\", \"\u751f\", \"\u751f\", \"\u751f\"]\n    LABELS[i] if judge == \"\u751f\"\n  }.         #=> [nil, nil, nil, \"D\", \"E\", \"F\", \"G\", \"H\"]\n    compact. #=> [\"D\", \"E\", \"F\", \"G\", \"H\"]\n    join.    #=> \"DEFGH\"\n    gsub(danger_route.none? ? start : \"\", \"\") #=> \"DEFGH\"\nend\n\nrequire 'test-unit'\nclass MainTest < Test::Unit::TestCase\n  data(\n    \"/*00*/\" => [\"2512:C\", \"DEFGH\"],\n    \"/*01*/\" => [\"1:A\", \"CDEFGH\"],\n    \"/*02*/\" => [\":C\", \"ABDEFGH\"],\n    \"/*03*/\" => [\"2345:B\", \"AGH\"],\n    \"/*04*/\" => [\"1256:E\", \"ABCDH\"],\n    \"/*05*/\" => [\"1228:A\", \"ADEFG\"],\n    \"/*06*/\" => [\"5623:B\", \"AEFGH\"],\n    \"/*07*/\" => [\"8157:C\", \"ABDEFGH\"],\n    \"/*08*/\" => [\"74767:E\", \"ABCFGH\"],\n    \"/*09*/\" => [\"88717:D\", \"ABCEFGH\"],\n    \"/*10*/\" => [\"148647:A\", \"ACDEFH\"],\n    \"/*11*/\" => [\"374258:H\", \"BCDEFH\"],\n    \"/*12*/\" => [\"6647768:F\", \"ABCDEH\"],\n    \"/*13*/\" => [\"4786317:E\", \"ABFGH\"],\n    \"/*14*/\" => [\"3456781:C\", \"\"],\n    \"/*15*/\" => [\"225721686547123:C\", \"CEF\"],\n    \"/*16*/\" => [\"2765356148824666:F\", \"ABCDEH\"],\n    \"/*17*/\" => [\"42318287535641783:F\", \"BDE\"],\n    \"/*18*/\" => [\"584423584751745261:D\", \"FGH\"],\n    \"/*19*/\" => [\"8811873415472513884:D\", \"CFG\"],\n    \"/*20*/\" => [\"74817442725737422451:H\", \"BCDEF\"],\n    \"/*21*/\" => [\"223188865746766511566:C\", \"ABGH\"],\n    \"/*22*/\" => [\"2763666483242552567747:F\", \"ABCG\"],\n    \"/*23*/\" => [\"76724442325377753577138:E\", \"EG\"],\n    \"/*24*/\" => [\"327328486656448784712618:B\", \"\"],\n    \"/*25*/\" => [\"4884637666662548114774288:D\", \"DGH\"],\n    \"/*26*/\" => [\"84226765313786654637511248:H\", \"DEF\"],\n    \"/*27*/\" => [\"486142154163288126476238756:A\", \"CDF\"],\n    \"/*28*/\" => [\"1836275732415226326155464567:F\", \"BCD\"],\n    \"/*29*/\" => [\"62544434452376661746517374245:G\", \"G\"],\n    \"/*30*/\" => [\"381352782758218463842725673473:B\", \"A\"],\n  )\n  test \"hoge\" do |(actual, expected)|\n    assert { hoge(actual) == expected }\n  end\nend\n```\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}