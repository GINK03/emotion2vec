{"context": "uuid\u3092\u30ad\u30fc\u3068\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u5404\u30ec\u30b3\u30fc\u30c9\uff08DynamoDB \u7684\u306b\u306f\u53b3\u5bc6\u306b\u306f\u30a2\u30a4\u30c6\u30e0\uff09\u306b\u5bfe\u3057\u3066\u3001\u5404\u884c\u306buuid\u30ea\u30b9\u30c8\u304c\u66f8\u304b\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u3093\u3067\u5bfe\u8c61\u306e\u30ec\u30b3\u30fc\u30c9\u306b\u30d5\u30e9\u30b0\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u304f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u305f\u3002\n\u672c\u8a18\u4e8b\u672b\u5c3e\u306b\u8a18\u8f09\u3057\u305f\u3088\u3046\u306a Node.js \u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067 80WCU (Write Capacity Unit) \u6d88\u8cbb\u3067\u6e08\u3080\u3068\u601d\u3063\u3066\u3044\u305f\u3002\u3057\u304b\u3057\u7d50\u679c\u7684\u306b 240WCU \u3068\uff13\u500d\u6d88\u8cbb\u3057\u3066\u3044\u305f\u3002\n\n\u539f\u56e0\n\nRCU/WCU \u306e U \u306f Unit \u3067\u3042\u308a\u3001Item (Record) \u3067\u306f\u306a\u3044\u3002RCU \u306e Unit \u306f 4KB \u3067\u3042\u308a\u3001WCU \u306e Unit \u306f 1KB \u3067\u3042\u3063\u305f\u3002\n\u30c6\u30fc\u30d6\u30eb\u306b\u5165\u3063\u3066\u308b\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u304c\u5404\u30ec\u30b3\u30fc\u30c9\u3067\u5e73\u5747 3KB \u8fd1\u304f\u3042\u3063\u305f\u305f\u3081\u30011\u66f4\u65b0\u306b 3WCU \u4f7f\u3063\u3066\u3044\u305f\u3002\n\n\n\u53cd\u7701\u3068\u8003\u5bdf\n\n\u30ec\u30b3\u30fc\u30c9\u306e 4KB \u3092\u6700\u5927\u5024\u306e\u57fa\u6e96\u3068\u3057\u3066\u6c17\u306b\u3057\u3066\u3044\u305f\u304c\u3001RCU \u3068 WCU \u306e Unit \u306b\u5dee\u304c\u3042\u3063\u305f\u3053\u3068\u3092\u77e5\u3089\u306a\u304b\u3063\u305f\u3002\n\u30c6\u30fc\u30d6\u30eb\u8a2d\u8a08\u304c\u6700\u9069\u3067\u306f\u306a\u304b\u3063\u305f\u3002\n\u30c6\u30fc\u30d7\u30eb\u306e\u4e2d\u3067\u66f4\u65b0\u983b\u5ea6\u304c\u9ad8\u304f\u8aad\u307f\u53d6\u308a\u983b\u5ea6\u304c\u4f4e\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\uff08\u5c5e\u6027\uff09\u304c\u3042\u308a\u3001\u304b\u3064\u72ec\u7acb\u3067\u304d\u308b\u3082\u306e\u304c\u3042\u3063\u305f\u3002\u3053\u308c\u306f\u30c6\u30fc\u30d6\u30eb\u3092\u5206\u3051\u308b\u3079\u304d\u3060\u3063\u305f\u3002\n1\u30ec\u30b3\u30fc\u30c9\u306e\u30b5\u30a4\u30ba\u3092\u592a\u3089\u305b\u3066\u3044\u304f\u3088\u3046\u306a\u5b9f\u88c5\u306f\u5371\u967a\u3001\u4e0d\u8981\u306b\u306a\u3063\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u6d88\u3057\u8fbc\u3093\u3060\u65b9\u304c\u826f\u3044\uff08\u3082\u3061\u308d\u3093\u305d\u306e\u5834\u5408\u3082WCU\u3092\u8003\u616e\u3057\u305f\u524a\u9664\u304c\u5fc5\u8981\u3067\u3042\u308b\uff09\u3002\n\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n'use strict';\n\nconst fs = require('fs');\nconst AWS = require('aws-sdk');\nconst LineStream = require('byline').LineStream;\nconst PacedWorkStream = require('paced-work-stream');\nconst PromisedLife = require('promised-lifestream');\n\nconst docClient = new AWS.DynamoDB.DocumentClient({ region 'ap-northeast-1' });\nconst TABLE_NAME = 'users';\n\nconst pacedWorker = new PacedWorkStream({\n    concurrency: 8,\n    workMS: 100, // 1000ms/sec / 100ms * 8 = 80 WCU\n  }, function(line) {\n    const uuid = line.toString();\n    console.log('%s Begin %s', new Date().toISOString(), uuid);\n\n    return docClient.update({\n        TableName: TABLE_NAME,\n        Key: { uuid: uuid },\n        UpdateExpression: 'set #a = :v',\n        ExpressionAttributeNames: { '#a': 'newFlag' },\n        ExpressionAttributeValues: { ':v': true }\n      })\n      .promise()\n      .then(() => {\n        pacedWorker.countTag('update');\n        console.log('%s End uuid:%s', new Date().toISOString(), uuid);\n      })\n      .catch(err => {\n        console.warn(new Date().toISOString(), err);\n      });\n  });\n\nPromisedLife([\n  fs.createReadStream('uuid.txt'),\n  new LineStream(),\n  pacedWorker\n])\n.then(() => {\n  console.log(pacedWorker.tagCounts);\n})\n.catch(err => {\n  console.error(err);\n});\n\nuuid\u3092\u30ad\u30fc\u3068\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306e\u5404\u30ec\u30b3\u30fc\u30c9\uff08DynamoDB \u7684\u306b\u306f\u53b3\u5bc6\u306b\u306f\u30a2\u30a4\u30c6\u30e0\uff09\u306b\u5bfe\u3057\u3066\u3001\u5404\u884c\u306buuid\u30ea\u30b9\u30c8\u304c\u66f8\u304b\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u3093\u3067\u5bfe\u8c61\u306e\u30ec\u30b3\u30fc\u30c9\u306b\u30d5\u30e9\u30b0\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u304f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u305f\u3002\n\u672c\u8a18\u4e8b\u672b\u5c3e\u306b\u8a18\u8f09\u3057\u305f\u3088\u3046\u306a Node.js \u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3067 **80WCU** (Write Capacity Unit) \u6d88\u8cbb\u3067\u6e08\u3080\u3068\u601d\u3063\u3066\u3044\u305f\u3002\u3057\u304b\u3057\u7d50\u679c\u7684\u306b **240WCU** \u3068\uff13\u500d\u6d88\u8cbb\u3057\u3066\u3044\u305f\u3002\n\n## \u539f\u56e0\n* RCU/WCU \u306e U \u306f Unit \u3067\u3042\u308a\u3001Item (Record) \u3067\u306f\u306a\u3044\u3002**RCU** \u306e Unit \u306f **4KB** \u3067\u3042\u308a\u3001**WCU** \u306e Unit \u306f **1KB** \u3067\u3042\u3063\u305f\u3002\n* \u30c6\u30fc\u30d6\u30eb\u306b\u5165\u3063\u3066\u308b\u65e2\u5b58\u306e\u30c7\u30fc\u30bf\u304c\u5404\u30ec\u30b3\u30fc\u30c9\u3067\u5e73\u5747 3KB \u8fd1\u304f\u3042\u3063\u305f\u305f\u3081\u30011\u66f4\u65b0\u306b 3WCU \u4f7f\u3063\u3066\u3044\u305f\u3002\n\n## \u53cd\u7701\u3068\u8003\u5bdf\n* \u30ec\u30b3\u30fc\u30c9\u306e 4KB \u3092\u6700\u5927\u5024\u306e\u57fa\u6e96\u3068\u3057\u3066\u6c17\u306b\u3057\u3066\u3044\u305f\u304c\u3001RCU \u3068 WCU \u306e Unit \u306b\u5dee\u304c\u3042\u3063\u305f\u3053\u3068\u3092\u77e5\u3089\u306a\u304b\u3063\u305f\u3002\n* \u30c6\u30fc\u30d6\u30eb\u8a2d\u8a08\u304c\u6700\u9069\u3067\u306f\u306a\u304b\u3063\u305f\u3002  \n  \u30c6\u30fc\u30d7\u30eb\u306e\u4e2d\u3067\u66f4\u65b0\u983b\u5ea6\u304c\u9ad8\u304f\u8aad\u307f\u53d6\u308a\u983b\u5ea6\u304c\u4f4e\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\uff08\u5c5e\u6027\uff09\u304c\u3042\u308a\u3001\u304b\u3064\u72ec\u7acb\u3067\u304d\u308b\u3082\u306e\u304c\u3042\u3063\u305f\u3002\u3053\u308c\u306f\u30c6\u30fc\u30d6\u30eb\u3092\u5206\u3051\u308b\u3079\u304d\u3060\u3063\u305f\u3002\n* 1\u30ec\u30b3\u30fc\u30c9\u306e\u30b5\u30a4\u30ba\u3092\u592a\u3089\u305b\u3066\u3044\u304f\u3088\u3046\u306a\u5b9f\u88c5\u306f\u5371\u967a\u3001\u4e0d\u8981\u306b\u306a\u3063\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u6d88\u3057\u8fbc\u3093\u3060\u65b9\u304c\u826f\u3044\uff08\u3082\u3061\u308d\u3093\u305d\u306e\u5834\u5408\u3082WCU\u3092\u8003\u616e\u3057\u305f\u524a\u9664\u304c\u5fc5\u8981\u3067\u3042\u308b\uff09\u3002\n\n## \u30b9\u30af\u30ea\u30d7\u30c8\n\n```javascript\n'use strict';\n\nconst fs = require('fs');\nconst AWS = require('aws-sdk');\nconst LineStream = require('byline').LineStream;\nconst PacedWorkStream = require('paced-work-stream');\nconst PromisedLife = require('promised-lifestream');\n\nconst docClient = new AWS.DynamoDB.DocumentClient({ region 'ap-northeast-1' });\nconst TABLE_NAME = 'users';\n\nconst pacedWorker = new PacedWorkStream({\n    concurrency: 8,\n    workMS: 100, // 1000ms/sec / 100ms * 8 = 80 WCU\n  }, function(line) {\n    const uuid = line.toString();\n    console.log('%s Begin %s', new Date().toISOString(), uuid);\n    \n    return docClient.update({\n        TableName: TABLE_NAME,\n        Key: { uuid: uuid },\n        UpdateExpression: 'set #a = :v',\n        ExpressionAttributeNames: { '#a': 'newFlag' },\n        ExpressionAttributeValues: { ':v': true }\n      })\n      .promise()\n      .then(() => {\n        pacedWorker.countTag('update');\n        console.log('%s End uuid:%s', new Date().toISOString(), uuid);\n      })\n      .catch(err => {\n        console.warn(new Date().toISOString(), err);\n      });\n  });\n\nPromisedLife([\n  fs.createReadStream('uuid.txt'),\n  new LineStream(),\n  pacedWorker\n])\n.then(() => {\n  console.log(pacedWorker.tagCounts);\n})\n.catch(err => {\n  console.error(err);\n});\n```\n", "tags": ["AWS", "DynamoDB", "Node.js"]}