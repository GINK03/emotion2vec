{"tags": ["\u30ec\u30b3\u30e1\u30f3\u30c9", "\u985e\u4f3c\u5ea6", "Ruby", "Rails", "module"], "context": " More than 1 year has passed since last update.\u30ec\u30b3\u30e1\u30f3\u30c9\u3084\u30c7\u30fc\u30bf\u5206\u6790\u306b\u4f7f\u308f\u308c\u308b\u3053\u3068\u3082\u591a\u3044\u985e\u4f3c\u5ea6\u8a08\u7b97\u3092\u7c21\u5358\u306b\u3067\u304d\u308bmodule\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u985e\u4f3c\u5ea6\u306f\u4ee5\u4e0b\u306e3\u3064\u3002\n\n\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\nJacCard\u4fc2\u6570\nDice\u4fc2\u6570\n\n\u591a\u5c11\u6c4e\u7528\u7684\u306b\u7b97\u51fa\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u914d\u5217\u3068\u30cf\u30c3\u30b7\u30e5\u306b\u5bfe\u5fdc\u3002\n\u2460 \u4e8c\u3064\u306e\u914d\u5217\u3092\u6e21\u3059\u3068\u985e\u4f3c\u5ea6\u304c\u8fd4\u3063\u3066\u304f\u308b\n\u2461 \u4e8c\u3064\u306e\u30cf\u30c3\u30b7\u30e5\u3092\u6e21\u3059\u3068\u985e\u4f3c\u5ea6\u304c\u8fd4\u3063\u3066\u304f\u308b\n\u2462 \u30e2\u30c7\u30eb\u3068\u30ab\u30e9\u30e0\u3092\u6e21\u305b\u3070\u985e\u4f3c\u5ea6\u3092\u5168\u3066\u306e\u30ec\u30b3\u30fc\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u985e\u4f3c\u5ea6\u3092\u7b97\u51fa\u3057\u3066\u304f\u308c\u308b(\u672a\u5b8c\u6210)\n\u203b\u2462\u306f\u3001\u4f8b\u3048\u3070User\u30c6\u30fc\u30d6\u30eb\u3092\u6301\u3063\u3066\u3044\u305f\u3068\u3057\u305f\u3089\u3001User\u3068\u3044\u3046\u30af\u30e9\u30b9\u540d\u3068\u3001User\u30e2\u30c7\u30eb\u304b\u3089\u53d6\u5f97\u3067\u304d\u308b\u30c7\u30fc\u30bf\u3084\u30ab\u30e9\u30e0\u540d\u3068\u91cd\u307f\u3092\u6e21\u3059\u3060\u3051\u3067\u3001user-user\u5168\u3066\u306e\u985e\u4f3c\u5ea6\u3092\u7b97\u51fa\u3057\u3066\u304f\u308c\u305f\u3089\u4fbf\u5229\u3060\u306a\u3068\u601d\u3063\u3066\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u2460\u3001\u2461\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306esimilarity_generator.rb\u3067\u7b97\u51fa\u3067\u304d\u308b\n\nsimilarity_generator.rb\n\nmodule SimilarityGenerator\n\n  #data1,data2\u306b\u914d\u5217\u304b\u30cf\u30c3\u30b7\u30e5\u3092\u6e21\u3059\u3068\u985e\u4f3c\u5ea6\u304c\u8fd4\u308b\n  def calculate_similarity(data1,data2,type=\"cosine\")\n    if data1.class==Array\n      calculate_similarity_with_array(data1,data2,type)\n    elsif data1.class==Hash\n      calculate_similarity_with_hash(data1,data2,type)\n    end\n  end\n\n  #vector1\u3068vector2\u306b\u540c\u3058\u9577\u3055\u306e\u6570\u5217(\u8981\u7d20\u304c\u6570\u5b57\u306e\u914d\u5217)\u3092\u6e21\u3059\u3068\u985e\u4f3c\u5ea6\u304c\u8fd4\u308b\n  #\u7b2c\u4e09\u5f15\u6570\u306etype\u306b\"cosine\",\"jaccard\",\"dice\"\u306e\u3044\u305a\u308c\u304b\u3092\u6307\u5b9a\u3059\u308b(default=\"cosine\")\n  def calculate_similarity_with_array(vector1,vector2,type=\"cosine\")\n    if type==\"cosine\"   \n      #\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\n      similarity = cosine_similarity(vector1,vector2)\n    elsif type==\"jaccard\"\n      #Jaccard\u4fc2\u6570\u3092\u8a08\u7b97\n      similarity = jaccard_similarity(vector1,vector2)\n    elsif type==\"dice\"\n      #Dice\u4fc2\u6570\u3092\u8a08\u7b97\n      similarity = dice_similarity(vector1,vector2)\n    end\n    return similarity #\u985e\u4f3c\u5ea6\u3092\u8fd4\u3059\n  end\n\n  #hash1\u3068hash2\u306b\u6bd4\u8f03\u3057\u305f\u3044hash\u3092\u6e21\u3059\u3068\u985e\u4f3c\u5ea6\u304c\u8fd4\u308b\n  #\u4e8c\u3064\u306ehash\u306f\u7570\u306a\u308b\u9577\u3055\u3001key\u3092\u6301\u3063\u3066\u3044\u3066\u3082key\u3092\u7d71\u5408\u3057\u3066\u9577\u3055\u304c\u8abf\u6574\u3055\u308c\u308b\n  def calculate_similarity_with_hash(hash1,hash2,type=\"cosine\")\n    hash3 = hash1.merge(hash2)\n    hash3.each do |key,value|\n      hash1[key] = 0 if hash1[key].blank?\n      hash2[key] = 0 if hash2[key].blank?\n    end\n    vector1 = hash1.sort.map{|key,val|val}\n    vector2 = hash2.sort.map{|key,val|val}\n    if type==\"cosine\"   \n      #\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\n      similarity = cosine_similarity(vector1,vector2)\n    elsif type==\"jaccard\"\n      #Jaccard\u4fc2\u6570\u3092\u8a08\u7b97\n      similarity = jaccard_similarity(vector1,vector2)\n    elsif type==\"dice\"\n      #Dice\u4fc2\u6570\u3092\u8a08\u7b97\n      similarity = dice_similarity(vector1,vector2)\n    end\n    return similarity #\u985e\u4f3c\u5ea6\u3092\u8fd4\u3059\n  end\n\n  #\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6[START]\n  def cosine_similarity(vector1, vector2)\n    dp = dot_product(vector1, vector2)\n    nm = normalize(vector1) * normalize(vector2)\n    dp / nm\n  end\n\n  def dot_product(vector1, vector2)\n    sum = 0.0\n    vector1.each_with_index{ |val, i| sum += val*vector2[i] }\n    sum\n  end\n\n  def normalize(vector)\n    Math.sqrt(vector.inject(0.0){ |m,o| m += o**2 })\n  end\n  #\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6[END]\n\n  #Jaccard\u4fc2\u6570[START]\n  def jaccard_similarity(vector1,vector2)\n    numerator = 0\n    denominator = 0\n\n    vector1.each_with_index do |val1,index|\n      val2 = vector2[index]\n      numerator += [val1,val2].min\n      denominator += [val1,val2].max\n    end\n    return denominator != 0 ? numerator.to_f / denominator : 0\n  end\n  #Jaccard\u4fc2\u6570[END]\n\n  #Dice\u4fc2\u6570[START]\n  def dice_similarity(vector1,vector2)\n    numerator = 0\n    denominator = 0\n    vector1.each_with_index do |val1,index|\n      val2 = vector2[index]\n      numerator += [val1,val2].min\n      denominator += val1+val2\n    end\n    return denominator != 0 ? 2 * numerator.to_f / denominator : 0\n  end\n  #Dice\u4fc2\u6570[END]\nend\n\n\n\n\n\u2462\u306b\u3064\u3044\u3066\u306fsimilarity_generator.rb\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\n\u203b\u672a\u5b8c\u6210\u306a\u306e\u3067\u3001\u3046\u307e\u304f\u4f7f\u308f\u306a\u3044\u3068\u5b9f\u7528\u6027\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nsimilarity_generator.rb\n\nmodule SimilarityGenerator\n\n  #(\u4ee5\u4e0b\u3092\u8ffd\u52a0)\n\n  def calculate_similarity(class_name, columns={}, type=\"cosine\")\n\n    similarity_matrix = []\n\n    class_name.find_each do |obj1|\n\n      similarity_matrix_child = []\n      obj1_ary = []\n\n      columns.each do |column|\n        begin\n          obj1_ary << eval(\"obj1.#{column[0].to_s}\").to_i * column[1].to_i\n        rescue\n          obj1_ary << 0\n        end\n      end\n\n      class_name.find_each do |obj2|\n        obj2_ary = []\n        columns.each do |column|\n          begin\n            obj2_ary << eval(\"obj2.#{column[0].to_s}\").to_i * column[1].to_i\n          rescue\n            obj2_ary << 0\n          end\n        end\n\n        if type==\"cosine\"\n          #obj1\u3068obj2\u306e\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u914d\u5217\u306b\u5165\u308c\u308b\n          similarity_matrix_child << cosine_similarity(obj1_ary,obj2_ary)\n        elsif type==\"jaccard\"\n          #obj1\u3068obj2\u306eJaccard\u4fc2\u6570\u3092\u914d\u5217\u306b\u5165\u308c\u308b\n          similarity_matrix_child << jaccard_similarity(obj1_ary,obj2_ary)\n\n        elsif type==\"dice\"\n          #obj1\u3068obj2\u306eDice\u4fc2\u6570\u3092\u914d\u5217\u306b\u5165\u308c\u308b\n          similarity_matrix_child << dice_similarity(obj1_ary,obj2_ary)\n        end\n      end\n      similarity_matrix << similarity_matrix_child\n    end\n    return similarity_matrix #\u6700\u7d42\u7684\u306b\u884c\u5217\u306e\u5f62\u3067\u985e\u4f3c\u5ea6\u3092\u8fd4\u3059\n  end\nend\n\n\n\n\n\u30ec\u30b3\u30e1\u30f3\u30c9\u3084\u30c7\u30fc\u30bf\u5206\u6790\u306b\u4f7f\u308f\u308c\u308b\u3053\u3068\u3082\u591a\u3044\u985e\u4f3c\u5ea6\u8a08\u7b97\u3092\u7c21\u5358\u306b\u3067\u304d\u308bmodule\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u985e\u4f3c\u5ea6\u306f\u4ee5\u4e0b\u306e3\u3064\u3002\n\n1. \u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\n2. JacCard\u4fc2\u6570\n3. Dice\u4fc2\u6570\n\n\u591a\u5c11\u6c4e\u7528\u7684\u306b\u7b97\u51fa\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u914d\u5217\u3068\u30cf\u30c3\u30b7\u30e5\u306b\u5bfe\u5fdc\u3002\n\n\u2460 \u4e8c\u3064\u306e\u914d\u5217\u3092\u6e21\u3059\u3068\u985e\u4f3c\u5ea6\u304c\u8fd4\u3063\u3066\u304f\u308b\n\u2461 \u4e8c\u3064\u306e\u30cf\u30c3\u30b7\u30e5\u3092\u6e21\u3059\u3068\u985e\u4f3c\u5ea6\u304c\u8fd4\u3063\u3066\u304f\u308b\n\u2462 \u30e2\u30c7\u30eb\u3068\u30ab\u30e9\u30e0\u3092\u6e21\u305b\u3070\u985e\u4f3c\u5ea6\u3092\u5168\u3066\u306e\u30ec\u30b3\u30fc\u30c9\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u985e\u4f3c\u5ea6\u3092\u7b97\u51fa\u3057\u3066\u304f\u308c\u308b(\u672a\u5b8c\u6210)\n\n\u203b\u2462\u306f\u3001\u4f8b\u3048\u3070User\u30c6\u30fc\u30d6\u30eb\u3092\u6301\u3063\u3066\u3044\u305f\u3068\u3057\u305f\u3089\u3001User\u3068\u3044\u3046\u30af\u30e9\u30b9\u540d\u3068\u3001User\u30e2\u30c7\u30eb\u304b\u3089\u53d6\u5f97\u3067\u304d\u308b\u30c7\u30fc\u30bf\u3084\u30ab\u30e9\u30e0\u540d\u3068\u91cd\u307f\u3092\u6e21\u3059\u3060\u3051\u3067\u3001user-user\u5168\u3066\u306e\u985e\u4f3c\u5ea6\u3092\u7b97\u51fa\u3057\u3066\u304f\u308c\u305f\u3089\u4fbf\u5229\u3060\u306a\u3068\u601d\u3063\u3066\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n### \u2460\u3001\u2461\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306esimilarity_generator.rb\u3067\u7b97\u51fa\u3067\u304d\u308b\n\n```similarity_generator.rb\n\nmodule SimilarityGenerator\n\n  #data1,data2\u306b\u914d\u5217\u304b\u30cf\u30c3\u30b7\u30e5\u3092\u6e21\u3059\u3068\u985e\u4f3c\u5ea6\u304c\u8fd4\u308b\n  def calculate_similarity(data1,data2,type=\"cosine\")\n    if data1.class==Array\n\t  calculate_similarity_with_array(data1,data2,type)\n    elsif data1.class==Hash\n\t  calculate_similarity_with_hash(data1,data2,type)\n    end\n  end\n\n  #vector1\u3068vector2\u306b\u540c\u3058\u9577\u3055\u306e\u6570\u5217(\u8981\u7d20\u304c\u6570\u5b57\u306e\u914d\u5217)\u3092\u6e21\u3059\u3068\u985e\u4f3c\u5ea6\u304c\u8fd4\u308b\n  #\u7b2c\u4e09\u5f15\u6570\u306etype\u306b\"cosine\",\"jaccard\",\"dice\"\u306e\u3044\u305a\u308c\u304b\u3092\u6307\u5b9a\u3059\u308b(default=\"cosine\")\n  def calculate_similarity_with_array(vector1,vector2,type=\"cosine\")\n    if type==\"cosine\"\t\n      #\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\n      similarity = cosine_similarity(vector1,vector2)\n    elsif type==\"jaccard\"\n      #Jaccard\u4fc2\u6570\u3092\u8a08\u7b97\n      similarity = jaccard_similarity(vector1,vector2)\n    elsif type==\"dice\"\n      #Dice\u4fc2\u6570\u3092\u8a08\u7b97\n      similarity = dice_similarity(vector1,vector2)\n    end\n    return similarity #\u985e\u4f3c\u5ea6\u3092\u8fd4\u3059\n  end\n\n  #hash1\u3068hash2\u306b\u6bd4\u8f03\u3057\u305f\u3044hash\u3092\u6e21\u3059\u3068\u985e\u4f3c\u5ea6\u304c\u8fd4\u308b\n  #\u4e8c\u3064\u306ehash\u306f\u7570\u306a\u308b\u9577\u3055\u3001key\u3092\u6301\u3063\u3066\u3044\u3066\u3082key\u3092\u7d71\u5408\u3057\u3066\u9577\u3055\u304c\u8abf\u6574\u3055\u308c\u308b\n  def calculate_similarity_with_hash(hash1,hash2,type=\"cosine\")\n    hash3 = hash1.merge(hash2)\n    hash3.each do |key,value|\n      hash1[key] = 0 if hash1[key].blank?\n      hash2[key] = 0 if hash2[key].blank?\n    end\n    vector1 = hash1.sort.map{|key,val|val}\n    vector2 = hash2.sort.map{|key,val|val}\n    if type==\"cosine\"\t\n      #\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\n      similarity = cosine_similarity(vector1,vector2)\n    elsif type==\"jaccard\"\n      #Jaccard\u4fc2\u6570\u3092\u8a08\u7b97\n      similarity = jaccard_similarity(vector1,vector2)\n    elsif type==\"dice\"\n      #Dice\u4fc2\u6570\u3092\u8a08\u7b97\n      similarity = dice_similarity(vector1,vector2)\n    end\n    return similarity #\u985e\u4f3c\u5ea6\u3092\u8fd4\u3059\n  end\n\n  #\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6[START]\n  def cosine_similarity(vector1, vector2)\n    dp = dot_product(vector1, vector2)\n    nm = normalize(vector1) * normalize(vector2)\n    dp / nm\n  end\n\n  def dot_product(vector1, vector2)\n    sum = 0.0\n    vector1.each_with_index{ |val, i| sum += val*vector2[i] }\n    sum\n  end\n\n  def normalize(vector)\n    Math.sqrt(vector.inject(0.0){ |m,o| m += o**2 })\n  end\n  #\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6[END]\n\n  #Jaccard\u4fc2\u6570[START]\n  def jaccard_similarity(vector1,vector2)\n    numerator = 0\n    denominator = 0\n\n    vector1.each_with_index do |val1,index|\n      val2 = vector2[index]\n      numerator += [val1,val2].min\n      denominator += [val1,val2].max\n    end\n    return denominator != 0 ? numerator.to_f / denominator : 0\n  end\n  #Jaccard\u4fc2\u6570[END]\n\n  #Dice\u4fc2\u6570[START]\n  def dice_similarity(vector1,vector2)\n    numerator = 0\n    denominator = 0\n    vector1.each_with_index do |val1,index|\n      val2 = vector2[index]\n      numerator += [val1,val2].min\n      denominator += val1+val2\n    end\n    return denominator != 0 ? 2 * numerator.to_f / denominator : 0\n  end\n  #Dice\u4fc2\u6570[END]\nend\n\n```\n\n### \u2462\u306b\u3064\u3044\u3066\u306fsimilarity_generator.rb\u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3059\u308b\n\u203b\u672a\u5b8c\u6210\u306a\u306e\u3067\u3001\u3046\u307e\u304f\u4f7f\u308f\u306a\u3044\u3068\u5b9f\u7528\u6027\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```similarity_generator.rb\n\nmodule SimilarityGenerator\n\n  #(\u4ee5\u4e0b\u3092\u8ffd\u52a0)\n\n  def calculate_similarity(class_name, columns={}, type=\"cosine\")\n    \n    similarity_matrix = []\n    \n    class_name.find_each do |obj1|\n\n      similarity_matrix_child = []\n      obj1_ary = []\n\n      columns.each do |column|\n        begin\n          obj1_ary << eval(\"obj1.#{column[0].to_s}\").to_i * column[1].to_i\n        rescue\n          obj1_ary << 0\n        end\n      end\n\n      class_name.find_each do |obj2|\n        obj2_ary = []\n        columns.each do |column|\n          begin\n            obj2_ary << eval(\"obj2.#{column[0].to_s}\").to_i * column[1].to_i\n          rescue\n            obj2_ary << 0\n          end\n        end\n\n        if type==\"cosine\"\n          #obj1\u3068obj2\u306e\u30b3\u30b5\u30a4\u30f3\u985e\u4f3c\u5ea6\u3092\u914d\u5217\u306b\u5165\u308c\u308b\n          similarity_matrix_child << cosine_similarity(obj1_ary,obj2_ary)\n        elsif type==\"jaccard\"\n          #obj1\u3068obj2\u306eJaccard\u4fc2\u6570\u3092\u914d\u5217\u306b\u5165\u308c\u308b\n          similarity_matrix_child << jaccard_similarity(obj1_ary,obj2_ary)\n\n        elsif type==\"dice\"\n          #obj1\u3068obj2\u306eDice\u4fc2\u6570\u3092\u914d\u5217\u306b\u5165\u308c\u308b\n          similarity_matrix_child << dice_similarity(obj1_ary,obj2_ary)\n        end\n      end\n      similarity_matrix << similarity_matrix_child\n    end\n    return similarity_matrix #\u6700\u7d42\u7684\u306b\u884c\u5217\u306e\u5f62\u3067\u985e\u4f3c\u5ea6\u3092\u8fd4\u3059\n  end\nend\n\n```\n"}