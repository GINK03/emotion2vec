{"context": " More than 1 year has passed since last update.Entity Framework \u3067\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5f35\u3063\u3066\u3044\u308b\u3068\u304d\u3001\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u5148\u306e\u8aad\u307f\u8fbc\u307f\u306f\u9045\u5ef6\u3055\u308c\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066\u3001\u6b21\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3067\u8a71\u3092\u9032\u3081\u307e\u3059\u3002\npublic class Context : DbContext\n{\n    public DbSet<Process> Processes { get; set; }\n    public DbSet<Log> Logs { get; set; }\n}\n\npublic class Process\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    public virtual ICollection<Log> Logs { get; set; }\n}\n\npublic class Log\n{\n    public int Id { get; set; }\n    public TraceLevel Level { get; set; }\n    public string Message { get; set; }\n    public int ProcessId { get; set; }\n    public virtual Process Process { get; set; }\n}\n\n\u30d7\u30ed\u30bb\u30b9\u6bce\u306e\u30ed\u30b0\u304b\u3089Level\u304cError\u306e\u30ed\u30b0\u3092\u6700\u65b0100\u4ef6\u307e\u3067\u8868\u793a\u3059\u308b\u3068\u3057\u307e\u3059\u3002\nusing (var db = new Context())\n{\n    foreach (var process in db.Processes)\n    {\n        Console.WriteLine($\"--- {process.Name} ---\");\n        var logs = process.Logs\n            .Where(l => l.Level == TraceLevel.Error)\n            .OrderByDescending(l => l.Id)\n            .Take(100);\n        foreach (var log in logs)\n        {\n            Console.WriteLine(log.Message);\n        }\n    }\n}\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306eSQL\u6587\u304c\u767a\u884c\u3055\u308c\u307e\u3059\u3002\nSELECT \n    [Extent1].[Id] AS [Id], \n    [Extent1].[Name] AS [Name]\n    FROM [dbo].[Processes] AS [Extent1]\n\nSELECT \n    [Extent1].[Id] AS [Id], \n    [Extent1].[Level] AS [Level], \n    [Extent1].[Message] AS [Message], \n    [Extent1].[ProcessId] AS [ProcessId]\n    FROM [dbo].[Logs] AS [Extent1]\n    WHERE ([Extent1].[ProcessId] IS NOT NULL) AND ([Extent1].[ProcessId] = @EntityKeyValue1)\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u5358\u7d14\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3059\u3068\u6700\u521d\u306b\u30d7\u30ed\u30bb\u30b9\u3092\u53d6\u5f97\u3059\u308bSELECT\u6587\u3068\u3001\u5404\u30d7\u30ed\u30bb\u30b9\u6bce\u306b\u30ed\u30b0\u3092\u53d6\u5f97\u3059\u308bSELECT\u6587\u304c\u767a\u884c\u3055\u308c\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001Process\u306eLogs\u3092\u53c2\u7167\u3057\u305f\u3068\u304d\u306b\u3001\u9045\u5ef6\u8aad\u307f\u8fbc\u307f\u304c\u767a\u751f\u3059\u308b\u304b\u3089\u3067\u3059\u3002\n\u3088\u304f\u898b\u308b\u3068\u3001\u53d6\u5f97\u3057\u3066\u3044\u308b\u30ed\u30b0\u306f\u30d7\u30ed\u30bb\u30b9\u304c\u6240\u6709\u3057\u3066\u3044\u308b\u30ed\u30b0\u3092\u5168\u4ef6\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\u6b32\u3057\u3044\u30ed\u30b0\u306fLevel\u304cError\u306e\u6700\u65b0\u304b\u3089100\u4ef6\u5206\u3060\u3051\u3067\u3059\u3002\nContext \u306e Logs \u304b\u3089\u6b32\u3057\u3044\u30ed\u30b0\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3068\u89e3\u6c7a\u3057\u307e\u3059\u3002\nforeach (var process in db.Processes)\n{\n    Console.WriteLine($\"--- {process.Name} ---\");\n    var logs = db.Logs\n        .Where(_ => _.ProcessId == process.Id && _.Level == TraceLevel.Error)\n        .OrderByDescending(_ => _.Id)\n        .Take(100);\n    foreach (var log in logs)\n    {\n        Console.WriteLine(log.Message);\n    }\n}\n\nSELECT TOP (100) \n    [Project1].[Id] AS [Id], \n    [Project1].[Level] AS [Level], \n    [Project1].[Message] AS [Message], \n    [Project1].[ProcessId] AS [ProcessId]\n    FROM ( SELECT \n        [Extent1].[Id] AS [Id], \n        [Extent1].[Level] AS [Level], \n        [Extent1].[Message] AS [Message], \n        [Extent1].[ProcessId] AS [ProcessId]\n        FROM [dbo].[Logs] AS [Extent1]\n        WHERE ([Extent1].[ProcessId] = @p__linq__0) AND (1 = [Extent1].[Level])\n    )  AS [Project1]\n    ORDER BY [Project1].[Id] DESC\n\n\u6298\u89d2\u3001Process \u306b Logs \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u9045\u5ef6\u8aad\u307f\u8fbc\u307f\u3092\u4f7f\u7528\u305b\u305a\u306b Logs \u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092process\u306eLogs\u304b\u3089\u4f5c\u6210\u3057\u3066\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\nforeach (var process in db.Processes)\n{\n    Console.WriteLine($\"--- {process.Name} ---\");\n    var logs = db.Entry(process)\n        .Collection(_ => _.Logs)\n        .Query()\n        .Where(_ => _.Level == TraceLevel.Error)\n        .OrderByDescending(_ => _.Id)\n        .Take(100);\n    foreach (var log in logs)\n    {\n        Console.WriteLine(log.Message);\n    }\n}\n\n\u5b9f\u884c\u3055\u308c\u308bSQL\u6587\u306f\u5148\u306e Logs \u304b\u3089\u691c\u7d22\u3057\u305f\u5834\u5408\u3068\u540c\u3058SQL\u6587\u304c\u767a\u884c\u3055\u308c\u307e\u3059\u3002\n\u4eca\u5ea6\u306f\u9045\u5ef6\u8aad\u307f\u8fbc\u307f\u3092\u3084\u3081\u3066\u3001\u30d7\u30ed\u30bb\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306b\u30ed\u30b0\u3082\u4f75\u305b\u3066\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\nforeach (var process in db.Processes.Include(_ => _.Logs))\n{\n    Console.WriteLine($\"--- {process.Name} ---\");\n    var logs = process.Logs\n        .Where(_ => _.Level == TraceLevel.Error)\n        .OrderByDescending(_ => _.Id)\n        .Take(100);\n    foreach (var log in logs)\n    {\n        Console.WriteLine(log.Message);\n    }\n}\n\nSELECT \n    [Project1].[Id] AS [Id], \n    [Project1].[Name] AS [Name], \n    [Project1].[C1] AS [C1], \n    [Project1].[Id1] AS [Id1], \n    [Project1].[Level] AS [Level], \n    [Project1].[Message] AS [Message], \n    [Project1].[ProcessId] AS [ProcessId]\n    FROM ( SELECT \n        [Extent1].[Id] AS [Id], \n        [Extent1].[Name] AS [Name], \n        [Extent2].[Id] AS [Id1], \n        [Extent2].[Level] AS [Level], \n        [Extent2].[Message] AS [Message], \n        [Extent2].[ProcessId] AS [ProcessId], \n        CASE WHEN ([Extent2].[Id] IS NULL) THEN CAST(NULL AS int) ELSE 1 END AS [C1]\n        FROM  [dbo].[Processes] AS [Extent1]\n        LEFT OUTER JOIN [dbo].[Logs] AS [Extent2] ON [Extent1].[Id] = [Extent2].[ProcessId]\n    )  AS [Project1]\n    ORDER BY [Project1].[Id] ASC, [Project1].[C1] ASC\n\n\u767a\u884c\u3055\u308c\u308bSQL\u6587\u304c\uff11\u56de\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3067\u3082\u3001\u30ed\u30b0\u304c\u5168\u4ef6\u53d6\u5f97\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u308c\u3092\u4f55\u3068\u304b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nvar q = db.Processes\n    .Select(p => new\n    {\n        Process = p,\n        Logs = p.Logs\n            .Where(l => l.Level == TraceLevel.Error)\n            .OrderByDescending(l => l.Id)\n            .Take(100)\n    });\nforeach (var item in q)\n{\n    Console.WriteLine($\"--- {item.Process.Name} ---\");\n    foreach (var log in item.Logs)\n    {\n        Console.WriteLine(log.Message);\n    }\n}\n\n\u30d7\u30ed\u30bb\u30b9\u3068\u3001\u305d\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u6301\u3064Level\u304cError\u306a\u5148\u982d100\u4ef6\u306e\u30ed\u30b0\u3092\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u6301\u3064\u533f\u540d\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u767a\u884c\u3055\u308c\u308bSQL\u6587\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nSELECT \n    [Project2].[Id] AS [Id], \n    [Project2].[Name] AS [Name], \n    [Project2].[C1] AS [C1], \n    [Project2].[Id1] AS [Id1], \n    [Project2].[Level] AS [Level], \n    [Project2].[Message] AS [Message], \n    [Project2].[ProcessId] AS [ProcessId]\n    FROM ( SELECT \n        [Extent1].[Id] AS [Id], \n        [Extent1].[Name] AS [Name], \n        [Limit1].[Id] AS [Id1], \n        [Limit1].[Level] AS [Level], \n        [Limit1].[Message] AS [Message], \n        [Limit1].[ProcessId] AS [ProcessId], \n        CASE WHEN ([Limit1].[Id] IS NULL) THEN CAST(NULL AS int) ELSE 1 END AS [C1]\n        FROM  [dbo].[Processes] AS [Extent1]\n        OUTER APPLY  (SELECT TOP (100) [Project1].[Id] AS [Id], [Project1].[Level] AS [Level], [Project1].[Message] AS [Message], [Project1].[ProcessId] AS [ProcessId]\n            FROM ( SELECT \n                [Extent2].[Id] AS [Id], \n                [Extent2].[Level] AS [Level], \n                [Extent2].[Message] AS [Message], \n                [Extent2].[ProcessId] AS [ProcessId]\n                FROM [dbo].[Logs] AS [Extent2]\n                WHERE ([Extent1].[Id] = [Extent2].[ProcessId]) AND (1 = [Extent2].[Level])\n            )  AS [Project1]\n            ORDER BY [Project1].[Id] DESC ) AS [Limit1]\n    )  AS [Project2]\n    ORDER BY [Project2].[Id] ASC, [Project2].[C1] ASC\n\n\u4eca\u56de\u306e Process \u306e Logs \u306e\u3088\u3046\u306a\u5168\u4ef6\u53d6\u5f97\u306f\u884c\u308f\u306a\u3044\u30b1\u30fc\u30b9\u3067\u306f\u3001virtual \u3092\u5916\u3057\u3066\u9045\u5ef6\u8aad\u307f\u8fbc\u307f\u3092\u3055\u305b\u306a\u3044\u3088\u3046\u306b\u3057\u3088\u3046\u304b\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\nEntity Framework \u3067\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u5f35\u3063\u3066\u3044\u308b\u3068\u304d\u3001\u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u5148\u306e\u8aad\u307f\u8fbc\u307f\u306f\u9045\u5ef6\u3055\u308c\u307e\u3059\u3002\n\n\u4f8b\u3068\u3057\u3066\u3001\u6b21\u306e\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3067\u8a71\u3092\u9032\u3081\u307e\u3059\u3002\n\n``` csharp\npublic class Context : DbContext\n{\n    public DbSet<Process> Processes { get; set; }\n    public DbSet<Log> Logs { get; set; }\n}\n\npublic class Process\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n\n    public virtual ICollection<Log> Logs { get; set; }\n}\n\npublic class Log\n{\n    public int Id { get; set; }\n    public TraceLevel Level { get; set; }\n    public string Message { get; set; }\n    public int ProcessId { get; set; }\n    public virtual Process Process { get; set; }\n}\n```\n\n\u30d7\u30ed\u30bb\u30b9\u6bce\u306e\u30ed\u30b0\u304b\u3089Level\u304cError\u306e\u30ed\u30b0\u3092\u6700\u65b0100\u4ef6\u307e\u3067\u8868\u793a\u3059\u308b\u3068\u3057\u307e\u3059\u3002\n\n\n``` csharp\nusing (var db = new Context())\n{\n\tforeach (var process in db.Processes)\n\t{\n\t\tConsole.WriteLine($\"--- {process.Name} ---\");\n        var logs = process.Logs\n\t\t\t.Where(l => l.Level == TraceLevel.Error)\n\t\t\t.OrderByDescending(l => l.Id)\n\t\t\t.Take(100);\n\t\tforeach (var log in logs)\n\t\t{\n\t\t\tConsole.WriteLine(log.Message);\n\t\t}\n\t}\n}\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306eSQL\u6587\u304c\u767a\u884c\u3055\u308c\u307e\u3059\u3002\n\n``` sql\nSELECT \n    [Extent1].[Id] AS [Id], \n    [Extent1].[Name] AS [Name]\n    FROM [dbo].[Processes] AS [Extent1]\n```\n\n``` sql\nSELECT \n    [Extent1].[Id] AS [Id], \n    [Extent1].[Level] AS [Level], \n    [Extent1].[Message] AS [Message], \n    [Extent1].[ProcessId] AS [ProcessId]\n    FROM [dbo].[Logs] AS [Extent1]\n    WHERE ([Extent1].[ProcessId] IS NOT NULL) AND ([Extent1].[ProcessId] = @EntityKeyValue1)\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u5358\u7d14\u306b\u30eb\u30fc\u30d7\u3092\u56de\u3059\u3068\u6700\u521d\u306b\u30d7\u30ed\u30bb\u30b9\u3092\u53d6\u5f97\u3059\u308bSELECT\u6587\u3068\u3001\u5404\u30d7\u30ed\u30bb\u30b9\u6bce\u306b\u30ed\u30b0\u3092\u53d6\u5f97\u3059\u308bSELECT\u6587\u304c\u767a\u884c\u3055\u308c\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001Process\u306eLogs\u3092\u53c2\u7167\u3057\u305f\u3068\u304d\u306b\u3001\u9045\u5ef6\u8aad\u307f\u8fbc\u307f\u304c\u767a\u751f\u3059\u308b\u304b\u3089\u3067\u3059\u3002\n\u3088\u304f\u898b\u308b\u3068\u3001\u53d6\u5f97\u3057\u3066\u3044\u308b\u30ed\u30b0\u306f\u30d7\u30ed\u30bb\u30b9\u304c\u6240\u6709\u3057\u3066\u3044\u308b\u30ed\u30b0\u3092\u5168\u4ef6\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\u6b32\u3057\u3044\u30ed\u30b0\u306fLevel\u304cError\u306e\u6700\u65b0\u304b\u3089100\u4ef6\u5206\u3060\u3051\u3067\u3059\u3002\n\nContext \u306e Logs \u304b\u3089\u6b32\u3057\u3044\u30ed\u30b0\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3068\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\n``` csharp\nforeach (var process in db.Processes)\n{\n\tConsole.WriteLine($\"--- {process.Name} ---\");\n    var logs = db.Logs\n\t\t.Where(_ => _.ProcessId == process.Id && _.Level == TraceLevel.Error)\n\t\t.OrderByDescending(_ => _.Id)\n\t\t.Take(100);\n\tforeach (var log in logs)\n\t{\n\t\tConsole.WriteLine(log.Message);\n\t}\n}\n```\n\n``` sql\nSELECT TOP (100) \n    [Project1].[Id] AS [Id], \n    [Project1].[Level] AS [Level], \n    [Project1].[Message] AS [Message], \n    [Project1].[ProcessId] AS [ProcessId]\n    FROM ( SELECT \n        [Extent1].[Id] AS [Id], \n        [Extent1].[Level] AS [Level], \n        [Extent1].[Message] AS [Message], \n        [Extent1].[ProcessId] AS [ProcessId]\n        FROM [dbo].[Logs] AS [Extent1]\n        WHERE ([Extent1].[ProcessId] = @p__linq__0) AND (1 = [Extent1].[Level])\n    )  AS [Project1]\n    ORDER BY [Project1].[Id] DESC\n```\n\n\u6298\u89d2\u3001Process \u306b Logs \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u9045\u5ef6\u8aad\u307f\u8fbc\u307f\u3092\u4f7f\u7528\u305b\u305a\u306b Logs \u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092process\u306eLogs\u304b\u3089\u4f5c\u6210\u3057\u3066\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\n\n``` csharp\nforeach (var process in db.Processes)\n{\n\tConsole.WriteLine($\"--- {process.Name} ---\");\n    var logs = db.Entry(process)\n\t\t.Collection(_ => _.Logs)\n\t\t.Query()\n\t\t.Where(_ => _.Level == TraceLevel.Error)\n\t\t.OrderByDescending(_ => _.Id)\n\t\t.Take(100);\n\tforeach (var log in logs)\n\t{\n\t\tConsole.WriteLine(log.Message);\n\t}\n}\n```\n\n\u5b9f\u884c\u3055\u308c\u308bSQL\u6587\u306f\u5148\u306e Logs \u304b\u3089\u691c\u7d22\u3057\u305f\u5834\u5408\u3068\u540c\u3058SQL\u6587\u304c\u767a\u884c\u3055\u308c\u307e\u3059\u3002\n\n\u4eca\u5ea6\u306f\u9045\u5ef6\u8aad\u307f\u8fbc\u307f\u3092\u3084\u3081\u3066\u3001\u30d7\u30ed\u30bb\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3068\u304d\u306b\u30ed\u30b0\u3082\u4f75\u305b\u3066\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n``` csharp\nforeach (var process in db.Processes.Include(_ => _.Logs))\n{\n\tConsole.WriteLine($\"--- {process.Name} ---\");\n    var logs = process.Logs\n\t\t.Where(_ => _.Level == TraceLevel.Error)\n\t\t.OrderByDescending(_ => _.Id)\n\t\t.Take(100);\n\tforeach (var log in logs)\n\t{\n\t\tConsole.WriteLine(log.Message);\n\t}\n}\n```\n\n``` sql\nSELECT \n    [Project1].[Id] AS [Id], \n    [Project1].[Name] AS [Name], \n    [Project1].[C1] AS [C1], \n    [Project1].[Id1] AS [Id1], \n    [Project1].[Level] AS [Level], \n    [Project1].[Message] AS [Message], \n    [Project1].[ProcessId] AS [ProcessId]\n    FROM ( SELECT \n        [Extent1].[Id] AS [Id], \n        [Extent1].[Name] AS [Name], \n        [Extent2].[Id] AS [Id1], \n        [Extent2].[Level] AS [Level], \n        [Extent2].[Message] AS [Message], \n        [Extent2].[ProcessId] AS [ProcessId], \n        CASE WHEN ([Extent2].[Id] IS NULL) THEN CAST(NULL AS int) ELSE 1 END AS [C1]\n        FROM  [dbo].[Processes] AS [Extent1]\n        LEFT OUTER JOIN [dbo].[Logs] AS [Extent2] ON [Extent1].[Id] = [Extent2].[ProcessId]\n    )  AS [Project1]\n    ORDER BY [Project1].[Id] ASC, [Project1].[C1] ASC\n```\n\n\u767a\u884c\u3055\u308c\u308bSQL\u6587\u304c\uff11\u56de\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3067\u3082\u3001\u30ed\u30b0\u304c\u5168\u4ef6\u53d6\u5f97\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u308c\u3092\u4f55\u3068\u304b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n``` csharp\nvar q = db.Processes\n\t.Select(p => new\n\t{\n\t\tProcess = p,\n\t\tLogs = p.Logs\n\t\t\t.Where(l => l.Level == TraceLevel.Error)\n\t\t\t.OrderByDescending(l => l.Id)\n\t\t\t.Take(100)\n\t});\nforeach (var item in q)\n{\n\tConsole.WriteLine($\"--- {item.Process.Name} ---\");\n\tforeach (var log in item.Logs)\n\t{\n\t\tConsole.WriteLine(log.Message);\n\t}\n}\n```\n\n\u30d7\u30ed\u30bb\u30b9\u3068\u3001\u305d\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u6301\u3064Level\u304cError\u306a\u5148\u982d100\u4ef6\u306e\u30ed\u30b0\u3092\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u6301\u3064\u533f\u540d\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u767a\u884c\u3055\u308c\u308bSQL\u6587\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` sql\nSELECT \n    [Project2].[Id] AS [Id], \n    [Project2].[Name] AS [Name], \n    [Project2].[C1] AS [C1], \n    [Project2].[Id1] AS [Id1], \n    [Project2].[Level] AS [Level], \n    [Project2].[Message] AS [Message], \n    [Project2].[ProcessId] AS [ProcessId]\n    FROM ( SELECT \n        [Extent1].[Id] AS [Id], \n        [Extent1].[Name] AS [Name], \n        [Limit1].[Id] AS [Id1], \n        [Limit1].[Level] AS [Level], \n        [Limit1].[Message] AS [Message], \n        [Limit1].[ProcessId] AS [ProcessId], \n        CASE WHEN ([Limit1].[Id] IS NULL) THEN CAST(NULL AS int) ELSE 1 END AS [C1]\n        FROM  [dbo].[Processes] AS [Extent1]\n        OUTER APPLY  (SELECT TOP (100) [Project1].[Id] AS [Id], [Project1].[Level] AS [Level], [Project1].[Message] AS [Message], [Project1].[ProcessId] AS [ProcessId]\n            FROM ( SELECT \n                [Extent2].[Id] AS [Id], \n                [Extent2].[Level] AS [Level], \n                [Extent2].[Message] AS [Message], \n                [Extent2].[ProcessId] AS [ProcessId]\n                FROM [dbo].[Logs] AS [Extent2]\n                WHERE ([Extent1].[Id] = [Extent2].[ProcessId]) AND (1 = [Extent2].[Level])\n            )  AS [Project1]\n            ORDER BY [Project1].[Id] DESC ) AS [Limit1]\n    )  AS [Project2]\n    ORDER BY [Project2].[Id] ASC, [Project2].[C1] ASC\n```\n\n\u4eca\u56de\u306e Process \u306e Logs \u306e\u3088\u3046\u306a\u5168\u4ef6\u53d6\u5f97\u306f\u884c\u308f\u306a\u3044\u30b1\u30fc\u30b9\u3067\u306f\u3001virtual \u3092\u5916\u3057\u3066\u9045\u5ef6\u8aad\u307f\u8fbc\u307f\u3092\u3055\u305b\u306a\u3044\u3088\u3046\u306b\u3057\u3088\u3046\u304b\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n", "tags": ["EntityFramework", "C#"]}