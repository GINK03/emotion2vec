{"context": " More than 1 year has passed since last update.\u7b2c11\u56de \u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u3067\u51fa\u984c\u3055\u308c\u305f\u554f\u984c\u306e\u56de\u7b54\u3067\u3059\u3002\n\u4f1a\u5834\u3067\u66f8\u3044\u305f\u305d\u306e\u307e\u307e\u3067\u3059\u300255\u5206\u304f\u3089\u3044\u3067\u3069\u3046\u306b\u304b\u3002\n\ndokaku.hs\nmodule Main where\n\nimport Data.Bits (shift, (.&.))\nimport Data.List (groupBy)\nimport Numeric (readHex)\nimport Test.HUnit (Test(..), runTestTT, (~=?))\n\ntype Problem = [Row]\ntype Row = [(Int, Int)]\ntype Columns = [Column]\ntype Column = Int\n\ninitState :: Columns\ninitState = [0..8]\n\nmain :: IO ()\nmain = print =<< runTestTT (TestList $ map toTest testdata)\n\nsolve :: String -> String\nsolve = writeProblem . foldl go initState . readProblem\n\nreadProblem :: String -> Problem\nreadProblem = map toRow . break'\n\nbreak' :: String -> [String]\nbreak' \"\" = []\nbreak' s = case break (== '-') s of\n  (x, '-':y) -> x : break' y\n  (x, y) -> x : break' y\n\ntoRow :: String -> Row\ntoRow = map (\\l -> (fst $ head l, succ $ fst $ last l)) . filter (snd . head) . groupBy (\\x y -> snd x == snd y) . zip [0..] . toRow'\n\ntoRow' :: String -> [Bool]\ntoRow' s = map (\\m -> (fst (head $ readHex s) .&. m) /= (0 :: Int)) masks\n  where\n    masks = map (shift 1) [7,6..0]\n\ngo :: Columns -> Row -> Columns\ngo c r = foldl go' c r\n\ngo' :: Columns -> (Int, Int) -> Columns\ngo' c (x, y) = map f $ zip [0..] c\n  where\n    f (i, n) | i == x = c !! y\n             | i == y = c !! x\n             | otherwise = n\n\nwriteProblem :: Columns -> String\nwriteProblem = concat . map show\n\n---- unit testing\n\ntoTest :: (String, String) -> Test\ntoTest (input, expected) = expected ~=? solve input\n\ntestdata :: [(String, String)]\ntestdata =\n  [ ( \"d6-7b-e1-9e\", \"740631825\" )\n  , ( \"83-4c-20-10\", \"123805476\" )\n  , ( \"fb-f7-7e-df\", \"274056813\" )\n  , ( \"55-33-0f-ff\", \"123456780\" )\n  , ( \"00-00-00-00\", \"012345678\" )\n  , ( \"00-00-00-55\", \"021436587\" )\n  , ( \"40-10-04-01\", \"021436587\" )\n  , ( \"00-00-aa-00\", \"103254768\" )\n  , ( \"80-20-08-02\", \"103254768\" )\n  , ( \"ff-7e-3c-18\", \"876543210\" )\n  , ( \"aa-55-aa-55\", \"351708264\" )\n  , ( \"55-aa-aa-55\", \"012345678\" )\n  , ( \"db-24-db-e7\", \"812543670\" )\n  , ( \"00-01-00-40\", \"021345687\" )\n  , ( \"00-00-80-00\", \"102345678\" )\n  , ( \"01-40-00-00\", \"021345687\" )\n  , ( \"00-00-00-02\", \"012345768\" )\n  , ( \"00-00-02-00\", \"012345768\" )\n  , ( \"00-14-00-00\", \"012436578\" )\n  , ( \"00-00-01-40\", \"021345687\" )\n  , ( \"00-80-01-00\", \"102345687\" )\n  , ( \"c8-00-00-81\", \"120354687\" )\n  , ( \"05-48-08-14\", \"021435687\" )\n  , ( \"24-05-00-f0\", \"413205687\" )\n  , ( \"40-08-14-01\", \"021536487\" )\n  , ( \"18-c8-80-80\", \"210534678\" )\n  , ( \"1c-88-52-00\", \"120564738\" )\n  , ( \"ec-dc-67-62\", \"213468705\" )\n  , ( \"0a-b6-60-e9\", \"035162784\" )\n  , ( \"52-d6-c6-c2\", \"120345678\" )\n  , ( \"47-e7-b0-36\", \"231047658\" )\n  , ( \"0f-85-91-aa\", \"108263754\" )\n  , ( \"76-b6-ed-f3\", \"601435782\" )\n  , ( \"f5-5e-f7-3d\", \"025847163\" )\n  , ( \"dd-e7-fb-f9\", \"610247538\" )\n  , ( \"8f-f4-af-fd\", \"583246017\" )\n  , ( \"bf-fb-cb-f7\", \"105382674\" )\n  , ( \"e5-fd-ff-ff\", \"512046378\" )\n  , ( \"ef-df-ef-fe\", \"713205648\" )\n  , ( \"bf-7f-fd-d7\", \"826437105\" )\n  , ( \"36-ff-df-de\", \"814527603\" )\n  , ( \"6f-dd-ff-ff\", \"230685147\" )\n  ]\n\n\n[\u7b2c11\u56de \u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f](http://atnd.org/events/38770)\u3067\u51fa\u984c\u3055\u308c\u305f[\u554f\u984c](http://nabetani.sakura.ne.jp/hena/ord11bitamida/)\u306e\u56de\u7b54\u3067\u3059\u3002\n\u4f1a\u5834\u3067\u66f8\u3044\u305f\u305d\u306e\u307e\u307e\u3067\u3059\u300255\u5206\u304f\u3089\u3044\u3067\u3069\u3046\u306b\u304b\u3002\n\n```hs:dokaku.hs \nmodule Main where\n\nimport Data.Bits (shift, (.&.))\nimport Data.List (groupBy)\nimport Numeric (readHex)\nimport Test.HUnit (Test(..), runTestTT, (~=?))\n\ntype Problem = [Row]\ntype Row = [(Int, Int)]\ntype Columns = [Column]\ntype Column = Int\n\ninitState :: Columns\ninitState = [0..8]\n\nmain :: IO ()\nmain = print =<< runTestTT (TestList $ map toTest testdata)\n\nsolve :: String -> String\nsolve = writeProblem . foldl go initState . readProblem\n\nreadProblem :: String -> Problem\nreadProblem = map toRow . break'\n\nbreak' :: String -> [String]\nbreak' \"\" = []\nbreak' s = case break (== '-') s of\n  (x, '-':y) -> x : break' y\n  (x, y) -> x : break' y\n\ntoRow :: String -> Row\ntoRow = map (\\l -> (fst $ head l, succ $ fst $ last l)) . filter (snd . head) . groupBy (\\x y -> snd x == snd y) . zip [0..] . toRow'\n\ntoRow' :: String -> [Bool]\ntoRow' s = map (\\m -> (fst (head $ readHex s) .&. m) /= (0 :: Int)) masks\n  where\n    masks = map (shift 1) [7,6..0]\n\ngo :: Columns -> Row -> Columns\ngo c r = foldl go' c r\n\ngo' :: Columns -> (Int, Int) -> Columns\ngo' c (x, y) = map f $ zip [0..] c\n  where\n    f (i, n) | i == x = c !! y\n             | i == y = c !! x\n             | otherwise = n\n\nwriteProblem :: Columns -> String\nwriteProblem = concat . map show\n\n---- unit testing\n\ntoTest :: (String, String) -> Test\ntoTest (input, expected) = expected ~=? solve input\n\ntestdata :: [(String, String)]\ntestdata =\n  [ ( \"d6-7b-e1-9e\", \"740631825\" )\n  , ( \"83-4c-20-10\", \"123805476\" )\n  , ( \"fb-f7-7e-df\", \"274056813\" )\n  , ( \"55-33-0f-ff\", \"123456780\" )\n  , ( \"00-00-00-00\", \"012345678\" )\n  , ( \"00-00-00-55\", \"021436587\" )\n  , ( \"40-10-04-01\", \"021436587\" )\n  , ( \"00-00-aa-00\", \"103254768\" )\n  , ( \"80-20-08-02\", \"103254768\" )\n  , ( \"ff-7e-3c-18\", \"876543210\" )\n  , ( \"aa-55-aa-55\", \"351708264\" )\n  , ( \"55-aa-aa-55\", \"012345678\" )\n  , ( \"db-24-db-e7\", \"812543670\" )\n  , ( \"00-01-00-40\", \"021345687\" )\n  , ( \"00-00-80-00\", \"102345678\" )\n  , ( \"01-40-00-00\", \"021345687\" )\n  , ( \"00-00-00-02\", \"012345768\" )\n  , ( \"00-00-02-00\", \"012345768\" )\n  , ( \"00-14-00-00\", \"012436578\" )\n  , ( \"00-00-01-40\", \"021345687\" )\n  , ( \"00-80-01-00\", \"102345687\" )\n  , ( \"c8-00-00-81\", \"120354687\" )\n  , ( \"05-48-08-14\", \"021435687\" )\n  , ( \"24-05-00-f0\", \"413205687\" )\n  , ( \"40-08-14-01\", \"021536487\" )\n  , ( \"18-c8-80-80\", \"210534678\" )\n  , ( \"1c-88-52-00\", \"120564738\" )\n  , ( \"ec-dc-67-62\", \"213468705\" )\n  , ( \"0a-b6-60-e9\", \"035162784\" )\n  , ( \"52-d6-c6-c2\", \"120345678\" )\n  , ( \"47-e7-b0-36\", \"231047658\" )\n  , ( \"0f-85-91-aa\", \"108263754\" )\n  , ( \"76-b6-ed-f3\", \"601435782\" )\n  , ( \"f5-5e-f7-3d\", \"025847163\" )\n  , ( \"dd-e7-fb-f9\", \"610247538\" )\n  , ( \"8f-f4-af-fd\", \"583246017\" )\n  , ( \"bf-fb-cb-f7\", \"105382674\" )\n  , ( \"e5-fd-ff-ff\", \"512046378\" )\n  , ( \"ef-df-ef-fe\", \"713205648\" )\n  , ( \"bf-7f-fd-d7\", \"826437105\" )\n  , ( \"36-ff-df-de\", \"814527603\" )\n  , ( \"6f-dd-ff-ff\", \"230685147\" )\n  ]\n```", "tags": ["yhpg", "Haskell", "\u3069\u3046\u66f8\u304f"]}