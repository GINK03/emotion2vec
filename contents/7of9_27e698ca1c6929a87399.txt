{"context": "MicroZed Chronicles \u30ea\u30b9\u30c8 http://adiuvoengineering.com/?page_id=285\n@ Adam Taylor blog\nhttps://forums.xilinx.com/t5/Xcell-Daily-Blog/Implementing-the-Zynq-SoC-s-Private-Timer-Adam-Taylor-s-MicroZed/ba-p/402203\n\u4f8b\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u632f\u821e\u3044\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\n\nIn this example, the timer will be loaded and will start running when the button is pressed. (Note: the timer will not be run in auto-reload mode). The timer will generate an interrupt when the preset timer countdown value reaches zero. The resulting interrupt triggers output of a message out over STDOUT and the interrupt will then be cleared to await the next button press.\n\n\u95a2\u9023\u3059\u308b\u90e8\u5206\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u3060\u3002\n#define TIMER_LOAD_VALUE      0xFFFFFFFF\n\n...\n\n//timer initialization\nTMRConfigPtr = XScuTimer_LookupConfig(TIMER_DEVICE_ID);\nXScuTimer_CfgInitialize(&Timer, TMRConfigPtr,TMRConfigPtr->BaseAddr);\nXScuTimer_SelfTest(&Timer);\n//load the timer\nXScuTimer_LoadTimer(&Timer, TIMER_LOAD_VALUE);\n\n...\n\n//set up the timer interrupt\nXScuGic_Connect(GicInstancePtr, TimerIntrId,\n               (Xil_ExceptionHandler)TimerIntrHandler,\n               (void *)TimerInstancePtr);\n//enable the interrupt for the Timer at GIC\nXScuGic_Enable(GicInstancePtr, TimerIntrId);\n//enable interrupt on the timer\nXScuTimer_EnableInterrupt(TimerInstancePtr);\n\n...\n\nstatic void TimerIntrHandler(void *CallBackRef)\n{\n\n      XScuTimer *TimerInstancePtr = (XScuTimer *) CallBackRef;\n      XScuTimer_ClearInterruptStatus(TimerInstancePtr);\n      printf(\"****Timer Event!!!!!!!!!!!!!****\\n\\r\");\n\n}\n\n...\n\n//load timer\nXScuTimer_LoadTimer(&Timer, TIMER_LOAD_VALUE);\n//start timer\nXScuTimer_Start(&Timer);\n\n\n\u4e0a\u8a18\u306e\u3046\u3061\u3067\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3082\u306e\u306e\u3046\u3061\u3001\u30d6\u30ed\u30b0\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\uff08\u304a\u305d\u3089\u304f\u52d5\u304f\u3067\u3042\u308d\u3046\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\uff09\u304b\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6574\u7406\u3057\u305f\u3002\n\nTIMER_DEVICE_ID\n\n\n#define TIMER_DEVICE_ID XPAR_XSCUTIMER_0_DEVICE_ID\n\n\n& Timer\u306eTimer\n\n\nstatic XScuTimer Timer;//timer\n\n\nGicInstancePtr\n\n\nstatic XScuGic Intc; //GIC\nstatic void SetupInterruptSystem(XScuGic *GicInstancePtr, XGpioPs *Gpio, u16 GpioIntrId, ...\nSetupInterruptSystem(&Intc, &Gpio, ...\n\n\nTimerIntrId\n\n\n#define TIMER_IRPT_INTR XPAR_SCUTIMER_INTR\n\n\nTimerInstancePtr\n\n\n&Timer\nstatic XScuTimer Timer;//timer\n\n\n\nMicroZed Chronicles \u30ea\u30b9\u30c8 http://adiuvoengineering.com/?page_id=285\n@ Adam Taylor blog\nhttps://forums.xilinx.com/t5/Xcell-Daily-Blog/Implementing-the-Zynq-SoC-s-Private-Timer-Adam-Taylor-s-MicroZed/ba-p/402203\n\n\u4f8b\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u632f\u821e\u3044\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\n\n> In this example, the timer will be loaded and will start running when the button is pressed. (Note: the timer will not be run in auto-reload mode). The timer will generate an interrupt when the preset timer countdown value reaches zero. The resulting interrupt triggers output of a message out over STDOUT and the interrupt will then be cleared to await the next button press.\n \n\n\u95a2\u9023\u3059\u308b\u90e8\u5206\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u3060\u3002\n\n```.c\n#define TIMER_LOAD_VALUE      0xFFFFFFFF\n\n...\n  \n//timer initialization\nTMRConfigPtr = XScuTimer_LookupConfig(TIMER_DEVICE_ID);\nXScuTimer_CfgInitialize(&Timer, TMRConfigPtr,TMRConfigPtr->BaseAddr);\nXScuTimer_SelfTest(&Timer);\n//load the timer\nXScuTimer_LoadTimer(&Timer, TIMER_LOAD_VALUE);\n\n...\n \n//set up the timer interrupt\nXScuGic_Connect(GicInstancePtr, TimerIntrId,\n               (Xil_ExceptionHandler)TimerIntrHandler,\n               (void *)TimerInstancePtr);\n//enable the interrupt for the Timer at GIC\nXScuGic_Enable(GicInstancePtr, TimerIntrId);\n//enable interrupt on the timer\nXScuTimer_EnableInterrupt(TimerInstancePtr);\n\n...\n\nstatic void TimerIntrHandler(void *CallBackRef)\n{\n \n      XScuTimer *TimerInstancePtr = (XScuTimer *) CallBackRef;\n      XScuTimer_ClearInterruptStatus(TimerInstancePtr);\n      printf(\"****Timer Event!!!!!!!!!!!!!****\\n\\r\");\n     \n}\n\n...\n\n//load timer\nXScuTimer_LoadTimer(&Timer, TIMER_LOAD_VALUE);\n//start timer\nXScuTimer_Start(&Timer);\n\n```\n\n\u4e0a\u8a18\u306e\u3046\u3061\u3067\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u3082\u306e\u306e\u3046\u3061\u3001\u30d6\u30ed\u30b0\u306b\u63b2\u8f09\u3055\u308c\u3066\u3044\u308b\uff08\u304a\u305d\u3089\u304f\u52d5\u304f\u3067\u3042\u308d\u3046\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\uff09\u304b\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6574\u7406\u3057\u305f\u3002\n\n- TIMER_DEVICE_ID\n  - #define TIMER_DEVICE_ID XPAR_XSCUTIMER_0_DEVICE_ID\n- & Timer\u306eTimer\n  - static XScuTimer Timer;//timer\n- GicInstancePtr\n  - static XScuGic Intc; //GIC\n  - static void SetupInterruptSystem(XScuGic *GicInstancePtr, XGpioPs *Gpio, u16 GpioIntrId, ...\n  - SetupInterruptSystem(&Intc, &Gpio, ...\n- TimerIntrId\n  - #define TIMER_IRPT_INTR XPAR_SCUTIMER_INTR\n- TimerInstancePtr\n  - &Timer\n  - static XScuTimer Timer;//timer\n", "tags": ["adamTaylor"]}