{"tags": ["Fortran2003"], "context": " More than 1 year has passed since last update.\n\n\u30af\u30a4\u30c3\u30af\u30fb\u30bd\u30fc\u30c8\n\u518d\u5e30\u306e\u4f8b\u984c\u3068\u3057\u3066\u3088\u304f\u4f7f\u308f\u308c\u308b quick sort \u3067\u3059\u3002Fortran90 \u3067\u5c0e\u5165\u3055\u308c\u305f pack \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u7c21\u5358\u306b\u66f8\u3051\u308b\u3053\u3068\u304c\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002pack \u306f\u30d5\u30a3\u30eb\u30bf\u30fc\u95a2\u6570\u306b\u5f53\u305f\u308a\u307e\u3059\u3002\n\u4e00\u822c\u306b\u306f\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u4f8b\u984c\u3067\u51fa\u3066\u304f\u308b\u3088\u3046\u306b\u3001\nres = [pack(x(2:), x(2:) <= x(1)), x(1), pack(x(2:), x(2:) > x(1))]\n\n\u3068\u3044\u3046\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f <,=,> \u306e\u4e09\u3064\u306e\u5834\u5408\u306b\u5206\u3051\u308b\u5f62\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u5024\u306e\u7e2e\u9000\u304c\u591a\u3044\u5834\u5408\u306b\u6709\u5229\u306b\u306a\u308a\u307e\u3059\u3002\n\u30af\u30a4\u30c3\u30af\u30fb\u30bd\u30fc\u30c8\u306f\u518d\u5e30\u3067\u30b9\u30bf\u30c3\u30af\u9818\u57df\u3092\u5927\u91cf\u306b\u6d88\u8cbb\u3059\u308b\u306e\u3067\u3001\u30ea\u30f3\u30ab\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30b9\u30bf\u30c3\u30af\u3092\u5897\u3084\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u307e\u305f intel fortran \u3067\u306f Fortran2003 semantics \u3092\u6709\u52b9\u306b\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n    module m_sort\n      implicit none\n    contains  \n      recursive function iqsort(ix) result(ires)\n        integer, allocatable :: ires(:)\n        integer, intent(in)  :: ix(:)\n        integer :: k\n        if (size(ix) <= 1) then \n          ires = ix\n        else  \n          k = ix(size(ix) / 2)\n          ires = [iqsort(pack(ix, ix < k)), pack(ix, ix == k), iqsort(pack(ix, ix > k))] \n        end if\n      end function iqsort  \n    end module m_sort  \n\n    program qsort\n      use m_sort\n      implicit none\n      integer :: n = 10**7\n      integer, allocatable :: ix(:), iy(:)\n      real, allocatable :: x(:)\n      allocate( x(n) )\n      call random_seed()\n      call random_number(x)\n      ix = x * 10**6\n      iy = iqsort(ix)\n      print *, all(iy(1:n - 1) <= iy(2:)), count(iy(1:n - 1) == iy(2:))\n    end program qsort\n\n\n\u5b9f\u884c\u7d50\u679c\n T 9000046\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n\n##\u30af\u30a4\u30c3\u30af\u30fb\u30bd\u30fc\u30c8\n\u518d\u5e30\u306e\u4f8b\u984c\u3068\u3057\u3066\u3088\u304f\u4f7f\u308f\u308c\u308b quick sort \u3067\u3059\u3002Fortran90 \u3067\u5c0e\u5165\u3055\u308c\u305f pack \u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u7c21\u5358\u306b\u66f8\u3051\u308b\u3053\u3068\u304c\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002pack \u306f\u30d5\u30a3\u30eb\u30bf\u30fc\u95a2\u6570\u306b\u5f53\u305f\u308a\u307e\u3059\u3002\n\n\u4e00\u822c\u306b\u306f\u95a2\u6570\u578b\u8a00\u8a9e\u306e\u4f8b\u984c\u3067\u51fa\u3066\u304f\u308b\u3088\u3046\u306b\u3001\n\n```fortran\nres = [pack(x(2:), x(2:) <= x(1)), x(1), pack(x(2:), x(2:) > x(1))]\n```\n\u3068\u3044\u3046\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306f <,=,> \u306e\u4e09\u3064\u306e\u5834\u5408\u306b\u5206\u3051\u308b\u5f62\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u5024\u306e\u7e2e\u9000\u304c\u591a\u3044\u5834\u5408\u306b\u6709\u5229\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30af\u30a4\u30c3\u30af\u30fb\u30bd\u30fc\u30c8\u306f\u518d\u5e30\u3067\u30b9\u30bf\u30c3\u30af\u9818\u57df\u3092\u5927\u91cf\u306b\u6d88\u8cbb\u3059\u308b\u306e\u3067\u3001\u30ea\u30f3\u30ab\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30b9\u30bf\u30c3\u30af\u3092\u5897\u3084\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u307e\u305f intel fortran \u3067\u306f Fortran2003 semantics \u3092\u6709\u52b9\u306b\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n##\u30d7\u30ed\u30b0\u30e9\u30e0\n```fortran\n    module m_sort\n      implicit none\n    contains  \n      recursive function iqsort(ix) result(ires)\n        integer, allocatable :: ires(:)\n        integer, intent(in)  :: ix(:)\n        integer :: k\n        if (size(ix) <= 1) then \n          ires = ix\n        else  \n          k = ix(size(ix) / 2)\n          ires = [iqsort(pack(ix, ix < k)), pack(ix, ix == k), iqsort(pack(ix, ix > k))] \n        end if\n      end function iqsort  \n    end module m_sort  \n\n    program qsort\n      use m_sort\n      implicit none\n      integer :: n = 10**7\n      integer, allocatable :: ix(:), iy(:)\n      real, allocatable :: x(:)\n      allocate( x(n) )\n      call random_seed()\n      call random_number(x)\n      ix = x * 10**6\n      iy = iqsort(ix)\n      print *, all(iy(1:n - 1) <= iy(2:)), count(iy(1:n - 1) == iy(2:))\n    end program qsort\n```\n###\u5b9f\u884c\u7d50\u679c\n```\n T 9000046\n\u7d9a\u884c\u3059\u308b\u306b\u306f\u4f55\u304b\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044 . . .\n```\n"}