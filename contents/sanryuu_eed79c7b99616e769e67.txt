{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nEmacsLisp\u3067http\u30a2\u30af\u30bb\u30b9\u3092\u3059\u308b\u95a2\u6570\u3092\u826f\u304f\u63a2\u3059\u306e\u3067EmacsWiki\u306eUrlPackage\u3092\u4e00\u90e8\u6539\u826f\u3057\u305f\u3082\u306e\u3092\u6b8b\u3057\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\nPOST\n\n\u5b9a\u7fa9\n\n\u5f15\u6570 url \u30a2\u30af\u30bb\u30b9\u5148\u306eURL\n\u5f15\u6570 args \u9001\u4fe1\u3059\u308bPOST\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\n\u8fd4\u308a\u5024 \u30ec\u30b9\u30dd\u30f3\u30b9body\u306e\u6587\u5b57\u5217\n\n(defun url-http-post (url args)\n  \"Send ARGS to URL as a POST request.\"\n  (let (\n        (response-string nil)\n        (url-request-method \"POST\")\n        (url-request-extra-headers\n         '((\"Content-Type\" . \"application/x-www-form-urlencoded\")))\n        (url-request-data\n         (mapconcat (lambda (arg)\n                      (concat (url-hexify-string (car arg))\n                              \"=\"\n                              (url-hexify-string (cdr arg))))\n                    args\n                    \"&\")))\n    (switch-to-buffer\n     (url-retrieve-synchronously url))\n    (goto-char (point-min))\n    (re-search-forward \"\\n\\n\")\n    (setq response-string\n          (buffer-substring-no-properties (point) (point-max)))\n    (kill-buffer (current-buffer))\n    response-string))\n\n\n\u4f7f\u7528\u4f8b\n(url-http-post \"http://example.com/post.php\"  '((\"hoge\" . \"fuga\") (\"piyo\" . \"1\"))) ;; => \"[{\\\"hoge\\\":\\\"fuga\\\"},{\\\"piyo\\\":\\\"1\\\"}]\"\n\n\nGET\n\n\u5b9a\u7fa9\n\n\u5f15\u6570 url \u30a2\u30af\u30bb\u30b9\u5148\u306eURL\n\u5f15\u6570 args \u9001\u4fe1\u3059\u308bGET\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\n\u8fd4\u308a\u5024 \u30ec\u30b9\u30dd\u30f3\u30b9body\u306e\u6587\u5b57\u5217\n\n(defun url-http-get (url args)\n  \"Send ARGS to URL as a GET request.\"\n  (let (\n        (response-string nil)\n        (url-request-method \"GET\")\n        (url-request-data\n         (mapconcat (lambda (arg)\n                      (concat (url-hexify-string (car arg))\n                              \"=\"\n                              (url-hexify-string (cdr arg))))\n                    args\n                    \"&\")))\n    (switch-to-buffer\n     (url-retrieve-synchronously\n      (concat url \"?\" url-request-data)))\n    (goto-char (point-min))\n    (re-search-forward \"\\n\\n\")\n    (setq response-string\n          (buffer-substring-no-properties\n           (point) (point-max)))\n    (kill-buffer (current-buffer))\n    response-string))\n\n\n\u4f7f\u7528\u4f8b\n(url-http-get \"http://example.com/get.php\" '((\"hoge\" . \"fuga\") (\"piyo\" . \"1\")))  ;; => \"[{\\\"hoge\\\":\\\"fuga\\\"},{\\\"piyo\\\":\\\"1\\\"}]\"\n\n\n\u53c2\u8003\nhttp://www.emacswiki.org/UrlPackage\n\n# \u6982\u8981\n\nEmacsLisp\u3067http\u30a2\u30af\u30bb\u30b9\u3092\u3059\u308b\u95a2\u6570\u3092\u826f\u304f\u63a2\u3059\u306e\u3067EmacsWiki\u306eUrlPackage\u3092\u4e00\u90e8\u6539\u826f\u3057\u305f\u3082\u306e\u3092\u6b8b\u3057\u307e\u3059\u3002\n\n# \u30b3\u30fc\u30c9\n## POST\n### \u5b9a\u7fa9\n\n+ \u5f15\u6570 url \u30a2\u30af\u30bb\u30b9\u5148\u306eURL\n+ \u5f15\u6570 args \u9001\u4fe1\u3059\u308bPOST\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\n+ \u8fd4\u308a\u5024 \u30ec\u30b9\u30dd\u30f3\u30b9body\u306e\u6587\u5b57\u5217\n\n```el\n(defun url-http-post (url args)\n  \"Send ARGS to URL as a POST request.\"\n  (let (\n        (response-string nil)\n        (url-request-method \"POST\")\n        (url-request-extra-headers\n         '((\"Content-Type\" . \"application/x-www-form-urlencoded\")))\n        (url-request-data\n         (mapconcat (lambda (arg)\n                      (concat (url-hexify-string (car arg))\n                              \"=\"\n                              (url-hexify-string (cdr arg))))\n                    args\n                    \"&\")))\n    (switch-to-buffer\n     (url-retrieve-synchronously url))\n    (goto-char (point-min))\n    (re-search-forward \"\\n\\n\")\n    (setq response-string\n          (buffer-substring-no-properties (point) (point-max)))\n    (kill-buffer (current-buffer))\n    response-string))\n```\n\n### \u4f7f\u7528\u4f8b\n\n```el\n(url-http-post \"http://example.com/post.php\"  '((\"hoge\" . \"fuga\") (\"piyo\" . \"1\"))) ;; => \"[{\\\"hoge\\\":\\\"fuga\\\"},{\\\"piyo\\\":\\\"1\\\"}]\"\n```\n\n## GET\n\n### \u5b9a\u7fa9\n\n+ \u5f15\u6570 url \u30a2\u30af\u30bb\u30b9\u5148\u306eURL\n+ \u5f15\u6570 args \u9001\u4fe1\u3059\u308bGET\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30ea\u30b9\u30c8\n+ \u8fd4\u308a\u5024 \u30ec\u30b9\u30dd\u30f3\u30b9body\u306e\u6587\u5b57\u5217\n\n```el\n(defun url-http-get (url args)\n  \"Send ARGS to URL as a GET request.\"\n  (let (\n        (response-string nil)\n        (url-request-method \"GET\")\n        (url-request-data\n         (mapconcat (lambda (arg)\n                      (concat (url-hexify-string (car arg))\n                              \"=\"\n                              (url-hexify-string (cdr arg))))\n                    args\n                    \"&\")))\n    (switch-to-buffer\n     (url-retrieve-synchronously\n      (concat url \"?\" url-request-data)))\n    (goto-char (point-min))\n    (re-search-forward \"\\n\\n\")\n    (setq response-string\n          (buffer-substring-no-properties\n           (point) (point-max)))\n    (kill-buffer (current-buffer))\n    response-string))\n```\n\n### \u4f7f\u7528\u4f8b\n\n```el\n(url-http-get \"http://example.com/get.php\" '((\"hoge\" . \"fuga\") (\"piyo\" . \"1\")))  ;; => \"[{\\\"hoge\\\":\\\"fuga\\\"},{\\\"piyo\\\":\\\"1\\\"}]\"\n```\n\n# \u53c2\u8003\n\nhttp://www.emacswiki.org/UrlPackage\n", "tags": ["emacs-lisp", "Emacs"]}