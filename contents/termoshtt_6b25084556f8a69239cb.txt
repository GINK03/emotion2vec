{"context": " More than 1 year has passed since last update.Trivial\u306aBoost.Log\u306e\u4f7f\u3044\u65b9\u3092\u8d85\u3048\u308b\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u9577\u304f\u306a\u308b\u306e\u3067\u8907\u6570\u56de\u306b\u5206\u3051\u307e\u3059\u3002\n\n\u6982\u7565\n\u30ed\u30b0\u306e\u53ce\u96c6\n\u30ed\u30b0\u306e\u51fa\u529b\ncmake\u306b\u3088\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\nchannel\u306e\u6271\u3044\n\n\u4eca\u56de\u306f\u30ed\u30b0\u306e\u51fa\u529b\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\n\u72b6\u6cc1\u8a2d\u5b9a\n\u524d\u56de\u3068\u540c\u69d8\u4ee5\u4e0b\u306e\u72b6\u6cc1\u3092\u8003\u3048\u307e\u3059\u3002\nCMakeLists.txt\nmod1/CMakeLists.txt\n     func.hpp\n     func1.cpp\n     func2.cpp\n     logger.cpp\nclient.cpp\n\n\u3042\u308b\u30e2\u30b8\u30e5\u30fc\u30ebmod1\u3092client.cpp\u304b\u3089\u4f7f\u3046\u5834\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n\u307e\u305f\u5168\u3066cmake\u3092\u4f7f\u7528\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\u5c1a\u6587\u7ae0\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u7565\u3057\u305fnamespace\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a\nnamespace logging = boost::log;\nnamespace keywords = logging::keywords;\nnamespace sinks = logging::sinks;\nnamespace src = logging::sources;\nnamespace attrs = logging::attributes;\nnamespace expr = logging::expressions;\n\n\u307e\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306ftermoshtt/boost_log_sample\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u51fa\u529b\u3084\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u8a2d\u5b9a\n\u4e0a\u8ff0\u306e\u65b9\u6cd5\u3067\u53ce\u96c6\u3057\u305f\u30ed\u30b0\u3092\u51fa\u529b\u3057\u307e\u3057\u3087\u3046\u3002\n\nclient.cpp\nvoid init() {\n  mod1::init();\n  logging::add_common_attributes();\n  logging::add_file_log(\n      keywords::file_name = \"client.log\", // log\u3092\u51fa\u529b\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\n      keywords::format =\n          \"%Tag%: [%TimeStamp%] [%Scope%] %Message%\" // log\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n      );\n}\n\nint main(int argc, char const *argv[]) {\n  init();\n  mod1::func1(true);\n  mod1::func1(false);\n  return 0;\n}\n\n\nadd_common_attributes()\u306f\u30b3\u30a2\u306b\u6a19\u6e96\u306e\u5c5e\u6027\n(TimeStamp, LineID, ThreadID, ProcessID)\u3092\u8a18\u9332\u3059\u308b\u69d8\u306b\u547d\u4ee4\u3057\u307e\u3059\u3002\n\u4e0a\u3067logger\u306b\u5bfe\u3057\u3066\"Tag\"\u3084\"Scope\"\u3092\u8a18\u9332\u3059\u308b\u3088\u3046\u306b\u547d\u4ee4\u3057\u305f\u306e\u3068\u540c\u3058\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u304c\u3001\n\u3053\u3061\u3089\u306f\u5168\u3066\u306e\u30ed\u30b0\u306b\u5bfe\u3057\u3066\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\nadd_file_log()\u3067\u30d5\u30a1\u30a4\u30eb\u3078\u51fa\u529b\u3059\u308bsink\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4e0a\u306e\u56f3\u306e\u3088\u3046\u306b\u53ce\u96c6\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30ed\u30b0\u304c\u3053\u306esink\u306b\u6d41\u308c\u3053\u307f\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u51fa\u529b\u306e\u5f62\u5f0f\u306fkeywords::format\u3067\u8abf\u6574\u3055\u308c\u307e\u3059\u3002\n%...%\u304c\u5c55\u958b\u3055\u308c\u308b\u4e8b\u3067\u3001\u51fa\u529b\u306f\n\nclient.log\nmod1: [2015-Mar-04 01:38:57.711251] [void mod1::func1(bool)->true case] flag is true\nmod1: [2015-Mar-04 01:38:57.711620] [void mod1::func1(bool)] Some error occurs!!\nmod1: [2015-Mar-04 01:38:57.711667] [void mod1::func1(bool)->false case] flag is false\nmod1: [2015-Mar-04 01:38:57.711698] [void mod1::func1(bool)] Some error occurs!!\n\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nplaceholder\u306e\u8a2d\u5b9a\n\u4e0a\u3067\u306f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092%...%\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u751f\u6210\u3057\u307e\u3057\u305f\u304c\u3001\nC++\u7684\u306astream\u3092\u4f7f\u7528\u3059\u308b\u4e8b\u3082\u3067\u304d\u307e\u3059\u3002\n\u6587\u5b57\u5217\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5834\u5408\u306e\"Tag\", \"Scope\"\u7b49\u306e\u540d\u524d\u306f\u5b9a\u7fa9\u6642\u306b\u6307\u5b9a\u3055\u308c\u307e\u3057\u305f\nlg.add_attribute(\"Tag\", attrs::constant<std::string>(\"mod1\"));\nlg.add_attribute(\"Scope\", attrs::named_scope());\n\nstream\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u307e\u305a\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5074\u3067placeholder\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nmod1/func.hpp\nnamespace mod1 {\nBOOST_LOG_ATTRIBUTE_KEYWORD(line_id, \"LineID\", unsigned int)\nBOOST_LOG_ATTRIBUTE_KEYWORD(severity, \"Severity\", severity_level)\nBOOST_LOG_ATTRIBUTE_KEYWORD(tag_attr, \"Tag\", std::string)\nBOOST_LOG_ATTRIBUTE_KEYWORD(scope, \"Scope\", attrs::named_scope::value_type)\n} // namespace mod1\n\n\ntag_attr, scope\u7b49\u304cplaceholder\u306b\u306a\u308a\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u5074\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059:\n\nclient.cpp\nvoid init() {\n  mod1::init();\n  logging::add_common_attributes();\n  logging::add_file_log(\n      keywords::file_name = \"client.log\",\n      keywords::format = \"%Tag%: [%TimeStamp%] [%Scope%] %Message%\"\n      );\n  logging::add_file_log(\n    keywords::file_name = \"stream_format.log\",\n    keywords::format = (expr::stream << mod1::tag_attr << mod1::line_id\n                                     << \": <\" << mod1::severity << \"> [\"\n                                     << mod1::scope << \"] \"\n                                     << expr::smessage));\n}\n\n\n\u3053\u306e\u5834\u5408\u306ekeywords::format\u306b\u306fplaceholder\u306b\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30e9\u30e0\u30c0\u5f0f\u304c\u5165\u308a\u307e\u3059\u304c\u3001\n\u898b\u305f\u76ee\u7684\u306b\u6319\u52d5\u306f\u7406\u89e3\u3057\u3066\u9802\u3051\u308b\u3067\u3057\u3087\u3046\u3002\n\u3053\u306e\u5834\u5408\u306e<<\u306foperator<<(std::ostream&, T)\u304c\u547c\u3070\u308c\u307e\u3059\u306e\u3067\u3001\n\nmod1/func.hpp\nnamespace mod1 {\nenum severity_level { debug, info, warning, error, critical };\nstd::ostream &operator<<(std::ostream &ost, severity_level l);\n} // namespace mod1\n\n\n\u306e\u3088\u3046\u306b\u3042\u3089\u304b\u3058\u3081\u51fa\u529b\u3092\u8abf\u6574\u3057\u3066\u304a\u304f\u4e8b\u304c\u53ef\u80fd\u3067\u3059\u3002\nBoost.Log\u306f\u591a\u6570\u306e\u51fa\u529b\u306e\u8a2d\u5b9a\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\nLog record formatting\n\n\n\u307e\u3068\u3081\n\u3053\u308c\u307e\u3067\u3067\u30ed\u30b0\u306e\u53ce\u96c6\u3068\u51fa\u529b\u306e\u65b9\u6cd5\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\u3053\u308c\u3067trivial\u306a\u30ed\u30b0\u306b\u6bd4\u3079\u683c\u6bb5\u306b\u81ea\u7531\u5ea6\u304c\u9ad8\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u6b21\u56de\u306fcmake\u306b\u3088\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3059\u3002\n\nTrivial\u306aBoost.Log\u306e\u4f7f\u3044\u65b9\u3092\u8d85\u3048\u308b\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u9577\u304f\u306a\u308b\u306e\u3067\u8907\u6570\u56de\u306b\u5206\u3051\u307e\u3059\u3002\n\n0. \u6982\u7565\n1. \u30ed\u30b0\u306e\u53ce\u96c6\n2. \u30ed\u30b0\u306e\u51fa\u529b\n3. cmake\u306b\u3088\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\n4. channel\u306e\u6271\u3044\n\n\u4eca\u56de\u306f\u30ed\u30b0\u306e\u51fa\u529b\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\n# \u72b6\u6cc1\u8a2d\u5b9a\n\n\u524d\u56de\u3068\u540c\u69d8\u4ee5\u4e0b\u306e\u72b6\u6cc1\u3092\u8003\u3048\u307e\u3059\u3002\n\n```\nCMakeLists.txt\nmod1/CMakeLists.txt\n     func.hpp\n     func1.cpp\n     func2.cpp\n     logger.cpp\nclient.cpp\n```\n\n\u3042\u308b\u30e2\u30b8\u30e5\u30fc\u30eb`mod1`\u3092`client.cpp`\u304b\u3089\u4f7f\u3046\u5834\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n\u307e\u305f\u5168\u3066cmake\u3092\u4f7f\u7528\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\n\u5c1a\u6587\u7ae0\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u7565\u3057\u305fnamespace\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a\n\n```cpp\nnamespace logging = boost::log;\nnamespace keywords = logging::keywords;\nnamespace sinks = logging::sinks;\nnamespace src = logging::sources;\nnamespace attrs = logging::attributes;\nnamespace expr = logging::expressions;\n```\n\n\u307e\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f[termoshtt/boost_log_sample](https://github.com/termoshtt/boost_log_sample)\u306b\u3042\u308a\u307e\u3059\u3002\n\n# \u51fa\u529b\u3084\u30d5\u30a3\u30eb\u30bf\u30fc\u306e\u8a2d\u5b9a\n\n\u4e0a\u8ff0\u306e\u65b9\u6cd5\u3067\u53ce\u96c6\u3057\u305f\u30ed\u30b0\u3092\u51fa\u529b\u3057\u307e\u3057\u3087\u3046\u3002\n\n```cpp:client.cpp\nvoid init() {\n  mod1::init();\n  logging::add_common_attributes();\n  logging::add_file_log(\n      keywords::file_name = \"client.log\", // log\u3092\u51fa\u529b\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\n      keywords::format =\n          \"%Tag%: [%TimeStamp%] [%Scope%] %Message%\" // log\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n      );\n}\n\nint main(int argc, char const *argv[]) {\n  init();\n  mod1::func1(true);\n  mod1::func1(false);\n  return 0;\n}\n```\n\n`add_common_attributes()`\u306f\u30b3\u30a2\u306b\u6a19\u6e96\u306e\u5c5e\u6027\n(TimeStamp, LineID, ThreadID, ProcessID)\u3092\u8a18\u9332\u3059\u308b\u69d8\u306b\u547d\u4ee4\u3057\u307e\u3059\u3002\n\u4e0a\u3067logger\u306b\u5bfe\u3057\u3066\"Tag\"\u3084\"Scope\"\u3092\u8a18\u9332\u3059\u308b\u3088\u3046\u306b\u547d\u4ee4\u3057\u305f\u306e\u3068\u540c\u3058\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u304c\u3001\n\u3053\u3061\u3089\u306f\u5168\u3066\u306e\u30ed\u30b0\u306b\u5bfe\u3057\u3066\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\n\n`add_file_log()`\u3067\u30d5\u30a1\u30a4\u30eb\u3078\u51fa\u529b\u3059\u308bsink\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4e0a\u306e\u56f3\u306e\u3088\u3046\u306b\u53ce\u96c6\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30ed\u30b0\u304c\u3053\u306esink\u306b\u6d41\u308c\u3053\u307f\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u3078\u306e\u51fa\u529b\u306e\u5f62\u5f0f\u306f`keywords::format`\u3067\u8abf\u6574\u3055\u308c\u307e\u3059\u3002\n`%...%`\u304c\u5c55\u958b\u3055\u308c\u308b\u4e8b\u3067\u3001\u51fa\u529b\u306f\n\n```console:client.log\nmod1: [2015-Mar-04 01:38:57.711251] [void mod1::func1(bool)->true case] flag is true\nmod1: [2015-Mar-04 01:38:57.711620] [void mod1::func1(bool)] Some error occurs!!\nmod1: [2015-Mar-04 01:38:57.711667] [void mod1::func1(bool)->false case] flag is false\nmod1: [2015-Mar-04 01:38:57.711698] [void mod1::func1(bool)] Some error occurs!!\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n# placeholder\u306e\u8a2d\u5b9a\n\n\u4e0a\u3067\u306f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092`%...%`\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u751f\u6210\u3057\u307e\u3057\u305f\u304c\u3001\nC++\u7684\u306astream\u3092\u4f7f\u7528\u3059\u308b\u4e8b\u3082\u3067\u304d\u307e\u3059\u3002\n\u6587\u5b57\u5217\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5834\u5408\u306e\"Tag\", \"Scope\"\u7b49\u306e\u540d\u524d\u306f\u5b9a\u7fa9\u6642\u306b\u6307\u5b9a\u3055\u308c\u307e\u3057\u305f\n\n```cpp\nlg.add_attribute(\"Tag\", attrs::constant<std::string>(\"mod1\"));\nlg.add_attribute(\"Scope\", attrs::named_scope());\n```\n\nstream\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u307e\u305a\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5074\u3067placeholder\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```cpp:mod1/func.hpp\nnamespace mod1 {\nBOOST_LOG_ATTRIBUTE_KEYWORD(line_id, \"LineID\", unsigned int)\nBOOST_LOG_ATTRIBUTE_KEYWORD(severity, \"Severity\", severity_level)\nBOOST_LOG_ATTRIBUTE_KEYWORD(tag_attr, \"Tag\", std::string)\nBOOST_LOG_ATTRIBUTE_KEYWORD(scope, \"Scope\", attrs::named_scope::value_type)\n} // namespace mod1\n```\n\n`tag_attr`, `scope`\u7b49\u304cplaceholder\u306b\u306a\u308a\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u5074\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059:\n\n```cpp:client.cpp\nvoid init() {\n  mod1::init();\n  logging::add_common_attributes();\n  logging::add_file_log(\n      keywords::file_name = \"client.log\",\n      keywords::format = \"%Tag%: [%TimeStamp%] [%Scope%] %Message%\"\n      );\n  logging::add_file_log(\n    keywords::file_name = \"stream_format.log\",\n    keywords::format = (expr::stream << mod1::tag_attr << mod1::line_id\n                                     << \": <\" << mod1::severity << \"> [\"\n                                     << mod1::scope << \"] \"\n                                     << expr::smessage));\n}\n```\n\n\u3053\u306e\u5834\u5408\u306e`keywords::format`\u306b\u306fplaceholder\u306b\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u30e9\u30e0\u30c0\u5f0f\u304c\u5165\u308a\u307e\u3059\u304c\u3001\n\u898b\u305f\u76ee\u7684\u306b\u6319\u52d5\u306f\u7406\u89e3\u3057\u3066\u9802\u3051\u308b\u3067\u3057\u3087\u3046\u3002\n\u3053\u306e\u5834\u5408\u306e`<<`\u306f`operator<<(std::ostream&, T)`\u304c\u547c\u3070\u308c\u307e\u3059\u306e\u3067\u3001\n\n```cpp:mod1/func.hpp\nnamespace mod1 {\nenum severity_level { debug, info, warning, error, critical };\nstd::ostream &operator<<(std::ostream &ost, severity_level l);\n} // namespace mod1\n```\n\n\u306e\u3088\u3046\u306b\u3042\u3089\u304b\u3058\u3081\u51fa\u529b\u3092\u8abf\u6574\u3057\u3066\u304a\u304f\u4e8b\u304c\u53ef\u80fd\u3067\u3059\u3002\n\nBoost.Log\u306f\u591a\u6570\u306e\u51fa\u529b\u306e\u8a2d\u5b9a\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\n- [Log record formatting](http://www.boost.org/doc/libs/1_57_0/libs/log/doc/html/log/tutorial/formatters.html)\n\n\n# \u307e\u3068\u3081\n\u3053\u308c\u307e\u3067\u3067\u30ed\u30b0\u306e\u53ce\u96c6\u3068\u51fa\u529b\u306e\u65b9\u6cd5\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\u3053\u308c\u3067trivial\u306a\u30ed\u30b0\u306b\u6bd4\u3079\u683c\u6bb5\u306b\u81ea\u7531\u5ea6\u304c\u9ad8\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u6b21\u56de\u306fcmake\u306b\u3088\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u65b9\u6cd5\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u307e\u3059\u3002\n", "tags": ["C++", "boost1.54", "Boost.Log"]}