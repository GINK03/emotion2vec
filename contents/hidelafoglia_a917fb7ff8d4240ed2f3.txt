{"tags": ["Django"], "context": " More than 1 year has passed since last update.\u30b3\u30de\u30f3\u30c9\u304c\u591a\u304f\u306a\u308b\u3068\u3054\u3068\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3059\u308b\u306e\u304c\u9762\u5012\u304f\u3055\u3044\u304b\u3089\u3001\u4f3c\u305f\u3088\u3046\u306a\u51e6\u7406\u3092\uff11\u3064\u306e\u30b3\u30de\u30f3\u30c9\u306b\u307e\u3068\u3081\u3066\u3001\u305d\u308c\u305e\u308c\u3092\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3068\u3057\u3066\u307f\u308b\u3002\n\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u5b9a\u7fa9\u3002\n\n    import inspect\n    import argparse\n\n    class SubCommand(object):\n        name = ''           # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u540d\n        description = ''    # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u8aac\u660e\n        args = []   # add_argment\u306b\u8ffd\u52a0\u3059\u308b\u4e00\u89a7\n\n        def __init__(self, *args, **kwargs):\n            self.parser = argparse.ArgumentParser(\n                prog=self.name, add_help=False,\n                description=self.description.__unicode__())\n            map(lambda a: self.parser.add_argument(*a[0], **a[1]), self.args)\n\n        def help(self):\n            ''' \u30d8\u30eb\u30d7 '''\n            self.parser.print_help()\n\n        def execute(self, *args, **options):\n            ''' \u5f15\u6570\u3092parse_args\u3057\u3066\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b'''\n\n            params = self.parser.parse_args(args)\n            # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067\u306f\u4f4d\u7f6e\u5f15\u6570\u3060\u3051\u3092\u51e6\u7406\u3057\u3001\n            # \u30aa\u30d7\u30b7\u30e7\u30f3\u5f15\u6570\u306fDjango\u306e\u30b3\u30de\u30f3\u30c9\u30d1\u30fc\u30b5\u30fc\u306b\u51e6\u7406\u3055\u305b\u308b\u3001\u3068\u3044\u3046\u5909\u614b\u4ed5\u69d8\n\n            self.run(params, **options)\n\n        def run(self, params , **options):\n            ''' \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u672c\u4f53 \n            options \u306b\u306f Django\u304c\u30d1\u30fc\u30b9\u3057\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u5f15\u6570\u304c\u6e21\u308b\n            '''\n            raise NotImplemented()\n\nDjango \u306e\u30b3\u30de\u30f3\u30c9\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3002\n\n    from django.core.management.base import BaseCommand\n\n    class GenericCommand(BaseCommand):\n        args = ''\n        help = ''\n        model = None\n\n        @classmethod\n        def subcommands(cls):\n            ''' \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u4e00\u89a7\u306edict\u5316 '''\n            return dict(\n                (v.name, v) for k, v in cls.__dict__.items()\n                if inspect.isclass(v) and issubclass(v, SubCommand))\n\n        @classmethod\n        def subcommand(cls, name):\n            ''' \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u30af\u30e9\u30b9\u306e\u53d6\u5f97 '''\n            return cls.subcommands().get(name, None)\n\n        def handle(self, *args, **options):\n            '''  Django\u306e\u30b3\u30de\u30f3\u30c9\u306e\u30e1\u30a4\u30f3 '''\n\n            if len(args) < 1:\n                # \u5f15\u6570\u304c\u7121\u3044\u6642\u306b\u306f\u3059\u3079\u3066\u306e\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u30d8\u30eb\u30d7\u3092\u8868\u793a\n                for k, v in self.subcommands().items():\n                    print \"\\n\\n*** Subcommand:\", k\n                    v().help()\n\n            elif len(args) > 1 and args[0] == 'help':\n                # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306bhelp\u304c\u3057\u3066\u3044\u3055\u308c\u305f\u3089\u3001\u3064\u3065\u304f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u540d\u306e\u30d8\u30eb\u30d7\n                command = self.subcommand(args[1])\n                command and command().help()        \n            else:\n                # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306b\u51e6\u7406\u3055\u305b\u308b\n                command = self.subcommand(args[0])\n                command and command().execute(*args[1:], **options)\n\n\u4f8b\u3048\u3070rp\u30b3\u30de\u30f3\u30c9(rp.py) \u3067\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u5305\u542b\u3059\u308bCommand\u3092\u5b9a\u7fa9:\n\n    class Command(GenericCommand):\n\n        class PartyList(SubCommand):\n            name = 'list_party'\n            description = _(u'List Relying Party Command')\n\n            def run(self, params, **options):\n                # ... Relying Party \u4e00\u89a7\u3092\u51fa\u529b\n\n        class PartyDescription(SubCommand):\n            name = 'desc_party'\n            description = _(u'Detail of Party Command')\n            args = [\n                (('id',), dict(nargs=1, type=int, help=\"RelyingParty id\")),\n            ]\n\n            def run(self, params, **options):\n\n                print \"Relying Party\", \"ID=\", params.id[0]            \n                # ... \u6307\u5b9a\u3055\u308c\u305f Relying Party\u306e\u8a73\u7d30\u3092\u8868\u793a\n\n\u5b9f\u884c\n$ python manage.py rp\n\n*** Subcommand: desc_party\nusage: desc_party id\n\nDetail of Party Command\n\npositional arguments:\n  id  RelyingParty id\n\n*** Subcommand: list_party\nusage: list_party\n\nList Relying Party Command\n\n\n$ python manage.py rp help desc_party\n\nusage: desc_party id\n\nDetail of Party Command\n\npositional arguments:\n  id  RelyingParty id        \n\n$ python manage.py rp list_party\n\n1 575166910909-tsq1shq9qtmio3ir72bmpqliudm2h8g3.apps.googleusercontent.com Google\n2 c571aa53-a5f7-4c30-95d9-4cdfcd0a4f93 Azure      \n\nGenericComand#run_from_argv\u3067\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u5f15\u6570\u3092\u51e6\u7406\u3055\u305b\u308b\u3053\u3068\u3082\u53ef\u80fd:\n    def run_from_argv(self, argv):\n        ''' Django call this '''\n\n        args = argv and argv[0] == 'manage.py' and argv[2:] or argv[1:0]\n\n        if len(args) < 1:\n            for k, v in self.subcommands().items():\n                print \"\\n\\n*** Subcommand:\", k\n                v().help()\n\n        elif len(args) > 1 and args[0] == 'help':\n            command = self.subcommand(args[1])\n            command and command().help()\n        else: \n            command = self.subcommand(args[0])\n            command and command().execute(*args[1:])    \n\n\n\n\u30b3\u30de\u30f3\u30c9\u304c\u591a\u304f\u306a\u308b\u3068\u3054\u3068\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3059\u308b\u306e\u304c\u9762\u5012\u304f\u3055\u3044\u304b\u3089\u3001\u4f3c\u305f\u3088\u3046\u306a\u51e6\u7406\u3092\uff11\u3064\u306e\u30b3\u30de\u30f3\u30c9\u306b\u307e\u3068\u3081\u3066\u3001\u305d\u308c\u305e\u308c\u3092\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3068\u3057\u3066\u307f\u308b\u3002\n\n\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u5b9a\u7fa9\u3002\n\n```py\n\n    import inspect\n    import argparse\n    \n    class SubCommand(object):\n        name = ''           # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u540d\n        description = ''    # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u8aac\u660e\n        args = []   # add_argment\u306b\u8ffd\u52a0\u3059\u308b\u4e00\u89a7\n    \n        def __init__(self, *args, **kwargs):\n            self.parser = argparse.ArgumentParser(\n                prog=self.name, add_help=False,\n                description=self.description.__unicode__())\n            map(lambda a: self.parser.add_argument(*a[0], **a[1]), self.args)\n    \n        def help(self):\n            ''' \u30d8\u30eb\u30d7 '''\n            self.parser.print_help()\n    \n        def execute(self, *args, **options):\n            ''' \u5f15\u6570\u3092parse_args\u3057\u3066\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b'''\n            \n            params = self.parser.parse_args(args)\n            # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3067\u306f\u4f4d\u7f6e\u5f15\u6570\u3060\u3051\u3092\u51e6\u7406\u3057\u3001\n            # \u30aa\u30d7\u30b7\u30e7\u30f3\u5f15\u6570\u306fDjango\u306e\u30b3\u30de\u30f3\u30c9\u30d1\u30fc\u30b5\u30fc\u306b\u51e6\u7406\u3055\u305b\u308b\u3001\u3068\u3044\u3046\u5909\u614b\u4ed5\u69d8\n            \n            self.run(params, **options)\n                \n        def run(self, params , **options):\n            ''' \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u672c\u4f53 \n            options \u306b\u306f Django\u304c\u30d1\u30fc\u30b9\u3057\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u5f15\u6570\u304c\u6e21\u308b\n            '''\n            raise NotImplemented()\n```\n\nDjango \u306e\u30b3\u30de\u30f3\u30c9\u3092\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3002\n\n```py\n\n    from django.core.management.base import BaseCommand\n    \n    class GenericCommand(BaseCommand):\n        args = ''\n        help = ''\n        model = None\n       \n        @classmethod\n        def subcommands(cls):\n            ''' \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u4e00\u89a7\u306edict\u5316 '''\n            return dict(\n                (v.name, v) for k, v in cls.__dict__.items()\n                if inspect.isclass(v) and issubclass(v, SubCommand))\n    \n        @classmethod\n        def subcommand(cls, name):\n            ''' \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u30af\u30e9\u30b9\u306e\u53d6\u5f97 '''\n            return cls.subcommands().get(name, None)\n    \n        def handle(self, *args, **options):\n            '''  Django\u306e\u30b3\u30de\u30f3\u30c9\u306e\u30e1\u30a4\u30f3 '''\n    \n            if len(args) < 1:\n                # \u5f15\u6570\u304c\u7121\u3044\u6642\u306b\u306f\u3059\u3079\u3066\u306e\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u30d8\u30eb\u30d7\u3092\u8868\u793a\n                for k, v in self.subcommands().items():\n                    print \"\\n\\n*** Subcommand:\", k\n                    v().help()\n    \n            elif len(args) > 1 and args[0] == 'help':\n                # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306bhelp\u304c\u3057\u3066\u3044\u3055\u308c\u305f\u3089\u3001\u3064\u3065\u304f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u540d\u306e\u30d8\u30eb\u30d7\n                command = self.subcommand(args[1])\n                command and command().help()        \n            else:\n                # \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306b\u51e6\u7406\u3055\u305b\u308b\n                command = self.subcommand(args[0])\n                command and command().execute(*args[1:], **options)\n```\n\n\n\u4f8b\u3048\u3070rp\u30b3\u30de\u30f3\u30c9(rp.py) \u3067\u3001\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u5305\u542b\u3059\u308bCommand\u3092\u5b9a\u7fa9:\n\n```py\n\n    class Command(GenericCommand):\n    \n        class PartyList(SubCommand):\n            name = 'list_party'\n            description = _(u'List Relying Party Command')\n    \n            def run(self, params, **options):\n                # ... Relying Party \u4e00\u89a7\u3092\u51fa\u529b\n        \n        class PartyDescription(SubCommand):\n            name = 'desc_party'\n            description = _(u'Detail of Party Command')\n            args = [\n                (('id',), dict(nargs=1, type=int, help=\"RelyingParty id\")),\n            ]\n    \n            def run(self, params, **options):\n    \n                print \"Relying Party\", \"ID=\", params.id[0]            \n                # ... \u6307\u5b9a\u3055\u308c\u305f Relying Party\u306e\u8a73\u7d30\u3092\u8868\u793a\n```\n\n\n\u5b9f\u884c\n\n    $ python manage.py rp\n    \n    *** Subcommand: desc_party\n    usage: desc_party id\n    \n    Detail of Party Command\n    \n    positional arguments:\n      id  RelyingParty id\n    \n    *** Subcommand: list_party\n    usage: list_party\n    \n    List Relying Party Command\n    \n    \n    $ python manage.py rp help desc_party\n\n    usage: desc_party id\n    \n    Detail of Party Command\n    \n    positional arguments:\n      id  RelyingParty id        \n     \n    $ python manage.py rp list_party\n    \n    1 575166910909-tsq1shq9qtmio3ir72bmpqliudm2h8g3.apps.googleusercontent.com Google\n    2 c571aa53-a5f7-4c30-95d9-4cdfcd0a4f93 Azure      \n    \n    \nGenericComand#run_from_argv\u3067\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u5f15\u6570\u3092\u51e6\u7406\u3055\u305b\u308b\u3053\u3068\u3082\u53ef\u80fd:\n\n```py    \n    def run_from_argv(self, argv):\n        ''' Django call this '''\n\n        args = argv and argv[0] == 'manage.py' and argv[2:] or argv[1:0]\n\n        if len(args) < 1:\n            for k, v in self.subcommands().items():\n                print \"\\n\\n*** Subcommand:\", k\n                v().help()\n\n        elif len(args) > 1 and args[0] == 'help':\n            command = self.subcommand(args[1])\n            command and command().help()\n        else: \n            command = self.subcommand(args[0])\n            command and command().execute(*args[1:])    \n                                \n```\n"}