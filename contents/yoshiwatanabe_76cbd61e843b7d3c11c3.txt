{"context": " More than 1 year has passed since last update.\uff08\u305d\u306e\uff14\uff09\n\uff08\u6587\u4e2d\u306b\u51fa\u3066\u304f\u308b\u30da\u30fc\u30b8\u53c2\u7167\u306f \u7d71\u8a08\u5b66\u304c\u6700\u5f37\u306e\u5b66\u554f\u3067\u3042\u308b\uff3b\u5b9f\u8df5\u7de8\uff3d\u30c7\u30fc\u30bf\u5206\u6790\u306e\u305f\u3081\u306e\u601d\u60f3\u3068\u65b9\u6cd5 - \u897f\u5185\u5553 \u8457 \u3068\u3044\u3046\u672c\u306e\u30da\u30fc\u30b8\u3067\u3059\u3002\uff09\n\n16\u679a\u306e\u30b3\u30a4\u30f3\u3092\u6295\u3052\u305f\u5834\u5408\nP63\u3067\u300c\u53c2\u8003\u307e\u3067\u306b\u300d\u3068\u3042\u308b\u300116\u56de\u30b3\u30a4\u30f3\u3092\u6295\u3052\u305f\u5834\u5408\u306e\u7d50\u679c\u3002\n\u8868\u304c\u51fa\u308b\u78ba\u7387\u304c1/3\u3068\u3044\u3046\u3001\u975e\u5bfe\u79f0\u306a\u30b3\u30a4\u30f3\u3092\u6295\u3052\u308b\u3068\u3044\u3046\u5834\u5408\u3067\u3082\u300c\u30c7\u30fc\u30bf\u306e\u5408\u8a08\u304c\u6b63\u898f\u5206\u5e03\u306b\u53ce\u675f\u3059\u308b\u300d\u3068\u8457\u8005\u306f\u5f37\u8abf\u3057\u3066\u3044\u308b\u3002\n\u306a\u305c\u300c\u5c71\u300d\u306e\u5f62\u306b\u306a\u308b\u304b\u3060\u3051\u3069\u3001\u4e00\u756a\u7406\u89e3\u3057\u3084\u3059\u304b\u3063\u305f\u306e\u304c\u30012x2\u30843x3\u30848x8\u306e\u8868\u3068\u3057\u3066\u30c7\u30fc\u30bf\u304c\u8868\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u53f3\u4e0a\u304b\u3089\u5de6\u4e0b\u306b\u5411\u304b\u3063\u3066\u300c\u540c\u3058\u7d50\u679c\u3092\u51fa\u3059\u5225\u306e\u30d1\u30bf\u30fc\u30f3\u300d\u304c\u3044\u304f\u3064\u3082\u5b58\u5728\u3057\u3001\u305d\u308c\u3089\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5bfe\u89d2\u7dda\u306b\u8fd1\u3044\u307b\u3069\u5408\u8a08\u306e\u5024\u304c\u5927\u304d\u304f\u306a\u308b\uff1d\u5c71\u306e\u4e00\u756a\u9ad8\u3044\u3068\u3053\u308d\u306b\u306a\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3002\n\n\u30b3\u30fc\u30c9\n\u4eca\u56de\u306f\u68d2\u30b0\u30e9\u30d5\u306e\u307f\u4f5c\u308b\u306e\u3067\u3001\u8868\u306b\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u306f\u6e96\u5099\u3057\u306a\u3044\u3002\n\nfrom random import randint\nfrom decimal import Decimal\nimport numpy as np\n\ndef tossBiasedCoin():\n    \"\"\" Returns 0 or 1 with 0 having 2/3 chance \"\"\"\n    return randint(0,2) % 2\n\n# Prepare counters\ntossCount = 16\ncounts = [0]*tossCount\n\n# Toss a coin many times to get counts\nsampleCount = 50000\nfor num in range(sampleCount):    \n    headCount = 0\n    for i in range(tossCount): # Toss the coin 16 times\n        headCount += tossBiasedCoin()\n    counts[headCount] += 1\n\n# Conert all counts to perentage\nTWOPLACES = Decimal(10) ** -2 \nfor i in range(tossCount):\n    value = counts[i]        \n    counts[i] = (100 * Decimal(counts[i])/Decimal(sampleCount)).quantize(TWOPLACES)\n    print(\"Converted the value {} to percentage {}\".format(value, counts[i]))\n\n# Draw a bar chart\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nrects = plt.bar(np.arange(tossCount),\n                 counts, \n                 0.5,\n                 alpha=0.4,\n                 align=\"center\", \n                 color='b')\n\nplt.xlabel('Number of heads for 16-toss')\nplt.ylabel('Probability (%)')\nplt.title('Probabilities heads with a biased coin')\nplt.xticks(np.arange(tossCount))\n\nplt.tight_layout()\nplt.show()\n\n\n\u30ab\u30a6\u30f3\u30bf\u30fc\u5909\u6570\u3092\u4f5c\u308b\n\u7d20\u76f4\u306b\u3001\u8981\u7d20\u304c16\u500b\u306e list \u3092\u4f5c\u308b\u3002\n# Prepare counters\ntossCount = 16\ncounts = [0]*tossCount\n\n\n\u30b3\u30a4\u30f3\u3092\u6295\u3052\u308b\n16\u56de\u6295\u3052\u3066\u4f55\u679a\u8868\u306b\u306a\u308b\u304b\u309250\u4e07\u56de\u5b9f\u884c\u3059\u308b\uff08\u3053\u3093\u306a\u306b\u56de\u3055\u306a\u304f\u3066\u3082\u3044\u3044\u3093\u3060\u3051\u3069\uff09\n## Toss a coin many times to get counts\nsampleCount = 50000\nfor num in range(sampleCount):    \n    headCount = 0\n    for i in range(tossCount): # Toss the coin 16 times\n        headCount += tossBiasedCoin()\n    counts[headCount] += 1\n\n\n\u30d1\u30fc\u30bb\u30f3\u30c8\u306b\u5909\u63db\u3059\u308b\n# Conert all counts to perentage\nTWOPLACES = Decimal(10) ** -2 \nfor i in range(tossCount):\n    value = counts[i]        \n    counts[i] = (100 * Decimal(counts[i])/Decimal(sampleCount)).quantize(TWOPLACES)\n    print(\"Converted the value {} to percentage {}\".format(value, counts[i]))\n\n\n\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n\u7279\u306b\u7279\u5225\u306a\u3053\u3068\u306f\u3057\u3066\u3044\u306a\u3044\u3002\n# Draw a bar chart\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nrects = plt.bar(np.arange(tossCount),\n                 counts, \n                 0.5,\n                 alpha=0.4,\n                 align=\"center\", \n                 color='b')\n\nplt.xlabel('Number of heads for 16-toss')\nplt.ylabel('Probability (%)')\nplt.title('Probabilities heads with a biased coin')\nplt.xticks(np.arange(tossCount))\n\nplt.tight_layout()\nplt.show()\n\n\n\u7d50\u679c\nP64\u306e\u56f3\u88681-21\u306b\u305d\u3063\u304f\u308a\u306e\u30b0\u30e9\u30d5\u304c\u51fa\u6765\u305f\u3002\n\n\n\u307e\u3068\u3081\nPython\u3067\u30c7\u30fc\u30bf\u306e\u5206\u6790\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b\u305f\u3081\u306e\u30b3\u30c4\u3068\u3044\u3046\u304b\u3001\u4eca\u5f8c\u3084\u3089\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u306a\u3068\u611f\u3058\u308b\u3053\u3068\u3002\n\nPython\u3068\u306f\u95a2\u4fc2\u306a\u3044\u3051\u308c\u3069\u3001\u7d71\u8a08\u30fb\u78ba\u7387\u306e\u6839\u672c\u7684\u306a\u5fa9\u7fd2\u3068\u52c9\u5f37\nPython\u306e\u30ad\u30e2\u306e\u3072\u3068\u3064\u306f \u30b7\u30fc\u30b1\u30f3\u30b9\u578b\u3068\u898b\u305f\nmatplotlib \u3092\u306f\u3058\u3081\u3068\u3059\u308b\u30d7\u30ed\u30c3\u30c8\u3084\u30b0\u30e9\u30d5\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u99b4\u308c\u308b\n\n\uff08\u305d\u306e\uff14\uff09\n\n\uff08\u6587\u4e2d\u306b\u51fa\u3066\u304f\u308b\u30da\u30fc\u30b8\u53c2\u7167\u306f [\u7d71\u8a08\u5b66\u304c\u6700\u5f37\u306e\u5b66\u554f\u3067\u3042\u308b\uff3b\u5b9f\u8df5\u7de8\uff3d\u30c7\u30fc\u30bf\u5206\u6790\u306e\u305f\u3081\u306e\u601d\u60f3\u3068\u65b9\u6cd5 - \u897f\u5185\u5553 \u8457](http://www.diamond.co.jp/book/9784478028230.html) \u3068\u3044\u3046\u672c\u306e\u30da\u30fc\u30b8\u3067\u3059\u3002\uff09\n\n#16\u679a\u306e\u30b3\u30a4\u30f3\u3092\u6295\u3052\u305f\u5834\u5408\n\nP63\u3067\u300c\u53c2\u8003\u307e\u3067\u306b\u300d\u3068\u3042\u308b\u300116\u56de\u30b3\u30a4\u30f3\u3092\u6295\u3052\u305f\u5834\u5408\u306e\u7d50\u679c\u3002\n\n\u8868\u304c\u51fa\u308b\u78ba\u7387\u304c1/3\u3068\u3044\u3046\u3001\u975e\u5bfe\u79f0\u306a\u30b3\u30a4\u30f3\u3092\u6295\u3052\u308b\u3068\u3044\u3046\u5834\u5408\u3067\u3082\u300c\u30c7\u30fc\u30bf\u306e\u5408\u8a08\u304c\u6b63\u898f\u5206\u5e03\u306b\u53ce\u675f\u3059\u308b\u300d\u3068\u8457\u8005\u306f\u5f37\u8abf\u3057\u3066\u3044\u308b\u3002\n\n\u306a\u305c\u300c\u5c71\u300d\u306e\u5f62\u306b\u306a\u308b\u304b\u3060\u3051\u3069\u3001\u4e00\u756a\u7406\u89e3\u3057\u3084\u3059\u304b\u3063\u305f\u306e\u304c\u30012x2\u30843x3\u30848x8\u306e\u8868\u3068\u3057\u3066\u30c7\u30fc\u30bf\u304c\u8868\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u53f3\u4e0a\u304b\u3089\u5de6\u4e0b\u306b\u5411\u304b\u3063\u3066\u300c\u540c\u3058\u7d50\u679c\u3092\u51fa\u3059\u5225\u306e\u30d1\u30bf\u30fc\u30f3\u300d\u304c\u3044\u304f\u3064\u3082\u5b58\u5728\u3057\u3001\u305d\u308c\u3089\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5bfe\u89d2\u7dda\u306b\u8fd1\u3044\u307b\u3069\u5408\u8a08\u306e\u5024\u304c\u5927\u304d\u304f\u306a\u308b\uff1d\u5c71\u306e\u4e00\u756a\u9ad8\u3044\u3068\u3053\u308d\u306b\u306a\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3002\n\n#\u30b3\u30fc\u30c9\n\n\u4eca\u56de\u306f\u68d2\u30b0\u30e9\u30d5\u306e\u307f\u4f5c\u308b\u306e\u3067\u3001\u8868\u306b\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u306f\u6e96\u5099\u3057\u306a\u3044\u3002\n\n```py\n\nfrom random import randint\nfrom decimal import Decimal\nimport numpy as np\n\ndef tossBiasedCoin():\n    \"\"\" Returns 0 or 1 with 0 having 2/3 chance \"\"\"\n    return randint(0,2) % 2\n\n# Prepare counters\ntossCount = 16\ncounts = [0]*tossCount\n\n# Toss a coin many times to get counts\nsampleCount = 50000\nfor num in range(sampleCount):    \n    headCount = 0\n    for i in range(tossCount): # Toss the coin 16 times\n        headCount += tossBiasedCoin()\n    counts[headCount] += 1\n\n# Conert all counts to perentage\nTWOPLACES = Decimal(10) ** -2 \nfor i in range(tossCount):\n    value = counts[i]        \n    counts[i] = (100 * Decimal(counts[i])/Decimal(sampleCount)).quantize(TWOPLACES)\n    print(\"Converted the value {} to percentage {}\".format(value, counts[i]))\n\n# Draw a bar chart\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nrects = plt.bar(np.arange(tossCount),\n                 counts, \n                 0.5,\n                 alpha=0.4,\n                 align=\"center\", \n                 color='b')\n\nplt.xlabel('Number of heads for 16-toss')\nplt.ylabel('Probability (%)')\nplt.title('Probabilities heads with a biased coin')\nplt.xticks(np.arange(tossCount))\n\nplt.tight_layout()\nplt.show()\n```\n\n##\u30ab\u30a6\u30f3\u30bf\u30fc\u5909\u6570\u3092\u4f5c\u308b\n\n\u7d20\u76f4\u306b\u3001\u8981\u7d20\u304c16\u500b\u306e list \u3092\u4f5c\u308b\u3002\n\n```py\n# Prepare counters\ntossCount = 16\ncounts = [0]*tossCount\n```\n\n##\u30b3\u30a4\u30f3\u3092\u6295\u3052\u308b\n\n16\u56de\u6295\u3052\u3066\u4f55\u679a\u8868\u306b\u306a\u308b\u304b\u309250\u4e07\u56de\u5b9f\u884c\u3059\u308b\uff08\u3053\u3093\u306a\u306b\u56de\u3055\u306a\u304f\u3066\u3082\u3044\u3044\u3093\u3060\u3051\u3069\uff09\n\n```py\n## Toss a coin many times to get counts\nsampleCount = 50000\nfor num in range(sampleCount):    \n    headCount = 0\n    for i in range(tossCount): # Toss the coin 16 times\n        headCount += tossBiasedCoin()\n    counts[headCount] += 1\n```\n\n##\u30d1\u30fc\u30bb\u30f3\u30c8\u306b\u5909\u63db\u3059\u308b\n\n```py\n# Conert all counts to perentage\nTWOPLACES = Decimal(10) ** -2 \nfor i in range(tossCount):\n    value = counts[i]        \n    counts[i] = (100 * Decimal(counts[i])/Decimal(sampleCount)).quantize(TWOPLACES)\n    print(\"Converted the value {} to percentage {}\".format(value, counts[i]))\n```\n\n##\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\n\n\u7279\u306b\u7279\u5225\u306a\u3053\u3068\u306f\u3057\u3066\u3044\u306a\u3044\u3002\n\n```py\n# Draw a bar chart\nimport matplotlib.pyplot as plt\nfig, ax = plt.subplots()\nrects = plt.bar(np.arange(tossCount),\n                 counts, \n                 0.5,\n                 alpha=0.4,\n                 align=\"center\", \n                 color='b')\n\nplt.xlabel('Number of heads for 16-toss')\nplt.ylabel('Probability (%)')\nplt.title('Probabilities heads with a biased coin')\nplt.xticks(np.arange(tossCount))\n\nplt.tight_layout()\nplt.show()\n```\n\n#\u7d50\u679c\n\nP64\u306e\u56f3\u88681-21\u306b\u305d\u3063\u304f\u308a\u306e\u30b0\u30e9\u30d5\u304c\u51fa\u6765\u305f\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/103139/d321a7a4-dcfc-9e85-99a4-05f0a226fdac.png)\n\n#\u307e\u3068\u3081\n\nPython\u3067\u30c7\u30fc\u30bf\u306e\u5206\u6790\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b\u305f\u3081\u306e\u30b3\u30c4\u3068\u3044\u3046\u304b\u3001\u4eca\u5f8c\u3084\u3089\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u306a\u3068\u611f\u3058\u308b\u3053\u3068\u3002\n\n- Python\u3068\u306f\u95a2\u4fc2\u306a\u3044\u3051\u308c\u3069\u3001\u7d71\u8a08\u30fb\u78ba\u7387\u306e\u6839\u672c\u7684\u306a\u5fa9\u7fd2\u3068\u52c9\u5f37\n- Python\u306e\u30ad\u30e2\u306e\u3072\u3068\u3064\u306f \u30b7\u30fc\u30b1\u30f3\u30b9\u578b\u3068\u898b\u305f\n- matplotlib \u3092\u306f\u3058\u3081\u3068\u3059\u308b\u30d7\u30ed\u30c3\u30c8\u3084\u30b0\u30e9\u30d5\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u99b4\u308c\u308b\n\n", "tags": ["Python", "python2.7"]}