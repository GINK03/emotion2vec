{"context": "\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Android\u7aef\u672b\u5185\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3092ChromeCast\u3067\u518d\u751f\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\n\n\u306f\u3058\u3081\u306b\nChromeCast\u3067\u30e1\u30c7\u30a3\u30a2\u3092\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u3001Cast\u3059\u308b\u30e1\u30c7\u30a3\u30a2\u306eURL\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u7aef\u672b\u306e\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u3092ChromeCast\u3067\u518d\u751f\u3059\u308b\u5834\u5408\u306b\u306f\u3001ChromeCast\u304b\u3089\u53c2\u7167\u3067\u304d\u308b\u5834\u6240\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u516c\u958b\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u30a2\u30d7\u30ea\u81ea\u8eab\u3067HttpServer\u3092\u7acb\u3066\u308b\u3053\u3068\u3067\u3001ChromeCast\u304c\u7aef\u672b\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff01\n\u51e6\u7406\u306e\u6d41\u308c\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n1. \u30ed\u30fc\u30ab\u30eb\u306e\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\u3059\u308b\n2. \u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u5374\u3059\u308b\n3. \u30d5\u30a1\u30a4\u30eb\u3092ChromeCast\u304b\u3089\u518d\u751f\u3059\u308b\n\n1. \u30ed\u30fc\u30ab\u30eb\u306e\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\u3059\u308b\nContentResolver\u3092\u4f7f\u7528\u3057\u3066\u7aef\u672b\u5185\uff08SD\u30ab\u30fc\u30c9\u542b\u3080\uff09\u306e\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30a2\u30eb\u30d0\u30e0\u30a2\u30fc\u30c8\u306e\u53d6\u5f97\u304c\u5c11\u3057\u8907\u96d1\u3067\u3059\u3002\n\u53c2\u8003\uff1ajava - Most robust way to fetch album art in Android - Stack Overflow\n\nMainActivity.java\n    private List<MediaMetadataCompat> fetchMedia() {\n        List<MediaMetadataCompat> mediaList = new ArrayList<>();\n        Cursor mediaCursor = getContentResolver().query(\n                MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,\n                new String[]{\n                        MediaStore.Audio.Media._ID,\n                        MediaStore.Audio.Media.DATA,\n                        MediaStore.Audio.Media.TITLE,\n                        MediaStore.Audio.Media.ARTIST,\n                        MediaStore.Audio.Media.ALBUM,\n                        MediaStore.Audio.Media.ALBUM_ID},\n                MediaStore.Audio.Media.IS_MUSIC + \" != 0\", null, null);\n        if (mediaCursor != null && mediaCursor.moveToFirst()) {\n            do {\n                mediaList.add(buildMediaMetadataCompat(mediaCursor));\n            } while (mediaCursor.moveToNext());\n            mediaCursor.close();\n        }\n        return mediaList;\n    }\n\n    private MediaMetadataCompat buildMediaMetadataCompat(Cursor cursor) {\n        return new MediaMetadataCompat.Builder()\n                .putString(MediaMetadataCompat.METADATA_KEY_MEDIA_ID, cursor.getString(0))\n                .putString(MediaMetadataCompat.METADATA_KEY_MEDIA_URI, cursor.getString(1))\n                .putString(MediaMetadataCompat.METADATA_KEY_TITLE, cursor.getString(2))\n                .putString(MediaMetadataCompat.METADATA_KEY_ARTIST, cursor.getString(3))\n                .putString(MediaMetadataCompat.METADATA_KEY_ALBUM, cursor.getString(4))\n                .putString(MediaMetadataCompat.METADATA_KEY_ALBUM_ART_URI,\n                        getAlbumArtUri(cursor.getLong(5)).toString())\n                .build();\n    }\n\n    private Uri getAlbumArtUri(long albumId) {\n        Uri albumArtUri = Uri.parse(\"content://media/external/audio/albumart\");\n        return ContentUris.withAppendedId(albumArtUri, albumId);\n    }\n\n\nSD\u30ab\u30fc\u30c9\u306e\u4e2d\u3092\u63a2\u3059\u306e\u3067Manifest.permission.READ_EXTERNAL_STORAGE\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nMainActivity.java\n    private void checkPermissions() {\n        if (Build.VERSION.SDK_INT >= 23) {\n            ActivityCompat.requestPermissions(this, new String[]{\n                    Manifest.permission.READ_EXTERNAL_STORAGE}, 1);\n        }\n    }\n\n\n\nAndroidManifest.xml\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n\n\n2. \u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u5374\u3059\u308b\nHttpServer\u306bNanoHttpd\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nbuild.gradle\ndependencies {\n    compile 'com.nanohttpd:nanohttpd-webserver:2.1.1'\n}\n\n\n\u30dd\u30a4\u30f3\u30c8\u306f3\u3064\u3067\u3059\uff01\n1. WifiManager\u3092\u4f7f\u7528\u3057\u3066\u7aef\u672b\u306eIP\u30a2\u30c9\u30ec\u30b9\u3092\u8abf\u3079\u308b\n2. \u7a7a\u3044\u3066\u3044\u308b\u30dd\u30fc\u30c8\u3092\u63a2\u3059\n3. \u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3059\u308b\n\nMainActivity.java\n    private void startSever() {\n        try {\n            String ip = getWifiAddress();\n            int port = findOpenPort(ip, 8080);\n            mHttpServer = new HttpServer(port);\n            mHttpServer.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String getWifiAddress() {\n        WifiManager wifiManager = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);\n        WifiInfo wifiInfo = wifiManager.getConnectionInfo();\n        int ipAddress = wifiInfo.getIpAddress();\n        return ((ipAddress) & 0xFF) + \".\" +\n                ((ipAddress >> 8) & 0xFF) + \".\" +\n                ((ipAddress >> 16) & 0xFF) + \".\" +\n                ((ipAddress >> 24) & 0xFF);\n    }\n\n    private int findOpenPort(String ip, int startPort) {\n        final int timeout = 200;\n        for (int port = startPort; port <= 65535; port++) {\n            if (isPortAvailable(ip, port, timeout)) {\n                return port;\n            }\n        }\n        throw new RuntimeException(\"There is no open port.\");\n    }\n\n    private boolean isPortAvailable(String ip, int port, int timeout) {\n        try {\n            Socket socket = new Socket();\n            socket.connect(new InetSocketAddress(ip, port), timeout);\n            socket.close();\n            return false;\n        } catch (Exception e) {\n            return true;\n        }\n    }\n\n\nwifi\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u306e\u3067\u3001Manifest.permission.ACCESS_WIFI_STATE\u304c\u5fc5\u8981\u3067\u3059\n\nAndroidManifest.xml\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n\n\nNanoHTTPD\u306f\u97f3\u697d\u3068\u30a2\u30eb\u30d0\u30e0\u30a2\u30fc\u30c8\u3092\u305d\u308c\u305e\u308c\u8fd4\u5374\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nUri\u306b\u5fdc\u3058\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u5206\u5c90\u3055\u305b\u307e\u3059\u3002\n\nMainActivity.java\n    private class HttpServer extends NanoHTTPD {\n        final int mPort;\n        MediaMetadataCompat mMedia;\n\n        HttpServer(int port) throws IOException {\n            super(port);\n            mPort = port;\n        }\n\n        void setMedia(MediaMetadataCompat media) {\n            mMedia = media;\n        }\n\n        @Override\n        public Response serve(IHTTPSession session) {\n            if (mMedia == null) {\n                return new Response(NOT_FOUND, MIME_PLAINTEXT, \"No music\");\n            }\n            if (session.getUri().contains(\"image\")) {\n                return serveImage();\n            } else {\n                return serveMusic();\n            }\n        }\n\n        private Response serveMusic() {\n            InputStream stream = null;\n            try {\n                stream = new FileInputStream(\n                        mMedia.getString(MediaMetadataCompat.METADATA_KEY_MEDIA_URI));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            return new Response(OK, \"audio/mp3\", stream);\n        }\n\n        private Response serveImage() {\n            InputStream stream = null;\n            try {\n                stream = getContentResolver().openInputStream(Uri.parse(\n                        mMedia.getString(MediaMetadataCompat.METADATA_KEY_ALBUM_ART_URI)));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            return new Response(OK, \"image/jpeg\", stream);\n        }\n    }\n\n\n\n3. \u30d5\u30a1\u30a4\u30eb\u3092ChromeCast\u304b\u3089\u518d\u751f\u3059\u308b\nplay-services-cast-framework\u3092\u4f7f\u7528\u3057\u307e\u3059\n\nbuild.gradle\ndependencies {\n    compile 'com.google.android.gms:play-services-cast-framework:10.0.1'\n}\n\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4e0a\u306bChromeCast\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306e\u307fmenu\u306b\u30a2\u30a4\u30b3\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\nMainActivity.java\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n        getMenuInflater().inflate(R.menu.main, menu);\n        try {\n            CastButtonFactory.setUpMediaRouteButton(getApplicationContext(),\n                    menu, R.id.media_route_menu_item);\n        } catch (RuntimeException e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n\n\n\u518d\u751f\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089\u3001\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\uff11\u66f2\u518d\u751f\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\nMainActivity.java\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item != null && item.getItemId() == R.id.play) {\n            List<MediaMetadataCompat> mediaList = fetchMedia();\n            if (mediaList == null || mediaList.isEmpty()) {\n                return true;\n            }\n            Collections.shuffle(mediaList);\n            if (mHttpServer == null || !mHttpServer.isAlive()) {\n                startSever();\n            }\n            String url = \"http://\" + getWifiAddress() + \":\" + mHttpServer.mPort;\n            mHttpServer.setMedia(mediaList.get(0));\n            castMedia(url, mediaList.get(0));\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n\nChromeCast\u306b\u97f3\u697d\u3092\u8ee2\u9001\u3057\u307e\u3059\u3002\n\nMainActivity.java\n    private void castMedia(String url, MediaMetadataCompat track) {\n        CastSession castSession = CastContext.getSharedInstance(getApplicationContext()).getSessionManager()\n                .getCurrentCastSession();\n        if (castSession != null) {\n            MediaInfo media = toCastMediaMetadata(url, track);\n            RemoteMediaClient remoteMediaClient = castSession.getRemoteMediaClient();\n            if (remoteMediaClient != null) {\n                remoteMediaClient.load(media);\n            }\n        }\n    }\n\n    private MediaInfo toCastMediaMetadata(String url, MediaMetadataCompat track) {\n        MediaMetadata mediaMetadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MUSIC_TRACK);\n        mediaMetadata.putString(MediaMetadata.KEY_TITLE,\n                track.getDescription().getTitle() == null ? \"\" :\n                        track.getDescription().getTitle().toString());\n        mediaMetadata.putString(MediaMetadata.KEY_SUBTITLE,\n                track.getDescription().getSubtitle() == null ? \"\" :\n                        track.getDescription().getSubtitle().toString());\n        mediaMetadata.putString(MediaMetadata.KEY_ALBUM_ARTIST,\n                track.getString(MediaMetadataCompat.METADATA_KEY_ARTIST));\n        mediaMetadata.putString(MediaMetadata.KEY_ALBUM_TITLE,\n                track.getString(MediaMetadataCompat.METADATA_KEY_ALBUM));\n        WebImage image = new WebImage(\n                new Uri.Builder().encodedPath(url + \"/image\").build());\n        // First image is used by the receiver for showing the audio album art.\n        mediaMetadata.addImage(image);\n        // Second image is used by Cast Companion Library on the full screen activity that is shown\n        // when the cast dialog is clicked.\n        mediaMetadata.addImage(image);\n\n        return new MediaInfo.Builder(url)\n                .setContentType(\"audio/mpeg\")\n                .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)\n                .setMetadata(mediaMetadata)\n                .build();\n    }\n\n\nCastContext\u3092\u7528\u3044\u3066Cast\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067OptionsProvider\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nAndroidManifest.xml\n        <meta-data\n            android:name=\"com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME\"\n            android:value=\"com.sjn.demo.localfilecast.CastOptionsProvider\"/>\n\n\n\nCastOptionProvider.java\npackage com.sjn.demo.localfilecast;\n\nimport android.content.Context;\n\nimport com.google.android.gms.cast.CastMediaControlIntent;\nimport com.google.android.gms.cast.framework.CastOptions;\nimport com.google.android.gms.cast.framework.OptionsProvider;\nimport com.google.android.gms.cast.framework.SessionProvider;\n\nimport java.util.List;\n\npublic class CastOptionsProvider implements OptionsProvider {\n\n    @Override\n    public CastOptions getCastOptions(Context context) {\n        return new CastOptions.Builder()\n                .setReceiverApplicationId(CastMediaControlIntent.DEFAULT_MEDIA_RECEIVER_APPLICATION_ID)\n                .build();\n    }\n\n    @Override\n    public List<SessionProvider> getAdditionalSessionProviders(Context context) {\n        return null;\n    }\n}\n\n\n\n\u6700\u7d42\u7684\u306bMainActivity.java\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\n\nMainActivity.java\npackage com.sjn.demo.localfilecast;\n\nimport android.Manifest;\nimport android.content.ContentUris;\nimport android.database.Cursor;\nimport android.net.Uri;\nimport android.net.wifi.WifiInfo;\nimport android.net.wifi.WifiManager;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.provider.MediaStore;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v4.media.MediaMetadataCompat;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.Menu;\nimport android.view.MenuItem;\n\nimport com.google.android.gms.cast.MediaInfo;\nimport com.google.android.gms.cast.MediaMetadata;\nimport com.google.android.gms.cast.framework.CastButtonFactory;\nimport com.google.android.gms.cast.framework.CastContext;\nimport com.google.android.gms.cast.framework.CastSession;\nimport com.google.android.gms.cast.framework.media.RemoteMediaClient;\nimport com.google.android.gms.common.images.WebImage;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport fi.iki.elonen.NanoHTTPD;\n\nimport static fi.iki.elonen.NanoHTTPD.Response.Status.NOT_FOUND;\nimport static fi.iki.elonen.NanoHTTPD.Response.Status.OK;\n\npublic class MainActivity extends AppCompatActivity {\n    private HttpServer mHttpServer;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        checkPermissions();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        if (mHttpServer != null && mHttpServer.isAlive()) {\n            mHttpServer.stop();\n        }\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n        getMenuInflater().inflate(R.menu.main, menu);\n        try {\n            CastButtonFactory.setUpMediaRouteButton(getApplicationContext(),\n                    menu, R.id.media_route_menu_item);\n        } catch (RuntimeException e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item != null && item.getItemId() == R.id.play) {\n            List<MediaMetadataCompat> mediaList = fetchMedia();\n            if (mediaList == null || mediaList.isEmpty()) {\n                return true;\n            }\n            Collections.shuffle(mediaList);\n            if (mHttpServer == null || !mHttpServer.isAlive()) {\n                startSever();\n            }\n            String url = \"http://\" + getWifiAddress() + \":\" + mHttpServer.mPort;\n            mHttpServer.setMedia(mediaList.get(0));\n            castMedia(url, mediaList.get(0));\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    private class HttpServer extends NanoHTTPD {\n        final int mPort;\n        MediaMetadataCompat mMedia;\n\n        HttpServer(int port) throws IOException {\n            super(port);\n            mPort = port;\n        }\n\n        void setMedia(MediaMetadataCompat media) {\n            mMedia = media;\n        }\n\n        @Override\n        public Response serve(IHTTPSession session) {\n            if (mMedia == null) {\n                return new Response(NOT_FOUND, MIME_PLAINTEXT, \"No music\");\n            }\n            if (session.getUri().contains(\"image\")) {\n                return serveImage();\n            } else {\n                return serveMusic();\n            }\n        }\n\n        private Response serveMusic() {\n            InputStream stream = null;\n            try {\n                stream = new FileInputStream(\n                        mMedia.getString(MediaMetadataCompat.METADATA_KEY_MEDIA_URI));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            return new Response(OK, \"audio/mp3\", stream);\n        }\n\n        private Response serveImage() {\n            InputStream stream = null;\n            try {\n                stream = getContentResolver().openInputStream(Uri.parse(\n                        mMedia.getString(MediaMetadataCompat.METADATA_KEY_ALBUM_ART_URI)));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            return new Response(OK, \"image/jpeg\", stream);\n        }\n    }\n\n    private void startSever() {\n        try {\n            String ip = getWifiAddress();\n            int port = findOpenPort(ip, 8080);\n            mHttpServer = new HttpServer(port);\n            mHttpServer.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String getWifiAddress() {\n        WifiManager wifiManager = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);\n        WifiInfo wifiInfo = wifiManager.getConnectionInfo();\n        int ipAddress = wifiInfo.getIpAddress();\n        return ((ipAddress) & 0xFF) + \".\" +\n                ((ipAddress >> 8) & 0xFF) + \".\" +\n                ((ipAddress >> 16) & 0xFF) + \".\" +\n                ((ipAddress >> 24) & 0xFF);\n    }\n\n    private int findOpenPort(String ip, int startPort) {\n        final int timeout = 200;\n        for (int port = startPort; port <= 65535; port++) {\n            if (isPortAvailable(ip, port, timeout)) {\n                return port;\n            }\n        }\n        throw new RuntimeException(\"There is no open port.\");\n    }\n\n    private boolean isPortAvailable(String ip, int port, int timeout) {\n        try {\n            Socket socket = new Socket();\n            socket.connect(new InetSocketAddress(ip, port), timeout);\n            socket.close();\n            return false;\n        } catch (Exception e) {\n            return true;\n        }\n    }\n\n    private void checkPermissions() {\n        if (Build.VERSION.SDK_INT >= 23) {\n            ActivityCompat.requestPermissions(this, new String[]{\n                    Manifest.permission.READ_EXTERNAL_STORAGE}, 1);\n        }\n    }\n\n    private List<MediaMetadataCompat> fetchMedia() {\n        List<MediaMetadataCompat> mediaList = new ArrayList<>();\n        Cursor mediaCursor = getContentResolver().query(\n                MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,\n                new String[]{\n                        MediaStore.Audio.Media._ID,\n                        MediaStore.Audio.Media.DATA,\n                        MediaStore.Audio.Media.TITLE,\n                        MediaStore.Audio.Media.ARTIST,\n                        MediaStore.Audio.Media.ALBUM,\n                        MediaStore.Audio.Media.ALBUM_ID},\n                MediaStore.Audio.Media.IS_MUSIC + \" != 0\", null, null);\n        if (mediaCursor != null && mediaCursor.moveToFirst()) {\n            do {\n                mediaList.add(buildMediaMetadataCompat(mediaCursor));\n            } while (mediaCursor.moveToNext());\n            mediaCursor.close();\n        }\n        return mediaList;\n    }\n\n    private MediaMetadataCompat buildMediaMetadataCompat(Cursor cursor) {\n        return new MediaMetadataCompat.Builder()\n                .putString(MediaMetadataCompat.METADATA_KEY_MEDIA_ID, cursor.getString(0))\n                .putString(MediaMetadataCompat.METADATA_KEY_MEDIA_URI, cursor.getString(1))\n                .putString(MediaMetadataCompat.METADATA_KEY_TITLE, cursor.getString(2))\n                .putString(MediaMetadataCompat.METADATA_KEY_ARTIST, cursor.getString(3))\n                .putString(MediaMetadataCompat.METADATA_KEY_ALBUM, cursor.getString(4))\n                .putString(MediaMetadataCompat.METADATA_KEY_ALBUM_ART_URI,\n                        getAlbumArtUri(cursor.getLong(5)).toString())\n                .build();\n    }\n\n    private Uri getAlbumArtUri(long albumId) {\n        Uri albumArtUri = Uri.parse(\"content://media/external/audio/albumart\");\n        return ContentUris.withAppendedId(albumArtUri, albumId);\n    }\n\n    void castMedia(String url, MediaMetadataCompat track) {\n        CastSession castSession = CastContext.getSharedInstance(getApplicationContext()).getSessionManager()\n                .getCurrentCastSession();\n        if (castSession != null) {\n            MediaInfo media = toCastMediaMetadata(url, track);\n            RemoteMediaClient remoteMediaClient = castSession.getRemoteMediaClient();\n            if (remoteMediaClient != null) {\n                remoteMediaClient.load(media);\n            }\n        }\n    }\n\n    private MediaInfo toCastMediaMetadata(String url, MediaMetadataCompat track) {\n        MediaMetadata mediaMetadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MUSIC_TRACK);\n        mediaMetadata.putString(MediaMetadata.KEY_TITLE,\n                track.getDescription().getTitle() == null ? \"\" :\n                        track.getDescription().getTitle().toString());\n        mediaMetadata.putString(MediaMetadata.KEY_SUBTITLE,\n                track.getDescription().getSubtitle() == null ? \"\" :\n                        track.getDescription().getSubtitle().toString());\n        mediaMetadata.putString(MediaMetadata.KEY_ALBUM_ARTIST,\n                track.getString(MediaMetadataCompat.METADATA_KEY_ARTIST));\n        mediaMetadata.putString(MediaMetadata.KEY_ALBUM_TITLE,\n                track.getString(MediaMetadataCompat.METADATA_KEY_ALBUM));\n        WebImage image = new WebImage(\n                new Uri.Builder().encodedPath(url + \"/image\").build());\n        // First image is used by the receiver for showing the audio album art.\n        mediaMetadata.addImage(image);\n        // Second image is used by Cast Companion Library on the full screen activity that is shown\n        // when the cast dialog is clicked.\n        mediaMetadata.addImage(image);\n\n        return new MediaInfo.Builder(url)\n                .setContentType(\"audio/mpeg\")\n                .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)\n                .setMetadata(mediaMetadata)\n                .build();\n    }\n\n}\n\n\n\n\u304a\u308f\u308a\u306b\nNanoHTTPD\u304c\u3068\u3066\u3082\u4f7f\u3044\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\u30a2\u30d7\u30ea\u306e\u6a5f\u80fd\u3068\u3057\u3066\u3060\u3051\u3067\u306a\u304f\u3001\u958b\u767a\u4e2d\u306e\u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4e0a\u306b\u516c\u958b\u3059\u308b\u3088\u3046\u306a\u4f7f\u3044\u65b9\u3082\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u306fsjnyag/localfilecast-demo\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001Android\u7aef\u672b\u5185\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3092ChromeCast\u3067\u518d\u751f\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059:grinning:\n\n# \u306f\u3058\u3081\u306b\nChromeCast\u3067\u30e1\u30c7\u30a3\u30a2\u3092\u518d\u751f\u3057\u305f\u3044\u5834\u5408\u3001Cast\u3059\u308b\u30e1\u30c7\u30a3\u30a2\u306eURL\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u7aef\u672b\u306e\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u3092ChromeCast\u3067\u518d\u751f\u3059\u308b\u5834\u5408\u306b\u306f\u3001ChromeCast\u304b\u3089\u53c2\u7167\u3067\u304d\u308b\u5834\u6240\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u516c\u958b\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f**\u30a2\u30d7\u30ea\u81ea\u8eab\u3067HttpServer\u3092\u7acb\u3066\u308b\u3053\u3068\u3067\u3001ChromeCast\u304c\u7aef\u672b\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff01**\n\n\u51e6\u7406\u306e\u6d41\u308c\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n1. \u30ed\u30fc\u30ab\u30eb\u306e\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\u3059\u308b\n2. \u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u5374\u3059\u308b\n3. \u30d5\u30a1\u30a4\u30eb\u3092ChromeCast\u304b\u3089\u518d\u751f\u3059\u308b\n\n# 1. \u30ed\u30fc\u30ab\u30eb\u306e\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\u3059\u308b\n`ContentResolver`\u3092\u4f7f\u7528\u3057\u3066\u7aef\u672b\u5185\uff08SD\u30ab\u30fc\u30c9\u542b\u3080\uff09\u306e\u97f3\u697d\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u30a2\u30eb\u30d0\u30e0\u30a2\u30fc\u30c8\u306e\u53d6\u5f97\u304c\u5c11\u3057\u8907\u96d1\u3067\u3059\u3002\n\u53c2\u8003\uff1a[java - Most robust way to fetch album art in Android - Stack Overflow](http://stackoverflow.com/questions/6591087/most-robust-way-to-fetch-album-art-in-android)\n\n```java:MainActivity.java\n    private List<MediaMetadataCompat> fetchMedia() {\n        List<MediaMetadataCompat> mediaList = new ArrayList<>();\n        Cursor mediaCursor = getContentResolver().query(\n                MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,\n                new String[]{\n                        MediaStore.Audio.Media._ID,\n                        MediaStore.Audio.Media.DATA,\n                        MediaStore.Audio.Media.TITLE,\n                        MediaStore.Audio.Media.ARTIST,\n                        MediaStore.Audio.Media.ALBUM,\n                        MediaStore.Audio.Media.ALBUM_ID},\n                MediaStore.Audio.Media.IS_MUSIC + \" != 0\", null, null);\n        if (mediaCursor != null && mediaCursor.moveToFirst()) {\n            do {\n                mediaList.add(buildMediaMetadataCompat(mediaCursor));\n            } while (mediaCursor.moveToNext());\n            mediaCursor.close();\n        }\n        return mediaList;\n    }\n\n    private MediaMetadataCompat buildMediaMetadataCompat(Cursor cursor) {\n        return new MediaMetadataCompat.Builder()\n                .putString(MediaMetadataCompat.METADATA_KEY_MEDIA_ID, cursor.getString(0))\n                .putString(MediaMetadataCompat.METADATA_KEY_MEDIA_URI, cursor.getString(1))\n                .putString(MediaMetadataCompat.METADATA_KEY_TITLE, cursor.getString(2))\n                .putString(MediaMetadataCompat.METADATA_KEY_ARTIST, cursor.getString(3))\n                .putString(MediaMetadataCompat.METADATA_KEY_ALBUM, cursor.getString(4))\n                .putString(MediaMetadataCompat.METADATA_KEY_ALBUM_ART_URI,\n                        getAlbumArtUri(cursor.getLong(5)).toString())\n                .build();\n    }\n\n    private Uri getAlbumArtUri(long albumId) {\n        Uri albumArtUri = Uri.parse(\"content://media/external/audio/albumart\");\n        return ContentUris.withAppendedId(albumArtUri, albumId);\n    }\n```\n\nSD\u30ab\u30fc\u30c9\u306e\u4e2d\u3092\u63a2\u3059\u306e\u3067`Manifest.permission.READ_EXTERNAL_STORAGE`\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n```java:MainActivity.java\n    private void checkPermissions() {\n        if (Build.VERSION.SDK_INT >= 23) {\n            ActivityCompat.requestPermissions(this, new String[]{\n                    Manifest.permission.READ_EXTERNAL_STORAGE}, 1);\n        }\n    }\n```\n\n```xml:AndroidManifest.xml\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n```\n\n# 2. \u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3057\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u5374\u3059\u308b\nHttpServer\u306b[NanoHttpd](https://github.com/NanoHttpd/nanohttpd)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```build.gradle\ndependencies {\n    compile 'com.nanohttpd:nanohttpd-webserver:2.1.1'\n}\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f3\u3064\u3067\u3059\uff01\n1. `WifiManager`\u3092\u4f7f\u7528\u3057\u3066\u7aef\u672b\u306eIP\u30a2\u30c9\u30ec\u30b9\u3092\u8abf\u3079\u308b\n2. \u7a7a\u3044\u3066\u3044\u308b\u30dd\u30fc\u30c8\u3092\u63a2\u3059\n3. \u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3059\u308b\n\n```java:MainActivity.java\n    private void startSever() {\n        try {\n            String ip = getWifiAddress();\n            int port = findOpenPort(ip, 8080);\n            mHttpServer = new HttpServer(port);\n            mHttpServer.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String getWifiAddress() {\n        WifiManager wifiManager = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);\n        WifiInfo wifiInfo = wifiManager.getConnectionInfo();\n        int ipAddress = wifiInfo.getIpAddress();\n        return ((ipAddress) & 0xFF) + \".\" +\n                ((ipAddress >> 8) & 0xFF) + \".\" +\n                ((ipAddress >> 16) & 0xFF) + \".\" +\n                ((ipAddress >> 24) & 0xFF);\n    }\n\n    private int findOpenPort(String ip, int startPort) {\n        final int timeout = 200;\n        for (int port = startPort; port <= 65535; port++) {\n            if (isPortAvailable(ip, port, timeout)) {\n                return port;\n            }\n        }\n        throw new RuntimeException(\"There is no open port.\");\n    }\n\n    private boolean isPortAvailable(String ip, int port, int timeout) {\n        try {\n            Socket socket = new Socket();\n            socket.connect(new InetSocketAddress(ip, port), timeout);\n            socket.close();\n            return false;\n        } catch (Exception e) {\n            return true;\n        }\n    }\n```\n\nwifi\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u306e\u3067\u3001`Manifest.permission.ACCESS_WIFI_STATE`\u304c\u5fc5\u8981\u3067\u3059\n\n```xml:AndroidManifest.xml\n    <uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />\n```\n\n`NanoHTTPD`\u306f\u97f3\u697d\u3068\u30a2\u30eb\u30d0\u30e0\u30a2\u30fc\u30c8\u3092\u305d\u308c\u305e\u308c\u8fd4\u5374\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nUri\u306b\u5fdc\u3058\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u5206\u5c90\u3055\u305b\u307e\u3059\u3002\n\n```java:MainActivity.java\n    private class HttpServer extends NanoHTTPD {\n        final int mPort;\n        MediaMetadataCompat mMedia;\n\n        HttpServer(int port) throws IOException {\n            super(port);\n            mPort = port;\n        }\n\n        void setMedia(MediaMetadataCompat media) {\n            mMedia = media;\n        }\n\n        @Override\n        public Response serve(IHTTPSession session) {\n            if (mMedia == null) {\n                return new Response(NOT_FOUND, MIME_PLAINTEXT, \"No music\");\n            }\n            if (session.getUri().contains(\"image\")) {\n                return serveImage();\n            } else {\n                return serveMusic();\n            }\n        }\n\n        private Response serveMusic() {\n            InputStream stream = null;\n            try {\n                stream = new FileInputStream(\n                        mMedia.getString(MediaMetadataCompat.METADATA_KEY_MEDIA_URI));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            return new Response(OK, \"audio/mp3\", stream);\n        }\n\n        private Response serveImage() {\n            InputStream stream = null;\n            try {\n                stream = getContentResolver().openInputStream(Uri.parse(\n                        mMedia.getString(MediaMetadataCompat.METADATA_KEY_ALBUM_ART_URI)));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            return new Response(OK, \"image/jpeg\", stream);\n        }\n    }\n```\n\n# 3. \u30d5\u30a1\u30a4\u30eb\u3092ChromeCast\u304b\u3089\u518d\u751f\u3059\u308b\n`play-services-cast-framework`\u3092\u4f7f\u7528\u3057\u307e\u3059\n\n```java:build.gradle\ndependencies {\n    compile 'com.google.android.gms:play-services-cast-framework:10.0.1'\n}\n```\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4e0a\u306bChromeCast\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306e\u307fmenu\u306b\u30a2\u30a4\u30b3\u30f3\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n```java:MainActivity.java\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n        getMenuInflater().inflate(R.menu.main, menu);\n        try {\n            CastButtonFactory.setUpMediaRouteButton(getApplicationContext(),\n                    menu, R.id.media_route_menu_item);\n        } catch (RuntimeException e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n```\n\n\u518d\u751f\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3089\u3001\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\uff11\u66f2\u518d\u751f\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```java:MainActivity.java\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item != null && item.getItemId() == R.id.play) {\n            List<MediaMetadataCompat> mediaList = fetchMedia();\n            if (mediaList == null || mediaList.isEmpty()) {\n                return true;\n            }\n            Collections.shuffle(mediaList);\n            if (mHttpServer == null || !mHttpServer.isAlive()) {\n                startSever();\n            }\n            String url = \"http://\" + getWifiAddress() + \":\" + mHttpServer.mPort;\n            mHttpServer.setMedia(mediaList.get(0));\n            castMedia(url, mediaList.get(0));\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n```\n\nChromeCast\u306b\u97f3\u697d\u3092\u8ee2\u9001\u3057\u307e\u3059\u3002\n\n```java:MainActivity.java\n    private void castMedia(String url, MediaMetadataCompat track) {\n        CastSession castSession = CastContext.getSharedInstance(getApplicationContext()).getSessionManager()\n                .getCurrentCastSession();\n        if (castSession != null) {\n            MediaInfo media = toCastMediaMetadata(url, track);\n            RemoteMediaClient remoteMediaClient = castSession.getRemoteMediaClient();\n            if (remoteMediaClient != null) {\n                remoteMediaClient.load(media);\n            }\n        }\n    }\n\n    private MediaInfo toCastMediaMetadata(String url, MediaMetadataCompat track) {\n        MediaMetadata mediaMetadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MUSIC_TRACK);\n        mediaMetadata.putString(MediaMetadata.KEY_TITLE,\n                track.getDescription().getTitle() == null ? \"\" :\n                        track.getDescription().getTitle().toString());\n        mediaMetadata.putString(MediaMetadata.KEY_SUBTITLE,\n                track.getDescription().getSubtitle() == null ? \"\" :\n                        track.getDescription().getSubtitle().toString());\n        mediaMetadata.putString(MediaMetadata.KEY_ALBUM_ARTIST,\n                track.getString(MediaMetadataCompat.METADATA_KEY_ARTIST));\n        mediaMetadata.putString(MediaMetadata.KEY_ALBUM_TITLE,\n                track.getString(MediaMetadataCompat.METADATA_KEY_ALBUM));\n        WebImage image = new WebImage(\n                new Uri.Builder().encodedPath(url + \"/image\").build());\n        // First image is used by the receiver for showing the audio album art.\n        mediaMetadata.addImage(image);\n        // Second image is used by Cast Companion Library on the full screen activity that is shown\n        // when the cast dialog is clicked.\n        mediaMetadata.addImage(image);\n\n        return new MediaInfo.Builder(url)\n                .setContentType(\"audio/mpeg\")\n                .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)\n                .setMetadata(mediaMetadata)\n                .build();\n    }\n```\n`CastContext`\u3092\u7528\u3044\u3066Cast\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067`OptionsProvider`\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```xml:AndroidManifest.xml\n        <meta-data\n            android:name=\"com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME\"\n            android:value=\"com.sjn.demo.localfilecast.CastOptionsProvider\"/>\n```\n\n```java:CastOptionProvider.java\npackage com.sjn.demo.localfilecast;\n\nimport android.content.Context;\n\nimport com.google.android.gms.cast.CastMediaControlIntent;\nimport com.google.android.gms.cast.framework.CastOptions;\nimport com.google.android.gms.cast.framework.OptionsProvider;\nimport com.google.android.gms.cast.framework.SessionProvider;\n\nimport java.util.List;\n\npublic class CastOptionsProvider implements OptionsProvider {\n\n    @Override\n    public CastOptions getCastOptions(Context context) {\n        return new CastOptions.Builder()\n                .setReceiverApplicationId(CastMediaControlIntent.DEFAULT_MEDIA_RECEIVER_APPLICATION_ID)\n                .build();\n    }\n\n    @Override\n    public List<SessionProvider> getAdditionalSessionProviders(Context context) {\n        return null;\n    }\n}\n```\n\n---\n\n\u6700\u7d42\u7684\u306b`MainActivity.java`\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059:disappointed_relieved:\n\n```Java:MainActivity.java\npackage com.sjn.demo.localfilecast;\n\nimport android.Manifest;\nimport android.content.ContentUris;\nimport android.database.Cursor;\nimport android.net.Uri;\nimport android.net.wifi.WifiInfo;\nimport android.net.wifi.WifiManager;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.provider.MediaStore;\nimport android.support.v4.app.ActivityCompat;\nimport android.support.v4.media.MediaMetadataCompat;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.Menu;\nimport android.view.MenuItem;\n\nimport com.google.android.gms.cast.MediaInfo;\nimport com.google.android.gms.cast.MediaMetadata;\nimport com.google.android.gms.cast.framework.CastButtonFactory;\nimport com.google.android.gms.cast.framework.CastContext;\nimport com.google.android.gms.cast.framework.CastSession;\nimport com.google.android.gms.cast.framework.media.RemoteMediaClient;\nimport com.google.android.gms.common.images.WebImage;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.InetSocketAddress;\nimport java.net.Socket;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\n\nimport fi.iki.elonen.NanoHTTPD;\n\nimport static fi.iki.elonen.NanoHTTPD.Response.Status.NOT_FOUND;\nimport static fi.iki.elonen.NanoHTTPD.Response.Status.OK;\n\npublic class MainActivity extends AppCompatActivity {\n    private HttpServer mHttpServer;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        checkPermissions();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        if (mHttpServer != null && mHttpServer.isAlive()) {\n            mHttpServer.stop();\n        }\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        super.onCreateOptionsMenu(menu);\n        getMenuInflater().inflate(R.menu.main, menu);\n        try {\n            CastButtonFactory.setUpMediaRouteButton(getApplicationContext(),\n                    menu, R.id.media_route_menu_item);\n        } catch (RuntimeException e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item != null && item.getItemId() == R.id.play) {\n            List<MediaMetadataCompat> mediaList = fetchMedia();\n            if (mediaList == null || mediaList.isEmpty()) {\n                return true;\n            }\n            Collections.shuffle(mediaList);\n            if (mHttpServer == null || !mHttpServer.isAlive()) {\n                startSever();\n            }\n            String url = \"http://\" + getWifiAddress() + \":\" + mHttpServer.mPort;\n            mHttpServer.setMedia(mediaList.get(0));\n            castMedia(url, mediaList.get(0));\n            return true;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n\n    private class HttpServer extends NanoHTTPD {\n        final int mPort;\n        MediaMetadataCompat mMedia;\n\n        HttpServer(int port) throws IOException {\n            super(port);\n            mPort = port;\n        }\n\n        void setMedia(MediaMetadataCompat media) {\n            mMedia = media;\n        }\n\n        @Override\n        public Response serve(IHTTPSession session) {\n            if (mMedia == null) {\n                return new Response(NOT_FOUND, MIME_PLAINTEXT, \"No music\");\n            }\n            if (session.getUri().contains(\"image\")) {\n                return serveImage();\n            } else {\n                return serveMusic();\n            }\n        }\n\n        private Response serveMusic() {\n            InputStream stream = null;\n            try {\n                stream = new FileInputStream(\n                        mMedia.getString(MediaMetadataCompat.METADATA_KEY_MEDIA_URI));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            return new Response(OK, \"audio/mp3\", stream);\n        }\n\n        private Response serveImage() {\n            InputStream stream = null;\n            try {\n                stream = getContentResolver().openInputStream(Uri.parse(\n                        mMedia.getString(MediaMetadataCompat.METADATA_KEY_ALBUM_ART_URI)));\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            }\n            return new Response(OK, \"image/jpeg\", stream);\n        }\n    }\n\n    private void startSever() {\n        try {\n            String ip = getWifiAddress();\n            int port = findOpenPort(ip, 8080);\n            mHttpServer = new HttpServer(port);\n            mHttpServer.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String getWifiAddress() {\n        WifiManager wifiManager = (WifiManager) getApplicationContext().getSystemService(WIFI_SERVICE);\n        WifiInfo wifiInfo = wifiManager.getConnectionInfo();\n        int ipAddress = wifiInfo.getIpAddress();\n        return ((ipAddress) & 0xFF) + \".\" +\n                ((ipAddress >> 8) & 0xFF) + \".\" +\n                ((ipAddress >> 16) & 0xFF) + \".\" +\n                ((ipAddress >> 24) & 0xFF);\n    }\n\n    private int findOpenPort(String ip, int startPort) {\n        final int timeout = 200;\n        for (int port = startPort; port <= 65535; port++) {\n            if (isPortAvailable(ip, port, timeout)) {\n                return port;\n            }\n        }\n        throw new RuntimeException(\"There is no open port.\");\n    }\n\n    private boolean isPortAvailable(String ip, int port, int timeout) {\n        try {\n            Socket socket = new Socket();\n            socket.connect(new InetSocketAddress(ip, port), timeout);\n            socket.close();\n            return false;\n        } catch (Exception e) {\n            return true;\n        }\n    }\n\n    private void checkPermissions() {\n        if (Build.VERSION.SDK_INT >= 23) {\n            ActivityCompat.requestPermissions(this, new String[]{\n                    Manifest.permission.READ_EXTERNAL_STORAGE}, 1);\n        }\n    }\n\n    private List<MediaMetadataCompat> fetchMedia() {\n        List<MediaMetadataCompat> mediaList = new ArrayList<>();\n        Cursor mediaCursor = getContentResolver().query(\n                MediaStore.Audio.Media.EXTERNAL_CONTENT_URI,\n                new String[]{\n                        MediaStore.Audio.Media._ID,\n                        MediaStore.Audio.Media.DATA,\n                        MediaStore.Audio.Media.TITLE,\n                        MediaStore.Audio.Media.ARTIST,\n                        MediaStore.Audio.Media.ALBUM,\n                        MediaStore.Audio.Media.ALBUM_ID},\n                MediaStore.Audio.Media.IS_MUSIC + \" != 0\", null, null);\n        if (mediaCursor != null && mediaCursor.moveToFirst()) {\n            do {\n                mediaList.add(buildMediaMetadataCompat(mediaCursor));\n            } while (mediaCursor.moveToNext());\n            mediaCursor.close();\n        }\n        return mediaList;\n    }\n\n    private MediaMetadataCompat buildMediaMetadataCompat(Cursor cursor) {\n        return new MediaMetadataCompat.Builder()\n                .putString(MediaMetadataCompat.METADATA_KEY_MEDIA_ID, cursor.getString(0))\n                .putString(MediaMetadataCompat.METADATA_KEY_MEDIA_URI, cursor.getString(1))\n                .putString(MediaMetadataCompat.METADATA_KEY_TITLE, cursor.getString(2))\n                .putString(MediaMetadataCompat.METADATA_KEY_ARTIST, cursor.getString(3))\n                .putString(MediaMetadataCompat.METADATA_KEY_ALBUM, cursor.getString(4))\n                .putString(MediaMetadataCompat.METADATA_KEY_ALBUM_ART_URI,\n                        getAlbumArtUri(cursor.getLong(5)).toString())\n                .build();\n    }\n\n    private Uri getAlbumArtUri(long albumId) {\n        Uri albumArtUri = Uri.parse(\"content://media/external/audio/albumart\");\n        return ContentUris.withAppendedId(albumArtUri, albumId);\n    }\n\n    void castMedia(String url, MediaMetadataCompat track) {\n        CastSession castSession = CastContext.getSharedInstance(getApplicationContext()).getSessionManager()\n                .getCurrentCastSession();\n        if (castSession != null) {\n            MediaInfo media = toCastMediaMetadata(url, track);\n            RemoteMediaClient remoteMediaClient = castSession.getRemoteMediaClient();\n            if (remoteMediaClient != null) {\n                remoteMediaClient.load(media);\n            }\n        }\n    }\n\n    private MediaInfo toCastMediaMetadata(String url, MediaMetadataCompat track) {\n        MediaMetadata mediaMetadata = new MediaMetadata(MediaMetadata.MEDIA_TYPE_MUSIC_TRACK);\n        mediaMetadata.putString(MediaMetadata.KEY_TITLE,\n                track.getDescription().getTitle() == null ? \"\" :\n                        track.getDescription().getTitle().toString());\n        mediaMetadata.putString(MediaMetadata.KEY_SUBTITLE,\n                track.getDescription().getSubtitle() == null ? \"\" :\n                        track.getDescription().getSubtitle().toString());\n        mediaMetadata.putString(MediaMetadata.KEY_ALBUM_ARTIST,\n                track.getString(MediaMetadataCompat.METADATA_KEY_ARTIST));\n        mediaMetadata.putString(MediaMetadata.KEY_ALBUM_TITLE,\n                track.getString(MediaMetadataCompat.METADATA_KEY_ALBUM));\n        WebImage image = new WebImage(\n                new Uri.Builder().encodedPath(url + \"/image\").build());\n        // First image is used by the receiver for showing the audio album art.\n        mediaMetadata.addImage(image);\n        // Second image is used by Cast Companion Library on the full screen activity that is shown\n        // when the cast dialog is clicked.\n        mediaMetadata.addImage(image);\n\n        return new MediaInfo.Builder(url)\n                .setContentType(\"audio/mpeg\")\n                .setStreamType(MediaInfo.STREAM_TYPE_BUFFERED)\n                .setMetadata(mediaMetadata)\n                .build();\n    }\n\n}\n```\n\n\n# \u304a\u308f\u308a\u306b\n`NanoHTTPD`\u304c\u3068\u3066\u3082\u4f7f\u3044\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\u30a2\u30d7\u30ea\u306e\u6a5f\u80fd\u3068\u3057\u3066\u3060\u3051\u3067\u306a\u304f\u3001\u958b\u767a\u4e2d\u306e\u30c7\u30d0\u30c3\u30b0\u60c5\u5831\u3092\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4e0a\u306b\u516c\u958b\u3059\u308b\u3088\u3046\u306a\u4f7f\u3044\u65b9\u3082\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u306f[sjnyag/localfilecast-demo](https://github.com/sjnyag/localfilecast-demo)\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059:smiley:\n", "tags": ["Android", "ChromeCast", "NanoHTTPD"]}