{"context": "\u5fc5\u8981\u306a\u3068\u3053\u308d\u3060\u3051\u307e\u3068\u3081\u307e\u3057\u305f\u3002\u8a66\u884c\u932f\u8aa4\u7de8\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\n\u7269\u7406\u914d\u7dda\n\u5c4a\u3044\u305f\u30bb\u30f3\u30b5\u306b\u3001\u30d4\u30f3\u30d8\u30c3\u30c0\u3092\u30cf\u30f3\u30c0\u4ed8\u3051\u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u914d\u7dda\u3057\u307e\u3059\u3002\n\n\u30bb\u30f3\u30b51pin(GND) -> Raspi 6\u756apin\n\u30bb\u30f3\u30b52pin(SDA) -> Raspi 3\u756apin\n\u30bb\u30f3\u30b53pin(SCL) -> Raspi 5\u756apin\n\u30bb\u30f3\u30b54pin(VDD) -> Raspi 1\u756apin\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n\nRaspberry pi\u3067I2C\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\nOS\u306e\u30b3\u30f3\u30d5\u30a3\u30b0\u30e1\u30cb\u30e5\u30fc\u3067\u8a2d\u5b9a\u3002\n$ sudo raspi-config\n\n\"9 Advenced Options\u201d -> \u201cA7 I2C\u201d \u306e\u9806\u306b\u30e1\u30cb\u30e5\u30fc\u3092\u9078\u629e\u3002\n\u300cWould you like the ARM I2C interface to be enabled?\u300d\u3068\u805e\u3044\u3066\u304f\u308b\u306e\u3067yes\u3092\u9078\u629e\u3002\n\u300cWould you like the I2C kernel module to be loaded by default?\u300d\u3068\u805e\u3044\u3066\u304f\u308b\u306e\u3067yes\u3092\u9078\u629e\u3002\n\u6b21\u306b\u3001/boot/config.txt\u3092\u7de8\u96c6\u3002\n$ sudo vi /boot/config.txt\n...\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u8ffd\u8a18\ndtparam=i2c_arm=on\n\n\u66f4\u306b\u3001/etc/modules\u3092\u7de8\u96c6\u3002\n$ sudo vi /etc/modules\n...\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u8ffd\u8a18\nsnd-bcm2835\ni2c-dev\n\n\u8a2d\u5b9a\u7d42\u4e86\u5f8c\u3001Raspy\u3092\u518d\u8d77\u52d5\u3002\n\u518d\u8d77\u52d5\u5f8c\u306b\u30ab\u30fc\u30cd\u30eb\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\n$ lsmod\n...\ni2c_dev                 6709  0 \nsnd_bcm2835            21342  0 \n...\n\n\n\u30c4\u30fc\u30eb\u985e\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n$ sudo apt-get install i2c-tools python-smbus\n\n\n\u30a2\u30c9\u30ec\u30b9\u78ba\u8a8d\n\u30bb\u30f3\u30b5\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n$ sudo i2cdetect -y 1\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- -- -- -- -- -- -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- 39 -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- --\n\n\u30a2\u30c9\u30ec\u30b90x39\u3067\u8a8d\u8b58\u3002\n\nPython\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n\u4ee5\u4e0b\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002\n#!/usr/bin/python -u\n# -*- coding: utf-8 -*-\n\nimport smbus\nimport time\n\n# Strawberry Linux\u793e\u306e\u300cTSL2561 \u7167\u5ea6\u30bb\u30f3\u30b5\u30fb\u30e2\u30b8\u30e5\u30fc\u30eb\u300d\u304b\u3089\n# I2C\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u30af\u30e9\u30b9\n# https://strawberry-linux.com/catalog/items?code=12561\n# 2016-05-03 Boyaki Machine\nclass SL_TSL2561:\n    def __init__(self, address, channel):\n        self.address    = address\n        self.channel    = channel\n        self.bus        = smbus.SMBus(self.channel)\n        self.gain       = 0x00          # 0x00=normal, 0x10=\u00d716\n        self.integrationTime    = 0x02  # 0x02=402ms, 0x01=101ms, 0x00=13.7ms\n        self.scale      = 1.0\n\n        # \u30bb\u30f3\u30b5\u8a2d\u5b9a\u306e\u521d\u671f\u5316\n        self.setLowGain()\n        self.setIntegrationTime('default')\n\n    def powerOn(self):\n        self.bus.write_i2c_block_data(self.address, 0x80, [0x03])\n        time.sleep(0.5)\n\n    def powerOff(self):\n        self.bus.write_i2c_block_data(self.address, 0x80, [0x00])\n\n    # High Gain\u306b\u30bb\u30c3\u30c8\u3059\u308b(16\u500d\u306e\u611f\u5ea6\uff1f)\n    def setHighGain(self):\n        # High Gain\u306b\u3059\u308b\u3068\u3046\u307e\u304fraw\u30c7\u30fc\u30bf\u304c\u53d6\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3002\n        # \u8981\u539f\u56e0\u8abf\u67fb ( 5047\u56fa\u5b9a\u5024\u306b\u306a\u308b )    \n        self.gain   = 0x10\n        data        = self.integrationTime | self.gain\n        self.bus.write_i2c_block_data(self.address, 0x81, [data])\n        self.calcScale()\n\n    # Low Gain(default) \u306b\u30bb\u30c3\u30c8\u3059\u308b \n    def setLowGain(self):\n        self.gain   = 0x00\n        data        = self.integrationTime | self.gain\n        self.bus.write_i2c_block_data(self.address, 0x81, [data])\n        self.calcScale()\n\n    # \u7a4d\u5206\u3059\u308b\u6642\u9593\u306e\u8a2d\u5b9a\uff08\uff11\u56de\u306e\u30bb\u30f3\u30b7\u30f3\u30b0\u306b\u304b\u3051\u308b\u6642\u9593\uff1f\uff09\n    # val = shor, middle, logn(default)\n    def setIntegrationTime(self, val):\n        if val=='short':\n            self.integrationTime    = 0x00  # 13.7ms scale=0.034\n        elif val=='middle':\n            self.integrationTime    = 0x01  # 101ms  scale=0.252\n        else:\n            self.integrationTime    = 0x02  # defaultVal 402ms  scale=1.0\n        data = self.integrationTime | self.gain\n        self.bus.write_i2c_block_data(self.address, 0x81, [data])\n        self.calcScale()\n\n    def getVisibleLightRawData(self):\n        data    = self.bus.read_i2c_block_data(self.address, 0xAC ,2)\n        raw     = data[1] << 8 | data[0]    # 16bit\u3067\u4e0b\u4f4d\u30d0\u30a4\u30c8\u304c\u5148\n        return raw\n\n    def getInfraredRawData(self):\n        data    = self.bus.read_i2c_block_data(self.address, 0xAE ,2)\n        raw     = data[1] << 8 | data[0]    # 16bit\u3067\u4e0b\u4f4d\u30d0\u30a4\u30c8\u304c\u5148\n        return raw\n\n    def getRawData(self):\n        data    = self.bus.read_i2c_block_data(self.address, 0xAC ,4)\n        VL      = data[1] << 8 | data[0]    # \u53ef\u8996\u5149\u300016bit\u3067\u4e0b\u4f4d\u30d0\u30a4\u30c8\u304c\u5148\n        IR      = data[3] << 8 | data[2]    # \u8d64\u5916\u7dda\u300016bit\u3067\u4e0b\u4f4d\u30d0\u30a4\u30c8\u304c\u5148\n        return (VL,IR)\n\n    def calcScale(self):\n        _scale = 1.0\n        # integrationTime\u306b\u3088\u308b\u30b9\u30b1\u30fc\u30eb\n        if self.integrationTime == 0x01:    # middle\n            _scale = _scale / 0.252\n        elif self.integrationTime == 0x00:  # short\n            _scale = _scale / 0.034\n\n        # gain\u306b\u3088\u308b\u30b9\u30b1\u30fc\u30eb\n        if self.gain == 0x00 :              # gain 1\n            _scale = _scale * 16.0\n\n        self.scale = _scale\n\n    def getLux(self):\n        # \u30bb\u30f3\u30b5\u751f\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n        raw  = self.getRawData()\n\n        # 65535\u306e\u6642\u306f\u30a8\u30e9\u30fc\u51fa\u529b\u306b\u3059\u308b\u5b9f\u88c5\n        if raw[0] == 65535 or raw[1] == 65535:\n            return \"Range Over\"\n\n        # \u30bb\u30f3\u30b5\u8a2d\u5b9a\u306b\u3088\u308a\u751f\u30c7\u30fc\u30bf\u3092\u30b9\u30b1\u30fc\u30eb\u3059\u308b\n        VLRD = raw[0] * self.scale\n        IRRD = raw[1] * self.scale\n\n        # 0\u306e\u9664\u7b97\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b               \n        if (float(VLRD) == 0):\n            ratio = 9999\n        else:\n            ratio = (IRRD / float(VLRD))\n\n        # Lux\u306e\u7b97\u51fa\n        if ((ratio >= 0) & (ratio <= 0.52)):\n            lux = (0.0315 * VLRD) - (0.0593 * VLRD * (ratio**1.4))\n        elif (ratio <= 0.65):\n            lux = (0.0229 * VLRD) - (0.0291 * IRRD)\n        elif (ratio <= 0.80):\n            lux = (0.0157 * VLRD) - (0.018 * IRRD)\n        elif (ratio <= 1.3):\n            lux = (0.00338 * VLRD) - (0.0026 * IRRD)\n        elif (ratio > 1.3):\n            lux = 0\n\n        return lux \n\n\nif __name__ == \"__main__\":\n    sensor  = SL_TSL2561(0x39,1) \n    sensor.powerOn()\n    # sensor.setHighGain()\n    sensor.setIntegrationTime('default')\n    while True:\n        print \"Lux : \" + str(sensor.getLux())\n        time.sleep(1.0)\n\n\n\n\u7559\u610f\u70b9\n\nHigh Gain\u306b\u3057\u305f\u6642\u3001\u3042\u308b\u7a0b\u5ea6\u306e\u7167\u5ea6\uff08\uff15\u6708\u65e5\u4e2d\u306e\u7a93\u969b\u304f\u3089\u3044\uff09\u304c\u3042\u308b\u3068\u7570\u5e38\u306a\u5024\u306b\u56fa\u5b9a\u3055\u308c\u308b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5fc5\u8981\u306a\u3068\u3053\u308d\u3060\u3051\u307e\u3068\u3081\u307e\u3057\u305f\u3002\u8a66\u884c\u932f\u8aa4\u7de8\u306f[\u3053\u3061\u3089](http://qiita.com/boyaki_machine/items/a238e9d03455a2eea26e)\u3067\u3059\u3002\n\n# \u7269\u7406\u914d\u7dda\n\u5c4a\u3044\u305f\u30bb\u30f3\u30b5\u306b\u3001\u30d4\u30f3\u30d8\u30c3\u30c0\u3092\u30cf\u30f3\u30c0\u4ed8\u3051\u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u914d\u7dda\u3057\u307e\u3059\u3002\n\n> \u30bb\u30f3\u30b51pin(GND) -> Raspi 6\u756apin\n> \u30bb\u30f3\u30b52pin(SDA) -> Raspi 3\u756apin\n> \u30bb\u30f3\u30b53pin(SCL) -> Raspi 5\u756apin\n> \u30bb\u30f3\u30b54pin(VDD) -> Raspi 1\u756apin\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n![TSL2561.png](https://qiita-image-store.s3.amazonaws.com/0/123906/f61fb727-14ba-f689-088a-f914a5c762ce.png)\n\n# Raspberry pi\u3067I2C\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\n\nOS\u306e\u30b3\u30f3\u30d5\u30a3\u30b0\u30e1\u30cb\u30e5\u30fc\u3067\u8a2d\u5b9a\u3002\n\n```zsh\n$ sudo raspi-config\n```\n\"9 Advenced Options\u201d -> \u201cA7 I2C\u201d \u306e\u9806\u306b\u30e1\u30cb\u30e5\u30fc\u3092\u9078\u629e\u3002\n\u300cWould you like the ARM I2C interface to be enabled?\u300d\u3068\u805e\u3044\u3066\u304f\u308b\u306e\u3067yes\u3092\u9078\u629e\u3002\n\u300cWould you like the I2C kernel module to be loaded by default?\u300d\u3068\u805e\u3044\u3066\u304f\u308b\u306e\u3067yes\u3092\u9078\u629e\u3002\n\n\u6b21\u306b\u3001/boot/config.txt\u3092\u7de8\u96c6\u3002\n\n```zsh\n$ sudo vi /boot/config.txt\n...\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u8ffd\u8a18\ndtparam=i2c_arm=on\n```\n\u66f4\u306b\u3001/etc/modules\u3092\u7de8\u96c6\u3002\n\n```zsh\n$ sudo vi /etc/modules\n...\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u8ffd\u8a18\nsnd-bcm2835\ni2c-dev\n```\n\n\u8a2d\u5b9a\u7d42\u4e86\u5f8c\u3001Raspy\u3092\u518d\u8d77\u52d5\u3002\n\u518d\u8d77\u52d5\u5f8c\u306b\u30ab\u30fc\u30cd\u30eb\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\n\n```zsh\n$ lsmod\n...\ni2c_dev                 6709  0 \nsnd_bcm2835            21342  0 \n...\n```\n# \u30c4\u30fc\u30eb\u985e\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n```zsh\n$ sudo apt-get install i2c-tools python-smbus\n```\n\n# \u30a2\u30c9\u30ec\u30b9\u78ba\u8a8d\n\u30bb\u30f3\u30b5\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```zsh\n$ sudo i2cdetect -y 1\n     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n00:          -- -- -- -- -- -- -- -- -- -- -- -- --\n10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n30: -- -- -- -- -- -- -- -- -- 39 -- -- -- -- -- --\n40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n70: -- -- -- -- -- -- -- --\n```\n\u30a2\u30c9\u30ec\u30b90x39\u3067\u8a8d\u8b58\u3002\n\n# Python\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n\u4ee5\u4e0b\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```py\n#!/usr/bin/python -u\n# -*- coding: utf-8 -*-\n\nimport smbus\nimport time\n\n# Strawberry Linux\u793e\u306e\u300cTSL2561 \u7167\u5ea6\u30bb\u30f3\u30b5\u30fb\u30e2\u30b8\u30e5\u30fc\u30eb\u300d\u304b\u3089\n# I2C\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u30af\u30e9\u30b9\n# https://strawberry-linux.com/catalog/items?code=12561\n# 2016-05-03 Boyaki Machine\nclass SL_TSL2561:\n\tdef __init__(self, address, channel):\n\t\tself.address\t= address\n\t\tself.channel\t= channel\n\t\tself.bus\t\t= smbus.SMBus(self.channel)\n\t\tself.gain \t\t= 0x00\t\t\t# 0x00=normal, 0x10=\u00d716\n\t\tself.integrationTime \t= 0x02\t# 0x02=402ms, 0x01=101ms, 0x00=13.7ms\n\t\tself.scale \t\t= 1.0\n\n\t\t# \u30bb\u30f3\u30b5\u8a2d\u5b9a\u306e\u521d\u671f\u5316\n\t\tself.setLowGain()\n\t\tself.setIntegrationTime('default')\n\n\tdef powerOn(self):\n\t\tself.bus.write_i2c_block_data(self.address, 0x80, [0x03])\n\t\ttime.sleep(0.5)\n\n\tdef powerOff(self):\n\t\tself.bus.write_i2c_block_data(self.address, 0x80, [0x00])\n\n\t# High Gain\u306b\u30bb\u30c3\u30c8\u3059\u308b(16\u500d\u306e\u611f\u5ea6\uff1f)\n\tdef setHighGain(self):\n\t\t# High Gain\u306b\u3059\u308b\u3068\u3046\u307e\u304fraw\u30c7\u30fc\u30bf\u304c\u53d6\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3002\n\t\t# \u8981\u539f\u56e0\u8abf\u67fb ( 5047\u56fa\u5b9a\u5024\u306b\u306a\u308b )\t\n\t\tself.gain \t= 0x10\n\t\tdata \t\t= self.integrationTime | self.gain\n\t\tself.bus.write_i2c_block_data(self.address, 0x81, [data])\n\t\tself.calcScale()\n\n\t# Low Gain(default) \u306b\u30bb\u30c3\u30c8\u3059\u308b \n\tdef setLowGain(self):\n\t\tself.gain \t= 0x00\n\t\tdata \t\t= self.integrationTime | self.gain\n\t\tself.bus.write_i2c_block_data(self.address, 0x81, [data])\n\t\tself.calcScale()\n\n\t# \u7a4d\u5206\u3059\u308b\u6642\u9593\u306e\u8a2d\u5b9a\uff08\uff11\u56de\u306e\u30bb\u30f3\u30b7\u30f3\u30b0\u306b\u304b\u3051\u308b\u6642\u9593\uff1f\uff09\n\t# val = shor, middle, logn(default)\n\tdef setIntegrationTime(self, val):\n\t\tif val=='short':\n\t\t\tself.integrationTime \t= 0x00\t# 13.7ms scale=0.034\n\t\telif val=='middle':\n\t\t\tself.integrationTime \t= 0x01 \t# 101ms\t scale=0.252\n\t\telse:\n\t\t\tself.integrationTime \t= 0x02  # defaultVal 402ms  scale=1.0\n\t\tdata = self.integrationTime | self.gain\n\t\tself.bus.write_i2c_block_data(self.address, 0x81, [data])\n\t\tself.calcScale()\n\n\tdef getVisibleLightRawData(self):\n\t\tdata \t= self.bus.read_i2c_block_data(self.address, 0xAC ,2)\n\t\traw \t= data[1] << 8 | data[0]\t# 16bit\u3067\u4e0b\u4f4d\u30d0\u30a4\u30c8\u304c\u5148\n\t\treturn raw\n\n\tdef getInfraredRawData(self):\n\t\tdata \t= self.bus.read_i2c_block_data(self.address, 0xAE ,2)\n\t\traw \t= data[1] << 8 | data[0]\t# 16bit\u3067\u4e0b\u4f4d\u30d0\u30a4\u30c8\u304c\u5148\n\t\treturn raw\n\n\tdef getRawData(self):\n\t\tdata \t= self.bus.read_i2c_block_data(self.address, 0xAC ,4)\n\t\tVL \t\t= data[1] << 8 | data[0]\t# \u53ef\u8996\u5149\u300016bit\u3067\u4e0b\u4f4d\u30d0\u30a4\u30c8\u304c\u5148\n\t\tIR \t\t= data[3] << 8 | data[2]\t# \u8d64\u5916\u7dda\u300016bit\u3067\u4e0b\u4f4d\u30d0\u30a4\u30c8\u304c\u5148\n\t\treturn (VL,IR)\n\n\tdef calcScale(self):\n\t\t_scale = 1.0\n\t\t# integrationTime\u306b\u3088\u308b\u30b9\u30b1\u30fc\u30eb\n\t\tif self.integrationTime == 0x01:\t# middle\n\t\t\t_scale = _scale / 0.252\n\t\telif self.integrationTime == 0x00:\t# short\n\t\t\t_scale = _scale / 0.034\n\t\t\n\t\t# gain\u306b\u3088\u308b\u30b9\u30b1\u30fc\u30eb\n\t\tif self.gain == 0x00 :\t\t\t\t# gain 1\n\t\t\t_scale = _scale * 16.0\n\n\t\tself.scale = _scale\n\n\tdef getLux(self):\n\t\t# \u30bb\u30f3\u30b5\u751f\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n\t\traw  = self.getRawData()\n\n\t\t# 65535\u306e\u6642\u306f\u30a8\u30e9\u30fc\u51fa\u529b\u306b\u3059\u308b\u5b9f\u88c5\n\t\tif raw[0] == 65535 or raw[1] == 65535:\n\t\t\treturn \"Range Over\"\n\n\t\t# \u30bb\u30f3\u30b5\u8a2d\u5b9a\u306b\u3088\u308a\u751f\u30c7\u30fc\u30bf\u3092\u30b9\u30b1\u30fc\u30eb\u3059\u308b\n\t\tVLRD = raw[0] * self.scale\n\t\tIRRD = raw[1] * self.scale\n\n\t\t# 0\u306e\u9664\u7b97\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b               \n\t\tif (float(VLRD) == 0):\n\t\t\tratio = 9999\n\t\telse:\n\t\t\tratio = (IRRD / float(VLRD))\n\n\t\t# Lux\u306e\u7b97\u51fa\n\t\tif ((ratio >= 0) & (ratio <= 0.52)):\n\t\t\tlux = (0.0315 * VLRD) - (0.0593 * VLRD * (ratio**1.4))\n\t\telif (ratio <= 0.65):\n\t\t\tlux = (0.0229 * VLRD) - (0.0291 * IRRD)\n\t\telif (ratio <= 0.80):\n\t\t\tlux = (0.0157 * VLRD) - (0.018 * IRRD)\n\t\telif (ratio <= 1.3):\n\t\t\tlux = (0.00338 * VLRD) - (0.0026 * IRRD)\n\t\telif (ratio > 1.3):\n\t\t\tlux = 0\n\n\t\treturn lux \n\n\nif __name__ == \"__main__\":\n\tsensor \t= SL_TSL2561(0x39,1) \n\tsensor.powerOn()\n\t# sensor.setHighGain()\n\tsensor.setIntegrationTime('default')\n\twhile True:\n\t\tprint \"Lux : \" + str(sensor.getLux())\n\t\ttime.sleep(1.0)\n\n```\n\n# \u7559\u610f\u70b9\n\n- High Gain\u306b\u3057\u305f\u6642\u3001\u3042\u308b\u7a0b\u5ea6\u306e\u7167\u5ea6\uff08\uff15\u6708\u65e5\u4e2d\u306e\u7a93\u969b\u304f\u3089\u3044\uff09\u304c\u3042\u308b\u3068\u7570\u5e38\u306a\u5024\u306b\u56fa\u5b9a\u3055\u308c\u308b\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n", "tags": ["raspbian", "RaspberryPi", "Python", "Raspberrypi3"]}