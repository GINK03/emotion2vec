{"tags": ["\u3069\u3046\u66f8\u304f", "Erlang"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002http://qiita.com/items/93cde1a6b7561426a3ac\nErlang\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u7dda\u304c\u4ea4\u53c9\u3057\u3066\u3044\u308b\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97\u3057(cross_p)\u3001\u305d\u306e\u5217\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u307e\u3059(reorder_cols)\u3002\u3053\u308c\u3092\u30c7\u30fc\u30bf\u30fc\u306e\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u3066\u3044\u307e\u3059(foldl)\u3002\n\nba.erl\n-module(ba).\n-export([tests/0, test/2, amida/1]).\n\ntests() ->\n  test(\"d6-7b-e1-9e\", \"740631825\"), % 0\n  test(\"6f-dd-ff-ff\", \"230685147\"). % 41\n\ntest(Data, Expected) ->\n  io:fwrite(\"~s -> ~s, ~w~n\", [Data, Expected, amida(Data) =:= Expected]).\n\namida(Data) ->\n  Hexes = string:tokens(Data, \"-\"),\n  Init_cols = array:from_list(\"012345678\"),\n  array:to_list(lists:foldl(fun reorder_one_row/2, Init_cols, Hexes)).\n\n% change column order of one row.\nreorder_one_row(Hex, Cols) -> reorder_cols(Cols, cross_p(bin(Hex))).\n\n% array(0123456789), [{0, 2}, {3, 4}] -> array(2104356789).\nreorder_cols(A, [])         -> A;\nreorder_cols(A, [{X, Y}|T]) -> reorder_cols(swap(A, X, Y), T).\n\n% array(abcd), 1, 3 -> array(adcb). Indexes are zero origin.\nswap(A, X, Y) ->\n  Xvalue = array:get(X, A),\n  Yvalue = array:get(Y, A),\n  array:set(Y, Xvalue, array:set(X, Yvalue, A)).\n\n% \"d6\" -> \"11010110\".\nbin(Hex) -> integer_to_list(list_to_integer(Hex, 16), 2).\n\n% \"11010110\" -> [{5, 7}, {3, 4}, {0, 2}].\ncross_p(Bin)              -> cross_p(Bin ++ \"0\", $0, 0, []).\ncross_p([], _, _, L)      -> L;\ncross_p([$0|T], $0, S, L) -> cross_p(T, $0, S, L);\ncross_p([$1|T], $0, _, L) -> cross_p(T, $1, 8 - length(T), L);\ncross_p([$0|T], $1, S, L) -> cross_p(T, $0, 0, [{S, 8 - length(T)} | L]);\ncross_p([$1|T], $1, S, L) -> cross_p(T, $1, S, L).\n\n\nhttp://qiita.com/items/93cde1a6b7561426a3ac\nErlang\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u7dda\u304c\u4ea4\u53c9\u3057\u3066\u3044\u308b\u30dd\u30a4\u30f3\u30c8\u3092\u53d6\u5f97\u3057(cross_p)\u3001\u305d\u306e\u5217\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u307e\u3059(reorder_cols)\u3002\u3053\u308c\u3092\u30c7\u30fc\u30bf\u30fc\u306e\u6570\u3060\u3051\u7e70\u308a\u8fd4\u3057\u3066\u3044\u307e\u3059(foldl)\u3002\n\n```erlang:ba.erl\n-module(ba).\n-export([tests/0, test/2, amida/1]).\n\ntests() ->\n  test(\"d6-7b-e1-9e\", \"740631825\"), % 0\n  test(\"6f-dd-ff-ff\", \"230685147\"). % 41\n\ntest(Data, Expected) ->\n  io:fwrite(\"~s -> ~s, ~w~n\", [Data, Expected, amida(Data) =:= Expected]).\n\namida(Data) ->\n  Hexes = string:tokens(Data, \"-\"),\n  Init_cols = array:from_list(\"012345678\"),\n  array:to_list(lists:foldl(fun reorder_one_row/2, Init_cols, Hexes)).\n\n% change column order of one row.\nreorder_one_row(Hex, Cols) -> reorder_cols(Cols, cross_p(bin(Hex))).\n\n% array(0123456789), [{0, 2}, {3, 4}] -> array(2104356789).\nreorder_cols(A, [])         -> A;\nreorder_cols(A, [{X, Y}|T]) -> reorder_cols(swap(A, X, Y), T).\n\n% array(abcd), 1, 3 -> array(adcb). Indexes are zero origin.\nswap(A, X, Y) ->\n  Xvalue = array:get(X, A),\n  Yvalue = array:get(Y, A),\n  array:set(Y, Xvalue, array:set(X, Yvalue, A)).\n\n% \"d6\" -> \"11010110\".\nbin(Hex) -> integer_to_list(list_to_integer(Hex, 16), 2).\n\n% \"11010110\" -> [{5, 7}, {3, 4}, {0, 2}].\ncross_p(Bin)              -> cross_p(Bin ++ \"0\", $0, 0, []).\ncross_p([], _, _, L)      -> L;\ncross_p([$0|T], $0, S, L) -> cross_p(T, $0, S, L);\ncross_p([$1|T], $0, _, L) -> cross_p(T, $1, 8 - length(T), L);\ncross_p([$0|T], $1, S, L) -> cross_p(T, $0, 0, [{S, 8 - length(T)} | L]);\ncross_p([$1|T], $1, S, L) -> cross_p(T, $1, S, L).\n```\n"}