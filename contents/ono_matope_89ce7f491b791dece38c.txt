{"context": " More than 1 year has passed since last update.\n\nHTTP Trailer\nGo\u306enet/http\u30d1\u30c3\u30b1\u30fc\u30b8\u306fHTTP Trailer\u306e\u9001\u4fe1\u304a\u3088\u3073\u53d7\u4fe1\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002Trailer\u3068\u306f\u3001HTTP\u30ea\u30af\u30a8\u30b9\u30c8Body\u306e\u672b\u5c3e\u306b\u4ed8\u4e0e\u3067\u304d\u308b\u30d8\u30c3\u30c0\u3068\u540c\u69d8\u306e\u69cb\u9020\u3067\u3059\u3002Transfer-Encoding: chunked\u306e\u3068\u304d\u306e\u307f\u5229\u7528\u53ef\u80fd\u3067\u3001Body\u9001\u4fe1\u5f8c\u306b\u3057\u304b\u5206\u304b\u3089\u306a\u3044\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u306a\u3069\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u4ed8\u4e0e\u3057\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u306a\u304a\u3001Go 1.4\u6642\u70b9\u3067\u306f\u30b5\u30fc\u30d0\u30ec\u30b9\u30dd\u30f3\u30b9\u3078\u306eTrailer\u4ed8\u4e0e\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059(Hijack\u3059\u308c\u3070\u53ef\u80fd)\u3002\n\n\u4f7f\u3044\u65b9\nHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30ea\u30af\u30a8\u30b9\u30c8\u5074\u3067\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u3092TransferEncoding: chunked \u306b\u8a2d\u5b9a\u3059\u308b\n\n\n req.ContentLength = 0 or -1 \u3067\u3082\u8a2d\u5b9a\u53ef\n\n\n\u9001\u4fe1\u3059\u308b\u524d\u306breq.Trailer\u3092\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u304a\u304f\n\u9001\u4fe1\u5f8c\u3001Body\u304cEOF\u306b\u306a\u308b\u524d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067req.Trailer\u306bTrailer\u3092\u8a2d\u5b9a\u3059\u308b\n\nHTTP\u30b5\u30fc\u30d0\u30fc\u30ea\u30af\u30a8\u30b9\u30c8\u5074\u3067\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u3092\u8aad\u307f\u7d42\u308f\u3063\u305f\u3042\u3068\u3067r.Trailer\u3092\u53c2\u7167\u3059\u308b\n\n\u307e\u3068\u3081\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\nExample\npackage main\n\nimport (\n    \"io\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n)\n\nvar ch = make(chan bool, 0)\n\nfunc Handler(w http.ResponseWriter, r *http.Request) {\n    log.Println(r.Header)\n    log.Println(r.Trailer)          // <- r.Body\u3092\u8aad\u3080\u524d\u306fTrailer\u3092\u53d6\u5f97\u3067\u304d\u306a\u3044\n    io.Copy(ioutil.Discard, r.Body) // <- r.Body\u3092\u8aad\u307f\u8fbc\u307f\n    log.Println(r.Trailer)          // <- \u8aad\u307f\u7d42\u308f\u3063\u305f\u306e\u3067\u53d6\u5f97\u3067\u304d\u308b\n\n    w.WriteHeader(http.StatusOK)\n    ch <- true\n}\n\nfunc main() {\n    // \u30b5\u30fc\u30d0\u8d77\u52d5\n    http.HandleFunc(\"/\", Handler)\n    go http.ListenAndServe(\":8080\", nil)\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\u767a\u884c\n    r, w := io.Pipe()\n\n    req, _ := http.NewRequest(\"PUT\", \"http://localhost:8080/test\", r)\n    req.TransferEncoding = []string{\"chunked\"} // <- TransferEncoding: chunked \u3092\u8a2d\u5b9a\n    req.Trailer = make(http.Header)\n    go http.DefaultClient.Do(req)\n\n    io.WriteString(w, \"THIS IS A REQUEST BODY\")\n    req.Trailer.Set(\"XXX\", \"my-trailer\")  // <- Close\u524d\u306bTrailer\u3092\u30bb\u30c3\u30c8\n    w.Close()\n\n    // blocking...\n    <-ch\n}\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n2015/03/10 18:03:13 map[]\n2015/03/10 18:03:13 map[Xxx:[my-trailer]]\n\n# HTTP Trailer\nGo\u306e``net/http``\u30d1\u30c3\u30b1\u30fc\u30b8\u306fHTTP Trailer\u306e\u9001\u4fe1\u304a\u3088\u3073\u53d7\u4fe1\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002Trailer\u3068\u306f\u3001HTTP\u30ea\u30af\u30a8\u30b9\u30c8Body\u306e\u672b\u5c3e\u306b\u4ed8\u4e0e\u3067\u304d\u308b\u30d8\u30c3\u30c0\u3068\u540c\u69d8\u306e\u69cb\u9020\u3067\u3059\u3002``Transfer-Encoding: chunked``\u306e\u3068\u304d\u306e\u307f\u5229\u7528\u53ef\u80fd\u3067\u3001Body\u9001\u4fe1\u5f8c\u306b\u3057\u304b\u5206\u304b\u3089\u306a\u3044\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u306a\u3069\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u4ed8\u4e0e\u3057\u305f\u3044\u3068\u304d\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n\u306a\u304a\u3001Go 1.4\u6642\u70b9\u3067\u306f\u30b5\u30fc\u30d0\u30ec\u30b9\u30dd\u30f3\u30b9\u3078\u306eTrailer\u4ed8\u4e0e\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u3067\u3059(Hijack\u3059\u308c\u3070\u53ef\u80fd)\u3002\n\n# \u4f7f\u3044\u65b9\n\nHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30ea\u30af\u30a8\u30b9\u30c8\u5074\u3067\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n- \u30ea\u30af\u30a8\u30b9\u30c8\u3092``TransferEncoding: chunked`` \u306b\u8a2d\u5b9a\u3059\u308b\n  -  req.ContentLength = 0 or -1 \u3067\u3082\u8a2d\u5b9a\u53ef\n- \u9001\u4fe1\u3059\u308b\u524d\u306b``req.Trailer``\u3092\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3057\u3066\u304a\u304f\n- \u9001\u4fe1\u5f8c\u3001Body\u304cEOF\u306b\u306a\u308b\u524d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067``req.Trailer``\u306bTrailer\u3092\u8a2d\u5b9a\u3059\u308b\n\nHTTP\u30b5\u30fc\u30d0\u30fc\u30ea\u30af\u30a8\u30b9\u30c8\u5074\u3067\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n- \u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u3092\u8aad\u307f\u7d42\u308f\u3063\u305f\u3042\u3068\u3067``r.Trailer``\u3092\u53c2\u7167\u3059\u308b\n\n\n\u307e\u3068\u3081\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\n# Example\n\n```go\npackage main\n\nimport (\n\t\"io\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n)\n\nvar ch = make(chan bool, 0)\n\nfunc Handler(w http.ResponseWriter, r *http.Request) {\n\tlog.Println(r.Header)\n\tlog.Println(r.Trailer)          // <- r.Body\u3092\u8aad\u3080\u524d\u306fTrailer\u3092\u53d6\u5f97\u3067\u304d\u306a\u3044\n\tio.Copy(ioutil.Discard, r.Body) // <- r.Body\u3092\u8aad\u307f\u8fbc\u307f\n\tlog.Println(r.Trailer)          // <- \u8aad\u307f\u7d42\u308f\u3063\u305f\u306e\u3067\u53d6\u5f97\u3067\u304d\u308b\n\n\tw.WriteHeader(http.StatusOK)\n\tch <- true\n}\n\nfunc main() {\n\t// \u30b5\u30fc\u30d0\u8d77\u52d5\n\thttp.HandleFunc(\"/\", Handler)\n\tgo http.ListenAndServe(\":8080\", nil)\n\n\t// \u30ea\u30af\u30a8\u30b9\u30c8\u767a\u884c\n\tr, w := io.Pipe()\n\n\treq, _ := http.NewRequest(\"PUT\", \"http://localhost:8080/test\", r)\n\treq.TransferEncoding = []string{\"chunked\"} // <- TransferEncoding: chunked \u3092\u8a2d\u5b9a\n\treq.Trailer = make(http.Header)\n\tgo http.DefaultClient.Do(req)\n\n\tio.WriteString(w, \"THIS IS A REQUEST BODY\")\n\treq.Trailer.Set(\"XXX\", \"my-trailer\")  // <- Close\u524d\u306bTrailer\u3092\u30bb\u30c3\u30c8\n\tw.Close()\n\n\t// blocking...\n\t<-ch\n}\n```\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n```bash\n2015/03/10 18:03:13 map[]\n2015/03/10 18:03:13 map[Xxx:[my-trailer]]\n```\n", "tags": ["Go1.3", "HTTP1.1"]}