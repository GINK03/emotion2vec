{"tags": ["RubyOnRails", "Ruby", "activeadmin"], "context": "\n\nOverview\nIt's sammarized information throughout working with Active Admin on Rails\n(Ruby on rails 4.3)\nTarget to read this content:\n1. Basic knowledge of Ruby on Rails\n2. High standard ActiveRecord knowledge\nScope: \nCovering to basic integration active admin\nActive Admin is a gem to create web page that supports CRUD feature via several kind of parameters configured in Model.\nIntegrating Device and Cancan, these helps to realize to inject authorization to each pages created.\nFormastic is used too generate forms internally.\nValidation in pages shall be done by Model's validation settings.\nActiveAdmin\nhttp://activeadmin.info/docs/documentation.html\nhttp://www.rubydoc.info/github/activeadmin/activeadmin\nFormastic\nhttp://www.rubydoc.info/github/justinfrench/formtastic/Formtastic/Helpers/InputHelper\nCanCan\nhttp://www.rubydoc.info/github/CanCanCommunity/cancancan\n\n1. Overriding each pages\n\nList of model's content #index\nDisplaying a Model's row information\u3000 #show\nModification of a Model's row #edit\nExport & Download csv formatted model \u3000#csv\n\nAbove actions are created by default and files are stored under app/admin/.(File name mustb be $ModelName.rb)\n*Model and created file must always one\u2010to\u2010one *\nCreate subclass of original model when you need to create different page from a model.\nBelow example is basic code to add model and block to ActiveAdmin's register method.\nActiveAdmin.register $ModelName do\n# All configuration and process must be threre\nend\n\n\n1.1. Event Handling Controller\nMethod that is able to override in above block is written in [resource_dsl.rb].\n(https://github.com/activeadmin/activeadmin/blob/master/lib/active_admin/resource_dsl.rb)\nYou can customize pages by filling up block throughout the method provided active admin inside above block '# All configuration and process must be threre'\nindex\nindex do\n # check this page\n column : current model's field\n actions\u3000\u3000# show,edit,remove link will be displayed according to permit_params, it will be explained later on this page.\nend\n\nshow\nshow do\n  show do\n    attributes_table do\n      row : model's field name\n      end\n    end\n    active_admin_comments\u3000\u3000# comment form\n    render 'some_partial'\u3000# can be rendered from view\nend\n\nform\nNote that this 'f' is ActionView\nform do |f|\n    inputs 'Title' do\n      input :model's field name\n    end\nend\n\ncsv\ncsv do\n    column :model's field name\nend\n\nWhen you need to create original action for adding new pages, you can use action_item.\n\n1.2. Model's handler\nOverridable methods in 'controller do' are written in  data_access.rb\nYou can utilize this feature when you need to add condition to retrieving model or override logic.\nFor example, write something in scoped_collection when you need to customized list in index page.\nYou will probably face to situation to join table to optimize list. \nActiveRecord's loading featureRemember active record preload or includes to optimize DB access.\ncontroller do\n   def scoped_collection\n     super\u3000# model call \n     super.where(filter: condition) # Adding condition to model\n     $ModelName.includes(:RelatedModelName)\n   end\n    def find_resource\n      # override to find a resouce from model (edit,show)\n    end\n   def create\n      # accept POST request of creating record\n   end\n   def update\n      # accept POST request of modifying record\n   end\n  end\nend\n\n\n2.Authentication\nauthentication\n\n2.1. configuration\nfollowing configuration must be done in config/initializers/active_admin.rb.\n# the method controllers used to force authentication\nconfig.authentication_method = :authenticate_admin_user!\n\n# the method used to access the current user\n# It's possible to call this methos in ActiveAdmin.register\u3000.By calling this method it will return AdminUserModel currently logged in.\nconfig.current_user_method = :current_admin_user\n\n\n2.2. Cancan\nAfter installing ActiveAdmin,following 3 models are created AdminUser,AdminUserAssign,AdminRole\nPut CRUD settings for each models inside app/models/ability.rb\ncancan\nclass Ability\n  include CanCan::Ability\n  def initialize(user)\n    can :manage, $ModelName\n  end\n\n  def $\u30ed\u30fc\u30eb\u540d\n    can :manage, $ModelName\n  end\nend\n\n\n2.3. Limitation of resource access\nPutting permit_params inside ActiveAdmin.register shall provide access control about each fields of target model.\nWriting actions will provide entire CRUD limitation control.\npermit_params\npermit_params :$FieldName, :$FieldName\nactions :all, except: [:update, :destroy]\n\n\n3. SearchBox and Scope customization\n\n3.1 Search Box\nIt's posssible to cutomize search box right side on screen.\nAdding 'filter' in ActiveAdmin.register will realize customization.\nsidebar\nfilter :\u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\nfilter :\u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d, collection: proc{ #something }.call\n\n\n3.2 Scope\nIf you set scope, Scope button shall be displayed upper side of screen.\nscope\nscope :all, default: true do |user|\n  # do something\nend\nscope :$\u30d5\u30a3\u30eb\u30bf\u540d do |user|\n  # do something\nend\n\n\n4. Other things\n\n4.1 Customizing menus\nKeep this in your mind 'it's possible to customize menu always displayed top of pages. You will need this design consideration.\nmenu\n\n4.2 Creating new pages\nIf you need to create pages not related specific model,you can use 'ActiveAdmin.register_page'\nregister_page\nIt is useful such as normal static page and view. \nBut mind about scope issue, @instance variable can't be used. \n'controller do' or 'show','index' , these are instance of different classes and you can't pass instance variable directory.If you need to extend logic inside view pass it as render's argument.\ncontent do\n  render partial: '$page_path'\u3000\n  render $page_path'\u3000, { data: @data }\nend\n\n# Overview\nIt's sammarized information throughout working with Active Admin on Rails\n(Ruby on rails 4.3)\n\nTarget to read this content:\n1. Basic knowledge of Ruby on Rails\n2. High standard ActiveRecord knowledge\n\nScope: \nCovering to basic integration active admin\n\nActive Admin is a gem to create web page that supports CRUD feature via several kind of parameters configured in Model.\n\nIntegrating Device and Cancan, these helps to realize to inject authorization to each pages created.\n\nFormastic is used too generate forms internally.\n\nValidation in pages shall be done by Model's validation settings.\n\nActiveAdmin\nhttp://activeadmin.info/docs/documentation.html\nhttp://www.rubydoc.info/github/activeadmin/activeadmin\n\nFormastic\nhttp://www.rubydoc.info/github/justinfrench/formtastic/Formtastic/Helpers/InputHelper\n\nCanCan\nhttp://www.rubydoc.info/github/CanCanCommunity/cancancan\n\n# 1. Overriding each pages\n1. List of model's content #index\n2. Displaying a Model's row information\u3000 #show\n3. Modification of a Model's row #edit\n4. Export & Download csv formatted model \u3000#csv\n\nAbove actions are created by default and files are stored under app/admin/.(File name mustb be $ModelName.rb)\n\n**Model and created file must always one\u2010to\u2010one **\nCreate subclass of original model when you need to create different page from a model.\nBelow example is basic code to add model and block to ActiveAdmin's register method.\n\n```ruby\nActiveAdmin.register $ModelName do\n# All configuration and process must be threre\nend\n```\n\n## 1.1. Event Handling Controller\nMethod that is able to override in above block is written in [resource_dsl.rb].\n(https://github.com/activeadmin/activeadmin/blob/master/lib/active_admin/resource_dsl.rb)\nYou can customize pages by filling up block throughout the method provided active admin inside above block '# All configuration and process must be threre'\n[index](http://activeadmin.info/docs/3-index-pages.html)\n\n```ruby\nindex do\n # check this page\n column : current model's field\n actions\u3000\u3000# show,edit,remove link will be displayed according to permit_params, it will be explained later on this page.\nend\n```\n\n[show](http://activeadmin.info/docs/6-show-pages.html)\n\n```ruby\nshow do\n  show do\n    attributes_table do\n      row : model's field name\n      end\n    end\n    active_admin_comments\u3000\u3000# comment form\n    render 'some_partial'\u3000# can be rendered from view\nend\n```\n\n[form](http://activeadmin.info/docs/5-forms.html)\nNote that this 'f' is ActionView\n\n```ruby\nform do |f|\n    inputs 'Title' do\n      input :model's field name\n    end\nend\n```\n\n[csv](http://activeadmin.info/docs/4-csv-format.html)\n\n```ruby\ncsv do\n    column :model's field name\nend\n```\n\nWhen you need to create original action for adding new pages, you can use [action_item]\n(http://activeadmin.info/docs/10-custom-pages.html#add-an-action-item).\n\n## 1.2. Model's handler\nOverridable methods in 'controller do' are written in  [data_access.rb](https://github.com/activeadmin/activeadmin/blob/master/lib/active_admin/resource_controller/data_access.rb)\n\nYou can utilize this feature when you need to add condition to retrieving model or override logic.\nFor example, write something in scoped_collection when you need to customized list in index page.\nYou will probably face to situation to join table to optimize list. \n\n[ActiveRecord's loading feature](http://qiita.com/shingo-nakanishi/items/a09907e4a7c2b6e49ed6)Remember active record preload or includes to optimize DB access.\n\n```ruby\ncontroller do\n   def scoped_collection\n     super\u3000# model call \n     super.where(filter: condition) # Adding condition to model\n     $ModelName.includes(:RelatedModelName)\n   end\n    def find_resource\n      # override to find a resouce from model (edit,show)\n    end\n   def create\n      # accept POST request of creating record\n   end\n   def update\n      # accept POST request of modifying record\n   end\n  end\nend\n```\n\n# 2.Authentication\n[authentication](http://activeadmin.info/docs/1-general-configuration.html#authentication)\n\n## 2.1. configuration\nfollowing configuration must be done in config/initializers/active_admin.rb.\n\n```ruby\n# the method controllers used to force authentication\nconfig.authentication_method = :authenticate_admin_user!\n\n# the method used to access the current user\n# It's possible to call this methos in ActiveAdmin.register\u3000.By calling this method it will return AdminUserModel currently logged in.\nconfig.current_user_method = :current_admin_user\n```\n\n## 2.2. Cancan\nAfter installing ActiveAdmin,following 3 models are created AdminUser,AdminUserAssign,AdminRole\nPut CRUD settings for each models inside app/models/ability.rb\n\n[cancan](http://activeadmin.info/docs/13-authorization-adapter.html#using-the-cancan-adapter)\n\n```ruby\nclass Ability\n  include CanCan::Ability\n  def initialize(user)\n    can :manage, $ModelName\n  end\n\n  def $\u30ed\u30fc\u30eb\u540d\n    can :manage, $ModelName\n  end\nend\n```\n\n## 2.3. Limitation of resource access\nPutting permit_params inside ActiveAdmin.register shall provide access control about each fields of target model.\nWriting actions will provide entire CRUD limitation control.\n[permit_params](http://activeadmin.info/docs/2-resource-customization.html)\n\n```ruby\npermit_params :$FieldName, :$FieldName\nactions :all, except: [:update, :destroy]\n```\n\n# 3. SearchBox and Scope customization\n## 3.1 Search Box\nIt's posssible to cutomize search box right side on screen.\nAdding 'filter' in ActiveAdmin.register will realize customization.\n[sidebar](http://activeadmin.info/docs/10-custom-pages.html#add-a-sidebar)\n\n```ruby\nfilter :\u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\nfilter :\u30e2\u30c7\u30eb\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d, collection: proc{ #something }.call\n```\n## 3.2 Scope\nIf you set scope, Scope button shall be displayed upper side of screen.\n[scope](http://activeadmin.info/docs/2-resource-customization.html#scoping-the-queries)\n\n```ruby\nscope :all, default: true do |user|\n  # do something\nend\nscope :$\u30d5\u30a3\u30eb\u30bf\u540d do |user|\n  # do something\nend\n```\n\n# 4. Other things\n## 4.1 Customizing menus\nKeep this in your mind 'it's possible to customize menu always displayed top of pages. You will need this design consideration.\n[menu](http://activeadmin.info/docs/2-resource-customization.html#customize-the-menu)\n\n## 4.2 Creating new pages\nIf you need to create pages not related specific model,you can use 'ActiveAdmin.register_page'\n[register_page](http://activeadmin.info/docs/10-custom-pages.html#create-a-new-page)\nIt is useful such as normal static page and view. \nBut mind about scope issue, @instance variable can't be used. \n'controller do' or 'show','index' , these are instance of different classes and you can't pass instance variable directory.If you need to extend logic inside view pass it as render's argument.\n\n```ruby\ncontent do\n  render partial: '$page_path'\u3000\n  render $page_path'\u3000, { data: @data }\nend\n```\n"}