{"tags": ["C++", "C\u8a00\u8a9e"], "context": " More than 1 year has passed since last update.C+11\u3067\u306f\u6b63\u898f\u8868\u73fe\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304c\u305d\u308c\u4ee5\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3060\u3068\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u306e\u3067C\u8a00\u8a9e\u306e\u6b63\u898f\u8868\u73fe\u3092\u5229\u7528\u3059\u308b\nC\u8a00\u8a9e\u3067\u6b63\u898f\u8868\u73fe\u3092\u5229\u7528\u3059\u308b\u5834\u5408regex.h\u3092include\u3057\u3066\u3001regcompregexecregfree\u3053\u306e\uff13\u3064\u306e\u95a2\u6570\u3092\u5229\u7528\u3059\u308b\u3002\n\nmain.cpp\n#include <regex.h>\n\nint main( int argv, char* args[] )\n{\n    char checkString[] = \"abc, def, ghi\";                   // \u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u6587\u5b57\u5217\n    const char regex[] = \"([a-z]+), ([a-z]+), ([a-z]+)\";    // \u30de\u30c3\u30c1\u30f3\u30b0\u3092\u3059\u308b\u6587\u5b57\u5217\n    regex_t regexBuffer;                                    // \u6b63\u898f\u8868\u73fe\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n    // \u6b63\u898f\u8868\u73fe\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n    if( regcomp( &regexBuffer, regex, REG_EXTENDED | REG_NEWLINE ) != 0 )\n    {\n        std::cout << \"regex compile failed\" << std::endl;\n        return 1;\n    }\n\n    // \u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u683c\u7d0d\u3059\u308b\u69cb\u9020\u4f53\n    regmatch_t patternMatch[4];\n\n    int size = sizeof( patternMatch ) / sizeof( regmatch_t );\n    if( regexec( &regexBuffer, checkString, size, patternMatch, 0 ) != 0 )\n    {\n        std::cout << \"No match!!\" << std::endl;\n        return 1;\n    }\n\n    // \u30de\u30c3\u30c1\u3057\u305f\u5834\u5408patternMatch\u69cb\u9020\u4f53\u306b\u6587\u5b57\u5217\u306eindex\u756a\u53f7\u304c\u5165\u308b\n    // \u914d\u5217\u306e\u6570\u304c\u30de\u30c3\u30c1\u6570\u3092\u8d85\u3048\u3066\u3044\u305f\u5834\u5408\u8d85\u3048\u305f\u69cb\u9020\u4f53\u306e\u5404\u8981\u7d20\u306b\u306f-1\u304c\u5165\u308b\n    for( int i = 0; i < size; ++i )\n    {\n        int startIndex = patternMatch[i].rm_so;\n        int endIndex = patternMatch[i].rm_eo;\n        if( startIndex == -1 || endIndex == -1 )\n        {\n            std::cout << \"exit\" << std::endl;\n            continue;\n        }\n        std::string putStr( checkString, startIndex, endIndex );\n        std::cout << putStr << std::endl;\n    }\n\n    // \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u958b\u653e\n    regfree( &regexBuffer );\n    return 0;\n}\n\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u306e\u7d50\u679c\u306f\u4e0b\u8a18\u306b\u306a\u308b\n\nTerminal.app\nabc, def, ghi    #patternMatch[0]\u306e\u7d50\u679c\u306e\u6587\u5b57\u5217\nabc              #patternMatch[1]\u306e\u7d50\u679c\u306e\u6587\u5b57\u5217\ndef, ghi         #patternMatch[2]\u306e\u7d50\u679c\u306e\u6587\u5b57\u5217\nghi              #patternMatch[3]\u306e\u7d50\u679c\u306e\u6587\u5b57\u5217\n\n\n\u7d50\u679c\u306e\u683c\u7d0d\u5148\u306e\u914d\u5217\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u305d\u306e\u5206\u7d50\u679c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u524a\u3089\u308c\u308b\u304c\u30de\u30c3\u30c1\u3057\u306a\u3044\u3053\u3068\u306f\u306a\u3044\n\u7d50\u679c\u306fpython\u306e\u6b63\u898f\u8868\u73fe\u3068\u540c\u3058\u3088\u3046\u306b\u4e00\u756a\u6307\u5b9a\u6587\u5b57\u5217\u5168\u4f53\u306b\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u6587\u5b57\u5217\n\u305d\u308c\u4ee5\u964d\u306f\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3054\u3068\u306e\u9806\u756a\u3067\u683c\u7d0d\u3055\u308c\u308b\u3002\n\u305f\u3060\u3057regcomp \u95a2\u6570\u3092\u30b3\u30fc\u30eb\u3059\u308b\u969b\u306b\u6307\u5b9a\u3057\u305fREG_EXTENDED\u3053\u306e\u6307\u5b9a\u3092\u884c\u308f\u306a\u3044\u3068\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u306a\u3069\u306e\u62e1\u5f35\u6b63\u898f\u8868\u73fe\u306f\u4f7f\u3048\u306a\u3044\u3088\u3046\u3060\u3002\nREG_EXTENDED \u5927\u4e8b\uff01\uff01\n[ ]\u306a\u3069\u3068\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u30e1\u30bf\u6587\u5b57\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\\\u3092\u3064\u3051\u308b\u306a\u3069\u6307\u5b9a\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\n\u4ee5\u4e0b\u306f\u6b63\u898f\u8868\u73fe\u3092\u884c\u3046\u306e\u306b\u4f7f\u7528\u3057\u305f\u95a2\u6570\u306e\u8aac\u660e\n\nregcomp\nint regcomp(regex_t *preg, const char *regex, int cflags)\n\u6b63\u898f\u8868\u73fe\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u306a\u3046\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6210\u529f\u6642\u306b\u306f0\u3092\u8fd4\u3059\u3002\ncflags \u306b\u306f\u4ee5\u4e0b\u306b\u793a\u3059\u5b9a\u6570\u4e00\u3064\u4ee5\u4e0a\u306e\u30d3\u30c3>\u30c8\u3054\u3068\u306e OR (bitwise-or) \u3092\u6307\u5b9a\u3059\u308b\u3002\n\nREG_EXTENDED\nregex \u306b POSIX \u62e1\u5f35\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u7528\u3059\u308b\u3002\u3082\u3057\u3053\u306e\u30d5\u30e9\u30b0\u304c\u8a2d\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u3001POSIX \u6a19\u6e96\u6b63\u898f\u8868\u73fe\u304c\u4f7f\u308f\u308c\u308b\u3002\nREG_ICASE\n\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u3092\u7121\u8996\u3059\u308b\u3002\nREG_NOSUB\n\u3053\u306e\u30d5\u30e9\u30b0\u3092\u8a2d\u5b9a\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u305f\u30d1\u30bf\u30fc\u30f3\u30d0\u30c3\u30d5\u30a1\u304c regexec \u306e\u5f15\u6570\u306b\u6307\u5b9a\u3055\u308c\u308b\u3068\u3001\u30d1\u30e9\u30e1\u30fc\u30bf nmatch, pmatch \u304c\u7121\u8996\u3055\u308c\u308b\u3002\nREG_NEWLINE\n\u5168\u3066\u306e\u6587\u5b57\u306b\u30de\u30c3\u30c1\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u6539\u884c\u3092\u30de\u30c3\u30c1\u3055\u305b\u306a\u3044\u3002\n\n\nregexec\nint regexec(const regex_t *preg, const char *string, size_t nmatch, regmatch_t pmatch[], int eflags);\n\u6b63\u898f\u8868\u73fe\u306b\u3088\u308b\u691c\u7d22\u3092\u5b9f\u884c\u3059\u308b\u3002\neflags \u306b\u306f\u4ee5\u4e0b\u306b\u793a\u3059\u5b9a\u6570\u4e00\u3064\u4ee5\u4e0a\u306e\u30d3\u30c3\u30c8\u3054\u3068\u306e OR (bitwise-or) \u3092\u6307\u5b9a\u3059\u308b\u3002\n\nREG_NOTBOL\n\u884c\u982d\u306b\u30de\u30c3\u30c1\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001\u5fc5\u305a\u30de\u30c3\u30c1\u306b\u5931\u6557\u3059\u308b (\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30d5\u30e9\u30b0 REG_NEWLINE \u306e\u9805\u76ee\u3082\u53c2\u7167)\u3002\u3053\u306e\u30d5\u30e9\u30b0\u306f\u3001\u8907\u6570\u884c\u306b\u307e\u305f\u304c\u308b\u6587\u5b57\u5217\u3092 regexec() \u3067\u691c\u7d22\u3059\u308b\u969b\u306b\u3001\u6587\u5b57\u5217\u306e\u5148\u982d\u3092\u884c\u306e\u5148\u982d\u3068\u3057\u3066\u89e3\u91c8\u3055\u305b\u306a\u3044\u5834\u5408\u306b\u7528\u3044\u308b\u3002\nREG_NOTEOL\n\u884c\u672b\u306b\u30de\u30c3\u30c1\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001\u5fc5\u305a\u30de\u30c3\u30c1\u306b\u5931\u6557\u3059\u308b\u3002\n\n\nregfree\nvoid regfree(regex_t *preg)\n\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u30d0\u30c3\u30d5\u30a1\u3092\u89e3\u653e\u3059\u308b\u3002\n\n\nC+11\u3067\u306f\u6b63\u898f\u8868\u73fe\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304c\u305d\u308c\u4ee5\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3060\u3068\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u306a\u306e\u3067C\u8a00\u8a9e\u306e\u6b63\u898f\u8868\u73fe\u3092\u5229\u7528\u3059\u308b\n\nC\u8a00\u8a9e\u3067\u6b63\u898f\u8868\u73fe\u3092\u5229\u7528\u3059\u308b\u5834\u5408`regex.h`\u3092include\u3057\u3066\u3001`regcomp``regexec``regfree`\u3053\u306e\uff13\u3064\u306e\u95a2\u6570\u3092\u5229\u7528\u3059\u308b\u3002\n\n```main.cpp\n#include <regex.h>\n\nint main( int argv, char* args[] )\n{\n\tchar checkString[] = \"abc, def, ghi\";\t\t\t\t\t// \u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u6587\u5b57\u5217\n\tconst char regex[] = \"([a-z]+), ([a-z]+), ([a-z]+)\"; \t// \u30de\u30c3\u30c1\u30f3\u30b0\u3092\u3059\u308b\u6587\u5b57\u5217\n\tregex_t\tregexBuffer;\t\t\t\t\t\t\t\t\t// \u6b63\u898f\u8868\u73fe\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\t// \u6b63\u898f\u8868\u73fe\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\n\tif( regcomp( &regexBuffer, regex, REG_EXTENDED | REG_NEWLINE ) != 0 )\n\t{\n\t\tstd::cout << \"regex compile failed\" << std::endl;\n\t\treturn 1;\n\t}\n\n\t// \u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u683c\u7d0d\u3059\u308b\u69cb\u9020\u4f53\n\tregmatch_t patternMatch[4];\n\n\tint size = sizeof( patternMatch ) / sizeof( regmatch_t );\n\tif( regexec( &regexBuffer, checkString, size, patternMatch, 0 ) != 0 )\n\t{\n\t\tstd::cout << \"No match!!\" << std::endl;\n\t\treturn 1;\n\t}\n\n\t// \u30de\u30c3\u30c1\u3057\u305f\u5834\u5408patternMatch\u69cb\u9020\u4f53\u306b\u6587\u5b57\u5217\u306eindex\u756a\u53f7\u304c\u5165\u308b\n\t// \u914d\u5217\u306e\u6570\u304c\u30de\u30c3\u30c1\u6570\u3092\u8d85\u3048\u3066\u3044\u305f\u5834\u5408\u8d85\u3048\u305f\u69cb\u9020\u4f53\u306e\u5404\u8981\u7d20\u306b\u306f-1\u304c\u5165\u308b\n\tfor( int i = 0; i < size; ++i )\n\t{\n\t\tint startIndex = patternMatch[i].rm_so;\n\t\tint endIndex = patternMatch[i].rm_eo;\n\t\tif( startIndex == -1 || endIndex == -1 )\n\t\t{\n\t\t\tstd::cout << \"exit\" << std::endl;\n\t\t\tcontinue;\n\t\t}\n\t\tstd::string putStr( checkString, startIndex, endIndex );\n\t\tstd::cout << putStr << std::endl;\n\t}\n\n\t// \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u958b\u653e\n\tregfree( &regexBuffer );\n\treturn 0;\n}\n```\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u306e\u7d50\u679c\u306f\u4e0b\u8a18\u306b\u306a\u308b\n\n```Terminal.app\nabc, def, ghi\t #patternMatch[0]\u306e\u7d50\u679c\u306e\u6587\u5b57\u5217\nabc\t\t\t\t #patternMatch[1]\u306e\u7d50\u679c\u306e\u6587\u5b57\u5217\ndef, ghi\t\t #patternMatch[2]\u306e\u7d50\u679c\u306e\u6587\u5b57\u5217\nghi\t\t\t\t #patternMatch[3]\u306e\u7d50\u679c\u306e\u6587\u5b57\u5217\n```\n\n\u7d50\u679c\u306e\u683c\u7d0d\u5148\u306e\u914d\u5217\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u305d\u306e\u5206\u7d50\u679c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u524a\u3089\u308c\u308b\u304c\u30de\u30c3\u30c1\u3057\u306a\u3044\u3053\u3068\u306f\u306a\u3044\n\u7d50\u679c\u306fpython\u306e\u6b63\u898f\u8868\u73fe\u3068\u540c\u3058\u3088\u3046\u306b\u4e00\u756a\u6307\u5b9a\u6587\u5b57\u5217\u5168\u4f53\u306b\u30de\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u6587\u5b57\u5217\n\u305d\u308c\u4ee5\u964d\u306f\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3054\u3068\u306e\u9806\u756a\u3067\u683c\u7d0d\u3055\u308c\u308b\u3002\n\u305f\u3060\u3057regcomp \u95a2\u6570\u3092\u30b3\u30fc\u30eb\u3059\u308b\u969b\u306b\u6307\u5b9a\u3057\u305f`REG_EXTENDED`\u3053\u306e\u6307\u5b9a\u3092\u884c\u308f\u306a\u3044\u3068\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u306a\u3069\u306e\u62e1\u5f35\u6b63\u898f\u8868\u73fe\u306f\u4f7f\u3048\u306a\u3044\u3088\u3046\u3060\u3002\nREG_EXTENDED \u5927\u4e8b\uff01\uff01\n[ ]\u306a\u3069\u3068\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u30e1\u30bf\u6587\u5b57\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\\\u3092\u3064\u3051\u308b\u306a\u3069\u6307\u5b9a\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\n\n\n\u4ee5\u4e0b\u306f\u6b63\u898f\u8868\u73fe\u3092\u884c\u3046\u306e\u306b\u4f7f\u7528\u3057\u305f\u95a2\u6570\u306e\u8aac\u660e\n\n##regcomp\n```\nint regcomp(regex_t *preg, const char *regex, int cflags)\n\u6b63\u898f\u8868\u73fe\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u306a\u3046\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6210\u529f\u6642\u306b\u306f0\u3092\u8fd4\u3059\u3002\ncflags \u306b\u306f\u4ee5\u4e0b\u306b\u793a\u3059\u5b9a\u6570\u4e00\u3064\u4ee5\u4e0a\u306e\u30d3\u30c3>\u30c8\u3054\u3068\u306e OR (bitwise-or) \u3092\u6307\u5b9a\u3059\u308b\u3002\n\nREG_EXTENDED\nregex \u306b POSIX \u62e1\u5f35\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u7528\u3059\u308b\u3002\u3082\u3057\u3053\u306e\u30d5\u30e9\u30b0\u304c\u8a2d\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u3001POSIX \u6a19\u6e96\u6b63\u898f\u8868\u73fe\u304c\u4f7f\u308f\u308c\u308b\u3002\nREG_ICASE\n\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u9055\u3044\u3092\u7121\u8996\u3059\u308b\u3002\nREG_NOSUB\n\u3053\u306e\u30d5\u30e9\u30b0\u3092\u8a2d\u5b9a\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u305f\u30d1\u30bf\u30fc\u30f3\u30d0\u30c3\u30d5\u30a1\u304c regexec \u306e\u5f15\u6570\u306b\u6307\u5b9a\u3055\u308c\u308b\u3068\u3001\u30d1\u30e9\u30e1\u30fc\u30bf nmatch, pmatch \u304c\u7121\u8996\u3055\u308c\u308b\u3002\nREG_NEWLINE\n\u5168\u3066\u306e\u6587\u5b57\u306b\u30de\u30c3\u30c1\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306b\u6539\u884c\u3092\u30de\u30c3\u30c1\u3055\u305b\u306a\u3044\u3002\n```\n\n\n##regexec\n\n```\nint regexec(const regex_t *preg, const char *string, size_t nmatch, regmatch_t pmatch[], int eflags);\n\u6b63\u898f\u8868\u73fe\u306b\u3088\u308b\u691c\u7d22\u3092\u5b9f\u884c\u3059\u308b\u3002\neflags \u306b\u306f\u4ee5\u4e0b\u306b\u793a\u3059\u5b9a\u6570\u4e00\u3064\u4ee5\u4e0a\u306e\u30d3\u30c3\u30c8\u3054\u3068\u306e OR (bitwise-or) \u3092\u6307\u5b9a\u3059\u308b\u3002\n\nREG_NOTBOL\n\u884c\u982d\u306b\u30de\u30c3\u30c1\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001\u5fc5\u305a\u30de\u30c3\u30c1\u306b\u5931\u6557\u3059\u308b (\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30d5\u30e9\u30b0 REG_NEWLINE \u306e\u9805\u76ee\u3082\u53c2\u7167)\u3002\u3053\u306e\u30d5\u30e9\u30b0\u306f\u3001\u8907\u6570\u884c\u306b\u307e\u305f\u304c\u308b\u6587\u5b57\u5217\u3092 regexec() \u3067\u691c\u7d22\u3059\u308b\u969b\u306b\u3001\u6587\u5b57\u5217\u306e\u5148\u982d\u3092\u884c\u306e\u5148\u982d\u3068\u3057\u3066\u89e3\u91c8\u3055\u305b\u306a\u3044\u5834\u5408\u306b\u7528\u3044\u308b\u3002\nREG_NOTEOL\n\u884c\u672b\u306b\u30de\u30c3\u30c1\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001\u5fc5\u305a\u30de\u30c3\u30c1\u306b\u5931\u6557\u3059\u308b\u3002\n```\n\n##regfree\n\n```\nvoid regfree(regex_t *preg)\n\u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u30d0\u30c3\u30d5\u30a1\u3092\u89e3\u653e\u3059\u308b\u3002\n```"}