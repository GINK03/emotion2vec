{"context": " More than 1 year has passed since last update.2015\u5e74\u3092\u632f\u308a\u8fd4\u3063\u3066scipy\u3067\u898b\u3064\u3051\u305f\u6570\u5b66\u95a2\u6570\u3042\u308c\u3053\u308c\u3092\u307e\u3068\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nscipy.stats.dirichlet\nLDA\u306a\u3069\u3067\u4f7f\u308f\u308c\u308b\u30c7\u30a3\u30ea\u30af\u30ec\u5206\u5e03\u306e\u95a2\u6570\u3067\u3059\u3002\nimport numpy as np\nimport scipy.stats as ss\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\n\nalphas = np.array([3.0, 4.0, 5.0])\ndc = ss.dirichlet(alphas)\n\ncorners = np.array([[0.0, 0.0], [1.0, 0.0], [0.5, np.sqrt(3.0) / 2.0]])\nmidpoints = [(corners[(i + 1) % 3] + corners[(i + 2) % 3]) / 2.0 for i in range(3)]\n\ndef xy2bc(xy):\n    s = [(corners[i] - midpoints[i]).dot(xy - midpoints[i]) / 0.75 for i in range(3)]\n    return np.clip(s, 0.0, 1.0)\nrefiner = tri.UniformTriRefiner(tri.Triangulation(corners[:, 0], corners[:, 1]))\ntrimesh = refiner.refine_triangulation(subdiv=8)\npvals = [dc.pdf(xy2bc(xy)) for xy in zip(trimesh.x, trimesh.y)]\nplt.tricontourf(trimesh, pvals, 200)\nplt.axis('equal')\nplt.show()\n\n\n\n\nscipy.stats.wishert, scipy.stats.invwishert\n\u3053\u3061\u3089\u3082MCMC\u7b49\u3067\u4f7f\u308f\u308c\u308b\u3053\u3068\u306e\u3042\u308b\u30a6\u30a3\u30b7\u30e3\u30fc\u30c8\u5206\u5e03\u3068\u9006\u30a6\u30a3\u30b7\u30e3\u30fc\u30c8\u5206\u5e03\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u30012\u6b21\u5143\u306e\u5206\u6563\u884c\u5217\u306e\u4e71\u6570\u3092\u305d\u308c\u305e\u308c10\u500b\u751f\u6210\u3057\u307e\u3059\u3002\nimport numpy as np\nimport scipy.stats as ss\n\nw = ss.wishart(df=3, scale=np.matrix([[1.0, 0.5], [0.5, 1.0]]))\nprint w.rvs(10)\niw = ss.invwishart(df=3, scale=np.matrix([[1.0, 0.5], [0.5, 1.0]]))\nprint iw.rvs(10)\n\n\nscipy.special.comb, scipy.special.perm\n\u9806\u5217\u3068\u7d44\u307f\u5408\u308f\u305b\u306e\u8a08\u7b97\u3067\u3059\u3002\n>>> import scipy.special as ss\n>>> ss.comb(6, 3) # 6C3\n20.0\n>>> ss.perm(6, 3) # 6P3\n120.0\n\n\nscipy.optimize.rosen\n\u6700\u9069\u5316\u306e\u304a\u984c\u3067\u4f7f\u308f\u308c\u308b\u30ed\u30fc\u30bc\u30f3\u30d6\u30ed\u30c3\u30af\u95a2\u6570\u3067\u3059\u3002\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nimport matplotlib.pyplot as plt\n\nfrom scipy.optimize import rosen\nimport numpy as np\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\nX, Y = np.meshgrid(np.arange(-3., 3., 0.1), np.arange(-3., 3., 0.1))\nZ = [[rosen((x, y)) for x, y in zip(xx, yy)] for xx, yy in zip(X, Y)]\nsurf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm, linewidth=0, antialiased=False)\nplt.show()\n\n\n\nscipy.signal.lti\n\u5236\u5fa1\u5de5\u5b66\u3067\u304a\u4e16\u8a71\u306b\u306a\u308b\u7dda\u5f62\u6642\u4e0d\u5909\u30b7\u30b9\u30c6\u30e0(Linear Time Invariant)\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u7dda\u5f62\u6642\u4e0d\u5909\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u30dc\u30fc\u30c9\u7dda\u56f3\u3092\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\nimport numpy as np\nfrom scipy import signal\nimport matplotlib.pyplot as plt\n\n# 1 / s^2 + 0.1s + 1\ns = signal.lti([1], [1.0, 0.1, 1.0])\nw, mag, phase = signal.bode(s, np.arange(0.1, 5.0, 0.01).tolist())\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nax0.semilogx(w, mag, 'b-')\nax0.set_ylabel(\"Magnitude\")\nax1.semilogx(w, phase, 'r-')\nax1.set_ylabel(\"Phase\")\nplt.show()\n\n\n\nscipy.spatial.KDTree\n\u7a7a\u9593\u5206\u5272\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306eKD\u30c4\u30ea\u30fc\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f3\u6b21\u5143\u7a7a\u9593\u306b\u30b0\u30ea\u30c3\u30c9\u72b6\u306b\u70b9\u3092\u3070\u3089\u307e\u304d\u3001(20,20,20)\u306e\u70b9\u304b\u30891.0\u306e\u8ddd\u96e2\u7bc4\u56f2\u306b\u3044\u308b\u70b9\u3092\u3059\u3079\u3066\u62bd\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\nimport numpy as np\nimport scipy.spatial as ss                                      \n\nx, y, z= np.mgrid[0:100, 0:100, 0:100]\npoints = zip(x.ravel(), y.ravel(), z.ravel())\ntree = ss.KDTree(points)\na = tree.query_ball_point([20, 20, 20], 1.0)\nprint [points[i] for i in a]\n\n[(19, 20, 20), (20, 19, 20), (20, 20, 19), (20, 20, 20), (20, 20, 21), (20, 21, 20), (21, 20, 20)]\n\n\nscipy.cluster.vq.kmeans2\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306ek\u5e73\u5747\u6cd5\u3067\u3059\u3002\nimport numpy\nfrom scipy.cluster.vq import kmeans2, whiten\n\nfeatures = numpy.array([[ 1.9,2.3],\n                        [ 1.5,2.5],\n                        [ 0.8,0.6],\n                        [ 0.4,1.8],\n                        [ 0.1,0.1],\n                        [ 0.2,1.8],\n                        [ 2.0,0.5],\n                        [ 0.3,1.5],\n                        [ 1.0,1.0]])\nwf = whiten(features)  # \u6b63\u898f\u5316\nprint kmeans2(wf, k=2)\n\n\u4e2d\u5fc3\u5730\u3068\u5404\u5024\u306e\u30e9\u30d9\u30eb\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n(array([[ 1.40584568,  0.69587293],\n       [ 1.24002799,  2.50514254]]), array([1, 1, 0, 1, 0, 1, 0, 1, 0]))\n\n\nscipy.constants.g\n\u95a2\u6570\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u91cd\u529b\u52a0\u901f\u5ea6\u3067\u3059\u3002\u4ed6\u306b\u3082\u3044\u308d\u3093\u306a\u7269\u7406\u30d1\u30e9\u30e1\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n>>> import scipy.constants\n>>> scipy.constants.g\n9.80665\n\n\nscipy.ndimage.gaussian_filter\n\u753b\u50cf\u51e6\u7406\u3067\u4f7f\u308f\u308c\u308b\u30d5\u30a3\u30eb\u30bf\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\nimport scipy\nfrom scipy import ndimage\nimport matplotlib.pyplot as plt\n\nimg = scipy.misc.lena().astype(float)\nfimg = ndimage.gaussian_filter(img, 3)\n\nplt.figure(figsize=(8, 4))\nplt.subplot(121)\nplt.imshow(img, cmap=plt.cm.gray)\nplt.subplot(122)\nplt.imshow(fimg, cmap=plt.cm.gray)\nplt.show()\n\n\n\n\u307e\u3068\u3081\nscipy\u306f\u3044\u308d\u3093\u306a\u5206\u91ce\u306e\u3044\u308d\u3093\u306a\u95a2\u6570\u3084\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u773a\u3081\u3066\u3044\u308b\u3060\u3051\u3067\u3082\u697d\u3057\u3044\u3067\u3059\u306d\u3002\u6765\u5e74\u3082\u304a\u4e16\u8a71\u306b\u306a\u308a\u307e\u3059\u3002\n2015\u5e74\u3092\u632f\u308a\u8fd4\u3063\u3066scipy\u3067\u898b\u3064\u3051\u305f\u6570\u5b66\u95a2\u6570\u3042\u308c\u3053\u308c\u3092\u307e\u3068\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# scipy.stats.dirichlet\nLDA\u306a\u3069\u3067\u4f7f\u308f\u308c\u308b\u30c7\u30a3\u30ea\u30af\u30ec\u5206\u5e03\u306e\u95a2\u6570\u3067\u3059\u3002\n\n```py\nimport numpy as np\nimport scipy.stats as ss\nimport matplotlib.pyplot as plt\nimport matplotlib.tri as tri\n\nalphas = np.array([3.0, 4.0, 5.0])\ndc = ss.dirichlet(alphas)\n\ncorners = np.array([[0.0, 0.0], [1.0, 0.0], [0.5, np.sqrt(3.0) / 2.0]])\nmidpoints = [(corners[(i + 1) % 3] + corners[(i + 2) % 3]) / 2.0 for i in range(3)]\n\ndef xy2bc(xy):\n    s = [(corners[i] - midpoints[i]).dot(xy - midpoints[i]) / 0.75 for i in range(3)]\n    return np.clip(s, 0.0, 1.0)\nrefiner = tri.UniformTriRefiner(tri.Triangulation(corners[:, 0], corners[:, 1]))\ntrimesh = refiner.refine_triangulation(subdiv=8)\npvals = [dc.pdf(xy2bc(xy)) for xy in zip(trimesh.x, trimesh.y)]\nplt.tricontourf(trimesh, pvals, 200)\nplt.axis('equal')\nplt.show()\n\n```\n\n![dilichlet.png](https://qiita-image-store.s3.amazonaws.com/0/14516/81699e2c-a988-a5ce-ac61-474a8c98ddae.png)\n\n# scipy.stats.wishert, scipy.stats.invwishert\n\u3053\u3061\u3089\u3082MCMC\u7b49\u3067\u4f7f\u308f\u308c\u308b\u3053\u3068\u306e\u3042\u308b\u30a6\u30a3\u30b7\u30e3\u30fc\u30c8\u5206\u5e03\u3068\u9006\u30a6\u30a3\u30b7\u30e3\u30fc\u30c8\u5206\u5e03\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u30012\u6b21\u5143\u306e\u5206\u6563\u884c\u5217\u306e\u4e71\u6570\u3092\u305d\u308c\u305e\u308c10\u500b\u751f\u6210\u3057\u307e\u3059\u3002\n\n```py\nimport numpy as np\nimport scipy.stats as ss\n\nw = ss.wishart(df=3, scale=np.matrix([[1.0, 0.5], [0.5, 1.0]]))\nprint w.rvs(10)\niw = ss.invwishart(df=3, scale=np.matrix([[1.0, 0.5], [0.5, 1.0]]))\nprint iw.rvs(10)\n```\n\n# scipy.special.comb, scipy.special.perm\n\u9806\u5217\u3068\u7d44\u307f\u5408\u308f\u305b\u306e\u8a08\u7b97\u3067\u3059\u3002\n\n```pycon\n>>> import scipy.special as ss\n>>> ss.comb(6, 3) # 6C3\n20.0\n>>> ss.perm(6, 3) # 6P3\n120.0\n```\n\n# scipy.optimize.rosen\n\u6700\u9069\u5316\u306e\u304a\u984c\u3067\u4f7f\u308f\u308c\u308b\u30ed\u30fc\u30bc\u30f3\u30d6\u30ed\u30c3\u30af\u95a2\u6570\u3067\u3059\u3002\n\n```py\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nimport matplotlib.pyplot as plt\n\nfrom scipy.optimize import rosen\nimport numpy as np\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\nX, Y = np.meshgrid(np.arange(-3., 3., 0.1), np.arange(-3., 3., 0.1))\nZ = [[rosen((x, y)) for x, y in zip(xx, yy)] for xx, yy in zip(X, Y)]\nsurf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm, linewidth=0, antialiased=False)\nplt.show()\n```\n![rosen.png](https://qiita-image-store.s3.amazonaws.com/0/14516/84054401-4588-83df-3145-6a0b66420d7b.png)\n\n# scipy.signal.lti\n\u5236\u5fa1\u5de5\u5b66\u3067\u304a\u4e16\u8a71\u306b\u306a\u308b\u7dda\u5f62\u6642\u4e0d\u5909\u30b7\u30b9\u30c6\u30e0(Linear Time Invariant)\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u7dda\u5f62\u6642\u4e0d\u5909\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u30dc\u30fc\u30c9\u7dda\u56f3\u3092\u63cf\u753b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py\nimport numpy as np\nfrom scipy import signal\nimport matplotlib.pyplot as plt\n\n# 1 / s^2 + 0.1s + 1\ns = signal.lti([1], [1.0, 0.1, 1.0])\nw, mag, phase = signal.bode(s, np.arange(0.1, 5.0, 0.01).tolist())\n\nfig, (ax0, ax1) = plt.subplots(nrows=2, sharex=True)\nax0.semilogx(w, mag, 'b-')\nax0.set_ylabel(\"Magnitude\")\nax1.semilogx(w, phase, 'r-')\nax1.set_ylabel(\"Phase\")\nplt.show()\n```\n\n![lti_bode.png](https://qiita-image-store.s3.amazonaws.com/0/14516/359d0be8-4bd2-a951-3b29-bdf691399678.png)\n\n# scipy.spatial.KDTree\n\u7a7a\u9593\u5206\u5272\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306eKD\u30c4\u30ea\u30fc\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f3\u6b21\u5143\u7a7a\u9593\u306b\u30b0\u30ea\u30c3\u30c9\u72b6\u306b\u70b9\u3092\u3070\u3089\u307e\u304d\u3001(20,20,20)\u306e\u70b9\u304b\u30891.0\u306e\u8ddd\u96e2\u7bc4\u56f2\u306b\u3044\u308b\u70b9\u3092\u3059\u3079\u3066\u62bd\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py\nimport numpy as np\nimport scipy.spatial as ss                                      \n\nx, y, z= np.mgrid[0:100, 0:100, 0:100]\npoints = zip(x.ravel(), y.ravel(), z.ravel())\ntree = ss.KDTree(points)\na = tree.query_ball_point([20, 20, 20], 1.0)\nprint [points[i] for i in a]\n```\n```pycon\n[(19, 20, 20), (20, 19, 20), (20, 20, 19), (20, 20, 20), (20, 20, 21), (20, 21, 20), (21, 20, 20)]\n```\n\n# scipy.cluster.vq.kmeans2\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306ek\u5e73\u5747\u6cd5\u3067\u3059\u3002\n\n```py\nimport numpy\nfrom scipy.cluster.vq import kmeans2, whiten\n\nfeatures = numpy.array([[ 1.9,2.3],\n                        [ 1.5,2.5],\n                        [ 0.8,0.6],\n                        [ 0.4,1.8],\n                        [ 0.1,0.1],\n                        [ 0.2,1.8],\n                        [ 2.0,0.5],\n                        [ 0.3,1.5],\n                        [ 1.0,1.0]])\nwf = whiten(features)  # \u6b63\u898f\u5316\nprint kmeans2(wf, k=2)\n```\n\u4e2d\u5fc3\u5730\u3068\u5404\u5024\u306e\u30e9\u30d9\u30eb\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n```pycon\n(array([[ 1.40584568,  0.69587293],\n       [ 1.24002799,  2.50514254]]), array([1, 1, 0, 1, 0, 1, 0, 1, 0]))\n```\n\n# scipy.constants.g\n\u95a2\u6570\u3067\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u91cd\u529b\u52a0\u901f\u5ea6\u3067\u3059\u3002\u4ed6\u306b\u3082\u3044\u308d\u3093\u306a\u7269\u7406\u30d1\u30e9\u30e1\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```pycon\n>>> import scipy.constants\n>>> scipy.constants.g\n9.80665\n```\n\n# scipy.ndimage.gaussian_filter\n\u753b\u50cf\u51e6\u7406\u3067\u4f7f\u308f\u308c\u308b\u30d5\u30a3\u30eb\u30bf\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\n\n```py\nimport scipy\nfrom scipy import ndimage\nimport matplotlib.pyplot as plt\n\nimg = scipy.misc.lena().astype(float)\nfimg = ndimage.gaussian_filter(img, 3)\n\nplt.figure(figsize=(8, 4))\nplt.subplot(121)\nplt.imshow(img, cmap=plt.cm.gray)\nplt.subplot(122)\nplt.imshow(fimg, cmap=plt.cm.gray)\nplt.show()\n```\n\n![lena.png](https://qiita-image-store.s3.amazonaws.com/0/14516/d50626c2-ecfb-4700-66c6-a4fb25d642d0.png)\n\n# \u307e\u3068\u3081\nscipy\u306f\u3044\u308d\u3093\u306a\u5206\u91ce\u306e\u3044\u308d\u3093\u306a\u95a2\u6570\u3084\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u3066\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u773a\u3081\u3066\u3044\u308b\u3060\u3051\u3067\u3082\u697d\u3057\u3044\u3067\u3059\u306d\u3002\u6765\u5e74\u3082\u304a\u4e16\u8a71\u306b\u306a\u308a\u307e\u3059\u3002\n", "tags": ["\u6570\u5b66", "Python", "scipy"]}