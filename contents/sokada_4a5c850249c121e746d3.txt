{"context": " More than 1 year has passed since last update.\n\nPersonal notes on Pry\nNotes from the following sites.\n-pry wiki\n-Introductory screencast\nPry~IRB (Japanese)\n# install it\n$ gem install pry\n# version\n$ pry -v\n# enter to pry\n$ pry\n# help\npry(main)> help\n\n# To customize change ~/.pryrc file\n# get help on command\npry(main)> show-doc -h\n\n# Showing rubydoc \npry(main)> s =\"pry\"\npry(main)> show-doc s.each_line\n\n# or\npry(main)> show-doc String#each_line\n\n# to show method\npry(main)> show-method s.each_line\n\n# or\npry(main)> show-source s.each_line\n\n# adding line number\npry(main)> show-source s.each_line -l\n\n# creating gist\n# \"gem install gist\" and afer pry console enter \"install-command gist\"\npry(main)> gist s.each_line\nGist created at URL https://gist.github.com/acfc1489eaa0dbbc3f0a, which is now in the clipboard.\n\n\n\nUsing command shell in pry\nUsing . dot.\n# Showing methods in IRB is very messy but pry shows them line by line.\npry(main)> self.methods\n\n# Using shell command with .(dot)\npry(main)> .ls -al\n\nOr use shell-mode.\npry(main)> shell-mode\npry main:/Users/myname/rubytest $ .cd rubytest\npry main:/Users/myname/rubytest $ .ls\naddtemps.rb list.txt    temps.txt\nexception1.rb   tempavg.rb  tkexample.rb\npry main:/Users/myname/rubytest $ .vim test6.rb\npry main:/Users/myname/rubytest $ load \"test6.rb\"\n=> true\npry main:/Users/myname/rubytest $ hello_world\nhello world!\n=> nil\n\nGetting out of shell-mode.\n# just type shell-mode again\n$ pry\n[1] pry(main)> shell-mode\npry main:/Users/myname/first_app $ shell-mode\n[3] pry(main)>\n\n\nList methods of defined context\n\n# ls to list methods of defined context.\npry(main)> s=\"pry\"\npry(main)> ls s\n\n# Use cd to change to the obect. Then use ls to show all methods \n# You can create an object and cd \npry(main)> require 'net/http'\n=> true\npry(main)> url = URI.parse('http://www.zenet-web.co.jp/index.html')\n=> #<URI::HTTP:0x007faf6247d560 URL:http://www.zenet-web.co.jp/index.html>\npry(main)> req = Net::HTTP::Get.new(url.path)\n=> #<Net::HTTP::Get GET>\npry(main)> res = Net::HTTP::start(url.host, url.port) do |http|\npry(main)*   http.request(req)\npry(main)* end\n=> #<Net::HTTPOK 200 OK readbody=true>\npry(main)> cd res\npry(#<Net::HTTPOK>):1> ls\nNet::HTTPHeader#methods:\n...\npry(main)>\n\n# go back to the main\npry(main)> cd\n\n\nCalling pry from runtime\n# test.rb\nrequire 'pry'\nputs \"Run Pry!\"\nbinding.pry\n\nRun test.rb. It will start pry after running the script.\n$ ruby test5.rb\nRun Pry!\n\nFrom: /Users/teacher/Documents/rubytest/test5.rb @ line 5 :\n\n    1: require 'pry'\n    2:\n    3:\n    4: puts \"Run Pry!\"\n => 5: binding.pry\n\nAnother example\n# test.rb\nrequire 'pry'\n\nclass A\n  def hello() puts \"hello world!\" end\nend\n\na = A.new\n\n# set x to 10\nx = 10\n\n# start a REPL session\nbinding.pry\n\n# program resumes here (after pry session)\nputs \"program resumes here. Value of x is: #{x}.\"\n\nRun it from your terminal\n$ ruby test4.rb\n\nFrom: /Users/teacher/Documents/rubytest/test4.rb @ line 14 :\n\n     9:\n    10: # set x to 10\n    11: x = 10\n    12:\n    13: # start a REPL session\n => 14: binding.pry\n    15:\n    16: # program resumes here (after pry session)\n    17: puts \"program resumes here. Value of x is: #{x}.\"\n\n[1] pry(main)> a.hello\nhello world!\n=> nil\n[2] pry(main)> puts x\n10\n=> nil\n[3] pry(main)> def a.goodbye\n[3] pry(main)*   puts \"Goodbye world!\"\n[3] pry(main)* end\n=> nil\n[4] pry(main)> a.goodbye\nGoodbye world!\n=> nil\n[5] pry(main)> x=\"changed\"\n=> \"changed\"\n[6] pry(main)> exit\nprogram resumes here. Value of x is: changed.\n\n\nUsing pry on a rails project\nInstall pry-rails gem.\n$ gem install pry-rails\n\nAdd to Gemfile\ngroup :development do\n  gem 'sqlite3', '1.3.7'\n  gem 'pry-rails'\nend\n\nYou can add pry\nRun rails console.\n$ rails c\n\n\n## Personal notes on Pry\n\nNotes from the following sites.\n\n-[pry wiki](https://github.com/pry/pry/wiki)\n-[Introductory screencast](http://pryrepl.org/screencasts.html)\n[Pry~IRB (Japanese)](http://www.school.ctc-g.co.jp/columns/masuidrive/masuidrive03.html)\n\n~~~ text\n# install it\n$ gem install pry\n# version\n$ pry -v\n# enter to pry\n$ pry\n# help\npry(main)> help\n\n# To customize change ~/.pryrc file\n# get help on command\npry(main)> show-doc -h\n\n# Showing rubydoc \npry(main)> s =\"pry\"\npry(main)> show-doc s.each_line\n\n# or\npry(main)> show-doc String#each_line\n\n# to show method\npry(main)> show-method s.each_line\n\n# or\npry(main)> show-source s.each_line\n\n# adding line number\npry(main)> show-source s.each_line -l\n\n# creating gist\n# \"gem install gist\" and afer pry console enter \"install-command gist\"\npry(main)> gist s.each_line\nGist created at URL https://gist.github.com/acfc1489eaa0dbbc3f0a, which is now in the clipboard.\n\n~~~\n\n## Using command shell in pry\nUsing . dot.\n\n~~~ text\n# Showing methods in IRB is very messy but pry shows them line by line.\npry(main)> self.methods\n\n# Using shell command with .(dot)\npry(main)> .ls -al\n~~~\n\nOr use shell-mode.\n\t\n~~~ text\npry(main)> shell-mode\npry main:/Users/myname/rubytest $ .cd rubytest\npry main:/Users/myname/rubytest $ .ls\naddtemps.rb\tlist.txt\ttemps.txt\nexception1.rb\ttempavg.rb\ttkexample.rb\npry main:/Users/myname/rubytest $ .vim test6.rb\npry main:/Users/myname/rubytest $ load \"test6.rb\"\n=> true\npry main:/Users/myname/rubytest $ hello_world\nhello world!\n=> nil\n~~~\n\nGetting out of shell-mode.\n\t\n~~~ text\n# just type shell-mode again\n$ pry\n[1] pry(main)> shell-mode\npry main:/Users/myname/first_app $ shell-mode\n[3] pry(main)>\n~~~\n\n\n\n## List methods of defined context\n\n~~~ text\n\n# ls to list methods of defined context.\npry(main)> s=\"pry\"\npry(main)> ls s\n\n# Use cd to change to the obect. Then use ls to show all methods \n# You can create an object and cd \npry(main)> require 'net/http'\n=> true\npry(main)> url = URI.parse('http://www.zenet-web.co.jp/index.html')\n=> #<URI::HTTP:0x007faf6247d560 URL:http://www.zenet-web.co.jp/index.html>\npry(main)> req = Net::HTTP::Get.new(url.path)\n=> #<Net::HTTP::Get GET>\npry(main)> res = Net::HTTP::start(url.host, url.port) do |http|\npry(main)*   http.request(req)\npry(main)* end\n=> #<Net::HTTPOK 200 OK readbody=true>\npry(main)> cd res\npry(#<Net::HTTPOK>):1> ls\nNet::HTTPHeader#methods:\n...\npry(main)>\n\n# go back to the main\npry(main)> cd\n~~~\n\n## Calling pry from runtime\n\n~~~ ruby\n# test.rb\nrequire 'pry'\nputs \"Run Pry!\"\nbinding.pry\n~~~\n\nRun test.rb. It will start pry after running the script.\n\n~~~ text\n$ ruby test5.rb\nRun Pry!\n\nFrom: /Users/teacher/Documents/rubytest/test5.rb @ line 5 :\n\n    1: require 'pry'\n    2:\n    3:\n    4: puts \"Run Pry!\"\n => 5: binding.pry\n~~~\n\nAnother example\n\n~~~ ruby\n# test.rb\nrequire 'pry'\n\nclass A\n  def hello() puts \"hello world!\" end\nend\n\na = A.new\n\n# set x to 10\nx = 10\n\n# start a REPL session\nbinding.pry\n\n# program resumes here (after pry session)\nputs \"program resumes here. Value of x is: #{x}.\"\n~~~\n\nRun it from your terminal\n\n~~~ text\n$ ruby test4.rb\n\nFrom: /Users/teacher/Documents/rubytest/test4.rb @ line 14 :\n\n     9:\n    10: # set x to 10\n    11: x = 10\n    12:\n    13: # start a REPL session\n => 14: binding.pry\n    15:\n    16: # program resumes here (after pry session)\n    17: puts \"program resumes here. Value of x is: #{x}.\"\n\n[1] pry(main)> a.hello\nhello world!\n=> nil\n[2] pry(main)> puts x\n10\n=> nil\n[3] pry(main)> def a.goodbye\n[3] pry(main)*   puts \"Goodbye world!\"\n[3] pry(main)* end\n=> nil\n[4] pry(main)> a.goodbye\nGoodbye world!\n=> nil\n[5] pry(main)> x=\"changed\"\n=> \"changed\"\n[6] pry(main)> exit\nprogram resumes here. Value of x is: changed.\n~~~\n\n## Using pry on a rails project\n\nInstall pry-rails gem.\n\t\n~~~ text\n$ gem install pry-rails\n~~~\n\nAdd to Gemfile\n\t\n~~~ ruby\ngroup :development do\n  gem 'sqlite3', '1.3.7'\n  gem 'pry-rails'\nend\n~~~\n\nYou can add pry\nRun rails console.\n\t\n~~~ text\n$ rails c\n~~~", "tags": ["pry", "Ruby"]}