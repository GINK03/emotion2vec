{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nRust\u3067HTTP2\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u3044\u305f\u3044\u3002\n\u3056\u3063\u304f\u308a\u8abf\u3079\u305f\u611f\u3058 solicit \u3068 hyper\u304c\u4f7f\u3048\u305d\u3046\u306a\u306e\u3067\u305d\u308c\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u524d\u63d0\n\n\n\n\u9805\u76ee\n\u8aac\u660e\n\n\n\n\nOS\nMacOSX 10.11.2\n\n\nRust\n1.5.0 stable\n\n\n\u691c\u8a3c\u65e5\u6642\n2016.01.15\n\n\n\n\nsolicit\n\nhttp2-solicit.rs\nextern crate solicit;\nuse solicit::http::client::CleartextConnector;\nuse solicit::client::SimpleClient;\nuse std::str;\n\nstatic HOST: &'static str = \"http2bin.org\";\n\nfn main() {\n    let connector = CleartextConnector::new(HOST);\n    let mut client = SimpleClient::with_connector(connector).unwrap();\n    let resp = client.get(b\"/get\", &[]).unwrap();\n\n    println!(\"{}\", str::from_utf8(&resp.body).unwrap());\n}\n\n\n\u304b\u306a\u308a\u5c0f\u3055\u3044\u3067\u3059\u304c\u3001HTTP2\u4f7f\u3063\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n{\n  \"args\": {},\n  \"headers\": {\n    \"Connection\": \"keep-alive\",\n    \"Host\": \"http2bin.org\",\n    \"Via\": \"2 http2bin.org\"\n  },\n  \"origin\": \"180.44.100.161\",\n  \"url\": \"http://http2bin.org/get\"\n}\n\n\nhyper\nRust\u3067HTTP\u3092\u6271\u3048\u308bcrate\u3068\u8a00\u3048\u3070hyper\u3067\u3059\u304c\u3001hyper\u3082HTTP2\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4e2d\u8eab\u306fsolicit\u3092\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002\n\nhttp2-hyper.rs\nextern crate hyper;\nuse std::io;\nuse hyper::Client;\nuse hyper::http::h2;\n\nstatic URL: &'static str = \"http://http2bin.org/get\";\n\n// http -> OK\n// https -> Error:\n//          thread '<main>' panicked at 'called `Result::unwrap()` on an `Err` value:\n//          Io(Error { repr: Custom(Custom { kind: InvalidInput, error: StringError(\"Invalid scheme for\n//          Http\") }) })', ../src/libcore/result.rs:738\nfn http2_with_error() {\n    let client = Client::with_protocol(h2::new_protocol());\n    let mut res = client.get(URL).send().unwrap();\n\n    println!(\"Response: {}\", res.status);\n    println!(\"Headers:\\n{}\", res.headers);\n    io::copy(&mut res, &mut io::stdout()).unwrap();\n}\n\nfn main() {\n    http2_with_error();\n}\n\n\nResponse: 200 OK\nHeaders:\ncontent-type: application/json\naccess-control-allow-origin: *\nserver: h2o/1.6.1\ncontent-length: 222\n:status: 200\ndate: Thu, 14 Jan 2016 21:36:05 GMT\nx-clacks-overhead: GNU Terry Pratchett\naccess-control-allow-credentials: true\n\n{\n  \"args\": {},\n  \"headers\": {\n    \"Connection\": \"keep-alive\",\n    \"Host\": \"http2bin.org,http2bin.org\",\n    \"Via\": \"2 http2bin.org\"\n  },\n  \"origin\": \"180.44.100.161\",\n  \"url\": \"http://http2bin.org,http2bin.org/get\"\n}\n\n\u30a2\u30af\u30bb\u30b9\u306f\u3067\u304d\u3066\u305d\u3046\u3067\u3059\u304c\u3001Host\u3068url\u306e\u5024\u306b\u5c11\u3057\u9055\u548c\u611f\u3042\u308a\u307e\u3059\u3002\u3069\u3046\u3082:authority:\u64ec\u4f3c\u30d8\u30c3\u30c0\u3068Host\u30d8\u30c3\u30c0\u3092\u4e21\u65b9\u6301\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3001http2bin.org\u3067\u4e0a\u8a18\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306bHost\u30d8\u30c3\u30c0\u3092\u542b\u3081\u306a\u3044\u30d1\u30c3\u30c1\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u304b\u306a\u308a\u5f37\u5f15\u306a\u5bfe\u5fdc\u306a\u306e\u3067\u4eca\u306f\u305d\u3063\u3068\u7f6e\u3044\u3066\u304a\u3053\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\nhttps\u3067\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\n\u4e0a\u8a18\u306ehyper\u306e\u4f8b\u3067https://\u3067\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u5b9f\u884c\u6642\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\nthread '<main>' panicked at 'called `Result::unwrap()` on an `Err` value: Io(Error { repr: Custom(Custom { kind: InvalidInput, error: StringError(\"Invalid scheme for Http\") }) })', ../src/libcore/result.rs:738\n\nhttps://\u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306a\u5bfe\u5fdc\u3092\u3044\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u306f\u4ee5\u4e0b\u3067\u3059\u3002\nextern crate hyper;\nuse std::io::Read;\nuse hyper::Client;\nuse hyper::http::h2::Http2Protocol;\nuse hyper::net::{HttpsConnector, Openssl};\n\nstatic URL: &'static str = \"https://http2bin.org/get\";\nstatic CERT_FILE: &'static str = \"tmp.crt\";\nstatic KEY_FILE: &'static str = \"tmp.key\";\n\nfn http2() {\n    let ssl = Openssl::with_cert_and_key(CERT_FILE, KEY_FILE).unwrap();\n    let ssl_connector = HttpsConnector::new(ssl);\n    let http2_client = Client::with_protocol(Http2Protocol::with_connector(ssl_connector));\n    let mut res = http2_client.get(URL).send().unwrap();\n\n    let mut body = String::new();\n    res.read_to_string(&mut body).unwrap();\n\n    println!(\"{}\", body);\n}\n\nfn main() {\n    http2();\n}\n\n\nsolicit\u3067https\u30a2\u30af\u30bb\u30b9\nfeatures\u306btls\u3092\u542b\u3081\u308d\u3063\u3066\u3053\u3068\u306a\u306e\u3067\u3001\u305d\u308c\u3067\u30d3\u30eb\u30c9\u3057\u3066\u307f\u3066\u3082\u30d3\u30eb\u30c9\u3053\u3051\u3066\u4f7f\u3046\u4e8b\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\uff08nightly\u3068\u304b\u3060\u3068\u3044\u3051\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u8a66\u3057\u3066\u307e\u305b\u3093\u3002\uff09\n[dependencies.solicit]\nversion = \"*\"\nfeatures = [\"tls\"]\n\n## \u6982\u8981\nRust\u3067HTTP2\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u3044\u305f\u3044\u3002\n\u3056\u3063\u304f\u308a\u8abf\u3079\u305f\u611f\u3058 [solicit](https://github.com/mlalic/solicit) \u3068 [hyper](https://github.com/hyperium/hyper)\u304c\u4f7f\u3048\u305d\u3046\u306a\u306e\u3067\u305d\u308c\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u524d\u63d0\n| \u9805\u76ee | \u8aac\u660e |\n|----|-------------------------|\n| OS | MacOSX 10.11.2 |\n| Rust | 1.5.0 stable |\n| \u691c\u8a3c\u65e5\u6642 | 2016.01.15              |\n\n## solicit\n```rust:http2-solicit.rs\nextern crate solicit;\nuse solicit::http::client::CleartextConnector;\nuse solicit::client::SimpleClient;\nuse std::str;\n\nstatic HOST: &'static str = \"http2bin.org\";\n\nfn main() {\n    let connector = CleartextConnector::new(HOST);\n    let mut client = SimpleClient::with_connector(connector).unwrap();\n    let resp = client.get(b\"/get\", &[]).unwrap();\n\n    println!(\"{}\", str::from_utf8(&resp.body).unwrap());\n}\n```\n\u304b\u306a\u308a\u5c0f\u3055\u3044\u3067\u3059\u304c\u3001HTTP2\u4f7f\u3063\u3066\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n\n```\n{\n  \"args\": {},\n  \"headers\": {\n    \"Connection\": \"keep-alive\",\n    \"Host\": \"http2bin.org\",\n    \"Via\": \"2 http2bin.org\"\n  },\n  \"origin\": \"180.44.100.161\",\n  \"url\": \"http://http2bin.org/get\"\n}\n```\n\n## hyper\nRust\u3067HTTP\u3092\u6271\u3048\u308bcrate\u3068\u8a00\u3048\u3070hyper\u3067\u3059\u304c\u3001hyper\u3082HTTP2\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n[\u4e2d\u8eab\u306fsolicit\u3092\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002](https://github.com/hyperium/hyper/blob/4c7f6f0c1ec863859dd04d56610d45dae4e2ae04/src/http/h2.rs#L24)\n\n```rust:http2-hyper.rs\nextern crate hyper;\nuse std::io;\nuse hyper::Client;\nuse hyper::http::h2;\n\nstatic URL: &'static str = \"http://http2bin.org/get\";\n\n// http -> OK\n// https -> Error:\n//          thread '<main>' panicked at 'called `Result::unwrap()` on an `Err` value:\n//          Io(Error { repr: Custom(Custom { kind: InvalidInput, error: StringError(\"Invalid scheme for\n//          Http\") }) })', ../src/libcore/result.rs:738\nfn http2_with_error() {\n    let client = Client::with_protocol(h2::new_protocol());\n    let mut res = client.get(URL).send().unwrap();\n\n    println!(\"Response: {}\", res.status);\n    println!(\"Headers:\\n{}\", res.headers);\n    io::copy(&mut res, &mut io::stdout()).unwrap();\n}\n\nfn main() {\n    http2_with_error();\n}\n```\n\n```\nResponse: 200 OK\nHeaders:\ncontent-type: application/json\naccess-control-allow-origin: *\nserver: h2o/1.6.1\ncontent-length: 222\n:status: 200\ndate: Thu, 14 Jan 2016 21:36:05 GMT\nx-clacks-overhead: GNU Terry Pratchett\naccess-control-allow-credentials: true\n\n{\n  \"args\": {},\n  \"headers\": {\n    \"Connection\": \"keep-alive\",\n    \"Host\": \"http2bin.org,http2bin.org\",\n    \"Via\": \"2 http2bin.org\"\n  },\n  \"origin\": \"180.44.100.161\",\n  \"url\": \"http://http2bin.org,http2bin.org/get\"\n}\n```\n\u30a2\u30af\u30bb\u30b9\u306f\u3067\u304d\u3066\u305d\u3046\u3067\u3059\u304c\u3001Host\u3068url\u306e\u5024\u306b\u5c11\u3057\u9055\u548c\u611f\u3042\u308a\u307e\u3059\u3002\u3069\u3046\u3082`:authority:`\u64ec\u4f3c\u30d8\u30c3\u30c0\u3068`Host`\u30d8\u30c3\u30c0\u3092\u4e21\u65b9\u6301\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3001http2bin.org\u3067\u4e0a\u8a18\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n[\u30ea\u30af\u30a8\u30b9\u30c8\u6642\u306bHost\u30d8\u30c3\u30c0\u3092\u542b\u3081\u306a\u3044\u30d1\u30c3\u30c1](https://github.com/hhatto/hyper/commit/021c309fafcf8106d06e1c2d206034220d33a8af)\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u304b\u306a\u308a\u5f37\u5f15\u306a\u5bfe\u5fdc\u306a\u306e\u3067\u4eca\u306f\u305d\u3063\u3068\u7f6e\u3044\u3066\u304a\u3053\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n### https\u3067\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3044\n\u4e0a\u8a18\u306ehyper\u306e\u4f8b\u3067`https://`\u3067\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u5b9f\u884c\u6642\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\nthread '<main>' panicked at 'called `Result::unwrap()` on an `Err` value: Io(Error { repr: Custom(Custom { kind: InvalidInput, error: StringError(\"Invalid scheme for Http\") }) })', ../src/libcore/result.rs:738\n```\n\n`https://`\u3067\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306a\u5bfe\u5fdc\u3092\u3044\u308c\u305f\u30b5\u30f3\u30d7\u30eb\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n\n```rust\nextern crate hyper;\nuse std::io::Read;\nuse hyper::Client;\nuse hyper::http::h2::Http2Protocol;\nuse hyper::net::{HttpsConnector, Openssl};\n\nstatic URL: &'static str = \"https://http2bin.org/get\";\nstatic CERT_FILE: &'static str = \"tmp.crt\";\nstatic KEY_FILE: &'static str = \"tmp.key\";\n\nfn http2() {\n    let ssl = Openssl::with_cert_and_key(CERT_FILE, KEY_FILE).unwrap();\n    let ssl_connector = HttpsConnector::new(ssl);\n    let http2_client = Client::with_protocol(Http2Protocol::with_connector(ssl_connector));\n    let mut res = http2_client.get(URL).send().unwrap();\n\n    let mut body = String::new();\n    res.read_to_string(&mut body).unwrap();\n\n    println!(\"{}\", body);\n}\n\nfn main() {\n    http2();\n}\n```\n\n### solicit\u3067https\u30a2\u30af\u30bb\u30b9\nfeatures\u306b`tls`\u3092\u542b\u3081\u308d\u3063\u3066\u3053\u3068\u306a\u306e\u3067\u3001\u305d\u308c\u3067\u30d3\u30eb\u30c9\u3057\u3066\u307f\u3066\u3082\u30d3\u30eb\u30c9\u3053\u3051\u3066\u4f7f\u3046\u4e8b\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\uff08nightly\u3068\u304b\u3060\u3068\u3044\u3051\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u8a66\u3057\u3066\u307e\u305b\u3093\u3002\uff09\n\n```toml\n[dependencies.solicit]\nversion = \"*\"\nfeatures = [\"tls\"]\n```\n", "tags": ["rust"]}