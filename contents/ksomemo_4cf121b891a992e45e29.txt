{"context": " More than 1 year has passed since last update.\nrun_job.py\nimport datetime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.schema import Column\nfrom sqlalchemy.types import (\n    String,\n    Integer,\n    DateTime,\n    Date\n)\n\nBase = declarative_base()\n\n\nclass JobHistory(Base):\n    __tablename__ = 'job_history'\n\n    job_id = Column(Integer, primary_key=True)\n    name = Column(String)\n    target_date = Column(Date)\n    created_at = Column(DateTime, default=datetime.datetime.now)\n    updated_at = Column(DateTime, default=datetime.datetime.now, onupdate=datetime.datetime.now)\n    is_finished = Column(Integer, default=0)\n\n    @staticmethod\n    def recent_job_history(target_date, session):\n        params = {\"target_date\": target_date}\n        return session.query(JobHistory) \\\n            .filter_by(**params) \\\n            .order_by(JobHistory.created_at.desc()) \\\n            .first()\n\n\ndef runnable_job(before, cur):\n    if not before:\n        return False\n\n    if not before.is_finished:\n        return False\n\n    if not cur:\n        return True\n\n    return False\n\ndef run(target_date):\n    with session_scope() as session:\n        before_date = target_date + relativedelta(days=-1)\n        cur = JobHistory.recent_job_history(target_date, session)\n        before = JobHistory.recent_job_history(before_date, session)\n        if not runnable_job(before, cur):\n            return\n\n        try:\n            cur_job = JobHistory(\n                target_date=target_date,\n                name=\"name\"\n            )\n            session.add(cur_job)\n            daily.run(target_date.year, target_date.month, target_date.day)\n            cur_job.is_finished = 1\n        except:\n            raise\n\n\n```py3:run_job.py\nimport datetime\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.schema import Column\nfrom sqlalchemy.types import (\n    String,\n    Integer,\n    DateTime,\n    Date\n)\n\nBase = declarative_base()\n\n\nclass JobHistory(Base):\n    __tablename__ = 'job_history'\n\n    job_id = Column(Integer, primary_key=True)\n    name = Column(String)\n    target_date = Column(Date)\n    created_at = Column(DateTime, default=datetime.datetime.now)\n    updated_at = Column(DateTime, default=datetime.datetime.now, onupdate=datetime.datetime.now)\n    is_finished = Column(Integer, default=0)\n\n    @staticmethod\n    def recent_job_history(target_date, session):\n        params = {\"target_date\": target_date}\n        return session.query(JobHistory) \\\n            .filter_by(**params) \\\n            .order_by(JobHistory.created_at.desc()) \\\n            .first()\n\n\ndef runnable_job(before, cur):\n    if not before:\n        return False\n\n    if not before.is_finished:\n        return False\n\n    if not cur:\n        return True\n\n    return False\n\ndef run(target_date):\n    with session_scope() as session:\n        before_date = target_date + relativedelta(days=-1)\n        cur = JobHistory.recent_job_history(target_date, session)\n        before = JobHistory.recent_job_history(before_date, session)\n        if not runnable_job(before, cur):\n            return\n\n        try:\n            cur_job = JobHistory(\n                target_date=target_date,\n                name=\"name\"\n            )\n            session.add(cur_job)\n            daily.run(target_date.year, target_date.month, target_date.day)\n            cur_job.is_finished = 1\n        except:\n            raise\n```\n", "tags": ["memo"]}