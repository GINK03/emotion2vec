{"tags": ["rust", "\u7ffb\u8a33", "translation"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u69cb\u9020\u4f53\u304b\u3089Rust\u306e\u7279\u5fb4\u3067\u3042\u308b\u30c8\u30ec\u30a4\u30c8\u30d9\u30fc\u30b9\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u307e\u3067\u306e\u6d41\u308c\u3092\u7ffb\u8a33\u3057\u307e\u3059\u3002\n\u524d: 5.19. Generics \u6b21: 5.36. Raw Pointers\n\u82f1\u8a9e\u3067\u304d\u306a\u3044\u306e\u3067\u8aa4\u8a33\u3084\u6539\u5584\u6848\u7b49\u3001\u898b\u3064\u3051\u305f\u5834\u5408\u306f\u3054\u6307\u6458\u306e\u7a0b\u5b9c\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n\u5143\u8a18\u4e8b : https://doc.rust-lang.org/stable/book/traits.html  \u306eRust1.2\u6642\u70b9\n\u30e9\u30a4\u30bb\u30f3\u30b9 : MIT license, Apache License 2.0.\n\n\nSee LICENSE-APACHE, LICENSE-MIT, and COPYRIGHT for details.\n\n\n\n\n\n\u30c8\u30ec\u30a4\u30c8\n\u3042\u306a\u305f\u306fmethod syntax\u3067\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306b\u7528\u3044\u305fimpl\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u899a\u3048\u3066\u3044\u307e\u3059\u304b\uff1f\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\n\u30c8\u30ec\u30a4\u30c8\u306f\u305d\u308c\u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9a\u7fa9\u3059\u308b\u3068\u304d\u306b\u306f\u30b7\u30b0\u30cd\u30c1\u30e3\u3060\u3051\u3092\u8a18\u8ff0\u3057\u3001\u305d\u306e\u5f8c\u69cb\u9020\u4f53\u6bce\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\ntrait HasArea {\n    fn area(&self) -> f64;\n}\n\nimpl HasArea for Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\n\u3053\u306e\u3088\u3046\u306b\u3001traits\u306e\u8a18\u8ff0\u306fimpl\u3068\u304b\u306a\u308a\u4f3c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u95a2\u6570\u306e\u5b9f\u88c5\u306f\u8a18\u8ff0\u305b\u305a\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u3060\u3051\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306f\u3001\u305f\u3060impl \u5b9f\u88c5\u306e\u5bfe\u8c61\u3068\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001impl \u30c8\u30ec\u30a4\u30c8 for \u5b9f\u88c5\u306e\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002\n\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306b\u5236\u7d04\u3092\u6301\u305f\u305b\u308b\u305f\u3081\u306b\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u95a2\u6570\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nfn print_area<T>(shape: T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n\n\u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u3053\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u306f\u305a\u3067\u3059\u3002\nerror: type `T` does not implement any method in scope named `area`\n\nT\u306f\u3042\u308a\u3068\u3042\u3089\u3086\u308b\u578b\u3067\u3042\u308b\u305f\u3081\u3001Rust\u306f.area()\u30e1\u30bd\u30c3\u30c9\u304cT\u306b\u3064\u3044\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u4fe1\u3092\u6301\u3066\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578bT\u306b\u5bfe\u3057\u3066'\u30c8\u30ec\u30a4\u30c8\u306b\u3088\u308b\u5236\u7d04'\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u3001.area()\u30e1\u30bd\u30c3\u30c9\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3067\u304d\u307e\u3059\u3002\ntrait HasArea {\n    fn area(&self) -> f64;\n}\nfn print_area<T: HasArea>(shape: T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n\n<T: HasArea>\u69cb\u6587\u306fHasArea\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3042\u3089\u3086\u308b\u578b\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u30c8\u30ec\u30a4\u30c8\u306f\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u305f\u3081\u3001HasArea\u3092\u5b9f\u88c5\u3059\u308b\u3042\u3089\u3086\u308b\u578b\u304c.area()\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u62e1\u5f35\u3057\u305f\u4f8b\u304c\u3053\u3061\u3089\u3067\u3059\u3002\ntrait HasArea {\n    fn area(&self) -> f64;\n}\n\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl HasArea for Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\nstruct Square {\n    x: f64,\n    y: f64,\n    side: f64,\n}\n\nimpl HasArea for Square {\n    fn area(&self) -> f64 {\n        self.side * self.side\n    }\n}\n\nfn print_area<T: HasArea>(shape: T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n\nfn main() {\n    let c = Circle {\n        x: 0.0f64,\n        y: 0.0f64,\n        radius: 1.0f64,\n    };\n\n    let s = Square {\n        x: 0.0f64,\n        y: 0.0f64,\n        side: 1.0f64,\n    };\n\n    print_area(c);\n    print_area(s);\n}\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51fa\u529b\u306f\u3001\nThis shape has an area of 3.141593\nThis shape has an area of 1\n\n\u4e0a\u8a18\u306e\u901a\u308a\u3001print_area\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u3067\u3059\u304c\u3001\u6b63\u3057\u3044\u578b\u304c\u6e21\u3055\u308c\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3057\u307e\u3059\u3002\u3082\u3057\u4e0d\u6b63\u306a\u578b\u304c\u6e21\u3055\u308c\u308b\u3068\u3059\u308b\u3068\u3001\nprint_area(5);\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\nerror: failed to find an implementation of trait main::HasArea for int\n\n\u3053\u308c\u307e\u3067\u306f\u69cb\u9020\u4f53\u306b\u306e\u307f\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3042\u306a\u305f\u306f\u3042\u3089\u3086\u308b\u578b\u306b\u5bfe\u3057\u3066\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6280\u8853\u7684\u306b\u306f\u3001i32\u306e\u305f\u3081\u306eHasArea\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\ntrait HasArea {\n    fn area(&self) -> f64;\n}\n\nimpl HasArea for i32 {\n    fn area(&self) -> f64 {\n        println!(\"this is silly\");\n\n        *self as f64\n    }\n}\n\n5.area();\n\n\u3057\u304b\u3057\u4f8b\u3048\u53ef\u80fd\u3067\u3042\u3063\u305f\u3068\u3057\u3066\u3082\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u304c\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u306f\u671b\u307e\u3057\u304f\u306a\u3044\u3068\u8003\u3048\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u304f\u308b\u3068\u4f55\u3067\u3082\u3042\u308a\u306a\u69d8\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u624b\u304c\u8ca0\u3048\u306a\u304f\u306a\u308b\u306e\u3092\u9632\u3050\u305f\u3081\u306b\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u5468\u308a\u306b\u306f2\u3064\u306e\u5236\u9650\u304c\u8a2d\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u7b2c1\u306b\u3001\u3042\u306a\u305f\u306e\u30b9\u30b3\u30fc\u30d7\u5185\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u30c8\u30ec\u30a4\u30c8\u306f\u9069\u7528\u3055\u308c\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306fFile\u306bI/O\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306ewrite\u30c8\u30ec\u30a4\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001File\u306f\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u3002\nlet mut f = std::fs::File::open(\"foo.txt\").ok().expect(\"Couldn\u2019t open foo.txt\");\nlet result = f.write(\"whatever\".as_bytes());\nresult.unwrap(); // ignore the error\n\n\u30a8\u30e9\u30fc\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\nerror: type `std::fs::File` does not implement any method in scope named `write`\n\nlet result = f.write(b\"whatever\");\n               ^~~~~~~~~~~~~~~~~~\n\nWrite\u30c8\u30ec\u30a4\u30c8\u306e\u305f\u3081\u306b\u3001\u521d\u3081\u306buse\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\nuse std::io::Write;\n\nlet mut f = std::fs::File::open(\"foo.txt\").ok().expect(\"Couldn\u2019t open foo.txt\");\nlet result = f.write(\"whatever\".as_bytes());\nresult.unwrap(); // ignore the error\n\n\u3053\u308c\u306f\u30a8\u30e9\u30fc\u7121\u3057\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u4f8b\u3048\u8ab0\u304b\u304cint\u3078\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306a\u671b\u307e\u3057\u304f\u306a\u3044\u4f55\u304b\u3092\u884c\u3063\u305f\u3068\u3057\u3066\u3082\u3001\u3042\u306a\u305f\u304c\u30c8\u30ec\u30a4\u30c8\u306euse\u3092\u884c\u308f\u306a\u3044\u9650\u308a\u3001\u5f71\u97ff\u306f\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u306e\u5236\u9650\u306f\u3082\u30461\u3064\u3042\u308a\u307e\u3059\u3002\u30c8\u30ec\u30a4\u30c8\u3001\u307e\u305f\u306f\u3042\u306a\u305f\u304c\u66f8\u3044\u3066\u3044\u308bimpl\u306e\u5bfe\u8c61\u3068\u306a\u308b\u578b\u306f\u3001\u3042\u306a\u305f\u81ea\u8eab\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002HasArea\u306f\u79c1\u305f\u3061\u304c\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3042\u308b\u305f\u3081\u3001i32\u578b\u306e\u305f\u3081\u306eHasArea\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001i32\u306e\u305f\u3081\u306bRust\u306b\u3088\u3063\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bToString\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u3044\u3068\u3057\u3066\u3082\u3001\u30c8\u30ec\u30a4\u30c8\u3068\u578b\u304c\u5171\u306b\u79c1\u305f\u3061\u306e\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3067\u306a\u3044\u305f\u3081\u3001\u305d\u308c\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\u6700\u5f8c\u306b1\u3064\u3002\u30c8\u30ec\u30a4\u30c8\u306b\u3088\u3063\u3066\u675f\u7e1b\u3055\u308c\u305f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\u306fmonomorphization(mono:\u5358\u4e00\u306e\u3001morph:\u69d8\u76f8)\u3055\u308c\u308b\u305f\u3081\u3001\u9759\u7684\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u4e00\u4f53\u3069\u3046\u3044\u3046\u610f\u5473\u3067\u3057\u3087\u3046\u304b\uff1f\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u7ae0\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u8907\u6570\u306e\u30c8\u30ec\u30a4\u30c8\u675f\u7e1b\n\u3053\u3053\u307e\u3067\u3001\u30c8\u30ec\u30a4\u30c8\u306b\u3088\u3063\u3066\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u675f\u7e1b\u3067\u304d\u308b\u3053\u3068\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u3002\nfn foo<T: Clone>(x: T) {\n    x.clone();\n}\n\n\u3082\u30572\u3064\u4ee5\u4e0a\u306e\u675f\u7e1b\u304c\u5fc5\u8981\u306a\u306e\u3067\u3042\u308c\u3070\u3001+\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nuse std::fmt::Debug;\n\nfn foo<T: Clone + Debug>(x: T) {\n    x.clone();\n    println!(\"{:?}\", x);\n}\n\nT\u306f\u4ecaClone\u3068Debug\u3001\u4e21\u65b9\u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nWhere \u7bc0\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u3068\u30c8\u30ec\u30a4\u30c8\u675f\u7e1b\u304c\u5c11\u306a\u3044\u3046\u3061\u306f\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u6570\u304c\u5897\u3048\u308b\u3068\u3044\u3088\u3044\u3088\u3053\u306e\u69cb\u6587\u3067\u306f\u4e0d\u4fbf\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\nuse std::fmt::Debug;\n\nfn foo<T: Clone, K: Clone + Debug>(x: T, y: K) {\n    x.clone();\n    y.clone();\n    println!(\"{:?}\", y);\n}\n\n\u95a2\u6570\u540d\u306f\u5de6\u7aef\u306b\u3042\u308a\u3001\u5f15\u6570\u30ea\u30b9\u30c8\u306f\u53f3\u7aef\u306b\u3042\u308a\u307e\u3059\u3002\u30c8\u30ec\u30a4\u30c8\u675f\u7e1b\u3092\u8a18\u8ff0\u3059\u308b\u90e8\u5206\u304c\u90aa\u9b54\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n\u305d\u3053\u3067Rust\u306f'where\u7bc0'\u3068\u547c\u3070\u308c\u308b\u89e3\u6c7a\u7b56\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\nuse std::fmt::Debug;\n\nfn foo<T: Clone, K: Clone + Debug>(x: T, y: K) {\n    x.clone();\n    y.clone();\n    println!(\"{:?}\", y);\n}\n\nfn bar<T, K>(x: T, y: K) where T: Clone, K: Clone + Debug {\n    x.clone();\n    y.clone();\n    println!(\"{:?}\", y);\n}\n\nfn main() {\n    foo(\"Hello\", \"world\");\n    bar(\"Hello\", \"workd\");\n}\n\nfoo()\u306f\u5148\u7a0b\u898b\u305b\u305f\u307e\u307e\u306e\u69cb\u6587\u3067\u3001bar()\u306fwhere\u7bc0\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\u3042\u306a\u305f\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b9a\u7fa9\u6642\u3067\u306f\u306a\u304f\u3001\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u5f8c\u308d\u306bwhere\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u30c8\u30ec\u30a4\u30c8\u675f\u7e1b\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\u9577\u3044\u30ea\u30b9\u30c8\u3067\u3042\u308c\u3070\u3001\u7a7a\u767d\u3092\u52a0\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nuse std::fmt::Debug;\n\nfn bar<T, K>(x: T, y: K)\n    where T: Clone,\n          K: Clone + Debug {\n\n    x.clone();\n    y.clone();\n    println!(\"{:?}\", y);\n}\n\n\u3053\u306e\u67d4\u8edf\u306a\u69cb\u6587\u306b\u3088\u308a\u3001\u8907\u96d1\u306a\u72b6\u6cc1\u3067\u3042\u3063\u3066\u3082\u53ef\u8aad\u6027\u3092\u4fdd\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001where\u306f\u57fa\u672c\u7684\u306a\u69cb\u6587\u3088\u308a\u3082\u5f37\u529b\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\n(\u8a33\u6ce8: std::convert::From)\ntrait ConvertTo<Output> {\n    fn convert(&self) -> Output;\n}\n\nimpl ConvertTo<i64> for i32 {\n    fn convert(&self) -> i64 { *self as i64 }\n}\n\n// T == i32\u306e\u6642\u547c\u3073\u51fa\u305b\u308b\nfn normal<T: ConvertTo<i64>>(x: &T) -> i64 {\n    x.convert()\n}\n\n// T == i64\u306e\u3068\u304d\u547c\u3073\u51fa\u305b\u308b\nfn inverse<T>() -> T\n        // \u3053\u308c\u306f\"ConvertFrom<i32>\"\u3067\u3042\u308b\u304b\u306e\u3088\u3046\u306bConvertTo\u3092\u7528\u3044\u3066\u3044\u308b\n        where i32: ConvertTo<T> {\n    42.convert()\n}\n\n\u3053\u3053\u3067\u306fwhere\u7bc0\u306e\u8ffd\u52a0\u6a5f\u80fd\u3092\u62ab\u9732\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u7bc0\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306f\u306a\u3044\u4efb\u610f\u306e\u578b1\u306b\u5bfe\u3057\u3066\u30c8\u30ec\u30a4\u30c8\u675f\u7e1b\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\n\u79c1\u305f\u3061\u304c\u30ab\u30d0\u30fc\u3057\u3066\u304a\u304f\u3079\u304d\u30c8\u30ec\u30a4\u30c8\u306e\u6700\u5f8c\u306e\u6a5f\u80fd\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u3053\u308c\u306e\u4f8b\u3092\u793a\u3059\u306e\u306f\u6700\u3082\u7c21\u5358\u3067\u3059\u3002\ntrait Foo {\n    fn bar(&self);\n\n    fn baz(&self) { println!(\"We called baz.\"); }\n}\n\nFoo\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u8005\u306fbar()\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001baz()\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002baz()\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u52d5\u4f5c\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u5b9f\u88c5\u8005\u306e\u9078\u629e\u6b21\u7b2c\u3067\u306f\u3053\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u52d5\u4f5c\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\ntrait Foo {\n    fn bar(&self);\n    fn baz(&self) { println!(\"We called baz.\"); }\n}\nstruct UseDefault;\n\nimpl Foo for UseDefault {\n    fn bar(&self) { println!(\"We called bar.\"); }\n}\n\nstruct OverrideDefault;\n\nimpl Foo for OverrideDefault {\n    fn bar(&self) { println!(\"We called bar.\"); }\n\n    fn baz(&self) { println!(\"Override baz!\"); }\n}\n\nlet default = UseDefault;\ndefault.baz(); // prints \"We called baz.\"\n\nlet over = OverrideDefault;\nover.baz(); // prints \"Override baz!\"\n\n\n\u7d99\u627f\n\u6642\u3005\u3001\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u306e\u306b\u4ed6\u306e\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u306a\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\ntrait Foo {\n    fn foo(&self);\n}\n\ntrait FooBar : Foo {\n    fn foobar(&self);\n}\n\nFooBar\u306e\u5b9f\u88c5\u8005\u306fFoo\u3082\u307e\u305f\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\ntrait Foo {\n    fn foo(&self);\n}\ntrait FooBar : Foo {\n    fn foobar(&self);\n}\nstruct Baz;\n\nimpl Foo for Baz {\n    fn foo(&self) { println!(\"foo\"); }\n}\n\nimpl FooBar for Baz {\n    fn foobar(&self) { println!(\"foobar\"); }\n}\n\n\u3082\u3057Foo\u306e\u5b9f\u88c5\u3092\u5fd8\u308c\u308b\u3068\u3001Rust\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u77e5\u3089\u305b\u307e\u3059\u3002\nerror: the trait `main::Foo` is not implemented for the type `main::Baz` [E0277]\n\n\n\n\n\n\n\u8a33\u6ce8: T\u3067\u306f\u306a\u304f\u3001\u4eca\u56de\u306fi32\u306e\u3088\u3046\u306a\u578b\u00a0\u21a9\n\n\n\n\u69cb\u9020\u4f53\u304b\u3089Rust\u306e\u7279\u5fb4\u3067\u3042\u308b\u30c8\u30ec\u30a4\u30c8\u30d9\u30fc\u30b9\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u307e\u3067\u306e\u6d41\u308c\u3092\u7ffb\u8a33\u3057\u307e\u3059\u3002\n\u524d: [5.19. Generics](http://qiita.com/_Nnwww/items/529ad0397e4b3a59da67) \u6b21: [5.36. Raw Pointers](http://qiita.com/_Nnwww/items/ae58b49ef9afa9b8a54a)\n\u82f1\u8a9e\u3067\u304d\u306a\u3044\u306e\u3067\u8aa4\u8a33\u3084\u6539\u5584\u6848\u7b49\u3001\u898b\u3064\u3051\u305f\u5834\u5408\u306f\u3054\u6307\u6458\u306e\u7a0b\u5b9c\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n* \u5143\u8a18\u4e8b : https://doc.rust-lang.org/stable/book/traits.html  \u306eRust1.2\u6642\u70b9\n* \u30e9\u30a4\u30bb\u30f3\u30b9 : MIT license, Apache License 2.0.\n    - See [LICENSE-APACHE](https://github.com/rust-lang/rust/blob/1.2.0/LICENSE-APACHE), [LICENSE-MIT](https://github.com/rust-lang/rust/blob/1.2.0/LICENSE-MIT), and [COPYRIGHT](https://github.com/rust-lang/rust/blob/1.2.0/COPYRIGHT) for details.\n\n---\n\n# \u30c8\u30ec\u30a4\u30c8\n\n\u3042\u306a\u305f\u306f[method syntax][methodsyntax]\u3067\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306b\u7528\u3044\u305f`impl`\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u899a\u3048\u3066\u3044\u307e\u3059\u304b\uff1f\n\n```rust\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n```\n\n[methodsyntax]: http://qiita.com/_Nnwww/items/b594d02143166c62b122\n\n\u30c8\u30ec\u30a4\u30c8\u306f\u305d\u308c\u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9a\u7fa9\u3059\u308b\u3068\u304d\u306b\u306f\u30b7\u30b0\u30cd\u30c1\u30e3\u3060\u3051\u3092\u8a18\u8ff0\u3057\u3001\u305d\u306e\u5f8c\u69cb\u9020\u4f53\u6bce\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```rust\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\ntrait HasArea {\n    fn area(&self) -> f64;\n}\n\nimpl HasArea for Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u3001`traits`\u306e\u8a18\u8ff0\u306f`impl`\u3068\u304b\u306a\u308a\u4f3c\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u95a2\u6570\u306e\u5b9f\u88c5\u306f\u8a18\u8ff0\u305b\u305a\u3001\u30b7\u30b0\u30cd\u30c1\u30e3\u3060\u3051\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u30c8\u30ec\u30a4\u30c8\u3092`\u5b9f\u88c5`\u3059\u308b\u3068\u304d\u306f\u3001\u305f\u3060`impl \u5b9f\u88c5\u306e\u5bfe\u8c61`\u3068\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001`impl \u30c8\u30ec\u30a4\u30c8 for \u5b9f\u88c5\u306e\u5bfe\u8c61`\u3068\u3057\u307e\u3059\u3002\n\n\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306b\u5236\u7d04\u3092\u6301\u305f\u305b\u308b\u305f\u3081\u306b\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u95a2\u6570\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```rust,ignore\nfn print_area<T>(shape: T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n```\n\n\u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u3053\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u306f\u305a\u3067\u3059\u3002\n\n```text\nerror: type `T` does not implement any method in scope named `area`\n```\n\n`T`\u306f\u3042\u308a\u3068\u3042\u3089\u3086\u308b\u578b\u3067\u3042\u308b\u305f\u3081\u3001Rust\u306f`.area()`\u30e1\u30bd\u30c3\u30c9\u304c`T`\u306b\u3064\u3044\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u4fe1\u3092\u6301\u3066\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b`T`\u306b\u5bfe\u3057\u3066'\u30c8\u30ec\u30a4\u30c8\u306b\u3088\u308b\u5236\u7d04'\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u3001`.area()`\u30e1\u30bd\u30c3\u30c9\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3067\u304d\u307e\u3059\u3002\n\n```rust\ntrait HasArea {\n    fn area(&self) -> f64;\n}\nfn print_area<T: HasArea>(shape: T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n```\n\n`<T: HasArea>`\u69cb\u6587\u306f`HasArea\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3042\u3089\u3086\u308b\u578b`\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u30c8\u30ec\u30a4\u30c8\u306f\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u305f\u3081\u3001`HasArea`\u3092\u5b9f\u88c5\u3059\u308b\u3042\u3089\u3086\u308b\u578b\u304c`.area()`\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u62e1\u5f35\u3057\u305f\u4f8b\u304c\u3053\u3061\u3089\u3067\u3059\u3002\n\n```rust\ntrait HasArea {\n    fn area(&self) -> f64;\n}\n\nstruct Circle {\n    x: f64,\n    y: f64,\n    radius: f64,\n}\n\nimpl HasArea for Circle {\n    fn area(&self) -> f64 {\n        std::f64::consts::PI * (self.radius * self.radius)\n    }\n}\n\nstruct Square {\n    x: f64,\n    y: f64,\n    side: f64,\n}\n\nimpl HasArea for Square {\n    fn area(&self) -> f64 {\n        self.side * self.side\n    }\n}\n\nfn print_area<T: HasArea>(shape: T) {\n    println!(\"This shape has an area of {}\", shape.area());\n}\n\nfn main() {\n    let c = Circle {\n        x: 0.0f64,\n        y: 0.0f64,\n        radius: 1.0f64,\n    };\n\n    let s = Square {\n        x: 0.0f64,\n        y: 0.0f64,\n        side: 1.0f64,\n    };\n\n    print_area(c);\n    print_area(s);\n}\n```\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51fa\u529b\u306f\u3001\n\n```text\nThis shape has an area of 3.141593\nThis shape has an area of 1\n```\n\n\u4e0a\u8a18\u306e\u901a\u308a\u3001`print_area`\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u3067\u3059\u304c\u3001\u6b63\u3057\u3044\u578b\u304c\u6e21\u3055\u308c\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3057\u307e\u3059\u3002\u3082\u3057\u4e0d\u6b63\u306a\u578b\u304c\u6e21\u3055\u308c\u308b\u3068\u3059\u308b\u3068\u3001\n\n```rust,ignore\nprint_area(5);\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n```text\nerror: failed to find an implementation of trait main::HasArea for int\n```\n\n\u3053\u308c\u307e\u3067\u306f\u69cb\u9020\u4f53\u306b\u306e\u307f\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3042\u306a\u305f\u306f\u3042\u3089\u3086\u308b\u578b\u306b\u5bfe\u3057\u3066\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u6280\u8853\u7684\u306b\u306f\u3001`i32`\u306e\u305f\u3081\u306e`HasArea`\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n```rust\ntrait HasArea {\n    fn area(&self) -> f64;\n}\n\nimpl HasArea for i32 {\n    fn area(&self) -> f64 {\n        println!(\"this is silly\");\n\n        *self as f64\n    }\n}\n\n5.area();\n```\n\n\u3057\u304b\u3057\u4f8b\u3048\u53ef\u80fd\u3067\u3042\u3063\u305f\u3068\u3057\u3066\u3082\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u304c\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u306f\u671b\u307e\u3057\u304f\u306a\u3044\u3068\u8003\u3048\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u3053\u307e\u3067\u304f\u308b\u3068\u4f55\u3067\u3082\u3042\u308a\u306a\u69d8\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u624b\u304c\u8ca0\u3048\u306a\u304f\u306a\u308b\u306e\u3092\u9632\u3050\u305f\u3081\u306b\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u5468\u308a\u306b\u306f2\u3064\u306e\u5236\u9650\u304c\u8a2d\u3051\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u7b2c1\u306b\u3001\u3042\u306a\u305f\u306e\u30b9\u30b3\u30fc\u30d7\u5185\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u30c8\u30ec\u30a4\u30c8\u306f\u9069\u7528\u3055\u308c\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306f`File`\u306bI/O\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306e[`write`][write]\u30c8\u30ec\u30a4\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001`File`\u306f\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\n[write]: https://doc.rust-lang.org/std/io/trait.Write.html\n\n```rust,ignore\nlet mut f = std::fs::File::open(\"foo.txt\").ok().expect(\"Couldn\u2019t open foo.txt\");\nlet result = f.write(\"whatever\".as_bytes());\nresult.unwrap(); // ignore the error\n```\n\n\u30a8\u30e9\u30fc\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```text\nerror: type `std::fs::File` does not implement any method in scope named `write`\n\nlet result = f.write(b\"whatever\");\n               ^~~~~~~~~~~~~~~~~~\n```\n\n`Write`\u30c8\u30ec\u30a4\u30c8\u306e\u305f\u3081\u306b\u3001\u521d\u3081\u306b`use`\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\n```rust,ignore\nuse std::io::Write;\n\nlet mut f = std::fs::File::open(\"foo.txt\").ok().expect(\"Couldn\u2019t open foo.txt\");\nlet result = f.write(\"whatever\".as_bytes());\nresult.unwrap(); // ignore the error\n```\n\n\u3053\u308c\u306f\u30a8\u30e9\u30fc\u7121\u3057\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u307e\u3059\u3002\n\n\u3053\u308c\u306f\u3001\u4f8b\u3048\u8ab0\u304b\u304c`int`\u3078\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\u3088\u3046\u306a\u671b\u307e\u3057\u304f\u306a\u3044\u4f55\u304b\u3092\u884c\u3063\u305f\u3068\u3057\u3066\u3082\u3001\u3042\u306a\u305f\u304c\u30c8\u30ec\u30a4\u30c8\u306e`use`\u3092\u884c\u308f\u306a\u3044\u9650\u308a\u3001\u5f71\u97ff\u306f\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\n\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u306e\u5236\u9650\u306f\u3082\u30461\u3064\u3042\u308a\u307e\u3059\u3002\u30c8\u30ec\u30a4\u30c8\u3001\u307e\u305f\u306f\u3042\u306a\u305f\u304c\u66f8\u3044\u3066\u3044\u308b`impl`\u306e\u5bfe\u8c61\u3068\u306a\u308b\u578b\u306f\u3001\u3042\u306a\u305f\u81ea\u8eab\u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002`HasArea`\u306f\u79c1\u305f\u3061\u304c\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3042\u308b\u305f\u3081\u3001`i32`\u578b\u306e\u305f\u3081\u306e`HasArea`\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001`i32`\u306e\u305f\u3081\u306bRust\u306b\u3088\u3063\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b`ToString`\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u3044\u3068\u3057\u3066\u3082\u3001\u30c8\u30ec\u30a4\u30c8\u3068\u578b\u304c\u5171\u306b\u79c1\u305f\u3061\u306e\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3067\u306a\u3044\u305f\u3081\u3001\u305d\u308c\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u6700\u5f8c\u306b1\u3064\u3002\u30c8\u30ec\u30a4\u30c8\u306b\u3088\u3063\u3066\u675f\u7e1b\u3055\u308c\u305f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\u306f`monomorphization`(mono:\u5358\u4e00\u306e\u3001morph:\u69d8\u76f8)\u3055\u308c\u308b\u305f\u3081\u3001\u9759\u7684\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u304c\u884c\u308f\u308c\u307e\u3059\u3002\u4e00\u4f53\u3069\u3046\u3044\u3046\u610f\u5473\u3067\u3057\u3087\u3046\u304b\uff1f\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001[\u30c8\u30ec\u30a4\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8](http://qiita.com/_Nnwww/items/0f9c949bcfd6133dda6e)\u306e\u7ae0\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u8907\u6570\u306e\u30c8\u30ec\u30a4\u30c8\u675f\u7e1b\n\n\u3053\u3053\u307e\u3067\u3001\u30c8\u30ec\u30a4\u30c8\u306b\u3088\u3063\u3066\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u675f\u7e1b\u3067\u304d\u308b\u3053\u3068\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u3002\n\n```rust\nfn foo<T: Clone>(x: T) {\n    x.clone();\n}\n```\n\n\u3082\u30572\u3064\u4ee5\u4e0a\u306e\u675f\u7e1b\u304c\u5fc5\u8981\u306a\u306e\u3067\u3042\u308c\u3070\u3001`+`\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```rust\nuse std::fmt::Debug;\n\nfn foo<T: Clone + Debug>(x: T) {\n    x.clone();\n    println!(\"{:?}\", x);\n}\n```\n\n`T`\u306f\u4eca`Clone`\u3068`Debug`\u3001\u4e21\u65b9\u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n# Where \u7bc0\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u3068\u30c8\u30ec\u30a4\u30c8\u675f\u7e1b\u304c\u5c11\u306a\u3044\u3046\u3061\u306f\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u6570\u304c\u5897\u3048\u308b\u3068\u3044\u3088\u3044\u3088\u3053\u306e\u69cb\u6587\u3067\u306f\u4e0d\u4fbf\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n\n``` rust\nuse std::fmt::Debug;\n\nfn foo<T: Clone, K: Clone + Debug>(x: T, y: K) {\n    x.clone();\n    y.clone();\n    println!(\"{:?}\", y);\n}\n```\n\n\u95a2\u6570\u540d\u306f\u5de6\u7aef\u306b\u3042\u308a\u3001\u5f15\u6570\u30ea\u30b9\u30c8\u306f\u53f3\u7aef\u306b\u3042\u308a\u307e\u3059\u3002\u30c8\u30ec\u30a4\u30c8\u675f\u7e1b\u3092\u8a18\u8ff0\u3059\u308b\u90e8\u5206\u304c\u90aa\u9b54\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u3002\n\n\u305d\u3053\u3067Rust\u306f'`where`\u7bc0'\u3068\u547c\u3070\u308c\u308b\u89e3\u6c7a\u7b56\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\u3002\n\n``` rust\nuse std::fmt::Debug;\n\nfn foo<T: Clone, K: Clone + Debug>(x: T, y: K) {\n    x.clone();\n    y.clone();\n    println!(\"{:?}\", y);\n}\n\nfn bar<T, K>(x: T, y: K) where T: Clone, K: Clone + Debug {\n    x.clone();\n    y.clone();\n    println!(\"{:?}\", y);\n}\n\nfn main() {\n    foo(\"Hello\", \"world\");\n    bar(\"Hello\", \"workd\");\n}\n```\n\n`foo()`\u306f\u5148\u7a0b\u898b\u305b\u305f\u307e\u307e\u306e\u69cb\u6587\u3067\u3001`bar()`\u306f`where`\u7bc0\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\u3042\u306a\u305f\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b9a\u7fa9\u6642\u3067\u306f\u306a\u304f\u3001\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u5f8c\u308d\u306b`where`\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u30c8\u30ec\u30a4\u30c8\u675f\u7e1b\u3092\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\u9577\u3044\u30ea\u30b9\u30c8\u3067\u3042\u308c\u3070\u3001\u7a7a\u767d\u3092\u52a0\u3048\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n``` rust\nuse std::fmt::Debug;\n\nfn bar<T, K>(x: T, y: K)\n    where T: Clone,\n          K: Clone + Debug {\n\n    x.clone();\n    y.clone();\n    println!(\"{:?}\", y);\n}\n```\n\n\u3053\u306e\u67d4\u8edf\u306a\u69cb\u6587\u306b\u3088\u308a\u3001\u8907\u96d1\u306a\u72b6\u6cc1\u3067\u3042\u3063\u3066\u3082\u53ef\u8aad\u6027\u3092\u4fdd\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001`where`\u306f\u57fa\u672c\u7684\u306a\u69cb\u6587\u3088\u308a\u3082\u5f37\u529b\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\n(\u8a33\u6ce8: [std::convert::From](https://doc.rust-lang.org/std/convert/trait.From.html))\n\n``` rust\ntrait ConvertTo<Output> {\n    fn convert(&self) -> Output;\n}\n\nimpl ConvertTo<i64> for i32 {\n    fn convert(&self) -> i64 { *self as i64 }\n}\n\n// T == i32\u306e\u6642\u547c\u3073\u51fa\u305b\u308b\nfn normal<T: ConvertTo<i64>>(x: &T) -> i64 {\n    x.convert()\n}\n\n// T == i64\u306e\u3068\u304d\u547c\u3073\u51fa\u305b\u308b\nfn inverse<T>() -> T\n        // \u3053\u308c\u306f\"ConvertFrom<i32>\"\u3067\u3042\u308b\u304b\u306e\u3088\u3046\u306bConvertTo\u3092\u7528\u3044\u3066\u3044\u308b\n        where i32: ConvertTo<T> {\n    42.convert()\n}\n```\n\n\u3053\u3053\u3067\u306f`where`\u7bc0\u306e\u8ffd\u52a0\u6a5f\u80fd\u3092\u62ab\u9732\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u7bc0\u306f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306f\u306a\u3044\u4efb\u610f\u306e\u578b[^where]\u306b\u5bfe\u3057\u3066\u30c8\u30ec\u30a4\u30c8\u675f\u7e1b\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n## \u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\n\n\u79c1\u305f\u3061\u304c\u30ab\u30d0\u30fc\u3057\u3066\u304a\u304f\u3079\u304d\u30c8\u30ec\u30a4\u30c8\u306e\u6700\u5f8c\u306e\u6a5f\u80fd\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u3053\u308c\u306e\u4f8b\u3092\u793a\u3059\u306e\u306f\u6700\u3082\u7c21\u5358\u3067\u3059\u3002\n\n```rust\ntrait Foo {\n    fn bar(&self);\n\n    fn baz(&self) { println!(\"We called baz.\"); }\n}\n```\n\n`Foo`\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u8005\u306f`bar()`\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001`baz()`\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002`baz()`\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u52d5\u4f5c\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\u5b9f\u88c5\u8005\u306e\u9078\u629e\u6b21\u7b2c\u3067\u306f\u3053\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u52d5\u4f5c\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n```rust\ntrait Foo {\n    fn bar(&self);\n    fn baz(&self) { println!(\"We called baz.\"); }\n}\nstruct UseDefault;\n\nimpl Foo for UseDefault {\n    fn bar(&self) { println!(\"We called bar.\"); }\n}\n\nstruct OverrideDefault;\n\nimpl Foo for OverrideDefault {\n    fn bar(&self) { println!(\"We called bar.\"); }\n\n    fn baz(&self) { println!(\"Override baz!\"); }\n}\n\nlet default = UseDefault;\ndefault.baz(); // prints \"We called baz.\"\n\nlet over = OverrideDefault;\nover.baz(); // prints \"Override baz!\"\n```\n\n# \u7d99\u627f\n\n\u6642\u3005\u3001\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u306e\u306b\u4ed6\u306e\u30c8\u30ec\u30a4\u30c8\u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u306a\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\n\n```rust\ntrait Foo {\n    fn foo(&self);\n}\n\ntrait FooBar : Foo {\n    fn foobar(&self);\n}\n```\n\n`FooBar`\u306e\u5b9f\u88c5\u8005\u306f`Foo`\u3082\u307e\u305f\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```rust\ntrait Foo {\n    fn foo(&self);\n}\ntrait FooBar : Foo {\n    fn foobar(&self);\n}\nstruct Baz;\n\nimpl Foo for Baz {\n    fn foo(&self) { println!(\"foo\"); }\n}\n\nimpl FooBar for Baz {\n    fn foobar(&self) { println!(\"foobar\"); }\n}\n```\n\n\u3082\u3057`Foo`\u306e\u5b9f\u88c5\u3092\u5fd8\u308c\u308b\u3068\u3001Rust\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u77e5\u3089\u305b\u307e\u3059\u3002\n\n```text\nerror: the trait `main::Foo` is not implemented for the type `main::Baz` [E0277]\n```\n\n---\n\n[^where]: \u8a33\u6ce8: `T`\u3067\u306f\u306a\u304f\u3001\u4eca\u56de\u306f`i32`\u306e\u3088\u3046\u306a\u578b\n"}