{"context": " More than 1 year has passed since last update.\n\nMessagePack\u3068JSON\n\n\u5727\u7e2e\u52b9\u7387\u306e\u9ad8\u3055: MessagePack>JSON\n\u53ef\u8aad\u6027: JSON>MessagePack\n(\u8868\u73fe\u306e\u8907\u96d1\u5ea6: XML>JSON\u2267MessagePack)\u3000\u203b\u8868\u73fe\u306e\u8907\u96d1\u5ea6\u2252\u5b9f\u88c5\u306e\u96e3\u6613\u5ea6\n\n\u3067\u3042\u308b\u305f\u3081\u3001(\u4eba\u9593\u304c\u8aad\u3080\u53ef\u80fd\u6027\u306e\u3042\u308b)\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u51fa\u3057\u306fJSON\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540c\u58eb\u306e\u901a\u4fe1\u306fMessagePack\u306a\u3069\u3067\u884c\u308f\u308c\u308b\u306e\u304c\u6700\u8fd1\u306e\u6d41\u884c(\u306a\u6c17\u304c\u3059\u308b)\u3002\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\u30e6\u30fc\u30b6 \u21d0(JSON)\u21d2 API \u21d0(MessagePack)\u21d2 DB\n\u307e\u305f\u3001RDB\u306a\u3069\u3067\u691c\u7d22\u5bfe\u8c61\u306b\u5165\u3089\u306a\u3044\u968e\u5c64\u7684\u306a\u30c7\u30fc\u30bf\u3092MessagePack\u3067\u683c\u7d0d\u3059\u308b\u3068\u5727\u7e2e\u52b9\u7387\u3001\u51e6\u7406\u52b9\u7387\u304c\u9ad8\u304f\u3068\u3066\u3082\u826f\u3044\u3067\u3059\u3002\n\nJava\u306eMessagePack\u306e\u5b9f\u88c5\u306e\u554f\u984c\u70b9\u3068\u305d\u306e\u5bfe\u5fdc\nMessagePack\u306f2015\u5e748\u6708\u73fe\u5728\u30010.6\u30680.7\u306e\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u304c\u30010.7\u306f\u7d76\u8cdb\u958b\u767a\u4e2d\u3067\u3001template\u30d1\u30c3\u30b1\u30fc\u30b8\u306a\u3069Java\u306eObject\u3068\u306e\u9023\u643a\u3092\u81ea\u529b\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u4eca\u56de\u306f0.6\u3092\u524d\u63d0\u306b\u66f8\u304d\u307e\u3059\u3002\nJava\u306eMessagePack\u3067Java\u306eObject\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u5834\u5408\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u307e\u305b\u3093\u3002\n\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306fObject\u306e\u5b9a\u7fa9\u304c\u4e88\u3081\u7528\u610f\u3067\u304d\u308c\u3070\u5727\u7e2e\u52b9\u7387\u304c\u9ad8\u304f\u52b9\u7387\u7684\u3067\u3059\u304c\u3001\u904b\u7528\u4e2d\u306b\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u8db3\u3055\u308c\u305f\u5834\u5408\u306f\u5fc5\u305aObject\u306e\u5b9a\u7fa9\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u9593\u3067\u540c\u6642\u306b\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u8ffd\u52a0\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092Java\u3067\u306f\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3061\u306a\u307f\u306b\u3001perl\u306a\u3069\u52d5\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\u3067\u306fObject(instance)\u3092MessagePack\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u6642\u306b\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u542b\u3080Map\u5f62\u5f0f\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001Java\u306eMessagePack\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u52b9\u7387\u3092\u91cd\u8996\u3057\u305f\u5b9f\u88c5\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u4eca\u56de\u306f\u4e0d\u8981\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u305b\u305a\u3001\u4ed5\u69d8\u5909\u66f4\u306b\u3088\u308a\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5909\u66f4\u3055\u308c\u3084\u3059\u3044\u9805\u76ee\u306fMap\u5f62\u5f0f\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u307e\u305f\u3001JSON\u5f62\u5f0f\u3067\u3082\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u8003\u3048\u3089\u308c\u308b\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u9593\u306f\u5e38\u306b\u540c\u6642\u306b\u66f4\u65b0\u53ef\u80fd\u3067\u52b9\u7387\u3092\u91cd\u8996\u3059\u308b\u5834\u5408\n\n\n\u901a\u5e38\u901a\u308a\uff20Message\u306e\u5229\u7528\u304b\u3001\u901f\u5ea6\u3092\u6c42\u3081\u308b\u306a\u3089Template\u3092\u66f8\u304f\n\n\nDB\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u8ffd\u52a0\u3055\u308c\u305f\u9805\u76ee\u306b\u5bfe\u3057API\u306f\u51e6\u7406\u3092\u305b\u305a\u306b\u305d\u306e\u307e\u307e\u8fd4\u3057\u305f\u3044\u5834\u5408\n\n\n\u4eca\u56de\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306b\u8a72\u5f53\u3002\u51e6\u7406\u304c\u5fc5\u8981\u306e\u306a\u3044\u9805\u76ee\u3092Map\u3067\u5b9a\u7fa9\u3059\u308b\n\n\nDB\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u308b\u304c\u3001API\u306f\u5e38\u306b\u56fa\u5b9a\u306e\u9805\u76ee\u306e\u307f\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408(API\u306e\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u9805\u76ee\u3092\u8ffd\u52a0\u3059\u308b)\n\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3059\u308b\n\n\n\n\n\u30e6\u30fc\u30b9\u30b1\u30fc\u30b92\u306e\u5b9f\u88c5\nDB\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u8ffd\u52a0\u3055\u308c\u305f\u9805\u76ee\u306b\u5bfe\u3057API\u306f\u51e6\u7406\u3092\u305b\u305a\u306b\u305d\u306e\u307e\u307e\u8fd4\u3057\u305f\u3044\u5834\u5408\n\u4ed5\u69d8\u5909\u66f4\u304c\u60f3\u5b9a\u3055\u308c\u308b\u9805\u76ee\u306fMap\u3067\u683c\u7d0d\u3059\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u305d\u306eObject\u3092MessagePack\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306bObjectTemplate\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nObject\u3067\u5b9a\u7fa9\u3057\u305f\u305f\u3081\u3001\u4f7f\u7528\u3059\u308b\u6642\u306b\u30ad\u30e3\u30b9\u30c8\u304c\u524d\u63d0\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u30c7\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001JSON\u306b\u3082\u76f8\u4e92\u5909\u63db\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\uff08\u3053\u306e\u554f\u984c\u3092\u3046\u307e\u304f\u30af\u30ea\u30a2\u3067\u304d\u308b\u306a\u3089MessagePack\u306eValue\u306e\u69d8\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5b9a\u7fa9\u3057\u305f\u3044)\n\nMessagePackTest.class\nimport static org.msgpack.template.Templates.*;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.msgpack.MessagePack;\nimport org.msgpack.template.Template;\nimport org.msgpack.type.Value;\n\nimport com.google.gson.Gson;\n\n/**\n * MessagePack0.6\u3068JSON\u306e\u76f8\u4e92\u5909\u63db\u306e\u30c6\u30b9\u30c8\n */\npublic class MessagePackTest {\n\n    /**\n     * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306ePOJO\n     */\n    public static class TestObj {\n        public String str;\n        public int i;\n        public Child child;\n        public Map<String, Object> children; //Object\u306fJSON\u306b\u5165\u308b\u578b\u306e\u307f, \u8a2d\u8a08\u304c\u5909\u308f\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u683c\u7d0d\u65b9\u5f0f\n\n        public String toString() {\n            return \"{str:\"+str+\",i:\"+i+\",child:\"+child+\",children:\"+children.toString()+\"}\";\n        }\n    }\n\n    /**\n     * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306ePOJO\u306e\u5b50\u30af\u30e9\u30b9\n     */\n    public static class Child {\n        public String child;\n\n        public String toString() {\n            return \"{\"+child+\"}\";\n        }\n    }\n\n    /**\n     * main program\n     * @param args \u5fc5\u8981\u306a\u3057\n     * @throws Exception \u6050\u3089\u304f\u767a\u751f\u3057\u306a\u3044exception\n     */\n    public static void main(String[] args) throws Exception {\n\n        //\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\n        Child child = new Child();\n        child.child = \"hoge\";\n\n        TestObj obj = new TestObj();\n        obj.str = \"test\";\n        obj.i = 2;\n        obj.child = child;\n        obj.children = new HashMap<String, Object>();\n        obj.children.put(\"foo\", \"bar\");\n        obj.children.put(\"piyo\", ObjectTemplate.mapObject(child)); //Map<String,Object>\u306b\u306f\u4efb\u610f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u5165\u308c\u308c\u306a\u3044\u306e\u3067Map\u306b\u5909\u63db\n        obj.children.put(\"puyo\", new String[]{\"aaa\"});\n\n        //MessagePack\u306e\u521d\u671f\u5316\u3001register\u3092\u4f7f\u3046\u306e\u3067@Message\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4f7f\u7528\u306f\u306a\u3057\n        MessagePack msgpack = new MessagePack();\n        msgpack.register(Object.class, ObjectTemplate.getInstance());\n        msgpack.register(Child.class);\n        msgpack.register(TestObj.class);\n\n        //------------------------------------------------------\n        //MessagePack\u306eserialize\n        byte[] bytes = msgpack.write(obj);\n\n        //\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304cserialize\u3055\u308c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\n        System.out.println(bytes.length); //49\n        System.out.println(Arrays.toString(bytes)); //[-108, -92, 116, 101, 115, 116, 2, -111, -92, 104, 111, 103, 101, -125, -93, 102, 111, 111, -93, 98, 97, 114, -92, 112, 105, 121, 111, -127, -91, 99, 104, 105, 108, 100, -92, 104, 111, 103, 101, -92, 112, 117, 121, 111, -111, -93, 97, 97, 97]\n\n        Value value = msgpack.read(bytes);\n        System.out.println(value); //[\"test\",2,[\"hoge\"],{\"foo\":\"bar\",\"piyo\":{\"child\":\"hoge\"},\"puyo\":[\"aaa\"]}]\n\n        //MessagePack\u306edesirialzie\n        TestObj to = msgpack.read(bytes, TestObj.class);\n        System.out.println(to); //{str:test,i:2,child:{hoge},children:{foo=bar, piyo={child=hoge}, puyo=[aaa]}}\n\n        //-----------------------------------------------------\n        //Map\u5909\u63db\u5f8c\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u4ed8\u304d\u306eserialize\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\n        bytes = msgpack.write(ObjectTemplate.mapObject(obj));\n\n        //\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304c\u4ed8\u304f\u305f\u3081\u5727\u7e2e\u52b9\u7387\u306f\u843d\u3061\u308b\n        System.out.println(bytes.length); //76\n        System.out.println(Arrays.toString(bytes)); //[-124, -93, 115, 116, 114, -92, 116, 101, 115, 116, -88, 99, 104, 105, 108, 100, 114, 101, 110, -125, -93, 102, 111, 111, -93, 98, 97, 114, -92, 112, 105, 121, 111, -127, -91, 99, 104, 105, 108, 100, -92, 104, 111, 103, 101, -92, 112, 117, 121, 111, -111, -93, 97, 97, 97, -95, 105, 2, -91, 99, 104, 105, 108, 100, -127, -91, 99, 104, 105, 108, 100, -92, 104, 111, 103, 101]\n\n        value = msgpack.read(bytes);\n        System.out.println(value); //{\"str\":\"test\",\"children\":{\"foo\":\"bar\",\"piyo\":{\"child\":\"hoge\"},\"puyo\":[\"aaa\"]},\"i\":2,\"child\":{\"child\":\"hoge\"}}\n\n        //MessagePack\u306edesirialzie, static import\u3092\u4f7f\u3046\u3053\u3068\u306b\u6ce8\u610f\n        Template<Map<String, Object>> mapTmpl = tMap(TString, ObjectTemplate.getInstance());\n        Map<String, Object> mo = msgpack.read(bytes, mapTmpl);\n\n        System.out.println(mo); //{str=test, i=2, children={foo=bar, piyo={child=hoge}, puyo=[aaa]}, child={child=hoge}}\n\n        //-----------------------------------------------------\n        //\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304cJSON\u3067\u3082serialize/desirialize\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\n        Gson gson = new Gson();\n\n        //Map\u7248\u3082\u9806\u756a\u306f\u9055\u3046\u304c\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\n        String json = gson.toJson(to);\n        String json2 = gson.toJson(mo);\n        System.out.println(json); //{\"str\":\"test\",\"i\":2,\"child\":{\"child\":\"hoge\"},\"children\":{\"foo\":\"bar\",\"piyo\":{\"child\":\"hoge\"},\"puyo\":[\"aaa\"]}}\n        System.out.println(json2); //{\"str\":\"test\",\"i\":2,\"children\":{\"foo\":\"bar\",\"piyo\":{\"child\":\"hoge\"},\"puyo\":[\"aaa\"]},\"child\":{\"child\":\"hoge\"}}\n\n        TestObj to2 = gson.fromJson(json, TestObj.class);\n        @SuppressWarnings(\"unchecked\")\n        Map<String, Object> mo2 = (Map<String, Object>)gson.fromJson(json2, Map.class);\n\n        System.out.println(to2); //{str:test,i:2,child:{hoge},children:{foo=bar, piyo={child=hoge}, puyo=[aaa]}}\n        System.out.println(mo2); //{str=test, i=2.0, children={foo=bar, piyo={child=hoge}, puyo=[aaa]}, child={child=hoge}}\n    }\n\n}\n\n\n\n\nObjectTemplate.class\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.msgpack.MessageTypeException;\nimport org.msgpack.packer.Packer;\nimport org.msgpack.template.AbstractTemplate;\nimport org.msgpack.unpacker.Unpacker;\n\n\n/**\n * POJO\u7cfb\u306eObject\u306eTemplate\n *\n */\npublic class ObjectTemplate extends AbstractTemplate<Object> {\n\n    /** Singleton\u306einstance */\n    private static final ObjectTemplate INSTANCE = new ObjectTemplate();\n\n    /** private constructor */\n    private ObjectTemplate() {\n    }\n\n    /** get singleton instance */\n    public static ObjectTemplate getInstance() {\n        return INSTANCE;\n    }\n\n    /**\n     * pojo\u3092map\u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b\n     * @param obj pojo object\n     * @return map object\n     */\n    @SuppressWarnings(\"unchecked\")\n    public static Map<String, Object> mapObject(Object obj) {\n        Map<String, Object> map;\n        if(obj instanceof Map) {\n            map = (Map<String, Object>)obj;\n        } else {\n            map = new HashMap<String, Object>();\n            for (Field field : obj.getClass().getFields()) {\n                int mod = field.getModifiers();\n                if (Modifier.isPublic(mod) && !Modifier.isStatic(mod)\n                        && !Modifier.isTransient(mod)) {\n                    try {\n                        Object val = field.get(obj);\n                        if (!(val instanceof Number || val instanceof Boolean || val instanceof String)) {\n                            val = mapObject(val);\n                        }\n                        map.put(field.getName(), val);\n                    } catch (IllegalArgumentException | IllegalAccessException e) {\n                        // \u767a\u751f\u3057\u306a\u3044\u306f\u305a\n                        throw new RuntimeException(e);\n                    }\n                }\n            }\n        }\n        return map;\n    }\n\n    @Override\n    public void write(Packer paramPacker, Object paramT, boolean paramBoolean)\n            throws IOException {\n        if(paramT==null) {\n            if(paramBoolean) {\n                throw new MessageTypeException(\"Attempted to write null\");\n            }\n            paramPacker.writeNil();\n            return;\n        } else {\n            if(paramT instanceof Number ||\n                    paramT instanceof Boolean ||\n                    paramT instanceof String) {\n                paramPacker.write(paramT);\n            } else {\n                paramPacker.write(paramT);\n            }\n        }\n\n    }\n\n    @Override\n    public Object read(Unpacker paramUnpacker, Object paramT,\n            boolean paramBoolean) throws IOException {\n        if (!paramBoolean && paramUnpacker.trySkipNil()) {\n            return null;\n        }\n        Object obj = readObject(paramUnpacker);\n        return obj;\n    }\n\n    /**\n     * \u578b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u306a\u304c\u3089MessagePack\u306eunpack\u3092\u884c\u3046\n     * @param paramUnpacker unpacker\n     * @return object\n     * @throws IOException exception\n     */\n    private Object readObject(Unpacker paramUnpacker) throws IOException {\n        Object obj = null;\n        int size;\n        switch(paramUnpacker.getNextType()) {\n        case NIL:\n            paramUnpacker.readNil();\n            obj = null;\n            break;\n        case ARRAY :\n            //\u4ed6\u306ePOJO\u3082\u3053\u3053\u306b\u5165\u308b\u306e\u3067\u4f55\u304b\u3057\u3089\u306e\u5bfe\u7b56\u304c\u5fc5\u8981(\u306a\u3093\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u306f\u30c7\u30fc\u30bf\u304b\u3089\u306f\u5224\u65ad\u3067\u304d\u306a\u3044)\n            size = paramUnpacker.readArrayBegin();\n            ArrayList<Object> list = new ArrayList<>(size);\n            for(int i=0;i<size;i++) {\n                Object val = readObject(paramUnpacker);\n                list.add(val);\n            }\n            paramUnpacker.readArrayEnd();\n            obj = list;\n            break;\n        case BOOLEAN :\n            obj = paramUnpacker.readBoolean();\n            break;\n        case FLOAT :\n            obj = paramUnpacker.readFloat();\n            break;\n        case INTEGER :\n            obj = paramUnpacker.readInt();\n            break;\n        case MAP :\n            size = paramUnpacker.readMapBegin();\n            HashMap<String,Object> map = new HashMap<>();\n            for(int i=0;i<size;i++) {\n                String key = paramUnpacker.readString();\n                Object val = readObject(paramUnpacker);\n                map.put(key, val);\n            }\n            paramUnpacker.readMapEnd();\n            obj = map;\n            break;\n        case RAW :\n            obj = paramUnpacker.readString();\n            break;\n        default:\n            break;\n        }\n        return obj;\n    }\n\n}\n\n\n\n\npom.xml\n    <dependencies>\n        <dependency>\n            <groupId>org.msgpack</groupId>\n            <artifactId>msgpack</artifactId>\n            <version>0.6.12</version>\n        </dependency>\n        <dependency>\n            <groupId>com.google.code.gson</groupId>\n            <artifactId>gson</artifactId>\n            <version>2.3.1</version>\n        </dependency>\n    </dependencies>\n\n\n\n\u30e6\u30fc\u30b9\u30b1\u30fc\u30b93\u306e\u5b9f\u88c5\nDB\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u308b\u304c\u3001API\u306f\u5e38\u306b\u56fa\u5b9a\u306e\u9805\u76ee\u306e\u307f\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408(API\u306e\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u9805\u76ee\u3092\u8ffd\u52a0\u3059\u308b)\n\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u542b\u3081\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u305f\u3060\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u3068\u5727\u7e2e\u7387\u304c\u4f4e\u4e0b\u3059\u308b\u305f\u3081\u3001\u660e\u793a\u7684\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u6570\u5024\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u5727\u7e2e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u3001WildcardType(List<? extnds Number>\u306a\u3069)\u306e\u5b9f\u88c5\u306a\u3069\u306f\u79c1\u306e\u7406\u89e3\u5ea6\u304c\u4f4e\u304b\u3063\u305f\u306e\u3067\u8003\u616e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306a\u3069\u3082\u3046\u307e\u304f\u8003\u616e\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u3042\u304f\u307e\u3067\u3082\u66ab\u5b9a\u7684\u306a\u5b9f\u88c5\u4f8b\u3068\u306a\u308a\u307e\u3059\u3002\n\nMessagePackTest2\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.msgpack.MessagePack;\nimport org.msgpack.type.Value;\n\nimport com.google.gson.Gson;\n\n\n/**\n * MessagePack\u3092\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u6709\u308a\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u30c6\u30b9\u30c8\n *\n */\npublic class MessagePackTest2 {\n\n    /**\n     * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306ePOJO\n     */\n    public static class TestObj {\n        @CompressField(1)\n        public String str;\n\n        @CompressField(2)\n        public int i;\n\n        //@CompressField(3) //\u4e00\u90e8\u3092\u308f\u3056\u3068\u5727\u7e2e\u3057\u306a\u3044\u3067\u7f6e\u304f\n        public String[] strary;\n\n        @CompressField(4)\n        public List<String> strlist;\n\n        @CompressField(5)\n        public Map<String,Boolean> boolmap;\n\n        @CompressField(6)\n        public Child child;\n    }\n\n    /**\n     * TestObj\u306e\u4ed5\u69d8\u5909\u66f4\u7248\n     *\n     */\n    public static class AdvTestObj {\n        public String str;\n\n        public int i;\n\n        public boolean additionalField;\n    }\n\n    /**\n     * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306ePOJO\u306e\u5b50\u30af\u30e9\u30b9\n     */\n    public static class Child {\n\n        @CompressField(1)\n        public String child;\n    }\n\n    /**\n     * main program\n     * @param args \u5fc5\u8981\u306a\u3057\n     * @throws Exception \u6050\u3089\u304f\u767a\u751f\u3057\u306a\u3044exception\n     */\n    public static void main(String[] args) throws Exception {\n        TestObj obj = new TestObj();\n        obj.str = \"test\";\n        obj.i = 2;\n        obj.strary = new String[]{\"aa\"};\n        obj.strlist = new ArrayList<String>();\n        obj.strlist.add(\"bb\");\n        obj.boolmap = new HashMap<String,Boolean>();\n        obj.boolmap.put(\"hoge\", false);\n\n        Child child = new Child();\n        child.child = \"hoge\";\n\n        obj.child = child;\n\n        // Map\u5f62\u5f0f\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\n        MessagePack msgpack = new MessagePack();\n        msgpack.register(Child.class, new MapObjectTemplate<Child>(Child.class));\n        msgpack.register(TestObj.class, new MapObjectTemplate<TestObj>(TestObj.class));\n\n        byte[] bytes = msgpack.write(obj);\n\n        System.out.println(bytes.length); // 69\n        System.out.println(Arrays.toString(bytes)); // [-122, -93, 115, 116, 114, -92, 116, 101, 115, 116, -95, 105, 2, -90, 115, 116, 114, 97, 114, 121, -111, -94, 97, 97, -89, 115, 116, 114, 108, 105, 115, 116, -111, -94, 98, 98, -89, 98, 111, 111, 108, 109, 97, 112, -127, -92, 104, 111, 103, 101, -62, -91, 99, 104, 105, 108, 100, -127, -91, 99, 104, 105, 108, 100, -92, 104, 111, 103, 101]\n\n        Value value = msgpack.read(bytes);\n        System.out.println(value); // {\"str\":\"test\",\"i\":2,\"strary\":[\"aa\"],\"strlist\":[\"bb\"],\"boolmap\":{\"hoge\":false},\"child\":{\"child\":\"hoge\"}}\n\n        TestObj to = msgpack.read(bytes, TestObj.class);\n        System.out.println(new Gson().toJson(to)); // {\"str\":\"test\",\"i\":2,\"strary\":[\"aa\"],\"strlist\":[\"bb\"],\"boolmap\":{\"hoge\":false},\"child\":{\"child\":\"hoge\"}}\n\n\n        // \u901a\u5e38\u3068\u306e\u5727\u7e2e\u7387\u306e\u6bd4\u8f03\n        msgpack = new MessagePack();\n        msgpack.register(Child.class);\n        msgpack.register(TestObj.class);\n\n        bytes = msgpack.write(obj);\n\n        System.out.println(bytes.length); // 28\n        System.out.println(Arrays.toString(bytes)); // [-106, -92, 116, 101, 115, 116, 2, -111, -94, 97, 97, -111, -94, 98, 98, -127, -92, 104, 111, 103, 101, -62, -111, -92, 104, 111, 103, 101]\n\n        value = msgpack.read(bytes);\n        System.out.println(value); // [\"test\",2,[\"aa\"],[\"bb\"],{\"hoge\":false},[\"hoge\"]]\n\n\n        // \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u5727\u7e2e\u3059\u308b\u5834\u5408\n        msgpack = new MessagePack();\n\n        msgpack.register(Child.class, new MapObjectTemplate<Child>(Child.class, true));\n        msgpack.register(TestObj.class, new MapObjectTemplate<TestObj>(TestObj.class, true));\n\n        bytes = msgpack.write(obj);\n\n        System.out.println(bytes.length); // 41\n        System.out.println(Arrays.toString(bytes)); // [-122, 1, -92, 116, 101, 115, 116, 2, 2, -90, 115, 116, 114, 97, 114, 121, -111, -94, 97, 97, 4, -111, -94, 98, 98, 5, -127, -92, 104, 111, 103, 101, -62, 6, -127, 1, -92, 104, 111, 103, 101]\n\n        value = msgpack.read(bytes);\n        System.out.println(value); // {1:\"test\",2:2,\"strary\":[\"aa\"],4:[\"bb\"],5:{\"hoge\":false},6:{1:\"hoge\"}}\n\n\n        // \u4ed5\u69d8\u5909\u66f4\u304c\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6765\u305f\u5834\u5408\u3001\u4e0d\u8981\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u7121\u8996\u3059\u308b\n        AdvTestObj obj2 = new AdvTestObj();\n        obj2.str = \"test\";\n        obj2.i = 2;\n        obj2.additionalField = true;\n\n        msgpack = new MessagePack();\n\n        msgpack.register(Child.class, new MapObjectTemplate<Child>(Child.class, true));\n        msgpack.register(AdvTestObj.class, new MapObjectTemplate<AdvTestObj>(AdvTestObj.class));\n        msgpack.register(TestObj.class, new MapObjectTemplate<TestObj>(TestObj.class));\n\n        bytes = msgpack.write(obj2);\n\n        System.out.println(bytes.length);\n        System.out.println(Arrays.toString(bytes));\n\n        value = msgpack.read(bytes);\n        System.out.println(value);\n\n        TestObj obj3 = msgpack.read(bytes, TestObj.class);\n        System.out.println(new Gson().toJson(obj3));\n    }\n}\n\n\n\nMapObjectTemplate.java\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\n\nimport org.msgpack.MessageTypeException;\nimport org.msgpack.packer.Packer;\nimport org.msgpack.template.AbstractTemplate;\nimport org.msgpack.type.ValueType;\nimport org.msgpack.unpacker.Unpacker;\n\n\n/**\n * \u901a\u5e38\u306e\u30ea\u30b9\u30c8\u5f62\u5f0f\u3067\u306a\u304fMap\u5f62\u5f0f\u3067\u30b7\u30ea\u30a2\u30eb\u30fb\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\n *\n * @param <T> \u5bfe\u8c61\u306e\u30af\u30e9\u30b9\n */\npublic class MapObjectTemplate<T> extends AbstractTemplate<T> {\n\n    private Class<T> clazz;\n\n    private boolean isCompress;\n\n    private Map<Integer,Field> compressIndex;\n\n    /** private constructor */\n    public MapObjectTemplate(Class<T> clazz) {\n        this(clazz, false);\n    }\n\n    /** private constructor */\n    public MapObjectTemplate(Class<T> clazz, boolean isCompress) {\n        this.clazz = clazz;\n        this.isCompress = isCompress;\n\n        if (isCompress) {\n            compressIndex = new TreeMap<Integer,Field>();\n            for(Field field:clazz.getFields()) {\n                int mod = field.getModifiers();\n                if(!Modifier.isPublic(mod) || Modifier.isStatic(mod) || Modifier.isTransient(mod)) {\n                    continue;\n                }\n                CompressField cfield = field.getAnnotation(CompressField.class);\n                if (cfield==null) {\n                    continue;\n                }\n                compressIndex.put(cfield.value(), field);\n            }\n        }\n    }\n\n    @Override\n    public void write(Packer paramPacker, T paramT, boolean paramBoolean)\n            throws IOException {\n        if(paramT==null) {\n            if(paramBoolean) {\n                throw new MessageTypeException(\"Attempted to write null\");\n            }\n            paramPacker.writeNil();\n            return;\n        } else {\n            Field[] fields = paramT.getClass().getFields();\n            paramPacker.writeMapBegin(fields.length);\n            for(Field field:fields) {\n                int mod = field.getModifiers();\n                if(Modifier.isPublic(mod) && !Modifier.isStatic(mod) && !Modifier.isTransient(mod)) {\n                    try {\n                        CompressField cfield;\n                        if (isCompress && (cfield = field.getAnnotation(CompressField.class)) != null) {\n                            // \u5727\u7e2e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u5834\u5408\u3001\u6570\u5024\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u8868\u73fe\u3059\u308b\n                            paramPacker.write(cfield.value());\n                        } else {\n                            paramPacker.write(field.getName());\n                        }\n                        paramPacker.write(field.get(paramT));\n                    } catch (IllegalArgumentException | IllegalAccessException e) {\n                        throw new MessageTypeException(\"Illegal Exception\");\n                    }\n                }\n            }\n            paramPacker.writeMapEnd(paramBoolean);\n        }\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n    @Override\n    public T read(Unpacker paramUnpacker, T paramT,\n            boolean paramBoolean) throws IOException {\n        T obj = null;\n\n        try {\n            obj = clazz.newInstance();\n            int size = paramUnpacker.readMapBegin();\n            for(int i=0;i<size;i++) {\n                try {\n                    Field field;\n                    if (isCompress && paramUnpacker.getNextType()==ValueType.INTEGER) {\n                        field = compressIndex.get(paramUnpacker.readInt());\n                        if (field == null) {\n                            // skip value (\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408)\n                            paramUnpacker.skip();\n                            continue;\n                        }\n                    } else {\n                        field = clazz.getField(paramUnpacker.readString());\n                    }\n\n                    Object val = null;\n\n                    if (paramUnpacker.getNextType() == ValueType.NIL) {\n                        paramUnpacker.readNil();\n                        continue;\n                    }\n\n                    Type type = field.getGenericType();\n\n                    if(type instanceof Class) {\n                        val = paramUnpacker.read(field.getType());\n                    } else if(type instanceof ParameterizedType) {\n                        // List\u3084Map\u306e\u5834\u5408\n                        ParameterizedType pt = (ParameterizedType) type;\n                        Type[] types = pt.getActualTypeArguments();\n                        if(paramUnpacker.getNextType()==ValueType.MAP) {\n                            int len = paramUnpacker.readMapBegin();\n                            Map map = new LinkedHashMap();\n                            for(int j=0;j<len;j++) {\n                                Object key = paramUnpacker.read((Class)types[0]);\n                                Object value = paramUnpacker.read((Class)types[1]);\n                                map.put(key, value);\n                            }\n                            paramUnpacker.readMapEnd();\n                            val = map;\n                        } else if(paramUnpacker.getNextType()==ValueType.ARRAY){\n                            int len = paramUnpacker.readArrayBegin();\n                            List list = new ArrayList<>(len);\n                            for(int j=0;j<len;j++) {\n                                list.add(paramUnpacker.read((Class)types[0]));\n                            }\n                            paramUnpacker.readArrayEnd();\n                            val = list;\n                        }\n                    }\n                    field.set(obj, val);\n                } catch (NoSuchFieldException | SecurityException e) {\n                    // skip value (\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408)\n                    paramUnpacker.skip();\n                }\n            }\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new MessageTypeException(\"Instantiation, Illegal Exception\");\n        }\n\n        return obj;\n    }\n\n}\n\n\n\nCompressField.java\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6570\u5024\u3067\u5727\u7e2e\u3059\u308b\n * \u756a\u53f7\u306f\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u4e00\u610f\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\n *\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface CompressField {\n    int value();\n}\n\n\n\n\u30b3\u30fc\u30c9\u516c\u958b\nApache License 2.0\u3067github\u306b\u30b3\u30fc\u30c9\u3092\u3042\u3052\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/ksgwr/MessagePackTemplate\n\n\u7de8\u96c6\u5c65\u6b74\n\n2015/08/15 \u521d\u7a3f\n2015/08/23 \u6587\u7ae0\u6821\u6b63\u3001\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306e\u8ffd\u52a0\n2015/08/30 \u30e6\u30fc\u30b9\u30b1\u30fc\u30b93\u306e\u5b9f\u88c5\u3092\u8ffd\u52a0\n2015/09/21 \u30e9\u30a4\u30bb\u30f3\u30b9\u3092\u4ed8\u3051\u3066\u30b3\u30fc\u30c9\u516c\u958b\n\n# MessagePack\u3068JSON\n\n* \u5727\u7e2e\u52b9\u7387\u306e\u9ad8\u3055: MessagePack>JSON\n* \u53ef\u8aad\u6027: JSON>MessagePack\n* (\u8868\u73fe\u306e\u8907\u96d1\u5ea6: XML>JSON\u2267MessagePack)\u3000\u203b\u8868\u73fe\u306e\u8907\u96d1\u5ea6\u2252\u5b9f\u88c5\u306e\u96e3\u6613\u5ea6\n\n\u3067\u3042\u308b\u305f\u3081\u3001(\u4eba\u9593\u304c\u8aad\u3080\u53ef\u80fd\u6027\u306e\u3042\u308b)\u30d5\u30a1\u30a4\u30eb\u306e\u66f8\u304d\u51fa\u3057\u306fJSON\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540c\u58eb\u306e\u901a\u4fe1\u306fMessagePack\u306a\u3069\u3067\u884c\u308f\u308c\u308b\u306e\u304c\u6700\u8fd1\u306e\u6d41\u884c(\u306a\u6c17\u304c\u3059\u308b)\u3002\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n\u30e6\u30fc\u30b6 \u21d0(JSON)\u21d2 API \u21d0(MessagePack)\u21d2 DB\n\n\u307e\u305f\u3001RDB\u306a\u3069\u3067\u691c\u7d22\u5bfe\u8c61\u306b\u5165\u3089\u306a\u3044**\u968e\u5c64\u7684\u306a\u30c7\u30fc\u30bf**\u3092MessagePack\u3067\u683c\u7d0d\u3059\u308b\u3068\u5727\u7e2e\u52b9\u7387\u3001\u51e6\u7406\u52b9\u7387\u304c\u9ad8\u304f\u3068\u3066\u3082\u826f\u3044\u3067\u3059\u3002\n\n# Java\u306eMessagePack\u306e\u5b9f\u88c5\u306e\u554f\u984c\u70b9\u3068\u305d\u306e\u5bfe\u5fdc\n\nMessagePack\u306f2015\u5e748\u6708\u73fe\u5728\u30010.6\u30680.7\u306e\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u304c\u30010.7\u306f\u7d76\u8cdb\u958b\u767a\u4e2d\u3067\u3001template\u30d1\u30c3\u30b1\u30fc\u30b8\u306a\u3069Java\u306eObject\u3068\u306e\u9023\u643a\u3092\u81ea\u529b\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u4eca\u56de\u306f0.6\u3092\u524d\u63d0\u306b\u66f8\u304d\u307e\u3059\u3002\nJava\u306eMessagePack\u3067Java\u306eObject\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u5834\u5408\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u307e\u305b\u3093\u3002\n\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306fObject\u306e\u5b9a\u7fa9\u304c\u4e88\u3081\u7528\u610f\u3067\u304d\u308c\u3070\u5727\u7e2e\u52b9\u7387\u304c\u9ad8\u304f\u52b9\u7387\u7684\u3067\u3059\u304c\u3001\u904b\u7528\u4e2d\u306b\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u8db3\u3055\u308c\u305f\u5834\u5408\u306f\u5fc5\u305aObject\u306e\u5b9a\u7fa9\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u9593\u3067\u540c\u6642\u306b\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u8ffd\u52a0\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092Java\u3067\u306f\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u3061\u306a\u307f\u306b\u3001perl\u306a\u3069\u52d5\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\u3067\u306fObject(instance)\u3092MessagePack\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u6642\u306b\u306f\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u542b\u3080Map\u5f62\u5f0f\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001Java\u306eMessagePack\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u52b9\u7387\u3092\u91cd\u8996\u3057\u305f\u5b9f\u88c5\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u4eca\u56de\u306f\u4e0d\u8981\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u305b\u305a\u3001\u4ed5\u69d8\u5909\u66f4\u306b\u3088\u308a\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5909\u66f4\u3055\u308c\u3084\u3059\u3044\u9805\u76ee\u306fMap\u5f62\u5f0f\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u307e\u305f\u3001JSON\u5f62\u5f0f\u3067\u3082\u8aad\u307f\u66f8\u304d\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u8003\u3048\u3089\u308c\u308b\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\n\n1. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u9593\u306f\u5e38\u306b\u540c\u6642\u306b\u66f4\u65b0\u53ef\u80fd\u3067\u52b9\u7387\u3092\u91cd\u8996\u3059\u308b\u5834\u5408\n    * \u901a\u5e38\u901a\u308a\uff20Message\u306e\u5229\u7528\u304b\u3001\u901f\u5ea6\u3092\u6c42\u3081\u308b\u306a\u3089Template\u3092\u66f8\u304f\n2. DB\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u8ffd\u52a0\u3055\u308c\u305f\u9805\u76ee\u306b\u5bfe\u3057API\u306f\u51e6\u7406\u3092\u305b\u305a\u306b\u305d\u306e\u307e\u307e\u8fd4\u3057\u305f\u3044\u5834\u5408\n    * \u4eca\u56de\u306e\u8a18\u4e8b\u306e\u5185\u5bb9\u306b\u8a72\u5f53\u3002\u51e6\u7406\u304c\u5fc5\u8981\u306e\u306a\u3044\u9805\u76ee\u3092Map<String,Object>\u3067\u5b9a\u7fa9\u3059\u308b\n3. DB\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u308b\u304c\u3001API\u306f\u5e38\u306b\u56fa\u5b9a\u306e\u9805\u76ee\u306e\u307f\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408(API\u306e\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u9805\u76ee\u3092\u8ffd\u52a0\u3059\u308b)\n    * \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u306b\u5bfe\u5fdc\u3059\u308b\n\n# \u30e6\u30fc\u30b9\u30b1\u30fc\u30b92\u306e\u5b9f\u88c5\n\nDB\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u308b\u304c\u3001\u305d\u306e\u8ffd\u52a0\u3055\u308c\u305f\u9805\u76ee\u306b\u5bfe\u3057API\u306f\u51e6\u7406\u3092\u305b\u305a\u306b\u305d\u306e\u307e\u307e\u8fd4\u3057\u305f\u3044\u5834\u5408\n\n\u4ed5\u69d8\u5909\u66f4\u304c\u60f3\u5b9a\u3055\u308c\u308b\u9805\u76ee\u306fMap<String, Object>\u3067\u683c\u7d0d\u3059\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001\u305d\u306eObject\u3092MessagePack\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306bObjectTemplate\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\nObject\u3067\u5b9a\u7fa9\u3057\u305f\u305f\u3081\u3001\u4f7f\u7528\u3059\u308b\u6642\u306b\u30ad\u30e3\u30b9\u30c8\u304c\u524d\u63d0\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u30c7\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u304c\u3001JSON\u306b\u3082\u76f8\u4e92\u5909\u63db\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\uff08\u3053\u306e\u554f\u984c\u3092\u3046\u307e\u304f\u30af\u30ea\u30a2\u3067\u304d\u308b\u306a\u3089MessagePack\u306eValue\u306e\u69d8\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5b9a\u7fa9\u3057\u305f\u3044)\n\n```java:MessagePackTest.class\nimport static org.msgpack.template.Templates.*;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.msgpack.MessagePack;\nimport org.msgpack.template.Template;\nimport org.msgpack.type.Value;\n\nimport com.google.gson.Gson;\n\n/**\n * MessagePack0.6\u3068JSON\u306e\u76f8\u4e92\u5909\u63db\u306e\u30c6\u30b9\u30c8\n */\npublic class MessagePackTest {\n\n\t/**\n\t * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306ePOJO\n\t */\n\tpublic static class TestObj {\n\t\tpublic String str;\n\t\tpublic int i;\n\t\tpublic Child child;\n\t\tpublic Map<String, Object> children; //Object\u306fJSON\u306b\u5165\u308b\u578b\u306e\u307f, \u8a2d\u8a08\u304c\u5909\u308f\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u683c\u7d0d\u65b9\u5f0f\n\n\t\tpublic String toString() {\n\t\t\treturn \"{str:\"+str+\",i:\"+i+\",child:\"+child+\",children:\"+children.toString()+\"}\";\n\t\t}\n\t}\n\n\t/**\n\t * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306ePOJO\u306e\u5b50\u30af\u30e9\u30b9\n\t */\n\tpublic static class Child {\n\t\tpublic String child;\n\n\t\tpublic String toString() {\n\t\t\treturn \"{\"+child+\"}\";\n\t\t}\n\t}\n\n\t/**\n\t * main program\n\t * @param args \u5fc5\u8981\u306a\u3057\n\t * @throws Exception \u6050\u3089\u304f\u767a\u751f\u3057\u306a\u3044exception\n\t */\n\tpublic static void main(String[] args) throws Exception {\n\n\t\t//\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\n\t\tChild child = new Child();\n\t\tchild.child = \"hoge\";\n\n\t\tTestObj obj = new TestObj();\n\t\tobj.str = \"test\";\n\t\tobj.i = 2;\n\t\tobj.child = child;\n\t\tobj.children = new HashMap<String, Object>();\n\t\tobj.children.put(\"foo\", \"bar\");\n\t\tobj.children.put(\"piyo\", ObjectTemplate.mapObject(child)); //Map<String,Object>\u306b\u306f\u4efb\u610f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u5165\u308c\u308c\u306a\u3044\u306e\u3067Map\u306b\u5909\u63db\n\t\tobj.children.put(\"puyo\", new String[]{\"aaa\"});\n\n\t\t//MessagePack\u306e\u521d\u671f\u5316\u3001register\u3092\u4f7f\u3046\u306e\u3067@Message\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4f7f\u7528\u306f\u306a\u3057\n\t\tMessagePack msgpack = new MessagePack();\n\t\tmsgpack.register(Object.class, ObjectTemplate.getInstance());\n\t\tmsgpack.register(Child.class);\n\t\tmsgpack.register(TestObj.class);\n\n\t\t//------------------------------------------------------\n\t\t//MessagePack\u306eserialize\n\t\tbyte[] bytes = msgpack.write(obj);\n\n\t\t//\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304cserialize\u3055\u308c\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\n\t\tSystem.out.println(bytes.length); //49\n\t\tSystem.out.println(Arrays.toString(bytes)); //[-108, -92, 116, 101, 115, 116, 2, -111, -92, 104, 111, 103, 101, -125, -93, 102, 111, 111, -93, 98, 97, 114, -92, 112, 105, 121, 111, -127, -91, 99, 104, 105, 108, 100, -92, 104, 111, 103, 101, -92, 112, 117, 121, 111, -111, -93, 97, 97, 97]\n\n\t\tValue value = msgpack.read(bytes);\n\t\tSystem.out.println(value); //[\"test\",2,[\"hoge\"],{\"foo\":\"bar\",\"piyo\":{\"child\":\"hoge\"},\"puyo\":[\"aaa\"]}]\n\n\t\t//MessagePack\u306edesirialzie\n\t\tTestObj to = msgpack.read(bytes, TestObj.class);\n\t\tSystem.out.println(to); //{str:test,i:2,child:{hoge},children:{foo=bar, piyo={child=hoge}, puyo=[aaa]}}\n\n\t\t//-----------------------------------------------------\n\t\t//Map\u5909\u63db\u5f8c\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u4ed8\u304d\u306eserialize\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\n\t\tbytes = msgpack.write(ObjectTemplate.mapObject(obj));\n\n\t\t//\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304c\u4ed8\u304f\u305f\u3081\u5727\u7e2e\u52b9\u7387\u306f\u843d\u3061\u308b\n\t\tSystem.out.println(bytes.length); //76\n\t\tSystem.out.println(Arrays.toString(bytes)); //[-124, -93, 115, 116, 114, -92, 116, 101, 115, 116, -88, 99, 104, 105, 108, 100, 114, 101, 110, -125, -93, 102, 111, 111, -93, 98, 97, 114, -92, 112, 105, 121, 111, -127, -91, 99, 104, 105, 108, 100, -92, 104, 111, 103, 101, -92, 112, 117, 121, 111, -111, -93, 97, 97, 97, -95, 105, 2, -91, 99, 104, 105, 108, 100, -127, -91, 99, 104, 105, 108, 100, -92, 104, 111, 103, 101]\n\n\t\tvalue = msgpack.read(bytes);\n\t\tSystem.out.println(value); //{\"str\":\"test\",\"children\":{\"foo\":\"bar\",\"piyo\":{\"child\":\"hoge\"},\"puyo\":[\"aaa\"]},\"i\":2,\"child\":{\"child\":\"hoge\"}}\n\n\t\t//MessagePack\u306edesirialzie, static import\u3092\u4f7f\u3046\u3053\u3068\u306b\u6ce8\u610f\n\t\tTemplate<Map<String, Object>> mapTmpl = tMap(TString, ObjectTemplate.getInstance());\n\t\tMap<String, Object> mo = msgpack.read(bytes, mapTmpl);\n\n\t\tSystem.out.println(mo); //{str=test, i=2, children={foo=bar, piyo={child=hoge}, puyo=[aaa]}, child={child=hoge}}\n\n\t\t//-----------------------------------------------------\n\t\t//\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304cJSON\u3067\u3082serialize/desirialize\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\n\t\tGson gson = new Gson();\n\n\t\t//Map\u7248\u3082\u9806\u756a\u306f\u9055\u3046\u304c\u540c\u3058\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u308b\u3053\u3068\u3092\u78ba\u8a8d\n\t\tString json = gson.toJson(to);\n\t\tString json2 = gson.toJson(mo);\n\t\tSystem.out.println(json); //{\"str\":\"test\",\"i\":2,\"child\":{\"child\":\"hoge\"},\"children\":{\"foo\":\"bar\",\"piyo\":{\"child\":\"hoge\"},\"puyo\":[\"aaa\"]}}\n\t\tSystem.out.println(json2); //{\"str\":\"test\",\"i\":2,\"children\":{\"foo\":\"bar\",\"piyo\":{\"child\":\"hoge\"},\"puyo\":[\"aaa\"]},\"child\":{\"child\":\"hoge\"}}\n\n\t\tTestObj to2 = gson.fromJson(json, TestObj.class);\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tMap<String, Object> mo2 = (Map<String, Object>)gson.fromJson(json2, Map.class);\n\n\t\tSystem.out.println(to2); //{str:test,i:2,child:{hoge},children:{foo=bar, piyo={child=hoge}, puyo=[aaa]}}\n\t\tSystem.out.println(mo2); //{str=test, i=2.0, children={foo=bar, piyo={child=hoge}, puyo=[aaa]}, child={child=hoge}}\n\t}\n\n}\n\n```\n\n```java:ObjectTemplate.class\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.msgpack.MessageTypeException;\nimport org.msgpack.packer.Packer;\nimport org.msgpack.template.AbstractTemplate;\nimport org.msgpack.unpacker.Unpacker;\n\n\n/**\n * POJO\u7cfb\u306eObject\u306eTemplate\n *\n */\npublic class ObjectTemplate extends AbstractTemplate<Object> {\n\n\t/** Singleton\u306einstance */\n\tprivate static final ObjectTemplate INSTANCE = new ObjectTemplate();\n\n\t/** private constructor */\n\tprivate ObjectTemplate() {\n\t}\n\n\t/** get singleton instance */\n\tpublic static ObjectTemplate getInstance() {\n\t\treturn INSTANCE;\n\t}\n\n\t/**\n\t * pojo\u3092map\u5f62\u5f0f\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b\n\t * @param obj pojo object\n\t * @return map object\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic static Map<String, Object> mapObject(Object obj) {\n\t\tMap<String, Object> map;\n\t\tif(obj instanceof Map) {\n\t\t\tmap = (Map<String, Object>)obj;\n\t\t} else {\n\t\t\tmap = new HashMap<String, Object>();\n\t\t\tfor (Field field : obj.getClass().getFields()) {\n\t\t\t\tint mod = field.getModifiers();\n\t\t\t\tif (Modifier.isPublic(mod) && !Modifier.isStatic(mod)\n\t\t\t\t\t\t&& !Modifier.isTransient(mod)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tObject val = field.get(obj);\n\t\t\t\t\t\tif (!(val instanceof Number || val instanceof Boolean || val instanceof String)) {\n\t\t\t\t\t\t\tval = mapObject(val);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmap.put(field.getName(), val);\n\t\t\t\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\n\t\t\t\t\t\t// \u767a\u751f\u3057\u306a\u3044\u306f\u305a\n\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn map;\n\t}\n\n\t@Override\n\tpublic void write(Packer paramPacker, Object paramT, boolean paramBoolean)\n\t\t\tthrows IOException {\n\t\tif(paramT==null) {\n\t\t\tif(paramBoolean) {\n\t\t\t\tthrow new MessageTypeException(\"Attempted to write null\");\n\t\t\t}\n\t\t\tparamPacker.writeNil();\n\t\t\treturn;\n\t\t} else {\n\t\t\tif(paramT instanceof Number ||\n\t\t\t\t\tparamT instanceof Boolean ||\n\t\t\t\t\tparamT instanceof String) {\n\t\t\t\tparamPacker.write(paramT);\n\t\t\t} else {\n\t\t\t\tparamPacker.write(paramT);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@Override\n\tpublic Object read(Unpacker paramUnpacker, Object paramT,\n\t\t\tboolean paramBoolean) throws IOException {\n\t\tif (!paramBoolean && paramUnpacker.trySkipNil()) {\n\t\t\treturn null;\n\t\t}\n\t\tObject obj = readObject(paramUnpacker);\n\t\treturn obj;\n\t}\n\n\t/**\n\t * \u578b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u306a\u304c\u3089MessagePack\u306eunpack\u3092\u884c\u3046\n\t * @param paramUnpacker unpacker\n\t * @return object\n\t * @throws IOException exception\n\t */\n\tprivate Object readObject(Unpacker paramUnpacker) throws IOException {\n\t\tObject obj = null;\n\t\tint size;\n\t\tswitch(paramUnpacker.getNextType()) {\n\t\tcase NIL:\n\t\t\tparamUnpacker.readNil();\n\t\t\tobj = null;\n\t\t\tbreak;\n\t\tcase ARRAY :\n\t\t\t//\u4ed6\u306ePOJO\u3082\u3053\u3053\u306b\u5165\u308b\u306e\u3067\u4f55\u304b\u3057\u3089\u306e\u5bfe\u7b56\u304c\u5fc5\u8981(\u306a\u3093\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u306f\u30c7\u30fc\u30bf\u304b\u3089\u306f\u5224\u65ad\u3067\u304d\u306a\u3044)\n\t\t\tsize = paramUnpacker.readArrayBegin();\n\t\t\tArrayList<Object> list = new ArrayList<>(size);\n\t\t\tfor(int i=0;i<size;i++) {\n\t\t\t\tObject val = readObject(paramUnpacker);\n\t\t\t\tlist.add(val);\n\t\t\t}\n\t\t\tparamUnpacker.readArrayEnd();\n\t\t\tobj = list;\n\t\t\tbreak;\n\t\tcase BOOLEAN :\n\t\t\tobj = paramUnpacker.readBoolean();\n\t\t\tbreak;\n\t\tcase FLOAT :\n\t\t\tobj = paramUnpacker.readFloat();\n\t\t\tbreak;\n\t\tcase INTEGER :\n\t\t\tobj = paramUnpacker.readInt();\n\t\t\tbreak;\n\t\tcase MAP :\n\t\t\tsize = paramUnpacker.readMapBegin();\n\t\t\tHashMap<String,Object> map = new HashMap<>();\n\t\t\tfor(int i=0;i<size;i++) {\n\t\t\t\tString key = paramUnpacker.readString();\n\t\t\t\tObject val = readObject(paramUnpacker);\n\t\t\t\tmap.put(key, val);\n\t\t\t}\n\t\t\tparamUnpacker.readMapEnd();\n\t\t\tobj = map;\n\t\t\tbreak;\n\t\tcase RAW :\n\t\t\tobj = paramUnpacker.readString();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t\treturn obj;\n\t}\n\n}\n\n```\n\n```xml:pom.xml\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.msgpack</groupId>\n\t\t\t<artifactId>msgpack</artifactId>\n\t\t\t<version>0.6.12</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>com.google.code.gson</groupId>\n\t\t\t<artifactId>gson</artifactId>\n\t\t\t<version>2.3.1</version>\n\t\t</dependency>\n\t</dependencies>\n```\n\n# \u30e6\u30fc\u30b9\u30b1\u30fc\u30b93\u306e\u5b9f\u88c5\n\nDB\u306e\u9805\u76ee\u304c\u8ffd\u52a0\u3055\u308c\u308b\u304c\u3001API\u306f\u5e38\u306b\u56fa\u5b9a\u306e\u9805\u76ee\u306e\u307f\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408(API\u306e\u66f4\u65b0\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u9805\u76ee\u3092\u8ffd\u52a0\u3059\u308b)\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u542b\u3081\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u305f\u3060\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u3068\u5727\u7e2e\u7387\u304c\u4f4e\u4e0b\u3059\u308b\u305f\u3081\u3001\u660e\u793a\u7684\u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u6570\u5024\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u5727\u7e2e\u3059\u308b\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u3001WildcardType(List<? extnds Number>\u306a\u3069)\u306e\u5b9f\u88c5\u306a\u3069\u306f\u79c1\u306e\u7406\u89e3\u5ea6\u304c\u4f4e\u304b\u3063\u305f\u306e\u3067\u8003\u616e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u307e\u305f\u3001\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306a\u3069\u3082\u3046\u307e\u304f\u8003\u616e\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u3042\u304f\u307e\u3067\u3082\u66ab\u5b9a\u7684\u306a\u5b9f\u88c5\u4f8b\u3068\u306a\u308a\u307e\u3059\u3002\n\n```java:MessagePackTest2\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.msgpack.MessagePack;\nimport org.msgpack.type.Value;\n\nimport com.google.gson.Gson;\n\n\n/**\n * MessagePack\u3092\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u6709\u308a\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u30c6\u30b9\u30c8\n *\n */\npublic class MessagePackTest2 {\n\n\t/**\n\t * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306ePOJO\n\t */\n\tpublic static class TestObj {\n\t\t@CompressField(1)\n\t\tpublic String str;\n\n\t\t@CompressField(2)\n\t\tpublic int i;\n\n\t\t//@CompressField(3) //\u4e00\u90e8\u3092\u308f\u3056\u3068\u5727\u7e2e\u3057\u306a\u3044\u3067\u7f6e\u304f\n\t\tpublic String[] strary;\n\n\t\t@CompressField(4)\n\t\tpublic List<String> strlist;\n\n\t\t@CompressField(5)\n\t\tpublic Map<String,Boolean> boolmap;\n\n\t\t@CompressField(6)\n\t\tpublic Child child;\n\t}\n\n\t/**\n\t * TestObj\u306e\u4ed5\u69d8\u5909\u66f4\u7248\n\t *\n\t */\n\tpublic static class AdvTestObj {\n\t\tpublic String str;\n\n\t\tpublic int i;\n\n\t\tpublic boolean additionalField;\n\t}\n\n\t/**\n\t * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306ePOJO\u306e\u5b50\u30af\u30e9\u30b9\n\t */\n\tpublic static class Child {\n\n\t\t@CompressField(1)\n\t\tpublic String child;\n\t}\n\n\t/**\n\t * main program\n\t * @param args \u5fc5\u8981\u306a\u3057\n\t * @throws Exception \u6050\u3089\u304f\u767a\u751f\u3057\u306a\u3044exception\n\t */\n\tpublic static void main(String[] args) throws Exception {\n\t\tTestObj obj = new TestObj();\n\t\tobj.str = \"test\";\n\t\tobj.i = 2;\n\t\tobj.strary = new String[]{\"aa\"};\n\t\tobj.strlist = new ArrayList<String>();\n\t\tobj.strlist.add(\"bb\");\n\t\tobj.boolmap = new HashMap<String,Boolean>();\n\t\tobj.boolmap.put(\"hoge\", false);\n\n\t\tChild child = new Child();\n\t\tchild.child = \"hoge\";\n\n\t\tobj.child = child;\n\n\t\t// Map\u5f62\u5f0f\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\n\t\tMessagePack msgpack = new MessagePack();\n\t\tmsgpack.register(Child.class, new MapObjectTemplate<Child>(Child.class));\n\t\tmsgpack.register(TestObj.class, new MapObjectTemplate<TestObj>(TestObj.class));\n\n\t\tbyte[] bytes = msgpack.write(obj);\n\n\t\tSystem.out.println(bytes.length); // 69\n\t\tSystem.out.println(Arrays.toString(bytes)); // [-122, -93, 115, 116, 114, -92, 116, 101, 115, 116, -95, 105, 2, -90, 115, 116, 114, 97, 114, 121, -111, -94, 97, 97, -89, 115, 116, 114, 108, 105, 115, 116, -111, -94, 98, 98, -89, 98, 111, 111, 108, 109, 97, 112, -127, -92, 104, 111, 103, 101, -62, -91, 99, 104, 105, 108, 100, -127, -91, 99, 104, 105, 108, 100, -92, 104, 111, 103, 101]\n\n\t\tValue value = msgpack.read(bytes);\n\t\tSystem.out.println(value); // {\"str\":\"test\",\"i\":2,\"strary\":[\"aa\"],\"strlist\":[\"bb\"],\"boolmap\":{\"hoge\":false},\"child\":{\"child\":\"hoge\"}}\n\n\t\tTestObj to = msgpack.read(bytes, TestObj.class);\n\t\tSystem.out.println(new Gson().toJson(to)); // {\"str\":\"test\",\"i\":2,\"strary\":[\"aa\"],\"strlist\":[\"bb\"],\"boolmap\":{\"hoge\":false},\"child\":{\"child\":\"hoge\"}}\n\n\n\t\t// \u901a\u5e38\u3068\u306e\u5727\u7e2e\u7387\u306e\u6bd4\u8f03\n\t\tmsgpack = new MessagePack();\n\t\tmsgpack.register(Child.class);\n\t\tmsgpack.register(TestObj.class);\n\n\t\tbytes = msgpack.write(obj);\n\n\t\tSystem.out.println(bytes.length); // 28\n\t\tSystem.out.println(Arrays.toString(bytes)); // [-106, -92, 116, 101, 115, 116, 2, -111, -94, 97, 97, -111, -94, 98, 98, -127, -92, 104, 111, 103, 101, -62, -111, -92, 104, 111, 103, 101]\n\n\t\tvalue = msgpack.read(bytes);\n\t\tSystem.out.println(value); // [\"test\",2,[\"aa\"],[\"bb\"],{\"hoge\":false},[\"hoge\"]]\n\n\n\t\t// \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u5727\u7e2e\u3059\u308b\u5834\u5408\n\t\tmsgpack = new MessagePack();\n\n\t\tmsgpack.register(Child.class, new MapObjectTemplate<Child>(Child.class, true));\n\t\tmsgpack.register(TestObj.class, new MapObjectTemplate<TestObj>(TestObj.class, true));\n\n\t\tbytes = msgpack.write(obj);\n\n\t\tSystem.out.println(bytes.length); // 41\n\t\tSystem.out.println(Arrays.toString(bytes)); // [-122, 1, -92, 116, 101, 115, 116, 2, 2, -90, 115, 116, 114, 97, 114, 121, -111, -94, 97, 97, 4, -111, -94, 98, 98, 5, -127, -92, 104, 111, 103, 101, -62, 6, -127, 1, -92, 104, 111, 103, 101]\n\n\t\tvalue = msgpack.read(bytes);\n\t\tSystem.out.println(value); // {1:\"test\",2:2,\"strary\":[\"aa\"],4:[\"bb\"],5:{\"hoge\":false},6:{1:\"hoge\"}}\n\n\n\t\t// \u4ed5\u69d8\u5909\u66f4\u304c\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6765\u305f\u5834\u5408\u3001\u4e0d\u8981\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u7121\u8996\u3059\u308b\n\t\tAdvTestObj obj2 = new AdvTestObj();\n\t\tobj2.str = \"test\";\n\t\tobj2.i = 2;\n\t\tobj2.additionalField = true;\n\n\t\tmsgpack = new MessagePack();\n\n\t\tmsgpack.register(Child.class, new MapObjectTemplate<Child>(Child.class, true));\n\t\tmsgpack.register(AdvTestObj.class, new MapObjectTemplate<AdvTestObj>(AdvTestObj.class));\n\t\tmsgpack.register(TestObj.class, new MapObjectTemplate<TestObj>(TestObj.class));\n\n\t\tbytes = msgpack.write(obj2);\n\n\t\tSystem.out.println(bytes.length);\n\t\tSystem.out.println(Arrays.toString(bytes));\n\n\t\tvalue = msgpack.read(bytes);\n\t\tSystem.out.println(value);\n\n\t\tTestObj obj3 = msgpack.read(bytes, TestObj.class);\n\t\tSystem.out.println(new Gson().toJson(obj3));\n\t}\n}\n```\n\n```java:MapObjectTemplate.java\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeMap;\n\nimport org.msgpack.MessageTypeException;\nimport org.msgpack.packer.Packer;\nimport org.msgpack.template.AbstractTemplate;\nimport org.msgpack.type.ValueType;\nimport org.msgpack.unpacker.Unpacker;\n\n\n/**\n * \u901a\u5e38\u306e\u30ea\u30b9\u30c8\u5f62\u5f0f\u3067\u306a\u304fMap\u5f62\u5f0f\u3067\u30b7\u30ea\u30a2\u30eb\u30fb\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\n *\n * @param <T> \u5bfe\u8c61\u306e\u30af\u30e9\u30b9\n */\npublic class MapObjectTemplate<T> extends AbstractTemplate<T> {\n\n\tprivate Class<T> clazz;\n\n\tprivate boolean isCompress;\n\n\tprivate Map<Integer,Field> compressIndex;\n\n\t/** private constructor */\n\tpublic MapObjectTemplate(Class<T> clazz) {\n\t\tthis(clazz, false);\n\t}\n\n\t/** private constructor */\n\tpublic MapObjectTemplate(Class<T> clazz, boolean isCompress) {\n\t\tthis.clazz = clazz;\n\t\tthis.isCompress = isCompress;\n\n\t\tif (isCompress) {\n\t\t\tcompressIndex = new TreeMap<Integer,Field>();\n\t\t\tfor(Field field:clazz.getFields()) {\n\t\t\t\tint mod = field.getModifiers();\n\t\t\t\tif(!Modifier.isPublic(mod) || Modifier.isStatic(mod) || Modifier.isTransient(mod)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tCompressField cfield = field.getAnnotation(CompressField.class);\n\t\t\t\tif (cfield==null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tcompressIndex.put(cfield.value(), field);\n\t\t\t}\n\t\t}\n\t}\n\n\t@Override\n\tpublic void write(Packer paramPacker, T paramT, boolean paramBoolean)\n\t\t\tthrows IOException {\n\t\tif(paramT==null) {\n\t\t\tif(paramBoolean) {\n\t\t\t\tthrow new MessageTypeException(\"Attempted to write null\");\n\t\t\t}\n\t\t\tparamPacker.writeNil();\n\t\t\treturn;\n\t\t} else {\n\t\t\tField[] fields = paramT.getClass().getFields();\n\t\t\tparamPacker.writeMapBegin(fields.length);\n\t\t\tfor(Field field:fields) {\n\t\t\t\tint mod = field.getModifiers();\n\t\t\t\tif(Modifier.isPublic(mod) && !Modifier.isStatic(mod) && !Modifier.isTransient(mod)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tCompressField cfield;\n\t\t\t\t\t\tif (isCompress && (cfield = field.getAnnotation(CompressField.class)) != null) {\n\t\t\t\t\t\t\t// \u5727\u7e2e\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308b\u5834\u5408\u3001\u6570\u5024\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u8868\u73fe\u3059\u308b\n\t\t\t\t\t\t\tparamPacker.write(cfield.value());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparamPacker.write(field.getName());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tparamPacker.write(field.get(paramT));\n\t\t\t\t\t} catch (IllegalArgumentException | IllegalAccessException e) {\n\t\t\t\t\t\tthrow new MessageTypeException(\"Illegal Exception\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tparamPacker.writeMapEnd(paramBoolean);\n\t\t}\n\t}\n\n\t@SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n\t@Override\n\tpublic T read(Unpacker paramUnpacker, T paramT,\n\t\t\tboolean paramBoolean) throws IOException {\n\t\tT obj = null;\n\n\t\ttry {\n\t\t\tobj = clazz.newInstance();\n\t\t\tint size = paramUnpacker.readMapBegin();\n\t\t\tfor(int i=0;i<size;i++) {\n\t\t\t\ttry {\n\t\t\t\t\tField field;\n\t\t\t\t\tif (isCompress && paramUnpacker.getNextType()==ValueType.INTEGER) {\n\t\t\t\t\t\tfield = compressIndex.get(paramUnpacker.readInt());\n\t\t\t\t\t\tif (field == null) {\n\t\t\t\t\t\t\t// skip value (\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408)\n\t\t\t\t\t\t\tparamUnpacker.skip();\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfield = clazz.getField(paramUnpacker.readString());\n\t\t\t\t\t}\n\n\t\t\t\t\tObject val = null;\n\n\t\t\t\t\tif (paramUnpacker.getNextType() == ValueType.NIL) {\n\t\t\t\t\t\tparamUnpacker.readNil();\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tType type = field.getGenericType();\n\n\t\t\t\t\tif(type instanceof Class) {\n\t\t\t\t\t\tval = paramUnpacker.read(field.getType());\n\t\t\t\t\t} else if(type instanceof ParameterizedType) {\n\t\t\t\t\t\t// List\u3084Map\u306e\u5834\u5408\n\t\t\t\t\t\tParameterizedType pt = (ParameterizedType) type;\n\t\t\t\t\t\tType[] types = pt.getActualTypeArguments();\n\t\t\t\t\t\tif(paramUnpacker.getNextType()==ValueType.MAP) {\n\t\t\t\t\t\t\tint len = paramUnpacker.readMapBegin();\n\t\t\t\t\t\t\tMap map = new LinkedHashMap();\n\t\t\t\t\t\t\tfor(int j=0;j<len;j++) {\n\t\t\t\t\t\t\t\tObject key = paramUnpacker.read((Class)types[0]);\n\t\t\t\t\t\t\t\tObject value = paramUnpacker.read((Class)types[1]);\n\t\t\t\t\t\t\t\tmap.put(key, value);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparamUnpacker.readMapEnd();\n\t\t\t\t\t\t\tval = map;\n\t\t\t\t\t\t} else if(paramUnpacker.getNextType()==ValueType.ARRAY){\n\t\t\t\t\t\t\tint len = paramUnpacker.readArrayBegin();\n\t\t\t\t\t\t\tList list = new ArrayList<>(len);\n\t\t\t\t\t\t\tfor(int j=0;j<len;j++) {\n\t\t\t\t\t\t\t\tlist.add(paramUnpacker.read((Class)types[0]));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tparamUnpacker.readArrayEnd();\n\t\t\t\t\t\t\tval = list;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfield.set(obj, val);\n\t\t\t\t} catch (NoSuchFieldException | SecurityException e) {\n\t\t\t\t\t// skip value (\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408)\n\t\t\t\t\tparamUnpacker.skip();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (InstantiationException | IllegalAccessException e) {\n\t\t\tthrow new MessageTypeException(\"Instantiation, Illegal Exception\");\n\t\t}\n\n\t\treturn obj;\n\t}\n\n}\n```\n\n```java:CompressField.java\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n/**\n * \u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6570\u5024\u3067\u5727\u7e2e\u3059\u308b\n * \u756a\u53f7\u306f\u305d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u4e00\u610f\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\n *\n */\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface CompressField {\n\tint value();\n}\n```\n\n# \u30b3\u30fc\u30c9\u516c\u958b\n\nApache License 2.0\u3067github\u306b\u30b3\u30fc\u30c9\u3092\u3042\u3052\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/ksgwr/MessagePackTemplate\n\n# \u7de8\u96c6\u5c65\u6b74\n\n* 2015/08/15 \u521d\u7a3f\n* 2015/08/23 \u6587\u7ae0\u6821\u6b63\u3001\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306e\u8ffd\u52a0\n* 2015/08/30 \u30e6\u30fc\u30b9\u30b1\u30fc\u30b93\u306e\u5b9f\u88c5\u3092\u8ffd\u52a0\n* 2015/09/21 \u30e9\u30a4\u30bb\u30f3\u30b9\u3092\u4ed8\u3051\u3066\u30b3\u30fc\u30c9\u516c\u958b\n", "tags": ["Java", "MessagePack", "JSON"]}