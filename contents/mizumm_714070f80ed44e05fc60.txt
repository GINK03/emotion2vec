{"tags": ["Linux", "debug"], "context": "\u3053\u306e\u8a18\u4e8b\u306f Fujitsu extended Advent Calendar 2016 \u306e 25 \u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u8a18\u4e8b\u306f\u5168\u3066\u500b\u4eba\u306e\u898b\u89e3\u3067\u3059\u3002\u4f1a\u793e\u30fb\u7d44\u7e54\u3092\u4ee3\u8868\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f Linux \u30ab\u30fc\u30cd\u30eb\u306e\u6a5f\u80fd\u306e\u4e00\u3064\u3067\u3042\u308b\u3001KernelAddressSanitizer (KASan) \u306e\u7d39\u4ecb\u3001\u304a\u3088\u3073\u3001\u6a5f\u80fd\u3092\u5b9f\u969b\u306b\u4f7f\u3063\u305f\u7d50\u679c\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \n\n\u306f\u3058\u3081\u306b\n\u30ab\u30fc\u30cd\u30eb\u3084\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u304a\u3044\u3066\u3001\u5384\u4ecb\u306a\u30d0\u30b0\u306e\u4e00\u3064\u306b\u30e1\u30e2\u30ea\u7834\u58ca\u304c\u3042\u308a\u307e\u3059\u3002\u30e1\u30e2\u30ea\u7834\u58ca\u304c\u5384\u4ecb\u306a\u306e\u306f\u3001\u7834\u58ca\u3055\u308c\u305f\u3053\u3068\u306f\u30ed\u30b0\u3084\u30e1\u30e2\u30ea\u30c0\u30f3\u30d7\u7b49\u304b\u3089\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u7834\u58ca\u3057\u305f\u3053\u3068\u306e\u8a3c\u62e0\u304c\u6b8b\u3089\u306a\u3044\u30b1\u30fc\u30b9\u304c\u6b86\u3069\u306a\u3053\u3068\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u3072\u305f\u3059\u3089\u30bd\u30fc\u30b9\u89e3\u6790\u3084\u3001printk\u3084\u30c8\u30ec\u30fc\u30b9\u3092\u4ed5\u8fbc\u3093\u3067\u30d0\u30b0\u3092\u63a2\u3059\u30fb\u30fb\u30fb\u3068\u3044\u3046\u82e6\u884c\u3092\u7e70\u308a\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nKASan \u306f Linux 4.0 \u304b\u3089\u5c0e\u5165\u3055\u308c\u3066\u304a\u308a\u3001\u5384\u4ecb\u306a\u30e1\u30e2\u30ea\u7834\u58ca\u306b\u3064\u306a\u304c\u308b\u4ee5\u4e0b\u306e\u30d0\u30b0\u3092\u691c\u51fa\u3059\u308b\u624b\u52a9\u3051\u3092\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\nfree \u5f8c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u66f8\u304d\u8fbc\u307f\u30fb\u8aad\u307f\u8fbc\u307f (use after free)\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u9818\u57df\u5916\u3078\u306e\u66f8\u304d\u8fbc\u307f\u30fb\u8aad\u307f\u8fbc\u307f\n\n\u30d0\u30b0\u306e\u691c\u51fa\u3092\u624b\u52a9\u3051\u3057\u3066\u304f\u308c\u308b\u53cd\u9762\u3001KASan \u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ea\u30b9\u30af\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u306e\u6027\u80fd\u52a3\u5316\n\u4f7f\u7528\u3067\u304d\u308b\u30e1\u30e2\u30ea\u91cf\u306e\u6e1b\u5c11\n\n\u672c\u8a18\u4e8b\u3067\u306f use after free \u306b\u3064\u3044\u3066 KASan \u3092\u4f7f\u3063\u3066\u5b9f\u969b\u306b\u691c\u51fa\u3059\u308b\u5b9f\u9a13\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\nKASan \u306b\u3088\u308b use after free \u306e\u691c\u51fa\u5b9f\u9a13\n\n\u74b0\u5883\n\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u5b9f\u9a13\u3057\u3066\u3044\u307e\u3059\u3002\n\nfedora25 (for x86_64)\nkernel-4.9.0\n\n\n\u6e96\u5099\n\ngcc \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u78ba\u8a8d\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u306a\u3093\u3067\u3082\u3044\u3044\u306e\u3067\u3001gcc \u3067 -fsanitize=address \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4f7f\u3048\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n$ cat print.c\nint main()\n{\n    return 0;\n} \n$ gcc -fsanitize=address print.c \n$ \n\n\u81ea\u5206\u306e\u74b0\u5883\u3060\u3068\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u304c\u3067\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n$ gcc  -fsanitize=address  print.c \n/usr/bin/ld: cannot find /usr/lib64/libasan.so.3.0.0\ncollect2: error: ld returned 1 exit status\n$ \n\nlibasan \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u3002\n# dnf install libasan\n\n\n\u30ab\u30fc\u30cd\u30eb\u30b3\u30f3\u30d1\u30a4\u30eb\nfedora25 \u306e\u30ab\u30fc\u30cd\u30eb\u3067\u306f KASan \u306f\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u9069\u5f53\u306b\u30ab\u30fc\u30cd\u30eb\u3092\u62fe\u3063\u3066\u304d\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066 KASan \u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\nKASan \u3092\u30d3\u30eb\u30c9\u3059\u308b\u305f\u3081\u3001\u30ab\u30fc\u30cd\u30eb\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u3068\u304d\u306e make menuconfig \u7b49\u3067\u4ee5\u4e0b\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nCONFIG_KASAN=y\n\nmenuconfig \u3060\u3068\u3001\u4ee5\u4e0b\u306e\u9805\u76ee\u3002\n\nKernel hacking\n\n\nmemory debugging\n\n\nKAsan: runtime memory debugger\n\n\n\n\n\n\u30ec\u30c3\u30c4\u30b3\u30f3\u30d1\u30a4\u30eb\uff06\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3001\u518d\u8d77\u52d5\u5f8c\u3001\u4ee5\u4e0b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u78ba\u8a8d\u3067\u304d\u308c\u3070OK.\n$ dmesg | grep kasan:\n[    0.000000] kasan: KernelAddressSanitizer initialized\n$ \n\n\n\u5b9f\u9a131. free \u5f8c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u66f8\u304d\u8fbc\u307f\nkmalloc() \u3067 128 byte \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7372\u5f97\u3057\u3066\u3001kfree() \u5f8c\u3001memset() \u3067\u66f8\u304d\u8fbc\u307f\u3092\u3059\u308b\u30ab\u30fc\u30cd\u30eb\u30e2\u30b8\u30e5\u30fc\u30eb(uaf_slab.c)\u3092\u4f5c\u6210\u3057\u3001\u5b9f\u65bd\u3057\u3066\u307f\u307e\u3059(uaf_slab.c \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u672c\u8a18\u4e8b\u306e[\u5404\u5b9f\u9a13\u3067\u4f7f\u7528\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9]\u306b\u3042\u308a\u307e\u3059)\u3002\nuaf_slab.c \u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3001insmod \u3057\u307e\u3059\u3002\n$ insmod uaf_slab.ko\n\n\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u3068\u30b7\u30b9\u30ed\u30b0\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nuaf_slab: object addr: ffff880035f4e780\n==================================================================\n\u2460BUG: KASAN: use-after-free in uaf_slab_init+0x71/0x1000 [uaf_slab] at addr ffff880035f4e780\n\u2460Write of size 128 by task insmod/4441\n(\u7701\u7565)\n\u2460Call Trace:\n [<ffffffffb560fb6c>] dump_stack+0x86/0xca\n [<ffffffffb534a451>] kasan_object_err+0x21/0x70\n [<ffffffffb534a6dd>] kasan_report_error+0x1ed/0x500\n [<ffffffffb5174ece>] ? vprintk_default+0x3e/0x60\n [<ffffffffb534b008>] kasan_report+0x58/0x60\n [<ffffffffc06f0071>] ? uaf_slab_init+0x71/0x1000 [uaf_slab]\n [<ffffffffb534969c>] check_memory_region+0x13c/0x1a0\n [<ffffffffb5349b13>] memset+0x23/0x40\n [<ffffffffc06f0000>] ? 0xffffffffc06f0000\n [<ffffffffc06f0071>] uaf_slab_init+0x71/0x1000 [uaf_slab]\n(\u7701\u7565)\n [<ffffffffb51c219e>] SyS_finit_module+0xe/0x10\n [<ffffffffb5cb1fc1>] entry_SYSCALL_64_fastpath+0x1f/0xbd\n\u2461Object at ffff880035f4e780, in cache kmalloc-128 size: 128\n\u2462Allocated:\n\u2462PID = 4441\n\u2462[<ffffffffb5054a0b>] save_stack_trace+0x1b/0x20\n[<ffffffffb53497c6>] save_stack+0x46/0xd0\n[<ffffffffb5349a4d>] kasan_kmalloc+0xad/0xe0\n[<ffffffffb5345642>] kmem_cache_alloc_trace+0xf2/0x1e0\n[<ffffffffc06f0033>] uaf_slab_init+0x33/0x1000 [uaf_slab]\n(\u7701\u7565)\n[<ffffffffb51c219e>] SyS_finit_module+0xe/0x10\n[<ffffffffb5cb1fc1>] entry_SYSCALL_64_fastpath+0x1f/0xbd\n\u2463Freed:\n\u2463PID = 4441\n\u2463[<ffffffffb5054a0b>] save_stack_trace+0x1b/0x20\n[<ffffffffb53497c6>] save_stack+0x46/0xd0\n[<ffffffffb534a013>] kasan_slab_free+0x73/0xc0\n[<ffffffffb5346653>] kfree+0x93/0x1a0\n[<ffffffffc06f005f>] uaf_slab_init+0x5f/0x1000 [uaf_slab]\n(\u7701\u7565)\n[<ffffffffb51c219e>] SyS_finit_module+0xe/0x10\n[<ffffffffb5cb1fc1>] entry_SYSCALL_64_fastpath+0x1f/0xbd\n\u2464Memory state around the buggy address:\n ffff880035f4e680: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb\n ffff880035f4e700: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc\n>ffff880035f4e780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n                   ^\n ffff880035f4e800: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb\n ffff880035f4e880: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc\n==================================================================\n\n\u30ed\u30b0\u306e\u4e2d\u306b\u8a18\u8f09\u3057\u3066\u3044\u308b\u2460\u301c\u2464\u306e\u610f\u5473\u306f\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\u2460 \n\nuaf_slab \u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e uaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x71 \u3067\u3001use after free \u3068\u306a\u308b\u51e6\u7406\u304c\u884c\u308f\u308c\u305f\nuse after free \u3068\u306a\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u306f ffff880035f4e780 \nuse after free \u3092\u884c\u3063\u305f\u306e\u306f\u3001PID: 4441 insmod \u30b3\u30de\u30f3\u30c9\n128 byte \u306e write \u304c use after free \u3068\u306a\u3063\u305f\n128 byte \u306e write \u304c\u884c\u308f\u308c\u308b\u307e\u3067\u306e\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3002\u3053\u306e\u30ed\u30b0\u304b\u3089\u306f\u3001uaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x71 \u3067\u3000call \u3055\u308c\u3066\u3044\u308b memset() \u3067 write \u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3002\n\n\u2461\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(ffff880035f4e780) \u306f kmalloc-128 \u3068\u3057\u3066\u7ba1\u7406\u3055\u308c\u3066\u304a\u308a\u3001\u30b5\u30a4\u30ba\u306f 128 byte\n\n\u2462 \n\n\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001PID: 4441 \u306e\u30bf\u30b9\u30af\u306b\u3088\u3063\u3066\u7372\u5f97\u3055\u308c\u3066\u3044\u305f\n\u7372\u5f97\u3057\u305f\u51e6\u7406\u306f\u3001uaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x33 \u3067 call \u3057\u3066\u3044\u308b kmem_cache_alloc() (kmalloc() \u306e\u4e2d\u8eab\u306e\u95a2\u6570)\n\n\u2463\n\n\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001PID: 4441 \u306e\u30bf\u30b9\u30af\u306b\u3088\u3063\u3066 free \u3055\u308c\u3066\u3044\u305f\nfree \u3057\u305f\u51e6\u7406\u306f\u3001uaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x5f \u3067 call \u3057\u3066\u3044\u308b kfree()\n\n\u2464\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(ffff880035f4e780)\u4ed8\u8fd1\u306e\u30e1\u30e2\u30ea\u306e\u72b6\u614b\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4ed8\u8fd1\u3067\u306f\u30010xfb, 0xfc \u3067\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u308b\u9818\u57df\u3002\n\n\n0xfb: free \u3055\u308c\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u9818\u57df\n0xfc: redzone (KASan \u3067\u30e1\u30e2\u30ea\u7834\u58ca\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\u30de\u30fc\u30ab\u30fc)\u306e\u9818\u57df\n\n\n\n\u306a\u306e\u3067\u3001\u3053\u306e\u30ed\u30b0\u304b\u3089\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u70b9\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nuaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x71 \u3067 memset() \u3092\u5b9f\u65bd\u3059\u308b\u3053\u3068\u304c\u6b63\u3057\u3044\u304b\u3002\nuaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x5f \u3067 kfree() \u3092\u5b9f\u65bd\u3059\u308b\u3053\u3068\u304c\u6b63\u3057\u3044\u304b\u3002\n\n\u306a\u304a\u3001\u8aad\u307f\u8fbc\u307f\u306e use after free \u3067\u3082\u540c\u69d8\u306b\u691c\u51fa\u3067\u304d\u307e\u3059\u3002\u30e2\u30b8\u30e5\u30fc\u30eb\u306e memset() \u3092\u3001 printk() \u7b49\u306e\u5024\u3092\u53c2\u7167\u3059\u308b\u30b3\u30fc\u30c9\u306b\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u3001\u8aad\u307f\u8fbc\u307f\u306e use after free \u306e\u5b9f\u9a13\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u5b9f\u9a132. free \u5f8c\u306e\u30da\u30fc\u30b8\u306b\u66f8\u304d\u8fbc\u307f\n\u5b9f\u9a131. \u3068\u4f3c\u3066\u307e\u3059\u304c\u3001\u4eca\u5ea6\u306f\u3000kmalloc() \u3067\u306f\u306a\u304f\u3001allc_page() \u3067\u7372\u5f97\u3057\u305f\u30da\u30fc\u30b8\u3092\u3001free \u3057\u305f\u5f8c\u306b memset() \u3067\u66f8\u304d\u8fbc\u3080\u30e2\u30b8\u30e5\u30fc\u30eb(uaf_page.c)\u3092\u5b9f\u65bd\u3057\u3066\u307f\u307e\u3059 (uaf_page.c \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u672c\u8a18\u4e8b\u306e[\u5404\u5b9f\u9a13\u3067\u4f7f\u7528\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9]\u306b\u3042\u308a\u307e\u3059)\u3002\nuaf_page.c \u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3001insmod \u3057\u307e\u3059\u3002\n$ insmod uaf_page.ko\n\n\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u3068\u30b7\u30b9\u30ed\u30b0\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nuaf_page: page: ffffea0001929640 addr: ffff880064a59000\n==================================================================\n\u2460BUG: KASAN: use-after-free in uaf_page_init+0x93/0x1000 [uaf_page] at addr ffff880064a59000\n\u2460Write of size 128 by task insmod/4878\n\u2460page:ffffea0001929640 count:0 mapcount:0 mapping:          (null) index:0x0\n\u2460flags: 0x3fff8000000000()\n\u2460page dumped because: kasan: bad access detected\n(\u7701\u7565)\n\u2460Call Trace:\n [<ffffffffb560fb6c>] dump_stack+0x86/0xca\n [<ffffffffb534a9b8>] kasan_report_error+0x4c8/0x500\n [<ffffffffb5174ece>] ? vprintk_default+0x3e/0x60\n [<ffffffffb534b008>] kasan_report+0x58/0x60\n [<ffffffffc06f0093>] ? uaf_page_init+0x93/0x1000 [uaf_page]\n [<ffffffffb534969c>] check_memory_region+0x13c/0x1a0\n [<ffffffffb5349b13>] memset+0x23/0x40\n [<ffffffffc06f0000>] ? 0xffffffffc06f0000\n [<ffffffffc06f0093>] uaf_page_init+0x93/0x1000 [uaf_page]\n(\u7701\u7565)\n [<ffffffffb51c219e>] SyS_finit_module+0xe/0x10\n [<ffffffffb5cb1fc1>] entry_SYSCALL_64_fastpath+0x1f/0xbd\n\u2461Memory state around the buggy address:\n ffff880064a58f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n ffff880064a58f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n>ffff880064a59000: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n                   ^\n ffff880064a59080: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n ffff880064a59100: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n==================================================================\n\n\u5b9f\u9a131. \u3068\u5927\u4f53\u540c\u3058\u3067\u3059\u3002\u30da\u30fc\u30b8\u306b\u95a2\u3059\u308b\u60c5\u5831\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3068\u3001\u7372\u5f97\u3001free \u3057\u305f\u51e6\u7406\u306e\u60c5\u5831\u306f\u51fa\u529b\u3055\u308c\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\u2460\n\nuaf_page \u30e2\u30b8\u30e5\u30fc\u30eb\u306e uaf_page_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x93 \u3067 call \u3057\u3066\u3044\u308b memset() \u3067 use after free \u3068\u306a\u3063\u3066\u3044\u308b\nuse after free \u3068\u306a\u3063\u305f\u30a2\u30c9\u30ec\u30b9\u306f ffff880064a59000 \u3067\u3042\u308b\u3002\nffff880064a59000 \u306b\u5bfe\u5fdc\u3059\u308b\u30da\u30fc\u30b8\u69cb\u9020\u4f53\u306e\u30a2\u30c9\u30ec\u30b9\u306f ffffea0001929640 \u3067\u3042\u308b\u3002\n\n\u2461\n\n\u30a2\u30c9\u30ec\u30b9 ffff880064a59000 \u4ed8\u8fd1\u306e\u30e1\u30e2\u30ea\u306e\u72b6\u614b\u30020xff, 0xfc \u3067\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u308b\u9818\u57df\u3002\n\n\n0xff: free \u3055\u308c\u3066\u3044\u308b\u30da\u30fc\u30b8\u306e\u9818\u57df\n0xfc: redzone (KASan \u3067\u30e1\u30e2\u30ea\u7834\u58ca\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\u30de\u30fc\u30ab\u30fc)\u306e\u9818\u57df\n\n\n\n\u306a\u306e\u3067\u3001\u3053\u306e\u30ed\u30b0\u304b\u3089\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u70b9\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nuaf_page_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x93 \u3067 memset() \u3059\u308b\u3053\u3068\u306f\u6b63\u3057\u3044\u304b\u3002\nuaf_page_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x93 \u3067 memset() \u3059\u308b\u524d\u307e\u3067\u306b\u610f\u56f3\u305b\u305a\u30da\u30fc\u30b8\u3092 free \u3057\u3066\u3044\u306a\u3044\u304b\u3002\n\n\u306a\u304a\u3001\u5b9f\u9a131. \u3068\u540c\u3058\u304f\u3001\u8aad\u307f\u8fbc\u307f\u306e use after free \u3067\u3082\u540c\u69d8\u306b\u691c\u51fa\u3067\u304d\u307e\u3059\u3002\n\n\u5b9f\u9a133. free \u5f8c\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u518d\u5229\u7528\u3055\u308c\u305f\u3042\u3068\u306b\u66f8\u304d\u8fbc\u307f\nuse after free \u306e\u4e2d\u3067\u3082\u304b\u306a\u308a\u5384\u4ecb\u306a\u30b1\u30fc\u30b9\u3067\u3059\u3002\n\n\u30bf\u30b9\u30af\u304c\uff12\u3064\u5b58\u5728\u3059\u308b\u72b6\u6cc1 (TASK A, TASK B)\nTASK A \u304c use after free \u306e\u554f\u984c\u3092\u6301\u3063\u3066\u3044\u308b\n\n\u3053\u306e\u6761\u4ef6\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6642\u7cfb\u5217\u3067\u306e\u7372\u5f97\u3001free\u3001\u66f8\u304d\u8fbc\u307f\u304c\u767a\u751f\u3059\u308b\u3068\u3057\u307e\u3059\u3002\n\u4f55\u3082\u60aa\u304f\u306a\u3044 TASK B \u304c\u3001\u4f55\u6545\u304b\u5909\u306a\u5024\u3092\u53c2\u7167\u3057\u3066\u3057\u307e\u3044\u3001\u5927\u5909\u306a\u3053\u3068\u306b\u3002\u3002\u3002TASK B \u306b\u30c7\u30d0\u30c3\u30b0\u3092\u4ed5\u8fbc\u3093\u3067\u3082\u624b\u304c\u304b\u308a\u304c\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\n\nTASK A \u304c pa = kmalloc()\nTASK A \u304c kfree(pa)\nTASK B \u304c pb = kmalloc()\u3002\u3053\u306e\u3068\u304d\u3001pb \u306b\u306f pa \u3068\u540c\u3058\u30a2\u30c9\u30ec\u30b9\u304c\u5165\u308b\u3002(pa \u306e\u9818\u57df\u306e\u518d\u5229\u7528)\nTASK B \u304c pb \u306e\u9818\u57df\u3092\u4f7f\u7528\u3002\nTASK A \u304c pa (== pb)\u306b\u5bfe\u3057\u3066\u66f8\u304d\u8fbc\u307f (use after free)\nTASK B \u304c pb \u3092\u53c2\u7167\u3002TASK A \u306b\u66f8\u304d\u63db\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u610f\u56f3\u3057\u3066\u3044\u306a\u3044\u5024\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3001\u3042\u308f\u308f\u308f\u308f\n\n\u3053\u306e\u72b6\u6cc1\u3092\u518d\u73fe\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u52d5\u4f5c\u3092\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb(uaf_slab2.c)\u3067\u5b9f\u9a13\u3057\u307e\u3057\u305f (uaf_slab2.c \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u672c\u8a18\u4e8b\u306e[\u5404\u5b9f\u9a13\u3067\u4f7f\u7528\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9]\u306b\u3042\u308a\u307e\u3059)\u3002\n\n\u51e6\u7406A\n\n\n128 byte \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 kmalloc() \u3057\u3066\u3001kfree() \u3092\u3059\u308b\nkfree() \u5f8c\u3001\u51e6\u7406 B \u306b\u518d\u5229\u7528\u3055\u308c\u308b\u307e\u3067\u5f85\u3061\u5408\u308f\u305b\u3057\u3066\u3001\u518d\u5229\u7528\u3055\u308c\u305f\u3042\u3068\u306b\u66f8\u304d\u8fbc\u307f\n\n\n\u51e6\u7406B\n\n\n\u51e6\u7406 A \u3067 kfree() \u3092\u3055\u308c\u308b\u3053\u3068\u3092\u5f85\u3061\u5408\u308f\u305b\u3057\u3066\u3001kfree() \u3055\u308c\u305f\u3042\u3068\u306b kmalloc() \u3067\u518d\u5229\u7528\n\n\n\n\u307e\u305f\u3001KASan \u306b\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u518d\u5229\u7528\u3092\u306a\u308b\u3079\u304f\u907f\u3051\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u6a5f\u69cb(Quarantine)\u3082\u3042\u308a\u307e\u3059\u3002Quarantine \u3067\u306f\u3001kfree() \u3055\u308c\u305f\u9818\u57df\u3092\u3059\u3050\u306b\u518d\u5229\u7528\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30e1\u30e2\u30ea\u67af\u6e07\u7b49\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u56de\u53ce\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u307e\u3067\u518d\u5229\u7528\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u3053\u306e\u5b9f\u9a13\u3067\u306f\u518d\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067\u3001KASan \u306e Quarantine\u3000\u304c\u90aa\u9b54\u3067\u3059\uff08\u7b11\uff09\u3002\u306a\u306e\u3067\u3001\u4e0a\u8a18\u306b\u52a0\u3048\u3066\u3000128 byte \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u56de\u53ce\u51e6\u7406\u3092\u52d5\u4f5c\u3055\u305b\u308b\u30b9\u30af\u30ea\u30d7\u30c8(shrink.sh)\u3092\u5e73\u884c\u306b\u6d41\u3057\u307e\u3059\u3002\n\u7d50\u679c\u3001\u6b8b\u5ff5\u306a\u304c\u3089 KASan \u3067\u3053\u306e\u554f\u984c\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002free \u72b6\u614b\u3067\u66f8\u304d\u8fbc\u307f\u304c\u884c\u308f\u308c\u308b\u5834\u5408\u306f\u691c\u77e5\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u7372\u5f97\u3055\u308c\u305f\u5f8c\u306e\u66f8\u304d\u8fbc\u307f\u306f\u691c\u77e5\u306f\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u306d\u3002\n\n\u5b9f\u9a13\u307e\u3068\u3081\nKASan \u306e use after free \u3092\u691c\u77e5\u3059\u308b\u4ed5\u7d44\u307f\u3067\u306f\u30fb\u30fb\u30fb\n\n\u7372\u5f97\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u307e\u305f\u306f\u3001\u30da\u30fc\u30b8\u306e\u9818\u57df\u306b\u3064\u3044\u3066\u3001free \u5f8c\u3067\u306e\u66f8\u304d\u8fbc\u307f\u30fb\u8aad\u307f\u8fbc\u307f\u3092\u691c\u77e5\u3067\u304d\u308b\nuse after free \u3092\u884c\u3063\u305f\u30bf\u30b9\u30af\u306e PID\u3001\u30bf\u30b9\u30af\u540d\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8/\u30da\u30fc\u30b8\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u30ed\u30b0\u306b\u51fa\u529b\u3055\u308c\u308b\u3002\nfree \u5f8c\u3001\u518d\u5229\u7528\u3055\u308c\u308b\u3068\u691c\u77e5\u3067\u304d\u306a\u3044\n\n\n\u304a\u308f\u308a\u306b\nKASan \u306e\u7d39\u4ecb\u3068\u3001use after free \u3092 KASan \u3092\u4f7f\u3063\u3066\u5b9f\u969b\u306b\u691c\u51fa\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30e1\u30e2\u30ea\u7834\u58ca\u554f\u984c\u306f\u691c\u51fa\u304c\u5384\u4ecb\u3067\u3001\u304b\u3064\u3001\u5f71\u97ff\u304c\u751a\u5927(\u30b7\u30b9\u30c6\u30e0\u30c0\u30a6\u30f3\u3001\u30c7\u30fc\u30bf\u7834\u58ca\u7b49)\u306b\u306a\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u306a\u308b\u3079\u304f\u958b\u767a\u6bb5\u968e\u3067\u691c\u51fa\u3092\u3059\u308b\u3079\u304d\u30d0\u30b0\u3067\u3059\u3002\u30ab\u30fc\u30cd\u30eb\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u88fd\u54c1\u306b\u304a\u3044\u3066\u3001KASan \u3092\u6709\u52b9\u306b\u3057\u305f\u30ab\u30fc\u30cd\u30eb\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u306f\u826f\u3044\u304b\u3082\u3057\u308c\u305b\u3093\u3002\u6f5c\u5728\u7684\u306a\u30e1\u30e2\u30ea\u7834\u58ca\u306e\u30d0\u30b0\u304c\u898b\u3064\u304b\u308b\u304b\u3082\u3002\u3002\u3002\n\n\u5404\u5b9f\u9a13\u3067\u4f7f\u7528\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\u610f\u56f3\u7684\u306b\u30e1\u30e2\u30ea\u7834\u58ca\u3092\u8d77\u3053\u3059\u30e2\u30b8\u30e5\u30fc\u30eb\u306a\u306e\u3067\u3001\u30b7\u30b9\u30c6\u30e0\u30c0\u30a6\u30f3\u3084\u30c7\u30fc\u30bf\u7834\u58ca\u7b49\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4f7f\u7528\u306f\u3054\u6ce8\u610f\u3002\n\n\u5b9f\u9a131\n\nuaf_slab.c\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/mm.h>\n#include <linux/slab.h>\n\n#define OBJSIZE 128\n#define WRSIZE OBJSIZE\n\n#define d_info(fmt, ...) \\\n    pr_info(\"uaf_slab: \" fmt,  ## __VA_ARGS__)\n\nstatic int __init uaf_slab_init(void)\n{\n    void *victim;\n\n    d_info(\"uaf_slab is loaded.\\n\");\n\n    victim = kmalloc(OBJSIZE, GFP_KERNEL);\n\n    memset(victim, 0xaa, WRSIZE);\n\n    d_info(\"object addr: %p\\n\", victim);\n\n    kfree(victim);\n\n    /* use after free! */\n    memset(victim, 0xbb, WRSIZE);\n\n    return 0;\n}\n\nstatic void __exit uaf_slab_exit(void)\n{\n    d_info(\"uaf_slab is unloaded.\\n\");\n}\n\nMODULE_LICENSE(\"GPL v2\");\nmodule_init(uaf_slab_init);\nmodule_exit(uaf_slab_exit);\n\n\n\n\u5b9f\u9a132\n\nuaf_page.c\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/mm.h>\n\n#define WRSIZE 128\n\n#define d_info(fmt, ...) \\\n    pr_info(\"uaf_page: \" fmt,  ## __VA_ARGS__)\n\nstatic int __init uaf_page_init(void)\n{\n    struct page *victim;\n    void *victim_addr;\n\n    d_info(\"uaf_page is loaded.\\n\");\n\n    victim = alloc_page(GFP_KERNEL);\n    victim_addr = page_address(victim);\n\n    memset(victim_addr, 0xaa, WRSIZE);\n\n    d_info(\"page: %p addr: %p\\n\", victim, victim_addr);\n\n    __free_page(victim);\n\n    /* use after free! */\n    memset(victim_addr, 0xbb, WRSIZE);\n\n    return 0;\n}\n\nstatic void __exit uaf_page_exit(void)\n{\n    d_info(\"uaf_page is unloaded.\\n\");\n}\n\nMODULE_LICENSE(\"GPL v2\");\nmodule_init(uaf_page_init);\nmodule_exit(uaf_page_exit);\n\n\n\n\u5b9f\u9a133\n\nuaf_slab2.c\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/mm.h>\n#include <linux/slab.h>\n#include <linux/kthread.h>\n\n#define MAXTRY 1024\n#define OBJSIZE 128\n#define WRSIZE OBJSIZE\n\n#define d_info(fmt, ...) \\\n    pr_info(\"uaf_slab: \" fmt,  ## __VA_ARGS__)\n\nstatic void *victim;\nstatic struct task_struct *reuser_tsk;\n\nenum {\n    NOTSTARTED = 0x0,\n    REALLOCED,\n    REUSED,\n};\n\nstatic int status = NOTSTARTED;\n\nDECLARE_COMPLETION(freedone);\nDECLARE_COMPLETION(reusedone);\n\nstatic int reuser(void *data)\n{\n    void **reuse_obj = data;\n    int i;\n\n    wait_for_completion(&freedone);\n\n    for (i = 0; i < MAXTRY; i++) {\n        reuse_obj[i] = kmalloc(OBJSIZE, GFP_KERNEL);\n        if (reuse_obj[i] == victim) {\n            d_info(\"reallocation is success. tried: %d\\n\", i);\n            status = REALLOCED;\n            break;\n        }\n        kfree(reuse_obj[i]);\n    }\n\n    if (status == REALLOCED) {\n        memset(reuse_obj[i], 0xee, WRSIZE);\n        status = REUSED;\n    } else\n        d_info(\"reuse is failed...\\n\");\n\n    complete(&reusedone);\n\n    while (!kthread_should_stop())\n        schedule_timeout_interruptible(HZ);\n\n    return 0;\n}\n\nstatic int __init uaf_slab_init(void)\n{\n    void **reuse_obj;\n\n    d_info(\"uaf_slab is loaded.\\n\");\n\n    victim = kmalloc(OBJSIZE, GFP_KERNEL);\n\n    memset(victim, 0xcc, WRSIZE);\n\n    d_info(\"object addr: %p\\n\", victim);\n\n    /*\n     * create kthread to reallocate and reuse the object.\n     * The kthread should be binded to this cpu because\n     * the freed object is queued in the per cpu region.\n     */\n    reuse_obj = kcalloc(MAXTRY, sizeof(void *), GFP_KERNEL);\n    reuser_tsk = kthread_create(reuser, reuse_obj, \"reuser\");\n    kthread_bind(reuser_tsk, raw_smp_processor_id());\n    wake_up_process(reuser_tsk);\n\n    kfree(victim);\n\n    complete(&freedone);\n\n    /* wait for reuse the object and page by reuser thread. */\n    wait_for_completion(&reusedone);\n\n    if (status == REUSED) {\n        /* use after free! */\n        memset(victim, 0xdd, WRSIZE);\n    }\n\n    kfree(reuse_obj);\n\n    return 0;\n}\n\nstatic void __exit uaf_slab_exit(void)\n{\n    kthread_stop(reuser_tsk);\n    d_info(\"uaf_slab is unloaded.\\n\");\n}\n\nMODULE_LICENSE(\"GPL v2\");\nmodule_init(uaf_slab_init);\nmodule_exit(uaf_slab_exit);\n\n\n\nshrink.sh\n#!/bin/bash\n\nwhile true\ndo\n    echo 1 > /sys/kernel/slab/kmalloc-128/shrink\ndone\n\n\n\n\u53c2\u8003\u8cc7\u6599\nhttps://github.com/google/kasan/wiki\nhttp://events.linuxfoundation.org/sites/events/files/slides/LinuxCon%20North%20America%202015%20KernelAddressSanitizer.pdf\n\u3053\u306e\u8a18\u4e8b\u306f [Fujitsu extended Advent Calendar 2016](http://qiita.com/advent-calendar/2016/fujitsu_ext) \u306e 25 \u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u8a18\u4e8b\u306f\u5168\u3066\u500b\u4eba\u306e\u898b\u89e3\u3067\u3059\u3002\u4f1a\u793e\u30fb\u7d44\u7e54\u3092\u4ee3\u8868\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f Linux \u30ab\u30fc\u30cd\u30eb\u306e\u6a5f\u80fd\u306e\u4e00\u3064\u3067\u3042\u308b\u3001KernelAddressSanitizer (KASan) \u306e\u7d39\u4ecb\u3001\u304a\u3088\u3073\u3001\u6a5f\u80fd\u3092\u5b9f\u969b\u306b\u4f7f\u3063\u305f\u7d50\u679c\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \n\n# \u306f\u3058\u3081\u306b\n\u30ab\u30fc\u30cd\u30eb\u3084\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u304a\u3044\u3066\u3001\u5384\u4ecb\u306a\u30d0\u30b0\u306e\u4e00\u3064\u306b\u30e1\u30e2\u30ea\u7834\u58ca\u304c\u3042\u308a\u307e\u3059\u3002\u30e1\u30e2\u30ea\u7834\u58ca\u304c\u5384\u4ecb\u306a\u306e\u306f\u3001**\u7834\u58ca\u3055\u308c\u305f\u3053\u3068**\u306f\u30ed\u30b0\u3084\u30e1\u30e2\u30ea\u30c0\u30f3\u30d7\u7b49\u304b\u3089\u308f\u304b\u308a\u307e\u3059\u304c\u3001**\u7834\u58ca\u3057\u305f\u3053\u3068**\u306e\u8a3c\u62e0\u304c\u6b8b\u3089\u306a\u3044\u30b1\u30fc\u30b9\u304c\u6b86\u3069\u306a\u3053\u3068\u3067\u3059\u3002\u306a\u306e\u3067\u3001\u3072\u305f\u3059\u3089\u30bd\u30fc\u30b9\u89e3\u6790\u3084\u3001printk\u3084\u30c8\u30ec\u30fc\u30b9\u3092\u4ed5\u8fbc\u3093\u3067\u30d0\u30b0\u3092\u63a2\u3059\u30fb\u30fb\u30fb\u3068\u3044\u3046\u82e6\u884c\u3092\u7e70\u308a\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nKASan \u306f Linux 4.0 \u304b\u3089\u5c0e\u5165\u3055\u308c\u3066\u304a\u308a\u3001\u5384\u4ecb\u306a\u30e1\u30e2\u30ea\u7834\u58ca\u306b\u3064\u306a\u304c\u308b\u4ee5\u4e0b\u306e\u30d0\u30b0\u3092\u691c\u51fa\u3059\u308b\u624b\u52a9\u3051\u3092\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n- free \u5f8c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u66f8\u304d\u8fbc\u307f\u30fb\u8aad\u307f\u8fbc\u307f (use after free)\n- \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u9818\u57df\u5916\u3078\u306e\u66f8\u304d\u8fbc\u307f\u30fb\u8aad\u307f\u8fbc\u307f\n\n\u30d0\u30b0\u306e\u691c\u51fa\u3092\u624b\u52a9\u3051\u3057\u3066\u304f\u308c\u308b\u53cd\u9762\u3001KASan \u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ea\u30b9\u30af\u304c\u3042\u308a\u307e\u3059\u3002\n\n- \u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u306e\u6027\u80fd\u52a3\u5316\n- \u4f7f\u7528\u3067\u304d\u308b\u30e1\u30e2\u30ea\u91cf\u306e\u6e1b\u5c11\n \n\u672c\u8a18\u4e8b\u3067\u306f use after free \u306b\u3064\u3044\u3066 KASan \u3092\u4f7f\u3063\u3066\u5b9f\u969b\u306b\u691c\u51fa\u3059\u308b\u5b9f\u9a13\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n# KASan \u306b\u3088\u308b use after free \u306e\u691c\u51fa\u5b9f\u9a13\n## \u74b0\u5883\n\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u5b9f\u9a13\u3057\u3066\u3044\u307e\u3059\u3002\n\n- fedora25 (for x86_64)\n- kernel-4.9.0\n\n## \u6e96\u5099\n### gcc \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u78ba\u8a8d\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u306a\u3093\u3067\u3082\u3044\u3044\u306e\u3067\u3001gcc \u3067 -fsanitize=address \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4f7f\u3048\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n``` \n$ cat print.c\nint main()\n{\n\treturn 0;\n} \n$ gcc -fsanitize=address print.c \n$ \n```\n\n\u81ea\u5206\u306e\u74b0\u5883\u3060\u3068\u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u304c\u3067\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n``` \n$ gcc  -fsanitize=address  print.c \n/usr/bin/ld: cannot find /usr/lib64/libasan.so.3.0.0\ncollect2: error: ld returned 1 exit status\n$ \n```\n\nlibasan \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u3002\n\n```\n# dnf install libasan\n```\n\n### \u30ab\u30fc\u30cd\u30eb\u30b3\u30f3\u30d1\u30a4\u30eb\nfedora25 \u306e\u30ab\u30fc\u30cd\u30eb\u3067\u306f KASan \u306f\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u9069\u5f53\u306b\u30ab\u30fc\u30cd\u30eb\u3092\u62fe\u3063\u3066\u304d\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066 KASan \u3092\u6709\u52b9\u306b\u3057\u307e\u3059\u3002\nKASan \u3092\u30d3\u30eb\u30c9\u3059\u308b\u305f\u3081\u3001\u30ab\u30fc\u30cd\u30eb\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u3068\u304d\u306e make menuconfig \u7b49\u3067\u4ee5\u4e0b\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```\nCONFIG_KASAN=y\n```\n\nmenuconfig \u3060\u3068\u3001\u4ee5\u4e0b\u306e\u9805\u76ee\u3002\n\n- Kernel hacking\n    - memory debugging\n        - KAsan: runtime memory debugger\n\n\u30ec\u30c3\u30c4\u30b3\u30f3\u30d1\u30a4\u30eb\uff06\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3001\u518d\u8d77\u52d5\u5f8c\u3001\u4ee5\u4e0b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u78ba\u8a8d\u3067\u304d\u308c\u3070OK.\n\n``` \n$ dmesg | grep kasan:\n[    0.000000] kasan: KernelAddressSanitizer initialized\n$ \n```\n\n## \u5b9f\u9a131. free \u5f8c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u66f8\u304d\u8fbc\u307f\nkmalloc() \u3067 128 byte \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7372\u5f97\u3057\u3066\u3001kfree() \u5f8c\u3001memset() \u3067\u66f8\u304d\u8fbc\u307f\u3092\u3059\u308b\u30ab\u30fc\u30cd\u30eb\u30e2\u30b8\u30e5\u30fc\u30eb(uaf_slab.c)\u3092\u4f5c\u6210\u3057\u3001\u5b9f\u65bd\u3057\u3066\u307f\u307e\u3059(uaf_slab.c \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u672c\u8a18\u4e8b\u306e[\u5404\u5b9f\u9a13\u3067\u4f7f\u7528\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9]\u306b\u3042\u308a\u307e\u3059)\u3002\n\nuaf_slab.c \u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3001insmod \u3057\u307e\u3059\u3002\n\n```\n$ insmod uaf_slab.ko\n```\n\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u3068\u30b7\u30b9\u30ed\u30b0\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```\nuaf_slab: object addr: ffff880035f4e780\n==================================================================\n\u2460BUG: KASAN: use-after-free in uaf_slab_init+0x71/0x1000 [uaf_slab] at addr ffff880035f4e780\n\u2460Write of size 128 by task insmod/4441\n(\u7701\u7565)\n\u2460Call Trace:\n [<ffffffffb560fb6c>] dump_stack+0x86/0xca\n [<ffffffffb534a451>] kasan_object_err+0x21/0x70\n [<ffffffffb534a6dd>] kasan_report_error+0x1ed/0x500\n [<ffffffffb5174ece>] ? vprintk_default+0x3e/0x60\n [<ffffffffb534b008>] kasan_report+0x58/0x60\n [<ffffffffc06f0071>] ? uaf_slab_init+0x71/0x1000 [uaf_slab]\n [<ffffffffb534969c>] check_memory_region+0x13c/0x1a0\n [<ffffffffb5349b13>] memset+0x23/0x40\n [<ffffffffc06f0000>] ? 0xffffffffc06f0000\n [<ffffffffc06f0071>] uaf_slab_init+0x71/0x1000 [uaf_slab]\n(\u7701\u7565)\n [<ffffffffb51c219e>] SyS_finit_module+0xe/0x10\n [<ffffffffb5cb1fc1>] entry_SYSCALL_64_fastpath+0x1f/0xbd\n\u2461Object at ffff880035f4e780, in cache kmalloc-128 size: 128\n\u2462Allocated:\n\u2462PID = 4441\n\u2462[<ffffffffb5054a0b>] save_stack_trace+0x1b/0x20\n[<ffffffffb53497c6>] save_stack+0x46/0xd0\n[<ffffffffb5349a4d>] kasan_kmalloc+0xad/0xe0\n[<ffffffffb5345642>] kmem_cache_alloc_trace+0xf2/0x1e0\n[<ffffffffc06f0033>] uaf_slab_init+0x33/0x1000 [uaf_slab]\n(\u7701\u7565)\n[<ffffffffb51c219e>] SyS_finit_module+0xe/0x10\n[<ffffffffb5cb1fc1>] entry_SYSCALL_64_fastpath+0x1f/0xbd\n\u2463Freed:\n\u2463PID = 4441\n\u2463[<ffffffffb5054a0b>] save_stack_trace+0x1b/0x20\n[<ffffffffb53497c6>] save_stack+0x46/0xd0\n[<ffffffffb534a013>] kasan_slab_free+0x73/0xc0\n[<ffffffffb5346653>] kfree+0x93/0x1a0\n[<ffffffffc06f005f>] uaf_slab_init+0x5f/0x1000 [uaf_slab]\n(\u7701\u7565)\n[<ffffffffb51c219e>] SyS_finit_module+0xe/0x10\n[<ffffffffb5cb1fc1>] entry_SYSCALL_64_fastpath+0x1f/0xbd\n\u2464Memory state around the buggy address:\n ffff880035f4e680: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb\n ffff880035f4e700: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc\n>ffff880035f4e780: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb\n                   ^\n ffff880035f4e800: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb\n ffff880035f4e880: fb fb fb fb fb fb fb fb fc fc fc fc fc fc fc fc\n==================================================================\n```\n\u30ed\u30b0\u306e\u4e2d\u306b\u8a18\u8f09\u3057\u3066\u3044\u308b\u2460\u301c\u2464\u306e\u610f\u5473\u306f\u305d\u308c\u305e\u308c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u2460 \n\n- uaf_slab \u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e uaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x71 \u3067\u3001use after free \u3068\u306a\u308b\u51e6\u7406\u304c\u884c\u308f\u308c\u305f\n- use after free \u3068\u306a\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u306f ffff880035f4e780 \n- use after free \u3092\u884c\u3063\u305f\u306e\u306f\u3001PID: 4441 insmod \u30b3\u30de\u30f3\u30c9\n- 128 byte \u306e write \u304c use after free \u3068\u306a\u3063\u305f\n- 128 byte \u306e write \u304c\u884c\u308f\u308c\u308b\u307e\u3067\u306e\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3002\u3053\u306e\u30ed\u30b0\u304b\u3089\u306f\u3001uaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x71 \u3067\u3000call \u3055\u308c\u3066\u3044\u308b memset() \u3067 write \u304c\u884c\u308f\u308c\u3066\u3044\u308b\u3002\n\n\u2461\n\n- \u30aa\u30d6\u30b8\u30a7\u30af\u30c8(ffff880035f4e780) \u306f kmalloc-128 \u3068\u3057\u3066\u7ba1\u7406\u3055\u308c\u3066\u304a\u308a\u3001\u30b5\u30a4\u30ba\u306f 128 byte\n\n\u2462 \n\n- \u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001PID: 4441 \u306e\u30bf\u30b9\u30af\u306b\u3088\u3063\u3066\u7372\u5f97\u3055\u308c\u3066\u3044\u305f\n- \u7372\u5f97\u3057\u305f\u51e6\u7406\u306f\u3001uaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x33 \u3067 call \u3057\u3066\u3044\u308b kmem_cache_alloc() (kmalloc() \u306e\u4e2d\u8eab\u306e\u95a2\u6570)\n\n\u2463\n \n- \u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001PID: 4441 \u306e\u30bf\u30b9\u30af\u306b\u3088\u3063\u3066 free \u3055\u308c\u3066\u3044\u305f\n- free \u3057\u305f\u51e6\u7406\u306f\u3001uaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x5f \u3067 call \u3057\u3066\u3044\u308b kfree()\n    \n\u2464\n\n- \u30aa\u30d6\u30b8\u30a7\u30af\u30c8(ffff880035f4e780)\u4ed8\u8fd1\u306e\u30e1\u30e2\u30ea\u306e\u72b6\u614b\u3002\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4ed8\u8fd1\u3067\u306f\u30010xfb, 0xfc \u3067\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u308b\u9818\u57df\u3002\n    - 0xfb: free \u3055\u308c\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u9818\u57df\n    - 0xfc: redzone (KASan \u3067\u30e1\u30e2\u30ea\u7834\u58ca\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\u30de\u30fc\u30ab\u30fc)\u306e\u9818\u57df\n\n\u306a\u306e\u3067\u3001\u3053\u306e\u30ed\u30b0\u304b\u3089\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u70b9\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n- uaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x71 \u3067 memset() \u3092\u5b9f\u65bd\u3059\u308b\u3053\u3068\u304c\u6b63\u3057\u3044\u304b\u3002\n- uaf_slab_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x5f \u3067 kfree() \u3092\u5b9f\u65bd\u3059\u308b\u3053\u3068\u304c\u6b63\u3057\u3044\u304b\u3002\n\n\u306a\u304a\u3001\u8aad\u307f\u8fbc\u307f\u306e use after free \u3067\u3082\u540c\u69d8\u306b\u691c\u51fa\u3067\u304d\u307e\u3059\u3002\u30e2\u30b8\u30e5\u30fc\u30eb\u306e memset() \u3092\u3001 printk() \u7b49\u306e\u5024\u3092\u53c2\u7167\u3059\u308b\u30b3\u30fc\u30c9\u306b\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3067\u3001\u8aad\u307f\u8fbc\u307f\u306e use after free \u306e\u5b9f\u9a13\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u5b9f\u9a132. free \u5f8c\u306e\u30da\u30fc\u30b8\u306b\u66f8\u304d\u8fbc\u307f\n\u5b9f\u9a131. \u3068\u4f3c\u3066\u307e\u3059\u304c\u3001\u4eca\u5ea6\u306f\u3000kmalloc() \u3067\u306f\u306a\u304f\u3001allc_page() \u3067\u7372\u5f97\u3057\u305f\u30da\u30fc\u30b8\u3092\u3001free \u3057\u305f\u5f8c\u306b memset() \u3067\u66f8\u304d\u8fbc\u3080\u30e2\u30b8\u30e5\u30fc\u30eb(uaf_page.c)\u3092\u5b9f\u65bd\u3057\u3066\u307f\u307e\u3059 (uaf_page.c \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u672c\u8a18\u4e8b\u306e[\u5404\u5b9f\u9a13\u3067\u4f7f\u7528\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9]\u306b\u3042\u308a\u307e\u3059)\u3002\n\nuaf_page.c \u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u3001insmod \u3057\u307e\u3059\u3002\n\n```\n$ insmod uaf_page.ko\n```\n\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u3068\u30b7\u30b9\u30ed\u30b0\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```\nuaf_page: page: ffffea0001929640 addr: ffff880064a59000\n==================================================================\n\u2460BUG: KASAN: use-after-free in uaf_page_init+0x93/0x1000 [uaf_page] at addr ffff880064a59000\n\u2460Write of size 128 by task insmod/4878\n\u2460page:ffffea0001929640 count:0 mapcount:0 mapping:          (null) index:0x0\n\u2460flags: 0x3fff8000000000()\n\u2460page dumped because: kasan: bad access detected\n(\u7701\u7565)\n\u2460Call Trace:\n [<ffffffffb560fb6c>] dump_stack+0x86/0xca\n [<ffffffffb534a9b8>] kasan_report_error+0x4c8/0x500\n [<ffffffffb5174ece>] ? vprintk_default+0x3e/0x60\n [<ffffffffb534b008>] kasan_report+0x58/0x60\n [<ffffffffc06f0093>] ? uaf_page_init+0x93/0x1000 [uaf_page]\n [<ffffffffb534969c>] check_memory_region+0x13c/0x1a0\n [<ffffffffb5349b13>] memset+0x23/0x40\n [<ffffffffc06f0000>] ? 0xffffffffc06f0000\n [<ffffffffc06f0093>] uaf_page_init+0x93/0x1000 [uaf_page]\n(\u7701\u7565)\n [<ffffffffb51c219e>] SyS_finit_module+0xe/0x10\n [<ffffffffb5cb1fc1>] entry_SYSCALL_64_fastpath+0x1f/0xbd\n\u2461Memory state around the buggy address:\n ffff880064a58f00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n ffff880064a58f80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc\n>ffff880064a59000: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n                   ^\n ffff880064a59080: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n ffff880064a59100: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff\n==================================================================\n```\n\n\u5b9f\u9a131. \u3068\u5927\u4f53\u540c\u3058\u3067\u3059\u3002\u30da\u30fc\u30b8\u306b\u95a2\u3059\u308b\u60c5\u5831\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3068\u3001\u7372\u5f97\u3001free \u3057\u305f\u51e6\u7406\u306e\u60c5\u5831\u306f\u51fa\u529b\u3055\u308c\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u2460\n\n- uaf_page \u30e2\u30b8\u30e5\u30fc\u30eb\u306e uaf_page_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x93 \u3067 call \u3057\u3066\u3044\u308b memset() \u3067 use after free \u3068\u306a\u3063\u3066\u3044\u308b\n- use after free \u3068\u306a\u3063\u305f\u30a2\u30c9\u30ec\u30b9\u306f ffff880064a59000 \u3067\u3042\u308b\u3002\n- ffff880064a59000 \u306b\u5bfe\u5fdc\u3059\u308b\u30da\u30fc\u30b8\u69cb\u9020\u4f53\u306e\u30a2\u30c9\u30ec\u30b9\u306f ffffea0001929640 \u3067\u3042\u308b\u3002\n\n\u2461\n\n- \u30a2\u30c9\u30ec\u30b9 ffff880064a59000 \u4ed8\u8fd1\u306e\u30e1\u30e2\u30ea\u306e\u72b6\u614b\u30020xff, 0xfc \u3067\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u308b\u9818\u57df\u3002\n    - 0xff: free \u3055\u308c\u3066\u3044\u308b\u30da\u30fc\u30b8\u306e\u9818\u57df\n    - 0xfc: redzone (KASan \u3067\u30e1\u30e2\u30ea\u7834\u58ca\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3057\u3066\u3044\u308b\u30de\u30fc\u30ab\u30fc)\u306e\u9818\u57df\n\n\u306a\u306e\u3067\u3001\u3053\u306e\u30ed\u30b0\u304b\u3089\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u70b9\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u78ba\u8a8d\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n- uaf_page_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x93 \u3067 memset() \u3059\u308b\u3053\u3068\u306f\u6b63\u3057\u3044\u304b\u3002\n- uaf_page_init() \u306e\u30aa\u30d5\u30bb\u30c3\u30c8 0x93 \u3067 memset() \u3059\u308b\u524d\u307e\u3067\u306b\u610f\u56f3\u305b\u305a\u30da\u30fc\u30b8\u3092 free \u3057\u3066\u3044\u306a\u3044\u304b\u3002\n\n\u306a\u304a\u3001\u5b9f\u9a131. \u3068\u540c\u3058\u304f\u3001\u8aad\u307f\u8fbc\u307f\u306e use after free \u3067\u3082\u540c\u69d8\u306b\u691c\u51fa\u3067\u304d\u307e\u3059\u3002\n\n## \u5b9f\u9a133. free \u5f8c\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u518d\u5229\u7528\u3055\u308c\u305f\u3042\u3068\u306b\u66f8\u304d\u8fbc\u307f\n\nuse after free \u306e\u4e2d\u3067\u3082\u304b\u306a\u308a\u5384\u4ecb\u306a\u30b1\u30fc\u30b9\u3067\u3059\u3002\n\n- \u30bf\u30b9\u30af\u304c\uff12\u3064\u5b58\u5728\u3059\u308b\u72b6\u6cc1 (TASK A, TASK B)\n- TASK A \u304c use after free \u306e\u554f\u984c\u3092\u6301\u3063\u3066\u3044\u308b\n\n\u3053\u306e\u6761\u4ef6\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6642\u7cfb\u5217\u3067\u306e\u7372\u5f97\u3001free\u3001\u66f8\u304d\u8fbc\u307f\u304c\u767a\u751f\u3059\u308b\u3068\u3057\u307e\u3059\u3002\n\u4f55\u3082\u60aa\u304f\u306a\u3044 TASK B \u304c\u3001\u4f55\u6545\u304b\u5909\u306a\u5024\u3092\u53c2\u7167\u3057\u3066\u3057\u307e\u3044\u3001\u5927\u5909\u306a\u3053\u3068\u306b\u3002\u3002\u3002TASK B \u306b\u30c7\u30d0\u30c3\u30b0\u3092\u4ed5\u8fbc\u3093\u3067\u3082\u624b\u304c\u304b\u308a\u304c\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\n\n1. TASK A \u304c pa = kmalloc()\n2. TASK A \u304c kfree(pa)\n3. TASK B \u304c pb = kmalloc()\u3002\u3053\u306e\u3068\u304d\u3001pb \u306b\u306f pa \u3068\u540c\u3058\u30a2\u30c9\u30ec\u30b9\u304c\u5165\u308b\u3002(pa \u306e\u9818\u57df\u306e\u518d\u5229\u7528)\n4. TASK B \u304c pb \u306e\u9818\u57df\u3092\u4f7f\u7528\u3002\n5. TASK A \u304c pa (== pb)\u306b\u5bfe\u3057\u3066\u66f8\u304d\u8fbc\u307f (use after free)\n6. TASK B \u304c pb \u3092\u53c2\u7167\u3002TASK A \u306b\u66f8\u304d\u63db\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u610f\u56f3\u3057\u3066\u3044\u306a\u3044\u5024\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3001\u3042\u308f\u308f\u308f\u308f\n\n\u3053\u306e\u72b6\u6cc1\u3092\u518d\u73fe\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u52d5\u4f5c\u3092\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb(uaf_slab2.c)\u3067\u5b9f\u9a13\u3057\u307e\u3057\u305f (uaf_slab2.c \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u672c\u8a18\u4e8b\u306e[\u5404\u5b9f\u9a13\u3067\u4f7f\u7528\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9]\u306b\u3042\u308a\u307e\u3059)\u3002\n\n- \u51e6\u7406A\n    - 128 byte \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 kmalloc() \u3057\u3066\u3001kfree() \u3092\u3059\u308b\n    - kfree() \u5f8c\u3001\u51e6\u7406 B \u306b\u518d\u5229\u7528\u3055\u308c\u308b\u307e\u3067\u5f85\u3061\u5408\u308f\u305b\u3057\u3066\u3001\u518d\u5229\u7528\u3055\u308c\u305f\u3042\u3068\u306b\u66f8\u304d\u8fbc\u307f\n- \u51e6\u7406B\n    - \u51e6\u7406 A \u3067 kfree() \u3092\u3055\u308c\u308b\u3053\u3068\u3092\u5f85\u3061\u5408\u308f\u305b\u3057\u3066\u3001kfree() \u3055\u308c\u305f\u3042\u3068\u306b kmalloc() \u3067\u518d\u5229\u7528\n\n\u307e\u305f\u3001KASan \u306b\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u518d\u5229\u7528\u3092\u306a\u308b\u3079\u304f\u907f\u3051\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u6a5f\u69cb(Quarantine)\u3082\u3042\u308a\u307e\u3059\u3002Quarantine \u3067\u306f\u3001kfree() \u3055\u308c\u305f\u9818\u57df\u3092\u3059\u3050\u306b\u518d\u5229\u7528\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u30e1\u30e2\u30ea\u67af\u6e07\u7b49\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u56de\u53ce\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u307e\u3067\u518d\u5229\u7528\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u5b9f\u9a13\u3067\u306f\u518d\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u76ee\u7684\u306a\u306e\u3067\u3001KASan \u306e Quarantine\u3000\u304c\u90aa\u9b54\u3067\u3059\uff08\u7b11\uff09\u3002\u306a\u306e\u3067\u3001\u4e0a\u8a18\u306b\u52a0\u3048\u3066\u3000128 byte \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u56de\u53ce\u51e6\u7406\u3092\u52d5\u4f5c\u3055\u305b\u308b\u30b9\u30af\u30ea\u30d7\u30c8(shrink.sh)\u3092\u5e73\u884c\u306b\u6d41\u3057\u307e\u3059\u3002\n\n\u7d50\u679c\u3001\u6b8b\u5ff5\u306a\u304c\u3089 KASan \u3067\u3053\u306e\u554f\u984c\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002free \u72b6\u614b\u3067\u66f8\u304d\u8fbc\u307f\u304c\u884c\u308f\u308c\u308b\u5834\u5408\u306f\u691c\u77e5\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u7372\u5f97\u3055\u308c\u305f\u5f8c\u306e\u66f8\u304d\u8fbc\u307f\u306f\u691c\u77e5\u306f\u3067\u304d\u306a\u3044\u3088\u3046\u3067\u3059\u306d\u3002\n\n# \u5b9f\u9a13\u307e\u3068\u3081\nKASan \u306e use after free \u3092\u691c\u77e5\u3059\u308b\u4ed5\u7d44\u307f\u3067\u306f\u30fb\u30fb\u30fb\n\n- \u7372\u5f97\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u307e\u305f\u306f\u3001\u30da\u30fc\u30b8\u306e\u9818\u57df\u306b\u3064\u3044\u3066\u3001free \u5f8c\u3067\u306e\u66f8\u304d\u8fbc\u307f\u30fb\u8aad\u307f\u8fbc\u307f\u3092\u691c\u77e5\u3067\u304d\u308b\n- use after free \u3092\u884c\u3063\u305f\u30bf\u30b9\u30af\u306e PID\u3001\u30bf\u30b9\u30af\u540d\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8/\u30da\u30fc\u30b8\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u30ed\u30b0\u306b\u51fa\u529b\u3055\u308c\u308b\u3002\n- free \u5f8c\u3001\u518d\u5229\u7528\u3055\u308c\u308b\u3068\u691c\u77e5\u3067\u304d\u306a\u3044\n\n# \u304a\u308f\u308a\u306b\n\nKASan \u306e\u7d39\u4ecb\u3068\u3001use after free \u3092 KASan \u3092\u4f7f\u3063\u3066\u5b9f\u969b\u306b\u691c\u51fa\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30e1\u30e2\u30ea\u7834\u58ca\u554f\u984c\u306f\u691c\u51fa\u304c\u5384\u4ecb\u3067\u3001\u304b\u3064\u3001\u5f71\u97ff\u304c\u751a\u5927(\u30b7\u30b9\u30c6\u30e0\u30c0\u30a6\u30f3\u3001\u30c7\u30fc\u30bf\u7834\u58ca\u7b49)\u306b\u306a\u308a\u3084\u3059\u3044\u306e\u3067\u3001\u306a\u308b\u3079\u304f\u958b\u767a\u6bb5\u968e\u3067\u691c\u51fa\u3092\u3059\u308b\u3079\u304d\u30d0\u30b0\u3067\u3059\u3002\u30ab\u30fc\u30cd\u30eb\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u88fd\u54c1\u306b\u304a\u3044\u3066\u3001KASan \u3092\u6709\u52b9\u306b\u3057\u305f\u30ab\u30fc\u30cd\u30eb\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u306f\u826f\u3044\u304b\u3082\u3057\u308c\u305b\u3093\u3002\u6f5c\u5728\u7684\u306a\u30e1\u30e2\u30ea\u7834\u58ca\u306e\u30d0\u30b0\u304c\u898b\u3064\u304b\u308b\u304b\u3082\u3002\u3002\u3002\n\n# \u5404\u5b9f\u9a13\u3067\u4f7f\u7528\u3057\u305f\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\u610f\u56f3\u7684\u306b\u30e1\u30e2\u30ea\u7834\u58ca\u3092\u8d77\u3053\u3059\u30e2\u30b8\u30e5\u30fc\u30eb\u306a\u306e\u3067\u3001\u30b7\u30b9\u30c6\u30e0\u30c0\u30a6\u30f3\u3084\u30c7\u30fc\u30bf\u7834\u58ca\u7b49\u304c\u767a\u751f\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u4f7f\u7528\u306f\u3054\u6ce8\u610f\u3002\n\n## \u5b9f\u9a131\n```c:uaf_slab.c\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/mm.h>\n#include <linux/slab.h>\n\n#define OBJSIZE 128\n#define WRSIZE OBJSIZE\n\n#define d_info(fmt, ...) \\\n\tpr_info(\"uaf_slab: \" fmt,  ## __VA_ARGS__)\n\nstatic int __init uaf_slab_init(void)\n{\n\tvoid *victim;\n\n\td_info(\"uaf_slab is loaded.\\n\");\n\n\tvictim = kmalloc(OBJSIZE, GFP_KERNEL);\n\n\tmemset(victim, 0xaa, WRSIZE);\n\n\td_info(\"object addr: %p\\n\", victim);\n\n\tkfree(victim);\n\n\t/* use after free! */\n\tmemset(victim, 0xbb, WRSIZE);\n\n\treturn 0;\n}\n\nstatic void __exit uaf_slab_exit(void)\n{\n\td_info(\"uaf_slab is unloaded.\\n\");\n}\n\nMODULE_LICENSE(\"GPL v2\");\nmodule_init(uaf_slab_init);\nmodule_exit(uaf_slab_exit);\n```\n\n## \u5b9f\u9a132\n\n``` c:uaf_page.c\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/mm.h>\n\n#define WRSIZE 128\n\n#define d_info(fmt, ...) \\\n\tpr_info(\"uaf_page: \" fmt,  ## __VA_ARGS__)\n\nstatic int __init uaf_page_init(void)\n{\n\tstruct page *victim;\n\tvoid *victim_addr;\n\n\td_info(\"uaf_page is loaded.\\n\");\n\n\tvictim = alloc_page(GFP_KERNEL);\n\tvictim_addr = page_address(victim);\n\n\tmemset(victim_addr, 0xaa, WRSIZE);\n\n\td_info(\"page: %p addr: %p\\n\", victim, victim_addr);\n\n\t__free_page(victim);\n\n\t/* use after free! */\n\tmemset(victim_addr, 0xbb, WRSIZE);\n\n\treturn 0;\n}\n\nstatic void __exit uaf_page_exit(void)\n{\n\td_info(\"uaf_page is unloaded.\\n\");\n}\n\nMODULE_LICENSE(\"GPL v2\");\nmodule_init(uaf_page_init);\nmodule_exit(uaf_page_exit);\n```\n\n## \u5b9f\u9a133\n\n``` c:uaf_slab2.c\n#include <linux/module.h>\n#include <linux/kernel.h>\n#include <linux/mm.h>\n#include <linux/slab.h>\n#include <linux/kthread.h>\n\n#define MAXTRY 1024\n#define OBJSIZE 128\n#define WRSIZE OBJSIZE\n\n#define d_info(fmt, ...) \\\n    pr_info(\"uaf_slab: \" fmt,  ## __VA_ARGS__)\n\nstatic void *victim;\nstatic struct task_struct *reuser_tsk;\n\nenum {\n    NOTSTARTED = 0x0,\n    REALLOCED,\n    REUSED,\n};\n\nstatic int status = NOTSTARTED;\n\nDECLARE_COMPLETION(freedone);\nDECLARE_COMPLETION(reusedone);\n\nstatic int reuser(void *data)\n{\n    void **reuse_obj = data;\n    int i;\n    \n    wait_for_completion(&freedone);\n    \n    for (i = 0; i < MAXTRY; i++) {\n        reuse_obj[i] = kmalloc(OBJSIZE, GFP_KERNEL);\n        if (reuse_obj[i] == victim) {\n            d_info(\"reallocation is success. tried: %d\\n\", i);\n            status = REALLOCED;\n            break;\n        }\n        kfree(reuse_obj[i]);\n    }\n    \n    if (status == REALLOCED) {\n        memset(reuse_obj[i], 0xee, WRSIZE);\n        status = REUSED;\n    } else\n        d_info(\"reuse is failed...\\n\");\n    \n    complete(&reusedone);\n    \n    while (!kthread_should_stop())\n        schedule_timeout_interruptible(HZ);\n    \n    return 0;\n}\n\nstatic int __init uaf_slab_init(void)\n{\n    void **reuse_obj;\n    \n    d_info(\"uaf_slab is loaded.\\n\");\n    \n    victim = kmalloc(OBJSIZE, GFP_KERNEL);\n    \n    memset(victim, 0xcc, WRSIZE);\n    \n    d_info(\"object addr: %p\\n\", victim);\n    \n    /*\n     * create kthread to reallocate and reuse the object.\n     * The kthread should be binded to this cpu because\n     * the freed object is queued in the per cpu region.\n     */\n    reuse_obj = kcalloc(MAXTRY, sizeof(void *), GFP_KERNEL);\n    reuser_tsk = kthread_create(reuser, reuse_obj, \"reuser\");\n    kthread_bind(reuser_tsk, raw_smp_processor_id());\n    wake_up_process(reuser_tsk);\n    \n    kfree(victim);\n    \n    complete(&freedone);\n    \n    /* wait for reuse the object and page by reuser thread. */\n    wait_for_completion(&reusedone);\n    \n    if (status == REUSED) {\n        /* use after free! */\n        memset(victim, 0xdd, WRSIZE);\n    }\n    \n    kfree(reuse_obj);\n    \n    return 0;\n}\n\nstatic void __exit uaf_slab_exit(void)\n{\n    kthread_stop(reuser_tsk);\n    d_info(\"uaf_slab is unloaded.\\n\");\n}\n\nMODULE_LICENSE(\"GPL v2\");\nmodule_init(uaf_slab_init);\nmodule_exit(uaf_slab_exit);\n```\n\n``` bash:shrink.sh\n#!/bin/bash\n\nwhile true\ndo\n\techo 1 > /sys/kernel/slab/kmalloc-128/shrink\ndone\n```\n# \u53c2\u8003\u8cc7\u6599\nhttps://github.com/google/kasan/wiki\nhttp://events.linuxfoundation.org/sites/events/files/slides/LinuxCon%20North%20America%202015%20KernelAddressSanitizer.pdf\n"}