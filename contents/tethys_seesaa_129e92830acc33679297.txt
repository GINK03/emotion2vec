{"context": " More than 1 year has passed since last update.\u3053\u3093\u306b\u3061\u306f\u3001@tethys_seesaa\u3067\u3059\u3002\n\n\u306f\u3058\u3081\u306b\u3002\nSystemVerilog\u3068\u3044\u3048\u3070\u5236\u7d04\u4ed8\u304d\u30e9\u30f3\u30c0\u30e0\u304c\u6709\u540d\u3067\u3059\u3051\u3069\u3082\u3001\u5b9f\u969b\u4f7f\u3046\u3068\u3001\u5236\u7d04\u306e\u7bc4\u56f2\u5185\u3067\u3069\u308c\u304f\u3089\u3044\u5024\u304c\u3070\u3089\u307e\u304b\u308c\u3066\u3044\u308b\u306e\u304b\u628a\u63e1\u3057\u3066\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u306d\u3068\u304b\u601d\u3044\u307e\u3059\u3002\n\u3044\u308d\u3044\u308d\u306a\u3084\u308a\u65b9\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u500b\u4eba\u7684\u306b\u306fcovergroup\u3092\u3088\u304f\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u30ab\u30d0\u30ec\u30c3\u30b8\u30c9\u30ea\u30d6\u30f3\u691c\u8a3c\u3063\u3066\u3084\u3064\u3067\u3057\u3087\u3046\u304b\u3002\n\u305d\u3093\u306a\u3053\u3068\u306f\u3055\u3066\u304a\u304d\u3001\u3053\u3053\u3067\u306f\u3001covergroup\u3092\u4f7f\u3063\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u5024\u306e\u51fa\u73fe\u78ba\u7387\u3092\u5909\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u4f8b\u3048\u3070\u3001\ncovergroup\u30d9\u30fc\u30b9\u3067\u3053\u3093\u306a\u30b3\u30fc\u30c9\u8d70\u3089\u305b\u3066\u307f\u307e\u3059\u3002\n\u3053\u308c\u306f\u53ce\u675f\u3059\u308b\u307e\u3067\u76f8\u5f53\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u5b9f\u306f\u3053\u306e\u30b3\u30fc\u30c9\u3001\u5404\u793e\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u306e\u30e9\u30f3\u30c0\u30e0\u5024\u51fa\u529b\u30a8\u30f3\u30b8\u30f3\u306e\u6027\u683c\u306e\u5dee\u304c\u5982\u5b9f\u306b\u8868\u308c\u307e\u3059\u3002\u3042\u3001\u5236\u7d04\u306a\u3044\u3067\u3059\u306d\u30b3\u30ec\u3002\n\ntb.sv\nprogram tb();\n  bit clk;\n  logic [7:0] a,b,c;\n  event sim_end;\n\n  class abc_class;\n    rand logic [7:0] ra, rb, rc;\n\n    covergroup abc_cg @(posedge clk) ;\n      a_point : coverpoint a {\n        bins a_min    = { 'h00 } ;\n        bins a_middle = { ['h01:'hfe] };\n        bins a_max    = { 'hff };\n      }\n      b_point : coverpoint b {\n        bins b_min    = { 'h00 } ;\n        bins b_middle = { ['h01:'hfe] };\n        bins b_max    = { 'hff };\n      }\n      c_point : coverpoint c {\n        bins c_min    = { 'h00 } ;\n        bins c_middle = { ['h01:'hfe] };\n        bins c_max    = { 'hff };\n      }\n      abc_point : cross a_point, b_point, c_point;\n    endgroup\n\n    function new();\n      abc_cg = new();\n    endfunction\n\n  endclass\n\n  abc_class abc = new();\n\n  task clk_gen();\n    forever  #1  clk = ~clk;\n  endtask\n\n  task data_gen();\n    forever @(posedge clk) begin\n      void'(abc.randomize());\n      a = abc.ra;\n      b = abc.rb;\n      c = abc.rc;\n      // $display(\"a : 0x%x b : 0x%x c : 0x%x\", a, b, c);\n    end\n  endtask\n\n  task cov_correction();\n    real number_of_coveage;\n    forever @(posedge clk) begin\n      number_of_coveage = abc.abc_cg.abc_point.get_coverage();\n      // $display(\"Coverage is %f\", number_of_coveage);\n      if(number_of_coveage == 100) ->sim_end;\n    end\n  endtask\n\n  task sim_ctrl();\n    @(sim_end);\n    $finish(2);\n  endtask\n\n  initial begin\n    fork\n      clk_gen();\n      data_gen();\n      cov_correction();\n      sim_ctrl();\n    join\n  end\n\nendprogram\n\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u306f\u3001\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\u5230\u9054\u304c\u3068\u3066\u3082\u307e\u308c\u3060\u304b\u3089\u3067\u3059\u3002\na=='h00, b=='h00, c=='h00\u3068\u304b\u3001a=='hFF, b=='h00, c=='hFF\u3068\u304b\u3067\u3059\u306d\u3002\n\n\u3058\u3083\u3042\u3069\u3046\u3059\u308b\u304b\u3002\n\u65e9\u671f\u306b\u53ce\u675f\u3055\u305b\u308b\u306b\u306fdist\u3092\u4f7f\u3046\u624b\u304c\u3042\u308a\u307e\u3059\u3002\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\u51fa\u73fe\u306e\u91cd\u307f\u3092\u4e2d\u9593\u5024\u3088\u308a\u5927\u304d\u304f\u3057\u307e\u3059\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u5236\u7d04\u3092\u4e0e\u3048\u3066\u307f\u307e\u3059\u3002\n    constraint weight{\n      ra dist {\n        'h00        := 100,\n        ['h80:'hfe] := 10,\n        'hff        := 100\n      };\n      rb dist {\n        'h00        := 100,\n        ['h80:'hfe] := 10,\n        'hff        := 100\n      };\n      rc dist {\n        'h00        := 100,\n        ['h80:'hfe] := 10,\n        'hff        := 100\n      };\n    }\n\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u3042\u3063\u3068\u3044\u3046\u9593\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306f\u7d42\u4e86\u3057\u307e\u3059\u304c\u3001\u4eca\u5ea6\u306f\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\u3092\u983b\u51fa\u3057\u3066\u3001\u4e2d\u9593\u5024\u304c\u5341\u5206\u306b\u51fa\u3066\u3053\u306a\u3044\u30b8\u30ec\u30f3\u30de\u306b\u9665\u308a\u307e\u3059\u3002\n\u3053\u306e\u8fba\u3001\u691c\u8a3c\u5bfe\u8c61\u306b\u3088\u3063\u3066\u30b1\u30fc\u30b9\u30d0\u30a4\u30b1\u30fc\u30b9\u3067\u3059\u304b\u3089\u3001\u30b3\u30ec\u306f\u30b3\u30ec\u3067\u3088\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u4e2d\u9593\u5024\u3092\u51fa\u3057\u305f\u3044\u3068\u601d\u3046\u3068\u304d\u306f\u3001dist\u306e\u91cd\u307f\u3092\u9069\u5f53\u306b\u8abf\u7bc0\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n\u305f\u3060\u3001dist\u306e\u91cd\u307f\u306e\u5024\u306f\u81ea\u7531\u306b\u3064\u3051\u3089\u308c\u308b\u304c\u3086\u3048\u3001\u8abf\u7bc0\u306f\u30c8\u30e9\u30a4\u30a2\u30f3\u30c9\u30a8\u30e9\u30fc\u3068\u306a\u308a\u3051\u3063\u3053\u3046\u9762\u5012\u304f\u3055\u3044\u3067\u3059\u3002\ndist\u3092\u9759\u7684\u306b\u4e0e\u3048\u308b\u306e\u306f\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001SystemVerilog\u306e\u6a5f\u80fd\u3067\u3082\u3046\u3061\u3087\u3063\u3068\u5236\u5fa1\u3067\u304d\u306a\u3044\u304b\u306a\u3068\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\nget_coverage()\n\u3053\u3053\u3067\u306fcovergroup\u306eget_coverage()\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u65e2\u306b\u6700\u521d\u306e\u30b3\u30fc\u30c9\u3067\u51fa\u3066\u304d\u3066\u3044\u307e\u3059\u304c\u3001get_coverage()\u306fcoverpoint\u6bce\u306b\u30d2\u30c3\u30c8\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u306e\u6570\u3092\u793a\u3057\u3001\u6700\u5c0f\u5024\u306f0\u3001\u6700\u5927\u5024\u306f100\u3068\u306a\u308a\u307e\u3059\u3002\n\u72d9\u3044\u306f\u3001 get_coverage()\u306e\u8fd4\u5024\u3092\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3057\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306e\u51fa\u73fe\u78ba\u7387\u3092\u5909\u3048\u3066\u3044\u304f \u3053\u3068\u3067\u3059\u3002\n\u4ee5\u4e0b\u306f\u3001\u5168\u3066\u6700\u521d\u306e\u30b3\u30fc\u30c9\u306eclass\u5185\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u307e\u305a\u306fdist\u306e\u91cd\u307f\u3092\u5909\u6570\u5316\u3057\u307e\u3059\u3002\n    int  wa_min    = 100;\n    int  wa_middle = 100;\n    int  wa_max    = 100;\n    int  wb_min    = 100;\n    int  wb_middle = 100;\n    int  wb_max    = 100;\n    int  wc_min    = 100;\n    int  wc_middle = 100;\n    int  wc_max    = 100;\n\n    constraint weight{\n      ra dist {\n        'h00        := wa_min,\n        ['h80:'hfe] := wa_middle,\n        'hff        := wa_max\n      };\n      rb dist {\n        'h00        := wb_min,\n        ['h80:'hfe] := wb_middle,\n        'hff        := wb_max\n      };\n      rc dist {\n        'h00        := wc_min,\n        ['h80:'hfe] := wc_middle,\n        'hff        := wc_max\n      };\n    }\n\n\u6b21\u306b\u3001coverpoint\u3092\u65b0\u305f\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002get_coverage()\u304cbins\u307e\u3067\u6307\u5b9a\u3067\u304d\u308c\u3070\u3053\u308c\u3092\u3059\u308b\u5fc5\u8981\u304c\u7121\u3044\u306e\u3067\u3059\u304c\u2026\u3002\n  localparam BUCKET = 16;\n\n    covergroup abc_cg @(posedge clk) ;\n      a_cp_min    : coverpoint a { bins a         = { 'h00 } ; }\n      a_cp_middle : coverpoint a { bins a[BUCKET] = { ['h01:'hfe] }; }\n      a_cp_max    : coverpoint a { bins a         = { 'hff }; }\n      b_cp_min    : coverpoint b { bins b         = { 'h00 } ; }\n      b_cp_middle : coverpoint b { bins b[BUCKET] = { ['h01:'hfe] }; }\n      b_cp_max    : coverpoint b { bins b         = { 'hff }; }\n      c_cp_min    : coverpoint c { bins c         = { 'h00 } ; }\n      c_cp_middle : coverpoint c { bins c[BUCKET] = { ['h01:'hfe] }; }\n      c_cp_max    : coverpoint c { bins c         = { 'hff }; }\n\n      a_point : coverpoint a {\n        bins a_min    = { 'h00 } ;\n        bins a_middle = { ['h01:'hfe] };\n        bins a_max    = { 'hff };\n      }\n      b_point : coverpoint b {\n        bins b_min    = { 'h00 } ;\n        bins b_middle = { ['h01:'hfe] };\n        bins b_max    = { 'hff };\n      }\n      c_point : coverpoint c {\n        bins c_min    = { 'h00 } ;\n        bins c_middle = { ['h01:'hfe] };\n        bins c_max    = { 'hff };\n      }\n      abc_point : cross a_point, b_point, c_point;\n    endgroup\n\n\u6b21\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u30ab\u30d0\u30ec\u30c3\u30b8\u3092\u62bd\u51fa\u3057\u3001pre_randomize()\u3067\u91cd\u307f\u3092\u5909\u5316\u3055\u305b\u307e\u3059\u3002\nget_coverage()\u306e\u8fd4\u5024\u306freal\u578b\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306f$rtoi()\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n    function int weight_set(int weight);\n      real c;\n      case(weight)\n        wa_middle : c = abc_cg.a_cp_middle.get_coverage();\n        wb_middle : c = abc_cg.b_cp_middle.get_coverage();\n        wc_middle : c = abc_cg.c_cp_middle.get_coverage();\n      endcase\n      return 100 - $rtoi(c);\n    endfunction\n\n    function void pre_randomize();\n      wa_middle = weight_set(wa_middle);\n      wb_middle = weight_set(wb_middle);\n      wc_middle = weight_set(wc_middle);\n    endfunction\n\n\n\u3069\u3093\u306a\u52d5\u304d\u3092\u3057\u3066\u3044\u308b\u304b\n\u6700\u521d\u306f\u3001\u6700\u5927\u5024/\u4e2d\u9593\u5024/\u6700\u5c0f\u5024\u3044\u305a\u308c\u3082\u540c\u7b49\u306b\u5024\u3092\u51fa\u529b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4e2d\u9593\u5024\u306fget_coverage()\u306b\u3088\u3063\u3066\u3001dist\u306e\u91cd\u307f\u304c\u5c0f\u3055\u304f\u306a\u3063\u3066\u3044\u304f\u305f\u3081\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u6642\u9593\u306e\u9032\u884c\u306b\u3064\u308c\u3066\u76f8\u5bfe\u7684\u306b\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\u306e\u51fa\u73fe\u78ba\u7387\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u7d42\u308f\u308a\u307e\u3059\u3002\nBUCKET\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3059\u308b\u307b\u3069\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u306f\u9577\u304f\u306a\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u304a\u308f\u308a\u306b\u3002\ncovergroup\u306f\u3001\u767a\u751f\u3059\u308bbins\u306e\u69cb\u6210\u306b\u3088\u3063\u3066\u306f\u5927\u304d\u306a\u30e1\u30e2\u30ea\u7a7a\u9593\u3092\u3068\u308b\u306e\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u6642\u9593\u304c\u9577\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u8a18\u8ff0\u306b\u4e00\u5de5\u592b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u6bd4\u8f03\u7684\u30d5\u30ea\u30fc\u30c0\u30e0\u3067\u3067\u304b\u305d\u3046\u306acovergroup\u306b\u5bfe\u3057\u3066\u3001\u305d\u308c\u306b\u5fdc\u3058\u305f\u30e9\u30f3\u30c0\u30e0\u5024\u3092\u4e0e\u3048\u308b\u3088\u3046\u306a\u3053\u3068\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306e\u30ab\u30d0\u30ec\u30c3\u30b8\u30c9\u30ea\u30d6\u30f3\u691c\u8a3c\u3067\u306f\u3001cross\u3092\u4f7f\u3046\u5834\u5408\u306b\u306fbinsof\u3068intersect\u3092\u4f7f\u3063\u3066\u91cd\u8907\u90e8\u5206\u3092\u524a\u6e1b\u3055\u305b\u305f\u308a\u3001\u305d\u308c\u4ee5\u5916\u3067\u3082\u3001illegal_bins\u3092\u4f7f\u3063\u3066\u65e9\u671f\u306b\u691c\u8a3c\u5bfe\u8c61\u3092\u53e9\u304d\u6f70\u3057\u305f\u308a\u3001wildcard\u3067\u3069\u3046\u3067\u3082\u3044\u3044\u3068\u3053\u308d\u306f\u307e\u3068\u3081\u3066\u3072\u3068\u3064\u306b\u3057\u305f\u308a\u3001covergroup\u306e\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3092\u5de5\u592b\u3057\u3066\u3001\u8981\u3089\u306a\u3044\u3068\u3053\u308d\u306fignore_bins\u6307\u5b9a\u3057\u305f\u308a\u3057\u3066\u65e9\u671f\u306b\u53ce\u675f\u3055\u305b\u308b\u3068\u3053\u308d\u3092\u76ee\u6307\u3057\u3066\u3044\u304f\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3053\u3093\u306b\u3061\u306f\u3001@tethys_seesaa\u3067\u3059\u3002\n#\u306f\u3058\u3081\u306b\u3002\nSystemVerilog\u3068\u3044\u3048\u3070\u5236\u7d04\u4ed8\u304d\u30e9\u30f3\u30c0\u30e0\u304c\u6709\u540d\u3067\u3059\u3051\u3069\u3082\u3001\u5b9f\u969b\u4f7f\u3046\u3068\u3001\u5236\u7d04\u306e\u7bc4\u56f2\u5185\u3067\u3069\u308c\u304f\u3089\u3044\u5024\u304c\u3070\u3089\u307e\u304b\u308c\u3066\u3044\u308b\u306e\u304b\u628a\u63e1\u3057\u3066\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u306d\u3068\u304b\u601d\u3044\u307e\u3059\u3002\n\u3044\u308d\u3044\u308d\u306a\u3084\u308a\u65b9\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u500b\u4eba\u7684\u306b\u306f`covergroup`\u3092\u3088\u304f\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u30ab\u30d0\u30ec\u30c3\u30b8\u30c9\u30ea\u30d6\u30f3\u691c\u8a3c\u3063\u3066\u3084\u3064\u3067\u3057\u3087\u3046\u304b\u3002\n\u305d\u3093\u306a\u3053\u3068\u306f\u3055\u3066\u304a\u304d\u3001\u3053\u3053\u3067\u306f\u3001covergroup\u3092\u4f7f\u3063\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u5024\u306e\u51fa\u73fe\u78ba\u7387\u3092\u5909\u3048\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n#\u4f8b\u3048\u3070\u3001\ncovergroup\u30d9\u30fc\u30b9\u3067\u3053\u3093\u306a\u30b3\u30fc\u30c9\u8d70\u3089\u305b\u3066\u307f\u307e\u3059\u3002\n\u3053\u308c\u306f\u53ce\u675f\u3059\u308b\u307e\u3067\u76f8\u5f53\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u5b9f\u306f\u3053\u306e\u30b3\u30fc\u30c9\u3001\u5404\u793e\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\u306e\u30e9\u30f3\u30c0\u30e0\u5024\u51fa\u529b\u30a8\u30f3\u30b8\u30f3\u306e\u6027\u683c\u306e\u5dee\u304c\u5982\u5b9f\u306b\u8868\u308c\u307e\u3059\u3002\u3042\u3001\u5236\u7d04\u306a\u3044\u3067\u3059\u306d\u30b3\u30ec\u3002\n\n```verilog:tb.sv\nprogram tb();\n  bit clk;\n  logic [7:0] a,b,c;\n  event sim_end;\n\n  class abc_class;\n    rand logic [7:0] ra, rb, rc;\n\n    covergroup abc_cg @(posedge clk) ;\n      a_point : coverpoint a {\n        bins a_min    = { 'h00 } ;\n        bins a_middle = { ['h01:'hfe] };\n        bins a_max    = { 'hff };\n      }\n      b_point : coverpoint b {\n        bins b_min    = { 'h00 } ;\n        bins b_middle = { ['h01:'hfe] };\n        bins b_max    = { 'hff };\n      }\n      c_point : coverpoint c {\n        bins c_min    = { 'h00 } ;\n        bins c_middle = { ['h01:'hfe] };\n        bins c_max    = { 'hff };\n      }\n      abc_point : cross a_point, b_point, c_point;\n    endgroup\n\n    function new();\n      abc_cg = new();\n    endfunction\n\n  endclass\n\n  abc_class abc = new();\n\n  task clk_gen();\n    forever  #1  clk = ~clk;\n  endtask\n\n  task data_gen();\n    forever @(posedge clk) begin\n      void'(abc.randomize());\n      a = abc.ra;\n      b = abc.rb;\n      c = abc.rc;\n      // $display(\"a : 0x%x b : 0x%x c : 0x%x\", a, b, c);\n    end\n  endtask\n\n  task cov_correction();\n    real number_of_coveage;\n    forever @(posedge clk) begin\n      number_of_coveage = abc.abc_cg.abc_point.get_coverage();\n      // $display(\"Coverage is %f\", number_of_coveage);\n      if(number_of_coveage == 100) ->sim_end;\n    end\n  endtask\n\n  task sim_ctrl();\n    @(sim_end);\n    $finish(2);\n  endtask\n\n  initial begin\n    fork\n      clk_gen();\n      data_gen();\n      cov_correction();\n      sim_ctrl();\n    join\n  end\n\nendprogram\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u306f\u3001\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\u5230\u9054\u304c\u3068\u3066\u3082\u307e\u308c\u3060\u304b\u3089\u3067\u3059\u3002\na=='h00, b=='h00, c=='h00\u3068\u304b\u3001a=='hFF, b=='h00, c=='hFF\u3068\u304b\u3067\u3059\u306d\u3002\n\n#\u3058\u3083\u3042\u3069\u3046\u3059\u308b\u304b\u3002\n\u65e9\u671f\u306b\u53ce\u675f\u3055\u305b\u308b\u306b\u306f`dist`\u3092\u4f7f\u3046\u624b\u304c\u3042\u308a\u307e\u3059\u3002\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\u51fa\u73fe\u306e\u91cd\u307f\u3092\u4e2d\u9593\u5024\u3088\u308a\u5927\u304d\u304f\u3057\u307e\u3059\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u5236\u7d04\u3092\u4e0e\u3048\u3066\u307f\u307e\u3059\u3002\n\n```verilog\n    constraint weight{\n      ra dist {\n        'h00        := 100,\n        ['h80:'hfe] := 10,\n        'hff        := 100\n      };\n      rb dist {\n        'h00        := 100,\n        ['h80:'hfe] := 10,\n        'hff        := 100\n      };\n      rc dist {\n        'h00        := 100,\n        ['h80:'hfe] := 10,\n        'hff        := 100\n      };\n    }\n```\n\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u3042\u3063\u3068\u3044\u3046\u9593\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306f\u7d42\u4e86\u3057\u307e\u3059\u304c\u3001\u4eca\u5ea6\u306f\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\u3092\u983b\u51fa\u3057\u3066\u3001\u4e2d\u9593\u5024\u304c\u5341\u5206\u306b\u51fa\u3066\u3053\u306a\u3044\u30b8\u30ec\u30f3\u30de\u306b\u9665\u308a\u307e\u3059\u3002\n\u3053\u306e\u8fba\u3001\u691c\u8a3c\u5bfe\u8c61\u306b\u3088\u3063\u3066\u30b1\u30fc\u30b9\u30d0\u30a4\u30b1\u30fc\u30b9\u3067\u3059\u304b\u3089\u3001\u30b3\u30ec\u306f\u30b3\u30ec\u3067\u3088\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3082\u3046\u3061\u3087\u3063\u3068\u4e2d\u9593\u5024\u3092\u51fa\u3057\u305f\u3044\u3068\u601d\u3046\u3068\u304d\u306f\u3001dist\u306e\u91cd\u307f\u3092\u9069\u5f53\u306b\u8abf\u7bc0\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n\u305f\u3060\u3001dist\u306e\u91cd\u307f\u306e\u5024\u306f\u81ea\u7531\u306b\u3064\u3051\u3089\u308c\u308b\u304c\u3086\u3048\u3001\u8abf\u7bc0\u306f\u30c8\u30e9\u30a4\u30a2\u30f3\u30c9\u30a8\u30e9\u30fc\u3068\u306a\u308a\u3051\u3063\u3053\u3046\u9762\u5012\u304f\u3055\u3044\u3067\u3059\u3002\ndist\u3092\u9759\u7684\u306b\u4e0e\u3048\u308b\u306e\u306f\u9762\u767d\u304f\u306a\u3044\u306e\u3067\u3001SystemVerilog\u306e\u6a5f\u80fd\u3067\u3082\u3046\u3061\u3087\u3063\u3068\u5236\u5fa1\u3067\u304d\u306a\u3044\u304b\u306a\u3068\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n#get_coverage()\n\u3053\u3053\u3067\u306fcovergroup\u306eget_coverage()\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u65e2\u306b\u6700\u521d\u306e\u30b3\u30fc\u30c9\u3067\u51fa\u3066\u304d\u3066\u3044\u307e\u3059\u304c\u3001get_coverage()\u306fcoverpoint\u6bce\u306b\u30d2\u30c3\u30c8\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u306e\u6570\u3092\u793a\u3057\u3001\u6700\u5c0f\u5024\u306f0\u3001\u6700\u5927\u5024\u306f100\u3068\u306a\u308a\u307e\u3059\u3002\n\u72d9\u3044\u306f\u3001 **get_coverage()\u306e\u8fd4\u5024\u3092\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3057\u3066\u3001\u30e9\u30f3\u30c0\u30e0\u306e\u51fa\u73fe\u78ba\u7387\u3092\u5909\u3048\u3066\u3044\u304f** \u3053\u3068\u3067\u3059\u3002\n\n\u4ee5\u4e0b\u306f\u3001\u5168\u3066\u6700\u521d\u306e\u30b3\u30fc\u30c9\u306eclass\u5185\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u307e\u305a\u306fdist\u306e\u91cd\u307f\u3092\u5909\u6570\u5316\u3057\u307e\u3059\u3002\n\n```verilog\n    int  wa_min    = 100;\n    int  wa_middle = 100;\n    int  wa_max    = 100;\n    int  wb_min    = 100;\n    int  wb_middle = 100;\n    int  wb_max    = 100;\n    int  wc_min    = 100;\n    int  wc_middle = 100;\n    int  wc_max    = 100;\n\n    constraint weight{\n      ra dist {\n        'h00        := wa_min,\n        ['h80:'hfe] := wa_middle,\n        'hff        := wa_max\n      };\n      rb dist {\n        'h00        := wb_min,\n        ['h80:'hfe] := wb_middle,\n        'hff        := wb_max\n      };\n      rc dist {\n        'h00        := wc_min,\n        ['h80:'hfe] := wc_middle,\n        'hff        := wc_max\n      };\n    }\n```\n\n\u6b21\u306b\u3001coverpoint\u3092\u65b0\u305f\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002get_coverage()\u304cbins\u307e\u3067\u6307\u5b9a\u3067\u304d\u308c\u3070\u3053\u308c\u3092\u3059\u308b\u5fc5\u8981\u304c\u7121\u3044\u306e\u3067\u3059\u304c\u2026\u3002\n\n```verilog\n  localparam BUCKET = 16;\n\n    covergroup abc_cg @(posedge clk) ;\n      a_cp_min    : coverpoint a { bins a         = { 'h00 } ; }\n      a_cp_middle : coverpoint a { bins a[BUCKET] = { ['h01:'hfe] }; }\n      a_cp_max    : coverpoint a { bins a         = { 'hff }; }\n      b_cp_min    : coverpoint b { bins b         = { 'h00 } ; }\n      b_cp_middle : coverpoint b { bins b[BUCKET] = { ['h01:'hfe] }; }\n      b_cp_max    : coverpoint b { bins b         = { 'hff }; }\n      c_cp_min    : coverpoint c { bins c         = { 'h00 } ; }\n      c_cp_middle : coverpoint c { bins c[BUCKET] = { ['h01:'hfe] }; }\n      c_cp_max    : coverpoint c { bins c         = { 'hff }; }\n\n      a_point : coverpoint a {\n        bins a_min    = { 'h00 } ;\n        bins a_middle = { ['h01:'hfe] };\n        bins a_max    = { 'hff };\n      }\n      b_point : coverpoint b {\n        bins b_min    = { 'h00 } ;\n        bins b_middle = { ['h01:'hfe] };\n        bins b_max    = { 'hff };\n      }\n      c_point : coverpoint c {\n        bins c_min    = { 'h00 } ;\n        bins c_middle = { ['h01:'hfe] };\n        bins c_max    = { 'hff };\n      }\n      abc_point : cross a_point, b_point, c_point;\n    endgroup\n```\n\n\u6b21\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u30a2\u30a4\u30c6\u30e0\u306e\u30ab\u30d0\u30ec\u30c3\u30b8\u3092\u62bd\u51fa\u3057\u3001pre_randomize()\u3067\u91cd\u307f\u3092\u5909\u5316\u3055\u305b\u307e\u3059\u3002\nget_coverage()\u306e\u8fd4\u5024\u306freal\u578b\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306f$rtoi()\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```verilog\n    function int weight_set(int weight);\n      real c;\n      case(weight)\n        wa_middle : c = abc_cg.a_cp_middle.get_coverage();\n        wb_middle : c = abc_cg.b_cp_middle.get_coverage();\n        wc_middle : c = abc_cg.c_cp_middle.get_coverage();\n      endcase\n      return 100 - $rtoi(c);\n    endfunction\n\n    function void pre_randomize();\n      wa_middle = weight_set(wa_middle);\n      wb_middle = weight_set(wb_middle);\n      wc_middle = weight_set(wc_middle);\n    endfunction\n```\n\n#\u3069\u3093\u306a\u52d5\u304d\u3092\u3057\u3066\u3044\u308b\u304b\n\u6700\u521d\u306f\u3001\u6700\u5927\u5024/\u4e2d\u9593\u5024/\u6700\u5c0f\u5024\u3044\u305a\u308c\u3082\u540c\u7b49\u306b\u5024\u3092\u51fa\u529b\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4e2d\u9593\u5024\u306fget_coverage()\u306b\u3088\u3063\u3066\u3001dist\u306e\u91cd\u307f\u304c\u5c0f\u3055\u304f\u306a\u3063\u3066\u3044\u304f\u305f\u3081\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u6642\u9593\u306e\u9032\u884c\u306b\u3064\u308c\u3066\u76f8\u5bfe\u7684\u306b\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\u306e\u51fa\u73fe\u78ba\u7387\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u7d42\u308f\u308a\u307e\u3059\u3002\nBUCKET\u306e\u5024\u3092\u5927\u304d\u304f\u3059\u308c\u3070\u3059\u308b\u307b\u3069\u3001\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u6642\u9593\u306f\u9577\u304f\u306a\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n#\u304a\u308f\u308a\u306b\u3002\ncovergroup\u306f\u3001\u767a\u751f\u3059\u308bbins\u306e\u69cb\u6210\u306b\u3088\u3063\u3066\u306f\u5927\u304d\u306a\u30e1\u30e2\u30ea\u7a7a\u9593\u3092\u3068\u308b\u306e\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u6642\u9593\u304c\u9577\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u8a18\u8ff0\u306b\u4e00\u5de5\u592b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u3001\u6bd4\u8f03\u7684\u30d5\u30ea\u30fc\u30c0\u30e0\u3067\u3067\u304b\u305d\u3046\u306acovergroup\u306b\u5bfe\u3057\u3066\u3001\u305d\u308c\u306b\u5fdc\u3058\u305f\u30e9\u30f3\u30c0\u30e0\u5024\u3092\u4e0e\u3048\u308b\u3088\u3046\u306a\u3053\u3068\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306e\u30ab\u30d0\u30ec\u30c3\u30b8\u30c9\u30ea\u30d6\u30f3\u691c\u8a3c\u3067\u306f\u3001`cross`\u3092\u4f7f\u3046\u5834\u5408\u306b\u306f`binsof`\u3068`intersect`\u3092\u4f7f\u3063\u3066\u91cd\u8907\u90e8\u5206\u3092\u524a\u6e1b\u3055\u305b\u305f\u308a\u3001\u305d\u308c\u4ee5\u5916\u3067\u3082\u3001`illegal_bins`\u3092\u4f7f\u3063\u3066\u65e9\u671f\u306b\u691c\u8a3c\u5bfe\u8c61\u3092\u53e9\u304d\u6f70\u3057\u305f\u308a\u3001`wildcard`\u3067\u3069\u3046\u3067\u3082\u3044\u3044\u3068\u3053\u308d\u306f\u307e\u3068\u3081\u3066\u3072\u3068\u3064\u306b\u3057\u305f\u308a\u3001covergroup\u306e\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3092\u5de5\u592b\u3057\u3066\u3001\u8981\u3089\u306a\u3044\u3068\u3053\u308d\u306f`ignore_bins`\u6307\u5b9a\u3057\u305f\u308a\u3057\u3066\u65e9\u671f\u306b\u53ce\u675f\u3055\u305b\u308b\u3068\u3053\u308d\u3092\u76ee\u6307\u3057\u3066\u3044\u304f\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002", "tags": ["Verilog", "SystemVerilog", "HDL"]}