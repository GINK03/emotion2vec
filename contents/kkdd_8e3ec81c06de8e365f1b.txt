{"context": "\u3053\u3093\u306b\u3061\u306f\u3002\nDBSCAN\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u306f1\u3001\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u4e00\u7a2e\u3067\u3001\u8fd1\u508d\u63a2\u7d22\uff08\u4f8b\uff09\u3068\u7d20\u96c6\u5408\u30c7\u30fc\u30bf\u69cb\u9020\u6cd5\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002\n\u81ea\u5206\u3067\u3082\u3001scikit-learn\u306e\u30bd\u30fc\u30b92\u3092\u8aad\u307f\u3001\u307b\u307c\u5f15\u304d\u5199\u3057\u3067 DBSCAN\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff08depth-first\u578b\u3068breadth-first\u578b\u306e\u4e8c\u7a2e\uff09\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u5ff5\u306e\u305f\u3081scikit-learn\u306b\u3088\u308b\u7d50\u679c\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u691c\u7b97\u3057\u307e\u3057\u305f\u3002\n$ ./dbscan.py\nTrue : depth-first\nTrue : breadth-first\n\n\ndbscan.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\nimport numpy as np\nimport sklearn.cluster\nfrom scipy import spatial\n\ndef dbscandepth(neigh, minp):\n    ilabel = 0\n    labels = [-1 for _ in neigh]  # initialized as noise\n    for i in range(len(neigh)):\n        if labels[i] >= 0 or len(neigh[i]) < minp:  # visited or noise\n            continue\n        candid = [i]\n        while len(candid) > 0:\n            i = candid.pop()\n            if len(neigh[i]) >= minp:  # core only\n                for j in neigh[i]:\n                    if labels[j] < 0:\n                        candid.append(j)\n                        labels[j] = ilabel\n        ilabel += 1\n    return labels\n\ndef dbscanbreadth(neigh, minp):\n    def expandcandid(candid):\n        candid = filter(lambda j: len(neigh[j]) >= minp, candid)  # core only\n        if candid != []:\n            candid = [neigh[j] for j in candid]\n            candid = list(set.union(*map(set, candid)))\n            candid = filter(lambda j: labels[j] < 0, candid)\n        return candid\n    ilabel = 0\n    labels = [-1 for _ in neigh]  # initialized as noise\n    for i, candid in enumerate(neigh):\n        if labels[i] >= 0 or len(candid) < minp:  # visited or noise\n            continue\n        while len(candid) > 0:\n            candid = expandcandid(candid)\n            for j in candid:\n                labels[j] = ilabel\n        ilabel += 1\n    return labels\n\ndef main():\n    minp = 4\n    radius = 0.1\n    points = np.random.uniform(size=(100,2))\n    labels_sklearn = list(sklearn.cluster.DBSCAN(radius, minp).fit(points).labels_  # scikit-learn\n\n    tree = spatial.cKDTree(points)\n    neigh = [tree.query_ball_point(p, radius) for p in points]  # \u8fd1\u508d\u63a2\u7d22\n\n    labels = dbscandepth(neigh, minp)\n    print(labels == labels_sklearn, \": depth first\")\n    labels = dbscanbreadth(neigh, minp)\n    print(labels == labels_sklearn, \": breadth first\")\n    return 0\n\nif __name__ == '__main__':\n    main()\n\n\n\n\n\n\n\n\u3053\u3053\u306b\u3082\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\uff1a\"DBSCAN Blues\"\u00a0\u21a9\n\n\n\u30bd\u30fc\u30b9\u306f _dbscan_inner.pyx \u3068 dbscan_.py\u00a0\u21a9\n\n\n\n\u3053\u3093\u306b\u3061\u306f\u3002\n[DBSCAN](http://en.wikipedia.org/wiki/DBSCAN)\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u306f[^1]\u3001\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u306e\u4e00\u7a2e\u3067\u3001\u8fd1\u508d\u63a2\u7d22\uff08[\u4f8b](http://qiita.com/kkdd/items/c0fadee57b03f9f08d22)\uff09\u3068[\u7d20\u96c6\u5408\u30c7\u30fc\u30bf\u69cb\u9020](https://ja.wikipedia.org/wiki/\u7d20\u96c6\u5408\u30c7\u30fc\u30bf\u69cb\u9020)\u6cd5\u3068\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u57fa\u3065\u3044\u3066\u3044\u307e\u3059\u3002\n\n\u81ea\u5206\u3067\u3082\u3001scikit-learn\u306e\u30bd\u30fc\u30b9[^2]\u3092\u8aad\u307f\u3001\u307b\u307c\u5f15\u304d\u5199\u3057\u3067 DBSCAN\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff08depth-first\u578b\u3068breadth-first\u578b\u306e\u4e8c\u7a2e\uff09\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5ff5\u306e\u305f\u3081scikit-learn\u306b\u3088\u308b\u7d50\u679c\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u691c\u7b97\u3057\u307e\u3057\u305f\u3002\n\n```console\n$ ./dbscan.py\nTrue : depth-first\nTrue : breadth-first\n```\n\n```dbscan.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom __future__ import print_function\nimport numpy as np\nimport sklearn.cluster\nfrom scipy import spatial\n\ndef dbscandepth(neigh, minp):\n    ilabel = 0\n    labels = [-1 for _ in neigh]  # initialized as noise\n    for i in range(len(neigh)):\n        if labels[i] >= 0 or len(neigh[i]) < minp:  # visited or noise\n            continue\n        candid = [i]\n        while len(candid) > 0:\n            i = candid.pop()\n            if len(neigh[i]) >= minp:  # core only\n                for j in neigh[i]:\n                    if labels[j] < 0:\n                        candid.append(j)\n                        labels[j] = ilabel\n        ilabel += 1\n    return labels\n\ndef dbscanbreadth(neigh, minp):\n    def expandcandid(candid):\n        candid = filter(lambda j: len(neigh[j]) >= minp, candid)  # core only\n        if candid != []:\n            candid = [neigh[j] for j in candid]\n            candid = list(set.union(*map(set, candid)))\n            candid = filter(lambda j: labels[j] < 0, candid)\n        return candid\n    ilabel = 0\n    labels = [-1 for _ in neigh]  # initialized as noise\n    for i, candid in enumerate(neigh):\n        if labels[i] >= 0 or len(candid) < minp:  # visited or noise\n            continue\n        while len(candid) > 0:\n            candid = expandcandid(candid)\n            for j in candid:\n                labels[j] = ilabel\n        ilabel += 1\n    return labels\n\ndef main():\n    minp = 4\n    radius = 0.1\n    points = np.random.uniform(size=(100,2))\n    labels_sklearn = list(sklearn.cluster.DBSCAN(radius, minp).fit(points).labels_  # scikit-learn\n\n    tree = spatial.cKDTree(points)\n    neigh = [tree.query_ball_point(p, radius) for p in points]  # \u8fd1\u508d\u63a2\u7d22\n\n    labels = dbscandepth(neigh, minp)\n    print(labels == labels_sklearn, \": depth first\")\n    labels = dbscanbreadth(neigh, minp)\n    print(labels == labels_sklearn, \": breadth first\")\n    return 0\n\nif __name__ == '__main__':\n    main()\n```\n\n-------\n[^1]: \u3053\u3053\u306b\u3082\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\uff1a\"[DBSCAN Blues](http://cjauvin.blogspot.ca/2014/06/dbscan-blues.html)\"\n[^2]: \u30bd\u30fc\u30b9\u306f [_dbscan_inner.pyx](https://github.com/scikit-learn/scikit-learn/blob/master/sklearn/cluster/_dbscan_inner.pyx) \u3068 [dbscan_.py](https://github.com/scikit-learn/scikit-learn/blob/21e63aaf01404f4eb3e7ae54ef9f71e8bb905f6b/sklearn/cluster/dbscan_.py)\n", "tags": ["clustering", "scikit-learn", "Python"]}