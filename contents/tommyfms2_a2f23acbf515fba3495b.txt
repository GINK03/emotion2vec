{"context": "\n\n\u306f\u3058\u3081\u306b\nchainer\u304c1.11.0\u306b\u306a\u3063\u3066\u304b\u3089\u7d50\u69cb\u5909\u308f\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u81ea\u5206\u306a\u308a\u306e\u7406\u89e3\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3067\u304d\u308b\u3060\u3051\u3001\u521d\u3081\u3066python\u3068chainer\u3092\u3084\u3063\u3066\u307f\u308b\u4eba\u306b\u3082\u5206\u304b\u308b\u3088\u3046\u3057\u307e\u3059(\u3064\u3082\u308a\u3067\u3059)\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3053\n\u30b5\u30f3\u30d7\u30eb\u306e\u4e2d\u306etrain_mnist.py\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\nMNIST\nmnist\u3068\u306f28x28\u306e\u30b5\u30a4\u30ba\u306e\u6570\u5b57\u304c\u66f8\u304b\u308c\u305f\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u3067\u5165\u9580\u7528\u3068\u3057\u3066\u3088\u304f\u4f7f\u308f\u308c\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\nclass MLP(chainer.Chain):\n    def __init__(self, n_in, n_units, n_out):\n        super(MLP, self).__init__(\n            l1=L.Linear(n_in, n_units),\n            l2=L.Linear(n_units, n_units), \n            l3=L.Linear(n_units, n_out), \n        )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9a\u7fa9\u3067\u306f__init__\u306e\u65b9\u3067\u3001\u4f7f\u3046\u5c64\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\u4eca\u56de\u306f\u3001\n * \u5165\u529b\u304cn_in\u3001\u51fa\u529b\u304cn_units\u306e\u5168\u7d50\u5408\u5c64 l1\n * \u5165\u529b\u304cn_units\u3001\u51fa\u529b\u304cn_units\u306e\u5168\u7d50\u5408\u5c64 l2\n * \u5165\u529b\u304cn_units\u3001\u51fa\u529b\u304cn_outs\u306e\u5168\u7d50\u5408\u5c64 l3\n__call__\u3067\u306f\u3001\u5177\u4f53\u7684\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u8a18\u8ff0\u3059\u308b\u3002\n\u4eca\u56de\u306f\u3001l1\u3068l2\u306e\u51fa\u529b\u306brelu\u3068\u3044\u3046\u6d3b\u6027\u5316\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\n\nParser\n\u4e00\u5fdcparser\u306e\u3053\u3068\u3082\n    parser = argparse.ArgumentParser(description='Chainer example: MNIST')\n    parser.add_argument('--batchsize', '-b', type=int, default=100,\n                help='Number of images in each mini-batch')\n    parser.add_argument('--epoch', '-e', type=int, default=20,\n                help='Number of sweeps over the dataset to train')\n    parser.add_argument('--gpu', '-g', type=int, default=-1,\n                help='GPU ID (negative value indicates CPU)')\n    parser.add_argument('--out', '-o', default='result',\n                help='Directory to output the result')\n    parser.add_argument('--resume', '-r', default='',\n                help='Resume the training from snapshot')\n    parser.add_argument('--unit', '-u', type=int, default=1000,\n                help='Number of units')\n    args = parser.parse_args()\n\n    print('GPU: {}'.format(args.gpu))\n    print('# unit: {}'.format(args.unit))\n    print('# Minibatch-size: {}'.format(args.batchsize))\n    print('# epoch: {}'.format(args.epoch))\n    print('')\n\nparser\u306fpython\u3092\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u8a2d\u5b9a\u3057\u3084\u3059\u304f\u3057\u3066\u304f\u308c\u308b\u4fbf\u5229\u306a\u3084\u3064\u3067\u3059\u3002\n\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u884c\u3059\u308b\u3068\n> $ python train_mnist.py -g 0 -u 100\nGPU: 0\n# unit: 100\n# Minibatch-size: 100\n# epoch: 20\n\n\u3068\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u6307\u5b9a\u3057\u3066\u306a\u3044epoch\u306a\u3069\u306f\u3001default\u3067\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u5024\u306b\u306a\u308a\u307e\u3059\u3002\n\u81ea\u5206\u3067\u8ffd\u52a0\u3057\u305f\u3044\u3068\u304d\u306f\nadd_argument('\u5f8c\u3067\u547c\u3076\u305f\u3081\u306e\u540d\u524d', '-\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u306e\u6307\u5b9a\u65b9\u6cd5', \u6570\u5b57\u306a\u3089type=int, \u6307\u5b9a\u306e\u306a\u304b\u3063\u305f\u5834\u5408\u306edefault\u5024)\n\n\u306e\u3088\u3046\u306a\u5f62\u3067\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\nchainer\u3067\u306ftrain\u30c7\u30fc\u30bf\u3068\u3001test\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u307e\u3059\u3002\ntrain, test = chainer.datasets.get_mnist()\n\n\u3053\u308c\u306fmnist\u3067\u4f7f\u308f\u308c\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u3063\u3066\u304d\u3066train\u3068test\u306b\u5165\u308c\u3066\u308b\u3060\u3051\u3067\u3059\u3002\n\u306a\u304b\u304c\u3069\u3093\u306a\u30ab\u30bf\u30c1\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u4e00\u3064\u306e\u884c\uff08train[0]\uff09\u306b\n[[.234809284, .324039284, .34809382 \u2026. .04843098], 3]\n\u3068\u3044\u3046\u3088\u3046\u306b\u3001\u5de6\u306b\u5165\u529b\u5024\u3068\u53f3\u306b\u305d\u306e\u7b54\u3048(\u30e9\u30d9\u30eb\u5024)\u304c\u30bb\u30c3\u30c8\u3067\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001chainer\u3067\u306ftrain\u3067\u5b66\u7fd2\u3057\u3066\u3001test\u3067\u8a66\u3057\u3066\u307f\u3066\u6b63\u89e3\u7387\u3092\u898b\u3066\u3044\u304f\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\n\u5f93\u6765\u3067\u306f\u81ea\u5206\u3067for\u5206\u3092\u7528\u610f\u3057\u3066\u4f55\u56de\u3082\u56de\u3057\u3066\u5b66\u7fd2\u3055\u305b\u3066\u3068\u3084\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u30011.11.0\u304b\u3089\u306f\u4e0a\u306e train \u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u3092\u5165\u308c\u3066\u304a\u3044\u3066\u3001\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3068\u8a00\u3063\u3066\u3042\u3052\u308c\u3070for\u5206\u3092\u66f8\u304f\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\ntrain_iter = chainer.iterators.SerialIterator(train, args.batchsize)\ntest_iter = chainer.iterators.SerialIterator(test, args.batchsize,\n                                                 repeat=False, shuffle=False)\n\n\u3082\u3046\u3053\u308c\u3067\u3044\u3044\u3089\u3057\u3044\u3002\u304a\u307e\u3058\u306a\u3044\u611f\u3042\u308b\n\nTrainer\ntrainer\u3068\u3044\u3046\u3082\u306e\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3053\u308c\u304c\u3082\u3046\u307b\u307c\u307b\u307c\u52dd\u624b\u306b\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u304f\u308c\u308b\u305d\u3046\u3002\n\u554f\u984c\u96c6\u3068\u7b54\u3048\u3092\u5bb6\u5ead\u6559\u5e2b\u306b\u6e21\u3057\u3066\u3001\u5b50\u4f9b\u3092\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\u7684\u306a\n\u81ea\u5206\u3067\u52c9\u5f37\u3092\u6559\u3048\u3066\u305f\u306e\u3092\u3001\u5bb6\u5ead\u6559\u5e2b\u306b\u4efb\u305b\u308b\u30a4\u30e1\u30fc\u30b8(\u5408\u3063\u3066\u3044\u308b\u304b\u306f\u308f\u304b\u3089\u306a\u3044)\n\u307e\u305a\u3001trainer\u3092\u8a2d\u5b9a\u3059\u308b\u3002\nupdater = training.StandardUpdater(train_iter, optimizer, device=args.gpu)\ntrainer = training.Trainer(updater, (args.epoch, 'epoch'),\n\n\u3053\u306e train_iter (\u554f\u984c\u96c6)\u3092\u4f7f\u3063\u3066\u3001\u3053\u306e optimizer (\u52c9\u5f37\u65b9\u6cd5)\u3067\u6700\u9069\u5316\u3057\u3066\u3082\u3089\u3063\u3066\u3001\n\u305d\u308c\u3092 _epoch _ (\u4f55\u5468)\u56de\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4ee5\u4e0b\u306b\u3064\u3044\u3066\u306f\u5fc5\u305a\u3057\u3082\u5fc5\u8981\u306a\u308f\u3051\u3067\u306f\u306a\u3044\u3082\u306e\u3082\u3042\u308b\u3002\ntrainer.extend(extensions.Evaluator(test_iter, model, device=args.gpu))\n    # \u3053\u308c\u306f\u3044\u308b\u3002test_iter\u3092\u4f7f\u3063\u3066epoch\u3054\u3068\u306b\u8a55\u4fa1\u3057\u3066\u308b\uff08\u3068\u601d\u3046\uff09\ntrainer.extend(extensions.dump_graph('main/loss'))\n    # \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5f62\u3092\u30b0\u30e9\u30d5\u3067\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306bdot\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b\u3002\ntrainer.extend(extensions.snapshot(), trigger=(args.epoch, 'epoch'))\n    # epoch\u3054\u3068\u306etrainer\u306e\u60c5\u5831\u3092\u4fdd\u5b58\u3059\u308b\u3002\u305d\u308c\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u9014\u4e2d\u304b\u3089\u518d\u958b\u306a\u3069\u304c\u3067\u304d\u308b\u3002\u3053\u308c\u3051\u3059\u3068\u7d50\u69cb\u65e9\u304f\u306a\u3063\u305f\u308a\u3057\u305f\uff1f\ntrainer.extend(extensions.LogReport())\n    # epoch\u3054\u3068\u306blog\u3092\u3060\u3059\ntrainer.extend(extensions.PrintReport(\n        ['epoch', 'main/loss', 'validation/main/loss',\n         'main/accuracy', 'validation/main/accuracy']))\n    # log\u3067\u51fa\u3059\u60c5\u5831\u3092\u6307\u5b9a\u3059\u308b\u3002\ntrainer.extend(extensions.ProgressBar())\n    # \u4eca\u5168\u4f53\u3068\u3001epoch\u3054\u3068\u3067\u3069\u306e\u3050\u3089\u3044\u9032\u3093\u3067\u3044\u308b\u304b\u3092\u6559\u3048\u3066\u304f\u308c\u308b\u3002\n\ntrainer.run()\n    # trainer\u3092\u3044\u308d\u3044\u308d\u8a2d\u5b9a\u3057\u305f\u5f8c\u3001\u3053\u308c\u3092\u3084\u3063\u3066\u5b9f\u969b\u306b\u5b9f\u884c\u3059\u308b\u3002\u3053\u308c\u306f\u5fc5\u9808\n\n\nmain/loss\u306f\u7b54\u3048\u3068\u306e\u5dee\u306e\u5927\u304d\u3055\u3002\nmian/accuracy\u306f\u6b63\u89e3\u7387\u3002\nvalidation/main/accuracy\u304c\u4f55\u3092\u6307\u3057\u3066\u3044\u308b\u304b\u306f\u3001\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3002(\u8ab0\u304b\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u3044\u305f\u3060\u3051\u308b\u3068...)\n\u306a\u3093\u3067\u3053\u3053\u8aac\u660e\u3057\u3066\u3001\u3042\u305d\u3053\u8aac\u660e\u3057\u306a\u3044\u306e\u3068\u304b\u306b\u306a\u308b\u3068\u601d\u3046\u3051\u3069\u305d\u308c\u306f\u307e\u3060\u826f\u304f\u308f\u304b\u3063\u3066\u7121\u3044\u304b\u3089\u3060\u3063\u305f\u308a\n\u5b9f\u969b\u306b\u3069\u3046\u5f04\u3063\u305f\u304b\u306a\u3069\u306f\u3001\u307e\u3060\u4e0a\u3052\u308b\u4e88\u5b9a\u3067\u3059\u3002\n#\u306f\u3058\u3081\u306b\nchainer\u304c1.11.0\u306b\u306a\u3063\u3066\u304b\u3089\u7d50\u69cb\u5909\u308f\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u81ea\u5206\u306a\u308a\u306e\u7406\u89e3\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3067\u304d\u308b\u3060\u3051\u3001\u521d\u3081\u3066python\u3068chainer\u3092\u3084\u3063\u3066\u307f\u308b\u4eba\u306b\u3082\u5206\u304b\u308b\u3088\u3046\u3057\u307e\u3059(\u3064\u3082\u308a\u3067\u3059)\u3002\n\n\u30b3\u30fc\u30c9\u306f<a href=\"https://github.com/pfnet/chainer/blob/master/examples/mnist/train_mnist.py\">\u3053\u3053</a>\n\u30b5\u30f3\u30d7\u30eb\u306e\u4e2d\u306etrain_mnist.py\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\n#MNIST\nmnist\u3068\u306f28x28\u306e\u30b5\u30a4\u30ba\u306e\u6570\u5b57\u304c\u66f8\u304b\u308c\u305f\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3059\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u3067\u5165\u9580\u7528\u3068\u3057\u3066\u3088\u304f\u4f7f\u308f\u308c\u308b\u3082\u306e\u3067\u3059\u3002\n\n#\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n\n```python\nclass MLP(chainer.Chain):\n    def __init__(self, n_in, n_units, n_out):\n        super(MLP, self).__init__(\n            l1=L.Linear(n_in, n_units),\n            l2=L.Linear(n_units, n_units), \n            l3=L.Linear(n_units, n_out), \n        )\n \n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n```\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9a\u7fa9\u3067\u306f\\_\\_init\\_\\_\u306e\u65b9\u3067\u3001\u4f7f\u3046\u5c64\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\u4eca\u56de\u306f\u3001\n * \u5165\u529b\u304c_n_in_\u3001\u51fa\u529b\u304c_n_units_\u306e\u5168\u7d50\u5408\u5c64 l1\n * \u5165\u529b\u304c_n_units_\u3001\u51fa\u529b\u304c_n_units_\u306e\u5168\u7d50\u5408\u5c64 l2\n * \u5165\u529b\u304c_n_units_\u3001\u51fa\u529b\u304c_n_outs_\u306e\u5168\u7d50\u5408\u5c64 l3\n\n\\_\\_call\\_\\_\u3067\u306f\u3001\u5177\u4f53\u7684\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u8a18\u8ff0\u3059\u308b\u3002\n\u4eca\u56de\u306f\u3001l1\u3068l2\u306e\u51fa\u529b\u306b_relu_\u3068\u3044\u3046\u6d3b\u6027\u5316\u95a2\u6570\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\n\n#Parser\n\u4e00\u5fdcparser\u306e\u3053\u3068\u3082\n\n```python\n    parser = argparse.ArgumentParser(description='Chainer example: MNIST')\n    parser.add_argument('--batchsize', '-b', type=int, default=100,\n                help='Number of images in each mini-batch')\n    parser.add_argument('--epoch', '-e', type=int, default=20,\n                help='Number of sweeps over the dataset to train')\n    parser.add_argument('--gpu', '-g', type=int, default=-1,\n                help='GPU ID (negative value indicates CPU)')\n    parser.add_argument('--out', '-o', default='result',\n                help='Directory to output the result')\n    parser.add_argument('--resume', '-r', default='',\n                help='Resume the training from snapshot')\n    parser.add_argument('--unit', '-u', type=int, default=1000,\n                help='Number of units')\n    args = parser.parse_args()\n \n    print('GPU: {}'.format(args.gpu))\n    print('# unit: {}'.format(args.unit))\n    print('# Minibatch-size: {}'.format(args.batchsize))\n    print('# epoch: {}'.format(args.epoch))\n    print('')\n```\nparser\u306fpython\u3092\u30b3\u30de\u30f3\u30c9\u3067\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u8a2d\u5b9a\u3057\u3084\u3059\u304f\u3057\u3066\u304f\u308c\u308b\u4fbf\u5229\u306a\u3084\u3064\u3067\u3059\u3002\n\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u884c\u3059\u308b\u3068\n\n```bash\n> $ python train_mnist.py -g 0 -u 100\nGPU: 0\n# unit: 100\n# Minibatch-size: 100\n# epoch: 20\n```\n\n\u3068\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u6307\u5b9a\u3057\u3066\u306a\u3044epoch\u306a\u3069\u306f\u3001_default_\u3067\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u308b\u5024\u306b\u306a\u308a\u307e\u3059\u3002\n\u81ea\u5206\u3067\u8ffd\u52a0\u3057\u305f\u3044\u3068\u304d\u306f\n\n```python\nadd_argument('\u5f8c\u3067\u547c\u3076\u305f\u3081\u306e\u540d\u524d', '-\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u306e\u6307\u5b9a\u65b9\u6cd5', \u6570\u5b57\u306a\u3089type=int, \u6307\u5b9a\u306e\u306a\u304b\u3063\u305f\u5834\u5408\u306edefault\u5024)\n```\n\u306e\u3088\u3046\u306a\u5f62\u3067\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n\n#\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\nchainer\u3067\u306ftrain\u30c7\u30fc\u30bf\u3068\u3001test\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```python\ntrain, test = chainer.datasets.get_mnist()\n```\n\n\u3053\u308c\u306fmnist\u3067\u4f7f\u308f\u308c\u308b\u30c7\u30fc\u30bf\u3092\u53d6\u3063\u3066\u304d\u3066train\u3068test\u306b\u5165\u308c\u3066\u308b\u3060\u3051\u3067\u3059\u3002\n\u306a\u304b\u304c\u3069\u3093\u306a\u30ab\u30bf\u30c1\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u4e00\u3064\u306e\u884c\uff08train[0]\uff09\u306b\n[[.234809284, .324039284, .34809382 \u2026. .04843098], 3]\n\u3068\u3044\u3046\u3088\u3046\u306b\u3001\u5de6\u306b\u5165\u529b\u5024\u3068\u53f3\u306b\u305d\u306e\u7b54\u3048(\u30e9\u30d9\u30eb\u5024)\u304c\u30bb\u30c3\u30c8\u3067\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001chainer\u3067\u306ftrain\u3067\u5b66\u7fd2\u3057\u3066\u3001test\u3067\u8a66\u3057\u3066\u307f\u3066\u6b63\u89e3\u7387\u3092\u898b\u3066\u3044\u304f\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n#\u30a4\u30c6\u30ec\u30fc\u30bf\n\u5f93\u6765\u3067\u306f\u81ea\u5206\u3067for\u5206\u3092\u7528\u610f\u3057\u3066\u4f55\u56de\u3082\u56de\u3057\u3066\u5b66\u7fd2\u3055\u305b\u3066\u3068\u3084\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u30011.11.0\u304b\u3089\u306f\u4e0a\u306e _train_ \u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u3092\u5165\u308c\u3066\u304a\u3044\u3066\u3001\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3068\u8a00\u3063\u3066\u3042\u3052\u308c\u3070for\u5206\u3092\u66f8\u304f\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```python\ntrain_iter = chainer.iterators.SerialIterator(train, args.batchsize)\ntest_iter = chainer.iterators.SerialIterator(test, args.batchsize,\n                                                 repeat=False, shuffle=False)\n```\n\u3082\u3046\u3053\u308c\u3067\u3044\u3044\u3089\u3057\u3044\u3002\u304a\u307e\u3058\u306a\u3044\u611f\u3042\u308b\n\n#Trainer\ntrainer\u3068\u3044\u3046\u3082\u306e\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3053\u308c\u304c\u3082\u3046\u307b\u307c\u307b\u307c\u52dd\u624b\u306b\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u304f\u308c\u308b\u305d\u3046\u3002\n\u554f\u984c\u96c6\u3068\u7b54\u3048\u3092\u5bb6\u5ead\u6559\u5e2b\u306b\u6e21\u3057\u3066\u3001\u5b50\u4f9b\u3092\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\u7684\u306a\n\u81ea\u5206\u3067\u52c9\u5f37\u3092\u6559\u3048\u3066\u305f\u306e\u3092\u3001\u5bb6\u5ead\u6559\u5e2b\u306b\u4efb\u305b\u308b\u30a4\u30e1\u30fc\u30b8(\u5408\u3063\u3066\u3044\u308b\u304b\u306f\u308f\u304b\u3089\u306a\u3044)\n\n\u307e\u305a\u3001trainer\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n```python\nupdater = training.StandardUpdater(train_iter, optimizer, device=args.gpu)\ntrainer = training.Trainer(updater, (args.epoch, 'epoch'),\n```\n\u3053\u306e _train_iter_ (\u554f\u984c\u96c6)\u3092\u4f7f\u3063\u3066\u3001\u3053\u306e _optimizer_ (\u52c9\u5f37\u65b9\u6cd5)\u3067\u6700\u9069\u5316\u3057\u3066\u3082\u3089\u3063\u3066\u3001\n\u305d\u308c\u3092 _epoch _ (\u4f55\u5468)\u56de\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4ee5\u4e0b\u306b\u3064\u3044\u3066\u306f\u5fc5\u305a\u3057\u3082\u5fc5\u8981\u306a\u308f\u3051\u3067\u306f\u306a\u3044\u3082\u306e\u3082\u3042\u308b\u3002\n\n```python\ntrainer.extend(extensions.Evaluator(test_iter, model, device=args.gpu))\n    # \u3053\u308c\u306f\u3044\u308b\u3002test_iter\u3092\u4f7f\u3063\u3066epoch\u3054\u3068\u306b\u8a55\u4fa1\u3057\u3066\u308b\uff08\u3068\u601d\u3046\uff09\ntrainer.extend(extensions.dump_graph('main/loss'))\n    # \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5f62\u3092\u30b0\u30e9\u30d5\u3067\u8868\u793a\u3067\u304d\u308b\u3088\u3046\u306bdot\u5f62\u5f0f\u3067\u4fdd\u5b58\u3059\u308b\u3002\ntrainer.extend(extensions.snapshot(), trigger=(args.epoch, 'epoch'))\n    # epoch\u3054\u3068\u306etrainer\u306e\u60c5\u5831\u3092\u4fdd\u5b58\u3059\u308b\u3002\u305d\u308c\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u9014\u4e2d\u304b\u3089\u518d\u958b\u306a\u3069\u304c\u3067\u304d\u308b\u3002\u3053\u308c\u3051\u3059\u3068\u7d50\u69cb\u65e9\u304f\u306a\u3063\u305f\u308a\u3057\u305f\uff1f\ntrainer.extend(extensions.LogReport())\n    # epoch\u3054\u3068\u306blog\u3092\u3060\u3059\ntrainer.extend(extensions.PrintReport(\n        ['epoch', 'main/loss', 'validation/main/loss',\n         'main/accuracy', 'validation/main/accuracy']))\n    # log\u3067\u51fa\u3059\u60c5\u5831\u3092\u6307\u5b9a\u3059\u308b\u3002\ntrainer.extend(extensions.ProgressBar())\n    # \u4eca\u5168\u4f53\u3068\u3001epoch\u3054\u3068\u3067\u3069\u306e\u3050\u3089\u3044\u9032\u3093\u3067\u3044\u308b\u304b\u3092\u6559\u3048\u3066\u304f\u308c\u308b\u3002\n \ntrainer.run()\n    # trainer\u3092\u3044\u308d\u3044\u308d\u8a2d\u5b9a\u3057\u305f\u5f8c\u3001\u3053\u308c\u3092\u3084\u3063\u3066\u5b9f\u969b\u306b\u5b9f\u884c\u3059\u308b\u3002\u3053\u308c\u306f\u5fc5\u9808\n\n```\n\n_main/loss_\u306f\u7b54\u3048\u3068\u306e\u5dee\u306e\u5927\u304d\u3055\u3002\n_mian/accuracy_\u306f\u6b63\u89e3\u7387\u3002\nvalidation/main/accuracy\u304c\u4f55\u3092\u6307\u3057\u3066\u3044\u308b\u304b\u306f\u3001\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3002(\u8ab0\u304b\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u3044\u305f\u3060\u3051\u308b\u3068...)\n\n\n\u306a\u3093\u3067\u3053\u3053\u8aac\u660e\u3057\u3066\u3001\u3042\u305d\u3053\u8aac\u660e\u3057\u306a\u3044\u306e\u3068\u304b\u306b\u306a\u308b\u3068\u601d\u3046\u3051\u3069\u305d\u308c\u306f\u307e\u3060\u826f\u304f\u308f\u304b\u3063\u3066\u7121\u3044\u304b\u3089\u3060\u3063\u305f\u308a\n \n\u5b9f\u969b\u306b\u3069\u3046\u5f04\u3063\u305f\u304b\u306a\u3069\u306f\u3001\u307e\u3060\u4e0a\u3052\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n\n", "tags": ["Chainer", "MNIST", "Python"]}