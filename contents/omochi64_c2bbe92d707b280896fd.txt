{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f\u30ec\u30a4\u30c8\u30ec\u5408\u5bbf2\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u306e\u4e94\u9031\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u305d\u3057\u3066 Bounding Volume Hierarchy (BVH) \u306e\u5b9f\u88c5 - \u69cb\u7bc9\u7de8 \u306e\u7d9a\u304d\u306b\u3082\u306a\u308a\u307e\u3059\u3002\n\u69cb\u7bc9\u7de8\u3092\u66f8\u3044\u305f\u306e\u304c\u53bb\u5e74\u306e12\u6708\u306a\u306e\u3067\u3001\u3086\u3046\u306b\u534a\u5e74\u4ee5\u4e0a\u7d4c\u3063\u3066\u3088\u3046\u3084\u304f\u8a18\u4e8b\u304c\u5b8c\u6210\u3059\u308b\u5f62\u306b\u2026\n\u69cb\u7bc9\u7de8\u306e\u7d9a\u304d\u3068\u306a\u308b\u306e\u3067\u3001\u69cb\u7bc9\u7de8\u3092\u8aad\u3093\u3067\u304a\u3089\u308c\u306a\u3044\u65b9\u306f\u69cb\u7bc9\u7de8\u304b\u3089\u3069\u3046\u305e\u3002\n\nBVH \u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306e\u4ea4\u5dee\u5224\u5b9a\n\u65e9\u901f\u30bf\u30a4\u30c8\u30eb\u3068\u9055\u3046\u3053\u3068\u3092\u8a00\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u5168\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u7dcf\u5f53\u305f\u308a\u3057\u3066\u30c1\u30a7\u30c3\u30af\u3059\u308b\u65b9\u6cd5\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\u3053\u308c\u306b\u95a2\u3057\u3066\u306f\u30b3\u30fc\u30c9\u3092\u793a\u3057\u3066\u3057\u307e\u3063\u305f\u307b\u3046\u304c\u304a\u305d\u3089\u304f\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\nint Intersect(const Vector<Triangle *> &polygons, const Ray ray) {\n    for (int i=0; i<polygons.size(); i++) {\n        Triangle *polygon = polygons[i];\n        if (polygon->Intersect(ray)) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n\n\u305f\u3063\u305f\u3053\u308c\u3060\u3051\u3067\u3059\u3002\u5168\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u5bfe\u3057\u3066\u3001\u30ec\u30a4\u304c\u5f53\u305f\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\uff08\u30dd\u30ea\u30b4\u30f3\u3068\u30ec\u30a4\u306e\u4ea4\u5dee\u5224\u5b9a\u306b\u95a2\u3057\u3066\u306f\u3001\u30ec\u30a4\u30c8\u30ec\u5408\u5bbf2\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc1\u9031\u76ee\u306e\u3001\u30ec\u30a4\u3068\u306e\u4ea4\u5dee\u5224\u5b9a \u7b49\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3001M\u00f6ller\u2013Trumbore intersection algorithm \u304c\u30b7\u30f3\u30d7\u30eb\u304b\u3064\u9ad8\u901f\u3067\u826f\u3044\u3067\u3059\u3002\nhttp://shikousakugo.wordpress.com/2012/07/01/ray-intersection-3/ \u306a\u3069\u3082\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\uff09\n\u3053\u3093\u306a\u306b\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u6ec5\u8336\u82e6\u8336\u91cd\u3044\u3067\u3059\u3002\n\u7279\u306b\u3001\u300c\u30ec\u30a4\u304c\u3001\u30dd\u30ea\u30b4\u30f3\u304c\u69cb\u6210\u3057\u3066\u3044\u308b\u30e2\u30c7\u30eb\u3068\u306f\u660e\u5f8c\u65e5\u306e\u65b9\u5411\u3092\u5411\u3044\u3066\u3044\u308b\u300d\u5834\u5408\u306b\u3082\u5168\u3066\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u30e0\u30c0\u6975\u307e\u308a\u306a\u3044\u3067\u3059\u3002\nBVH \u3092\u4f7f\u3048\u3070\u3001\u305d\u306e\u3088\u3046\u306a\u5834\u5408\u3067\u3082\u30ec\u30a4\u3068AABB1\u56de\u306e\u4ea4\u5dee\u5224\u5b9a\u3060\u3051\u3067\u6e08\u307f\u307e\u3059\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u524d\u7f6e\u304d\u306f\u7d42\u308f\u308a\u306b\u3057\u3066 BVH \u3092\u7528\u3044\u305f\u4ea4\u5dee\u5224\u5b9a\u306b\u5165\u308a\u307e\u3059\u3002\n\nBVH \u3092\u4f7f\u3063\u305f\u4ea4\u5dee\u5224\u5b9a\nBVH \u3092\u4f7f\u3063\u305f\u4ea4\u5dee\u5224\u5b9a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6d41\u308c\u306b\u306a\u308a\u307e\u3059\u3002\nBVH_node \u306e\u69cb\u9020\u306f\u3001\u69cb\u7bc9\u7de8\u3067\u7528\u3044\u305f\u3082\u306e\u3068\u540c\u3058\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\nstruct IntersectInformation {\n  float normal[3];\n  float distance;\n};\n\nTriangle * Intersect(BVH_node *nodes, int index, const Ray &ray, IntersectInformation &info) {\n    \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u30ce\u30fc\u30c9 = nodes[index];\n\n    if (\u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u30ce\u30fc\u30c9\u306eAABB\u3068ray\u306e\u4ea4\u5dee\u5224\u5b9a) {\n       // \u4ea4\u5dee\u3057\u3066\u3044\u308b\n       if (\u5bfe\u8c61\u30ce\u30fc\u30c9\u306f\u4e2d\u9593\u30ce\u30fc\u30c9\uff1f) {\n          // \u4e2d\u9593\u30ce\u30fc\u30c9\u306a\u306e\u3067\u3001\u3055\u3089\u306b\u5b50\u3092\u8abf\u3079\u308b\n          int result1 = Intersect(nodes, \u5b50\u30ce\u30fc\u30c91, ray, info);\n          int result2 = Intersect(nodes, \u5b50\u30ce\u30fc\u30c92, ray, info);\n          return result1 \u3068 result2 \u306e\u3046\u3061\u3001ray \u306e\u59cb\u70b9\u306b\u8fd1\u3044\u65b9;\n       } else {\n          return \u30ce\u30fc\u30c9\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306ePolygon\u3068ray\u306e\u4ea4\u5dee\u5224\u5b9a\u7d50\u679c (\u8a73\u7d30\u306f o_info \u306b\u5165\u308c\u308b);\n       }\n    } else {\n       // \u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\n       // \u2192 \u73fe\u5728\u306e\u30ce\u30fc\u30c9\u306e\u5b50\u30ce\u30fc\u30c9\u306f\u3001\u5168\u3066\u73fe\u5728\u306e\u30ce\u30fc\u30c9\u306eAABB\u306b\u5185\u5305\u3055\u308c\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u63a2\u7d22\u3092\u6253\u3061\u5207\u3063\u3066\u826f\u3044\n       return -1;\n    }\n}\n\n...\n\n// intersectId \u306b\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eId\u304c\u5165\u3063\u3066\u3044\u308b\nint intresectId = Intersect(rootNode, 0, ray);\n\n\nIntersectInformation \u306f\u3001\u4ea4\u5dee\u5224\u5b9a\u306e\u8a73\u7d30\u7d50\u679c\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u4ea4\u5dee\u3057\u305f\u30dd\u30ea\u30b4\u30f3\u306e\u6cd5\u7dda\u3068\u3001\u30ec\u30a4\u304b\u3089\u4ea4\u5dee\u3057\u305f\u5730\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u793a\u3057\u307e\u3059\u3002\n\u3053\u306e\u4ea4\u5dee\u5224\u5b9a\u306e\u30dd\u30a4\u30f3\u30c8\u306f4\u3064\u3067\u3059\n\nBVH \u306e\u5404\u30ce\u30fc\u30c9\u306e AABB \u3068 ray \u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u884c\u3046\n\u4e2d\u9593\u30ce\u30fc\u30c9\u306e\u5834\u5408\u3001\u3055\u3089\u306b\u5b50\u306b\u3064\u3044\u3066\u518d\u5e30\u7684\u306b\u4ea4\u5dee\u5224\u5b9a\u3092\u884c\u3046\n\u672b\u7aef\u30ce\u30fc\u30c9\u306e\u5834\u5408\u3001\u30ce\u30fc\u30c9\u304c\u542b\u3080\u3059\u3079\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u3064\u3044\u3066\u4ea4\u5dee\u5224\u5b9a\u3092\u884c\u3046\nAABB \u3068 ray \u304c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u305d\u3053\u3067\u63a2\u7d22\u3092\u3084\u3081\u3001\u300c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\u300d\u3068\u3044\u3046\u7d50\u679c\u3092\u8fd4\u3059\n\n\u4f55\u6545\u3053\u306e\u6d41\u308c\u3067\u5224\u5b9a\u3067\u304d\u308b\u306e\u304b\u3001\u3068\u3044\u3046\u3053\u3068\u3082\u542b\u3081\u3066\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u8aac\u660e\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nAABB \u3068 ray \u306e\u4ea4\u5dee\u5224\u5b9a\n\u307e\u305a\u306f\u3058\u3081\u306b\u3001AABB \u3068 ray \u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u884c\u3044\u307e\u3059\uff01\u304c\u3001\u3053\u3053\u3067\u305d\u308c\u3092\u4e00\u304b\u3089\u8aac\u660e\u3057\u3066\u308b\u3068\u3059\u3054\u3044\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u539f\u7406\u306f\u7701\u7565\u2026\n\u30b2\u30fc\u30e0\u3064\u304f\u308d\u30fc\uff01 - \u305d\u306e18 \u76f4\u7dda\u3068AABB \u306a\u3069\u304c\u56f3\u4ed8\u3067\u8aac\u660e\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\u4e0a\u8a18\u306e\u30b5\u30a4\u30c8\u3067\u306f\u30012\u6b21\u5143\u5e73\u9762\u4e0a\u3067\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u56f3\u306e\u30ec\u30a4\u3068\u3057\u3066\u6319\u3052\u3066\u3044\u307e\u3059\u304c\u30013\u6b21\u5143\u7a7a\u9593\u4e0a\u3067\u3082\u3084\u308a\u65b9\u306f\u540c\u3058\u3067\u3059\u3002\n\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3002\nAABB \u306e\u8868\u73fe\u65b9\u6cd5\u306f\u3001\u69cb\u7bc9\u7de8\u3068\u540c\u3058\u65b9\u6cd5\u3092\u898b\u3066\u3044\u308b\u306e\u3067\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\nstruct Ray {\n  float org[3];  // \u30ec\u30a4\u306e\u59cb\u70b9\n  float dir[3];  // \u30ec\u30a4\u306e\u65b9\u5411\u30d9\u30af\u30c8\u30eb (\u6b63\u898f\u5316\u6e08\u307f)\n};\n\nbool IntersectAABBvsRay(float aabb[2][3], const Ray &ray) {\n  // aabb[0][0], aabb[0][1], aabb[0][2]: AABB \u306e\u6700\u5c0f\u5ea7\u6a19\u306ex,y,z\n  // aabb[1][0], aabb[1][1], aabb[1][2]: AABB \u306e\u6700\u5927\u5ea7\u6a19\u306ex,y,z\n\n  float t_max =  FLT_MAX   // AABB \u304b\u3089\u30ec\u30a4\u304c\u5916\u306b\u51fa\u308b\u6642\u523b\n  float t_min = -FLT_MAX;  // AABB \u306b\u30ec\u30a4\u304c\u4fb5\u5165\u3059\u308b\u6642\u523b\n\n  for (int i=0; i<3; i++) {\n    float t1 = (aabb[0][i] - ray.org[i])/ray.dir[i];\n    float t2 = (aabb[1][i] - ray.org[i])/ray.dir[i];\n    float t_near = std::min(t1, t2);\n    float t_far = std::max(t1, t2);\n    t_max = std::min(t_max, t_far);\n    t_min = std::max(t_min, t_near);\n\n    // \u30ec\u30a4\u304c\u5916\u306b\u51fa\u308b\u6642\u523b\u3068\u4fb5\u5165\u3059\u308b\u6642\u523b\u304c\u9006\u8ee2\u3057\u3066\u3044\u308b => \u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\n    if (t_min > t_max) return false;\n  }\n  return true;\n};\n\n\u3053\u308c\u3067 AABB \u3068\u30ec\u30a4\u306e\u4ea4\u5dee\u5224\u5b9a\u304c\u51fa\u6765\u307e\u3059\u3002\n\u4e00\u3064\u6ce8\u610f\u3059\u3079\u304d\u70b9\u306f\u3001ray.dir[i] \u3067\u5272\u308a\u7b97\u3092\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n\u4f8b\u3048\u3070 y-z \u5e73\u9762\u306b\u30ec\u30a4\u304c\u5e73\u884c\u3060\u3063\u305f\u5834\u5408\u3001ray.dir[0] \u306f 0 \u306b\u306a\u308b\u305f\u3081\u30010\u9664\u7b97\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u5b8c\u74a7\u306b0\u3058\u3083\u306a\u304f\u3066\u3082\u3001\u3082\u306e\u3059\u3054\u304f\u5024\u304c\u5c0f\u3055\u304f\u306a\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u554f\u984c\u3078\u306e\u7c21\u5358\u306a\u5bfe\u51e6\u6cd5\u306f\u3001ray.dir[i]\u304c\u3042\u307e\u308a\u306b\u5c0f\u3055\u3044\u5834\u5408\u3001\u5e73\u9762\u306b\u5e73\u884c\u3060\u3068\u307f\u306a\u3057\u3066\u3001\naabb[0][i] <= ray.org[i] <= aabb[1][i] \u306a\u3089 t_near = -FLT_MAX, t_max = FLT_MAX \u3068\u3057\u3001\n\u3053\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u306a\u3089\u3053\u306e\u8ef8\u306b\u95a2\u3057\u3066\u306f\u5f53\u305f\u3063\u3066\u3044\u306a\u3044\u3001\u3068\u307f\u306a\u3059\u65b9\u6cd5\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001\u305d\u308c\u3092\u5224\u5225\u3059\u308b\u95be\u5024\u6b21\u7b2c\u3067\u306f\u305d\u308c\u3067\u3082\u8aa4\u5224\u5b9a\u3057\u3066\u3057\u307e\u3046\u5834\u5408\u304c\u3042\u308b\u305f\u3081\u3001\u5b8c\u74a7\u306a\u65b9\u6cd5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u5b50\u30ce\u30fc\u30c9\u306e\u4ea4\u5dee\u5224\u5b9a\n\u3082\u3057\u30ce\u30fc\u30c9\u306eAABB\u3068\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u304b\u3064\u30ce\u30fc\u30c9\u304c\u8449\u30ce\u30fc\u30c9\u3067\u306f\u306a\u304f\u4e2d\u9593\u30ce\u30fc\u30c9\u3060\u3063\u305f\u5834\u5408\u3001\u6b21\u306f\u305d\u306e\u5b50\u30ce\u30fc\u30c9\u306e\u5224\u5b9a\u3067\u3059\u3002\n\u3053\u308c\u306f\u518d\u5e30\u7684\u306b Intersect \u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3059\u3002\n// BVH_node \u518d\u63b2\nstruct BVH_node {\n  float bbox[2][3];  // bbox[0,1]: AABB \u306e\u6700\u5c0f,\u6700\u5927\u5ea7\u6a19\uff0e bbox[hoge][0,1,2]: x,y,z\u5ea7\u6a19\n  int children[2];    // \u5b50\u30ce\u30fc\u30c9\n  vector<Triangle *> polygons;  // \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30dd\u30ea\u30b4\u30f3 (\u8449\u30ce\u30fc\u30c9\u306e\u307f\u6709\u52b9)\n};\n...\n\n  if (IntersectAABBvsRay(nodes[index].bbox, ray)) {\n    // \u4e2d\u9593\u30ce\u30fc\u30c9\u304b\uff1f\n    if (nodes[index].children[0] != -1) {\n      Triangle *childResult = -1;\n      // \u4e21\u65b9\u306e\u5b50\u30ce\u30fc\u30c9\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\n      for (int i=0; i<2; i++) {\n        Triangle *result = Intersect(nodes, nodes[index].children[0], polygons, ray, info);\n        if (result != nullptr) {\n          childResult = result;\n        }\n      }\n      if (childResult != nullptr) return childResult;\n    }\n  }\n\n...\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u3060\u3051\u898b\u308b\u3068\u3001\u300cchildren[0], children[1] \u4e21\u65b9\u3067\u4ea4\u5dee\u3057\u3066\u3044\u305f\u5834\u5408\u3069\u3046\u3059\u308b\u306e\uff1f\uff1f\u300d\u3068\u601d\u308f\u308c\u308b\u65b9\u3082\u3044\u308b\u3067\u3057\u3087\u3046\u3002\n\u5f8c\u3060\u3057\u3058\u3083\u3093\u3051\u3093\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3053\u306e Intersect \u95a2\u6570\u306f \u300cinfo \u306b\u5165\u3063\u3066\u3044\u308b distance \u3088\u308a\u3001\u8fd1\u3044\u4f4d\u7f6e\u3067\u30dd\u30ea\u30b4\u30f3\u3068\u306e\u4ea4\u5dee\u3092\u691c\u77e5\u3057\u305f\u5834\u5408\u306e\u307f\u3001\u4ea4\u5dee\u3057\u305f\u3068\u307f\u306a\u3059\u300d \u3068\u306a\u308b\u3088\u3046\u306b\u4f5c\u308a\u307e\u3059\u3002\n\u3053\u3046\u3057\u3066\u304a\u3051\u3070\u3001\u5b50\u306e\u4e21\u65b9\u3067\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u5834\u5408\u3082\u3001\u3088\u308a\u8fd1\u3044\u307b\u3046\u3060\u3051\u304c\u7d50\u679c\u3068\u3057\u3066\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\n\n\u672b\u7aef\u30ce\u30fc\u30c9\u306e\u30dd\u30ea\u30b4\u30f3\u306e\u4ea4\u5dee\u5224\u5b9a\n\u7d9a\u3044\u3066\u3001AABB \u3068\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u3066\u3044\u3066\u3001\u304b\u3064\u300c\u30ce\u30fc\u30c9\u304c\u8449\u30ce\u30fc\u30c9\u300d\u3060\u3063\u305f\u5834\u5408\u3067\u3059\u3002\n\u8449\u30ce\u30fc\u30c9\u306e\u5834\u5408\u3001\u30ce\u30fc\u30c9\u306b\u30dd\u30ea\u30b4\u30f3\u306e\u30ea\u30b9\u30c8\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u5358\u7d14\u306b\u3059\u3079\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u3064\u3044\u3066\u7dcf\u5f53\u305f\u308a\u3067\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\u3002\n...\n\n  if (IntersectAABBvsRay(nodes[index]->bbox, ray)) {\n    // \u4e2d\u9593\u30ce\u30fc\u30c9\u304b\uff1f\n    if (nodes[index].children[0] != -1) {\n      // \u4e2d\u9593\u30ce\u30fc\u30c9\n      ...\n    } else {\n      // \u8449\u30ce\u30fc\u30c9\n      Triangle *result = nullptr;\n      for (Triangle *tri : nodes[index].polygons) {\n        // \u30dd\u30ea\u30b4\u30f3\u3068\u30ec\u30a4\u306e\u4ea4\u5dee\u5224\u5b9a\n        // distance \u306b\u4ea4\u5dee\u3057\u3066\u3044\u305f\u5834\u5408\u306e\u30ec\u30a4\u304b\u3089\u306e\u8ddd\u96e2\u3001normal \u306b\u30dd\u30ea\u30b4\u30f3\u306e\u6cd5\u7dda\u304c\u5165\u308b\n        float distance = 0.f;\n        float normal[3];\n        if (tri->Intersect(ray, distance, normal)) {\n          // \u65e2\u306b\u4ea4\u5dee\u3057\u305f\u3068\u5224\u5b9a\u3055\u308c\u305f\u4ed6\u306e\u30dd\u30ea\u30b4\u30f3\u3088\u308a\u3001\u30ec\u30a4\u306e\u59cb\u70b9\u306b\u8fd1\u3044\u304b\u3069\u3046\u304b\n          if (distance < info.distance) {\n            result = tri;\n            info.distance = distance;\n            for (int i=0; i<3; i++) info.normal[i] = normal[i];\n          }\n        }\n      }\n      if (result != nullptr) return result;\n    }\n  }\n\n...\n\n\u30ce\u30fc\u30c9\u304c\u542b\u3080\u5168\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u3064\u3044\u3066 Triangle::Intersect \u3092\u884c\u3044\u3001\u305d\u306e\u7d50\u679c\u3001\u30ec\u30a4\u3068\u4ea4\u5dee\u3057\u3066\u304a\u308a\u3001\u304b\u3064\n\u300c\u73fe\u6642\u70b9\u3067\u3001\u30ec\u30a4\u306e\u59cb\u70b9\u306b\u6700\u3082\u8fd1\u3044\u5834\u6240\u3067\u4ea4\u5dee\u3057\u3066\u3044\u308b\u3001\u3068\u307f\u306a\u3055\u308c\u3066\u3044\u308b\u30dd\u30ea\u30b4\u30f3\u3088\u308a\u8fd1\u304f\u3067\u4ea4\u5dee\u3057\u305f\u300d\n\u5834\u5408\u306e\u307f\u7d50\u679c\u3092\u53cd\u6620\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u809d\u5fc3\u306e Triangle::Intersect\u3067\u3059\u304c\u3001\u6700\u521d\u306e\u7dcf\u5f53\u305f\u308a\u6cd5\u3067\u3082\u8ff0\u3079\u305f\u3088\u3046\u306b\u3001\u3053\u3053\u3067\u8aac\u660e\u3059\u308b\u3068\u9577\u304f\u306a\u308b\u306e\u3067\u8a73\u7d30\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\nAABB \u3068 ray \u304c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\n\u6700\u5f8c\u306b\u3001AABB\u3068\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3067\u3059\u3002\n\u3053\u308c\u306f\u975e\u5e38\u306b\u5358\u7d14\u3067\u3059\u3002BVH \u306e\u5404\u30ce\u30fc\u30c9\u306f\u3001\u5fc5\u305a\u5b50\u30ce\u30fc\u30c9\u306b\u5b58\u5728\u3059\u308b\u5168\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u3092\u5185\u5305\u3057\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30ec\u30a4\u304cAABB\u3068\u4ea4\u5dee\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u305d\u3053\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u3068\u3082\u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408\u3067\u3059\u3002\n\u30ec\u30a4\u306f\u300cA\u300d\u306b\u306f\u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u305d\u308c\u304c\u5185\u5305\u3059\u308b\u9ec4\u8272\u3068\u7dd1\u306e\u30dd\u30ea\u30b4\u30f3\u3068\u306f\u4ea4\u5dee\u3057\u3088\u3046\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3053\u306e\u305f\u3081\u3001AABB\u3068\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306b\u300c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\u300d\u3068\u3044\u3046\u60c5\u5831\u3092\u8fd4\u3059\u3060\u3051\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u4ee5\u4e0a\u3067\u69cb\u7bc9\u3057\u305f BVH \u3067\u306e\u3001\u30dd\u30ea\u30b4\u30f3\u3068\u30ec\u30a4\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u9805\u76ee\u3067\u3070\u3089\u3070\u3089\u306b\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3092\u3053\u3053\u306b\u307e\u3068\u3081\u3066\u66f8\u304d\u307e\u3059\u3002\n\n// \u30ec\u30a4\nstruct Ray {\n  float org[3];  // \u30ec\u30a4\u306e\u59cb\u70b9\n  float dir[3];  // \u30ec\u30a4\u306e\u65b9\u5411\u30d9\u30af\u30c8\u30eb (\u6b63\u898f\u5316\u6e08\u307f)\n};\n\n// \u4ea4\u5dee\u5224\u5b9a\u60c5\u5831\nstruct IntersectInformation {\n  float normal[3];\n  float distance;\n};\n\n// BVH_node \u518d\u63b2\nstruct BVH_node {\n  float bbox[2][3];  // bbox[0,1]: AABB \u306e\u6700\u5c0f,\u6700\u5927\u5ea7\u6a19\uff0e bbox[hoge][0,1,2]: x,y,z\u5ea7\u6a19\n  int children[2];    // \u5b50\u30ce\u30fc\u30c9\n  vector<Triangle *> polygons;  // \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30dd\u30ea\u30b4\u30f3 (\u8449\u30ce\u30fc\u30c9\u306e\u307f\u6709\u52b9)\n};\n\nbool IntersectAABBvsRay(float aabb[2][3], const Ray &ray);\n\nTriangle * Intersect(BVH_node *nodes, int index, const Ray &ray, IntersectInformation &info) {\n  // AABB \u3068\u30ec\u30a4\u306e\u4ea4\u5dee\u5224\u5b9a\n  if (IntersectAABBvsRay(nodes[index].bbox, ray)) {\n    // \u4ea4\u5dee\u3057\u3066\u3044\u308b\n\n    // \u4e2d\u9593\u30ce\u30fc\u30c9\u304b\uff1f\n    if (nodes[index].children[0] != -1) {\n      // \u4e2d\u9593\u30ce\u30fc\u30c9\n      // \u4e21\u65b9\u306e\u5b50\u30ce\u30fc\u30c9\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\n      Triangle *childResult = -1;\n      for (int i=0; i<2; i++) {\n        Triangle *result = Intersect(nodes, nodes[index].children[0], polygons, ray, info);\n        if (result != nullptr) {\n          childResult = result;\n        }\n      }\n      if (childResult != nullptr) return childResult;\n    } else {\n      // \u8449\u30ce\u30fc\u30c9\n      Triangle *result = nullptr;\n      for (Triangle *tri : nodes[index].polygons) {\n        // \u30dd\u30ea\u30b4\u30f3\u3068\u30ec\u30a4\u306e\u4ea4\u5dee\u5224\u5b9a\n        // distance \u306b\u4ea4\u5dee\u3057\u3066\u3044\u305f\u5834\u5408\u306e\u30ec\u30a4\u304b\u3089\u306e\u8ddd\u96e2\u3001normal \u306b\u30dd\u30ea\u30b4\u30f3\u306e\u6cd5\u7dda\u304c\u5165\u308b\n        float distance = 0.f;\n        float normal[3];\n        if (tri->Intersect(ray, distance, normal)) {\n          // \u65e2\u306b\u4ea4\u5dee\u3057\u305f\u3068\u5224\u5b9a\u3055\u308c\u305f\u4ed6\u306e\u30dd\u30ea\u30b4\u30f3\u3088\u308a\u3001\u30ec\u30a4\u306e\u59cb\u70b9\u306b\u8fd1\u3044\u304b\u3069\u3046\u304b\n          if (distance < info.distance) {\n            result = tri;\n            info.distance = distance;\n            for (int i=0; i<3; i++) info.normal[i] = normal[i];\n          }\n        }\n      }\n      if (result != nullptr) return result;\n    }\n  } else {\n    // \u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044 (\u4f55\u3082\u3059\u308b\u5fc5\u8981\u306a\u3057)\n  }\n  return nullptr;\n}\n\nbool IntersectAABBvsRay(float aabb[2][3], const Ray &ray) {\n  // aabb[0][0], aabb[0][1], aabb[0][2]: AABB \u306e\u6700\u5c0f\u5ea7\u6a19\u306ex,y,z\n  // aabb[1][0], aabb[1][1], aabb[1][2]: AABB \u306e\u6700\u5927\u5ea7\u6a19\u306ex,y,z\n\n  float t_max =  FLT_MAX   // AABB \u304b\u3089\u30ec\u30a4\u304c\u5916\u306b\u51fa\u308b\u6642\u523b\n  float t_min = -FLT_MAX;  // AABB \u306b\u30ec\u30a4\u304c\u4fb5\u5165\u3059\u308b\u6642\u523b\n\n  for (int i=0; i<3; i++) {\n    float t1 = (aabb[0][i] - ray.org[i])/ray.dir[i];\n    float t2 = (aabb[1][i] - ray.org[i])/ray.dir[i];\n    float t_near = std::min(t1, t2);\n    float t_far = std::max(t1, t2);\n    t_max = std::min(t_max, t_far);\n    t_min = std::max(t_min, t_near);\n\n    // \u30ec\u30a4\u304c\u5916\u306b\u51fa\u308b\u6642\u523b\u3068\u4fb5\u5165\u3059\u308b\u6642\u523b\u304c\u9006\u8ee2\u3057\u3066\u3044\u308b => \u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\n    if (t_min > t_max) return false;\n  }\n  return true;\n};\n\n...\n\n// Intersect \u547c\u3073\u51fa\u3057\nIntersectInformation hitInfo;\nhitInfo.distance = FLT_MAX;\nTriangle *hitTriangle = Intersect(bvhRoot, 0, ray, hitInfo);\n\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u308c\u305e\u308c\u5225\u3005\u306b\u66f8\u3044\u3066\u305f\u30b3\u30fc\u30c9\u3092\u304f\u3063\u3064\u3051\u305f\u3060\u3051\u306a\u306e\u3067\u3001\u7279\u306b\u8aac\u660e\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nBVH \u3042\u308a/\u306a\u3057\u306e\u6bd4\u8f03\nBVH \u3092\u4f7f\u3063\u305f\u5834\u5408\u3001\u4f7f\u308f\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u6bd4\u8f03\u3067\u3059\u3002\n\u30b3\u30fc\u30cd\u30eb\u30dc\u30c3\u30af\u30b9\u306b\u3001970\u500b\u306e\u30dd\u30ea\u30b4\u30f3\u3067\u69cb\u6210\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7f6e\u3044\u3066\u30014\u4e26\u5217\u306710\u5206\u9593\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3067\u3059\u3002\nBVH \u7121\u3057\n\nBVH \u3042\u308a\n\n\u307e\u308b\u3067\u7d50\u679c\u304c\u9055\u3044\u307e\u3059\u306d\u3002\n\u3053\u306e\u3088\u3046\u306a\u30b7\u30fc\u30f3\u306e\u5834\u5408\u3001\u30ec\u30a4\u304c\u30e2\u30c7\u30eb\u306b\u5f53\u305f\u308b\u5834\u5408\u3088\u308a\u3001\u5f53\u305f\u3089\u306a\u3044\u5834\u5408\u306e\u307b\u3046\u304c\u306f\u308b\u304b\u306b\u591a\u304f\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u3088\u3046\u306a\u5834\u5408\u3001BVH\u3092\u4f7f\u3048\u30701\u56de\u306eAABB\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u3067\u6e08\u307f\u307e\u3059\u304c\u3001BVH\u7121\u3057\u3067\u7dcf\u5f53\u305f\u308a\u3067\u5224\u5b9a\u3059\u308b\u5834\u5408\u3001\u305d\u306e\u3088\u3046\u306a\u5834\u5408\u3067\u3082\u9010\u4e00\u3059\u3079\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u5bfe\u3057\u3066\u4ea4\u5dee\u5224\u5b9a\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u3053\u3053\u307e\u3067\u5dee\u304c\u51fa\u3066\u304f\u308b\u7d50\u679c\u3068\u306a\u308a\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001BVH \u3092\u3055\u3089\u306b\u767a\u5c55\u3055\u305b\u305f\u3082\u306e\u306b\u3001QBVH \u3068\u3044\u3046\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\n\u540d\u524d\u304b\u3089\u5206\u304b\u308b\u901a\u308a\u30011\u3064\u306e\u30ce\u30fc\u30c9\u304c4\u3064\u306e\u5b50\u30ce\u30fc\u30c9 (Quater) \u3092\u6301\u3064\u69cb\u9020\u3067\u3059\u3002\n\u3082\u3063\u3068\u9ad8\u901f\u5316\u3057\u305f\u3044\uff01\u3068\u3044\u3046\u65b9\u306f\u3001\u5b9f\u8df5\uff01QBVH \u7b49\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\uff08\u5927\u672c\u306e\u8ad6\u6587\u3092\u8aad\u3081\u308b\u306e\u3067\u3042\u308c\u3070\u8ad6\u6587\u3092\u8aad\u3080\u306e\u304c\u4e00\u756a\u3067\u3059\uff09\u3002\n\n\u53c2\u8003\u6587\u732e\nIngo Wald, Solomon Boulos, and Peter Shirley, Ray Tracing Deformable Scenes using Dynamic Bounding Volume Hierarchies, ACM Transactions on Graphics 26(1), 2007.\nH. Dammertz1 and J. Hanika1 and A. Keller, Shallow Bounding Volume Hierarchies for Fast SIMD Ray Tracing of Incoherent Rays, http://www.uni-ulm.de/fileadmin/website_uni_ulm/iui.inst.100/institut/Papers/QBVH.pdf \n\u6797 \u79c0\u4e00, \u5b9f\u8df5\uff01QBVH, http://www.slideshare.net/ssuser2848d3/qbv\nq, \u30ec\u30a4\u3068\u306e\u4ea4\u5dee\u5224\u5b9a, http://qpp.bitbucket.org/post/collection_of_intersection/\n\u3088\u3057\u3080, \u8a66\u884c\u932f\u8aa4 - Ray Intersection #3, http://shikousakugo.wordpress.com/2012/07/01/ray-intersection-3/\nIKD, \u3007\u00d7\u3064\u304f\u308d\u30fc\u3069\u3063\u3068\u30b3\u30e0 - \u305d\u306e18 \u76f4\u7dda\u3068AABB, http://marupeke296.com/COL_3D_No18_LineAndAABB.html\n\u3053\u306e\u8a18\u4e8b\u306f[\u30ec\u30a4\u30c8\u30ec\u5408\u5bbf2\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc](https://sites.google.com/site/raytracingcamp2/)\u306e\u4e94\u9031\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u305d\u3057\u3066 [Bounding Volume Hierarchy (BVH) \u306e\u5b9f\u88c5 - \u69cb\u7bc9\u7de8](http://qiita.com/omochi64/items/9336f57118ba918f82ec) \u306e\u7d9a\u304d\u306b\u3082\u306a\u308a\u307e\u3059\u3002\n\u69cb\u7bc9\u7de8\u3092\u66f8\u3044\u305f\u306e\u304c\u53bb\u5e74\u306e12\u6708\u306a\u306e\u3067\u3001\u3086\u3046\u306b\u534a\u5e74\u4ee5\u4e0a\u7d4c\u3063\u3066\u3088\u3046\u3084\u304f\u8a18\u4e8b\u304c\u5b8c\u6210\u3059\u308b\u5f62\u306b\u2026\n\n\u69cb\u7bc9\u7de8\u306e\u7d9a\u304d\u3068\u306a\u308b\u306e\u3067\u3001\u69cb\u7bc9\u7de8\u3092\u8aad\u3093\u3067\u304a\u3089\u308c\u306a\u3044\u65b9\u306f\u69cb\u7bc9\u7de8\u304b\u3089\u3069\u3046\u305e\u3002\n\n# BVH \u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\u306e\u4ea4\u5dee\u5224\u5b9a\n\u65e9\u901f\u30bf\u30a4\u30c8\u30eb\u3068\u9055\u3046\u3053\u3068\u3092\u8a00\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u307e\u305a\u306f\u5168\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u7dcf\u5f53\u305f\u308a\u3057\u3066\u30c1\u30a7\u30c3\u30af\u3059\u308b\u65b9\u6cd5\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u308c\u306b\u95a2\u3057\u3066\u306f\u30b3\u30fc\u30c9\u3092\u793a\u3057\u3066\u3057\u307e\u3063\u305f\u307b\u3046\u304c\u304a\u305d\u3089\u304f\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n```cpp\n\nint Intersect(const Vector<Triangle *> &polygons, const Ray ray) {\n    for (int i=0; i<polygons.size(); i++) {\n        Triangle *polygon = polygons[i];\n        if (polygon->Intersect(ray)) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n```\n\n\u305f\u3063\u305f\u3053\u308c\u3060\u3051\u3067\u3059\u3002\u5168\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u5bfe\u3057\u3066\u3001\u30ec\u30a4\u304c\u5f53\u305f\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\uff08\u30dd\u30ea\u30b4\u30f3\u3068\u30ec\u30a4\u306e\u4ea4\u5dee\u5224\u5b9a\u306b\u95a2\u3057\u3066\u306f\u3001\u30ec\u30a4\u30c8\u30ec\u5408\u5bbf2\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc1\u9031\u76ee\u306e\u3001[\u30ec\u30a4\u3068\u306e\u4ea4\u5dee\u5224\u5b9a](http://qpp.bitbucket.org/post/collection_of_intersection/) \u7b49\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3053\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3001[M\u00f6ller\u2013Trumbore intersection algorithm] (http://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm) \u304c\u30b7\u30f3\u30d7\u30eb\u304b\u3064\u9ad8\u901f\u3067\u826f\u3044\u3067\u3059\u3002\nhttp://shikousakugo.wordpress.com/2012/07/01/ray-intersection-3/ \u306a\u3069\u3082\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\uff09\n\n\u3053\u3093\u306a\u306b\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u6ec5\u8336\u82e6\u8336\u91cd\u3044\u3067\u3059\u3002\n\u7279\u306b\u3001\u300c\u30ec\u30a4\u304c\u3001\u30dd\u30ea\u30b4\u30f3\u304c\u69cb\u6210\u3057\u3066\u3044\u308b\u30e2\u30c7\u30eb\u3068\u306f\u660e\u5f8c\u65e5\u306e\u65b9\u5411\u3092\u5411\u3044\u3066\u3044\u308b\u300d\u5834\u5408\u306b\u3082\u5168\u3066\u30c1\u30a7\u30c3\u30af\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u30e0\u30c0\u6975\u307e\u308a\u306a\u3044\u3067\u3059\u3002\nBVH \u3092\u4f7f\u3048\u3070\u3001\u305d\u306e\u3088\u3046\u306a\u5834\u5408\u3067\u3082\u30ec\u30a4\u3068AABB1\u56de\u306e\u4ea4\u5dee\u5224\u5b9a\u3060\u3051\u3067\u6e08\u307f\u307e\u3059\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u524d\u7f6e\u304d\u306f\u7d42\u308f\u308a\u306b\u3057\u3066 BVH \u3092\u7528\u3044\u305f\u4ea4\u5dee\u5224\u5b9a\u306b\u5165\u308a\u307e\u3059\u3002\n\n# BVH \u3092\u4f7f\u3063\u305f\u4ea4\u5dee\u5224\u5b9a\nBVH \u3092\u4f7f\u3063\u305f\u4ea4\u5dee\u5224\u5b9a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6d41\u308c\u306b\u306a\u308a\u307e\u3059\u3002\nBVH_node \u306e\u69cb\u9020\u306f\u3001[\u69cb\u7bc9\u7de8](http://qiita.com/omochi64/items/9336f57118ba918f82ec)\u3067\u7528\u3044\u305f\u3082\u306e\u3068\u540c\u3058\u3082\u306e\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```\nstruct IntersectInformation {\n  float normal[3];\n  float distance;\n};\n\nTriangle * Intersect(BVH_node *nodes, int index, const Ray &ray, IntersectInformation &info) {\n    \u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u30ce\u30fc\u30c9 = nodes[index];\n    \n    if (\u30c1\u30a7\u30c3\u30af\u5bfe\u8c61\u30ce\u30fc\u30c9\u306eAABB\u3068ray\u306e\u4ea4\u5dee\u5224\u5b9a) {\n       // \u4ea4\u5dee\u3057\u3066\u3044\u308b\n       if (\u5bfe\u8c61\u30ce\u30fc\u30c9\u306f\u4e2d\u9593\u30ce\u30fc\u30c9\uff1f) {\n          // \u4e2d\u9593\u30ce\u30fc\u30c9\u306a\u306e\u3067\u3001\u3055\u3089\u306b\u5b50\u3092\u8abf\u3079\u308b\n          int result1 = Intersect(nodes, \u5b50\u30ce\u30fc\u30c91, ray, info);\n          int result2 = Intersect(nodes, \u5b50\u30ce\u30fc\u30c92, ray, info);\n          return result1 \u3068 result2 \u306e\u3046\u3061\u3001ray \u306e\u59cb\u70b9\u306b\u8fd1\u3044\u65b9;\n       } else {\n          return \u30ce\u30fc\u30c9\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306ePolygon\u3068ray\u306e\u4ea4\u5dee\u5224\u5b9a\u7d50\u679c (\u8a73\u7d30\u306f o_info \u306b\u5165\u308c\u308b);\n       }\n    } else {\n       // \u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\n       // \u2192 \u73fe\u5728\u306e\u30ce\u30fc\u30c9\u306e\u5b50\u30ce\u30fc\u30c9\u306f\u3001\u5168\u3066\u73fe\u5728\u306e\u30ce\u30fc\u30c9\u306eAABB\u306b\u5185\u5305\u3055\u308c\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u63a2\u7d22\u3092\u6253\u3061\u5207\u3063\u3066\u826f\u3044\n       return -1;\n    }\n}\n\n...\n\n// intersectId \u306b\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eId\u304c\u5165\u3063\u3066\u3044\u308b\nint intresectId = Intersect(rootNode, 0, ray);\n\n```\n\nIntersectInformation \u306f\u3001\u4ea4\u5dee\u5224\u5b9a\u306e\u8a73\u7d30\u7d50\u679c\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u4ea4\u5dee\u3057\u305f\u30dd\u30ea\u30b4\u30f3\u306e\u6cd5\u7dda\u3068\u3001\u30ec\u30a4\u304b\u3089\u4ea4\u5dee\u3057\u305f\u5730\u70b9\u307e\u3067\u306e\u8ddd\u96e2\u3092\u793a\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u4ea4\u5dee\u5224\u5b9a\u306e\u30dd\u30a4\u30f3\u30c8\u306f4\u3064\u3067\u3059\n\n- BVH \u306e\u5404\u30ce\u30fc\u30c9\u306e AABB \u3068 ray \u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u884c\u3046\n- \u4e2d\u9593\u30ce\u30fc\u30c9\u306e\u5834\u5408\u3001\u3055\u3089\u306b\u5b50\u306b\u3064\u3044\u3066\u518d\u5e30\u7684\u306b\u4ea4\u5dee\u5224\u5b9a\u3092\u884c\u3046\n- \u672b\u7aef\u30ce\u30fc\u30c9\u306e\u5834\u5408\u3001\u30ce\u30fc\u30c9\u304c\u542b\u3080\u3059\u3079\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u3064\u3044\u3066\u4ea4\u5dee\u5224\u5b9a\u3092\u884c\u3046\n- AABB \u3068 ray \u304c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u305d\u3053\u3067\u63a2\u7d22\u3092\u3084\u3081\u3001\u300c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\u300d\u3068\u3044\u3046\u7d50\u679c\u3092\u8fd4\u3059\n\n\u4f55\u6545\u3053\u306e\u6d41\u308c\u3067\u5224\u5b9a\u3067\u304d\u308b\u306e\u304b\u3001\u3068\u3044\u3046\u3053\u3068\u3082\u542b\u3081\u3066\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u8aac\u660e\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## AABB \u3068 ray \u306e\u4ea4\u5dee\u5224\u5b9a\n\n\u307e\u305a\u306f\u3058\u3081\u306b\u3001AABB \u3068 ray \u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u884c\u3044\u307e\u3059\uff01\u304c\u3001\u3053\u3053\u3067\u305d\u308c\u3092\u4e00\u304b\u3089\u8aac\u660e\u3057\u3066\u308b\u3068\u3059\u3054\u3044\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u539f\u7406\u306f\u7701\u7565\u2026\n[\u30b2\u30fc\u30e0\u3064\u304f\u308d\u30fc\uff01 - \u305d\u306e18 \u76f4\u7dda\u3068AABB](http://marupeke296.com/COL_3D_No18_LineAndAABB.html) \u306a\u3069\u304c\u56f3\u4ed8\u3067\u8aac\u660e\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n\u4e0a\u8a18\u306e\u30b5\u30a4\u30c8\u3067\u306f\u30012\u6b21\u5143\u5e73\u9762\u4e0a\u3067\u306e\u4ea4\u5dee\u5224\u5b9a\u3092\u56f3\u306e\u30ec\u30a4\u3068\u3057\u3066\u6319\u3052\u3066\u3044\u307e\u3059\u304c\u30013\u6b21\u5143\u7a7a\u9593\u4e0a\u3067\u3082\u3084\u308a\u65b9\u306f\u540c\u3058\u3067\u3059\u3002\n\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3002\nAABB \u306e\u8868\u73fe\u65b9\u6cd5\u306f\u3001[\u69cb\u7bc9\u7de8](http://qiita.com/omochi64/items/9336f57118ba918f82ec)\u3068\u540c\u3058\u65b9\u6cd5\u3092\u898b\u3066\u3044\u308b\u306e\u3067\u3001\u3088\u304f\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n```cpp\n\nstruct Ray {\n  float org[3];  // \u30ec\u30a4\u306e\u59cb\u70b9\n  float dir[3];  // \u30ec\u30a4\u306e\u65b9\u5411\u30d9\u30af\u30c8\u30eb (\u6b63\u898f\u5316\u6e08\u307f)\n};\n\nbool IntersectAABBvsRay(float aabb[2][3], const Ray &ray) {\n  // aabb[0][0], aabb[0][1], aabb[0][2]: AABB \u306e\u6700\u5c0f\u5ea7\u6a19\u306ex,y,z\n  // aabb[1][0], aabb[1][1], aabb[1][2]: AABB \u306e\u6700\u5927\u5ea7\u6a19\u306ex,y,z\n\n  float t_max =  FLT_MAX   // AABB \u304b\u3089\u30ec\u30a4\u304c\u5916\u306b\u51fa\u308b\u6642\u523b\n  float t_min = -FLT_MAX;  // AABB \u306b\u30ec\u30a4\u304c\u4fb5\u5165\u3059\u308b\u6642\u523b\n\n  for (int i=0; i<3; i++) {\n    float t1 = (aabb[0][i] - ray.org[i])/ray.dir[i];\n    float t2 = (aabb[1][i] - ray.org[i])/ray.dir[i];\n    float t_near = std::min(t1, t2);\n    float t_far = std::max(t1, t2);\n    t_max = std::min(t_max, t_far);\n    t_min = std::max(t_min, t_near);\n\n    // \u30ec\u30a4\u304c\u5916\u306b\u51fa\u308b\u6642\u523b\u3068\u4fb5\u5165\u3059\u308b\u6642\u523b\u304c\u9006\u8ee2\u3057\u3066\u3044\u308b => \u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\n    if (t_min > t_max) return false;\n  }\n  return true;\n};\n```\n\n\u3053\u308c\u3067 AABB \u3068\u30ec\u30a4\u306e\u4ea4\u5dee\u5224\u5b9a\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u4e00\u3064\u6ce8\u610f\u3059\u3079\u304d\u70b9\u306f\u3001ray.dir[i] \u3067\u5272\u308a\u7b97\u3092\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\u3002\n\u4f8b\u3048\u3070 y-z \u5e73\u9762\u306b\u30ec\u30a4\u304c\u5e73\u884c\u3060\u3063\u305f\u5834\u5408\u3001ray.dir[0] \u306f 0 \u306b\u306a\u308b\u305f\u3081\u30010\u9664\u7b97\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u5b8c\u74a7\u306b0\u3058\u3083\u306a\u304f\u3066\u3082\u3001\u3082\u306e\u3059\u3054\u304f\u5024\u304c\u5c0f\u3055\u304f\u306a\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u554f\u984c\u3078\u306e\u7c21\u5358\u306a\u5bfe\u51e6\u6cd5\u306f\u3001ray.dir[i]\u304c\u3042\u307e\u308a\u306b\u5c0f\u3055\u3044\u5834\u5408\u3001\u5e73\u9762\u306b\u5e73\u884c\u3060\u3068\u307f\u306a\u3057\u3066\u3001\naabb[0][i] <= ray.org[i] <= aabb[1][i] \u306a\u3089 t_near = -FLT_MAX, t_max = FLT_MAX \u3068\u3057\u3001\n\u3053\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u306a\u3089\u3053\u306e\u8ef8\u306b\u95a2\u3057\u3066\u306f\u5f53\u305f\u3063\u3066\u3044\u306a\u3044\u3001\u3068\u307f\u306a\u3059\u65b9\u6cd5\u3067\u3059\u3002\n\n\u305f\u3060\u3057\u3001\u305d\u308c\u3092\u5224\u5225\u3059\u308b\u95be\u5024\u6b21\u7b2c\u3067\u306f\u305d\u308c\u3067\u3082\u8aa4\u5224\u5b9a\u3057\u3066\u3057\u307e\u3046\u5834\u5408\u304c\u3042\u308b\u305f\u3081\u3001\u5b8c\u74a7\u306a\u65b9\u6cd5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n## \u5b50\u30ce\u30fc\u30c9\u306e\u4ea4\u5dee\u5224\u5b9a\n\n\u3082\u3057\u30ce\u30fc\u30c9\u306eAABB\u3068\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u304b\u3064\u30ce\u30fc\u30c9\u304c\u8449\u30ce\u30fc\u30c9\u3067\u306f\u306a\u304f\u4e2d\u9593\u30ce\u30fc\u30c9\u3060\u3063\u305f\u5834\u5408\u3001\u6b21\u306f\u305d\u306e\u5b50\u30ce\u30fc\u30c9\u306e\u5224\u5b9a\u3067\u3059\u3002\n\u3053\u308c\u306f\u518d\u5e30\u7684\u306b Intersect \u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3059\u3002\n\n```cpp\n// BVH_node \u518d\u63b2\nstruct BVH_node {\n  float bbox[2][3];  // bbox[0,1]: AABB \u306e\u6700\u5c0f,\u6700\u5927\u5ea7\u6a19\uff0e bbox[hoge][0,1,2]: x,y,z\u5ea7\u6a19\n  int children[2];    // \u5b50\u30ce\u30fc\u30c9\n  vector<Triangle *> polygons;  // \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30dd\u30ea\u30b4\u30f3 (\u8449\u30ce\u30fc\u30c9\u306e\u307f\u6709\u52b9)\n};\n...\n\n  if (IntersectAABBvsRay(nodes[index].bbox, ray)) {\n    // \u4e2d\u9593\u30ce\u30fc\u30c9\u304b\uff1f\n    if (nodes[index].children[0] != -1) {\n      Triangle *childResult = -1;\n      // \u4e21\u65b9\u306e\u5b50\u30ce\u30fc\u30c9\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\n      for (int i=0; i<2; i++) {\n        Triangle *result = Intersect(nodes, nodes[index].children[0], polygons, ray, info);\n        if (result != nullptr) {\n          childResult = result;\n        }\n      }\n      if (childResult != nullptr) return childResult;\n    }\n  }\n\n...\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u3060\u3051\u898b\u308b\u3068\u3001\u300cchildren[0], children[1] \u4e21\u65b9\u3067\u4ea4\u5dee\u3057\u3066\u3044\u305f\u5834\u5408\u3069\u3046\u3059\u308b\u306e\uff1f\uff1f\u300d\u3068\u601d\u308f\u308c\u308b\u65b9\u3082\u3044\u308b\u3067\u3057\u3087\u3046\u3002\n\u5f8c\u3060\u3057\u3058\u3083\u3093\u3051\u3093\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3053\u306e Intersect \u95a2\u6570\u306f **\u300cinfo \u306b\u5165\u3063\u3066\u3044\u308b distance \u3088\u308a\u3001\u8fd1\u3044\u4f4d\u7f6e\u3067\u30dd\u30ea\u30b4\u30f3\u3068\u306e\u4ea4\u5dee\u3092\u691c\u77e5\u3057\u305f\u5834\u5408\u306e\u307f\u3001\u4ea4\u5dee\u3057\u305f\u3068\u307f\u306a\u3059\u300d** \u3068\u306a\u308b\u3088\u3046\u306b\u4f5c\u308a\u307e\u3059\u3002\n\u3053\u3046\u3057\u3066\u304a\u3051\u3070\u3001\u5b50\u306e\u4e21\u65b9\u3067\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u3066\u3044\u305f\u5834\u5408\u3082\u3001\u3088\u308a\u8fd1\u3044\u307b\u3046\u3060\u3051\u304c\u7d50\u679c\u3068\u3057\u3066\u53cd\u6620\u3055\u308c\u307e\u3059\u3002\n\n## \u672b\u7aef\u30ce\u30fc\u30c9\u306e\u30dd\u30ea\u30b4\u30f3\u306e\u4ea4\u5dee\u5224\u5b9a\n\n\u7d9a\u3044\u3066\u3001AABB \u3068\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u3066\u3044\u3066\u3001\u304b\u3064\u300c\u30ce\u30fc\u30c9\u304c\u8449\u30ce\u30fc\u30c9\u300d\u3060\u3063\u305f\u5834\u5408\u3067\u3059\u3002\n\u8449\u30ce\u30fc\u30c9\u306e\u5834\u5408\u3001\u30ce\u30fc\u30c9\u306b\u30dd\u30ea\u30b4\u30f3\u306e\u30ea\u30b9\u30c8\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u5358\u7d14\u306b\u3059\u3079\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u3064\u3044\u3066\u7dcf\u5f53\u305f\u308a\u3067\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\u3002\n\n```cpp\n...\n\n  if (IntersectAABBvsRay(nodes[index]->bbox, ray)) {\n    // \u4e2d\u9593\u30ce\u30fc\u30c9\u304b\uff1f\n    if (nodes[index].children[0] != -1) {\n      // \u4e2d\u9593\u30ce\u30fc\u30c9\n      ...\n    } else {\n      // \u8449\u30ce\u30fc\u30c9\n      Triangle *result = nullptr;\n      for (Triangle *tri : nodes[index].polygons) {\n        // \u30dd\u30ea\u30b4\u30f3\u3068\u30ec\u30a4\u306e\u4ea4\u5dee\u5224\u5b9a\n        // distance \u306b\u4ea4\u5dee\u3057\u3066\u3044\u305f\u5834\u5408\u306e\u30ec\u30a4\u304b\u3089\u306e\u8ddd\u96e2\u3001normal \u306b\u30dd\u30ea\u30b4\u30f3\u306e\u6cd5\u7dda\u304c\u5165\u308b\n        float distance = 0.f;\n        float normal[3];\n        if (tri->Intersect(ray, distance, normal)) {\n          // \u65e2\u306b\u4ea4\u5dee\u3057\u305f\u3068\u5224\u5b9a\u3055\u308c\u305f\u4ed6\u306e\u30dd\u30ea\u30b4\u30f3\u3088\u308a\u3001\u30ec\u30a4\u306e\u59cb\u70b9\u306b\u8fd1\u3044\u304b\u3069\u3046\u304b\n          if (distance < info.distance) {\n            result = tri;\n            info.distance = distance;\n            for (int i=0; i<3; i++) info.normal[i] = normal[i];\n          }\n        }\n      }\n      if (result != nullptr) return result;\n    }\n  }\n\n...\n```\n\n\u30ce\u30fc\u30c9\u304c\u542b\u3080\u5168\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u3064\u3044\u3066 Triangle::Intersect \u3092\u884c\u3044\u3001\u305d\u306e\u7d50\u679c\u3001\u30ec\u30a4\u3068\u4ea4\u5dee\u3057\u3066\u304a\u308a\u3001\u304b\u3064\n **\u300c\u73fe\u6642\u70b9\u3067\u3001\u30ec\u30a4\u306e\u59cb\u70b9\u306b\u6700\u3082\u8fd1\u3044\u5834\u6240\u3067\u4ea4\u5dee\u3057\u3066\u3044\u308b\u3001\u3068\u307f\u306a\u3055\u308c\u3066\u3044\u308b\u30dd\u30ea\u30b4\u30f3\u3088\u308a\u8fd1\u304f\u3067\u4ea4\u5dee\u3057\u305f\u300d**\n\u5834\u5408\u306e\u307f\u7d50\u679c\u3092\u53cd\u6620\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u809d\u5fc3\u306e Triangle::Intersect\u3067\u3059\u304c\u3001\u6700\u521d\u306e\u7dcf\u5f53\u305f\u308a\u6cd5\u3067\u3082\u8ff0\u3079\u305f\u3088\u3046\u306b\u3001\u3053\u3053\u3067\u8aac\u660e\u3059\u308b\u3068\u9577\u304f\u306a\u308b\u306e\u3067\u8a73\u7d30\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n\n## AABB \u3068 ray \u304c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\n\n\u6700\u5f8c\u306b\u3001AABB\u3068\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3067\u3059\u3002\n\u3053\u308c\u306f\u975e\u5e38\u306b\u5358\u7d14\u3067\u3059\u3002BVH \u306e\u5404\u30ce\u30fc\u30c9\u306f\u3001\u5fc5\u305a\u5b50\u30ce\u30fc\u30c9\u306b\u5b58\u5728\u3059\u308b\u5168\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u3092\u5185\u5305\u3057\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u30ec\u30a4\u304cAABB\u3068\u4ea4\u5dee\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u305d\u3053\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u3068\u3082\u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408\u3067\u3059\u3002\n\u30ec\u30a4\u306f\u300cA\u300d\u306b\u306f\u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u305d\u308c\u304c\u5185\u5305\u3059\u308b\u9ec4\u8272\u3068\u7dd1\u306e\u30dd\u30ea\u30b4\u30f3\u3068\u306f\u4ea4\u5dee\u3057\u3088\u3046\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n![bvh_ray_intersect.png](https://qiita-image-store.s3.amazonaws.com/0/34053/04602e78-7083-0db8-3ce0-fc2c956b6383.png)\n\n\u3053\u306e\u305f\u3081\u3001AABB\u3068\u30ec\u30a4\u304c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u4f55\u3082\u305b\u305a\u306b\u300c\u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\u300d\u3068\u3044\u3046\u60c5\u5831\u3092\u8fd4\u3059\u3060\u3051\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u307e\u3068\u3081\n\n\u4ee5\u4e0a\u3067\u69cb\u7bc9\u3057\u305f BVH \u3067\u306e\u3001\u30dd\u30ea\u30b4\u30f3\u3068\u30ec\u30a4\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u9805\u76ee\u3067\u3070\u3089\u3070\u3089\u306b\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3092\u3053\u3053\u306b\u307e\u3068\u3081\u3066\u66f8\u304d\u307e\u3059\u3002\n\n```cpp\n\n// \u30ec\u30a4\nstruct Ray {\n  float org[3];  // \u30ec\u30a4\u306e\u59cb\u70b9\n  float dir[3];  // \u30ec\u30a4\u306e\u65b9\u5411\u30d9\u30af\u30c8\u30eb (\u6b63\u898f\u5316\u6e08\u307f)\n};\n\n// \u4ea4\u5dee\u5224\u5b9a\u60c5\u5831\nstruct IntersectInformation {\n  float normal[3];\n  float distance;\n};\n\n// BVH_node \u518d\u63b2\nstruct BVH_node {\n  float bbox[2][3];  // bbox[0,1]: AABB \u306e\u6700\u5c0f,\u6700\u5927\u5ea7\u6a19\uff0e bbox[hoge][0,1,2]: x,y,z\u5ea7\u6a19\n  int children[2];    // \u5b50\u30ce\u30fc\u30c9\n  vector<Triangle *> polygons;  // \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u30dd\u30ea\u30b4\u30f3 (\u8449\u30ce\u30fc\u30c9\u306e\u307f\u6709\u52b9)\n};\n\nbool IntersectAABBvsRay(float aabb[2][3], const Ray &ray);\n\nTriangle * Intersect(BVH_node *nodes, int index, const Ray &ray, IntersectInformation &info) {\n  // AABB \u3068\u30ec\u30a4\u306e\u4ea4\u5dee\u5224\u5b9a\n  if (IntersectAABBvsRay(nodes[index].bbox, ray)) {\n    // \u4ea4\u5dee\u3057\u3066\u3044\u308b\n\n    // \u4e2d\u9593\u30ce\u30fc\u30c9\u304b\uff1f\n    if (nodes[index].children[0] != -1) {\n      // \u4e2d\u9593\u30ce\u30fc\u30c9\n      // \u4e21\u65b9\u306e\u5b50\u30ce\u30fc\u30c9\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\n      Triangle *childResult = -1;\n      for (int i=0; i<2; i++) {\n        Triangle *result = Intersect(nodes, nodes[index].children[0], polygons, ray, info);\n        if (result != nullptr) {\n          childResult = result;\n        }\n      }\n      if (childResult != nullptr) return childResult;\n    } else {\n      // \u8449\u30ce\u30fc\u30c9\n      Triangle *result = nullptr;\n      for (Triangle *tri : nodes[index].polygons) {\n        // \u30dd\u30ea\u30b4\u30f3\u3068\u30ec\u30a4\u306e\u4ea4\u5dee\u5224\u5b9a\n        // distance \u306b\u4ea4\u5dee\u3057\u3066\u3044\u305f\u5834\u5408\u306e\u30ec\u30a4\u304b\u3089\u306e\u8ddd\u96e2\u3001normal \u306b\u30dd\u30ea\u30b4\u30f3\u306e\u6cd5\u7dda\u304c\u5165\u308b\n        float distance = 0.f;\n        float normal[3];\n        if (tri->Intersect(ray, distance, normal)) {\n          // \u65e2\u306b\u4ea4\u5dee\u3057\u305f\u3068\u5224\u5b9a\u3055\u308c\u305f\u4ed6\u306e\u30dd\u30ea\u30b4\u30f3\u3088\u308a\u3001\u30ec\u30a4\u306e\u59cb\u70b9\u306b\u8fd1\u3044\u304b\u3069\u3046\u304b\n          if (distance < info.distance) {\n            result = tri;\n            info.distance = distance;\n            for (int i=0; i<3; i++) info.normal[i] = normal[i];\n          }\n        }\n      }\n      if (result != nullptr) return result;\n    }\n  } else {\n    // \u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044 (\u4f55\u3082\u3059\u308b\u5fc5\u8981\u306a\u3057)\n  }\n  return nullptr;\n}\n\nbool IntersectAABBvsRay(float aabb[2][3], const Ray &ray) {\n  // aabb[0][0], aabb[0][1], aabb[0][2]: AABB \u306e\u6700\u5c0f\u5ea7\u6a19\u306ex,y,z\n  // aabb[1][0], aabb[1][1], aabb[1][2]: AABB \u306e\u6700\u5927\u5ea7\u6a19\u306ex,y,z\n\n  float t_max =  FLT_MAX   // AABB \u304b\u3089\u30ec\u30a4\u304c\u5916\u306b\u51fa\u308b\u6642\u523b\n  float t_min = -FLT_MAX;  // AABB \u306b\u30ec\u30a4\u304c\u4fb5\u5165\u3059\u308b\u6642\u523b\n\n  for (int i=0; i<3; i++) {\n    float t1 = (aabb[0][i] - ray.org[i])/ray.dir[i];\n    float t2 = (aabb[1][i] - ray.org[i])/ray.dir[i];\n    float t_near = std::min(t1, t2);\n    float t_far = std::max(t1, t2);\n    t_max = std::min(t_max, t_far);\n    t_min = std::max(t_min, t_near);\n\n    // \u30ec\u30a4\u304c\u5916\u306b\u51fa\u308b\u6642\u523b\u3068\u4fb5\u5165\u3059\u308b\u6642\u523b\u304c\u9006\u8ee2\u3057\u3066\u3044\u308b => \u4ea4\u5dee\u3057\u3066\u3044\u306a\u3044\n    if (t_min > t_max) return false;\n  }\n  return true;\n};\n\n...\n\n// Intersect \u547c\u3073\u51fa\u3057\nIntersectInformation hitInfo;\nhitInfo.distance = FLT_MAX;\nTriangle *hitTriangle = Intersect(bvhRoot, 0, ray, hitInfo);\n\n```\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u308c\u305e\u308c\u5225\u3005\u306b\u66f8\u3044\u3066\u305f\u30b3\u30fc\u30c9\u3092\u304f\u3063\u3064\u3051\u305f\u3060\u3051\u306a\u306e\u3067\u3001\u7279\u306b\u8aac\u660e\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n# BVH \u3042\u308a/\u306a\u3057\u306e\u6bd4\u8f03\n\nBVH \u3092\u4f7f\u3063\u305f\u5834\u5408\u3001\u4f7f\u308f\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u6bd4\u8f03\u3067\u3059\u3002\n\u30b3\u30fc\u30cd\u30eb\u30dc\u30c3\u30af\u30b9\u306b\u3001970\u500b\u306e\u30dd\u30ea\u30b4\u30f3\u3067\u69cb\u6210\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7f6e\u3044\u3066\u30014\u4e26\u5217\u306710\u5206\u9593\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3067\u3059\u3002\n\nBVH \u7121\u3057\n![10min_without_bvh.png](https://qiita-image-store.s3.amazonaws.com/0/34053/da19f6fd-4b78-4548-9110-893d22043aa7.png)\n\nBVH \u3042\u308a\n![10min_with_bvh.png](https://qiita-image-store.s3.amazonaws.com/0/34053/21417f49-aa47-4cc1-4427-19f65c346fbf.png)\n\n\u307e\u308b\u3067\u7d50\u679c\u304c\u9055\u3044\u307e\u3059\u306d\u3002\n\u3053\u306e\u3088\u3046\u306a\u30b7\u30fc\u30f3\u306e\u5834\u5408\u3001\u30ec\u30a4\u304c\u30e2\u30c7\u30eb\u306b\u5f53\u305f\u308b\u5834\u5408\u3088\u308a\u3001\u5f53\u305f\u3089\u306a\u3044\u5834\u5408\u306e\u307b\u3046\u304c\u306f\u308b\u304b\u306b\u591a\u304f\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u3088\u3046\u306a\u5834\u5408\u3001BVH\u3092\u4f7f\u3048\u30701\u56de\u306eAABB\u3068\u306e\u4ea4\u5dee\u5224\u5b9a\u3067\u6e08\u307f\u307e\u3059\u304c\u3001BVH\u7121\u3057\u3067\u7dcf\u5f53\u305f\u308a\u3067\u5224\u5b9a\u3059\u308b\u5834\u5408\u3001\u305d\u306e\u3088\u3046\u306a\u5834\u5408\u3067\u3082\u9010\u4e00\u3059\u3079\u3066\u306e\u30dd\u30ea\u30b4\u30f3\u306b\u5bfe\u3057\u3066\u4ea4\u5dee\u5224\u5b9a\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u3053\u3053\u307e\u3067\u5dee\u304c\u51fa\u3066\u304f\u308b\u7d50\u679c\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001BVH \u3092\u3055\u3089\u306b\u767a\u5c55\u3055\u305b\u305f\u3082\u306e\u306b\u3001QBVH \u3068\u3044\u3046\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\n\u540d\u524d\u304b\u3089\u5206\u304b\u308b\u901a\u308a\u30011\u3064\u306e\u30ce\u30fc\u30c9\u304c4\u3064\u306e\u5b50\u30ce\u30fc\u30c9 (Quater) \u3092\u6301\u3064\u69cb\u9020\u3067\u3059\u3002\n\u3082\u3063\u3068\u9ad8\u901f\u5316\u3057\u305f\u3044\uff01\u3068\u3044\u3046\u65b9\u306f\u3001[\u5b9f\u8df5\uff01QBVH](http://www.slideshare.net/ssuser2848d3/qbv) \u7b49\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\uff08[\u5927\u672c\u306e\u8ad6\u6587](http://www.uni-ulm.de/fileadmin/website_uni_ulm/iui.inst.100/institut/Papers/QBVH.pdf)\u3092\u8aad\u3081\u308b\u306e\u3067\u3042\u308c\u3070\u8ad6\u6587\u3092\u8aad\u3080\u306e\u304c\u4e00\u756a\u3067\u3059\uff09\u3002\n\n# \u53c2\u8003\u6587\u732e\nIngo Wald, Solomon Boulos, and Peter Shirley, Ray Tracing Deformable Scenes using Dynamic Bounding Volume Hierarchies, ACM Transactions on Graphics 26(1), 2007.\nH. Dammertz1 and J. Hanika1 and A. Keller, Shallow Bounding Volume Hierarchies for Fast SIMD Ray Tracing of Incoherent Rays, http://www.uni-ulm.de/fileadmin/website_uni_ulm/iui.inst.100/institut/Papers/QBVH.pdf \n\u6797 \u79c0\u4e00, \u5b9f\u8df5\uff01QBVH, http://www.slideshare.net/ssuser2848d3/qbv\nq, \u30ec\u30a4\u3068\u306e\u4ea4\u5dee\u5224\u5b9a, http://qpp.bitbucket.org/post/collection_of_intersection/\n\u3088\u3057\u3080, \u8a66\u884c\u932f\u8aa4 - Ray Intersection #3, http://shikousakugo.wordpress.com/2012/07/01/ray-intersection-3/\nIKD, \u3007\u00d7\u3064\u304f\u308d\u30fc\u3069\u3063\u3068\u30b3\u30e0 - \u305d\u306e18 \u76f4\u7dda\u3068AABB, http://marupeke296.com/COL_3D_No18_LineAndAABB.html\n", "tags": ["3DCG", "\u30ec\u30a4\u30c8\u30ec", "3DGraphics"]}