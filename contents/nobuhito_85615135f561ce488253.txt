{"tags": ["Sensu", "grafana", "Network", "snmp"], "context": "GW\u3067\u3059\u306d\u3002\u3053\u3093\u306a\u6c17\u6301\u306e\u826f\u3044\u65e5\u306f\u306a\u306b\u304b\u65b0\u3057\u3044\u7269\u3092\u30a6\u30a9\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u304f\u306a\u308a\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u984c\u540d\u901a\u308aSensu\u3068Grafana\u3092\u4f7f\u3063\u3066SNMP\u3067\u53d6\u5f97\u3057\u305f\u30b9\u30a4\u30c3\u30c1\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u66f8\u3044\u3066\u3042\u308b\u5185\u5bb9\u306f \u300cSensu\u3067\u30b9\u30a4\u30c3\u30c1\u306e\u901a\u4fe1\u91cf\u3092\u53d6\u5f97\u300d \u3068\u307b\u307c\u540c\u3058\u3067\u3059\u304c\u3001\n\n\u30dd\u30fc\u30c8\u5358\u4f4d\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\n\u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066SNMP\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u56de\u6570\u3092\u6291\u3048\u3066\u308b\n\u7121\u7ddaLAN\u306e\u8ee2\u9001\u91cf\u3082\u53d6\u5f97\u3057\u3066\u3044\u308b(Ruckus\u9650\u5b9a\uff1f)\n\u6a5f\u5668\u3084\u3084\u30dd\u30fc\u30c8\u306e\u540d\u79f0\u3082\u53d6\u5f97\u3057\u3066\u3044\u308b\nGrafana\u306e\u8868\u793a\u4f8b\u3064\u304d(\u304a\u307e\u3051)\n\n\u3042\u305f\u308a\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\u3046\u307e\u304f\u52d5\u3051\u3070\u4e0b\u8a18\u306e\u3088\u3046\u306b\u30dd\u30fc\u30c8\u306e\u6570\u304c\u591a\u3044\u30b9\u30a4\u30c3\u30c1\u3067\u3082\u30c8\u30c3\u30d710\u3060\u3051\u3092\u63cf\u753b\u3055\u305b\u308b\u3068\u3044\u3046\u3053\u3068\u3082\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nGrafana\u3078\u8ffd\u52a0\u3059\u308b\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u306f network.hdf5p35*.snmp.tx.*.sortByMaxima().highestMax(10).aliasSub((.)\\.(.)\\.(.)\\.(.)\\.(.), \\2.\\5) \u306a\u611f\u3058\u3067\u3001\n\n\nnetwork : \u63a5\u982d\u8a9e(\u30cf\u30fc\u30c9\u30b3\u30fc\u30c6\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044)\n\nhdf5p35* : \u6a5f\u5668\u540d(\u756a\u53f7\u306a\u3069\u304c\u3064\u3044\u3066\u3044\u308c\u3070*\u3067\u5168\u53d6\u5f97)\n\nsnmp : \u30c7\u30fc\u30bf\u53d6\u5f97\u5143\n\ntx : Transmitter(\u53d7\u4fe1\u3067\u3042\u308c\u3070rx\u3001\u3069\u3061\u3089\u3082\u3067\u3042\u308c\u3070*\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044)\n\n* : \u30dd\u30fc\u30c8(\u30dd\u30fc\u30c8\u540d\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308c\u3070\u540d\u79f0\u3001\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u756a\u53f7\u3001\u5168\u90e8\u3067\u3042\u308c\u3070*\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044)\n\nsortByMaxima : \u30c7\u30fc\u30bf\u91cf\u304c\u5927\u304d\u3044\u9806\u306b\u30bd\u30fc\u30c8\n\nhighestMax : \u30c8\u30c3\u30d710\u3060\u3051\u3092\u63cf\u753b\n\naliasSub : \u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u3066\u540d\u79f0\u3092\u6307\u5b9a\n\n\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001 sortByMaxima().highestMax(10) \u3092 sumSeries() \u306b\u3059\u308c\u3070\u5143\u8a18\u4e8b\u306e\u3088\u3046\u306b\u5408\u8a08\u306e\u5024\u3092\u63cf\u753b\u3055\u305b\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3001\n\nsnmp_metrics.rb\n #!/usr/bin/env ruby\n require \"sensu-plugin/metric/cli\"\n require \"snmp\"\n require \"json\"\n\n class SNMPTrafficMetrics < Sensu::Plugin::Metric::CLI::Graphite\n   option :hosts,\n     short: \"-h HOSTS\",\n     long: \"--hosts HOSTS\",\n     default: \"localhost,127.0.0.1\"\n\n   option :community,\n     short: \"-c COMMUNITY\",\n     long: \"--community COMMUNITY\",\n     default: \"public\"\n\n   option :sleep,\n     long: \"--sleep SLEEP\",\n     proc: proc {|a| a.to_f},\n     default: 1\n\n   option :cache,\n     long: \"--cache\",\n     default: \"/tmp/snmp_cache.json\"\n\n   def oids type\n     lists = {\n       \"wlan_rx\" => \"1.3.6.1.4.1.25053.1.2.2.1.1.1.1.1.14\",   # for Ruckus ZoneDirector\n       \"wlan_tx\" => \"1.3.6.1.4.1.25053.1.2.2.1.1.1.1.1.16\",   # for Ruckus ZoneDirector\n       \"lan_rx\"  => \"1.3.6.1.2.1.2.2.1.10\",\n       \"lan_tx\"  => \"1.3.6.1.2.1.2.2.1.16\",\n       \"name\"    => \"1.3.6.1.2.1.1.5.0\",\n       \"port\"    => \"1.3.6.1.2.1.2.2.1.2\"\n     }\n     lists[type]\n   end\n\n   def get_portname(manager)\n     name = []\n     begin\n       manager.walk [oids(\"port\")] { |vb|name << vb[0].value}\n     end\n     name\n   end\n\n   def get_name(manager)\n     response = manager.get [oids(\"name\")]\n     name = nil\n     begin\n       response.each_varbind { |vb| name = vb.value }\n     end\n     name\n   end\n\n   def get_traffic(manager, type)\n     ret = {\"rx\" => [], \"tx\" => []}\n     traffic = [\"rx\", \"tx\"]\n     traffic.each do |x|\n       i = 1\n       loop do\n         oid = oids(\"#{type}_#{x}\")\n         response = manager.get [\"#{oid}.#{i}\"]\n         begin\n           response.each_varbind { |vb| ret[x][i - 1] = vb.value.to_i }\n         rescue NoMethodError => e\n           ret[x] = nil if i == 1\n           break\n         end\n         i += 1\n       end\n     end\n\n     ret = nil if ret[\"rx\"] == nil or ret[\"tx\"] == nil\n     ret\n   end\n\n   def run\n\n     json_file_path = config[:cache]\n     begin\n       cache = open(json_file_path) { |io| JSON.load io }\n     rescue\n       cache = {}\n     end\n\n     timestamp = Time.now.to_i\n     threads = []\n\n     config[:hosts].split(/,\\s?/).each do |host|\n       manager = SNMP::Manager.new host: host, community: config[:community]\n\n       portname =  get_portname manager\n\n       name = get_name manager\n       threads << Thread.new do\n         type = \"wlan\"\n         traffic = get_traffic(manager, type) # wlan\u3092\u8a66\u3057\u3066\n         if traffic == nil                    # wlan\u304c\u306a\u304b\u3063\u305f\u3089\n           type = \"lan\"                       # \u6709\u7dda\u30dd\u30fc\u30c8\n           traffic = get_traffic(manager, type)\n         end\n\n         now = Time.now\n         traffic_type = [\"rx\", \"tx\"]\n         traffic_type.each do |x|\n           traffic[x].each_index do |i|\n             if cache[name]!= nil && cache[name][type] != nil\n               traffic_value = traffic[x][i] - (cache[name][type][\"traffic\"][x][i].to_f || 0)\n               time = now - Time.at(cache[name][type][\"time\"])\n               output \"network.#{name.downcase}.snmp.#{x}.#{portname[i]}\", (traffic_value / time).round(2), timestamp\n             else\n               cache[name] = {} if cache[name] == nil\n               cache[name][type] = {}\n               break\n             end\n           end\n           break if cache[name][type] == {}\n         end\n         cache[name][type] = {\"time\" => now.to_i, \"traffic\" => {\"rx\" => traffic[\"rx\"], \"tx\" => traffic[\"tx\"]}}\n       end\n     end\n\n     threads.each { |thread| thread.join }\n\n     open(json_file_path, \"w\") { |io| JSON.dump(cache, io) }\n\n     ok\n   end\n end\n\n\n\u8a2d\u5b9a\u306f\u4e0b\u8a18\u306e\u611f\u3058\u3067\u3001\u76e3\u8996\u3057\u305f\u3044\u6a5f\u5668\u306eIP\u3092\u6307\u5b9a(\"\"\u3067\u56f2\u3081\u3070\u300c, \u300d\u3067\u533a\u5207\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059)\u3059\u308c\u3070OK\u3002\n\nsnmp_metrics.json\n{\n  \"checks\": {\n    \"snmp_metrics\": {\n      \"type\": \"metric\",\n      \"handlers\": [\"graphite\"],\n      \"command\": \"ruby /etc/sensu/plugins/snmp_metrics.rb --host \\\"127.0.0.1, localhost\\\"\",\n      \"interval\": 15,\n      \"subscribers\": [ \"sensu\" ]\n    }\n  }\n}\n\n\nL3\u30b9\u30a4\u30c3\u30c1\u3067\u898b\u3066\u307f\u308b\u3068\u3001\u3069\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u304b\u3089\u3069\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u3078\u306e\u6d41\u308c\u304c\u591a\u3044\u306e\u304b\u5206\u304b\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u306a\u304b\u306a\u304b\u3088\u308d\u3057\u3044\u611f\u3058\u3067\u3059\u306d\u3002\nGW\u3067\u3059\u306d\u3002\u3053\u3093\u306a\u6c17\u6301\u306e\u826f\u3044\u65e5\u306f\u306a\u306b\u304b\u65b0\u3057\u3044\u7269\u3092\u30a6\u30a9\u30c3\u30c1\u30f3\u30b0\u3057\u305f\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u984c\u540d\u901a\u308aSensu\u3068Grafana\u3092\u4f7f\u3063\u3066SNMP\u3067\u53d6\u5f97\u3057\u305f\u30b9\u30a4\u30c3\u30c1\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u66f8\u3044\u3066\u3042\u308b\u5185\u5bb9\u306f \u300c[Sensu\u3067\u30b9\u30a4\u30c3\u30c1\u306e\u901a\u4fe1\u91cf\u3092\u53d6\u5f97](http://qiita.com/hiconyan/items/cd485146b4bced8b9eec)\u300d \u3068\u307b\u307c\u540c\u3058\u3067\u3059\u304c\u3001\n\n - \u30dd\u30fc\u30c8\u5358\u4f4d\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\n - \u30ad\u30e3\u30c3\u30b7\u30e5\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066SNMP\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u56de\u6570\u3092\u6291\u3048\u3066\u308b\n - \u7121\u7ddaLAN\u306e\u8ee2\u9001\u91cf\u3082\u53d6\u5f97\u3057\u3066\u3044\u308b(Ruckus\u9650\u5b9a\uff1f)\n - \u6a5f\u5668\u3084\u3084\u30dd\u30fc\u30c8\u306e\u540d\u79f0\u3082\u53d6\u5f97\u3057\u3066\u3044\u308b\n - Grafana\u306e\u8868\u793a\u4f8b\u3064\u304d(\u304a\u307e\u3051)\n\n \u3042\u305f\u308a\u3092\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n \u3046\u307e\u304f\u52d5\u3051\u3070\u4e0b\u8a18\u306e\u3088\u3046\u306b\u30dd\u30fc\u30c8\u306e\u6570\u304c\u591a\u3044\u30b9\u30a4\u30c3\u30c1\u3067\u3082\u30c8\u30c3\u30d710\u3060\u3051\u3092\u63cf\u753b\u3055\u305b\u308b\u3068\u3044\u3046\u3053\u3068\u3082\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n![l3_snmp.png](https://qiita-image-store.s3.amazonaws.com/0/15745/f5015fa9-126c-f73d-0dcf-b1cdba5657ec.png)\n\n\n Grafana\u3078\u8ffd\u52a0\u3059\u308b\u30e1\u30c8\u30ea\u30c3\u30af\u30b9\u306f `network.hdf5p35*.snmp.tx.*.sortByMaxima().highestMax(10).aliasSub((.)\\.(.)\\.(.)\\.(.)\\.(.), \\2.\\5)` \u306a\u611f\u3058\u3067\u3001\n\n  - `network` : \u63a5\u982d\u8a9e(\u30cf\u30fc\u30c9\u30b3\u30fc\u30c6\u30a3\u30f3\u30b0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u8abf\u6574\u3057\u3066\u304f\u3060\u3055\u3044)\n  - `hdf5p35*` : \u6a5f\u5668\u540d(\u756a\u53f7\u306a\u3069\u304c\u3064\u3044\u3066\u3044\u308c\u3070*\u3067\u5168\u53d6\u5f97)\n  - `snmp` : \u30c7\u30fc\u30bf\u53d6\u5f97\u5143\n  - `tx` : Transmitter(\u53d7\u4fe1\u3067\u3042\u308c\u3070rx\u3001\u3069\u3061\u3089\u3082\u3067\u3042\u308c\u3070*\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044)\n  - `*` : \u30dd\u30fc\u30c8(\u30dd\u30fc\u30c8\u540d\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308c\u3070\u540d\u79f0\u3001\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u756a\u53f7\u3001\u5168\u90e8\u3067\u3042\u308c\u3070*\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044)\n  - `sortByMaxima` : \u30c7\u30fc\u30bf\u91cf\u304c\u5927\u304d\u3044\u9806\u306b\u30bd\u30fc\u30c8\n  - `highestMax` : \u30c8\u30c3\u30d710\u3060\u3051\u3092\u63cf\u753b\n  - `aliasSub` : \u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u3066\u540d\u79f0\u3092\u6307\u5b9a\n\n\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001 `sortByMaxima().highestMax(10)` \u3092 `sumSeries()` \u306b\u3059\u308c\u3070\u5143\u8a18\u4e8b\u306e\u3088\u3046\u306b\u5408\u8a08\u306e\u5024\u3092\u63cf\u753b\u3055\u305b\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n\n\u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3001\n\n ```ruby:snmp_metrics.rb\n #!/usr/bin/env ruby\n require \"sensu-plugin/metric/cli\"\n require \"snmp\"\n require \"json\"\n \n class SNMPTrafficMetrics < Sensu::Plugin::Metric::CLI::Graphite\n   option :hosts,\n     short: \"-h HOSTS\",\n     long: \"--hosts HOSTS\",\n     default: \"localhost,127.0.0.1\"\n \n   option :community,\n     short: \"-c COMMUNITY\",\n     long: \"--community COMMUNITY\",\n     default: \"public\"\n \n   option :sleep,\n     long: \"--sleep SLEEP\",\n     proc: proc {|a| a.to_f},\n     default: 1\n \n   option :cache,\n     long: \"--cache\",\n     default: \"/tmp/snmp_cache.json\"\n \n   def oids type\n     lists = {\n       \"wlan_rx\" => \"1.3.6.1.4.1.25053.1.2.2.1.1.1.1.1.14\",   # for Ruckus ZoneDirector\n       \"wlan_tx\" => \"1.3.6.1.4.1.25053.1.2.2.1.1.1.1.1.16\",   # for Ruckus ZoneDirector\n       \"lan_rx\"  => \"1.3.6.1.2.1.2.2.1.10\",\n       \"lan_tx\"  => \"1.3.6.1.2.1.2.2.1.16\",\n       \"name\"    => \"1.3.6.1.2.1.1.5.0\",\n       \"port\"    => \"1.3.6.1.2.1.2.2.1.2\"\n     }\n     lists[type]\n   end\n \n   def get_portname(manager)\n     name = []\n     begin\n       manager.walk [oids(\"port\")] { |vb|name << vb[0].value}\n     end\n     name\n   end\n \n   def get_name(manager)\n     response = manager.get [oids(\"name\")]\n     name = nil\n     begin\n       response.each_varbind { |vb| name = vb.value }\n     end\n     name\n   end\n \n   def get_traffic(manager, type)\n     ret = {\"rx\" => [], \"tx\" => []}\n     traffic = [\"rx\", \"tx\"]\n     traffic.each do |x|\n       i = 1\n       loop do\n         oid = oids(\"#{type}_#{x}\")\n         response = manager.get [\"#{oid}.#{i}\"]\n         begin\n           response.each_varbind { |vb| ret[x][i - 1] = vb.value.to_i }\n         rescue NoMethodError => e\n           ret[x] = nil if i == 1\n           break\n         end\n         i += 1\n       end\n     end\n \n     ret = nil if ret[\"rx\"] == nil or ret[\"tx\"] == nil\n     ret\n   end\n \n   def run\n \n     json_file_path = config[:cache]\n     begin\n       cache = open(json_file_path) { |io| JSON.load io }\n     rescue\n       cache = {}\n     end\n \n     timestamp = Time.now.to_i\n     threads = []\n \n     config[:hosts].split(/,\\s?/).each do |host|\n       manager = SNMP::Manager.new host: host, community: config[:community]\n \n       portname =  get_portname manager\n \n       name = get_name manager\n       threads << Thread.new do\n         type = \"wlan\"\n         traffic = get_traffic(manager, type) # wlan\u3092\u8a66\u3057\u3066\n         if traffic == nil                    # wlan\u304c\u306a\u304b\u3063\u305f\u3089\n           type = \"lan\"                       # \u6709\u7dda\u30dd\u30fc\u30c8\n           traffic = get_traffic(manager, type)\n         end\n \n         now = Time.now\n         traffic_type = [\"rx\", \"tx\"]\n         traffic_type.each do |x|\n           traffic[x].each_index do |i|\n             if cache[name]!= nil && cache[name][type] != nil\n               traffic_value = traffic[x][i] - (cache[name][type][\"traffic\"][x][i].to_f || 0)\n               time = now - Time.at(cache[name][type][\"time\"])\n               output \"network.#{name.downcase}.snmp.#{x}.#{portname[i]}\", (traffic_value / time).round(2), timestamp\n             else\n               cache[name] = {} if cache[name] == nil\n               cache[name][type] = {}\n               break\n             end\n           end\n           break if cache[name][type] == {}\n         end\n         cache[name][type] = {\"time\" => now.to_i, \"traffic\" => {\"rx\" => traffic[\"rx\"], \"tx\" => traffic[\"tx\"]}}\n       end\n     end\n \n     threads.each { |thread| thread.join }\n \n     open(json_file_path, \"w\") { |io| JSON.dump(cache, io) }\n \n     ok\n   end\n end\n```\n\n\u8a2d\u5b9a\u306f\u4e0b\u8a18\u306e\u611f\u3058\u3067\u3001\u76e3\u8996\u3057\u305f\u3044\u6a5f\u5668\u306eIP\u3092\u6307\u5b9a(\"\"\u3067\u56f2\u3081\u3070\u300c, \u300d\u3067\u533a\u5207\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059)\u3059\u308c\u3070OK\u3002\n\n```json:snmp_metrics.json\n{\n  \"checks\": {\n    \"snmp_metrics\": {\n      \"type\": \"metric\",\n      \"handlers\": [\"graphite\"],\n      \"command\": \"ruby /etc/sensu/plugins/snmp_metrics.rb --host \\\"127.0.0.1, localhost\\\"\",\n      \"interval\": 15,\n      \"subscribers\": [ \"sensu\" ]\n    }\n  }\n}\n```\n\nL3\u30b9\u30a4\u30c3\u30c1\u3067\u898b\u3066\u307f\u308b\u3068\u3001\u3069\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u304b\u3089\u3069\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u3078\u306e\u6d41\u308c\u304c\u591a\u3044\u306e\u304b\u5206\u304b\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u306a\u304b\u306a\u304b\u3088\u308d\u3057\u3044\u611f\u3058\u3067\u3059\u306d\u3002\n"}