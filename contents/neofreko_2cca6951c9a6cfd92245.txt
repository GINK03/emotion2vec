{"context": " More than 1 year has passed since last update.It's possible, but you need to recompile nginx to add tcp proxy module. Fret not, I got you covered.\n\n.ebextensions/00-rebuild-nginx.config\npackages:\n  yum:\n    git: []\n    gcc: []\n    gcc-c++: []\n    make: []\n    zlib-devel: []\n    pcre-devel: []\n    openssl-devel: []\n    libxml2-devel: []\n    libxslt-devel: []\n    patch: []\n    gd-devel: []\n    perl-ExtUtils-Embed: []\n    GeoIP-devel: []\n    gperftools-devel: []\nfiles:\n  \"/root/build-nginx.sh\" :\n    mode: \"000755\"\n    owner: root\n    group: root\n    content: |\n      rm -rf build\n      mkdir ./build ; cd ./build\n      wget -O - http://nginx.org/download/nginx-1.6.2.tar.gz | tar xfvz -\n      git clone git://github.com/yaoweibin/nginx_tcp_proxy_module\n\n      cd nginx-1.6.2/\n      patch -p1 < ../nginx_tcp_proxy_module/tcp.patch\n\n      ./configure --add-module=../nginx_tcp_proxy_module \\\n      --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx \\\n      --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \\\n      --http-log-path=/var/log/nginx/access.log \\\n      --http-client-body-temp-path=/var/lib/nginx/tmp/client_body \\\n      --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \\\n      --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \\\n      --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi \\\n      --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/var/run/nginx.pid \\\n      --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx \\\n      --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_spdy_module \\\n      --with-http_realip_module --with-http_addition_module --with-http_xslt_module \\\n      --with-http_image_filter_module --with-http_geoip_module \\\n      --with-http_sub_module --with-http_dav_module --with-http_flv_module \\\n      --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module \\\n      --with-http_random_index_module --with-http_secure_link_module \\\n      --with-http_degradation_module --with-http_stub_status_module --with-http_perl_module \\\n      --with-mail --with-mail_ssl_module --with-pcre --with-google_perftools_module \\\n      --with-debug \\\n      --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic' \\\n      --with-ld-opt=' -Wl,-E'\n\n      make\n      make install\n  \"/etc/nginx/nginx-tcp-proxy.conf\":\n    mode: \"0644\"\n    owner: root\n    group: root\n    content: |\n      # placeholder\n      # /opt/elasticbeanstalk/hooks/appdeploy/enact/00before-flip.sh should update this\n\n  \"/opt/elasticbeanstalk/hooks/appdeploy/enact/00before-flip.sh\":\n    mode: \"0755\"\n    owner: root\n    group: root\n    content: |\n      . /opt/elasticbeanstalk/hooks/common.sh\n\n      EB_CONFIG_DOCKER_PORT_FILE=$(/opt/elasticbeanstalk/bin/get-config container -k port_file)\n\n      EB_CONFIG_DOCKER_STAGING_APP_FILE=$(/opt/elasticbeanstalk/bin/get-config container -k app_staging_file)\n      EB_CONFIG_DOCKER_CURRENT_APP_FILE=$(/opt/elasticbeanstalk/bin/get-config container -k app_deploy_file)\n\n      EB_CONFIG_DOCKER_IMAGE_STAGING=$(/opt/elasticbeanstalk/bin/get-config container -k staging_image)\n      EB_CONFIG_DOCKER_IMAGE_CURRENT=$(/opt/elasticbeanstalk/bin/get-config container -k deploy_image)\n\n      EB_CONFIG_HTTP_PORT=$(/opt/elasticbeanstalk/bin/get-config container -k instance_port)\n\n      # now the STAGING container is built and running, flip nginx to the new container\n      EB_CONFIG_NGINX_UPSTREAM_IP=$(docker inspect `cat $EB_CONFIG_DOCKER_STAGING_APP_FILE` | jq -r .[0].NetworkSettings.IPAddress)\n      EB_CONFIG_NGINX_UPSTREAM_PORT=`cat $EB_CONFIG_DOCKER_PORT_FILE`\n\n      # set up nginx\n      cat > /etc/nginx/nginx-tcp-proxy.conf <<EOF\n      tcp {\n        upstream docker {\n                server $EB_CONFIG_NGINX_UPSTREAM_IP:$EB_CONFIG_NGINX_UPSTREAM_PORT;\n        }\n\n        server {\n              listen $EB_CONFIG_HTTP_PORT;\n              proxy_pass docker;\n        }\n\n        access_log /var/log/nginx/tcp_access.log;\n      }\n      EOF\n\n\ncommands:\n  00-pwd:\n    command: pwd\n  install-tcp_proxy_module:\n    test: test -e $(2>&1 nginx -V | tr -- - '\\n' | grep _module | grep tcp)\n    command: chmod +x ~/build-nginx.sh && ~/build-nginx.sh\n\ncontainer_commands:\n  00-disable-default-http:\n    command: test ! -f /etc/nginx/sites-enabled/elasticbeanstalk-nginx-docker-proxy.conf || rm -f /etc/nginx/sites-enabled/elasticbeanstalk-nginx-docker-proxy.conf\n  01-include-tcp-proxy-setting:\n    command: grep 'nginx-tcp-proxy' /etc/nginx/nginx.conf || echo 'include       /etc/nginx/nginx-tcp-proxy.conf;' >> /etc/nginx/nginx.conf\n\n\n\nThis is way internet is important. Above text is build by gathering pieces from all over the place.\nIn essence it requires you to understand how EB build instance and deploy stuff.\nAbove configuration flags was taken out from Amazon Linux Docker AMI instance. Nothing was stripped out.\nI was re-using 00flip.sh content to construct the tcp proxy config. I put the script to run before 00flip.sh so nginx will properly take it into account. Conf file was put outside nginx's conf.d and sites-available since all files there will be included under http section.\nDefault site also have to be disabled so we can use the port for our TCP service.\nSeveral notes on setting up NAT (event if you are using VPC wizard)\n\nAlways create a new security group for private instances and nat instances. This will make security group management a breeze\nNeed at least 2 subnets on each availablity zone! (I don't have much network knowledge on my \"Ops\" profile - thus my ELB and instances are on different availability zone. Stupid, I know.)\nMake sure NAT is configured to accept inbound from private vpc\n\nOther take: Rebuilding docker image on each deployment or during autoscale event is not scalable\nFinally. T__T\n\u4e07\u6b73\uff01\uff01\n\nIt's possible, but you need to recompile nginx to add tcp proxy module. Fret not, I got you covered.\n\n```yaml:.ebextensions/00-rebuild-nginx.config\npackages:\n  yum:\n    git: []\n    gcc: []\n    gcc-c++: []\n    make: []\n    zlib-devel: []\n    pcre-devel: []\n    openssl-devel: []\n    libxml2-devel: []\n    libxslt-devel: []\n    patch: []\n    gd-devel: []\n    perl-ExtUtils-Embed: []\n    GeoIP-devel: []\n    gperftools-devel: []\nfiles:\n  \"/root/build-nginx.sh\" :\n    mode: \"000755\"\n    owner: root\n    group: root\n    content: |\n      rm -rf build\n      mkdir ./build ; cd ./build\n      wget -O - http://nginx.org/download/nginx-1.6.2.tar.gz | tar xfvz -\n      git clone git://github.com/yaoweibin/nginx_tcp_proxy_module\n\n      cd nginx-1.6.2/\n      patch -p1 < ../nginx_tcp_proxy_module/tcp.patch\n\n      ./configure --add-module=../nginx_tcp_proxy_module \\\n      --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx \\\n      --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log \\\n      --http-log-path=/var/log/nginx/access.log \\\n      --http-client-body-temp-path=/var/lib/nginx/tmp/client_body \\\n      --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \\\n      --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \\\n      --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi \\\n      --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/var/run/nginx.pid \\\n      --lock-path=/var/lock/subsys/nginx --user=nginx --group=nginx \\\n      --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_spdy_module \\\n      --with-http_realip_module --with-http_addition_module --with-http_xslt_module \\\n      --with-http_image_filter_module --with-http_geoip_module \\\n      --with-http_sub_module --with-http_dav_module --with-http_flv_module \\\n      --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module \\\n      --with-http_random_index_module --with-http_secure_link_module \\\n      --with-http_degradation_module --with-http_stub_status_module --with-http_perl_module \\\n      --with-mail --with-mail_ssl_module --with-pcre --with-google_perftools_module \\\n      --with-debug \\\n      --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic' \\\n      --with-ld-opt=' -Wl,-E'\n\n      make\n      make install\n  \"/etc/nginx/nginx-tcp-proxy.conf\":\n    mode: \"0644\"\n    owner: root\n    group: root\n    content: |\n      # placeholder\n      # /opt/elasticbeanstalk/hooks/appdeploy/enact/00before-flip.sh should update this\n\n  \"/opt/elasticbeanstalk/hooks/appdeploy/enact/00before-flip.sh\":\n    mode: \"0755\"\n    owner: root\n    group: root\n    content: |\n      . /opt/elasticbeanstalk/hooks/common.sh\n\n      EB_CONFIG_DOCKER_PORT_FILE=$(/opt/elasticbeanstalk/bin/get-config container -k port_file)\n\n      EB_CONFIG_DOCKER_STAGING_APP_FILE=$(/opt/elasticbeanstalk/bin/get-config container -k app_staging_file)\n      EB_CONFIG_DOCKER_CURRENT_APP_FILE=$(/opt/elasticbeanstalk/bin/get-config container -k app_deploy_file)\n\n      EB_CONFIG_DOCKER_IMAGE_STAGING=$(/opt/elasticbeanstalk/bin/get-config container -k staging_image)\n      EB_CONFIG_DOCKER_IMAGE_CURRENT=$(/opt/elasticbeanstalk/bin/get-config container -k deploy_image)\n\n      EB_CONFIG_HTTP_PORT=$(/opt/elasticbeanstalk/bin/get-config container -k instance_port)\n\n      # now the STAGING container is built and running, flip nginx to the new container\n      EB_CONFIG_NGINX_UPSTREAM_IP=$(docker inspect `cat $EB_CONFIG_DOCKER_STAGING_APP_FILE` | jq -r .[0].NetworkSettings.IPAddress)\n      EB_CONFIG_NGINX_UPSTREAM_PORT=`cat $EB_CONFIG_DOCKER_PORT_FILE`\n\n      # set up nginx\n      cat > /etc/nginx/nginx-tcp-proxy.conf <<EOF\n      tcp {\n        upstream docker {\n                server $EB_CONFIG_NGINX_UPSTREAM_IP:$EB_CONFIG_NGINX_UPSTREAM_PORT;\n        }\n\n        server {\n              listen $EB_CONFIG_HTTP_PORT;\n              proxy_pass docker;\n        }\n\n        access_log /var/log/nginx/tcp_access.log;\n      }\n      EOF\n\n\ncommands:\n  00-pwd:\n    command: pwd\n  install-tcp_proxy_module:\n    test: test -e $(2>&1 nginx -V | tr -- - '\\n' | grep _module | grep tcp)\n    command: chmod +x ~/build-nginx.sh && ~/build-nginx.sh\n\ncontainer_commands:\n  00-disable-default-http:\n    command: test ! -f /etc/nginx/sites-enabled/elasticbeanstalk-nginx-docker-proxy.conf || rm -f /etc/nginx/sites-enabled/elasticbeanstalk-nginx-docker-proxy.conf\n  01-include-tcp-proxy-setting:\n    command: grep 'nginx-tcp-proxy' /etc/nginx/nginx.conf || echo 'include       /etc/nginx/nginx-tcp-proxy.conf;' >> /etc/nginx/nginx.conf\n\n```\n\nThis is way internet is important. Above text is build by gathering pieces from all over the place.\n\nIn essence it requires you to understand how EB build instance and deploy stuff.\n\nAbove configuration flags was taken out from Amazon Linux Docker AMI instance. Nothing was stripped out.\n\nI was re-using ```00flip.sh``` content to construct the tcp proxy config. I put the script to run before ```00flip.sh``` so nginx will properly take it into account. Conf file was put outside nginx's ```conf.d``` and ```sites-available``` since all files there will be included under ```http``` section.\n\nDefault site also have to be disabled so we can use the port for our TCP service.\n\nSeveral notes on setting up NAT (event if you are using VPC wizard)\n\n* Always create a new security group for private instances and nat instances. This will make security group management a breeze\n* Need at least 2 subnets on each availablity zone! (I don't have much network knowledge on my \"Ops\" profile - thus my ELB and instances are on different availability zone. Stupid, I know.)\n* Make sure NAT is configured to accept inbound from private vpc\n\nOther take: Rebuilding docker image on each deployment or during autoscale event is not scalable\n\nFinally. T__T\n\n\u4e07\u6b73\uff01\uff01\n", "tags": ["fluentd", "ElasticBeanstalk"]}