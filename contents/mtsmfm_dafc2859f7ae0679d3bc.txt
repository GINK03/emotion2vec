{"context": " More than 1 year has passed since last update.\u554f\u984c\u306f\u3053\u3061\u3089\u3002\nhttp://qiita.com/Nabetani/items/34bf2a05099a47e193b6\n\u3042\u3048\u306a\u304f\u6557\u5317\u3002\n90 \u5206\u307b\u3069?\n60 \u5206 + \u5f53\u65e5\u30ed\u30b9\u30bf\u30a4\u30e0(20 \u5206\u304f\u3089\u3044?) + \u4f11\u61a9\u6642\u9593\u3067\u898b\u76f4\u3057(10 \u5206\u304f\u3089\u3044?)\nuniq \u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3053\u3068\u306b\u6c17\u3065\u3051\u305a\u9593\u306b\u3042\u3044\u307e\u305b\u3093\u3067\u3057\u305f  \nhttps://github.com/mtsmfm/offline_doukaku/tree/master/20140607\n\nsum.rb\nrequire 'bundler/setup'\nBundler.require\n\nclass Cell\n  attr_accessor :val\n\n  delegate :blank?, :present, to: :@val\n\n  def initialize(x, y, w, h)\n    @val = nil\n    @x = x\n    @y = y\n    @w = w\n    @h = h\n  end\n\n  def adjacent_list\n    return @list if @list\n\n    @list = []\n\n    if @x > 0\n      @h.times do |i|\n        @list << [@x - 1, @y + i]\n      end\n    end\n\n    if @y > 0\n      @w.times do |i|\n        @list << [@x + i, @y - 1]\n      end\n    end\n\n    @list\n  end\n\n  def add(other)\n    unless self.equal? other\n      @val ||= 0\n      @val += other.val\n    end\n  end\n\n  def cutoff!\n    @val = @val.to_s.last(2).to_i\n  end\n\n  def inspect\n    val.inspect + \" : (#{object_id})\"\n  end\n\n  def to_s\n    '%02d' % val\n  end\nend\n\ndef solve(input)\n  x, y = input.scan(/(\\d+)x(\\d+):/).first.map(&:to_i)\n  rects = input.scan(/:(.*)/).first.first.split(?,).map {|r| r.each_char.map(&:to_i) }\n\n  cells = Array.new(x) {|i| Array.new(y) {|j| Cell.new(i, j, 1, 1) } }\n\n  rects.each do |rect|\n    link(cells, rect)\n  end\n\n  cells[0][0].val = 1\n\n  calc(cells)\n\n  cells.last.last.to_s\nend\n\ndef link(cells, rect)\n  x, y, w, h = rect\n\n  cell = Cell.new(x, y, w, h)\n\n  w.times do |i|\n    h.times do |j|\n      cells[x + i][y + j] = cell\n    end\n  end\nend\n\ndef calc(cells)\n  until cells.all? {|row| row.all?(&:present?) }\n    cells.each.with_index {|row, x| row.each.with_index {|cell, y|\n      next if cell.present?\n\n      targets = cell.adjacent_list.map {|(x, y)| cells[x][y] }\n\n      next if targets.any?(&:blank?)\n\n      targets.uniq.each {|t| cell.add(t) }\n\n      cell.cutoff!\n    }}\n  end\nend\n\nDATA.each_line.with_index do |line, i|\n  input, expect = line.scan(/\"(.*)\", \"(.*)\"/).first\n  actual = solve(input)\n  print i\n  raise(\"#{input} expected: #{expect.inspect}, got: #{actual.inspect}\") unless actual == expect\n\n  print '.'\nend\n\nputs \"\\n-----------------------\"\nputs 'passed! yey!'\n\n__END__\n/*0*/ test( \"8x6:6214,3024,5213,5022,0223,7115\", \"32\" );\n/*1*/ test( \"1x1:\", \"01\" );\n/*2*/ test( \"2x3:\", \"03\" );\n/*3*/ test( \"9x7:\", \"03\" );\n/*4*/ test( \"2x3:0021\", \"03\" );\n/*5*/ test( \"2x3:1012\", \"03\" );\n/*6*/ test( \"2x3:0022\", \"02\" );\n/*7*/ test( \"9x9:1177\", \"98\" );\n/*8*/ test( \"7x7:2354\", \"02\" );\n/*9*/ test( \"3x6:1121,0333\", \"12\" );\n/*10*/ test( \"8x1:4031,0031\", \"01\" );\n/*11*/ test( \"8x2:3141,5031\", \"07\" );\n/*12*/ test( \"1x6:0213,0012\", \"01\" );\n/*13*/ test( \"3x3:1221,0021,0131\", \"04\" );\n/*14*/ test( \"9x2:1042,8012,6012\", \"18\" );\n/*15*/ test( \"3x6:0024,0432,2013\", \"03\" );\n/*16*/ test( \"4x3:1131,0221,2021\", \"10\" );\n/*17*/ test( \"8x4:3252,2121,6021\", \"48\" );\n/*18*/ test( \"3x3:2112,0022,0221\", \"03\" );\n/*19*/ test( \"9x9:1019,3019,5019,7019\", \"25\" );\n/*20*/ test( \"4x3:3112,0013,1122,2021\", \"04\" );\n/*21*/ test( \"4x8:1513,2028,0025,0612\", \"04\" );\n/*22*/ test( \"9x6:2262,5432,8014,3151\", \"39\" );\n/*23*/ test( \"5x2:2012,3121,3021,0121\", \"06\" );\n/*24*/ test( \"3x4:1321,1121,1221,0012\", \"05\" );\n/*25*/ test( \"5x3:0112,1122,4013,0041\", \"09\" );\n/*26*/ test( \"8x7:3552,3451,5031,0162\", \"95\" );\n/*27*/ test( \"9x9:2234,8412,0792,6421,1681\", \"52\" );\n/*28*/ test( \"4x7:0532,1012,3014,3512,2213\", \"60\" );\n/*29*/ test( \"8x5:4342,3033,0033,6122,1332\", \"08\" );\n/*30*/ test( \"6x7:1431,3331,1621,2531,4621\", \"36\" );\n/*31*/ test( \"4x9:1324,3116,0013,2722,2013,0712\", \"67\" );\n/*32*/ test( \"7x6:3241,4531,1412,0214,3012,5321\", \"54\" );\n/*33*/ test( \"2x9:1412,0021,0117,0821,1113,1612\", \"05\" );\n/*34*/ test( \"9x9:2544,6034,1342,6524,0523,4022\", \"99\" );\n/*35*/ test( \"5x6:0422,4113,2022,2313,4412,2221\", \"20\" );\n/*36*/ test( \"7x4:6212,0012,6012,2331,3023,0321\", \"10\" );\n/*37*/ test( \"4x4:3012,1321,2221,0212,0012,1022\", \"11\" );\n/*38*/ test( \"5x7:1132,1332,0312,4013,0641,4512\", \"77\" );\n/*39*/ test( \"5x5:0341,3221,3421,0221,1421,0151,1041\", \"54\" );\n/*40*/ test( \"9x9:6224,5642,0643,0333,3422,1033,4122\", \"36\" );\n/*41*/ test( \"6x8:0055,1642,5513,0531,5013,5312,0612\", \"12\" );\n/*42*/ test( \"9x9:4232,1465,7326,3042,1123,7122,0514,7021\", \"34\" );\n/*43*/ test( \"8x9:0361,5732,6413,0431,7313,1722,2141,3524,7112\", \"22\" );\n/*44*/ test( \"8x6:6422,1053,6122,1422,3333,6021,0412,0013,6321\", \"22\" );\n/*45*/ test( \"9x9:3324,5217,8116,2312,7314,6414,3061,7721,1231,1514,3712\", \"17\" );\n/*46*/ test( \"9x9:7424,4423,0227,3722,4053,2324,5722,2013,7821,6321,2712,6512\", \"39\" );\n/*47*/ test( \"8x7:5422,6022,2262,1522,3422,0122,0322,2032,6621,4621,0512,7412,5012\", \"06\" );\n\n\nGemfile\nsource 'https://rubygems.org'\n\nruby '2.1.2'\n\ngem 'activesupport', require: 'active_support/all'\ngem 'awesome_print'\ngem 'pry-byebug'\ngem 'tapp'\n\n\u554f\u984c\u306f\u3053\u3061\u3089\u3002\nhttp://qiita.com/Nabetani/items/34bf2a05099a47e193b6\n\n\u3042\u3048\u306a\u304f\u6557\u5317\u3002\n\n90 \u5206\u307b\u3069?\n60 \u5206 + \u5f53\u65e5\u30ed\u30b9\u30bf\u30a4\u30e0(20 \u5206\u304f\u3089\u3044?) + \u4f11\u61a9\u6642\u9593\u3067\u898b\u76f4\u3057(10 \u5206\u304f\u3089\u3044?)\n\n`uniq` \u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3053\u3068\u306b\u6c17\u3065\u3051\u305a\u9593\u306b\u3042\u3044\u307e\u305b\u3093\u3067\u3057\u305f :innocent: \n\nhttps://github.com/mtsmfm/offline_doukaku/tree/master/20140607\n\n## sum.rb\n\n```rb\nrequire 'bundler/setup'\nBundler.require\n\nclass Cell\n  attr_accessor :val\n\n  delegate :blank?, :present, to: :@val\n\n  def initialize(x, y, w, h)\n    @val = nil\n    @x = x\n    @y = y\n    @w = w\n    @h = h\n  end\n\n  def adjacent_list\n    return @list if @list\n\n    @list = []\n\n    if @x > 0\n      @h.times do |i|\n        @list << [@x - 1, @y + i]\n      end\n    end\n\n    if @y > 0\n      @w.times do |i|\n        @list << [@x + i, @y - 1]\n      end\n    end\n\n    @list\n  end\n\n  def add(other)\n    unless self.equal? other\n      @val ||= 0\n      @val += other.val\n    end\n  end\n\n  def cutoff!\n    @val = @val.to_s.last(2).to_i\n  end\n\n  def inspect\n    val.inspect + \" : (#{object_id})\"\n  end\n\n  def to_s\n    '%02d' % val\n  end\nend\n\ndef solve(input)\n  x, y = input.scan(/(\\d+)x(\\d+):/).first.map(&:to_i)\n  rects = input.scan(/:(.*)/).first.first.split(?,).map {|r| r.each_char.map(&:to_i) }\n\n  cells = Array.new(x) {|i| Array.new(y) {|j| Cell.new(i, j, 1, 1) } }\n\n  rects.each do |rect|\n    link(cells, rect)\n  end\n\n  cells[0][0].val = 1\n\n  calc(cells)\n\n  cells.last.last.to_s\nend\n\ndef link(cells, rect)\n  x, y, w, h = rect\n\n  cell = Cell.new(x, y, w, h)\n\n  w.times do |i|\n    h.times do |j|\n      cells[x + i][y + j] = cell\n    end\n  end\nend\n\ndef calc(cells)\n  until cells.all? {|row| row.all?(&:present?) }\n    cells.each.with_index {|row, x| row.each.with_index {|cell, y|\n      next if cell.present?\n\n      targets = cell.adjacent_list.map {|(x, y)| cells[x][y] }\n\n      next if targets.any?(&:blank?)\n\n      targets.uniq.each {|t| cell.add(t) }\n\n      cell.cutoff!\n    }}\n  end\nend\n\nDATA.each_line.with_index do |line, i|\n  input, expect = line.scan(/\"(.*)\", \"(.*)\"/).first\n  actual = solve(input)\n  print i\n  raise(\"#{input} expected: #{expect.inspect}, got: #{actual.inspect}\") unless actual == expect\n\n  print '.'\nend\n\nputs \"\\n-----------------------\"\nputs 'passed! yey!'\n\n__END__\n/*0*/ test( \"8x6:6214,3024,5213,5022,0223,7115\", \"32\" );\n/*1*/ test( \"1x1:\", \"01\" );\n/*2*/ test( \"2x3:\", \"03\" );\n/*3*/ test( \"9x7:\", \"03\" );\n/*4*/ test( \"2x3:0021\", \"03\" );\n/*5*/ test( \"2x3:1012\", \"03\" );\n/*6*/ test( \"2x3:0022\", \"02\" );\n/*7*/ test( \"9x9:1177\", \"98\" );\n/*8*/ test( \"7x7:2354\", \"02\" );\n/*9*/ test( \"3x6:1121,0333\", \"12\" );\n/*10*/ test( \"8x1:4031,0031\", \"01\" );\n/*11*/ test( \"8x2:3141,5031\", \"07\" );\n/*12*/ test( \"1x6:0213,0012\", \"01\" );\n/*13*/ test( \"3x3:1221,0021,0131\", \"04\" );\n/*14*/ test( \"9x2:1042,8012,6012\", \"18\" );\n/*15*/ test( \"3x6:0024,0432,2013\", \"03\" );\n/*16*/ test( \"4x3:1131,0221,2021\", \"10\" );\n/*17*/ test( \"8x4:3252,2121,6021\", \"48\" );\n/*18*/ test( \"3x3:2112,0022,0221\", \"03\" );\n/*19*/ test( \"9x9:1019,3019,5019,7019\", \"25\" );\n/*20*/ test( \"4x3:3112,0013,1122,2021\", \"04\" );\n/*21*/ test( \"4x8:1513,2028,0025,0612\", \"04\" );\n/*22*/ test( \"9x6:2262,5432,8014,3151\", \"39\" );\n/*23*/ test( \"5x2:2012,3121,3021,0121\", \"06\" );\n/*24*/ test( \"3x4:1321,1121,1221,0012\", \"05\" );\n/*25*/ test( \"5x3:0112,1122,4013,0041\", \"09\" );\n/*26*/ test( \"8x7:3552,3451,5031,0162\", \"95\" );\n/*27*/ test( \"9x9:2234,8412,0792,6421,1681\", \"52\" );\n/*28*/ test( \"4x7:0532,1012,3014,3512,2213\", \"60\" );\n/*29*/ test( \"8x5:4342,3033,0033,6122,1332\", \"08\" );\n/*30*/ test( \"6x7:1431,3331,1621,2531,4621\", \"36\" );\n/*31*/ test( \"4x9:1324,3116,0013,2722,2013,0712\", \"67\" );\n/*32*/ test( \"7x6:3241,4531,1412,0214,3012,5321\", \"54\" );\n/*33*/ test( \"2x9:1412,0021,0117,0821,1113,1612\", \"05\" );\n/*34*/ test( \"9x9:2544,6034,1342,6524,0523,4022\", \"99\" );\n/*35*/ test( \"5x6:0422,4113,2022,2313,4412,2221\", \"20\" );\n/*36*/ test( \"7x4:6212,0012,6012,2331,3023,0321\", \"10\" );\n/*37*/ test( \"4x4:3012,1321,2221,0212,0012,1022\", \"11\" );\n/*38*/ test( \"5x7:1132,1332,0312,4013,0641,4512\", \"77\" );\n/*39*/ test( \"5x5:0341,3221,3421,0221,1421,0151,1041\", \"54\" );\n/*40*/ test( \"9x9:6224,5642,0643,0333,3422,1033,4122\", \"36\" );\n/*41*/ test( \"6x8:0055,1642,5513,0531,5013,5312,0612\", \"12\" );\n/*42*/ test( \"9x9:4232,1465,7326,3042,1123,7122,0514,7021\", \"34\" );\n/*43*/ test( \"8x9:0361,5732,6413,0431,7313,1722,2141,3524,7112\", \"22\" );\n/*44*/ test( \"8x6:6422,1053,6122,1422,3333,6021,0412,0013,6321\", \"22\" );\n/*45*/ test( \"9x9:3324,5217,8116,2312,7314,6414,3061,7721,1231,1514,3712\", \"17\" );\n/*46*/ test( \"9x9:7424,4423,0227,3722,4053,2324,5722,2013,7821,6321,2712,6512\", \"39\" );\n/*47*/ test( \"8x7:5422,6022,2262,1522,3422,0122,0322,2032,6621,4621,0512,7412,5012\", \"06\" );\n```\n\n## Gemfile\n\n```rb\nsource 'https://rubygems.org'\n\nruby '2.1.2'\n\ngem 'activesupport', require: 'active_support/all'\ngem 'awesome_print'\ngem 'pry-byebug'\ngem 'tapp'\n```\n", "tags": ["yhpg", "Ruby", "\u3069\u3046\u66f8\u304f"]}