{"tags": ["cppBuilder", "stringOperation"], "context": " More than 1 year has passed since last update.\n\u52d5\u4f5c\u78ba\u8a8d\nC++ Builder XE4\n\n\nhttp://qiita.com/7of9/items/e03083db57cb5cb77ef8\n\u306b\u3066 muro\u3055\u3093\u306b\u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305fC#\u3067\u306e ToCharArray() \u3068 Split()\u3092C++ Builder\u3067\u3082\u5b9f\u88c5\u3067\u304d\u306a\u3044\u304b\u8a66\u3057\u305f\u3002\nstatic bool ToCharArray(String srcStr, TStringList *dstSL)\n{\n    if (dstSL == NULL) {\n        return false;\n    }\n\n    String code;\n    for(int idx=1; idx <= srcStr.Length(); idx++) {\n        code = srcStr.SubString(idx, 1);\n        dstSL->Add(code);\n    }\n\n    return true;\n}\n\nstatic bool Split(String srcStr, TStringList *sepSL, TStringList *dstSL)\n{\n    if (sepSL == NULL || dstSL == NULL) {\n        return false;\n    }\n\n    String res = L\"\";\n    String code;\n    bool isDelimiter;\n\n    for(int idx=1; idx <= srcStr.Length(); idx++) {\n        code = srcStr.SubString(idx, 1);\n        isDelimiter = false;\n        for(int si=0; si < sepSL->Count; si++) {\n            if (code == sepSL->Strings[si]) {\n                isDelimiter = true;\n                break;\n            }\n        }\n        if (isDelimiter) {\n            OutputDebugString(res.c_str());\n            if (res.Length() > 0) {\n                dstSL->Add(res);\n                res = L\"\";\n            }\n        } else {\n            res = res + code;\n        }\n    }\n\n    if (res.Length() > 0) {\n        dstSL->Add(res);\n        OutputDebugString(res.c_str());\n    }\n    return true;\n}\n\n\nvoid __fastcall TForm1::Button2Click(TObject *Sender)\n{\n    String separators = L\",{:}\";\n    String sample = L\"{\\\"AAA\\\":{\\\"bbb\\\",\\\"ccc\\\"},\\\"ddd\\\"\";\n\n    std::unique_ptr<TStringList> separator(new TStringList);\n    std::unique_ptr<TStringList> element(new TStringList);\n\n    bool res;\n    res = ToCharArray( separators, separator.get() );\n    if (res == false) {\n        return;\n    }\n\n    res = Split( sample, separator.get(), element.get() );\n    if (res == false) {\n        return;\n    }\n\n    for(int idx=0; idx < element->Count; idx++) {\n        Memo1->Lines->Add(element->Strings[idx]);\n    }\n}\n\n\n\u7d50\u679c\n\"AAA\"\n\"bbb\"\n\"ccc\"\n\"ddd\"\n\n\n```txt:\u52d5\u4f5c\u78ba\u8a8d\nC++ Builder XE4\n```\n\nhttp://qiita.com/7of9/items/e03083db57cb5cb77ef8\n\u306b\u3066 muro\u3055\u3093\u306b\u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305fC#\u3067\u306e ToCharArray() \u3068 Split()\u3092C++ Builder\u3067\u3082\u5b9f\u88c5\u3067\u304d\u306a\u3044\u304b\u8a66\u3057\u305f\u3002\n\n```cpp\nstatic bool ToCharArray(String srcStr, TStringList *dstSL)\n{\n\tif (dstSL == NULL) {\n\t\treturn false;\n\t}\n\n\tString code;\n\tfor(int idx=1; idx <= srcStr.Length(); idx++) {\n\t\tcode = srcStr.SubString(idx, 1);\n\t\tdstSL->Add(code);\n\t}\n\n\treturn true;\n}\n\nstatic bool Split(String srcStr, TStringList *sepSL, TStringList *dstSL)\n{\n\tif (sepSL == NULL || dstSL == NULL) {\n\t\treturn false;\n\t}\n\n\tString res = L\"\";\n\tString code;\n\tbool isDelimiter;\n\n\tfor(int idx=1; idx <= srcStr.Length(); idx++) {\n\t\tcode = srcStr.SubString(idx, 1);\n\t\tisDelimiter = false;\n\t\tfor(int si=0; si < sepSL->Count; si++) {\n\t\t\tif (code == sepSL->Strings[si]) {\n\t\t\t\tisDelimiter = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isDelimiter) {\n\t\t\tOutputDebugString(res.c_str());\n\t\t\tif (res.Length() > 0) {\n\t\t\t\tdstSL->Add(res);\n\t\t\t\tres = L\"\";\n\t\t\t}\n\t\t} else {\n\t\t\tres = res + code;\n\t\t}\n\t}\n\n\tif (res.Length() > 0) {\n\t\tdstSL->Add(res);\n\t\tOutputDebugString(res.c_str());\n\t}\n\treturn true;\n}\n\n\nvoid __fastcall TForm1::Button2Click(TObject *Sender)\n{\n\tString separators = L\",{:}\";\n\tString sample = L\"{\\\"AAA\\\":{\\\"bbb\\\",\\\"ccc\\\"},\\\"ddd\\\"\";\n\n\tstd::unique_ptr<TStringList> separator(new TStringList);\n\tstd::unique_ptr<TStringList> element(new TStringList);\n\n\tbool res;\n\tres = ToCharArray( separators, separator.get() );\n\tif (res == false) {\n\t\treturn;\n\t}\n\n\tres = Split( sample, separator.get(), element.get() );\n\tif (res == false) {\n\t\treturn;\n\t}\n\n\tfor(int idx=0; idx < element->Count; idx++) {\n        Memo1->Lines->Add(element->Strings[idx]);\n    }\n}\n```\n\n```txt:\u7d50\u679c\n\"AAA\"\n\"bbb\"\n\"ccc\"\n\"ddd\"\n```\n\n"}