{"context": " More than 1 year has passed since last update.Vyatta\u306eREST API\u3067\u3001\u4f5c\u6210\u3057\u305fconfig\u3092\u30ea\u30e2\u30fc\u30c8\u304b\u3089\u4e00\u62ec\u3067\u8a2d\u5b9a&commit\u3067\u304d\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002REST API\u306erequest\u3092\u4f5c\u308b\u306e\u306b\u306f Requests \u3068\u3044\u3046Python\u306eHTTP\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\nssh\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u3066config\u3092\u30b3\u30d4\u30da\u3057\u3066\u3082\u4e00\u62ec\u3067config\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u624b\u4f5c\u696d\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u306e\u65b9\u6cd5\u3067\u3042\u308c\u3070\u3001\u30ea\u30e2\u30fc\u30c8\u304b\u3089\u30b3\u30de\u30f3\u30c9\u3060\u3051\u3067\u8a2d\u5b9a\u304c\u5909\u66f4\u3067\u304d\u308b\u306e\u3067\u4f5c\u696d\u304c\u304b\u306a\u308a\u697d\u306b\u306a\u308a\u307e\u3059\u3057\u3001provisioning\u6642\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u5b9f\u884c\u3059\u308b\u306a\u3069\u51e6\u7406\u306e\u81ea\u52d5\u5316\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n\u524d\u63d0\u3068\u306a\u308b\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6\n\nVyatta\u306fSubscription Edition\u3067\u3042\u308b\u3053\u3068\n\n\nVyatta Community Edition\u3067\u306fREST API\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\nSoftLayer\u306e\u5834\u5408\u306fVyatta Gateway Appliance\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\n\n\n\nRequests \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\n$ pip install requests \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\n\n\n\u6ce8\u610f\u70b9\n\u4f7f\u7528\u306b\u3042\u305f\u3063\u3066\u306f\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n\nconfig\u3092\u5909\u66f4\u524d\u306e\u72b6\u614b\u306b\u5143\u306b\u623b\u3059\u6a5f\u80fd\u306f\u5b9f\u88c5\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u5834\u5408\u306fssh\u3067Vyatta\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3001delete\u30b3\u30de\u30f3\u30c9\u3067\u8a2d\u5b9a\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ncommit\u3055\u308c\u308b\u306e\u3067\u3001\u5909\u66f4\u3059\u308bconfig\u306e\u5185\u5bb9\u306b\u3088\u3063\u3066\u306fVyatta\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u5834\u5408\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u5b9f\u884c\u306e\u969b\u306f\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u3082\u3057\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304f\u306a\u3063\u305f\u5834\u5408\u306f\u3001SoftLayer\u306e\u30c1\u30b1\u30c3\u30c8\u3067\u4fee\u5fa9\u3092\u304a\u9858\u3044\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u304d\u3063\u3068\u512a\u3057\u3044SoftLayer\u306e\u30b5\u30dd\u30fc\u30c8\u30a8\u30f3\u30b8\u30cb\u30a2\u304c\u52a9\u3051\u3066\u304f\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nIPMI\u3092\u4f7f\u3063\u3066\u30ed\u30fc\u30ab\u30eb\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u4fee\u6b63\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u3002\n\u307e\u305f\u306f\u3001\u5909\u66f4\u3057\u305fconfig\u306fcommit\u3057\u3066\u3044\u307e\u3059\u304csave\u306f\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u6700\u60aa\u81ea\u5206\u3067Vyatta\u3092\u518d\u8d77\u52d5\u3059\u308c\u3070\u5143\u306e\u8a2d\u5b9a\u306b\u623b\u308a\u307e\u3059\u3002\n\n\n\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\n\nVyattaControl\u30af\u30e9\u30b9\n\nVyatta.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport re\nimport urllib\nimport requests\nrequests.packages.urllib3.disable_warnings()    # Surpress \"InsecureRequestWarning\" warning\nimport Vyatta\nimport vyuser\n\nclass VyattaControl(object):\n    \"\"\"\n    Provides methods to show and modify Vyatta status and configurations.\n    \"\"\"\n\n    def __init__(self, urlBase, user, passwd):\n\n        self.urlBase = urlBase\n        self.urlConfBase = urlBase + 'rest/conf'\n        self.urlOpBase = urlBase + 'rest/op'\n        self.user = user\n        self.passwd = passwd\n\n\n    def getOpId(self, urlOpId):\n        \"\"\"\n        Get the operation id, which is substring of the Location header in HTTP response.\n\n        :param urlOpPost:\n        :return:\n        \"\"\"\n\n        rop = requests.post(urlOpId, auth=(self.user, self.passwd), verify=False)   # Request to get operation id\n        return rop.headers['Location'].split('/')[2]    # Get Location header\n\n\n    def getConfId(self):\n        \"\"\"\n        Get the configuration id, which is substring of the Location header in HTTP response.\n\n        :return:\n        \"\"\"\n\n        rconf = requests.post(self.urlConfBase, auth=(self.user, self.passwd), verify=False)\n        return rconf.headers['Location'].split('/')[2]\n\n\n    def deleteConfId(self, confId):\n        \"\"\"\n        Delete existing Vyatta configuration session\n\n        :param confId: Configuration ID to be deleted\n        :return: HTTP status code for DELETE request\n        \"\"\"\n\n        urlConfDelete = self.urlConfBase + '/' + confId\n        rdel = requests.delete(urlConfDelete, auth=(self.user, self.passwd), verify=False)\n        return rdel.status_code\n\n\n    def commandOperational(self, opCommandFileName):\n        \"\"\"\n        Call Vyatta operational mode commands from opCommandFileName file.\n\n        :param opCommandFileName: Input file for Vyatta operational mode commands\n        :return:\n        \"\"\"\n\n        with open(opCommandFileName, encoding='utf-8') as opCommandFile:\n            for line in opCommandFile:\n\n                urlOpCommand = self.urlOpBase + '/' + '/'.join(line.split(None))\n                ropResult = requests.get(self.urlOpBase + '/' + self.getOpId(urlOpCommand),\n                                         auth=(self.user, self.passwd),\n                                         verify=False)    # Request to get the results\n                print('$ ' + line)\n                print(ropResult.text)\n\n\n    def createEncodedUrl(self, confId, string):\n        \"\"\"\n        URLencode every configuration words and form proper URL for REST API requests.\n\n        :param confId: Configuration session ID\n        :param string: One line Vyatta configuration commands and parameters\n        :return: Encoded URL for Vyatta REST API\n\n        TODO: Fix wrong encoding when spaces in description \"\" in Vyatta configuration is used.\n              ex. description \"IPSEC to HQ\". In the meantime, avoid using \"\" in Vyatta configuration.\n        \"\"\"\n\n        encodedWord = []\n        for word in string.split():\n            encodedWord.append(urllib.parse.quote(word, safe=\"\"))   # Encode each words, then make a list of words\n\n        encodedUrl = self.urlConfBase + '/' + confId + '/' \\\n                     + '/'.join(' '.join(encodedWord).split(None))\n\n        return encodedUrl\n\n\n    def editConfig(self, confFileName):\n        \"\"\"\n        Read configurations from a file and send requests to Vyatta via REST API,\n        then actually modify Vyatta configuration and commit configuration changes.\n\n        :param confFileName: A file which has the configurations to apply\n        :return: HTTP status code for deleteConfId()\n        \"\"\"\n\n        # Set configurations\n        with open(confFileName, encoding='utf-8') as confFile:\n\n            confId = self.getConfId()   # Get configuration ID\n\n            for line in confFile:\n                if not (re.compile(\"^#\").match(line)\n                        or re.compile(\"^$\").match(line)):      # Skip line matches with \"^#\" or \"^$\"\n                    urlConfPut = self.createEncodedUrl(confId, line)\n\n                    rconf = requests.put(urlConfPut,\n                                         auth=(self.user, self.passwd),\n                                         verify=False)   # Request for configuration commands\n\n                    print(\"%s : %s\" % (urlConfPut, rconf.status_code))\n\n        # Commit configurations\n        self.commitConfig(confId)\n\n        # Delete conf-id and return HTTP status code\n        return self.deleteConfId(confId)\n\n\n    def commitConfig(self, confId):\n        \"\"\"\n        Commit configuration changes\n\n        :param confId: Configuration session ID\n        :return: HTTP status code\n        \"\"\"\n\n        urlConfCommit = self.urlConfBase + '/' + confId + '/commit'\n        rconf = requests.post(urlConfCommit, auth=(self.user, self.passwd), verify=False)   # Request for commit\n        print(\"%s : %s\" % (urlConfCommit, rconf.status_code))\n        return rconf.status_code\n\n\n    def saveConfig(self, confId):\n        \"\"\"\n        To be implemented\n\n        :param confId:\n        :return:\n        \"\"\"\n\n        pass\n\n\n    def revertConfig(self, confId):\n        \"\"\"\n        To be implemented\n\n        :param confId:\n        :return:\n        \"\"\"\n\n        pass\n\n\nif __name__ == \"__main__\":\n    # Test code\n    pass\n\n\n\n\u5b9f\u884c\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4f8b\n\n\u5b9f\u884c\u30b9\u30af\u30ea\u30d7\u30c8\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport Vyatta\nimport vyuser\n\nuser = vyuser.VYUSER\npasswd = vyuser.VYPASSWD\nurlBase = vyuser.URLBASE\n\nvy = Vyatta.VyattaControl(urlBase, user, passwd)\nvy.editConfig('vy_configuration.conf')\nvy.commandOperational('vy_op_command.conf')\n\n\nVyatta\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u30d5\u30a1\u30a4\u30eb\n\nvyuser.conf\nVYUSER = \"vyatta\"\nVYPASSWD = \"<vyatta password>\"\nURLBASE = \"https://10.x.x.x/\"\n\n\n\nconfig\u306e\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\n\u5909\u66f4\u3059\u308bVyatta\u306econfig\u304c\u8a18\u8f09\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3002\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5316\u3057\u3066\u3001\u30a2\u30c9\u30ec\u30b9\u7b49\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u4e0e\u3048\u308b\u3068\u3001\u69cb\u6210\u30d1\u30bf\u30fc\u30f3\u306b\u5fdc\u3058\u305fconfig\u3092\u81ea\u52d5\u751f\u6210\u3059\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u304c\u307b\u3057\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u4eca\u306e\u3068\u3053\u308d\u306f\u5909\u66f4\u3059\u308bconfig\u3092\u5168\u3066\u624b\u3067\u500b\u5225\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306f\u3001BYOIP\u306e\u305f\u3081\u306bGRE over IPsec\u3092\u78ba\u7acb\u3059\u308b\u8a2d\u5b9a\u306econfig\u306e\u4f8b\u3067\u3059\u3002\n\nvy_configuration.conf\n# Comments start with #\n\n# BYOIP subnet\nset interfaces bonding bond0 address 192.168.2.1/24\n\n# GRE settings\nset interfaces tunnel tun0 address 192.168.10.1/30\nset interfaces tunnel tun0 encapsulation gre\nset interfaces tunnel tun0 multicast enable\nset interfaces tunnel tun0 local-ip 111.111.111.111\nset interfaces tunnel tun0 remote-ip 222.222.222.222\n\n# IPsec ESP policy settings\nset vpn ipsec esp-group ESP1 lifetime 3600\nset vpn ipsec esp-group ESP1 mode tunnel\nset vpn ipsec esp-group ESP1 pfs enable\nset vpn ipsec esp-group ESP1 proposal 1 encryption aes128\nset vpn ipsec esp-group ESP1 proposal 1 hash sha1\n\n# IPsec IKE policy settings\nset vpn ipsec ike-group IKE1 lifetime 86400\nset vpn ipsec ike-group IKE1 proposal 1 dh-group 5\nset vpn ipsec ike-group IKE1 proposal 1 encryption aes128\nset vpn ipsec ike-group IKE1 proposal 1 hash sha1\n\n# IPsec interface settings\nset vpn ipsec ipsec-interfaces interface bond1\n\n# IPsec VPN settings\nset vpn ipsec site-to-site peer 222.222.222.222 authentication mode pre-shared-secret\nset vpn ipsec site-to-site peer 222.222.222.222 authentication pre-shared-secret test_key_1\nset vpn ipsec site-to-site peer 222.222.222.222 default-esp-group ESP1\nset vpn ipsec site-to-site peer 222.222.222.222 ike-group IKE1\nset vpn ipsec site-to-site peer 222.222.222.222 local-address 111.111.111.111\nset vpn ipsec site-to-site peer 222.222.222.222 tunnel 1 protocol gre\n\n# Static Route\nset protocols static route 192.168.1.0/24 next-hop 192.168.10.2\n\n\n\n\u5b9f\u884c\u3059\u308bOperational Mode\u30b3\u30de\u30f3\u30c9\u306e\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\nconfig\u3092\u78ba\u8a8d\u3057\u305f\u308a\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001Operational Mode\u306e\u30b3\u30de\u30f3\u30c9\u3082\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5165\u529b\u3057\u3066\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\nvy_op_command.conf\nshow configuration\nshow interfaces\nshow vpn ipsec sa\n\n\nVyatta\u306eREST API\u3067\u3001\u4f5c\u6210\u3057\u305fconfig\u3092\u30ea\u30e2\u30fc\u30c8\u304b\u3089\u4e00\u62ec\u3067\u8a2d\u5b9a&commit\u3067\u304d\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002REST API\u306erequest\u3092\u4f5c\u308b\u306e\u306b\u306f [Requests](http://docs.python-requests.org/en/latest/#) \u3068\u3044\u3046Python\u306eHTTP\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\nssh\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u3066config\u3092\u30b3\u30d4\u30da\u3057\u3066\u3082\u4e00\u62ec\u3067config\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u624b\u4f5c\u696d\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u306e\u65b9\u6cd5\u3067\u3042\u308c\u3070\u3001\u30ea\u30e2\u30fc\u30c8\u304b\u3089\u30b3\u30de\u30f3\u30c9\u3060\u3051\u3067\u8a2d\u5b9a\u304c\u5909\u66f4\u3067\u304d\u308b\u306e\u3067\u4f5c\u696d\u304c\u304b\u306a\u308a\u697d\u306b\u306a\u308a\u307e\u3059\u3057\u3001provisioning\u6642\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u5b9f\u884c\u3059\u308b\u306a\u3069\u51e6\u7406\u306e\u81ea\u52d5\u5316\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\n\n\n## \u524d\u63d0\u3068\u306a\u308b\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6\n\n- Vyatta\u306fSubscription Edition\u3067\u3042\u308b\u3053\u3068\n  - Vyatta Community Edition\u3067\u306fREST API\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u305b\u3093\n  - SoftLayer\u306e\u5834\u5408\u306fVyatta Gateway Appliance\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\n- [Requests](http://docs.python-requests.org/en/latest/#) \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb  \n  - ```$ pip install requests``` \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\n## \u6ce8\u610f\u70b9\n\n\u4f7f\u7528\u306b\u3042\u305f\u3063\u3066\u306f\u3044\u304f\u3064\u304b\u6ce8\u610f\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n\n- config\u3092\u5909\u66f4\u524d\u306e\u72b6\u614b\u306b\u5143\u306b\u623b\u3059\u6a5f\u80fd\u306f\u5b9f\u88c5\u3057\u3066\u3044\u307e\u305b\u3093\u3002\u305d\u306e\u5834\u5408\u306fssh\u3067Vyatta\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3001delete\u30b3\u30de\u30f3\u30c9\u3067\u8a2d\u5b9a\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n- commit\u3055\u308c\u308b\u306e\u3067\u3001\u5909\u66f4\u3059\u308bconfig\u306e\u5185\u5bb9\u306b\u3088\u3063\u3066\u306fVyatta\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u5834\u5408\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u5b9f\u884c\u306e\u969b\u306f\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n  - \u3082\u3057\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u304f\u306a\u3063\u305f\u5834\u5408\u306f\u3001SoftLayer\u306e\u30c1\u30b1\u30c3\u30c8\u3067\u4fee\u5fa9\u3092\u304a\u9858\u3044\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u304d\u3063\u3068\u512a\u3057\u3044SoftLayer\u306e\u30b5\u30dd\u30fc\u30c8\u30a8\u30f3\u30b8\u30cb\u30a2\u304c\u52a9\u3051\u3066\u304f\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n  - [IPMI\u3092\u4f7f\u3063\u3066](https://www.ibm.com/developerworks/community/blogs/560da618-352c-4903-9e75-2dadfda71076/entry/softlayer%25e3%2581%25ae%25e6%25ad%25a9%25e3%2581%258d%25e6%2596%25b9_ipmi%25e3%2581%25b8%25e3%2581%25ae%25e3%2582%25a2%25e3%2582%25af%25e3%2582%25bb%25e3%2582%25b9%25e6%2596%25b9%25e6%25b3%2595?lang=en)\u30ed\u30fc\u30ab\u30eb\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u4fee\u6b63\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3067\u3057\u3087\u3046\u3002\n  - \u307e\u305f\u306f\u3001\u5909\u66f4\u3057\u305fconfig\u306fcommit\u3057\u3066\u3044\u307e\u3059\u304csave\u306f\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u6700\u60aa\u81ea\u5206\u3067Vyatta\u3092\u518d\u8d77\u52d5\u3059\u308c\u3070\u5143\u306e\u8a2d\u5b9a\u306b\u623b\u308a\u307e\u3059\u3002\n\n\n## \u30e2\u30b8\u30e5\u30fc\u30eb\n\n### VyattaControl\u30af\u30e9\u30b9\n\n```py:Vyatta.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport re\nimport urllib\nimport requests\nrequests.packages.urllib3.disable_warnings()    # Surpress \"InsecureRequestWarning\" warning\nimport Vyatta\nimport vyuser\n\nclass VyattaControl(object):\n    \"\"\"\n    Provides methods to show and modify Vyatta status and configurations.\n    \"\"\"\n\n    def __init__(self, urlBase, user, passwd):\n\n        self.urlBase = urlBase\n        self.urlConfBase = urlBase + 'rest/conf'\n        self.urlOpBase = urlBase + 'rest/op'\n        self.user = user\n        self.passwd = passwd\n\n\n    def getOpId(self, urlOpId):\n        \"\"\"\n        Get the operation id, which is substring of the Location header in HTTP response.\n\n        :param urlOpPost:\n        :return:\n        \"\"\"\n\n        rop = requests.post(urlOpId, auth=(self.user, self.passwd), verify=False)   # Request to get operation id\n        return rop.headers['Location'].split('/')[2]    # Get Location header\n\n\n    def getConfId(self):\n        \"\"\"\n        Get the configuration id, which is substring of the Location header in HTTP response.\n\n        :return:\n        \"\"\"\n\n        rconf = requests.post(self.urlConfBase, auth=(self.user, self.passwd), verify=False)\n        return rconf.headers['Location'].split('/')[2]\n\n\n    def deleteConfId(self, confId):\n        \"\"\"\n        Delete existing Vyatta configuration session\n\n        :param confId: Configuration ID to be deleted\n        :return: HTTP status code for DELETE request\n        \"\"\"\n\n        urlConfDelete = self.urlConfBase + '/' + confId\n        rdel = requests.delete(urlConfDelete, auth=(self.user, self.passwd), verify=False)\n        return rdel.status_code\n\n\n    def commandOperational(self, opCommandFileName):\n        \"\"\"\n        Call Vyatta operational mode commands from opCommandFileName file.\n\n        :param opCommandFileName: Input file for Vyatta operational mode commands\n        :return:\n        \"\"\"\n\n        with open(opCommandFileName, encoding='utf-8') as opCommandFile:\n            for line in opCommandFile:\n\n                urlOpCommand = self.urlOpBase + '/' + '/'.join(line.split(None))\n                ropResult = requests.get(self.urlOpBase + '/' + self.getOpId(urlOpCommand),\n                                         auth=(self.user, self.passwd),\n                                         verify=False)    # Request to get the results\n                print('$ ' + line)\n                print(ropResult.text)\n\n\n    def createEncodedUrl(self, confId, string):\n        \"\"\"\n        URLencode every configuration words and form proper URL for REST API requests.\n\n        :param confId: Configuration session ID\n        :param string: One line Vyatta configuration commands and parameters\n        :return: Encoded URL for Vyatta REST API\n\n        TODO: Fix wrong encoding when spaces in description \"\" in Vyatta configuration is used.\n              ex. description \"IPSEC to HQ\". In the meantime, avoid using \"\" in Vyatta configuration.\n        \"\"\"\n\n        encodedWord = []\n        for word in string.split():\n            encodedWord.append(urllib.parse.quote(word, safe=\"\"))   # Encode each words, then make a list of words\n\n        encodedUrl = self.urlConfBase + '/' + confId + '/' \\\n                     + '/'.join(' '.join(encodedWord).split(None))\n\n        return encodedUrl\n\n\n    def editConfig(self, confFileName):\n        \"\"\"\n        Read configurations from a file and send requests to Vyatta via REST API,\n        then actually modify Vyatta configuration and commit configuration changes.\n\n        :param confFileName: A file which has the configurations to apply\n        :return: HTTP status code for deleteConfId()\n        \"\"\"\n\n        # Set configurations\n        with open(confFileName, encoding='utf-8') as confFile:\n\n            confId = self.getConfId()   # Get configuration ID\n\n            for line in confFile:\n                if not (re.compile(\"^#\").match(line)\n                        or re.compile(\"^$\").match(line)):      # Skip line matches with \"^#\" or \"^$\"\n                    urlConfPut = self.createEncodedUrl(confId, line)\n\n                    rconf = requests.put(urlConfPut,\n                                         auth=(self.user, self.passwd),\n                                         verify=False)   # Request for configuration commands\n\n                    print(\"%s : %s\" % (urlConfPut, rconf.status_code))\n\n        # Commit configurations\n        self.commitConfig(confId)\n\n        # Delete conf-id and return HTTP status code\n        return self.deleteConfId(confId)\n\n\n    def commitConfig(self, confId):\n        \"\"\"\n        Commit configuration changes\n\n        :param confId: Configuration session ID\n        :return: HTTP status code\n        \"\"\"\n\n        urlConfCommit = self.urlConfBase + '/' + confId + '/commit'\n        rconf = requests.post(urlConfCommit, auth=(self.user, self.passwd), verify=False)   # Request for commit\n        print(\"%s : %s\" % (urlConfCommit, rconf.status_code))\n        return rconf.status_code\n\n\n    def saveConfig(self, confId):\n        \"\"\"\n        To be implemented\n\n        :param confId:\n        :return:\n        \"\"\"\n\n        pass\n\n\n    def revertConfig(self, confId):\n        \"\"\"\n        To be implemented\n\n        :param confId:\n        :return:\n        \"\"\"\n\n        pass\n\n\nif __name__ == \"__main__\":\n    # Test code\n    pass\n```\n\n\n## \u5b9f\u884c\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4f8b\n\n### \u5b9f\u884c\u30b9\u30af\u30ea\u30d7\u30c8\n\n```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport Vyatta\nimport vyuser\n\nuser = vyuser.VYUSER\npasswd = vyuser.VYPASSWD\nurlBase = vyuser.URLBASE\n\nvy = Vyatta.VyattaControl(urlBase, user, passwd)\nvy.editConfig('vy_configuration.conf')\nvy.commandOperational('vy_op_command.conf')\n```\n\n### Vyatta\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u30d5\u30a1\u30a4\u30eb\n\n```text:vyuser.conf\nVYUSER = \"vyatta\"\nVYPASSWD = \"<vyatta password>\"\nURLBASE = \"https://10.x.x.x/\"\n```\n\n### config\u306e\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\n\n\u5909\u66f4\u3059\u308bVyatta\u306econfig\u304c\u8a18\u8f09\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3002\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5316\u3057\u3066\u3001\u30a2\u30c9\u30ec\u30b9\u7b49\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u4e0e\u3048\u308b\u3068\u3001\u69cb\u6210\u30d1\u30bf\u30fc\u30f3\u306b\u5fdc\u3058\u305fconfig\u3092\u81ea\u52d5\u751f\u6210\u3059\u308b\u3088\u3046\u306a\u4ed5\u7d44\u307f\u304c\u307b\u3057\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001\u4eca\u306e\u3068\u3053\u308d\u306f\u5909\u66f4\u3059\u308bconfig\u3092\u5168\u3066\u624b\u3067\u500b\u5225\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306f\u3001BYOIP\u306e\u305f\u3081\u306bGRE over IPsec\u3092\u78ba\u7acb\u3059\u308b\u8a2d\u5b9a\u306econfig\u306e\u4f8b\u3067\u3059\u3002\n\n```text:vy_configuration.conf\n# Comments start with #\n\n# BYOIP subnet\nset interfaces bonding bond0 address 192.168.2.1/24\n\n# GRE settings\nset interfaces tunnel tun0 address 192.168.10.1/30\nset interfaces tunnel tun0 encapsulation gre\nset interfaces tunnel tun0 multicast enable\nset interfaces tunnel tun0 local-ip 111.111.111.111\nset interfaces tunnel tun0 remote-ip 222.222.222.222\n\n# IPsec ESP policy settings\nset vpn ipsec esp-group ESP1 lifetime 3600\nset vpn ipsec esp-group ESP1 mode tunnel\nset vpn ipsec esp-group ESP1 pfs enable\nset vpn ipsec esp-group ESP1 proposal 1 encryption aes128\nset vpn ipsec esp-group ESP1 proposal 1 hash sha1\n\n# IPsec IKE policy settings\nset vpn ipsec ike-group IKE1 lifetime 86400\nset vpn ipsec ike-group IKE1 proposal 1 dh-group 5\nset vpn ipsec ike-group IKE1 proposal 1 encryption aes128\nset vpn ipsec ike-group IKE1 proposal 1 hash sha1\n\n# IPsec interface settings\nset vpn ipsec ipsec-interfaces interface bond1\n\n# IPsec VPN settings\nset vpn ipsec site-to-site peer 222.222.222.222 authentication mode pre-shared-secret\nset vpn ipsec site-to-site peer 222.222.222.222 authentication pre-shared-secret test_key_1\nset vpn ipsec site-to-site peer 222.222.222.222 default-esp-group ESP1\nset vpn ipsec site-to-site peer 222.222.222.222 ike-group IKE1\nset vpn ipsec site-to-site peer 222.222.222.222 local-address 111.111.111.111\nset vpn ipsec site-to-site peer 222.222.222.222 tunnel 1 protocol gre\n\n# Static Route\nset protocols static route 192.168.1.0/24 next-hop 192.168.10.2\n```\n\n### \u5b9f\u884c\u3059\u308bOperational Mode\u30b3\u30de\u30f3\u30c9\u306e\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\n\nconfig\u3092\u78ba\u8a8d\u3057\u305f\u308a\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001Operational Mode\u306e\u30b3\u30de\u30f3\u30c9\u3082\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5165\u529b\u3057\u3066\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n```text:vy_op_command.conf\nshow configuration\nshow interfaces\nshow vpn ipsec sa\n```\n", "tags": ["vyatta", "SoftLayer"]}