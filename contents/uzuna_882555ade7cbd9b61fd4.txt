{"context": "\n\nyield\u3068stream\u3092\u884c\u304d\u6765\u3059\u308b\nco\u3084aa\u306a\u3069yield + generator + Promise\u306b\u3088\u3063\u3066callback\u5730\u7344\u304b\u3089\u958b\u653e\u3055\u308c\u305f\u3001\u3084\u3063\u305f!\n\u3068\u306a\u3063\u305f\u306f\u3044\u3044\u3051\u3069Promisify\u3067\u56f2\u3081\u308b\u3082\u306e\u306f\u3044\u3044\u3051\u3069\u65e2\u5b58\u306eStream\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u76f4\u3057\u3066\u5165\u308c\u308b\u306e\u9762\u5012\u3067\u306a\u3044?\n\u3068\u601d\u3063\u305f\u306e\u3067\u3001yield\u306e\u4e2d\u3067stream\u3092\u4f7f\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u3057\u307e\u3057\u305f\u3002\naa-util\ngithub\n\n\u3061\u306a\u307f\u306basync-await\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306faa\u3092\u4f7f\u3044\u307e\u3059\naa.Channel()\u304c\u611b\u3057\u3044\u3002\n\u8a73\u7d30\u306fLightSpeedC\u6c0f\u306e\u6295\u7a3f\u3078\u3002\n\nES.next async/await + Promise \u3067\u89e3\u6c7a\u3067\u304d\u308b\u4e8b\u3001\u3068ES6 generators (yield) + Promise + npm aa (async-await) \u3067\u89e3\u6c7a\u3067\u304d\u308b\u4e8b\n\n\naa-util\naa-util\u3067\u306fArray\u3068Generator\u3092Stream\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u6587\u5185\u3067\u306f const au = require('aa-util') \u3067\u8aad\u307f\u8fbc\u307e\u308c\u3066\u3044\u308b\u3068\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nstream\u751f\u6210    :  au.stream.a2s(Array)\u3067\u914d\u5217\u3092Stream\u3067\u304f\u308b\u3093\u3060\u3082\u306e\u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u4eca\u307e\u3067\u3069\u304a\u308apipe\u3067\u304d\u307e\u3059\nstream\u7d50\u679c\u53d7\u53d6 : au.stream.reduce\u3067stream\u306e\u7d50\u679c\u304c\u914d\u5217\u306b\u306a\u3063\u3066\u8fd4\u3063\u3066\u304d\u307e\u3059\n\n\nArray/Generator -> Stream\nconst au = require('aa-util')\n\nfunction *main(){\n    const target = [0,1,2,3,4,5]\n\n    // Array\u306e\u5834\u5408\n    const stream = yield au.stream.a2s(target); // array-> stream\n\n    // Generator\u306e\u5834\u5408\n    const g = function *(){\n        yield* target\n    }\n    const stream = yield au.stream.g2s(g());\n\n\n\n    // pipe your custom stream\n    stream.pipe(stream_A)\n\n    // get stream result\n    const result = yield au.stream.reduce(stream_A);\n\n    // result = [0,1,2,3,4,5]\n}\n\n\nStream -> Result\n\u3061\u3087\u3063\u3068\u307e\u3063\u3066!\u3000\u5225\u306e\u5f62\u3067\u53d7\u3051\u53d6\u308a\u305f\u3044\u3093\u3060\u3051\u3069\u3002\n\u3068\u3044\u3046\u6642\u306b\u306f\u7b2c\u4e8c\u5f15\u6570\u306b\u81ea\u5206\u3067Reducer(Transform)\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u81ea\u5206\u3067\u597d\u304d\u306breduce\u3057\u3066flush(cb)\u304c\u547c\u3070\u308c\u305f\u3068\u304d\u306b\u4e00\u5ea6\u3060\u3051push\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nconst stream = require('stream');\n\nfunction *main(){\n    const target = [0,1,2,3,4,5]\n    const g = function *(){\n        yield* target\n    }\n    const stream = yield au.stream.g2s(g());\n\n    // set custom reducer to second argument\n    const result = yield au.stream.reduce(stream, sumStream());\n\n    // result = 15\n}\n\n// \u3059\u3079\u3066\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u8fd4\u3059\nfunction sumStream(){\n    return stream.Transform({\n        objectMode:true,\n        transform:function(chunk, env, cb){\n            // \u81ea\u524d\u306ereduce\u51e6\u7406\u3092\u66f8\u304f\n            if(this._stack === undefined){\n                this._stack = 0\n            }\n            this._stack += chunk\n            cb()\n        },\n        flush: function(cb){\n            this.push(this._stack) // \u7d50\u679c\u3092\u8fd4\u3059\n            cb()\n        }\n    })\n}\n\n\n\u304a\u307e\u3051\nyield\u3067\u3082\u547c\u3079\u308b\u3057callback\u3067\u3082\u547c\u3079\u308b\u3068\u4fbf\u5229\u306a\u306e\u3067\u306f?\n\u3068\u3044\u3046\u601d\u3044\u3064\u304d\u304b\u3089 au.promise.wrap \u3082\u4f5c\u308a\u307e\u3057\u305f\u3002 \u3067\u3082\u3042\u3093\u307e\u308a\u4f7f\u3063\u3066\u306a\u3044\n\n// yield \u3067\u3046\u3054\u304b\u3059\nfunction *main(){\n    const time = 100\n    const result = yield proc(time)\n}\n\n// call back\u3067\u52d5\u304b\u3059\nproc(time, (err, result)=>{\n    console.log(err, result)\n    done();\n})\n\n// cb\u306bFunction\u304c\u5165\u3063\u3066\u3044\u305f\u3089aa\u3067\u30e9\u30c3\u30d7\u3057\u3066cb\u306b\u5024\u3092\u8fd4\u3059\n// cb\u306b\u4f55\u3082\u306a\u3051\u308c\u3070main(opt)\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\nfunction proc(opt, cb){\n    return au.promise.wrap(main(opt), cb)\n    function *main(arg){\n        return yield wait(arg)\n    }\n}\n\nfunction wait(arg){\n    return new Promise((res, rej)=>{\n        if(arg > 1500) return rej(new Error(\"over >1500\"))\n        if(arg > 500) return res(new Error(\"over >500\"))\n        setTimeout(()=>{\n            return res(`wait:${arg}`)\n        }, arg)\n    })\n}\n\n\n\u305d\u308c\u3067\u306f\u3001\u3088\u308a\u3088\u3044nodejs\u30e9\u30a4\u30d5\u3092\n# yield\u3068stream\u3092\u884c\u304d\u6765\u3059\u308b\n\nco\u3084aa\u306a\u3069yield + generator + Promise\u306b\u3088\u3063\u3066callback\u5730\u7344\u304b\u3089\u958b\u653e\u3055\u308c\u305f\u3001\u3084\u3063\u305f!\n\u3068\u306a\u3063\u305f\u306f\u3044\u3044\u3051\u3069Promisify\u3067\u56f2\u3081\u308b\u3082\u306e\u306f\u3044\u3044\u3051\u3069__\u65e2\u5b58\u306eStream\u306e\u30b3\u30fc\u30c9__\u3092\u66f8\u304d\u76f4\u3057\u3066\u5165\u308c\u308b\u306e\u9762\u5012\u3067\u306a\u3044?\n\u3068\u601d\u3063\u305f\u306e\u3067\u3001yield\u306e\u4e2d\u3067stream\u3092\u4f7f\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u3057\u307e\u3057\u305f\u3002\n\n__[aa-util](https://www.npmjs.com/package/aa-util)__\n__[github](https://github.com/uzuna/aa-util)__\n\n[![NPM](https://nodei.co/npm/aa-util.png)](https://nodei.co/npm/aa-util/)\n\n\n\u3061\u306a\u307f\u306basync-await\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f[aa](https://www.npmjs.com/package/aa)\u3092\u4f7f\u3044\u307e\u3059\naa.Channel()\u304c\u611b\u3057\u3044\u3002\n\u8a73\u7d30\u306fLightSpeedC\u6c0f\u306e\u6295\u7a3f\u3078\u3002\n> [ES.next async/await + Promise \u3067\u89e3\u6c7a\u3067\u304d\u308b\u4e8b\u3001\u3068ES6 generators (yield) + Promise + npm aa (async-await) \u3067\u89e3\u6c7a\u3067\u304d\u308b\u4e8b](http://qiita.com/LightSpeedC/items/95e3db59276e5d1d1a0d)\n\n\n## aa-util\n\n\naa-util\u3067\u306f__Array__\u3068__Generator__\u3092Stream\u306b\u5909\u63db\u3067\u304d\u307e\u3059\u3002\n\n\u4f8b\u6587\u5185\u3067\u306f `const au = require('aa-util')` \u3067\u8aad\u307f\u8fbc\u307e\u308c\u3066\u3044\u308b\u3068\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n* stream\u751f\u6210    :  `au.stream.a2s(Array)`\u3067\u914d\u5217\u3092Stream\u3067\u304f\u308b\u3093\u3060\u3082\u306e\u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u4eca\u307e\u3067\u3069\u304a\u308apipe\u3067\u304d\u307e\u3059\n* stream\u7d50\u679c\u53d7\u53d6 : `au.stream.reduce`\u3067stream\u306e\u7d50\u679c\u304c\u914d\u5217\u306b\u306a\u3063\u3066\u8fd4\u3063\u3066\u304d\u307e\u3059\n\n### Array/Generator -> Stream\n\n```js\nconst au = require('aa-util')\n\nfunction *main(){\n\tconst target = [0,1,2,3,4,5]\n\t\n\t// Array\u306e\u5834\u5408\n\tconst stream = yield au.stream.a2s(target); // array-> stream\n\n\t// Generator\u306e\u5834\u5408\n\tconst g = function *(){\n\t\tyield* target\n\t}\n\tconst stream = yield au.stream.g2s(g());\n\n\n\n\t// pipe your custom stream\n\tstream.pipe(stream_A)\n\n\t// get stream result\n\tconst result = yield au.stream.reduce(stream_A);\n\n\t// result = [0,1,2,3,4,5]\n}\n```\n\n### Stream -> Result\n\n\u3061\u3087\u3063\u3068\u307e\u3063\u3066!\u3000\u5225\u306e\u5f62\u3067\u53d7\u3051\u53d6\u308a\u305f\u3044\u3093\u3060\u3051\u3069\u3002\n\u3068\u3044\u3046\u6642\u306b\u306f\u7b2c\u4e8c\u5f15\u6570\u306b\u81ea\u5206\u3067__Reducer(Transform)__\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u81ea\u5206\u3067\u597d\u304d\u306breduce\u3057\u3066`flush(cb)`\u304c\u547c\u3070\u308c\u305f\u3068\u304d\u306b\u4e00\u5ea6\u3060\u3051push\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```js\nconst stream = require('stream');\n\nfunction *main(){\n\tconst target = [0,1,2,3,4,5]\n\tconst g = function *(){\n\t\tyield* target\n\t}\n\tconst stream = yield au.stream.g2s(g());\n\t\n\t// set custom reducer to second argument\n\tconst result = yield au.stream.reduce(stream, sumStream());\n\n\t// result = 15\n}\n\n// \u3059\u3079\u3066\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u8fd4\u3059\nfunction sumStream(){\n\treturn stream.Transform({\n\t\tobjectMode:true,\n\t\ttransform:function(chunk, env, cb){\n\t\t\t// \u81ea\u524d\u306ereduce\u51e6\u7406\u3092\u66f8\u304f\n\t\t\tif(this._stack === undefined){\n\t\t\t\tthis._stack = 0\n\t\t\t}\n\t\t\tthis._stack += chunk\n\t\t\tcb()\n\t\t},\n\t\tflush: function(cb){\n\t\t\tthis.push(this._stack) // \u7d50\u679c\u3092\u8fd4\u3059\n\t\t\tcb()\n\t\t}\n\t})\n}\n```\n\n\n### \u304a\u307e\u3051\n\nyield\u3067\u3082\u547c\u3079\u308b\u3057callback\u3067\u3082\u547c\u3079\u308b\u3068\u4fbf\u5229\u306a\u306e\u3067\u306f?\n\u3068\u3044\u3046\u601d\u3044\u3064\u304d\u304b\u3089 `au.promise.wrap` \u3082\u4f5c\u308a\u307e\u3057\u305f\u3002 ~~\u3067\u3082\u3042\u3093\u307e\u308a\u4f7f\u3063\u3066\u306a\u3044~~\n\n```\n\n// yield \u3067\u3046\u3054\u304b\u3059\nfunction *main(){\n\tconst time = 100\n\tconst result = yield proc(time)\n}\n\n// call back\u3067\u52d5\u304b\u3059\nproc(time, (err, result)=>{\n\tconsole.log(err, result)\n\tdone();\n})\n\n// cb\u306bFunction\u304c\u5165\u3063\u3066\u3044\u305f\u3089aa\u3067\u30e9\u30c3\u30d7\u3057\u3066cb\u306b\u5024\u3092\u8fd4\u3059\n// cb\u306b\u4f55\u3082\u306a\u3051\u308c\u3070main(opt)\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\nfunction proc(opt, cb){\n\treturn au.promise.wrap(main(opt), cb)\n\tfunction *main(arg){\n\t\treturn yield wait(arg)\n\t}\n}\n\nfunction wait(arg){\n\treturn new Promise((res, rej)=>{\n\t\tif(arg > 1500) return rej(new Error(\"over >1500\"))\n\t\tif(arg > 500) return res(new Error(\"over >500\"))\n\t\tsetTimeout(()=>{\n\t\t\treturn res(`wait:${arg}`)\n\t\t}, arg)\n\t})\n}\n\n```\n\n\n\u305d\u308c\u3067\u306f\u3001\u3088\u308a\u3088\u3044nodejs\u30e9\u30a4\u30d5\u3092\n", "tags": ["nodejs", "Stream", "async"]}