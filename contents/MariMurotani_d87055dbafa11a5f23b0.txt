{"context": " More than 1 year has passed since last update.SpringBoot\u3067RabbitMQ\u3092\u4f7f\u3063\u3066\u30ad\u30e5\u30fc\u7ba1\u7406\u3057\u307e\u3057\u3087\u3046\u3002\n\u4eca\u56de\u306f\u4e00\u756a\u7c21\u5358\u305d\u3046\u306a\u3001\u4e00\u65e6\u30d0\u30c3\u30d5\u30a1\u30fc\u3057\u3066\u3042\u3068\u3067\u307e\u3068\u3081\u3066\u51e6\u7406\u3059\u308b\u304c\u30c6\u30fc\u30de\u3067\u3059\u3002\n\u30b0\u30eb\u30fc\u30d7\u30a6\u30a7\u30a2\u306e\u901a\u77e5\u6a5f\u80fd\u3068\u304b\u30a2\u30d5\u30a7\u30ea\u30a8\u30fc\u30c8\u306e\u5831\u544a\u307f\u305f\u3044\u306e\u3068\u304b\u7d30\u3005\u3068\u3057\u3066\u305f\u3082\u306e\u3092\u5f8c\u3067\u4e00\u62ec\u307e\u3068\u3081\u3066\u51e6\u7406\u3057\u305f\u3044\u5834\u5408\u304c\u591a\u3044\u3067\u3059\u304c\u3002DB\u306b\u3044\u3061\u3044\u3061\u5165\u308c\u3066\u3001\u51fa\u3057\u3066\u3001\u6d88\u3057\u3066\u3059\u308b\u306e\u306f\u624b\u9593\u304c\u304b\u304b\u3063\u3066\u9762\u5012\u3067\u3059\u3002\n\u30b7\u30b9\u30c6\u30e0\u306e\u4e00\u500b\u306e\u90e8\u54c1\u3068\u3057\u3066\u30ad\u30e5\u30fc\u7ba1\u7406\u6a5f\u80fd\u3092\u3042\u3089\u304b\u3058\u3081\u5b9f\u88c5\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\u30d5\u30ed\u30f3\u30c8\u3067\u30ad\u30e5\u30fc\u3092\u8ffd\u52a0\u3057\u3066\u3001\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u30671\u5206\u306b\u4e00\u56de\u3068\u304b\u51e6\u7406\u3059\u308b\u4e8b\u3092\u60f3\u5b9a\u3057\u307e\u3059\u3002\n\u52d5\u304f\u30b5\u30f3\u30d7\u30eb\n1.RabbitMQ\u306e\u63a5\u7d9a\u8a2d\u5b9a\n\u3053\u306e\u524d\u4f5c\u6210\u3057\u305frabbitMQ\u30af\u30e9\u30b9\u30bf\u306b\u63a5\u7d9a\u3057\u3066\u307f\u307e\u3059\n2.\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u4f5c\u6210\nRabbitTemplate\u3092\u4f7f\u3063\u3066\u30ad\u30e5\u30fc\u306b\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u767b\u9332\u3057\u307e\u3059\n3.CommandLineLinear\u306e\u4f5c\u6210\nCommandLineLinear\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u30ad\u30e5\u30fc\u3092\u53d6\u308a\u51fa\u3057\u3066\u51e6\u7406\u3059\u308b\u30bf\u30b9\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3059\n4.Receiver\u306e\u8a2d\u5b9a\n\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u975e\u540c\u671f\u30c7\u30fc\u30bf\u53d7\u4fe1\u3092\u884c\u3046\u3068\u304d\u306e\u30ec\u30b7\u30fc\u30d0\u30fc\u3068\u3057\u3066\u5229\u7528\u3057\u307e\u3059\nRabbitMQApplication\u5185\u306e\u4e0b\u8a18\u306e\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3057\u3066\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n    ......\n    @Bean\n    Receiver receiver() {\n        return new Receiver();\n    }\n    ......\n    @Bean\n    MessageListenerAdapter listenerAdapter(Receiver receiver) {\n        return new MessageListenerAdapter(receiver, \"receiveMessage\");\n    }\n    ......\n    container.setMessageListener(listenerAdapter);\n    ......\n\n5.CURL\u3067\u30c7\u30fc\u30bf\u9001\u4fe1\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3067\u4f5c\u6210\u3057\u305fURL\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\n6.\u753b\u9762\u3067\u78ba\u8a8d\nhttp://192.168.3.3:15672/#/queues\nRabbitMQ\u306e\u7ba1\u7406\u753b\u9762\u3067\u78ba\u8a8d\u3057\u307e\u3059\n7.\u30ed\u30b0\u3067\u78ba\u8a8d\nRabbitMQApplication\u3092\u5b9f\u884c\u3057\u305f\u969b\u306e\u30ed\u30b0\u3092\u78ba\u8a8d\u3057\u307e\u3059\n\n1.RabbitMQ\u306e\u63a5\u7d9a\u8a2d\u5b9a\n\nRabbitMQConfig.java\npackage demo.configs;\n\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class RabbitMQConfig {\n\n    /*@Bean\n    TopicExchange exchange() {\n        return new TopicExchange(\"spring-boot-exchange\");\n    }\n\n    @Bean\n    Binding binding(Queue queue, TopicExchange exchange) {\n        return BindingBuilder.bind(queue).to(exchange).with(queueName);\n    }*/\n\n    @Bean\n    CachingConnectionFactory rabbitConnectionFactory(){\n        CachingConnectionFactory rabicon = new CachingConnectionFactory();\n        //amqp.connect('amqp://admin:admin@192.168.3.3:5672/',\n        rabicon.setHost(\"192.168.3.3\");\n        rabicon.setUsername(\"admin\");\n        rabicon.setPassword(\"admin\");\n        rabicon.setPort(5672);\n        return rabicon;\n    }\n\n    @Bean\n    SimpleMessageListenerContainer simpleMessage(ConnectionFactory connectionFactory) {\n        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();\n        container.setConnectionFactory(connectionFactory);\n        container.setQueueNames(Const.RabbitMQMessageQue);\n        //container.setMessageListener(listenerAdapter);\n        return container;\n    }\n\n\n\n    /*\n     * \u30ec\u30b7\u30fc\u30d0\u30fc\u306f\u4e00\u65e6\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n     * @Bean\n    Receiver receiver() {\n        return new Receiver();\n    }\n\n    @Bean\n    MessageListenerAdapter listenerAdapter(Receiver receiver) {\n        return new MessageListenerAdapter(receiver, \"receiveMessage\");\n    }*/\n\n}\n\n\n\n2.\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u4f5c\u6210\n\nRabbitController.java\npackage demo.controller;\n\n\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport demo.configs.Const;\nimport demo.dto.Mail;\nimport demo.dto.Status;\n\n@EnableAutoConfiguration\n@EnableConfigurationProperties\n@Controller\n@RequestMapping(value=\"/rabiit\",method=RequestMethod.POST)\npublic class RabbitController {\n    @Autowired\n    private ApplicationContext context;\n\n    @Autowired\n    RabbitTemplate rabbitTemplate;\n\n    /**\n     * curl -d to=\"muromari@com\" -d text=\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\" http://localhost:8080/rabiit/push\n     * curl -d to=\"muromari@com\" -d text=\"3\u5199\u771f\u30a2\u30c3\u30d7\u3057\u307e\u3057\u305f\" http://localhost:8080/rabiit/push\n     * */\n    @RequestMapping(value=\"/push\",method=RequestMethod.POST)\n    public @ResponseBody Status getAllPath(@RequestParam(value=\"to\", required=true) String to,@RequestParam(value=\"text\", defaultValue=\"\") String text) {\n        ObjectMapper mapper = new ObjectMapper();\n\n        Mail mail = new Mail();\n        mail.setToAddress(to);\n        mail.setStrContent(text);\n\n        try {\n            String jsonInString = mapper.writeValueAsString(mail);\n            rabbitTemplate.convertAndSend(Const.RabbitMQMessageQue,jsonInString);\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n\n        return new Status(\"OK\");\n\n    }\n}\n\n\n\n3.CommandLineLinear\u306e\u4f5c\u6210\n\nRabbitMQApplication.java\npackage demo;\n\nimport java.util.Date;\n\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;\nimport org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\n\nimport demo.configs.Const;\nimport demo.dto.Mail;\n\n@EnableAutoConfiguration\n@EnableBatchProcessing\n@EnableConfigurationProperties\npublic class RabbitMQApplication implements CommandLineRunner {\n\n    @Autowired\n    ApplicationContext context;\n\n\n    @Autowired\n    RabbitTemplate rabbitTemplate;\n\n    @Bean\n    Queue queue() {\n        return new Queue(Const.RabbitMQMessageQue, false);\n    }\n\n    @Bean\n    TopicExchange exchange() {\n        return new TopicExchange(\"spring-boot-exchange\");\n    }\n\n    @Bean\n    Binding binding(Queue queue, TopicExchange exchange) {\n        return BindingBuilder.bind(queue).to(exchange).with(Const.RabbitMQMessageQue);\n    }\n\n    @Bean\n    CachingConnectionFactory rabbitConnectionFactory(){\n        CachingConnectionFactory rabicon = new CachingConnectionFactory();\n        //amqp.connect('amqp://admin:admin@192.168.3.3:5672/',\n        rabicon.setHost(\"192.168.3.3\");\n        rabicon.setUsername(\"admin\");\n        rabicon.setPassword(\"admin\");\n        rabicon.setPort(5672);\n        return rabicon;\n    }\n\n\n    @Bean\n    SimpleMessageListenerContainer container(ConnectionFactory connectionFactory) {\n        SimpleMessageListenerContainer container = new SimpleMessageListenerContainer();\n        container.setConnectionFactory(connectionFactory);\n        container.setQueueNames(Const.RabbitMQMessageQue);\n        //container.setMessageListener(listenerAdapter);\n        return container;\n    }\n\n    /*\n    For asyncronized receiving\n\n    @Bean\n    Receiver receiver() {\n        return new Receiver();\n    }\n\n    @Bean\n    MessageListenerAdapter listenerAdapter(Receiver receiver) {\n        return new MessageListenerAdapter(receiver, \"receiveMessage\");\n    }*/\n\n    public static void main(String[] args) throws InterruptedException {\n        SpringApplication.run(RabbitMQApplication.class, args);\n    }\n\n    @Override\n    public void run(String... args) throws Exception {\n        System.out.println(\"Waiting five seconds...\");\n\n        while(0 < 1){\n            for(int i = 0 ; i < 5 ; i++){\n                String object = (String)rabbitTemplate.receiveAndConvert(Const.RabbitMQMessageQue);\n                if(object != null){\n                    try{\n                        System.out.println(new Date().toGMTString() + \": \" + object);\n                        ObjectMapper mapper = new ObjectMapper();\n                        Mail mail = mapper.readValue(object, Mail.class);\n                        System.out.println(mail.getToAddress() + \" , \" + mail.getStrContent());\n                    }catch(Exception e){\n                        System.out.println(e.getMessage());\n                    }\n                }\n            }\n            Thread.sleep(10000);\n        }\n    }\n}\n\n\n4.Receiver\u306e\u8a2d\u5b9a\n\nReceiver.java\npackage demo.service;\n\nimport java.util.concurrent.CountDownLatch;\n\npublic class Receiver {\n\n    private CountDownLatch latch = new CountDownLatch(1);\n\n    public void receiveMessage(String message) {\n        System.out.println(\"Received <\" + message + \">\");\n        latch.countDown();\n    }\n\n    public CountDownLatch getLatch() {\n        return latch;\n    }\n\n}\n\n\n\n5.CURL\u3067\u30c7\u30fc\u30bf\u9001\u4fe1\n[murotanimari]$ curl -d to=\"muromari@com\" -d text=\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\" http://localhost:8080/rabiit/push\n{\"status\":\"OK\"}\n\n\n6.\u753b\u9762\u3067\u78ba\u8a8d\nspring-boot\u306e\u30ad\u30e5\u30fc\u306e\u4e2d\u306bReady\u306e\u90e8\u5206\u306e\u30ca\u30f3\u30d0\u30fc\u304c\u5897\u3048\u3066\u3044\u307e\u3059\n\n\n7.\u30ed\u30b0\u3067\u78ba\u8a8d\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u51fa\u529b\u3092\u78ba\u8a8d\u3057\u307e\u3059\n8 Nov 2015 15:48:17 GMT: {\"toAddress\":\"muromari@com\",\"strContent\":\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\"}\nmuromari@com , 1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\n8 Nov 2015 15:48:17 GMT: {\"toAddress\":\"muromari@com\",\"strContent\":\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\"}\nmuromari@com , 1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\n8 Nov 2015 15:48:17 GMT: {\"toAddress\":\"muromari@com\",\"strContent\":\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\"}\nmuromari@com , 1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\n8 Nov 2015 15:48:17 GMT: {\"toAddress\":\"muromari@com\",\"strContent\":\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\"}\nmuromari@com , 1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\n\n\nSpringBoot\u3067RabbitMQ\u3092\u4f7f\u3063\u3066\u30ad\u30e5\u30fc\u7ba1\u7406\u3057\u307e\u3057\u3087\u3046\u3002\n\u4eca\u56de\u306f\u4e00\u756a\u7c21\u5358\u305d\u3046\u306a\u3001\u4e00\u65e6\u30d0\u30c3\u30d5\u30a1\u30fc\u3057\u3066\u3042\u3068\u3067\u307e\u3068\u3081\u3066\u51e6\u7406\u3059\u308b\u304c\u30c6\u30fc\u30de\u3067\u3059\u3002\n\n\u30b0\u30eb\u30fc\u30d7\u30a6\u30a7\u30a2\u306e\u901a\u77e5\u6a5f\u80fd\u3068\u304b\u30a2\u30d5\u30a7\u30ea\u30a8\u30fc\u30c8\u306e\u5831\u544a\u307f\u305f\u3044\u306e\u3068\u304b\u7d30\u3005\u3068\u3057\u3066\u305f\u3082\u306e\u3092\u5f8c\u3067\u4e00\u62ec\u307e\u3068\u3081\u3066\u51e6\u7406\u3057\u305f\u3044\u5834\u5408\u304c\u591a\u3044\u3067\u3059\u304c\u3002DB\u306b\u3044\u3061\u3044\u3061\u5165\u308c\u3066\u3001\u51fa\u3057\u3066\u3001\u6d88\u3057\u3066\u3059\u308b\u306e\u306f\u624b\u9593\u304c\u304b\u304b\u3063\u3066\u9762\u5012\u3067\u3059\u3002\n\n\u30b7\u30b9\u30c6\u30e0\u306e\u4e00\u500b\u306e\u90e8\u54c1\u3068\u3057\u3066\u30ad\u30e5\u30fc\u7ba1\u7406\u6a5f\u80fd\u3092\u3042\u3089\u304b\u3058\u3081\u5b9f\u88c5\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\u30d5\u30ed\u30f3\u30c8\u3067\u30ad\u30e5\u30fc\u3092\u8ffd\u52a0\u3057\u3066\u3001\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u30671\u5206\u306b\u4e00\u56de\u3068\u304b\u51e6\u7406\u3059\u308b\u4e8b\u3092\u60f3\u5b9a\u3057\u307e\u3059\u3002\n[\u52d5\u304f\u30b5\u30f3\u30d7\u30eb](https://github.com/MariMurotani/SpringDemo/tree/6_rabbitMQ)\n\n**1.RabbitMQ\u306e\u63a5\u7d9a\u8a2d\u5b9a**\n\u3053\u306e\u524d\u4f5c\u6210\u3057\u305frabbitMQ\u30af\u30e9\u30b9\u30bf\u306b\u63a5\u7d9a\u3057\u3066\u307f\u307e\u3059\n\n**2.\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u4f5c\u6210**\nRabbitTemplate\u3092\u4f7f\u3063\u3066\u30ad\u30e5\u30fc\u306b\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u767b\u9332\u3057\u307e\u3059\n\n**3.CommandLineLinear\u306e\u4f5c\u6210**\nCommandLineLinear\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u30ad\u30e5\u30fc\u3092\u53d6\u308a\u51fa\u3057\u3066\u51e6\u7406\u3059\u308b\u30bf\u30b9\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3059\n\n**4.Receiver\u306e\u8a2d\u5b9a**\n\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u975e\u540c\u671f\u30c7\u30fc\u30bf\u53d7\u4fe1\u3092\u884c\u3046\u3068\u304d\u306e\u30ec\u30b7\u30fc\u30d0\u30fc\u3068\u3057\u3066\u5229\u7528\u3057\u307e\u3059\nRabbitMQApplication\u5185\u306e\u4e0b\u8a18\u306e\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u5916\u3057\u3066\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n\n```java\n    ......\n    @Bean\n    Receiver receiver() {\n        return new Receiver();\n    }\n    ......\n    @Bean\n    MessageListenerAdapter listenerAdapter(Receiver receiver) {\n\t\treturn new MessageListenerAdapter(receiver, \"receiveMessage\");\n\t}\n    ......\n    container.setMessageListener(listenerAdapter);\n    ......\n```\n\n**5.CURL\u3067\u30c7\u30fc\u30bf\u9001\u4fe1**\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u3067\u4f5c\u6210\u3057\u305fURL\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\n\n**6.\u753b\u9762\u3067\u78ba\u8a8d**\nhttp://192.168.3.3:15672/#/queues\nRabbitMQ\u306e\u7ba1\u7406\u753b\u9762\u3067\u78ba\u8a8d\u3057\u307e\u3059\n\n**7.\u30ed\u30b0\u3067\u78ba\u8a8d**\nRabbitMQApplication\u3092\u5b9f\u884c\u3057\u305f\u969b\u306e\u30ed\u30b0\u3092\u78ba\u8a8d\u3057\u307e\u3059\n\n#1.RabbitMQ\u306e\u63a5\u7d9a\u8a2d\u5b9a\n```java:RabbitMQConfig.java\npackage demo.configs;\n\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class RabbitMQConfig {\n\n\t/*@Bean\n\tTopicExchange exchange() {\n\t\treturn new TopicExchange(\"spring-boot-exchange\");\n\t}\n\n\t@Bean\n\tBinding binding(Queue queue, TopicExchange exchange) {\n\t\treturn BindingBuilder.bind(queue).to(exchange).with(queueName);\n\t}*/\n\t\n\t@Bean\n\tCachingConnectionFactory rabbitConnectionFactory(){\n\t\tCachingConnectionFactory rabicon = new CachingConnectionFactory();\n\t\t//amqp.connect('amqp://admin:admin@192.168.3.3:5672/',\n\t\trabicon.setHost(\"192.168.3.3\");\n\t\trabicon.setUsername(\"admin\");\n\t\trabicon.setPassword(\"admin\");\n\t\trabicon.setPort(5672);\n\t\treturn rabicon;\n\t}\n\n\t@Bean\n\tSimpleMessageListenerContainer simpleMessage(ConnectionFactory connectionFactory) {\n\t\tSimpleMessageListenerContainer container = new SimpleMessageListenerContainer();\n\t\tcontainer.setConnectionFactory(connectionFactory);\n\t\tcontainer.setQueueNames(Const.RabbitMQMessageQue);\n\t\t//container.setMessageListener(listenerAdapter);\n\t\treturn container;\n\t}\n\t\n\t\n\t\n    /*\n     * \u30ec\u30b7\u30fc\u30d0\u30fc\u306f\u4e00\u65e6\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n     * @Bean\n    Receiver receiver() {\n        return new Receiver();\n    }\n\n\t@Bean\n\tMessageListenerAdapter listenerAdapter(Receiver receiver) {\n\t\treturn new MessageListenerAdapter(receiver, \"receiveMessage\");\n\t}*/\n\n}\n```\n\n#2.\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u4f5c\u6210\n```java:RabbitController.java\npackage demo.controller;\n\n\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport demo.configs.Const;\nimport demo.dto.Mail;\nimport demo.dto.Status;\n\n@EnableAutoConfiguration\n@EnableConfigurationProperties\n@Controller\n@RequestMapping(value=\"/rabiit\",method=RequestMethod.POST)\npublic class RabbitController {\n\t@Autowired\n\tprivate ApplicationContext context;\n\t\n\t@Autowired\n\tRabbitTemplate rabbitTemplate;\n\t\n\t/**\n\t * curl -d to=\"muromari@com\" -d text=\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\" http://localhost:8080/rabiit/push\n\t * curl -d to=\"muromari@com\" -d text=\"3\u5199\u771f\u30a2\u30c3\u30d7\u3057\u307e\u3057\u305f\" http://localhost:8080/rabiit/push\n\t * */\n\t@RequestMapping(value=\"/push\",method=RequestMethod.POST)\n    public @ResponseBody Status getAllPath(@RequestParam(value=\"to\", required=true) String to,@RequestParam(value=\"text\", defaultValue=\"\") String text) {\n\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\n\t\tMail mail = new Mail();\n\t\tmail.setToAddress(to);\n\t\tmail.setStrContent(text);\n\t\t\n\t\ttry {\n\t\t\tString jsonInString = mapper.writeValueAsString(mail);\n\t\t\trabbitTemplate.convertAndSend(Const.RabbitMQMessageQue,jsonInString);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e.getMessage());\n\t\t}\n\t\t\n\t\treturn new Status(\"OK\");\n\t\t\n\t}\n}\n```\n\n#3.CommandLineLinear\u306e\u4f5c\u6210\n```java:RabbitMQApplication.java\npackage demo;\n\nimport java.util.Date;\n\nimport org.codehaus.jackson.map.ObjectMapper;\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.amqp.core.TopicExchange;\nimport org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\nimport org.springframework.amqp.rabbit.connection.ConnectionFactory;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer;\nimport org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.annotation.Bean;\n\nimport demo.configs.Const;\nimport demo.dto.Mail;\n\n@EnableAutoConfiguration\n@EnableBatchProcessing\n@EnableConfigurationProperties\npublic class RabbitMQApplication implements CommandLineRunner {\n\n\t@Autowired\n\tApplicationContext context;\n\t\n\t\n\t@Autowired\n\tRabbitTemplate rabbitTemplate;\n\n\t@Bean\n\tQueue queue() {\n\t\treturn new Queue(Const.RabbitMQMessageQue, false);\n\t}\n\n\t@Bean\n\tTopicExchange exchange() {\n\t\treturn new TopicExchange(\"spring-boot-exchange\");\n\t}\n\n\t@Bean\n\tBinding binding(Queue queue, TopicExchange exchange) {\n\t\treturn BindingBuilder.bind(queue).to(exchange).with(Const.RabbitMQMessageQue);\n\t}\n\n\t@Bean\n\tCachingConnectionFactory rabbitConnectionFactory(){\n\t\tCachingConnectionFactory rabicon = new CachingConnectionFactory();\n\t\t//amqp.connect('amqp://admin:admin@192.168.3.3:5672/',\n\t\trabicon.setHost(\"192.168.3.3\");\n\t\trabicon.setUsername(\"admin\");\n\t\trabicon.setPassword(\"admin\");\n\t\trabicon.setPort(5672);\n\t\treturn rabicon;\n\t}\n\n\n\t@Bean\n\tSimpleMessageListenerContainer container(ConnectionFactory connectionFactory) {\n\t\tSimpleMessageListenerContainer container = new SimpleMessageListenerContainer();\n\t\tcontainer.setConnectionFactory(connectionFactory);\n\t\tcontainer.setQueueNames(Const.RabbitMQMessageQue);\n\t\t//container.setMessageListener(listenerAdapter);\n\t\treturn container;\n\t}\n\t\n\t/*\n\tFor asyncronized receiving\n\t\n\t@Bean\n    Receiver receiver() {\n        return new Receiver();\n    }\n\n\t@Bean\n\tMessageListenerAdapter listenerAdapter(Receiver receiver) {\n\t\treturn new MessageListenerAdapter(receiver, \"receiveMessage\");\n\t}*/\n\t\n    public static void main(String[] args) throws InterruptedException {\n        SpringApplication.run(RabbitMQApplication.class, args);\n    }\n\n    @Override\n    public void run(String... args) throws Exception {\n        System.out.println(\"Waiting five seconds...\");\n       \n        while(0 < 1){\n        \tfor(int i = 0 ; i < 5 ; i++){\n\t        \tString object = (String)rabbitTemplate.receiveAndConvert(Const.RabbitMQMessageQue);\n\t        \tif(object != null){\n\t        \t\ttry{\n\t        \t\t\tSystem.out.println(new Date().toGMTString() + \": \" + object);\n\t        \t\t\tObjectMapper mapper = new ObjectMapper();\n\t        \t\t\tMail mail = mapper.readValue(object, Mail.class);\n\t        \t\t\tSystem.out.println(mail.getToAddress() + \" , \" + mail.getStrContent());\n\t        \t\t}catch(Exception e){\n\t        \t\t\tSystem.out.println(e.getMessage());\n\t        \t\t}\n\t        \t}\n        \t}\n        \tThread.sleep(10000);\n        }\n    }\n}\n```\n\n**4.Receiver\u306e\u8a2d\u5b9a**\n\n```java:Receiver.java\npackage demo.service;\n\nimport java.util.concurrent.CountDownLatch;\n\npublic class Receiver {\n\n\tprivate CountDownLatch latch = new CountDownLatch(1);\n\n\tpublic void receiveMessage(String message) {\n\t\tSystem.out.println(\"Received <\" + message + \">\");\n\t\tlatch.countDown();\n\t}\n\n\tpublic CountDownLatch getLatch() {\n\t\treturn latch;\n\t}\n\n}\n```\n\n#5.CURL\u3067\u30c7\u30fc\u30bf\u9001\u4fe1\n```\n[murotanimari]$ curl -d to=\"muromari@com\" -d text=\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\" http://localhost:8080/rabiit/push\n{\"status\":\"OK\"}\n```\n#6.\u753b\u9762\u3067\u78ba\u8a8d\nspring-boot\u306e\u30ad\u30e5\u30fc\u306e\u4e2d\u306bReady\u306e\u90e8\u5206\u306e\u30ca\u30f3\u30d0\u30fc\u304c\u5897\u3048\u3066\u3044\u307e\u3059\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-11-09 23.26.21.png](https://qiita-image-store.s3.amazonaws.com/0/89997/e051d2bf-d0f5-a8ac-588c-0e0fdf809e9f.png)\n\n#7.\u30ed\u30b0\u3067\u78ba\u8a8d\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u51fa\u529b\u3092\u78ba\u8a8d\u3057\u307e\u3059\n\n```text\n8 Nov 2015 15:48:17 GMT: {\"toAddress\":\"muromari@com\",\"strContent\":\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\"}\nmuromari@com , 1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\n8 Nov 2015 15:48:17 GMT: {\"toAddress\":\"muromari@com\",\"strContent\":\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\"}\nmuromari@com , 1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\n8 Nov 2015 15:48:17 GMT: {\"toAddress\":\"muromari@com\",\"strContent\":\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\"}\nmuromari@com , 1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\n8 Nov 2015 15:48:17 GMT: {\"toAddress\":\"muromari@com\",\"strContent\":\"1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\"}\nmuromari@com , 1\u3044\u3044\u306d\u3057\u307e\u3057\u305f\n\n```\n", "tags": ["SpringBoot", "spring", "RabbitMQ", "spring-boot"]}