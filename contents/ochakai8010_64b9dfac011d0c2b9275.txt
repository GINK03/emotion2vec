{"context": " More than 1 year has passed since last update.\nSource.cpp\n#include \"Header.h\"\n\nvoid BallCount::initNowCountInfo()\n{\n    for(int i=0; i<COUNTINFONUMBER; i++){\n        m_nowCountInfo[i] = 0;\n    }\n}\n\nvoid BallCount::ballStrikeOutRenew()\n{\n    if(m_nowCountInfo[2] == 4){\n        m_nowCountInfo[2] = 0;\n        m_nowCountInfo[1] = 0;\n    }\n    if(m_nowCountInfo[1] == 3){\n        m_nowCountInfo[2] = 0;\n        m_nowCountInfo[1] = 0;\n        m_nowCountInfo[0]++;\n    }\n    if(m_nowCountInfo[0] == 3){\n        m_nowCountInfo[2] = 0;\n        m_nowCountInfo[1] = 0;\n        m_nowCountInfo[0] = 0;\n    }\n}\n\nvoid BallCount::s_process()\n{\n    m_nowCountInfo[1]++;\n}\n\nvoid BallCount::b_process()\n{\n    m_nowCountInfo[2]++;\n}\n\nvoid BallCount::f_process()\n{\n    if(m_nowCountInfo[1] != 2)\n        m_nowCountInfo[1]++;\n}\n\nvoid BallCount::h_process()\n{\n    m_nowCountInfo[2] = 4;\n}\n\nvoid BallCount::p_process()\n{\n    m_nowCountInfo[1] = 3;\n}\n\nvoid BallCount::nowCountInfoRenew(const char& addChar)\n{\n    std::string result = \"\";\n    if(addChar == 's'){\n        s_process();\n    }\n    if(addChar == 'b'){\n        b_process();\n    }\n    if(addChar == 'f'){\n        f_process();\n    }\n    if(addChar == 'h'){\n        h_process();\n    }\n    if(addChar == 'p'){\n        p_process();\n    }\n    ballStrikeOutRenew();\n}\n\nconst std::string BallCount::changeString()\n{\n    std::string result = \"\";\n    for(int i=0; i<COUNTINFONUMBER; i++){\n        result += std::to_string(m_nowCountInfo[i]);\n    }\n    result += \",\";\n    return result;\n}\n\nconst std::string BallCount::solve(const std::string& input)\n{\n    initNowCountInfo();\n    std::string result;\n    for(int i=0; i<input.size(); i++){\n        nowCountInfoRenew(input.at(i));\n        result += changeString();\n    }\n    result.erase(--result.end());\n    return result;\n}\n\nvoid  BallCount::test(const std::string& inputStr)\n{\n    std::string input, output;\n    int index = inputStr.find(\"-\", 0);\n    input = inputStr.substr(0,index-1);\n    output = inputStr.substr(index+3);\n\n    std::string result = solve(input);\n    std::cout << result << std::endl;\n    if(result == output){\n        std::cout << \"test is OK!\" << std::endl;\n    }else{\n        std::cout << \"test is NG!\" << std::endl;\n    }\n}\n\nint main()\n{\n    BallCount bc;\n    bc.test(\"s -> 010\");\n    bc.test(\"sss -> 010,020,100\");\n    bc.test(\"bbbb -> 001,002,003,000\");\n    bc.test(\"ssbbbb -> 010,020,021,022,023,000\");\n    bc.test(\"hsbhfhbh -> 000,010,011,000,010,000,001,000\");\n    bc.test(\"psbpfpbp -> 100,110,111,200,210,000,001,100\");\n    bc.test(\"ppp -> 100,200,000\");\n    bc.test(\"ffffs -> 010,020,020,020,100\");\n    bc.test(\"ssspfffs -> 010,020,100,200,210,220,220,000\");\n    bc.test(\"bbbsfbppp -> 001,002,003,013,023,000,100,200,000\");\n    bc.test(\"sssbbbbsbhsbppp -> 010,020,100,101,102,103,100,110,111,100,110,111,200,000,100\");\n    bc.test(\"ssffpffssp -> 010,020,020,020,100,110,120,200,210,000\");\n    return 0;\n}\n\n\n\nHeader.h\n#ifndef _HEADER_H\n#define _HEADER_H\n\n#include <string>\n#include <iostream>\n\n#define COUNTINFONUMBER 3\n\nclass BallCount\n{\npublic:\n    void test(const std::string& inputStr);\n    int m_nowCountInfo[COUNTINFONUMBER];\nprivate:\n    void initNowCountInfo();\n    const std::string solve(const std::string& input);\n    const std::string changeString();\n    void nowCountInfoRenew(const char& addChar);\n    void ballStrikeOutRenew();\n    void s_process();\n    void b_process();\n    void f_process();\n    void h_process();\n    void p_process();\n};\n\n#endif\n\n\n\n```Source.cpp\n#include \"Header.h\"\n\nvoid BallCount::initNowCountInfo()\n{\n\tfor(int i=0; i<COUNTINFONUMBER; i++){\n\t\tm_nowCountInfo[i] = 0;\n\t}\n}\n\nvoid BallCount::ballStrikeOutRenew()\n{\n\tif(m_nowCountInfo[2] == 4){\n\t\tm_nowCountInfo[2] = 0;\n\t\tm_nowCountInfo[1] = 0;\n\t}\n\tif(m_nowCountInfo[1] == 3){\n\t\tm_nowCountInfo[2] = 0;\n\t\tm_nowCountInfo[1] = 0;\n\t\tm_nowCountInfo[0]++;\n\t}\n\tif(m_nowCountInfo[0] == 3){\n\t\tm_nowCountInfo[2] = 0;\n\t\tm_nowCountInfo[1] = 0;\n\t\tm_nowCountInfo[0] = 0;\n\t}\n}\n\nvoid BallCount::s_process()\n{\n\tm_nowCountInfo[1]++;\n}\n\nvoid BallCount::b_process()\n{\n\tm_nowCountInfo[2]++;\n}\n\nvoid BallCount::f_process()\n{\n\tif(m_nowCountInfo[1] != 2)\n\t\tm_nowCountInfo[1]++;\n}\n\nvoid BallCount::h_process()\n{\n\tm_nowCountInfo[2] = 4;\n}\n\nvoid BallCount::p_process()\n{\n\tm_nowCountInfo[1] = 3;\n}\n\nvoid BallCount::nowCountInfoRenew(const char& addChar)\n{\n\tstd::string result = \"\";\n\tif(addChar == 's'){\n\t\ts_process();\n\t}\n\tif(addChar == 'b'){\n\t\tb_process();\n\t}\n\tif(addChar == 'f'){\n\t\tf_process();\n\t}\n\tif(addChar == 'h'){\n\t\th_process();\n\t}\n\tif(addChar == 'p'){\n\t\tp_process();\n\t}\n\tballStrikeOutRenew();\n}\n\nconst std::string BallCount::changeString()\n{\n\tstd::string result = \"\";\n\tfor(int i=0; i<COUNTINFONUMBER; i++){\n\t\tresult += std::to_string(m_nowCountInfo[i]);\n\t}\n\tresult += \",\";\n\treturn result;\n}\n\nconst std::string BallCount::solve(const std::string& input)\n{\n\tinitNowCountInfo();\n\tstd::string result;\n\tfor(int i=0; i<input.size(); i++){\n\t\tnowCountInfoRenew(input.at(i));\n\t\tresult += changeString();\n\t}\n\tresult.erase(--result.end());\n\treturn result;\n}\n\nvoid  BallCount::test(const std::string& inputStr)\n{\n\tstd::string input, output;\n\tint index = inputStr.find(\"-\", 0);\n\tinput = inputStr.substr(0,index-1);\n\toutput = inputStr.substr(index+3);\n\n\tstd::string result = solve(input);\n\tstd::cout << result << std::endl;\n\tif(result == output){\n\t\tstd::cout << \"test is OK!\" << std::endl;\n\t}else{\n\t\tstd::cout << \"test is NG!\" << std::endl;\n\t}\n}\n\nint main()\n{\n\tBallCount bc;\n\tbc.test(\"s -> 010\");\n\tbc.test(\"sss -> 010,020,100\");\n\tbc.test(\"bbbb -> 001,002,003,000\");\n\tbc.test(\"ssbbbb -> 010,020,021,022,023,000\");\n\tbc.test(\"hsbhfhbh -> 000,010,011,000,010,000,001,000\");\n\tbc.test(\"psbpfpbp -> 100,110,111,200,210,000,001,100\");\n\tbc.test(\"ppp -> 100,200,000\");\n\tbc.test(\"ffffs -> 010,020,020,020,100\");\n\tbc.test(\"ssspfffs -> 010,020,100,200,210,220,220,000\");\n\tbc.test(\"bbbsfbppp -> 001,002,003,013,023,000,100,200,000\");\n\tbc.test(\"sssbbbbsbhsbppp -> 010,020,100,101,102,103,100,110,111,100,110,111,200,000,100\");\n\tbc.test(\"ssffpffssp -> 010,020,020,020,100,110,120,200,210,000\");\n\treturn 0;\n}\n```\n\n```Header.h\n#ifndef _HEADER_H\n#define _HEADER_H\n\n#include <string>\n#include <iostream>\n\n#define COUNTINFONUMBER 3\n\nclass BallCount\n{\npublic:\n\tvoid test(const std::string& inputStr);\n\tint m_nowCountInfo[COUNTINFONUMBER];\nprivate:\n\tvoid initNowCountInfo();\n\tconst std::string solve(const std::string& input);\n\tconst std::string changeString();\n\tvoid nowCountInfoRenew(const char& addChar);\n\tvoid ballStrikeOutRenew();\n\tvoid s_process();\n\tvoid b_process();\n\tvoid f_process();\n\tvoid h_process();\n\tvoid p_process();\n};\n\n#endif\n```\n", "tags": ["yhpg1.0"]}