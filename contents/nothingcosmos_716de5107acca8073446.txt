{"context": " More than 1 year has passed since last update.C\u8a00\u8a9e\u3078\u306e\u611f\u8b1d\u306e\u6b63\u62f3\u7a81\u304d \u4eca\u65e5\u306f21\u65e5\u76ee\u3001\u3067\u3059\n\u4eca\u56de\u306fJVM\u7de8\u3067\u3059\u3002\u3002JDK\u304c\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5468\u308a\u306e\u5438\u53ce\u3092\u307b\u3068\u3093\u3069\u81ea\u524d\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u56de\u3067\u5206\u304b\u308a\u307e\u3057\u305f\u306e\u3067\u3001\nJVM\u306e\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u62bd\u8c61\u5316\u3057\u305fAPI\u3063\u3066\u4f55\u3092\u6307\u3057\u3066\u3044\u308b\u3093\u3067\u3057\u3087\u3046\u306d\u3002\nfallout4\u3092\u30d7\u30ec\u30a4\u3059\u308b\u508d\u3089\u571f\u65e5\u306b\u3053\u3093\u306a\u306e\u66f8\u3044\u3066\u307e\u3057\u305f\u304c\u3001\u308f\u305f\u3057\u306e\u9032\u6357\u826f\u304f\u306a\u3044\u3001\u52d8\u9055\u3044\u3057\u306a\u3044\u3067\u3088\u306d\uff01\nOpenJDK\u306e\u53d6\u5f97\u65b9\u6cd5\u3068\u304b\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\nhttp://qiita.com/nothingcosmos/items/935cd0b9d62ef01ddddc\n\nlibjvm.so\u306e\u4e2d\u8eab\nJVM\u304c\u3069\u3046\u3044\u3046glibc\u306eAPI\u3092\u53e9\u3044\u3066\u3044\u308b\u306e\u304b\u3001JVM\u304cjdk\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308bAPI\u306b\u306f\u3069\u3093\u306a\u3082\u306e\u304c\u3042\u308b\u306e\u304b\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u307e\u305a\u306fglibc\u306e\u547c\u3073\u51fa\u3057\u4e00\u89a7\u3067\u3059\u3002\n_IO_getc@@GLIBC_2.2.5\n__assert_fail@@GLIBC_2.2.5\n__cxa_atexit@@GLIBC_2.2.5\n__cxa_finalize@@GLIBC_2.2.5\n__environ@@GLIBC_2.2.5\n__errno_location@@GLIBC_2.2.5\n__fxstat64@@GLIBC_2.2.5\n__fxstat@@GLIBC_2.2.5\n__isnan@@GLIBC_2.2.5\n__libc_current_sigrtmax@@GLIBC_2.2.5\n__libc_current_sigrtmin@@GLIBC_2.2.5\n__lxstat@@GLIBC_2.2.5\n__sigsetjmp@@GLIBC_2.2.5\n__stack_chk_fail@@GLIBC_2.4\n__timezone@@GLIBC_2.2.5\n__tls_get_addr@@GLIBC_2.3\n__xstat64@@GLIBC_2.2.5\n__xstat@@GLIBC_2.2.5\n_exit@@GLIBC_2.2.5\nabort@@GLIBC_2.2.5\naccept@@GLIBC_2.2.5\naccess@@GLIBC_2.2.5\nbind@@GLIBC_2.2.5\nceil@@GLIBC_2.2.5\nchmod@@GLIBC_2.2.5\nclose@@GLIBC_2.2.5\nclosedir@@GLIBC_2.2.5\nconfstr@@GLIBC_2.2.5\nconnect@@GLIBC_2.2.5\nctime@@GLIBC_2.2.5\ndirfd@@GLIBC_2.2.5\ndl_iterate_phdr@@GLIBC_2.2.5\ndladdr@@GLIBC_2.2.5\ndlclose@@GLIBC_2.2.5\ndlerror@@GLIBC_2.2.5\ndlopen@@GLIBC_2.2.5\ndlsym@@GLIBC_2.2.5\ndlvsym@@GLIBC_2.2.5\nenviron@@GLIBC_2.2.5\nexecve@@GLIBC_2.2.5\nexit@@GLIBC_2.2.5\nexp@@GLIBC_2.2.5\nfchdir@@GLIBC_2.2.5\nfclose@@GLIBC_2.2.5\nfcntl@@GLIBC_2.2.5\nfdopen@@GLIBC_2.2.5\nfeof@@GLIBC_2.2.5\nfflush@@GLIBC_2.2.5\nfgetc@@GLIBC_2.2.5\nfgets@@GLIBC_2.2.5\nfileno@@GLIBC_2.2.5\nfloor@@GLIBC_2.2.5\nfmod@@GLIBC_2.2.5\nfopen64@@GLIBC_2.2.5\nfopen@@GLIBC_2.2.5\nfork@@GLIBC_2.2.5\nfprintf@@GLIBC_2.2.5\nfputc@@GLIBC_2.2.5\nfputs@@GLIBC_2.2.5\nfread@@GLIBC_2.2.5\nfree@@GLIBC_2.2.5\nfrexp@@GLIBC_2.2.5\nfscanf@@GLIBC_2.2.5\nfseek@@GLIBC_2.2.5\nfsync@@GLIBC_2.2.5\nftell@@GLIBC_2.2.5\nftruncate64@@GLIBC_2.2.5\nftruncate@@GLIBC_2.2.5\nfwrite@@GLIBC_2.2.5\ngetcwd@@GLIBC_2.2.5\ngetegid@@GLIBC_2.2.5\ngetenv@@GLIBC_2.2.5\ngeteuid@@GLIBC_2.2.5\ngetgid@@GLIBC_2.2.5\ngethostname@@GLIBC_2.2.5\ngetloadavg@@GLIBC_2.2.5\ngetpagesize@@GLIBC_2.2.5\ngetpid@@GLIBC_2.2.5\ngetpriority@@GLIBC_2.2.5\ngetpwuid_r@@GLIBC_2.2.5\ngetrlimit@@GLIBC_2.2.5\ngetrusage@@GLIBC_2.2.5\ngetsockname@@GLIBC_2.2.5\ngetsockopt@@GLIBC_2.2.5\ngettimeofday@@GLIBC_2.2.5\ngetuid@@GLIBC_2.2.5\ngnu_get_libc_release@@GLIBC_2.2.5\ngnu_get_libc_version@@GLIBC_2.2.5\nioctl@@GLIBC_2.2.5\nisalnum@@GLIBC_2.2.5\nisatty@@GLIBC_2.2.5\nisspace@@GLIBC_2.2.5\nkill@@GLIBC_2.2.5\nlisten@@GLIBC_2.2.5\nlocaltime_r@@GLIBC_2.2.5\nlog10@@GLIBC_2.2.5\nlseek64@@GLIBC_2.2.5\nlseek@@GLIBC_2.2.5\nmadvise@@GLIBC_2.2.5\nmalloc@@GLIBC_2.2.5\nmemchr@@GLIBC_2.2.5\nmemcpy@@GLIBC_2.2.5\nmemmove@@GLIBC_2.2.5\nmemset@@GLIBC_2.2.5\nmincore@@GLIBC_2.2.5\nmkdir@@GLIBC_2.2.5\nmmap@@GLIBC_2.2.5\nmprotect@@GLIBC_2.2.5\nmunmap@@GLIBC_2.2.5\nnanosleep@@GLIBC_2.2.5\nopen64@@GLIBC_2.2.5\nopen@@GLIBC_2.2.5\nopendir@@GLIBC_2.2.5\nperror@@GLIBC_2.2.5\npoll@@GLIBC_2.2.5\npread64@@GLIBC_2.2.5\nprintf@@GLIBC_2.2.5\npthread_attr_destroy@@GLIBC_2.2.5\npthread_attr_getstack@@GLIBC_2.2.5\npthread_attr_init@@GLIBC_2.2.5\npthread_attr_setdetachstate@@GLIBC_2.2.5\npthread_attr_setguardsize@@GLIBC_2.2.5\npthread_attr_setstacksize@@GLIBC_2.2.5\npthread_cancel@@GLIBC_2.2.5\npthread_cond_destroy@@GLIBC_2.3.2\npthread_cond_init@@GLIBC_2.3.2\npthread_cond_signal@@GLIBC_2.3.2\npthread_cond_timedwait@@GLIBC_2.3.2\npthread_cond_wait@@GLIBC_2.3.2\npthread_condattr_init@@GLIBC_2.2.5\npthread_condattr_setclock@@GLIBC_2.3.3\npthread_create@@GLIBC_2.2.5\npthread_getattr_np@@GLIBC_2.2.5\npthread_getspecific@@GLIBC_2.2.5\npthread_key_create@@GLIBC_2.2.5\npthread_key_delete@@GLIBC_2.2.5\npthread_kill@@GLIBC_2.2.5\npthread_mutex_init@@GLIBC_2.2.5\npthread_mutex_lock@@GLIBC_2.2.5\npthread_mutex_trylock@@GLIBC_2.2.5\npthread_mutex_unlock@@GLIBC_2.2.5\npthread_once@@GLIBC_2.2.5\npthread_self@@GLIBC_2.2.5\npthread_setspecific@@GLIBC_2.2.5\npthread_sigmask@@GLIBC_2.2.5\nputchar@@GLIBC_2.2.5\nputs@@GLIBC_2.2.5\npwrite64@@GLIBC_2.2.5\nqsort@@GLIBC_2.2.5\nraise@@GLIBC_2.2.5\nread@@GLIBC_2.2.5\nreaddir@@GLIBC_2.2.5\nreaddir_r@@GLIBC_2.2.5\nrealloc@@GLIBC_2.2.5\nrealpath@@GLIBC_2.3\nrecv@@GLIBC_2.2.5\nrecvfrom@@GLIBC_2.2.5\nremove@@GLIBC_2.2.5\nrename@@GLIBC_2.2.5\nrewind@@GLIBC_2.2.5\nsched_yield@@GLIBC_2.2.5\nsem_destroy@@GLIBC_2.2.5\nsem_init@@GLIBC_2.2.5\nsem_post@@GLIBC_2.2.5\nsem_timedwait@@GLIBC_2.2.5\nsem_trywait@@GLIBC_2.2.5\nsem_wait@@GLIBC_2.2.5\nsend@@GLIBC_2.2.5\nsendto@@GLIBC_2.2.5\nsetpriority@@GLIBC_2.2.5\nsetrlimit@@GLIBC_2.2.5\nsetsockopt@@GLIBC_2.2.5\nshmat@@GLIBC_2.2.5\nshmctl@@GLIBC_2.2.5\nshmdt@@GLIBC_2.2.5\nshmget@@GLIBC_2.2.5\nshutdown@@GLIBC_2.2.5\nsigaction@@GLIBC_2.2.5\nsigaddset@@GLIBC_2.2.5\nsigdelset@@GLIBC_2.2.5\nsigemptyset@@GLIBC_2.2.5\nsigfillset@@GLIBC_2.2.5\nsigismember@@GLIBC_2.2.5\nsiglongjmp@@GLIBC_2.2.5\nsigprocmask@@GLIBC_2.2.5\nsigsuspend@@GLIBC_2.2.5\nsleep@@GLIBC_2.2.5\nsnprintf@@GLIBC_2.2.5\nsocket@@GLIBC_2.2.5\nsprintf@@GLIBC_2.2.5\nsqrt@@GLIBC_2.2.5\nsscanf@@GLIBC_2.2.5\nstderr@@GLIBC_2.2.5\nstdin@@GLIBC_2.2.5\nstdout@@GLIBC_2.2.5\nstrcasecmp@@GLIBC_2.2.5\nstrcat@@GLIBC_2.2.5\nstrchr@@GLIBC_2.2.5\nstrcmp@@GLIBC_2.2.5\nstrcpy@@GLIBC_2.2.5\nstrcspn@@GLIBC_2.2.5\nstrdup@@GLIBC_2.2.5\nstrerror@@GLIBC_2.2.5\nstrlen@@GLIBC_2.2.5\nstrncasecmp@@GLIBC_2.2.5\nstrncat@@GLIBC_2.2.5\nstrncmp@@GLIBC_2.2.5\nstrncpy@@GLIBC_2.2.5\nstrpbrk@@GLIBC_2.2.5\nstrrchr@@GLIBC_2.2.5\nstrstr@@GLIBC_2.2.5\nstrtod@@GLIBC_2.2.5\nstrtol@@GLIBC_2.2.5\nstrtoul@@GLIBC_2.2.5\nsyscall@@GLIBC_2.2.5\nsysconf@@GLIBC_2.2.5\nsysinfo@@GLIBC_2.2.5\ntime@@GLIBC_2.2.5\ntimes@@GLIBC_2.2.5\ntimezone@@GLIBC_2.2.5\ntolower@@GLIBC_2.2.5\nuname@@GLIBC_2.2.5\nunlink@@GLIBC_2.2.5\nunsetenv@@GLIBC_2.2.5\nvfprintf@@GLIBC_2.2.5\nvsnprintf@@GLIBC_2.2.5\nvsscanf@@GLIBC_2.2.5\nwaitpid@@GLIBC_2.2.5\nwrite@@GLIBC_2.2.5\n\n\npthread\u7cfb\u304c\u591a\u3044\u306e\u306f\u3001JVM\u5185\u90e8\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u7ba1\u7406\u3057\u3066Java\u5074\u306b\u63d0\u4f9b\u3059\u308b\u304b\u3089\u3002\nfile io\u7cfb\u304c\u3042\u308b\u306e\u306f\u3001\u305f\u3076\u3093class file\u8aad\u3080\u3093\u3067\u3057\u3087\u3046\u3002\nnet\u7cfb\u304c\u3042\u308b\u306e\u306f\u3001\u3001JDWP\u3067\u4f7f\u3046\u3093\u3067\u3057\u3087\u3046\u3002\nJVM\u304c\u5916\u90e8\u306b\u516c\u958b\u3057\u3066\u3044\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306b\u7e8f\u3081\u3089\u308c\u3066\u3044\u307e\u3057\u305f\u3002\nhttp://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/6ea3aea950d1/src/share/javavm/export\n\u3053\u3061\u3089\u306edoxygen\u3067\u3082\u898b\u308c\u307e\u3059\u3002\nhttp://cr.openjdk.java.net/~ngmr/vmi.00/html/jvm_8h.html\nprefix\u3054\u3068\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3001\u591a\u3044\u306e\u306fJVM\u7cfb\u3001JVMTI\u7cfb\u3067\u3057\u3087\u3046\u304b\u306d\u3002\n\n\u6982\u8981\nJVM\u304c\u5916\u90e8\u306b\u516c\u958b\u3057\u3066\u3044\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u898b\u3066\u3044\u3066\u6c17\u3065\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u3046\u3044\u3046\u306e\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\nhttp://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/6ea3aea950d1/src/share/javavm/export/jvm.h\nPART 1: Functions for Native Libraries\n\u3053\u308c\u3089\u306fjdk\u306b\u5b9f\u88c5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u304f\u3001vm\u5074\u304c\u5c02\u7528\u306eAPI\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u306d\u3002\nPART 3: I/O and Network Support\n\u3059\u3054\u304f\u602a\u3057\u3044API\u304c\u7d9a\u3005\u3068\u3042\u3063\u3066\u3001open() close() read() write() socket() send() recv()\u3068\u304b\n\u3053\u308c\u3053\u305d\u304cJVM\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u62bd\u8c61\u5316\u3057\u305fC API\u306b\u9055\u3044\u306a\u3044\uff01\n\n\u5b9f\u88c5\nJVM\u306e\u5b9f\u88c5\u306f\u3001jdk8u/hotspot\u306e\u4e0b\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001JVM_\u7cfb\u306eAPI\u306e\u5b9f\u88c5\u3092\u63a2\u3057\u3066\u307f\u307e\u3059\u3002\n\njdk8u\n  hotspot (VM\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 C++\u4e3b\u4f53)\n    src\n      cpu\n      os\n      os_cpu\n      share\n        vm\n\n\n\u307e\u305a\u306f\u30d8\u30c3\u30c0\u306e\u5ba3\u8a00\u304b\u3089\n\njdk8u/jdk/src/share/javavm/export/jvm.h\n\nJNIEXPORT jint JNICALL\nJVM_Open(const char *fname, jint flags, jint mode);\n\nJNIEXPORT jint JNICALL\nJVM_Close(jint fd);\n\nJNIEXPORT jint JNICALL\nJVM_Read(jint fd, char *buf, jint nbytes);\n\nJNIEXPORT jint JNICALL\nJVM_Write(jint fd, char *buf, jint nbytes);\n\n\nJNIEXPORT jint JNICALL\nJVM_Socket(jint domain, jint type, jint protocol);\n\nJNIEXPORT jint JNICALL\nJVM_SocketClose(jint fd);\n\nJNIEXPORT jint JNICALL\nJVM_Recv(jint fd, char *buf, jint nBytes, jint flags);\n\nJNIEXPORT jint JNICALL\nJVM_Send(jint fd, char *buf, jint nBytes, jint flags);\n\nJNIEXPORT jint JNICALL\nJVM_RecvFrom(jint fd, char *buf, int nBytes,\n                  int flags, struct sockaddr *from, int *fromlen);\n\nJNIEXPORT jint JNICALL\nJVM_SendTo(jint fd, char *buf, int len,\n                int flags, struct sockaddr *to, int tolen);\n\n\n\n\u4ee3\u8868\u7684\u306a\u3082\u306e\u3092\u9078\u51fa\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u3059\u3054\u304f\u7d20\u6734\u3067\u3001\u5b9f\u88c5\u304c\u900f\u3051\u3066\u307f\u3048\u305d\u3046\u3067\u3059\u3002\n\u5b9f\u88c5\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3002\n\u307e\u305a\u306f\u30d5\u30a1\u30a4\u30ebIO\u306e\u307b\u3046\n\njdk8u/hotspot/src/share/vm/prims/jvm.cpp\nJVM_LEAF(jint, JVM_Open(const char *fname, jint flags, jint mode))\n  JVMWrapper2(\"JVM_Open (%s)\", fname);\n\n  //%note jvm_r6\n  int result = os::open(fname, flags, mode);\n  if (result >= 0) {\n    return result;\n  } else {\n    switch(errno) {\n      case EEXIST:\n        return JVM_EEXIST;\n      default:\n        return -1;\n    }\n  }\nJVM_END\n\n\nJVM_LEAF(jint, JVM_Close(jint fd))\n  JVMWrapper2(\"JVM_Close (0x%x)\", fd);\n  //%note jvm_r6\n  return os::close(fd);\nJVM_END\n\n\nJVM_LEAF(jint, JVM_Read(jint fd, char *buf, jint nbytes))\n  JVMWrapper2(\"JVM_Read (0x%x)\", fd);\n\n  //%note jvm_r6\n  return (jint)os::restartable_read(fd, buf, nbytes);\nJVM_END\n\n\nJVM_LEAF(jint, JVM_Write(jint fd, char *buf, jint nbytes))\n  JVMWrapper2(\"JVM_Write (0x%x)\", fd);\n\n  //%note jvm_r6\n  return (jint)os::write(fd, buf, nbytes);\nJVM_END\n\n\n\n\u7a81\u7136\u306e\u30de\u30af\u30ed\uff01api\u306e\u5148\u982d\u306bhook\u4ed5\u8fbc\u307f\u305f\u3044\u3088\u3046\u3067\u3059\u306d\u3002\n\nhotspot/src/share/vm/runtime/interfaceSupport.hpp\n#define JVM_LEAF(result_type, header)                                \\\nextern \"C\" {                                                         \\\n  result_type JNICALL header {                                       \\\n    VM_Exit::block_if_vm_exited();                                   \\\n    VM_LEAF_BASE(result_type, header)\n\n#define JVM_END } }\n\n// LEAF routines do not lock, GC or throw exceptions\n\n#define VM_LEAF_BASE(result_type, header)                            \\\n  TRACE_CALL(result_type, header)                                    \\\n  debug_only(NoHandleMark __hm;)                                     \\\n  os::verify_stack_alignment();                                      \\\n  /* begin of body */\n\n\n\nAPI\u306e\u547c\u3073\u51fa\u3057\u306fos::XXX\u3067\u62bd\u8c61\u5316\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u306d\u3002\nos::XXX\u306e\u5b9f\u4f53\u304c\u3069\u3053\u306b\u3042\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001OS\u3054\u3068\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002\n\njdk8u/hotspot/src/os/windows/vm/os_windows.inline.hpp\n\ninline size_t os::read(int fd, void *buf, unsigned int nBytes) {\n  return ::read(fd, buf, nBytes);\n}\n\ninline size_t os::restartable_read(int fd, void *buf, unsigned int nBytes) {\n  return ::read(fd, buf, nBytes);\n}\n\ninline size_t os::write(int fd, const void *buf, unsigned int nBytes) {\n  return ::write(fd, buf, nBytes);\n}\n\ninline int os::close(int fd) {\n  return ::close(fd);\n}\n\n\n\nsocket\u7cfb\u306e\u5b9f\u88c5\u306f\u3053\u3061\u3089\n\njdk8u/hotspot/src/os/windows/vm/os_windows.cpp\nint os::recvfrom(int fd, char *buf, size_t nBytes, uint flags,\n                 sockaddr* from, socklen_t* fromlen) {\n\n  return ::recvfrom(fd, buf, (int)nBytes, flags, from, fromlen);\n}\n\nint os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n  return ::recv(fd, buf, (int)nBytes, flags);\n}\n\nint os::send(int fd, char* buf, size_t nBytes, uint flags) {\n  return ::send(fd, buf, (int)nBytes, flags);\n}\n\n\n\n\u304a\u6b21\u306flinux\n\njdk8u/hotspot/src/os/linux/vm/os_linux.inline.hpp\n// macros for restartable system calls\n\n#define RESTARTABLE(_cmd, _result) do { \\\n    _result = _cmd; \\\n  } while(((int)_result == OS_ERR) && (errno == EINTR))\n\n#define RESTARTABLE_RETURN_INT(_cmd) do { \\\n  int _result; \\\n  RESTARTABLE(_cmd, _result); \\\n  return _result; \\\n} while(false)\n\ninline size_t os::restartable_read(int fd, void *buf, unsigned int nBytes) {\n  size_t res;\n  RESTARTABLE( (size_t) ::read(fd, buf, (size_t) nBytes), res);\n  return res;\n}\n\ninline size_t os::write(int fd, const void *buf, unsigned int nBytes) {\n  size_t res;\n  RESTARTABLE((size_t) ::write(fd, buf, (size_t) nBytes), res);\n  return res;\n}\n\ninline int os::close(int fd) {\n  return ::close(fd);\n}\n\ninline int os::socket_close(int fd) {\n  return ::close(fd);\n}\n\ninline int os::socket(int domain, int type, int protocol) {\n  return ::socket(domain, type, protocol);\n}\n\ninline int os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n  RESTARTABLE_RETURN_INT(::recv(fd, buf, nBytes, flags));\n}\n\ninline int os::send(int fd, char* buf, size_t nBytes, uint flags) {\n  RESTARTABLE_RETURN_INT(::send(fd, buf, nBytes, flags));\n}\n\n\n\nlinux\u306e\u307b\u3046\u306f\u5fae\u5999\u306brepeatable\u30de\u30af\u30ed\u3092\u4f7f\u3063\u3066\u3044\u3066\u5fae\u5999\u306b\u7570\u306a\u308a\u307e\u3059\u306d\u3002\n\u30b7\u30f3\u30d7\u30eb\u306bfd\u3092\u5f15\u6570\u306b\u53d6\u308bAPI\u306b\u7e8f\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u306e\u3088\u3046\u306a\u3068\u3053\u308d\u3067\u4f7f\u3046\u306e\u3067\u3057\u3087\u3046\u304b\u3002jdk\u5074\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f7f\u7528\u4f8b\n\ngrep\nshare/native/java/util/zip/zip_util.c:    return JVM_Open(fname, flags, 0);\nshare/native/java/util/zip/ZipFile.c:            zfd = JVM_Open(path, flag, 0);\nshare/javavm/export/jvm.h:JVM_Open(const char *fname, jint flags, jint mode);\nsolaris/native/sun/management/OperatingSystemImpl.c:    fd = JVM_Open(\"/proc/self/psinfo\", O_RDONLY, 0);\n\n\nJVM_Open\u4f7f\u3063\u3066\u308b\u3068\u3053\u308d\u307b\u3093\u3068\u5c11\u306a\u3044\u3002\u3002\n\njdk/src/share/native/java/util/zip/zip_util.c\n\nstatic ZFILE\nZFILE_Open(const char *fname, int flags) {\n#ifdef WIN32\n    const DWORD access =\n        (flags & O_RDWR)   ? (GENERIC_WRITE | GENERIC_READ) :\n        (flags & O_WRONLY) ?  GENERIC_WRITE :\n        GENERIC_READ;\n    const DWORD sharing =\n        FILE_SHARE_READ | FILE_SHARE_WRITE;\n    const DWORD disposition =\n        /* Note: O_TRUNC overrides O_CREAT */\n        (flags & O_TRUNC) ? CREATE_ALWAYS :\n        (flags & O_CREAT) ? OPEN_ALWAYS   :\n        OPEN_EXISTING;\n    const DWORD  maybeWriteThrough =\n        (flags & (O_SYNC | O_DSYNC)) ?\n        FILE_FLAG_WRITE_THROUGH :\n        FILE_ATTRIBUTE_NORMAL;\n    const DWORD maybeDeleteOnClose =\n        (flags & O_TEMPORARY) ?\n        FILE_FLAG_DELETE_ON_CLOSE :\n        FILE_ATTRIBUTE_NORMAL;\n    const DWORD flagsAndAttributes = maybeWriteThrough | maybeDeleteOnClose;\n\n    return (jlong) CreateFile(\n        fname,          /* Wide char path name */\n        access,         /* Read and/or write permission */\n        sharing,        /* File sharing flags */\n        NULL,           /* Security attributes */\n        disposition,        /* creation disposition */\n        flagsAndAttributes, /* flags and attributes */\n        NULL);\n\n#else\n    return JVM_Open(fname, flags, 0);\n#endif\n}\n\n\nWindows\u3067\u306f\u547c\u3070\u308c\u306a\u3044\u3001\u3001\u3060\u3068\u3001\u3001\u3001\uff01\uff1f\nsolaris/native\u3082windows\u3067\u306f\u901a\u3089\u306a\u3044\u30d1\u30b9\u3060\u308d\u3046\u3057\u3001\nSocket\u306e\u307b\u3046\u3082\u63a2\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\njdk/src_grep\nshare/javavm/export/jvm.h:JVM_Socket(jint domain, jint type, jint protocol);\nshare/javavm/export/jvm.h:JVM_SocketClose(jint fd);\nshare/javavm/export/jvm.h:JVM_SocketShutdown(jint fd, jint howto);\nshare/javavm/export/jvm.h:JVM_SocketAvailable(jint fd, jint *result);\nsolaris/native/java/net/net_util_md.h:#define NET_SocketClose JVM_SocketClose\nsolaris/native/java/net/Inet4AddressImpl.c:    fd = JVM_Socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);\nsolaris/native/java/net/Inet4AddressImpl.c:    fd = JVM_Socket(AF_INET, SOCK_STREAM, 0);\nsolaris/native/java/net/NetworkInterface.c:    if ((sock = JVM_Socket(proto, SOCK_DGRAM, 0)) < 0) {\nsolaris/native/java/net/NetworkInterface.c:     if ((sock = JVM_Socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\nsolaris/native/java/net/NetworkInterface.c:              if ( (sock = JVM_Socket(AF_INET6, SOCK_DGRAM, 0)) < 0 ){\nsolaris/native/java/net/NetworkInterface.c:     if ((sock = JVM_Socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\nsolaris/native/java/net/NetworkInterface.c:              if ( (sock = JVM_Socket(AF_INET6, SOCK_DGRAM, 0)) < 0 ){\nsolaris/native/java/net/NetworkInterface.c:                if ( (sock = JVM_Socket(AF_INET6, SOCK_DGRAM, 0)) < 0 ){\nsolaris/native/java/net/NetworkInterface.c:     if ((sock = JVM_Socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\nsolaris/native/java/net/NetworkInterface.c:              if ( (sock = JVM_Socket(AF_INET6, SOCK_DGRAM, 0)) < 0 ){\nsolaris/native/java/net/net_util_md.c:    fd = JVM_Socket(AF_INET6, SOCK_STREAM, 0) ;\nsolaris/native/java/net/PlainDatagramSocketImpl.c:    if ((fd = JVM_Socket(domain, SOCK_DGRAM, 0)) == JVM_IO_ERR) {\nsolaris/native/java/net/Inet6AddressImpl.c:    fd = JVM_Socket(AF_INET6, SOCK_RAW, IPPROTO_ICMPV6);\nsolaris/native/java/net/Inet6AddressImpl.c:    fd = JVM_Socket(AF_INET6, SOCK_STREAM, 0);\nsolaris/native/java/net/PlainSocketImpl.c:    JVM_SocketShutdown(sv[0], 2);\nsolaris/native/java/net/PlainSocketImpl.c:    JVM_SocketClose(sv[1]);\nsolaris/native/java/net/PlainSocketImpl.c:    if ((fd = JVM_Socket(domain, type, 0)) == JVM_IO_ERR) {\nsolaris/native/java/net/PlainSocketImpl.c:                JVM_SocketShutdown(fd, 2);\nsolaris/native/java/net/PlainSocketImpl.c:    /* JVM_SocketAvailable returns 0 for failure, 1 for success */\nsolaris/native/java/net/PlainSocketImpl.c:    if (!JVM_SocketAvailable(fd, &ret)){\nsolaris/native/java/net/PlainSocketImpl.c:    JVM_SocketShutdown(fd, howto);\n\n\n\nsolaris/native\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u306f\u7d50\u69cb\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\njdk\u306esocket\u3068\u3057\u3066\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u7a81\u767a\u7684\u306bJVM_Socket\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\nJava\u306e\u521d\u671f\u306e\u3053\u308d\u306f\u3001VM\u304c\u63d0\u4f9b\u3059\u308bI/O and Network Support\u3067\u5b9a\u7fa9\u3055\u308c\u305fAPI\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\n\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5bfe\u5fdc(\u7279\u306bWindows)\u3057\u305f\u3053\u308d\u306b\u3001\u307b\u3068\u3093\u3069\u547c\u3073\u51fa\u3055\u308c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\u3082\u3057\u304f\u306f\u3001socket\u3084fileio\u3092\u4f7f\u3044\u305f\u3044\u3051\u3069\u3001\u81ea\u5206(\u305f\u3068\u3048\u3070libXXX.so\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bAPI)\u306f\u3001\nsocket\u3084fileio\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308blibjava.so\u3084libnio.so\u3078\u306e\u4f9d\u5b58\u3092\u4f5c\u308a\u305f\u304f\u306a\u3044\u3068\u3044\u3063\u305f\u5834\u5408\u306b\u3001\nlibjvm.so\u306b\u5b9a\u7fa9\u3055\u308c\u305fI/O and Network Support\u306eAPI\u3092\u547c\u3073\u51fa\u3059\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3002\n\u203b\u7279\u306bzip\u306e\u4e2d\u3067\u306fifdef\u5207\u3063\u3066fileopen\u3057\u3066\u3044\u305f\u3002\n\u305f\u3076\u3093\u5f8c\u8005\u304b\u306a\u3002\n\n\u307e\u3068\u3081\n(1) JVM\u306b\u306fI/O and Network Support\u3068\u3044\u3046\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u62bd\u8c61\u5316\u3055\u308c\u305f\u30b5\u30dd\u30fc\u30c8\u7528\u306eAPI\u3092\u7528\u610f\u3057\u3066\u3044\u305f\u304c\u3001\u547c\u3073\u51fa\u3055\u308c\u308b\u3053\u3068\u306f\u5c11\u306a\u304f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u9593\u306e\u4f9d\u5b58\u3092\u56de\u907f\u3057\u305f\u3044\u5834\u5408\u306b\u547c\u3073\u51fa\u3057\u53ef\u80fd\u306a\u88dc\u52a9\u7684\u306aAPI\u307d\u3044\u3002\n\u203bio/net\u306e\u672c\u4f53\u306fjdk/src/solaris/native/java/net\u3084\u3001jdk/src/windows/native/java/net\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n(2) JVM\u3088\u304f\u308f\u304b\u3089\u3093\u3002\n\n\u304a\u307e\u3051\nJVM\u81ea\u4f53\u306fThread\u3092\u62bd\u8c61\u5316\u3057\u3066Java\u306b\u63d0\u4f9b\u3057\u3066\u304a\u308a\u3001\u30b7\u30f3\u30d7\u30eb\u306aAPI\u306b\u7e8f\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u88c5\u306f\u3059\u3079\u3066JVM\u5074\u3067\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nC++11\u3067\u63d0\u4f9b\u3055\u308c\u308bthread\u3068API\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f\u308a\u3001\u3069\u3093\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u6bd4\u3079\u3066\u307f\u308b\u306e\u3082\u9762\u767d\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\nJVM\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3001Thread\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u4e00\u89a7\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\njdk8u/jdk/src/share/native/java/lang/Thread.c\nstatic JNINativeMethod methods[] = {\n    {\"start0\",           \"()V\",        (void *)&JVM_StartThread},\n    {\"stop0\",            \"(\" OBJ \")V\", (void *)&JVM_StopThread},\n    {\"isAlive\",          \"()Z\",        (void *)&JVM_IsThreadAlive},\n    {\"suspend0\",         \"()V\",        (void *)&JVM_SuspendThread},\n    {\"resume0\",          \"()V\",        (void *)&JVM_ResumeThread},\n    {\"setPriority0\",     \"(I)V\",       (void *)&JVM_SetThreadPriority},\n    {\"yield\",            \"()V\",        (void *)&JVM_Yield},\n    {\"sleep\",            \"(J)V\",       (void *)&JVM_Sleep},\n    {\"currentThread\",    \"()\" THD,     (void *)&JVM_CurrentThread},\n    {\"countStackFrames\", \"()I\",        (void *)&JVM_CountStackFrames},\n    {\"interrupt0\",       \"()V\",        (void *)&JVM_Interrupt},\n    {\"isInterrupted\",    \"(Z)Z\",       (void *)&JVM_IsInterrupted},\n    {\"holdsLock\",        \"(\" OBJ \")Z\", (void *)&JVM_HoldsLock},\n    {\"getThreads\",        \"()[\" THD,   (void *)&JVM_GetAllThreads},\n    {\"dumpThreads\",      \"([\" THD \")[[\" STE, (void *)&JVM_DumpThreads},\n    {\"setNativeName\",    \"(\" STR \")V\", (void *)&JVM_SetNativeThreadName},\n};\n\n\n\nC\u8a00\u8a9e\u3078\u306e\u611f\u8b1d\u306e\u6b63\u62f3\u7a81\u304d \u4eca\u65e5\u306f21\u65e5\u76ee\u3001\u3067\u3059\n\n\u4eca\u56de\u306fJVM\u7de8\u3067\u3059\u3002\u3002JDK\u304c\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5468\u308a\u306e\u5438\u53ce\u3092\u307b\u3068\u3093\u3069\u81ea\u524d\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u56de\u3067\u5206\u304b\u308a\u307e\u3057\u305f\u306e\u3067\u3001\nJVM\u306e\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u62bd\u8c61\u5316\u3057\u305fAPI\u3063\u3066\u4f55\u3092\u6307\u3057\u3066\u3044\u308b\u3093\u3067\u3057\u3087\u3046\u306d\u3002\n~~fallout4\u3092\u30d7\u30ec\u30a4\u3059\u308b\u508d\u3089\u571f\u65e5\u306b\u3053\u3093\u306a\u306e\u66f8\u3044\u3066\u307e\u3057\u305f\u304c\u3001\u308f\u305f\u3057\u306e\u9032\u6357\u826f\u304f\u306a\u3044\u3001\u52d8\u9055\u3044\u3057\u306a\u3044\u3067\u3088\u306d\uff01~~\n\nOpenJDK\u306e\u53d6\u5f97\u65b9\u6cd5\u3068\u304b\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\nhttp://qiita.com/nothingcosmos/items/935cd0b9d62ef01ddddc\n\n# libjvm.so\u306e\u4e2d\u8eab\n\nJVM\u304c\u3069\u3046\u3044\u3046glibc\u306eAPI\u3092\u53e9\u3044\u3066\u3044\u308b\u306e\u304b\u3001JVM\u304cjdk\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308bAPI\u306b\u306f\u3069\u3093\u306a\u3082\u306e\u304c\u3042\u308b\u306e\u304b\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u306fglibc\u306e\u547c\u3073\u51fa\u3057\u4e00\u89a7\u3067\u3059\u3002\n\n```C:\n_IO_getc@@GLIBC_2.2.5\n__assert_fail@@GLIBC_2.2.5\n__cxa_atexit@@GLIBC_2.2.5\n__cxa_finalize@@GLIBC_2.2.5\n__environ@@GLIBC_2.2.5\n__errno_location@@GLIBC_2.2.5\n__fxstat64@@GLIBC_2.2.5\n__fxstat@@GLIBC_2.2.5\n__isnan@@GLIBC_2.2.5\n__libc_current_sigrtmax@@GLIBC_2.2.5\n__libc_current_sigrtmin@@GLIBC_2.2.5\n__lxstat@@GLIBC_2.2.5\n__sigsetjmp@@GLIBC_2.2.5\n__stack_chk_fail@@GLIBC_2.4\n__timezone@@GLIBC_2.2.5\n__tls_get_addr@@GLIBC_2.3\n__xstat64@@GLIBC_2.2.5\n__xstat@@GLIBC_2.2.5\n_exit@@GLIBC_2.2.5\nabort@@GLIBC_2.2.5\naccept@@GLIBC_2.2.5\naccess@@GLIBC_2.2.5\nbind@@GLIBC_2.2.5\nceil@@GLIBC_2.2.5\nchmod@@GLIBC_2.2.5\nclose@@GLIBC_2.2.5\nclosedir@@GLIBC_2.2.5\nconfstr@@GLIBC_2.2.5\nconnect@@GLIBC_2.2.5\nctime@@GLIBC_2.2.5\ndirfd@@GLIBC_2.2.5\ndl_iterate_phdr@@GLIBC_2.2.5\ndladdr@@GLIBC_2.2.5\ndlclose@@GLIBC_2.2.5\ndlerror@@GLIBC_2.2.5\ndlopen@@GLIBC_2.2.5\ndlsym@@GLIBC_2.2.5\ndlvsym@@GLIBC_2.2.5\nenviron@@GLIBC_2.2.5\nexecve@@GLIBC_2.2.5\nexit@@GLIBC_2.2.5\nexp@@GLIBC_2.2.5\nfchdir@@GLIBC_2.2.5\nfclose@@GLIBC_2.2.5\nfcntl@@GLIBC_2.2.5\nfdopen@@GLIBC_2.2.5\nfeof@@GLIBC_2.2.5\nfflush@@GLIBC_2.2.5\nfgetc@@GLIBC_2.2.5\nfgets@@GLIBC_2.2.5\nfileno@@GLIBC_2.2.5\nfloor@@GLIBC_2.2.5\nfmod@@GLIBC_2.2.5\nfopen64@@GLIBC_2.2.5\nfopen@@GLIBC_2.2.5\nfork@@GLIBC_2.2.5\nfprintf@@GLIBC_2.2.5\nfputc@@GLIBC_2.2.5\nfputs@@GLIBC_2.2.5\nfread@@GLIBC_2.2.5\nfree@@GLIBC_2.2.5\nfrexp@@GLIBC_2.2.5\nfscanf@@GLIBC_2.2.5\nfseek@@GLIBC_2.2.5\nfsync@@GLIBC_2.2.5\nftell@@GLIBC_2.2.5\nftruncate64@@GLIBC_2.2.5\nftruncate@@GLIBC_2.2.5\nfwrite@@GLIBC_2.2.5\ngetcwd@@GLIBC_2.2.5\ngetegid@@GLIBC_2.2.5\ngetenv@@GLIBC_2.2.5\ngeteuid@@GLIBC_2.2.5\ngetgid@@GLIBC_2.2.5\ngethostname@@GLIBC_2.2.5\ngetloadavg@@GLIBC_2.2.5\ngetpagesize@@GLIBC_2.2.5\ngetpid@@GLIBC_2.2.5\ngetpriority@@GLIBC_2.2.5\ngetpwuid_r@@GLIBC_2.2.5\ngetrlimit@@GLIBC_2.2.5\ngetrusage@@GLIBC_2.2.5\ngetsockname@@GLIBC_2.2.5\ngetsockopt@@GLIBC_2.2.5\ngettimeofday@@GLIBC_2.2.5\ngetuid@@GLIBC_2.2.5\ngnu_get_libc_release@@GLIBC_2.2.5\ngnu_get_libc_version@@GLIBC_2.2.5\nioctl@@GLIBC_2.2.5\nisalnum@@GLIBC_2.2.5\nisatty@@GLIBC_2.2.5\nisspace@@GLIBC_2.2.5\nkill@@GLIBC_2.2.5\nlisten@@GLIBC_2.2.5\nlocaltime_r@@GLIBC_2.2.5\nlog10@@GLIBC_2.2.5\nlseek64@@GLIBC_2.2.5\nlseek@@GLIBC_2.2.5\nmadvise@@GLIBC_2.2.5\nmalloc@@GLIBC_2.2.5\nmemchr@@GLIBC_2.2.5\nmemcpy@@GLIBC_2.2.5\nmemmove@@GLIBC_2.2.5\nmemset@@GLIBC_2.2.5\nmincore@@GLIBC_2.2.5\nmkdir@@GLIBC_2.2.5\nmmap@@GLIBC_2.2.5\nmprotect@@GLIBC_2.2.5\nmunmap@@GLIBC_2.2.5\nnanosleep@@GLIBC_2.2.5\nopen64@@GLIBC_2.2.5\nopen@@GLIBC_2.2.5\nopendir@@GLIBC_2.2.5\nperror@@GLIBC_2.2.5\npoll@@GLIBC_2.2.5\npread64@@GLIBC_2.2.5\nprintf@@GLIBC_2.2.5\npthread_attr_destroy@@GLIBC_2.2.5\npthread_attr_getstack@@GLIBC_2.2.5\npthread_attr_init@@GLIBC_2.2.5\npthread_attr_setdetachstate@@GLIBC_2.2.5\npthread_attr_setguardsize@@GLIBC_2.2.5\npthread_attr_setstacksize@@GLIBC_2.2.5\npthread_cancel@@GLIBC_2.2.5\npthread_cond_destroy@@GLIBC_2.3.2\npthread_cond_init@@GLIBC_2.3.2\npthread_cond_signal@@GLIBC_2.3.2\npthread_cond_timedwait@@GLIBC_2.3.2\npthread_cond_wait@@GLIBC_2.3.2\npthread_condattr_init@@GLIBC_2.2.5\npthread_condattr_setclock@@GLIBC_2.3.3\npthread_create@@GLIBC_2.2.5\npthread_getattr_np@@GLIBC_2.2.5\npthread_getspecific@@GLIBC_2.2.5\npthread_key_create@@GLIBC_2.2.5\npthread_key_delete@@GLIBC_2.2.5\npthread_kill@@GLIBC_2.2.5\npthread_mutex_init@@GLIBC_2.2.5\npthread_mutex_lock@@GLIBC_2.2.5\npthread_mutex_trylock@@GLIBC_2.2.5\npthread_mutex_unlock@@GLIBC_2.2.5\npthread_once@@GLIBC_2.2.5\npthread_self@@GLIBC_2.2.5\npthread_setspecific@@GLIBC_2.2.5\npthread_sigmask@@GLIBC_2.2.5\nputchar@@GLIBC_2.2.5\nputs@@GLIBC_2.2.5\npwrite64@@GLIBC_2.2.5\nqsort@@GLIBC_2.2.5\nraise@@GLIBC_2.2.5\nread@@GLIBC_2.2.5\nreaddir@@GLIBC_2.2.5\nreaddir_r@@GLIBC_2.2.5\nrealloc@@GLIBC_2.2.5\nrealpath@@GLIBC_2.3\nrecv@@GLIBC_2.2.5\nrecvfrom@@GLIBC_2.2.5\nremove@@GLIBC_2.2.5\nrename@@GLIBC_2.2.5\nrewind@@GLIBC_2.2.5\nsched_yield@@GLIBC_2.2.5\nsem_destroy@@GLIBC_2.2.5\nsem_init@@GLIBC_2.2.5\nsem_post@@GLIBC_2.2.5\nsem_timedwait@@GLIBC_2.2.5\nsem_trywait@@GLIBC_2.2.5\nsem_wait@@GLIBC_2.2.5\nsend@@GLIBC_2.2.5\nsendto@@GLIBC_2.2.5\nsetpriority@@GLIBC_2.2.5\nsetrlimit@@GLIBC_2.2.5\nsetsockopt@@GLIBC_2.2.5\nshmat@@GLIBC_2.2.5\nshmctl@@GLIBC_2.2.5\nshmdt@@GLIBC_2.2.5\nshmget@@GLIBC_2.2.5\nshutdown@@GLIBC_2.2.5\nsigaction@@GLIBC_2.2.5\nsigaddset@@GLIBC_2.2.5\nsigdelset@@GLIBC_2.2.5\nsigemptyset@@GLIBC_2.2.5\nsigfillset@@GLIBC_2.2.5\nsigismember@@GLIBC_2.2.5\nsiglongjmp@@GLIBC_2.2.5\nsigprocmask@@GLIBC_2.2.5\nsigsuspend@@GLIBC_2.2.5\nsleep@@GLIBC_2.2.5\nsnprintf@@GLIBC_2.2.5\nsocket@@GLIBC_2.2.5\nsprintf@@GLIBC_2.2.5\nsqrt@@GLIBC_2.2.5\nsscanf@@GLIBC_2.2.5\nstderr@@GLIBC_2.2.5\nstdin@@GLIBC_2.2.5\nstdout@@GLIBC_2.2.5\nstrcasecmp@@GLIBC_2.2.5\nstrcat@@GLIBC_2.2.5\nstrchr@@GLIBC_2.2.5\nstrcmp@@GLIBC_2.2.5\nstrcpy@@GLIBC_2.2.5\nstrcspn@@GLIBC_2.2.5\nstrdup@@GLIBC_2.2.5\nstrerror@@GLIBC_2.2.5\nstrlen@@GLIBC_2.2.5\nstrncasecmp@@GLIBC_2.2.5\nstrncat@@GLIBC_2.2.5\nstrncmp@@GLIBC_2.2.5\nstrncpy@@GLIBC_2.2.5\nstrpbrk@@GLIBC_2.2.5\nstrrchr@@GLIBC_2.2.5\nstrstr@@GLIBC_2.2.5\nstrtod@@GLIBC_2.2.5\nstrtol@@GLIBC_2.2.5\nstrtoul@@GLIBC_2.2.5\nsyscall@@GLIBC_2.2.5\nsysconf@@GLIBC_2.2.5\nsysinfo@@GLIBC_2.2.5\ntime@@GLIBC_2.2.5\ntimes@@GLIBC_2.2.5\ntimezone@@GLIBC_2.2.5\ntolower@@GLIBC_2.2.5\nuname@@GLIBC_2.2.5\nunlink@@GLIBC_2.2.5\nunsetenv@@GLIBC_2.2.5\nvfprintf@@GLIBC_2.2.5\nvsnprintf@@GLIBC_2.2.5\nvsscanf@@GLIBC_2.2.5\nwaitpid@@GLIBC_2.2.5\nwrite@@GLIBC_2.2.5\n\n```\n\npthread\u7cfb\u304c\u591a\u3044\u306e\u306f\u3001JVM\u5185\u90e8\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u7ba1\u7406\u3057\u3066Java\u5074\u306b\u63d0\u4f9b\u3059\u308b\u304b\u3089\u3002\nfile io\u7cfb\u304c\u3042\u308b\u306e\u306f\u3001\u305f\u3076\u3093class file\u8aad\u3080\u3093\u3067\u3057\u3087\u3046\u3002\nnet\u7cfb\u304c\u3042\u308b\u306e\u306f\u3001\u3001JDWP\u3067\u4f7f\u3046\u3093\u3067\u3057\u3087\u3046\u3002\n\n\nJVM\u304c\u5916\u90e8\u306b\u516c\u958b\u3057\u3066\u3044\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306b\u7e8f\u3081\u3089\u308c\u3066\u3044\u307e\u3057\u305f\u3002\nhttp://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/6ea3aea950d1/src/share/javavm/export\n\n\u3053\u3061\u3089\u306edoxygen\u3067\u3082\u898b\u308c\u307e\u3059\u3002\nhttp://cr.openjdk.java.net/~ngmr/vmi.00/html/jvm_8h.html\n\nprefix\u3054\u3068\u306b\u5206\u304b\u308c\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3001\u591a\u3044\u306e\u306fJVM\u7cfb\u3001JVMTI\u7cfb\u3067\u3057\u3087\u3046\u304b\u306d\u3002\n\n# \u6982\u8981\nJVM\u304c\u5916\u90e8\u306b\u516c\u958b\u3057\u3066\u3044\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u898b\u3066\u3044\u3066\u6c17\u3065\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u3053\u3046\u3044\u3046\u306e\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\nhttp://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/6ea3aea950d1/src/share/javavm/export/jvm.h\n\nPART 1: Functions for Native Libraries\n\u3053\u308c\u3089\u306fjdk\u306b\u5b9f\u88c5\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u304f\u3001vm\u5074\u304c\u5c02\u7528\u306eAPI\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u306d\u3002\n\nPART 3: I/O and Network Support\n\u3059\u3054\u304f\u602a\u3057\u3044API\u304c\u7d9a\u3005\u3068\u3042\u3063\u3066\u3001open() close() read() write() socket() send() recv()\u3068\u304b\n\u3053\u308c\u3053\u305d\u304cJVM\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u62bd\u8c61\u5316\u3057\u305fC API\u306b\u9055\u3044\u306a\u3044\uff01\n\n\n# \u5b9f\u88c5\n\nJVM\u306e\u5b9f\u88c5\u306f\u3001jdk8u/hotspot\u306e\u4e0b\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001JVM_\u7cfb\u306eAPI\u306e\u5b9f\u88c5\u3092\u63a2\u3057\u3066\u307f\u307e\u3059\u3002\n\n```:jdk8u\n  hotspot (VM\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 C++\u4e3b\u4f53)\n    src\n      cpu\n      os\n      os_cpu\n      share\n        vm\n```\n\n\u307e\u305a\u306f\u30d8\u30c3\u30c0\u306e\u5ba3\u8a00\u304b\u3089\n\n```C:jdk8u/jdk/src/share/javavm/export/jvm.h\n\nJNIEXPORT jint JNICALL\nJVM_Open(const char *fname, jint flags, jint mode);\n\nJNIEXPORT jint JNICALL\nJVM_Close(jint fd);\n\nJNIEXPORT jint JNICALL\nJVM_Read(jint fd, char *buf, jint nbytes);\n\nJNIEXPORT jint JNICALL\nJVM_Write(jint fd, char *buf, jint nbytes);\n\n\nJNIEXPORT jint JNICALL\nJVM_Socket(jint domain, jint type, jint protocol);\n\nJNIEXPORT jint JNICALL\nJVM_SocketClose(jint fd);\n\nJNIEXPORT jint JNICALL\nJVM_Recv(jint fd, char *buf, jint nBytes, jint flags);\n\nJNIEXPORT jint JNICALL\nJVM_Send(jint fd, char *buf, jint nBytes, jint flags);\n\nJNIEXPORT jint JNICALL\nJVM_RecvFrom(jint fd, char *buf, int nBytes,\n                  int flags, struct sockaddr *from, int *fromlen);\n\nJNIEXPORT jint JNICALL\nJVM_SendTo(jint fd, char *buf, int len,\n                int flags, struct sockaddr *to, int tolen);\n\n```\n\n\u4ee3\u8868\u7684\u306a\u3082\u306e\u3092\u9078\u51fa\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u3059\u3054\u304f\u7d20\u6734\u3067\u3001\u5b9f\u88c5\u304c\u900f\u3051\u3066\u307f\u3048\u305d\u3046\u3067\u3059\u3002\n\n\u5b9f\u88c5\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3002\n\u307e\u305a\u306f\u30d5\u30a1\u30a4\u30ebIO\u306e\u307b\u3046\n\n```C:jdk8u/hotspot/src/share/vm/prims/jvm.cpp\nJVM_LEAF(jint, JVM_Open(const char *fname, jint flags, jint mode))\n  JVMWrapper2(\"JVM_Open (%s)\", fname);\n\n  //%note jvm_r6\n  int result = os::open(fname, flags, mode);\n  if (result >= 0) {\n    return result;\n  } else {\n    switch(errno) {\n      case EEXIST:\n        return JVM_EEXIST;\n      default:\n        return -1;\n    }\n  }\nJVM_END\n\n\nJVM_LEAF(jint, JVM_Close(jint fd))\n  JVMWrapper2(\"JVM_Close (0x%x)\", fd);\n  //%note jvm_r6\n  return os::close(fd);\nJVM_END\n\n\nJVM_LEAF(jint, JVM_Read(jint fd, char *buf, jint nbytes))\n  JVMWrapper2(\"JVM_Read (0x%x)\", fd);\n\n  //%note jvm_r6\n  return (jint)os::restartable_read(fd, buf, nbytes);\nJVM_END\n\n\nJVM_LEAF(jint, JVM_Write(jint fd, char *buf, jint nbytes))\n  JVMWrapper2(\"JVM_Write (0x%x)\", fd);\n\n  //%note jvm_r6\n  return (jint)os::write(fd, buf, nbytes);\nJVM_END\n\n```\n\n\u7a81\u7136\u306e\u30de\u30af\u30ed\uff01api\u306e\u5148\u982d\u306bhook\u4ed5\u8fbc\u307f\u305f\u3044\u3088\u3046\u3067\u3059\u306d\u3002\n\n```C:hotspot/src/share/vm/runtime/interfaceSupport.hpp\n#define JVM_LEAF(result_type, header)                                \\\nextern \"C\" {                                                         \\\n  result_type JNICALL header {                                       \\\n    VM_Exit::block_if_vm_exited();                                   \\\n    VM_LEAF_BASE(result_type, header)\n\n#define JVM_END } }\n\n// LEAF routines do not lock, GC or throw exceptions\n\n#define VM_LEAF_BASE(result_type, header)                            \\\n  TRACE_CALL(result_type, header)                                    \\\n  debug_only(NoHandleMark __hm;)                                     \\\n  os::verify_stack_alignment();                                      \\\n  /* begin of body */\n\n```\n\nAPI\u306e\u547c\u3073\u51fa\u3057\u306fos::XXX\u3067\u62bd\u8c61\u5316\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u306d\u3002\nos::XXX\u306e\u5b9f\u4f53\u304c\u3069\u3053\u306b\u3042\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001OS\u3054\u3068\u306b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3057\u305f\u3002\n\n```C:jdk8u/hotspot/src/os/windows/vm/os_windows.inline.hpp\n\ninline size_t os::read(int fd, void *buf, unsigned int nBytes) {\n  return ::read(fd, buf, nBytes);\n}\n\ninline size_t os::restartable_read(int fd, void *buf, unsigned int nBytes) {\n  return ::read(fd, buf, nBytes);\n}\n\ninline size_t os::write(int fd, const void *buf, unsigned int nBytes) {\n  return ::write(fd, buf, nBytes);\n}\n\ninline int os::close(int fd) {\n  return ::close(fd);\n}\n\n```\n\nsocket\u7cfb\u306e\u5b9f\u88c5\u306f\u3053\u3061\u3089\n\n```C:jdk8u/hotspot/src/os/windows/vm/os_windows.cpp\nint os::recvfrom(int fd, char *buf, size_t nBytes, uint flags,\n                 sockaddr* from, socklen_t* fromlen) {\n\n  return ::recvfrom(fd, buf, (int)nBytes, flags, from, fromlen);\n}\n\nint os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n  return ::recv(fd, buf, (int)nBytes, flags);\n}\n\nint os::send(int fd, char* buf, size_t nBytes, uint flags) {\n  return ::send(fd, buf, (int)nBytes, flags);\n}\n\n```\n\n\n\u304a\u6b21\u306flinux\n\n```C:jdk8u/hotspot/src/os/linux/vm/os_linux.inline.hpp\n// macros for restartable system calls\n\n#define RESTARTABLE(_cmd, _result) do { \\\n    _result = _cmd; \\\n  } while(((int)_result == OS_ERR) && (errno == EINTR))\n\n#define RESTARTABLE_RETURN_INT(_cmd) do { \\\n  int _result; \\\n  RESTARTABLE(_cmd, _result); \\\n  return _result; \\\n} while(false)\n\ninline size_t os::restartable_read(int fd, void *buf, unsigned int nBytes) {\n  size_t res;\n  RESTARTABLE( (size_t) ::read(fd, buf, (size_t) nBytes), res);\n  return res;\n}\n\ninline size_t os::write(int fd, const void *buf, unsigned int nBytes) {\n  size_t res;\n  RESTARTABLE((size_t) ::write(fd, buf, (size_t) nBytes), res);\n  return res;\n}\n\ninline int os::close(int fd) {\n  return ::close(fd);\n}\n\ninline int os::socket_close(int fd) {\n  return ::close(fd);\n}\n\ninline int os::socket(int domain, int type, int protocol) {\n  return ::socket(domain, type, protocol);\n}\n\ninline int os::recv(int fd, char* buf, size_t nBytes, uint flags) {\n  RESTARTABLE_RETURN_INT(::recv(fd, buf, nBytes, flags));\n}\n\ninline int os::send(int fd, char* buf, size_t nBytes, uint flags) {\n  RESTARTABLE_RETURN_INT(::send(fd, buf, nBytes, flags));\n}\n\n```\nlinux\u306e\u307b\u3046\u306f\u5fae\u5999\u306brepeatable\u30de\u30af\u30ed\u3092\u4f7f\u3063\u3066\u3044\u3066\u5fae\u5999\u306b\u7570\u306a\u308a\u307e\u3059\u306d\u3002\n\u30b7\u30f3\u30d7\u30eb\u306bfd\u3092\u5f15\u6570\u306b\u53d6\u308bAPI\u306b\u7e8f\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3069\u306e\u3088\u3046\u306a\u3068\u3053\u308d\u3067\u4f7f\u3046\u306e\u3067\u3057\u3087\u3046\u304b\u3002jdk\u5074\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u4f7f\u7528\u4f8b\n\n```C:grep\nshare/native/java/util/zip/zip_util.c:    return JVM_Open(fname, flags, 0);\nshare/native/java/util/zip/ZipFile.c:            zfd = JVM_Open(path, flag, 0);\nshare/javavm/export/jvm.h:JVM_Open(const char *fname, jint flags, jint mode);\nsolaris/native/sun/management/OperatingSystemImpl.c:    fd = JVM_Open(\"/proc/self/psinfo\", O_RDONLY, 0);\n```\n\nJVM_Open\u4f7f\u3063\u3066\u308b\u3068\u3053\u308d\u307b\u3093\u3068\u5c11\u306a\u3044\u3002\u3002\n\n```C:jdk/src/share/native/java/util/zip/zip_util.c\n\nstatic ZFILE\nZFILE_Open(const char *fname, int flags) {\n#ifdef WIN32\n    const DWORD access =\n        (flags & O_RDWR)   ? (GENERIC_WRITE | GENERIC_READ) :\n        (flags & O_WRONLY) ?  GENERIC_WRITE :\n        GENERIC_READ;\n    const DWORD sharing =\n        FILE_SHARE_READ | FILE_SHARE_WRITE;\n    const DWORD disposition =\n        /* Note: O_TRUNC overrides O_CREAT */\n        (flags & O_TRUNC) ? CREATE_ALWAYS :\n        (flags & O_CREAT) ? OPEN_ALWAYS   :\n        OPEN_EXISTING;\n    const DWORD  maybeWriteThrough =\n        (flags & (O_SYNC | O_DSYNC)) ?\n        FILE_FLAG_WRITE_THROUGH :\n        FILE_ATTRIBUTE_NORMAL;\n    const DWORD maybeDeleteOnClose =\n        (flags & O_TEMPORARY) ?\n        FILE_FLAG_DELETE_ON_CLOSE :\n        FILE_ATTRIBUTE_NORMAL;\n    const DWORD flagsAndAttributes = maybeWriteThrough | maybeDeleteOnClose;\n\n    return (jlong) CreateFile(\n        fname,          /* Wide char path name */\n        access,         /* Read and/or write permission */\n        sharing,        /* File sharing flags */\n        NULL,           /* Security attributes */\n        disposition,        /* creation disposition */\n        flagsAndAttributes, /* flags and attributes */\n        NULL);\n\n#else\n    return JVM_Open(fname, flags, 0);\n#endif\n}\n```\n\nWindows\u3067\u306f\u547c\u3070\u308c\u306a\u3044\u3001\u3001\u3060\u3068\u3001\u3001\u3001\uff01\uff1f\nsolaris/native\u3082windows\u3067\u306f\u901a\u3089\u306a\u3044\u30d1\u30b9\u3060\u308d\u3046\u3057\u3001\n\nSocket\u306e\u307b\u3046\u3082\u63a2\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```C:jdk/src_grep\nshare/javavm/export/jvm.h:JVM_Socket(jint domain, jint type, jint protocol);\nshare/javavm/export/jvm.h:JVM_SocketClose(jint fd);\nshare/javavm/export/jvm.h:JVM_SocketShutdown(jint fd, jint howto);\nshare/javavm/export/jvm.h:JVM_SocketAvailable(jint fd, jint *result);\nsolaris/native/java/net/net_util_md.h:#define NET_SocketClose JVM_SocketClose\nsolaris/native/java/net/Inet4AddressImpl.c:    fd = JVM_Socket(AF_INET, SOCK_RAW, IPPROTO_ICMP);\nsolaris/native/java/net/Inet4AddressImpl.c:    fd = JVM_Socket(AF_INET, SOCK_STREAM, 0);\nsolaris/native/java/net/NetworkInterface.c:    if ((sock = JVM_Socket(proto, SOCK_DGRAM, 0)) < 0) {\nsolaris/native/java/net/NetworkInterface.c:     if ((sock = JVM_Socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\nsolaris/native/java/net/NetworkInterface.c:              if ( (sock = JVM_Socket(AF_INET6, SOCK_DGRAM, 0)) < 0 ){\nsolaris/native/java/net/NetworkInterface.c:     if ((sock = JVM_Socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\nsolaris/native/java/net/NetworkInterface.c:              if ( (sock = JVM_Socket(AF_INET6, SOCK_DGRAM, 0)) < 0 ){\nsolaris/native/java/net/NetworkInterface.c:                if ( (sock = JVM_Socket(AF_INET6, SOCK_DGRAM, 0)) < 0 ){\nsolaris/native/java/net/NetworkInterface.c:     if ((sock = JVM_Socket(AF_INET, SOCK_DGRAM, 0)) < 0) {\nsolaris/native/java/net/NetworkInterface.c:              if ( (sock = JVM_Socket(AF_INET6, SOCK_DGRAM, 0)) < 0 ){\nsolaris/native/java/net/net_util_md.c:    fd = JVM_Socket(AF_INET6, SOCK_STREAM, 0) ;\nsolaris/native/java/net/PlainDatagramSocketImpl.c:    if ((fd = JVM_Socket(domain, SOCK_DGRAM, 0)) == JVM_IO_ERR) {\nsolaris/native/java/net/Inet6AddressImpl.c:    fd = JVM_Socket(AF_INET6, SOCK_RAW, IPPROTO_ICMPV6);\nsolaris/native/java/net/Inet6AddressImpl.c:    fd = JVM_Socket(AF_INET6, SOCK_STREAM, 0);\nsolaris/native/java/net/PlainSocketImpl.c:    JVM_SocketShutdown(sv[0], 2);\nsolaris/native/java/net/PlainSocketImpl.c:    JVM_SocketClose(sv[1]);\nsolaris/native/java/net/PlainSocketImpl.c:    if ((fd = JVM_Socket(domain, type, 0)) == JVM_IO_ERR) {\nsolaris/native/java/net/PlainSocketImpl.c:                JVM_SocketShutdown(fd, 2);\nsolaris/native/java/net/PlainSocketImpl.c:    /* JVM_SocketAvailable returns 0 for failure, 1 for success */\nsolaris/native/java/net/PlainSocketImpl.c:    if (!JVM_SocketAvailable(fd, &ret)){\nsolaris/native/java/net/PlainSocketImpl.c:    JVM_SocketShutdown(fd, howto);\n\n```\n\nsolaris/native\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u306f\u7d50\u69cb\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\njdk\u306esocket\u3068\u3057\u3066\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u7a81\u767a\u7684\u306bJVM_Socket\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\nJava\u306e\u521d\u671f\u306e\u3053\u308d\u306f\u3001VM\u304c\u63d0\u4f9b\u3059\u308bI/O and Network Support\u3067\u5b9a\u7fa9\u3055\u308c\u305fAPI\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\n\u30de\u30eb\u30c1\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u5bfe\u5fdc(\u7279\u306bWindows)\u3057\u305f\u3053\u308d\u306b\u3001\u307b\u3068\u3093\u3069\u547c\u3073\u51fa\u3055\u308c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\n\u3082\u3057\u304f\u306f\u3001socket\u3084fileio\u3092\u4f7f\u3044\u305f\u3044\u3051\u3069\u3001\u81ea\u5206(\u305f\u3068\u3048\u3070libXXX.so\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bAPI)\u306f\u3001\nsocket\u3084fileio\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308blibjava.so\u3084libnio.so\u3078\u306e\u4f9d\u5b58\u3092\u4f5c\u308a\u305f\u304f\u306a\u3044\u3068\u3044\u3063\u305f\u5834\u5408\u306b\u3001\nlibjvm.so\u306b\u5b9a\u7fa9\u3055\u308c\u305fI/O and Network Support\u306eAPI\u3092\u547c\u3073\u51fa\u3059\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3002\n\u203b\u7279\u306bzip\u306e\u4e2d\u3067\u306fifdef\u5207\u3063\u3066fileopen\u3057\u3066\u3044\u305f\u3002\n\n\u305f\u3076\u3093\u5f8c\u8005\u304b\u306a\u3002\n\n# \u307e\u3068\u3081\n\n(1) JVM\u306b\u306fI/O and Network Support\u3068\u3044\u3046\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u62bd\u8c61\u5316\u3055\u308c\u305f\u30b5\u30dd\u30fc\u30c8\u7528\u306eAPI\u3092\u7528\u610f\u3057\u3066\u3044\u305f\u304c\u3001\u547c\u3073\u51fa\u3055\u308c\u308b\u3053\u3068\u306f\u5c11\u306a\u304f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u9593\u306e\u4f9d\u5b58\u3092\u56de\u907f\u3057\u305f\u3044\u5834\u5408\u306b\u547c\u3073\u51fa\u3057\u53ef\u80fd\u306a\u88dc\u52a9\u7684\u306aAPI\u307d\u3044\u3002\n\u203bio/net\u306e\u672c\u4f53\u306fjdk/src/solaris/native/java/net\u3084\u3001jdk/src/windows/native/java/net\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n(2) JVM\u3088\u304f\u308f\u304b\u3089\u3093\u3002\n\n# \u304a\u307e\u3051\n\nJVM\u81ea\u4f53\u306fThread\u3092\u62bd\u8c61\u5316\u3057\u3066Java\u306b\u63d0\u4f9b\u3057\u3066\u304a\u308a\u3001\u30b7\u30f3\u30d7\u30eb\u306aAPI\u306b\u7e8f\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u88c5\u306f\u3059\u3079\u3066JVM\u5074\u3067\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nC++11\u3067\u63d0\u4f9b\u3055\u308c\u308bthread\u3068API\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f\u308a\u3001\u3069\u3093\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u6bd4\u3079\u3066\u307f\u308b\u306e\u3082\u9762\u767d\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\n\nJVM\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3001Thread\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u4e00\u89a7\u306f\u3053\u3061\u3089\u3067\u3059\u3002\n\n```C:jdk8u/jdk/src/share/native/java/lang/Thread.c\nstatic JNINativeMethod methods[] = {\n    {\"start0\",           \"()V\",        (void *)&JVM_StartThread},\n    {\"stop0\",            \"(\" OBJ \")V\", (void *)&JVM_StopThread},\n    {\"isAlive\",          \"()Z\",        (void *)&JVM_IsThreadAlive},\n    {\"suspend0\",         \"()V\",        (void *)&JVM_SuspendThread},\n    {\"resume0\",          \"()V\",        (void *)&JVM_ResumeThread},\n    {\"setPriority0\",     \"(I)V\",       (void *)&JVM_SetThreadPriority},\n    {\"yield\",            \"()V\",        (void *)&JVM_Yield},\n    {\"sleep\",            \"(J)V\",       (void *)&JVM_Sleep},\n    {\"currentThread\",    \"()\" THD,     (void *)&JVM_CurrentThread},\n    {\"countStackFrames\", \"()I\",        (void *)&JVM_CountStackFrames},\n    {\"interrupt0\",       \"()V\",        (void *)&JVM_Interrupt},\n    {\"isInterrupted\",    \"(Z)Z\",       (void *)&JVM_IsInterrupted},\n    {\"holdsLock\",        \"(\" OBJ \")Z\", (void *)&JVM_HoldsLock},\n    {\"getThreads\",        \"()[\" THD,   (void *)&JVM_GetAllThreads},\n    {\"dumpThreads\",      \"([\" THD \")[[\" STE, (void *)&JVM_DumpThreads},\n    {\"setNativeName\",    \"(\" STR \")V\", (void *)&JVM_SetNativeThreadName},\n};\n\n```\n", "tags": ["C\u8a00\u8a9e", "api", "JVM"]}