{"context": " More than 1 year has passed since last update.\n\nDMA \u8ee2\u9001\u306b\u3064\u3044\u3066\nDMA \u8ee2\u9001\u3092\u3059\u308b\u969b\u306b\u306f\u30c7\u30d0\u30a4\u30b9\u306f\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3067\u306f\u306a\u304f\u30d0\u30b9\u30a2\u30c9\u30ec\u30b9\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3088\u3063\u3066\u306f\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3092IOMMU\u3092\u7528\u3044\u3066\u66f4\u306b\u30d0\u30b9\u30a2\u30c9\u30ec\u30b9\u3078\n\u5909\u63db\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\u307e\u305f\u3001PCI\u30c7\u30d0\u30a4\u30b9\u3067\u306f\u30c7\u30d0\u30a4\u30b9\u5074\u304cDMA\u8ee2\u9001\u306e\u30de\u30b9\u30bf\u3068\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u3001\n\u8ee2\u9001\u306e\u958b\u59cb\u3092\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u59cb\u3081\u3089\u308c\u307e\u3059(\u6050\u3089\u304f\u901a\u5e38\u3053\u306e\u65b9\u6cd5\u3067\u3059)\u3002\n\u4eca\u56de\u3082\u3053\u306e\u65b9\u6cd5\u3092\u63a1\u7528\u3057\u3001\u30c9\u30e9\u30a4\u30d0\u306fDMA\u8ee2\u9001\u958b\u59cb\u3092ioctl\u3067\n\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\u3078\u4f1d\u3048\u3001\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\u5074\u304c\u30d0\u30b9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u3084\u308a\u3068\u308a\u3057\u307e\u3059\u3002\n\nconsistent DMA/ streaming DMA\nDMA \u306b\u304a\u3044\u3066\u306f\u30e1\u30e2\u30ea\u3068\u30c7\u30d0\u30a4\u30b9\u3067\u76f4\u63a5\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u305f\u3081\u3001CPU\u5185\u306e\n\u30ad\u30e3\u30c3\u30b7\u30e5\u4e00\u8cab\u6027\u3092\u4fdd\u3064\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\u3069\u306e\u69d8\u306b\u3057\u3066\u4e00\u8cab\u6027\u3092\u4fdd\u3064\u304b\u306b\u5fdc\u3058\u3066 consistent (coherent) DMA \u3068 streaming DMA\u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002\nconsistent DMA \u306f\u5e38\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u4e00\u8cab\u6027\u306e\u3042\u308b\u30e1\u30e2\u30ea\u9818\u57df\u306b\u78ba\u4fdd\u3055\u308c\n(\u3064\u307e\u308a\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5229\u7528\u3057\u306a\u3044?)\u3001\u6271\u3044\u306f\u7c21\u5358\u3067\u3059\u304c\u901f\u5ea6\u304c\u72a0\u7272\u3068\u306a\u308a\u307e\u3059\u3002\n\u4e00\u65b9streaming DMA\u306f\u8ee2\u9001\u6642\u306b\u306e\u307f\u9818\u57df\u3092\u78ba\u4fdd\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u4e00\u8cab\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306b\n\u9818\u57df\u78ba\u4fdd\u5f8c\u306f\u30c9\u30e9\u30a4\u30d0\u304c\u30d0\u30c3\u30d5\u30a1\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093(\u9818\u57df\u3092\u767b\u9332\u89e3\u9664\u3057\u3066\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b)\u3002\n\u983b\u7e41\u306b\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u5834\u5408\u306b consistent DMA\u3001\u4e00\u65b9\u7684\u306a\u30c7\u30fc\u30bf\u3092\n\u9001\u308b\u305f\u3081\u306b\u306f streaming DMA \u3092\u7528\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u4e21\u65b9\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u304cioctl\u3092\u7528\u3044\u3066DMA\u8ee2\u9001\u3092\u6307\u793a\u3059\u308b\u3068\u3001\n\u30c9\u30e9\u30a4\u30d0\u306fDMA \u8ee2\u9001\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\u30c7\u30d0\u30a4\u30b9\u306fDMA\u8ee2\u9001\u958b\u59cb\u306e write \u4fe1\u53f7\u3092\u53d7\u3051\u3068\u3063\u305f\u5f8c\u3001 \nconsistent DMA \u3067\u306f\u53d7\u3051\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u3092+1, streaming DMA \u3067\u306f\n\u30bd\u30fc\u30c8\u3092\u3057\u305f\u5f8c\u306bDMA\u8ee2\u9001\u4ed5\u8fd4\u3057\u3001\u5272\u308a\u8fbc\u307f\u3092\u767a\u751f\u3055\u305b\u3066\u3044\u307e\u3059\u3002\nconsistent DMA \u3067\u306fDMA\u8ee2\u9001\u5b8c\u4e86\u3092\u78ba\u5b9f\u306b\u3059\u308b\u305f\u3081\u30e6\u30fc\u30b6\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\n\u304c\u5358\u7d14\u306b\u30b9\u30ea\u30fc\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\u4e00\u65b9\u3067 streaming DMA \u3067\u306f\n\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u306eDMA\u8ee2\u9001\u5b8c\u4e86\u3092\u5f85\u3064 waitqueue \u3092\u30c9\u30e9\u30a4\u30d0\u304c\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u8ffd\u8a18 : \u6050\u3089\u304fQEMU\u3067\u306f\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\u306e\u95a2\u6570\u304c\u7d42\u308f\u308b\u307e\u3067\n\u4ed6\u306e\u51e6\u7406\u306b\u6620\u3089\u306a\u3044\u305f\u3081\u3001\u4e0a\u306e\u3088\u3046\u306a\u30c7\u30d0\u30a4\u30b9\u306e\u5b8c\u4e86\u3092\u5f85\u3064\u51e6\u7406\u306f\n\u7121\u610f\u5473\u3067\u3059\u3002\n\nQEMU\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\ninclude/sysemu/dma.h \u306b pci_dma_read\u3001 pci_dma_write \u3068\u3044\u3063\u305f\u95a2\u6570\u304c\u3042\u308b\u306e\u3067\u3001\n\u30c9\u30e9\u30a4\u30d0\u304b\u3089DMA\u958b\u59cb\u8981\u6c42\u304c\u6765\u305f\u6642\u306b\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u4e88\u3081DMA\u306e\u30d0\u30b9\u30a2\u30c9\u30ec\u30b9\u3084\u30c7\u30fc\u30bf\u9577\u3092\u77e5\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\n\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u3092\u4e8b\u524d\u306b\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u304c\u30bb\u30c3\u30c8\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n    void test_show_cdmabuf(TestPCIState *s) \n    {\n        PCIDevice *pci_dev = PCI_DEVICE(s);\n        int i;\n\n        for (i = 0; i < TEST_CDMA_BUFFER_NUM; i++) {\n            printf(\"%3d \", s->cdma_buf[i]++);\n        }\n        printf(\"\\n\");\n\n        pci_dma_write(pci_dev,  s->cdma_addr, s->cdma_buf, s->cdma_len);\n\n        s->intmask |= INT_CDMA;\n        pci_irq_assert(pci_dev);\n    }\n\n    void test_show_sdmabuf(TestPCIState *s) \n    {\n        PCIDevice *pci_dev = PCI_DEVICE(s);\n        int i;\n\n        for (i = 0; i < TEST_SDMA_BUFFER_NUM; i++) {\n            printf(\"%3d \", s->sdma_buf[i]);\n        }\n        printf(\"\\n\");\n        qsort(s->sdma_buf, TEST_SDMA_BUFFER_NUM, sizeof(int), comp_int);\n        pci_dma_write(pci_dev,  s->sdma_addr, s->sdma_buf, s->sdma_len);\n\n        s->intmask |= INT_SDMA;\n        pci_irq_assert(pci_dev);\n    }\n\n// test_pci_pio_write \u4e2d\n    swith(addr) {\n        /* ...*/\n\n        // coherent DMA\n        case TEST_SET_CDMA_ADDR:\n            s->cdma_addr = val;\n            break;\n        case TEST_SET_CDMA_LEN:\n            s->cdma_len = val;\n            break;\n        case TEST_CDMA_START:\n            pci_dma_read(pdev, s->cdma_addr, s->cdma_buf, s->cdma_len);\n            test_show_cdmabuf(s);\n            break;\n\n        // streaming DMA\n        case TEST_SET_SDMA_ADDR:\n            s->sdma_addr = val;\n            break;\n        case TEST_SET_SDMA_LEN:\n            s->sdma_len = val;\n            break;\n        case TEST_SDMA_START:\n            pci_dma_read(pdev, s->sdma_addr, s->sdma_buf, s->sdma_len);\n            test_show_sdmabuf(s);\n            break;\n\n        /* ...*/\n    }\n\n\n\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\nDMA \u306e\u521d\u671f\u5316\u306f test_pci_probe \u4e2d\u3067 \u884c\u3063\u3066\u3044\u307e\u3059\u3002\nPCI \u7528\u306eDMA\u521d\u671f\u5316\u306e\u65b9\u6cd5\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u6cbf\u3063\u3066\u3044\u307e\u3059\u3002\n// test_pci_probe \u4e2d\n        err = pci_set_dma_mask(pdev, DMA_BIT_MASK(32));\n        if(err) {\n            printk(KERN_ERR \"Cannot set DMA mask\\n\");\n            goto error;\n        }\n        pci_set_master(pdev);\n\n        // allocate consistent DMA\n        dev_data->cdma_buffer = pci_alloc_consistent(pdev, TEST_CDMA_BUFFER_SIZE, &dev_data->cdma_addr);\n        if(dev_data->cdma_buffer == NULL) {\n            printk(KERN_ERR \"Cannot allocate consistent DMA buffer\\n\");\n            goto error;\n        }\n        dev_data->cdma_len = TEST_CDMA_BUFFER_SIZE;\n\n        // send consistent DMA info to device\n        outl(dev_data->cdma_addr, dev_data->pio_base + TEST_SET_CDMA_ADDR);\n        outl(dev_data->cdma_len,  dev_data->pio_base + TEST_SET_CDMA_LEN);\n\n        tprintk(\"cdma_addr : %x\\n\",  dev_data->cdma_addr);\n\n        // streaming DMA\n        dev_data->sdma_buffer = kmalloc(TEST_SDMA_BUFFER_SIZE, GFP_KERNEL);\n        if(dev_data->sdma_buffer == NULL) {\n            printk(KERN_ERR \"Cannot allocate streaming DMA buffer\\n\");\n            goto error;\n        }\n        init_waitqueue_head(&(dev_data->sdma_q));\n\n// test_pci_remove \u4e2d\n    pci_free_consistent(dev_data->pdev, TEST_CDMA_BUFFER_SIZE,\n            dev_data->cdma_buffer, dev_data->cdma_addr);\n\n\n\u307e\u305a\u521d\u3081\u306b pci_set_dma_mask \u3067PCI\u30d0\u30b9\u5e45\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u6b21\u306b pci_set_master \u3092\u547c\u3073\u3001PCI\u30d0\u30b9\u30de\u30b9\u30bf\u6a5f\u80fd\u3092\u30aa\u30f3\u306b\u3057\u307e\u3059\u3002\n\u6b21\u306b consistent DMA \u306e\u8a2d\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\npci_alloc_consistent \u306b\u3088\u308aDMA\u30d0\u30c3\u30d5\u30a1\u3092\u78ba\u4fdd\u3057\u3066\u3044\u307e\u3059\u3002\n\u623b\u308a\u5024(dev_data->cdma_buffer) \u304c\u30c9\u30e9\u30a4\u30d0\u304c\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u9818\u57df\u3067\u3001\n\u7b2c\u56db\u5f15\u6570(dev_data->cdma_addr) \u304c\u30c7\u30d0\u30a4\u30b9\u3078\u6e21\u3059\u30d0\u30b9\u30a2\u30c9\u30ec\u30b9\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u30d0\u30c3\u30d5\u30a1\u306f\u7d42\u4e86\u6642\u306bpci_free_consistent \u3092\u7528\u3044\u3066\u958b\u653e\u3092\u884c\u3044\u307e\u3059\u3002\nstreaming DMA \u306e\u65b9\u306f kmalloc \u3092\u4f7f\u3063\u3066 \u30c9\u30e9\u30a4\u30d0\u304c\u4f7f\u7528\u3059\u308b\u9818\u57df\n\u306e\u307f\u3092\u78ba\u4fdd\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001waitqueue \u3092\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001pci_alloc_consistent \u306a\u3069\u306e\u95a2\u6570\u306f dma_alloc_consistent \u3068\u3044\u3063\u305f\u95a2\u6570\u306e\n\u30e9\u30c3\u30d1\u30fc\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306eDMA\u8ee2\u9001\u306e\u767a\u884c\u306fioctl \u5185\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n// test_pci_handler \u4e2d\n        if(intmask & INT_CDMA) {\n        }\n        if(intmask & INT_SDMA) {\n            sdma_done = 1;\n        }\n\n\n// test_pci_uioctl \u4e2d\n            case TEST_CMD_CDMA_START :\n                copy_from_user(dev_data->cdma_buffer, d->cdmabuf, TEST_CDMA_BUFFER_SIZE);\n                wmb();\n                outl(CDMA_START, dev_data->pio_base + TEST_CDMA_START);\n                break;\n            case TEST_CMD_GET_CDMA_DATA :\n                n = copy_to_user(d->cdmabuf, dev_data->cdma_buffer, TEST_CDMA_BUFFER_SIZE);\n                if(n != 0){\n                    tprintk(\"cannot copy all data (%d bytes in %d bytes)\\n\", n, TEST_CDMA_BUFFER_SIZE);\n                }\n                break;\n\n            case TEST_CMD_SDMA_START :\n                copy_from_user(dev_data->sdma_buffer, d->sdmabuf, TEST_SDMA_BUFFER_SIZE);\n                dev_data->sdma_addr = pci_map_single(dev_data->pdev, dev_data->sdma_buffer,\n                        TEST_SDMA_BUFFER_SIZE, DMA_BIDIRECTIONAL);\n                dev_data->sdma_len = TEST_SDMA_BUFFER_SIZE;\n                wmb();\n                outl(dev_data->sdma_addr, dev_data->pio_base + TEST_SET_SDMA_ADDR);\n                outl(dev_data->sdma_len, dev_data->pio_base + TEST_SET_SDMA_LEN);\n                wmb();\n                outl(SDMA_START, dev_data->pio_base + TEST_SDMA_START);\n                break;\n            case TEST_CMD_GET_SDMA_DATA :\n                tprintk(\"sdma_done %d\\n\", sdma_done);\n                if(wait_event_interruptible(dev_data->sdma_q, (sdma_done == 1))) {\n                        return -ERESTARTSYS;\n                }\n                sdma_done = 0;\n\n                pci_unmap_single(dev_data->pdev, dev_data->sdma_addr,\n                        TEST_SDMA_BUFFER_SIZE, DMA_BIDIRECTIONAL);\n                n = copy_to_user(d->sdmabuf, dev_data->sdma_buffer, TEST_SDMA_BUFFER_SIZE);\n                if(n != 0) {\n                    tprintk(\"cannot copy all data (%d bytes in %d bytes)\\n\", n, TEST_SDMA_BUFFER_SIZE);\n                }\n                break;\n\n\u3053\u3053\u3067\u3001wmb() \u306f\u30e9\u30a4\u30c8\u30d0\u30ea\u30a2\u3067\u3042\u308a\u305d\u306e\u547c\u51fa\u3057\u306e\u524d\u306e\u66f8\u304d\u8fbc\u307f\u51e6\u7406\u304c\u5fc5\u305a\u5b8c\u4e86\u3059\u308b\u3053\u3068\u3092\n\u4fdd\u8a3c\u3057\u307e\u3059(\u30ea\u30fc\u30c9\u30d0\u30ea\u30a2\u306frmb(), \u4e21\u65b9\u306e\u5834\u5408\u306fmb())\u3002\n\u3053\u308c\u306b\u3088\u308a\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u3084\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u30a2\u30a6\u30c8\u30aa\u30d6\u30aa\u30fc\u30c0\u30fc\u5b9f\u884c\u3067\n\u547d\u4ee4\u306e\u9806\u5e8f\u304c\u5909\u66f4\u3055\u308c\u308b\u3053\u3068\u3092\u9632\u304e\u307e\u3059\u3002\nconsistent DMA \u306e\u5834\u5408\u306f\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u305f\u5f8c\u306bout\u547d\u4ee4\u3067\n\u5b9f\u884c\u958b\u59cb\u3092\u30c7\u30d0\u30a4\u30b9\u3078\u4f1d\u3048\u3066\u3044\u307e\u3059\u3002\n\u4e00\u65b9\u3067streaming DMA \u306e\u5834\u5408\u306f\u8ee2\u9001\u524d\u306bDMA\u9818\u57df\u3092\u30de\u30c3\u30d7\u3059\u308b\u3068\u3044\u3063\u305f\u51e6\u7406\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u306b\u306f\u3001pci_map_single\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\u7b2c\u56db\u5f15\u6570\u304c\u30c7\u30fc\u30bf\u306e\u79fb\u52d5\u65b9\u5411\u3067 DMA_TO_DEVICE, DMA_FROM_DEVICE,\nDMA_BIDIRECTINAL \u304b\u3089\u9078\u629e\u3057\u307e\u3059\u3002\n\u540d\u524d\u306e\u901a\u308a\u53cc\u65b9\u5411\u3001\u30c7\u30d0\u30a4\u30b9\u3078\u306e\u4e00\u65b9\u5411\u3001\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u306e\u4e00\u65b9\u5411\u3068\u306a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u7c21\u5358\u306e\u305f\u3081\u306bDMA_BIDREDCTINAL \u3092\u9078\u629e\u3057\u3066\u3044\u307e\u3059\u304c\u3001\n\u5b9f\u969b\u306b\u306fDMA_TODEVICE \u304b DMA_FROMDEVICE \u3092\u9078\u629e\u3057\u3066\u4e00\u65b9\u5411\u306e\u307f\u306e\u901a\u4fe1\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u3079\u304d\u3067\u3059\u3002\n\u306a\u305c\u306a\u3089\u3001\u30c7\u30d0\u30a4\u30b9\u304c\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u9818\u57df\u306bDMA\u30d0\u30c3\u30d5\u30a1\u304c\u4f5c\u6210\u3055\u308c\u305f\u5834\u5408\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\n\u3088\u3063\u3066\u306f\u5225\u306e\u30c7\u30d0\u30a4\u30b9\u304c\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u9818\u57df\u306b\u305d\u306e\u30d0\u30c3\u30d5\u30a1(bounce buffer)\u304c\u30b3\u30d4\u30fc\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u3001\nBIDIRECTIONAL \u306e\u5834\u5408\u306f\u8ee2\u9001\u524d\u3001\u5f8c\u3068\u3082\u306b\u30d0\u30c3\u30d5\u30a1\u306e\u30b3\u30d4\u30fc\u304c\n(CPU \u3092\u901a\u3058\u3066)\u884c\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u3001\u7d50\u679c\u3068\u3057\u3066\u901f\u5ea6\u304c\u72a0\u7272\u306b\u306a\u308b\u304b\u3089\u3067\u3059\u3002\nstreaming DMA \u306b\u304a\u3044\u3066\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u306e\u8ee2\u9001\u7d50\u679c\u3092\u7372\u5f97\u3059\u308b\u305f\u3081\u306b\u306f\npci_unmap_single \u3092\u7528\u3044\u3066DMA \u9818\u57df\u3092\u30a2\u30f3\u30de\u30c3\u30d7\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f streaming DMA \u304b\u3089\u306e\u30c7\u30fc\u30bf\u53d6\u5f97\u306b\u306f waitqueue \u3092\u4f7f\u7528\u3057\u3066\u3001\nsdma_done \u304c1\u3068\u306a\u308b\u307e\u3067 TEST_CMD_GET_SDMA_DATA \u306e\u51e6\u7406\u3092\u30b9\u30ea\u30fc\u30d7\u3055\u305b\u307e\u3059\n(wait_event_interruptible)\u3002sdma_done\u306f\n\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u4e2d\u3067 1 \u306b\u3057\u307e\u3059\u3002\n\n\u30e6\u30fc\u30b6\u30d7\u30ed\u30b0\u30e9\u30e0\nioctl\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 consistent DMA \u306e\u5834\u5408\u306f\nDMA\u8ee2\u9001\u304c\u5fc5\u305a\u5b8c\u4e86\u3059\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306bsleep(1)\u3092\u5165\u308c\u3066\u3044\u307e\u3059\n(\u5168\u304f\u826f\u304f\u306a\u3044\u65b9\u6cd5\u3067\u3059)\u3002\n\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u3092consistent DMA \u3067\u306f \u6dfb\u5b57=\u30c7\u30fc\u30bf\u3001 streaming DMA\u3067\u306f\n0-999 \u306e\u4e71\u6570\u3067\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3059\u3002\nvoid cdma_test(int fd)\n{\n    int i;\n\n    test_ioctl_data *d;\n    d = malloc(sizeof(test_ioctl_data));\n\n    if(!d) exit(1);\n    printf(\"\\n---- start consistent dma test ----\\n\");\n\n    for(i = 0; i < TEST_CDMA_BUFFER_NUM; i++){\n        d->cdmabuf[i] = i;\n    }\n    ioctl(fd, TEST_CMD_CDMA_START, d);\n\n    sleep(1);\n    ioctl(fd, TEST_CMD_GET_CDMA_DATA, d);\n    for(i = 0; i < TEST_CDMA_BUFFER_NUM; i++){\n        printf(\"%3d \", d->cdmabuf[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"\\n---- end consistent dma test ----\\n\");\n\n    free(d);\n}\n\nvoid sdma_test(int fd)\n{\n    int i;\n\n    test_ioctl_data *d;\n    d = malloc(sizeof(test_ioctl_data));\n\n    if(!d) exit(1);\n\n    srand(123);\n    printf(\"\\n---- start streaming dma test ----\\n\");\n\n    for(i = 0; i < TEST_SDMA_BUFFER_NUM; i++){\n        d->sdmabuf[i] = rand()%1000;\n    }\n    ioctl(fd, TEST_CMD_SDMA_START, d);\n\n    ioctl(fd, TEST_CMD_GET_SDMA_DATA, d);\n    for(i = 0; i < TEST_SDMA_BUFFER_NUM; i++){\n        printf(\"%3d \", d->sdmabuf[i]);\n    }\n    printf(\"\\n\");\n\n    printf(\"\\n---- end streaming dma test ----\\n\");\n\n    free(d);\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n---- start consistent dma test ----\n** (151) test_pci_uioctl     : _cmd:1074035460\n## (155) test_pci_pio_write  : addr 112, size 4\nn** (269) test_pci_handler    : irq handler called\n## (118) test_pci_pio_read   : addr 21, size 1\n## (155) test_pci_pio_write  : addr 20, size 1\n## (155) test_pci_pio_write  : addr 104, size 4\n** (151) test_pci_uioctl     : _cmd:-2147190011\nn\n---- end consistent dma test ----\n\n---- start streaming dma test ----\n** (151) test_pci_uioctl     : _cmd:1074035462\n## (155) test_pci_pio_write  : addr 56, size 4\n## (155) test_pci_pio_write  : addr 60, size 4\n## (155) test_pci_pio_write  : addr 52, size 4\n393  13 873 630 279 331 195  22 426   1 824 668 921 291 316 381 709 207 646 993 926 365 699 991 976 878 116 148 255 372 485 648 385 358 631  17 689 826  39 116 180 215 784 101 507 452 834 568  11 480 913 289 198 613 281 174 843 397 674 451 769 159  99 507 869  82 524 559 909 563  27 441 779 163 542 638 615 728 558 626 560 471 916 758  84 549 284 280 946 958 731  68 469 182 575 339 265  99 898 174  14 925 967 145  88 509 135  55 589 693  33 149 165 949 908 601 850 192 881 797 503 612 865 972 147 792 311 412 891 561 938 257 838 905 403 278 766 538 333 355 584 367 504 101 668 764 702 519 309 936 668 812 900 885 136  47 677 800 459 568 361 397 177 552 654 580 830 420 471 516 775  55 235 632 156 903 396 210 774  57 498 794 221 399 679 358 798 356 510 610 276 871 359 454 775  14 386 606 434 209 474 562 264 709 194 772 964 942 335 739   0 833 885 573 584 565 931 383 273 441 993 550 665 704 356 792 718  94 398 153 304 872  67 568 933 261 693 898 203  28 989 555 861 874 129 798 439 412 181  65 206 526 615 223 582 323\n** (269) test_pci_handler    : irq handler called\n## (118) test_pci_pio_read   : addr 21, size 1\n## (155) test_pci_pio_write  : addr 20, size 1\n## (155) test_pci_pio_write  : addr 104, size 4\n** (151) test_pci_uioctl     : _cmd:-2147190009\n** (191) test_pci_uioctl     : sdma_done 1\n  0   1  11  13  14  14  17  22  27  28  33  39  47  55  55  57  65  67  68  82  84  88  94  99  99 101 101 116 116 129 135 136 145 147 148 149 153 156 159 163 165 174 174 177 180 181 182 192 194 195 198 203 206 207 209 210 215 221 223 235 255 257 261 264 265 273 276 278 279 280 281 284 289 291 304 309 311 316 323 331 333 335 339 355 356 356 358 358 359 361 365 367 372 381 383 385 386 393 396 397 397 398 399 403 412 412 420 426 434 439 441 441 451 452 454 459 469 471 471 474 480 485 498 503 504 507 507 509 510 516 519 524 526 538 542 549 550 552 555 558 559 560 561 562 563 565 568 568 568 573 575 580 582 584 584 589 601 606 610 612 613 615 615 626 630 631 632 638 646 648 654 665 668 668 668 674 677 679 689 693 693 699 702 704 709 709 718 728 731 739 758 764 766 769 772 774 775 775 779 784 792 792 794 797 798 798 800 812 824 826 830 833 834 838 843 850 861 865 869 871 872 873 874 878 881 885 885 891 898 898 900 903 905 908 909 913 916 921 925 926 931 933 936 938 942 946 949 958 964 967 972 976 989 991 993 993\n\n---- end streaming dma test ----\n\n\n\u306f\u3058\u3081: (1) \u4f5c\u3063\u305f\u3082\u306e\n\u524d: (7) \u5272\u308a\u8fbc\u307f\u306e\u8a2d\u5b9a\n## DMA \u8ee2\u9001\u306b\u3064\u3044\u3066\nDMA \u8ee2\u9001\u3092\u3059\u308b\u969b\u306b\u306f\u30c7\u30d0\u30a4\u30b9\u306f\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3067\u306f\u306a\u304f\u30d0\u30b9\u30a2\u30c9\u30ec\u30b9\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3088\u3063\u3066\u306f\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3092IOMMU\u3092\u7528\u3044\u3066\u66f4\u306b\u30d0\u30b9\u30a2\u30c9\u30ec\u30b9\u3078\n\u5909\u63db\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n\u307e\u305f\u3001PCI\u30c7\u30d0\u30a4\u30b9\u3067\u306f\u30c7\u30d0\u30a4\u30b9\u5074\u304cDMA\u8ee2\u9001\u306e\u30de\u30b9\u30bf\u3068\u306a\u308b\u3053\u3068\u304c\u3067\u304d\u3001\n\u8ee2\u9001\u306e\u958b\u59cb\u3092\u30c7\u30d0\u30a4\u30b9\u5074\u3067\u59cb\u3081\u3089\u308c\u307e\u3059(\u6050\u3089\u304f\u901a\u5e38\u3053\u306e\u65b9\u6cd5\u3067\u3059)\u3002\n\u4eca\u56de\u3082\u3053\u306e\u65b9\u6cd5\u3092\u63a1\u7528\u3057\u3001\u30c9\u30e9\u30a4\u30d0\u306fDMA\u8ee2\u9001\u958b\u59cb\u3092ioctl\u3067\n\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\u3078\u4f1d\u3048\u3001\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\u5074\u304c\u30d0\u30b9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u3084\u308a\u3068\u308a\u3057\u307e\u3059\u3002\n\n\n### consistent DMA/ streaming DMA\nDMA \u306b\u304a\u3044\u3066\u306f\u30e1\u30e2\u30ea\u3068\u30c7\u30d0\u30a4\u30b9\u3067\u76f4\u63a5\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u305f\u3081\u3001CPU\u5185\u306e\n\u30ad\u30e3\u30c3\u30b7\u30e5\u4e00\u8cab\u6027\u3092\u4fdd\u3064\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\u3069\u306e\u69d8\u306b\u3057\u3066\u4e00\u8cab\u6027\u3092\u4fdd\u3064\u304b\u306b\u5fdc\u3058\u3066 consistent (coherent) DMA \u3068 streaming DMA\u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002\nconsistent DMA \u306f\u5e38\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u4e00\u8cab\u6027\u306e\u3042\u308b\u30e1\u30e2\u30ea\u9818\u57df\u306b\u78ba\u4fdd\u3055\u308c\n(\u3064\u307e\u308a\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5229\u7528\u3057\u306a\u3044?)\u3001\u6271\u3044\u306f\u7c21\u5358\u3067\u3059\u304c\u901f\u5ea6\u304c\u72a0\u7272\u3068\u306a\u308a\u307e\u3059\u3002\n\u4e00\u65b9streaming DMA\u306f\u8ee2\u9001\u6642\u306b\u306e\u307f\u9818\u57df\u3092\u78ba\u4fdd\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u4e00\u8cab\u6027\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306b\n\u9818\u57df\u78ba\u4fdd\u5f8c\u306f\u30c9\u30e9\u30a4\u30d0\u304c\u30d0\u30c3\u30d5\u30a1\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093(\u9818\u57df\u3092\u767b\u9332\u89e3\u9664\u3057\u3066\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b)\u3002\n\n\u983b\u7e41\u306b\u30c7\u30fc\u30bf\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u5834\u5408\u306b consistent DMA\u3001\u4e00\u65b9\u7684\u306a\u30c7\u30fc\u30bf\u3092\n\u9001\u308b\u305f\u3081\u306b\u306f streaming DMA \u3092\u7528\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u4e21\u65b9\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u304cioctl\u3092\u7528\u3044\u3066DMA\u8ee2\u9001\u3092\u6307\u793a\u3059\u308b\u3068\u3001\n\u30c9\u30e9\u30a4\u30d0\u306fDMA \u8ee2\u9001\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\u30c7\u30d0\u30a4\u30b9\u306fDMA\u8ee2\u9001\u958b\u59cb\u306e write \u4fe1\u53f7\u3092\u53d7\u3051\u3068\u3063\u305f\u5f8c\u3001 \nconsistent DMA \u3067\u306f\u53d7\u3051\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u3092+1, streaming DMA \u3067\u306f\n\u30bd\u30fc\u30c8\u3092\u3057\u305f\u5f8c\u306bDMA\u8ee2\u9001\u4ed5\u8fd4\u3057\u3001\u5272\u308a\u8fbc\u307f\u3092\u767a\u751f\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\nconsistent DMA \u3067\u306fDMA\u8ee2\u9001\u5b8c\u4e86\u3092\u78ba\u5b9f\u306b\u3059\u308b\u305f\u3081\u30e6\u30fc\u30b6\u30fc\u30d7\u30ed\u30b0\u30e9\u30e0\n\u304c\u5358\u7d14\u306b\u30b9\u30ea\u30fc\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\u4e00\u65b9\u3067 streaming DMA \u3067\u306f\n\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u306eDMA\u8ee2\u9001\u5b8c\u4e86\u3092\u5f85\u3064 waitqueue \u3092\u30c9\u30e9\u30a4\u30d0\u304c\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n__\u8ffd\u8a18 :__ \u6050\u3089\u304fQEMU\u3067\u306f\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\u306e\u95a2\u6570\u304c\u7d42\u308f\u308b\u307e\u3067\n\u4ed6\u306e\u51e6\u7406\u306b\u6620\u3089\u306a\u3044\u305f\u3081\u3001\u4e0a\u306e\u3088\u3046\u306a\u30c7\u30d0\u30a4\u30b9\u306e\u5b8c\u4e86\u3092\u5f85\u3064\u51e6\u7406\u306f\n\u7121\u610f\u5473\u3067\u3059\u3002\n\n# QEMU\u4eee\u60f3\u30c7\u30d0\u30a4\u30b9\ninclude/sysemu/dma.h \u306b pci_dma_read\u3001 pci_dma_write \u3068\u3044\u3063\u305f\u95a2\u6570\u304c\u3042\u308b\u306e\u3067\u3001\n\u30c9\u30e9\u30a4\u30d0\u304b\u3089DMA\u958b\u59cb\u8981\u6c42\u304c\u6765\u305f\u6642\u306b\u3053\u308c\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u4e88\u3081DMA\u306e\u30d0\u30b9\u30a2\u30c9\u30ec\u30b9\u3084\u30c7\u30fc\u30bf\u9577\u3092\u77e5\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\n\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u3092\u4e8b\u524d\u306b\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u304c\u30bb\u30c3\u30c8\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```c\n\tvoid test_show_cdmabuf(TestPCIState *s) \n\t{\n\t\tPCIDevice *pci_dev = PCI_DEVICE(s);\n\t\tint i;\n\t\t\n\t\tfor (i = 0; i < TEST_CDMA_BUFFER_NUM; i++) {\n\t\t\tprintf(\"%3d \", s->cdma_buf[i]++);\n\t\t}\n\t\tprintf(\"\\n\");\n\t\n\t\tpci_dma_write(pci_dev,  s->cdma_addr, s->cdma_buf, s->cdma_len);\n\t\n\t\ts->intmask |= INT_CDMA;\n\t\tpci_irq_assert(pci_dev);\n\t}\n\t\n\tvoid test_show_sdmabuf(TestPCIState *s) \n\t{\n\t\tPCIDevice *pci_dev = PCI_DEVICE(s);\n\t\tint i;\n\t\t\n\t\tfor (i = 0; i < TEST_SDMA_BUFFER_NUM; i++) {\n\t\t\tprintf(\"%3d \", s->sdma_buf[i]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tqsort(s->sdma_buf, TEST_SDMA_BUFFER_NUM, sizeof(int), comp_int);\n\t\tpci_dma_write(pci_dev,  s->sdma_addr, s->sdma_buf, s->sdma_len);\n\t\n\t\ts->intmask |= INT_SDMA;\n\t\tpci_irq_assert(pci_dev);\n\t}\n\n// test_pci_pio_write \u4e2d\n\tswith(addr) {\n\t\t/* ...*/\n\n\t\t// coherent DMA\n\t\tcase TEST_SET_CDMA_ADDR:\n\t\t\ts->cdma_addr = val;\n\t\t\tbreak;\n\t\tcase TEST_SET_CDMA_LEN:\n\t\t\ts->cdma_len = val;\n\t\t\tbreak;\n\t\tcase TEST_CDMA_START:\n\t\t\tpci_dma_read(pdev, s->cdma_addr, s->cdma_buf, s->cdma_len);\n\t\t\ttest_show_cdmabuf(s);\n\t\t\tbreak;\n\t\n\t\t// streaming DMA\n\t\tcase TEST_SET_SDMA_ADDR:\n\t\t\ts->sdma_addr = val;\n\t\t\tbreak;\n\t\tcase TEST_SET_SDMA_LEN:\n\t\t\ts->sdma_len = val;\n\t\t\tbreak;\n\t\tcase TEST_SDMA_START:\n\t\t\tpci_dma_read(pdev, s->sdma_addr, s->sdma_buf, s->sdma_len);\n\t\t\ttest_show_sdmabuf(s);\n\t\t\tbreak;\n\n\t\t/* ...*/\n\t}\n```\n\n# \u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\nDMA \u306e\u521d\u671f\u5316\u306f test_pci_probe \u4e2d\u3067 \u884c\u3063\u3066\u3044\u307e\u3059\u3002\nPCI \u7528\u306eDMA\u521d\u671f\u5316\u306e\u65b9\u6cd5\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u6cbf\u3063\u3066\u3044\u307e\u3059\u3002\n\n```c\n// test_pci_probe \u4e2d\n\t\terr = pci_set_dma_mask(pdev, DMA_BIT_MASK(32));\n\t\tif(err) {\n\t\t\tprintk(KERN_ERR \"Cannot set DMA mask\\n\");\n\t\t\tgoto error;\n\t\t}\n\t\tpci_set_master(pdev);\n\t\n\t\t// allocate consistent DMA\n\t\tdev_data->cdma_buffer = pci_alloc_consistent(pdev, TEST_CDMA_BUFFER_SIZE, &dev_data->cdma_addr);\n\t\tif(dev_data->cdma_buffer == NULL) {\n\t\t\tprintk(KERN_ERR \"Cannot allocate consistent DMA buffer\\n\");\n\t\t\tgoto error;\n\t\t}\n\t\tdev_data->cdma_len = TEST_CDMA_BUFFER_SIZE;\n\t\n\t\t// send consistent DMA info to device\n\t\toutl(dev_data->cdma_addr, dev_data->pio_base + TEST_SET_CDMA_ADDR);\n\t\toutl(dev_data->cdma_len,  dev_data->pio_base + TEST_SET_CDMA_LEN);\n\t\n\t\ttprintk(\"cdma_addr : %x\\n\",  dev_data->cdma_addr);\n\t\n\t\t// streaming DMA\n\t\tdev_data->sdma_buffer = kmalloc(TEST_SDMA_BUFFER_SIZE, GFP_KERNEL);\n\t\tif(dev_data->sdma_buffer == NULL) {\n\t\t\tprintk(KERN_ERR \"Cannot allocate streaming DMA buffer\\n\");\n\t\t\tgoto error;\n\t\t}\n\t\tinit_waitqueue_head(&(dev_data->sdma_q));\n\n// test_pci_remove \u4e2d\n\tpci_free_consistent(dev_data->pdev, TEST_CDMA_BUFFER_SIZE,\n\t\t\tdev_data->cdma_buffer, dev_data->cdma_addr);\n\n```\n\u307e\u305a\u521d\u3081\u306b pci_set_dma_mask \u3067PCI\u30d0\u30b9\u5e45\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u6b21\u306b pci_set_master \u3092\u547c\u3073\u3001PCI\u30d0\u30b9\u30de\u30b9\u30bf\u6a5f\u80fd\u3092\u30aa\u30f3\u306b\u3057\u307e\u3059\u3002\n\n\u6b21\u306b consistent DMA \u306e\u8a2d\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\npci_alloc_consistent \u306b\u3088\u308aDMA\u30d0\u30c3\u30d5\u30a1\u3092\u78ba\u4fdd\u3057\u3066\u3044\u307e\u3059\u3002\n\u623b\u308a\u5024(dev_data->cdma_buffer) \u304c\u30c9\u30e9\u30a4\u30d0\u304c\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u9818\u57df\u3067\u3001\n\u7b2c\u56db\u5f15\u6570(dev_data->cdma_addr) \u304c\u30c7\u30d0\u30a4\u30b9\u3078\u6e21\u3059\u30d0\u30b9\u30a2\u30c9\u30ec\u30b9\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u30d0\u30c3\u30d5\u30a1\u306f\u7d42\u4e86\u6642\u306bpci_free_consistent \u3092\u7528\u3044\u3066\u958b\u653e\u3092\u884c\u3044\u307e\u3059\u3002\n\nstreaming DMA \u306e\u65b9\u306f kmalloc \u3092\u4f7f\u3063\u3066 \u30c9\u30e9\u30a4\u30d0\u304c\u4f7f\u7528\u3059\u308b\u9818\u57df\n\u306e\u307f\u3092\u78ba\u4fdd\u3057\u3066\u3044\u307e\u3059\u3002\u307e\u305f\u3001waitqueue \u3092\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001pci_alloc_consistent \u306a\u3069\u306e\u95a2\u6570\u306f dma_alloc_consistent \u3068\u3044\u3063\u305f\u95a2\u6570\u306e\n\u30e9\u30c3\u30d1\u30fc\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u969b\u306eDMA\u8ee2\u9001\u306e\u767a\u884c\u306fioctl \u5185\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```c\n// test_pci_handler \u4e2d\n\t\tif(intmask & INT_CDMA) {\n\t\t}\n\t\tif(intmask & INT_SDMA) {\n\t\t\tsdma_done = 1;\n\t\t}\n\n\n// test_pci_uioctl \u4e2d\n\t\t\tcase TEST_CMD_CDMA_START :\n\t\t\t\tcopy_from_user(dev_data->cdma_buffer, d->cdmabuf, TEST_CDMA_BUFFER_SIZE);\n\t\t\t\twmb();\n\t\t\t\toutl(CDMA_START, dev_data->pio_base + TEST_CDMA_START);\n\t\t\t\tbreak;\n\t\t\tcase TEST_CMD_GET_CDMA_DATA :\n\t\t\t\tn = copy_to_user(d->cdmabuf, dev_data->cdma_buffer, TEST_CDMA_BUFFER_SIZE);\n\t\t\t\tif(n != 0){\n\t\t\t\t\ttprintk(\"cannot copy all data (%d bytes in %d bytes)\\n\", n, TEST_CDMA_BUFFER_SIZE);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\n\t\t\tcase TEST_CMD_SDMA_START :\n\t\t\t\tcopy_from_user(dev_data->sdma_buffer, d->sdmabuf, TEST_SDMA_BUFFER_SIZE);\n\t\t\t\tdev_data->sdma_addr = pci_map_single(dev_data->pdev, dev_data->sdma_buffer,\n\t\t\t\t\t\tTEST_SDMA_BUFFER_SIZE, DMA_BIDIRECTIONAL);\n\t\t\t\tdev_data->sdma_len = TEST_SDMA_BUFFER_SIZE;\n\t\t\t\twmb();\n\t\t\t\toutl(dev_data->sdma_addr, dev_data->pio_base + TEST_SET_SDMA_ADDR);\n\t\t\t\toutl(dev_data->sdma_len, dev_data->pio_base + TEST_SET_SDMA_LEN);\n\t\t\t\twmb();\n\t\t\t\toutl(SDMA_START, dev_data->pio_base + TEST_SDMA_START);\n\t\t\t\tbreak;\n\t\t\tcase TEST_CMD_GET_SDMA_DATA :\n\t\t\t\ttprintk(\"sdma_done %d\\n\", sdma_done);\n\t\t\t\tif(wait_event_interruptible(dev_data->sdma_q, (sdma_done == 1))) {\n\t\t\t\t\t\treturn -ERESTARTSYS;\n\t\t\t\t}\n\t\t\t\tsdma_done = 0;\n\t\n\t\t\t\tpci_unmap_single(dev_data->pdev, dev_data->sdma_addr,\n\t\t\t  \t\t\tTEST_SDMA_BUFFER_SIZE, DMA_BIDIRECTIONAL);\n\t\t\t\tn = copy_to_user(d->sdmabuf, dev_data->sdma_buffer, TEST_SDMA_BUFFER_SIZE);\n\t\t\t\tif(n != 0) {\n\t\t\t\t\ttprintk(\"cannot copy all data (%d bytes in %d bytes)\\n\", n, TEST_SDMA_BUFFER_SIZE);\n\t\t\t\t}\n\t\t\t\tbreak;\n```\n\u3053\u3053\u3067\u3001wmb() \u306f\u30e9\u30a4\u30c8\u30d0\u30ea\u30a2\u3067\u3042\u308a\u305d\u306e\u547c\u51fa\u3057\u306e\u524d\u306e\u66f8\u304d\u8fbc\u307f\u51e6\u7406\u304c\u5fc5\u305a\u5b8c\u4e86\u3059\u308b\u3053\u3068\u3092\n\u4fdd\u8a3c\u3057\u307e\u3059(\u30ea\u30fc\u30c9\u30d0\u30ea\u30a2\u306frmb(), \u4e21\u65b9\u306e\u5834\u5408\u306fmb())\u3002\n\u3053\u308c\u306b\u3088\u308a\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6700\u9069\u5316\u3084\u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u30a2\u30a6\u30c8\u30aa\u30d6\u30aa\u30fc\u30c0\u30fc\u5b9f\u884c\u3067\n\u547d\u4ee4\u306e\u9806\u5e8f\u304c\u5909\u66f4\u3055\u308c\u308b\u3053\u3068\u3092\u9632\u304e\u307e\u3059\u3002\n\nconsistent DMA \u306e\u5834\u5408\u306f\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u305f\u5f8c\u306bout\u547d\u4ee4\u3067\n\u5b9f\u884c\u958b\u59cb\u3092\u30c7\u30d0\u30a4\u30b9\u3078\u4f1d\u3048\u3066\u3044\u307e\u3059\u3002\n\n\u4e00\u65b9\u3067streaming DMA \u306e\u5834\u5408\u306f\u8ee2\u9001\u524d\u306bDMA\u9818\u57df\u3092\u30de\u30c3\u30d7\u3059\u308b\u3068\u3044\u3063\u305f\u51e6\u7406\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u306b\u306f\u3001pci_map_single\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u3002\u7b2c\u56db\u5f15\u6570\u304c\u30c7\u30fc\u30bf\u306e\u79fb\u52d5\u65b9\u5411\u3067 DMA_TO_DEVICE, DMA_FROM_DEVICE,\nDMA_BIDIRECTINAL \u304b\u3089\u9078\u629e\u3057\u307e\u3059\u3002\n\u540d\u524d\u306e\u901a\u308a\u53cc\u65b9\u5411\u3001\u30c7\u30d0\u30a4\u30b9\u3078\u306e\u4e00\u65b9\u5411\u3001\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u306e\u4e00\u65b9\u5411\u3068\u306a\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u7c21\u5358\u306e\u305f\u3081\u306bDMA_BIDREDCTINAL \u3092\u9078\u629e\u3057\u3066\u3044\u307e\u3059\u304c\u3001\n\u5b9f\u969b\u306b\u306fDMA_TODEVICE \u304b DMA_FROMDEVICE \u3092\u9078\u629e\u3057\u3066\u4e00\u65b9\u5411\u306e\u307f\u306e\u901a\u4fe1\u3068\u3057\u3066\u5229\u7528\u3059\u308b\u3079\u304d\u3067\u3059\u3002\n\n\u306a\u305c\u306a\u3089\u3001\u30c7\u30d0\u30a4\u30b9\u304c\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u9818\u57df\u306bDMA\u30d0\u30c3\u30d5\u30a1\u304c\u4f5c\u6210\u3055\u308c\u305f\u5834\u5408\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\n\u3088\u3063\u3066\u306f\u5225\u306e\u30c7\u30d0\u30a4\u30b9\u304c\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u9818\u57df\u306b\u305d\u306e\u30d0\u30c3\u30d5\u30a1(bounce buffer)\u304c\u30b3\u30d4\u30fc\u3055\u308c\u308b\u306e\u3067\u3059\u304c\u3001\nBIDIRECTIONAL \u306e\u5834\u5408\u306f\u8ee2\u9001\u524d\u3001\u5f8c\u3068\u3082\u306b\u30d0\u30c3\u30d5\u30a1\u306e\u30b3\u30d4\u30fc\u304c\n(CPU \u3092\u901a\u3058\u3066)\u884c\u308f\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u3001\u7d50\u679c\u3068\u3057\u3066\u901f\u5ea6\u304c\u72a0\u7272\u306b\u306a\u308b\u304b\u3089\u3067\u3059\u3002\n\nstreaming DMA \u306b\u304a\u3044\u3066\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u306e\u8ee2\u9001\u7d50\u679c\u3092\u7372\u5f97\u3059\u308b\u305f\u3081\u306b\u306f\npci_unmap_single \u3092\u7528\u3044\u3066DMA \u9818\u57df\u3092\u30a2\u30f3\u30de\u30c3\u30d7\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f streaming DMA \u304b\u3089\u306e\u30c7\u30fc\u30bf\u53d6\u5f97\u306b\u306f waitqueue \u3092\u4f7f\u7528\u3057\u3066\u3001\nsdma_done \u304c1\u3068\u306a\u308b\u307e\u3067 TEST_CMD_GET_SDMA_DATA \u306e\u51e6\u7406\u3092\u30b9\u30ea\u30fc\u30d7\u3055\u305b\u307e\u3059\n(wait_event_interruptible)\u3002sdma_done\u306f\n\u5272\u308a\u8fbc\u307f\u30cf\u30f3\u30c9\u30e9\u4e2d\u3067 1 \u306b\u3057\u307e\u3059\u3002\n\n# \u30e6\u30fc\u30b6\u30d7\u30ed\u30b0\u30e9\u30e0\nioctl\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 consistent DMA \u306e\u5834\u5408\u306f\nDMA\u8ee2\u9001\u304c\u5fc5\u305a\u5b8c\u4e86\u3059\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306bsleep(1)\u3092\u5165\u308c\u3066\u3044\u307e\u3059\n(\u5168\u304f\u826f\u304f\u306a\u3044\u65b9\u6cd5\u3067\u3059)\u3002\n\n\u30d0\u30c3\u30d5\u30a1\u9818\u57df\u3092consistent DMA \u3067\u306f \u6dfb\u5b57=\u30c7\u30fc\u30bf\u3001 streaming DMA\u3067\u306f\n0-999 \u306e\u4e71\u6570\u3067\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\n```c\nvoid cdma_test(int fd)\n{\n\tint i;\n\n\ttest_ioctl_data *d;\n\td = malloc(sizeof(test_ioctl_data));\n\n\tif(!d) exit(1);\n\tprintf(\"\\n---- start consistent dma test ----\\n\");\n\n\tfor(i = 0; i < TEST_CDMA_BUFFER_NUM; i++){\n\t\td->cdmabuf[i] = i;\n\t}\n\tioctl(fd, TEST_CMD_CDMA_START, d);\n\n\tsleep(1);\n\tioctl(fd, TEST_CMD_GET_CDMA_DATA, d);\n\tfor(i = 0; i < TEST_CDMA_BUFFER_NUM; i++){\n\t\tprintf(\"%3d \", d->cdmabuf[i]);\n\t}\n\tprintf(\"\\n\");\n\n\tprintf(\"\\n---- end consistent dma test ----\\n\");\n\n\tfree(d);\n}\n\nvoid sdma_test(int fd)\n{\n\tint i;\n\n\ttest_ioctl_data *d;\n\td = malloc(sizeof(test_ioctl_data));\n\n\tif(!d) exit(1);\n\n\tsrand(123);\n\tprintf(\"\\n---- start streaming dma test ----\\n\");\n\n\tfor(i = 0; i < TEST_SDMA_BUFFER_NUM; i++){\n\t\td->sdmabuf[i] = rand()%1000;\n\t}\n\tioctl(fd, TEST_CMD_SDMA_START, d);\n\n\tioctl(fd, TEST_CMD_GET_SDMA_DATA, d);\n\tfor(i = 0; i < TEST_SDMA_BUFFER_NUM; i++){\n\t\tprintf(\"%3d \", d->sdmabuf[i]);\n\t}\n\tprintf(\"\\n\");\n\n\tprintf(\"\\n---- end streaming dma test ----\\n\");\n\n\tfree(d);\n}\n```\n# \u5b9f\u884c\u7d50\u679c\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n---- start consistent dma test ----\n** (151) test_pci_uioctl     : _cmd:1074035460\n## (155) test_pci_pio_write  : addr 112, size 4\nn** (269) test_pci_handler    : irq handler called\n## (118) test_pci_pio_read   : addr 21, size 1\n## (155) test_pci_pio_write  : addr 20, size 1\n## (155) test_pci_pio_write  : addr 104, size 4\n** (151) test_pci_uioctl     : _cmd:-2147190011\nn\n---- end consistent dma test ----\n\n---- start streaming dma test ----\n** (151) test_pci_uioctl     : _cmd:1074035462\n## (155) test_pci_pio_write  : addr 56, size 4\n## (155) test_pci_pio_write  : addr 60, size 4\n## (155) test_pci_pio_write  : addr 52, size 4\n393  13 873 630 279 331 195  22 426   1 824 668 921 291 316 381 709 207 646 993 926 365 699 991 976 878 116 148 255 372 485 648 385 358 631  17 689 826  39 116 180 215 784 101 507 452 834 568  11 480 913 289 198 613 281 174 843 397 674 451 769 159  99 507 869  82 524 559 909 563  27 441 779 163 542 638 615 728 558 626 560 471 916 758  84 549 284 280 946 958 731  68 469 182 575 339 265  99 898 174  14 925 967 145  88 509 135  55 589 693  33 149 165 949 908 601 850 192 881 797 503 612 865 972 147 792 311 412 891 561 938 257 838 905 403 278 766 538 333 355 584 367 504 101 668 764 702 519 309 936 668 812 900 885 136  47 677 800 459 568 361 397 177 552 654 580 830 420 471 516 775  55 235 632 156 903 396 210 774  57 498 794 221 399 679 358 798 356 510 610 276 871 359 454 775  14 386 606 434 209 474 562 264 709 194 772 964 942 335 739   0 833 885 573 584 565 931 383 273 441 993 550 665 704 356 792 718  94 398 153 304 872  67 568 933 261 693 898 203  28 989 555 861 874 129 798 439 412 181  65 206 526 615 223 582 323\n** (269) test_pci_handler    : irq handler called\n## (118) test_pci_pio_read   : addr 21, size 1\n## (155) test_pci_pio_write  : addr 20, size 1\n## (155) test_pci_pio_write  : addr 104, size 4\n** (151) test_pci_uioctl     : _cmd:-2147190009\n** (191) test_pci_uioctl     : sdma_done 1\n  0   1  11  13  14  14  17  22  27  28  33  39  47  55  55  57  65  67  68  82  84  88  94  99  99 101 101 116 116 129 135 136 145 147 148 149 153 156 159 163 165 174 174 177 180 181 182 192 194 195 198 203 206 207 209 210 215 221 223 235 255 257 261 264 265 273 276 278 279 280 281 284 289 291 304 309 311 316 323 331 333 335 339 355 356 356 358 358 359 361 365 367 372 381 383 385 386 393 396 397 397 398 399 403 412 412 420 426 434 439 441 441 451 452 454 459 469 471 471 474 480 485 498 503 504 507 507 509 510 516 519 524 526 538 542 549 550 552 555 558 559 560 561 562 563 565 568 568 568 573 575 580 582 584 584 589 601 606 610 612 613 615 615 626 630 631 632 638 646 648 654 665 668 668 668 674 677 679 689 693 693 699 702 704 709 709 718 728 731 739 758 764 766 769 772 774 775 775 779 784 792 792 794 797 798 798 800 812 824 826 830 833 834 838 843 850 861 865 869 871 872 873 874 878 881 885 885 891 898 898 900 903 905 908 909 913 916 921 925 926 931 933 936 938 942 946 949 958 964 967 972 976 989 991 993 993\n\n---- end streaming dma test ----\n```\n\n---\n\u306f\u3058\u3081: [(1) \u4f5c\u3063\u305f\u3082\u306e]\n(http://qiita.com/rafilia/items/f7646d12212da2a85bd8)\n\n\u524d: [(7) \u5272\u308a\u8fbc\u307f\u306e\u8a2d\u5b9a]\n(http://qiita.com/rafilia/items/b719d8adf1f39d956670)\n", "tags": ["QEMU"]}