{"context": " More than 1 year has passed since last update.\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30c8\u30ea\u30ac\u30fc\u30c6\u30b9\u30c8\u99c6\u52d5 Elixir ( Document Trigger Test Driven Elixir )\n\n \u6982\u8981\nElixir \u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e Example \u3092\u5143\u306b\u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a\u3092\u3057\u307e\u3059\n\n \u524d\u63d0\nElixri \u306e Doctests \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f\u4e0b\u8a18\u8a18\u4e8b\u3092\u53c2\u7167\n Elixir | Doctests\n\n \u4ed5\u69d8\nFizzBuzz\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f Fizzbuzz.fizzbuzz(from, to)\nfrom, to \u3068\u3082\u306b Integer \u306e\u307f\u8a31\u5bb9\n\n\nInteger \u4ee5\u5916\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001RuntimeError \u3092\u6295\u3052\u308b\n\n\nfrom \u304b\u3089 to \u307e\u3067\u306e FizzBuzz \u306e\u7d50\u679c\u3092\u914d\u5217\u3068\u3057\u3066\u8fd4\u5374\n15 \u306e\u500d\u6570\u306f \"FizzBuzz\"\n3 \u306e\u500d\u6570\u306f \"Fizz\"\n5 \u306e\u500d\u6570\u306f \"Buzz\"\n3/5/15 \u306e\u500d\u6570\u4ee5\u5916\u306f \u5165\u529b\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\n\n\n \u624b\u9806\n\n \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\nmix \u30b3\u30de\u30f3\u30c9\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\n\nlib/fizzbuzz.ex\ntest/fizzbuzz_test.ex\n\n\u306e\u307f\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002\n$ mix new fizzbuzz\n* creating README.md\n* creating .gitignore\n* creating mix.exs\n* creating config\n* creating config/config.exs\n* creating lib\n* creating lib/fizzbuzz.ex\n* creating test\n* creating test/test_helper.exs\n* creating test/fizzbuzz_test.exs\n\n\n \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u81ea\u52d5\u751f\u6210\u76f4\u5f8c\u306f\u3001\u7a7a\u306e\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\u3068\u6210\u529f\u3059\u308b\u30c6\u30b9\u30c8 Example \u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\n1\u4ef6\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3059\u3002\n$ mix test\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n.\n\nFinished in 0.04 seconds (0.04s on load, 0.00s on tests)\n1 tests, 0 failures\n\n\n \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1aExample \u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b doctest \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\u3053\u308c\u4ee5\u964d\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4e00\u5207\u5909\u66f4\u3057\u307e\u305b\u3093\n\ntest/fizzbuzz_test.exs\n\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n  doctest Fizzbuzz\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3002\u7d50\u679c\u306f 0 \u4ef6\n\n$ mix test --trace\nFizzbuzzTest\n\n\nFinished in 0.04 seconds (0.04s on load, 0.00s on tests)\n0 tests, 0 failures\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1a\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\u3059\u308b Example \u3092\u8ffd\u52a0\n\nExample \u3092\u8ffd\u52a0\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n  \"\"\"\n  def fizzbuzz(from, to) do\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\nlib/fizzbuzz.ex:11: warning: variable from is unused\nlib/fizzbuzz.ex:11: warning: variable to is unused\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.00ms)\n\n  1) test doc at Fizzbuzz.fizzbuzz/2 (1) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed\n     code: Fizzbuzz.fizzbuzz(1,2) === [1, 2]\n     lhs:  nil\n     stacktrace:\n       lib/fizzbuzz.ex:11: Fizzbuzz (module)\n\n\n\nFinished in 0.07 seconds (0.07s on load, 0.00s on tests)\n1 tests, 1 failures\n\nRandomized with seed 926333\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1a\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\u3059\u308b Example \u3092\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(&1))\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (5.7ms)\n\n\nFinished in 0.07 seconds (0.07s on load, 0.00s on tests)\n1 tests, 0 failures\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizz \u306e Example \u3092\u8ffd\u52a0\n\nlib/fizzbuzz.exs\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(&1))\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (4.9ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (0.02ms)\n\n  1) test doc at Fizzbuzz.fizzbuzz/2 (2) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed\n     code: Fizzbuzz.fizzbuzz(3, 3) === [\"Fizz\"]\n     lhs:  [3]\n     stacktrace:\n       lib/fizzbuzz.ex:18: Fizzbuzz (module)\n\n\n\nFinished in 0.07 seconds (0.07s on load, 0.00s on tests)\n2 tests, 1 failures\n\nRandomized with seed 118398\n\n\n\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizz \u3092\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n  defp fizzbuzz(n) do\n    n\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (4.4ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.06ms)\n\n\nFinished in 0.09 seconds (0.09s on load, 0.00s on tests)\n2 tests, 0 failures\n\nRandomized with seed 629312\n\n\n\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aBuzz \u306e Example \u3092\u8ffd\u52a0\n\nlib/fizzbuzz.exs\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (4.0ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.02ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.06ms)\n\n  1) test doc at Fizzbuzz.fizzbuzz/2 (3) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed\n     code: Fizzbuzz.fizzbuzz(5, 5) === [\"Buzz\"]\n     lhs:  [5]\n     stacktrace:\n       lib/fizzbuzz.ex:23: Fizzbuzz (module)\n\n\n\nFinished in 0.08 seconds (0.08s on load, 0.00s on tests)\n3 tests, 1 failures\n\nRandomized with seed 857202\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aBuzz \u3092\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (3.9ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.02ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (0.1ms)\n\n\nFinished in 0.08 seconds (0.08s on load, 0.00s on tests)\n3 tests, 0 failures\n\nRandomized with seed 677241\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizzBuzz \u306e Example \u3092\u8ffd\u52a0\n\nlib/fizzbuzz.exs\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n\n      # only FizzBuzz\n      iex> Fizzbuzz.fizzbuzz(15, 15)\n      [\"FizzBuzz\"]\n      iex> Fizzbuzz.fizzbuzz(30, 30)\n      [\"FizzBuzz\"]\n\n      # mix case\n      iex> Fizzbuzz.fizzbuzz(1, 15)\n      [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (4.9ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.03ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.05ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (5) (0.1ms)\n\n  1) test doc at Fizzbuzz.fizzbuzz/2 (5) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed\n     code: Fizzbuzz.fizzbuzz(1, 15) === [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n     lhs:  [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\",\n            13, 14, \"Fizz\"]\n     stacktrace:\n       lib/fizzbuzz.ex:33: Fizzbuzz (module)\n\n  * doc at Fizzbuzz.fizzbuzz/2 (4) (0.1ms)\n\n  2) test doc at Fizzbuzz.fizzbuzz/2 (4) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed\n     code: Fizzbuzz.fizzbuzz(15, 15) === [\"FizzBuzz\"]\n     lhs:  [\"Fizz\"]\n     stacktrace:\n       lib/fizzbuzz.ex:33: Fizzbuzz (module)\n\n\n\nFinished in 0.09 seconds (0.09s on load, 0.00s on tests)\n5 tests, 2 failures\n\nRandomized with seed 64741\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizzBuzz \u3092\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n\n      # only FizzBuzz\n      iex> Fizzbuzz.fizzbuzz(15, 15)\n      [\"FizzBuzz\"]\n      iex> Fizzbuzz.fizzbuzz(30, 30)\n      [\"FizzBuzz\"]\n\n      # mix case\n      iex> Fizzbuzz.fizzbuzz(1, 15)\n      [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (13.8ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.01ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (4) (0.07ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.02ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (5) (0.01ms)\n\n\nFinished in 0.1 seconds (0.09s on load, 0.01s on tests)\n5 tests, 0 failures\n\nRandomized with seed 768461\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1afrom / to \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3059\u308b Example \u3092\u8ffd\u52a0\n\nlib/fizzbuzz.exs\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n\n      # only FizzBuzz\n      iex> Fizzbuzz.fizzbuzz(15, 15)\n      [\"FizzBuzz\"]\n      iex> Fizzbuzz.fizzbuzz(30, 30)\n      [\"FizzBuzz\"]\n\n      # mix case\n      iex> Fizzbuzz.fizzbuzz(1, 15)\n      [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(\"1\", 15)\n      ** (RuntimeError) invalid argument\n          (fizzbuzz) lib/fizzbuzz.ex:37: Fizzbuzz.fizzbuzz/2\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(1, \"15\")\n      ** (RuntimeError) invalid argument\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n$ mix test --trace\nwarning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (which can be verified by running \"locale\" in your shell)\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (6) (10.5ms)\n\n  1) test doc at Fizzbuzz.fizzbuzz/2 (6) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed: expected exception RuntimeError with message \"invalid argument\" but got Protocol.UndefinedError with message \"protocol Range.Iterator not implemented for \\\"1\\\"\"\n     code: Fizzbuzz.fizzbuzz(\"1\", 15)\n     stacktrace:\n       lib/fizzbuzz.ex:42: Fizzbuzz (module)\n\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (1.4ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (4) (1.8ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (5) (1.2ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (0.07ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (7) (6.9ms)\n\n  2) test doc at Fizzbuzz.fizzbuzz/2 (7) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed: expected exception RuntimeError with message \"invalid argument\" but got FunctionClauseError with message \"no function clause matching in Range.Iterator.Integer.next/2\"\n     code: Fizzbuzz.fizzbuzz(1, \"15\")\n     stacktrace:\n       lib/fizzbuzz.ex:42: Fizzbuzz (module)\n\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.2ms)\n\n\nFinished in 0.1 seconds (0.1s on load, 0.02s on tests)\n7 tests, 2 failures\n\nRandomized with seed 32922\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1afrom / to \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u3001RuntimeError \u3092\u6295\u3052\u308b\u3088\u3046\u306b\u5b9f\u88c5\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n\n      # only FizzBuzz\n      iex> Fizzbuzz.fizzbuzz(15, 15)\n      [\"FizzBuzz\"]\n      iex> Fizzbuzz.fizzbuzz(30, 30)\n      [\"FizzBuzz\"]\n\n      # mix case\n      iex> Fizzbuzz.fizzbuzz(1, 15)\n      [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(\"1\", 15)\n      ** (RuntimeError) invalid argument\n          (fizzbuzz) lib/fizzbuzz.ex:37: Fizzbuzz.fizzbuzz/2\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(1, \"15\")\n      ** (RuntimeError) invalid argument\n  \"\"\"\n  def fizzbuzz(from, to) when is_integer(from) and is_integer(to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  def fizzbuzz(_from, _to) do\n    raise \"invalid argument\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (6) (0.9ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (3.8ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (4) (0.03ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (7) (0.04ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (0.03ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.05ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (5) (0.02ms)\n\n\nFinished in 0.1 seconds (0.1s on load, 0.00s on tests)\n7 tests, 0 failures\n\nRandomized with seed 951920\n\n\n \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1a\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n\u5404\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u95a2\u6570\u306e\u51e6\u7406\u304c\u77ed\u3044\u306e\u30671\u884c\u3067\u8a18\u8ff0\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\n\nlib/fizzbuzz.ex\n\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n\n      # only FizzBuzz\n      iex> Fizzbuzz.fizzbuzz(15, 15)\n      [\"FizzBuzz\"]\n      iex> Fizzbuzz.fizzbuzz(30, 30)\n      [\"FizzBuzz\"]\n\n      # mix case\n      iex> Fizzbuzz.fizzbuzz(1, 15)\n      [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(\"1\", 15)\n      ** (RuntimeError) invalid argument\n          (fizzbuzz) lib/fizzbuzz.ex:37: Fizzbuzz.fizzbuzz/2\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(1, \"15\")\n      ** (RuntimeError) invalid argument\n  \"\"\"\n  def fizzbuzz(from, to) when is_integer(from) and is_integer(to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  def fizzbuzz(_from, _to), do: raise \"invalid argument\"\n  defp fizzbuzz(num) when rem(num, 15) == 0, do: \"FizzBuzz\"\n  defp fizzbuzz(num) when rem(num, 5) == 0, do: \"Buzz\"\n  defp fizzbuzz(num) when rem(num, 3) == 0, do: \"Fizz\"\n  defp fizzbuzz(num), do: num\nend\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\u3002\n\u30c6\u30b9\u30c8\u3092\u58ca\u3055\u305a\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (4) (4.8ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (7) (1.9ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.1ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (0.1ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (5) (0.1ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.1ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (6) (0.08ms)\n\n\nFinished in 0.1 seconds (0.1s on load, 0.01s on tests)\n7 tests, 0 failures\n\nRandomized with seed 216728\n\n\n \u5b8c\u6210\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5b9f\u884c\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(1, 30)'\n[1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14,\n \"FizzBuzz\", 16, 17, \"Fizz\", 19, \"Buzz\", \"Fizz\", 22, 23, \"Fizz\", \"Buzz\", 26,\n \"Fizz\", 28, 29, \"FizzBuzz\"]\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(\"1\", 30)'\n** (RuntimeError) invalid argument\n    (fizzbuzz) lib/fizzbuzz.ex:46: Fizzbuzz.fizzbuzz/2\n    (stdlib) erl_eval.erl:657: :erl_eval.do_apply/6\n    (stdlib) erl_eval.erl:865: :erl_eval.expr_list/6\n    (stdlib) erl_eval.erl:407: :erl_eval.expr/5\n    (elixir) lib/code.ex:140: Code.eval_string/3\n    (elixir) lib/enum.ex:537: Enum.\"-each/2-lists^foreach/1-0-\"/2\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(1, \"30\")'\n** (RuntimeError) invalid argument\n    (fizzbuzz) lib/fizzbuzz.ex:46: Fizzbuzz.fizzbuzz/2\n    (stdlib) erl_eval.erl:657: :erl_eval.do_apply/6\n    (stdlib) erl_eval.erl:865: :erl_eval.expr_list/6\n    (stdlib) erl_eval.erl:407: :erl_eval.expr/5\n    (elixir) lib/code.ex:140: Code.eval_string/3\n    (elixir) lib/enum.ex:537: Enum.\"-each/2-lists^foreach/1-0-\"/2\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(15, 1)'\n[\"FizzBuzz\", 14, 13, \"Fizz\", 11, \"Buzz\", \"Fizz\", 8, 7, \"Fizz\", \"Buzz\", 4, \"Fizz\", 2, 1]\n\n\n Complete!\n\u660e\u65e5\u306f @keithseahus \u3055\u3093\u3067\u3059\u3002\n# \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30c8\u30ea\u30ac\u30fc\u30c6\u30b9\u30c8\u99c6\u52d5 Elixir ( Document Trigger Test Driven Elixir )\n## <i class=\"fa fa-cubes\" style=\"font-size:1em;\"></i> \u6982\u8981\nElixir \u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e Example \u3092\u5143\u306b\u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a\u3092\u3057\u307e\u3059\n## <i class=\"fa fa-cube\" style=\"font-size:1em;\"></i> \u524d\u63d0\nElixri \u306e Doctests \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u8a73\u3057\u304f\u306f\u4e0b\u8a18\u8a18\u4e8b\u3092\u53c2\u7167\n<i class=\"fa fa-external-link-square\" style=\"font-size:1em;\"></i> [Elixir | Doctests](http://qiita.com/tbpgr/items/2ea8a20c93eeb6959c80)\n\n## <i class=\"fa fa-file-o\" style=\"font-size:1em;\"></i> \u4ed5\u69d8\nFizzBuzz\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n* \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f Fizzbuzz.fizzbuzz(from, to)\n* from, to \u3068\u3082\u306b Integer \u306e\u307f\u8a31\u5bb9\n    * Integer \u4ee5\u5916\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\u3001RuntimeError \u3092\u6295\u3052\u308b\n* from \u304b\u3089 to \u307e\u3067\u306e FizzBuzz \u306e\u7d50\u679c\u3092\u914d\u5217\u3068\u3057\u3066\u8fd4\u5374\n* 15 \u306e\u500d\u6570\u306f \"FizzBuzz\"\n* 3 \u306e\u500d\u6570\u306f \"Fizz\"\n* 5 \u306e\u500d\u6570\u306f \"Buzz\"\n* 3/5/15 \u306e\u500d\u6570\u4ee5\u5916\u306f \u5165\u529b\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\n\n## <i class=\"fa fa-files-o\" style=\"font-size:1em;\"></i> \u624b\u9806\n### <i class=\"fa fa-plus-square\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n`mix` \u30b3\u30de\u30f3\u30c9\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306f\n\n* lib/fizzbuzz.ex\n* test/fizzbuzz_test.ex\n\n\u306e\u307f\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002\n\n~~~bash\n$ mix new fizzbuzz\n* creating README.md\n* creating .gitignore\n* creating mix.exs\n* creating config\n* creating config/config.exs\n* creating lib\n* creating lib/fizzbuzz.ex\n* creating test\n* creating test/test_helper.exs\n* creating test/fizzbuzz_test.exs\n~~~\n\n### <i class=\"fa fa-play\" style=\"font-size:1em;\"></i> \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\n\u81ea\u52d5\u751f\u6210\u76f4\u5f8c\u306f\u3001\u7a7a\u306e\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\u3068\u6210\u529f\u3059\u308b\u30c6\u30b9\u30c8 Example \u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\n1\u4ef6\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3059\u3002\n\n~~~bash\n$ mix test\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n.\n\nFinished in 0.04 seconds (0.04s on load, 0.00s on tests)\n1 tests, 0 failures\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\uff1aExample \u3092\u30c6\u30b9\u30c8\u3059\u308b\u305f\u3081\u306b doctest \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\u3053\u308c\u4ee5\u964d\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4e00\u5207\u5909\u66f4\u3057\u307e\u305b\u3093\n\n* test/fizzbuzz_test.exs\n\n~~~elixir\ndefmodule FizzbuzzTest do\n  use ExUnit.Case\n  doctest Fizzbuzz\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3002\u7d50\u679c\u306f 0 \u4ef6\n\n~~~bash\n$ mix test --trace\nFizzbuzzTest\n\n\nFinished in 0.04 seconds (0.04s on load, 0.00s on tests)\n0 tests, 0 failures\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1a\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\u3059\u308b Example \u3092\u8ffd\u52a0\n\n* Example \u3092\u8ffd\u52a0\n\n~~~elixir\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n  \"\"\"\n  def fizzbuzz(from, to) do\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\nlib/fizzbuzz.ex:11: warning: variable from is unused\nlib/fizzbuzz.ex:11: warning: variable to is unused\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.00ms)\n\n  1) test doc at Fizzbuzz.fizzbuzz/2 (1) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed\n     code: Fizzbuzz.fizzbuzz(1,2) === [1, 2]\n     lhs:  nil\n     stacktrace:\n       lib/fizzbuzz.ex:11: Fizzbuzz (module)\n\n\n\nFinished in 0.07 seconds (0.07s on load, 0.00s on tests)\n1 tests, 1 failures\n\nRandomized with seed 926333\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1a\u6570\u5024\u3092\u305d\u306e\u307e\u307e\u8fd4\u5374\u3059\u308b Example \u3092\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(&1))\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (5.7ms)\n\n\nFinished in 0.07 seconds (0.07s on load, 0.00s on tests)\n1 tests, 0 failures\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizz \u306e Example \u3092\u8ffd\u52a0\n\n* lib/fizzbuzz.exs\n\n~~~elixir\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(&1))\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (4.9ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (0.02ms)\n\n  1) test doc at Fizzbuzz.fizzbuzz/2 (2) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed\n     code: Fizzbuzz.fizzbuzz(3, 3) === [\"Fizz\"]\n     lhs:  [3]\n     stacktrace:\n       lib/fizzbuzz.ex:18: Fizzbuzz (module)\n\n\n\nFinished in 0.07 seconds (0.07s on load, 0.00s on tests)\n2 tests, 1 failures\n\nRandomized with seed 118398\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i>\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizz \u3092\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n  defp fizzbuzz(n) do\n    n\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (4.4ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.06ms)\n\n\nFinished in 0.09 seconds (0.09s on load, 0.00s on tests)\n2 tests, 0 failures\n\nRandomized with seed 629312\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i>\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aBuzz \u306e Example \u3092\u8ffd\u52a0\n\n* lib/fizzbuzz.exs\n\n~~~elixir\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (4.0ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.02ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.06ms)\n\n  1) test doc at Fizzbuzz.fizzbuzz/2 (3) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed\n     code: Fizzbuzz.fizzbuzz(5, 5) === [\"Buzz\"]\n     lhs:  [5]\n     stacktrace:\n       lib/fizzbuzz.ex:23: Fizzbuzz (module)\n\n\n\nFinished in 0.08 seconds (0.08s on load, 0.00s on tests)\n3 tests, 1 failures\n\nRandomized with seed 857202\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aBuzz \u3092\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (3.9ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.02ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (0.1ms)\n\n\nFinished in 0.08 seconds (0.08s on load, 0.00s on tests)\n3 tests, 0 failures\n\nRandomized with seed 677241\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizzBuzz \u306e Example \u3092\u8ffd\u52a0\n\n* lib/fizzbuzz.exs\n\n~~~elixir\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n\n      # only FizzBuzz\n      iex> Fizzbuzz.fizzbuzz(15, 15)\n      [\"FizzBuzz\"]\n      iex> Fizzbuzz.fizzbuzz(30, 30)\n      [\"FizzBuzz\"]\n\n      # mix case\n      iex> Fizzbuzz.fizzbuzz(1, 15)\n      [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (4.9ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.03ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.05ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (5) (0.1ms)\n\n  1) test doc at Fizzbuzz.fizzbuzz/2 (5) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed\n     code: Fizzbuzz.fizzbuzz(1, 15) === [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n     lhs:  [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\",\n            13, 14, \"Fizz\"]\n     stacktrace:\n       lib/fizzbuzz.ex:33: Fizzbuzz (module)\n\n  * doc at Fizzbuzz.fizzbuzz/2 (4) (0.1ms)\n\n  2) test doc at Fizzbuzz.fizzbuzz/2 (4) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed\n     code: Fizzbuzz.fizzbuzz(15, 15) === [\"FizzBuzz\"]\n     lhs:  [\"Fizz\"]\n     stacktrace:\n       lib/fizzbuzz.ex:33: Fizzbuzz (module)\n\n\n\nFinished in 0.09 seconds (0.09s on load, 0.00s on tests)\n5 tests, 2 failures\n\nRandomized with seed 64741\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1aFizzBuzz \u3092\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n\n      # only FizzBuzz\n      iex> Fizzbuzz.fizzbuzz(15, 15)\n      [\"FizzBuzz\"]\n      iex> Fizzbuzz.fizzbuzz(30, 30)\n      [\"FizzBuzz\"]\n\n      # mix case\n      iex> Fizzbuzz.fizzbuzz(1, 15)\n      [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (13.8ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.01ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (4) (0.07ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.02ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (5) (0.01ms)\n\n\nFinished in 0.1 seconds (0.09s on load, 0.01s on tests)\n5 tests, 0 failures\n\nRandomized with seed 768461\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1afrom / to \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3059\u308b Example \u3092\u8ffd\u52a0\n\n* lib/fizzbuzz.exs\n\n~~~\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n\n      # only FizzBuzz\n      iex> Fizzbuzz.fizzbuzz(15, 15)\n      [\"FizzBuzz\"]\n      iex> Fizzbuzz.fizzbuzz(30, 30)\n      [\"FizzBuzz\"]\n\n      # mix case\n      iex> Fizzbuzz.fizzbuzz(1, 15)\n      [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(\"1\", 15)\n      ** (RuntimeError) invalid argument\n          (fizzbuzz) lib/fizzbuzz.ex:37: Fizzbuzz.fizzbuzz/2\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(1, \"15\")\n      ** (RuntimeError) invalid argument\n  \"\"\"\n  def fizzbuzz(from, to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  defp fizzbuzz(n) when rem(n, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u672a\u5b9f\u88c5\u306e\u305f\u3081\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\n\n~~~bash\n$ mix test --trace\nwarning: the VM is running with native name encoding of latin1 which may cause Elixir to malfunction as it expects utf8. Please ensure your locale is set to UTF-8 (which can be verified by running \"locale\" in your shell)\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (6) (10.5ms)\n\n  1) test doc at Fizzbuzz.fizzbuzz/2 (6) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed: expected exception RuntimeError with message \"invalid argument\" but got Protocol.UndefinedError with message \"protocol Range.Iterator not implemented for \\\"1\\\"\"\n     code: Fizzbuzz.fizzbuzz(\"1\", 15)\n     stacktrace:\n       lib/fizzbuzz.ex:42: Fizzbuzz (module)\n\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (1.4ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (4) (1.8ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (5) (1.2ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (0.07ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (7) (6.9ms)\n\n  2) test doc at Fizzbuzz.fizzbuzz/2 (7) (FizzbuzzTest)\n     test/fizzbuzz_test.exs:3\n     Doctest failed: expected exception RuntimeError with message \"invalid argument\" but got FunctionClauseError with message \"no function clause matching in Range.Iterator.Integer.next/2\"\n     code: Fizzbuzz.fizzbuzz(1, \"15\")\n     stacktrace:\n       lib/fizzbuzz.ex:42: Fizzbuzz (module)\n\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.2ms)\n\n\nFinished in 0.1 seconds (0.1s on load, 0.02s on tests)\n7 tests, 2 failures\n\nRandomized with seed 32922\n~~~\n\n### <i class=\"fa fa-terminal\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1afrom / to \u306b\u4e0d\u6b63\u306a\u5f15\u6570( Integer \u4ee5\u5916)\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306b\u3001RuntimeError \u3092\u6295\u3052\u308b\u3088\u3046\u306b\u5b9f\u88c5\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n\n      # only FizzBuzz\n      iex> Fizzbuzz.fizzbuzz(15, 15)\n      [\"FizzBuzz\"]\n      iex> Fizzbuzz.fizzbuzz(30, 30)\n      [\"FizzBuzz\"]\n\n      # mix case\n      iex> Fizzbuzz.fizzbuzz(1, 15)\n      [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(\"1\", 15)\n      ** (RuntimeError) invalid argument\n          (fizzbuzz) lib/fizzbuzz.ex:37: Fizzbuzz.fizzbuzz/2\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(1, \"15\")\n      ** (RuntimeError) invalid argument\n  \"\"\"\n  def fizzbuzz(from, to) when is_integer(from) and is_integer(to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  def fizzbuzz(_from, _to) do\n    raise \"invalid argument\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 15) == 0 do\n    \"FizzBuzz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 3) == 0 do\n    \"Fizz\"\n  end\n\n  defp fizzbuzz(n) when rem(n, 5) == 0 do\n    \"Buzz\"\n  end\n\n  defp fizzbuzz(n) do\n    n\n  end\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (6) (0.9ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (3.8ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (4) (0.03ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (7) (0.04ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (0.03ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.05ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (5) (0.02ms)\n\n\nFinished in 0.1 seconds (0.1s on load, 0.00s on tests)\n7 tests, 0 failures\n\nRandomized with seed 951920\n~~~\n\n### <i class=\"fa fa-repeat\" style=\"font-size:1em;\"></i> \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\uff1a\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n\u5404\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u95a2\u6570\u306e\u51e6\u7406\u304c\u77ed\u3044\u306e\u30671\u884c\u3067\u8a18\u8ff0\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\n\n* lib/fizzbuzz.ex\n\n~~~elixir\ndefmodule Fizzbuzz do\n  @doc ~S\"\"\"\n  FizzBuzz.\n\n  ## Examples\n\n      # only other numbers\n      iex> Fizzbuzz.fizzbuzz(1,2)\n      [1, 2]\n\n      # only Fizz\n      iex> Fizzbuzz.fizzbuzz(3, 3)\n      [\"Fizz\"]\n      iex> Fizzbuzz.fizzbuzz(6, 6)\n      [\"Fizz\"]\n\n      # only Buzz\n      iex> Fizzbuzz.fizzbuzz(5, 5)\n      [\"Buzz\"]\n      iex> Fizzbuzz.fizzbuzz(10, 10)\n      [\"Buzz\"]\n\n      # only FizzBuzz\n      iex> Fizzbuzz.fizzbuzz(15, 15)\n      [\"FizzBuzz\"]\n      iex> Fizzbuzz.fizzbuzz(30, 30)\n      [\"FizzBuzz\"]\n\n      # mix case\n      iex> Fizzbuzz.fizzbuzz(1, 15)\n      [1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14, \"FizzBuzz\"]\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(\"1\", 15)\n      ** (RuntimeError) invalid argument\n          (fizzbuzz) lib/fizzbuzz.ex:37: Fizzbuzz.fizzbuzz/2\n\n      # args 'to' not integer\n      iex> Fizzbuzz.fizzbuzz(1, \"15\")\n      ** (RuntimeError) invalid argument\n  \"\"\"\n  def fizzbuzz(from, to) when is_integer(from) and is_integer(to) do\n    from..to |> Enum.map(&(fizzbuzz/1))\n  end\n\n  def fizzbuzz(_from, _to), do: raise \"invalid argument\"\n  defp fizzbuzz(num) when rem(num, 15) == 0, do: \"FizzBuzz\"\n  defp fizzbuzz(num) when rem(num, 5) == 0, do: \"Buzz\"\n  defp fizzbuzz(num) when rem(num, 3) == 0, do: \"Fizz\"\n  defp fizzbuzz(num), do: num\nend\n~~~\n\n* \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\n\u30c6\u30b9\u30c8\u3092\u30d1\u30b9\u3057\u307e\u3057\u305f\u3002\n\u30c6\u30b9\u30c8\u3092\u58ca\u3055\u305a\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n~~~bash\n$ mix test --trace\nCompiled lib/fizzbuzz.ex\nGenerated fizzbuzz.app\n\nFizzbuzzTest\n  * doc at Fizzbuzz.fizzbuzz/2 (4) (4.8ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (7) (1.9ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (1) (0.1ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (2) (0.1ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (5) (0.1ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (3) (0.1ms)\n  * doc at Fizzbuzz.fizzbuzz/2 (6) (0.08ms)\n\n\nFinished in 0.1 seconds (0.1s on load, 0.01s on tests)\n7 tests, 0 failures\n\nRandomized with seed 216728\n~~~\n\n### <i class=\"fa fa-play\" style=\"font-size:1em;\"></i> \u5b8c\u6210\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u5b9f\u884c\n\n~~~bash\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(1, 30)'\n[1, 2, \"Fizz\", 4, \"Buzz\", \"Fizz\", 7, 8, \"Fizz\", \"Buzz\", 11, \"Fizz\", 13, 14,\n \"FizzBuzz\", 16, 17, \"Fizz\", 19, \"Buzz\", \"Fizz\", 22, 23, \"Fizz\", \"Buzz\", 26,\n \"Fizz\", 28, 29, \"FizzBuzz\"]\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(\"1\", 30)'\n** (RuntimeError) invalid argument\n    (fizzbuzz) lib/fizzbuzz.ex:46: Fizzbuzz.fizzbuzz/2\n    (stdlib) erl_eval.erl:657: :erl_eval.do_apply/6\n    (stdlib) erl_eval.erl:865: :erl_eval.expr_list/6\n    (stdlib) erl_eval.erl:407: :erl_eval.expr/5\n    (elixir) lib/code.ex:140: Code.eval_string/3\n    (elixir) lib/enum.ex:537: Enum.\"-each/2-lists^foreach/1-0-\"/2\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(1, \"30\")'\n** (RuntimeError) invalid argument\n    (fizzbuzz) lib/fizzbuzz.ex:46: Fizzbuzz.fizzbuzz/2\n    (stdlib) erl_eval.erl:657: :erl_eval.do_apply/6\n    (stdlib) erl_eval.erl:865: :erl_eval.expr_list/6\n    (stdlib) erl_eval.erl:407: :erl_eval.expr/5\n    (elixir) lib/code.ex:140: Code.eval_string/3\n    (elixir) lib/enum.ex:537: Enum.\"-each/2-lists^foreach/1-0-\"/2\n\n$ mix run -e 'IO.inspect Fizzbuzz.fizzbuzz(15, 1)'\n[\"FizzBuzz\", 14, 13, \"Fizz\", 11, \"Buzz\", \"Fizz\", 8, 7, \"Fizz\", \"Buzz\", 4, \"Fizz\", 2, 1]\n~~~\n\n## <i class=\"fa fa-trophy\" style=\"font-size:1em;\"></i> Complete!\n\n\u660e\u65e5\u306f @keithseahus \u3055\u3093\u3067\u3059\u3002\n", "tags": ["Elixir", "TDD"]}