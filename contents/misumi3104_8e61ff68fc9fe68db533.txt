{"context": "\nmain.cpp\n\n#include<windows.h>\n#include<SDL_net.h>\n#pragma comment(lib,\"SDL2_net.lib\")\nint main(int argc, char_t *argv[]){\n    IPaddress ip;\n    TCPsocket server;\n    if(!SDLNet_Init()){\n        if(!SDLNet_ResolveHost(&ip,\"k-db.com\\0\",80)){\n            if(server=SDLNet_TCP_Open(&ip)){\n                char    bufsend[]=\n                    \"GET https://www.google.co.jp/webhp?hl=ja\\r\\n\"\n                //\u539f\u56e0\uff11\n                //\u30ea\u30af\u30a8\u30b9\u30c8\u3067\\n\u3092\u6539\u884c\u30b3\u30fc\u30c9\u3068\u3057\u3066\u8aa4\u3063\u3066\u4f7f\u3063\u3066\u3044\u308b\u3002\u6b63\u3057\u304f\u306f\\r\\n\u3067\u3042\u308b\u3002\n                    \"\\r\\n\";\n                //\u539f\u56e0\uff12\n                //\u30d8\u30c3\u30c0\u306e\u6700\u5f8c\u3067\u4e00\u884c\u3092\u7a7a\u3051\u5fd8\u308c\u3066\u3044\u308b\u3002\n                //GET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u672b\u5c3e\u306f\u6539\u884c+\u7a7a\u884c\u3067\u3006\u308b\u306e\u3067\"\\r\\n\\r\\n\"\u3068\u306a\u308b\u3079\u304d\u3067\u3042\u308b\u3002\n                SDLNet_TCP_Send(server,bufsend,sizeof(bufsend)+1);//+1\u306f\\0\u306e\u5206\n                while(true){\n                    char    bufrecv[256+1];\n                    memset(bufrecv,0,sizeof(bufrecv));\n                    if(SDLNet_TCP_Recv(server,bufrecv,sizeof(bufrecv))){\n                        bufrecv[sizeof(bufrecv)-1]=0;\n                        MessageBoxA(NULL,bufrecv,\"title\",MB_OK);\n                    }else{\n                        break;\n                    }\n                    //socket\u306b\u6e9c\u307e\u3063\u305f\u8fd4\u4e8b\u3092256byte\u305a\u3064\u6700\u5f8c\u307e\u3067\u8868\u793a\u3002\n                }\n                SDLNet_TCP_Close(server);\n            }\n        }\n        SDLNet_Quit();\n    }\n    return  0;\n}\n\n\nSDLNet_TCP_Recv\u30671byte\u3092\u8aad\u307f\u8fbc\u3080\u52d5\u4f5c\u3092\n1\u56de,10\u56de,100\u56de,1000\u56de,10000\u56de\u7e70\u308a\u8fd4\u3059\u6642\u9593\u306f\n125,125,125,125,144(ms)\u3060\u3063\u305f\u3002\n\u3060\u304b\u3089\u591a\u5206SDLNet_TCP_Recv\u306f\u5185\u90e8\u306e\u30d0\u30c3\u30d5\u30a1\u306b\u6e9c\u3081\u8fbc\u3093\u3067\u3044\u308b\u3002\n\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u65e9\u304f\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u305f\u3044\u3002\n2016/4/7\u8ffd\u8a18\n\u4ee5\u4e0a\u3092\u5fdc\u7528\u3057\u3066\u7c21\u5358\u306a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c0\u3092\u4f5c\u3063\u305f\u3002\nContent-length\u3067\u3082chunked\u3067\u3082\u3044\u3051\u308b\u3002\n\na.h\n//tolua_end\n#include<SDL_net.h>\n#include<string>\n#include<algorithm>\n#pragma comment(lib,\"SDL2_net.lib\")\nstruct  HTTP{//tolua_export\n    static  const   int SIZE=8192;\n    char*   m_buff;\n    TCPsocket   m_sckt;\n    ~HTTP(){\n        SDLNet_Quit();\n        delete  m_buff;\n    }\n    struct  CURL{\n        std::string m_host,m_path;\n        CURL(const  char*t){\n            std::string src(t);\n            int n1=src.find(\"//\",0)+2;\n            int n2=src.find(\"/\",n1);\n            m_host=src.substr(n1,n2-n1);\n            m_path=src.substr(n2);\n        }\n        IPaddress   resolve(){\n            IPaddress ip={0};\n            SDLNet_ResolveHost(&ip,m_host.c_str(),80);\n            return  ip;\n        }\n    };\n    bool    open(IPaddress i){\n        return  (m_sckt=SDLNet_TCP_Open(&i))==NULL;\n    }\n    void    close(){\n        SDLNet_TCP_Close(m_sckt);\n    }\n    void    sendhead(const  char*format,...){\n        va_list arg;\n        va_start(arg,format);\n        int n=vsprintf_s(m_buff,SIZE,format,arg);\n        if(n>=0){\n            m_buff[n]=0;\n            SDLNet_TCP_Send(m_sckt,m_buff,n+1);\n        }\n        va_end(arg);\n    }\n    char    recvchar(){\n        char    t;\n        while(SDLNet_TCP_Recv(m_sckt,&t,1)!=sizeof(t)){}\n        return  t;\n    }\n    std::string recvhead(){\n        std::string tmp;\n        char    t[2]={0};\n        for(int i=0;i<0xff;i++){\n            t[0]=t[1];\n            t[1]=recvchar();\n            //\u9806\u756a\u5927\u4e8b\n            if(((t[0]=='\\r')&&(t[1]=='\\n'))||((t[0]==':')&&(t[1]==' ')))break;\n            if(*t)tmp.push_back(*t);\n        }\n        //\u6bd4\u8f03\u524d\u306b\u5c0f\u6587\u5b57\u5316\n        std::transform(tmp.begin(),tmp.end(),tmp.begin(),tolower);\n        return  tmp;\n    }\n    bool    recv(int size,void*p,void(*proc)(void*,void*,int n)){\n        for(int n=0,i=0;i<size;i+=n){\n            n=SDLNet_TCP_Recv(m_sckt,m_buff,min(size-i,SIZE));\n            if(n){\n                proc(p,m_buff,n);\n            }else{\n                return  true;\n            }\n        }\n        return  false;\n    }\n    static  void    proc_fw(void*a,void*b,int c){\n        fwrite(b,1,c,(FILE*)a);\n    }\n    //tolua_begin\n    HTTP(){\n        SDLNet_Init();\n        m_buff=new  char[SIZE];\n    }\n    void    get(const   char*tmp,const  char*dst){\n        CURL    url(tmp);\n        if(open(url.resolve()))return;\n        sendhead(\"GET %s HTTP/1.1\\r\\nhost: %s\\r\\n\\r\\n\",url.m_path.c_str(),url.m_host.c_str());\n        bool    chunked=false;\n        signed  size;\n        while(1){\n            std::string a=recvhead();\n            if(a==\"\"){\n                break;\n            }\n            if(a==\"content-length\"){\n                size=atoi(recvhead().c_str());\n            }\n            if(a==\"transfer-encoding\"){\n                if(recvhead()==\"chunked\"){\n                    chunked=true;\n                }\n            }\n        }\n        FILE*   f;\n        fopen_s(&f,dst,\"wb\");\n        if(chunked){\n            while(true){\n                size=strtol(recvhead().c_str(),NULL,16);\n                if(size>0){\n                    recv(size,f,proc_fw);\n                }else{\n                    break;\n                }\n                //\u6700\u5f8c\u3082\u6539\u884c\n                recvhead();\n            }\n        }else{\n            recv(size,f,proc_fw);//\u5b8c\u6210\n        }\n        fclose(f);\n        close();\n    }   \n};\n\n\n\u4f8b)\u3053\u306e\u30da\u30fc\u30b8\u3092dest.html\u3068\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\nHTTP h;\nh.get(\"http://qiita.com/misumi3104/items/8e61ff68fc9fe68db533\",\"dest.html\")\n```cpp:main.cpp\n\n#include<windows.h>\n#include<SDL_net.h>\n#pragma\tcomment(lib,\"SDL2_net.lib\")\nint main(int argc, char_t *argv[]){\n\tIPaddress ip;\n\tTCPsocket server;\n\tif(!SDLNet_Init()){\n\t\tif(!SDLNet_ResolveHost(&ip,\"k-db.com\\0\",80)){\n\t\t\tif(server=SDLNet_TCP_Open(&ip)){\n\t\t\t\tchar\tbufsend[]=\n\t\t\t\t\t\"GET https://www.google.co.jp/webhp?hl=ja\\r\\n\"\n\t\t\t\t//\u539f\u56e0\uff11\n\t\t\t\t//\u30ea\u30af\u30a8\u30b9\u30c8\u3067\\n\u3092\u6539\u884c\u30b3\u30fc\u30c9\u3068\u3057\u3066\u8aa4\u3063\u3066\u4f7f\u3063\u3066\u3044\u308b\u3002\u6b63\u3057\u304f\u306f\\r\\n\u3067\u3042\u308b\u3002\n\t\t\t\t\t\"\\r\\n\";\n\t\t\t\t//\u539f\u56e0\uff12\n\t\t\t\t//\u30d8\u30c3\u30c0\u306e\u6700\u5f8c\u3067\u4e00\u884c\u3092\u7a7a\u3051\u5fd8\u308c\u3066\u3044\u308b\u3002\n\t\t\t\t//GET\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u672b\u5c3e\u306f\u6539\u884c+\u7a7a\u884c\u3067\u3006\u308b\u306e\u3067\"\\r\\n\\r\\n\"\u3068\u306a\u308b\u3079\u304d\u3067\u3042\u308b\u3002\n\t\t\t\tSDLNet_TCP_Send(server,bufsend,sizeof(bufsend)+1);//+1\u306f\\0\u306e\u5206\n\t\t\t\twhile(true){\n\t\t\t\t\tchar\tbufrecv[256+1];\n\t\t\t\t\tmemset(bufrecv,0,sizeof(bufrecv));\n\t\t\t\t\tif(SDLNet_TCP_Recv(server,bufrecv,sizeof(bufrecv))){\n\t\t\t\t\t\tbufrecv[sizeof(bufrecv)-1]=0;\n\t\t\t\t\t\tMessageBoxA(NULL,bufrecv,\"title\",MB_OK);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t//socket\u306b\u6e9c\u307e\u3063\u305f\u8fd4\u4e8b\u3092256byte\u305a\u3064\u6700\u5f8c\u307e\u3067\u8868\u793a\u3002\n\t\t\t\t}\n\t\t\t\tSDLNet_TCP_Close(server);\n\t\t\t}\n\t\t}\n\t\tSDLNet_Quit();\n\t}\n\treturn\t0;\n}\n```\n\nSDLNet_TCP_Recv\u30671byte\u3092\u8aad\u307f\u8fbc\u3080\u52d5\u4f5c\u3092\n1\u56de,10\u56de,100\u56de,1000\u56de,10000\u56de\u7e70\u308a\u8fd4\u3059\u6642\u9593\u306f\n125,125,125,125,144(ms)\u3060\u3063\u305f\u3002\n\u3060\u304b\u3089\u591a\u5206SDLNet_TCP_Recv\u306f\u5185\u90e8\u306e\u30d0\u30c3\u30d5\u30a1\u306b\u6e9c\u3081\u8fbc\u3093\u3067\u3044\u308b\u3002\n\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u65e9\u304f\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u305f\u3044\u3002\n\n2016/4/7\u8ffd\u8a18\n\u4ee5\u4e0a\u3092\u5fdc\u7528\u3057\u3066\u7c21\u5358\u306a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c0\u3092\u4f5c\u3063\u305f\u3002\nContent-length\u3067\u3082chunked\u3067\u3082\u3044\u3051\u308b\u3002\n\n```cpp:a.h\n//tolua_end\n#include<SDL_net.h>\n#include<string>\n#include<algorithm>\n#pragma\tcomment(lib,\"SDL2_net.lib\")\nstruct\tHTTP{//tolua_export\n\tstatic\tconst\tint\tSIZE=8192;\n\tchar*\tm_buff;\n\tTCPsocket\tm_sckt;\n\t~HTTP(){\n\t\tSDLNet_Quit();\n\t\tdelete\tm_buff;\n\t}\n\tstruct\tCURL{\n\t\tstd::string\tm_host,m_path;\n\t\tCURL(const\tchar*t){\n\t\t\tstd::string\tsrc(t);\n\t\t\tint\tn1=src.find(\"//\",0)+2;\n\t\t\tint\tn2=src.find(\"/\",n1);\n\t\t\tm_host=src.substr(n1,n2-n1);\n\t\t\tm_path=src.substr(n2);\n\t\t}\n\t\tIPaddress\tresolve(){\n\t\t\tIPaddress ip={0};\n\t\t\tSDLNet_ResolveHost(&ip,m_host.c_str(),80);\n\t\t\treturn\tip;\n\t\t}\n\t};\n\tbool\topen(IPaddress i){\n\t\treturn\t(m_sckt=SDLNet_TCP_Open(&i))==NULL;\n\t}\n\tvoid\tclose(){\n\t\tSDLNet_TCP_Close(m_sckt);\n\t}\n\tvoid\tsendhead(const\tchar*format,...){\n\t\tva_list arg;\n\t\tva_start(arg,format);\n\t\tint\tn=vsprintf_s(m_buff,SIZE,format,arg);\n\t\tif(n>=0){\n\t\t\tm_buff[n]=0;\n\t\t\tSDLNet_TCP_Send(m_sckt,m_buff,n+1);\n\t\t}\n\t\tva_end(arg);\n\t}\n\tchar\trecvchar(){\n\t\tchar\tt;\n\t\twhile(SDLNet_TCP_Recv(m_sckt,&t,1)!=sizeof(t)){}\n\t\treturn\tt;\n\t}\n\tstd::string\trecvhead(){\n\t\tstd::string\ttmp;\n\t\tchar\tt[2]={0};\n\t\tfor(int\ti=0;i<0xff;i++){\n\t\t\tt[0]=t[1];\n\t\t\tt[1]=recvchar();\n\t\t\t//\u9806\u756a\u5927\u4e8b\n\t\t\tif(((t[0]=='\\r')&&(t[1]=='\\n'))||((t[0]==':')&&(t[1]==' ')))break;\n\t\t\tif(*t)tmp.push_back(*t);\n\t\t}\n\t\t//\u6bd4\u8f03\u524d\u306b\u5c0f\u6587\u5b57\u5316\n\t\tstd::transform(tmp.begin(),tmp.end(),tmp.begin(),tolower);\n\t\treturn\ttmp;\n\t}\n\tbool\trecv(int size,void*p,void(*proc)(void*,void*,int n)){\n\t\tfor(int\tn=0,i=0;i<size;i+=n){\n\t\t\tn=SDLNet_TCP_Recv(m_sckt,m_buff,min(size-i,SIZE));\n\t\t\tif(n){\n\t\t\t\tproc(p,m_buff,n);\n\t\t\t}else{\n\t\t\t\treturn\ttrue;\n\t\t\t}\n\t\t}\n\t\treturn\tfalse;\n\t}\n\tstatic\tvoid\tproc_fw(void*a,void*b,int c){\n\t\tfwrite(b,1,c,(FILE*)a);\n\t}\n\t//tolua_begin\n\tHTTP(){\n\t\tSDLNet_Init();\n\t\tm_buff=new\tchar[SIZE];\n\t}\n\tvoid\tget(const\tchar*tmp,const\tchar*dst){\n\t\tCURL\turl(tmp);\n\t\tif(open(url.resolve()))return;\n\t\tsendhead(\"GET %s HTTP/1.1\\r\\nhost: %s\\r\\n\\r\\n\",url.m_path.c_str(),url.m_host.c_str());\n\t\tbool\tchunked=false;\n\t\tsigned\tsize;\n\t\twhile(1){\n\t\t\tstd::string\ta=recvhead();\n\t\t\tif(a==\"\"){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(a==\"content-length\"){\n\t\t\t\tsize=atoi(recvhead().c_str());\n\t\t\t}\n\t\t\tif(a==\"transfer-encoding\"){\n\t\t\t\tif(recvhead()==\"chunked\"){\n\t\t\t\t\tchunked=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tFILE*\tf;\n\t\tfopen_s(&f,dst,\"wb\");\n\t\tif(chunked){\n\t\t\twhile(true){\n\t\t\t\tsize=strtol(recvhead().c_str(),NULL,16);\n\t\t\t\tif(size>0){\n\t\t\t\t\trecv(size,f,proc_fw);\n\t\t\t\t}else{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//\u6700\u5f8c\u3082\u6539\u884c\n\t\t\t\trecvhead();\n\t\t\t}\n\t\t}else{\n\t\t\trecv(size,f,proc_fw);//\u5b8c\u6210\n\t\t}\n\t\tfclose(f);\n\t\tclose();\n\t}\t\n};\n```\n\u4f8b)\u3053\u306e\u30da\u30fc\u30b8\u3092dest.html\u3068\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\nHTTP h;\nh.get(\"http://qiita.com/misumi3104/items/8e61ff68fc9fe68db533\",\"dest.html\")\n", "tags": ["SDL", "SDL2", "SDL_net", "C++"]}