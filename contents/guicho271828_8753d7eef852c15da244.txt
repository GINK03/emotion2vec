{"tags": ["common-lisp"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u6ce8: \u3053\u306e\u8a18\u4e8b\u306f\u65e2\u306b\u518d\u5e30\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3053\u3068\u306b\u62b5\u6297\u304c\u306a\u3044\u4eba\u5411\u3051\u306e\u8a18\u4e8b\u3067\u3059\n\u50d5\u306f\u3088\u304f\u518d\u5e30\u3092\u66f8\u304d\u307e\u3059\u3002\u3067\u304b\u3044\u95a2\u6570\u306e\u5834\u5408\u3001\u7279\u306b\u3088\u304f\u518d\u5e30\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u57fa\u672c\u7684\u306b\u3001\u6a2a\u306b80\u6587\u5b57\u4ee5\u4e0a\u3001\u7e26\u306b20\u884c\u4ee5\u4e0a\u3042\u308b\u95a2\u6570\u306f\u66f8\u304d\u305f\u304f\u306a\u3044\u306e\u3067\u3001\n\u679d\u5206\u304b\u308c\u306e\u5148\u3092\u518d\u5e30\u3092\u4f7f\u3063\u3066\u3069\u3093\u3069\u3093\u5206\u96e2\u3057\u307e\u3059\u3002\n\u6700\u8fd1\u66f8\u3044\u3066\u308b\u30b3\u30fc\u30c9\u306e\u4f8b\u3067\u8a00\u3046\u3068\u3053\u3093\u306a\u304b\u3093\u3058\u3002(\u4f55\u306e\u30b3\u30fc\u30c9\u3067\u3057\u3087\u3046?)\n(defun %insert-state-rec (aa duration rest acc)\n  (match rest\n    ((list* (and ts (timed-state state time)) rest2)\n     (if (applicable state aa)\n         (if rest2\n             (%insert-state-inner\n              aa duration ts (+ time duration) rest2 (cons ts acc))\n             (%insert-state-finish aa duration ts (cons ts acc)))\n         (%insert-state-rec aa duration rest2 (cons ts acc))))\n    (nil (%debug-insert-failure aa rest acc))))\n\n(defun %insert-state-inner (aa duration earliest end rest acc)\n  (ematch rest\n    ((list* (and ts2 (timed-state state time)) rest2)\n     (cond\n       ((<= time end)\n        (if (applicable state aa)\n            (if rest2\n                (%insert-state-inner aa duration earliest end rest2 (cons ts2 acc))\n                (%insert-state-mergedto aa earliest duration (cons ts2 acc)))\n            (%insert-state-rec aa duration rest2 (cons ts2 acc))))\n       ((< end time)\n        (if-let ((merged (%check-after-end-time aa end rest acc)))\n          (%insert-state-merge aa duration earliest merged acc)\n          (%insert-state-rec aa duration rest acc)))))))\n\n(optima\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u518d\u5e30\u95a2\u6570\u306flabels\u3067\u306f\u306a\u304f\u5206\u3051\u3066\u66f8\u3044\u3066\u307e\u3059\u3002\n\u540d\u524d\u306b\u306f%\u3092\u3064\u3051\u3066\u518d\u5e30\u95a2\u6570\u3060\u3068\u308f\u304b\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u672c\u756a\u3067\u306finline\u5ba3\u8a00\u3059\u308b\u3002)\n\u3053\u306e\u624b\u6cd5\u306f\u3001\n\n\u30c7\u30d0\u30c3\u30b0\u3092break\u3067\u306f\u306a\u304f\u3066trace\u3067\u884c\u3048\u305f\u308a\u3001\nprofile \u304c\u3067\u304d\u305f\u308a\u3001\n\u672b\u5c3e\u518d\u5e30\u306a\u306e\u3067\u6700\u9069\u5316\u51fa\u6765\u305f\u308a\n\n\u3068\u500b\u4eba\u7684\u306b\u306f\u4f7f\u3044\u3084\u3059\u3044\u306e\u3067\u3059\u304c\u3001\u30cd\u30c3\u30af\u306f \u5f15\u6570\u306e\u6570\u304c\u3069\u3093\u3069\u3093\u5897\u3048\u308b\u3053\u3068 \u3067\u3059\u3002\n\u4e0a\u306e\u4f8b\u3067\u306f\u5f15\u65706\u3064\u3068\u304b\u3001\u982d\u304a\u304b\u3057\u3044\u3067\u3059\u3002\u898b\u306b\u304f\u3044\u3057\u3002\n\u3067\u3082\u3001\u30ec\u30ad\u30b7\u30ab\u30eb\u306b\u675f\u7e1b\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u3046\u3059\u308b\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002\n\u5f15\u6570\u304c\u5897\u3048\u308b\u3068\u3001sbcl\u3067\u306f\u305f\u3068\u3048\u672b\u5c3e\u518d\u5e30\u3067\u3082\u30ec\u30b8\u30b9\u30bf\u306b\u4e57\u3089\u306a\u3044\u306e\u3067\u3001\n(cf. http://www.sbcl.org/sbcl-internals/Full-Calls.html#Full-Calls )\n\u3069\u308c\u304f\u3089\u3044\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u60aa\u5316\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n(\u30ec\u30b8\u30b9\u30bf\u306b\u4e57\u3089\u305a\u30b9\u30bf\u30c3\u30af\u306b\u8f09\u308b\u3068\u3044\u3046\u4e8b\u306f\u3001\n\u307e\u3042\u30d2\u30fc\u30d7\u306b\u306f\u5165\u3089\u306a\u3044\u3082\u306e\u306e\u30e1\u30e2\u30ea\u306e\u307b\u3046\u306b\u78ba\u4fdd\u3055\u308c\u308b\u3068\u3044\u3046\u4e8b\u3067\u3059\u3088\u306d\uff1f\n\u9593\u9055\u3063\u3066\u305f\u3089\u3059\u307f\u307e\u305b\u3093\u3002)\n\nBinding special variables\n\u305d\u3053\u3067\u8003\u3048\u305f\u4ed6\u306e\u624b\u6cd5\u3002\u3072\u3068\u3064\u3081\u306f\u3001special variable \u306b bind \u3059\u308b\u3053\u3068\u3002\n(defun parse-domain-def (name body)\n  ;; special variable, used in \n  ;; the initialization of subclause objects.\n  (let ((*domain* (pddl-domain :name name)))\n    (macrolet ((body-domain (accessor)\n         `(setf (,accessor *domain*)\n            (,(concatenate-symbols 'parse accessor) body))))\n      (body-domain requirements)\n      (body-domain types)\n      (body-domain predicates)\n      (body-domain constants)\n      (body-domain functions)\n      (body-domain actions)\n      (body-domain durative-actions)\n      (body-domain derived-predicates))\n    *domain*))\n\n(\u3053\u308c\u3067\u79c1\u306e\u7814\u7a76\u5206\u91ce\u304c\u308f\u304b\u3063\u305f\u4eba\u3082\u3044\u308b\u306f\u305a\u3002\u3002\u3002)\n\u3053\u3046\u3059\u308c\u3070\u3001\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u4e0a\u306e\u65b9\u306e\u95a2\u6570\u306f\u3001\n\u5f15\u6570\u3068\u3057\u3066 domain \u3092\u6e21\u3055\u308c\u308b\u3053\u3068\u306a\u304f\u3001\n\u73fe\u5728\u30d1\u30fc\u30b9\u4e2d\u306e\u30c9\u30e1\u30a4\u30f3 domain \u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001\u305d\u306e\u3076\u3093\u5bc6\u7d50\u5408\u306b\u306a\u308a\u307e\u3059\u3002\n(\u3053\u308c\u3001\u5f8c\u3067\u30b9\u30ec\u30c3\u30c9\u4e26\u5217\u5316\u3059\u308b\u3068\u304d\u306b\u30b9\u30b4\u30a4\u5fc3\u914d\u3060\u3063\u305f\u3093\u3067\u3059\u304c\u3001\nspecial\u5909\u6570\u3067\u3082 let\u3067\u30d0\u30a4\u30f3\u30c9\u3059\u308c\u3070 \u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306b\u72ec\u7acb\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u308b\u3093\u3067\u3059\u306d\u3002\u3088\u304b\u3063\u305f\u3002)\n\nEmulate bindings with restart system\n\u307b\u304b\u306e\u624b\u6cd5\u306f\u3001restart\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3002\n\u3064\u307e\u308a\u3001\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u4e0a\u304b\u3089\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u4e0b\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001\n\u6bce\u56derestart-bind\u306e\u4e2d\u304b\u3089error\u3092\u6295\u3052\u3066\u3001\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u4e0b\u307e\u3067\u623b\u308b\u3002\n\u547c\u3073\u51fa\u3057\u5143\u306e\u30cf\u30f3\u30c9\u30e9\u304c\u3053\u308c\u3092\u53d7\u3051\u3066\u3001restart-handler\u3092\u76ee\u7684\u306e\u5024\u3092\u5f15\u6570\u306b\u547c\u3073\u51fa\u3059\u3002\n\u3053\u308c\u306f\u3001\u547c\u3073\u51fa\u3057\u5143\u3092\u307e\u3060\u4f5c\u3063\u3066\u3044\u306a\u3044\u6642\u3084\u3001\u4f55\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3068\u304d\u306b\u6709\u52b9\u3002\n(defun callee-fun ()\n  (restart-case\n      (error 'need-value)\n    (use-value (val)\n      val)))\n\n;; case 1, direct call\n(defun caller-fun1 ()\n  (handler-bind ((need-value\n                  (lambda ()\n                    (use-value 1))))\n    (callee-fun)))\n\n;; nested calls ...\n(defun caller-fun2 (n)\n  (print n)\n  (print (callee-fun)))\n\n(defun caller-fun3 (list)\n  (do-this list)\n  (do-that list)\n  (mapcar #'caller-fun2 list))\n\n;; ...\n\n(defun caller-fun100 ()\n  (handler-bind ((need-value\n                  (lambda ()\n                    (use-value 2))))\n    (caller-fun99)))\n\n\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u9014\u4e2d\u306b\u4e00\u3064\u3067\u3082handler\u304c\u3044\u308c\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\n\u3060\u304b\u3089\u3001\u518d\u5e30\u3092\u4f7f\u3063\u3066\u3044\u308b\u6642\u3067\u3082\u7c21\u5358\u306b\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002\nhandler\u3092\u5143\u306b\u4f5c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305f\u3068\u3048\u3070 default handler \u3084\u3001\nrestart-bind \u306e :test-function \u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u30cd\u30c3\u30af\u306f\u901f\u5ea6\u3067\u3057\u3087\u3046\u304b\u3002restart\u306e\u5b9f\u88c5\u3063\u3066\u3042\u307e\u308a\u8a71\u984c\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u305f\u3076\u3093restart system\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u304c\u5c11\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u3082\u3063\u3068\u4f7f\u3048\u3070\u3044\u3044\u306e\u306b\u3002\n\u3042\u3068\u306f\u3001handler\u3092\u8cbc\u308c\u308b\u6570\u306b\u5236\u9650\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3053\u3053\u3067\u8272\u3005\u3068\u601d\u3046\u306e\u306f\u3001\u591a\u5206ML\u7cfb\u8a00\u8a9e\u306e\u4eba\u306f\u3001\n\u9577\u3044\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u4ee3\u308f\u308a\u306b\u578b\u3068\u3044\u3046\u304b\u69cb\u9020\u4f53\u3092\u4f5c\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3042\u307e\u308a\u554f\u984c\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3001\u3068\u304b\u3002(\u30db\u30f3\u30c8?)\n\u3057\u304b\u3057\u4eca\u306e\u6240cl\u306f\u9045\u5ef6\u8a55\u4fa1\u306b\u3064\u3044\u3066(\u30de\u30af\u30ed\u3067\u5b9f\u73fe\u306f\u3067\u304d\u308b\u304c)\u305d\u3093\u306a\u306b\u52b9\u7387\u826f\u304f\u306f\u306a\u308c\u306a\u3044\u3057\u306a\u3042\u3001\u3068\u304b\u3002\n\n\u304a\u307e\u3051\u3001Restart utility\n\u305d\u3093\u306a\u3053\u3093\u306a\u3067\u983b\u7e41\u306brestart\u3092\u4f7f\u3046\u79c1\u306f\u3001\u3053\u3093\u306a\u30de\u30af\u30ed\u3092\u4f7f\u3063\u3066\u307e\u3059\u3002\n\u4e00\u3064\u76ee\u306frestart-return\u3001\u3053\u308c\u306frestart-case\u306e\u69cb\u6587\u304crestart-bind\u3068\u9055\u3046\u306e\u304c\u975e\u5e38\u306b\u6c17\u306b\u5165\u3089\u305a\u3001\u66f8\u3044\u305f\u3082\u306e\u3002\n(defmacro restart-return (bindings &body body)\n  (with-gensyms (block-name)\n    (let ((bindings2\n           (mapcar\n            (lambda (binding)\n              (destructuring-bind\n                    (name function . key-value-pair)\n                  binding\n                (with-gensyms (fn-name rest)\n                  (list `(,fn-name\n                          (&rest ,rest)\n                          (return-from ,block-name\n                            (apply #',function ,rest)))\n                        `(,name (lambda (&rest ,rest)\n                                  (apply #',fn-name ,rest))\n                                ,@key-value-pair)))))\n            bindings)))\n      `(block ,block-name\n         (flet ,(mapcar #'first bindings2)\n           (restart-bind\n               ,(mapcar #'second bindings2)\n             ,@body))))))\n\n\u3042\u3068\u306fdo-restart\u3001\u3053\u308c\u306fretry\u7cfb\u306e\u66f8\u304d\u65b9\u3092\u4f55\u5ea6\u3082\u3059\u308b\u306e\u304c\u5acc\u3067\u5165\u308c\u305f\u3002\n(defmacro do-restart (bindings &body body)\n  (with-gensyms (start)\n    `(tagbody\n        ,start\n        (block nil\n          (restart-bind\n              ,(mapcar\n                (lambda (binding)\n                  (destructuring-bind\n                        (name function . key-value-pair)\n                      binding\n                    (with-gensyms (rest)\n                      `(,name (lambda (&rest ,rest)\n                                (prog1\n                                    (apply ,function ,rest)\n                                  (go ,start)))\n                              ,@key-value-pair))))\n                bindings)\n            ,@body)))))\n\n\u4f7f\u3044\u9053\u3068\u3057\u3066\u306f\n(do-restart ((retry (lambda (c) (print :retry)))\n         (continue (lambda (c) (print :retry))))\n  (error \"error!\"))\n\n\u66f8\u304d\u6368\u3066\u5fa1\u514d\uff01\n\u6ce8: \u3053\u306e\u8a18\u4e8b\u306f\u65e2\u306b\u518d\u5e30\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3053\u3068\u306b\u62b5\u6297\u304c\u306a\u3044\u4eba\u5411\u3051\u306e\u8a18\u4e8b\u3067\u3059\n\n\u50d5\u306f\u3088\u304f\u518d\u5e30\u3092\u66f8\u304d\u307e\u3059\u3002\u3067\u304b\u3044\u95a2\u6570\u306e\u5834\u5408\u3001\u7279\u306b\u3088\u304f\u518d\u5e30\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u57fa\u672c\u7684\u306b\u3001\u6a2a\u306b80\u6587\u5b57\u4ee5\u4e0a\u3001\u7e26\u306b20\u884c\u4ee5\u4e0a\u3042\u308b\u95a2\u6570\u306f\u66f8\u304d\u305f\u304f\u306a\u3044\u306e\u3067\u3001\n\u679d\u5206\u304b\u308c\u306e\u5148\u3092\u518d\u5e30\u3092\u4f7f\u3063\u3066\u3069\u3093\u3069\u3093\u5206\u96e2\u3057\u307e\u3059\u3002\n\u6700\u8fd1\u66f8\u3044\u3066\u308b\u30b3\u30fc\u30c9\u306e\u4f8b\u3067\u8a00\u3046\u3068\u3053\u3093\u306a\u304b\u3093\u3058\u3002(\u4f55\u306e\u30b3\u30fc\u30c9\u3067\u3057\u3087\u3046?)\n\n``` cl\n(defun %insert-state-rec (aa duration rest acc)\n  (match rest\n    ((list* (and ts (timed-state state time)) rest2)\n     (if (applicable state aa)\n         (if rest2\n             (%insert-state-inner\n              aa duration ts (+ time duration) rest2 (cons ts acc))\n             (%insert-state-finish aa duration ts (cons ts acc)))\n         (%insert-state-rec aa duration rest2 (cons ts acc))))\n    (nil (%debug-insert-failure aa rest acc))))\n\n(defun %insert-state-inner (aa duration earliest end rest acc)\n  (ematch rest\n    ((list* (and ts2 (timed-state state time)) rest2)\n     (cond\n       ((<= time end)\n        (if (applicable state aa)\n            (if rest2\n                (%insert-state-inner aa duration earliest end rest2 (cons ts2 acc))\n                (%insert-state-mergedto aa earliest duration (cons ts2 acc)))\n            (%insert-state-rec aa duration rest2 (cons ts2 acc))))\n       ((< end time)\n        (if-let ((merged (%check-after-end-time aa end rest acc)))\n          (%insert-state-merge aa duration earliest merged acc)\n          (%insert-state-rec aa duration rest acc)))))))\n```\n\n(optima\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u518d\u5e30\u95a2\u6570\u306flabels\u3067\u306f\u306a\u304f\u5206\u3051\u3066\u66f8\u3044\u3066\u307e\u3059\u3002\n\u540d\u524d\u306b\u306f%\u3092\u3064\u3051\u3066\u518d\u5e30\u95a2\u6570\u3060\u3068\u308f\u304b\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u672c\u756a\u3067\u306finline\u5ba3\u8a00\u3059\u308b\u3002)\n\n \u3053\u306e\u624b\u6cd5\u306f\u3001\n\n+ \u30c7\u30d0\u30c3\u30b0\u3092break\u3067\u306f\u306a\u304f\u3066trace\u3067\u884c\u3048\u305f\u308a\u3001\n+ profile \u304c\u3067\u304d\u305f\u308a\u3001\n+ \u672b\u5c3e\u518d\u5e30\u306a\u306e\u3067\u6700\u9069\u5316\u51fa\u6765\u305f\u308a\n\n\u3068\u500b\u4eba\u7684\u306b\u306f\u4f7f\u3044\u3084\u3059\u3044\u306e\u3067\u3059\u304c\u3001\u30cd\u30c3\u30af\u306f *\u5f15\u6570\u306e\u6570\u304c\u3069\u3093\u3069\u3093\u5897\u3048\u308b\u3053\u3068* \u3067\u3059\u3002\n\u4e0a\u306e\u4f8b\u3067\u306f\u5f15\u65706\u3064\u3068\u304b\u3001\u982d\u304a\u304b\u3057\u3044\u3067\u3059\u3002\u898b\u306b\u304f\u3044\u3057\u3002\n\u3067\u3082\u3001\u30ec\u30ad\u30b7\u30ab\u30eb\u306b\u675f\u7e1b\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u3046\u3059\u308b\u3057\u304b\u3042\u308a\u307e\u305b\u3093\u3002\n\u5f15\u6570\u304c\u5897\u3048\u308b\u3068\u3001sbcl\u3067\u306f\u305f\u3068\u3048\u672b\u5c3e\u518d\u5e30\u3067\u3082\u30ec\u30b8\u30b9\u30bf\u306b\u4e57\u3089\u306a\u3044\u306e\u3067\u3001\n(cf. http://www.sbcl.org/sbcl-internals/Full-Calls.html#Full-Calls )\n\u3069\u308c\u304f\u3089\u3044\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u60aa\u5316\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n(\u30ec\u30b8\u30b9\u30bf\u306b\u4e57\u3089\u305a\u30b9\u30bf\u30c3\u30af\u306b\u8f09\u308b\u3068\u3044\u3046\u4e8b\u306f\u3001\n\u307e\u3042\u30d2\u30fc\u30d7\u306b\u306f\u5165\u3089\u306a\u3044\u3082\u306e\u306e\u30e1\u30e2\u30ea\u306e\u307b\u3046\u306b\u78ba\u4fdd\u3055\u308c\u308b\u3068\u3044\u3046\u4e8b\u3067\u3059\u3088\u306d\uff1f\n\u9593\u9055\u3063\u3066\u305f\u3089\u3059\u307f\u307e\u305b\u3093\u3002)\n\n# Binding special variables\n\n\u305d\u3053\u3067\u8003\u3048\u305f\u4ed6\u306e\u624b\u6cd5\u3002\u3072\u3068\u3064\u3081\u306f\u3001special variable \u306b bind \u3059\u308b\u3053\u3068\u3002\n\n``` cl\n(defun parse-domain-def (name body)\n  ;; special variable, used in \n  ;; the initialization of subclause objects.\n  (let ((*domain* (pddl-domain :name name)))\n    (macrolet ((body-domain (accessor)\n\t\t `(setf (,accessor *domain*)\n\t\t\t(,(concatenate-symbols 'parse accessor) body))))\n      (body-domain requirements)\n      (body-domain types)\n      (body-domain predicates)\n      (body-domain constants)\n      (body-domain functions)\n      (body-domain actions)\n      (body-domain durative-actions)\n      (body-domain derived-predicates))\n    *domain*))\n```\n(\u3053\u308c\u3067\u79c1\u306e\u7814\u7a76\u5206\u91ce\u304c\u308f\u304b\u3063\u305f\u4eba\u3082\u3044\u308b\u306f\u305a\u3002\u3002\u3002)\n\n\u3053\u3046\u3059\u308c\u3070\u3001\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u4e0a\u306e\u65b9\u306e\u95a2\u6570\u306f\u3001\n\u5f15\u6570\u3068\u3057\u3066 *domain* \u3092\u6e21\u3055\u308c\u308b\u3053\u3068\u306a\u304f\u3001\n\u73fe\u5728\u30d1\u30fc\u30b9\u4e2d\u306e\u30c9\u30e1\u30a4\u30f3 *domain* \u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u305f\u3060\u3057\u3001\u305d\u306e\u3076\u3093\u5bc6\u7d50\u5408\u306b\u306a\u308a\u307e\u3059\u3002\n(\u3053\u308c\u3001\u5f8c\u3067\u30b9\u30ec\u30c3\u30c9\u4e26\u5217\u5316\u3059\u308b\u3068\u304d\u306b\u30b9\u30b4\u30a4\u5fc3\u914d\u3060\u3063\u305f\u3093\u3067\u3059\u304c\u3001\nspecial\u5909\u6570\u3067\u3082 *let\u3067\u30d0\u30a4\u30f3\u30c9\u3059\u308c\u3070* \u30b9\u30ec\u30c3\u30c9\u3054\u3068\u306b\u72ec\u7acb\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u308b\u3093\u3067\u3059\u306d\u3002\u3088\u304b\u3063\u305f\u3002)\n\n# Emulate bindings with restart system\n\n\u307b\u304b\u306e\u624b\u6cd5\u306f\u3001restart\u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3002\n\u3064\u307e\u308a\u3001\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u4e0a\u304b\u3089\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u4e0b\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001\n\u6bce\u56derestart-bind\u306e\u4e2d\u304b\u3089error\u3092\u6295\u3052\u3066\u3001\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u4e0b\u307e\u3067\u623b\u308b\u3002\n\u547c\u3073\u51fa\u3057\u5143\u306e\u30cf\u30f3\u30c9\u30e9\u304c\u3053\u308c\u3092\u53d7\u3051\u3066\u3001restart-handler\u3092\u76ee\u7684\u306e\u5024\u3092\u5f15\u6570\u306b\u547c\u3073\u51fa\u3059\u3002\n\n\u3053\u308c\u306f\u3001\u547c\u3073\u51fa\u3057\u5143\u3092\u307e\u3060\u4f5c\u3063\u3066\u3044\u306a\u3044\u6642\u3084\u3001\u4f55\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3068\u304d\u306b\u6709\u52b9\u3002\n\n```cl\n(defun callee-fun ()\n  (restart-case\n      (error 'need-value)\n    (use-value (val)\n      val)))\n\n;; case 1, direct call\n(defun caller-fun1 ()\n  (handler-bind ((need-value\n                  (lambda ()\n                    (use-value 1))))\n    (callee-fun)))\n\n;; nested calls ...\n(defun caller-fun2 (n)\n  (print n)\n  (print (callee-fun)))\n\n(defun caller-fun3 (list)\n  (do-this list)\n  (do-that list)\n  (mapcar #'caller-fun2 list))\n  \n;; ...\n\n(defun caller-fun100 ()\n  (handler-bind ((need-value\n                  (lambda ()\n                    (use-value 2))))\n    (caller-fun99)))\n```\n\n\u30b3\u30fc\u30eb\u30b9\u30bf\u30c3\u30af\u306e\u9014\u4e2d\u306b\u4e00\u3064\u3067\u3082handler\u304c\u3044\u308c\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\n\u3060\u304b\u3089\u3001\u518d\u5e30\u3092\u4f7f\u3063\u3066\u3044\u308b\u6642\u3067\u3082\u7c21\u5358\u306b\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002\nhandler\u3092\u5143\u306b\u4f5c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305f\u3068\u3048\u3070 default handler \u3084\u3001\nrestart-bind \u306e :test-function \u3092\u6d3b\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\u30cd\u30c3\u30af\u306f\u901f\u5ea6\u3067\u3057\u3087\u3046\u304b\u3002restart\u306e\u5b9f\u88c5\u3063\u3066\u3042\u307e\u308a\u8a71\u984c\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u305f\u3076\u3093restart system\u3092\u4f7f\u3063\u3066\u3044\u308b\u4eba\u304c\u5c11\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u3082\u3063\u3068\u4f7f\u3048\u3070\u3044\u3044\u306e\u306b\u3002\n\u3042\u3068\u306f\u3001handler\u3092\u8cbc\u308c\u308b\u6570\u306b\u5236\u9650\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u3053\u3053\u3067\u8272\u3005\u3068\u601d\u3046\u306e\u306f\u3001\u591a\u5206ML\u7cfb\u8a00\u8a9e\u306e\u4eba\u306f\u3001\n\u9577\u3044\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u4ee3\u308f\u308a\u306b\u578b\u3068\u3044\u3046\u304b\u69cb\u9020\u4f53\u3092\u4f5c\u3063\u3066\u3057\u307e\u3046\u304b\u3089\u3042\u307e\u308a\u554f\u984c\u306b\u306a\u3089\u306a\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3001\u3068\u304b\u3002(\u30db\u30f3\u30c8?)\n\u3057\u304b\u3057\u4eca\u306e\u6240cl\u306f\u9045\u5ef6\u8a55\u4fa1\u306b\u3064\u3044\u3066(\u30de\u30af\u30ed\u3067\u5b9f\u73fe\u306f\u3067\u304d\u308b\u304c)\u305d\u3093\u306a\u306b\u52b9\u7387\u826f\u304f\u306f\u306a\u308c\u306a\u3044\u3057\u306a\u3042\u3001\u3068\u304b\u3002\n\n# \u304a\u307e\u3051\u3001Restart utility\n\n\u305d\u3093\u306a\u3053\u3093\u306a\u3067\u983b\u7e41\u306brestart\u3092\u4f7f\u3046\u79c1\u306f\u3001\u3053\u3093\u306a\u30de\u30af\u30ed\u3092\u4f7f\u3063\u3066\u307e\u3059\u3002\n\u4e00\u3064\u76ee\u306frestart-return\u3001\u3053\u308c\u306frestart-case\u306e\u69cb\u6587\u304crestart-bind\u3068\u9055\u3046\u306e\u304c\u975e\u5e38\u306b\u6c17\u306b\u5165\u3089\u305a\u3001\u66f8\u3044\u305f\u3082\u306e\u3002\n\n```cl\n(defmacro restart-return (bindings &body body)\n  (with-gensyms (block-name)\n    (let ((bindings2\n           (mapcar\n            (lambda (binding)\n              (destructuring-bind\n                    (name function . key-value-pair)\n                  binding\n                (with-gensyms (fn-name rest)\n                  (list `(,fn-name\n                          (&rest ,rest)\n                          (return-from ,block-name\n                            (apply #',function ,rest)))\n                        `(,name (lambda (&rest ,rest)\n                                  (apply #',fn-name ,rest))\n                                ,@key-value-pair)))))\n            bindings)))\n      `(block ,block-name\n         (flet ,(mapcar #'first bindings2)\n           (restart-bind\n               ,(mapcar #'second bindings2)\n             ,@body))))))\n```\n\n\u3042\u3068\u306fdo-restart\u3001\u3053\u308c\u306fretry\u7cfb\u306e\u66f8\u304d\u65b9\u3092\u4f55\u5ea6\u3082\u3059\u308b\u306e\u304c\u5acc\u3067\u5165\u308c\u305f\u3002\n\n```cl\n(defmacro do-restart (bindings &body body)\n  (with-gensyms (start)\n    `(tagbody\n        ,start\n        (block nil\n          (restart-bind\n              ,(mapcar\n                (lambda (binding)\n                  (destructuring-bind\n                        (name function . key-value-pair)\n                      binding\n                    (with-gensyms (rest)\n                      `(,name (lambda (&rest ,rest)\n                                (prog1\n                                    (apply ,function ,rest)\n                                  (go ,start)))\n                              ,@key-value-pair))))\n                bindings)\n            ,@body)))))\n```\n\n\u4f7f\u3044\u9053\u3068\u3057\u3066\u306f\n\n``` cl\n(do-restart ((retry (lambda (c) (print :retry)))\n         (continue (lambda (c) (print :retry))))\n  (error \"error!\"))\n```\n\n\u66f8\u304d\u6368\u3066\u5fa1\u514d\uff01"}