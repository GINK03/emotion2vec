{"context": " More than 1 year has passed since last update.\u9045\u5ef6\u8a55\u4fa1\u4fbf\u5229\u3067\u3059\u3088\u306d\uff0e\n\u7279\u306bGauche \u306e\u5834\u5408\u306futil.stream \u30e9\u30a4\u30d6\u30e9\u30ea\u3067stream- \u3092\u30d7\u30ea\u30d5\u30a3\u30c3\u30af\u30b9\u306b\u3064\u3051\u308c\u3070SRFI-1(\u666e\u901a\u306e\u30ea\u30b9\u30c8) \u3068\u540c\u3058\u3088\u3046\u306b\u9045\u5ef6\u8a55\u4fa1\u306a\u30ea\u30b9\u30c8\u3092\u6271\u3048\u307e\u3059\uff0e\n\u305f\u3060\uff0c\u9045\u5ef6\u8a55\u4fa1\u306e\u918d\u9190\u5473(?) \u3067\u3042\u308b\u7121\u9650\u30ea\u30b9\u30c8\u3092\u6271\u304a\u3046\u3068\u3059\u308b\u3068\u3061\u3087\u3063\u3068\u5384\u4ecb\u306a\u3053\u3068\u304c\uff0e\n\u4f8b\u3048\u3070\uff0c\u3042\u308b\u6761\u4ef6\u3092\u6e80\u8db3\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308bstream-find \u3067\u305d\u306e\u3088\u3046\u306a\u8981\u7d20\u304c\u30ea\u30b9\u30c8\u4e2d\u306b\u5b58\u5728\u3057\u306a\u3044\u3068\u304d\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u505c\u6b62\u3057\u307e\u305b\u3093\uff0e\n\u2026\u2026\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u305f\u3044\u306e\u306b\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u4f7f\u3048\u306a\u3044\u306a\u3093\u3066\u672c\u672b\u8ee2\u5012\u3067\u306f\u306a\u3044\u304b\uff01\uff01\n\u3068\uff0c\u3044\u3046\u3053\u3068\u3067stream-find \u306b\u505c\u6b62\u6761\u4ef6\u3092\u3064\u3051\u305fstream-find-while \u3092\u4f8b\u306eProject Euler \u7528\u81ea\u4f5c\u30e9\u30a4\u30d6\u30e9\u30ea( https://github.com/kazh98/AOJ/blob/master/projectEuler/scythe.scm ) \u306b\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\n\u5b9f\u88c5\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n(use util.stream)\n\n;; \u9045\u5ef6\u8a55\u4fa1\u30ea\u30b9\u30c8lis \u306e\u5148\u982d\u304b\u3089\u9806\u306b\u8ff0\u8a9econt? \u3092\u9069\u7528\u3057\u3066\u771f\u3068\u306a\u308b\u9023\u7d9a\u3057\u305f\u7bc4\u56f2\u306e\u3046\u3061\uff0c\n;; \u8ff0\u8a9epred \u3092\u6e80\u8db3\u3059\u308b\u8981\u7d20\u3092\u63a2\u7d22\u3059\u308b\uff0e\n;; \u8981\u7d20\u304c\u898b\u3064\u304b\u308c\u3070\u305d\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\uff0c\u305d\u3046\u3067\u306a\u3051\u308c\u3070#f \u3092\u8fd4\u3059\uff0e\n(define (stream-find-while cont? pred lis)\n  (cond\n    ((or (stream-null? lis)\n         (not (cont? (stream-car lis)))) #f)\n    ((pred (stream-car lis)) (stream-car lis))\n    (else (stream-find-while cont? pred (stream-cdr lis)))))\n\n\u3064\u307e\u308a\uff0c(stream-find pred (stream-take-while cont? lis)) \u3068\u540c\u7b49\u306a\u611f\u3058\u3067\u3059\u306d\uff0epred \u3092\u6e80\u8db3\u3059\u308b\u8981\u7d20\u304c\u30ea\u30b9\u30c8\u306e\u524d\u306e\u65b9\u306b\u73fe\u308c\u305f\u3068\u304d\u306b\u505c\u6b62\u307e\u3067\u306e\u51e6\u7406\u6642\u9593\u304c\u82e5\u5e72\u4eca\u56de\u4f5c\u3063\u305f\u307b\u3046\u304c(\u7406\u8ad6\u4e0a\u306f)\u65e9\u3044\u611f\u3058\u3067\u3059\uff0e\n\u4e3b\u306b\u30ea\u30b9\u30c8lis \u304c\u6607\u9806(\u307e\u305f\u306f\u964d\u9806) \u3067\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306b\u7d50\u69cb\u5f79\u306b\u7acb\u3064\u95a2\u6570\u3060\u3068\u601d\u3044\u307e\u3059\uff0e\n\u6607\u9806\u30bf\u30d7\u30eblis \u306b\u6570\u502430 \u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u306a\u3089\uff0c\n(stream-find-while (cut <= <> 30) (cut = <> 30) lis)\n\n\u3068\u304b\u3044\u3046\u611f\u3058\u3067\u304b\u3051\u307e\u3059\uff0e\n\u4eca\u56de\u306f(\u9762\u5012\u3060\u3063\u305f\u306e\u3067) stream-member-while \u306f\u5b9f\u88c5\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\uff0cstream-find-while \u306e\u30e9\u30c3\u30d1\u3068\u3057\u3066\u66f8\u3051\u3070\u3059\u3050\u5b9f\u88c5\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n(define (stream-member-while cont? obj lis :optional (=? equal?))\n  (stream-find-while cont? (cut =? <> obj) lis))\n\n\u2026\u2026\u3068\u601d\u3063\u305f\u3089\u66f8\u3051\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\n\u4f7f\u3046\u6a5f\u4f1a\u306f\u591a\u305d\u3046\u3067\u3059\u304c\u3042\u307e\u308a\u5f97\u3057\u306a\u3044(\u305b\u3044\u305c\u3044\u4e00\u81f4\u5224\u5b9a\u304c\u5fae\u5999\u306b\u77ed\u304f\u306a\u308b\u3060\u3051\u306a) \u611f\u3058\u304c\u3059\u308b\u306e\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u8ffd\u52a0\u306f\u898b\u9001\u308d\u3046\u304b\u306a\u3041\u2026\u2026\n\u307e\u3041\uff0c\u305d\u3093\u306a\u8a71\u3067\u3057\u305f\uff0e\n\u9045\u5ef6\u8a55\u4fa1\u4fbf\u5229\u3067\u3059\u3088\u306d\uff0e\n\u7279\u306bGauche \u306e\u5834\u5408\u306futil.stream \u30e9\u30a4\u30d6\u30e9\u30ea\u3067stream- \u3092\u30d7\u30ea\u30d5\u30a3\u30c3\u30af\u30b9\u306b\u3064\u3051\u308c\u3070SRFI-1(\u666e\u901a\u306e\u30ea\u30b9\u30c8) \u3068\u540c\u3058\u3088\u3046\u306b\u9045\u5ef6\u8a55\u4fa1\u306a\u30ea\u30b9\u30c8\u3092\u6271\u3048\u307e\u3059\uff0e\n\u305f\u3060\uff0c\u9045\u5ef6\u8a55\u4fa1\u306e\u918d\u9190\u5473(?) \u3067\u3042\u308b\u7121\u9650\u30ea\u30b9\u30c8\u3092\u6271\u304a\u3046\u3068\u3059\u308b\u3068\u3061\u3087\u3063\u3068\u5384\u4ecb\u306a\u3053\u3068\u304c\uff0e\n\u4f8b\u3048\u3070\uff0c\u3042\u308b\u6761\u4ef6\u3092\u6e80\u8db3\u3059\u308b\u8981\u7d20\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308bstream-find \u3067\u305d\u306e\u3088\u3046\u306a\u8981\u7d20\u304c\u30ea\u30b9\u30c8\u4e2d\u306b\u5b58\u5728\u3057\u306a\u3044\u3068\u304d\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u505c\u6b62\u3057\u307e\u305b\u3093\uff0e\n\u2026\u2026\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u305f\u3044\u306e\u306b\u5b58\u5728\u3057\u306a\u3051\u308c\u3070\u4f7f\u3048\u306a\u3044\u306a\u3093\u3066\u672c\u672b\u8ee2\u5012\u3067\u306f\u306a\u3044\u304b\uff01\uff01\n\n\u3068\uff0c\u3044\u3046\u3053\u3068\u3067stream-find \u306b\u505c\u6b62\u6761\u4ef6\u3092\u3064\u3051\u305fstream-find-while \u3092\u4f8b\u306eProject Euler \u7528\u81ea\u4f5c\u30e9\u30a4\u30d6\u30e9\u30ea( https://github.com/kazh98/AOJ/blob/master/projectEuler/scythe.scm ) \u306b\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\n\u5b9f\u88c5\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n\n```scheme\n(use util.stream)\n\n;; \u9045\u5ef6\u8a55\u4fa1\u30ea\u30b9\u30c8lis \u306e\u5148\u982d\u304b\u3089\u9806\u306b\u8ff0\u8a9econt? \u3092\u9069\u7528\u3057\u3066\u771f\u3068\u306a\u308b\u9023\u7d9a\u3057\u305f\u7bc4\u56f2\u306e\u3046\u3061\uff0c\n;; \u8ff0\u8a9epred \u3092\u6e80\u8db3\u3059\u308b\u8981\u7d20\u3092\u63a2\u7d22\u3059\u308b\uff0e\n;; \u8981\u7d20\u304c\u898b\u3064\u304b\u308c\u3070\u305d\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\uff0c\u305d\u3046\u3067\u306a\u3051\u308c\u3070#f \u3092\u8fd4\u3059\uff0e\n(define (stream-find-while cont? pred lis)\n  (cond\n    ((or (stream-null? lis)\n         (not (cont? (stream-car lis)))) #f)\n    ((pred (stream-car lis)) (stream-car lis))\n    (else (stream-find-while cont? pred (stream-cdr lis)))))\n```\n\n\u3064\u307e\u308a\uff0c(stream-find pred (stream-take-while cont? lis)) \u3068\u540c\u7b49\u306a\u611f\u3058\u3067\u3059\u306d\uff0epred \u3092\u6e80\u8db3\u3059\u308b\u8981\u7d20\u304c\u30ea\u30b9\u30c8\u306e\u524d\u306e\u65b9\u306b\u73fe\u308c\u305f\u3068\u304d\u306b\u505c\u6b62\u307e\u3067\u306e\u51e6\u7406\u6642\u9593\u304c\u82e5\u5e72\u4eca\u56de\u4f5c\u3063\u305f\u307b\u3046\u304c(\u7406\u8ad6\u4e0a\u306f)\u65e9\u3044\u611f\u3058\u3067\u3059\uff0e\n\u4e3b\u306b\u30ea\u30b9\u30c8lis \u304c\u6607\u9806(\u307e\u305f\u306f\u964d\u9806) \u3067\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u306b\u7d50\u69cb\u5f79\u306b\u7acb\u3064\u95a2\u6570\u3060\u3068\u601d\u3044\u307e\u3059\uff0e\n\u6607\u9806\u30bf\u30d7\u30eblis \u306b\u6570\u502430 \u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u306a\u3089\uff0c\n\n```scheme\n(stream-find-while (cut <= <> 30) (cut = <> 30) lis)\n```\n\n\u3068\u304b\u3044\u3046\u611f\u3058\u3067\u304b\u3051\u307e\u3059\uff0e\n\u4eca\u56de\u306f(\u9762\u5012\u3060\u3063\u305f\u306e\u3067) stream-member-while \u306f\u5b9f\u88c5\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\uff0cstream-find-while \u306e\u30e9\u30c3\u30d1\u3068\u3057\u3066\u66f8\u3051\u3070\u3059\u3050\u5b9f\u88c5\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n```scheme\n(define (stream-member-while cont? obj lis :optional (=? equal?))\n  (stream-find-while cont? (cut =? <> obj) lis))\n```\n\n\u2026\u2026\u3068\u601d\u3063\u305f\u3089\u66f8\u3051\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0e\n\u4f7f\u3046\u6a5f\u4f1a\u306f\u591a\u305d\u3046\u3067\u3059\u304c\u3042\u307e\u308a\u5f97\u3057\u306a\u3044(\u305b\u3044\u305c\u3044\u4e00\u81f4\u5224\u5b9a\u304c\u5fae\u5999\u306b\u77ed\u304f\u306a\u308b\u3060\u3051\u306a) \u611f\u3058\u304c\u3059\u308b\u306e\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u8ffd\u52a0\u306f\u898b\u9001\u308d\u3046\u304b\u306a\u3041\u2026\u2026\n\u307e\u3041\uff0c\u305d\u3093\u306a\u8a71\u3067\u3057\u305f\uff0e", "tags": ["Scheme", "Gauche"]}