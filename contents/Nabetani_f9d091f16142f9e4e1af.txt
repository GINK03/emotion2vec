{"context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\u3092\u3084\u308b\u30a4\u30d9\u30f3\u30c8\u7b2c\u4e8c\u56de\nhttp://atnd.org/events/30900\n\u306e\u3001\u53c2\u8003\u554f\u984c\nhttp://qiita.com/items/9d80de41903775296ca6\n\u306e\u89e3\u7b54\u4f8b\u3002C\u8a00\u8a9e(C99)\u3067\u3002\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define ENDOF(x) (x+sizeof(x)/sizeof(*(x)))\n\ntypedef struct data_t\n{\n  char const * src;\n  char const * expected;\n} data_t;\n\ndata_t data[]={\n  {\"3:5b8\",\"3:de0\"},\n  {\"1:8\",\"1:8\"},\n  {\"2:8\",\"2:4\"},\n  {\"2:4\",\"2:1\"},\n  {\"2:1\",\"2:2\"},\n  {\"3:5d0\",\"3:5d0\"},\n  {\"4:1234\",\"4:0865\"},\n  {\"5:22a2a20\",\"5:22a2a20\"},\n  {\"5:1234567\",\"5:25b0540\"},\n  {\"6:123456789\",\"6:09cc196a6\"},\n  {\"7:123456789abcd\",\"7:f1a206734b258\"},\n  {\"7:fffffffffffff\",\"7:ffffffffffff8\"},\n  {\"7:fdfbf7efdfbf0\",\"7:ffffffffffc00\"},\n  {\"8:123456789abcdef1\",\"8:f0ccaaff78665580\"},\n  {\"9:112233445566778899aab\",\"9:b23da9011d22daf005d40\"},\n};\n\nvoid clear_bits( char * rs )\n{\n  for( char * p=rs ; *p ; ++p ){\n    *p='0';\n  }\n}\n\nint int_from_nibble( char c )\n{\n  char sz[2]={0};\n  sz[0]=c;\n  return strtol( sz, 0, 16 );\n}\n\n_Bool bit_at( char c, int pos )\n{\n  return !!( int_from_nibble(c) & (8>>pos) );\n}\n\ntypedef struct bitpos_t\n{\n  int nibble_pos;\n  int bit_in_nibble;\n} bitpos_t;\n\nbitpos_t bitpos_from_xy( int x, int y, int len )\n{\n  bitpos_t result;\n  int bit_pos=x+y*len;\n  result.nibble_pos = bit_pos/4;\n  result.bit_in_nibble = bit_pos%4;\n  return result;\n};\n\n_Bool get_bit( char const * p, int x, int y, int len )\n{\n  bitpos_t pos=bitpos_from_xy( x, y, len );\n  return bit_at( p[pos.nibble_pos], pos.bit_in_nibble );\n}\n\nchar to_nibble( int val )\n{\n  return val<=9 ? val+'0' : val-10+'a';\n}\n\nvoid set_bit( char * p, int x, int y, int len )\n{\n  bitpos_t pos=bitpos_from_xy( x, y, len );\n  int old=int_from_nibble( p[pos.nibble_pos] );\n  p[ pos.nibble_pos ] = to_nibble( old | (8>>pos.bit_in_nibble ) );\n}\n\nchar * bitrot( char const * q )\n{\n  char * result = strdup(q);\n  char const * qs = strchr( q, ':' )+1;\n  char * rs = qs-q+result;\n  int len = atoi( q );\n  clear_bits( rs );\n  for( int y=0 ; y<len ; ++y ){\n    for( int x=0 ; x<len ; ++x ){\n      if ( get_bit( qs, x, y, len ) ){\n        set_bit( rs, len-y-1, x, len );\n      }\n    }\n  }\n  return result;\n}\n\nint main()\n{\n  for( data_t const * it = data ; it != ENDOF( data ) ; ++it ){\n    char * result = bitrot(it->src);\n    if ( 0 != strcmp( it->expected, result ) ){\n      printf( \"***NG***\" );\n    }\n    printf( \"%s -> %s\\n\", it->src, result );\n    free( result );\n  }\n  return 0;\n}\n\n\u7121\u99c4\u306a\u3053\u3068\u306f\u66f8\u3044\u3066\u306a\u3044\u6c17\u304c\u3059\u308b\u3051\u3069\u9577\u3044\u3002\nC\u8a00\u8a9e\u306e\u5bbf\u547d\u304b\u3002\n\u4eca\u56de\u306f\u3042\u307e\u308a C99 \u7279\u6709\u306e\u6a5f\u80fd\u306f\u4f7f\u308f\u306a\u304b\u3063\u305f\u3002\n\u554f\u984c\u3092\u4f5c\u3063\u305f\u6642\u306f C\u8a00\u8a9e\u5411\u304d\u304b\u306a \u306a\u3093\u3066\u601d\u3063\u3066\u3044\u305f\u3093\u3060\u304c\u3001\u89e3\u3044\u3066\u307f\u308b\u3068\u305d\u3046\u3067\u3082\u306a\u3044\u611f\u3058\u3002\n\u3082\u3046\u5c11\u3057\u697d\u306b\u66f8\u3051\u308b\u3068\u601d\u3063\u3066\u3044\u305f\u3093\u3060\u3051\u3069\u3002\n\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\u3092\u3084\u308b\u30a4\u30d9\u30f3\u30c8\u7b2c\u4e8c\u56de\nhttp://atnd.org/events/30900\n\u306e\u3001\u53c2\u8003\u554f\u984c\nhttp://qiita.com/items/9d80de41903775296ca6\n\u306e\u89e3\u7b54\u4f8b\u3002C\u8a00\u8a9e(C99)\u3067\u3002\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define ENDOF(x) (x+sizeof(x)/sizeof(*(x)))\n\ntypedef struct data_t\n{\n  char const * src;\n  char const * expected;\n} data_t;\n\ndata_t data[]={\n  {\"3:5b8\",\"3:de0\"},\n  {\"1:8\",\"1:8\"},\n  {\"2:8\",\"2:4\"},\n  {\"2:4\",\"2:1\"},\n  {\"2:1\",\"2:2\"},\n  {\"3:5d0\",\"3:5d0\"},\n  {\"4:1234\",\"4:0865\"},\n  {\"5:22a2a20\",\"5:22a2a20\"},\n  {\"5:1234567\",\"5:25b0540\"},\n  {\"6:123456789\",\"6:09cc196a6\"},\n  {\"7:123456789abcd\",\"7:f1a206734b258\"},\n  {\"7:fffffffffffff\",\"7:ffffffffffff8\"},\n  {\"7:fdfbf7efdfbf0\",\"7:ffffffffffc00\"},\n  {\"8:123456789abcdef1\",\"8:f0ccaaff78665580\"},\n  {\"9:112233445566778899aab\",\"9:b23da9011d22daf005d40\"},\n};\n\nvoid clear_bits( char * rs )\n{\n  for( char * p=rs ; *p ; ++p ){\n    *p='0';\n  }\n}\n\nint int_from_nibble( char c )\n{\n  char sz[2]={0};\n  sz[0]=c;\n  return strtol( sz, 0, 16 );\n}\n\n_Bool bit_at( char c, int pos )\n{\n  return !!( int_from_nibble(c) & (8>>pos) );\n}\n\ntypedef struct bitpos_t\n{\n  int nibble_pos;\n  int bit_in_nibble;\n} bitpos_t;\n\nbitpos_t bitpos_from_xy( int x, int y, int len )\n{\n  bitpos_t result;\n  int bit_pos=x+y*len;\n  result.nibble_pos = bit_pos/4;\n  result.bit_in_nibble = bit_pos%4;\n  return result;\n};\n\n_Bool get_bit( char const * p, int x, int y, int len )\n{\n  bitpos_t pos=bitpos_from_xy( x, y, len );\n  return bit_at( p[pos.nibble_pos], pos.bit_in_nibble );\n}\n\nchar to_nibble( int val )\n{\n  return val<=9 ? val+'0' : val-10+'a';\n}\n\nvoid set_bit( char * p, int x, int y, int len )\n{\n  bitpos_t pos=bitpos_from_xy( x, y, len );\n  int old=int_from_nibble( p[pos.nibble_pos] );\n  p[ pos.nibble_pos ] = to_nibble( old | (8>>pos.bit_in_nibble ) );\n}\n\nchar * bitrot( char const * q )\n{\n  char * result = strdup(q);\n  char const * qs = strchr( q, ':' )+1;\n  char * rs = qs-q+result;\n  int len = atoi( q );\n  clear_bits( rs );\n  for( int y=0 ; y<len ; ++y ){\n    for( int x=0 ; x<len ; ++x ){\n      if ( get_bit( qs, x, y, len ) ){\n        set_bit( rs, len-y-1, x, len );\n      }\n    }\n  }\n  return result;\n}\n\nint main()\n{\n  for( data_t const * it = data ; it != ENDOF( data ) ; ++it ){\n    char * result = bitrot(it->src);\n    if ( 0 != strcmp( it->expected, result ) ){\n      printf( \"***NG***\" );\n    }\n    printf( \"%s -> %s\\n\", it->src, result );\n    free( result );\n  }\n  return 0;\n}\n```\n\n\u7121\u99c4\u306a\u3053\u3068\u306f\u66f8\u3044\u3066\u306a\u3044\u6c17\u304c\u3059\u308b\u3051\u3069\u9577\u3044\u3002\nC\u8a00\u8a9e\u306e\u5bbf\u547d\u304b\u3002\n\u4eca\u56de\u306f\u3042\u307e\u308a C99 \u7279\u6709\u306e\u6a5f\u80fd\u306f\u4f7f\u308f\u306a\u304b\u3063\u305f\u3002\n\n\u554f\u984c\u3092\u4f5c\u3063\u305f\u6642\u306f C\u8a00\u8a9e\u5411\u304d\u304b\u306a \u306a\u3093\u3066\u601d\u3063\u3066\u3044\u305f\u3093\u3060\u304c\u3001\u89e3\u3044\u3066\u307f\u308b\u3068\u305d\u3046\u3067\u3082\u306a\u3044\u611f\u3058\u3002\n\u3082\u3046\u5c11\u3057\u697d\u306b\u66f8\u3051\u308b\u3068\u601d\u3063\u3066\u3044\u305f\u3093\u3060\u3051\u3069\u3002", "tags": ["\u52c9\u5f37\u4f1a", "\u3069\u3046\u66f8\u304f", "yhpg", "C"]}