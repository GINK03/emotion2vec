{"context": "\u76f4\u63a5 IL\u3092\u66f8\u304d\u4e0b\u3057\u3066\u4f5c\u3063\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092VisualStudio\u3067\u30b9\u30c6\u30c3\u30d7\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u8a66\u307f\u308b\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7591\u4f3c\u30b3\u30fc\u30c9\u306b\u30d6\u30ec\u30fc\u30af\u304c\u5f53\u305f\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\ncode.text\nMain\n{\n    smp = new Sample(12300, 45)\n    sum = smp.GetSum()\n    Console.WriteLine(sum.ToString())\n    return\n}\n\nDefine Sample\n{\n    field a : int\n    field b : int\n\n    Ctor(a: int, b: int)\n    {\n        this.a = a\n        this.b = b\n    }\n\n    GetSum() : int\n    {\n        sum = this.a + this.b\n        return sum\n    }\n}\n\n\n\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\n\nProgram.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Diagnostics.SymbolStore;\nusing System.IO;\n\nnamespace Test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string exeName = \"test.exe\";\n            AssemblyName asmName = new AssemblyName(exeName);\n            AssemblyBuilder ab = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save);\n            ModuleBuilder mb = ab.DefineDynamicModule(exeName, exeName, true);\n\n            ISymbolWriter sw = mb.GetSymWriter();\n            string codepath = Path.Combine(Directory.GetCurrentDirectory(), \"code.txt\");\n            ISymbolDocumentWriter sdw = sw.DefineDocument(codepath, Guid.Empty, Guid.Empty, Guid.Empty);\n\n            MethodBuilder main = BuildMain(sdw, mb);\n\n            mb.CreateGlobalFunctions();\n            ab.SetEntryPoint(main);\n            ab.Save(exeName);\n\n            return;\n        }\n\n        private static MethodBuilder BuildMain(ISymbolDocumentWriter sdw, ModuleBuilder mb)\n        {\n            SampleClassInfo cls = BuildSampleClass(sdw, mb);\n            MethodBuilder main = mb.DefineGlobalMethod(\"Main\", MethodAttributes.Static, typeof(void), Type.EmptyTypes);\n            {\n                ILGenerator il = main.GetILGenerator();\n\n                // Sample smp;\n                LocalBuilder locsmp = il.DeclareLocal(cls.Type);\n                locsmp.SetLocalSymInfo(\"smp\");\n\n                // int sum;\n                LocalBuilder locsum = il.DeclareLocal(typeof(int));\n                locsum.SetLocalSymInfo(\"sum\");\n                il.Emit(OpCodes.Nop);\n\n                // smp = new Sample(12300, 45);\n                il.MarkSequencePoint(sdw, 4, 2, 4, 29); \n                il.Emit(OpCodes.Ldc_I4, 12300);\n                il.Emit(OpCodes.Ldc_I4_S, (byte)45);\n                il.Emit(OpCodes.Newobj, cls.Ctor);\n                il.Emit(OpCodes.Stloc, locsmp);\n\n                // sum = smp.GetSum();\n                il.MarkSequencePoint(sdw, 5, 2, 5, 20);\n                il.Emit(OpCodes.Ldloc, locsmp);\n                il.EmitCall(OpCodes.Callvirt, cls.MethodGetSum, null);\n                il.Emit(OpCodes.Stloc, locsum);\n\n                // Console.WriteLine(sum.ToString());\n                il.MarkSequencePoint(sdw, 6, 2, 6, 34);\n                il.Emit(OpCodes.Ldloca_S, locsum);\n                il.EmitCall(OpCodes.Call, typeof(int).GetMethod(\"ToString\", Type.EmptyTypes), null);\n                il.EmitCall(OpCodes.Call, typeof(Console).GetMethod(\"WriteLine\", new Type[] { typeof(string) }), null);\n\n                // return;\n                il.MarkSequencePoint(sdw, 7, 2, 7, 8);\n                il.Emit(OpCodes.Nop);\n                il.Emit(OpCodes.Ret);\n            }\n\n            return main;\n        }\n\n        private class SampleClassInfo\n        {\n            public TypeBuilder Type { get; private set; }\n            public ConstructorBuilder Ctor{ get; private set; }\n            public MethodBuilder MethodGetSum { get; private set; }\n\n            public SampleClassInfo(TypeBuilder type, ConstructorBuilder ctor, MethodBuilder methodGetSum)\n            {\n                this.Type = type;\n                this.Ctor = ctor;\n                this.MethodGetSum = methodGetSum;\n            }\n        }\n\n        private static SampleClassInfo BuildSampleClass(ISymbolDocumentWriter sdw, ModuleBuilder mb)\n        {\n            // class Sample\n            TypeBuilder tb = mb.DefineType(\n                \"Sample\",\n                TypeAttributes.AnsiClass | TypeAttributes.Class | TypeAttributes.NotPublic | TypeAttributes.BeforeFieldInit,\n                typeof(object)\n                );\n\n            // private int a;\n            FieldBuilder fa = tb.DefineField(\"a\", typeof(int), FieldAttributes.Private);\n            // private int b;\n            FieldBuilder fb = tb.DefineField(\"b\", typeof(int), FieldAttributes.Private);\n\n            // constructor\n            ConstructorBuilder ctor = tb.DefineConstructor(\n                MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName,\n                CallingConventions.HasThis | CallingConventions.Standard,\n                new Type[] { typeof(int), typeof(int), }, null, null\n                );\n            {\n                // argument a, b\n                ParameterBuilder pa = ctor.DefineParameter(1, ParameterAttributes.In, \"a\");\n                ParameterBuilder pb = ctor.DefineParameter(2, ParameterAttributes.In, \"b\");\n\n                ILGenerator il = ctor.GetILGenerator();\n\n                il.MarkSequencePoint(sdw, 16, 2, 16, 3);\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Call, typeof(object).GetConstructor(Type.EmptyTypes));\n                il.Emit(OpCodes.Nop);\n\n                // this.a = a;\n                il.MarkSequencePoint(sdw, 17, 3, 17, 13);\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Ldarg_1);\n                il.Emit(OpCodes.Stfld, fa);\n\n                // this.b = b;\n                il.MarkSequencePoint(sdw, 18, 3, 18, 13);\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Ldarg_2);\n                il.Emit(OpCodes.Stfld, fb);\n\n                // return;\n                il.MarkSequencePoint(sdw, 19, 2, 19, 3);\n                il.Emit(OpCodes.Nop);\n                il.Emit(OpCodes.Ret);\n            }\n\n            // int GetSum() {}\n            MethodBuilder methodGetSum = tb.DefineMethod(\n                \"GetSum\",\n                MethodAttributes.Public | MethodAttributes.HideBySig,\n                typeof(int), Type.EmptyTypes\n                );\n            {\n                ILGenerator il = methodGetSum.GetILGenerator();\n\n                // int sum;\n                LocalBuilder locsum = il.DeclareLocal(typeof(int));\n                locsum.SetLocalSymInfo(\"sum\");\n\n                il.MarkSequencePoint(sdw, 22, 2, 22, 3);\n                il.Emit(OpCodes.Nop);\n\n                // sum = this.a + this.b;\n                il.MarkSequencePoint(sdw, 23, 3, 23, 24);\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Ldfld, fa);\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Ldfld, fb);\n                il.Emit(OpCodes.Add);\n                il.Emit(OpCodes.Stloc, locsum);\n\n                // return sum;\n                il.MarkSequencePoint(sdw, 24, 3, 24, 13);\n                il.Emit(OpCodes.Ldloc, locsum);\n                il.Emit(OpCodes.Ret);\n            }\n\n            tb.CreateType();\n            return new SampleClassInfo(tb, ctor, methodGetSum);\n        }\n    }\n}\n\n\nModuleBuilder.GetSymWriter \u3067 ISymbolWriter \u3092\u53d6\u5f97\u3002\nISymbolWriter.DefineDocument \u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u5bfe\u5fdc\u3059\u308b ISymbolDocumentWriter \u3092\u53d6\u5f97\u3002\nILGenerator.MarkSequencePoint \u3067\u3001IL\u306e\u30b3\u30fc\u30c9\u4f4d\u7f6e\u304c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u4e0a\u306e\u3069\u3053\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u304b\u3092\u8a2d\u5b9a\u3002\nLocalBuilder.SetLocalSymInfo \u3067\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306e\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u5b9a\u7fa9\u3002\nConstructorBuilder \u3084 MethodBuilder \u306e DefineParameter \u3067\u30e1\u30bd\u30c3\u30c9\u5f15\u6570\u306e\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u5b9a\u7fa9\u3002\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068 test.exe \u3068 test.pdb \u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b code.txt \u3092\u914d\u7f6e\u3057\u3066\u304a\u304f\u3002\nVisualStudio \u3092\u8d77\u52d5\u3057\u3001\u300c\u30d5\u30a1\u30a4\u30eb\u300d\u2192\u300c\u958b\u304f\u300d\u2192\u300c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u300d\u3067 test.exe \u3092\u9078\u629e\u3057\u3066\u958b\u304f\u3002\ncode.txt \u3092\u30c9\u30ed\u30c3\u30d7\u3057\u3066\u958b\u304f\u3002\n\ncode.txt \u306b\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u8a2d\u5b9a\uff08smp = new Sample() \u306e\u884c\u3067\uff09\nF5 \u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u8a2d\u5b9a\u3057\u305f\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3067\u6b62\u307e\u308b\u3002\n\n\u5f8c\u306f\u6bd4\u8f03\u7684\u666e\u901a\u306b\u30b9\u30c6\u30c3\u30d7\u5b9f\u884c\u3067\u304d\u308b\u3002\n\n\u76f4\u63a5 IL\u3092\u66f8\u304d\u4e0b\u3057\u3066\u4f5c\u3063\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092VisualStudio\u3067\u30b9\u30c6\u30c3\u30d7\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u8a66\u307f\u308b\u3002\n\n***\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7591\u4f3c\u30b3\u30fc\u30c9\u306b\u30d6\u30ec\u30fc\u30af\u304c\u5f53\u305f\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n```text:code.text\nMain\n{\n\tsmp = new Sample(12300, 45)\n\tsum = smp.GetSum()\n\tConsole.WriteLine(sum.ToString())\n\treturn\n}\n\nDefine Sample\n{\n\tfield a : int\n\tfield b : int\n\n\tCtor(a: int, b: int)\n\t{\n\t\tthis.a = a\n\t\tthis.b = b\n\t}\n\t\n\tGetSum() : int\n\t{\n\t\tsum = this.a + this.b\n\t\treturn sum\n\t}\n}\n```\n\n\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3002\n\n```csharp:Program.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing System.Diagnostics.SymbolStore;\nusing System.IO;\n\nnamespace Test\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string exeName = \"test.exe\";\n            AssemblyName asmName = new AssemblyName(exeName);\n            AssemblyBuilder ab = AppDomain.CurrentDomain.DefineDynamicAssembly(asmName, AssemblyBuilderAccess.Save);\n            ModuleBuilder mb = ab.DefineDynamicModule(exeName, exeName, true);\n\n            ISymbolWriter sw = mb.GetSymWriter();\n            string codepath = Path.Combine(Directory.GetCurrentDirectory(), \"code.txt\");\n            ISymbolDocumentWriter sdw = sw.DefineDocument(codepath, Guid.Empty, Guid.Empty, Guid.Empty);\n\n            MethodBuilder main = BuildMain(sdw, mb);\n\n            mb.CreateGlobalFunctions();\n            ab.SetEntryPoint(main);\n            ab.Save(exeName);\n\n            return;\n        }\n\n        private static MethodBuilder BuildMain(ISymbolDocumentWriter sdw, ModuleBuilder mb)\n        {\n            SampleClassInfo cls = BuildSampleClass(sdw, mb);\n            MethodBuilder main = mb.DefineGlobalMethod(\"Main\", MethodAttributes.Static, typeof(void), Type.EmptyTypes);\n            {\n                ILGenerator il = main.GetILGenerator();\n                \n                // Sample smp;\n                LocalBuilder locsmp = il.DeclareLocal(cls.Type);\n                locsmp.SetLocalSymInfo(\"smp\");\n\n                // int sum;\n                LocalBuilder locsum = il.DeclareLocal(typeof(int));\n                locsum.SetLocalSymInfo(\"sum\");\n                il.Emit(OpCodes.Nop);\n\n                // smp = new Sample(12300, 45);\n                il.MarkSequencePoint(sdw, 4, 2, 4, 29); \n                il.Emit(OpCodes.Ldc_I4, 12300);\n                il.Emit(OpCodes.Ldc_I4_S, (byte)45);\n                il.Emit(OpCodes.Newobj, cls.Ctor);\n                il.Emit(OpCodes.Stloc, locsmp);\n                \n                // sum = smp.GetSum();\n                il.MarkSequencePoint(sdw, 5, 2, 5, 20);\n                il.Emit(OpCodes.Ldloc, locsmp);\n                il.EmitCall(OpCodes.Callvirt, cls.MethodGetSum, null);\n                il.Emit(OpCodes.Stloc, locsum);\n                \n                // Console.WriteLine(sum.ToString());\n                il.MarkSequencePoint(sdw, 6, 2, 6, 34);\n                il.Emit(OpCodes.Ldloca_S, locsum);\n                il.EmitCall(OpCodes.Call, typeof(int).GetMethod(\"ToString\", Type.EmptyTypes), null);\n                il.EmitCall(OpCodes.Call, typeof(Console).GetMethod(\"WriteLine\", new Type[] { typeof(string) }), null);\n                \n                // return;\n                il.MarkSequencePoint(sdw, 7, 2, 7, 8);\n                il.Emit(OpCodes.Nop);\n                il.Emit(OpCodes.Ret);\n            }\n\n            return main;\n        }\n\n        private class SampleClassInfo\n        {\n            public TypeBuilder Type { get; private set; }\n            public ConstructorBuilder Ctor{ get; private set; }\n            public MethodBuilder MethodGetSum { get; private set; }\n\n            public SampleClassInfo(TypeBuilder type, ConstructorBuilder ctor, MethodBuilder methodGetSum)\n            {\n                this.Type = type;\n                this.Ctor = ctor;\n                this.MethodGetSum = methodGetSum;\n            }\n        }\n\n        private static SampleClassInfo BuildSampleClass(ISymbolDocumentWriter sdw, ModuleBuilder mb)\n        {\n            // class Sample\n            TypeBuilder tb = mb.DefineType(\n                \"Sample\",\n                TypeAttributes.AnsiClass | TypeAttributes.Class | TypeAttributes.NotPublic | TypeAttributes.BeforeFieldInit,\n                typeof(object)\n                );\n\n            // private int a;\n            FieldBuilder fa = tb.DefineField(\"a\", typeof(int), FieldAttributes.Private);\n            // private int b;\n            FieldBuilder fb = tb.DefineField(\"b\", typeof(int), FieldAttributes.Private);\n\n            // constructor\n            ConstructorBuilder ctor = tb.DefineConstructor(\n                MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName,\n                CallingConventions.HasThis | CallingConventions.Standard,\n                new Type[] { typeof(int), typeof(int), }, null, null\n                );\n            {\n                // argument a, b\n                ParameterBuilder pa = ctor.DefineParameter(1, ParameterAttributes.In, \"a\");\n                ParameterBuilder pb = ctor.DefineParameter(2, ParameterAttributes.In, \"b\");\n\n                ILGenerator il = ctor.GetILGenerator();\n\n                il.MarkSequencePoint(sdw, 16, 2, 16, 3);\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Call, typeof(object).GetConstructor(Type.EmptyTypes));\n                il.Emit(OpCodes.Nop);\n\n                // this.a = a;\n                il.MarkSequencePoint(sdw, 17, 3, 17, 13);\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Ldarg_1);\n                il.Emit(OpCodes.Stfld, fa);\n                \n                // this.b = b;\n                il.MarkSequencePoint(sdw, 18, 3, 18, 13);\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Ldarg_2);\n                il.Emit(OpCodes.Stfld, fb);\n                \n                // return;\n                il.MarkSequencePoint(sdw, 19, 2, 19, 3);\n                il.Emit(OpCodes.Nop);\n                il.Emit(OpCodes.Ret);\n            }\n\n            // int GetSum() {}\n            MethodBuilder methodGetSum = tb.DefineMethod(\n                \"GetSum\",\n                MethodAttributes.Public | MethodAttributes.HideBySig,\n                typeof(int), Type.EmptyTypes\n                );\n            {\n                ILGenerator il = methodGetSum.GetILGenerator();\n                \n                // int sum;\n                LocalBuilder locsum = il.DeclareLocal(typeof(int));\n                locsum.SetLocalSymInfo(\"sum\");\n\n                il.MarkSequencePoint(sdw, 22, 2, 22, 3);\n                il.Emit(OpCodes.Nop);\n\n                // sum = this.a + this.b;\n                il.MarkSequencePoint(sdw, 23, 3, 23, 24);\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Ldfld, fa);\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Ldfld, fb);\n                il.Emit(OpCodes.Add);\n                il.Emit(OpCodes.Stloc, locsum);\n                \n                // return sum;\n                il.MarkSequencePoint(sdw, 24, 3, 24, 13);\n                il.Emit(OpCodes.Ldloc, locsum);\n                il.Emit(OpCodes.Ret);\n            }\n\n            tb.CreateType();\n            return new SampleClassInfo(tb, ctor, methodGetSum);\n        }\n    }\n}\n```\n\n`ModuleBuilder.GetSymWriter` \u3067 `ISymbolWriter` \u3092\u53d6\u5f97\u3002\n\n`ISymbolWriter.DefineDocument` \u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u5bfe\u5fdc\u3059\u308b `ISymbolDocumentWriter` \u3092\u53d6\u5f97\u3002\n\n`ILGenerator.MarkSequencePoint` \u3067\u3001IL\u306e\u30b3\u30fc\u30c9\u4f4d\u7f6e\u304c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30d5\u30a1\u30a4\u30eb\u4e0a\u306e\u3069\u3053\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u304b\u3092\u8a2d\u5b9a\u3002\n`LocalBuilder.SetLocalSymInfo` \u3067\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306e\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u5b9a\u7fa9\u3002\n`ConstructorBuilder` \u3084 `MethodBuilder` \u306e `DefineParameter` \u3067\u30e1\u30bd\u30c3\u30c9\u5f15\u6570\u306e\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u5b9a\u7fa9\u3002\n\n***\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068 test.exe \u3068 test.pdb \u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b code.txt \u3092\u914d\u7f6e\u3057\u3066\u304a\u304f\u3002\n\nVisualStudio \u3092\u8d77\u52d5\u3057\u3001\u300c\u30d5\u30a1\u30a4\u30eb\u300d\u2192\u300c\u958b\u304f\u300d\u2192\u300c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30fb\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u300d\u3067 test.exe \u3092\u9078\u629e\u3057\u3066\u958b\u304f\u3002\ncode.txt \u3092\u30c9\u30ed\u30c3\u30d7\u3057\u3066\u958b\u304f\u3002\n![cap_a.png](https://qiita-image-store.s3.amazonaws.com/0/151464/2c63740c-5b16-5804-e4b0-26925310ef27.png)\n\ncode.txt \u306b\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u8a2d\u5b9a\uff08smp = new Sample() \u306e\u884c\u3067\uff09\nF5 \u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u8a2d\u5b9a\u3057\u305f\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3067\u6b62\u307e\u308b\u3002\n![cap_B.png](https://qiita-image-store.s3.amazonaws.com/0/151464/39b0e8ee-7906-837f-984f-91fa5bc816db.png)\n\n\u5f8c\u306f\u6bd4\u8f03\u7684\u666e\u901a\u306b\u30b9\u30c6\u30c3\u30d7\u5b9f\u884c\u3067\u304d\u308b\u3002\n![cap_C.png](https://qiita-image-store.s3.amazonaws.com/0/151464/dc82a2f6-c2a3-6178-ee7d-1e4f67ff8274.png)\n\n", "tags": [".NET"]}