{"context": " More than 1 year has passed since last update.\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58\u3068\u6a5f\u68b0\u5b66\u7fd2\u3001\u7b2c7\u7ae0\u300cSparse Kernel Machines\u300d\u306b\u5165\u3063\u3066SVM\u306e\u5b9f\u88c5\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\u56f37.2\u306e\u518d\u73fe\u3092\u884c\u3046\u306b\u3042\u305f\u308a\u3001\u30ab\u30fc\u30cd\u30eb\u304c\u30ac\u30a6\u30b8\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u304c\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4eca\u56de\u306e\u5b9f\u88c5\u3082\u3053\u308c\u306b\u5f93\u3044\u307e\u3059\u3002\n\u3044\u3064\u3082\u901a\u308a\u5883\u754c\u9762\u306e\u6c42\u3081\u65b9\u306a\u3069\u3001SVM\u305d\u306e\u3082\u306e\u306e\u89e3\u8aac\u306fPRML\u3084\u306f\u3058\u30d1\u30bf\u306b\u304a\u4efb\u305b\u3059\u308b\u3068\u3057\u3066\u3001\u5b9f\u88c5\u306b\u3042\u305f\u3063\u3066\u306e\u6d41\u308c\u3060\u3051\u7c21\u5358\u306b\u793a\u3057\u307e\u3059\u3002\n\n\u5b9f\u88c5\u306e\u5927\u307e\u304b\u306a\u6d41\u308c\n\u2460\u30e9\u30b0\u30e9\u30f3\u30b8\u30e5\u95a2\u6570\u306e\u53cc\u5bfe\u8868\u73fe (7.10)\u306b\u3064\u3044\u3066\u3001\u4e8c\u6b21\u8a08\u753b\u6cd5\u3067\u89e3\u304f\u3002\n\\tilde{L}(a) = \\sum_{n=1}^N a_n - \\frac{1}{2} \\sum_{n=1}^N \\sum_{m=1}^N  a_na_m t_n t_m k({\\bf x_n}, {\\bf x_m})    (7.10)\n\n\u975e\u7dda\u5f62\u8a08\u753b\u6cd5\u306e\u81ea\u524d\u3067\u306e\u5b9f\u88c5\u306f\u30e0\u30ea\uff01\u3063\u3066\u8a00\u308f\u308c\u305f\u306e\u3067\u3001\u304a\u3068\u306a\u3057\u304f\u30bd\u30eb\u30d0\u30fc\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\u7121\u511f\u304b\u3064\u30dd\u30d4\u30e5\u30e9\u30fc\u3063\u307d\u3044cvxopt\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u304c\u826f\u3055\u6c17\u306a\u306e\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u5f93\u3063\u3066cvxopt\u3067\u30e2\u30c7\u30eb\u5316\u3059\u308b\u306b\u306f(7.10)\u306e\u307e\u307e\u3060\u3068\u898b\u3065\u3089\u3044\u306e\u3067\u5f0f\u5909\u5f62\u3002\n - \\tilde{L}(a) = \\frac{1}{2} {\\bf A}^{\\mathrm{T}} ({\\bf T}^{\\mathrm{T}} k({\\bf x_n}, {\\bf x_m}) {\\bf T}){\\bf A} - {\\bf A} (7.10)'\n\n\u8868\u8a18\u7684\u306b\u306f\u6c17\u6301\u3061\u60aa\u3044\u5f62\u3067\u3059\u304c\u3001\u3072\u3068\u307e\u305a(7.10)'\u3068cvxopt\u3092\u898b\u6bd4\u3079\u306a\u304c\u3089\u30e2\u30c7\u30eb\u5316\u3067\u304d\u305f\u3089\u305d\u306e\u307e\u307ecvxopt\u306b\u89e3\u3044\u3066\u3082\u3089\u3046\u3068\u30e9\u30b0\u30e9\u30f3\u30b8\u30e5\u4e57\u6570$a$\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\n\u2461SVM\u3067\u306f\u5883\u754c\u9762\u306e\u6c7a\u5b9a\u306b\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u306e\u307f\u95a2\u4e0e\u3057\u3001\u3053\u308c\u306fKKT\u6761\u4ef6\u3067\u7d5e\u308a\u8fbc\u307e\u308c\u307e\u3059\u3002\n\u306a\u3093\u3068\u306a\u304f\u307e\u3060\u8179\u843d\u3061\u3057\u3066\u306a\u3044\u3068\u3053\u308d\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u5883\u754c\u9762\u4e0a\u306b\u3042\u308b\u30d9\u30af\u30c8\u30eb\u306f$t_ny({\\bf x})-1=0$\u306b\u306a\u308b\u306e\u3067\u3001(7.16)\u3088\u308a\u3001$a>0$\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u89e3\u91c8\u3002\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\n\u2462\u3067\u3001\u6c42\u307e\u3063\u305f\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u3063\u3066(7.18)\u306e$b$\u3092\u6c42\u3081\u307e\u3059\u3002\n\u2463(7.13)\u306b\u6c42\u3081\u305f\u5024\u3092\u4ee3\u5165\u3057\u3066\u3001\u5883\u754c\u9762\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\u4eca\u56de\u3001\u56f3\u3092\u63cf\u304f\u306e\u306b\u3048\u3089\u3044\u82e6\u52b4\u3057\u307e\u3044\u305f\u3002\u3069\u3046\u3057\u3066\u3082\u5883\u754c\u9762\u304c\u4e0a\u624b\u304f\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u305a\u3001aidiary\u3055\u3093\u306e\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u5168\u9762\u7684\u306b\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\nimport math\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom scipy.stats.kde import gaussian_kde\nfrom pylab import *\nimport numpy as np\nimport random\nimport cvxopt\nfrom cvxopt import matrix, solvers\n%matplotlib inline\n\ndef kernel(x, y):\n    sigma = 5.0\n    return np.exp(-norm(x-y)**2 / (2 * (sigma ** 2)))\n\n#(7.10)' (Quadratic Programming)\ndef L(t, X, N):\n    K = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            K[i, j] = t[i] * t[j] * kernel(X[i], X[j])\n    Q = matrix(K)\n    p = matrix(-1 * np.ones(N))             \n    G = matrix(np.diag([-1.0]*N))       \n    h = matrix(np.zeros(N))             \n    A = matrix(t, (1,N))                \n    b = matrix(0.0)                     \n    sol = solvers.qp(Q, p, G, h, A, b)\n    a = array(sol['x']).reshape(N)\n    return a\n\n#(7.13)\ndef y_x(a, t, X, N, b, x):\n    sum = 0\n    for n in range(N):\n        sum += a[n] * t[n] * kernel(x, X[n])\n    return sum + b\n\n#(7.18)\ndef b(a, t, X, S):\n    sum_A = 0\n    for n in S:\n        sum_B = 0\n        for m in S:\n            sum_B += a[m] * t[m] * kernel(X[n], X[m])\n        sum_A += (t[n] - sum_B)\n    return sum_A/len(S)\n\nif __name__ == \"__main__\":\n    N = 36\n    mu_blue = [1,-1]\n    cov = [[0.1,0.05], [0.05,0.1]]\n\n    x_blue,y_blue = np.random.multivariate_normal(mu_blue, cov, N/2).T\n\n    x_red = [0.3, 0.8, 0.9, 0.95, 1.1, 1.3, 1.6, 1.9, 1.75, 1.8, 2.0, 2.1, 2.3, 2.25, 2.4, 2.7, 3.0, 3.2]\n    y_red = [-0.2, 0.1, 0.25, 0.14, -0.1, 1.6, 1.2, 0.6, 0.8, -0.6, -0.8, -0.75, 1.2, -1.15, -0.12, -0.3, -0.4, 1.4]\n\n    t_blue = np.ones((1, N/2))\n    t_red = -1*np.ones((1, N/2))\n\n    blue = vstack((x_blue, y_blue))\n    red = vstack((x_red, y_red))\n\n    X = np.concatenate((blue, red), axis=1).T\n    t = np.concatenate((t_blue, t_red), axis=1).T\n\n    #(7.10)' (Quadratic Programming)\n    a = L(t, X, N)\n\n    #Extract Index of support vectors from (7.14) \n    S = []\n    for n in range(len(a)):\n        if a[n] < 0.0001: continue\n        S.append(n)\n\n    #(7.18)\n    b = b(a, t, X, S)\n\n\n    #Plot train data sets\n    plt.scatter(x_blue,y_blue,color='b',marker='x')\n    plt.scatter(x_red,y_red,color='r',marker='x')\n\n    # Enphasize suport vectors\n    for n in S:\n        plt.scatter(X[n,0], X[n,1], color='g', marker='o')\n\n    # Plot the decision surface\n    X1, X2 = meshgrid(linspace(-10,10,100), linspace(-10,10,100))\n    w, h = X1.shape\n    X1.resize(X1.size)\n    X2.resize(X2.size)\n    Z = array([y_x(a, t, X, N, b, array([x1,x2])) for (x1, x2) in zip(X1, X2)])\n    X1.resize((w, h))\n    X2.resize((w, h))\n    Z.resize((w, h))\n    CS = contour(X1, X2, Z, [0.0], colors='k', linewidths=1, origin='lower')\n    xlim(0, 4)\n    ylim(-2, 2)\n    title(\"Figure 7.2\")\n\n\n\n\u7d50\u679c\n\n\n\u53c2\u8003\n\u975e\u7dda\u5f62SVM\n\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58\u3068\u6a5f\u68b0\u5b66\u7fd2\u3001\u7b2c7\u7ae0\u300cSparse Kernel Machines\u300d\u306b\u5165\u3063\u3066SVM\u306e\u5b9f\u88c5\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\u56f37.2\u306e\u518d\u73fe\u3092\u884c\u3046\u306b\u3042\u305f\u308a\u3001\u30ab\u30fc\u30cd\u30eb\u304c\u30ac\u30a6\u30b8\u30a2\u30f3\u30ab\u30fc\u30cd\u30eb\u304c\u9078\u629e\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4eca\u56de\u306e\u5b9f\u88c5\u3082\u3053\u308c\u306b\u5f93\u3044\u307e\u3059\u3002\n\n\u3044\u3064\u3082\u901a\u308a\u5883\u754c\u9762\u306e\u6c42\u3081\u65b9\u306a\u3069\u3001SVM\u305d\u306e\u3082\u306e\u306e\u89e3\u8aac\u306fPRML\u3084\u306f\u3058\u30d1\u30bf\u306b\u304a\u4efb\u305b\u3059\u308b\u3068\u3057\u3066\u3001\u5b9f\u88c5\u306b\u3042\u305f\u3063\u3066\u306e\u6d41\u308c\u3060\u3051\u7c21\u5358\u306b\u793a\u3057\u307e\u3059\u3002\n\n##\u5b9f\u88c5\u306e\u5927\u307e\u304b\u306a\u6d41\u308c\n\u2460\u30e9\u30b0\u30e9\u30f3\u30b8\u30e5\u95a2\u6570\u306e\u53cc\u5bfe\u8868\u73fe (7.10)\u306b\u3064\u3044\u3066\u3001\u4e8c\u6b21\u8a08\u753b\u6cd5\u3067\u89e3\u304f\u3002\n\n```math\n\\tilde{L}(a) = \\sum_{n=1}^N a_n - \\frac{1}{2} \\sum_{n=1}^N \\sum_{m=1}^N  a_na_m t_n t_m k({\\bf x_n}, {\\bf x_m})    (7.10)\n```\n\n\n\u975e\u7dda\u5f62\u8a08\u753b\u6cd5\u306e\u81ea\u524d\u3067\u306e\u5b9f\u88c5\u306f\u30e0\u30ea\uff01\u3063\u3066\u8a00\u308f\u308c\u305f\u306e\u3067\u3001\u304a\u3068\u306a\u3057\u304f\u30bd\u30eb\u30d0\u30fc\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\u7121\u511f\u304b\u3064\u30dd\u30d4\u30e5\u30e9\u30fc\u3063\u307d\u3044[cvxopt](http://abel.ee.ucla.edu/cvxopt/userguide/coneprog.html?highlight=quadratic#quadratic-programming)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u304c\u826f\u3055\u6c17\u306a\u306e\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\n![Screen Shot 2015-09-15 at 17.01.36.png](https://qiita-image-store.s3.amazonaws.com/0/62779/1aa856d2-77ea-fb45-8b53-075c07d9ad70.png)\n\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u5f93\u3063\u3066cvxopt\u3067\u30e2\u30c7\u30eb\u5316\u3059\u308b\u306b\u306f(7.10)\u306e\u307e\u307e\u3060\u3068\u898b\u3065\u3089\u3044\u306e\u3067\u5f0f\u5909\u5f62\u3002\n\n```math\n - \\tilde{L}(a) = \\frac{1}{2} {\\bf A}^{\\mathrm{T}} ({\\bf T}^{\\mathrm{T}} k({\\bf x_n}, {\\bf x_m}) {\\bf T}){\\bf A} - {\\bf A} (7.10)'\n```\n\n\u8868\u8a18\u7684\u306b\u306f\u6c17\u6301\u3061\u60aa\u3044\u5f62\u3067\u3059\u304c\u3001\u3072\u3068\u307e\u305a(7.10)'\u3068cvxopt\u3092\u898b\u6bd4\u3079\u306a\u304c\u3089\u30e2\u30c7\u30eb\u5316\u3067\u304d\u305f\u3089\u305d\u306e\u307e\u307ecvxopt\u306b\u89e3\u3044\u3066\u3082\u3089\u3046\u3068\u30e9\u30b0\u30e9\u30f3\u30b8\u30e5\u4e57\u6570$a$\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\n\n\u2461SVM\u3067\u306f\u5883\u754c\u9762\u306e\u6c7a\u5b9a\u306b\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u306e\u307f\u95a2\u4e0e\u3057\u3001\u3053\u308c\u306fKKT\u6761\u4ef6\u3067\u7d5e\u308a\u8fbc\u307e\u308c\u307e\u3059\u3002\n\u306a\u3093\u3068\u306a\u304f\u307e\u3060\u8179\u843d\u3061\u3057\u3066\u306a\u3044\u3068\u3053\u308d\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u5883\u754c\u9762\u4e0a\u306b\u3042\u308b\u30d9\u30af\u30c8\u30eb\u306f$t_ny({\\bf x})-1=0$\u306b\u306a\u308b\u306e\u3067\u3001(7.16)\u3088\u308a\u3001$a>0$\u3067\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u89e3\u91c8\u3002\u3053\u308c\u3092\u5229\u7528\u3057\u3066\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\n\n\u2462\u3067\u3001\u6c42\u307e\u3063\u305f\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30c8\u30eb\u3092\u4f7f\u3063\u3066(7.18)\u306e$b$\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\u2463(7.13)\u306b\u6c42\u3081\u305f\u5024\u3092\u4ee3\u5165\u3057\u3066\u3001\u5883\u754c\u9762\u3092\u6c42\u3081\u307e\u3059\u3002\n\n##\u30b3\u30fc\u30c9\n\u4eca\u56de\u3001\u56f3\u3092\u63cf\u304f\u306e\u306b\u3048\u3089\u3044\u82e6\u52b4\u3057\u307e\u3044\u305f\u3002\u3069\u3046\u3057\u3066\u3082\u5883\u754c\u9762\u304c\u4e0a\u624b\u304f\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u305a\u3001aidiary\u3055\u3093\u306e[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://aidiary.hatenablog.com/entry/20100502/1272804952)\u3092\u5168\u9762\u7684\u306b\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u3002\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\n\n```python\nimport math\nimport matplotlib.pyplot as plt\nfrom scipy import stats\nfrom scipy.stats.kde import gaussian_kde\nfrom pylab import *\nimport numpy as np\nimport random\nimport cvxopt\nfrom cvxopt import matrix, solvers\n%matplotlib inline\n\ndef kernel(x, y):\n    sigma = 5.0\n    return np.exp(-norm(x-y)**2 / (2 * (sigma ** 2)))\n\n#(7.10)' (Quadratic Programming)\ndef L(t, X, N):\n    K = np.zeros((N, N))\n    for i in range(N):\n        for j in range(N):\n            K[i, j] = t[i] * t[j] * kernel(X[i], X[j])\n    Q = matrix(K)\n    p = matrix(-1 * np.ones(N))             \n    G = matrix(np.diag([-1.0]*N))       \n    h = matrix(np.zeros(N))             \n    A = matrix(t, (1,N))                \n    b = matrix(0.0)                     \n    sol = solvers.qp(Q, p, G, h, A, b)\n    a = array(sol['x']).reshape(N)\n    return a\n\n#(7.13)\ndef y_x(a, t, X, N, b, x):\n    sum = 0\n    for n in range(N):\n        sum += a[n] * t[n] * kernel(x, X[n])\n    return sum + b\n\n#(7.18)\ndef b(a, t, X, S):\n    sum_A = 0\n    for n in S:\n        sum_B = 0\n        for m in S:\n            sum_B += a[m] * t[m] * kernel(X[n], X[m])\n        sum_A += (t[n] - sum_B)\n    return sum_A/len(S)\n\nif __name__ == \"__main__\":\n    N = 36\n    mu_blue = [1,-1]\n    cov = [[0.1,0.05], [0.05,0.1]]\n    \n    x_blue,y_blue = np.random.multivariate_normal(mu_blue, cov, N/2).T\n    \n    x_red = [0.3, 0.8, 0.9, 0.95, 1.1, 1.3, 1.6, 1.9, 1.75, 1.8, 2.0, 2.1, 2.3, 2.25, 2.4, 2.7, 3.0, 3.2]\n    y_red = [-0.2, 0.1, 0.25, 0.14, -0.1, 1.6, 1.2, 0.6, 0.8, -0.6, -0.8, -0.75, 1.2, -1.15, -0.12, -0.3, -0.4, 1.4]\n    \n    t_blue = np.ones((1, N/2))\n    t_red = -1*np.ones((1, N/2))\n\n    blue = vstack((x_blue, y_blue))\n    red = vstack((x_red, y_red))\n\n    X = np.concatenate((blue, red), axis=1).T\n    t = np.concatenate((t_blue, t_red), axis=1).T\n    \n    #(7.10)' (Quadratic Programming)\n    a = L(t, X, N)\n\n    #Extract Index of support vectors from (7.14) \n    S = []\n    for n in range(len(a)):\n        if a[n] < 0.0001: continue\n        S.append(n)\n\n    #(7.18)\n    b = b(a, t, X, S)\n\n    \n    #Plot train data sets\n    plt.scatter(x_blue,y_blue,color='b',marker='x')\n    plt.scatter(x_red,y_red,color='r',marker='x')\n    \n    # Enphasize suport vectors\n    for n in S:\n        plt.scatter(X[n,0], X[n,1], color='g', marker='o')\n    \n    # Plot the decision surface\n    X1, X2 = meshgrid(linspace(-10,10,100), linspace(-10,10,100))\n    w, h = X1.shape\n    X1.resize(X1.size)\n    X2.resize(X2.size)\n    Z = array([y_x(a, t, X, N, b, array([x1,x2])) for (x1, x2) in zip(X1, X2)])\n    X1.resize((w, h))\n    X2.resize((w, h))\n    Z.resize((w, h))\n    CS = contour(X1, X2, Z, [0.0], colors='k', linewidths=1, origin='lower')\n    xlim(0, 4)\n    ylim(-2, 2)\n    title(\"Figure 7.2\")\n\n```\n\n##\u7d50\u679c\n![Screen Shot 2015-09-15 at 17.24.18.png](https://qiita-image-store.s3.amazonaws.com/0/62779/bd4b1c71-fc92-6f89-6136-6349cce14bbf.png)\n\n\n\n##\u53c2\u8003\n[\u975e\u7dda\u5f62SVM](http://aidiary.hatenablog.com/entry/20100502/1272804952)\n", "tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "PRML"]}