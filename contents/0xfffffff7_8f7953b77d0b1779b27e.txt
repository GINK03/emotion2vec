{"context": " More than 1 year has passed since last update.HTTP2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u4f7f\u3048\u308bnghttp2\u3092\u4f7f\u3046\u30a8\u30f3\u30c8\u30ea\u3067\u3059\u3002\nnghttp2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f#1\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u6982\u8981\n\u5f15\u304d\u7d9a\u304d\u30cf\u30a4\u30ec\u30d9\u30ebAPI\u300clibnghttp2_asio\u300d\u3092\u3082\u3046\u5c11\u3057\u4f7f\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nhttps://nghttp2.org/documentation/libnghttp2_asio.html\n\u4eca\u56de\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3057\u3066\u307f\u307e\u3059\u3002\n\nGET\u3057\u3066\u307f\u308b\n\u30bd\u30fc\u30b9\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n#include <iostream>\n\n#include <nghttp2/asio_http2_client.h>\n\nusing boost::asio::ip::tcp;\n\nusing namespace nghttp2::asio_http2;\nusing namespace nghttp2::asio_http2::client;\n\nint main(int argc, char *argv[]) {\n\n  // \u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3068\u975e\u540c\u671f\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n  boost::system::error_code ec;\n  boost::asio::io_service io_service;\n\n  // \u30bb\u30c3\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n  session sess(io_service, \"nghttp2.test\", \"8080\"); \n\n  // \u63a5\u7d9a (\u81ea\u8eab\u306esess\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u307e\u3059)\n  sess.on_connect([&sess](tcp::resolver::iterator endpoint_it) {\n\n    boost::system::error_code ec;\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\n    auto req = sess.submit(ec, \"GET\", \"http://nghttp2.test:8080/\"); \n\n    // \u30e9\u30e0\u30c0\u5f0f\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a\n    req->on_response([](const response &res) {\n\n      // status_code()\u3067\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\n      std::cerr << \"HTTP/2 \" << res.status_code() << std::endl;\n\n      // \u30d8\u30c3\u30c0\u306e\u30de\u30c3\u30d7\u3092\u30eb\u30fc\u30d7\u3059\u308b\n      for (auto &kv : res.header()) {\n\n        // \u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u8868\u793a\u3059\u308b\n        std::cerr << kv.first << \": \" << kv.second.value << \"\\n\";\n      }\n      std::cerr << std::endl;\n\n      // on_data\u3067\u30e9\u30e0\u30c0\u5f0f\u3067DATA\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a.\n      res.on_data([](const uint8_t *data, std::size_t len) {\n        std::cerr.write(reinterpret_cast<const char *>(data), len);\n        std::cerr << std::endl;\n      });\n    });\n\n    // \u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u30af\u30ed\u30fc\u30ba\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b.\n    req->on_close([&sess](uint32_t error_code) {\n      // shutdown session after first request was done.\n      sess.shutdown();\n    });\n  });\n\n  // \u30a8\u30e9\u30fc\u306e\u6642\u306b\u547c\u3070\u308c\u308b\n  sess.on_error([](const boost::system::error_code &ec) {\n    std::cerr << \"error: \" << ec.message() << std::endl;\n  });\n\n  // \u3053\u3053\u3067run()\u3057\u3066on_connect()\u304c\u547c\u3070\u308c\u308b\n  io_service.run();\n}\n\n\u30d3\u30eb\u30c9\ng++ -o client client.cpp -lnghttp2_asio -lboost_system -std=c++11 -lssl -lcrypto -lpthread\n\nnghttp2\u306e\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nnghttpd -v -d \"\" --no-tls 8080\n\n\u30d3\u30eb\u30c9\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d77\u52d5\u3057\u3066\u307f\u308b\u3002\n./client\n\nHTTP/2 200\ncache-control: max-age=3600\ncontent-length: 169\ndate: Fri, 03 Apr 2015 04:40:00 GMT\nlast-modified: Tue, 31 Mar 2015 04:44:56 GMT\nserver: nghttpd nghttp2/0.7.10-DEV\n\n<!DOCTYPE html><html lang=\"en\">\n<title>HTTP/2 FTW</title><body>\n<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<h1>This should be green</h1>\n</body></html>\n\n\nGET\u306e\u5f8c\u306bPOST\u3057\u3066\u307f\u308b\nsession\u30af\u30e9\u30b9\u306esubmit\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u9001\u4fe1\u7528\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u3042\u308b\u306e\u3067POST\u3057\u3066\u307f\u307e\u3059\u3002\n#include <iostream>\n\n#include <nghttp2/asio_http2_client.h>\n\nusing boost::asio::ip::tcp;\n\nusing namespace nghttp2::asio_http2;\nusing namespace nghttp2::asio_http2::client;\n\nint main(int argc, char *argv[]) {\n\n  // \u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3068\u975e\u540c\u671f\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n  boost::system::error_code ec;\n  boost::asio::io_service io_service;\n\n  // \u30bb\u30c3\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n  session sess(io_service, \"nghttp2.test\", \"8080\");                                                                                                               \n\n  // \u63a5\u7d9a (\u81ea\u8eab\u306esess\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u307e\u3059)\n  sess.on_connect([&sess](tcp::resolver::iterator endpoint_it) {\n\n    boost::system::error_code ec;\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\n    auto req = sess.submit(ec, \"GET\", \"http://nghttp2.test:8080/\");\n\n    // \u30e9\u30e0\u30c0\u5f0f\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a\n    req->on_response([](const response &res) {\n\n      // status_code()\u3067\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\n      std::cerr << \"HTTP/2 \" << res.status_code() << std::endl;\n\n      // \u30d8\u30c3\u30c0\u306e\u30de\u30c3\u30d7\u3092\u30eb\u30fc\u30d7\u3059\u308b\n      for (auto &kv : res.header()) {\n\n        // \u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u8868\u793a\u3059\u308b\n        std::cerr << kv.first << \": \" << kv.second.value << \"\\n\";\n      }\n      std::cerr << std::endl;\n\n      // on_data\u3067\u30e9\u30e0\u30c0\u5f0f\u3067DATA\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a.\n      res.on_data([](const uint8_t *data, std::size_t len) {\n        std::cerr.write(reinterpret_cast<const char *>(data), len);\n        std::cerr << std::endl;\n      });\n    });\n\n\n    // POST\n    auto req2 = sess.submit(ec, \"POST\", \"http://nghttp2.test:8080/\", \"THIS IS POST DATA!!\");\n\n    req2->on_response([](const response &res) {\n      std::cerr << \"HTTP/2 \" << res.status_code() << std::endl;\n\n      for (auto &kv : res.header()) {\n        std::cerr << kv.first << \": \" << kv.second.value << \"\\n\";\n      }\n      std::cerr << std::endl;\n\n      res.on_data([](const uint8_t *data, std::size_t len) {\n        std::cerr.write(reinterpret_cast<const char *>(data), len);\n        std::cerr << std::endl;\n      });\n    });\n\n\n    // \u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u30af\u30ed\u30fc\u30ba\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b.\n    req->on_close([&sess](uint32_t error_code) {\n      // shutdown session after first request was done.\n      sess.shutdown();\n    });\n  });\n\n  // \u30a8\u30e9\u30fc\u306e\u6642\u306b\u547c\u3070\u308c\u308b\n  sess.on_error([](const boost::system::error_code &ec) {\n    std::cerr << \"error: \" << ec.message() << std::endl;\n  });\n\n  // \u3053\u3053\u3067run()\u3057\u3066on_connect()\u304c\u547c\u3070\u308c\u308b\n  io_service.run();\n}\n\n\u30b5\u30fc\u30d0\u30fc\u5074\u306f\u9759\u7684\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8fd4\u3059\u3060\u3051\u306a\u306e\u3067\u7279\u306b\u306a\u306b\u3082\u305b\u305a\u306b\u30aa\u30a6\u30e0\u8fd4\u3057\u3002\n./client \nHTTP/2 200\ncache-control: max-age=3600\ncontent-length: 169\ndate: Fri, 03 Apr 2015 04:53:19 GMT\nlast-modified: Tue, 31 Mar 2015 04:44:56 GMT\nserver: nghttpd nghttp2/0.7.10-DEV\n\nHTTP/2 200\ncache-control: max-age=3600\ncontent-length: 169\ndate: Fri, 03 Apr 2015 04:53:19 GMT\nlast-modified: Tue, 31 Mar 2015 04:44:56 GMT\nserver: nghttpd nghttp2/0.7.10-DEV\n\n<!DOCTYPE html><html lang=\"en\">\n<title>HTTP/2 FTW</title><body>\n<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<h1>This should be green</h1>\n</body></html>\n\n<!DOCTYPE html><html lang=\"en\">\n<title>HTTP/2 FTW</title><body>\n<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<h1>This should be green</h1>\n</body></html>\n\n\u3057\u304b\u3057\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u30b9\u30c8\u30ea\u30fc\u30e0ID3\u3067\u6b63\u3057\u304fPOST\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3055\u3070\u3044\u3066\u308b\u3053\u3068\u306f\u78ba\u8a8d\u3002\n[id=1] [  3.077] recv (stream_id=3) :method: POST\n[id=1] [  3.077] recv (stream_id=3) :scheme: http\n[id=1] [  3.077] recv (stream_id=3) :path: /\n[id=1] [  3.077] recv (stream_id=3) :authority: nghttp2.test:8080\n[id=1] [  3.077] recv HEADERS frame <length=4, flags=0x04, stream_id=3>\n          ; END_HEADERS\n          (padlen=0)\n          ; Open new stream\n\n\u30b9\u30c8\u30ea\u30fc\u30e0ID\u304c\u6b21\u306e\u756a\u53f7\u304c\u63a1\u7528\u3055\u308c\u30663\u306b\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\u30b9\u30c8\u30ea\u30fc\u30e0ID1\u306eGET\u3067\u300cEND_STREAM | END_HEADERS\u300d\u306b\u3057\u3066\u3044\u308b\u3002\n\u4e00\u3064\u306e\u30b9\u30c8\u30ea\u30fc\u30e0ID\u3067\u57fa\u672c\u7684\u306b\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u304c1\u56de\u305a\u3064\u306a\u306e\u304b\u306a\u3002\n\u3053\u306e\u8fba\u306f\u7406\u89e3\u304c\u6d45\u3044\u306e\u3067\u3082\u3046\u5c11\u3057\u52c9\u5f37\u3002\n\nSSL\u5bfe\u5fdc\u3068\u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u306e\u53d7\u4fe1\nHTTP2\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304cGET\u3057\u306b\u304f\u308b\u3067\u3042\u308d\u3046\u30ea\u30bd\u30fc\u30b9\u3092\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u30d7\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u3068\u306e\u7af6\u5408\u3092\u9632\u3050\u305f\u3081\u306b\u3001\u305d\u306e\u30ea\u30bd\u30fc\u30b9\u306e\u30d1\u30b9\u3092\u542b\u3080\u30dc\u30c7\u30a3\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\u524d\u306b\u3001\u30b5\u30fc\u30d0\u30fc\u304b\u3089PUSH_PROMISE\u3068\u3044\u3046\u5f62\u3067\u4e88\u7d04\u3055\u308c\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067body\u306e\u4e2d\u8eab\u3092GET\u3057\u306b\u3044\u3053\u3046\u3068\u3057\u305f\u6642\u306b\u3059\u3067\u306b\u30d7\u30c3\u30b7\u30e5\u304c\u6765\u3066\u3044\u308b\u3068\u3044\u3046\u3088\u3046\u306a\u4e8b\u614b\u3092\u9632\u304e\u307e\u3059\u3002\n#include <iostream>\n\n#include <nghttp2/asio_http2_client.h>\n\nusing boost::asio::ip::tcp;\n\nusing namespace nghttp2::asio_http2;\nusing namespace nghttp2::asio_http2::client;\n\nint main(int argc, char *argv[]) {\n\n  // \u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3068\u975e\u540c\u671f\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n  boost::system::error_code ec;\n  boost::asio::io_service io_service;\n\n  boost::asio::ssl::context tls(boost::asio::ssl::context::sslv23);\n  tls.set_default_verify_paths();\n\n  // disabled to make development easier...\n  // tls_ctx.set_verify_mode(boost::asio::ssl::verify_peer);\n  configure_tls_context(ec, tls);\n\n  // \u30bb\u30c3\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n  session sess(io_service, tls, \"nghttp2.test\", \"8080\");                                                                                                               \n\n  // \u63a5\u7d9a (\u81ea\u8eab\u306esess\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u307e\u3059)\n  sess.on_connect([&sess](tcp::resolver::iterator endpoint_it) {\n\n    boost::system::error_code ec;\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\n    auto req = sess.submit(ec, \"GET\", \"https://nghttp2.test:8080/\");\n\n    // \u30e9\u30e0\u30c0\u5f0f\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a\n    req->on_response([](const response &res) {\n\n      // status_code()\u3067\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\n      std::cerr << \"HTTP/2 \" << res.status_code() << std::endl;\n\n      // \u30d8\u30c3\u30c0\u306e\u30de\u30c3\u30d7\u3092\u30eb\u30fc\u30d7\u3059\u308b\n      for (auto &kv : res.header()) {\n\n        // \u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u8868\u793a\u3059\u308b\n        std::cerr << kv.first << \": \" << kv.second.value << \"\\n\";\n      }\n      std::cerr << std::endl;\n\n      // on_data\u3067\u30e9\u30e0\u30c0\u5f0f\u3067DATA\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a.\n      res.on_data([](const uint8_t *data, std::size_t len) {\n        std::cerr.write(reinterpret_cast<const char *>(data), len);\n        std::cerr << std::endl;\n      });\n    });\n\n    // \u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u3092\u53d7\u3051\u53d6\u308b.\n    req->on_push([](const request &push) {\n\n      std::cerr << \"push request received!\" << std::endl;\n\n      push.on_response([](const response &res) {\n\n        std::cerr << \"push response received!\" << std::endl;\n\n        res.on_data([](const uint8_t *data, std::size_t len) {\n          std::cerr.write(reinterpret_cast<const char *>(data), len);\n          std::cerr << std::endl;\n        });\n      });\n    });\n\n    // \u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u30af\u30ed\u30fc\u30ba\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b.\n    req->on_close([&sess](uint32_t error_code) {\n      // shutdown session after first request was done.\n      sess.shutdown();\n    });\n  });\n\n  // \u30a8\u30e9\u30fc\u306e\u6642\u306b\u547c\u3070\u308c\u308b\n  sess.on_error([](const boost::system::error_code &ec) {\n    std::cerr << \"error: \" << ec.message() << std::endl;\n  });\n\n  // \u3053\u3053\u3067run()\u3057\u3066on_connect()\u304c\u547c\u3070\u308c\u308b\n  io_service.run();\n}\n\n\u30b5\u30fc\u30d0\u30fc\u306e\u8d77\u52d5\n-p\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u306e\u30d1\u30b9\u3068\u30ea\u30bd\u30fc\u30b9\u306e\u5834\u6240\u3092\u6307\u5b9a\u3002\n-htdocs\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30eb\u30fc\u30c8\u3092\u6307\u5b9a\u3059\u308b\u304c\u3001\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u30ab\u30ec\u30f3\u30c8\u304c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30eb\u30fc\u30c8\u306b\u306a\u308b\u3002\nnghttpd -v -d \"\" 8080 -p/=/style.css server.key server.crt \n\n\u7d50\u679c\n./client \npush request received!\nHTTP/2 200\ncache-control: max-age=3600\ncontent-length: 169\ndate: Fri, 03 Apr 2015 05:41:05 GMT\nlast-modified: Tue, 31 Mar 2015 04:44:56 GMT\nserver: nghttpd nghttp2/0.7.10-DEV\n\n<!DOCTYPE html><html lang=\"en\">\n<title>HTTP/2 FTW</title><body>\n<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<h1>This should be green</h1>\n</body></html>\n\n\u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u304c\u53d7\u3051\u53d6\u308c\u3066\u3044\u306a\u3044\u3002\npush\u306eon_response()\u304c\u547c\u3070\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u3060\u3002\n\u300cpush request received!\u300d\u3092\u8868\u793a\u3057\u3066\u3044\u308b\u306e\u3067PUSH_PROMISE\u307e\u3067\u306f\u53d7\u4fe1\u3067\u304d\u3066\u3044\u308b\u3002\n\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u51fa\u529b\u3092\u898b\u3066\u307f\u308b\u3068\u30b9\u30c8\u30ea\u30fc\u30e0ID2\u3067\u9001\u4fe1\u307e\u3067\u5b8c\u4e86\u3057\u3066\u308b\u3002\n\u4eca\u56de\u7528\u610f\u3057\u305f\u300cstyle.css\u300d\u306f67\u30d0\u30a4\u30c8\u3067\u3001\u9001\u4fe1\u3057\u3066\u308bDATA\u30d5\u30ec\u30fc\u30e0\u3082length=67\u306a\u306e\u3067\u78ba\u304b\u306b\u9001\u3063\u3066\u308b\u3002\n[id=3] [803.311] send DATA frame <length=67, flags=0x01, stream_id=2>\n          ; END_STREAM\n\nnghttp2\u306eAPI\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3088\u304f\u8aad\u3093\u3060\u3089\u3001on_close()\u306e\u4e2d\u3067sess.shutdown();\u3057\u3066\u308b\u306e\u304c\u539f\u56e0\u3060\u3068\u5224\u660e\u3002(\u30b3\u30d4\u30da\u305b\u305a\u306b\u524d\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u66f8\u304d\u52a0\u3048\u305f\u304b\u3089\u3053\u306e\u90e8\u5206\u3092\u524a\u3063\u3066\u3044\u306a\u304b\u3063\u305f)\n\u3053\u306eon_close()\u306freq\u306b\u7d50\u3073\u3064\u3044\u3066\u308b\u306e\u3067\u3001\u305f\u3076\u3093\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u9589\u3058\u3089\u308c\u305f\u6642(END_STREAM\u30d5\u30e9\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u5f8c?)\u306b\u547c\u3070\u308c\u308b\u3002\n\u306a\u306e\u3067\u3001\u4e88\u7d04\u3055\u308c\u305f\u30d7\u30c3\u30b7\u30e5\u306eDATA\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u4fe1\u3059\u308b\u524d\u306bshutdown()\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u3060\u3051\u3060\u3063\u305f\u3002\n\u7121\u4e8b\u306b\u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u3092\u53d7\u4fe1\u3067\u304d\u307e\u3057\u305f\u3002\npush request received!\nHTTP/2 200\ncache-control: max-age=3600\ncontent-length: 169\ndate: Fri, 03 Apr 2015 05:55:58 GMT\nlast-modified: Tue, 31 Mar 2015 04:44:56 GMT\nserver: nghttpd nghttp2/0.7.10-DEV\n\n<!DOCTYPE html><html lang=\"en\">\n<title>HTTP/2 FTW</title><body>\n<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<h1>This should be green</h1>\n</body></html>\n\npush response received!\nh1 {\n  font-size: 200%;\n  color: #556644;\n  padding: 10px 10px;\n}\n\n\u4ed6\u306b\u306f\u901a\u4fe1resume()\u304c\u3067\u304d\u305f\u308a\u3001\u30d1\u30b9\u306b\u5fdc\u3058\u3066\u52d5\u7684\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u751f\u6210\u3057\u3066\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u305d\u306e\u5834\u5408\u306bwrite_trailer()\u3067\u30d8\u30c3\u30c0\u30fc\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3089\u3057\u3044\u3002\nnghttp2\u306e\u30cf\u30a4\u30ec\u30d9\u30ebAPI\u4fbf\u5229\u3067\u3059\u3002\nHTTP2\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u4f7f\u3048\u308bnghttp2\u3092\u4f7f\u3046\u30a8\u30f3\u30c8\u30ea\u3067\u3059\u3002\nnghttp2\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f[#1](http://qiita.com/0xfffffff7/items/c8f195c9f1782ca64e92)\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n# \u6982\u8981\n\n\u5f15\u304d\u7d9a\u304d\u30cf\u30a4\u30ec\u30d9\u30ebAPI\u300clibnghttp2_asio\u300d\u3092\u3082\u3046\u5c11\u3057\u4f7f\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nhttps://nghttp2.org/documentation/libnghttp2_asio.html\n\n\u4eca\u56de\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3057\u3066\u307f\u307e\u3059\u3002\n\n# GET\u3057\u3066\u307f\u308b\n\n\u30bd\u30fc\u30b9\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n```\n#include <iostream>\n\n#include <nghttp2/asio_http2_client.h>\n\nusing boost::asio::ip::tcp;\n\nusing namespace nghttp2::asio_http2;\nusing namespace nghttp2::asio_http2::client;\n\nint main(int argc, char *argv[]) {\n\n  // \u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3068\u975e\u540c\u671f\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n  boost::system::error_code ec;\n  boost::asio::io_service io_service;\n\n  // \u30bb\u30c3\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n  session sess(io_service, \"nghttp2.test\", \"8080\"); \n\n  // \u63a5\u7d9a (\u81ea\u8eab\u306esess\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u307e\u3059)\n  sess.on_connect([&sess](tcp::resolver::iterator endpoint_it) {\n\n    boost::system::error_code ec;\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\n    auto req = sess.submit(ec, \"GET\", \"http://nghttp2.test:8080/\"); \n\n    // \u30e9\u30e0\u30c0\u5f0f\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a\n    req->on_response([](const response &res) {\n\n      // status_code()\u3067\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\n      std::cerr << \"HTTP/2 \" << res.status_code() << std::endl;\n\n      // \u30d8\u30c3\u30c0\u306e\u30de\u30c3\u30d7\u3092\u30eb\u30fc\u30d7\u3059\u308b\n      for (auto &kv : res.header()) {\n\n        // \u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u8868\u793a\u3059\u308b\n        std::cerr << kv.first << \": \" << kv.second.value << \"\\n\";\n      }\n      std::cerr << std::endl;\n\n      // on_data\u3067\u30e9\u30e0\u30c0\u5f0f\u3067DATA\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a.\n      res.on_data([](const uint8_t *data, std::size_t len) {\n        std::cerr.write(reinterpret_cast<const char *>(data), len);\n        std::cerr << std::endl;\n      });\n    });\n\n    // \u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u30af\u30ed\u30fc\u30ba\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b.\n    req->on_close([&sess](uint32_t error_code) {\n      // shutdown session after first request was done.\n      sess.shutdown();\n    });\n  });\n\n  // \u30a8\u30e9\u30fc\u306e\u6642\u306b\u547c\u3070\u308c\u308b\n  sess.on_error([](const boost::system::error_code &ec) {\n    std::cerr << \"error: \" << ec.message() << std::endl;\n  });\n\n  // \u3053\u3053\u3067run()\u3057\u3066on_connect()\u304c\u547c\u3070\u308c\u308b\n  io_service.run();\n}\n```\n\n\u30d3\u30eb\u30c9\n\n```\ng++ -o client client.cpp -lnghttp2_asio -lboost_system -std=c++11 -lssl -lcrypto -lpthread\n```\n\nnghttp2\u306e\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```\nnghttpd -v -d \"\" --no-tls 8080\n```\n\n\u30d3\u30eb\u30c9\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8d77\u52d5\u3057\u3066\u307f\u308b\u3002\n\n```\n./client\n\nHTTP/2 200\ncache-control: max-age=3600\ncontent-length: 169\ndate: Fri, 03 Apr 2015 04:40:00 GMT\nlast-modified: Tue, 31 Mar 2015 04:44:56 GMT\nserver: nghttpd nghttp2/0.7.10-DEV\n\n<!DOCTYPE html><html lang=\"en\">\n<title>HTTP/2 FTW</title><body>\n<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<h1>This should be green</h1>\n</body></html>\n```\n\n# GET\u306e\u5f8c\u306bPOST\u3057\u3066\u307f\u308b\n\nsession\u30af\u30e9\u30b9\u306esubmit\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u9001\u4fe1\u7528\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u3042\u308b\u306e\u3067POST\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n#include <iostream>\n\n#include <nghttp2/asio_http2_client.h>\n\nusing boost::asio::ip::tcp;\n\nusing namespace nghttp2::asio_http2;\nusing namespace nghttp2::asio_http2::client;\n\nint main(int argc, char *argv[]) {\n\n  // \u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3068\u975e\u540c\u671f\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n  boost::system::error_code ec;\n  boost::asio::io_service io_service;\n\n  // \u30bb\u30c3\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n  session sess(io_service, \"nghttp2.test\", \"8080\");                                                                                                               \n\n  // \u63a5\u7d9a (\u81ea\u8eab\u306esess\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u307e\u3059)\n  sess.on_connect([&sess](tcp::resolver::iterator endpoint_it) {\n\n    boost::system::error_code ec;\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\n    auto req = sess.submit(ec, \"GET\", \"http://nghttp2.test:8080/\");\n\n    // \u30e9\u30e0\u30c0\u5f0f\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a\n    req->on_response([](const response &res) {\n\n      // status_code()\u3067\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\n      std::cerr << \"HTTP/2 \" << res.status_code() << std::endl;\n\n      // \u30d8\u30c3\u30c0\u306e\u30de\u30c3\u30d7\u3092\u30eb\u30fc\u30d7\u3059\u308b\n      for (auto &kv : res.header()) {\n\n        // \u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u8868\u793a\u3059\u308b\n        std::cerr << kv.first << \": \" << kv.second.value << \"\\n\";\n      }\n      std::cerr << std::endl;\n\n      // on_data\u3067\u30e9\u30e0\u30c0\u5f0f\u3067DATA\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a.\n      res.on_data([](const uint8_t *data, std::size_t len) {\n        std::cerr.write(reinterpret_cast<const char *>(data), len);\n        std::cerr << std::endl;\n      });\n    });\n\n\n    // POST\n    auto req2 = sess.submit(ec, \"POST\", \"http://nghttp2.test:8080/\", \"THIS IS POST DATA!!\");\n\n    req2->on_response([](const response &res) {\n      std::cerr << \"HTTP/2 \" << res.status_code() << std::endl;\n\n      for (auto &kv : res.header()) {\n        std::cerr << kv.first << \": \" << kv.second.value << \"\\n\";\n      }\n      std::cerr << std::endl;\n\n      res.on_data([](const uint8_t *data, std::size_t len) {\n        std::cerr.write(reinterpret_cast<const char *>(data), len);\n        std::cerr << std::endl;\n      });\n    });\n\n\n    // \u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u30af\u30ed\u30fc\u30ba\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b.\n    req->on_close([&sess](uint32_t error_code) {\n      // shutdown session after first request was done.\n      sess.shutdown();\n    });\n  });\n\n  // \u30a8\u30e9\u30fc\u306e\u6642\u306b\u547c\u3070\u308c\u308b\n  sess.on_error([](const boost::system::error_code &ec) {\n    std::cerr << \"error: \" << ec.message() << std::endl;\n  });\n\n  // \u3053\u3053\u3067run()\u3057\u3066on_connect()\u304c\u547c\u3070\u308c\u308b\n  io_service.run();\n}\n```\n\n\u30b5\u30fc\u30d0\u30fc\u5074\u306f\u9759\u7684\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8fd4\u3059\u3060\u3051\u306a\u306e\u3067\u7279\u306b\u306a\u306b\u3082\u305b\u305a\u306b\u30aa\u30a6\u30e0\u8fd4\u3057\u3002\n\n```\n./client \nHTTP/2 200\ncache-control: max-age=3600\ncontent-length: 169\ndate: Fri, 03 Apr 2015 04:53:19 GMT\nlast-modified: Tue, 31 Mar 2015 04:44:56 GMT\nserver: nghttpd nghttp2/0.7.10-DEV\n\nHTTP/2 200\ncache-control: max-age=3600\ncontent-length: 169\ndate: Fri, 03 Apr 2015 04:53:19 GMT\nlast-modified: Tue, 31 Mar 2015 04:44:56 GMT\nserver: nghttpd nghttp2/0.7.10-DEV\n\n<!DOCTYPE html><html lang=\"en\">\n<title>HTTP/2 FTW</title><body>\n<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<h1>This should be green</h1>\n</body></html>\n\n<!DOCTYPE html><html lang=\"en\">\n<title>HTTP/2 FTW</title><body>\n<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<h1>This should be green</h1>\n</body></html>\n```\n\n\u3057\u304b\u3057\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u30b9\u30c8\u30ea\u30fc\u30e0ID3\u3067\u6b63\u3057\u304fPOST\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3055\u3070\u3044\u3066\u308b\u3053\u3068\u306f\u78ba\u8a8d\u3002\n\n```\n[id=1] [  3.077] recv (stream_id=3) :method: POST\n[id=1] [  3.077] recv (stream_id=3) :scheme: http\n[id=1] [  3.077] recv (stream_id=3) :path: /\n[id=1] [  3.077] recv (stream_id=3) :authority: nghttp2.test:8080\n[id=1] [  3.077] recv HEADERS frame <length=4, flags=0x04, stream_id=3>\n          ; END_HEADERS\n          (padlen=0)\n          ; Open new stream\n```\n\n\u30b9\u30c8\u30ea\u30fc\u30e0ID\u304c\u6b21\u306e\u756a\u53f7\u304c\u63a1\u7528\u3055\u308c\u30663\u306b\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\u30b9\u30c8\u30ea\u30fc\u30e0ID1\u306eGET\u3067\u300cEND_STREAM | END_HEADERS\u300d\u306b\u3057\u3066\u3044\u308b\u3002\n\n\u4e00\u3064\u306e\u30b9\u30c8\u30ea\u30fc\u30e0ID\u3067\u57fa\u672c\u7684\u306b\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u304c1\u56de\u305a\u3064\u306a\u306e\u304b\u306a\u3002\n\u3053\u306e\u8fba\u306f\u7406\u89e3\u304c\u6d45\u3044\u306e\u3067\u3082\u3046\u5c11\u3057\u52c9\u5f37\u3002\n\n\n\n# SSL\u5bfe\u5fdc\u3068\u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u306e\u53d7\u4fe1\n\nHTTP2\u306f\u3001\u3042\u3089\u304b\u3058\u3081\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304cGET\u3057\u306b\u304f\u308b\u3067\u3042\u308d\u3046\u30ea\u30bd\u30fc\u30b9\u3092\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u30d7\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u3068\u306e\u7af6\u5408\u3092\u9632\u3050\u305f\u3081\u306b\u3001\u305d\u306e\u30ea\u30bd\u30fc\u30b9\u306e\u30d1\u30b9\u3092\u542b\u3080\u30dc\u30c7\u30a3\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\u524d\u306b\u3001\u30b5\u30fc\u30d0\u30fc\u304b\u3089PUSH_PROMISE\u3068\u3044\u3046\u5f62\u3067\u4e88\u7d04\u3055\u308c\u307e\u3059\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067body\u306e\u4e2d\u8eab\u3092GET\u3057\u306b\u3044\u3053\u3046\u3068\u3057\u305f\u6642\u306b\u3059\u3067\u306b\u30d7\u30c3\u30b7\u30e5\u304c\u6765\u3066\u3044\u308b\u3068\u3044\u3046\u3088\u3046\u306a\u4e8b\u614b\u3092\u9632\u304e\u307e\u3059\u3002\n\n```\n#include <iostream>\n\n#include <nghttp2/asio_http2_client.h>\n\nusing boost::asio::ip::tcp;\n\nusing namespace nghttp2::asio_http2;\nusing namespace nghttp2::asio_http2::client;\n\nint main(int argc, char *argv[]) {\n\n  // \u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u3068\u975e\u540c\u671f\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n  boost::system::error_code ec;\n  boost::asio::io_service io_service;\n\n  boost::asio::ssl::context tls(boost::asio::ssl::context::sslv23);\n  tls.set_default_verify_paths();\n\n  // disabled to make development easier...\n  // tls_ctx.set_verify_mode(boost::asio::ssl::verify_peer);\n  configure_tls_context(ec, tls);\n\n  // \u30bb\u30c3\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n  session sess(io_service, tls, \"nghttp2.test\", \"8080\");                                                                                                               \n\n  // \u63a5\u7d9a (\u81ea\u8eab\u306esess\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u307e\u3059)\n  sess.on_connect([&sess](tcp::resolver::iterator endpoint_it) {\n\n    boost::system::error_code ec;\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\n    auto req = sess.submit(ec, \"GET\", \"https://nghttp2.test:8080/\");\n\n    // \u30e9\u30e0\u30c0\u5f0f\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a\n    req->on_response([](const response &res) {\n\n      // status_code()\u3067\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\n      std::cerr << \"HTTP/2 \" << res.status_code() << std::endl;\n\n      // \u30d8\u30c3\u30c0\u306e\u30de\u30c3\u30d7\u3092\u30eb\u30fc\u30d7\u3059\u308b\n      for (auto &kv : res.header()) {\n\n        // \u30ad\u30fc\u3068\u30d0\u30ea\u30e5\u30fc\u3092\u8868\u793a\u3059\u308b\n        std::cerr << kv.first << \": \" << kv.second.value << \"\\n\";\n      }\n      std::cerr << std::endl;\n\n      // on_data\u3067\u30e9\u30e0\u30c0\u5f0f\u3067DATA\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u6307\u5b9a.\n      res.on_data([](const uint8_t *data, std::size_t len) {\n        std::cerr.write(reinterpret_cast<const char *>(data), len);\n        std::cerr << std::endl;\n      });\n    });\n\n    // \u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u3092\u53d7\u3051\u53d6\u308b.\n    req->on_push([](const request &push) {\n\n      std::cerr << \"push request received!\" << std::endl;\n\n      push.on_response([](const response &res) {\n\n        std::cerr << \"push response received!\" << std::endl;\n\n        res.on_data([](const uint8_t *data, std::size_t len) {\n          std::cerr.write(reinterpret_cast<const char *>(data), len);\n          std::cerr << std::endl;\n        });\n      });\n    });\n\n    // \u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u30af\u30ed\u30fc\u30ba\u3057\u305f\u969b\u306b\u547c\u3070\u308c\u308b.\n    req->on_close([&sess](uint32_t error_code) {\n      // shutdown session after first request was done.\n      sess.shutdown();\n    });\n  });\n\n  // \u30a8\u30e9\u30fc\u306e\u6642\u306b\u547c\u3070\u308c\u308b\n  sess.on_error([](const boost::system::error_code &ec) {\n    std::cerr << \"error: \" << ec.message() << std::endl;\n  });\n\n  // \u3053\u3053\u3067run()\u3057\u3066on_connect()\u304c\u547c\u3070\u308c\u308b\n  io_service.run();\n}\n```\n\n\u30b5\u30fc\u30d0\u30fc\u306e\u8d77\u52d5\n\n-p\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u306e\u30d1\u30b9\u3068\u30ea\u30bd\u30fc\u30b9\u306e\u5834\u6240\u3092\u6307\u5b9a\u3002\n-htdocs\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30eb\u30fc\u30c8\u3092\u6307\u5b9a\u3059\u308b\u304c\u3001\u6307\u5b9a\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u30ab\u30ec\u30f3\u30c8\u304c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30eb\u30fc\u30c8\u306b\u306a\u308b\u3002\n\n```\nnghttpd -v -d \"\" 8080 -p/=/style.css server.key server.crt \n```\n\n\u7d50\u679c\n\n```\n./client \npush request received!\nHTTP/2 200\ncache-control: max-age=3600\ncontent-length: 169\ndate: Fri, 03 Apr 2015 05:41:05 GMT\nlast-modified: Tue, 31 Mar 2015 04:44:56 GMT\nserver: nghttpd nghttp2/0.7.10-DEV\n\n<!DOCTYPE html><html lang=\"en\">\n<title>HTTP/2 FTW</title><body>\n<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<h1>This should be green</h1>\n</body></html>\n```\n\n\u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u304c\u53d7\u3051\u53d6\u308c\u3066\u3044\u306a\u3044\u3002\npush\u306eon_response()\u304c\u547c\u3070\u308c\u3066\u3044\u306a\u3044\u3088\u3046\u3060\u3002\n\n\u300cpush request received!\u300d\u3092\u8868\u793a\u3057\u3066\u3044\u308b\u306e\u3067PUSH_PROMISE\u307e\u3067\u306f\u53d7\u4fe1\u3067\u304d\u3066\u3044\u308b\u3002\n\n\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u51fa\u529b\u3092\u898b\u3066\u307f\u308b\u3068\u30b9\u30c8\u30ea\u30fc\u30e0ID2\u3067\u9001\u4fe1\u307e\u3067\u5b8c\u4e86\u3057\u3066\u308b\u3002\n\u4eca\u56de\u7528\u610f\u3057\u305f\u300cstyle.css\u300d\u306f67\u30d0\u30a4\u30c8\u3067\u3001\u9001\u4fe1\u3057\u3066\u308bDATA\u30d5\u30ec\u30fc\u30e0\u3082length=67\u306a\u306e\u3067\u78ba\u304b\u306b\u9001\u3063\u3066\u308b\u3002\n\n```\n[id=3] [803.311] send DATA frame <length=67, flags=0x01, stream_id=2>\n          ; END_STREAM\n```\n\nnghttp2\u306eAPI\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3088\u304f\u8aad\u3093\u3060\u3089\u3001on_close()\u306e\u4e2d\u3067sess.shutdown();\u3057\u3066\u308b\u306e\u304c\u539f\u56e0\u3060\u3068\u5224\u660e\u3002(\u30b3\u30d4\u30da\u305b\u305a\u306b\u524d\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u66f8\u304d\u52a0\u3048\u305f\u304b\u3089\u3053\u306e\u90e8\u5206\u3092\u524a\u3063\u3066\u3044\u306a\u304b\u3063\u305f)\n\n\u3053\u306eon_close()\u306freq\u306b\u7d50\u3073\u3064\u3044\u3066\u308b\u306e\u3067\u3001\u305f\u3076\u3093\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u9589\u3058\u3089\u308c\u305f\u6642(END_STREAM\u30d5\u30e9\u30b0\u3092\u53d7\u4fe1\u3057\u305f\u5f8c?)\u306b\u547c\u3070\u308c\u308b\u3002\n\u306a\u306e\u3067\u3001\u4e88\u7d04\u3055\u308c\u305f\u30d7\u30c3\u30b7\u30e5\u306eDATA\u30d5\u30ec\u30fc\u30e0\u3092\u53d7\u4fe1\u3059\u308b\u524d\u306bshutdown()\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u3060\u3051\u3060\u3063\u305f\u3002\n\n\u7121\u4e8b\u306b\u30b5\u30fc\u30d0\u30fc\u30d7\u30c3\u30b7\u30e5\u3092\u53d7\u4fe1\u3067\u304d\u307e\u3057\u305f\u3002\n\n```\npush request received!\nHTTP/2 200\ncache-control: max-age=3600\ncontent-length: 169\ndate: Fri, 03 Apr 2015 05:55:58 GMT\nlast-modified: Tue, 31 Mar 2015 04:44:56 GMT\nserver: nghttpd nghttp2/0.7.10-DEV\n\n<!DOCTYPE html><html lang=\"en\">\n<title>HTTP/2 FTW</title><body>\n<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\">\n<h1>This should be green</h1>\n</body></html>\n\npush response received!\nh1 {\n  font-size: 200%;\n  color: #556644;\n  padding: 10px 10px;\n}\n```\n\n\n\u4ed6\u306b\u306f\u901a\u4fe1resume()\u304c\u3067\u304d\u305f\u308a\u3001\u30d1\u30b9\u306b\u5fdc\u3058\u3066\u52d5\u7684\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u751f\u6210\u3057\u3066\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u305d\u306e\u5834\u5408\u306bwrite_trailer()\u3067\u30d8\u30c3\u30c0\u30fc\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3089\u3057\u3044\u3002\n\nnghttp2\u306e\u30cf\u30a4\u30ec\u30d9\u30ebAPI\u4fbf\u5229\u3067\u3059\u3002\n\n", "tags": ["http2", "nghttp2", "Ubuntu", "C++", "C"]}