{"context": "\u300cZabbix\u3067\uff11\u3064\u306e\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30ea\u30fc\u30eb\u306b\u5e83\u3044IP\u30ec\u30f3\u30b8\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3002\u300d\u3053\u3093\u306a\u554f\u984c\u306b\u906d\u9047\u3057\u305f\u65b9\u3082\u4f55\u4eba\u304b\u3044\u3089\u3063\u3057\u3083\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u308c\u306fZabbix\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u304c\uff11\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30eb\u30fc\u30eb\u306f\uff11\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30d7\u30ed\u30bb\u30b9\u3067\u51e6\u7406\u3059\u308b\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n\u305d\u306e\u70ba\u3001\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30d7\u30ed\u30bb\u30b9\u3092\u5897\u3084\u3057\u3066\u3082\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u6642\u9593\u306f\u77ed\u7e2e\u3055\u308c\u307e\u305b\u3093\u3002\n\u203b\uff1a\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30eb\u30fc\u30eb\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u3001\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30d7\u30ed\u30bb\u30b9\u306e\u6570\u3092\u5897\u52a0\u3055\u305b\u308b\u306e\u306f\u6709\u52b9\u3067\u3059\u3002\n\u4e0a\u8a18\u306b\u3064\u3044\u3066\u4e0b\u8a18\u306e\u6539\u5584\u8981\u671b\u3092\u767b\u9332\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u3060\u6295\u7968\u65700\u3067\u6539\u5584\u3055\u308c\u308b\u898b\u901a\u3057\u304c\u7acb\u3063\u3066\u3044\u307e\u305b\u3093\u3002\nZBXNEXT-2732 Load balancing of the discovery process\n\u73fe\u5728\u306e\u4ed5\u69d8\u300c\uff11\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30eb\u30fc\u30eb\u306f\uff11\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30d7\u30ed\u30bb\u30b9\u3067\u51e6\u7406\u300d\u3067\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u6642\u9593\u3092\u77ed\u7e2e\u3059\u308b\u306b\u306f\u3001\u5e83\u7bc4\u56f2\u306eIP\u30ec\u30f3\u30b8\u3092\u7d30\u304b\u304f\u5206\u5272\u3057\u3066\u767b\u9332\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u3044\u3061\u3044\u3061\u7d30\u304b\u304f\u8a08\u7b97\u3059\u308b\u306e\u306f\u9762\u5012\u3067\u3059\u3057\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n\u305d\u308c\u306a\u3089ZabbixAPI\u306e\u300cdrule.create\u300d\u3092\u4f7f\u3063\u3066IP\u7bc4\u56f2\u3092\u5206\u5272\u3057\u3066\u767b\u9332\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u3001IP\u7bc4\u56f2\u3092\u5206\u5272\u3059\u308b\u30ed\u30b8\u30c3\u30af\u3092\u8003\u3048\u305f\u3089\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u5148\u7a0b\u306eZBXNEXT-2732\u306b\u3082\u6dfb\u4ed8\u3057\u3066\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306fPython\u3067\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002\n\nsplite_drule.py\n# -*- coding: utf-8 -*- \nimport sys, json, urllib2\n\nheaders = {\"Content-Type\":\"application/json-rpc\"}\n\n# login\ndef login(usr, pw, url, headers):\n    auth_post = json.dumps({'jsonrpc':'2.0', 'method':'user.login', 'params':{'user':usr, 'password':pw}, 'auth':None, 'id': 1})\n    req = urllib2.Request(url, auth_post, headers)\n\n    res = urllib2.urlopen(req)\n    jdata = json.loads(res.read())\n    if \"error\" in jdata:\n        print auth_post\n        error = jdata[\"error\"]\n        print error[\"message\"]\n        print error[\"code\"]\n        print error[\"data\"]\n        quit()\n    return jdata[\"result\"]\n\n# file read\ndef get_drule(flnm):\n    f = open(flnm)\n    jdata = json.load(f)\n    f.close()\n    return jdata\n\n# get name\ndef get_name(jdata):\n    params = jdata[\"params\"]\n    return params[\"name\"]\n\n# set params\ndef set_params(jdata, iprange, name):\n    params = jdata[\"params\"]\n    params[\"iprange\"] = iprange\n    params[\"name\"] = name\n    return params\n\n# chk iprange\ndef chk_iprange(iprange, out):\n    if iprange.find(\"/\")==-1:\n        print 'Bad IP Range: '+iprange\n        print '    \"/\" does not exist in the string'\n        return False\n    if iprange.count(\"/\")!=1:\n        print 'Bad IP Range: '+iprange\n        print '    \"/\" there is more than one in a string'\n                return False\n\n    tmp = iprange.split(\"/\")\n    out[0] = tmp[0]\n    out[1] = tmp[1]\n\n    if not out[1].isdigit():\n        print 'Bad IP Range: '+iprange\n        print '    prefix is not numeric'\n        return False\n\n    if int(out[1]) <= 0 or int(out[1]) >= 24:\n        print 'Bad IP Range: '+iprange\n        print '    prefix Range : 0 < prefix < 24'\n        return False\n\n    tmp = out[0].split(\".\")\n    out[2] = tmp[0]\n    out[3] = tmp[1]\n    out[4] = tmp[2]\n    out[5] = tmp[3]\n\n    if not out[2].isdigit():\n        print 'Bad IP Range: '+iprange\n        print '    octet 1 is not numeric'\n        return False\n\n    if int(out[2]) < 0 or int(out[2]) > 255:\n        print 'Bad IP Range: '+iprange\n        print '    octet 1 Range : 0 <= octet 1 <= 255'\n        return False\n\n    if not out[3].isdigit():\n        print 'Bad IP Range: '+iprange\n        print '    octet 2 is not numeric'\n        return False\n\n    if int(out[3]) < 0 or int(out[3]) > 255:\n        print 'Bad IP Range: '+iprange\n        print '    octet 2 Range : 0 <= octet 2 <= 255'\n        return False\n\n    if not out[4].isdigit():\n        print 'Bad IP Range: '+iprange\n        print '    octet 3 is not numeric'\n        return False\n\n    if int(out[4]) < 0 or int(out[4]) > 255:\n        print 'Bad IP Range: '+iprange\n        print '    octet 3 Range : 0 <= octet 3 <= 255'\n        return False\n\n    if not out[5].isdigit():\n        print 'Bad IP Range: '+iprange\n        print '    octet 4 is not numeric'\n        return False\n\n    if int(out[5]) < 0 or int(out[5]) > 255:\n        print 'Bad IP Range: '+iprange\n        print '    octet 4 Range : 0 <= octet 4 <= 255'\n        return False\n\n    return True\n\n# chk split\ndef chk_split(prefix, sp):\n    if not sp.isdigit():\n        print 'Bad split: ' + sp\n        print '    split is not numeric'\n        return False\n\n    if int(sp) <= 1 or int(sp) > 24:\n        print 'Bad split Range: ' + sp\n        print '    split Range : 1 <= split <= 24'\n        return False\n\n    if int(sp) <= int(prefix):\n        print 'Bad prefix(' + prefix + ') & split(' + sp + ')'\n        print '    prefix < split' \n        return False\n\n    return True\n\n# create drule\ndef create_drule(url, jdata, iprange, sp, name):\n    tmp = [\"\",\"\",\"\",\"\",\"\",\"\"]\n    if not chk_iprange(iprange, tmp):\n        return False\n\n    ip = tmp[0]\n    prefix = tmp[1]\n    o1 = tmp[2]\n    o2 = tmp[3]\n    o3 = tmp[4]\n    o4 = tmp[5]\n\n    if not chk_split(prefix, sp):\n        return False\n\n    sum = (int(o1) << 24 | int(o2) << 16 | int(o3) << 8 | int(o4) ) & (0xFFFFFFFF - (2 ** (32 - int(sp))))\n    sum = sum >> (32-int(prefix))\n    sum = sum << (32-int(prefix))\n\n    for i in range(0, 2 << (int(sp) - int(prefix) - 1)):\n        a = sum | (i<<8) * (2 ** (24 - int(sp)))\n        # split\n        o1 = (a & 0xFF000000) >> 24\n        o2 = (a & 0x00FF0000) >> 16\n        o3 = (a & 0x0000FF00) >> 8\n        o4 = 0\n        tmp = str(o1) + \".\" + str(o2) + \".\" + str(o3) + \".\" + str(o4)\n\n        jdata[\"params\"] = set_params(jdata, tmp + \"/\" + sp, name + str(i+1))\n        # debug\n#       print json.dumps(jdata)\n\n        req = urllib2.Request(url, json.dumps(jdata), headers)\n        res = urllib2.urlopen(req)\n        ret = json.loads(res.read())\n        if \"error\" in ret:\n            print name + str(i+1)\n            print tmp\n            error = ret[\"error\"]\n            print error[\"message\"]\n            print error[\"code\"]\n            print error[\"data\"]\n            return False\n    return True\n# main\nif len(sys.argv) != 7:\n        print \"Usage : python splite_drule.py <url> <user> <password> <iprange> <split> <json file>\"\n        quit()\n\njdata = get_drule(sys.argv[6])\njdata[\"auth\"] = login(sys.argv[2], sys.argv[3], sys.argv[1], headers)\nname = get_name(jdata)\n\nret = create_drule(sys.argv[1], jdata, sys.argv[4], sys.argv[5], name)\nif ret:\n    print \"Ok\"\nelse:\n    print \"Ng\"\n\n\n\u56e0\u307f\u306bPython\u306f\u6b86\u3069\u66f8\u3044\u305f\u3053\u3068\u304c\u7121\u304f\u66f8\u304d\u65b9\u304cPython\u3063\u307d\u304f\u306a\u3044\u3088\u3046\u3067\u3059\u3002(\u7b11)\n\u4f7f\u3044\u65b9\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3001url\u3001\u30e6\u30fc\u30b6\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3001IP\u7bc4\u56f2\u3001\u5206\u5272\u7bc4\u56f2\u3001drule.create\u3092\u66f8\u3044\u305fjson\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\npython splite_drule.py <url> <user> <password> <iprange> <split> <json file>\n\n<url>       : http://192.xxx.xx.xxx/zabbix/api_jsonrpc.php\n<user>      : admin\n<password>  : zabbix\n<iprange>   : 192.168.0.0/16\n<split>     : 19\n<json file> : /tmp/drule.json\n\n\u4ee5\u4e0b\u3001\u5b9f\u884c\u4f8b\n\u3053\u306e\u72b6\u614b\u3067\u2026\n\n\u4ee5\u4e0b\u3092\u5b9f\u884c\u3059\u308b\u3068\u2026\n]# python splite_drule.py http://xxx.xxx.xxx.xxx/zabbix/api_jsonrpc.php admin zabbix 192.111.1.0/16 19 /usr/local/src/dru\nle.json\nOk\n\n\u3053\u3093\u306a\u611f\u3058\u306bIP\u7bc4\u56f2\u304c\u5206\u5272\u3055\u308c\u3066\u767b\u9332\u3055\u308c\u307e\u3059\u3002\n\n\u5b9f\u884c\u30a8\u30e9\u30fc\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u51fa\u307e\u3059\u3002(2\u91cd\u767b\u9332\u306e\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002)\n]# python splite_drule.py http://xxx.xxx.xxx.xxx/zabbix/api_jsonrpc.php admin zabbix 192.111.1.0/16 19 /usr/local/src/drule.json\nZabbix agent discovery1\n192.111.0.0\nInvalid params.\n-32602\nDiscovery rule \"Zabbix agent discovery1\" already exists.\nNg\n\n\u4e0a\u8a18\u3067\u4f7f\u7528\u3057\u305fdrule.create\u3092\u66f8\u3044\u305fjson\u30d5\u30a1\u30a4\u30eb\u306f\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002\n\ndrule.json\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"drule.create\",\n    \"params\": {\n        \"name\": \"Zabbix agent discovery\",\n        \"iprange\": \"iprange\",\n        \"dchecks\": [\n            {\n                \"type\": \"12\"\n            }\n        ],\n        \"status\" :\"1\"\n    },\n    \"auth\": \"auth\",\n    \"id\": 1\n}\n\n\n\u4f8b\u3067\u306fICMP ping\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u30c1\u30a7\u30c3\u30af(FTP\u3001HTTP\u3001\u2026\u3001Zabbix\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8)\u3067\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u56e0\u307f\u306b\u3001drule.json\u3092\u4e00\u304b\u3089\u624b\u3067\u4f5c\u308b\u3068\u9762\u5012\u3068\u8a00\u3046\u65b9\u306f\u5143\u306b\u306a\u308b\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30eb\u30fc\u30eb\u3092Web\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u304b\u3089\u767b\u9332\u3057\u3066\u3001ZabbixAPI\u306edrule.get\u767b\u9332\u3057\u305f\u30eb\u30fc\u30eb\u3092\u53d6\u5f97\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u53d6\u5f97\u3057\u305f\u7d50\u679c\u304b\u3089\u4e0d\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u305b\u3070OK\u3067\u3059\u3002(ReadOnly\u9805\u76ee\u306f\u9664\u5916\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\n\u8a73\u3057\u304f\u306fZabbixAPI\u306eDiscovery check object\u3092\u898b\u3066\u6b32\u3057\u3044\u3067\u3059\u3002\n\u300cZabbix\u3067\uff11\u3064\u306e\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30ea\u30fc\u30eb\u306b\u5e83\u3044IP\u30ec\u30f3\u30b8\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3002\u300d\u3053\u3093\u306a\u554f\u984c\u306b\u906d\u9047\u3057\u305f\u65b9\u3082\u4f55\u4eba\u304b\u3044\u3089\u3063\u3057\u3083\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u306fZabbix\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u304c\uff11\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30eb\u30fc\u30eb\u306f\uff11\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30d7\u30ed\u30bb\u30b9\u3067\u51e6\u7406\u3059\u308b\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059\u3002\n\n\u305d\u306e\u70ba\u3001\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30d7\u30ed\u30bb\u30b9\u3092\u5897\u3084\u3057\u3066\u3082\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u6642\u9593\u306f\u77ed\u7e2e\u3055\u308c\u307e\u305b\u3093\u3002\n\u203b\uff1a\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30eb\u30fc\u30eb\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u3001\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30d7\u30ed\u30bb\u30b9\u306e\u6570\u3092\u5897\u52a0\u3055\u305b\u308b\u306e\u306f\u6709\u52b9\u3067\u3059\u3002\n\n<b>\u4e0a\u8a18\u306b\u3064\u3044\u3066\u4e0b\u8a18\u306e\u6539\u5584\u8981\u671b\u3092\u767b\u9332\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u3060\u6295\u7968\u65700\u3067\u6539\u5584\u3055\u308c\u308b\u898b\u901a\u3057\u304c\u7acb\u3063\u3066\u3044\u307e\u305b\u3093\u3002</b>\n[ZBXNEXT-2732 Load balancing of the discovery process](https://support.zabbix.com/browse/ZBXNEXT-2732)\n\n\u73fe\u5728\u306e\u4ed5\u69d8\u300c\uff11\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30eb\u30fc\u30eb\u306f\uff11\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30d7\u30ed\u30bb\u30b9\u3067\u51e6\u7406\u300d\u3067\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u6642\u9593\u3092\u77ed\u7e2e\u3059\u308b\u306b\u306f\u3001\u5e83\u7bc4\u56f2\u306eIP\u30ec\u30f3\u30b8\u3092\u7d30\u304b\u304f\u5206\u5272\u3057\u3066\u767b\u9332\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u3044\u3061\u3044\u3061\u7d30\u304b\u304f\u8a08\u7b97\u3059\u308b\u306e\u306f\u9762\u5012\u3067\u3059\u3057\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\n\n\u305d\u308c\u306a\u3089ZabbixAPI\u306e\u300cdrule.create\u300d\u3092\u4f7f\u3063\u3066IP\u7bc4\u56f2\u3092\u5206\u5272\u3057\u3066\u767b\u9332\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u3001IP\u7bc4\u56f2\u3092\u5206\u5272\u3059\u308b\u30ed\u30b8\u30c3\u30af\u3092\u8003\u3048\u305f\u3089\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u5148\u7a0b\u306eZBXNEXT-2732\u306b\u3082\u6dfb\u4ed8\u3057\u3066\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u306fPython\u3067\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py:splite_drule.py\n# -*- coding: utf-8 -*- \nimport sys, json, urllib2\n\nheaders = {\"Content-Type\":\"application/json-rpc\"}\n\n# login\ndef login(usr, pw, url, headers):\n\tauth_post = json.dumps({'jsonrpc':'2.0', 'method':'user.login', 'params':{'user':usr, 'password':pw}, 'auth':None, 'id': 1})\n\treq = urllib2.Request(url, auth_post, headers)\n\n\tres = urllib2.urlopen(req)\n\tjdata = json.loads(res.read())\n\tif \"error\" in jdata:\n\t\tprint auth_post\n\t\terror = jdata[\"error\"]\n\t\tprint error[\"message\"]\n\t\tprint error[\"code\"]\n\t\tprint error[\"data\"]\n\t\tquit()\n\treturn jdata[\"result\"]\n\n# file read\ndef get_drule(flnm):\n\tf = open(flnm)\n\tjdata = json.load(f)\n\tf.close()\n\treturn jdata\n\n# get name\ndef get_name(jdata):\n\tparams = jdata[\"params\"]\n\treturn params[\"name\"]\n\n# set params\ndef set_params(jdata, iprange, name):\n\tparams = jdata[\"params\"]\n\tparams[\"iprange\"] = iprange\n\tparams[\"name\"] = name\n\treturn params\n\n# chk iprange\ndef chk_iprange(iprange, out):\n\tif iprange.find(\"/\")==-1:\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    \"/\" does not exist in the string'\n\t\treturn False\n\tif iprange.count(\"/\")!=1:\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    \"/\" there is more than one in a string'\n                return False\n\n\ttmp = iprange.split(\"/\")\n\tout[0] = tmp[0]\n\tout[1] = tmp[1]\n\n\tif not out[1].isdigit():\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    prefix is not numeric'\n\t\treturn False\n\n\tif int(out[1]) <= 0 or int(out[1]) >= 24:\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    prefix Range : 0 < prefix < 24'\n\t\treturn False\n\n\ttmp = out[0].split(\".\")\n\tout[2] = tmp[0]\n\tout[3] = tmp[1]\n\tout[4] = tmp[2]\n\tout[5] = tmp[3]\n\n\tif not out[2].isdigit():\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    octet 1 is not numeric'\n\t\treturn False\n\n\tif int(out[2]) < 0 or int(out[2]) > 255:\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    octet 1 Range : 0 <= octet 1 <= 255'\n\t\treturn False\n\n\tif not out[3].isdigit():\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    octet 2 is not numeric'\n\t\treturn False\n\n\tif int(out[3]) < 0 or int(out[3]) > 255:\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    octet 2 Range : 0 <= octet 2 <= 255'\n\t\treturn False\n\n\tif not out[4].isdigit():\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    octet 3 is not numeric'\n\t\treturn False\n\n\tif int(out[4]) < 0 or int(out[4]) > 255:\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    octet 3 Range : 0 <= octet 3 <= 255'\n\t\treturn False\n\n\tif not out[5].isdigit():\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    octet 4 is not numeric'\n\t\treturn False\n\n\tif int(out[5]) < 0 or int(out[5]) > 255:\n\t\tprint 'Bad IP Range: '+iprange\n\t\tprint '    octet 4 Range : 0 <= octet 4 <= 255'\n\t\treturn False\n\n\treturn True\n\n# chk split\ndef chk_split(prefix, sp):\n\tif not sp.isdigit():\n\t\tprint 'Bad split: ' + sp\n\t\tprint '    split is not numeric'\n\t\treturn False\n\n\tif int(sp) <= 1 or int(sp) > 24:\n\t\tprint 'Bad split Range: ' + sp\n\t\tprint '    split Range : 1 <= split <= 24'\n\t\treturn False\n\n\tif int(sp) <= int(prefix):\n\t\tprint 'Bad prefix(' + prefix + ') & split(' + sp + ')'\n\t\tprint '    prefix < split' \n\t\treturn False\n\n\treturn True\n\n# create drule\ndef create_drule(url, jdata, iprange, sp, name):\n\ttmp = [\"\",\"\",\"\",\"\",\"\",\"\"]\n\tif not chk_iprange(iprange, tmp):\n\t\treturn False\n\n\tip = tmp[0]\n\tprefix = tmp[1]\n\to1 = tmp[2]\n\to2 = tmp[3]\n\to3 = tmp[4]\n\to4 = tmp[5]\n\n\tif not chk_split(prefix, sp):\n\t\treturn False\n\n\tsum = (int(o1) << 24 | int(o2) << 16 | int(o3) << 8 | int(o4) ) & (0xFFFFFFFF - (2 ** (32 - int(sp))))\n\tsum = sum >> (32-int(prefix))\n\tsum = sum << (32-int(prefix))\n\n\tfor i in range(0, 2 << (int(sp) - int(prefix) - 1)):\n\t\ta = sum | (i<<8) * (2 ** (24 - int(sp)))\n\t\t# split\n\t\to1 = (a & 0xFF000000) >> 24\n\t\to2 = (a & 0x00FF0000) >> 16\n\t\to3 = (a & 0x0000FF00) >> 8\n\t\to4 = 0\n\t\ttmp = str(o1) + \".\" + str(o2) + \".\" + str(o3) + \".\" + str(o4)\n\n\t\tjdata[\"params\"] = set_params(jdata, tmp + \"/\" + sp, name + str(i+1))\n\t\t# debug\n#\t\tprint json.dumps(jdata)\n\n\t\treq = urllib2.Request(url, json.dumps(jdata), headers)\n\t\tres = urllib2.urlopen(req)\n\t\tret = json.loads(res.read())\n\t\tif \"error\" in ret:\n\t\t\tprint name + str(i+1)\n\t\t\tprint tmp\n\t\t\terror = ret[\"error\"]\n\t\t\tprint error[\"message\"]\n\t\t\tprint error[\"code\"]\n\t\t\tprint error[\"data\"]\n\t\t\treturn False\n\treturn True\n# main\nif len(sys.argv) != 7:\n        print \"Usage : python splite_drule.py <url> <user> <password> <iprange> <split> <json file>\"\n        quit()\n\njdata = get_drule(sys.argv[6])\njdata[\"auth\"] = login(sys.argv[2], sys.argv[3], sys.argv[1], headers)\nname = get_name(jdata)\n\nret = create_drule(sys.argv[1], jdata, sys.argv[4], sys.argv[5], name)\nif ret:\n\tprint \"Ok\"\nelse:\n\tprint \"Ng\"\n```\n\n\u56e0\u307f\u306bPython\u306f\u6b86\u3069\u66f8\u3044\u305f\u3053\u3068\u304c\u7121\u304f\u66f8\u304d\u65b9\u304cPython\u3063\u307d\u304f\u306a\u3044\u3088\u3046\u3067\u3059\u3002(\u7b11)\n\u4f7f\u3044\u65b9\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3001url\u3001\u30e6\u30fc\u30b6\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3001IP\u7bc4\u56f2\u3001\u5206\u5272\u7bc4\u56f2\u3001drule.create\u3092\u66f8\u3044\u305fjson\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```\npython splite_drule.py <url> <user> <password> <iprange> <split> <json file>\n \n<url>       : http://192.xxx.xx.xxx/zabbix/api_jsonrpc.php\n<user>      : admin\n<password>  : zabbix\n<iprange>   : 192.168.0.0/16\n<split>     : 19\n<json file> : /tmp/drule.json\n```\n\n\u4ee5\u4e0b\u3001\u5b9f\u884c\u4f8b\n\n\u3053\u306e\u72b6\u614b\u3067\u2026\n![2016-11-26_165910.png](https://qiita-image-store.s3.amazonaws.com/0/103473/64bf4597-1d51-5ddf-3da5-c02f6c61dbc8.png)\n\n\u4ee5\u4e0b\u3092\u5b9f\u884c\u3059\u308b\u3068\u2026\n\n```\n]# python splite_drule.py http://xxx.xxx.xxx.xxx/zabbix/api_jsonrpc.php admin zabbix 192.111.1.0/16 19 /usr/local/src/dru\nle.json\nOk\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306bIP\u7bc4\u56f2\u304c\u5206\u5272\u3055\u308c\u3066\u767b\u9332\u3055\u308c\u307e\u3059\u3002\n![2016-11-26_AAA.png](https://qiita-image-store.s3.amazonaws.com/0/103473/a3cffaad-c22d-9101-5661-ba85317dfd1b.png)\n\n\u5b9f\u884c\u30a8\u30e9\u30fc\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u51fa\u307e\u3059\u3002(2\u91cd\u767b\u9332\u306e\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002)\n\n```\n]# python splite_drule.py http://xxx.xxx.xxx.xxx/zabbix/api_jsonrpc.php admin zabbix 192.111.1.0/16 19 /usr/local/src/drule.json\nZabbix agent discovery1\n192.111.0.0\nInvalid params.\n-32602\nDiscovery rule \"Zabbix agent discovery1\" already exists.\nNg\n```\n\n\u4e0a\u8a18\u3067\u4f7f\u7528\u3057\u305fdrule.create\u3092\u66f8\u3044\u305fjson\u30d5\u30a1\u30a4\u30eb\u306f\u4e0b\u8a18\u306b\u306a\u308a\u307e\u3059\u3002\n\n```json:drule.json\n{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"drule.create\",\n    \"params\": {\n        \"name\": \"Zabbix agent discovery\",\n        \"iprange\": \"iprange\",\n        \"dchecks\": [\n            {\n                \"type\": \"12\"\n            }\n        ],\n        \"status\" :\"1\"\n    },\n    \"auth\": \"auth\",\n    \"id\": 1\n}\n```\n\n\u4f8b\u3067\u306fICMP ping\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4ed6\u306e\u30c1\u30a7\u30c3\u30af(FTP\u3001HTTP\u3001\u2026\u3001Zabbix\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8)\u3067\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n\u56e0\u307f\u306b\u3001drule.json\u3092\u4e00\u304b\u3089\u624b\u3067\u4f5c\u308b\u3068\u9762\u5012\u3068\u8a00\u3046\u65b9\u306f\u5143\u306b\u306a\u308b\u30c7\u30a3\u30b9\u30ab\u30d0\u30ea\u30eb\u30fc\u30eb\u3092Web\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u304b\u3089\u767b\u9332\u3057\u3066\u3001ZabbixAPI\u306edrule.get\u767b\u9332\u3057\u305f\u30eb\u30fc\u30eb\u3092\u53d6\u5f97\u3057\u3066\u4e0b\u3055\u3044\u3002\n\u53d6\u5f97\u3057\u305f\u7d50\u679c\u304b\u3089\u4e0d\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u305b\u3070OK\u3067\u3059\u3002(ReadOnly\u9805\u76ee\u306f\u9664\u5916\u3057\u3066\u304f\u3060\u3055\u3044\u3002)\n\n\u8a73\u3057\u304f\u306fZabbixAPI\u306e[Discovery check object](https://www.zabbix.com/documentation/2.2/manual/api/reference/dcheck/object#discovery_check)\u3092\u898b\u3066\u6b32\u3057\u3044\u3067\u3059\u3002\n", "tags": ["zabbix"]}