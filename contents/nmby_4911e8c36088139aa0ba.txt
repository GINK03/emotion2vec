{"context": " More than 1 year has passed since last update.\n\nWhat's an issue ?\nJUnit\u3067\u306e\u4f8b\u5916\u691c\u8a3c\u30b3\u30fc\u30c9\u3092\u3082\u3063\u3068\u30b9\u30c3\u30ad\u30ea\u66f8\u304d\u305f\u3044\u3063\uff01\n\u305d\u3046\u601d\u3063\u3066\u3044\u308b\u306e\u306f\u304d\u3063\u3068\u79c1\u3060\u3051\u3067\u306f\u306a\u3044\u306f\u305a\u30fb\u30fb\u30fb\n\nbefore\n\u4f8b\u3048\u3070 Person#setAge(int) \u306a\u3093\u3066\u3044\u3046\u3088\u304f\u3042\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u305f\u3068\u3057\u3066\u3001\u6b21\u306e4\u70b9\u3092\u691c\u8a3c\u3057\u305f\u3044\u3002\n\n\nsetAge(-1) \u306f NG\u3000\u2192\u3000IllegalArgumentException \u3092\u30b9\u30ed\u30fc\n\nsetAge(0) \u306f OK\n\nsetAge(200) \u306f OK \uff1a \u8d85\u9577\u5bff\u793e\u4f1a\u306e\u5230\u6765\u306b\u5099\u3048\u3066\u3002\n\nsetAge(201) \u306f NG\u3000\u2192\u3000IllegalArgumentException \u3092\u30b9\u30ed\u30fc\u3001\u4f8b\u5916\u30e1\u30c3\u30bb\u30fc\u30b8\u3042\u308a\n\n\u901a\u5e38\u306eJUnit4\u3067\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nJUnit4\u3067\u306e\u901a\u5e38\u306e\u4f8b\u5916\u30c6\u30b9\u30c8\npublic class PersonTest {\n\n    private Person person = new Person(\"John\");\n\n    @Rule\n    public ExpectedException thrown = ExpectedException.none();\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testSetAge1() {\n        person.setAge(-1);\n    }\n\n    @Test\n    public void testSetAge2() {\n        try  {\n            person.setAge(0);\n            person.setAge(200);  // 200\u6b73\u307e\u3067\u306fOK\u3068\u3059\u308b\u3002\n        } catch(RuntimeException e) {\n            fail();\n        }\n    }\n\n    @Test\n    public void testSetAge3() {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"Is he a zombie!?\");\n\n        person.setAge(201);\n    }\n}\n\n\n\u306a\u30fc\u3093\u3067\u305f\u3063\u305f\u3053\u308c\u3063\u307d\u3063\u3061\u306e\u691c\u8a3c\u3067\u3001\u3053\u3093\u306a\u306b\u3082\u3063\u3055\u308a\u3057\u305f\u30b3\u30fc\u30c9\u3092\u66f8\u304b\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u3093\u3067\u3059\u304b\u306d\uff01 \u3077\u3093\u3077\u3093\n\nafter\n\u3053\u308c\u3067\u826f\u3044\u3058\u3083\u3093...\n\n\u3053\u3046\u66f8\u304d\u305f\u3044\npublic class PersonTest {\n\n    @Test\n    public void testSetAge() {\n        Person p = new Person(\"John\");\n        assertThat(of(() -> p.setAge(-1)),  raise(IllegalArgumentException.class));\n        assertThat(of(() -> p.setAge(0)),   raiseNothing());\n        assertThat(of(() -> p.setAge(200)), raiseNothing());\n        assertThat(of(() -> p.setAge(201)), raise(IllegalArgumentException.class, \"Is he a zombie!?\"));\n    }\n}\n\n\n\nso that\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001after\u3092\u5b9f\u73fe\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\nnmby/jetaime \u00b7 GitHub\nnmby/jUtaime \u00b7 GitHub \uff082015/7/26 \u79fb\u52d5\u3057\u307e\u3057\u305f\u3002\uff09\n\nusage\n\n\u4f8b\u5916\u3092\u30b9\u30ed\u30fc\u3057\u3046\u308b\u691c\u8a3c\u5bfe\u8c61\u306e\u51e6\u7406\u3092\u3001Testee.of() \u306e\u4e2d\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n\u671f\u5f85\u3059\u308b\u4f8b\u5916\u306e\u578b\u3084\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u539f\u56e0\uff08cause\uff09\u306e\u578b\u306a\u3069\u3092\u3001RaiseMatchers.raise() \u306a\u3069\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nassertThat(Testee.of(SomeClass::someMethodShouldFail),\n        RaiseMatchers.raise(SomeException.class, \"expected message\"));\n\nTestee \u3068 RaiseMatchers \u306f static \u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u304f\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\u6b21\u306e\u3088\u3046\u306a\u8272\u3005\u306a\u66f8\u304d\u65b9\u304c\u53ef\u80fd\u3067\u3059\u3002\nassertThat(of(() -> Integer.valueOf(\"abc\")), raiseExact(NumberFormatException.class));\nassertThat(of(() -> Integer.valueOf(\"123\")), raiseNothing());\nassertThat(of(() -> { Object o = null; o.toString(); }), raise(RuntimeException.class));\nassertThat(of(obj::dbOperation), rootCause(IOException.class));\n\n\u307e\u305f\u3001\u4ed6\u306e Matcher \u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306e\u4f8b\u3067\u306f\u3001hamcrest.org \u304c\u63d0\u4f9b\u3059\u308b anyOf\u3001allOf\u3001not \u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n// NullPointerException \u307e\u305f\u306f IllegalArgumentException \u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3053\u3068\u3092\u691c\u8a3c\nassertThat(of(() -> obj.someOperation(null)),\n        anyOf(raise(NullPointerException.class), raise(IllegalArgumentException.class)));\n\n// NullPointerException \u4ee5\u5916\u306e\u4f55\u3089\u304b\u306e\u5b9f\u884c\u6642\u4f8b\u5916\u3092\u539f\u56e0\u3068\u3057\u3066\u4e0a\u4f4d\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3053\u3068\u3092\u691c\u8a3c\nassertThat(of(() -> obj.someOperation(param)),\n        allOf(raise(WrappingException.class, \"expected message\"),\n                rootCause(RuntimeException.class),\n                not(rootCause(NullPointerException.class))));\n\nallOf() \u306e\u4ee3\u308f\u308a\u306b\u3001\u6b21\u306e\u9023\u7d50\u30b9\u30bf\u30a4\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n// NullPointerException \u4ee5\u5916\u306e\u4f55\u3089\u304b\u306e\u5b9f\u884c\u6642\u4f8b\u5916\u3092\u539f\u56e0\u3068\u3057\u3066\u4e0a\u4f4d\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3053\u3068\u3092\u691c\u8a3c\nassertThat(of(() -> obj.someOperation(param)),\n        raise(WrappingException.class, \"expected message\")\n                .rootCause(RuntimeException.class)\n                .not(rootCause(NullPointerException.class)));\n\n\u8a73\u3057\u304f\u306f javadoc \u3092\u898b\u3066\u306d\u266a\n\u306a\u304a\u3001eclipse\u3067\u4f7f\u3048\u3070\u3061\u3083\u3093\u3068\u30ec\u30dd\u30fc\u30c8\u3082\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\ndependencies\n\njava 8 \u4ee5\u4e0a\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nhamcrest-core \u3082\u5fc5\u8981\u3067\u3059\u304c\u3001JUnit4\u3092\u4f7f\u3063\u3066\u308b\u306a\u3089\u3059\u3067\u306b\u5165\u3063\u3066\u308b\u306f\u305a\u3067\u3059\u3002\n\n# What's an issue ?\nJUnit\u3067\u306e\u4f8b\u5916\u691c\u8a3c\u30b3\u30fc\u30c9\u3092\u3082\u3063\u3068\u30b9\u30c3\u30ad\u30ea\u66f8\u304d\u305f\u3044\u3063\uff01\n\u305d\u3046\u601d\u3063\u3066\u3044\u308b\u306e\u306f\u304d\u3063\u3068\u79c1\u3060\u3051\u3067\u306f\u306a\u3044\u306f\u305a\u30fb\u30fb\u30fb\n\n# before\n\u4f8b\u3048\u3070 `Person#setAge(int)` \u306a\u3093\u3066\u3044\u3046\u3088\u304f\u3042\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u305f\u3068\u3057\u3066\u3001\u6b21\u306e4\u70b9\u3092\u691c\u8a3c\u3057\u305f\u3044\u3002\n\n   * `setAge(-1)` \u306f NG\u3000\u2192\u3000`IllegalArgumentException` \u3092\u30b9\u30ed\u30fc\n   * `setAge(0)` \u306f OK\n   * `setAge(200)` \u306f OK \uff1a \u8d85\u9577\u5bff\u793e\u4f1a\u306e\u5230\u6765\u306b\u5099\u3048\u3066\u3002\n   * `setAge(201)` \u306f NG\u3000\u2192\u3000`IllegalArgumentException` \u3092\u30b9\u30ed\u30fc\u3001\u4f8b\u5916\u30e1\u30c3\u30bb\u30fc\u30b8\u3042\u308a\n\n\u901a\u5e38\u306eJUnit4\u3067\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```java:JUnit4\u3067\u306e\u901a\u5e38\u306e\u4f8b\u5916\u30c6\u30b9\u30c8\npublic class PersonTest {\n    \n    private Person person = new Person(\"John\");\n    \n    @Rule\n    public ExpectedException thrown = ExpectedException.none();\n    \n    @Test(expected = IllegalArgumentException.class)\n    public void testSetAge1() {\n        person.setAge(-1);\n    }\n    \n    @Test\n    public void testSetAge2() {\n        try  {\n            person.setAge(0);\n            person.setAge(200);  // 200\u6b73\u307e\u3067\u306fOK\u3068\u3059\u308b\u3002\n        } catch(RuntimeException e) {\n            fail();\n        }\n    }\n    \n    @Test\n    public void testSetAge3() {\n        thrown.expect(IllegalArgumentException.class);\n        thrown.expectMessage(\"Is he a zombie!?\");\n        \n        person.setAge(201);\n    }\n}\n```\n\n\u306a\u30fc\u3093\u3067\u305f\u3063\u305f\u3053\u308c\u3063\u307d\u3063\u3061\u306e\u691c\u8a3c\u3067\u3001\u3053\u3093\u306a\u306b\u3082\u3063\u3055\u308a\u3057\u305f\u30b3\u30fc\u30c9\u3092\u66f8\u304b\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u3093\u3067\u3059\u304b\u306d\uff01 \u3077\u3093\u3077\u3093\n\n# after\n\u3053\u308c\u3067\u826f\u3044\u3058\u3083\u3093...\n\n```java:\u3053\u3046\u66f8\u304d\u305f\u3044\npublic class PersonTest {\n    \n    @Test\n    public void testSetAge() {\n        Person p = new Person(\"John\");\n        assertThat(of(() -> p.setAge(-1)),  raise(IllegalArgumentException.class));\n        assertThat(of(() -> p.setAge(0)),   raiseNothing());\n        assertThat(of(() -> p.setAge(200)), raiseNothing());\n        assertThat(of(() -> p.setAge(201)), raise(IllegalArgumentException.class, \"Is he a zombie!?\"));\n    }\n}\n```\n\n# so that\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001after\u3092\u5b9f\u73fe\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n~~**nmby/jetaime** \u00b7 GitHub~~\n[**nmby/jUtaime** \u00b7 GitHub](https://github.com/nmby/jUtaime) \uff082015/7/26 \u79fb\u52d5\u3057\u307e\u3057\u305f\u3002\uff09\n\n# usage\n\n* \u4f8b\u5916\u3092\u30b9\u30ed\u30fc\u3057\u3046\u308b\u691c\u8a3c\u5bfe\u8c61\u306e\u51e6\u7406\u3092\u3001`Testee.of()` \u306e\u4e2d\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002  \n* \u671f\u5f85\u3059\u308b\u4f8b\u5916\u306e\u578b\u3084\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u539f\u56e0\uff08cause\uff09\u306e\u578b\u306a\u3069\u3092\u3001`RaiseMatchers.raise()` \u306a\u3069\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```java:\nassertThat(Testee.of(SomeClass::someMethodShouldFail),\n        RaiseMatchers.raise(SomeException.class, \"expected message\"));\n```\n\n`Testee` \u3068 `RaiseMatchers` \u306f static \u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304a\u304f\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\u6b21\u306e\u3088\u3046\u306a\u8272\u3005\u306a\u66f8\u304d\u65b9\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n```java:\nassertThat(of(() -> Integer.valueOf(\"abc\")), raiseExact(NumberFormatException.class));\nassertThat(of(() -> Integer.valueOf(\"123\")), raiseNothing());\nassertThat(of(() -> { Object o = null; o.toString(); }), raise(RuntimeException.class));\nassertThat(of(obj::dbOperation), rootCause(IOException.class));\n```\n\u307e\u305f\u3001\u4ed6\u306e Matcher \u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306e\u4f8b\u3067\u306f\u3001[hamcrest.org](http://hamcrest.org/JavaHamcrest/) \u304c\u63d0\u4f9b\u3059\u308b `anyOf`\u3001`allOf`\u3001`not` \u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java:\n// NullPointerException \u307e\u305f\u306f IllegalArgumentException \u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3053\u3068\u3092\u691c\u8a3c\nassertThat(of(() -> obj.someOperation(null)),\n        anyOf(raise(NullPointerException.class), raise(IllegalArgumentException.class)));\n\n// NullPointerException \u4ee5\u5916\u306e\u4f55\u3089\u304b\u306e\u5b9f\u884c\u6642\u4f8b\u5916\u3092\u539f\u56e0\u3068\u3057\u3066\u4e0a\u4f4d\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3053\u3068\u3092\u691c\u8a3c\nassertThat(of(() -> obj.someOperation(param)),\n        allOf(raise(WrappingException.class, \"expected message\"),\n                rootCause(RuntimeException.class),\n                not(rootCause(NullPointerException.class))));\n```\n`allOf()` \u306e\u4ee3\u308f\u308a\u306b\u3001\u6b21\u306e\u9023\u7d50\u30b9\u30bf\u30a4\u30eb\u3067\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n```java:\n// NullPointerException \u4ee5\u5916\u306e\u4f55\u3089\u304b\u306e\u5b9f\u884c\u6642\u4f8b\u5916\u3092\u539f\u56e0\u3068\u3057\u3066\u4e0a\u4f4d\u4f8b\u5916\u304c\u30b9\u30ed\u30fc\u3055\u308c\u308b\u3053\u3068\u3092\u691c\u8a3c\nassertThat(of(() -> obj.someOperation(param)),\n        raise(WrappingException.class, \"expected message\")\n                .rootCause(RuntimeException.class)\n                .not(rootCause(NullPointerException.class)));\n```\n\n\u8a73\u3057\u304f\u306f [javadoc](http://jutaime.hotchpotch.xyz/docs/api/index.html) \u3092\u898b\u3066\u306d\u266a\n\n\n\u306a\u304a\u3001eclipse\u3067\u4f7f\u3048\u3070\u3061\u3083\u3093\u3068\u30ec\u30dd\u30fc\u30c8\u3082\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n![JUnitTraceView.png](https://qiita-image-store.s3.amazonaws.com/0/84939/856ef419-6168-7aa1-51ee-65ccb35d623f.png)\n\n# dependencies\n* java 8 \u4ee5\u4e0a\u304c\u5fc5\u8981\u3067\u3059\u3002\n* [hamcrest-core](http://search.maven.org/#search%7Cga%7C1%7Cg%3Aorg.hamcrest) \u3082\u5fc5\u8981\u3067\u3059\u304c\u3001JUnit4\u3092\u4f7f\u3063\u3066\u308b\u306a\u3089\u3059\u3067\u306b\u5165\u3063\u3066\u308b\u306f\u305a\u3067\u3059\u3002\n", "tags": ["JUnit", "test", "\u4f8b\u5916", "\u30c6\u30b9\u30c8", "Java"]}