{"tags": ["Kinesis", "AWS", "cognito", "Swift", "iOS"], "context": "\u6771\u4eac\u30ea\u30fc\u30b8\u30e7\u30f3\u306bKinesis\u304c\u8a95\u751f\u3059\u308b\u524d\u304b\u3089\u30d0\u30fc\u30b8\u30cb\u30a2\u3067\u30ed\u30b0\u53ce\u96c6\u7b49\u306b\u4f7f\u7528\u3057\u3066\u3044\u305f\u3051\u3069\u3001\u65b0\u305f\u306a\u7a2e\u985e\u306e\u30ed\u30b0\u304c\u5fc5\u8981\u3068\u306a\u3063\u305f\u3068\u304d\u306b\u30c7\u30fc\u30bf\u8ee2\u9001\u306a\u3069\u306e\u30b3\u30b9\u30c8\u9762\u306e\u60aa\u3055\u306a\u3069\u304b\u3089\u3001\u3053\u3061\u3089\u306f\u6771\u4eac\u30ea\u30fc\u30b8\u30e7\u30f3\u306eKinesis\u3092\u4f7f\u7528\u3057\u305f\u3044\u3068\u306a\u3063\u305f\u3068\u304d\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u305d\u306e\u6642\u306f\u4ee5\u524d\u304b\u3089\u904b\u7528\u3057\u3066\u3044\u308bKinesis\u306f\u305d\u306e\u307e\u307e\u3067\u65b0\u305f\u306aKinesis\u306f\u6771\u4eac\u306b\u8a2d\u3051\u3066\u30ea\u30fc\u30b8\u30e7\u30f3\u9593\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u632f\u308a\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u7d50\u8ad6\u304b\u3089\u8ff0\u3079\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u305fServiceConfiguration\u3092\u5b9a\u7fa9\u3057\u30ad\u30fc\u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fSwift3\u306b\u3088\u308b\u5b9f\u88c5\u4f8b\u3092\u53d6\u308a\u4e0a\u3052\u307e\u3059\u3002\nlet usEast1ServiceConfiguration = AWSServiceConfiguration(region: .usEast1, credentialsProvider: credentialsProvider)\nlet apNortheast1ServiceConfiguration = AWSServiceConfiguration(region: .apNortheast1, credentialsProvider: credentialsProvider)\nAWSKinesisRecorder.register(with: usEast1ServiceConfiguration, forKey: \"usEast1\")\nAWSKinesisRecorder.register(with: apNortheast1ServiceConfiguration, forKey: \"apNortheast1\")\n\n\u305d\u3057\u3066\u3001\u8a2d\u5b9a\u3057\u305f\u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066AWSKinesisRecorder\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u305d\u306e\u30ec\u30b3\u30fc\u30c0\u3092\u7528\u3044\u3066Kinesis\u306b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6d41\u3057\u307e\u3059\u3002\nlet kinesisRecorder: AWSKinesisRecorder =  = AWSKinesisRecorder(forKey: \"apNortheast1\")\nlet streamName = \"sample-stream1\"\nkinesisRecorder.saveRecord(data, streamName: streamName)\n\n\n\u5168\u4f53\n\n\u5358\u4e00\u30ea\u30fc\u30b8\u30e7\u30f3\u306b\u6d41\u3059\u5834\u5408\n\u5143\u3005\u306e\u5358\u4e00\u30ea\u30fc\u30b8\u30e7\u30f3\u306b\u6d41\u3059\u5b9f\u88c5\u306b\u3064\u3044\u3066\u3001\u6700\u521d\u306bCognito\u306b\u3088\u308b\u8a8d\u8a3c\u3092\u884c\u3044\u307e\u3059\u3002\nlet credentialsProvider:AWSCognitoCredentialsProvider = AWSCognitoCredentialsProvider(regionType: .usEast1, identityPoolId: \"us-east-1:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\")\n\nlet configuration = AWSServiceConfiguration(region: AWSRegionType.usEast1, credentialsProvider: credentialsProvider)\nAWSServiceManager.default().defaultServiceConfiguration =\nconfiguration\n\ncredentialsProvider.getIdentityId().continue ({ (task) -> Any? in\n    if let error = task.error {\n        print(\"Cognito error : \\(error)\")\n    } else {\n        print(\"Cognito id : \\(credentialsProvider.identityId)\")\n    }\n    return nil\n})\n\n\u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3092JSON\u3067\u7528\u610f\u3057\u307e\u3059\u3002\nlet dic:[String:Any] = [\"key1\": \"name1\", \"key2\": \"name\"]\nlet dataDic: [String:[String:Any]] = [\"sample_record\": dic]\nvar data:Data = Data()\n\ndo {\n    try data = JSONSerialization.data(withJSONObject: dataDic, options: JSONSerialization.WritingOptions(rawValue: 0))\n} catch {\n    print(\"error = \\(error)\")\n}\n\n\u7528\u610f\u3057\u305fJSON\u30c7\u30fc\u30bf\u3092Kinesis\u306b\u9001\u4fe1\u3057\u307e\u3059\u3002\nlet kinesisRecoder:AWSKinesisRecorder = AWSKinesisRecorder.default()\nlet streamName1 = \"sample-stream\"\n\nkinesisRecoder.saveRecord(data, streamName: streamName1).continue ({ (task) -> AnyObject? in\n    util.dispatch_async_main ({\n        kinesisRecoder.submitAllRecords()\n    })\n    return nil\n})\n\n\n\u7570\u306a\u308b\u30ea\u30fc\u30b8\u30e7\u30f3\u306b\u632f\u308a\u5206\u3051\u308b\u5834\u5408\n\u5358\u4e00\u30ea\u30fc\u30b8\u30e7\u30f3\u306e\u5834\u5408\u306b\u6bd4\u3079\u3066\u3001\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u5b9a\u7fa9\u3057\u305fServiceConfiguration\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u3001\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nlet credentialsProvider:AWSCognitoCredentialsProvider = AWSCognitoCredentialsProvider(regionType: .usEast1, identityPoolId: \"us-east-1:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\")\n\nlet configuration = AWSServiceConfiguration(region: AWSRegionType.usEast1, credentialsProvider: credentialsProvider)\nconfiguration?.timeoutIntervalForResource = 1000\nAWSServiceManager.default().defaultServiceConfiguration =\nconfiguration\n\n// Mark: \u8ffd\u52a0\u90e8\u5206\nlet usEast1ServiceConfiguration = AWSServiceConfiguration(region: .usEast1, credentialsProvider: credentialsProvider)\nlet apNortheast1ServiceConfiguration = AWSServiceConfiguration(region: .apNortheast1, credentialsProvider: credentialsProvider)\nAWSKinesisRecorder.register(with: usEast1ServiceConfiguration, forKey: \"usEast1\")\nAWSKinesisRecorder.register(with: apNortheast1ServiceConfiguration, forKey: \"apNortheast1\")\n\n\ncredentialsProvider.getIdentityId().continue ({ (task) -> Any? in\n    if let error = task.error {\n        print(\"Cognito error : \\(error)\")\n    } else {\n        print(\"Cognito id : \\(credentialsProvider.identityId)\")\n    }\n    return nil\n})\n\n\u30c7\u30fc\u30bf\u306e\u751f\u6210\u306f\u5148\u7a0b\u3068\u540c\u69d8\u3067\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u632f\u308a\u5206\u3051\u306f\u5148\u7a0b\u8a2d\u5b9a\u3057\u305f\u30ad\u30fc\u304b\u3089AWSKinesisRecorder\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3001Kinesis\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\nvar kinesisRecorder: AWSKinesisRecorder\nvar streamName: String = \"\"\nlet isApNortheast1 = false\n\n// \u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u3088\u308b\u632f\u308a\u5206\u3051\u51e6\u7406\u306e\u8a2d\u5b9a\nif isApNortheast1 {\n    streamName = \"sample-stream1\"\n    kinesisRecorder = AWSKinesisRecorder(forKey: \"apNortheast1\")\n} else {\n    streamName = \"sample-stream2\"\n    kinesisRecorder = AWSKinesisRecorder(forKey: \"usEast1\")\n}\n\nkinesisRecorder.saveRecord(data, streamName: streamName).continue ({ (task) -> AnyObject? in\n    util.dispatch_async_main ({\n        kinesisRecorder.submitAllRecords()\n    })\n    return nil\n})\n\n\n\u53c2\u8003\nhttp://docs.aws.amazon.com/ja_jp/mobile/sdkforios/developerguide/kinesis-data-stream-processing-for-ios.html\nhttp://docs.aws.amazon.com/AWSiOSSDK/latest/Classes/AWSKinesisRecorder.html\n\u6771\u4eac\u30ea\u30fc\u30b8\u30e7\u30f3\u306bKinesis\u304c\u8a95\u751f\u3059\u308b\u524d\u304b\u3089\u30d0\u30fc\u30b8\u30cb\u30a2\u3067\u30ed\u30b0\u53ce\u96c6\u7b49\u306b\u4f7f\u7528\u3057\u3066\u3044\u305f\u3051\u3069\u3001\u65b0\u305f\u306a\u7a2e\u985e\u306e\u30ed\u30b0\u304c\u5fc5\u8981\u3068\u306a\u3063\u305f\u3068\u304d\u306b\u30c7\u30fc\u30bf\u8ee2\u9001\u306a\u3069\u306e\u30b3\u30b9\u30c8\u9762\u306e\u60aa\u3055\u306a\u3069\u304b\u3089\u3001\u3053\u3061\u3089\u306f\u6771\u4eac\u30ea\u30fc\u30b8\u30e7\u30f3\u306eKinesis\u3092\u4f7f\u7528\u3057\u305f\u3044\u3068\u306a\u3063\u305f\u3068\u304d\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u305d\u306e\u6642\u306f\u4ee5\u524d\u304b\u3089\u904b\u7528\u3057\u3066\u3044\u308bKinesis\u306f\u305d\u306e\u307e\u307e\u3067\u65b0\u305f\u306aKinesis\u306f\u6771\u4eac\u306b\u8a2d\u3051\u3066\u30ea\u30fc\u30b8\u30e7\u30f3\u9593\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u632f\u308a\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u7d50\u8ad6\u304b\u3089\u8ff0\u3079\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u8a2d\u5b9a\u3057\u305fServiceConfiguration\u3092\u5b9a\u7fa9\u3057\u30ad\u30fc\u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306fSwift3\u306b\u3088\u308b\u5b9f\u88c5\u4f8b\u3092\u53d6\u308a\u4e0a\u3052\u307e\u3059\u3002\n\n```swift\nlet usEast1ServiceConfiguration = AWSServiceConfiguration(region: .usEast1, credentialsProvider: credentialsProvider)\nlet apNortheast1ServiceConfiguration = AWSServiceConfiguration(region: .apNortheast1, credentialsProvider: credentialsProvider)\nAWSKinesisRecorder.register(with: usEast1ServiceConfiguration, forKey: \"usEast1\")\nAWSKinesisRecorder.register(with: apNortheast1ServiceConfiguration, forKey: \"apNortheast1\")\n```\n\n\u305d\u3057\u3066\u3001\u8a2d\u5b9a\u3057\u305f\u30ad\u30fc\u3092\u4f7f\u7528\u3057\u3066AWSKinesisRecorder\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u305d\u306e\u30ec\u30b3\u30fc\u30c0\u3092\u7528\u3044\u3066Kinesis\u306b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6d41\u3057\u307e\u3059\u3002\n\n```swift\nlet kinesisRecorder: AWSKinesisRecorder =  = AWSKinesisRecorder(forKey: \"apNortheast1\")\nlet streamName = \"sample-stream1\"\nkinesisRecorder.saveRecord(data, streamName: streamName)\n```\n\n# \u5168\u4f53\n## \u5358\u4e00\u30ea\u30fc\u30b8\u30e7\u30f3\u306b\u6d41\u3059\u5834\u5408\n\u5143\u3005\u306e\u5358\u4e00\u30ea\u30fc\u30b8\u30e7\u30f3\u306b\u6d41\u3059\u5b9f\u88c5\u306b\u3064\u3044\u3066\u3001\u6700\u521d\u306bCognito\u306b\u3088\u308b\u8a8d\u8a3c\u3092\u884c\u3044\u307e\u3059\u3002\n\n```swift\nlet credentialsProvider:AWSCognitoCredentialsProvider = AWSCognitoCredentialsProvider(regionType: .usEast1, identityPoolId: \"us-east-1:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\")\n        \nlet configuration = AWSServiceConfiguration(region: AWSRegionType.usEast1, credentialsProvider: credentialsProvider)\nAWSServiceManager.default().defaultServiceConfiguration =\nconfiguration\n\ncredentialsProvider.getIdentityId().continue ({ (task) -> Any? in\n    if let error = task.error {\n        print(\"Cognito error : \\(error)\")\n    } else {\n        print(\"Cognito id : \\(credentialsProvider.identityId)\")\n    }\n    return nil\n})\n```\n\n\u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u3092JSON\u3067\u7528\u610f\u3057\u307e\u3059\u3002\n\n```swift\nlet dic:[String:Any] = [\"key1\": \"name1\", \"key2\": \"name\"]\nlet dataDic: [String:[String:Any]] = [\"sample_record\": dic]\nvar data:Data = Data()\n\ndo {\n    try data = JSONSerialization.data(withJSONObject: dataDic, options: JSONSerialization.WritingOptions(rawValue: 0))\n} catch {\n    print(\"error = \\(error)\")\n}\n```\n\n\u7528\u610f\u3057\u305fJSON\u30c7\u30fc\u30bf\u3092Kinesis\u306b\u9001\u4fe1\u3057\u307e\u3059\u3002\n\n```swift\nlet kinesisRecoder:AWSKinesisRecorder = AWSKinesisRecorder.default()\nlet streamName1 = \"sample-stream\"\n\nkinesisRecoder.saveRecord(data, streamName: streamName1).continue ({ (task) -> AnyObject? in\n    util.dispatch_async_main ({\n        kinesisRecoder.submitAllRecords()\n    })\n    return nil\n})\n```\n\n## \u7570\u306a\u308b\u30ea\u30fc\u30b8\u30e7\u30f3\u306b\u632f\u308a\u5206\u3051\u308b\u5834\u5408\n\u5358\u4e00\u30ea\u30fc\u30b8\u30e7\u30f3\u306e\u5834\u5408\u306b\u6bd4\u3079\u3066\u3001\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u5b9a\u7fa9\u3057\u305fServiceConfiguration\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u3001\u30ad\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```swift\nlet credentialsProvider:AWSCognitoCredentialsProvider = AWSCognitoCredentialsProvider(regionType: .usEast1, identityPoolId: \"us-east-1:XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\")\n        \nlet configuration = AWSServiceConfiguration(region: AWSRegionType.usEast1, credentialsProvider: credentialsProvider)\nconfiguration?.timeoutIntervalForResource = 1000\nAWSServiceManager.default().defaultServiceConfiguration =\nconfiguration\n\n// Mark: \u8ffd\u52a0\u90e8\u5206\nlet usEast1ServiceConfiguration = AWSServiceConfiguration(region: .usEast1, credentialsProvider: credentialsProvider)\nlet apNortheast1ServiceConfiguration = AWSServiceConfiguration(region: .apNortheast1, credentialsProvider: credentialsProvider)\nAWSKinesisRecorder.register(with: usEast1ServiceConfiguration, forKey: \"usEast1\")\nAWSKinesisRecorder.register(with: apNortheast1ServiceConfiguration, forKey: \"apNortheast1\")\n\n\ncredentialsProvider.getIdentityId().continue ({ (task) -> Any? in\n    if let error = task.error {\n        print(\"Cognito error : \\(error)\")\n    } else {\n        print(\"Cognito id : \\(credentialsProvider.identityId)\")\n    }\n    return nil\n})\n```\n\n\u30c7\u30fc\u30bf\u306e\u751f\u6210\u306f\u5148\u7a0b\u3068\u540c\u69d8\u3067\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u632f\u308a\u5206\u3051\u306f\u5148\u7a0b\u8a2d\u5b9a\u3057\u305f\u30ad\u30fc\u304b\u3089AWSKinesisRecorder\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3001Kinesis\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\n\n\n```swift\nvar kinesisRecorder: AWSKinesisRecorder\nvar streamName: String = \"\"\nlet isApNortheast1 = false\n\n// \u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u3088\u308b\u632f\u308a\u5206\u3051\u51e6\u7406\u306e\u8a2d\u5b9a\nif isApNortheast1 {\n    streamName = \"sample-stream1\"\n    kinesisRecorder = AWSKinesisRecorder(forKey: \"apNortheast1\")\n} else {\n    streamName = \"sample-stream2\"\n    kinesisRecorder = AWSKinesisRecorder(forKey: \"usEast1\")\n}\n\nkinesisRecorder.saveRecord(data, streamName: streamName).continue ({ (task) -> AnyObject? in\n    util.dispatch_async_main ({\n        kinesisRecorder.submitAllRecords()\n    })\n    return nil\n})\n```\n\n# \u53c2\u8003\nhttp://docs.aws.amazon.com/ja_jp/mobile/sdkforios/developerguide/kinesis-data-stream-processing-for-ios.html\nhttp://docs.aws.amazon.com/AWSiOSSDK/latest/Classes/AWSKinesisRecorder.html\n"}