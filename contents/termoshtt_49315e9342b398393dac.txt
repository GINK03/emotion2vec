{"context": "Rust\u306f\u73fe\u5728(2017/1/6)\u306estable(1.14)\u3067\u306ftrait\u306e\u7279\u6b8a\u5316\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u306a\u3044\u3088\u3046\u3060\u3002\u3067\u3082\u3084\u308a\u305f\u3044\u306e\u3067\u904a\u3093\u3067\u305f\u3089\u3067\u304d\u305f\u306e\u3067\u307e\u3068\u3081\u3066\u304a\u304f\u3002\nlet a: f64 = 1.0;\nlet b: f32 = a.into();\n\n\u305d\u3082\u305d\u3082\u306e\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u308c\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\u4e8b\u3060\u3063\u305f\ntrait `f32: std::convert::From<f64>` not satisfied\n\n\u3068\u6012\u3089\u308c\u308b\u3002\u3044\u3084\u5207\u308a\u6368\u3066\u4ee5\u5916\u306e\u9078\u629e\u80a2\u3068\u304b\u306a\u3044\u3060\u308d\u3068\u601d\u3044\u3064\u3064\u3001\u65e2\u5b58\u306etraitFrom<f64>\u3092\u65e2\u5b58\u306e\u578bf32\u306b\u306f\u5b9f\u88c5\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u65b0\u3057\u304ftrait\u3092\u4f5c\u308b\u3053\u3068\u306b\u3059\u308b\u3002\ntrait Fromf64 {\n  fn from_f64(f64) -> Self;\n}\n\n\u3053\u308c\u306f\u65e2\u5b58\u306eFrom<f64>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u306ffrom()\u3092\u4f7f\u3063\u3066f32\u306b\u306fas f32\u3067\u5909\u63db\u3057\u305f\u3044\u3002\nimpl<A: From<f64>> Fromf64 for A {\n  fn from_f64(v: f64) -> A {\n    v.into()\n  }\n}\n\nimpl Fromf64 for f32 {\n  fn from_f64(v: f64) -> f32 {\n    v as f32\n  }\n}\n\n\u3057\u304b\u3057\u3053\u308c\u304c\u901a\u3089\u306a\u3044\nerror[E0119]: conflicting implementations of trait `Fromf64` for type `f32`:\n  --> src/main.rs:11:1\n   |\n5  | impl<A: From<f64>> Fromf64 for A {\n   | - first implementation here\n...\n11 | impl Fromf64 for f32 {\n   | ^ conflicting implementation for `f32`\n\n\u3053\u308c\u304c\u901a\u3089\u306a\u3044\u306e\u304c\u7d0d\u5f97\u3044\u304b\u306a\u3044\u304c\u3001\u901a\u3089\u306a\u3044\u4ee5\u4e0a\u4ed5\u65b9\u304c\u306a\u3044(\u00b4\u30fb\u03c9\u30fb\uff40)\n\u8a66\u884c\u932f\u8aa4\u306e\u7d50\u679c\u3001\u30c0\u30df\u30fc\u578b\u3092\u4e00\u3064\u304b\u307e\u305b\u308b\u3068\u3044\u3051\u308b\u3053\u3068\u306b\u6c17\u4ed8\u3044\u305f\npub trait Fromf64<Dummy> {\n    fn from_f64(f64) -> Self;\n}\n\nimpl<A: From<f64>> Fromf64<A> for A {\n    fn from_f64(v: f64) -> A {\n        v.into()\n    }\n}\n\nimpl Fromf64<()> for f32 {\n    fn from_f64(v: f64) -> Self {\n        v as f32\n    }\n}\n\n\u4f7f\u3046\u3068\u304d\u306f\u3053\u306eDummy\u3092\u7701\u7565\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\nlet a = f32::from_f64(1.0);\n\n\u3053\u308c\u3067A::from_f64(v)\u3067\u5909\u63db\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u304c\u3001\u91c8\u7136\u3068\u3057\u306a\u3044\u3002\u3002\u3002\n\n\u53c2\u8003\u8cc7\u6599\n\nTracking issue for specialization (RFC 1210): https://github.com/rust-lang/rust/issues/31844\n\nHow to use specialization features: https://users.rust-lang.org/t/how-to-use-specialization-features/6023\n\n\nRust\u306f\u73fe\u5728(2017/1/6)\u306estable(1.14)\u3067\u306ftrait\u306e\u7279\u6b8a\u5316\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u306a\u3044\u3088\u3046\u3060\u3002\u3067\u3082\u3084\u308a\u305f\u3044\u306e\u3067\u904a\u3093\u3067\u305f\u3089\u3067\u304d\u305f\u306e\u3067\u307e\u3068\u3081\u3066\u304a\u304f\u3002\n\n```rust\nlet a: f64 = 1.0;\nlet b: f32 = a.into();\n```\n\n\u305d\u3082\u305d\u3082\u306e\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u308c\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u306a\u3044\u4e8b\u3060\u3063\u305f\n\n```output\ntrait `f32: std::convert::From<f64>` not satisfied\n```\n\n\u3068\u6012\u3089\u308c\u308b\u3002\u3044\u3084\u5207\u308a\u6368\u3066\u4ee5\u5916\u306e\u9078\u629e\u80a2\u3068\u304b\u306a\u3044\u3060\u308d\u3068\u601d\u3044\u3064\u3064\u3001\u65e2\u5b58\u306etrait`From<f64>`\u3092\u65e2\u5b58\u306e\u578b`f32`\u306b\u306f\u5b9f\u88c5\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u65b0\u3057\u304ftrait\u3092\u4f5c\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n```rust\ntrait Fromf64 {\n  fn from_f64(f64) -> Self;\n}\n```\n\n\u3053\u308c\u306f\u65e2\u5b58\u306e`From<f64>`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u306f`from()`\u3092\u4f7f\u3063\u3066`f32`\u306b\u306f`as f32`\u3067\u5909\u63db\u3057\u305f\u3044\u3002\n\n```rust\nimpl<A: From<f64>> Fromf64 for A {\n  fn from_f64(v: f64) -> A {\n    v.into()\n  }\n}\n\nimpl Fromf64 for f32 {\n  fn from_f64(v: f64) -> f32 {\n    v as f32\n  }\n}\n```\n\n\u3057\u304b\u3057\u3053\u308c\u304c\u901a\u3089\u306a\u3044\n\n```\nerror[E0119]: conflicting implementations of trait `Fromf64` for type `f32`:\n  --> src/main.rs:11:1\n   |\n5  | impl<A: From<f64>> Fromf64 for A {\n   | - first implementation here\n...\n11 | impl Fromf64 for f32 {\n   | ^ conflicting implementation for `f32`\n```\n\n\u3053\u308c\u304c\u901a\u3089\u306a\u3044\u306e\u304c\u7d0d\u5f97\u3044\u304b\u306a\u3044\u304c\u3001\u901a\u3089\u306a\u3044\u4ee5\u4e0a\u4ed5\u65b9\u304c\u306a\u3044(\u00b4\u30fb\u03c9\u30fb\uff40)\n\u8a66\u884c\u932f\u8aa4\u306e\u7d50\u679c\u3001\u30c0\u30df\u30fc\u578b\u3092\u4e00\u3064\u304b\u307e\u305b\u308b\u3068\u3044\u3051\u308b\u3053\u3068\u306b\u6c17\u4ed8\u3044\u305f\n\n```rust\npub trait Fromf64<Dummy> {\n    fn from_f64(f64) -> Self;\n}\n\nimpl<A: From<f64>> Fromf64<A> for A {\n    fn from_f64(v: f64) -> A {\n        v.into()\n    }\n}\n\nimpl Fromf64<()> for f32 {\n    fn from_f64(v: f64) -> Self {\n        v as f32\n    }\n}\n```\n\n\u4f7f\u3046\u3068\u304d\u306f\u3053\u306e`Dummy`\u3092\u7701\u7565\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\n```rust\nlet a = f32::from_f64(1.0);\n```\n\n\u3053\u308c\u3067`A::from_f64(v)`\u3067\u5909\u63db\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u304c\u3001\u91c8\u7136\u3068\u3057\u306a\u3044\u3002\u3002\u3002\n\n## \u53c2\u8003\u8cc7\u6599\n- Tracking issue for specialization (RFC 1210): https://github.com/rust-lang/rust/issues/31844\n- How to use specialization features: https://users.rust-lang.org/t/how-to-use-specialization-features/6023\n", "tags": ["rust1.14"]}