{"context": "\n\nMetal\nApple\u8b39\u88fd\u306e3D\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\uff0b\u30c7\u30fc\u30bf\u4e26\u5217\u6f14\u7b97\u306e\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3002\n\u4f3c\u305f\u3088\u3046\u306a\u6280\u8853\u3068\u3057\u3066\u306f\u3001Mantle\u3068\u304bVulkan\u3068\u304b\u3002\nOpenGL\u306e\u3088\u3046\u306b\u62bd\u8c61\u5ea6\u3092\u9ad8\u3081\u3066\u3001\u30de\u30eb\u30c1\u30d9\u30f3\u30c0\u5bfe\u5fdc\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u30d9\u30f3\u30c0\u306b\u306e\u307f\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u3067\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5c0f\u3055\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\u306a\u306e\u3067\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30b9\u7684\u306b\u6709\u5229\u3002\n\nMetal\u306e\u4f7f\u3044\u65b9\nMetal\u306f\u3001GPU\u3092\u30c7\u30d0\u30a4\u30b9(MTLDevice)\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u51e6\u7406\u306e\u6d41\u308c\u306f\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n\u30c7\u30d0\u30a4\u30b9\u306e\u53d6\u5f97\n\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u30b3\u30de\u30f3\u30c9\u30ad\u30e5\u30fc\u306e\u4f5c\u6210\n\u30b3\u30de\u30f3\u30c9\u30ad\u30e5\u30fc\u304b\u3089\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u4f5c\u6210\n\u30b3\u30de\u30f3\u30c9\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u4f5c\u6210\n\u5404\u7a2e\u30d0\u30c3\u30d5\u30a1\u30fc\u306e\u521d\u671f\u5316\n\n\n\u5165\u51fa\u529b\u306e\u30d0\u30c3\u30d5\u30a1\u30fc\n\u30c6\u30af\u30b9\u30c1\u30e3\u3001\u306a\u3069\u306a\u3069\n\n\n\u30b3\u30de\u30f3\u30c9\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306b\u547d\u4ee4\u3092\u66f8\u304d\u8fbc\u3080\n\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30b9\u30c6\u30fc\u30c8\u3068\u3057\u3066\u3001\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u8a2d\u5b9a\n\u30d0\u30c3\u30d5\u30a1\u30fc\u306e\u8a2d\u5b9a\n\n\n\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u30fc\u306e\u30b3\u30df\u30c3\u30c8\n\n\nGPU\u306b\u547d\u4ee4\u3092\u9001\u308b\n\n\nGPU\u306e\u51e6\u7406\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u3064\n\n\n\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\n\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306f\u3001\u4e71\u629e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u3064\u3002\n\u5927\u6570\u306e\u6cd5\u5247\u304c\u6210\u308a\u7acb\u3064\u5834\u5408\u306b\u3001\u6709\u52b9\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u5927\u91cf\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3059\u308b\u3053\u3068\u3067\u3001\u8fd1\u4f3c\u7684\u306b\u89e3\u3092\u6c42\u3081\u308b\u624b\u6cd5\u3002\n\n\u5186\u5468\u7387\u3092\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3067\u6c42\u3081\u308b\n\n1x1\u306e\u6b63\u65b9\u5f62\u306e\u4e2d\u306b\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5834\u6240\u306b\u70b9\u3092\u7f6e\u304f\u3002\n\u7f6e\u3044\u305f\u70b9\u304c\u5186\u306e\u5185\u5074\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3002\n\n\n\u5186\u306e\u5185\u5074\u304b\u3069\u3046\u304b\u306f\u3001\u539f\u70b9\u304b\u3089\u306e\u8ddd\u96e2\u304c1\u4ee5\u5185\u304b\u3069\u3046\u304b\n\n\n1.-2.\u3092\u7e70\u308a\u8fd4\u3059\u3002\n\u5186\u306e\u5185\u5074\u3068\u5224\u5b9a\u3055\u308c\u305f\u70b9\u306e\u6570\u3068\u8a66\u884c\u56de\u6570\u304b\u3089\u5186\u5468\u7387\u304c\u6c42\u307e\u308b\u3002\n\n\nMetal\u3092\u4f7f\u3046\u3068\u7f8e\u5473\u3057\u3044\u7406\u7531\n\u30e9\u30f3\u30c0\u30e0\u306b\u7f6e\u3044\u305f\u70b9\u304c\u5186\u306e\u5185\u5074\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3001\u3068\u3044\u3046\u5224\u5b9a\u306f\u72ec\u7acb\u3057\u3066\u5224\u5b9a\u304c\u304a\u3053\u306a\u308b\u306e\u3067\u3001GPU\u3067\u4e00\u6c17\u306b\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u30b3\u30fc\u30c9\u4f8b\nMonteCarloPi@GitHub\u306b\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\nViewController.swift\n    @IBAction func startCalculation(_ sender: NSButton) {\n        let start = NSDate()\n\n        let metalConfiguration = initMetal()\n        let inVector = prepareInputData(size: inputDataSize)\n        guard let mcFunc = metalConfiguration.library.newFunction(withName: \"monteCarloPi\") else {\n            abort()\n        }\n        guard let computePipelineState = try? metalConfiguration.device.newComputePipelineState(with: mcFunc) else {\n            abort()\n        }\n        metalConfiguration.computeCommandEncoder.setComputePipelineState(computePipelineState)\n        let inVectorBuffer = metalConfiguration.device.newBuffer(withBytes: inVector, length: inVector.byteLength, options: [])\n        metalConfiguration.computeCommandEncoder.setBuffer(inVectorBuffer, offset: 0, at: 0)\n        let outVector = [Bool](repeating: false, count: inVector.count)\n        let outVectorBuffer = metalConfiguration.device.newBuffer(withBytes: outVector, length: outVector.byteLength, options: [])\n        metalConfiguration.computeCommandEncoder.setBuffer(outVectorBuffer, offset: 0, at: 1)\n\n        let threadsPerGroup = MTLSize(width: 32, height: 1, depth: 1)\n        let numThreadgroups = MTLSize(width: (inVector.count + 31) / 32, height: 1, depth: 1)\n        metalConfiguration.computeCommandEncoder.dispatchThreadgroups(numThreadgroups, threadsPerThreadgroup: threadsPerGroup)\n\n        metalConfiguration.computeCommandEncoder.endEncoding()\n        metalConfiguration.commandBuffer.commit()\n        metalConfiguration.commandBuffer.waitUntilCompleted()\n\n        let data = NSData(bytesNoCopy: outVectorBuffer.contents(), length: outVector.byteLength, freeWhenDone: false)\n        var finalResultArray = [Bool](repeating: false, count: outVector.count)\n        data.getBytes(&finalResultArray, length: outVector.byteLength)\n\n        let count = finalResultArray.reduce(0) {\n            $1 ? $0 + 1 : $0\n        }\n\n        let pi = Double(4 * count) / Double(inputDataSize)\n\n        let end = NSDate()\n        let elapsed = end.timeIntervalSince(start)\n\n        NSLog(\"\\(elapsed)\")\n        resultTextField.stringValue = \"\\(pi)\"\n    }\n\n    private func initMetal() -> (device: MTLDevice, commandQueue: MTLCommandQueue, library: MTLLibrary, commandBuffer: MTLCommandBuffer, computeCommandEncoder: MTLComputeCommandEncoder) {\n\n        guard let device = MTLCreateSystemDefaultDevice(), defaultLibrary = device.newDefaultLibrary() else {\n            abort()\n        }\n        let commandQueue = device.newCommandQueue()\n        let commandBuffer = commandQueue.commandBuffer()\n        let computeCommandEncoder = commandBuffer.computeCommandEncoder()\n        return (device, commandQueue, defaultLibrary, commandBuffer, computeCommandEncoder)\n    }\n\n    private func prepareInputData(size: Int) -> [Point] {\n        var dataSet = [Point]()\n        for _ in 0..<size {\n            let x = Float(arc4random_uniform(UInt32.max)) / Float(UInt32.max)\n            let y = Float(arc4random_uniform(UInt32.max)) / Float(UInt32.max)\n            dataSet.append(Point(x: x, y: y))\n        }\n        return dataSet\n    }\n\n\n\nShaders.metal\n#include <metal_stdlib>\nusing namespace metal;\n\nkernel void monteCarloPi(const device float2 *inVector [[ buffer(0) ]],\n                         device bool *outVector [[ buffer(1) ]],\n                         uint id [[ thread_position_in_grid ]])\n{\n    float2 loc = inVector[id];\n    outVector[id] = (length_squared(loc) < 1.0) ? true  : false;\n}\n\n\n\n# Metal\nApple\u8b39\u88fd\u306e3D\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30b9\uff0b\u30c7\u30fc\u30bf\u4e26\u5217\u6f14\u7b97\u306e\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3002\n\u4f3c\u305f\u3088\u3046\u306a\u6280\u8853\u3068\u3057\u3066\u306f\u3001Mantle\u3068\u304bVulkan\u3068\u304b\u3002\nOpenGL\u306e\u3088\u3046\u306b\u62bd\u8c61\u5ea6\u3092\u9ad8\u3081\u3066\u3001\u30de\u30eb\u30c1\u30d9\u30f3\u30c0\u5bfe\u5fdc\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u7279\u5b9a\u306e\u30d9\u30f3\u30c0\u306b\u306e\u307f\u5bfe\u5fdc\u3059\u308b\u3053\u3068\u3067\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5c0f\u3055\u304f\u306a\u3063\u3066\u3044\u308b\u3002\n\u306a\u306e\u3067\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30b9\u7684\u306b\u6709\u5229\u3002\n\n# Metal\u306e\u4f7f\u3044\u65b9\nMetal\u306f\u3001GPU\u3092\u30c7\u30d0\u30a4\u30b9(`MTLDevice`)\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u51e6\u7406\u306e\u6d41\u308c\u306f\u3001\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n1. \u30c7\u30d0\u30a4\u30b9\u306e\u53d6\u5f97\n2. \u30c7\u30d0\u30a4\u30b9\u304b\u3089\u30b3\u30de\u30f3\u30c9\u30ad\u30e5\u30fc\u306e\u4f5c\u6210\n3. \u30b3\u30de\u30f3\u30c9\u30ad\u30e5\u30fc\u304b\u3089\u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u306e\u4f5c\u6210\n4. \u30b3\u30de\u30f3\u30c9\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306e\u4f5c\u6210\n5. \u5404\u7a2e\u30d0\u30c3\u30d5\u30a1\u30fc\u306e\u521d\u671f\u5316\n\t* \u5165\u51fa\u529b\u306e\u30d0\u30c3\u30d5\u30a1\u30fc\n\t* \u30c6\u30af\u30b9\u30c1\u30e3\u3001\u306a\u3069\u306a\u3069\n6. \u30b3\u30de\u30f3\u30c9\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306b\u547d\u4ee4\u3092\u66f8\u304d\u8fbc\u3080\n\t* \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30b9\u30c6\u30fc\u30c8\u3068\u3057\u3066\u3001\u30b7\u30a7\u30fc\u30c0\u30fc\u306e\u8a2d\u5b9a\n\t* \u30d0\u30c3\u30d5\u30a1\u30fc\u306e\u8a2d\u5b9a\n7. \u30b3\u30de\u30f3\u30c9\u30d0\u30c3\u30d5\u30a1\u30fc\u306e\u30b3\u30df\u30c3\u30c8\n\t* GPU\u306b\u547d\u4ee4\u3092\u9001\u308b\n8. GPU\u306e\u51e6\u7406\u304c\u7d42\u308f\u308b\u307e\u3067\u5f85\u3064\n\n# \u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\n\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u306f\u3001\u4e71\u629e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e00\u3064\u3002\n\u5927\u6570\u306e\u6cd5\u5247\u304c\u6210\u308a\u7acb\u3064\u5834\u5408\u306b\u3001\u6709\u52b9\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u5927\u91cf\u306b\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3059\u308b\u3053\u3068\u3067\u3001\u8fd1\u4f3c\u7684\u306b\u89e3\u3092\u6c42\u3081\u308b\u624b\u6cd5\u3002\n\n# \u5186\u5468\u7387\u3092\u30e2\u30f3\u30c6\u30ab\u30eb\u30ed\u6cd5\u3067\u6c42\u3081\u308b\n1. 1x1\u306e\u6b63\u65b9\u5f62\u306e\u4e2d\u306b\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u5834\u6240\u306b\u70b9\u3092\u7f6e\u304f\u3002\n2. \u7f6e\u3044\u305f\u70b9\u304c\u5186\u306e\u5185\u5074\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3002\n\t* \u5186\u306e\u5185\u5074\u304b\u3069\u3046\u304b\u306f\u3001\u539f\u70b9\u304b\u3089\u306e\u8ddd\u96e2\u304c1\u4ee5\u5185\u304b\u3069\u3046\u304b\n3. 1.-2.\u3092\u7e70\u308a\u8fd4\u3059\u3002\n4. \u5186\u306e\u5185\u5074\u3068\u5224\u5b9a\u3055\u308c\u305f\u70b9\u306e\u6570\u3068\u8a66\u884c\u56de\u6570\u304b\u3089\u5186\u5468\u7387\u304c\u6c42\u307e\u308b\u3002\n\n# Metal\u3092\u4f7f\u3046\u3068\u7f8e\u5473\u3057\u3044\u7406\u7531\n\u30e9\u30f3\u30c0\u30e0\u306b\u7f6e\u3044\u305f\u70b9\u304c\u5186\u306e\u5185\u5074\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3001\u3068\u3044\u3046\u5224\u5b9a\u306f\u72ec\u7acb\u3057\u3066\u5224\u5b9a\u304c\u304a\u3053\u306a\u308b\u306e\u3067\u3001GPU\u3067\u4e00\u6c17\u306b\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n# \u30b3\u30fc\u30c9\u4f8b\n[MonteCarloPi@GitHub](https://github.com/nhamada/MonteCarloPi)\u306b\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n```ViewController.swift\n    @IBAction func startCalculation(_ sender: NSButton) {\n        let start = NSDate()\n        \n        let metalConfiguration = initMetal()\n        let inVector = prepareInputData(size: inputDataSize)\n        guard let mcFunc = metalConfiguration.library.newFunction(withName: \"monteCarloPi\") else {\n            abort()\n        }\n        guard let computePipelineState = try? metalConfiguration.device.newComputePipelineState(with: mcFunc) else {\n            abort()\n        }\n        metalConfiguration.computeCommandEncoder.setComputePipelineState(computePipelineState)\n        let inVectorBuffer = metalConfiguration.device.newBuffer(withBytes: inVector, length: inVector.byteLength, options: [])\n        metalConfiguration.computeCommandEncoder.setBuffer(inVectorBuffer, offset: 0, at: 0)\n        let outVector = [Bool](repeating: false, count: inVector.count)\n        let outVectorBuffer = metalConfiguration.device.newBuffer(withBytes: outVector, length: outVector.byteLength, options: [])\n        metalConfiguration.computeCommandEncoder.setBuffer(outVectorBuffer, offset: 0, at: 1)\n        \n        let threadsPerGroup = MTLSize(width: 32, height: 1, depth: 1)\n        let numThreadgroups = MTLSize(width: (inVector.count + 31) / 32, height: 1, depth: 1)\n        metalConfiguration.computeCommandEncoder.dispatchThreadgroups(numThreadgroups, threadsPerThreadgroup: threadsPerGroup)\n        \n        metalConfiguration.computeCommandEncoder.endEncoding()\n        metalConfiguration.commandBuffer.commit()\n        metalConfiguration.commandBuffer.waitUntilCompleted()\n        \n        let data = NSData(bytesNoCopy: outVectorBuffer.contents(), length: outVector.byteLength, freeWhenDone: false)\n        var finalResultArray = [Bool](repeating: false, count: outVector.count)\n        data.getBytes(&finalResultArray, length: outVector.byteLength)\n        \n        let count = finalResultArray.reduce(0) {\n            $1 ? $0 + 1 : $0\n        }\n        \n        let pi = Double(4 * count) / Double(inputDataSize)\n        \n        let end = NSDate()\n        let elapsed = end.timeIntervalSince(start)\n        \n        NSLog(\"\\(elapsed)\")\n        resultTextField.stringValue = \"\\(pi)\"\n    }\n    \n    private func initMetal() -> (device: MTLDevice, commandQueue: MTLCommandQueue, library: MTLLibrary, commandBuffer: MTLCommandBuffer, computeCommandEncoder: MTLComputeCommandEncoder) {\n        \n        guard let device = MTLCreateSystemDefaultDevice(), defaultLibrary = device.newDefaultLibrary() else {\n            abort()\n        }\n        let commandQueue = device.newCommandQueue()\n        let commandBuffer = commandQueue.commandBuffer()\n        let computeCommandEncoder = commandBuffer.computeCommandEncoder()\n        return (device, commandQueue, defaultLibrary, commandBuffer, computeCommandEncoder)\n    }\n\n    private func prepareInputData(size: Int) -> [Point] {\n        var dataSet = [Point]()\n        for _ in 0..<size {\n            let x = Float(arc4random_uniform(UInt32.max)) / Float(UInt32.max)\n            let y = Float(arc4random_uniform(UInt32.max)) / Float(UInt32.max)\n            dataSet.append(Point(x: x, y: y))\n        }\n        return dataSet\n    }\n```\n\n```Shaders.metal\n#include <metal_stdlib>\nusing namespace metal;\n\nkernel void monteCarloPi(const device float2 *inVector [[ buffer(0) ]],\n                         device bool *outVector [[ buffer(1) ]],\n                         uint id [[ thread_position_in_grid ]])\n{\n    float2 loc = inVector[id];\n    outVector[id] = (length_squared(loc) < 1.0) ? true  : false;\n}\n```\n", "tags": ["Swift", "Metal"]}