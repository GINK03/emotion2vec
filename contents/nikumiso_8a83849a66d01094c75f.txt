{"tags": ["Python", "Twitter", "tweepy", "MongoDB"], "context": " More than 1 year has passed since last update.\u666e\u6bb5\u306f\u4ed5\u4e8b\u4e0aC#\u3084Java\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3059\u304c\u3001\u4ee5\u524d\u304b\u3089Python\u306b\u8208\u5473\u304c\u3042\u308a\u3001\n\u30c7\u30fc\u30bf\u5206\u6790\u3084\u6a5f\u68b0\u5b66\u7fd2\u304c\u6d41\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u6a5f\u306bPython\u3092\u52c9\u5f37\u3057\u3088\u3046\u3068\u601d\u3044\u7acb\u3063\u305f\u6b21\u7b2c\u3067\u3059\uff01\uff01\nPython\u306b\u3064\u3044\u3066\u306f\u3001\u6700\u8fd1\u767a\u58f2\u3057\u305f\u5165\u9580Python3\u3092\u8aad\u3093\u3067\u5b66\u7fd2\u3057\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001\u3059\u3067\u306b\u8272\u3005\u306a\u65b9\u304c\u7d39\u4ecb\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u307e\u3059\u304c\u3001Twitter\u691c\u7d22\u3057\u305f\u7d50\u679c\u3092MongoDB\u306b\u4fdd\u5b58\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3082\u3063\u3068\u3053\u3046\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u3068\u304b\u8272\u3005\u7a81\u3063\u8fbc\u3093\u3067\u3044\u305f\u3060\u3051\u308b\u3068\u3068\u3066\u3082\u5b09\u3057\u3044\u3067\u3059\uff01\uff01\n\n\u74b0\u5883\n\nPython 3.5\nPyYAML 3.1.1\npymongo 3.2\ntweepy 3.5.0\n\n\n\u5404\u7a2e\u8a2d\u5b9a\n\u5404\u81ea\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u305f\u8a2d\u5b9a\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nconfig.py\n# coding=utf-8\n# write code...\n\n# mongodb\nHOST = 'localhost'\nPORT = 27017\nDB_NAME = 'twitter-archive'\nCOLLECTION_NAME = 'tweets'\n\n# twitter\nCONSUMER_KEY = ''\nCONSUMER_SECRET = ''\nACCESS_TOKEN_KEY = ''\nACCESS_TOKEN_SECRET = ''\n\n\n\n\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\nTwitter\u691c\u7d22\u3059\u308b\u969b\u306b\u6307\u5b9a\u3059\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u3001YAML\u30d5\u30a1\u30a4\u30eb\u3067\u7ba1\u7406\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\nkeywords.yml\n# Twitter\u306e\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3002\n# \u4ee5\u4e0b\u306f\u3001\u4f8b\u3067\u3059\u3002\n- '\u30cf\u30f3\u30d0\u30fc\u30b0'\n- '\u91ce\u7403'\n- '\u30af\u30ea\u30b9\u30de\u30b9'\n\n\n\n\u30ed\u30b0\u51fa\u529b\u7528\u30af\u30e9\u30b9\nlogging\u306e\u4f7f\u3044\u65b9\u3092\u8abf\u3079\u306a\u304c\u3089\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u307e\u3060\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u3053\u3068\u3082\u591a\u304f\u3001\u7d30\u304b\u3044\u8a2d\u5b9a\u306f\u52c9\u5f37\u4e2d\u3067\u3059\u304c\u3001\u30ed\u30b0\u51fa\u529b\u3067\u304d\u308b\u3068\u3053\u308d\u307e\u3067\u306f\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\nlogger.py\nimport logging\nfrom logging.handlers import TimedRotatingFileHandler\n\n# coding=utf-8\n# write code...\n\nclass Logger:\n    def __init__(self, log_type):\n        logger = logging.getLogger(log_type)\n        logger.setLevel(logging.DEBUG)\n        # \u65e5\u3054\u3068\u306b\u30ed\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3057\u305f\u3044\u3051\u3069\u307e\u3060\u3067\u304d\u3066\u306a\u3044\u3002\u3002\u3002\n        handler = TimedRotatingFileHandler(filename='archive.log', when='D', backupCount=30)\n        formatter = logging.Formatter('[%(asctime)s] %(name)s %(levelname)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        self.logger = logger\n\n    def info(self, msg, *args, **kwargs):\n        self.logger.info(msg, *args, **kwargs)\n\n    def debug(self, msg, *args, **kwargs):\n        self.logger.debug(msg, *args, **kwargs)\n\n    def error(self, msg, *args, **kwargs):\n        self.logger.error(msg, *args, **kwargs)\n\n    def exception(self, msg, *args, exc_info=True, **kwargs):\n        self.logger.exception(msg, *args, exc_info, **kwargs)\n\n\n\n\u30e1\u30a4\u30f3\u306e\u691c\u7d22\uff06\u4fdd\u5b58\u51e6\u7406\n\u9031\u306b\u4e00\u5ea6\u30d0\u30c3\u30c1\u8d77\u52d5\u3057\u3066\u5b9a\u671f\u7684\u306b\u3064\u3076\u3084\u304d\u3092\u84c4\u7a4d\u3057\u3066\u3044\u3053\u3046\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u601d\u3063\u3066\u3044\u305f\u3088\u308a\u3082Twitter API\u306e\u4ed5\u69d8\u306e\u7406\u89e3\u306b\u82e6\u52b4\u3057\u307e\u3057\u305f\u3002\n\u91cd\u8907\u3057\u305f\u3064\u3076\u3084\u304d\u3092\u53d6\u5f97\u3057\u306a\u3044\u3088\u3046\u306bsince_id\u3068max_id\u3092\u4f7f\u3063\u3066\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u3069\u3046\u3084\u3063\u3066\u3084\u308b\u306e\u304c\u3088\u304b\u3063\u305f\u306e\u3060\u308d\u3046\u304b\u3002\u3002\u3002\n\narchive.py\nimport sys\nimport config\nimport yaml\nfrom tweepy import *\nfrom tweepy.parsers import JSONParser\nfrom pymongo import *\nfrom logger import Logger\n\n\n# coding: UTF-8\n# write code...\n\ndef archive():\n\n    # YAML\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u30ea\u30b9\u30c8\u3092\u8aad\u307f\u53d6\u308a\u3001OR\u691c\u7d22\u7528\u306e\u6587\u5b57\u5217\u3092\u751f\u6210\u3059\u308b\u3002\n    with open('keywords.yml', 'r') as file:\n        keywords = yaml.load(file)\n    query_string = ' OR '.join(keywords)\n\n    # \u30ed\u30b0\u51fa\u529b\u7528\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\n    logger = Logger('archive')\n\n    # Twitter\u691c\u7d22\u7528\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u751f\u6210\n    auth = OAuthHandler(config.CONSUMER_KEY, config.CONSUMER_SECRET)\n    auth.set_access_token(config.ACCESS_TOKEN_KEY, config.ACCESS_TOKEN_SECRET)\n    # JSON\u3067\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308a\u305f\u3044\u306e\u3067\u3001JSONParser\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n    # \u691c\u7d22\u306e\u4e0a\u9650\u306b\u9054\u3057\u3066\u3082\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u3067\u3088\u308d\u3057\u304f\u3084\u3063\u3066\u304f\u308c\u308b\u3002\u306f\u305a\u3002\n    twitter_client = API(auth, parser=JSONParser(), wait_on_rate_limit=True, wait_on_rate_limit_notify=True)\n    if twitter_client is None:\n        logger.error('\u8a8d\u8a3c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002')\n        sys.exit(-1)\n\n    # \u3064\u3076\u3084\u304d\u3092\u4fdd\u5b58\u3059\u308bmongodb\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u521d\u671f\u5316\n    client = MongoClient(config.HOST, config.PORT)\n    tweet_collection = client[config.DB_NAME][config.COLLECTION_NAME]\n\n    # \u53d6\u5f97\u6e08\u306e\u3064\u3076\u3084\u304d\u306e\u4e2d\u304b\u3089\u6700\u65b0\u306e\u3064\u3076\u3084\u304d\u3092\u53d6\u5f97\u3057\u3001\u305d\u306e\u3064\u3076\u3084\u304d\u306eid\u4ee5\u964d\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n    last_tweet = tweet_collection.find_one(sort=[('id', DESCENDING)])\n    since_id = None if last_tweet is None else last_tweet['id']\n\n    # \u521d\u56de\u306e\u691c\u7d22\u6642\u306f\u3001max_id\u306e\u8a2d\u5b9a\u3092\u3057\u306a\u3044\u3088\u3046\u306b-1\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n    max_id = -1\n\n    # tweet_count\u304cmax_tweet_count\u307e\u3067\u9054\u3057\u305f\u3089\u3001\u691c\u7d22\u3092\u7d42\u4e86\u3059\u308b\u3002\n    # max_tweet_count\u306b\u306f\u5927\u304d\u306a\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n    tweet_count = 0\n    max_tweet_count = 100000\n\n    logger.info('\u6700\u5927{0}\u500b\u306e\u3064\u3076\u3084\u304d\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002'.format(max_tweet_count))\n    while tweet_count < max_tweet_count:\n        try:\n            params = {\n                'q': query_string,\n                'count': 100,\n                'lang': 'ja'\n            }\n            # max_id\u3068since_id\u306f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3088\u3046\u306b\u3059\u308b\u3002\n            if max_id > 0:\n                params['max_id'] = str(max_id - 1)\n            if since_id is not None:\n                params['since_id'] = since_id\n\n            search_result = twitter_client.search(**params)\n            statuses = search_result['statuses']\n\n            # \u6700\u5f8c\u307e\u3067\u691c\u7d22\u3067\u304d\u305f\u304b\u30c1\u30a7\u30c3\u30af\n            if statuses is None or len(statuses) == 0:\n                logger.info('\u3064\u3076\u3084\u304d\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002')\n                break\n\n            tweet_count += len(statuses)\n            logger.debug('{0}\u500b\u306e\u3064\u3076\u3084\u304d\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002'.format(tweet_count))\n\n            result = tweet_collection.insert_many([status for status in statuses])\n            logger.debug('MongoDB\u306b\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002ID\u306f\u3001{0}\u3067\u3059\u3002'.format(result))\n\n            # \u6700\u5f8c\u306b\u53d6\u5f97\u3057\u305fTweet\u306eID\u3067\u66f4\u65b0\u3059\u308b\u3002\n            max_id = statuses[-1]['id']\n\n        except (TypeError, TweepError) as e:\n            print(str(e))\n            logger.exception(str(e))\n            break\n\nif __name__ == '__main__':\n    archive()\n\n\n\n\u307e\u3068\u3081\nPython\u306f\u307e\u3060\u5168\u7136\u4f7f\u3044\u3053\u306a\u305b\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u3084\u308a\u305f\u3044\u3053\u3068\u304c\u30b9\u30c3\u30ad\u30ea\u66f8\u3051\u308b\u8a00\u8a9e\u3060\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u7d99\u7d9a\u3057\u3066\u5b66\u7fd2\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u5f8c\u306f\u3001\u30c7\u30fc\u30bf\u5206\u6790\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3001\u53ce\u96c6\u3057\u305f\u3064\u3076\u3084\u304d\u3092\u89e3\u6790\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff01\uff01\n\n\u666e\u6bb5\u306f\u4ed5\u4e8b\u4e0aC#\u3084Java\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3059\u304c\u3001\u4ee5\u524d\u304b\u3089Python\u306b\u8208\u5473\u304c\u3042\u308a\u3001\n\u30c7\u30fc\u30bf\u5206\u6790\u3084\u6a5f\u68b0\u5b66\u7fd2\u304c\u6d41\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u6a5f\u306bPython\u3092\u52c9\u5f37\u3057\u3088\u3046\u3068\u601d\u3044\u7acb\u3063\u305f\u6b21\u7b2c\u3067\u3059\uff01\uff01\n\nPython\u306b\u3064\u3044\u3066\u306f\u3001\u6700\u8fd1\u767a\u58f2\u3057\u305f[\u5165\u9580Python3](http://www.amazon.co.jp/%E5%85%A5%E9%96%80-Python-3-Bill-Lubanovic/dp/4873117380/ref=sr_1_1?ie=UTF8&qid=1450703044&sr=8-1&keywords=%E5%85%A5%E9%96%80Python3)\u3092\u8aad\u3093\u3067\u5b66\u7fd2\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3001\u3059\u3067\u306b\u8272\u3005\u306a\u65b9\u304c\u7d39\u4ecb\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u307e\u3059\u304c\u3001Twitter\u691c\u7d22\u3057\u305f\u7d50\u679c\u3092MongoDB\u306b\u4fdd\u5b58\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3082\u3063\u3068\u3053\u3046\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u3068\u304b\u8272\u3005\u7a81\u3063\u8fbc\u3093\u3067\u3044\u305f\u3060\u3051\u308b\u3068\u3068\u3066\u3082\u5b09\u3057\u3044\u3067\u3059\uff01\uff01\n\n\n## \u74b0\u5883\n* Python 3.5\n* PyYAML 3.1.1\n* pymongo 3.2\n* tweepy 3.5.0\n\n\n## \u5404\u7a2e\u8a2d\u5b9a\n\u5404\u81ea\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u305f\u8a2d\u5b9a\u3092\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```python:config.py\n# coding=utf-8\n# write code...\n\n# mongodb\nHOST = 'localhost'\nPORT = 27017\nDB_NAME = 'twitter-archive'\nCOLLECTION_NAME = 'tweets'\n\n# twitter\nCONSUMER_KEY = ''\nCONSUMER_SECRET = ''\nACCESS_TOKEN_KEY = ''\nACCESS_TOKEN_SECRET = ''\n```\n\n## \u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\nTwitter\u691c\u7d22\u3059\u308b\u969b\u306b\u6307\u5b9a\u3059\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u3001YAML\u30d5\u30a1\u30a4\u30eb\u3067\u7ba1\u7406\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\n```yaml:keywords.yml\n# Twitter\u306e\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u30ea\u30b9\u30c8\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3002\n# \u4ee5\u4e0b\u306f\u3001\u4f8b\u3067\u3059\u3002\n- '\u30cf\u30f3\u30d0\u30fc\u30b0'\n- '\u91ce\u7403'\n- '\u30af\u30ea\u30b9\u30de\u30b9'\n```\n\n## \u30ed\u30b0\u51fa\u529b\u7528\u30af\u30e9\u30b9\nlogging\u306e\u4f7f\u3044\u65b9\u3092\u8abf\u3079\u306a\u304c\u3089\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u307e\u3060\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u3053\u3068\u3082\u591a\u304f\u3001\u7d30\u304b\u3044\u8a2d\u5b9a\u306f\u52c9\u5f37\u4e2d\u3067\u3059\u304c\u3001\u30ed\u30b0\u51fa\u529b\u3067\u304d\u308b\u3068\u3053\u308d\u307e\u3067\u306f\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n```python:logger.py\nimport logging\nfrom logging.handlers import TimedRotatingFileHandler\n\n# coding=utf-8\n# write code...\n\nclass Logger:\n    def __init__(self, log_type):\n        logger = logging.getLogger(log_type)\n        logger.setLevel(logging.DEBUG)\n        # \u65e5\u3054\u3068\u306b\u30ed\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3057\u305f\u3044\u3051\u3069\u307e\u3060\u3067\u304d\u3066\u306a\u3044\u3002\u3002\u3002\n        handler = TimedRotatingFileHandler(filename='archive.log', when='D', backupCount=30)\n        formatter = logging.Formatter('[%(asctime)s] %(name)s %(levelname)s %(message)s')\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        self.logger = logger\n\n    def info(self, msg, *args, **kwargs):\n        self.logger.info(msg, *args, **kwargs)\n\n    def debug(self, msg, *args, **kwargs):\n        self.logger.debug(msg, *args, **kwargs)\n\n    def error(self, msg, *args, **kwargs):\n        self.logger.error(msg, *args, **kwargs)\n\n    def exception(self, msg, *args, exc_info=True, **kwargs):\n        self.logger.exception(msg, *args, exc_info, **kwargs)\n```\n\n## \u30e1\u30a4\u30f3\u306e\u691c\u7d22\uff06\u4fdd\u5b58\u51e6\u7406\n\u9031\u306b\u4e00\u5ea6\u30d0\u30c3\u30c1\u8d77\u52d5\u3057\u3066\u5b9a\u671f\u7684\u306b\u3064\u3076\u3084\u304d\u3092\u84c4\u7a4d\u3057\u3066\u3044\u3053\u3046\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u601d\u3063\u3066\u3044\u305f\u3088\u308a\u3082Twitter API\u306e\u4ed5\u69d8\u306e\u7406\u89e3\u306b\u82e6\u52b4\u3057\u307e\u3057\u305f\u3002\n\u91cd\u8907\u3057\u305f\u3064\u3076\u3084\u304d\u3092\u53d6\u5f97\u3057\u306a\u3044\u3088\u3046\u306bsince_id\u3068max_id\u3092\u4f7f\u3063\u3066\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u3069\u3046\u3084\u3063\u3066\u3084\u308b\u306e\u304c\u3088\u304b\u3063\u305f\u306e\u3060\u308d\u3046\u304b\u3002\u3002\u3002\n\n\n```python:archive.py\nimport sys\nimport config\nimport yaml\nfrom tweepy import *\nfrom tweepy.parsers import JSONParser\nfrom pymongo import *\nfrom logger import Logger\n\n\n# coding: UTF-8\n# write code...\n\ndef archive():\n\n    # YAML\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\u306e\u30ea\u30b9\u30c8\u3092\u8aad\u307f\u53d6\u308a\u3001OR\u691c\u7d22\u7528\u306e\u6587\u5b57\u5217\u3092\u751f\u6210\u3059\u308b\u3002\n    with open('keywords.yml', 'r') as file:\n        keywords = yaml.load(file)\n    query_string = ' OR '.join(keywords)\n\n    # \u30ed\u30b0\u51fa\u529b\u7528\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u521d\u671f\u5316\n    logger = Logger('archive')\n\n    # Twitter\u691c\u7d22\u7528\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u751f\u6210\n    auth = OAuthHandler(config.CONSUMER_KEY, config.CONSUMER_SECRET)\n    auth.set_access_token(config.ACCESS_TOKEN_KEY, config.ACCESS_TOKEN_SECRET)\n    # JSON\u3067\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308a\u305f\u3044\u306e\u3067\u3001JSONParser\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n    # \u691c\u7d22\u306e\u4e0a\u9650\u306b\u9054\u3057\u3066\u3082\u30e9\u30a4\u30d6\u30e9\u30ea\u5074\u3067\u3088\u308d\u3057\u304f\u3084\u3063\u3066\u304f\u308c\u308b\u3002\u306f\u305a\u3002\n    twitter_client = API(auth, parser=JSONParser(), wait_on_rate_limit=True, wait_on_rate_limit_notify=True)\n    if twitter_client is None:\n        logger.error('\u8a8d\u8a3c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002')\n        sys.exit(-1)\n\n    # \u3064\u3076\u3084\u304d\u3092\u4fdd\u5b58\u3059\u308bmongodb\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u521d\u671f\u5316\n    client = MongoClient(config.HOST, config.PORT)\n    tweet_collection = client[config.DB_NAME][config.COLLECTION_NAME]\n\n    # \u53d6\u5f97\u6e08\u306e\u3064\u3076\u3084\u304d\u306e\u4e2d\u304b\u3089\u6700\u65b0\u306e\u3064\u3076\u3084\u304d\u3092\u53d6\u5f97\u3057\u3001\u305d\u306e\u3064\u3076\u3084\u304d\u306eid\u4ee5\u964d\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n    last_tweet = tweet_collection.find_one(sort=[('id', DESCENDING)])\n    since_id = None if last_tweet is None else last_tweet['id']\n\n    # \u521d\u56de\u306e\u691c\u7d22\u6642\u306f\u3001max_id\u306e\u8a2d\u5b9a\u3092\u3057\u306a\u3044\u3088\u3046\u306b-1\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n    max_id = -1\n\n    # tweet_count\u304cmax_tweet_count\u307e\u3067\u9054\u3057\u305f\u3089\u3001\u691c\u7d22\u3092\u7d42\u4e86\u3059\u308b\u3002\n    # max_tweet_count\u306b\u306f\u5927\u304d\u306a\u5024\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n    tweet_count = 0\n    max_tweet_count = 100000\n\n    logger.info('\u6700\u5927{0}\u500b\u306e\u3064\u3076\u3084\u304d\u3092\u53ce\u96c6\u3057\u307e\u3059\u3002'.format(max_tweet_count))\n    while tweet_count < max_tweet_count:\n        try:\n            params = {\n                'q': query_string,\n                'count': 100,\n                'lang': 'ja'\n            }\n            # max_id\u3068since_id\u306f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3059\u3088\u3046\u306b\u3059\u308b\u3002\n            if max_id > 0:\n                params['max_id'] = str(max_id - 1)\n            if since_id is not None:\n                params['since_id'] = since_id\n\n            search_result = twitter_client.search(**params)\n            statuses = search_result['statuses']\n\n            # \u6700\u5f8c\u307e\u3067\u691c\u7d22\u3067\u304d\u305f\u304b\u30c1\u30a7\u30c3\u30af\n            if statuses is None or len(statuses) == 0:\n                logger.info('\u3064\u3076\u3084\u304d\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002')\n                break\n\n            tweet_count += len(statuses)\n            logger.debug('{0}\u500b\u306e\u3064\u3076\u3084\u304d\u3092\u53d6\u5f97\u3057\u307e\u3057\u305f\u3002'.format(tweet_count))\n\n            result = tweet_collection.insert_many([status for status in statuses])\n            logger.debug('MongoDB\u306b\u4fdd\u5b58\u3057\u307e\u3057\u305f\u3002ID\u306f\u3001{0}\u3067\u3059\u3002'.format(result))\n\n            # \u6700\u5f8c\u306b\u53d6\u5f97\u3057\u305fTweet\u306eID\u3067\u66f4\u65b0\u3059\u308b\u3002\n            max_id = statuses[-1]['id']\n\n        except (TypeError, TweepError) as e:\n            print(str(e))\n            logger.exception(str(e))\n            break\n\nif __name__ == '__main__':\n    archive()\n```\n\n## \u307e\u3068\u3081\nPython\u306f\u307e\u3060\u5168\u7136\u4f7f\u3044\u3053\u306a\u305b\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u3084\u308a\u305f\u3044\u3053\u3068\u304c\u30b9\u30c3\u30ad\u30ea\u66f8\u3051\u308b\u8a00\u8a9e\u3060\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u7d99\u7d9a\u3057\u3066\u5b66\u7fd2\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u5f8c\u306f\u3001\u30c7\u30fc\u30bf\u5206\u6790\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u3001\u53ce\u96c6\u3057\u305f\u3064\u3076\u3084\u304d\u3092\u89e3\u6790\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff01\uff01\n\n"}