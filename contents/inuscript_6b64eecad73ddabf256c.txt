{"tags": ["redux", "redux-observable", "axios", "JavaScript", "RxJS"], "context": "\n\n\u554f\u984c\u70b9\nredux-observable\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306fWritingTests\u306e\u30da\u30fc\u30b8\u304c\u3042\u308b\u3002\n\u304c\u3001\u4f8b\u3048\u3070\u3053\u308c\u304cPromise\u3092\u8fd4\u3059axios\u3068\u304b\u3068\u7d44\u307f\u3042\u308f\u305b\u305f\u308a\u3057\u305f\u6642\u3061\u3087\u3063\u3068\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\u3053\u3093\u306aepic\u3092\u7528\u610f\u3057\u3066\u8003\u3048\u308b\u3002\nconst axios = require(\"axios\")\nconst { createEpicMiddleware } = require('redux-observable')\nrequire(\"rxjs\")\n\nconst payload = { id: 123 }\n\n// test\u7528\u306bmock\u5316\nconst mockAdapter = (config) => {\n  return new Promise((resolve, reject) => {\n    resolve({data: payload, status: 200 })\n  })\n}\n\nconst fakeApi = axios.create({\n  adapter: mockAdapter\n})\n\nconst FETCH_USER = \"FETCH_USER\"\nconst FETCH_USER_FULFILLED = \"FETCH_USER_FULFILLED\"\n\nconst fetchUserFulfilled = payload => {\n  return { type: FETCH_USER_FULFILLED, payload }\n}\n\nconst fetchUserEpic = action$ => {\n  return action$.ofType(FETCH_USER)\n    .mergeMap(action => fakeApi.get(`/api/users/${action.payload}`))\n    .map( ({ data }) => fetchUserFulfilled(data) )\n}\n\n\u305d\u3057\u3066\u3001\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u307f\u308b\u3002\n\u3053\u308c\u304c\u4e0a\u8a18\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308b\u3088\u3046\u306b\u305d\u306e\u307e\u307e\u66f8\u304f\u3068\u901a\u3089\u306a\u3044\u3002\nconst configureMockStore = require('redux-mock-store').default\nconst epicMiddleware = createEpicMiddleware(fetchUserEpic);\nconst mockStore = configureMockStore([epicMiddleware]);\n\ndescribe('fetchUserEpic', () => {\n  it('produces the user model', () => {\n    // \u3046\u307e\u304f\u3044\u304b\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u3002\n    const store = mockStore();\n    store.dispatch({ type: FETCH_USER })\n    expect(store.getActions()).toEqual([\n      { type: FETCH_USER }, // \u3053\u3061\u3089\u306eacton\u306f\u3042\u308b\n      { type: FETCH_USER_FULFILLED, { id: 123 } } // \u3053\u3061\u3089\u304c\u7121\u3044\n    ])\n  })\n})\n\n\u3053\u308c\u306f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306aepic\u3067\u3082test\u304c\u901a\u3089\u306a\u3044\u4e8b\u304c\u78ba\u8a8d\u3067\u304d\u305f\nconst fetchUserEpic = action$ => {\n  return action$.ofType(FETCH_USER)\n    .delay(1000)\n    .map( () => fetchUserFulfilled(payload) )\n\n\u3064\u307e\u308a\u3001 delay\u3084promise\u3067\u975e\u540c\u671f\u7684\u306a\u52d5\u304d\u3092\u3059\u308b\u5834\u5408\u306b\u3053\u306e\u307e\u307e\u3060\u3068\u3046\u307e\u304f\u3044\u304b\u306a\u3044\n\n\u3069\u3046\u3059\u308b\u304b\uff1f\n\n\u89e3\u6cd51: setTimeout\u3059\u308b\n\u3059\u3054\u3044\u5fae\u5999\u306a\u3084\u308a\u304b\u305f\u3002\ndescribe('fetchUserEpic', () => {\n  it('produces the user model', (done) => {\n    const store = mockStore();\n    store.dispatch({ type: FETCH_USER })\n    setTimeout( () => {\n      expect(store.getActions()).toEqual([\n        { type: FETCH_USER }, \n        { type: FETCH_USER_FULFILLED, { id: 123 } }\n      ])\n      done()\n     }, 0)\n  })\n})\n\nsetImmediate\u3068\u304bnextTick\u3067\u3082\u826f\u3044\u3068\u601d\u3046\u3002\n\n\u89e3\u6cd52: redux-mock-store\u306esubscribe\u6a5f\u80fd\u3092\u4f7f\u3046\n\u3082\u3046\u3061\u3087\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306b\u884c\u304d\u305f\u3044\u306e\u3067\u3001redux-mock-store\u5074\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\nredux\u306e\u672c\u7269\u306estore\u540c\u69d8subscribe\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u5f15\u3063\u639b\u3051\u308b\ndescribe('fetchUserEpic', () => {\n  it('produces the user model', (done) => {\n    const store = mockStore();\n    store.dispatch({ type: FETCH_USER })\n    const unsubscribe = store.subscribe( () => {\n      // \u3053\u3053\u3067assertion\n      expect(store.getActions()).toEqual([\n        { type: FETCH_USER },\n        { type: FETCH_USER_FULFILLED,  { id: 123 } }\n      ])\n      unsubscribe()\n      done()\n    })\n  })\n})\n\nsubscribe\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067assertion\u3057\u3066\u3044\u308b\u3002\n\u4eca\u56de\u306f\u300c\u5358\u4e00\u306eaction\u304c\u6765\u308b\u4e8b\u3060\u3051\u3092\u671f\u5f85\u3057\u305f\u30c6\u30b9\u30c8\u300d\u3092\u3057\u3066\u3044\u308b\u304c\u3001\u8907\u6570\u306eaction\u304c\u98db\u3093\u3067\u304f\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3059\u308b\u5834\u5408\u306f\u3082\u3046\u3061\u3087\u3063\u3068\u5de5\u592b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3060\u308d\u3046\u3002\n\u66f4\u306b\u5171\u901a\u5316\u3057\u3066\u6271\u3044\u305f\u304b\u3063\u305f\u3089\u3053\u3093\u306a\u611f\u3058\u306b\u3082\u51fa\u6765\u305d\u3046\nconst assertAction = (targetEpic, dispatchAction, expectAction, cb) => {\n  const epicMiddleware = createEpicMiddleware(targetEpic);\n  const mockStore = configureMockStore([epicMiddleware]);\n\n  const store = mockStore();\n  store.dispatch(dispatchAction)\n  const unsubscribe = store.subscribe( () => {\n    expect(store.getActions()).toEqual(expectAction)\n    unsubscribe()\n    cb()\n  })\n}\n\ndescribe('fetchUserEpic', () => {\n  it('produces the user model', (done) => {\n    assertAction(fetchUserEpic, { type: FETCH_USER }, [\n      { type: FETCH_USER },\n      { type: FETCH_USER_FULFILLED,  { id: 123 } }\n    ], done)\n  })\n})\n\n# \u554f\u984c\u70b9\n\nredux-observable\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f[WritingTests](https://redux-observable.js.org/docs/recipes/WritingTests.html)\u306e\u30da\u30fc\u30b8\u304c\u3042\u308b\u3002\n\u304c\u3001\u4f8b\u3048\u3070\u3053\u308c\u304cPromise\u3092\u8fd4\u3059axios\u3068\u304b\u3068\u7d44\u307f\u3042\u308f\u305b\u305f\u308a\u3057\u305f\u6642\u3061\u3087\u3063\u3068\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\n\u3053\u3093\u306aepic\u3092\u7528\u610f\u3057\u3066\u8003\u3048\u308b\u3002\n\n```js\nconst axios = require(\"axios\")\nconst { createEpicMiddleware } = require('redux-observable')\nrequire(\"rxjs\")\n\nconst payload = { id: 123 }\n\n// test\u7528\u306bmock\u5316\nconst mockAdapter = (config) => {\n  return new Promise((resolve, reject) => {\n    resolve({data: payload, status: 200 })\n  })\n}\n\nconst fakeApi = axios.create({\n  adapter: mockAdapter\n})\n\nconst FETCH_USER = \"FETCH_USER\"\nconst FETCH_USER_FULFILLED = \"FETCH_USER_FULFILLED\"\n\nconst fetchUserFulfilled = payload => {\n  return { type: FETCH_USER_FULFILLED, payload }\n}\n\nconst fetchUserEpic = action$ => {\n  return action$.ofType(FETCH_USER)\n    .mergeMap(action => fakeApi.get(`/api/users/${action.payload}`))\n    .map( ({ data }) => fetchUserFulfilled(data) )\n}\n```\n\n\u305d\u3057\u3066\u3001\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u307f\u308b\u3002\n\u3053\u308c\u304c\u4e0a\u8a18\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308b\u3088\u3046\u306b\u305d\u306e\u307e\u307e\u66f8\u304f\u3068\u901a\u3089\u306a\u3044\u3002\n\n```js\nconst configureMockStore = require('redux-mock-store').default\nconst epicMiddleware = createEpicMiddleware(fetchUserEpic);\nconst mockStore = configureMockStore([epicMiddleware]);\n\ndescribe('fetchUserEpic', () => {\n  it('produces the user model', () => {\n    // \u3046\u307e\u304f\u3044\u304b\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u3002\n    const store = mockStore();\n    store.dispatch({ type: FETCH_USER })\n    expect(store.getActions()).toEqual([\n      { type: FETCH_USER }, // \u3053\u3061\u3089\u306eacton\u306f\u3042\u308b\n      { type: FETCH_USER_FULFILLED, { id: 123 } } // \u3053\u3061\u3089\u304c\u7121\u3044\n    ])\n  })\n})\n```\n\n\u3053\u308c\u306f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306aepic\u3067\u3082test\u304c\u901a\u3089\u306a\u3044\u4e8b\u304c\u78ba\u8a8d\u3067\u304d\u305f\n\n```js\nconst fetchUserEpic = action$ => {\n  return action$.ofType(FETCH_USER)\n    .delay(1000)\n    .map( () => fetchUserFulfilled(payload) )\n```\n\n\u3064\u307e\u308a\u3001 delay\u3084promise\u3067\u975e\u540c\u671f\u7684\u306a\u52d5\u304d\u3092\u3059\u308b\u5834\u5408\u306b\u3053\u306e\u307e\u307e\u3060\u3068\u3046\u307e\u304f\u3044\u304b\u306a\u3044\n\n# \u3069\u3046\u3059\u308b\u304b\uff1f\n\n## \u89e3\u6cd51: setTimeout\u3059\u308b\n\u3059\u3054\u3044\u5fae\u5999\u306a\u3084\u308a\u304b\u305f\u3002\n\n```js\ndescribe('fetchUserEpic', () => {\n  it('produces the user model', (done) => {\n    const store = mockStore();\n    store.dispatch({ type: FETCH_USER })\n    setTimeout( () => {\n      expect(store.getActions()).toEqual([\n        { type: FETCH_USER }, \n        { type: FETCH_USER_FULFILLED, { id: 123 } }\n      ])\n      done()\n     }, 0)\n  })\n})\n```\n\n`setImmediate`\u3068\u304b`nextTick`\u3067\u3082\u826f\u3044\u3068\u601d\u3046\u3002\n\n## \u89e3\u6cd52: redux-mock-store\u306esubscribe\u6a5f\u80fd\u3092\u4f7f\u3046\n\n\u3082\u3046\u3061\u3087\u3063\u3068\u30b9\u30de\u30fc\u30c8\u306b\u884c\u304d\u305f\u3044\u306e\u3067\u3001[redux-mock-store](http://arnaudbenard.com/redux-mock-store/)\u5074\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\nredux\u306e\u672c\u7269\u306estore\u540c\u69d8subscribe\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u5f15\u3063\u639b\u3051\u308b\n\n```js\ndescribe('fetchUserEpic', () => {\n  it('produces the user model', (done) => {\n    const store = mockStore();\n    store.dispatch({ type: FETCH_USER })\n    const unsubscribe = store.subscribe( () => {\n      // \u3053\u3053\u3067assertion\n      expect(store.getActions()).toEqual([\n        { type: FETCH_USER },\n        { type: FETCH_USER_FULFILLED,  { id: 123 } }\n      ])\n      unsubscribe()\n      done()\n    })\n  })\n})\n```\nsubscribe\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067assertion\u3057\u3066\u3044\u308b\u3002\n\u4eca\u56de\u306f\u300c\u5358\u4e00\u306eaction\u304c\u6765\u308b\u4e8b\u3060\u3051\u3092\u671f\u5f85\u3057\u305f\u30c6\u30b9\u30c8\u300d\u3092\u3057\u3066\u3044\u308b\u304c\u3001\u8907\u6570\u306eaction\u304c\u98db\u3093\u3067\u304f\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3059\u308b\u5834\u5408\u306f\u3082\u3046\u3061\u3087\u3063\u3068\u5de5\u592b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3060\u308d\u3046\u3002\n\n\u66f4\u306b\u5171\u901a\u5316\u3057\u3066\u6271\u3044\u305f\u304b\u3063\u305f\u3089\u3053\u3093\u306a\u611f\u3058\u306b\u3082\u51fa\u6765\u305d\u3046\n\n```js\nconst assertAction = (targetEpic, dispatchAction, expectAction, cb) => {\n  const epicMiddleware = createEpicMiddleware(targetEpic);\n  const mockStore = configureMockStore([epicMiddleware]);\n\n  const store = mockStore();\n  store.dispatch(dispatchAction)\n  const unsubscribe = store.subscribe( () => {\n    expect(store.getActions()).toEqual(expectAction)\n    unsubscribe()\n    cb()\n  })\n}\n\ndescribe('fetchUserEpic', () => {\n  it('produces the user model', (done) => {\n    assertAction(fetchUserEpic, { type: FETCH_USER }, [\n      { type: FETCH_USER },\n      { type: FETCH_USER_FULFILLED,  { id: 123 } }\n    ], done)\n  })\n})\n```\n"}