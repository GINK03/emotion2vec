{"context": " More than 1 year has passed since last update.\n\nIterator\nArray, List\u7b49\u306e\u8d70\u67fb\uff08\u30eb\u30fc\u30d7\u3067\u3076\u3093\u56de\u3059\uff09\u65b9\u6cd5\u3092\u7d71\u4e00\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u3002\n\u3088\u304f\u5fd8\u308c\u308b\u306e\u3067\u30e1\u30e2\u3002\u7d30\u304b\u3044\u30c6\u30b9\u30c8\u306f\u3057\u3066\u307e\u305b\u3093\u3002\n\nExample\n\nresult\n$ gcc iter.c && ./a.exe\narray val = 0\narray val = 1\narray val = 2\nlist val = 0.000000\nlist val = 1.000000\nlist val = 2.000000\n\n\n\n\niter\n#include <stdio.h>\n#include <stdbool.h>\n\n/********\n* Array *\n********/\n\ntypedef struct Array Array;\ntypedef int Array_type;\ntypedef int* Array_type_pointer;\ntypedef struct ArrayIter ArrayIter;\n\nstruct Array {\n    int length;\n    Array_type array[4]; // Fix me\n};\n\nstruct ArrayIter {\n    Array_type_pointer beg;\n    Array_type_pointer end;\n    Array_type_pointer cur;\n};\n\nArrayIter\narray_begin(Array* self) {\n    ArrayIter it = {\n        .beg = self->array,\n        .end = self->array + self->length,\n        .cur = self->array,\n    };\n    return it;\n}\n\nArrayIter\narray_end(Array* self) {\n    ArrayIter it = {\n        .beg = self->array,\n        .end = self->array + self->length,\n        .cur = self->array + self->length,\n    };\n    return it;\n}\n\n/************\n* ArrayIter *\n************/\n\nArrayIter*\narrayiter_next(ArrayIter* self) {\n    if (self->cur < self->end) {\n        ++self->cur;\n    } else {\n        self->cur = self->end;\n    }\n    return self;\n}\n\nint\narrayiter_value(const ArrayIter* self) {\n    return *self->cur;\n}\n\nbool\narrayiter_equals(const ArrayIter* lh, const ArrayIter* rh) {\n    return lh->cur == rh->cur;\n}\n\n/*******\n* List *\n*******/\n\ntypedef struct ListNode ListNode;\ntypedef double ListNode_type;\ntypedef double* ListNode_type_pointer;\ntypedef struct List List;\ntypedef ListNode* List_type_pointer;\ntypedef struct ListIter ListIter;\n\nstruct ListNode {\n    ListNode_type value;\n    List_type_pointer next;\n};\n\nstruct List {\n    List_type_pointer head;\n};\n\nstruct ListIter {\n    List_type_pointer beg;\n    List_type_pointer end;\n    List_type_pointer cur;\n};\n\nvoid\nlist_debug_init(List* self) {\n    static ListNode nodes[3]; // Fix me\n\n    self->head = nodes;\n\n    List_type_pointer cur = self->head;\n    cur->value = 0.0;\n\n    for (int i = 1; i < 3; ++i) {\n        cur->next = nodes + i;\n        cur = cur->next;\n        cur->value = (double) i;\n    }\n}\n\nListIter\nlist_begin(List* self) {\n    ListIter it;\n\n    it.beg = self->head;\n    it.end = NULL;\n    it.cur = self->head;\n\n    return it;\n}\n\nListIter\nlist_end(List* self) {\n    ListIter it;\n\n    it.beg = self->head;\n    it.end = NULL;\n    it.cur = NULL;\n\n    return it;\n}\n\n/***********\n* ListIter *\n***********/\n\nListIter*\nlistiter_next(ListIter* self) {\n    if (self->cur) {\n        self->cur = self->cur->next;\n    }\n    return self;\n}\n\nListNode_type\nlistiter_value(const ListIter* self) {\n    if (self->cur) {\n        return self->cur->value;\n    }\n    return (ListNode_type){0};\n}\n\nbool\nlistiter_equals(const ListIter* lh, const ListIter* rh) {\n    return lh->cur == rh->cur;\n}\n\n/*******\n* Test *\n*******/\n\nint\nmain(int argc, char* argv[]) {\n    // Test of iterator with Array\n    Array array = {\n        .length = 3,\n        .array = {0, 1, 2},\n    };\n\n    for (ArrayIter it = array_begin(&array), end = array_end(&array);\n        !arrayiter_equals(&it, &end);\n        arrayiter_next(&it)) {\n\n        printf(\"array val = %d\\n\", arrayiter_value(&it));\n    }\n\n    // Test of iterator with List\n    List list;\n    list_debug_init(&list);\n\n    for (ListIter it = list_begin(&list), end = list_end(&list);\n        !listiter_equals(&it, &end);\n        listiter_next(&it)) {\n\n        printf(\"list val = %lf\\n\", listiter_value(&it));\n    }\n\n    fflush(stdout);\n    return 0;\n}\n\n\n\n# Iterator\n\nArray, List\u7b49\u306e\u8d70\u67fb\uff08\u30eb\u30fc\u30d7\u3067\u3076\u3093\u56de\u3059\uff09\u65b9\u6cd5\u3092\u7d71\u4e00\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u3002\n\u3088\u304f\u5fd8\u308c\u308b\u306e\u3067\u30e1\u30e2\u3002\u7d30\u304b\u3044\u30c6\u30b9\u30c8\u306f\u3057\u3066\u307e\u305b\u3093\u3002\n\n# Example\n\n```bash:result\n$ gcc iter.c && ./a.exe\narray val = 0\narray val = 1\narray val = 2\nlist val = 0.000000\nlist val = 1.000000\nlist val = 2.000000\n\n```\n\n```c:iter\n#include <stdio.h>\n#include <stdbool.h>\n\n/********\n* Array *\n********/\n\ntypedef struct Array Array;\ntypedef int Array_type;\ntypedef int* Array_type_pointer;\ntypedef struct ArrayIter ArrayIter;\n\nstruct Array {\n\tint length;\n\tArray_type array[4]; // Fix me\n};\n\nstruct ArrayIter {\n\tArray_type_pointer beg;\n\tArray_type_pointer end;\n\tArray_type_pointer cur;\n};\n\nArrayIter\narray_begin(Array* self) {\n\tArrayIter it = {\n\t\t.beg = self->array,\n\t\t.end = self->array + self->length,\n\t\t.cur = self->array,\n\t};\n\treturn it;\n}\n\nArrayIter\narray_end(Array* self) {\n\tArrayIter it = {\n\t\t.beg = self->array,\n\t\t.end = self->array + self->length,\n\t\t.cur = self->array + self->length,\n\t};\n\treturn it;\n}\n\n/************\n* ArrayIter *\n************/\n\nArrayIter*\narrayiter_next(ArrayIter* self) {\n\tif (self->cur < self->end) {\n\t\t++self->cur;\n\t} else {\n\t\tself->cur = self->end;\n\t}\n\treturn self;\n}\n\nint\narrayiter_value(const ArrayIter* self) {\n\treturn *self->cur;\n}\n\nbool\narrayiter_equals(const ArrayIter* lh, const ArrayIter* rh) {\n\treturn lh->cur == rh->cur;\n}\n\n/*******\n* List *\n*******/\n\ntypedef struct ListNode ListNode;\ntypedef double ListNode_type;\ntypedef double* ListNode_type_pointer;\ntypedef struct List List;\ntypedef ListNode* List_type_pointer;\ntypedef struct ListIter ListIter;\n\nstruct ListNode {\n\tListNode_type value;\n\tList_type_pointer next;\n};\n\nstruct List {\n\tList_type_pointer head;\n};\n\nstruct ListIter {\n\tList_type_pointer beg;\n\tList_type_pointer end;\n\tList_type_pointer cur;\n};\n\nvoid\nlist_debug_init(List* self) {\n\tstatic ListNode nodes[3]; // Fix me\n\n\tself->head = nodes;\n\n\tList_type_pointer cur = self->head;\n\tcur->value = 0.0;\n\n\tfor (int i = 1; i < 3; ++i) {\n\t\tcur->next = nodes + i;\n\t\tcur = cur->next;\n\t\tcur->value = (double) i;\n\t}\n}\n\nListIter\nlist_begin(List* self) {\n\tListIter it;\n\n\tit.beg = self->head;\n\tit.end = NULL;\n\tit.cur = self->head;\n\n\treturn it;\n}\n\nListIter\nlist_end(List* self) {\n\tListIter it;\n\n\tit.beg = self->head;\n\tit.end = NULL;\n\tit.cur = NULL;\n\n\treturn it;\n}\n\n/***********\n* ListIter *\n***********/\n\nListIter*\nlistiter_next(ListIter* self) {\n\tif (self->cur) {\n\t\tself->cur = self->cur->next;\n\t}\n\treturn self;\n}\n\nListNode_type\nlistiter_value(const ListIter* self) {\n\tif (self->cur) {\n\t\treturn self->cur->value;\n\t}\n\treturn (ListNode_type){0};\n}\n\nbool\nlistiter_equals(const ListIter* lh, const ListIter* rh) {\n\treturn lh->cur == rh->cur;\n}\n\n/*******\n* Test *\n*******/\n\nint\nmain(int argc, char* argv[]) {\n\t// Test of iterator with Array\n\tArray array = {\n\t\t.length = 3,\n\t\t.array = {0, 1, 2},\n\t};\n\n\tfor (ArrayIter it = array_begin(&array), end = array_end(&array);\n\t\t!arrayiter_equals(&it, &end);\n\t\tarrayiter_next(&it)) {\n\n\t\tprintf(\"array val = %d\\n\", arrayiter_value(&it));\n\t}\n\n\t// Test of iterator with List\n\tList list;\n\tlist_debug_init(&list);\n\n\tfor (ListIter it = list_begin(&list), end = list_end(&list);\n\t\t!listiter_equals(&it, &end);\n\t\tlistiter_next(&it)) {\n\n\t\tprintf(\"list val = %lf\\n\", listiter_value(&it));\n\t}\n\n\tfflush(stdout);\n\treturn 0;\n}\n\n```\n\n", "tags": ["C", "Design", "\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3", "Iterator", "\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc"]}