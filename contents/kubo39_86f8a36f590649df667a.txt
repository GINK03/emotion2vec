{"context": " More than 1 year has passed since last update.mixi Advent Calendar \u306e18\u65e5\u76ee\u3067\u3059\u3002\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u306f\u300c\u30cf\u30ed\u30fc\u3001Hello World!\u300d\u3068\u3044\u3046\u7d20\u6674\u3089\u3057\u3044\u66f8\u7c4d\u8aad\u3093\u3067\u601d\u3044\u3064\u3044\u305f\u3082\u306e\u3067\u3059\u3002\u5b9f\u306e\u3068\u3053\u308d\u3001\u666e\u6bb5\u4f7f\u7528\u3059\u308b\u8a00\u8a9e\u306b\u304a\u3044\u3066Hello, World!\u306e\u3088\u3046\u306a\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u3063\u3066\u3082\u3069\u306e\u3088\u3046\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u304b\u672c\u5f53\u306b\u7406\u89e3\u3057\u3066\u3044\u308b\u4eba\u306f\u5c11\u306a\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u306a\u304b\u306a\u304b\u8abf\u3079\u308b\u6a5f\u4f1a\u3082\u3042\u308a\u307e\u305b\u3093\u304b\u3089\u306d\u3002\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3053\u306e\u5834\u3092\u501f\u308a\u3066\u8abf\u3079\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u5185\u5bb9\u306b\u8aa4\u308a\u304c\u3042\u308b\u5834\u5408\u306f\u6c17\u8efd\u306b\u30b3\u30e1\u30f3\u30c8\u3067\u6307\u6458\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u306a\u304a\u3001\u672c\u30a8\u30f3\u30c8\u30ea\u3067\u53c2\u7167\u3059\u308b dmd/druntime/phobos \u306e\u5404\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f Boost License 1.0 \u306e\u57fa\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \n\n\u76ee\u7684\n\u3068\u308a\u3042\u3048\u305a\u3053\u306e\u3042\u305f\u308a\u3092\u8ffd\u3063\u3066\u307f\u307e\u3059\u3002\n\nstd.stdio \u306f\u3069\u3053\u306b\u3042\u308b\u306e\u304b\nwriteln \u306e\u5148\u3067\u306f\u4f55\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u306e\u304b\nmain \u306e\u524d\u306b\u4f55\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u306e\u304b\n\n\nstd.stdio \u306f\u3069\u3053\u306b\u3042\u308b\u306e\u304b\nstd.stdio \u306f phobos \u3068\u3044\u3046D\u8a00\u8a9e\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u90e1\u306e\u4e2d\u306b\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3072\u3068\u3064\u3067\u3059\u3002\nhttp://dlang.org/phobos/index.html\nhttp://dlang.org/phobos/std_stdio.html\ndmd\u3068phobos\u306f\u3069\u3053\u3067\u95a2\u9023\u3065\u3051\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\uff1f\ndmd\u306b\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u4e2d\u306b\u4f55\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u304b\u3092\u8868\u3059verbose\u30aa\u30d7\u30b7\u30e7\u30f3(-v\u3067\u6709\u52b9)\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u308c\u3067\u5c11\u3057\u4e2d\u3092\u8997\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n$ dmd -w -g -v helloworld.d\nbinary    dmd\nversion   v2.069.0\nconfig    /etc/dmd.conf\nparse     helloworld\n...\ngcc helloworld.o -o helloworld -g -m64 -L/usr/lib/x86_64-linux-gnu -Xlinker --export-dynamic -Xlinker -Bstatic -lphobos2 -Xlinker -Bdynamic -lpthread -lm -lrt -ldl\n\n\u51fa\u529b\u306f\u5c11\u3057\u9577\u3044\u306e\u3067\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\u591a\u304f\u306f\u3053\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u3068\u306a\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306eimport\u3067\u3059\u3002\n\u3055\u3066\u3001\u4e0a\u306e\u307b\u3046\u3067 config /etc/dmd.conf \u3068\u3044\u3046\u884c\u304c\u3042\u308a\u307e\u3059\u306d\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u4e00\u4f53\u306a\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n;\n; dmd.conf file for dmd\n;\n; dmd will look for dmd.conf in the following sequence of directories:\n;   - current working directory\n;   - directory specified by the HOME environment variable\n;   - directory dmd resides in\n;   - /etc directory\n;\n; Names enclosed by %% are searched for in the existing environment and inserted\n;\n; The special name %@P% is replaced with the path to this file\n;\n\n[Environment32]\nDFLAGS=-I/usr/include/dmd/phobos -I/usr/include/dmd/druntime/import -L-L/usr/lib/i386-linux-gnu -L--export-dynamic\n\n[Environment64]\nDFLAGS=-I/usr/include/dmd/phobos -I/usr/include/dmd/druntime/import -L-L/usr/lib/x86_64-linux-gnu -L--export-dynamic\n\n\u3069\u3046\u3084\u3089dmd\u306f\u30d5\u30a1\u30a4\u30eb\u5b9a\u7fa9\u304b\u3089phobos\u3084druntime\u306e\u5834\u6240\u3092\u53c2\u7167\u3057\u3066\u308b\u3088\u3046\u3067\u3059\u3002(\u5b9f\u969b\u306b\u79c1\u306e\u74b0\u5883\u3067\u306fphobos\u306f\u3053\u306e\u5834\u6240\u306b\u304a\u3044\u3066\u3042\u308a\u307e\u3059)\ndmd.conf \u306fman\u3082\u3042\u308b\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u4eba\u306f\u305d\u3061\u3089\u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nHello, World!\n\u3068\u306b\u304b\u304f\u3001D\u8a00\u8a9e\u3067\u306e\u300cHello, World!\u300d\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nimport std.stdio;\n\nvoid main()\n{\n  writeln(\"Hello, World!\");\n}\n\n\u3053\u306e\u7a2e\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8a00\u8a9e\u3054\u3068\u306e\u6bd4\u8f03\u3092\u8ad6\u3058\u308b\u306e\u306f\u96e3\u3057\u3044\u3082\u306e\u3067\u3059\u304c\u3001C\u3084Java\u306e\u69cb\u6587\u3068\u4f3c\u3066\u3044\u308b\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\nwriteln \u306e\u524d\u3067\u306f\u306a\u306b\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u306e\u304b\nwriteln\u306fstd.stdio\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u3067\u3059\u3002\nstdio\u306ebackend\u306f windows/linux/OSX \u306a\u3069OS\u306b\u3088\u3063\u3066\u304b\u308f\u308a\u307e\u3059\u3002\nLinux\u306e\u5834\u5408\u306fdmd\u306e\u4e2d\u3067 CRuntime_Glibc \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3055\u3089\u306b GCC_IO \u304c std.stdio \u3067\u5b9a\u7fa9\u3055\u308c\u3001glibc\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u8ffd\u3046\u524d\u306b\u3001ltrace\u3092\u4f7f\u3063\u3066\u96d1\u306b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n$ dmd -gc helloworld.d\n$ ltrace -o dump ./helloworld\n\n\u7d50\u679c\u306e\u4e00\u90e8\u3092\u629c\u7c8b\u3057\u3066\u3001writeln \u3068\u95a2\u4fc2\u3059\u308b\u90e8\u5206\u3092\u629c\u304d\u51fa\u3059\u3068\u3053\u306e\u3042\u305f\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n...\nfwide(0x7fad0e3b5400, 0)\nflockfile(0x7fad0e3b5400, 0, 0x7fad0e3b5400, 0x66ddf0)\nfwrite(\"Hello, World!\", 1, 13, 0x7fad0e3b5400)\nfputc_unlocked(10, 0x7fad0e3b5400, 13, 1024)\nfunlockfile(0x7fad0e3b5400, 0x7fad0ea00000, 0x7fad0ea00000, -1)\n...\n\nC\u8a00\u8a9e\u306e printf(\"Hello, World!\\n\") \u306f\u6a19\u6e96\u51fa\u529b\u3078\u306e\u66f8\u304d\u8fbc\u307f\u306e\u90e8\u5206\u3067 puts \u3092\u547c\u3073\u307e\u3059\u304c\u3001D\u8a00\u8a9e\u3067\u306f fwrite \u3092\u547c\u3093\u3067\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u5947\u5999\u306a\u95a2\u6570\u304c\u3042\u308b\u3053\u3068\u306b\u6c17\u304c\u3064\u304d\u307e\u3059\u3002 flockfile, funlockfile \u306f\u3044\u3063\u305f\u3044\u306a\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\nflockfile\u306eman\u30da\u30fc\u30b8\u3092\u307f\u308b\u3068\u3001\u3053\u306e\u95a2\u6570\u306fstdio\u306eFILE\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ed\u30c3\u30af\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3042\u308a\u3001\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u5165\u51fa\u529b\u64cd\u4f5c\u306e\u9014\u4e2d\u3067\u5272\u308a\u8fbc\u3080\u3053\u3068\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u4f7f\u3046\u305f\u3081\u306e\u3082\u306e\u3001\u3067\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u3053\u3067\u306f fputc_unlocked \u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u30ed\u30c3\u30af\u3092\u884c\u308f\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u6a19\u6e96\u5165\u51fa\u529b\u95a2\u6570\u3067\u3042\u308b\u3053\u3068\u3082\u540c\u6642\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3055\u3066\u3001\u3053\u3053\u304b\u3089\u306f\u5b9f\u969b\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\nphobos\u3067\u306ewriteln\u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n/***********************************\n * Equivalent to $(D write(args, '\\n')).  Calling $(D writeln) without\n * arguments is valid and just prints a newline to the standard\n * output.\n */\nvoid writeln(T...)(T args)\n{\n    import std.traits : isAggregateType;\n    static if (T.length == 0)\n    {\n        import std.exception : enforce;\n\n        enforce(fputc('\\n', .trustedStdout._p.handle) == '\\n', \"fputc failed\");\n    }\n    else static if (T.length == 1 &&\n                    is(typeof(args[0]) : const(char)[]) &&\n                    !is(typeof(args[0]) == enum) &&\n                    !is(Unqual!(typeof(args[0])) == typeof(null)) &&\n                    !isAggregateType!(typeof(args[0])))\n    {\n        import std.exception : enforce;\n\n        // Specialization for strings - a very frequent case\n        auto w = .trustedStdout.lockingTextWriter();\n\n        static if (isStaticArray!(typeof(args[0])))\n        {\n            w.put(args[0][]);\n        }\n        else\n        {\n            w.put(args[0]);\n        }\n        w.put('\\n');\n    }\n    else\n    {\n        // Most general instance\n        trustedStdout.write(args, '\\n');\n    }\n}\n\n\u898b\u6163\u308c\u306a\u3044\u5358\u8a9e\u306f\u305f\u304f\u3055\u3093\u3067\u3066\u304d\u307e\u3057\u305f\u3002\n\u30cd\u30bf\u3070\u3089\u3057\u3092\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u3053\u3053\u3067\u3000else static if (T.length == 1 &&... \u3068\u3044\u3046\u5206\u5c90\u306b\u5165\u308b\u3053\u3068\u306b\u306a\u308b\u308f\u3051\u306a\u306e\u3067\u3059\u304c\u3001\u306a\u305c\u305d\u3046\u306a\u308b\u306e\u304b\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u306a\u3044\u3067\u3059\u306d\uff01\n\u3053\u3053\u306f\u7126\u3089\u305a\u3001\u9806\u3092\u8ffd\u3063\u3066\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u5f15\u6570\u306e\u6570\u304c\u3072\u3068\u3064 (T.length == 1) \u3067\u3042\u308b\u3053\u3068\u306f\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308a\u307e\u3059\u3002\n\u6b21\u306b is(typeof(args[0]) : const(char)[]) \u3067\u3059\u304c\u3001\u5c11\u3057\u5384\u4ecb\u306a\u304b\u3093\u3058\u304c\u3057\u307e\u3059\u306d\uff01 typeof \u306f\u4efb\u610f\u306e\u5f0f\u306e\u578b\u3092\u53d6\u5f97\u3067\u304d\u308b\u5f0f\u3067\u3059\u3002\u4eca\u56de\u306e\u3088\u3046\u306b typeof(\u6587\u5b57\u5217) \u3067\u3042\u308b\u5834\u5408\u306bstring\u3068\u3044\u3046\u578b\u60c5\u5831\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u6b21\u306b is \u3067\u3059\u304c\u3001\u3053\u308c\u306f\u5f15\u6570\u306e\u578b\u304c\u610f\u5473\u7684\u306b\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u5f0f\u3067\u3059\u3002 is(typeof { exp...}) \u3068\u3044\u3046\u306e\u306fis\u5f0f\u304c\u76f4\u63a5\u5f0f\u3092\u5f15\u6570\u306b\u3068\u308c\u306a\u3044\u305f\u3081\u306btypeof\u3092\u306f\u3055\u3080\u3001\u3068\u3044\u3046\u30cf\u30c3\u30af\u7684\u306a\u3082\u306e\u3067\u3059\u3002\nhttp://www.codelogy.org/entry/2012/08/12/120835\n\u6b21\u306b ... : const(char)[]) \u3068\u3044\u3046\u90e8\u5206\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u4e00\u4f53\u306a\u3093\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f \u5b9f\u306f\u3053\u308c\u3082is\u5f0f\u306e\u7279\u6b8a\u306a\u30d1\u30bf\u30fc\u30f3\u3067\u3001implicit conversion \u304c\u53ef\u80fd\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u305f\u3081\u306e\u69cb\u6587\u3068\u306a\u308a\u307e\u3059\u3002\nhttp://wiki.dlang.org/Is_expression\n\u6b21\u306f !is(typeof(args[0]) == enum \u3067\u3059\u306d\u3002 enum \u306f\u5217\u6319\u4f53\u3092\u8868\u3057\u307e\u3059\u3002is(typeof({exp..}) == enum \u306f\u540d\u524d\u4ed8\u304d\u5217\u6319\u4f53\u306e\u8981\u7d20\u3067\u3042\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002 \u4eca\u56dewriteln\u306b\u6e21\u3057\u3066\u3044\u308b\u6587\u5b57\u5217\u578b\u306f\u3068\u304f\u306b\u305d\u306e\u3088\u3046\u306a\u3053\u3068\u306f\u884c\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u3053\u306e\u6761\u4ef6\u5206\u5c90\u306f\u901a\u308a\u307e\u3059\u3002\n!is(Unqual!(typeof(args[0])) == typeof(null)) \u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002 Unqual \u306f\u4fee\u98fe\u5b50(const, shared\u306a\u3069)\u3092\u53d6\u308a\u9664\u304ftemplate\u69cb\u6587\u3067\u3059\u3002\u3053\u3053\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f null \u304c\u6765\u3066\u3044\u308b\u5834\u5408\u306b\u5f3e\u304f\u3068\u3044\u3046\u3053\u3068\u3060\u3051\u3067\u3059\u304c\u3001\u90fd\u5ea6 cast(static)null \u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u306f\u9762\u5012\u306a\u3068\u3053\u308d\u3067Unqual\u3092\u4f7f\u3046\u3068\u697d\u306b\u51e6\u7406\u3092\u66f8\u3051\u307e\u3059\u3002\n\u6700\u5f8c\u306b !isAggregateType!(typeof(args[0]))) \u3067\u3059\u306d\u3002\u3053\u3053\u3067AggregateType\u3068\u3044\u3046\u306e\u306f\u69cb\u9020\u4f53\u3084\u30af\u30e9\u30b9\u306e\u3088\u3046\u306a\u500b\u3005\u306e\u8981\u7d20\u3068\u3057\u3066\u3082\u96c6\u56e3\u3068\u3057\u3066\u3082\u53c2\u7167\u53ef\u80fd\u3067\u3042\u308b\u30c7\u30fc\u30bf\u306e\u96c6\u307e\u308a\u3092\u8868\u3059\u578b\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u6587\u5b57\u5217\u304c\u6e21\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u6761\u4ef6\u5206\u5c90\u3082\u901a\u308a\u307e\u3059\u3002\n\u3055\u3066\u3001\u3053\u308c\u3067\u3088\u3046\u3084\u304f\u3053\u306e\u95a2\u6570\u304c\u3069\u3053\u3078\u5411\u304b\u3046\u306e\u304b\u304c\u308f\u304b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f trustedStdout.lockingTextWriter \u304c\u809d\u3068\u306a\u308a\u307e\u3059\u3002\n/// Range primitive implementations.\nvoid put(A)(A writeme)\n    if (is(ElementType!A : const(dchar)) &&\n        isInputRange!A &&\n        !isInfinite!A)\n{\n    import std.exception : errnoEnforce;\n\n    alias C = ElementEncodingType!A;\n    static assert(!is(C == void));\n    static if (isSomeString!A && C.sizeof == 1)\n    {\n        if (orientation_ <= 0)\n        {\n            //file.write(writeme); causes infinite recursion!!!\n            //file.rawWrite(writeme);\n            static auto trustedFwrite(in void* ptr, size_t size, size_t nmemb, FILE* stream) @trusted\n            {\n                return .fwrite(ptr, size, nmemb, stream);\n            }\n            auto result =\n                trustedFwrite(writeme.ptr, C.sizeof, writeme.length, fps_);\n            if (result != writeme.length) errnoEnforce(0);\n            return;\n        }\n    }\n\n    // put each character in turn\n    foreach (dchar c; writeme)\n    {\n        put(c);\n    }\n}\n\n\u3053\u3053\u3067\u3088\u3046\u3084\u304f fwrite \u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\u3053\u3053\u3067fwrite\u3092\u7279\u5225\u6271\u3044\u3057\u305f\u306e\u306f\u6587\u5b57\u5217\u3092\u90fd\u5ea6putc_unlocked\u3092\u5b9f\u884c\u3059\u308b\u30b3\u30b9\u30c8\u3092\u907f\u3051\u305f\u3044\u304b\u3089\u3067\u3057\u3087\u3046\u3002\n\nmain \u306e\u524d\u306b\u306a\u306b\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u304b\nD\u8a00\u8a9e\u306emain\u95a2\u6570\u306fC\u8a00\u8a9e\u306emain\u95a2\u6570\u3068\u7570\u306a\u308b\u3082\u306e\u3067\u3059\u3002\n( \u055e\u0a0a \u055e) :~/dev/dlang/helloworld $ dmd -g helloworld.d\n( \u055e\u0a0a \u055e) :~/dev/dlang/helloworld $ gdb ./helloworld\n...\n(gdb) b _Dmain\nBreakpoint 1 at 0x4351a4: file helloworld.d, line 5.\n(gdb) r\n...\nBreakpoint 1, D main () at helloworld.d:5\n5         writeln(\"Hello, World!\");\n(gdb) bt\n#0  D main () at helloworld.d:5\n#1  0x0000000000436227 in rt.dmain2._d_run_main() ()\n#2  0x000000000043617d in rt.dmain2._d_run_main() ()\n#3  0x00000000004361e3 in rt.dmain2._d_run_main() ()\n#4  0x000000000043617d in rt.dmain2._d_run_main() ()\n#5  0x00000000004360da in _d_run_main ()\n#6  0x0000000000435678 in main ()\n\n_Dmain\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u8868\u73fe\u3082\u307f\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n(gdb) disas\nDump of assembler code for function _Dmain:\n   0x00000000004351a0 <+0>:     push   %rbp\n   0x00000000004351a1 <+1>:     mov    %rsp,%rbp\n=> 0x00000000004351a4 <+4>:     mov    $0x467940,%edx\n   0x00000000004351a9 <+9>:     mov    $0xd,%edi\n   0x00000000004351ae <+14>:    mov    %rdx,%rsi\n   0x00000000004351b1 <+17>:    callq  0x4351c0 <_D3std5stdio16__T7writelnTAyaZ7writelnFNfAyaZv>\n   0x00000000004351b6 <+22>:    xor    %eax,%eax\n   0x00000000004351b8 <+24>:    pop    %rbp\n   0x00000000004351b9 <+25>:    retq\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7684\u306b\u3068\u3063\u304b\u304b\u308a\u306b\u306a\u308a\u305d\u3046\u306a\u3068\u3053\u308d\u306f\u3053\u306e\u3078\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\ndmd:src/mars.d\n\nextern (C++) void genCmain(Scope* sc)\n{\n    if (entrypoint)\n        return;\n    /* The D code to be generated is provided as D source code in the form of a string.\n     * Note that Solaris, for unknown reasons, requires both a main() and an _main()\n     */\n    static __gshared const(char)* cmaincode =\n    q{\n        extern(C)\n        {\n            int _d_run_main(int argc, char **argv, void* mainFunc);\n            int _Dmain(char[][] args);\n            int main(int argc, char **argv)\n            {\n                return _d_run_main(argc, argv, &_Dmain);\n            }\n            version (Solaris) int _main(int argc, char** argv) { return main(argc, argv); }\n        }\n    };\n...\n\ncallstack\u7684\u306b\u306f\nmain -> _d_run_main(druntime) -> ...\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u3001gdb\u306ebacktrace\u8868\u793a\u3068\u3042\u308f\u305b\u3066\u307f\u3066\u3082\u6b63\u3057\u3044\u3088\u3046\u898b\u3048\u307e\u3059\u3002\n\u3053\u3053\u3067 _d_run_main \u306fdruntime\u306e\u307b\u3046\u306b\u3082\u30b3\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\ndruntime:rt/dmain2.d\nextern (C) int _d_run_main(int argc, char **argv, MainFunc mainFunc)\n{\n...\n    void runAll()\n    {\n        if (rt_init() && runModuleUnitTests())\n            tryExec({ result = mainFunc(args); });\n        else\n            result = EXIT_FAILURE;\n\n        if (!rt_term())\n            result = (result == EXIT_SUCCESS) ? EXIT_FAILURE : result;\n    }\n\n    tryExec(&runAll);\n...\n}\n\ntryExec\u306f\u6e21\u3055\u308c\u308bdelegate\u3092\u5b9f\u884c\u3057\u3066\u4f8b\u5916\u304c\u8d77\u304d\u305f\u6642\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u3053\u3053\u3067\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\nrunAll \u306e\u4e2d\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a rt_init \u3068 runModuleUnitTests \u95a2\u6570\u304c\u305d\u308c\u305e\u308c\u5b9f\u884c\u3055\u308c\u3001\u305d\u308c\u3089\u306e\u5b9f\u884c\u304c\u6210\u529f\u3067\u3042\u3063\u305f\u3068\u304d\u306b mainFunc(args) \u3059\u306a\u308f\u3061 _Dmain \u3092\u5b9f\u884c\u3059\u308b\u6d41\u308c\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nrt_init \u306fmutex\u5c5e\u6027\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084GC\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u521d\u671f\u5316\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n/**********************************************\n * Initialize druntime.\n * If a C program wishes to call D code, and there's no D main(), then it\n * must call rt_init() and rt_term().\n */\nextern (C) int rt_init()\n{\n...\n    _d_monitor_staticctor();\n    _d_critical_init();\n\n    try\n    {\n        initSections();\n        // this initializes mono time before anything else to allow usage\n        // in other druntime systems.\n        _d_initMonoTime();\n        gc_init();\n        initStaticDataGC();\n        lifetime_init();\n        rt_moduleCtor();\n        rt_moduleTlsCtor();\n        return 1;\n    }\n...\n}\n\n\u7d9a\u3044\u3066\u3000runModuleUnitTests \u306fimport\u3057\u3066\u3044\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306eunittest\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u524d\u306b\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3046\u306e\u306f\u306a\u304b\u306a\u304b\u9a5a\u304d\u3067\u3059\u306d\u3002\n/**\n * This routine is called by the runtime to run module unit tests on startup.\n * The user-supplied unit tester will be called if one has been supplied,\n * otherwise all unit tests will be run in sequence.\n *\n * Returns:\n *  true if execution should continue after testing is complete and false if\n *  not.  Default behavior is to return true.\n */\nextern (C) bool runModuleUnitTests()\n{\n    // backtrace\n    version( CRuntime_Glibc )\n        import core.sys.linux.execinfo;\n...\n    static if( __traits( compiles, backtrace ) )\n    {\n        import core.sys.posix.signal; // segv handler\n\n        static extern (C) void unittestSegvHandler( int signum, siginfo_t* info, void* ptr ) nothrow\n        {\n            static enum MAXFRAMES = 128;\n            void*[MAXFRAMES]  callstack;\n            int               numframes;\n\n            numframes = backtrace( callstack.ptr, MAXFRAMES );\n            backtrace_symbols_fd( callstack.ptr, numframes, 2 );\n        }\n\n        sigaction_t action = void;\n        sigaction_t oldseg = void;\n        sigaction_t oldbus = void;\n\n        (cast(byte*) &action)[0 .. action.sizeof] = 0;\n        sigfillset( &action.sa_mask ); // block other signals\n        action.sa_flags = SA_SIGINFO | SA_RESETHAND;\n        action.sa_sigaction = &unittestSegvHandler;\n        sigaction( SIGSEGV, &action, &oldseg );\n        sigaction( SIGBUS, &action, &oldbus );\n        scope( exit )\n        {\n            sigaction( SIGSEGV, &oldseg, null );\n            sigaction( SIGBUS, &oldbus, null );\n        }\n    }\n\n    if( Runtime.sm_moduleUnitTester is null )\n    {\n        size_t failed = 0;\n        foreach( m; ModuleInfo )\n        {\n            if( m )\n            {\n                auto fp = m.unitTest;\n\n                if( fp )\n                {\n                    try\n                    {\n                        fp();\n                    }\n                    catch( Throwable e )\n                    {\n                        _d_print_throwable(e);\n                        failed++;\n                    }\n                }\n            }\n        }\n        return failed == 0;\n    }\n    return Runtime.sm_moduleUnitTester();\n}\n\n\u3053\u308c\u3089\u306e\u51e6\u7406\u304c\u554f\u984c\u306a\u304f\u884c\u308f\u308c\u305f\u5f8c\u306bmain\u95a2\u6570\u306e\u4e2d\u8eab\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n\u5b9f\u884c\u74b0\u5883\n\u6700\u5f8c\u306b\u3001\u79c1\u304c\u672c\u8a18\u4e8b\u306e\u5185\u5bb9\u3092\u691c\u8a3c\u3057\u305f\u969b\u306e\u5b9f\u884c\u74b0\u5883\u3092\u63b2\u8f09\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nOS/Distribution\n\n$ uname -mrv\n3.13.0-68-generic #111-Ubuntu SMP Fri Nov 6 18:17:06 UTC 2015 x86_64\n$ cat /etc/issue\nUbuntu 14.04.3 LTS \\n \\l\n\n\nD\u8a00\u8a9e\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u3057\u3066DMD\u3092\u4f7f\u3044\u307e\u3059\u3002\n$ dmd --version\nDMD64 D Compiler v2.069.0\nCopyright (c) 1999-2015 by Digital Mars written by Walter Bright\n\n\n\u660e\u65e5\n\u660e\u65e5\u306f GitHub ID: oppai \u306e\u4eba \u3055\u3093\u3053\u3068 @kodam \u306e \u5b9f\u8df5\u307c\u3063\u3061\u99c6\u52d5\u958b\u767a \u3067\u3059\u3002\nmixi Advent Calendar \u306e18\u65e5\u76ee\u3067\u3059\u3002\n\n## \u306f\u3058\u3081\u306b\n\n\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u306f[\u300c\u30cf\u30ed\u30fc\u3001Hello World!\u300d](http://www.shuwasystem.co.jp/products/7980html/4478.html)\u3068\u3044\u3046\u7d20\u6674\u3089\u3057\u3044\u66f8\u7c4d\u8aad\u3093\u3067\u601d\u3044\u3064\u3044\u305f\u3082\u306e\u3067\u3059\u3002\u5b9f\u306e\u3068\u3053\u308d\u3001\u666e\u6bb5\u4f7f\u7528\u3059\u308b\u8a00\u8a9e\u306b\u304a\u3044\u3066Hello, World!\u306e\u3088\u3046\u306a\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u3063\u3066\u3082\u3069\u306e\u3088\u3046\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u304b\u672c\u5f53\u306b\u7406\u89e3\u3057\u3066\u3044\u308b\u4eba\u306f\u5c11\u306a\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u306a\u304b\u306a\u304b\u8abf\u3079\u308b\u6a5f\u4f1a\u3082\u3042\u308a\u307e\u305b\u3093\u304b\u3089\u306d\u3002\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3053\u306e\u5834\u3092\u501f\u308a\u3066\u8abf\u3079\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5185\u5bb9\u306b\u8aa4\u308a\u304c\u3042\u308b\u5834\u5408\u306f\u6c17\u8efd\u306b\u30b3\u30e1\u30f3\u30c8\u3067\u6307\u6458\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u306a\u304a\u3001\u672c\u30a8\u30f3\u30c8\u30ea\u3067\u53c2\u7167\u3059\u308b dmd/druntime/phobos \u306e\u5404\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f [Boost License 1.0](http://www.boost.org/LICENSE_1_0.txt) \u306e\u57fa\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \n\n## \u76ee\u7684\n\n\u3068\u308a\u3042\u3048\u305a\u3053\u306e\u3042\u305f\u308a\u3092\u8ffd\u3063\u3066\u307f\u307e\u3059\u3002\n\n* std.stdio \u306f\u3069\u3053\u306b\u3042\u308b\u306e\u304b\n* writeln \u306e\u5148\u3067\u306f\u4f55\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u306e\u304b\n* main \u306e\u524d\u306b\u4f55\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u306e\u304b\n\n## std.stdio \u306f\u3069\u3053\u306b\u3042\u308b\u306e\u304b\n\n`std.stdio` \u306f `phobos` \u3068\u3044\u3046D\u8a00\u8a9e\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u90e1\u306e\u4e2d\u306b\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3072\u3068\u3064\u3067\u3059\u3002\n\nhttp://dlang.org/phobos/index.html\n\nhttp://dlang.org/phobos/std_stdio.html\n\ndmd\u3068phobos\u306f\u3069\u3053\u3067\u95a2\u9023\u3065\u3051\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\uff1f\n\ndmd\u306b\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u4e2d\u306b\u4f55\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u304b\u3092\u8868\u3059verbose\u30aa\u30d7\u30b7\u30e7\u30f3(-v\u3067\u6709\u52b9)\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u308c\u3067\u5c11\u3057\u4e2d\u3092\u8997\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n```\n$ dmd -w -g -v helloworld.d\nbinary    dmd\nversion   v2.069.0\nconfig    /etc/dmd.conf\nparse     helloworld\n...\ngcc helloworld.o -o helloworld -g -m64 -L/usr/lib/x86_64-linux-gnu -Xlinker --export-dynamic -Xlinker -Bstatic -lphobos2 -Xlinker -Bdynamic -lpthread -lm -lrt -ldl\n```\n\n\u51fa\u529b\u306f\u5c11\u3057\u9577\u3044\u306e\u3067\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\u591a\u304f\u306f\u3053\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u3068\u306a\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306eimport\u3067\u3059\u3002\n\n\u3055\u3066\u3001\u4e0a\u306e\u307b\u3046\u3067 `config /etc/dmd.conf` \u3068\u3044\u3046\u884c\u304c\u3042\u308a\u307e\u3059\u306d\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u4e00\u4f53\u306a\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n\n```\n;\n; dmd.conf file for dmd\n;\n; dmd will look for dmd.conf in the following sequence of directories:\n;   - current working directory\n;   - directory specified by the HOME environment variable\n;   - directory dmd resides in\n;   - /etc directory\n;\n; Names enclosed by %% are searched for in the existing environment and inserted\n;\n; The special name %@P% is replaced with the path to this file\n;\n\n[Environment32]\nDFLAGS=-I/usr/include/dmd/phobos -I/usr/include/dmd/druntime/import -L-L/usr/lib/i386-linux-gnu -L--export-dynamic\n\n[Environment64]\nDFLAGS=-I/usr/include/dmd/phobos -I/usr/include/dmd/druntime/import -L-L/usr/lib/x86_64-linux-gnu -L--export-dynamic\n```\n\n\u3069\u3046\u3084\u3089dmd\u306f\u30d5\u30a1\u30a4\u30eb\u5b9a\u7fa9\u304b\u3089phobos\u3084druntime\u306e\u5834\u6240\u3092\u53c2\u7167\u3057\u3066\u308b\u3088\u3046\u3067\u3059\u3002(\u5b9f\u969b\u306b\u79c1\u306e\u74b0\u5883\u3067\u306fphobos\u306f\u3053\u306e\u5834\u6240\u306b\u304a\u3044\u3066\u3042\u308a\u307e\u3059)\n\n`dmd.conf` \u306fman\u3082\u3042\u308b\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u4eba\u306f\u305d\u3061\u3089\u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## Hello, World!\n\n\u3068\u306b\u304b\u304f\u3001D\u8a00\u8a9e\u3067\u306e\u300cHello, World!\u300d\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```d\nimport std.stdio;\n\nvoid main()\n{\n  writeln(\"Hello, World!\");\n}\n```\n\n\u3053\u306e\u7a2e\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8a00\u8a9e\u3054\u3068\u306e\u6bd4\u8f03\u3092\u8ad6\u3058\u308b\u306e\u306f\u96e3\u3057\u3044\u3082\u306e\u3067\u3059\u304c\u3001C\u3084Java\u306e\u69cb\u6587\u3068\u4f3c\u3066\u3044\u308b\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n## writeln \u306e\u524d\u3067\u306f\u306a\u306b\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u306e\u304b\n\nwriteln\u306fstd.stdio\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u3067\u3059\u3002\n\nstdio\u306ebackend\u306f windows/linux/OSX \u306a\u3069OS\u306b\u3088\u3063\u3066\u304b\u308f\u308a\u307e\u3059\u3002\n\nLinux\u306e\u5834\u5408\u306fdmd\u306e\u4e2d\u3067 `CRuntime_Glibc` \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\u3001\u3055\u3089\u306b `GCC_IO` \u304c `std.stdio` \u3067\u5b9a\u7fa9\u3055\u308c\u3001glibc\u306e\u95a2\u6570\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u8ffd\u3046\u524d\u306b\u3001ltrace\u3092\u4f7f\u3063\u3066\u96d1\u306b\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\n$ dmd -gc helloworld.d\n$ ltrace -o dump ./helloworld\n```\n\n\u7d50\u679c\u306e\u4e00\u90e8\u3092\u629c\u7c8b\u3057\u3066\u3001writeln \u3068\u95a2\u4fc2\u3059\u308b\u90e8\u5206\u3092\u629c\u304d\u51fa\u3059\u3068\u3053\u306e\u3042\u305f\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n...\nfwide(0x7fad0e3b5400, 0)\nflockfile(0x7fad0e3b5400, 0, 0x7fad0e3b5400, 0x66ddf0)\nfwrite(\"Hello, World!\", 1, 13, 0x7fad0e3b5400)\nfputc_unlocked(10, 0x7fad0e3b5400, 13, 1024)\nfunlockfile(0x7fad0e3b5400, 0x7fad0ea00000, 0x7fad0ea00000, -1)\n...\n```\n\nC\u8a00\u8a9e\u306e `printf(\"Hello, World!\\n\")` \u306f\u6a19\u6e96\u51fa\u529b\u3078\u306e\u66f8\u304d\u8fbc\u307f\u306e\u90e8\u5206\u3067 `puts` \u3092\u547c\u3073\u307e\u3059\u304c\u3001D\u8a00\u8a9e\u3067\u306f `fwrite` \u3092\u547c\u3093\u3067\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u5947\u5999\u306a\u95a2\u6570\u304c\u3042\u308b\u3053\u3068\u306b\u6c17\u304c\u3064\u304d\u307e\u3059\u3002 `flockfile`, `funlockfile` \u306f\u3044\u3063\u305f\u3044\u306a\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n\nflockfile\u306eman\u30da\u30fc\u30b8\u3092\u307f\u308b\u3068\u3001\u3053\u306e\u95a2\u6570\u306fstdio\u306eFILE\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ed\u30c3\u30af\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3042\u308a\u3001\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u5165\u51fa\u529b\u64cd\u4f5c\u306e\u9014\u4e2d\u3067\u5272\u308a\u8fbc\u3080\u3053\u3068\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u4f7f\u3046\u305f\u3081\u306e\u3082\u306e\u3001\u3067\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u3053\u3067\u306f `fputc_unlocked` \u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u30ed\u30c3\u30af\u3092\u884c\u308f\u306a\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u6a19\u6e96\u5165\u51fa\u529b\u95a2\u6570\u3067\u3042\u308b\u3053\u3068\u3082\u540c\u6642\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u3053\u3053\u304b\u3089\u306f\u5b9f\u969b\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\nphobos\u3067\u306ewriteln\u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```d\n/***********************************\n * Equivalent to $(D write(args, '\\n')).  Calling $(D writeln) without\n * arguments is valid and just prints a newline to the standard\n * output.\n */\nvoid writeln(T...)(T args)\n{\n    import std.traits : isAggregateType;\n    static if (T.length == 0)\n    {\n        import std.exception : enforce;\n\n        enforce(fputc('\\n', .trustedStdout._p.handle) == '\\n', \"fputc failed\");\n    }\n    else static if (T.length == 1 &&\n                    is(typeof(args[0]) : const(char)[]) &&\n                    !is(typeof(args[0]) == enum) &&\n                    !is(Unqual!(typeof(args[0])) == typeof(null)) &&\n                    !isAggregateType!(typeof(args[0])))\n    {\n        import std.exception : enforce;\n\n        // Specialization for strings - a very frequent case\n        auto w = .trustedStdout.lockingTextWriter();\n\n        static if (isStaticArray!(typeof(args[0])))\n        {\n            w.put(args[0][]);\n        }\n        else\n        {\n            w.put(args[0]);\n        }\n        w.put('\\n');\n    }\n    else\n    {\n        // Most general instance\n        trustedStdout.write(args, '\\n');\n    }\n}\n```\n\n\u898b\u6163\u308c\u306a\u3044\u5358\u8a9e\u306f\u305f\u304f\u3055\u3093\u3067\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u30cd\u30bf\u3070\u3089\u3057\u3092\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u3053\u3053\u3067\u3000`else static if (T.length == 1 &&...` \u3068\u3044\u3046\u5206\u5c90\u306b\u5165\u308b\u3053\u3068\u306b\u306a\u308b\u308f\u3051\u306a\u306e\u3067\u3059\u304c\u3001\u306a\u305c\u305d\u3046\u306a\u308b\u306e\u304b\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u306a\u3044\u3067\u3059\u306d\uff01\n\n\u3053\u3053\u306f\u7126\u3089\u305a\u3001\u9806\u3092\u8ffd\u3063\u3066\u307f\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u307e\u305a\u5f15\u6570\u306e\u6570\u304c\u3072\u3068\u3064 `(T.length == 1)` \u3067\u3042\u308b\u3053\u3068\u306f\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u6b21\u306b `is(typeof(args[0]) : const(char)[])` \u3067\u3059\u304c\u3001\u5c11\u3057\u5384\u4ecb\u306a\u304b\u3093\u3058\u304c\u3057\u307e\u3059\u306d\uff01 `typeof` \u306f\u4efb\u610f\u306e\u5f0f\u306e\u578b\u3092\u53d6\u5f97\u3067\u304d\u308b\u5f0f\u3067\u3059\u3002\u4eca\u56de\u306e\u3088\u3046\u306b typeof(\u6587\u5b57\u5217) \u3067\u3042\u308b\u5834\u5408\u306bstring\u3068\u3044\u3046\u578b\u60c5\u5831\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u6b21\u306b `is` \u3067\u3059\u304c\u3001\u3053\u308c\u306f\u5f15\u6570\u306e\u578b\u304c\u610f\u5473\u7684\u306b\u6b63\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u305f\u3081\u306e\u5f0f\u3067\u3059\u3002 `is(typeof { exp...})` \u3068\u3044\u3046\u306e\u306fis\u5f0f\u304c\u76f4\u63a5\u5f0f\u3092\u5f15\u6570\u306b\u3068\u308c\u306a\u3044\u305f\u3081\u306btypeof\u3092\u306f\u3055\u3080\u3001\u3068\u3044\u3046\u30cf\u30c3\u30af\u7684\u306a\u3082\u306e\u3067\u3059\u3002\n\nhttp://www.codelogy.org/entry/2012/08/12/120835\n\n\u6b21\u306b `... : const(char)[])` \u3068\u3044\u3046\u90e8\u5206\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u4e00\u4f53\u306a\u3093\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f \u5b9f\u306f\u3053\u308c\u3082is\u5f0f\u306e\u7279\u6b8a\u306a\u30d1\u30bf\u30fc\u30f3\u3067\u3001`implicit conversion` \u304c\u53ef\u80fd\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3046\u305f\u3081\u306e\u69cb\u6587\u3068\u306a\u308a\u307e\u3059\u3002\n\nhttp://wiki.dlang.org/Is_expression\n\n\u6b21\u306f `!is(typeof(args[0]) == enum` \u3067\u3059\u306d\u3002 `enum` \u306f\u5217\u6319\u4f53\u3092\u8868\u3057\u307e\u3059\u3002`is(typeof({exp..}) == enum` \u306f\u540d\u524d\u4ed8\u304d\u5217\u6319\u4f53\u306e\u8981\u7d20\u3067\u3042\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002 \u4eca\u56dewriteln\u306b\u6e21\u3057\u3066\u3044\u308b\u6587\u5b57\u5217\u578b\u306f\u3068\u304f\u306b\u305d\u306e\u3088\u3046\u306a\u3053\u3068\u306f\u884c\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u3001\u3053\u306e\u6761\u4ef6\u5206\u5c90\u306f\u901a\u308a\u307e\u3059\u3002\n\n`!is(Unqual!(typeof(args[0])) == typeof(null))` \u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002 `Unqual` \u306f\u4fee\u98fe\u5b50(const, shared\u306a\u3069)\u3092\u53d6\u308a\u9664\u304ftemplate\u69cb\u6587\u3067\u3059\u3002\u3053\u3053\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f `null` \u304c\u6765\u3066\u3044\u308b\u5834\u5408\u306b\u5f3e\u304f\u3068\u3044\u3046\u3053\u3068\u3060\u3051\u3067\u3059\u304c\u3001\u90fd\u5ea6 `cast(static)null` \u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u306f\u9762\u5012\u306a\u3068\u3053\u308d\u3067Unqual\u3092\u4f7f\u3046\u3068\u697d\u306b\u51e6\u7406\u3092\u66f8\u3051\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b `!isAggregateType!(typeof(args[0])))` \u3067\u3059\u306d\u3002\u3053\u3053\u3067AggregateType\u3068\u3044\u3046\u306e\u306f\u69cb\u9020\u4f53\u3084\u30af\u30e9\u30b9\u306e\u3088\u3046\u306a\u500b\u3005\u306e\u8981\u7d20\u3068\u3057\u3066\u3082\u96c6\u56e3\u3068\u3057\u3066\u3082\u53c2\u7167\u53ef\u80fd\u3067\u3042\u308b\u30c7\u30fc\u30bf\u306e\u96c6\u307e\u308a\u3092\u8868\u3059\u578b\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u6587\u5b57\u5217\u304c\u6e21\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u6761\u4ef6\u5206\u5c90\u3082\u901a\u308a\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u3053\u308c\u3067\u3088\u3046\u3084\u304f\u3053\u306e\u95a2\u6570\u304c\u3069\u3053\u3078\u5411\u304b\u3046\u306e\u304b\u304c\u308f\u304b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u306f `trustedStdout.lockingTextWriter` \u304c\u809d\u3068\u306a\u308a\u307e\u3059\u3002\n\n```d\n/// Range primitive implementations.\nvoid put(A)(A writeme)\n    if (is(ElementType!A : const(dchar)) &&\n        isInputRange!A &&\n        !isInfinite!A)\n{\n    import std.exception : errnoEnforce;\n\n    alias C = ElementEncodingType!A;\n    static assert(!is(C == void));\n    static if (isSomeString!A && C.sizeof == 1)\n    {\n        if (orientation_ <= 0)\n        {\n            //file.write(writeme); causes infinite recursion!!!\n            //file.rawWrite(writeme);\n            static auto trustedFwrite(in void* ptr, size_t size, size_t nmemb, FILE* stream) @trusted\n            {\n                return .fwrite(ptr, size, nmemb, stream);\n            }\n            auto result =\n                trustedFwrite(writeme.ptr, C.sizeof, writeme.length, fps_);\n            if (result != writeme.length) errnoEnforce(0);\n            return;\n        }\n    }\n\n    // put each character in turn\n    foreach (dchar c; writeme)\n    {\n        put(c);\n    }\n}\n```\n\n\u3053\u3053\u3067\u3088\u3046\u3084\u304f `fwrite` \u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\u3053\u3053\u3067fwrite\u3092\u7279\u5225\u6271\u3044\u3057\u305f\u306e\u306f\u6587\u5b57\u5217\u3092\u90fd\u5ea6putc_unlocked\u3092\u5b9f\u884c\u3059\u308b\u30b3\u30b9\u30c8\u3092\u907f\u3051\u305f\u3044\u304b\u3089\u3067\u3057\u3087\u3046\u3002\n\n## main \u306e\u524d\u306b\u306a\u306b\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u304b\n\nD\u8a00\u8a9e\u306emain\u95a2\u6570\u306fC\u8a00\u8a9e\u306emain\u95a2\u6570\u3068\u7570\u306a\u308b\u3082\u306e\u3067\u3059\u3002\n\n```\n( \u055e\u0a0a \u055e) :~/dev/dlang/helloworld $ dmd -g helloworld.d\n( \u055e\u0a0a \u055e) :~/dev/dlang/helloworld $ gdb ./helloworld\n...\n(gdb) b _Dmain\nBreakpoint 1 at 0x4351a4: file helloworld.d, line 5.\n(gdb) r\n...\nBreakpoint 1, D main () at helloworld.d:5\n5         writeln(\"Hello, World!\");\n(gdb) bt\n#0  D main () at helloworld.d:5\n#1  0x0000000000436227 in rt.dmain2._d_run_main() ()\n#2  0x000000000043617d in rt.dmain2._d_run_main() ()\n#3  0x00000000004361e3 in rt.dmain2._d_run_main() ()\n#4  0x000000000043617d in rt.dmain2._d_run_main() ()\n#5  0x00000000004360da in _d_run_main ()\n#6  0x0000000000435678 in main ()\n```\n\n_Dmain\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u8868\u73fe\u3082\u307f\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```\n(gdb) disas\nDump of assembler code for function _Dmain:\n   0x00000000004351a0 <+0>:     push   %rbp\n   0x00000000004351a1 <+1>:     mov    %rsp,%rbp\n=> 0x00000000004351a4 <+4>:     mov    $0x467940,%edx\n   0x00000000004351a9 <+9>:     mov    $0xd,%edi\n   0x00000000004351ae <+14>:    mov    %rdx,%rsi\n   0x00000000004351b1 <+17>:    callq  0x4351c0 <_D3std5stdio16__T7writelnTAyaZ7writelnFNfAyaZv>\n   0x00000000004351b6 <+22>:    xor    %eax,%eax\n   0x00000000004351b8 <+24>:    pop    %rbp\n   0x00000000004351b9 <+25>:    retq\n```\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7684\u306b\u3068\u3063\u304b\u304b\u308a\u306b\u306a\u308a\u305d\u3046\u306a\u3068\u3053\u308d\u306f\u3053\u306e\u3078\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\n* dmd:src/mars.d\n\n```d\nextern (C++) void genCmain(Scope* sc)\n{\n    if (entrypoint)\n        return;\n    /* The D code to be generated is provided as D source code in the form of a string.\n     * Note that Solaris, for unknown reasons, requires both a main() and an _main()\n     */\n    static __gshared const(char)* cmaincode =\n    q{\n        extern(C)\n        {\n            int _d_run_main(int argc, char **argv, void* mainFunc);\n            int _Dmain(char[][] args);\n            int main(int argc, char **argv)\n            {\n                return _d_run_main(argc, argv, &_Dmain);\n            }\n            version (Solaris) int _main(int argc, char** argv) { return main(argc, argv); }\n        }\n    };\n...\n```\n\ncallstack\u7684\u306b\u306f\n\nmain -> _d_run_main(druntime) -> ...\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u3001gdb\u306ebacktrace\u8868\u793a\u3068\u3042\u308f\u305b\u3066\u307f\u3066\u3082\u6b63\u3057\u3044\u3088\u3046\u898b\u3048\u307e\u3059\u3002\n\n\n\n\u3053\u3053\u3067 `_d_run_main` \u306fdruntime\u306e\u307b\u3046\u306b\u3082\u30b3\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\ndruntime:rt/dmain2.d\n\n```d\nextern (C) int _d_run_main(int argc, char **argv, MainFunc mainFunc)\n{\n...\n    void runAll()\n    {\n        if (rt_init() && runModuleUnitTests())\n            tryExec({ result = mainFunc(args); });\n        else\n            result = EXIT_FAILURE;\n\n        if (!rt_term())\n            result = (result == EXIT_SUCCESS) ? EXIT_FAILURE : result;\n    }\n\n    tryExec(&runAll);\n...\n}\n```\n\ntryExec\u306f\u6e21\u3055\u308c\u308bdelegate\u3092\u5b9f\u884c\u3057\u3066\u4f8b\u5916\u304c\u8d77\u304d\u305f\u6642\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u3053\u3053\u3067\u306f\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\n\n`runAll` \u306e\u4e2d\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u307e\u305a `rt_init` \u3068 `runModuleUnitTests` \u95a2\u6570\u304c\u305d\u308c\u305e\u308c\u5b9f\u884c\u3055\u308c\u3001\u305d\u308c\u3089\u306e\u5b9f\u884c\u304c\u6210\u529f\u3067\u3042\u3063\u305f\u3068\u304d\u306b `mainFunc(args)` \u3059\u306a\u308f\u3061 `_Dmain` \u3092\u5b9f\u884c\u3059\u308b\u6d41\u308c\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n`rt_init` \u306fmutex\u5c5e\u6027\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084GC\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u521d\u671f\u5316\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```d\n/**********************************************\n * Initialize druntime.\n * If a C program wishes to call D code, and there's no D main(), then it\n * must call rt_init() and rt_term().\n */\nextern (C) int rt_init()\n{\n...\n    _d_monitor_staticctor();\n    _d_critical_init();\n\n    try\n    {\n        initSections();\n        // this initializes mono time before anything else to allow usage\n        // in other druntime systems.\n        _d_initMonoTime();\n        gc_init();\n        initStaticDataGC();\n        lifetime_init();\n        rt_moduleCtor();\n        rt_moduleTlsCtor();\n        return 1;\n    }\n...\n}\n```\n\n\u7d9a\u3044\u3066\u3000`runModuleUnitTests` \u306fimport\u3057\u3066\u3044\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306eunittest\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u524d\u306b\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3046\u306e\u306f\u306a\u304b\u306a\u304b\u9a5a\u304d\u3067\u3059\u306d\u3002\n\n```d\n/**\n * This routine is called by the runtime to run module unit tests on startup.\n * The user-supplied unit tester will be called if one has been supplied,\n * otherwise all unit tests will be run in sequence.\n *\n * Returns:\n *  true if execution should continue after testing is complete and false if\n *  not.  Default behavior is to return true.\n */\nextern (C) bool runModuleUnitTests()\n{\n    // backtrace\n    version( CRuntime_Glibc )\n        import core.sys.linux.execinfo;\n...\n    static if( __traits( compiles, backtrace ) )\n    {\n        import core.sys.posix.signal; // segv handler\n\n        static extern (C) void unittestSegvHandler( int signum, siginfo_t* info, void* ptr ) nothrow\n        {\n            static enum MAXFRAMES = 128;\n            void*[MAXFRAMES]  callstack;\n            int               numframes;\n\n            numframes = backtrace( callstack.ptr, MAXFRAMES );\n            backtrace_symbols_fd( callstack.ptr, numframes, 2 );\n        }\n\n        sigaction_t action = void;\n        sigaction_t oldseg = void;\n        sigaction_t oldbus = void;\n\n        (cast(byte*) &action)[0 .. action.sizeof] = 0;\n        sigfillset( &action.sa_mask ); // block other signals\n        action.sa_flags = SA_SIGINFO | SA_RESETHAND;\n        action.sa_sigaction = &unittestSegvHandler;\n        sigaction( SIGSEGV, &action, &oldseg );\n        sigaction( SIGBUS, &action, &oldbus );\n        scope( exit )\n        {\n            sigaction( SIGSEGV, &oldseg, null );\n            sigaction( SIGBUS, &oldbus, null );\n        }\n    }\n\n    if( Runtime.sm_moduleUnitTester is null )\n    {\n        size_t failed = 0;\n        foreach( m; ModuleInfo )\n        {\n            if( m )\n            {\n                auto fp = m.unitTest;\n\n                if( fp )\n                {\n                    try\n                    {\n                        fp();\n                    }\n                    catch( Throwable e )\n                    {\n                        _d_print_throwable(e);\n                        failed++;\n                    }\n                }\n            }\n        }\n        return failed == 0;\n    }\n    return Runtime.sm_moduleUnitTester();\n}\n```\n\n\u3053\u308c\u3089\u306e\u51e6\u7406\u304c\u554f\u984c\u306a\u304f\u884c\u308f\u308c\u305f\u5f8c\u306bmain\u95a2\u6570\u306e\u4e2d\u8eab\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\n## \u5b9f\u884c\u74b0\u5883\n\n\u6700\u5f8c\u306b\u3001\u79c1\u304c\u672c\u8a18\u4e8b\u306e\u5185\u5bb9\u3092\u691c\u8a3c\u3057\u305f\u969b\u306e\u5b9f\u884c\u74b0\u5883\u3092\u63b2\u8f09\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n* OS/Distribution\n\n```\n$ uname -mrv\n3.13.0-68-generic #111-Ubuntu SMP Fri Nov 6 18:17:06 UTC 2015 x86_64\n$ cat /etc/issue\nUbuntu 14.04.3 LTS \\n \\l\n```\n\n* D\u8a00\u8a9e\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u3057\u3066DMD\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```\n$ dmd --version\nDMD64 D Compiler v2.069.0\nCopyright (c) 1999-2015 by Digital Mars written by Walter Bright\n```\n# \u660e\u65e5\n\n\u660e\u65e5\u306f [GitHub ID: oppai \u306e\u4eba](https://github.com/oppai) \u3055\u3093\u3053\u3068 @kodam \u306e **\u5b9f\u8df5\u307c\u3063\u3061\u99c6\u52d5\u958b\u767a** \u3067\u3059\u3002\n", "tags": ["dlang"]}