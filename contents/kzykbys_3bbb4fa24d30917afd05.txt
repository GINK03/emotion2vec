{"context": "\u3053\u306e\u6295\u7a3f\u304cQiita\u30c7\u30d3\u30e5\u30fc\u3067\u3059*\\(^o^)/*\nRxSwift\u306eExamples\u3092\u8aad\u307f\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nRxSwift\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u306b\u3042\u308b Why.md \u3084 GettingStarted.md \u306f\u8aad\u3093\u3067\u307f\u305f\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3044\u3046\u306e\u3082\u8aad\u3093\u3067\u6050\u3089\u304f\u5206\u304b\u3063\u305f\u3002Qiita\u306e\u95a2\u4fc2\u3042\u308b\u8a18\u4e8b\u3082\u3061\u3087\u304f\u3061\u3087\u304f\u8aad\u3093\u3067\u307f\u305f\u3002\u6b21\u306fiOS\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u6d3b\u304b\u305d\u3046\u3068\u601d\u3063\u3066\u3044\u308b\u304c\u53d6\u3063\u639b\u304b\u308a\u304c\u63b4\u3081\u306a\u3044\u3068\u3044\u3046\u4eba\u5411\u3051\u3002\uff08\u81ea\u5206\uff09\n\nAdding Numbers\n\n\nNumbersViewController.swift\nObservable.combineLatest(number1.rx_text, number2.rx_text, number3.rx_text) { textValue1, textValue2, textValue3 -> Int in\n                return (Int(textValue1) ?? 0) + (Int(textValue2) ?? 0) + (Int(textValue3) ?? 0)\n            }\n            .map { $0.description }\n            .bindTo(result.rx_text)\n            .addDisposableTo(disposeBag)\n\n\n\u5404UITextField\u306e\u5024\u304c\u5909\u66f4\u3055\u308c\u308b\u5ea6\u306b\u3001 combineLatest \u306e\u4e2d\u30673\u3064\u306eUITextField\u306b\u5165\u529b\u3055\u308c\u3066\u3044\u308b\u30c6\u30ad\u30b9\u30c8\u3092Int\u306b\u5909\u63db\u3057\u3001\u8db3\u3057\u7b97\u3057\u3066\u3001return\u3002\u305d\u306e\u7d50\u679c\u3092 map \u3067 String \u3092\u3068\u3057\u3066\u8fd4\u3057\u3066\u3001\u7d50\u679c\u8868\u793a\u7528\u306eUILabel\u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3060\u3051\u3067\u3001UILabel\u304c\u66f4\u65b0\u3055\u308c\u308b\uff01\n\nSimple Validation\n\n\nSimpleValidationViewController.swift\nlet usernameValid = usernameOutlet.rx_text\n    .map { $0.characters.count >= minimalUsernameLength }\n    .shareReplay(1) // (1\n\nlet passwordValid = passwordOutlet.rx_text\n    .map { $0.characters.count >= minimalPasswordLength }\n    .shareReplay(1)\n\nlet everythingValid = Observable.combineLatest(usernameValid, passwordValid) { $0 && $1 }\n    .shareReplay(1)\n\nusernameValid\n    // \u30d1\u30b9\u30ef\u30fc\u30c9\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u691c\u8a3c\u304c\u771f\u306e\u6642\u306b, \u6709\u52b9\u306b\u306a\u308b\n    .bindTo(passwordOutlet.rx_enabled)\n    .addDisposableTo(disposeBag)\n\nusernameValid\n    // \u30e6\u30fc\u30b6\u30fc\u540d\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u691c\u8a3c\u304c\u771f\u306e\u6642\u306b, \u975e\u8868\u793a\u306b\u306a\u308b\n    .bindTo(usernameValidOutlet.rx_hidden)\n    .addDisposableTo(disposeBag)\n\npasswordValid\n    // \u30d1\u30b9\u30ef\u30fc\u30c9\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u691c\u8a3c\u304c\u771f\u306e\u6642\u306b, \u975e\u8868\u793a\u306b\u306a\u308b\n    .bindTo(passwordValidOutlet.rx_hidden)\n    .addDisposableTo(disposeBag)\n\neverythingValid\n    // usernameValid \u3068 passwordValid \u304c\u5171\u306b\u771f\u306e\u5834\u5408\u306b `doSomethingOutlet(UIButton)` \u304c\u6709\u52b9\u306b\u306a\u308b\n    .bindTo(doSomethingOutlet.rx_enabled)\n    .addDisposableTo(disposeBag)\n\ndoSomethingOutlet.rx_tap\n    // \u30bf\u30c3\u30d7\u3055\u308c\u305f\u969b\u306b\u3001`showAlert()`\u3092\u547c\u3076\n    .subscribeNext { [weak self] in self?.showAlert() }\n    .addDisposableTo(disposeBag)\n\n\n\u691c\u8a3c\u30ed\u30b8\u30c3\u30af\u3092\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u7528\u306b\u5b9a\u7fa9\u3057\u3001\u305d\u308c\u3089\u3092\u5404\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306bbind\u3002\u691c\u8a3c\u7d50\u679c\u306b\u3088\u308a\u3001UIButton\u3092\u6709\u52b9\u306b\u3057\u305f\u308a\u3001\u6ce8\u610f\u66f8\u304d\u306eUILabel\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u308a\u3057\u3066\u3044\u308b\u3002\nshareReplay(1)\u3068\u3044\u3046\u306e\u306f\u3001\u3053\u308c\u304c\u306a\u3044\u3068\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u8907\u6570\u751f\u6210\u3055\u308c\u3001map\u306e\u4e2d\u304cUITextField\u306e\u5024\u3092\u5909\u66f4\u3059\u308b\u5ea6\u306b\u3001\u8907\u6570\u56de\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3046\u3002\u8a73\u3057\u304f\u306f\u53c2\u8003\u3067\u3042\u3052\u305f\u8a18\u4e8b\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\nGeolocation Subscription\n\nGeolocationViewController.swift\nlet geolocationService = GeolocationService.instance\ngeolocationService.authorized\n    .drive(noGeolocationView.rx_driveAuthorization)\n    .addDisposableTo(disposeBag)\n\ngeolocationService.location\n    .drive(label.rx_driveCoordinates)\n    .addDisposableTo(disposeBag)\n\nbutton.rx_tap\n    .bindNext { [weak self] in\n        self?.openAppPreferences()\n    }\n    .addDisposableTo(disposeBag)\n\nbutton2.rx_tap\n    .bindNext { [weak self] in\n        self?.openAppPreferences()\n    }\n    .addDisposableTo(disposeBag)\n\n\nGeolocationService \u3068\u3044\u3046\u306e\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u306b\u95a2\u3059\u308b\u4fbf\u5229\u30af\u30e9\u30b9\u3002 .authorized \u3067\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u306e\u8a31\u53ef\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u304b\u5224\u5b9a\u3057\u3001Bool\u3067\u8fd4\u3057\u3066\u304f\u308c\u308b\u3002\u307e\u305f\u3001.location\u3067\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u304c\u5909\u66f4\u3055\u308c\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u3066\u3001CLLocationCoordinate2D\u3067\u8fd4\u3057\u3066\u304f\u308c\u308b\u3002\nbindTo \u306e\u4ee3\u308f\u308a\u306b drive \u3092\u4f7f\u3044\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u30a8\u30e9\u30fc\u3082\u5410\u304d\u51fa\u3055\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002Drive\u306b\u95a2\u3057\u3066\u306f\u3001\u672c\u5bb6\u306e Unit \u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3002\n\nGeolocationViewController.swift\nprivate extension UILabel {\n    var rx_driveCoordinates: AnyObserver<CLLocationCoordinate2D> {\n        return UIBindingObserver(UIElement: self) { label, location in\n            label.text = \"Lat: \\(location.latitude)\\nLon: \\(location.longitude)\"\n        }.asObserver()\n    }\n}\n\nprivate extension UIView {\n    var rx_driveAuthorization: AnyObserver<Bool> {\n        return UIBindingObserver(UIElement: self) { view, authorized in\n            if authorized {\n                view.hidden = true\n                view.superview?.sendSubviewToBack(view)\n            }\n            else {\n                view.hidden = false\n                view.superview?.bringSubviewToFront(view)\n            }\n        }.asObserver()\n    }\n}\n\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u30ab\u30b9\u30bf\u30e0Observer( rx_*** )\u306e\u4f5c\u6210\u4ed5\u65b9\u3092\u5b66\u3079\u308b\u3002 rx_driveAuthorization \u3067\u306f\u3001Bool\u3092\u6e21\u3059\u3088\u3046\u306b\u3057\u3066\u3001\u305d\u306e\u5024\u306b\u3088\u308a\u3001UIView\u306ehidden\u3092\u5207\u308a\u66ff\u3048\u305f\u308a\u3001z\u8ef8\u3092\u5909\u66f4\u3057\u3066\u3044\u308b\u3002 rx_driveCoordinates \u306e\u65b9\u306f\u3001CLLocationCoordinate2D \u3092\u7d50\u3073\u3064\u3051\u305d\u306e\u5024\u306b\u3088\u308a\u3001UILabel\u306etext\u3092\u5909\u66f4\u3057\u3066\u3044\u308b\u3002\n\nGitHub Signup - Vanilla Observables\n\n\nGitHubSignupViewController1.swift\nlet viewModel = GithubSignupViewModel1(\n    input: (\n        username: usernameOutlet.rx_text.asObservable(),\n        password: passwordOutlet.rx_text.asObservable(),\n        repeatedPassword: repeatedPasswordOutlet.rx_text.asObservable(),\n        loginTaps: signupOutlet.rx_tap.asObservable()\n    ),\n    dependency: (\n        API: GitHubDefaultAPI.sharedAPI,\n        validationService: GitHubDefaultValidationService.sharedValidationService,\n        wireframe: DefaultWireframe.sharedInstance\n    )\n)\n\n// bind results to  {\nviewModel.signupEnabled\n    .subscribeNext { [weak self] valid  in\n        self?.signupOutlet.enabled = valid\n        self?.signupOutlet.alpha = valid ? 1.0 : 0.5\n    }\n    .addDisposableTo(disposeBag)\n\nviewModel.validatedUsername\n    .bindTo(usernameValidationOutlet.ex_validationResult)\n    .addDisposableTo(disposeBag)\n\nviewModel.validatedPassword\n    .bindTo(passwordValidationOutlet.ex_validationResult)\n    .addDisposableTo(disposeBag)\n\nviewModel.validatedPasswordRepeated\n    .bindTo(repeatedPasswordValidationOutlet.ex_validationResult)\n    .addDisposableTo(disposeBag)\n\nviewModel.signingIn\n    .bindTo(signingUpOulet.rx_animating)\n    .addDisposableTo(disposeBag)\n\nviewModel.signedIn\n    .subscribeNext { signedIn in\n        print(\"User signed in \\(signedIn)\")\n    }\n    .addDisposableTo(disposeBag)\n//}\n\n\nMVVM\u30d1\u30bf\u30fc\u30f3\u306e\u5b9f\u88c5\u4f8b\u3002\u691c\u8a3c\u30ed\u30b8\u30c3\u30af\u306a\u3069\u306f\u3001GithubSignupViewModel1\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u3002GithubSignupViewModel1\u3092\u521d\u671f\u5316\u3059\u308b\u969b\u306b\u3001Observe\u3059\u308bUITextField\u3084\u691c\u8a3c\u3059\u308b\u305f\u3081\u306e\u30b5\u30fc\u30d3\u30b9\u3092\u6e21\u3057\u3066\u3044\u308b\u3002ViewController\u306e\u4e2d\u3067\u306f\u3001ValidationResult\u306b\u3088\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3084\u30c6\u30ad\u30b9\u30c8\u8272\u3092\u5909\u3048\u308b\u3068\u3046\u3053\u3068\u3092bind\u3057\u3066\u3044\u308b\u3060\u3051\u3002\n\nGitHub Signup - Using Driver\n\nGithubSignupViewModel2.swift\nclass GithubSignupViewModel2 {\n    // outputs {\n\n    //\n    let validatedUsername: Driver<ValidationResult>\n    let validatedPassword: Driver<ValidationResult>\n    let validatedPasswordRepeated: Driver<ValidationResult>\n\n    // Is signup button enabled\n    let signupEnabled: Driver<Bool>\n\n    // Has user signed in\n    let signedIn: Driver<Bool>\n\n    // Is signing process in progress\n    let signingIn: Driver<Bool>\n\n    // }\n\n    init(\n        input: (\n            username: Driver<String>,\n            password: Driver<String>,\n            repeatedPassword: Driver<String>,\n            loginTaps: Driver<Void>\n        ),\n        dependency: (\n            API: GitHubAPI,\n            validationService: GitHubValidationService,\n            wireframe: Wireframe\n        )\n    ) {\n        let API = dependency.API\n        let validationService = dependency.validationService\n        let wireframe = dependency.wireframe\n\n        validatedUsername = input.username\n            .flatMapLatest { username in\n                return validationService.validateUsername(username)\n                    .asDriver(onErrorJustReturn: .Failed(message: \"Error contacting server\"))\n            }\n\n        validatedPassword = input.password\n            .map { password in\n                return validationService.validatePassword(password)\n            }\n\n        validatedPasswordRepeated = Driver.combineLatest(input.password, input.repeatedPassword, resultSelector: validationService.validateRepeatedPassword)\n\n        let signingIn = ActivityIndicator()\n        self.signingIn = signingIn.asDriver()\n\n        let usernameAndPassword = Driver.combineLatest(input.username, input.password) { ($0, $1) }\n\n        signedIn = input.loginTaps.withLatestFrom(usernameAndPassword)\n            .flatMapLatest { (username, password) in\n                return API.signup(username, password: password)\n                    .trackActivity(signingIn)\n                    .asDriver(onErrorJustReturn: false)\n            }\n            .flatMapLatest { loggedIn -> Driver<Bool> in\n                let message = loggedIn ? \"Mock: Signed in to GitHub.\" : \"Mock: Sign in to GitHub failed\"\n                return wireframe.promptFor(message, cancelAction: \"OK\", actions: [])\n                    // propagate original value\n                    .map { _ in\n                        loggedIn\n                    }\n                    .asDriver(onErrorJustReturn: false)\n            }\n\n\n        signupEnabled = Driver.combineLatest(\n            validatedUsername,\n            validatedPassword,\n            validatedPasswordRepeated,\n            signingIn\n        )   { username, password, repeatPassword, signingIn in\n                username.isValid &&\n                password.isValid &&\n                repeatPassword.isValid &&\n                !signingIn\n            }\n            .distinctUntilChanged()\n    }\n}\n\n\nGitHub Signup - Vanilla Observables\u306eDriver\u3067\u5b9f\u88c5\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3002ViewController\u306f\u57fa\u672c\u540c\u3058\u306a\u306e\u3067\uff08driver\u306e\u7b87\u6240\u4ee5\u5916\uff09\u3001ViewModel\u306e\u4e2d\u3092\u898b\u3066\u307f\u308b\u3002\nGithubSignupViewModel2\u3067\u306f\u3001\u5927\u304d\u304f\u5206\u3051\u3066input\u3068dependency\u3068\u3044\u3046\u5f15\u6570\u3092\u6e21\u3057\u3066\u521d\u671f\u5316\u3059\u308b\u3002input\u306f\u3001Observe\u3059\u308bUITextField\u7b49\u3002dependency\u3067\u306f\u3001API\u3068\u306e\u901a\u4fe1\u30fb\u691c\u8a3c\u6a5f\u80fd\u30fb\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3092\u8868\u793a\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u7fa4\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3046\u3044\u3063\u305f\u30b5\u30fc\u30d3\u30b9\u7fa4\u3092\u30ad\u30ec\u30a4\u306b\u5206\u5272\u3057\u3066\u3001\u4fdd\u5b88\u6027\u306e\u9ad8\u3044\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nAPI wrappers\n\nAPIWrappersViewController.swift\noverride func viewDidLoad() {\n  super.viewDidLoad()\n\n  datePicker.date = NSDate(timeIntervalSince1970: 0)\n\n  // MARK: UIBarButtonItem\n\n  bbitem.rx_tap\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UIBarButtonItem Tapped\")\n      }\n      .addDisposableTo(disposeBag)\n\n  // MARK: UISegmentedControl\n\n  // also test two way binding\n  let segmentedValue = Variable(0)\n  segmentedControl.rx_value <-> segmentedValue\n\n  segmentedValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UISegmentedControl value \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UISwitch\n\n  // also test two way binding\n  let switchValue = Variable(true)\n  switcher.rx_value <-> switchValue\n\n  switchValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UISwitch value \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n  // MARK: UIActivityIndicatorView\n\n  switcher.rx_value\n      .bindTo(activityIndicator.rx_animating)\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UIButton\n\n  button.rx_tap\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UIButton Tapped\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UISlider\n\n  // also test two way binding\n  let sliderValue = Variable<Float>(1.0)\n  slider.rx_value <-> sliderValue\n\n  sliderValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UISlider value \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UIDatePicker\n\n  // also test two way binding\n  let dateValue = Variable(NSDate(timeIntervalSince1970: 0))\n  datePicker.rx_date <-> dateValue\n\n\n  dateValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UIDatePicker date \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UITextField\n\n  // also test two way binding\n  let textValue = Variable(\"\")\n  textField <-> textValue\n\n  textValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UITextField text \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UIGestureRecognizer\n\n  mypan.rx_event\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UIGestureRecognizer event \\(x.state)\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UITextView\n\n  // also test two way binding\n  let textViewValue = Variable(\"\")\n  textView <-> textViewValue\n\n  textViewValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UITextView text \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n  // MARK: CLLocationManager\n\n  #if !RX_NO_MODULE\n  manager.requestWhenInUseAuthorization()\n  #endif\n\n  manager.rx_didUpdateLocations\n      .subscribeNext { x in\n          print(\"rx_didUpdateLocations \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n  _ = manager.rx_didFailWithError\n      .subscribeNext { x in\n          print(\"rx_didFailWithError \\(x)\")\n      }\n\n  manager.rx_didChangeAuthorizationStatus\n      .subscribeNext { status in\n          print(\"Authorization status \\(status)\")\n      }\n      .addDisposableTo(disposeBag)\n\n  manager.startUpdatingLocation()\n}\n\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001UIBarButtonItem\u30fbUISegmentedControl\u30fbUIDatePicker\u30fbUISwitch\u30fbUIActivityIndicatorView\u30fbUIButton\u30fbUISlider\u30fbUIDatePicker\u30fbUITextField\u30fbUIGestureRecognizer\u30fbUITextView\u30fbCLLocationManager \u3068\u3044\u3063\u305f\u69d8\u3005\u306a\u30d1\u30fc\u30c4\u306b\u5bfe\u3057\u3066RxSwift\u306e\u4f7f\u3044\u65b9\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3001RxSwift\u72ec\u81ea\u306e\u6a5f\u80fd\u3067\u3042\u308bVariable\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001BehaviorSubject\u3068\u3044\u3046\u3082\u306e\u306e\u8584\u3044\u30e9\u30c3\u30d1\u30fc\u306e\u3088\u3046\u3067\u3059\u3002BehaviorSubject\u306f\u3001subscribe\u3057\u305f\u9014\u7aef\u3001\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u4fe1\u3057\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4e0a\u8a18\u306e\u4f8b\u306eVariable\u3067\u306f\u3001\u5404\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306b\u5bfe\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u521d\u671f\u5024\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002UITextView\u306b\u306f\u3001let textViewValue = Variable(\"\")\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3059\u3002\n\u307e\u305f\u3001textView <-> textViewValue\u3068\u3057\u3066\u3001\u53cc\u65b9\u5411\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\uff1f\u3068\u3044\u3046\u3082\u306e\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001textViewValue.value = \"hogehoge\"\u3068\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001UITextView\u306e\u8868\u793a\u3082\u5909\u66f4\u3055\u308c\u307e\u3059\u3002\n\nCalculator\n\n\nCalculatorViewController.swift\noverride func viewDidLoad() {\nlet commands:[Observable<Action>] = [\n    allClearButton.rx_tap.map { _ in .Clear },\n\n    changeSignButton.rx_tap.map { _ in .ChangeSign },\n    percentButton.rx_tap.map { _ in .Percent },\n\n    divideButton.rx_tap.map { _ in .Operation(.Division) },\n    multiplyButton.rx_tap.map { _ in .Operation(.Multiplication) },\n    minusButton.rx_tap.map { _ in .Operation(.Subtraction) },\n    plusButton.rx_tap.map { _ in .Operation(.Addition) },\n\n    equalButton.rx_tap.map { _ in .Equal },\n\n    dotButton.rx_tap.map { _ in .AddDot },\n\n    zeroButton.rx_tap.map { _ in .AddNumber(\"0\") },\n    oneButton.rx_tap.map { _ in .AddNumber(\"1\") },\n    twoButton.rx_tap.map { _ in .AddNumber(\"2\") },\n    threeButton.rx_tap.map { _ in .AddNumber(\"3\") },\n    fourButton.rx_tap.map { _ in .AddNumber(\"4\") },\n    fiveButton.rx_tap.map { _ in .AddNumber(\"5\") },\n    sixButton.rx_tap.map { _ in .AddNumber(\"6\") },\n    sevenButton.rx_tap.map { _ in .AddNumber(\"7\") },\n    eightButton.rx_tap.map { _ in .AddNumber(\"8\") },\n    nineButton.rx_tap.map { _ in .AddNumber(\"9\") }\n]\n\ncommands\n    .toObservable()\n    .merge()\n    .scan(CalculatorState.CLEAR_STATE) { a, x in\n        // \u3053\u3053\u3067\u3001CalculatorState\u306b\u5909\u63db\u3057\u3066\u3044\u308b\n        return a.tranformState(x)\n    }\n    .debug(\"debugging\")\n    .subscribeNext { [weak self] calState in\n        self?.resultLabel.text = self?.prettyFormat(calState.inScreen)\n        switch calState.action {\n        case .Operation(let operation):\n            switch operation {\n            case .Addition:\n                self?.lastSignLabel.text = \"+\"\n            case .Subtraction:\n                self?.lastSignLabel.text = \"-\"\n            case .Multiplication:\n                self?.lastSignLabel.text = \"x\"\n            case .Division:\n                self?.lastSignLabel.text = \"/\"\n            }\n        default:\n            self?.lastSignLabel.text = \"\"\n        }\n    }\n    .addDisposableTo(disposeBag)\n}\n\n\n\u3053\u306e\u8a08\u7b97\u6a5f\u306e\u4f8b\u3067\u306f\u3001Observable<Action>\u306e\u914d\u5217\u3092merge\u3057\u3066\u30011\u3064\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001scan\u3068\u3044\u3046\u524d\u306e\u5024\u3092\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u6271\u3046\u3082\u306e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002Accumulator\u3068\u3057\u3066\u3001CalculatorState.CLEAR_STATE\u304b\u3089\u59cb\u307e\u308a\u3001\u8a08\u7b97\u6a5f\u306e\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u5ea6\u306b\u3053\u308c\u3092\u66f4\u65b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305f\u3001debug\u3092\u306f\u3055\u307f\u90fd\u5ea6\u7d50\u679c\u3092\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3002\u6700\u5f8c\u306b\u3001subscribeNext\u306e\u4e2d\u3067\u3001\u8a08\u7b97\u6a5f\u4e0a\u306eUILabel\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u8a08\u7b97\u6a5f\u3092ViewController\u306e\u4e2d\u3067\u306f\u3001\u7279\u306b\u7d50\u679c\u7b49\u3092\u4fdd\u6301\u305b\u305a\u3068\u3082\u307b\u307c\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u73fe\u3057\u3066\u3057\u307e\u3046\u306e\u306f\u3059\u3054\u3044\u3067\u3059\u306d\u3002\n\n\u53c2\u8003\nRxSwift/Units.md at master \u00b7 ReactiveX/RxSwift\nhttps://github.com/ReactiveX/RxSwift/blob/master/Documentation/Units.md#driver\nRxSwift/Why.md at master \u00b7 ReactiveX/RxSwift\nhttps://github.com/ReactiveX/RxSwift/blob/master/Documentation/Why.md\nRxSwift/GettingStarted.md at master \u00b7 ReactiveX/RxSwift\nhttps://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md\n[RxSwift] shareReplay\u3092\u3061\u3083\u3093\u3068\u66f8\u3044\u3066\u304a\u884c\u5100\u826f\u304f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8cfc\u8aad\u3057\u3088\u3046\nhttp://qiita.com/kazu0620/items/bde4a65e82a10bd33f88\n\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc\u30d1\u30bf\u30fc\u30f3\u304b\u3089\u59cb\u3081\u308bRxSwift\u5165\u9580\nhttp://qiita.com/k5n/items/17f845a75cce6b737d1e#variable\n\u3053\u306e\u6295\u7a3f\u304cQiita\u30c7\u30d3\u30e5\u30fc\u3067\u3059\\*\\\\(^o^)/*\n\nRxSwift\u306e[Examples](https://github.com/ReactiveX/RxSwift/tree/master/RxExample/RxExample/Examples)\u3092\u8aad\u307f\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\nRxSwift\u306e\u30ec\u30dd\u30b8\u30c8\u30ea\u306b\u3042\u308b [Why.md](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Why.md) \u3084 [GettingStarted.md](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md) \u306f\u8aad\u3093\u3067\u307f\u305f\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3044\u3046\u306e\u3082\u8aad\u3093\u3067\u6050\u3089\u304f\u5206\u304b\u3063\u305f\u3002Qiita\u306e\u95a2\u4fc2\u3042\u308b\u8a18\u4e8b\u3082\u3061\u3087\u304f\u3061\u3087\u304f\u8aad\u3093\u3067\u307f\u305f\u3002\u6b21\u306fiOS\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u6d3b\u304b\u305d\u3046\u3068\u601d\u3063\u3066\u3044\u308b\u304c\u53d6\u3063\u639b\u304b\u308a\u304c\u63b4\u3081\u306a\u3044\u3068\u3044\u3046\u4eba\u5411\u3051\u3002\uff08\u81ea\u5206\uff09\n\n# Adding Numbers\n\n![add_num.gif](https://qiita-image-store.s3.amazonaws.com/0/28232/3140593b-6d43-cf57-a259-3975d68e68dc.gif)\n\n```swift:NumbersViewController.swift\nObservable.combineLatest(number1.rx_text, number2.rx_text, number3.rx_text) { textValue1, textValue2, textValue3 -> Int in\n                return (Int(textValue1) ?? 0) + (Int(textValue2) ?? 0) + (Int(textValue3) ?? 0)\n            }\n            .map { $0.description }\n            .bindTo(result.rx_text)\n            .addDisposableTo(disposeBag)\n```\n\n\u5404UITextField\u306e\u5024\u304c\u5909\u66f4\u3055\u308c\u308b\u5ea6\u306b\u3001 `combineLatest` \u306e\u4e2d\u30673\u3064\u306eUITextField\u306b\u5165\u529b\u3055\u308c\u3066\u3044\u308b\u30c6\u30ad\u30b9\u30c8\u3092Int\u306b\u5909\u63db\u3057\u3001\u8db3\u3057\u7b97\u3057\u3066\u3001return\u3002\u305d\u306e\u7d50\u679c\u3092 `map` \u3067 String \u3092\u3068\u3057\u3066\u8fd4\u3057\u3066\u3001\u7d50\u679c\u8868\u793a\u7528\u306eUILabel\u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u3060\u3051\u3067\u3001UILabel\u304c\u66f4\u65b0\u3055\u308c\u308b\uff01\n\n# Simple Validation\n\n![validation.gif](https://qiita-image-store.s3.amazonaws.com/0/28232/a8b7a179-cfa8-e164-5042-8cc07e95dadc.gif)\n\n```swift:SimpleValidationViewController.swift\nlet usernameValid = usernameOutlet.rx_text\n    .map { $0.characters.count >= minimalUsernameLength }\n    .shareReplay(1) // (1\n\nlet passwordValid = passwordOutlet.rx_text\n    .map { $0.characters.count >= minimalPasswordLength }\n    .shareReplay(1)\n\nlet everythingValid = Observable.combineLatest(usernameValid, passwordValid) { $0 && $1 }\n    .shareReplay(1)\n\nusernameValid\n    // \u30d1\u30b9\u30ef\u30fc\u30c9\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u691c\u8a3c\u304c\u771f\u306e\u6642\u306b, \u6709\u52b9\u306b\u306a\u308b\n    .bindTo(passwordOutlet.rx_enabled)\n    .addDisposableTo(disposeBag)\n\nusernameValid\n    // \u30e6\u30fc\u30b6\u30fc\u540d\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u691c\u8a3c\u304c\u771f\u306e\u6642\u306b, \u975e\u8868\u793a\u306b\u306a\u308b\n    .bindTo(usernameValidOutlet.rx_hidden)\n    .addDisposableTo(disposeBag)\n\npasswordValid\n    // \u30d1\u30b9\u30ef\u30fc\u30c9\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u691c\u8a3c\u304c\u771f\u306e\u6642\u306b, \u975e\u8868\u793a\u306b\u306a\u308b\n    .bindTo(passwordValidOutlet.rx_hidden)\n    .addDisposableTo(disposeBag)\n\neverythingValid\n    // usernameValid \u3068 passwordValid \u304c\u5171\u306b\u771f\u306e\u5834\u5408\u306b `doSomethingOutlet(UIButton)` \u304c\u6709\u52b9\u306b\u306a\u308b\n    .bindTo(doSomethingOutlet.rx_enabled)\n    .addDisposableTo(disposeBag)\n\ndoSomethingOutlet.rx_tap\n    // \u30bf\u30c3\u30d7\u3055\u308c\u305f\u969b\u306b\u3001`showAlert()`\u3092\u547c\u3076\n    .subscribeNext { [weak self] in self?.showAlert() }\n    .addDisposableTo(disposeBag)\n```\n\n\u691c\u8a3c\u30ed\u30b8\u30c3\u30af\u3092\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u7528\u306b\u5b9a\u7fa9\u3057\u3001\u305d\u308c\u3089\u3092\u5404\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306bbind\u3002\u691c\u8a3c\u7d50\u679c\u306b\u3088\u308a\u3001UIButton\u3092\u6709\u52b9\u306b\u3057\u305f\u308a\u3001\u6ce8\u610f\u66f8\u304d\u306eUILabel\u3092\u975e\u8868\u793a\u306b\u3057\u305f\u308a\u3057\u3066\u3044\u308b\u3002\n\n`shareReplay(1)`\u3068\u3044\u3046\u306e\u306f\u3001\u3053\u308c\u304c\u306a\u3044\u3068\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u8907\u6570\u751f\u6210\u3055\u308c\u3001`map`\u306e\u4e2d\u304cUITextField\u306e\u5024\u3092\u5909\u66f4\u3059\u308b\u5ea6\u306b\u3001\u8907\u6570\u56de\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3046\u3002\u8a73\u3057\u304f\u306f[\u53c2\u8003\u3067\u3042\u3052\u305f\u8a18\u4e8b](http://qiita.com/kazu0620/items/bde4a65e82a10bd33f88)\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n# Geolocation Subscription\n\n```swift:GeolocationViewController.swift\nlet geolocationService = GeolocationService.instance\ngeolocationService.authorized\n    .drive(noGeolocationView.rx_driveAuthorization)\n    .addDisposableTo(disposeBag)\n\ngeolocationService.location\n    .drive(label.rx_driveCoordinates)\n    .addDisposableTo(disposeBag)\n\nbutton.rx_tap\n    .bindNext { [weak self] in\n        self?.openAppPreferences()\n    }\n    .addDisposableTo(disposeBag)\n\nbutton2.rx_tap\n    .bindNext { [weak self] in\n        self?.openAppPreferences()\n    }\n    .addDisposableTo(disposeBag)\n```\n\n`GeolocationService` \u3068\u3044\u3046\u306e\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u306b\u95a2\u3059\u308b\u4fbf\u5229\u30af\u30e9\u30b9\u3002 `.authorized` \u3067\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u306e\u8a31\u53ef\u3092\u53d6\u5f97\u3057\u3066\u3044\u308b\u304b\u5224\u5b9a\u3057\u3001Bool\u3067\u8fd4\u3057\u3066\u304f\u308c\u308b\u3002\u307e\u305f\u3001`.location`\u3067\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u304c\u5909\u66f4\u3055\u308c\u305f\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u3066\u3001CLLocationCoordinate2D\u3067\u8fd4\u3057\u3066\u304f\u308c\u308b\u3002\n\n`bindTo` \u306e\u4ee3\u308f\u308a\u306b `drive` \u3092\u4f7f\u3044\u3001\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3067\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u30a8\u30e9\u30fc\u3082\u5410\u304d\u51fa\u3055\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u3002Drive\u306b\u95a2\u3057\u3066\u306f\u3001\u672c\u5bb6\u306e [Unit](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Units.md#driver\n) \u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3002\n\n```swift:GeolocationViewController.swift\nprivate extension UILabel {\n    var rx_driveCoordinates: AnyObserver<CLLocationCoordinate2D> {\n        return UIBindingObserver(UIElement: self) { label, location in\n            label.text = \"Lat: \\(location.latitude)\\nLon: \\(location.longitude)\"\n        }.asObserver()\n    }\n}\n\nprivate extension UIView {\n    var rx_driveAuthorization: AnyObserver<Bool> {\n        return UIBindingObserver(UIElement: self) { view, authorized in\n            if authorized {\n                view.hidden = true\n                view.superview?.sendSubviewToBack(view)\n            }\n            else {\n                view.hidden = false\n                view.superview?.bringSubviewToFront(view)\n            }\n        }.asObserver()\n    }\n}\n```\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u30ab\u30b9\u30bf\u30e0Observer( `rx_***` )\u306e\u4f5c\u6210\u4ed5\u65b9\u3092\u5b66\u3079\u308b\u3002 `rx_driveAuthorization` \u3067\u306f\u3001Bool\u3092\u6e21\u3059\u3088\u3046\u306b\u3057\u3066\u3001\u305d\u306e\u5024\u306b\u3088\u308a\u3001UIView\u306ehidden\u3092\u5207\u308a\u66ff\u3048\u305f\u308a\u3001z\u8ef8\u3092\u5909\u66f4\u3057\u3066\u3044\u308b\u3002 `rx_driveCoordinates` \u306e\u65b9\u306f\u3001CLLocationCoordinate2D \u3092\u7d50\u3073\u3064\u3051\u305d\u306e\u5024\u306b\u3088\u308a\u3001UILabel\u306etext\u3092\u5909\u66f4\u3057\u3066\u3044\u308b\u3002\n\n# GitHub Signup - Vanilla Observables\n\n![github.gif](https://qiita-image-store.s3.amazonaws.com/0/28232/cc660030-094c-a905-82f4-894089ec0b1b.gif)\n\n```swift:GitHubSignupViewController1.swift\nlet viewModel = GithubSignupViewModel1(\n    input: (\n        username: usernameOutlet.rx_text.asObservable(),\n        password: passwordOutlet.rx_text.asObservable(),\n        repeatedPassword: repeatedPasswordOutlet.rx_text.asObservable(),\n        loginTaps: signupOutlet.rx_tap.asObservable()\n    ),\n    dependency: (\n        API: GitHubDefaultAPI.sharedAPI,\n        validationService: GitHubDefaultValidationService.sharedValidationService,\n        wireframe: DefaultWireframe.sharedInstance\n    )\n)\n\n// bind results to  {\nviewModel.signupEnabled\n    .subscribeNext { [weak self] valid  in\n        self?.signupOutlet.enabled = valid\n        self?.signupOutlet.alpha = valid ? 1.0 : 0.5\n    }\n    .addDisposableTo(disposeBag)\n\nviewModel.validatedUsername\n    .bindTo(usernameValidationOutlet.ex_validationResult)\n    .addDisposableTo(disposeBag)\n\nviewModel.validatedPassword\n    .bindTo(passwordValidationOutlet.ex_validationResult)\n    .addDisposableTo(disposeBag)\n\nviewModel.validatedPasswordRepeated\n    .bindTo(repeatedPasswordValidationOutlet.ex_validationResult)\n    .addDisposableTo(disposeBag)\n\nviewModel.signingIn\n    .bindTo(signingUpOulet.rx_animating)\n    .addDisposableTo(disposeBag)\n\nviewModel.signedIn\n    .subscribeNext { signedIn in\n        print(\"User signed in \\(signedIn)\")\n    }\n    .addDisposableTo(disposeBag)\n//}\n```\n\nMVVM\u30d1\u30bf\u30fc\u30f3\u306e\u5b9f\u88c5\u4f8b\u3002\u691c\u8a3c\u30ed\u30b8\u30c3\u30af\u306a\u3069\u306f\u3001`GithubSignupViewModel1`\u306e\u4e2d\u306b\u5165\u3063\u3066\u3044\u308b\u3002`GithubSignupViewModel1`\u3092\u521d\u671f\u5316\u3059\u308b\u969b\u306b\u3001Observe\u3059\u308bUITextField\u3084\u691c\u8a3c\u3059\u308b\u305f\u3081\u306e\u30b5\u30fc\u30d3\u30b9\u3092\u6e21\u3057\u3066\u3044\u308b\u3002ViewController\u306e\u4e2d\u3067\u306f\u3001`ValidationResult`\u306b\u3088\u3063\u3066\u30c6\u30ad\u30b9\u30c8\u3084\u30c6\u30ad\u30b9\u30c8\u8272\u3092\u5909\u3048\u308b\u3068\u3046\u3053\u3068\u3092bind\u3057\u3066\u3044\u308b\u3060\u3051\u3002\n\n# GitHub Signup - Using Driver\n\n```swift:GithubSignupViewModel2.swift\nclass GithubSignupViewModel2 {\n    // outputs {\n\n    //\n    let validatedUsername: Driver<ValidationResult>\n    let validatedPassword: Driver<ValidationResult>\n    let validatedPasswordRepeated: Driver<ValidationResult>\n\n    // Is signup button enabled\n    let signupEnabled: Driver<Bool>\n\n    // Has user signed in\n    let signedIn: Driver<Bool>\n\n    // Is signing process in progress\n    let signingIn: Driver<Bool>\n\n    // }\n\n    init(\n        input: (\n            username: Driver<String>,\n            password: Driver<String>,\n            repeatedPassword: Driver<String>,\n            loginTaps: Driver<Void>\n        ),\n        dependency: (\n            API: GitHubAPI,\n            validationService: GitHubValidationService,\n            wireframe: Wireframe\n        )\n    ) {\n        let API = dependency.API\n        let validationService = dependency.validationService\n        let wireframe = dependency.wireframe\n\n        validatedUsername = input.username\n            .flatMapLatest { username in\n                return validationService.validateUsername(username)\n                    .asDriver(onErrorJustReturn: .Failed(message: \"Error contacting server\"))\n            }\n\n        validatedPassword = input.password\n            .map { password in\n                return validationService.validatePassword(password)\n            }\n\n        validatedPasswordRepeated = Driver.combineLatest(input.password, input.repeatedPassword, resultSelector: validationService.validateRepeatedPassword)\n\n        let signingIn = ActivityIndicator()\n        self.signingIn = signingIn.asDriver()\n\n        let usernameAndPassword = Driver.combineLatest(input.username, input.password) { ($0, $1) }\n\n        signedIn = input.loginTaps.withLatestFrom(usernameAndPassword)\n            .flatMapLatest { (username, password) in\n                return API.signup(username, password: password)\n                    .trackActivity(signingIn)\n                    .asDriver(onErrorJustReturn: false)\n            }\n            .flatMapLatest { loggedIn -> Driver<Bool> in\n                let message = loggedIn ? \"Mock: Signed in to GitHub.\" : \"Mock: Sign in to GitHub failed\"\n                return wireframe.promptFor(message, cancelAction: \"OK\", actions: [])\n                    // propagate original value\n                    .map { _ in\n                        loggedIn\n                    }\n                    .asDriver(onErrorJustReturn: false)\n            }\n\n\n        signupEnabled = Driver.combineLatest(\n            validatedUsername,\n            validatedPassword,\n            validatedPasswordRepeated,\n            signingIn\n        )   { username, password, repeatPassword, signingIn in\n                username.isValid &&\n                password.isValid &&\n                repeatPassword.isValid &&\n                !signingIn\n            }\n            .distinctUntilChanged()\n    }\n}\n```\n\n`GitHub Signup - Vanilla Observables`\u306eDriver\u3067\u5b9f\u88c5\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3002ViewController\u306f\u57fa\u672c\u540c\u3058\u306a\u306e\u3067\uff08driver\u306e\u7b87\u6240\u4ee5\u5916\uff09\u3001ViewModel\u306e\u4e2d\u3092\u898b\u3066\u307f\u308b\u3002\n\n`GithubSignupViewModel2`\u3067\u306f\u3001\u5927\u304d\u304f\u5206\u3051\u3066input\u3068dependency\u3068\u3044\u3046\u5f15\u6570\u3092\u6e21\u3057\u3066\u521d\u671f\u5316\u3059\u308b\u3002input\u306f\u3001Observe\u3059\u308bUITextField\u7b49\u3002dependency\u3067\u306f\u3001API\u3068\u306e\u901a\u4fe1\u30fb\u691c\u8a3c\u6a5f\u80fd\u30fb\u30dd\u30c3\u30d7\u30a2\u30c3\u30d7\u3092\u8868\u793a\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u7fa4\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3046\u3044\u3063\u305f\u30b5\u30fc\u30d3\u30b9\u7fa4\u3092\u30ad\u30ec\u30a4\u306b\u5206\u5272\u3057\u3066\u3001\u4fdd\u5b88\u6027\u306e\u9ad8\u3044\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n# API wrappers\n\n```swift:APIWrappersViewController.swift\noverride func viewDidLoad() {\n  super.viewDidLoad()\n\n  datePicker.date = NSDate(timeIntervalSince1970: 0)\n\n  // MARK: UIBarButtonItem\n\n  bbitem.rx_tap\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UIBarButtonItem Tapped\")\n      }\n      .addDisposableTo(disposeBag)\n\n  // MARK: UISegmentedControl\n\n  // also test two way binding\n  let segmentedValue = Variable(0)\n  segmentedControl.rx_value <-> segmentedValue\n\n  segmentedValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UISegmentedControl value \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UISwitch\n\n  // also test two way binding\n  let switchValue = Variable(true)\n  switcher.rx_value <-> switchValue\n\n  switchValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UISwitch value \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n  // MARK: UIActivityIndicatorView\n\n  switcher.rx_value\n      .bindTo(activityIndicator.rx_animating)\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UIButton\n\n  button.rx_tap\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UIButton Tapped\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UISlider\n\n  // also test two way binding\n  let sliderValue = Variable<Float>(1.0)\n  slider.rx_value <-> sliderValue\n\n  sliderValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UISlider value \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UIDatePicker\n\n  // also test two way binding\n  let dateValue = Variable(NSDate(timeIntervalSince1970: 0))\n  datePicker.rx_date <-> dateValue\n\n\n  dateValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UIDatePicker date \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UITextField\n\n  // also test two way binding\n  let textValue = Variable(\"\")\n  textField <-> textValue\n\n  textValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UITextField text \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UIGestureRecognizer\n\n  mypan.rx_event\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UIGestureRecognizer event \\(x.state)\")\n      }\n      .addDisposableTo(disposeBag)\n\n\n  // MARK: UITextView\n\n  // also test two way binding\n  let textViewValue = Variable(\"\")\n  textView <-> textViewValue\n\n  textViewValue.asObservable()\n      .subscribeNext { [weak self] x in\n          self?.debug(\"UITextView text \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n  // MARK: CLLocationManager\n\n  #if !RX_NO_MODULE\n  manager.requestWhenInUseAuthorization()\n  #endif\n\n  manager.rx_didUpdateLocations\n      .subscribeNext { x in\n          print(\"rx_didUpdateLocations \\(x)\")\n      }\n      .addDisposableTo(disposeBag)\n\n  _ = manager.rx_didFailWithError\n      .subscribeNext { x in\n          print(\"rx_didFailWithError \\(x)\")\n      }\n\n  manager.rx_didChangeAuthorizationStatus\n      .subscribeNext { status in\n          print(\"Authorization status \\(status)\")\n      }\n      .addDisposableTo(disposeBag)\n\n  manager.startUpdatingLocation()\n}\n```\n\u3053\u306e\u4f8b\u3067\u306f\u3001`UIBarButtonItem`\u30fb`UISegmentedControl`\u30fb`UIDatePicker`\u30fb`UISwitch`\u30fb`UIActivityIndicatorView`\u30fb`UIButton`\u30fb`UISlider`\u30fb`UIDatePicker`\u30fb`UITextField`\u30fb`UIGestureRecognizer`\u30fb`UITextView`\u30fb`CLLocationManager` \u3068\u3044\u3063\u305f\u69d8\u3005\u306a\u30d1\u30fc\u30c4\u306b\u5bfe\u3057\u3066RxSwift\u306e\u4f7f\u3044\u65b9\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306e\u30dd\u30a4\u30f3\u30c8\u306f\u3001RxSwift\u72ec\u81ea\u306e\u6a5f\u80fd\u3067\u3042\u308b[Variable](http://qiita.com/k5n/items/17f845a75cce6b737d1e#variable)\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001`BehaviorSubject`\u3068\u3044\u3046\u3082\u306e\u306e\u8584\u3044\u30e9\u30c3\u30d1\u30fc\u306e\u3088\u3046\u3067\u3059\u3002`BehaviorSubject`\u306f\u3001subscribe\u3057\u305f\u9014\u7aef\u3001\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u4fe1\u3057\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4e0a\u8a18\u306e\u4f8b\u306e`Variable`\u3067\u306f\u3001\u5404\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306b\u5bfe\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u521d\u671f\u5024\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002`UITextView`\u306b\u306f\u3001`let textViewValue = Variable(\"\")`\u3068\u3044\u3063\u305f\u611f\u3058\u3067\u3059\u3002\n\n\u307e\u305f\u3001`textView <-> textViewValue`\u3068\u3057\u3066\u3001\u53cc\u65b9\u5411\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\uff1f\u3068\u3044\u3046\u3082\u306e\u3092\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001`textViewValue.value = \"hogehoge\"`\u3068\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001UITextView\u306e\u8868\u793a\u3082\u5909\u66f4\u3055\u308c\u307e\u3059\u3002\n\n# Calculator\n\n![cal.gif](https://qiita-image-store.s3.amazonaws.com/0/28232/33f6aa44-49d8-ad88-43f2-57d80bad7703.gif)\n\n```swift:CalculatorViewController.swift\noverride func viewDidLoad() {\nlet commands:[Observable<Action>] = [\n    allClearButton.rx_tap.map { _ in .Clear },\n\n    changeSignButton.rx_tap.map { _ in .ChangeSign },\n    percentButton.rx_tap.map { _ in .Percent },\n\n    divideButton.rx_tap.map { _ in .Operation(.Division) },\n    multiplyButton.rx_tap.map { _ in .Operation(.Multiplication) },\n    minusButton.rx_tap.map { _ in .Operation(.Subtraction) },\n    plusButton.rx_tap.map { _ in .Operation(.Addition) },\n\n    equalButton.rx_tap.map { _ in .Equal },\n\n    dotButton.rx_tap.map { _ in .AddDot },\n\n    zeroButton.rx_tap.map { _ in .AddNumber(\"0\") },\n    oneButton.rx_tap.map { _ in .AddNumber(\"1\") },\n    twoButton.rx_tap.map { _ in .AddNumber(\"2\") },\n    threeButton.rx_tap.map { _ in .AddNumber(\"3\") },\n    fourButton.rx_tap.map { _ in .AddNumber(\"4\") },\n    fiveButton.rx_tap.map { _ in .AddNumber(\"5\") },\n    sixButton.rx_tap.map { _ in .AddNumber(\"6\") },\n    sevenButton.rx_tap.map { _ in .AddNumber(\"7\") },\n    eightButton.rx_tap.map { _ in .AddNumber(\"8\") },\n    nineButton.rx_tap.map { _ in .AddNumber(\"9\") }\n]\n\ncommands\n    .toObservable()\n    .merge()\n    .scan(CalculatorState.CLEAR_STATE) { a, x in\n        // \u3053\u3053\u3067\u3001CalculatorState\u306b\u5909\u63db\u3057\u3066\u3044\u308b\n        return a.tranformState(x)\n    }\n    .debug(\"debugging\")\n    .subscribeNext { [weak self] calState in\n        self?.resultLabel.text = self?.prettyFormat(calState.inScreen)\n        switch calState.action {\n        case .Operation(let operation):\n            switch operation {\n            case .Addition:\n                self?.lastSignLabel.text = \"+\"\n            case .Subtraction:\n                self?.lastSignLabel.text = \"-\"\n            case .Multiplication:\n                self?.lastSignLabel.text = \"x\"\n            case .Division:\n                self?.lastSignLabel.text = \"/\"\n            }\n        default:\n            self?.lastSignLabel.text = \"\"\n        }\n    }\n    .addDisposableTo(disposeBag)\n}\n```\n\n\u3053\u306e\u8a08\u7b97\u6a5f\u306e\u4f8b\u3067\u306f\u3001`Observable<Action>`\u306e\u914d\u5217\u3092`merge`\u3057\u3066\u30011\u3064\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u6271\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u3001`scan`\u3068\u3044\u3046\u524d\u306e\u5024\u3092\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u6271\u3046\u3082\u306e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002Accumulator\u3068\u3057\u3066\u3001`CalculatorState.CLEAR_STATE`\u304b\u3089\u59cb\u307e\u308a\u3001\u8a08\u7b97\u6a5f\u306e\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u5ea6\u306b\u3053\u308c\u3092\u66f4\u65b0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u307e\u305f\u3001`debug`\u3092\u306f\u3055\u307f\u90fd\u5ea6\u7d50\u679c\u3092\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3002\u6700\u5f8c\u306b\u3001subscribeNext\u306e\u4e2d\u3067\u3001\u8a08\u7b97\u6a5f\u4e0a\u306eUILabel\u3092\u66f4\u65b0\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u8a08\u7b97\u6a5f\u3092ViewController\u306e\u4e2d\u3067\u306f\u3001\u7279\u306b\u7d50\u679c\u7b49\u3092\u4fdd\u6301\u305b\u305a\u3068\u3082\u307b\u307c\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u5b9f\u73fe\u3057\u3066\u3057\u307e\u3046\u306e\u306f\u3059\u3054\u3044\u3067\u3059\u306d\u3002\n\n# \u53c2\u8003\n\nRxSwift/Units.md at master \u00b7 ReactiveX/RxSwift\nhttps://github.com/ReactiveX/RxSwift/blob/master/Documentation/Units.md#driver\n\nRxSwift/Why.md at master \u00b7 ReactiveX/RxSwift\nhttps://github.com/ReactiveX/RxSwift/blob/master/Documentation/Why.md\n\nRxSwift/GettingStarted.md at master \u00b7 ReactiveX/RxSwift\nhttps://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md\n\n[RxSwift] shareReplay\u3092\u3061\u3083\u3093\u3068\u66f8\u3044\u3066\u304a\u884c\u5100\u826f\u304f\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8cfc\u8aad\u3057\u3088\u3046\nhttp://qiita.com/kazu0620/items/bde4a65e82a10bd33f88\n\n\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc\u30d1\u30bf\u30fc\u30f3\u304b\u3089\u59cb\u3081\u308bRxSwift\u5165\u9580\nhttp://qiita.com/k5n/items/17f845a75cce6b737d1e#variable\n\n", "tags": ["RxSwift", "Swift", "iOS", "ReactiveX"]}