{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nParsing Expression Grammer\u30d1\u30fc\u30b5\u30fc\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u306eC++\u5b9f\u88c5\u3068\u8a00\u3048\u3070\u3001boost::spirit \u304c\u6709\u540d\u3002\n\u3057\u304b\u3057\u3001\u500b\u4eba\u7684\u306b\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u3059\u304e\u3066\u4f7f\u3044\u8f9b\u3044\u3002\nPEG\u306f\u5b9a\u7fa9\u304c\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u306e\u3067\u7c21\u5358\u306b\u66f8\u3051\u308b\u306f\u305a\u3060\u601d\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u308b\u3002\n\u3068\u308a\u3042\u3048\u305aPEG\u3068\u5c5e\u6027\u6587\u6cd5\u3001\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30a2\u30af\u30b7\u30e7\u30f3\u304f\u3089\u3044\u306f\u5b9f\u88c5\u3059\u308b\u3002\n\nPEG\nPEG\u306b\u306f\n\u30fb\u7d42\u7aef\u6587\u5b57\n\u30fb\u975e\u7d42\u7aef\u6587\u5b57\n\u30fb\u7a7a\u6587\u5b57\n\u30fb\u5206\u6790\u8868\u73fe\n\u30fb\u5206\u6790\u898f\u5247\n\u304c\u5fc5\u8981\u3002\n\u7d42\u7aef\u6587\u5b57\u3001\u975e\u7d42\u7aef\u6587\u5b57\u3001\u7a7a\u6587\u5b57\u306f\u5206\u6790\u8868\u73fe\u3002\nS >> T, S | T, *S, +S, -S, &S, !S\u7b49\u306e\u6587\u5b57\u5217\u3082\u5206\u6790\u8868\u73fe\u3002\u305f\u3060\u3057\u3001S,T\u306f\u5206\u6790\u8868\u73fe\n\u3053\u308c\u3089\u306e\u5206\u6790\u8868\u73fe\u306f\u3042\u308b\u6c7a\u307e\u3063\u305f\u5206\u6790\u898f\u5247\u3092\u6301\u3063\u3066\u3044\u3066\u3001\nsequence, alternative, zero or more, one or more, zero or one, and predicate, not predicate\u7b49\u3068\u305d\u308c\u305e\u308c\u547c\u3070\u308c\u308b\u3002\n\u5206\u6790\u8868\u73fe\u306f\u4ee5\u4e0a\u304b\u3089\u518d\u5e30\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u3002\nPEG\u3067\u306f\u3042\u308b\u975e\u7d42\u7aef\u6587\u5b57S\u306b\u306f\u5fc5\u305a\u5bfe\u5fdc\u3059\u308bS\u2192expression\u3068\u3044\u3046\u5f62\u306e\u5206\u6790\u898f\u5247\u304c\u305f\u30601\u3064\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002\n\u5206\u6790\u898f\u5247\u306f\u5fc5\u305aS\u2192expression\u3068\u3044\u3046\u5f62\u3092\u6301\u3064\u3002\n\u306a\u306e\u3067\u3001\u5206\u6790\u898f\u5247\u306b\u306f\u5fc5\u305a\u305f\u30601\u3064\u306e\u975e\u7d42\u7aef\u6587\u5b57\u304c\u5bfe\u5fdc\u3057\u3066\u3001\u305d\u306e\u975e\u7d42\u7aef\u6587\u5b57\u306b\u306f\u305f\u30601\u3064\u306e\u5206\u6790\u8868\u73fe\u304c\u5bfe\u5fdc\u3059\u308b\u3002\n\u3053\u308c\u3092\u4e00\u3064\u306e\u30d1\u30fc\u30b5\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8868\u73fe\u3059\u308c\u3070\u826f\u3044\u3002\n\u30d1\u30fc\u30b9\u95a2\u6570\u306fbool\u5024\u3068\u540c\u6642\u306b\u3001\u30d1\u30fc\u30b9\u3067\u6d88\u8cbb\u3055\u308c\u306a\u304b\u3063\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3059\u69d8\u306b\u3059\u308b\u3002\n\u6587\u5b57\u5217\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u306ebegin,end\u306e\u7d44\u3067\u8868\u73fe\u3059\u308b\u4e8b\u306b\u3057\u3088\u3046\u3002\n\u30d1\u30fc\u30b9\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3092\u683c\u7d0d\u3059\u308b\u30b3\u30f3\u30c6\u30ca\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3002\n\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u554f\u984c\u304b\u3089\u7570\u306a\u308b\u6587\u5b57\u5217\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u4e8b\u304c\u4e88\u60f3\u3055\u308c\u308b\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7a2e\u985e\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5316\u3059\u308b\u3002\ntemplate<typename Iterator> struct parse_result_container{\n  using iterator = Iterator;\n  bool boolean;\n  iterator begin;\n  iterator end;\n  parse_result_container(bool boolean_, iterator begin_, iterator end_) \n    : boolean(boolean_), begin(begin_), end(end_){};\n};\n\n\n\u7d42\u7aef\u6587\u5b57\ntemplate<typename CharType, typename Iterator> struct Terminals{\n  using iterator = Iterator;\n  using parse_result_type = parse_result_container<iterator>;\n\u3000using my_type = Terminals<CharType, Iterator>\n\n  const CharType char_value;\n\n  parse_reslt_type parse(iterator& begin, iterator& end) const{\n    if(begin != end && char_value == *begin){return parse_result_type(true,begin+1,end);}\n    return parse_result_type(false,begin,end)\n  }\n};\n\n\u307e\u305a\u306f\u3001\u7d42\u7aef\u6587\u5b57\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\u6b63\u78ba\u306b\u306f\u3001\u7d42\u7aef\u6587\u5b57'v'\u30681\u5bfe1\u306b\u5bfe\u5fdc\u3059\u308b\u975e\u7d42\u7aef\u6587\u5b57Ch('v')\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u4e8b\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u30d1\u30fc\u30b9\u95a2\u6570\u306e\u610f\u5473\u306f\u5165\u529b\u6587\u5b57\u5217\u304c\u96f6\u3067\u306a\u304f\u3001\u5148\u982d\u304c\u7d42\u7aef\u6587\u5b57\u306b\u4e00\u81f4\u3059\u308b\u306a\u3089true\u3092\u8fd4\u3057\u3066\u3001\u4e00\u6587\u5b57\u6d88\u8cbb\u3059\u308b\u3002\n\u4e00\u81f4\u3057\u306a\u3051\u308c\u3070\u3001false\u3092\u8fd4\u3057\u3066\u3001\u5165\u529b\u6587\u5b57\u5217\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\n\u30e1\u30f3\u30d0\u30fc\u578b\u3068\u3057\u3066iterator\u3092\u6301\u3064\u304c\u3001\u3053\u308c\u306f\u5f8c\u306bExpression Template\u3092\u4f7f\u3063\u305f\u6642\u306b\u3001\u4e0a\u306e\u65b9\u306e\u6728\u306b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u578b\u3092\u6e21\u3059\u305f\u3081\u306b\u4f7f\u3046\u3002\nmy_type\u81ea\u5206\u306e\u578b\u305d\u306e\u3082\u306e\u3060\u304c\u3001\u5f8c\u3067\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u6642\u306eSFINA\u7528\u306b\u4f7f\u3046\u3002\n\u30c6\u30b9\u30c8\nTerminals<std::string,std::string::iterator> ch('a');\nstd::string input(\"aiueo\");\nstd::string input2(\"iaueo\");\nauto res = ch.parse(input.begin(),input.end());\nauto res2 = ch.parse(input2.begin(),input2.end());\n\n\nExpression template\ntemplate<typename L, typename OpTag, typename R> struct Expression{\n  using iterator = typename  R::iterator;\n  using parse_result_type = typename R::parse_result_type;\n  using my_type = Expression<L,OpTag,R>;\n\n  const L& l;\n  const R& r;\n\n  Expression(const L& l_, const R& r_) : l(l_), r(r_){};\n  parse_result_type parse(iterator begin, iterator end) const{return OpTag::parse(l,r,begin,end);}\n};\n\ntemplate<typename OpTag, typename R> struct Expression<unused,OpTag,R>{\n  using iterator = typename  R::iterator;\n  using parse_result_type = typename R::parse_result_type;\n  using my_type = Expression<L,OpTag,R>;\n\n  const R& r;\n\n  Expression(const R& r_) : r(r_){};\n  parse_result_type parse(iterator begin, iterator end) const{return OpTag::parse(l,r,begin,end);}\n};\n\n\u5206\u6790\u898f\u5247\u306f\u69cb\u6587\u6728\u306e\u4e0a\u306e\u65b9\u306e\u30d1\u30fc\u30b9\u95a2\u6570\u304b\u3089\u9806\u306b\u8d77\u52d5\u3055\u308c\u308b\u3002\n\u3053\u308c\u306f\u3001\u901a\u5e38\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3068\u7570\u306a\u308b\u9806\u756a\u306a\u306e\u3067\u3001Expression template\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\nExpression template\u3092\u7528\u3044\u308c\u3070\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3082\u5bb9\u6613\u306b\u306a\u308b\u306e\u3067\u4e00\u77f3\u4e8c\u9ce5\u3067\u3042\u308b\u3002\nExpression template\u3068\u3044\u3063\u3066\u3082\u5927\u3057\u3066\u96e3\u3057\u304f\u306f\u306a\u3044\u3002\u4e0a\u306b\u3001\u4e8c\u9805\u6f14\u7b97\u3068\u4e00\u9805\u6f14\u7b97\u7528\u306eexpression\u306e\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308b\u3002\n\u6b21\u306b\u3001\u4f8b\u3048\u3070L >> R\u304b\u3089expression\u3092\u69cb\u6210\u3059\u308b\u305f\u3081\u306e\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3059\u308b\u3002\ntemplate<typename L, typename R> Expression<L,sequence<L,R>, R> operator>> (const L& l, const R& r){\n  return Expression<L,sequence<L,R>,R>(l,r);\n};\n\n\u3053\u306e\u69d8\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u3051\u3070\u3001L >> R\u3068\u3044\u3046\u5f0f\u304c\u8a55\u4fa1\u3055\u308c\u308b\u3068\u3001expression\u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\u3082\u3061\u308d\u3093\u3001\u307e\u3068\u3082\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u306a\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306bexpression\u306f\u6d88\u3055\u308c\u3066\u5c55\u958b\u3055\u308c\u305f\u30d1\u30fc\u30b9\u95a2\u6570\u306e\u307f\u304c\u6b8b\u308b\u306f\u305a\u3060\u3002\n\u3068\u3053\u308d\u3067\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u5c11\u3005\u554f\u984c\u6709\u308b\u3002\n\u5168\u4f53\u3092\u3042\u308b\u540d\u524d\u7a7a\u9593\u306b\u7a81\u3063\u8fbc\u3093\u3067\u3082\u3001\u305d\u306e\u540d\u524d\u7a7a\u9593\u5185\u306e\u3042\u3089\u3086\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u305f\u3044\u3057\u3066\u6f14\u7b97\u5b50\u547c\u3073\u51fa\u3057\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u3002\n\u4eca\u306e\u5834\u5408\u3001\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306fExpression\u3068\u7d42\u7aef\u6587\u5b57\u306b\u5bfe\u3057\u3066\u306e\u307f\u5b9a\u7fa9\u3067\u304d\u308c\u3070\u3088\u3044\u306e\u3067\u3001\u305d\u306e\u305f\u3081\u306bmy_type\u30bf\u30b0\u3092\u4f7f\u3046\u3002\ntemplate<typename L, typename R> Expression<typename L::my_type,sequence<L,R>, typename R::my_type>\n  operator>> (const L& l, const R& r){\n  return Expression<L,sequence<L,R>,R>(l,r);\n};\n\n\u5b9a\u7fa9\u3055\u308c\u305f\u540d\u524d\u7a7a\u9593\u5185\u3067my_type\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u3001SFINAE\u306b\u3088\u3063\u3066\u6f14\u7b97\u5b50\u306e\u547c\u3073\u51fa\u3057\u306f\u6b63\u3057\u304f\u5236\u9650\u3055\u308c\u308b\u3002\n\u6e96\u5099\u306f\u6574\u3063\u305f\u3002\u5f8c\u306f\u5b9a\u7fa9\u306b\u5f93\u3063\u3066\u3001\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n\n\u30b3\u30fc\u30c9\ngithub\u306b\u4e0a\u3052\u305f\u3002\nPEG\u306e\u6f14\u7b97\u5b50\u3068\u7d42\u7aef\u6587\u5b57\u306f\u5168\u3066\u5b9f\u88c5\u3057\u3066\u3042\u308b\u3002\n\u30d0\u30b0\u304c\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u307b\u3057\u3044\u3002\n\n\u6b21\u56de\n\u5c5e\u6027\u6587\u6cd5\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n\u8ffd\u8a18\nboost\u306f\u5049\u5927\u3060\u3063\u305f\u3002\n#\u6982\u8981\n[Parsing Expression Grammer](http://qiita.com/kktk-KO/items/b80962ba483cc69a331b)\u30d1\u30fc\u30b5\u30fc\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc\u306eC++\u5b9f\u88c5\u3068\u8a00\u3048\u3070\u3001boost::spirit \u304c\u6709\u540d\u3002\n\u3057\u304b\u3057\u3001\u500b\u4eba\u7684\u306b\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u3059\u304e\u3066\u4f7f\u3044\u8f9b\u3044\u3002\n\nPEG\u306f\u5b9a\u7fa9\u304c\u30b3\u30f3\u30d1\u30af\u30c8\u306a\u306e\u3067\u7c21\u5358\u306b\u66f8\u3051\u308b\u306f\u305a\u3060\u601d\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u3067\u66f8\u3044\u3066\u307f\u308b\u3002\n\n\u3068\u308a\u3042\u3048\u305aPEG\u3068\u5c5e\u6027\u6587\u6cd5\u3001\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30a2\u30af\u30b7\u30e7\u30f3\u304f\u3089\u3044\u306f\u5b9f\u88c5\u3059\u308b\u3002\n\n#PEG\nPEG\u306b\u306f\n\u30fb\u7d42\u7aef\u6587\u5b57\n\u30fb\u975e\u7d42\u7aef\u6587\u5b57\n\u30fb\u7a7a\u6587\u5b57\n\u30fb\u5206\u6790\u8868\u73fe\n\u30fb\u5206\u6790\u898f\u5247\n\u304c\u5fc5\u8981\u3002\n\n\u7d42\u7aef\u6587\u5b57\u3001\u975e\u7d42\u7aef\u6587\u5b57\u3001\u7a7a\u6587\u5b57\u306f\u5206\u6790\u8868\u73fe\u3002\nS >> T, S | T, *S, +S, -S, &S, !S\u7b49\u306e\u6587\u5b57\u5217\u3082\u5206\u6790\u8868\u73fe\u3002\u305f\u3060\u3057\u3001S,T\u306f\u5206\u6790\u8868\u73fe\n\u3053\u308c\u3089\u306e\u5206\u6790\u8868\u73fe\u306f\u3042\u308b\u6c7a\u307e\u3063\u305f\u5206\u6790\u898f\u5247\u3092\u6301\u3063\u3066\u3044\u3066\u3001\nsequence, alternative, zero or more, one or more, zero or one, and predicate, not predicate\u7b49\u3068\u305d\u308c\u305e\u308c\u547c\u3070\u308c\u308b\u3002\n\u5206\u6790\u8868\u73fe\u306f\u4ee5\u4e0a\u304b\u3089\u518d\u5e30\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u3002\n\nPEG\u3067\u306f\u3042\u308b\u975e\u7d42\u7aef\u6587\u5b57S\u306b\u306f\u5fc5\u305a\u5bfe\u5fdc\u3059\u308bS\u2192expression\u3068\u3044\u3046\u5f62\u306e\u5206\u6790\u898f\u5247\u304c\u305f\u30601\u3064\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002\n\u5206\u6790\u898f\u5247\u306f\u5fc5\u305aS\u2192expression\u3068\u3044\u3046\u5f62\u3092\u6301\u3064\u3002\n\n\u306a\u306e\u3067\u3001\u5206\u6790\u898f\u5247\u306b\u306f\u5fc5\u305a\u305f\u30601\u3064\u306e\u975e\u7d42\u7aef\u6587\u5b57\u304c\u5bfe\u5fdc\u3057\u3066\u3001\u305d\u306e\u975e\u7d42\u7aef\u6587\u5b57\u306b\u306f\u305f\u30601\u3064\u306e\u5206\u6790\u8868\u73fe\u304c\u5bfe\u5fdc\u3059\u308b\u3002\n\u3053\u308c\u3092\u4e00\u3064\u306e\u30d1\u30fc\u30b5\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u8868\u73fe\u3059\u308c\u3070\u826f\u3044\u3002\n\n\u30d1\u30fc\u30b9\u95a2\u6570\u306fbool\u5024\u3068\u540c\u6642\u306b\u3001\u30d1\u30fc\u30b9\u3067\u6d88\u8cbb\u3055\u308c\u306a\u304b\u3063\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3059\u69d8\u306b\u3059\u308b\u3002\n\u6587\u5b57\u5217\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u306ebegin,end\u306e\u7d44\u3067\u8868\u73fe\u3059\u308b\u4e8b\u306b\u3057\u3088\u3046\u3002\n\u30d1\u30fc\u30b9\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3092\u683c\u7d0d\u3059\u308b\u30b3\u30f3\u30c6\u30ca\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3002\n\n\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u554f\u984c\u304b\u3089\u7570\u306a\u308b\u6587\u5b57\u5217\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u4e8b\u304c\u4e88\u60f3\u3055\u308c\u308b\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7a2e\u985e\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5316\u3059\u308b\u3002\n\n```cpp\ntemplate<typename Iterator> struct parse_result_container{\n  using iterator = Iterator;\n  bool boolean;\n  iterator begin;\n  iterator end;\n  parse_result_container(bool boolean_, iterator begin_, iterator end_) \n    : boolean(boolean_), begin(begin_), end(end_){};\n};\n```\n\n#\u7d42\u7aef\u6587\u5b57\n\n```cpp\ntemplate<typename CharType, typename Iterator> struct Terminals{\n  using iterator = Iterator;\n  using parse_result_type = parse_result_container<iterator>;\n\u3000using my_type = Terminals<CharType, Iterator>\n\n  const CharType char_value;\n \n  parse_reslt_type parse(iterator& begin, iterator& end) const{\n    if(begin != end && char_value == *begin){return parse_result_type(true,begin+1,end);}\n    return parse_result_type(false,begin,end)\n  }\n};\n```\n\n\u307e\u305a\u306f\u3001\u7d42\u7aef\u6587\u5b57\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\u6b63\u78ba\u306b\u306f\u3001\u7d42\u7aef\u6587\u5b57'v'\u30681\u5bfe1\u306b\u5bfe\u5fdc\u3059\u308b\u975e\u7d42\u7aef\u6587\u5b57Ch('v')\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u4e8b\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u30d1\u30fc\u30b9\u95a2\u6570\u306e\u610f\u5473\u306f\u5165\u529b\u6587\u5b57\u5217\u304c\u96f6\u3067\u306a\u304f\u3001\u5148\u982d\u304c\u7d42\u7aef\u6587\u5b57\u306b\u4e00\u81f4\u3059\u308b\u306a\u3089true\u3092\u8fd4\u3057\u3066\u3001\u4e00\u6587\u5b57\u6d88\u8cbb\u3059\u308b\u3002\n\u4e00\u81f4\u3057\u306a\u3051\u308c\u3070\u3001false\u3092\u8fd4\u3057\u3066\u3001\u5165\u529b\u6587\u5b57\u5217\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u3002\n\n\u30e1\u30f3\u30d0\u30fc\u578b\u3068\u3057\u3066`iterator`\u3092\u6301\u3064\u304c\u3001\u3053\u308c\u306f\u5f8c\u306bExpression Template\u3092\u4f7f\u3063\u305f\u6642\u306b\u3001\u4e0a\u306e\u65b9\u306e\u6728\u306b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u578b\u3092\u6e21\u3059\u305f\u3081\u306b\u4f7f\u3046\u3002\n`my_type`\u81ea\u5206\u306e\u578b\u305d\u306e\u3082\u306e\u3060\u304c\u3001\u5f8c\u3067\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u6642\u306eSFINA\u7528\u306b\u4f7f\u3046\u3002\n\n\u30c6\u30b9\u30c8\n\n```cpp\nTerminals<std::string,std::string::iterator> ch('a');\nstd::string input(\"aiueo\");\nstd::string input2(\"iaueo\");\nauto res = ch.parse(input.begin(),input.end());\nauto res2 = ch.parse(input2.begin(),input2.end());\n```\n\n#Expression template\n\n```cpp\ntemplate<typename L, typename OpTag, typename R> struct Expression{\n  using iterator = typename  R::iterator;\n  using parse_result_type = typename R::parse_result_type;\n  using my_type = Expression<L,OpTag,R>;\n\n  const L& l;\n  const R& r;\n \n  Expression(const L& l_, const R& r_) : l(l_), r(r_){};\n  parse_result_type parse(iterator begin, iterator end) const{return OpTag::parse(l,r,begin,end);}\n};\n\ntemplate<typename OpTag, typename R> struct Expression<unused,OpTag,R>{\n  using iterator = typename  R::iterator;\n  using parse_result_type = typename R::parse_result_type;\n  using my_type = Expression<L,OpTag,R>;\n\n  const R& r;\n \n  Expression(const R& r_) : r(r_){};\n  parse_result_type parse(iterator begin, iterator end) const{return OpTag::parse(l,r,begin,end);}\n};\n```\n\n\u5206\u6790\u898f\u5247\u306f\u69cb\u6587\u6728\u306e\u4e0a\u306e\u65b9\u306e\u30d1\u30fc\u30b9\u95a2\u6570\u304b\u3089\u9806\u306b\u8d77\u52d5\u3055\u308c\u308b\u3002\n\u3053\u308c\u306f\u3001\u901a\u5e38\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3068\u7570\u306a\u308b\u9806\u756a\u306a\u306e\u3067\u3001Expression template\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\nExpression template\u3092\u7528\u3044\u308c\u3070\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3082\u5bb9\u6613\u306b\u306a\u308b\u306e\u3067\u4e00\u77f3\u4e8c\u9ce5\u3067\u3042\u308b\u3002\n\nExpression template\u3068\u3044\u3063\u3066\u3082\u5927\u3057\u3066\u96e3\u3057\u304f\u306f\u306a\u3044\u3002\u4e0a\u306b\u3001\u4e8c\u9805\u6f14\u7b97\u3068\u4e00\u9805\u6f14\u7b97\u7528\u306eexpression\u306e\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u3042\u308b\u3002\n\n\u6b21\u306b\u3001\u4f8b\u3048\u3070`L >> R`\u304b\u3089expression\u3092\u69cb\u6210\u3059\u308b\u305f\u3081\u306e\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n```cpp\ntemplate<typename L, typename R> Expression<L,sequence<L,R>, R> operator>> (const L& l, const R& r){\n  return Expression<L,sequence<L,R>,R>(l,r);\n};\n```\n\u3053\u306e\u69d8\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u3051\u3070\u3001`L >> R`\u3068\u3044\u3046\u5f0f\u304c\u8a55\u4fa1\u3055\u308c\u308b\u3068\u3001expression\u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\u3082\u3061\u308d\u3093\u3001\u307e\u3068\u3082\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u306a\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306bexpression\u306f\u6d88\u3055\u308c\u3066\u5c55\u958b\u3055\u308c\u305f\u30d1\u30fc\u30b9\u95a2\u6570\u306e\u307f\u304c\u6b8b\u308b\u306f\u305a\u3060\u3002\n\n\u3068\u3053\u308d\u3067\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u5c11\u3005\u554f\u984c\u6709\u308b\u3002\n\u5168\u4f53\u3092\u3042\u308b\u540d\u524d\u7a7a\u9593\u306b\u7a81\u3063\u8fbc\u3093\u3067\u3082\u3001\u305d\u306e\u540d\u524d\u7a7a\u9593\u5185\u306e\u3042\u3089\u3086\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u305f\u3044\u3057\u3066\u6f14\u7b97\u5b50\u547c\u3073\u51fa\u3057\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u3002\n\u4eca\u306e\u5834\u5408\u3001\u3053\u308c\u3089\u306e\u6f14\u7b97\u5b50\u306fExpression\u3068\u7d42\u7aef\u6587\u5b57\u306b\u5bfe\u3057\u3066\u306e\u307f\u5b9a\u7fa9\u3067\u304d\u308c\u3070\u3088\u3044\u306e\u3067\u3001\u305d\u306e\u305f\u3081\u306b`my_type`\u30bf\u30b0\u3092\u4f7f\u3046\u3002\n\n```cpp\ntemplate<typename L, typename R> Expression<typename L::my_type,sequence<L,R>, typename R::my_type>\n  operator>> (const L& l, const R& r){\n  return Expression<L,sequence<L,R>,R>(l,r);\n};\n```\n\n\u5b9a\u7fa9\u3055\u308c\u305f\u540d\u524d\u7a7a\u9593\u5185\u3067`my_type`\u3092\u4f7f\u308f\u306a\u3051\u308c\u3070\u3001SFINAE\u306b\u3088\u3063\u3066\u6f14\u7b97\u5b50\u306e\u547c\u3073\u51fa\u3057\u306f\u6b63\u3057\u304f\u5236\u9650\u3055\u308c\u308b\u3002\n\n\u6e96\u5099\u306f\u6574\u3063\u305f\u3002\u5f8c\u306f\u5b9a\u7fa9\u306b\u5f93\u3063\u3066\u3001\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n\n#\u30b3\u30fc\u30c9\n\n[github](https://github.com/kktk-KO/cpeg)\u306b\u4e0a\u3052\u305f\u3002\n\nPEG\u306e\u6f14\u7b97\u5b50\u3068\u7d42\u7aef\u6587\u5b57\u306f\u5168\u3066\u5b9f\u88c5\u3057\u3066\u3042\u308b\u3002\n\n\u30d0\u30b0\u304c\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u307b\u3057\u3044\u3002\n\n#\u6b21\u56de\n\n\u5c5e\u6027\u6587\u6cd5\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\n#\u8ffd\u8a18\nboost\u306f\u5049\u5927\u3060\u3063\u305f\u3002\n", "tags": ["C++", "C++11"]}