{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u7686\u3055\u3093\u3001OpenID Connect \u3092\u4f7f\u3063\u305f Web \u8a8d\u8a3c\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u3044\u3066\u3001\u300c\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3093\u304b\u306b\u983c\u308a\u305f\u304f\u306a\u3044\uff01\u300d\u3068\u304b\u300c\u7f72\u540d\u3092\u81ea\u5206\u3067\u30d1\u30fc\u30b9\u3057\u3066\u4e2d\u8eab\u898b\u3066\u307f\u305f\u3044\uff01\u300d\u3068\u304b\u300cOpenSSL \u306e RSA_verify \u547c\u3073\u51fa\u3059\u3060\u3051\u3058\u3083\u7269\u8db3\u308a\u306a\u3044\uff01\u81ea\u5206\u3067 $m = S^e \\pmod{n}$ \u3063\u3066\u3084\u3063\u3066\u7f72\u540d\u691c\u8a3c\u3057\u3066\u307f\u305f\u3044\uff01\u300d\u3063\u3066\u601d\u3046\u3053\u3068\u3088\u304f\u3042\u308a\u307e\u3059\u3088\u306d\uff1f\n\u3053\u3053\u3067\u306f\u3001\u6697\u53f7\u95a2\u9023\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u305b\u305a\u3001OpenID Connect \u306e JWT \u306e\u7f72\u540d\u3092\u81ea\u529b\u3067 \u691c\u8a3c\u3057\u305f\u969b\u306b\u8abf\u3079\u305f\u5185\u5bb9\u3092\u5099\u5fd8\u9332\u3068\u3057\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\u666e\u901a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u4efb\u305b\u306b\u3059\u308b\u7f72\u540d\u691c\u8a3c\u306e\u51e6\u7406\u3082\u81ea\u529b\u3067\u3084\u3063\u3066\u308b\u306e\u3067\u3001\u300cRSA \u6697\u53f7\u306e\u6570\u5f0f\u3082\u77e5\u3063\u3066\u308b\u3057\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u4f7f\u3048\u3070\u6697\u53f7\u5316\u3082\u3067\u304d\u308b\u3002\u3060\u3051\u3069\u3001\u5e73\u6587\u3068\u3057\u3066\u6307\u5b9a\u3057\u305f hogehoge \u3092\u3069\u3046\u3084\u3063\u3066\u3042\u306e\u6570\u5f0f\u306b\u5f53\u3066\u306f\u3081\u3066\u308b\u306e\u304b\u6c17\u306b\u306a\u3063\u3066\u591c\u3082\u7720\u308c\u306a\u3044\u300d\u3068\u3044\u3046\u4eba\u304c\u8aad\u3080\u3068\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u7720\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u6ce8\u610f\u4e8b\u9805\n\u5b9f\u969b\u306b\u30b5\u30fc\u30d3\u30b9\u306e\u8a8d\u8a3c\u90e8\u5206\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u4eba\u306f\u771f\u4f3c\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\u7d20\u76f4\u306b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u67af\u308c\u305f\u5b9f\u88c5\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\u3053\u3093\u306a\u306e\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u308b\u3068\u3069\u3053\u306b\u8106\u5f31\u6027\u304c\u7d1b\u308c\u8fbc\u3080\u304b\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n\u4ed5\u4e8b\u306e\u5408\u9593\u306e\u3072\u307e\u3064\u3076\u3057\u306b\u8aad\u3093\u3067\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u307e\u305f\u3001\u3053\u306e\u8a18\u4e8b\u306f\u7b46\u8005\u304c\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u307e\u3067\u306e\u904e\u7a0b\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u666e\u901a\u306a\u3089\u89e6\u308c\u308b\u3067\u3042\u308d\u3046\u95a2\u9023\u4e8b\u9805\u306a\u3069\u306f\u30b9\u30eb\u30fc\u3057\u3066\u3044\u308b\u90e8\u5206\u304c\u591a\u3044\u3067\u3059\u3002\u305d\u306e\u8fba\u306f\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u6539\u3081\u3066\u307e\u3068\u3081\u307e\u3059\u3002\n\n\u30a2\u30ab\u30a6\u30f3\u30c8\u7ba1\u7406\u306a\u3093\u304b\u3084\u308a\u305f\u304f\u306a\u3044\n\u6628\u4eca\u3001\u306a\u3093\u3067\u3082\u304b\u3093\u3067\u3082 Web \u30b5\u30fc\u30d3\u30b9\u5316\u3055\u308c\u3066\u3001\u3042\u3061\u3053\u3061\u3067 ID / \u30d1\u30b9\u30ef\u30fc\u30c9 \u306e\u767b\u9332\u3092\u6c42\u3081\u3089\u308c\u3066\u3001\u767b\u9332\u3057\u305f\u3082\u306e\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5fd8\u308c\u3066 \uff3c(^o^)\uff0f\uff75\uff9c\uff80 \u306a\u72b6\u6cc1\u306b\u306a\u308b\u3053\u3068\u304c\u5897\u3048\u3066\u304d\u3066\u3044\u307e\u3059\u3002\n\u300c\u30b5\u30a4\u30c8\u6bce\u306b\u9055\u3046\u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u3057\u308d\u300d\u300c\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u6570\u5b57\u8a18\u53f7\u3092\u542b\u3081\u306611\u6587\u5b57\u4ee5\u4e0a\u300d\u300c\u30e1\u30e2\u308b\u306a\u300d\u3068\u304b\u3044\u308d\u3044\u308d\u8a00\u308f\u308c\u3066\u30e6\u30fc\u30b6\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u7ba1\u7406\u306e\u8ca0\u62c5\u306f\u5897\u3048\u3066\u3044\u304f\u4e00\u65b9\u3067\u3059\u3002\n\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u767a\u884c\u3057\u3066\u7ba1\u7406\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u8005\u5074\u3082\u5927\u5909\u3067\u3059\u3002\u767a\u884c\u3057\u305f\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u60c5\u5831\u304c\u6f0f\u3048\u3044\u3067\u3082\u3057\u3066\u3001\u3055\u3089\u306b\u305d\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5225\u30b5\u30fc\u30d3\u30b9\u3067\u3082\u4f7f\u3044\u307e\u308f\u3055\u308c\u305f\u308a\u3057\u3066\u3044\u3088\u3046\u3082\u306e\u306a\u3089\u3053\u3061\u3089\u3082 \uff3c(^o^)\uff0f\uff75\uff9c\uff80 \u306a\u72b6\u6cc1\u306b\u306a\u308b\u3053\u3068\u306f\u9593\u9055\u3044\u3042\u308a\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Web \u30b5\u30fc\u30d3\u30b9\u306e\u5229\u7528\u8005\u3068\u3057\u3066\u3082\u3042\u3061\u3053\u3061\u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3057\u305f\u304f\u306a\u3044\u3057\u3001\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u5074\u3068\u3057\u3066\u3082\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u7ba1\u7406\u306a\u3093\u304b\u81ea\u5206\u3067\u3084\u308a\u305f\u304f\u306a\u3044\u308f\u3051\u3067\u3059\u3002\u3069\u3046\u305b\u6700\u8fd1\u306f\u8ab0\u3067\u3082 Google \u3084 Facebook \u3084 Yahoo! \u306a\u3093\u304b\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u6301\u3063\u3066\u308b\u3093\u3060\u304b\u3089\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u7ba1\u7406\u306f\u5b9f\u7e3e\u306e\u3042\u308b\u4eba\u305f\u3061\u306b\u4efb\u305b\u3066\u3053\u3063\u3061\u306f\u90fd\u5ea6\u300c\u3053\u306e\u4eba\u8ab0\uff1f\u300d\u3063\u3066\u805e\u3044\u3066\u6559\u3048\u3066\u3082\u3089\u3048\u3070\u3044\u3044\u3093\u3067\u3059\u3002\n\u305d\u306e\u4ed5\u7d44\u307f\u3068\u3057\u3066\u3001OpenID Connect \u3068\u3044\u3046\u8a8d\u8a3c\u30d7\u30ed\u30c8\u30b3\u30eb\u304c\u767b\u5834\u3057\u307e\u3057\u305f\u3002\n\nOpenID Connect\n\u89aa\u5207\u306a\u3053\u3068\u306b\u3001Google \u69d8\u3084 Facebook \u69d8\u3084 Yahoo! \u69d8\u306f\u3053\u306e OpenID Connect \u3068\u3044\u3046\u8a8d\u8a3c\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5229\u7528\u3057\u3066\u3001\u8a8d\u8a3c\u3092\u80a9\u4ee3\u308f\u308a\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u307e\u3059\u3002\n\u7b46\u8005\u3082 Web \u30b5\u30fc\u30d3\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u306b\u3042\u305f\u308a\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u7ba1\u7406\u3067 \uff3c(^o^)\uff0f\uff75\uff9c\uff80 \u306b\u306a\u308a\u305f\u304f\u306a\u3044\u306e\u3067\u3042\u308a\u304c\u305f\u304f\u5229\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\u3068\u3053\u308d\u3067\u3001\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u8005\u306f Google \u306b\u3069\u3046\u3084\u3063\u3066\u300c\u3053\u306e\u4eba\u8ab0\uff1f\u300d\u3063\u3066\u805e\u3051\u3070\u3044\u3044\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\u30e6\u30fc\u30b6\u304b\u3089 Google \u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u308c\u3092 Google \u306b\u6295\u3052\u3066\u3084\u308c\u3070\u78ba\u304b\u306b\u8a8d\u8a3c\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u305d\u3093\u306a\u3053\u3068\u3057\u305f\u3089\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u8005\u306f\u30e6\u30fc\u30b6\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3084\u308a\u305f\u3044\u653e\u984c\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nOpenID Connect \u3067\u306f\u3001\u30e6\u30fc\u30b6\u304c Google \u7b49\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u60c5\u5831\u3092\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u8005\u306b\u6e21\u3059\u3053\u3068\u306a\u304f\u3001\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u8005\u304c\u8a8d\u8a3c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u4ed5\u7d44\u307f\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\u7d20\u6674\u3089\u3057\u3044\u3067\u3059\u306d\u3002\nOpenID Connect \u306e\u4ed5\u69d8\u306f OpenID Connect Core 1.0 - draft17 \u3068\u3057\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u306f\u3044\u3001\u3044\u304d\u306a\u308a\u9762\u5012\u306a\u8a71\u306b\u5165\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u4ed5\u4e8b\u306e\u5408\u9593\u306e\u3072\u307e\u3064\u3076\u3057\u3067\u3053\u3093\u306a\u9577\u3044\u6587\u66f8\u8aad\u3093\u3067\u3089\u308c\u306a\u3044\u306e\u3067\u3001\u304b\u3044\u3064\u307e\u3093\u3067\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u306f 1.3. Overview \u306e\u56f3\u3067\u3059\u3002\n\n\u3053\u306e\u56f3\u4e2d\u306e OP \u306f\u3001Google \u3084 Facebook \u7b49\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u60c5\u5831\u3092\u6301\u3064\u30b5\u30fc\u30d0\u3001RP \u306f\u305d\u306e\u60c5\u5831\u3092\u5229\u7528\u3057\u3066\u8a8d\u8a3c\u3092\u884c\u3044 Web \u30b5\u30fc\u30d3\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u30b5\u30fc\u30d0\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u79c1\u305f\u3061\u304c\u3053\u308c\u304b\u3089\u5b9f\u88c5\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u306e\u306f RP \u3067\u3059\u3002\n\u56f3\u3092\u3088\u304f\u898b\u308b\u3068\u3001End-User \u306f\u79c1\u305f\u3061\u306e RP \u3068\u3067\u306f\u306a\u304f\u3001OP \u3068\u306e\u9593\u3067\u8a8d\u8a3c\u3001\u8a8d\u53ef\u306e\u624b\u7d9a\u304d\u3092\u884c\u3063\u3066\u3044\u307e\u3059(\u56f3 (2) AuthN & AuthZ)\u3002\u3064\u307e\u308a\u3001\u30e6\u30fc\u30b6\u306e ID / \u30d1\u30b9\u30ef\u30fc\u30c9\u306f RP \u3092\u4ecb\u3059\u308b\u3053\u3068\u306a\u304f\u3001\u76f4\u63a5 OP \u306b\u6e21\u3055\u308c\u3001\u8a8d\u8a3c\u306e\u7d50\u679c\u3060\u3051\u304c RP \u306b\u901a\u77e5\u3055\u308c\u3066\u3044\u308b\u3093\u3067\u3059\u306d\u3002\n\u30d5\u30ed\u30fc\u3092\u7c21\u5358\u306b\u8fbf\u3063\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\u672a\u8a8d\u8a3c\u306e\u72b6\u614b\u3067 RP \u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u30e6\u30fc\u30b6\u306f\u3001\u300c\u307e\u305a\u306f\u8a8d\u8a3c\u53d7\u3051\u3066\u304d\u3066\u300d\u3068 OP \u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u307e\u3059(\u56f3 (1) AuthN Request)\u3002\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u305f\u5148\u3067\u30e6\u30fc\u30b6\u306f\u81ea\u5206\u306e ID \u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u8a8d\u8a3c(\u56f3 (2) AuthN & AuthZ)\u3055\u308c\u3001\u300c\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u304c\u3042\u306a\u305f\u306e\u60c5\u5831\u4f7f\u304a\u3046\u3068\u3057\u3066\u308b\u3051\u3069\u8a31\u53ef\u3059\u308b\uff1f\u300d\u3068\u8a31\u53ef\u3092\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\u305d\u3053\u3067\u300c\u8a31\u53ef\u3059\u308b\u300d\u3092\u9078\u629e\u3059\u308b\u3068\u3001\u30e6\u30fc\u30b6\u306f\u518d\u3073\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3067 RP \u306b\u623b\u3055\u308c\u307e\u3059(\u56f3 (3) AuthN Response)\u3002\u3053\u306e\u6642\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u300c\u8a8d\u8a3c\u3092\u901a\u904e\u3057\u305f\u300d\u3053\u3068\u3092\u793a\u3059 code \u304c\u4ed8\u52a0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001RP \u306f\u305d\u306e code \u3092\u6301\u3063\u3066\u300c\u3053\u306e\u4eba\u306e\u60c5\u5831\u304f\u3060\u3055\u3044\u300d\u3068 OP \u306b\u554f\u3044\u5408\u308f\u305b\u307e\u3059(\u56f3 (4) UserInfo Request)\u3002\u3053\u306e\u5fdc\u7b54\u3068\u3057\u3066\u30e6\u30fc\u30b6\u60c5\u5831\u304c\u53d6\u5f97\u3067\u304d\u308c\u3070(\u56f3 (5) UserInfo Response)\u3001RP \u306f\u30e6\u30fc\u30b6\u3092\u8a8d\u8a3c\u3067\u304d\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u304b\u306a\u308a\u99c6\u3051\u8db3\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u3042\u305f\u308a\u306f\u672c\u8a18\u4e8b\u306e\u672c\u984c\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u8a73\u3057\u304f\u306f\u4ed6\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nGoogle Identity Platform\n\u3053\u3053\u3067\u306f\u3001Google \u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b OpenID Connect \u306e\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u3001\u30e6\u30fc\u30b6\u306e\u8a8d\u8a3c\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u767b\u9332\u3084\u8a2d\u5b9a\u306e\u65b9\u6cd5\u306f\u3084\u306f\u308a\u4ed6\u306e\u8a18\u4e8b\u306b\u8b72\u308a\u307e\u3059\u3002\n\u8a73\u7d30\u306a\u4ed5\u69d8\u306f OpenID Connect \u306b\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3082\u9577\u3044\u306e\u3067\u3001\u304b\u3044\u3064\u307e\u3093\u3067\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u5148\u307b\u3069\u306e\u30d5\u30ed\u30fc\u306b\u5f93\u3046\u3068\u3001\u307e\u305a RP \u5074\u306f\u3001\u672a\u8a8d\u8a3c\u306e\u30e6\u30fc\u30b6\u304c\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304d\u305f\u969b\u306b\u300c\u307e\u305a\u306f\u8a8d\u8a3c\u53d7\u3051\u3066\u304d\u3066\u300d\u3068 OP \u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u6642\u3001\u8a8d\u8a3c\u304c\u7d42\u308f\u3063\u305f\u3089\u307e\u305f RP \u5074\u306b\u623b\u3063\u3066\u304d\u3066\u3082\u3089\u3046\u305f\u3081\u306b\u3044\u304f\u3064\u304b\u306e\u60c5\u5831\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6307\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u90e8\u5206\u306e\u8a73\u7d30\u306f 2. Send an authentication request to Google \u306b\u3042\u308a\u307e\u3059\u3002\n\u3053\u3053\u3092\u8aad\u3093\u3067\u3044\u304f\u3068\u3001\u8a8d\u8a3c\u5f8c\u306b\u30e6\u30fc\u30b6\u3092 RP \u5074\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u305b\u308b\u305f\u3081\u306b\u3001client_id, redirect_uri, state \u3068\u3044\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u305f\u305b\u305f\u4e0a\u3067\u3001\u30e6\u30fc\u30b6\u3092 OP \u306b\u4e00\u65e6\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u305b\u308b\u308f\u3051\u3067\u3059\u3002\n\u30e6\u30fc\u30b6\u3068 OP \u306e\u9593\u3067\u8a8d\u8a3c\u304c\u6210\u529f\u3057\u305f\u3089\u3001\u30e6\u30fc\u30b6\u306f RP \u306e redirect_uri \u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u3066\u304d\u307e\u3059\u3002\u6b21\u306b\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u306e\u304c\u3001\u30e6\u30fc\u30b6\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u9001\u4fe1\u3057\u3066\u304d\u305f code \u304b\u3089\u3001ID token \u3092\u53d6\u5f97\u3059\u308b\u4f5c\u696d\u3067\u3059\u3002\u5148\u307b\u3069\u306e\u30d5\u30ed\u30fc\u3067\u306f (4) UserInfo Request \u306b\u3042\u305f\u308a\u307e\u3059\u3002Google \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f 4. Exchange code for access token and ID token \u306b\u8a73\u7d30\u304c\u3042\u308a\u307e\u3059\u3002\n\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u542b\u3081\u3066 https://www.googleapis.com/oauth2/v3/token \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001JSON \u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u304c\u3001\u30e6\u30fc\u30b6\u306e\u8a8d\u8a3c\u304c\u6210\u529f\u3057\u3066\u3044\u308c\u3070 id_token \u3068\u3044\u3046\u9805\u76ee\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\u524d\u7f6e\u304d\u304c\u975e\u5e38\u306b\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u304b\u3089\u304c\u3088\u3046\u3084\u304f\u672c\u984c\u3067\u3059\u3002\n\u53d6\u5f97\u3067\u304d\u305f ID token \u3092\u898b\u308b\u3068\u3001\neyJhbGciOiJSUzI1NiIsImtpZCI6ImRhMGI1ZDQyNDRjY2ZiNzViMjcwODQxNjI5NWYwNWQ1MThjYTY5MDMifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXRfaGFzaCI6Ijd2ajAzMklIQWdzMEdNUGxOUDFkV2ciLCJhdWQiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExNzQ0MjQ1MDQ0MzI0NDAzNTk1NSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhenAiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImVtYWlsIjoiYm9idW5kZXJzb25AZ21haWwuY29tIiwiaWF0IjoxNDQzNzY4NzcxLCJleHAiOjE0NDM3NzIzNzF9.bzNpok6tybsHOicXvbP9Q97kKO14ei3B1DXlNa8LFiZj8rQJfnm_rATRlMFEGs1fsW5Av7srDy-2JjdEbQufHbYlUBXIJh7_sBwI_qU6NIYn2t8hcGpMnXoe2z0BtkP3CyvvTINRVxA6WwHv_Teh0nzxnaxmcOVm0ajLKT603Crtt4MNur_azADTxNxYafaQ5o7XOo9V0PMM0nVy6kqn-N3IjxBPNXqQapmxub6qzJcRsOyAjOyzK1hRAuxvX9vd9fAoBf4ycpbeTWIy7nQIeEU8kl2lTNSb9DBZrsVP7GzhFRdEMDIxctcBoqXDxBuYLuSXGlnMyfSYy0sU39VBtw\n\u306e\u3088\u3046\u306a\u610f\u5473\u4e0d\u660e\u306a\u6587\u5b57\u5217\u304c\u4e26\u3093\u3067\u3044\u307e\u3059\u3002\n5. Obtain user information from the ID token\n\u306b\u3088\u308b\u3068\u3001\n\nAn ID Token is a JWT (JSON Web Token), that is, a cryptographically signed Base64-encoded JSON object.\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u30fb\u30fb\u30fb JWT \uff1f\n\nJWT (JSON Web Token)\n\u63a2\u3057\u3066\u307f\u308b\u3068\u3001\u51fa\u3066\u304d\u307e\u3057\u305f\u307f\u3093\u306a\u5927\u597d\u304d RFC7519\u3002\n\nJSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.\n\n\u3069\u3046\u3084\u3089\u3001JSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 URL-safe \u304b\u3064\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u8868\u73fe\u3057\u305f\u3082\u306e\u3067\u3001JWS \u307e\u305f\u306f JWE \u3068\u547c\u3070\u308c\u308b\u30e2\u30ce\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u3053\u306e JWT \u3092\u691c\u8a3c\u3057\u305f\u3044\u306e\u3067\u3001RFC7519 - 7.2. Validating a JWT \u306b\u76ee\u3092\u901a\u3057\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u3001\n\n1.Verify that the JWT contains at least one period ('.') character.\n\n\u3067\u3059\u3002\u30d4\u30ea\u30aa\u30c9\u306f 2 \u3064\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\u6b21\u306b\n\n2.Let the Encoded JOSE Header be the portion of the JWT before the first period ('.') character.\n3.Base64url decode the Encoded JOSE Header following the restriction that no line breaks, whitespace, or other additional characters have been used.\n4.Verify that the resulting octet sequence is a UTF-8-encoded representation of a completely valid JSON object conforming to RFC 7159 [RFC7159]; let the JOSE Header be this JSON object.\n\n\u3067\u3059\u3002\u6700\u521d\u306e\u30d4\u30ea\u30aa\u30c9\u307e\u3067\u306e\u6587\u5b57\u5217\u3092 Base64url decode \u3059\u308b\u3068 JOSE Header (JSON) \u304c\u51fa\u3066\u304f\u308b\u3088\u3046\u3067\u3059\u3002\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n$ echo -n 'eyJhbGciOiJSUzI1NiIsImtpZCI6ImRhMGI1ZDQyNDRjY2ZiNzViMjcwODQxNjI5NWYwNWQ1MThjYTY5MDMifQ' | base64 -d\n{\"alg\":\"RS256\",\"kid\":\"da0b5d4244ccfb75b2708416295f05d518ca6903\"}base64: \u7121\u52b9\u306a\u5165\u529b\n\n\u305f\u3057\u304b\u306b JSON \u304c\u51fa\u3066\u304d\u307e\u3057\u305f\uff01\n\n5.Verify that the resulting JOSE Header includes only parameters and values whose syntax and semantics are both understood and supported or that are specified as being ignored when not understood.\n\n\u5024\u306f\u6587\u5b57\u5217\u3060\u3051\u306a\u306e\u3067\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n6.Determine whether the JWT is a JWS or a JWE using any of the methods described in Section 9 of [JWE].\n\nRFC7516 - 9. Distinguishing between JWS and JWE Objects \u306e\u624b\u9806\u306b\u5f93\u3063\u3066\u3001\u3053\u306e JWT \u304c JWS \u306a\u306e\u304b JWE \u306a\u306e\u304b\u898b\u5206\u3051\u308b\u3088\u3046\u3067\u3059\u3002\u65b9\u6cd5\u306f\u3044\u304f\u3064\u304b\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\n\nThe JOSE Header for a JWS can also be distinguished from the JOSE Header for a JWE by determining whether an \"enc\" (encryption algorithm) member exists.  If the \"enc\" member exists, it is a JWE; otherwise, it is a JWS.\n\n\u3053\u308c\u306b\u3088\u308b\u3068\u3001\u5148\u307b\u3069\u306e JOSE Header \u306b enc \u8981\u7d20\u304c\u5b58\u5728\u3057\u3066\u3044\u308c\u3070 JWE \u3001\u5b58\u5728\u3057\u306a\u3051\u308c\u3070 JWS \u3060\u305d\u3046\u3067\u3059\u3002\u5f93\u3063\u3066\u3001\u4eca\u56de\u306e JWT \u306f JWS \u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n7.Depending upon whether the JWT is a JWS or JWE, there are two cases:\n\u3000* If the JWT is a JWS, follow the steps specified in [JWS] for\n\u3000\u3000validating a JWS.  Let the Message be the result of base64url\n\u3000\u3000decoding the JWS Payload.\n\n\u7d9a\u304d\u306f JWS \u306a\u3089 JWS \u306e RFC \u306b\u5f93\u3048\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3067\u3059\u3002\nRFC7515 - A.2. Example JWS Using RSASSA-PKCS1-v1_5 SHA-256 \u306b\u3088\u308b\u3068\u3001\u30d4\u30ea\u30aa\u30c9\u3067\u533a\u5207\u3089\u308c\u305f 3 \u756a\u76ee\u306e\u5024\u306f Base64url encode \u3055\u308c\u305f\u7f72\u540d\u306e\u5024\u306e\u3088\u3046\u3067\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u3053\u306e\u7f72\u540d\u306e\u691c\u8a3c\u306f\u5f8c\u56de\u3057\u306b\u3057\u3066\u3001\u5148\u306b\u9032\u3080\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n8.If the JOSE Header contains a \"cty\" (content type) value of \"JWT\", then the Message is a JWT that was the subject of nested signing or encryption operations.  In this case, return to Step 1, using the Message as the JWT.\n\nJOSE Header \u306b cty \u306f\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3053\u3053\u306f\u7121\u8996\u3057\u3066\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n9.Otherwise, base64url decode the Message following the restriction that no line breaks, whitespace, or other additional characters have been used.\n10.Verify that the resulting octet sequence is a UTF-8-encoded representation of a completely valid JSON object conforming to RFC 7159 [RFC7159]; let the JWT Claims Set be this JSON object.\n\n\n\u3067\u53d6\u308a\u51fa\u3057\u305f JWS Payload \u90e8\u5206\u3082\u307e\u305f Base64url decode \u3059\u308b\u3068 JSON \u304c\u51fa\u3066\u304f\u308b\u3088\u3046\u3067\u3059\u3002\n\n$ echo -n 'eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXRfaGFzaCI6Ijd2ajAzMklIQWdzMEdNUGxOUDFkV2ciLCJhdWQiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExNzQ0MjQ1MDQ0MzI0NDAzNTk1NSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhenAiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImVtYWlsIjoiYm9idW5kZXJzb25AZ21haWwuY29tIiwiaWF0IjoxNDQzNzY4NzcxLCJleHAiOjE0NDM3NzIzNzF9' | base64 -d\n{\"iss\":\"accounts.google.com\",\"at_hash\":\"7vj032IHAgs0GMPlNP1dWg\",\"aud\":\"91469957145-jb842u0rcgm87m2209aelbftsl9p357i.apps.googleusercontent.com\",\"sub\":\"117442450443244035955\",\"email_verified\":true,\"azp\":\"91469957145-jb842u0rcgm87m2209aelbftsl9p357i.apps.googleusercontent.com\",\"email\":\"bobunderson@gmail.com\",\"iat\":1443768771,\"exp\":1443772371}\n\n\u305f\u3057\u304b\u306b JSON \u304c\u51fa\u3066\u304d\u307e\u3057\u305f\uff01\u3057\u304b\u3082\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u542b\u307e\u308c\u3066\u307e\u3059\uff01\n\u3053\u306e JWT \u306b\u3088\u3063\u3066 Google \u304c\u300c\u305d\u306e\u4eba\u3001bobunderson@gmail.com \u3060\u3088\u300d\u3068\u6559\u3048\u3066\u304f\u308c\u3066\u308b\u306e\u3067\u3001RP \u306f\u305d\u308c\u3092\u30e6\u30fc\u30b6 ID (\u3068\u5bfe\u5fdc\u3059\u308b\u3082\u306e)\u3068\u3057\u3066\u6271\u3048\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\u7c21\u5358\u3067\u3059\u306d\u3002\n5. Obtain user information from the ID token \u306b\u3088\u308b\u3068\u3001HTTPS \u3067\u76f4\u63a5 Google \u3068\u901a\u4fe1\u3057\u3066\u3044\u3066\u3001\u81ea\u5206\u306e client secret \u3092\u4f7f\u3063\u3066\u3044\u308b\u5206\u306b\u306f\u3001\u3053\u306e ID token \u3092\u4fe1\u7528\u3057\u3066\u4f7f\u3063\u3066\u3082\u3088\u3044\u3088\u3046\u3067\u3059\u3002\n\nNormally, it is critical that you validate an ID token before you use it, but since you are communicating directly with Google over an intermediary-free HTTPS channel and using your client secret to authenticate yourself to Google, you can be confident that the token you receive really comes from Google and is valid.\n\n\nJWT \u306e\u691c\u8a3c\n\u300cHTTPS \u3067\u76f4\u63a5 Google \u3068\u901a\u4fe1\u3057\u3066\u3044\u3066\u3001\u81ea\u5206\u306e client secret \u3092\u4f7f\u3063\u3066\u3044\u308b\u5206\u306b\u306f\u3001\u3053\u306e ID token \u3092\u4fe1\u7528\u3057\u3066\u4f7f\u3063\u3066\u3082\u3088\u3044\u300d\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u88cf\u3092\u8fd4\u305b\u3070\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306b\u306f ID token \u3092\u305d\u306e\u307e\u307e\u4fe1\u7528\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u8ab0\u304b\u304c\u300cGoogle \u304c\u3053\u306e ID token \u767a\u884c\u3057\u3066\u304f\u308c\u305f\u3088\u300d\u3068\u8a00\u3063\u3066 ID token \u3092\u6e21\u3057\u3066\u304d\u305f\u5834\u5408\u3001\u305d\u306e ID token \u306f\u507d\u9020\u3001\u6539\u3056\u3093\u3055\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u300c\u3053\u306e ID token \u306f Google \u304c\u767a\u884c\u3057\u305f\u3082\u306e\u3060\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u4f55\u3089\u304b\u306e\u65b9\u6cd5\u3067\u691c\u8a3c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3067\u3088\u3046\u3084\u304f\u672c\u5f53\u306e\u672c\u984c\u306b\u5165\u3063\u3066\u304d\u307e\u3057\u305f\u3002\nValidating an ID token \u306b\u3088\u308b\u3068\u3001ID token \u306e\u691c\u8a3c\u306f 5 \u3064\u306e\u30b9\u30c6\u30c3\u30d7\u304b\u3089\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\n\nVerify that the ID token is a JWT which is properly signed with an appropriate Google public key.\nVerify that the value of aud in the ID token is equal to your app\u2019s client ID.\nVerify that the value of iss in the ID token is equal to accounts.google.com or https://accounts.google.com.\nVerify that the expiry time (exp) of the ID token has not passed.\nIf you passed a hd parameter in the request, verify that the ID token has a hd claim that matches your Google Apps hosted domain.\n\n\n\u30b9\u30c6\u30c3\u30d7 2 \uff5e 5 \u306b\u3064\u3044\u3066\u306f\u3001\u5358\u7d14\u306b\u6587\u5b57\u5217\u3092\u6bd4\u8f03\u3057\u305f\u308a\u3001UNIX time \u3092\u6bd4\u8f03\u3057\u305f\u308a\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u7c21\u5358\u306a\u3093\u3067\u3059\u304c\u3001\u30b9\u30c6\u30c3\u30d7 1 \u306e\u7f72\u540d\u306e\u691c\u8a3c\u306f\u305d\u3046\u7c21\u5358\u306b\u306f\u3044\u304d\u307e\u305b\u3093\u3002Validating an ID token \u306b\u3082\n\nThe first step is more complex, and involves cryptographic signature checking. \n\n\u3068\u3042\u308a\u307e\u3059\u3002\u306a\u304b\u306a\u304b\u30cf\u30fc\u30c9\u30eb\u304c\u9ad8\u305d\u3046\u3067\u3059\u304c\u3001\u3053\u306e\u90e8\u5206\u3092\u81ea\u529b\u3067\u3084\u3063\u3066\u307f\u308b\u3068\u3044\u308d\u3044\u308d\u898b\u3048\u3066\u304d\u305f\u3068\u3044\u3046\u306e\u304c\u3053\u306e\u8a18\u4e8b\u306e\u30c6\u30fc\u30de\u3067\u3059\u3002\n\n\u7f72\u540d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u7f72\u540d\u306e\u691c\u8a3c\u3092\u3057\u3088\u3046\u306b\u3082\u3001\u4f55\u304b\u3068\u3063\u304b\u304b\u308a\u304c\u306a\u3044\u3068\u59cb\u3081\u3089\u308c\u306a\u3044\u306e\u3067\u3001RFC7519 \u306b\u623b\u3063\u3066\u307f\u307e\u3059\u3002RFC7519 - 3. JSON Web Token (JWT) Overview \u3092\u8aad\u3093\u3067\u3044\u308b\u3068\u3001\n\nThe contents of the JOSE Header describe the cryptographic operations applied to the JWT Claims Set.\n\n\u3068\u3044\u3046\u4e00\u6587\u304c\u898b\u3064\u304b\u308a\u307e\u3059\u3002cryptographic operations\u30fb\u30fb\u30fb\u602a\u3057\u3044\u3067\u3059\u306d\u3002\n\u3069\u3046\u3084\u3089 JOSE Header \u306f JWS Payload \u90e8\u5206\u306b\u5bfe\u3059\u308b\u6697\u53f7\u95a2\u9023\u306e\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nRFC7519 - 2. Terminology \u306b\u3088\u308b\u3068\u3001\"JOSE Header\" \u306b\u3064\u3044\u3066\u306f RFC7515 \u3092\u53c2\u7167\u305b\u3088\u3068\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u898b\u306b\u884c\u304d\u307e\u3059\u3002\nRFC7515 - 4. JOSE Header \u306b\u306f\n\nFor a JWS, the members of the JSON object(s) representing the JOSE Header describe the digital signature or MAC applied to the JWS Protected Header and the JWS Payload and optionally additional properties of the JWS.\n\n\u3068\u3042\u308a\u307e\u3059\u3002\u3084\u306f\u308a\u3001JOSE Header \u306b JWS Payload \u306e\u7f72\u540d\u306b\u3064\u3044\u3066\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u3053\u3067\u3001\u30c7\u30b3\u30fc\u30c9\u3057\u305f JOSE Header \u3092\u6539\u3081\u3066\u773a\u3081\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n{\"alg\":\"RS256\",\"kid\":\"7d61b5075924f1baddab5d4253becb231bcecbf4\"}\nalg\u30fb\u30fb\u30fb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3063\u307d\u3044\u3067\u3059\u306d\u3002\nRFC7515 - 4.1.1. \"alg\" (Algorithm) Header Parameter \u306b\u3088\u308b\u3068\u3001\n\nThe \"alg\" (algorithm) Header Parameter identifies the cryptographic algorithm used to secure the JWS.\n\n\u3068\u3042\u308a\u307e\u3059\u3002\u3084\u306f\u308a\u3053\u306e \"RS256\" \u3068\u3044\u3046\u5024\u304c\u3001JWS Payload \u306e\u7f72\u540d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8868\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u3053\u3053\u307e\u3067\u3067\u3001JWT \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u9020\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u3055\u3089\u306b\u8aad\u307f\u9032\u3081\u308b\u3068\u3001\n\n\"alg\" values should either be registered in the IANA \"JSON Web Signature and Encryption Algorithms\" registry established by [JWA] or be a value that contains a Collision-Resistant Name.\n\n\u3068\u3042\u308a\u3001\"alg\" \u306e value \u306f RFC7518 \u3067\u898f\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001RFC7518 \u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u3001\u3042\u308a\u307e\u3057\u305f\u3002\nRFC7518 - 3.1. \"alg\" (Algorithm) Header Parameter Values for JWS\n\u3053\u308c\u306b\u3088\u308b\u3068\u3001\"RS256\" \u3068\u3044\u3046\u5024\u306f \"RSASSA-PKCS1-v1_5 using SHA-256\" \u3068\u3044\u3046\u96fb\u5b50\u7f72\u540d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6307\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002SHA-256 \u3068\u3044\u3046\u306e\u306f\u304a\u306a\u3058\u307f\u306e\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3067\u3059\u306d\u3002RSASSA-PKCS1-v1_5 \u3063\u3066\u4f55\u3067\u3057\u3087\u3046\u304b\u3002RSA \u6697\u53f7\u306b\u95a2\u4fc2\u3057\u3066\u3044\u305d\u3046\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3002\u3002\u3002\n\u540c\u3058 RFC7518 \u306b\u306f RFC7518 - 3.3. Digital Signature with RSASSA-PKCS1-v1_5 \u3068\u3044\u3046\u7bc0\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u306b\u306f\u3001\n\nThis section defines the use of the RSASSA-PKCS1-v1_5 digital signature algorithm as defined in Section 8.2 of RFC 3447 [RFC3447] (commonly known as PKCS #1), using SHA-2 [SHS] hash functions.\n\n\u3068\u66f8\u304b\u308c\u3066\u304a\u308a\u3001RSASSA-PKCS1-v1_5 \u3068\u3044\u3046\u96fb\u5b50\u7f72\u540d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f RFC 3447 (PKCS #1) \u3067\u898f\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n\u516c\u958b\u9375\u6697\u53f7\u306e\u6a19\u6e96\nPKCS (Public-Key Cryptography Standards) \u3068\u3044\u3046\u306e\u306f\u3001\u3069\u3046\u3084\u3089\u516c\u958b\u9375\u6697\u53f7\u306e\u5b9f\u88c5\u306b\u304b\u304b\u308f\u308b\u69d8\u3005\u306a\u6a19\u6e96\u3092\u307e\u3068\u3081\u305f\u6587\u66f8\u306e\u3088\u3046\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001#1 \u304b\u3089 #15 \u307e\u3067\u5b9a\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n\n\u756a\u53f7\n\u540d\u524d\n\n\n\n\n#1\nRSA\u6697\u53f7\u6a19\u6e96\n\n\n#2\n\u5ec3\u6848\n\n\n#3\nDiffie-Hellman\u9375\u5171\u6709\u6a19\u6e96\n\n\n#4\n\u5ec3\u6848\n\n\n#5\n\u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u57fa\u3065\u304f\u6697\u53f7\u5316\u306e\u6a19\u6e96\n\n\n#6\n\u62e1\u5f35\u3055\u308c\u305f\u8a3c\u660e\u66f8\u69cb\u6587\u306e\u6a19\u6e96\n\n\n#7\n\u6697\u53f7\u30e1\u30c3\u30bb\u30fc\u30b8\u69cb\u6587\u6a19\u6e96\n\n\n#8\n\u79d8\u5bc6\u9375\u60c5\u5831\u69cb\u6587\u306e\u6a19\u6e96\n\n\n#9\n\u9078\u629e\u3055\u308c\u305f\u5c5e\u6027\u30bf\u30a4\u30d7\n\n\n#10\n\u8a3c\u660e\u66f8\u7f72\u540d\u8981\u6c42\n\n\n#11\n\u6697\u53f7\u30c8\u30fc\u30af\u30f3\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9(Cryptoki)\n\n\n#12\n\u500b\u4eba\u60c5\u5831\u4ea4\u63db\u69cb\u6587\u306e\u6a19\u6e96\n\n\n#13\n\u6955\u5186\u66f2\u7dda\u6697\u53f7\u306e\u6a19\u6e96\n\n\n#14\n\u7591\u4f3c\u4e71\u6570\n\n\n#15\n\u6697\u53f7\u30c8\u30fc\u30af\u30f3\u60c5\u5831\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u6a19\u6e96\n\n\n\nRSASSA-PKCS1-v1_5 \u306e\u8a73\u7d30\u306f\u3001RFC3447 \u3067\u898f\u5b9a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nRSA \u6697\u53f7\u65b9\u5f0f\u3092\u4f7f\u3063\u3066\u7f72\u540d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u3063\u305f\u306e\u3067\u3001\u3053\u3053\u3067 RSA \u6697\u53f7\u65b9\u5f0f\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u304a\u3055\u3089\u3044\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nRSA \u6697\u53f7\u65b9\u5f0f\u306e\u304a\u3055\u3089\u3044\n\u307e\u305a\u306f\u3001\u79d8\u5bc6\u9375 / \u516c\u958b\u9375\u306e\u751f\u6210\u304b\u3089\u3067\u3059\u3002\n\n\u5927\u304d\u306a\u7d20\u6570 $p$ \u3068 $q$ \u3092\u751f\u6210\u3057\u3001$n = pq$ \u3068\u3059\u308b\n$gcd(e, (p - 1)(q - 1)) = 1$ \u3068\u306a\u308b\u6570 $e$ \u3092\u5b9a\u3081\u3066\u3001$\\{e, n\\}$ \u3092\u516c\u958b\u9375\u3068\u3059\u308b\n$1 \\equiv de \\pmod{(p - 1)(q - 1)}$ \u3068\u306a\u308b $d$ \u3092\u751f\u6210\u3057\u3001\u79d8\u5bc6\u9375\u3068\u3059\u308b\n\n\u6697\u53f7\u5316 / \u5fa9\u53f7\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u64cd\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5e73\u6587\u3092 $M$ \u3068\u3059\u308b\u3068 $C \\equiv M^e \\pmod{n}$ \u304c\u6697\u53f7\u6587\u3068\u306a\u308b\n\u6697\u53f7\u6587 $C$ \u306f $M \\equiv C^d \\pmod{n}$ \u3067\u5fa9\u53f7\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\u516c\u958b\u9375 $\\{e, n\\}$ \u3067\u6697\u53f7\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306f\u79d8\u5bc6\u9375 $d$ \u3092\u6301\u3063\u3066\u3044\u308b\u4eba\u3060\u3051\u304c\u5fa9\u53f7\u3067\u304d\u308b\u306e\u3067\u3057\u305f\u3002\n\u4eca\u56de\u4f7f\u3046\u3001\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u306e\u751f\u6210\u3068\u691c\u8a3c\u306f\u4ee5\u4e0b\u306e\u64cd\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u7f72\u540d\u3059\u308b\u30c7\u30fc\u30bf\u3092 $M$ \u3068\u3059\u308b\u3068 $S \\equiv M^d \\pmod{n}$ \u304c\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u3068\u306a\u308b\n\u30c7\u30fc\u30bf $M$ \u3068 $m \\equiv S^e \\pmod{n}$ \u304c\u4e00\u81f4\u3059\u308c\u3070\u3001$S$ \u306f $d$ \u3092\u6301\u3064\u4eba\u304c $M$ \u306b\u5bfe\u3057\u3066\u751f\u6210\u3057\u305f\u7f72\u540d\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u8a3c\u660e\u3055\u308c\u308b\n\n\u4eca\u56de\u306e\u5834\u5408\u3001ID token \u304b\u3089\u751f\u6210\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u3092 $m$ \u3001JWS Signature \u3092 $S$ \u3001Google \u306e\u516c\u958b\u9375\u3092 $\\{e, n\\}$ \u3068\u3059\u308b\u3068\u3001$m \\equiv S^{e} \\pmod{n}$ \u304c\u6210\u7acb\u3059\u308c\u3070\u3001ID token \u304c Google \u304b\u3089\u767a\u884c\u3055\u308c\u305f\u3082\u306e\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u8a3c\u660e\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u516c\u958b\u9375\u306e\u5165\u624b\n\u3055\u3066\u3001ID token \u306b\u4ed8\u4e0e\u3055\u308c\u305f Google \u306e\u96fb\u5b50\u7f72\u540d\u3092\u691c\u8a3c\u3059\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u305d\u306e\u305f\u3081\u306b\u306f\u3082\u3061\u308d\u3093 Google \u306e\u516c\u958b\u9375\u3092\u5165\u624b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u516c\u958b\u9375\u306f\u3069\u3046\u3084\u3063\u3066\u898b\u3064\u3051\u308c\u3070\u3044\u3044\u3093\u3067\u3057\u3087\u3046\u304b\u3002\nOpenID Connect \u306e\u4ed5\u69d8\u306b\u623b\u3063\u3066\u307f\u308b\u3068\u300115.3. Discovery and Registration \u306b\n\n\u3057\u304b\u3057\u3001\u4e8b\u524d\u767b\u9332\u306e\u306a\u3044Relying Party\u3068OpenID Provider\u9593\u306e\u4e88\u671f\u3057\u306a\u3044\u3084\u308a\u3068\u308a\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3092\u9078\u629e\u3057\u305f\u306a\u3089\u3070\u3001OpenID Discovery 1.0 [OpenID.Discovery]\u3068OpenID Connect Dynamic Client Registration 1.0 [OpenID.Registration]\u306e\u4ed5\u69d8\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30b7\u30ea\u30c6\u30a3\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u3053\u308c\u3092\u9042\u884c\u3059\u308b\u3079\u304d\u3067\u3042\u308b(SHOULD)\u3002\n\n\u3068\u3042\u308a\u307e\u3059\u3002OpenID Connect Discovery 1.0 \u306e Abstract \u306b\u306f\u3001\n\nThis specification defines a mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.\n\n\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u3069\u3046\u3084\u3089\u3053\u306e OpenID Connect Discovery 1.0 \u3068\u3044\u3046\u898f\u683c\u306b\u3001RP \u304c OP \u3068\u3084\u308a\u3068\u308a\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30eb\u304c\u5b9a\u3081\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3055\u3089\u306b\u8aad\u307f\u9032\u3081\u3066 3. OpenID Provider metadata \u3092\u898b\u308b\u3068\u3001\n\njwks_uri\nREQUIRED. URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP.\n\n\u3068\u3042\u308a\u307e\u3059\u3002\u3053\u306e jwks_uri \u306b ID token \u306e\u7f72\u540d\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306e\u516c\u958b\u9375\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002Google \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u623b\u3063\u3066 The Discovery document \u306e\u9805\u76ee\u3092\u898b\u308b\u3068\u3001\u305d\u308c\u3089\u3057\u3044 URL \u304c\u3042\u308a\u307e\u3059\u3002\nhttps://accounts.google.com/.well-known/openid-configuration\n\u8a66\u3057\u306b\u3053\u306e URL \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\n$ curl https://accounts.google.com/.well-known/openid-configuration\n{\n \"issuer\": \"https://accounts.google.com\",\n \"authorization_endpoint\": \"https://accounts.google.com/o/oauth2/v2/auth\",\n \"token_endpoint\": \"https://www.googleapis.com/oauth2/v4/token\",\n \"userinfo_endpoint\": \"https://www.googleapis.com/oauth2/v3/userinfo\",\n \"revocation_endpoint\": \"https://accounts.google.com/o/oauth2/revoke\",\n \"jwks_uri\": \"https://www.googleapis.com/oauth2/v3/certs\",\n \"response_types_supported\": [\n  \"code\",\n  \"token\",\n  \"id_token\",\n  \"code token\",\n  \"code id_token\",\n  \"token id_token\",\n  \"code token id_token\",\n  \"none\"\n ],\n \"subject_types_supported\": [\n  \"public\"\n ],\n \"id_token_signing_alg_values_supported\": [\n  \"RS256\"\n ],\n \"scopes_supported\": [\n  \"openid\",\n  \"email\",\n  \"profile\"\n ],\n \"token_endpoint_auth_methods_supported\": [\n  \"client_secret_post\",\n  \"client_secret_basic\"\n ],\n \"claims_supported\": [\n  \"aud\",\n  \"email\",\n  \"email_verified\",\n  \"exp\",\n  \"family_name\",\n  \"given_name\",\n  \"iat\",\n  \"iss\",\n  \"locale\",\n  \"name\",\n  \"picture\",\n  \"sub\"\n ]\n}\n\njkws_uri \u306b URL \u304c\u3042\u308b\u306e\u3067\u3001\u3055\u3089\u306b\u305d\u3053\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\n$ curl https://www.googleapis.com/oauth2/v3/certs\n{\n \"keys\": [\n  {\n   \"kty\": \"RSA\",\n   \"alg\": \"RS256\",\n   \"use\": \"sig\",\n   \"kid\": \"2b2e82106791dc8fad7815d7fb544a62f72c16fa\",\n   \"n\": \"r6np6v_txgmicJ49GvxGhCKCIEcbthqRN2XvM0W8_UDoWrSn5cNvOI3hL8mRapHS673fZfLFcPLno8lfvXEXWk-1a6z4RdFniuGd6Hb6PCUmiKqz6lc8DBpaK57eWSv1ySQoVdSXqlB5NDSxQvkcme6InLK_fMhWj95ecaZeNBbVBM4NBlgRrFc-2OM221USY7s_RtlVJXCG0nBkzhVcHJrohQnq7f436Ba_WZuT7lSeZyHpHu7kCUrZY672AfDaoNM7Qe2__DUdWQvlS0v9kKQvigZquDQhnVG_dsT5jlUQPAEwru-3rorvwWvugIn8VQWmdsmXNx7JZnZ1gi6tMQ\",\n   \"e\": \"AQAB\"\n  },\n  {\n   \"kty\": \"RSA\",\n   \"alg\": \"RS256\",\n   \"use\": \"sig\",\n   \"kid\": \"da0b5d4244ccfb75b2708416295f05d518ca6903\",\n   \"n\": \"wnfD2k6iOI8IdDTKPY4J6HFOT1nKor6v2xEZ9G2n1_KtPs5-5aC8W_SvRTzXF9Ym-BeoQI5mfHSbaYafbeEDaCSVpxXja1K8n7EAlpYVGydTHgL2NLHADb-Gtkkiv8Gw9sSyea_foPW_i2YknOIyBM4A2Sxqf9VPQTSTj5zJGFtRnyQYuuTprxqj9qgZfAAhrGCizsW8bm62nH2DYORQ10rwaiY9kL4gVOPrU39vaB80YX5a2N-TRzDCzHaKlo9vSBMzysFs1WFmb9VdOLuIae1I7h50KFUIDncxv7tGrVxnYBi_etNl989JmDtDzLnPK3u4AMFEGcha52Y2QwxQeQ\",\n   \"e\": \"AQAB\"\n  }\n ]\n}\n\n\u3042\u308a\u307e\u3057\u305f\uff01RSA \u306e\u516c\u958b\u9375 $\\{e, n\\}$ \u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\uff01\n$\\{e, n\\}$ \u306e\u7d44\u304c 2 \u3064\u898b\u3048\u307e\u3059\u304c\u3001ID token \u306e JOSE Header {\"alg\":\"RS256\",\"kid\":\"da0b5d4244ccfb75b2708416295f05d518ca6903\"} \u306e kid \u3068\u4e00\u81f4\u3059\u308b\u307b\u3046\u306e $\\{e, n\\}$ \u304c\u9375\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n# \u516c\u958b\u9375\u306e URL \u304c https://accounts.google.com/.well-known/openid-configuration \u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u6839\u672c\u7684\u306b\u306f\u3053\u306e URL \u306e SSL \u8a3c\u660e\u66f8\u304c JWT \u306e\u6b63\u5f53\u6027\u3092\u4fdd\u8a3c\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308b\u3093\u3060\u308d\u304b\u3002\u3002\u3002\n\n\u691c\u8a3c\u3057\u3066\u307f\u308b\n\u3053\u308c\u3067\u5fc5\u8981\u306a\u3082\u306e\u306f\u63c3\u3044\u307e\u3057\u305f\u3002\n\u307e\u305a\u306f\u7f72\u540d\u306e\u5bfe\u8c61\u3068\u306a\u308b\u30cf\u30c3\u30b7\u30e5\u5024 $m$ \u3067\u3059\u3002\u3053\u308c\u306f\u3001RFC7515 5.2. - Example JWS \u306b\u3088\u308b\u3068\u3001\n\n8.Validate the JWS Signature against the JWS Signing Input ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS Payload)) in the manner defined for the algorithm being used, which MUST be accurately represented by the value of the \"alg\" (algorithm) Header Parameter, which MUST be present. See Section 10.6 for security considerations on algorithm validation.  Record whether the validation succeeded or not.\n\n\u3068\u3042\u308b\u901a\u308a\u30012\u756a\u76ee\u306e\u30d4\u30ea\u30aa\u30c9\u306e\u624b\u524d\u307e\u3067\u304c\u5e73\u6587\u306b\u542b\u307e\u308c\u308b\u3088\u3046\u3067\u3059(1\uff5e7\u307e\u3067\u306e\u30b9\u30c6\u30c3\u30d7\u306e\u9593\u3067\u3001JOSE Header \u304c JWS Protected Header \u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059)\u3002\u7f72\u540d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u3001SHA-256 \u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001$m$ \u306f\u3001\u3053\u306e\u5e73\u6587\u306e SHA-256 \u30cf\u30c3\u30b7\u30e5\u5024\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\u6b21\u306b JWS Signature $S$ \u3067\u3059\u3002\u3053\u308c\u306f 2 \u756a\u76ee\u306e\u30d4\u30ea\u30aa\u30c9\u3088\u308a\u5f8c\u306e\u90e8\u5206\u3067\u3059\u306d\u3002\n$\\{e,n\\}$ \u306f jkws_uri \u304b\u3089\u53d6\u5f97\u3057\u305f\u516c\u958b\u9375\u3067\u3059\u3002\n\u3053\u308c\u3089\u306e\u5024\u304b\u3089 $m = S^{e} \\pmod {n}$ \u304c\u6210\u7acb\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3044\u306e\u3067\u3059\u304c\u3002\u3002\u3002$m$ \u3082 $S$ \u3082 $e$ \u3082 $n$ \u3082\u30d0\u30a4\u30c8\u5217\u3067\u3059\u3002\u3069\u3046\u8a08\u7b97\u3059\u308c\u3070\u3044\u3044\u3093\u3067\u3057\u3087\u3046\u304b\u3002\nRFC5725 - A.2.2. Validating \u306b\u623b\u3063\u3066\u307f\u308b\u3068\u3001\n\nWe pass the public key (n, e), the JWS Signature (which is base64url decoded from the value encoded in the JWS representation), and the JWS Signing Input (which is the initial substring of the JWS Compact Serialization representation up until but not including the second period character) to an RSASSA-PKCS1-v1_5 signature verifier that has been configured to use the SHA-256 hash function.\n\n\u3068\u3042\u308a\u307e\u3059\u3002\u3069\u3046\u3084\u3089\u3001\u3055\u304d\u307b\u3069\u51fa\u3066\u304d\u305f RSASSA-PKCS1-v1_5 \u306b\u3001\u7f72\u540d\u306e\u691c\u8a3c\u306e\u5177\u4f53\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b9a\u3081\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\nRSASSA-PKCS1-v1_5\n\u3067\u306f\u3001RFC3447(PKCS#1) \u3092\u898b\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u3053\u306e\u898f\u683c\u3067\u306f\u3001\u516c\u958b\u9375\u6697\u53f7\u65b9\u5f0f\u3092\u5229\u7528\u3057\u305f\u6697\u53f7\u5316\u3068\u5fa9\u53f7\u3001\u7f72\u540d\u306e\u4f5c\u6210\u3068\u691c\u8a3c\u7b49\u306e\u5177\u4f53\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b9a\u3081\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u4eca\u56de\u306e\u8a72\u5f53\u90e8\u5206\u3001RFC3447 - 8.2. RSASSA-PKCS1-v1_5 \u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u306e\u7bc0\u306f\u3055\u3089\u306b\u3001\u7f72\u540d\u306e\u751f\u6210\u3068\u691c\u8a3c\u306e\u7bc0\u306b\u5206\u304b\u308c\u3066\u304a\u308a\u3001\u305d\u308c\u305e\u308c\u306e\u64cd\u4f5c\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7f72\u540d\u306e\u691c\u8a3c\u306f RFC3447 - 8.2.2. Signature verification operation \u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u7f72\u540d\u306e\u691c\u8a3c\u306e\u64cd\u4f5c\u304c RSASSA-PKCS1-V1_5-VERIFY ((n, e), M, S) \u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u5165\u529b\u304b\u3089\u9806\u306b\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nInput:\n\u3000\u3000(n, e)\u3000\u3000signer's RSA public key\n\u3000\u3000M\u3000\u3000\u3000\u3000message whose signature is to be verified, an octet string\n\u3000\u3000S\u3000\u3000\u3000\u3000signature to be verified, an octet string of length k, where k is the length in octets of the RSA modulus n\n\n\u3053\u308c\u3089\u306f\u3059\u3067\u306b\u624b\u5143\u306b\u3042\u308a\u307e\u3059\u3002$\\{e,n\\}$ \u306b\u3064\u3044\u3066\u306f\u660e\u793a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001$M$ \u3068 $S$ \u306f\u30aa\u30af\u30c6\u30c3\u30c8\u5217(\u30d0\u30a4\u30c8\u5217)\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\nOutput:\n\u3000\u3000\"valid signature\" or \"invalid signature\"\n\n\u51fa\u529b\u306f\u3082\u3061\u308d\u3093\u6709\u52b9\u306a\u7f72\u540d\u3067\u3042\u308b\u304b\u305d\u3046\u3067\u306a\u3044\u304b\u306e 2 \u629e\u3067\u3059\u306d\u3002\u4eca\u56de\u306f \"valid signature\" \u304c\u51fa\u529b\u3055\u308c\u308c\u3070\u6674\u308c\u3066\u691c\u8a3c\u6210\u529f\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3067\u306f\u65e9\u901f\u3001Step 1 \u304b\u3089\u9806\u306b\u8ffd\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\nLength checking: If the length of the signature S is not k octets, output \"invalid signature\" and stop.\n\n\n$S$ \u306e\u30d0\u30a4\u30c8\u6570\u3068 $n$ \u306e\u30d0\u30a4\u30c8\u6570\u304c\u4e00\u81f4\u3057\u3066\u3044\u306a\u3051\u308c\u3070 \"invalid signature\" \u3092\u51fa\u529b\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002\n\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nstep1.py\nimport base64\n\nb64_n_from_certs = 'wnfD2k6iOI8IdDTKPY4J6HFOT1nKor6v2xEZ9G2n1_KtPs5-5aC8W_SvRTzXF9Ym-BeoQI5mfHSbaYafbeEDaCSVpxXja1K8n7EAlpYVGydTHgL2NLHADb-Gtkkiv8Gw9sSyea_foPW_i2YknOIyBM4A2Sxqf9VPQTSTj5zJGFtRnyQYuuTprxqj9qgZfAAhrGCizsW8bm62nH2DYORQ10rwaiY9kL4gVOPrU39vaB80YX5a2N-TRzDCzHaKlo9vSBMzysFs1WFmb9VdOLuIae1I7h50KFUIDncxv7tGrVxnYBi_etNl989JmDtDzLnPK3u4AMFEGcha52Y2QwxQeQ=='\n\nb64_s_from_jws = 'bzNpok6tybsHOicXvbP9Q97kKO14ei3B1DXlNa8LFiZj8rQJfnm_rATRlMFEGs1fsW5Av7srDy-2JjdEbQufHbYlUBXIJh7_sBwI_qU6NIYn2t8hcGpMnXoe2z0BtkP3CyvvTINRVxA6WwHv_Teh0nzxnaxmcOVm0ajLKT603Crtt4MNur_azADTxNxYafaQ5o7XOo9V0PMM0nVy6kqn-N3IjxBPNXqQapmxub6qzJcRsOyAjOyzK1hRAuxvX9vd9fAoBf4ycpbeTWIy7nQIeEU8kl2lTNSb9DBZrsVP7GzhFRdEMDIxctcBoqXDxBuYLuSXGlnMyfSYy0sU39VBtw=='\n\nbin_n = base64.urlsafe_b64decode(b64_n_from_certs)\nbin_s = base64.urlsafe_b64decode(b64_s_from_jws)\n\nprint('len(bin_n) = %d' % len(bin_n))\nprint('len(bin_s) = %d' % len(bin_s))\n\n\n\u5fc5\u8981\u306a padding \u3092\u8ffd\u52a0\u3057\u305f\u4e0a\u3067 Base64url decode \u3057\u3066\u307f\u3066\u7d50\u679c\u306e\u30d0\u30a4\u30c8\u5217\u306e\u9577\u3055\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3059\u3002\n$ python3 step1.py\nlen(bin_n) = 256\nlen(bin_s) = 256\n\n\u3069\u3061\u3089\u3082 256 \u30d0\u30a4\u30c8\u3067\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n2.RSA verification:\n\n\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u7f72\u540d $S$ \u3092\u516c\u958b\u9375 $\\{e,n\\}$ \u3067\u5fa9\u53f7\u3059\u308b\u64cd\u4f5c\u3067\u3059\u3002\u3053\u308c\u306f a \uff5e c \u306e3\u3064\u306e\u64cd\u4f5c\u304b\u3089\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\na. Convert the signature S to an integer signature representative s (see Section 4.2):\n\u3000\u3000\u3000s = OS2IP (S).\n\n\u3053\u3053\u3067\u898b\u6163\u308c\u306a\u3044\u95a2\u6570\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002RFC3447 - 4.2 OS2IP \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u305d\u3061\u3089\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\nOS2IP converts an octet string to a nonnegative integer.\nOS2IP (X)\n\u3000\u3000Input:\n\u3000\u3000\u3000\u3000X        octet string to be converted\n\u3000\u3000Output:\n\u3000\u3000\u3000\u3000x        corresponding nonnegative integer\n\n\u3069\u3046\u3084\u3089\u3001\u30d0\u30a4\u30c8\u5217\u3092\u6b63\u306e\u6574\u6570\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u306e\u3088\u3046\u3067\u3059\u3002\n\u3053\u3053\u3067\u898f\u5b9a\u3055\u308c\u3066\u3044\u308b\u901a\u308a\u306b\u5b9f\u88c5\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nprimitives.py\ndef OS2IP(octet_string):\n    # http://tools.ietf.org/html/rfc3447#section-4.2\n    x = 0\n    i = 1\n    for octet in reversed(octet_string):\n        x += octet * i\n        i *= 256\n\n    return x\n\n\n\u5165\u529b\u30d0\u30a4\u30c8\u5217\u3092 256 \u9032\u6570\u306e\u5de8\u5927\u306a\u6574\u6570\u3060\u3068\u89e3\u91c8\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\nRSASSA-PKCS1-V1_5-VERIFY \u306b\u623b\u308a\u307e\u3059\u3002\u7f72\u540d $S$ \u306b OS2IP \u3092\u9069\u7528\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5de8\u5927\u306a 10 \u9032\u6574\u6570\u306b\u306a\u308a\u307e\u3059\u3002\n\nstep2a.py\nint_s = OS2IP(bin_s)\n\nprint(int_s)\n\n\n$ python3 step2a.py\n14037804365398619033799742640081377671043057392694415291597804147713491410445513866006008669704199482642441064706170013125771718244722040567525603708239315719194626418847133365097820713692422830687511756532781524139994240604245694191169325425909683490950378139360773189150119316465859211171776644949608317203118384030102880369548355566253684947673392290546588239119176056964914307676545633029747304365762240535067374062714801022561146061109390909542430785821617643241252874218057283792444274583960379759363660222517314804403953534923619970309443919685333767236614480532808644706485562780884529114424361077491176391095\n\n\u7d9a\u3044\u3066 RSASSA-PKCS1-V1_5-VERIFY \u306e 2b \u306b\u9032\u307f\u307e\u3059\u3002\n\nb. Apply the RSAVP1 verification primitive (Section 5.2.2) to the RSA public key (n, e) and the signature representative s to produce an integer message representative m:\n\u3000\u3000\u3000m = RSAVP1 ((n, e), s).\nIf RSAVP1 outputs \"signature representative out of range,\" output \"invalid signature\" and stop.\n\nRSA \u306e\u6570\u5f0f $m = S^{e} \\pmod{n}$ \u3092\u5b9f\u884c\u3059\u308b\u30b9\u30c6\u30c3\u30d7\u306e\u3088\u3046\u3067\u3059(RFC3447 - 5.2.2 RSAVP1)\u3002\u3057\u304b\u3057\u3001$\\{n,e\\}$ \u306f(\u304a\u305d\u3089\u304f) Base64url encode \u3055\u308c\u305f\u30d0\u30a4\u30c8\u5217\u3067\u3059\u3002\u5148\u307b\u3069\u306e OS2IP \u3092 $\\{n,e\\}$ \u306b\u3082\u9069\u7528\u3057\u3066\u6574\u6570\u306b\u5909\u63db\u3057\u305f\u4e0a\u3067\u3001RSAVP1 \u306e\u9069\u7528\u307e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n(\u3053\u306e\u90e8\u5206\u306e\u4ed5\u69d8\u304c\u660e\u8a18\u3055\u308c\u305f\u90e8\u5206\u304c\u7d50\u5c40\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\u3002)\n\nprimitives.py\ndef RSAVP1(int_n, int_e, int_s):\n    # http://tools.ietf.org/html/rfc3447#section-5.2.2\n    if int_s < 0 or int_n - 1 < int_s:\n        raise Exception('signature representative out of range')\n\n    m = pow(int_s, int_e, int_n)\n\n    return m\n\n\n\nstep2b.py\nint_n = crypto.primitives.OS2IP(bin_n)\n\nb64_e_from_certs = 'AQAB'\nbin_e = base64.urlsafe_b64decode(b64_e_from_certs)\nint_e = crypto.primitives.OS2IP(bin_e)\n\nint_m = RSAVP1(int_n, int_e, int_s)\n\nprint(int_m)\n\n\n$ python3 step2b.py\n986236757547332986472011617696226561292849812918563355472727826767720188564083584387121625107510786855734801053524719833194566624465665316622563244215340671405971599343902468620306327831715457360719532421388780770165778156818229863337344187575566725786793391480600129482653072861971002459947277805295727097226389568776499707662505334062639449916265137796823793276300221537201727072401742985542559596685092673521228140822200236743113743661549252453726123450722876929538747702356573783116197523966334991563351853851212597377279504828784675811158154858862009196731249195722389749547251860179386006643765857644703155\n\n\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\n\nc. Convert the message representative m to an encoded message EM of length k octets (see Section 4.1):\n\u3000\u3000\u3000EM' = I2OSP (m, k).\nIf I2OSP outputs \"integer too large,\" output \"invalid signature\" and stop.\n\n(\u6587\u4e2d\u3067\u306f EM \u3092\u751f\u6210\u3059\u308b\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5f0f\u306e\u90e8\u5206\u3067\u306f EM' \u304c\u751f\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002 https://www.rfc-editor.org/errata_search.php?rfc=3447&eid=594 \u306b\u3088\u308b\u3068\u3084\u306f\u308a EM = I2OSP (m, k). \u304c\u6b63\u3057\u3044\u3088\u3046\u3067\u3059\u3002)\n\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u306f\u3001\u5148\u307b\u3069\u7b97\u51fa\u3057\u305f\u6574\u6570\u5024 $m$ \u3092\u9577\u3055 $k$ \u306e\u30d0\u30a4\u30c8\u5217\u306b\u5909\u63db\u3059\u308b\u3088\u3046\u3067\u3059\u3002OS2IP \u306e\u9006\u5909\u63db\u3067\u3059\u3002RFC3447 - 4.1 I2OSP \u306e\u5b9a\u7fa9\u901a\u308a\u306b\u5b9f\u88c5\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\nprimitives.py\ndef I2OSP(int_v, str_len):\n    # http://tools.ietf.org/html/rfc3447#section-4.1\n    if int_v.bit_length() / 8 + 1 > str_len:\n        raise Exception('integer too large')\n\n    octet_string = b''\n    while str_len > 0:\n        if int_v > 0:\n            digit = int_v % 256\n            int_v = int_v >> 8\n            octet_string = digit.to_bytes(1, byteorder='big') + octet_string\n        else:\n            octet_string = b'\\x00' + octet_string\n\n        str_len -= 1\n\n    return octet_string\n\n\n\nstep2c.py\nk = len(bin_n)\nem = I2OSP(int_m, k)\nprint(binascii.b2a_hex(em))\n\n\n$ python3 step2c.py\nb'0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003031300d0609608648016503040201050004200c066e94c392758e604ed753d81048699aa61f93af9964df09f106504c07edb3'\n\n\u3053\u3053\u307e\u3067\u3067\u3001$m = S^{e} \\pmod{n}$ \u304c\u5c0e\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\n\u6b21\u306f\u3001$m$ \u3068\u6bd4\u8f03\u3059\u308b\u305f\u3081\u306b\u3001\u7f72\u540d\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf $M$ \u304b\u3089\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n3.EMSA-PKCS1-v1_5 encoding: Apply the EMSA-PKCS1-v1_5 encoding\n\u3000operation (Section 9.2) to the message M to produce a second\n\u3000encoded message EM' of length k octets:\n\u3000\n\u3000\u3000\u3000EM' = EMSA-PKCS1-V1_5-ENCODE (M, k).\n\u3000\n\u3000If the encoding operation outputs \"message too long,\" output\n\u3000\"message too long\" and stop.  If the encoding operation outputs\n\u3000\"intended encoded message length too short,\" output \"RSA modulus\n\u3000too short\" and stop.\n\nRFC3447 - 9.2 EMSA-PKCS1-v1_5 \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u3001\u30a8\u30f3\u30b3\u30fc\u30c9\u6e08\u307f\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u51e6\u7406\u306f\u3044\u304f\u3089\u304b\u8907\u96d1\u306a\u306e\u3067\u3001\u9806\u3092\u8ffd\u3063\u3066\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\nEMSA-PKCS1-v1_5-ENCODE (M, emLen)\n\u3000\u3000\u3000Option:\n\u3000\u3000\u3000Hash\u3000\u3000hash function (hLen denotes the length in octets of the hash function output)\n\u3000\u3000\u3000Input:\n\u3000\u3000\u3000M\u3000\u3000\u3000message to be encoded\n\u3000\u3000\u3000emLen\u3000intended length in octets of the encoded message, at least\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000tLen + 11, where tLen is the octet length of the DER\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000encoding T of a certain value computed during the encoding\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000operation\n\u3000\u3000\u3000Output:\n\u3000\u3000\u3000EM\u3000\u3000encoded message, an octet string of length emLen\n\u3000\u3000\u3000Errors:\n\u3000\u3000\u3000\"message too long\"; \"intended encoded message length too short\"\n\n\u307e\u305a\u306f\u5165\u51fa\u529b\u306e\u78ba\u8a8d\u304b\u3089\u3002\u5165\u529b\u3068\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u51fa\u529b\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9577\u3055\u3092\u53d7\u3051\u53d6\u308a\u3001\u30a8\u30f3\u30b3\u30fc\u30c9\u6e08\u307f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8(\u30d0\u30a4\u30c8\u5217)\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u3067\u3059\u3002\u307e\u305f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306e\u7a2e\u985e\u3082\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3067\u306f\u51e6\u7406\u306e\u6d41\u308c\u3092\u8ffd\u3063\u3066\u307f\u307e\u3059\u3002\n\n1.Apply the hash function to the message M to produce a hash value\n\u3000\u3000H:\n\u3000\u3000\u3000H = Hash(M).\n\u3000If the hash function outputs \"message too long,\" output \"message\n\u3000too long\" and stop.\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u5404\u8a00\u8a9e\u306e\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3059\u308c\u3070\u6c42\u3081\u3089\u308c\u305d\u3046\u3067\u3059\u3002\n\n2.Encode the algorithm ID for the hash function and the hash value\n\u3000into an ASN.1 value of type DigestInfo (see Appendix A.2.4) with\n\u3000the Distinguished Encoding Rules (DER), where the type DigestInfo\n\u3000has the syntax\n\u3000\n\u3000DigestInfo ::= SEQUENCE {\n\u3000\u3000\u3000digestAlgorithm AlgorithmIdentifier,\n\u3000\u3000\u3000digest OCTET STRING\n\u3000}\n\u3000\n\u3000The first field identifies the hash function and the second\n\u3000contains the hash value.  Let T be the DER encoding of the\n\u3000DigestInfo value (see the notes below) and let tLen be the length\n\u3000in octets of T.\n\n\u3053\u3053\u304c\u5b9f\u88c5\u3068\u3057\u3066\u306f\u4e00\u756a\u5384\u4ecb\u305d\u3046\u3067\u3059\u3002\u30cf\u30c3\u30b7\u30e5\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u793a\u3059 ID \u3068\u30cf\u30c3\u30b7\u30e5\u5024\u3092 ASN.1 \u3068\u547c\u3070\u308c\u308b\u8a18\u6cd5\u3067\u8a18\u8ff0\u3057\u3066\u3001DER \u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\u3002\nASN.1 \u8a18\u6cd5\u3068 DER \u30a8\u30f3\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306f\u3053\u3053\u3067\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u3001\u4ed5\u69d8\u306f\u4ee5\u4e0b\u306e pdf \u306b\u3042\u308a\u307e\u3059\u3002\nhttps://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf\n\u307e\u305f\u3001\u65e5\u672c\u8a9e\u3060\u3068\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u306b\u8a73\u7d30\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\nhttp://www.geocities.co.jp/SiliconValley-SanJose/3377/\ndigestAlgorithm \u306b\u306f\u3001\u30cf\u30c3\u30b7\u30e5\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8868\u3059 OID(Object ID) \u3068\u3001\u30cf\u30c3\u30b7\u30e5\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30d1\u30e9\u30e1\u30fc\u30bf(NULL) \u304c SEQUENCE \u3068\u3057\u3066\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002OID \u306e\u5024\u306f\u3001RFC3447 - A.2.4 RSASSA-PKCS1-v1_5 -> RFC3447 - B.1 Hash functions \u3068\u8fbf\u3063\u305f\u5148\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306e ID Token \u3067\u4f7f\u308f\u308c\u3066\u3044\u308b SHA-256 \u3060\u3068\u3001\n\nid-sha256\u3000\u3000OBJECT IDENTIFIER ::= {\n\u3000\u3000joint-iso-itu-t(2) country(16) us(840) organization(1)\n\u3000\u3000gov(101) csor(3) nistalgorithm(4) hashalgs(2) 1\n}\n\n\u3068\u3042\u308b\u3053\u3068\u304b\u3089\u30012.16.840.1.101.3.4.2.1 \u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\ndigest \u306e\u307b\u3046\u306f\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u30d0\u30a4\u30ca\u30ea\u304c OCTET STRING \u3068\u3057\u3066\u305d\u306e\u307e\u307e\u5165\u308a\u307e\u3059\u3002\nDER \u30a8\u30f3\u30b3\u30fc\u30c9\u5f8c\u306e\u5024\u306e 16 \u9032\u30c0\u30f3\u30d7\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002(\u5148\u982d\u304b\u3089 3 \u30d3\u30c3\u30c8\u76ee\u306e\u69cb\u9020\u5316\u30d5\u30e9\u30b0\u3092 ON \u306b\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002)\n3031300d06096086480165030402010500042004b459d578f2fe14a4b30e0ab7991096521c445a620ce90e5bf7329ef43c3484\n\n3.If emLen < tLen + 11, output \"intended encoded message length too\n\u3000short\" and stop.\n\n\u6b21\u306f\u30a8\u30f3\u30b3\u30fc\u30c9\u5f8c\u306e\u5024\u306e\u9577\u3055\u30c1\u30a7\u30c3\u30af\u3067\u3059\u3002\n$emLen = k > len(tLen) + 11$ \u306a\u306e\u3067\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n4.Generate an octet string PS consisting of emLen - tLen - 3 octets\n\u3000with hexadecimal value 0xff.  The length of PS will be at least 8\n\u3000octets.\n\n\u51fa\u529b\u30b5\u30a4\u30ba\u3092 $emLen$ \u306b\u3059\u308b\u305f\u3081\u30010xff \u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u30d0\u30a4\u30c8\u5217\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n5.Concatenate PS, the DER encoding T, and other padding to form the\n\u3000encoded message EM as\n\u3000\n\u3000\u3000\u3000EM = 0x00 || 0x01 || PS || 0x00 || T.\n\u3000\n6. Output EM.\n\n\u56fa\u5b9a\u306e 3 \u30d0\u30a4\u30c8\u3068\u30d1\u30c7\u30a3\u30f3\u30b0\u30d0\u30a4\u30c8\u5217\u3001DER \u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u60c5\u5831\u3092\u7d50\u5408\u3057\u3066\u3001EMSA-PKCS1-v1_5-ENCODE (M, emLen) \u306e\u51fa\u529b\u3068\u3057\u307e\u3059\u3002\n\u3053\u306e\u3042\u305f\u308a\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u3001\u65e5\u672c\u8a9e\u3060\u3068\u4ee5\u4e0b\u306e blog \u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\nhttp://blog.livedoor.jp/k_urushima/archives/979220.html\nASN.1 \u30a8\u30f3\u30b3\u30fc\u30c9\u306e\u90e8\u5206\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u96a0\u853d\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u304c\u3001EMSA-PKCS1-v1_5-ENCODE \u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nprimitives.py\ndef EMSA_PKCS1_V1_5_ENCODE(os_m, em_len, hash_function='sha256'):\n    # http://tools.ietf.org/html/rfc3447#section-9.2\n    digest_info = asn1.types.ASN1Sequence()\n\n    digest_algo = asn1.types.ASN1Sequence()\n    algo_identifier = asn1.types.ASN1ObjectIdentifier()\n    if hash_function == 'sha256':\n        algo_identifier.oid = '2.16.840.1.101.3.4.2.1'\n    else:\n        raise Exception('unsupported hash function')\n    digest_algo.children.append(algo_identifier)\n\n    null_obj = asn1.types.ASN1Null()\n    digest_algo.children.append(null_obj)\n\n    digest_info.children.append(digest_algo)\n\n    h = hashlib.new(hash_function)\n    h.update(os_m)\n    digest = asn1.types.ASN1OctetString(h.digest())\n    digest_info.children.append(digest)\n\n    bin_digest_info = digest_info.encode()\n    t_len = len(bin_digest_info)\n\n    if em_len < t_len + 11:\n        raise Exception('intended encoded message length too short')\n\n    ps_len = int(em_len - t_len - 3)\n\n    byte_array = []\n    byte_array.append(0x00)\n    byte_array.append(0x01)\n    for i in range(ps_len):\n        byte_array.append(0xff)\n    byte_array.append(0x00)\n\n    return bytes(byte_array) + bin_digest_info\n\n\n\nstep3.py\nm_from_jws = 'eyJhbGciOiJSUzI1NiIsImtpZCI6ImRhMGI1ZDQyNDRjY2ZiNzViMjcwODQxNjI5NWYwNWQ1MThjYTY5MDMifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXRfaGFzaCI6Ijd2ajAzMklIQWdzMEdNUGxOUDFkV2ciLCJhdWQiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExNzQ0MjQ1MDQ0MzI0NDAzNTk1NSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhenAiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImVtYWlsIjoiYm9idW5kZXJzb25AZ21haWwuY29tIiwiaWF0IjoxNDQzNzY4NzcxLCJleHAiOjE0NDM3NzIzNzF9'\n\nbin_m = m_from_jws.encode('utf-8')\n\nem_dash = EMSA_PKCS1_V1_5_ENCODE(bin_m, k)\nprint(binascii.b2a_hex(em_dash))\n\n\n$ python3 step3.py\nb'0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003031300d0609608648016503040201050004200c066e94c392758e604ed753d81048699aa61f93af9964df09f106504c07edb3'\n\n\n4.Compare the encoded message EM and the second encoded message EM'.\n\u3000If they are the same, output \"valid signature\"; otherwise, output\n\u3000\"invalid signature.\"\n\n\u3064\u3044\u306b\u6700\u5f8c\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\u7f72\u540d\u304b\u3089\u7b97\u51fa\u3057\u305f EM \u3068\u3001ID Token \u306e JOSE Header \u3068 JWS Payload \u306e\u30cf\u30c3\u30b7\u30e5\u5024\u304b\u3089\u7b97\u51fa\u3057\u305f EM' \u3068\u304c\u4e00\u81f4\u3059\u308c\u3070\u691c\u8a3c\u6210\u529f\u3067\u3059\u3002\u3002\u3002\n$ python3 step2c.py\nb'0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003031300d0609608648016503040201050004200c066e94c392758e604ed753d81048699aa61f93af9964df09f106504c07edb3'\n\n$ python3 step3.py\nb'0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003031300d0609608648016503040201050004200c066e94c392758e604ed753d81048699aa61f93af9964df09f106504c07edb3'\n\n\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\uff01\uff01\n\u7f72\u540d\u691c\u8a3c\u306e\u5168\u4f53\u306e\u6d41\u308c\u3092\u56f3\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n\u304a\u308f\u308a\u306b\n\u975e\u5e38\u306b\u9577\u3005\u3068\u66f8\u3044\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u7f72\u540d\u306e\u691c\u8a3c\u3060\u3051\u3067\u3082\u81ea\u529b\u3067\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u304b\u306a\u308a\u5927\u5909\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u304a\u5206\u304b\u308a\u3044\u305f\u3060\u3051\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u7b46\u8005\u3082\u6b63\u76f4\u7518\u304f\u898b\u3066\u307e\u3057\u305f\u3002\n\u672c\u65e5\u306e\u7d50\u8ad6\uff1a \u5de8\u4eba\u306e\u80a9\u306b\u4e57\u308d\u3046\uff01\uff01\n# \u306f\u3058\u3081\u306b\n\u7686\u3055\u3093\u3001OpenID Connect \u3092\u4f7f\u3063\u305f Web \u8a8d\u8a3c\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u3044\u3066\u3001\u300c\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3093\u304b\u306b\u983c\u308a\u305f\u304f\u306a\u3044\uff01\u300d\u3068\u304b\u300c\u7f72\u540d\u3092\u81ea\u5206\u3067\u30d1\u30fc\u30b9\u3057\u3066\u4e2d\u8eab\u898b\u3066\u307f\u305f\u3044\uff01\u300d\u3068\u304b\u300cOpenSSL \u306e RSA_verify \u547c\u3073\u51fa\u3059\u3060\u3051\u3058\u3083\u7269\u8db3\u308a\u306a\u3044\uff01\u81ea\u5206\u3067 $m = S^e \\pmod{n}$ \u3063\u3066\u3084\u3063\u3066\u7f72\u540d\u691c\u8a3c\u3057\u3066\u307f\u305f\u3044\uff01\u300d\u3063\u3066\u601d\u3046\u3053\u3068\u3088\u304f\u3042\u308a\u307e\u3059\u3088\u306d\uff1f\n\u3053\u3053\u3067\u306f\u3001\u6697\u53f7\u95a2\u9023\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u305b\u305a\u3001OpenID Connect \u306e JWT \u306e\u7f72\u540d\u3092\u81ea\u529b\u3067 \u691c\u8a3c\u3057\u305f\u969b\u306b\u8abf\u3079\u305f\u5185\u5bb9\u3092\u5099\u5fd8\u9332\u3068\u3057\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\u666e\u901a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u4efb\u305b\u306b\u3059\u308b\u7f72\u540d\u691c\u8a3c\u306e\u51e6\u7406\u3082\u81ea\u529b\u3067\u3084\u3063\u3066\u308b\u306e\u3067\u3001\u300cRSA \u6697\u53f7\u306e\u6570\u5f0f\u3082\u77e5\u3063\u3066\u308b\u3057\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u4f7f\u3048\u3070\u6697\u53f7\u5316\u3082\u3067\u304d\u308b\u3002\u3060\u3051\u3069\u3001\u5e73\u6587\u3068\u3057\u3066\u6307\u5b9a\u3057\u305f `hogehoge` \u3092\u3069\u3046\u3084\u3063\u3066\u3042\u306e\u6570\u5f0f\u306b\u5f53\u3066\u306f\u3081\u3066\u308b\u306e\u304b\u6c17\u306b\u306a\u3063\u3066\u591c\u3082\u7720\u308c\u306a\u3044\u300d\u3068\u3044\u3046\u4eba\u304c\u8aad\u3080\u3068\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u7720\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n# \u6ce8\u610f\u4e8b\u9805\n\u5b9f\u969b\u306b\u30b5\u30fc\u30d3\u30b9\u306e\u8a8d\u8a3c\u90e8\u5206\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u4eba\u306f**\u771f\u4f3c\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044**\u3002\u7d20\u76f4\u306b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u67af\u308c\u305f\u5b9f\u88c5\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\u3053\u3093\u306a\u306e\u81ea\u5206\u3067\u5b9f\u88c5\u3057\u3066\u308b\u3068\u3069\u3053\u306b\u8106\u5f31\u6027\u304c\u7d1b\u308c\u8fbc\u3080\u304b\u5206\u304b\u308a\u307e\u305b\u3093\u3002\n\u4ed5\u4e8b\u306e\u5408\u9593\u306e\u3072\u307e\u3064\u3076\u3057\u306b\u8aad\u3093\u3067\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u3053\u306e\u8a18\u4e8b\u306f\u7b46\u8005\u304c\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u307e\u3067\u306e\u904e\u7a0b\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u306a\u306e\u3067\u3001\u666e\u901a\u306a\u3089\u89e6\u308c\u308b\u3067\u3042\u308d\u3046\u95a2\u9023\u4e8b\u9805\u306a\u3069\u306f\u30b9\u30eb\u30fc\u3057\u3066\u3044\u308b\u90e8\u5206\u304c\u591a\u3044\u3067\u3059\u3002\u305d\u306e\u8fba\u306f\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u6539\u3081\u3066\u307e\u3068\u3081\u307e\u3059\u3002\n\n# \u30a2\u30ab\u30a6\u30f3\u30c8\u7ba1\u7406\u306a\u3093\u304b\u3084\u308a\u305f\u304f\u306a\u3044\n\u6628\u4eca\u3001\u306a\u3093\u3067\u3082\u304b\u3093\u3067\u3082 Web \u30b5\u30fc\u30d3\u30b9\u5316\u3055\u308c\u3066\u3001\u3042\u3061\u3053\u3061\u3067 ID / \u30d1\u30b9\u30ef\u30fc\u30c9 \u306e\u767b\u9332\u3092\u6c42\u3081\u3089\u308c\u3066\u3001\u767b\u9332\u3057\u305f\u3082\u306e\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5fd8\u308c\u3066 \uff3c(^o^)\uff0f\uff75\uff9c\uff80 \u306a\u72b6\u6cc1\u306b\u306a\u308b\u3053\u3068\u304c\u5897\u3048\u3066\u304d\u3066\u3044\u307e\u3059\u3002\n\u300c\u30b5\u30a4\u30c8\u6bce\u306b\u9055\u3046\u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u3057\u308d\u300d\u300c\u30d1\u30b9\u30ef\u30fc\u30c9\u306f\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u6570\u5b57\u8a18\u53f7\u3092\u542b\u3081\u306611\u6587\u5b57\u4ee5\u4e0a\u300d\u300c\u30e1\u30e2\u308b\u306a\u300d\u3068\u304b\u3044\u308d\u3044\u308d\u8a00\u308f\u308c\u3066\u30e6\u30fc\u30b6\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u7ba1\u7406\u306e\u8ca0\u62c5\u306f\u5897\u3048\u3066\u3044\u304f\u4e00\u65b9\u3067\u3059\u3002\n\n\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u767a\u884c\u3057\u3066\u7ba1\u7406\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u8005\u5074\u3082\u5927\u5909\u3067\u3059\u3002\u767a\u884c\u3057\u305f\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u60c5\u5831\u304c\u6f0f\u3048\u3044\u3067\u3082\u3057\u3066\u3001\u3055\u3089\u306b\u305d\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5225\u30b5\u30fc\u30d3\u30b9\u3067\u3082\u4f7f\u3044\u307e\u308f\u3055\u308c\u305f\u308a\u3057\u3066\u3044\u3088\u3046\u3082\u306e\u306a\u3089\u3053\u3061\u3089\u3082 \uff3c(^o^)\uff0f\uff75\uff9c\uff80 \u306a\u72b6\u6cc1\u306b\u306a\u308b\u3053\u3068\u306f\u9593\u9055\u3044\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Web \u30b5\u30fc\u30d3\u30b9\u306e\u5229\u7528\u8005\u3068\u3057\u3066\u3082\u3042\u3061\u3053\u3061\u306b\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u3063\u305f\u308a\u3057\u305f\u304f\u306a\u3044\u3057\u3001\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u5074\u3068\u3057\u3066\u3082\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u7ba1\u7406\u306a\u3093\u304b\u81ea\u5206\u3067\u3084\u308a\u305f\u304f\u306a\u3044\u308f\u3051\u3067\u3059\u3002\u3069\u3046\u305b\u6700\u8fd1\u306f\u8ab0\u3067\u3082 Google \u3084 Facebook \u3084 Yahoo! \u306a\u3093\u304b\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u6301\u3063\u3066\u308b\u3093\u3060\u304b\u3089\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u7ba1\u7406\u306f\u5b9f\u7e3e\u306e\u3042\u308b\u4eba\u305f\u3061\u306b\u4efb\u305b\u3066\u3053\u3063\u3061\u306f\u90fd\u5ea6\u300c\u3053\u306e\u4eba\u8ab0\uff1f\u300d\u3063\u3066\u805e\u3044\u3066\u6559\u3048\u3066\u3082\u3089\u3048\u3070\u3044\u3044\u3093\u3067\u3059\u3002\n\n\u305d\u306e\u4ed5\u7d44\u307f\u3068\u3057\u3066\u3001OpenID Connect \u3068\u3044\u3046\u8a8d\u8a3c\u30d7\u30ed\u30c8\u30b3\u30eb\u304c\u767b\u5834\u3057\u307e\u3057\u305f\u3002\n\n# OpenID Connect\n\u89aa\u5207\u306a\u3053\u3068\u306b\u3001Google \u69d8\u3084 Facebook \u69d8\u3084 Yahoo! \u69d8\u306f\u3053\u306e OpenID Connect \u3068\u3044\u3046\u8a8d\u8a3c\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5229\u7528\u3057\u3066\u3001\u8a8d\u8a3c\u3092\u80a9\u4ee3\u308f\u308a\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u307e\u3059\u3002\n\u7b46\u8005\u3082 Web \u30b5\u30fc\u30d3\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u306b\u3042\u305f\u308a\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u7ba1\u7406\u3067 \uff3c(^o^)\uff0f\uff75\uff9c\uff80 \u306b\u306a\u308a\u305f\u304f\u306a\u3044\u306e\u3067\u3042\u308a\u304c\u305f\u304f\u5229\u7528\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3059\u3002\n\n\u3068\u3053\u308d\u3067\u3001\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u8005\u306f Google \u306b\u3069\u3046\u3084\u3063\u3066\u300c\u3053\u306e\u4eba\u8ab0\uff1f\u300d\u3063\u3066\u805e\u3051\u3070\u3044\u3044\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\u30e6\u30fc\u30b6\u304b\u3089 Google \u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u308c\u3092 Google \u306b\u6295\u3052\u3066\u3084\u308c\u3070\u78ba\u304b\u306b\u8a8d\u8a3c\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u305d\u3093\u306a\u3053\u3068\u3057\u305f\u3089\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u8005\u306f\u30e6\u30fc\u30b6\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u3084\u308a\u305f\u3044\u653e\u984c\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\nOpenID Connect \u3067\u306f\u3001\u30e6\u30fc\u30b6\u304c Google \u7b49\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u60c5\u5831\u3092\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u8005\u306b\u6e21\u3059\u3053\u3068\u306a\u304f\u3001\u30b5\u30fc\u30d3\u30b9\u63d0\u4f9b\u8005\u304c\u8a8d\u8a3c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u4ed5\u7d44\u307f\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002\n\u7d20\u6674\u3089\u3057\u3044\u3067\u3059\u306d\u3002\n\nOpenID Connect \u306e\u4ed5\u69d8\u306f [OpenID Connect Core 1.0 - draft17](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html) \u3068\u3057\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u306f\u3044\u3001\u3044\u304d\u306a\u308a\u9762\u5012\u306a\u8a71\u306b\u5165\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u4ed5\u4e8b\u306e\u5408\u9593\u306e\u3072\u307e\u3064\u3076\u3057\u3067\u3053\u3093\u306a\u9577\u3044\u6587\u66f8\u8aad\u3093\u3067\u3089\u308c\u306a\u3044\u306e\u3067\u3001\u304b\u3044\u3064\u307e\u3093\u3067\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u307e\u305a\u306f [1.3. Overview](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#Overview) \u306e\u56f3\u3067\u3059\u3002\n![open_id_connect_overview.png](https://qiita-image-store.s3.amazonaws.com/0/47311/ded3953d-0904-8543-e452-59ce18a86e30.png)\n\u3053\u306e\u56f3\u4e2d\u306e OP \u306f\u3001Google \u3084 Facebook \u7b49\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u60c5\u5831\u3092\u6301\u3064\u30b5\u30fc\u30d0\u3001RP \u306f\u305d\u306e\u60c5\u5831\u3092\u5229\u7528\u3057\u3066\u8a8d\u8a3c\u3092\u884c\u3044 Web \u30b5\u30fc\u30d3\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u30b5\u30fc\u30d0\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u79c1\u305f\u3061\u304c\u3053\u308c\u304b\u3089\u5b9f\u88c5\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u306e\u306f RP \u3067\u3059\u3002\n\n\u56f3\u3092\u3088\u304f\u898b\u308b\u3068\u3001End-User \u306f\u79c1\u305f\u3061\u306e RP \u3068\u3067\u306f\u306a\u304f\u3001OP \u3068\u306e\u9593\u3067\u8a8d\u8a3c\u3001\u8a8d\u53ef\u306e\u624b\u7d9a\u304d\u3092\u884c\u3063\u3066\u3044\u307e\u3059(\u56f3 (2) AuthN & AuthZ)\u3002\u3064\u307e\u308a\u3001\u30e6\u30fc\u30b6\u306e ID / \u30d1\u30b9\u30ef\u30fc\u30c9\u306f RP \u3092\u4ecb\u3059\u308b\u3053\u3068\u306a\u304f\u3001\u76f4\u63a5 OP \u306b\u6e21\u3055\u308c\u3001\u8a8d\u8a3c\u306e\u7d50\u679c\u3060\u3051\u304c RP \u306b\u901a\u77e5\u3055\u308c\u3066\u3044\u308b\u3093\u3067\u3059\u306d\u3002\n\n\u30d5\u30ed\u30fc\u3092\u7c21\u5358\u306b\u8fbf\u3063\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\u672a\u8a8d\u8a3c\u306e\u72b6\u614b\u3067 RP \u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u30e6\u30fc\u30b6\u306f\u3001\u300c\u307e\u305a\u306f\u8a8d\u8a3c\u53d7\u3051\u3066\u304d\u3066\u300d\u3068 OP \u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u307e\u3059(\u56f3 (1) AuthN Request)\u3002\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u305f\u5148\u3067\u30e6\u30fc\u30b6\u306f\u81ea\u5206\u306e ID \u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u8a8d\u8a3c(\u56f3 (2) AuthN & AuthZ)\u3055\u308c\u3001\u300c\u3053\u306e\u30b5\u30fc\u30d3\u30b9\u304c\u3042\u306a\u305f\u306e\u60c5\u5831\u4f7f\u304a\u3046\u3068\u3057\u3066\u308b\u3051\u3069\u8a31\u53ef\u3059\u308b\uff1f\u300d\u3068\u8a31\u53ef\u3092\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\u305d\u3053\u3067\u300c\u8a31\u53ef\u3059\u308b\u300d\u3092\u9078\u629e\u3059\u308b\u3068\u3001\u30e6\u30fc\u30b6\u306f\u518d\u3073\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3067 RP \u306b\u623b\u3055\u308c\u307e\u3059(\u56f3 (3) AuthN Response)\u3002\u3053\u306e\u6642\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u300c\u8a8d\u8a3c\u3092\u901a\u904e\u3057\u305f\u300d\u3053\u3068\u3092\u793a\u3059 code \u304c\u4ed8\u52a0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001RP \u306f\u305d\u306e code \u3092\u6301\u3063\u3066\u300c\u3053\u306e\u4eba\u306e\u60c5\u5831\u304f\u3060\u3055\u3044\u300d\u3068 OP \u306b\u554f\u3044\u5408\u308f\u305b\u307e\u3059(\u56f3 (4) UserInfo Request)\u3002\u3053\u306e\u5fdc\u7b54\u3068\u3057\u3066\u30e6\u30fc\u30b6\u60c5\u5831\u304c\u53d6\u5f97\u3067\u304d\u308c\u3070(\u56f3 (5) UserInfo Response)\u3001RP \u306f\u30e6\u30fc\u30b6\u3092\u8a8d\u8a3c\u3067\u304d\u305f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u304b\u306a\u308a\u99c6\u3051\u8db3\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u3042\u305f\u308a\u306f\u672c\u8a18\u4e8b\u306e\u672c\u984c\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u8a73\u3057\u304f\u306f\u4ed6\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# Google Identity Platform\n\u3053\u3053\u3067\u306f\u3001Google \u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b OpenID Connect \u306e\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u3001\u30e6\u30fc\u30b6\u306e\u8a8d\u8a3c\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u767b\u9332\u3084\u8a2d\u5b9a\u306e\u65b9\u6cd5\u306f\u3084\u306f\u308a\u4ed6\u306e\u8a18\u4e8b\u306b\u8b72\u308a\u307e\u3059\u3002\n\n\u8a73\u7d30\u306a\u4ed5\u69d8\u306f [OpenID Connect](https://developers.google.com/identity/protocols/OpenIDConnect) \u306b\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3082\u9577\u3044\u306e\u3067\u3001\u304b\u3044\u3064\u307e\u3093\u3067\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u5148\u307b\u3069\u306e\u30d5\u30ed\u30fc\u306b\u5f93\u3046\u3068\u3001\u307e\u305a RP \u5074\u306f\u3001\u672a\u8a8d\u8a3c\u306e\u30e6\u30fc\u30b6\u304c\u30a2\u30af\u30bb\u30b9\u3057\u3066\u304d\u305f\u969b\u306b\u300c\u307e\u305a\u306f\u8a8d\u8a3c\u53d7\u3051\u3066\u304d\u3066\u300d\u3068 OP \u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u6642\u3001\u8a8d\u8a3c\u304c\u7d42\u308f\u3063\u305f\u3089\u307e\u305f RP \u5074\u306b\u623b\u3063\u3066\u304d\u3066\u3082\u3089\u3046\u305f\u3081\u306b\u3044\u304f\u3064\u304b\u306e\u60c5\u5831\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6307\u5b9a\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u90e8\u5206\u306e\u8a73\u7d30\u306f [2. Send an authentication request to Google](https://developers.google.com/identity/protocols/OpenIDConnect#sendauthrequest) \u306b\u3042\u308a\u307e\u3059\u3002\n\u3053\u3053\u3092\u8aad\u3093\u3067\u3044\u304f\u3068\u3001\u8a8d\u8a3c\u5f8c\u306b\u30e6\u30fc\u30b6\u3092 RP \u5074\u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u305b\u308b\u305f\u3081\u306b\u3001client_id, redirect_uri, state \u3068\u3044\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u305f\u305b\u305f\u4e0a\u3067\u3001\u30e6\u30fc\u30b6\u3092 OP \u306b\u4e00\u65e6\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u305b\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u30e6\u30fc\u30b6\u3068 OP \u306e\u9593\u3067\u8a8d\u8a3c\u304c\u6210\u529f\u3057\u305f\u3089\u3001\u30e6\u30fc\u30b6\u306f RP \u306e redirect_uri \u306b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3055\u308c\u3066\u304d\u307e\u3059\u3002\u6b21\u306b\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u306e\u304c\u3001\u30e6\u30fc\u30b6\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u9001\u4fe1\u3057\u3066\u304d\u305f code \u304b\u3089\u3001ID token \u3092\u53d6\u5f97\u3059\u308b\u4f5c\u696d\u3067\u3059\u3002\u5148\u307b\u3069\u306e\u30d5\u30ed\u30fc\u3067\u306f (4) UserInfo Request \u306b\u3042\u305f\u308a\u307e\u3059\u3002Google \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f [4. Exchange code for access token and ID token](https://developers.google.com/identity/protocols/OpenIDConnect#exchangecode) \u306b\u8a73\u7d30\u304c\u3042\u308a\u307e\u3059\u3002\n\u5fc5\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u542b\u3081\u3066 https://www.googleapis.com/oauth2/v3/token \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001JSON \u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u304c\u3001\u30e6\u30fc\u30b6\u306e\u8a8d\u8a3c\u304c\u6210\u529f\u3057\u3066\u3044\u308c\u3070 id_token \u3068\u3044\u3046\u9805\u76ee\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u524d\u7f6e\u304d\u304c\u975e\u5e38\u306b\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u304b\u3089\u304c\u3088\u3046\u3084\u304f\u672c\u984c\u3067\u3059\u3002\n\n\u53d6\u5f97\u3067\u304d\u305f ID token \u3092\u898b\u308b\u3068\u3001\n`eyJhbGciOiJSUzI1NiIsImtpZCI6ImRhMGI1ZDQyNDRjY2ZiNzViMjcwODQxNjI5NWYwNWQ1MThjYTY5MDMifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXRfaGFzaCI6Ijd2ajAzMklIQWdzMEdNUGxOUDFkV2ciLCJhdWQiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExNzQ0MjQ1MDQ0MzI0NDAzNTk1NSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhenAiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImVtYWlsIjoiYm9idW5kZXJzb25AZ21haWwuY29tIiwiaWF0IjoxNDQzNzY4NzcxLCJleHAiOjE0NDM3NzIzNzF9.bzNpok6tybsHOicXvbP9Q97kKO14ei3B1DXlNa8LFiZj8rQJfnm_rATRlMFEGs1fsW5Av7srDy-2JjdEbQufHbYlUBXIJh7_sBwI_qU6NIYn2t8hcGpMnXoe2z0BtkP3CyvvTINRVxA6WwHv_Teh0nzxnaxmcOVm0ajLKT603Crtt4MNur_azADTxNxYafaQ5o7XOo9V0PMM0nVy6kqn-N3IjxBPNXqQapmxub6qzJcRsOyAjOyzK1hRAuxvX9vd9fAoBf4ycpbeTWIy7nQIeEU8kl2lTNSb9DBZrsVP7GzhFRdEMDIxctcBoqXDxBuYLuSXGlnMyfSYy0sU39VBtw`\n\u306e\u3088\u3046\u306a\u610f\u5473\u4e0d\u660e\u306a\u6587\u5b57\u5217\u304c\u4e26\u3093\u3067\u3044\u307e\u3059\u3002\n\n[5. Obtain user information from the ID token](https://developers.google.com/identity/protocols/OpenIDConnect#obtainuserinfo)\n\u306b\u3088\u308b\u3068\u3001\n>An ID Token is a JWT (JSON Web Token), that is, a cryptographically signed Base64-encoded JSON object.\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u30fb\u30fb\u30fb JWT \uff1f\n\n# JWT (JSON Web Token)\n\u63a2\u3057\u3066\u307f\u308b\u3068\u3001\u51fa\u3066\u304d\u307e\u3057\u305f\u307f\u3093\u306a\u5927\u597d\u304d [RFC7519](http://tools.ietf.org/html/rfc7519)\u3002\n\n>JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties.  The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.\n\n\u3069\u3046\u3084\u3089\u3001JSON \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 URL-safe \u304b\u3064\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u8868\u73fe\u3057\u305f\u3082\u306e\u3067\u3001JWS \u307e\u305f\u306f JWE \u3068\u547c\u3070\u308c\u308b\u30e2\u30ce\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3053\u306e JWT \u3092\u691c\u8a3c\u3057\u305f\u3044\u306e\u3067\u3001[RFC7519 - 7.2. Validating a JWT](http://tools.ietf.org/html/rfc7519#section-7.2) \u306b\u76ee\u3092\u901a\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u307e\u305a\u3001\n>1.Verify that the JWT contains at least one period ('.') character.\n\n\u3067\u3059\u3002\u30d4\u30ea\u30aa\u30c9\u306f 2 \u3064\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u6b21\u306b\n>2.Let the Encoded JOSE Header be the portion of the JWT before the first period ('.') character.\n>3.Base64url decode the Encoded JOSE Header following the restriction that no line breaks, whitespace, or other additional characters have been used.\n>4.Verify that the resulting octet sequence is a UTF-8-encoded representation of a completely valid JSON object conforming to RFC 7159 [RFC7159]; let the JOSE Header be this JSON object.\n\n\u3067\u3059\u3002\u6700\u521d\u306e\u30d4\u30ea\u30aa\u30c9\u307e\u3067\u306e\u6587\u5b57\u5217\u3092 Base64url decode \u3059\u308b\u3068 JOSE Header (JSON) \u304c\u51fa\u3066\u304f\u308b\u3088\u3046\u3067\u3059\u3002\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```shell-session\n$ echo -n 'eyJhbGciOiJSUzI1NiIsImtpZCI6ImRhMGI1ZDQyNDRjY2ZiNzViMjcwODQxNjI5NWYwNWQ1MThjYTY5MDMifQ' | base64 -d\n{\"alg\":\"RS256\",\"kid\":\"da0b5d4244ccfb75b2708416295f05d518ca6903\"}base64: \u7121\u52b9\u306a\u5165\u529b\n```\n\n\u305f\u3057\u304b\u306b JSON \u304c\u51fa\u3066\u304d\u307e\u3057\u305f\uff01\n\n>5.Verify that the resulting JOSE Header includes only parameters and values whose syntax and semantics are both understood and supported or that are specified as being ignored when not understood.\n\n\u5024\u306f\u6587\u5b57\u5217\u3060\u3051\u306a\u306e\u3067\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n>6.Determine whether the JWT is a JWS or a JWE using any of the methods described in Section 9 of [JWE].\n\n[RFC7516 - 9. Distinguishing between JWS and JWE Objects](http://tools.ietf.org/html/rfc7516#section-9) \u306e\u624b\u9806\u306b\u5f93\u3063\u3066\u3001\u3053\u306e JWT \u304c JWS \u306a\u306e\u304b JWE \u306a\u306e\u304b\u898b\u5206\u3051\u308b\u3088\u3046\u3067\u3059\u3002\u65b9\u6cd5\u306f\u3044\u304f\u3064\u304b\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001\n>The JOSE Header for a JWS can also be distinguished from the JOSE Header for a JWE by determining whether an \"enc\" (encryption algorithm) member exists.  If the \"enc\" member exists, it is a JWE; otherwise, it is a JWS.\n\n\u3053\u308c\u306b\u3088\u308b\u3068\u3001\u5148\u307b\u3069\u306e JOSE Header \u306b ```enc``` \u8981\u7d20\u304c\u5b58\u5728\u3057\u3066\u3044\u308c\u3070 JWE \u3001\u5b58\u5728\u3057\u306a\u3051\u308c\u3070 JWS \u3060\u305d\u3046\u3067\u3059\u3002\u5f93\u3063\u3066\u3001\u4eca\u56de\u306e JWT \u306f JWS \u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n>7.Depending upon whether the JWT is a JWS or JWE, there are two cases:\n\u3000* If the JWT is a JWS, follow the steps specified in [JWS] for\n\u3000\u3000validating a JWS.  Let the Message be the result of base64url\n\u3000\u3000decoding the JWS Payload.\n\n\u7d9a\u304d\u306f JWS \u306a\u3089 JWS \u306e RFC \u306b\u5f93\u3048\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3067\u3059\u3002\n[RFC7515 - A.2. Example JWS Using RSASSA-PKCS1-v1_5 SHA-256](https://tools.ietf.org/html/rfc7515#appendix-A.2) \u306b\u3088\u308b\u3068\u3001\u30d4\u30ea\u30aa\u30c9\u3067\u533a\u5207\u3089\u308c\u305f 3 \u756a\u76ee\u306e\u5024\u306f Base64url encode \u3055\u308c\u305f\u7f72\u540d\u306e\u5024\u306e\u3088\u3046\u3067\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u3053\u306e\u7f72\u540d\u306e\u691c\u8a3c\u306f\u5f8c\u56de\u3057\u306b\u3057\u3066\u3001\u5148\u306b\u9032\u3080\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n>8.If the JOSE Header contains a \"cty\" (content type) value of \"JWT\", then the Message is a JWT that was the subject of nested signing or encryption operations.  In this case, return to Step 1, using the Message as the JWT.\n\nJOSE Header \u306b ``cty`` \u306f\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3053\u3053\u306f\u7121\u8996\u3057\u3066\u3088\u3055\u305d\u3046\u3067\u3059\u3002\n\n>9.Otherwise, base64url decode the Message following the restriction that no line breaks, whitespace, or other additional characters have been used.\n10.Verify that the resulting octet sequence is a UTF-8-encoded representation of a completely valid JSON object conforming to RFC 7159 [RFC7159]; let the JWT Claims Set be this JSON object.\n\n7. \u3067\u53d6\u308a\u51fa\u3057\u305f JWS Payload \u90e8\u5206\u3082\u307e\u305f Base64url decode \u3059\u308b\u3068 JSON \u304c\u51fa\u3066\u304f\u308b\u3088\u3046\u3067\u3059\u3002\n\n```shell-session\n$ echo -n 'eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXRfaGFzaCI6Ijd2ajAzMklIQWdzMEdNUGxOUDFkV2ciLCJhdWQiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExNzQ0MjQ1MDQ0MzI0NDAzNTk1NSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhenAiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImVtYWlsIjoiYm9idW5kZXJzb25AZ21haWwuY29tIiwiaWF0IjoxNDQzNzY4NzcxLCJleHAiOjE0NDM3NzIzNzF9' | base64 -d\n{\"iss\":\"accounts.google.com\",\"at_hash\":\"7vj032IHAgs0GMPlNP1dWg\",\"aud\":\"91469957145-jb842u0rcgm87m2209aelbftsl9p357i.apps.googleusercontent.com\",\"sub\":\"117442450443244035955\",\"email_verified\":true,\"azp\":\"91469957145-jb842u0rcgm87m2209aelbftsl9p357i.apps.googleusercontent.com\",\"email\":\"bobunderson@gmail.com\",\"iat\":1443768771,\"exp\":1443772371}\n```\n\n\u305f\u3057\u304b\u306b JSON \u304c\u51fa\u3066\u304d\u307e\u3057\u305f\uff01\u3057\u304b\u3082\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u542b\u307e\u308c\u3066\u307e\u3059\uff01\n\n\u3053\u306e JWT \u306b\u3088\u3063\u3066 Google \u304c\u300c\u305d\u306e\u4eba\u3001bobunderson@gmail.com \u3060\u3088\u300d\u3068\u6559\u3048\u3066\u304f\u308c\u3066\u308b\u306e\u3067\u3001RP \u306f\u305d\u308c\u3092\u30e6\u30fc\u30b6 ID (\u3068\u5bfe\u5fdc\u3059\u308b\u3082\u306e)\u3068\u3057\u3066\u6271\u3048\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\u7c21\u5358\u3067\u3059\u306d\u3002\n\n[5. Obtain user information from the ID token](https://developers.google.com/identity/protocols/OpenIDConnect#obtainuserinfo) \u306b\u3088\u308b\u3068\u3001HTTPS \u3067\u76f4\u63a5 Google \u3068\u901a\u4fe1\u3057\u3066\u3044\u3066\u3001\u81ea\u5206\u306e client secret \u3092\u4f7f\u3063\u3066\u3044\u308b\u5206\u306b\u306f\u3001\u3053\u306e ID token \u3092\u4fe1\u7528\u3057\u3066\u4f7f\u3063\u3066\u3082\u3088\u3044\u3088\u3046\u3067\u3059\u3002\n\n>Normally, it is critical that you validate an ID token before you use it, but since you are communicating directly with Google over an intermediary-free HTTPS channel and using your client secret to authenticate yourself to Google, you can be confident that the token you receive really comes from Google and is valid.\n\n# JWT \u306e\u691c\u8a3c\n\u300cHTTPS \u3067\u76f4\u63a5 Google \u3068\u901a\u4fe1\u3057\u3066\u3044\u3066\u3001\u81ea\u5206\u306e client secret \u3092\u4f7f\u3063\u3066\u3044\u308b\u5206\u306b\u306f\u3001\u3053\u306e ID token \u3092\u4fe1\u7528\u3057\u3066\u4f7f\u3063\u3066\u3082\u3088\u3044\u300d\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u88cf\u3092\u8fd4\u305b\u3070\u3001\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306b\u306f ID token \u3092\u305d\u306e\u307e\u307e\u4fe1\u7528\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u8ab0\u304b\u304c\u300cGoogle \u304c\u3053\u306e ID token \u767a\u884c\u3057\u3066\u304f\u308c\u305f\u3088\u300d\u3068\u8a00\u3063\u3066 ID token \u3092\u6e21\u3057\u3066\u304d\u305f\u5834\u5408\u3001\u305d\u306e ID token \u306f\u507d\u9020\u3001\u6539\u3056\u3093\u3055\u308c\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u3067\u300c\u3053\u306e ID token \u306f Google \u304c\u767a\u884c\u3057\u305f\u3082\u306e\u3060\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u4f55\u3089\u304b\u306e\u65b9\u6cd5\u3067\u691c\u8a3c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3067\u3088\u3046\u3084\u304f\u672c\u5f53\u306e\u672c\u984c\u306b\u5165\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\n[Validating an ID token](https://developers.google.com/identity/protocols/OpenIDConnect#validatinganidtoken) \u306b\u3088\u308b\u3068\u3001ID token \u306e\u691c\u8a3c\u306f 5 \u3064\u306e\u30b9\u30c6\u30c3\u30d7\u304b\u3089\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n>1. Verify that the ID token is a JWT which is properly signed with an appropriate Google public key.\n2. Verify that the value of aud in the ID token is equal to your app\u2019s client ID.\n3. Verify that the value of iss in the ID token is equal to accounts.google.com or https://accounts.google.com.\n4. Verify that the expiry time (exp) of the ID token has not passed.\n5. If you passed a hd parameter in the request, verify that the ID token has a hd claim that matches your Google Apps hosted domain.\n\n\u30b9\u30c6\u30c3\u30d7 2 \uff5e 5 \u306b\u3064\u3044\u3066\u306f\u3001\u5358\u7d14\u306b\u6587\u5b57\u5217\u3092\u6bd4\u8f03\u3057\u305f\u308a\u3001UNIX time \u3092\u6bd4\u8f03\u3057\u305f\u308a\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u7c21\u5358\u306a\u3093\u3067\u3059\u304c\u3001\u30b9\u30c6\u30c3\u30d7 1 \u306e\u7f72\u540d\u306e\u691c\u8a3c\u306f\u305d\u3046\u7c21\u5358\u306b\u306f\u3044\u304d\u307e\u305b\u3093\u3002[Validating an ID token](https://developers.google.com/identity/protocols/OpenIDConnect#validatinganidtoken) \u306b\u3082\n>The first step is more complex, and involves cryptographic signature checking. \n\n\u3068\u3042\u308a\u307e\u3059\u3002\u306a\u304b\u306a\u304b\u30cf\u30fc\u30c9\u30eb\u304c\u9ad8\u305d\u3046\u3067\u3059\u304c\u3001\u3053\u306e\u90e8\u5206\u3092\u81ea\u529b\u3067\u3084\u3063\u3066\u307f\u308b\u3068\u3044\u308d\u3044\u308d\u898b\u3048\u3066\u304d\u305f\u3068\u3044\u3046\u306e\u304c\u3053\u306e\u8a18\u4e8b\u306e\u30c6\u30fc\u30de\u3067\u3059\u3002\n\n# \u7f72\u540d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u7f72\u540d\u306e\u691c\u8a3c\u3092\u3057\u3088\u3046\u306b\u3082\u3001\u4f55\u304b\u3068\u3063\u304b\u304b\u308a\u304c\u306a\u3044\u3068\u59cb\u3081\u3089\u308c\u306a\u3044\u306e\u3067\u3001[RFC7519](https://tools.ietf.org/html/rfc7519) \u306b\u623b\u3063\u3066\u307f\u307e\u3059\u3002[RFC7519 - 3. JSON Web Token (JWT) Overview](https://tools.ietf.org/html/rfc7519#section-3) \u3092\u8aad\u3093\u3067\u3044\u308b\u3068\u3001\n>The contents of the JOSE Header describe the cryptographic operations applied to the JWT Claims Set.\n\n\u3068\u3044\u3046\u4e00\u6587\u304c\u898b\u3064\u304b\u308a\u307e\u3059\u3002cryptographic operations\u30fb\u30fb\u30fb\u602a\u3057\u3044\u3067\u3059\u306d\u3002\n\u3069\u3046\u3084\u3089 JOSE Header \u306f JWS Payload \u90e8\u5206\u306b\u5bfe\u3059\u308b\u6697\u53f7\u95a2\u9023\u306e\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n[RFC7519 - 2. Terminology](https://tools.ietf.org/html/rfc7519#section-2) \u306b\u3088\u308b\u3068\u3001\"JOSE Header\" \u306b\u3064\u3044\u3066\u306f [RFC7515](https://tools.ietf.org/html/rfc7515) \u3092\u53c2\u7167\u305b\u3088\u3068\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u898b\u306b\u884c\u304d\u307e\u3059\u3002\n\n[RFC7515 - 4. JOSE Header](https://tools.ietf.org/html/rfc7515#section-4) \u306b\u306f\n>For a JWS, the members of the JSON object(s) representing the JOSE Header describe the digital signature or MAC applied to the JWS Protected Header and the JWS Payload and optionally additional properties of the JWS.\n\n\u3068\u3042\u308a\u307e\u3059\u3002\u3084\u306f\u308a\u3001JOSE Header \u306b JWS Payload \u306e\u7f72\u540d\u306b\u3064\u3044\u3066\u306e\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u3053\u3067\u3001\u30c7\u30b3\u30fc\u30c9\u3057\u305f JOSE Header \u3092\u6539\u3081\u3066\u773a\u3081\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n`{\"alg\":\"RS256\",\"kid\":\"7d61b5075924f1baddab5d4253becb231bcecbf4\"}`\n\nalg\u30fb\u30fb\u30fb\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3063\u307d\u3044\u3067\u3059\u306d\u3002\n[RFC7515 - 4.1.1. \"alg\" (Algorithm) Header Parameter](https://tools.ietf.org/html/rfc7515#section-4.1.1) \u306b\u3088\u308b\u3068\u3001\n>The \"alg\" (algorithm) Header Parameter identifies the cryptographic algorithm used to secure the JWS.\n\n\u3068\u3042\u308a\u307e\u3059\u3002\u3084\u306f\u308a\u3053\u306e \"RS256\" \u3068\u3044\u3046\u5024\u304c\u3001JWS Payload \u306e\u7f72\u540d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8868\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3053\u3053\u307e\u3067\u3067\u3001JWT \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u9020\u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n![jwt_structure.png](https://qiita-image-store.s3.amazonaws.com/0/47311/e8263648-446f-a9f7-4a2e-9d4b07eabf8b.png)\n\n\u3055\u3089\u306b\u8aad\u307f\u9032\u3081\u308b\u3068\u3001\n\n>\"alg\" values should either be registered in the IANA \"JSON Web Signature and Encryption Algorithms\" registry established by [JWA] or be a value that contains a Collision-Resistant Name.\n\n\u3068\u3042\u308a\u3001\"alg\" \u306e value \u306f [RFC7518](https://tools.ietf.org/html/rfc7518) \u3067\u898f\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001[RFC7518](https://tools.ietf.org/html/rfc7518) \u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u3001\u3042\u308a\u307e\u3057\u305f\u3002\n\n[RFC7518 - 3.1. \"alg\" (Algorithm) Header Parameter Values for JWS](https://tools.ietf.org/html/rfc7518#section-3.1)\n\n\u3053\u308c\u306b\u3088\u308b\u3068\u3001\"RS256\" \u3068\u3044\u3046\u5024\u306f \"RSASSA-PKCS1-v1_5 using SHA-256\" \u3068\u3044\u3046\u96fb\u5b50\u7f72\u540d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6307\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002SHA-256 \u3068\u3044\u3046\u306e\u306f\u304a\u306a\u3058\u307f\u306e\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3067\u3059\u306d\u3002RSASSA-PKCS1-v1_5 \u3063\u3066\u4f55\u3067\u3057\u3087\u3046\u304b\u3002RSA \u6697\u53f7\u306b\u95a2\u4fc2\u3057\u3066\u3044\u305d\u3046\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3002\u3002\u3002\n\n\u540c\u3058 RFC7518 \u306b\u306f [RFC7518 - 3.3. Digital Signature with RSASSA-PKCS1-v1_5](https://tools.ietf.org/html/rfc7518#section-3.3) \u3068\u3044\u3046\u7bc0\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3053\u306b\u306f\u3001\n>This section defines the use of the RSASSA-PKCS1-v1_5 digital signature algorithm as defined in Section 8.2 of RFC 3447 \\[RFC3447] (commonly known as PKCS #1), using SHA-2 [SHS] hash functions.\n\n\u3068\u66f8\u304b\u308c\u3066\u304a\u308a\u3001RSASSA-PKCS1-v1_5 \u3068\u3044\u3046\u96fb\u5b50\u7f72\u540d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f RFC 3447 (PKCS #1) \u3067\u898f\u5b9a\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\n# \u516c\u958b\u9375\u6697\u53f7\u306e\u6a19\u6e96\nPKCS (Public-Key Cryptography Standards) \u3068\u3044\u3046\u306e\u306f\u3001\u3069\u3046\u3084\u3089\u516c\u958b\u9375\u6697\u53f7\u306e\u5b9f\u88c5\u306b\u304b\u304b\u308f\u308b\u69d8\u3005\u306a\u6a19\u6e96\u3092\u307e\u3068\u3081\u305f\u6587\u66f8\u306e\u3088\u3046\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001#1 \u304b\u3089 #15 \u307e\u3067\u5b9a\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n| \u756a\u53f7 | \u540d\u524d |\n|:---:|:----|\n| #1 | RSA\u6697\u53f7\u6a19\u6e96  |\n| #2 | \u5ec3\u6848 |\n| #3 | Diffie-Hellman\u9375\u5171\u6709\u6a19\u6e96 |\n| #4 | \u5ec3\u6848 |\n| #5 | \u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u57fa\u3065\u304f\u6697\u53f7\u5316\u306e\u6a19\u6e96 |\n| #6 | \u62e1\u5f35\u3055\u308c\u305f\u8a3c\u660e\u66f8\u69cb\u6587\u306e\u6a19\u6e96 |\n| #7 | \u6697\u53f7\u30e1\u30c3\u30bb\u30fc\u30b8\u69cb\u6587\u6a19\u6e96 |\n| #8 | \u79d8\u5bc6\u9375\u60c5\u5831\u69cb\u6587\u306e\u6a19\u6e96 |\n| #9 | \u9078\u629e\u3055\u308c\u305f\u5c5e\u6027\u30bf\u30a4\u30d7 |\n| #10 | \u8a3c\u660e\u66f8\u7f72\u540d\u8981\u6c42 |\n| #11 | \u6697\u53f7\u30c8\u30fc\u30af\u30f3\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9(Cryptoki) |\n| #12 | \u500b\u4eba\u60c5\u5831\u4ea4\u63db\u69cb\u6587\u306e\u6a19\u6e96 |\n| #13 | \u6955\u5186\u66f2\u7dda\u6697\u53f7\u306e\u6a19\u6e96 |\n| #14 | \u7591\u4f3c\u4e71\u6570 |\n| #15 | \u6697\u53f7\u30c8\u30fc\u30af\u30f3\u60c5\u5831\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u6a19\u6e96 |\n\nRSASSA-PKCS1-v1_5 \u306e\u8a73\u7d30\u306f\u3001[RFC3447](https://tools.ietf.org/html/rfc3447) \u3067\u898f\u5b9a\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\nRSA \u6697\u53f7\u65b9\u5f0f\u3092\u4f7f\u3063\u3066\u7f72\u540d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u3063\u305f\u306e\u3067\u3001\u3053\u3053\u3067 RSA \u6697\u53f7\u65b9\u5f0f\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u304a\u3055\u3089\u3044\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n# RSA \u6697\u53f7\u65b9\u5f0f\u306e\u304a\u3055\u3089\u3044\n\u307e\u305a\u306f\u3001\u79d8\u5bc6\u9375 / \u516c\u958b\u9375\u306e\u751f\u6210\u304b\u3089\u3067\u3059\u3002\n\n1. \u5927\u304d\u306a\u7d20\u6570 $p$ \u3068 $q$ \u3092\u751f\u6210\u3057\u3001$n = pq$ \u3068\u3059\u308b\n2. $gcd(e, (p - 1)(q - 1)) = 1$ \u3068\u306a\u308b\u6570 $e$ \u3092\u5b9a\u3081\u3066\u3001$\\\\{e, n\\\\}$ \u3092\u516c\u958b\u9375\u3068\u3059\u308b\n3. $1 \\equiv de \\pmod{(p - 1)(q - 1)}$ \u3068\u306a\u308b $d$ \u3092\u751f\u6210\u3057\u3001\u79d8\u5bc6\u9375\u3068\u3059\u308b\n\n\u6697\u53f7\u5316 / \u5fa9\u53f7\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u64cd\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\n1. \u5e73\u6587\u3092 $M$ \u3068\u3059\u308b\u3068 $C \\equiv M^e \\pmod{n}$ \u304c\u6697\u53f7\u6587\u3068\u306a\u308b\n2. \u6697\u53f7\u6587 $C$ \u306f $M \\equiv C^d \\pmod{n}$ \u3067\u5fa9\u53f7\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n\u516c\u958b\u9375 $\\\\{e, n\\\\}$ \u3067\u6697\u53f7\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306f\u79d8\u5bc6\u9375 $d$ \u3092\u6301\u3063\u3066\u3044\u308b\u4eba\u3060\u3051\u304c\u5fa9\u53f7\u3067\u304d\u308b\u306e\u3067\u3057\u305f\u3002\n\n\u4eca\u56de\u4f7f\u3046\u3001\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u306e\u751f\u6210\u3068\u691c\u8a3c\u306f\u4ee5\u4e0b\u306e\u64cd\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\n1. \u7f72\u540d\u3059\u308b\u30c7\u30fc\u30bf\u3092 $M$ \u3068\u3059\u308b\u3068 $S \\equiv M^d \\pmod{n}$ \u304c\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u3068\u306a\u308b\n2. \u30c7\u30fc\u30bf $M$ \u3068 $m \\equiv S^e \\pmod{n}$ \u304c\u4e00\u81f4\u3059\u308c\u3070\u3001$S$ \u306f $d$ \u3092\u6301\u3064\u4eba\u304c $M$ \u306b\u5bfe\u3057\u3066\u751f\u6210\u3057\u305f\u7f72\u540d\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u8a3c\u660e\u3055\u308c\u308b\n\n\u4eca\u56de\u306e\u5834\u5408\u3001ID token \u304b\u3089\u751f\u6210\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u3092 $m$ \u3001JWS Signature \u3092 $S$ \u3001Google \u306e\u516c\u958b\u9375\u3092 $\\\\{e, n\\\\}$ \u3068\u3059\u308b\u3068\u3001$m \\equiv S^{e} \\pmod{n}$ \u304c\u6210\u7acb\u3059\u308c\u3070\u3001ID token \u304c Google \u304b\u3089\u767a\u884c\u3055\u308c\u305f\u3082\u306e\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u8a3c\u660e\u3067\u304d\u308b\u308f\u3051\u3067\u3059\u3002\n\n# \u516c\u958b\u9375\u306e\u5165\u624b\n\u3055\u3066\u3001ID token \u306b\u4ed8\u4e0e\u3055\u308c\u305f Google \u306e\u96fb\u5b50\u7f72\u540d\u3092\u691c\u8a3c\u3059\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u305d\u306e\u305f\u3081\u306b\u306f\u3082\u3061\u308d\u3093 Google \u306e\u516c\u958b\u9375\u3092\u5165\u624b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u516c\u958b\u9375\u306f\u3069\u3046\u3084\u3063\u3066\u898b\u3064\u3051\u308c\u3070\u3044\u3044\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\nOpenID Connect \u306e\u4ed5\u69d8\u306b\u623b\u3063\u3066\u307f\u308b\u3068\u3001[15.3. Discovery and Registration](http://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html#DiscoReg) \u306b\n>\u3057\u304b\u3057\u3001\u4e8b\u524d\u767b\u9332\u306e\u306a\u3044Relying Party\u3068OpenID Provider\u9593\u306e\u4e88\u671f\u3057\u306a\u3044\u3084\u308a\u3068\u308a\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3092\u9078\u629e\u3057\u305f\u306a\u3089\u3070\u3001OpenID Discovery 1.0 [OpenID.Discovery]\u3068OpenID Connect Dynamic Client Registration 1.0 [OpenID.Registration]\u306e\u4ed5\u69d8\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30b7\u30ea\u30c6\u30a3\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u3053\u308c\u3092\u9042\u884c\u3059\u308b\u3079\u304d\u3067\u3042\u308b(SHOULD)\u3002\n\n\u3068\u3042\u308a\u307e\u3059\u3002[OpenID Connect Discovery 1.0](http://openid.net/specs/openid-connect-discovery-1_0.html) \u306e Abstract \u306b\u306f\u3001\n>This specification defines a mechanism for an OpenID Connect Relying Party to discover the End-User's OpenID Provider and obtain information needed to interact with it, including its OAuth 2.0 endpoint locations.\n\n\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u3069\u3046\u3084\u3089\u3053\u306e OpenID Connect Discovery 1.0 \u3068\u3044\u3046\u898f\u683c\u306b\u3001RP \u304c OP \u3068\u3084\u308a\u3068\u308a\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30eb\u304c\u5b9a\u3081\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3055\u3089\u306b\u8aad\u307f\u9032\u3081\u3066 [3. OpenID Provider metadata](http://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata) \u3092\u898b\u308b\u3068\u3001\n>jwks_uri\nREQUIRED. URL of the OP's JSON Web Key Set [JWK] document. This contains the signing key(s) the RP uses to validate signatures from the OP.\n\n\u3068\u3042\u308a\u307e\u3059\u3002\u3053\u306e jwks_uri \u306b ID token \u306e\u7f72\u540d\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306e\u516c\u958b\u9375\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002Google \u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u623b\u3063\u3066 [The Discovery document](https://developers.google.com/identity/protocols/OpenIDConnect#discovery) \u306e\u9805\u76ee\u3092\u898b\u308b\u3068\u3001\u305d\u308c\u3089\u3057\u3044 URL \u304c\u3042\u308a\u307e\u3059\u3002\n\nhttps://accounts.google.com/.well-known/openid-configuration\n\n\u8a66\u3057\u306b\u3053\u306e URL \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\n\n```shell-session\n$ curl https://accounts.google.com/.well-known/openid-configuration\n{\n \"issuer\": \"https://accounts.google.com\",\n \"authorization_endpoint\": \"https://accounts.google.com/o/oauth2/v2/auth\",\n \"token_endpoint\": \"https://www.googleapis.com/oauth2/v4/token\",\n \"userinfo_endpoint\": \"https://www.googleapis.com/oauth2/v3/userinfo\",\n \"revocation_endpoint\": \"https://accounts.google.com/o/oauth2/revoke\",\n \"jwks_uri\": \"https://www.googleapis.com/oauth2/v3/certs\",\n \"response_types_supported\": [\n  \"code\",\n  \"token\",\n  \"id_token\",\n  \"code token\",\n  \"code id_token\",\n  \"token id_token\",\n  \"code token id_token\",\n  \"none\"\n ],\n \"subject_types_supported\": [\n  \"public\"\n ],\n \"id_token_signing_alg_values_supported\": [\n  \"RS256\"\n ],\n \"scopes_supported\": [\n  \"openid\",\n  \"email\",\n  \"profile\"\n ],\n \"token_endpoint_auth_methods_supported\": [\n  \"client_secret_post\",\n  \"client_secret_basic\"\n ],\n \"claims_supported\": [\n  \"aud\",\n  \"email\",\n  \"email_verified\",\n  \"exp\",\n  \"family_name\",\n  \"given_name\",\n  \"iat\",\n  \"iss\",\n  \"locale\",\n  \"name\",\n  \"picture\",\n  \"sub\"\n ]\n}\n```\n\njkws_uri \u306b URL \u304c\u3042\u308b\u306e\u3067\u3001\u3055\u3089\u306b\u305d\u3053\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\n\n```shell-session\n$ curl https://www.googleapis.com/oauth2/v3/certs\n{\n \"keys\": [\n  {\n   \"kty\": \"RSA\",\n   \"alg\": \"RS256\",\n   \"use\": \"sig\",\n   \"kid\": \"2b2e82106791dc8fad7815d7fb544a62f72c16fa\",\n   \"n\": \"r6np6v_txgmicJ49GvxGhCKCIEcbthqRN2XvM0W8_UDoWrSn5cNvOI3hL8mRapHS673fZfLFcPLno8lfvXEXWk-1a6z4RdFniuGd6Hb6PCUmiKqz6lc8DBpaK57eWSv1ySQoVdSXqlB5NDSxQvkcme6InLK_fMhWj95ecaZeNBbVBM4NBlgRrFc-2OM221USY7s_RtlVJXCG0nBkzhVcHJrohQnq7f436Ba_WZuT7lSeZyHpHu7kCUrZY672AfDaoNM7Qe2__DUdWQvlS0v9kKQvigZquDQhnVG_dsT5jlUQPAEwru-3rorvwWvugIn8VQWmdsmXNx7JZnZ1gi6tMQ\",\n   \"e\": \"AQAB\"\n  },\n  {\n   \"kty\": \"RSA\",\n   \"alg\": \"RS256\",\n   \"use\": \"sig\",\n   \"kid\": \"da0b5d4244ccfb75b2708416295f05d518ca6903\",\n   \"n\": \"wnfD2k6iOI8IdDTKPY4J6HFOT1nKor6v2xEZ9G2n1_KtPs5-5aC8W_SvRTzXF9Ym-BeoQI5mfHSbaYafbeEDaCSVpxXja1K8n7EAlpYVGydTHgL2NLHADb-Gtkkiv8Gw9sSyea_foPW_i2YknOIyBM4A2Sxqf9VPQTSTj5zJGFtRnyQYuuTprxqj9qgZfAAhrGCizsW8bm62nH2DYORQ10rwaiY9kL4gVOPrU39vaB80YX5a2N-TRzDCzHaKlo9vSBMzysFs1WFmb9VdOLuIae1I7h50KFUIDncxv7tGrVxnYBi_etNl989JmDtDzLnPK3u4AMFEGcha52Y2QwxQeQ\",\n   \"e\": \"AQAB\"\n  }\n ]\n}\n```\n\n\u3042\u308a\u307e\u3057\u305f\uff01RSA \u306e\u516c\u958b\u9375 $\\\\{e, n\\\\}$ \u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\uff01\n$\\\\{e, n\\\\}$ \u306e\u7d44\u304c 2 \u3064\u898b\u3048\u307e\u3059\u304c\u3001ID token \u306e JOSE Header ```{\"alg\":\"RS256\",\"kid\":\"da0b5d4244ccfb75b2708416295f05d518ca6903\"}``` \u306e kid \u3068\u4e00\u81f4\u3059\u308b\u307b\u3046\u306e $\\\\{e, n\\\\}$ \u304c\u9375\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\n\\# \u516c\u958b\u9375\u306e URL \u304c https://accounts.google.com/.well-known/openid-configuration \u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u6839\u672c\u7684\u306b\u306f\u3053\u306e URL \u306e SSL \u8a3c\u660e\u66f8\u304c JWT \u306e\u6b63\u5f53\u6027\u3092\u4fdd\u8a3c\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308b\u3093\u3060\u308d\u304b\u3002\u3002\u3002\n\n# \u691c\u8a3c\u3057\u3066\u307f\u308b\n\u3053\u308c\u3067\u5fc5\u8981\u306a\u3082\u306e\u306f\u63c3\u3044\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u306f\u7f72\u540d\u306e\u5bfe\u8c61\u3068\u306a\u308b\u30cf\u30c3\u30b7\u30e5\u5024 $m$ \u3067\u3059\u3002\u3053\u308c\u306f\u3001[RFC7515 5.2. - Example JWS](https://tools.ietf.org/html/draft-ietf-jose-json-web-signature-41#section-3.3) \u306b\u3088\u308b\u3068\u3001\n>8.Validate the JWS Signature against the JWS Signing Input ASCII(BASE64URL(UTF8(JWS Protected Header)) || '.' || BASE64URL(JWS Payload)) in the manner defined for the algorithm being used, which MUST be accurately represented by the value of the \"alg\" (algorithm) Header Parameter, which MUST be present. See Section 10.6 for security considerations on algorithm validation.  Record whether the validation succeeded or not.\n\n\u3068\u3042\u308b\u901a\u308a\u30012\u756a\u76ee\u306e\u30d4\u30ea\u30aa\u30c9\u306e\u624b\u524d\u307e\u3067\u304c\u5e73\u6587\u306b\u542b\u307e\u308c\u308b\u3088\u3046\u3067\u3059(1\uff5e7\u307e\u3067\u306e\u30b9\u30c6\u30c3\u30d7\u306e\u9593\u3067\u3001JOSE Header \u304c JWS Protected Header \u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059)\u3002\u7f72\u540d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u3001SHA-256 \u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001$m$ \u306f\u3001\u3053\u306e\u5e73\u6587\u306e SHA-256 \u30cf\u30c3\u30b7\u30e5\u5024\u3060\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n\u6b21\u306b JWS Signature $S$ \u3067\u3059\u3002\u3053\u308c\u306f 2 \u756a\u76ee\u306e\u30d4\u30ea\u30aa\u30c9\u3088\u308a\u5f8c\u306e\u90e8\u5206\u3067\u3059\u306d\u3002\n\n$\\\\{e,n\\\\}$ \u306f jkws_uri \u304b\u3089\u53d6\u5f97\u3057\u305f\u516c\u958b\u9375\u3067\u3059\u3002\n\n\u3053\u308c\u3089\u306e\u5024\u304b\u3089 $m = S^{e} \\pmod {n}$ \u304c\u6210\u7acb\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3044\u306e\u3067\u3059\u304c\u3002\u3002\u3002$m$ \u3082 $S$ \u3082 $e$ \u3082 $n$ \u3082\u30d0\u30a4\u30c8\u5217\u3067\u3059\u3002\u3069\u3046\u8a08\u7b97\u3059\u308c\u3070\u3044\u3044\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\n[RFC5725 - A.2.2. Validating](https://tools.ietf.org/html/rfc7515#appendix-A.2.2) \u306b\u623b\u3063\u3066\u307f\u308b\u3068\u3001\n>We pass the public key (n, e), the JWS Signature (which is base64url decoded from the value encoded in the JWS representation), and the JWS Signing Input (which is the initial substring of the JWS Compact Serialization representation up until but not including the second period character) to an RSASSA-PKCS1-v1_5 signature verifier that has been configured to use the SHA-256 hash function.\n\n\u3068\u3042\u308a\u307e\u3059\u3002\u3069\u3046\u3084\u3089\u3001\u3055\u304d\u307b\u3069\u51fa\u3066\u304d\u305f RSASSA-PKCS1-v1_5 \u306b\u3001\u7f72\u540d\u306e\u691c\u8a3c\u306e\u5177\u4f53\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b9a\u3081\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n# RSASSA-PKCS1-v1_5\n\u3067\u306f\u3001[RFC3447(PKCS#1)](https://tools.ietf.org/html/rfc3447) \u3092\u898b\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u3053\u306e\u898f\u683c\u3067\u306f\u3001\u516c\u958b\u9375\u6697\u53f7\u65b9\u5f0f\u3092\u5229\u7528\u3057\u305f\u6697\u53f7\u5316\u3068\u5fa9\u53f7\u3001\u7f72\u540d\u306e\u4f5c\u6210\u3068\u691c\u8a3c\u7b49\u306e\u5177\u4f53\u7684\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b9a\u3081\u3089\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u4eca\u56de\u306e\u8a72\u5f53\u90e8\u5206\u3001[RFC3447 - 8.2. RSASSA-PKCS1-v1_5](https://tools.ietf.org/html/rfc3447#section-8.2) \u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u306e\u7bc0\u306f\u3055\u3089\u306b\u3001\u7f72\u540d\u306e\u751f\u6210\u3068\u691c\u8a3c\u306e\u7bc0\u306b\u5206\u304b\u308c\u3066\u304a\u308a\u3001\u305d\u308c\u305e\u308c\u306e\u64cd\u4f5c\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7f72\u540d\u306e\u691c\u8a3c\u306f [RFC3447 - 8.2.2. Signature verification operation](https://tools.ietf.org/html/rfc3447#section-8.2.2) \u3067\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u3001\u7f72\u540d\u306e\u691c\u8a3c\u306e\u64cd\u4f5c\u304c ``RSASSA-PKCS1-V1_5-VERIFY ((n, e), M, S)`` \u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u5165\u529b\u304b\u3089\u9806\u306b\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n>Input:\n\u3000\u3000(n, e)\u3000\u3000signer's RSA public key\n\u3000\u3000M\u3000\u3000\u3000\u3000message whose signature is to be verified, an octet string\n\u3000\u3000S\u3000\u3000\u3000\u3000signature to be verified, an octet string of length k, where k is the length in octets of the RSA modulus n\n\n\u3053\u308c\u3089\u306f\u3059\u3067\u306b\u624b\u5143\u306b\u3042\u308a\u307e\u3059\u3002$\\\\{e,n\\\\}$ \u306b\u3064\u3044\u3066\u306f\u660e\u793a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001$M$ \u3068 $S$ \u306f\u30aa\u30af\u30c6\u30c3\u30c8\u5217(\u30d0\u30a4\u30c8\u5217)\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n>Output:\n\u3000\u3000\"valid signature\" or \"invalid signature\"\n\n\u51fa\u529b\u306f\u3082\u3061\u308d\u3093\u6709\u52b9\u306a\u7f72\u540d\u3067\u3042\u308b\u304b\u305d\u3046\u3067\u306a\u3044\u304b\u306e 2 \u629e\u3067\u3059\u306d\u3002\u4eca\u56de\u306f \"valid signature\" \u304c\u51fa\u529b\u3055\u308c\u308c\u3070\u6674\u308c\u3066\u691c\u8a3c\u6210\u529f\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3067\u306f\u65e9\u901f\u3001Step 1 \u304b\u3089\u9806\u306b\u8ffd\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n>1. Length checking: If the length of the signature S is not k octets, output \"invalid signature\" and stop.\n\n$S$ \u306e\u30d0\u30a4\u30c8\u6570\u3068 $n$ \u306e\u30d0\u30a4\u30c8\u6570\u304c\u4e00\u81f4\u3057\u3066\u3044\u306a\u3051\u308c\u3070 \"invalid signature\" \u3092\u51fa\u529b\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059\u3002\n\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py3:step1.py\nimport base64\n\nb64_n_from_certs = 'wnfD2k6iOI8IdDTKPY4J6HFOT1nKor6v2xEZ9G2n1_KtPs5-5aC8W_SvRTzXF9Ym-BeoQI5mfHSbaYafbeEDaCSVpxXja1K8n7EAlpYVGydTHgL2NLHADb-Gtkkiv8Gw9sSyea_foPW_i2YknOIyBM4A2Sxqf9VPQTSTj5zJGFtRnyQYuuTprxqj9qgZfAAhrGCizsW8bm62nH2DYORQ10rwaiY9kL4gVOPrU39vaB80YX5a2N-TRzDCzHaKlo9vSBMzysFs1WFmb9VdOLuIae1I7h50KFUIDncxv7tGrVxnYBi_etNl989JmDtDzLnPK3u4AMFEGcha52Y2QwxQeQ=='\n\nb64_s_from_jws = 'bzNpok6tybsHOicXvbP9Q97kKO14ei3B1DXlNa8LFiZj8rQJfnm_rATRlMFEGs1fsW5Av7srDy-2JjdEbQufHbYlUBXIJh7_sBwI_qU6NIYn2t8hcGpMnXoe2z0BtkP3CyvvTINRVxA6WwHv_Teh0nzxnaxmcOVm0ajLKT603Crtt4MNur_azADTxNxYafaQ5o7XOo9V0PMM0nVy6kqn-N3IjxBPNXqQapmxub6qzJcRsOyAjOyzK1hRAuxvX9vd9fAoBf4ycpbeTWIy7nQIeEU8kl2lTNSb9DBZrsVP7GzhFRdEMDIxctcBoqXDxBuYLuSXGlnMyfSYy0sU39VBtw=='\n\nbin_n = base64.urlsafe_b64decode(b64_n_from_certs)\nbin_s = base64.urlsafe_b64decode(b64_s_from_jws)\n\nprint('len(bin_n) = %d' % len(bin_n))\nprint('len(bin_s) = %d' % len(bin_s))\n```\n\n\u5fc5\u8981\u306a padding \u3092\u8ffd\u52a0\u3057\u305f\u4e0a\u3067 Base64url decode \u3057\u3066\u307f\u3066\u7d50\u679c\u306e\u30d0\u30a4\u30c8\u5217\u306e\u9577\u3055\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3059\u3002\n\n```shell-session\n$ python3 step1.py\nlen(bin_n) = 256\nlen(bin_s) = 256\n```\n\n\u3069\u3061\u3089\u3082 256 \u30d0\u30a4\u30c8\u3067\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n>2.RSA verification:\n\n\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u306f\u3001\u7f72\u540d $S$ \u3092\u516c\u958b\u9375 $\\\\{e,n\\\\}$ \u3067\u5fa9\u53f7\u3059\u308b\u64cd\u4f5c\u3067\u3059\u3002\u3053\u308c\u306f a \uff5e c \u306e3\u3064\u306e\u64cd\u4f5c\u304b\u3089\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n>a. Convert the signature S to an integer signature representative s (see Section 4.2):\n\u3000\u3000\u3000s = OS2IP (S).\n\n\u3053\u3053\u3067\u898b\u6163\u308c\u306a\u3044\u95a2\u6570\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002[RFC3447 - 4.2 OS2IP](https://tools.ietf.org/html/rfc3447#section-4.2) \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u305d\u3061\u3089\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n>OS2IP converts an octet string to a nonnegative integer.\nOS2IP (X)\n\u3000\u3000Input:\n\u3000\u3000\u3000\u3000X        octet string to be converted\n\u3000\u3000Output:\n\u3000\u3000\u3000\u3000x        corresponding nonnegative integer\n\n\u3069\u3046\u3084\u3089\u3001\u30d0\u30a4\u30c8\u5217\u3092\u6b63\u306e\u6574\u6570\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u306e\u3088\u3046\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u898f\u5b9a\u3055\u308c\u3066\u3044\u308b\u901a\u308a\u306b\u5b9f\u88c5\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py3:primitives.py\ndef OS2IP(octet_string):\n    # http://tools.ietf.org/html/rfc3447#section-4.2\n    x = 0\n    i = 1\n    for octet in reversed(octet_string):\n        x += octet * i\n        i *= 256\n\n    return x\n```\n\u5165\u529b\u30d0\u30a4\u30c8\u5217\u3092 256 \u9032\u6570\u306e\u5de8\u5927\u306a\u6574\u6570\u3060\u3068\u89e3\u91c8\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n``RSASSA-PKCS1-V1_5-VERIFY`` \u306b\u623b\u308a\u307e\u3059\u3002\u7f72\u540d $S$ \u306b ``OS2IP`` \u3092\u9069\u7528\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5de8\u5927\u306a 10 \u9032\u6574\u6570\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py3:step2a.py\nint_s = OS2IP(bin_s)\n\nprint(int_s)\n```\n\n```shell-session\n$ python3 step2a.py\n14037804365398619033799742640081377671043057392694415291597804147713491410445513866006008669704199482642441064706170013125771718244722040567525603708239315719194626418847133365097820713692422830687511756532781524139994240604245694191169325425909683490950378139360773189150119316465859211171776644949608317203118384030102880369548355566253684947673392290546588239119176056964914307676545633029747304365762240535067374062714801022561146061109390909542430785821617643241252874218057283792444274583960379759363660222517314804403953534923619970309443919685333767236614480532808644706485562780884529114424361077491176391095\n```\n\n\u7d9a\u3044\u3066 ``RSASSA-PKCS1-V1_5-VERIFY`` \u306e 2b \u306b\u9032\u307f\u307e\u3059\u3002\n>b. Apply the RSAVP1 verification primitive (Section 5.2.2) to the RSA public key (n, e) and the signature representative s to produce an integer message representative m:\n\u3000\u3000\u3000m = RSAVP1 ((n, e), s).\nIf RSAVP1 outputs \"signature representative out of range,\" output \"invalid signature\" and stop.\n\nRSA \u306e\u6570\u5f0f $m = S^{e} \\pmod{n}$ \u3092\u5b9f\u884c\u3059\u308b\u30b9\u30c6\u30c3\u30d7\u306e\u3088\u3046\u3067\u3059([RFC3447 - 5.2.2 RSAVP1](https://tools.ietf.org/html/rfc3447#section-5.2.2))\u3002\u3057\u304b\u3057\u3001$\\\\{n,e\\\\}$ \u306f(\u304a\u305d\u3089\u304f) Base64url encode \u3055\u308c\u305f\u30d0\u30a4\u30c8\u5217\u3067\u3059\u3002\u5148\u307b\u3069\u306e ``OS2IP`` \u3092 $\\\\{n,e\\\\}$ \u306b\u3082\u9069\u7528\u3057\u3066\u6574\u6570\u306b\u5909\u63db\u3057\u305f\u4e0a\u3067\u3001``RSAVP1`` \u306e\u9069\u7528\u307e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n(\u3053\u306e\u90e8\u5206\u306e\u4ed5\u69d8\u304c\u660e\u8a18\u3055\u308c\u305f\u90e8\u5206\u304c\u7d50\u5c40\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\u3002)\n\n```py3:primitives.py\ndef RSAVP1(int_n, int_e, int_s):\n    # http://tools.ietf.org/html/rfc3447#section-5.2.2\n    if int_s < 0 or int_n - 1 < int_s:\n        raise Exception('signature representative out of range')\n\n    m = pow(int_s, int_e, int_n)\n\n    return m\n```\n\n```py3:step2b.py\nint_n = crypto.primitives.OS2IP(bin_n)\n\nb64_e_from_certs = 'AQAB'\nbin_e = base64.urlsafe_b64decode(b64_e_from_certs)\nint_e = crypto.primitives.OS2IP(bin_e)\n\nint_m = RSAVP1(int_n, int_e, int_s)\n\nprint(int_m)\n```\n\n```shell-session\n$ python3 step2b.py\n986236757547332986472011617696226561292849812918563355472727826767720188564083584387121625107510786855734801053524719833194566624465665316622563244215340671405971599343902468620306327831715457360719532421388780770165778156818229863337344187575566725786793391480600129482653072861971002459947277805295727097226389568776499707662505334062639449916265137796823793276300221537201727072401742985542559596685092673521228140822200236743113743661549252453726123450722876929538747702356573783116197523966334991563351853851212597377279504828784675811158154858862009196731249195722389749547251860179386006643765857644703155\n```\n\n\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\n>c. Convert the message representative m to an encoded message EM of length k octets (see Section 4.1):\n\u3000\u3000\u3000EM' = I2OSP (m, k).\nIf I2OSP outputs \"integer too large,\" output \"invalid signature\" and stop.\n\n(\u6587\u4e2d\u3067\u306f ``EM`` \u3092\u751f\u6210\u3059\u308b\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5f0f\u306e\u90e8\u5206\u3067\u306f ``EM'`` \u304c\u751f\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002 https://www.rfc-editor.org/errata_search.php?rfc=3447&eid=594 \u306b\u3088\u308b\u3068\u3084\u306f\u308a ``EM = I2OSP (m, k).`` \u304c\u6b63\u3057\u3044\u3088\u3046\u3067\u3059\u3002)\n\n\u3053\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u306f\u3001\u5148\u307b\u3069\u7b97\u51fa\u3057\u305f\u6574\u6570\u5024 $m$ \u3092\u9577\u3055 $k$ \u306e\u30d0\u30a4\u30c8\u5217\u306b\u5909\u63db\u3059\u308b\u3088\u3046\u3067\u3059\u3002OS2IP \u306e\u9006\u5909\u63db\u3067\u3059\u3002[RFC3447 - 4.1 I2OSP](https://tools.ietf.org/html/rfc3447#section-4.1) \u306e\u5b9a\u7fa9\u901a\u308a\u306b\u5b9f\u88c5\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py3:primitives.py\ndef I2OSP(int_v, str_len):\n    # http://tools.ietf.org/html/rfc3447#section-4.1\n    if int_v.bit_length() / 8 + 1 > str_len:\n        raise Exception('integer too large')\n\n    octet_string = b''\n    while str_len > 0:\n        if int_v > 0:\n            digit = int_v % 256\n            int_v = int_v >> 8\n            octet_string = digit.to_bytes(1, byteorder='big') + octet_string\n        else:\n            octet_string = b'\\x00' + octet_string\n\n        str_len -= 1\n\n    return octet_string\n```\n\n```py3:step2c.py\nk = len(bin_n)\nem = I2OSP(int_m, k)\nprint(binascii.b2a_hex(em))\n```\n\n```shell-session\n$ python3 step2c.py\nb'0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003031300d0609608648016503040201050004200c066e94c392758e604ed753d81048699aa61f93af9964df09f106504c07edb3'\n```\n\n\u3053\u3053\u307e\u3067\u3067\u3001$m = S^{e} \\pmod{n}$ \u304c\u5c0e\u51fa\u3055\u308c\u307e\u3057\u305f\u3002\n\u6b21\u306f\u3001$m$ \u3068\u6bd4\u8f03\u3059\u308b\u305f\u3081\u306b\u3001\u7f72\u540d\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf $M$ \u304b\u3089\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n>3.EMSA-PKCS1-v1_5 encoding: Apply the EMSA-PKCS1-v1_5 encoding\n\u3000operation (Section 9.2) to the message M to produce a second\n\u3000encoded message EM' of length k octets:\n\u3000\n\u3000\u3000\u3000EM' = EMSA-PKCS1-V1_5-ENCODE (M, k).\n\u3000\n\u3000If the encoding operation outputs \"message too long,\" output\n\u3000\"message too long\" and stop.  If the encoding operation outputs\n\u3000\"intended encoded message length too short,\" output \"RSA modulus\n\u3000too short\" and stop.\n\n[RFC3447 - 9.2 EMSA-PKCS1-v1_5](https://tools.ietf.org/html/rfc3447#section-9.2) \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u3001\u30a8\u30f3\u30b3\u30fc\u30c9\u6e08\u307f\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u3053\u306e\u51e6\u7406\u306f\u3044\u304f\u3089\u304b\u8907\u96d1\u306a\u306e\u3067\u3001\u9806\u3092\u8ffd\u3063\u3066\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n>EMSA-PKCS1-v1_5-ENCODE (M, emLen)\n\u3000\u3000\u3000Option:\n\u3000\u3000\u3000Hash\u3000\u3000hash function (hLen denotes the length in octets of the hash function output)\n\u3000\u3000\u3000Input:\n\u3000\u3000\u3000M\u3000\u3000\u3000message to be encoded\n\u3000\u3000\u3000emLen\u3000intended length in octets of the encoded message, at least\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000tLen + 11, where tLen is the octet length of the DER\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000encoding T of a certain value computed during the encoding\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000operation\n\u3000\u3000\u3000Output:\n\u3000\u3000\u3000EM\u3000\u3000encoded message, an octet string of length emLen\n\u3000\u3000\u3000Errors:\n\u3000\u3000\u3000\"message too long\"; \"intended encoded message length too short\"\n\n\u307e\u305a\u306f\u5165\u51fa\u529b\u306e\u78ba\u8a8d\u304b\u3089\u3002\u5165\u529b\u3068\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u51fa\u529b\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9577\u3055\u3092\u53d7\u3051\u53d6\u308a\u3001\u30a8\u30f3\u30b3\u30fc\u30c9\u6e08\u307f\u306e\u30e1\u30c3\u30bb\u30fc\u30b8(\u30d0\u30a4\u30c8\u5217)\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u3067\u3059\u3002\u307e\u305f\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u306e\u7a2e\u985e\u3082\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3067\u306f\u51e6\u7406\u306e\u6d41\u308c\u3092\u8ffd\u3063\u3066\u307f\u307e\u3059\u3002\n\n>1.Apply the hash function to the message M to produce a hash value\n\u3000\u3000H:\n\u3000\u3000\u3000H = Hash(M).\n\u3000If the hash function outputs \"message too long,\" output \"message\n\u3000too long\" and stop.\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u9069\u7528\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u5404\u8a00\u8a9e\u306e\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3059\u308c\u3070\u6c42\u3081\u3089\u308c\u305d\u3046\u3067\u3059\u3002\n\n>2.Encode the algorithm ID for the hash function and the hash value\n\u3000into an ASN.1 value of type DigestInfo (see Appendix A.2.4) with\n\u3000the Distinguished Encoding Rules (DER), where the type DigestInfo\n\u3000has the syntax\n\u3000\n\u3000DigestInfo ::= SEQUENCE {\n\u3000\u3000\u3000digestAlgorithm AlgorithmIdentifier,\n\u3000\u3000\u3000digest OCTET STRING\n\u3000}\n\u3000\n\u3000The first field identifies the hash function and the second\n\u3000contains the hash value.  Let T be the DER encoding of the\n\u3000DigestInfo value (see the notes below) and let tLen be the length\n\u3000in octets of T.\n\n\u3053\u3053\u304c\u5b9f\u88c5\u3068\u3057\u3066\u306f\u4e00\u756a\u5384\u4ecb\u305d\u3046\u3067\u3059\u3002\u30cf\u30c3\u30b7\u30e5\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u793a\u3059 ID \u3068\u30cf\u30c3\u30b7\u30e5\u5024\u3092 ASN.1 \u3068\u547c\u3070\u308c\u308b\u8a18\u6cd5\u3067\u8a18\u8ff0\u3057\u3066\u3001DER \u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\u3002\n\nASN.1 \u8a18\u6cd5\u3068 DER \u30a8\u30f3\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306f\u3053\u3053\u3067\u306f\u7701\u7565\u3057\u307e\u3059\u304c\u3001\u4ed5\u69d8\u306f\u4ee5\u4e0b\u306e pdf \u306b\u3042\u308a\u307e\u3059\u3002\nhttps://www.itu.int/ITU-T/studygroups/com17/languages/X.690-0207.pdf\n\u307e\u305f\u3001\u65e5\u672c\u8a9e\u3060\u3068\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u306b\u8a73\u7d30\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\nhttp://www.geocities.co.jp/SiliconValley-SanJose/3377/\n\n``digestAlgorithm`` \u306b\u306f\u3001\u30cf\u30c3\u30b7\u30e5\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8868\u3059 OID(Object ID) \u3068\u3001\u30cf\u30c3\u30b7\u30e5\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30d1\u30e9\u30e1\u30fc\u30bf(NULL) \u304c SEQUENCE \u3068\u3057\u3066\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002OID \u306e\u5024\u306f\u3001[RFC3447 - A.2.4 RSASSA-PKCS1-v1_5](https://tools.ietf.org/html/rfc3447#appendix-A.2.4) -> [RFC3447 - B.1 Hash functions](https://tools.ietf.org/html/rfc3447#appendix-B.1) \u3068\u8fbf\u3063\u305f\u5148\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306e ID Token \u3067\u4f7f\u308f\u308c\u3066\u3044\u308b SHA-256 \u3060\u3068\u3001\n>id-sha256\u3000\u3000OBJECT IDENTIFIER ::= {\n\u3000\u3000joint-iso-itu-t(2) country(16) us(840) organization(1)\n\u3000\u3000gov(101) csor(3) nistalgorithm(4) hashalgs(2) 1\n}\n\n\u3068\u3042\u308b\u3053\u3068\u304b\u3089\u30012.16.840.1.101.3.4.2.1 \u3067\u3042\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n``digest`` \u306e\u307b\u3046\u306f\u3001\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u30d0\u30a4\u30ca\u30ea\u304c OCTET STRING \u3068\u3057\u3066\u305d\u306e\u307e\u307e\u5165\u308a\u307e\u3059\u3002\n\nDER \u30a8\u30f3\u30b3\u30fc\u30c9\u5f8c\u306e\u5024\u306e 16 \u9032\u30c0\u30f3\u30d7\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002(\u5148\u982d\u304b\u3089 3 \u30d3\u30c3\u30c8\u76ee\u306e\u69cb\u9020\u5316\u30d5\u30e9\u30b0\u3092 ON \u306b\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002)\n``3031300d06096086480165030402010500042004b459d578f2fe14a4b30e0ab7991096521c445a620ce90e5bf7329ef43c3484``\n\n>3.If emLen < tLen + 11, output \"intended encoded message length too\n\u3000short\" and stop.\n\n\u6b21\u306f\u30a8\u30f3\u30b3\u30fc\u30c9\u5f8c\u306e\u5024\u306e\u9577\u3055\u30c1\u30a7\u30c3\u30af\u3067\u3059\u3002\n$emLen = k > len(tLen) + 11$ \u306a\u306e\u3067\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n>4.Generate an octet string PS consisting of emLen - tLen - 3 octets\n\u3000with hexadecimal value 0xff.  The length of PS will be at least 8\n\u3000octets.\n\n\u51fa\u529b\u30b5\u30a4\u30ba\u3092 $emLen$ \u306b\u3059\u308b\u305f\u3081\u30010xff \u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u30d0\u30a4\u30c8\u5217\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n>5.Concatenate PS, the DER encoding T, and other padding to form the\n\u3000encoded message EM as\n\u3000\n\u3000\u3000\u3000EM = 0x00 || 0x01 || PS || 0x00 || T.\n\u3000\n6. Output EM.\n\n\u56fa\u5b9a\u306e 3 \u30d0\u30a4\u30c8\u3068\u30d1\u30c7\u30a3\u30f3\u30b0\u30d0\u30a4\u30c8\u5217\u3001DER \u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u306e\u60c5\u5831\u3092\u7d50\u5408\u3057\u3066\u3001``EMSA-PKCS1-v1_5-ENCODE (M, emLen)`` \u306e\u51fa\u529b\u3068\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u3042\u305f\u308a\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u3001\u65e5\u672c\u8a9e\u3060\u3068\u4ee5\u4e0b\u306e blog \u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\nhttp://blog.livedoor.jp/k_urushima/archives/979220.html\n\nASN.1 \u30a8\u30f3\u30b3\u30fc\u30c9\u306e\u90e8\u5206\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u96a0\u853d\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u304c\u3001``EMSA-PKCS1-v1_5-ENCODE`` \u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py3:primitives.py\ndef EMSA_PKCS1_V1_5_ENCODE(os_m, em_len, hash_function='sha256'):\n    # http://tools.ietf.org/html/rfc3447#section-9.2\n    digest_info = asn1.types.ASN1Sequence()\n\n    digest_algo = asn1.types.ASN1Sequence()\n    algo_identifier = asn1.types.ASN1ObjectIdentifier()\n    if hash_function == 'sha256':\n        algo_identifier.oid = '2.16.840.1.101.3.4.2.1'\n    else:\n        raise Exception('unsupported hash function')\n    digest_algo.children.append(algo_identifier)\n\n    null_obj = asn1.types.ASN1Null()\n    digest_algo.children.append(null_obj)\n\n    digest_info.children.append(digest_algo)\n\n    h = hashlib.new(hash_function)\n    h.update(os_m)\n    digest = asn1.types.ASN1OctetString(h.digest())\n    digest_info.children.append(digest)\n\n    bin_digest_info = digest_info.encode()\n    t_len = len(bin_digest_info)\n\n    if em_len < t_len + 11:\n        raise Exception('intended encoded message length too short')\n\n    ps_len = int(em_len - t_len - 3)\n\n    byte_array = []\n    byte_array.append(0x00)\n    byte_array.append(0x01)\n    for i in range(ps_len):\n        byte_array.append(0xff)\n    byte_array.append(0x00)\n\n    return bytes(byte_array) + bin_digest_info\n```\n\n```py3:step3.py\nm_from_jws = 'eyJhbGciOiJSUzI1NiIsImtpZCI6ImRhMGI1ZDQyNDRjY2ZiNzViMjcwODQxNjI5NWYwNWQ1MThjYTY5MDMifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXRfaGFzaCI6Ijd2ajAzMklIQWdzMEdNUGxOUDFkV2ciLCJhdWQiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjExNzQ0MjQ1MDQ0MzI0NDAzNTk1NSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJhenAiOiI5MTQ2OTk1NzE0NS1qYjg0MnUwcmNnbTg3bTIyMDlhZWxiZnRzbDlwMzU3aS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImVtYWlsIjoiYm9idW5kZXJzb25AZ21haWwuY29tIiwiaWF0IjoxNDQzNzY4NzcxLCJleHAiOjE0NDM3NzIzNzF9'\n\nbin_m = m_from_jws.encode('utf-8')\n\nem_dash = EMSA_PKCS1_V1_5_ENCODE(bin_m, k)\nprint(binascii.b2a_hex(em_dash))\n```\n\n```shell-session\n$ python3 step3.py\nb'0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003031300d0609608648016503040201050004200c066e94c392758e604ed753d81048699aa61f93af9964df09f106504c07edb3'\n```\n\n>4.Compare the encoded message EM and the second encoded message EM'.\n\u3000If they are the same, output \"valid signature\"; otherwise, output\n\u3000\"invalid signature.\"\n\n\u3064\u3044\u306b\u6700\u5f8c\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\u7f72\u540d\u304b\u3089\u7b97\u51fa\u3057\u305f EM \u3068\u3001ID Token \u306e JOSE Header \u3068 JWS Payload \u306e\u30cf\u30c3\u30b7\u30e5\u5024\u304b\u3089\u7b97\u51fa\u3057\u305f EM' \u3068\u304c\u4e00\u81f4\u3059\u308c\u3070\u691c\u8a3c\u6210\u529f\u3067\u3059\u3002\u3002\u3002\n\n```shell-session\n$ python3 step2c.py\nb'0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003031300d0609608648016503040201050004200c066e94c392758e604ed753d81048699aa61f93af9964df09f106504c07edb3'\n```\n\n```shell-session\n$ python3 step3.py\nb'0001ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003031300d0609608648016503040201050004200c066e94c392758e604ed753d81048699aa61f93af9964df09f106504c07edb3'\n```\n\n\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\uff01\uff01\n\n\u7f72\u540d\u691c\u8a3c\u306e\u5168\u4f53\u306e\u6d41\u308c\u3092\u56f3\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n![jwt_verify.png](https://qiita-image-store.s3.amazonaws.com/0/47311/0195c961-1d96-07aa-7d63-acd1dc275725.png)\n\n# \u304a\u308f\u308a\u306b\n\u975e\u5e38\u306b\u9577\u3005\u3068\u66f8\u3044\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u7f72\u540d\u306e\u691c\u8a3c\u3060\u3051\u3067\u3082\u81ea\u529b\u3067\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u304b\u306a\u308a\u5927\u5909\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u304a\u5206\u304b\u308a\u3044\u305f\u3060\u3051\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u7b46\u8005\u3082\u6b63\u76f4\u7518\u304f\u898b\u3066\u307e\u3057\u305f\u3002\n\n\u672c\u65e5\u306e\u7d50\u8ad6\uff1a **\u5de8\u4eba\u306e\u80a9\u306b\u4e57\u308d\u3046\uff01\uff01**\n", "tags": ["OpenID", "\u8a8d\u8a3c", "RSA", "\u516c\u958b\u9375", "\u96fb\u5b50\u7f72\u540d"]}