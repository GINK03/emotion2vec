{"tags": ["MIDI", "Arduino", "C++"], "context": "analogRead()\u7528\u306e\u95a2\u6570\u4f5c\u3063\u3066\u307f\u305f\u306e\u7d9a\u304d\u3067\u3059\u3002\n\u8907\u6570\u306e\u53ef\u5909\u62b5\u6297\u3092\u4ed8\u3051\u308b\u3068\u304d\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u524d\u56de\u3068\u540c\u3058\u3053\u3068\u3092\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u30af\u30e9\u30b9\u3092\u4f5c\u308b\nclass VR\n{\n  static const int MODULUS_AVERAGE = 8;\n  static const int MODULUS_CHANGED = 4;\n  private:\n    int val_hist[MODULUS_AVERAGE];\n    int sum;\n    byte i_average;\n    int val2_hist[MODULUS_CHANGED];\n    byte i_changed;\n  public:\n    VR();\n    int getAverage(int val);\n    boolean isChanged(int val);\n};\n\nVR\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3001\u524d\u56de\u4f7f\u3063\u3066\u305f\u5b9a\u6570\u3001\u5909\u6570\u3092\u3001\u5168\u90e8\u3076\u3061\u3053\u307f\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306e\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u91cd\u8981\u3089\u3057\u3044\u3067\u3059\u3002\u6253\u3061\u5fd8\u308c\u3066\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u51fa\u307e\u3057\u305f\u3002\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\nVR::VR(){\n  for(int i = 0; i < MODULUS_AVERAGE; i++) val_hist[i] = 0;\n  sum = 0;\n  i_average = 0;\n  for(int i=0;i < MODULUS_CHANGED; i++) val2_hist[i] = 0;\n  i_changed = 0;\n}\n\n\u5909\u6570\u30920\u3067\u521d\u671f\u5316\u3057\u307e\u3057\u305f\u3002\n\n\u79fb\u52d5\u5e73\u5747\u3092\u51fa\u529b\u3059\u308b\u95a2\u6570\nint VR::getAverage(int val){\n  sum += ( val - val_hist[i_average] );\n  val_hist[i_average] = val;\n  i_average = ++i_average % MODULUS_AVERAGE;\n  return sum / MODULUS_AVERAGE;\n}\n\n\u3053\u306e\u8fba\u306f\u524d\u306e\u3068\u540c\u3058\u3067\u3059\u3002\n\n\u5024\u304c\u5909\u3063\u305f\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\nboolean VR::isChanged(int val){\n  val2_hist[i_changed] = val;\n  i_changed = ++i_changed % MODULUS_CHANGED;\n  for(int j = 0; j < MODULUS_CHANGED - 1; j++){\n      if( val == val2_hist[(i_changed + j) % MODULUS_CHANGED] ) return false;\n  };\n  return true;\n}\n\n\n\u4f7f\u3044\u65b9\n\u6700\u8fd1\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f32u4,ARM\u7528\u306eMIDIUSB\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u3001\u982d\u306b\u3053\u3044\u3064\u3092\u66f8\u304d\u307e\u3059\u3002\n#include <MIDIUSB.h>\n...\n\n\u53ef\u5909\u62b5\u6297\u3092\u56db\u3064\u3001A0~A3\u306b\u4ed8\u3051\u3066\u3001\u305d\u308c\u305e\u308cCC25~28\u3092\u51fa\u529b\u3059\u308b\u3068\u3057\u307e\u3059\u3002\nVR vr[4];\nconst int ANAPIN[4]={0,1,2,3};\nconst byte CHANNEL = 0;\nconst byte CC[4] ={25,26,27,28};\n\nvoid setup() {\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  int temp;\n\n  for(int i=0;i < 4; i++){\n    if( vr[i].isChanged( temp = vr[i].getAverage( analogRead(ANAPIN[i]) >> 3 ) ) ){\n      controlChange(CHANNEL,CC[i],temp);\n    };\n\n  delay(10);\n  };\n}\n\n//controll value or velocity\n// First parameter is the event type (0x0B = control change).\n// Second parameter is the event type, combined with the channel.\n// Third parameter is the control number number (0-119).\n// Fourth parameter is the control value (0-127).\n\nvoid controlChange(byte channel, byte control, byte value) {\n  midiEventPacket_t event = {0x0B, 0xB0 | channel, control, value};\n  MidiUSB.sendMIDI(event);\n}\n\n\u6838\u5fc3\u90e8\u5206\u304c\u3053\u307f\u3044\u3063\u3066\u307e\u3059\u304c\u3001\n\n\u30d4\u30f3\u3092analogRead()\u3057\u3066\n3\u3060\u3051\u53f3\u30b7\u30d5\u30c8(=8\u3067\u5272\u308b)\u3057\u3066\n\u79fb\u52d5\u5e73\u5747\u3092\u6c42\u3081\u3066\ntemp\u306b\u5165\u308c\u3066\n\u3082\u3057\u5024\u304c\u5909\u5316\u3057\u3066\u305f\u3089\ntemp\u3092CC\u306e\u5024\u3068\u3057\u3066MIDI OUT\u3059\u308b\n\n\u3068\u3044\u3046\u76ee\u8ad6\u898b\u3067\u3059\u3002\n\u624b\u5143\u306b\u3042\u3063\u305fastar32u4\u5358\u4f53\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u826f\u3055\u3052\u306a\u53ef\u5909\u62b5\u6297\u304c\u306a\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u304c\u3001\u3075\u3089\u3075\u3089\u51fa\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u898b\u308b\u3068\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u3044\u308b\u611f\u3058\u3067\u3059\u3002\n\n\u307e\u3068\u3081\n\u666e\u6bb5\u4f7f\u3063\u3066\u306a\u3044\u8133\u307f\u305d\u3092\u4f7f\u3063\u3066\u75b2\u308c\u307e\u3057\u305f\u3002\n\u3061\u3087\u3063\u3068\u95a2\u6570\u304c\u5024\u3092\u899a\u3048\u3066\u304a\u3044\u3066\u304f\u308c\u308b\u3060\u3051\u3067\u3044\u3044\u306e\u306b...\n\u3082\u3063\u3068\u697d\u306a\u3084\u308a\u304b\u305f\u304c\u304d\u3063\u3068\u3042\u308b\u3093\u3060\u308d\u3046\u306a...\n\n[analogRead()\u7528\u306e\u95a2\u6570\u4f5c\u3063\u3066\u307f\u305f](http://qiita.com/ttatsf/items/c20a2f41ba2641c069a9)\u306e\u7d9a\u304d\u3067\u3059\u3002\n\u8907\u6570\u306e\u53ef\u5909\u62b5\u6297\u3092\u4ed8\u3051\u308b\u3068\u304d\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3044\u3044\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u524d\u56de\u3068\u540c\u3058\u3053\u3068\u3092\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3057\u3066\u307f\u307e\u3059\u3002\n#\u30af\u30e9\u30b9\u3092\u4f5c\u308b\n\n```cpp\nclass VR\n{\n  static const int MODULUS_AVERAGE = 8;\n  static const int MODULUS_CHANGED = 4;\n  private:\n    int val_hist[MODULUS_AVERAGE];\n    int sum;\n    byte i_average;\n    int val2_hist[MODULUS_CHANGED];\n    byte i_changed;\n  public:\n    VR();\n    int getAverage(int val);\n    boolean isChanged(int val);\n};\n```\nVR\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3001\u524d\u56de\u4f7f\u3063\u3066\u305f\u5b9a\u6570\u3001\u5909\u6570\u3092\u3001\u5168\u90e8\u3076\u3061\u3053\u307f\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306e\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u91cd\u8981\u3089\u3057\u3044\u3067\u3059\u3002\u6253\u3061\u5fd8\u308c\u3066\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u51fa\u307e\u3057\u305f\u3002\n#\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n```cpp\n\nVR::VR(){\n  for(int i = 0; i < MODULUS_AVERAGE; i++) val_hist[i] = 0;\n  sum = 0;\n  i_average = 0;\n  for(int i=0;i < MODULUS_CHANGED; i++) val2_hist[i] = 0;\n  i_changed = 0;\n}\n```\n\n\u5909\u6570\u30920\u3067\u521d\u671f\u5316\u3057\u307e\u3057\u305f\u3002\n\n#\u79fb\u52d5\u5e73\u5747\u3092\u51fa\u529b\u3059\u308b\u95a2\u6570\n\n```cpp\nint VR::getAverage(int val){\n  sum += ( val - val_hist[i_average] );\n  val_hist[i_average] = val;\n  i_average = ++i_average % MODULUS_AVERAGE;\n  return sum / MODULUS_AVERAGE;\n}\n```\n\n\u3053\u306e\u8fba\u306f\u524d\u306e\u3068\u540c\u3058\u3067\u3059\u3002\n#\u5024\u304c\u5909\u3063\u305f\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\n\n```cpp\nboolean VR::isChanged(int val){\n  val2_hist[i_changed] = val;\n  i_changed = ++i_changed % MODULUS_CHANGED;\n  for(int j = 0; j < MODULUS_CHANGED - 1; j++){\n      if( val == val2_hist[(i_changed + j) % MODULUS_CHANGED] ) return false;\n  };\n  return true;\n}\n```\n#\u4f7f\u3044\u65b9\n\u6700\u8fd1\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f32u4,ARM\u7528\u306e[MIDIUSB](https://www.arduino.cc/en/Reference/MIDIUSB)\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u3001\u982d\u306b\u3053\u3044\u3064\u3092\u66f8\u304d\u307e\u3059\u3002\n\n```cpp\n#include <MIDIUSB.h>\n...\n```\n\u53ef\u5909\u62b5\u6297\u3092\u56db\u3064\u3001A0~A3\u306b\u4ed8\u3051\u3066\u3001\u305d\u308c\u305e\u308cCC25~28\u3092\u51fa\u529b\u3059\u308b\u3068\u3057\u307e\u3059\u3002\n\n```cpp\nVR vr[4];\nconst int ANAPIN[4]={0,1,2,3};\nconst byte CHANNEL = 0;\nconst byte CC[4] ={25,26,27,28};\n \nvoid setup() {\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  int temp;\n  \n  for(int i=0;i < 4; i++){\n    if( vr[i].isChanged( temp = vr[i].getAverage( analogRead(ANAPIN[i]) >> 3 ) ) ){\n      controlChange(CHANNEL,CC[i],temp);\n    };\n    \n  delay(10);\n  };\n}\n\n//controll value or velocity\n// First parameter is the event type (0x0B = control change).\n// Second parameter is the event type, combined with the channel.\n// Third parameter is the control number number (0-119).\n// Fourth parameter is the control value (0-127).\n\nvoid controlChange(byte channel, byte control, byte value) {\n  midiEventPacket_t event = {0x0B, 0xB0 | channel, control, value};\n  MidiUSB.sendMIDI(event);\n}\n```\n\n\u6838\u5fc3\u90e8\u5206\u304c\u3053\u307f\u3044\u3063\u3066\u307e\u3059\u304c\u3001\n\n+ \u30d4\u30f3\u3092analogRead()\u3057\u3066\n+ 3\u3060\u3051\u53f3\u30b7\u30d5\u30c8(=8\u3067\u5272\u308b)\u3057\u3066\n+ \u79fb\u52d5\u5e73\u5747\u3092\u6c42\u3081\u3066\n+ temp\u306b\u5165\u308c\u3066\n+ \u3082\u3057\u5024\u304c\u5909\u5316\u3057\u3066\u305f\u3089\n+ temp\u3092CC\u306e\u5024\u3068\u3057\u3066MIDI OUT\u3059\u308b\n\n\u3068\u3044\u3046\u76ee\u8ad6\u898b\u3067\u3059\u3002\n\n\u624b\u5143\u306b\u3042\u3063\u305fastar32u4\u5358\u4f53\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u826f\u3055\u3052\u306a\u53ef\u5909\u62b5\u6297\u304c\u306a\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u304c\u3001\u3075\u3089\u3075\u3089\u51fa\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u898b\u308b\u3068\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u3044\u308b\u611f\u3058\u3067\u3059\u3002\n#\u307e\u3068\u3081\n\u666e\u6bb5\u4f7f\u3063\u3066\u306a\u3044\u8133\u307f\u305d\u3092\u4f7f\u3063\u3066\u75b2\u308c\u307e\u3057\u305f\u3002\n\u3061\u3087\u3063\u3068\u95a2\u6570\u304c\u5024\u3092\u899a\u3048\u3066\u304a\u3044\u3066\u304f\u308c\u308b\u3060\u3051\u3067\u3044\u3044\u306e\u306b...\n\u3082\u3063\u3068\u697d\u306a\u3084\u308a\u304b\u305f\u304c\u304d\u3063\u3068\u3042\u308b\u3093\u3060\u308d\u3046\u306a...\n"}