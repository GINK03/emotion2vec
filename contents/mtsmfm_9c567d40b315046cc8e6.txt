{"context": " More than 1 year has passed since last update.\u7b2c18\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c \u3092\u89e3\u304d\u307e\u3057\u305f\u3002\nhttp://qiita.com/Nabetani/items/373105e7fafd12f5e9fd\nfoldBase val (x:xs)\n  | x == 'F' = val ++ foldBase val xs\n  | x == 'R' = reverse(invert val) ++ foldBase val xs\n  | otherwise = x : foldBase val xs\nfoldBase _ [] = \"\"\n\ninvert ('F':xs) = 'R' : invert xs\ninvert ('R':xs) = 'F' : invert xs\ninvert ('m':xs) = 'V' : invert xs\ninvert ('V':xs) = 'm' : invert xs\ninvert [] = \"\"\n\nfoldL = foldBase \"RVF\"\nfoldJ = foldBase \"FVR\"\nfoldZ = foldBase \"FmRVF\"\nfoldU = foldBase \"RVFVR\"\nfoldS = foldBase \"FVRmF\"\n\nfilter' = filter(\\x -> x == 'm' || x == 'V')\n\nfoldX x\n  | x == 'L' = foldL\n  | x == 'J' = foldJ\n  | x == 'Z' = foldZ\n  | x == 'U' = foldU\n  | x == 'S' = foldS\n\nsolve xs = filter' $ foldl (\\acc x -> foldX x acc) \"F\" xs\n\ntest input expected\n  | solve input == expected = putStrLn \"OK\"\n  | otherwise = putStrLn $ \"NG : \" ++ input\n\nmain = do\n  test \"JZ\" \"mVVmV\"\n  test \"J\" \"V\"\n  test \"L\" \"V\"\n  test \"Z\" \"mV\"\n  test \"U\" \"VV\"\n  test \"S\" \"Vm\"\n  test \"JL\" \"VVm\"\n  test \"JS\" \"VmVVm\"\n  test \"JU\" \"VVVmm\"\n  test \"LU\" \"mmVVV\"\n  test \"SL\" \"VVmmV\"\n  test \"SS\" \"VmVVmmVm\"\n  test \"SU\" \"VVVmmmVV\"\n  test \"SZ\" \"mVVmVmmV\"\n  test \"UL\" \"mVVVm\"\n  test \"UU\" \"mmVVVVmm\"\n  test \"UZ\" \"mVVmVVmV\"\n  test \"ZJ\" \"VmmVV\"\n  test \"ZS\" \"VmmVmVVm\"\n  test \"ZZ\" \"mVmmVVmV\"\n  test \"JJJ\" \"VVmVVmm\"\n  test \"JJZ\" \"mVVmVVmVmmV\"\n  test \"JSJ\" \"VVmmVVmVVmm\"\n  test \"JSS\" \"VmVVmmVmVVmVVmmVm\"\n  test \"JUS\" \"VmVVmVVmVVmmVmmVm\"\n  test \"JUU\" \"mmVVVVmmVVVmmmmVV\"\n  test \"JUZ\" \"mVVmVVmVVmVmmVmmV\"\n  test \"LJJ\" \"VmmVVVm\"\n  test \"LLS\" \"VmmVmVVmVVm\"\n  test \"LLU\" \"mmmVVVmmVVV\"\n  test \"LLZ\" \"mVmmVVmVVmV\"\n  test \"LSU\" \"mmVVVmmmVVVVmmmVV\"\n  test \"LSZ\" \"mVVmVmmVVmVVmVmmV\"\n  test \"LZL\" \"mmVVmVVmmVV\"\n  test \"LZS\" \"VmmVmVVmVVmmVmVVm\"\n  test \"LZU\" \"mmmVVVmmVVVmmmVVV\"\n  test \"SJL\" \"VVmVVmmmVVm\"\n  test \"SLU\" \"mmVVVVmmmVVmmmVVV\"\n  test \"SLZ\" \"mVVmVVmVmmVmmVVmV\"\n  test \"SSU\" \"VVVmmmVVVmmVVVmmmmVVVmmmVV\"\n  test \"SUJ\" \"mVVVmVVmmmVmmVVVm\"\n  test \"SUS\" \"VmVVmVVmVVmmVmmVmmVmVVmVVm\"\n  test \"SZZ\" \"mVmmVVmVVmVmmVVmVmmVmmVVmV\"\n  test \"UJJ\" \"VmmVVVmVVmm\"\n  test \"ULU\" \"mmmVVVmmVVVVmmmVV\"\n  test \"ULZ\" \"mVmmVVmVVmVVmVmmV\"\n  test \"UUU\" \"VVmmmmVVVmmVVVVmmVVVmmmmVV\"\n  test \"ZJU\" \"VVVmmmVVmmmVVVVmm\"\n  test \"ZLS\" \"VmVVmmVmmVmVVmVVm\"\n  test \"ZSJ\" \"VVmmVmmVVmmVVVmmV\"\n  test \"ZUJ\" \"mVVVmmVmmmVVmVVVm\"\n  test \"JJLJ\" \"mVVVmmVVmVVmmmV\"\n  test \"JLJJ\" \"VmmVVVmVVmmmVVm\"\n  test \"JLJL\" \"VmmVVVmVVmmmVVm\"\n  test \"LJJL\" \"VVmmVmmVVVmVVmm\"\n  test \"LLJJ\" \"VmmmVVmVVmmVVVm\"\n  test \"SZUS\" \"VmVVmVVmmVmmVmmVmVVmVVmVVmVVmmVmmVmmVmVVmVVmVVmmVmmVmmVmVVmVVmmVmmVmmVmVVmVVmVVm\"\n  test \"ULLS\" \"VmmVmmVmVVmVVmmVmVVmVVmVVmmVmmVmVVm\"\n  test \"JJJJZJ\" \"VmmVVVmmVVmVVmmVVmmmVVmVVmmVVVmmVVmmVmmVVmmmVVmVVmmVVVmmVVmVVmmVVmmmVVmmVmmVVVmmVVmmVmmVVmmmVVm\"\n  test \"JULLLJ\" \"mmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVVmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVmmmVmmVVmmmVVmVVmmmVmmVVVmmVVmVV\"\n  test \"LJJJUL\" \"mVVVmVVmmmVVmVVVmmVmmmVmmVVVmVVmmmVmmVVVmmVmmmVVmVVVmVVmmmVVmVVVmmVmmmVVmVVVmVVmmmVmmVVVmmVmmmV\"\n  test \"LJSJJL\" \"VVmVVmmVVVmmVmmmVVmVVmmmVVmmVmmVVVmVVmmmVVmmVmmVVVmVVmmVVVmmVmmmVVmVVmmVVVmmVmmVVVmVVmmmVVmmVmm\"\n  test \"LZLLLJ\" \"mmVmmVVmmmVVmVVmmmVmmVVVmmVVmVVVmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVmmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVV\"\n  test \"SJJJJL\" \"VVmVVmmVVVmmVmmVVVmVVmmmVVmmVmmVVVmVVmmVVVmmVmmmVVmVVmmmVVmmVmmmVVmVVmmVVVmmVmmVVVmVVmmmVVmmVmm\"\n  test \"ZLJLJL\" \"VmmVVVmmVmmmVVmVVmmVVVmVVmmmVVmmVmmVVVmmVmmmVVmmVmmVVVmVVmmmVVmVVmmVVVmmVmmmVVmVVmmVVVmVVmmmVVm\"\n\n\u7b2c18\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c \u3092\u89e3\u304d\u307e\u3057\u305f\u3002\n\nhttp://qiita.com/Nabetani/items/373105e7fafd12f5e9fd\n\n```hs\nfoldBase val (x:xs)\n  | x == 'F' = val ++ foldBase val xs\n  | x == 'R' = reverse(invert val) ++ foldBase val xs\n  | otherwise = x : foldBase val xs\nfoldBase _ [] = \"\"\n\ninvert ('F':xs) = 'R' : invert xs\ninvert ('R':xs) = 'F' : invert xs\ninvert ('m':xs) = 'V' : invert xs\ninvert ('V':xs) = 'm' : invert xs\ninvert [] = \"\"\n\nfoldL = foldBase \"RVF\"\nfoldJ = foldBase \"FVR\"\nfoldZ = foldBase \"FmRVF\"\nfoldU = foldBase \"RVFVR\"\nfoldS = foldBase \"FVRmF\"\n\nfilter' = filter(\\x -> x == 'm' || x == 'V')\n\nfoldX x\n  | x == 'L' = foldL\n  | x == 'J' = foldJ\n  | x == 'Z' = foldZ\n  | x == 'U' = foldU\n  | x == 'S' = foldS\n\nsolve xs = filter' $ foldl (\\acc x -> foldX x acc) \"F\" xs\n\ntest input expected\n  | solve input == expected = putStrLn \"OK\"\n  | otherwise = putStrLn $ \"NG : \" ++ input\n\nmain = do\n  test \"JZ\" \"mVVmV\"\n  test \"J\" \"V\"\n  test \"L\" \"V\"\n  test \"Z\" \"mV\"\n  test \"U\" \"VV\"\n  test \"S\" \"Vm\"\n  test \"JL\" \"VVm\"\n  test \"JS\" \"VmVVm\"\n  test \"JU\" \"VVVmm\"\n  test \"LU\" \"mmVVV\"\n  test \"SL\" \"VVmmV\"\n  test \"SS\" \"VmVVmmVm\"\n  test \"SU\" \"VVVmmmVV\"\n  test \"SZ\" \"mVVmVmmV\"\n  test \"UL\" \"mVVVm\"\n  test \"UU\" \"mmVVVVmm\"\n  test \"UZ\" \"mVVmVVmV\"\n  test \"ZJ\" \"VmmVV\"\n  test \"ZS\" \"VmmVmVVm\"\n  test \"ZZ\" \"mVmmVVmV\"\n  test \"JJJ\" \"VVmVVmm\"\n  test \"JJZ\" \"mVVmVVmVmmV\"\n  test \"JSJ\" \"VVmmVVmVVmm\"\n  test \"JSS\" \"VmVVmmVmVVmVVmmVm\"\n  test \"JUS\" \"VmVVmVVmVVmmVmmVm\"\n  test \"JUU\" \"mmVVVVmmVVVmmmmVV\"\n  test \"JUZ\" \"mVVmVVmVVmVmmVmmV\"\n  test \"LJJ\" \"VmmVVVm\"\n  test \"LLS\" \"VmmVmVVmVVm\"\n  test \"LLU\" \"mmmVVVmmVVV\"\n  test \"LLZ\" \"mVmmVVmVVmV\"\n  test \"LSU\" \"mmVVVmmmVVVVmmmVV\"\n  test \"LSZ\" \"mVVmVmmVVmVVmVmmV\"\n  test \"LZL\" \"mmVVmVVmmVV\"\n  test \"LZS\" \"VmmVmVVmVVmmVmVVm\"\n  test \"LZU\" \"mmmVVVmmVVVmmmVVV\"\n  test \"SJL\" \"VVmVVmmmVVm\"\n  test \"SLU\" \"mmVVVVmmmVVmmmVVV\"\n  test \"SLZ\" \"mVVmVVmVmmVmmVVmV\"\n  test \"SSU\" \"VVVmmmVVVmmVVVmmmmVVVmmmVV\"\n  test \"SUJ\" \"mVVVmVVmmmVmmVVVm\"\n  test \"SUS\" \"VmVVmVVmVVmmVmmVmmVmVVmVVm\"\n  test \"SZZ\" \"mVmmVVmVVmVmmVVmVmmVmmVVmV\"\n  test \"UJJ\" \"VmmVVVmVVmm\"\n  test \"ULU\" \"mmmVVVmmVVVVmmmVV\"\n  test \"ULZ\" \"mVmmVVmVVmVVmVmmV\"\n  test \"UUU\" \"VVmmmmVVVmmVVVVmmVVVmmmmVV\"\n  test \"ZJU\" \"VVVmmmVVmmmVVVVmm\"\n  test \"ZLS\" \"VmVVmmVmmVmVVmVVm\"\n  test \"ZSJ\" \"VVmmVmmVVmmVVVmmV\"\n  test \"ZUJ\" \"mVVVmmVmmmVVmVVVm\"\n  test \"JJLJ\" \"mVVVmmVVmVVmmmV\"\n  test \"JLJJ\" \"VmmVVVmVVmmmVVm\"\n  test \"JLJL\" \"VmmVVVmVVmmmVVm\"\n  test \"LJJL\" \"VVmmVmmVVVmVVmm\"\n  test \"LLJJ\" \"VmmmVVmVVmmVVVm\"\n  test \"SZUS\" \"VmVVmVVmmVmmVmmVmVVmVVmVVmVVmmVmmVmmVmVVmVVmVVmmVmmVmmVmVVmVVmmVmmVmmVmVVmVVmVVm\"\n  test \"ULLS\" \"VmmVmmVmVVmVVmmVmVVmVVmVVmmVmmVmVVm\"\n  test \"JJJJZJ\" \"VmmVVVmmVVmVVmmVVmmmVVmVVmmVVVmmVVmmVmmVVmmmVVmVVmmVVVmmVVmVVmmVVmmmVVmmVmmVVVmmVVmmVmmVVmmmVVm\"\n  test \"JULLLJ\" \"mmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVVmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVmmmVmmVVmmmVVmVVmmmVmmVVVmmVVmVV\"\n  test \"LJJJUL\" \"mVVVmVVmmmVVmVVVmmVmmmVmmVVVmVVmmmVmmVVVmmVmmmVVmVVVmVVmmmVVmVVVmmVmmmVVmVVVmVVmmmVmmVVVmmVmmmV\"\n  test \"LJSJJL\" \"VVmVVmmVVVmmVmmmVVmVVmmmVVmmVmmVVVmVVmmmVVmmVmmVVVmVVmmVVVmmVmmmVVmVVmmVVVmmVmmVVVmVVmmmVVmmVmm\"\n  test \"LZLLLJ\" \"mmVmmVVmmmVVmVVmmmVmmVVVmmVVmVVVmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVVmmmVmmVVmmmVVmVVVmmVmmVVVmmVVmVV\"\n  test \"SJJJJL\" \"VVmVVmmVVVmmVmmVVVmVVmmmVVmmVmmVVVmVVmmVVVmmVmmmVVmVVmmmVVmmVmmmVVmVVmmVVVmmVmmVVVmVVmmmVVmmVmm\"\n  test \"ZLJLJL\" \"VmmVVVmmVmmmVVmVVmmVVVmVVmmmVVmmVmmVVVmmVmmmVVmmVmmVVVmVVmmmVVmVVmmVVVmmVmmmVVmVVmmVVVmVVmmmVVm\"\n```", "tags": ["Haskell", "yhpg", "\u3069\u3046\u66f8\u304f"]}