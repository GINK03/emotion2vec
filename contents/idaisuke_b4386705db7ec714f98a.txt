{"tags": ["SQLCipher", "cocos2d-x", "C++", "Android"], "context": " More than 1 year has passed since last update.\n\nSQLCipher\u3068\u306f\nhttps://www.zetetic.net/sqlcipher/\n\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306eSQLite\u6697\u53f7\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\nBSD\u30b9\u30bf\u30a4\u30eb\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u3092\u63a1\u7528\u3057\u3066\u304a\u308a\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u8a18\u3059\u308c\u3070\u7121\u511f\u3067\u4f7f\u7528\u51fa\u6765\u307e\u3059\u3002\n\u516c\u5f0f\u30b5\u30a4\u30c8\u306b\u3042\u308bAndroid\u30e9\u30a4\u30d6\u30e9\u30ea\u306fJava\u7528\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u3067\u306fCocos2d-x\u3067\u4f7f\u3048\u307e\u305b\u3093\u3002\n\u306a\u306e\u3067Android\u5411\u3051\u306b\u30d3\u30eb\u30c9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u305d\u306e\u6642\u306e\u624b\u9806\u306e\u30e1\u30e2\u3067\u3059\u3002\n\n\u5b9f\u884c\u3057\u305f\u74b0\u5883\n\nOS X 10.10.3\nCocos2d-x v3.6\nAndroid NDK r10d\n\n\nOpenSSL\u3092\u30d3\u30eb\u30c9\u3059\u308b\nOpenSSL\u304c\u5fc5\u8981\u306a\u306e\u3067\u307e\u305aOpenSSL\u3092\u30d3\u30eb\u30c9\u3057\u3066\u304a\u304f\u3002\nCocos2d-x\u3067OpenSSL\u3092\u4f7f\u3046(Android\u7de8)\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30af\u30ed\u30fc\u30f3\nmkdir SQLCipher\ncd SQLCipher\ngit clone git://github.com/sqlcipher/sqlcipher.git src\n\n\nAndroid NDK Standalone Toolchain\u306e\u4f5c\u6210\n$NDK_ROOT/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=toolchain --platform=android-19\n\n\n\u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30db\u30b9\u30c8\u306e\u8a2d\u5b9a\n\u203b arm-linux-androideabi\u3068\u3059\u308b\u3068\u305d\u3093\u306a\u3082\u3093\u77e5\u3089\u3093\u3068\u6012\u3089\u308c\u308b\u306e\u3067arm-linux\u306b\u3059\u308b\u3002\nHOST=arm-linux\n\n\nToolchain\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u66f4\u3059\u308b\narm-linux-androideabi-gcc > arm-linux-gcc \u306e\u3088\u3046\u306b\u540d\u524d\u3092\u5909\u66f4\u3059\u308b\u3002\nfind toolchain/bin -name arm-linux-androideabi* -type f | while read FILE\ndo\n  cp -f $FILE ${FILE%/*}/arm-linux${FILE##*-androideabi}\ndone\n\n\n\u30d3\u30eb\u30c9\u3059\u308b\ncd src\n\n\nToolchain\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\nexport PATH=/Users/ditabashi/SQLCipher/toolchain/bin:$PATH\n\n\narmeabi\n\n\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u8a2d\u5b9a\nARCH=armv5\n\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8a2d\u5b9a\nPREFIX=/Users/ditabashi/SQLCipher/dest/armeabi\n\n\nOpenSSL\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\nOPENSSL_INCLUDE_PATH=/Users/ditabashi/OpenSSL/dest/armeabi/include\nOPENSSL_LIBRARY_PATH=/Users/ditabashi/OpenSSL/dest/armeabi/lib\n\n\n\u30b3\u30f3\u30d5\u30a3\u30b0\n./configure --prefix=$PREFIX -host=$HOST --enable-tempstore=yes --disable-tcl --disable-readline CFLAGS=\"-DSQLITE_HAS_CODEC -DSQLITE_TEMP_STORE=2 -march=$ARCH -fPIE -I$OPENSSL_INCLUDE_PATH\" LDFLAGS=\"-L$OPENSSL_LIBRARY_PATH\"\n\n\n\u30d3\u30eb\u30c9 & \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nmake clean && make && make install\n\n\narmeabi-v7a\n\n\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u8a2d\u5b9a\nARCH=armv7-a\n\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8a2d\u5b9a\nPREFIX=/Users/ditabashi/SQLCipher/dest/armeabi-v7a\n\n\nOpenSSL\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\nOPENSSL_INCLUDE_PATH=/Users/ditabashi/OpenSSL/dest/armeabi-v7a/include\nOPENSSL_LIBRARY_PATH=/Users/ditabashi/OpenSSL/dest/armeabi-v7a/lib\n\n\n\u30b3\u30f3\u30d5\u30a3\u30b0\n./configure --prefix=$PREFIX -host=$HOST --enable-tempstore=yes --disable-tcl --disable-readline CFLAGS=\"-DSQLITE_HAS_CODEC -DSQLITE_TEMP_STORE=2 -march=$ARCH -fPIE -I$OPENSSL_INCLUDE_PATH\" LDFLAGS=\"-L$OPENSSL_LIBRARY_PATH\"\n\n\n\u30d3\u30eb\u30c9 & \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nmake clean && make && make install\n\n\nCocos2d-x\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3059\u308b\n\n\nAndroid.mk\u306e\u4e2d\u8eab\n\nAndroid.mk\nLOCAL_PATH := $(call my-dir)\ninclude $(CLEAR_VARS)\n\nLOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/$(TARGET_ARCH_ABI)/include/sqlcipher\n\nLOCAL_MODULE := sqlcipher\nLOCAL_SRC_FILES := $(TARGET_ARCH_ABI)/lib/libsqlcipher.a\ninclude $(PREBUILT_STATIC_LIBRARY)\n\n\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eAndroid.mk\u3092\u4fee\u6b63\n\nAndroid.mk\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d)\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/external)\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/cocos)\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\n$(call import-add-path,$(LOCAL_PATH)/../../Libraries)\n\nLOCAL_MODULE := cocos2dcpp_shared\n\nLOCAL_MODULE_FILENAME := libcocos2dcpp\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                   ../../Classes/AppDelegate.cpp \\\n                   ../../Classes/HelloWorldScene.cpp\n\nLOCAL_C_INCLUDES := $(LOCAL_PATH)/../../Classes\n\n# _COCOS_HEADER_ANDROID_BEGIN\n# _COCOS_HEADER_ANDROID_END\n\n\nLOCAL_STATIC_LIBRARIES := cocos2dx_static\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\nLOCAL_STATIC_LIBRARIES += crypto ssl\nLOCAL_STATIC_LIBRARIES += sqlcipher\n\n# _COCOS_LIB_ANDROID_BEGIN\n# _COCOS_LIB_ANDROID_END\n\ninclude $(BUILD_SHARED_LIBRARY)\n\n$(call import-module,.)\n\n# _COCOS_LIB_IMPORT_ANDROID_BEGIN\n# _COCOS_LIB_IMPORT_ANDROID_END\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\n$(call import-module,OpenSSL/Android)\n$(call import-module,SQLCipher/Android)\n\n\n\n\nApplication.mk\u306bCPPFLAGS\u3092\u8ffd\u52a0\u3059\u308b\u3002\n\nApplication.mk\nAPP_STL := gnustl_static\n\nAPP_CPPFLAGS := -frtti -DCC_ENABLE_CHIPMUNK_INTEGRATION=1 -std=c++11 -fsigned-char\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\nAPP_CPPFLAGS += -DSQLITE_HAS_CODEC -DSQLITE_TEMP_STORE=2\n\nAPP_LDFLAGS := -latomic\n\n\nifeq ($(NDK_DEBUG),1)\n  APP_CPPFLAGS += -DCOCOS2D_DEBUG=1\n  APP_OPTIM := debug\nelse\n  APP_CPPFLAGS += -DNDEBUG\n  APP_OPTIM := release\nendif\n\n\n\n\n\u4f7f\u3063\u3066\u307f\u308b\n#include <sqlite3.h>\n\nvoid testSQLCipher() {\n    auto path = cocos2d::FileUtils::getInstance()->getWritablePath() + \"test.db\";\n    std::string passphrase(\"abcdefghijklmn\");\n    sqlite3 *db;\n    sqlite3_open(path.c_str(), &db);\n    sqlite3_key(db, passphrase.c_str(), passphrase.length());\n    sqlite3_exec(db, \"CREATE TABLE chara(id INTEGER, name TEXT);\", nullptr, nullptr, nullptr);\n    sqlite3_exec(db, \"INSERT INTO chara VALUES(1, '\u30ad\u30e3\u30e9A');\", nullptr, nullptr, nullptr);\n    sqlite3_exec(db, \"INSERT INTO chara VALUES(2, '\u30ad\u30e3\u30e9B');\", nullptr, nullptr, nullptr);\n    sqlite3_exec(db, \"INSERT INTO chara VALUES(3, '\u30ad\u30e3\u30e9C');\", nullptr, nullptr, nullptr);\n\n    sqlite3_stmt *stmt;\n    sqlite3_prepare(db, \"SELECT * FROM chara;\", -1, &stmt, nullptr);\n    while (SQLITE_DONE != sqlite3_step(stmt)) {\n        auto id = sqlite3_column_int(stmt, 0);\n        auto name = reinterpret_cast<const char *>(sqlite3_column_text(stmt, 1));\n        CCLOG(\"id = %d, name = %s\", id, name);\n    }\n    sqlite3_finalize(stmt);\n\n    sqlite3_close(db);\n}\n\n\n\u304a\u3057\u307e\u3044\n\u4ee5\u4e0a\u306e\u3053\u3068\u3092\u307e\u3068\u3081\u3066\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3057\u3066GitHub\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/idaisuke/hydrogenium\nclone\u3057\u305f\u5f8c\u3001\n\u2460build-libssl-for-android.sh\n\u2461build-libsqlcipher-for-android.sh\n\u306e\u9806\u306b\u5b9f\u884c\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n### SQLCipher\u3068\u306f\nhttps://www.zetetic.net/sqlcipher/\n\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306eSQLite\u6697\u53f7\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\nBSD\u30b9\u30bf\u30a4\u30eb\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u3092\u63a1\u7528\u3057\u3066\u304a\u308a\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u8a18\u3059\u308c\u3070\u7121\u511f\u3067\u4f7f\u7528\u51fa\u6765\u307e\u3059\u3002\n\u516c\u5f0f\u30b5\u30a4\u30c8\u306b\u3042\u308bAndroid\u30e9\u30a4\u30d6\u30e9\u30ea\u306fJava\u7528\u306a\u306e\u3067\u305d\u306e\u307e\u307e\u3067\u306fCocos2d-x\u3067\u4f7f\u3048\u307e\u305b\u3093\u3002\n\u306a\u306e\u3067Android\u5411\u3051\u306b\u30d3\u30eb\u30c9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u305d\u306e\u6642\u306e\u624b\u9806\u306e\u30e1\u30e2\u3067\u3059\u3002\n\n######\u5b9f\u884c\u3057\u305f\u74b0\u5883\n\n+ OS X 10.10.3\n+ Cocos2d-x v3.6\n+ Android NDK r10d\n\n### OpenSSL\u3092\u30d3\u30eb\u30c9\u3059\u308b\nOpenSSL\u304c\u5fc5\u8981\u306a\u306e\u3067\u307e\u305aOpenSSL\u3092\u30d3\u30eb\u30c9\u3057\u3066\u304a\u304f\u3002\n[Cocos2d-x\u3067OpenSSL\u3092\u4f7f\u3046(Android\u7de8)](http://qiita.com/idaisuke/items/22e2ebc24812681cd61d)\n\n### \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u30ea\u30dd\u30b8\u30c8\u30ea\u304b\u3089\u30af\u30ed\u30fc\u30f3\n```bash\nmkdir SQLCipher\ncd SQLCipher\ngit clone git://github.com/sqlcipher/sqlcipher.git src\n```\n\n### Android NDK Standalone Toolchain\u306e\u4f5c\u6210\n```bash\n$NDK_ROOT/build/tools/make-standalone-toolchain.sh --arch=arm --install-dir=toolchain --platform=android-19\n```\n\n### \u30af\u30ed\u30b9\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30db\u30b9\u30c8\u306e\u8a2d\u5b9a\n\u203b arm-linux-androideabi\u3068\u3059\u308b\u3068\u305d\u3093\u306a\u3082\u3093\u77e5\u3089\u3093\u3068\u6012\u3089\u308c\u308b\u306e\u3067arm-linux\u306b\u3059\u308b\u3002\n\n```bash\nHOST=arm-linux\n```\n\n### Toolchain\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u66f4\u3059\u308b\narm-linux-androideabi-gcc > arm-linux-gcc \u306e\u3088\u3046\u306b\u540d\u524d\u3092\u5909\u66f4\u3059\u308b\u3002\n\n```bash\nfind toolchain/bin -name arm-linux-androideabi* -type f | while read FILE\ndo\n  cp -f $FILE ${FILE%/*}/arm-linux${FILE##*-androideabi}\ndone\n```\n\n### \u30d3\u30eb\u30c9\u3059\u308b\n```bash\ncd src\n```\n\n###### Toolchain\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\n```bash\nexport PATH=/Users/ditabashi/SQLCipher/toolchain/bin:$PATH\n```\n\n##### armeabi\n###### \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u8a2d\u5b9a\n```bash\nARCH=armv5\n```\n\n###### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8a2d\u5b9a\n```bash\nPREFIX=/Users/ditabashi/SQLCipher/dest/armeabi\n```\n\n###### OpenSSL\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\n```bash\nOPENSSL_INCLUDE_PATH=/Users/ditabashi/OpenSSL/dest/armeabi/include\nOPENSSL_LIBRARY_PATH=/Users/ditabashi/OpenSSL/dest/armeabi/lib\n```\n\n###### \u30b3\u30f3\u30d5\u30a3\u30b0\n```bash\n./configure --prefix=$PREFIX -host=$HOST --enable-tempstore=yes --disable-tcl --disable-readline CFLAGS=\"-DSQLITE_HAS_CODEC -DSQLITE_TEMP_STORE=2 -march=$ARCH -fPIE -I$OPENSSL_INCLUDE_PATH\" LDFLAGS=\"-L$OPENSSL_LIBRARY_PATH\"\n```\n\n###### \u30d3\u30eb\u30c9 & \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n```bash\nmake clean && make && make install\n```\n\n##### armeabi-v7a\n###### \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u8a2d\u5b9a\n```bash\nARCH=armv7-a\n```\n\n###### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8a2d\u5b9a\n```bash\nPREFIX=/Users/ditabashi/SQLCipher/dest/armeabi-v7a\n```\n\n###### OpenSSL\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\n```bash\nOPENSSL_INCLUDE_PATH=/Users/ditabashi/OpenSSL/dest/armeabi-v7a/include\nOPENSSL_LIBRARY_PATH=/Users/ditabashi/OpenSSL/dest/armeabi-v7a/lib\n```\n\n###### \u30b3\u30f3\u30d5\u30a3\u30b0\n```bash\n./configure --prefix=$PREFIX -host=$HOST --enable-tempstore=yes --disable-tcl --disable-readline CFLAGS=\"-DSQLITE_HAS_CODEC -DSQLITE_TEMP_STORE=2 -march=$ARCH -fPIE -I$OPENSSL_INCLUDE_PATH\" LDFLAGS=\"-L$OPENSSL_LIBRARY_PATH\"\n```\n\n###### \u30d3\u30eb\u30c9 & \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n```bash\nmake clean && make && make install\n```\n\n\n\n\n### Cocos2d-x\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3059\u308b\n![sqlcipher_path.png](https://qiita-image-store.s3.amazonaws.com/0/67518/f89129a4-2ea1-24fe-3838-0e2f064e2de0.png \"sqlcipher_path.png\")\n\n\n###### Android.mk\u306e\u4e2d\u8eab\n```Android.mk\nLOCAL_PATH := $(call my-dir)\ninclude $(CLEAR_VARS)\n\nLOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/$(TARGET_ARCH_ABI)/include/sqlcipher\n\nLOCAL_MODULE := sqlcipher\nLOCAL_SRC_FILES := $(TARGET_ARCH_ABI)/lib/libsqlcipher.a\ninclude $(PREBUILT_STATIC_LIBRARY)\n\n```\n\n### \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306eAndroid.mk\u3092\u4fee\u6b63\n```Android.mk\nLOCAL_PATH := $(call my-dir)\n\ninclude $(CLEAR_VARS)\n\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d)\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/external)\n$(call import-add-path,$(LOCAL_PATH)/../../cocos2d/cocos)\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\n$(call import-add-path,$(LOCAL_PATH)/../../Libraries)\n\nLOCAL_MODULE := cocos2dcpp_shared\n\nLOCAL_MODULE_FILENAME := libcocos2dcpp\n\nLOCAL_SRC_FILES := hellocpp/main.cpp \\\n                   ../../Classes/AppDelegate.cpp \\\n                   ../../Classes/HelloWorldScene.cpp\n\nLOCAL_C_INCLUDES := $(LOCAL_PATH)/../../Classes\n\n# _COCOS_HEADER_ANDROID_BEGIN\n# _COCOS_HEADER_ANDROID_END\n\n\nLOCAL_STATIC_LIBRARIES := cocos2dx_static\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\nLOCAL_STATIC_LIBRARIES += crypto ssl\nLOCAL_STATIC_LIBRARIES += sqlcipher\n\n# _COCOS_LIB_ANDROID_BEGIN\n# _COCOS_LIB_ANDROID_END\n\ninclude $(BUILD_SHARED_LIBRARY)\n\n$(call import-module,.)\n\n# _COCOS_LIB_IMPORT_ANDROID_BEGIN\n# _COCOS_LIB_IMPORT_ANDROID_END\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\n$(call import-module,OpenSSL/Android)\n$(call import-module,SQLCipher/Android)\n\n```\n\n### Application.mk\u306bCPPFLAGS\u3092\u8ffd\u52a0\u3059\u308b\u3002\n```bash:Application.mk\nAPP_STL := gnustl_static\n\nAPP_CPPFLAGS := -frtti -DCC_ENABLE_CHIPMUNK_INTEGRATION=1 -std=c++11 -fsigned-char\n\n# **\u3053\u308c\u3092\u8ffd\u52a0**\nAPP_CPPFLAGS += -DSQLITE_HAS_CODEC -DSQLITE_TEMP_STORE=2\n\nAPP_LDFLAGS := -latomic\n\n\nifeq ($(NDK_DEBUG),1)\n  APP_CPPFLAGS += -DCOCOS2D_DEBUG=1\n  APP_OPTIM := debug\nelse\n  APP_CPPFLAGS += -DNDEBUG\n  APP_OPTIM := release\nendif\n\n```\n\n### \u4f7f\u3063\u3066\u307f\u308b\n```cpp\n#include <sqlite3.h>\n\nvoid testSQLCipher() {\n    auto path = cocos2d::FileUtils::getInstance()->getWritablePath() + \"test.db\";\n    std::string passphrase(\"abcdefghijklmn\");\n    sqlite3 *db;\n    sqlite3_open(path.c_str(), &db);\n    sqlite3_key(db, passphrase.c_str(), passphrase.length());\n    sqlite3_exec(db, \"CREATE TABLE chara(id INTEGER, name TEXT);\", nullptr, nullptr, nullptr);\n    sqlite3_exec(db, \"INSERT INTO chara VALUES(1, '\u30ad\u30e3\u30e9A');\", nullptr, nullptr, nullptr);\n    sqlite3_exec(db, \"INSERT INTO chara VALUES(2, '\u30ad\u30e3\u30e9B');\", nullptr, nullptr, nullptr);\n    sqlite3_exec(db, \"INSERT INTO chara VALUES(3, '\u30ad\u30e3\u30e9C');\", nullptr, nullptr, nullptr);\n\n    sqlite3_stmt *stmt;\n    sqlite3_prepare(db, \"SELECT * FROM chara;\", -1, &stmt, nullptr);\n    while (SQLITE_DONE != sqlite3_step(stmt)) {\n        auto id = sqlite3_column_int(stmt, 0);\n        auto name = reinterpret_cast<const char *>(sqlite3_column_text(stmt, 1));\n        CCLOG(\"id = %d, name = %s\", id, name);\n    }\n    sqlite3_finalize(stmt);\n    \n    sqlite3_close(db);\n}\n```\n\n### \u304a\u3057\u307e\u3044\n\u4ee5\u4e0a\u306e\u3053\u3068\u3092\u307e\u3068\u3081\u3066\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306b\u3057\u3066GitHub\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/idaisuke/hydrogenium\nclone\u3057\u305f\u5f8c\u3001\n\u2460build-libssl-for-android.sh\n\u2461build-libsqlcipher-for-android.sh\n\u306e\u9806\u306b\u5b9f\u884c\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n"}