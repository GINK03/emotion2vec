{"tags": ["OpenCV", "DeepLearning", "Python", "\u6a5f\u68b0\u5b66\u7fd2"], "context": "\n\n\u753b\u50cf\u6c34\u5897\u3057\u306e\u610f\u7fa9\n\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306eCNN\u7b49\u306e\u30af\u30e9\u30b9\u5206\u985e\u306e\u7cbe\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u3001\u512a\u308c\u305f\u5b66\u7fd2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002\u7cbe\u5ea6\u3092\u62c5\u4fdd\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5de5\u592b\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u5341\u5206\u306a\u753b\u50cf\u679a\u6570\u3092\u7528\u610f\u3059\u308b\u3002\n\u5404\u30bf\u30b0\u306e\u753b\u50cf\u679a\u6570\u3092\u63c3\u3048\u308b\n\u30bf\u30b0\u4ed8\u3051\u3092\u3088\u308a\u6b63\u78ba\u306b\u884c\u3046\n\u540c\u3058\u5206\u985e\u306e\u3082\u306e\u3067\u3082\u3001\u898b\u305f\u76ee\u304c\u7570\u306a\u308b\u5834\u5408\u306f\u7d30\u304b\u304f\u30bf\u30b0\u3092\u5206\u3051\u308b\n\n\u3053\u308c\u3089\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u3001\u3068\u306b\u304b\u304f\u679a\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\u7a2e\u985e\u306b\u3088\u3063\u3066\u679a\u6570\u306b\u504f\u308a\u304c\u3042\u308b\u5834\u5408\u3082\u3042\u308a\u3001\u3059\u3079\u3066\u624b\u4f5c\u696d\u3067\u62bd\u51fa\u30fb\u30bf\u30b0\u4ed8\u3051\u3057\u3066\u3044\u308b\u3068\u5927\u5909\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u3042\u308b\u7a0b\u5ea6\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u305f\u753b\u50cf\u305f\u3061\u3092\u52a0\u5de5\u3059\u308b\u3053\u3068\u3067\u3001\u753b\u50cf\u306e\u679a\u6570\u3092\u5897\u3084\u3059\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\u305d\u306e\u624b\u6cd5\u3092\u5e7e\u3064\u304b\u7d39\u4ecb\u3057\u307e\u3059\u3002\u306a\u304a\u8aac\u660e\u306b\u306f\u3001\u9ad8\u57ce\u308c\u306b\u3055\u3093\u3092\u753b\u50cf\u51e6\u7406\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u4f7f\u3046\u3079\u304d\u3068\u306e\u610f\u898b\u306b\u57fa\u3065\u304d\u3001\u9ad8\u57ce\u308c\u306b\u3055\u3093\u3092\u5229\u7528\u3057\u307e\u3059\u3002  \n\n\u6c34\u5897\u3057\u624b\u6cd5\nOpenCV 3.0 Python\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u6c34\u5897\u3057\u306b\u4f7f\u3048\u308b\u30bd\u30fc\u30b9\u3092\u3053\u3061\u3089\u306b\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nGithub\n\n\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u8abf\u6574\n\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u3092\u5f37\u8abf\u3001\u4f4e\u6e1b\u3055\u305b\u305f\u753b\u50cf\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u5f37\u8abf\u3059\u308b\u306b\u306f\u3001\u4e00\u5b9a\u4ee5\u4e0b\u306e\u4f4e\u8f1d\u5ea6\u306e\u753b\u7d20\u30920,\u3000\u4e00\u5b9a\u4ee5\u4e0a\u306e\u9ad8\u8f1d\u5ea6\u306e\u753b\u7d20\u3092255\u306b\u3057\u3001\u4e2d\u9593\u306e\u8f1d\u5ea6\u306e\u3082\u306e\u3092\u8abf\u6574\u3057\u307e\u3059\u3002\n\u9006\u306b\u4f4e\u6e1b\u3059\u308b\u306b\u306f\u3001\u8f1d\u5ea6\u306e\u5e45\u3092\u5c0f\u3055\u304f\u3059\u308b\u3088\u3046\u306b\u8abf\u6574\u3057\u307e\u3059\u3002\u3053\u3061\u3089\u306e\u56f3\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n# \u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30c6\u30fc\u30d6\u30eb\u306e\u751f\u6210\nmin_table = 50\nmax_table = 205\ndiff_table = max_table - min_table\n\nLUT_HC = np.arange(256, dtype = 'uint8' )\nLUT_LC = np.arange(256, dtype = 'uint8' )\n\n# \u30cf\u30a4\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8LUT\u4f5c\u6210\nfor i in range(0, min_table):\n    LUT_HC[i] = 0\nfor i in range(min_table, max_table):\n    LUT_HC[i] = 255 * (i - min_table) / diff_table\nfor i in range(max_table, 255):\n    LUT_HC[i] = 255\n\n# \u30ed\u30fc\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8LUT\u4f5c\u6210\nfor i in range(256):\n    LUT_LC[i] = min_table + i * (diff_table) / 255\n\n# \u5909\u63db\nsrc = cv2.imread(\"reni.jpg\", 1)\nhigh_cont_img = cv2.LUT(src, LUT_HC)\nlow_cont_img = cv2.LUT(src, LUT_LC)\n\n\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u3092\u5f37\u8abf\u3057\u305f\u3082\u306e\n\n\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u3092\u4f4e\u6e1b\u3057\u305f\u3082\u306e\n\n\u53c2\u8003\n\u30c8\u30fc\u30f3\u30ab\u30fc\u30d6\u3067\u753b\u50cf\u306e\u6fc3\u5ea6\u5909\u63db\n\n\u30ac\u30f3\u30de\u5909\u63db\n\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u306a\u3069\u306e\u969b\u306b\u4f7f\u308f\u308c\u308b\u5909\u63db\u3067\u3001\u8f1d\u5ea6\u5024\u3092\u03b3\u306e\u5024\u306b\u3088\u3063\u3066\u5909\u5316\u3055\u305b\u307e\u3059\u3002\n\n\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u8abf\u6574\u306e\u30bd\u30fc\u30b9\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30c6\u30fc\u30d6\u30eb\u3092\u3001\u3053\u3061\u3089\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n# \u30ac\u30f3\u30de\u5909\u63db\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30c6\u30fc\u30d6\u30eb\ngamma1 = 0.75\ngamma2 = 1.5\nfor i in range(256):\n    LUT_G1[i] = 255 * pow(float(i) / 255, 1.0 / gamma1)\n    LUT_G2[i] = 255 * pow(float(i) / 255, 1.0 / gamma2)\n\n\u03b3=1.5\u306e\u3068\u304d\n\n\u03b3=0.75\u306e\u3068\u304d\n\n\u53c2\u8003\n\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30c6\u30fc\u30d6\u30eb\uff08\u30ac\u30f3\u30de\u88dc\u6b63\u306e\u4f8b\uff09 \n\n\u5e73\u6ed1\u5316\n\u753b\u50cf\u3092\u6ed1\u3089\u304b\u306b\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u5e73\u5747\u5316\u30d5\u30a3\u30eb\u30bf\u3092\u304b\u3051\u3066\u3044\u307e\u3059\u3002\naverage_square = (10,10)\nsrc = cv2.imread(\"reni.jpg\", 1)\nblur_img = cv2.blur(src, average_square)\n\n10\u00d710\u5e73\u5747\u5316\u30d5\u30a3\u30eb\u30bf\n\n\u53c2\u8003\n\u5e73\u6ed1\u5316\uff08\u79fb\u52d5\u5e73\u5747\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\uff09\u30d5\u30a3\u30eb\u30bf\n\n\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u57fa\u3065\u304f\u30ce\u30a4\u30ba\n\u5404\u753b\u7d20\u306b\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u57fa\u3065\u304f\u751f\u6210\u5024\u3092\u8db3\u3057\u3066\u3001\u30ce\u30a4\u30ba\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002\n\u03c3=15\u306e\u30ac\u30a6\u30b7\u30a2\u30f3\u30ce\u30a4\u30ba\n\nsrc = cv2.imread(\"reni.jpg\", 1)\nrow,col,ch= src.shape\nmean = 0\nsigma = 15\ngauss = np.random.normal(mean,sigma,(row,col,ch))\ngauss = gauss.reshape(row,col,ch)\ngauss_img = src + gauss\n\n\u53c2\u8003\n\u753b\u50cf\u60c5\u5831\uff08\u8f1d\u5ea6\u30c7\u30fc\u30bf\uff09\u306e\u5909\u63db\n\nSalt&Pepper\u30ce\u30a4\u30ba\n\u5869\u3068\u80e1\u6912\u3092\u304b\u3051\u305f\u3088\u3046\u306a\u30ce\u30a4\u30ba\u306a\u306e\u3067\u3001\u3053\u3046\u547c\u3070\u308c\u307e\u3059\u3002\u30a4\u30f3\u30d1\u30eb\u30b9\u30ce\u30a4\u30ba\u3068\u3082\u8a00\u3046\u305d\u3046\u3067\u3059\u3002\nsrc = cv2.imread(\"reni.jpg\", 1)\nrow,col,ch = src.shape\ns_vs_p = 0.5\namount = 0.004\nsp_img = src.copy()\n\n# \u5869\u30e2\u30fc\u30c9\nnum_salt = np.ceil(amount * src.size * s_vs_p)\ncoords = [np.random.randint(0, i-1 , int(num_salt)) for i in src.shape]\nsp_img[coords[:-1]] = (255,255,255)\n\n# \u80e1\u6912\u30e2\u30fc\u30c9\nnum_pepper = np.ceil(amount* src.size * (1. - s_vs_p))\ncoords = [np.random.randint(0, i-1 , int(num_pepper)) for i in src.shape]\nsp_img[coords[:-1]] = (0,0,0)\n\n\n0.4%\u306e\u753b\u7d20\u306b\u30ce\u30a4\u30ba\n\n\n\u53cd\u8ee2\n\u5de6\u53f3\u306e\u53cd\u8ee2\u3001\u4e0a\u4e0b\u306e\u53cd\u8ee2\u3092\u884c\u3044\u307e\u3059\u3002\nsrc = cv2.imread(\"reni.jpg\", 1)\nhflip_img = cv2.flip(src, 1)\nvflip_img = cv2.flip(src, 0)\n\n\n\u62e1\u5927\u7e2e\u5c0f\n\u753b\u50cf\u306e\u4e00\u90e8\u3092\u62e1\u5927\u3001\u7e2e\u5c0f\u3057\u307e\u3059\u3002\nsrc = cv2.imread(\"reni.jpg\", 1)\nhight = src.shape[0]\nwidth = src.shape[1]\nhalf_img = cv2.resize(src,(hight/2,width/2))\n\n## \u753b\u50cf\u6c34\u5897\u3057\u306e\u610f\u7fa9\n\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306eCNN\u7b49\u306e\u30af\u30e9\u30b9\u5206\u985e\u306e\u7cbe\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u3001\u512a\u308c\u305f\u5b66\u7fd2\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002\u7cbe\u5ea6\u3092\u62c5\u4fdd\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5de5\u592b\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n* \u5341\u5206\u306a\u753b\u50cf\u679a\u6570\u3092\u7528\u610f\u3059\u308b\u3002\n* \u5404\u30bf\u30b0\u306e\u753b\u50cf\u679a\u6570\u3092\u63c3\u3048\u308b\n* \u30bf\u30b0\u4ed8\u3051\u3092\u3088\u308a\u6b63\u78ba\u306b\u884c\u3046\n* \u540c\u3058\u5206\u985e\u306e\u3082\u306e\u3067\u3082\u3001\u898b\u305f\u76ee\u304c\u7570\u306a\u308b\u5834\u5408\u306f\u7d30\u304b\u304f\u30bf\u30b0\u3092\u5206\u3051\u308b\n  \n\u3053\u308c\u3089\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u3001\u3068\u306b\u304b\u304f\u679a\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\u7a2e\u985e\u306b\u3088\u3063\u3066\u679a\u6570\u306b\u504f\u308a\u304c\u3042\u308b\u5834\u5408\u3082\u3042\u308a\u3001\u3059\u3079\u3066\u624b\u4f5c\u696d\u3067\u62bd\u51fa\u30fb\u30bf\u30b0\u4ed8\u3051\u3057\u3066\u3044\u308b\u3068\u5927\u5909\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u3001\u3042\u308b\u7a0b\u5ea6\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u305f\u753b\u50cf\u305f\u3061\u3092\u52a0\u5de5\u3059\u308b\u3053\u3068\u3067\u3001\u753b\u50cf\u306e\u679a\u6570\u3092\u5897\u3084\u3059\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\u305d\u306e\u624b\u6cd5\u3092\u5e7e\u3064\u304b\u7d39\u4ecb\u3057\u307e\u3059\u3002\u306a\u304a\u8aac\u660e\u306b\u306f\u3001[\u9ad8\u57ce\u308c\u306b\u3055\u3093\u3092\u753b\u50cf\u51e6\u7406\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u4f7f\u3046\u3079\u304d](http://bohemia.hatenablog.com/entry/2016/01/07/104017)\u3068\u306e\u610f\u898b\u306b\u57fa\u3065\u304d\u3001\u9ad8\u57ce\u308c\u306b\u3055\u3093\u3092\u5229\u7528\u3057\u307e\u3059\u3002  \n\n\n## \u6c34\u5897\u3057\u624b\u6cd5\nOpenCV 3.0 Python\u3067\u5b9f\u88c5\u3057\u307e\u3059\u3002  \n\u5b9f\u969b\u306b\u6c34\u5897\u3057\u306b\u4f7f\u3048\u308b\u30bd\u30fc\u30b9\u3092\u3053\u3061\u3089\u306b\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n[Github](https://github.com/bohemian916/deeplearning_tool/blob/master/increase_picture.py)\n\n\n### \u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u8abf\u6574\n\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u3092\u5f37\u8abf\u3001\u4f4e\u6e1b\u3055\u305b\u305f\u753b\u50cf\u3092\u4f5c\u308a\u307e\u3059\u3002  \n\u5f37\u8abf\u3059\u308b\u306b\u306f\u3001\b\u4e00\u5b9a\u4ee5\u4e0b\u306e\u4f4e\u8f1d\u5ea6\u306e\u753b\u7d20\u30920,\u3000\u4e00\u5b9a\u4ee5\u4e0a\u306e\u9ad8\u8f1d\u5ea6\u306e\u753b\u7d20\u3092255\u306b\u3057\u3001\u4e2d\u9593\u306e\u8f1d\u5ea6\u306e\u3082\u306e\u3092\u8abf\u6574\u3057\u307e\u3059\u3002\n\u9006\u306b\u4f4e\u6e1b\u3059\u308b\u306b\u306f\u3001\u8f1d\u5ea6\u306e\u5e45\u3092\u5c0f\u3055\u304f\u3059\u308b\u3088\u3046\u306b\u8abf\u6574\u3057\u307e\u3059\u3002\u3053\u3061\u3089\u306e\u56f3\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n![http://livedoor.blogimg.jp/progr-python2/imgs/f/8/f867a2e8.png](https://qiita-image-store.s3.amazonaws.com/0/50474/5fbabaa6-f134-b630-fe7b-7794f3fe0307.png)\n\n  \n```py\n# \u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30c6\u30fc\u30d6\u30eb\u306e\u751f\u6210\nmin_table = 50\nmax_table = 205\ndiff_table = max_table - min_table\n\nLUT_HC = np.arange(256, dtype = 'uint8' )\nLUT_LC = np.arange(256, dtype = 'uint8' )\n\n# \u30cf\u30a4\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8LUT\u4f5c\u6210\nfor i in range(0, min_table):\n    LUT_HC[i] = 0\nfor i in range(min_table, max_table):\n    LUT_HC[i] = 255 * (i - min_table) / diff_table\nfor i in range(max_table, 255):\n    LUT_HC[i] = 255\n\n# \u30ed\u30fc\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8LUT\u4f5c\u6210\nfor i in range(256):\n    LUT_LC[i] = min_table + i * (diff_table) / 255\n\n# \u5909\u63db\nsrc = cv2.imread(\"reni.jpg\", 1)\nhigh_cont_img = cv2.LUT(src, LUT_HC)\nlow_cont_img = cv2.LUT(src, LUT_LC)\n```\n\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u3092\u5f37\u8abf\u3057\u305f\u3082\u306e\n![reni_takagi_2012_04_15_1.jpg](https://qiita-image-store.s3.amazonaws.com/0/50474/9ef8d5eb-ee91-0eff-3c3c-ec9a7d9af9e4.jpeg)\n\n\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u3092\u4f4e\u6e1b\u3057\u305f\u3082\u306e\n![reni_takagi_2012_04_15_2.jpg](https://qiita-image-store.s3.amazonaws.com/0/50474/7cdca8f9-1eb2-f456-9d09-7747e17d9fb5.jpeg)\n\n\n\u53c2\u8003\n[\u30c8\u30fc\u30f3\u30ab\u30fc\u30d6\u3067\u753b\u50cf\u306e\u6fc3\u5ea6\u5909\u63db](http://opencv.blog.jp/algorithm/tone_curve)\n\n### \u30ac\u30f3\u30de\u5909\u63db\n\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u306e\u8868\u793a\u306a\u3069\u306e\u969b\u306b\u4f7f\u308f\u308c\u308b\u5909\u63db\u3067\u3001\u8f1d\u5ea6\u5024\u3092\u03b3\u306e\u5024\u306b\u3088\u3063\u3066\u5909\u5316\u3055\u305b\u307e\u3059\u3002\n![http://livedoor.blogimg.jp/progr-python2/imgs/0/4/043dfda9.png](https://qiita-image-store.s3.amazonaws.com/0/50474/1ac70b0f-7b74-05dd-64d8-f74d8cf17a65.png)\n\n\u30b3\u30f3\u30c8\u30e9\u30b9\u30c8\u8abf\u6574\u306e\u30bd\u30fc\u30b9\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30c6\u30fc\u30d6\u30eb\u3092\u3001\u3053\u3061\u3089\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n```py\n# \u30ac\u30f3\u30de\u5909\u63db\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30c6\u30fc\u30d6\u30eb\ngamma1 = 0.75\ngamma2 = 1.5\nfor i in range(256):\n    LUT_G1[i] = 255 * pow(float(i) / 255, 1.0 / gamma1)\n    LUT_G2[i] = 255 * pow(float(i) / 255, 1.0 / gamma2)\n```\n\u03b3=1.5\u306e\u3068\u304d\n![reni_takagi_2012_04_15_3.jpg](https://qiita-image-store.s3.amazonaws.com/0/50474/aa56dec8-1893-7f58-d417-ed858b1bb895.jpeg)\n\n\n\u03b3=0.75\u306e\u3068\u304d\n![reni_takagi_2012_04_15_2.jpg](https://qiita-image-store.s3.amazonaws.com/0/50474/1c3c7562-9ee0-54b7-6086-aaf2c5dfdde7.jpeg)\n\n\u53c2\u8003  \n[\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30c6\u30fc\u30d6\u30eb\uff08\u30ac\u30f3\u30de\u88dc\u6b63\u306e\u4f8b\uff09] (http://imagingsolution.blog107.fc2.com/blog-entry-67.html)  \n\n### \u5e73\u6ed1\u5316\n\u753b\u50cf\u3092\u6ed1\u3089\u304b\u306b\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u5e73\u5747\u5316\u30d5\u30a3\u30eb\u30bf\u3092\u304b\u3051\u3066\u3044\u307e\u3059\u3002\n  \n```py\naverage_square = (10,10)\nsrc = cv2.imread(\"reni.jpg\", 1)\nblur_img = cv2.blur(src, average_square)\n```\n\n10\u00d710\u5e73\u5747\u5316\u30d5\u30a3\u30eb\u30bf  \n![reni_takagi_2012_04_15_5.jpg](https://qiita-image-store.s3.amazonaws.com/0/50474/461a821f-5bfc-3ae6-567e-08abf89e53f5.jpeg)\n  \n\u53c2\u8003\n[\u5e73\u6ed1\u5316\uff08\u79fb\u52d5\u5e73\u5747\u3001\u30ac\u30a6\u30b7\u30a2\u30f3\uff09\u30d5\u30a3\u30eb\u30bf](http://imagingsolution.blog107.fc2.com/blog-entry-88.html)\n\n### \u30ac\u30a6\u30b9\u5206\u5e03\u306b\u57fa\u3065\u304f\u30ce\u30a4\u30ba\n\u5404\u753b\u7d20\u306b\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u57fa\u3065\u304f\u751f\u6210\u5024\u3092\u8db3\u3057\u3066\u3001\u30ce\u30a4\u30ba\u3092\u4ed8\u52a0\u3057\u307e\u3059\u3002\n\n\u03c3=15\u306e\u30ac\u30a6\u30b7\u30a2\u30f3\u30ce\u30a4\u30ba\n![reni_takagi_2012_04_15_7.jpg](https://qiita-image-store.s3.amazonaws.com/0/50474/37b71800-c31e-b700-845d-8d70aa096829.jpeg)\n  \n  \n```py\nsrc = cv2.imread(\"reni.jpg\", 1)\nrow,col,ch= src.shape\nmean = 0\nsigma = 15\ngauss = np.random.normal(mean,sigma,(row,col,ch))\ngauss = gauss.reshape(row,col,ch)\ngauss_img = src + gauss\n```\n\n\u53c2\u8003\n[\u753b\u50cf\u60c5\u5831\uff08\u8f1d\u5ea6\u30c7\u30fc\u30bf\uff09\u306e\u5909\u63db](http://www.comp.tmu.ac.jp/morbier/imagproc/imageconvert.html)\n\n### Salt&Pepper\u30ce\u30a4\u30ba\n\u5869\u3068\u80e1\u6912\u3092\u304b\u3051\u305f\u3088\u3046\u306a\u30ce\u30a4\u30ba\u306a\u306e\u3067\u3001\u3053\u3046\u547c\u3070\u308c\u307e\u3059\u3002\u30a4\u30f3\u30d1\u30eb\u30b9\u30ce\u30a4\u30ba\u3068\u3082\u8a00\u3046\u305d\u3046\u3067\u3059\u3002\n\n```py\nsrc = cv2.imread(\"reni.jpg\", 1)\nrow,col,ch = src.shape\ns_vs_p = 0.5\namount = 0.004\nsp_img = src.copy()\n\n# \u5869\u30e2\u30fc\u30c9\nnum_salt = np.ceil(amount * src.size * s_vs_p)\ncoords = [np.random.randint(0, i-1 , int(num_salt)) for i in src.shape]\nsp_img[coords[:-1]] = (255,255,255)\n\n# \u80e1\u6912\u30e2\u30fc\u30c9\nnum_pepper = np.ceil(amount* src.size * (1. - s_vs_p))\ncoords = [np.random.randint(0, i-1 , int(num_pepper)) for i in src.shape]\nsp_img[coords[:-1]] = (0,0,0)\n\n```\n0.4%\u306e\u753b\u7d20\u306b\u30ce\u30a4\u30ba\n![reni_takagi_2012_04_15_8.jpg](https://qiita-image-store.s3.amazonaws.com/0/50474/cb4288e8-8dd7-bcce-1159-9606ac6178af.jpeg)\n\n\n### \u53cd\u8ee2\n\u5de6\u53f3\u306e\u53cd\u8ee2\u3001\u4e0a\u4e0b\u306e\u53cd\u8ee2\u3092\u884c\u3044\u307e\u3059\u3002\n\n```py\nsrc = cv2.imread(\"reni.jpg\", 1)\nhflip_img = cv2.flip(src, 1)\nvflip_img = cv2.flip(src, 0)\n```\n\n### \u62e1\u5927\u7e2e\u5c0f\n\u753b\u50cf\u306e\u4e00\u90e8\u3092\u62e1\u5927\u3001\u7e2e\u5c0f\u3057\u307e\u3059\u3002\n\n```py\nsrc = cv2.imread(\"reni.jpg\", 1)\nhight = src.shape[0]\nwidth = src.shape[1]\nhalf_img = cv2.resize(src,(hight/2,width/2))\n```\n"}