{"context": " More than 1 year has passed since last update.\nhtdocs/api/index.php\n<?php\nrequire_once 'App.php';\n/**\n * Web API Endpoint\n * @see http://code.google.com/p/bear-project/\n * @see http://openid-foundation-japan.github.com/draft-ietf-oauth-v2-bearer-draft11.ja.html\n */\nclass Page_Api_Index extends App_Page{\n\n    /** @var array API \u304c\u8a31\u53ef\u3057\u3001\u305d\u308c\u305e\u308c\u5bfe\u5fdc\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    protected $_methods = array('post' => 'create', 'put' => 'update', 'get' => 'read', 'delete' => 'delete');\n\n    /** @var array API \u304c\u8a31\u53ef\u3059\u308b URI */\n    protected $_enableURIs = array('me' => array('uri' => 'Me'));\n\n    /** @var array \u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u5834\u5408\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u306b\u4ed8\u4e0e\u3055\u308c\u308b Authorization \u30d8\u30c3\u30c0\u306e\u5185\u5bb9 */\n    protected $_authenticateHeaders = array(\n        'realm' => 'WebAPI OAuth 2.0 Bearer',\n        'scope' => null,\n        'error' => null,\n        'error_description' => null,\n        'error_uri' => null);\n\n    protected $_statusCode = 200;\n\n    public function onInject(){\n        parent::onInject();\n        $args = array('api' => null, 'method' => strtolower(getenv('REQUEST_METHOD')));\n        if(!isset($_GET['api'])){\n            if(isset($_SERVER['API'])){\n                $_GET['api'] = preg_replace('!index.php$!', null, $_SERVER['API']);\n                $_GET['api'] = substr($_GET['api'], 5, strlen($_GET['api']));\n            }\n        }else{\n            $args['api'] = $_GET['api'];\n        }\n        $args['authorization'] = getenv('REDIRECT_HTTP_AUTHORIZATION');\n        if(empty($args['authorization'])){\n            $args['authorization'] = getenv('HTTP_AUTHORIZATION');\n        }\n        if(empty($args['authorization']) && isset($_REQUEST['access_token'])){\n            $args['authorization'] = sprintf('Bearer %s', $_REQUEST['access_token']);\n        }\n\n        if($args['method'] === 'post'){\n            foreach($_POST as $name => $value){\n                $args['values'][$name] = trim($value);\n            }\n        }elseif($args['method'] === 'put' || $args['method'] === 'delete'){\n            $putdata = file_get_contents('php://input');\n            parse_str($putdata, $putdata);\n            foreach($putdata as $name => $value){\n                $args['values'][$name] = trim($value);\n            }\n        }else{\n            unset($_GET['api']);\n            $args['values'] = $_GET;\n        }\n        $this->injectArgs($args);\n    }\n\n    public function onInit(array $args){\n        foreach($this->_enableURIs as $regexp => $arg){\n            if(preg_match(sprintf('!^%s$!', $regexp), $args['api'], $matches)){\n                $arg = array_merge(array('uri' => null,\n                    'options' => array(), 'query' => array()), $arg);\n                if(empty($arg['values'])){\n                    $arg['values'] = $args['values'];\n                }else{\n                    foreach($args['values'] as $name => $value){\n                        $arg['values'][$name] = trim($value);\n                    }\n                }\n                unset($matches[0]);\n                foreach($matches as $i => $value){\n                    $value = trim($value);\n                    if(!empty($value)){\n                        $arg['values'][$arg['query'][$i-1]] = trim($value);\n                    }\n                }\n                unset($arg['query']);\n\n                if(preg_match('!^Bearer ([0-9a-f]{32})$!', $args['authorization'], $token)){\n                    $auth = Zend_Auth::getInstance();\n                    $auth->setStorage(new App_Auth_Storage(__CLASS__));\n                    $authAdapter = BEAR::dependency('App_Auth_Adapter_OAuth', array('token' => $token[1]));\n                    $result = $this->_auth->authenticate($authAdapter);\n                    if($result->isValid()){\n                        if(method_exists($this->_resource, $this->_methods[$args['method']])){\n                            $arg['uri'] = 'Api/'.$arg['uri'];\n                            $ro = call_user_func(array(&$this->_resource, $this->_methods[$args['method']]), $arg);\n                            if($ro !== false){\n                                $ro = $ro->request();\n                                $this->set('headers', $ro->getHeaders());\n                                $this->set('body', $ro->getBody());\n                            }else{\n                                throw new App_Exception_OAuth_InsufficientScope('This request is insufficient scope', $this->_authenticateHeaders);\n                            }\n                        }\n                    }else{\n                        throw new App_Exception_OAuth_InvalidToken('The access token invalid', $this->_authenticateHeaders);\n                    }\n                }else{\n                    $this->_statusCode = 401;\n                }\n            }\n        }\n        if(empty($this->_statusCode)){\n            $this->end(404, 'Not found');\n        }\n    }\n\n    public function onOutput(){\n        $this->output('oauth', array(\n            'statusCode' => $this->_statusCode,\n            'authenticateHeaders' => $this->_authenticateHeaders\n        ));\n    }\n}\nApp_Main::run('Page_Api_Index');\n\n\n\nApp/Auth/Storage.php\n<?php\nclass App_Auth_Storage extends Zend_Auth_Storage_Session{\n\n    private $_storage = array();\n\n    public function isEmpty(){\n        return !isset($this->_storage[$this->_namespace]) || is_null($this->_storage[$this->_namespace]);\n    }\n\n    public function read(){\n        return $this->_storage[$this->_namespace];\n    }\n\n    public function write($contents){\n        $this->_storage[$this->_namespace] = $contents;\n    }\n\n    public function clear(){\n        $this->_storage[$this->_namespace] = null;\n    }\n\n    public function __construct($namespace = self::NAMESPACE_DEFAULT, $member = self::MEMBER_DEFAULT){\n        $this->_namespace = $namespace;\n        $this->_member    = $member;\n    }\n}\n\n\n\nApp/Auth/Adapter/OAuth.php\n<?php\nclass App_Auth_Adapter_OAuth extends BEAR_Factory implements Zend_Auth_Adapter_Interface{\n    public function factory(){\n        return $this;\n    }\n\n    public function authenticate(){\n        $user = $messages = $code = null;\n        if(!empty($this->_config['token'])){\n            $user = $this->_resource->read(array('uri' => 'Db/User/Authentication',\n                'values' => array('token' => $this->_config['token'])))->getBody();\n            if(!empty($user)){\n                $messages = array(__('Logined.'));\n                $code = Zend_Auth_Result::SUCCESS;\n                $user['remoteAddr'] = getenv('REMOTE_ADDR');\n                $user['userAgent'] = getenv('HTTP_USER_AGENT');\n            }else{\n                $code = Zend_Auth_Result::FAILURE_IDENTITY_NOT_FOUND;\n            }\n        }else{\n            $code = Zend_Auth_Result::FAILURE_CREDENTIAL_INVALID;\n        }\n        return new Zend_Auth_Result($code, $user, $messages);\n    }\n}\n\n\n\nApp/Exception/OAuth/InsufficientScope.php\n<?php\nclass App_Exception_OAuth_InsufficientScope extends BEAR_Exception{\n    protected $_defaultMessage = 'This request is insufficient scope.';\n    protected $_default = array('code' => 'insufficient_scope');\n    public function __construct($msg = null, array $config = array()){\n        if(empty($msg)){\n            $msg = $this->_defaultMessage;\n        }\n        $config = array_merge($this->_default, (array) $config);\n\n        header(sprintf('WWW-Authenticate: Bearer realm=\"%s\", error=\"%s\", error_description=\"%s\"',\n                $config['realm'], $config['code'], $msg));\n        header('HTTP/1.1 403 Forbidden');\n    }\n}\n\n\n\nApp/Exception/OAuth/InvalidRequest.php\n<?php\nclass App_Exception_OAuth_InvalidRequest extends BEAR_Exception{\n    protected $_defaultMessage = 'URI is incorrect.';\n    protected $_default = array('code' => 'invalid_request');\n    public function __construct($msg = null, array $config = array()){\n        if(empty($msg)){\n            $msg = $this->_defaultMessage;\n        }\n        $config = array_merge($this->_default, (array) $config);\n\n        header(sprintf('WWW-Authenticate: Bearer realm=\"%s\", error=\"%s\", error_description=\"%s\"',\n                $config['realm'], $config['code'], $msg));\n        header('HTTP/1.1 400 Bad Request');\n    }\n}\n\n\n\nApp/Resource/output/oauth.php\n<?php\n/** OAuth \u30d8\u30c3\u30c0\u30fc & JSON \u51fa\u529b\n * @param array $values \u5024\n * @param array $options \u30aa\u30d7\u30b7\u30e7\u30f3\n * @return BEAR_Ro\n */\nfunction outputOAuth($values, array $options){\n    $app = BEAR::get('app');\n    $ro = BEAR::factory('App_Ro_Http');\n    $ro->setCode($options['statusCode']);\n    $headers = array();\n    if(in_array($options['statusCode'], array(401, 403))){\n        $rows = array();\n        foreach($options['authenticateHeaders'] as $name => $value){\n            if(!empty($value)){\n                $rows[] = sprintf('%s=\"%s\"', $name, $value);\n            }\n        }\n        $headers[] = sprintf('WWW-Authenticate: Bearer %s', implode(\", \", $rows));\n    }\n\n    $body = empty($values)? null: json_encode($values);\n    $ro->setBody($body);\n    $ro->setHeaders($headers);\n    return $ro;\n}\n\n\n```htdocs/api/index.php\n<?php\nrequire_once 'App.php';\n/**\n * Web API Endpoint\n * @see http://code.google.com/p/bear-project/\n * @see http://openid-foundation-japan.github.com/draft-ietf-oauth-v2-bearer-draft11.ja.html\n */\nclass Page_Api_Index extends App_Page{\n\n    /** @var array API \u304c\u8a31\u53ef\u3057\u3001\u305d\u308c\u305e\u308c\u5bfe\u5fdc\u3059\u308b\u30e1\u30bd\u30c3\u30c9 */\n    protected $_methods = array('post' => 'create', 'put' => 'update', 'get' => 'read', 'delete' => 'delete');\n\n    /** @var array API \u304c\u8a31\u53ef\u3059\u308b URI */\n    protected $_enableURIs = array('me' => array('uri' => 'Me'));\n\n    /** @var array \u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u5834\u5408\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u306b\u4ed8\u4e0e\u3055\u308c\u308b Authorization \u30d8\u30c3\u30c0\u306e\u5185\u5bb9 */\n    protected $_authenticateHeaders = array(\n    \t'realm' => 'WebAPI OAuth 2.0 Bearer',\n        'scope' => null,\n        'error' => null,\n        'error_description' => null,\n        'error_uri' => null);\n\n    protected $_statusCode = 200;\n\n    public function onInject(){\n        parent::onInject();\n        $args = array('api' => null, 'method' => strtolower(getenv('REQUEST_METHOD')));\n        if(!isset($_GET['api'])){\n            if(isset($_SERVER['API'])){\n                $_GET['api'] = preg_replace('!index.php$!', null, $_SERVER['API']);\n                $_GET['api'] = substr($_GET['api'], 5, strlen($_GET['api']));\n            }\n        }else{\n            $args['api'] = $_GET['api'];\n        }\n        $args['authorization'] = getenv('REDIRECT_HTTP_AUTHORIZATION');\n        if(empty($args['authorization'])){\n            $args['authorization'] = getenv('HTTP_AUTHORIZATION');\n        }\n        if(empty($args['authorization']) && isset($_REQUEST['access_token'])){\n            $args['authorization'] = sprintf('Bearer %s', $_REQUEST['access_token']);\n        }\n\n        if($args['method'] === 'post'){\n            foreach($_POST as $name => $value){\n                $args['values'][$name] = trim($value);\n            }\n        }elseif($args['method'] === 'put' || $args['method'] === 'delete'){\n            $putdata = file_get_contents('php://input');\n            parse_str($putdata, $putdata);\n            foreach($putdata as $name => $value){\n                $args['values'][$name] = trim($value);\n            }\n        }else{\n            unset($_GET['api']);\n            $args['values'] = $_GET;\n        }\n        $this->injectArgs($args);\n    }\n\n    public function onInit(array $args){\n        foreach($this->_enableURIs as $regexp => $arg){\n            if(preg_match(sprintf('!^%s$!', $regexp), $args['api'], $matches)){\n                $arg = array_merge(array('uri' => null,\n                \t'options' => array(), 'query' => array()), $arg);\n                if(empty($arg['values'])){\n                    $arg['values'] = $args['values'];\n                }else{\n                    foreach($args['values'] as $name => $value){\n                        $arg['values'][$name] = trim($value);\n                    }\n                }\n                unset($matches[0]);\n                foreach($matches as $i => $value){\n                    $value = trim($value);\n                    if(!empty($value)){\n                        $arg['values'][$arg['query'][$i-1]] = trim($value);\n                    }\n                }\n                unset($arg['query']);\n\n                if(preg_match('!^Bearer ([0-9a-f]{32})$!', $args['authorization'], $token)){\n                    $auth = Zend_Auth::getInstance();\n                    $auth->setStorage(new App_Auth_Storage(__CLASS__));\n                    $authAdapter = BEAR::dependency('App_Auth_Adapter_OAuth', array('token' => $token[1]));\n                    $result = $this->_auth->authenticate($authAdapter);\n                    if($result->isValid()){\n                        if(method_exists($this->_resource, $this->_methods[$args['method']])){\n                            $arg['uri'] = 'Api/'.$arg['uri'];\n                            $ro = call_user_func(array(&$this->_resource, $this->_methods[$args['method']]), $arg);\n                            if($ro !== false){\n                                $ro = $ro->request();\n                                $this->set('headers', $ro->getHeaders());\n                                $this->set('body', $ro->getBody());\n                            }else{\n                                throw new App_Exception_OAuth_InsufficientScope('This request is insufficient scope', $this->_authenticateHeaders);\n                            }\n                        }\n                    }else{\n                        throw new App_Exception_OAuth_InvalidToken('The access token invalid', $this->_authenticateHeaders);\n                    }\n                }else{\n                    $this->_statusCode = 401;\n                }\n            }\n        }\n        if(empty($this->_statusCode)){\n            $this->end(404, 'Not found');\n        }\n    }\n\n    public function onOutput(){\n        $this->output('oauth', array(\n            'statusCode' => $this->_statusCode,\n            'authenticateHeaders' => $this->_authenticateHeaders\n        ));\n    }\n}\nApp_Main::run('Page_Api_Index');\n```\n\n```App/Auth/Storage.php\n<?php\nclass App_Auth_Storage extends Zend_Auth_Storage_Session{\n\n    private $_storage = array();\n\n    public function isEmpty(){\n        return !isset($this->_storage[$this->_namespace]) || is_null($this->_storage[$this->_namespace]);\n    }\n\n    public function read(){\n        return $this->_storage[$this->_namespace];\n    }\n\n    public function write($contents){\n        $this->_storage[$this->_namespace] = $contents;\n    }\n\n    public function clear(){\n        $this->_storage[$this->_namespace] = null;\n    }\n\n    public function __construct($namespace = self::NAMESPACE_DEFAULT, $member = self::MEMBER_DEFAULT){\n        $this->_namespace = $namespace;\n        $this->_member    = $member;\n    }\n}\n```\n\n```App/Auth/Adapter/OAuth.php\n<?php\nclass App_Auth_Adapter_OAuth extends BEAR_Factory implements Zend_Auth_Adapter_Interface{\n    public function factory(){\n        return $this;\n    }\n\n    public function authenticate(){\n        $user = $messages = $code = null;\n        if(!empty($this->_config['token'])){\n            $user = $this->_resource->read(array('uri' => 'Db/User/Authentication',\n                'values' => array('token' => $this->_config['token'])))->getBody();\n            if(!empty($user)){\n                $messages = array(__('Logined.'));\n                $code = Zend_Auth_Result::SUCCESS;\n                $user['remoteAddr'] = getenv('REMOTE_ADDR');\n                $user['userAgent'] = getenv('HTTP_USER_AGENT');\n            }else{\n                $code = Zend_Auth_Result::FAILURE_IDENTITY_NOT_FOUND;\n            }\n        }else{\n            $code = Zend_Auth_Result::FAILURE_CREDENTIAL_INVALID;\n        }\n        return new Zend_Auth_Result($code, $user, $messages);\n    }\n}\n```\n\n```App/Exception/OAuth/InsufficientScope.php\n<?php\nclass App_Exception_OAuth_InsufficientScope extends BEAR_Exception{\n    protected $_defaultMessage = 'This request is insufficient scope.';\n    protected $_default = array('code' => 'insufficient_scope');\n    public function __construct($msg = null, array $config = array()){\n        if(empty($msg)){\n            $msg = $this->_defaultMessage;\n        }\n        $config = array_merge($this->_default, (array) $config);\n\n        header(sprintf('WWW-Authenticate: Bearer realm=\"%s\", error=\"%s\", error_description=\"%s\"',\n                $config['realm'], $config['code'], $msg));\n        header('HTTP/1.1 403 Forbidden');\n    }\n}\n```\n\n```App/Exception/OAuth/InvalidRequest.php\n<?php\nclass App_Exception_OAuth_InvalidRequest extends BEAR_Exception{\n    protected $_defaultMessage = 'URI is incorrect.';\n    protected $_default = array('code' => 'invalid_request');\n    public function __construct($msg = null, array $config = array()){\n        if(empty($msg)){\n            $msg = $this->_defaultMessage;\n        }\n        $config = array_merge($this->_default, (array) $config);\n\n        header(sprintf('WWW-Authenticate: Bearer realm=\"%s\", error=\"%s\", error_description=\"%s\"',\n                $config['realm'], $config['code'], $msg));\n        header('HTTP/1.1 400 Bad Request');\n    }\n}\n```\n\n```App/Resource/output/oauth.php\n<?php\n/** OAuth \u30d8\u30c3\u30c0\u30fc & JSON \u51fa\u529b\n * @param array $values \u5024\n * @param array $options \u30aa\u30d7\u30b7\u30e7\u30f3\n * @return BEAR_Ro\n */\nfunction outputOAuth($values, array $options){\n    $app = BEAR::get('app');\n    $ro = BEAR::factory('App_Ro_Http');\n    $ro->setCode($options['statusCode']);\n    $headers = array();\n    if(in_array($options['statusCode'], array(401, 403))){\n        $rows = array();\n        foreach($options['authenticateHeaders'] as $name => $value){\n            if(!empty($value)){\n                $rows[] = sprintf('%s=\"%s\"', $name, $value);\n            }\n        }\n        $headers[] = sprintf('WWW-Authenticate: Bearer %s', implode(\", \", $rows));\n    }\n\n    $body = empty($values)? null: json_encode($values);\n    $ro->setBody($body);\n    $ro->setHeaders($headers);\n    return $ro;\n}", "tags": ["PHP", "bear", "OAuth", "api"]}