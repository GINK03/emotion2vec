{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u4eca\u66f4 IplImage\u304b\u3088\u3001\u3068\u3044\u3046\u65b9\u3001\u30b9\u30df\u30de\u30bb\u30f3\u3002\n\u3053\u306e\u9805\u3067\u63d0\u793a\u3057\u305f\u3044\u306e\u306f\u3001OpenCV\u3067\u306e\u30a4\u30e1\u30fc\u30b8\u306e\u6271\u3044\u3092 Objective-C\u3067\u30e9\u30c3\u30d7\u3059\u308b\u3068\u4fbf\u5229\u3060\u3088\u3001\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3059\u3002cv::Mat\u3067\u3082\u4e00\u5411\u306b\u69cb\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u305d\u306e\u8fba\u308a\u306f\u4fbf\u5229\u306a\u98a8\u306b\u8aad\u307f\u66ff\u3048\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001OpenCV 3.0\u7cfb\u7d71\u3067\u306f\u3044\u308f\u3086\u308b\u3001IplImage\u7684\u306a C\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u304c\u4eca\u5f8c\u30e1\u30f3\u30c6\u3055\u308c\u306a\u3044\u3053\u3068\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u305d\u3046\u3067\u3059\u3002cv::Mat\u3092\u4f7f\u3046\u3088\u3046\u306b\u5fc3\u304c\u3051\u307e\u3057\u3087\u3046\uff57\n\n\u4fbf\u5229\u306a\u30dd\u30a4\u30f3\u30c8\nMac \u3067 OpenCV \u95a2\u9023\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u884c\u3046\u306b\u3042\u305f\u3063\u3066\u30011\u3064\u306e\u65b9\u6cd5\u3068\u3057\u3066\u306f OpenCV\u306e\u4e16\u754c\u306b\u30c9\u30c3\u30d7\u30ea\u6d78\u304b\u3063\u3066\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3082\u753b\u50cf\u8868\u793a\u3082\u3001\u4f55\u304b\u3089\u4f55\u307e\u3067\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u4e16\u754c\u3067\u6e08\u307e\u3059\u3001\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3001\u52d5\u4f5c\u74b0\u5883\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 Mac\u306b\u7d5e\u3063\u305f\u5834\u5408\u3001\u3084\u306f\u308a Cocoa\u304c\u4f7f\u3044\u305f\u304f\u306a\u308b\u3002\u3055\u3089\u306b\u8a00\u3048\u3070\u3001C++ boost\u306e shared_ptr\u3068\u304b\u3082\u4f7f\u308f\u305a\u3001Objective-C\u306e ARC\u3067\u3044\u3044\u3058\u3083\u306a\u3044\u3001\u3068\u3044\u3046\u6c17\u5206\u306b\u3082\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n\u3055\u3089\u306b\u3001Xcode\u306b\u306f Debug Quick Look \u3068\u3044\u3046\u5f37\u529b\u306a\u6a5f\u80fd\u304c\u5099\u308f\u3063\u3066\u3044\u3066\u3001Objective-C\u3067 Wrap\u3059\u308c\u3070\u305d\u306e\u6a5f\u80fd\u3082\u6d3b\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30c7\u30d0\u30c3\u30ac\u4e0a\u304b\u3089\u4f55\u6642\u3067\u3082cv::imshow()\u3092\u5b9f\u884c\u3067\u304d\u308b\u3068\u30a4\u30e1\u30fc\u30b8\u3059\u308b\u3068\u826f\u3044\u304b\u3082\u3002\n\nSwift\u306e\u5b58\u5728\n\u958b\u767a\u8a00\u8a9e\u3068\u3057\u3066 Swift\u3082\u51fa\u3066\u304d\u307e\u3057\u305f\u306d\u3002\n\u539f\u5247\u3001\u30dd\u30a4\u30f3\u30bf\u30a2\u30af\u30bb\u30b9\u306a\u3069\u3092\u8a31\u3055\u306a\u3044 Swift\u3067\u3059\u304c\u3001OpenCV\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\u5426\u304c\u5fdc\u3067\u3082 Objective-C\u3067\u306e\u30e9\u30c3\u30d7\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n\u30e1\u30a4\u30f3\u90e8\u5206\u3084 UI\u7cfb\u7d71\u306f\u3042\u304f\u307e\u3067\u3082 Swift\u3067\u7d44\u307f\u3064\u3064\u3001\u5185\u90e8\u306e\u30a4\u30e1\u30fc\u30b8\u51e6\u7406\u90e8\u5206\u306a\u3069\u3092 Objective-C\u3067\u30e9\u30c3\u30d7\u3055\u308c\u305f OpenCV\u306a\u3069\u5229\u7528\u3059\u308c\u3070\u3001\u4f5c\u308a\u3082\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u3082\u306e\u306b\u306a\u308b\u306e\u304b\u306a\u3068\u601d\u308f\u308c\u307e\u3059\u306d\u3002\n\n\u3067\u306f\u3001\u30e9\u30c3\u30d7\u3057\u3066\u307f\u308b\n\u307e\u305a\u306f\u5ba3\u8a00\u3002\n\nOImage.h\n@interface OImage : NSObject\n@property (nonatomic, assign, readonly) IplImage *iplImage;\n- (id)initWithIplImage:(IplImage *)iplImage;\n- (id)initWithCvSize:(CvSize)size depth:(int)depth channels:(int)channels;\n- (id)initWithBytes:(void *)bytes size:(CvSize)size bytesPerRow:(int)bytesPerRow channels:(int)channels;\n- (NSImage *)NSImage;\n\n\n\u305d\u3057\u3066\u5b9f\u88c5\u3067\u3059\u3002(NULL\u30c1\u30a7\u30c3\u30af\u7b49\u306f\u3056\u3063\u304f\u308a\u7701\u7565\u3057\u3066\u304a\u308a\u307e\u3059...)\n-(CGImageRef)createCGImage\u30e1\u30bd\u30c3\u30c9\u3068\u3001-(id)debugQuickLookObject\u30e1\u30bd\u30c3\u30c9\u306e\u7d44\u5408\u305b\u304c\u3001Xcode\u306e Debug Quick Look \u6a5f\u80fd\u306b\u8f09\u308b\u90e8\u5206\u306b\u306a\u308a\u307e\u3059\u3002\n\nOImage.m\n@implementation OImage\n- (id)initWithIplImage:(IplImage *)iplImage {\n    if ((self = [super init]) == nil)\n        return nil;\n    _iplImage = cvCloneImage(iplImage);\n    return self;\n}\n\n- (id)initWithCvSize:(CvSize)size depth:(int)depth channels:(int)channels {\n    if ((self = [super init]) == nil)\n        return nil;\n    _iplImage = cvCreateImage(size, depth, channels);\n    return self;\n}\n\n- (id)initWithBytes:(void *)bytes size:(CvSize)size bytesPerRow:(int)bytesPerRow channels:(int)channels {\n    if ((self = [super init]) == nil)\n        return nil;\n    _iplImage = cvCreateImage(size, depth, channels);\n    memcpy(_iplImage->imageData, bytes, bytesPerRow * size.height);\n    return self;\n}\n\n- (CGImageRef)createCGImage {\n    CGBitmapInfo bitmapInfo = (CGBitmapInfo)kCGImageAlphaNone;\n    IplImage *iplImage = self.iplImage;\n    int componentBytes = 1;\n    NSColorSpace *cs = nil;\n    if (iplImage->nChannels == 1) {\n        colorspace = [NSColorSpace genericGrayColorSpace];\n        if (iplImage->depth == IPL_DEPTH_16U) {\n            bitmapInfo |= kCGBitmapByteOrder16Host;\n            componentBytes = sizeof(short);\n        } else if (iplImage->depth == IPL_DEPTH_32F) {\n            bitmapInfo |= kCGBitmapByteOrder32Host | kCGBitmapFloatComponents;\n            componentBytes = sizeof(float);\n        } else if (iplImage->depth == IPL_DEPTH_32S) {\n            bitmapInfo |= kCGBitmapByteOrder32Host;\n            componentBytes = sizeof(int);\n        }\n    } else {\n        colorspace = [NSColorSpace genericRGBColorSpace];\n        bitmapInfo = kCGBitmapByteOrder32Big | kCGImageAlphaPremultipleLast;\n        if (iplImage->nChannels == 3) {\n            iplImage = cvCreateImage(cvGetSize(iplImage), IPL_DEPTH_8U, 4);\n            cvCvtColor(self.iplImage, iplImage, CV_RGB2RGBA);\n        }\n    }\n    CGContextRef context = CGBitmapContextCreate(NULL, iplImage->width, iplImage->height, componentBytes * 8, iplImage->widthStep, cs.CGColorSpace, bitmapInfo);\n    void *data = CGBitmapContextGetData(context);\n    memcpy(data, iplImage->imageData, iplImage->imageSize);\n    CGImageRef cgimage = CGBitmapContextCreateImage(context);\n    CGContextRelease(context);\n    if (iplImage != self.iplImage)\n        cvReleaseImage(&iplImage);\n    return cgimage;\n}\n\n- (NSImage *)NSImage {\n    CGImageRef cgimage = [self createCGImage];\n    if (cgimage == NULL)\n        return nil;\n    NSImage *nsimage = [[NSImage alloc] initWithCGImage:cgimage size:NSZeroSize];\n    CGImageRelease(cgimage);\n    return nsimage;\n}\n\n- (id)debugQuickLookObject {\n    return [self NSImage];\n}\n\n- (void)dealloc {\n    if (_iplImage != NULL)\n        cvReleaseImage(&_iplImage);\n}\n\n\n\u3042\u3068\u306f\u3001\u305b\u3063\u304b\u304f\u4f5c\u3063\u305f Wrapper\u30af\u30e9\u30b9\u3067\u3059\u306e\u3067\u3001grayscale\u3068\u304b\u3001HSV\u5909\u63db\u3068\u304b\u3001cvFindContours()\u8fba\u308a\u306e\u547c\u51fa\u3057\u3068\u304b\u3001\u305f\u304f\u3055\u3093\u7d30\u3005\u3068\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u3044\u3051\u3070\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n#\u306f\u3058\u3081\u306b\n\u4eca\u66f4 `IplImage`\u304b\u3088\u3001\u3068\u3044\u3046\u65b9\u3001\u30b9\u30df\u30de\u30bb\u30f3\u3002\n\u3053\u306e\u9805\u3067\u63d0\u793a\u3057\u305f\u3044\u306e\u306f\u3001OpenCV\u3067\u306e\u30a4\u30e1\u30fc\u30b8\u306e\u6271\u3044\u3092 Objective-C\u3067\u30e9\u30c3\u30d7\u3059\u308b\u3068\u4fbf\u5229\u3060\u3088\u3001\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3059\u3002`cv::Mat`\u3067\u3082\u4e00\u5411\u306b\u69cb\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u305d\u306e\u8fba\u308a\u306f\u4fbf\u5229\u306a\u98a8\u306b\u8aad\u307f\u66ff\u3048\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001OpenCV 3.0\u7cfb\u7d71\u3067\u306f\u3044\u308f\u3086\u308b\u3001`IplImage`\u7684\u306a C\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u304c\u4eca\u5f8c\u30e1\u30f3\u30c6\u3055\u308c\u306a\u3044\u3053\u3068\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u305d\u3046\u3067\u3059\u3002`cv::Mat`\u3092\u4f7f\u3046\u3088\u3046\u306b\u5fc3\u304c\u3051\u307e\u3057\u3087\u3046\uff57\n\n#\u4fbf\u5229\u306a\u30dd\u30a4\u30f3\u30c8\nMac \u3067 OpenCV \u95a2\u9023\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u884c\u3046\u306b\u3042\u305f\u3063\u3066\u30011\u3064\u306e\u65b9\u6cd5\u3068\u3057\u3066\u306f OpenCV\u306e\u4e16\u754c\u306b\u30c9\u30c3\u30d7\u30ea\u6d78\u304b\u3063\u3066\u3001\u30a6\u30a3\u30f3\u30c9\u30a6\u3082\u753b\u50cf\u8868\u793a\u3082\u3001\u4f55\u304b\u3089\u4f55\u307e\u3067\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306e\u4e16\u754c\u3067\u6e08\u307e\u3059\u3001\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3001\u52d5\u4f5c\u74b0\u5883\u30bf\u30fc\u30b2\u30c3\u30c8\u3092 Mac\u306b\u7d5e\u3063\u305f\u5834\u5408\u3001\u3084\u306f\u308a Cocoa\u304c\u4f7f\u3044\u305f\u304f\u306a\u308b\u3002\u3055\u3089\u306b\u8a00\u3048\u3070\u3001C++ boost\u306e shared_ptr\u3068\u304b\u3082\u4f7f\u308f\u305a\u3001Objective-C\u306e ARC\u3067\u3044\u3044\u3058\u3083\u306a\u3044\u3001\u3068\u3044\u3046\u6c17\u5206\u306b\u3082\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n\u3055\u3089\u306b\u3001Xcode\u306b\u306f Debug Quick Look \u3068\u3044\u3046\u5f37\u529b\u306a\u6a5f\u80fd\u304c\u5099\u308f\u3063\u3066\u3044\u3066\u3001Objective-C\u3067 Wrap\u3059\u308c\u3070\u305d\u306e\u6a5f\u80fd\u3082\u6d3b\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u30c7\u30d0\u30c3\u30ac\u4e0a\u304b\u3089\u4f55\u6642\u3067\u3082`cv::imshow()`\u3092\u5b9f\u884c\u3067\u304d\u308b\u3068\u30a4\u30e1\u30fc\u30b8\u3059\u308b\u3068\u826f\u3044\u304b\u3082\u3002\n\n#Swift\u306e\u5b58\u5728\n\u958b\u767a\u8a00\u8a9e\u3068\u3057\u3066 Swift\u3082\u51fa\u3066\u304d\u307e\u3057\u305f\u306d\u3002\n\u539f\u5247\u3001\u30dd\u30a4\u30f3\u30bf\u30a2\u30af\u30bb\u30b9\u306a\u3069\u3092\u8a31\u3055\u306a\u3044 Swift\u3067\u3059\u304c\u3001OpenCV\u3092\u4f7f\u304a\u3046\u3068\u3059\u308b\u3068\u5426\u304c\u5fdc\u3067\u3082 Objective-C\u3067\u306e\u30e9\u30c3\u30d7\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002\n\u30e1\u30a4\u30f3\u90e8\u5206\u3084 UI\u7cfb\u7d71\u306f\u3042\u304f\u307e\u3067\u3082 Swift\u3067\u7d44\u307f\u3064\u3064\u3001\u5185\u90e8\u306e\u30a4\u30e1\u30fc\u30b8\u51e6\u7406\u90e8\u5206\u306a\u3069\u3092 Objective-C\u3067\u30e9\u30c3\u30d7\u3055\u308c\u305f OpenCV\u306a\u3069\u5229\u7528\u3059\u308c\u3070\u3001\u4f5c\u308a\u3082\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u3082\u306e\u306b\u306a\u308b\u306e\u304b\u306a\u3068\u601d\u308f\u308c\u307e\u3059\u306d\u3002\n\n#\u3067\u306f\u3001\u30e9\u30c3\u30d7\u3057\u3066\u307f\u308b\n\u307e\u305a\u306f\u5ba3\u8a00\u3002\n\n```objc:OImage.h\n@interface OImage : NSObject\n@property (nonatomic, assign, readonly) IplImage *iplImage;\n- (id)initWithIplImage:(IplImage *)iplImage;\n- (id)initWithCvSize:(CvSize)size depth:(int)depth channels:(int)channels;\n- (id)initWithBytes:(void *)bytes size:(CvSize)size bytesPerRow:(int)bytesPerRow channels:(int)channels;\n- (NSImage *)NSImage;\n```\n\n\u305d\u3057\u3066\u5b9f\u88c5\u3067\u3059\u3002(NULL\u30c1\u30a7\u30c3\u30af\u7b49\u306f\u3056\u3063\u304f\u308a\u7701\u7565\u3057\u3066\u304a\u308a\u307e\u3059...)\n`-(CGImageRef)createCGImage`\u30e1\u30bd\u30c3\u30c9\u3068\u3001`-(id)debugQuickLookObject`\u30e1\u30bd\u30c3\u30c9\u306e\u7d44\u5408\u305b\u304c\u3001Xcode\u306e Debug Quick Look \u6a5f\u80fd\u306b\u8f09\u308b\u90e8\u5206\u306b\u306a\u308a\u307e\u3059\u3002\n\n```objc:OImage.m\n@implementation OImage\n- (id)initWithIplImage:(IplImage *)iplImage {\n    if ((self = [super init]) == nil)\n        return nil;\n    _iplImage = cvCloneImage(iplImage);\n    return self;\n}\n\n- (id)initWithCvSize:(CvSize)size depth:(int)depth channels:(int)channels {\n    if ((self = [super init]) == nil)\n        return nil;\n    _iplImage = cvCreateImage(size, depth, channels);\n    return self;\n}\n\n- (id)initWithBytes:(void *)bytes size:(CvSize)size bytesPerRow:(int)bytesPerRow channels:(int)channels {\n    if ((self = [super init]) == nil)\n        return nil;\n    _iplImage = cvCreateImage(size, depth, channels);\n    memcpy(_iplImage->imageData, bytes, bytesPerRow * size.height);\n    return self;\n}\n\n- (CGImageRef)createCGImage {\n    CGBitmapInfo bitmapInfo = (CGBitmapInfo)kCGImageAlphaNone;\n    IplImage *iplImage = self.iplImage;\n    int componentBytes = 1;\n    NSColorSpace *cs = nil;\n    if (iplImage->nChannels == 1) {\n        colorspace = [NSColorSpace genericGrayColorSpace];\n        if (iplImage->depth == IPL_DEPTH_16U) {\n            bitmapInfo |= kCGBitmapByteOrder16Host;\n            componentBytes = sizeof(short);\n        } else if (iplImage->depth == IPL_DEPTH_32F) {\n            bitmapInfo |= kCGBitmapByteOrder32Host | kCGBitmapFloatComponents;\n            componentBytes = sizeof(float);\n        } else if (iplImage->depth == IPL_DEPTH_32S) {\n            bitmapInfo |= kCGBitmapByteOrder32Host;\n            componentBytes = sizeof(int);\n        }\n    } else {\n        colorspace = [NSColorSpace genericRGBColorSpace];\n        bitmapInfo = kCGBitmapByteOrder32Big | kCGImageAlphaPremultipleLast;\n        if (iplImage->nChannels == 3) {\n            iplImage = cvCreateImage(cvGetSize(iplImage), IPL_DEPTH_8U, 4);\n            cvCvtColor(self.iplImage, iplImage, CV_RGB2RGBA);\n        }\n    }\n    CGContextRef context = CGBitmapContextCreate(NULL, iplImage->width, iplImage->height, componentBytes * 8, iplImage->widthStep, cs.CGColorSpace, bitmapInfo);\n    void *data = CGBitmapContextGetData(context);\n    memcpy(data, iplImage->imageData, iplImage->imageSize);\n    CGImageRef cgimage = CGBitmapContextCreateImage(context);\n    CGContextRelease(context);\n    if (iplImage != self.iplImage)\n        cvReleaseImage(&iplImage);\n    return cgimage;\n}\n\n- (NSImage *)NSImage {\n    CGImageRef cgimage = [self createCGImage];\n    if (cgimage == NULL)\n        return nil;\n    NSImage *nsimage = [[NSImage alloc] initWithCGImage:cgimage size:NSZeroSize];\n    CGImageRelease(cgimage);\n    return nsimage;\n}\n\n- (id)debugQuickLookObject {\n    return [self NSImage];\n}\n\n- (void)dealloc {\n    if (_iplImage != NULL)\n        cvReleaseImage(&_iplImage);\n}\n```\n\n\u3042\u3068\u306f\u3001\u305b\u3063\u304b\u304f\u4f5c\u3063\u305f Wrapper\u30af\u30e9\u30b9\u3067\u3059\u306e\u3067\u3001grayscale\u3068\u304b\u3001HSV\u5909\u63db\u3068\u304b\u3001`cvFindContours()`\u8fba\u308a\u306e\u547c\u51fa\u3057\u3068\u304b\u3001\u305f\u304f\u3055\u3093\u7d30\u3005\u3068\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u3044\u3051\u3070\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Objective-C", "OpenCV", "Xcode", "MacOSX"]}