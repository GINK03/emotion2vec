{"context": "\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306f\u30eb\u30fc\u30d7\u5c55\u958b\u3059\u308b\u5834\u6240\u306e\u5909\u66f4\u306b\u3088\u308a\u6027\u80fd\u3092\u5411\u4e0a\u3055\u305b\u305f\u3002\u3053\u308c\u4ee5\u4e0a\u306e\u9ad8\u901f\u5316\u3092\u884c\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u304b\uff1f\nVerlet list\u69cb\u7bc9\u306eSIMD\u5316\u30b7\u30ea\u30fc\u30ba\n* \u305d\u306e1 \u6700\u5185\u30eb\u30fc\u30d74\u500d\u5c55\u958b\uff0b\u99ac\u9e7fSIMD+\u9010\u6b21\u30b9\u30c8\u30a2\n* \u305d\u306e2 \u9010\u6b21\u30b9\u30c8\u30a2\u304b\u308964~256bit\u30b9\u30c8\u30a2\u306b\u5909\u66f4\n* \u305d\u306e3 \u5c55\u958b\u3059\u308b\u30eb\u30fc\u30d7\u3092\u5909\u66f4\u3057\u3001\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u6700\u9069\u5316\n* \u305d\u306e4\u3000\u6700\u7d42\u56de\n\nSIMD\u5316\u306e\u5272\u5408\u3092\u9ad8\u3081\u308b\n\u73fe\u5728\u306e\u30eb\u30fc\u30d7\u69cb\u9020\u306f\nfor (\u3059\u3079\u3066\u306e\u30bb\u30eb\u306b\u3064\u3044\u3066) {\n  for (int i = 0; i < (iloop / 4) * 4; i += 4) {\n    v4df vqia = ...;\n    v4df vqib = ...;\n    v4df vqic = ...;\n    v4df vqid = ...;\n    for (int j = 0; j < jloop; j++) {\n      // Verlet list\u69cb\u7bc9\n      v4df vqj = ...;\n      //64bit ~ 256bit\u306e\u7c92\u5b50\u30da\u30a2\u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30a2\n    }\n  }\n\n  // i\u7c92\u5b50\u30eb\u30fc\u30d7\u3092\u5c55\u958b\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u751f\u3058\u308b\u30b4\u30df\u30eb\u30fc\u30d7\n  for (int i = (iloop / 4) * 4; i < iloop; i++) {\n    for (int j = 0; j < jloop; j++) { // \u3053\u306e\u90e8\u5206\u306fSIMD\u5316\u3067\u304d\u308b\uff01\n      // Verlet list\u69cb\u7bc9\n    }\n  }\n}\n\ni\u30eb\u30fc\u30d7\u306e\u5c55\u958b\u306b\u969b\u3057\u3066\u767a\u751f\u3059\u308b\u30b4\u30df\u30eb\u30fc\u30d7\u306f\u7d50\u69cb\u91cd\u3044\u3002jloop x (iloop % 3)\u5206\u306e\u30eb\u30fc\u30d7\u304c\u4f59\u3063\u3066\u3044\u308b\u3002\n\u3053\u306e\u3042\u307e\u308a\u306e\u90e8\u5206\u306b\u3064\u3044\u3066\u306fj loop\u306b\u3064\u3044\u3066SIMD\u5316\u3067\u304d\u308b\u3002\n\n4x4\u884c\u5217\u306e\u8ee2\u7f6e\u306e\u56de\u6570\u3092\u6e1b\u3089\u3059\n\u3053\u308c\u307e\u3067\nconst auto ri_a = q[i_a];\nconst auto ri_b = q[i_b];\nconst auto ri_c = q[i_c];\nconst auto ri_d = q[i_d];\nfor (int j = 0; j < jloop; j++) { // \u6700\u5185\u30eb\u30fc\u30d7\n  const auto drij_a = ri_a - q[j];\n  const auto drij_b = ri_b - q[j];\n  const auto drij_c = ri_c - q[j];\n  const auto drij_d = ri_d - q[j];\n\n  ...\n\n  // 4x4 \u884c\u5217\u306e\u8ee2\u7f6e\u3092\u884c\u3046\u3002\n  /* drij_a = {dxa, dya, dza, 0}  4x4transpose dx_abcd = {dxa, dxb, dxc, dxd}\n     drij_b = {dxb, dyb, dzb, 0}        ->     dy_abcd = {dya, dyb, dyc, dyd}\n     drij_c = {dxc, dyc, dzc, 0}               dz_abcd = {dza, dzb, dzc, dzd}\n     drij_d = {dxd, dyd, dzd, 0}               dw_abcd = {  0,   0,   0,   0} */\n  //\n\n  ...\n\n  // \u5909\u4f4d\u30d9\u30af\u30c8\u30eb\u306e\u4e8c\u4e57\n  const auto drij2_abcd = dx_abcd * dx_abcd + dy_abcd * dy_abcd + dz_abcd * dz_abcd;\n\n  // Verlet list\u3092\u30b9\u30c8\u30a2\n  // drij2_abcd\u3092\u8a08\u7b97\u3057\u305f\u3042\u3068\u3067\u3001\u5909\u4f4d\u30d9\u30af\u30c8\u30ebdrij_{abcd}\u306e\u30c7\u30fc\u30bf\u306f\u5fc5\u8981\u306a\u3044\u3002\n\n  ...\n}\n\n\u306e\u3088\u3046\u306b\u5909\u4f4d\u30d9\u30af\u30c8\u30eb\u3092\u8a08\u7b97\u3057\u305f\u306e\u3061\u3001\u884c\u5217\u306e\u8ee2\u7f6e\u3092\u884c\u3044\u305d\u3053\u304b\u3089\u8ddd\u96e2\u306e\u4e8c\u4e57\u3092\u8a08\u7b97\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u305f\u3002\n\u3057\u304b\u3057\u3001\u529b\u306e\u8a08\u7b97\u306e\u5834\u5408\u3068\u9055\u3044\u3001\u5909\u4f4d\u30d9\u30af\u30c8\u30ebdrij_a drij_b drij_c drij_d\u306f\u3001\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u8a08\u7b97\u304c\u7d42\u308f\u3063\u3066\u3057\u307e\u3048\u3070\u3001\u6700\u5185\u30eb\u30fc\u30d7\u306e\u4ee5\u964d\u306e\u51e6\u7406\u306b\u5fc5\u8981\u306a\u3044\u3002\u4e0a\u8a18\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u793a\u3057\u3066\u3044\u308bdx_abcd dy_abcd dz_abcd\u3092\u76f4\u63a5\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u8a08\u7b97\u306f\u3067\u304d\u308b\u3002\n\u305d\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u7591\u4f3c\u30b3\u30fc\u30c9\u306b\u793a\u3059\u3088\u3046\u306b\nconst auto ri_a = q[i_a];\nconst auto ri_b = q[i_b];\nconst auto ri_c = q[i_c];\nconst auto ri_d = q[i_d];\n\n...\n\n// \u6700\u521d\u306bri_a ri_b ri_c ri_d\u306e 4x4 \u884c\u5217\u306e\u8ee2\u7f6e\u3092\u884c\u3046\u3002\n/* ri_a = {xia, yia, zia, 0}  4x4transpose xi_abcd = {xia, xib, xic, xid}\n   ri_b = {xib, yib, zib, 0}        ->     yi_abcd = {yia, yib, yic, yid}\n   ri_c = {xic, yic, zic, 0}               zi_abcd = {zia, zib, zic, zid}\n   ri_d = {xid, yid, zid, 0}               wi_abcd = {  0,   0,   0,   0} */\n//\n\n...\n\nfor (int j = 0; j < jloop; j++) { // \u6700\u5185\u30eb\u30fc\u30d7\n  v4df xj = _mm256_set1_pd(q[j].x); // xj = {q[j].x, q[j].x, q[j].x, q[j].x}\n  v4df yj = _mm256_set1_pd(q[j].y); // yj = {q[j].y, q[j].y, q[j].y, q[j].y}\n  v4df zj = _mm256_set1_pd(q[j].z); // zj = {q[j].z, q[j].z, q[j].z, q[j].z}\n\n  // drij_a drij_b drij_c drij_d\u3092\u4f5c\u3089\u306a\u3044\u3002\n  // \u5909\u4f4d\u30d9\u30af\u30c8\u30eb\u306e\u5404\u6210\u5206(x, y, z)\u304c\u683c\u7d0d\u3055\u308c\u305fv4df\u578b\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u3002\n  const auto dx_abcd = xi_abcd - xj;\n  const auto dy_abcd = yi_abcd - yj;\n  const auto dz_abcd = zi_abcd - zj;\n\n  const auto drij2_abcd = dx_abcd * dx_abcd + dy_abcd * dy_abcd + dz_abcd * dz_abcd;\n\n  // Verlet list\u3092\u30b9\u30c8\u30a2\n\n  ...\n}\n\n\u306b\u5909\u66f4\u3059\u308b\u3002\u30a2\u30f3\u30ed\u30fc\u30eb\u3057\u3066\u51fa\u3066\u304d\u305fi\u7c92\u5b50\u306e4x256bit\u306e\u5ea7\u6a19\u30c7\u30fc\u30bf\u3092\u6700\u521d\u306b\u4e00\u56de\u3060\u3051\u8ee2\u7f6e\u3057\u3066x{yz}i_abcd\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u305f\u3068\u3053\u308d\u304c\u5927\u304d\u306a\u5909\u66f4\u70b9\u3067\u3042\u308b\u3002\u3053\u308c\u306b\u3088\u308adrij_a drij_b drij_c drij_d\u306e\u8a08\u7b97\u3092\u7d4c\u7531\u305b\u305a\u3001\u76f4\u63a5\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u8a08\u7b97\u3092\u884c\u3046\u3002\n\n\u7d50\u679c\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306eMakePairListFusedLoopSIMD4x1AllTrans\u3067\u3042\u308b\u3002\n\u5b9f\u884c\u74b0\u5883\u306f\n* CPU: Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz\n* \u30b3\u30f3\u30d1\u30a4\u30e9: icpc (ICC) 16.0.4 20160811\n(\u524d\u56de\u5b9f\u884c\u74b0\u5883\u66f8\u304f\u306e\u5fd8\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u3059\u307f\u307e\u305b\u3093\u3002)\n100\u56de\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u3092\u69cb\u7bc9\u3059\u308b\u306e\u306b\u8981\u3057\u305f\u6642\u9593\n(\u305f\u3060\u3057\u3001\u5bc6\u5ea61\u3067\u7c92\u5b50\u657010\u4e07\u3067\u306e\u7d50\u679c)\n\n\n\n\n\u5b9f\u884c\u6642\u9593\n\n\n\n\nreference\n22593[ms]\n\n\n\u6700\u5185\u30eb\u30fc\u30d7\u3092\uff14\u500d\u5c55\u958b\u3057\u8ddd\u96e2\u8a08\u7b97\u3092SIMD\u5316\u3057\u3066\u9010\u6b21\u30b9\u30c8\u30a2\n23948[ms]\n\n\n\u4e0a\u8a18\u306b\u52a0\u3048\u30b9\u30c8\u30a2\u3092SIMD\u5316\n17794[ms]\n\n\n\u6700\u5185\u30eb\u30fc\u30d7\u3088\u308a\u4e00\u3064\u5916\u5074\u3092\uff14\u500d\u5c55\u958b\u3057\u3066\u8ddd\u96e2\u8a08\u7b97\u3068\u30b9\u30c8\u30a2\u3092SIMD\u5316\n15629[ms]\n\n\n\u4e0a\u8a18\u306b\u52a0\u3048SIMD\u5316\u7387\u5f15\u304d\u4e0a\u3052\u3001\u30b7\u30e3\u30c3\u30d5\u30eb\u547d\u4ee4\u3092\u524a\u6e1b\u3057\u305f\u3082\u306e\n12173[ms]\n\n\n\u4e0a\u8a18\u306b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d1\u30a4\u30d7\u30e9\u30a4\u30cb\u30f3\u30b0\u3092\u52a0\u3048\u305f\u3082\u306e\n12002[ms]\n\n\n\n\u76ee\u6a19\u3068\u3057\u3066\u3044\u305f2\u500d\u5f31\u304f\u3089\u3044\u306b\u306f\u306a\u3063\u305f\u3002\n\n\u88dc\u8db3 vgather\u7cfb\u547d\u4ee4\u3092\u7528\u3044\u305f\u5834\u5408\nconst auto ri_a = q[i_a];\nconst auto ri_b = q[i_b];\nconst auto ri_c = q[i_c];\nconst auto ri_d = q[i_d];\n\n...\n\n// \u6700\u521d\u306bri_a ri_b ri_c ri_d\u306e 4x4 \u884c\u5217\u306e\u8ee2\u7f6e\u3092\u884c\u3046\u3002\n/* ri_a = {xia, yia, zia, 0}  4x4transpose xi_abcd = {xia, xib, xic, xid}\n   ri_b = {xib, yib, zib, 0}        ->     yi_abcd = {yia, yib, yic, yid}\n   ri_c = {xic, yic, zic, 0}               zi_abcd = {zia, zib, zic, zid}\n   ri_d = {xid, yid, zid, 0}               wi_abcd = {  0,   0,   0,   0} */\n//\n\n\u306e\u90e8\u5206\u3067\u3001xi_abcd yi_abcd zi_abcd\u3092\u5f97\u308b\u306e\u306b\u8ee2\u7f6e\u3092\u4f7f\u308f\u305a\u306bvgather\u7cfb\u306e\u547d\u4ee4\u3067\u5f97\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\u4f8b\u3048\u3070\u3001\nv4si vindex = _mm_set_epi32(4 * i_d, 4 * i_c, 4 * i_b, 4 * i_a);\nv4df xi_abcd = _mm256_i32gather_pd(&(q[0].x), vindex, 8);\nv4df yi_abcd = _mm256_i32gather_pd(&(q[0].y), vindex, 8);\nv4df zi_abcd = _mm256_i32gather_pd(&(q[0].z), vindex, 8);\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u3002\n\u3057\u304b\u3057\u3001\u7c21\u5358\u306a\u4f8b\u3067\u8a66\u3057\u305f\u9650\u308a\u3067\u306fvgather\u4f7f\u308f\u306a\u3044\u65b9\u304c20%\u307b\u3069\u65e9\u304b\u3063\u305f\u306e\u3067\u3001\u884c\u5217\u3092\u8ee2\u7f6e\u3059\u308b\u3084\u308a\u65b9\u3092\u63a1\u7528\u3057\u305f\u3002\n#\u306f\u3058\u3081\u306b\n[\u524d\u56de](http://qiita.com/kohnakagawa/items/4a8f679f548c4324c6da)\u306f\u30eb\u30fc\u30d7\u5c55\u958b\u3059\u308b\u5834\u6240\u306e\u5909\u66f4\u306b\u3088\u308a\u6027\u80fd\u3092\u5411\u4e0a\u3055\u305b\u305f\u3002\u3053\u308c\u4ee5\u4e0a\u306e\u9ad8\u901f\u5316\u3092\u884c\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u304b\uff1f\n\nVerlet list\u69cb\u7bc9\u306eSIMD\u5316\u30b7\u30ea\u30fc\u30ba\n* [\u305d\u306e1](http://qiita.com/kohnakagawa/items/9bbf48f835278ab7b345) \u6700\u5185\u30eb\u30fc\u30d74\u500d\u5c55\u958b\uff0b\u99ac\u9e7fSIMD+\u9010\u6b21\u30b9\u30c8\u30a2\n* [\u305d\u306e2](http://qiita.com/kohnakagawa/items/3ed5ced6a1e1527728d6) \u9010\u6b21\u30b9\u30c8\u30a2\u304b\u308964~256bit\u30b9\u30c8\u30a2\u306b\u5909\u66f4\n* [\u305d\u306e3](http://qiita.com/kohnakagawa/items/4a8f679f548c4324c6da) \u5c55\u958b\u3059\u308b\u30eb\u30fc\u30d7\u3092\u5909\u66f4\u3057\u3001\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u6700\u9069\u5316\n* \u305d\u306e4\u3000\u6700\u7d42\u56de\n\n#SIMD\u5316\u306e\u5272\u5408\u3092\u9ad8\u3081\u308b\n\u73fe\u5728\u306e\u30eb\u30fc\u30d7\u69cb\u9020\u306f\n\n```c++\nfor (\u3059\u3079\u3066\u306e\u30bb\u30eb\u306b\u3064\u3044\u3066) {\n  for (int i = 0; i < (iloop / 4) * 4; i += 4) {\n    v4df vqia = ...;\n    v4df vqib = ...;\n    v4df vqic = ...;\n    v4df vqid = ...;\n    for (int j = 0; j < jloop; j++) {\n      // Verlet list\u69cb\u7bc9\n      v4df vqj = ...;\n      //64bit ~ 256bit\u306e\u7c92\u5b50\u30da\u30a2\u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30a2\n    }\n  }\n\n  // i\u7c92\u5b50\u30eb\u30fc\u30d7\u3092\u5c55\u958b\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u751f\u3058\u308b\u30b4\u30df\u30eb\u30fc\u30d7\n  for (int i = (iloop / 4) * 4; i < iloop; i++) {\n    for (int j = 0; j < jloop; j++) { // \u3053\u306e\u90e8\u5206\u306fSIMD\u5316\u3067\u304d\u308b\uff01\n      // Verlet list\u69cb\u7bc9\n    }\n  }\n}\n```\n\ni\u30eb\u30fc\u30d7\u306e\u5c55\u958b\u306b\u969b\u3057\u3066\u767a\u751f\u3059\u308b\u30b4\u30df\u30eb\u30fc\u30d7\u306f\u7d50\u69cb\u91cd\u3044\u3002jloop x (iloop % 3)\u5206\u306e\u30eb\u30fc\u30d7\u304c\u4f59\u3063\u3066\u3044\u308b\u3002\n\u3053\u306e\u3042\u307e\u308a\u306e\u90e8\u5206\u306b\u3064\u3044\u3066\u306fj loop\u306b\u3064\u3044\u3066SIMD\u5316\u3067\u304d\u308b\u3002\n\n#4x4\u884c\u5217\u306e\u8ee2\u7f6e\u306e\u56de\u6570\u3092\u6e1b\u3089\u3059\n\u3053\u308c\u307e\u3067\n\n```c++\nconst auto ri_a = q[i_a];\nconst auto ri_b = q[i_b];\nconst auto ri_c = q[i_c];\nconst auto ri_d = q[i_d];\nfor (int j = 0; j < jloop; j++) { // \u6700\u5185\u30eb\u30fc\u30d7\n  const auto drij_a = ri_a - q[j];\n  const auto drij_b = ri_b - q[j];\n  const auto drij_c = ri_c - q[j];\n  const auto drij_d = ri_d - q[j];\n\n  ...\n\n  // 4x4 \u884c\u5217\u306e\u8ee2\u7f6e\u3092\u884c\u3046\u3002\n  /* drij_a = {dxa, dya, dza, 0}  4x4transpose dx_abcd = {dxa, dxb, dxc, dxd}\n     drij_b = {dxb, dyb, dzb, 0}        ->     dy_abcd = {dya, dyb, dyc, dyd}\n     drij_c = {dxc, dyc, dzc, 0}               dz_abcd = {dza, dzb, dzc, dzd}\n     drij_d = {dxd, dyd, dzd, 0}               dw_abcd = {  0,   0,   0,   0} */\n  //\n\n  ...\n\n  // \u5909\u4f4d\u30d9\u30af\u30c8\u30eb\u306e\u4e8c\u4e57\n  const auto drij2_abcd = dx_abcd * dx_abcd + dy_abcd * dy_abcd + dz_abcd * dz_abcd;\n   \n  // Verlet list\u3092\u30b9\u30c8\u30a2\n  // drij2_abcd\u3092\u8a08\u7b97\u3057\u305f\u3042\u3068\u3067\u3001\u5909\u4f4d\u30d9\u30af\u30c8\u30ebdrij_{abcd}\u306e\u30c7\u30fc\u30bf\u306f\u5fc5\u8981\u306a\u3044\u3002\n\n  ...\n}\n```\n\n\u306e\u3088\u3046\u306b\u5909\u4f4d\u30d9\u30af\u30c8\u30eb\u3092\u8a08\u7b97\u3057\u305f\u306e\u3061\u3001\u884c\u5217\u306e\u8ee2\u7f6e\u3092\u884c\u3044\u305d\u3053\u304b\u3089\u8ddd\u96e2\u306e\u4e8c\u4e57\u3092\u8a08\u7b97\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u305f\u3002\n\u3057\u304b\u3057\u3001\u529b\u306e\u8a08\u7b97\u306e\u5834\u5408\u3068\u9055\u3044\u3001\u5909\u4f4d\u30d9\u30af\u30c8\u30ebdrij_a drij_b drij_c drij_d\u306f\u3001\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u8a08\u7b97\u304c\u7d42\u308f\u3063\u3066\u3057\u307e\u3048\u3070\u3001\u6700\u5185\u30eb\u30fc\u30d7\u306e\u4ee5\u964d\u306e\u51e6\u7406\u306b\u5fc5\u8981\u306a\u3044\u3002\u4e0a\u8a18\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u793a\u3057\u3066\u3044\u308bdx_abcd dy_abcd dz_abcd\u3092\u76f4\u63a5\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308c\u3070\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u8a08\u7b97\u306f\u3067\u304d\u308b\u3002\n\n\u305d\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u7591\u4f3c\u30b3\u30fc\u30c9\u306b\u793a\u3059\u3088\u3046\u306b\n\n```c++\nconst auto ri_a = q[i_a];\nconst auto ri_b = q[i_b];\nconst auto ri_c = q[i_c];\nconst auto ri_d = q[i_d];\n\n...\n\n// \u6700\u521d\u306bri_a ri_b ri_c ri_d\u306e 4x4 \u884c\u5217\u306e\u8ee2\u7f6e\u3092\u884c\u3046\u3002\n/* ri_a = {xia, yia, zia, 0}  4x4transpose xi_abcd = {xia, xib, xic, xid}\n   ri_b = {xib, yib, zib, 0}        ->     yi_abcd = {yia, yib, yic, yid}\n   ri_c = {xic, yic, zic, 0}               zi_abcd = {zia, zib, zic, zid}\n   ri_d = {xid, yid, zid, 0}               wi_abcd = {  0,   0,   0,   0} */\n//\n\n...\n\nfor (int j = 0; j < jloop; j++) { // \u6700\u5185\u30eb\u30fc\u30d7\n  v4df xj = _mm256_set1_pd(q[j].x); // xj = {q[j].x, q[j].x, q[j].x, q[j].x}\n  v4df yj = _mm256_set1_pd(q[j].y); // yj = {q[j].y, q[j].y, q[j].y, q[j].y}\n  v4df zj = _mm256_set1_pd(q[j].z); // zj = {q[j].z, q[j].z, q[j].z, q[j].z}\n\n  // drij_a drij_b drij_c drij_d\u3092\u4f5c\u3089\u306a\u3044\u3002\n  // \u5909\u4f4d\u30d9\u30af\u30c8\u30eb\u306e\u5404\u6210\u5206(x, y, z)\u304c\u683c\u7d0d\u3055\u308c\u305fv4df\u578b\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u3002\n  const auto dx_abcd = xi_abcd - xj;\n  const auto dy_abcd = yi_abcd - yj;\n  const auto dz_abcd = zi_abcd - zj;\n\n  const auto drij2_abcd = dx_abcd * dx_abcd + dy_abcd * dy_abcd + dz_abcd * dz_abcd;\n  \n  // Verlet list\u3092\u30b9\u30c8\u30a2\n\n  ...\n}\n```\n\n\u306b\u5909\u66f4\u3059\u308b\u3002_\u30a2\u30f3\u30ed\u30fc\u30eb\u3057\u3066\u51fa\u3066\u304d\u305fi\u7c92\u5b50\u306e4x256bit\u306e\u5ea7\u6a19\u30c7\u30fc\u30bf\u3092\u6700\u521d\u306b\u4e00\u56de\u3060\u3051\u8ee2\u7f6e\u3057\u3066x{yz}i_abcd\u306e\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u305f_\u3068\u3053\u308d\u304c\u5927\u304d\u306a\u5909\u66f4\u70b9\u3067\u3042\u308b\u3002\u3053\u308c\u306b\u3088\u308adrij_a drij_b drij_c drij_d\u306e\u8a08\u7b97\u3092\u7d4c\u7531\u305b\u305a\u3001\u76f4\u63a5\u8ddd\u96e2\u306e\u4e8c\u4e57\u306e\u8a08\u7b97\u3092\u884c\u3046\u3002\n\n#\u7d50\u679c\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://github.com/kohnakagawa/md_neighbor_list/blob/master/neighlist_cpu_simd.hpp)\u306eMakePairListFusedLoopSIMD4x1AllTrans\u3067\u3042\u308b\u3002\n\n\u5b9f\u884c\u74b0\u5883\u306f\n* CPU: Intel(R) Xeon(R) CPU E5-2680 v3 @ 2.50GHz\n* \u30b3\u30f3\u30d1\u30a4\u30e9: icpc (ICC) 16.0.4 20160811\n(\u524d\u56de\u5b9f\u884c\u74b0\u5883\u66f8\u304f\u306e\u5fd8\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u3059\u307f\u307e\u305b\u3093\u3002)\n\n100\u56de\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u3092\u69cb\u7bc9\u3059\u308b\u306e\u306b\u8981\u3057\u305f\u6642\u9593\n(\u305f\u3060\u3057\u3001\u5bc6\u5ea61\u3067\u7c92\u5b50\u657010\u4e07\u3067\u306e\u7d50\u679c)\n\n|  | \u5b9f\u884c\u6642\u9593 |\n|:-:|:-:|\n|  reference |  22593[ms] |\n|  \u6700\u5185\u30eb\u30fc\u30d7\u3092\uff14\u500d\u5c55\u958b\u3057\u8ddd\u96e2\u8a08\u7b97\u3092SIMD\u5316\u3057\u3066\u9010\u6b21\u30b9\u30c8\u30a2 | 23948[ms]  |\n|  \u4e0a\u8a18\u306b\u52a0\u3048\u30b9\u30c8\u30a2\u3092SIMD\u5316 |  17794[ms] |\n|  \u6700\u5185\u30eb\u30fc\u30d7\u3088\u308a\u4e00\u3064\u5916\u5074\u3092\uff14\u500d\u5c55\u958b\u3057\u3066\u8ddd\u96e2\u8a08\u7b97\u3068\u30b9\u30c8\u30a2\u3092SIMD\u5316 |  15629[ms] |\n| \u4e0a\u8a18\u306b\u52a0\u3048SIMD\u5316\u7387\u5f15\u304d\u4e0a\u3052\u3001\u30b7\u30e3\u30c3\u30d5\u30eb\u547d\u4ee4\u3092\u524a\u6e1b\u3057\u305f\u3082\u306e  | 12173[ms]  |\n|\u4e0a\u8a18\u306b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d1\u30a4\u30d7\u30e9\u30a4\u30cb\u30f3\u30b0\u3092\u52a0\u3048\u305f\u3082\u306e |12002[ms] |\n\n\u76ee\u6a19\u3068\u3057\u3066\u3044\u305f2\u500d\u5f31\u304f\u3089\u3044\u306b\u306f\u306a\u3063\u305f\u3002\n\n#\u88dc\u8db3 vgather\u7cfb\u547d\u4ee4\u3092\u7528\u3044\u305f\u5834\u5408\n\n```c++\nconst auto ri_a = q[i_a];\nconst auto ri_b = q[i_b];\nconst auto ri_c = q[i_c];\nconst auto ri_d = q[i_d];\n\n...\n\n// \u6700\u521d\u306bri_a ri_b ri_c ri_d\u306e 4x4 \u884c\u5217\u306e\u8ee2\u7f6e\u3092\u884c\u3046\u3002\n/* ri_a = {xia, yia, zia, 0}  4x4transpose xi_abcd = {xia, xib, xic, xid}\n   ri_b = {xib, yib, zib, 0}        ->     yi_abcd = {yia, yib, yic, yid}\n   ri_c = {xic, yic, zic, 0}               zi_abcd = {zia, zib, zic, zid}\n   ri_d = {xid, yid, zid, 0}               wi_abcd = {  0,   0,   0,   0} */\n//\n```\n\n\u306e\u90e8\u5206\u3067\u3001xi_abcd yi_abcd zi_abcd\u3092\u5f97\u308b\u306e\u306b\u8ee2\u7f6e\u3092\u4f7f\u308f\u305a\u306bvgather\u7cfb\u306e\u547d\u4ee4\u3067\u5f97\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\u4f8b\u3048\u3070\u3001\n\n```c++\nv4si vindex = _mm_set_epi32(4 * i_d, 4 * i_c, 4 * i_b, 4 * i_a);\nv4df xi_abcd = _mm256_i32gather_pd(&(q[0].x), vindex, 8);\nv4df yi_abcd = _mm256_i32gather_pd(&(q[0].y), vindex, 8);\nv4df zi_abcd = _mm256_i32gather_pd(&(q[0].z), vindex, 8);\n```\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u3002\n\n\u3057\u304b\u3057\u3001[\u7c21\u5358\u306a\u4f8b\u3067\u8a66\u3057\u305f](https://gist.github.com/kohnakagawa/11a296e2ed1c155a66db1ae08d0c3ae5)\u9650\u308a\u3067\u306fvgather\u4f7f\u308f\u306a\u3044\u65b9\u304c20%\u307b\u3069\u65e9\u304b\u3063\u305f\u306e\u3067\u3001\u884c\u5217\u3092\u8ee2\u7f6e\u3059\u308b\u3084\u308a\u65b9\u3092\u63a1\u7528\u3057\u305f\u3002\n", "tags": ["C++", "AVX", "AVX2"]}