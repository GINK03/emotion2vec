{"tags": ["PHP", "Python", "Ruby", "HSP", "Perl"], "context": " More than 1 year has passed since last update.\n\n\nPermutation Iterator\nnext_permutation\nURL\n\n\n\n\nC&sharp;/Go/Python/Ruby/VB\n\n\u307e\u3068\u3081\u542b\u3080 http://qiita.com/cielavenir/items/ac96da5e3040c2edb78c\n\n\n\n\nBoo/C&sharp;/Nemerle/VB\nhttp://qiita.com/cielavenir/items/0e07a024049017f7dea2\n\n\n\nJava/Groovy/Scala/Fortran/Pascal\nhttp://qiita.com/cielavenir/items/4347fd0c6c69fa60804a\n\n\n\nD/Go/JavaScript/Lua/R\nhttp://qiita.com/cielavenir/items/9e821d04f574a6623d03\n\n\nPerl\nHSP/PHP/Python/Ruby\nhttp://qiita.com/cielavenir/items/006a878292c5be209231\n\n\n\nC++\n(github\u53c2\u7167)\n\n\n\nPHP\n#!/usr/bin/php\n<?php\nfunction reverse(&$a,$start,$size){\n    $end=$start+$size-1;\n    for(;$start<$end;$start++){\n        $z=$a[$start];$a[$start]=$a[$end];$a[$end]=$z;\n        $end--;\n    }\n}\nfunction next_permutation(&$a,$_n=null){\n    $siz=count($a);\n    $n=$_n || $siz;\n    if($n<0||$siz<$n)return false;\n    $i=0;\n    reverse($a,$n,$siz-$n);\n    for($i=$siz-2;$i>=0;$i--)if($a[$i]<$a[$i+1])break;\n    if($i<0){\n        reverse($a,0,$siz);\n        return false;\n    }\n    $k=$i;\n    for($i=$siz-1;$i>=$k+1;$i--)if($a[$k]<$a[$i])break;\n    $l=$i;\n    $z=$a[$k];$a[$k]=$a[$l];$a[$l]=$z;\n    reverse($a,$k+1,$siz-($k+1));\n    return true;\n}\n\n$N=6;\n$e0=array_fill(0,$N*2,0);$f0=array_fill(0,$N*2,0);$i=0;$r=0;\nfor($i=0;$i<$N;$i++)$e0[$N+$i]=$f0[$N+$i]=1;\n$e=array(0);\n$f=array(0);\ndo{\n    for($i=0;$i<$N*2;$i++)$e[$i+1]=$e[$i]+$e0[$i];\n    do{\n        for($i=0;$i<$N*2;$i++){\n            $f[$i+1]=$f[$i]+$f0[$i];\n            if($e[$i]==$f[$i]&&$e[$i+1]==$f[$i+1])break;\n        }\n        if($i==$N*2)$r++;\n    }while(next_permutation($f0));\n}while(next_permutation($e0));\necho $r.PHP_EOL;\n?>\n\nPython\n\u914d\u5217\u306e\u7834\u58ca\u7684\u5909\u66f4\u3067\u3061\u3087\u3063\u3068\u624b\u9593\u53d6\u3063\u305f\u3002\n#!/usr/bin/python\n#coding:utf-8\nimport sys\nif sys.version_info[0]>=3: from functools import reduce\n\ndef find(cond,a):\n    for e in a:\n        if cond(e): return e\n    return None\ndef next_permutation(a,n=None):\n    if n==None: n=len(a)\n    if n<0 or len(a)<n: return False\n    a[0:len(a)]=a[0:n]+a[len(a)-1:n-1:-1]\n    k=find(lambda i: a[i]<a[i+1], range(len(a)-2,-1,-1))\n    if k==None:\n        a.reverse()\n        return False\n    l=find(lambda i: a[k]<a[i], range(len(a)-1,k,-1))\n    a[k],a[l]=a[l],a[k]\n    a[0:len(a)]=a[0:k+1]+a[len(a)-1:k:-1]\n    return True\n\nN=6\ne0=sorted([0]*N+[1]*N)\nf0=sorted([0]*N+[1]*N)\n#\u5404P\u306f\u7d4c\u8def\u3092\u8868\u3059\u30021\u304c\u7e26\u30010\u304c\u6a2a\u3092\u8868\u3059\u3002\nr=0\ni=0\ne=[0]*(N*2+1)\nf=[0]*(N*2+1)\nwhile True:\n    for i in range(N*2): e[i+1]=e[i]+e0[i]\n    #e=reduce(lambda s,_: (s.append(s[-1:][0]+_),s)[1],e0,[0])\n    #\u6570\u5b66\u306e\u5ea7\u6a19\u7cfb\u306e\u3088\u3046\u306b\u5de6\u4e0b\u3092A\u3001\u53f3\u4e0a\u3092B\u3068\u3059\u308b\u3068\u3001e\u306e\u5404\u30a4\u30f3\u30c7\u30c3\u30af\u30b9i\u306b\u304a\u3044\u3066\u3001x\u5ea7\u6a19\u304ci-e[i]\u3001y\u5ea7\u6a19\u304ce[i]\u3068\u306a\u308b\u3002\n    while True:\n        for i in range(N*2): f[i+1]=f[i]+f0[i]\n        #f=reduce(lambda s,_: (s.append(s[-1:][0]+_),s)[1],f0,[0])\n        if all(e[i]!=f[i] or e[i+1]!=f[i+1] for i in range(N*2)): r+=1\n        #i\u756a\u76ee\u306e\u5ea7\u6a19\u3068i+1\u756a\u76ee\u306e\u5ea7\u6a19\u304c\u7b49\u3057\u3051\u308c\u3070\u3001\u300c\u9053\u306b\u91cd\u8907\u304c\u3042\u308b\u300d\u3068\u307f\u306a\u305b\u308b\u3002\n        if not next_permutation(f0): break\n    if not next_permutation(e0): break\nprint(r) # 100360\n\nRuby\n#!/usr/bin/ruby\ndef next_permutation(a,n=a.size)\n    return if n<0||a.size<n\n    a.replace(a[0,n]+a[n..-1].reverse)\n    k=(a.size-2).downto(0).find{|i|a[i]<a[i+1]}\n    if !k\n        a.reverse!\n        return false\n    end\n    l=(a.size-1).downto(k+1).find{|i|a[k]<a[i]}\n    a[k],a[l]=a[l],a[k]\n    a.replace(a[0,k+1]+a[k+1..-1].reverse)\n    return true\nend\n\nN=6\n#P=([0]*N+[1]*N).permutation2.to_a # N=5\u306e\u3068\u304d\u3001permutation.to_a.uniq\u306e70\u500d\u901f\ne0=([0]*N+[1]*N).sort\nf0=([0]*N+[1]*N).sort\n#\u5404P\u306f\u7d4c\u8def\u3092\u8868\u3059\u30021\u304c\u7e26\u30010\u304c\u6a2a\u3092\u8868\u3059\u3002\nr=0\ni=0\ne=[0]*(N*2+1)\nf=[0]*(N*2+1)\nbegin\n    (N*2).times{|i|e[i+1]=e[i]+e0[i]}\n    #\u6570\u5b66\u306e\u5ea7\u6a19\u7cfb\u306e\u3088\u3046\u306b\u5de6\u4e0b\u3092A\u3001\u53f3\u4e0a\u3092B\u3068\u3059\u308b\u3068\u3001e\u306e\u5404\u30a4\u30f3\u30c7\u30c3\u30af\u30b9i\u306b\u304a\u3044\u3066\u3001x\u5ea7\u6a19\u304ci-e[i]\u3001y\u5ea7\u6a19\u304ce[i]\u3068\u306a\u308b\u3002\n    begin\n        r+=1 if (N*2).times.none?{|i|\n            f[i+1]=f[i]+f0[i]\n            #i\u756a\u76ee\u306e\u5ea7\u6a19\u3068i+1\u756a\u76ee\u306e\u5ea7\u6a19\u304c\u7b49\u3057\u3051\u308c\u3070\u3001\u300c\u9053\u306b\u91cd\u8907\u304c\u3042\u308b\u300d\u3068\u307f\u306a\u305b\u308b\u3002\n            e[i]==f[i] && e[i+1]==f[i+1]\n        }\n    end while(next_permutation(f0))\nend while(next_permutation(e0))\np r # 100360\n\nHSP\n#module\n#deffunc reverse array a_,int start_,int size_\n    end_=start_+size_-1\n    i_=0\n    repeat\n        if i_>size_/2-1: break\n        z_=a_(start_+i_)\n        a_(start_+i_)=a_(end_-i_)\n        a_(end_-i_)=z_\n        i_++\n    loop\n    return\n\n#defcfunc next_permutation array a_,int n_\n    if n_<0||length(a_)<n_ : return 0\n    i_=0\n    reverse a_,n_,length(a_)-n_\n    i_=length(a_)-2\n    repeat\n        if i_<0: break\n        if a_(i_)<a_(i_+1): break\n        i_--\n    loop\n    if i_<0{\n        reverse a_,0,length(a_)\n        return 0\n    }\n    k_=i_\n    i_=length(a_)-1\n    repeat\n        if i_<k_+1: break\n        if a_(k_)<a_(i_): break\n        i_--\n    loop\n    l_=i_\n    z_=a_(k_):a_(k_)=a_(l_):a_(l_)=z_\n    reverse a_,k_+1,length(a_)-(k_+1)\n    return 1\n\n#global\nN=6\ndim e0,N*2\ndim f0,N*2\ni=0\nrepeat\n    if i==N: break\n    e0(N+i)=1\n    f0(N+i)=1\n    i++\nloop\n;sort e0,f0 ;not required, since we have already sorted form\nr=0\ndim e,N*2+1\ndim f,N*2+1\nrepeat\n    i=0\n    repeat\n        if i==N*2: break\n        e(i+1)=e(i)+e0(i)\n        i++\n    loop\n    repeat\n        i=0\n        repeat\n            if i==N*2: break\n            f(i+1)=f(i)+f0(i)\n            if e(i)==f(i)&e(i+1)==f(i+1): break\n            i++\n        loop\n        if i==N*2: r++\n        z=next_permutation(f0,length(f0))\n        if z=0: break\n    loop\n    z=next_permutation(e0,length(e0))\n    if z=0: break\nloop\nmes r\nend\n\nPerl\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u7684\u306b\u72c2\u3063\u3066\u3044\u308b\u306e\u3067\u3082\u3046\u898b\u305f\u304f\u306a\u3044\u3002\u3068\u3053\u308d\u3067lt\u3068<\u306e\u554f\u984c\u306fPerl6\u306b\u3082\u3042\u3063\u305f\u305f\u3081\u4eca\u56de\u306f\u89e6\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n#!/usr/bin/perl\nuse strict;\nsub permute(&@){\n    my $code = shift;\n    my @a = @_;\n    while($code->(@a)){\n        my $i;\n        #push(@a,reverse splice @a, $n);\n        for($i=$#a-1;$i>=0;$i--){if($a[$i]<$a[$i+1]){last;}}\n        if($i<0){return;}\n        my $k=$i;\n        for($i=$#a;$i>=$k+1;$i--){if($a[$k]<$a[$i]){last;}}\n        my $l=$i;\n        @a[$k,$l]=@a[$l,$k];\n        push(@a, reverse splice @a, $k+1);\n    }\n}\n\nmy $N=6;\nmy @e0;\nmy @f0;\nmy $i;\nmy $r=0;\nfor($i=0;$i<$N;$i++){$e0[$i]=$f0[$i]=0;}\nfor($i=0;$i<$N;$i++){$e0[$N+$i]=$f0[$N+$i]=1;}\nmy @e=(0);\nmy @f=(0);\npermute {\n    for($i=0;$i<$N*2;$i++){$e[$i+1]=$e[$i]+$_[$i];}\n    permute {\n        for($i=0;$i<$N*2;$i++){\n            $f[$i+1]=$f[$i]+$_[$i];\n            if($e[$i]==$f[$i]&&$e[$i+1]==$f[$i+1]){last;}\n        }\n        if($i==$N*2){$r++;}\n        1;\n    } @f0;\n    1;\n} @e0;\nprint $r.\"\\n\";\n\n|Permutation Iterator|next_permutation|URL|\n|:--|:--|:--|\n|C&sharp;/Go/Python/Ruby/VB||\u307e\u3068\u3081\u542b\u3080 http://qiita.com/cielavenir/items/ac96da5e3040c2edb78c|\n||Boo/C&sharp;/Nemerle/VB|http://qiita.com/cielavenir/items/0e07a024049017f7dea2|\n||Java/Groovy/Scala/Fortran/Pascal|http://qiita.com/cielavenir/items/4347fd0c6c69fa60804a|\n||D/Go/JavaScript/Lua/R|http://qiita.com/cielavenir/items/9e821d04f574a6623d03|\n|Perl|HSP/PHP/Python/Ruby|http://qiita.com/cielavenir/items/006a878292c5be209231|\n||C++|(github\u53c2\u7167)|\n\nPHP\n\n```php\n#!/usr/bin/php\n<?php\nfunction reverse(&$a,$start,$size){\n\t$end=$start+$size-1;\n\tfor(;$start<$end;$start++){\n\t\t$z=$a[$start];$a[$start]=$a[$end];$a[$end]=$z;\n\t\t$end--;\n\t}\n}\nfunction next_permutation(&$a,$_n=null){\n\t$siz=count($a);\n\t$n=$_n || $siz;\n\tif($n<0||$siz<$n)return false;\n\t$i=0;\n\treverse($a,$n,$siz-$n);\n\tfor($i=$siz-2;$i>=0;$i--)if($a[$i]<$a[$i+1])break;\n\tif($i<0){\n\t\treverse($a,0,$siz);\n\t\treturn false;\n\t}\n\t$k=$i;\n\tfor($i=$siz-1;$i>=$k+1;$i--)if($a[$k]<$a[$i])break;\n\t$l=$i;\n\t$z=$a[$k];$a[$k]=$a[$l];$a[$l]=$z;\n\treverse($a,$k+1,$siz-($k+1));\n\treturn true;\n}\n\n$N=6;\n$e0=array_fill(0,$N*2,0);$f0=array_fill(0,$N*2,0);$i=0;$r=0;\nfor($i=0;$i<$N;$i++)$e0[$N+$i]=$f0[$N+$i]=1;\n$e=array(0);\n$f=array(0);\ndo{\n\tfor($i=0;$i<$N*2;$i++)$e[$i+1]=$e[$i]+$e0[$i];\n\tdo{\n\t\tfor($i=0;$i<$N*2;$i++){\n\t\t\t$f[$i+1]=$f[$i]+$f0[$i];\n\t\t\tif($e[$i]==$f[$i]&&$e[$i+1]==$f[$i+1])break;\n\t\t}\n\t\tif($i==$N*2)$r++;\n\t}while(next_permutation($f0));\n}while(next_permutation($e0));\necho $r.PHP_EOL;\n?>\n```\n\nPython\n\u914d\u5217\u306e\u7834\u58ca\u7684\u5909\u66f4\u3067\u3061\u3087\u3063\u3068\u624b\u9593\u53d6\u3063\u305f\u3002\n\n```py\n#!/usr/bin/python\n#coding:utf-8\nimport sys\nif sys.version_info[0]>=3: from functools import reduce\n\ndef find(cond,a):\n\tfor e in a:\n\t\tif cond(e): return e\n\treturn None\ndef next_permutation(a,n=None):\n\tif n==None: n=len(a)\n\tif n<0 or len(a)<n: return False\n\ta[0:len(a)]=a[0:n]+a[len(a)-1:n-1:-1]\n\tk=find(lambda i: a[i]<a[i+1], range(len(a)-2,-1,-1))\n\tif k==None:\n\t\ta.reverse()\n\t\treturn False\n\tl=find(lambda i: a[k]<a[i], range(len(a)-1,k,-1))\n\ta[k],a[l]=a[l],a[k]\n\ta[0:len(a)]=a[0:k+1]+a[len(a)-1:k:-1]\n\treturn True\n\nN=6\ne0=sorted([0]*N+[1]*N)\nf0=sorted([0]*N+[1]*N)\n#\u5404P\u306f\u7d4c\u8def\u3092\u8868\u3059\u30021\u304c\u7e26\u30010\u304c\u6a2a\u3092\u8868\u3059\u3002\nr=0\ni=0\ne=[0]*(N*2+1)\nf=[0]*(N*2+1)\nwhile True:\n\tfor i in range(N*2): e[i+1]=e[i]+e0[i]\n\t#e=reduce(lambda s,_: (s.append(s[-1:][0]+_),s)[1],e0,[0])\n\t#\u6570\u5b66\u306e\u5ea7\u6a19\u7cfb\u306e\u3088\u3046\u306b\u5de6\u4e0b\u3092A\u3001\u53f3\u4e0a\u3092B\u3068\u3059\u308b\u3068\u3001e\u306e\u5404\u30a4\u30f3\u30c7\u30c3\u30af\u30b9i\u306b\u304a\u3044\u3066\u3001x\u5ea7\u6a19\u304ci-e[i]\u3001y\u5ea7\u6a19\u304ce[i]\u3068\u306a\u308b\u3002\n\twhile True:\n\t\tfor i in range(N*2): f[i+1]=f[i]+f0[i]\n\t\t#f=reduce(lambda s,_: (s.append(s[-1:][0]+_),s)[1],f0,[0])\n\t\tif all(e[i]!=f[i] or e[i+1]!=f[i+1] for i in range(N*2)): r+=1\n\t\t#i\u756a\u76ee\u306e\u5ea7\u6a19\u3068i+1\u756a\u76ee\u306e\u5ea7\u6a19\u304c\u7b49\u3057\u3051\u308c\u3070\u3001\u300c\u9053\u306b\u91cd\u8907\u304c\u3042\u308b\u300d\u3068\u307f\u306a\u305b\u308b\u3002\n\t\tif not next_permutation(f0): break\n\tif not next_permutation(e0): break\nprint(r) # 100360\n```\n\nRuby\n\n```rb\n#!/usr/bin/ruby\ndef next_permutation(a,n=a.size)\n\treturn if n<0||a.size<n\n\ta.replace(a[0,n]+a[n..-1].reverse)\n\tk=(a.size-2).downto(0).find{|i|a[i]<a[i+1]}\n\tif !k\n\t\ta.reverse!\n\t\treturn false\n\tend\n\tl=(a.size-1).downto(k+1).find{|i|a[k]<a[i]}\n\ta[k],a[l]=a[l],a[k]\n\ta.replace(a[0,k+1]+a[k+1..-1].reverse)\n\treturn true\nend\n\nN=6\n#P=([0]*N+[1]*N).permutation2.to_a # N=5\u306e\u3068\u304d\u3001permutation.to_a.uniq\u306e70\u500d\u901f\ne0=([0]*N+[1]*N).sort\nf0=([0]*N+[1]*N).sort\n#\u5404P\u306f\u7d4c\u8def\u3092\u8868\u3059\u30021\u304c\u7e26\u30010\u304c\u6a2a\u3092\u8868\u3059\u3002\nr=0\ni=0\ne=[0]*(N*2+1)\nf=[0]*(N*2+1)\nbegin\n\t(N*2).times{|i|e[i+1]=e[i]+e0[i]}\n\t#\u6570\u5b66\u306e\u5ea7\u6a19\u7cfb\u306e\u3088\u3046\u306b\u5de6\u4e0b\u3092A\u3001\u53f3\u4e0a\u3092B\u3068\u3059\u308b\u3068\u3001e\u306e\u5404\u30a4\u30f3\u30c7\u30c3\u30af\u30b9i\u306b\u304a\u3044\u3066\u3001x\u5ea7\u6a19\u304ci-e[i]\u3001y\u5ea7\u6a19\u304ce[i]\u3068\u306a\u308b\u3002\n\tbegin\n\t\tr+=1 if (N*2).times.none?{|i|\n\t\t\tf[i+1]=f[i]+f0[i]\n\t\t\t#i\u756a\u76ee\u306e\u5ea7\u6a19\u3068i+1\u756a\u76ee\u306e\u5ea7\u6a19\u304c\u7b49\u3057\u3051\u308c\u3070\u3001\u300c\u9053\u306b\u91cd\u8907\u304c\u3042\u308b\u300d\u3068\u307f\u306a\u305b\u308b\u3002\n\t\t\te[i]==f[i] && e[i+1]==f[i+1]\n\t\t}\n\tend while(next_permutation(f0))\nend while(next_permutation(e0))\np r # 100360\n```\n\nHSP\n\n```hsp\n#module\n#deffunc reverse array a_,int start_,int size_\n\tend_=start_+size_-1\n\ti_=0\n\trepeat\n\t\tif i_>size_/2-1: break\n\t\tz_=a_(start_+i_)\n\t\ta_(start_+i_)=a_(end_-i_)\n\t\ta_(end_-i_)=z_\n\t\ti_++\n\tloop\n\treturn\n\n#defcfunc next_permutation array a_,int n_\n\tif n_<0||length(a_)<n_ : return 0\n\ti_=0\n\treverse a_,n_,length(a_)-n_\n\ti_=length(a_)-2\n\trepeat\n\t\tif i_<0: break\n\t\tif a_(i_)<a_(i_+1): break\n\t\ti_--\n\tloop\n\tif i_<0{\n\t\treverse a_,0,length(a_)\n\t\treturn 0\n\t}\n\tk_=i_\n\ti_=length(a_)-1\n\trepeat\n\t\tif i_<k_+1: break\n\t\tif a_(k_)<a_(i_): break\n\t\ti_--\n\tloop\n\tl_=i_\n\tz_=a_(k_):a_(k_)=a_(l_):a_(l_)=z_\n\treverse a_,k_+1,length(a_)-(k_+1)\n\treturn 1\n\n#global\nN=6\ndim e0,N*2\ndim f0,N*2\ni=0\nrepeat\n\tif i==N: break\n\te0(N+i)=1\n\tf0(N+i)=1\n\ti++\nloop\n;sort e0,f0 ;not required, since we have already sorted form\nr=0\ndim e,N*2+1\ndim f,N*2+1\nrepeat\n\ti=0\n\trepeat\n\t\tif i==N*2: break\n\t\te(i+1)=e(i)+e0(i)\n\t\ti++\n\tloop\n\trepeat\n\t\ti=0\n\t\trepeat\n\t\t\tif i==N*2: break\n\t\t\tf(i+1)=f(i)+f0(i)\n\t\t\tif e(i)==f(i)&e(i+1)==f(i+1): break\n\t\t\ti++\n\t\tloop\n\t\tif i==N*2: r++\n\t\tz=next_permutation(f0,length(f0))\n\t\tif z=0: break\n\tloop\n\tz=next_permutation(e0,length(e0))\n\tif z=0: break\nloop\nmes r\nend\n```\n\nPerl\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u7684\u306b\u72c2\u3063\u3066\u3044\u308b\u306e\u3067\u3082\u3046\u898b\u305f\u304f\u306a\u3044\u3002\u3068\u3053\u308d\u3067lt\u3068&lt;\u306e\u554f\u984c\u306fPerl6\u306b\u3082\u3042\u3063\u305f\u305f\u3081\u4eca\u56de\u306f\u89e6\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n```pl\n#!/usr/bin/perl\nuse strict;\nsub permute(&@){\n\tmy $code = shift;\n\tmy @a = @_;\n\twhile($code->(@a)){\n\t\tmy $i;\n\t\t#push(@a,reverse splice @a, $n);\n\t\tfor($i=$#a-1;$i>=0;$i--){if($a[$i]<$a[$i+1]){last;}}\n\t\tif($i<0){return;}\n\t\tmy $k=$i;\n\t\tfor($i=$#a;$i>=$k+1;$i--){if($a[$k]<$a[$i]){last;}}\n\t\tmy $l=$i;\n\t\t@a[$k,$l]=@a[$l,$k];\n\t\tpush(@a, reverse splice @a, $k+1);\n\t}\n}\n\nmy $N=6;\nmy @e0;\nmy @f0;\nmy $i;\nmy $r=0;\nfor($i=0;$i<$N;$i++){$e0[$i]=$f0[$i]=0;}\nfor($i=0;$i<$N;$i++){$e0[$N+$i]=$f0[$N+$i]=1;}\nmy @e=(0);\nmy @f=(0);\npermute {\n\tfor($i=0;$i<$N*2;$i++){$e[$i+1]=$e[$i]+$_[$i];}\n\tpermute {\n\t\tfor($i=0;$i<$N*2;$i++){\n\t\t\t$f[$i+1]=$f[$i]+$_[$i];\n\t\t\tif($e[$i]==$f[$i]&&$e[$i+1]==$f[$i+1]){last;}\n\t\t}\n\t\tif($i==$N*2){$r++;}\n\t\t1;\n\t} @f0;\n\t1;\n} @e0;\nprint $r.\"\\n\";\n```\n"}