{"tags": ["C++", "boost1.54", "Boost.Log"], "context": " More than 1 year has passed since last update.Trivial\u306aBoost.Log\u306e\u4f7f\u3044\u65b9\u3092\u8d85\u3048\u308b\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u9577\u304f\u306a\u308b\u306e\u3067\u8907\u6570\u56de\u306b\u5206\u3051\u307e\u3059\u3002\n\n\u6982\u7565\n\u30ed\u30b0\u306e\u53ce\u96c6\n\u30ed\u30b0\u306e\u51fa\u529b\ncmake\u306b\u3088\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\nchannel\u306e\u6271\u3044\n\n\u4eca\u56de\u306f\u30ed\u30b0\u306e\u53ce\u96c6\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\n\u72b6\u6cc1\u8a2d\u5b9a\n\u30ed\u30b0\u3092\u53d6\u308b\u305f\u3081\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u306f\u3001\u8907\u6570\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308b\u3068\u304d\u306b\n\u7279\u5b9a\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089\u306e\u30ed\u30b0\u3092\u9078\u308a\u5206\u3051\u305f\u308a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3067\u3059\u3002\n\u6700\u5c0f\u306e\u72b6\u6cc1\u8a2d\u5b9a\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u5834\u5408\u3092\u8003\u3048\u307e\u3059\u3002\nCMakeLists.txt\nmod1/CMakeLists.txt\n     func.hpp\n     func1.cpp\n     func2.cpp\n     logger.cpp\nclient.cpp\n\n\u3042\u308b\u30e2\u30b8\u30e5\u30fc\u30ebmod1\u3092client.cpp\u304b\u3089\u4f7f\u3046\u5834\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n\u307e\u305f\u5168\u3066cmake\u3092\u4f7f\u7528\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\u5c1a\u6587\u7ae0\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u7565\u3057\u305fnamespace\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a\nnamespace logging = boost::log;\nnamespace keywords = logging::keywords;\nnamespace sinks = logging::sinks;\nnamespace src = logging::sources;\nnamespace attrs = logging::attributes;\nnamespace expr = logging::expressions;\n\n\u307e\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306ftermoshtt/boost_log_sample\u306b\u3042\u308a\u307e\u3059\u3002\n\nlogger\u306e\u5b9a\u7fa9\n\u81ea\u4f5clogger\u3092\u4f5c\u308b\u4e8b\u306b\u3088\u3063\u3066\u3001\u305d\u306elogger\u306b\u3088\u3063\u3066\u53ce\u96c6\u3055\u308c\u308b\u30ed\u30b0\u306b\u60c5\u5831\u3092\u4ed8\u52a0\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u3067\u6df1\u523b\u5ea6\u4ed8\u304d\u306elogger\u3092\u751f\u6210\u3057\u307e\u3059\n\nmod1/func.hpp\nnamespace mod1 {\nenum severity_level { debug, info, warning, error, critical };\nBOOST_LOG_INLINE_GLOBAL_LOGGER_DEFAULT(\n    logger,                                                 // logger\u306e\u540d\u79f0\n    boost::log::sources::severity_logger_mt<severity_level> // logger\u306e\u578b\n    );\n} // namespace mod1\n\n\n\u3053\u308c\u3067mod1::logger\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\u3053\u308c\u306f\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\n\nmod1/func1.cpp\nnamespace mod1 {\nvoid func1() {\n  auto &lg = logger::get();\n  BOOST_LOG_SEV(lg, info) << \"info in mod1::func1\";\n}\n} // namespace mod1\n\n\nlogger\u306e\u5b9f\u4f53\u306f::get()\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\nBOOST_LOG_SEV\u306f\u6df1\u523b\u5ea6\u3068\u4e00\u7dd2\u306b\u30ed\u30b0\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e\u30de\u30af\u30ed\u3067\u3059\u3002\ninfo\u306fmod1::info\u306a\u4e8b\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nTag, Scope\u306e\u8ffd\u52a0\nBoost.Log\u3067\u306f\u5225\u306elogger\u3067\u53ce\u96c6\u3055\u308c\u305f\u30ed\u30b0\u306f\u5168\u3066\u540c\u3058\u3088\u3046\u306bsink\u306b\u9001\u3089\u308c\u307e\u3059\u3002\n\u3064\u307e\u308a\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3069\u306elogger\u304b\u3089\u51fa\u529b\u3055\u308c\u305f\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067logger\u306b\u3001\u305d\u306elogger\u3067\u53ce\u96c6\u3055\u308c\u305f\u30ed\u30b0\u306b\u60c5\u5831\u3092\u4ed8\u52a0\u3059\u308b\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n\nmod1/logger.cpp\nnamespace mod1 {\nvoid init() {\n  auto &lg = logger::get();\n  lg.add_attribute(\"Tag\", attrs::constant<std::string>(\"mod1\"));\n  lg.add_attribute(\"Scope\", attrs::named_scope());\n}\n} // namespace mod1\n\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u81ea\u4f53\u306e\u521d\u671f\u5316\u30b3\u30fc\u30c9\u3067logger\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u308c\u3067mod1::logger\u3092\u901a\u3057\u3066\u53ce\u96c6\u3055\u308c\u305f\u30ed\u30b0\u306b\u306f\u30bf\u30b0\"mod1\"\u304c\u4ed8\u304d\u307e\u3059\u3002\n\u307e\u305f\u30ed\u30b0\u304c\u3069\u306e\u95a2\u6570\u3067\u53ce\u96c6\u3055\u308c\u305f\u304b\u3001\u3055\u3089\u306b\u8a00\u3048\u3070\u3069\u306eif\u6587\u7b49\u306e\u3069\u306e\u30b9\u30b3\u30fc\u30d7\u3067\u51fa\u529b\u3055\u308c\u305f\u304b\u3001\n\u3068\u3044\u3046\u306e\u306f\u91cd\u8981\u306a\u60c5\u5831\u3067\u3042\u308b\u5834\u5408\u304c\u591a\u3044\u3067\u3059\u3002\n\u3053\u308c\u3092\u4fdd\u6301\u3059\u308b\u306e\u304cScope\u3067\u3059\u3002\n\u3053\u308c\u306f\u5e38\u306b\u5024\u304c\u4e00\u5b9a(\"mod1\")\u306e\u30bf\u30b0\u3068\u7570\u306a\u308a\u3001\u53ce\u96c6\u3055\u308c\u308b\u30ed\u30b0\u6bce\u306b\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002\n\nmod1/func1.cpp\nnamespace mod1 {\n\nvoid func1(bool flag) {\n  BOOST_LOG_FUNCTION(); // Scope\u306b\u95a2\u6570\u540d(void func1(boo))\u3092\u767b\u9332\u3059\u308b\n  auto &lg = logger::get();\n  if (flag) {\n    BOOST_LOG_NAMED_SCOPE(\"true case\"); // Scope\u306b\u5165\u3063\u305f\u4e8b\u3092\u8a18\u9332\u3059\u308b\n    BOOST_LOG_SEV(lg, info) << \"flag is true\";\n  } else {\n    BOOST_LOG_NAMED_SCOPE(\"false case\"); // Scope\u306b\u5165\u3063\u305f\u4e8b\u3092\u8a18\u9332\u3059\u308b\n    BOOST_LOG_SEV(lg, info) << \"flag is false\";\n  }\n  BOOST_LOG_SEV(lg, error) << \"Some error occurs!!\";\n}\n\n} // namespace mod1\n\n\n\n\u307e\u3068\u3081\n\u3053\u308c\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u4e2d\u3067\u30ed\u30b0\u3092\u53ce\u96c6\u3059\u308b\u4e8b\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002\ntrivial\u306e\u5834\u5408\u3068\u6bd4\u3079\u308b\u3068logger\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u5c11\u3057\u9762\u5012\u3067\u3059\u304c\u3001\n\u3068\u3044\u3063\u3066\u3082\u6570\u884c\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u6e08\u307f\u307e\u3057\u305f\u3002\n\u4ed8\u52a0\u60c5\u5831\u306flogging\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u5fc5\u9808\u306a\u306e\u3067\u3001\u662f\u975e\u5c0e\u5165\u3057\u307e\u3057\u3087\u3046\u3002\n\u6b21\u56de\u306f\u53ce\u96c6\u3057\u305f\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u65b9\u6cd5\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\nTrivial\u306aBoost.Log\u306e\u4f7f\u3044\u65b9\u3092\u8d85\u3048\u308b\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u9577\u304f\u306a\u308b\u306e\u3067\u8907\u6570\u56de\u306b\u5206\u3051\u307e\u3059\u3002\n\n0. \u6982\u7565\n1. \u30ed\u30b0\u306e\u53ce\u96c6\n2. \u30ed\u30b0\u306e\u51fa\u529b\n3. cmake\u306b\u3088\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\n4. channel\u306e\u6271\u3044\n\n\u4eca\u56de\u306f\u30ed\u30b0\u306e\u53ce\u96c6\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\n# \u72b6\u6cc1\u8a2d\u5b9a\n\n\u30ed\u30b0\u3092\u53d6\u308b\u305f\u3081\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u306f\u3001\u8907\u6570\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308b\u3068\u304d\u306b\n\u7279\u5b9a\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304b\u3089\u306e\u30ed\u30b0\u3092\u9078\u308a\u5206\u3051\u305f\u308a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u3067\u3059\u3002\n\u6700\u5c0f\u306e\u72b6\u6cc1\u8a2d\u5b9a\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u5834\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n\n```\nCMakeLists.txt\nmod1/CMakeLists.txt\n     func.hpp\n     func1.cpp\n     func2.cpp\n     logger.cpp\nclient.cpp\n```\n\n\u3042\u308b\u30e2\u30b8\u30e5\u30fc\u30eb`mod1`\u3092`client.cpp`\u304b\u3089\u4f7f\u3046\u5834\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n\u307e\u305f\u5168\u3066cmake\u3092\u4f7f\u7528\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\n\u5c1a\u6587\u7ae0\u4e2d\u306b\u51fa\u73fe\u3059\u308b\u7565\u3057\u305fnamespace\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\uff1a\n\n```cpp\nnamespace logging = boost::log;\nnamespace keywords = logging::keywords;\nnamespace sinks = logging::sinks;\nnamespace src = logging::sources;\nnamespace attrs = logging::attributes;\nnamespace expr = logging::expressions;\n```\n\n\u307e\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f[termoshtt/boost_log_sample](https://github.com/termoshtt/boost_log_sample)\u306b\u3042\u308a\u307e\u3059\u3002\n\n# logger\u306e\u5b9a\u7fa9\n\n\u81ea\u4f5clogger\u3092\u4f5c\u308b\u4e8b\u306b\u3088\u3063\u3066\u3001\u305d\u306elogger\u306b\u3088\u3063\u3066\u53ce\u96c6\u3055\u308c\u308b\u30ed\u30b0\u306b\u60c5\u5831\u3092\u4ed8\u52a0\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u3067\u6df1\u523b\u5ea6\u4ed8\u304d\u306elogger\u3092\u751f\u6210\u3057\u307e\u3059\n\n```cpp:mod1/func.hpp\nnamespace mod1 {\nenum severity_level { debug, info, warning, error, critical };\nBOOST_LOG_INLINE_GLOBAL_LOGGER_DEFAULT(\n    logger,                                                 // logger\u306e\u540d\u79f0\n    boost::log::sources::severity_logger_mt<severity_level> // logger\u306e\u578b\n    );\n} // namespace mod1\n```\n\n\u3053\u308c\u3067`mod1::logger`\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\u3053\u308c\u306f\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```cpp:mod1/func1.cpp\nnamespace mod1 {\nvoid func1() {\n  auto &lg = logger::get();\n  BOOST_LOG_SEV(lg, info) << \"info in mod1::func1\";\n}\n} // namespace mod1\n```\n\nlogger\u306e\u5b9f\u4f53\u306f`::get()`\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\n`BOOST_LOG_SEV`\u306f\u6df1\u523b\u5ea6\u3068\u4e00\u7dd2\u306b\u30ed\u30b0\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e\u30de\u30af\u30ed\u3067\u3059\u3002\n`info`\u306f`mod1::info`\u306a\u4e8b\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## Tag, Scope\u306e\u8ffd\u52a0\n\nBoost.Log\u3067\u306f\u5225\u306elogger\u3067\u53ce\u96c6\u3055\u308c\u305f\u30ed\u30b0\u306f\u5168\u3066\u540c\u3058\u3088\u3046\u306bsink\u306b\u9001\u3089\u308c\u307e\u3059\u3002\n\u3064\u307e\u308a\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3069\u306elogger\u304b\u3089\u51fa\u529b\u3055\u308c\u305f\u306e\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067logger\u306b\u3001\u305d\u306elogger\u3067\u53ce\u96c6\u3055\u308c\u305f\u30ed\u30b0\u306b\u60c5\u5831\u3092\u4ed8\u52a0\u3059\u308b\u8a2d\u5b9a\u3092\u3057\u307e\u3059\u3002\n\n```cpp:mod1/logger.cpp\nnamespace mod1 {\nvoid init() {\n  auto &lg = logger::get();\n  lg.add_attribute(\"Tag\", attrs::constant<std::string>(\"mod1\"));\n  lg.add_attribute(\"Scope\", attrs::named_scope());\n}\n} // namespace mod1\n```\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\u81ea\u4f53\u306e\u521d\u671f\u5316\u30b3\u30fc\u30c9\u3067logger\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u308c\u3067`mod1::logger`\u3092\u901a\u3057\u3066\u53ce\u96c6\u3055\u308c\u305f\u30ed\u30b0\u306b\u306f\u30bf\u30b0\"mod1\"\u304c\u4ed8\u304d\u307e\u3059\u3002\n\n\u307e\u305f\u30ed\u30b0\u304c\u3069\u306e\u95a2\u6570\u3067\u53ce\u96c6\u3055\u308c\u305f\u304b\u3001\u3055\u3089\u306b\u8a00\u3048\u3070\u3069\u306eif\u6587\u7b49\u306e\u3069\u306e\u30b9\u30b3\u30fc\u30d7\u3067\u51fa\u529b\u3055\u308c\u305f\u304b\u3001\n\u3068\u3044\u3046\u306e\u306f\u91cd\u8981\u306a\u60c5\u5831\u3067\u3042\u308b\u5834\u5408\u304c\u591a\u3044\u3067\u3059\u3002\n\u3053\u308c\u3092\u4fdd\u6301\u3059\u308b\u306e\u304c`Scope`\u3067\u3059\u3002\n\u3053\u308c\u306f\u5e38\u306b\u5024\u304c\u4e00\u5b9a(\"mod1\")\u306e\u30bf\u30b0\u3068\u7570\u306a\u308a\u3001\u53ce\u96c6\u3055\u308c\u308b\u30ed\u30b0\u6bce\u306b\u5024\u304c\u5909\u5316\u3057\u307e\u3059\u3002\n\n```cpp:mod1/func1.cpp\nnamespace mod1 {\n\nvoid func1(bool flag) {\n  BOOST_LOG_FUNCTION(); // Scope\u306b\u95a2\u6570\u540d(void func1(boo))\u3092\u767b\u9332\u3059\u308b\n  auto &lg = logger::get();\n  if (flag) {\n    BOOST_LOG_NAMED_SCOPE(\"true case\"); // Scope\u306b\u5165\u3063\u305f\u4e8b\u3092\u8a18\u9332\u3059\u308b\n    BOOST_LOG_SEV(lg, info) << \"flag is true\";\n  } else {\n    BOOST_LOG_NAMED_SCOPE(\"false case\"); // Scope\u306b\u5165\u3063\u305f\u4e8b\u3092\u8a18\u9332\u3059\u308b\n    BOOST_LOG_SEV(lg, info) << \"flag is false\";\n  }\n  BOOST_LOG_SEV(lg, error) << \"Some error occurs!!\";\n}\n\n} // namespace mod1\n```\n\n# \u307e\u3068\u3081\n\u3053\u308c\u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u4e2d\u3067\u30ed\u30b0\u3092\u53ce\u96c6\u3059\u308b\u4e8b\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002\ntrivial\u306e\u5834\u5408\u3068\u6bd4\u3079\u308b\u3068logger\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u5c11\u3057\u9762\u5012\u3067\u3059\u304c\u3001\n\u3068\u3044\u3063\u3066\u3082\u6570\u884c\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u6e08\u307f\u307e\u3057\u305f\u3002\n\u4ed8\u52a0\u60c5\u5831\u306flogging\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u5fc5\u9808\u306a\u306e\u3067\u3001\u662f\u975e\u5c0e\u5165\u3057\u307e\u3057\u3087\u3046\u3002\n\u6b21\u56de\u306f\u53ce\u96c6\u3057\u305f\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u65b9\u6cd5\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n"}