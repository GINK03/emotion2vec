{"tags": ["Java", "Interpreter", "compiler"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u56db\u5247\u6f14\u7b97\u306f\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u8a08\u7b97\u7d50\u679c\u306f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u308c\u3067\u306f\u3055\u3073\u3057\u3044\u306e\u3067\u8a08\u7b97\u7d50\u679c\u3092\u8868\u793a\u3059\u308bprintln\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\u3002\n\nprintln\u306e\u8ffd\u52a0\u3067\u3084\u308a\u305f\u3044\u3053\u3068\n\u5b9f\u88c5\u306b\u3042\u305f\u308a\u3001\u5177\u4f53\u7684\u306b\u3084\u308a\u305f\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0b\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3042\u3063\u305f\u3089\u3001\u6a19\u6e96\u51fa\u529b\u306b1\u3068\u6539\u884c\u304c\u51fa\u529b\u3067\u304d\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\nprintln(1)\n\n\u307e\u305f2\u3092\u4ee3\u5165\u3057\u305f\u5909\u6570\u3092println()\u306e\u5f15\u6570\u306b\u6307\u5b9a\u3055\u308c\u305f\u3089\u3001\u305d\u306e\u5185\u5bb92\u304c\u6a19\u6e96\u51fa\u529b\u306b\u6539\u884c\u3068\u51fa\u529b\u3067\u304d\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\na = 2\nprintln(a)\n\n\n\u5b9f\u88c5\u306e\u4ed5\u65b9\n\u3053\u308c\u307e\u3067\u3067\u5b57\u53e5\u89e3\u6790(Lexer)\u3001\u69cb\u6587\u89e3\u6790(Parser)\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u9806\u306b\u5b9f\u88c5\u306e\u4ed5\u65b9\u3092\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u5b57\u53e5\u89e3\u6790(Lexer)\u3078\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\u5b9f\u88c5\u3057\u305f\u5b57\u53e5\u89e3\u6790\u306b\u306f\u62ec\u5f27\u3001(\u3068)\u3092\u89e3\u6790\u3059\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\u307e\u305a\u306f\u305d\u308c\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u307e\u305f\u5b57\u53e5\u89e3\u6790\u306e\u4ed5\u69d8\u3067\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4e26\u3073\u306f\u5909\u6570\u540d(variable)\u3060\u3068\u610f\u5473\u4ed8\u3051\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4e26\u3073\u306e\uff11\u3064\u3067\u3042\u308bprintln\u306f\u5909\u6570\u540d\u3067\u306f\u306a\u304f\u95a2\u6570\u540d\u3067\u3059\u3002\n\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4e26\u3073\u3068\u3044\u3046\u4e8b\u5b9f\u3060\u3051\u3067\u306f\u3001\u5909\u6570\u540d\u304b\u95a2\u6570\u540d\u304b\u306f\u6c7a\u307e\u3089\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u305d\u306e\u305f\u3081\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u4e26\u3073\u306e\u610f\u5473\u4ed8\u3051\u3092\u3001\u8b58\u5225\u5b50(ident)\u3078\u5909\u66f4\u3057\u307e\u3059\u3002\n\n\u69cb\u6587\u89e3\u6790(Parser)\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\u5b9f\u88c5\u306e\u4ed5\u65b9\u3092\u8003\u3048\u308b\u305f\u3081\u306b\u3001\u307e\u305aprintln(1)\u547c\u3073\u51fa\u3057\u306e\u30c8\u30fc\u30af\u30f3\u306e\u4e26\u3073\u3092\u3088\u304f\u89b3\u5bdf\u3057\u307e\u3059\u3002\n\u6b21\u306e4\u3064\u306e\u30c8\u30fc\u30af\u30f3\u3078\u5206\u89e3\u3055\u308c\u307e\u3059\u3002\n\n\nprintln \u3068 ( \u3068 1 \u3068 )\n\n\n\u3053\u306e\u4e26\u3073\u306fa + 1\u306e\u4e26\u3073\u3068\u4f3c\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\na + 1\u3082\u540c\u3058\u3088\u3046\u306b\u30c8\u30fc\u30af\u30f3\u306e\u4e26\u3073\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n\na \u3068 + \u3068 1\n\n\n\u305d\u308c\u3089\u3092\u5bfe\u6bd4\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n\nprintln \u2192 a \u2192 \u3069\u3061\u3089\u3082\u8b58\u5225\u5b50\n\n( \u2192 + \u2192 \u3069\u3061\u3089\u3082\u8a18\u53f7\n\n1 \u2192 \uff11 \u2192 \u3069\u3061\u3089\u3082\u6570\u5b57\n\n) \u2192 \u5bfe\u5fdc\u306a\u3057\n\na + 1\u306e\u69cb\u6587\u89e3\u6790\u306f+\u3092\u771f\u3093\u4e2d\u306b\u3057\u3066\u3001\u5de6\u53f3\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u3092\u5272\u308a\u4ed8\u3051\u307e\u3057\u305f\u3002\n\u5bfe\u6bd4\u3092\u89b3\u5bdf\u3059\u308b\u3068println(1)\u3082(\u3092\u771f\u3093\u4e2d\u306b\u3057\u3066\u3001\u5de6\u53f3\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u304c\u304f\u308b\u69cb\u56f3\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u89b3\u5bdf\u7d50\u679c\u304b\u3089\u3001println(1)\u3092\u69cb\u6587\u89e3\u6790\u3059\u308b\u306b\u306f\u3001a + 1\u3092\u89e3\u6790\u5237\u308b\u3088\u3046\u306b\u51e6\u7406\u3057\u3066\u3001\u6700\u5f8c\u306b)\u30c8\u30fc\u30af\u30f3\u304c\u304f\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308c\u3070\u69cb\u6587\u89e3\u6790\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u3064\u307e\u308a\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u3078\u306e\u69cb\u6587\u89e3\u6790\u3092\u5c11\u3057\u5909\u5f62\u3057\u3066\u3042\u3052\u308c\u3070\u5b9f\u88c5\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u307e\u305f\u3001\u5148\u306e\u5b57\u53e5\u89e3\u6790\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u3067\u3042\u3052\u305f\u3001\u5909\u6570\u540d(variable)\u304b\u3089\u8b58\u5225\u5b50(ident)\u3078\u306e\u5909\u66f4\u306b\u3082\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\nprintln(1)\u547c\u3073\u51fa\u3057\u3092\u5b9f\u88c5\u3059\u308b\u306b\u3042\u305f\u308a\u554f\u984c\u70b9\u3068\u3057\u3066\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u306f\u6697\u9ed9\u7684\u306b\u5909\u6570\u540d(variable)\u3092String\u3067\u8868\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u3044\u307e\u307e\u3067\u306f\u95a2\u6570\u540d\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u305d\u308c\u3067\u3088\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4eca\u5ea6\u306f\u5909\u6570\u540d\u3068\u95a2\u6570\u540d\u3092\u533a\u5225\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u305d\u306e\u305f\u3081\u5909\u6570\u540d\u3068\u95a2\u6570\u540d\u3092\u8868\u3059\u30af\u30e9\u30b9\u3092\u3001\u305d\u308c\u305e\u308c\u306b\u5c0e\u5165\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\u307e\u305f\u69cb\u6587\u89e3\u6790\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u3067\u89b3\u5bdf\u3057\u305f\u3088\u3046\u306b\u3001(\u304cprintln(1)\u547c\u3073\u51fa\u3057\u306e\u30ad\u30fc\u306b\u306a\u308b\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002\n(\u30c8\u30fc\u30af\u30f3\u306b\u51fa\u4f1a\u3063\u305f\u3089\u3001\u305d\u308c\u3092\u51e6\u7406\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u4ed5\u5411\u3051\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u3053\u3061\u3089\u3067\u3082\u3001\u5148\u306e\u5b57\u53e5\u89e3\u6790\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u3067\u3042\u3052\u305f\u3001\u5909\u6570\u540d(variable)\u304b\u3089\u8b58\u5225\u5b50(ident)\u3078\u306e\u5909\u66f4\u306b\u3082\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\nJava\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\u5b9f\u88c5\u306b\u3046\u3064\u308a\u307e\u3059\u3002\n\u3053\u3061\u3089\u3082\u3067\u3082\u5b57\u53e5\u89e3\u6790(Lexer)\u3001\u69cb\u6587\u89e3\u6790(Parser)\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u306e\u3001\n\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001\u5909\u66f4\u3068\u8ffd\u52a0\u3092\u3057\u305f\u3068\u3053\u308d\u3092\u9806\u306b\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\nLexer.java\nLexer.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u306f\u62ec\u5f27\u3001(\u3068)\u3092\u89e3\u6790\u3059\u308b\u6a5f\u80fd\u306e\u8ffd\u52a0\u3067\u3059\u3002\n\nLexer.java\n\n    private boolean isParenStart(char c) {\n        return c == '(' || c == ')';\n    }\n\n    private Token paren() throws Exception {\n        Token t = new Token();\n        t.kind = \"paren\";\n        t.value = Character.toString(next());\n        return t;\n    }\n\n\n\u7d9a\u3044\u3066\u3001\u5909\u6570\u540d(variable)\u304b\u3089\u8b58\u5225\u5b50(ident)\u3078\u306e\u5909\u66f4\u3078\u306e\u5bfe\u5fdc\u3067\u3059\u3002\n\nLexer.java\n\n    private boolean isIdentStart(char c) throws Exception {\n        return Character.isAlphabetic(c);\n    }\n\n    private Token ident() throws Exception {\n        StringBuilder b = new StringBuilder();\n        b.append(next());\n        while (!isEOT() && (Character.isAlphabetic(c()) || Character.isDigit(c()))) {\n            b.append(next());\n        }\n        Token t = new Token();\n        t.kind = \"ident\";\n        t.value = b.toString();\n        return t;\n    }\n\n\n\u6700\u5f8c\u306b\u3001\u62ec\u5f27\u306e\u89e3\u6790\u306e\u547c\u3073\u51fa\u3057\u90e8\u5206\u306e\u8ffd\u52a0\u3068\u3001ident\u3078\u306e\u5909\u66f4\u306e\u547c\u3073\u51fa\u3057\u90e8\u5206\u3092\u4fee\u6b63\u3057\u3066\u3042\u3052\u308c\u3070\u3001\nLexer.java\u306e\u5b9f\u88c5\u306f\u7d42\u4e86\u3067\u3059\u3002\n\nLexer.java\n    public Token nextToken() throws Exception {\n        skipSpace();\n        if (isEOT()) {\n            return null;\n        } else if (isSignStart(c())) {\n            return sign();\n        } else if (isDigitStart(c())) {\n            return digit();\n        } else if (isIdentStart(c())) {\n            return ident();\n        } else if (isParenStart(c())) {\n            return paren();\n        } else {\n            throw new Exception(\"Not a character for tokens\");\n        }\n    }\n\n\n\nParser.java\nParser.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u5bfe\u3057\u3066\u3001\u3069\u3046\u52d5\u4f5c\u3059\u308b\u304b\u306e\u5b9a\u7fa9\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\n<-- Add\u306e\u7b87\u6240\u3067\u6f14\u7b97\u5b50\u9806\u5e8f\u306e\u5ea6\u5408\u3044\u3092\u5b9a\u7fa9\u3059\u308bdegrees\u3078(\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n(\u3082\u6f14\u7b97\u5b50\u306e\u3088\u3046\u306b\u6271\u3046\u305f\u3081\u306e\u5bfe\u5fdc\u3067\u3059\u3002\nprintln()\u306f\u3001\u4ed6\u306e\u6f14\u7b97\u5b50\u3088\u308a\u3082\u512a\u5148\u7684\u306b\u7d50\u5408\u3055\u305b\u305f\u3044\u306e\u3067\u3001\u305d\u306e\u5ea6\u5408\u309280\u306b\u3057\u307e\u3059\u3002\n<-- Update\u306e\u7b87\u6240\u3067ident\u3078\u306e\u5909\u66f4\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\nParser.java\n    public Parser() {\n        degrees = new HashMap<>();\n        degrees.put(\"(\", 80);   // <-- Add\n        degrees.put(\"*\", 60);\n        degrees.put(\"/\", 60);\n        degrees.put(\"+\", 50);\n        degrees.put(\"-\", 50);\n        degrees.put(\"=\", 10);\n        factorKinds = Arrays.asList(new String[] { \"digit\", \"ident\" }); // <-- Update\n        binaryKinds = Arrays.asList(new String[] { \"sign\" });\n        rightAssocs = Arrays.asList(new String[] { \"=\" });\n    }\n\n\n\u89e3\u6790\u3092\u884c\u3046\u90e8\u5206\u306e\u5909\u66f4\u3067\u3059\u3002\n\u89e3\u6790\u3092\u884c\u3046\u51e6\u7406\u3092<-- Add\u304c\u3042\u308bif\u6587\u306e\u7b87\u6240\u3078\u52a0\u3048\u307e\u3057\u305f\u3002\noperator.left\u3068operator.right\u3078\u30c8\u30fc\u30af\u30f3\u3092\u5272\u308a\u4ed8\u3051\u308b\u3068\u3053\u308d\u306f\u3001\u5143\u3005\u3042\u3063\u305f\u4e0a\u306b\u3042\u308bif\u6587\u306e\u6f14\u7b97\u5b50\u306e\u89e3\u6790\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002\noperator.right = expression(0);\u306eexpression()\u306e\u5f15\u6570\u304c\u4e0a\u306eif\u6587\u3068\u9055\u3063\u30660\u306a\u306e\u306f\u3001\n\u95a2\u6570\u306e\u5f15\u6570\u3068\u3057\u3066\u3001\u5f0f\u3092\uff11\u3064\u72ec\u7acb\u3057\u3066\u3068\u308b\u305f\u3081\u3067\u3001\u5148\u884c\u3084\u5f8c\u7d9a\u306e\u6f14\u7b97\u5b50\u3068\u512a\u5148\u9806\u4f4d\u3092\u6bd4\u8f03\u3059\u308b\u5fc5\u7136\u6027\u304c\u306a\u3044\u304b\u3089\u3067\u3059\u3002\nconsume()\u306f\u6b21\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u304c\u9589\u3058\u62ec\u5f27\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3001\u89e3\u6790\u3067\u6ce8\u76ee\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u6b21\u3078\u9032\u3081\u307e\u3059\u3002\nParser.java\u306e\u5b9f\u88c5\u306f\u7d42\u4e86\u3067\u3059\u3002\n\nParser.java\n    private Token bind(Token left, Token operator) throws Exception {\n        if (binaryKinds.contains(operator.kind)) {\n            operator.left = left;\n            int leftDegree = degree(operator);\n            if (rightAssocs.contains(operator.value)) {\n                leftDegree -= 1;\n            }\n            operator.right = expression(leftDegree);\n            return operator;\n        } else if(operator.kind.equals(\"paren\") && operator.value.equals(\"(\")) {    // <-- Add\n            operator.left = left;\n            operator.right = expression(0);\n            consume(\")\");\n            return operator;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n\n    private Token consume(String expectedValue) throws Exception {\n        if (!expectedValue.equals(token().value)) {\n            throw new Exception(\"Not expected value\");\n        }\n        return next();\n    }\n\n\n\nInterpreter.java\nInterpreter.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u306f\u5909\u6570\u540d\u3068\u95a2\u6570\u540d\u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306b\u3001\u305d\u308c\u305e\u308c\u3092\u8868\u3059\u30af\u30e9\u30b9\u3092\u5c0e\u5165\u3057\u307e\u3059\u3002\n\u95a2\u6570\u306e\u65b9\u306f\u4eca\u5f8c\u306e\u62e1\u5f35\u3092\u8003\u3048\u3066\u3001\u62bd\u8c61\u30af\u30e9\u30b9\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\ninvoke()\u30e1\u30bd\u30c3\u30c9\u3067\u5b9f\u969b\u306b\u95a2\u6570\u304c\u884c\u3046\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public static class Variable {\n        public String name;\n        public Integer value;\n\n        @Override\n        public String toString() {\n            return name + \" \" + value;\n        }\n    }\n\n    public static abstract class Func {\n        public String name;\n\n        abstract public Object invoke(Object arg) throws Exception;\n    }\n\n    public static class Println extends Func {\n        public Println() {\n            name = \"println\";\n        }\n\n        @Override\n        public Object invoke(Object arg) throws Exception {\n            System.out.println(arg);\n            return null;\n        }\n    }\n\n\n\u521d\u671f\u5316\u90e8\u5206\u306e\u5909\u66f4\u3067\u3059\u3002\n\u95a2\u6570\u306b\u5bfe\u5fdc\u3059\u308b\u306e\u306b\u3001\u95a2\u6570\u540d\u3068\u305d\u306e\u5024\u3092\u4fdd\u6301\u3059\u308bMap\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\u305d\u3053\u3078println()\u306e\u5b9f\u4f53\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nInterpreter.java\npublic class Interpreter {\n\n    public Map<String, Func> functions;\n    public Map<String, Variable> variables;\n    List<Token> body;\n\n    public Interpreter init(List<Token> body) {\n        functions = new HashMap<>();\n        Func f = new Println();\n        functions.put(f.name, f);\n        variables = new HashMap<>();\n        this.body = body;\n        return this;\n    }\n\n\n\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u3088\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u3092\u51e6\u7406\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u5206\u3051\u308b\u90e8\u5206\u306e\u5909\u66f4\u3067\u3059\u3002\n\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092<-- Add\u304c\u3042\u308b\u7b87\u6240\u3078\u52a0\u3048\u307e\u3057\u305f\u3002\nident\u3078\u306e\u5909\u66f4\u3092<-- Update\u304c\u3042\u308b\u7b87\u6240\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nInterpreter.java\n    public Object expression(Token expr) throws Exception {\n        if (expr.kind.equals(\"digit\")) {\n            return digit(expr);\n        } else if (expr.kind.equals(\"ident\")) { // <-- Update\n            return ident(expr);\n        } else if (expr.kind.equals(\"paren\")) { // <-- Add\n            return invoke(expr);\n        } else if (expr.kind.equals(\"sign\") && expr.value.equals(\"=\")) {\n            return assign(expr);\n        } else if (expr.kind.equals(\"sign\")) {\n            return calc(expr);\n        } else {\n            throw new Exception(\"Expression error\");\n        }\n    }\n\n\nvar()\u3092ident()\u3078\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u8b58\u5225\u5b50\u304c\u95a2\u6570\u540d\u306a\u3089\u95a2\u6570\u3078\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u5909\u6570\u3078\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public Object ident(Token token) {\n        String name = token.value;\n        if (functions.containsKey(name)) {\n            return functions.get(name);\n        }\n        if (variables.containsKey(name)) {\n            return variables.get(name);\n        } else {\n            Variable v = new Variable();\n            v.name = name;\n            v.value = 0;\n            variables.put(name, v);\n            return v;\n        }\n    }\n\n\n\u6b21\u306e\u30e1\u30c3\u30c9\u3067\u306f\u5909\u6570\u540d\u3092\u8868\u3059\u305f\u3081\u306b\u5c0e\u5165\u3057\u305fVariable\u30af\u30e9\u30b9\u3078\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\nInterpreter.java\n    public Variable assign(Token expr) throws Exception {\n        Variable variable = variable(expression(expr.left));\n        Integer value = value(expression(expr.right));\n        variable.value = value;\n        variables.put(variable.name, variable);\n        return variable;\n    }\n\n    public Variable variable(Object value) throws Exception {\n        if (value instanceof Variable) {\n            return (Variable) value;\n        } else {\n            throw new Exception(\"left value error\");\n        }\n    }\n\n    public Integer value(Object value) throws Exception {\n        if (value instanceof Integer) {\n            return (Integer) value;\n        } else if (value instanceof Variable) {\n            Variable v = (Variable) value;\n            return v.value;\n        }\n        throw new Exception(\"right value error\");\n    }\n\n\ninvoke()\u306f\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\u3067\u3059\u3002\nfunc()\u306finvoke()\u306e\u51e6\u7406\u3067\u3001expr.left\u306e\u7d50\u679c\u304c\u95a2\u6570\u540d\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u304b\u3081\u307e\u3059\u3002\n\nInterpreter.java\n    private Object invoke(Token expr) throws Exception {\n        Func f = func(expression(expr.left));\n        Integer value = value(expression(expr.right));\n        return f.invoke(value);\n    }\n\n    public Func func(Object value) throws Exception {\n        if (value instanceof Func) {\n            return (Func) value;\n        } else {\n            throw new Exception(\"Not a function\");\n        }\n    }\n\n\n\u4ee5\u4e0a\u306e\u5b9f\u88c5\u3092\u4f7f\u3063\u3066\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\na = 3 + 4 * 5\nprintln(a)\n\n\u3092\u8a08\u7b97\u3057\u3001\u5909\u6570\u3078\u4ee3\u5165\u3055\u308c\u305f\u5024\u3092\u6a19\u6e96\u51fa\u529b\u3078\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public static void main(String[] args) throws Exception {\n        String text = \"a = 3 + 4 * 5\";\n        text += \"println(a)\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        new Interpreter().init(blk).run();\n        // --> 23\n    }\n}\n\n\n\u5b9f\u88c5\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\u3042\u308a\u304c\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\u304a\u308f\u308a\u306b\n\u30bd\u30fc\u30b9\u306e\u5168\u6587\u306f\u3053\u3061\u3089\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nCalc\nhttps://github.com/quwahara/Calc/tree/article-4-interpreter/Calc/src/main/java\n\u7d9a\u304d\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\u512a\u5148\u9806\u4f4d\u4ed8\u3051\u306e\u62ec\u5f27\u306b\u5bfe\u5fdc\u3059\u308b\nhttp://qiita.com/quwahara/items/b76c6e438aeb32450391\n# \u306f\u3058\u3081\u306b\n\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067[\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u5b9f\u88c5](http://qiita.com/quwahara/items/30e93dfd2690913d66c0)\u3057\u307e\u3057\u305f\u3002\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u56db\u5247\u6f14\u7b97\u306f\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u8a08\u7b97\u7d50\u679c\u306f\u8868\u793a\u3067\u304d\u307e\u305b\u3093\u3002\n\u305d\u308c\u3067\u306f\u3055\u3073\u3057\u3044\u306e\u3067\u8a08\u7b97\u7d50\u679c\u3092\u8868\u793a\u3059\u308bprintln\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\u3002\n\n# println\u306e\u8ffd\u52a0\u3067\u3084\u308a\u305f\u3044\u3053\u3068\n\n\u5b9f\u88c5\u306b\u3042\u305f\u308a\u3001\u5177\u4f53\u7684\u306b\u3084\u308a\u305f\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0b\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u3042\u3063\u305f\u3089\u3001\u6a19\u6e96\u51fa\u529b\u306b`1`\u3068\u6539\u884c\u304c\u51fa\u529b\u3067\u304d\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\n\n```JS\nprintln(1)\n```\n\n\u307e\u305f`2`\u3092\u4ee3\u5165\u3057\u305f\u5909\u6570\u3092`println()`\u306e\u5f15\u6570\u306b\u6307\u5b9a\u3055\u308c\u305f\u3089\u3001\u305d\u306e\u5185\u5bb9`2`\u304c\u6a19\u6e96\u51fa\u529b\u306b\u6539\u884c\u3068\u51fa\u529b\u3067\u304d\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\n\n```JS\na = 2\nprintln(a)\n```\n\n# \u5b9f\u88c5\u306e\u4ed5\u65b9\n\n\u3053\u308c\u307e\u3067\u3067\u5b57\u53e5\u89e3\u6790(Lexer)\u3001\u69cb\u6587\u89e3\u6790(Parser)\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u9806\u306b\u5b9f\u88c5\u306e\u4ed5\u65b9\u3092\u8003\u3048\u3066\u3044\u304d\u307e\u3059\u3002\n\n## \u5b57\u53e5\u89e3\u6790(Lexer)\u3078\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\n\u5b9f\u88c5\u3057\u305f\u5b57\u53e5\u89e3\u6790\u306b\u306f\u62ec\u5f27\u3001`(`\u3068`)`\u3092\u89e3\u6790\u3059\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\u307e\u305a\u306f\u305d\u308c\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u307e\u305f\u5b57\u53e5\u89e3\u6790\u306e\u4ed5\u69d8\u3067\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4e26\u3073\u306f\u5909\u6570\u540d(variable)\u3060\u3068\u610f\u5473\u4ed8\u3051\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u3057\u304b\u3057\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4e26\u3073\u306e\uff11\u3064\u3067\u3042\u308b`println`\u306f\u5909\u6570\u540d\u3067\u306f\u306a\u304f\u95a2\u6570\u540d\u3067\u3059\u3002\n\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u4e26\u3073\u3068\u3044\u3046\u4e8b\u5b9f\u3060\u3051\u3067\u306f\u3001\u5909\u6570\u540d\u304b\u95a2\u6570\u540d\u304b\u306f\u6c7a\u307e\u3089\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u305d\u306e\u305f\u3081\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u4e26\u3073\u306e\u610f\u5473\u4ed8\u3051\u3092\u3001\u8b58\u5225\u5b50(ident)\u3078\u5909\u66f4\u3057\u307e\u3059\u3002\n\n## \u69cb\u6587\u89e3\u6790(Parser)\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\n\u5b9f\u88c5\u306e\u4ed5\u65b9\u3092\u8003\u3048\u308b\u305f\u3081\u306b\u3001\u307e\u305a`println(1)`\u547c\u3073\u51fa\u3057\u306e\u30c8\u30fc\u30af\u30f3\u306e\u4e26\u3073\u3092\u3088\u304f\u89b3\u5bdf\u3057\u307e\u3059\u3002\n\u6b21\u306e4\u3064\u306e\u30c8\u30fc\u30af\u30f3\u3078\u5206\u89e3\u3055\u308c\u307e\u3059\u3002\n\n* `println` \u3068 `(` \u3068 `1` \u3068 `)`\n\n\u3053\u306e\u4e26\u3073\u306f`a + 1`\u306e\u4e26\u3073\u3068\u4f3c\u305f\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n`a + 1`\u3082\u540c\u3058\u3088\u3046\u306b\u30c8\u30fc\u30af\u30f3\u306e\u4e26\u3073\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n* `a` \u3068 `+` \u3068 `1`\n\n\u305d\u308c\u3089\u3092\u5bfe\u6bd4\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\n* `println` \u2192 `a` \u2192 \u3069\u3061\u3089\u3082\u8b58\u5225\u5b50\n* `(` \u2192 `+` \u2192 \u3069\u3061\u3089\u3082\u8a18\u53f7\n* `1` \u2192 `\uff11` \u2192 \u3069\u3061\u3089\u3082\u6570\u5b57\n* `)` \u2192 \u5bfe\u5fdc\u306a\u3057\n\n`a + 1`\u306e\u69cb\u6587\u89e3\u6790\u306f`+`\u3092\u771f\u3093\u4e2d\u306b\u3057\u3066\u3001\u5de6\u53f3\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u3092\u5272\u308a\u4ed8\u3051\u307e\u3057\u305f\u3002\n\u5bfe\u6bd4\u3092\u89b3\u5bdf\u3059\u308b\u3068`println(1)`\u3082`(`\u3092\u771f\u3093\u4e2d\u306b\u3057\u3066\u3001\u5de6\u53f3\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u304c\u304f\u308b\u69cb\u56f3\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u89b3\u5bdf\u7d50\u679c\u304b\u3089\u3001`println(1)`\u3092\u69cb\u6587\u89e3\u6790\u3059\u308b\u306b\u306f\u3001`a + 1`\u3092\u89e3\u6790\u5237\u308b\u3088\u3046\u306b\u51e6\u7406\u3057\u3066\u3001\u6700\u5f8c\u306b`)`\u30c8\u30fc\u30af\u30f3\u304c\u304f\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308c\u3070\u69cb\u6587\u89e3\u6790\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u3064\u307e\u308a\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u3078\u306e\u69cb\u6587\u89e3\u6790\u3092\u5c11\u3057\u5909\u5f62\u3057\u3066\u3042\u3052\u308c\u3070\u5b9f\u88c5\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u307e\u305f\u3001\u5148\u306e\u5b57\u53e5\u89e3\u6790\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u3067\u3042\u3052\u305f\u3001\u5909\u6570\u540d(variable)\u304b\u3089\u8b58\u5225\u5b50(ident)\u3078\u306e\u5909\u66f4\u306b\u3082\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n## \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\n\n`println(1)`\u547c\u3073\u51fa\u3057\u3092\u5b9f\u88c5\u3059\u308b\u306b\u3042\u305f\u308a\u554f\u984c\u70b9\u3068\u3057\u3066\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u306f\u6697\u9ed9\u7684\u306b\u5909\u6570\u540d(variable)\u3092String\u3067\u8868\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u3044\u307e\u307e\u3067\u306f\u95a2\u6570\u540d\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u305d\u308c\u3067\u3088\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4eca\u5ea6\u306f\u5909\u6570\u540d\u3068\u95a2\u6570\u540d\u3092\u533a\u5225\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u305d\u306e\u305f\u3081\u5909\u6570\u540d\u3068\u95a2\u6570\u540d\u3092\u8868\u3059\u30af\u30e9\u30b9\u3092\u3001\u305d\u308c\u305e\u308c\u306b\u5c0e\u5165\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\u307e\u305f\u69cb\u6587\u89e3\u6790\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u3067\u89b3\u5bdf\u3057\u305f\u3088\u3046\u306b\u3001`(`\u304c`println(1)`\u547c\u3073\u51fa\u3057\u306e\u30ad\u30fc\u306b\u306a\u308b\u30c8\u30fc\u30af\u30f3\u3067\u3059\u3002\n`(`\u30c8\u30fc\u30af\u30f3\u306b\u51fa\u4f1a\u3063\u305f\u3089\u3001\u305d\u308c\u3092\u51e6\u7406\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u4ed5\u5411\u3051\u307e\u3059\u3002\n\u6700\u5f8c\u306b\u3053\u3061\u3089\u3067\u3082\u3001\u5148\u306e\u5b57\u53e5\u89e3\u6790\u306e\u5b9f\u88c5\u306e\u4ed5\u65b9\u3067\u3042\u3052\u305f\u3001\u5909\u6570\u540d(variable)\u304b\u3089\u8b58\u5225\u5b50(ident)\u3078\u306e\u5909\u66f4\u306b\u3082\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n# Java\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\n\u5b9f\u88c5\u306b\u3046\u3064\u308a\u307e\u3059\u3002\n\n\u3053\u3061\u3089\u3082\u3067\u3082\u5b57\u53e5\u89e3\u6790(Lexer)\u3001\u69cb\u6587\u89e3\u6790(Parser)\u3001\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf(Interpreter)\u306e\u3001\n\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u3001\u5909\u66f4\u3068\u8ffd\u52a0\u3092\u3057\u305f\u3068\u3053\u308d\u3092\u9806\u306b\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n## Lexer.java\n\nLexer.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u306f\u62ec\u5f27\u3001`(`\u3068`)`\u3092\u89e3\u6790\u3059\u308b\u6a5f\u80fd\u306e\u8ffd\u52a0\u3067\u3059\u3002\n\n```Java:Lexer.java\n    \n    private boolean isParenStart(char c) {\n        return c == '(' || c == ')';\n    }\n\n    private Token paren() throws Exception {\n        Token t = new Token();\n        t.kind = \"paren\";\n        t.value = Character.toString(next());\n        return t;\n    }\n```\n\n\u7d9a\u3044\u3066\u3001\u5909\u6570\u540d(variable)\u304b\u3089\u8b58\u5225\u5b50(ident)\u3078\u306e\u5909\u66f4\u3078\u306e\u5bfe\u5fdc\u3067\u3059\u3002\n\n```Java:Lexer.java\n    \n    private boolean isIdentStart(char c) throws Exception {\n        return Character.isAlphabetic(c);\n    }\n\n    private Token ident() throws Exception {\n        StringBuilder b = new StringBuilder();\n        b.append(next());\n        while (!isEOT() && (Character.isAlphabetic(c()) || Character.isDigit(c()))) {\n            b.append(next());\n        }\n        Token t = new Token();\n        t.kind = \"ident\";\n        t.value = b.toString();\n        return t;\n    }\n```\n\n\u6700\u5f8c\u306b\u3001\u62ec\u5f27\u306e\u89e3\u6790\u306e\u547c\u3073\u51fa\u3057\u90e8\u5206\u306e\u8ffd\u52a0\u3068\u3001ident\u3078\u306e\u5909\u66f4\u306e\u547c\u3073\u51fa\u3057\u90e8\u5206\u3092\u4fee\u6b63\u3057\u3066\u3042\u3052\u308c\u3070\u3001\nLexer.java\u306e\u5b9f\u88c5\u306f\u7d42\u4e86\u3067\u3059\u3002\n\n```Java:Lexer.java\n    public Token nextToken() throws Exception {\n        skipSpace();\n        if (isEOT()) {\n            return null;\n        } else if (isSignStart(c())) {\n            return sign();\n        } else if (isDigitStart(c())) {\n            return digit();\n        } else if (isIdentStart(c())) {\n            return ident();\n        } else if (isParenStart(c())) {\n            return paren();\n        } else {\n            throw new Exception(\"Not a character for tokens\");\n        }\n    }\n```\n\n## Parser.java\n\nParser.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u5bfe\u3057\u3066\u3001\u3069\u3046\u52d5\u4f5c\u3059\u308b\u304b\u306e\u5b9a\u7fa9\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\n`<-- Add`\u306e\u7b87\u6240\u3067\u6f14\u7b97\u5b50\u9806\u5e8f\u306e\u5ea6\u5408\u3044\u3092\u5b9a\u7fa9\u3059\u308b`degrees`\u3078`(`\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n`(`\u3082\u6f14\u7b97\u5b50\u306e\u3088\u3046\u306b\u6271\u3046\u305f\u3081\u306e\u5bfe\u5fdc\u3067\u3059\u3002\n`println()`\u306f\u3001\u4ed6\u306e\u6f14\u7b97\u5b50\u3088\u308a\u3082\u512a\u5148\u7684\u306b\u7d50\u5408\u3055\u305b\u305f\u3044\u306e\u3067\u3001\u305d\u306e\u5ea6\u5408\u3092`80`\u306b\u3057\u307e\u3059\u3002\n`<-- Update`\u306e\u7b87\u6240\u3067ident\u3078\u306e\u5909\u66f4\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n```Java:Parser.java\n    public Parser() {\n        degrees = new HashMap<>();\n        degrees.put(\"(\", 80);   // <-- Add\n        degrees.put(\"*\", 60);\n        degrees.put(\"/\", 60);\n        degrees.put(\"+\", 50);\n        degrees.put(\"-\", 50);\n        degrees.put(\"=\", 10);\n        factorKinds = Arrays.asList(new String[] { \"digit\", \"ident\" }); // <-- Update\n        binaryKinds = Arrays.asList(new String[] { \"sign\" });\n        rightAssocs = Arrays.asList(new String[] { \"=\" });\n    }\n```\n\n\u89e3\u6790\u3092\u884c\u3046\u90e8\u5206\u306e\u5909\u66f4\u3067\u3059\u3002\n\u89e3\u6790\u3092\u884c\u3046\u51e6\u7406\u3092`<-- Add`\u304c\u3042\u308bif\u6587\u306e\u7b87\u6240\u3078\u52a0\u3048\u307e\u3057\u305f\u3002\n`operator.left`\u3068`operator.right`\u3078\u30c8\u30fc\u30af\u30f3\u3092\u5272\u308a\u4ed8\u3051\u308b\u3068\u3053\u308d\u306f\u3001\u5143\u3005\u3042\u3063\u305f\u4e0a\u306b\u3042\u308bif\u6587\u306e\u6f14\u7b97\u5b50\u306e\u89e3\u6790\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002\n`operator.right = expression(0);`\u306e`expression()`\u306e\u5f15\u6570\u304c\u4e0a\u306eif\u6587\u3068\u9055\u3063\u3066`0`\u306a\u306e\u306f\u3001\n\u95a2\u6570\u306e\u5f15\u6570\u3068\u3057\u3066\u3001\u5f0f\u3092\uff11\u3064\u72ec\u7acb\u3057\u3066\u3068\u308b\u305f\u3081\u3067\u3001\u5148\u884c\u3084\u5f8c\u7d9a\u306e\u6f14\u7b97\u5b50\u3068\u512a\u5148\u9806\u4f4d\u3092\u6bd4\u8f03\u3059\u308b\u5fc5\u7136\u6027\u304c\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n`consume()`\u306f\u6b21\u306b\u304f\u308b\u30c8\u30fc\u30af\u30f3\u304c\u9589\u3058\u62ec\u5f27\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3001\u89e3\u6790\u3067\u6ce8\u76ee\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u6b21\u3078\u9032\u3081\u307e\u3059\u3002\nParser.java\u306e\u5b9f\u88c5\u306f\u7d42\u4e86\u3067\u3059\u3002\n\n```Java:Parser.java\n    private Token bind(Token left, Token operator) throws Exception {\n        if (binaryKinds.contains(operator.kind)) {\n            operator.left = left;\n            int leftDegree = degree(operator);\n            if (rightAssocs.contains(operator.value)) {\n                leftDegree -= 1;\n            }\n            operator.right = expression(leftDegree);\n            return operator;\n        } else if(operator.kind.equals(\"paren\") && operator.value.equals(\"(\")) {    // <-- Add\n            operator.left = left;\n            operator.right = expression(0);\n            consume(\")\");\n            return operator;\n        } else {\n            throw new Exception(\"The token cannot place there.\");\n        }\n    }\n\n    private Token consume(String expectedValue) throws Exception {\n        if (!expectedValue.equals(token().value)) {\n            throw new Exception(\"Not expected value\");\n        }\n        return next();\n    }\n```\n\n## Interpreter.java\n\nInterpreter.java\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\u307e\u305a\u306f\u5909\u6570\u540d\u3068\u95a2\u6570\u540d\u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306b\u3001\u305d\u308c\u305e\u308c\u3092\u8868\u3059\u30af\u30e9\u30b9\u3092\u5c0e\u5165\u3057\u307e\u3059\u3002\n\u95a2\u6570\u306e\u65b9\u306f\u4eca\u5f8c\u306e\u62e1\u5f35\u3092\u8003\u3048\u3066\u3001\u62bd\u8c61\u30af\u30e9\u30b9\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n`invoke()`\u30e1\u30bd\u30c3\u30c9\u3067\u5b9f\u969b\u306b\u95a2\u6570\u304c\u884c\u3046\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public static class Variable {\n        public String name;\n        public Integer value;\n\n        @Override\n        public String toString() {\n            return name + \" \" + value;\n        }\n    }\n\n    public static abstract class Func {\n        public String name;\n\n        abstract public Object invoke(Object arg) throws Exception;\n    }\n\n    public static class Println extends Func {\n        public Println() {\n            name = \"println\";\n        }\n\n        @Override\n        public Object invoke(Object arg) throws Exception {\n            System.out.println(arg);\n            return null;\n        }\n    }\n```\n\n\u521d\u671f\u5316\u90e8\u5206\u306e\u5909\u66f4\u3067\u3059\u3002\n\u95a2\u6570\u306b\u5bfe\u5fdc\u3059\u308b\u306e\u306b\u3001\u95a2\u6570\u540d\u3068\u305d\u306e\u5024\u3092\u4fdd\u6301\u3059\u308bMap\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\u305d\u3053\u3078`println()`\u306e\u5b9f\u4f53\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\npublic class Interpreter {\n\n    public Map<String, Func> functions;\n    public Map<String, Variable> variables;\n    List<Token> body;\n\n    public Interpreter init(List<Token> body) {\n        functions = new HashMap<>();\n        Func f = new Println();\n        functions.put(f.name, f);\n        variables = new HashMap<>();\n        this.body = body;\n        return this;\n    }\n```\n\n\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u3088\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u3092\u51e6\u7406\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u5206\u3051\u308b\u90e8\u5206\u306e\u5909\u66f4\u3067\u3059\u3002\n\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092`<-- Add`\u304c\u3042\u308b\u7b87\u6240\u3078\u52a0\u3048\u307e\u3057\u305f\u3002\nident\u3078\u306e\u5909\u66f4\u3092`<-- Update`\u304c\u3042\u308b\u7b87\u6240\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public Object expression(Token expr) throws Exception {\n        if (expr.kind.equals(\"digit\")) {\n            return digit(expr);\n        } else if (expr.kind.equals(\"ident\")) { // <-- Update\n            return ident(expr);\n        } else if (expr.kind.equals(\"paren\")) { // <-- Add\n            return invoke(expr);\n        } else if (expr.kind.equals(\"sign\") && expr.value.equals(\"=\")) {\n            return assign(expr);\n        } else if (expr.kind.equals(\"sign\")) {\n            return calc(expr);\n        } else {\n            throw new Exception(\"Expression error\");\n        }\n    }\n```\n\n`var()`\u3092`ident()`\u3078\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u8b58\u5225\u5b50\u304c\u95a2\u6570\u540d\u306a\u3089\u95a2\u6570\u3078\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u5909\u6570\u3078\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public Object ident(Token token) {\n        String name = token.value;\n        if (functions.containsKey(name)) {\n            return functions.get(name);\n        }\n        if (variables.containsKey(name)) {\n            return variables.get(name);\n        } else {\n            Variable v = new Variable();\n            v.name = name;\n            v.value = 0;\n            variables.put(name, v);\n            return v;\n        }\n    }\n```\n\n\u6b21\u306e\u30e1\u30c3\u30c9\u3067\u306f\u5909\u6570\u540d\u3092\u8868\u3059\u305f\u3081\u306b\u5c0e\u5165\u3057\u305fVariable\u30af\u30e9\u30b9\u3078\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public Variable assign(Token expr) throws Exception {\n        Variable variable = variable(expression(expr.left));\n        Integer value = value(expression(expr.right));\n        variable.value = value;\n        variables.put(variable.name, variable);\n        return variable;\n    }\n\n    public Variable variable(Object value) throws Exception {\n        if (value instanceof Variable) {\n            return (Variable) value;\n        } else {\n            throw new Exception(\"left value error\");\n        }\n    }\n\n    public Integer value(Object value) throws Exception {\n        if (value instanceof Integer) {\n            return (Integer) value;\n        } else if (value instanceof Variable) {\n            Variable v = (Variable) value;\n            return v.value;\n        }\n        throw new Exception(\"right value error\");\n    }\n```\n\n`invoke()`\u306f\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\u3067\u3059\u3002\n`func()`\u306f`invoke()`\u306e\u51e6\u7406\u3067\u3001`expr.left`\u306e\u7d50\u679c\u304c\u95a2\u6570\u540d\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u304b\u3081\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    private Object invoke(Token expr) throws Exception {\n        Func f = func(expression(expr.left));\n        Integer value = value(expression(expr.right));\n        return f.invoke(value);\n    }\n\n    public Func func(Object value) throws Exception {\n        if (value instanceof Func) {\n            return (Func) value;\n        } else {\n            throw new Exception(\"Not a function\");\n        }\n    }\n```\n\n\u4ee5\u4e0a\u306e\u5b9f\u88c5\u3092\u4f7f\u3063\u3066\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\n\n```JS\na = 3 + 4 * 5\nprintln(a)\n```\n\n\u3092\u8a08\u7b97\u3057\u3001\u5909\u6570\u3078\u4ee3\u5165\u3055\u308c\u305f\u5024\u3092\u6a19\u6e96\u51fa\u529b\u3078\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public static void main(String[] args) throws Exception {\n        String text = \"a = 3 + 4 * 5\";\n        text += \"println(a)\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        new Interpreter().init(blk).run();\n        // --> 23\n    }\n}\n```\n\n\u5b9f\u88c5\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\u3042\u308a\u304c\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n# \u304a\u308f\u308a\u306b\n\n\u30bd\u30fc\u30b9\u306e\u5168\u6587\u306f\u3053\u3061\u3089\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n**Calc**\nhttps://github.com/quwahara/Calc/tree/article-4-interpreter/Calc/src/main/java\n\n\u7d9a\u304d\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\n**\u512a\u5148\u9806\u4f4d\u4ed8\u3051\u306e\u62ec\u5f27\u306b\u5bfe\u5fdc\u3059\u308b**\nhttp://qiita.com/quwahara/items/b76c6e438aeb32450391\n"}