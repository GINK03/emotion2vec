{"context": "iOS9\u3067\u554f\u984c\u306b\u306a\u308a\u305d\u3046\u306aATS\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\u3054\u6307\u6458\u4e8b\u9805\u3042\u308c\u3070\u662f\u975e\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\u7279\u306bAFNetworking\u307e\u308f\u308a\u30fb\u30fb\u3002\nAFNetwotking\u90e8\u5206\u306f\u4e0b\u306b\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u3001iOS8\u5411\u3051\u306e\u30d3\u30eb\u30c9\u3067iOS9\u7aef\u672b\u3067\u3082\u767a\u751f\u3057\u305f\u306e\u3067\u8981\u6ce8\u610f\u3067\u3059\u3002\n2015/09/21\u8ffd\u8a18\niOS9GM\u4ee5\u964d\u306f\uff08\u3082\u3046release\u3055\u308c\u3061\u3083\u3044\u307e\u3057\u305f\u304c\u30fb\u30fb\uff09AFNetworking\u3067\u306e\u8a3c\u660e\u66f8\u5224\u5b9a\u304ciOS8\u3068\u304a\u306a\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3002\u3002\n2016/07/27\u8ffd\u8a18\ntoshi0383\u3055\u3093\n\u4fee\u6b63\u4f9d\u983c\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n1\u5e74\u9593\u9593\u9055\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u304c\u4ed8\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\u4fee\u6b63\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\nApp Transport Security\n\nApp Transport Security (ATS) enforces best practices in the secure connections between an app and its back end. ATS prevents accidental disclosure, provides secure default behavior, and is easy to adopt; it is also on by default in iOS 9 and OS X v10.11. You should adopt ATS as soon as possible, regardless of whether you\u2019re creating a new app or updating an existing one.\nIf you\u2019re developing a new app, you should use HTTPS exclusively. If you have an existing app, you should use HTTPS as much as you can right now, and create a plan for migrating the rest of your app as soon as possible. In addition, your communication through higher-level APIs needs to be encrypted using TLS version 1.2 with forward secrecy. If you try to make a connection that doesn't follow this requirement, an error is thrown. If your app needs to make a request to an insecure domain, you have to specify this domain in your app's Info.plist file.\n\n\n\u8981\u7d04\u3059\u308b\u3068\n\niOS9\u306e\u65b0\u6a5f\u80fd\nApple\u306f\u4eca\u5f8cHTTPS\u901a\u4fe1\u3092\u63a8\u5968\u3057\u3066\u3044\u304f\n\u6a5f\u80fd\u52d5\u4f5c\u306fTLSv1.2\u4ee5\u4e0a\nHTTP\u306a\u3069\u5b89\u5168\u3067\u306a\u3044\u30c9\u30e1\u30a4\u30f3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u3059\u308b\u5834\u5408\u306finfo.plist\u306b\u30c9\u30e1\u30a4\u30f3\u6307\u5b9a\u3059\u308b\u3053\u3068\n\n\nATS\u8a2d\u5b9a\u306e\u65b9\u6cd5\n\nATS\u3092\u7121\u52b9\u306b\u3059\u308b(Apple\u306f\u975e\u63a8\u5968)\n\u30c9\u30e1\u30a4\u30f3\u3092\u6307\u5b9a\u3057\u3066ATS\u3092\u7121\u52b9\u306b\u3059\u308b(\u63a8\u5968\u3067\u306f\u306a\u3044\u304c\u3001\u66ab\u5b9a\u5bfe\u5fdc\u3068\u3057\u3066\u306f\u3053\u3061\u3089\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b)\n\n\nATS\u8a2d\u5b9a\u306e\u9069\u7528\u7bc4\u56f2\n\nNSURLRequest\nNSURLConnection\nNSURLSession\nUIWebView\nWKWebView\nCFNetwork\n\n\nATS\u8a2d\u5b9a\u306e\u8a18\u8ff0(info.plist)\n\nATS\u3092\u7121\u52b9\u306b\u3059\u308b(Apple\u306f\u975e\u63a8\u5968)\n\n     <key>NSAppTransportSecurity</key>\n     <dict>\n         <key>NSAllowsArbitraryLoads</key>\n         <true/>\n     </dict>\n\n\n\n\n\u30c9\u30e1\u30a4\u30f3\u3092\u6307\u5b9a\u3057\u3066ATS\u3092\u7121\u52b9\u306b\u3059\u308b(\u63a8\u5968\u3067\u306f\u306a\u3044\u304c\u3001\u66ab\u5b9a\u5bfe\u5fdc\u3068\u3057\u3066\u306f\u3053\u3061\u3089\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b)\n\n     <key>NSAppTransportSecurity</key>\n     <dict>\n         <key>NSExceptionDomains</key>\n         <dict>\n             <key>xxx.co.jp</key>\n             <dict>\n                 <key>NSIncludesSubdomains</key>\n                 <true/>\n                 <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>\n                 <true/>\n                 <key>NSTemporaryExceptionRequiresForwardSecrecy</key>\n                 <false/>\n             </dict>\n         </dict>\n     </dict>\n\n\n\nNSTemporaryExceptionAllowsInsecureHTTPLoads\nNSTemporaryExceptionAllowsInsecureHTTPLoads\u81ea\u4f53\u304c\u3069\u306e\u3088\u3046\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a2d\u5b9a\u306a\u306e\u304b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u898b\u5f53\u305f\u3089\u306a\u3044\u3067\u3059\u3002\n Mac Developer Library \u2014 Prerelease\u306eApp Transport Security Technote\u306b\u3082\u8a18\u8f09\u304c\u306a\u304f\u3001\u60c5\u5831\u304c\u306a\u3044\u3067\u3059\u3002\nhttps://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/index.html\n \u305f\u3060\u3057\u4f3c\u305f\u3088\u3046\u306aNSExceptionAllowsInsecureHTTPLoads\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\n\nA Bool for overriding the requirement for all connections to use HTTPS. This allows accessing domains with no certificate, or with an error for a self-signed, expired, or hostname mismatch certificate.\n  NO is the default value.\n\n\nNSTemporaryExceptionRequiresForwardSecrecy\nNSTemporaryExceptionRequiresForwardSecrecy\u81ea\u4f53\u304c\u3069\u306e\u3088\u3046\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a2d\u5b9a\u306a\u306e\u304b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u898b\u5f53\u305f\u3089\u306a\u3044\u3067\u3059\u3002\n Mac Developer Library \u2014 Prerelease\u306eApp Transport Security Technote\u306b\u3082\u8a18\u8f09\u304c\u306a\u304f\u3001\u60c5\u5831\u304c\u306a\u3044\u3067\u3059\u3002\nhttps://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/index.html\n \u305f\u3060\u3057\u4f3c\u305f\u3088\u3046\u306aNSExceptionRequiresForwardSecrecy\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\n\nA Bool for overriding the requirement for the domain to use ciphers supporting forward secrecy.\n  YES is the default value and limits the ciphers to those show in Default Behavior above.\n  Setting the value to NO adds the following the list of accepted ciphers:\n  TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n  TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n  TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\n  TLS_DHE_RSA_WITH_AES_256_CBC_SHA\n  TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\n  TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n  TLS_RSA_WITH_AES_256_GCM_SHA384\n  TLS_RSA_WITH_AES_128_GCM_SHA256\n  TLS_RSA_WITH_AES_256_CBC_SHA256\n  TLS_RSA_WITH_AES_256_CBC_SHA\n  TLS_RSA_WITH_AES_128_CBC_SHA256\n  TLS_RSA_WITH_AES_128_CBC_SHA\n\n\nATS\u8a2d\u5b9a\u306e\u8a18\u8ff0(info.plist\u4ee5\u5916)\nNSTemporaryExceptionRequiresForwardSecrecy\u3092false\u306b\u3059\u308b\u3053\u3068\u3067NSURLConnection\u306e\u4ee5\u4e0b\u306edelegate\u30e1\u30bd\u30c3\u30c9\u304c\u8d70\u308a\u307e\u3059\n - (void)connection:(NSURLConnection *)connection\n willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge\n\nwillSendRequestForAuthenticationChallenge\u306fBasic/SSL\u8a8d\u8a3c\u306e\u969b\u306b\u8d70\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n NSTemporaryExceptionRequiresForwardSecrecy\u306efaulse\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u8d70\u308a\u307e\u305b\u3093\u3002\n \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u8a8d\u8a3c\u51e6\u7406\u3092\u304a\u3053\u306a\u3048\u3070\u51e6\u7406\u306f\u901a\u308a\u307e\u3059\u3002\n \u203b\u305f\u3060\u3057NSTemporaryExceptionAllowsInsecureHTTPLoads\u3092true\u306b\u3057\u3066\u3044\u306a\u3044\u3068\u8a8d\u8a3c\u51e6\u7406\u306fOK\u3067\u3082connection\u306eerror\u3078\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3055\u308c\u308b\n\nATS\u306e\u5bfe\u5fdc\u65b9\u6cd5\n\u6839\u672c\u7684\u306a\u3068\u3053\u308d\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u4fee\u6b63\u3067\u3059\u3002\n \u672a\u691c\u8a3c\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u6b21\u306e\u3088\u3046\u306b\u5bfe\u5fdc\u3059\u308c\u3070ATS\u306e\u554f\u984c\u306f\u767a\u751f\u3057\u306a\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n\u30b5\u30fc\u30d0\u30fc\u74b0\u5883\u3092\u6700\u65b0\u306b\u3059\u308b(TLS1.2\u5bfe\u5fdc\u3084Apple\u6307\u5b9a\u306e\u6697\u53f7\u5316\u65b9\u5f0f\u306a\u3069)\nhttps\u3057\u304b\u4f7f\u308f\u306a\u3044\n\n\nAFNetworking\n\u4ee5\u4e0b\u306fiOS9GM\u4ee5\u964d\u554f\u984c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u30fb\u30fbbeta5\u307e\u3067\u306e\u554f\u984c\u3060\u3063\u305f\u3088\u3046\u3067\u3059\u3002\n\u3000ATS\u3068\u306f\u5225\u3067\u3059\u304c\u3001iOS9\u3067\u306fSSL\u8a3c\u660e\u66f8\u30c1\u30a7\u30c3\u30af\u306e\u8fd4\u5374\u5024\u304ciOS8\u3068\u9055\u3046\u3068\u3044\u3046\u554f\u984c\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u554f\u984c\u306fiOS8\u30d3\u30eb\u30c9(SDK8)\u306e\u30a2\u30d7\u30ea\u3067iOS9\u7aef\u672b\u3067\u8d77\u52d5\u3057\u305f\u5834\u5408\u306b\u3082\u767a\u751f\u3057\u307e\u3059\u306e\u3067\u8981\u6ce8\u610f\u3067\u3059\u3002\n\u3000\u554f\u984c\u3068\u306a\u3063\u305f\u30a2\u30d7\u30ea\u306fAFNetworking(\u4ee5\u4e0bAF)\u3092\u5229\u7528\u3057\u3066\u304a\u308a\u3001willSendRequestForAuthenticationChallenge\u3082AF\u5185\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3000\u305d\u306e\u4e2d\u3067willSendRequestForAuthenticationChallenge\u306e\u8fd4\u5374\u5024\u3067\u3042\u308bNSURLAuthenticationChallenge(challenge)\u306e\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\nchallenge.protectionSpace.serverTrust \n\u4e0a\u8a18\u306e\u5024\u3092\u89e3\u6790\u3057\u3001\u3053\u306e\u5024\u304c\u4eca\u307e\u3067\u3068\u7570\u306a\u308b\u7d50\u679c\u304c\u8fd4\u3063\u3066\u304d\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\nSDK8\u30d3\u30eb\u30c9\u306eiOS8\u307e\u3067(\u4eca\u307e\u3067) kSecTrustResultUnspecified\nSDK8\u30d3\u30eb\u30c9\u306eiOS9 or SDK9\u30d3\u30eb\u30c9\u306eiOS9 kSecTrustResultRecoverableTrustFailure\n\nkSecTrustResultUnspecified \nkSecTrustResultUnspecified Indicates the evaluation succeeded and the certificate is implicitly trusted, but user intent was not explicitly specified.  This value may be returned by the SecTrustEvaluate function or stored as part of the user trust settings.\nkSecTrustResultRecoverableTrustFailure \nkSecTrustResultRecoverableTrustFailure Indicates a trust policy failure which can be overridden by the user.  This value may be returned by the SecTrustEvaluate function but not stored as part of the user trust settings.\niOS9\u3068\u306a\u308a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u304c\u53b3\u3057\u304f\u306a\u3063\u305f\u3053\u3068\u3067\u8fd4\u5374\u5024\u304c\u5909\u5316\u3057\u305f\u3082\u306e\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n \u305d\u3057\u3066AF\u304c\u4e0a\u8a18\u8fd4\u5374\u5024\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\nkSecTrustResultUnspecified\u306e\u5834\u5408\n NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n [[challenge sender] useCredential:credential forAuthenticationChallenge:challenge];\n\nkSecTrustResultRecoverableTrustFailure\u306e\u5834\u5408\n [[challenge sender] cancelAuthenticationChallenge:challenge];\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u51e6\u7406\u306e\u5207\u308a\u5206\u3051\u3092\u884c\u3063\u3066YES\u306f\u5229\u7528\u3001NO\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u3068\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u3088\u308a\u901a\u4fe1\u51e6\u7406\u304c\u5931\u6557\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u72b6\u6cc1\u304c\u767a\u751f\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u30a2\u30d7\u30ea\u5074\u3067\u306e\u66ab\u5b9a\u5bfe\u5fdc\u65b9\u6cd5\ninfo.plist\u306b\u672c\u6587\u8a18\u8f09\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3001\n \u307e\u305fAF\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306fAF\u5185\u306eAFURLConnectionOperation\u30af\u30e9\u30b9\u3092\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u901a\u4fe1\u3067\u304d\u307e\u3059\u304c\u3001\u305d\u3082\u305d\u3082\u3053\u306e\u4fee\u6b63\u3067\u306fiOS\u304c\u6c42\u3081\u308b\u30e6\u30fc\u30b6\u30fc\u554f\u3044\u5408\u308f\u305b\u306b\u3088\u308b\u901a\u4fe1\u306e\u8a31\u53ef\u3092\u7121\u8996\u3059\u308b\u3088\u3046\u306a\u5f62\u306a\u306e\u3067\u5341\u5206\u306b\u691c\u8a3c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u4fee\u6b63\u306f\u3068\u308a\u3042\u3048\u305a\u901a\u4fe1\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002OS\u30ec\u30d9\u30eb\u304b\u3089\u306e\u8fd4\u5374\u5024\u3068\u3057\u3066\u306f\u30e6\u30fc\u30b6\u30fc\u554f\u3044\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\u3082\u306e\u306a\u306e\u3067\u3001\u5b9f\u969b\u306b\u3069\u3046\u3059\u308b\u304b\u306f\u691c\u8a0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6c7a\u3057\u3066\u30b3\u30d4\u30da\u3067\u5b9f\u88c5\u3057\u3066\u5be9\u67fb\u901a\u3057\u305f\u308a\u306f\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff01\n\u4fee\u6b63\u524d\n - (void)connection:(NSURLConnection *)connection\n willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge\n {\n     if (self.authenticationChallenge) {\n         self.authenticationChallenge(connection, challenge);\n         return;\n     }\n\n     if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {\n\n\n         if ([self.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) {\n             NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n             [[challenge sender] useCredential:credential forAuthenticationChallenge:challenge];\n         } else {\n             [[challenge sender] cancelAuthenticationChallenge:challenge];\n         }\n     } else {\n         if ([challenge previousFailureCount] == 0) {\n             if (self.credential) {\n                 [[challenge sender] useCredential:self.credential forAuthenticationChallenge:challenge];\n             } else {\n                 [[challenge sender] continueWithoutCredentialForAuthenticationChallenge:challenge];\n             }\n         } else {\n             [[challenge sender] continueWithoutCredentialForAuthenticationChallenge:challenge];\n         }\n     }\n }\n\n\u4fee\u6b63\u5f8c\n - (void)connection:(NSURLConnection *)connection\n willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge\n {\n     if (self.authenticationChallenge) {\n         self.authenticationChallenge(connection, challenge);\n         return;\n     }\n\n     if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {\n\n         NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n         [[challenge sender] useCredential:credential forAuthenticationChallenge:challenge];\n\n //        if ([self.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) {\n //            NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n //            [[challenge sender] useCredential:credential forAuthenticationChallenge:challenge];\n //        } else {\n //            [[challenge sender] cancelAuthenticationChallenge:challenge];\n //        }\n     } else {\n         if ([challenge previousFailureCount] == 0) {\n             if (self.credential) {\n                 [[challenge sender] useCredential:self.credential forAuthenticationChallenge:challenge];\n             } else {\n                 [[challenge sender] continueWithoutCredentialForAuthenticationChallenge:challenge];\n             }\n         } else {\n             [[challenge sender] continueWithoutCredentialForAuthenticationChallenge:challenge];\n         }\n     }\n }\n\n\n\u53c2\u8003\u60c5\u5831URL\niOS9\nhttps://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13\nApp Transport Security Technote\nhttps://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/index.html\nwillSendRequestForAuthenticationChallenge\nhttps://developer.apple.com/library/mac/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/\nNSURLAuthenticationChallengeSender\nhttps://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Protocols/NSURLAuthenticationChallengeSender_Protocol/\n\n\u8b1d\u8f9e\n\u3053\u306e\u8a18\u4e8b\u3092\u63d0\u4f9b\u3044\u305f\u3060\u3044\u305f\u65b9\u306b\u611f\u8b1d\u3044\u305f\u3057\u307e\u3059\u3002\n\n\u4fee\u6b63\ninfo.plist(xml)\u90e8\u5206\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\nuasi\u3055\u3093\u4fee\u6b63\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\niOS9\u3067\u554f\u984c\u306b\u306a\u308a\u305d\u3046\u306aATS\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n~~\u3054\u6307\u6458\u4e8b\u9805\u3042\u308c\u3070\u662f\u975e\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u305f\u3060\u304d\u305f\u3044\u3067\u3059\u3002\u7279\u306bAFNetworking\u307e\u308f\u308a\u30fb\u30fb\u3002~~\n\n~~AFNetwotking\u90e8\u5206\u306f\u4e0b\u306b\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u304c\u3001iOS8\u5411\u3051\u306e\u30d3\u30eb\u30c9\u3067iOS9\u7aef\u672b\u3067\u3082\u767a\u751f\u3057\u305f\u306e\u3067\u8981\u6ce8\u610f\u3067\u3059\u3002~~\n\n2015/09/21\u8ffd\u8a18\niOS9GM\u4ee5\u964d\u306f\uff08\u3082\u3046release\u3055\u308c\u3061\u3083\u3044\u307e\u3057\u305f\u304c\u30fb\u30fb\uff09AFNetworking\u3067\u306e\u8a3c\u660e\u66f8\u5224\u5b9a\u304ciOS8\u3068\u304a\u306a\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3002\u3002\n\n2016/07/27\u8ffd\u8a18\ntoshi0383\u3055\u3093\n\u4fee\u6b63\u4f9d\u983c\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n1\u5e74\u9593\u9593\u9055\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u304c\u4ed8\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\u4fee\u6b63\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\n# App Transport Security\n\n>   App Transport Security (ATS) enforces best practices in the secure connections between an app and its back end. ATS prevents accidental disclosure, provides secure default behavior, and is easy to adopt; it is also on by default in iOS 9 and OS X v10.11. You should adopt ATS as soon as possible, regardless of whether you\u2019re creating a new app or updating an existing one.\n>  \n>   If you\u2019re developing a new app, you should use HTTPS exclusively. If you have an existing app, you should use HTTPS as much as you can right now, and create a plan for migrating the rest of your app as soon as possible. In addition, your communication through higher-level APIs needs to be encrypted using TLS version 1.2 with forward secrecy. If you try to make a connection that doesn't follow this requirement, an error is thrown. If your app needs to make a request to an insecure domain, you have to specify this domain in your app's Info.plist file.\n\n## \u8981\u7d04\u3059\u308b\u3068\n\n* iOS9\u306e\u65b0\u6a5f\u80fd\n* Apple\u306f\u4eca\u5f8cHTTPS\u901a\u4fe1\u3092\u63a8\u5968\u3057\u3066\u3044\u304f\n* \u6a5f\u80fd\u52d5\u4f5c\u306fTLSv1.2\u4ee5\u4e0a\n* HTTP\u306a\u3069\u5b89\u5168\u3067\u306a\u3044\u30c9\u30e1\u30a4\u30f3\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u3059\u308b\u5834\u5408\u306finfo.plist\u306b\u30c9\u30e1\u30a4\u30f3\u6307\u5b9a\u3059\u308b\u3053\u3068\n \n## ATS\u8a2d\u5b9a\u306e\u65b9\u6cd5\n\n* ATS\u3092\u7121\u52b9\u306b\u3059\u308b(Apple\u306f\u975e\u63a8\u5968)\n* \u30c9\u30e1\u30a4\u30f3\u3092\u6307\u5b9a\u3057\u3066ATS\u3092\u7121\u52b9\u306b\u3059\u308b(\u63a8\u5968\u3067\u306f\u306a\u3044\u304c\u3001\u66ab\u5b9a\u5bfe\u5fdc\u3068\u3057\u3066\u306f\u3053\u3061\u3089\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b)\n \n## ATS\u8a2d\u5b9a\u306e\u9069\u7528\u7bc4\u56f2\n\n* NSURLRequest\n* NSURLConnection\n* NSURLSession\n* UIWebView\n* WKWebView\n* CFNetwork\n \n## ATS\u8a2d\u5b9a\u306e\u8a18\u8ff0(info.plist)\n\n* ATS\u3092\u7121\u52b9\u306b\u3059\u308b(Apple\u306f\u975e\u63a8\u5968)\n \n \n ```xml\n     <key>NSAppTransportSecurity</key>\n     <dict>\n         <key>NSAllowsArbitraryLoads</key>\n         <true/>\n     </dict>\n \n \n ```\n \n \n \n * \u30c9\u30e1\u30a4\u30f3\u3092\u6307\u5b9a\u3057\u3066ATS\u3092\u7121\u52b9\u306b\u3059\u308b(\u63a8\u5968\u3067\u306f\u306a\u3044\u304c\u3001\u66ab\u5b9a\u5bfe\u5fdc\u3068\u3057\u3066\u306f\u3053\u3061\u3089\u3092\u63a8\u5968\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b)\n \n \n ```xml\n     <key>NSAppTransportSecurity</key>\n     <dict>\n         <key>NSExceptionDomains</key>\n         <dict>\n             <key>xxx.co.jp</key>\n             <dict>\n                 <key>NSIncludesSubdomains</key>\n                 <true/>\n                 <key>NSTemporaryExceptionAllowsInsecureHTTPLoads</key>\n                 <true/>\n                 <key>NSTemporaryExceptionRequiresForwardSecrecy</key>\n                 <false/>\n             </dict>\n         </dict>\n     </dict>\n \n ```\n \n \n \n### NSTemporaryExceptionAllowsInsecureHTTPLoads\n\n NSTemporaryExceptionAllowsInsecureHTTPLoads\u81ea\u4f53\u304c\u3069\u306e\u3088\u3046\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a2d\u5b9a\u306a\u306e\u304b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u898b\u5f53\u305f\u3089\u306a\u3044\u3067\u3059\u3002\n Mac Developer Library \u2014 Prerelease\u306eApp Transport Security Technote\u306b\u3082\u8a18\u8f09\u304c\u306a\u304f\u3001\u60c5\u5831\u304c\u306a\u3044\u3067\u3059\u3002\n https://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/index.html\n \u305f\u3060\u3057\u4f3c\u305f\u3088\u3046\u306aNSExceptionAllowsInsecureHTTPLoads\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\n \n \n\n>   A Bool for overriding the requirement for all connections to use HTTPS. This allows accessing domains with no certificate, or with an error for a self-signed, expired, or hostname mismatch certificate.\n>   NO is the default value.\n \n \n### NSTemporaryExceptionRequiresForwardSecrecy\n\n NSTemporaryExceptionRequiresForwardSecrecy\u81ea\u4f53\u304c\u3069\u306e\u3088\u3046\u306a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u8a2d\u5b9a\u306a\u306e\u304b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u898b\u5f53\u305f\u3089\u306a\u3044\u3067\u3059\u3002\n Mac Developer Library \u2014 Prerelease\u306eApp Transport Security Technote\u306b\u3082\u8a18\u8f09\u304c\u306a\u304f\u3001\u60c5\u5831\u304c\u306a\u3044\u3067\u3059\u3002\n https://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/index.html\n \u305f\u3060\u3057\u4f3c\u305f\u3088\u3046\u306aNSExceptionRequiresForwardSecrecy\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\n \n\n\n>   A Bool for overriding the requirement for the domain to use ciphers supporting forward secrecy.\n>   YES is the default value and limits the ciphers to those show in Default Behavior above.\n>   Setting the value to NO adds the following the list of accepted ciphers:\n>   TLS_DHE_RSA_WITH_AES_256_GCM_SHA384\n>   TLS_DHE_RSA_WITH_AES_128_GCM_SHA256\n>   TLS_DHE_RSA_WITH_AES_256_CBC_SHA256\n>   TLS_DHE_RSA_WITH_AES_256_CBC_SHA\n>   TLS_DHE_RSA_WITH_AES_128_CBC_SHA256\n>   TLS_DHE_RSA_WITH_AES_128_CBC_SHA\n>   TLS_RSA_WITH_AES_256_GCM_SHA384\n>   TLS_RSA_WITH_AES_128_GCM_SHA256\n>   TLS_RSA_WITH_AES_256_CBC_SHA256\n>   TLS_RSA_WITH_AES_256_CBC_SHA\n>   TLS_RSA_WITH_AES_128_CBC_SHA256\n>   TLS_RSA_WITH_AES_128_CBC_SHA\n\n\n \n## ATS\u8a2d\u5b9a\u306e\u8a18\u8ff0(info.plist\u4ee5\u5916)\n\n NSTemporaryExceptionRequiresForwardSecrecy\u3092false\u306b\u3059\u308b\u3053\u3068\u3067NSURLConnection\u306e\u4ee5\u4e0b\u306edelegate\u30e1\u30bd\u30c3\u30c9\u304c\u8d70\u308a\u307e\u3059\n \n     - (void)connection:(NSURLConnection *)connection\n     willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge\n \n willSendRequestForAuthenticationChallenge\u306fBasic/SSL\u8a8d\u8a3c\u306e\u969b\u306b\u8d70\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n NSTemporaryExceptionRequiresForwardSecrecy\u306efaulse\u306b\u8a2d\u5b9a\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u8d70\u308a\u307e\u305b\u3093\u3002\n \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067\u8a8d\u8a3c\u51e6\u7406\u3092\u304a\u3053\u306a\u3048\u3070\u51e6\u7406\u306f\u901a\u308a\u307e\u3059\u3002\n \u203b\u305f\u3060\u3057NSTemporaryExceptionAllowsInsecureHTTPLoads\u3092true\u306b\u3057\u3066\u3044\u306a\u3044\u3068\u8a8d\u8a3c\u51e6\u7406\u306fOK\u3067\u3082connection\u306eerror\u3078\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3055\u308c\u308b\n\n## ATS\u306e\u5bfe\u5fdc\u65b9\u6cd5\n\n \u6839\u672c\u7684\u306a\u3068\u3053\u308d\u306f\u3001\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u4fee\u6b63\u3067\u3059\u3002\n \u672a\u691c\u8a3c\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u6b21\u306e\u3088\u3046\u306b\u5bfe\u5fdc\u3059\u308c\u3070ATS\u306e\u554f\u984c\u306f\u767a\u751f\u3057\u306a\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n \n * \u30b5\u30fc\u30d0\u30fc\u74b0\u5883\u3092\u6700\u65b0\u306b\u3059\u308b(TLS1.2\u5bfe\u5fdc\u3084Apple\u6307\u5b9a\u306e\u6697\u53f7\u5316\u65b9\u5f0f\u306a\u3069)\n * https\u3057\u304b\u4f7f\u308f\u306a\u3044\n \n# AFNetworking\n\n\u4ee5\u4e0b\u306fiOS9GM\u4ee5\u964d\u554f\u984c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u30fb\u30fbbeta5\u307e\u3067\u306e\u554f\u984c\u3060\u3063\u305f\u3088\u3046\u3067\u3059\u3002\n\n\u3000ATS\u3068\u306f\u5225\u3067\u3059\u304c\u3001iOS9\u3067\u306fSSL\u8a3c\u660e\u66f8\u30c1\u30a7\u30c3\u30af\u306e\u8fd4\u5374\u5024\u304ciOS8\u3068\u9055\u3046\u3068\u3044\u3046\u554f\u984c\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\n **\u3053\u306e\u554f\u984c\u306fiOS8\u30d3\u30eb\u30c9(SDK8)\u306e\u30a2\u30d7\u30ea\u3067iOS9\u7aef\u672b\u3067\u8d77\u52d5\u3057\u305f\u5834\u5408\u306b\u3082\u767a\u751f\u3057\u307e\u3059\u306e\u3067\u8981\u6ce8\u610f\u3067\u3059\u3002**\n\u3000\u554f\u984c\u3068\u306a\u3063\u305f\u30a2\u30d7\u30ea\u306fAFNetworking(\u4ee5\u4e0bAF)\u3092\u5229\u7528\u3057\u3066\u304a\u308a\u3001willSendRequestForAuthenticationChallenge\u3082AF\u5185\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3000\u305d\u306e\u4e2d\u3067willSendRequestForAuthenticationChallenge\u306e\u8fd4\u5374\u5024\u3067\u3042\u308bNSURLAuthenticationChallenge(challenge)\u306e\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u3002\n \n  **challenge.protectionSpace.serverTrust** \n \n \u4e0a\u8a18\u306e\u5024\u3092\u89e3\u6790\u3057\u3001\u3053\u306e\u5024\u304c\u4eca\u307e\u3067\u3068\u7570\u306a\u308b\u7d50\u679c\u304c\u8fd4\u3063\u3066\u304d\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n \n * SDK8\u30d3\u30eb\u30c9\u306eiOS8\u307e\u3067(\u4eca\u307e\u3067) kSecTrustResultUnspecified\n * SDK8\u30d3\u30eb\u30c9\u306eiOS9 or SDK9\u30d3\u30eb\u30c9\u306eiOS9 kSecTrustResultRecoverableTrustFailure\n \n  **kSecTrustResultUnspecified** \n \n \n  kSecTrustResultUnspecified Indicates the evaluation succeeded and the certificate is implicitly trusted, but user intent was not explicitly specified.  This value may be returned by the SecTrustEvaluate function or stored as part of the user trust settings.\n \n \n \n \n  **kSecTrustResultRecoverableTrustFailure** \n \n \n  kSecTrustResultRecoverableTrustFailure Indicates a trust policy failure which can be overridden by the user.  This value may be returned by the SecTrustEvaluate function but not stored as part of the user trust settings.\n \n \n iOS9\u3068\u306a\u308a\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u304c\u53b3\u3057\u304f\u306a\u3063\u305f\u3053\u3068\u3067\u8fd4\u5374\u5024\u304c\u5909\u5316\u3057\u305f\u3082\u306e\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n \u305d\u3057\u3066AF\u304c\u4e0a\u8a18\u8fd4\u5374\u5024\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n \n kSecTrustResultUnspecified\u306e\u5834\u5408\n \n \n     NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n     [[challenge sender] useCredential:credential forAuthenticationChallenge:challenge];\n \n \n \n kSecTrustResultRecoverableTrustFailure\u306e\u5834\u5408\n \n \n     [[challenge sender] cancelAuthenticationChallenge:challenge];\n \n \n \u4e0a\u8a18\u306e\u3088\u3046\u306b\u51e6\u7406\u306e\u5207\u308a\u5206\u3051\u3092\u884c\u3063\u3066YES\u306f\u5229\u7528\u3001NO\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u3068\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u3088\u308a\u901a\u4fe1\u51e6\u7406\u304c\u5931\u6557\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u72b6\u6cc1\u304c\u767a\u751f\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n \n## \u30a2\u30d7\u30ea\u5074\u3067\u306e\u66ab\u5b9a\u5bfe\u5fdc\u65b9\u6cd5\n \n info.plist\u306b\u672c\u6587\u8a18\u8f09\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3001\n \u307e\u305fAF\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306fAF\u5185\u306eAFURLConnectionOperation\u30af\u30e9\u30b9\u3092\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u3067\u901a\u4fe1\u3067\u304d\u307e\u3059\u304c\u3001\u305d\u3082\u305d\u3082\u3053\u306e\u4fee\u6b63\u3067\u306fiOS\u304c\u6c42\u3081\u308b**\u30e6\u30fc\u30b6\u30fc\u554f\u3044\u5408\u308f\u305b\u306b\u3088\u308b\u901a\u4fe1\u306e\u8a31\u53ef**\u3092\u7121\u8996\u3059\u308b\u3088\u3046\u306a\u5f62\u306a\u306e\u3067\u5341\u5206\u306b\u691c\u8a3c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n**\u3053\u306e\u4fee\u6b63\u306f\u3068\u308a\u3042\u3048\u305a\u901a\u4fe1\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002OS\u30ec\u30d9\u30eb\u304b\u3089\u306e\u8fd4\u5374\u5024\u3068\u3057\u3066\u306f\u30e6\u30fc\u30b6\u30fc\u554f\u3044\u5408\u308f\u305b\u3092\u6c42\u3081\u308b\u3082\u306e\u306a\u306e\u3067\u3001\u5b9f\u969b\u306b\u3069\u3046\u3059\u308b\u304b\u306f\u691c\u8a0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6c7a\u3057\u3066\u30b3\u30d4\u30da\u3067\u5b9f\u88c5\u3057\u3066\u5be9\u67fb\u901a\u3057\u305f\u308a\u306f\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff01**\n \n \u4fee\u6b63\u524d\n \n \n     - (void)connection:(NSURLConnection *)connection\n     willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge\n     {\n         if (self.authenticationChallenge) {\n             self.authenticationChallenge(connection, challenge);\n             return;\n         }\n     \n         if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {\n     \n     \n             if ([self.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) {\n                 NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n                 [[challenge sender] useCredential:credential forAuthenticationChallenge:challenge];\n             } else {\n                 [[challenge sender] cancelAuthenticationChallenge:challenge];\n             }\n         } else {\n             if ([challenge previousFailureCount] == 0) {\n                 if (self.credential) {\n                     [[challenge sender] useCredential:self.credential forAuthenticationChallenge:challenge];\n                 } else {\n                     [[challenge sender] continueWithoutCredentialForAuthenticationChallenge:challenge];\n                 }\n             } else {\n                 [[challenge sender] continueWithoutCredentialForAuthenticationChallenge:challenge];\n             }\n         }\n     }\n \n \n \u4fee\u6b63\u5f8c\n \n \n \n     - (void)connection:(NSURLConnection *)connection\n     willSendRequestForAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge\n     {\n         if (self.authenticationChallenge) {\n             self.authenticationChallenge(connection, challenge);\n             return;\n         }\n     \n         if ([challenge.protectionSpace.authenticationMethod isEqualToString:NSURLAuthenticationMethodServerTrust]) {\n     \n             NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n             [[challenge sender] useCredential:credential forAuthenticationChallenge:challenge];\n     \n     //        if ([self.securityPolicy evaluateServerTrust:challenge.protectionSpace.serverTrust forDomain:challenge.protectionSpace.host]) {\n     //            NSURLCredential *credential = [NSURLCredential credentialForTrust:challenge.protectionSpace.serverTrust];\n     //            [[challenge sender] useCredential:credential forAuthenticationChallenge:challenge];\n     //        } else {\n     //            [[challenge sender] cancelAuthenticationChallenge:challenge];\n     //        }\n         } else {\n             if ([challenge previousFailureCount] == 0) {\n                 if (self.credential) {\n                     [[challenge sender] useCredential:self.credential forAuthenticationChallenge:challenge];\n                 } else {\n                     [[challenge sender] continueWithoutCredentialForAuthenticationChallenge:challenge];\n                 }\n             } else {\n                 [[challenge sender] continueWithoutCredentialForAuthenticationChallenge:challenge];\n             }\n         }\n     }\n \n \n# \u53c2\u8003\u60c5\u5831URL\n \n iOS9\n https://developer.apple.com/library/prerelease/ios/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-DontLinkElementID_13\n \n App Transport Security Technote\n https://developer.apple.com/library/prerelease/mac/technotes/App-Transport-Security-Technote/index.html\n \n willSendRequestForAuthenticationChallenge\n https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSURLConnectionDelegate_Protocol/\n \n NSURLAuthenticationChallengeSender\n https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Protocols/NSURLAuthenticationChallengeSender_Protocol/\n\n\n# \u8b1d\u8f9e\n\n\u3053\u306e\u8a18\u4e8b\u3092\u63d0\u4f9b\u3044\u305f\u3060\u3044\u305f\u65b9\u306b\u611f\u8b1d\u3044\u305f\u3057\u307e\u3059\u3002\n\n# \u4fee\u6b63\n\ninfo.plist(xml)\u90e8\u5206\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\nuasi\u3055\u3093\u4fee\u6b63\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n", "tags": ["iOS", "iOS9", "ATS", "XCode7"]}