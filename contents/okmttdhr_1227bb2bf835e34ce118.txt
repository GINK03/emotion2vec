{"context": " More than 1 year has passed since last update.\n\nknockout.js tutorial\nknockout.js tutorial\u3084\u308a\u307e\u3057\u305f\u3002http://learn.knockoutjs.com/#/?tutorial=collections \uff12\u500b\u3081\uff1f\u306e\u3001Working with Lists and Collections\u3002\u30e1\u30e2\u66f8\u304d\u3067\u3059\u3002\n\nHTML\n<h2>Your seat reservations</h2>\n\n<table>\n    <thead><tr>\n        <th>Passenger name</th><th>Meal</th><th>Surcharge</th><th></th>\n    </tr></thead>\n    <!-- Todo: Generate table body -->\n    <tbody data-bind=\"foreach: seats\">\n        <tr>\n            <td><input data-bind=\"value: name\" /></td>\n            <td>\n            <select data-bind=\"options: $root.availableMeals, value: meal, optionsText: 'mealName'\"></select></td>\n            <td data-bind=\"text: formattedPrice\"></td>\n            <td><a href=\"#\" data-bind=\"click: $root.removeSeat\">Remove</a></td>\n        </tr>   \n    </tbody>\n</table>\n\n<h3 data-bind=\"visible: totalSurcharge() > 0\">\n    Total surcharge: $<span data-bind=\"text: totalSurcharge().toFixed(2)\"></span>\n</h3>\n<h2>Your seat reservations (<span data-bind=\"text: seats().length\"></span>)</h2>\n\n<button data-bind=\"click: addSeat\">Reserve another seat</button>\n\n\nJS\n// Class to represent a row in the seat reservations grid\nfunction SeatReservation(name, initialMeal) {\n    var self = this;\n    self.name = name;\n    self.meal = ko.observable(initialMeal);\n\n    self.formattedPrice = ko.computed(function() {\n        var price = self.meal().price;\n        return price ? \"$\" + price.toFixed(2) : \"None\";        \n    });\n}\n\n// Overall viewmodel for this screen, along with initial state\nfunction ReservationsViewModel() {\n    var self = this;\n\n    self.addSeat = function() {\n        self.seats.push(new SeatReservation(\"\", self.availableMeals[0]));\n    }\n\n    self.removeSeat = function(seat) { self.seats.remove(seat) }   \n\n\n    // Non-editable catalog data - would come from the server\n    self.availableMeals = [\n        { mealName: \"Standard (sandwich)\", price: 0 },\n        { mealName: \"Premium (lobster)\", price: 34.95 },\n        { mealName: \"Ultimate (whole zebra)\", price: 290 }\n    ];    \n\n    // Editable data\n    self.seats = ko.observableArray([\n        new SeatReservation(\"Steve\", self.availableMeals[0]),\n        new SeatReservation(\"Bert\", self.availableMeals[0])\n    ]);\n\n    self.totalSurcharge = ko.computed(function() {\n       var total = 0;\n       for (var i = 0; i < self.seats().length; i++)\n           total += self.seats()[i].meal().price;\n       return total;\n    });\n\n}\n\nko.applyBindings(new ReservationsViewModel());\n\n\n\n# knockout.js tutorial\n\nknockout.js tutorial\u3084\u308a\u307e\u3057\u305f\u3002http://learn.knockoutjs.com/#/?tutorial=collections \uff12\u500b\u3081\uff1f\u306e\u3001Working with Lists and Collections\u3002\u30e1\u30e2\u66f8\u304d\u3067\u3059\u3002\n\n# HTML\n\n```\n<h2>Your seat reservations</h2>\n\n<table>\n    <thead><tr>\n        <th>Passenger name</th><th>Meal</th><th>Surcharge</th><th></th>\n    </tr></thead>\n    <!-- Todo: Generate table body -->\n    <tbody data-bind=\"foreach: seats\">\n        <tr>\n            <td><input data-bind=\"value: name\" /></td>\n            <td>\n            <select data-bind=\"options: $root.availableMeals, value: meal, optionsText: 'mealName'\"></select></td>\n            <td data-bind=\"text: formattedPrice\"></td>\n            <td><a href=\"#\" data-bind=\"click: $root.removeSeat\">Remove</a></td>\n        </tr>   \n    </tbody>\n</table>\n\n<h3 data-bind=\"visible: totalSurcharge() > 0\">\n    Total surcharge: $<span data-bind=\"text: totalSurcharge().toFixed(2)\"></span>\n</h3>\n<h2>Your seat reservations (<span data-bind=\"text: seats().length\"></span>)</h2>\n\n<button data-bind=\"click: addSeat\">Reserve another seat</button>\n```\n\n\n# JS\n\n```\n// Class to represent a row in the seat reservations grid\nfunction SeatReservation(name, initialMeal) {\n    var self = this;\n    self.name = name;\n    self.meal = ko.observable(initialMeal);\n    \n    self.formattedPrice = ko.computed(function() {\n        var price = self.meal().price;\n        return price ? \"$\" + price.toFixed(2) : \"None\";        \n    });\n}\n\n// Overall viewmodel for this screen, along with initial state\nfunction ReservationsViewModel() {\n    var self = this;\n    \n    self.addSeat = function() {\n        self.seats.push(new SeatReservation(\"\", self.availableMeals[0]));\n    }\n\n    self.removeSeat = function(seat) { self.seats.remove(seat) }   \n    \n\n    // Non-editable catalog data - would come from the server\n    self.availableMeals = [\n        { mealName: \"Standard (sandwich)\", price: 0 },\n        { mealName: \"Premium (lobster)\", price: 34.95 },\n        { mealName: \"Ultimate (whole zebra)\", price: 290 }\n    ];    \n\n    // Editable data\n    self.seats = ko.observableArray([\n        new SeatReservation(\"Steve\", self.availableMeals[0]),\n        new SeatReservation(\"Bert\", self.availableMeals[0])\n    ]);\n    \n    self.totalSurcharge = ko.computed(function() {\n       var total = 0;\n       for (var i = 0; i < self.seats().length; i++)\n           total += self.seats()[i].meal().price;\n       return total;\n    });\n\n}\n\nko.applyBindings(new ReservationsViewModel());\n```\n", "tags": ["knockoutjs", "JavaScript"]}