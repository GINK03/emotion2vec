{"context": "\n\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n\n\n\u95a2\u9023\u3000http://qiita.com/7of9/items/b364d897b95476a30754\nTensorFlow\u3067sine curve\u3092\u5b66\u7fd2\u3057\u3066\u8aa4\u5dee0.2\u7a0b\u5ea6\u306b\u306a\u3063\u3066\u3044\u308b\u3002\nhttp://qiita.com/7of9/items/8cb8db458d78d313c6cf\n\u5b66\u7fd2\u7d50\u679c\u3092\u30b0\u30e9\u30d5\u5316\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\npredicition\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\ninput.csv\u751f\u6210\nhttp://qiita.com/7of9/items/b364d897b95476a30754#\u30c7\u30fc\u30bf\u751f\u6210\u90e8\n\ncode v0.1 (hidden:sigmoid, output:sigmoid)\n#output trained curve\u4ee5\u964d\u306e\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u305f\u3002\u3000\nprediction\u3092\u51fa\u529b\u3059\u308c\u3070\u3044\u3044\u304b\u3068\u601d\u3063\u305f\u3002\n\noutput_learnedSine.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\nimport numpy as np\n\nfilename_queue = tf.train.string_input_producer([\"input.csv\"])\n\n# prase CSV\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_queue)\ninput1, output = tf.decode_csv(value, record_defaults=[[0.], [0.]])\ninputs = tf.pack([input1])\noutput = tf.pack([output])\n\nbatch_size=4 # [4]\ninputs_batch, output_batch = tf.train.shuffle_batch([inputs, output], batch_size, capacity=40, min_after_dequeue=batch_size)\n\ninput_ph = tf.placeholder(\"float\", [None,1])\noutput_ph = tf.placeholder(\"float\",[None,1])\n\n## network\nhiddens = slim.stack(input_ph, slim.fully_connected, [7,7,7], \n  activation_fn=tf.nn.sigmoid, scope=\"hidden\")\nprediction = slim.fully_connected(hiddens, 1, activation_fn=tf.nn.sigmoid, scope=\"output\")\nloss = tf.contrib.losses.mean_squared_error(prediction, output_ph)\n\ntrain_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.001))\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as sess:\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n  try:\n    sess.run(init_op)\n    for i in range(30000): #[10000]\n      inpbt, outbt = sess.run([inputs_batch, output_batch])\n      _, t_loss = sess.run([train_op, loss], feed_dict={input_ph:inpbt, output_ph: outbt})\n\n      if (i+1) % 100 == 0:\n        print(\"%d,%f\" % (i+1, t_loss))\n\n    # output to npy \n    model_variables = slim.get_model_variables()\n    res = sess.run(model_variables)\n    np.save('model_variables.npy', res)\n\n  finally:\n    coord.request_stop()\n\n\n#output trained curve\n  print 'output' # used to separate from above lines (grep -A 200 output [outfile])\n  for loop in range(10):\n    inpbt, outbt = sess.run([inputs_batch, output_batch])\n    pred = sess.run([prediction], feed_dict={input_ph:inpbt, output_ph: outbt})\n    for din,dout in zip(inpbt, pred[0]):\n      print '%.5f,%.5f' % (din,dout)\n\n\n  coord.join(threads)\n\n\n\n\u5b9f\u884c\n$ python output_learnedSine.py > res.161210_1930.org\n$ grep -A 200 output res.161210_1930.org > res.161210_1930.cut\n\n\nres.161210_1930.cut\u306e\uff11\u884c\u76ee(output)\u3092vi\u3067\u524a\u9664\u3057\u305f\u3002\n\n\u30b0\u30e9\u30d5\nJupyter\u3092\u4f7f\u7528\u3002\n\nplot_result.ipynb\n%matplotlib inline\n\n# sine curve learning \n# Dec. 10, 2016\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata1 = np.loadtxt('input.csv', delimiter=',')\ndata2 = np.loadtxt('res.161210_1930.cut', delimiter=',')\n\ninput1 = data1[:,0]\noutput1 = data1[:,1]\ninput2 = data2[:,0]\noutput2 = data2[:,1]\n\nfig = plt.figure()\nax1 = fig.add_subplot(2,1,1)\nax2 = fig.add_subplot(2,1,2)\n\nax1.scatter(input1,output1)\nax2.scatter(input2,output2)\n\nax1.set_xlabel('x')\nax1.set_ylabel('sin(x)')\nax1.grid(True)\n\nax2.set_xlabel('x')\nax2.set_ylabel('sin(x)')\nax2.grid(True)\n\nfig.show()\n\n\n\n\u4e0a\u306e\u30b0\u30e9\u30d5\u304cinput.csv(\u5b66\u7fd2\u5143\uff09\u3002\n\u4e0b\u306e\u30b0\u30e9\u30d5\u304c\u5b66\u7fd2\u7d50\u679c\u3002\n\u8aa4\u5dee\u306f0.2\u3068\u3044\u3063\u3066\u3082\u3001sine curve\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u3060\u3002\nsigmoid\u95a2\u6570\u306e\u5de6\u53f3\u304c\u9006\u8ee2\u3057\u305f\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\ncode v0.2 (hidden: sigmoid, output: linear)\n@ \u300c\u6df1\u5c64\u5b66\u7fd2\u300d by \u5ca1\u8c37\u8cb4\u4e4b\u3055\u3093\n\np11. \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3067\u306f\u3001\u5404\u30e6\u30cb\u30c3\u30c8\u306e\u6d3b\u6027\u5316\u95a2\u6570\u304c\u975e\u7dda\u5f62\u6027\u3092\u6301\u3064\u3053\u3068\u304c\u672c\u8cea\u7684\u306b\u91cd\u8981\u3067\u3059\u304c\u3001\u90e8\u5206\u7684\u306b\u7dda\u5f62\u5199\u50cf\u3092\u4f7f\u3046\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305aoutput\u306fsigmoid\u3092\u3084\u3081\u3066\u3001linear\u306b\u3057\u3066\u307f\u305f\u3002\nhidden\u306fsigmoid\u306b\u3057\u3066\u3044\u308b\u3002\n(hidden\u3082linear\u306b\u3057\u305f\u3089\u300c\u305f\u3060\u306e\u76f4\u7dda\u306b\u306a\u3063\u305f\u300d\u306e\u3067\u3053\u308c\u306f\u826f\u304f\u306a\u3044)\n\nsigmoid_onlyHidden.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\nimport numpy as np\n\nfilename_queue = tf.train.string_input_producer([\"input.csv\"])\n\n# prase CSV\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_queue)\ninput1, output = tf.decode_csv(value, record_defaults=[[0.], [0.]])\ninputs = tf.pack([input1])\noutput = tf.pack([output])\n\nbatch_size=4 # [4]\ninputs_batch, output_batch = tf.train.shuffle_batch([inputs, output], batch_size, capacity=40, min_after_dequeue=batch_size)\n\ninput_ph = tf.placeholder(\"float\", [None,1])\noutput_ph = tf.placeholder(\"float\",[None,1])\n\n## network\nhiddens = slim.stack(input_ph, slim.fully_connected, [7,7,7], \n  activation_fn=tf.nn.sigmoid, scope=\"hidden\")\n#prediction = slim.fully_connected(hiddens, 1, activation_fn=tf.nn.sigmoid, scope=\"output\")\nprediction = slim.fully_connected(hiddens, 1, activation_fn=None, scope=\"output\")\nloss = tf.contrib.losses.mean_squared_error(prediction, output_ph)\n\ntrain_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.001))\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as sess:\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n  try:\n    sess.run(init_op)\n    for i in range(30000): #[10000]\n      inpbt, outbt = sess.run([inputs_batch, output_batch])\n      _, t_loss = sess.run([train_op, loss], feed_dict={input_ph:inpbt, output_ph: outbt})\n\n      if (i+1) % 100 == 0:\n        print(\"%d,%f\" % (i+1, t_loss))\n\n    # output to npy \n    model_variables = slim.get_model_variables()\n    res = sess.run(model_variables)\n    np.save('model_variables.npy', res)\n\n  finally:\n    coord.request_stop()\n\n\n#output trained curve\n  print 'output' # used to separate from above lines (grep -A 200 output [outfile])\n  for loop in range(10):\n    inpbt, outbt = sess.run([inputs_batch, output_batch])\n    pred = sess.run([prediction], feed_dict={input_ph:inpbt, output_ph: outbt})\n    for din,dout in zip(inpbt, pred[0]):\n      print '%.5f,%.5f' % (din,dout)\n\n\n  coord.join(threads)\n\n\n\n\u5b9f\u884c\n$python sigmoid_onlyHidden.py > res.161210_1958.org\n$grep -A 200 output res.161210_1958.org > res.161210_1958.cut\n$vi res.161210_1958.cut # (1\u884c\u76ee\u3092\u524a\u9664)\n\n\n\n\u5b66\u7fd2\u7d50\u679c\u306e\u30b0\u30e9\u30d5\n%matplotlib inline\n\n# sine curve learning \n# Dec. 10, 2016\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata1 = np.loadtxt('input.csv', delimiter=',')\ndata2 = np.loadtxt('res.161210_1958.cut', delimiter=',')\n\ninput1 = data1[:,0]\noutput1 = data1[:,1]\ninput2 = data2[:,0]\noutput2 = data2[:,1]\n\nfig = plt.figure()\nax1 = fig.add_subplot(2,1,1)\nax2 = fig.add_subplot(2,1,2)\n\nax1.scatter(input1,output1)\nax2.scatter(input2,output2)\n\nax1.set_xlabel('x')\nax1.set_ylabel('sin(x)')\nax1.set_xlim([0,1.0])\nax1.grid(True)\n\nax2.set_xlabel('x')\nax2.set_ylabel('sin(x)')\nax2.set_xlim([0,1.0])\nax2.grid(True)\n\nfig.show()\n\n\n\u4e0a\u306e\u30b0\u30e9\u30d5\u304cinput.csv(\u5b66\u7fd2\u5143\uff09\u3002\n\u4e0b\u306e\u30b0\u30e9\u30d5\u304c\u5b66\u7fd2\u7d50\u679c\u3002\u5b66\u7fd2\u5143\u306b\u8fd1\u3044\u3082\u306e\u304c\u5f97\u3089\u308c\u305f\u3002\n\n\u8aa4\u5dee\nhidden:sigmoid, output:linear\u306b\u3057\u305f\u72b6\u614b\u3067\u3001\u8aa4\u5dee\u306e\u5909\u5316\u3092\u6e2c\u5b9a\u3057\u306a\u304a\u3057\u305f\u3002\n\n...\n29100,0.032129\n29200,0.015477\n29300,0.006879\n29400,0.000079\n29500,0.000537\n29600,0.000318\n29700,0.001543\n29800,0.043803\n\n0.2\u3069\u3053\u308d\u3067\u306f\u306a\u3044\u8aa4\u5dee\u307e\u3067\u843d\u3061\u305f\u3002\u3064\u3044\u3066\u3044\u308b\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\n```\n\n\u95a2\u9023\u3000http://qiita.com/7of9/items/b364d897b95476a30754\n\nTensorFlow\u3067sine curve\u3092\u5b66\u7fd2\u3057\u3066\u8aa4\u5dee0.2\u7a0b\u5ea6\u306b\u306a\u3063\u3066\u3044\u308b\u3002\nhttp://qiita.com/7of9/items/8cb8db458d78d313c6cf\n\u5b66\u7fd2\u7d50\u679c\u3092\u30b0\u30e9\u30d5\u5316\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n\npredicition\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n### input.csv\u751f\u6210\n\nhttp://qiita.com/7of9/items/b364d897b95476a30754#\u30c7\u30fc\u30bf\u751f\u6210\u90e8\n\n### code v0.1 (hidden:sigmoid, output:sigmoid)\n\n`#output trained curve`\u4ee5\u964d\u306e\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u305f\u3002\u3000\nprediction\u3092\u51fa\u529b\u3059\u308c\u3070\u3044\u3044\u304b\u3068\u601d\u3063\u305f\u3002\n\n```output_learnedSine.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\nimport numpy as np\n\nfilename_queue = tf.train.string_input_producer([\"input.csv\"])\n\n# prase CSV\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_queue)\ninput1, output = tf.decode_csv(value, record_defaults=[[0.], [0.]])\ninputs = tf.pack([input1])\noutput = tf.pack([output])\n\nbatch_size=4 # [4]\ninputs_batch, output_batch = tf.train.shuffle_batch([inputs, output], batch_size, capacity=40, min_after_dequeue=batch_size)\n\ninput_ph = tf.placeholder(\"float\", [None,1])\noutput_ph = tf.placeholder(\"float\",[None,1])\n\n## network\nhiddens = slim.stack(input_ph, slim.fully_connected, [7,7,7], \n  activation_fn=tf.nn.sigmoid, scope=\"hidden\")\nprediction = slim.fully_connected(hiddens, 1, activation_fn=tf.nn.sigmoid, scope=\"output\")\nloss = tf.contrib.losses.mean_squared_error(prediction, output_ph)\n\ntrain_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.001))\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as sess:\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n  try:\n    sess.run(init_op)\n    for i in range(30000): #[10000]\n      inpbt, outbt = sess.run([inputs_batch, output_batch])\n      _, t_loss = sess.run([train_op, loss], feed_dict={input_ph:inpbt, output_ph: outbt})\n\n      if (i+1) % 100 == 0:\n        print(\"%d,%f\" % (i+1, t_loss))\n\n    # output to npy \n    model_variables = slim.get_model_variables()\n    res = sess.run(model_variables)\n    np.save('model_variables.npy', res)\n\n  finally:\n    coord.request_stop()\n\n\n#output trained curve\n  print 'output' # used to separate from above lines (grep -A 200 output [outfile])\n  for loop in range(10):\n    inpbt, outbt = sess.run([inputs_batch, output_batch])\n    pred = sess.run([prediction], feed_dict={input_ph:inpbt, output_ph: outbt})\n    for din,dout in zip(inpbt, pred[0]):\n      print '%.5f,%.5f' % (din,dout)\n\n\n  coord.join(threads)\n```\n\n```txt:\u5b9f\u884c\n$ python output_learnedSine.py > res.161210_1930.org\n$ grep -A 200 output res.161210_1930.org > res.161210_1930.cut\n```\n\nres.161210_1930.cut\u306e\uff11\u884c\u76ee(output)\u3092vi\u3067\u524a\u9664\u3057\u305f\u3002\n\n### \u30b0\u30e9\u30d5\n\nJupyter\u3092\u4f7f\u7528\u3002\n\n```plot_result.ipynb\n%matplotlib inline\n\n# sine curve learning \n# Dec. 10, 2016\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata1 = np.loadtxt('input.csv', delimiter=',')\ndata2 = np.loadtxt('res.161210_1930.cut', delimiter=',')\n\ninput1 = data1[:,0]\noutput1 = data1[:,1]\ninput2 = data2[:,0]\noutput2 = data2[:,1]\n\nfig = plt.figure()\nax1 = fig.add_subplot(2,1,1)\nax2 = fig.add_subplot(2,1,2)\n\nax1.scatter(input1,output1)\nax2.scatter(input2,output2)\n\nax1.set_xlabel('x')\nax1.set_ylabel('sin(x)')\nax1.grid(True)\n\nax2.set_xlabel('x')\nax2.set_ylabel('sin(x)')\nax2.grid(True)\n\nfig.show()\n```\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/ec5d081d-93cf-7839-4425-074908fef9cb.png)\n\n\u4e0a\u306e\u30b0\u30e9\u30d5\u304cinput.csv(\u5b66\u7fd2\u5143\uff09\u3002\n\u4e0b\u306e\u30b0\u30e9\u30d5\u304c\u5b66\u7fd2\u7d50\u679c\u3002\n\n\u8aa4\u5dee\u306f0.2\u3068\u3044\u3063\u3066\u3082\u3001sine curve\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u3088\u3046\u3060\u3002\nsigmoid\u95a2\u6570\u306e\u5de6\u53f3\u304c\u9006\u8ee2\u3057\u305f\u3088\u3046\u306a\u7d50\u679c\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\n\n## code v0.2 (hidden: sigmoid, output: linear)\n\n@ \u300c\u6df1\u5c64\u5b66\u7fd2\u300d by \u5ca1\u8c37\u8cb4\u4e4b\u3055\u3093\n> p11. \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u3067\u306f\u3001\u5404\u30e6\u30cb\u30c3\u30c8\u306e\u6d3b\u6027\u5316\u95a2\u6570\u304c\u975e\u7dda\u5f62\u6027\u3092\u6301\u3064\u3053\u3068\u304c\u672c\u8cea\u7684\u306b\u91cd\u8981\u3067\u3059\u304c\u3001\u90e8\u5206\u7684\u306b\u7dda\u5f62\u5199\u50cf\u3092\u4f7f\u3046\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305aoutput\u306fsigmoid\u3092\u3084\u3081\u3066\u3001linear\u306b\u3057\u3066\u307f\u305f\u3002\nhidden\u306fsigmoid\u306b\u3057\u3066\u3044\u308b\u3002\n(hidden\u3082linear\u306b\u3057\u305f\u3089\u300c\u305f\u3060\u306e\u76f4\u7dda\u306b\u306a\u3063\u305f\u300d\u306e\u3067\u3053\u308c\u306f\u826f\u304f\u306a\u3044)\n\n```sigmoid_onlyHidden.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport sys\nimport tensorflow as tf\nimport tensorflow.contrib.slim as slim\nimport numpy as np\n\nfilename_queue = tf.train.string_input_producer([\"input.csv\"])\n\n# prase CSV\nreader = tf.TextLineReader()\nkey, value = reader.read(filename_queue)\ninput1, output = tf.decode_csv(value, record_defaults=[[0.], [0.]])\ninputs = tf.pack([input1])\noutput = tf.pack([output])\n\nbatch_size=4 # [4]\ninputs_batch, output_batch = tf.train.shuffle_batch([inputs, output], batch_size, capacity=40, min_after_dequeue=batch_size)\n\ninput_ph = tf.placeholder(\"float\", [None,1])\noutput_ph = tf.placeholder(\"float\",[None,1])\n\n## network\nhiddens = slim.stack(input_ph, slim.fully_connected, [7,7,7], \n  activation_fn=tf.nn.sigmoid, scope=\"hidden\")\n#prediction = slim.fully_connected(hiddens, 1, activation_fn=tf.nn.sigmoid, scope=\"output\")\nprediction = slim.fully_connected(hiddens, 1, activation_fn=None, scope=\"output\")\nloss = tf.contrib.losses.mean_squared_error(prediction, output_ph)\n\ntrain_op = slim.learning.create_train_op(loss, tf.train.AdamOptimizer(0.001))\n\ninit_op = tf.initialize_all_variables()\n\nwith tf.Session() as sess:\n  coord = tf.train.Coordinator()\n  threads = tf.train.start_queue_runners(sess=sess, coord=coord)\n\n  try:\n    sess.run(init_op)\n    for i in range(30000): #[10000]\n      inpbt, outbt = sess.run([inputs_batch, output_batch])\n      _, t_loss = sess.run([train_op, loss], feed_dict={input_ph:inpbt, output_ph: outbt})\n\n      if (i+1) % 100 == 0:\n        print(\"%d,%f\" % (i+1, t_loss))\n\n    # output to npy \n    model_variables = slim.get_model_variables()\n    res = sess.run(model_variables)\n    np.save('model_variables.npy', res)\n\n  finally:\n    coord.request_stop()\n\n\n#output trained curve\n  print 'output' # used to separate from above lines (grep -A 200 output [outfile])\n  for loop in range(10):\n    inpbt, outbt = sess.run([inputs_batch, output_batch])\n    pred = sess.run([prediction], feed_dict={input_ph:inpbt, output_ph: outbt})\n    for din,dout in zip(inpbt, pred[0]):\n      print '%.5f,%.5f' % (din,dout)\n\n\n  coord.join(threads)\n```\n\n```txt:\u5b9f\u884c\n$python sigmoid_onlyHidden.py > res.161210_1958.org\n$grep -A 200 output res.161210_1958.org > res.161210_1958.cut\n$vi res.161210_1958.cut # (1\u884c\u76ee\u3092\u524a\u9664)\n```\n\n### \u5b66\u7fd2\u7d50\u679c\u306e\u30b0\u30e9\u30d5\n\n```\n%matplotlib inline\n\n# sine curve learning \n# Dec. 10, 2016\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndata1 = np.loadtxt('input.csv', delimiter=',')\ndata2 = np.loadtxt('res.161210_1958.cut', delimiter=',')\n\ninput1 = data1[:,0]\noutput1 = data1[:,1]\ninput2 = data2[:,0]\noutput2 = data2[:,1]\n\nfig = plt.figure()\nax1 = fig.add_subplot(2,1,1)\nax2 = fig.add_subplot(2,1,2)\n\nax1.scatter(input1,output1)\nax2.scatter(input2,output2)\n\nax1.set_xlabel('x')\nax1.set_ylabel('sin(x)')\nax1.set_xlim([0,1.0])\nax1.grid(True)\n\nax2.set_xlabel('x')\nax2.set_ylabel('sin(x)')\nax2.set_xlim([0,1.0])\nax2.grid(True)\n\nfig.show()\n```\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/b482fc8f-4b08-83e0-3ae3-19c394446540.png)\n\n\u4e0a\u306e\u30b0\u30e9\u30d5\u304cinput.csv(\u5b66\u7fd2\u5143\uff09\u3002\n\u4e0b\u306e\u30b0\u30e9\u30d5\u304c\u5b66\u7fd2\u7d50\u679c\u3002\u5b66\u7fd2\u5143\u306b\u8fd1\u3044\u3082\u306e\u304c\u5f97\u3089\u308c\u305f\u3002\n\n### \u8aa4\u5dee\n\nhidden:sigmoid, output:linear\u306b\u3057\u305f\u72b6\u614b\u3067\u3001\u8aa4\u5dee\u306e\u5909\u5316\u3092\u6e2c\u5b9a\u3057\u306a\u304a\u3057\u305f\u3002\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/6dd73332-0c4b-358b-e630-9b10f0ad43ce.png)\n\n\n```\n...\n29100,0.032129\n29200,0.015477\n29300,0.006879\n29400,0.000079\n29500,0.000537\n29600,0.000318\n29700,0.001543\n29800,0.043803\n```\n\n0.2\u3069\u3053\u308d\u3067\u306f\u306a\u3044\u8aa4\u5dee\u307e\u3067\u843d\u3061\u305f\u3002\u3064\u3044\u3066\u3044\u308b\u3002\n", "tags": ["borgWarp", "TensorFlow", "regression", "Jupyter"]}