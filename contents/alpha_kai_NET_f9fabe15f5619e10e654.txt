{"context": "\u4eca\u56de\u306f\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3067Base64\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u767a\u7aef\u306f\u3001\u300c\u4ee5\u524d\u81ea\u5206\u304c\u66f8\u3044\u305f\u306a\u3093\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3051\u3069\u30d0\u30b0\u3063\u3066\u3044\u308b\u3053\u3068\u3060\u3051\u306f\u308f\u304b\u308bD\u8a00\u8a9e\u3067\u66f8\u3044\u305fBase64\u30a8\u30f3\u30b3\u30fc\u30c0\u300d\u3092\u898b\u3064\u3051\u3066\u3057\u307e\u3044\u3001\u3057\u304b\u3082\u305d\u306e\u30b3\u30fc\u30c9\u304c\u6c5a\u304b\u3063\u305f\u306e\u3067\"\u30a4\u30b1\u30e1\u30f3\"\u306a\u611f\u3058\u3067\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nWikipedia\u306eBase64\u306e\u9805\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u4ed5\u69d8\u3092\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u305f\u3060\u3051\u306a\u306e\u3067\u89e3\u8aac\u306f\u3057\u307e\u305b\u3093\u3002\n\u3067\u306f\u3001\u4ee5\u4e0b\u306bD\u8a00\u8a9e\u3067\u306e\u4e00\u822c\u7684\u306aBase64\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u30b3\u30fc\u30c9\u3092\u8cbc\u3063\u3066\u304a\u304d\u307e\u3059\u3002\nimport std.algorithm,\n       std.string,\n       std.ascii,\n       std.range,\n       std.conv;\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nstring encode(T)(T data) {\n  return\n    (convb =>\n      (table =>\n        (converted =>\n          (binaries =>\n            (bLen =>\n              (prepared => \n                (pLen => \n                  (quotients => \n                    pLen % 4 == 0\n                      ? quotients\n                      : quotients ~ (remainds =>\n                                      remainds.map!(remain =>\n                                        table[remain]\n                                      ).array.join ~ repeat(\"=\", 4 - (pLen % 4)).join\n                                    )(prepared[($ - (pLen % 4))..$])\n                  )(\n                    (pLen / 4).iota.map!(i =>\n                      (j =>\n                        4.iota.map!(k =>\n                          table[prepared[j + k]]\n                        ).array.join\n                      )(i * 4)\n                    ).array.join\n                  )\n                )(prepared.length)\n              )(\n                (quotients =>\n                  bLen % 6 == 0\n                    ? quotients\n                    : quotients ~ (remainds =>\n                                    remainds ~ repeat(\"0\", 6 - remainds.length).join\n                                  )(binaries[($ - (bLen % 6))..$])\n                )((bLen / 6).iota.map!(i => binaries[(i * 6)..((i + 1) * 6)]).array)\n              )\n            )(binaries.length)\n          )(converted.join)\n        )(data.map!(i =>\n          (e =>\n            e.length == 8\n              ? e\n              : repeat(\"0\", 8 - e.length).join ~ e\n          )(convb(i, 2))).array\n        )\n      )((charset => \n        assocArray(\n          zip(\n            charset.length.iota.map!(i =>\n              (e =>\n                e.length == 6\n                  ? e\n                  : repeat(\"0\", 6 - e.length).join ~ e\n              )(convb(i, 2))),\n            charset))\n        )((uppercase ~ lowercase ~ digits ~ \"+/\").split(string.init))\n      )\n    )((ulong N, int base) =>\n      (convbM =>\n        convbM(N, N, [], base)\n      )(Z((string delegate(ulong, ulong, ulong[], int base) convbM, ulong N, ulong tmp, ulong[] stack, int base) =>\n          tmp ? convbM(N, tmp / base, stack ~ (tmp % base), base) : stack.reverse.map!(e => e.to!string).join)));\n}\n\n\u4eca\u56de\u306f\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\u3067`Base64`\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u767a\u7aef\u306f\u3001\u300c\u4ee5\u524d\u81ea\u5206\u304c\u66f8\u3044\u305f\u306a\u3093\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3051\u3069\u30d0\u30b0\u3063\u3066\u3044\u308b\u3053\u3068\u3060\u3051\u306f\u308f\u304b\u308bD\u8a00\u8a9e\u3067\u66f8\u3044\u305f`Base64`\u30a8\u30f3\u30b3\u30fc\u30c0\u300d\u3092\u898b\u3064\u3051\u3066\u3057\u307e\u3044\u3001\u3057\u304b\u3082\u305d\u306e\u30b3\u30fc\u30c9\u304c\u6c5a\u304b\u3063\u305f\u306e\u3067\"\u30a4\u30b1\u30e1\u30f3\"\u306a\u611f\u3058\u3067\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n`Wikipedia`\u306e`Base64`\u306e\u9805\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u4ed5\u69d8\u3092\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u305f\u3060\u3051\u306a\u306e\u3067\u89e3\u8aac\u306f\u3057\u307e\u305b\u3093\u3002\n\n\u3067\u306f\u3001\u4ee5\u4e0b\u306bD\u8a00\u8a9e\u3067\u306e\u4e00\u822c\u7684\u306aBase64\u30a8\u30f3\u30b3\u30fc\u30c0\u306e\u30b3\u30fc\u30c9\u3092\u8cbc\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n\n```d\nimport std.algorithm,\n       std.string,\n       std.ascii,\n       std.range,\n       std.conv;\n\nR delegate(Args) Z(R, Args...)(R delegate(R delegate(Args), Args) f){\n  return (Args args) => f(Z(f), args);\n}\n\nstring encode(T)(T data) {\n  return\n    (convb =>\n      (table =>\n        (converted =>\n          (binaries =>\n            (bLen =>\n              (prepared => \n                (pLen => \n                  (quotients => \n                    pLen % 4 == 0\n                      ? quotients\n                      : quotients ~ (remainds =>\n                                      remainds.map!(remain =>\n                                        table[remain]\n                                      ).array.join ~ repeat(\"=\", 4 - (pLen % 4)).join\n                                    )(prepared[($ - (pLen % 4))..$])\n                  )(\n                    (pLen / 4).iota.map!(i =>\n                      (j =>\n                        4.iota.map!(k =>\n                          table[prepared[j + k]]\n                        ).array.join\n                      )(i * 4)\n                    ).array.join\n                  )\n                )(prepared.length)\n              )(\n                (quotients =>\n                  bLen % 6 == 0\n                    ? quotients\n                    : quotients ~ (remainds =>\n                                    remainds ~ repeat(\"0\", 6 - remainds.length).join\n                                  )(binaries[($ - (bLen % 6))..$])\n                )((bLen / 6).iota.map!(i => binaries[(i * 6)..((i + 1) * 6)]).array)\n              )\n            )(binaries.length)\n          )(converted.join)\n        )(data.map!(i =>\n          (e =>\n            e.length == 8\n              ? e\n              : repeat(\"0\", 8 - e.length).join ~ e\n          )(convb(i, 2))).array\n        )\n      )((charset => \n        assocArray(\n          zip(\n            charset.length.iota.map!(i =>\n              (e =>\n                e.length == 6\n                  ? e\n                  : repeat(\"0\", 6 - e.length).join ~ e\n              )(convb(i, 2))),\n            charset))\n        )((uppercase ~ lowercase ~ digits ~ \"+/\").split(string.init))\n      )\n    )((ulong N, int base) =>\n      (convbM =>\n        convbM(N, N, [], base)\n      )(Z((string delegate(ulong, ulong, ulong[], int base) convbM, ulong N, ulong tmp, ulong[] stack, int base) =>\n          tmp ? convbM(N, tmp / base, stack ~ (tmp % base), base) : stack.reverse.map!(e => e.to!string).join)));\n}\n```\n", "tags": ["dlang", "D\u8a00\u8a9e", "base64", "D\u8a00\u8a9eLisp"]}