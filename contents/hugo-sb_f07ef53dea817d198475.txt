{"context": " More than 1 year has passed since last update.WPF\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u3059\u308b\u5834\u5408\u3001MVVM\u30d1\u30bf\u30fc\u30f3\u3092\u5229\u7528\u3057\u3066\u306e\u958b\u767a\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Model, View, ViewModel \u306e3\u3064\u306e\u5c64\u306b\u5206\u5272\u3057\u3066\u958b\u767a\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\nWPF\u3067\u306fMVVM\u30d1\u30bf\u30fc\u30f3\u3092\u7528\u3044\u3066\u958b\u767a\u3059\u308b\u305f\u3081\u306b\u30c7\u30fc\u30bf\u30d0\u30a4\u30f3\u30c9\u3068\u304b\u3044\u308d\u3044\u308d\u6a5f\u80fd\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3089\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u5e7e\u3064\u304b\u306e\u304a\u7d04\u675f\u304c\u3042\u3063\u3066\u3001ViewModel\u3067\u306fINotifyPropertyChanged\u3068IDataErrorInfo\u3068\u3044\u30462\u3064\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u6c42\u3081\u3089\u307e\u3059\uff08\u5225\u306b\u5fc5\u9808\u3067\u306f\u306a\u3044\u3067\u3059\u304c\uff09\u3002\u307e\u305f\u3001View\u304b\u3089ViewModel\u3078\u306e\u901a\u77e5\u3092\u53d7\u3051\u53d6\u308b\u5834\u5408\u3001ICommand\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u4ecb\u3057\u3066\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u3053\u306e\u5b9f\u88c5\u3082\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u5b9f\u88c5\u306f\u307b\u307c\u5b9a\u5f62\u3067\u3059\u306e\u3067\u3001ViewModel\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3068\u3057\u3066\u4f5c\u6210\u3057\u3066\u304a\u304f\u306e\u304c\u666e\u901a\u3067\u3059\u3002\u6700\u4f4e\u9650\u306e\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u305f\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\nViewModel\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\nINotifyPropertyChanged\u3068IDataErrorInfo\u306e\u5b9f\u88c5\u3001\u53ca\u3073\u3001ICommand\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\nViewModelBase.cs\n#region ** Class : ViewModelBase\n/// <summary>\n/// ViewModel\u306e\u57fa\u5e95\u30af\u30e9\u30b9\n/// INotifyPropertyChanged \u3068 IDataErrorInfo \u3092\u5b9f\u88c5\u3059\u308b\n/// </summary>\npublic abstract class ViewModelBase : INotifyPropertyChanged, IDataErrorInfo\n{\n    #region == implement of INotifyPropertyChanged ==\n\n    // INotifyPropertyChanged.PropertyChanged \u306e\u5b9f\u88c5\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    // INotifyPropertyChanged.PropertyChanged\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u751f\u3055\u305b\u308b\u3002\n    protected virtual void RaisePropertyChanged(string propertyName)\n    {\n        if (PropertyChanged != null)\n            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n    }\n\n    #endregion\n\n    #region == implemnt of IDataErrorInfo ==\n\n    // IDataErrorInfo\u7528\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4fdd\u6301\u3059\u308b\u8f9e\u66f8\n    private Dictionary<string, string> _ErrorMessages = new Dictionary<string, string>();\n\n    // IDataErrorInfo.Error \u306e\u5b9f\u88c5\n    string IDataErrorInfo.Error\n    {\n        get { return (_ErrorMessages.Count > 0) ? \"Has Error\" : null; }\n    }\n\n    // IDataErrorInfo.Item \u306e\u5b9f\u88c5\n    string IDataErrorInfo.this[string columnName]\n    {\n        get\n        {\n            if (_ErrorMessages.ContainsKey(columnName))\n                return _ErrorMessages[columnName];\n            else\n                return null;\n        }\n    }\n\n    // \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30bb\u30c3\u30c8\n    protected void SetError(string propertyName, string errorMessage)\n    {\n        _ErrorMessages[propertyName] = errorMessage;\n    }\n\n    // \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30af\u30ea\u30a2\n    protected void ClearErrror(string propertyName)\n    {\n        if (_ErrorMessages.ContainsKey(propertyName))\n            _ErrorMessages.Remove(propertyName);\n    }\n\n    #endregion\n\n    #region == implemnt of ICommand Helper ==\n\n    #region ** Class : _DelegateCommand\n    // ICommand\u5b9f\u88c5\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\n    private class _DelegateCommand : ICommand\n    {\n        private Action<object> _Command;        // \u30b3\u30de\u30f3\u30c9\u672c\u4f53\n        private Func<object,bool> _CanExecute;  // \u5b9f\u884c\u53ef\u5426\n\n        // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n        public _DelegateCommand(Action<object> command, Func<object,bool> canExecute)\n        {\n            if (command == null)\n                throw new ArgumentNullException();\n\n            _Command = command;\n            _CanExecute = canExecute;\n        }\n\n        // ICommand.Execute\u306e\u5b9f\u88c5\n        void ICommand.Execute(object parameter)\n        {\n            _Command(parameter);\n        }\n\n        // ICommand.Execute\u306e\u5b9f\u88c5\n        bool ICommand.CanExecute(object parameter)\n        {\n            if (_CanExecute != null)\n                return _CanExecute(parameter);\n            else\n                return true;\n        }\n\n        // ICommand.CanExecuteChanged \u306e\u5b9f\u88c5\n        event EventHandler ICommand.CanExecuteChanged\n        {\n            add { CommandManager.RequerySuggested += value; }\n            remove { CommandManager.RequerySuggested -= value; }\n        }\n    }\n    #endregion\n\n    // \u30b3\u30de\u30f3\u30c9\u306e\u751f\u6210\n    protected ICommand CreateCommand(Action<object> command, Func<object,bool> canExecute)\n    {\n        return new _DelegateCommand(command, canExecute);\n    }\n\n    #endregion\n}\n\n\n\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3057\u305f\u30b5\u30f3\u30d7\u30eb\n\nViewModel.cs\nnamespace WpfTest\n{\n    #region ** Class : ViewModel\n    /// <summary>\n    /// ViewModel\n    /// </summary>\n    class ViewModel : ViewModelBase\n    {\n        // \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u3092\u4fdd\u6301\u3059\u308b\u30e1\u30f3\u30d0\u5909\u6570\n        private int _property1 = 0;\n\n        // \u30d7\u30ed\u30d1\u30c6\u30a3\n        public int Property1\n        {\n            get { return _property1; }\n            set\n            {\n                // \u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3089\u3001INotifyPropertyChanged.PropertyChanged \u3092\u767a\u751f\u3055\u305b\u308b\u3002\n                if (_property1 != value)\n                {\n                    _property1 = value;\n                    RaisePropertyChanged(\"Property1\");\n\n                    // \u5024\u306f0\u4ee5\u4e0a\u300110\u4ee5\u4e0b\u3002\u305d\u308c\u4ee5\u5916\u306f\u30a8\u30e9\u30fc\n                    if (value >= 0 && value <= 10)\n                        ClearErrror(\"Property1\");\n                    else\n                        SetError(\"Property1\",\"Error: argument out of range\");\n                }\n            }\n        }\n\n        public ICommand Add1Command { get; private set; }\n\n        // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n        public ViewModel()\n        {\n            Property1 = 0;\n            Add1Command = CreateCommand(v => { Property1 = Property1 + 1; });\n        }\n    }\n    #endregion\n}\n\n\n\nMainWindow.xaml\n<Window x:Class=\"WpfTest.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:local=\"clr-namespace:WpfTest\"\n        Title=\"MainWindow\" Height=\"350\" Width=\"525\">\n    <Window.Resources>\n        <local:ViewModel x:Key=\"ViewModel\"/>\n    </Window.Resources>\n    <Grid DataContext=\"{StaticResource ViewModel}\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"1*\" />\n            <RowDefinition Height=\"1*\" />\n        </Grid.RowDefinitions>\n        <StackPanel Grid.Row=\"0\" Orientation=\"Horizontal\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\">\n            <TextBlock Text=\"\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044:\" FontSize=\"14\" Margin=\"10\" />\n            <TextBox Text=\"{Binding Property1, ValidatesOnDataErrors=True, Mode=TwoWay}\" FontSize=\"14\" Width=\"50\" Margin=\"10\" HorizontalContentAlignment=\"Right\" />\n        </StackPanel>\n        <Button Grid.Row=\"1\" Content=\"1\u3092\u52a0\u7b97\" FontSize=\"14\" Padding=\"20,10,20,10\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\" Command=\"{Binding Add1Command}\" />\n    </Grid>\n</Window>\n\n\nWPF\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u3059\u308b\u5834\u5408\u3001MVVM\u30d1\u30bf\u30fc\u30f3\u3092\u5229\u7528\u3057\u3066\u306e\u958b\u767a\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Model, View, ViewModel \u306e3\u3064\u306e\u5c64\u306b\u5206\u5272\u3057\u3066\u958b\u767a\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n\nWPF\u3067\u306fMVVM\u30d1\u30bf\u30fc\u30f3\u3092\u7528\u3044\u3066\u958b\u767a\u3059\u308b\u305f\u3081\u306b\u30c7\u30fc\u30bf\u30d0\u30a4\u30f3\u30c9\u3068\u304b\u3044\u308d\u3044\u308d\u6a5f\u80fd\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u3089\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u306f\u5e7e\u3064\u304b\u306e\u304a\u7d04\u675f\u304c\u3042\u3063\u3066\u3001ViewModel\u3067\u306f`INotifyPropertyChanged`\u3068`IDataErrorInfo`\u3068\u3044\u30462\u3064\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u6c42\u3081\u3089\u307e\u3059\uff08\u5225\u306b\u5fc5\u9808\u3067\u306f\u306a\u3044\u3067\u3059\u304c\uff09\u3002\u307e\u305f\u3001View\u304b\u3089ViewModel\u3078\u306e\u901a\u77e5\u3092\u53d7\u3051\u53d6\u308b\u5834\u5408\u3001`ICommand`\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u4ecb\u3057\u3066\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u3053\u306e\u5b9f\u88c5\u3082\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u3089\u306e\u5b9f\u88c5\u306f\u307b\u307c\u5b9a\u5f62\u3067\u3059\u306e\u3067\u3001ViewModel\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3068\u3057\u3066\u4f5c\u6210\u3057\u3066\u304a\u304f\u306e\u304c\u666e\u901a\u3067\u3059\u3002\u6700\u4f4e\u9650\u306e\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u305f\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059\u3002\n\n## ViewModel\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b5\u30f3\u30d7\u30eb\n\n`INotifyPropertyChanged`\u3068`IDataErrorInfo`\u306e\u5b9f\u88c5\u3001\u53ca\u3073\u3001`ICommand`\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n```csharp:ViewModelBase.cs\n#region ** Class : ViewModelBase\n/// <summary>\n/// ViewModel\u306e\u57fa\u5e95\u30af\u30e9\u30b9\n/// INotifyPropertyChanged \u3068 IDataErrorInfo \u3092\u5b9f\u88c5\u3059\u308b\n/// </summary>\npublic abstract class ViewModelBase : INotifyPropertyChanged, IDataErrorInfo\n{\n    #region == implement of INotifyPropertyChanged ==\n\n    // INotifyPropertyChanged.PropertyChanged \u306e\u5b9f\u88c5\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    // INotifyPropertyChanged.PropertyChanged\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u751f\u3055\u305b\u308b\u3002\n    protected virtual void RaisePropertyChanged(string propertyName)\n    {\n        if (PropertyChanged != null)\n            PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\n    }\n\n    #endregion\n\n    #region == implemnt of IDataErrorInfo ==\n\n    // IDataErrorInfo\u7528\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4fdd\u6301\u3059\u308b\u8f9e\u66f8\n    private Dictionary<string, string> _ErrorMessages = new Dictionary<string, string>();\n\n    // IDataErrorInfo.Error \u306e\u5b9f\u88c5\n    string IDataErrorInfo.Error\n    {\n        get { return (_ErrorMessages.Count > 0) ? \"Has Error\" : null; }\n    }\n\n    // IDataErrorInfo.Item \u306e\u5b9f\u88c5\n    string IDataErrorInfo.this[string columnName]\n    {\n        get\n        {\n            if (_ErrorMessages.ContainsKey(columnName))\n                return _ErrorMessages[columnName];\n            else\n                return null;\n        }\n    }\n\n    // \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30bb\u30c3\u30c8\n    protected void SetError(string propertyName, string errorMessage)\n    {\n        _ErrorMessages[propertyName] = errorMessage;\n    }\n\n    // \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30af\u30ea\u30a2\n    protected void ClearErrror(string propertyName)\n    {\n        if (_ErrorMessages.ContainsKey(propertyName))\n            _ErrorMessages.Remove(propertyName);\n    }\n\n    #endregion\n\n    #region == implemnt of ICommand Helper ==\n\n    #region ** Class : _DelegateCommand\n    // ICommand\u5b9f\u88c5\u7528\u306e\u30d8\u30eb\u30d1\u30fc\u30af\u30e9\u30b9\n    private class _DelegateCommand : ICommand\n    {\n        private Action<object> _Command;        // \u30b3\u30de\u30f3\u30c9\u672c\u4f53\n        private Func<object,bool> _CanExecute;  // \u5b9f\u884c\u53ef\u5426\n\n        // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n        public _DelegateCommand(Action<object> command, Func<object,bool> canExecute)\n        {\n            if (command == null)\n                throw new ArgumentNullException();\n\n            _Command = command;\n            _CanExecute = canExecute;\n        }\n\n        // ICommand.Execute\u306e\u5b9f\u88c5\n        void ICommand.Execute(object parameter)\n        {\n            _Command(parameter);\n        }\n\n        // ICommand.Execute\u306e\u5b9f\u88c5\n        bool ICommand.CanExecute(object parameter)\n        {\n            if (_CanExecute != null)\n                return _CanExecute(parameter);\n            else\n                return true;\n        }\n\n        // ICommand.CanExecuteChanged \u306e\u5b9f\u88c5\n        event EventHandler ICommand.CanExecuteChanged\n        {\n            add { CommandManager.RequerySuggested += value; }\n            remove { CommandManager.RequerySuggested -= value; }\n        }\n    }\n    #endregion\n\n    // \u30b3\u30de\u30f3\u30c9\u306e\u751f\u6210\n    protected ICommand CreateCommand(Action<object> command, Func<object,bool> canExecute)\n    {\n        return new _DelegateCommand(command, canExecute);\n    }\n\n    #endregion\n}\n```\n\n## \u4e0a\u8a18\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3057\u305f\u30b5\u30f3\u30d7\u30eb\n\n```csharp:ViewModel.cs\nnamespace WpfTest\n{\n    #region ** Class : ViewModel\n    /// <summary>\n    /// ViewModel\n    /// </summary>\n    class ViewModel : ViewModelBase\n    {\n        // \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5024\u3092\u4fdd\u6301\u3059\u308b\u30e1\u30f3\u30d0\u5909\u6570\n        private int _property1 = 0;\n\n        // \u30d7\u30ed\u30d1\u30c6\u30a3\n        public int Property1\n        {\n            get { return _property1; }\n            set\n            {\n                // \u5024\u304c\u5909\u66f4\u3055\u308c\u305f\u3089\u3001INotifyPropertyChanged.PropertyChanged \u3092\u767a\u751f\u3055\u305b\u308b\u3002\n                if (_property1 != value)\n                {\n                    _property1 = value;\n                    RaisePropertyChanged(\"Property1\");\n\n                    // \u5024\u306f0\u4ee5\u4e0a\u300110\u4ee5\u4e0b\u3002\u305d\u308c\u4ee5\u5916\u306f\u30a8\u30e9\u30fc\n                    if (value >= 0 && value <= 10)\n                        ClearErrror(\"Property1\");\n                    else\n                        SetError(\"Property1\",\"Error: argument out of range\");\n                }\n            }\n        }\n\n        public ICommand Add1Command { get; private set; }\n\n        // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n        public ViewModel()\n        {\n            Property1 = 0;\n            Add1Command = CreateCommand(v => { Property1 = Property1 + 1; });\n        }\n    }\n    #endregion\n}\n```\n```xml:MainWindow.xaml\n<Window x:Class=\"WpfTest.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:local=\"clr-namespace:WpfTest\"\n        Title=\"MainWindow\" Height=\"350\" Width=\"525\">\n    <Window.Resources>\n        <local:ViewModel x:Key=\"ViewModel\"/>\n    </Window.Resources>\n    <Grid DataContext=\"{StaticResource ViewModel}\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"1*\" />\n            <RowDefinition Height=\"1*\" />\n        </Grid.RowDefinitions>\n        <StackPanel Grid.Row=\"0\" Orientation=\"Horizontal\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\">\n            <TextBlock Text=\"\u6570\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044:\" FontSize=\"14\" Margin=\"10\" />\n            <TextBox Text=\"{Binding Property1, ValidatesOnDataErrors=True, Mode=TwoWay}\" FontSize=\"14\" Width=\"50\" Margin=\"10\" HorizontalContentAlignment=\"Right\" />\n        </StackPanel>\n        <Button Grid.Row=\"1\" Content=\"1\u3092\u52a0\u7b97\" FontSize=\"14\" Padding=\"20,10,20,10\" VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\" Command=\"{Binding Add1Command}\" />\n    </Grid>\n</Window>\n```", "tags": ["C#", "WPF", "\u57fa\u790e"]}