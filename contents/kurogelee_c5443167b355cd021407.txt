{"context": " More than 1 year has passed since last update.\u30dd\u30b1\u30c3\u30c8\u30fb\u30df\u30af\u3092Java/Clojure\u304b\u3089\u64cd\u4f5c\u3057\u3066\u307f\u308b\u306e\u7d9a\u304d\u3067\u3059\u3002\nClojure\u3067\u95a2\u6570\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30d3\u30d6\u30e9\u30fc\u30c8\u306fShortMessage\u3067CONTROL_CHANGE\u3092\u6307\u5b9a\u3059\u308c\u3070\u3067\u304d\u307e\u3059\u3002\u30d3\u30d6\u30e9\u30fc\u30c8\u306e\u5927\u304d\u3055\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u30d4\u30c3\u30c1\u30d9\u30f3\u30c9\u306fShortMessage\u3067PITCH_BEND\u3092\u6307\u5b9a\u3059\u308c\u3070\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\n\npokemiku_core.clj\n(ns pokemiku.core\n  (:import [javax.sound.midi MidiSystem ShortMessage SysexMessage MidiDevice Receiver]\n           [javax.xml.bind DatatypeConverter]))\n\n(defn ^MidiDevice get-device []\n  (some->> (seq (MidiSystem/getMidiDeviceInfo))\n           (filter #(re-find #\"NSX-39\" (:name (bean %))))\n           (filter #(re-find #\"External\" (:description (bean %))))\n           first\n           (MidiSystem/getMidiDevice)))\n\n(defn note [^Receiver r data1 data2]\n  (.send r (ShortMessage. ShortMessage/NOTE_ON data1 data2) -1))\n(defn note-off [^Receiver r data1 data2]\n  (.send r (ShortMessage. ShortMessage/NOTE_OFF data1 data2) -1))\n\n(defn vibrato\n  ([^Receiver r] (vibrato r 127))\n  ([^Receiver r vol] (.send r (ShortMessage. ShortMessage/CONTROL_CHANGE 1 vol) -1)))\n(defn vibrato-off [^Receiver r] (vibrato r 0))\n\n(defn pitch-bend [^Receiver r n]\n  (when (<= -64 n 63)\n    (.send r (ShortMessage. ShortMessage/PITCH_BEND 1 (+ 64 n)) -1)))\n(defn pitch-bend-off [^Receiver r] (pitch-bend r 0))\n\n(defn- small-char? [x] (re-find #\"[\u3041\u3043\u3045\u3047\u3049\u3083\u3085\u3087]\" (str x)))\n(def ^:private base-chars \"\u3042\u3044\u3046\u3048\u304a\u304b\u304d\u304f\u3051\u3053\u304c\u304e\u3050\u3052\u3054\u304d\u3083\u304d\u3085\u304d\u3087\u304e\u3083\u304e\u3085\u304e\u3087\u3055\u3059\u3043\u3059\u305b\u305d\u3056\u305a\u3043\u305a\u305c\u305e\u3057\u3083\u3057\u3057\u3085\u3057\u3047\u3057\u3087\u3058\u3083\u3058\u3058\u3085\u3058\u3047\u3058\u3087\u305f\u3066\u3043\u3068\u3045\u3066\u3068\u3060\u3067\u3043\u3069\u3045\u3067\u3069\u3066\u3085\u3067\u3085\u3061\u3083\u3061\u3061\u3085\u3061\u3047\u3061\u3087\u3064\u3041\u3064\u3043\u3064\u3064\u3047\u3064\u3049\u306a\u306b\u306c\u306d\u306e\u306b\u3083\u306b\u3085\u306b\u3087\u306f\u3072\u3075\u3078\u307b\u3070\u3073\u3076\u3079\u307c\u3071\u3074\u3077\u307a\u307d\u3072\u3083\u3072\u3085\u3072\u3087\u3073\u3083\u3073\u3085\u3073\u3087\u3074\u3083\u3074\u3085\u3074\u3087\u3075\u3041\u3075\u3043\u3075\u3085\u3075\u3047\u3075\u3049\u307e\u307f\u3080\u3081\u3082\u307f\u3083\u307f\u3085\u307f\u3087\u3084\u3086\u3088\u3089\u308a\u308b\u308c\u308d\u308a\u3083\u308a\u3085\u308a\u3087\u308f\u3046\u3043\u3046\u3047\u3046\u3049\u3093mNJn\")\n\n(defn split-chars [s]\n  (let [s (str (apply str s) \" \")]\n    (->> (map #(cond (small-char? %2) (str %1 %2) (not (small-char? %1)) (str %1)) s (drop 1 s))\n         (filter some?))))\n\n(def ^:private char-map\n  (->> (zipmap (split-chars base-chars) (range))\n       (merge {\"\u3065\u3041\" 26 \"\u3065\u3043\" 27 \"\u3065\" 28 \"\u3065\u3047\" 29 \"\u3065\u3049\" 30 \"\u3090\" 120 \"\u3091\" 121 \"\u3092\" 122 \"N\\\\\" 123 \"\u3062\" 37 \"\u30f4\" 78})))\n\n(def ^:private bin-map\n  (->> (mapcat (fn [[k v]] [(keyword k) (DatatypeConverter/parseHexBinary (format \"F0437909110A00%02XF7\" v))]) char-map)\n       (apply hash-map)))\n\n(defn set-char [^Receiver r ch]\n  (when-let [data (bin-map (if (char? ch) (keyword (str ch)) (keyword ch)))]\n    (.send r (SysexMessage. data (count data)) -1)))\n\n\n\u3055\u3089\u306b\u3053\u308c\u3089\u3092\u5229\u7528\u3059\u308bplay\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\nplay\u95a2\u6570\u306b\u306f\u30c6\u30f3\u30dd\u3068\u3068\u3082\u306b4\u3064\u305a\u3064[\u6587\u5b57\u3001\u97f3\u306e\u9ad8\u3055\u3001\u97f3\u306e\u9577\u3055\u3001\u97f3\u306e\u5927\u304d\u3055]\u3092\u6307\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nJava/Clojure\u3067\u56fa\u5b9a\u6642\u9593\u3067\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3059\u308b\u306b\u306fThread.sleep\u3092\u4f7f\u3046\u3088\u308a\u3082Executors.newScheduledThreadPool().scheduleAtFixedRate()\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u3088\u308a\u6b63\u78ba\u306a\u9593\u9694\u3067\u7e70\u308a\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u4ee5\u4e0b\u3067\u306f1/120\u79d2\u3054\u3068\u306b\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u6587\u5b57\u3092\u6307\u5b9a\u3057\u305f\u76f4\u5f8c\u306e\u30ce\u30fc\u30c8\uff08\u97f3\u7b26\uff09\u3067\u306f\u305d\u306e\u6587\u5b57\u304c\u53cd\u6620\u3055\u308c\u306a\u3044\u3053\u3068\u304c\u305f\u307e\u306b\u3042\u308b\u306e\u3067\u3001\u30ce\u30fc\u30c8\u306e\u76f4\u5f8c\u306b\u6b21\u306e\u30ce\u30fc\u30c8\u306e\u6587\u5b57\u6307\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\npokemiku_util.clj\n(ns pokemiku.util\n  (:require [pokemiku.core :refer :all])\n  (:import [java.util.concurrent Executors ScheduledExecutorService ScheduledFuture TimeUnit]\n           [javax.sound.midi ShortMessage]))\n\n(def base-octave [60 62 64 65 67 69 71])\n\n(defn play [tempo & notes]\n  (let [n (partition 4 notes)\n        base 120\n        tempo (atom tempo)\n        n (atom n)\n        sum (atom 0)\n        pool (Executors/newScheduledThreadPool 1)\n        f #(if (nil? @n) (.shutdown pool)\n             ;; char pitch length volume\n             (let [[c p l v] (first @n)]\n               (if (zero? @sum)\n                 (condp = c\n                   :V (vibrato % v)\n                   :B (pitch-bend % v)\n                   :T (reset! tempo v)\n                   :R (note-off % p v)\n                   (do (set-char % c) (note % p v)))\n                 (when (< @sum 2) (set-char % (first (second @n))))) ; set-char\u3092\u5373\u5ea7\u306b\u53cd\u6620\u3059\u308b\u305f\u3081\n               (swap! sum inc)\n               (when (<= (* base l (/ 60 @tempo)) @sum)\n                 (vibrato-off %) (pitch-bend-off %) (reset! sum 0) (swap! n next))))]\n    (with-open [dev (get-device)]\n      (.open dev)\n      (let [r (.getReceiver dev) rate (Math/round (double (/ 1000000 base)))]\n        (doto pool\n          (.scheduleAtFixedRate #(f r) 0 rate TimeUnit/MICROSECONDS)\n          (.awaitTermination 1 TimeUnit/DAYS))))))\n\n\n\u7c21\u5358\u306a\u4f7f\u3044\u65b9\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u4ee5\u4e0b\u3067\u306f\u30c6\u30f3\u30dd\uff081\u5206\u9593\u306b\u56db\u5206\u97f3\u7b26\u304c\u5165\u308b\u6570\uff09\u304c60\u3067\u3001\u521d\u3081\u306f\u300c\u3069\u300d\u306e\u6587\u5b57\u306772\u306e\u9ad8\u3055\u3067\u56db\u5206\u97f3\u7b261\u3064\u5206\u306e\u9577\u3055\u3067\u3001\u97f3\u306e\u5927\u304d\u3055127\u3067\u767a\u58f0\u3057\u307e\u3059\u3002\n:V\u3084:B\u306a\u3069\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n:V \u30d3\u30d6\u30e9\u30fc\u30c8 [\u672a\u4f7f\u7528\u3001\u9577\u3055\u3001\u5927\u304d\u3055]\n:B \u30d4\u30c3\u30c1\u30d9\u30f3\u30c9 [\u672a\u4f7f\u7528\u3001\u9577\u3055\u3001\u5909\u5316\u91cf]\n:R \u4f11\u7b26 [OFF\u306b\u3059\u308b\u97f3\u306e\u9ad8\u3055\u3001\u9577\u3055\u3001\u901f\u5ea6]\n:T \u30c6\u30f3\u30dd\u5909\u66f4 [\u672a\u4f7f\u7528\u3001\u672a\u4f7f\u7528\u3001\u30c6\u30f3\u30dd]\n\n\nsample1.clj\n(play 60 :\u3069 72 1 127 :V 1 1 127 :R 72 1/2 0 :\u308c 74 1/2 127 :B 1 1/5 2 :\u307f 76 1 127 :T 0 0 120 :\u3069 72 1 127 :V 1 1 127 :\u308c 74 1/2 127 :B 1 1/5 2 :\u307f 76 1 127)\n\n\n\u3088\u308a\u30d7\u30ed\u30b0\u30e9\u30e0\u3063\u307d\u304f\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3082\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002\n\nsample2.clj\n(apply play 150 (interleave\n                  (split-chars (repeat 3 \"\u3069\u308c\u307f\u3075\u3041\u305d\u3089\u3057\"))\n                  (concat (map #(- % 12) base-octave) base-octave (map #(+ 12 %) base-octave))\n                  (repeat 1) (repeat 127)))\n(play 150 :\u3069 84 1/5 127 :V 1 2 127)\n\n(apply play 120\n       (interleave (cycle \"\u307f\u304f\")\n                   (let [c [76 77 74 72]] (concat c (map inc c) (reverse c) (map inc (reverse c) )))\n                   (cycle [1/2 1/3 1 2/3]) (repeat 127)))\n\n\n\u307e\u3060\u307e\u3060\u4ed6\u306b\u3082\u3044\u308d\u3044\u308d\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n[\u30dd\u30b1\u30c3\u30c8\u30fb\u30df\u30af\u3092Java/Clojure\u304b\u3089\u64cd\u4f5c\u3057\u3066\u307f\u308b](http://qiita.com/kurogelee/items/12a175866ef620f3c520)\u306e\u7d9a\u304d\u3067\u3059\u3002\n\nClojure\u3067\u95a2\u6570\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30d3\u30d6\u30e9\u30fc\u30c8\u306fShortMessage\u3067CONTROL_CHANGE\u3092\u6307\u5b9a\u3059\u308c\u3070\u3067\u304d\u307e\u3059\u3002\u30d3\u30d6\u30e9\u30fc\u30c8\u306e\u5927\u304d\u3055\u3082\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u30d4\u30c3\u30c1\u30d9\u30f3\u30c9\u306fShortMessage\u3067PITCH_BEND\u3092\u6307\u5b9a\u3059\u308c\u3070\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\n\n```pokemiku_core.clj\n(ns pokemiku.core\n  (:import [javax.sound.midi MidiSystem ShortMessage SysexMessage MidiDevice Receiver]\n           [javax.xml.bind DatatypeConverter]))\n\n(defn ^MidiDevice get-device []\n  (some->> (seq (MidiSystem/getMidiDeviceInfo))\n           (filter #(re-find #\"NSX-39\" (:name (bean %))))\n           (filter #(re-find #\"External\" (:description (bean %))))\n           first\n           (MidiSystem/getMidiDevice)))\n\n(defn note [^Receiver r data1 data2]\n  (.send r (ShortMessage. ShortMessage/NOTE_ON data1 data2) -1))\n(defn note-off [^Receiver r data1 data2]\n  (.send r (ShortMessage. ShortMessage/NOTE_OFF data1 data2) -1))\n\n(defn vibrato\n  ([^Receiver r] (vibrato r 127))\n  ([^Receiver r vol] (.send r (ShortMessage. ShortMessage/CONTROL_CHANGE 1 vol) -1)))\n(defn vibrato-off [^Receiver r] (vibrato r 0))\n\n(defn pitch-bend [^Receiver r n]\n  (when (<= -64 n 63)\n    (.send r (ShortMessage. ShortMessage/PITCH_BEND 1 (+ 64 n)) -1)))\n(defn pitch-bend-off [^Receiver r] (pitch-bend r 0))\n\n(defn- small-char? [x] (re-find #\"[\u3041\u3043\u3045\u3047\u3049\u3083\u3085\u3087]\" (str x)))\n(def ^:private base-chars \"\u3042\u3044\u3046\u3048\u304a\u304b\u304d\u304f\u3051\u3053\u304c\u304e\u3050\u3052\u3054\u304d\u3083\u304d\u3085\u304d\u3087\u304e\u3083\u304e\u3085\u304e\u3087\u3055\u3059\u3043\u3059\u305b\u305d\u3056\u305a\u3043\u305a\u305c\u305e\u3057\u3083\u3057\u3057\u3085\u3057\u3047\u3057\u3087\u3058\u3083\u3058\u3058\u3085\u3058\u3047\u3058\u3087\u305f\u3066\u3043\u3068\u3045\u3066\u3068\u3060\u3067\u3043\u3069\u3045\u3067\u3069\u3066\u3085\u3067\u3085\u3061\u3083\u3061\u3061\u3085\u3061\u3047\u3061\u3087\u3064\u3041\u3064\u3043\u3064\u3064\u3047\u3064\u3049\u306a\u306b\u306c\u306d\u306e\u306b\u3083\u306b\u3085\u306b\u3087\u306f\u3072\u3075\u3078\u307b\u3070\u3073\u3076\u3079\u307c\u3071\u3074\u3077\u307a\u307d\u3072\u3083\u3072\u3085\u3072\u3087\u3073\u3083\u3073\u3085\u3073\u3087\u3074\u3083\u3074\u3085\u3074\u3087\u3075\u3041\u3075\u3043\u3075\u3085\u3075\u3047\u3075\u3049\u307e\u307f\u3080\u3081\u3082\u307f\u3083\u307f\u3085\u307f\u3087\u3084\u3086\u3088\u3089\u308a\u308b\u308c\u308d\u308a\u3083\u308a\u3085\u308a\u3087\u308f\u3046\u3043\u3046\u3047\u3046\u3049\u3093mNJn\")\n\n(defn split-chars [s]\n  (let [s (str (apply str s) \" \")]\n    (->> (map #(cond (small-char? %2) (str %1 %2) (not (small-char? %1)) (str %1)) s (drop 1 s))\n         (filter some?))))\n\n(def ^:private char-map\n  (->> (zipmap (split-chars base-chars) (range))\n       (merge {\"\u3065\u3041\" 26 \"\u3065\u3043\" 27 \"\u3065\" 28 \"\u3065\u3047\" 29 \"\u3065\u3049\" 30 \"\u3090\" 120 \"\u3091\" 121 \"\u3092\" 122 \"N\\\\\" 123 \"\u3062\" 37 \"\u30f4\" 78})))\n\n(def ^:private bin-map\n  (->> (mapcat (fn [[k v]] [(keyword k) (DatatypeConverter/parseHexBinary (format \"F0437909110A00%02XF7\" v))]) char-map)\n       (apply hash-map)))\n\n(defn set-char [^Receiver r ch]\n  (when-let [data (bin-map (if (char? ch) (keyword (str ch)) (keyword ch)))]\n    (.send r (SysexMessage. data (count data)) -1)))\n```\n\n\u3055\u3089\u306b\u3053\u308c\u3089\u3092\u5229\u7528\u3059\u308b`play`\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n`play`\u95a2\u6570\u306b\u306f\u30c6\u30f3\u30dd\u3068\u3068\u3082\u306b4\u3064\u305a\u3064[\u6587\u5b57\u3001\u97f3\u306e\u9ad8\u3055\u3001\u97f3\u306e\u9577\u3055\u3001\u97f3\u306e\u5927\u304d\u3055]\u3092\u6307\u5b9a\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nJava/Clojure\u3067\u56fa\u5b9a\u6642\u9593\u3067\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3059\u308b\u306b\u306fThread.sleep\u3092\u4f7f\u3046\u3088\u308a\u3082Executors.newScheduledThreadPool().scheduleAtFixedRate()\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u3088\u308a\u6b63\u78ba\u306a\u9593\u9694\u3067\u7e70\u308a\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u4ee5\u4e0b\u3067\u306f1/120\u79d2\u3054\u3068\u306b\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u6587\u5b57\u3092\u6307\u5b9a\u3057\u305f\u76f4\u5f8c\u306e\u30ce\u30fc\u30c8\uff08\u97f3\u7b26\uff09\u3067\u306f\u305d\u306e\u6587\u5b57\u304c\u53cd\u6620\u3055\u308c\u306a\u3044\u3053\u3068\u304c\u305f\u307e\u306b\u3042\u308b\u306e\u3067\u3001\u30ce\u30fc\u30c8\u306e\u76f4\u5f8c\u306b\u6b21\u306e\u30ce\u30fc\u30c8\u306e\u6587\u5b57\u6307\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```pokemiku_util.clj\n(ns pokemiku.util\n  (:require [pokemiku.core :refer :all])\n  (:import [java.util.concurrent Executors ScheduledExecutorService ScheduledFuture TimeUnit]\n           [javax.sound.midi ShortMessage]))\n\n(def base-octave [60 62 64 65 67 69 71])\n\n(defn play [tempo & notes]\n  (let [n (partition 4 notes)\n        base 120\n        tempo (atom tempo)\n        n (atom n)\n        sum (atom 0)\n        pool (Executors/newScheduledThreadPool 1)\n        f #(if (nil? @n) (.shutdown pool)\n             ;; char pitch length volume\n             (let [[c p l v] (first @n)]\n               (if (zero? @sum)\n                 (condp = c\n                   :V (vibrato % v)\n                   :B (pitch-bend % v)\n                   :T (reset! tempo v)\n                   :R (note-off % p v)\n                   (do (set-char % c) (note % p v)))\n                 (when (< @sum 2) (set-char % (first (second @n))))) ; set-char\u3092\u5373\u5ea7\u306b\u53cd\u6620\u3059\u308b\u305f\u3081\n               (swap! sum inc)\n               (when (<= (* base l (/ 60 @tempo)) @sum)\n                 (vibrato-off %) (pitch-bend-off %) (reset! sum 0) (swap! n next))))]\n    (with-open [dev (get-device)]\n      (.open dev)\n      (let [r (.getReceiver dev) rate (Math/round (double (/ 1000000 base)))]\n        (doto pool\n          (.scheduleAtFixedRate #(f r) 0 rate TimeUnit/MICROSECONDS)\n          (.awaitTermination 1 TimeUnit/DAYS))))))\n```\n\n\u7c21\u5358\u306a\u4f7f\u3044\u65b9\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\u4ee5\u4e0b\u3067\u306f\u30c6\u30f3\u30dd\uff081\u5206\u9593\u306b\u56db\u5206\u97f3\u7b26\u304c\u5165\u308b\u6570\uff09\u304c60\u3067\u3001\u521d\u3081\u306f\u300c\u3069\u300d\u306e\u6587\u5b57\u306772\u306e\u9ad8\u3055\u3067\u56db\u5206\u97f3\u7b261\u3064\u5206\u306e\u9577\u3055\u3067\u3001\u97f3\u306e\u5927\u304d\u3055127\u3067\u767a\u58f0\u3057\u307e\u3059\u3002\n:V\u3084:B\u306a\u3069\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n* :V \u30d3\u30d6\u30e9\u30fc\u30c8 [\u672a\u4f7f\u7528\u3001\u9577\u3055\u3001\u5927\u304d\u3055]\n* :B \u30d4\u30c3\u30c1\u30d9\u30f3\u30c9 [\u672a\u4f7f\u7528\u3001\u9577\u3055\u3001\u5909\u5316\u91cf]\n* :R \u4f11\u7b26 [OFF\u306b\u3059\u308b\u97f3\u306e\u9ad8\u3055\u3001\u9577\u3055\u3001\u901f\u5ea6]\n* :T \u30c6\u30f3\u30dd\u5909\u66f4 [\u672a\u4f7f\u7528\u3001\u672a\u4f7f\u7528\u3001\u30c6\u30f3\u30dd]\n\n```sample1.clj\n(play 60 :\u3069 72 1 127 :V 1 1 127 :R 72 1/2 0 :\u308c 74 1/2 127 :B 1 1/5 2 :\u307f 76 1 127 :T 0 0 120 :\u3069 72 1 127 :V 1 1 127 :\u308c 74 1/2 127 :B 1 1/5 2 :\u307f 76 1 127)\n```\n\n\u3088\u308a\u30d7\u30ed\u30b0\u30e9\u30e0\u3063\u307d\u304f\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3082\u64cd\u4f5c\u3067\u304d\u307e\u3059\u3002\n\n```sample2.clj\n(apply play 150 (interleave\n                  (split-chars (repeat 3 \"\u3069\u308c\u307f\u3075\u3041\u305d\u3089\u3057\"))\n                  (concat (map #(- % 12) base-octave) base-octave (map #(+ 12 %) base-octave))\n                  (repeat 1) (repeat 127)))\n(play 150 :\u3069 84 1/5 127 :V 1 2 127)\n\n(apply play 120\n       (interleave (cycle \"\u307f\u304f\")\n                   (let [c [76 77 74 72]] (concat c (map inc c) (reverse c) (map inc (reverse c) )))\n                   (cycle [1/2 1/3 1 2/3]) (repeat 127)))\n```\n\n\u307e\u3060\u307e\u3060\u4ed6\u306b\u3082\u3044\u308d\u3044\u308d\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n", "tags": ["Clojure1.6.0"]}