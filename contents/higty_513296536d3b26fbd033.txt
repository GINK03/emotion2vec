{"tags": ["C#", "enum", "performance", "ilgenerator"], "context": " More than 1 year has passed since last update.\n\n1.Enum.ToString\u306e\u5185\u90e8\u5b9f\u88c5\u3068\u3088\u304f\u3042\u308b\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\nEnum\u306eToString\u306f\u975e\u5e38\u306b\u9045\u3044\u3067\u3059\u3002\n\nDayOfWeek.ToStirng()\nvar dw = DayOfWeek.Sunday;\nvar dwText = dw.ToString();\n\n\n\u3053\u308c\u306f\u5185\u90e8\u3067\u306f\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\nEnum.ToString()\npublic override string ToString()\n{\n    Type type = base.GetType();\n    object obj2 = ((RtFieldInfo)GetValueField(type)).InternalGetValue(this, false);\n    return InternalFormat(type, obj2);\n}\n\n\n\u53c2\u8003\u30b5\u30a4\u30c8\u2192http://www.dotnetperls.com/enum-tostring\n\u65e9\u304f\u3059\u308b\u305f\u3081\u306b\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\nEnumExtensions.ToString()\n\n    public static class EnumEx\n    {\n        public static String ToStringFromEnum(this DayOfWeek value)\n        {\n            switch (value)\n            {\n                case DayOfWeek.Friday: return \"Friday\";\n                case DayOfWeek.Monday: return \"Monday\";\n                //\u2026\u7701\u7565\n                default: throw new InvalidOperationException();\n            }\n        }\n    }\n\n\n\n\u3060\u3044\u305f\u3044100\u500d\u4ee5\u4e0a\u30b9\u30d4\u30fc\u30c9\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u3042\u306a\u305f\u304c\u4f7f\u3046\u5168\u3066\u306eEnum\u306b\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308c\u3070\u554f\u984c\u7121\u3057\u3067\u3059\u3002\n\n2.\u5168\u90e8\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u5927\u5909\u2192ILGenerator\u3092\u5229\u7528\u3059\u308b\n\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5168\u3066\u306eEnum\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u3066\u306f\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u7c21\u5358\u306b\u601d\u3044\u3064\u304f\u65b9\u6cd5\u3068\u3057\u3066\u306fT4\u3084\u30b3\u30fc\u30c9\u30b9\u30cb\u30da\u30c3\u30c8\u306a\u3069\u3067\u81ea\u52d5\u751f\u6210\u3068\u3044\u3046\u306e\u304c\u601d\u3044\u3064\u304d\u307e\u3059\u3002\u305f\u3060\u3053\u308c\u3089\u306e\u81ea\u52d5\u751f\u6210\u306e\u65b9\u6cd5\u306fEnum\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u3068\u304d\u306b\u518d\u5ea6\u751f\u6210\u51e6\u7406\u3092\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u4fdd\u5b88\u6027\u304c\u5b8c\u74a7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u3053\u3067\u306f\u3055\u3089\u306b\u4e00\u6b69\u5148\u306e\u65b9\u6cd5\u3068\u3057\u3066\u300c\u5b8c\u74a7\u306a\u4fdd\u5b88\u6027\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u4e21\u7acb\u3059\u308b\u65b9\u6cd5\u300d\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n.NET\u3067\u306fILGenerator\u30af\u30e9\u30b9\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u4e2d\u306bIL\u30b3\u30fc\u30c9\u3092\u52d5\u7684\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u4eca\u56de\u306f\u52d5\u7684\u306bFunc<Enum, String>\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u6210\u3057\u3001\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3068\u3044\u3046\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n3.\u307e\u305a\u306fDayOfWeek\u3067\u52d5\u4f5c\u3059\u308b\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\n\u3053\u308c\u304b\u3089\u4e0a\u8a18\u306eswitch\u6587\u306e\u30ed\u30b8\u30c3\u30af\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u52d5\u7684\u306b\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002ILGenerator\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3063\u3066IL\u30b3\u30fc\u30c9\u3092\u76f4\u63a5\u8a18\u8ff0\u3057\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u7c21\u5358\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u5165\u308c\u3066\u304a\u304d\u307e\u3057\u305f\u306e\u3067\u305d\u3053\u305d\u3053\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u308f\u304b\u308b\u4eba\u306a\u3089\u7406\u89e3\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nCreateToStringFromEnumFunc()\n\n        private static Func<T, String> CreateToStringFromEnumFunc<T>()\n        {\n            var tp = typeof(T);\n            DynamicMethod dm = new DynamicMethod(\"ToStringFromEnum\", typeof(String), new[] { tp });\n            ILGenerator il = dm.GetILGenerator();\n            Label defaultCase = il.DefineLabel();\n\n            var names = Enum.GetNames(tp);\n            //\u5404\u66dc\u65e5\u5206\u306e\u30e9\u30d9\u30eb\u3068default\u30e9\u30d9\u30eb\u3092\u4f5c\u6210\n            var caseLabels = new Label[names.Length + 1];\n            for (int i = 0; i < names.Length; i++)\n            {\n                caseLabels[i] = il.DefineLabel();\n            }\n            caseLabels[names.Length] = defaultCase;\n\n            il.Emit(OpCodes.Ldarg_0);//\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u308bDayOfWeek\u306e\u5024\u3092\u30b9\u30bf\u30c3\u30af\u306b\u30ed\u30fc\u30c9\n            il.Emit(OpCodes.Switch, caseLabels);//\u305d\u306e\u5024\u3092\u5143\u306bswitch\u3067\u5404\u30e9\u30d9\u30eb\u3078\u5206\u5c90\n\n            for (int i = 0; i < names.Length; i++)\n            {\n                // Case ??: return \"\";\u306e\u90e8\u5206\u306b\u306a\u308a\u307e\u3059\u3002\n                il.MarkLabel(caseLabels[i]);//\u5404\u66dc\u65e5\u306e\u30e9\u30d9\u30eb\u3092\u5b9a\u7fa9\u3002switch\u304b\u3089\u3053\u3053\u3078\u98db\u3093\u3067\u304f\u308b\n                il.Emit(OpCodes.Ldstr, names[i]);//\u66dc\u65e5\u306e\u6587\u5b57\u5217\uff08\"Sunday\"\u3068\u304b\uff09\u3092\u30b9\u30bf\u30c3\u30af\u306b\u30ed\u30fc\u30c9\n                il.Emit(OpCodes.Ret);//\u30ed\u30fc\u30c9\u3057\u305f\u5024\u3092\u547c\u3073\u51fa\u3057\u5143\u3078\u623b\u308a\u5024\u3068\u3057\u3066\u623b\u3059\n            }\n            //\u3053\u306e2\u884c\u304c default: throw new InvalidOperationException\u306b\u306a\u308a\u307e\u3059\u3002\n            il.MarkLabel(defaultCase);\n            il.ThrowException(typeof(InvalidOperationException));\n\n            var f = typeof(Func<,>);\n            var gf = f.MakeGenericType(tp, typeof(String));//Generic\u5f15\u6570\u3092\u5b9a\u7fa9\n            return (Func<T, String>)dm.CreateDelegate(gf);//\u4f5c\u6210\u3057\u305fIL\u30b3\u30fc\u30c9\u306e\u30ed\u30b8\u30c3\u30af\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\n        }\n\n\n\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306fEnum\u578b\u3092\u53d7\u3051\u53d6\u3063\u3066\u52d5\u7684\u306b\u30e1\u30bd\u30c3\u30c9\uff08Func<T, String>\uff09\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u4f8b\u3048\u3070DayOfWeek\u3092\u6e21\u3059\u3068Func<DayOfWeek, String>\u578b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\nCreateDayOfWeekMethod()\nFunc<DayOfWeek, String> md = CreateToStringFromEnumFunc<DayOfWeek>();\n\n\n\u3053\u306e\u6642\u306b\u751f\u6210\u3055\u308c\u308bIL\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\nILCode\n\n.method public hidebysig instance string \n        ToString(valuetype [mscorlib]System.DayOfWeek 'value') cil managed\n{\n  // \u30b3\u30fc\u30c9 \u30b5\u30a4\u30ba       101 (0x65)\n  .maxstack  1\n  .locals init ([0] valuetype [mscorlib]System.DayOfWeek V_0,\n           [1] string V_1)\n  IL_0000:  nop\n  IL_0001:  ldarg.1\n  IL_0002:  stloc.0\n  IL_0003:  ldloc.0\n  IL_0004:  switch     ( \n                        IL_0027,\n                        IL_002f,\n                        IL_0037,\n                        IL_003f,\n                        IL_0047,\n                        IL_004f,\n                        IL_0057)\n  IL_0025:  br.s       IL_005f\n  IL_0027:  ldstr      \"Sunday\"\n  IL_002c:  stloc.1\n  IL_002d:  br.s       IL_0063\n  IL_002f:  ldstr      \"Monday\"\n  IL_0034:  stloc.1\n  IL_0035:  br.s       IL_0063\n  IL_0037:  ldstr      \"Tuesday\"\n  IL_003c:  stloc.1\n  IL_003d:  br.s       IL_0063\n  IL_003f:  ldstr      \"Wednesday\"\n  IL_0044:  stloc.1\n  IL_0045:  br.s       IL_0063\n  IL_0047:  ldstr      \"Thursday\"\n  IL_004c:  stloc.1\n  IL_004d:  br.s       IL_0063\n  IL_004f:  ldstr      \"Friday\"\n  IL_0054:  stloc.1\n  IL_0055:  br.s       IL_0063\n  IL_0057:  ldstr      \"Saturday\"\n  IL_005c:  stloc.1\n  IL_005d:  br.s       IL_0063\n  IL_005f:  ldnull\n  IL_0060:  stloc.1\n  IL_0061:  br.s       IL_0063\n  IL_0063:  ldloc.1\n  IL_0064:  ret\n}\n\n\n\nC#\u3067\u8868\u73fe\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u3002\n\nmd\n\nString md(DayOfWeek value)\n{\n    switch (value)\n    {\n        case DayOfWeek.Friday: return \"Friday\";\n        case DayOfWeek.Monday: return \"Monday\";\n        //\u2026\u7701\u7565\n        default: throw new InvalidOperationException();\n    }\n}\n\n\n\u3053\u306e\u3088\u3046\u306bILGenerator\u3092\u4f7f\u7528\u3059\u308c\u3070\u52d5\u7684\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\n4.\u7279\u6b8a\u306a\u5b9a\u7fa9\u304c\u3055\u308c\u305fEnum\u3067\u3082\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u6539\u826f\u3059\u308b\n\u3057\u304b\u3057\u3053\u306eCreateToStringFromEnumFunc\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u30d0\u30b0\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u4e0b\u306e\u3088\u3046\u306aEnum\u306e\u5834\u5408\u306f\u3046\u307e\u304f\u52d5\u304d\u307e\u305b\u3093\u3002\n1.\u6700\u521d\u306e\u5024\u304c0\u4ee5\u5916\n2.\u578b\u304cInt32\u4ee5\u5916\uff08Byte,Int64\u306a\u3069\uff09\n3.\u98db\u3073\u98db\u3073\u306e\u5024\n4.\u7bc4\u56f2\u5916\u306e\u5024\u304c\u6765\u305f\u5834\u5408\u2192((DayOfWeek)(-1))\u306a\u3069\n\u3068\u3044\u3046\u3088\u3046\u306a\u5b9a\u7fa9\u304c\u3055\u308c\u305fEnum\u306e\u5834\u5408\u306f\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\n\npublic enum BaseIsNotZeroEnum : byte\n{\n    V2 = 2,\n    V3,\n    V4,\n    V5,\n    V6,\n}\npublic enum ByteEnum : byte\n{\n    V0 = 0,\n    V2 = 2,\n    V4 = 4,\n}\npublic enum LongEnum : long\n{\n    V0 = 0,\n    V2 = 2,\n    V1620100 = 1620100,\n    V23372036854775807 = 23372036854775807,\n}\n\n\n\u3053\u3046\u3044\u3063\u305fEnum\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308a\u76f4\u3057\u307e\u3059\u30020\u304b\u3089\u59cb\u307e\u308a\u9023\u7d9a\u5024\u3092\u6301\u3064Enum\u306e\u5834\u5408\u306fswitch\u6587\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306fif\u6587\u3067\u51e6\u7406\u3092\u3059\u308b\u3088\u3046\u306b\u6539\u826f\u3057\u307e\u3059\u3002\u307e\u305f\u7bc4\u56f2\u5916\u306e\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306f\u4f8b\u5916\u3092\u6295\u3052\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\n\nCreateToStringFromEnumFunc()\n\nprivate static Func<T, String> CreateToStringFromEnumFunc<T>()\n{\n    var tp = typeof(T);\n    DynamicMethod dm = new DynamicMethod(\"ToStringFromEnum\", typeof(String), new[] { tp });\n    ILGenerator il = dm.GetILGenerator();\n\n    var values = ((T[])Enum.GetValues(tp)).Select(el => Convert.ToInt64(el)).ToList();\n    var names = Enum.GetNames(tp);\n\n    var returnLabel = il.DefineLabel();\n    //Have any value different from index number\n    if (values.Where((el, i) => el != i).Any())\n    {\n        var result = il.DeclareLocal(typeof(String));\n\n        for (int i = 0; i < values.Count; i++)\n        {\n            //\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u305fEnum\u306e\u5024\u3092\u30b9\u30bf\u30c3\u30af\u3078\u7f6e\u304f\n            il.Emit(OpCodes.Ldarg_0);\n            //Int64(Conv_I8)\u3078\u30b3\u30f3\u30d0\u30fc\u30c8\n            il.Emit(OpCodes.Conv_I8);\n            //i\u756a\u76ee\u306eEnum\u306e\u5024\u3092Int64\u3067\u30b9\u30bf\u30c3\u30af\u3078\u7f6e\u304f\n            il.Emit(OpCodes.Ldc_I8, values[i]);\n            //\u30b9\u30bf\u30c3\u30af\u3078\u7f6e\u3044\u305f\u4e8c\u3064\u306e\u5024\u3092\u6bd4\u8f03\n            il.Emit(OpCodes.Ceq);\n\n            var label = il.DefineLabel();\n            il.Emit(OpCodes.Brfalse, label);//\u6bd4\u8f03\u3057\u3066false\u306e\u5834\u5408\u306f\u3053\u306e4\u884c\u4e0b\u306eil.MarkLabel(label);\u307e\u3067\u30b8\u30e3\u30f3\u30d7\n\n            //\u5024\u304c\u4e00\u81f4\u3057\u305f\u5834\u5408\u3001\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u4fdd\u5b58\u3057\u3066il.MarkLabel(returnLabel);\u3078\u30b8\u30e3\u30f3\u30d7\n            il.Emit(OpCodes.Ldstr, names[i]);\n            il.Emit(OpCodes.Stloc, result);\n            il.Emit(OpCodes.Br, returnLabel);\n\n            il.MarkLabel(label);\n        }\n        //\u3069\u306eif\u6587\u306b\u3082\u30de\u30c3\u30c1\u3057\u306a\u3044\u2192\u7bc4\u56f2\u5916\u306e\u5024\u3068\u3044\u3046\u3053\u3068\u3067\u4f8b\u5916\u3092\u6295\u3052\u308b\n        il.ThrowException(typeof(InvalidOperationException));\n\n        il.MarkLabel(returnLabel);\n        il.Emit(OpCodes.Ldloc, result);//\u4fdd\u5b58\u3057\u305f\u5024\u3092\u547c\u3073\u51fa\u3057\u3066\n        il.Emit(OpCodes.Ret);//\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3059\n    }\n    else\n    {\n        //if (arg1 < 0) \u306a\u3089il.MarkLabel(returnLabel);\u3078\u30b8\u30e3\u30f3\u30d7\n        il.Emit(OpCodes.Ldarg_0);\n        il.Emit(OpCodes.Conv_I8);\n        il.Emit(OpCodes.Ldc_I4, 0);\n        il.Emit(OpCodes.Conv_I8);\n        il.Emit(OpCodes.Clt);//lt\u306fLess Than\u306e\u7565\u3002val1 < val2\n        il.Emit(OpCodes.Brtrue, returnLabel);\n        //if (arg1 > Enum.GetValues().Length - 1) \u306a\u3089il.MarkLabel(returnLabel);\u3078\u30b8\u30e3\u30f3\u30d7\n        il.Emit(OpCodes.Ldarg_0);\n        il.Emit(OpCodes.Conv_I8);\n        il.Emit(OpCodes.Ldc_I4, names.Length - 1);\n        il.Emit(OpCodes.Conv_I8);\n        il.Emit(OpCodes.Cgt);//gt\u306fGreater Than\u306e\u7565\u3002val1 > val2\n        il.Emit(OpCodes.Brtrue, returnLabel);\n\n        //\u3053\u3053\u304b\u3089switch\u6587\u958b\u59cb\n        il.Emit(OpCodes.Ldarg_0);\n        var caseLabels = new Label[names.Length + 1];\n        for (int i = 0; i < names.Length; i++)\n        {\n            caseLabels[i] = il.DefineLabel();\n        }\n        Label defaultCase = il.DefineLabel();\n        caseLabels[names.Length] = defaultCase;\n        il.Emit(OpCodes.Switch, caseLabels);\n        for (int i = 0; i < names.Length; i++)\n        {\n            // Case ??: return \"\";\n            il.MarkLabel(caseLabels[i]);\n            il.Emit(OpCodes.Ldstr, names[i]);\n            il.Emit(OpCodes.Ret);\n        }\n        il.MarkLabel(defaultCase);\n        il.ThrowException(typeof(InvalidOperationException));\n\n        il.MarkLabel(returnLabel);\n        il.ThrowException(typeof(InvalidOperationException));\n    }\n\n    var f = typeof(Func<,>);\n    var gf = f.MakeGenericType(tp, typeof(String));\n    return (Func<T, String>)dm.CreateDelegate(gf);\n}\n\n\n\n\u3053\u308c\u3067\u304d\u3061\u3093\u3068\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n5.\u5168\u3066\u306eEnum\u306b\u5bfe\u3057\u3066\u5229\u7528\u53ef\u80fd\u306aToStringFromEnum\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\n\u4ed5\u4e0a\u3052\u3067\u3059\u3002\u751f\u6210\u51e6\u7406\u81ea\u4f53\u306f\u305d\u3053\u305d\u3053\u91cd\u305f\u3044\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\u3002\u751f\u6210\u3057\u3066\u3067\u304d\u3042\u304c\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u306f\u4e0d\u5909\uff08\u4f55\u56de\u751f\u6210\u3057\u3066\u3082\u7d50\u679c\u306f\u4e00\u7dd2\uff09\u306a\u306e\u3067Dictionary\u306b\u3067\u3082\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u5168\u90e8\u3092\u307e\u3068\u3081\u305f\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002WEB\u306a\u3069\u3067\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u547c\u3070\u308c\u3066\u3082\u5927\u4e08\u592b\u306a\u3088\u3046\u306bConcurrentDictionary\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nEnumExtensions.cs\n\npublic static class EnumExtensions\n{\n    private static ConcurrentDictionary<Type, MulticastDelegate> _ToStringFromEnumMethods = new ConcurrentDictionary<Type, MulticastDelegate>();\n\n    public static String ToStringOrNullFromEnum<T>(this Nullable<T> value)\n        where T : struct\n    {\n        if (value.HasValue == true) return ToStringFromEnum(value.Value);\n        return null;\n    }\n    public static String ToStringFromEnum<T>(this Nullable<T> value)\n        where T : struct\n    {\n        if (value.HasValue == true) return ToStringFromEnum(value.Value);\n        return \"\";\n    }\n    public static String ToStringFromEnum<T>(this T value)\n        where T : struct\n    {\n        var tp = typeof(T);\n        if (tp.IsEnum == false) throw new ArgumentException(\"value must be a enum type\");\n\n        MulticastDelegate md = null;\n        if (_ToStringFromEnumMethods.TryGetValue(tp, out md) == false)\n        {\n            var aa = tp.GetCustomAttributes(typeof(FlagsAttribute), false);\n            if (aa.Length == 0)\n            {\n                md = CreateToStringFromEnumFunc<T>();\n            }\n            _ToStringFromEnumMethods[tp] = md;\n        }\n        // Flags\n        if (md == null) return value.ToString().Replace(\" \", \"\");\n\n        var f = (Func<T, String>)md;\n        return f(value);\n    }\n    private static Func<T, String> CreateToStringFromEnumFunc<T>()\n    {\n        var tp = typeof(T);\n        DynamicMethod dm = new DynamicMethod(\"ToStringFromEnum\", typeof(String), new[] { tp });\n        ILGenerator il = dm.GetILGenerator();\n\n        var values = ((T[])Enum.GetValues(tp)).Select(el => Convert.ToInt64(el)).ToList();\n        var names = Enum.GetNames(tp);\n\n        var returnLabel = il.DefineLabel();\n        //Have any value different from index number\n        if (values.Where((el, i) => el != i).Any())\n        {\n            var result = il.DeclareLocal(typeof(String));\n\n            for (int i = 0; i < values.Count; i++)\n            {\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Conv_I8);\n                il.Emit(OpCodes.Ldc_I8, values[i]);\n                il.Emit(OpCodes.Ceq);\n\n                var label = il.DefineLabel();\n                il.Emit(OpCodes.Brfalse, label);\n\n                il.Emit(OpCodes.Ldstr, names[i]);\n                il.Emit(OpCodes.Stloc, result);\n                il.Emit(OpCodes.Br, returnLabel);\n\n                il.MarkLabel(label);\n            }\n            il.ThrowException(typeof(InvalidOperationException));\n\n            il.MarkLabel(returnLabel);\n            il.Emit(OpCodes.Ldloc, result);\n            il.Emit(OpCodes.Ret);\n        }\n        else\n        {\n            il.Emit(OpCodes.Ldarg_0);\n            il.Emit(OpCodes.Conv_I8);\n            il.Emit(OpCodes.Ldc_I4, 0);\n            il.Emit(OpCodes.Conv_I8);\n            il.Emit(OpCodes.Clt);\n            il.Emit(OpCodes.Brtrue, returnLabel);\n\n            il.Emit(OpCodes.Ldarg_0);\n            il.Emit(OpCodes.Conv_I8);\n            il.Emit(OpCodes.Ldc_I4, names.Length - 1);\n            il.Emit(OpCodes.Conv_I8);\n            il.Emit(OpCodes.Cgt);\n            il.Emit(OpCodes.Brtrue, returnLabel);\n\n            il.Emit(OpCodes.Ldarg_0);\n            var caseLabels = new Label[names.Length + 1];\n            for (int i = 0; i < names.Length; i++)\n            {\n                caseLabels[i] = il.DefineLabel();\n            }\n            Label defaultCase = il.DefineLabel();\n            caseLabels[names.Length] = defaultCase;\n            il.Emit(OpCodes.Switch, caseLabels);\n            for (int i = 0; i < names.Length; i++)\n            {\n                // Case ??: return \"\";\n                il.MarkLabel(caseLabels[i]);\n                il.Emit(OpCodes.Ldstr, names[i]);\n                il.Emit(OpCodes.Ret);\n            }\n            il.MarkLabel(defaultCase);\n            il.ThrowException(typeof(InvalidOperationException));\n\n            il.MarkLabel(returnLabel);\n            il.ThrowException(typeof(InvalidOperationException));\n        }\n\n        var f = typeof(Func<,>);\n        var gf = f.MakeGenericType(tp, typeof(String));\n        return (Func<T, String>)dm.CreateDelegate(gf);\n    }\n}\n\n\n\u203bEnum\u304cFlagsAttribute\u306e\u5834\u5408\u306f\u901a\u5e38\u306eToString\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u306f\n1.\u3069\u3046\u51fa\u529b\u3059\u308b\u304b\u4ed5\u69d8\u304c\u6c7a\u5b9a\u3057\u3065\u3089\u3044\n\u2192One,Two\u306a\u306e\u304bOne:Two\u3068\u30b3\u30ed\u30f3\u3092\u4f7f\u7528\u3059\u308b\u306e\u304bOne, Two\u3068\u30b9\u30da\u30fc\u30b9\u3092\u3044\u308c\u308b\u3079\u304d\u306a\u306e\u304b\u306a\u3069\u3002\n2.\u4e0a\u8a18\u3092\u554f\u984c\u3082\u3042\u308aIL\u30b3\u30fc\u30c9\u306e\u4f5c\u6210\u304c\u975e\u5e38\u306b\u9762\u5012\n\u306a\u306e\u3067\u3084\u3063\u3066\u306a\u3044\u3067\u3059\u3002\n\u5f93\u3063\u3066FlagsAttribute\u306e\u6642\u306f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u901a\u5e38\u3068\u5909\u308f\u308a\u307e\u305b\u3093\u3002\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u6c17\u306b\u306a\u308b\u306e\u306a\u3089\u3070\u5225\u9014\u5404\u81ea\u3067\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n6.\u54c1\u8cea\u3092\u78ba\u4fdd\u3059\u308b\u305f\u3081\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3059\u308b\n\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u3092\u4fdd\u3064\u305f\u3081\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3082\u4f5c\u3063\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\nTestEnum.cs\n\n[TestClass]\npublic class EnumExtensionsTest\n{\n    public enum BaseIsNotZeroEnum : byte\n    {\n        V2 = 2,\n        V3,\n        V4,\n        V5,\n        V6,\n    }\n    public enum ByteEnum : byte\n    {\n        V0 = 0,\n        V2 = 2,\n        V4 = 4,\n    }\n    public enum LongEnum : long\n    {\n        V0 = 0,\n        V2 = 2,\n        V1620100 = 1620100,\n        V23372036854775807 = 23372036854775807,\n    }\n    [FlagsAttribute]\n    enum FlagsEnum\n    {\n        None = 0x00, // 0000 0000\n        One = 0x01, // 0000 0001\n        Two = 0x02, // 0000 0010 \n        Three = 0x04, // 0000 0100\n        Four = 0x08, // 0000 1000\n        All = 0x0F // 0000 1111\n    }\n    [TestMethod]\n    public void BasicEnumTest()\n    {\n        Assert.AreEqual(\"Friday\", DayOfWeek.Friday.ToStringFromEnum());\n        Assert.AreEqual(\"Wednesday\", DayOfWeek.Wednesday.ToStringFromEnum());\n        Assert.AreEqual(\"Saturday\", DayOfWeek.Saturday.ToStringFromEnum());\n        Assert.AreEqual(\"Friday\", ((DayOfWeek)(5)).ToStringFromEnum());\n        Assert.AreEqual(\"Saturday\", ((DayOfWeek)(6)).ToStringFromEnum());\n    }\n    [TestMethod]\n    public void BaseIsNotZeroEnumTest()\n    {\n        Assert.AreEqual(\"V2\", BaseIsNotZeroEnum.V2.ToStringFromEnum());\n        Assert.AreEqual(\"V3\", BaseIsNotZeroEnum.V3.ToStringFromEnum());\n        Assert.AreEqual(\"V4\", BaseIsNotZeroEnum.V4.ToStringFromEnum());\n    }\n    [TestMethod]\n    [ExpectedException(typeof(InvalidOperationException))]\n    public void EmptyValueTest()\n    {\n        String s = \"\";\n        s = ((DayOfWeek)(-1)).ToStringFromEnum();\n        s = ((DayOfWeek)(7)).ToStringFromEnum();\n        s = ((HttpStatusCode)(3)).ToStringFromEnum();\n    }\n    [TestMethod]\n    public void ByteEnumTest()\n    {\n        Assert.AreEqual(\"V0\", ByteEnum.V0.ToStringFromEnum());\n        Assert.AreEqual(\"V2\", ByteEnum.V2.ToStringFromEnum());\n        Assert.AreEqual(\"V4\", ByteEnum.V4.ToStringFromEnum());\n    }\n    [TestMethod]\n    public void LongEnumTest()\n    {\n        Assert.AreEqual(\"V0\", LongEnum.V0.ToStringFromEnum());\n        Assert.AreEqual(\"V2\", LongEnum.V2.ToStringFromEnum());\n        Assert.AreEqual(\"V1620100\", LongEnum.V1620100.ToStringFromEnum());\n        Assert.AreEqual(\"V23372036854775807\", LongEnum.V23372036854775807.ToStringFromEnum());\n    }\n    [TestMethod]\n    public void FlagEnumTest()\n    {\n        Assert.AreEqual(\"One\", FlagsEnum.One.ToStringFromEnum());\n        Assert.AreEqual(\"One,Two\", (FlagsEnum.One | FlagsEnum.Two).ToStringFromEnum());\n        Assert.AreEqual(\"Three\", FlagsEnum.Three.ToStringFromEnum());\n        Assert.AreEqual(\"Four\", FlagsEnum.Four.ToStringFromEnum());\n    }\n    [TestMethod]\n    public void HttpStatusCodeEnumTest()\n    {\n        Assert.AreEqual(\"Continue\", HttpStatusCode.Continue.ToStringFromEnum());\n        Assert.AreEqual(\"BadRequest\", HttpStatusCode.BadRequest.ToStringFromEnum());\n        Assert.AreEqual(\"Forbidden\", HttpStatusCode.Forbidden.ToStringFromEnum());\n        Assert.AreEqual(\"InternalServerError\", HttpStatusCode.InternalServerError.ToStringFromEnum());\n        Assert.AreEqual(\"OK\", ((HttpStatusCode)(200)).ToStringFromEnum());\n    }\n}\n\n\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u6bd4\u8f03\u7684\u7c21\u5358\u306bEnum\u306eToString\u30e1\u30bd\u30c3\u30c9\u306e\u8d85\u9ad8\u901f\u304b\u3064\u4fdd\u5b88\u6027\u306b\u3082\u512a\u308c\u305f\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u3054\u5229\u7528\u306f\u3054\u81ea\u7531\u306b\u3069\u3046\u305e\u3002\n\u203b\u4fee\u6b63\u5c65\u6b74\n2015/12/08 HttpStatusCode\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u30d0\u30b0\u304c\u3042\u3063\u305f\u306e\u3067\u4fee\u6b63\u3002\u7bc4\u56f2\u5916\u306e\u5024\u306e\u5834\u5408\u306f\u4f8b\u5916\u3092\u6295\u3052\u308b\u3088\u3046\u306b\u4fee\u6b63\u3002\n#1.Enum.ToString\u306e\u5185\u90e8\u5b9f\u88c5\u3068\u3088\u304f\u3042\u308b\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\n\nEnum\u306eToString\u306f\u975e\u5e38\u306b\u9045\u3044\u3067\u3059\u3002\n\n```csharp:DayOfWeek.ToStirng()\nvar dw = DayOfWeek.Sunday;\nvar dwText = dw.ToString();\n```\n\u3053\u308c\u306f\u5185\u90e8\u3067\u306f\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n```csharp:Enum.ToString()\npublic override string ToString()\n{\n    Type type = base.GetType();\n    object obj2 = ((RtFieldInfo)GetValueField(type)).InternalGetValue(this, false);\n    return InternalFormat(type, obj2);\n}\n```\n\n\u53c2\u8003\u30b5\u30a4\u30c8\u2192http://www.dotnetperls.com/enum-tostring\n\n\u65e9\u304f\u3059\u308b\u305f\u3081\u306b\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n```csharp:EnumExtensions.ToString()\n\n    public static class EnumEx\n    {\n        public static String ToStringFromEnum(this DayOfWeek value)\n        {\n            switch (value)\n            {\n                case DayOfWeek.Friday: return \"Friday\";\n                case DayOfWeek.Monday: return \"Monday\";\n                //\u2026\u7701\u7565\n                default: throw new InvalidOperationException();\n            }\n        }\n    }\n\n```\n\n\u3060\u3044\u305f\u3044100\u500d\u4ee5\u4e0a\u30b9\u30d4\u30fc\u30c9\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u3042\u306a\u305f\u304c\u4f7f\u3046\u5168\u3066\u306eEnum\u306b\u5b9a\u7fa9\u3057\u3066\u3042\u3052\u308c\u3070\u554f\u984c\u7121\u3057\u3067\u3059\u3002\n\n#2.\u5168\u90e8\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u5927\u5909\u2192ILGenerator\u3092\u5229\u7528\u3059\u308b\n\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5168\u3066\u306eEnum\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u3066\u306f\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u7c21\u5358\u306b\u601d\u3044\u3064\u304f\u65b9\u6cd5\u3068\u3057\u3066\u306fT4\u3084\u30b3\u30fc\u30c9\u30b9\u30cb\u30da\u30c3\u30c8\u306a\u3069\u3067\u81ea\u52d5\u751f\u6210\u3068\u3044\u3046\u306e\u304c\u601d\u3044\u3064\u304d\u307e\u3059\u3002\u305f\u3060\u3053\u308c\u3089\u306e\u81ea\u52d5\u751f\u6210\u306e\u65b9\u6cd5\u306fEnum\u306b\u5909\u66f4\u304c\u3042\u3063\u305f\u3068\u304d\u306b\u518d\u5ea6\u751f\u6210\u51e6\u7406\u3092\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u4fdd\u5b88\u6027\u304c\u5b8c\u74a7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u3053\u3067\u306f\u3055\u3089\u306b\u4e00\u6b69\u5148\u306e\u65b9\u6cd5\u3068\u3057\u3066\u300c\u5b8c\u74a7\u306a\u4fdd\u5b88\u6027\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u4e21\u7acb\u3059\u308b\u65b9\u6cd5\u300d\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n.NET\u3067\u306fILGenerator\u30af\u30e9\u30b9\u3068\u3044\u3046\u306e\u304c\u3042\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u4e2d\u306bIL\u30b3\u30fc\u30c9\u3092\u52d5\u7684\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u4eca\u56de\u306f\u52d5\u7684\u306bFunc&lt;Enum, String>\u30e1\u30bd\u30c3\u30c9\u3092\u751f\u6210\u3057\u3001\u305d\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3068\u3044\u3046\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\n#3.\u307e\u305a\u306fDayOfWeek\u3067\u52d5\u4f5c\u3059\u308b\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\n\u3053\u308c\u304b\u3089\u4e0a\u8a18\u306eswitch\u6587\u306e\u30ed\u30b8\u30c3\u30af\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u52d5\u7684\u306b\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002ILGenerator\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u3063\u3066IL\u30b3\u30fc\u30c9\u3092\u76f4\u63a5\u8a18\u8ff0\u3057\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u7c21\u5358\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u5165\u308c\u3066\u304a\u304d\u307e\u3057\u305f\u306e\u3067\u305d\u3053\u305d\u3053\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u308f\u304b\u308b\u4eba\u306a\u3089\u7406\u89e3\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```csharp:CreateToStringFromEnumFunc()\n\n        private static Func<T, String> CreateToStringFromEnumFunc<T>()\n        {\n            var tp = typeof(T);\n            DynamicMethod dm = new DynamicMethod(\"ToStringFromEnum\", typeof(String), new[] { tp });\n            ILGenerator il = dm.GetILGenerator();\n            Label defaultCase = il.DefineLabel();\n\n            var names = Enum.GetNames(tp);\n            //\u5404\u66dc\u65e5\u5206\u306e\u30e9\u30d9\u30eb\u3068default\u30e9\u30d9\u30eb\u3092\u4f5c\u6210\n            var caseLabels = new Label[names.Length + 1];\n            for (int i = 0; i < names.Length; i++)\n            {\n                caseLabels[i] = il.DefineLabel();\n            }\n            caseLabels[names.Length] = defaultCase;\n\n            il.Emit(OpCodes.Ldarg_0);//\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u308bDayOfWeek\u306e\u5024\u3092\u30b9\u30bf\u30c3\u30af\u306b\u30ed\u30fc\u30c9\n            il.Emit(OpCodes.Switch, caseLabels);//\u305d\u306e\u5024\u3092\u5143\u306bswitch\u3067\u5404\u30e9\u30d9\u30eb\u3078\u5206\u5c90\n\n            for (int i = 0; i < names.Length; i++)\n            {\n                // Case ??: return \"\";\u306e\u90e8\u5206\u306b\u306a\u308a\u307e\u3059\u3002\n                il.MarkLabel(caseLabels[i]);//\u5404\u66dc\u65e5\u306e\u30e9\u30d9\u30eb\u3092\u5b9a\u7fa9\u3002switch\u304b\u3089\u3053\u3053\u3078\u98db\u3093\u3067\u304f\u308b\n                il.Emit(OpCodes.Ldstr, names[i]);//\u66dc\u65e5\u306e\u6587\u5b57\u5217\uff08\"Sunday\"\u3068\u304b\uff09\u3092\u30b9\u30bf\u30c3\u30af\u306b\u30ed\u30fc\u30c9\n                il.Emit(OpCodes.Ret);//\u30ed\u30fc\u30c9\u3057\u305f\u5024\u3092\u547c\u3073\u51fa\u3057\u5143\u3078\u623b\u308a\u5024\u3068\u3057\u3066\u623b\u3059\n            }\n            //\u3053\u306e2\u884c\u304c default: throw new InvalidOperationException\u306b\u306a\u308a\u307e\u3059\u3002\n            il.MarkLabel(defaultCase);\n            il.ThrowException(typeof(InvalidOperationException));\n\n            var f = typeof(Func<,>);\n            var gf = f.MakeGenericType(tp, typeof(String));//Generic\u5f15\u6570\u3092\u5b9a\u7fa9\n            return (Func<T, String>)dm.CreateDelegate(gf);//\u4f5c\u6210\u3057\u305fIL\u30b3\u30fc\u30c9\u306e\u30ed\u30b8\u30c3\u30af\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\n        }\n\n```\n\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306fEnum\u578b\u3092\u53d7\u3051\u53d6\u3063\u3066\u52d5\u7684\u306b\u30e1\u30bd\u30c3\u30c9\uff08Func&lt;T, String>\uff09\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u4f8b\u3048\u3070DayOfWeek\u3092\u6e21\u3059\u3068Func&lt;DayOfWeek, String>\u578b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\n```csharp:CreateDayOfWeekMethod()\nFunc<DayOfWeek, String> md = CreateToStringFromEnumFunc<DayOfWeek>();\n```\n\n\u3053\u306e\u6642\u306b\u751f\u6210\u3055\u308c\u308bIL\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n```csharp:ILCode\n\n.method public hidebysig instance string \n        ToString(valuetype [mscorlib]System.DayOfWeek 'value') cil managed\n{\n  // \u30b3\u30fc\u30c9 \u30b5\u30a4\u30ba       101 (0x65)\n  .maxstack  1\n  .locals init ([0] valuetype [mscorlib]System.DayOfWeek V_0,\n           [1] string V_1)\n  IL_0000:  nop\n  IL_0001:  ldarg.1\n  IL_0002:  stloc.0\n  IL_0003:  ldloc.0\n  IL_0004:  switch     ( \n                        IL_0027,\n                        IL_002f,\n                        IL_0037,\n                        IL_003f,\n                        IL_0047,\n                        IL_004f,\n                        IL_0057)\n  IL_0025:  br.s       IL_005f\n  IL_0027:  ldstr      \"Sunday\"\n  IL_002c:  stloc.1\n  IL_002d:  br.s       IL_0063\n  IL_002f:  ldstr      \"Monday\"\n  IL_0034:  stloc.1\n  IL_0035:  br.s       IL_0063\n  IL_0037:  ldstr      \"Tuesday\"\n  IL_003c:  stloc.1\n  IL_003d:  br.s       IL_0063\n  IL_003f:  ldstr      \"Wednesday\"\n  IL_0044:  stloc.1\n  IL_0045:  br.s       IL_0063\n  IL_0047:  ldstr      \"Thursday\"\n  IL_004c:  stloc.1\n  IL_004d:  br.s       IL_0063\n  IL_004f:  ldstr      \"Friday\"\n  IL_0054:  stloc.1\n  IL_0055:  br.s       IL_0063\n  IL_0057:  ldstr      \"Saturday\"\n  IL_005c:  stloc.1\n  IL_005d:  br.s       IL_0063\n  IL_005f:  ldnull\n  IL_0060:  stloc.1\n  IL_0061:  br.s       IL_0063\n  IL_0063:  ldloc.1\n  IL_0064:  ret\n}\n\n```\n\nC#\u3067\u8868\u73fe\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u3002\n\n```csharp:md\n\nString md(DayOfWeek value)\n{\n    switch (value)\n    {\n        case DayOfWeek.Friday: return \"Friday\";\n        case DayOfWeek.Monday: return \"Monday\";\n        //\u2026\u7701\u7565\n        default: throw new InvalidOperationException();\n    }\n}\n```\n\u3053\u306e\u3088\u3046\u306bILGenerator\u3092\u4f7f\u7528\u3059\u308c\u3070\u52d5\u7684\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n#4.\u7279\u6b8a\u306a\u5b9a\u7fa9\u304c\u3055\u308c\u305fEnum\u3067\u3082\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u6539\u826f\u3059\u308b\n\n\u3057\u304b\u3057\u3053\u306eCreateToStringFromEnumFunc\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u30d0\u30b0\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u4e0b\u306e\u3088\u3046\u306aEnum\u306e\u5834\u5408\u306f\u3046\u307e\u304f\u52d5\u304d\u307e\u305b\u3093\u3002\n1.\u6700\u521d\u306e\u5024\u304c0\u4ee5\u5916\n2.\u578b\u304cInt32\u4ee5\u5916\uff08Byte,Int64\u306a\u3069\uff09\n3.\u98db\u3073\u98db\u3073\u306e\u5024\n4.\u7bc4\u56f2\u5916\u306e\u5024\u304c\u6765\u305f\u5834\u5408\u2192((DayOfWeek)(-1))\u306a\u3069\n\u3068\u3044\u3046\u3088\u3046\u306a\u5b9a\u7fa9\u304c\u3055\u308c\u305fEnum\u306e\u5834\u5408\u306f\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\n```csharp\n\n\npublic enum BaseIsNotZeroEnum : byte\n{\n    V2 = 2,\n    V3,\n    V4,\n    V5,\n    V6,\n}\npublic enum ByteEnum : byte\n{\n    V0 = 0,\n    V2 = 2,\n    V4 = 4,\n}\npublic enum LongEnum : long\n{\n    V0 = 0,\n    V2 = 2,\n    V1620100 = 1620100,\n    V23372036854775807 = 23372036854775807,\n}\n\n```\n\n\u3053\u3046\u3044\u3063\u305fEnum\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308a\u76f4\u3057\u307e\u3059\u30020\u304b\u3089\u59cb\u307e\u308a\u9023\u7d9a\u5024\u3092\u6301\u3064Enum\u306e\u5834\u5408\u306fswitch\u6587\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306fif\u6587\u3067\u51e6\u7406\u3092\u3059\u308b\u3088\u3046\u306b\u6539\u826f\u3057\u307e\u3059\u3002\u307e\u305f\u7bc4\u56f2\u5916\u306e\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306f\u4f8b\u5916\u3092\u6295\u3052\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3059\u3002\n\n```csharp:CreateToStringFromEnumFunc<T>()\n\nprivate static Func<T, String> CreateToStringFromEnumFunc<T>()\n{\n    var tp = typeof(T);\n    DynamicMethod dm = new DynamicMethod(\"ToStringFromEnum\", typeof(String), new[] { tp });\n    ILGenerator il = dm.GetILGenerator();\n\n    var values = ((T[])Enum.GetValues(tp)).Select(el => Convert.ToInt64(el)).ToList();\n    var names = Enum.GetNames(tp);\n\n    var returnLabel = il.DefineLabel();\n    //Have any value different from index number\n    if (values.Where((el, i) => el != i).Any())\n    {\n        var result = il.DeclareLocal(typeof(String));\n\n        for (int i = 0; i < values.Count; i++)\n        {\n            //\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u305fEnum\u306e\u5024\u3092\u30b9\u30bf\u30c3\u30af\u3078\u7f6e\u304f\n            il.Emit(OpCodes.Ldarg_0);\n            //Int64(Conv_I8)\u3078\u30b3\u30f3\u30d0\u30fc\u30c8\n            il.Emit(OpCodes.Conv_I8);\n            //i\u756a\u76ee\u306eEnum\u306e\u5024\u3092Int64\u3067\u30b9\u30bf\u30c3\u30af\u3078\u7f6e\u304f\n            il.Emit(OpCodes.Ldc_I8, values[i]);\n            //\u30b9\u30bf\u30c3\u30af\u3078\u7f6e\u3044\u305f\u4e8c\u3064\u306e\u5024\u3092\u6bd4\u8f03\n            il.Emit(OpCodes.Ceq);\n\n            var label = il.DefineLabel();\n            il.Emit(OpCodes.Brfalse, label);//\u6bd4\u8f03\u3057\u3066false\u306e\u5834\u5408\u306f\u3053\u306e4\u884c\u4e0b\u306eil.MarkLabel(label);\u307e\u3067\u30b8\u30e3\u30f3\u30d7\n\n            //\u5024\u304c\u4e00\u81f4\u3057\u305f\u5834\u5408\u3001\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u4fdd\u5b58\u3057\u3066il.MarkLabel(returnLabel);\u3078\u30b8\u30e3\u30f3\u30d7\n            il.Emit(OpCodes.Ldstr, names[i]);\n            il.Emit(OpCodes.Stloc, result);\n            il.Emit(OpCodes.Br, returnLabel);\n\n            il.MarkLabel(label);\n        }\n        //\u3069\u306eif\u6587\u306b\u3082\u30de\u30c3\u30c1\u3057\u306a\u3044\u2192\u7bc4\u56f2\u5916\u306e\u5024\u3068\u3044\u3046\u3053\u3068\u3067\u4f8b\u5916\u3092\u6295\u3052\u308b\n        il.ThrowException(typeof(InvalidOperationException));\n\n        il.MarkLabel(returnLabel);\n        il.Emit(OpCodes.Ldloc, result);//\u4fdd\u5b58\u3057\u305f\u5024\u3092\u547c\u3073\u51fa\u3057\u3066\n        il.Emit(OpCodes.Ret);//\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3059\n    }\n    else\n    {\n        //if (arg1 < 0) \u306a\u3089il.MarkLabel(returnLabel);\u3078\u30b8\u30e3\u30f3\u30d7\n        il.Emit(OpCodes.Ldarg_0);\n        il.Emit(OpCodes.Conv_I8);\n        il.Emit(OpCodes.Ldc_I4, 0);\n        il.Emit(OpCodes.Conv_I8);\n        il.Emit(OpCodes.Clt);//lt\u306fLess Than\u306e\u7565\u3002val1 < val2\n        il.Emit(OpCodes.Brtrue, returnLabel);\n        //if (arg1 > Enum.GetValues().Length - 1) \u306a\u3089il.MarkLabel(returnLabel);\u3078\u30b8\u30e3\u30f3\u30d7\n        il.Emit(OpCodes.Ldarg_0);\n        il.Emit(OpCodes.Conv_I8);\n        il.Emit(OpCodes.Ldc_I4, names.Length - 1);\n        il.Emit(OpCodes.Conv_I8);\n        il.Emit(OpCodes.Cgt);//gt\u306fGreater Than\u306e\u7565\u3002val1 > val2\n        il.Emit(OpCodes.Brtrue, returnLabel);\n\n        //\u3053\u3053\u304b\u3089switch\u6587\u958b\u59cb\n        il.Emit(OpCodes.Ldarg_0);\n        var caseLabels = new Label[names.Length + 1];\n        for (int i = 0; i < names.Length; i++)\n        {\n            caseLabels[i] = il.DefineLabel();\n        }\n        Label defaultCase = il.DefineLabel();\n        caseLabels[names.Length] = defaultCase;\n        il.Emit(OpCodes.Switch, caseLabels);\n        for (int i = 0; i < names.Length; i++)\n        {\n            // Case ??: return \"\";\n            il.MarkLabel(caseLabels[i]);\n            il.Emit(OpCodes.Ldstr, names[i]);\n            il.Emit(OpCodes.Ret);\n        }\n        il.MarkLabel(defaultCase);\n        il.ThrowException(typeof(InvalidOperationException));\n\n        il.MarkLabel(returnLabel);\n        il.ThrowException(typeof(InvalidOperationException));\n    }\n\n    var f = typeof(Func<,>);\n    var gf = f.MakeGenericType(tp, typeof(String));\n    return (Func<T, String>)dm.CreateDelegate(gf);\n}\n\n```\n\u3053\u308c\u3067\u304d\u3061\u3093\u3068\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n#5.\u5168\u3066\u306eEnum\u306b\u5bfe\u3057\u3066\u5229\u7528\u53ef\u80fd\u306aToStringFromEnum\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3059\u308b\n\n\u4ed5\u4e0a\u3052\u3067\u3059\u3002\u751f\u6210\u51e6\u7406\u81ea\u4f53\u306f\u305d\u3053\u305d\u3053\u91cd\u305f\u3044\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\u3002\u751f\u6210\u3057\u3066\u3067\u304d\u3042\u304c\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u306f\u4e0d\u5909\uff08\u4f55\u56de\u751f\u6210\u3057\u3066\u3082\u7d50\u679c\u306f\u4e00\u7dd2\uff09\u306a\u306e\u3067Dictionary\u306b\u3067\u3082\u4fdd\u5b58\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u5168\u90e8\u3092\u307e\u3068\u3081\u305f\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002WEB\u306a\u3069\u3067\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u540c\u6642\u306b\u547c\u3070\u308c\u3066\u3082\u5927\u4e08\u592b\u306a\u3088\u3046\u306bConcurrentDictionary\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```csharp:EnumExtensions.cs\n\npublic static class EnumExtensions\n{\n    private static ConcurrentDictionary<Type, MulticastDelegate> _ToStringFromEnumMethods = new ConcurrentDictionary<Type, MulticastDelegate>();\n\n    public static String ToStringOrNullFromEnum<T>(this Nullable<T> value)\n        where T : struct\n    {\n        if (value.HasValue == true) return ToStringFromEnum(value.Value);\n        return null;\n    }\n    public static String ToStringFromEnum<T>(this Nullable<T> value)\n        where T : struct\n    {\n        if (value.HasValue == true) return ToStringFromEnum(value.Value);\n        return \"\";\n    }\n    public static String ToStringFromEnum<T>(this T value)\n        where T : struct\n    {\n        var tp = typeof(T);\n        if (tp.IsEnum == false) throw new ArgumentException(\"value must be a enum type\");\n\n        MulticastDelegate md = null;\n        if (_ToStringFromEnumMethods.TryGetValue(tp, out md) == false)\n        {\n            var aa = tp.GetCustomAttributes(typeof(FlagsAttribute), false);\n            if (aa.Length == 0)\n            {\n                md = CreateToStringFromEnumFunc<T>();\n            }\n            _ToStringFromEnumMethods[tp] = md;\n        }\n        // Flags\n        if (md == null) return value.ToString().Replace(\" \", \"\");\n\n        var f = (Func<T, String>)md;\n        return f(value);\n    }\n    private static Func<T, String> CreateToStringFromEnumFunc<T>()\n    {\n        var tp = typeof(T);\n        DynamicMethod dm = new DynamicMethod(\"ToStringFromEnum\", typeof(String), new[] { tp });\n        ILGenerator il = dm.GetILGenerator();\n\n        var values = ((T[])Enum.GetValues(tp)).Select(el => Convert.ToInt64(el)).ToList();\n        var names = Enum.GetNames(tp);\n\n        var returnLabel = il.DefineLabel();\n        //Have any value different from index number\n        if (values.Where((el, i) => el != i).Any())\n        {\n            var result = il.DeclareLocal(typeof(String));\n\n            for (int i = 0; i < values.Count; i++)\n            {\n                il.Emit(OpCodes.Ldarg_0);\n                il.Emit(OpCodes.Conv_I8);\n                il.Emit(OpCodes.Ldc_I8, values[i]);\n                il.Emit(OpCodes.Ceq);\n\n                var label = il.DefineLabel();\n                il.Emit(OpCodes.Brfalse, label);\n\n                il.Emit(OpCodes.Ldstr, names[i]);\n                il.Emit(OpCodes.Stloc, result);\n                il.Emit(OpCodes.Br, returnLabel);\n\n                il.MarkLabel(label);\n            }\n            il.ThrowException(typeof(InvalidOperationException));\n\n            il.MarkLabel(returnLabel);\n            il.Emit(OpCodes.Ldloc, result);\n            il.Emit(OpCodes.Ret);\n        }\n        else\n        {\n            il.Emit(OpCodes.Ldarg_0);\n            il.Emit(OpCodes.Conv_I8);\n            il.Emit(OpCodes.Ldc_I4, 0);\n            il.Emit(OpCodes.Conv_I8);\n            il.Emit(OpCodes.Clt);\n            il.Emit(OpCodes.Brtrue, returnLabel);\n\n            il.Emit(OpCodes.Ldarg_0);\n            il.Emit(OpCodes.Conv_I8);\n            il.Emit(OpCodes.Ldc_I4, names.Length - 1);\n            il.Emit(OpCodes.Conv_I8);\n            il.Emit(OpCodes.Cgt);\n            il.Emit(OpCodes.Brtrue, returnLabel);\n\n            il.Emit(OpCodes.Ldarg_0);\n            var caseLabels = new Label[names.Length + 1];\n            for (int i = 0; i < names.Length; i++)\n            {\n                caseLabels[i] = il.DefineLabel();\n            }\n            Label defaultCase = il.DefineLabel();\n            caseLabels[names.Length] = defaultCase;\n            il.Emit(OpCodes.Switch, caseLabels);\n            for (int i = 0; i < names.Length; i++)\n            {\n                // Case ??: return \"\";\n                il.MarkLabel(caseLabels[i]);\n                il.Emit(OpCodes.Ldstr, names[i]);\n                il.Emit(OpCodes.Ret);\n            }\n            il.MarkLabel(defaultCase);\n            il.ThrowException(typeof(InvalidOperationException));\n\n            il.MarkLabel(returnLabel);\n            il.ThrowException(typeof(InvalidOperationException));\n        }\n\n        var f = typeof(Func<,>);\n        var gf = f.MakeGenericType(tp, typeof(String));\n        return (Func<T, String>)dm.CreateDelegate(gf);\n    }\n}\n```\n\n\u203bEnum\u304cFlagsAttribute\u306e\u5834\u5408\u306f\u901a\u5e38\u306eToString\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u306f\n1.\u3069\u3046\u51fa\u529b\u3059\u308b\u304b\u4ed5\u69d8\u304c\u6c7a\u5b9a\u3057\u3065\u3089\u3044\n\u2192One,Two\u306a\u306e\u304bOne:Two\u3068\u30b3\u30ed\u30f3\u3092\u4f7f\u7528\u3059\u308b\u306e\u304bOne, Two\u3068\u30b9\u30da\u30fc\u30b9\u3092\u3044\u308c\u308b\u3079\u304d\u306a\u306e\u304b\u306a\u3069\u3002\n2.\u4e0a\u8a18\u3092\u554f\u984c\u3082\u3042\u308aIL\u30b3\u30fc\u30c9\u306e\u4f5c\u6210\u304c\u975e\u5e38\u306b\u9762\u5012\n\u306a\u306e\u3067\u3084\u3063\u3066\u306a\u3044\u3067\u3059\u3002\n\u5f93\u3063\u3066FlagsAttribute\u306e\u6642\u306f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u901a\u5e38\u3068\u5909\u308f\u308a\u307e\u305b\u3093\u3002\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u6c17\u306b\u306a\u308b\u306e\u306a\u3089\u3070\u5225\u9014\u5404\u81ea\u3067\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n#6.\u54c1\u8cea\u3092\u78ba\u4fdd\u3059\u308b\u305f\u3081\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3059\u308b\n\u30b3\u30fc\u30c9\u306e\u54c1\u8cea\u3092\u4fdd\u3064\u305f\u3081\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3082\u4f5c\u3063\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```csharp:TestEnum.cs\n\n[TestClass]\npublic class EnumExtensionsTest\n{\n    public enum BaseIsNotZeroEnum : byte\n    {\n        V2 = 2,\n        V3,\n        V4,\n        V5,\n        V6,\n    }\n    public enum ByteEnum : byte\n    {\n        V0 = 0,\n        V2 = 2,\n        V4 = 4,\n    }\n    public enum LongEnum : long\n    {\n        V0 = 0,\n        V2 = 2,\n        V1620100 = 1620100,\n        V23372036854775807 = 23372036854775807,\n    }\n    [FlagsAttribute]\n    enum FlagsEnum\n    {\n        None = 0x00, // 0000 0000\n        One = 0x01, // 0000 0001\n        Two = 0x02, // 0000 0010 \n        Three = 0x04, // 0000 0100\n        Four = 0x08, // 0000 1000\n        All = 0x0F // 0000 1111\n    }\n    [TestMethod]\n    public void BasicEnumTest()\n    {\n        Assert.AreEqual(\"Friday\", DayOfWeek.Friday.ToStringFromEnum());\n        Assert.AreEqual(\"Wednesday\", DayOfWeek.Wednesday.ToStringFromEnum());\n        Assert.AreEqual(\"Saturday\", DayOfWeek.Saturday.ToStringFromEnum());\n        Assert.AreEqual(\"Friday\", ((DayOfWeek)(5)).ToStringFromEnum());\n        Assert.AreEqual(\"Saturday\", ((DayOfWeek)(6)).ToStringFromEnum());\n    }\n    [TestMethod]\n    public void BaseIsNotZeroEnumTest()\n    {\n        Assert.AreEqual(\"V2\", BaseIsNotZeroEnum.V2.ToStringFromEnum());\n        Assert.AreEqual(\"V3\", BaseIsNotZeroEnum.V3.ToStringFromEnum());\n        Assert.AreEqual(\"V4\", BaseIsNotZeroEnum.V4.ToStringFromEnum());\n    }\n    [TestMethod]\n    [ExpectedException(typeof(InvalidOperationException))]\n    public void EmptyValueTest()\n    {\n        String s = \"\";\n        s = ((DayOfWeek)(-1)).ToStringFromEnum();\n        s = ((DayOfWeek)(7)).ToStringFromEnum();\n        s = ((HttpStatusCode)(3)).ToStringFromEnum();\n    }\n    [TestMethod]\n    public void ByteEnumTest()\n    {\n        Assert.AreEqual(\"V0\", ByteEnum.V0.ToStringFromEnum());\n        Assert.AreEqual(\"V2\", ByteEnum.V2.ToStringFromEnum());\n        Assert.AreEqual(\"V4\", ByteEnum.V4.ToStringFromEnum());\n    }\n    [TestMethod]\n    public void LongEnumTest()\n    {\n        Assert.AreEqual(\"V0\", LongEnum.V0.ToStringFromEnum());\n        Assert.AreEqual(\"V2\", LongEnum.V2.ToStringFromEnum());\n        Assert.AreEqual(\"V1620100\", LongEnum.V1620100.ToStringFromEnum());\n        Assert.AreEqual(\"V23372036854775807\", LongEnum.V23372036854775807.ToStringFromEnum());\n    }\n    [TestMethod]\n    public void FlagEnumTest()\n    {\n        Assert.AreEqual(\"One\", FlagsEnum.One.ToStringFromEnum());\n        Assert.AreEqual(\"One,Two\", (FlagsEnum.One | FlagsEnum.Two).ToStringFromEnum());\n        Assert.AreEqual(\"Three\", FlagsEnum.Three.ToStringFromEnum());\n        Assert.AreEqual(\"Four\", FlagsEnum.Four.ToStringFromEnum());\n    }\n    [TestMethod]\n    public void HttpStatusCodeEnumTest()\n    {\n        Assert.AreEqual(\"Continue\", HttpStatusCode.Continue.ToStringFromEnum());\n        Assert.AreEqual(\"BadRequest\", HttpStatusCode.BadRequest.ToStringFromEnum());\n        Assert.AreEqual(\"Forbidden\", HttpStatusCode.Forbidden.ToStringFromEnum());\n        Assert.AreEqual(\"InternalServerError\", HttpStatusCode.InternalServerError.ToStringFromEnum());\n        Assert.AreEqual(\"OK\", ((HttpStatusCode)(200)).ToStringFromEnum());\n    }\n}\n\n```\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u6bd4\u8f03\u7684\u7c21\u5358\u306bEnum\u306eToString\u30e1\u30bd\u30c3\u30c9\u306e\u8d85\u9ad8\u901f\u304b\u3064\u4fdd\u5b88\u6027\u306b\u3082\u512a\u308c\u305f\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u3054\u5229\u7528\u306f\u3054\u81ea\u7531\u306b\u3069\u3046\u305e\u3002\n\n\n\u203b\u4fee\u6b63\u5c65\u6b74\n2015/12/08 HttpStatusCode\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u4f8b\u5916\u304c\u767a\u751f\u3059\u308b\u30d0\u30b0\u304c\u3042\u3063\u305f\u306e\u3067\u4fee\u6b63\u3002\u7bc4\u56f2\u5916\u306e\u5024\u306e\u5834\u5408\u306f\u4f8b\u5916\u3092\u6295\u3052\u308b\u3088\u3046\u306b\u4fee\u6b63\u3002\n\n\n\n\n"}