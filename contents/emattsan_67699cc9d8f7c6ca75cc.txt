{"context": "\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304fE03\u306b\u53c2\u52a0\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u51f8\u9802\u70b9\u306e\u6570 \u6a2a\u3078\u306a2016.4.2 \u554f\u984c\n\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304fE03 \u306e\u554f\u984c (Qiita)\n\n\n\u6226\u7565\n\u307e\u305a\u3001\u51f8\u9802\u70b9\u304c\u3069\u306e\u3088\u3046\u306a\u6761\u4ef6\u3067\u73fe\u308c\u308b\u306e\u304b\u3092\u8003\u3048\u307e\u3057\u305f\u3002\n\u7d50\u8ad6\u3068\u3057\u3066\u3001\u4eca\u56de\u306e\u554f\u984c\u3067\u306f00\u306e\u56f3\u5f62\u3092\u9664\u304f\u3068\u5171\u6709\u3055\u308c\u308b\u9802\u70b9\uff08\u4e0b\u56f3\u306e\u8d64\u3067\u793a\u3057\u305f\u7b87\u6240\uff09\u306f\u5fc5\u305a\u51f9\u9802\u70b9\u306b\u306a\u308b\u305f\u3081\u3001\u9006\u306b\u8a00\u3046\u3068\u5171\u6709\u3055\u308c\u306a\u3044\u9802\u70b9\uff08\u4e0b\u56f3\u306e\u9752\u3067\u793a\u3057\u305f\u7b87\u6240\uff09\u304c\u51f8\u9802\u70b9\u3068\u306a\u308b\u305f\u3081\u3001\u3059\u3079\u3066\u306e\u56f3\u5f62\u306e\u9802\u70b9\u3092\u53d6\u5f97\u3057\u3001\u4e00\u5ea6\u3057\u304b\u73fe\u308c\u306a\u3044\u9802\u70b9\u306e\u500b\u6570\u3092\u6570\u3048\u308b\u3053\u3068\u3067\u51f8\u9802\u70b9\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u300100\u306e\u56f3\u5f62\u306f\u51f9\u9802\u70b9\u3092\u542b\u3093\u3067\u3044\u308b\u305f\u3081\u3001\u9802\u70b9\u3092\u5171\u6709\u3057\u306a\u3044\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u51f9\u9802\u70b9\u306b\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u90e8\u5206\u3092\u53d6\u308a\u9664\u3044\u3066\u304b\u3089\u6570\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u9802\u70b9\u306f\u3001\u534a\u5f84\u65b9\u5411\u306e\u6570\u5b57\u3092 r \u3001\u56de\u8ee2\u89d2\u65b9\u306e\u6587\u5b57 a \u301c t \u3092\u6570\u5024\u306e 0 \u301c 19 \u306b\u7f6e\u304d\u63db\u3048\u305f\u3082\u306e\u3092 t\u3068\u3057\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\\begin{eqnarray*}\nvertex_{hex} & = & (r - d_r, 2t + r - 1 + d_t \\pmod{40}) \\\\\n\u3053\u3053\u3067 \\\\\nd_r & = & \\lbrace 0, 1 \\rbrace \\\\\nd_t & = & \\lbrace 0, 1, 2 \\rbrace\n\\end{eqnarray*}\n$${\\begin{eqnarray*}\nvertex_{hex} & = & (r - d_r, 2t + r - 1 + d_t \\pmod{40}) \\\\\n\u3053\u3053\u3067 \\\\\nd_r & = & \\lbrace 0, 1 \\rbrace \\\\\nd_t & = & \\lbrace 0, 1, 2 \\rbrace\n\\end{eqnarray*}\n}$$\n\u9802\u70b9\u306e\u5ea7\u6a19\u306e\u53d6\u308a\u65b9\u306f\u3001\u56f3\u306b\u8868\u3059\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\nRuby\uff08\u6642\u9593\u5185\u306b\u89e3\u3044\u305f\u3082\u306e\uff09\n\u4eca\u56de\u306f Ruby \u3067\u6311\u6226\u3057\u3001\u304a\u305d\u3089\u304f\u521d\u3081\u3066\u6642\u9593\u5185\u306b\u5168\u30c6\u30b9\u30c8\u304c\u901a\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u5171\u6709\u3055\u308c\u306a\u3044\u9802\u70b9\u306e\u500b\u6570\u3092\u6570\u3048\u308c\u3070\u3088\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u6c17\u304c\u3064\u304f\u307e\u3067\u304a\u3088\u305d20\u5206\u3001\u305d\u3053\u304b\u3089\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u59cb\u3081\u3066\u304a\u3088\u305d30\u5206\u3001\u8a0850\u5206\u3042\u307e\u308a\u3067\u306e\u66f8\u304d\u4e0a\u3052\u307e\u3057\u305f\u3002\n00\u306e\u51f9\u9802\u70b9\u306f\u3001\u5168\u9802\u70b9\u3092\u53d6\u5f97\u5f8c\u306b\u56f3\u5f62\u306b00\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306f\u51f9\u9802\u70b9\u306b\u306a\u308b\u70b9\u3092\u3059\u3079\u3066\u53d6\u308a\u9664\u304f\u3068\u3044\u3046\u65b9\u6cd5\u3067\u5bfe\u51e6\u3057\u3066\u3044\u307e\u3059\u3002\n\nhttps://gist.github.com/mattsan/bfd32c0045930354db7ac6ebd1324290\n\n\u898b\u8fd4\u3057\u3066\u307f\u308b\u3068\u5197\u9577\u306a\u30b3\u30fc\u30c9\u304c\u6563\u898b\u3055\u308c\u307e\u3059\u3002\n\nRuby\n\u5f8c\u306b\u306a\u3063\u3066\u300100\u306e\u51f9\u9802\u70b9\u3092\u6570\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\u5f8c\u304b\u3089\u70b9\u3092\u53d6\u308a\u9664\u304f\u306e\u3067\u306f\u306a\u304f\u51f9\u9802\u70b9\u3092\u6700\u521d\u304b\u3089\u8907\u6570\u56de\u767b\u9332\u3059\u308c\u3070\u9802\u70b9\u304c\u5171\u6709\u3055\u308c\u3066\u3044\u308b\u3068\u307f\u306a\u3055\u308c\u3066\u6570\u3048\u4e0a\u3052\u306e\u5bfe\u8c61\u304b\u3089\u5916\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u306b\u6c17\u304c\u3064\u304d\u307e\u3057\u305f\u3002\n\u305d\u308c\u3092\u8e0f\u307e\u3048\u3066\u66f8\u304d\u76f4\u3057\u305f\u306e\u304c\u3053\u3061\u3089\u3002\u3055\u3089\u306b\u77ed\u304f\u306a\u308a\u307e\u3057\u305f\u3002\ndef solve(input)\n  input\n    .chars\n    .each_slice(2)\n    .each_with_object([]) {|(r, t), a|\n      r, t = [r, t] == ['0', '0'] ? [0, 0] : [r.to_i, t.ord - 'a'.ord]\n      if [r, t] == [0, 0]\n        40.times {|i| a.push [0, i] }\n        20.times {|i| a.push [0, i * 2 + 1] }\n      else\n        [0, 1].product([0, 1, 2]).each {|dr, dt| a.push [r - dr, (t * 2 + r - 1 + dt) % 40] }\n      end\n    }\n    .group_by {|r, t| [r, t] }\n    .map {|k, v| [k, v.size] }\n    .select {|k, size| size == 1}\n    .size\n    .to_s\nend\n\n# \u4ee5\u4e0b\u30c6\u30b9\u30c8\u5b9f\u65bd\u7528\u30b3\u30fc\u30c9\n\ndef test(input, expected)\n  actual = solve(input)\n  if actual == expected\n    print '.'\n  else\n    puts <<-EOS\n\ninput:    #{input}\nexpected: #{expected}\nactual:   #{actual}\nEOS\n  end\nend\n\nDATA.each do |line|\n  test *line.split\nend\nputs\n\n__END__\n1a2t3s2s 11\n1a1c1d00 22\n\n\nHaskell\n\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30a4\u30f3\u3067\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u305f\u306e\u3067\u3001Haskell\u3000\u3067\u66f8\u304f\u3068\u7dba\u9e97\u306b\u66f8\u3051\u305d\u3046\u3060\u3068\u601d\u3044\u7ffb\u8a33\u3057\u3066\u307f\u305f\u306e\u304c\u3053\u3061\u3089\u3002\n\u9802\u70b9\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u304c\u307e\u305f\u5206\u96e2\u3057\u307e\u3057\u305f\u304c\u3001solve \u95a2\u6570\u3092\u30dd\u30a4\u30f3\u30c8\u30d5\u30ea\u30fc\u30b9\u30bf\u30a4\u30eb\u3067\u66f8\u3051\u305f\u306e\u3067\u6e80\u8db3\u3067\u3059\u3002\nimport Data.Char\nimport Data.List\n\nvertices [] = []\nvertices ('0':'0':cs) =\n  [(0, t) | t <- [0..39]] ++ [(0, t * 2 + 1) | t <- [0..19]] ++ vertices cs\nvertices (c1:c2:cs) =\n  [(r - dr, mod (t * 2 + r - 1 + dt) 40) | dr <- [0, 1], dt <- [0..2]] ++ vertices cs\n  where\n    r = ord c1 - ord '0'\n    t = ord c2 - ord 'a'\n\nsolve = show.length.filter (==1).map length.group.sort.vertices\n\n-- \u4ee5\u4e0b\u30c6\u30b9\u30c8\u5b9f\u65bd\u7528\u30b3\u30fc\u30c9\n\ntest input expected =\n  if actual == expected\n    then\n      putStr \".\"\n    else\n      putStrLn $ concat\n        [ \"\\ninput:    \", input\n        , \"\\nexpected: \", expected\n        , \"\\nactual:   \", actual\n        ]\n  where\n    actual = solve input\n\nmain = do\n  test \"1a2t3s2s\" \"11\"\n  test \"1a1c1d00\" \"22\"\n  -- \u4ee5\u4e0b\u7565\n\n\nProlog\nHaskell \u3067\u66f8\u3051\u305f\u306e\u3060\u304b\u3089 Prolog \u3067\u3082\u66f8\u3051\u305d\u3046\u3060\u3001\u3068\u7ffb\u8a33\u3057\u305f\u306e\u304c\u3053\u3061\u3089\u3002\n\u300c\u8907\u6570\u56de\u51fa\u73fe\u3057\u306a\u3044\u8981\u7d20\u306e\u6570\u3092\u6570\u3048\u308b\u300d\u3088\u3044\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u307e\u305a\u5404\u3005\u306e\u8981\u7d20\u3092\u8981\u7d20\u306e\u51fa\u73fe\u56de\u6570\u306b\u7f6e\u304d\u63db\u3048\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\u5024\u304c1\u306e\u8981\u7d20\u306e\u6570\u3092\u6570\u3048\u308b\u3001\u3068\u3044\u3046\u65b9\u6cd5\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001[a, b, a, c] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u305d\u308c\u305e\u308c\u306e\u51fa\u73fe\u56de\u6570\uff08a \u306f 2 \u56de\u3001b \u3068 c \u306f 1 \u56de\uff09\u306b\u7f6e\u304d\u63db\u3048\u305f [2, 1, 2, 1] \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u307e\u305a\u4f5c\u6210\u3057\u3001\u305d\u3053\u304b\u3089\u5024\u304c 1 \u306e\u500b\u6570\u3092\u6570\u3048\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n:- initialization(main).\n\nhex_vertex(R, T, DR, DT, [R1 ,T1]) :-\n  R1 is R - DR,\n  T1 is (T * 2 + R - 1 + DT) mod 40.\n\nvertices([], []).\nvertices([0'0, 0'0|CS], VS) :-\n  findall(V, (between(0, 39, T), append([0], [T], V)), VS1),\n  findall(V, (between(0, 39, T), T mod 2 =:= 1, append([0], [T], V)), VS2),\n  append(VS1, VS2, VS3),\n  vertices(CS, VS4),\n  append(VS3, VS4, VS).\nvertices([C1, C2|CS], VS) :-\n  R is C1 - 0'0,\n  T is C2 - 0'a,\n  findall(V, (between(0, 1, DR), between(0, 2, DT), hex_vertex(R, T, DR, DT, V)), VS1),\n  vertices(CS, VS2),\n  append(VS1, VS2, VS).\n\nelems_counts([], _, []).\nelems_counts([E|ES], List, [C|CS]) :-\n  findall(E0, (member(E0, List), E0 == E), ES0),\n  length(ES0, C),\n  elems_counts(ES, List, CS).\nelems_counts(ES, CS) :-\n  elems_counts(ES, ES, CS).\n\nsolve(Input, Output) :-\n  vertices(Input, VS),                       % \u5168\u9802\u70b9\u3092\u53d6\u5f97\u3059\u308b\n  elems_counts(VS, CS),                      % \u8981\u7d20\u3092\u8981\u7d20\u306e\u51fa\u73fe\u6570\u306b\u5909\u63db\u3059\u308b\n  findall(C, (member(C, CS), C =:= 1), CS1), % \u51fa\u73fe\u6570\u304c 1 \u306e\u8981\u7d20\u306e\u307f\u62bd\u51fa\u3059\u308b\n  length(CS1, Count),                        % \u51fa\u73fe\u6570\u304c 1 \u306e\u8981\u7d20\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n  number_codes(Count, Output).               % \u500b\u6570\u3092\u6587\u5b57\u5217\u306b\u3059\u308b\n\n% \u4ee5\u4e0b\u30c6\u30b9\u30c8\u5b9f\u65bd\u7528\u30b3\u30fc\u30c9\n\njudge(_, Expected, Expected) :-\n  format(\".\", []).\njudge(Input, Expected, Actual) :-\n  format(\"~ninput:    ~s~nexpected: ~s~nactual:   ~s~n\", [Input, Expected, Actual]).\n\ntest(Input, Expected) :-\n  solve(Input, Actual),\n  judge(Input, Expected, Actual).\n\nmain :-\n  test(\"1a2t3s2s\", \"11\"),\n  test(\"1a1c1d00\", \"22\"),\n  test(\"00\", \"20\"),\n  % \u4e2d\u7565\n  format(\"~n\", []),\n  halt.\n\n\nC++\n\u5168\u9802\u70b9\u3092\u96c6\u3081\u3066\u304b\u3089\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b\u306e\u306f C++ \u3067\u306f\u9762\u5012\u306a\u611f\u3058\u3060\u3063\u305f\u306e\u3067\u3001\u4ee3\u308f\u308a\u306b\u9802\u70b9\u3092\u6c42\u3081\u308b\u305f\u3073\u306b\u500b\u6570\u3092\u6570\u3048\u3066\u3044\u304f\u3068\u3044\u3046\u65b9\u6cd5\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\u3002\n#include <iostream>\n#include <string>\n#include <map>\n#include <numeric>\n\ntypedef std::map<int, int> Vertices;\n\nconst int ds[][2] = { {0, 0}, {0, 1}, {0, 2}, {1, 0}, {1, 1}, {1, 2} };\n\nvoid vertices(const std::string& input, Vertices& vs)\n{\n    auto ci = input.begin();\n    while(ci != input.end())\n    {\n        if((*ci == '0') && (*(ci + 1) == '0'))\n        {\n            for(int i = 0; i < 40; ++i)\n            {\n                vs[i] += (1 + i % 2);\n            }\n        }\n        else\n        {\n            int r = *ci - '0';\n            int t = *(ci + 1) - 'a';\n            for(auto di = std::begin(ds); di != std::end(ds); ++di)\n            {\n                ++vs[(r - (*di)[0]) * 40 + (t * 2 + r - 1 + (*di)[1]) % 40];\n            }\n        }\n        advance(ci, 2);\n    }\n}\n\nstd::string solve(const std::string& input)\n{\n    Vertices vs;\n    vertices(input, vs);\n    int count = std::accumulate(vs.begin(), vs.end(), 0, [](int a, const std::pair<int, int>& v) { return (v.second == 1) ? (a + 1) : a; });\n    return std::to_string(count);\n}\n\n// \u4ee5\u4e0b\u30c6\u30b9\u30c8\u5b9f\u65bd\u7528\u30b3\u30fc\u30c9\n\nvoid test(const std::string& input, const std::string& expected)\n{\n    std::string actual = solve(input);\n    if(actual == expected)\n    {\n        std::cout << \".\";\n    }\n    else\n    {\n        std::cout\n          << \"\\ninput:    \" << input\n          << \"\\nexpected: \" << expected\n          << \"\\nactual:   \" << actual\n          << \"\\n\";\n    }\n}\n\nint main(int, char* [])\n{\n    test(\"1a2t3s2s\", \"11\");\n    test(\"1a1c1d00\", \"22\");\n    // \u4e2d\u7565\n\n    std::cout << std::endl;\n\n    return 0;\n}\n\n\nRuby \u4e09\u5ea6\u3073\nC++ \u306e std::map \u3067\u9802\u70b9\u3092\u6c42\u3081\u308b\u305f\u3073\u306b\u500b\u6570\u3092\u6570\u3048\u308b\u3068\u3044\u3046\u65b9\u6cd5\u306f\u3001Ruby \u3067\u3082 Hash \u3092\u4f7f\u3048\u3070\u540c\u3058\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3082\u3046\u4e00\u5ea6 Ruby \u306b\u7ffb\u8a33\u3057\u3066\u307f\u307e\u3057\u305f\u3002test \u4ee5\u4e0b\u306f\u540c\u3058\u306a\u306e\u3067\u3001solve \u306e\u307f\u3067\u3059\u3002\ndef solve(input)\n  input\n    .chars\n    .each_slice(2)\n    .each_with_object(Hash.new(0)) {|(r, t), a|\n      r, t = [r, t] == ['0', '0'] ? [0, 0] : [r.to_i, t.ord - 'a'.ord]\n      if [r, t] == [0, 0]\n        40.times {|i| a[[0, i]] += (1 + i % 2) }\n      else\n        [0, 1].product([0, 1, 2]).each {|dr, dt| a[[r - dr, (t * 2 + r - 1 + dt) % 40]] += 1 }\n      end\n    }\n    .select {|k, size| size == 1}\n    .size\n    .to_s\nend\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304fE03\u306b\u53c2\u52a0\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\n- [\u51f8\u9802\u70b9\u306e\u6570 \u6a2a\u3078\u306a2016.4.2 \u554f\u984c](http://nabetani.sakura.ne.jp/hena/orde03nofconv/)\n- [\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304fE03 \u306e\u554f\u984c (Qiita)](http://qiita.com/Nabetani/items/b8bf742d278c6cf501aa)\n\n## \u6226\u7565\n\n\u307e\u305a\u3001\u51f8\u9802\u70b9\u304c\u3069\u306e\u3088\u3046\u306a\u6761\u4ef6\u3067\u73fe\u308c\u308b\u306e\u304b\u3092\u8003\u3048\u307e\u3057\u305f\u3002\n\u7d50\u8ad6\u3068\u3057\u3066\u3001\u4eca\u56de\u306e\u554f\u984c\u3067\u306f`00`\u306e\u56f3\u5f62\u3092\u9664\u304f\u3068\u5171\u6709\u3055\u308c\u308b\u9802\u70b9\uff08\u4e0b\u56f3\u306e\u8d64\u3067\u793a\u3057\u305f\u7b87\u6240\uff09\u306f\u5fc5\u305a\u51f9\u9802\u70b9\u306b\u306a\u308b\u305f\u3081\u3001\u9006\u306b\u8a00\u3046\u3068\u5171\u6709\u3055\u308c\u306a\u3044\u9802\u70b9\uff08\u4e0b\u56f3\u306e\u9752\u3067\u793a\u3057\u305f\u7b87\u6240\uff09\u304c\u51f8\u9802\u70b9\u3068\u306a\u308b\u305f\u3081\u3001\u3059\u3079\u3066\u306e\u56f3\u5f62\u306e\u9802\u70b9\u3092\u53d6\u5f97\u3057\u3001\u4e00\u5ea6\u3057\u304b\u73fe\u308c\u306a\u3044\u9802\u70b9\u306e\u500b\u6570\u3092\u6570\u3048\u308b\u3053\u3068\u3067\u51f8\u9802\u70b9\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/7256/1db1760a-dc40-5c41-ab63-fed2ec885061.jpeg\" width=\"240\"/>\n\n\u305f\u3060\u3057\u3001`00`\u306e\u56f3\u5f62\u306f\u51f9\u9802\u70b9\u3092\u542b\u3093\u3067\u3044\u308b\u305f\u3081\u3001\u9802\u70b9\u3092\u5171\u6709\u3057\u306a\u3044\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u51f9\u9802\u70b9\u306b\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u90e8\u5206\u3092\u53d6\u308a\u9664\u3044\u3066\u304b\u3089\u6570\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<img src=\"https://qiita-image-store.s3.amazonaws.com/0/7256/bbc81fa7-4718-d954-ff25-eecf40f1942e.jpeg\" width=\"240\" />\n\n\n\u9802\u70b9\u306f\u3001\u534a\u5f84\u65b9\u5411\u306e\u6570\u5b57\u3092 <i>r</i> \u3001\u56de\u8ee2\u89d2\u65b9\u306e\u6587\u5b57 a \u301c t \u3092\u6570\u5024\u306e 0 \u301c 19 \u306b\u7f6e\u304d\u63db\u3048\u305f\u3082\u306e\u3092 <i>t</i>\u3068\u3057\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\n```math\n\\begin{eqnarray*}\nvertex_{hex} & = & (r - d_r, 2t + r - 1 + d_t \\pmod{40}) \\\\\n\u3053\u3053\u3067 \\\\\nd_r & = & \\lbrace 0, 1 \\rbrace \\\\\nd_t & = & \\lbrace 0, 1, 2 \\rbrace\n\\end{eqnarray*}\n```\n\n\u9802\u70b9\u306e\u5ea7\u6a19\u306e\u53d6\u308a\u65b9\u306f\u3001\u56f3\u306b\u8868\u3059\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n![\u51f8\u9802\u70b9\u306e\u65703.jpg](https://qiita-image-store.s3.amazonaws.com/0/7256/6dd9cdee-f9ff-0877-c308-5cc3b189aea0.jpeg)\n\n## Ruby\uff08\u6642\u9593\u5185\u306b\u89e3\u3044\u305f\u3082\u306e\uff09\n\n\u4eca\u56de\u306f Ruby \u3067\u6311\u6226\u3057\u3001\u304a\u305d\u3089\u304f\u521d\u3081\u3066\u6642\u9593\u5185\u306b\u5168\u30c6\u30b9\u30c8\u304c\u901a\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u5171\u6709\u3055\u308c\u306a\u3044\u9802\u70b9\u306e\u500b\u6570\u3092\u6570\u3048\u308c\u3070\u3088\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u6c17\u304c\u3064\u304f\u307e\u3067\u304a\u3088\u305d20\u5206\u3001\u305d\u3053\u304b\u3089\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u59cb\u3081\u3066\u304a\u3088\u305d30\u5206\u3001\u8a0850\u5206\u3042\u307e\u308a\u3067\u306e\u66f8\u304d\u4e0a\u3052\u307e\u3057\u305f\u3002\n\n`00`\u306e\u51f9\u9802\u70b9\u306f\u3001\u5168\u9802\u70b9\u3092\u53d6\u5f97\u5f8c\u306b\u56f3\u5f62\u306b`00`\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u306f\u51f9\u9802\u70b9\u306b\u306a\u308b\u70b9\u3092\u3059\u3079\u3066\u53d6\u308a\u9664\u304f\u3068\u3044\u3046\u65b9\u6cd5\u3067\u5bfe\u51e6\u3057\u3066\u3044\u307e\u3059\u3002\n\n- https://gist.github.com/mattsan/bfd32c0045930354db7ac6ebd1324290\n\n\u898b\u8fd4\u3057\u3066\u307f\u308b\u3068\u5197\u9577\u306a\u30b3\u30fc\u30c9\u304c\u6563\u898b\u3055\u308c\u307e\u3059\u3002\n\n## Ruby\n\n\u5f8c\u306b\u306a\u3063\u3066\u3001`00`\u306e\u51f9\u9802\u70b9\u3092\u6570\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f\u3001\u5f8c\u304b\u3089\u70b9\u3092\u53d6\u308a\u9664\u304f\u306e\u3067\u306f\u306a\u304f\u51f9\u9802\u70b9\u3092\u6700\u521d\u304b\u3089\u8907\u6570\u56de\u767b\u9332\u3059\u308c\u3070\u9802\u70b9\u304c\u5171\u6709\u3055\u308c\u3066\u3044\u308b\u3068\u307f\u306a\u3055\u308c\u3066\u6570\u3048\u4e0a\u3052\u306e\u5bfe\u8c61\u304b\u3089\u5916\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3053\u3068\u306b\u6c17\u304c\u3064\u304d\u307e\u3057\u305f\u3002\n\n\u305d\u308c\u3092\u8e0f\u307e\u3048\u3066\u66f8\u304d\u76f4\u3057\u305f\u306e\u304c\u3053\u3061\u3089\u3002\u3055\u3089\u306b\u77ed\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n```ruby\ndef solve(input)\n  input\n    .chars\n    .each_slice(2)\n    .each_with_object([]) {|(r, t), a|\n      r, t = [r, t] == ['0', '0'] ? [0, 0] : [r.to_i, t.ord - 'a'.ord]\n      if [r, t] == [0, 0]\n        40.times {|i| a.push [0, i] }\n        20.times {|i| a.push [0, i * 2 + 1] }\n      else\n        [0, 1].product([0, 1, 2]).each {|dr, dt| a.push [r - dr, (t * 2 + r - 1 + dt) % 40] }\n      end\n    }\n    .group_by {|r, t| [r, t] }\n    .map {|k, v| [k, v.size] }\n    .select {|k, size| size == 1}\n    .size\n    .to_s\nend\n\n# \u4ee5\u4e0b\u30c6\u30b9\u30c8\u5b9f\u65bd\u7528\u30b3\u30fc\u30c9\n\ndef test(input, expected)\n  actual = solve(input)\n  if actual == expected\n    print '.'\n  else\n    puts <<-EOS\n\ninput:    #{input}\nexpected: #{expected}\nactual:   #{actual}\nEOS\n  end\nend\n\nDATA.each do |line|\n  test *line.split\nend\nputs\n\n__END__\n1a2t3s2s 11\n1a1c1d00 22\n```\n\n## Haskell\n\n\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30a4\u30f3\u3067\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u305f\u306e\u3067\u3001Haskell\u3000\u3067\u66f8\u304f\u3068\u7dba\u9e97\u306b\u66f8\u3051\u305d\u3046\u3060\u3068\u601d\u3044\u7ffb\u8a33\u3057\u3066\u307f\u305f\u306e\u304c\u3053\u3061\u3089\u3002\n\u9802\u70b9\u3092\u53d6\u5f97\u3059\u308b\u95a2\u6570\u304c\u307e\u305f\u5206\u96e2\u3057\u307e\u3057\u305f\u304c\u3001`solve` \u95a2\u6570\u3092\u30dd\u30a4\u30f3\u30c8\u30d5\u30ea\u30fc\u30b9\u30bf\u30a4\u30eb\u3067\u66f8\u3051\u305f\u306e\u3067\u6e80\u8db3\u3067\u3059\u3002\n\n```hs\nimport Data.Char\nimport Data.List\n\nvertices [] = []\nvertices ('0':'0':cs) =\n  [(0, t) | t <- [0..39]] ++ [(0, t * 2 + 1) | t <- [0..19]] ++ vertices cs\nvertices (c1:c2:cs) =\n  [(r - dr, mod (t * 2 + r - 1 + dt) 40) | dr <- [0, 1], dt <- [0..2]] ++ vertices cs\n  where\n    r = ord c1 - ord '0'\n    t = ord c2 - ord 'a'\n\nsolve = show.length.filter (==1).map length.group.sort.vertices\n\n-- \u4ee5\u4e0b\u30c6\u30b9\u30c8\u5b9f\u65bd\u7528\u30b3\u30fc\u30c9\n\ntest input expected =\n  if actual == expected\n    then\n      putStr \".\"\n    else\n      putStrLn $ concat\n        [ \"\\ninput:    \", input\n        , \"\\nexpected: \", expected\n        , \"\\nactual:   \", actual\n        ]\n  where\n    actual = solve input\n\nmain = do\n  test \"1a2t3s2s\" \"11\"\n  test \"1a1c1d00\" \"22\"\n  -- \u4ee5\u4e0b\u7565\n```\n\n## Prolog\n\nHaskell \u3067\u66f8\u3051\u305f\u306e\u3060\u304b\u3089 Prolog \u3067\u3082\u66f8\u3051\u305d\u3046\u3060\u3001\u3068\u7ffb\u8a33\u3057\u305f\u306e\u304c\u3053\u3061\u3089\u3002\n\u300c\u8907\u6570\u56de\u51fa\u73fe\u3057\u306a\u3044\u8981\u7d20\u306e\u6570\u3092\u6570\u3048\u308b\u300d\u3088\u3044\u65b9\u6cd5\u304c\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u305f\u3081\u3001\u307e\u305a\u5404\u3005\u306e\u8981\u7d20\u3092\u8981\u7d20\u306e\u51fa\u73fe\u56de\u6570\u306b\u7f6e\u304d\u63db\u3048\u305f\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\u5024\u304c1\u306e\u8981\u7d20\u306e\u6570\u3092\u6570\u3048\u308b\u3001\u3068\u3044\u3046\u65b9\u6cd5\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5177\u4f53\u7684\u306b\u306f\u3001`[a, b, a, c]` \u3068\u3044\u3046\u30ea\u30b9\u30c8\u304c\u3042\u3063\u305f\u5834\u5408\u3001\u305d\u308c\u305e\u308c\u306e\u51fa\u73fe\u56de\u6570\uff08`a` \u306f 2 \u56de\u3001`b` \u3068 `c` \u306f 1 \u56de\uff09\u306b\u7f6e\u304d\u63db\u3048\u305f `[2, 1, 2, 1]` \u3068\u3044\u3046\u30ea\u30b9\u30c8\u3092\u307e\u305a\u4f5c\u6210\u3057\u3001\u305d\u3053\u304b\u3089\u5024\u304c 1 \u306e\u500b\u6570\u3092\u6570\u3048\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```prolog\n:- initialization(main).\n\nhex_vertex(R, T, DR, DT, [R1 ,T1]) :-\n  R1 is R - DR,\n  T1 is (T * 2 + R - 1 + DT) mod 40.\n\nvertices([], []).\nvertices([0'0, 0'0|CS], VS) :-\n  findall(V, (between(0, 39, T), append([0], [T], V)), VS1),\n  findall(V, (between(0, 39, T), T mod 2 =:= 1, append([0], [T], V)), VS2),\n  append(VS1, VS2, VS3),\n  vertices(CS, VS4),\n  append(VS3, VS4, VS).\nvertices([C1, C2|CS], VS) :-\n  R is C1 - 0'0,\n  T is C2 - 0'a,\n  findall(V, (between(0, 1, DR), between(0, 2, DT), hex_vertex(R, T, DR, DT, V)), VS1),\n  vertices(CS, VS2),\n  append(VS1, VS2, VS).\n\nelems_counts([], _, []).\nelems_counts([E|ES], List, [C|CS]) :-\n  findall(E0, (member(E0, List), E0 == E), ES0),\n  length(ES0, C),\n  elems_counts(ES, List, CS).\nelems_counts(ES, CS) :-\n  elems_counts(ES, ES, CS).\n\nsolve(Input, Output) :-\n  vertices(Input, VS),                       % \u5168\u9802\u70b9\u3092\u53d6\u5f97\u3059\u308b\n  elems_counts(VS, CS),                      % \u8981\u7d20\u3092\u8981\u7d20\u306e\u51fa\u73fe\u6570\u306b\u5909\u63db\u3059\u308b\n  findall(C, (member(C, CS), C =:= 1), CS1), % \u51fa\u73fe\u6570\u304c 1 \u306e\u8981\u7d20\u306e\u307f\u62bd\u51fa\u3059\u308b\n  length(CS1, Count),                        % \u51fa\u73fe\u6570\u304c 1 \u306e\u8981\u7d20\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n  number_codes(Count, Output).               % \u500b\u6570\u3092\u6587\u5b57\u5217\u306b\u3059\u308b\n\n% \u4ee5\u4e0b\u30c6\u30b9\u30c8\u5b9f\u65bd\u7528\u30b3\u30fc\u30c9\n\njudge(_, Expected, Expected) :-\n  format(\".\", []).\njudge(Input, Expected, Actual) :-\n  format(\"~ninput:    ~s~nexpected: ~s~nactual:   ~s~n\", [Input, Expected, Actual]).\n\ntest(Input, Expected) :-\n  solve(Input, Actual),\n  judge(Input, Expected, Actual).\n\nmain :-\n  test(\"1a2t3s2s\", \"11\"),\n  test(\"1a1c1d00\", \"22\"),\n  test(\"00\", \"20\"),\n  % \u4e2d\u7565\n  format(\"~n\", []),\n  halt.\n```\n\n## C++\n\n\u5168\u9802\u70b9\u3092\u96c6\u3081\u3066\u304b\u3089\u51fa\u73fe\u56de\u6570\u3092\u6570\u3048\u308b\u306e\u306f C++ \u3067\u306f\u9762\u5012\u306a\u611f\u3058\u3060\u3063\u305f\u306e\u3067\u3001\u4ee3\u308f\u308a\u306b\u9802\u70b9\u3092\u6c42\u3081\u308b\u305f\u3073\u306b\u500b\u6570\u3092\u6570\u3048\u3066\u3044\u304f\u3068\u3044\u3046\u65b9\u6cd5\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\u3002\n\n```cpp\n#include <iostream>\n#include <string>\n#include <map>\n#include <numeric>\n\ntypedef std::map<int, int> Vertices;\n\nconst int ds[][2] = { {0, 0}, {0, 1}, {0, 2}, {1, 0}, {1, 1}, {1, 2} };\n\nvoid vertices(const std::string& input, Vertices& vs)\n{\n    auto ci = input.begin();\n    while(ci != input.end())\n    {\n        if((*ci == '0') && (*(ci + 1) == '0'))\n        {\n            for(int i = 0; i < 40; ++i)\n            {\n                vs[i] += (1 + i % 2);\n            }\n        }\n        else\n        {\n            int r = *ci - '0';\n            int t = *(ci + 1) - 'a';\n            for(auto di = std::begin(ds); di != std::end(ds); ++di)\n            {\n                ++vs[(r - (*di)[0]) * 40 + (t * 2 + r - 1 + (*di)[1]) % 40];\n            }\n        }\n        advance(ci, 2);\n    }\n}\n\nstd::string solve(const std::string& input)\n{\n    Vertices vs;\n    vertices(input, vs);\n    int count = std::accumulate(vs.begin(), vs.end(), 0, [](int a, const std::pair<int, int>& v) { return (v.second == 1) ? (a + 1) : a; });\n    return std::to_string(count);\n}\n\n// \u4ee5\u4e0b\u30c6\u30b9\u30c8\u5b9f\u65bd\u7528\u30b3\u30fc\u30c9\n\nvoid test(const std::string& input, const std::string& expected)\n{\n    std::string actual = solve(input);\n    if(actual == expected)\n    {\n        std::cout << \".\";\n    }\n    else\n    {\n        std::cout\n          << \"\\ninput:    \" << input\n          << \"\\nexpected: \" << expected\n          << \"\\nactual:   \" << actual\n          << \"\\n\";\n    }\n}\n\nint main(int, char* [])\n{\n    test(\"1a2t3s2s\", \"11\");\n    test(\"1a1c1d00\", \"22\");\n    // \u4e2d\u7565\n\n    std::cout << std::endl;\n\n    return 0;\n}\n```\n\n## Ruby \u4e09\u5ea6\u3073\n\nC++ \u306e `std::map` \u3067\u9802\u70b9\u3092\u6c42\u3081\u308b\u305f\u3073\u306b\u500b\u6570\u3092\u6570\u3048\u308b\u3068\u3044\u3046\u65b9\u6cd5\u306f\u3001Ruby \u3067\u3082 `Hash` \u3092\u4f7f\u3048\u3070\u540c\u3058\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3082\u3046\u4e00\u5ea6 Ruby \u306b\u7ffb\u8a33\u3057\u3066\u307f\u307e\u3057\u305f\u3002`test` \u4ee5\u4e0b\u306f\u540c\u3058\u306a\u306e\u3067\u3001`solve` \u306e\u307f\u3067\u3059\u3002\n\n```rb\ndef solve(input)\n  input\n    .chars\n    .each_slice(2)\n    .each_with_object(Hash.new(0)) {|(r, t), a|\n      r, t = [r, t] == ['0', '0'] ? [0, 0] : [r.to_i, t.ord - 'a'.ord]\n      if [r, t] == [0, 0]\n        40.times {|i| a[[0, i]] += (1 + i % 2) }\n      else\n        [0, 1].product([0, 1, 2]).each {|dr, dt| a[[r - dr, (t * 2 + r - 1 + dt) % 40]] += 1 }\n      end\n    }\n    .select {|k, size| size == 1}\n    .size\n    .to_s\nend\n```\n\n", "tags": ["C++", "Ruby", "Haskell", "Prolog", "\u3069\u3046\u66f8\u304f"]}