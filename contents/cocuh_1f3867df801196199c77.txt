{"tags": ["Python3.3.4", "Cython0.20.1"], "context": " More than 1 year has passed since last update.C\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306ePython binding\u3092\u66f8\u3053\u3046\u3068\u601d\u3044\u3001Cython\u3067\u3084\u308d\u3046\u3068\u7df4\u7fd2\u3092\u517c\u306d\u3066 linked list\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002( Python C API\u306f\u3064\u3089\u304b\u3063\u305f\u306e\u3067\u2026)\n\u308f\u308a\u3068\u65ec\u3092\u9003\u3057\u305f\u611f\u306f\u3042\u308a\u307e\u3059\u304c\u6c17\u306b\u305b\u305a\u3084\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\nCython\u306b\u3064\u3044\u3066\n\u4e00\u8a00\u3067\u8868\u305b\u3070 Python\u307f\u305f\u3044\u306bC\u304c\u66f8\u3051\u308b\u8a00\u8a9e\u3067\u3059\u3002\n\u6b63\u78ba\u306b\u8a00\u3048\u3070Python\u304b\u3089C\u3092\u53e9\u304f\u305f\u3081\u306ePython/C API\u304c\u3042\u308a\u307e\u3057\u3066\u3001\u305d\u306eAPI\u3092\u7c21\u5358\u306b\u66f8\u3051\u308b\u8a00\u8a9e\u306b\u306a\u308a\u307e\u3059\u3002\nPython\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 \u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u66f8\u3051\u307e\u3059\u3057\u3001 C\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53e9\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u306e\u3067\u3001 \u9ad8\u901f\u5316\u3084 binding\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u9023\u7d50\u30ea\u30b9\u30c8(linked list)\u3092\u5b9f\u88c5\u3059\u308b\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n\n\u9023\u7d50\u30ea\u30b9\u30c8(LinkedList)\u306e\u5b9f\u88c5\n\nstruct\u3092\u4f7f\u3046\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u60c5\u5831\u3092\u6301\u3064\n\n\nint data\nLinkedList*next\n\n\n\n\u5b9f\u88c5\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n\n\u8ffd\u52a0\u3059\u308bvoid add(int data)\n\n\u6570\u3048\u308bint count(int data)\n\nPython\u3067\u3044\u3046\u30a4\u30c6\u30ec\u30fc\u30bf__iter__(self)\n\n\n\n\n\n\u3069\u3046\u5b9f\u88c5\u3059\u308b\u304b\n\u8abf\u3079\u308b\u3068\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\u3088\u3046\u3067\u3001\n\nC\u3092\u4f7f\u308f\u306a\u3044\u3067Cython\u4e0a\u306b\u5b9f\u88c5\u3059\u308b\nC\u3067\u5b9f\u88c5\u3057Python\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092Cython\u3067\u66f8\u304f\n\n\n\u2191\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u306f\u3053\u3063\u3061\n\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u4e21\u65b9\u3084\u3063\u3066\u307f\u307e\u3057\u305f\n\n\n1.C\u3092\u4f7f\u308f\u306a\u3044\u3067Cython\u4e0a\u3067\u5b9f\u88c5\n\ncythonlinkedlist.pyx\ncython\u306e\u6587\u6cd5\u3067\u8a18\u8ff0\u3057\u3066\u3044\u308b\u306e\u3067\u666e\u901a\u306ePython\u3068\u9055\u3046\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u3059\u308b\u3002\n\ncythonlinkedlist.pyx\nfrom libc.stdlib cimport malloc # malloc\u95a2\u6570\u3092c\u304b\u3089import\n\nctypedef struct _LinkedListStruct:\n    # C\u4e0a\u306e\u69cb\u9020\u4f53\u3068\u3057\u3066\u5ba3\u8a00(Python\u5074\u304b\u3089\u306f\u898b\u3048\u306a\u3044)\n    int data\n    _LinkedListStruct*next\n\ncdef class LinkedList:\n    # Python\u5074\u304b\u3089\u898b\u3048\u308bclass\n\n    cdef _LinkedListStruct*_head\n    # Python\u304b\u3089\u898b\u3048\u305aCython\u304b\u3089\u898b\u3048\u308bcdef\n\n    def __cinit__(self):\n\n        self._head = NULL\n\n    cpdef add(self, int data): # cpdef void add(~~~\u306f\u4e0d\u53ef\n        # C\u304b\u3089\u3082Python\u304b\u3089\u3082\u8aad\u307f\u8fbc\u3081\u308bcpdef\n\n        # malloc\u3059\u308b\n        # <_LinkedListStruct*>\u304c\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u30a8\u30e9\u308b\n        cdef _LinkedListStruct*obj = <_LinkedListStruct*> malloc(sizeof(_LinkedListStruct))\n        if not obj:\n            raise MemoryError()\n\n        # \u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\n        obj.data = data\n        obj.next = NULL # \u521d\u671f\u5316\u3092\u5fd8\u308c\u308b\u3068\u30bb\u30b0\u30d5\u30a9\u308b\n\n        # \u6700\u5f8c\u5c3e\u63a2\u7d22\n        cdef _LinkedListStruct*ptr = self._head # if\u6587\u306a\u3044\u3067\u5ba3\u8a00\u51fa\u6765\u306a\u3044\n        if self._head is NULL:\n            # \u5730\u5473\u306b\u4f7f\u3048\u308bis\n            # None\u306f\u4f7f\u3048\u306a\u3044\n            self._head = obj\n            return\n        else:\n            while ptr.next is not NULL:\n                ptr = ptr.next\n            ptr.next = obj\n\n    cpdef count(self, int data): # cpdef int count(~~~~\u306f\u53ef\n        cdef _LinkedListStruct*ptr = self._head\n        cdef int c = 0\n        while ptr is not NULL:\n            if ptr.data == data:\n                c += 1\n            ptr = ptr.next\n        return c\n\n    def __iter__(self):\n        # \u3053\u3063\u3061\u306fdef\u3092\u4f7f\u3046\n        # \u7279\u6b8a\u30e1\u30bd\u30c3\u30c9\u306fdef\u3063\u307d\u3044\u2026?(\u81ea\u4fe1\u306f\u306a\u3044)\n        cdef _LinkedListStruct*ptr = self._head\n        while ptr is not NULL:\n            yield ptr.data\n            ptr = ptr.next\n\n        # # \u6b21\u306e\u66f8\u304d\u65b9\u3082\u901a\u3063\u305f\n        # l = []\n        # while ptr is not NULL:\n        #     l.append(ptr.data)\n        #     ptr = ptr.next\n        # return iter(l)\n\n\n\nsetup.py\n\u30b3\u30f3\u30d1\u30a4\u30eb\u65b9\u6cd5\u3092setup.py\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002C\u3067\u3044\u3046 Makefile\u306b\u3042\u305f\u308b\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\nsetup.py\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\n\nsetup(\n    cmdclass = {'build_ext':build_ext},\n    ext_modules = [Extension('cythonlinkedlist', ['cythonlinkedlist.pyx'])]\n)\n\n\n\n\u8a66\u3059\n$ python setup.py build_ext -i\n   // python setup.py build_ext --inplace \u3067\u3082\u53ef\n   // Cython\u306e\u30d3\u30eb\u30c9\u3057\u3066\u308b\nrunning build_ext\ncythoning cythonlinkedlist.pyx to cythonlinkedlist.c\nbuild 'pythonlinkedlist' extention\ngcc (\u7565)\n$ python\nPython 3.3.4 (default, Feb 11 2014, 15:56:08) \n[GCC 4.8.2 20140206 (prerelease)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import cythonlinkedlist\n>>> ll = cythonlinkedlist.LinkedList()\n>>> ll.add(1)\n>>> ll.add(2)\n>>> ll.add(3)\n>>> ll.add(1)\n>>> ll.add(2)\n>>> ll.add(1)\n>>> ll.count(1)\n3\n>>> ll.count(2)\n2\n>>> ll.count(3)\n1\n>>> [x for x in ll]\n[1, 2, 3, 1, 2, 1]\n\n(\u2229\u00b4\u2200\uff40)\u2229\u308f\u30fc\u3044\u3067\u304d\u305f\n\n2.C\u3067\u5b9f\u88c5\u3057Python\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092Cython\u3067\u304b\u304f\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\u3068\u3057\u3066\u306f\n\nlinkedlist.c - C\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\ncythonlinkedlist.pxd - Cython\u3067\u4f7f\u3046\u7269\u4f53\u306e\u5ba3\u8a00(C\u306e.h\u306b\u5f53\u305f\u308b\u3082\u306e)\ncythonlinkedlist.pyx - Cython\u3068Python\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\n\n\nlinkedlist.c\n\u30bf\u30d6\u30f3\u4e00\u822c\u7684\u306a\u5b9f\u88c5\u65b9\u6cd5\n\u3010\u3061\u3083\u3093\u3068\u4f5c\u308b\u3068\u304d\u306ffree\u3057\u307e\u3057\u3087\u3046\u3011\n\nlinkedlist.c\n#include <stdlib.h>\n#include <stdio.h>\n\ntypedef struct LinkedListStruct{\n    int data;\n    struct LinkedListStruct *next;\n}LinkedListStruct;\n\nLinkedListStruct* add(LinkedListStruct* head, int data)\n{\n    // \u666e\u901a\u306bmalloc\n    LinkedListStruct *obj = (LinkedListStruct *)malloc(sizeof(LinkedListStruct));\n    if(obj == NULL){\n        fprintf(stderr,\"malloc failed\\n\");\n        exit(1);\n    }\n\n    // \u30c7\u30fc\u30bf\u683c\u7d0d\n    obj->next = NULL;\n    obj->data = data;\n\n\n    // \u6700\u5f8c\u5c3e\u63a2\u7d22\n    if(head == NULL){\n        return obj;\n    }else{\n        LinkedListStruct *ptr = head;\n        while(ptr->next != NULL){\n            ptr = ptr->next;\n        }\n        ptr->next = obj;\n        return head;\n    }\n}\n\nint count(LinkedListStruct *ptr, int data)\n{\n    int c = 0;\n    while(ptr != NULL){\n        if(ptr->data == data){\n            c += 1;\n        }\n        ptr = ptr->next;\n    }\n    return c;\n}\n\n\nint main(void){\n    // \u30c6\u30b9\u30c8\u7528\n    LinkedListStruct*head = NULL;\n\n    head = add(head,1);\n    head = add(head,2);\n    head = add(head,3);\n    head = add(head,1);\n    head = add(head,2);\n    head = add(head,1);\n\n    printf(\"1:%d\\n\",count(head,1));\n    printf(\"2:%d\\n\",count(head,2));\n    printf(\"3:%d\\n\",count(head,3));\n\n    printf(\"\\n\");\n    LinkedListStruct*ptr = head;\n    while(ptr != NULL){\n        printf(\"%d, \", ptr->data);\n        ptr = ptr->next;\n    }\n    printf(\"\\n\");\n}\n\n\n\n\ncyrhonlinkedlist.pxd\nc\u3067\u3044\u3046.h\u3068\u540c\u3058\u3088\u3046\u306a\u3082\u306e\u3089\u3057\u3044\n\u3053\u308c\u3092\u4f7f\u308f\u305a\u306bpyx\u4e0a\u306b\u304b\u3044\u3066\u3082\u3067\u304d\u308b\u3051\u308c\u3069\u3001\u540d\u524d\u7a7a\u9593\u7684\u306b\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u8aad\u307f\u306b\u304f\u3044\u306e\u3067\u500b\u4eba\u7684\u306b\u5206\u3051\u3066\u307e\u3059\n\ncyrhonlinkedlist.pxd\ncdef extern from \"linkedlist.c\":\n    cdef struct LinkedListStruct:\n        int data # pyx\u3067\u53c2\u7167\u3057\u3066\u3044\u308b\u3082\u306e\u3092\u5ba3\u8a00\n        LinkedListStruct *next\n    int count(LinkedListStruct* head, int data)\n    LinkedListStruct* add(LinkedListStruct* head, int data)\n\n\n\ncyrhonlinkedlist.pyx\n\ncythonlinkedlist.pyx\ncimport cythonlinkedlist as cll # \u5730\u5473\u306b\u4f7f\u3048\u308bas\n\ncdef class LinkedList:\n    cdef cll.LinkedListStruct *_head\n\n    def __cinit__(self):\n        # __init__\u3067\u306f\u3055\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3089\u3057\u3044\n        # http://docs.cython.org/src/userguide/special_methods.html\n        self._head = NULL\n\n    cpdef add(self, int data): # cpdef void add(~~~~\u306f\u3060\u3081\n        self._head = cll.add(self._head, data)\n        if self._head is NULL:\n            raise MemoryError()\n\n    cpdef count(self, int data): # cpdef int count(~~~~\u3067\u3082\u3088\u3044\u3063\u307d\u3044\n        return cll.count(self._head, data)\n\n    def __iter__(self):\n        # \u3084\u3063\u3071\u308a\u3053\u3063\u3061\u306e\u7279\u6b8a\u30e1\u30bd\u30c3\u30c9\u3082def\n        # cpdef\u306b\u3059\u308b\u3068\u30a8\u30e9\u30fc\n\n        cdef cll.LinkedListStruct*ptr = self._head\n        while ptr is not NULL:\n            yield ptr.data # C\u306eint\u304b\u3089Python\u306eint\u306b\u6697\u9ed9\u306e\u578b\u5909\u63db\n            ptr = ptr.next\n\n\n\n\nsetup.py\n1\u756a\u3081\u3068\u304a\u306a\u3058\n\nsetup.py\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\n\nsetup(\n    cmdclass = {'build_ext':build_ext},\n    ext_modules = [Extension('cythonlinkedlist', ['cythonlinkedlist.pyx'])]\n)\n\n\n\n\u305f\u3081\u3059\n$ python setup.py build_ext -i\nrunning build_ext\ncythoning cythonlinkedlist.pyx to cythonlinkedlist.c\nbuilding 'cythonlinkedlist' extension\ngcc -pthread -Wno-unused-result -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -fPIC -I/usr/include/python3.3m -c cythonlinkedlist.c -o build/temp.linux-x86_64-3.3/cythonlinkedlist.o\nIn file included from cythonlinkedlist.c:343:0:\nlinkedlist.c: In function \u2018main\u2019:\nlinkedlist.c:71:1: warning: control reaches end of non-void function [-Wreturn-type]\n }\n ^\ngcc (\u7565)\u306a\u306b\u304bwarning\u3067\u3066\u308b\u3051\u3069\u901a\u308b\n$ python\nPython 3.3.4 (default, Feb 11 2014, 15:56:08) \n[GCC 4.8.2 20140206 (prerelease)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import cythonlinkedlist\n>>> ll = cythonlinkedlist.LinkedList()\n>>> ll.add(1)\n>>> ll.add(2)\n>>> ll.add(3)\n>>> ll.add(1)\n>>> ll.add(2)\n>>> ll.add(1)\n>>> ll.count(1)\n3\n>>> ll.count(2)\n2\n>>> ll.count(3)\n1\n>>> [x for x in ll]\n[1, 2, 3, 1, 2, 1]\n>>> \n\n\u0669( '\u03c9' )\u0648\u3088\u3063\u3057\u3083\n\n\u307e\u3068\u3081\n\u610f\u5916\u3068\u7656\u304c\u3042\u308a\u307e\u3059\u304cCython\u3044\u3044\u306a\u3068\u304a\u3082\u3044\u307e\u3057\u305f\u3002\n\u3044\u308d\u3044\u308d\u306a\u66f8\u304d\u65b9\u304c\u3067\u304d\u308b\u306e\u304cPythonic\u3058\u3083\u306a\u3044\u6c17\u3082\u3059\u308b\u3051\u308c\u3069\u305d\u3053\u306fZEN\u3092\u8cab\u304f\u65b9\u91dd\u3067\u3002\n\u6319\u52d5\u304c\u304a\u304b\u3057\u3044\u3068\u601d\u3063\u305f\u3053\u3068\u306f\u306a\u304b\u3063\u305f\u306e\u3067\u308f\u308a\u3068\u3057\u3063\u304b\u308a\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u306b\u611f\u3058\u307e\u3057\u305f\u3002\n\u3061\u3087\u3063\u3068\u30c7\u30d0\u30c3\u30b0\u304c\u975e\u5e38\u306b\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3068\u304bC\u306e\u77e5\u8b58\u304c\u305d\u3053\u305d\u3053\u3044\u308b\u3053\u3068\u3068\u304b\u3042\u308b\u306e\u3067\u305d\u3053\u304c\u6ce8\u610f\u8981\u308a\u305d\u3046\u3067\u3059\u304cPython C API\u53e9\u304f\u3088\u308a\u65ad\u7136\u697d\u3067\u3059\u3002\npyogg\u3042\u305f\u308a\u3068audio\u3042\u305f\u308a\u306ePython\u306e\u30e1\u30f3\u30c6\u304c\u3046\u3054\u3044\u3066\u306a\u304b\u3063\u305f\u308a\u3057\u3066\u308b\u306e\u3067\u52c9\u5f37\u3057\u3064\u3064\u81ea\u5206\u3067wrap\u3057\u3088\u3046\u304b\u306a\u3068\u601d\u3063\u3066\u305f\u308a(\u5e0c\u671b\u7684\u89b3\u6e2c)\n\n\u3081\u3082\ngcc -lglut\u307f\u305f\u3044\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30e9\u30a4\u30d6\u30e9\u30ea((C\u306f\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u7528\u8a9e\u3042\u3063\u3066\u308b\u81ea\u4fe1\u306a\u3044\u3067\u3059))\u3092\u8aad\u307f\u8fbc\u307e\u305b\u305f\u3044\u3068\u304d\u306fkwargs\u306blist\u3067\u5165\u308c\u3066\u3042\u3052\u308b\u3068\u3044\u3051\u308b\u306e\u3067\u30e1\u30e2\u3067\u3059\u3002\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\n\nsetup(\n    cmdclass = {'build_ext':build_ext},\n    ext_modules = [Extension('pyopenal', ['pyopenal.pyx'],\n                             libraries=['openal']\n                             )]\n)\n\n\n\u3061\u306a\u307f\u306b\n\u3053\u306e\u8a18\u4e8b\u306f\u79c1\u306ehatenaBlog\u306e\u8a18\u4e8b\u3092qiita\u306b\u52a0\u7b46\u3057\u8ee2\u8f09\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002(2014/3/16)\nC\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306ePython binding\u3092\u66f8\u3053\u3046\u3068\u601d\u3044\u3001Cython\u3067\u3084\u308d\u3046\u3068\u7df4\u7fd2\u3092\u517c\u306d\u3066 `linked list`\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002( `Python C API`\u306f\u3064\u3089\u304b\u3063\u305f\u306e\u3067\u2026)\n\u308f\u308a\u3068\u65ec\u3092\u9003\u3057\u305f\u611f\u306f\u3042\u308a\u307e\u3059\u304c\u6c17\u306b\u305b\u305a\u3084\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n# Cython\u306b\u3064\u3044\u3066\n\u4e00\u8a00\u3067\u8868\u305b\u3070 **Python\u307f\u305f\u3044\u306bC\u304c\u66f8\u3051\u308b**\u8a00\u8a9e\u3067\u3059\u3002\n\n\u6b63\u78ba\u306b\u8a00\u3048\u3070Python\u304b\u3089C\u3092\u53e9\u304f\u305f\u3081\u306e`Python/C API`\u304c\u3042\u308a\u307e\u3057\u3066\u3001\u305d\u306eAPI\u3092\u7c21\u5358\u306b\u66f8\u3051\u308b\u8a00\u8a9e\u306b\u306a\u308a\u307e\u3059\u3002\n\nPython\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 **\u30b3\u30f3\u30d1\u30a4\u30eb**\u3057\u3066\u66f8\u3051\u307e\u3059\u3057\u3001 **C\u306e\u30e9\u30a4\u30d6\u30e9\u30ea**\u3092\u53e9\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u306e\u3067\u3001 **\u9ad8\u901f\u5316**\u3084 **binding**\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\n# \u9023\u7d50\u30ea\u30b9\u30c8(linked list)\u3092\u5b9f\u88c5\u3059\u308b\n## \u3084\u308a\u305f\u3044\u3053\u3068\n- **[\u9023\u7d50\u30ea\u30b9\u30c8(LinkedList)](http://ja.wikipedia.org/wiki/%E9%80%A3%E7%B5%90%E3%83%AA%E3%82%B9%E3%83%88)**\u306e\u5b9f\u88c5\n- **struct**\u3092\u4f7f\u3046\u3001\u4ee5\u4e0b\u306e2\u3064\u306e\u60c5\u5831\u3092\u6301\u3064\n    - `int data`\n    - `LinkedList*next`\n- **\u5b9f\u88c5\u3059\u308b\u30e1\u30bd\u30c3\u30c9**\n    - \u8ffd\u52a0\u3059\u308b`void add(int data)`\n    - \u6570\u3048\u308b`int count(int data)`\n    - Python\u3067\u3044\u3046\u30a4\u30c6\u30ec\u30fc\u30bf`__iter__(self)`\n\n\n## \u3069\u3046\u5b9f\u88c5\u3059\u308b\u304b\n\u8abf\u3079\u308b\u3068\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306f2\u3064\u3042\u308b\u3088\u3046\u3067\u3001\n\n0. C\u3092\u4f7f\u308f\u306a\u3044\u3067Cython\u4e0a\u306b\u5b9f\u88c5\u3059\u308b\n0. C\u3067\u5b9f\u88c5\u3057Python\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092Cython\u3067\u66f8\u304f\n    - \u2191\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u306f\u3053\u3063\u3061\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u4e21\u65b9\u3084\u3063\u3066\u307f\u307e\u3057\u305f\n<br/>\n\n\n## 1.C\u3092\u4f7f\u308f\u306a\u3044\u3067Cython\u4e0a\u3067\u5b9f\u88c5\n### cythonlinkedlist.pyx\ncython\u306e\u6587\u6cd5\u3067\u8a18\u8ff0\u3057\u3066\u3044\u308b\u306e\u3067\u666e\u901a\u306ePython\u3068\u9055\u3046\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u3059\u308b\u3002\n\n```py3:cythonlinkedlist.pyx\nfrom libc.stdlib cimport malloc # malloc\u95a2\u6570\u3092c\u304b\u3089import\n\nctypedef struct _LinkedListStruct:\n    # C\u4e0a\u306e\u69cb\u9020\u4f53\u3068\u3057\u3066\u5ba3\u8a00(Python\u5074\u304b\u3089\u306f\u898b\u3048\u306a\u3044)\n    int data\n    _LinkedListStruct*next\n\ncdef class LinkedList:\n    # Python\u5074\u304b\u3089\u898b\u3048\u308bclass\n    \n    cdef _LinkedListStruct*_head\n    # Python\u304b\u3089\u898b\u3048\u305aCython\u304b\u3089\u898b\u3048\u308bcdef\n\n    def __cinit__(self):\n\n        self._head = NULL\n\n    cpdef add(self, int data): # cpdef void add(~~~\u306f\u4e0d\u53ef\n        # C\u304b\u3089\u3082Python\u304b\u3089\u3082\u8aad\u307f\u8fbc\u3081\u308bcpdef\n\n        # malloc\u3059\u308b\n        # <_LinkedListStruct*>\u304c\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u30a8\u30e9\u308b\n        cdef _LinkedListStruct*obj = <_LinkedListStruct*> malloc(sizeof(_LinkedListStruct))\n        if not obj:\n            raise MemoryError()\n\n        # \u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\n        obj.data = data\n        obj.next = NULL # \u521d\u671f\u5316\u3092\u5fd8\u308c\u308b\u3068\u30bb\u30b0\u30d5\u30a9\u308b\n        \n        # \u6700\u5f8c\u5c3e\u63a2\u7d22\n        cdef _LinkedListStruct*ptr = self._head # if\u6587\u306a\u3044\u3067\u5ba3\u8a00\u51fa\u6765\u306a\u3044\n        if self._head is NULL:\n            # \u5730\u5473\u306b\u4f7f\u3048\u308bis\n            # None\u306f\u4f7f\u3048\u306a\u3044\n            self._head = obj\n            return\n        else:\n            while ptr.next is not NULL:\n                ptr = ptr.next\n            ptr.next = obj\n\n    cpdef count(self, int data): # cpdef int count(~~~~\u306f\u53ef\n        cdef _LinkedListStruct*ptr = self._head\n        cdef int c = 0\n        while ptr is not NULL:\n            if ptr.data == data:\n                c += 1\n            ptr = ptr.next\n        return c\n    \n    def __iter__(self):\n        # \u3053\u3063\u3061\u306fdef\u3092\u4f7f\u3046\n        # \u7279\u6b8a\u30e1\u30bd\u30c3\u30c9\u306fdef\u3063\u307d\u3044\u2026?(\u81ea\u4fe1\u306f\u306a\u3044)\n        cdef _LinkedListStruct*ptr = self._head\n        while ptr is not NULL:\n            yield ptr.data\n            ptr = ptr.next\n            \n        # # \u6b21\u306e\u66f8\u304d\u65b9\u3082\u901a\u3063\u305f\n        # l = []\n        # while ptr is not NULL:\n        #     l.append(ptr.data)\n        #     ptr = ptr.next\n        # return iter(l)\n```\n### setup.py\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u65b9\u6cd5\u3092`setup.py`\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002C\u3067\u3044\u3046 **Makefile**\u306b\u3042\u305f\u308b\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py3:setup.py\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\n\nsetup(\n    cmdclass = {'build_ext':build_ext},\n    ext_modules = [Extension('cythonlinkedlist', ['cythonlinkedlist.pyx'])]\n)\n```\n\n\n### \u8a66\u3059\n\n```pycon\n$ python setup.py build_ext -i\n   // python setup.py build_ext --inplace \u3067\u3082\u53ef\n   // Cython\u306e\u30d3\u30eb\u30c9\u3057\u3066\u308b\nrunning build_ext\ncythoning cythonlinkedlist.pyx to cythonlinkedlist.c\nbuild 'pythonlinkedlist' extention\ngcc (\u7565)\n$ python\nPython 3.3.4 (default, Feb 11 2014, 15:56:08) \n[GCC 4.8.2 20140206 (prerelease)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import cythonlinkedlist\n>>> ll = cythonlinkedlist.LinkedList()\n>>> ll.add(1)\n>>> ll.add(2)\n>>> ll.add(3)\n>>> ll.add(1)\n>>> ll.add(2)\n>>> ll.add(1)\n>>> ll.count(1)\n3\n>>> ll.count(2)\n2\n>>> ll.count(3)\n1\n>>> [x for x in ll]\n[1, 2, 3, 1, 2, 1]\n```\n\n\n<div style=\"text-align:center;font-size:120%\"><b>(\u2229\u00b4\u2200\uff40)\u2229\u308f\u30fc\u3044\u3067\u304d\u305f</b></div>\n\n\n\n## 2.C\u3067\u5b9f\u88c5\u3057Python\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092Cython\u3067\u304b\u304f\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\u3068\u3057\u3066\u306f\n\n- linkedlist.c - C\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n- cythonlinkedlist.pxd - Cython\u3067\u4f7f\u3046\u7269\u4f53\u306e\u5ba3\u8a00(C\u306e.h\u306b\u5f53\u305f\u308b\u3082\u306e)\n- cythonlinkedlist.pyx - Cython\u3068Python\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\n\n### linkedlist.c\n\u30bf\u30d6\u30f3\u4e00\u822c\u7684\u306a\u5b9f\u88c5\u65b9\u6cd5\n**\u3010\u3061\u3083\u3093\u3068\u4f5c\u308b\u3068\u304d\u306ffree\u3057\u307e\u3057\u3087\u3046\u3011**\n\n```c:linkedlist.c\n#include <stdlib.h>\n#include <stdio.h>\n\ntypedef struct LinkedListStruct{\n    int data;\n    struct LinkedListStruct *next;\n}LinkedListStruct;\n\nLinkedListStruct* add(LinkedListStruct* head, int data)\n{\n    // \u666e\u901a\u306bmalloc\n    LinkedListStruct *obj = (LinkedListStruct *)malloc(sizeof(LinkedListStruct));\n    if(obj == NULL){\n        fprintf(stderr,\"malloc failed\\n\");\n        exit(1);\n    }\n    \n    // \u30c7\u30fc\u30bf\u683c\u7d0d\n    obj->next = NULL;\n    obj->data = data;\n    \n    \n    // \u6700\u5f8c\u5c3e\u63a2\u7d22\n    if(head == NULL){\n        return obj;\n    }else{\n        LinkedListStruct *ptr = head;\n        while(ptr->next != NULL){\n            ptr = ptr->next;\n        }\n        ptr->next = obj;\n        return head;\n    }\n}\n\nint count(LinkedListStruct *ptr, int data)\n{\n    int c = 0;\n    while(ptr != NULL){\n        if(ptr->data == data){\n            c += 1;\n        }\n        ptr = ptr->next;\n    }\n    return c;\n}\n\n\nint main(void){\n    // \u30c6\u30b9\u30c8\u7528\n    LinkedListStruct*head = NULL;\n    \n    head = add(head,1);\n    head = add(head,2);\n    head = add(head,3);\n    head = add(head,1);\n    head = add(head,2);\n    head = add(head,1);\n    \n    printf(\"1:%d\\n\",count(head,1));\n    printf(\"2:%d\\n\",count(head,2));\n    printf(\"3:%d\\n\",count(head,3));\n    \n    printf(\"\\n\");\n    LinkedListStruct*ptr = head;\n    while(ptr != NULL){\n        printf(\"%d, \", ptr->data);\n        ptr = ptr->next;\n    }\n    printf(\"\\n\");\n}\n```\n----\n#### cyrhonlinkedlist.pxd\nc\u3067\u3044\u3046.h\u3068\u540c\u3058\u3088\u3046\u306a\u3082\u306e\u3089\u3057\u3044\n\u3053\u308c\u3092\u4f7f\u308f\u305a\u306bpyx\u4e0a\u306b\u304b\u3044\u3066\u3082\u3067\u304d\u308b\u3051\u308c\u3069\u3001\u540d\u524d\u7a7a\u9593\u7684\u306b\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u8aad\u307f\u306b\u304f\u3044\u306e\u3067\u500b\u4eba\u7684\u306b\u5206\u3051\u3066\u307e\u3059\n\n```py3:cyrhonlinkedlist.pxd\ncdef extern from \"linkedlist.c\":\n    cdef struct LinkedListStruct:\n        int data # pyx\u3067\u53c2\u7167\u3057\u3066\u3044\u308b\u3082\u306e\u3092\u5ba3\u8a00\n        LinkedListStruct *next\n    int count(LinkedListStruct* head, int data)\n    LinkedListStruct* add(LinkedListStruct* head, int data)\n```\n\n### cyrhonlinkedlist.pyx\n```py3:cythonlinkedlist.pyx\ncimport cythonlinkedlist as cll # \u5730\u5473\u306b\u4f7f\u3048\u308bas\n\ncdef class LinkedList:\n    cdef cll.LinkedListStruct *_head\n    \n    def __cinit__(self):\n        # __init__\u3067\u306f\u3055\u308c\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3089\u3057\u3044\n        # http://docs.cython.org/src/userguide/special_methods.html\n        self._head = NULL\n    \n    cpdef add(self, int data): # cpdef void add(~~~~\u306f\u3060\u3081\n        self._head = cll.add(self._head, data)\n        if self._head is NULL:\n            raise MemoryError()\n\n    cpdef count(self, int data): # cpdef int count(~~~~\u3067\u3082\u3088\u3044\u3063\u307d\u3044\n        return cll.count(self._head, data)\n    \n    def __iter__(self):\n        # \u3084\u3063\u3071\u308a\u3053\u3063\u3061\u306e\u7279\u6b8a\u30e1\u30bd\u30c3\u30c9\u3082def\n        # cpdef\u306b\u3059\u308b\u3068\u30a8\u30e9\u30fc\n        \n        cdef cll.LinkedListStruct*ptr = self._head\n        while ptr is not NULL:\n            yield ptr.data # C\u306eint\u304b\u3089Python\u306eint\u306b\u6697\u9ed9\u306e\u578b\u5909\u63db\n            ptr = ptr.next\n        \n```\n\n### setup.py\n1\u756a\u3081\u3068\u304a\u306a\u3058\n\n```py3:setup.py\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\n\nsetup(\n    cmdclass = {'build_ext':build_ext},\n    ext_modules = [Extension('cythonlinkedlist', ['cythonlinkedlist.pyx'])]\n)\n```\n\n\n\n### \u305f\u3081\u3059\n```pycon\n$ python setup.py build_ext -i\nrunning build_ext\ncythoning cythonlinkedlist.pyx to cythonlinkedlist.c\nbuilding 'cythonlinkedlist' extension\ngcc -pthread -Wno-unused-result -DDYNAMIC_ANNOTATIONS_ENABLED=1 -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -fPIC -I/usr/include/python3.3m -c cythonlinkedlist.c -o build/temp.linux-x86_64-3.3/cythonlinkedlist.o\nIn file included from cythonlinkedlist.c:343:0:\nlinkedlist.c: In function \u2018main\u2019:\nlinkedlist.c:71:1: warning: control reaches end of non-void function [-Wreturn-type]\n }\n ^\ngcc (\u7565)\u306a\u306b\u304bwarning\u3067\u3066\u308b\u3051\u3069\u901a\u308b\n$ python\nPython 3.3.4 (default, Feb 11 2014, 15:56:08) \n[GCC 4.8.2 20140206 (prerelease)] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import cythonlinkedlist\n>>> ll = cythonlinkedlist.LinkedList()\n>>> ll.add(1)\n>>> ll.add(2)\n>>> ll.add(3)\n>>> ll.add(1)\n>>> ll.add(2)\n>>> ll.add(1)\n>>> ll.count(1)\n3\n>>> ll.count(2)\n2\n>>> ll.count(3)\n1\n>>> [x for x in ll]\n[1, 2, 3, 1, 2, 1]\n>>> \n```\n\n\n<div style=\"text-align:center;font-size:200%\"><b>\u0669( '\u03c9' )\u0648\u3088\u3063\u3057\u3083</b></div>\n\n\n\n# \u307e\u3068\u3081\n\u610f\u5916\u3068\u7656\u304c\u3042\u308a\u307e\u3059\u304cCython\u3044\u3044\u306a\u3068\u304a\u3082\u3044\u307e\u3057\u305f\u3002\n\u3044\u308d\u3044\u308d\u306a\u66f8\u304d\u65b9\u304c\u3067\u304d\u308b\u306e\u304cPythonic\u3058\u3083\u306a\u3044\u6c17\u3082\u3059\u308b\u3051\u308c\u3069\u305d\u3053\u306fZEN\u3092\u8cab\u304f\u65b9\u91dd\u3067\u3002\n\n\u6319\u52d5\u304c\u304a\u304b\u3057\u3044\u3068\u601d\u3063\u305f\u3053\u3068\u306f\u306a\u304b\u3063\u305f\u306e\u3067\u308f\u308a\u3068\u3057\u3063\u304b\u308a\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u306b\u611f\u3058\u307e\u3057\u305f\u3002\n\u3061\u3087\u3063\u3068\u30c7\u30d0\u30c3\u30b0\u304c\u975e\u5e38\u306b\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3068\u304bC\u306e\u77e5\u8b58\u304c\u305d\u3053\u305d\u3053\u3044\u308b\u3053\u3068\u3068\u304b\u3042\u308b\u306e\u3067\u305d\u3053\u304c\u6ce8\u610f\u8981\u308a\u305d\u3046\u3067\u3059\u304cPython C API\u53e9\u304f\u3088\u308a\u65ad\u7136\u697d\u3067\u3059\u3002\n\npyogg\u3042\u305f\u308a\u3068audio\u3042\u305f\u308a\u306ePython\u306e\u30e1\u30f3\u30c6\u304c\u3046\u3054\u3044\u3066\u306a\u304b\u3063\u305f\u308a\u3057\u3066\u308b\u306e\u3067\u52c9\u5f37\u3057\u3064\u3064\u81ea\u5206\u3067wrap\u3057\u3088\u3046\u304b\u306a\u3068\u601d\u3063\u3066\u305f\u308a(\u5e0c\u671b\u7684\u89b3\u6e2c)\n\n\n\n## \u3081\u3082\n`gcc -lglut`\u307f\u305f\u3044\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30e9\u30a4\u30d6\u30e9\u30ea((C\u306f\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u7528\u8a9e\u3042\u3063\u3066\u308b\u81ea\u4fe1\u306a\u3044\u3067\u3059))\u3092\u8aad\u307f\u8fbc\u307e\u305b\u305f\u3044\u3068\u304d\u306fkwargs\u306blist\u3067\u5165\u308c\u3066\u3042\u3052\u308b\u3068\u3044\u3051\u308b\u306e\u3067\u30e1\u30e2\u3067\u3059\u3002\n\n```py3\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Distutils import build_ext\n\nsetup(\n    cmdclass = {'build_ext':build_ext},\n    ext_modules = [Extension('pyopenal', ['pyopenal.pyx'],\n                             libraries=['openal']\n                             )]\n)\n```\n\n## \u3061\u306a\u307f\u306b\n\u3053\u306e\u8a18\u4e8b\u306f\u79c1\u306ehatenaBlog\u306e[\u8a18\u4e8b](http://cocu.hatenablog.com/entry/2014/03/13/032151)\u3092qiita\u306b\u52a0\u7b46\u3057\u8ee2\u8f09\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002(2014/3/16)"}