{"context": "\n\n\u306f\u3058\u3081\u306b\n\u6df1\u5c64\u5b66\u7fd2\u306f\u5b66\u7fd2\u81ea\u4f53\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u306f\u3082\u3061\u308d\u3093\u306e\u3053\u3068\uff0c\u8a13\u7df4\u6e08\u307f\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u8d70\u3089\u305b\u308b\u969b\u306b\u3082\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\uff0e\u3057\u304b\u3057\uff0cSSD\uff08Single Shot MultiBox Detector\uff09\u7b49\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u7269\u4f53\u8a8d\u8b58\u3092\u3055\u305b\u305f\u3044\uff01\u3068\u304b\uff0cDQN(DeepQNetwork)\u7b49\u3067\u5f37\u5316\u5b66\u7fd2\u3057\u305fAI\u3068\u4eba\u3068\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30a2\u30af\u30b7\u30e7\u30f3\u5bfe\u6226\u30b2\u30fc\u30e0\u3092\u3055\u305b\u305f\u3044\u3068\u3044\u3063\u305f\u969b\u306b\u306f\uff0c\u30e2\u30c7\u30eb\u5b9f\u884c\u306e\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u6027\u304c\u304b\u306a\u308a\u91cd\u8981\u306b\u306a\u3063\u3066\u304d\u307e\u3059\uff0e\n\u3044\u3044PC\u8cb7\u3048\uff01\u3068\u3044\u3048\u3070\u305d\u308c\u307e\u3067\u3067\u3059\u304c\u305d\u3093\u306a\u304a\u91d1\u3082\u306a\u3044\u3067\u3059\u3057\uff0c\u30ce\u30fc\u30c8PC\u7b49\u3067\u30dd\u30fc\u30bf\u30d6\u30eb\u306b\u5b9f\u884c\u3057\u305f\u3044\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\uff0e\u305d\u3053\u3067\u4eca\u56de\u306fKeras(TensorFlow)\u3092\u3044\u304b\u306b\u9ad8\u901f\u306b\u5b9f\u884c\u3059\u308b\u304b\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\u5b9f\u884c\u74b0\u5883\n\nPython3.5.2\nKeras 1.2.1\ntensorflow 1.0.0\nMacBookPro(Late 2013)\n\n\n\u9ad8\u901f\u5316\n\u3067\u306f\u3084\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e\u4eca\u56de\u306f\u6975\u529b\u308f\u304b\u308a\u3084\u3059\u304f\u624b\u8efd\u306b\u8a66\u305b\u308b\u4f8b\u3068\u3057\u3066MNIST\u30b5\u30f3\u30d7\u30eb\u306e\u30d3\u30ae\u30ca\u30fc\u3068\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u3092\u8a66\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306fgithub\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\uff0e\n\n\u5927\u524d\u63d0\n\u672c\u5f53\u306b\u8eab\u3082\u84cb\u3082\u306a\u3044\u8a71\u3067\u3059\u304c\uff0c\u826f\u3044\u30b0\u30e9\u30dc\u3092\u7a4d\u3081\u308b\u65b9\uff0cAWS\u306b\u8ab2\u91d1\u3067\u304d\u308b\u65b9\uff0c\u5b9f\u884c\u74b0\u5883\u3068\u3057\u3066\u7279\u306b\u5236\u7d04\u304c\u306a\u3044\u65b9\u306f\uff0c\u4eca\u3059\u3050TitanX\u523a\u3057\u3066\u30e1\u30e2\u30ea\u76db\u308a\u76db\u308aPC\u3092\u8cb7\u3063\u3066\u304f\u3060\u3055\u3044\uff0eTensorFlow\u306eCPU\uff0cGPU\u901f\u5ea6\u6bd4\u8f03\u306f\u69d8\u3005\u306a\u30b5\u30a4\u30c8\u69d8\u304c\u3084\u3089\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u4f8b\u3048\u3070\u3053\u306e\u8a18\u4e8b\uff08CPU/GPU/AWS\u3067\u306eTensorflow\u5b9f\u884c\u901f\u5ea6\u6bd4\u8f03)\u3067\u306f\uff0cCPU\uff0cGPU\u3067\u6570\u5341\u500d\u8fd1\u3044\u5dee\u304c\u51fa\u3066\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u9811\u5f35\u3063\u3066\u9ad8\u901f\u5316\u3057\u3066\u3082\uff0c\u901f\u304f\u306a\u3063\u3066\u5143\u306e2~5\u500d\u7a0b\u5ea6\u3067\u3059\u306e\u3067\uff0c\u3082\u3068\u304b\u3089\u305d\u306e\u624b\u6bb5\u304c\u3068\u308c\u308b\u65b9\u306f\u305d\u3061\u3089\u306e\u307b\u3046\u304c\u7d76\u5bfe\u826f\u3044\u3067\u3059\uff0e\u305d\u3093\u306a\u624b\u6bb5\u304c\u3068\u308c\u306a\u3044\u304b\u3089\u56f0\u3063\u3066\u308b\u3093\u3060\uff01\u3068\u304b\uff0c\u3082\u3046\u3084\u3063\u3066\u308b\u3051\u3069\u3082\u3063\u3068\u901f\u304f\u3057\u305f\u3044\uff01\u3068\u3044\u3046\u65b9\u306f\u7d9a\u304d\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e\n\n\u3000\u30b9\u30bf\u30fc\u30c8\n\u307e\u305a\u30d3\u30ae\u30ca\u30fc\u7248MNIST\u30b5\u30f3\u30d7\u30eb\u3067\u78ba\u304b\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0eKeras\u3067\u4f55\u3082\u8003\u3048\u305a\u306b\u5b9f\u88c5\u3059\u308b\u3068\uff0c\n# \u30e2\u30c7\u30eb\u4f5c\u6210\nmodel = Sequential()\nmodel.add(InputLayer(input_shape=input_shape, name='input'))\nmodel.add(Dense(nb_classes))\nmodel.add(Activation('softmax', name='softmax'))\n\noptimizer = SGD(lr=0.5)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=optimizer,\n              metrics=['accuracy'])\n...\n# \u30e2\u30c7\u30eb\u8a13\u7df4\nmodel.fit(X_train, Y_train, batch_size=batch_size, nb_epoch=nb_epoch,\n          verbose=1, validation_data=(X_test, Y_test))\n...\n# \u30e2\u30c7\u30eb\u8a55\u4fa1\nscore = model.evaluate(X_test, Y_test, verbose=0)\n...\n# \u30e2\u30c7\u30eb\u5b9f\u884c\nmodel.predict(np.array([x])\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u5f62\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\u306a\u304aevaluate\u7b49\u3067\u4e00\u6c17\u306b\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u65b9\u6cd5\u306f\uff0c\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u5b9f\u884c\u6642\u306e\u3088\u3046\u306b\u9010\u6b21\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u304f\u308b\u72b6\u6cc1\u3068\u7570\u306a\u308b\u306e\u3067\uff0c\u4eca\u56de\u306f\n# X_test \u306f10000\u500b\u306e\uff11\u30c1\u30e3\u30f3\u30cd\u30eb784\u6b21\u5143\u30c7\u30fc\u30bf\nstart = time.perf_counter()\nn_loop = 5\nfor n in range(n_loop):\n    predictions = [model.predict(np.array([x])) for x in X_test]\nprint('elapsed time for {} prediction {} [msec]'.format(len(X_test), (time.perf_counter()-start) * 1000 / n_loop))\n\n\u306e\u3088\u3046\u306bprediction\u309210000\u56de\u56de\u3057\uff0c\u305d\u308c\u30925\u9031\u3055\u305b\u3066\u5e73\u5747\u7d4c\u904e\u6642\u9593\u3092\u3068\u308b\u3053\u3068\u3067\uff0c\u30e2\u30c7\u30eb\u5b9f\u884c\u901f\u5ea6\u3092\u8a08\u6e2c\u3057\u307e\u3059\uff08\u30df\u30ea\u79d2\u7cbe\u5ea6\u306e\u8a08\u6e2c\u3092\u884c\u3046\u70batime.time()\u3067\u306f\u306a\u304ftime.pref_counter()\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\uff09\uff0e\n\u3061\u306a\u307f\u306b\u4e0a\u8a18\u306e\u7d50\u679c\u306f\nelapsed time for 10000 prediction 3768.8394089927897 [msec]\n\n\u3067\u3057\u305f\uff0e\n\n1. K.function\u3092\u4f7f\u3063\u3066\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u304b\u3089\u5b9f\u884c\nfrom keras import backend as K\npred = K.function([model.input], [model.output])\nfor n in range(n_loop):\n    predictions = [pred([np.array([x])]) for x in X_test]\n\nKeras\u306ffrom keras import backend as K\u306e\u3088\u3046\u306b\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0cK.function\u3092\u7528\u3044\u308b\u3053\u3068\u3067\uff0cKeras\u95a2\u6570\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff0e\u3053\u3061\u3089\u304b\u3089\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\uff0cKeras\u3092\u305d\u306e\u307e\u307e\u305f\u305f\u304f\u3088\u308a\u3082\u82e5\u5e72\u5b9f\u884c\u901f\u5ea6\u3092\u4e0a\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u4eca\u56de\u306e\u5834\u5408\u3067\u306f\nelapsed time for 10000 prediction 3210.0291186012328 [msec]\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n2. TensorFlow\u3067\u5b9f\u88c5\n\u305d\u3082\u305d\u3082Keras\u3068TensorFlow\u3067\u306f\u540c\u3058\u30e2\u30c7\u30eb\u3092\u7d44\u3093\u3060\u3068\u3057\u3066\u3082\u5b9f\u884c\u901f\u5ea6\uff0c\u5b66\u7fd2\u901f\u5ea6\u3068\u3082\u306b\u3060\u3044\u3076\u5dee\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n# \u30e2\u30c7\u30eb\u4f5c\u6210\nx = tf.placeholder(tf.float32, [None, imageDim], name=\"input\")\nW = tf.Variable(tf.zeros([imageDim, outputDim]), dtype=tf.float32, name=\"Weight\")\nb = tf.Variable(tf.zeros([outputDim]), dtype=tf.float32, name=\"bias\")\ny = tf.nn.softmax(tf.matmul(x, W)+b, name=\"softmax\")\n\n# \u76ee\u7684\u95a2\u6570\u8a2d\u5b9a\ncross_entropy = tf.reduce_mean(\n   \u3000-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1])\n)\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u8a2d\u5b9a\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\n# \u30e2\u30c7\u30eb\u8a13\u7df4\nsess.run(tf.global_variables_initializer())\nfor i in range(1000):\n       batch_xs, batch_ys = tfmnist.train.next_batch(100)\n       sess.run(train_step,feed_dict={x: batch_xs, y_: batch_ys})\n\n# \u30e2\u30c7\u30eb\u8a55\u4fa1\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nresult = sess.run(\n            accuracy,\n            feed_dict={x: tfmnist.test.images, y_:tfmnist.test.labels}\n        )\n\n# \u30e2\u30c7\u30eb\u5b9f\u884c\nsess.run(y, feed_dict={x: np.array([test_x])})\n\nKeras\u306b\u6bd4\u3079\u7d30\u304b\u3044\u8a2d\u5b9a\u304c\u3067\u304d\u308b\u306e\u306fTensorFlow\u306e\u5229\u70b9\u3067\u3059\u304c\uff0c\u305d\u308c\u3067\u3082\u30e2\u30c7\u30eb\u3092\u66f8\u304f\u90e8\u5206\u306f\u3069\u3046\u3057\u3066\u3082\u7169\u96d1\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u305f\u3060\uff0cTensorFlow\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\nelapsed time for 10000 prediction 2662.211540598946 [msec]\n\n\u3068\u306a\u308a\uff0cKeras\u5b9f\u88c5\u3068\u6bd4\u3079\u3066\u3060\u3044\u3076\u901f\u5ea6\u304c\u5411\u4e0a\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n3. Keras\u30e2\u30c7\u30eb\u3092TensorFlow\u304b\u3089\u53e9\u3044\u3066\u5b9f\u884c\nKeras\u30e6\u30fc\u30b6\u306f\u6d99\u3092\u98f2\u3093\u3067TensorFlow\u306b\u79fb\u884c\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u304b\u3068\u3044\u3046\u3068\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\uff0c\n\u30e2\u30c7\u30eb\u4f5c\u6210\u306e\u307f\u3092Keras\u3067\u884c\u3044\uff0c\u6b8b\u308a\u306e\u90e8\u5206\uff08training\u3084prediction\u7b49\uff09\u306fTensorFlow\u304b\u3089\u5b9f\u884c\u3059\u308b\u3068\u3044\u3046\u65b9\u6cd5\u3067\u5b9f\u884c\u901f\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\nimport keras.backend.tensorflow_backend as KTF\nimport tensorflow as tf\n\nold_session = KTF.get_session()\nsess = tf.Session()\nKTF.set_session(sess)\n\n# \u30e2\u30c7\u30eb\u4f5c\u6210\nmodel = Sequential()\nmodel.add(InputLayer(input_shape=input_shape, name='input'))\nmodel.add(Dense(nb_classes))\nmodel.add(Activation('softmax', name='softmax'))\n\nx = tf.placeholder(tf.float32, [None, imageDim], name=\"input\")\ny = model(x)\ny_ = tf.placeholder(tf.float32, [None, nb_classes])\n\n# \u76ee\u7684\u95a2\u6570\uff0c\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u4f5c\u6210\uff0c\u8a13\u7df4\u8a55\u4fa1\u5b9f\u884c\u306f\u4e0a\u8a18\u3068\u540c\u69d8\u306e\u70ba\u7701\u7565\n\nKTF.set_session(old_session)\n\n\u5165\u529bplaceholderx\u3092\u4f5c\u6210\u3057\uff0c\u305d\u308c\u3092\u30e2\u30c7\u30eb\u306b\u4ee3\u5165\u3059\u308b\u3053\u3068\u3067\uff0c\u51fa\u529by\u3092\u5f97\u307e\u3059\uff0e\u3042\u3068\u306fTensorFlow\u306e\u5b9f\u88c5\u65b9\u6cd5\u306b\u5f93\u3063\u3066\uff0c\u76ee\u7684\u95a2\u6570\u3084\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u8a2d\u5b9a\u3057\uff0c\u8a13\u7df4\u3092\u56de\u3057\u307e\u3059\uff0e\n\u3053\u306e\u65b9\u6cd5\u3060\u3068\uff0c\u5b9f\u884c\u7d50\u679c\u306f\nelapsed time for 10000 prediction 2685.7926497992594 [msec]\n\n\u306e\u3088\u3046\u306b\u306a\u308a\uff0c\u30e2\u30c7\u30eb\u90e8\u5206\u306fKeras\u5b9f\u88c5\u3067\u3042\u3063\u3066\u3082\uff0c\u5b9f\u884c\u901f\u5ea6\u306f\u304b\u306a\u308aTensorFlow\u5b9f\u88c5\u306b\u8fd1\u3044\u3082\u306e\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n4. Keras\uff0cTensorFlow\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3092C++\u304b\u3089\u5b9f\u884c\nPython\u304b\u3089\u53e9\u3044\u3066\u7c21\u5358\u306b\u5b9f\u884c\u901f\u5ea6\u3092\u3042\u3052\u3089\u308c\u308b\u91cf\u306f\u305b\u3044\u305c\u3044\u4e0a\u8a18\u306e\u7a0b\u5ea6\u3067(PyPy\u7b49\u4f7f\u3048\u3070\u3082\u3063\u3068\u901f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093)\uff0c\u3053\u308c\u4ee5\u4e0a\u901f\u304f\u3057\u3088\u3046\u3068\u601d\u3046\u3068C++\u304b\u3089\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0eTensorFlow\u306b\u306f\uff0c\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5229\u7528\u3059\u308b\u305f\u3081\u306eAPI\u3067\u3042\u308b\uff0cTensorFlow Serving\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\uff0e\u3053\u306eAPI\u306b\u3088\u308a\uff0cC++\u5074\u3067TensorFlow\u306e\u30e2\u30c7\u30eb\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3067\uff0c\u9ad8\u901f\u306b\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\nLinux\u30e6\u30fc\u30b6\u3067\u3042\u308c\u3070\uff0c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u5f93\u3063\u3066\u3044\u3051\u3070\u554f\u984c\u306a\u304f\u52d5\u304b\u305b\u308b\u306e\u3067\u3059\u304c\uff0cOSX\u3067\u306f\u307e\u3060\u52d5\u304b\u3059\u306e\u304c\u5927\u5909\u3067\uff08\u79c1\u3082\u74b0\u5883\u69cb\u7bc9\u306b\u5931\u6557\u3057\u3066\u3044\u308b\u306e\u3067\u4eca\u56de\u306f\u8a73\u7d30\u306f\u66f8\u3051\u307e\u305b\u3093\u3067\u3057\u305f...\uff09\uff0cgithub\u306b\u3082OSX\u5411\u3051\u306eIssue\u304c\u6570\u591a\u304f\u7acb\u3063\u3066\u3044\u308b\u72b6\u6cc1\u3067\u3059\uff0e\u306a\u306e\u3067\u4eca\u56de\u306fServing\u306f\u5229\u7528\u305b\u305a\u306b\uff0c\u76f4\u63a5TensorFlow c++\u3092\u53e9\u304d\u307e\u3059\uff0eServing\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3082\uff0cKeras\u306e\u30e2\u30c7\u30eb\u3092C++\u304b\u3089\u53e9\u304d\u305f\u3044\u5834\u5408\u7b49\u306b\u306f\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n4.1. \u4e0b\u6e96\u5099\nTensorFlow\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u305f\u3081\uff0cpyenv\u4ee5\u4e0b\u7b49\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308btensorflow\u30d5\u30a9\u30eb\u30c0\u306b\u5bfe\u3057\uff0c\u64cd\u4f5c\u3057\u3084\u3059\u3044\u5834\u6240\u304b\u3089\u30ea\u30f3\u30af\u3092\u8cbc\u3063\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff0epip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6c5a\u3057\u305f\u304f\u306a\u3044\u65b9\u306f\uff0cgithub\u304b\u3089\u5bfe\u5fdc\u30d0\u30fc\u30b8\u30e7\u30f3\u3092clone\u3057\u3066\u304d\u307e\u3059\uff0e\n\u4f7f\u7528\u3059\u308btensorflow\u306e\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089./configure\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\u4f7f\u7528\u3059\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6307\u5b9a\u3084\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u7b49\u3092\u805e\u304b\u308c\u307e\u3059\u304c\u57fa\u672c\u7684\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u6307\u5b9a\u304byes\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\uff0e\u305f\u3060\uff0cGPU\u3092\u7a4d\u307e\u308c\u3066\u3044\u306a\u3044\u65b9\u306f\uff0cOpenCL\u3084CUDA\u3092\u6709\u52b9\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u8cea\u554f\u306b\u306fN\u3092\u56de\u7b54\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\uff0e\nTensorFlow\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u306f\uff0cGoogle\u304c\u3082\u3068\u3082\u3068\u793e\u5185\u3067\u4f7f\u7528\u3057\u3066\u3044\u305f\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3057\u305fBazel\u304c\u5fc5\u8981\u3067\u3059\uff0e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u3053\u3053\u3092\u53c2\u8003\u306b\u3057\u3064\u3064\u9032\u3081\u307e\u3059\uff0e\nOSX\u3067\u3042\u308c\u3070brew install bazel & brew upgrade bazel\u3067\u4e00\u767a\u3067\u5165\u308c\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e\n\n4.2. graph\u306e\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\nC++\u304b\u3089\u8aad\u307f\u8fbc\u3081\u308b\u5f62\u3067\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u3092\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3057\u307e\u3059\uff0e\nsess = tf.Session()\n\n#Keras\u306e\u5834\u5408\nimport keras.backend.tensorflow_backend as KTF\nKTF.set_session(sess)\n\n...\nsaver = tf.train.Saver()\nsaver.save(sess, \"models/\"\u3000+ \"model.ckpt\")\ntf.train.write_graph(sess.graph.as_graph_def(), \"models/\", \"graph.pb\")\n\n\n4.3. \u30e2\u30c7\u30eb\u306efreeze\u5316\n\u5b66\u7fd2\u3055\u305b\u308b\u5fc5\u8981\u306e\u306a\u3044\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066\u306f\uff0c\u91cd\u307f\u3092\u56fa\u5b9a\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\uff0c\n\nWhat this does is load the GraphDef, pull in the values for all the variables from the latest checkpoint file, and then replace each Variable op with a Const that has the numerical data for the weights stored in its attributes It then strips away all the extraneous nodes that aren't used for forward inference, and saves out the resulting GraphDef into an output file.\n\n\u3068\u3042\u308a\uff0c\u3069\u3046\u3084\u3089\u30d1\u30e9\u30e1\u30fc\u30bf\u5909\u6570\u3092Const\u306b\u3057\uff0c\u5b9f\u884c\u306b\u4e0d\u8981\u306anode\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\uff0c\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3092\u524a\u6e1b\u3067\u304d\u308b\u3088\u3046\u3067\u3059(\u30d1\u30e9\u30e1\u30fc\u30bf\u5909\u6570\u3092Const\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u82e5\u5e72\u30a2\u30af\u30bb\u30b9\u901f\u5ea6\u3082\u6539\u5584\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f)\uff0e\nfreeze\u3059\u308b\u306b\u306ffreeze_graph.py\u3092\u7528\u3044\u307e\u3059\uff0etensorflow\u306eroot\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u884c\u304d\uff0c\nbazel build tensorflow/python/tools:freeze_graph && \\\nbazel-bin/tensorflow/python/tools/freeze_graph \\\n--input_graph=/path/to/graph.pb \\\n--input_checkpoint=/path/to/model.ckpt \\\n--output_graph=/path/to/output/frozen_graph.pb --output_node_names=softmax\n\n\u3068\u53e9\u304f\u3053\u3068\u3067output_graph\u3067\u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306b\u56fa\u5b9a\u5316\u3055\u308c\u305fgraph\u304c\u751f\u6210\u3055\u308c\u307e\u3059\uff08\u521d\u56de\u306f\u8af8\u3005\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u8d70\u308b\u306e\u3067\u304b\u306a\u308a\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\uff09\uff0e\n\u306a\u304a\uff0coutput_node_names\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u6012\u3089\u308c\u307e\u3059\u304c\uff0c\u3053\u308c\u306fTensorFlow\u3067\u306f\uff0e\ny = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2)+b_fc2, name=\"softmax\")\n\n\u306e\u3088\u3046\u306b\u540d\u524d\u3092\u3064\u3051\u308b\u3053\u3068\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\uff0e\u305f\u3060\u3057Keras\u3067\u306f\uff0c\nmodel.add(Activation('softmax', name='softmax'))\n\n\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u3082\uff0c\u5185\u90e8\u3067\u5225\u540d\u3092\u6301\u3063\u3066\u3057\u307e\u3046\u306e\u3067\uff0c\u30a8\u30e9\u30fc\u304c\u306f\u304b\u308c\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n\u3053\u306e\u5834\u5408\n[print(n.name) for n in sess.graph.as_graph_def().node]\n\n\u306e\u3088\u3046\u306bnode\u306e\u540d\u524d\u3092\u76f4\u63a5print\u3057\u3066\uff0c\u5185\u90e8\u3067\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u540d\u524d\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff08\u624b\u5143\u306e\u74b0\u5883\u3067\u306fSoftmax\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\uff09\uff0e\n\n4.4. C++\u304b\u3089\u5b9f\u884c\n\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u5b9f\u884c\u3059\u308bcpp\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\uff0e\u8a73\u3057\u304f\u306fgithub\u306e\u65b9\u3092\u3054\u89a7\u3044\u305f\u3060\u304f\u3068\u3057\u3066\uff0c\u4e3b\u8981\u90e8\u5206\u3092\u629c\u7c8b\u3057\u3066\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u307e\u305a\uff0ctensorflow_ROOT/tensorflow\u306e\u4e0b\u306b\u4eca\u56de\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210(\u4eca\u56de\u306floadgraph)\u3057\uff0c\u305d\u306e\u306a\u304b\u306bcc\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059(tensorflow_ROOT/tensorlow/loadgraph/mnist_tf.cc)\uff0e\n  GraphDef graph_def;\n  status = ReadBinaryProto(Env::Default(), graph_file_name, &graph_def);\n  if (!status.ok()) {\n    cout << status.ToString() << \"\\n\";\n    return 1;\n  }\n  cout << \"loaded graph\" << \"\\n\";\n  // Add the graph to the session\n  status = session->Create(graph_def);\n  if (!status.ok()) {\n    cout << status.ToString() << \"\\n\";\n    return 1;\n  }\n\n\u307e\u305a\uff0cgraph\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\uff0csession\u3092\u8d77\u52d5\u3057\u307e\u3059\uff0e\n  Tensor x(DT_FLOAT, TensorShape({nTests, imageDim}));\n\n  MNIST mnist = MNIST(\"./MNIST_data/\");\n  auto dst = x.flat<float>().data();\n  for (int i = 0; i < nTests; i++) {\n    auto img = mnist.testData.at(i).pixelData;\n    std::copy_n(img.begin(), imageDim, dst);\n    dst += imageDim;\n  }\n\n  const char* input_name = \"input\";\n  vector<pair<string, Tensor>> inputs = {\n    {input_name, x}\n  };\n\n\n\u6b21\u306b\uff0c\u5165\u529b\u30c6\u30f3\u30bd\u30ebx\u3092\u4f5c\u6210\u3057\uff0cMNIST\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6d41\u3057\u8fbc\u3093\u3067\u3044\u304d\u307e\u3059\uff0emnist.testData\u306b\u306f\uff0c10000\u4ef6\u306e768\u6b21\u5143float\u30d9\u30af\u30c8\u30eb\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u308c\u3092\u9806\u6b21x\u306b\u767b\u9332\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u305d\u3057\u3066\uff0cpython\u5074\u3067\u4f5c\u6210\u3057\u305f\u540d\u524d\u3068\uff0c\u30c6\u30f3\u30bd\u30eb\u306e\u30da\u30a2\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\u3053\u306e\u540d\u524d\u306f\uff0c\n# TensorFlow\nx = tf.placeholder(tf.float32, [None, imageDim], name=\"input\")\n\n# Keras\nInputLayer(input_shape=input_shape, name='input')\n\n\u306e\u3088\u3046\u306b\u3064\u3051\u305fpython\u5074\u3067\u3064\u3051\u305f\u540d\u524d\u3068\u5bfe\u5fdc\u3092\u53d6\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u51fa\u529b\u5074\u3082\u540c\u69d8\u306bTensor\u306evector\u3092\u4f5c\u6210\u3057\uff0c\u51fa\u529b\u540d\uff08\u4eca\u56de\u306e\u5834\u5408\u306fsoftmax\uff09\u3068\u51fa\u529b\u30c6\u30f3\u30bd\u30eb\uff0c\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fInput vector\u3092session\u306b\u767b\u9332\u3057\u3066\u8d70\u3089\u305b\u307e\u3059\uff0e\n  vector<Tensor> outputs;\n  // Run the session, evaluating our \"softmax\" operation from the graph\n  status = session->Run(inputs, {output_name}, {}, &outputs);\n  if (!status.ok()) {\n    cout << status.ToString() << \"\\n\";\n    return 1;\n  }else{\n    cout << \"Success run graph !! \" << \"\\n\";\n  }\n\n\u30e2\u30c7\u30eb\u306e\u5b9f\u884c\u304c\u6210\u529f\u3059\u308c\u3070\uff0coutputs\u306b\u306f\u51fa\u529b\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\uff0c\n  int nHits = 0;\n  for (vector<Tensor>::iterator it = outputs.begin() ; it != outputs.end(); ++it) { // \u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u3044\u308b\u304c\u4eca\u56de\u306foutputs\u306f\u4e00\u3064\u306a\u306e\u3067 item = outputs.front()\u3068\u540c\u7fa9\n    auto items = it->shaped<float, 2>({nTests, 10}); // 10\u500b\u306e\u6570\u5b57\u306e\u5206\u985e\u7d50\u679c10\u6b21\u5143 x \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf10000\u500b\n    for(int i = 0 ; i < nTests ; i++){\n         int arg_max = 0;\n             float val_max = items(i, 0);\n             for (int j = 0; j < 10; j++) {\n            if (items(i, j) > val_max) {\n                arg_max = j;\n                val_max = items(i, j);\n                }\n         } //\u300010\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306e\u5185\u6700\u5927\u5024\u306eindex\u3092\u7b97\u51fa\n         if (arg_max == mnist.testData.at(i).label) {\n             nHits++;\n             } \n    }\n  }\n  float accuracy = (float)nHits/nTests;\n\n\u306e\u3088\u3046\u306b\u6559\u5e2b\u30c7\u30fc\u30bf\u3068\u5b9f\u884c\u7d50\u679c\u3092\u6bd4\u8f03\u3057\u3066accuracy\u3092\u7b97\u51fa\u3057\u307e\u3059\uff0e\n\u6700\u5f8c\u306b\uff0ccpp\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u968e\u5c64\u306bBUILD\u30d5\u30a1\u30a4\u30eb\uff08\u4f9d\u5b58\u95a2\u4fc2\u7b49\u3092\u8a18\u8f09\u3059\u308b\u30d5\u30a1\u30a4\u30eb\uff0emake\u30d5\u30a1\u30a4\u30eb\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\uff09\u3092\u4f5c\u6210\u3057\uff0c\ncc_binary(\n    name = \"mnistpredict_tf\",\n    srcs = [\"mnist_tf.cc\", \"MNIST.h\"],\n    deps = [\n        \"//tensorflow/core:tensorflow\",\n    ],\n)\n\ncc_binary(\n    name = \"mnistpredict_keras\",\n    srcs = [\"mnist_keras.cc\", \"MNIST.h\"],\n    deps = [\n        \"//tensorflow/core:tensorflow\",\n    ],\n)\n\n\u30d3\u30eb\u30c9\u3092\u304b\u3051\u307e\u3059\uff0e\nbazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-msse4.2 --copt=-msse4.1 --copt=-msse3 --copt=-mfma :mnistpredict_tf\nbazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-msse4.2 --copt=-msse4.1 --copt=-msse3 --copt=-mfma :mnistpredict_keras\n\n\n\u3044\u308d\u3044\u308d\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066\u3044\u307e\u3059\u304c\uff0c\u5fc5\u9808\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\uff0c\nThe TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\nThe TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n...\n\n\u7b49\u3044\u308d\u3044\u308d\u6012\u3089\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u306e\u3067\u4eca\u56de\u306f\u3064\u3051\u3066\u3044\u307e\u3059\uff0e\n\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u6210\u529f\u3059\u308b\u3068\uff0ctensorflow_ROOT/bazel-bin/tensorflow/loadgraph\u306e\u4e2d\u306bBUILD\u3067\u540d\u524d\u3092\u6307\u5b9a\u3057\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u3044\u308b\u306e\u3067\uff0c\ncd tensorflow_ROOT/bazel-bin/tensorflow/loadgraph\n./mnistpredict_tf\n\n\u305d\u306e\u968e\u5c64\u307e\u3067\u884c\u304d\uff0cMNIST_TEST\u30d5\u30a9\u30eb\u30c0\u3068\u56fa\u5b9a\u5316\u3057\u305fgraph\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066\u304d\u3066\u5b9f\u884c\u3057\u307e\u3059\uff08MNIST_TEST\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u8eab\u306f\u5c55\u958b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09\uff0e\n\n\u7d50\u679c\u6bd4\u8f03\n\u305d\u308c\u3067\u306f\uff0c\u3053\u308c\u307e\u3067\u7d39\u4ecb\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u306e\u7d50\u679c\u3092\u5168\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3059\uff0e\u201d768\u6b21\u5143\uff0828x28\uff09\u306e\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u304c\uff11\u679a\u5165\u529b\u3055\u308c\u305f\u969b\u306b\uff0c\u305d\u308c\u304c\u3069\u306e\u6570\u5b57\u304b\u306e\u5224\u5225\u7d50\u679c\u3092\u8fd4\u3059\u201d\u3068\u3044\u3046\u4e88\u6e2c\u5de5\u7a0b\u30921000\u56de\u7e70\u308a\u8fd4\u3057\u305f\u969b\u306b\u304b\u304b\u308b\u6642\u9593(msec)\u3067\u3059\uff08\u305d\u308c\u305e\u308c5\u56de\u56de\u3057\u3066\u5e73\u5747\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\uff09\uff0e\n\n\n\nmsec\nKeras\nKeras(K.function)\nKeras(tf)\nTensorFlow\n\n\n\n\nPython\n3787\n3242\n2711\n2588\n\n\nC++\n578\n-\n577\n576\n\n\n\n\u305d\u3082\u305d\u3082Python\u3068C++\u3067\u306f\u30eb\u30fc\u30d7\u51e6\u7406\u6027\u80fd\u304c\u5727\u5012\u7684\u306b\u9055\u3046\u306e\u3067\u4ed5\u65b9\u306a\u3044\u3067\u3059\u304c\uff0c\u5358\u7d14\u306a\u6bd4\u8f03\u3067\u306f\u3084\u306f\u308aC++\u306e\u5727\u52dd\u3067\u3059\uff0ePython\u5b9f\u88c5\u306e\u4e2d\u3067\u306f\u7d20\u306eTensorFlow\u304c\u4e00\u756a\u901f\u304f\uff0c\u6b21\u70b9\u3067\u30e2\u30c7\u30ebKeras-\u5b9f\u884ctf\u30bf\u30a4\u30d7\u304c\u901f\u3044\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\u7d20\u306eKeras\u306f\u305d\u308c\u3089\u3068\u6bd4\u8f03\u3059\u308b\u3068\u304b\u306a\u308a\u9045\u3044\u3067\u3059\u304c\uff0cK.function\u304b\u3089\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u82e5\u5e72\u306e\u901f\u5ea6\u6539\u5584\u304c\u307f\u3089\u308c\u307e\u3059\uff0e\n\nMNIST\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u7de8\u3092\u305f\u3081\u3059\nConvolution\u5c64\u3092\u4f7f\u7528\u3059\u308b\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u7de8\u3067\u3082\u901f\u5ea6\u6bd4\u8f03\u3092\u3057\u3066\u307f\u307e\u3059\uff0e\u30e2\u30c7\u30eb\u306f\u4ee5\u4e0b\u3092\u7528\u3044\u307e\u3059\uff0e\n\n\u307b\u307c\u30d3\u30ae\u30ca\u30fc\u7de8\u3068\u540c\u3058\u306a\u306e\u3067\u5927\u307e\u304b\u306b\u306f\u7701\u7565\u3057\u307e\u3059\u304c\uff0c\u6c17\u3092\u3064\u3051\u308b\u70b9\u304c\uff11\u70b9\u3042\u308a\u307e\u3059\uff0e\n\n\u6ce8\u610f\u70b9\uff1aDropout\u5c64\u304c\u3042\u308b\u5834\u5408\u306elearning_phase\u306e\u6271\u3044\nKeras\u5358\u4f53\u3067\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u554f\u984c\u306a\u3044\u306e\u3067\u3059\u304c\uff0cK.function\u3092\u4f7f\u3063\u305f\u308a\uff0cKeras\u3068TensorFlow\u3092\u4f75\u7528\u3059\u308b\u5834\u5408\u306b\u6c17\u3092\u3064\u3051\u308b\u70b9\u3068\u3057\u3066learning_phase\u306e\u6271\u3044\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff0e\u3000Dropout\u5c64\u304c\u3042\u308b\u5834\u5408\u7b49\uff0c\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u30c6\u30b9\u30c8/\u5b9f\u884c\u3067\u4f7f\u7528\u30e2\u30c7\u30eb\u304c\u7570\u306a\u308b\u969b\uff0clearning_phase\u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0elearning_phase\u30d5\u30e9\u30b0\u306f\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u66421\uff0c\u5b9f\u884c\u66420\u3092\u6307\u5b9a\u3057\u307e\u3059\uff0e\n\npython\u5074\ninput\u306bK.learning_phase()\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\uff0c\u5b9f\u884c\u6642\u306b\u306f0\u3092\u5165\u529b\u3057\u307e\u3059\uff0e\n# K.function\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\npred = K.function([model.input, K.learning_phase()], [model.output])\n[pred([np.array([x]), 0]) for x in X_test]\n\n# TensorFlow\u304b\u3089Keras\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3059\u308b\u5834\u5408\n[sess.run(y, feed_dict={x: np.array([test_x]), K.learning_phase(): 0}) for test_x in X_test]\n\n\nc++\u5074\nBool\u578b\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\u3057\u30660\u3092\u4ee3\u5165\u3057\uff0ckeras_learning_phase\u3068\u3044\u3046\u540d\u524d\u3067input\u306b\u767b\u9332\u3057\u3066\u3044\u307e\u3059\uff0e\ncpp\nTensor lp(DT_BOOL, TensorShape({}));\nlp.flat<bool>().setZero();\n...\nvector<pair<string, Tensor>> inputs = {\n    {input_name, x}, {\"keras_learning_phase\", lp}\n};\n\n\n\u7d50\u679c\u6bd4\u8f03\n\u30d3\u30ae\u30ca\u30fc\u7de8\u3068\u540c\u69d8\u306b\u7d50\u679c\u6bd4\u8f03\u3092\u884c\u3044\u307e\u3059\uff0e\n\n\n\nmsec\nKeras\nKeras(K.function)\nKeras(tf)\nTensorFlow\n\n\n\n\nPython\n9693\n9087\n8571\n8124\n\n\nC++\n5528\n-\n5530\n5512\n\n\n\n\u6b63\u76f4Python\u3068C++\u3067\u3082\u3063\u3068\u6027\u80fd\u5dee\u304c\u51fa\u308b\u304b\u306a\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\uff0c\u3042\u307e\u308a\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\uff0ePython\u5074\u3092\u6bd4\u8f03\u3059\u308b\u3068\u30d3\u30ae\u30ca\u30fc\u7de8\u3068\u307b\u307c\u540c\u3058\u5e8f\u5217\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u304a\u307e\u3051. OpenBLAS\uff0cMKL\u3092\u4f7f\u3063\u3066\u884c\u5217\u30d9\u30af\u30c8\u30eb\u8a08\u7b97\u9ad8\u901f\u5316\n\u4eca\u56de\u306e\u30c6\u30fc\u30de\u3068\u306f\u76f4\u63a5\u306f\u95a2\u4fc2\u306a\u3044\u306e\u3067\u304a\u307e\u3051\u306b\u3057\u307e\u3057\u305f\u304c\uff0c\u884c\u5217\u3084\u30d9\u30af\u30c8\u30eb\u306b\u95a2\u3059\u308b\u57fa\u672c\u7684\u306a\u6f14\u7b97\u306e\u4ed5\u69d8\u3092\u5b9a\u3081\u305fBLAS (Basic Linear Algebra Subprograms) \u306e\u9078\u3073\u65b9\u306b\u3088\u3063\u3066\u8a08\u7b97\u30b9\u30d4\u30fc\u30c9\u304c\u4e0a\u304c\u308a\u307e\u3059\uff0e\n\n\nReference BLAS: \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u5b9f\u88c5\uff0e\u9045\u3044\uff0e\u591a\u304f\u306e\u5834\u5408\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u306f\u304a\u305d\u3089\u304f\u3053\u308c\uff0e\n\nOpenBLAS: \u9ad8\u901f\u306a\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5b9f\u88c5\uff0e\n\nATLAS: \u81ea\u52d5\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306a\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5b9f\u88c5\uff0e\n\nIntel MKL: Intel\u306b\u3088\u308b\u7206\u901f\u5b9f\u88c5\uff0e\u6700\u8fd1\u7121\u6599\u306b\u306a\u3063\u305f\uff0e\n\nOpenBLAS\u306e\u5229\u7528\u6cd5\u306f\u4ee5\u524d\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u306e\u3067\u3088\u308d\u3057\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\uff0e\nIntelMKL\u306b\u3064\u3044\u3066\u306f,\nLinux\u7de8\uff1amkl numpy\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\nOSX\u7de8\uff1amac\u3067mkl&numpy\u3092\u69cb\u7bc9\u3057\u305f\n\u7b49\uff0c\u975e\u5e38\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u89e3\u8aac\u8a18\u4e8b\u3092\u3042\u3052\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u3061\u3089\u3092\u3054\u89a7\u3044\u305f\u3060\u3051\u308c\u3070\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\u3061\u306a\u307f\u306banaconda\u304b\u3089python\u3092\u5165\u308c\u308b\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u3067MKL\u30b3\u30f3\u30d1\u30a4\u30eb\u306enumpy\uff0cscipy\u304c\u5165\u308a\u307e\u3059\uff08\u3053\u306e\u65b9\u6cd5\u304c\u5727\u5012\u7684\u306b\u697d\u3067\u3059\uff09\uff0e\u304c\uff0c\nmac\u3067mkl&numpy\u3092\u69cb\u7bc9\u3057\u305f\u69d8\u306e\u8a18\u4e8b\u306b\u3088\u308b\u3068\uff0canaconda\u7d4c\u7531\u3088\u308a\u3082\uff0cMKL\u304b\u3089\u5165\u308c\u305f\u65b9\u304c\u6027\u80fd\u304c\u9ad8\u3044\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308b\u305d\u3046\u306a\u306e\u3067\u4e00\u6982\u306b\u3069\u3061\u3089\u304c\u826f\u3044\u304b\u306f\u8a00\u3048\u307e\u305b\u3093\uff0e\n\u3069\u308c\u304f\u3089\u3044\u8a08\u7b97\u30b9\u30da\u30c3\u30af\u304c\u4e0a\u304c\u308b\u304b\u3068\u3044\u3046\u8a71\u306b\u3064\u3044\u3066\u306f\uff0c\u4e0a\u8a18\u306b\u6319\u3052\u305f\u8a18\u4e8b\u3084\uff0c\nPython\u306e\u7279\u7570\u5024\u5206\u89e3SVD\u306e\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f\n\u306e\u3088\u3046\u306b\u6bd4\u8f03\u3055\u308c\u3066\u3044\u308b\u8a18\u4e8b\u304c\u3042\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u3054\u89a7\u3044\u305f\u3060\u304f\u3068\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\uff0c\uff12\u5272\u304b\u3089\u6570\u500d\u901f\u304f\u306a\u308b\u3088\u3046\u3067\u3059\uff08\u624b\u5143\u306e\u74b0\u5883\u3067\u306f3\u5272\u5897\u3057\u306b\u306a\u308a\u307e\u3057\u305f\uff09\uff0e\n\n\u304a\u308f\u308a\u306b\n\u5c11\u3057\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\uff0cKeras\uff0cTensorFlow\uff0c\u305d\u308c\u3089\u306ec++\u5b9f\u884c\u3067\u3069\u306e\u7a0b\u5ea6\u5b9f\u884c\u901f\u5ea6\u304c\u5909\u308f\u3063\u3066\u304f\u308b\u306e\u304b\u3092\u307f\u3066\u307f\u307e\u3057\u305f\uff0e\n\u7d50\u679c\u3068\u3057\u3066\uff0cPython\u5074\u3060\u3051\u3067\u3084\u308b\u306a\u3089TensorFlow\u304c\u4e00\u756a\u901f\u304f\uff0c\u30e2\u30c7\u30eb\u4f5c\u6210\u7b49\u304c\u9762\u5012\u306a\u3089\u3070\u305d\u3053\u3060\u3051Keras\u3092\u4f7f\u3046\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u578b\u304c\u3088\u3055\u305d\u3046\u3067\u3059\uff0eC++\u5b9f\u884c\u306b\u3059\u308b\u306a\u3089\u3070\u3069\u308c\u3092\u53d6\u3063\u3066\u3082\u305d\u3053\u307e\u3067\u5927\u304d\u304f\u901f\u5ea6\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3069\u308c\u3092\u3068\u3063\u3066\u3082Python\u5b9f\u88c5\u3088\u308a\u304b\u306f\u901f\u304f\u306a\u308b\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\uff0e\n\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u7de8\u3067\u306fPython\uff0cC++\u30671.8\u500d\u8fd1\u304f\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u304c\uff0c\u601d\u3063\u3066\u3044\u305f\u3088\u308a\u3082\u5dee\u304c\u51fa\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\u3082\u3068\u3082\u3068TensorFlow\u306e\u30e2\u30c7\u30eb\u5b9f\u884c\u90e8\u306f\u5f8c\u308d\u3067C++\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3082\u306e\u304c\u8d70\u3063\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\uff0c\u4eca\u56de\u51fa\u305f\u5dee\u306f\u30e2\u30c7\u30eb\u5b9f\u884c\u901f\u5ea6\u306e\u5dee\u3067\u306f\u306a\u304f\uff0c\u305d\u308c\u4ee5\u5916\u306e\u3068\u3053\u308d\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u6027\u80fd\u306e\u5dee\u7b49\u304c\u51fa\u3066\u304d\u3066\u3044\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\uff0e\u306a\u306e\u3067\uff0c\u753b\u50cf\u51e6\u7406\u5468\u308a\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u7b49\uff0c\u30e2\u30c7\u30eb\u5b9f\u884c\u4ee5\u5916\u306e\u90e8\u5206\u3067\u672c\u5f53\u306bC++\u306e\u51e6\u7406\u901f\u5ea6\u304c\u6b32\u3057\u3044\u6642\u4ee5\u5916\u306f\uff0cPython\u5074\u3067\u30e2\u30c7\u30eb\u3092\u56de\u3057\u3066\u3082\u5927\u5dee\u306a\u3044\u306a\u3068\u611f\u3058\u307e\u3057\u305f\uff0e\u4eca\u5ea6\u306fSSD\u3067\u3082\u8a66\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u53c2\u8003\u6587\u732e\n\nTensorflow]Loading a tensorflow graph with the C++ API by using Mnist (http://jackytung8085.blogspot.jp/2016/06/loading-tensorflow-graph-with-c-api-by.html)\n\n# \u306f\u3058\u3081\u306b\n\n\u6df1\u5c64\u5b66\u7fd2\u306f\u5b66\u7fd2\u81ea\u4f53\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u306f\u3082\u3061\u308d\u3093\u306e\u3053\u3068\uff0c\u8a13\u7df4\u6e08\u307f\u5b66\u7fd2\u30e2\u30c7\u30eb\u3092\u8d70\u3089\u305b\u308b\u969b\u306b\u3082\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c[SSD\uff08Single Shot MultiBox Detector\uff09](https://arxiv.org/abs/1512.02325)\u7b49\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u7269\u4f53\u8a8d\u8b58\u3092\u3055\u305b\u305f\u3044\uff01\u3068\u304b\uff0cDQN(DeepQNetwork)\u7b49\u3067\u5f37\u5316\u5b66\u7fd2\u3057\u305fAI\u3068\u4eba\u3068\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30a2\u30af\u30b7\u30e7\u30f3\u5bfe\u6226\u30b2\u30fc\u30e0\u3092\u3055\u305b\u305f\u3044\u3068\u3044\u3063\u305f\u969b\u306b\u306f\uff0c\u30e2\u30c7\u30eb\u5b9f\u884c\u306e\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u6027\u304c\u304b\u306a\u308a\u91cd\u8981\u306b\u306a\u3063\u3066\u304d\u307e\u3059\uff0e\n\n\u3044\u3044PC\u8cb7\u3048\uff01\u3068\u3044\u3048\u3070\u305d\u308c\u307e\u3067\u3067\u3059\u304c\u305d\u3093\u306a\u304a\u91d1\u3082\u306a\u3044\u3067\u3059\u3057\uff0c\u30ce\u30fc\u30c8PC\u7b49\u3067\u30dd\u30fc\u30bf\u30d6\u30eb\u306b\u5b9f\u884c\u3057\u305f\u3044\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\uff0e\u305d\u3053\u3067\u4eca\u56de\u306fKeras(TensorFlow)\u3092\u3044\u304b\u306b\u9ad8\u901f\u306b\u5b9f\u884c\u3059\u308b\u304b\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u3044\u304d\u307e\u3059\uff0e\n\n# \u5b9f\u884c\u74b0\u5883\n\n- Python3.5.2\n- Keras 1.2.1\n- tensorflow 1.0.0\n- MacBookPro(Late 2013)\n\n# \u9ad8\u901f\u5316\n\n\u3067\u306f\u3084\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e\u4eca\u56de\u306f\u6975\u529b\u308f\u304b\u308a\u3084\u3059\u304f\u624b\u8efd\u306b\u8a66\u305b\u308b\u4f8b\u3068\u3057\u3066MNIST\u30b5\u30f3\u30d7\u30eb\u306e\u30d3\u30ae\u30ca\u30fc\u3068\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u3092\u8a66\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306f[github](https://github.com/yukiB/tf-keras-speed-test)\u306b\u7f6e\u3044\u3066\u304a\u304d\u307e\u3059\uff0e\n\n## \u5927\u524d\u63d0\n\n\u672c\u5f53\u306b\u8eab\u3082\u84cb\u3082\u306a\u3044\u8a71\u3067\u3059\u304c\uff0c\u826f\u3044\u30b0\u30e9\u30dc\u3092\u7a4d\u3081\u308b\u65b9\uff0cAWS\u306b\u8ab2\u91d1\u3067\u304d\u308b\u65b9\uff0c\u5b9f\u884c\u74b0\u5883\u3068\u3057\u3066\u7279\u306b\u5236\u7d04\u304c\u306a\u3044\u65b9\u306f\uff0c\u4eca\u3059\u3050TitanX\u523a\u3057\u3066\u30e1\u30e2\u30ea\u76db\u308a\u76db\u308aPC\u3092\u8cb7\u3063\u3066\u304f\u3060\u3055\u3044\uff0eTensorFlow\u306eCPU\uff0cGPU\u901f\u5ea6\u6bd4\u8f03\u306f\u69d8\u3005\u306a\u30b5\u30a4\u30c8\u69d8\u304c\u3084\u3089\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u4f8b\u3048\u3070\u3053\u306e\u8a18\u4e8b\uff08[CPU/GPU/AWS\u3067\u306eTensorflow\u5b9f\u884c\u901f\u5ea6\u6bd4\u8f03](http://qiita.com/shouta-dev/items/5aa4a746b31b9be4838d))\u3067\u306f\uff0cCPU\uff0cGPU\u3067\u6570\u5341\u500d\u8fd1\u3044\u5dee\u304c\u51fa\u3066\u3044\u307e\u3059\uff0e\n\n\u4eca\u56de\u306e\u8a18\u4e8b\u3067\u9811\u5f35\u3063\u3066\u9ad8\u901f\u5316\u3057\u3066\u3082\uff0c\u901f\u304f\u306a\u3063\u3066\u5143\u306e2~5\u500d\u7a0b\u5ea6\u3067\u3059\u306e\u3067\uff0c\u3082\u3068\u304b\u3089\u305d\u306e\u624b\u6bb5\u304c\u3068\u308c\u308b\u65b9\u306f\u305d\u3061\u3089\u306e\u307b\u3046\u304c\u7d76\u5bfe\u826f\u3044\u3067\u3059\uff0e\u305d\u3093\u306a\u624b\u6bb5\u304c\u3068\u308c\u306a\u3044\u304b\u3089\u56f0\u3063\u3066\u308b\u3093\u3060\uff01\u3068\u304b\uff0c\u3082\u3046\u3084\u3063\u3066\u308b\u3051\u3069\u3082\u3063\u3068\u901f\u304f\u3057\u305f\u3044\uff01\u3068\u3044\u3046\u65b9\u306f\u7d9a\u304d\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e\n\n##\u3000\u30b9\u30bf\u30fc\u30c8\n\n\u307e\u305a\u30d3\u30ae\u30ca\u30fc\u7248MNIST\u30b5\u30f3\u30d7\u30eb\u3067\u78ba\u304b\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0eKeras\u3067\u4f55\u3082\u8003\u3048\u305a\u306b\u5b9f\u88c5\u3059\u308b\u3068\uff0c\n\n```py3\n# \u30e2\u30c7\u30eb\u4f5c\u6210\nmodel = Sequential()\nmodel.add(InputLayer(input_shape=input_shape, name='input'))\nmodel.add(Dense(nb_classes))\nmodel.add(Activation('softmax', name='softmax'))\n\noptimizer = SGD(lr=0.5)\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=optimizer,\n              metrics=['accuracy'])\n...\n# \u30e2\u30c7\u30eb\u8a13\u7df4\nmodel.fit(X_train, Y_train, batch_size=batch_size, nb_epoch=nb_epoch,\n          verbose=1, validation_data=(X_test, Y_test))\n...\n# \u30e2\u30c7\u30eb\u8a55\u4fa1\nscore = model.evaluate(X_test, Y_test, verbose=0)\n...\n# \u30e2\u30c7\u30eb\u5b9f\u884c\nmodel.predict(np.array([x])\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u5f62\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\u306a\u304aevaluate\u7b49\u3067\u4e00\u6c17\u306b\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u65b9\u6cd5\u306f\uff0c\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u5b9f\u884c\u6642\u306e\u3088\u3046\u306b\u9010\u6b21\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u304f\u308b\u72b6\u6cc1\u3068\u7570\u306a\u308b\u306e\u3067\uff0c\u4eca\u56de\u306f\n\n```py3\n# X_test \u306f10000\u500b\u306e\uff11\u30c1\u30e3\u30f3\u30cd\u30eb784\u6b21\u5143\u30c7\u30fc\u30bf\nstart = time.perf_counter()\nn_loop = 5\nfor n in range(n_loop):\n    predictions = [model.predict(np.array([x])) for x in X_test]\nprint('elapsed time for {} prediction {} [msec]'.format(len(X_test), (time.perf_counter()-start) * 1000 / n_loop))\n```\n\n\u306e\u3088\u3046\u306bprediction\u309210000\u56de\u56de\u3057\uff0c\u305d\u308c\u30925\u9031\u3055\u305b\u3066\u5e73\u5747\u7d4c\u904e\u6642\u9593\u3092\u3068\u308b\u3053\u3068\u3067\uff0c\u30e2\u30c7\u30eb\u5b9f\u884c\u901f\u5ea6\u3092\u8a08\u6e2c\u3057\u307e\u3059\uff08\u30df\u30ea\u79d2\u7cbe\u5ea6\u306e\u8a08\u6e2c\u3092\u884c\u3046\u70ba`time.time()`\u3067\u306f\u306a\u304f`time.pref_counter()`\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\uff09\uff0e\n\n\u3061\u306a\u307f\u306b\u4e0a\u8a18\u306e\u7d50\u679c\u306f\n\n```\nelapsed time for 10000 prediction 3768.8394089927897 [msec]\n```\n\n\u3067\u3057\u305f\uff0e\n\n## 1. `K.function`\u3092\u4f7f\u3063\u3066\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u304b\u3089\u5b9f\u884c\n\n```py3\nfrom keras import backend as K\npred = K.function([model.input], [model.output])\nfor n in range(n_loop):\n    predictions = [pred([np.array([x])]) for x in X_test]\n```\n\nKeras\u306f`from keras import backend as K`\u306e\u3088\u3046\u306b\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://keras.io/ja/backend/)\u306b\u3082\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c`K.function`\u3092\u7528\u3044\u308b\u3053\u3068\u3067\uff0cKeras\u95a2\u6570\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff0e\u3053\u3061\u3089\u304b\u3089\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\uff0cKeras\u3092\u305d\u306e\u307e\u307e\u305f\u305f\u304f\u3088\u308a\u3082\u82e5\u5e72\u5b9f\u884c\u901f\u5ea6\u3092\u4e0a\u3052\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u4eca\u56de\u306e\u5834\u5408\u3067\u306f\n\n```\nelapsed time for 10000 prediction 3210.0291186012328 [msec]\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n## 2. TensorFlow\u3067\u5b9f\u88c5\n\n\u305d\u3082\u305d\u3082Keras\u3068TensorFlow\u3067\u306f\u540c\u3058\u30e2\u30c7\u30eb\u3092\u7d44\u3093\u3060\u3068\u3057\u3066\u3082\u5b9f\u884c\u901f\u5ea6\uff0c\u5b66\u7fd2\u901f\u5ea6\u3068\u3082\u306b\u3060\u3044\u3076\u5dee\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n\n```py3\n# \u30e2\u30c7\u30eb\u4f5c\u6210\nx = tf.placeholder(tf.float32, [None, imageDim], name=\"input\")\nW = tf.Variable(tf.zeros([imageDim, outputDim]), dtype=tf.float32, name=\"Weight\")\nb = tf.Variable(tf.zeros([outputDim]), dtype=tf.float32, name=\"bias\")\ny = tf.nn.softmax(tf.matmul(x, W)+b, name=\"softmax\")\n\n# \u76ee\u7684\u95a2\u6570\u8a2d\u5b9a\ncross_entropy = tf.reduce_mean(\n   \u3000-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1])\n)\n\n# \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u8a2d\u5b9a\ntrain_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)\n\n# \u30e2\u30c7\u30eb\u8a13\u7df4\nsess.run(tf.global_variables_initializer())\nfor i in range(1000):\n       batch_xs, batch_ys = tfmnist.train.next_batch(100)\n       sess.run(train_step,feed_dict={x: batch_xs, y_: batch_ys})\n\n# \u30e2\u30c7\u30eb\u8a55\u4fa1\ncorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\nresult = sess.run(\n            accuracy,\n            feed_dict={x: tfmnist.test.images, y_:tfmnist.test.labels}\n        )\n\n# \u30e2\u30c7\u30eb\u5b9f\u884c\nsess.run(y, feed_dict={x: np.array([test_x])})\n```\n\nKeras\u306b\u6bd4\u3079\u7d30\u304b\u3044\u8a2d\u5b9a\u304c\u3067\u304d\u308b\u306e\u306fTensorFlow\u306e\u5229\u70b9\u3067\u3059\u304c\uff0c\u305d\u308c\u3067\u3082\u30e2\u30c7\u30eb\u3092\u66f8\u304f\u90e8\u5206\u306f\u3069\u3046\u3057\u3066\u3082\u7169\u96d1\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u305f\u3060\uff0cTensorFlow\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\n\n```\nelapsed time for 10000 prediction 2662.211540598946 [msec]\n```\n\n\u3068\u306a\u308a\uff0cKeras\u5b9f\u88c5\u3068\u6bd4\u3079\u3066\u3060\u3044\u3076\u901f\u5ea6\u304c\u5411\u4e0a\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n## 3. Keras\u30e2\u30c7\u30eb\u3092TensorFlow\u304b\u3089\u53e9\u3044\u3066\u5b9f\u884c\n\nKeras\u30e6\u30fc\u30b6\u306f\u6d99\u3092\u98f2\u3093\u3067TensorFlow\u306b\u79fb\u884c\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u306e\u304b\u3068\u3044\u3046\u3068\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\uff0c\n\u30e2\u30c7\u30eb\u4f5c\u6210\u306e\u307f\u3092Keras\u3067\u884c\u3044\uff0c\u6b8b\u308a\u306e\u90e8\u5206\uff08training\u3084prediction\u7b49\uff09\u306fTensorFlow\u304b\u3089\u5b9f\u884c\u3059\u308b\u3068\u3044\u3046\u65b9\u6cd5\u3067\u5b9f\u884c\u901f\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n```py3\nimport keras.backend.tensorflow_backend as KTF\nimport tensorflow as tf\n\nold_session = KTF.get_session()\nsess = tf.Session()\nKTF.set_session(sess)\n\n# \u30e2\u30c7\u30eb\u4f5c\u6210\nmodel = Sequential()\nmodel.add(InputLayer(input_shape=input_shape, name='input'))\nmodel.add(Dense(nb_classes))\nmodel.add(Activation('softmax', name='softmax'))\n\nx = tf.placeholder(tf.float32, [None, imageDim], name=\"input\")\ny = model(x)\ny_ = tf.placeholder(tf.float32, [None, nb_classes])\n\n# \u76ee\u7684\u95a2\u6570\uff0c\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u4f5c\u6210\uff0c\u8a13\u7df4\u8a55\u4fa1\u5b9f\u884c\u306f\u4e0a\u8a18\u3068\u540c\u69d8\u306e\u70ba\u7701\u7565\n\nKTF.set_session(old_session)\n```\n\n\u5165\u529bplaceholder`x`\u3092\u4f5c\u6210\u3057\uff0c\u305d\u308c\u3092\u30e2\u30c7\u30eb\u306b\u4ee3\u5165\u3059\u308b\u3053\u3068\u3067\uff0c\u51fa\u529b`y`\u3092\u5f97\u307e\u3059\uff0e\u3042\u3068\u306fTensorFlow\u306e\u5b9f\u88c5\u65b9\u6cd5\u306b\u5f93\u3063\u3066\uff0c\u76ee\u7684\u95a2\u6570\u3084\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u8a2d\u5b9a\u3057\uff0c\u8a13\u7df4\u3092\u56de\u3057\u307e\u3059\uff0e\n\n\u3053\u306e\u65b9\u6cd5\u3060\u3068\uff0c\u5b9f\u884c\u7d50\u679c\u306f\n\n```\nelapsed time for 10000 prediction 2685.7926497992594 [msec]\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308a\uff0c\u30e2\u30c7\u30eb\u90e8\u5206\u306fKeras\u5b9f\u88c5\u3067\u3042\u3063\u3066\u3082\uff0c\u5b9f\u884c\u901f\u5ea6\u306f\u304b\u306a\u308aTensorFlow\u5b9f\u88c5\u306b\u8fd1\u3044\u3082\u306e\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\n\n## 4. Keras\uff0cTensorFlow\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3092C++\u304b\u3089\u5b9f\u884c\n\nPython\u304b\u3089\u53e9\u3044\u3066\u7c21\u5358\u306b\u5b9f\u884c\u901f\u5ea6\u3092\u3042\u3052\u3089\u308c\u308b\u91cf\u306f\u305b\u3044\u305c\u3044\u4e0a\u8a18\u306e\u7a0b\u5ea6\u3067(PyPy\u7b49\u4f7f\u3048\u3070\u3082\u3063\u3068\u901f\u304f\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093)\uff0c\u3053\u308c\u4ee5\u4e0a\u901f\u304f\u3057\u3088\u3046\u3068\u601d\u3046\u3068C++\u304b\u3089\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0eTensorFlow\u306b\u306f\uff0c\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5229\u7528\u3059\u308b\u305f\u3081\u306eAPI\u3067\u3042\u308b\uff0c[TensorFlow Serving](https://tensorflow.github.io/serving/)\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\uff0e\u3053\u306eAPI\u306b\u3088\u308a\uff0cC++\u5074\u3067TensorFlow\u306e\u30e2\u30c7\u30eb\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3067\uff0c\u9ad8\u901f\u306b\u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\nLinux\u30e6\u30fc\u30b6\u3067\u3042\u308c\u3070\uff0c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u5f93\u3063\u3066\u3044\u3051\u3070\u554f\u984c\u306a\u304f\u52d5\u304b\u305b\u308b\u306e\u3067\u3059\u304c\uff0cOSX\u3067\u306f\u307e\u3060\u52d5\u304b\u3059\u306e\u304c\u5927\u5909\u3067\uff08\u79c1\u3082\u74b0\u5883\u69cb\u7bc9\u306b\u5931\u6557\u3057\u3066\u3044\u308b\u306e\u3067\u4eca\u56de\u306f\u8a73\u7d30\u306f\u66f8\u3051\u307e\u305b\u3093\u3067\u3057\u305f...\uff09\uff0cgithub\u306b\u3082OSX\u5411\u3051\u306eIssue\u304c\u6570\u591a\u304f\u7acb\u3063\u3066\u3044\u308b\u72b6\u6cc1\u3067\u3059\uff0e\u306a\u306e\u3067\u4eca\u56de\u306fServing\u306f\u5229\u7528\u305b\u305a\u306b\uff0c\u76f4\u63a5TensorFlow c++\u3092\u53e9\u304d\u307e\u3059\uff0eServing\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3082\uff0cKeras\u306e\u30e2\u30c7\u30eb\u3092C++\u304b\u3089\u53e9\u304d\u305f\u3044\u5834\u5408\u7b49\u306b\u306f\u53c2\u8003\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\n\n### 4.1. \u4e0b\u6e96\u5099\n\nTensorFlow\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308b\u305f\u3081\uff0cpyenv\u4ee5\u4e0b\u7b49\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308btensorflow\u30d5\u30a9\u30eb\u30c0\u306b\u5bfe\u3057\uff0c\u64cd\u4f5c\u3057\u3084\u3059\u3044\u5834\u6240\u304b\u3089\u30ea\u30f3\u30af\u3092\u8cbc\u3063\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff0epip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6c5a\u3057\u305f\u304f\u306a\u3044\u65b9\u306f\uff0c[github](https://github.com/tensorflow/tensorflow)\u304b\u3089\u5bfe\u5fdc\u30d0\u30fc\u30b8\u30e7\u30f3\u3092clone\u3057\u3066\u304d\u307e\u3059\uff0e\n\u4f7f\u7528\u3059\u308btensorflow\u306e\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089`./configure`\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\u4f7f\u7528\u3059\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u6307\u5b9a\u3084\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u7b49\u3092\u805e\u304b\u308c\u307e\u3059\u304c\u57fa\u672c\u7684\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u6307\u5b9a\u304byes\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\uff0e\u305f\u3060\uff0cGPU\u3092\u7a4d\u307e\u308c\u3066\u3044\u306a\u3044\u65b9\u306f\uff0cOpenCL\u3084CUDA\u3092\u6709\u52b9\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u306e\u8cea\u554f\u306b\u306fN\u3092\u56de\u7b54\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\uff0e\n\nTensorFlow\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u306f\uff0cGoogle\u304c\u3082\u3068\u3082\u3068\u793e\u5185\u3067\u4f7f\u7528\u3057\u3066\u3044\u305f\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3057\u305fBazel\u304c\u5fc5\u8981\u3067\u3059\uff0e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f[\u3053\u3053](https://bazel.build/versions/master/docs/install.html)\u3092\u53c2\u8003\u306b\u3057\u3064\u3064\u9032\u3081\u307e\u3059\uff0e\nOSX\u3067\u3042\u308c\u3070`brew install bazel & brew upgrade bazel`\u3067\u4e00\u767a\u3067\u5165\u308c\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e\n\n### 4.2. graph\u306e\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\n\nC++\u304b\u3089\u8aad\u307f\u8fbc\u3081\u308b\u5f62\u3067\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u3092\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\u3057\u307e\u3059\uff0e\n\n```py3\nsess = tf.Session()\n\n#Keras\u306e\u5834\u5408\nimport keras.backend.tensorflow_backend as KTF\nKTF.set_session(sess)\n\n...\nsaver = tf.train.Saver()\nsaver.save(sess, \"models/\"\u3000+ \"model.ckpt\")\ntf.train.write_graph(sess.graph.as_graph_def(), \"models/\", \"graph.pb\")\n```\n\n### 4.3. \u30e2\u30c7\u30eb\u306efreeze\u5316\n\n\u5b66\u7fd2\u3055\u305b\u308b\u5fc5\u8981\u306e\u306a\u3044\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066\u306f\uff0c\u91cd\u307f\u3092\u56fa\u5b9a\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://www.tensorflow.org/versions/r0.12/how_tos/tool_developers/#freezing)\u306b\u306f\uff0c\n\n> What this does is load the GraphDef, pull in the values for all the variables from the latest checkpoint file, and then replace each Variable op with a Const that has the numerical data for the weights stored in its attributes It then strips away all the extraneous nodes that aren't used for forward inference, and saves out the resulting GraphDef into an output file.\n\n\u3068\u3042\u308a\uff0c\u3069\u3046\u3084\u3089\u30d1\u30e9\u30e1\u30fc\u30bf\u5909\u6570\u3092`Const`\u306b\u3057\uff0c\u5b9f\u884c\u306b\u4e0d\u8981\u306anode\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u3067\uff0c\u30e2\u30c7\u30eb\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u3092\u524a\u6e1b\u3067\u304d\u308b\u3088\u3046\u3067\u3059(\u30d1\u30e9\u30e1\u30fc\u30bf\u5909\u6570\u3092Const\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u82e5\u5e72\u30a2\u30af\u30bb\u30b9\u901f\u5ea6\u3082\u6539\u5584\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f)\uff0e\n\nfreeze\u3059\u308b\u306b\u306f`freeze_graph.py`\u3092\u7528\u3044\u307e\u3059\uff0etensorflow\u306eroot\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u884c\u304d\uff0c\n\n```\nbazel build tensorflow/python/tools:freeze_graph && \\\nbazel-bin/tensorflow/python/tools/freeze_graph \\\n--input_graph=/path/to/graph.pb \\\n--input_checkpoint=/path/to/model.ckpt \\\n--output_graph=/path/to/output/frozen_graph.pb --output_node_names=softmax\n```\n\n\u3068\u53e9\u304f\u3053\u3068\u3067`output_graph`\u3067\u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306b\u56fa\u5b9a\u5316\u3055\u308c\u305fgraph\u304c\u751f\u6210\u3055\u308c\u307e\u3059\uff08\u521d\u56de\u306f\u8af8\u3005\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u8d70\u308b\u306e\u3067\u304b\u306a\u308a\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\uff09\uff0e\n\u306a\u304a\uff0c`output_node_names`\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u6012\u3089\u308c\u307e\u3059\u304c\uff0c\u3053\u308c\u306fTensorFlow\u3067\u306f\uff0e\n\n```py3\ny = tf.nn.softmax(tf.matmul(h_fc1_drop, W_fc2)+b_fc2, name=\"softmax\")\n```\n\n\u306e\u3088\u3046\u306b\u540d\u524d\u3092\u3064\u3051\u308b\u3053\u3068\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\uff0e\u305f\u3060\u3057Keras\u3067\u306f\uff0c\n\n```py3\nmodel.add(Activation('softmax', name='softmax'))\n```\n\n\u306e\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u3082\uff0c\u5185\u90e8\u3067\u5225\u540d\u3092\u6301\u3063\u3066\u3057\u307e\u3046\u306e\u3067\uff0c\u30a8\u30e9\u30fc\u304c\u306f\u304b\u308c\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n\u3053\u306e\u5834\u5408\n\n```py3\n[print(n.name) for n in sess.graph.as_graph_def().node]\n```\n\n\u306e\u3088\u3046\u306bnode\u306e\u540d\u524d\u3092\u76f4\u63a5print\u3057\u3066\uff0c\u5185\u90e8\u3067\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u540d\u524d\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\uff08\u624b\u5143\u306e\u74b0\u5883\u3067\u306fSoftmax\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\uff09\uff0e\n\n### 4.4. C++\u304b\u3089\u5b9f\u884c\n\n\u30e2\u30c7\u30eb\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u5b9f\u884c\u3059\u308bcpp\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\uff0e\u8a73\u3057\u304f\u306fgithub\u306e\u65b9\u3092\u3054\u89a7\u3044\u305f\u3060\u304f\u3068\u3057\u3066\uff0c\u4e3b\u8981\u90e8\u5206\u3092\u629c\u7c8b\u3057\u3066\u7d39\u4ecb\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u307e\u305a\uff0c`tensorflow_ROOT/tensorflow`\u306e\u4e0b\u306b\u4eca\u56de\u7528\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210(\u4eca\u56de\u306floadgraph)\u3057\uff0c\u305d\u306e\u306a\u304b\u306bcc\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059(`tensorflow_ROOT/tensorlow/loadgraph/mnist_tf.cc`)\uff0e\n\n```cpp\n  GraphDef graph_def;\n  status = ReadBinaryProto(Env::Default(), graph_file_name, &graph_def);\n  if (!status.ok()) {\n    cout << status.ToString() << \"\\n\";\n    return 1;\n  }\n  cout << \"loaded graph\" << \"\\n\";\n  // Add the graph to the session\n  status = session->Create(graph_def);\n  if (!status.ok()) {\n    cout << status.ToString() << \"\\n\";\n    return 1;\n  }\n```\n\n\u307e\u305a\uff0cgraph\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\uff0csession\u3092\u8d77\u52d5\u3057\u307e\u3059\uff0e\n\n```cpp\n  Tensor x(DT_FLOAT, TensorShape({nTests, imageDim}));\n\n  MNIST mnist = MNIST(\"./MNIST_data/\");\n  auto dst = x.flat<float>().data();\n  for (int i = 0; i < nTests; i++) {\n    auto img = mnist.testData.at(i).pixelData;\n    std::copy_n(img.begin(), imageDim, dst);\n    dst += imageDim;\n  }\n\n  const char* input_name = \"input\";\n  vector<pair<string, Tensor>> inputs = {\n    {input_name, x}\n  };\n  \n```\n\n\u6b21\u306b\uff0c\u5165\u529b\u30c6\u30f3\u30bd\u30eb`x`\u3092\u4f5c\u6210\u3057\uff0cMNIST\u306e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6d41\u3057\u8fbc\u3093\u3067\u3044\u304d\u307e\u3059\uff0emnist.testData\u306b\u306f\uff0c10000\u4ef6\u306e768\u6b21\u5143float\u30d9\u30af\u30c8\u30eb\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u308c\u3092\u9806\u6b21`x`\u306b\u767b\u9332\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\u305d\u3057\u3066\uff0cpython\u5074\u3067\u4f5c\u6210\u3057\u305f\u540d\u524d\u3068\uff0c\u30c6\u30f3\u30bd\u30eb\u306e\u30da\u30a2\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\u3053\u306e\u540d\u524d\u306f\uff0c\n\n```py3\n# TensorFlow\nx = tf.placeholder(tf.float32, [None, imageDim], name=\"input\")\n\n# Keras\nInputLayer(input_shape=input_shape, name='input')\n```\n\n\u306e\u3088\u3046\u306b\u3064\u3051\u305fpython\u5074\u3067\u3064\u3051\u305f\u540d\u524d\u3068\u5bfe\u5fdc\u3092\u53d6\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u51fa\u529b\u5074\u3082\u540c\u69d8\u306bTensor\u306evector\u3092\u4f5c\u6210\u3057\uff0c\u51fa\u529b\u540d\uff08\u4eca\u56de\u306e\u5834\u5408\u306fsoftmax\uff09\u3068\u51fa\u529b\u30c6\u30f3\u30bd\u30eb\uff0c\u5148\u307b\u3069\u4f5c\u6210\u3057\u305fInput vector\u3092session\u306b\u767b\u9332\u3057\u3066\u8d70\u3089\u305b\u307e\u3059\uff0e\n\n```cpp\n  vector<Tensor> outputs;\n  // Run the session, evaluating our \"softmax\" operation from the graph\n  status = session->Run(inputs, {output_name}, {}, &outputs);\n  if (!status.ok()) {\n    cout << status.ToString() << \"\\n\";\n    return 1;\n  }else{\n  \tcout << \"Success run graph !! \" << \"\\n\";\n  }\n```\n\n\u30e2\u30c7\u30eb\u306e\u5b9f\u884c\u304c\u6210\u529f\u3059\u308c\u3070\uff0coutputs\u306b\u306f\u51fa\u529b\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\uff0c\n\n```cpp\n  int nHits = 0;\n  for (vector<Tensor>::iterator it = outputs.begin() ; it != outputs.end(); ++it) { // \u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u3044\u308b\u304c\u4eca\u56de\u306foutputs\u306f\u4e00\u3064\u306a\u306e\u3067 item = outputs.front()\u3068\u540c\u7fa9\n  \tauto items = it->shaped<float, 2>({nTests, 10}); // 10\u500b\u306e\u6570\u5b57\u306e\u5206\u985e\u7d50\u679c10\u6b21\u5143 x \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf10000\u500b\n\tfor(int i = 0 ; i < nTests ; i++){\n\t     int arg_max = 0;\n      \t     float val_max = items(i, 0);\n      \t     for (int j = 0; j < 10; j++) {\n        \tif (items(i, j) > val_max) {\n          \t    arg_max = j;\n          \t    val_max = items(i, j);\n                }\n\t     } //\u300010\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u306e\u5185\u6700\u5927\u5024\u306eindex\u3092\u7b97\u51fa\n\t     if (arg_max == mnist.testData.at(i).label) {\n        \t nHits++;\n      \t     } \n\t}\n  }\n  float accuracy = (float)nHits/nTests;\n```\n\n\u306e\u3088\u3046\u306b\u6559\u5e2b\u30c7\u30fc\u30bf\u3068\u5b9f\u884c\u7d50\u679c\u3092\u6bd4\u8f03\u3057\u3066accuracy\u3092\u7b97\u51fa\u3057\u307e\u3059\uff0e\n\n\u6700\u5f8c\u306b\uff0ccpp\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u968e\u5c64\u306bBUILD\u30d5\u30a1\u30a4\u30eb\uff08\u4f9d\u5b58\u95a2\u4fc2\u7b49\u3092\u8a18\u8f09\u3059\u308b\u30d5\u30a1\u30a4\u30eb\uff0emake\u30d5\u30a1\u30a4\u30eb\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\uff09\u3092\u4f5c\u6210\u3057\uff0c\n\n```\ncc_binary(\n    name = \"mnistpredict_tf\",\n    srcs = [\"mnist_tf.cc\", \"MNIST.h\"],\n    deps = [\n        \"//tensorflow/core:tensorflow\",\n    ],\n)\n\ncc_binary(\n    name = \"mnistpredict_keras\",\n    srcs = [\"mnist_keras.cc\", \"MNIST.h\"],\n    deps = [\n        \"//tensorflow/core:tensorflow\",\n    ],\n)\n```\n\n\u30d3\u30eb\u30c9\u3092\u304b\u3051\u307e\u3059\uff0e\n\n```\nbazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-msse4.2 --copt=-msse4.1 --copt=-msse3 --copt=-mfma :mnistpredict_tf\nbazel build -c opt --copt=-mavx --copt=-mavx2 --copt=-msse4.2 --copt=-msse4.1 --copt=-msse3 --copt=-mfma :mnistpredict_keras\n\n```\n\n\u3044\u308d\u3044\u308d\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u3066\u3044\u307e\u3059\u304c\uff0c\u5fc5\u9808\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\uff0c\n\n```\nThe TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\nThe TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n...\n```\n\n\u7b49\u3044\u308d\u3044\u308d\u6012\u3089\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u305f\u306e\u3067\u4eca\u56de\u306f\u3064\u3051\u3066\u3044\u307e\u3059\uff0e\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u6210\u529f\u3059\u308b\u3068\uff0c`tensorflow_ROOT/bazel-bin/tensorflow/loadgraph`\u306e\u4e2d\u306bBUILD\u3067\u540d\u524d\u3092\u6307\u5b9a\u3057\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u3044\u308b\u306e\u3067\uff0c\n\n```\ncd tensorflow_ROOT/bazel-bin/tensorflow/loadgraph\n./mnistpredict_tf\n```\n\n\u305d\u306e\u968e\u5c64\u307e\u3067\u884c\u304d\uff0cMNIST_TEST\u30d5\u30a9\u30eb\u30c0\u3068\u56fa\u5b9a\u5316\u3057\u305fgraph\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066\u304d\u3066\u5b9f\u884c\u3057\u307e\u3059\uff08MNIST_TEST\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u8eab\u306f\u5c55\u958b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff09\uff0e\n\n# \u7d50\u679c\u6bd4\u8f03\n\n\u305d\u308c\u3067\u306f\uff0c\u3053\u308c\u307e\u3067\u7d39\u4ecb\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u306e\u7d50\u679c\u3092\u5168\u3066\u307e\u3068\u3081\u3066\u307f\u307e\u3059\uff0e\u201d768\u6b21\u5143\uff0828x28\uff09\u306e\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u304c\uff11\u679a\u5165\u529b\u3055\u308c\u305f\u969b\u306b\uff0c\u305d\u308c\u304c\u3069\u306e\u6570\u5b57\u304b\u306e\u5224\u5225\u7d50\u679c\u3092\u8fd4\u3059\u201d\u3068\u3044\u3046\u4e88\u6e2c\u5de5\u7a0b\u30921000\u56de\u7e70\u308a\u8fd4\u3057\u305f\u969b\u306b\u304b\u304b\u308b\u6642\u9593(msec)\u3067\u3059\uff08\u305d\u308c\u305e\u308c5\u56de\u56de\u3057\u3066\u5e73\u5747\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\uff09\uff0e\n\n|  msec  | Keras | Keras(K.function) | Keras(tf) | TensorFlow |\n|:------:|------:|------------------:|----------:|-----------:|\n| Python |  3787 |              3242 |      2711 |       2588 |\n|   C++  |   578 |         -         |       577 |        576 |\n\n\u305d\u3082\u305d\u3082Python\u3068C++\u3067\u306f\u30eb\u30fc\u30d7\u51e6\u7406\u6027\u80fd\u304c\u5727\u5012\u7684\u306b\u9055\u3046\u306e\u3067\u4ed5\u65b9\u306a\u3044\u3067\u3059\u304c\uff0c\u5358\u7d14\u306a\u6bd4\u8f03\u3067\u306f\u3084\u306f\u308aC++\u306e\u5727\u52dd\u3067\u3059\uff0ePython\u5b9f\u88c5\u306e\u4e2d\u3067\u306f\u7d20\u306eTensorFlow\u304c\u4e00\u756a\u901f\u304f\uff0c\u6b21\u70b9\u3067\u30e2\u30c7\u30ebKeras-\u5b9f\u884ctf\u30bf\u30a4\u30d7\u304c\u901f\u3044\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\uff0e\u7d20\u306eKeras\u306f\u305d\u308c\u3089\u3068\u6bd4\u8f03\u3059\u308b\u3068\u304b\u306a\u308a\u9045\u3044\u3067\u3059\u304c\uff0cK.function\u304b\u3089\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u82e5\u5e72\u306e\u901f\u5ea6\u6539\u5584\u304c\u307f\u3089\u308c\u307e\u3059\uff0e\n\n# MNIST\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u7de8\u3092\u305f\u3081\u3059\n\nConvolution\u5c64\u3092\u4f7f\u7528\u3059\u308b\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u7de8\u3067\u3082\u901f\u5ea6\u6bd4\u8f03\u3092\u3057\u3066\u307f\u307e\u3059\uff0e\u30e2\u30c7\u30eb\u306f\u4ee5\u4e0b\u3092\u7528\u3044\u307e\u3059\uff0e\n\n![model.png](https://qiita-image-store.s3.amazonaws.com/0/59864/f3a8ea57-1639-ffae-b91f-42bf7ab83734.png)\n\n\n\u307b\u307c\u30d3\u30ae\u30ca\u30fc\u7de8\u3068\u540c\u3058\u306a\u306e\u3067\u5927\u307e\u304b\u306b\u306f\u7701\u7565\u3057\u307e\u3059\u304c\uff0c\u6c17\u3092\u3064\u3051\u308b\u70b9\u304c\uff11\u70b9\u3042\u308a\u307e\u3059\uff0e\n\n## \u6ce8\u610f\u70b9\uff1aDropout\u5c64\u304c\u3042\u308b\u5834\u5408\u306elearning_phase\u306e\u6271\u3044\n\nKeras\u5358\u4f53\u3067\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u554f\u984c\u306a\u3044\u306e\u3067\u3059\u304c\uff0cK.function\u3092\u4f7f\u3063\u305f\u308a\uff0cKeras\u3068TensorFlow\u3092\u4f75\u7528\u3059\u308b\u5834\u5408\u306b\u6c17\u3092\u3064\u3051\u308b\u70b9\u3068\u3057\u3066learning_phase\u306e\u6271\u3044\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff0e\u3000Dropout\u5c64\u304c\u3042\u308b\u5834\u5408\u7b49\uff0c\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u30c6\u30b9\u30c8/\u5b9f\u884c\u3067\u4f7f\u7528\u30e2\u30c7\u30eb\u304c\u7570\u306a\u308b\u969b\uff0clearning_phase\u30d5\u30e9\u30b0\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0elearning_phase\u30d5\u30e9\u30b0\u306f\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u66421\uff0c\u5b9f\u884c\u66420\u3092\u6307\u5b9a\u3057\u307e\u3059\uff0e\n\n### python\u5074\n\ninput\u306bK.learning_phase()\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\uff0c\u5b9f\u884c\u6642\u306b\u306f0\u3092\u5165\u529b\u3057\u307e\u3059\uff0e\n\n```py3\n# K.function\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\npred = K.function([model.input, K.learning_phase()], [model.output])\n[pred([np.array([x]), 0]) for x in X_test]\n\n# TensorFlow\u304b\u3089Keras\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3059\u308b\u5834\u5408\n[sess.run(y, feed_dict={x: np.array([test_x]), K.learning_phase(): 0}) for test_x in X_test]\n```\n\n### c++\u5074\n\nBool\u578b\u306e\u30c6\u30f3\u30bd\u30eb\u3092\u4f5c\u6210\u3057\u30660\u3092\u4ee3\u5165\u3057\uff0c`keras_learning_phase`\u3068\u3044\u3046\u540d\u524d\u3067input\u306b\u767b\u9332\u3057\u3066\u3044\u307e\u3059\uff0e\n```cpp\nTensor lp(DT_BOOL, TensorShape({}));\nlp.flat<bool>().setZero();\n...\nvector<pair<string, Tensor>> inputs = {\n    {input_name, x}, {\"keras_learning_phase\", lp}\n};\n```\n\n## \u7d50\u679c\u6bd4\u8f03\n\n\u30d3\u30ae\u30ca\u30fc\u7de8\u3068\u540c\u69d8\u306b\u7d50\u679c\u6bd4\u8f03\u3092\u884c\u3044\u307e\u3059\uff0e\n\n|  msec  | Keras | Keras(K.function) | Keras(tf) | TensorFlow |\n|:------:|------:|------------------:|----------:|-----------:|\n| Python |  9693 |              9087 |      8571 |       8124 |\n|   C++  |  5528 |         -         |      5530 |       5512 |\n\n\u6b63\u76f4Python\u3068C++\u3067\u3082\u3063\u3068\u6027\u80fd\u5dee\u304c\u51fa\u308b\u304b\u306a\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u304c\uff0c\u3042\u307e\u308a\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\uff0ePython\u5074\u3092\u6bd4\u8f03\u3059\u308b\u3068\u30d3\u30ae\u30ca\u30fc\u7de8\u3068\u307b\u307c\u540c\u3058\u5e8f\u5217\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n## \u304a\u307e\u3051. OpenBLAS\uff0cMKL\u3092\u4f7f\u3063\u3066\u884c\u5217\u30d9\u30af\u30c8\u30eb\u8a08\u7b97\u9ad8\u901f\u5316\n\n\u4eca\u56de\u306e\u30c6\u30fc\u30de\u3068\u306f\u76f4\u63a5\u306f\u95a2\u4fc2\u306a\u3044\u306e\u3067\u304a\u307e\u3051\u306b\u3057\u307e\u3057\u305f\u304c\uff0c\u884c\u5217\u3084\u30d9\u30af\u30c8\u30eb\u306b\u95a2\u3059\u308b\u57fa\u672c\u7684\u306a\u6f14\u7b97\u306e\u4ed5\u69d8\u3092\u5b9a\u3081\u305fBLAS (Basic Linear Algebra Subprograms) \u306e\u9078\u3073\u65b9\u306b\u3088\u3063\u3066\u8a08\u7b97\u30b9\u30d4\u30fc\u30c9\u304c\u4e0a\u304c\u308a\u307e\u3059\uff0e\n\n- [Reference BLAS](http://www.netlib.org/blas/): \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u5b9f\u88c5\uff0e\u9045\u3044\uff0e\u591a\u304f\u306e\u5834\u5408\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u306f\u304a\u305d\u3089\u304f\u3053\u308c\uff0e\n- [OpenBLAS](http://www.openblas.net/): \u9ad8\u901f\u306a\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5b9f\u88c5\uff0e\n- [ATLAS](http://math-atlas.sourceforge.net/): \u81ea\u52d5\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u306a\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5b9f\u88c5\uff0e\n- [Intel MKL](https://software.intel.com/en-us/intel-mkl): Intel\u306b\u3088\u308b\u7206\u901f\u5b9f\u88c5\uff0e\u6700\u8fd1\u7121\u6599\u306b\u306a\u3063\u305f\uff0e\n\nOpenBLAS\u306e\u5229\u7528\u6cd5\u306f[\u4ee5\u524d\u8a18\u4e8b\u3092\u66f8\u3044\u305f](http://qiita.com/yukiB/items/bec24db4a5a41db02895)\u306e\u3067\u3088\u308d\u3057\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\uff0e\nIntelMKL\u306b\u3064\u3044\u3066\u306f,\n\nLinux\u7de8\uff1a[mkl numpy\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5](http://qiita.com/unnonouno/items/8ab453a1868d77a93679)\nOSX\u7de8\uff1a[mac\u3067mkl&numpy\u3092\u69cb\u7bc9\u3057\u305f](http://pip-install-deeplearning.hatenadiary.jp/entry/2016/01/30/011155)\n\n\u7b49\uff0c\u975e\u5e38\u306b\u308f\u304b\u308a\u3084\u3059\u3044\u89e3\u8aac\u8a18\u4e8b\u3092\u3042\u3052\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u3061\u3089\u3092\u3054\u89a7\u3044\u305f\u3060\u3051\u308c\u3070\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\uff0e\u3061\u306a\u307f\u306banaconda\u304b\u3089python\u3092\u5165\u308c\u308b\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u3067MKL\u30b3\u30f3\u30d1\u30a4\u30eb\u306enumpy\uff0cscipy\u304c\u5165\u308a\u307e\u3059\uff08\u3053\u306e\u65b9\u6cd5\u304c\u5727\u5012\u7684\u306b\u697d\u3067\u3059\uff09\uff0e\u304c\uff0c[\nmac\u3067mkl&numpy\u3092\u69cb\u7bc9\u3057\u305f](http://pip-install-deeplearning.hatenadiary.jp/entry/2016/01/30/011155)\u69d8\u306e\u8a18\u4e8b\u306b\u3088\u308b\u3068\uff0canaconda\u7d4c\u7531\u3088\u308a\u3082\uff0cMKL\u304b\u3089\u5165\u308c\u305f\u65b9\u304c\u6027\u80fd\u304c\u9ad8\u3044\u3068\u3044\u3046\u3053\u3068\u3082\u3042\u308b\u305d\u3046\u306a\u306e\u3067\u4e00\u6982\u306b\u3069\u3061\u3089\u304c\u826f\u3044\u304b\u306f\u8a00\u3048\u307e\u305b\u3093\uff0e\n\n\u3069\u308c\u304f\u3089\u3044\u8a08\u7b97\u30b9\u30da\u30c3\u30af\u304c\u4e0a\u304c\u308b\u304b\u3068\u3044\u3046\u8a71\u306b\u3064\u3044\u3066\u306f\uff0c\u4e0a\u8a18\u306b\u6319\u3052\u305f\u8a18\u4e8b\u3084\uff0c\n\n[Python\u306e\u7279\u7570\u5024\u5206\u89e3SVD\u306e\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f](https://soralab.space-ichikawa.com/2016/11/python-svd/)\n\n\u306e\u3088\u3046\u306b\u6bd4\u8f03\u3055\u308c\u3066\u3044\u308b\u8a18\u4e8b\u304c\u3042\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u3054\u89a7\u3044\u305f\u3060\u304f\u3068\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\uff0c\uff12\u5272\u304b\u3089\u6570\u500d\u901f\u304f\u306a\u308b\u3088\u3046\u3067\u3059\uff08\u624b\u5143\u306e\u74b0\u5883\u3067\u306f3\u5272\u5897\u3057\u306b\u306a\u308a\u307e\u3057\u305f\uff09\uff0e\n\n# \u304a\u308f\u308a\u306b\n\n\u5c11\u3057\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\uff0cKeras\uff0cTensorFlow\uff0c\u305d\u308c\u3089\u306ec++\u5b9f\u884c\u3067\u3069\u306e\u7a0b\u5ea6\u5b9f\u884c\u901f\u5ea6\u304c\u5909\u308f\u3063\u3066\u304f\u308b\u306e\u304b\u3092\u307f\u3066\u307f\u307e\u3057\u305f\uff0e\n\u7d50\u679c\u3068\u3057\u3066\uff0cPython\u5074\u3060\u3051\u3067\u3084\u308b\u306a\u3089TensorFlow\u304c\u4e00\u756a\u901f\u304f\uff0c\u30e2\u30c7\u30eb\u4f5c\u6210\u7b49\u304c\u9762\u5012\u306a\u3089\u3070\u305d\u3053\u3060\u3051Keras\u3092\u4f7f\u3046\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u578b\u304c\u3088\u3055\u305d\u3046\u3067\u3059\uff0eC++\u5b9f\u884c\u306b\u3059\u308b\u306a\u3089\u3070\u3069\u308c\u3092\u53d6\u3063\u3066\u3082\u305d\u3053\u307e\u3067\u5927\u304d\u304f\u901f\u5ea6\u306f\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3069\u308c\u3092\u3068\u3063\u3066\u3082Python\u5b9f\u88c5\u3088\u308a\u304b\u306f\u901f\u304f\u306a\u308b\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\uff0e\n\n\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u7de8\u3067\u306fPython\uff0cC++\u30671.8\u500d\u8fd1\u304f\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u304c\uff0c\u601d\u3063\u3066\u3044\u305f\u3088\u308a\u3082\u5dee\u304c\u51fa\u307e\u305b\u3093\u3067\u3057\u305f\uff0e\u3082\u3068\u3082\u3068TensorFlow\u306e\u30e2\u30c7\u30eb\u5b9f\u884c\u90e8\u306f\u5f8c\u308d\u3067C++\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3082\u306e\u304c\u8d70\u3063\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\uff0c\u4eca\u56de\u51fa\u305f\u5dee\u306f\u30e2\u30c7\u30eb\u5b9f\u884c\u901f\u5ea6\u306e\u5dee\u3067\u306f\u306a\u304f\uff0c\u305d\u308c\u4ee5\u5916\u306e\u3068\u3053\u308d\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u6027\u80fd\u306e\u5dee\u7b49\u304c\u51fa\u3066\u304d\u3066\u3044\u305f\u306e\u3067\u306f\u306a\u3044\u304b\u306a\u3068\u601d\u3044\u307e\u3059\uff0e\u306a\u306e\u3067\uff0c\u753b\u50cf\u51e6\u7406\u5468\u308a\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u7b49\uff0c\u30e2\u30c7\u30eb\u5b9f\u884c\u4ee5\u5916\u306e\u90e8\u5206\u3067\u672c\u5f53\u306bC++\u306e\u51e6\u7406\u901f\u5ea6\u304c\u6b32\u3057\u3044\u6642\u4ee5\u5916\u306f\uff0cPython\u5074\u3067\u30e2\u30c7\u30eb\u3092\u56de\u3057\u3066\u3082\u5927\u5dee\u306a\u3044\u306a\u3068\u611f\u3058\u307e\u3057\u305f\uff0e\u4eca\u5ea6\u306fSSD\u3067\u3082\u8a66\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff0e\n\n# \u53c2\u8003\u6587\u732e\n\n- Tensorflow]Loading a tensorflow graph with the C++ API by using Mnist (<http://jackytung8085.blogspot.jp/2016/06/loading-tensorflow-graph-with-c-api-by.html>)\n", "tags": ["Keras", "TensorFlow", "\u6a5f\u68b0\u5b66\u7fd2", "DeepLearning", "Python"]}