{"tags": ["\u5730\u57df\u30e1\u30c3\u30b7\u30e5", "JavaScript", "GIS", "geojson"], "context": " More than 1 year has passed since last update.\u3053\u308c\u3067\u5e02\u533a\u753a\u6751\u306e\u5883\u754c\u7dda\u3092 Google Maps \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u51fa\u6765\u308b\u3068\u601d\u3063\u305f\u3051\u3069\u3001\u7121\u7406\u3060\u3063\u305f\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u3092\u7d4c\u7def\u5ea6\u306b\u5909\u63db\u3059\u308b\u30e1\u30e2\u3002\n\u3069\u3046\u305b\u3060\u304b\u3089 GeoJSON \u3067\u5410\u304f\u3088\u3046\u306b\u3057\u305f\u3002\n\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306f\u4e0b\u8a18\u3001\u7dcf\u52d9\u7701\u7d71\u8a08\u5c40\u306e\u90fd\u9053\u5e9c\u770c\u5225\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b CSV \u30c7\u30fc\u30bf:\n\n\u7d71\u8a08\u5c40\u30db\u30fc\u30e0\u30da\u30fc\u30b8/\u5e02\u533a\u753a\u6751\u5225\u30e1\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u4e00\u89a7\n\n\u4e0a\u8a18 CSV \u30c7\u30fc\u30bf\u304b\u3089\u7d4c\u7def\u5ea6\u3092\u53d6\u5f97\u3059\u308b\u8a08\u7b97\u65b9\u6cd5\u306f\u6b21\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u305f:\n\n03/30\u3000\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u3092\u7def\u5ea6\u7d4c\u5ea6\u306b\u5909\u63db\u3059\u308b - \u4e8c\u4e01\u76ee\u3067\u50cd\u304f\u793e\u9577\u306e\u65e5\u8a18\n\nGist \u306f\u3053\u3061\u3089:\n\n\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u306e GeoJSON \u5909\u63db\n\n\u4f8b\u3048\u3070 \u6771\u4eac\u90fd\u306e\u30e1\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9 \u304b\u3089 GeoJSON \u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u5834\u5408\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30de\u30f3\u30c9\u3092\u53e9\u304f:\nnpm run convert ./city-mesh_13.csv \n\n\u3059\u308b\u3068\u3001GeoJSON \u5f62\u5f0f\u306e city-mesh_13.json \u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058:\n\nmesh2geojson.js\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar _ = require('underscore');\nvar concat = require('concat-stream');\nvar csv = require('csv');\nvar GeoJSON = require('geojson');\nvar iconv = require('iconv');\n\n\n// \u5730\u57df\u30e1\u30c3\u30b7\u30e5\u3092\u7d4c\u7def\u5ea6\u306b\u5909\u63db\nvar latlng = function (_mesh) {\n  var mesh = _mesh.toString();\n  var mesh1 = mesh.slice(0, 4);  // 1 \u6b21\u30e1\u30c3\u30b7\u30e5\n  var mesh2 = mesh.slice(4, 6);  // 2 \u6b21\u30e1\u30c3\u30b7\u30e5\n  var mesh3 = mesh.slice(6, 8);  // 3 \u6b21\u30e1\u30c3\u30b7\u30e5\n\n  // \u7d4c\u5ea6\u306e\u5ea6\u5206\u79d2\n  var latDeg = parseInt(mesh1.slice(0, 2)) / 1.5;\n  var latMin = parseInt(mesh2.slice(0, 1)) * 5;\n  var latSec = parseInt(mesh3.slice(0, 1)) * 30;\n  // \u7def\u5ea6\u306e\u5ea6\u5206\u79d2\n  var lngDeg = parseInt(mesh1.slice(2, 4)) + 100;\n  var lngMin = parseInt(mesh2.slice(1, 2)) * 7.5;\n  var lngSec = parseInt(mesh3.slice(1, 2)) * 45;\n\n  // 10 \u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  var lat = ((latDeg * 3600) + (latMin * 60) + latSec) / 3600;\n  var lng = ((lngDeg * 3600) + (lngMin * 60) + lngSec) / 3600;\n\n  return [ lat, lng ];\n};\n\nvar f = fs.statSync(process.argv[2]).isFile() ? path.resolve(process.argv[2]) : undefined;\nvar filein = fs.createReadStream(f);\nvar fileconv = new iconv.Iconv('Shift_JIS', 'UTF-8//TRANSLIT//IGNORE');\nvar fileout = fs.createWriteStream(f.replace(/\\.csv$/, '.json'));\n\nfilein\n  .pipe(fileconv)\n  .pipe(csv.parse())\n  .pipe(csv.transform(function (values) {\n    return {\n      code: parseInt(values[0]),\n      name: values[1],\n      coords: [ latlng(values[2]) ]\n    };\n  }))\n  .pipe(concat(function (_data) {\n    var data = _.reduce(_data, function (memo, item) {\n      if (!_.isArray(memo)) return [ item ];\n      var last = _.last(memo);\n      if (last.code === item.code) {\n        last.coords.push(item.coords[0]);\n      } else {\n        memo.push(item);\n      }\n      return memo;\n    });\n    var geoData = GeoJSON.parse(data, { 'MultiPoint': 'coords' });\n    fileout.end(JSON.stringify(geoData));\n  }));\n\n\n\npackage.json\n{\n  \"name\": \"mesh2latlng\",\n  \"author\": \"Yu I.\",\n  \"license\": \"UNLICENSE\",\n  \"scripts\": {\n    \"convert\": \"node ./mesh2geojson.js\"\n  },\n  \"dependencies\": {\n    \"concat-stream\": \"^1.4.8\",\n    \"csv\": \"^0.4.1\",\n    \"geojson\": \"^0.2.0\",\n    \"iconv\": \"^2.1.6\",\n    \"underscore\": \"^1.8.3\"\n  }\n}\n\n\n\n\u3053\u308c\u3067\u5e02\u533a\u753a\u6751\u306e\u5883\u754c\u7dda\u3092 Google Maps \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u51fa\u6765\u308b\u3068\u601d\u3063\u305f\u3051\u3069\u3001\u7121\u7406\u3060\u3063\u305f\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u3092\u7d4c\u7def\u5ea6\u306b\u5909\u63db\u3059\u308b\u30e1\u30e2\u3002\n\n**\u3069\u3046\u305b\u3060\u304b\u3089 GeoJSON \u3067\u5410\u304f\u3088\u3046\u306b\u3057\u305f\u3002**\n\n\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u306f\u4e0b\u8a18\u3001\u7dcf\u52d9\u7701\u7d71\u8a08\u5c40\u306e\u90fd\u9053\u5e9c\u770c\u5225\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b CSV \u30c7\u30fc\u30bf:\n\n* [\u7d71\u8a08\u5c40\u30db\u30fc\u30e0\u30da\u30fc\u30b8/\u5e02\u533a\u753a\u6751\u5225\u30e1\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u4e00\u89a7](http://www.stat.go.jp/data/mesh/m_itiran.htm)\n\n\n\u4e0a\u8a18 CSV \u30c7\u30fc\u30bf\u304b\u3089\u7d4c\u7def\u5ea6\u3092\u53d6\u5f97\u3059\u308b\u8a08\u7b97\u65b9\u6cd5\u306f\u6b21\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u305f:\n\n* [03/30\u3000\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9\u3092\u7def\u5ea6\u7d4c\u5ea6\u306b\u5909\u63db\u3059\u308b - \u4e8c\u4e01\u76ee\u3067\u50cd\u304f\u793e\u9577\u306e\u65e5\u8a18](http://www.erde.co.jp/blog/?p=646)\n\nGist \u306f\u3053\u3061\u3089:\n\n* [\u5730\u57df\u30e1\u30c3\u30b7\u30e5\u306e GeoJSON \u5909\u63db](https://gist.github.com/japboy/15443d79d1a02bfc577c)\n\n\n\u4f8b\u3048\u3070 [\u6771\u4eac\u90fd\u306e\u30e1\u30c3\u30b7\u30e5\u30b3\u30fc\u30c9](http://www.stat.go.jp/data/mesh/csv/city-mesh_13.csv) \u304b\u3089 [GeoJSON](http://geojson.org/) \u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3059\u308b\u5834\u5408\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30de\u30f3\u30c9\u3092\u53e9\u304f:\n\n```\nnpm run convert ./city-mesh_13.csv \n```\n\n\u3059\u308b\u3068\u3001GeoJSON \u5f62\u5f0f\u306e `city-mesh_13.json` \u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n\u30b3\u30fc\u30c9\u306f\u3053\u3093\u306a\u611f\u3058:\n\n```javascript:mesh2geojson.js\n'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\n\nvar _ = require('underscore');\nvar concat = require('concat-stream');\nvar csv = require('csv');\nvar GeoJSON = require('geojson');\nvar iconv = require('iconv');\n\n\n// \u5730\u57df\u30e1\u30c3\u30b7\u30e5\u3092\u7d4c\u7def\u5ea6\u306b\u5909\u63db\nvar latlng = function (_mesh) {\n  var mesh = _mesh.toString();\n  var mesh1 = mesh.slice(0, 4);  // 1 \u6b21\u30e1\u30c3\u30b7\u30e5\n  var mesh2 = mesh.slice(4, 6);  // 2 \u6b21\u30e1\u30c3\u30b7\u30e5\n  var mesh3 = mesh.slice(6, 8);  // 3 \u6b21\u30e1\u30c3\u30b7\u30e5\n\n  // \u7d4c\u5ea6\u306e\u5ea6\u5206\u79d2\n  var latDeg = parseInt(mesh1.slice(0, 2)) / 1.5;\n  var latMin = parseInt(mesh2.slice(0, 1)) * 5;\n  var latSec = parseInt(mesh3.slice(0, 1)) * 30;\n  // \u7def\u5ea6\u306e\u5ea6\u5206\u79d2\n  var lngDeg = parseInt(mesh1.slice(2, 4)) + 100;\n  var lngMin = parseInt(mesh2.slice(1, 2)) * 7.5;\n  var lngSec = parseInt(mesh3.slice(1, 2)) * 45;\n\n  // 10 \u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  var lat = ((latDeg * 3600) + (latMin * 60) + latSec) / 3600;\n  var lng = ((lngDeg * 3600) + (lngMin * 60) + lngSec) / 3600;\n\n  return [ lat, lng ];\n};\n\nvar f = fs.statSync(process.argv[2]).isFile() ? path.resolve(process.argv[2]) : undefined;\nvar filein = fs.createReadStream(f);\nvar fileconv = new iconv.Iconv('Shift_JIS', 'UTF-8//TRANSLIT//IGNORE');\nvar fileout = fs.createWriteStream(f.replace(/\\.csv$/, '.json'));\n\nfilein\n  .pipe(fileconv)\n  .pipe(csv.parse())\n  .pipe(csv.transform(function (values) {\n    return {\n      code: parseInt(values[0]),\n      name: values[1],\n      coords: [ latlng(values[2]) ]\n    };\n  }))\n  .pipe(concat(function (_data) {\n    var data = _.reduce(_data, function (memo, item) {\n      if (!_.isArray(memo)) return [ item ];\n      var last = _.last(memo);\n      if (last.code === item.code) {\n        last.coords.push(item.coords[0]);\n      } else {\n        memo.push(item);\n      }\n      return memo;\n    });\n    var geoData = GeoJSON.parse(data, { 'MultiPoint': 'coords' });\n    fileout.end(JSON.stringify(geoData));\n  }));\n```\n\n```json:package.json\n{\n  \"name\": \"mesh2latlng\",\n  \"author\": \"Yu I.\",\n  \"license\": \"UNLICENSE\",\n  \"scripts\": {\n    \"convert\": \"node ./mesh2geojson.js\"\n  },\n  \"dependencies\": {\n    \"concat-stream\": \"^1.4.8\",\n    \"csv\": \"^0.4.1\",\n    \"geojson\": \"^0.2.0\",\n    \"iconv\": \"^2.1.6\",\n    \"underscore\": \"^1.8.3\"\n  }\n}\n```\n"}