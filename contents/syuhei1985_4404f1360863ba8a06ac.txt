{"tags": ["Sound", "Swift", "CoreAudio"], "context": " More than 1 year has passed since last update.OS X \u3067\u306e\u30de\u30a4\u30af\u306e\u97f3\u58f0\u30ad\u30e3\u30d7\u30c1\u30e3\u5b9f\u88c5\u65b9\u6cd5\u306b\u3064\u3044\u3066\u3001Swift\u306e\u52c9\u5f37\u3064\u3044\u3067\u306b\u66f8\u3044\u3066\u307f\u305f\u3002\n\u69cb\u9020\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u3053\u3061\u3089\u3082\u8abf\u3079\u3066\u30e1\u30e2\u3002\n\u53c2\u8003\n\nCore Audio Overview\nTechnical Note TN2091 Device input using the HAL Output Audio Unit\nhttp://stackoverflow.com/questions/24838106/using-audiobufferlist-with-swift\n\n\nCore Audio\niOS\u3001OS X\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u7dcf\u79f0\n\u9332\u97f3\u3084\u97f3\u58f0\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u304b\u3051\u308b\u306a\u3069\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u64cd\u4f5c\u306b\u95a2\u3059\u308b API \u304c\u5185\u5305\u3055\u308c\u3066\u3044\u308b\u3002\n\u5177\u4f53\u7684\u306aAPI\u306fObjective-C\u3001C\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\n\nCore Audio \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\n\nOS X Core Audio\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\n\nOS X\u3067\u306fHAL(Hardware Abstraction Layer)\u3092\u901a\u3058\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u3002\n\n\n\n\niOS Core Audio \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\n\niOS Core Audio\u306fOS X Core Audio\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u7248\niOS\u306e\u5834\u5408\u306fMIDI\u3092\u6271\u3046\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c\u306a\u3044\n\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30ec\u30a4\u30e4\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304cAudio Session\u304b\u3089\u306b\u9650\u5b9a\n\n\n\n\n\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u62bd\u8c61\u5316\n\u30b3\u30fc\u30c9\u3067\u76f4\u63a5HAL\u3068\u3084\u308a\u3068\u308a\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\nAUHAL\u30e6\u30cb\u30c3\u30c8(OS X)\u304a\u3088\u3073AURemoteIO\u30e6\u30cb\u30c3\u30c8(iOS)\u3068\u547c\u3070\u308c\u308b\u7279\u6b8a\u306a\u30aa\u30fc\u30c7\u30a3\u30aa\u30e6\u30cb\u30c3\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u3089\u3092\u7d4c\u7531\u3057\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30fc\u30bf\u3092\u4ed6\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u30e6\u30cb\u30c3\u30c8\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u5b9f\u969b\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u306e\u3084\u308a\u3068\u308a\u306fI/OKit\u304c\u30c9\u30e9\u30a4\u30d0\u30fc\u3068\u30a2\u30af\u30bb\u30b9\u3057\u3066\u5b9f\u884c\u3055\u308c\u308b\u3002OS X\u3067\u306f\u3053\u308c\u3089\u306e\u63a5\u7d9a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066AUHAL\u30e6\u30cb\u30c3\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\nAudioHardware.h\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30de\u30a4\u30af\u306e\u97f3\u58f0\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\nmain.swift\nlang:main.swift\n\nimport Foundation\n\nlet micInput = MicInput.sharedInstance\nmicInput.setUpAudioDevice()\n\nmicInput.startAudio()\n\n// Enter\u3067\u7d42\u4e86\ngetchar()\n\nmicInput.stopAudio()\n\n\n\nMicInput.swift\nlang:MicInput.swift\n\nimport Foundation\nimport CoreAudio\nimport AudioUnit\n\nclass MicInput {\n\n    class var sharedInstance: MicInput\n    {\n        struct Static\n        {\n            static let instance : MicInput = MicInput()\n        }\n        return Static.instance\n    }\n\n    var inputUnit = AudioUnit()\n\n    let inputProc : AURenderCallback = { (\n        inRefCon: UnsafeMutablePointer<Void>,\n        ioActionFlags: UnsafeMutablePointer<AudioUnitRenderActionFlags>,\n        inTimeStamp: UnsafePointer<AudioTimeStamp>,\n        inBufNumber: UInt32,\n        inNumberFrames: UInt32,\n        ioData: UnsafeMutablePointer<AudioBufferList>) -> OSStatus in\n\n        var err :OSStatus? = nil\n\n        let buffer = MicInput.sharedInstance.allocateAudioBuffer(2 ,size: inNumberFrames)\n        var bufferList = AudioBufferList.init(mNumberBuffers: 1, mBuffers: buffer)\n\n        err = AudioUnitRender(MicInput.sharedInstance.inputUnit, ioActionFlags, inTimeStamp, inBufNumber, inNumberFrames, &bufferList)\n\n        if err == noErr\n        {\n            let data=UnsafePointer<Int16>(bufferList.mBuffers.mData)\n\n            let dataArray = UnsafeBufferPointer<Int16>(start:data, count: Int(bufferList.mBuffers.mDataByteSize)/sizeof(Int16))\n\n            for i in 0...dataArray.count-1\n            {\n                print(dataArray[i])\n            }\n        }\n        return err!\n    }\n\n    func allocateAudioBuffer(let numChannel: UInt32, let size: UInt32) -> AudioBuffer\n    {\n        let dataSize = UInt32(numChannel * UInt32(sizeof(Float64)) * size)\n        let data = malloc(Int(dataSize))\n        let buffer = AudioBuffer.init(mNumberChannels: numChannel, mDataByteSize: dataSize, mData: data)\n\n        return buffer\n    }\n\n    private func setUpAudioHAL() -> OSStatus\n    {\n        // AudioUnit\u3092\u4f5c\u6210\u3059\u308b\n        var desc = AudioComponentDescription()\n        var comp:AudioComponent?\n\n        desc.componentType = kAudioUnitType_Output\n        desc.componentSubType = kAudioUnitSubType_HALOutput\n\n        desc.componentManufacturer = kAudioUnitManufacturer_Apple\n        desc.componentFlags = 0\n        desc.componentFlagsMask = 0\n\n        comp = AudioComponentFindNext(nil, &desc)\n        if comp == nil\n        {\n            return -1\n        }\n\n        let err = AudioComponentInstanceNew(comp!, &self.inputUnit)\n        return err\n    }\n\n    private func setUpEnableIO() -> OSStatus\n    {\n        // AudioUnit\u306e\u5165\u529b\u3092\u6709\u52b9\u5316\u3001\u51fa\u529b\u3092\u7121\u52b9\u5316\u3059\u308b\u3002\n        // \u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u51fa\u529b\u6709\u52b9\u8a2d\u5b9a\n        var enableIO: UInt32 = 1\n        var disableIO: UInt32 = 0\n        var err: OSStatus?\n\n        err = AudioUnitSetProperty(self.inputUnit, kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Input, 1, &enableIO, UInt32(sizeof(UInt32)))\n\n        if err == noErr\n        {\n            err = AudioUnitSetProperty(self.inputUnit, kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Output, 0, &disableIO, UInt32(sizeof(UInt32)))\n        }\n\n        return err!\n    }\n\n    private func setUpMicInput() -> OSStatus\n    {\n        // \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u8a2d\u5b9a\n\n        var inputDeviceId = AudioDeviceID()\n        var address =  AudioObjectPropertyAddress(mSelector: kAudioHardwarePropertyDefaultInputDevice, mScope: kAudioObjectPropertyScopeGlobal, mElement: kAudioObjectPropertyElementMaster)\n        var size = UInt32(sizeof(AudioDeviceID))\n\n        var err = AudioObjectGetPropertyData(UInt32(kAudioObjectSystemObject), &address, 0, nil, &size, &inputDeviceId)\n        // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u53d6\u5f97\n\n        if err == noErr\n        {\n            err = AudioUnitSetProperty(self.inputUnit, kAudioOutputUnitProperty_CurrentDevice, kAudioUnitScope_Global, 0, &inputDeviceId, size)\n            // AudioUnit\u306b\u30c7\u30d0\u30a4\u30b9\u3092\u8a2d\u5b9a\n        }\n\n        // \u78ba\u8a8d\u7528\n        print(\"DeviceName:\",self.deviceName(inputDeviceId))\n        print(\"BufferSize:\",self.bufferSize(inputDeviceId))\n\n        return err\n    }\n\n    private func deviceName(let devID: AudioDeviceID) -> String\n    {\n        // \u540d\u524d\u78ba\u8a8d\n        var address =  AudioObjectPropertyAddress(mSelector: kAudioObjectPropertyName, mScope: kAudioObjectPropertyScopeGlobal, mElement: kAudioObjectPropertyElementMaster)\n        var name: CFStringRef?\n        var stringsize = UInt32(sizeof(CFStringRef))\n\n        AudioObjectGetPropertyData(devID, &address, 0, nil, &stringsize, &name)\n\n        let string = String(name)\n        return string\n\n    }\n\n    private func bufferSize(let devID: AudioDeviceID) -> UInt32\n    {\n        // \u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u78ba\u8a8d\n        var address =  AudioObjectPropertyAddress(mSelector: kAudioDevicePropertyBufferFrameSize, mScope: kAudioObjectPropertyScopeGlobal, mElement: kAudioObjectPropertyElementMaster)\n        var buf: UInt32 = 0\n        var bufSize = UInt32(sizeof(UInt32))\n\n        AudioObjectGetPropertyData(devID, &address, 0, nil, &bufSize, &buf)\n\n        return buf\n    }\n\n    private func setUpInputFormat() -> OSStatus\n    {\n        // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u3084\u30c7\u30fc\u30bf\u30d3\u30c3\u30c8\u6570\u3001\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306a\u3069\u3092\u8a2d\u5b9a\n        var audioFormat = AudioStreamBasicDescription()\n        audioFormat.mBitsPerChannel = 16\n        audioFormat.mBytesPerFrame = 4\n        audioFormat.mBytesPerPacket = 4\n        audioFormat.mChannelsPerFrame = 2\n        audioFormat.mFormatFlags = kAudioFormatFlagIsSignedInteger | kAudioFormatFlagIsPacked\n        audioFormat.mFormatID = kAudioFormatLinearPCM\n        audioFormat.mFramesPerPacket = 1\n        audioFormat.mSampleRate = 44100.00\n\n        let size = UInt32(sizeof(AudioStreamBasicDescription))\n        let err = AudioUnitSetProperty(self.inputUnit, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Output, 1, &audioFormat, size)\n\n        return err\n    }\n\n    private func setUpCallback() -> OSStatus\n    {\n        // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u7528\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u8a2d\u5b9a\n        var input = AURenderCallbackStruct(inputProc: self.inputProc, inputProcRefCon: nil)\n\n        let size = UInt32(sizeof(AURenderCallbackStruct))\n        let err = AudioUnitSetProperty(self.inputUnit, kAudioOutputUnitProperty_SetInputCallback, kAudioUnitScope_Global, 0, &input, size)\n\n        return err\n    }\n\n    func setUpAudioDevice()\n    {\n        if self.setUpAudioHAL() != noErr\n        {\n            exit(-1)\n        }\n\n        if self.setUpEnableIO() != noErr\n        {\n            exit(-1)\n        }\n\n        if self.setUpMicInput() != noErr\n        {\n            exit(-1)\n        }\n\n        if self.setUpInputFormat() != noErr\n        {\n            exit(-1)\n        }\n\n        if self.setUpCallback() != noErr\n        {\n            exit(-1)\n        }\n\n        if AudioUnitInitialize(self.inputUnit) != noErr\n        {\n            exit(-1)\n        }\n    }\n\n    func startAudio()\n    {\n        if AudioOutputUnitStart(self.inputUnit) != noErr\n        {\n            exit(-1)\n        }\n    }\n\n    func stopAudio()\n    {\n        if AudioOutputUnitStop(self.inputUnit) != noErr\n        {\n            exit(-1)\n        }\n    }\n}\n\n\n\n\u307e\u3068\u3081\n\u30fb\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u3078\u306e\u610f\u8b58\u3092\u307e\u3063\u305f\u304f\u305b\u305a\u306b\u5b9f\u88c5\u3067\u304d\u305f\u306e\u306f\u697d\u3060\u3063\u305f\u3002\n\u30fb\u6700\u521d\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306e\u5f15\u6570\u3067\u3042\u308b \"ioDate\" \u304b\u3089\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u30c7\u30fc\u30bf\u3092\u5f15\u3063\u5f35\u308c\u308b\u3068\u601d\u3044\u3053\u3093\u3067\u3044\u3066\u5c11\u3057\u30cf\u30de\u3063\u305f\u3002\u3002\u3002AudioRenderCallback()\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u30c7\u30fc\u30bf\u3092\u5f15\u3063\u5f35\u3063\u3066\u304f\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3002Audio Unit Hosting Fundamentals\nOS X \u3067\u306e\u30de\u30a4\u30af\u306e\u97f3\u58f0\u30ad\u30e3\u30d7\u30c1\u30e3\u5b9f\u88c5\u65b9\u6cd5\u306b\u3064\u3044\u3066\u3001Swift\u306e\u52c9\u5f37\u3064\u3044\u3067\u306b\u66f8\u3044\u3066\u307f\u305f\u3002\n\u69cb\u9020\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u3053\u3061\u3089\u3082\u8abf\u3079\u3066\u30e1\u30e2\u3002\n\n\u53c2\u8003\n\n- [Core Audio Overview](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40003577-CH1-SW1)\n- [Technical Note TN2091 Device input using the HAL Output Audio Unit](https://developer.apple.com/library/mac/technotes/tn2091/_index.html#//apple_ref/doc/uid/DTS10003118-CH1-PARTTWO)\n- [http://stackoverflow.com/questions/24838106/using-audiobufferlist-with-swift](http://stackoverflow.com/questions/24838106/using-audiobufferlist-with-swift)\n\n#Core Audio\niOS\u3001OS X\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u30aa\u30fc\u30c7\u30a3\u30aa\u3092\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u7dcf\u79f0\n\u9332\u97f3\u3084\u97f3\u58f0\u306b\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u304b\u3051\u308b\u306a\u3069\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u64cd\u4f5c\u306b\u95a2\u3059\u308b API \u304c\u5185\u5305\u3055\u308c\u3066\u3044\u308b\u3002\n\u5177\u4f53\u7684\u306aAPI\u306fObjective-C\u3001C\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\n\n##Core Audio \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3##\n###OS X Core Audio\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3###\n- OS X\u3067\u306fHAL(Hardware Abstraction Layer)\u3092\u901a\u3058\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30d0\u30a4\u30b9\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u3002\n![alt](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/Art/core_audio_architecture_2x.png)\n\n\n###iOS Core Audio \u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3###\n- iOS Core Audio\u306fOS X Core Audio\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u7248\n- iOS\u306e\u5834\u5408\u306fMIDI\u3092\u6271\u3046\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u304c\u306a\u3044\n- \u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30ec\u30a4\u30e4\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304cAudio Session\u304b\u3089\u306b\u9650\u5b9a\n![alt](https://developer.apple.com/library/mac/documentation/MusicAudio/Conceptual/CoreAudioOverview/Art/iphone_os_audio_architecture_2x.png)\n\n##\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u62bd\u8c61\u5316##\n\u30b3\u30fc\u30c9\u3067\u76f4\u63a5HAL\u3068\u3084\u308a\u3068\u308a\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\nAUHAL\u30e6\u30cb\u30c3\u30c8(OS X)\u304a\u3088\u3073AURemoteIO\u30e6\u30cb\u30c3\u30c8(iOS)\u3068\u547c\u3070\u308c\u308b\u7279\u6b8a\u306a\u30aa\u30fc\u30c7\u30a3\u30aa\u30e6\u30cb\u30c3\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u3089\u3092\u7d4c\u7531\u3057\u3066\u30aa\u30fc\u30c7\u30a3\u30aa\u30c7\u30fc\u30bf\u3092\u4ed6\u306e\u30aa\u30fc\u30c7\u30a3\u30aa\u30e6\u30cb\u30c3\u30c8\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u5b9f\u969b\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u3068\u306e\u3084\u308a\u3068\u308a\u306fI/OKit\u304c\u30c9\u30e9\u30a4\u30d0\u30fc\u3068\u30a2\u30af\u30bb\u30b9\u3057\u3066\u5b9f\u884c\u3055\u308c\u308b\u3002OS X\u3067\u306f\u3053\u308c\u3089\u306e\u63a5\u7d9a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066AUHAL\u30e6\u30cb\u30c3\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\nAudioHardware.h\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n#\u30d7\u30ed\u30b0\u30e9\u30e0#\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30de\u30a4\u30af\u306e\u97f3\u58f0\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n##main.swift##\n```swift\nlang:main.swift\n\nimport Foundation\n\nlet micInput = MicInput.sharedInstance\nmicInput.setUpAudioDevice()\n\nmicInput.startAudio()\n\n// Enter\u3067\u7d42\u4e86\ngetchar()\n\nmicInput.stopAudio()\n\n```\n##MicInput.swift##\n```swift\nlang:MicInput.swift\n\nimport Foundation\nimport CoreAudio\nimport AudioUnit\n\nclass MicInput {\n\n    class var sharedInstance: MicInput\n    {\n        struct Static\n        {\n            static let instance : MicInput = MicInput()\n        }\n        return Static.instance\n    }\n    \n    var inputUnit = AudioUnit()\n    \n    let inputProc : AURenderCallback = { (\n        inRefCon: UnsafeMutablePointer<Void>,\n        ioActionFlags: UnsafeMutablePointer<AudioUnitRenderActionFlags>,\n        inTimeStamp: UnsafePointer<AudioTimeStamp>,\n        inBufNumber: UInt32,\n        inNumberFrames: UInt32,\n        ioData: UnsafeMutablePointer<AudioBufferList>) -> OSStatus in\n        \n        var err :OSStatus? = nil\n        \n        let buffer = MicInput.sharedInstance.allocateAudioBuffer(2 ,size: inNumberFrames)\n        var bufferList = AudioBufferList.init(mNumberBuffers: 1, mBuffers: buffer)\n        \n        err = AudioUnitRender(MicInput.sharedInstance.inputUnit, ioActionFlags, inTimeStamp, inBufNumber, inNumberFrames, &bufferList)\n        \n        if err == noErr\n        {\n            let data=UnsafePointer<Int16>(bufferList.mBuffers.mData)\n        \n            let dataArray = UnsafeBufferPointer<Int16>(start:data, count: Int(bufferList.mBuffers.mDataByteSize)/sizeof(Int16))\n\n            for i in 0...dataArray.count-1\n            {\n                print(dataArray[i])\n            }\n        }\n        return err!\n    }\n    \n    func allocateAudioBuffer(let numChannel: UInt32, let size: UInt32) -> AudioBuffer\n    {\n        let dataSize = UInt32(numChannel * UInt32(sizeof(Float64)) * size)\n        let data = malloc(Int(dataSize))\n        let buffer = AudioBuffer.init(mNumberChannels: numChannel, mDataByteSize: dataSize, mData: data)\n        \n        return buffer\n    }\n    \n    private func setUpAudioHAL() -> OSStatus\n    {\n        // AudioUnit\u3092\u4f5c\u6210\u3059\u308b\n        var desc = AudioComponentDescription()\n        var comp:AudioComponent?\n        \n        desc.componentType = kAudioUnitType_Output\n        desc.componentSubType = kAudioUnitSubType_HALOutput\n        \n        desc.componentManufacturer = kAudioUnitManufacturer_Apple\n        desc.componentFlags = 0\n        desc.componentFlagsMask = 0\n        \n        comp = AudioComponentFindNext(nil, &desc)\n        if comp == nil\n        {\n            return -1\n        }\n        \n        let err = AudioComponentInstanceNew(comp!, &self.inputUnit)\n        return err\n    }\n    \n    private func setUpEnableIO() -> OSStatus\n    {\n        // AudioUnit\u306e\u5165\u529b\u3092\u6709\u52b9\u5316\u3001\u51fa\u529b\u3092\u7121\u52b9\u5316\u3059\u308b\u3002\n        // \u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u51fa\u529b\u6709\u52b9\u8a2d\u5b9a\n        var enableIO: UInt32 = 1\n        var disableIO: UInt32 = 0\n        var err: OSStatus?\n        \n        err = AudioUnitSetProperty(self.inputUnit, kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Input, 1, &enableIO, UInt32(sizeof(UInt32)))\n        \n        if err == noErr\n        {\n            err = AudioUnitSetProperty(self.inputUnit, kAudioOutputUnitProperty_EnableIO, kAudioUnitScope_Output, 0, &disableIO, UInt32(sizeof(UInt32)))\n        }\n        \n        return err!\n    }\n    \n    private func setUpMicInput() -> OSStatus\n    {\n        // \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u8a2d\u5b9a\n        \n        var inputDeviceId = AudioDeviceID()\n        var address =  AudioObjectPropertyAddress(mSelector: kAudioHardwarePropertyDefaultInputDevice, mScope: kAudioObjectPropertyScopeGlobal, mElement: kAudioObjectPropertyElementMaster)\n        var size = UInt32(sizeof(AudioDeviceID))\n        \n        var err = AudioObjectGetPropertyData(UInt32(kAudioObjectSystemObject), &address, 0, nil, &size, &inputDeviceId)\n        // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3092\u53d6\u5f97\n        \n        if err == noErr\n        {\n            err = AudioUnitSetProperty(self.inputUnit, kAudioOutputUnitProperty_CurrentDevice, kAudioUnitScope_Global, 0, &inputDeviceId, size)\n            // AudioUnit\u306b\u30c7\u30d0\u30a4\u30b9\u3092\u8a2d\u5b9a\n        }\n        \n        // \u78ba\u8a8d\u7528\n        print(\"DeviceName:\",self.deviceName(inputDeviceId))\n        print(\"BufferSize:\",self.bufferSize(inputDeviceId))\n        \n        return err\n    }\n    \n    private func deviceName(let devID: AudioDeviceID) -> String\n    {\n        // \u540d\u524d\u78ba\u8a8d\n        var address =  AudioObjectPropertyAddress(mSelector: kAudioObjectPropertyName, mScope: kAudioObjectPropertyScopeGlobal, mElement: kAudioObjectPropertyElementMaster)\n        var name: CFStringRef?\n        var stringsize = UInt32(sizeof(CFStringRef))\n        \n        AudioObjectGetPropertyData(devID, &address, 0, nil, &stringsize, &name)\n        \n        let string = String(name)\n        return string\n        \n    }\n    \n    private func bufferSize(let devID: AudioDeviceID) -> UInt32\n    {\n        // \u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u78ba\u8a8d\n        var address =  AudioObjectPropertyAddress(mSelector: kAudioDevicePropertyBufferFrameSize, mScope: kAudioObjectPropertyScopeGlobal, mElement: kAudioObjectPropertyElementMaster)\n        var buf: UInt32 = 0\n        var bufSize = UInt32(sizeof(UInt32))\n        \n        AudioObjectGetPropertyData(devID, &address, 0, nil, &bufSize, &buf)\n        \n        return buf\n    }\n    \n    private func setUpInputFormat() -> OSStatus\n    {\n        // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u3084\u30c7\u30fc\u30bf\u30d3\u30c3\u30c8\u6570\u3001\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306a\u3069\u3092\u8a2d\u5b9a\n        var audioFormat = AudioStreamBasicDescription()\n        audioFormat.mBitsPerChannel = 16\n        audioFormat.mBytesPerFrame = 4\n        audioFormat.mBytesPerPacket = 4\n        audioFormat.mChannelsPerFrame = 2\n        audioFormat.mFormatFlags = kAudioFormatFlagIsSignedInteger | kAudioFormatFlagIsPacked\n        audioFormat.mFormatID = kAudioFormatLinearPCM\n        audioFormat.mFramesPerPacket = 1\n        audioFormat.mSampleRate = 44100.00\n        \n        let size = UInt32(sizeof(AudioStreamBasicDescription))\n        let err = AudioUnitSetProperty(self.inputUnit, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Output, 1, &audioFormat, size)\n        \n        return err\n    }\n    \n    private func setUpCallback() -> OSStatus\n    {\n        // \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u7528\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u8a2d\u5b9a\n        var input = AURenderCallbackStruct(inputProc: self.inputProc, inputProcRefCon: nil)\n        \n        let size = UInt32(sizeof(AURenderCallbackStruct))\n        let err = AudioUnitSetProperty(self.inputUnit, kAudioOutputUnitProperty_SetInputCallback, kAudioUnitScope_Global, 0, &input, size)\n        \n        return err\n    }\n    \n    func setUpAudioDevice()\n    {\n        if self.setUpAudioHAL() != noErr\n        {\n            exit(-1)\n        }\n        \n        if self.setUpEnableIO() != noErr\n        {\n            exit(-1)\n        }\n        \n        if self.setUpMicInput() != noErr\n        {\n            exit(-1)\n        }\n        \n        if self.setUpInputFormat() != noErr\n        {\n            exit(-1)\n        }\n        \n        if self.setUpCallback() != noErr\n        {\n            exit(-1)\n        }\n        \n        if AudioUnitInitialize(self.inputUnit) != noErr\n        {\n            exit(-1)\n        }\n    }\n    \n    func startAudio()\n    {\n        if AudioOutputUnitStart(self.inputUnit) != noErr\n        {\n            exit(-1)\n        }\n    }\n    \n    func stopAudio()\n    {\n        if AudioOutputUnitStop(self.inputUnit) != noErr\n        {\n            exit(-1)\n        }\n    }\n}\n\n```\n\n#\u307e\u3068\u3081#\n\u30fb\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u3078\u306e\u610f\u8b58\u3092\u307e\u3063\u305f\u304f\u305b\u305a\u306b\u5b9f\u88c5\u3067\u304d\u305f\u306e\u306f\u697d\u3060\u3063\u305f\u3002\n\u30fb\u6700\u521d\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306e\u5f15\u6570\u3067\u3042\u308b \"ioDate\" \u304b\u3089\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u305f\u30c7\u30fc\u30bf\u3092\u5f15\u3063\u5f35\u308c\u308b\u3068\u601d\u3044\u3053\u3093\u3067\u3044\u3066\u5c11\u3057\u30cf\u30de\u3063\u305f\u3002\u3002\u3002AudioRenderCallback()\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u30c7\u30fc\u30bf\u3092\u5f15\u3063\u5f35\u3063\u3066\u304f\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u3002[Audio Unit Hosting Fundamentals](https://developer.apple.com/library/ios/documentation/MusicAudio/Conceptual/AudioUnitHostingGuide_iOS/AudioUnitHostingFundamentals/AudioUnitHostingFundamentals.html#//apple_ref/doc/uid/TP40009492-CH3-SW7)\n"}