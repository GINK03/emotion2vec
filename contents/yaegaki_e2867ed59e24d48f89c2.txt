{"tags": ["Unity", "C#", "UniRx"], "context": " More than 1 year has passed since last update.UniRx\u3092\u4f7f\u7528\u3059\u308b\u3068\u30c9\u30e9\u30c3\u30b0\u51e6\u7406\u306a\u3069\u306f\u3059\u3054\u304f\u7c21\u5358\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3042\u308b\u4e00\u5b9a\u4ee5\u4e0a\u30de\u30a6\u30b9\u304c\u52d5\u3044\u3066\u3044\u306a\u3044\u3068\u5024\u3092\u6d41\u3055\u306a\u3044\u3088\u3046\u306a\u51e6\u7406\u306f\u7c21\u5358\u306b\u306f\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u3001\u6700\u7d42\u7684\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u306b\u843d\u3061\u7740\u304d\u307e\u3057\u305f\u3002\n\n\u8ffd\u8a18(2015/02/25)\n\u5c11\u3057\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u306a\u3044\u90e8\u5206\u304c\u3042\u3063\u305f\u306e\u3067\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u6bce\u56dedragStream\u3092\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u8ffd\u8a18(2015/03/04)\nScan\u306e\u90e8\u5206\u3092\u4fee\u6b63\npublic override void Awake()\n{\n        var threshold = .5f;\n        var mouseDownStream = this.UpdateAsObservable()\n            .Where(_ => Input.GetMouseButtonDown(0));\n\n        var mouseUpStream = this.UpdateAsObservable()\n            .Where(_ => Input.GetMouseButtonUp(0));\n\n        var mouseStream = this.UpdateAsObservable()\n            .Where(_ => Input.GetMouseButton(0));\n\n        Func<IObservable<Vector3>> createDragStream = () =>\n        {\n            return mouseStream\n            .TakeUntil(mouseUpStream)\n            .Select(_ => Camera.main.ScreenToWorldPoint(Input.mousePosition))\n            .Scan((prev, current) =>\n            {\n                return Vector3.Distance(prev, current) < threshold ? prev : current;\n            })\n            .DistinctUntilChanged();\n        };\n\n        mouseDownStream.Subscribe(_ =>\n        {\n            createDragStream().Subscribe(position =>\n            {\n                Debug.Log(position);\n            });\n        });\n\n    base.Awake();\n}\n\nUniRx\u3092\u4f7f\u7528\u3059\u308b\u3068\u30c9\u30e9\u30c3\u30b0\u51e6\u7406\u306a\u3069\u306f\u3059\u3054\u304f\u7c21\u5358\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3042\u308b\u4e00\u5b9a\u4ee5\u4e0a\u30de\u30a6\u30b9\u304c\u52d5\u3044\u3066\u3044\u306a\u3044\u3068\u5024\u3092\u6d41\u3055\u306a\u3044\u3088\u3046\u306a\u51e6\u7406\u306f\u7c21\u5358\u306b\u306f\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u3001\u6700\u7d42\u7684\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f62\u306b\u843d\u3061\u7740\u304d\u307e\u3057\u305f\u3002\n\n### \u8ffd\u8a18(2015/02/25)\n\u5c11\u3057\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u306a\u3044\u90e8\u5206\u304c\u3042\u3063\u305f\u306e\u3067\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u6bce\u56de`dragStream`\u3092\u4f5c\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n### \u8ffd\u8a18(2015/03/04)\n`Scan`\u306e\u90e8\u5206\u3092\u4fee\u6b63\n\n```csharp\npublic override void Awake()\n{\n        var threshold = .5f;\n        var mouseDownStream = this.UpdateAsObservable()\n            .Where(_ => Input.GetMouseButtonDown(0));\n\n        var mouseUpStream = this.UpdateAsObservable()\n            .Where(_ => Input.GetMouseButtonUp(0));\n\n        var mouseStream = this.UpdateAsObservable()\n            .Where(_ => Input.GetMouseButton(0));\n\n        Func<IObservable<Vector3>> createDragStream = () =>\n        {\n            return mouseStream\n\t\t    .TakeUntil(mouseUpStream)\n\t\t    .Select(_ => Camera.main.ScreenToWorldPoint(Input.mousePosition))\n\t\t    .Scan((prev, current) =>\n\t\t    {\n\t\t        return Vector3.Distance(prev, current) < threshold ? prev : current;\n\t\t    })\n\t\t    .DistinctUntilChanged();\n        };\n\n        mouseDownStream.Subscribe(_ =>\n        {\n            createDragStream().Subscribe(position =>\n            {\n                Debug.Log(position);\n            });\n        });\n\n    base.Awake();\n}\n```\n"}