{"context": "(\u76ee\u6b21\u306f\u3053\u3061\u3089)\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u8a18\u4e8b \u3067\u306f\u3001\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4e8b\u59cb\u3081\u3068\u3057\u3066\u3001\u7573\u307f\u8fbc\u307f\u5c64\u306e\u30d5\u30a3\u30eb\u30bf\uff08\u7dda\u5f62\u5909\u63db\u306e\u91cd\u307f\uff09\u3092\u56fa\u5b9a\u3057\u305f\u3082\u306e\u3092\u5229\u7528\u3057\u305f\u3002\u4eca\u56de\u3082\u3001\u30d5\u30a3\u30eb\u30bf\u3092\u56fa\u5b9a\u3057\u305f\u307e\u307e\u3001\u5c11\u3057\u30e2\u30c7\u30eb\u3092\u62e1\u5f35\u3057\u3066\u307f\u308b\u3002\n\n\u62e1\u5f35\uff1a\u5168\u7d50\u5408\u5c64\u306e\u8ffd\u52a0\n\u591a\u9805\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306b\u62e1\u5f35\u3057\u305f\u6642\u3068\u540c\u69d8\u306b\u3001\u5168\u7d50\u5408\u5c64\uff08fully-connected layer\uff09\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\u3002\n\u8ffd\u52a0\u3059\u308b\u5834\u6240\u306f\u3001\u4ee5\u524d\u3068\u540c\u69d8\u306b\u51fa\u529b\u5c64\u306e\u524d\u306b\u3002\n\n\n\u30b3\u30fc\u30c9\nmnist_fixed_cnn_fc\n\nmnist_fixed_cnn.py\nfrom helper import *\n\nIMAGE_WIDTH = 28\nIMAGE_HEIGHT = 28\nIMAGE_SIZE = IMAGE_WIDTH * IMAGE_HEIGHT\nCATEGORY_NUM = 10\nLEARNING_RATE = 0.1\nFILTER_NUM = 2\nBIAS_CONV = -0.1\nFEATURE_DIM = 100\nTRAINING_LOOP = 20000\nBATCH_SIZE = 100\nSUMMARY_DIR = 'log_fixed_cnn_fc'\nSUMMARY_INTERVAL = 100\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nwith tf.Graph().as_default():\n    with tf.name_scope('input'):\n        y_ = tf.placeholder(tf.float32, [None, CATEGORY_NUM], name='labels')\n        x = tf.placeholder(tf.float32, [None, IMAGE_SIZE], name='input_images')\n\n    with tf.name_scope('convolution'):\n        W_conv = prewitt_filter()\n        b_conv = tf.constant([BIAS_CONV] * FILTER_NUM, dtype = tf.float32, name='bias_conv')\n        x_image = tf.reshape(x, [-1, IMAGE_WIDTH, IMAGE_HEIGHT, 1])\n        h_conv = tf.nn.relu(tf.abs(conv2d(x_image, W_conv)) + b_conv)\n\n    with tf.name_scope('fully-connected'):\n        W_fc = weight_variable([IMAGE_SIZE * FILTER_NUM, FEATURE_DIM], name='weight_fc')\n        b_fc = bias_variable([FEATURE_DIM], name='bias_fc')\n        h_conv_flat = tf.reshape(h_conv, [-1, IMAGE_SIZE * FILTER_NUM])\n        h_fc = tf.nn.relu(tf.matmul(h_conv_flat, W_fc) + b_fc)\n\n    with tf.name_scope('readout'):\n        W = weight_variable([FEATURE_DIM, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_fc, W) + b)\n\n    with tf.name_scope('optimize'):\n        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n        train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy)\n\n    with tf.Session() as sess:\n        train_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/train', sess.graph)\n        test_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/test', sess.graph)\n\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        train_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n        test_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n\n        sess.run(tf.initialize_all_variables())\n        for i in range(TRAINING_LOOP + 1):\n            batch = mnist.train.next_batch(BATCH_SIZE)\n            sess.run(train_step, {x: batch[0], y_: batch[1]})\n\n            if i % SUMMARY_INTERVAL == 0:\n                print('step %d' % i)\n                summary = sess.run(tf.merge_summary([train_accuracy_summary]), {x: batch[0], y_: batch[1]})\n                train_writer.add_summary(summary, i)\n                summary = sess.run(tf.merge_summary([test_accuracy_summary]), {x: mnist.test.images, y_: mnist.test.labels})\n                test_writer.add_summary(summary, i)\n\n\n\n\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n\u5909\u66f4\u304c\u5165\u3063\u305f\u90e8\u5206\u3092\u3002\n\n\u5168\u7d50\u5408\u5c64\n\u8ffd\u52a0\u3055\u308c\u305f\u5c64\u3002reshape()\u304c\u5165\u3063\u3066\u3044\u308b\u3051\u3069\u3001\u57fa\u672c\u7684\u306b\u306f\u3001\u591a\u9805\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u3092\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u306b\u62e1\u5f35\u3057\u305f\u6642\u3068\u540c\u3058\u3002\n    with tf.name_scope('fully-connected'):\n        W_fc = weight_variable([IMAGE_SIZE * FILTER_NUM, FEATURE_DIM], name='weight_fc')\n        b_fc = bias_variable([FEATURE_DIM], name='bias_fc')\n        h_conv_flat = tf.reshape(h_conv, [-1, IMAGE_SIZE * FILTER_NUM])\n        h_fc = tf.nn.relu(tf.matmul(h_conv_flat, W_fc) + b_fc)\n\n\n\u51fa\u529b\u5c64\n\u5168\u7d50\u5408\u5c64\u3067reshape()\u3059\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u4e0d\u8981\u306b\u306a\u3063\u305f\u3002\n    with tf.name_scope('readout'):\n        W = weight_variable([FEATURE_DIM, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_fc, W) + b)\n\n\n\u7d50\u679c\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff08\u9752\u7dda\uff09\u3067\u306e\u8b58\u5225\u7387\u306f\u300197.8%\u7a0b\u5ea6\u3002\n\u5168\u7d50\u5408\u5c64\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u300196.8%\u304b\u308997.8%\u3078\u6539\u5584\u3057\u3066\u3001\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3068\u306a\u3089\u3093\u3060\u3002\n\u7d50\u5c40\u3001\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3068\u4e26\u3093\u3060\u3060\u3051\u3067\u3001\u7573\u307f\u8fbc\u307f\u5c64\u306e\u610f\u5473\u304c\u7121\u3044\u306e\u3067\u306f\uff1f\uff1f\u3068\u611f\u3058\u308b\u3051\u3069\u3001\u52dd\u624b\u306bPrewitt filter\u5165\u308c\u3066\u3082\u3001\u8b58\u5225\u7387\u304c\u4e0b\u304c\u3063\u3066\u3044\u306a\u3044\u306e\u304c\u3044\u3044\u3002\u30a8\u30c3\u30b8\u62bd\u51fa\u304c\u60aa\u3055\u3092\u3057\u306a\u304b\u3063\u305f\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u3002\n\n\n\u3042\u3068\u304c\u304d\n\u4eca\u56de\u306f\u3001\u5358\u7d14\u306a\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306b\u5168\u7d50\u5408\u5c64\u3092\u8ffd\u52a0\u3057\u3066\u3001\u3061\u3087\u3063\u3068\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3063\u307d\u304f\u306a\u308a\u307e\u3057\u305f\u3002\u6b21\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u3053\u308c\u3092\u307e\u305f\u3055\u3089\u306b\u5c11\u3057\u62e1\u5f35\u3057\u3066\u307f\u3088\u3046\u304b\u3068\u3002\n([\u76ee\u6b21\u306f\u3053\u3061\u3089](http://qiita.com/kumonkumon/items/6fd05963df92e9eec8c0))\n\n#\u306f\u3058\u3081\u306b\n[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/ebeff45afc5743bb99d9) \u3067\u306f\u3001\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u4e8b\u59cb\u3081\u3068\u3057\u3066\u3001\u7573\u307f\u8fbc\u307f\u5c64\u306e\u30d5\u30a3\u30eb\u30bf\uff08\u7dda\u5f62\u5909\u63db\u306e\u91cd\u307f\uff09\u3092\u56fa\u5b9a\u3057\u305f\u3082\u306e\u3092\u5229\u7528\u3057\u305f\u3002\u4eca\u56de\u3082\u3001\u30d5\u30a3\u30eb\u30bf\u3092\u56fa\u5b9a\u3057\u305f\u307e\u307e\u3001\u5c11\u3057\u30e2\u30c7\u30eb\u3092\u62e1\u5f35\u3057\u3066\u307f\u308b\u3002\n\n#\u62e1\u5f35\uff1a\u5168\u7d50\u5408\u5c64\u306e\u8ffd\u52a0\n[\u591a\u9805\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30](http://qiita.com/kumonkumon/items/2a659075d55b7b49df5a)\u3092[\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3](http://qiita.com/kumonkumon/items/15dbdb291f3525a3b95b)\u306b\u62e1\u5f35\u3057\u305f\u6642\u3068\u540c\u69d8\u306b\u3001\u5168\u7d50\u5408\u5c64\uff08fully-connected layer\uff09\u3092\u8ffd\u52a0\u3057\u3066\u307f\u308b\u3002\n\n\u8ffd\u52a0\u3059\u308b\u5834\u6240\u306f\u3001\u4ee5\u524d\u3068\u540c\u69d8\u306b\u51fa\u529b\u5c64\u306e\u524d\u306b\u3002\n![mnist_fixed_cnn_fc](https://qiita-image-store.s3.amazonaws.com/0/127038/f3c5a02a-ddb3-9768-4f45-e5507e1a5a0a.png)\n\n##\u30b3\u30fc\u30c9\n[mnist_fixed_cnn_fc](https://github.com/kumon/DeepLearningExercise/blob/master/src/tensorflow/mnist_fixed_cnn_fc.py)\n\n```py:mnist_fixed_cnn.py\nfrom helper import *\n\nIMAGE_WIDTH = 28\nIMAGE_HEIGHT = 28\nIMAGE_SIZE = IMAGE_WIDTH * IMAGE_HEIGHT\nCATEGORY_NUM = 10\nLEARNING_RATE = 0.1\nFILTER_NUM = 2\nBIAS_CONV = -0.1\nFEATURE_DIM = 100\nTRAINING_LOOP = 20000\nBATCH_SIZE = 100\nSUMMARY_DIR = 'log_fixed_cnn_fc'\nSUMMARY_INTERVAL = 100\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nwith tf.Graph().as_default():\n    with tf.name_scope('input'):\n        y_ = tf.placeholder(tf.float32, [None, CATEGORY_NUM], name='labels')\n        x = tf.placeholder(tf.float32, [None, IMAGE_SIZE], name='input_images')\n\n    with tf.name_scope('convolution'):\n        W_conv = prewitt_filter()\n        b_conv = tf.constant([BIAS_CONV] * FILTER_NUM, dtype = tf.float32, name='bias_conv')\n        x_image = tf.reshape(x, [-1, IMAGE_WIDTH, IMAGE_HEIGHT, 1])\n        h_conv = tf.nn.relu(tf.abs(conv2d(x_image, W_conv)) + b_conv)\n\n    with tf.name_scope('fully-connected'):\n        W_fc = weight_variable([IMAGE_SIZE * FILTER_NUM, FEATURE_DIM], name='weight_fc')\n        b_fc = bias_variable([FEATURE_DIM], name='bias_fc')\n        h_conv_flat = tf.reshape(h_conv, [-1, IMAGE_SIZE * FILTER_NUM])\n        h_fc = tf.nn.relu(tf.matmul(h_conv_flat, W_fc) + b_fc)\n\n    with tf.name_scope('readout'):\n        W = weight_variable([FEATURE_DIM, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_fc, W) + b)\n\n    with tf.name_scope('optimize'):\n        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n        train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy)\n\n    with tf.Session() as sess:\n        train_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/train', sess.graph)\n        test_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/test', sess.graph)\n\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        train_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n        test_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n\n        sess.run(tf.initialize_all_variables())\n        for i in range(TRAINING_LOOP + 1):\n            batch = mnist.train.next_batch(BATCH_SIZE)\n            sess.run(train_step, {x: batch[0], y_: batch[1]})\n\n            if i % SUMMARY_INTERVAL == 0:\n                print('step %d' % i)\n                summary = sess.run(tf.merge_summary([train_accuracy_summary]), {x: batch[0], y_: batch[1]})\n                train_writer.add_summary(summary, i)\n                summary = sess.run(tf.merge_summary([test_accuracy_summary]), {x: mnist.test.images, y_: mnist.test.labels})\n                test_writer.add_summary(summary, i)\n```\n\n##\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n\u5909\u66f4\u304c\u5165\u3063\u305f\u90e8\u5206\u3092\u3002\n\n###\u5168\u7d50\u5408\u5c64\n\u8ffd\u52a0\u3055\u308c\u305f\u5c64\u3002`reshape()`\u304c\u5165\u3063\u3066\u3044\u308b\u3051\u3069\u3001\u57fa\u672c\u7684\u306b\u306f\u3001[\u591a\u9805\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30](http://qiita.com/kumonkumon/items/2a659075d55b7b49df5a)\u3092[\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3](http://qiita.com/kumonkumon/items/15dbdb291f3525a3b95b)\u306b\u62e1\u5f35\u3057\u305f\u6642\u3068\u540c\u3058\u3002\n\n```py\n    with tf.name_scope('fully-connected'):\n        W_fc = weight_variable([IMAGE_SIZE * FILTER_NUM, FEATURE_DIM], name='weight_fc')\n        b_fc = bias_variable([FEATURE_DIM], name='bias_fc')\n        h_conv_flat = tf.reshape(h_conv, [-1, IMAGE_SIZE * FILTER_NUM])\n        h_fc = tf.nn.relu(tf.matmul(h_conv_flat, W_fc) + b_fc)\n```\n\n###\u51fa\u529b\u5c64\n\u5168\u7d50\u5408\u5c64\u3067`reshape()`\u3059\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u4e0d\u8981\u306b\u306a\u3063\u305f\u3002\n\n```py\n    with tf.name_scope('readout'):\n        W = weight_variable([FEATURE_DIM, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_fc, W) + b)\n```\n\n##\u7d50\u679c\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff08\u9752\u7dda\uff09\u3067\u306e\u8b58\u5225\u7387\u306f\u300197.8%\u7a0b\u5ea6\u3002\n\u5168\u7d50\u5408\u5c64\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u300196.8%\u304b\u308997.8%\u3078\u6539\u5584\u3057\u3066\u3001\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3068\u306a\u3089\u3093\u3060\u3002\n\n\u7d50\u5c40\u3001\u591a\u5c64\u30d1\u30fc\u30bb\u30d7\u30c8\u30ed\u30f3\u3068\u4e26\u3093\u3060\u3060\u3051\u3067\u3001\u7573\u307f\u8fbc\u307f\u5c64\u306e\u610f\u5473\u304c\u7121\u3044\u306e\u3067\u306f\uff1f\uff1f\u3068\u611f\u3058\u308b\u3051\u3069\u3001\u52dd\u624b\u306bPrewitt filter\u5165\u308c\u3066\u3082\u3001\u8b58\u5225\u7387\u304c\u4e0b\u304c\u3063\u3066\u3044\u306a\u3044\u306e\u304c\u3044\u3044\u3002\u30a8\u30c3\u30b8\u62bd\u51fa\u304c\u60aa\u3055\u3092\u3057\u306a\u304b\u3063\u305f\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u3002\n\n![result mnist_fixed_cnn_fc](https://qiita-image-store.s3.amazonaws.com/0/127038/6598dc27-10bf-9838-6488-55e4487c26c4.png)\n\n#\u3042\u3068\u304c\u304d\n\u4eca\u56de\u306f\u3001\u5358\u7d14\u306a\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306b\u5168\u7d50\u5408\u5c64\u3092\u8ffd\u52a0\u3057\u3066\u3001\u3061\u3087\u3063\u3068\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3063\u307d\u304f\u306a\u308a\u307e\u3057\u305f\u3002[\u6b21\u56de\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/974cb3e0f0a346c7ff1b)\u3067\u306f\u3001\u3053\u308c\u3092\u307e\u305f\u3055\u3089\u306b\u5c11\u3057\u62e1\u5f35\u3057\u3066\u307f\u3088\u3046\u304b\u3068\u3002\n", "tags": ["TensorFlow", "DeepLearning", "CNN", "ConvolutionalNeuralNetworks", "\u6df1\u5c64\u5b66\u7fd2"]}