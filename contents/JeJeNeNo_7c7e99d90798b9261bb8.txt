{"context": "\n\n\u80cc\u666f\n\u591a\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u3057\u3066Java\u3067\u64cd\u4f5c\u304c\u5fc5\u8981\u306a\u6642\u306b\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u306efind\u30b3\u30de\u30f3\u30c9\u306a\u3069\u3067\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u304b\u3089Java\u306b\u8aad\u307f\u8fbc\u3080\u3088\u308a\u3082\u3001Java\u3067\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u306e\u90e8\u5206\u3082\u5b9f\u88c5\u3057\u305f\u307b\u3046\u304c\u3001\u51e6\u7406\u304c\u4e00\u8cab\u3057\u3066\u7c21\u5358\u306a\u306e\u3067\u3053\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3002\n\n\u30b3\u30fc\u30c9\u306e\u6982\u8981\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u3068\u62e1\u5f35\u5b50\u3092\u5f15\u6570\u3068\u3057\u3066\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u305d\u308c\u3088\u308a\u4e0b\u5c64\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u63a2\u7d22\u3057\u3001\u6307\u5b9a\u3057\u305f\u62e1\u5f35\u5b50\u306e\u30d5\u30a1\u30a4\u30eb\u3092ArrayList\u306b\u4fdd\u5b58\u3059\u308b\u3002\u3053\u3053\u3067\u306fiTunes\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308bm4a\u30d5\u30a1\u30a4\u30eb\u3092\u63a2\u3057\u3066\u3001\u30ea\u30b9\u30c8\u306b\u4fdd\u5b58\u3059\u308b\u3002\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u306fJava8\u3067\u65b0\u3057\u304f\u5c0e\u5165\u3055\u308c\u305f\u30e9\u30e0\u30c0\u5f0f(Lambda Expressions)\u3068\u30b9\u30c8\u30ea\u30fc\u30e0(Stream)\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u30e9\u30e0\u30c0\u5f0f\u3068\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u30b3\u30fc\u30c9\u306f\u4e0b\u3092\u53c2\u7167\u3002\uff08Java8\u3088\u308a\u53e4\u3044Java\u3067\u3082\u52d5\u304f\u304b\u3082\u3002\u3002\uff09\n\nJava 8\u4ee5\u964d\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.regex.Pattern;\nimport java.util.ArrayList;\nimport java.util.stream.Stream;\n\npublic class Utils {\n    public static void main(String[] args) throws IOException {\n        // To list up m4a files in iTunes directory\n        Path baseDir = Paths.get(System.getProperty(\"user.home\"), \"Music\", \"iTunes\");\n        String extension  = \"m4a\";\n\n        // for standard inputs\n        if (args.length == 2) {\n            baseDir = Paths.get(args[0]);\n            extension   = args[1];\n        } else if (args.length != 0){\n            System.err.println(\"Error: set correct args.\");\n        }\n\n        if (!Pattern.matches(\"^[0-9a-zA-Z]+$\", extension)) {\n            System.err.println(\"Error: set correct extension. (only alphabet and numeric)\");\n        } else {\n            ArrayList<File> fileList = listUpFiles(baseDir, extension);\n            for (File file : fileList) {\n                System.out.println(file.getAbsolutePath());\n            }\n            System.out.println(fileList.size());    \n        }\n    }\n\n    /**\n     * list up files with specified file extension (extension)\n     * under the specified directory (baseDir) recursively.\n     * @param baseDir   : base directory\n     * @param extension : string needs to be contained as file extension\n     * @return          : list of files\n     */\n     public static ArrayList<File> listUpFiles(Path baseDir, String extension){\n        String extensionPattern = \".\" + extension.toLowerCase();\n        final ArrayList<File> fileList = new ArrayList();\n\n        try (final Stream<Path> pathStream = Files.walk(baseDir)) {\n            pathStream\n                    .map(path -> path.toFile())\n                    .filter(file -> !file.isDirectory())\n                    .filter(file -> file.getName().toLowerCase().endsWith(extensionPattern))\n                    .forEach(fileList::add);\n        } catch (final IOException e) {\n            e.printStackTrace();\n        }\n        return (fileList);\n    }\n}\n\n\n\u30e9\u30e0\u30c0\u5f0f\u3068\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u30b3\u30fc\u30c9\nimport java.io.File;\nimport java.util.regex.Pattern;\nimport java.util.ArrayList;\n\npublic class UtilsOld {\n\n    public static void main(String[] args) {\n        // To list up m4a files in iTunes directory\n        String baseDirName = System.getProperty(\"user.home\") + java.io.File.separator +\n                             \"Music\" + java.io.File.separator + \"iTunes\";\n        String extension  = \"m4a\";\n\n        // for standard input\n        if (args.length == 2) {\n            baseDirName = args[0];\n            extension   = args[1];\n        } else if (args.length != 0){\n            System.err.println(\"Error: set correct args.\");\n        }\n\n        if (!Pattern.matches(\"^[0-9a-zA-Z]+$\", extension)) {\n            System.err.println(\"Error: set correct extension. (only alphabet and numeric)\");\n        } else {\n            String extensionPattern = \".\" + extension.toLowerCase();\n\n            ArrayList<File> fileList = new ArrayList();\n            fileList = listUpFiles(baseDirName, extensionPattern, fileList);\n\n            for (File file : fileList) {\n                System.out.println(file.getAbsolutePath());\n            }\n            System.out.println(fileList.size());\n        }\n    }\n\n    /**\n     * list up files with specified file extension (ext)\n     * under the specified directory (baseDirName) recursively.\n     *\n     * @param baseDirName      : base directory name\n     * @param extensionPattern : regular expression pattern of file extension\n     * @param fileArrayList    : ArrayList to store files\n     * @return : return fileArrayList\n     */\n    public static ArrayList listUpFiles(String baseDirName, String extensionPattern, ArrayList<File> fileArrayList){\n        File baseDir = new File(baseDirName);\n        File[] listOfFiles = baseDir.listFiles();\n        assert listOfFiles != null;\n\n        for (File item : listOfFiles) {\n            if (item.isDirectory()) {\n                fileArrayList = listUpFiles(item.getAbsolutePath(), extensionPattern, fileArrayList);\n            } else if (item.isFile()) {\n                String fileName = item.getName().toLowerCase();\n                if (fileName.endsWith(extensionPattern)) {\n                    fileArrayList.add(item);\n                }\n            }\n        }\n        return(fileArrayList);\n    }\n}\n\n\n\n\u53c2\u8003\nsaka1029\u3055\u3093\u306e\u30b3\u30e1\u30f3\u30c8\nhttps://www.javacodegeeks.com/2014/05/playing-with-java-8-lambdas-paths-and-files.html\n## \u80cc\u666f\n\u591a\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u3057\u3066Java\u3067\u64cd\u4f5c\u304c\u5fc5\u8981\u306a\u6642\u306b\u3001\u30bf\u30fc\u30df\u30ca\u30eb\u306e`find`\u30b3\u30de\u30f3\u30c9\u306a\u3069\u3067\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u304b\u3089Java\u306b\u8aad\u307f\u8fbc\u3080\u3088\u308a\u3082\u3001Java\u3067\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u306e\u90e8\u5206\u3082\u5b9f\u88c5\u3057\u305f\u307b\u3046\u304c\u3001\u51e6\u7406\u304c\u4e00\u8cab\u3057\u3066\u7c21\u5358\u306a\u306e\u3067\u3053\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3002\n\n## \u30b3\u30fc\u30c9\u306e\u6982\u8981\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u540d\u3068\u62e1\u5f35\u5b50\u3092\u5f15\u6570\u3068\u3057\u3066\u3001\u6307\u5b9a\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u305d\u308c\u3088\u308a\u4e0b\u5c64\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u63a2\u7d22\u3057\u3001\u6307\u5b9a\u3057\u305f\u62e1\u5f35\u5b50\u306e\u30d5\u30a1\u30a4\u30eb\u3092`ArrayList`\u306b\u4fdd\u5b58\u3059\u308b\u3002\u3053\u3053\u3067\u306fiTunes\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u3042\u308bm4a\u30d5\u30a1\u30a4\u30eb\u3092\u63a2\u3057\u3066\u3001\u30ea\u30b9\u30c8\u306b\u4fdd\u5b58\u3059\u308b\u3002\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3067\u306fJava8\u3067\u65b0\u3057\u304f\u5c0e\u5165\u3055\u308c\u305f\u30e9\u30e0\u30c0\u5f0f(`Lambda Expressions`)\u3068\u30b9\u30c8\u30ea\u30fc\u30e0(`Stream`)\u3092\u4f7f\u3063\u3066\u3044\u308b\u3002\u30e9\u30e0\u30c0\u5f0f\u3068\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u30b3\u30fc\u30c9\u306f\u4e0b\u3092\u53c2\u7167\u3002\uff08Java8\u3088\u308a\u53e4\u3044Java\u3067\u3082\u52d5\u304f\u304b\u3082\u3002\u3002\uff09\n\n\n### Java 8\u4ee5\u964d\n```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.regex.Pattern;\nimport java.util.ArrayList;\nimport java.util.stream.Stream;\n\npublic class Utils {\n    public static void main(String[] args) throws IOException {\n        // To list up m4a files in iTunes directory\n        Path baseDir = Paths.get(System.getProperty(\"user.home\"), \"Music\", \"iTunes\");\n        String extension  = \"m4a\";\n\n        // for standard inputs\n        if (args.length == 2) {\n            baseDir = Paths.get(args[0]);\n            extension   = args[1];\n        } else if (args.length != 0){\n            System.err.println(\"Error: set correct args.\");\n        }\n\n        if (!Pattern.matches(\"^[0-9a-zA-Z]+$\", extension)) {\n            System.err.println(\"Error: set correct extension. (only alphabet and numeric)\");\n        } else {\n            ArrayList<File> fileList = listUpFiles(baseDir, extension);\n            for (File file : fileList) {\n                System.out.println(file.getAbsolutePath());\n            }\n            System.out.println(fileList.size());    \n        }\n    }\n\n    /**\n     * list up files with specified file extension (extension)\n     * under the specified directory (baseDir) recursively.\n     * @param baseDir   : base directory\n     * @param extension : string needs to be contained as file extension\n     * @return          : list of files\n     */\n     public static ArrayList<File> listUpFiles(Path baseDir, String extension){\n        String extensionPattern = \".\" + extension.toLowerCase();\n        final ArrayList<File> fileList = new ArrayList();\n\n        try (final Stream<Path> pathStream = Files.walk(baseDir)) {\n            pathStream\n                    .map(path -> path.toFile())\n                    .filter(file -> !file.isDirectory())\n                    .filter(file -> file.getName().toLowerCase().endsWith(extensionPattern))\n                    .forEach(fileList::add);\n        } catch (final IOException e) {\n            e.printStackTrace();\n        }\n        return (fileList);\n    }\n}\n```\n\n### \u30e9\u30e0\u30c0\u5f0f\u3068\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u30b3\u30fc\u30c9\n\n```Java\nimport java.io.File;\nimport java.util.regex.Pattern;\nimport java.util.ArrayList;\n\npublic class UtilsOld {\n\n    public static void main(String[] args) {\n        // To list up m4a files in iTunes directory\n        String baseDirName = System.getProperty(\"user.home\") + java.io.File.separator +\n                             \"Music\" + java.io.File.separator + \"iTunes\";\n        String extension  = \"m4a\";\n\n        // for standard input\n        if (args.length == 2) {\n            baseDirName = args[0];\n            extension   = args[1];\n        } else if (args.length != 0){\n            System.err.println(\"Error: set correct args.\");\n        }\n\n        if (!Pattern.matches(\"^[0-9a-zA-Z]+$\", extension)) {\n            System.err.println(\"Error: set correct extension. (only alphabet and numeric)\");\n        } else {\n            String extensionPattern = \".\" + extension.toLowerCase();\n\n            ArrayList<File> fileList = new ArrayList();\n            fileList = listUpFiles(baseDirName, extensionPattern, fileList);\n\n            for (File file : fileList) {\n                System.out.println(file.getAbsolutePath());\n            }\n            System.out.println(fileList.size());\n        }\n    }\n\n    /**\n     * list up files with specified file extension (ext)\n     * under the specified directory (baseDirName) recursively.\n     *\n     * @param baseDirName      : base directory name\n     * @param extensionPattern : regular expression pattern of file extension\n     * @param fileArrayList    : ArrayList to store files\n     * @return : return fileArrayList\n     */\n    public static ArrayList listUpFiles(String baseDirName, String extensionPattern, ArrayList<File> fileArrayList){\n        File baseDir = new File(baseDirName);\n        File[] listOfFiles = baseDir.listFiles();\n        assert listOfFiles != null;\n\n        for (File item : listOfFiles) {\n            if (item.isDirectory()) {\n                fileArrayList = listUpFiles(item.getAbsolutePath(), extensionPattern, fileArrayList);\n            } else if (item.isFile()) {\n                String fileName = item.getName().toLowerCase();\n                if (fileName.endsWith(extensionPattern)) {\n                    fileArrayList.add(item);\n                }\n            }\n        }\n        return(fileArrayList);\n    }\n}\n\n``` \n\n## \u53c2\u8003\nsaka1029\u3055\u3093\u306e\u30b3\u30e1\u30f3\u30c8\nhttps://www.javacodegeeks.com/2014/05/playing-with-java-8-lambdas-paths-and-files.html\n\n", "tags": ["Java", "\u63a2\u7d22", "\u30e9\u30e0\u30c0\u5f0f"]}