{"context": "\n\nchainer\u3067\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\nchainer\u306emnist\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u3066\u307f\u3066\u3082\u3001\u91cd\u7528\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\u304c\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\ntrain_mnist.py\n    ...\n    # Load the MNIST dataset\n    train, test = chainer.datasets.get_mnist()\n    ...\n\n\n\u3069\u3063\u304b\u304b\u3089\u53d6\u3063\u3066\u304d\u3066\u308b\u3093\u3060\u308d\u3046\u306a\u2212\u3057\u304b\u308f\u304b\u3089\u306a\u3044\u3053\u306e\u30b3\u30fc\u30c9\u3067\u4f5c\u3089\u308c\u308b\u3001\u3053\u306etrain, test\u306e\u4f5c\u308a\u65b9\u3067\u3059\u3002\n\u666e\u901a\u306bLinear\u3060\u3051\u3092\u4f7f\u3046\u5834\u5408\u3068\u3001CNN\u3092\u4f7f\u3046\u5834\u5408\u3068\u3067\u4f5c\u308a\u65b9\u304c\u9055\u3046\u306e\u3067\u3001\u305d\u308c\u305e\u308c\u66f8\u304d\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306f\u666e\u901a\u306e\u753b\u50cf\u3092\u4f7f\u3063\u3066\u3001\u305d\u306e\u30e9\u30d9\u30eb\u306f\u9069\u5f53\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nchainer\u3067\u306f train,test \u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u3069\u3093\u306a\u5f62\u3092\u3057\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\ntrain, test = chained.datasets.get_mnist()\nprint(train[0])\n\npython train_minst.py\n(array([ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.71764708,  0.99215692,  0.99215692,  0.81176478,  0.00784314,\n\n... \n\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ], dtype=float32), 5)\n\n\u306e\u69d8\u306b\u3001(array([0,0,...,0,0], dtype=float32), 5)\n\u3068\u3044\u3046\u5f62\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u65b9\u306ffloat32\u578b\u3001\u30e9\u30d9\u30eb\u306fint32\u578b\u3067\u3059\u3002\n\n\u6e96\u5099\n\u3069\u3061\u3089\u306e\u5834\u5408\u3067\u3082 tuple_dataset \u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3046\u306e\u3068\u3001CNN\u3067\u306f\u753b\u50cf\u3068glob\u3068\u3044\u3046\u306e\u3082\u4f7f\u3046\u306e\u3067\nfrom chainer.datasets import tuple_dataset\nfrom PIL import Image\nimport bumpy as np\nimport glob\n\n\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u307e\u305f\u3001\u4eca\u56de\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\u3068\u3044\u3046\u3053\u3068\u3067\u3001chainer\u306e\u30e2\u30c7\u30eb\u306e\u4f5c\u308a\u65b9\u30fb\u610f\u5473\u306f\u306a\u3093\u3068\u306a\u304f\u3067\u3082\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3068\u96e3\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nLinear(\u666e\u901a)\u306e\u5834\u5408\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\n\u4eca\u56de\u306f\u4f8b\u3068\u3057\u3066\u3001\u753b\u7d20\u5024\u304c\u4e00\u5217\u3067\u4fdd\u5b58\u3055\u308c\u3001\u305d\u306e\u6700\u5f8c\u306b\u30e9\u30d9\u30eb\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u884c\u3092\u4e00\u3064\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6570\u3060\u3051\u884c\u6570\u306e\u3042\u308bcsv\u306e\u884c\u5217\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u3042\u308b\u30c7\u30fc\u30bf\u304c\n\u30e9\u30d9\u30eb\u304c1\u30675x5\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3067\u3042\u3063\u305f\u3068\u3057\u3066\n120,120,120,120,120\n130,130,130,130,130\n140,140,140,140,140\n150,150,150,150,150\n160,160,160,160,160\n\u3060\u3068\u3057\u305f\u3089\n120,120,120,120,120,130,130,...150,150,160,160,160,160,160,1\n\u306e\u3088\u3046\u306b\u3001\u4e00\u3064\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u304c\u4e00\u884c\u3068\u3057\u3066\u66f8\u304b\u304b\u308c\u307e\u3059\u3002\ndata.txt\u306e\u6700\u5f8c\u306e1,5,3,5\u304c\u30e9\u30d9\u30eb\u3067\u3059\u3002\n\ndata.txt\n...\n0,0,11,1,388,484,236,268,500,260,212,392,324,220,216,412,204,244,252,292,4,447,403,589,471,434,448,450,430,410,4,434,448,450,430,410,410,410,410,410,1\n0,30,11,0,308,368,324,264,372,384,276,216,372,248,212,192,260,204,208,192,4,434,448,450,430,410,410,410,410,410,4,560,220,238,217,305,267,231,202,185,5\n0,0,30,1,216,264,268,236,248,272,244,216,284,236,232,180,280,236,188,188,4,560,220,238,217,305,267,231,202,185,4,305,267,231,202,185,185,185,185,185,3\n0,30,5,0,220,192,188,188,184,196,204,184,208,188,188,168,204,200,192,160,4,305,267,231,202,185,185,185,185,185,4,418,418,418,418,418,418,418,418,418,5\n...\n\n\n\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nload_dataset.py\ntrain_data = []\ntrain_label = []\ndata_raw = open(\"data.txt\")\nfor line in data_raw:\n    train = np.array([np.float32(int(x)/255.0) for x in line.split(\",\")[0:input_num]])\n    label = np.int32(line.split(\",\")[input_num])\n    train_data.append(train)\n    train_label.append(label)\n\nthreshold = np.int32(len(imageData)/10*9)\ntrain = tuple_dataset.TupleDataset(imageData[0:threshold], labelData[0:threshold])\ntest  = tuple_dataset.TupleDataset(imageData[threshold:],  labelData[threshold:])\n\n\n\nfor\u306e\u4e2d\u3067\u4e00\u3064\u4e00\u3064\u306e\u30c7\u30fc\u30bf\u3068\u30e9\u30d9\u30eb\u3092\u4f5c\u3063\u3066\u6b21\u3005\u306btrain_data\u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u4e00\u56de\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u5165\u308c\u3066\u304b\u3089\u3001threshold(\u95be\u5024)\u3092\u4f7f\u3063\u3066 train, test \u3068\u306b\u5206\u3051\u3066\u3044\u307e\u3059\u3002\n\u753b\u7d20\u5024\u306f0~255\u306a\u306e\u3067255\u3067\u5272\u3063\u30660~1\u306b\u6b63\u898f\u5316\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\nCNN\u306e\u5834\u5408\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\nCNN\u306e\u5165\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u306f3\u3067\u30ab\u30e9\u30fc\u753b\u50cf\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\u306b\u306a\u308a\u307e\u3059\u3002\npathsAndLabels = []\npathsAndLabels.append(np.asarray([\"./imageDirectory0/\", 0]))\npathsAndLabels.append(np.asarray([\"./imageDirectory1/\", 1]))\npathsAndLabels.append(np.asarray([\"./imageDirectory2/\", 2]))\n\n# \u30c7\u30fc\u30bf\u3092\u6df7\u305c\u3066\u3001train\u3068test\u304c\u3061\u3083\u3093\u3068\u307e\u3070\u3089\u306b\u306a\u308b\u3088\u3046\u306b\u3002\nallData = []\nfor pathAndLabel in pathsAndLabels:\n    path = pathAndLabel[0]\n    label = pathAndLabel[1]\n    imagelist = glob.glob(path + \"*\")\n    for imgName in imagelist:\n        allData.append([imgName, label])\nallData = np.random.permutation(allData)\n\nimageData = []\nlabelData = []\nfor pathAndLabel in allData:\n    img = Image.open(pathAndLabel[0])\n    #3\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u753b\u50cf\u3092r,g,b\u305d\u308c\u305e\u308c\u306e\u753b\u50cf\u306b\u5206\u3051\u308b\n    r,g,b = img.split()\n    rImgData = np.asarray(np.float32(r)/255.0)\n    gImgData = np.asarray(np.float32(g)/255.0)\n    bImgData = np.asarray(np.float32(b)/255.0)\n    imgData = np.asarray([rImgData, gImgData, bImgData])\n    imageData.append(imgData)\n    labelData.append(np.int32(pathAndLabel[1]))\n\nthreshold = np.int32(len(imageData)/8*7)\ntrain = tuple_dataset.TupleDataset(imageData[0:threshold], labelData[0:threshold])\ntest  = tuple_dataset.TupleDataset(imageData[threshold:],  labelData[threshold:])\n\nallData = []\u306e\u7b87\u6240\u306f\u306b\u3064\u3044\u3066\u3067\u306f\n\u3042\u308b\u4eba\u306e\u753b\u50cf\u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u3054\u3068\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3044\u308b\u306e\u3067\u3001 train,test \u3068\u3092\u4f5c\u308b\u3068\u304d\u306b\u3001test \u306b\u540c\u3058\u30e9\u30d9\u30eb\u306e\u30c7\u30fc\u30bf\u3057\u304b\u5165\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\npathsAndLabels\u306b\u306f\u540c\u3058\u30e9\u30d9\u30eb\u3067\u5b66\u7fd2\u3055\u305b\u305f\u3044\u753b\u50cf\u30c7\u30fc\u30bf\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u305d\u306e\u30e9\u30d9\u30eb\u3092\u5165\u308c\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30c8\u306f\u5165\u529b\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092 H(\u9ad8\u3055)xW(\u5e45)xK(\u6df1) \u304b\u3089 KxHxW\u306b\u3059\u308b\u3068\u3053\u308d\u3067\u3059\u3002\npillow\u306eImage.open(path)\u3067\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u306f\u524d\u8005\u306e\u884c\u5217\u306e\u5f62\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\nCNN\u3067\u306f\u5f8c\u8005\u306e\u5f62\u306b\u3057\u306a\u3044\u3068\u5165\u3089\u306a\u3044\u306e\u3067\u3001\u5909\u3048\u3066\u3042\u3052\u307e\u3059\u3002\n# \u3053\u3053\u304c\u3001\u4e0a\u8a18\u3057\u305f\u30dd\u30a4\u30f3\u30c8\u90e8\u5206\n# Image.open\u3067\u53d6\u308a\u5165\u308c\u305f\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u306f\n# [ [ [r,g,b], [r,g,b], ... ,[r,g,b] ],\n#   [ [r,g,b], [r,g,b], ... ,[r,g,b] ],\n#   ...\n#   [ [r,g,b], [r,g,b], ... ,[r,g,b] ] ]\n# \u306e\u3088\u3046\u306brgb\u304c\u304a\u306a\u3058\u4f4d\u7f6e\u306b\u5165\u3063\u3066\u308b\u611f\u3058\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u305d\u308c\u305e\u308c\u8d64\u306e\u753b\u50cf\u3001\u7dd1\u306e\u753b\u50cf\u3001\u9752\u306e\u753b\u50cf\u306e\u69d8\u306b\u3057\u3066\u884c\u5217\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n# \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u306b\u3059\u308b\n# [ [ [ r, r, r, ... ,r ],      \u3053\u3053\u304b\u3089\n#     ...\n#     [ r, r, r, ... ,r ] ],        \u3053\u3053\u307e\u3067\u304c\u8d64\u306e\u753b\u50cf\n#\n#   [ [ g, g, g, ... ,g ],      \u3053\u3053\u304b\u3089\n#     ...\n#     [ g, g, g, ... ,g ] ],        \u3053\u3053\u307e\u3067\u304c\u7dd1\u306e\u753b\u50cf\n#\n#     [ b, b, b, ... ,b ],      \u3053\u3053\u304b\u3089\n#     ...\n#     [ b, b, b, ... ,b ] ] ]       \u3053\u3053\u307e\u3067\u304c\u9752\u306e\u753b\u50cf\n\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306f Github\u306b\u3042\u3052\u3066\u3044\u307e\u3059\u3002\n#chainer\u3067\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\nchainer\u306emnist\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u3066\u307f\u3066\u3082\u3001\u91cd\u7528\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\u304c\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n\n```python:train_mnist.py\n    ...\n    # Load the MNIST dataset\n    train, test = chainer.datasets.get_mnist()\n    ...\n```\n\n\u3069\u3063\u304b\u304b\u3089\u53d6\u3063\u3066\u304d\u3066\u308b\u3093\u3060\u308d\u3046\u306a\u2212\u3057\u304b\u308f\u304b\u3089\u306a\u3044\u3053\u306e\u30b3\u30fc\u30c9\u3067\u4f5c\u3089\u308c\u308b\u3001\u3053\u306etrain, test\u306e\u4f5c\u308a\u65b9\u3067\u3059\u3002\n\n\u666e\u901a\u306bLinear\u3060\u3051\u3092\u4f7f\u3046\u5834\u5408\u3068\u3001CNN\u3092\u4f7f\u3046\u5834\u5408\u3068\u3067\u4f5c\u308a\u65b9\u304c\u9055\u3046\u306e\u3067\u3001\u305d\u308c\u305e\u308c\u66f8\u304d\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306f\u666e\u901a\u306e\u753b\u50cf\u3092\u4f7f\u3063\u3066\u3001\u305d\u306e\u30e9\u30d9\u30eb\u306f\u9069\u5f53\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\nchainer\u3067\u306f _train_,_test_ \u304c\u5fc5\u8981\u3067\u3059\u304c\u3001\u3069\u3093\u306a\u5f62\u3092\u3057\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\n\n```py3\ntrain, test = chained.datasets.get_mnist()\nprint(train[0])\n```\n\n```bash\npython train_minst.py\n(array([ 0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.71764708,  0.99215692,  0.99215692,  0.81176478,  0.00784314,\n\n... \n\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n         0.        ,  0.        ,  0.        ,  0.        ], dtype=float32), 5)\n```\n\u306e\u69d8\u306b\u3001(array([0,0,...,0,0], dtype=float32), 5)\n\u3068\u3044\u3046\u5f62\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a13\u7df4\u30c7\u30fc\u30bf\u306e\u65b9\u306ffloat32\u578b\u3001\u30e9\u30d9\u30eb\u306fint32\u578b\u3067\u3059\u3002\n\n\n#\u6e96\u5099\n\u3069\u3061\u3089\u306e\u5834\u5408\u3067\u3082 _tuple\\_dataset_ \u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3046\u306e\u3068\u3001CNN\u3067\u306f\u753b\u50cf\u3068glob\u3068\u3044\u3046\u306e\u3082\u4f7f\u3046\u306e\u3067\n\n```py3\nfrom chainer.datasets import tuple_dataset\nfrom PIL import Image\nimport bumpy as np\nimport glob\n```\n\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u4eca\u56de\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\u3068\u3044\u3046\u3053\u3068\u3067\u3001chainer\u306e\u30e2\u30c7\u30eb\u306e\u4f5c\u308a\u65b9\u30fb\u610f\u5473\u306f\u306a\u3093\u3068\u306a\u304f\u3067\u3082\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u3068\u96e3\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n#Linear(\u666e\u901a)\u306e\u5834\u5408\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\n\u4eca\u56de\u306f\u4f8b\u3068\u3057\u3066\u3001\u753b\u7d20\u5024\u304c\u4e00\u5217\u3067\u4fdd\u5b58\u3055\u308c\u3001\u305d\u306e\u6700\u5f8c\u306b\u30e9\u30d9\u30eb\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u884c\u3092\u4e00\u3064\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u3068\u3057\u3066\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u6570\u3060\u3051\u884c\u6570\u306e\u3042\u308bcsv\u306e\u884c\u5217\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u3042\u308b\u30c7\u30fc\u30bf\u304c\n\u30e9\u30d9\u30eb\u304c1\u30675x5\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3067\u3042\u3063\u305f\u3068\u3057\u3066\n120,120,120,120,120\n130,130,130,130,130\n140,140,140,140,140\n150,150,150,150,150\n160,160,160,160,160\n\u3060\u3068\u3057\u305f\u3089\n120,120,120,120,120,130,130,...150,150,160,160,160,160,160,1\n\u306e\u3088\u3046\u306b\u3001\u4e00\u3064\u306e\u5b66\u7fd2\u30c7\u30fc\u30bf\u304c\u4e00\u884c\u3068\u3057\u3066\u66f8\u304b\u304b\u308c\u307e\u3059\u3002\ndata.txt\u306e\u6700\u5f8c\u306e1,5,3,5\u304c\u30e9\u30d9\u30eb\u3067\u3059\u3002\n\n```text:data.txt\n...\n0,0,11,1,388,484,236,268,500,260,212,392,324,220,216,412,204,244,252,292,4,447,403,589,471,434,448,450,430,410,4,434,448,450,430,410,410,410,410,410,1\n0,30,11,0,308,368,324,264,372,384,276,216,372,248,212,192,260,204,208,192,4,434,448,450,430,410,410,410,410,410,4,560,220,238,217,305,267,231,202,185,5\n0,0,30,1,216,264,268,236,248,272,244,216,284,236,232,180,280,236,188,188,4,560,220,238,217,305,267,231,202,185,4,305,267,231,202,185,185,185,185,185,3\n0,30,5,0,220,192,188,188,184,196,204,184,208,188,188,168,204,200,192,160,4,305,267,231,202,185,185,185,185,185,4,418,418,418,418,418,418,418,418,418,5\n...\n```\n\n\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n\n```py3:load_dataset.py\ntrain_data = []\ntrain_label = []\ndata_raw = open(\"data.txt\")\nfor line in data_raw:\n    train = np.array([np.float32(int(x)/255.0) for x in line.split(\",\")[0:input_num]])\n    label = np.int32(line.split(\",\")[input_num])\n    train_data.append(train)\n    train_label.append(label)\n\nthreshold = np.int32(len(imageData)/10*9)\ntrain = tuple_dataset.TupleDataset(imageData[0:threshold], labelData[0:threshold])\ntest  = tuple_dataset.TupleDataset(imageData[threshold:],  labelData[threshold:])\n\n```\nfor\u306e\u4e2d\u3067\u4e00\u3064\u4e00\u3064\u306e\u30c7\u30fc\u30bf\u3068\u30e9\u30d9\u30eb\u3092\u4f5c\u3063\u3066\u6b21\u3005\u306btrain_data\u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u4e00\u56de\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u5165\u308c\u3066\u304b\u3089\u3001threshold(\u95be\u5024)\u3092\u4f7f\u3063\u3066 _train_, _test_ \u3068\u306b\u5206\u3051\u3066\u3044\u307e\u3059\u3002\n\u753b\u7d20\u5024\u306f0~255\u306a\u306e\u3067255\u3067\u5272\u3063\u30660~1\u306b\u6b63\u898f\u5316\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n#CNN\u306e\u5834\u5408\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\nCNN\u306e\u5165\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u306f3\u3067\u30ab\u30e9\u30fc\u753b\u50cf\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u4f5c\u308a\u65b9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```py3\npathsAndLabels = []\npathsAndLabels.append(np.asarray([\"./imageDirectory0/\", 0]))\npathsAndLabels.append(np.asarray([\"./imageDirectory1/\", 1]))\npathsAndLabels.append(np.asarray([\"./imageDirectory2/\", 2]))\n\n# \u30c7\u30fc\u30bf\u3092\u6df7\u305c\u3066\u3001train\u3068test\u304c\u3061\u3083\u3093\u3068\u307e\u3070\u3089\u306b\u306a\u308b\u3088\u3046\u306b\u3002\nallData = []\nfor pathAndLabel in pathsAndLabels:\n    path = pathAndLabel[0]\n    label = pathAndLabel[1]\n    imagelist = glob.glob(path + \"*\")\n    for imgName in imagelist:\n        allData.append([imgName, label])\nallData = np.random.permutation(allData)\n\nimageData = []\nlabelData = []\nfor pathAndLabel in allData:\n    img = Image.open(pathAndLabel[0])\n    #3\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u753b\u50cf\u3092r,g,b\u305d\u308c\u305e\u308c\u306e\u753b\u50cf\u306b\u5206\u3051\u308b\n    r,g,b = img.split()\n    rImgData = np.asarray(np.float32(r)/255.0)\n    gImgData = np.asarray(np.float32(g)/255.0)\n    bImgData = np.asarray(np.float32(b)/255.0)\n    imgData = np.asarray([rImgData, gImgData, bImgData])\n    imageData.append(imgData)\n    labelData.append(np.int32(pathAndLabel[1]))\n\nthreshold = np.int32(len(imageData)/8*7)\ntrain = tuple_dataset.TupleDataset(imageData[0:threshold], labelData[0:threshold])\ntest  = tuple_dataset.TupleDataset(imageData[threshold:],  labelData[threshold:])\n```\nallData = []\u306e\u7b87\u6240\u306f\u306b\u3064\u3044\u3066\u3067\u306f\n\u3042\u308b\u4eba\u306e\u753b\u50cf\u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u3054\u3068\u306b\u8aad\u307f\u8fbc\u3093\u3067\u3044\u308b\u306e\u3067\u3001 _train_,_test_ \u3068\u3092\u4f5c\u308b\u3068\u304d\u306b\u3001_test_ \u306b\u540c\u3058\u30e9\u30d9\u30eb\u306e\u30c7\u30fc\u30bf\u3057\u304b\u5165\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u30b7\u30e3\u30c3\u30d5\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\n\npathsAndLabels\u306b\u306f\u540c\u3058\u30e9\u30d9\u30eb\u3067\u5b66\u7fd2\u3055\u305b\u305f\u3044\u753b\u50cf\u30c7\u30fc\u30bf\u304c\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u305d\u306e\u30e9\u30d9\u30eb\u3092\u5165\u308c\u307e\u3059\u3002\n\n\u30dd\u30a4\u30f3\u30c8\u306f\u5165\u529b\u7528\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092 H(\u9ad8\u3055)xW(\u5e45)xK(\u6df1) \u304b\u3089 KxHxW\u306b\u3059\u308b\u3068\u3053\u308d\u3067\u3059\u3002\npillow\u306eImage.open(path)\u3067\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u306f\u524d\u8005\u306e\u884c\u5217\u306e\u5f62\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\nCNN\u3067\u306f\u5f8c\u8005\u306e\u5f62\u306b\u3057\u306a\u3044\u3068\u5165\u3089\u306a\u3044\u306e\u3067\u3001\u5909\u3048\u3066\u3042\u3052\u307e\u3059\u3002\n\n```bash\n# \u3053\u3053\u304c\u3001\u4e0a\u8a18\u3057\u305f\u30dd\u30a4\u30f3\u30c8\u90e8\u5206\n# Image.open\u3067\u53d6\u308a\u5165\u308c\u305f\u753b\u50cf\u306e\u30c7\u30fc\u30bf\u306f\n# [ [ [r,g,b], [r,g,b], ... ,[r,g,b] ],\n#   [ [r,g,b], [r,g,b], ... ,[r,g,b] ],\n#   ...\n#   [ [r,g,b], [r,g,b], ... ,[r,g,b] ] ]\n# \u306e\u3088\u3046\u306brgb\u304c\u304a\u306a\u3058\u4f4d\u7f6e\u306b\u5165\u3063\u3066\u308b\u611f\u3058\u306a\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u305d\u308c\u305e\u308c\u8d64\u306e\u753b\u50cf\u3001\u7dd1\u306e\u753b\u50cf\u3001\u9752\u306e\u753b\u50cf\u306e\u69d8\u306b\u3057\u3066\u884c\u5217\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n# \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u306b\u3059\u308b\n# [ [ [ r, r, r, ... ,r ],      \u3053\u3053\u304b\u3089\n#     ...\n#     [ r, r, r, ... ,r ] ],        \u3053\u3053\u307e\u3067\u304c\u8d64\u306e\u753b\u50cf\n#\n#   [ [ g, g, g, ... ,g ],      \u3053\u3053\u304b\u3089\n#     ...\n#     [ g, g, g, ... ,g ] ],        \u3053\u3053\u307e\u3067\u304c\u7dd1\u306e\u753b\u50cf\n#\n#     [ b, b, b, ... ,b ],      \u3053\u3053\u304b\u3089\n#     ...\n#     [ b, b, b, ... ,b ] ] ]       \u3053\u3053\u307e\u3067\u304c\u9752\u306e\u753b\u50cf\n```\n\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306f [Github](https://github.com/tommyfms2/face_prediction/blob/master/image2TrainAndTest.py)\u306b\u3042\u3052\u3066\u3044\u307e\u3059\u3002\n\n    \n", "tags": ["Chainer", "CNN"]}