{"tags": ["GitHub", "jira"], "context": " More than 1 year has passed since last update.JIRA\u306e\u30c1\u30b1\u30c3\u30c8\u3092\u30af\u30ed\u30fc\u30ba\u3057\u3066\u3082GitHub\u306e\u30d6\u30e9\u30f3\u30c1\u3092\u524a\u9664\u3059\u308b\u306e\u3092\u5fd8\u308c\u308b\u306e\u3067\u3001\u6bce\u6708\u68da\u5378\u3057\u3068\u79f0\u3057\u3066\u524a\u9664\u5bfe\u8c61\u306e\u30d6\u30e9\u30f3\u30c1\u3092\u6d17\u3044\u51fa\u3059\u305f\u3081\u306e\u30b9\u30af\u30ea\u30d7\u30c8\n\n\u5185\u5bb9\nGitHub\u4e0a\u306e\u30d6\u30e9\u30f3\u30c1\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30d6\u30e9\u30f3\u30c1\u306b\u7d10\u4ed8\u3044\u3066\u3044\u308b\u30c1\u30b1\u30c3\u30c8(\u30d6\u30e9\u30f3\u30c1\u306e\u547d\u540d\u898f\u5247\u3067\u308f\u304b\u308b)\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u308b\u304b\uff1f\n\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u306a\u3051\u308c\u3070\u524a\u9664\u5bfe\u8c61\u30d6\u30e9\u30f3\u30c1\u3068\u307f\u306a\u3059\n\u524d\u63d0\u6761\u4ef6\n\nGit-flow\u3067\u958b\u767a\u3057\u3066\u3044\u308b(feature\u30d6\u30e9\u30f3\u30c1\u306a\u3069\u3092\u5207\u3063\u3066\u308b)\n\u30d6\u30e9\u30f3\u30c1\u540d\u304c feature/\u30c1\u30b1\u30c3\u30c8\u756a\u53f7-<\u9069\u5f53\u306a\u6587\u5b57\u5217>\u306b\u306a\u3063\u3066\u308b\n\n\nshow_delete_branch.rb\n## At first, gem install highline\nrequire 'rubygems'\nrequire 'optparse'\nrequire 'net/http'\nrequire 'json'\nrequire 'set'\nrequire 'uri'\nrequire 'highline/import'\n\ndef get_branches(config)\n  ghe_host='GHE_HOST'\n  ghe_api_uri='/api/v3/repos/<organization>'\n  # \u30ea\u30dd\u30b8\u30c8\u30ea\u540d\n  ghe_repos=%w/rep1 rep2/\n  exclude_branches = Set.new(['master', 'develop'])\n  ## get braches\n  branches = Set.new\n  ghe_repos.each {|repo| \n    https = Net::HTTP::new(ghe_host, 443)\n    https.use_ssl = true\n\n    https.start{|http|\n      req = Net::HTTP::Get.new(\"#{ghe_api_uri}/#{repo}/branches\")\n      req.basic_auth config[:user], config[:password]\n      response = http.request(req)\n      JSON.parse(response.body).each {|obj|\n        branches.add(obj['name']) unless exclude_branches.include?(obj['name'])\n      }\n    }\n  }\n\n  return branches\nend\n\n\ndef get_tickets(config)\n  jira_host = 'JIRA_HOST'\n  jira_api_uri ='/rest/api/2/search'\n  query_string = {jql: 'project = <PROJECT_NAME> AND status in (Open, \"In Progress\", Reopened, Resolved)',\n                maxResults: '1000'}.map{|key,value|\n    \"#{key}=#{URI.encode(value)}\"\n  }.join('&')\n\n  ## JIRA ticket \n  open_tickets = Set.new\n  https = Net::HTTP::new(jira_host, 443)\n  https.use_ssl = true\n  https.start{|http|\n    req = Net::HTTP::Get.new(\"#{jira_api_uri}?#{query_string}\")\n    req.basic_auth config[:user], config[:password]\n    response = http.request(req)\n    (JSON.parse(response.body))['issues'].each {|obj|\n      open_tickets.add obj['key']\n    }\n  }\nurn open_tickets \nend\n\n# \u30c1\u30b1\u30c3\u30c8\u756a\u53f7\u306eprefix\nTICKET_PREFIX=''\n# TODO exlude repos\nconfig = {}\nopts = OptionParser.new\nopts.on(\"-u VAL\", \"--user VAL\", \"user name\") { |v| config[:user] = v}\nopts.on(\"-p VAL\", \"--password VAL\", \"password\") { |v| config[:password] = v}\nopts.parse!(ARGV)\n\nconfig[:password] = ask('Enter password:'){|e| e.echo = false} unless config[:password]\n\ndelete_branches = []\nbranches = get_branches config\ntickets = get_tickets config\n\nbranch_regex_pattern = %r#(feature|hotfix)/(\\d+)(-(.*))+#\nbranches.each{|branch| \n  # release\u30d6\u30e9\u30f3\u30c1\u306f\u57fa\u672c\u524a\u9664\n  if branch =~ /release.*/\n    delete_branches.push branch\n  elsif branch =~ /(feature|hotfix).*/\n     m = branch_regex_pattern.match branch\n     # \u9589\u3058\u305f\u30c1\u30b1\u30c3\u30c8\n      delete_branches.push branch unless m && tickets.include?(\"#{TICKET_PREFIX}#{m[2]}\")\n  else\n    # \u547d\u540d\u6cd5\u5247\u5916\u306e\u30c1\u30b1\u30c3\u30c8(\u591a\u5206\u524a\u9664\u3057\u3066\u3082\u5927\u4e08\u592b)\n    puts \"unexpected branch name #{branch}\"\n  end\n}\n\ndelete_branches.each {|v|\n  puts v\n}\n\n\nJIRA\u306e\u30c1\u30b1\u30c3\u30c8\u3092\u30af\u30ed\u30fc\u30ba\u3057\u3066\u3082GitHub\u306e\u30d6\u30e9\u30f3\u30c1\u3092\u524a\u9664\u3059\u308b\u306e\u3092\u5fd8\u308c\u308b\u306e\u3067\u3001\u6bce\u6708\u68da\u5378\u3057\u3068\u79f0\u3057\u3066\u524a\u9664\u5bfe\u8c61\u306e\u30d6\u30e9\u30f3\u30c1\u3092\u6d17\u3044\u51fa\u3059\u305f\u3081\u306e\u30b9\u30af\u30ea\u30d7\u30c8\n\n## \u5185\u5bb9\n\nGitHub\u4e0a\u306e\u30d6\u30e9\u30f3\u30c1\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3002\n\u30d6\u30e9\u30f3\u30c1\u306b\u7d10\u4ed8\u3044\u3066\u3044\u308b\u30c1\u30b1\u30c3\u30c8(\u30d6\u30e9\u30f3\u30c1\u306e\u547d\u540d\u898f\u5247\u3067\u308f\u304b\u308b)\u304c\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u308b\u304b\uff1f\n\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u306a\u3051\u308c\u3070\u524a\u9664\u5bfe\u8c61\u30d6\u30e9\u30f3\u30c1\u3068\u307f\u306a\u3059\n\n\u524d\u63d0\u6761\u4ef6\n\n* Git-flow\u3067\u958b\u767a\u3057\u3066\u3044\u308b(feature\u30d6\u30e9\u30f3\u30c1\u306a\u3069\u3092\u5207\u3063\u3066\u308b)\n* \u30d6\u30e9\u30f3\u30c1\u540d\u304c feature/\u30c1\u30b1\u30c3\u30c8\u756a\u53f7-<\u9069\u5f53\u306a\u6587\u5b57\u5217>\u306b\u306a\u3063\u3066\u308b\n\n```show_delete_branch.rb\n## At first, gem install highline\nrequire 'rubygems'\nrequire 'optparse'\nrequire 'net/http'\nrequire 'json'\nrequire 'set'\nrequire 'uri'\nrequire 'highline/import'\n\ndef get_branches(config)\n  ghe_host='GHE_HOST'\n  ghe_api_uri='/api/v3/repos/<organization>'\n  # \u30ea\u30dd\u30b8\u30c8\u30ea\u540d\n  ghe_repos=%w/rep1 rep2/\n  exclude_branches = Set.new(['master', 'develop'])\n  ## get braches\n  branches = Set.new\n  ghe_repos.each {|repo| \n    https = Net::HTTP::new(ghe_host, 443)\n    https.use_ssl = true\n\n    https.start{|http|\n      req = Net::HTTP::Get.new(\"#{ghe_api_uri}/#{repo}/branches\")\n      req.basic_auth config[:user], config[:password]\n      response = http.request(req)\n      JSON.parse(response.body).each {|obj|\n        branches.add(obj['name']) unless exclude_branches.include?(obj['name'])\n      }\n    }\n  }\n\n  return branches\nend\n\n\ndef get_tickets(config)\n  jira_host = 'JIRA_HOST'\n  jira_api_uri ='/rest/api/2/search'\n  query_string = {jql: 'project = <PROJECT_NAME> AND status in (Open, \"In Progress\", Reopened, Resolved)',\n                maxResults: '1000'}.map{|key,value|\n    \"#{key}=#{URI.encode(value)}\"\n  }.join('&')\n\n  ## JIRA ticket \n  open_tickets = Set.new\n  https = Net::HTTP::new(jira_host, 443)\n  https.use_ssl = true\n  https.start{|http|\n    req = Net::HTTP::Get.new(\"#{jira_api_uri}?#{query_string}\")\n    req.basic_auth config[:user], config[:password]\n    response = http.request(req)\n    (JSON.parse(response.body))['issues'].each {|obj|\n      open_tickets.add obj['key']\n    }\n  }\nurn open_tickets \nend\n\n# \u30c1\u30b1\u30c3\u30c8\u756a\u53f7\u306eprefix\nTICKET_PREFIX=''\n# TODO exlude repos\nconfig = {}\nopts = OptionParser.new\nopts.on(\"-u VAL\", \"--user VAL\", \"user name\") { |v| config[:user] = v}\nopts.on(\"-p VAL\", \"--password VAL\", \"password\") { |v| config[:password] = v}\nopts.parse!(ARGV)\n\nconfig[:password] = ask('Enter password:'){|e| e.echo = false} unless config[:password]\n\ndelete_branches = []\nbranches = get_branches config\ntickets = get_tickets config\n\nbranch_regex_pattern = %r#(feature|hotfix)/(\\d+)(-(.*))+#\nbranches.each{|branch| \n  # release\u30d6\u30e9\u30f3\u30c1\u306f\u57fa\u672c\u524a\u9664\n  if branch =~ /release.*/\n    delete_branches.push branch\n  elsif branch =~ /(feature|hotfix).*/\n     m = branch_regex_pattern.match branch\n     # \u9589\u3058\u305f\u30c1\u30b1\u30c3\u30c8\n      delete_branches.push branch unless m && tickets.include?(\"#{TICKET_PREFIX}#{m[2]}\")\n  else\n    # \u547d\u540d\u6cd5\u5247\u5916\u306e\u30c1\u30b1\u30c3\u30c8(\u591a\u5206\u524a\u9664\u3057\u3066\u3082\u5927\u4e08\u592b)\n    puts \"unexpected branch name #{branch}\"\n  end\n}\n\ndelete_branches.each {|v|\n  puts v\n}\n```\n"}