{"tags": ["dlang", "template"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u3000\u4eca\u5e74\u306e\u8a18\u4e8b\u306f\uff0c\u30bf\u30a4\u30c8\u30eb\u304b\u3089\u3082\u308f\u304b\u308b\u3088\u3046\u306bC++\u306f\u3061\u3087\u3063\u3068\u89e6\u3063\u305f\u3053\u3068\u3042\u308b\u3051\u3069D\u8a00\u8a9e\u306f\u77e5\u3089\u306a\u3044\u3088\u3063\u3066\u4eba\u5411\u3051\u3067\u3059\uff0eC++\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0c\u521d\u5fc3\u8005\uff0c\u3082\u3057\u304f\u306f\u4e2d\u7d1a\u8005\u306b\u3068\u3063\u3066\u3082\u975e\u5e38\u306b\u96e3\u3057\u3044\u6a5f\u80fd\u3067\u3059\uff0eD\u8a00\u8a9e\u306fC++\u3092\u53c2\u8003\u306b\u4f5c\u3089\u308c\u305f\u8a00\u8a9e\u3067\u3042\u308a\uff0cD\u8a00\u8a9e\u306b\u3082C++\u76f8\u5f53\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\uff0e\u3057\u304b\u3057\u306a\u304c\u3089\uff0cD\u8a00\u8a9e\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\uff0c\u521d\u5fc3\u8005\u306b\u3068\u3063\u3066\u3082\u5b66\u3073\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u305d\u3046\u3044\u3046\u3053\u3068\u3067\uff0c\u4eca\u56de\u306fD\u8a00\u8a9e\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\u3000\u3042\u3068\uff0c\u3053\u306e\u8a18\u4e8b\u306f\u8c4a\u6a4b\u6280\u8853\u79d1\u5b66\u5927\u5b66\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30af\u30e9\u30d6(\u6771\u30e239a)\u304c\u30b3\u30df\u30c3\u30af\u30de\u30fc\u30b1\u30c3\u30c8C89\u306b\u3066\u9812\u5e03\u3059\u308b\u90e8\u8a8c\u7528\u306b\u66f8\u3044\u305f\u3082\u306e\u3067\u3059\uff0e\u5f53\u65e5\u306f\u30b5\u30fc\u30af\u30eb\u4f5c\u306e\u30b2\u30fc\u30e0\u3082\u3042\u308b\u3088\u3046\u306a\u306e\u3067\uff0c\u90e8\u8a8c\u3068\u5408\u308f\u305b\u3066\u305c\u3072\u305c\u3072(\u5ba3\u4f1d)\uff0e\n\n\u30b3\u30fc\u30c9\u306e\u30b9\u30bf\u30a4\u30eb\u306b\u3064\u3044\u3066\n\u3000\u3053\u306e\u6587\u7ae0\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306e\u3046\u3061\uff0c\u3044\u304f\u3064\u304b\u306f\u975e\u5e38\u306b\u5909\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3068\u306a\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u3053\u308c\u306f\u7d19\u306b\u5370\u5237\u3059\u308b\u3068\u3044\u3046\u5236\u7d04\u304b\u3089\u751f\u3058\u308b\u3082\u306e\u3067\u3059\u306e\u3067\uff0c\u3069\u3046\u304b\u8a31\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u306f\n\u3000\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3064\u3044\u3066\u89e3\u8aac\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u305d\u3082\u305d\u3082\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u306f\u3069\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3067\uff0c\u3069\u306e\u3088\u3046\u306a\u5f79\u5272\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u304b\u3092\u8aac\u660e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u95a2\u6570\u304c\u3042\u308b\u7406\u7531\u306f\uff0c\u3042\u308b\u6a5f\u80fd\u3084\u624b\u9806\u3092\u518d\u5229\u7528\u3059\u308b\u305f\u3081\u3067\u3057\u305f\uff0e\u305f\u3068\u3048\u3070\uff0cint\u578b\u3092\u8981\u7d20\u3068\u3057\u3066\u6301\u3064\u914d\u5217int[] arr\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff0e\nint sum(int[] arr) {\n    int res;        // D\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30670\u521d\u671f\u5316\n    foreach(e; arr) // \u914d\u5217\u3092\u9806\u306b\u30a4\u30c6\u30ec\u30fc\u30c8\n        res += e;\n\n    return res;\n}\n\n\u3053\u306e\u3088\u3046\u306bsum\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u3051\u3070\uff0cint[]\u578b\u306e\u7dcf\u548c\u3092\u8a08\u7b97\u3057\u305f\u3044\u3068\u304d\uff0csum\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u826f\u304f\u306a\u308a\u307e\u3059\uff0e\n\u3000\u3082\u3057sum\u95a2\u6570\u3092long[]\u3084float[]\u306a\u3069\u3067\u4f7f\u3044\u305f\u304f\u306a\u3063\u305f\u5834\u5408\u306f\u3069\u3046\u3057\u307e\u3057\u3087\u3046\uff1f\n\u611a\u76f4\u306b\u5404\u578b\u306b\u3064\u3044\u3066\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u76f4\u3057\u307e\u3059\u304b\uff1f\u3067\u306f\uff0cdouble[]\u3084\u8907\u7d20\u6570\u578bcfloat[]\u3082\u5b9f\u88c5\u3057\u307e\u3059\u304b\uff1f\u3082\u3057\u304f\u306fbyte[]\u3084short[]\u306f\uff1f\u305d\u3053\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u767b\u5834\u3067\u3059\uff0e\n\n\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u3000sum\u95a2\u6570\u3092\u4efb\u610f\u306e\u578b\u306b\u62e1\u5f35\u3057\u307e\u3057\u3087\u3046\uff0e\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\uff0e\nimport std.stdio;\n\nT sum(T)(T[] arr) {\n    T res = 0;\n    foreach(e; arr)\n        res = res + e;\n\n    return res;\n}\n\nvoid main() {\n    int[] arr = [1, 2, 3];\n    writeln(sum(arr));      // 6\n}\n\n\u3000\u3069\u3053\u304c\u5909\u308f\u3063\u305f\u304b\u308f\u304b\u308a\u307e\u3059\u3088\u306d\uff1fT\u3068\u3044\u3046\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\uff0e\u3053\u308c\u306f\uff0c\u95a2\u6570\u540d\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9593\u306b(T)\u3068\u66f8\u304f\u3060\u3051\u3067\u3059\uff0e\u3042\u3068\u306f\uff0c\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u3053\u3068\u3092\u8003\u616e\u3057\u3066res\u3092\u30bc\u30ed\u521d\u671f\u5316\u3057\u307e\u3057\u305f\uff0e\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u547c\u3073\u51fa\u3059\u5834\u5408\u306f\uff0cT\u306f\u81ea\u52d5\u7684\u306b\u5f15\u6570\u304b\u3089\u63a8\u8ad6\u3055\u308c\u307e\u3059\uff0e\n\u3000\u3082\u3057\uff0c\u8907\u6570\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5fc5\u8981\u3067\u3042\u308c\u3070\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3060\u3051\u3067\u3059\uff0e\n\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3057\u3087\u3046\uff1f\nvoid copy(E1, E2)(E1[] src, E2[] dst)       // src\u304b\u3089dst\u306b\u30b3\u30d4\u30fc\nin { assert(src.length == dst.length); }    // \u5b9f\u884c\u6642\u306b\u30b5\u30a4\u30ba\u30c1\u30a7\u30c3\u30af\nbody {\n    foreach(i, e; src)\n        dst[i] = e;     // \u30b3\u30d4\u30fc\n}\n\n\n\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u3068\u5236\u7d04\n\u3000\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u3068\u306f\uff0c\n\nIf it walks like a duck and quacks like a duck, it must be a duck. (\u3082\u3057\u305d\u3044\u3064\u304c\u30a2\u30d2\u30eb\u306e\u3088\u3046\u306b\u6b69\u304d\uff0c\u30a2\u30d2\u30eb\u306e\u3088\u3046\u306b\u9cf4\u304f\u306e\u3067\u3042\u308c\u3070\uff0c\u305d\u3044\u3064\u306f\u9593\u9055\u3044\u306a\u304f\u30a2\u30d2\u30eb\u3060)\n\n\u3068\u3044\u3046\u306a\u3093\u3068\u3082\u9762\u767d\u3044\u8a00\u8449\u304c\u5143\u306b\u306a\u3063\u305f\u7528\u8a9e\u3067\u3059\uff0e\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u81ea\u4f53\u306e\u610f\u5473\u306f\uff0c\u300c\u3042\u308b\u578b\u306b\u3044\u3066\uff0c\u6240\u671b\u3059\u308b\u52d5\u4f5c\u3092\u3057\u305d\u3046\u3067\u3042\u308c\u3070\uff0c\u305d\u306e\u578b\u306f\u6240\u671b\u3059\u308b\u578b\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u3067\u3059\uff0e\u3082\u3063\u3068\u5177\u4f53\u7684\u306b\u8a00\u3044\u307e\u3057\u3087\u3046\uff0e\u305f\u3068\u3048\u3070\uff0csum\u95a2\u6570\u306f\u300c\u3042\u308b\u578b\u306b\u3064\u3044\u3066\u4e8c\u9805\u6f14\u7b97\u5b50+\u3092\u7528\u3044\u3066\u52a0\u7b97\u3092\u8868\u305b\u308b\u3088\u3046\u306a\u578b\u300d\u306b\u3064\u3044\u3066\u95a2\u6570\u3092\u5b9f\u884c\u53ef\u80fd\u3067\u3059\uff0e\n\u3000\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u969b\u306b\u521d\u3081\u3066\u578b\u30ec\u30d9\u30eb\u3067\u30b3\u30fc\u30c9\u306e\u6b63\u3057\u3055\u304c\u30c1\u30a7\u30c3\u30af\u3055\u308c\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c\u3042\u308b\u578bT\u304c+\u6f14\u7b97\u5b50\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3084\uff0cE2\u306bE1\u306e\u5024\u304c\u30b3\u30d4\u30fc\u53ef\u80fd\u304b\u3069\u3046\u304b\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u6642\u306b\u306f\u3058\u3081\u3066\u30c1\u30a7\u30c3\u30af\u3055\u308c\u307e\u3059\uff0e\u3053\u306e\u7d50\u679c\uff0cC++\u3084D\u8a00\u8a9e\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u9759\u7684\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3067\u304d\u3066\u3044\u307e\u3059\uff0e\u9759\u7684\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u306b\u3088\u308a\uff0c\u7d20\u6674\u3089\u3057\u304f\u7c21\u7d20\u306a\u8a18\u8ff0\u3067\u3042\u3089\u3086\u308b\u7269\u4e8b\u3092\u7d71\u4e00\u3057\u3066\u6271\u3048\u307e\u3059\uff0e\n\u3000C++\u3067\u306f\uff0c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u969b\u306b\uff0c\u300c\u305d\u306e\u578b\u304c\u6240\u671b\u3059\u308b\u52d5\u4f5c\u3092\u3057\u305d\u3046\u300d\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u305a\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308a\u767a\u751f\u3059\u308b\u30a8\u30e9\u30fc\u306f\u975e\u5e38\u306b\u5947\u602a\u3067\u3057\u305f\uff0eD\u8a00\u8a9e\u3067\u306f\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5236\u7d04\u3068\u3044\u3046\u3082\u306e\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\uff0c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u524d\u306b\u578b\u30c1\u30a7\u30c3\u30af\u304c\u884c\u3048\u307e\u3059\uff0e\u305f\u3068\u3048\u3070\uff0cstd.traits\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bisAssignable\u3092\u4f7f\u3046\u3068\uff0c\u3042\u308b\u578b\u306b\u5225\u306e\u578b\u3092\u4ee3\u5165\u3067\u304d\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\uff0e\nimport std.traits;\n\nvoid copy(E1, E2)(E1[] src, E2[] dst)\nif(isAssignable!(E2, E1))   // E2\u3078E1\u304c\u4ee3\u5165\u3067\u304d\u308b\u304b\u30c1\u30a7\u30c3\u30af\nin{ assert(src.length == dst.length); }\nbody {\n    foreach(i, e; src)\n        dst[i] = e;\n}\n\n\u3000\u3042\u308b\u578b\u306b\u3064\u3044\u3066\uff0c\u52a0\u7b97\u53ef\u80fd\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306b\u306f2\u901a\u308a\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\uff0e\n\u4e00\u3064\u76ee\u306f\uff0c__traits(compiles, expr)\u3092\u4f7f\u7528\u3057\u3066expr\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u53ef\u80fd\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u65b9\u6cd5\u3067\u3059\uff0e\u4e8c\u3064\u76ee\u306fis(typeof(expr))\u3068\u3044\u3046\u30a4\u30c7\u30a3\u30aa\u30e0\u3067\u3059\uff0e\nis(type)\u306ftype\u304c\u4e0d\u6b63\u306a\u578b\u306e\u5834\u5408false\u3068\u306a\u308a\u307e\u3059\uff0e\u307e\u305f\uff0ctypeof(expr)\u306fexpr\u306e\u578b\u3092\u8fd4\u3057\u307e\u3059\uff0e\u3057\u305f\u304c\u3063\u3066\uff0cis(typeof(expr))\u306fexpr\u304c\u4e0d\u6b63\u306a\u578b\u3092\u6301\u3064\u5834\u5408\u306b\u306ffalse\u3068\u306a\u308a\uff0c\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306ftrue\u3068\u306a\u308a\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c\u578b\u30ec\u30d9\u30eb\u3067\u306e\u6b63\u3057\u3055\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306bis(typeof(expr))\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\n\u3000\u3057\u304b\u3057\u5927\u62b5\u306e\u5834\u5408\uff0c\u4e21\u65b9\u306e\u65b9\u6cd5\u3067\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u306e\u3067\uff0c\u3069\u3061\u3089\u3092\u4f7f\u7528\u3057\u3066\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\uff0c\u500b\u4eba\u7684\u306b\u306fis(typeof(expr))\u306e\u65b9\u304c\u597d\u304d\u3067\u3059\uff0e\u306a\u305c\u304b\u3068\u3044\u3046\u3068\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5236\u7d04\u306f\u300c\u305d\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u300d\u306e\u30c1\u30a7\u30c3\u30af\u3067\u3042\u308b\u304b\u3089\u3067\u3059\uff0e\u547c\u3073\u51fa\u3057\u53ef\u80fd\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u306f\u578b\u30ec\u30d9\u30eb\u306e\u30c1\u30a7\u30c3\u30af\u3067\u3059\u304b\u3089\uff0c\u79c1\u306fis(typeof(expr))\u3092\u7528\u3044\u308b\u307b\u3046\u304c\u826f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\uff0e\nimport std.traits;\n\nT sum(T)(T[] arr)                           // \u5408\u8a08\u3092\u8a08\u7b97\n// if(__traits(compiles, arr[0] + arr[1]))  // \u3053\u3063\u3061\u3067\u3082\u826f\u3044\nif(is(typeof(arr[0] + arr[1]))) {\n    T res = 0;\n    foreach(e; arr)\n        res = res + e;\n\n    return res;\n}\n\n\u3000\u3042\u308b\u6027\u8cea\u3092\u6301\u3064\u3082\u306e\u306e\u6271\u3044\u65b9\u3092\u7d71\u4e00\u3059\u308b\u3053\u3068\u3067\uff0c\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u304c\u884c\u3048\uff0c\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u518d\u5229\u7528\u6027\u304c\u5411\u4e0a\u3057\u307e\u3059\uff0e\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u306fD\u8a00\u8a9e\u306e\u3055\u307e\u3056\u307e\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u6d3b\u7528\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u914d\u5217\u3092\u62e1\u5f35\u3057\u305f\u6982\u5ff5\u3067\u3042\u308b\u30ec\u30f3\u30b8(Range)\u306f\u305d\u306e\u5178\u578b\u7684\u306a\u4f8b\u3067\u3059\uff0e\u5165\u529b\u30ec\u30f3\u30b8(Input-Range)\u306f\u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u3082\u306e\u3092\u8868\u3057\u307e\u3059\uff0e\u578bT\u304c\u306b\u3064\u3044\u3066\uff0c\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308b\u5834\u5408\uff0cT\u306f\u5165\u529b\u30ec\u30f3\u30b8\u3067\u3059\uff0e\nT t;\nauto v = t.front;   // \u5148\u982d\u8981\u7d20\u3092\u53d6\u5f97\u53ef\u80fd\nt.popFront();       // \u30ec\u30f3\u30b8\u306e\u5148\u982d\u3092\u6b21\u306e\u8981\u7d20\u306b\u9032\u3081\u308b\nif(t.empty) {}      // \u30ec\u30f3\u30b8\u306b\u4e00\u3064\u3082\u8981\u7d20\u304c\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u53ef\u80fd\n\n\n\u672c\u6765\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u51a0\u540d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u3000\u3055\u3066\uff0c\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u66f8\u304d\u65b9\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u304c\uff0c\u5b9f\u306f\u3042\u306e\u69cb\u6587\u306f\u7cd6\u8863\u69cb\u6587\u3067\u3059\uff0e\u672c\u6765\uff0cD\u8a00\u8a9e\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u69cb\u6587\u3067\u66f8\u304d\u307e\u3059\uff0e\n// \u4e00\u822c\u7684\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4f8b\ntemplate Pair(T, U)\n{\n    struct Struct { T a; U b; }     // \u3044\u308d\u3044\u308d\u306a\u5ba3\u8a00\u3092\n    class Class { T a; U b; }       // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u306b\u542b\u3081\u3089\u308c\u308b\n\n    Struct makeAsStruct(T a, U b) { return Struct(a, b); }\n    Class makeAsClass(T a, U b) {\n        auto c = new Class;\n        c.a = a; c.b = b;\n        return c;\n    }\n}\n\n// sum\u95a2\u6570\u306e\u4f8b\ntemplate sum(T)\nif(is(typeof((T a){ a = a + a; })) || is(typeof((T a){ a += a; }))) {\n    T sum(T[] arr) {\n        T res = 0;\n        foreach(e; arr)\n            res = add(res, e);\n\n        return res;\n    }\n\n    // a + b\u304b\uff0ca += b\u3067\u5b9f\u884c\u53ef\u80fd\u306a\u65b9\u3092\u9078\u3076\n    T add(T a, T b) {\n      // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6761\u4ef6\u5206\u5c90\n      static if(is(typeof(a + b) : T))  // a+b\u304c\u578b\u7684\u306b\u6b63\u3057\u304f\uff0c\u7d50\u679c\u306e\u578b\u306fT\u3067\u3042\u308b\u304b\uff1f\n        return a + b;\n      else{ a += b; return a; }\n    }\n}\n\nvoid main()\n{\n    import std.stdio;\n\n    int[] arr = [1, 2, 3];\n\n    // Pair\u3092int\u3068float\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\uff0c\u5185\u90e8\u3067\u5ba3\u8a00\u3055\u308c\u305f\u3082\u306e\u3092\u4f7f\u3046\n    Pair!(int, float).Struct pair = Pair!(int, float).makeAsStruct(1, 1);\n\n    // sum\u306e\u3088\u3046\u306b\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d\u3068\u540c\u4e00\u540d\u306e\u5ba3\u8a00\u304c\u3042\u308b\u5834\u5408\uff0c\u7c21\u7565\u3067\u304d\u308b(Eponymous template)\n    writeln(sum!int(arr));\n\n    // \u3055\u3089\u306b\uff0c\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3060\u304b\u3089\uff0c\u5f15\u6570\u304b\u3089\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3092\u63a8\u5b9a\u3057\u3066\u304f\u308c\u308b\n    writeln(sum(arr));\n}\n\n\u3000sum\u95a2\u6570\u306e\u3088\u3046\u306b\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d\u3068\u305d\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u90e8\u3067\u5ba3\u8a00\u3055\u308c\u305f\u3082\u306e\u306e\u8b58\u5225\u5b50\u304c\u540c\u3058\u5834\u5408\uff0cEponymous template\u3068\u3044\u307e\u3059\uff0e\u975e\u6b63\u5f0f\u3067\u5c40\u6240\u7684\u3067\u3059\u304c\uff0cEponymous template\u306f\u65e5\u672c\u8a9e\u3067\u306f\u300c\u51a0\u540d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u300d\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff0e\u51a0\u540d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0c\u95a2\u6570\u3084\u69cb\u9020\u4f53\uff0c\u5171\u7528\u4f53\uff0c\u5b9a\u6570\u5ba3\u8a00\uff0c\u30af\u30e9\u30b9\uff0c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff0calias\u5ba3\u8a00\u306e\u5834\u5408\uff0c\u7cd6\u8863\u69cb\u6587\u3068\u3057\u3066\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\uff0e\nT foo(T)(T a) { return a; }     // \u95a2\u6570\n// template foo(T) { T foo(T a) { return a; } }\n\nstruct FooS(T) { T a; }         // \u69cb\u9020\u4f53\n// template FooS(T) { struct FooS{ T a; } }\n\nunion FooU(T) { T a; }          // \u5171\u7528\u4f53\n// template FooU(T) { union FooU { T a; } }\n\nenum FooConst(T) = T.init;      // \u5b9a\u6570\u5ba3\u8a00\n// template FooConst(T) { enum FooConst = T.init; }\n\nclass FooC(T) { T a; }          // \u30af\u30e9\u30b9\n// template FooC(T) { class FooC { T a; } }\n\ninterface FooI(T) { T foo(); }  // \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n// template FooI(T) { interface FooI { T foo(); } } \n\nalias FooA(T) = T;              // alias\u5ba3\u8a00\n// template FooA(T) { alias FooA = T; }\n\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\n\u3000\u4eca\u307e\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u578b\u306e\u307f\u3092\u7528\u3044\u3066\u304d\u307e\u3057\u305f\u304c\uff0c\u5b9f\u969b\u306b\u306f\u6574\u6570\u5024\u3084\u6587\u5b57\u5217\uff0c\u4efb\u610f\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u5f15\u6570\u306b\u53d6\u308c\u307e\u3059\uff0e\u305f\u3068\u3048\u3070\uff0c\u95a2\u6570\u3092\u53d7\u3051\u53d6\u308a\uff0c\u5185\u90e8\u3067\u305d\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\n// reduce!((a, b) => a + b)(0, arr)\u3067\u7dcf\u548c, reduce!((a, b) => a * b)(1, arr)\u3067\u7dcf\u4e57\nT reduce(alias f, T)(T ini, T[] arr)\nif(is(typeof(binaryFun!f(ini, ini)) : T)) {\n    T res = ini;\n    foreach(e; arr)\n        res = binaryFun!f(res, e);\n\n    return res;\n}\n\n// \u6587\u5b57\u5217 -> \u95a2\u6570\u5909\u63db\uff0cs\u304c\"a+b\"\u306a\u3089a+b\u3092\u8fd4\u3059\nauto binaryFun(string s, T, U)(T a, U b)\nif(is(typeof(mixin(s)))) { return mixin(s); }\n\n// \u95a2\u6570\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\ntemplate binaryFun(alias f)\nif(!is(typeof(f) : string)) { alias binaryFun = f; }\n\n// alias\u306f\u5225\u540d\u5b9a\u7fa9\u306a\u306e\u3067\uff0c\u5909\u6570\u3082\u53c2\u7167\u53ef\u80fd\nvoid setDefaultValue(alias var)() { var = typeof(var).init; }\n\nvoid main() {\n    import std.stdio;\n    int[] arr1 = [1, 2, 3];\n\n    writeln(reduce!\"a+b\"(0, arr1));                 // 6\n    writeln(reduce!((a, b) => a + b)(0, arr1));     // 6\n\n    setDefaultValue!arr1;\n    writeln(arr1);                                  // []\n}\n\n\n\u53ef\u5909\u9577\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\n\u3000C++11\u3067\u306f\uff0c\u53ef\u5909\u9577\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3057\u305f\u304c\uff0cD\u8a00\u8a9e\u3067\u306f\u305d\u308c\u4ee5\u524d\u304b\u3089\u63a1\u7528\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u307e\u305f\uff0cC++11\u3088\u308a\u3082\u308f\u304b\u308a\u3084\u3059\u3044\u69cb\u6587\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u7406\u89e3\u3057\u3084\u3059\u3044\u3067\u3057\u3087\u3046\uff0e\u3053\u3053\u3067\u306f\uff0cD\u306e\u53ef\u5909\u9577\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5f37\u529b\u3055\u3092\u7c21\u5358\u306b\u7d39\u4ecb\u3059\u308b\u305f\u3081\u306b\uff0c\u6e21\u3055\u308c\u305f\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe\u3092\u9023\u7d50\u3057\u3066\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\uff0e\nstring asString(T...)(T args) {\n    import std.conv;\n\n    string dst;\n    foreach(e; args)\n        dst ~= to!string(e);\n\n    return dst;\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(asString(1, 2, 3));         // 123\n    writeln(asString(1, \"23\", 4));      // 1234\n    writeln(asString(null, 1));         // null1\n}\n\n\u3000\u53ef\u5909\u9577\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f<Identifier>...\u3068\u66f8\u304d\u307e\u3059\uff0e\u3053\u3053\u3067\u306fT...\u306a\u306e\u3067T\u304c\u53ef\u5909\u9577\u306e\u5f15\u6570\u30ea\u30b9\u30c8\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u306e\u3088\u3046\u306a\u3082\u306e\u3092\uff0c\u300c\u30bf\u30d7\u30eb\u300d\u3068\u304b\u300c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u300d\u3068\u3044\u3044\u307e\u3059\uff0e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306fforeach\u6587\u3067\u30a4\u30c6\u30ec\u30fc\u30c8\u53ef\u80fd\u3067\uff0cT[idx]\u306e\u3088\u3046\u306bidx\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3067\u3042\u308c\u3070\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3082\u53ef\u80fd\u3067\u3059\uff0e\n\u3000\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306b\u306f\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3082\u306e\u3067\u3042\u308c\u3070\uff0c\u578b\u4ee5\u5916\u3067\u3082\u8981\u7d20\u306b\u542b\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u304c\u5168\u3066\u578b\u306e\u5834\u5408\uff0cargs\u306e\u3088\u3046\u306b\u4eee\u5f15\u6570\u3084\u5909\u6570\u3092\u5b9a\u7fa9\u53ef\u80fd\u3067\uff0c\u3053\u306e\u4eee\u5f15\u6570\u3084\u5909\u6570\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u3068\u306a\u308a\u307e\u3059\uff0e\u5909\u6570\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u305fargs\u306a\u3069\u306e\u3088\u3046\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306f\uff0c\u6b21\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u5909\u6570\u3078\u306ealias\u3068\u306a\u308a\u307e\u3059\uff0e\u3082\u3061\u308d\u3093\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306b\u8a70\u3081\u8fbc\u307e\u308c\u305falias\u3092\u901a\u3057\u3066\uff0c\u5909\u6570\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\uff0e\n// asString\u3092int, string, int\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u5834\u5408\n// __v1, __v2, __v3\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308a\u751f\u6210\u3055\u308c\u308b\u305f\u3081\uff0c\u30b3\u30fc\u30c9\u4e0a\u306b\u306f\u5b9f\u969b\u306f\u5b58\u5728\u3057\u306a\u3044\nstring asString(int __v1, string __v2, int __v3) {\n    alias T = /* (int, string, int)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8 */;\n    alias args = /* (__v1, __v2, __v3)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8 */;\n\n    ...\n}\n\nstruct MyTuple(T...) {\n    T vals;\n\n    /+ MyTuple\u3092(int, string, long)\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\uff0c\u6b21\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u751f\u6210\u3059\u308b\uff0e\n    alias T = /* (int, string, long)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8 */;\n\n    int __v1;\n    string __v2;\n    long __v3;\n    alias vals = /* (__v1, __v2, __v3)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8 */\n    +/\n}\n\n\nvoid main() {\n    import std.stdio;\n\n    MyTuple!(int, string, long) v;\n    v.vals[0] = 1;\n    v.vals[1] = \"abc\";\n    v.vals[2] = 2;\n\n    writeln(v.vals);    // 1abc2\n}\n\n\u3000\u307e\u305f\uff0cstd.meta.AliasSeq\u3092\u4f7f\u3046\u3053\u3068\u3067\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\uff0cstd.meta.AliasSeq\u306e\u4f7f\u3044\u65b9\u3068\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306e\u3055\u307e\u3056\u307e\u306a\u6027\u8cea\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\uff0e\nimport std.stdio, std.meta;\n\n/+ AliasSeq\u306fstd.meta\u5185\u90e8\u3067\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\ntemplate AliasSeq(TList...) { alias AliasSeq = TList; }\n+/\n\nvoid main() {\n    // (int, 1, 2, long, main)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8List\u306e\u5b9a\u7fa9\n    alias List = AliasSeq!(int, 1, 2, long, main);\n\n    /*\n    int\n    1\n    2\n    long\n    main()\n    */\n    foreach(e; List)\n        writeln(e.stringof);\n\n    // (byte, short, int, long)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306e\u5b9a\u7fa9\n    alias TypeList = AliasSeq!(byte, short, int, long);\n\n    // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306f\u81ea\u52d5\u7684\u306b\u5c55\u958b\u3055\u308c\u308b\u306e\u3067\uff0c\n    // AliasSeq!(int, 1, 2, long, main, byte, short, int, long)\n    // \u4e0a\u3068\u7b49\u3057\u3044\n    alias Concatenated = AliasSeq!(List, TypeList);\n\n    // \u30b9\u30e9\u30a4\u30b9\u53ef\u80fd, (long, main, byte, short, int)\n    alias Sliced = Concatenated[3 .. $-1];\n}\n\n\n\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580\n\u3000\u518d\u5229\u7528\u6027\u306e\u9ad8\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\uff0c\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u7d20\u6674\u3089\u3057\u3044\u52b9\u679c\u3092\u767a\u63ee\u3057\u307e\u3059\uff0eC++\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u7528\u3044\u305f\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u8907\u96d1\u3067\u3059\u304c\uff0cD\u8a00\u8a9e\u3067\u306f\u8907\u96d1\u3055\u306f\u3042\u308b\u7a0b\u5ea6\u7de9\u548c\u3055\u308c\uff0c\u305d\u306e\u5f37\u529b\u3055\u306f\u53d7\u3051\u7d99\u304c\u308c\u3066\u3044\u307e\u3059\uff0e\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\uff0c\u6642\u3005\u300c\u95c7\u300d\u3068\u8a00\u308f\u308c\u307e\u3059\u304c\uff0c\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u3068\u3063\u3066\u306f\u5149\u3067\u3042\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3057\u3087\u3046\uff0e\u672c\u7ae0\u3067\u306f\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e2d\u3067\u3082\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a08\u7b97\uff0c\u6587\u5b57\u5217mixin\uff0c\u9759\u7684\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a08\u7b97\n\u3000\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e00\u4f8b\u3068\u3057\u3066\u3088\u304f\u51fa\u3066\u304f\u308b\u3082\u306e\u306f\uff0c\u968e\u4e57\u306e\u8a08\u7b97\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u884c\u3046\u3053\u3068\u3067\u3057\u3087\u3046\uff0eD\u8a00\u8a9e\u306b\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6761\u4ef6\u5206\u5c90\u304c\u53ef\u80fd\u306astatic if\u304c\u3042\u308b\u306e\u3067\uff0c\u7c21\u5358\u306b\u8a18\u8ff0\u53ef\u80fd\u3067\u3059\uff0e\n// \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u7528\u3044\u305f\u968e\u4e57\u306e\u8a08\u7b97\ntemplate factorial(uint N) {\n  static if(N == 0)\n    enum uint factorial = 1;\n  else\n    enum uint factorial = N * factorial!(N-1);\n}\n\n\u3000\u307e\u305f\uff0c\u4e00\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u95a2\u6570\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9f\u884c\u53ef\u80fd\u306a\u306e\u3067\uff0c\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u3067\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u968e\u4e57\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\nuint factorial(uint N) {\n    uint dst = 1;\n    foreach(n; 1 .. N+1)\n        dst *= n;\n\n    return dst;\n}\n\n\n\u6587\u5b57\u5217mixin\n\u3000binaryFun\u3067\u4f7f\u7528\u3057\u307e\u3057\u305f\u304c\uff0cD\u8a00\u8a9e\u306b\u306f\u6587\u5b57\u5217mixin\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u306a\u6587\u5b57\u5217\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u3057\u3066\u89e3\u91c8\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0eDynamically typed\u306a\u8a00\u8a9e\u304c\u6301\u3064eval\u3068\u306e\u9055\u3044\u3067\u3059\u304c\uff0ceval\u306f\u5b9f\u884c\u6642\u306b\u6587\u5b57\u5217\u3092\u30d1\u30fc\u30b9\u3057\u3066\u8a55\u4fa1\u3057\u307e\u3059\u304c\uff0cmixin\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u306a\u6587\u5b57\u5217\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u3057\u3066\u53d6\u308a\u8fbc\u3080\u305f\u3081\u5b9f\u884c\u6642\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u3042\u308a\u307e\u305b\u3093\uff0e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9f\u884c\u53ef\u80fd\u306a\u95a2\u6570\u3067D\u8a00\u8a9e\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\uff0c\u305d\u308c\u3092\u6587\u5b57\u5217mixin\u3059\u308b\u3068\u9762\u767d\u3044\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\n\u3000\u6587\u5b57\u5217mixin\u3092\u7528\u3044\u305f\u4f8b\u3068\u3057\u3066\uff0cnaryFun\u306e\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\uff0enaryFun\u306fbinaryFun\u3092\u4e00\u822c\u5316\u3057\u305f\u3082\u306e\u3067\uff0c\u6587\u5b57\u5217\u304b\u3089\u4efb\u610f\u500b\u6570\u306e\u5f15\u6570\u304b\u3089\u306a\u308b\u95a2\u6570\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\uff0enaryFun!\"a+b+c\"\u306a\u3089\u5f15\u65703\u3064\u306e\u548c\u3067\u3059\u3057\uff0cnaryFun!\"a(b, c, d)\"\u306f\u7b2c1\u5f15\u6570\u3092\u7b2c2, 3, 4\u5f15\u6570\u3067\u547c\u3073\u51fa\u3059\u95a2\u6570\u306b\u306a\u308a\u307e\u3059\uff0enaryFun\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\uff0e\ntemplate naryFun(alias fun) if(is(typeof(fun) == string)) {\n    auto ref naryFun(T...)(auto ref T args) {\n        static assert(T.length <= 26);      // a ~ z\u306e\u7bc4\u56f2\u306b\u53ce\u307e\u308b\u304b\u30c1\u30a7\u30c3\u30af\n        mixin(generateVariables(T.length)); // \u5909\u6570a ~ z\u3092\u5ba3\u8a00\u3059\u308b\u30b3\u30fc\u30c9\u3092mixin\n        return mixin(fun);                  // fun\u3092mixin\n    }\n\n\n    // \u5909\u6570 a ~ z \u3092\u5ba3\u8a00\u3059\u308b\u30b3\u30fc\u30c9\u3092\u751f\u6210\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9f\u884c\u53ef\u80fd\n    string generateVariables(size_t nparam) {\n        import std.array, std.format;\n\n        auto app = appender!string();\n        foreach(i; 0 .. nparam)         // \u30b3\u30fc\u30c9\u751f\u6210\n            formattedWrite(app, \"alias %s = args[%s];\\n\", cast(char)(i + 'a'), i);\n\n        return app.data;\n    }\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(naryFun!\"a+z\"(1,2,3,4,5,6,7,8,9,10,11,12,13,\n                          14,15,16,17,18,19,20,21,22,23,\n                          24,25,26));               // 27\n    writeln(naryFun!\"a+b+c\"(1, 2, 3));              // 6\n    writeln(naryFun!\"a\"(1, 2, 3));                  // 1\n    writeln(naryFun!\"a(b)\"((int a) => a+1, 2));     // 3\n}\n\n\n\u9759\u7684\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\n\u3000\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306f\uff0c\u4e3b\u306bDynamically typed\u306a\u8a00\u8a9e\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u8a00\u8a9e\u3067\u3088\u304f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u5358\u306b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u3044\u3048\u3070\u5b9f\u884c\u6642\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u6307\u3057\uff0c\u5b9f\u884c\u6642\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3069\u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u304b\u30c1\u30a7\u30c3\u30af\u3057\u305f\u308a\u3067\u304d\u308b\u6a5f\u80fd\u3067\u3059\uff0eD\u8a00\u8a9e\u3067\u306f\u4eca\u306e\u3068\u3053\u308d\u5b9f\u884c\u6642\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u3067\u304d\u307e\u305b\u3093\u304c\uff0c\u9759\u7684\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\uff0c\u3064\u307e\u308a\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306a\u3089\u884c\u3048\u307e\u3059\uff0e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306f\uff0c\u4efb\u610f\u306e\u578b\u306b\u3064\u3044\u3066\uff0c\u305d\u306e\u578b\u304c\u6301\u3064\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u4e00\u89a7\u3084\u30d5\u30a3\u30fc\u30eb\u30c9(\u30e1\u30f3\u30d0\u5909\u6570, \u975e\u516c\u958b\u3092\u542b\u3080)\u4e00\u89a7\uff0c\u3082\u3057\u304f\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5c5e\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u305f\u308a\u3057\u307e\u3059\uff0e\u3053\u3053\u3067\u306f\u7c21\u5358\u306b\uff0c\u4efb\u610f\u306e\u69cb\u9020\u4f53\u306e\u578bT\u306b\u3064\u3044\u3066\uff0c\u305d\u306e\u578b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u4e00\u89a7\u3092\u51fa\u529b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\nimport std.stdio;\n\nvoid printAllField(T)(T val) {\n    foreach(i, ref e; val.tupleof){\n        writefln(\"%s %s = %s;\",\n            typeof(e).stringof,\n            val.tupleof[i].stringof[4 .. $],    // \u5148\u982d\u306e \"val.\" \u3092\u30b9\u30ad\u30c3\u30d7\n            e);\n    }\n}\n\nvoid main() {\n    static struct S { int a, b; string c; }\n\n    /* \u6b21\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u308b\n    int a = 1;\n    int b = 2;\n    string c = 3;\n    */\n    printAllField(s);\n}\n\n\u3000\u3053\u306e\u4f8b\u4ee5\u5916\u306b\u3082\uff0cstd.traits\u3084__traits\u306b\u3088\u3063\u3066\u3055\u307e\u3056\u307e\u306a\u3053\u3068\u304c\u884c\u3048\u307e\u3059\uff0e\u8a00\u3044\u51fa\u3059\u3068\u304d\u308a\u304c\u306a\u3044\u306e\u3068\uff0c\u30b3\u30b3\u3089\u3078\u3093\u306f\u3084\u308a\u305f\u3044\u3053\u3068\u306b\u3088\u3063\u3066\u5168\u7136\u9055\u3046\u306e\u3067\uff0c\u8208\u5473\u304c\u3042\u308a\u307e\u3057\u305f\u3089std.traits\u3084__traits\u6a5f\u80fd\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\u307e\u3068\u3081\n\u3000\u4eca\u56de\u306fD\u8a00\u8a9e\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3057\u305f\uff0e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cD\u8a00\u8a9e\u306e\u91cd\u8981\u306a\u6a5f\u80fd\u306e\u4e00\u3064\u3067\uff0c\u3053\u308c\u3092\u30de\u30b9\u30bf\u30fc\u3059\u308b\u3053\u3068\u3067\u7d20\u6674\u3089\u3057\u3044\u751f\u7523\u6027\u3092\u767a\u63ee\u3067\u304d\u307e\u3059\uff0eC\u8a00\u8a9eer\u3084C++er\u306e\u65b9\u3067\u3082\u3057D\u8a00\u8a9e\u306b\u8208\u5473\u304c\u6e67\u3044\u305f\u3089\uff0c\u65e9\u901f\u5165\u9580\u3057\u307e\u3057\u3087\u3046\uff0eD\u8a00\u8a9e\u3092\u52c9\u5f37\u3059\u308b\u3053\u3068\u3067\uff0cC++\u306e\u7406\u89e3\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u306e\u3067\uff0cC++\u3092\u7406\u89e3\u3067\u304d\u306a\u3044\u4eba\u306f\uff0c\u307e\u305aD\u8a00\u8a9e\u3067\u904a\u3093\u3067\u307f\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c\u305d\u306e\u4ed6\u306e\u8a00\u8a9e\u3092\u4f7f\u7528\u3057\u3066\u308b\u4eba\u3067\u3082\u975e\u5e38\u306b\u7c21\u5358\u306b\u5165\u9580\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u305c\u3072\u305c\u3072\uff0e\n## \u306f\u3058\u3081\u306b\n\n\u3000\u4eca\u5e74\u306e\u8a18\u4e8b\u306f\uff0c\u30bf\u30a4\u30c8\u30eb\u304b\u3089\u3082\u308f\u304b\u308b\u3088\u3046\u306bC++\u306f\u3061\u3087\u3063\u3068\u89e6\u3063\u305f\u3053\u3068\u3042\u308b\u3051\u3069D\u8a00\u8a9e\u306f\u77e5\u3089\u306a\u3044\u3088\u3063\u3066\u4eba\u5411\u3051\u3067\u3059\uff0eC++\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0c\u521d\u5fc3\u8005\uff0c\u3082\u3057\u304f\u306f\u4e2d\u7d1a\u8005\u306b\u3068\u3063\u3066\u3082\u975e\u5e38\u306b\u96e3\u3057\u3044\u6a5f\u80fd\u3067\u3059\uff0eD\u8a00\u8a9e\u306fC++\u3092\u53c2\u8003\u306b\u4f5c\u3089\u308c\u305f\u8a00\u8a9e\u3067\u3042\u308a\uff0cD\u8a00\u8a9e\u306b\u3082C++\u76f8\u5f53\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\uff0e\u3057\u304b\u3057\u306a\u304c\u3089\uff0cD\u8a00\u8a9e\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\uff0c\u521d\u5fc3\u8005\u306b\u3068\u3063\u3066\u3082\u5b66\u3073\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u305d\u3046\u3044\u3046\u3053\u3068\u3067\uff0c\u4eca\u56de\u306fD\u8a00\u8a9e\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n\u3000\u3042\u3068\uff0c\u3053\u306e\u8a18\u4e8b\u306f\u8c4a\u6a4b\u6280\u8853\u79d1\u5b66\u5927\u5b66\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30af\u30e9\u30d6(\u6771\u30e239a)\u304c\u30b3\u30df\u30c3\u30af\u30de\u30fc\u30b1\u30c3\u30c8C89\u306b\u3066\u9812\u5e03\u3059\u308b\u90e8\u8a8c\u7528\u306b\u66f8\u3044\u305f\u3082\u306e\u3067\u3059\uff0e\u5f53\u65e5\u306f\u30b5\u30fc\u30af\u30eb\u4f5c\u306e\u30b2\u30fc\u30e0\u3082\u3042\u308b\u3088\u3046\u306a\u306e\u3067\uff0c\u90e8\u8a8c\u3068\u5408\u308f\u305b\u3066\u305c\u3072\u305c\u3072(\u5ba3\u4f1d)\uff0e\n\n### \u30b3\u30fc\u30c9\u306e\u30b9\u30bf\u30a4\u30eb\u306b\u3064\u3044\u3066\n\n\u3000\u3053\u306e\u6587\u7ae0\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306e\u3046\u3061\uff0c\u3044\u304f\u3064\u304b\u306f\u975e\u5e38\u306b\u5909\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3068\u306a\u3063\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u3053\u308c\u306f\u7d19\u306b\u5370\u5237\u3059\u308b\u3068\u3044\u3046\u5236\u7d04\u304b\u3089\u751f\u3058\u308b\u3082\u306e\u3067\u3059\u306e\u3067\uff0c\u3069\u3046\u304b\u8a31\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\n## \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u306f\n\n\u3000\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3064\u3044\u3066\u89e3\u8aac\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u305d\u3082\u305d\u3082\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u306f\u3069\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3067\uff0c\u3069\u306e\u3088\u3046\u306a\u5f79\u5272\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u304b\u3092\u8aac\u660e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u95a2\u6570\u304c\u3042\u308b\u7406\u7531\u306f\uff0c\u3042\u308b\u6a5f\u80fd\u3084\u624b\u9806\u3092\u518d\u5229\u7528\u3059\u308b\u305f\u3081\u3067\u3057\u305f\uff0e\u305f\u3068\u3048\u3070\uff0c`int`\u578b\u3092\u8981\u7d20\u3068\u3057\u3066\u6301\u3064\u914d\u5217`int[] arr`\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff0e\n\n~~~~~~~~~~~d\nint sum(int[] arr) {\n    int res;        // D\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30670\u521d\u671f\u5316\n    foreach(e; arr) // \u914d\u5217\u3092\u9806\u306b\u30a4\u30c6\u30ec\u30fc\u30c8\n        res += e;\n\n    return res;\n}\n~~~~~~~~~~~~\n\n\u3053\u306e\u3088\u3046\u306b`sum`\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u3051\u3070\uff0c`int[]`\u578b\u306e\u7dcf\u548c\u3092\u8a08\u7b97\u3057\u305f\u3044\u3068\u304d\uff0c`sum`\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u826f\u304f\u306a\u308a\u307e\u3059\uff0e\n\n\u3000\u3082\u3057`sum`\u95a2\u6570\u3092`long[]`\u3084`float[]`\u306a\u3069\u3067\u4f7f\u3044\u305f\u304f\u306a\u3063\u305f\u5834\u5408\u306f\u3069\u3046\u3057\u307e\u3057\u3087\u3046\uff1f\n\u611a\u76f4\u306b\u5404\u578b\u306b\u3064\u3044\u3066\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u76f4\u3057\u307e\u3059\u304b\uff1f\u3067\u306f\uff0c`double[]`\u3084\u8907\u7d20\u6570\u578b`cfloat[]`\u3082\u5b9f\u88c5\u3057\u307e\u3059\u304b\uff1f\u3082\u3057\u304f\u306f`byte[]`\u3084`short[]`\u306f\uff1f\u305d\u3053\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u767b\u5834\u3067\u3059\uff0e\n\n\n## \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n\u3000`sum`\u95a2\u6570\u3092\u4efb\u610f\u306e\u578b\u306b\u62e1\u5f35\u3057\u307e\u3057\u3087\u3046\uff0e\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\uff0e\n\n~~~~~~~~~d\nimport std.stdio;\n\nT sum(T)(T[] arr) {\n    T res = 0;\n    foreach(e; arr)\n        res = res + e;\n\n    return res;\n}\n\nvoid main() {\n    int[] arr = [1, 2, 3];\n    writeln(sum(arr));      // 6\n}\n~~~~~~~~~~\n\n\u3000\u3069\u3053\u304c\u5909\u308f\u3063\u305f\u304b\u308f\u304b\u308a\u307e\u3059\u3088\u306d\uff1f`T`\u3068\u3044\u3046\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\uff0e\u3053\u308c\u306f\uff0c\u95a2\u6570\u540d\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9593\u306b`(T)`\u3068\u66f8\u304f\u3060\u3051\u3067\u3059\uff0e\u3042\u3068\u306f\uff0c\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u3053\u3068\u3092\u8003\u616e\u3057\u3066`res`\u3092\u30bc\u30ed\u521d\u671f\u5316\u3057\u307e\u3057\u305f\uff0e\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u547c\u3073\u51fa\u3059\u5834\u5408\u306f\uff0c`T`\u306f\u81ea\u52d5\u7684\u306b\u5f15\u6570\u304b\u3089\u63a8\u8ad6\u3055\u308c\u307e\u3059\uff0e\n\n\u3000\u3082\u3057\uff0c\u8907\u6570\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5fc5\u8981\u3067\u3042\u308c\u3070\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3060\u3051\u3067\u3059\uff0e\n\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3057\u3087\u3046\uff1f\n\n~~~~~~~~~d\nvoid copy(E1, E2)(E1[] src, E2[] dst)       // src\u304b\u3089dst\u306b\u30b3\u30d4\u30fc\nin { assert(src.length == dst.length); }    // \u5b9f\u884c\u6642\u306b\u30b5\u30a4\u30ba\u30c1\u30a7\u30c3\u30af\nbody {\n    foreach(i, e; src)\n        dst[i] = e;     // \u30b3\u30d4\u30fc\n}\n~~~~~~~~~~\n\n\n## \u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u3068\u5236\u7d04\n\n\u3000\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u3068\u306f\uff0c\n\n> If it walks like a duck and quacks like a duck, it must be a duck. (\u3082\u3057\u305d\u3044\u3064\u304c\u30a2\u30d2\u30eb\u306e\u3088\u3046\u306b\u6b69\u304d\uff0c\u30a2\u30d2\u30eb\u306e\u3088\u3046\u306b\u9cf4\u304f\u306e\u3067\u3042\u308c\u3070\uff0c\u305d\u3044\u3064\u306f\u9593\u9055\u3044\u306a\u304f\u30a2\u30d2\u30eb\u3060)\n\n\u3068\u3044\u3046\u306a\u3093\u3068\u3082\u9762\u767d\u3044\u8a00\u8449\u304c\u5143\u306b\u306a\u3063\u305f\u7528\u8a9e\u3067\u3059\uff0e\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u81ea\u4f53\u306e\u610f\u5473\u306f\uff0c\u300c\u3042\u308b\u578b\u306b\u3044\u3066\uff0c\u6240\u671b\u3059\u308b\u52d5\u4f5c\u3092\u3057\u305d\u3046\u3067\u3042\u308c\u3070\uff0c\u305d\u306e\u578b\u306f\u6240\u671b\u3059\u308b\u578b\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u3067\u3059\uff0e\u3082\u3063\u3068\u5177\u4f53\u7684\u306b\u8a00\u3044\u307e\u3057\u3087\u3046\uff0e\u305f\u3068\u3048\u3070\uff0c`sum`\u95a2\u6570\u306f\u300c\u3042\u308b\u578b\u306b\u3064\u3044\u3066\u4e8c\u9805\u6f14\u7b97\u5b50`+`\u3092\u7528\u3044\u3066\u52a0\u7b97\u3092\u8868\u305b\u308b\u3088\u3046\u306a\u578b\u300d\u306b\u3064\u3044\u3066\u95a2\u6570\u3092\u5b9f\u884c\u53ef\u80fd\u3067\u3059\uff0e\n\n\u3000\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u969b\u306b\u521d\u3081\u3066\u578b\u30ec\u30d9\u30eb\u3067\u30b3\u30fc\u30c9\u306e\u6b63\u3057\u3055\u304c\u30c1\u30a7\u30c3\u30af\u3055\u308c\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c\u3042\u308b\u578b`T`\u304c`+`\u6f14\u7b97\u5b50\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3084\uff0c`E2`\u306b`E1`\u306e\u5024\u304c\u30b3\u30d4\u30fc\u53ef\u80fd\u304b\u3069\u3046\u304b\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u6642\u306b\u306f\u3058\u3081\u3066\u30c1\u30a7\u30c3\u30af\u3055\u308c\u307e\u3059\uff0e\u3053\u306e\u7d50\u679c\uff0cC++\u3084D\u8a00\u8a9e\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u9759\u7684\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3067\u304d\u3066\u3044\u307e\u3059\uff0e\u9759\u7684\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u306b\u3088\u308a\uff0c\u7d20\u6674\u3089\u3057\u304f\u7c21\u7d20\u306a\u8a18\u8ff0\u3067\u3042\u3089\u3086\u308b\u7269\u4e8b\u3092\u7d71\u4e00\u3057\u3066\u6271\u3048\u307e\u3059\uff0e\n\n\u3000C++\u3067\u306f\uff0c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u969b\u306b\uff0c\u300c\u305d\u306e\u578b\u304c\u6240\u671b\u3059\u308b\u52d5\u4f5c\u3092\u3057\u305d\u3046\u300d\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u305a\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3088\u308a\u767a\u751f\u3059\u308b\u30a8\u30e9\u30fc\u306f\u975e\u5e38\u306b\u5947\u602a\u3067\u3057\u305f\uff0eD\u8a00\u8a9e\u3067\u306f\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5236\u7d04\u3068\u3044\u3046\u3082\u306e\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\uff0c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u524d\u306b\u578b\u30c1\u30a7\u30c3\u30af\u304c\u884c\u3048\u307e\u3059\uff0e\u305f\u3068\u3048\u3070\uff0c`std.traits`\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b`isAssignable`\u3092\u4f7f\u3046\u3068\uff0c\u3042\u308b\u578b\u306b\u5225\u306e\u578b\u3092\u4ee3\u5165\u3067\u304d\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3067\u304d\u307e\u3059\uff0e\n\n~~~~~~~~~d\nimport std.traits;\n\nvoid copy(E1, E2)(E1[] src, E2[] dst)\nif(isAssignable!(E2, E1))   // E2\u3078E1\u304c\u4ee3\u5165\u3067\u304d\u308b\u304b\u30c1\u30a7\u30c3\u30af\nin{ assert(src.length == dst.length); }\nbody {\n    foreach(i, e; src)\n        dst[i] = e;\n}\n~~~~~~~~~~\n\n\u3000\u3042\u308b\u578b\u306b\u3064\u3044\u3066\uff0c\u52a0\u7b97\u53ef\u80fd\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u306b\u306f2\u901a\u308a\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\uff0e\n\u4e00\u3064\u76ee\u306f\uff0c`__traits(compiles, expr)`\u3092\u4f7f\u7528\u3057\u3066`expr`\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u53ef\u80fd\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u65b9\u6cd5\u3067\u3059\uff0e\u4e8c\u3064\u76ee\u306f`is(typeof(expr))`\u3068\u3044\u3046\u30a4\u30c7\u30a3\u30aa\u30e0\u3067\u3059\uff0e\n`is(type)`\u306f`type`\u304c\u4e0d\u6b63\u306a\u578b\u306e\u5834\u5408`false`\u3068\u306a\u308a\u307e\u3059\uff0e\u307e\u305f\uff0c`typeof(expr)`\u306f`expr`\u306e\u578b\u3092\u8fd4\u3057\u307e\u3059\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c`is(typeof(expr))`\u306f`expr`\u304c\u4e0d\u6b63\u306a\u578b\u3092\u6301\u3064\u5834\u5408\u306b\u306f`false`\u3068\u306a\u308a\uff0c\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f`true`\u3068\u306a\u308a\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c\u578b\u30ec\u30d9\u30eb\u3067\u306e\u6b63\u3057\u3055\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306b`is(typeof(expr))`\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\n\n\u3000\u3057\u304b\u3057\u5927\u62b5\u306e\u5834\u5408\uff0c\u4e21\u65b9\u306e\u65b9\u6cd5\u3067\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u306e\u3067\uff0c\u3069\u3061\u3089\u3092\u4f7f\u7528\u3057\u3066\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u304c\uff0c\u500b\u4eba\u7684\u306b\u306f`is(typeof(expr))`\u306e\u65b9\u304c\u597d\u304d\u3067\u3059\uff0e\u306a\u305c\u304b\u3068\u3044\u3046\u3068\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5236\u7d04\u306f\u300c\u305d\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u300d\u306e\u30c1\u30a7\u30c3\u30af\u3067\u3042\u308b\u304b\u3089\u3067\u3059\uff0e\u547c\u3073\u51fa\u3057\u53ef\u80fd\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u306f\u578b\u30ec\u30d9\u30eb\u306e\u30c1\u30a7\u30c3\u30af\u3067\u3059\u304b\u3089\uff0c\u79c1\u306f`is(typeof(expr))`\u3092\u7528\u3044\u308b\u307b\u3046\u304c\u826f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\uff0e\n\n~~~~~~~~~d\nimport std.traits;\n\nT sum(T)(T[] arr)                           // \u5408\u8a08\u3092\u8a08\u7b97\n// if(__traits(compiles, arr[0] + arr[1]))  // \u3053\u3063\u3061\u3067\u3082\u826f\u3044\nif(is(typeof(arr[0] + arr[1]))) {\n    T res = 0;\n    foreach(e; arr)\n        res = res + e;\n\n    return res;\n}\n~~~~~~~~~~\n\n\n\u3000\u3042\u308b\u6027\u8cea\u3092\u6301\u3064\u3082\u306e\u306e\u6271\u3044\u65b9\u3092\u7d71\u4e00\u3059\u308b\u3053\u3068\u3067\uff0c\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u304c\u884c\u3048\uff0c\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u518d\u5229\u7528\u6027\u304c\u5411\u4e0a\u3057\u307e\u3059\uff0e\u30c0\u30c3\u30af\u30bf\u30a4\u30d4\u30f3\u30b0\u306fD\u8a00\u8a9e\u306e\u3055\u307e\u3056\u307e\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u6d3b\u7528\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u914d\u5217\u3092\u62e1\u5f35\u3057\u305f\u6982\u5ff5\u3067\u3042\u308b\u30ec\u30f3\u30b8(Range)\u306f\u305d\u306e\u5178\u578b\u7684\u306a\u4f8b\u3067\u3059\uff0e\u5165\u529b\u30ec\u30f3\u30b8(Input-Range)\u306f\u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u3082\u306e\u3092\u8868\u3057\u307e\u3059\uff0e\u578b`T`\u304c\u306b\u3064\u3044\u3066\uff0c\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308b\u5834\u5408\uff0c`T`\u306f\u5165\u529b\u30ec\u30f3\u30b8\u3067\u3059\uff0e\n\n~~~~~~~~d\nT t;\nauto v = t.front;   // \u5148\u982d\u8981\u7d20\u3092\u53d6\u5f97\u53ef\u80fd\nt.popFront();       // \u30ec\u30f3\u30b8\u306e\u5148\u982d\u3092\u6b21\u306e\u8981\u7d20\u306b\u9032\u3081\u308b\nif(t.empty) {}      // \u30ec\u30f3\u30b8\u306b\u4e00\u3064\u3082\u8981\u7d20\u304c\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\u53ef\u80fd\n~~~~~~~~~\n\n\n## \u672c\u6765\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u51a0\u540d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n\u3000\u3055\u3066\uff0c\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u66f8\u304d\u65b9\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u304c\uff0c\u5b9f\u306f\u3042\u306e\u69cb\u6587\u306f\u7cd6\u8863\u69cb\u6587\u3067\u3059\uff0e\u672c\u6765\uff0cD\u8a00\u8a9e\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u69cb\u6587\u3067\u66f8\u304d\u307e\u3059\uff0e\n\n~~~~~~~~~~~d\n// \u4e00\u822c\u7684\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4f8b\ntemplate Pair(T, U)\n{\n    struct Struct { T a; U b; }     // \u3044\u308d\u3044\u308d\u306a\u5ba3\u8a00\u3092\n    class Class { T a; U b; }       // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u306b\u542b\u3081\u3089\u308c\u308b\n\n    Struct makeAsStruct(T a, U b) { return Struct(a, b); }\n    Class makeAsClass(T a, U b) {\n        auto c = new Class;\n        c.a = a; c.b = b;\n        return c;\n    }\n}\n\n// sum\u95a2\u6570\u306e\u4f8b\ntemplate sum(T)\nif(is(typeof((T a){ a = a + a; })) || is(typeof((T a){ a += a; }))) {\n    T sum(T[] arr) {\n        T res = 0;\n        foreach(e; arr)\n            res = add(res, e);\n\n        return res;\n    }\n\n    // a + b\u304b\uff0ca += b\u3067\u5b9f\u884c\u53ef\u80fd\u306a\u65b9\u3092\u9078\u3076\n    T add(T a, T b) {\n      // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6761\u4ef6\u5206\u5c90\n      static if(is(typeof(a + b) : T))  // a+b\u304c\u578b\u7684\u306b\u6b63\u3057\u304f\uff0c\u7d50\u679c\u306e\u578b\u306fT\u3067\u3042\u308b\u304b\uff1f\n        return a + b;\n      else{ a += b; return a; }\n    }\n}\n\nvoid main()\n{\n    import std.stdio;\n\n    int[] arr = [1, 2, 3];\n\n    // Pair\u3092int\u3068float\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\uff0c\u5185\u90e8\u3067\u5ba3\u8a00\u3055\u308c\u305f\u3082\u306e\u3092\u4f7f\u3046\n    Pair!(int, float).Struct pair = Pair!(int, float).makeAsStruct(1, 1);\n\n    // sum\u306e\u3088\u3046\u306b\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d\u3068\u540c\u4e00\u540d\u306e\u5ba3\u8a00\u304c\u3042\u308b\u5834\u5408\uff0c\u7c21\u7565\u3067\u304d\u308b(Eponymous template)\n    writeln(sum!int(arr));\n\n    // \u3055\u3089\u306b\uff0c\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3060\u304b\u3089\uff0c\u5f15\u6570\u304b\u3089\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3092\u63a8\u5b9a\u3057\u3066\u304f\u308c\u308b\n    writeln(sum(arr));\n}\n~~~~~~~~~~~~\n\n\u3000`sum`\u95a2\u6570\u306e\u3088\u3046\u306b\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u540d\u3068\u305d\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u90e8\u3067\u5ba3\u8a00\u3055\u308c\u305f\u3082\u306e\u306e\u8b58\u5225\u5b50\u304c\u540c\u3058\u5834\u5408\uff0cEponymous template\u3068\u3044\u307e\u3059\uff0e\u975e\u6b63\u5f0f\u3067\u5c40\u6240\u7684\u3067\u3059\u304c\uff0cEponymous template\u306f\u65e5\u672c\u8a9e\u3067\u306f\u300c\u51a0\u540d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u300d\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\uff0e\u51a0\u540d\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0c\u95a2\u6570\u3084\u69cb\u9020\u4f53\uff0c\u5171\u7528\u4f53\uff0c\u5b9a\u6570\u5ba3\u8a00\uff0c\u30af\u30e9\u30b9\uff0c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\uff0calias\u5ba3\u8a00\u306e\u5834\u5408\uff0c\u7cd6\u8863\u69cb\u6587\u3068\u3057\u3066\u6b21\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\uff0e\n\n~~~~~~~~d\nT foo(T)(T a) { return a; }     // \u95a2\u6570\n// template foo(T) { T foo(T a) { return a; } }\n\nstruct FooS(T) { T a; }         // \u69cb\u9020\u4f53\n// template FooS(T) { struct FooS{ T a; } }\n\nunion FooU(T) { T a; }          // \u5171\u7528\u4f53\n// template FooU(T) { union FooU { T a; } }\n\nenum FooConst(T) = T.init;      // \u5b9a\u6570\u5ba3\u8a00\n// template FooConst(T) { enum FooConst = T.init; }\n\nclass FooC(T) { T a; }          // \u30af\u30e9\u30b9\n// template FooC(T) { class FooC { T a; } }\n\ninterface FooI(T) { T foo(); }  // \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n// template FooI(T) { interface FooI { T foo(); } } \n\nalias FooA(T) = T;              // alias\u5ba3\u8a00\n// template FooA(T) { alias FooA = T; }\n~~~~~~~~\n\n\n## \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d1\u30e9\u30e1\u30fc\u30bf\n\n\u3000\u4eca\u307e\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u306f\u578b\u306e\u307f\u3092\u7528\u3044\u3066\u304d\u307e\u3057\u305f\u304c\uff0c\u5b9f\u969b\u306b\u306f\u6574\u6570\u5024\u3084\u6587\u5b57\u5217\uff0c\u4efb\u610f\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u5f15\u6570\u306b\u53d6\u308c\u307e\u3059\uff0e\u305f\u3068\u3048\u3070\uff0c\u95a2\u6570\u3092\u53d7\u3051\u53d6\u308a\uff0c\u5185\u90e8\u3067\u305d\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\n\n~~~~~~~d\n// reduce!((a, b) => a + b)(0, arr)\u3067\u7dcf\u548c, reduce!((a, b) => a * b)(1, arr)\u3067\u7dcf\u4e57\nT reduce(alias f, T)(T ini, T[] arr)\nif(is(typeof(binaryFun!f(ini, ini)) : T)) {\n    T res = ini;\n    foreach(e; arr)\n        res = binaryFun!f(res, e);\n\n    return res;\n}\n\n// \u6587\u5b57\u5217 -> \u95a2\u6570\u5909\u63db\uff0cs\u304c\"a+b\"\u306a\u3089a+b\u3092\u8fd4\u3059\nauto binaryFun(string s, T, U)(T a, U b)\nif(is(typeof(mixin(s)))) { return mixin(s); }\n\n// \u95a2\u6570\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\ntemplate binaryFun(alias f)\nif(!is(typeof(f) : string)) { alias binaryFun = f; }\n\n// alias\u306f\u5225\u540d\u5b9a\u7fa9\u306a\u306e\u3067\uff0c\u5909\u6570\u3082\u53c2\u7167\u53ef\u80fd\nvoid setDefaultValue(alias var)() { var = typeof(var).init; }\n\nvoid main() {\n    import std.stdio;\n    int[] arr1 = [1, 2, 3];\n\n    writeln(reduce!\"a+b\"(0, arr1));                 // 6\n    writeln(reduce!((a, b) => a + b)(0, arr1));     // 6\n\n    setDefaultValue!arr1;\n    writeln(arr1);                                  // []\n}\n~~~~~~~~\n\n\n## \u53ef\u5909\u9577\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\n\n\u3000C++11\u3067\u306f\uff0c\u53ef\u5909\u9577\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3057\u305f\u304c\uff0cD\u8a00\u8a9e\u3067\u306f\u305d\u308c\u4ee5\u524d\u304b\u3089\u63a1\u7528\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u307e\u305f\uff0cC++11\u3088\u308a\u3082\u308f\u304b\u308a\u3084\u3059\u3044\u69cb\u6587\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\uff0c\u7406\u89e3\u3057\u3084\u3059\u3044\u3067\u3057\u3087\u3046\uff0e\u3053\u3053\u3067\u306f\uff0cD\u306e\u53ef\u5909\u9577\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5f37\u529b\u3055\u3092\u7c21\u5358\u306b\u7d39\u4ecb\u3059\u308b\u305f\u3081\u306b\uff0c\u6e21\u3055\u308c\u305f\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe\u3092\u9023\u7d50\u3057\u3066\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\uff0e\n\n~~~~~~d\nstring asString(T...)(T args) {\n    import std.conv;\n\n    string dst;\n    foreach(e; args)\n        dst ~= to!string(e);\n\n    return dst;\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(asString(1, 2, 3));         // 123\n    writeln(asString(1, \"23\", 4));      // 1234\n    writeln(asString(null, 1));         // null1\n}\n~~~~~~~\n\n\u3000\u53ef\u5909\u9577\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f`<Identifier>...`\u3068\u66f8\u304d\u307e\u3059\uff0e\u3053\u3053\u3067\u306f`T...`\u306a\u306e\u3067`T`\u304c\u53ef\u5909\u9577\u306e\u5f15\u6570\u30ea\u30b9\u30c8\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u306e\u3088\u3046\u306a\u3082\u306e\u3092\uff0c\u300c\u30bf\u30d7\u30eb\u300d\u3068\u304b\u300c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u300d\u3068\u3044\u3044\u307e\u3059\uff0e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306f`foreach`\u6587\u3067\u30a4\u30c6\u30ec\u30fc\u30c8\u53ef\u80fd\u3067\uff0c`T[idx]`\u306e\u3088\u3046\u306b`idx`\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3067\u3042\u308c\u3070\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3082\u53ef\u80fd\u3067\u3059\uff0e\n\u3000\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306b\u306f\uff0c\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3082\u306e\u3067\u3042\u308c\u3070\uff0c\u578b\u4ee5\u5916\u3067\u3082\u8981\u7d20\u306b\u542b\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u304c\u5168\u3066\u578b\u306e\u5834\u5408\uff0c`args`\u306e\u3088\u3046\u306b\u4eee\u5f15\u6570\u3084\u5909\u6570\u3092\u5b9a\u7fa9\u53ef\u80fd\u3067\uff0c\u3053\u306e\u4eee\u5f15\u6570\u3084\u5909\u6570\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u3068\u306a\u308a\u307e\u3059\uff0e\u5909\u6570\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u305f`args`\u306a\u3069\u306e\u3088\u3046\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306f\uff0c\u6b21\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308a\u751f\u6210\u3055\u308c\u305f\u5909\u6570\u3078\u306ealias\u3068\u306a\u308a\u307e\u3059\uff0e\u3082\u3061\u308d\u3093\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306b\u8a70\u3081\u8fbc\u307e\u308c\u305falias\u3092\u901a\u3057\u3066\uff0c\u5909\u6570\u306e\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\uff0e\n\n~~~~~~~d\n// asString\u3092int, string, int\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u5834\u5408\n// __v1, __v2, __v3\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308a\u751f\u6210\u3055\u308c\u308b\u305f\u3081\uff0c\u30b3\u30fc\u30c9\u4e0a\u306b\u306f\u5b9f\u969b\u306f\u5b58\u5728\u3057\u306a\u3044\nstring asString(int __v1, string __v2, int __v3) {\n    alias T = /* (int, string, int)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8 */;\n    alias args = /* (__v1, __v2, __v3)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8 */;\n\n    ...\n}\n\nstruct MyTuple(T...) {\n    T vals;\n\n    /+ MyTuple\u3092(int, string, long)\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\uff0c\u6b21\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u751f\u6210\u3059\u308b\uff0e\n    alias T = /* (int, string, long)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8 */;\n\n    int __v1;\n    string __v2;\n    long __v3;\n    alias vals = /* (__v1, __v2, __v3)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8 */\n    +/\n}\n\n\nvoid main() {\n    import std.stdio;\n\n    MyTuple!(int, string, long) v;\n    v.vals[0] = 1;\n    v.vals[1] = \"abc\";\n    v.vals[2] = 2;\n\n    writeln(v.vals);    // 1abc2\n}\n~~~~~~~~\n\n\u3000\u307e\u305f\uff0c`std.meta.AliasSeq`\u3092\u4f7f\u3046\u3053\u3068\u3067\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\uff0c`std.meta.AliasSeq`\u306e\u4f7f\u3044\u65b9\u3068\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306e\u3055\u307e\u3056\u307e\u306a\u6027\u8cea\u3092\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\uff0e\n\n~~~~~~~d\nimport std.stdio, std.meta;\n\n/+ AliasSeq\u306fstd.meta\u5185\u90e8\u3067\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\ntemplate AliasSeq(TList...) { alias AliasSeq = TList; }\n+/\n\nvoid main() {\n    // (int, 1, 2, long, main)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8List\u306e\u5b9a\u7fa9\n    alias List = AliasSeq!(int, 1, 2, long, main);\n\n    /*\n    int\n    1\n    2\n    long\n    main()\n    */\n    foreach(e; List)\n        writeln(e.stringof);\n\n    // (byte, short, int, long)\u304b\u3089\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306e\u5b9a\u7fa9\n    alias TypeList = AliasSeq!(byte, short, int, long);\n\n    // \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30b9\u30c8\u306f\u81ea\u52d5\u7684\u306b\u5c55\u958b\u3055\u308c\u308b\u306e\u3067\uff0c\n    // AliasSeq!(int, 1, 2, long, main, byte, short, int, long)\n    // \u4e0a\u3068\u7b49\u3057\u3044\n    alias Concatenated = AliasSeq!(List, TypeList);\n\n    // \u30b9\u30e9\u30a4\u30b9\u53ef\u80fd, (long, main, byte, short, int)\n    alias Sliced = Concatenated[3 .. $-1];\n}\n~~~~~~~~\n\n\n## \u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580\n\n\u3000\u518d\u5229\u7528\u6027\u306e\u9ad8\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\uff0c\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u7d20\u6674\u3089\u3057\u3044\u52b9\u679c\u3092\u767a\u63ee\u3057\u307e\u3059\uff0eC++\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u7528\u3044\u305f\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u8907\u96d1\u3067\u3059\u304c\uff0cD\u8a00\u8a9e\u3067\u306f\u8907\u96d1\u3055\u306f\u3042\u308b\u7a0b\u5ea6\u7de9\u548c\u3055\u308c\uff0c\u305d\u306e\u5f37\u529b\u3055\u306f\u53d7\u3051\u7d99\u304c\u308c\u3066\u3044\u307e\u3059\uff0e\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\uff0c\u6642\u3005\u300c\u95c7\u300d\u3068\u8a00\u308f\u308c\u307e\u3059\u304c\uff0c\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u3068\u3063\u3066\u306f\u5149\u3067\u3042\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3057\u3087\u3046\uff0e\u672c\u7ae0\u3067\u306f\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e2d\u3067\u3082\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a08\u7b97\uff0c\u6587\u5b57\u5217mixin\uff0c\u9759\u7684\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n\n\n### \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u8a08\u7b97\n\n\n\u3000\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e00\u4f8b\u3068\u3057\u3066\u3088\u304f\u51fa\u3066\u304f\u308b\u3082\u306e\u306f\uff0c\u968e\u4e57\u306e\u8a08\u7b97\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u884c\u3046\u3053\u3068\u3067\u3057\u3087\u3046\uff0eD\u8a00\u8a9e\u306b\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6761\u4ef6\u5206\u5c90\u304c\u53ef\u80fd\u306a`static if`\u304c\u3042\u308b\u306e\u3067\uff0c\u7c21\u5358\u306b\u8a18\u8ff0\u53ef\u80fd\u3067\u3059\uff0e\n\n~~~~~~d\n// \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u7528\u3044\u305f\u968e\u4e57\u306e\u8a08\u7b97\ntemplate factorial(uint N) {\n  static if(N == 0)\n    enum uint factorial = 1;\n  else\n    enum uint factorial = N * factorial!(N-1);\n}\n~~~~~~~\n\n\u3000\u307e\u305f\uff0c\u4e00\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u95a2\u6570\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9f\u884c\u53ef\u80fd\u306a\u306e\u3067\uff0c\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u3067\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u968e\u4e57\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n~~~~~~d\nuint factorial(uint N) {\n    uint dst = 1;\n    foreach(n; 1 .. N+1)\n        dst *= n;\n\n    return dst;\n}\n~~~~~~~\n\n\n### \u6587\u5b57\u5217mixin\n\n\u3000`binaryFun`\u3067\u4f7f\u7528\u3057\u307e\u3057\u305f\u304c\uff0cD\u8a00\u8a9e\u306b\u306f\u6587\u5b57\u5217mixin\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u306a\u6587\u5b57\u5217\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u3057\u3066\u89e3\u91c8\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0eDynamically typed\u306a\u8a00\u8a9e\u304c\u6301\u3064eval\u3068\u306e\u9055\u3044\u3067\u3059\u304c\uff0ceval\u306f\u5b9f\u884c\u6642\u306b\u6587\u5b57\u5217\u3092\u30d1\u30fc\u30b9\u3057\u3066\u8a55\u4fa1\u3057\u307e\u3059\u304c\uff0cmixin\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u306a\u6587\u5b57\u5217\u3092\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u3057\u3066\u53d6\u308a\u8fbc\u3080\u305f\u3081\u5b9f\u884c\u6642\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u3042\u308a\u307e\u305b\u3093\uff0e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9f\u884c\u53ef\u80fd\u306a\u95a2\u6570\u3067D\u8a00\u8a9e\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\uff0c\u305d\u308c\u3092\u6587\u5b57\u5217mixin\u3059\u308b\u3068\u9762\u767d\u3044\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u305b\u3093\u304b\uff1f\n\u3000\u6587\u5b57\u5217mixin\u3092\u7528\u3044\u305f\u4f8b\u3068\u3057\u3066\uff0c`naryFun`\u306e\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\uff0e`naryFun`\u306f`binaryFun`\u3092\u4e00\u822c\u5316\u3057\u305f\u3082\u306e\u3067\uff0c\u6587\u5b57\u5217\u304b\u3089\u4efb\u610f\u500b\u6570\u306e\u5f15\u6570\u304b\u3089\u306a\u308b\u95a2\u6570\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\uff0e`naryFun!\"a+b+c\"`\u306a\u3089\u5f15\u65703\u3064\u306e\u548c\u3067\u3059\u3057\uff0c`naryFun!\"a(b, c, d)\"`\u306f\u7b2c1\u5f15\u6570\u3092\u7b2c2, 3, 4\u5f15\u6570\u3067\u547c\u3073\u51fa\u3059\u95a2\u6570\u306b\u306a\u308a\u307e\u3059\uff0e`naryFun`\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\uff0e\n\n~~~~~~~d\ntemplate naryFun(alias fun) if(is(typeof(fun) == string)) {\n    auto ref naryFun(T...)(auto ref T args) {\n        static assert(T.length <= 26);      // a ~ z\u306e\u7bc4\u56f2\u306b\u53ce\u307e\u308b\u304b\u30c1\u30a7\u30c3\u30af\n        mixin(generateVariables(T.length)); // \u5909\u6570a ~ z\u3092\u5ba3\u8a00\u3059\u308b\u30b3\u30fc\u30c9\u3092mixin\n        return mixin(fun);                  // fun\u3092mixin\n    }\n\n\n    // \u5909\u6570 a ~ z \u3092\u5ba3\u8a00\u3059\u308b\u30b3\u30fc\u30c9\u3092\u751f\u6210\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9f\u884c\u53ef\u80fd\n    string generateVariables(size_t nparam) {\n        import std.array, std.format;\n\n        auto app = appender!string();\n        foreach(i; 0 .. nparam)         // \u30b3\u30fc\u30c9\u751f\u6210\n            formattedWrite(app, \"alias %s = args[%s];\\n\", cast(char)(i + 'a'), i);\n\n        return app.data;\n    }\n}\n\nvoid main() {\n    import std.stdio;\n\n    writeln(naryFun!\"a+z\"(1,2,3,4,5,6,7,8,9,10,11,12,13,\n                          14,15,16,17,18,19,20,21,22,23,\n                          24,25,26));               // 27\n    writeln(naryFun!\"a+b+c\"(1, 2, 3));              // 6\n    writeln(naryFun!\"a\"(1, 2, 3));                  // 1\n    writeln(naryFun!\"a(b)\"((int a) => a+1, 2));     // 3\n}\n~~~~~~~~\n\n\n### \u9759\u7684\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\n\n\u3000\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306f\uff0c\u4e3b\u306bDynamically typed\u306a\u8a00\u8a9e\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u8a00\u8a9e\u3067\u3088\u304f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u5358\u306b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u3044\u3048\u3070\u5b9f\u884c\u6642\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u6307\u3057\uff0c\u5b9f\u884c\u6642\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u3069\u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u304b\u30c1\u30a7\u30c3\u30af\u3057\u305f\u308a\u3067\u304d\u308b\u6a5f\u80fd\u3067\u3059\uff0eD\u8a00\u8a9e\u3067\u306f\u4eca\u306e\u3068\u3053\u308d\u5b9f\u884c\u6642\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u3067\u304d\u307e\u305b\u3093\u304c\uff0c\u9759\u7684\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\uff0c\u3064\u307e\u308a\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306a\u3089\u884c\u3048\u307e\u3059\uff0e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306f\uff0c\u4efb\u610f\u306e\u578b\u306b\u3064\u3044\u3066\uff0c\u305d\u306e\u578b\u304c\u6301\u3064\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u4e00\u89a7\u3084\u30d5\u30a3\u30fc\u30eb\u30c9(\u30e1\u30f3\u30d0\u5909\u6570, \u975e\u516c\u958b\u3092\u542b\u3080)\u4e00\u89a7\uff0c\u3082\u3057\u304f\u306f\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u5c5e\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u305f\u308a\u3057\u307e\u3059\uff0e\u3053\u3053\u3067\u306f\u7c21\u5358\u306b\uff0c\u4efb\u610f\u306e\u69cb\u9020\u4f53\u306e\u578b`T`\u306b\u3064\u3044\u3066\uff0c\u305d\u306e\u578b\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u4e00\u89a7\u3092\u51fa\u529b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n~~~~~~~d\nimport std.stdio;\n\nvoid printAllField(T)(T val) {\n    foreach(i, ref e; val.tupleof){\n        writefln(\"%s %s = %s;\",\n            typeof(e).stringof,\n            val.tupleof[i].stringof[4 .. $],    // \u5148\u982d\u306e \"val.\" \u3092\u30b9\u30ad\u30c3\u30d7\n            e);\n    }\n}\n\nvoid main() {\n    static struct S { int a, b; string c; }\n\n    /* \u6b21\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u308b\n    int a = 1;\n    int b = 2;\n    string c = 3;\n    */\n    printAllField(s);\n}\n~~~~~~~~\n\n\u3000\u3053\u306e\u4f8b\u4ee5\u5916\u306b\u3082\uff0c`std.traits`\u3084`__traits`\u306b\u3088\u3063\u3066\u3055\u307e\u3056\u307e\u306a\u3053\u3068\u304c\u884c\u3048\u307e\u3059\uff0e\u8a00\u3044\u51fa\u3059\u3068\u304d\u308a\u304c\u306a\u3044\u306e\u3068\uff0c\u30b3\u30b3\u3089\u3078\u3093\u306f\u3084\u308a\u305f\u3044\u3053\u3068\u306b\u3088\u3063\u3066\u5168\u7136\u9055\u3046\u306e\u3067\uff0c\u8208\u5473\u304c\u3042\u308a\u307e\u3057\u305f\u3089`std.traits`\u3084`__traits`\u6a5f\u80fd\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3093\u3067\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\n## \u307e\u3068\u3081\n\n\u3000\u4eca\u56de\u306fD\u8a00\u8a9e\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3057\u305f\uff0e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\uff0cD\u8a00\u8a9e\u306e\u91cd\u8981\u306a\u6a5f\u80fd\u306e\u4e00\u3064\u3067\uff0c\u3053\u308c\u3092\u30de\u30b9\u30bf\u30fc\u3059\u308b\u3053\u3068\u3067\u7d20\u6674\u3089\u3057\u3044\u751f\u7523\u6027\u3092\u767a\u63ee\u3067\u304d\u307e\u3059\uff0eC\u8a00\u8a9eer\u3084C++er\u306e\u65b9\u3067\u3082\u3057D\u8a00\u8a9e\u306b\u8208\u5473\u304c\u6e67\u3044\u305f\u3089\uff0c\u65e9\u901f\u5165\u9580\u3057\u307e\u3057\u3087\u3046\uff0eD\u8a00\u8a9e\u3092\u52c9\u5f37\u3059\u308b\u3053\u3068\u3067\uff0cC++\u306e\u7406\u89e3\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u306e\u3067\uff0cC++\u3092\u7406\u89e3\u3067\u304d\u306a\u3044\u4eba\u306f\uff0c\u307e\u305aD\u8a00\u8a9e\u3067\u904a\u3093\u3067\u307f\u308b\u3068\u826f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c\u305d\u306e\u4ed6\u306e\u8a00\u8a9e\u3092\u4f7f\u7528\u3057\u3066\u308b\u4eba\u3067\u3082\u975e\u5e38\u306b\u7c21\u5358\u306b\u5165\u9580\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u305c\u3072\u305c\u3072\uff0e\n"}