{"tags": ["python3", "scipy", "\u914d\u8272"], "context": " More than 1 year has passed since last update.\u753b\u50cf\u306e\u4ee3\u8868\u8272\u3092\u8abf\u3079\u305f\u304f\u306a\u3063\u305f\u3002\n\u3057\u304b\u3082\u3001\u81ea\u5206\u306a\u308a\u306b\u4ee3\u8868\u8272\u306e\u63a2\u3057\u65b9\u3092\u8003\u3048\u3066\u3001\u305d\u308c\u3092\u5b9f\u88c5\u3092\u3057\u3066\u307f\u308b\u7df4\u7fd2\u3092\u3057\u305f\u3044\u3068\u3082\u601d\u3063\u305f\u3002\n\u5927\u67a0\u3067\u6b21\u306e\u3088\u3046\u306a\u65b9\u5f0f\u3092\u8003\u3048\u3066\u5b9f\u88c5\u3057\u305f\u3002\n\n\u753b\u50cf\u306e\u30d4\u30af\u30bb\u30eb\u3092 k-means \u3067\u30af\u30e9\u30b9\u30bf\u306b\u5206\u3051\u308b\u3002\n\u30af\u30e9\u30b9\u30bf\u306b\u5c5e\u3059\u308b\u30d4\u30af\u30bb\u30eb\u306e\u6570\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\u3002\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u591a\u3044\u9806\u3067\u53d6\u308a\u51fa\u3057\u3066\u4ee3\u8868\u8272\u3068\u3059\u308b\u3002\n\nk-means \u3088\u308a\u3082\u512a\u308c\u305f\u6e1b\u8272\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u591a\u6570\u3042\u308a\u3001\u305d\u3061\u3089\u3092\u4f7f\u3046\u306e\u3082\u624b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\n\u81ea\u5206\u306f\u65e5\u66dc\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u5b9f\u88c5\u3067\u304d\u308b\u81ea\u4fe1\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5b9f\u88c5\u3082\u7c21\u5358\u3067 scipy \u306b\u3082\u542b\u307e\u308c\u3066\u308b k-means \u3092\u4f7f\u3063\u305f\u3002\n\u30d4\u30af\u30bb\u30eb\u3092\u30af\u30e9\u30b9\u30bf\u306b\u5272\u308a\u6cbb\u3059\u306e\u3082 scipy \u306e vq (Vector Quantization) \u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3053\u3068\u306b\u3057\u305f\u306e\u3067\u304b\u306a\u308a\u6357\u3063\u305f\u3002\n\n\u7d50\u679c\nwkhtmltoimage \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3044\u3001\u5e7e\u3064\u304b\u306e Web \u30da\u30fc\u30b8\u306e\u753b\u50cf\u3092\u53d6\u5f97\u3057\u3066\u4ee3\u8868\u8272\u3092\u629c\u304d\u51fa\u3057\u3066\u307f\u305f\u3002\n\u629c\u304d\u51fa\u3057\u305f\u3060\u3051\u3067\u306f\u76f4\u611f\u7684\u306b\u306f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u9069\u5f53\u306a\u9577\u65b9\u5f62\u306b\u4ee3\u8868\u8272\u3092\u540c\u3058\u5927\u304d\u3055\u3067\u8868\u793a\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u4ee5\u4e0b\u3001\u6839\u62e0\u306f\u306a\u3044\u304c\u300c\u3044\u3044\u611f\u3058\u300d\u3068\u601d\u3063\u305f\u3002\n\nQiita\n\n\n\nFacebook\n\n\n\n\u30b3\u30ab\u30fb\u30b3\u30fc\u30e9\u516c\u5f0f\u30d6\u30e9\u30f3\u30c9\u30b5\u30a4\u30c8\n\n\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\u4ee5\u4e0b\u304c Python 3 \u3067\u66f8\u3044\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3002\n\u4ed6\u306b numpy, scipy, pillow \u3092\u5fc5\u8981\u3068\u3059\u308b\u3002\n#!/usr/bin/env python\nimport argparse\n\nimport numpy\n\nimport PIL\nimport PIL.ImageDraw\nimport scipy\nimport scipy.cluster\nimport scipy.misc\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('source_image')\n    parser.add_argument('summary_image')\n    parser.add_argument('-n', type=int, default=4)\n    args = parser.parse_args()\n    img = PIL.Image.open(args.source_image)\n    c = args.n + 1\n    colors = top_n_colors(img, top_n=args.n, num_of_clusters=c)\n    save_summary_image(args.summary_image, colors)\n\n\ndef pillow_image_to_simple_bitmap(pillow_image):\n    small_img = pillow_image.resize((100, 100))\n    bitmap = scipy.misc.fromimage(small_img)\n    shape = bitmap.shape\n    bitmap = bitmap.reshape(scipy.product(shape[:2]), shape[2])\n    bitmap = bitmap.astype(numpy.float)\n    return bitmap\n\n\ndef top_n_colors(pillow_image, top_n, num_of_clusters):\n    clustering = scipy.cluster.vq.kmeans\n    bitmap = pillow_image_to_simple_bitmap(pillow_image)\n    clusters, _ = clustering(bitmap, num_of_clusters)\n    quntized, _ = scipy.cluster.vq.vq(bitmap, clusters)\n    histgrams, _ = scipy.histogram(quntized, len(clusters))\n    order = numpy.argsort(histgrams)[::-1][:top_n]\n    for idx in range(top_n):\n        rgb = clusters.astype(int)[order[idx]].tolist()\n        yield '#{:02x}{:02x}{:02x}'.format(*rgb)\n\n\ndef save_summary_image(path, color_codes, width=300, height=100):\n    color_codes = tuple(color_codes)\n    image = PIL.Image.new('RGB', (width, height))\n    draw = PIL.ImageDraw.Draw(image)\n    single_width = width / len(color_codes)\n    for i, color_code in enumerate(color_codes):\n        starting = (int(single_width * i), 0)\n        ending = (int(single_width * (i + 1)), height)\n        draw.rectangle([starting, ending], fill=color_code)\n    image.save(path, format='png')\n\n\nif __name__ == '__main__':\n    main()\n\n\n\u4f7f\u3044\u65b9\n$ python ./image_top_n_color.py input.png output.png\n\n-n \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30af\u30e9\u30b9\u30bf\u306e\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u753b\u50cf\u306e\u4ee3\u8868\u8272\u3092\u8abf\u3079\u305f\u304f\u306a\u3063\u305f\u3002\n\u3057\u304b\u3082\u3001\u81ea\u5206\u306a\u308a\u306b\u4ee3\u8868\u8272\u306e\u63a2\u3057\u65b9\u3092\u8003\u3048\u3066\u3001\u305d\u308c\u3092\u5b9f\u88c5\u3092\u3057\u3066\u307f\u308b\u7df4\u7fd2\u3092\u3057\u305f\u3044\u3068\u3082\u601d\u3063\u305f\u3002\n\n\u5927\u67a0\u3067\u6b21\u306e\u3088\u3046\u306a\u65b9\u5f0f\u3092\u8003\u3048\u3066\u5b9f\u88c5\u3057\u305f\u3002\n\n1. \u753b\u50cf\u306e\u30d4\u30af\u30bb\u30eb\u3092 k-means \u3067\u30af\u30e9\u30b9\u30bf\u306b\u5206\u3051\u308b\u3002\n2. \u30af\u30e9\u30b9\u30bf\u306b\u5c5e\u3059\u308b\u30d4\u30af\u30bb\u30eb\u306e\u6570\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\u3002\n3. \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306e\u591a\u3044\u9806\u3067\u53d6\u308a\u51fa\u3057\u3066\u4ee3\u8868\u8272\u3068\u3059\u308b\u3002\n\nk-means \u3088\u308a\u3082\u512a\u308c\u305f\u6e1b\u8272\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u591a\u6570\u3042\u308a\u3001\u305d\u3061\u3089\u3092\u4f7f\u3046\u306e\u3082\u624b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\n\u81ea\u5206\u306f\u65e5\u66dc\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u5b9f\u88c5\u3067\u304d\u308b\u81ea\u4fe1\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u5b9f\u88c5\u3082\u7c21\u5358\u3067 scipy \u306b\u3082\u542b\u307e\u308c\u3066\u308b k-means \u3092\u4f7f\u3063\u305f\u3002\n\u30d4\u30af\u30bb\u30eb\u3092\u30af\u30e9\u30b9\u30bf\u306b\u5272\u308a\u6cbb\u3059\u306e\u3082 scipy \u306e vq (Vector Quantization) \u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u3053\u3068\u306b\u3057\u305f\u306e\u3067\u304b\u306a\u308a\u6357\u3063\u305f\u3002\n\n# \u7d50\u679c\n\nwkhtmltoimage \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3044\u3001\u5e7e\u3064\u304b\u306e Web \u30da\u30fc\u30b8\u306e\u753b\u50cf\u3092\u53d6\u5f97\u3057\u3066\u4ee3\u8868\u8272\u3092\u629c\u304d\u51fa\u3057\u3066\u307f\u305f\u3002\n\u629c\u304d\u51fa\u3057\u305f\u3060\u3051\u3067\u306f\u76f4\u611f\u7684\u306b\u306f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u9069\u5f53\u306a\u9577\u65b9\u5f62\u306b\u4ee3\u8868\u8272\u3092\u540c\u3058\u5927\u304d\u3055\u3067\u8868\u793a\u3059\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n~~\u4ee5\u4e0b\u3001\u6839\u62e0\u306f\u306a\u3044\u304c\u300c\u3044\u3044\u611f\u3058\u300d\u3068\u601d\u3063\u305f\u3002~~\n\n## [Qiita](https://qiita.com/)\n\n![qiita_image.png](https://qiita-image-store.s3.amazonaws.com/0/25886/76b24f87-90fb-6784-1465-c98f645bb940.png)\n\n\n## [Facebook](https://www.facebook.com)\n\n![facebook_image.png](https://qiita-image-store.s3.amazonaws.com/0/25886/b641e226-2ba2-492b-4616-0eef58a3dd53.png)\n\n## [\u30b3\u30ab\u30fb\u30b3\u30fc\u30e9\u516c\u5f0f\u30d6\u30e9\u30f3\u30c9\u30b5\u30a4\u30c8](http://www.cocacola.jp/)\n\n![cocacola_image.png](https://qiita-image-store.s3.amazonaws.com/0/25886/7f82d9e6-b794-58ed-b8dd-4cfcf64dbb92.png)\n\n\n\n\n# \u30b9\u30af\u30ea\u30d7\u30c8\n\n\u4ee5\u4e0b\u304c Python 3 \u3067\u66f8\u3044\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3002\n\u4ed6\u306b numpy, scipy, pillow \u3092\u5fc5\u8981\u3068\u3059\u308b\u3002\n\n```py3\n#!/usr/bin/env python\nimport argparse\n\nimport numpy\n\nimport PIL\nimport PIL.ImageDraw\nimport scipy\nimport scipy.cluster\nimport scipy.misc\n\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('source_image')\n    parser.add_argument('summary_image')\n    parser.add_argument('-n', type=int, default=4)\n    args = parser.parse_args()\n    img = PIL.Image.open(args.source_image)\n    c = args.n + 1\n    colors = top_n_colors(img, top_n=args.n, num_of_clusters=c)\n    save_summary_image(args.summary_image, colors)\n\n\ndef pillow_image_to_simple_bitmap(pillow_image):\n    small_img = pillow_image.resize((100, 100))\n    bitmap = scipy.misc.fromimage(small_img)\n    shape = bitmap.shape\n    bitmap = bitmap.reshape(scipy.product(shape[:2]), shape[2])\n    bitmap = bitmap.astype(numpy.float)\n    return bitmap\n\n\ndef top_n_colors(pillow_image, top_n, num_of_clusters):\n    clustering = scipy.cluster.vq.kmeans\n    bitmap = pillow_image_to_simple_bitmap(pillow_image)\n    clusters, _ = clustering(bitmap, num_of_clusters)\n    quntized, _ = scipy.cluster.vq.vq(bitmap, clusters)\n    histgrams, _ = scipy.histogram(quntized, len(clusters))\n    order = numpy.argsort(histgrams)[::-1][:top_n]\n    for idx in range(top_n):\n        rgb = clusters.astype(int)[order[idx]].tolist()\n        yield '#{:02x}{:02x}{:02x}'.format(*rgb)\n\n\ndef save_summary_image(path, color_codes, width=300, height=100):\n    color_codes = tuple(color_codes)\n    image = PIL.Image.new('RGB', (width, height))\n    draw = PIL.ImageDraw.Draw(image)\n    single_width = width / len(color_codes)\n    for i, color_code in enumerate(color_codes):\n        starting = (int(single_width * i), 0)\n        ending = (int(single_width * (i + 1)), height)\n        draw.rectangle([starting, ending], fill=color_code)\n    image.save(path, format='png')\n\n\nif __name__ == '__main__':\n    main()\n```\n\n## \u4f7f\u3044\u65b9\n\n```\n$ python ./image_top_n_color.py input.png output.png\n```\n\n```-n``` \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30af\u30e9\u30b9\u30bf\u306e\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n"}