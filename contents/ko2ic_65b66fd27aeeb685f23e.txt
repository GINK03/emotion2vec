{"context": "Java8, C#, Scala, Groovy, Ruby\u306e\u6bd4\u8f03\u8a18\u4e8b\u3067\u3059\u3002\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3API\u306b\u3064\u3044\u3066\u3042\u306e\u8a00\u8a9e\u306e\u3042\u306e\u66f8\u304d\u65b9\u306f\u3001\u3053\u306e\u8a00\u8a9e\u3067\u306f\u3053\u3046\u66f8\u304f\u7684\u306a\u3082\u306e\u3067\u3059\u3002\n\u305d\u308c\u305e\u308c\u899a\u3048\u305f\u3051\u3069\u4f7f\u308f\u306a\u3044\u3068\u3059\u3050\u5fd8\u308c\u308b\u306e\u3067\u3001\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002 \n\u5197\u9577\u306a\u66f8\u304d\u65b9\u3068\u305d\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3082\u306a\u308b\u3079\u304f\u8a18\u8ff0\u3057\u3068\u304d\u307e\u3059\u3002\n(\u305d\u308c\u305e\u308c\u30e1\u30bd\u30c3\u30c9\u3092\u7db2\u7f85\u3057\u3088\u3046\uff0bSwift\u3082\u66f8\u3053\u3046\u3068\u601d\u3063\u3066\u305f\u3051\u3069\u3001\u60f3\u50cf\u4ee5\u4e0a\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u306e\u3067\u6c17\u304c\u5411\u3044\u305f\u3089\u8ffd\u8a18\u3057\u307e\u3059)\n\n\u30ea\u30b9\u30c8\n\n\u4f5c\u6210\n\nJava8\nList<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\n// Stream\u304b\u3089List\u5909\u63db\u3059\u308b\u5834\u5408\nlist = Stream.of(\"a\", \"b\", \"c\").collect(Collectors.toCollection(ArrayList::new)); \n\nList<Integer> digits = new ArrayList<>(Arrays.asList(1, 2, 3));\n\n\nC#\nvar list = new List<string> { \"a\", \"b\", \"c\" };\n\nvar digits = new List<int> { 1, 2, 3 };\n\n\nScala\n// \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\nval list = List(\"a\", \"b\", \"c\")\n\n// \u30b3\u30f3\u30b9\uff08cons\uff09\u3092\u5229\u7528, Nil\u306f\u8981\u7d20\u304c0\u306eList\uff08\u3053\u306e\u5834\u5408\u3001List.empty[Int]\u3067\u3082\u3067\u304d\u308b\uff09\u3002::\u306f\u8981\u7d20\u3092List\u306e\u5148\u982d\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\nval digits = 1 :: 2 :: 3 :: Nil\n\n\nGroovy\ndef list = [\"a\", \"b\", \"c\"]\n\ndef digits = [1, 2, 3]\ndigits = []<< 1 << 2 << 3\n\n\nRuby\nlist = Array[\"a\", \"b\", \"c\"] # \u30d1\u30bf\u30fc\u30f31\nlist = [\"a\", \"b\", \"c\"]      # \u30d1\u30bf\u30fc\u30f32\nlist = %w(a b c)            # \u30d1\u30bf\u30fc\u30f33\n\n# \u7a7a\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3066\u8ffd\u52a0  \u30d1\u30bf\u30fc\u30f34\ndigits = Array.new\ndigits.concat([1, 2, 3])\n\n\n\u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u8981\u7d20\u3067\u4f5c\u6210\n\nJava8\n// 1\u304b\u3089\u59cb\u307e\u308a10\u3067\u7d42\u308f\u308b\u6570\u5024\u3092\u4f5c\u6210\nList<Integer> digits2 = IntStream.rangeClosed(1, 10).boxed().collect(Collectors.toList());\n\n\nC#\n// 1\u304b\u3089\u59cb\u307e\u308a10\u3067\u7d42\u308f\u308b\u6570\u5024\u3092\u4f5c\u6210\nvar digits2 = Enumerable.Range(1, 10).ToList<int>();\n\n\nScala\n// 1\u304b\u3089\u59cb\u307e\u308a10\u3067\u7d42\u308f\u308b\u6570\u5024\u3092\u5897\u52061(\u4efb\u610f)\u3067\u4f5c\u6210\nval digits2 = List.range(1, 10, 1) // \u30d1\u30bf\u30fc\u30f31\ndigits2 = Range(1,10).toList       // \u30d1\u30bf\u30fc\u30f32\ndigits2 = (1 to 10 by 1).toList    // \u30d1\u30bf\u30fc\u30f33\n\n\nGroovy\n// 1\u304b\u3089\u59cb\u307e\u308a10\u3067\u7d42\u308f\u308b\u6570\u5024\u3092\u4f5c\u6210\ndef digits3 = (1..10)\n\n\nRuby\n# 1\u304b\u3089\u59cb\u307e\u308a10\u3067\u7d42\u308f\u308b\u6570\u5024\u3092\u4f5c\u6210\n# \u3061\u306a\u307f\u306b1...10 \u306f1\u304b\u30899\ndigits2 = (1..10).to_a            # \u30d1\u30bf\u30fc\u30f31\ndigits2 = Array(Range.new(1, 10)) # \u30d1\u30bf\u30fc\u30f32\n\n# \u5897\u52061\u3068\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408  \u30d1\u30bf\u30fc\u30f33\n(1..10).step(1).to_a\n\n\n\u540c\u3058\u8981\u7d20\u3067\u4f5c\u6210\n\nJava8\n// [\"a\", \"a\", \"a\"]\u306e\u3088\u3046\u306b\u540c\u3058\u8981\u7d20\u3067\u4f5c\u6210\nSupplier<String> supplier = () -> \"a\";\nList<String> list2 = Stream.generate(supplier).limit(3).collect(Collectors.toList());\n\n\nC#\n// [\"a\", \"a\", \"a\"]\u306e\u3088\u3046\u306b\u540c\u3058\u8981\u7d20\u3067\u4f5c\u6210\nvar list2 = new List<string>();\nlist2.AddRange(Enumerable.Repeat(\"a\", 3));\n\n\nScala\n// List(\"a\", \"a\", \"a\")\u306e\u3088\u3046\u306b\u540c\u3058\u8981\u7d20\u3067\u4f5c\u6210\nList.fill(\"a\", 3)\n\n\nRuby\n# [\"a\", \"a\", \"a\"]\u306e\u3088\u3046\u306b\u540c\u3058\u8981\u7d20\u3067\u4f5c\u6210\n# \u305f\u3060\u3057\u3001\"a\"\u306f\u53c2\u7167\u5148\u304c\u540c\u3058\u306b\u306a\u308b\u3067\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3059\u3079\u3066\u5909\u308f\u308b\nlist2 = Array.new(3, \"a\")  # \u30d1\u30bf\u30fc\u30f31\nlist2[0].upcase!\nlist2[0] = \"b\" # 0\u756a\u76ee\u306e\u53c2\u7167\u5148\u304c\u5909\u308f\u308b\u306e\u3067[\"b\", \"A\", \"A\"]\n[\"a\", \"a\", \"a\"][0].upcase! # \u5225\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u306e\u3067[\"A\", \"a\", \"a\"] \n# \u4e0a\u8a18\u3068\u540c\u3058\nlist2 = Array.new(3)       # \u30d1\u30bf\u30fc\u30f32\nlist2.fill(\"a\")\nlist2[0].upcase!\n\n\n\u8ffd\u52a0\n\nJava8\nList<Integer> digits = new ArrayList<>(Arrays.asList(1, 2, 3));\n\n// \u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.add(0, -10); // [-10, 1, 2, 3]\n\n// \u5f8c\u308d\u306b\u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.add(4); // [-10, 1, 2, 3, 4]\n\n// \u30ea\u30b9\u30c8\u306e\u7d50\u5408\u3001\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.addAll(Arrays.asList(4, 5)); // [-10, 1, 2, 3, 4, 4, 5]\n\n\nC#\n// \u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.Insert(0, -10); //  {-10, 1, 2, 3}\n\n// \u5f8c\u308d\u306b\u8ffd\u52a0\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.Add(4);  {-10, 1, 2, 3, 4}\n\n// \u30ea\u30b9\u30c8\u306e\u7d50\u5408\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002{-10, 1, 2, 3, 4, 4, 5}\ndigits.AddRange(new List<int> { 4, 5 });\n\n\nScala\nimmutable\u306e\u5834\u5408\n// \u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3001 List(1, 2, 3)\n1 +: List(2, 3)\n\n// Iterator,Iterable\u3092mixin\u3057\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002List(a, b, c, d)\u3092\u8fd4\u3059\nList(\"a\", \"b\") ++ Seq(\"c\", \"d\")\n\nmutable\u306e\u5834\u5408\nimport scala.collection.mutable._\n\n// \u7a7a\u306eListBuffer\u3092\u4f5c\u6210\nval listBuffer = ListBuffer.empty[String]\n\n// \u5f8c\u308d\u306b\u8ffd\u52a0\u3001ListBuffer(\"a\", \"b\", \"c\", \"d\")\nlistBuffer += \"a\"\nlistBuffer += \"b\"\nlistBuffer.append(\"c\", \"d\")\n\nval listBuffer2 = 1 +: ListBuffer(2, 3)\n// \u5148\u982d\u306b\u8ffd\u52a0 listBuffer2\u306f\u3001ListBuffer(-1, 0, 1, 2, 3)\u306b\u306a\u308b\nlistBuffer2.prepend(-1, 0)\n\n\nGroovy\n// \u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\ndigits.add(0, -1) // \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9 [-1, 1, 2, 3]\n\n// \u5f8c\u308d\u306b\u8ffd\u52a0\nassert [-1, 1, 2, 3, 4]== digits.plus(4)\nassert [-1, 1, 2, 3, 4]== digits + 4\nassert [-1, 1, 2, 3, 4]== digits.leftShift(4) // \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nassert [-1, 1, 2, 3, 4, 5]== digits << 5 // \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\n\ndigits = [1, 2, 3]\n// \u30ea\u30b9\u30c8\u306e\u7d50\u5408\u3001[1, 2, 3, 4, 5]\nassert [1, 2, 3, 4, 5]== digits.plus([4, 5])\nassert [1, 2, 3, 4, 5]== digits + [4, 5]\ndigits.addAll([4, 5]) // \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9 [1, 2, 3, 4, 5]\n\n\nRuby\n# \u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[0, 1, 2, 3]\n[1, 2, 3].unshift(0)\n\n# \u5f8c\u308d\u306b\u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002\n[1, 2, 3].push(4)\n[1, 2, 3] << 4\n\n## \u30ea\u30b9\u30c8\u306e\u7d50\u5408\u3001 [1, 2, 3, 4, 5]\n[1, 2, 3] + [4, 5] # \u7834\u58ca\u3057\u306a\u3044 \n[1, 2, 3].contact([4, 5]) # \u30ec\u30b7\u30fc\u30d0\u30fc[1, 2, 3]\u304c\u66f8\u304d\u5909\u308f\u308b\u7834\u58ca\u30e1\u30bd\u30c3\u30c9\n\n\n\u524a\u9664\n\nJava8\n// \u4e21\u65b9\u3068\u3082\u7834\u58ca\u30e1\u30bd\u30c3\u30c9\n// index\u3067\u524a\u9664\ndigits.remove(0);\n// \u5f15\u6570\u306e\u8981\u7d20\u3092\u524a\u9664\ndigits.remove(Integer.valueOf(1));\n\n\nC#\n// \u4e21\u65b9\u3068\u3082\u7834\u58ca\u30e1\u30bd\u30c3\u30c9\n// index\u3067\u524a\u9664\ndigits.RemoveAt(0);\n// \u5f15\u6570\u306e\u8981\u7d20\u3092\u524a\u9664\ndigits.Remove(1);\n\n\nScala\n// \u524a\u9664\u3001ListBuffer(a, c, d)\u304c\u8fd4\u308b\u3002\u5909\u6570listBuffer\u81ea\u4f53\u306b\u306f\u5909\u5316\u306a\u3057\nlistBuffer - \"b\"\n\n\nGroovy\ndigits = [1, 1, 2, 3]\n// \u524a\u9664\u3001\u7834\u58ca\u3057\u306a\u3044\nassert [2, 3]== digits - 1\nassert [1, 1]== digits - [2, 3]\nassert [2, 3]== digits.minus(1)\nassert [1, 1]== digits.minus([2, 3])\n\n\nRuby\n# \u524a\u9664\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3001[\"a\", \"c\"]\nlist3  = %w(a b c)\nlist3.delete_at (1)\nlist3  = %w(a b c)\nlist3.delete(\"b\")\n\n\n\u53d6\u5f97\n\nJava8\nlist.get(0);\n\n\nC#\nlist.ElementAt(0); // \u30d1\u30bf\u30fc\u30f31\nlist[0];           // \u30d1\u30bf\u30fc\u30f32      \n\n\nScala\nlist.apply(0)  // \u30d1\u30bf\u30fc\u30f31\nlist(0)        // \u30d1\u30bf\u30fc\u30f32\n\n\nGroovy\nassert \"a\" == list.get(0)   // \u30d1\u30bf\u30fc\u30f31\nassert \"a\" == list.getAt(0) // \u30d1\u30bf\u30fc\u30f32\nassert \"a\" == list[0]       // \u30d1\u30bf\u30fc\u30f33\n\n\nRuby\nlist[0] \n\n\nhead,tail\n\nJava8\nList<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\n\n// TODO head\u3068tail\u306e\u3064\u3082\u308a\u3060\u3051\u3069\u3001\u3082\u3063\u3068\u7c21\u5358\u306b\u66f8\u3051\u306a\u3044\u304b\uff1f\nIterator<String> ite = list.stream().iterator();\nString head = ite.next(); // a\nIterable<String> iterable = () -> ite;\nList<String> tail = StreamSupport.stream(iterable.spliterator(), false).collect(Collectors.toList());\ntail.forEach(System.out::println); // [\"b\", \"c\"]\n\nList<String> init = list.stream().limit(list.size() - 1).collect(Collectors.toList());\ninit.forEach(System.out::println); // [\"a\", \"b\"]\nOptional<String> last = list.stream().reduce((a, b) -> b); // Optional[c]\n\n\nC#\nlist.FirstOrDefault();  // a\nlist.Skip(1).ToList(); // {\"b\", \"c\"}\n\nlist.Take(list.Count - 1).ToList() // {\"a\", \"b\"}\nlist.LastOrDefault(); // c\n\n\nScala\nlist.head // a\nlist.tail // List(b, c)\n\nlist.init // List(a, b)\nlist.last // c\n\n\nGroovy\nassert \"a\" == list.head()\nassert [\"b\", \"c\"]== list.tail()\nassert [\"b\", \"c\"]==  list.drop(1)\n\nassert [\"a\", \"b\"]== list.init()\nassert [\"a\", \"b\"]== list.take(list.size() -1)\nassert \"c\" == list.last()\nassert \"c\" == list[-1]\n\n\nRuby\nlist.first        #  a\nlist.drop(1)      # [b, c]\nlist[1..-1]       # [b, c]\nlist.slice(1..-1) # [b, c]\nlist.last         # c\nlist[-1]          # c\n\n\n\u7e70\u308a\u8fd4\u3057\uff08foreach\uff09\n\nJava8\nList<Integer> digits = new ArrayList<>(Arrays.asList(1, 2, 3));\n\n// \u30d1\u30bf\u30fc\u30f31\ndigits.forEach(new Consumer<Integer>() {\n    @Override\n    public void accept(Integer t) {\n        System.out.println(t);\n    }\n});\n// \u30d1\u30bf\u30fc\u30f32\ndigits.forEach(n -> {\n    System.out.println(n);\n});\n// \u30d1\u30bf\u30fc\u30f33\ndigits.forEach(n -> System.out.println(n));\n// \u30d1\u30bf\u30fc\u30f34\ndigits.forEach(System.out::println);\n\n\nC#\nvar digits = new List<int> { 1, 2, 3 };\ndigits.ForEach(n => Console.WriteLine(n));\n\n\nScala\nval list = List(\"a\", \"b\", \"c\")\n\nlist.foreach(s => println(s)) // \u30d1\u30bf\u30fc\u30f31\nlist.foreach(s => println(_)) // \u30d1\u30bf\u30fc\u30f32\nlist.foreach(println)         // \u30d1\u30bf\u30fc\u30f33\nlist.foreach { println }      // \u30d1\u30bf\u30fc\u30f34\n\n\nGroovy\ndef digits = [1, 2, 3]\n\n// \u30d1\u30bf\u30fc\u30f31\ndigits.each { n -> println(n) }\n// \u30d1\u30bf\u30fc\u30f32\ndigits.each { println(it) }\n\n\nRuby\nlist  = %w(a b c)\n\nlist.each { |s| print(s) }\nlist.each do |s| print(s) end\n\n\"a\".upto(\"c\") do |i|\n    puts \"#{i}\"\nend\n\n\n\u7e70\u308a\u8fd4\u3057\uff08\u9006\u9806\uff09\n\nJava8\ndigits.stream().collect(Collectors.toCollection(LinkedList::new)).descendingIterator().forEachRemaining(System.out::println);\n\n\nC#\n// \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.Reverse();\ndigits.ForEach(n => Console.WriteLine(n));\n\n\nScala\nlist.reverse.foreach(println)\n\n\nGroovy\n// \u9006\u9806\u306e\u30ea\u30b9\u30c8\u304c\u307b\u3057\u3044\u3060\u3051\u306a\u3089\u3001reverse\u3060\u3051\u3067\u3088\u3044\ndigits.reverseEach { println(it)}\n\n\nRuby\nlist.reverse_each { |s| print(s) }\n\n3.downto(1) do |i|\n    puts \"#{i}\"\nend\n\n\n\u7e70\u308a\u8fd4\u3057\uff08index\u4ed8\u304d\uff09\n\nJava8\n// \u30d1\u30bf\u30fc\u30f31\nIntStream.range(0, digits.size()).forEach(index -> {\n    System.out.println(\"value=\" + digits.get(index));\n    System.out.println(\"index=\" + index);\n});\n// \u30d1\u30bf\u30fc\u30f32\nAtomicInteger index = new AtomicInteger(-1);\ndigits.forEach(value -> {\n    System.out.println(\"value=\" + value);\n    System.out.println(\"index=\" + index.incrementAndGet());\n});\n\n\nC#\n// \u30d1\u30bf\u30fc\u30f31\ndigits.Select((n, i) => new { n, i }).ToList().ForEach(t =>\n{\n    Console.WriteLine(\"n=\" + t.n);\n    Console.WriteLine(\"i=\" + t.i);\n});\n// \u30d1\u30bf\u30fc\u30f32\ndigits.Select((n, i) => \n{\n    Console.WriteLine(\"n=\" + n);\n    Console.WriteLine(\"i=\" + i);\n    return new { n, i };\n});\n\n\nScala\nlist.zipWithIndex.foreach { t => println( s\"${t._2}. ${t._1}\" ) } // \u30d1\u30bf\u30fc\u30f31\nlist.zipWithIndex.foreach { case(s:String, i:Int) => println( s\"${i}. ${s}\" ) } // \u30d1\u30bf\u30fc\u30f32\n\n\nGroovy\ndigits.eachWithIndex { n,index ->\n    println(\"value=${n}\")\n    println(\"index=${index}\")\n}\n\n\nRuby\n# index\u306e\u307f\nlist.each_index { |index| \n  puts \"#{list[index]}\" \n}\n\n# index\u4ed8\u304d\nlist.each_with_index {|s, i| \n  puts \"#{i}. #{s}\" \n}\n\n\n\u5c04\u5f71\uff08map\uff09\n\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u306b\u51e6\u7406\u3092\u9069\u7528\u3057\u3066\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nJava8\nList<Integer> digits2 = IntStream.rangeClosed(1, 10).boxed().collect(Collectors.toList());\n\n// [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\u3092\u8fd4\u3059\n// \u30d1\u30bf\u30fc\u30f31\nList<Integer> mapped1 = digits2.stream().map(new Function<Integer, Integer>() {\n   @Override\n   public Integer apply(Integer n) {\n       return n * 2;\n   }\n}).collect(Collectors.toList());\n// \u30d1\u30bf\u30fc\u30f32\nList<Integer> mapped12 = digits2.stream().map(n -> {\n   return n * 2;\n}).collect(Collectors.toList());\n// \u30d1\u30bf\u30fc\u30f33\nList<Integer> mapped3 = digits2.stream().map(n -> n * 2).collect(Collectors.toList());\n\n\nC#\nvar digits2 = Enumerable.Range(1, 10).ToList<int>();\n\n// \u30d1\u30bf\u30fc\u30f3\uff11\nvar mapped1 = digits2.Select(delegate(int n)\n{\n    return n * 2;\n});\n// \u30d1\u30bf\u30fc\u30f3\uff12\nvar mapped2 = digits2.Select(n =>\n{\n    return n * 2;\n});\n// \u30d1\u30bf\u30fc\u30f3\uff13\nvar mapped3 = digits2.Select(n => n * 2);\n// \u30d1\u30bf\u30fc\u30f3\uff14\nvar mapped4 = from n in digits2\n              select n * 2;\n// \u4f8b\u3048\u3070\u533f\u540d\u578b\u306e\u30ea\u30b9\u30c8\u306b\u5165\u308c\u66ff\u3048\u308b\nvar mapped5 = from n in digits2\n              select new {n = n};\n\n\nScala\nval digits = List(1, 2, 3)\n\n// List(2, 4, 6)\u3092\u8fd4\u3059\ndigits.map((n:Int) => n * 2)\ndigits.map(_ * 2) \ndigits.map { n => n * 2 }\ndigits.map { _ * 2 }\n\n\nGroovy\ndef digits3 = (1..10)\n\nassert [2,4,6,8,10,12,14,16,18,20]== digits3.collect {n -> n * 2 }\nassert [2,4,6,8,10,12,14,16,18,20]digits3.collect { it * 2 }\nassert [2,4,6,8,10,12,14,16,18,20]digits3*.multiply(2)\n\n\nRuby\ndigits =  [1, 2, 3]\n\n# [2, 4, 6]\u3092\u8fd4\u3059,\u305d\u308c\u305e\u308c\u300cdo end\u300d\u3067\u3082\u53ef\u80fd\ndigits.map { |n| n * 2 }\ndigits.collect { |n| n * 2 }\n\n\n\u5c04\u5f71\uff08index\u4ed8\u304d\uff09\n\nJava8\n// \u81ea\u529b\u3067\u3042\u308b\u304cindex\u306f\u4ed8\u3051\u3089\u308c\u308b\u3002\u3053\u3053\u3067\u306fTuple\u3082\u81ea\u4f5c\u3002\nList<Tuple> mapped4 = IntStream.range(0, digits2.size()).mapToObj(index -> new Tuple<>(index, digits2.get(index))).collect(Collectors.toList());\nmapped3.forEach(System.out::println);\n\n\u30fb\u30fb\u30fb\npublic class Tuple<T1, T2> {\n    public final T1 _1;\n    public final T2 _2;\n    public Tuple(T1 arg1, T2 arg2) {\n        this._1 = arg1;\n        this._2 = arg2;\n    }\n    @Override\n    public String toString() {\n        return String.format(\"(%s, %s)\", _1, _2);\n    }\n}\n\n\nC#\n// index\u3082\u4ed8\u3051\u3089\u308c\u308b\u3057\u3001\u4f8b\u3048\u3070\u30bf\u30d7\u30eb\u578b\u306e\u30ea\u30b9\u30c8\u306b\u5165\u308c\u66ff\u3048\u308b\nvar mapped6 = digits2.Select((n, index) => Tuple.Create(index, n));\n\n\nScala\n// index\u3082\u4ed8\u3051\u3089\u308c\u308b\u3057\u3001\u4f8b\u3048\u3070\u30bf\u30d7\u30eb\u578b\u306e\u30ea\u30b9\u30c8\u306b\u5165\u308c\u66ff\u3048\u308b\u3002List((0,1), (1,2), (2,3))\ndigits.zipWithIndex.map { case (n, index) => (index, n) }\n\n\nGroovy\n// index\u3082\u4ed8\u3051\u3089\u308c\u308b\u3057\u3001\u4f8b\u3048\u3070\u30bf\u30d7\u30eb\u578b\u306e\u30ea\u30b9\u30c8\u306b\u5165\u308c\u66ff\u3048\u308b\ndigits3.eachWithIndex { it, index ->\n    println(new Tuple(index, it))\n}\n\n\nRuby\n# index\u3082\u4ed8\u3051\u3089\u308c\u308b\u3057\u3001\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002[[0, 1], [1, 2], [2, 3]]\ndigits.map.with_index { |n, index| [index, n] }\n\n\n\u691c\u7d22\n\u6761\u4ef6\u306b\u5408\u3046\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nJava8\n\nallMatch\u306f\u3001\u6761\u4ef6\u306b\u3059\u3079\u3066\u306e\u8981\u7d20\u304cmatch\u3059\u308b\u304b\u3069\u3046\u304b\u3002\nanyMatch\u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3067\u3082match\u3059\u308b\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\nnoneMatch\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u6761\u4ef6\u306bmatch\u3057\u306a\u304b\u3063\u305f\u3089true\n\nList<Integer> digits = new ArrayList<>(Arrays.asList(1, 2, 3));\n\n// false\ndigits.stream().allMatch(n -> n % 2 == 0);\n// true\ndigits.stream().anyMatch(n -> n % 2 == 0);\n// true\ndigits.stream().noneMatch(n -> n == 0);\n\n// \u305d\u308c\u305e\u308c\u533f\u540d\u30af\u30e9\u30b9\u3067\u3082\u3067\u304d\u308b\ndigits.stream().allMatch(new Predicate<Integer>() {\n    @Override\n    public boolean test(Integer n) {\n        return n % 2 == 0;\n    }\n});\n\n\nC#\n\nTrueForAll, All\u306f\u3001\u6761\u4ef6\u306b\u3059\u3079\u3066\u306e\u8981\u7d20\u304cmatch\u3059\u308b\u304b\u3069\u3046\u304b\u3002\nExists, Any \u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3067\u3082match\u3059\u308b\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\n\nvar digits = new List<int> { 1, 2, 3 };\n\n// false\ndigits.TrueForAll(n => n % 2 == 0);\ndigits.All(n => n % 2 == 0);\n\n// true\ndigits.Exists(n => n % 2 == 0);\ndigits.Any(n => n % 2 == 0);\n\n\nScala\n\nforall\u306f\u3001\u6761\u4ef6\u306b\u3059\u3079\u3066\u306e\u8981\u7d20\u304cmatch\u3059\u308b\u304b\u3069\u3046\u304b\u3002\nexists\u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3067\u3082match\u3059\u308b\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\n\nval digits = List(1, 2, 3)\n\n// false\ndigits.forall((n:Int) => n % 2 == 0)\ndigits.forall(_ % 2 == 0)\ndigits.forall { n => n % 2 == 0 }\ndigits.forall { _ % 2 == 0 }\n\n// true\ndigits.exists(_ % 2 == 0) \n\n\nGroovy\n\nevery\u306f\u3001\u6761\u4ef6\u306b\u3059\u3079\u3066\u306e\u8981\u7d20\u304cmatch\u3059\u308b\u304b\u3069\u3046\u304b\u3002\nany\u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3067\u3082match\u3059\u308b\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\n\ndef digits = [1, 2, 3]\n\nassert false == digits.every { it % 2 == 0 }\nassert true == digits.any { it % 2 == 0 }\n\n\nRuby\n\nall?\u306f\u3001\u6761\u4ef6\u306b\u3059\u3079\u3066\u306e\u8981\u7d20\u304cmatch\u3059\u308b\u304b\u3069\u3046\u304b\u3002\nany?\u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3067\u3082match\u3059\u308b\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\nnone?\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u6761\u4ef6\u306bmatch\u3057\u306a\u304b\u3063\u305f\u3089true\none?\u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3060\u3051match\u3057\u305f\u3089true\n\ndigits = [1, 2, 3]\n\n# \u305d\u308c\u305e\u308c\u300cdo end\u300d\u3067\u3082\u53ef\u80fd\ndigits.all? { |n| n.integer? }    # true\ndigits.any? { |n| n % 2 == 0 }    # true\ndigits.none? { |n| !n.integer? }  # true\ndigits.one? { |n| n % 2 == 0 }    # true\n\n\n\u62bd\u51fa\n\u6761\u4ef6\u306b\u5408\u3046\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\nJava8\nList<Integer> digits2 = IntStream.rangeClosed(1, 10).boxed().collect(Collectors.toList());\n\n// [2,4,6,8,10]\u3092\u8fd4\u3059\nList<Integer> filtered = digits2.stream().filter(n -> n % 2 == 0).collect(Collectors.toList());\n\n// Optional\u578b\u304c\u8fd4\u308b\u3002\u3053\u306e\u5834\u5408\u306fOptional[2]\u3002\nOptional<Integer> first = digits2.stream().filter(n -> n % 2 == 0).findFirst();\n\n// {false=[1, 3, 5, 7, 9], true=[2, 4, 6, 8, 10]}\u304c\u8fd4\u308b\nMap<Boolean, List<Integer>> partition = digits2.stream().collect(Collectors.partitioningBy(n -> n % 2 == 0));\n\n\nC#\n\nWhere, FindAll\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u3060\u3051\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\nFind\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u306e\u4e00\u4ef6\u76ee\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nvar digits2 = Enumerable.Range(1, 10).ToList<int>();\n\n// [2,4,6,8,10]\u3092\u8fd4\u3059\nvar fillterd = digits2.FindAll(n => n % 2 == 0); // \u30d1\u30bf\u30fc\u30f31\nvar filtered2 = digits2.Where(n => n % 2 == 0); // \u30d1\u30bf\u30fc\u30f32\nvar filtered3 = from n in digits2\u3000// \u30d1\u30bf\u30fc\u30f33\n                where n % 2 == 0\n                select n; \n\n// \u6700\u521d\u306e\u4e00\u4ef6\nvar fillterd4 = digits2.Find(n => n % 2 == 0);\n\n\nScala\n\nfilter\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u3060\u3051\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\nfind\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u306e\u4e00\u4ef6\u76ee\u3092\u8fd4\u3057\u307e\u3059\u3002\npartition\u306f\u3001\u6761\u4ef6\u306b\u5408\u3046\u30ea\u30b9\u30c8\u3068\u5408\u308f\u306a\u3044\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nval digits2 = List.range(1, 10, 1)\n\n// List(2,4,6,8,10)\u3092\u8fd4\u3059\ndigits2.filter((n:Int) => n % 2 == 0) \ndigits2.filter(_ % 2 == 0) \ndigits2.filter { n => n % 2 == 0 } \ndigits2.filter { _ % 2 == 0 } \n\n// Option\u578b\u304c\u8fd4\u308b\u3002\u3053\u306e\u5834\u5408\u306fSome(2)\u3002\ndigits2.find { _ % 2 == 0 } \n\n// (List(2,4,6,8,10), List(1,3,5,7,9))\u304c\u8fd4\u308b\ndigits2.partition(_ % 2)\n\n\nGroovy\ndef digits3 = (1..10)\n\nassert [2, 4, 6, 8, 10]== digits3.findAll { it % 2 == 0 }\nassert [2, 4, 6, 8, 10]== digits3.grep { it % 2 == 0 }\n\nassert 2 == digits3.find { it % 2 == 0 }\n\nassert [[2, 4, 6, 8, 10],[1, 3, 5, 7, 9]]== digits3.split { it % 2 == 0}\n\n\nRuby\n\nfind_all,select\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u3060\u3051\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\nfind,detect\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u306e\u4e00\u4ef6\u76ee\u3092\u8fd4\u3057\u307e\u3059\u3002\npartition\u306f\u3001\u6761\u4ef6\u306b\u5408\u3046\u30ea\u30b9\u30c8\u3068\u5408\u308f\u306a\u3044\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\ndigits2 = [1..10]\n\n# [2,4,6,8,10]\u3092\u8fd4\u3059,reject\u306f\u9006\ndigits2.select { |n| n % 2 == 0 } \ndigits2.find_all { |n| n % 2 == 0 } \n\n# 2\u304c\u8fd4\u308b\u3001\u8981\u7d20\u304c\u306a\u3051\u308c\u3070nil\ndigits2.detect { |n| n % 2 == 0 } \ndigits2.find { |n| n % 2 == 0 } \n\n# [2,4,6,8,10], [1,3,5,7,9]\u304c\u8fd4\u308b\neven, odd = digits2.partition { |n| n % 2 == 0 } \n\n\n\u4e26\u3073\u66ff\u3048\n\nJava8\n List<String> list4 = new ArrayList<>(Arrays.asList(\"b\", \"c\", \"a\"));\n\n // \uff15\u30d1\u30bf\u30fc\u30f3\u3002[a, b, c]\n List<String> sorted1 = list4.stream().sorted(new Comparator<String>() {\n     @Override\n     public int compare(String s1, String s2) {\n         return s1.compareTo(s2);\n     }\n }).collect(Collectors.toList());\n List<String> sorted2 = list4.stream().sorted(java.util.Comparator.comparing(s -> s)).collect(Collectors.toList());\n List<String> sorted3 = list4.stream().sorted((s1, s2) -> s1.compareTo(s2)).collect(Collectors.toList());\n List<String> sorted4 = list4.stream().sorted(java.util.Comparator.comparing(s -> s)).collect(Collectors.toList());\n List<String> sorted5 = list4.stream().sorted().collect(Collectors.toList());\n\n// \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\n list4.sort(java.util.Comparator.naturalOrder());\n\n\nC#\nvar dtos = new[] \n{ \n    new { n = 2, s = \"a\" }, \n    new { n = 1, s = \"b\" }, \n    new { n = 1, s = \"a\" } \n\n};\n\n// \u4e26\u3073\u66ff\u3048\u3001ThenBy\u3092\u4f7f\u3046\u3053\u3068\u3067\u8907\u6570\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u6c7a\u3081\u3089\u308c\u308b\u3002\u964d\u9806\u306e\u5834\u5408\u306f\u3001OrderByDescending, ThenByDescending\nvar sorted = dtos.OrderBy(dto => dto.n).ThenBy(dto => dto.s);\nvar sorted2 = from dto in dtos\n              orderby dto.n, dto.s\n              select dto;\n\n\nScala\nval list4 = List(\"b\", \"c\", \"a\")\n\n// List(\"a\", \"b\", \"c\")\u304c\u8fd4\u308b\nlist4.sorted\nlist4.sortWith( _ < _ )\n\n\nGroovy\ndef list4 = [\"b\", \"c\", \"a\"]\n// \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nassert  [\"a\", \"b\", \"c\"]== list4.sort()\nlist4 = [\"b\", \"c\", \"a\"]\nassert  [\"a\", \"b\", \"c\"]== list4.sort { it ,x  -> it.compareTo(x)}\n\n\nRuby\nlist4 = %w(b c a)\n\n# [\"a\", \"b\", \"c\"]\u304c\u8fd4\u308b\nlist4.sort\nlist4.sort{|a, b| a <=> b }\n\n\n\u3000\u7573\u307f\u8fbc\u307f\n\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u4f7f\u3063\u3066\u8a08\u7b97\u3057\u307e\u3059\u3002\n\njava8\nList<Integer> digits = new ArrayList<>(Arrays.asList(1, 2, 3));\n\n // 4 - 3 - 2 -1 = -2\nint reduce = digits.stream().reduce(4, (n1, n2) -> n1 - n2);\n\n\nC#\nvar digits2 = Enumerable.Range(1, 10).ToList<int>();\n\n// \u7573\u307f\u8fbc\u307f\u3001\u7b2c\u4e00\u5f15\u6570(seed)\u306f\u7701\u7565\u53ef\u80fd, seed\u304c\u7121\u3051\u308c\u3070\u3001digits2.Sum();\u3068\u540c\u3058\nvar fold = digits2.Aggregate(10, (sum, n) => sum + n);\n\n\nScala\n\nfoldLeft\u306f\u3001\u5de6\u306e\u8981\u7d20\u304b\u3089\u9806\u306b\u51e6\u7406\u3057\u307e\u3059\u3002\nfoldRight\u306f\u3001\u53f3\u306e\u8981\u7d20\u304b\u3089\u9806\u306b\u51e6\u7406\u3057\u307e\u3059\u3002\n\nval digits = List(1, 2, 3)\n\n// 4-1-2-3=-2\ndigits.foldLeft(4)(_ - _) \n(4 /: digits)(_ - _)\n\n// 3-2-1-4=-4 \ndigits.foldRight(4)(_ - _)\n(digits :\\ 4)(_ - _)\n\n\nGroovy\ndef digits = [1, 2, 3]\n\n// 4 - 3 - 2 - 1 = -2\nassert -2 == digits.inject(4) {total, n -> total - n }\n\n\nRuby\ndigits = [1, 2, 3]\n\n// 4-1-2-3=-2\ndigits.inject(4) {|diff, n| diff - n }\ndigits.inject(4, :-)\ndigits.reduce(4, :-)\n\n\n\u5408\u6210 (zip/unzip)\n\u4e8c\u3064\u306e\u30ea\u30b9\u30c8\u306e\u540c\u3058\u6dfb\u5b57\u540c\u58eb\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\nJava8\n// TODO \u81ea\u4f5c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff1f\n\n\nC#\nvar list = new List<string> { \"a\", \"b\", \"c\" };\nvar digits = new List<int> { 1, 2, 3 };\n\n// List{(\"a\", 1), (\"b\", 2), (\"c\", 3)} \u30bf\u30d7\u30eb\u578b\u304c\u683c\u7d0d\u3055\u308c\u305fList\u306b\u306a\u308b\nvar zipped = list.Zip(digits, (alpha, digit) => Tuple.Create(alpha, digit));\n\n// \u4e8c\u3064\u306e\u30ea\u30b9\u30c8\u306b\u623b\u3059\nlist = zipped.Select(t => t.Item1).ToList();\ndigits = zipped.Select(t => t.Item2).ToList();\n\n\nScala\nval list  = List(\"a\", \"b\", \"c\")\nval digits = List(1, 2, 3)\n\nval zippedList = list zip digits2 // List((\"a\", 1), (\"b\", 2), (\"c\", 3)) \u30bf\u30d7\u30eb\u578b\u304c\u683c\u7d0d\u3055\u308c\u305fList\u306b\u306a\u308b\n\nval (alphabet, number) = List.unzip(zippedList) // \u4e8c\u3064\u306eList\u306b\u623b\u3059\n\n\nGroovy\ndef list = [\"a\", \"b\", \"c\"]\ndef digits = [1, 2, 3]\n\nassert [[\"a\", 1], [\"b\", 2], [\"c\", 3]]== [list, digits].transpose()\n\nassert [[\"a\", \"b\", \"c\"], [1, 2, 3]]== [[\"a\", 1], [\"b\", 2], [\"c\", 3]].transpose()\n\n\nRuby\nlist  = %w(a b c)\ndigits =  [1, 2, 3]\n\nzippedList = list.zip(digits) # [[\"a\", \"1\"], [\"b\", \"2\"], [\"c\", \"3\"]] \u914d\u5217\u306e\u914d\u5217\u306b\u306a\u308b\n\nlist, digits = zippedList.transpose # \u4e8c\u3064\u306e\u914d\u5217\u306b\u623b\u3059\n\n\n\u5e73\u5766\u5316 (flatten)\n\u5165\u308c\u5b50\u306b\u306a\u3063\u3066\u3044\u308b\u30ea\u30b9\u30c8\u3092\u4e00\u3064\u306e\u30ea\u30b9\u30c8\u306b\u306a\u308b\u3088\u3046\u306b\u9023\u7d50\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\nJava8\nList<Integer> digits1 = new ArrayList<>(Arrays.asList(1, 2, 3));\nList<Integer> digits2 = new ArrayList<>(Arrays.asList(4, 5, 6));\nList<List<Integer>> nestedList = new ArrayList<>(Arrays.asList(digits1, digits2));\n// [1, 2, 3, 4, 5, 6]\nList<Integer> flatten = nestedList.stream().flatMap(n -> n.stream()).collect(Collectors.toList());\n\n\nC#\nvar nestedList = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5, 6 } };\nvar flatList = nestedList.SelectMany(i => i); // {1, 2, 3, 4, 5, 6}\n\n\nScala\nval nestedList = List(List(1,2,3), List(4,5,6))\nList flatten nestedList // List(1,2,3,4,5,6)\n\n\nGroovy\ndef nestedList = [[1, 2, 3], [4, 5, 6]]\nassert  [1, 2, 3, 4, 5, 6]== nestedList.flatten()\n\n\nRuby\nnestedList = [ [1, 2, 3], [4, 5, 6] ]\nnestedList.flatten # [1, 2, 3, 4, 5, 6]\n\n\n\u5c04\u5f71 + \u5e73\u5766\u5316 (flatMap)\nmap + flatten\n\nJava8\nList<Integer> digits1 = new ArrayList<>(Arrays.asList(1, 2, 3));\nList<Integer> digits2 = new ArrayList<>(Arrays.asList(4, 5, 6));\nList<List<Integer>> nestedList = new ArrayList<>(Arrays.asList(digits1, digits2));\n\n// [1, 2, 3, 100, 4, 5, 6, 100]\nList<Integer> flatMap = nestedList.stream().flatMap(list -> {\n    list.add(100);\n    return list.stream();\n}).collect(Collectors.toList());\n\n\nC#\nvar nestedList = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5, 6 } };\n// {1, 2, 3, 100, 4, 5, 6, 100}\nvar flatList = nestedList.SelectMany(l =>\n{\n    l.Add(100);\n    return l;\n});\n\n\nScala\nval nestedList = List(List(1,2,3), List(4,5,6))\n// List(1, 2, 3, 100, 4, 5, 6, 100)\nnestedList flatMap { list => list ++ Seq(100) }\n\n\nGroovy\ndef nestedList = [[1, 2, 3], [4, 5, 6]]\nassert [1, 2, 3, 100, 4, 5, 6, 100]== nestedList.collectMany { list -> list + 100 }\n\n\nRuby\nnestedList = [ [1, 2, 3], [4, 5, 6] ]\n# [1, 2, 3, 100, 4, 5, 6, 100]\nnestedList.flat_map {|list| list << 100}\n\n\n\u30bb\u30c3\u30c8\n\n\u8ffd\u52a0\u30fb\u53d6\u5f97\u30fb\u524a\u9664\n\nJava8\n\u9806\u5e8f\u6027\u304c\u306a\u3044HashSet\nSet<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));\n\n// \u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[1, 2, 3, 4]\nset.add(4);\n\n// \u524a\u9664\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[1, 3, 4]\nset.remove(2);\n\n\u9806\u5e8f\u6027\u304c\u3042\u308bTreeSet\n// \u81ea\u7136\u9806\u5e8f\u3002[1,2,3]\nSet<Integer> treeSet = new TreeSet<>(Arrays.asList(2, 3, 1));\n\n// \u9806\u5e8f\u3092\u5909\u3048\u308b\u3002[3,2,1]\n// \u30d1\u30bf\u30fc\u30f31\nSet<Integer> treeSet2 = new TreeSet<>((s1, s2) -> s2.compareTo(s1));\ntreeSet2.addAll(Arrays.asList(2, 3, 1));\n// \u30d1\u30bf\u30fc\u30f32\nSet<Integer> treeSet3 = new TreeSet<>(java.util.Comparator.reverseOrder());\ntreeSet3.addAll(Arrays.asList(2, 3, 1));\n\n\nC#\n\u633f\u5165\u9806\u304c\u4fdd\u8a3c\u3055\u308c\u308bHashSet\nvar set = new HashSet<int> { 1, 2, 3 };\n\n// \u8ffd\u52a0\u3001Set[1, 2, 3, 4]\u3092\u8fd4\u3059\nset.Add(4);\n\n//\u3000\u524a\u9664\u3001Set[1, 3, 4]\nset.Remove(2);\n\n\u9806\u5e8f\u6027\u304c\u3042\u308bSortedSet\n// \u81ea\u7136\u9806\u5e8f\u3001SortedSet[1, 2, 3]\nvar sortedSet = new SortedSet<int> { 2, 3, 1 };\n\n// \u9806\u5e8f\u5909\u66f4\u3001SortedSet[3, 2, 1]\nvar sortedSet2 = new SortedSet<int>(Comparer<int>.Create((a, b) => b.CompareTo(a))) { 2, 3, 1 };\nvar sortedSet3 = new SortedSet<int>(new FuncComparer<int>((a, b) => b.CompareTo(a))) { 2, 3, 1 }\nclass FuncComparer<T> : IComparer<T>\n{\n    private readonly Comparison<T> comparison;\n    public FuncComparer(Comparison<T> comparison)\n    {\n        this.comparison = comparison;\n    }\n    public int Compare(T x, T y)\n    {\n        return comparison(x, y);\n    }\n}\n\n\nScala\n\u9806\u5e8f\u6027\u304c\u306a\u3044HashSet\n// \u30c7\u30d5\u30a9\u30eb\u30c8\u306fimmutable\n\nval set = Set(1, 2, 3)\n\n// \u8ffd\u52a0\u3001Set(1, 2, 3, 4)\u3092\u8fd4\u3059\nset + 4\n\n//\u3000\u524a\u9664\u3001Set(1, 3, )\nset - 2\n\n// mutable\u306b\u3057\u305f\u3051\u308c\u3070\u3001import\u3092\u3059\u308b\nimport scala.collection.mutable.Set\nval mutableSet = Set(1, 2, 3)\n\n// \u8ffd\u52a0\u3001\u524a\u9664\nmutableSet += 4 // Set(1, 2, 3, 4) \nmutableSet -= 2 // Set(1, 3, 4)\n\n\u9806\u5e8f\u6027\u304c\u3042\u308bTreeSet\nimport scala.collection.immutable.TreeSet\n\n// \u81ea\u7136\u9806\u5e8f\u3001TreeSet(1, 2, 3)\nval treeSet = TreeSet(2, 3, 1)\n\n// \u9806\u5e8f\u5909\u66f4\u3001TreeSet(3, 2, 1)\nval sortRule = Ordering.fromLessThan[Int](_ > _)\nval treeSet2 = TreeSet.empty(sortRule)\ntreeSet2 + (2, 3, 1)\n\n\nGroovy\n\u9806\u5e8f\u6027\u304c\u306a\u3044HashSet\ndef set = new HashSet([1, 2, 3])\ndef set2 = new HashSet(1..3)\ndef set3 = [1, 2, 3] as Set\ndef set4 = (1..3) as Set\n\n// \u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[1, 2, 3, 4]\nset.add(4)\n\n// \u524a\u9664\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[1, 3, 4]\nset.remove(2)\n\n\u9806\u5e8f\u6027\u304c\u3042\u308bTreeSet\n//\u3000\u81ea\u7136\u9806\u5e8f\nassert [2, 3, 1] as Set == new TreeSet([2, 3, 1])\n\n// \u9806\u5e8f\u3092\u5909\u3048\u308b\ndef treeSet = new TreeSet({it ,x ->\n    x.compareTo(it)\n} as Comparator)\ntreeSet.addAll([2, 3, 1])\n\n\nRuby\n\u9806\u5e8f\u6027\u304c\u306a\u3044set\nset = Set[1, 2, 3]\nset = Set.new(1, 2, 3)\nset = Set.new(1..3)\nset = (1..3).to_set\n\n# \u5f8c\u308d\u306b\u8ffd\u52a0\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3001#<Set: {1, 2, 3, 4, 5}>\nset << 4\nset.add(5) \nset.add?(5) # \u8ffd\u52a0\u3067\u304d\u306a\u304b\u3063\u305f\u3089\u3001nil\u3092\u8fd4\u3059\n\n#\u3000\u524a\u9664\nset.delete(2)  #<Set: {1, 3, 4, 5}>\nset.delete?(2) # nil\n\n# \u307e\u3068\u3081\u3066\u8ffd\u52a0\u3001#<Set: {1, 3, 4, 5, 6, 7}>\nset.merge(Set[5, 6, 7])\n\n# \u307e\u3068\u3081\u3066\u524a\u9664\u3001#<Set: {1, 3}>\nset.subtract(Set.new(4..7))\n\n# \u30d6\u30ed\u30c3\u30af\u306e\u7d50\u679c\u304ctrue\u306e\u8981\u7d20\u3092\u524a\u9664\u3001#<Set: {1}>\nset.reject! { |s| s==3}\nset.reject! { |s| s==3} # nil\n\n\u9806\u5e8f\u6027\u304c\u3042\u308bSortedSet\n# \u81ea\u7136\u9806\u5e8f\u3001#<SortedSet: {1, 2, 3}>\nSortedSet.new([2, 3, 1])\n\n\n\u96c6\u5408\n\nJava8\nSet<Integer> set1 = new HashSet<>(Arrays.asList(1, 2, 3));\nSet<Integer> set2 = new HashSet<>(Arrays.asList(2, 3, 4));\n\n// \u7a4d\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u5171\u901a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[2, 3]\nset1.retainAll(set2);\n\nset1 = new HashSet<>(Arrays.asList(1, 2, 3));\n// \u548c\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[1, 2, 3, 4]\nset1.addAll(set2);\n\nset1 = new HashSet<>(Arrays.asList(1, 2, 3));\n// \u5dee\u96c6\u5408\u3002\u5de6\u8fba\u304b\u3089\u53f3\u8fba\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3001[1]\nList<Integer> diff = new ArrayList<Integer>();\ndiff.addAll(set1);\ndiff.removeAll(set2);\n\n\nC#\n// \u7a4d\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u5171\u901a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001{2, 3}\nvar interset = new HashSet<int> { 1, 2, 3 }.Intersect(new HashSet<int> { 2, 3, 4 });\n\n// \u548c\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001{1, 2, 3, 4}\nvar union = new HashSet<int> { 1, 2, 3 }.Union(new HashSet<int> { 2, 3, 4 });\n\n// \u5dee\u96c6\u5408\u3002\u5de6\u8fba\u304b\u3089\u53f3\u8fba\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3001{1}\nvar except = new HashSet<int> { 1, 2, 3 }.Except(new HashSet<int> { 2, 3, 4 });\n\n// \u5bfe\u79f0\u5dee\u3002\u7247\u65b9\u306b\u3060\u3051\u3057\u304b\u306a\u3044\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002{4, 1}\nvar digits3 = new HashSet<int> { 1, 2, 3 };\ndigits3.SymmetricExceptWith(new HashSet<int> { 2, 3, 4 });\n\n\nScala\n// \u7a4d\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u5171\u901a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001Set(2, 3)\nSet(1, 2, 3) & Set(2, 3, 4) \nSet(1, 2, 3) intersect Set(2, 3, 4)\n\n// \u548c\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001Set(1, 2, 3, 4)\nSet(1, 2, 3) | Set(2, 3, 4) \nSet(1, 2, 3) union Set(2, 3, 4)\n\n// \u5dee\u96c6\u5408\u3002\u5de6\u8fba\u304b\u3089\u53f3\u8fba\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3001Set(1)\nSet(1, 2, 3) &~ Set(2, 3, 4) \nSet(1, 2, 3) diff Set(2, 3, 4)\n\n// \u5bfe\u79f0\u5dee\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u81ea\u5206\u3067\u3084\u308b\u3001Set(1, 4)\nval s1 = Set(1, 2, 3)\nval s2 = Set(2, 3, 4)\n(s1 diff s2) union (s2 diff s1)\n\n\nGroovy\ndef set1 = [1, 2, 3] as Set\ndef set2 = [2, 3, 4] as Set\n\n// \u7a4d\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u5171\u901a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nassert [2, 3] as Set== set1.intersect(set2)\n\nset1 = new HashSet<>(Arrays.asList(1, 2, 3))\n// \u548c\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nassert [1, 2, 3, 4] as Set == set1.plus(set2)\n\nset1 = new HashSet<>(Arrays.asList(1, 2, 3))\n// \u5dee\u96c6\u5408\u3002\u5de6\u8fba\u304b\u3089\u53f3\u8fba\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3001[1]\nassert [1] as Set == set1.minus(set2)\n\n\nRuby\n# \u7a4d\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u5171\u901a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001#<Set: {2, 3}>\nSet[1, 2, 3] & Set[2, 3, 4]\nSet[1, 2, 3].intersection(Set[2, 3, 4])\n\n# \u548c\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001#<Set: {1, 2, 3, 4}>\nSet[1, 2, 3] | Set[2, 3, 4] \nSet[1, 2, 3].union(Set[2, 3, 4])\n\n# \u5dee\u96c6\u5408\u3002\u5de6\u8fba\u304b\u3089\u53f3\u8fba\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3001#<Set: {1}>\nSet[1, 2, 3] - Set[2, 3, 4]\nSet[1, 2, 3].difference(Set[2, 3, 4])\n\n# \u5bfe\u79f0\u5dee\u3002\u7247\u65b9\u306b\u3060\u3051\u3057\u304b\u306a\u3044\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002#<Set: {4, 1}>\nSet[1, 2, 3] ^ Set[2, 3, 4]\n\n# \u6761\u4ef6\u304c\u540c\u3058\u96c6\u5408\u3067\u307e\u3068\u3081\u308b\u3001#<Set: {#<Set: {1, 3}>, #<Set: {2}>}>\nSet[1, 2, 3].divide { |s| s % 2 == 0 }\n# divide\u3068\u540c\u3058\u3060\u304c\u623b\u308a\u5024\u304chash {false=>#<Set: {1, 3}>, true=>#<Set: {2}>}\nSet[1, 2, 3].classify { |s| s % 2 == 0 }\n\n\n\u30de\u30c3\u30d7\n\n\u8ffd\u52a0\u30fb\u53d6\u5f97\u30fb\u524a\u9664\n\nJava8\nMap<String, Integer> map = new HashMap<String, Integer>() {\n    {\n        put(\"a\", 1);\n        put(\"b\", 2);\n        put(\"c\", 3);\n    }\n};\n\n// \u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nmap.put(\"d\", 4);\n\n// \u5024\u304c\u306a\u3044\u5834\u5408\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8fd4\u3059\nmap.getOrDefault(\"e\", 5); // 5\n\n// \u524a\u9664\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002{a=1, b=2, d=4}\nmap.remove(\"c\");\n\n\nC#\nvar map = new Dictionary<string, int>() { { \"a\", 1 }, { \"b\", 2 }, { \"c\", 3 }, };\n\n// \u8ffd\u52a0\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nmap.Add(\"d\", 4);\nmap[\"e\"] = 5;\n\n// \u53d6\u5f97\u3001\u5024\u304c\u306a\u3044\u5834\u5408\u306fKeyNotFoundException\nvar value = map[\"a\"];   \n// \u5024\u304c\u306a\u3044\u5834\u5408\u306f\u623b\u308a\u5024\u304cfalse\nif (map.TryGetValue(\"b\", out value))\n{\n    Console.WriteLine(value);\n}\n\n// \u524a\u9664\nmap.Remove(\"c\");\n\n// SortedSet\u306e\u3088\u3046\u306bkey\u3067\u30bd\u30fc\u30c8\u3055\u308c\u308b \nnew SortedDictionary<string, int> { { \"a\", 1 }, { \"b\", 2 } };\n\n\nScala\nimmutable\u306e\u5834\u5408\n// map,map2,map3\u3068\u3082\u306b\u540c\u3058\nval map = Map(\"a\" -> 1, \"b\" -> 2, \"c\" -> 3) \nval map2 = Map( (\"a\", 1), (\"b\", 2), (\"c\", 3) ) \n\n// var\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nvar map3 = Map.empty[String, Int]\n// \u8a2d\u5b9a\nmap3 += \"a\" -> 1\nmap3 += \"b\" -> 2\nmap3 += \"c\" -> 3\n\n// \u53d6\u5f97 \uff08\u6307\u5b9a\u306e\u8981\u7d20\u304c\u7121\u3051\u308c\u3070java.util.NoSuchElementException\uff09\nmap.apply(\"a\") // 1\nmap(\"a\") // 1\n// map(\"z\") \n\n// \u53d6\u5f97\uff08Option\u578b\u304c\u8fd4\u308b\uff09\nmap.get(\"a\") // Some(1)\nmap.get(\"z\") // None\n\n// \u53d6\u5f97\uff08\u6307\u5b9a\u306e\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff09\nmap.getOrElse(\"z\", 0) // 0\n\n// \u4ed6\u306emap\u3068\u7d50\u5408\u3059\u308b\u3001Map(e -> 5, b -> 2, d -> 4, a -> 1, c -> 3)\nval newMap = map ++ Map(\"d\" -> 4, \"e\" -> 5) \n\nmutable\u306e\u5834\u5408\n// immutable\u3068\u540c\u69d8 + \u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\nimport scala.collection.mutable.Map\n\n// val\u3067\u826f\u3044\nval immutableMap = Map.empty[String, Int]\n// \u8ffd\u52a0\nimmutableMap += \"a\" -> 1\nimmutableMap.update(\"b\", 2)\nimmutableMap(\"c\") = 3\n\n// \u5909\u66f4\nimmutableMap.update(\"b\", 20)\nimmutableMap(\"c\") = 30\nprint(immutableMap) // Map(b -> 20, a -> 1, c -> 30)\n\n// \u53d6\u5f97\uff08\u6307\u5b9a\u306e\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306f\u8ffd\u52a0\u3057\u3066\u8fd4\u3059\uff09\nimmutableMap.getOrElseUpdate(\"z\",0)\n\n// \u4ed6\u306emap\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\nimmutableMap ++= Map(\"d\" -> 4, \"e\" -> 5)\n\n\nGroovy\ndef map = [ \"a\" : 1, \"b\" : 2, \"c\" : 3 ]\n\n// \u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nmap.put(\"d\", 4)\nmap[\"e\"] = 5\n\n// \u5024\u304c\u306a\u3044\u5834\u5408\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8fd4\u3059\nmap.withDefault{6} // 6\n\n// \u524a\u9664\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002{a=1, b=2, d=4, e=5}\nmap.remove(\"c\")\n\n\nRuby\nmap = {a: 1, b: 2, c: 3} \nmap2 = {:a => 1, :b => 2, :c => 3} \nmap3 = {\"a\" => 1, \"b\" => 2, \"c\" => 3} \n\n# \u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nmap2[:d] = 4\nmap3[\"d\"] = 4\n\n# \u53d6\u5f97 \nmap[:a]   # 1\nmap3[\"a\"] # 1\n\n\n\u9ad8\u968e\u30e1\u30bd\u30c3\u30c9\u3067Key,Value\u3092\u6271\u3046\n\u30ea\u30b9\u30c8\u3067\u8a18\u8ff0\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306f\u307b\u307c\u4f7f\u3048\u308b\u304c\u3001Key,Value\u5f62\u5f0f\u306a\u306e\u3067\u5c11\u3057\u66f8\u304d\u65b9\u304c\u9055\u3044\u307e\u3059\u3002\n\nJava8\nMap<String, Integer> map = new HashMap<String, Integer>() {\n    {\n        put(\"a\", 1);\n        put(\"b\", 2);\n        put(\"c\", 3);\n    }\n};\n\n// \u30d1\u30bf\u30fc\u30f31\nmap.forEach(new BiConsumer<String, Integer>() {\n    @Override\n    public void accept(String key, Integer value) {\n        System.out.println(String.format(\"key=%s\", key));\n        System.out.println(String.format(\"value=%s\", value));\n    }\n})\n// \u30d1\u30bf\u30fc\u30f32;\nmap.forEach((key, value) -> {\n    System.out.println(String.format(\"key=%s\", key));\n    System.out.println(String.format(\"value=%s\", value));\n});\n\n\nC#\nvar map = new Dictionary<string, int>() { { \"a\", 1 }, { \"b\", 2 }, { \"c\", 3 }, };\n\nmap.ToList().ForEach(pair => {\n    Console.WriteLine(\"key={0}\", pair.Key);\n    Console.WriteLine(\"value={0}\", pair.Value);\n});\nvar tupple = from m in map.ToList()\n                       select new { key = m.Key, value = m.Value };\n\n\nScala\nval map = Map(\"a\" -> 1, \"b\" -> 2, \"c\" -> 3) \n\n// _1\u306bkey, _2\u306bvalue\u304c\u5165\u308b\nmap.foreach { \n    item => \n        println(\"key=\" + item._1)\n        println(\"value=\" + item._2) \n}\n\n// case\u3092\u5229\u7528\u3057\u3066\u5909\u6570\u540d\u3092\u4ed8\u3051\u308b\nmap.foreach { \n    case (key, value) => \n        println(\"key=\" + key)\n        println(\"value=\" + value)\n}\n\n// map\u7279\u6709\u306e\u30e1\u30bd\u30c3\u30c9\n\n// key\u3060\u3051\u3092\u5229\u7528\u3059\u308b\u3001Map(a -> 1)\nmap.filterKeys(_ == \"a\")\n\n// value\u3060\u3051\u3092\u5229\u7528\u3059\u308b\u3001Map(b -> 4, a -> 2, c -> 6)\nmap.mapValues(_ * 2)\n\n\nGroovy\ndef map = [ \"a\" : 1, \"b\" : 2, \"c\" : 3 ]\n\nmap.forEach{key, value ->\n    println(\"key=${key}\")\n    println(\"value=${value}\")\n}\n\n\nRuby\nmap = {a: 1, b: 2, c: 3} \n\n# \u4ed6\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3082\u540c\u3058\u3088\u3046\u306bkey,value\u304c\u5229\u7528\u3067\u304d\u308b\nmap.each { |k, v| \n    puts \"key=#{k}\"\n    puts \"value=#{v}\"\n}\n\n# map\u7279\u6709\u306e\u30e1\u30bd\u30c3\u30c9\n\n# key\u3060\u3051\u3092\u5229\u7528\u3059\u308b\nmap.each_key { |k|  puts \"key=#{k}\"}\n\n# value\u3060\u3051\u3092\u5229\u7528\u3059\u308b\nmap.each_value { |v|  puts \"value=#{v}\"}\n\n\nJava8, C#, Scala, Groovy, Ruby\u306e\u6bd4\u8f03\u8a18\u4e8b\u3067\u3059\u3002\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3API\u306b\u3064\u3044\u3066\u3042\u306e\u8a00\u8a9e\u306e\u3042\u306e\u66f8\u304d\u65b9\u306f\u3001\u3053\u306e\u8a00\u8a9e\u3067\u306f\u3053\u3046\u66f8\u304f\u7684\u306a\u3082\u306e\u3067\u3059\u3002\n\u305d\u308c\u305e\u308c\u899a\u3048\u305f\u3051\u3069\u4f7f\u308f\u306a\u3044\u3068\u3059\u3050\u5fd8\u308c\u308b\u306e\u3067\u3001\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002 \n\u5197\u9577\u306a\u66f8\u304d\u65b9\u3068\u305d\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3082\u306a\u308b\u3079\u304f\u8a18\u8ff0\u3057\u3068\u304d\u307e\u3059\u3002\n\n(\u305d\u308c\u305e\u308c\u30e1\u30bd\u30c3\u30c9\u3092\u7db2\u7f85\u3057\u3088\u3046\uff0bSwift\u3082\u66f8\u3053\u3046\u3068\u601d\u3063\u3066\u305f\u3051\u3069\u3001\u60f3\u50cf\u4ee5\u4e0a\u306b\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u306e\u3067\u6c17\u304c\u5411\u3044\u305f\u3089\u8ffd\u8a18\u3057\u307e\u3059)\n\n# \u30ea\u30b9\u30c8\n\n## \u4f5c\u6210\n\n### Java8\n\n```java\nList<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\n// Stream\u304b\u3089List\u5909\u63db\u3059\u308b\u5834\u5408\nlist = Stream.of(\"a\", \"b\", \"c\").collect(Collectors.toCollection(ArrayList::new)); \n\nList<Integer> digits = new ArrayList<>(Arrays.asList(1, 2, 3));\n```\n\n### C# \n\n```csharp\nvar list = new List<string> { \"a\", \"b\", \"c\" };\n\nvar digits = new List<int> { 1, 2, 3 };\n```\n\n### Scala\n\n```scala\n// \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\nval list = List(\"a\", \"b\", \"c\")\n\n// \u30b3\u30f3\u30b9\uff08cons\uff09\u3092\u5229\u7528, Nil\u306f\u8981\u7d20\u304c0\u306eList\uff08\u3053\u306e\u5834\u5408\u3001List.empty[Int]\u3067\u3082\u3067\u304d\u308b\uff09\u3002::\u306f\u8981\u7d20\u3092List\u306e\u5148\u982d\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\nval digits = 1 :: 2 :: 3 :: Nil\n```\n\n### Groovy\n\n```groovy\ndef list = [\"a\", \"b\", \"c\"]\n\ndef digits = [1, 2, 3]\ndigits = []<< 1 << 2 << 3\n```\n\n### Ruby\n\n```ruby\nlist = Array[\"a\", \"b\", \"c\"] # \u30d1\u30bf\u30fc\u30f31\nlist = [\"a\", \"b\", \"c\"]      # \u30d1\u30bf\u30fc\u30f32\nlist = %w(a b c)            # \u30d1\u30bf\u30fc\u30f33\n\n# \u7a7a\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3066\u8ffd\u52a0  \u30d1\u30bf\u30fc\u30f34\ndigits = Array.new\ndigits.concat([1, 2, 3])\n```\n\n## \u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u8981\u7d20\u3067\u4f5c\u6210\n\n### Java8\n\n```java\n// 1\u304b\u3089\u59cb\u307e\u308a10\u3067\u7d42\u308f\u308b\u6570\u5024\u3092\u4f5c\u6210\nList<Integer> digits2 = IntStream.rangeClosed(1, 10).boxed().collect(Collectors.toList());\n```\n\n### C# \n\n```csharp\n// 1\u304b\u3089\u59cb\u307e\u308a10\u3067\u7d42\u308f\u308b\u6570\u5024\u3092\u4f5c\u6210\nvar digits2 = Enumerable.Range(1, 10).ToList<int>();\n```\n\n### Scala\n\n```scala\n// 1\u304b\u3089\u59cb\u307e\u308a10\u3067\u7d42\u308f\u308b\u6570\u5024\u3092\u5897\u52061(\u4efb\u610f)\u3067\u4f5c\u6210\nval digits2 = List.range(1, 10, 1) // \u30d1\u30bf\u30fc\u30f31\ndigits2 = Range(1,10).toList       // \u30d1\u30bf\u30fc\u30f32\ndigits2 = (1 to 10 by 1).toList    // \u30d1\u30bf\u30fc\u30f33\n```\n\n### Groovy\n\n```groovy\n// 1\u304b\u3089\u59cb\u307e\u308a10\u3067\u7d42\u308f\u308b\u6570\u5024\u3092\u4f5c\u6210\ndef digits3 = (1..10)\n```\n\n### Ruby\n\n```ruby\n# 1\u304b\u3089\u59cb\u307e\u308a10\u3067\u7d42\u308f\u308b\u6570\u5024\u3092\u4f5c\u6210\n# \u3061\u306a\u307f\u306b1...10 \u306f1\u304b\u30899\ndigits2 = (1..10).to_a            # \u30d1\u30bf\u30fc\u30f31\ndigits2 = Array(Range.new(1, 10)) # \u30d1\u30bf\u30fc\u30f32\n\n# \u5897\u52061\u3068\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5834\u5408  \u30d1\u30bf\u30fc\u30f33\n(1..10).step(1).to_a\n```\n\n## \u540c\u3058\u8981\u7d20\u3067\u4f5c\u6210\n\n### Java8\n\n```java\n// [\"a\", \"a\", \"a\"]\u306e\u3088\u3046\u306b\u540c\u3058\u8981\u7d20\u3067\u4f5c\u6210\nSupplier<String> supplier = () -> \"a\";\nList<String> list2 = Stream.generate(supplier).limit(3).collect(Collectors.toList());\n```\n\n### C# \n\n```csharp\n// [\"a\", \"a\", \"a\"]\u306e\u3088\u3046\u306b\u540c\u3058\u8981\u7d20\u3067\u4f5c\u6210\nvar list2 = new List<string>();\nlist2.AddRange(Enumerable.Repeat(\"a\", 3));\n```\n\n### Scala\n\n```scala\n// List(\"a\", \"a\", \"a\")\u306e\u3088\u3046\u306b\u540c\u3058\u8981\u7d20\u3067\u4f5c\u6210\nList.fill(\"a\", 3)\n```\n\n### Ruby\n\n```ruby\n# [\"a\", \"a\", \"a\"]\u306e\u3088\u3046\u306b\u540c\u3058\u8981\u7d20\u3067\u4f5c\u6210\n# \u305f\u3060\u3057\u3001\"a\"\u306f\u53c2\u7167\u5148\u304c\u540c\u3058\u306b\u306a\u308b\u3067\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3059\u3079\u3066\u5909\u308f\u308b\nlist2 = Array.new(3, \"a\")  # \u30d1\u30bf\u30fc\u30f31\nlist2[0].upcase!\nlist2[0] = \"b\" # 0\u756a\u76ee\u306e\u53c2\u7167\u5148\u304c\u5909\u308f\u308b\u306e\u3067[\"b\", \"A\", \"A\"]\n[\"a\", \"a\", \"a\"][0].upcase! # \u5225\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u306e\u3067[\"A\", \"a\", \"a\"] \n# \u4e0a\u8a18\u3068\u540c\u3058\nlist2 = Array.new(3)       # \u30d1\u30bf\u30fc\u30f32\nlist2.fill(\"a\")\nlist2[0].upcase!\n```\n\n## \u8ffd\u52a0\n\n### Java8\n\n```java\nList<Integer> digits = new ArrayList<>(Arrays.asList(1, 2, 3));\n\n// \u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.add(0, -10); // [-10, 1, 2, 3]\n\n// \u5f8c\u308d\u306b\u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.add(4); // [-10, 1, 2, 3, 4]\n\n// \u30ea\u30b9\u30c8\u306e\u7d50\u5408\u3001\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.addAll(Arrays.asList(4, 5)); // [-10, 1, 2, 3, 4, 4, 5]\n```\n\n### C# \n\n```csharp\n// \u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.Insert(0, -10); //  {-10, 1, 2, 3}\n\n// \u5f8c\u308d\u306b\u8ffd\u52a0\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.Add(4);  {-10, 1, 2, 3, 4}\n\n// \u30ea\u30b9\u30c8\u306e\u7d50\u5408\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002{-10, 1, 2, 3, 4, 4, 5}\ndigits.AddRange(new List<int> { 4, 5 });\n```\n\n### Scala\n\nimmutable\u306e\u5834\u5408\n\n```scala\n// \u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3001 List(1, 2, 3)\n1 +: List(2, 3)\n\n// Iterator,Iterable\u3092mixin\u3057\u3066\u3044\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3002List(a, b, c, d)\u3092\u8fd4\u3059\nList(\"a\", \"b\") ++ Seq(\"c\", \"d\")\n```\n\nmutable\u306e\u5834\u5408\n\n```scala\nimport scala.collection.mutable._\n\n// \u7a7a\u306eListBuffer\u3092\u4f5c\u6210\nval listBuffer = ListBuffer.empty[String]\n\n// \u5f8c\u308d\u306b\u8ffd\u52a0\u3001ListBuffer(\"a\", \"b\", \"c\", \"d\")\nlistBuffer += \"a\"\nlistBuffer += \"b\"\nlistBuffer.append(\"c\", \"d\")\n\nval listBuffer2 = 1 +: ListBuffer(2, 3)\n// \u5148\u982d\u306b\u8ffd\u52a0 listBuffer2\u306f\u3001ListBuffer(-1, 0, 1, 2, 3)\u306b\u306a\u308b\nlistBuffer2.prepend(-1, 0)\n```\n\n### Groovy\n\n```groovy\n// \u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\ndigits.add(0, -1) // \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9 [-1, 1, 2, 3]\n\n// \u5f8c\u308d\u306b\u8ffd\u52a0\nassert [-1, 1, 2, 3, 4]== digits.plus(4)\nassert [-1, 1, 2, 3, 4]== digits + 4\nassert [-1, 1, 2, 3, 4]== digits.leftShift(4) // \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nassert [-1, 1, 2, 3, 4, 5]== digits << 5 // \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\n\ndigits = [1, 2, 3]\n// \u30ea\u30b9\u30c8\u306e\u7d50\u5408\u3001[1, 2, 3, 4, 5]\nassert [1, 2, 3, 4, 5]== digits.plus([4, 5])\nassert [1, 2, 3, 4, 5]== digits + [4, 5]\ndigits.addAll([4, 5]) // \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9 [1, 2, 3, 4, 5]\n```\n\n### Ruby\n\n```ruby\n# \u5148\u982d\u306b\u8981\u7d20\u3092\u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[0, 1, 2, 3]\n[1, 2, 3].unshift(0)\n\n# \u5f8c\u308d\u306b\u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002\n[1, 2, 3].push(4)\n[1, 2, 3] << 4\n\n## \u30ea\u30b9\u30c8\u306e\u7d50\u5408\u3001 [1, 2, 3, 4, 5]\n[1, 2, 3] + [4, 5] # \u7834\u58ca\u3057\u306a\u3044 \n[1, 2, 3].contact([4, 5]) # \u30ec\u30b7\u30fc\u30d0\u30fc[1, 2, 3]\u304c\u66f8\u304d\u5909\u308f\u308b\u7834\u58ca\u30e1\u30bd\u30c3\u30c9\n```\n\n## \u524a\u9664\n\n### Java8\n\n```java\n// \u4e21\u65b9\u3068\u3082\u7834\u58ca\u30e1\u30bd\u30c3\u30c9\n// index\u3067\u524a\u9664\ndigits.remove(0);\n// \u5f15\u6570\u306e\u8981\u7d20\u3092\u524a\u9664\ndigits.remove(Integer.valueOf(1));\n```\n\n### C# \n\n```csharp\n// \u4e21\u65b9\u3068\u3082\u7834\u58ca\u30e1\u30bd\u30c3\u30c9\n// index\u3067\u524a\u9664\ndigits.RemoveAt(0);\n// \u5f15\u6570\u306e\u8981\u7d20\u3092\u524a\u9664\ndigits.Remove(1);\n```\n\n### Scala\n\n```scala\n// \u524a\u9664\u3001ListBuffer(a, c, d)\u304c\u8fd4\u308b\u3002\u5909\u6570listBuffer\u81ea\u4f53\u306b\u306f\u5909\u5316\u306a\u3057\nlistBuffer - \"b\"\n```\n\n### Groovy\n\n```groovy\ndigits = [1, 1, 2, 3]\n// \u524a\u9664\u3001\u7834\u58ca\u3057\u306a\u3044\nassert [2, 3]== digits - 1\nassert [1, 1]== digits - [2, 3]\nassert [2, 3]== digits.minus(1)\nassert [1, 1]== digits.minus([2, 3])\n```\n\n### Ruby\n\n```ruby\n# \u524a\u9664\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3001[\"a\", \"c\"]\nlist3  = %w(a b c)\nlist3.delete_at (1)\nlist3  = %w(a b c)\nlist3.delete(\"b\")\n```\n\n## \u53d6\u5f97\n\n### Java8\n\n```java\nlist.get(0);\n```\n\n### C# \n\n```csharp\nlist.ElementAt(0); // \u30d1\u30bf\u30fc\u30f31\nlist[0];           // \u30d1\u30bf\u30fc\u30f32      \n```\n\n### Scala\n\n```scala\nlist.apply(0)  // \u30d1\u30bf\u30fc\u30f31\nlist(0)        // \u30d1\u30bf\u30fc\u30f32\n```\n\n### Groovy\n\n```groovy\nassert \"a\" == list.get(0)   // \u30d1\u30bf\u30fc\u30f31\nassert \"a\" == list.getAt(0) // \u30d1\u30bf\u30fc\u30f32\nassert \"a\" == list[0]       // \u30d1\u30bf\u30fc\u30f33\n```\n\n### Ruby\n\n```ruby\nlist[0] \n```\n\n## head,tail\n\n### Java8\n\n```java\nList<String> list = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));\n\n// TODO head\u3068tail\u306e\u3064\u3082\u308a\u3060\u3051\u3069\u3001\u3082\u3063\u3068\u7c21\u5358\u306b\u66f8\u3051\u306a\u3044\u304b\uff1f\nIterator<String> ite = list.stream().iterator();\nString head = ite.next(); // a\nIterable<String> iterable = () -> ite;\nList<String> tail = StreamSupport.stream(iterable.spliterator(), false).collect(Collectors.toList());\ntail.forEach(System.out::println); // [\"b\", \"c\"]\n\nList<String> init = list.stream().limit(list.size() - 1).collect(Collectors.toList());\ninit.forEach(System.out::println); // [\"a\", \"b\"]\nOptional<String> last = list.stream().reduce((a, b) -> b); // Optional[c]\n```\n\n### C# \n\n```csharp\nlist.FirstOrDefault();  // a\nlist.Skip(1).ToList(); // {\"b\", \"c\"}\n\nlist.Take(list.Count - 1).ToList() // {\"a\", \"b\"}\nlist.LastOrDefault(); // c\n```\n\n### Scala\n\n```scala\nlist.head // a\nlist.tail // List(b, c)\n\nlist.init // List(a, b)\nlist.last // c\n```\n\n### Groovy\n\n```groovy\nassert \"a\" == list.head()\nassert [\"b\", \"c\"]== list.tail()\nassert [\"b\", \"c\"]==  list.drop(1)\n\nassert [\"a\", \"b\"]== list.init()\nassert [\"a\", \"b\"]== list.take(list.size() -1)\nassert \"c\" == list.last()\nassert \"c\" == list[-1]\n```\n\n### Ruby\n\n```ruby\nlist.first        #  a\nlist.drop(1)      # [b, c]\nlist[1..-1]       # [b, c]\nlist.slice(1..-1) # [b, c]\nlist.last         # c\nlist[-1]          # c\n```\n\n## \u7e70\u308a\u8fd4\u3057\uff08foreach\uff09\n\n### Java8\n\n```java\nList<Integer> digits = new ArrayList<>(Arrays.asList(1, 2, 3));\n\n// \u30d1\u30bf\u30fc\u30f31\ndigits.forEach(new Consumer<Integer>() {\n    @Override\n    public void accept(Integer t) {\n        System.out.println(t);\n    }\n});\n// \u30d1\u30bf\u30fc\u30f32\ndigits.forEach(n -> {\n    System.out.println(n);\n});\n// \u30d1\u30bf\u30fc\u30f33\ndigits.forEach(n -> System.out.println(n));\n// \u30d1\u30bf\u30fc\u30f34\ndigits.forEach(System.out::println);\n```\n\n### C# \n\n```csharp\nvar digits = new List<int> { 1, 2, 3 };\ndigits.ForEach(n => Console.WriteLine(n));\n```\n\n### Scala\n\n```scala\nval list = List(\"a\", \"b\", \"c\")\n\nlist.foreach(s => println(s)) // \u30d1\u30bf\u30fc\u30f31\nlist.foreach(s => println(_)) // \u30d1\u30bf\u30fc\u30f32\nlist.foreach(println)         // \u30d1\u30bf\u30fc\u30f33\nlist.foreach { println }      // \u30d1\u30bf\u30fc\u30f34\n```\n\n### Groovy\n\n```groovy\ndef digits = [1, 2, 3]\n\n// \u30d1\u30bf\u30fc\u30f31\ndigits.each { n -> println(n) }\n// \u30d1\u30bf\u30fc\u30f32\ndigits.each { println(it) }\n```\n\n### Ruby\n\n```ruby\nlist  = %w(a b c)\n\nlist.each { |s| print(s) }\nlist.each do |s| print(s) end\n\n\"a\".upto(\"c\") do |i|\n    puts \"#{i}\"\nend\n```\n\n## \u7e70\u308a\u8fd4\u3057\uff08\u9006\u9806\uff09\n\n### Java8\n\n```java\ndigits.stream().collect(Collectors.toCollection(LinkedList::new)).descendingIterator().forEachRemaining(System.out::println);\n```\n\n### C# \n\n```csharp\n// \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\ndigits.Reverse();\ndigits.ForEach(n => Console.WriteLine(n));\n```\n\n### Scala\n\n```scala\nlist.reverse.foreach(println)\n```\n\n### Groovy\n\n```groovy\n// \u9006\u9806\u306e\u30ea\u30b9\u30c8\u304c\u307b\u3057\u3044\u3060\u3051\u306a\u3089\u3001reverse\u3060\u3051\u3067\u3088\u3044\ndigits.reverseEach { println(it)}\n```\n\n### Ruby\n\n```ruby\nlist.reverse_each { |s| print(s) }\n\n3.downto(1) do |i|\n    puts \"#{i}\"\nend\n```\n## \u7e70\u308a\u8fd4\u3057\uff08index\u4ed8\u304d\uff09\n\n### Java8\n\n```java\n// \u30d1\u30bf\u30fc\u30f31\nIntStream.range(0, digits.size()).forEach(index -> {\n    System.out.println(\"value=\" + digits.get(index));\n    System.out.println(\"index=\" + index);\n});\n// \u30d1\u30bf\u30fc\u30f32\nAtomicInteger index = new AtomicInteger(-1);\ndigits.forEach(value -> {\n    System.out.println(\"value=\" + value);\n    System.out.println(\"index=\" + index.incrementAndGet());\n});\n```\n\n### C# \n\n```csharp\n// \u30d1\u30bf\u30fc\u30f31\ndigits.Select((n, i) => new { n, i }).ToList().ForEach(t =>\n{\n    Console.WriteLine(\"n=\" + t.n);\n    Console.WriteLine(\"i=\" + t.i);\n});\n// \u30d1\u30bf\u30fc\u30f32\ndigits.Select((n, i) => \n{\n    Console.WriteLine(\"n=\" + n);\n    Console.WriteLine(\"i=\" + i);\n    return new { n, i };\n});\n```\n\n### Scala\n\n```scala\nlist.zipWithIndex.foreach { t => println( s\"${t._2}. ${t._1}\" ) } // \u30d1\u30bf\u30fc\u30f31\nlist.zipWithIndex.foreach { case(s:String, i:Int) => println( s\"${i}. ${s}\" ) } // \u30d1\u30bf\u30fc\u30f32\n```\n\n### Groovy\n\n```groovy\ndigits.eachWithIndex { n,index ->\n    println(\"value=${n}\")\n    println(\"index=${index}\")\n}\n```\n\n### Ruby\n\n```ruby\n# index\u306e\u307f\nlist.each_index { |index| \n  puts \"#{list[index]}\" \n}\n\n# index\u4ed8\u304d\nlist.each_with_index {|s, i| \n  puts \"#{i}. #{s}\" \n}\n```\n\n## \u5c04\u5f71\uff08map\uff09\n\n\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u306b\u51e6\u7406\u3092\u9069\u7528\u3057\u3066\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n### Java8\n\n```java\nList<Integer> digits2 = IntStream.rangeClosed(1, 10).boxed().collect(Collectors.toList());\n\n// [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\u3092\u8fd4\u3059\n// \u30d1\u30bf\u30fc\u30f31\nList<Integer> mapped1 = digits2.stream().map(new Function<Integer, Integer>() {\n   @Override\n   public Integer apply(Integer n) {\n       return n * 2;\n   }\n}).collect(Collectors.toList());\n// \u30d1\u30bf\u30fc\u30f32\nList<Integer> mapped12 = digits2.stream().map(n -> {\n   return n * 2;\n}).collect(Collectors.toList());\n// \u30d1\u30bf\u30fc\u30f33\nList<Integer> mapped3 = digits2.stream().map(n -> n * 2).collect(Collectors.toList());\n```\n\n### C# \n\n```csharp\nvar digits2 = Enumerable.Range(1, 10).ToList<int>();\n\n// \u30d1\u30bf\u30fc\u30f3\uff11\nvar mapped1 = digits2.Select(delegate(int n)\n{\n    return n * 2;\n});\n// \u30d1\u30bf\u30fc\u30f3\uff12\nvar mapped2 = digits2.Select(n =>\n{\n    return n * 2;\n});\n// \u30d1\u30bf\u30fc\u30f3\uff13\nvar mapped3 = digits2.Select(n => n * 2);\n// \u30d1\u30bf\u30fc\u30f3\uff14\nvar mapped4 = from n in digits2\n              select n * 2;\n// \u4f8b\u3048\u3070\u533f\u540d\u578b\u306e\u30ea\u30b9\u30c8\u306b\u5165\u308c\u66ff\u3048\u308b\nvar mapped5 = from n in digits2\n              select new {n = n};\n```\n\n### Scala\n\n```scala\nval digits = List(1, 2, 3)\n\n// List(2, 4, 6)\u3092\u8fd4\u3059\ndigits.map((n:Int) => n * 2)\ndigits.map(_ * 2) \ndigits.map { n => n * 2 }\ndigits.map { _ * 2 }\n```\n\n### Groovy\n\n```groovy\ndef digits3 = (1..10)\n\nassert [2,4,6,8,10,12,14,16,18,20]== digits3.collect {n -> n * 2 }\nassert [2,4,6,8,10,12,14,16,18,20]digits3.collect { it * 2 }\nassert [2,4,6,8,10,12,14,16,18,20]digits3*.multiply(2)\n```\n\n### Ruby\n\n```ruby\ndigits =  [1, 2, 3]\n\n# [2, 4, 6]\u3092\u8fd4\u3059,\u305d\u308c\u305e\u308c\u300cdo end\u300d\u3067\u3082\u53ef\u80fd\ndigits.map { |n| n * 2 }\ndigits.collect { |n| n * 2 }\n```\n\n## \u5c04\u5f71\uff08index\u4ed8\u304d\uff09\n\n### Java8\n\n```java\n// \u81ea\u529b\u3067\u3042\u308b\u304cindex\u306f\u4ed8\u3051\u3089\u308c\u308b\u3002\u3053\u3053\u3067\u306fTuple\u3082\u81ea\u4f5c\u3002\nList<Tuple> mapped4 = IntStream.range(0, digits2.size()).mapToObj(index -> new Tuple<>(index, digits2.get(index))).collect(Collectors.toList());\nmapped3.forEach(System.out::println);\n\n\u30fb\u30fb\u30fb\npublic class Tuple<T1, T2> {\n    public final T1 _1;\n    public final T2 _2;\n    public Tuple(T1 arg1, T2 arg2) {\n        this._1 = arg1;\n        this._2 = arg2;\n    }\n    @Override\n    public String toString() {\n        return String.format(\"(%s, %s)\", _1, _2);\n    }\n}\n```\n\n### C# \n\n```csharp\n// index\u3082\u4ed8\u3051\u3089\u308c\u308b\u3057\u3001\u4f8b\u3048\u3070\u30bf\u30d7\u30eb\u578b\u306e\u30ea\u30b9\u30c8\u306b\u5165\u308c\u66ff\u3048\u308b\nvar mapped6 = digits2.Select((n, index) => Tuple.Create(index, n));\n```\n\n### Scala\n\n```scala\n// index\u3082\u4ed8\u3051\u3089\u308c\u308b\u3057\u3001\u4f8b\u3048\u3070\u30bf\u30d7\u30eb\u578b\u306e\u30ea\u30b9\u30c8\u306b\u5165\u308c\u66ff\u3048\u308b\u3002List((0,1), (1,2), (2,3))\ndigits.zipWithIndex.map { case (n, index) => (index, n) }\n```\n\n### Groovy\n\n```groovy\n// index\u3082\u4ed8\u3051\u3089\u308c\u308b\u3057\u3001\u4f8b\u3048\u3070\u30bf\u30d7\u30eb\u578b\u306e\u30ea\u30b9\u30c8\u306b\u5165\u308c\u66ff\u3048\u308b\ndigits3.eachWithIndex { it, index ->\n    println(new Tuple(index, it))\n}\n```\n\n### Ruby\n\n```ruby\n# index\u3082\u4ed8\u3051\u3089\u308c\u308b\u3057\u3001\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002[[0, 1], [1, 2], [2, 3]]\ndigits.map.with_index { |n, index| [index, n] }\n```\n\n## \u691c\u7d22\n\n\u6761\u4ef6\u306b\u5408\u3046\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n### Java8\n\n* allMatch\u306f\u3001\u6761\u4ef6\u306b\u3059\u3079\u3066\u306e\u8981\u7d20\u304cmatch\u3059\u308b\u304b\u3069\u3046\u304b\u3002\n* anyMatch\u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3067\u3082match\u3059\u308b\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\n* noneMatch\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u6761\u4ef6\u306bmatch\u3057\u306a\u304b\u3063\u305f\u3089true\n\n```java\nList<Integer> digits = new ArrayList<>(Arrays.asList(1, 2, 3));\n\n// false\ndigits.stream().allMatch(n -> n % 2 == 0);\n// true\ndigits.stream().anyMatch(n -> n % 2 == 0);\n// true\ndigits.stream().noneMatch(n -> n == 0);\n\n// \u305d\u308c\u305e\u308c\u533f\u540d\u30af\u30e9\u30b9\u3067\u3082\u3067\u304d\u308b\ndigits.stream().allMatch(new Predicate<Integer>() {\n    @Override\n    public boolean test(Integer n) {\n        return n % 2 == 0;\n    }\n});\n```\n\n### C# \n\n* TrueForAll, All\u306f\u3001\u6761\u4ef6\u306b\u3059\u3079\u3066\u306e\u8981\u7d20\u304cmatch\u3059\u308b\u304b\u3069\u3046\u304b\u3002\n* Exists, Any \u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3067\u3082match\u3059\u308b\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\n\n```csharp\nvar digits = new List<int> { 1, 2, 3 };\n\n// false\ndigits.TrueForAll(n => n % 2 == 0);\ndigits.All(n => n % 2 == 0);\n\n// true\ndigits.Exists(n => n % 2 == 0);\ndigits.Any(n => n % 2 == 0);\n```\n\n### Scala\n\n* forall\u306f\u3001\u6761\u4ef6\u306b\u3059\u3079\u3066\u306e\u8981\u7d20\u304cmatch\u3059\u308b\u304b\u3069\u3046\u304b\u3002\n* exists\u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3067\u3082match\u3059\u308b\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\n\n```scala\nval digits = List(1, 2, 3)\n\n// false\ndigits.forall((n:Int) => n % 2 == 0)\ndigits.forall(_ % 2 == 0)\ndigits.forall { n => n % 2 == 0 }\ndigits.forall { _ % 2 == 0 }\n\n// true\ndigits.exists(_ % 2 == 0) \n```\n\n### Groovy\n\n* every\u306f\u3001\u6761\u4ef6\u306b\u3059\u3079\u3066\u306e\u8981\u7d20\u304cmatch\u3059\u308b\u304b\u3069\u3046\u304b\u3002\n* any\u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3067\u3082match\u3059\u308b\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\n\n```groovy\ndef digits = [1, 2, 3]\n\nassert false == digits.every { it % 2 == 0 }\nassert true == digits.any { it % 2 == 0 }\n```\n\n### Ruby\n\n* all?\u306f\u3001\u6761\u4ef6\u306b\u3059\u3079\u3066\u306e\u8981\u7d20\u304cmatch\u3059\u308b\u304b\u3069\u3046\u304b\u3002\n* any?\u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3067\u3082match\u3059\u308b\u8981\u7d20\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3002\n* none?\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u6761\u4ef6\u306bmatch\u3057\u306a\u304b\u3063\u305f\u3089true\n* one?\u306f\u3001\u6761\u4ef6\u306b\u4e00\u3064\u3060\u3051match\u3057\u305f\u3089true\n\n```ruby\ndigits = [1, 2, 3]\n\n# \u305d\u308c\u305e\u308c\u300cdo end\u300d\u3067\u3082\u53ef\u80fd\ndigits.all? { |n| n.integer? }    # true\ndigits.any? { |n| n % 2 == 0 }    # true\ndigits.none? { |n| !n.integer? }  # true\ndigits.one? { |n| n % 2 == 0 }    # true\n```\n\n## \u62bd\u51fa\n\n\u6761\u4ef6\u306b\u5408\u3046\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\n### Java8\n\n```java\nList<Integer> digits2 = IntStream.rangeClosed(1, 10).boxed().collect(Collectors.toList());\n\n// [2,4,6,8,10]\u3092\u8fd4\u3059\nList<Integer> filtered = digits2.stream().filter(n -> n % 2 == 0).collect(Collectors.toList());\n\n// Optional\u578b\u304c\u8fd4\u308b\u3002\u3053\u306e\u5834\u5408\u306fOptional[2]\u3002\nOptional<Integer> first = digits2.stream().filter(n -> n % 2 == 0).findFirst();\n\n// {false=[1, 3, 5, 7, 9], true=[2, 4, 6, 8, 10]}\u304c\u8fd4\u308b\nMap<Boolean, List<Integer>> partition = digits2.stream().collect(Collectors.partitioningBy(n -> n % 2 == 0));\n```\n\n### C# \n\n* Where, FindAll\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u3060\u3051\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n* Find\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u306e\u4e00\u4ef6\u76ee\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```csharp\nvar digits2 = Enumerable.Range(1, 10).ToList<int>();\n\n// [2,4,6,8,10]\u3092\u8fd4\u3059\nvar fillterd = digits2.FindAll(n => n % 2 == 0); // \u30d1\u30bf\u30fc\u30f31\nvar filtered2 = digits2.Where(n => n % 2 == 0); // \u30d1\u30bf\u30fc\u30f32\nvar filtered3 = from n in digits2\u3000// \u30d1\u30bf\u30fc\u30f33\n                where n % 2 == 0\n                select n; \n \n// \u6700\u521d\u306e\u4e00\u4ef6\nvar fillterd4 = digits2.Find(n => n % 2 == 0);\n```\n\n### Scala\n\n* filter\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u3060\u3051\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n* find\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u306e\u4e00\u4ef6\u76ee\u3092\u8fd4\u3057\u307e\u3059\u3002\n* partition\u306f\u3001\u6761\u4ef6\u306b\u5408\u3046\u30ea\u30b9\u30c8\u3068\u5408\u308f\u306a\u3044\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```scala\nval digits2 = List.range(1, 10, 1)\n\n// List(2,4,6,8,10)\u3092\u8fd4\u3059\ndigits2.filter((n:Int) => n % 2 == 0) \ndigits2.filter(_ % 2 == 0) \ndigits2.filter { n => n % 2 == 0 } \ndigits2.filter { _ % 2 == 0 } \n\n// Option\u578b\u304c\u8fd4\u308b\u3002\u3053\u306e\u5834\u5408\u306fSome(2)\u3002\ndigits2.find { _ % 2 == 0 } \n\n// (List(2,4,6,8,10), List(1,3,5,7,9))\u304c\u8fd4\u308b\ndigits2.partition(_ % 2)\n```\n\n### Groovy\n\n```groovy\ndef digits3 = (1..10)\n\nassert [2, 4, 6, 8, 10]== digits3.findAll { it % 2 == 0 }\nassert [2, 4, 6, 8, 10]== digits3.grep { it % 2 == 0 }\n\nassert 2 == digits3.find { it % 2 == 0 }\n\nassert [[2, 4, 6, 8, 10],[1, 3, 5, 7, 9]]== digits3.split { it % 2 == 0}\n```\n\n### Ruby\n\n* find_all,select\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u3060\u3051\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n* find,detect\u306f\u3001\u6761\u4ef6\u306bmatch\u3059\u308b\u8981\u7d20\u306e\u4e00\u4ef6\u76ee\u3092\u8fd4\u3057\u307e\u3059\u3002\n* partition\u306f\u3001\u6761\u4ef6\u306b\u5408\u3046\u30ea\u30b9\u30c8\u3068\u5408\u308f\u306a\u3044\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```ruby\ndigits2 = [1..10]\n\n# [2,4,6,8,10]\u3092\u8fd4\u3059,reject\u306f\u9006\ndigits2.select { |n| n % 2 == 0 } \ndigits2.find_all { |n| n % 2 == 0 } \n\n# 2\u304c\u8fd4\u308b\u3001\u8981\u7d20\u304c\u306a\u3051\u308c\u3070nil\ndigits2.detect { |n| n % 2 == 0 } \ndigits2.find { |n| n % 2 == 0 } \n\n# [2,4,6,8,10], [1,3,5,7,9]\u304c\u8fd4\u308b\neven, odd = digits2.partition { |n| n % 2 == 0 } \n```\n\n## \u4e26\u3073\u66ff\u3048\n\n### Java8\n\n```java\n List<String> list4 = new ArrayList<>(Arrays.asList(\"b\", \"c\", \"a\"));\n\n // \uff15\u30d1\u30bf\u30fc\u30f3\u3002[a, b, c]\n List<String> sorted1 = list4.stream().sorted(new Comparator<String>() {\n     @Override\n     public int compare(String s1, String s2) {\n         return s1.compareTo(s2);\n     }\n }).collect(Collectors.toList());\n List<String> sorted2 = list4.stream().sorted(java.util.Comparator.comparing(s -> s)).collect(Collectors.toList());\n List<String> sorted3 = list4.stream().sorted((s1, s2) -> s1.compareTo(s2)).collect(Collectors.toList());\n List<String> sorted4 = list4.stream().sorted(java.util.Comparator.comparing(s -> s)).collect(Collectors.toList());\n List<String> sorted5 = list4.stream().sorted().collect(Collectors.toList());\n \n// \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\n list4.sort(java.util.Comparator.naturalOrder());\n```\n\n### C# \n\n```csharp\nvar dtos = new[] \n{ \n    new { n = 2, s = \"a\" }, \n    new { n = 1, s = \"b\" }, \n    new { n = 1, s = \"a\" } \n \n};\n\n// \u4e26\u3073\u66ff\u3048\u3001ThenBy\u3092\u4f7f\u3046\u3053\u3068\u3067\u8907\u6570\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u6c7a\u3081\u3089\u308c\u308b\u3002\u964d\u9806\u306e\u5834\u5408\u306f\u3001OrderByDescending, ThenByDescending\nvar sorted = dtos.OrderBy(dto => dto.n).ThenBy(dto => dto.s);\nvar sorted2 = from dto in dtos\n              orderby dto.n, dto.s\n              select dto;\n```\n\n### Scala\n\n```scala\nval list4 = List(\"b\", \"c\", \"a\")\n\n// List(\"a\", \"b\", \"c\")\u304c\u8fd4\u308b\nlist4.sorted\nlist4.sortWith( _ < _ )\n```\n\n### Groovy\n\n```groovy\ndef list4 = [\"b\", \"c\", \"a\"]\n// \u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nassert  [\"a\", \"b\", \"c\"]== list4.sort()\nlist4 = [\"b\", \"c\", \"a\"]\nassert  [\"a\", \"b\", \"c\"]== list4.sort { it ,x  -> it.compareTo(x)}\n```\n\n### Ruby\n\n```ruby\nlist4 = %w(b c a)\n\n# [\"a\", \"b\", \"c\"]\u304c\u8fd4\u308b\nlist4.sort\nlist4.sort{|a, b| a <=> b }\n```\n\n##\u3000\u7573\u307f\u8fbc\u307f\n\n\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u4f7f\u3063\u3066\u8a08\u7b97\u3057\u307e\u3059\u3002\n\n### java8\n\n```java\nList<Integer> digits = new ArrayList<>(Arrays.asList(1, 2, 3));\n\n // 4 - 3 - 2 -1 = -2\nint reduce = digits.stream().reduce(4, (n1, n2) -> n1 - n2);\n```\n\n### C# \n\n```csharp\nvar digits2 = Enumerable.Range(1, 10).ToList<int>();\n\n// \u7573\u307f\u8fbc\u307f\u3001\u7b2c\u4e00\u5f15\u6570(seed)\u306f\u7701\u7565\u53ef\u80fd, seed\u304c\u7121\u3051\u308c\u3070\u3001digits2.Sum();\u3068\u540c\u3058\nvar fold = digits2.Aggregate(10, (sum, n) => sum + n);\n```\n\n### Scala\n\n* foldLeft\u306f\u3001\u5de6\u306e\u8981\u7d20\u304b\u3089\u9806\u306b\u51e6\u7406\u3057\u307e\u3059\u3002\n* foldRight\u306f\u3001\u53f3\u306e\u8981\u7d20\u304b\u3089\u9806\u306b\u51e6\u7406\u3057\u307e\u3059\u3002\n\n```scala\nval digits = List(1, 2, 3)\n\n// 4-1-2-3=-2\ndigits.foldLeft(4)(_ - _) \n(4 /: digits)(_ - _)\n\n// 3-2-1-4=-4 \ndigits.foldRight(4)(_ - _)\n(digits :\\ 4)(_ - _)\n```\n\n### Groovy\n\n```groovy\ndef digits = [1, 2, 3]\n\n// 4 - 3 - 2 - 1 = -2\nassert -2 == digits.inject(4) {total, n -> total - n }\n```\n\n### Ruby\n\n```ruby\ndigits = [1, 2, 3]\n\n// 4-1-2-3=-2\ndigits.inject(4) {|diff, n| diff - n }\ndigits.inject(4, :-)\ndigits.reduce(4, :-)\n```\n\n## \u5408\u6210 (zip/unzip)\n\n\u4e8c\u3064\u306e\u30ea\u30b9\u30c8\u306e\u540c\u3058\u6dfb\u5b57\u540c\u58eb\u3092\u307e\u3068\u3081\u307e\u3059\u3002\n\n### Java8\n\n```java\n// TODO \u81ea\u4f5c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff1f\n```\n\n### C# \n\n```csharp\nvar list = new List<string> { \"a\", \"b\", \"c\" };\nvar digits = new List<int> { 1, 2, 3 };\n\n// List{(\"a\", 1), (\"b\", 2), (\"c\", 3)} \u30bf\u30d7\u30eb\u578b\u304c\u683c\u7d0d\u3055\u308c\u305fList\u306b\u306a\u308b\nvar zipped = list.Zip(digits, (alpha, digit) => Tuple.Create(alpha, digit));\n\n// \u4e8c\u3064\u306e\u30ea\u30b9\u30c8\u306b\u623b\u3059\nlist = zipped.Select(t => t.Item1).ToList();\ndigits = zipped.Select(t => t.Item2).ToList();\n```\n\n### Scala\n\n```scala\nval list  = List(\"a\", \"b\", \"c\")\nval digits = List(1, 2, 3)\n\nval zippedList = list zip digits2 // List((\"a\", 1), (\"b\", 2), (\"c\", 3)) \u30bf\u30d7\u30eb\u578b\u304c\u683c\u7d0d\u3055\u308c\u305fList\u306b\u306a\u308b\n\nval (alphabet, number) = List.unzip(zippedList) // \u4e8c\u3064\u306eList\u306b\u623b\u3059\n```\n\n### Groovy\n\n```groovy\ndef list = [\"a\", \"b\", \"c\"]\ndef digits = [1, 2, 3]\n\nassert [[\"a\", 1], [\"b\", 2], [\"c\", 3]]== [list, digits].transpose()\n\nassert [[\"a\", \"b\", \"c\"], [1, 2, 3]]== [[\"a\", 1], [\"b\", 2], [\"c\", 3]].transpose()\n```\n\n### Ruby\n\n```ruby\nlist  = %w(a b c)\ndigits =  [1, 2, 3]\n\nzippedList = list.zip(digits) # [[\"a\", \"1\"], [\"b\", \"2\"], [\"c\", \"3\"]] \u914d\u5217\u306e\u914d\u5217\u306b\u306a\u308b\n\nlist, digits = zippedList.transpose # \u4e8c\u3064\u306e\u914d\u5217\u306b\u623b\u3059\n```\n\n## \u5e73\u5766\u5316 (flatten)\n\n\u5165\u308c\u5b50\u306b\u306a\u3063\u3066\u3044\u308b\u30ea\u30b9\u30c8\u3092\u4e00\u3064\u306e\u30ea\u30b9\u30c8\u306b\u306a\u308b\u3088\u3046\u306b\u9023\u7d50\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n### Java8\n\n```java\nList<Integer> digits1 = new ArrayList<>(Arrays.asList(1, 2, 3));\nList<Integer> digits2 = new ArrayList<>(Arrays.asList(4, 5, 6));\nList<List<Integer>> nestedList = new ArrayList<>(Arrays.asList(digits1, digits2));\n// [1, 2, 3, 4, 5, 6]\nList<Integer> flatten = nestedList.stream().flatMap(n -> n.stream()).collect(Collectors.toList());\n```\n\n### C# \n\n```csharp\nvar nestedList = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5, 6 } };\nvar flatList = nestedList.SelectMany(i => i); // {1, 2, 3, 4, 5, 6}\n```\n\n### Scala\n\n```scala\nval nestedList = List(List(1,2,3), List(4,5,6))\nList flatten nestedList // List(1,2,3,4,5,6)\n```\n\n### Groovy\n\n```groovy\ndef nestedList = [[1, 2, 3], [4, 5, 6]]\nassert  [1, 2, 3, 4, 5, 6]== nestedList.flatten()\n```\n\n### Ruby\n\n```ruby\nnestedList = [ [1, 2, 3], [4, 5, 6] ]\nnestedList.flatten # [1, 2, 3, 4, 5, 6]\n```\n## \u5c04\u5f71 + \u5e73\u5766\u5316 (flatMap)\n\nmap + flatten\n\n### Java8\n\n```java\nList<Integer> digits1 = new ArrayList<>(Arrays.asList(1, 2, 3));\nList<Integer> digits2 = new ArrayList<>(Arrays.asList(4, 5, 6));\nList<List<Integer>> nestedList = new ArrayList<>(Arrays.asList(digits1, digits2));\n\n// [1, 2, 3, 100, 4, 5, 6, 100]\nList<Integer> flatMap = nestedList.stream().flatMap(list -> {\n    list.add(100);\n    return list.stream();\n}).collect(Collectors.toList());\n```\n\n### C# \n\n```csharp\nvar nestedList = new List<List<int>> { new List<int> { 1, 2, 3 }, new List<int> { 4, 5, 6 } };\n// {1, 2, 3, 100, 4, 5, 6, 100}\nvar flatList = nestedList.SelectMany(l =>\n{\n    l.Add(100);\n    return l;\n});\n```\n\n### Scala\n\n```scala\nval nestedList = List(List(1,2,3), List(4,5,6))\n// List(1, 2, 3, 100, 4, 5, 6, 100)\nnestedList flatMap { list => list ++ Seq(100) }\n```\n\n### Groovy\n\n```groovy\ndef nestedList = [[1, 2, 3], [4, 5, 6]]\nassert [1, 2, 3, 100, 4, 5, 6, 100]== nestedList.collectMany { list -> list + 100 }\n```\n\n### Ruby\n\n```ruby\nnestedList = [ [1, 2, 3], [4, 5, 6] ]\n# [1, 2, 3, 100, 4, 5, 6, 100]\nnestedList.flat_map {|list| list << 100}\n```\n\n# \u30bb\u30c3\u30c8\n\n## \u8ffd\u52a0\u30fb\u53d6\u5f97\u30fb\u524a\u9664\n\n### Java8\n\n\u9806\u5e8f\u6027\u304c\u306a\u3044HashSet\n\n```java\nSet<Integer> set = new HashSet<>(Arrays.asList(1, 2, 3));\n\n// \u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[1, 2, 3, 4]\nset.add(4);\n\n// \u524a\u9664\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[1, 3, 4]\nset.remove(2);\n```\n\u9806\u5e8f\u6027\u304c\u3042\u308bTreeSet\n\n```java\n// \u81ea\u7136\u9806\u5e8f\u3002[1,2,3]\nSet<Integer> treeSet = new TreeSet<>(Arrays.asList(2, 3, 1));\n\n// \u9806\u5e8f\u3092\u5909\u3048\u308b\u3002[3,2,1]\n// \u30d1\u30bf\u30fc\u30f31\nSet<Integer> treeSet2 = new TreeSet<>((s1, s2) -> s2.compareTo(s1));\ntreeSet2.addAll(Arrays.asList(2, 3, 1));\n// \u30d1\u30bf\u30fc\u30f32\nSet<Integer> treeSet3 = new TreeSet<>(java.util.Comparator.reverseOrder());\ntreeSet3.addAll(Arrays.asList(2, 3, 1));\n```\n\n### C# \n\n\u633f\u5165\u9806\u304c\u4fdd\u8a3c\u3055\u308c\u308bHashSet\n\n```csharp\nvar set = new HashSet<int> { 1, 2, 3 };\n \n// \u8ffd\u52a0\u3001Set[1, 2, 3, 4]\u3092\u8fd4\u3059\nset.Add(4);\n \n//\u3000\u524a\u9664\u3001Set[1, 3, 4]\nset.Remove(2);\n```\n\n\u9806\u5e8f\u6027\u304c\u3042\u308bSortedSet\n\n```csharp\n// \u81ea\u7136\u9806\u5e8f\u3001SortedSet[1, 2, 3]\nvar sortedSet = new SortedSet<int> { 2, 3, 1 };\n\n// \u9806\u5e8f\u5909\u66f4\u3001SortedSet[3, 2, 1]\nvar sortedSet2 = new SortedSet<int>(Comparer<int>.Create((a, b) => b.CompareTo(a))) { 2, 3, 1 };\nvar sortedSet3 = new SortedSet<int>(new FuncComparer<int>((a, b) => b.CompareTo(a))) { 2, 3, 1 }\nclass FuncComparer<T> : IComparer<T>\n{\n    private readonly Comparison<T> comparison;\n    public FuncComparer(Comparison<T> comparison)\n    {\n        this.comparison = comparison;\n    }\n    public int Compare(T x, T y)\n    {\n        return comparison(x, y);\n    }\n}\n```\n\n### Scala\n\n\u9806\u5e8f\u6027\u304c\u306a\u3044HashSet\n\n```scala\n// \u30c7\u30d5\u30a9\u30eb\u30c8\u306fimmutable\n\nval set = Set(1, 2, 3)\n\n// \u8ffd\u52a0\u3001Set(1, 2, 3, 4)\u3092\u8fd4\u3059\nset + 4\n\n//\u3000\u524a\u9664\u3001Set(1, 3, )\nset - 2\n\n// mutable\u306b\u3057\u305f\u3051\u308c\u3070\u3001import\u3092\u3059\u308b\nimport scala.collection.mutable.Set\nval mutableSet = Set(1, 2, 3)\n\n// \u8ffd\u52a0\u3001\u524a\u9664\nmutableSet += 4 // Set(1, 2, 3, 4) \nmutableSet -= 2 // Set(1, 3, 4)\n```\n\n\u9806\u5e8f\u6027\u304c\u3042\u308bTreeSet\n\n```scala\nimport scala.collection.immutable.TreeSet\n\n// \u81ea\u7136\u9806\u5e8f\u3001TreeSet(1, 2, 3)\nval treeSet = TreeSet(2, 3, 1)\n\n// \u9806\u5e8f\u5909\u66f4\u3001TreeSet(3, 2, 1)\nval sortRule = Ordering.fromLessThan[Int](_ > _)\nval treeSet2 = TreeSet.empty(sortRule)\ntreeSet2 + (2, 3, 1)\n```\n\n### Groovy\n\n\u9806\u5e8f\u6027\u304c\u306a\u3044HashSet\n\n```groovy\ndef set = new HashSet([1, 2, 3])\ndef set2 = new HashSet(1..3)\ndef set3 = [1, 2, 3] as Set\ndef set4 = (1..3) as Set\n\n// \u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[1, 2, 3, 4]\nset.add(4)\n\n// \u524a\u9664\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[1, 3, 4]\nset.remove(2)\n```\n\n\u9806\u5e8f\u6027\u304c\u3042\u308bTreeSet\n\n```groovy\n//\u3000\u81ea\u7136\u9806\u5e8f\nassert [2, 3, 1] as Set == new TreeSet([2, 3, 1])\n\n// \u9806\u5e8f\u3092\u5909\u3048\u308b\ndef treeSet = new TreeSet({it ,x ->\n    x.compareTo(it)\n} as Comparator)\ntreeSet.addAll([2, 3, 1])\n```\n\n### Ruby\n\n\u9806\u5e8f\u6027\u304c\u306a\u3044set\n\n```ruby\nset = Set[1, 2, 3]\nset = Set.new(1, 2, 3)\nset = Set.new(1..3)\nset = (1..3).to_set\n\n# \u5f8c\u308d\u306b\u8ffd\u52a0\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3001#<Set: {1, 2, 3, 4, 5}>\nset << 4\nset.add(5) \nset.add?(5) # \u8ffd\u52a0\u3067\u304d\u306a\u304b\u3063\u305f\u3089\u3001nil\u3092\u8fd4\u3059\n\n#\u3000\u524a\u9664\nset.delete(2)  #<Set: {1, 3, 4, 5}>\nset.delete?(2) # nil\n\n# \u307e\u3068\u3081\u3066\u8ffd\u52a0\u3001#<Set: {1, 3, 4, 5, 6, 7}>\nset.merge(Set[5, 6, 7])\n\n# \u307e\u3068\u3081\u3066\u524a\u9664\u3001#<Set: {1, 3}>\nset.subtract(Set.new(4..7))\n\n# \u30d6\u30ed\u30c3\u30af\u306e\u7d50\u679c\u304ctrue\u306e\u8981\u7d20\u3092\u524a\u9664\u3001#<Set: {1}>\nset.reject! { |s| s==3}\nset.reject! { |s| s==3} # nil\n```\n\n\u9806\u5e8f\u6027\u304c\u3042\u308bSortedSet\n\n```ruby\n# \u81ea\u7136\u9806\u5e8f\u3001#<SortedSet: {1, 2, 3}>\nSortedSet.new([2, 3, 1])\n```\n\n## \u96c6\u5408\n\n### Java8\n\n```java\nSet<Integer> set1 = new HashSet<>(Arrays.asList(1, 2, 3));\nSet<Integer> set2 = new HashSet<>(Arrays.asList(2, 3, 4));\n\n// \u7a4d\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u5171\u901a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[2, 3]\nset1.retainAll(set2);\n\nset1 = new HashSet<>(Arrays.asList(1, 2, 3));\n// \u548c\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002[1, 2, 3, 4]\nset1.addAll(set2);\n\nset1 = new HashSet<>(Arrays.asList(1, 2, 3));\n// \u5dee\u96c6\u5408\u3002\u5de6\u8fba\u304b\u3089\u53f3\u8fba\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3001[1]\nList<Integer> diff = new ArrayList<Integer>();\ndiff.addAll(set1);\ndiff.removeAll(set2);\n```\n\n### C# \n\n```csharp\n// \u7a4d\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u5171\u901a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001{2, 3}\nvar interset = new HashSet<int> { 1, 2, 3 }.Intersect(new HashSet<int> { 2, 3, 4 });\n\n// \u548c\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001{1, 2, 3, 4}\nvar union = new HashSet<int> { 1, 2, 3 }.Union(new HashSet<int> { 2, 3, 4 });\n\n// \u5dee\u96c6\u5408\u3002\u5de6\u8fba\u304b\u3089\u53f3\u8fba\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3001{1}\nvar except = new HashSet<int> { 1, 2, 3 }.Except(new HashSet<int> { 2, 3, 4 });\n\n// \u5bfe\u79f0\u5dee\u3002\u7247\u65b9\u306b\u3060\u3051\u3057\u304b\u306a\u3044\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002{4, 1}\nvar digits3 = new HashSet<int> { 1, 2, 3 };\ndigits3.SymmetricExceptWith(new HashSet<int> { 2, 3, 4 });\n```\n\n### Scala\n\n```scala\n// \u7a4d\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u5171\u901a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001Set(2, 3)\nSet(1, 2, 3) & Set(2, 3, 4) \nSet(1, 2, 3) intersect Set(2, 3, 4)\n\n// \u548c\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001Set(1, 2, 3, 4)\nSet(1, 2, 3) | Set(2, 3, 4) \nSet(1, 2, 3) union Set(2, 3, 4)\n\n// \u5dee\u96c6\u5408\u3002\u5de6\u8fba\u304b\u3089\u53f3\u8fba\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3001Set(1)\nSet(1, 2, 3) &~ Set(2, 3, 4) \nSet(1, 2, 3) diff Set(2, 3, 4)\n\n// \u5bfe\u79f0\u5dee\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u81ea\u5206\u3067\u3084\u308b\u3001Set(1, 4)\nval s1 = Set(1, 2, 3)\nval s2 = Set(2, 3, 4)\n(s1 diff s2) union (s2 diff s1)\n```\n\n### Groovy\n\n```groovy\ndef set1 = [1, 2, 3] as Set\ndef set2 = [2, 3, 4] as Set\n\n// \u7a4d\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u5171\u901a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nassert [2, 3] as Set== set1.intersect(set2)\n\nset1 = new HashSet<>(Arrays.asList(1, 2, 3))\n// \u548c\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002\nassert [1, 2, 3, 4] as Set == set1.plus(set2)\n\nset1 = new HashSet<>(Arrays.asList(1, 2, 3))\n// \u5dee\u96c6\u5408\u3002\u5de6\u8fba\u304b\u3089\u53f3\u8fba\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3001[1]\nassert [1] as Set == set1.minus(set2)\n```\n\n### Ruby\n\n```ruby\n# \u7a4d\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u5171\u901a\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001#<Set: {2, 3}>\nSet[1, 2, 3] & Set[2, 3, 4]\nSet[1, 2, 3].intersection(Set[2, 3, 4])\n\n# \u548c\u96c6\u5408\u3002\u4e8c\u3064\u306e\u96c6\u5408\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3001#<Set: {1, 2, 3, 4}>\nSet[1, 2, 3] | Set[2, 3, 4] \nSet[1, 2, 3].union(Set[2, 3, 4])\n\n# \u5dee\u96c6\u5408\u3002\u5de6\u8fba\u304b\u3089\u53f3\u8fba\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3001#<Set: {1}>\nSet[1, 2, 3] - Set[2, 3, 4]\nSet[1, 2, 3].difference(Set[2, 3, 4])\n\n# \u5bfe\u79f0\u5dee\u3002\u7247\u65b9\u306b\u3060\u3051\u3057\u304b\u306a\u3044\u8981\u7d20\u3092\u62bd\u51fa\u3057\u307e\u3059\u3002#<Set: {4, 1}>\nSet[1, 2, 3] ^ Set[2, 3, 4]\n\n# \u6761\u4ef6\u304c\u540c\u3058\u96c6\u5408\u3067\u307e\u3068\u3081\u308b\u3001#<Set: {#<Set: {1, 3}>, #<Set: {2}>}>\nSet[1, 2, 3].divide { |s| s % 2 == 0 }\n# divide\u3068\u540c\u3058\u3060\u304c\u623b\u308a\u5024\u304chash {false=>#<Set: {1, 3}>, true=>#<Set: {2}>}\nSet[1, 2, 3].classify { |s| s % 2 == 0 }\n```\n\n# \u30de\u30c3\u30d7\n\n## \u8ffd\u52a0\u30fb\u53d6\u5f97\u30fb\u524a\u9664\n\n### Java8\n\n```java\nMap<String, Integer> map = new HashMap<String, Integer>() {\n    {\n        put(\"a\", 1);\n        put(\"b\", 2);\n        put(\"c\", 3);\n    }\n};\n\n// \u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nmap.put(\"d\", 4);\n\n// \u5024\u304c\u306a\u3044\u5834\u5408\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8fd4\u3059\nmap.getOrDefault(\"e\", 5); // 5\n\n// \u524a\u9664\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002{a=1, b=2, d=4}\nmap.remove(\"c\");\n```\n\n### C# \n\n```csharp\nvar map = new Dictionary<string, int>() { { \"a\", 1 }, { \"b\", 2 }, { \"c\", 3 }, };\n\n// \u8ffd\u52a0\u3002\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nmap.Add(\"d\", 4);\nmap[\"e\"] = 5;\n\n// \u53d6\u5f97\u3001\u5024\u304c\u306a\u3044\u5834\u5408\u306fKeyNotFoundException\nvar value = map[\"a\"];\t\n// \u5024\u304c\u306a\u3044\u5834\u5408\u306f\u623b\u308a\u5024\u304cfalse\nif (map.TryGetValue(\"b\", out value))\n{\n    Console.WriteLine(value);\n}\n\n// \u524a\u9664\nmap.Remove(\"c\");\n\n// SortedSet\u306e\u3088\u3046\u306bkey\u3067\u30bd\u30fc\u30c8\u3055\u308c\u308b \nnew SortedDictionary<string, int> { { \"a\", 1 }, { \"b\", 2 } };\n```\n\n### Scala\n\nimmutable\u306e\u5834\u5408\n\n```scala\n// map,map2,map3\u3068\u3082\u306b\u540c\u3058\nval map = Map(\"a\" -> 1, \"b\" -> 2, \"c\" -> 3) \nval map2 = Map( (\"a\", 1), (\"b\", 2), (\"c\", 3) ) \n\n// var\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\nvar map3 = Map.empty[String, Int]\n// \u8a2d\u5b9a\nmap3 += \"a\" -> 1\nmap3 += \"b\" -> 2\nmap3 += \"c\" -> 3\n\n// \u53d6\u5f97 \uff08\u6307\u5b9a\u306e\u8981\u7d20\u304c\u7121\u3051\u308c\u3070java.util.NoSuchElementException\uff09\nmap.apply(\"a\") // 1\nmap(\"a\") // 1\n// map(\"z\") \n\n// \u53d6\u5f97\uff08Option\u578b\u304c\u8fd4\u308b\uff09\nmap.get(\"a\") // Some(1)\nmap.get(\"z\") // None\n\n// \u53d6\u5f97\uff08\u6307\u5b9a\u306e\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff09\nmap.getOrElse(\"z\", 0) // 0\n\n// \u4ed6\u306emap\u3068\u7d50\u5408\u3059\u308b\u3001Map(e -> 5, b -> 2, d -> 4, a -> 1, c -> 3)\nval newMap = map ++ Map(\"d\" -> 4, \"e\" -> 5) \n```\n\nmutable\u306e\u5834\u5408\n\n```scala\n// immutable\u3068\u540c\u69d8 + \u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\nimport scala.collection.mutable.Map\n\n// val\u3067\u826f\u3044\nval immutableMap = Map.empty[String, Int]\n// \u8ffd\u52a0\nimmutableMap += \"a\" -> 1\nimmutableMap.update(\"b\", 2)\nimmutableMap(\"c\") = 3\n\n// \u5909\u66f4\nimmutableMap.update(\"b\", 20)\nimmutableMap(\"c\") = 30\nprint(immutableMap) // Map(b -> 20, a -> 1, c -> 30)\n\n// \u53d6\u5f97\uff08\u6307\u5b9a\u306e\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306f\u8ffd\u52a0\u3057\u3066\u8fd4\u3059\uff09\nimmutableMap.getOrElseUpdate(\"z\",0)\n\n// \u4ed6\u306emap\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\nimmutableMap ++= Map(\"d\" -> 4, \"e\" -> 5)\n```\n\n### Groovy\n\n```groovy\ndef map = [ \"a\" : 1, \"b\" : 2, \"c\" : 3 ]\n\n// \u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nmap.put(\"d\", 4)\nmap[\"e\"] = 5\n\n// \u5024\u304c\u306a\u3044\u5834\u5408\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u8fd4\u3059\nmap.withDefault{6} // 6\n\n// \u524a\u9664\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\u3002{a=1, b=2, d=4, e=5}\nmap.remove(\"c\")\n```\n\n### Ruby\n\n```ruby\nmap = {a: 1, b: 2, c: 3} \nmap2 = {:a => 1, :b => 2, :c => 3} \nmap3 = {\"a\" => 1, \"b\" => 2, \"c\" => 3} \n\n# \u8ffd\u52a0\u3001\u7834\u58ca\u7684\u30e1\u30bd\u30c3\u30c9\nmap2[:d] = 4\nmap3[\"d\"] = 4\n\n# \u53d6\u5f97 \nmap[:a]   # 1\nmap3[\"a\"] # 1\n```\n\n## \u9ad8\u968e\u30e1\u30bd\u30c3\u30c9\u3067Key,Value\u3092\u6271\u3046\n\n\u30ea\u30b9\u30c8\u3067\u8a18\u8ff0\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u306f\u307b\u307c\u4f7f\u3048\u308b\u304c\u3001Key,Value\u5f62\u5f0f\u306a\u306e\u3067\u5c11\u3057\u66f8\u304d\u65b9\u304c\u9055\u3044\u307e\u3059\u3002\n\n### Java8\n\n```java\nMap<String, Integer> map = new HashMap<String, Integer>() {\n    {\n        put(\"a\", 1);\n        put(\"b\", 2);\n        put(\"c\", 3);\n    }\n};\n\n// \u30d1\u30bf\u30fc\u30f31\nmap.forEach(new BiConsumer<String, Integer>() {\n    @Override\n    public void accept(String key, Integer value) {\n        System.out.println(String.format(\"key=%s\", key));\n        System.out.println(String.format(\"value=%s\", value));\n    }\n})\n// \u30d1\u30bf\u30fc\u30f32;\nmap.forEach((key, value) -> {\n    System.out.println(String.format(\"key=%s\", key));\n    System.out.println(String.format(\"value=%s\", value));\n});\n```\n\n### C# \n\n```csharp\nvar map = new Dictionary<string, int>() { { \"a\", 1 }, { \"b\", 2 }, { \"c\", 3 }, };\n\nmap.ToList().ForEach(pair => {\n    Console.WriteLine(\"key={0}\", pair.Key);\n    Console.WriteLine(\"value={0}\", pair.Value);\n});\nvar tupple = from m in map.ToList()\n                       select new { key = m.Key, value = m.Value };\n```\n\n### Scala\n\n```scala\nval map = Map(\"a\" -> 1, \"b\" -> 2, \"c\" -> 3) \n\n// _1\u306bkey, _2\u306bvalue\u304c\u5165\u308b\nmap.foreach { \n    item => \n        println(\"key=\" + item._1)\n        println(\"value=\" + item._2) \n}\n\n// case\u3092\u5229\u7528\u3057\u3066\u5909\u6570\u540d\u3092\u4ed8\u3051\u308b\nmap.foreach { \n    case (key, value) => \n        println(\"key=\" + key)\n        println(\"value=\" + value)\n}\n\n// map\u7279\u6709\u306e\u30e1\u30bd\u30c3\u30c9\n\n// key\u3060\u3051\u3092\u5229\u7528\u3059\u308b\u3001Map(a -> 1)\nmap.filterKeys(_ == \"a\")\n\n// value\u3060\u3051\u3092\u5229\u7528\u3059\u308b\u3001Map(b -> 4, a -> 2, c -> 6)\nmap.mapValues(_ * 2)\n```\n\n### Groovy\n\n```groovy\ndef map = [ \"a\" : 1, \"b\" : 2, \"c\" : 3 ]\n\nmap.forEach{key, value ->\n    println(\"key=${key}\")\n    println(\"value=${value}\")\n}\n```\n\n### Ruby\n\n```ruby\nmap = {a: 1, b: 2, c: 3} \n\n# \u4ed6\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3082\u540c\u3058\u3088\u3046\u306bkey,value\u304c\u5229\u7528\u3067\u304d\u308b\nmap.each { |k, v| \n    puts \"key=#{k}\"\n    puts \"value=#{v}\"\n}\n\n# map\u7279\u6709\u306e\u30e1\u30bd\u30c3\u30c9\n\n# key\u3060\u3051\u3092\u5229\u7528\u3059\u308b\nmap.each_key { |k|  puts \"key=#{k}\"}\n\n# value\u3060\u3051\u3092\u5229\u7528\u3059\u308b\nmap.each_value { |v|  puts \"value=#{v}\"}\n```\n", "tags": ["Groovy", "Ruby", "C#", "Scala", "Java"]}