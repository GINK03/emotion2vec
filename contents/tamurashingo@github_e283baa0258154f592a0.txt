{"tags": ["CommonLisp", "common-lisp"], "context": " More than 1 year has passed since last update.\u4eca\u56de\u3082\u7d50\u8ad6\u304b\u3089\u3002 \u3053\u306e\u4fee\u6b63\u3067ProxyAuthentication\u306b\u5bfe\u5fdc\u3057\u305fQuicklisp\u74b0\u5883\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002\nhttps://github.com/tamurashingo/quicklisp-client/tree/ProxyAuth\n\u4fee\u6b63\u6e08\u307f\u30d5\u30a1\u30a4\u30eb\u306fgithub\u306b\u3042\u3052\u3066\u3042\u308a\u307e\u3059\u3002\n\u524d\u56de\u307e\u3067\u3067\u3001\u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306equicklisp\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u521d\u671f\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u305f\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\u3053\u3053\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3057\u3066\u3001ProxyAuthenticate\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u3044\u304d\u307e\u3059\u3002\n\u4fee\u6b63\u306f\u4ee5\u4e0b\u306e\uff13\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\n$HOME/quicklisp/quicklisp/http.lisp\n$HOME/quicklisp/quicklisp/package.lisp\n$HOME/quicklisp/quicklisp/setup.lisp\n\nhttp.lisp\u306fProxy-Authorization\u30d8\u30c3\u30c0\u306e\u4ed8\u4e0e\u306b\u5fc5\u8981\u306a\u95a2\u6570\u306e\u8ffd\u52a0\u3002\npackage.lisp\u304a\u3088\u3073setup.lisp\u306f*proxy-url*\u3068\u540c\u69d8\u306e\u8a18\u8ff0\u3092\u8ffd\u52a0\u3067\u3059\u3002\n\nhttp.lisp\n;; \u3053\u3053\u304b\u3089\u8ffd\u52a0\n(defvar *BASE64TBL* \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\")\n\n(defun to-bit (num)\n  \"convert 1 octet to binary(0/1) list\"\n  (loop for x from 7 downto 0 collect (ldb (byte 1 x) num)))\n\n(defun string-to-bit (str)\n  \"convert string to binary(0/1) list\"\n  (map 'list #'to-bit (map 'list #'char-code str)))\n\n(defun flatten (x)\n  \"flatten list\"\n  (labels ((rec (x acc)\n             (cond ((null x) acc)\n                   ((atom x) (cons x acc))\n                   (t (rec (car x) (rec (cdr x) acc))))))\n    (rec x nil)))\n\n(defun take-list (list num)\n  \"return taken from list(first arguments) passed as the num(second argument) and rest of the list\"\n  (labels ((take-n (list num acc)\n             (if (or (<= num 0)\n                     (null list))\n                 (values (nreverse acc) list)\n                 (take-n (cdr list) (- num 1) (cons (car list) acc)))))\n    (take-n list num '())))\n\n(defun split (list num)\n  \"split list. each list has num(second arguments) items.\"\n  (labels ((split (list acc)\n             (multiple-value-bind (six rest)\n                 (take-list list num)\n               (if (null rest)\n                   (nreverse (cons six acc))\n                   (split rest (cons six acc))))))\n    (split list '())))\n\n(defun rpad (list padsize &key (pad 0))\n  \"if each list's length less than padsize(second arguments), padding pad(default 0) on right side.\"\n  (labels ((right-padding (list padsize acc)\n             (if (null list)\n                 (nreverse acc)\n                 (let ((item (car list)))\n                   (if (< (length item) padsize)\n                       (right-padding (cdr list) padsize (cons\n                                                           (append\n                                                             item\n                                                             (make-list\n                                                               (- padsize (length item))\n                                                               :initial-element pad))\n                                                           acc))\n                       (right-padding (cdr list) padsize (cons item acc)))))))\n    (right-padding list padsize '())))\n\n(defun bit-to-num (list)\n  \"convert binary(0/1) list to number\"\n  (let ((ms (length list)))\n    (loop for x in list\n          for y downfrom (1- ms)\n          sum (ash x y))))\n\n\n(defun base64-enc (str)\n  \"create base64 encoded string from argument\"\n  (format nil \"~{~{~A~}~}\"\n    (rpad\n      (split\n        (map 'list #'(lambda (x)\n                       (aref *BASE64TBL* x))\n              (map 'list #'bit-to-num\n                   (rpad\n                     (split\n                       (flatten\n                         (string-to-bit str))\n                       6)\n                     6)))\n        4)\n    4 :pad #\\=)))\n\n(defun make-basic-authentication (user password)\n  \"create basic authentication string\"\n  (base64-enc (format nil \"~A:~A\" user password)))\n\n;; \u3053\u3053\u307e\u3067\u8ffd\u52a0\n\n(defun make-request-buffer (host port path &key (method \"GET\"))\n  \"Return an octet vector suitable for sending as an HTTP 1.1 request.\"\n  (setf method (string method))\n  (when *proxy-url*\n    (setf path (full-proxy-path host port path)))\n  (let ((sink (make-instance 'octet-sink)))\n    (flet ((add-line (&rest strings)\n             (apply #'add-strings sink strings)\n             (add-newline sink)))\n      (add-line method \" \" path \" HTTP/1.1\")\n      (add-line \"Host: \" host (if (= port 80) \"\"\n                                  (format nil \":~D\" port)))\n      ;; \u3053\u306e2\u884c\u3092\u8ffd\u52a0\n      (when (and *proxy-url* *proxy-user* *proxy-pass*)\n        (add-line \"Proxy-Authorization: Basic \" (make-basic-authentication *proxy-user* *proxy-pass*)))\n      (add-line \"Connection: close\")\n      (add-line \"User-Agent: \" (user-agent-string))\n      (add-newline sink)\n      (sink-buffer sink))))\n\n\n\npackage.lisp\n(defpackage #:ql-http\n  (:documentation\n   \"A simple HTTP client.\")\n  (:use #:cl #:ql-network #:ql-progress #:ql-config)\n  (:export #:*proxy-url*\n           #:*proxy-user*  ; \u8ffd\u52a0\n           #:*proxy-pass*  ; \u8ffd\u52a0\n           #:fetch\n           #:hostname\n           #:port\n           #:path\n           #:url\n           #:*maximum-redirects*\n           #:*default-url-defaults*)\n  (:export #:fetch-error\n           #:unexpected-http-status\n           #:unexpected-http-status-code\n           #:unexpected-http-status-url\n           #:too-many-redirects\n           #:too-many-redirects-url\n           #:too-many-redirects-count))\n\n(defpackage #:quicklisp-client\n  (:documentation\n   \"The Quicklisp client package, intended for end-user Quicklisp\n   commands and configuration parameters.\")\n  (:nicknames #:quicklisp #:ql)\n  (:use #:cl\n        #:ql-util\n        #:ql-impl-util\n        #:ql-dist\n        #:ql-http\n        #:ql-setup\n        #:ql-config\n        #:ql-minitar\n        #:ql-gunzipper)\n  (:shadow #:uninstall)\n  (:export #:quickload\n           #:*quickload-prompt*\n           #:*quickload-verbose*\n           #:*quickload-explain*\n           #:system-not-found\n           #:system-not-found-name\n           #:uninstall\n           #:uninstall-dist\n           #:qmerge\n           #:*quicklisp-home*\n           #:*initial-dist-url*\n           #:*proxy-url*\n           #:*proxy-user*  ; \u8ffd\u52a0\n           #:*proxy-pass*  ; \u8ffd\u52a0\n           #:config-value\n           #:setup\n           #:provided-systems\n           #:system-apropos\n           #:system-list\n           #:update-client\n           #:update-dist\n           #:update-all-dists\n           #:add-to-init-file\n           #:use-only-quicklisp-systems\n           #:write-asdf-manifest-file\n           #:where-is-system\n           #:help\n           #:register-local-projects\n           #:local-projects-searcher\n           #:*local-project-directories*\n           #:list-local-projects\n           #:list-local-systems\n           #:who-depends-on))\n\n\n\nsetup.lisp\n(defun maybe-initial-setup ()\n  ;; Is this running under the quicklisp bootstrap?\n  (let ((bootstrap-package (find-package 'quicklisp-quickstart)))\n    (when bootstrap-package\n      (let* ((proxy (find-symbol (string '#:*proxy-url*) bootstrap-package))\n             (proxy-value (and proxy (symbol-value proxy)))\n\n             ;; proxy-user\u306e\u53d6\u5f97\n             (puser (find-symbol (string '#:*proxy-user*) bootstrap-package))\n             (puser-value (and puser (symbol-value puser)))\n             ;; proxy-pass\u306e\u53d6\u5f97\n             (ppass (find-symbol (string '#:*proxy-pass*) bootstrap-package))\n             (ppass-value (and ppass (symbol-value ppass))))\n        (when (and proxy-value (not *proxy-url*))\n          (setf *proxy-url* proxy-value)\n          (setf (config-value \"proxy-url\") proxy-value))\n\n        ;; proxy-user\u306e\u9000\u907f\n        (when (and puser-value (not *proxy-user*))\n          (setf *proxy-user* puser-value)\n          (setf (config-value \"proxy-user\") puser-value))\n        ;; proxy-pass\u306e\u9000\u907f\n        (when (and ppass-value (not *proxy-pass*))\n          (setf *proxy-pass* ppass-value)\n          (setf (config-value \"proxy-pass\") ppass-value)))))\n  (unless (ignore-errors (truename (qmerge \"dists/\")))\n    (let ((target (qmerge \"dists/quicklisp/distinfo.txt\")))\n      (ensure-directories-exist target)\n      (fetch *initial-dist-url* target)\n      (enable (find-dist \"quicklisp\")))))\n\n\n\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u7d9a\u304d\n\u3053\u306e\u72b6\u614b\u3067 (ql:system-apropos \"ppcre\") \u3068\u304b\u3084\u3063\u3066\u3082\u4f55\u3082\u8fd4\u3063\u3066\u304d\u307e\u305b\u3093\u3002\u307e\u3060\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306e\u9014\u4e2d\u3060\u304b\u3089\u3067\u3059\u3002\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u624b\u52d5\u3067\u7d9a\u3051\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u914d\u7f6e\n$HOME/quicklisp/config\u4e0b\u306bproxy-url.txt\u304c\u3067\u304d\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n\u3042\u308f\u305b\u3066\u3001proxy-user.txt\u3068proxy-pass.txt\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u4e2d\u8eab\u306f\u305d\u308c\u305e\u308cProxy\u30b5\u30fc\u30d0\u306e\u30e6\u30fc\u30b6\u540d\u3068Proxy\u30b5\u30fc\u30d0\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\u78ba\u8a8d\u3057\u307e\u3059\u3002\nCL-USER> (load \"/home/shingo/quicklisp/setup.lisp\")\n#P\"/home/shingo/quicklisp/setup.lisp\"\nCL-USER> (in-package :quicklisp)\n#<Package \"QUICKLISP-CLIENT\">\nQL> (config-value \"proxy-user\")\n\"admin\"\nQL> (config-value \"proxy-pass\")\n\"password\"\n\n\u5165\u529b\u3057\u305f\u5185\u5bb9\u304c\u8fd4\u3063\u3066\u304f\u308c\u3070\u5927\u4e08\u592b\u3067\u3059\u3002\n\n\u95a2\u6570\u306e\u4e0a\u66f8\u304d\nLisp\u304c\u8a8d\u8b58\u3057\u3066\u3044\u308bmake-request-buffer\u306fProxy-Authorization\u30d8\u30c3\u30c0\u3092\u4f5c\u6210\u3057\u306a\u3044\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\u3001\n\u5fc5\u8981\u306a\u5024\u3084\u95a2\u6570\u3092\u4e0a\u66f8\u304d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nQL> (in-package #:ql-http)\n\n#<Package \"QL-HTTP\">\nQL-HTTP> (setq *proxy-user* (config-value \"proxy-user\"))\n\"admin\"\nQL-HTTP> (setq *proxy-pass* (config-value \"proxy-pass\"))\n\"password\"\nQL-HTTP> (defvar *BASE64TBL* \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\")\n...\n;; \u4ee5\u4e0b\u3001\u4eca\u56de\u8ffd\u52a0\u3001\u5909\u66f4\u3057\u305f\u95a2\u6570\u3092\u8cbc\u308a\u4ed8\u3051\u308b\u3002\n\n\ndistinfo\u306e\u53d6\u5f97\n\u524d\u56de\u306fdistinfo.txt\u306e\u53d6\u5f97\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u305d\u3053\u3092\u624b\u52d5\u3067\u3084\u308a\u76f4\u3057\u307e\u3059\u3002\nQL-HTTP> (in-package :quicklisp)\n#<Package \"QUICKLISP-CLIENT\">\nQL> (let ((target (qmerge \"dists/quicklisp/distinfo.txt\")))\n      (ensure-directories-exist target)\n      (fetch *initial-dist-url* target)\n      (enable (find-dist \"quicklisp\")))\n; Fetching #<URL \"http://beta.quicklisp.org/dist/quicklisp.txt\">\n; 0.40KB\n==================================================\n408 bytes in 0.00 seconds (199.22KB/sec)\nT\n\n\ninitfile\u306e\u751f\u6210\nCL-USER> (ql:add-to-init-file)\n\n\u3053\u308c\u3067\u5b8c\u4e86\u3067\u3059\u3002\n\n\u78ba\u8a8d\nCL-PPCRE\u3092\u843d\u3068\u3057\u3066\u307f\u307e\u3059\u3002\nCL> (in-package :cl-user)\n#<Package \"COMMON-LISP-USER\">\nCL-USER> (ql:system-apropos \"cl-ppcre\")\n#<SYSTEM arnesi+.cl-ppcre-extras / arnesi+-20120909-darcs / quicklisp 2013-07-22>\n#<SYSTEM arnesi.cl-ppcre-extras / arnesi-20101006-darcs / quicklisp 2013-07-22>\n#<SYSTEM cl-ppcre / cl-ppcre-2.0.4 / quicklisp 2013-07-22>\n#<SYSTEM cl-ppcre-template / cl-unification-20130128-cvs / quicklisp 2013-07-22>\n#<SYSTEM cl-ppcre-test / cl-ppcre-2.0.4 / quicklisp 2013-07-22>\n#<SYSTEM cl-ppcre-unicode / cl-ppcre-2.0.4 / quicklisp 2013-07-22>\n#<SYSTEM parser-combinators-cl-ppcre / cl-parser-combinators-20121125-git / quicklisp 2013-07-22>\n; No value\nCL-USER> (ql:quickload :cl-ppcre)\n; Fetching #<URL \"http://beta.quicklisp.org/dist/quicklisp/2013-07-22/systems.txt\">\n; 150.36KB\n==================================================\n153,969 bytes in 1.33 seconds (113.05KB/sec)\n; Fetching #<URL \"http://beta.quicklisp.org/dist/quicklisp/2013-07-22/releases.txt\">\n; 223.71KB\n==================================================\n229,074 bytes in 1.45 seconds (154.28KB/sec)\nTo load \"cl-ppcre\":\n  Install 1 Quicklisp release:\n    cl-ppcre\n; Fetching #<URL \"http://beta.quicklisp.org/archive/cl-ppcre/2013-04-20/cl-ppcre-2.0.4.tgz\">\n; 154.37KB\n==================================================\n158,070 bytes in 1.41 seconds (109.56KB/sec)\n; Loading \"cl-ppcre\"\n[package cl-ppcre]................................\n..................................................\n...................\n(:CL-PPCRE)\n\nLisp\u3092\u518d\u8d77\u52d5\u3055\u305b\u305f\u3042\u3068\u3082\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53d6\u3063\u3066\u3053\u308c\u3066\u3044\u308c\u3070\u5927\u4e08\u592b\u3067\u3059\u3002\nCL-USER> (ql:system-apropos \"alexandria\")\n#<SYSTEM alexandria / alexandria-20130128-git / quicklisp 2013-07-22>\n#<SYSTEM alexandria-tests / alexandria-20130128-git / quicklisp 2013-07-22>\n; No value\nCL-USER> (ql:quickload :alexandria)\nTo load \"alexandria\":\n  Install 1 Quicklisp release:\n    alexandria\n; Fetching #<URL \"http://beta.quicklisp.org/archive/alexandria/2013-01-28/alexandria-20130128-git.tgz\">\n; 48.22KB\n==================================================\n49,374 bytes in 0.01 seconds (4821.68KB/sec)\n; Loading \"alexandria\"\n[package alexandria.0.dev]........................\n..................................................\n.......\n(:ALEXANDRIA)\n\n\u4eca\u56de\u3082\u7d50\u8ad6\u304b\u3089\u3002 __\u3053\u306e\u4fee\u6b63\u3067ProxyAuthentication\u306b\u5bfe\u5fdc\u3057\u305fQuicklisp\u74b0\u5883\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\u3002__\n\nhttps://github.com/tamurashingo/quicklisp-client/tree/ProxyAuth\n\u4fee\u6b63\u6e08\u307f\u30d5\u30a1\u30a4\u30eb\u306fgithub\u306b\u3042\u3052\u3066\u3042\u308a\u307e\u3059\u3002\n\n\n\u524d\u56de\u307e\u3067\u3067\u3001\u30db\u30fc\u30e0\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306equicklisp\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u521d\u671f\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u305f\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\u3053\u3053\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3057\u3066\u3001ProxyAuthenticate\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u3044\u304d\u307e\u3059\u3002\n\u4fee\u6b63\u306f\u4ee5\u4e0b\u306e\uff13\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\n - $HOME/quicklisp/quicklisp/http.lisp\n - $HOME/quicklisp/quicklisp/package.lisp\n - $HOME/quicklisp/quicklisp/setup.lisp\n\nhttp.lisp\u306fProxy-Authorization\u30d8\u30c3\u30c0\u306e\u4ed8\u4e0e\u306b\u5fc5\u8981\u306a\u95a2\u6570\u306e\u8ffd\u52a0\u3002\npackage.lisp\u304a\u3088\u3073setup.lisp\u306f```*proxy-url*```\u3068\u540c\u69d8\u306e\u8a18\u8ff0\u3092\u8ffd\u52a0\u3067\u3059\u3002\n\n```cl:http.lisp\n;; \u3053\u3053\u304b\u3089\u8ffd\u52a0\n(defvar *BASE64TBL* \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\")\n\n(defun to-bit (num)\n  \"convert 1 octet to binary(0/1) list\"\n  (loop for x from 7 downto 0 collect (ldb (byte 1 x) num)))\n\n(defun string-to-bit (str)\n  \"convert string to binary(0/1) list\"\n  (map 'list #'to-bit (map 'list #'char-code str)))\n\n(defun flatten (x)\n  \"flatten list\"\n  (labels ((rec (x acc)\n             (cond ((null x) acc)\n                   ((atom x) (cons x acc))\n                   (t (rec (car x) (rec (cdr x) acc))))))\n    (rec x nil)))\n\n(defun take-list (list num)\n  \"return taken from list(first arguments) passed as the num(second argument) and rest of the list\"\n  (labels ((take-n (list num acc)\n             (if (or (<= num 0)\n                     (null list))\n                 (values (nreverse acc) list)\n                 (take-n (cdr list) (- num 1) (cons (car list) acc)))))\n    (take-n list num '())))\n\n(defun split (list num)\n  \"split list. each list has num(second arguments) items.\"\n  (labels ((split (list acc)\n             (multiple-value-bind (six rest)\n                 (take-list list num)\n               (if (null rest)\n                   (nreverse (cons six acc))\n                   (split rest (cons six acc))))))\n    (split list '())))\n\n(defun rpad (list padsize &key (pad 0))\n  \"if each list's length less than padsize(second arguments), padding pad(default 0) on right side.\"\n  (labels ((right-padding (list padsize acc)\n             (if (null list)\n                 (nreverse acc)\n                 (let ((item (car list)))\n                   (if (< (length item) padsize)\n                       (right-padding (cdr list) padsize (cons\n                                                           (append\n                                                             item\n                                                             (make-list\n                                                               (- padsize (length item))\n                                                               :initial-element pad))\n                                                           acc))\n                       (right-padding (cdr list) padsize (cons item acc)))))))\n    (right-padding list padsize '())))\n\n(defun bit-to-num (list)\n  \"convert binary(0/1) list to number\"\n  (let ((ms (length list)))\n    (loop for x in list\n          for y downfrom (1- ms)\n          sum (ash x y))))\n\n\n(defun base64-enc (str)\n  \"create base64 encoded string from argument\"\n  (format nil \"~{~{~A~}~}\"\n    (rpad\n      (split\n        (map 'list #'(lambda (x)\n                       (aref *BASE64TBL* x))\n              (map 'list #'bit-to-num\n                   (rpad\n                     (split\n                       (flatten\n                         (string-to-bit str))\n                       6)\n                     6)))\n        4)\n    4 :pad #\\=)))\n\n(defun make-basic-authentication (user password)\n  \"create basic authentication string\"\n  (base64-enc (format nil \"~A:~A\" user password)))\n\n;; \u3053\u3053\u307e\u3067\u8ffd\u52a0\n\n(defun make-request-buffer (host port path &key (method \"GET\"))\n  \"Return an octet vector suitable for sending as an HTTP 1.1 request.\"\n  (setf method (string method))\n  (when *proxy-url*\n    (setf path (full-proxy-path host port path)))\n  (let ((sink (make-instance 'octet-sink)))\n    (flet ((add-line (&rest strings)\n             (apply #'add-strings sink strings)\n             (add-newline sink)))\n      (add-line method \" \" path \" HTTP/1.1\")\n      (add-line \"Host: \" host (if (= port 80) \"\"\n                                  (format nil \":~D\" port)))\n      ;; \u3053\u306e2\u884c\u3092\u8ffd\u52a0\n      (when (and *proxy-url* *proxy-user* *proxy-pass*)\n        (add-line \"Proxy-Authorization: Basic \" (make-basic-authentication *proxy-user* *proxy-pass*)))\n      (add-line \"Connection: close\")\n      (add-line \"User-Agent: \" (user-agent-string))\n      (add-newline sink)\n      (sink-buffer sink))))\n```\n\n```cl:package.lisp\n(defpackage #:ql-http\n  (:documentation\n   \"A simple HTTP client.\")\n  (:use #:cl #:ql-network #:ql-progress #:ql-config)\n  (:export #:*proxy-url*\n           #:*proxy-user*  ; \u8ffd\u52a0\n           #:*proxy-pass*  ; \u8ffd\u52a0\n           #:fetch\n           #:hostname\n           #:port\n           #:path\n           #:url\n           #:*maximum-redirects*\n           #:*default-url-defaults*)\n  (:export #:fetch-error\n           #:unexpected-http-status\n           #:unexpected-http-status-code\n           #:unexpected-http-status-url\n           #:too-many-redirects\n           #:too-many-redirects-url\n           #:too-many-redirects-count))\n\n(defpackage #:quicklisp-client\n  (:documentation\n   \"The Quicklisp client package, intended for end-user Quicklisp\n   commands and configuration parameters.\")\n  (:nicknames #:quicklisp #:ql)\n  (:use #:cl\n        #:ql-util\n        #:ql-impl-util\n        #:ql-dist\n        #:ql-http\n        #:ql-setup\n        #:ql-config\n        #:ql-minitar\n        #:ql-gunzipper)\n  (:shadow #:uninstall)\n  (:export #:quickload\n           #:*quickload-prompt*\n           #:*quickload-verbose*\n           #:*quickload-explain*\n           #:system-not-found\n           #:system-not-found-name\n           #:uninstall\n           #:uninstall-dist\n           #:qmerge\n           #:*quicklisp-home*\n           #:*initial-dist-url*\n           #:*proxy-url*\n           #:*proxy-user*  ; \u8ffd\u52a0\n           #:*proxy-pass*  ; \u8ffd\u52a0\n           #:config-value\n           #:setup\n           #:provided-systems\n           #:system-apropos\n           #:system-list\n           #:update-client\n           #:update-dist\n           #:update-all-dists\n           #:add-to-init-file\n           #:use-only-quicklisp-systems\n           #:write-asdf-manifest-file\n           #:where-is-system\n           #:help\n           #:register-local-projects\n           #:local-projects-searcher\n           #:*local-project-directories*\n           #:list-local-projects\n           #:list-local-systems\n           #:who-depends-on))\n```\n\n```cl:setup.lisp\n(defun maybe-initial-setup ()\n  ;; Is this running under the quicklisp bootstrap?\n  (let ((bootstrap-package (find-package 'quicklisp-quickstart)))\n    (when bootstrap-package\n      (let* ((proxy (find-symbol (string '#:*proxy-url*) bootstrap-package))\n             (proxy-value (and proxy (symbol-value proxy)))\n\n             ;; proxy-user\u306e\u53d6\u5f97\n             (puser (find-symbol (string '#:*proxy-user*) bootstrap-package))\n             (puser-value (and puser (symbol-value puser)))\n             ;; proxy-pass\u306e\u53d6\u5f97\n             (ppass (find-symbol (string '#:*proxy-pass*) bootstrap-package))\n             (ppass-value (and ppass (symbol-value ppass))))\n        (when (and proxy-value (not *proxy-url*))\n          (setf *proxy-url* proxy-value)\n          (setf (config-value \"proxy-url\") proxy-value))\n\n        ;; proxy-user\u306e\u9000\u907f\n        (when (and puser-value (not *proxy-user*))\n          (setf *proxy-user* puser-value)\n          (setf (config-value \"proxy-user\") puser-value))\n        ;; proxy-pass\u306e\u9000\u907f\n        (when (and ppass-value (not *proxy-pass*))\n          (setf *proxy-pass* ppass-value)\n          (setf (config-value \"proxy-pass\") ppass-value)))))\n  (unless (ignore-errors (truename (qmerge \"dists/\")))\n    (let ((target (qmerge \"dists/quicklisp/distinfo.txt\")))\n      (ensure-directories-exist target)\n      (fetch *initial-dist-url* target)\n      (enable (find-dist \"quicklisp\")))))\n```\n\n# \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u7d9a\u304d\n\n\u3053\u306e\u72b6\u614b\u3067 ```(ql:system-apropos \"ppcre\")``` \u3068\u304b\u3084\u3063\u3066\u3082\u4f55\u3082\u8fd4\u3063\u3066\u304d\u307e\u305b\u3093\u3002\u307e\u3060\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306e\u9014\u4e2d\u3060\u304b\u3089\u3067\u3059\u3002\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u624b\u52d5\u3067\u7d9a\u3051\u3066\u3044\u304d\u307e\u3059\u3002\n\n## \u30d5\u30a1\u30a4\u30eb\u306e\u914d\u7f6e\n\n$HOME/quicklisp/config\u4e0b\u306bproxy-url.txt\u304c\u3067\u304d\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n\u3042\u308f\u305b\u3066\u3001proxy-user.txt\u3068proxy-pass.txt\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u4e2d\u8eab\u306f\u305d\u308c\u305e\u308cProxy\u30b5\u30fc\u30d0\u306e\u30e6\u30fc\u30b6\u540d\u3068Proxy\u30b5\u30fc\u30d0\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```cl:\nCL-USER> (load \"/home/shingo/quicklisp/setup.lisp\")\n#P\"/home/shingo/quicklisp/setup.lisp\"\nCL-USER> (in-package :quicklisp)\n#<Package \"QUICKLISP-CLIENT\">\nQL> (config-value \"proxy-user\")\n\"admin\"\nQL> (config-value \"proxy-pass\")\n\"password\"\n```\n\n\u5165\u529b\u3057\u305f\u5185\u5bb9\u304c\u8fd4\u3063\u3066\u304f\u308c\u3070\u5927\u4e08\u592b\u3067\u3059\u3002\n\n\n## \u95a2\u6570\u306e\u4e0a\u66f8\u304d\n\nLisp\u304c\u8a8d\u8b58\u3057\u3066\u3044\u308bmake-request-buffer\u306fProxy-Authorization\u30d8\u30c3\u30c0\u3092\u4f5c\u6210\u3057\u306a\u3044\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a\u306a\u306e\u3067\u3001\n\u5fc5\u8981\u306a\u5024\u3084\u95a2\u6570\u3092\u4e0a\u66f8\u304d\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```cl:\nQL> (in-package #:ql-http)\n\n#<Package \"QL-HTTP\">\nQL-HTTP> (setq *proxy-user* (config-value \"proxy-user\"))\n\"admin\"\nQL-HTTP> (setq *proxy-pass* (config-value \"proxy-pass\"))\n\"password\"\nQL-HTTP> (defvar *BASE64TBL* \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-\")\n...\n;; \u4ee5\u4e0b\u3001\u4eca\u56de\u8ffd\u52a0\u3001\u5909\u66f4\u3057\u305f\u95a2\u6570\u3092\u8cbc\u308a\u4ed8\u3051\u308b\u3002\n```\n\n## distinfo\u306e\u53d6\u5f97\n\n\u524d\u56de\u306fdistinfo.txt\u306e\u53d6\u5f97\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u305d\u3053\u3092\u624b\u52d5\u3067\u3084\u308a\u76f4\u3057\u307e\u3059\u3002\n\n```cl:\nQL-HTTP> (in-package :quicklisp)\n#<Package \"QUICKLISP-CLIENT\">\nQL> (let ((target (qmerge \"dists/quicklisp/distinfo.txt\")))\n      (ensure-directories-exist target)\n      (fetch *initial-dist-url* target)\n      (enable (find-dist \"quicklisp\")))\n; Fetching #<URL \"http://beta.quicklisp.org/dist/quicklisp.txt\">\n; 0.40KB\n==================================================\n408 bytes in 0.00 seconds (199.22KB/sec)\nT\n```\n\n## initfile\u306e\u751f\u6210\n\n```cl:\nCL-USER> (ql:add-to-init-file)\n```\n\n\u3053\u308c\u3067\u5b8c\u4e86\u3067\u3059\u3002\n\n\n## \u78ba\u8a8d\n\nCL-PPCRE\u3092\u843d\u3068\u3057\u3066\u307f\u307e\u3059\u3002\n\n```cl:\nCL> (in-package :cl-user)\n#<Package \"COMMON-LISP-USER\">\nCL-USER> (ql:system-apropos \"cl-ppcre\")\n#<SYSTEM arnesi+.cl-ppcre-extras / arnesi+-20120909-darcs / quicklisp 2013-07-22>\n#<SYSTEM arnesi.cl-ppcre-extras / arnesi-20101006-darcs / quicklisp 2013-07-22>\n#<SYSTEM cl-ppcre / cl-ppcre-2.0.4 / quicklisp 2013-07-22>\n#<SYSTEM cl-ppcre-template / cl-unification-20130128-cvs / quicklisp 2013-07-22>\n#<SYSTEM cl-ppcre-test / cl-ppcre-2.0.4 / quicklisp 2013-07-22>\n#<SYSTEM cl-ppcre-unicode / cl-ppcre-2.0.4 / quicklisp 2013-07-22>\n#<SYSTEM parser-combinators-cl-ppcre / cl-parser-combinators-20121125-git / quicklisp 2013-07-22>\n; No value\nCL-USER> (ql:quickload :cl-ppcre)\n; Fetching #<URL \"http://beta.quicklisp.org/dist/quicklisp/2013-07-22/systems.txt\">\n; 150.36KB\n==================================================\n153,969 bytes in 1.33 seconds (113.05KB/sec)\n; Fetching #<URL \"http://beta.quicklisp.org/dist/quicklisp/2013-07-22/releases.txt\">\n; 223.71KB\n==================================================\n229,074 bytes in 1.45 seconds (154.28KB/sec)\nTo load \"cl-ppcre\":\n  Install 1 Quicklisp release:\n    cl-ppcre\n; Fetching #<URL \"http://beta.quicklisp.org/archive/cl-ppcre/2013-04-20/cl-ppcre-2.0.4.tgz\">\n; 154.37KB\n==================================================\n158,070 bytes in 1.41 seconds (109.56KB/sec)\n; Loading \"cl-ppcre\"\n[package cl-ppcre]................................\n..................................................\n...................\n(:CL-PPCRE)\n```\n\nLisp\u3092\u518d\u8d77\u52d5\u3055\u305b\u305f\u3042\u3068\u3082\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u53d6\u3063\u3066\u3053\u308c\u3066\u3044\u308c\u3070\u5927\u4e08\u592b\u3067\u3059\u3002\n\n```cl:\nCL-USER> (ql:system-apropos \"alexandria\")\n#<SYSTEM alexandria / alexandria-20130128-git / quicklisp 2013-07-22>\n#<SYSTEM alexandria-tests / alexandria-20130128-git / quicklisp 2013-07-22>\n; No value\nCL-USER> (ql:quickload :alexandria)\nTo load \"alexandria\":\n  Install 1 Quicklisp release:\n    alexandria\n; Fetching #<URL \"http://beta.quicklisp.org/archive/alexandria/2013-01-28/alexandria-20130128-git.tgz\">\n; 48.22KB\n==================================================\n49,374 bytes in 0.01 seconds (4821.68KB/sec)\n; Loading \"alexandria\"\n[package alexandria.0.dev]........................\n..................................................\n.......\n(:ALEXANDRIA)\n```\n"}