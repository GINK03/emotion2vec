{"context": " More than 1 year has passed since last update.\u7686\u69d8\u3001\u5fa1\u6a5f\u5acc\u3088\u3046 \u304b\u3068\u3046\u3067\u3059\u3002\n\u3053\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u306f\u3001Scala Advent Calendar 2014 23\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u6700\u8fd1\u3001spray\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u7c21\u5358\u306a\u30c1\u30c3\u30d7\u30b9\u3092\u516c\u958b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nspray\u3068\u306f\nAkka Actor\u30d9\u30fc\u30b9\u306eREST API\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002Benchmarking spray \u306b\u3088\u308b\u3068JVM\u6700\u901f\u306e\u90e8\u985e\u306b\u5165\u308b\u3088\u3046\u3067\u3059\u3002\u8a73\u3057\u304f\u306f\u3053\u3053\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nspray-can\nspray-can\u3092\u5229\u7528\u3059\u308b\u3068HTTP\u306e\u30ea\u30af\u30a8\u30b9\u30c8/\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092Actor\u4e0a\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u88c5\u30b3\u30fc\u30c9\u4f8b\u306f\u4ee5\u4e0b\u3067\u3059(\u8a73\u7d30\u306f \u3053\u3061\u3089 \u3092\u898b\u3066\u304f\u3060\u3055\u3044)\u3002HTTP\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002\nclass DemoService extends Actor with ActorLogging {\n// ...\n  def receive = {\n// ...\n    case HttpRequest(GET, Uri.Path(\"/ping\"), _, _, _) =>\n      sender ! HttpResponse(entity = \"PONG!\")\n// ...\n\n\nspray-routing\nspray-routing\u306f\u3001\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3084\u30a2\u30af\u30b7\u30e7\u30f3\u306a\u3069\u3092DSL\u3092\u4f7f\u3063\u3066\u5ba3\u8a00\u7684\u306b\u8a18\u8ff0\u3067\u304d\u308b\u7279\u5fb4\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306fgithub\u4e0a\u306b\u3042\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\nobject Boot extends App {\n\n  implicit val system = ActorSystem(\"on-spray-can\")\n\n  val service = system.actorOf(Props[DemoServiceActor], \"demo-service\")\n\n  IO(Http) ! Http.Bind(service, \"localhost\", port = 8080)\n\n}\n\nclass DemoServiceActor extends Actor with DemoService {\n\n  def actorRefFactory = context\n\n  def receive = runRoute(demoRoute)\n\n}\n\ntrait DemoService extends HttpService {\n\n  implicit def executionContext = actorRefFactory.dispatcher\n\n  val demoRoute = {\n    get {\n      pathSingleSlash {\n        complete(index)\n      } ~\n      path(\"ping\") {\n        complete(\"PONG!\")\n      } ~\n      path(\"stream1\") {\n        // we detach in order to move the blocking code inside the simpleStringStream into a future\n        detach() {\n          respondWithMediaType(`text/html`) { // normally Strings are rendered to text/plain, we simply override here\n            complete(simpleStringStream)\n          }\n        }\n      } ~\n      path(\"stream2\") {\n        sendStreamingResponse\n      } ~\n      path(\"stream-large-file\") {\n        encodeResponse(Gzip) {\n          getFromFile(largeTempFile)\n        }\n      } ~\n  /** \u4ee5\u4e0b\u7565 */\n  }\n\n  /** \u4ee5\u4e0b\u7565 */\n\n}\n\n\nPlay2\u30e9\u30a4\u30af\u306a\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5c0e\u5165\n\u4e0a\u8a18\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u3064\u3089\u3064\u3089\u306a\u3089\u3079\u3066\u66f8\u304f\u306e\u306f\u3001\u3055\u3059\u304c\u306b\u3064\u3089\u3044\u306e\u3067\u3001Route\u3092\u5225\u3005\u306etrait\u306b\u8a18\u8ff0\u3057\u3066\u5f8c\u3067\u5408\u6210\u3057\u3066\u3082\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\u3068\u306f\u3044\u3048\u3001\u305d\u308c\u3060\u3068trait\u5074\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u3082\u4e00\u7dd2\u306b\u8a18\u8ff0\u3059\u308b\u306e\u3067\u3001\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u6570\u304c\u5897\u3048\u308b\u3068\u7ba1\u7406\u304c\u5927\u5909\u3067\u3059\u306d\u3063\u3066\u3053\u3068\u3067\u3001Play2\u30e9\u30a4\u30af\u306a\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u3084\u308b\u3053\u3068\u306f\u7c21\u5358\u3067\u3001Route\u4e0a\u306b\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u306a\u3044\u3067\u3001\u5225\u9014\u7528\u610f\u3057\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30af\u30e9\u30b9\u306b\u59d4\u8b72\u3059\u308b\u3060\u3051\u3067\u3059\u3002\nobject Main extends App {\n\n  val userRepository = UserRepository.ofDB\n\n  val serviceActorRef = system.actorOf(Props(ServiceActor(userRepository)))\n\n  IO(Http) ! Http.Bind(serviceActorRef, interface = \"127.0.0.1\", port = 8080)\n\n}\n\nActor\u5185\u90e8\u3067runRoute\u306b\u4e0e\u3048\u308bRoute\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u3060\u3051\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u81ea\u4f53\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u59d4\u8b72\u3055\u305b\u3066\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u304c\u8fd4\u3059Action\u304b\u3089\u5f97\u3089\u308c\u305f\u623b\u308a\u5024\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u5909\u63db\u3057\u307e\u3059(toResponse\u306e\u90e8\u5206)\u3002\ncase class ServiceActor(userRepository: UserRepository) extends Actor with Routes {\n\n  private val userController = UserController(userRepository)\n\n  private lazy val routes: Route = {\n    pathPrefix(apiVersion) {\n      path(users) {\n        implicit ctx =>\n          val startTimeStamp = getQueryParam(\"startTimeStamp\").map(e => TimePoint(e.toLong))\n          val maxEntities = getQueryParam(\"maxEntities\").map(_.toInt)\n          userController.getUsers(startTimeStamp, maxEntities)(ctx).toResponse()\n      }\n    }\n  }\n\n  def actorRefFactory = context\n\n  def receive = runRoute(routes)\n\n  protected def getQueryParam(key: String)(implicit ctx: RequestContext): Option[String] =\n    ctx.request.uri.query.get(key)\n\n  protected def parseEntity[A](implicit ctx: RequestContext, unmarshaller: Unmarshaller[A]) =\n    ctx.request.entity.as[A]\n\n  protected implicit def convertToResponseHolder[A](resultTry: Try[A]) = new {\n\n    def toResponse()(implicit ctx: RequestContext, marshaller: ToResponseMarshaller[A]): Unit =\n      resultTry.map { result =>\n        ctx.complete(result)\n      }.get\n  }\n\n\n}\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u306f\u3001Action\u3092\u8fd4\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\ncase class UserController(userRepository: UserRepository) {\n\n  def getUsers(startTimeStamp: Option[TimePoint], maxEntities: Option[Int]): Action[EntitiesChunk[UserId, User]] = Action { implicit ctx =>\n      userRepository.resolveAllBy(startTimeStamp, maxEntities).map { chunk =>\n        EntitiesChunk[UserId, User](chunk)\n      }\n  }\n\n}\n\ntrait Action[R] {\n\n  def apply(request: RequestContext): Try[R]\n\n}\n\nobject Action {\n\n  def apply[R](block: RequestContext => Try[R]) = new Action[R] {\n    override def apply(ctx: RequestContext): Try[R] = block(ctx)\n  }\n\n}\n\n\n\u307e\u3068\u3081\n\u3053\u306e\u65b9\u6cd5\u3067\u3042\u308c\u3070\u3001\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u3092\u96c6\u7d04\u3067\u304d\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u59d4\u8b72\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u3041\u3001\u3053\u3093\u306a\u3053\u3068\u3059\u308b\u3050\u3089\u3044\u306a\u3089\u3001Play2\u3067\u3044\u3044\u3058\u3083\u3093\u3068\u3044\u3046\u306e\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u3001\u3001DDD\u3092\u63a1\u7528\u3057\u3066\u3044\u3066\u305d\u3082\u305d\u3082\u30d5\u30eb\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u304c\u4f7f\u3044\u3065\u3089\u3044(\u30d8\u30ad\u30b5\u30b4\u30ca\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b)\u3068\u3044\u3046\u306e\u304c\u3042\u3063\u305f\u306e\u3067Spray\u306b\u3057\u305f\u308f\u3051\u3067\u3059\u304c\u3001spray-routing\u3092\u751f\u3067\u4f7f\u3046\u306e\u306f\u3055\u3051\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u306d\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u7686\u69d8\u3001\u5fa1\u6a5f\u5acc\u3088\u3046 \u304b\u3068\u3046\u3067\u3059\u3002\n\n\u3053\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u306f\u3001Scala Advent Calendar 2014 23\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u6700\u8fd1\u3001spray\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u7c21\u5358\u306a\u30c1\u30c3\u30d7\u30b9\u3092\u516c\u958b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# spray\u3068\u306f\n\nAkka Actor\u30d9\u30fc\u30b9\u306eREST API\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002[Benchmarking spray](http://spray.io/blog/2013-05-24-benchmarking-spray/) \u306b\u3088\u308b\u3068JVM\u6700\u901f\u306e\u90e8\u985e\u306b\u5165\u308b\u3088\u3046\u3067\u3059\u3002\u8a73\u3057\u304f\u306f[\u3053\u3053](http://spray.io/)\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n## spray-can\n\nspray-can\u3092\u5229\u7528\u3059\u308b\u3068HTTP\u306e\u30ea\u30af\u30a8\u30b9\u30c8/\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092Actor\u4e0a\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u88c5\u30b3\u30fc\u30c9\u4f8b\u306f\u4ee5\u4e0b\u3067\u3059(\u8a73\u7d30\u306f [\u3053\u3061\u3089](https://github.com/spray/spray/blob/master/examples/spray-can/simple-http-server/src/main/scala/spray/examples/DemoService.scala) \u3092\u898b\u3066\u304f\u3060\u3055\u3044)\u3002HTTP\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u306b\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u304d\u307e\u3059\u3002\n\n\n```scala\nclass DemoService extends Actor with ActorLogging {\n// ...\n  def receive = {\n// ...\n    case HttpRequest(GET, Uri.Path(\"/ping\"), _, _, _) =>\n      sender ! HttpResponse(entity = \"PONG!\")\n// ...\n```\n\n## spray-routing\n\nspray-routing\u306f\u3001\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3084\u30a2\u30af\u30b7\u30e7\u30f3\u306a\u3069\u3092DSL\u3092\u4f7f\u3063\u3066\u5ba3\u8a00\u7684\u306b\u8a18\u8ff0\u3067\u304d\u308b\u7279\u5fb4\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306f[github\u4e0a\u306b\u3042\u308b\u30b5\u30f3\u30d7\u30eb](https://github.com/spray/spray/tree/release/1.3/examples/spray-routing/on-spray-can/src/main/scala/spray/examples)\u3067\u3059\u3002\n\n```scala\nobject Boot extends App {\n\n  implicit val system = ActorSystem(\"on-spray-can\")\n\n  val service = system.actorOf(Props[DemoServiceActor], \"demo-service\")\n\n  IO(Http) ! Http.Bind(service, \"localhost\", port = 8080)\n\n}\n```\n\n```scala\nclass DemoServiceActor extends Actor with DemoService {\n\n  def actorRefFactory = context\n\n  def receive = runRoute(demoRoute)\n\n}\n\ntrait DemoService extends HttpService {\n\n  implicit def executionContext = actorRefFactory.dispatcher\n\n  val demoRoute = {\n    get {\n      pathSingleSlash {\n        complete(index)\n      } ~\n      path(\"ping\") {\n        complete(\"PONG!\")\n      } ~\n      path(\"stream1\") {\n        // we detach in order to move the blocking code inside the simpleStringStream into a future\n        detach() {\n          respondWithMediaType(`text/html`) { // normally Strings are rendered to text/plain, we simply override here\n            complete(simpleStringStream)\n          }\n        }\n      } ~\n      path(\"stream2\") {\n        sendStreamingResponse\n      } ~\n      path(\"stream-large-file\") {\n        encodeResponse(Gzip) {\n          getFromFile(largeTempFile)\n        }\n      } ~\n  /** \u4ee5\u4e0b\u7565 */\n  }\n\n  /** \u4ee5\u4e0b\u7565 */\n\n}\n```\n\n# Play2\u30e9\u30a4\u30af\u306a\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5c0e\u5165\n\n\u4e0a\u8a18\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u3064\u3089\u3064\u3089\u306a\u3089\u3079\u3066\u66f8\u304f\u306e\u306f\u3001\u3055\u3059\u304c\u306b\u3064\u3089\u3044\u306e\u3067\u3001Route\u3092\u5225\u3005\u306etrait\u306b\u8a18\u8ff0\u3057\u3066\u5f8c\u3067\u5408\u6210\u3057\u3066\u3082\u3088\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306d\u3002\u3068\u306f\u3044\u3048\u3001\u305d\u308c\u3060\u3068trait\u5074\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u3082\u4e00\u7dd2\u306b\u8a18\u8ff0\u3059\u308b\u306e\u3067\u3001\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u6570\u304c\u5897\u3048\u308b\u3068\u7ba1\u7406\u304c\u5927\u5909\u3067\u3059\u306d\u3063\u3066\u3053\u3068\u3067\u3001Play2\u30e9\u30a4\u30af\u306a\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3084\u308b\u3053\u3068\u306f\u7c21\u5358\u3067\u3001Route\u4e0a\u306b\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u306a\u3044\u3067\u3001\u5225\u9014\u7528\u610f\u3057\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30af\u30e9\u30b9\u306b\u59d4\u8b72\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n```scala\nobject Main extends App {\n\n  val userRepository = UserRepository.ofDB\n\n  val serviceActorRef = system.actorOf(Props(ServiceActor(userRepository)))\n\n  IO(Http) ! Http.Bind(serviceActorRef, interface = \"127.0.0.1\", port = 8080)\n\n}\n```\n\nActor\u5185\u90e8\u3067runRoute\u306b\u4e0e\u3048\u308bRoute\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u3060\u3051\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u81ea\u4f53\u306f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u59d4\u8b72\u3055\u305b\u3066\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u304c\u8fd4\u3059Action\u304b\u3089\u5f97\u3089\u308c\u305f\u623b\u308a\u5024\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u5909\u63db\u3057\u307e\u3059(toResponse\u306e\u90e8\u5206)\u3002\n\n```scala\ncase class ServiceActor(userRepository: UserRepository) extends Actor with Routes {\n\n  private val userController = UserController(userRepository)\n\n  private lazy val routes: Route = {\n    pathPrefix(apiVersion) {\n      path(users) {\n        implicit ctx =>\n          val startTimeStamp = getQueryParam(\"startTimeStamp\").map(e => TimePoint(e.toLong))\n          val maxEntities = getQueryParam(\"maxEntities\").map(_.toInt)\n          userController.getUsers(startTimeStamp, maxEntities)(ctx).toResponse()\n      }\n    }\n  }\n\n  def actorRefFactory = context\n\n  def receive = runRoute(routes)\n\n  protected def getQueryParam(key: String)(implicit ctx: RequestContext): Option[String] =\n    ctx.request.uri.query.get(key)\n\n  protected def parseEntity[A](implicit ctx: RequestContext, unmarshaller: Unmarshaller[A]) =\n    ctx.request.entity.as[A]\n\n  protected implicit def convertToResponseHolder[A](resultTry: Try[A]) = new {\n\n    def toResponse()(implicit ctx: RequestContext, marshaller: ToResponseMarshaller[A]): Unit =\n      resultTry.map { result =>\n        ctx.complete(result)\n      }.get\n  }\n\n\n}\n```\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u306f\u3001Action\u3092\u8fd4\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n```scala\ncase class UserController(userRepository: UserRepository) {\n\n  def getUsers(startTimeStamp: Option[TimePoint], maxEntities: Option[Int]): Action[EntitiesChunk[UserId, User]] = Action { implicit ctx =>\n      userRepository.resolveAllBy(startTimeStamp, maxEntities).map { chunk =>\n        EntitiesChunk[UserId, User](chunk)\n      }\n  }\n\n}\n```\n\n```scala\ntrait Action[R] {\n\n  def apply(request: RequestContext): Try[R]\n\n}\n\nobject Action {\n\n  def apply[R](block: RequestContext => Try[R]) = new Action[R] {\n    override def apply(ctx: RequestContext): Try[R] = block(ctx)\n  }\n\n}\n```\n\n# \u307e\u3068\u3081\n\n\u3053\u306e\u65b9\u6cd5\u3067\u3042\u308c\u3070\u3001\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u3092\u96c6\u7d04\u3067\u304d\u3001\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u59d4\u8b72\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u3041\u3001\u3053\u3093\u306a\u3053\u3068\u3059\u308b\u3050\u3089\u3044\u306a\u3089\u3001Play2\u3067\u3044\u3044\u3058\u3083\u3093\u3068\u3044\u3046\u306e\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u3001\u3001DDD\u3092\u63a1\u7528\u3057\u3066\u3044\u3066\u305d\u3082\u305d\u3082\u30d5\u30eb\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u304c\u4f7f\u3044\u3065\u3089\u3044(\u30d8\u30ad\u30b5\u30b4\u30ca\u30eb\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b)\u3068\u3044\u3046\u306e\u304c\u3042\u3063\u305f\u306e\u3067Spray\u306b\u3057\u305f\u308f\u3051\u3067\u3059\u304c\u3001spray-routing\u3092\u751f\u3067\u4f7f\u3046\u306e\u306f\u3055\u3051\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u306d\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n", "tags": ["Scala", "spray"]}