{"tags": ["\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"], "context": "\n\n\u524d\u7f6e\u304d\n\u95a2\u6570\u578b\u3068\u3044\u3046\u30bf\u30a4\u30c8\u30eb\u306f\u91e3\u308a\u3067\u3059\u3002\n\u5148\u65e5\u3001\u3053\u3093\u306a\u547d\u984c\u3092\u9802\u3044\u305f\n\u547d\u984c: \u4ee5\u4e0b\u306e\u69d8\u306a\u51e6\u7406\u306f\u3069\u3046\u66f8\u304f\u3079\u304d\u304b\uff1f\n  def foo(value)\n    value = value.filter {|x| x % 2 == 0 }\n    if value.empty?\n      p \"\u5076\u6570\u306e\u5024\u304c\u306a\u3044\u3088\uff01\"\n      return\n    end\n\n    value = value.filter {|x| x > 5 }\n    if value.empty?\n      p \"5\u3088\u308a\u5927\u304d\u3044\u5024\u304c\u306a\u3044\u3088\"\n      return\n    end\n  end\n\n  foo [1,2,3,4,5,6]\n\n\u3053\u306e\u547d\u984c\u306f\u300c\u95a2\u6570\u578b\u3063\u307d\u304f\u300d\u3068\u3044\u3046\u304b\u3001\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3092\u65ad\u3061\u5207\u3089\u305a\u306b\u3001\n\u305d\u3057\u3066\u3001\u4f8b\u5916\u7b49\u306e\u5927\u57df\u8131\u51fa\u306f\u4f7f\u308f\u305a\u306b\u51e6\u7406\u306f\u66f8\u3051\u308b\u304b\u3068\u3044\u3046\u554f\u984c\u3060\u3068\u7406\u89e3\u3057\u305f\u3002\n(\u3053\u306e\u547d\u984c\u3001\u5b9f\u969b\u306b\u306fJava\u3068\u3044\u3046\u304bGroovy\u3067\u51fa\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u304c\u3001\u6163\u308c\u3066\u3044\u306a\u3044\u306e\u3067Ruby\u3067\u8a18\u8ff0\u3059\u308b)\n\u305d\u3057\u3066\u3001\u79c1\u306e\u60f3\u50cf\u3057\u305f\u7b54\u3048\u306f\u3053\u3093\u306a\u611f\u3058\u3060\u3063\u305f\u3002\n  def foo(value, f, g)\n    value.filter {|x| f.call(x) }\n         .if_empty {\n              p \"error f()\"\n          }\n         .filter {|x| g.call(x) }\n         .if_empty {\n              p \"error g()\"\n          }\n  end\n\n\u3055\u3066\uff1f\u3053\u308c\u306f\u5b9f\u88c5\u3067\u304d\u308b\u306e\u304b\uff1f\n\nOptional \u3092\u4f7f\u3046\n\u79c1\u306f\u5f53\u521d\u3001\u5931\u6557\u3092\u8868\u73fe\u3059\u308b\u306a\u3089Optional\u3060\u308d\u3046\u3068\u8003\u3048\u3066\u3044\u305f\u3002Optional\u3068\u3044\u3046\u306e\u306fJava8\u3067\u306e\u540d\u524d\u3067\u3001Haskell\u306a\u3089Maybe\u3001Scala\u306a\u3089Option\u306e\u3053\u3068\u3067\u3042\u308b\u3002\n\u4e0a\u8a18\u3067\u3001if_empty \u3068\u3044\u3046\u306e\u3082Java\u3067orElse()\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u3001\u3053\u308c\u304c\u4e0a\u8a18\u306e\u76ee\u7684\u3067\u4f7f\u3048\u308b\u3068\u601d\u3063\u3066\u3044\u305f\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306b\u8a66\u3057\u305f\u3068\u3053\u308dorElse()\u306fOptional\u3092\u8fd4\u3055\u306a\u3044\u306e\u3067\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u304d\u306a\u3044\u3002\u305d\u3053\u3067\u3001if_empty \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u3067\u3063\u3061\u3042\u3052\u3066\u3053\u306e\u554f\u984c\u306b\u5bfe\u51e6\u3057\u3066\u307f\u305f\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3092\u8003\u3048\u3066\u307f\u305f\u30fb\u30fb\u30fb\u304c\u305d\u308c\u3067\u3082\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\uff08\u3053\u3053\u3067\u306f\u3001\u554f\u984c\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081value\u304c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3042\u308b\u3053\u3068\u306f\u4e00\u65e6\u8003\u3048\u306a\u3044\uff09\nclass Optional\n  attr_reader :value\n  def initialize(x)\n    @value = x\n  end\n  def self.of(x)\n    Optional.new(x)\n  end\n  def empty?\n    @value.nil? || @value.empty?\n  end\n  def each\n    unless self.empty?\n      yield\n    end\n    self\n  end\n  def if_empty\n    if self.empty?\n      yield\n      Optional.of(nil)\n    else\n      self\n    end\n  end\n  def filter\n    if yield @value\n      self\n    else\n      Optional.of(nil)\n    end\n  end\n  def map\n    if self.empty?\n      Optional.of(nil)\n    else\n      Optional.of(yield @value)\n    end\n  end\n  def flat_map\n    if self.empty?\n      Optional.of(nil)\n    else\n      yield @value\n    end\n  end\n\n  EMPTY = Optional.of(nil)\n  def inspect\n    if empty?\n      \"Optional::EMPTY\"\n    else\n      \"Optional.of(#{@value.inspect})\"\n    end\n  end\n  def ==(other)\n    @value == other.value\n  end\nend\n\ndef foo(value, f, g)\n  value.filter {|x| f.call(x) }\n       .if_empty {\n            p \"error f()\"\n        }\n       .filter {|x| g.call(x) }\n       .if_empty {\n            p \"error g()\"\n        }\nend\n\ndef assert(expect, actual)\n  if expect != actual\n    puts <<-END\n      at #{caller(1)[0]}\n      expect: #{expect.inspect}\n      actual: #{actual.inspect}\n    END\n  end\nend\n\np 1; assert Optional.of(\"a\"), foo(Optional.of(\"a\"), proc{true }, proc{true })\np 2; assert Optional::EMPTY,  foo(Optional.of(nil), proc{false}, proc{false})\np 3; assert Optional::EMPTY,  foo(Optional.of(\"a\"), proc{false}, proc{true })\np 4; assert Optional::EMPTY,  foo(Optional.of(\"a\"), proc{true }, proc{false})\np 5; assert Optional::EMPTY,  foo(Optional.of(\"a\"), proc{false}, proc{false})\n\n\u3053\u3053\u3067\u3001\u5b9f\u88c5\u3057\u305fOptional\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u8aac\u660e\u3059\u308b\u3068\u3001\n* Optional.of(x) \u3067\u3001x \u3092 Optional \u30b3\u30f3\u30c6\u30ca\u306b\u5165\u308c\u308b\n* Optional#filter {...} \u306f\u3001\u30d6\u30ed\u30c3\u30af\u304c\u771f\u3092\u8fd4\u3057\u305f\u3089self\u3092\u8fd4\u3057\u3001\u507d\u3092\u8fd4\u3057\u305f\u3089EMPTY(\u5931\u6557)\u3092\u8fd4\u3059\n* Optional#if_empty {...} \u306f\u3001self\u304cEMPTY\u306a\u3089\u30d6\u30ed\u30c3\u30af\u3092\u5b9f\u884c\u3057\u3066EMPTY\u3092\u8fd4\u3059\u3002self\u304cEMPTY\u3067\u306a\u3051\u308c\u3070self\u3092\u8fd4\u3059\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u5f53\u521d\u60f3\u50cf\u3057\u305f\u89e3\u3092\u8868\u73fe\u3067\u304d\u308b\u304b\u3068\u601d\u3063\u305f\u304c\u4ee5\u4e0b\u306e\u554f\u984c\u304c\u3042\u3063\u305f\u3002\n\nif_empty \u304cEMPTY\u3092\u8fd4\u3057\u305f\u3089\u6b8b\u308a\u306e\u30d6\u30ed\u30c3\u30af\u306f\u7a7a\u632f\u308a\u3057\u3066\u6b32\u3057\u3044\u3002\u3057\u304b\u3057\u5f8c\u7d9a\u306eif_empty\u304c\u3082\u3046\u4e00\u5ea6\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3046\n\n  value.filter {|x| f.call(x) }\n       .if_empty {\n            p \"error f()\"         <-- \u524d\u306efilter\u306e\u7d50\u679c\u304cEMPTY\u306a\u3089\u3053\u308c\u304c\u5b9f\u884c\u3055\u308c\u3001EMPTY\u3092\u8fd4\u3059\n        }\n       .filter {|x| g.call(x) }   <-- EMPTY\u306a\u306e\u3067\u3001\u3053\u308c\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002OK\n       .if_empty {\n            p \"error g()\"         <-- EMPTY\u304c\u4f1d\u642c\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u3082\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3046\uff01\n        }\n\n\u3069\u3046\u3082\u9055\u3046\u3089\u3057\u3044\u3002\u305d\u3053\u3067\u3044\u308d\u3044\u308d\u8003\u3048\u76f4\u3057\u305f\u3068\u3053\u308d\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u3057\u304b\u3057\u3053\u308c\u306f\u3001\u6700\u521d\u306e\u547d\u984c\u304b\u3089return\u304c\u306a\u304f\u306a\u3063\u305f\u3060\u3051\u3067\u3042\u308b\u3002\u4f55\u3082\u304a\u3044\u3057\u304f\u306a\u3044\u3002\ndef foo(value, f, g)\n  value.map {|x|\n          if f.call(x)\n            x\n          else\n            p \"error f()\"\n            nil\n          end\n        }\n       .map {|x|\n          if g.call(x)\n            x\n          else\n            p \"error g()\"\n            nil\n          end\n        }\nend\n\n\nEither \u3092\u4f7f\u3046\nOptional \u3060\u3068\u3001\u5024\u307e\u305f\u306fEMPTY\u3057\u304b\u8fd4\u305b\u306a\u3044\u306e\u3067\u3001Either\u306b\u3088\u308a\u5024\u307e\u305f\u306f\u5931\u6557\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3088\u3046\u306a\u3082\u306e\u3092\u8003\u3048\u3066\u307f\u308b\u3002\n\u305f\u3060\u3057\u3001Haskell\u306e\u5165\u9580\u306b\u4f55\u5ea6\u304b\u632b\u6298\u3057\u3066\u3044\u308b\u306e\u3067\u3001Haskell\u306eEither\u304c\u3069\u3046\u3044\u3063\u305f\u3082\u306e\u304b\u306f\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u3002\u3053\u3053\u3067\u306f\u3001\u30c7\u30fc\u30bf\u3068\u30a8\u30e9\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u6301\u3057\u3001\u4eca\u56de\u306e\u76ee\u7684\u3092\u9054\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u305f\u30af\u30e9\u30b9\u3068\u3057\u3066Optional2\u3092\u5b9a\u7fa9\u3057\u305f\u3002\n\u305d\u3057\u3066\u3001if_empty \u306f\u3001\u7a7a\u3067\u52dd\u3064\u30a8\u30e9\u30fc\u304c\u306a\u3044\u5834\u5408\u306b\u30d6\u30ed\u30c3\u30af\u3092\u5b9f\u884c\u3057\u30a8\u30e9\u30fc\u3092\u30bb\u30c3\u30c8\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u305f\nclass Error < RuntimeError\n  def initialize(message = nil)\n    @message = message\n    super(message)\n  end\n  attr_accessor :message\nend\n\nclass Optional2\n  attr_reader :error, :value\n\n  def initialize(error, value)\n    @error = error\n    @value = value\n  end\n  def self.of(value)\n    Optional2.new(nil, value)\n  end\n  def self.empty(message = nil)\n    Optional2.new(Error.new(message), nil)\n  end\n  def empty?\n    @value.nil? || @value.empty?\n  end\n  def each\n    unless self.empty?\n      yield\n    end\n    self\n  end\n  def if_empty\n    if self.empty? && (self.error.nil? || self.error.message.nil?)\n      Optional2.empty(yield)\n    else\n      self\n    end\n  end\n  def filter\n    if self.empty?\n      self\n    elsif yield @value\n      self\n    else\n      Optional2.empty\n    end\n  end\n  def map\n    if self.empty?\n      self\n    else\n      Optional2.of(yield @value)\n    end\n  end\n  def flat_map\n    if self.empty?\n      self\n    else\n      yield @value\n    end\n  end\n\n  def inspect\n    if empty?\n      \"Optional2::EMPTY(#{@error.inspect})\"\n    else\n      \"Optional2.of(#{@value.inspect})\"\n    end\n  end\n  def ==(other)\n    @value == other.value &&\n    @error == other.error\n  end\nend\n\ndef foo(value, f, g)\n  value.filter {|x| f.call(x) }\n       .if_empty {\n          \"error f()\"\n        }\n       .filter {|x| g.call(x) }\n       .if_empty {\n          \"error g()\"\n        }\nend\n\ndef assert(expect, actual)\n  if expect != actual\n    puts <<-END\n      at #{caller(1)[0]}\n      expect: #{expect.inspect}\n      actual: #{actual.inspect}\n    END\n  end\nend\n\np 1; assert Optional2.of(\"a\"),            foo(Optional2.of(\"a\"), proc{true }, proc{true })\np 2; assert Optional2.empty(\"error f()\"), foo(Optional2.of(nil), proc{false}, proc{false})\np 3; assert Optional2.empty(\"error f()\"), foo(Optional2.of(\"a\"), proc{false}, proc{true })\np 4; assert Optional2.empty(\"error g()\"), foo(Optional2.of(\"a\"), proc{true }, proc{false})\np 5; assert Optional2.empty(\"error f()\"), foo(Optional2.of(\"a\"), proc{false}, proc{false})\n\n\u3053\u308c\u3067\u76ee\u7684\u306f\u9054\u6210\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u4e00\u822c\u7684\u306a\u89e3\u653e\u306a\u306e\u3060\u308d\u3046\u304b\uff1f\n\u4e00\u5fdc\u3001\u6700\u521d\u306e\u547d\u984c\u306e\u3082\u3053\u308c\u3067\u9054\u6210\u3059\u308b\ndef foo(value)\n  value.map {|x| x.select {|v| v % 2 == 0 }}\n       .if_empty {\n          \"\u5076\u6570\u306e\u5024\u304c\u306a\u3044\u3088\uff01\"\n        }\n       .map {|x| x.select {|v| v > 5 }}\n       .if_empty {\n          \"5\u3088\u308a\u5927\u304d\u3044\u5024\u304c\u306a\u3044\u3088\"\n        }\nend\n\np foo Optional2.of([1,2,3,4,5,6])\n\n\u3053\u306e\u3001Optional2\u306e\u4e16\u754c\u304b\u3089\u5024\u307e\u305f\u306f\u30a8\u30e9\u30fc\u3092\u53d6\u308a\u51fa\u3059\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u3069\u3046\u3059\u308b\u3079\u304d\u304b\u307e\u3067\u306f\u8003\u3048\u3066\u306a\u3044\u3002\n# \u524d\u7f6e\u304d\n\n\u95a2\u6570\u578b\u3068\u3044\u3046\u30bf\u30a4\u30c8\u30eb\u306f\u91e3\u308a\u3067\u3059\u3002\n\n\u5148\u65e5\u3001\u3053\u3093\u306a\u547d\u984c\u3092\u9802\u3044\u305f\n\n\u547d\u984c: \u4ee5\u4e0b\u306e\u69d8\u306a\u51e6\u7406\u306f\u3069\u3046\u66f8\u304f\u3079\u304d\u304b\uff1f\n\n```\n  def foo(value)\n    value = value.filter {|x| x % 2 == 0 }\n    if value.empty?\n      p \"\u5076\u6570\u306e\u5024\u304c\u306a\u3044\u3088\uff01\"\n      return\n    end\n\n    value = value.filter {|x| x > 5 }\n    if value.empty?\n      p \"5\u3088\u308a\u5927\u304d\u3044\u5024\u304c\u306a\u3044\u3088\"\n      return\n    end\n  end\n\n  foo [1,2,3,4,5,6]\n```\n\n\u3053\u306e\u547d\u984c\u306f\u300c\u95a2\u6570\u578b\u3063\u307d\u304f\u300d\u3068\u3044\u3046\u304b\u3001\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3092\u65ad\u3061\u5207\u3089\u305a\u306b\u3001\n\u305d\u3057\u3066\u3001\u4f8b\u5916\u7b49\u306e\u5927\u57df\u8131\u51fa\u306f\u4f7f\u308f\u305a\u306b\u51e6\u7406\u306f\u66f8\u3051\u308b\u304b\u3068\u3044\u3046\u554f\u984c\u3060\u3068\u7406\u89e3\u3057\u305f\u3002\n(\u3053\u306e\u547d\u984c\u3001\u5b9f\u969b\u306b\u306fJava\u3068\u3044\u3046\u304bGroovy\u3067\u51fa\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u304c\u3001\u6163\u308c\u3066\u3044\u306a\u3044\u306e\u3067Ruby\u3067\u8a18\u8ff0\u3059\u308b)\n\n\u305d\u3057\u3066\u3001\u79c1\u306e\u60f3\u50cf\u3057\u305f\u7b54\u3048\u306f\u3053\u3093\u306a\u611f\u3058\u3060\u3063\u305f\u3002\n\n```\n  def foo(value, f, g)\n    value.filter {|x| f.call(x) }\n         .if_empty {\n              p \"error f()\"\n          }\n         .filter {|x| g.call(x) }\n         .if_empty {\n              p \"error g()\"\n          }\n  end\n```\n\n\u3055\u3066\uff1f\u3053\u308c\u306f\u5b9f\u88c5\u3067\u304d\u308b\u306e\u304b\uff1f\n\n# Optional \u3092\u4f7f\u3046\n\n\u79c1\u306f\u5f53\u521d\u3001\u5931\u6557\u3092\u8868\u73fe\u3059\u308b\u306a\u3089Optional\u3060\u308d\u3046\u3068\u8003\u3048\u3066\u3044\u305f\u3002Optional\u3068\u3044\u3046\u306e\u306fJava8\u3067\u306e\u540d\u524d\u3067\u3001Haskell\u306a\u3089Maybe\u3001Scala\u306a\u3089Option\u306e\u3053\u3068\u3067\u3042\u308b\u3002\n\n\u4e0a\u8a18\u3067\u3001if_empty \u3068\u3044\u3046\u306e\u3082Java\u3067orElse()\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u3001\u3053\u308c\u304c\u4e0a\u8a18\u306e\u76ee\u7684\u3067\u4f7f\u3048\u308b\u3068\u601d\u3063\u3066\u3044\u305f\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306b\u8a66\u3057\u305f\u3068\u3053\u308dorElse()\u306fOptional\u3092\u8fd4\u3055\u306a\u3044\u306e\u3067\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u304d\u306a\u3044\u3002\u305d\u3053\u3067\u3001if_empty \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u3067\u3063\u3061\u3042\u3052\u3066\u3053\u306e\u554f\u984c\u306b\u5bfe\u51e6\u3057\u3066\u307f\u305f\u3002\n\n\u5177\u4f53\u7684\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3092\u8003\u3048\u3066\u307f\u305f\u30fb\u30fb\u30fb\u304c\u305d\u308c\u3067\u3082\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3002\n\uff08\u3053\u3053\u3067\u306f\u3001\u554f\u984c\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081value\u304c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3042\u308b\u3053\u3068\u306f\u4e00\u65e6\u8003\u3048\u306a\u3044\uff09\n\n```\nclass Optional\n  attr_reader :value\n  def initialize(x)\n    @value = x\n  end\n  def self.of(x)\n    Optional.new(x)\n  end\n  def empty?\n    @value.nil? || @value.empty?\n  end\n  def each\n    unless self.empty?\n      yield\n    end\n    self\n  end\n  def if_empty\n    if self.empty?\n      yield\n      Optional.of(nil)\n    else\n      self\n    end\n  end\n  def filter\n    if yield @value\n      self\n    else\n      Optional.of(nil)\n    end\n  end\n  def map\n    if self.empty?\n      Optional.of(nil)\n    else\n      Optional.of(yield @value)\n    end\n  end\n  def flat_map\n    if self.empty?\n      Optional.of(nil)\n    else\n      yield @value\n    end\n  end\n\n  EMPTY = Optional.of(nil)\n  def inspect\n    if empty?\n      \"Optional::EMPTY\"\n    else\n      \"Optional.of(#{@value.inspect})\"\n    end\n  end\n  def ==(other)\n    @value == other.value\n  end\nend\n\ndef foo(value, f, g)\n  value.filter {|x| f.call(x) }\n       .if_empty {\n            p \"error f()\"\n        }\n       .filter {|x| g.call(x) }\n       .if_empty {\n            p \"error g()\"\n        }\nend\n\ndef assert(expect, actual)\n  if expect != actual\n    puts <<-END\n      at #{caller(1)[0]}\n      expect: #{expect.inspect}\n      actual: #{actual.inspect}\n    END\n  end\nend\n\np 1; assert Optional.of(\"a\"), foo(Optional.of(\"a\"), proc{true }, proc{true })\np 2; assert Optional::EMPTY,  foo(Optional.of(nil), proc{false}, proc{false})\np 3; assert Optional::EMPTY,  foo(Optional.of(\"a\"), proc{false}, proc{true })\np 4; assert Optional::EMPTY,  foo(Optional.of(\"a\"), proc{true }, proc{false})\np 5; assert Optional::EMPTY,  foo(Optional.of(\"a\"), proc{false}, proc{false})\n```\n\n\u3053\u3053\u3067\u3001\u5b9f\u88c5\u3057\u305fOptional\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u8aac\u660e\u3059\u308b\u3068\u3001\n* `Optional.of(x)` \u3067\u3001x \u3092 Optional \u30b3\u30f3\u30c6\u30ca\u306b\u5165\u308c\u308b\n* `Optional#filter {...}` \u306f\u3001\u30d6\u30ed\u30c3\u30af\u304c\u771f\u3092\u8fd4\u3057\u305f\u3089self\u3092\u8fd4\u3057\u3001\u507d\u3092\u8fd4\u3057\u305f\u3089EMPTY(\u5931\u6557)\u3092\u8fd4\u3059\n* `Optional#if_empty {...}` \u306f\u3001self\u304cEMPTY\u306a\u3089\u30d6\u30ed\u30c3\u30af\u3092\u5b9f\u884c\u3057\u3066EMPTY\u3092\u8fd4\u3059\u3002self\u304cEMPTY\u3067\u306a\u3051\u308c\u3070self\u3092\u8fd4\u3059\n\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u5f53\u521d\u60f3\u50cf\u3057\u305f\u89e3\u3092\u8868\u73fe\u3067\u304d\u308b\u304b\u3068\u601d\u3063\u305f\u304c\u4ee5\u4e0b\u306e\u554f\u984c\u304c\u3042\u3063\u305f\u3002\n\n* if_empty \u304cEMPTY\u3092\u8fd4\u3057\u305f\u3089\u6b8b\u308a\u306e\u30d6\u30ed\u30c3\u30af\u306f\u7a7a\u632f\u308a\u3057\u3066\u6b32\u3057\u3044\u3002\u3057\u304b\u3057\u5f8c\u7d9a\u306eif_empty\u304c\u3082\u3046\u4e00\u5ea6\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3046\n\n\n```\n  value.filter {|x| f.call(x) }\n       .if_empty {\n            p \"error f()\"         <-- \u524d\u306efilter\u306e\u7d50\u679c\u304cEMPTY\u306a\u3089\u3053\u308c\u304c\u5b9f\u884c\u3055\u308c\u3001EMPTY\u3092\u8fd4\u3059\n        }\n       .filter {|x| g.call(x) }   <-- EMPTY\u306a\u306e\u3067\u3001\u3053\u308c\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002OK\n       .if_empty {\n            p \"error g()\"         <-- EMPTY\u304c\u4f1d\u642c\u3057\u3066\u3044\u308b\u306e\u3067\u3053\u308c\u3082\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3046\uff01\n        }\n```\n\n\u3069\u3046\u3082\u9055\u3046\u3089\u3057\u3044\u3002\u305d\u3053\u3067\u3044\u308d\u3044\u308d\u8003\u3048\u76f4\u3057\u305f\u3068\u3053\u308d\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u3057\u304b\u3057\u3053\u308c\u306f\u3001\u6700\u521d\u306e\u547d\u984c\u304b\u3089return\u304c\u306a\u304f\u306a\u3063\u305f\u3060\u3051\u3067\u3042\u308b\u3002\u4f55\u3082\u304a\u3044\u3057\u304f\u306a\u3044\u3002\n\n```\ndef foo(value, f, g)\n  value.map {|x|\n          if f.call(x)\n            x\n          else\n            p \"error f()\"\n            nil\n          end\n        }\n       .map {|x|\n          if g.call(x)\n            x\n          else\n            p \"error g()\"\n            nil\n          end\n        }\nend\n```\n\n# Either \u3092\u4f7f\u3046\n\nOptional \u3060\u3068\u3001\u5024\u307e\u305f\u306fEMPTY\u3057\u304b\u8fd4\u305b\u306a\u3044\u306e\u3067\u3001Either\u306b\u3088\u308a\u5024\u307e\u305f\u306f\u5931\u6557\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3088\u3046\u306a\u3082\u306e\u3092\u8003\u3048\u3066\u307f\u308b\u3002\n\n\u305f\u3060\u3057\u3001Haskell\u306e\u5165\u9580\u306b\u4f55\u5ea6\u304b\u632b\u6298\u3057\u3066\u3044\u308b\u306e\u3067\u3001Haskell\u306eEither\u304c\u3069\u3046\u3044\u3063\u305f\u3082\u306e\u304b\u306f\u7406\u89e3\u3067\u304d\u3066\u3044\u306a\u3044\u3002\u3053\u3053\u3067\u306f\u3001\u30c7\u30fc\u30bf\u3068\u30a8\u30e9\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u6301\u3057\u3001\u4eca\u56de\u306e\u76ee\u7684\u3092\u9054\u6210\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3063\u305f\u30af\u30e9\u30b9\u3068\u3057\u3066Optional2\u3092\u5b9a\u7fa9\u3057\u305f\u3002\n\n\u305d\u3057\u3066\u3001if_empty \u306f\u3001\u7a7a\u3067\u52dd\u3064\u30a8\u30e9\u30fc\u304c\u306a\u3044\u5834\u5408\u306b\u30d6\u30ed\u30c3\u30af\u3092\u5b9f\u884c\u3057\u30a8\u30e9\u30fc\u3092\u30bb\u30c3\u30c8\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u305f\n\n```\nclass Error < RuntimeError\n  def initialize(message = nil)\n    @message = message\n    super(message)\n  end\n  attr_accessor :message\nend\n\nclass Optional2\n  attr_reader :error, :value\n\n  def initialize(error, value)\n    @error = error\n    @value = value\n  end\n  def self.of(value)\n    Optional2.new(nil, value)\n  end\n  def self.empty(message = nil)\n    Optional2.new(Error.new(message), nil)\n  end\n  def empty?\n    @value.nil? || @value.empty?\n  end\n  def each\n    unless self.empty?\n      yield\n    end\n    self\n  end\n  def if_empty\n    if self.empty? && (self.error.nil? || self.error.message.nil?)\n      Optional2.empty(yield)\n    else\n      self\n    end\n  end\n  def filter\n    if self.empty?\n      self\n    elsif yield @value\n      self\n    else\n      Optional2.empty\n    end\n  end\n  def map\n    if self.empty?\n      self\n    else\n      Optional2.of(yield @value)\n    end\n  end\n  def flat_map\n    if self.empty?\n      self\n    else\n      yield @value\n    end\n  end\n\n  def inspect\n    if empty?\n      \"Optional2::EMPTY(#{@error.inspect})\"\n    else\n      \"Optional2.of(#{@value.inspect})\"\n    end\n  end\n  def ==(other)\n    @value == other.value &&\n    @error == other.error\n  end\nend\n\ndef foo(value, f, g)\n  value.filter {|x| f.call(x) }\n       .if_empty {\n          \"error f()\"\n        }\n       .filter {|x| g.call(x) }\n       .if_empty {\n          \"error g()\"\n        }\nend\n\ndef assert(expect, actual)\n  if expect != actual\n    puts <<-END\n      at #{caller(1)[0]}\n      expect: #{expect.inspect}\n      actual: #{actual.inspect}\n    END\n  end\nend\n\np 1; assert Optional2.of(\"a\"),            foo(Optional2.of(\"a\"), proc{true }, proc{true })\np 2; assert Optional2.empty(\"error f()\"), foo(Optional2.of(nil), proc{false}, proc{false})\np 3; assert Optional2.empty(\"error f()\"), foo(Optional2.of(\"a\"), proc{false}, proc{true })\np 4; assert Optional2.empty(\"error g()\"), foo(Optional2.of(\"a\"), proc{true }, proc{false})\np 5; assert Optional2.empty(\"error f()\"), foo(Optional2.of(\"a\"), proc{false}, proc{false})\n```\n\n\u3053\u308c\u3067\u76ee\u7684\u306f\u9054\u6210\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u306f\u4e00\u822c\u7684\u306a\u89e3\u653e\u306a\u306e\u3060\u308d\u3046\u304b\uff1f\n\n\u4e00\u5fdc\u3001\u6700\u521d\u306e\u547d\u984c\u306e\u3082\u3053\u308c\u3067\u9054\u6210\u3059\u308b\n\n```\ndef foo(value)\n  value.map {|x| x.select {|v| v % 2 == 0 }}\n       .if_empty {\n          \"\u5076\u6570\u306e\u5024\u304c\u306a\u3044\u3088\uff01\"\n        }\n       .map {|x| x.select {|v| v > 5 }}\n       .if_empty {\n          \"5\u3088\u308a\u5927\u304d\u3044\u5024\u304c\u306a\u3044\u3088\"\n        }\nend\n\np foo Optional2.of([1,2,3,4,5,6])\n```\n\n\u3053\u306e\u3001Optional2\u306e\u4e16\u754c\u304b\u3089\u5024\u307e\u305f\u306f\u30a8\u30e9\u30fc\u3092\u53d6\u308a\u51fa\u3059\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u3069\u3046\u3059\u308b\u3079\u304d\u304b\u307e\u3067\u306f\u8003\u3048\u3066\u306a\u3044\u3002\n"}