{"tags": ["\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0", "docker", "Datadog"], "context": " More than 1 year has passed since last update.\u4eca\u56de\u306e\u30dd\u30b9\u30c8\u306f\u3001AWS-UG \u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u306e12/22\u65e5\u30dd\u30b9\u30c8\u3067\u3059\u3002\nECS\u306e\u30d7\u30ec\u30d3\u30e5\u30fc\u306f\u7121\u4e8b\u306b\u5165\u624b\u3067\u304d\u305f\u306e\u3067\u3059\u304c\u3001@spesnova\u6c0f\u306b\u3088\u308a\u300cDatadog \u3067 Docker \u30b3\u30f3\u30c6\u30ca\u3092\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u300d\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u65b9\u6cd5\u3092\u4f7f\u3063\u3066\u30e1\u30c8\u30ea\u30af\u30b9\u304c\u53ce\u96c6\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u8a3c\u3067\u304d\u308b\u307b\u3069\u6642\u9593\u304c\u53d6\u308c\u306a\u304b\u3063\u305f\u3002\u306a\u306e\u3067\u3001\u304a\u984c\u3092\u5909\u66f4\u3057\u3066Datadog Agent\u304cDcoker\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u3069\u306e\u3088\u3046\u306b\u96c6\u3081\u3066\u3044\u308b\u304b\u3092\u63a2\u3063\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002(\u3054\u3081\u3093\u306a\u3055\u3044\u3002)\u305d\u3057\u3066\u5148\u306e\u30dd\u30b9\u30c8\u3092\u8aad\u3080\u969b\u306e\u30b5\u30d7\u30ea\u30e1\u30f3\u30c8\u3068\u3057\u3066\u3001\u76ee\u3092\u901a\u3057\u3066\u3082\u3089\u3048\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\nDcoker\u306e\u30e1\u30c8\u30ea\u30af\u30b9\nDocker\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u306b\u95a2\u3057\u3066\u8a73\u3057\u304f\u66f8\u304b\u308c\u3066\u3044\u308b\u30c9\u30ad\u30a3\u30e1\u30f3\u30c8\u306f\u3001\u300cRuntime Metrics\u300d\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u8981\u306f\u3001\u300cLinux\u30b3\u30f3\u30c6\u30ca\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u306f\u3001cgroup\u3092\u901a\u3057\u3066\u516c\u958b\u3055\u308c\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3060\u3069\u601d\u3044\u307e\u3059\u3002\u5f93\u3063\u3066\u6b63\u3057\u3044\u30de\u30a6\u30f3\u30c8\u30dd\u30a4\u30f3\u30c8\u3067\u3001\u7591\u4f3c\uff08Pseudo\uff09\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\u3053\u3068\u3067\u3001\u30b3\u30f3\u30c6\u30ca\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u304c\u96c6\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\nDatadog Agent\u306b\u5185\u5305\u3055\u308c\u3066\u3044\u308bDocker Integration\u306e\u5b9f\u614b\nDatadog\u304c\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u53ce\u96c6\u306b\u4f7f\u3063\u3066\u3044\u308bAgent\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2(Datadog Agent)\u306f\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306a\u306e\u3067github\u306eDataDog/dd-agent\u3067\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u4e2d\u3067\u3001checks.d -> docker.py\u3068\u79fb\u52d5\u3059\u308b\u3068Dokcer Integration \u306e\u30b3\u30a2\u306a\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u8ee2\u9001\u306f\u3001AgentCheck\u3092\u4f7f\u3063\u3066\nDatadog Agent\u304b\u3089\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u9001\u4fe1\u3059\u308b\u306b\u306f2\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3089\u306f\u3001AgentCheck\u3068DogStatsd\u3067\u3059\u3002\n\u3069\u3061\u3089\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3063\u3066\u3082\u30e1\u30c8\u30ea\u30af\u30b9\u3068\u30a4\u30d9\u30f3\u30c8\u306e\u8ee2\u9001\u306f\u3067\u304d\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e14\u884c\u76ee\u3067\u6b21\u306e\u3088\u3046\u306bAgentCheck\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u8aad\u307f\u8fbc\u307f\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001Docker\u306e\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001DogStatsD\u7d4c\u7531\u3067\u306f\u306a\u304fAgentCheck\u7d4c\u7531\u3067\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8ee2\u9001\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002AgentCheck\u3067\u306e\u3001\u30e1\u30c8\u30ea\u30af\u30b9\u8ee2\u9001\u306e\u8a73\u7d30\u306f\u3001\u300cWriting an Agent Check\u300d\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002(\u65e5\u672c\u8a9e\u8a33)\n# project\nfrom checks import AgentCheck\n\n\nDocker\u306b\u95a2\u3059\u308b\u60c5\u5831\u30923\u30bf\u30a4\u30d7\u306b\u5206\u3051\u3066\u8ee2\u9001\n\u5148\u306b\u3082\u8ff0\u3079\u305f\u3088\u3046\u306b\u3001\u4eca\u56de\u306fAgentCheck\u3092\u4f7f\u3063\u3066\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8ee2\u9001\u3057\u3066\u3044\u308b\u306e\u3067\u3001AgentCheck\u3092\u627f\u7d99\u3057\u305f\u30af\u30e9\u30b9\u306e\u4e2d\u3067\u3001check\u95a2\u6570\u3092\u3055\u304c\u3057\u3066\u307f\u308b\u3002\u3053\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3056\u3063\u3068\u773a\u3081\u3066\u307f\u308b\u3068\u30013\u3064\u306e\u30bf\u30a4\u30d7\u306e\u60c5\u5831\u3092\u8ee2\u9001\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\ndef check(self, instance):\n  # Report image metrics\n  self._count_images(instance)\n\n  # Get the list of containers and the index of their names\n  containers, ids_to_names = self._get_and_count_containers(instance)\n\n  # Report container metrics from cgroups\n  self._report_containers_metrics(containers, instance)\n\n  # Send events from Docker API\n  if instance.get('collect_events', True):\n    self._process_events(instance, ids_to_names)\n\n\u30af\u30e9\u30b9\u5185\u306e\u95a2\u6570\u3092\u8ffd\u3063\u3066\u3044\u304b\u306a\u3044\u3068\u3001\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u5206\u304b\u308a\u3065\u3089\u3044\u3068\u601d\u3046\u304c\u3001\u5927\u307e\u304b\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u60c5\u5831\u3092\u9001\u4fe1\u3057\u3066\u3044\u308b\u3002\n\n\u30b3\u30f3\u30c6\u30ca\u30a4\u30e1\u30fc\u30b8\u306b\u95a2\u3059\u308b\u60c5\u5831\n\u30b3\u30f3\u30c6\u30ca\u306b\u95a2\u9023\u3057\u305f\u30e1\u30c8\u30ea\u30af\u30b9\u60c5\u5831\n\n\nmemory\ncpu\n\u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30a3\u30b9\u30af\u30b5\u30a4\u30ba (\u57fa\u672cFalse\u3067\u505c\u6b62\u3057\u3066\u3044\u307e\u3059)\n\u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b(\u8d77\u52d5 or \u505c\u6b62)\n\n\n\u30b3\u30f3\u30c6\u30ca\u306b\u95a2\u9023\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u60c5\u5831 (\u72b6\u614b\u306e\u5909\u5316)\n\n\n\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u53ce\u96c6\u9805\u76ee\u306fsub-cgroups\u306e\u60c5\u5831\u306f\u542b\u307e\u306a\u3044\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e18\u884c\u76ee~48\u884c\u76ee\u3042\u305f\u308a\u3068\u53ce\u96c6\u3057\u3066\u3044\u308b\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5148\u306b\u7d39\u4ecb\u3057\u305fDocker\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3044\u308b\u3068\u3001tatal_\u3067sub-cgroups\u306e\u60c5\u5831\u3082cgroup\u3067\u53ce\u53d6\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u3002\u3057\u304b\u3057\u306a\u304c\u3089Datadog\u306e\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001\u305d\u308c\u3089\u3092\u3042\u3048\u3066\u53d6\u308a\u6271\u308f\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002(\u521d\u671f\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u306f\u53ce\u96c6\u3057\u8ee2\u9001\u3057\u3066\u3044\u305f\u5f62\u8de1\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u6539\u5b9a\u306e\u904e\u7a0b\u3067\u306a\u304f\u306a\u3063\u3066\u3044\u3063\u305f\u3088\u3046\u3067\u3059\u3002)\u500b\u4eba\u7684\u306a\u898b\u89e3\u3067\u3059\u304c\u3001Datadog\u81ea\u4f53\u304c\u3001\u30bf\u30b0\u306b\u3088\u308b\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u96c6\u8a08(\u7d71\u8a08)\u6a5f\u80fd\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001total_ \u9805\u76ee\u3092\u53d6\u308a\u6271\u308f\u306a\u3044\u3068\u5224\u65ad\u3057\u305f\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\nCGROUP_METRICS = [\n    {\n        \"cgroup\": \"memory\",\n        \"file\": \"memory.stat\",\n        \"metrics\": {\n            # Default metrics\n            \"cache\": (\"docker.mem.cache\", \"gauge\", True),\n            \"rss\": (\"docker.mem.rss\", \"gauge\", True),\n            \"swap\": (\"docker.mem.swap\", \"gauge\", True),\n            # Optional metrics\n            \"active_anon\": (\"docker.mem.active_anon\", \"gauge\", False),\n            \"active_file\": (\"docker.mem.active_file\", \"gauge\", False),\n            \"inactive_anon\": (\"docker.mem.inactive_anon\", \"gauge\", False),\n            \"inactive_file\": (\"docker.mem.inactive_file\", \"gauge\", False),\n            \"mapped_file\": (\"docker.mem.mapped_file\", \"gauge\", False),\n            \"pgfault\": (\"docker.mem.pgfault\", \"rate\", False),\n            \"pgmajfault\": (\"docker.mem.pgmajfault\", \"rate\", False),\n            \"pgpgin\": (\"docker.mem.pgpgin\", \"rate\", False),\n            \"pgpgout\": (\"docker.mem.pgpgout\", \"rate\", False),\n            \"unevictable\": (\"docker.mem.unevictable\", \"gauge\", False),\n        }\n    },\n    {\n        \"cgroup\": \"cpuacct\",\n        \"file\": \"cpuacct.stat\",\n        \"metrics\": {\n            \"user\": (\"docker.cpu.user\", \"rate\", True),\n            \"system\": (\"docker.cpu.system\", \"rate\", True),\n        },\n    },\n]\n\n\u5c1a\u3001Docker\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3088\u308b\u3068\u3001cgroup\u3092\u4ecb\u3057\u3066\u30e1\u30e2\u30ea\u30fc\u306b\u95a2\u3059\u308b\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u53ce\u53d6\u3059\u308b\u969b\u306b\u306f\u3001\u6b21\u306e\u30ab\u30fc\u30cd\u30eb\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u554f\u984c\u3067\u3001\u591a\u304f\u306e\u30c7\u30a3\u30b9\u30c8\u30ed\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7121\u52b9\u5316\u3055\u308c\u3066\u3044\u308b\u3068\u306e\u3053\u3068\u3067\u3059\u3002\ncgroup_enable=memory swapaccount=1\n\n\nNote that the memory control group adds a little overhead, because it does very fine-grained accounting of the memory usage on your host. Therefore, many distros chose to not enable it by default. Generally, to enable it, all you have to do is to add some kernel command-line parameters: cgroup_enable=memory swapaccount=1.\n\n\nmemory\u95a2\u9023\u30e1\u30c8\u30ea\u30af\u30b9\n\u5404\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u8a73\u7d30\u306b\u95a2\u3057\u3066\u306f\u3001Dcoker\u306erunning metrics\u306e\u5185\u5bb9\u3092\u629c\u7c8b\u3092\u53c2\u7167\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u3002\ncache: Datadog\u5185 [docker.mem.cache]\n\nthe amount of memory used by the processes of this control group that can be associated precisely with a block on a block device. When you read from and write to files on disk, this amount will increase. This will be the case if you use \"conventional\" I/O (open, read, write syscalls) as well as mapped files (with mmap). It also accounts for the memory used by tmpfs mounts, though the reasons are unclear.\n\nrss: Datadog\u5185 [docker.mem.cache]\n\nthe amount of memory that doesn't correspond to anything on disk: stacks, heaps, and anonymous memory maps.\n\nmapped_file: Datadog\u5185 [docker.mem.mapped_file]\n\nindicates the amount of memory mapped by the processes in the control group. It doesn't give you information about how much memory is used; it rather tells you how it is used.\n\npgfault and pgmajfault: Datadog\u5185 [docker.mem.pgfault] and [docker.mem.pgmajfault]\n\nindicate the number of times that a process of the cgroup triggered a \"page fault\" and a \"major fault\", respectively. A page fault happens when a process accesses a part of its virtual memory space which is nonexistent or protected. The former can happen if the process is buggy and tries to access an invalid address (it will then be sent a SIGSEGV signal, typically killing it with the famous Segmentation fault message). The latter can happen when the process reads from a memory zone which has been swapped out, or which corresponds to a mapped file: in that case, the kernel will load the page from disk, and let the CPU complete the memory access. It can also happen when the process writes to a copy-on-write memory zone: likewise, the kernel will preempt the process, duplicate the memory page, and resume the write operation on the process` own copy of the page. \"Major\" faults happen when the kernel actually has to read the data from disk. When it just has to duplicate an existing page, or allocate an empty page, it's a regular (or \"minor\") fault.\n\nswap: Datadog\u5185 [docker.mem.swap]\n\nthe amount of swap currently used by the processes in this cgroup.\n\nactive_anon and inactive_anon: Datadog\u5185 [docker.mem.active_anon] and [docker.mem.inactive_anon]\n\nthe amount of anonymous memory that has been identified has respectively active and inactive by the kernel. \"Anonymous\" memory is the memory that is not linked to disk pages. In other words, that's the equivalent of the rss counter described above. In fact, the very definition of the rss counter is active_anon + inactive_anon - tmpfs (where tmpfs is the amount of memory used up by tmpfs filesystems mounted by this control group). Now, what's the difference between \"active\" and \"inactive\"? Pages are initially \"active\"; and at regular intervals, the kernel sweeps over the memory, and tags some pages as \"inactive\". Whenever they are accessed again, they are immediately retagged \"active\". When the kernel is almost out of memory, and time comes to swap out to disk, the kernel will swap \"inactive\" pages.\n\nactive_file and inactive_file: Datadog\u5185 [docker.mem.active_file] and [docker.mem.inactive_file]\n\ncache memory, with active and inactive similar to the anon memory above. The exact formula is cache = active_file + inactive_file + tmpfs. The exact rules used by the kernel to move memory pages between active and inactive sets are different from the ones used for anonymous memory, but the general principle is the same. Note that when the kernel needs to reclaim memory, it is cheaper to reclaim a clean (=non modified) page from this pool, since it can be reclaimed immediately (while anonymous pages and dirty/modified pages have to be written to disk first).\n\nunevictable: Datadog\u5185 [docker.mem.unevictable]\n\nthe amount of memory that cannot be reclaimed; generally, it will account for memory that has been \"locked\" with mlock. It is often used by crypto frameworks to make sure that secret keys and other sensitive material never gets swapped out to disk.\n\nmemory and memsw limits: Datadog\u5185 [docker.mem.memory] and [docker.mem.memsw]\n\nThese are not really metrics, but a reminder of the limits applied to this cgroup. The first one indicates the maximum amount of physical memory that can be used by the processes of this control group; the second one indicates the maximum amount of RAM+swap.\n\n\ncpu\u95a2\u9023\u30e1\u30c8\u30ea\u30af\u30b9\nuser: Datadog\u5185 [docker.cpu.user]\n\nthe time during which the processes were in direct control of the CPU (i.e. executing process code)\n\nCPU\u304c\u30d7\u30ed\u30bb\u30b9\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u6642\u9593\u3002\n\nsystem: Datadog\u5185 [docker.cpu.system]\n\nthe time during which the CPU was executing system calls on behalf of those processes\n\n\u30d7\u30ec\u30bb\u30b9\u304csystem calls\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u6642\u9593\u3002\n\nunit of time:\n\nThose times are expressed in ticks of 1/100th of a second.\n\n\u6642\u9593\u306fticks\u3067\u8868\u73fe\u3057\u3055\u308c\u3066\u3044\u3066\u30011tick=1/100\u79d2\u3002\n\n\n\u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30a3\u30b9\u30af\u30b5\u30a4\u30ba\nDatadog\u5185 [docker.disk.size]\n\u30b3\u30f3\u30c6\u30ca\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30af\u30b5\u30a4\u30ba\u3082\u30b3\u30f3\u30c6\u30ca\u306b\u95a2\u9023\u3057\u305f\u30e1\u30c8\u30ea\u30af\u30b9\u3068\u3057\u3066\u8ee2\u9001\u3055\u308c\u3066\u3044\u308b\u300250-53\u884c\u76ee\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3001\nDOCKER_METRICS = {\n\"SizeRw\": (\"docker.disk.size\", \"gauge\"),\n}\n\n221-223\u884c\u76ee\u3067\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3001\nfor key, (dd_key, metric_type) in DOCKER_METRICS.iteritems():\n  if key in container:\n    getattr(self, metric_type)(dd_key, int(container[key]), tags=container_tags)\n\n159-163\u884c\u76ee\u3067\u3001\u57fa\u672c\u7684\u306e\u53ce\u96c6\u3057\u306a\u3044\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u3002Docker\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8a18\u8ff0\u306b\u3088\u308b\u3068\u3001Docker\u81ea\u4f53\u306bbug\u304c\u3042\u308a\u3001\u30c7\u30a3\u30b9\u30af\u30b5\u30a4\u30ba\u3092\u53ce\u96c6\u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u3089\u3057\u3044\u3002(\u7279\u306bDocker1.2\u306e\u5834\u5408\u306f\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044\uff01)\nwith_size = instance.get('collect_container_size', False)\n\nservice_check_name = 'docker.service_up'\ntry:\n  running_containers = self._get_containers(instance, with_size=with_size)\n\n\n\u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b\nDatadog\u5185 [docker.containers.running] and [docker.containers.stopped]\n\u66f4\u306b\u3001\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u4ed5\u5206\u3051\u3057\u3066\u3044\u308b\u95a2\u6570\u5185(179-183\u884c\u76ee)\u3067\u3001\u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b\u306e\u30bf\u30b0\u3082\u4ed8\u4e0e\u3057\u3066\u3044\u307e\u3059\u3002Datadog\u306e\u30bf\u30b0\u306b\u3088\u308b\u96c6\u8a08\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3001\u30a4\u30f3\u30d5\u30e9\u5185\u306e\u8d77\u52d5\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u308a\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u30dc\u30fc\u30c9\u8a2d\u5b9a\u306b\u6d3b\u7528\u3059\u308b\u306e\u3060\u3068\u601d\u308f\u308c\u308b\u3002\nif container['Id'] in running_containers_ids:\n  self.set(\"docker.containers.running\", container['Id'], tags=container_tags)\nelse:\n  self.set(\"docker.containers.stopped\", container['Id'], tags=container_tags)\n\n\nevent \u306b\u95a2\u3057\u3066\n\u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b\u9077\u79fb\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u95a2\u3057\u3066\u3082\u3001\u30c7\u30a3\u30d5\u30a9\u30eb\u30c8\u3067\u8ee2\u9001\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u72b6\u614b\u9077\u79fb\u60c5\u5831\u306b\u95a2\u3057\u3066\u306f\u3001\u4e0d\u8981\u306a\u30b1\u30fc\u30b9\u3082\u3042\u308b\u306e\u3067\u3001conf.yaml\u30d5\u30a1\u30a4\u30eb\u3067\u7121\u52b9\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\n\u3053\u306e\u30a4\u30d9\u30f3\u30c8\u60c5\u5831\u306b\u95a2\u3057\u3066\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u69cb\u6210(294-302\u884c\u76ee)\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u3069\u306e\u3088\u3046\u306a\u5185\u5bb9\u3092\u6301\u3063\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u304cDatadog\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u5206\u304b\u308a\u307e\u3059\u3002\nevents.append({\n  'timestamp': max_timestamp,\n  'host': self.hostname,\n  'event_type': EVENT_TYPE,\n  'msg_title': msg_title,\n  'msg_text': msg_body,\n  'source_type_name': EVENT_TYPE,\n  'event_object': 'docker:%s' % image_name,\n  })\n\n16\u884c\u660e\u3067EVENT_TYPE\u306f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3002\nEVENT_TYPE = SOURCE_TYPE_NAME = 'docker'\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u69cb\u6210\u306e\u8a73\u7d30\u3092\u307f\u3066\u307f\u308b\u3068\u306a\u3093\u3068\u306a\u3093\u3068\u306a\u304f\u60f3\u50cf\u304c\u3067\u304d\u308b\u306e\u3060\u304c\u3001Datadog\u306e\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u3067\u306f\"source:docker\"\u3068\"msg_text\u306e\u6587\u5b57\u5217\"(\u30a4\u30e1\u30fc\u30b8\u540d, host\u540d, \u72b6\u614b)\u3092\u7d44\u307f\u308f\u305b\u3066\u3001\u76ee\u7684\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u691c\u7d22\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\nmsg_title = \"%s %s on %s\" % (image_name, status_text, self.hostname)\nmsg_body = (\"%%%\\n\"\n    \"{image_name} {status} on {hostname}\\n\"\n    \"```\\n{status_changes}\\n```\\n\"\n    \"%%%\").format(\n        image_name=image_name,\n        status=status_text,\n        hostname=self.hostname,\n        status_changes=\"\\n\".join(\n            [\"%s \\t%s\" % (change[1].upper(), change[0]) for change in status_change])\n)\n\n\n\u307e\u3068\u3081\u3002\n\u3056\u3063\u3068\u3001Datadog Agent \u5185\u306edocker.py\u773a\u3081\u3066\u3001\u3069\u3093\u306a\u60c5\u5831\u304c\u53ce\u96c6\u3067\u304d\u308b\u304b\u898b\u3066\u304d\u307e\u3057\u305f\u3002\u30c7\u30a3\u30d5\u30a9\u30eb\u30c8\u306e\u72b6\u614b\u3067\u3082\u52d5\u7684\u306b\u52d5\u304d\u56de\u308bDocker\u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b\u3092\u30bf\u30b0\u3092\u4f7f\u3063\u3066\u96c6\u7d04\u3057\u306a\u304c\u3089\u628a\u63e1\u3067\u304d\u308b\u60c5\u5831\u306e\u5185\u5bb9\u304c\u5206\u304b\u3063\u305f\u6c17\u304c\u3057\u307e\u3059\u3002\n\u3053\u306e\u5148\u3001\u66f4\u306b\u9ad8\u5ea6\u306a\u30e1\u30c8\u30ea\u30af\u30b9\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001\u5404\u30b3\u30f3\u30c6\u30ca\u30fc\u304b\u3089\u3001Datadog Agent\u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\u30b3\u30f3\u30c6\u30fc\u30ca\u30fc\u5185\u306eDogStasD\u7d4c\u7531\u3067\u3001\u30e1\u30c8\u30ea\u30af\u30b9\u3084\u30a4\u30d9\u30f3\u30c8\u3092\u8ee2\u9001\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3082\u5206\u304b\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\u3053\u3053\u304b\u3089\u5148\u306f\u3001\u30a4\u30f3\u30d5\u30e9\u306e\u5168\u4f53\u306e\u69cb\u6210\u3084AWS EC2\u4e0a\u3067Docker\u3092\u4f7f\u3063\u3066\u3044\u308b\u76ee\u7684\u306b\u3082\u3088\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u30b1\u30fc\u30b9\u30d0\u30a4\u30b1\u30fc\u30b9\u3067\u30cb\u30fc\u30ba\u304c\u767a\u751f\u3057\u305f\u969b\u306b\u518d\u691c\u8a0e\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u60c5\u5831\u3092\u5143\u306b\u3001EC2\u3084\u3001ECS\u4e0a\u3067\u4f7f\u3063\u3066\u3044\u308bDcoker\u306e\u76e3\u8996\u304c\u5c11\u3057\u3067\u3082\u3001\u697d\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n[\u4eca\u56de\u306e\u30dd\u30b9\u30c8\u306f\u3001AWS-UG \u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\u306e12/22\u65e5\u30dd\u30b9\u30c8\u3067\u3059\u3002](http://www.adventar.org/calendars/587)\n\nECS\u306e\u30d7\u30ec\u30d3\u30e5\u30fc\u306f\u7121\u4e8b\u306b\u5165\u624b\u3067\u304d\u305f\u306e\u3067\u3059\u304c\u3001[@spesnova](https://twitter.com/spesnova)\u6c0f\u306b\u3088\u308a[\u300cDatadog \u3067 Docker \u30b3\u30f3\u30c6\u30ca\u3092\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u300d](http://qiita.com/spesnova/items/b1f2cc4e33ddf7cea285)\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u65b9\u6cd5\u3092\u4f7f\u3063\u3066\u30e1\u30c8\u30ea\u30af\u30b9\u304c\u53ce\u96c6\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u8a3c\u3067\u304d\u308b\u307b\u3069\u6642\u9593\u304c\u53d6\u308c\u306a\u304b\u3063\u305f\u3002\u306a\u306e\u3067\u3001\u304a\u984c\u3092\u5909\u66f4\u3057\u3066Datadog Agent\u304cDcoker\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u3069\u306e\u3088\u3046\u306b\u96c6\u3081\u3066\u3044\u308b\u304b\u3092\u63a2\u3063\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002(\u3054\u3081\u3093\u306a\u3055\u3044\u3002)\u305d\u3057\u3066\u5148\u306e\u30dd\u30b9\u30c8\u3092\u8aad\u3080\u969b\u306e\u30b5\u30d7\u30ea\u30e1\u30f3\u30c8\u3068\u3057\u3066\u3001\u76ee\u3092\u901a\u3057\u3066\u3082\u3089\u3048\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n## Dcoker\u306e\u30e1\u30c8\u30ea\u30af\u30b9\n\nDocker\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u306b\u95a2\u3057\u3066\u8a73\u3057\u304f\u66f8\u304b\u308c\u3066\u3044\u308b\u30c9\u30ad\u30a3\u30e1\u30f3\u30c8\u306f\u3001[\u300cRuntime Metrics\u300d](http://docs.docker.com/v1.4/articles/runmetrics/)\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u8981\u306f\u3001\u300cLinux\u30b3\u30f3\u30c6\u30ca\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u306f\u3001cgroup\u3092\u901a\u3057\u3066\u516c\u958b\u3055\u308c\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u3060\u3069\u601d\u3044\u307e\u3059\u3002\u5f93\u3063\u3066\u6b63\u3057\u3044\u30de\u30a6\u30f3\u30c8\u30dd\u30a4\u30f3\u30c8\u3067\u3001\u7591\u4f3c\uff08Pseudo\uff09\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\u3053\u3068\u3067\u3001\u30b3\u30f3\u30c6\u30ca\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u304c\u96c6\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n![runtime_metrics.png](https://qiita-image-store.s3.amazonaws.com/0/53101/f421b235-c27c-5024-a76f-d5c0d29e10c7.png \"runtime_metrics.png\")\n\n\n## Datadog Agent\u306b\u5185\u5305\u3055\u308c\u3066\u3044\u308bDocker Integration\u306e\u5b9f\u614b\n\nDatadog\u304c\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u53ce\u96c6\u306b\u4f7f\u3063\u3066\u3044\u308bAgent\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2(Datadog Agent)\u306f\u3001\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u306a\u306e\u3067github\u306e[DataDog/dd-agent](https://github.com/DataDog/dd-agent)\u3067\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u4e2d\u3067\u3001[`checks.d` -> `docker.py`](https://github.com/DataDog/dd-agent/blob/master/checks.d/docker.py)\u3068\u79fb\u52d5\u3059\u308b\u3068Dokcer Integration \u306e\u30b3\u30a2\u306a\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n### \u30e1\u30c8\u30ea\u30af\u30b9\u306e\u8ee2\u9001\u306f\u3001AgentCheck\u3092\u4f7f\u3063\u3066\n\nDatadog Agent\u304b\u3089\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u9001\u4fe1\u3059\u308b\u306b\u306f2\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3089\u306f\u3001[AgentCheck](http://docs.datadoghq.com/guides/agent_checks/)\u3068[DogStatsd](http://docs.datadoghq.com/guides/dogstatsd/)\u3067\u3059\u3002\n\u3069\u3061\u3089\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3063\u3066\u3082\u30e1\u30c8\u30ea\u30af\u30b9\u3068\u30a4\u30d9\u30f3\u30c8\u306e\u8ee2\u9001\u306f\u3067\u304d\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e14\u884c\u76ee\u3067\u6b21\u306e\u3088\u3046\u306bAgentCheck\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u8aad\u307f\u8fbc\u307f\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u304b\u3089\u3001Docker\u306e\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001DogStatsD\u7d4c\u7531\u3067\u306f\u306a\u304fAgentCheck\u7d4c\u7531\u3067\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8ee2\u9001\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002AgentCheck\u3067\u306e\u3001\u30e1\u30c8\u30ea\u30af\u30b9\u8ee2\u9001\u306e\u8a73\u7d30\u306f\u3001[\u300cWriting an Agent Check\u300d](http://docs.datadoghq.com/guides/agent_checks/)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002[(\u65e5\u672c\u8a9e\u8a33)](http://221.249.136.53/ja/guides/agent_checks/)\n\n```python\n# project\nfrom checks import AgentCheck\n```\n\n### Docker\u306b\u95a2\u3059\u308b\u60c5\u5831\u30923\u30bf\u30a4\u30d7\u306b\u5206\u3051\u3066\u8ee2\u9001\n\n\u5148\u306b\u3082\u8ff0\u3079\u305f\u3088\u3046\u306b\u3001\u4eca\u56de\u306fAgentCheck\u3092\u4f7f\u3063\u3066\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8ee2\u9001\u3057\u3066\u3044\u308b\u306e\u3067\u3001AgentCheck\u3092\u627f\u7d99\u3057\u305f\u30af\u30e9\u30b9\u306e\u4e2d\u3067\u3001check\u95a2\u6570\u3092\u3055\u304c\u3057\u3066\u307f\u308b\u3002\u3053\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3056\u3063\u3068\u773a\u3081\u3066\u307f\u308b\u3068\u30013\u3064\u306e\u30bf\u30a4\u30d7\u306e\u60c5\u5831\u3092\u8ee2\u9001\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n```python\ndef check(self, instance):\n  # Report image metrics\n  self._count_images(instance)\n\n  # Get the list of containers and the index of their names\n  containers, ids_to_names = self._get_and_count_containers(instance)\n\n  # Report container metrics from cgroups\n  self._report_containers_metrics(containers, instance)\n\n  # Send events from Docker API\n  if instance.get('collect_events', True):\n    self._process_events(instance, ids_to_names)\n```\n\n\u30af\u30e9\u30b9\u5185\u306e\u95a2\u6570\u3092\u8ffd\u3063\u3066\u3044\u304b\u306a\u3044\u3068\u3001\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u5206\u304b\u308a\u3065\u3089\u3044\u3068\u601d\u3046\u304c\u3001\u5927\u307e\u304b\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u60c5\u5831\u3092\u9001\u4fe1\u3057\u3066\u3044\u308b\u3002\n\n1. \u30b3\u30f3\u30c6\u30ca\u30a4\u30e1\u30fc\u30b8\u306b\u95a2\u3059\u308b\u60c5\u5831\n2. \u30b3\u30f3\u30c6\u30ca\u306b\u95a2\u9023\u3057\u305f\u30e1\u30c8\u30ea\u30af\u30b9\u60c5\u5831\n    - memory\n    - cpu\n    - \u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30a3\u30b9\u30af\u30b5\u30a4\u30ba (\u57fa\u672cFalse\u3067\u505c\u6b62\u3057\u3066\u3044\u307e\u3059)\n    - \u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b(\u8d77\u52d5 or \u505c\u6b62)\n3. \u30b3\u30f3\u30c6\u30ca\u306b\u95a2\u9023\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u60c5\u5831 (\u72b6\u614b\u306e\u5909\u5316)\n\n### \u30e1\u30c8\u30ea\u30af\u30b9\u306e\u53ce\u96c6\u9805\u76ee\u306fsub-cgroups\u306e\u60c5\u5831\u306f\u542b\u307e\u306a\u3044\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e18\u884c\u76ee~48\u884c\u76ee\u3042\u305f\u308a\u3068\u53ce\u96c6\u3057\u3066\u3044\u308b\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5148\u306b\u7d39\u4ecb\u3057\u305fDocker\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u3044\u308b\u3068\u3001tatal_\u3067sub-cgroups\u306e\u60c5\u5831\u3082cgroup\u3067\u53ce\u53d6\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u3002\u3057\u304b\u3057\u306a\u304c\u3089Datadog\u306e\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001\u305d\u308c\u3089\u3092\u3042\u3048\u3066\u53d6\u308a\u6271\u308f\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002(\u521d\u671f\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u306f\u53ce\u96c6\u3057\u8ee2\u9001\u3057\u3066\u3044\u305f\u5f62\u8de1\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u6539\u5b9a\u306e\u904e\u7a0b\u3067\u306a\u304f\u306a\u3063\u3066\u3044\u3063\u305f\u3088\u3046\u3067\u3059\u3002)\u500b\u4eba\u7684\u306a\u898b\u89e3\u3067\u3059\u304c\u3001Datadog\u81ea\u4f53\u304c\u3001\u30bf\u30b0\u306b\u3088\u308b\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u96c6\u8a08(\u7d71\u8a08)\u6a5f\u80fd\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001total_ \u9805\u76ee\u3092\u53d6\u308a\u6271\u308f\u306a\u3044\u3068\u5224\u65ad\u3057\u305f\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n```python\nCGROUP_METRICS = [\n    {\n        \"cgroup\": \"memory\",\n        \"file\": \"memory.stat\",\n        \"metrics\": {\n            # Default metrics\n            \"cache\": (\"docker.mem.cache\", \"gauge\", True),\n            \"rss\": (\"docker.mem.rss\", \"gauge\", True),\n            \"swap\": (\"docker.mem.swap\", \"gauge\", True),\n            # Optional metrics\n            \"active_anon\": (\"docker.mem.active_anon\", \"gauge\", False),\n            \"active_file\": (\"docker.mem.active_file\", \"gauge\", False),\n            \"inactive_anon\": (\"docker.mem.inactive_anon\", \"gauge\", False),\n            \"inactive_file\": (\"docker.mem.inactive_file\", \"gauge\", False),\n            \"mapped_file\": (\"docker.mem.mapped_file\", \"gauge\", False),\n            \"pgfault\": (\"docker.mem.pgfault\", \"rate\", False),\n            \"pgmajfault\": (\"docker.mem.pgmajfault\", \"rate\", False),\n            \"pgpgin\": (\"docker.mem.pgpgin\", \"rate\", False),\n            \"pgpgout\": (\"docker.mem.pgpgout\", \"rate\", False),\n            \"unevictable\": (\"docker.mem.unevictable\", \"gauge\", False),\n        }\n    },\n    {\n        \"cgroup\": \"cpuacct\",\n        \"file\": \"cpuacct.stat\",\n        \"metrics\": {\n            \"user\": (\"docker.cpu.user\", \"rate\", True),\n            \"system\": (\"docker.cpu.system\", \"rate\", True),\n        },\n    },\n]\n```\n\n\u5c1a\u3001Docker\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3088\u308b\u3068\u3001cgroup\u3092\u4ecb\u3057\u3066\u30e1\u30e2\u30ea\u30fc\u306b\u95a2\u3059\u308b\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u53ce\u53d6\u3059\u308b\u969b\u306b\u306f\u3001\u6b21\u306e\u30ab\u30fc\u30cd\u30eb\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u554f\u984c\u3067\u3001\u591a\u304f\u306e\u30c7\u30a3\u30b9\u30c8\u30ed\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u7121\u52b9\u5316\u3055\u308c\u3066\u3044\u308b\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\n```\b\ncgroup_enable=memory swapaccount=1\n```\n\n> Note that the memory control group adds a little overhead, because it does very fine-grained accounting of the memory usage on your host. Therefore, many distros chose to not enable it by default. Generally, to enable it, all you have to do is to add some kernel command-line parameters: `cgroup_enable=memory swapaccount=1`.\n\n#### memory\u95a2\u9023\u30e1\u30c8\u30ea\u30af\u30b9\n\n\u5404\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u8a73\u7d30\u306b\u95a2\u3057\u3066\u306f\u3001Dcoker\u306erunning metrics\u306e\u5185\u5bb9\u3092\u629c\u7c8b\u3092\u53c2\u7167\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u3002\n\n**cache: Datadog\u5185 [docker.mem.cache]**\n> the amount of memory used by the processes of this control group that can be associated precisely with a block on a block device. When you read from and write to files on disk, this amount will increase. This will be the case if you use \"conventional\" I/O (open, read, write syscalls) as well as mapped files (with mmap). It also accounts for the memory used by tmpfs mounts, though the reasons are unclear.\n\n**rss: Datadog\u5185 [docker.mem.cache]**\n> the amount of memory that doesn't correspond to anything on disk: stacks, heaps, and anonymous memory maps.\n\n**mapped_file: Datadog\u5185 [docker.mem.mapped_file]**\n> indicates the amount of memory mapped by the processes in the control group. It doesn't give you information about how much memory is used; it rather tells you how it is used.\n\n**pgfault and pgmajfault: Datadog\u5185 [docker.mem.pgfault] and [docker.mem.pgmajfault]**\n> indicate the number of times that a process of the cgroup triggered a \"page fault\" and a \"major fault\", respectively. A page fault happens when a process accesses a part of its virtual memory space which is nonexistent or protected. The former can happen if the process is buggy and tries to access an invalid address (it will then be sent a SIGSEGV signal, typically killing it with the famous Segmentation fault message). The latter can happen when the process reads from a memory zone which has been swapped out, or which corresponds to a mapped file: in that case, the kernel will load the page from disk, and let the CPU complete the memory access. It can also happen when the process writes to a copy-on-write memory zone: likewise, the kernel will preempt the process, duplicate the memory page, and resume the write operation on the process` own copy of the page. \"Major\" faults happen when the kernel actually has to read the data from disk. When it just has to duplicate an existing page, or allocate an empty page, it's a regular (or \"minor\") fault.\n\n**swap: Datadog\u5185 [docker.mem.swap]**\n> the amount of swap currently used by the processes in this cgroup.\n\n**active_anon and inactive_anon: Datadog\u5185 [docker.mem.active_anon] and [docker.mem.inactive_anon]**\n> the amount of anonymous memory that has been identified has respectively active and inactive by the kernel. \"Anonymous\" memory is the memory that is not linked to disk pages. In other words, that's the equivalent of the rss counter described above. In fact, the very definition of the rss counter is active_anon + inactive_anon - tmpfs (where tmpfs is the amount of memory used up by tmpfs filesystems mounted by this control group). Now, what's the difference between \"active\" and \"inactive\"? Pages are initially \"active\"; and at regular intervals, the kernel sweeps over the memory, and tags some pages as \"inactive\". Whenever they are accessed again, they are immediately retagged \"active\". When the kernel is almost out of memory, and time comes to swap out to disk, the kernel will swap \"inactive\" pages.\n\n**active_file and inactive_file: Datadog\u5185 [docker.mem.active_file] and [docker.mem.inactive_file]**\n> cache memory, with active and inactive similar to the anon memory above. The exact formula is cache = active_file + inactive_file + tmpfs. The exact rules used by the kernel to move memory pages between active and inactive sets are different from the ones used for anonymous memory, but the general principle is the same. Note that when the kernel needs to reclaim memory, it is cheaper to reclaim a clean (=non modified) page from this pool, since it can be reclaimed immediately (while anonymous pages and dirty/modified pages have to be written to disk first).\n\n**unevictable: Datadog\u5185 [docker.mem.unevictable]**\n> the amount of memory that cannot be reclaimed; generally, it will account for memory that has been \"locked\" with mlock. It is often used by crypto frameworks to make sure that secret keys and other sensitive material never gets swapped out to disk.\n\n**memory and memsw limits: Datadog\u5185 [docker.mem.memory] and [docker.mem.memsw]**\n> These are not really metrics, but a reminder of the limits applied to this cgroup. The first one indicates the maximum amount of physical memory that can be used by the processes of this control group; the second one indicates the maximum amount of RAM+swap.\n\n#### cpu\u95a2\u9023\u30e1\u30c8\u30ea\u30af\u30b9\n\n**user: Datadog\u5185 [docker.cpu.user]**\n> the time during which the processes were in direct control of the CPU (i.e. executing process code)\n\n    CPU\u304c\u30d7\u30ed\u30bb\u30b9\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u6642\u9593\u3002\n\n**system: Datadog\u5185 [docker.cpu.system]**\n> the time during which the CPU was executing system calls on behalf of those processes\n\n    \u30d7\u30ec\u30bb\u30b9\u304csystem calls\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u6642\u9593\u3002\n\nunit of time:\n> Those times are expressed in ticks of 1/100th of a second.\n\n    \u6642\u9593\u306fticks\u3067\u8868\u73fe\u3057\u3055\u308c\u3066\u3044\u3066\u30011tick=1/100\u79d2\u3002\n\n#### \u30b3\u30f3\u30c6\u30ca\u306e\u30c7\u30a3\u30b9\u30af\u30b5\u30a4\u30ba\n\n**Datadog\u5185 [docker.disk.size]**\n\n\u30b3\u30f3\u30c6\u30ca\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u30c7\u30a3\u30b9\u30af\u30b5\u30a4\u30ba\u3082\u30b3\u30f3\u30c6\u30ca\u306b\u95a2\u9023\u3057\u305f\u30e1\u30c8\u30ea\u30af\u30b9\u3068\u3057\u3066\u8ee2\u9001\u3055\u308c\u3066\u3044\u308b\u300250-53\u884c\u76ee\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3001\n\n```python\nDOCKER_METRICS = {\n\"SizeRw\": (\"docker.disk.size\", \"gauge\"),\n}\n```\n221-223\u884c\u76ee\u3067\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u306e\u3001\n\n```python\nfor key, (dd_key, metric_type) in DOCKER_METRICS.iteritems():\n  if key in container:\n    getattr(self, metric_type)(dd_key, int(container[key]), tags=container_tags)\n```\n\n159-163\u884c\u76ee\u3067\u3001\u57fa\u672c\u7684\u306e\u53ce\u96c6\u3057\u306a\u3044\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u3002Docker\u30a4\u30f3\u30c6\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8a18\u8ff0\u306b\u3088\u308b\u3068\u3001Docker\u81ea\u4f53\u306bbug\u304c\u3042\u308a\u3001\u30c7\u30a3\u30b9\u30af\u30b5\u30a4\u30ba\u3092\u53ce\u96c6\u3092\u6709\u52b9\u306b\u3059\u308b\u3068\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u3089\u3057\u3044\u3002(\u7279\u306bDocker1.2\u306e\u5834\u5408\u306f\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044\uff01)\n\n```python\nwith_size = instance.get('collect_container_size', False)\n\nservice_check_name = 'docker.service_up'\ntry:\n  running_containers = self._get_containers(instance, with_size=with_size)\n```\n\n#### \u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b\n\n**Datadog\u5185 [docker.containers.running] and [docker.containers.stopped]**\n\n\u66f4\u306b\u3001\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u4ed5\u5206\u3051\u3057\u3066\u3044\u308b\u95a2\u6570\u5185(179-183\u884c\u76ee)\u3067\u3001\u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b\u306e\u30bf\u30b0\u3082\u4ed8\u4e0e\u3057\u3066\u3044\u307e\u3059\u3002Datadog\u306e\u30bf\u30b0\u306b\u3088\u308b\u96c6\u8a08\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3001\u30a4\u30f3\u30d5\u30e9\u5185\u306e\u8d77\u52d5\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u308a\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u30dc\u30fc\u30c9\u8a2d\u5b9a\u306b\u6d3b\u7528\u3059\u308b\u306e\u3060\u3068\u601d\u308f\u308c\u308b\u3002\n\n```python\nif container['Id'] in running_containers_ids:\n  self.set(\"docker.containers.running\", container['Id'], tags=container_tags)\nelse:\n  self.set(\"docker.containers.stopped\", container['Id'], tags=container_tags)\n  ```\n\n### event \u306b\u95a2\u3057\u3066\n\n**\u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b\u9077\u79fb\u306e\u30a4\u30d9\u30f3\u30c8**\u306b\u95a2\u3057\u3066\u3082\u3001\u30c7\u30a3\u30d5\u30a9\u30eb\u30c8\u3067\u8ee2\u9001\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u72b6\u614b\b\u9077\u79fb\u60c5\u5831\u306b\u95a2\u3057\u3066\u306f\u3001\u4e0d\u8981\u306a\u30b1\u30fc\u30b9\u3082\u3042\u308b\u306e\u3067\u3001conf.yaml\u30d5\u30a1\u30a4\u30eb\u3067\u7121\u52b9\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3053\u306e\u30a4\u30d9\u30f3\u30c8\u60c5\u5831\u306b\u95a2\u3057\u3066\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u69cb\u6210(294-302\u884c\u76ee)\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u3069\u306e\u3088\u3046\u306a\u5185\u5bb9\u3092\u6301\u3063\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u304cDatadog\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u304b\u5206\u304b\u308a\u307e\u3059\u3002\n\n```python\nevents.append({\n  'timestamp': max_timestamp,\n  'host': self.hostname,\n  'event_type': EVENT_TYPE,\n  'msg_title': msg_title,\n  'msg_text': msg_body,\n  'source_type_name': EVENT_TYPE,\n  'event_object': 'docker:%s' % image_name,\n  })\n```\n16\u884c\u660e\u3067`EVENT_TYPE`\u306f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u3002\n\n```python\nEVENT_TYPE = SOURCE_TYPE_NAME = 'docker'\n```\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u69cb\u6210\u306e\u8a73\u7d30\u3092\u307f\u3066\u307f\u308b\u3068\u306a\u3093\u3068\u306a\u3093\u3068\u306a\u304f\u60f3\u50cf\u304c\u3067\u304d\u308b\u306e\u3060\u304c\u3001Datadog\u306e\u30c0\u30c3\u30b7\u30e5\u30dc\u30fc\u30c9\u3067\u306f\"source:docker\"\u3068\"msg_text\u306e\u6587\u5b57\u5217\"(\u30a4\u30e1\u30fc\u30b8\u540d, host\u540d, \u72b6\u614b)\u3092\u7d44\u307f\u308f\u305b\u3066\u3001\u76ee\u7684\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u691c\u7d22\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n```python\nmsg_title = \"%s %s on %s\" % (image_name, status_text, self.hostname)\nmsg_body = (\"%%%\\n\"\n    \"{image_name} {status} on {hostname}\\n\"\n    \"```\\n{status_changes}\\n```\\n\"\n    \"%%%\").format(\n        image_name=image_name,\n        status=status_text,\n        hostname=self.hostname,\n        status_changes=\"\\n\".join(\n            [\"%s \\t%s\" % (change[1].upper(), change[0]) for change in status_change])\n)\n```\n\n## \u307e\u3068\u3081\u3002\n\n\u3056\u3063\u3068\u3001Datadog Agent \u5185\u306edocker.py\u773a\u3081\u3066\u3001\u3069\u3093\u306a\u60c5\u5831\u304c\u53ce\u96c6\u3067\u304d\u308b\u304b\u898b\u3066\u304d\u307e\u3057\u305f\u3002\u30c7\u30a3\u30d5\u30a9\u30eb\u30c8\u306e\u72b6\u614b\u3067\u3082\u52d5\u7684\u306b\u52d5\u304d\u56de\u308bDocker\u30b3\u30f3\u30c6\u30ca\u306e\u72b6\u614b\u3092\u30bf\u30b0\u3092\u4f7f\u3063\u3066\u96c6\u7d04\u3057\u306a\u304c\u3089\u628a\u63e1\u3067\u304d\u308b\u60c5\u5831\u306e\u5185\u5bb9\u304c\u5206\u304b\u3063\u305f\u6c17\u304c\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u5148\u3001\u66f4\u306b\u9ad8\u5ea6\u306a\u30e1\u30c8\u30ea\u30af\u30b9\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001\u5404\u30b3\u30f3\u30c6\u30ca\u30fc\u304b\u3089\u3001Datadog Agent\u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\u30b3\u30f3\u30c6\u30fc\u30ca\u30fc\u5185\u306eDogStasD\u7d4c\u7531\u3067\u3001\u30e1\u30c8\u30ea\u30af\u30b9\u3084\u30a4\u30d9\u30f3\u30c8\u3092\u8ee2\u9001\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3082\u5206\u304b\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u3053\u3053\u304b\u3089\u5148\u306f\u3001\u30a4\u30f3\u30d5\u30e9\u306e\u5168\u4f53\u306e\u69cb\u6210\u3084AWS EC2\u4e0a\u3067Docker\u3092\u4f7f\u3063\u3066\u3044\u308b\u76ee\u7684\u306b\u3082\u3088\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u30b1\u30fc\u30b9\u30d0\u30a4\u30b1\u30fc\u30b9\u3067\u30cb\u30fc\u30ba\u304c\u767a\u751f\u3057\u305f\u969b\u306b\u518d\u691c\u8a0e\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u60c5\u5831\u3092\u5143\u306b\u3001EC2\u3084\u3001ECS\u4e0a\u3067\u4f7f\u3063\u3066\u3044\u308bDcoker\u306e\u76e3\u8996\u304c\u5c11\u3057\u3067\u3082\u3001\u697d\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n"}