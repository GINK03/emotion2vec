{"context": "\n\n\u307e\u3068\u3081\n\nDNS \u30b5\u30fc\u30d0\u3092\u76e3\u8996\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\ndig \u306a\u3069\u3001\u65e2\u5b58\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3057\u305f\u304c\u3001DNS \u306e\u52c9\u5f37\u3092\u517c\u306d\u3066\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\nRuby \u306e\u52c9\u5f37\u3082\u517c\u306d\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f Ruby \u3067\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\nRFC 1035 \u306b\u3088\u308b\u3068\u3001DNS \u30ea\u30af\u30a8\u30b9\u30c8\u30fb\u30d8\u30c3\u30c0\u306e OPCODE \u30d5\u30a3\u30fc\u30eb\u30c9\u306b 2 \u3092\u6307\u5b9a\u3059\u308b\u3068 DNS \u30b5\u30fc\u30d0\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u304c\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u3067\u3059\n\u3053\u308c\u3092\u5229\u7528\u3057\u3066 DNS \u30b5\u30fc\u30d0\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u30fb\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u304c\u3067\u304d\u308b\u304b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\n\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u554f\u984c\u306a\u304f\u5b8c\u6210\u3057\u307e\u3057\u305f\u304c\u3001\u72d9\u3063\u3066\u3044\u305f\u7d50\u679c\uff08DNS \u30b5\u30fc\u30d0\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306e\u78ba\u8a8d\uff09\u306f\u5f97\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\nDNS \u30b5\u30fc\u30d0\u5074\u3067 OPCODE=2 \u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3078\u306e\u5fdc\u7b54\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u611f\u3058\u3067\u3057\u305f\uff08\u5fdc\u7b54\u30d8\u30c3\u30c0\u306e RCODE \u304c 4 (= \"Not Implemented\") \u3067\u3057\u305f\uff09\nDNS \u30b5\u30fc\u30d0\u306e\u76e3\u8996\u306f\u3001\u30c0\u30df\u30fc\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u3066\u3001\u305d\u306e\u5fdc\u7b54\u306e\u4e2d\u306e RCODE \u3092\u78ba\u8a8d\u3059\u308b\u306e\u304c\u826f\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff08\u3044\u305a\u308c\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff09\n\u4ee5\u4e0b\u306f\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3068\u5b9f\u88c5\u30e1\u30e2\u3067\u3059\n\u5185\u5bb9\u306b\u9593\u9055\u3044\u304c\u3042\u3063\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044\n\n\n\u53c2\u8003\u60c5\u5831\n\nhttps://tools.ietf.org/html/rfc1035\nhttp://www.eric-a-hall.com/specs/draft-hall-status-opcode-00-1.txt\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u4ee5\u4e0b\u304c\u4f5c\u6210\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\n\u624b\u7d9a\u7684\u306a\u30b3\u30fc\u30c9\u3067\u3059\u304c\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\n\n\ndnsping.rb\n#!/usr/bin/ruby\n\nrequire 'socket'\n\nif ARGV.size == 0\n  puts \"Usage: ./dnsping.rb <DNS Server IP Address>\"\n  exit 1\nend\n\nSERV = ARGV[0]           # DNS Server Address\nPORT = 53                # DNS Port\nLEN  = 512               # maxlen bytes\n\n# Generate DNS Request\n# for a server status request, we only need a header data\n# header format is described in RFC 1035\ndef dns_request()\n\n  id      = 1\n\n  qr      = 0 << 15   # qr = 0      => query (not response)\n  opcode  = 2 << 11   # opcode = 2  => server status request\n  aa      = 0 << 10\n  tc      = 0 << 9\n  rd      = 0 << 8\n  ra      = 0 << 7\n  z       = 0 << 4\n  rcode   = 0 << 0\n\n  qdcount = 0\n  ancount = 0\n  nscount = 0\n  arcount = 0\n\n  f1 = id\n  f2 = (qr + opcode + aa + tc + rd + ra + z + rcode)\n  f3 = qdcount\n  f4 = ancount\n  f5 = nscount\n  f6 = arcount\n\n  # 'n*' converts 16bit unsigned array to byte array in network byte order\n  header = [f1, f2, f3, f5, f5, f6].pack('n*')\n\n  return header\n\nend\n\ndef main()\n\n  # create DNS request message\n  req = dns_request()\n\n  # display DNS request message\n  print \" Request:  \"\n  p req\n\n  # create socket\n  sock = UDPSocket.new\n  sock.connect(SERV, PORT)\n\n  # send the query\n  sock.send req, 0\n\n  # receive response\n  data = sock.recvfrom(LEN)\n\n  # display received data\n  # data[0] => received data\n  print \" Response: \"\n  p data[0]\n\n  # display response code\n  # lower 4 bytes of the 4th octet in received data is the response code\n  print \" RCODE:    \"\n  p (data[0].unpack('C*')[3] & 0b1111)\n\nend\n\nmain()\n\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n#!/usr/bin/ruby\n\nrequire 'socket'\n\nif ARGV.size == 0\n  puts \"Usage: ./dnsping.rb <DNS Server IP Address>\"\n  exit 1\nend\n\n\n\n\u30b5\u30fc\u30d0\u306e\u30a2\u30c9\u30ec\u30b9\u306f\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u7b2c\u4e00\u5f15\u6570\u3067\u6307\u5b9a\u3057\u307e\u3059\nDNS \u30b5\u30fc\u30d0\u306e\u30dd\u30fc\u30c8\u306f 53 \u756a\u3067\u3059\n\nLEN \u306f DNS \u30b5\u30fc\u30d0\u304b\u3089\u306e\u5fdc\u7b54\u30d1\u30b1\u30c3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba\u3067\u3059\n\n\u5b9f\u969b\u306e\u5fdc\u7b54\u30d1\u30b1\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u306f 96byte \u3067\u3057\u305f\uff08DNS \u306e\u30d8\u30c3\u30c0\u30b5\u30a4\u30ba\u304c 96byte\uff09\n\n\n\n\nSERV = ARGV[0]           # DNS Server Address\nPORT = 53                # DNS Port\nLEN  = 512               # maxlen bytes\n\n\n\nDNS \u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30fb\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f RFC 1035 \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\n\u56f3\u89e3\u3059\u308b\u3068\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u30d0\u30a4\u30c8\u5217\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n\n\n\n\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\n\u30b5\u30a4\u30ba\uff08\u30d0\u30a4\u30c8\u6570\uff09\n\u8a2d\u5b9a\u5024\n\u8aac\u660e\n\n\n\n\nID\n16\n1\n\u4efb\u610f\u306e\u5024\n\n\nQR\n1\n0\n\u554f\u3044\u5408\u308f\u305b\n\n\nOPCODE\n4\n2\n\u30b9\u30c6\u30fc\u30bf\u30b9\u78ba\u8a8d\n\n\nAA\n1\n0\n\u5fdc\u7b54\u5c02\u7528\u30d5\u30a3\u30fc\u30eb\u30c9\n\n\nTC\n1\n0\n\u30c8\u30e9\u30f3\u30b1\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\n\n\nRD\n1\n0\n\u518d\u5e30\u5e0c\u671b\u3057\u306a\u3044\n\n\nRA\n1\n0\n\u518d\u5e30\u4e0d\u53ef\u80fd\n\n\nZ\n3\n0\n\u4e88\u7d04\u30d5\u30a3\u30fc\u30eb\u30c9\n\n\nRCODE\n4\n0\n\u5fdc\u7b54\u5c02\u7528\u30d5\u30a3\u30fc\u30eb\u30c9\n\n\nQDCOUNT\n16\n0\n0 => \u5168\u3066\u306e Zone, 1 => Question Section \u3067\u6307\u5b9a\u3057\u305f Zone\n\n\nANCOUNT\n16\n0\n-\n\n\nNSCOUNT\n16\n0\n-\n\n\nARCOUNT\n16\n0\n-\n\n\n\n\n# Generate DNS Request\n# for a server status request, we only need a header data\n# header format is described in RFC 1035\ndef dns_request()\n\n\n\nID \u306f\u4efb\u610f\u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\n\n\n  id      = 1\n\n\n\nDNS \u306e\u554f\u3044\u5408\u308f\u305b\u306e\u969b\u306f QR = 0 \u306b\u8a2d\u5b9a\u3057\u307e\u3059\nOPCODE = 2 \u304c DNS \u30b5\u30fc\u30d0\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u78ba\u8a8d\u3067\u3059\n\u305d\u306e\u4ed6\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f 0 \u306b\u8a2d\u5b9a\u3057\u307e\u3059\n\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u610f\u5473\u3068\u8a2d\u5b9a\u3059\u3079\u304d\u5024\u306f RFC 1035 \u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\n\n\n  qr      = 0 << 15   # qr = 0      => query (not response)\n  opcode  = 2 << 11   # opcode = 2  => server status request\n  aa      = 0 << 10\n  tc      = 0 << 9\n  rd      = 0 << 8\n  ra      = 0 << 7\n  z       = 0 << 4\n  rcode   = 0 << 0\n\n  qdcount = 0\n  ancount = 0\n  nscount = 0\n  arcount = 0\n\n  f1 = id\n  f2 = (qr + opcode + aa + tc + rd + ra + z + rcode)\n  f3 = qdcount\n  f4 = ancount\n  f5 = nscount\n  f6 = arcount\n\n\n\nArray#pack \u306e\u66f8\u5f0f\u6307\u5b9a\u306b 'n*' \u3092\u6307\u5b9a\u3059\u308b\u3068\u300116bit unsigned \u306e\u914d\u5217\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u30d0\u30a4\u30c8\u30fb\u30aa\u30fc\u30c0\u30fc\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30fb\u30d0\u30a4\u30c8\u30fb\u30aa\u30fc\u30c0\u30fc\u306b\u306a\u308a\u307e\u3059\n\n\n  # 'n*' converts 16bit unsigned array to byte array in network byte order\n  header = [f1, f2, f3, f5, f5, f6].pack('n*')\n\n  return header\n\nend\n\ndef main()\n\n  # create DNS request message\n  req = dns_request()\n\n  # display DNS request message\n  print \" Request:  \"\n  p req\n\n\n\n\u76e3\u8996\u30b9\u30af\u30ea\u30d7\u30c8\u306a\u306e\u3067 DNS \u30d1\u30b1\u30c3\u30c8\u306f UDP \u3067\u9001\u4fe1\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\n\n\n  # create socket\n  sock = UDPSocket.new\n  sock.connect(SERV, PORT)\n\n  # send the query\n  sock.send req, 0\n\n  # receive response\n  data = sock.recvfrom(LEN)\n\n  # display received data\n  # data[0] => received data\n  print \" Response: \"\n  p data[0]\n\n\n\nDNS \u30b5\u30fc\u30d0\u304b\u3089\u8fd4\u3063\u3066\u304d\u305f\u30d1\u30b1\u30c3\u30c8\u306e 4 \u30aa\u30af\u30c6\u30c3\u30c8\u76ee\u306e\u4e0b\u4f4d 4byte \u304c\u5fdc\u7b54\u30b3\u30fc\u30c9\u3067\u3059\n\u3053\u306e\u5024\u304c 0 \u306a\u3089\u30b5\u30fc\u30d0\u306f\u6b63\u5e38\u306b\u7a3c\u50cd\u3057\u3066\u3044\u307e\u3059\n\u3053\u3053\u3067\u8fd4\u3055\u308c\u308b\u5fdc\u7b54\u30b3\u30fc\u30c9\u306e\u610f\u5473\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n\n\n\n\u5fdc\u7b54\u30b3\u30fc\u30c9\n\u610f\u5473\n\n\n\n\n0\nNo Error\n\n\n1\nFormat Error\n\n\n2\nServer Failure\n\n\n3\nName Error\n\n\n4\nNot Implemented\n\n\n5\nRefused\n\n\n\n\n  # display response code\n  # lower 4 bytes of the 4th octet in received data is the response code\n  print \" RCODE:    \"\n  p (data[0].unpack('C*')[3] & 0b1111)\n\nend\n\nmain()\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u624b\u5143\u306e DNS \u30b5\u30fc\u30d0\u3067\u8a66\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001RCODE = 4 (= \"Not Implemented\") \u304c\u8fd4\u3063\u3066\u6765\u307e\u3057\u305f\uff08\u6b8b\u5ff5\uff01\uff09\n\n$ ./dnsping.rb x.x.x.x\n Request:  \"\\x00\\x01\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n Response: \"\\x00\\x01\\x90\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n RCODE:    4\n\n\u304a\u3057\u307e\u3044\n# \u307e\u3068\u3081\n\n- DNS \u30b5\u30fc\u30d0\u3092\u76e3\u8996\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\n- dig \u306a\u3069\u3001\u65e2\u5b58\u306e\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3057\u305f\u304c\u3001DNS \u306e\u52c9\u5f37\u3092\u517c\u306d\u3066\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\n- Ruby \u306e\u52c9\u5f37\u3082\u517c\u306d\u3066\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f Ruby \u3067\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\n\n- RFC 1035 \u306b\u3088\u308b\u3068\u3001DNS \u30ea\u30af\u30a8\u30b9\u30c8\u30fb\u30d8\u30c3\u30c0\u306e OPCODE \u30d5\u30a3\u30fc\u30eb\u30c9\u306b 2 \u3092\u6307\u5b9a\u3059\u308b\u3068 DNS \u30b5\u30fc\u30d0\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u304c\u78ba\u8a8d\u3067\u304d\u308b\u3088\u3046\u3067\u3059\n- \u3053\u308c\u3092\u5229\u7528\u3057\u3066 DNS \u30b5\u30fc\u30d0\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u30fb\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u304c\u3067\u304d\u308b\u304b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\n\n- \u30b9\u30af\u30ea\u30d7\u30c8\u306f\u554f\u984c\u306a\u304f\u5b8c\u6210\u3057\u307e\u3057\u305f\u304c\u3001\u72d9\u3063\u3066\u3044\u305f\u7d50\u679c\uff08DNS \u30b5\u30fc\u30d0\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306e\u78ba\u8a8d\uff09\u306f\u5f97\u3089\u308c\u307e\u305b\u3093\u3067\u3057\u305f\n- DNS \u30b5\u30fc\u30d0\u5074\u3067 OPCODE=2 \u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3078\u306e\u5fdc\u7b54\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u611f\u3058\u3067\u3057\u305f\uff08\u5fdc\u7b54\u30d8\u30c3\u30c0\u306e RCODE \u304c 4 (= \"Not Implemented\") \u3067\u3057\u305f\uff09\n\n- DNS \u30b5\u30fc\u30d0\u306e\u76e3\u8996\u306f\u3001\u30c0\u30df\u30fc\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u3066\u3001\u305d\u306e\u5fdc\u7b54\u306e\u4e2d\u306e RCODE \u3092\u78ba\u8a8d\u3059\u308b\u306e\u304c\u826f\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff08\u3044\u305a\u308c\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff09\n\n- \u4ee5\u4e0b\u306f\u4eca\u56de\u4f5c\u6210\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3068\u5b9f\u88c5\u30e1\u30e2\u3067\u3059\n\n- \u5185\u5bb9\u306b\u9593\u9055\u3044\u304c\u3042\u3063\u305f\u3089\u3054\u3081\u3093\u306a\u3055\u3044\n\n\n# \u53c2\u8003\u60c5\u5831\n\n- https://tools.ietf.org/html/rfc1035\n- http://www.eric-a-hall.com/specs/draft-hall-status-opcode-00-1.txt\n\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n- \u4ee5\u4e0b\u304c\u4f5c\u6210\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\n- \u624b\u7d9a\u7684\u306a\u30b3\u30fc\u30c9\u3067\u3059\u304c\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\n\n````dnsping.rb\n#!/usr/bin/ruby\n\nrequire 'socket'\n\nif ARGV.size == 0\n  puts \"Usage: ./dnsping.rb <DNS Server IP Address>\"\n  exit 1\nend\n\nSERV = ARGV[0]           # DNS Server Address\nPORT = 53                # DNS Port\nLEN  = 512               # maxlen bytes\n\n# Generate DNS Request\n# for a server status request, we only need a header data\n# header format is described in RFC 1035\ndef dns_request()\n\n  id      = 1\n\n  qr      = 0 << 15   # qr = 0      => query (not response)\n  opcode  = 2 << 11   # opcode = 2  => server status request\n  aa      = 0 << 10\n  tc      = 0 << 9\n  rd      = 0 << 8\n  ra      = 0 << 7\n  z       = 0 << 4\n  rcode   = 0 << 0\n\n  qdcount = 0\n  ancount = 0\n  nscount = 0\n  arcount = 0\n\n  f1 = id\n  f2 = (qr + opcode + aa + tc + rd + ra + z + rcode)\n  f3 = qdcount\n  f4 = ancount\n  f5 = nscount\n  f6 = arcount\n\n  # 'n*' converts 16bit unsigned array to byte array in network byte order\n  header = [f1, f2, f3, f5, f5, f6].pack('n*')\n\n  return header\n\nend\n\ndef main()\n\n  # create DNS request message\n  req = dns_request()\n\n  # display DNS request message\n  print \" Request:  \"\n  p req\n\n  # create socket\n  sock = UDPSocket.new\n  sock.connect(SERV, PORT)\n\n  # send the query\n  sock.send req, 0\n\n  # receive response\n  data = sock.recvfrom(LEN)\n\n  # display received data\n  # data[0] => received data\n  print \" Response: \"\n  p data[0]\n\n  # display response code\n  # lower 4 bytes of the 4th octet in received data is the response code\n  print \" RCODE:    \"\n  p (data[0].unpack('C*')[3] & 0b1111)\n\nend\n\nmain()\n````\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n\n````\n#!/usr/bin/ruby\n\nrequire 'socket'\n\nif ARGV.size == 0\n  puts \"Usage: ./dnsping.rb <DNS Server IP Address>\"\n  exit 1\nend\n\n````\n\n- \u30b5\u30fc\u30d0\u306e\u30a2\u30c9\u30ec\u30b9\u306f\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u7b2c\u4e00\u5f15\u6570\u3067\u6307\u5b9a\u3057\u307e\u3059\n- DNS \u30b5\u30fc\u30d0\u306e\u30dd\u30fc\u30c8\u306f 53 \u756a\u3067\u3059\n\n- LEN \u306f DNS \u30b5\u30fc\u30d0\u304b\u3089\u306e\u5fdc\u7b54\u30d1\u30b1\u30c3\u30c8\u306e\u6700\u5927\u30b5\u30a4\u30ba\u3067\u3059\n - \u5b9f\u969b\u306e\u5fdc\u7b54\u30d1\u30b1\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u306f 96byte \u3067\u3057\u305f\uff08DNS \u306e\u30d8\u30c3\u30c0\u30b5\u30a4\u30ba\u304c 96byte\uff09\n\n````\n\nSERV = ARGV[0]           # DNS Server Address\nPORT = 53                # DNS Port\nLEN  = 512               # maxlen bytes\n\n````\n\n- DNS \u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30fb\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4f5c\u6210\u3057\u307e\u3059\n- \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f RFC 1035 \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\n\n- \u56f3\u89e3\u3059\u308b\u3068\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u30d0\u30a4\u30c8\u5217\u3092\u4f5c\u6210\u3057\u307e\u3059\n\n| \u30d5\u30a3\u30fc\u30eb\u30c9\u540d | \u30b5\u30a4\u30ba\uff08\u30d0\u30a4\u30c8\u6570\uff09 | \u8a2d\u5b9a\u5024 | \u8aac\u660e |\n| ------------ | ------------------ | ------ | ---- |\n| ID | 16 | 1 | \u4efb\u610f\u306e\u5024 |\n| QR | 1 | 0 | \u554f\u3044\u5408\u308f\u305b |\n| OPCODE | 4 | 2 | \u30b9\u30c6\u30fc\u30bf\u30b9\u78ba\u8a8d |\n| AA | 1 | 0 | \u5fdc\u7b54\u5c02\u7528\u30d5\u30a3\u30fc\u30eb\u30c9 |\n| TC | 1 | 0 | \u30c8\u30e9\u30f3\u30b1\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044 |\n| RD | 1 | 0 | \u518d\u5e30\u5e0c\u671b\u3057\u306a\u3044 |\n| RA | 1 | 0 | \u518d\u5e30\u4e0d\u53ef\u80fd |\n| Z | 3 | 0 | \u4e88\u7d04\u30d5\u30a3\u30fc\u30eb\u30c9 |\n| RCODE | 4 | 0 | \u5fdc\u7b54\u5c02\u7528\u30d5\u30a3\u30fc\u30eb\u30c9 |\n| QDCOUNT | 16 | 0 | 0 => \u5168\u3066\u306e Zone, 1 => Question Section \u3067\u6307\u5b9a\u3057\u305f Zone |\n| ANCOUNT | 16 | 0 | - |\n| NSCOUNT | 16 | 0 | - |\n| ARCOUNT | 16 | 0 | - |\n\n\n````\n\n# Generate DNS Request\n# for a server status request, we only need a header data\n# header format is described in RFC 1035\ndef dns_request()\n\n````\n\n- ID \u306f\u4efb\u610f\u306e\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\n\n````\n\n  id      = 1\n\n````\n\n- DNS \u306e\u554f\u3044\u5408\u308f\u305b\u306e\u969b\u306f QR = 0 \u306b\u8a2d\u5b9a\u3057\u307e\u3059\n- OPCODE = 2 \u304c DNS \u30b5\u30fc\u30d0\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u78ba\u8a8d\u3067\u3059\n- \u305d\u306e\u4ed6\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f 0 \u306b\u8a2d\u5b9a\u3057\u307e\u3059\n- \u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u610f\u5473\u3068\u8a2d\u5b9a\u3059\u3079\u304d\u5024\u306f RFC 1035 \u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\n\n````\n\n  qr      = 0 << 15   # qr = 0      => query (not response)\n  opcode  = 2 << 11   # opcode = 2  => server status request\n  aa      = 0 << 10\n  tc      = 0 << 9\n  rd      = 0 << 8\n  ra      = 0 << 7\n  z       = 0 << 4\n  rcode   = 0 << 0\n\n  qdcount = 0\n  ancount = 0\n  nscount = 0\n  arcount = 0\n\n  f1 = id\n  f2 = (qr + opcode + aa + tc + rd + ra + z + rcode)\n  f3 = qdcount\n  f4 = ancount\n  f5 = nscount\n  f6 = arcount\n\n````\n\n- Array#pack \u306e\u66f8\u5f0f\u6307\u5b9a\u306b 'n*' \u3092\u6307\u5b9a\u3059\u308b\u3068\u300116bit unsigned \u306e\u914d\u5217\u3092\u30d0\u30a4\u30c8\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n- \u30d0\u30a4\u30c8\u30fb\u30aa\u30fc\u30c0\u30fc\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30fb\u30d0\u30a4\u30c8\u30fb\u30aa\u30fc\u30c0\u30fc\u306b\u306a\u308a\u307e\u3059\n\n````\n\n  # 'n*' converts 16bit unsigned array to byte array in network byte order\n  header = [f1, f2, f3, f5, f5, f6].pack('n*')\n\n  return header\n\nend\n\ndef main()\n\n  # create DNS request message\n  req = dns_request()\n\n  # display DNS request message\n  print \" Request:  \"\n  p req\n\n````\n\n- \u76e3\u8996\u30b9\u30af\u30ea\u30d7\u30c8\u306a\u306e\u3067 DNS \u30d1\u30b1\u30c3\u30c8\u306f UDP \u3067\u9001\u4fe1\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\n\n````\n\n  # create socket\n  sock = UDPSocket.new\n  sock.connect(SERV, PORT)\n\n  # send the query\n  sock.send req, 0\n\n  # receive response\n  data = sock.recvfrom(LEN)\n\n  # display received data\n  # data[0] => received data\n  print \" Response: \"\n  p data[0]\n\n````\n\n- DNS \u30b5\u30fc\u30d0\u304b\u3089\u8fd4\u3063\u3066\u304d\u305f\u30d1\u30b1\u30c3\u30c8\u306e 4 \u30aa\u30af\u30c6\u30c3\u30c8\u76ee\u306e\u4e0b\u4f4d 4byte \u304c\u5fdc\u7b54\u30b3\u30fc\u30c9\u3067\u3059\n- \u3053\u306e\u5024\u304c 0 \u306a\u3089\u30b5\u30fc\u30d0\u306f\u6b63\u5e38\u306b\u7a3c\u50cd\u3057\u3066\u3044\u307e\u3059\n- \u3053\u3053\u3067\u8fd4\u3055\u308c\u308b\u5fdc\u7b54\u30b3\u30fc\u30c9\u306e\u610f\u5473\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n| \u5fdc\u7b54\u30b3\u30fc\u30c9 | \u610f\u5473 |\n| ---------- | ---- |\n| 0 | No Error |\n| 1 | Format Error |\n| 2 | Server Failure |\n| 3 | Name Error |\n| 4 | Not Implemented |\n| 5 | Refused |\n\n````\n\n  # display response code\n  # lower 4 bytes of the 4th octet in received data is the response code\n  print \" RCODE:    \"\n  p (data[0].unpack('C*')[3] & 0b1111)\n\nend\n\nmain()\n````\n\n# \u5b9f\u884c\u7d50\u679c\n\n- \u624b\u5143\u306e DNS \u30b5\u30fc\u30d0\u3067\u8a66\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001RCODE = 4 (= \"Not Implemented\") \u304c\u8fd4\u3063\u3066\u6765\u307e\u3057\u305f\uff08\u6b8b\u5ff5\uff01\uff09\n\n````\n$ ./dnsping.rb x.x.x.x\n Request:  \"\\x00\\x01\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n Response: \"\\x00\\x01\\x90\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\"\n RCODE:    4\n````\n\n__\u304a\u3057\u307e\u3044__\n", "tags": ["dns", "monitor", "Ruby", "failure"]}