{"context": "\nipynb to markdown\u3092\u305d\u306e\u307e\u307e\u8cbc\u308a\u4ed8\u3051\u305f\n\u3044\u307e\u307e\u3067\u306e\u968e\u7d1a\u4f5c\u6210\u306f\u3001dict\u3092\u4f5c\u3063\u3066map\u3055\u305b\u3066\u3044\u305f\n\n\n\u53f3\u533a\u9593\u306e\u958b\u9589\u3092\u6307\u5b9a\u3067\u304d\u308b\n\u6570\u5024\u306e\u7bc4\u56f2\u3092\u793a\u3059\u6587\u5b57\u5217\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067map\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b\n\n\ndummy\u5909\u6570\u4fbf\u5229\u3001SQL\u3092\u8907\u96d1\u306b\u3057\u306a\u3044\u3067\u3059\u3080\n\u304a\u307e\u3051\u306b\u306e\u305b\u305ffactorize\u306f\u6570\u5024\u3057\u304b\u6271\u3048\u306a\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u4fbf\u5229\u305d\u3046\n\n\n\u305f\u3060\u3057\u3001numpy\u3068\u306fnan\u306e\u6271\u3044\u304c\u5c11\u3057\u9055\u3046\u3089\u3057\u3044\n\n\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\n%matplotlib inline\n\n\n\u53c2\u8003\n# http://pandas.pydata.org/pandas-docs/stable/generated/pandas.cut.html\n# http://pandas.pydata.org/pandas-docs/stable/reshaping.html#computing-indicator-dummy-variables\n\n\n\u30c7\u30fc\u30bf\nnp.random.seed(0)\ndf_for_cut = pd.DataFrame(np.random.randint(1, 99, 1000), columns=[\"age\"])\ndf_for_cut.tail()\n\n\n\n\n\n\nage\n\n\n\n\n995\n36\n\n\n996\n89\n\n\n997\n50\n\n\n998\n80\n\n\n999\n85\n\n\n\n\n\nbin\u4f5c\u6210\nbins = list(range(0, 100+1, 10))\nbins\n\n[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\n\nbin\u306e\u30e9\u30d9\u30eb\nbins_labels = [str(b) + \" - \" + str(b + 10 - 1) for b in bins[:-1]]\nbins_labels\n\n['0 - 9',\n '10 - 19',\n '20 - 29',\n '30 - 39',\n '40 - 49',\n '50 - 59',\n '60 - 69',\n '70 - 79',\n '80 - 89',\n '90 - 99']\n\ndf_for_cut[\"age_group\"] = pd.cut(df_for_cut.age, bins=bins)\ndf_for_cut[\"age_group_right\"] = pd.cut(df_for_cut.age, bins=bins, right=False)\ndf_for_cut[\"age_group_label_F\"] = pd.cut(df_for_cut.age, bins=bins, labels=False)\ndf_for_cut[\"age_group_labels\"] = pd.cut(df_for_cut.age, bins=bins, labels=bins_labels)\ndf_for_cut.tail()\n\n\n\n\n\n\n\nage\nage_group\nage_group_right\nage_group_label_F\nage_group_labels\n\n\n\n\n995\n36\n(30, 40]\n[30, 40)\n3\n30 - 39\n\n\n996\n89\n(80, 90]\n[80, 90)\n8\n80 - 89\n\n\n997\n50\n(40, 50]\n[50, 60)\n4\n40 - 49\n\n\n998\n80\n(70, 80]\n[80, 90)\n7\n70 - 79\n\n\n999\n85\n(80, 90]\n[80, 90)\n8\n80 - 89\n\n\n\n\ndf_for_cut.age_group.unique()\n\n[(40, 50], (60, 70], (0, 10], (80, 90], (20, 30], (30, 40], (70, 80], (10, 20], (50, 60], (90, 100]]\nCategories (10, object): [(0, 10] < (10, 20] < (20, 30] < (30, 40] ... (60, 70] < (70, 80] < (80, 90] < (90, 100]]\n\ndf_for_cut.age_group_label_F.unique()\n\narray([4, 6, 0, 8, 2, 3, 7, 1, 5, 9])\n\npd.qcut(quantile cut) \u3082\u3042\u308b\u304c\u3001\u3053\u3061\u3089\u306f\u5206\u4f4d\u6570\u307e\u305f\u306f\u5206\u4f4d\u306e\u30ea\u30b9\u30c8\u3092\u6307\u5b9a\u3057\u3066\u3059\u308b\u3082\u306e\u3082\u3042\u308b\u3002\nqcuted_4 = pd.qcut(df_for_cut[\"age\"], q=4)\nqcuted_4.tail()\n\nq = [0, .25, .5, .75, 1]\nqcuted_list = pd.qcut(df_for_cut[\"age\"], q=q)\nqcuted_list.tail()\n\n\nDummy\u5909\u6570\ndummies = pd.get_dummies(df_for_cut['age_group'], prefix='age_group')\ndf_for_cut_with_dummies = pd.concat([df_for_cut, dummies], axis=1)\ndf_for_cut_with_dummies.tail()\n\n\n\n\n\n\nage\nage_group\nage_group_right\nage_group_(0, 10]\nage_group_(10, 20]\nage_group_(20, 30]\nage_group_(30, 40]\nage_group_(40, 50]\nage_group_(50, 60]\nage_group_(60, 70]\nage_group_(70, 80]\nage_group_(80, 90]\nage_group_(90, 100]\n\n\n\n\n995\n36\n(30, 40]\n[30, 40)\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n\n\n996\n89\n(80, 90]\n[80, 90)\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n\n\n997\n50\n(40, 50]\n[50, 60)\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n\n\n998\n80\n(70, 80]\n[80, 90)\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n\n\n999\n85\n(80, 90]\n[80, 90)\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n\n\n\n\npd.get_dummies(pd.DataFrame({\"a\": list(\"AB\"), \"b\": list(\"CD\")}), prefix=list(\"ab\"))\n\n# Series\n# prefix\u306f\u306a\u3044, split+expand\u3092\u3055\u3089\u306b\u52a0\u5de5\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308b\npd.Series([\"a|b|c\", \"e|fg\"]).str.get_dummies()\npd.Series([\"a|b|c\", \"e|fg\"]).str.split(\"|\", expand=True)\n\n\n\n\n\n\na_A\na_B\nb_C\nb_D\n\n\n\n\n0\n1\n0\n1\n0\n\n\n1\n0\n1\n0\n1\n\n\n\n\nfactors = pd.Series([\"B\", np.nan, \"a\", np.nan, 123, 0.4, np.inf])\nfactors\n\n0      B\n1    NaN\n2      a\n3    NaN\n4    123\n5    0.4\n6    inf\ndtype: object\n\n\n\u304a\u307e\u3051\nfactors.factorize()\n\n(array([ 0, -1,  1, -1,  2,  3,  4]),\n Index(['B', 'a', 123, 0.4, inf], dtype='object'))\n\n- ipynb to markdown\u3092\u305d\u306e\u307e\u307e\u8cbc\u308a\u4ed8\u3051\u305f\n- \u3044\u307e\u307e\u3067\u306e\u968e\u7d1a\u4f5c\u6210\u306f\u3001dict\u3092\u4f5c\u3063\u3066map\u3055\u305b\u3066\u3044\u305f\n    - \u53f3\u533a\u9593\u306e\u958b\u9589\u3092\u6307\u5b9a\u3067\u304d\u308b\n    - \u6570\u5024\u306e\u7bc4\u56f2\u3092\u793a\u3059\u6587\u5b57\u5217\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067map\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b\n- dummy\u5909\u6570\u4fbf\u5229\u3001SQL\u3092\u8907\u96d1\u306b\u3057\u306a\u3044\u3067\u3059\u3080\n- \u304a\u307e\u3051\u306b\u306e\u305b\u305ffactorize\u306f\u6570\u5024\u3057\u304b\u6271\u3048\u306a\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f\u4fbf\u5229\u305d\u3046\n    - \u305f\u3060\u3057\u3001numpy\u3068\u306fnan\u306e\u6271\u3044\u304c\u5c11\u3057\u9055\u3046\u3089\u3057\u3044\n\n```python\nimport numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\n%matplotlib inline\n```\n\n## \u53c2\u8003\n```python\n# http://pandas.pydata.org/pandas-docs/stable/generated/pandas.cut.html\n# http://pandas.pydata.org/pandas-docs/stable/reshaping.html#computing-indicator-dummy-variables\n```\n\n## \u30c7\u30fc\u30bf\n```python\nnp.random.seed(0)\ndf_for_cut = pd.DataFrame(np.random.randint(1, 99, 1000), columns=[\"age\"])\ndf_for_cut.tail()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>995</th>\n      <td>36</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>89</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>50</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>80</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>85</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n## bin\u4f5c\u6210\n```python\nbins = list(range(0, 100+1, 10))\nbins\n```\n\n\n\n\n    [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\n\n\n## bin\u306e\u30e9\u30d9\u30eb\n```python\nbins_labels = [str(b) + \" - \" + str(b + 10 - 1) for b in bins[:-1]]\nbins_labels\n```\n\n\n\n\n    ['0 - 9',\n     '10 - 19',\n     '20 - 29',\n     '30 - 39',\n     '40 - 49',\n     '50 - 59',\n     '60 - 69',\n     '70 - 79',\n     '80 - 89',\n     '90 - 99']\n\n\n\n\n```python\ndf_for_cut[\"age_group\"] = pd.cut(df_for_cut.age, bins=bins)\ndf_for_cut[\"age_group_right\"] = pd.cut(df_for_cut.age, bins=bins, right=False)\ndf_for_cut[\"age_group_label_F\"] = pd.cut(df_for_cut.age, bins=bins, labels=False)\ndf_for_cut[\"age_group_labels\"] = pd.cut(df_for_cut.age, bins=bins, labels=bins_labels)\ndf_for_cut.tail()\n\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>age_group</th>\n      <th>age_group_right</th>\n      <th>age_group_label_F</th>\n      <th>age_group_labels</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>995</th>\n      <td>36</td>\n      <td>(30, 40]</td>\n      <td>[30, 40)</td>\n      <td>3</td>\n      <td>30 - 39</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>89</td>\n      <td>(80, 90]</td>\n      <td>[80, 90)</td>\n      <td>8</td>\n      <td>80 - 89</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>50</td>\n      <td>(40, 50]</td>\n      <td>[50, 60)</td>\n      <td>4</td>\n      <td>40 - 49</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>80</td>\n      <td>(70, 80]</td>\n      <td>[80, 90)</td>\n      <td>7</td>\n      <td>70 - 79</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>85</td>\n      <td>(80, 90]</td>\n      <td>[80, 90)</td>\n      <td>8</td>\n      <td>80 - 89</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\ndf_for_cut.age_group.unique()\n```\n\n\n\n\n    [(40, 50], (60, 70], (0, 10], (80, 90], (20, 30], (30, 40], (70, 80], (10, 20], (50, 60], (90, 100]]\n    Categories (10, object): [(0, 10] < (10, 20] < (20, 30] < (30, 40] ... (60, 70] < (70, 80] < (80, 90] < (90, 100]]\n\n\n\n\n```python\ndf_for_cut.age_group_label_F.unique()\n```\n\n\n\n\n    array([4, 6, 0, 8, 2, 3, 7, 1, 5, 9])\n\n\npd.qcut(quantile cut) \u3082\u3042\u308b\u304c\u3001\u3053\u3061\u3089\u306f\u5206\u4f4d\u6570\u307e\u305f\u306f\u5206\u4f4d\u306e\u30ea\u30b9\u30c8\u3092\u6307\u5b9a\u3057\u3066\u3059\u308b\u3082\u306e\u3082\u3042\u308b\u3002\n\n```python\nqcuted_4 = pd.qcut(df_for_cut[\"age\"], q=4)\nqcuted_4.tail()\n\nq = [0, .25, .5, .75, 1]\nqcuted_list = pd.qcut(df_for_cut[\"age\"], q=q)\nqcuted_list.tail()\n```\n\n## Dummy\u5909\u6570\n```python\ndummies = pd.get_dummies(df_for_cut['age_group'], prefix='age_group')\ndf_for_cut_with_dummies = pd.concat([df_for_cut, dummies], axis=1)\ndf_for_cut_with_dummies.tail()\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>age_group</th>\n      <th>age_group_right</th>\n      <th>age_group_(0, 10]</th>\n      <th>age_group_(10, 20]</th>\n      <th>age_group_(20, 30]</th>\n      <th>age_group_(30, 40]</th>\n      <th>age_group_(40, 50]</th>\n      <th>age_group_(50, 60]</th>\n      <th>age_group_(60, 70]</th>\n      <th>age_group_(70, 80]</th>\n      <th>age_group_(80, 90]</th>\n      <th>age_group_(90, 100]</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>995</th>\n      <td>36</td>\n      <td>(30, 40]</td>\n      <td>[30, 40)</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>996</th>\n      <td>89</td>\n      <td>(80, 90]</td>\n      <td>[80, 90)</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>997</th>\n      <td>50</td>\n      <td>(40, 50]</td>\n      <td>[50, 60)</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>998</th>\n      <td>80</td>\n      <td>(70, 80]</td>\n      <td>[80, 90)</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>999</th>\n      <td>85</td>\n      <td>(80, 90]</td>\n      <td>[80, 90)</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\npd.get_dummies(pd.DataFrame({\"a\": list(\"AB\"), \"b\": list(\"CD\")}), prefix=list(\"ab\"))\n\n# Series\n# prefix\u306f\u306a\u3044, split+expand\u3092\u3055\u3089\u306b\u52a0\u5de5\u3059\u308b\u5fc5\u8981\u304c\u306a\u304f\u306a\u308b\npd.Series([\"a|b|c\", \"e|fg\"]).str.get_dummies()\npd.Series([\"a|b|c\", \"e|fg\"]).str.split(\"|\", expand=True)\n```\n\n\n\n\n<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>a_A</th>\n      <th>a_B</th>\n      <th>b_C</th>\n      <th>b_D</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n```python\nfactors = pd.Series([\"B\", np.nan, \"a\", np.nan, 123, 0.4, np.inf])\nfactors\n```\n\n\n\n\n    0      B\n    1    NaN\n    2      a\n    3    NaN\n    4    123\n    5    0.4\n    6    inf\n    dtype: object\n\n\n\n## \u304a\u307e\u3051\n```python\nfactors.factorize()\n```\n\n\n\n\n    (array([ 0, -1,  1, -1,  2,  3,  4]),\n     Index(['B', 'a', 123, 0.4, inf], dtype='object'))\n", "tags": ["memo"]}