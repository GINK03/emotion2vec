{"tags": ["SystemVerilog", "HDL", "UVM", "Verilog"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306fHollow World\u3092\u51fa\u3059\u307e\u3067\u5230\u9054\u3057\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u5b9f\u969b\u306bDUT(\u691c\u8a3c\u5bfe\u8c61)\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\nUVM\u306e\u89e3\u8aac\u3060\u3068\u3001TLM\u304c\u3041\u30b7\u30fc\u30b1\u30f3\u30b5\u30fc\u304c\u3041\u30c9\u30e9\u30a4\u30d0\u304c\u3041\u2026\u3068\u304b\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u306f\u307e\u305a\u7f6e\u3044\u3066\u304a\u3044\u3066\u3001\u3053\u3053\u3067\u306f\u666e\u901a\u306eSystemVerilog\u306e\u30e2\u30c7\u30eb\u3001DUT\u3092UVM\u306e\u691c\u8a3c\u74b0\u5883\u306b\u8f09\u305b\u3066\u307f\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001APB\u30d0\u30b9\u901a\u4fe1\u3092\u30b5\u30f3\u30d7\u30eb\u306b\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\n\n\u5171\u901a\u30b3\u30fc\u30c9\nUVM\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u3001APB\u306e\u30a2\u30c9\u30ec\u30b9/\u30c7\u30fc\u30bf\u5e45\u3092\u6c7a\u3081\u307e\u3059\u3002\n\ncommon.sv\n`include \"uvm_macros.svh\"\nimport uvm_pkg::*;\n\nparameter MEM_DEPTH = 256;\nparameter ADR_WIDTH = 32;\nparameter DAT_WIDTH = 32;\n\ntypedef logic [ADR_WIDTH-1:0] addr_t;\ntypedef logic [DAT_WIDTH-1:0] data_t;\n\n\n\nDUT\n\u4e2d\u306b\u30ec\u30b8\u30b9\u30bf\u30a2\u30ec\u30a4\u3092\u6301\u3064APB\u30b9\u30ec\u30fc\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059\u3002\n\napb_slave.sv\nmodule apb_slave #(\n  parameter OFFSET = 32'h0000_0000,\n  parameter MW     = 32\n  )(\n  input  logic   rst_n, clk,\n  input  logic   sel,\n  input  logic   enable,\n  input  logic   write,\n  input  addr_t  addr,\n  input  data_t  wdata,\n  output data_t  rdata\n  );\n\n  addr_t  addr_d;\n  data_t  [(MW-1) : 0 ] mem ;\n\n  always_ff @(negedge rst_n, posedge clk)\n    if(! rst_n)\n      addr_d <= '0;\n    else\n      addr_d <= addr;\n\n  always_ff @(negedge rst_n, posedge clk)\n    if(! rst_n)\n      mem <= '0;\n    else\n      if(write && sel && enable && (addr_d>=OFFSET) && (addr_d< OFFSET + MW) )\n        mem[addr_d - OFFSET ] <= wdata;\n\n  always_comb begin\n    if(sel && (! write) && enable && (addr_d>=OFFSET) && (addr_d < OFFSET + MW) )\n      rdata = mem[addr_d - OFFSET];\n    else\n      rdata = '0;\n  end\n\nendmodule\n\n\n\n\u30e2\u30c7\u30eb\n\u30ea\u30fc\u30c9\u30e9\u30a4\u30c8\u6a5f\u80fd\u3092\u6301\u3064APB\u30de\u30b9\u30bf\u30fc\u30e2\u30c7\u30eb\u3067\u3059\u3002\n\napb_master_model.sv\nmodule abp_master(\n  input  logic   rst_n, clk,\n  output logic   sel,\n  output logic   enable,\n  output logic   write,\n  output addr_t  addr,\n  output data_t  wdata,\n  input  data_t  rdata\n  );\n\n  task init();\n    addr   = '0;\n    sel    = '0;\n    enable = '0;\n    write  = '0;\n    wdata  = 'z;\n  endtask\n\n  task do_write(int addr_i, data_t wdata_i);\n    @(posedge clk);\n\n    addr   <= #1 addr_i;\n    sel    <= #1 1'b1;\n    enable <= #1 1'b0;\n    write  <= #1 1'b1;\n    wdata  <= #1 wdata_i;\n\n    @(posedge clk)\n    enable <= #1 1'b1;\n\n    @(posedge clk)\n\n    addr   <= #1 '0;\n    sel    <= #1 '0;\n    enable <= #1 '0;\n    write  <= #1 '0;\n    wdata  <= #1 'z;\n  endtask\n\n  task do_read(int addr_i, output data_t rdata_o);\n\n    @(posedge clk)\n    addr   <= #1 addr_i;\n    sel    <= #1 1'b1;\n    enable <= #1 1'b0;\n    write  <= #1 1'b0;\n\n    @(posedge clk)\n    enable <= #1 1'b1;\n\n    @(posedge clk)\n    rdata_o = rdata;\n\n    addr   <= #1 '0;\n    sel    <= #1 '0;\n    enable <= #1 '0;\n    write  <= #1 '0;\n  endtask\n\n  initial\n    init();\n\nendmodule\n\n\n\n\u30c6\u30b9\u30c8\nUVM\u306e\u30d5\u30ed\u30fc\u306b\u6cbf\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002DUT\u3001\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u30af\u30ed\u30c3\u30af\u767a\u751f\u3092\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3002\u30c6\u30b9\u30c8\u5185\u5bb9\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u30c7\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f\u8aad\u307f\u51fa\u3057\u3068\u5024\u306e\u78ba\u8a8d\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002UVM\u306e\u30af\u30e9\u30b9\u90e8\u5206\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\ntb.sv\nmodule tb();\n\n  logic   rst_n, clk;\n  logic   sel;\n  logic   enable;\n  logic   write;\n  addr_t  addr;\n  data_t  wdata;\n  data_t  rdata;\n\n  apb_slave  #(.OFFSET(32'h0001_0000), .MW(MEM_DEPTH))\n    dut (.*);\n\n  abp_master tu(.*);\n\n  task clk_gen();\n    clk = 0;\n    forever\n      #5 clk = ~ clk;\n  endtask\n\n  class test_base extends uvm_test;\n    `uvm_component_utils(test_base)\n\n    function new(string name, uvm_component parent);\n      super.new(name, parent);\n    endfunction\n\n    function void build_phase(uvm_phase phase);\n      super.build_phase(phase);\n    endfunction\n\n    virtual task reset_phase(uvm_phase phase);\n\n      phase.raise_objection(this);\n\n      `uvm_info(\"base_test\", \"Reset Start\", UVM_MEDIUM)\n\n      rst_n <= '0;\n      repeat(5) @(posedge clk);\n      rst_n <= '1;\n      repeat(5) @(posedge clk);\n\n      `uvm_info(\"base_test\", \"Reset End\", UVM_MEDIUM)\n\n      phase.drop_objection(this);\n\n    endtask\n\n    virtual task main_phase(uvm_phase phase);\n      phase.raise_objection(this);\n      `uvm_info(\"test\", \"Start\", UVM_MEDIUM);\n      `uvm_fatal(get_type_name(), \"No test\");\n      phase.drop_objection(this);\n    endtask\n\n  endclass\n\n  class test0 extends test_base;\n    `uvm_component_utils(test0)\n\n    int  base_addr = 'h1_0000;\n\n    function new(string name, uvm_component parent);\n      super.new(name, parent);\n    endfunction\n\n    function void build_phase(uvm_phase phase);\n      super.build_phase(phase);\n    endfunction\n\n    virtual task main_phase(uvm_phase phase);\n      data_t  rdata, wdata;\n      data_t  mem_t [int];\n\n      phase.raise_objection(this);\n\n      `uvm_info(\"test0\", \"Start\", UVM_MEDIUM);\n\n      for (int i = 0; i < 256; i=i+4) begin\n        addr  = base_addr + i;\n        wdata = $urandom_range(32'hFFFF,0);\n\n        tu.do_write(addr, wdata);  // Write data to DUT\n        mem_t[addr] = wdata;        // Write data to TB\n\n        `uvm_info(\"test0\",\n          $sformatf(\"Write addr == 0x%8h, wdata == 0x%8h\", addr, wdata),\n          UVM_MEDIUM);\n      end\n\n      for (int i = 0; i < 256; i=i+4) begin\n        addr = base_addr + i;\n        tu.do_read(addr, rdata);\n\n         if(rdata != mem_t[addr]) begin\n            `uvm_error(\"Conpare Error\",\n               $sformatf(\"Read addr == 0x%8h, exdata == 0x%8h, rdata == 0x%8h\", addr, mem_t[addr], rdata));\n         end\n         else begin\n            `uvm_info(\"Compare Success\",\n               $sformatf(\"Read addr == 0x%8h, exdata == 0x%8h, rdata == 0x%8h\", addr, mem_t[addr], rdata),\n               UVM_MEDIUM);\n         end\n\n      end\n\n      phase.drop_objection(this);\n    endtask\n\n  endclass\n\n  initial\n    fork\n      clk_gen();\n      run_test();\n    join_none\n\nendmodule\n\n\n\n\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\nUVM\u306e\u30af\u30e9\u30b9\u3067\u306f\u3001uvm_test\u30af\u30e9\u30b9\u304b\u3089\u7d99\u627f\u3057\u305ftest_base\u30af\u30e9\u30b9\u3068\u3001\u3055\u3089\u306b\u305d\u308c\u3092\u7d99\u627f\u3057\u305ftest0\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002uvm_component_utils\u3078\u306e\u30af\u30e9\u30b9\u540d\u306e\u767b\u9332\u3068\u3001function new\u306f\u524d\u56de\u3068\u540c\u69d8\u306e\u304a\u307e\u3058\u306a\u3044\u3067\u3059\u3002\nfunction void build_phase\u3082\u304a\u307e\u3058\u306a\u3044\u3068\u601d\u3063\u3066\u4e0b\u3055\u3044\u3002\n\u3067\u3001task\u306e\u8aac\u660e\u306e\u524d\u306b\u3001UVM\u306e\u30d5\u30ed\u30fc(\u30d5\u30a7\u30a4\u30b8\u30f3\u30b0)\u306b\u3064\u3044\u3066\u3061\u3087\u3063\u3068\u8aac\u660e\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nUVM\u3067\u306f\u30c6\u30b9\u30c8\u30d5\u30ed\u30fc\u304c\u6c7a\u3081\u3089\u308c\u3066\u304a\u308a\u3001\u305d\u308c\u305e\u308c\u306e\u30d5\u30ed\u30fc\u306b\u76f8\u5f53\u3059\u308b\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308c\u3070\u3001UVM\u306e\u30d5\u30ed\u30fc\u3067\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002UVM\u306f\u4ee5\u4e0b\u306e\u30d5\u30ed\u30fc\u3092\u6301\u3061\u307e\u3059\u3002\nhttps://verificationacademy.com/cookbook/phasing\n\u3088\u308a\u5f15\u7528\u3002\n\n\u5148\u306b\u66f8\u3044\u305ffunction void build_phase\u304c\u56f3\u306e\u6700\u521d\u306b\u3042\u308b\u300cBuild Phases\u300d\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\u30bf\u30b9\u30af\u306e\u90e8\u5206\u306f\u3001\u300cRun Phases\u300d\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002Run Phases\u306f\u56f3\u306e\u3088\u3046\u306b\u7d30\u3005\u3068\u3057\u305f\u30b9\u30c6\u30c3\u30d7\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7279\u306b\u8a18\u8ff0\u3057\u306a\u3051\u308c\u3070\u3001UVM\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u3055\u3066\u30b3\u30fc\u30c9\u306b\u623b\u308a\u3001task\u3067\u306freset_phase\u3068main_phase\u3092\u30c1\u30e7\u30a4\u30b9\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30b7\u30ca\u30ea\u30aa\u3092\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002test_base\u30af\u30e9\u30b9\u3067\u306freset_phase\u306b\u3066\u30ea\u30bb\u30c3\u30c8\u306e\u5b9f\u884c\u3001main_phase\u3067\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u3059\u3060\u3051\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ntest0\u30af\u30e9\u30b9\u3067\u306fmain_phase\u3067\u30c6\u30b9\u30c8\u5185\u5bb9\u3092\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\n+UVM_TESTNAME=test_base\u3067\u30c6\u30b9\u30c8\u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067FATAL\u3092\u51fa\u3057\u307e\u3059\u3002\n\nUVM_FATAL tb.sv(53) @ 95: uvm_test_top [test_base] No test\n\n\u3053\u308c\u306f\u3001test_base\u30af\u30e9\u30b9\u3067\u306freset_phase\u3067DUT\u306e\u30ea\u30bb\u30c3\u30c8\u5f8c\u3001main_phase\u3067\u306f\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001uvm_fatal\u304c\u30b3\u30fc\u30eb\u3055\u308c\u3001FATAL\u3068\u306a\u308a\u307e\u3059\u3002\n+UVM_TESTNAME=test0\u3067\u5b9f\u65bd\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u304c\u6b63\u5e38\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002test0\u30af\u30e9\u30b9\u306ftest_base\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u305f\u3081\u3001reset_phase\u304c\u89aa\u30af\u30e9\u30b9\u3067\u5b9f\u884c\u3055\u308c\u305f\u3042\u3068\u3001main_phase\u3067\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u3067\u3059\u3002\n\n\u304a\u308f\u308a\u306b\nUVM\u306f\u30c6\u30b9\u30c8\u624b\u9806\u304c\u6c7a\u307e\u3063\u3066\u3044\u3066\u3001\u305d\u3053\u3092\u62e1\u5f35\u3057\u3066\u30d4\u30fc\u30b9\u3092\u5f53\u3066\u306f\u3081\u308b\u3068\u3001\u4e00\u5fdc\u305d\u308c\u3089\u3057\u3044UVM\u30c6\u30b9\u30c8\u304c\u5b9f\u65bd\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306f\u3044\u3064\u306b\u306a\u308b\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u30e2\u30c7\u30eb\u3092UVM\u30c9\u30e9\u30a4\u30d0\u5316\u3057\u3066\u3001DUT\u3068Interface\u3067\u63a5\u7d9a\u3057\u3066\u3044\u304f\u3068\u3053\u308d\u3092\u3084\u3063\u3066\u307f\u3088\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n##\u306f\u3058\u3081\u306b\n[\u524d\u56de\u306f](http://qiita.com/tethys_seesaa/items/67438fa56501c42169c2)Hollow World\u3092\u51fa\u3059\u307e\u3067\u5230\u9054\u3057\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u5b9f\u969b\u306bDUT(\u691c\u8a3c\u5bfe\u8c61)\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\nUVM\u306e\u89e3\u8aac\u3060\u3068\u3001TLM\u304c\u3041\u30b7\u30fc\u30b1\u30f3\u30b5\u30fc\u304c\u3041\u30c9\u30e9\u30a4\u30d0\u304c\u3041\u2026\u3068\u304b\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u306f\u307e\u305a\u7f6e\u3044\u3066\u304a\u3044\u3066\u3001\u3053\u3053\u3067\u306f\u666e\u901a\u306eSystemVerilog\u306e\u30e2\u30c7\u30eb\u3001DUT\u3092UVM\u306e\u691c\u8a3c\u74b0\u5883\u306b\u8f09\u305b\u3066\u307f\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001APB\u30d0\u30b9\u901a\u4fe1\u3092\u30b5\u30f3\u30d7\u30eb\u306b\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\n##\u30b3\u30fc\u30c9\n###\u5171\u901a\u30b3\u30fc\u30c9\nUVM\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u3001APB\u306e\u30a2\u30c9\u30ec\u30b9/\u30c7\u30fc\u30bf\u5e45\u3092\u6c7a\u3081\u307e\u3059\u3002\n\n```sv:common.sv\n`include \"uvm_macros.svh\"\nimport uvm_pkg::*;\n\nparameter MEM_DEPTH = 256;\nparameter ADR_WIDTH = 32;\nparameter DAT_WIDTH = 32;\n\ntypedef logic [ADR_WIDTH-1:0] addr_t;\ntypedef logic [DAT_WIDTH-1:0] data_t;\n```\n\n###DUT\n\u4e2d\u306b\u30ec\u30b8\u30b9\u30bf\u30a2\u30ec\u30a4\u3092\u6301\u3064APB\u30b9\u30ec\u30fc\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3059\u3002\n\n```sv:apb_slave.sv\nmodule apb_slave #(\n  parameter OFFSET = 32'h0000_0000,\n  parameter MW     = 32\n  )(\n  input  logic   rst_n, clk,\n  input  logic   sel,\n  input  logic   enable,\n  input  logic   write,\n  input  addr_t  addr,\n  input  data_t  wdata,\n  output data_t  rdata\n  );\n\n  addr_t  addr_d;\n  data_t  [(MW-1) : 0 ] mem ;\n\n  always_ff @(negedge rst_n, posedge clk)\n    if(! rst_n)\n      addr_d <= '0;\n    else\n      addr_d <= addr;\n\n  always_ff @(negedge rst_n, posedge clk)\n    if(! rst_n)\n      mem <= '0;\n    else\n      if(write && sel && enable && (addr_d>=OFFSET) && (addr_d< OFFSET + MW) )\n        mem[addr_d - OFFSET ] <= wdata;\n\n  always_comb begin\n    if(sel && (! write) && enable && (addr_d>=OFFSET) && (addr_d < OFFSET + MW) )\n      rdata = mem[addr_d - OFFSET];\n    else\n      rdata = '0;\n  end\n\nendmodule\n```\n\n###\u30e2\u30c7\u30eb\n\u30ea\u30fc\u30c9\u30e9\u30a4\u30c8\u6a5f\u80fd\u3092\u6301\u3064APB\u30de\u30b9\u30bf\u30fc\u30e2\u30c7\u30eb\u3067\u3059\u3002\n\n```sv:apb_master_model.sv\nmodule abp_master(\n  input  logic   rst_n, clk,\n  output logic   sel,\n  output logic   enable,\n  output logic   write,\n  output addr_t  addr,\n  output data_t  wdata,\n  input  data_t  rdata\n  );\n\n  task init();\n    addr   = '0;\n    sel    = '0;\n    enable = '0;\n    write  = '0;\n    wdata  = 'z;\n  endtask\n\n  task do_write(int addr_i, data_t wdata_i);\n    @(posedge clk);\n\n    addr   <= #1 addr_i;\n    sel    <= #1 1'b1;\n    enable <= #1 1'b0;\n    write  <= #1 1'b1;\n    wdata  <= #1 wdata_i;\n\n    @(posedge clk)\n    enable <= #1 1'b1;\n\n    @(posedge clk)\n\n    addr   <= #1 '0;\n    sel    <= #1 '0;\n    enable <= #1 '0;\n    write  <= #1 '0;\n    wdata  <= #1 'z;\n  endtask\n\n  task do_read(int addr_i, output data_t rdata_o);\n\n    @(posedge clk)\n    addr   <= #1 addr_i;\n    sel    <= #1 1'b1;\n    enable <= #1 1'b0;\n    write  <= #1 1'b0;\n\n    @(posedge clk)\n    enable <= #1 1'b1;\n\n    @(posedge clk)\n    rdata_o = rdata;\n\n    addr   <= #1 '0;\n    sel    <= #1 '0;\n    enable <= #1 '0;\n    write  <= #1 '0;\n  endtask\n\n  initial\n    init();\n\nendmodule\n```\n\n###\u30c6\u30b9\u30c8\nUVM\u306e\u30d5\u30ed\u30fc\u306b\u6cbf\u3063\u3066\u8a18\u8ff0\u3057\u307e\u3059\u3002DUT\u3001\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u30af\u30ed\u30c3\u30af\u767a\u751f\u3092\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3002\u30c6\u30b9\u30c8\u5185\u5bb9\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u30c7\u30fc\u30bf\u306e\u66f8\u304d\u8fbc\u307f\u8aad\u307f\u51fa\u3057\u3068\u5024\u306e\u78ba\u8a8d\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002UVM\u306e\u30af\u30e9\u30b9\u90e8\u5206\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n```sv:tb.sv\nmodule tb();\n\n  logic   rst_n, clk;\n  logic   sel;\n  logic   enable;\n  logic   write;\n  addr_t  addr;\n  data_t  wdata;\n  data_t  rdata;\n\n  apb_slave  #(.OFFSET(32'h0001_0000), .MW(MEM_DEPTH))\n    dut (.*);\n\n  abp_master tu(.*);\n\n  task clk_gen();\n    clk = 0;\n    forever\n      #5 clk = ~ clk;\n  endtask\n\n  class test_base extends uvm_test;\n    `uvm_component_utils(test_base)\n\n    function new(string name, uvm_component parent);\n      super.new(name, parent);\n    endfunction\n\n    function void build_phase(uvm_phase phase);\n      super.build_phase(phase);\n    endfunction\n\n    virtual task reset_phase(uvm_phase phase);\n\n      phase.raise_objection(this);\n\n      `uvm_info(\"base_test\", \"Reset Start\", UVM_MEDIUM)\n\n      rst_n <= '0;\n      repeat(5) @(posedge clk);\n      rst_n <= '1;\n      repeat(5) @(posedge clk);\n\n      `uvm_info(\"base_test\", \"Reset End\", UVM_MEDIUM)\n\n      phase.drop_objection(this);\n\n    endtask\n\n    virtual task main_phase(uvm_phase phase);\n      phase.raise_objection(this);\n      `uvm_info(\"test\", \"Start\", UVM_MEDIUM);\n      `uvm_fatal(get_type_name(), \"No test\");\n      phase.drop_objection(this);\n    endtask\n\n  endclass\n\n  class test0 extends test_base;\n    `uvm_component_utils(test0)\n\n    int  base_addr = 'h1_0000;\n\n    function new(string name, uvm_component parent);\n      super.new(name, parent);\n    endfunction\n\n    function void build_phase(uvm_phase phase);\n      super.build_phase(phase);\n    endfunction\n\n    virtual task main_phase(uvm_phase phase);\n      data_t  rdata, wdata;\n      data_t  mem_t [int];\n\n      phase.raise_objection(this);\n\n      `uvm_info(\"test0\", \"Start\", UVM_MEDIUM);\n\n      for (int i = 0; i < 256; i=i+4) begin\n        addr  = base_addr + i;\n        wdata = $urandom_range(32'hFFFF,0);\n\n        tu.do_write(addr, wdata);  // Write data to DUT\n        mem_t[addr] = wdata;        // Write data to TB\n\n        `uvm_info(\"test0\",\n          $sformatf(\"Write addr == 0x%8h, wdata == 0x%8h\", addr, wdata),\n          UVM_MEDIUM);\n      end\n\n      for (int i = 0; i < 256; i=i+4) begin\n        addr = base_addr + i;\n        tu.do_read(addr, rdata);\n\n         if(rdata != mem_t[addr]) begin\n            `uvm_error(\"Conpare Error\",\n               $sformatf(\"Read addr == 0x%8h, exdata == 0x%8h, rdata == 0x%8h\", addr, mem_t[addr], rdata));\n         end\n         else begin\n            `uvm_info(\"Compare Success\",\n               $sformatf(\"Read addr == 0x%8h, exdata == 0x%8h, rdata == 0x%8h\", addr, mem_t[addr], rdata),\n               UVM_MEDIUM);\n         end\n\n      end\n\n      phase.drop_objection(this);\n    endtask\n\n  endclass\n\n  initial\n    fork\n      clk_gen();\n      run_test();\n    join_none\n\nendmodule\n```\n\n##\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\nUVM\u306e\u30af\u30e9\u30b9\u3067\u306f\u3001uvm_test\u30af\u30e9\u30b9\u304b\u3089\u7d99\u627f\u3057\u305ftest_base\u30af\u30e9\u30b9\u3068\u3001\u3055\u3089\u306b\u305d\u308c\u3092\u7d99\u627f\u3057\u305ftest0\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u3002uvm_component_utils\u3078\u306e\u30af\u30e9\u30b9\u540d\u306e\u767b\u9332\u3068\u3001function new\u306f\u524d\u56de\u3068\u540c\u69d8\u306e\u304a\u307e\u3058\u306a\u3044\u3067\u3059\u3002\n\nfunction void build_phase\u3082\u304a\u307e\u3058\u306a\u3044\u3068\u601d\u3063\u3066\u4e0b\u3055\u3044\u3002\n\n\u3067\u3001task\u306e\u8aac\u660e\u306e\u524d\u306b\u3001UVM\u306e\u30d5\u30ed\u30fc(\u30d5\u30a7\u30a4\u30b8\u30f3\u30b0)\u306b\u3064\u3044\u3066\u3061\u3087\u3063\u3068\u8aac\u660e\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nUVM\u3067\u306f\u30c6\u30b9\u30c8\u30d5\u30ed\u30fc\u304c\u6c7a\u3081\u3089\u308c\u3066\u304a\u308a\u3001\u305d\u308c\u305e\u308c\u306e\u30d5\u30ed\u30fc\u306b\u76f8\u5f53\u3059\u308b\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308c\u3070\u3001UVM\u306e\u30d5\u30ed\u30fc\u3067\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002UVM\u306f\u4ee5\u4e0b\u306e\u30d5\u30ed\u30fc\u3092\u6301\u3061\u307e\u3059\u3002\nhttps://verificationacademy.com/cookbook/phasing\n\u3088\u308a\u5f15\u7528\u3002\n![uvm_flow.png](https://qiita-image-store.s3.amazonaws.com/0/32925/803c79d5-629c-ba65-1ee8-f03951eff68e.png)\n\n\u5148\u306b\u66f8\u3044\u305ffunction void build_phase\u304c\u56f3\u306e\u6700\u521d\u306b\u3042\u308b\u300cBuild Phases\u300d\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\u30bf\u30b9\u30af\u306e\u90e8\u5206\u306f\u3001\u300cRun Phases\u300d\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002Run Phases\u306f\u56f3\u306e\u3088\u3046\u306b\u7d30\u3005\u3068\u3057\u305f\u30b9\u30c6\u30c3\u30d7\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7279\u306b\u8a18\u8ff0\u3057\u306a\u3051\u308c\u3070\u3001UVM\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n\u3055\u3066\u30b3\u30fc\u30c9\u306b\u623b\u308a\u3001task\u3067\u306freset_phase\u3068main_phase\u3092\u30c1\u30e7\u30a4\u30b9\u3057\u3066\u3001\u30c6\u30b9\u30c8\u30b7\u30ca\u30ea\u30aa\u3092\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002test_base\u30af\u30e9\u30b9\u3067\u306freset_phase\u306b\u3066\u30ea\u30bb\u30c3\u30c8\u306e\u5b9f\u884c\u3001main_phase\u3067\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u3059\u3060\u3051\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\ntest0\u30af\u30e9\u30b9\u3067\u306fmain_phase\u3067\u30c6\u30b9\u30c8\u5185\u5bb9\u3092\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\n###\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\n+UVM_TESTNAME=test_base\u3067\u30c6\u30b9\u30c8\u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067FATAL\u3092\u51fa\u3057\u307e\u3059\u3002\n\n```\n\nUVM_FATAL tb.sv(53) @ 95: uvm_test_top [test_base] No test\n```\n\n\u3053\u308c\u306f\u3001test_base\u30af\u30e9\u30b9\u3067\u306freset_phase\u3067DUT\u306e\u30ea\u30bb\u30c3\u30c8\u5f8c\u3001main_phase\u3067\u306f\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001uvm_fatal\u304c\u30b3\u30fc\u30eb\u3055\u308c\u3001FATAL\u3068\u306a\u308a\u307e\u3059\u3002\n\n+UVM_TESTNAME=test0\u3067\u5b9f\u65bd\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u304c\u6b63\u5e38\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002test0\u30af\u30e9\u30b9\u306ftest_base\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u305f\u3081\u3001reset_phase\u304c\u89aa\u30af\u30e9\u30b9\u3067\u5b9f\u884c\u3055\u308c\u305f\u3042\u3068\u3001main_phase\u3067\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\u3067\u3059\u3002\n\n##\u304a\u308f\u308a\u306b\nUVM\u306f\u30c6\u30b9\u30c8\u624b\u9806\u304c\u6c7a\u307e\u3063\u3066\u3044\u3066\u3001\u305d\u3053\u3092\u62e1\u5f35\u3057\u3066\u30d4\u30fc\u30b9\u3092\u5f53\u3066\u306f\u3081\u308b\u3068\u3001\u4e00\u5fdc\u305d\u308c\u3089\u3057\u3044UVM\u30c6\u30b9\u30c8\u304c\u5b9f\u65bd\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306f\u3044\u3064\u306b\u306a\u308b\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u30e2\u30c7\u30eb\u3092UVM\u30c9\u30e9\u30a4\u30d0\u5316\u3057\u3066\u3001DUT\u3068Interface\u3067\u63a5\u7d9a\u3057\u3066\u3044\u304f\u3068\u3053\u308d\u3092\u3084\u3063\u3066\u307f\u3088\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n"}