{"context": " More than 1 year has passed since last update.\n\n\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\n\u3068\u3042\u308b\u4e8b\u60c5\u304b\u3089\u8907\u6570\u306e\u8a00\u8a9e\u3067OCR\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082\u81ea\u7531\u306b\u4f7f\u3048\u305d\u3046\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u306a\u304f\u3001\u81ea\u4f5c\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7d44\u307f\u307e\u3057\u305f\u3002\n\n\u4f7f\u3063\u305f\u3082\u306e\nPython\u306e\u753b\u50cf\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b Pillow(PIL) \u3092\u4f7f\u3044\u307e\u3059\u3002\nhttp://pillow.readthedocs.org/en/3.0.x/index.html\n\n\u751f\u6210\u3059\u308b\u753b\u50cf\n1\u6587\u5b57\u306b\u3064\u304d1\u753b\u50cf\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n\u30b9\u30af\u30ea\u30d7\u30c8\n\u751f\u6210\u90e8\u5206\u672c\u4f53\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\nfrom PIL import Image\nfrom PIL import ImageDraw\nfrom PIL import ImageFont\n\ndef generate_char_img(char, fontname='Osaka', size=(64, 64)):\n    img=Image.new('L', size, 'white')\n    draw = ImageDraw.Draw(img)\n    fontsize = int(size[0]*0.8)\n    font = ImageFont.truetype(fontname, fontsize)\n\n    # adjust charactor position.\n    char_displaysize = font.getsize(char)\n    offset = tuple((si-sc)//2 for si, sc in zip(size, char_displaysize))\n    assert all(o>=0 for o in offset)\n\n    # adjust offset, half value is right size for height axis.\n    draw.text((offset[0], offset[1]//2), char, font=font, fill='#000')\n    return img\n\ndef save_img(img, filepath):\n    img.save(filepath, 'png')\n\ngist\u306b\u306f\u5b9f\u884c\u30b3\u30fc\u30c9\u5168\u4f53\u3092\u7f6e\u3044\u3068\u304d\u307e\u3057\u305f\u3002\nhttps://gist.github.com/lazykyama/dabe526246d60fa937d1\n\uff082015/10/18 23:47\u8ffd\u8a18\uff1aImage.save()\u306e\u4ed5\u69d8\u304b\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u533a\u5225\u3055\u308c\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u5c11\u3057\u4fee\u6b63\u3057\u3066\u3044\u307e\u3059\u3002\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\uff09\n\u306a\u304a\u3001\u5404\u8a00\u8a9e\u3054\u3068\u306b\u6587\u5b57\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308c\u3070OK\u3067\u3059\u3002\n\n\u82f1\u8a9e\uff08\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5927\u6587\u5b57\u5c0f\u6587\u5b57\uff0b\u6570\u5b57\uff09\neng_char_list = list(string.digits+string.ascii_letters)\n\n( string\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u2192 http://docs.python.jp/3.3/library/string.html )\n\n\u65e5\u672c\u8a9e\n\u9811\u5f35\u3063\u3066\u9069\u5f53\u306bWikipedia\u3068\u304b\u304b\u3089\u6587\u5b57\u3092\u629c\u3044\u3066\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u4ed6\u306e\u8a00\u8a9e\n(\uff9f\u22bf\uff9f)\uff7c\uff97\uff88\n\n\u6ce8\u610f\n\n\u30d5\u30a9\u30f3\u30c8\u540d\u306f\u3001\u5b9f\u969b\u306e *.ttf \u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\n\n\n\u60c5\u5f31\u3086\u3048\u898b\u4e8b\u306b\u30cf\u30de\u3063\u305f\u6b21\u7b2c\n\n\n\n\n\u53c2\u8003\n\nPython3.3\u5bfe\u5fdc\u753b\u50cf\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea Pillow(PIL) \u306e\u4f7f\u3044\u65b9\nPython PIL \u30c6\u30ad\u30b9\u30c8\u30b5\u30a4\u30ba\u53d6\u5f97\u6642\u306e\u6ce8\u610f\u70b9\nAlphabet range python\n\n\n# \u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\n\n\u3068\u3042\u308b\u4e8b\u60c5\u304b\u3089\u8907\u6570\u306e\u8a00\u8a9e\u3067OCR\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082\u81ea\u7531\u306b\u4f7f\u3048\u305d\u3046\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u306a\u304f\u3001\u81ea\u4f5c\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u305f\u306e\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u7d44\u307f\u307e\u3057\u305f\u3002\n\n# \u4f7f\u3063\u305f\u3082\u306e\n\nPython\u306e\u753b\u50cf\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b Pillow(PIL) \u3092\u4f7f\u3044\u307e\u3059\u3002\nhttp://pillow.readthedocs.org/en/3.0.x/index.html\n\n# \u751f\u6210\u3059\u308b\u753b\u50cf\n\n1\u6587\u5b57\u306b\u3064\u304d1\u753b\u50cf\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n# \u30b9\u30af\u30ea\u30d7\u30c8\n\n\u751f\u6210\u90e8\u5206\u672c\u4f53\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n```py3\nfrom PIL import Image\nfrom PIL import ImageDraw\nfrom PIL import ImageFont\n\ndef generate_char_img(char, fontname='Osaka', size=(64, 64)):\n    img=Image.new('L', size, 'white')\n    draw = ImageDraw.Draw(img)\n    fontsize = int(size[0]*0.8)\n    font = ImageFont.truetype(fontname, fontsize)\n\n    # adjust charactor position.\n    char_displaysize = font.getsize(char)\n    offset = tuple((si-sc)//2 for si, sc in zip(size, char_displaysize))\n    assert all(o>=0 for o in offset)\n\n    # adjust offset, half value is right size for height axis.\n    draw.text((offset[0], offset[1]//2), char, font=font, fill='#000')\n    return img\n\ndef save_img(img, filepath):\n    img.save(filepath, 'png')\n```\n\ngist\u306b\u306f\u5b9f\u884c\u30b3\u30fc\u30c9\u5168\u4f53\u3092\u7f6e\u3044\u3068\u304d\u307e\u3057\u305f\u3002\nhttps://gist.github.com/lazykyama/dabe526246d60fa937d1\n**\uff082015/10/18 23:47\u8ffd\u8a18\uff1a`Image.save()`\u306e\u4ed5\u69d8\u304b\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5927\u6587\u5b57\u5c0f\u6587\u5b57\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u533a\u5225\u3055\u308c\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u5c11\u3057\u4fee\u6b63\u3057\u3066\u3044\u307e\u3059\u3002\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\uff09**\n\n\u306a\u304a\u3001\u5404\u8a00\u8a9e\u3054\u3068\u306b\u6587\u5b57\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3059\u308c\u3070OK\u3067\u3059\u3002\n\n## \u82f1\u8a9e\uff08\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5927\u6587\u5b57\u5c0f\u6587\u5b57\uff0b\u6570\u5b57\uff09\n\n```py3\neng_char_list = list(string.digits+string.ascii_letters)\n```\n( string\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u2192 http://docs.python.jp/3.3/library/string.html )\n\n## \u65e5\u672c\u8a9e\n\n\u9811\u5f35\u3063\u3066\u9069\u5f53\u306bWikipedia\u3068\u304b\u304b\u3089\u6587\u5b57\u3092\u629c\u3044\u3066\u304d\u307e\u3057\u3087\u3046\u3002\n\n## \u4ed6\u306e\u8a00\u8a9e\n\n(\uff9f\u22bf\uff9f)\uff7c\uff97\uff88\n\n# \u6ce8\u610f\n\n* \u30d5\u30a9\u30f3\u30c8\u540d\u306f\u3001\u5b9f\u969b\u306e `*.ttf` \u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u6ce8\u610f\n    - \u60c5\u5f31\u3086\u3048\u898b\u4e8b\u306b\u30cf\u30de\u3063\u305f\u6b21\u7b2c\n\n# \u53c2\u8003\n\n* [Python3.3\u5bfe\u5fdc\u753b\u50cf\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea Pillow(PIL) \u306e\u4f7f\u3044\u65b9](https://librabuch.jp/2013/05/python_pillow_pil/)\n* [Python PIL \u30c6\u30ad\u30b9\u30c8\u30b5\u30a4\u30ba\u53d6\u5f97\u6642\u306e\u6ce8\u610f\u70b9](http://takadamemo.wikidot.com/python004)\n* [Alphabet range python](http://stackoverflow.com/questions/16060899/alphabet-range-python)\n", "tags": ["Python", "pillow", "\u753b\u50cf\u51e6\u7406"]}