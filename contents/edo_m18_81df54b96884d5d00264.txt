{"context": " More than 1 year has passed since last update.\u7c21\u5358\u306aDeferred\u3092\u5b9f\u73fe\u3059\u308b\u3082\u306e\u3002\n/**\n * Deferred object\n * @returns {Object}\n * @returns Object.resolve Provide resolve. \n * @returns Object.done If deferred is resolved, call this function.\n */\nfunction Deferred() {\n\n    var queue = [],\n        data;\n\n    function resolve(arg) {\n\n    var arr = [].concat(queue),\n        len = arr.length,\n        i   = 0;\n\n    queue = null;\n    data  = arg;\n\n    for (; i < len; i++) {\n        arr[i](arg);\n    }\n\n    return this;\n    }\n\n    function done(fnc) {\n\n    var arr = queue;\n\n    arr ? arr.push(fnc) : fnc(data);\n\n    return this;\n    }\n\n    return {\n    resolve: resolve,\n    done   : done\n    };\n}\n\n/**\n * When all deferred object is resolved, will be called done.\n */\nfunction when() {\n\n    var dfd = new Deferred(),\n    arr = [].slice.call(arguments),\n    i = arr.length,\n    len = i;\n\n    while (i--) {\n    arr[i].done(doneHandler);\n    }\n\n    function doneHandler() {\n    --len || dfd.resolve();\n    }\n\n    return dfd;\n}\n\n\n\u7c21\u5358\u306aDeferred\u3092\u5b9f\u73fe\u3059\u308b\u3082\u306e\u3002\n\n```javascript\n/**\n * Deferred object\n * @returns {Object}\n * @returns Object.resolve Provide resolve. \n * @returns Object.done If deferred is resolved, call this function.\n */\nfunction Deferred() {\n    \n    var queue = [],\n    \tdata;\n    \n    function resolve(arg) {\n\t\n\tvar arr = [].concat(queue),\n\t    len = arr.length,\n\t    i   = 0;\n\t\n\tqueue = null;\n\tdata  = arg;\n\t\n\tfor (; i < len; i++) {\n\t    arr[i](arg);\n\t}\n\t\n\treturn this;\n    }\n    \n    function done(fnc) {\n\t\n\tvar arr = queue;\n\t\n\tarr ? arr.push(fnc) : fnc(data);\n\t\n\treturn this;\n    }\n    \n    return {\n\tresolve: resolve,\n\tdone   : done\n    };\n}\n\n/**\n * When all deferred object is resolved, will be called done.\n */\nfunction when() {\n    \n    var dfd = new Deferred(),\n\tarr = [].slice.call(arguments),\n\ti = arr.length,\n\tlen = i;\n\n    while (i--) {\n\tarr[i].done(doneHandler);\n    }\n    \n    function doneHandler() {\n\t--len || dfd.resolve();\n    }\n    \n    return dfd;\n}\n```", "tags": ["js", "Deferred", "JavaScript"]}