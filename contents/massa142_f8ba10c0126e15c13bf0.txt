{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Django Advent Calendar 2016 2\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u3053\u3053\u3067\u3084\u308b\u3053\u3068\n\u81ea\u5206\u81ea\u8eab\u306e\u52c9\u5f37\u3082\u517c\u306d\u3066\u3001Django\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3092\u8ffd\u3063\u3066\u3044\u304d\u307e\u3059\u3002\nDjango\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306f2\u901a\u308a\u306e\u5b9f\u884c\u65b9\u6cd5\u304c\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\nmanage.py\nwsgi.py\n\n\u4eca\u56de\u306fmanage.py\u3092\u53d6\u308a\u4e0a\u3052\u307e\u3059\u3002\n\n\u53c2\u8003\u306b\u3057\u305f\u3082\u306e\ntokibito\u5148\u751f\u306e\u89e3\u8aac\u304c\u3068\u3066\u3082\u308f\u304b\u308a\u3084\u3059\u304f\u3001\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306b\u66f8\u3044\u305f\u3053\u3068\u306f\u5168\u3066\u7db2\u7f85\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nDjango\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4ed5\u7d44\u307f\nDjango 1.7\u3067\u8ffd\u52a0\u3055\u308c\u308bAppConfig\u306e\u7d39\u4ecb\n\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\nDjango 1.10.3\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n$ django-admin startproject mysite && cd mysite\n$ tree\n.\n\u251c\u2500\u2500 manage.py\n\u2514\u2500\u2500 mysite\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 settings.py\n    \u251c\u2500\u2500 urls.py\n    \u2514\u2500\u2500 wsgi.py\n\n1 directory, 5 files\n\n\n\n\u5b9f\u884c\u30b3\u30de\u30f3\u30c9\n$ ./manage.py runserver\n\u3053\u308c\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u5185\u90e8\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\n\nmanage.py\n\n#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"mysite.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail for some other reason. Ensure that the\n        # issue is really that Django is missing to avoid masking other\n        # exceptions on Python 2.\n        try:\n            import django\n        except ImportError:\n            raise ImportError(\n                \"Couldn't import Django. Are you sure it's installed and \"\n                \"available on your PYTHONPATH environment variable? Did you \"\n                \"forget to activate a virtual environment?\"\n            )\n        raise\n    execute_from_command_line(sys.argv)\n\n\n\u74b0\u5883\u5909\u6570\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\n\nexecute_from_command_line\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n\n\u203b Django1.10\u304b\u3089ImportError\u306e\u4f8b\u5916\u51e6\u7406\u304c\u52a0\u308f\u308a\u307e\u3057\u305f\u3002\n\ndjango/core/management/__init__.py\n\n\n__init__.py\ndef execute_from_command_line(argv=None):\n    \"\"\"\n    A simple method that runs a ManagementUtility.\n    \"\"\"\n    utility = ManagementUtility(argv)\n    utility.execute()\n\n\n\n\n\nManagementUtility\u306e\u521d\u671f\u5316\n\nexecute\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n\nManagementUtility\u30af\u30e9\u30b9\u306fdjango-admin\u3068manage.py\u3067\u5b9f\u884c\u3067\u304d\u308b\u30b3\u30de\u30f3\u30c9\u7fa4\u3092\u30ab\u30d7\u30bb\u30eb\u5316\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n\n__init__.py\nclass ManagementUtility(object):\n    \"\"\"\n    Encapsulates the logic of the django-admin and manage.py utilities.\n\n    A ManagementUtility has a number of commands, which can be manipulated\n    by editing the self.commands dictionary.\n    \"\"\"\n    def __init__(self, argv=None):\n        self.argv = argv or sys.argv[:]\n        self.prog_name = os.path.basename(self.argv[0])\n        self.settings_exception = None\n\n\n\n__init.py\ndef execute(self):\n    \"\"\"\n    Given the command-line arguments, this figures out which subcommand is\n    being run, creates a parser appropriate to that command, and runs it.\n    \"\"\"\n    try:\n        subcommand = self.argv[1]\n    except IndexError:\n        subcommand = 'help'  # Display help if no arguments were given.\n\n    # Preprocess options to extract --settings and --pythonpath.\n    # These options could affect the commands that are available, so they\n    # must be processed early.\n    parser = CommandParser(None, usage=\"%(prog)s subcommand [options] [args]\", add_help=False)\n    parser.add_argument('--settings')\n    parser.add_argument('--pythonpath')\n    parser.add_argument('args', nargs='*')  # catch-all\n    try:\n        options, args = parser.parse_known_args(self.argv[2:])\n        handle_default_options(options)\n    except CommandError:\n        pass  # Ignore any option errors at this point.\n\n    no_settings_commands = [\n        'help', 'version', '--help', '--version', '-h',\n        'compilemessages', 'makemessages',\n        'startapp', 'startproject',\n    ]\n\n    try:\n        settings.INSTALLED_APPS\n    except ImproperlyConfigured as exc:\n        self.settings_exception = exc\n        # A handful of built-in management commands work without settings.\n        # Load the default settings -- where INSTALLED_APPS is empty.\n        if subcommand in no_settings_commands:\n            settings.configure()\n\n    if settings.configured:\n        # Start the auto-reloading dev server even if the code is broken.\n        # The hardcoded condition is a code smell but we can't rely on a\n        # flag on the command class because we haven't located it yet.\n        if subcommand == 'runserver' and '--noreload' not in self.argv:\n            try:\n                autoreload.check_errors(django.setup)()\n            except Exception:\n                # The exception will be raised later in the child process\n                # started by the autoreloader. Pretend it didn't happen by\n                # loading an empty list of applications.\n                apps.all_models = defaultdict(OrderedDict)\n                apps.app_configs = OrderedDict()\n                apps.apps_ready = apps.models_ready = apps.ready = True\n\n        # In all other cases, django.setup() is required to succeed.\n        else:\n            django.setup()\n\n    self.autocomplete()\n\n    if subcommand == 'help':\n        if '--commands' in args:\n            sys.stdout.write(self.main_help_text(commands_only=True) + '\\n')\n        elif len(options.args) < 1:\n            sys.stdout.write(self.main_help_text() + '\\n')\n        else:\n            self.fetch_command(options.args[0]).print_help(self.prog_name, options.args[0])\n    # Special-cases: We want 'django-admin --version' and\n    # 'django-admin --help' to work, for backwards compatibility.\n    elif subcommand == 'version' or self.argv[1:] == ['--version']:\n        sys.stdout.write(django.get_version() + '\\n')\n    elif self.argv[1:] in (['--help'], ['-h']):\n        sys.stdout.write(self.main_help_text() + '\\n')\n    else:\n        self.fetch_command(subcommand).run_from_argv(self.argv)\n\n\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u6e21\u3055\u308c\u305f\u7b2c1\u5f15\u6570\u304b\u3089\u5b9f\u884c\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u6c7a\u5b9a(\u3053\u3053\u3067\u306frunserver)\n\u30d1\u30fc\u30b5\u30fc\u3092\u751f\u6210\u3057\u3001--settings\u30aa\u30d7\u30b7\u30e7\u30f3\u30fb--pythonpath\u30aa\u30d7\u30b7\u30e7\u30f3\u30fb\u7b2c2\u5f15\u6570\u4ee5\u964d\u306e\u305d\u306e\u4ed6\u5f15\u6570\u3092\u89e3\u6790\u3057\u3066\u8aad\u307f\u8fbc\u3080\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304c\u8aad\u307f\u8fbc\u307f\u3053\u307e\u308c\u3066\u308b\u304b\u306e\u78ba\u8a8d\n\ndjango.setup()\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9\u5b9f\u884c(*\u3042\u3068\u3067\u8a73\u3057\u304f)\n\nself.fetch_command(subcommand)\u306b\u3088\u3063\u3066run_from_argv\u306e\u4e3b\u4f53\u30af\u30e9\u30b9\u3092\u767a\u898b\n\n\ndjango.contrib.staticfiles.management.commands.runserver.Command(\u89aa\u30af\u30e9\u30b9\u306fdjango.core.management.base.BaseCommand)\n\n\n\nrun_from_argv(self.argv)\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n\n\ndjango.core.management.base.BaseCommand\u306eexecute(self, *args, **options)\u30e1\u30bd\u30c3\u30c9\u304c\u6700\u7d42\u7684\u306b\u547c\u3070\u308c\u308b\n\n\n\n\ndjango/__init__.py\n\nfrom __future__ import unicode_literals\n\nfrom django.utils.version import get_version\n\nVERSION = (1, 10, 3, 'final', 0)\n\n__version__ = get_version(VERSION)\n\n\ndef setup(set_prefix=True):\n    \"\"\"\n    Configure the settings (this happens as a side effect of accessing the\n    first setting), configure logging and populate the app registry.\n    Set the thread-local urlresolvers script prefix if `set_prefix` is True.\n    \"\"\"\n    from django.apps import apps\n    from django.conf import settings\n    from django.urls import set_script_prefix\n    from django.utils.encoding import force_text\n    from django.utils.log import configure_logging\n\n    configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)\n    if set_prefix:\n        set_script_prefix(\n            '/' if settings.FORCE_SCRIPT_NAME is None else force_text(settings.FORCE_SCRIPT_NAME)\n        )\n    apps.populate(settings.INSTALLED_APPS)\n\n\n\u30ed\u30ae\u30f3\u30b0\u306e\u8a2d\u5b9a \n\nFORCE_SCRIPT_NAME\u306e\u8a2d\u5b9a\u304c\u3042\u308c\u3070\u3001URL\u9006\u5f15\u304d\u306e\u969b\u306bprefix\u3092\u3064\u3051\u308b\u3088\u3046\u306b\u8a2d\u5b9a\n\nINSTALLED_APPS\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9\n\n\ndjango/apps/registry.py\n\ndef populate(self, installed_apps=None):\n    \"\"\"\n    Loads application configurations and models.\n\n    This method imports each application module and then each model module.\n\n    It is thread safe and idempotent, but not reentrant.\n    \"\"\"\n    if self.ready:\n        return\n\n    # populate() might be called by two threads in parallel on servers\n    # that create threads before initializing the WSGI callable.\n    with self._lock:\n        if self.ready:\n            return\n\n        # app_config should be pristine, otherwise the code below won't\n        # guarantee that the order matches the order in INSTALLED_APPS.\n        if self.app_configs:\n            raise RuntimeError(\"populate() isn't reentrant\")\n\n        # Load app configs and app modules.\n        for entry in installed_apps:\n            if isinstance(entry, AppConfig):\n                app_config = entry\n            else:\n                app_config = AppConfig.create(entry)\n            if app_config.label in self.app_configs:\n                raise ImproperlyConfigured(\n                    \"Application labels aren't unique, \"\n                    \"duplicates: %s\" % app_config.label)\n\n            self.app_configs[app_config.label] = app_config\n\n        # Check for duplicate app names.\n        counts = Counter(\n            app_config.name for app_config in self.app_configs.values())\n        duplicates = [\n            name for name, count in counts.most_common() if count > 1]\n        if duplicates:\n            raise ImproperlyConfigured(\n                \"Application names aren't unique, \"\n                \"duplicates: %s\" % \", \".join(duplicates))\n\n        self.apps_ready = True\n\n        # Load models.\n        for app_config in self.app_configs.values():\n            all_models = self.all_models[app_config.label]\n            app_config.import_models(all_models)\n\n        self.clear_cache()\n\n        self.models_ready = True\n\n        for app_config in self.get_app_configs():\n            app_config.ready()\n\n        self.ready = True\n\n\n\n\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306e\u305f\u3081\u306e\u30c1\u30a7\u30c3\u30af\n\nINSTALLED_APPS\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308bAppConfig\u306e\u767b\u9332\n\n\n\nAppConfig\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u306f\u306a\u304f\u5358\u306a\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5834\u5408\u306f\u3001AppConfig.create(entry)\u3067AppConfig\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\n\n\n\nAppConfig\u306elabel\u3068name\u304c\u305d\u308c\u305e\u308c\u30e6\u30cb\u30fc\u30af\u3060\u3068\u78ba\u8a8d\u3067\u304d\u305f\u3089\u3001self.apps_ready\u3092True\u3092\u30bb\u30c3\u30c8\n\napp_config.import_models(all_models)\u3067\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u751f\u6210\n\nself.models_ready\u3092True\u3092\u30bb\u30c3\u30c8\n\napp_config.ready()\u3092\u5b9f\u884c\n\n\n\u5404AppConfig\u306eready()\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ed\u30fc\u30c9\u5f8c\u306e\u30d5\u30c3\u30af\u51e6\u7406\u3092\u8a18\u8ff0\u3067\u304d\u308b\n\n\n\nself.ready\u306bTrue\u3092\u30bb\u30c3\u30c8\n\n\n\u304a\u308f\u308a\u306b\n\u3053\u3093\u306a\u611f\u3058\u3067\u7c21\u5358\u306b\u6d41\u308c\u3092\u8ffd\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u5185\u90e8\u306e\u51e6\u7406\u3092\uff11\u3064\u305a\u3064\u7406\u89e3\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u306a\u306b\u304b\u4e88\u671f\u305b\u306c\u3053\u3068\u3067\u56f0\u3063\u305f\u6642\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u306a\u306e\u3067\u30b9\u30c6\u30c3\u30d7\u5b9f\u884c\u3057\u306a\u304c\u3089\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\u3082\u30461\u3064\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8wsgi.py\u306b\u95a2\u3057\u3066\u306f\u3001\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u3067\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059m(_ _)m\n## \u306f\u3058\u3081\u306b\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001[Django Advent Calendar 2016](http://qiita.com/advent-calendar/2016/django) 2\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n## \u3053\u3053\u3067\u3084\u308b\u3053\u3068\n\n\u81ea\u5206\u81ea\u8eab\u306e\u52c9\u5f37\u3082\u517c\u306d\u3066\u3001Django\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3092\u8ffd\u3063\u3066\u3044\u304d\u307e\u3059\u3002\nDjango\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306f2\u901a\u308a\u306e\u5b9f\u884c\u65b9\u6cd5\u304c\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u304c\u7570\u306a\u308a\u307e\u3059\u3002\n\n+ `manage.py`\n+ `wsgi.py`\n\n\u4eca\u56de\u306f`manage.py`\u3092\u53d6\u308a\u4e0a\u3052\u307e\u3059\u3002\n\n## \u53c2\u8003\u306b\u3057\u305f\u3082\u306e\ntokibito\u5148\u751f\u306e\u89e3\u8aac\u304c\u3068\u3066\u3082\u308f\u304b\u308a\u3084\u3059\u304f\u3001\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306b\u66f8\u3044\u305f\u3053\u3068\u306f\u5168\u3066\u7db2\u7f85\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n+ [Django\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4ed5\u7d44\u307f](http://www.slideshare.net/tokibito/django-52696489)\n+ [Django 1.7\u3067\u8ffd\u52a0\u3055\u308c\u308bAppConfig\u306e\u7d39\u4ecb](http://tokibito.hatenablog.com/entry/20140301/1393660554)\n\n## \u30d0\u30fc\u30b8\u30e7\u30f3\n+ Django 1.10.3\n\n## \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n```bash\n$ django-admin startproject mysite && cd mysite\n$ tree\n.\n\u251c\u2500\u2500 manage.py\n\u2514\u2500\u2500 mysite\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 settings.py\n    \u251c\u2500\u2500 urls.py\n    \u2514\u2500\u2500 wsgi.py\n\n1 directory, 5 files\n\n```\n\n## \u5b9f\u884c\u30b3\u30de\u30f3\u30c9\n`$ ./manage.py runserver`\n\n\u3053\u308c\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u5185\u90e8\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n## \u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\n\n## `manage.py`\n\n```python\n#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"mysite.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail for some other reason. Ensure that the\n        # issue is really that Django is missing to avoid masking other\n        # exceptions on Python 2.\n        try:\n            import django\n        except ImportError:\n            raise ImportError(\n                \"Couldn't import Django. Are you sure it's installed and \"\n                \"available on your PYTHONPATH environment variable? Did you \"\n                \"forget to activate a virtual environment?\"\n            )\n        raise\n    execute_from_command_line(sys.argv)\n```\n\n1. \u74b0\u5883\u5909\u6570\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\n1. `execute_from_command_line`\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n\n\u203b Django1.10\u304b\u3089`ImportError`\u306e\u4f8b\u5916\u51e6\u7406\u304c\u52a0\u308f\u308a\u307e\u3057\u305f\u3002\n\n## `django/core/management/__init__.py`\n\n```__init__.py\ndef execute_from_command_line(argv=None):\n    \"\"\"\n    A simple method that runs a ManagementUtility.\n    \"\"\"\n    utility = ManagementUtility(argv)\n    utility.execute()\n\n```\n\n1. `ManagementUtility`\u306e\u521d\u671f\u5316\n1. `execute`\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n\n`ManagementUtility`\u30af\u30e9\u30b9\u306f`django-admin`\u3068`manage.py`\u3067\u5b9f\u884c\u3067\u304d\u308b\u30b3\u30de\u30f3\u30c9\u7fa4\u3092\u30ab\u30d7\u30bb\u30eb\u5316\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002\n\n```__init__.py\nclass ManagementUtility(object):\n    \"\"\"\n    Encapsulates the logic of the django-admin and manage.py utilities.\n\n    A ManagementUtility has a number of commands, which can be manipulated\n    by editing the self.commands dictionary.\n    \"\"\"\n    def __init__(self, argv=None):\n        self.argv = argv or sys.argv[:]\n        self.prog_name = os.path.basename(self.argv[0])\n        self.settings_exception = None\n```\n\n```__init.py\ndef execute(self):\n    \"\"\"\n    Given the command-line arguments, this figures out which subcommand is\n    being run, creates a parser appropriate to that command, and runs it.\n    \"\"\"\n    try:\n        subcommand = self.argv[1]\n    except IndexError:\n        subcommand = 'help'  # Display help if no arguments were given.\n\n    # Preprocess options to extract --settings and --pythonpath.\n    # These options could affect the commands that are available, so they\n    # must be processed early.\n    parser = CommandParser(None, usage=\"%(prog)s subcommand [options] [args]\", add_help=False)\n    parser.add_argument('--settings')\n    parser.add_argument('--pythonpath')\n    parser.add_argument('args', nargs='*')  # catch-all\n    try:\n        options, args = parser.parse_known_args(self.argv[2:])\n        handle_default_options(options)\n    except CommandError:\n        pass  # Ignore any option errors at this point.\n\n    no_settings_commands = [\n        'help', 'version', '--help', '--version', '-h',\n        'compilemessages', 'makemessages',\n        'startapp', 'startproject',\n    ]\n\n    try:\n        settings.INSTALLED_APPS\n    except ImproperlyConfigured as exc:\n        self.settings_exception = exc\n        # A handful of built-in management commands work without settings.\n        # Load the default settings -- where INSTALLED_APPS is empty.\n        if subcommand in no_settings_commands:\n            settings.configure()\n\n    if settings.configured:\n        # Start the auto-reloading dev server even if the code is broken.\n        # The hardcoded condition is a code smell but we can't rely on a\n        # flag on the command class because we haven't located it yet.\n        if subcommand == 'runserver' and '--noreload' not in self.argv:\n            try:\n                autoreload.check_errors(django.setup)()\n            except Exception:\n                # The exception will be raised later in the child process\n                # started by the autoreloader. Pretend it didn't happen by\n                # loading an empty list of applications.\n                apps.all_models = defaultdict(OrderedDict)\n                apps.app_configs = OrderedDict()\n                apps.apps_ready = apps.models_ready = apps.ready = True\n\n        # In all other cases, django.setup() is required to succeed.\n        else:\n            django.setup()\n\n    self.autocomplete()\n\n    if subcommand == 'help':\n        if '--commands' in args:\n            sys.stdout.write(self.main_help_text(commands_only=True) + '\\n')\n        elif len(options.args) < 1:\n            sys.stdout.write(self.main_help_text() + '\\n')\n        else:\n            self.fetch_command(options.args[0]).print_help(self.prog_name, options.args[0])\n    # Special-cases: We want 'django-admin --version' and\n    # 'django-admin --help' to work, for backwards compatibility.\n    elif subcommand == 'version' or self.argv[1:] == ['--version']:\n        sys.stdout.write(django.get_version() + '\\n')\n    elif self.argv[1:] in (['--help'], ['-h']):\n        sys.stdout.write(self.main_help_text() + '\\n')\n    else:\n        self.fetch_command(subcommand).run_from_argv(self.argv)\n```\n\n1. \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u6e21\u3055\u308c\u305f\u7b2c1\u5f15\u6570\u304b\u3089\u5b9f\u884c\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3092\u6c7a\u5b9a(\u3053\u3053\u3067\u306f`runserver`)\n1. \u30d1\u30fc\u30b5\u30fc\u3092\u751f\u6210\u3057\u3001`--settings`\u30aa\u30d7\u30b7\u30e7\u30f3\u30fb`--pythonpath`\u30aa\u30d7\u30b7\u30e7\u30f3\u30fb`\u7b2c2\u5f15\u6570\u4ee5\u964d\u306e\u305d\u306e\u4ed6\u5f15\u6570`\u3092\u89e3\u6790\u3057\u3066\u8aad\u307f\u8fbc\u3080\n1. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u304c\u8aad\u307f\u8fbc\u307f\u3053\u307e\u308c\u3066\u308b\u304b\u306e\u78ba\u8a8d\n1. `django.setup()`\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9\u5b9f\u884c(*\u3042\u3068\u3067\u8a73\u3057\u304f)\n1. `self.fetch_command(subcommand)`\u306b\u3088\u3063\u3066`run_from_argv`\u306e\u4e3b\u4f53\u30af\u30e9\u30b9\u3092\u767a\u898b\n\t1. `django.contrib.staticfiles.management.commands.runserver.Command`(\u89aa\u30af\u30e9\u30b9\u306f`django.core.management.base.BaseCommand`)\n\n1. `run_from_argv(self.argv)`\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n\t1. `django.core.management.base.BaseCommand `\u306e`execute(self, *args, **options)`\u30e1\u30bd\u30c3\u30c9\u304c\u6700\u7d42\u7684\u306b\u547c\u3070\u308c\u308b\n\n\n## `django/__init__.py`\n\n```\nfrom __future__ import unicode_literals\n\nfrom django.utils.version import get_version\n\nVERSION = (1, 10, 3, 'final', 0)\n\n__version__ = get_version(VERSION)\n\n\ndef setup(set_prefix=True):\n    \"\"\"\n    Configure the settings (this happens as a side effect of accessing the\n    first setting), configure logging and populate the app registry.\n    Set the thread-local urlresolvers script prefix if `set_prefix` is True.\n    \"\"\"\n    from django.apps import apps\n    from django.conf import settings\n    from django.urls import set_script_prefix\n    from django.utils.encoding import force_text\n    from django.utils.log import configure_logging\n\n    configure_logging(settings.LOGGING_CONFIG, settings.LOGGING)\n    if set_prefix:\n        set_script_prefix(\n            '/' if settings.FORCE_SCRIPT_NAME is None else force_text(settings.FORCE_SCRIPT_NAME)\n        )\n    apps.populate(settings.INSTALLED_APPS)\n```\n\n1. \u30ed\u30ae\u30f3\u30b0\u306e\u8a2d\u5b9a \n1. `FORCE_SCRIPT_NAME`\u306e\u8a2d\u5b9a\u304c\u3042\u308c\u3070\u3001URL\u9006\u5f15\u304d\u306e\u969b\u306b`prefix`\u3092\u3064\u3051\u308b\u3088\u3046\u306b\u8a2d\u5b9a\n1. `INSTALLED_APPS`\u306b\u8a2d\u5b9a\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30fc\u30c9\n\n### `django/apps/registry.py`\n\n```\ndef populate(self, installed_apps=None):\n    \"\"\"\n    Loads application configurations and models.\n\n    This method imports each application module and then each model module.\n\n    It is thread safe and idempotent, but not reentrant.\n    \"\"\"\n    if self.ready:\n        return\n\n    # populate() might be called by two threads in parallel on servers\n    # that create threads before initializing the WSGI callable.\n    with self._lock:\n        if self.ready:\n            return\n\n        # app_config should be pristine, otherwise the code below won't\n        # guarantee that the order matches the order in INSTALLED_APPS.\n        if self.app_configs:\n            raise RuntimeError(\"populate() isn't reentrant\")\n\n        # Load app configs and app modules.\n        for entry in installed_apps:\n            if isinstance(entry, AppConfig):\n                app_config = entry\n            else:\n                app_config = AppConfig.create(entry)\n            if app_config.label in self.app_configs:\n                raise ImproperlyConfigured(\n                    \"Application labels aren't unique, \"\n                    \"duplicates: %s\" % app_config.label)\n\n            self.app_configs[app_config.label] = app_config\n\n        # Check for duplicate app names.\n        counts = Counter(\n            app_config.name for app_config in self.app_configs.values())\n        duplicates = [\n            name for name, count in counts.most_common() if count > 1]\n        if duplicates:\n            raise ImproperlyConfigured(\n                \"Application names aren't unique, \"\n                \"duplicates: %s\" % \", \".join(duplicates))\n\n        self.apps_ready = True\n\n        # Load models.\n        for app_config in self.app_configs.values():\n            all_models = self.all_models[app_config.label]\n            app_config.import_models(all_models)\n\n        self.clear_cache()\n\n        self.models_ready = True\n\n        for app_config in self.get_app_configs():\n            app_config.ready()\n\n        self.ready = True\n\n```\n\n1. \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306e\u305f\u3081\u306e\u30c1\u30a7\u30c3\u30af\n1. `INSTALLED_APPS`\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b`AppConfig`\u306e\u767b\u9332\n\t1. `AppConfig`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u306f\u306a\u304f\u5358\u306a\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u5834\u5408\u306f\u3001`AppConfig.create(entry)`\u3067`AppConfig`\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\n1. `AppConfig`\u306e`label`\u3068`name`\u304c\u305d\u308c\u305e\u308c\u30e6\u30cb\u30fc\u30af\u3060\u3068\u78ba\u8a8d\u3067\u304d\u305f\u3089\u3001`self.apps_ready`\u3092`True`\u3092\u30bb\u30c3\u30c8\n1. `app_config.import_models(all_models)`\u3067\u30e2\u30c7\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30ad\u30e3\u30c3\u30b7\u30e5\u751f\u6210\n1. `self.models_ready`\u3092`True`\u3092\u30bb\u30c3\u30c8\n1. `app_config.ready()`\u3092\u5b9f\u884c\n\t1. \u5404`AppConfig`\u306e`ready()`\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ed\u30fc\u30c9\u5f8c\u306e\u30d5\u30c3\u30af\u51e6\u7406\u3092\u8a18\u8ff0\u3067\u304d\u308b\n1. `self.ready`\u306b`True`\u3092\u30bb\u30c3\u30c8\n\n\n\n## \u304a\u308f\u308a\u306b\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u7c21\u5358\u306b\u6d41\u308c\u3092\u8ffd\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u5185\u90e8\u306e\u51e6\u7406\u3092\uff11\u3064\u305a\u3064\u7406\u89e3\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u3001\u306a\u306b\u304b\u4e88\u671f\u305b\u306c\u3053\u3068\u3067\u56f0\u3063\u305f\u6642\u306b\u5f79\u7acb\u3061\u307e\u3059\u3002\u306a\u306e\u3067\u30b9\u30c6\u30c3\u30d7\u5b9f\u884c\u3057\u306a\u304c\u3089\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\n\u3082\u30461\u3064\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8`wsgi.py`\u306b\u95a2\u3057\u3066\u306f\u3001\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u3067\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3059m(_ _)m\n", "tags": ["Django", "Python"]}