{"context": " More than 1 year has passed since last update.\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u5229\u7528\u3059\u308b\u30af\u30e9\u30b9\uff08AVFoundation.framework\uff09\n\nAVAssetWriter\nAVAssetWriterInput\nAVAssetWriterInputPixelBufferAdaptor\n\n\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\u4e0a\u8a18\u306e\u30af\u30e9\u30b9\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3001\u52d5\u753b\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u306a\u3093\u3068\u306a\u304f\u540d\u79f0\u304b\u3089\u306a\u306b\u3092\u3057\u3066\u304f\u308c\u308b\u30af\u30e9\u30b9\u306a\u306e\u304b\u306f\u60f3\u50cf\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nAVAssetWriter\n\u307e\u305a\u3001\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306eAVAssetWriter\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n// \u30d1\u30b9\u306f\u9069\u5207\u306a\u4fdd\u5b58\u5148\u3092\u6307\u5b9a\nNSURL *url = [NSURL fileURLWithPath:path];\nAVAssetWriter *videoWriter = [[AVAssetWriter alloc] initWithURL:url flieType:AVFileTypeQuickTimeMovie error:nil];\n\nfileType:\u306b\u6307\u5b9a\u3067\u304d\u308b\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n// File format UTIs\n\n/*!\n @constant AVFileTypeQuickTimeMovie\n @abstract A UTI for the QuickTime movie file format.\n @discussion\n The value of this UTI is @\"com.apple.quicktime-movie\".\n Files are identified with the .mov and .qt extensions.\n */\nAVF_EXPORT NSString *const AVFileTypeQuickTimeMovie NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeMPEG4\n @abstract A UTI for the MPEG-4 file format.\n @discussion\n The value of this UTI is @\"public.mpeg-4\".\n Files are identified with the .mp4 extension.\n */\nAVF_EXPORT NSString *const AVFileTypeMPEG4 NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeAppleM4V\n @discussion\n The value of this UTI is @\"com.apple.m4v-video\".\n Files are identified with the .m4v extension.\n */\nAVF_EXPORT NSString *const AVFileTypeAppleM4V NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeAppleM4A\n @discussion\n The value of this UTI is @\"com.apple.m4a-audio\".\n Files are identified with the .m4a extension.\n */\nAVF_EXPORT NSString *const AVFileTypeAppleM4A NS_AVAILABLE(10_7, 4_0);\n\n#if TARGET_OS_IPHONE\n\n/*!\n @constant AVFileType3GPP\n @abstract A UTI for the 3GPP file format.\n @discussion\n The value of this UTI is @\"public.3gpp\".\n Files are identified with the .3gp, .3gpp, and .sdv extensions.\n */\nAVF_EXPORT NSString *const AVFileType3GPP NS_AVAILABLE_IOS(4_0);\n\n/*!\n @constant AVFileType3GPP2\n @abstract A UTI for the 3GPP file format.\n @discussion\n The value of this UTI is @\"public.3gpp2\".\n Files are identified with the .3g2, .3gp2 extensions.\n */\nAVF_EXPORT NSString *const AVFileType3GPP2 NS_AVAILABLE_IOS(7_0);\n\n#endif // TARGET_OS_IPHONE\n\n/*!\n @constant AVFileTypeCoreAudioFormat\n @abstract A UTI for the CoreAudio file format.\n @discussion\n The value of this UTI is @\"com.apple.coreaudio-format\".\n Files are identified with the .caf extension.\n */\nAVF_EXPORT NSString *const AVFileTypeCoreAudioFormat NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeWAVE\n @abstract A UTI for the WAVE audio file format.\n @discussion\n The value of this UTI is @\"com.microsoft.waveform-audio\".\n Files are identified with the .wav, .wave, and .bwf extensions.\n */\nAVF_EXPORT NSString *const AVFileTypeWAVE NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeAIFF\n @abstract A UTI for the AIFF audio file format.\n @discussion\n The value of this UTI is @\"public.aiff-audio\".\n Files are identified with the .aif and .aiff extensions.\n */\nAVF_EXPORT NSString *const AVFileTypeAIFF NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeAIFC\n @abstract A UTI for the AIFC audio file format.\n @discussion\n The value of this UTI is @\"public.aifc-audio\".\n Files are identified with the .aifc and .cdda extensions.\n */\nAVF_EXPORT NSString *const AVFileTypeAIFC NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeAMR\n @abstract A UTI for the adaptive multi-rate audio file format.\n @discussion\n The value of this UTI is @\"org.3gpp.adaptive-multi-rate-audio\".\n Files are identified with the .amr extension.\n */\nAVF_EXPORT NSString *const AVFileTypeAMR NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeMPEGLayer3\n @abstract A UTI for the MPEG layer 3 audio file format.\n @discussion\n The value of this UTI is @\"public.mp3\".\n Files are identified with the .mp3 extension.\n */\nAVF_EXPORT NSString *const AVFileTypeMPEGLayer3 NS_AVAILABLE(10_9, 7_0);\n\n/*!\n @constant AVFileTypeSunAU\n @abstract A UTI for the Sun/NeXT audio file format.\n @discussion\n The value of this UTI is @\"public.au-audio\".\n Files are identified with the .au and .snd extensions.\n */\nAVF_EXPORT NSString *const AVFileTypeSunAU NS_AVAILABLE(10_9, 7_0);\n\n/*!\n @constant AVFileTypeAC3\n @abstract A UTI for the AC-3 audio file format.\n @discussion\n The value of this UTI is @\"public.ac3-audio\".\n Files are identified with the .ac3 extension.\n */\nAVF_EXPORT NSString *const AVFileTypeAC3 NS_AVAILABLE(10_9, 7_0);\n\n\n\nAVAssetWriterInput\n\u6b21\u306bAVAssetWriterInput\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n// \u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306e\u8a2d\u5b9a\nNSDictionary *outputSettings = \n@{\n    AVVideoCodecKey : AVVideoCodecH264,\n    AVVideoWidthKey : @(width),\n    AVVideoHeightKey: @(height),\n};\n\n// writer input\u3092\u751f\u6210\nAVAssetWriterInput *writerInput = [AVAssetWriterInput assetWriterInputWithMediaType:AVMediaTypeVideo outputSettings:outputSettings];\n\n// writer\u306b\u3001writer input\u3092\u8a2d\u5b9a\n[videoWriter addInput:writerInput];\n\n\n\nAVAssetWriterInputPixelBufferAdaptor\n// source pixel buffer attributes\u3092\u8a2d\u5b9a\nNSDictionary *sourcePixelBufferAttributes = \n@{\n    (NSString *)kCVPixelBufferPixelFormatTypeKey: @(kCVPixelFormatType_32ARGB),\n    (NSString *)kCVPixelBufferWidthKey: @(width),\n    (NSString *)kCVPixelBufferHeightKey: @(height),\n};\n\n// writer input pixel buffer adaptor\u3092\u751f\u6210\nAVAssetWriterInputPixelBufferAdaptor *adaptor = [AVAssetWriterInputPixelBufferAdaptor assetWriterInputPixelBufferAdaptorWithAssetWriterInput:writerInput sourcePixelBufferAttribute:sourcePixelBufferAttributes];\n\n//\nwriterInput.expectsMediaDataInRealTime = YES;\n\n\n\u52d5\u753b\u306e\u751f\u6210\u958b\u59cb\n\u3055\u3066\u3001\u4e0a\u8a18\u307e\u3067\u30673\u3064\u306e\u30af\u30e9\u30b9\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306b\u52d5\u753b\u751f\u6210\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n// \u751f\u6210\u958b\u59cb\u3067\u304d\u308b\u304b\u78ba\u8a8d\nif (![videoWriter startWriting]) {\n    // Error!\n}\n\n// \u52d5\u753b\u751f\u6210\u958b\u59cb\n[videoWriter startSessionAtSourceTime:kCMTimeZero];\n\n// pixel buffer\u3092\u5ba3\u8a00\nCVPixelBufferRef buffer = NULL;\n\n// \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u30ab\u30a6\u30f3\u30c8\nint frameCount = 0;\n\n// \u5404\u753b\u50cf\u306e\u8868\u793a\u3059\u308b\u6642\u9593\nint durationForEachImage = 1;\n\n// FPS\nint32_t fps = 24;\n\n// \u5168\u753b\u50cf\u3092\u30d0\u30c3\u30d5\u30a1\u306b\u8caf\u3081\u3053\u3080\nfor (UIImage *image in images) {\n    @autoreleasepool {\n        if (!adaptor.assetWriterInput.readForMoreMediaData) {\n            break;\n        }\n\n        // \u52d5\u753b\u306e\u6642\u9593\u3092\u751f\u6210\uff08\u305d\u306e\u753b\u50cf\u306e\u8868\u793a\u3059\u308b\u6642\u9593\u3002\u958b\u59cb\u6642\u70b9\u3068\u8868\u793a\u6642\u9593\u3092\u6e21\u3059\uff09\n        CMTime frameTime = CMTimeMake((int64_t)frameCount * fps * durationForEachImage, fps);\n\n        // CGImage\u304b\u3089\u30d0\u30c3\u30d5\u30a1\u3092\u751f\u6210\uff08\u5f8c\u8ff0\uff09\n        buffer = [self pixelBufferFromCGImage:image.CGImage];\n\n        // \u751f\u6210\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u3092\u8ffd\u52a0\n        if (![adaptor appendPixelBuffer:buffer withPresentationTime:frameTime]) {\n            // Error!\n        }\n\n        if (buffer) {\n            CVBufferRelease(buffer);\n        }\n\n        frameCount++;\n    }\n}\n\n// \u52d5\u753b\u751f\u6210\u7d42\u4e86\n[writerInput markAsFinished];\n[writer endSessionAtSourceTime:CMTimeMake((int64_t)(frameCount - 1) * fps * durationForEachImage, fps)];\n\n[videoWriter finishWritingWithCompletionHandler:^{\n    // Finish!\n}];\n\n// \u5f8c\u7247\u4ed8\u3051\nCVPixelBufferPoolRelease(adaptor.pixelBufferPool);\n\n\nCVPixelBufferRef\nCGImage\u304b\u3089CVPixelBufferRef\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n- (CVPixelBufferRef)pixelBufferFromCGImage:(CGImageRef)image\n{\n    NSDictionary *options = @{ (NSString *)kCVPixelBufferCGImageCompatibilityKey: @YES,\n                               (NSString *)kCVPixelBufferCGBitmapContextCompatibilityKey: @YES, };\n\n    CVPixelBufferRef pxbuffer = NULL;\n\n    CGFloat width  = CGImageGetWidth(image);\n    CGFloat height = CGImageGetHeight(image);\n    CVPixelBufferCreate(kCFAllocatorDefault,\n                        width,\n                        height,\n                        kCVPixelFormatType_32ARGB,\n                        (__bridge CFDictionaryRef)options,\n                        &pxbuffer);\n\n    CVPixelBufferLockBaseAddress(pxbuffer, 0);\n    void *pxdata = CVPixelBufferGetBaseAddress(pxbuffer);\n\n    size_t bitsPerComponent       = 8;\n    size_t bytesPerRow            = 4 * width;\n    CGColorSpaceRef rgbColorSpace = CGColorSpaceCreateDeviceRGB();\n    CGContextRef context = CGBitmapContextCreate(pxdata,\n                                                 width,\n                                                 height,\n                                                 bitsPerComponent,\n                                                 bytesPerRow,\n                                                 rgbColorSpace,\n                                                 (CGBitmapInfo)kCGImageAlphaNoneSkipFirst);\n\n    CGContextDrawImage(context, CGRectMake(0, 0, width, height), image);\n    CGColorSpaceRelease(rgbColorSpace);\n    CGContextRelease(context);\n\n    CVPixelBufferUnlockBaseAddress(pxbuffer, 0);\n\n    return pxbuffer;\n}\n\n\n[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://dev.classmethod.jp/smartphone/iphone/ios-tips-7-movie-from-images/)\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n## \u5229\u7528\u3059\u308b\u30af\u30e9\u30b9\uff08AVFoundation.framework\uff09\n\n- AVAssetWriter\n- AVAssetWriterInput\n- AVAssetWriterInputPixelBufferAdaptor\n\n\n## \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n\u4e0a\u8a18\u306e\u30af\u30e9\u30b9\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3001\u52d5\u753b\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u306a\u3093\u3068\u306a\u304f\u540d\u79f0\u304b\u3089\u306a\u306b\u3092\u3057\u3066\u304f\u308c\u308b\u30af\u30e9\u30b9\u306a\u306e\u304b\u306f\u60f3\u50cf\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n### AVAssetWriter\n\n\u307e\u305a\u3001\u66f8\u304d\u8fbc\u3080\u305f\u3081\u306e`AVAssetWriter`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```objc\n// \u30d1\u30b9\u306f\u9069\u5207\u306a\u4fdd\u5b58\u5148\u3092\u6307\u5b9a\nNSURL *url = [NSURL fileURLWithPath:path];\nAVAssetWriter *videoWriter = [[AVAssetWriter alloc] initWithURL:url flieType:AVFileTypeQuickTimeMovie error:nil];\n```\n\n`fileType:`\u306b\u6307\u5b9a\u3067\u304d\u308b\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```objc\n// File format UTIs\n\n/*!\n @constant AVFileTypeQuickTimeMovie\n @abstract A UTI for the QuickTime movie file format.\n @discussion\n The value of this UTI is @\"com.apple.quicktime-movie\".\n Files are identified with the .mov and .qt extensions.\n */\nAVF_EXPORT NSString *const AVFileTypeQuickTimeMovie NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeMPEG4\n @abstract A UTI for the MPEG-4 file format.\n @discussion\n The value of this UTI is @\"public.mpeg-4\".\n Files are identified with the .mp4 extension.\n */\nAVF_EXPORT NSString *const AVFileTypeMPEG4 NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeAppleM4V\n @discussion\n The value of this UTI is @\"com.apple.m4v-video\".\n Files are identified with the .m4v extension.\n */\nAVF_EXPORT NSString *const AVFileTypeAppleM4V NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeAppleM4A\n @discussion\n The value of this UTI is @\"com.apple.m4a-audio\".\n Files are identified with the .m4a extension.\n */\nAVF_EXPORT NSString *const AVFileTypeAppleM4A NS_AVAILABLE(10_7, 4_0);\n\n#if TARGET_OS_IPHONE\n\n/*!\n @constant AVFileType3GPP\n @abstract A UTI for the 3GPP file format.\n @discussion\n The value of this UTI is @\"public.3gpp\".\n Files are identified with the .3gp, .3gpp, and .sdv extensions.\n */\nAVF_EXPORT NSString *const AVFileType3GPP NS_AVAILABLE_IOS(4_0);\n\n/*!\n @constant AVFileType3GPP2\n @abstract A UTI for the 3GPP file format.\n @discussion\n The value of this UTI is @\"public.3gpp2\".\n Files are identified with the .3g2, .3gp2 extensions.\n */\nAVF_EXPORT NSString *const AVFileType3GPP2 NS_AVAILABLE_IOS(7_0);\n\n#endif // TARGET_OS_IPHONE\n\n/*!\n @constant AVFileTypeCoreAudioFormat\n @abstract A UTI for the CoreAudio file format.\n @discussion\n The value of this UTI is @\"com.apple.coreaudio-format\".\n Files are identified with the .caf extension.\n */\nAVF_EXPORT NSString *const AVFileTypeCoreAudioFormat NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeWAVE\n @abstract A UTI for the WAVE audio file format.\n @discussion\n The value of this UTI is @\"com.microsoft.waveform-audio\".\n Files are identified with the .wav, .wave, and .bwf extensions.\n */\nAVF_EXPORT NSString *const AVFileTypeWAVE NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeAIFF\n @abstract A UTI for the AIFF audio file format.\n @discussion\n The value of this UTI is @\"public.aiff-audio\".\n Files are identified with the .aif and .aiff extensions.\n */\nAVF_EXPORT NSString *const AVFileTypeAIFF NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeAIFC\n @abstract A UTI for the AIFC audio file format.\n @discussion\n The value of this UTI is @\"public.aifc-audio\".\n Files are identified with the .aifc and .cdda extensions.\n */\nAVF_EXPORT NSString *const AVFileTypeAIFC NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeAMR\n @abstract A UTI for the adaptive multi-rate audio file format.\n @discussion\n The value of this UTI is @\"org.3gpp.adaptive-multi-rate-audio\".\n Files are identified with the .amr extension.\n */\nAVF_EXPORT NSString *const AVFileTypeAMR NS_AVAILABLE(10_7, 4_0);\n\n/*!\n @constant AVFileTypeMPEGLayer3\n @abstract A UTI for the MPEG layer 3 audio file format.\n @discussion\n The value of this UTI is @\"public.mp3\".\n Files are identified with the .mp3 extension.\n */\nAVF_EXPORT NSString *const AVFileTypeMPEGLayer3 NS_AVAILABLE(10_9, 7_0);\n\n/*!\n @constant AVFileTypeSunAU\n @abstract A UTI for the Sun/NeXT audio file format.\n @discussion\n The value of this UTI is @\"public.au-audio\".\n Files are identified with the .au and .snd extensions.\n */\nAVF_EXPORT NSString *const AVFileTypeSunAU NS_AVAILABLE(10_9, 7_0);\n\n/*!\n @constant AVFileTypeAC3\n @abstract A UTI for the AC-3 audio file format.\n @discussion\n The value of this UTI is @\"public.ac3-audio\".\n Files are identified with the .ac3 extension.\n */\nAVF_EXPORT NSString *const AVFileTypeAC3 NS_AVAILABLE(10_9, 7_0);\n```\n\n-------------------------------------------\n\n### AVAssetWriterInput\n\n\u6b21\u306b`AVAssetWriterInput`\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```objc\n// \u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306e\u8a2d\u5b9a\nNSDictionary *outputSettings = \n@{\n\tAVVideoCodecKey : AVVideoCodecH264,\n\tAVVideoWidthKey : @(width),\n\tAVVideoHeightKey: @(height),\n};\n\n// writer input\u3092\u751f\u6210\nAVAssetWriterInput *writerInput = [AVAssetWriterInput assetWriterInputWithMediaType:AVMediaTypeVideo outputSettings:outputSettings];\n\n// writer\u306b\u3001writer input\u3092\u8a2d\u5b9a\n[videoWriter addInput:writerInput];\n```\n\n-------------------------------------------\n\n### AVAssetWriterInputPixelBufferAdaptor\n\n```objc\n// source pixel buffer attributes\u3092\u8a2d\u5b9a\nNSDictionary *sourcePixelBufferAttributes = \n@{\n\t(NSString *)kCVPixelBufferPixelFormatTypeKey: @(kCVPixelFormatType_32ARGB),\n\t(NSString *)kCVPixelBufferWidthKey: @(width),\n\t(NSString *)kCVPixelBufferHeightKey: @(height),\n};\n\n// writer input pixel buffer adaptor\u3092\u751f\u6210\nAVAssetWriterInputPixelBufferAdaptor *adaptor = [AVAssetWriterInputPixelBufferAdaptor assetWriterInputPixelBufferAdaptorWithAssetWriterInput:writerInput sourcePixelBufferAttribute:sourcePixelBufferAttributes];\n\n//\nwriterInput.expectsMediaDataInRealTime = YES;\n```\n\n## \u52d5\u753b\u306e\u751f\u6210\u958b\u59cb\n\n\u3055\u3066\u3001\u4e0a\u8a18\u307e\u3067\u30673\u3064\u306e\u30af\u30e9\u30b9\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306b\u52d5\u753b\u751f\u6210\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```objc\n// \u751f\u6210\u958b\u59cb\u3067\u304d\u308b\u304b\u78ba\u8a8d\nif (![videoWriter startWriting]) {\n\t// Error!\n}\n\n// \u52d5\u753b\u751f\u6210\u958b\u59cb\n[videoWriter startSessionAtSourceTime:kCMTimeZero];\n\n// pixel buffer\u3092\u5ba3\u8a00\nCVPixelBufferRef buffer = NULL;\n\n// \u73fe\u5728\u306e\u30d5\u30ec\u30fc\u30e0\u30ab\u30a6\u30f3\u30c8\nint frameCount = 0;\n\n// \u5404\u753b\u50cf\u306e\u8868\u793a\u3059\u308b\u6642\u9593\nint durationForEachImage = 1;\n\n// FPS\nint32_t fps = 24;\n\n// \u5168\u753b\u50cf\u3092\u30d0\u30c3\u30d5\u30a1\u306b\u8caf\u3081\u3053\u3080\nfor (UIImage *image in images) {\n    @autoreleasepool {\n        if (!adaptor.assetWriterInput.readForMoreMediaData) {\n            break;\n        }\n        \n        // \u52d5\u753b\u306e\u6642\u9593\u3092\u751f\u6210\uff08\u305d\u306e\u753b\u50cf\u306e\u8868\u793a\u3059\u308b\u6642\u9593\u3002\u958b\u59cb\u6642\u70b9\u3068\u8868\u793a\u6642\u9593\u3092\u6e21\u3059\uff09\n        CMTime frameTime = CMTimeMake((int64_t)frameCount * fps * durationForEachImage, fps);\n        \n        // CGImage\u304b\u3089\u30d0\u30c3\u30d5\u30a1\u3092\u751f\u6210\uff08\u5f8c\u8ff0\uff09\n        buffer = [self pixelBufferFromCGImage:image.CGImage];\n        \n        // \u751f\u6210\u3057\u305f\u30d0\u30c3\u30d5\u30a1\u3092\u8ffd\u52a0\n        if (![adaptor appendPixelBuffer:buffer withPresentationTime:frameTime]) {\n            // Error!\n        }\n        \n        if (buffer) {\n            CVBufferRelease(buffer);\n        }\n        \n        frameCount++;\n    }\n}\n\n// \u52d5\u753b\u751f\u6210\u7d42\u4e86\n[writerInput markAsFinished];\n[writer endSessionAtSourceTime:CMTimeMake((int64_t)(frameCount - 1) * fps * durationForEachImage, fps)];\n\n[videoWriter finishWritingWithCompletionHandler:^{\n\t// Finish!\n}];\n\n// \u5f8c\u7247\u4ed8\u3051\nCVPixelBufferPoolRelease(adaptor.pixelBufferPool);\n```\n\n\n### CVPixelBufferRef\n\nCGImage\u304b\u3089`CVPixelBufferRef`\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```objc\n- (CVPixelBufferRef)pixelBufferFromCGImage:(CGImageRef)image\n{\n    NSDictionary *options = @{ (NSString *)kCVPixelBufferCGImageCompatibilityKey: @YES,\n                               (NSString *)kCVPixelBufferCGBitmapContextCompatibilityKey: @YES, };\n    \n    CVPixelBufferRef pxbuffer = NULL;\n    \n    CGFloat width  = CGImageGetWidth(image);\n    CGFloat height = CGImageGetHeight(image);\n    CVPixelBufferCreate(kCFAllocatorDefault,\n                        width,\n                        height,\n                        kCVPixelFormatType_32ARGB,\n                        (__bridge CFDictionaryRef)options,\n                        &pxbuffer);\n    \n    CVPixelBufferLockBaseAddress(pxbuffer, 0);\n    void *pxdata = CVPixelBufferGetBaseAddress(pxbuffer);\n    \n    size_t bitsPerComponent       = 8;\n    size_t bytesPerRow            = 4 * width;\n    CGColorSpaceRef rgbColorSpace = CGColorSpaceCreateDeviceRGB();\n    CGContextRef context = CGBitmapContextCreate(pxdata,\n                                                 width,\n                                                 height,\n                                                 bitsPerComponent,\n                                                 bytesPerRow,\n                                                 rgbColorSpace,\n                                                 (CGBitmapInfo)kCGImageAlphaNoneSkipFirst);\n    \n    CGContextDrawImage(context, CGRectMake(0, 0, width, height), image);\n    CGColorSpaceRelease(rgbColorSpace);\n    CGContextRelease(context);\n    \n    CVPixelBufferUnlockBaseAddress(pxbuffer, 0);\n    \n    return pxbuffer;\n}\n```\n", "tags": ["iOS", "\u52d5\u753b", "Objective-C"]}