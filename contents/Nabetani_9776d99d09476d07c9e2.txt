{"context": " More than 1 year has passed since last update.\u5148\u65e5\u306e find_all\u306eindex\u7248( http://qiita.com/pocari/items/0b4e632ef2a2b6a97ba9 )\u3068\u3044\u3046\u8a18\u4e8b\u3092\u53d7\u3051\u3066\u3002\n\nruby 1.9\nruby 2.0\nruby 2.1\njruby1.7.12 --1.9\njruby1.7.12 --2.0\n\n\u306e5\u3064\u306e\u74b0\u5883\u3067\u901f\u5ea6\u304c\u3069\u3046\u5909\u308f\u308b\u304b\u8abf\u3079\u3066\u307f\u305f\u3088\u3002\n\n\u308f\u304b\u3063\u305f\u3053\u3068\n\u203b \u3059\u3079\u3066\u3001\u4eca\u56de\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u7bc4\u56f2\u306e\u8a71\u3002\u4e00\u822c\u7684\u304b\u3069\u3046\u304b\u306f\u308f\u304b\u3089\u306a\u3044\u3002\n\n\neach_with_index.select \u3084 flat_map.with_index \u306f\u3001ruby 1.9 \u2192 2.0 \u2192 2.1 \u3068\u3001\u3059\u3054\u304f\u901f\u304f\u306a\u3063\u3066\u3044\u308b\u3002\u90fd\u5408 10\u500d\u4ee5\u4e0a\u3002\nCRuby \u3060\u3068\u3001each_with_index \u3068 each.with_index \u306f\u3001\u540c\u3058\u3063\u307d\u3044\u3002\nJRuby \u3060\u3068\u3001each_with_index \u3088\u308a each.with_index \u304c\u306e\u65b9\u304c\u901f\u3044\u3002\n\nflat_map.with_index{} \u3088\u308a\u3001map.with_index{}.compact \u306e\u65b9\u304c\u901f\u304b\u3063\u305f\u3002\u610f\u5916\u3002\n\n--1.9 \u3068 --2.0 \u306e\u901f\u5ea6\u5dee\u306f\u307b\u3068\u3093\u3069\u306a\u3044\u3002\n\n\n\u7d50\u679c\n\u6a2a\u8ef8\u306f\u6642\u9593\u306a\u306e\u3067\u3001\u9577\u3044\u307b\u3046\u304c\u9045\u3044\u3002\n\n\nruby 1.9\n\"ruby 1.9.3p545 (2014-02-24 revision 45159) [x86_64-darwin13.0.0]\"\nsize : 5000000\n                                   user     system      total        real\n     each_with_index.select:   7.130000   0.010000   7.140000 (  7.145922)\n     each.with_index.select:   7.160000   0.010000   7.170000 (  7.170584)\n   map.with_index{}.compact:   0.580000   0.030000   0.610000 (  0.628142)\n        flat_map.with_index:   7.180000   0.010000   7.190000 (  7.189736)\n          size.times.select:   0.430000   0.000000   0.430000 (  0.433888)\n\n\nruby 2.0\n\"ruby 2.0.0p481 (2014-05-08 revision 45883) [x86_64-darwin13.3.0]\"\nsize : 5000000\n                                   user     system      total        real\n     each_with_index.select:   3.930000   0.010000   3.940000 (  3.936129)\n     each.with_index.select:   3.980000   0.000000   3.980000 (  3.984897)\n   map.with_index{}.compact:   0.560000   0.030000   0.590000 (  0.609218)\n        flat_map.with_index:   3.950000   0.000000   3.950000 (  3.954283)\n          size.times.select:   0.410000   0.000000   0.410000 (  0.411161)\n\n\nruby 2.1\n\"ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-darwin13.0]\"\nsize : 5000000\n                                   user     system      total        real\n     each_with_index.select:   0.690000   0.000000   0.690000 (  0.683463)\n     each.with_index.select:   0.690000   0.000000   0.690000 (  0.693749)\n   map.with_index{}.compact:   0.510000   0.030000   0.540000 (  0.556931)\n        flat_map.with_index:   0.680000   0.000000   0.680000 (  0.679448)\n          size.times.select:   0.380000   0.000000   0.380000 (  0.380963)\n\n\njruby1.7.12 --1.9\n\"jruby 1.7.12 (1.9.3p392) 2014-04-15 643e292 on Java HotSpot(TM) 64-Bit Server VM 1.7.0_07-b10 [darwin-x86_64]\"\nsize : 5000000\n                                   user     system      total        real\n     each_with_index.select:   1.670000   0.020000   1.690000 (  1.466000)\n     each.with_index.select:   0.860000   0.000000   0.860000 (  0.829000)\n   map.with_index{}.compact:   0.620000   0.010000   0.630000 (  0.540000)\n        flat_map.with_index:   0.780000   0.000000   0.780000 (  0.709000)\n          size.times.select:   0.430000   0.000000   0.430000 (  0.368000)\n\n\njruby1.7.12 --2.0\n\"jruby 1.7.12 (2.0.0p195) 2014-04-15 643e292 on Java HotSpot(TM) 64-Bit Server VM 1.7.0_07-b10 [darwin-x86_64]\"\nsize : 5000000\n                                   user     system      total        real\n     each_with_index.select:   1.630000   0.020000   1.650000 (  1.427000)\n     each.with_index.select:   0.880000   0.010000   0.890000 (  0.853000)\n   map.with_index{}.compact:   0.630000   0.010000   0.640000 (  0.528000)\n        flat_map.with_index:   0.760000   0.000000   0.760000 (  0.710000)\n          size.times.select:   0.390000   0.000000   0.390000 (  0.358000)\n\n\n\u5229\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\np RUBY_DESCRIPTION\nrequire \"benchmark\"\n\ndef run_bench( size )\n  puts \"size : #{size}\"\n  ary = Array.new(size){ rand(size) }\n  Benchmark.bm(28) do |x|\n    def x.rep(s); report( \"%28s\" % s ){ yield }; end\n    r=[]\n    x.rep(\"each_with_index.select:\"){\n      r<<ary.each_with_index.select{ |v,ix| v<5 }.map(&:last)\n    }\n    x.rep(\"each.with_index.select:\"){\n      r<<ary.each.with_index.select{ |v,ix| v<5 }.map(&:last)\n    }\n    x.rep(\"map.with_index{}.compact:\"){\n      r<<ary.map.with_index{ |v,ix| v<5 ? ix : nil }.compact\n    }\n    x.rep(\"flat_map.with_index:\"){\n      r<<ary.flat_map.with_index{ |v,ix| v<5 ? [ix] : [] }\n    }\n    x.rep(\"size.times.select:\"){\n      r<<ary.size.times.select{ |i| ary[i]<5 }\n    }\n    puts \"**NG**\" unless r.uniq.size==1\n  end\nend\n\nrun_bench( 5000000 )\n\n\n\u7d50\u8ad6\n\n\neach_with_index \u3088\u308a\u3082 each.with_index \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u306d\u3002\nruby 2.1 \u306f\u7d20\u6674\u3089\u3057\u3044\u306d\uff01\n\u958b\u767a\u8005\u306e\u7686\u69d8 \u3042\u308a\u304c\u3068\u3046\uff01\n\n\u5148\u65e5\u306e find_all\u306eindex\u7248( http://qiita.com/pocari/items/0b4e632ef2a2b6a97ba9 )\u3068\u3044\u3046\u8a18\u4e8b\u3092\u53d7\u3051\u3066\u3002\n\n* ruby 1.9\n* ruby 2.0\n* ruby 2.1\n* jruby1.7.12 --1.9\n* jruby1.7.12 --2.0\n\n\u306e5\u3064\u306e\u74b0\u5883\u3067\u901f\u5ea6\u304c\u3069\u3046\u5909\u308f\u308b\u304b\u8abf\u3079\u3066\u307f\u305f\u3088\u3002\n\n## \u308f\u304b\u3063\u305f\u3053\u3068\n\n\u203b \u3059\u3079\u3066\u3001\u4eca\u56de\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u7bc4\u56f2\u306e\u8a71\u3002\u4e00\u822c\u7684\u304b\u3069\u3046\u304b\u306f\u308f\u304b\u3089\u306a\u3044\u3002\n\n* `each_with_index.select` \u3084 `flat_map.with_index` \u306f\u3001ruby 1.9 \u2192 2.0 \u2192 2.1 \u3068\u3001\u3059\u3054\u304f\u901f\u304f\u306a\u3063\u3066\u3044\u308b\u3002\u90fd\u5408 10\u500d\u4ee5\u4e0a\u3002\n* CRuby \u3060\u3068\u3001`each_with_index` \u3068 `each.with_index` \u306f\u3001\u540c\u3058\u3063\u307d\u3044\u3002\n* JRuby \u3060\u3068\u3001`each_with_index` \u3088\u308a `each.with_index` \u304c\u306e\u65b9\u304c\u901f\u3044\u3002\n* `flat_map.with_index{}` \u3088\u308a\u3001`map.with_index{}.compact` \u306e\u65b9\u304c\u901f\u304b\u3063\u305f\u3002\u610f\u5916\u3002\n* `--1.9` \u3068 `--2.0` \u306e\u901f\u5ea6\u5dee\u306f\u307b\u3068\u3093\u3069\u306a\u3044\u3002\n\n\n## \u7d50\u679c\n\n\u6a2a\u8ef8\u306f\u6642\u9593\u306a\u306e\u3067\u3001\u9577\u3044\u307b\u3046\u304c\u9045\u3044\u3002\n![bench_graph.png](https://qiita-image-store.s3.amazonaws.com/0/6854/7fe4f7b5-b1bd-f351-91e3-dbe50ed3be1e.png \"bench_graph.png\")\n\n### ruby 1.9\n\n```text:\n\"ruby 1.9.3p545 (2014-02-24 revision 45159) [x86_64-darwin13.0.0]\"\nsize : 5000000\n                                   user     system      total        real\n     each_with_index.select:   7.130000   0.010000   7.140000 (  7.145922)\n     each.with_index.select:   7.160000   0.010000   7.170000 (  7.170584)\n   map.with_index{}.compact:   0.580000   0.030000   0.610000 (  0.628142)\n        flat_map.with_index:   7.180000   0.010000   7.190000 (  7.189736)\n          size.times.select:   0.430000   0.000000   0.430000 (  0.433888)\n```\n\n### ruby 2.0\n\n```text:\n\"ruby 2.0.0p481 (2014-05-08 revision 45883) [x86_64-darwin13.3.0]\"\nsize : 5000000\n                                   user     system      total        real\n     each_with_index.select:   3.930000   0.010000   3.940000 (  3.936129)\n     each.with_index.select:   3.980000   0.000000   3.980000 (  3.984897)\n   map.with_index{}.compact:   0.560000   0.030000   0.590000 (  0.609218)\n        flat_map.with_index:   3.950000   0.000000   3.950000 (  3.954283)\n          size.times.select:   0.410000   0.000000   0.410000 (  0.411161)\n```\n\n### ruby 2.1\n\n```text:\n\"ruby 2.1.2p95 (2014-05-08 revision 45877) [x86_64-darwin13.0]\"\nsize : 5000000\n                                   user     system      total        real\n     each_with_index.select:   0.690000   0.000000   0.690000 (  0.683463)\n     each.with_index.select:   0.690000   0.000000   0.690000 (  0.693749)\n   map.with_index{}.compact:   0.510000   0.030000   0.540000 (  0.556931)\n        flat_map.with_index:   0.680000   0.000000   0.680000 (  0.679448)\n          size.times.select:   0.380000   0.000000   0.380000 (  0.380963)\n```\n\n### jruby1.7.12 --1.9\n\n```text:\n\"jruby 1.7.12 (1.9.3p392) 2014-04-15 643e292 on Java HotSpot(TM) 64-Bit Server VM 1.7.0_07-b10 [darwin-x86_64]\"\nsize : 5000000\n                                   user     system      total        real\n     each_with_index.select:   1.670000   0.020000   1.690000 (  1.466000)\n     each.with_index.select:   0.860000   0.000000   0.860000 (  0.829000)\n   map.with_index{}.compact:   0.620000   0.010000   0.630000 (  0.540000)\n        flat_map.with_index:   0.780000   0.000000   0.780000 (  0.709000)\n          size.times.select:   0.430000   0.000000   0.430000 (  0.368000)\n```\n\n### jruby1.7.12 --2.0\n\n```text:\n\"jruby 1.7.12 (2.0.0p195) 2014-04-15 643e292 on Java HotSpot(TM) 64-Bit Server VM 1.7.0_07-b10 [darwin-x86_64]\"\nsize : 5000000\n                                   user     system      total        real\n     each_with_index.select:   1.630000   0.020000   1.650000 (  1.427000)\n     each.with_index.select:   0.880000   0.010000   0.890000 (  0.853000)\n   map.with_index{}.compact:   0.630000   0.010000   0.640000 (  0.528000)\n        flat_map.with_index:   0.760000   0.000000   0.760000 (  0.710000)\n          size.times.select:   0.390000   0.000000   0.390000 (  0.358000)\n```\n\n## \u5229\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```ruby\np RUBY_DESCRIPTION\nrequire \"benchmark\"\n\ndef run_bench( size )\n  puts \"size : #{size}\"\n  ary = Array.new(size){ rand(size) }\n  Benchmark.bm(28) do |x|\n    def x.rep(s); report( \"%28s\" % s ){ yield }; end\n    r=[]\n    x.rep(\"each_with_index.select:\"){\n      r<<ary.each_with_index.select{ |v,ix| v<5 }.map(&:last)\n    }\n    x.rep(\"each.with_index.select:\"){\n      r<<ary.each.with_index.select{ |v,ix| v<5 }.map(&:last)\n    }\n    x.rep(\"map.with_index{}.compact:\"){\n      r<<ary.map.with_index{ |v,ix| v<5 ? ix : nil }.compact\n    }\n    x.rep(\"flat_map.with_index:\"){\n      r<<ary.flat_map.with_index{ |v,ix| v<5 ? [ix] : [] }\n    }\n    x.rep(\"size.times.select:\"){\n      r<<ary.size.times.select{ |i| ary[i]<5 }\n    }\n    puts \"**NG**\" unless r.uniq.size==1\n  end\nend\n\nrun_bench( 5000000 )\n```\n\n## \u7d50\u8ad6\n\n* `each_with_index` \u3088\u308a\u3082 `each.with_index` \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u306d\u3002\n* ruby 2.1 \u306f\u7d20\u6674\u3089\u3057\u3044\u306d\uff01\n* \u958b\u767a\u8005\u306e\u7686\u69d8 \u3042\u308a\u304c\u3068\u3046\uff01\n\n", "tags": ["JRuby", "Ruby"]}