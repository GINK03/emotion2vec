{"context": " More than 1 year has passed since last update.\u671d\u51fa\u639b\u3051\u306bcron\u306e\u8a2d\u5b9a\u3057\u305f\u3089\u3046\u3063\u304b\u308a\u6bce\u5206\u5b9f\u884c\u306e\u30bf\u30b9\u30af\u3068\u304b\u3092\u4f5c\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u81ea\u6212\u306e\u305f\u3081\u30e1\u30e2\u3002\n\n\u307e\u3061\u304c\u308f\u306a\u3044\u305f\u3081\u306b\nhttps://github.com/mtdowling/cron-expression\nmtdowling\u304ccron parser\u3092\u4f5c\u3063\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092\u4f7f\u3063\u3066\u30c1\u30a7\u30c3\u30af\u3059\u308c\u3070\u3044\u3051\u308b\u3002\n\n\u30b5\u30f3\u30d7\u30eb\ncomposer.json\n{\n    \"require\": {\n        \"mtdowling/cron-expression\": \"1.0.*\",\n        \"phpunit/phpunit\": \"*\"\n    }\n}\n\n<?php\nrequire_once 'vendor/autoload.php';\ndate_default_timezone_set(\"Asia/Tokyo\");\n\nclass CronTest extends PHPUnit_Framework_TestCase {\n        // \u30d2\u30e3\u30c3\u30cf\u30fc\n    public static $cron = \"* * * * * /usr/bin/php /path/to/batch.php\\n\";\n\n    public function testCronExpression()\n    {\n        $content = $this->getCronContent();\n        $base = strtotime(date(\"Y-m-d H:i:00\")) + 60;\n\n        foreach (explode(\"\\n\", $content) as $line) {\n            $cron = Cron\\CronExpression::factory(substr($line, 0, $this->seekOffset($line)));\n            // \u4eca\u306e\u6642\u9593\u304b\u30893\u56de\u5206\u306e\u5b9f\u884c\u4e88\u5b9a\u6642\u523b\u3092\u5f97\u308b\n                        //\u5b9f\u969b\u306f\u3082\u3063\u3068\u30ca\u30a4\u30b9\u306b\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3051\u3069\u3053\u308c\u3067\u30c6\u30b9\u30c8\u304d\u308b\n            $dates = $cron->getMultipleRunDates(3);\n            foreach ($dates as $date) {\n                $next = $date->format(\"Y-m-d H:i:s\");\n                $this->assertEquals(date(\"Y-m-d H:i:s\", $base), $next);\n                $base += 60;\n            }\n        }\n    }\n\n    public function seekOffset($line)\n    {\n        $line = trim($line);\n        $length = strlen($line);\n        $count = 0;\n        if ($line[0] == '@') {\n            // \u3066\u304d\u3068\u30fc\u306b\n            return strpos($line, \" \");\n        } else {\n            for ($i = 0; $i < $length; $i++) {\n                if ($line[$i] == \" \") {\n                    $count++;\n                }\n                if ($count == 5) {\n                    return $i+1;\n                }\n            }\n        }\n\n        throw new InvalidArgumentException(\"passed valued doesn't contain cron expression\");\n    }\n\n    public function getCronContent()\n    {\n        return trim(self::$cron);\n    }\n}\n\n\n\u3068\u3044\u3046\u304b\n\u51fa\u639b\u3051\u306bcron\u8a2d\u5b9a\u3059\u308b\u3068\u304b\u3069\u3046\u3088\u3001\u30ef\u30bf\u30b7(\u30fd'\u03c9`)\n\u671d\u51fa\u639b\u3051\u306bcron\u306e\u8a2d\u5b9a\u3057\u305f\u3089\u3046\u3063\u304b\u308a\u6bce\u5206\u5b9f\u884c\u306e\u30bf\u30b9\u30af\u3068\u304b\u3092\u4f5c\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u81ea\u6212\u306e\u305f\u3081\u30e1\u30e2\u3002\n\n## \u307e\u3061\u304c\u308f\u306a\u3044\u305f\u3081\u306b\n\nhttps://github.com/mtdowling/cron-expression\n\nmtdowling\u304ccron parser\u3092\u4f5c\u3063\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092\u4f7f\u3063\u3066\u30c1\u30a7\u30c3\u30af\u3059\u308c\u3070\u3044\u3051\u308b\u3002\n\n\n## \u30b5\u30f3\u30d7\u30eb\n\ncomposer.json\n\n```\n{\n    \"require\": {\n        \"mtdowling/cron-expression\": \"1.0.*\",\n        \"phpunit/phpunit\": \"*\"\n    }\n}\n```\n\n\n```php\n<?php\nrequire_once 'vendor/autoload.php';\ndate_default_timezone_set(\"Asia/Tokyo\");\n\nclass CronTest extends PHPUnit_Framework_TestCase {\n        // \u30d2\u30e3\u30c3\u30cf\u30fc\n\tpublic static $cron = \"* * * * * /usr/bin/php /path/to/batch.php\\n\";\n\n\tpublic function testCronExpression()\n\t{\n\t\t$content = $this->getCronContent();\n\t\t$base = strtotime(date(\"Y-m-d H:i:00\")) + 60;\n\n\t\tforeach (explode(\"\\n\", $content) as $line) {\n\t\t\t$cron = Cron\\CronExpression::factory(substr($line, 0, $this->seekOffset($line)));\n\t\t\t// \u4eca\u306e\u6642\u9593\u304b\u30893\u56de\u5206\u306e\u5b9f\u884c\u4e88\u5b9a\u6642\u523b\u3092\u5f97\u308b\n                        //\u5b9f\u969b\u306f\u3082\u3063\u3068\u30ca\u30a4\u30b9\u306b\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3051\u3069\u3053\u308c\u3067\u30c6\u30b9\u30c8\u304d\u308b\n\t\t\t$dates = $cron->getMultipleRunDates(3);\n\t\t\tforeach ($dates as $date) {\n\t\t\t\t$next = $date->format(\"Y-m-d H:i:s\");\n\t\t\t\t$this->assertEquals(date(\"Y-m-d H:i:s\", $base), $next);\n\t\t\t\t$base += 60;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function seekOffset($line)\n\t{\n\t\t$line = trim($line);\n\t\t$length = strlen($line);\n\t\t$count = 0;\n\t\tif ($line[0] == '@') {\n\t\t\t// \u3066\u304d\u3068\u30fc\u306b\n\t\t\treturn strpos($line, \" \");\n\t\t} else {\n\t\t\tfor ($i = 0; $i < $length; $i++) {\n\t\t\t\tif ($line[$i] == \" \") {\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\t\t\tif ($count == 5) {\n\t\t\t\t\treturn $i+1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthrow new InvalidArgumentException(\"passed valued doesn't contain cron expression\");\n\t}\n\n\tpublic function getCronContent()\n\t{\n\t\treturn trim(self::$cron);\n\t}\n}\n```\n\n## \u3068\u3044\u3046\u304b\n\n\u51fa\u639b\u3051\u306bcron\u8a2d\u5b9a\u3059\u308b\u3068\u304b\u3069\u3046\u3088\u3001\u30ef\u30bf\u30b7(\u30fd'\u03c9`)\n", "tags": ["PHP", "cron"]}