{"context": " More than 1 year has passed since last update.\n\n\u80cc\u666f\nUniRx\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u304d\u306bSubscribe\u306e\u5185\u90e8\u3067Subscribe\u3092\u7d42\u308f\u3089\u305b\u305f\u304f\u306a\u308b\u3053\u3068\u304c\u305f\u307e\u306b\u3042\u308a\u307e\u3059\u3002\nObservable.EveryUpdate()\n    .Subscribe(_ =>\n    {\n        if (/* \u4f55\u304b\u306e\u6761\u4ef6 */)\n        {\n            // \u3053\u3053\u3067Subscribe\u3092\u3084\u3081\u305f\u3044\n        }\n    });\n\n\u3053\u3046\u3044\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u4e8c\u3064\u306e\u65b9\u6cd5\u3067\u89e3\u6c7a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u65b9\u6cd51 TakeUntil\u3092\u4f7f\u3046\nTakeUntil\u3092\u4f7f\u3046\u65b9\u6cd5\u3067\u306f\u3068\u3042\u308b\u6761\u4ef6\u306b\u306a\u3063\u305f\u6642\u306b\u5024\u3092\u6d41\u3059\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3057,\u305d\u308c\u3092\u505c\u6b62\u5224\u5b9a\u306b\u4f7f\u3044\u307e\u3059\u3002\nvar hoge = Observable.EveryUpdate()\n    .Where(_ => /* \u4f55\u304b\u306e\u6761\u4ef6 */)\nObservable.EveryUpdate()\n    .TakeUntil(hoge)\n    .Subscribe(_ =>\n    {\n        // \u4f55\u304b\u306e\u51e6\u7406\n    });\n\n\n\u30b5\u30f3\u30d7\u30eb(\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u6642\u306b\u505c\u6b62)\nvar click = Observable.EveryUpdate()\n    .Where(_ => Input.GetmouseButtonDown(0));\nObservable.EveryUpdate()\n    .TakeUntil(click)\n    .Subscribe(l => Debug.Log(l));\n\n\n\u65b9\u6cd52 IDisposable\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\n\u65b9\u6cd51\u306f\u53b3\u5bc6\u306b\u306fSubscribe\u306e\u4e2d\u304b\u3089\u8cfc\u8aad\u3092\u505c\u6b62\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\nSubscribe\u306e\u4e2d\u304b\u3089\u8cfc\u8aad\u3092\u505c\u6b62\u3059\u308b\u305f\u3081\u306b\u306fSubscribe\u306e\u623b\u308a\u5024\u3092Dispose\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u3053\u3067Subscribe\u306e\u623b\u308a\u5024\u3092\u5909\u6570\u306b\u683c\u7d0d\u3057\u3001\u305d\u306e\u5909\u6570\u3092\u30e9\u30e0\u30c0\u5f0f\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308c\u3070\u8cfc\u8aad\u3092\u505c\u6b62\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n// SingleAssignmentDisposable\u3092\u4f7f\u3046\u65b9\u6cd5\nvar disposable = new SingleAssignmentDisposable();\ndisposable.Disposable = Observable.EveryUpdate()\n    .Subscribe(_ =>\n    {\n        if (/* \u4f55\u304b\u306e\u6761\u4ef6 */)\n        {\n            disposable.Dispose();\n        }\n    });\n\n// CompositeDisposabl\u3092\u4f7f\u3046\u65b9\u6cd5\n// \u8907\u6570\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u540c\u6642\u306b\u6b62\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\nvar disposables = new CompositeDisposable();\nObservable.EveryUpdate()\n    .Subscribe(_ =>\n    {\n        if (/* \u4f55\u304b\u306e\u6761\u4ef6 */)\n        {\n            disposables.Dispose();\n        }\n    })\n    .AddTo(disposables);\nObservable.EveryUpdate()\n    .Subscribe(_ => /* ... */)\n    .AddTo(disposables);\n\n\n\u304a\u307e\u3051\nFirst\u3092\u4f7f\u7528\u3059\u308b\u3068\u5024\u304c\u4e00\u5ea6\u6d41\u308c\u308b\u3068\u8cfc\u8aad\u3092\u505c\u6b62\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057First\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u3082Dispose\u3059\u308b\u51e6\u7406\u306f\u3059\u3050\u306b\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\n// FirstCore\u306e\u30bd\u30fc\u30b9\u3092\u5f15\u7528\nstatic IObservable<T> FirstCore<T>(this IObservable<T> source, bool useDefault)\n{\n    return Observable.Create<T>(observer =>\n    {\n        return source.Subscribe(x =>\n        {\n            observer.OnNext(x);\n            observer.OnCompleted();\n        }, observer.OnError,\n        () =>\n        {\n            if (useDefault)\n            {\n                observer.OnNext(default(T));\n                observer.OnCompleted();\n            }\n            else\n            {\n                observer.OnError(new InvalidOperationException(\"sequence is empty\"));\n            }\n        });\n    });\n}\n\n\u3057\u304b\u3057\u3001First\u3092\u4f7f\u7528\u3059\u308b\u3068\u8cfc\u8aad\u304c\u505c\u6b62\u3055\u308c\u308b\u305f\u3081\u3069\u3053\u304b\u3067Dispose\u3092\u547c\u3093\u3067\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n\u7b54\u3048\u306fObservable.Create\u306b\u6e21\u3059\u95a2\u6570\u306e\u7b2c\u4e00\u5f15\u6570\u3067\u3042\u308bobserver\u306b\u3042\u308a\u307e\u3059\u3002\nobserver\u306fIObserver<T>\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306e\u30af\u30e9\u30b9\u306fAnonymouseObserver\u306a\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\n\u305d\u3057\u3066\u3053\u306eAnonymouseObserver\u306eOnCompleted\u306bDispose\u51e6\u7406\u304c\u3042\u308a\u307e\u3059\u3002\n// AnonymouseObserver\u306e\u30bd\u30fc\u30b9\u3092\u5f15\u7528\n// disposable\u306fObservable.Create\u306b\u6e21\u3057\u305f\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u683c\u7d0d\u3057\u305fSingleAssignmentDisposable\n\npublic void OnCompleted()\n{\n    if (Interlocked.Increment(ref isStopped) == 1)\n    {\n        try\n        {\n            onCompleted();\n        }\n        finally\n        {\n            disposable.Dispose();\n        }\n    }\n}\n\n# \u80cc\u666f\nUniRx\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3068\u304d\u306b`Subscribe`\u306e\u5185\u90e8\u3067`Subscribe`\u3092\u7d42\u308f\u3089\u305b\u305f\u304f\u306a\u308b\u3053\u3068\u304c\u305f\u307e\u306b\u3042\u308a\u307e\u3059\u3002\n\n```csharp\nObservable.EveryUpdate()\n    .Subscribe(_ =>\n    {\n        if (/* \u4f55\u304b\u306e\u6761\u4ef6 */)\n        {\n            // \u3053\u3053\u3067Subscribe\u3092\u3084\u3081\u305f\u3044\n        }\n    });\n```\n\n\u3053\u3046\u3044\u3046\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u4e8c\u3064\u306e\u65b9\u6cd5\u3067\u89e3\u6c7a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u65b9\u6cd51 TakeUntil\u3092\u4f7f\u3046\n`TakeUntil`\u3092\u4f7f\u3046\u65b9\u6cd5\u3067\u306f\u3068\u3042\u308b\u6761\u4ef6\u306b\u306a\u3063\u305f\u6642\u306b\u5024\u3092\u6d41\u3059\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3057,\u305d\u308c\u3092\u505c\u6b62\u5224\u5b9a\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```csharp\nvar hoge = Observable.EveryUpdate()\n    .Where(_ => /* \u4f55\u304b\u306e\u6761\u4ef6 */)\nObservable.EveryUpdate()\n    .TakeUntil(hoge)\n    .Subscribe(_ =>\n    {\n        // \u4f55\u304b\u306e\u51e6\u7406\n    });\n```\n\n### \u30b5\u30f3\u30d7\u30eb(\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u6642\u306b\u505c\u6b62)\n```csharp\nvar click = Observable.EveryUpdate()\n    .Where(_ => Input.GetmouseButtonDown(0));\nObservable.EveryUpdate()\n    .TakeUntil(click)\n    .Subscribe(l => Debug.Log(l));\n```\n\n\n## \u65b9\u6cd52 IDisposable\u3092\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\n\u65b9\u6cd51\u306f\u53b3\u5bc6\u306b\u306f`Subscribe`\u306e\u4e2d\u304b\u3089\u8cfc\u8aad\u3092\u505c\u6b62\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n`Subscribe`\u306e\u4e2d\u304b\u3089\u8cfc\u8aad\u3092\u505c\u6b62\u3059\u308b\u305f\u3081\u306b\u306f`Subscribe`\u306e\u623b\u308a\u5024\u3092`Dispose`\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u3053\u3067`Subscribe`\u306e\u623b\u308a\u5024\u3092\u5909\u6570\u306b\u683c\u7d0d\u3057\u3001\u305d\u306e\u5909\u6570\u3092\u30e9\u30e0\u30c0\u5f0f\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308c\u3070\u8cfc\u8aad\u3092\u505c\u6b62\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```csharp\n\n// SingleAssignmentDisposable\u3092\u4f7f\u3046\u65b9\u6cd5\nvar disposable = new SingleAssignmentDisposable();\ndisposable.Disposable = Observable.EveryUpdate()\n    .Subscribe(_ =>\n    {\n        if (/* \u4f55\u304b\u306e\u6761\u4ef6 */)\n        {\n            disposable.Dispose();\n        }\n    });\n\n// CompositeDisposabl\u3092\u4f7f\u3046\u65b9\u6cd5\n// \u8907\u6570\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u540c\u6642\u306b\u6b62\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\nvar disposables = new CompositeDisposable();\nObservable.EveryUpdate()\n    .Subscribe(_ =>\n    {\n        if (/* \u4f55\u304b\u306e\u6761\u4ef6 */)\n        {\n            disposables.Dispose();\n        }\n    })\n    .AddTo(disposables);\nObservable.EveryUpdate()\n    .Subscribe(_ => /* ... */)\n    .AddTo(disposables);\n```\n\n# \u304a\u307e\u3051\n`First`\u3092\u4f7f\u7528\u3059\u308b\u3068\u5024\u304c\u4e00\u5ea6\u6d41\u308c\u308b\u3068\u8cfc\u8aad\u3092\u505c\u6b62\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3057\u304b\u3057`First`\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u3082`Dispose`\u3059\u308b\u51e6\u7406\u306f\u3059\u3050\u306b\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3002\n\n```csharp\n// FirstCore\u306e\u30bd\u30fc\u30b9\u3092\u5f15\u7528\nstatic IObservable<T> FirstCore<T>(this IObservable<T> source, bool useDefault)\n{\n    return Observable.Create<T>(observer =>\n    {\n        return source.Subscribe(x =>\n        {\n            observer.OnNext(x);\n            observer.OnCompleted();\n        }, observer.OnError,\n        () =>\n        {\n            if (useDefault)\n            {\n                observer.OnNext(default(T));\n                observer.OnCompleted();\n            }\n            else\n            {\n                observer.OnError(new InvalidOperationException(\"sequence is empty\"));\n            }\n        });\n    });\n}\n```\n\n\u3057\u304b\u3057\u3001`First`\u3092\u4f7f\u7528\u3059\u308b\u3068\u8cfc\u8aad\u304c\u505c\u6b62\u3055\u308c\u308b\u305f\u3081\u3069\u3053\u304b\u3067`Dispose`\u3092\u547c\u3093\u3067\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n\u7b54\u3048\u306f`Observable.Create`\u306b\u6e21\u3059\u95a2\u6570\u306e\u7b2c\u4e00\u5f15\u6570\u3067\u3042\u308b`observer`\u306b\u3042\u308a\u307e\u3059\u3002\n`observer`\u306f`IObserver<T>`\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306e\u30af\u30e9\u30b9\u306f`AnonymouseObserver`\u306a\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002\n\u305d\u3057\u3066\u3053\u306e`AnonymouseObserver`\u306e`OnCompleted`\u306b`Dispose`\u51e6\u7406\u304c\u3042\u308a\u307e\u3059\u3002\n\n```csharp\n// AnonymouseObserver\u306e\u30bd\u30fc\u30b9\u3092\u5f15\u7528\n// disposable\u306fObservable.Create\u306b\u6e21\u3057\u305f\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u683c\u7d0d\u3057\u305fSingleAssignmentDisposable\n\npublic void OnCompleted()\n{\n    if (Interlocked.Increment(ref isStopped) == 1)\n    {\n        try\n        {\n            onCompleted();\n        }\n        finally\n        {\n            disposable.Dispose();\n        }\n    }\n}\n```\n", "tags": ["Unity", "UniRx", "C#"]}