{"context": "\u30c9\u30fc\u30e2\u3001Scala\u6b743\u9031\u9593\u30a8\u30f3\u30b8\u30cb\u30a2\u3067\u3059\u3002\n\u5b9f\u969b\u3001\u521d\u6b69\u7684\u306a\u3053\u3068\u3059\u304e\u3066\u30b0\u30b0\u3063\u3066\u3082\u898b\u3064\u304b\u3089\u305a\u7206\u767a\u56db\u6563\u3002\n\n\u3069\u3046\u3044\u3046\u3053\u3068\uff1f\n\u4e0b\u8a18\u306e\u3088\u3046\u306bSQL\u3067\u53d6\u5f97\u3057\u305f\u65e5\u6b21\u306e\u96c6\u8a08\u30c7\u30fc\u30bf(\u30ec\u30b3\u30fc\u30c9)\u3092\u7279\u5b9a\u306e\u30ad\u30fc\u3067\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u305f\u3088\u3046\u306aJSON\u3067\u8fd4\u3057\u305f\u3044\u3053\u3068\u306a\u3044\u3067\u3059\u304b\uff1f1\nSQL\u306e\u7d50\u679c\n code | date       | value\n------+------------+-------\n foo  | 2015-12-01 |  100\n foo  | 2015-12-02 |  105\n foo  | 2015-12-03 |   90\n bar  | 2015-12-01 |  200\n bar  | 2015-12-02 |  250\n bar  | 2015-12-03 |  230\n \u30fb\n \u30fb\n \u30fb\n\n\u8fd4\u3057\u305f\u3044JSON\n[\n  {\n    \"code\": \"foo\",\n    \"list\": [\n      { \"date\": \"2015-12-01\", \"value\": 100 },\n      { \"date\": \"2015-12-02\", \"value\": 105 },\n      { \"date\": \"2015-12-03\", \"value\":  90 }\n    ]\n  },\n  {\n    \"code\": \"bar\",\n    \"list\": [\n      { \"date\": \"2015-12-01\", \"value\": 200 },\n      { \"date\": \"2015-12-02\", \"value\": 250 },\n      { \"date\": \"2015-12-03\", \"value\": 230 }\n    ]\n  },\n  ...\n]\n\nModel\n\nSummary.scala\ncase class Summary(\n  code: String,\n  list: Seq[(LocalDate, Option[Int])]\n)\n\n\n\u65e5\u6642\u306fUNIX epoch(\u30df\u30ea\u79d2)\u3067\u6271\u3046\u3053\u3068\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u308f\u304b\u308a\u3084\u3059\u3055\u306e\u305f\u3081ISO 8601\u5f62\u5f0f(org.joda.time.LocalDate)\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30ec\u30b3\u30fc\u30c9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u5909\u63db\n\n\u3068\u308a\u3042\u3048\u305a\u51e6\u7406\u3092\u8003\u3048\u308b\ngroupBy()\u3068\u3044\u3046\u305d\u306e\u540d\u3082\u30ba\u30d0\u30ea\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3048\u3070code\u6bce\u306b\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3089\u308c\u305d\u3046\u306a\u6c17\u304c\u3057\u3066\u304d\u307e\u3059\u3002\n  val rows: List[(String, LocalDate, Option[Int])]\n\n  rows.groupBy { case (code, _, _) => code }\n      .map { case (code, rows) =>\n        Summary(\n          code,\n          rows.map { case (_, date, value) => (date, value) }\n        )\n      }\n      .toSeq\n\n\u3084\u3063\u305f\u304b\uff01\uff1f\n\u3067\u3059\u304cTraversableLike.groupBy()\u306fimmutable.Map\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u30ad\u30fc\u306e\u9806\u5e8f\u3001\u3064\u307e\u308a\u4eca\u56de\u306e\u4f8b\u3067\u3044\u3046code\u306e\u4e26\u3073\u9806\u304c\u4fdd\u8a3c\u3055\u308c\u307e\u305b\u3093\u30022\n\u305d\u306e\u305f\u3081\u3001SQL\u3067order by\u3057\u305f\u9806\u3067\u30c7\u30fc\u30bf\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002\n\u30ad\u30fc\u306e\u9806\u5e8f\u306f\u7dad\u6301\u3057\u305f\u3044\u306e\u3067mutable.LinkedHashMap\u3092\u4f7f\u3048\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n  val rows: List[(String, LocalDate, Option[Int])]\n\n  val m = mutable.LinkedHashMap.empty[String, mutable.Buffer[(String, LocalDate, Option[Int])]]\n\n  rows.foreach {\n    case (code, _, _) =>\n      m.getOrElseUpdate(code, mutable.Buffer.empty) += row\n  }\n\n  m.map {\n    case (code, rows) =>\n      Summary(\n        code,\n        rows.map { case (_, date_ value) => (date, value) }\n      )\n  }.toSeq\n\n\n\u51e6\u7406\u3092\u6c4e\u7528\u5316\u3057\u3066\u307f\u308b\n\u30ec\u30b3\u30fc\u30c9\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066Map\u3067\u8fd4\u3059\u51e6\u7406\u306f\u5225\u306e\u6240\u3067\u3082\u4f7f\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306e\u3067\u3001\u6c4e\u7528\u5316\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n\u65b9\u6cd51: Package object\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308b\n\npackage.scala\nimport scala.collection.mutable\n\npackage object models {\n\n  def groupBy[A, K, V](rows: Traversable[A])(f: A => (K, V)): mutable.LinkedHashMap[K, mutable.Buffer[V]] = {\n    val m = mutable.LinkedHashMap.empty[K, mutable.Buffer[V]]\n    for (row <- rows) {\n      val (k, v) = f(row)\n      m.getOrElseUpdate(k, mutable.Buffer.empty) += v\n    }\n    m\n  }\n\n}\n\n\n\u3067\u304d\u3042\u304c\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\u3002\uff083\u5206\u30af\u30c3\u30ad\u30f3\u30b0\uff09\n\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u305f\u3044rows: Traversable[A]\u3068\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u306eKey\u3068Value\u3092\u751f\u6210\u3059\u308b\u95a2\u6570f: A => (K, V)\u3092\u6e21\u3059\u3068\u3001LinkedHashMap[K, Buffer[V]]\u3092\u8fd4\u3057\u307e\u3059\u3002\nrows\u3068f\u3092\u30ab\u30ea\u30fc\u5316\u3057\u3066\u3044\u308b\u306e\u304c\u6c17\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3053\u308c\u306f2\u3064\u306eParameter list\u306b\u5206\u3051\u308b\u3053\u3068\u3067row\u306e\u578bA\u3092\u78ba\u5b9a\u3055\u305b\u3066\u304b\u3089\u3001f: A => (K, V)\u306e\u578b\u63a8\u8ad6\u3092\u3055\u305b\u308b\u305f\u3081\u3067\u3059\u3002\n\u53c2\u8003URL\nScala\u306e\u578b\u63a8\u8ad6\u306b\u3064\u3044\u3066 - Togetter\u307e\u3068\u3081\n\u53c2\u8003\u66f8\u7c4d\nScala\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7b2c2\u7248\n16.10 Scala\u306e\u578b\u63a8\u8ad6\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7406\u89e3\u3059\u308b (P.314-317)\nScala\u30d1\u30ba\u30eb 36\u306e\u7f60\u304b\u3089\u5b66\u3076\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\nPUZZLE 6\u3000\u5f15\u6570\u3067\u3082\u3046\u30c9\u30f3\u5f15\u304d!\u2015\u2015Arg Arrgh! (P.47-52)\n\n\u65b9\u6cd52: Extension method(\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9)\u3092\u5b9a\u7fa9\u3059\u308b\nScala\u306fImplicit Class\u3067\u65e2\u5b58\u30af\u30e9\u30b9\u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u62e1\u5f35(\u8ffd\u52a0)\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u5229\u7528\u3057\u3066Traversable\u306bLikedHashMap\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3059\u308bgroupByOrdered()\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n  implicit class GroupByOrderedImpl[A](val s: Traversable[A]) extends AnyVal {\n\n    def groupByOrdered[K, V](f: A => (K, V)): mutable.Map[K, mutable.Buffer[V]] = {\n      val m = mutable.LinkedHashMap.empty[K, mutable.Buffer[V]]\n      for (i <- s) {\n        val (k, v) = f(i)\n        m.getOrElseUpdate(k, mutable.Buffer.empty) += v\n      }\n      m\n    }\n\n  }\n\n  val rows: List[(String, LocalDate, Option[Int])]\n\n  rows.groupByOrdered {\n        case (code, date, value) => code -> (date, value)\n      }.map {\n        case (code, rows) => Summary(code, rows)\n      }.toSeq\n\nTraversable\u304c\u62e1\u5f35\u3055\u308cgroupByOrdered()\u304c\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3067\u3059\u304c\u3001\u500b\u4eba\u7684\u306b\u4eca\u56de\u3084\u308a\u305f\u3044\u3053\u3068\u306b\u5bfe\u3057\u3066\u65b9\u6cd5\u304c\u5927\u3052\u3055\u3059\u304e\u308b\u6c17\u304c\u3057\u305f\u305f\u3081\u3001\u63a1\u7528\u306f\u898b\u9001\u308a\u307e\u3057\u305f\u3002\n\u53c2\u8003URL\ncollections - Scala GroupBy preserving insertion order? - Stack Overflow\nValue Classes and Universal Traits - Scala Documentation\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089JSON\u3078\u306e\u5909\u63db\nDB\u304b\u3089\u53d6\u5f97\u3057\u305f\u30ec\u30b3\u30fc\u30c9\u3092code\u6bce\u306b\u307e\u3068\u3081\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u8fd4\u3059Summary.find(from: LocalDate, to: LocalDate)\u304c\u5b9f\u88c5\u3067\u304d\u307e\u3057\u305f\u3002\u6b21\u306fSummaryController\u3092\u5b9f\u88c5\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306bJSON\u3092\u8fd4\u3059\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\nURL\u306e\u30a4\u30e1\u30fc\u30b8\nhttp://example.com/summary?from=1448895600000&to=1451487600000\n\nfrom: 2015-12-01 00:00:00.000\nto  : 2015-12-31 00:00:00.000\n\nroutes\nGET     /summary                    controllers.SummaryController.findSummary(from: Long, to: Long)\n\nSummaryController.scala\nclass SummaryController extends Controller {\n\n  def findSummary(from: Long, to: Long) = Action {\n    val list = Summary.find(new LocalDate(from), new LocalDate(to))\n\n    if (list.isEmpty) NotFound\n    else Ok(Json.toJson(list))\n  }\n\n}\n\nJson.toJson()\u306f\u5f15\u6570\u306e\u578b\u306b\u5fdc\u3058\u305f\u6697\u9ed9\u306eWrites\u3092\u4f7f\u7528\u3057\u3066JsValue\u3092\u8fd4\u3057\u307e\u3059\u3002\u57fa\u672c\u7684\u306a\u578b\u306b\u3064\u3044\u3066\u306fDefaultWrites\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u30023\napp/models/Summary.scala\u306bSummary\u306e\u305f\u3081\u306eWrites\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n  implicit val summaryWrites = new Writes[Summary] {\n    override def writes(s: Summary): JsValue = Json.obj(\n      \"code\" -> s.code,\n      \"list\" -> s.list.map {\n        case (date, value) => Json.obj(\n          \"date\" -> date,\n          \"value\" -> value\n        )\n      }\n    )\n  }\n\nvalue\u306fOption[Int]\u578b\u306a\u306e\u3067null\u306e\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001null\u306e\u6642\u306b0\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306fvalue.getOrElse[Int](0)\u3068\u66f8\u304d\u307e\u3059\u30024\n\u3053\u308c\u3067\u3067\u304d\u305f\uff08\u30b3\u30de\u30f3\u30c9\u30fc\uff09\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e00\u89a7\nimport\u6587\u306f\u7701\u7565\u3057\u3066\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5217\u6319\u3057\u3066\u304a\u304d\u307e\u3059\u3002\napp/models/Summary.scala\ncase class Summary(\n    code: String,\n    list: Seq[(LocalDate, Option[Int])]\n    )\n\nobject Summary {\n\n  private val simple = {\n    get[String](\"code\") ~\n    get[LocalDate](\"date\") ~\n    get[Option[Int]](\"value\") map {\n      case code ~ date ~ value => (code, date, value)\n    }\n  }\n\n  implicit val summaryWrites = new Writes[Summary] {\n    override def writes(s: Summary): JsValue = Json.obj(\n      \"code\" -> s.code,\n      \"list\" -> s.list.map {\n        case (date, value) => Json.obj(\n          \"date\" -> date,\n          \"value\" -> value\n        )\n      }\n    )\n  }\n\n  def find(from: LocalDate, to: LocalDate): Seq[Summary] = {\n    val rows = DB.withTransaction { implicit conn =>\n      SQL(\"\"\"\n        |SELECT code, date, SUM(value) AS value\n        |FROM summary\n        |WHERE date BETWEEN {from} AND {to}\n        |GROUP BY code, date\n        |ORDER BY code, date\n        |\"\"\".stripMargin\n      ).on(\n        'from -> from.toDate,\n        'to -> to.toDate\n      ).as(simple.*)\n    }\n\n    models.groupBy(rows) {\n            case (code, date, value) => code -> (date, value)\n          }.map {\n            case (code, rows) => Summary(code, rows)\n          }.toSeq\n  }\n\n}\n\napp/models/package.scala\nimport scala.collection.mutable\n\npackage object models {\n\n  def groupBy[A, K, V](rows: Traversable[A])(f: A => (K, V)): mutable.LinkedHashMap[K, mutable.Buffer[V]] = {\n    val m = mutable.LinkedHashMap.empty[K, mutable.Buffer[V]]\n    for (row <- rows) {\n      val (k, v) = f(row)\n      m.getOrElseUpdate(k, mutable.Buffer.empty) += v\n    }\n    m\n  }\n\n}\n\napp/controllers/SummaryController.scla\nclass SummaryController extends Controller {\n\n  def findSummary(from: Long, to: Long) = Action {\n    val list = Summary.find(new LocalDate(from), new LocalDate(to))\n\n    if (list.isEmpty) NotFound\n    else Ok(Json.toJson(list))\n  }\n\n}\n\nconf/routes\nGET     /summary                    controllers.SummaryController.findSummary(from: Long, to: Long)\n\n\n\n\n\n\n\u3042\u3001\u7121\u3044\u3002\u305d\u308c\u3092\u3061\u3087\u3063\u3068\u3084\u3063\u3066\u3082\u3089\u3046\u304b\u3089\u3002\u00a0\u21a9\n\n\n\u5024\u306e\u9806\u5e8f\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u3067\u30eb\u30fc\u30d7\u3057\u8ffd\u52a0\u3055\u308c\u308b\u306e\u3067\u4fdd\u8a3c(\u7dad\u6301)\u3055\u308c\u307e\u3059\u3002\u00a0\u21a9\n\n\nTraversable\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002Seq\u306a\u3069\u306b\u5bfe\u3059\u308bWrites\u3092\u5b9a\u7fa9\u3057\u306a\u304f\u3066\u3088\u3044\u306e\u306f\u3053\u306e\u305f\u3081\u3067\u3059\u3002\u00a0\u21a9\n\n\n\u578b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u5b9f\u884c\u6642\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u6012\u3089\u308c\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n\u30c9\u30fc\u30e2\u3001Scala\u6b743\u9031\u9593\u30a8\u30f3\u30b8\u30cb\u30a2\u3067\u3059\u3002\n\u5b9f\u969b\u3001\u521d\u6b69\u7684\u306a\u3053\u3068\u3059\u304e\u3066\u30b0\u30b0\u3063\u3066\u3082\u898b\u3064\u304b\u3089\u305a\u7206\u767a\u56db\u6563\u3002\n\n# \u3069\u3046\u3044\u3046\u3053\u3068\uff1f\n\n\u4e0b\u8a18\u306e\u3088\u3046\u306bSQL\u3067\u53d6\u5f97\u3057\u305f\u65e5\u6b21\u306e\u96c6\u8a08\u30c7\u30fc\u30bf(\u30ec\u30b3\u30fc\u30c9)\u3092\u7279\u5b9a\u306e\u30ad\u30fc\u3067\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u305f\u3088\u3046\u306aJSON\u3067\u8fd4\u3057\u305f\u3044\u3053\u3068\u306a\u3044\u3067\u3059\u304b\uff1f[^1]\n\n**SQL\u306e\u7d50\u679c**\n\n```\n code | date       | value\n------+------------+-------\n foo  | 2015-12-01 |  100\n foo  | 2015-12-02 |  105\n foo  | 2015-12-03 |   90\n bar  | 2015-12-01 |  200\n bar  | 2015-12-02 |  250\n bar  | 2015-12-03 |  230\n \u30fb\n \u30fb\n \u30fb\n```\n\n**\u8fd4\u3057\u305f\u3044JSON**\n\n```json\n[\n  {\n    \"code\": \"foo\",\n    \"list\": [\n      { \"date\": \"2015-12-01\", \"value\": 100 },\n      { \"date\": \"2015-12-02\", \"value\": 105 },\n      { \"date\": \"2015-12-03\", \"value\":  90 }\n    ]\n  },\n  {\n    \"code\": \"bar\",\n    \"list\": [\n      { \"date\": \"2015-12-01\", \"value\": 200 },\n      { \"date\": \"2015-12-02\", \"value\": 250 },\n      { \"date\": \"2015-12-03\", \"value\": 230 }\n    ]\n  },\n  ...\n]\n```\n\n**Model**\n\n```Summary.scala\ncase class Summary(\n  code: String,\n  list: Seq[(LocalDate, Option[Int])]\n)\n```\n\n\u65e5\u6642\u306fUNIX epoch(\u30df\u30ea\u79d2)\u3067\u6271\u3046\u3053\u3068\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u308f\u304b\u308a\u3084\u3059\u3055\u306e\u305f\u3081ISO 8601\u5f62\u5f0f(`org.joda.time.LocalDate`)\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u30ec\u30b3\u30fc\u30c9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3078\u306e\u5909\u63db\n\n## \u3068\u308a\u3042\u3048\u305a\u51e6\u7406\u3092\u8003\u3048\u308b\n\n`groupBy()`\u3068\u3044\u3046\u305d\u306e\u540d\u3082\u30ba\u30d0\u30ea\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3048\u3070code\u6bce\u306b\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3089\u308c\u305d\u3046\u306a\u6c17\u304c\u3057\u3066\u304d\u307e\u3059\u3002\n\n```scala\n  val rows: List[(String, LocalDate, Option[Int])]\n\n  rows.groupBy { case (code, _, _) => code }\n      .map { case (code, rows) =>\n        Summary(\n          code,\n          rows.map { case (_, date, value) => (date, value) }\n        )\n      }\n      .toSeq\n```\n\n\u3084\u3063\u305f\u304b\uff01\uff1f\n\n\u3067\u3059\u304c[`TraversableLike.groupBy()`](https://github.com/scala/scala/blob/v2.11.7/src/library/scala/collection/TraversableLike.scala#L329-L341)\u306f`immutable.Map`\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u3001\u30ad\u30fc\u306e\u9806\u5e8f\u3001\u3064\u307e\u308a\u4eca\u56de\u306e\u4f8b\u3067\u3044\u3046code\u306e\u4e26\u3073\u9806\u304c\u4fdd\u8a3c\u3055\u308c\u307e\u305b\u3093\u3002[^2]\n\u305d\u306e\u305f\u3081\u3001SQL\u3067`order by`\u3057\u305f\u9806\u3067\u30c7\u30fc\u30bf\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002\n\n\u30ad\u30fc\u306e\u9806\u5e8f\u306f\u7dad\u6301\u3057\u305f\u3044\u306e\u3067`mutable.LinkedHashMap`\u3092\u4f7f\u3048\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n```scala\n  val rows: List[(String, LocalDate, Option[Int])]\n\n  val m = mutable.LinkedHashMap.empty[String, mutable.Buffer[(String, LocalDate, Option[Int])]]\n\n  rows.foreach {\n    case (code, _, _) =>\n      m.getOrElseUpdate(code, mutable.Buffer.empty) += row\n  }\n\n  m.map {\n    case (code, rows) =>\n      Summary(\n        code,\n        rows.map { case (_, date_ value) => (date, value) }\n      )\n  }.toSeq\n```\n\n## \u51e6\u7406\u3092\u6c4e\u7528\u5316\u3057\u3066\u307f\u308b\n\n\u30ec\u30b3\u30fc\u30c9\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066Map\u3067\u8fd4\u3059\u51e6\u7406\u306f\u5225\u306e\u6240\u3067\u3082\u4f7f\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306e\u3067\u3001\u6c4e\u7528\u5316\u306b\u3064\u3044\u3066\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n### \u65b9\u6cd51: Package object\u306b\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308b\n\n```package.scala\nimport scala.collection.mutable\n\npackage object models {\n\n  def groupBy[A, K, V](rows: Traversable[A])(f: A => (K, V)): mutable.LinkedHashMap[K, mutable.Buffer[V]] = {\n    val m = mutable.LinkedHashMap.empty[K, mutable.Buffer[V]]\n    for (row <- rows) {\n      val (k, v) = f(row)\n      m.getOrElseUpdate(k, mutable.Buffer.empty) += v\n    }\n    m\n  }\n\n}\n```\n\n\u3067\u304d\u3042\u304c\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\u3002\uff083\u5206\u30af\u30c3\u30ad\u30f3\u30b0\uff09\n\n\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u305f\u3044`rows: Traversable[A]`\u3068\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u306eKey\u3068Value\u3092\u751f\u6210\u3059\u308b\u95a2\u6570`f: A => (K, V)`\u3092\u6e21\u3059\u3068\u3001`LinkedHashMap[K, Buffer[V]]`\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n`rows`\u3068`f`\u3092\u30ab\u30ea\u30fc\u5316\u3057\u3066\u3044\u308b\u306e\u304c\u6c17\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3053\u308c\u306f2\u3064\u306eParameter list\u306b\u5206\u3051\u308b\u3053\u3068\u3067`row`\u306e\u578b`A`\u3092\u78ba\u5b9a\u3055\u305b\u3066\u304b\u3089\u3001`f: A => (K, V)`\u306e\u578b\u63a8\u8ad6\u3092\u3055\u305b\u308b\u305f\u3081\u3067\u3059\u3002\n\n**\u53c2\u8003URL**\n[Scala\u306e\u578b\u63a8\u8ad6\u306b\u3064\u3044\u3066 - Togetter\u307e\u3068\u3081](http://togetter.com/li/219702)\n\n**\u53c2\u8003\u66f8\u7c4d**\n[Scala\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7b2c2\u7248](http://book.impress.co.jp/books/3084)\n16.10 Scala\u306e\u578b\u63a8\u8ad6\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7406\u89e3\u3059\u308b (P.314-317)\n\n[Scala\u30d1\u30ba\u30eb 36\u306e\u7f60\u304b\u3089\u5b66\u3076\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9](http://www.shoeisha.co.jp/book/detail/9784798145037)\nPUZZLE 6\u3000\u5f15\u6570\u3067\u3082\u3046\u30c9\u30f3\u5f15\u304d!\u2015\u2015Arg Arrgh! (P.47-52)\n\n### \u65b9\u6cd52: Extension method(\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9)\u3092\u5b9a\u7fa9\u3059\u308b\n\nScala\u306f[Implicit Class](http://docs.scala-lang.org/sips/completed/implicit-classes.html)\u3067\u65e2\u5b58\u30af\u30e9\u30b9\u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u62e1\u5f35(\u8ffd\u52a0)\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u5229\u7528\u3057\u3066`Traversable`\u306b`LikedHashMap`\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3059\u308b`groupByOrdered()`\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```scala\n  implicit class GroupByOrderedImpl[A](val s: Traversable[A]) extends AnyVal {\n\n    def groupByOrdered[K, V](f: A => (K, V)): mutable.Map[K, mutable.Buffer[V]] = {\n      val m = mutable.LinkedHashMap.empty[K, mutable.Buffer[V]]\n      for (i <- s) {\n        val (k, v) = f(i)\n        m.getOrElseUpdate(k, mutable.Buffer.empty) += v\n      }\n      m\n    }\n\n  }\n```\n\n```scala\n  val rows: List[(String, LocalDate, Option[Int])]\n\n  rows.groupByOrdered {\n        case (code, date, value) => code -> (date, value)\n      }.map {\n        case (code, rows) => Summary(code, rows)\n      }.toSeq\n```\n\n`Traversable`\u304c\u62e1\u5f35\u3055\u308c`groupByOrdered()`\u304c\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3067\u3059\u304c\u3001\u500b\u4eba\u7684\u306b\u4eca\u56de\u3084\u308a\u305f\u3044\u3053\u3068\u306b\u5bfe\u3057\u3066\u65b9\u6cd5\u304c\u5927\u3052\u3055\u3059\u304e\u308b\u6c17\u304c\u3057\u305f\u305f\u3081\u3001\u63a1\u7528\u306f\u898b\u9001\u308a\u307e\u3057\u305f\u3002\n\n**\u53c2\u8003URL**\n[collections - Scala GroupBy preserving insertion order? - Stack Overflow](http://stackoverflow.com/a/9608800/4366193)\n[Value Classes and Universal Traits - Scala Documentation](http://docs.scala-lang.org/overviews/core/value-classes.html#extension-methods)\n\n# \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089JSON\u3078\u306e\u5909\u63db\n\nDB\u304b\u3089\u53d6\u5f97\u3057\u305f\u30ec\u30b3\u30fc\u30c9\u3092code\u6bce\u306b\u307e\u3068\u3081\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u8fd4\u3059`Summary.find(from: LocalDate, to: LocalDate)`\u304c\u5b9f\u88c5\u3067\u304d\u307e\u3057\u305f\u3002\u6b21\u306f`SummaryController`\u3092\u5b9f\u88c5\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306bJSON\u3092\u8fd4\u3059\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n**URL\u306e\u30a4\u30e1\u30fc\u30b8**\n\n```\nhttp://example.com/summary?from=1448895600000&to=1451487600000\n\nfrom: 2015-12-01 00:00:00.000\nto  : 2015-12-31 00:00:00.000\n```\n\n**routes**\n\n```\nGET     /summary                    controllers.SummaryController.findSummary(from: Long, to: Long)\n```\n\n**SummaryController.scala**\n\n```scala\nclass SummaryController extends Controller {\n\n  def findSummary(from: Long, to: Long) = Action {\n    val list = Summary.find(new LocalDate(from), new LocalDate(to))\n\n    if (list.isEmpty) NotFound\n    else Ok(Json.toJson(list))\n  }\n\n}\n```\n\n[`Json.toJson()`](https://github.com/playframework/playframework/blob/2.4.6/framework/src/play-json/src/main/scala/play/api/libs/json/Json.scala#L113-L118)\u306f\u5f15\u6570\u306e\u578b\u306b\u5fdc\u3058\u305f\u6697\u9ed9\u306e[Writes](https://github.com/playframework/playframework/blob/2.4.6/framework/src/play-json/src/main/scala/play/api/libs/json/Writes.scala#L32)\u3092\u4f7f\u7528\u3057\u3066`JsValue`\u3092\u8fd4\u3057\u307e\u3059\u3002\u57fa\u672c\u7684\u306a\u578b\u306b\u3064\u3044\u3066\u306f[`DefaultWrites `](https://github.com/playframework/playframework/blob/2.4.6/framework/src/play-json/src/main/scala/play/api/libs/json/Writes.scala#L106)\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002[^3]\n`app/models/Summary.scala`\u306b`Summary`\u306e\u305f\u3081\u306e`Writes`\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```scala\n  implicit val summaryWrites = new Writes[Summary] {\n    override def writes(s: Summary): JsValue = Json.obj(\n      \"code\" -> s.code,\n      \"list\" -> s.list.map {\n        case (date, value) => Json.obj(\n          \"date\" -> date,\n          \"value\" -> value\n        )\n      }\n    )\n  }\n```\n\n`value`\u306f`Option[Int]`\u578b\u306a\u306e\u3067null\u306e\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u304c\u3001null\u306e\u6642\u306b0\u3092\u8fd4\u3057\u305f\u3044\u5834\u5408\u306f`value.getOrElse[Int](0)`\u3068\u66f8\u304d\u307e\u3059\u3002[^4]\n\n\u3053\u308c\u3067\u3067\u304d\u305f\uff08\u30b3\u30de\u30f3\u30c9\u30fc\uff09\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e00\u89a7\n\nimport\u6587\u306f\u7701\u7565\u3057\u3066\u307e\u3059\u304c\u3001\u4eca\u56de\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u5217\u6319\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n**app/models/Summary.scala**\n\n```scala\ncase class Summary(\n    code: String,\n    list: Seq[(LocalDate, Option[Int])]\n    )\n\nobject Summary {\n\n  private val simple = {\n    get[String](\"code\") ~\n    get[LocalDate](\"date\") ~\n    get[Option[Int]](\"value\") map {\n      case code ~ date ~ value => (code, date, value)\n    }\n  }\n\n  implicit val summaryWrites = new Writes[Summary] {\n    override def writes(s: Summary): JsValue = Json.obj(\n      \"code\" -> s.code,\n      \"list\" -> s.list.map {\n        case (date, value) => Json.obj(\n          \"date\" -> date,\n          \"value\" -> value\n        )\n      }\n    )\n  }\n\n  def find(from: LocalDate, to: LocalDate): Seq[Summary] = {\n    val rows = DB.withTransaction { implicit conn =>\n      SQL(\"\"\"\n        |SELECT code, date, SUM(value) AS value\n        |FROM summary\n        |WHERE date BETWEEN {from} AND {to}\n        |GROUP BY code, date\n        |ORDER BY code, date\n        |\"\"\".stripMargin\n      ).on(\n        'from -> from.toDate,\n        'to -> to.toDate\n      ).as(simple.*)\n    }\n\n    models.groupBy(rows) {\n            case (code, date, value) => code -> (date, value)\n          }.map {\n            case (code, rows) => Summary(code, rows)\n          }.toSeq\n  }\n\n}\n```\n\n**app/models/package.scala**\n\n```scala\nimport scala.collection.mutable\n\npackage object models {\n\n  def groupBy[A, K, V](rows: Traversable[A])(f: A => (K, V)): mutable.LinkedHashMap[K, mutable.Buffer[V]] = {\n    val m = mutable.LinkedHashMap.empty[K, mutable.Buffer[V]]\n    for (row <- rows) {\n      val (k, v) = f(row)\n      m.getOrElseUpdate(k, mutable.Buffer.empty) += v\n    }\n    m\n  }\n\n}\n```\n\n**app/controllers/SummaryController.scla**\n\n```scala\nclass SummaryController extends Controller {\n\n  def findSummary(from: Long, to: Long) = Action {\n    val list = Summary.find(new LocalDate(from), new LocalDate(to))\n\n    if (list.isEmpty) NotFound\n    else Ok(Json.toJson(list))\n  }\n\n}\n```\n\n**conf/routes**\n\n```\nGET     /summary                    controllers.SummaryController.findSummary(from: Long, to: Long)\n```\n\n-----\n[^1]: \u3042\u3001\u7121\u3044\u3002\u305d\u308c\u3092\u3061\u3087\u3063\u3068\u3084\u3063\u3066\u3082\u3089\u3046\u304b\u3089\u3002\n[^2]: \u5024\u306e\u9806\u5e8f\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u3067\u30eb\u30fc\u30d7\u3057\u8ffd\u52a0\u3055\u308c\u308b\u306e\u3067\u4fdd\u8a3c(\u7dad\u6301)\u3055\u308c\u307e\u3059\u3002\n[^3]: [`Traversable`](https://github.com/playframework/playframework/blob/2.4.6/framework/src/play-json/src/main/scala/play/api/libs/json/Writes.scala#L193-L198)\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002`Seq`\u306a\u3069\u306b\u5bfe\u3059\u308b`Writes`\u3092\u5b9a\u7fa9\u3057\u306a\u304f\u3066\u3088\u3044\u306e\u306f\u3053\u306e\u305f\u3081\u3067\u3059\u3002\n[^4]: \u578b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u5b9f\u884c\u6642\u306b\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u6012\u3089\u308c\u307e\u3059\u3002\n", "tags": ["Scala2.11.7", "PlayFramework2.4.6", "Anorm2.5.0"]}