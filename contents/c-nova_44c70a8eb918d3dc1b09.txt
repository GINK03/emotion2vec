{"tags": ["OpenCV", "\u52d5\u753b", "\u30de\u30fc\u30b1\u30c6\u30a3\u30f3\u30b0"], "context": "\n\n\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u3002\u3002\u3002\uff1f\n\u5df7\u306e\u30de\u30fc\u30b1\u30c6\u30a3\u30f3\u30b0\u306e\u8a18\u4e8b\u306a\u3069\u3092\u8aad\u3080\u3068\u300c\u5e97\u8217\u306e\u72b6\u614b\u3092\u628a\u63e1\u3059\u308b\u306b\u306f\u3001\u4f55\u304b\u3092\u8cfc\u5165\u3057\u305f\u4eba\u6570\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u58f2\u308a\u5834\u3084ROI\u306e\u4eba\u6570\u3092\u6642\u9593\u5e2f\u306a\u3069\u3067\u628a\u63e1\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u300d\u306a\u3093\u3066\u66f8\u304b\u308c\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u3002\u3067\u306f\u3001\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u3063\u3066\u3069\u3046\u3084\u3063\u3066\u3084\u308b\u306e\u304c\u3044\u3044\u306e\u304b\uff1f\uff1f\u306a\u3093\u3066\u8a18\u4e8b\u3082\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u6982\u306d\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3084\u308b\u3053\u3068\u304c\u591a\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u8d64\u5916\u7dda\uff08\u30d6\u30ec\u30a4\u30af\u30d3\u30fc\u30e0\uff09\n\u30b5\u30fc\u30de\u30eb\n\u30ec\u30fc\u30b6\u30fc\n\u8d85\u97f3\u6ce2\n\u4eba\u624b\u306b\u3088\u308b\u30ab\u30a6\u30f3\u30c8\uff08\u30a4\u30d9\u30f3\u30c8\u6642\u7b49\uff09\n\n\u3053\u306e\u3088\u3046\u306b\u8272\u3005\u3068\u65b9\u6cd5\u306f\u3042\u308b\u3082\u306e\u306e\u3001\u610f\u5916\u3068\u7cbe\u5ea6\u306e\u554f\u984c\u3001\u4f8b\u3048\u3070\u8d64\u5916\u7dda\u306e\u5834\u5408\u5165\u308a\u53e3\u306e\u3042\u308b\u7a0b\u5ea6\u306e\u9ad8\u3055\u306b\u6c34\u5e73\u306b\u88c5\u7f6e\u304c\u8a2d\u7f6e\u3055\u308c\u308b\u3001\u7dda\u304c\u9014\u5207\u308c\u308b\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u3067\u4eba\u6570\u3092\u628a\u63e1\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4e26\u5217\u306b\u540c\u6642\u306b\u4eba\u9593\u304c\u901a\u308c\u3070\u5f53\u7136\u4e00\u4eba\u5206\u3057\u304b\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u305b\u3093\u3002\u307e\u305f\u30ec\u30fc\u30b6\u30fc\u3084\u30b5\u30fc\u30de\u30eb\u306e\u3088\u3046\u306b\u5929\u4e95\u304b\u3089\u5e8a\u306b\u5411\u3051\u3066\u8a2d\u7f6e\u3059\u308b\u6a5f\u6750\u3082\u3042\u308a\u307e\u3059\u304c\u7cbe\u5ea6\u306f\u9ad8\u3044\u3051\u3069\u9ad8\u4fa1\u3067\u3042\u3063\u305f\u308a\u3001\u306a\u304b\u306a\u304b\u5b89\u5b9a\u3057\u306a\u3044\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\n\u305d\u3046\u3044\u3063\u305f\u4e2d\u3067\u6700\u8fd1\u6ce8\u76ee\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u300cIP\u30ab\u30e1\u30e9\u7b49\u306b\u3088\u308b\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u300d\u3067\u3059\u3002BOSCH\u3084MOBOTIX\u306e\u30ab\u30e1\u30e9\u306e\u3088\u3046\u306b\u30ab\u30e1\u30e9\u81ea\u4f53\u306b\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u3092\u884c\u306a\u3046\u6a5f\u80fd\u304c\u3042\u308b\u5834\u5408\u306b\u306f\u30ab\u30e1\u30e9\u3060\u3051\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\u304c\u3001\u4e00\u822c\u7684\u306aIP\u30ab\u30e1\u30e9\u3084USB\u30ab\u30e1\u30e9\u306e\u5834\u5408\u306b\u306f\u3001\u30ab\u30e1\u30e9\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u753b\u50cf\u304b\u3089\u4eba\u6570\u3092\u8aad\u307f\u53d6\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3044\u3063\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u5f53\u7136\u975e\u5e38\u306b\u9ad8\u5ea6\u306a\u3082\u306e\u306b\u306a\u308b\u306e\u3067\u3001\u666e\u901a\u306e\u4eba\u304c1\u304b\u3089\u4f5c\u308c\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u73fe\u5728\u4e16\u754c\u4e2d\u3067\u5e83\u304f\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u753b\u50cf\u8a8d\u8b58\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u3057\u3066\u3001OpenCV\u304c\u6709\u540d\u306b\u306a\u3063\u3066\u304a\u308a\u307e\u3059\u3002\n\nOpenCV\u306e\u4f7f\u3044\u65b9\nOpenCV\u306f\u5143\u3005C\u3067\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u3057\u3070\u3089\u304fC\u8a00\u8a9e\u3067\u306e\u307f\u5b9f\u88c5\u304c\u53ef\u80fd\u3067\u3057\u305f\u3002\u3053\u308c\u3082\u4e2d\u3005\u6577\u5c45\u304c\u9ad8\u3044\u305f\u3081\u5229\u7528\u3059\u308b\u65b9\u3082\u305d\u308c\u306a\u308a\u306e\u65b9\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001Python\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068\u3067\u3001\u4e16\u754c\u7684\u306b\u3082\u7206\u767a\u7684\u306b\u5229\u7528\u8005\u304c\u5897\u3048\u307e\u3057\u305f\u3002\u4eca\u56de\u3054\u7d39\u4ecb\u3059\u308b\u74b0\u5883\u306f\u3001\n\nWindows 10 (64bit)\nAnaconda3\nPython 2.7\uff08Anaconda\u306eenv\u3068\u3057\u3066\u767b\u9332\uff09\nconda\u3067\u306eOpenCV 3.1\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u884c\u3063\u305f\u3082\u306e\n\n\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u8a73\u7d30\u3092\u8ff0\u3079\u307e\u305b\u3093\u304c\u3001\u57fa\u672c\u7684\u306a\u52d5\u4f5c\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308c\u3070\u3001\u4e0b\u8a18\u30b3\u30fc\u30c9\u306f\u52d5\u304f\u306e\u3067\u306f\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u3092\u516c\u958b\u3057\u305f\u7406\u7531\nOpenCV\u306b\u3088\u308b\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u3001\u3068\u3044\u3046\u8a00\u8449\u3067Google\u3084\u3089\u8272\u3005\u306a\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u3092\u691c\u7d22\u3059\u308b\u3068\u3001\u30d2\u30f3\u30c8\u306f\u51fa\u3066\u304f\u308b\u3082\u306e\u306e\u30b3\u30fc\u30c9\u305d\u306e\u3082\u306e\u306b\u306f\u4e2d\u3005\u5f53\u305f\u308a\u307e\u305b\u3093\u3002\u79c1\u3082\u76f8\u5f53\u6570\u8abf\u3079\u305f\u306e\u3067\u3059\u304c\u3001\u7d50\u5c40\u305d\u3053\u306b\u8a72\u5f53\u3059\u308b\u3082\u306e\u306b\u306f\u5f53\u305f\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u4eca\u56de\u79c1\u304c\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3082\u7d20\u4eba\u304c\u77ed\u3044\u6642\u9593\u3067\u4f5c\u6210\u3057\u305f\u3001\u3042\u307e\u308a\u5f79\u306b\u7acb\u305f\u306a\u3044\u3082\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3053\u308c\u3067OpenCV\u3067\u306e\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u4eba\u53e3\u304c\u5897\u3048\u3001\u3072\u3044\u3066\u306f\u3053\u306e\u30b3\u30fc\u30c9\u3092\u6539\u826f\u3057\u3066\u304f\u308c\u308b\u5947\u7279\u306a\u65b9\u304c\u3044\u305f\u3089\u3001\u306a\u304a\u30e9\u30c3\u30ad\u30fc\u3068\u3044\u3046\u3053\u3068\u304c\u7406\u7531\u3067\u3059\u3002\u3082\u3057\u300c\u3053\u3046\u3057\u305f\u3089\u826f\u304f\u306a\u308b\u300d\u3068\u304b\u300c\u305d\u3082\u305d\u3082\u3053\u3046\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u300d\u306a\u3093\u3066\u3044\u3046\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u3051\u308b\u3068\u3001\u975e\u5e38\u306b\u5b09\u3057\u3044\u3067\u3059\u3002\n\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u4e00\u672c\u3067\u4f5c\u6210\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u4eba\u6570\u30c7\u30fc\u30bf\u3092\u3069\u3053\u304b\u306b\u66f8\u304d\u8fbc\u3080\u3068\u304b\u305d\u3046\u3044\u3046\u9ad8\u5c1a\u306a\u6a5f\u80fd\u306f\u7121\u304f\u3001\u3068\u308a\u3042\u3048\u305a\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u4ed5\u7d44\u307f\u306b\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u4e0a\u306f\u9759\u7684\u306a\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u53d6\u3063\u3066\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306f\u30ab\u30e1\u30e9\u306eMP4\u306eRTSP\u30bd\u30fc\u30b9\u304b\u3089\u3067\u3082\u5b9f\u884c\u3067\u304d\u307e\u3059\u3057\u3001\u3084\u3063\u3066\u3044\u307e\u305b\u3093\u304cUSB\u30ab\u30e1\u30e9\u3067\u3082\u5b9f\u884c\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\u9759\u7684\u306a\u52d5\u753b\u3092\u8aad\u307f\u53d6\u308b\u884c\u306e\u76f4\u4e0b\u306b\u30b9\u30c8\u30ea\u30fc\u30e0\u8aad\u307f\u53d6\u308a\u306e\u884c\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\u4f7f\u3044\u65b9\n\u4e0a\u8a18\u3067\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u3084\u30bd\u30fc\u30b9\u3092\u9069\u5b9c\u5909\u66f4\u3057\u3066\u3001\npython 02.CV31+fC+TR+RC+CP.py\n\n\u3068\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\uff08\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u306a\u3093\u3067\u3082\u3044\u3044\u3067\u3059\u304c\uff09\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u307e\u305a\u521d\u671f\u5316\u3055\u308c\u308b\u3068\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u3092\u884c\u306a\u3046\u5834\u6240\u306b\u30de\u30a6\u30b9\u3067\u7dda\u3092\u5f15\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u3044\u958b\u59cb\u5834\u6240\u3092\u30af\u30ea\u30c3\u30af\u3057\u3001\u305d\u306e\u307e\u307e\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3063\u3071\u306a\u3057\u306b\u3057\u3066\u3001\u7d42\u4e86\u5834\u6240\u307e\u3067\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u7dda\u306f\u4f55\u672c\u3067\u3082\u5f15\u3051\u307e\u3059\u306e\u3067\u3001\u5fc5\u8981\u6570\u5f15\u3044\u305f\u3089\u300cESC\u300d\u30ad\u30fc\u3092\u62bc\u4e0b\u3057\u3001\u5b9f\u884c\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\u30b3\u30fc\u30c9\n\n02.CV31+fC+TR+RC+CP.py\nimport numpy as np\nimport cv2\n\n#cap = cv2.VideoCapture('D:\\\\Work_Documents\\\\sandbox\\\\OpenCV\\\\with_EEN\\\\viaVLC\\\\EN-CDUM-002a+2016-08-29+14-38-40.mp4') #Open video file\ncap = cv2.VideoCapture('C:\\\\Work_Documents\\\\sandbox\\\\OpenCV\\\\with_EEN\\\\viaVLC\\\\camera0490_02.mp4')\n#cap = cv2.VideoCapture('http://127.0.0.1:8080')\n\nfps = 15 #int(cap.get(5)+4)\nprint 'Current FPS is ' + str(fps)\n#cv2.ocl.setUseOpenCL(False)\nfgbg = cv2.createBackgroundSubtractorKNN(detectShadows = True) #Create the background substractor\n\n# initialize var and windows\nitr = 0\ncrossed = 0\nfont = cv2.FONT_HERSHEY_SIMPLEX\nold_center = np.empty((0,2), float)\n'''\ncv2.namedWindow(\"Frame\", cv2.WINDOW_KEEPRATIO | cv2.WINDOW_NORMAL)\ncv2.namedWindow(\"Background Substraction\", cv2.WINDOW_KEEPRATIO | cv2.WINDOW_NORMAL)\ncv2.namedWindow(\"Contours\", cv2.WINDOW_KEEPRATIO | cv2.WINDOW_NORMAL)\n'''\n\n# define functions\ndef padding_position(x, y, w, h, p):\n    return x - p, y - p, w + p * 2, h + p * 2\n\n# find a nearest neighbour point\ndef serchNN(p0, ps):\n    L = np.array([])\n    for i in xrange(ps.shape[0]):\n        L = np.append(L,np.linalg.norm(ps[i]-p0))\n    return ps[np.argmin(L)]\n\n# check intersect 2 lines\ndef isIntersect(ap1, ap2, bp1, bp2):\n    calc1 = ((ap1[0] - ap2[0]) * (bp1[1] - ap1[1]) + (ap1[1] - ap2[1]) * (ap1[0] - bp1[0])) * ((ap1[0] - ap2[0]) * (bp2[1] - ap1[1]) + (ap1[1] - ap2[1]) * (ap1[0] - bp2[0]))\n    calc2 = ((bp1[0] - bp2[0]) * (ap1[1] - bp1[1]) + (bp1[1] - bp2[1]) * (bp1[0] - ap1[0])) * ((bp1[0] - bp2[0]) * (ap2[1] - bp1[1]) + (bp1[1] - bp2[1]) * (bp1[0] - ap2[0]))\n    if (calc1 < 0):\n        if (calc2 < 0):\n            return True\n    return False\n\n# apply convexHull to the contour\ndef convHull(cnt):\n    epsilon = 0.1*cv2.arcLength(cnt, True)\n    approx = cv2.approxPolyDP(cnt, epsilon, True)\n    hull = cv2.convexHull(cnt, returnPoints = True)\n    return hull\n\n# detect a centroid from a coutour\ndef centroidPL(cnt):\n    M = cv2.moments(cnt)\n    cx = int(M['m10']/M['m00'])\n    cy = int(M['m01']/M['m00'])\n    return cx,cy\n\n# display 1st frame and set counting line\nret, img = cap.read()\nimg = cv2.putText(img, 'Please draw a line with drug the mouse.', (img.shape[1]/2-300, img.shape[0]/2), font, 1, (0,0,255), 2, cv2.LINE_AA)\nimg = cv2.putText(img, 'Finish the draw, press ESC. \\n Retry, press \"r\".', (img.shape[1]/2-300, img.shape[0]/2+40), font, 1, (0,0,255), 2, cv2.LINE_AA)\nimg = cv2.putText(img, 'Retry, press \"r\".', (img.shape[1]/2-300, img.shape[0]/2+80), font, 1, (0,0,255), 2, cv2.LINE_AA)\nimg = cv2.resize(img, (img.shape[1]/2, img.shape[0]/2))\nimgr = img.copy()\nsx,sy = -1,-1\nex,ey = -1,-1\n\ndef draw_line(event,x,y,flags,param):\n    global sx,sy,ex,ey\n\n    if event == cv2.EVENT_LBUTTONDOWN:\n        sx,sy = x,y\n\n    elif event == cv2.EVENT_LBUTTONUP:\n        cv2.line(img,(sx,sy),(x,y),(255,0,0), 2)\n        ex,ey = x,y\n\ncv2.namedWindow('Draw_Line')\ncv2.setMouseCallback('Draw_Line',draw_line)\n\nwhile(1):\n    cv2.imshow('Draw_Line',img)\n    k = cv2.waitKey(20) & 0xFF\n    if k == 27:\n        break\n    elif k == ord('r'):\n        img = imgr.copy()\n        continue\n\ncv2.destroyAllWindows()\n\n# initialize line\nlp0 = (sx, sy)\nlp1 = (ex, ey)\nnlp0 = np.array([lp0[0], lp0[1]], float)\nnlp1 = np.array([lp1[0], lp1[1]], float)\n\nwhile(cap.isOpened()):\n    try:\n        ret, o_frame = cap.read() #read a frame\n        frame = cv2.resize(o_frame, (o_frame.shape[1]/2, o_frame.shape[0]/2))\n\n        #Use the substractor\n        fgmask = fgbg.apply(frame) \n        fgmask_o = fgmask.copy()\n\n        fgmask = cv2.threshold(fgmask, 244, 255, cv2.THRESH_BINARY)[1]\n        kernel = np.ones((5,5), np.uint8)\n#        fgmask = cv2.morphologyEx(fgmask, cv2.MORPH_CLOSE, kernel)\n        fgmask = cv2.dilate(fgmask, cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3,3)), iterations = 2)\n\n        im2, contours, hierarchy = cv2.findContours(fgmask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n        # initialize var iteration\n        new_center = np.empty((0,2), float)\n\n        for c in contours:\n\n            if (itr % fps == 0):\n                continue\n\n            # calc the area\n            cArea = cv2.contourArea(c)\n            if cArea < 300: # if 1280x960 set to 50000, 640x480 set to 12500\n                continue\n\n            # apply the convex hull \n            c = convHull(c)\n\n            # rectangle area\n            x, y, w, h = cv2.boundingRect(c)\n            x, y, w, h = padding_position(x, y, w, h, 5)\n\n            # center point\n            cx, cy = centroidPL(c)\n            new_point = np.array([cx, cy], float)\n            new_center = np.append(new_center, np.array([[cx, cy]]), axis=0)\n\n            if (old_center.size > 1):\n                #print cArea and new center point\n                print 'Loop: ' + str(itr) + '   Coutours #: ' + str(len(contours))\n                print 'New Center :' + str(cx) + ',' + str(cy)\n                #print 'New Center :' + str(new_center)\n\n                # calicurate nearest old center point\n                old_point_t = serchNN(new_point, old_center)\n\n                # check the old center point in the counding box\n                if (cv2.pointPolygonTest(c, (old_point_t[0], old_point_t[1]), True) > 0):\n                    old_point = old_point_t\n                    print 'Old Center :' + str(int(old_point[0])) + ',' + str(int(old_point[1]))\n\n                    # put line between old_center to new_center\n                    cv2.line(frame, (int(old_point[0]), int(old_point[1])), (cx, cy), (0,0,255), 2)\n\n                    # cross line check\n                    if (isIntersect(nlp0, nlp1, old_point, new_point)):\n                        print 'Crossing!'\n                        crossed += 1\n\n\n            # put floating text\n            cv2.putText(frame, 'CA:' + str(cArea)[0:-2] , (x+10, y+20), font, 0.5, (255,255,255), 1, cv2.LINE_AA)\n\n            # draw center\n            cv2.circle(frame,(cx,cy),5,(0,0,255),-1)\n\n            # draw rectangle or contour\n            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 3)  #rectangle contour\n#            cv2.drawContours(frame, [c], 0, (0,255,0), 2)\n#            cv2.polylines(frame, [c], True, (0,255,0), 2)\n\n        # put fixed text, line and show images\n        cv2.putText(frame, 'Crossing:' + str(crossed), ((o_frame.shape[1]/3), 30), font, 1, (255,255,255), 1, cv2.LINE_AA)\n        cv2.line(frame, (lp0), (lp1), (255,0,0), 2)\n        cv2.imshow('Frame',frame)\n        cv2.imshow('Background Substraction',fgmask_o)\n        cv2.imshow('Contours',fgmask)\n\n        # increase var number and renew center array\n        old_center = new_center\n        itr += 1\n\n    except:\n        #if there are no more frames to show...\n        print('EOF')\n        break\n\n    #Abort and exit with 'Q' or ESC\n    k = cv2.waitKey(30) & 0xff\n    if k == 27:\n        break\n\ncap.release() #release video file\ncv2.destroyAllWindows() #close all openCV windows\n\n\n\n\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\u5f8c\u7de8\u3067\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u3092\u884c\u3044\u307e\u3059\u306e\u3067\u3001\u3057\u3070\u3057\u304a\u5f85\u3061\u4e0b\u3055\u3044\u3002\n# \u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u3002\u3002\u3002\uff1f\n\u5df7\u306e\u30de\u30fc\u30b1\u30c6\u30a3\u30f3\u30b0\u306e\u8a18\u4e8b\u306a\u3069\u3092\u8aad\u3080\u3068\u300c\u5e97\u8217\u306e\u72b6\u614b\u3092\u628a\u63e1\u3059\u308b\u306b\u306f\u3001\u4f55\u304b\u3092\u8cfc\u5165\u3057\u305f\u4eba\u6570\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u58f2\u308a\u5834\u3084ROI\u306e\u4eba\u6570\u3092\u6642\u9593\u5e2f\u306a\u3069\u3067\u628a\u63e1\u3059\u308b\u3053\u3068\u304c\u91cd\u8981\u300d\u306a\u3093\u3066\u66f8\u304b\u308c\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u3002\u3067\u306f\u3001\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u3063\u3066\u3069\u3046\u3084\u3063\u3066\u3084\u308b\u306e\u304c\u3044\u3044\u306e\u304b\uff1f\uff1f\u306a\u3093\u3066\u8a18\u4e8b\u3082\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u6982\u306d\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3084\u308b\u3053\u3068\u304c\u591a\u3044\u3088\u3046\u3067\u3059\u3002\n\n- \u8d64\u5916\u7dda\uff08\u30d6\u30ec\u30a4\u30af\u30d3\u30fc\u30e0\uff09\n- \u30b5\u30fc\u30de\u30eb\n- \u30ec\u30fc\u30b6\u30fc\n- \u8d85\u97f3\u6ce2\n- \u4eba\u624b\u306b\u3088\u308b\u30ab\u30a6\u30f3\u30c8\uff08\u30a4\u30d9\u30f3\u30c8\u6642\u7b49\uff09\n\n\u3053\u306e\u3088\u3046\u306b\u8272\u3005\u3068\u65b9\u6cd5\u306f\u3042\u308b\u3082\u306e\u306e\u3001\u610f\u5916\u3068\u7cbe\u5ea6\u306e\u554f\u984c\u3001\u4f8b\u3048\u3070\u8d64\u5916\u7dda\u306e\u5834\u5408\u5165\u308a\u53e3\u306e\u3042\u308b\u7a0b\u5ea6\u306e\u9ad8\u3055\u306b\u6c34\u5e73\u306b\u88c5\u7f6e\u304c\u8a2d\u7f6e\u3055\u308c\u308b\u3001\u7dda\u304c\u9014\u5207\u308c\u308b\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u3067\u4eba\u6570\u3092\u628a\u63e1\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u4e26\u5217\u306b\u540c\u6642\u306b\u4eba\u9593\u304c\u901a\u308c\u3070\u5f53\u7136\u4e00\u4eba\u5206\u3057\u304b\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u305b\u3093\u3002\u307e\u305f\u30ec\u30fc\u30b6\u30fc\u3084\u30b5\u30fc\u30de\u30eb\u306e\u3088\u3046\u306b\u5929\u4e95\u304b\u3089\u5e8a\u306b\u5411\u3051\u3066\u8a2d\u7f6e\u3059\u308b\u6a5f\u6750\u3082\u3042\u308a\u307e\u3059\u304c\u7cbe\u5ea6\u306f\u9ad8\u3044\u3051\u3069\u9ad8\u4fa1\u3067\u3042\u3063\u305f\u308a\u3001\u306a\u304b\u306a\u304b\u5b89\u5b9a\u3057\u306a\u3044\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\n\u305d\u3046\u3044\u3063\u305f\u4e2d\u3067\u6700\u8fd1\u6ce8\u76ee\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u300cIP\u30ab\u30e1\u30e9\u7b49\u306b\u3088\u308b\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u300d\u3067\u3059\u3002BOSCH\u3084MOBOTIX\u306e\u30ab\u30e1\u30e9\u306e\u3088\u3046\u306b\u30ab\u30e1\u30e9\u81ea\u4f53\u306b\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u3092\u884c\u306a\u3046\u6a5f\u80fd\u304c\u3042\u308b\u5834\u5408\u306b\u306f\u30ab\u30e1\u30e9\u3060\u3051\u3067\u3082\u5927\u4e08\u592b\u3067\u3059\u304c\u3001\u4e00\u822c\u7684\u306aIP\u30ab\u30e1\u30e9\u3084USB\u30ab\u30e1\u30e9\u306e\u5834\u5408\u306b\u306f\u3001\u30ab\u30e1\u30e9\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u753b\u50cf\u304b\u3089\u4eba\u6570\u3092\u8aad\u307f\u53d6\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3046\u3044\u3063\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u5f53\u7136\u975e\u5e38\u306b\u9ad8\u5ea6\u306a\u3082\u306e\u306b\u306a\u308b\u306e\u3067\u3001\u666e\u901a\u306e\u4eba\u304c1\u304b\u3089\u4f5c\u308c\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u73fe\u5728\u4e16\u754c\u4e2d\u3067\u5e83\u304f\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u753b\u50cf\u8a8d\u8b58\u306e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u3057\u3066\u3001**OpenCV**\u304c\u6709\u540d\u306b\u306a\u3063\u3066\u304a\u308a\u307e\u3059\u3002\n\n# OpenCV\u306e\u4f7f\u3044\u65b9\nOpenCV\u306f\u5143\u3005C\u3067\u66f8\u304b\u308c\u3066\u304a\u308a\u3001\u3057\u3070\u3089\u304fC\u8a00\u8a9e\u3067\u306e\u307f\u5b9f\u88c5\u304c\u53ef\u80fd\u3067\u3057\u305f\u3002\u3053\u308c\u3082\u4e2d\u3005\u6577\u5c45\u304c\u9ad8\u3044\u305f\u3081\u5229\u7528\u3059\u308b\u65b9\u3082\u305d\u308c\u306a\u308a\u306e\u65b9\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001Python\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068\u3067\u3001\u4e16\u754c\u7684\u306b\u3082\u7206\u767a\u7684\u306b\u5229\u7528\u8005\u304c\u5897\u3048\u307e\u3057\u305f\u3002\u4eca\u56de\u3054\u7d39\u4ecb\u3059\u308b\u74b0\u5883\u306f\u3001\n\n- Windows 10 (64bit)\n- Anaconda3\n- Python 2.7\uff08Anaconda\u306eenv\u3068\u3057\u3066\u767b\u9332\uff09\n- conda\u3067\u306eOpenCV 3.1\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u884c\u3063\u305f\u3082\u306e\n\n\u3067\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u8a73\u7d30\u3092\u8ff0\u3079\u307e\u305b\u3093\u304c\u3001\u57fa\u672c\u7684\u306a\u52d5\u4f5c\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308c\u3070\u3001\u4e0b\u8a18\u30b3\u30fc\u30c9\u306f\u52d5\u304f\u306e\u3067\u306f\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u30b3\u30fc\u30c9\u3092\u516c\u958b\u3057\u305f\u7406\u7531\nOpenCV\u306b\u3088\u308b\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u3001\u3068\u3044\u3046\u8a00\u8449\u3067Google\u3084\u3089\u8272\u3005\u306a\u691c\u7d22\u30a8\u30f3\u30b8\u30f3\u3092\u691c\u7d22\u3059\u308b\u3068\u3001\u30d2\u30f3\u30c8\u306f\u51fa\u3066\u304f\u308b\u3082\u306e\u306e\u30b3\u30fc\u30c9\u305d\u306e\u3082\u306e\u306b\u306f\u4e2d\u3005\u5f53\u305f\u308a\u307e\u305b\u3093\u3002\u79c1\u3082\u76f8\u5f53\u6570\u8abf\u3079\u305f\u306e\u3067\u3059\u304c\u3001\u7d50\u5c40\u305d\u3053\u306b\u8a72\u5f53\u3059\u308b\u3082\u306e\u306b\u306f\u5f53\u305f\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u4eca\u56de\u79c1\u304c\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u3082\u7d20\u4eba\u304c\u77ed\u3044\u6642\u9593\u3067\u4f5c\u6210\u3057\u305f\u3001\u3042\u307e\u308a\u5f79\u306b\u7acb\u305f\u306a\u3044\u3082\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3053\u308c\u3067OpenCV\u3067\u306e\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u4eba\u53e3\u304c\u5897\u3048\u3001\u3072\u3044\u3066\u306f\u3053\u306e\u30b3\u30fc\u30c9\u3092\u6539\u826f\u3057\u3066\u304f\u308c\u308b\u5947\u7279\u306a\u65b9\u304c\u3044\u305f\u3089\u3001\u306a\u304a\u30e9\u30c3\u30ad\u30fc\u3068\u3044\u3046\u3053\u3068\u304c\u7406\u7531\u3067\u3059\u3002\u3082\u3057\u300c\u3053\u3046\u3057\u305f\u3089\u826f\u304f\u306a\u308b\u300d\u3068\u304b\u300c\u305d\u3082\u305d\u3082\u3053\u3046\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u300d\u306a\u3093\u3066\u3044\u3046\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u3051\u308b\u3068\u3001\u975e\u5e38\u306b\u5b09\u3057\u3044\u3067\u3059\u3002\n\n# \u4eca\u56de\u306e\u30b3\u30fc\u30c9\n\u4eca\u56de\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u4e00\u672c\u3067\u4f5c\u6210\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u4eba\u6570\u30c7\u30fc\u30bf\u3092\u3069\u3053\u304b\u306b\u66f8\u304d\u8fbc\u3080\u3068\u304b\u305d\u3046\u3044\u3046\u9ad8\u5c1a\u306a\u6a5f\u80fd\u306f\u7121\u304f\u3001\u3068\u308a\u3042\u3048\u305a\u753b\u9762\u306b\u8868\u793a\u3059\u308b\u4ed5\u7d44\u307f\u306b\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u4e0a\u306f\u9759\u7684\u306a\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u53d6\u3063\u3066\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306f\u30ab\u30e1\u30e9\u306eMP4\u306eRTSP\u30bd\u30fc\u30b9\u304b\u3089\u3067\u3082\u5b9f\u884c\u3067\u304d\u307e\u3059\u3057\u3001\u3084\u3063\u3066\u3044\u307e\u305b\u3093\u304cUSB\u30ab\u30e1\u30e9\u3067\u3082\u5b9f\u884c\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\u9759\u7684\u306a\u52d5\u753b\u3092\u8aad\u307f\u53d6\u308b\u884c\u306e\u76f4\u4e0b\u306b\u30b9\u30c8\u30ea\u30fc\u30e0\u8aad\u307f\u53d6\u308a\u306e\u884c\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u4f7f\u7528\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n#\u4f7f\u3044\u65b9\n\u4e0a\u8a18\u3067\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\u3084\u30bd\u30fc\u30b9\u3092\u9069\u5b9c\u5909\u66f4\u3057\u3066\u3001\n\n```\npython 02.CV31+fC+TR+RC+CP.py\n```\n\n\u3068\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\uff08\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u306a\u3093\u3067\u3082\u3044\u3044\u3067\u3059\u304c\uff09\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u307e\u305a\u521d\u671f\u5316\u3055\u308c\u308b\u3068\u4eba\u6570\u30ab\u30a6\u30f3\u30c8\u3092\u884c\u306a\u3046\u5834\u6240\u306b\u30de\u30a6\u30b9\u3067\u7dda\u3092\u5f15\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u3044\u958b\u59cb\u5834\u6240\u3092\u30af\u30ea\u30c3\u30af\u3057\u3001\u305d\u306e\u307e\u307e\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3063\u3071\u306a\u3057\u306b\u3057\u3066\u3001\u7d42\u4e86\u5834\u6240\u307e\u3067\u30c9\u30e9\u30c3\u30b0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u7dda\u306f\u4f55\u672c\u3067\u3082\u5f15\u3051\u307e\u3059\u306e\u3067\u3001\u5fc5\u8981\u6570\u5f15\u3044\u305f\u3089\u300cESC\u300d\u30ad\u30fc\u3092\u62bc\u4e0b\u3057\u3001\u5b9f\u884c\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n# \u30b3\u30fc\u30c9\n\n```02.CV31+fC+TR+RC+CP.py\nimport numpy as np\nimport cv2\n\n#cap = cv2.VideoCapture('D:\\\\Work_Documents\\\\sandbox\\\\OpenCV\\\\with_EEN\\\\viaVLC\\\\EN-CDUM-002a+2016-08-29+14-38-40.mp4') #Open video file\ncap = cv2.VideoCapture('C:\\\\Work_Documents\\\\sandbox\\\\OpenCV\\\\with_EEN\\\\viaVLC\\\\camera0490_02.mp4')\n#cap = cv2.VideoCapture('http://127.0.0.1:8080')\n\nfps = 15 #int(cap.get(5)+4)\nprint 'Current FPS is ' + str(fps)\n#cv2.ocl.setUseOpenCL(False)\nfgbg = cv2.createBackgroundSubtractorKNN(detectShadows = True) #Create the background substractor\n\n# initialize var and windows\nitr = 0\ncrossed = 0\nfont = cv2.FONT_HERSHEY_SIMPLEX\nold_center = np.empty((0,2), float)\n'''\ncv2.namedWindow(\"Frame\", cv2.WINDOW_KEEPRATIO | cv2.WINDOW_NORMAL)\ncv2.namedWindow(\"Background Substraction\", cv2.WINDOW_KEEPRATIO | cv2.WINDOW_NORMAL)\ncv2.namedWindow(\"Contours\", cv2.WINDOW_KEEPRATIO | cv2.WINDOW_NORMAL)\n'''\n\n# define functions\ndef padding_position(x, y, w, h, p):\n    return x - p, y - p, w + p * 2, h + p * 2\n\n# find a nearest neighbour point\ndef serchNN(p0, ps):\n    L = np.array([])\n    for i in xrange(ps.shape[0]):\n        L = np.append(L,np.linalg.norm(ps[i]-p0))\n    return ps[np.argmin(L)]\n\n# check intersect 2 lines\ndef isIntersect(ap1, ap2, bp1, bp2):\n    calc1 = ((ap1[0] - ap2[0]) * (bp1[1] - ap1[1]) + (ap1[1] - ap2[1]) * (ap1[0] - bp1[0])) * ((ap1[0] - ap2[0]) * (bp2[1] - ap1[1]) + (ap1[1] - ap2[1]) * (ap1[0] - bp2[0]))\n    calc2 = ((bp1[0] - bp2[0]) * (ap1[1] - bp1[1]) + (bp1[1] - bp2[1]) * (bp1[0] - ap1[0])) * ((bp1[0] - bp2[0]) * (ap2[1] - bp1[1]) + (bp1[1] - bp2[1]) * (bp1[0] - ap2[0]))\n    if (calc1 < 0):\n        if (calc2 < 0):\n            return True\n    return False\n\n# apply convexHull to the contour\ndef convHull(cnt):\n    epsilon = 0.1*cv2.arcLength(cnt, True)\n    approx = cv2.approxPolyDP(cnt, epsilon, True)\n    hull = cv2.convexHull(cnt, returnPoints = True)\n    return hull\n\n# detect a centroid from a coutour\ndef centroidPL(cnt):\n    M = cv2.moments(cnt)\n    cx = int(M['m10']/M['m00'])\n    cy = int(M['m01']/M['m00'])\n    return cx,cy\n\n# display 1st frame and set counting line\nret, img = cap.read()\nimg = cv2.putText(img, 'Please draw a line with drug the mouse.', (img.shape[1]/2-300, img.shape[0]/2), font, 1, (0,0,255), 2, cv2.LINE_AA)\nimg = cv2.putText(img, 'Finish the draw, press ESC. \\n Retry, press \"r\".', (img.shape[1]/2-300, img.shape[0]/2+40), font, 1, (0,0,255), 2, cv2.LINE_AA)\nimg = cv2.putText(img, 'Retry, press \"r\".', (img.shape[1]/2-300, img.shape[0]/2+80), font, 1, (0,0,255), 2, cv2.LINE_AA)\nimg = cv2.resize(img, (img.shape[1]/2, img.shape[0]/2))\nimgr = img.copy()\nsx,sy = -1,-1\nex,ey = -1,-1\n\ndef draw_line(event,x,y,flags,param):\n    global sx,sy,ex,ey\n    \n    if event == cv2.EVENT_LBUTTONDOWN:\n        sx,sy = x,y\n        \n    elif event == cv2.EVENT_LBUTTONUP:\n        cv2.line(img,(sx,sy),(x,y),(255,0,0), 2)\n        ex,ey = x,y\n\ncv2.namedWindow('Draw_Line')\ncv2.setMouseCallback('Draw_Line',draw_line)\n\nwhile(1):\n    cv2.imshow('Draw_Line',img)\n    k = cv2.waitKey(20) & 0xFF\n    if k == 27:\n        break\n    elif k == ord('r'):\n        img = imgr.copy()\n        continue\n\ncv2.destroyAllWindows()\n\n# initialize line\nlp0 = (sx, sy)\nlp1 = (ex, ey)\nnlp0 = np.array([lp0[0], lp0[1]], float)\nnlp1 = np.array([lp1[0], lp1[1]], float)\n\nwhile(cap.isOpened()):\n    try:\n        ret, o_frame = cap.read() #read a frame\n        frame = cv2.resize(o_frame, (o_frame.shape[1]/2, o_frame.shape[0]/2))\n        \n        #Use the substractor\n        fgmask = fgbg.apply(frame) \n        fgmask_o = fgmask.copy()\n        \n        fgmask = cv2.threshold(fgmask, 244, 255, cv2.THRESH_BINARY)[1]\n        kernel = np.ones((5,5), np.uint8)\n#        fgmask = cv2.morphologyEx(fgmask, cv2.MORPH_CLOSE, kernel)\n        fgmask = cv2.dilate(fgmask, cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3,3)), iterations = 2)\n        \n        im2, contours, hierarchy = cv2.findContours(fgmask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n        \n        # initialize var iteration\n        new_center = np.empty((0,2), float)\n        \n        for c in contours:\n            \n            if (itr % fps == 0):\n                continue\n            \n            # calc the area\n            cArea = cv2.contourArea(c)\n            if cArea < 300: # if 1280x960 set to 50000, 640x480 set to 12500\n                continue\n            \n            # apply the convex hull \n            c = convHull(c)\n            \n            # rectangle area\n            x, y, w, h = cv2.boundingRect(c)\n            x, y, w, h = padding_position(x, y, w, h, 5)\n            \n            # center point\n            cx, cy = centroidPL(c)\n            new_point = np.array([cx, cy], float)\n            new_center = np.append(new_center, np.array([[cx, cy]]), axis=0)\n            \n            if (old_center.size > 1):\n                #print cArea and new center point\n                print 'Loop: ' + str(itr) + '   Coutours #: ' + str(len(contours))\n                print 'New Center :' + str(cx) + ',' + str(cy)\n                #print 'New Center :' + str(new_center)\n                \n                # calicurate nearest old center point\n                old_point_t = serchNN(new_point, old_center)\n                \n                # check the old center point in the counding box\n                if (cv2.pointPolygonTest(c, (old_point_t[0], old_point_t[1]), True) > 0):\n                    old_point = old_point_t\n                    print 'Old Center :' + str(int(old_point[0])) + ',' + str(int(old_point[1]))\n                    \n                    # put line between old_center to new_center\n                    cv2.line(frame, (int(old_point[0]), int(old_point[1])), (cx, cy), (0,0,255), 2)\n                    \n                    # cross line check\n                    if (isIntersect(nlp0, nlp1, old_point, new_point)):\n                        print 'Crossing!'\n                        crossed += 1\n                \n            \n            # put floating text\n            cv2.putText(frame, 'CA:' + str(cArea)[0:-2] , (x+10, y+20), font, 0.5, (255,255,255), 1, cv2.LINE_AA)\n            \n            # draw center\n            cv2.circle(frame,(cx,cy),5,(0,0,255),-1)\n            \n            # draw rectangle or contour\n            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 3)  #rectangle contour\n#            cv2.drawContours(frame, [c], 0, (0,255,0), 2)\n#            cv2.polylines(frame, [c], True, (0,255,0), 2)\n        \n        # put fixed text, line and show images\n        cv2.putText(frame, 'Crossing:' + str(crossed), ((o_frame.shape[1]/3), 30), font, 1, (255,255,255), 1, cv2.LINE_AA)\n        cv2.line(frame, (lp0), (lp1), (255,0,0), 2)\n        cv2.imshow('Frame',frame)\n        cv2.imshow('Background Substraction',fgmask_o)\n        cv2.imshow('Contours',fgmask)\n        \n        # increase var number and renew center array\n        old_center = new_center\n        itr += 1\n        \n    except:\n        #if there are no more frames to show...\n        print('EOF')\n        break\n    \n    #Abort and exit with 'Q' or ESC\n    k = cv2.waitKey(30) & 0xff\n    if k == 27:\n        break\n\ncap.release() #release video file\ncv2.destroyAllWindows() #close all openCV windows\n```\n\n## \u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\u5f8c\u7de8\u3067\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\u3092\u884c\u3044\u307e\u3059\u306e\u3067\u3001\u3057\u3070\u3057\u304a\u5f85\u3061\u4e0b\u3055\u3044\u3002\n"}