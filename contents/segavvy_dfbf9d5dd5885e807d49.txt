{"context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 :: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\u3002\n\n\u7b2c5\u7ae0: \u4fc2\u308a\u53d7\u3051\u89e3\u6790\n\n\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092CaboCha\u3092\u4f7f\u3063\u3066\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.cabocha\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n\n49. \u540d\u8a5e\u9593\u306e\u4fc2\u308a\u53d7\u3051\u30d1\u30b9\u306e\u62bd\u51fa\n\n\u6587\u4e2d\u306e\u3059\u3079\u3066\u306e\u540d\u8a5e\u53e5\u306e\u30da\u30a2\u3092\u7d50\u3076\u6700\u77ed\u4fc2\u308a\u53d7\u3051\u30d1\u30b9\u3092\u62bd\u51fa\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u540d\u8a5e\u53e5\u30da\u30a2\u306e\u6587\u7bc0\u756a\u53f7\u304c i \u3068 j \uff08 i < j \uff09\u306e\u3068\u304d\uff0c\u4fc2\u308a\u53d7\u3051\u30d1\u30b9\u306f\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3092\u6e80\u305f\u3059\u3082\u306e\u3068\u3059\u308b\uff0e\n\n\u554f\u984c48\u3068\u540c\u69d8\u306b\uff0c\u30d1\u30b9\u306f\u958b\u59cb\u6587\u7bc0\u304b\u3089\u7d42\u4e86\u6587\u7bc0\u306b\u81f3\u308b\u307e\u3067\u306e\u5404\u6587\u7bc0\u306e\u8868\u73fe\uff08\u8868\u5c64\u5f62\u306e\u5f62\u614b\u7d20\u5217\uff09\u3092\"->\"\u3067\u9023\u7d50\u3057\u3066\u8868\u73fe\u3059\u308b\n\u6587\u7bc0 i \u3068 j \u306b\u542b\u307e\u308c\u308b\u540d\u8a5e\u53e5\u306f\u305d\u308c\u305e\u308c\uff0cX\u3068Y\u306b\u7f6e\u63db\u3059\u308b\n\n\u307e\u305f\uff0c\u4fc2\u308a\u53d7\u3051\u30d1\u30b9\u306e\u5f62\u72b6\u306f\uff0c\u4ee5\u4e0b\u306e2\u901a\u308a\u304c\u8003\u3048\u3089\u308c\u308b\uff0e\n\n\u6587\u7bc0 i \u304b\u3089\u69cb\u6587\u6728\u306e\u6839\u306b\u81f3\u308b\u7d4c\u8def\u4e0a\u306b\u6587\u7bc0 j \u304c\u5b58\u5728\u3059\u308b\u5834\u5408: \u6587\u7bc0 i \u304b\u3089\u6587\u7bc0 j \u306e\u30d1\u30b9\u3092\u8868\u793a\n\u4e0a\u8a18\u4ee5\u5916\u3067\uff0c\u6587\u7bc0 i \u3068\u6587\u7bc0 j \u304b\u3089\u69cb\u6587\u6728\u306e\u6839\u306b\u81f3\u308b\u7d4c\u8def\u4e0a\u3067\u5171\u901a\u306e\u6587\u7bc0 k \u3067\u4ea4\u308f\u308b\u5834\u5408: \u6587\u7bc0 i \u304b\u3089\u6587\u7bc0 k \u306b\u81f3\u308b\u76f4\u524d\u306e\u30d1\u30b9\u3068\u6587\u7bc0 j \u304b\u3089\u6587\u7bc0 k \u306b\u81f3\u308b\u76f4\u524d\u307e\u3067\u306e\u30d1\u30b9\uff0c\u6587\u7bc0 k \u306e\u5185\u5bb9\u3092\"|\"\u3067\u9023\u7d50\u3057\u3066\u8868\u793a\n\n\u4f8b\u3048\u3070\uff0c\u300c\u543e\u8f29\u306f\u3053\u3053\u3067\u59cb\u3081\u3066\u4eba\u9593\u3068\u3044\u3046\u3082\u306e\u3092\u898b\u305f\u3002\u300d\u3068\u3044\u3046\u6587\uff08neko.txt.cabocha\u306e8\u6587\u76ee\uff09\u304b\u3089\uff0c\u6b21\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\nX\u306f | Y\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\nX\u306f | Y\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\nX\u306f | Y\u3092 | \u898b\u305f\nX\u3067 -> \u59cb\u3081\u3066 -> Y\nX\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> Y\nX\u3068\u3044\u3046 -> Y\n\n\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\nmain.py\n# coding: utf-8\nimport CaboCha\nimport re\n\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.cabocha'\nfname_result = 'result.txt'\n\n\ndef parse_neko():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\u3066neko.txt.cabocha\u306b\u4fdd\u5b58\u3059\u308b\n    '''\n    with open(fname) as data_file, \\\n            open(fname_parsed, mode='w') as out_file:\n\n        cabocha = CaboCha.Parser()\n        for line in data_file:\n            out_file.write(\n                cabocha.parse(line).toString(CaboCha.FORMAT_LATTICE)\n            )\n\n\nclass Morph:\n    '''\n    \u5f62\u614b\u7d20\u30af\u30e9\u30b9\n    \u8868\u5c64\u5f62\uff08surface\uff09\u3001\u57fa\u672c\u5f62\uff08base\uff09\u3001\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u3092\n    \u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n    '''\n    def __init__(self, surface, base, pos, pos1):\n        '''\u521d\u671f\u5316'''\n        self.surface = surface\n        self.base = base\n        self.pos = pos\n        self.pos1 = pos1\n\n    def __str__(self):\n        '''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n        return 'surface[{}]\\tbase[{}]\\tpos[{}]\\tpos1[{}]'\\\n            .format(self.surface, self.base, self.pos, self.pos1)\n\n\nclass Chunk:\n    '''\n    \u6587\u7bc0\u30af\u30e9\u30b9\n    \u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\u3001\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\u3001\n    \u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n    '''\n\n    def __init__(self):\n        '''\u521d\u671f\u5316'''\n        self.morphs = []\n        self.srcs = []\n        self.dst = -1\n\n    def __str__(self):\n        '''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n        surface = ''\n        for morph in self.morphs:\n            surface += morph.surface\n        return '{}\\tsrcs{}\\tdst[{}]'.format(surface, self.srcs, self.dst)\n\n    def normalized_surface(self):\n        '''\u53e5\u8aad\u70b9\u306a\u3069\u306e\u8a18\u53f7\u3092\u9664\u3044\u305f\u8868\u5c64\u5f62'''\n        result = ''\n        for morph in self.morphs:\n            if morph.pos != '\u8a18\u53f7':\n                result += morph.surface\n        return result\n\n    def chk_pos(self, pos):\n        '''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n        \u623b\u308a\u5024\uff1a\n        \u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u5834\u5408\u306fTrue\n        '''\n        for morph in self.morphs:\n            if morph.pos == pos:\n                return True\n        return False\n\n    def get_morphs_by_pos(self, pos, pos1=''):\n        '''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u306e\u5f62\u614b\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n        pos1\u306e\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306fpos\u306e\u307f\u3067\u5224\u5b9a\u3059\u308b\n\n        \u623b\u308a\u5024\uff1a\n        \u5f62\u614b\u7d20\uff08morph\uff09\u306e\u30ea\u30b9\u30c8\u3001\u8a72\u5f53\u5f62\u614b\u7d20\u304c\u306a\u3044\u5834\u5408\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\n        '''\n        if len(pos1) > 0:\n            return [res for res in self.morphs\n                    if (res.pos == pos) and (res.pos1 == pos1)]\n        else:\n            return [res for res in self.morphs if res.pos == pos]\n\n    def get_kaku_prt(self):\n        '''\u52a9\u8a5e\u30921\u3064\u8fd4\u3059\n        \u8907\u6570\u3042\u308b\u5834\u5408\u306f\u683c\u52a9\u8a5e\u3092\u512a\u5148\u3057\u3001\u6700\u5f8c\u306e\u52a9\u8a5e\u3092\u8fd4\u3059\u3002\n\n        \u623b\u308a\u5024\uff1a\n        \u52a9\u8a5e\u3001\u306a\u3044\u5834\u5408\u306f\u7a7a\u6587\u5b57\u5217\n        '''\n        prts = self.get_morphs_by_pos('\u52a9\u8a5e')\n        if len(prts) > 1:\n\n            # 2\u3064\u4ee5\u4e0a\u52a9\u8a5e\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u683c\u52a9\u8a5e\u3092\u512a\u5148\n            kaku_prts = self.get_morphs_by_pos('\u52a9\u8a5e', '\u683c\u52a9\u8a5e')\n            if len(kaku_prts) > 0:\n                prts = kaku_prts\n\n        if len(prts) > 0:\n            return prts[-1].surface     # \u6700\u5f8c\u3092\u8fd4\u3059\n        else:\n            return ''\n\n    def get_sahen_wo(self):\n        '''\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\u300d\u3092\u542b\u7121\u5834\u5408\u306f\u3001\u305d\u306e\u90e8\u5206\u306e\u8868\u5c64\u5f62\u3092\u8fd4\u3059\n\n        \u623b\u308a\u5024\uff1a\n        \u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\u300d\u306e\u6587\u5b57\u5217\u3001\u306a\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\n        '''\n        for i, morph in enumerate(self.morphs[0:-1]):\n\n            if (morph.pos == '\u540d\u8a5e') \\\n                    and (morph.pos1 == '\u30b5\u5909\u63a5\u7d9a') \\\n                    and (self.morphs[i + 1].pos == '\u52a9\u8a5e') \\\n                    and (self.morphs[i + 1].surface == '\u3092'):\n                return morph.surface + self.morphs[i + 1].surface\n\n        return ''\n\n    def noun_masked_surface(self, mask, dst=False):\n        '''\u540d\u8a5e\u3092\u6307\u5b9a\u6587\u5b57(mask)\u3067\u30de\u30b9\u30af\u3057\u305f\u8868\u5c64\u5f62\u3092\u8fd4\u3059\n        dst\u304cTrue\u306e\u5834\u5408\u306f\u6700\u5de6\u306e\u540d\u8a5e\u3092\u30de\u30b9\u30af\u3057\u305f\u4ee5\u964d\u306f\u5207\u308a\u6368\u3066\u3066\u8fd4\u3059\n\n        \u623b\u308a\u5024\uff1a\n        \u540d\u8a5e\u3092\u30de\u30b9\u30af\u3057\u305f\u8868\u5c64\u5f62\n        '''\n        result = ''\n        for morph in self.morphs:\n            if morph.pos != '\u8a18\u53f7':\n                if morph.pos == '\u540d\u8a5e':\n                    result += mask\n                    if dst:\n                        return result\n                    mask = ''       # \u6700\u521d\u306b\u898b\u3064\u3051\u305f\u540d\u8a5e\u3092\u30de\u30b9\u30af\u3001\u4ee5\u964d\u306e\u540d\u8a5e\u306f\u9664\u53bb\n                else:\n                    result += morph.surface\n        return result\n\n\ndef neco_lines():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\n    1\u6587\u305a\u3064Chunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n    \u623b\u308a\u5024\uff1a\n    1\u6587\u306eChunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\n    '''\n    with open(fname_parsed) as file_parsed:\n\n        chunks = dict()     # idx\u3092key\u306bChunk\u3092\u683c\u7d0d\n        idx = -1\n\n        for line in file_parsed:\n\n            # 1\u6587\u306e\u7d42\u4e86\u5224\u5b9a\n            if line == 'EOS\\n':\n\n                # Chunk\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n                if len(chunks) > 0:\n\n                    # chunks\u3092key\u3067\u30bd\u30fc\u30c8\u3057\u3001value\u306e\u307f\u53d6\u308a\u51fa\u3057\n                    sorted_tuple = sorted(chunks.items(), key=lambda x: x[0])\n                    yield list(zip(*sorted_tuple))[1]\n                    chunks.clear()\n\n                else:\n                    yield []\n\n            # \u5148\u982d\u304c*\u306e\u884c\u306f\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Chunk\u3092\u4f5c\u6210\n            elif line[0] == '*':\n\n                # Chunk\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3068\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u53d6\u5f97\n                cols = line.split(' ')\n                idx = int(cols[1])\n                dst = int(re.search(r'(.*?)D', cols[2]).group(1))\n\n                # Chunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u30bb\u30c3\u30c8\n                if idx not in chunks:\n                    chunks[idx] = Chunk()\n                chunks[idx].dst = dst\n\n                # \u4fc2\u308a\u5148\u306eChunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5143\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u8ffd\u52a0\n                if dst != -1:\n                    if dst not in chunks:\n                        chunks[dst] = Chunk()\n                    chunks[dst].srcs.append(idx)\n\n            # \u305d\u308c\u4ee5\u5916\u306e\u884c\u306f\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Morph\u3092\u4f5c\u308aChunk\u306b\u8ffd\u52a0\n            else:\n\n                # \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n                cols = line.split('\\t')\n                res_cols = cols[1].split(',')\n\n                # Morph\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n                chunks[idx].morphs.append(\n                    Morph(\n                        cols[0],        # surface\n                        res_cols[6],    # base\n                        res_cols[0],    # pos\n                        res_cols[1]     # pos1\n                    )\n                )\n\n        raise StopIteration\n\n\n# \u4fc2\u308a\u53d7\u3051\u89e3\u6790\nparse_neko()\n\n# \u7d50\u679c\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\nwith open(fname_result, mode='w') as out_file:\n\n    # 1\u6587\u305a\u3064\u30ea\u30b9\u30c8\u4f5c\u6210\n    for chunks in neco_lines():\n\n        # \u540d\u8a5e\u3092\u542b\u3080chunk\u306b\u9650\u5b9a\u3057\u305f\u3001chunks\u306b\u304a\u3051\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n        indexs_noun = [i for i in range(len(chunks))\n                if len(chunks[i].get_morphs_by_pos('\u540d\u8a5e')) > 0]\n\n        # 2\u3064\u4ee5\u4e0a\u3042\u308b\uff1f\n        if len(indexs_noun) < 2:\n            continue\n\n        # \u540d\u8a5e\u3092\u542b\u3080chunk\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7dcf\u5f53\u308a\u3067\u30c1\u30a7\u30c3\u30af\n        for i, index_x in enumerate(indexs_noun[:-1]):\n            for index_y in indexs_noun[i + 1:]:\n\n                meet_y = False          # Y\u306b\u3076\u3064\u304b\u3063\u305f\uff1f\n                index_dup = -1          # X\u3068Y\u306e\u7d4c\u8def\u304c\u3076\u3064\u304b\u3063\u305fchunk\u306eindex\n                routes_x = set()        # X\u306e\u7d4c\u8def\u30c1\u30a7\u30c3\u30af\u7528\n\n                # \u540d\u8a5eX\u304b\u3089\u6839\u306b\u5411\u304b\u3063\u3066\u3001Y\u306b\u3076\u3064\u304b\u3089\u306a\u3044\u304b\u8abf\u3079\u306a\u304c\u3089\u63a2\u7d22\n                dst = chunks[index_x].dst\n                while dst != -1:\n                    if dst == index_y:\n                        meet_y = True           # Y\u306b\u3076\u3064\u304b\u3063\u305f\n                        break\n                    routes_x.add(dst)           # \u7d4c\u8def\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306b\u4fdd\u5b58\n                    dst = chunks[dst].dst\n\n                # \u540d\u8a5eY\u304b\u3089\u6839\u307e\u3067\u3001X\u306e\u7d4c\u8def\u306b\u3076\u3064\u304b\u3089\u306a\u3044\u304b\u8abf\u3079\u306a\u304c\u3089\u63a2\u7d22\n                if not meet_y:\n                    dst = chunks[index_y].dst\n                    while dst != -1:\n                        if dst in routes_x:\n                            index_dup = dst     # X\u306e\u7d4c\u8def\u3068\u3076\u3064\u304b\u3063\u305f\n                            break\n                        else:\n                            dst = chunks[dst].dst\n\n                # \u7d50\u679c\u51fa\u529b\n                if index_dup == -1:\n\n                    # X\u304b\u3089Y\u306b\u3076\u3064\u304b\u308b\u30d1\u30bf\u30fc\u30f3\n                    out_file.write(chunks[index_x].noun_masked_surface('X'))\n                    dst = chunks[index_x].dst\n                    while dst != -1:\n                        if dst == index_y:\n                            out_file.write(\n                                    ' -> ' + chunks[dst].noun_masked_surface('Y', True))\n                            break\n                        else:\n                            out_file.write(\n                                    ' -> ' + chunks[dst].normalized_surface())\n                        dst = chunks[dst].dst\n                    out_file.write('\\n')\n\n                else:\n\n                    # \u7d4c\u8def\u4e0a\u306e\u5171\u901a\u306echunk\u3067\u3076\u3064\u304b\u308b\u30d1\u30bf\u30fc\u30f3\n\n                    # X\u304b\u3089\u3076\u3064\u304b\u308b\u624b\u524d\u307e\u3067\u3092\u51fa\u529b\n                    out_file.write(chunks[index_x].noun_masked_surface('X'))\n                    dst = chunks[index_x].dst\n                    while dst != index_dup:\n                        out_file.write(' -> ' + chunks[dst].normalized_surface())\n                        dst = chunks[dst].dst\n                    out_file.write(' | ')\n\n                    # Y\u304b\u3089\u3076\u3064\u304b\u308b\u624b\u524d\u307e\u3067\u3092\u51fa\u529b\n                    out_file.write(chunks[index_y].noun_masked_surface('Y'))\n                    dst = chunks[index_y].dst\n                    while dst != index_dup:\n                        out_file.write(' -> ' + chunks[dst].normalized_surface())\n                        dst = chunks[dst].dst\n                    out_file.write(' | ')\n\n                    # \u3076\u3064\u304b\u3063\u305fchunk\u3092\u51fa\u529b\n                    out_file.write(chunks[index_dup].normalized_surface())\n                    out_file.write('\\n')\n\n\n\n\u5b9f\u884c\u7d50\u679c\uff1a\n\u4ee5\u4e0b\u3001\u7d50\u679c\u306e\u5148\u982d\u90e8\u5206\u3067\u3059\u3002\n\nresult.txt\uff08\u5148\u982d\u90e8\u5206\uff09\nX\u306f -> Y\nX\u3067 -> \u751f\u308c\u305f\u304b | Y\u304c | \u3064\u304b\u306c\nX\u3067\u3082 -> \u8584\u6697\u3044 -> Y\nX\u3067\u3082 -> \u8584\u6697\u3044 -> \u6240\u3067 | Y | \u6ce3\u3044\u3066\u3044\u305f\nX\u3067\u3082 -> \u8584\u6697\u3044 -> \u6240\u3067 -> \u6ce3\u3044\u3066\u3044\u305f -> Y\nX\u3067\u3082 -> \u8584\u6697\u3044 -> \u6240\u3067 -> \u6ce3\u3044\u3066\u3044\u305f -> \u4e8b\u3060\u3051\u306f -> Y\nX\u3067 | Y | \u6ce3\u3044\u3066\u3044\u305f\nX\u3067 -> \u6ce3\u3044\u3066\u3044\u305f -> Y\nX\u3067 -> \u6ce3\u3044\u3066\u3044\u305f -> \u4e8b\u3060\u3051\u306f -> Y\nX -> \u6ce3\u3044\u3066\u3044\u305f -> Y\nX -> \u6ce3\u3044\u3066\u3044\u305f -> \u4e8b\u3060\u3051\u306f -> Y\nX\u3060\u3051\u306f -> Y\nX\u306f | Y\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\nX\u306f | Y\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\nX\u306f | Y\u3092 | \u898b\u305f\nX\u3067 -> \u59cb\u3081\u3066 -> Y\nX\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> Y\nX\u3068\u3044\u3046 -> Y\nX\u306f | Y\u3068\u3044\u3046 -> \u4eba\u9593\u4e2d\u3067 | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u306f | YY\u3067 | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u306f | Y -> \u7370\u60aa\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u306f | Y\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u306f -> Y\nX\u3068\u3044\u3046 -> Y\nX\u3068\u3044\u3046 -> \u4eba\u9593\u4e2d\u3067 | Y -> \u7370\u60aa\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u3068\u3044\u3046 -> \u4eba\u9593\u4e2d\u3067 | Y\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u3068\u3044\u3046 -> \u4eba\u9593\u4e2d\u3067 -> Y\nXX\u3067 | Y -> \u7370\u60aa\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nXX\u3067 | Y\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nXX\u3067 -> Y\nX -> Y\nX -> \u7370\u60aa\u306a -> Y\nX\u306a -> Y\n\n\n\u7d50\u679c\u5168\u4f53\u306fGitHub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u554f\u984c\u306e\u610f\u5473\nChunk\u30af\u30e9\u30b9\u306bnoun_masked_surface()\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u6587\u7bc0\u306e\u4e2d\u306e\u540d\u8a5e\u3092\u30de\u30b9\u30af\u3057\u305f\u8868\u5c64\u5f62\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u306f\u524d\u554f\u306e\u307e\u307e\u3067\u3059\u3002\ni \u3068\u304b j \u3068\u304b\u51fa\u3066\u304d\u3066\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u304c\u3001\u6587\u4e2d\u306e\u540d\u8a5e2\u3064\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7dcf\u5f53\u305f\u308a\u3057\u3066\u3001\u4f4d\u7f6e\u95a2\u4fc2\u3092\u524d\u554f\u306e\u3088\u3046\u306a\u30d1\u30b9\u3067\u51fa\u529b\u3057\u306a\u3055\u3044\u3001\u3068\u3044\u3046\u554f\u984c\u3067\u3059\u3002\n\u305f\u3068\u3048\u3070\u554f\u984c\u6587\u3067\u4f8b\u3068\u3057\u3066\u4f7f\u308f\u308c\u3066\u3044\u308b\u300c\u543e\u8f29\u306f\u3053\u3053\u3067\u59cb\u3081\u3066\u4eba\u9593\u3068\u3044\u3046\u3082\u306e\u3092\u898b\u305f\u3002\u300d\u306e\u5834\u5408\u3001\u540d\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u306f\u3001\u6b21\u306e\u4e38\u3092\u4ed8\u3051\u305f4\u3064\u3067\u3059\u3002\n\n\u3053\u306e4\u3064\u306e\u6587\u7bc0\u3092\u30da\u30a2\u306b\u3059\u308b\u7d44\u307f\u5408\u308f\u305b\u306f6\u901a\u308a\u3042\u308b\u305f\u3081\u30016\u884c\u306e\u30d1\u30b9\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\u307e\u305a\u6700\u521d\u306b\u6ce8\u76ee\u3059\u308b\u30da\u30a2\u306f\u6700\u521d\u306b\u51fa\u3066\u304f\u308b\u300c\u543e\u8f29\u300d\u3068\u300c\u3053\u3053\u300d\u306e2\u3064\u3067\u3059\u3002\u6587\u7bc0\u756a\u53f7\u306e\u82e5\u3044 i \u304cX\u306b\u306a\u308b\u306e\u3067\u3001X\u3068Y\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u306e2\u3064\u306f\u300c\u898b\u305f\u300d\u3067\u3076\u3064\u304b\u308b\u306e\u3067\u3001\u305d\u308c\u305e\u308c\u304b\u3089\u300c\u898b\u305f\u300d\u306e\u624b\u524d\u307e\u3067\u306e\u30d1\u30b9\u3068\u300c\u898b\u305f\u300d\u305d\u306e\u3082\u306e\u3092|\u3067\u533a\u5207\u3063\u3066\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u540d\u8a5e\u306f\u300cX\u300d\u3068\u300cY\u300d\u306b\u7f6e\u63db\u3057\u307e\u3059\u3002\nX\u306f | Y\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\n\n\u7d9a\u3044\u3066X\u306f\u305d\u306e\u307e\u307e\u3001Y\u3092\u6b21\u306e\u3082\u306e\u306b\u305a\u3089\u3057\u307e\u3059\u3002\n\nX\u306f | Y\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\n\n\u540c\u3058\u3088\u3046\u306b\u6b21\u306b\u3044\u304d\u307e\u3059\u3002\n\nX\u306f | Y\u3092 | \u898b\u305f\n\n\u300c\u543e\u8f29\u300d\u3092\u8d77\u70b9\u306b\u3057\u305f\u30da\u30a2\u306f\u3082\u3046\u306a\u3044\u306e\u3067\u3001X\u3092\u300c\u3053\u3053\u300d\u306b\u305a\u3089\u3057\u307e\u3059\u3002\n\n\u4eca\u5ea6\u306f\u30d1\u30b9\u306e\u9014\u4e2d\u3067Y\u306b\u3076\u3064\u304b\u308a\u307e\u3059\u3002\u9014\u4e2d\u3067\u3076\u3064\u304b\u3063\u305f\u5834\u5408\u306f\u305d\u3053\u307e\u3067\u306e\u30d1\u30b9\u3092\u8868\u793a\u3057\u3066\u7d42\u308f\u308a\u3067\u3059\u3002\u306a\u304a\u3001\u554f\u984c\u6587\u306e\u4f8b\u3092\u898b\u308b\u3068\u3001Y\u5074\u306f\u305d\u306e\u540d\u8a5e\u3088\u308a\u5f8c\u306e\u5f62\u614b\u7d20\u306f\u8868\u793a\u3057\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001Y\u306e\u6587\u7bc0\u3092\u8868\u793a\u3059\u308b\u969b\u306f\u540d\u8a5e\u3088\u308a\u5f8c\u3092\u7701\u7565\u3057\u307e\u3059\u3002Chunk\u30af\u30e9\u30b9\u306b\u8ffd\u52a0\u3057\u305fnoun_masked_surface()\u95a2\u6570\u306e\u5f15\u6570dst\u306f\u3001\u540d\u8a5e\u3088\u308a\u5f8c\u308d\u3092\u7701\u7565\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\nX\u3067 -> \u59cb\u3081\u3066 -> Y\n\n\u3042\u3068\u306f\u3053\u308c\u3092\u7e70\u308a\u8fd4\u3059\u3060\u3051\u3067\u3059\u3002\n\nX\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> Y\n\n\u300c\u3053\u3053\u300d\u3092\u8d77\u70b9\u306b\u3057\u305f\u30da\u30a2\u306f\u3082\u3046\u306a\u3044\u306e\u3067\u3001X\u3092\u305a\u3089\u3057\u307e\u3059\u3002\n\nX\u3068\u3044\u3046 -> Y\n\n\u6700\u521d\u306f\u554f\u984c\u306e\u610f\u5473\u304c\u308f\u304b\u3089\u305a\u82e6\u6226\u3057\u307e\u3057\u305f\u304c\u3001\u5206\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u306a\u3093\u3068\u304b\u306a\u308a\u307e\u3059\u3002\n\n\u6587\u7bc0\u5185\u306b\u540d\u8a5e\u304c\u8907\u6570\u3042\u308b\u5834\u5408\n\u6587\u7bc0\u5185\u306b\u540d\u8a5e\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u6700\u521d\u306b\u898b\u3064\u3051\u305f\u540d\u8a5e\u306e\u307fX\u3084Y\u306b\u7f6e\u63db\u3057\u3001\u305d\u308c\u4ee5\u964d\u306e\u540d\u8a5e\u306f\u9664\u53bb\u3059\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u3057\u307e\u3057\u305f\u3002\u3061\u3087\u3063\u3068\u3084\u3063\u3064\u3051\u3067\u3059\u304c\u3001\u540d\u8a5e\u304c\u7d9a\u304f\u90e8\u5206\u306f1\u3064\u306eX\u3084Y\u306b\u7f6e\u63db\u3055\u308c\u308b\u306e\u3067\u3001\u306a\u3093\u3068\u306a\u304f\u3044\u3044\u611f\u3058\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3000\n50\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c5\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u9752\u7a7a\u6587\u5eab\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 \\:\\: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f[\u3053\u3061\u3089](http://qiita.com/segavvy/items)\u304b\u3089\u3069\u3046\u305e\u3002\n\n## \u7b2c5\u7ae0: \u4fc2\u308a\u53d7\u3051\u89e3\u6790\n>\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092CaboCha\u3092\u4f7f\u3063\u3066\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.cabocha\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n###49. \u540d\u8a5e\u9593\u306e\u4fc2\u308a\u53d7\u3051\u30d1\u30b9\u306e\u62bd\u51fa\n>\u6587\u4e2d\u306e\u3059\u3079\u3066\u306e\u540d\u8a5e\u53e5\u306e\u30da\u30a2\u3092\u7d50\u3076\u6700\u77ed\u4fc2\u308a\u53d7\u3051\u30d1\u30b9\u3092\u62bd\u51fa\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u540d\u8a5e\u53e5\u30da\u30a2\u306e\u6587\u7bc0\u756a\u53f7\u304c *i* \u3068 *j* \uff08 *i* < *j* \uff09\u306e\u3068\u304d\uff0c\u4fc2\u308a\u53d7\u3051\u30d1\u30b9\u306f\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3092\u6e80\u305f\u3059\u3082\u306e\u3068\u3059\u308b\uff0e\n>\n> - \u554f\u984c48\u3068\u540c\u69d8\u306b\uff0c\u30d1\u30b9\u306f\u958b\u59cb\u6587\u7bc0\u304b\u3089\u7d42\u4e86\u6587\u7bc0\u306b\u81f3\u308b\u307e\u3067\u306e\u5404\u6587\u7bc0\u306e\u8868\u73fe\uff08\u8868\u5c64\u5f62\u306e\u5f62\u614b\u7d20\u5217\uff09\u3092\"`->`\"\u3067\u9023\u7d50\u3057\u3066\u8868\u73fe\u3059\u308b\n> - \u6587\u7bc0 *i* \u3068 *j* \u306b\u542b\u307e\u308c\u308b\u540d\u8a5e\u53e5\u306f\u305d\u308c\u305e\u308c\uff0cX\u3068Y\u306b\u7f6e\u63db\u3059\u308b\n>\n>\u307e\u305f\uff0c\u4fc2\u308a\u53d7\u3051\u30d1\u30b9\u306e\u5f62\u72b6\u306f\uff0c\u4ee5\u4e0b\u306e2\u901a\u308a\u304c\u8003\u3048\u3089\u308c\u308b\uff0e\n>\n> - \u6587\u7bc0 *i* \u304b\u3089\u69cb\u6587\u6728\u306e\u6839\u306b\u81f3\u308b\u7d4c\u8def\u4e0a\u306b\u6587\u7bc0 *j* \u304c\u5b58\u5728\u3059\u308b\u5834\u5408: \u6587\u7bc0 *i* \u304b\u3089\u6587\u7bc0 *j* \u306e\u30d1\u30b9\u3092\u8868\u793a\n> - \u4e0a\u8a18\u4ee5\u5916\u3067\uff0c\u6587\u7bc0 *i* \u3068\u6587\u7bc0 *j* \u304b\u3089\u69cb\u6587\u6728\u306e\u6839\u306b\u81f3\u308b\u7d4c\u8def\u4e0a\u3067\u5171\u901a\u306e\u6587\u7bc0 *k* \u3067\u4ea4\u308f\u308b\u5834\u5408: \u6587\u7bc0 *i* \u304b\u3089\u6587\u7bc0 *k* \u306b\u81f3\u308b\u76f4\u524d\u306e\u30d1\u30b9\u3068\u6587\u7bc0 *j* \u304b\u3089\u6587\u7bc0 *k* \u306b\u81f3\u308b\u76f4\u524d\u307e\u3067\u306e\u30d1\u30b9\uff0c\u6587\u7bc0 *k* \u306e\u5185\u5bb9\u3092\"`|`\"\u3067\u9023\u7d50\u3057\u3066\u8868\u793a\n>\n>\u4f8b\u3048\u3070\uff0c\u300c\u543e\u8f29\u306f\u3053\u3053\u3067\u59cb\u3081\u3066\u4eba\u9593\u3068\u3044\u3046\u3082\u306e\u3092\u898b\u305f\u3002\u300d\u3068\u3044\u3046\u6587\uff08neko.txt.cabocha\u306e8\u6587\u76ee\uff09\u304b\u3089\uff0c\u6b21\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\n>\n>```\n> X\u306f | Y\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\n> X\u306f | Y\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\n> X\u306f | Y\u3092 | \u898b\u305f\n> X\u3067 -> \u59cb\u3081\u3066 -> Y\n> X\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> Y\n> X\u3068\u3044\u3046 -> Y\n>```\n\n####\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\n```python:main.py\n# coding: utf-8\nimport CaboCha\nimport re\n\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.cabocha'\nfname_result = 'result.txt'\n\n\ndef parse_neko():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\u3066neko.txt.cabocha\u306b\u4fdd\u5b58\u3059\u308b\n\t'''\n\twith open(fname) as data_file, \\\n\t\t\topen(fname_parsed, mode='w') as out_file:\n\n\t\tcabocha = CaboCha.Parser()\n\t\tfor line in data_file:\n\t\t\tout_file.write(\n\t\t\t\tcabocha.parse(line).toString(CaboCha.FORMAT_LATTICE)\n\t\t\t)\n\n\nclass Morph:\n\t'''\n\t\u5f62\u614b\u7d20\u30af\u30e9\u30b9\n\t\u8868\u5c64\u5f62\uff08surface\uff09\u3001\u57fa\u672c\u5f62\uff08base\uff09\u3001\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u3092\n\t\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n\t'''\n\tdef __init__(self, surface, base, pos, pos1):\n\t\t'''\u521d\u671f\u5316'''\n\t\tself.surface = surface\n\t\tself.base = base\n\t\tself.pos = pos\n\t\tself.pos1 = pos1\n\n\tdef __str__(self):\n\t\t'''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n\t\treturn 'surface[{}]\\tbase[{}]\\tpos[{}]\\tpos1[{}]'\\\n\t\t\t.format(self.surface, self.base, self.pos, self.pos1)\n\n\nclass Chunk:\n\t'''\n\t\u6587\u7bc0\u30af\u30e9\u30b9\n\t\u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\u3001\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\u3001\n\t\u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n\t'''\n\n\tdef __init__(self):\n\t\t'''\u521d\u671f\u5316'''\n\t\tself.morphs = []\n\t\tself.srcs = []\n\t\tself.dst = -1\n\n\tdef __str__(self):\n\t\t'''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n\t\tsurface = ''\n\t\tfor morph in self.morphs:\n\t\t\tsurface += morph.surface\n\t\treturn '{}\\tsrcs{}\\tdst[{}]'.format(surface, self.srcs, self.dst)\n\n\tdef normalized_surface(self):\n\t\t'''\u53e5\u8aad\u70b9\u306a\u3069\u306e\u8a18\u53f7\u3092\u9664\u3044\u305f\u8868\u5c64\u5f62'''\n\t\tresult = ''\n\t\tfor morph in self.morphs:\n\t\t\tif morph.pos != '\u8a18\u53f7':\n\t\t\t\tresult += morph.surface\n\t\treturn result\n\n\tdef chk_pos(self, pos):\n\t\t'''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u5834\u5408\u306fTrue\n\t\t'''\n\t\tfor morph in self.morphs:\n\t\t\tif morph.pos == pos:\n\t\t\t\treturn True\n\t\treturn False\n\n\tdef get_morphs_by_pos(self, pos, pos1=''):\n\t\t'''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u306e\u5f62\u614b\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\t\tpos1\u306e\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306fpos\u306e\u307f\u3067\u5224\u5b9a\u3059\u308b\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u5f62\u614b\u7d20\uff08morph\uff09\u306e\u30ea\u30b9\u30c8\u3001\u8a72\u5f53\u5f62\u614b\u7d20\u304c\u306a\u3044\u5834\u5408\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\n\t\t'''\n\t\tif len(pos1) > 0:\n\t\t\treturn [res for res in self.morphs\n\t\t\t\t\tif (res.pos == pos) and (res.pos1 == pos1)]\n\t\telse:\n\t\t\treturn [res for res in self.morphs if res.pos == pos]\n\n\tdef get_kaku_prt(self):\n\t\t'''\u52a9\u8a5e\u30921\u3064\u8fd4\u3059\n\t\t\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u683c\u52a9\u8a5e\u3092\u512a\u5148\u3057\u3001\u6700\u5f8c\u306e\u52a9\u8a5e\u3092\u8fd4\u3059\u3002\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u52a9\u8a5e\u3001\u306a\u3044\u5834\u5408\u306f\u7a7a\u6587\u5b57\u5217\n\t\t'''\n\t\tprts = self.get_morphs_by_pos('\u52a9\u8a5e')\n\t\tif len(prts) > 1:\n\n\t\t\t# 2\u3064\u4ee5\u4e0a\u52a9\u8a5e\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u683c\u52a9\u8a5e\u3092\u512a\u5148\n\t\t\tkaku_prts = self.get_morphs_by_pos('\u52a9\u8a5e', '\u683c\u52a9\u8a5e')\n\t\t\tif len(kaku_prts) > 0:\n\t\t\t\tprts = kaku_prts\n\n\t\tif len(prts) > 0:\n\t\t\treturn prts[-1].surface\t\t# \u6700\u5f8c\u3092\u8fd4\u3059\n\t\telse:\n\t\t\treturn ''\n\n\tdef get_sahen_wo(self):\n\t\t'''\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\u300d\u3092\u542b\u7121\u5834\u5408\u306f\u3001\u305d\u306e\u90e8\u5206\u306e\u8868\u5c64\u5f62\u3092\u8fd4\u3059\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\u300d\u306e\u6587\u5b57\u5217\u3001\u306a\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\n\t\t'''\n\t\tfor i, morph in enumerate(self.morphs[0:-1]):\n\n\t\t\tif (morph.pos == '\u540d\u8a5e') \\\n\t\t\t\t\tand (morph.pos1 == '\u30b5\u5909\u63a5\u7d9a') \\\n\t\t\t\t\tand (self.morphs[i + 1].pos == '\u52a9\u8a5e') \\\n\t\t\t\t\tand (self.morphs[i + 1].surface == '\u3092'):\n\t\t\t\treturn morph.surface + self.morphs[i + 1].surface\n\n\t\treturn ''\n\n\tdef noun_masked_surface(self, mask, dst=False):\n\t\t'''\u540d\u8a5e\u3092\u6307\u5b9a\u6587\u5b57(mask)\u3067\u30de\u30b9\u30af\u3057\u305f\u8868\u5c64\u5f62\u3092\u8fd4\u3059\n\t\tdst\u304cTrue\u306e\u5834\u5408\u306f\u6700\u5de6\u306e\u540d\u8a5e\u3092\u30de\u30b9\u30af\u3057\u305f\u4ee5\u964d\u306f\u5207\u308a\u6368\u3066\u3066\u8fd4\u3059\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u540d\u8a5e\u3092\u30de\u30b9\u30af\u3057\u305f\u8868\u5c64\u5f62\n\t\t'''\n\t\tresult = ''\n\t\tfor morph in self.morphs:\n\t\t\tif morph.pos != '\u8a18\u53f7':\n\t\t\t\tif morph.pos == '\u540d\u8a5e':\n\t\t\t\t\tresult += mask\n\t\t\t\t\tif dst:\n\t\t\t\t\t\treturn result\n\t\t\t\t\tmask = ''\t\t# \u6700\u521d\u306b\u898b\u3064\u3051\u305f\u540d\u8a5e\u3092\u30de\u30b9\u30af\u3001\u4ee5\u964d\u306e\u540d\u8a5e\u306f\u9664\u53bb\n\t\t\t\telse:\n\t\t\t\t\tresult += morph.surface\n\t\treturn result\n\n\ndef neco_lines():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\n\t1\u6587\u305a\u3064Chunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n\t\u623b\u308a\u5024\uff1a\n\t1\u6587\u306eChunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\n\t'''\n\twith open(fname_parsed) as file_parsed:\n\n\t\tchunks = dict()\t\t# idx\u3092key\u306bChunk\u3092\u683c\u7d0d\n\t\tidx = -1\n\n\t\tfor line in file_parsed:\n\n\t\t\t# 1\u6587\u306e\u7d42\u4e86\u5224\u5b9a\n\t\t\tif line == 'EOS\\n':\n\n\t\t\t\t# Chunk\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\t\t\t\tif len(chunks) > 0:\n\n\t\t\t\t\t# chunks\u3092key\u3067\u30bd\u30fc\u30c8\u3057\u3001value\u306e\u307f\u53d6\u308a\u51fa\u3057\n\t\t\t\t\tsorted_tuple = sorted(chunks.items(), key=lambda x: x[0])\n\t\t\t\t\tyield list(zip(*sorted_tuple))[1]\n\t\t\t\t\tchunks.clear()\n\n\t\t\t\telse:\n\t\t\t\t\tyield []\n\n\t\t\t# \u5148\u982d\u304c*\u306e\u884c\u306f\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Chunk\u3092\u4f5c\u6210\n\t\t\telif line[0] == '*':\n\n\t\t\t\t# Chunk\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3068\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u53d6\u5f97\n\t\t\t\tcols = line.split(' ')\n\t\t\t\tidx = int(cols[1])\n\t\t\t\tdst = int(re.search(r'(.*?)D', cols[2]).group(1))\n\n\t\t\t\t# Chunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u30bb\u30c3\u30c8\n\t\t\t\tif idx not in chunks:\n\t\t\t\t\tchunks[idx] = Chunk()\n\t\t\t\tchunks[idx].dst = dst\n\n\t\t\t\t# \u4fc2\u308a\u5148\u306eChunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5143\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u8ffd\u52a0\n\t\t\t\tif dst != -1:\n\t\t\t\t\tif dst not in chunks:\n\t\t\t\t\t\tchunks[dst] = Chunk()\n\t\t\t\t\tchunks[dst].srcs.append(idx)\n\n\t\t\t# \u305d\u308c\u4ee5\u5916\u306e\u884c\u306f\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Morph\u3092\u4f5c\u308aChunk\u306b\u8ffd\u52a0\n\t\t\telse:\n\n\t\t\t\t# \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n\t\t\t\tcols = line.split('\\t')\n\t\t\t\tres_cols = cols[1].split(',')\n\n\t\t\t\t# Morph\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\t\t\t\tchunks[idx].morphs.append(\n\t\t\t\t\tMorph(\n\t\t\t\t\t\tcols[0],\t\t# surface\n\t\t\t\t\t\tres_cols[6],\t# base\n\t\t\t\t\t\tres_cols[0],\t# pos\n\t\t\t\t\t\tres_cols[1]\t\t# pos1\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\traise StopIteration\n\n\n# \u4fc2\u308a\u53d7\u3051\u89e3\u6790\nparse_neko()\n\n# \u7d50\u679c\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\nwith open(fname_result, mode='w') as out_file:\n\n\t# 1\u6587\u305a\u3064\u30ea\u30b9\u30c8\u4f5c\u6210\n\tfor chunks in neco_lines():\n\n\t\t# \u540d\u8a5e\u3092\u542b\u3080chunk\u306b\u9650\u5b9a\u3057\u305f\u3001chunks\u306b\u304a\u3051\u308b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\t\tindexs_noun = [i for i in range(len(chunks))\n\t\t\t\tif len(chunks[i].get_morphs_by_pos('\u540d\u8a5e')) > 0]\n\n\t\t# 2\u3064\u4ee5\u4e0a\u3042\u308b\uff1f\n\t\tif len(indexs_noun) < 2:\n\t\t\tcontinue\n\n\t\t# \u540d\u8a5e\u3092\u542b\u3080chunk\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7dcf\u5f53\u308a\u3067\u30c1\u30a7\u30c3\u30af\n\t\tfor i, index_x in enumerate(indexs_noun[:-1]):\n\t\t\tfor index_y in indexs_noun[i + 1:]:\n\n\t\t\t\tmeet_y = False\t\t\t# Y\u306b\u3076\u3064\u304b\u3063\u305f\uff1f\n\t\t\t\tindex_dup = -1\t\t\t# X\u3068Y\u306e\u7d4c\u8def\u304c\u3076\u3064\u304b\u3063\u305fchunk\u306eindex\n\t\t\t\troutes_x = set()\t\t# X\u306e\u7d4c\u8def\u30c1\u30a7\u30c3\u30af\u7528\n\n\t\t\t\t# \u540d\u8a5eX\u304b\u3089\u6839\u306b\u5411\u304b\u3063\u3066\u3001Y\u306b\u3076\u3064\u304b\u3089\u306a\u3044\u304b\u8abf\u3079\u306a\u304c\u3089\u63a2\u7d22\n\t\t\t\tdst = chunks[index_x].dst\n\t\t\t\twhile dst != -1:\n\t\t\t\t\tif dst == index_y:\n\t\t\t\t\t\tmeet_y = True\t\t\t# Y\u306b\u3076\u3064\u304b\u3063\u305f\n\t\t\t\t\t\tbreak\n\t\t\t\t\troutes_x.add(dst)\t\t\t# \u7d4c\u8def\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306b\u4fdd\u5b58\n\t\t\t\t\tdst = chunks[dst].dst\n\n\t\t\t\t# \u540d\u8a5eY\u304b\u3089\u6839\u307e\u3067\u3001X\u306e\u7d4c\u8def\u306b\u3076\u3064\u304b\u3089\u306a\u3044\u304b\u8abf\u3079\u306a\u304c\u3089\u63a2\u7d22\n\t\t\t\tif not meet_y:\n\t\t\t\t\tdst = chunks[index_y].dst\n\t\t\t\t\twhile dst != -1:\n\t\t\t\t\t\tif dst in routes_x:\n\t\t\t\t\t\t\tindex_dup = dst\t\t# X\u306e\u7d4c\u8def\u3068\u3076\u3064\u304b\u3063\u305f\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tdst = chunks[dst].dst\n\n\t\t\t\t# \u7d50\u679c\u51fa\u529b\n\t\t\t\tif index_dup == -1:\n\n\t\t\t\t\t# X\u304b\u3089Y\u306b\u3076\u3064\u304b\u308b\u30d1\u30bf\u30fc\u30f3\n\t\t\t\t\tout_file.write(chunks[index_x].noun_masked_surface('X'))\n\t\t\t\t\tdst = chunks[index_x].dst\n\t\t\t\t\twhile dst != -1:\n\t\t\t\t\t\tif dst == index_y:\n\t\t\t\t\t\t\tout_file.write(\n\t\t\t\t\t\t\t\t\t' -> ' + chunks[dst].noun_masked_surface('Y', True))\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\tout_file.write(\n\t\t\t\t\t\t\t\t\t' -> ' + chunks[dst].normalized_surface())\n\t\t\t\t\t\tdst = chunks[dst].dst\n\t\t\t\t\tout_file.write('\\n')\n\n\t\t\t\telse:\n\n\t\t\t\t\t# \u7d4c\u8def\u4e0a\u306e\u5171\u901a\u306echunk\u3067\u3076\u3064\u304b\u308b\u30d1\u30bf\u30fc\u30f3\n\n\t\t\t\t\t# X\u304b\u3089\u3076\u3064\u304b\u308b\u624b\u524d\u307e\u3067\u3092\u51fa\u529b\n\t\t\t\t\tout_file.write(chunks[index_x].noun_masked_surface('X'))\n\t\t\t\t\tdst = chunks[index_x].dst\n\t\t\t\t\twhile dst != index_dup:\n\t\t\t\t\t\tout_file.write(' -> ' + chunks[dst].normalized_surface())\n\t\t\t\t\t\tdst = chunks[dst].dst\n\t\t\t\t\tout_file.write(' | ')\n\n\t\t\t\t\t# Y\u304b\u3089\u3076\u3064\u304b\u308b\u624b\u524d\u307e\u3067\u3092\u51fa\u529b\n\t\t\t\t\tout_file.write(chunks[index_y].noun_masked_surface('Y'))\n\t\t\t\t\tdst = chunks[index_y].dst\n\t\t\t\t\twhile dst != index_dup:\n\t\t\t\t\t\tout_file.write(' -> ' + chunks[dst].normalized_surface())\n\t\t\t\t\t\tdst = chunks[dst].dst\n\t\t\t\t\tout_file.write(' | ')\n\n\t\t\t\t\t# \u3076\u3064\u304b\u3063\u305fchunk\u3092\u51fa\u529b\n\t\t\t\t\tout_file.write(chunks[index_dup].normalized_surface())\n\t\t\t\t\tout_file.write('\\n')\n```\n\n####\u5b9f\u884c\u7d50\u679c\uff1a\n\n\u4ee5\u4e0b\u3001\u7d50\u679c\u306e\u5148\u982d\u90e8\u5206\u3067\u3059\u3002\n\n```console:result.txt\uff08\u5148\u982d\u90e8\u5206\uff09\nX\u306f -> Y\nX\u3067 -> \u751f\u308c\u305f\u304b | Y\u304c | \u3064\u304b\u306c\nX\u3067\u3082 -> \u8584\u6697\u3044 -> Y\nX\u3067\u3082 -> \u8584\u6697\u3044 -> \u6240\u3067 | Y | \u6ce3\u3044\u3066\u3044\u305f\nX\u3067\u3082 -> \u8584\u6697\u3044 -> \u6240\u3067 -> \u6ce3\u3044\u3066\u3044\u305f -> Y\nX\u3067\u3082 -> \u8584\u6697\u3044 -> \u6240\u3067 -> \u6ce3\u3044\u3066\u3044\u305f -> \u4e8b\u3060\u3051\u306f -> Y\nX\u3067 | Y | \u6ce3\u3044\u3066\u3044\u305f\nX\u3067 -> \u6ce3\u3044\u3066\u3044\u305f -> Y\nX\u3067 -> \u6ce3\u3044\u3066\u3044\u305f -> \u4e8b\u3060\u3051\u306f -> Y\nX -> \u6ce3\u3044\u3066\u3044\u305f -> Y\nX -> \u6ce3\u3044\u3066\u3044\u305f -> \u4e8b\u3060\u3051\u306f -> Y\nX\u3060\u3051\u306f -> Y\nX\u306f | Y\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\nX\u306f | Y\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\nX\u306f | Y\u3092 | \u898b\u305f\nX\u3067 -> \u59cb\u3081\u3066 -> Y\nX\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> Y\nX\u3068\u3044\u3046 -> Y\nX\u306f | Y\u3068\u3044\u3046 -> \u4eba\u9593\u4e2d\u3067 | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u306f | YY\u3067 | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u306f | Y -> \u7370\u60aa\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u306f | Y\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u306f -> Y\nX\u3068\u3044\u3046 -> Y\nX\u3068\u3044\u3046 -> \u4eba\u9593\u4e2d\u3067 | Y -> \u7370\u60aa\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u3068\u3044\u3046 -> \u4eba\u9593\u4e2d\u3067 | Y\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nX\u3068\u3044\u3046 -> \u4eba\u9593\u4e2d\u3067 -> Y\nXX\u3067 | Y -> \u7370\u60aa\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nXX\u3067 | Y\u306a | \u7a2e\u65cf\u3067\u3042\u3063\u305f\u305d\u3046\u3060\nXX\u3067 -> Y\nX -> Y\nX -> \u7370\u60aa\u306a -> Y\nX\u306a -> Y\n```\n\n\u7d50\u679c\u5168\u4f53\u306f[GitHub](https://github.com/segavvy/nlp100_Python/tree/master/49)\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n###\u554f\u984c\u306e\u610f\u5473\n\nChunk\u30af\u30e9\u30b9\u306b`noun_masked_surface()`\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u6587\u7bc0\u306e\u4e2d\u306e\u540d\u8a5e\u3092\u30de\u30b9\u30af\u3057\u305f\u8868\u5c64\u5f62\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u306f[\u524d\u554f](http://qiita.com/segavvy/items/ed5cc48dc02afd8855a1)\u306e\u307e\u307e\u3067\u3059\u3002\n\n*i* \u3068\u304b *j* \u3068\u304b\u51fa\u3066\u304d\u3066\u3084\u3084\u3053\u3057\u3044\u3067\u3059\u304c\u3001\u6587\u4e2d\u306e\u540d\u8a5e2\u3064\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7dcf\u5f53\u305f\u308a\u3057\u3066\u3001\u4f4d\u7f6e\u95a2\u4fc2\u3092[\u524d\u554f](http://qiita.com/segavvy/items/ed5cc48dc02afd8855a1)\u306e\u3088\u3046\u306a\u30d1\u30b9\u3067\u51fa\u529b\u3057\u306a\u3055\u3044\u3001\u3068\u3044\u3046\u554f\u984c\u3067\u3059\u3002\n\n\u305f\u3068\u3048\u3070\u554f\u984c\u6587\u3067\u4f8b\u3068\u3057\u3066\u4f7f\u308f\u308c\u3066\u3044\u308b\u300c\u543e\u8f29\u306f\u3053\u3053\u3067\u59cb\u3081\u3066\u4eba\u9593\u3068\u3044\u3046\u3082\u306e\u3092\u898b\u305f\u3002\u300d\u306e\u5834\u5408\u3001\u540d\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u306f\u3001\u6b21\u306e\u4e38\u3092\u4ed8\u3051\u305f4\u3064\u3067\u3059\u3002\n\n![Kobito.pCyt3d.png](https://qiita-image-store.s3.amazonaws.com/0/139624/bd705163-ea8f-24e6-e477-6a0e9b13c04f.png \"Kobito.pCyt3d.png\")\n\n\u3053\u306e4\u3064\u306e\u6587\u7bc0\u3092\u30da\u30a2\u306b\u3059\u308b\u7d44\u307f\u5408\u308f\u305b\u306f6\u901a\u308a\u3042\u308b\u305f\u3081\u30016\u884c\u306e\u30d1\u30b9\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u6700\u521d\u306b\u6ce8\u76ee\u3059\u308b\u30da\u30a2\u306f\u6700\u521d\u306b\u51fa\u3066\u304f\u308b\u300c\u543e\u8f29\u300d\u3068\u300c\u3053\u3053\u300d\u306e2\u3064\u3067\u3059\u3002\u6587\u7bc0\u756a\u53f7\u306e\u82e5\u3044 *i* \u304cX\u306b\u306a\u308b\u306e\u3067\u3001X\u3068Y\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n![Kobito.PnWWVz.png](https://qiita-image-store.s3.amazonaws.com/0/139624/cc288495-ae26-2784-5d45-923cbd07d90c.png \"Kobito.PnWWVz.png\")\n\n\u3053\u306e2\u3064\u306f\u300c\u898b\u305f\u300d\u3067\u3076\u3064\u304b\u308b\u306e\u3067\u3001\u305d\u308c\u305e\u308c\u304b\u3089\u300c\u898b\u305f\u300d\u306e\u624b\u524d\u307e\u3067\u306e\u30d1\u30b9\u3068\u300c\u898b\u305f\u300d\u305d\u306e\u3082\u306e\u3092`|`\u3067\u533a\u5207\u3063\u3066\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u305d\u306e\u969b\u306b\u6ce8\u76ee\u3057\u3066\u3044\u308b\u540d\u8a5e\u306f\u300cX\u300d\u3068\u300cY\u300d\u306b\u7f6e\u63db\u3057\u307e\u3059\u3002\n\n```console\nX\u306f | Y\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\n```\n\n\u7d9a\u3044\u3066X\u306f\u305d\u306e\u307e\u307e\u3001Y\u3092\u6b21\u306e\u3082\u306e\u306b\u305a\u3089\u3057\u307e\u3059\u3002\n\n![Kobito.jEEkoS.png](https://qiita-image-store.s3.amazonaws.com/0/139624/dc5be30a-6e86-c871-fb55-c355bae076da.png \"Kobito.jEEkoS.png\")\n\n```console\nX\u306f | Y\u3068\u3044\u3046 -> \u3082\u306e\u3092 | \u898b\u305f\n```\n\n\u540c\u3058\u3088\u3046\u306b\u6b21\u306b\u3044\u304d\u307e\u3059\u3002\n\n![Kobito.P2xScu.png](https://qiita-image-store.s3.amazonaws.com/0/139624/9ac17dc0-f0d5-6f47-511b-6abfdd082fc3.png \"Kobito.P2xScu.png\")\n\n```console\nX\u306f | Y\u3092 | \u898b\u305f\n```\n\n\u300c\u543e\u8f29\u300d\u3092\u8d77\u70b9\u306b\u3057\u305f\u30da\u30a2\u306f\u3082\u3046\u306a\u3044\u306e\u3067\u3001X\u3092\u300c\u3053\u3053\u300d\u306b\u305a\u3089\u3057\u307e\u3059\u3002\n\n![Kobito.TAFyI8.png](https://qiita-image-store.s3.amazonaws.com/0/139624/d7b3d781-3cc9-99c0-c3bf-4012e7ebbef5.png \"Kobito.TAFyI8.png\")\n\n\u4eca\u5ea6\u306f\u30d1\u30b9\u306e\u9014\u4e2d\u3067Y\u306b\u3076\u3064\u304b\u308a\u307e\u3059\u3002\u9014\u4e2d\u3067\u3076\u3064\u304b\u3063\u305f\u5834\u5408\u306f\u305d\u3053\u307e\u3067\u306e\u30d1\u30b9\u3092\u8868\u793a\u3057\u3066\u7d42\u308f\u308a\u3067\u3059\u3002\u306a\u304a\u3001\u554f\u984c\u6587\u306e\u4f8b\u3092\u898b\u308b\u3068\u3001Y\u5074\u306f\u305d\u306e\u540d\u8a5e\u3088\u308a\u5f8c\u306e\u5f62\u614b\u7d20\u306f\u8868\u793a\u3057\u306a\u3044\u3088\u3046\u306a\u306e\u3067\u3001Y\u306e\u6587\u7bc0\u3092\u8868\u793a\u3059\u308b\u969b\u306f\u540d\u8a5e\u3088\u308a\u5f8c\u3092\u7701\u7565\u3057\u307e\u3059\u3002Chunk\u30af\u30e9\u30b9\u306b\u8ffd\u52a0\u3057\u305f`noun_masked_surface()`\u95a2\u6570\u306e\u5f15\u6570dst\u306f\u3001\u540d\u8a5e\u3088\u308a\u5f8c\u308d\u3092\u7701\u7565\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\n```console\nX\u3067 -> \u59cb\u3081\u3066 -> Y\n```\n\n\u3042\u3068\u306f\u3053\u308c\u3092\u7e70\u308a\u8fd4\u3059\u3060\u3051\u3067\u3059\u3002\n\n![Kobito.4ZMRqP.png](https://qiita-image-store.s3.amazonaws.com/0/139624/06035948-d2c2-7c30-1237-3f0e5a7439ac.png \"Kobito.4ZMRqP.png\")\n\n```console\nX\u3067 -> \u59cb\u3081\u3066 -> \u4eba\u9593\u3068\u3044\u3046 -> Y\n```\n\n\u300c\u3053\u3053\u300d\u3092\u8d77\u70b9\u306b\u3057\u305f\u30da\u30a2\u306f\u3082\u3046\u306a\u3044\u306e\u3067\u3001X\u3092\u305a\u3089\u3057\u307e\u3059\u3002\n\n![Kobito.ubNUEE.png](https://qiita-image-store.s3.amazonaws.com/0/139624/d1e65bcc-085b-afa9-3c68-ef143ba6c22b.png \"Kobito.ubNUEE.png\")\n\n```console\nX\u3068\u3044\u3046 -> Y\n```\n\n\u6700\u521d\u306f\u554f\u984c\u306e\u610f\u5473\u304c\u308f\u304b\u3089\u305a\u82e6\u6226\u3057\u307e\u3057\u305f\u304c\u3001\u5206\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u306a\u3093\u3068\u304b\u306a\u308a\u307e\u3059\u3002\n\n###\u6587\u7bc0\u5185\u306b\u540d\u8a5e\u304c\u8907\u6570\u3042\u308b\u5834\u5408\n\n\u6587\u7bc0\u5185\u306b\u540d\u8a5e\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u3067\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u6700\u521d\u306b\u898b\u3064\u3051\u305f\u540d\u8a5e\u306e\u307fX\u3084Y\u306b\u7f6e\u63db\u3057\u3001\u305d\u308c\u4ee5\u964d\u306e\u540d\u8a5e\u306f\u9664\u53bb\u3059\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u3057\u307e\u3057\u305f\u3002\u3061\u3087\u3063\u3068\u3084\u3063\u3064\u3051\u3067\u3059\u304c\u3001\u540d\u8a5e\u304c\u7d9a\u304f\u90e8\u5206\u306f1\u3064\u306eX\u3084Y\u306b\u7f6e\u63db\u3055\u308c\u308b\u306e\u3067\u3001\u306a\u3093\u3068\u306a\u304f\u3044\u3044\u611f\u3058\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3000\n50\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n<hr>\n\n*\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001[100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf](http://www.cl.ecei.tohoku.ac.jp/nlp100/#data)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c5\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f[\u9752\u7a7a\u6587\u5eab](http://www.aozora.gr.jp)\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002*\n", "tags": ["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "Python", "Cabocha"]}