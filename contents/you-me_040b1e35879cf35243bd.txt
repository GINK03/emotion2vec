{"tags": ["laravel5.2", "laravel"], "context": "Laravel5.2\u3067\u3001\u6b63\u3057\u3044\u5e74\u6708\u304b\uff1f\u3092validate\u3057\u3088\u3046\u3068\u3057\u3066\u7406\u4e0d\u5c3d\u306a\u3053\u3068\u306b\u306a\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n\u3084\u308a\u305f\u3044\u3053\u3068\nLaravel5.2\u3067\u3001\u5e74\u6708\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3060\u3051\u3067\u306a\u304f\u3001\u5b58\u5728\u3059\u308b\u5e74\u6708\u304b\u3092Validate\u3059\u308b\u3002\n\n\u3044\u304d\u3055\u3064\nLaravel5.2\u306e\u4f7f\u7528\u53ef\u80fd\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb\u306b\u3088\u308b\u3068\u3001\u300c\u65e5\u4ed8\u300d\u300c\u65e5\u4ed8\u5f62\u5f0f\u300d\u306e\uff12\u30d1\u30bf\u30fc\u30f3\u304c\u5229\u7528\u51fa\u6765\u308b\u3002\n\u304c\u3002\u3067\u3059\u3088\u3002\n\nExampleController.php\n$validator = Validator::make($input, [\n    'from' => 'bail|required|date_format:Ym|before:\"now\"',\n    'to' => 'bail|required|date_format:Ym|before:\"now\"|after:from',\n]);\nif ($validator->fails()) {\n    throw new MyValidatorException();\n}\n\n\n\u306e\u3088\u3046\u306b\u65e5\u4ed8\u5f62\u5f0f\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3088\u3046\u66f8\u3044\u3066\u3084\u3063\u3066\u3001\nfrom=201514\nto=201520\n\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\uff01\uff1f\n\n\u4e2d\u3092\u898b\u3066\u307f\u308b\n\nIlluminate\\Validation\\Validator.php\n\n    /**\n     * Validate that an attribute matches a date format.\n     *\n     * @param  string  $attribute\n     * @param  mixed   $value\n     * @param  array   $parameters\n     * @return bool\n     */\n    protected function validateDateFormat($attribute, $value, $parameters)\n    {\n        $this->requireParameterCount(1, $parameters, 'date_format');\n\n        if (! is_string($value) && ! is_numeric($value)) {\n            return false;\n        }\n\n        $parsed = date_parse_from_format($parameters[0], $value);\n\n        return $parsed['error_count'] === 0 && $parsed['warning_count'] === 0;\n    }\n\n\n\u306e\u3088\u3046\u306b\u3001\u300c\u6307\u5b9a\u3055\u308c\u305f\u65e5\u4ed8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u300d\u3068\u3057\u3066\u5206\u5272\u3067\u304d\u308b\u304b\uff1f\u3060\u3051\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u6b63\u5f53\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n\u3055\u3063\u304d\u306e\u3001\"201520\"\u3092\u6e21\u3057\u3066\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u3068\u3001\n\n\u3063\u3066\u3044\u3046\u3042\u308a\u3055\u307e\u3067\u3042\u308b\u3002\nmonth=20\u304c\u5b58\u5728\u3059\u308b\u304b\u306f\u30c1\u30a7\u30c3\u30af\u3055\u308c\u306a\u3044\u3002\n\u53c2\u8003\u307e\u3067\u306b\u3001\u300c\u65e5\u4ed8\u300d\u306e\u5834\u5408\u3053\u3093\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u3002\n\nIlluminate\\Validation\\Validator.php\n /**\n     * Validate that an attribute is a valid date.\n     *\n     * @param  string  $attribute\n     * @param  mixed   $value\n     * @return bool\n     */\n    protected function validateDate($attribute, $value)\n    {\n        if ($value instanceof DateTime) {\n            return true;\n        }\n\n        if ((! is_string($value) && ! is_numeric($value)) || strtotime($value) === false) {\n            return false;\n        }\n\n        $date = date_parse($value);\n\n        return checkdate($date['month'], $date['day'], $date['year']);\n    }\n\n\n\n\u30ab\u30b9\u30bf\u30e0\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\nValidator\u30af\u30e9\u30b9\u3092\u81ea\u4f5c\u3057\u307e\u3059\u3002\n\u203brequireParameterCount()\u306fIlluminate\\Validation\\Validator.php\u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u3060\u3051\u306a\u306e\u3067\u6d88\u3057\u3066\u3082\u30aaK\u3002\n\nValidator.php\n<?php\n\nnamespace Myapp\\Services\\Validator;\n\n\nclass Validator {\n\n    /**\n     * Validate that an attribute is a valid year month.\n     *\n     * @param  string  $attribute\n     * @param  string $parameters \u65e5\u4ed8\u30d1\u30e9\u30e1\u30fc\u30bf\n     * @param  mixed  $value \u691c\u8a3c\u5024\n     * @return bool\n     */\n    public function validateYearMonth($attribute, $value, $parameters)\n    {\n        $this->requireParameterCount(1, $parameters, 'date_ym');\n\n        if (! is_string($value) && ! is_numeric($value)) {\n            return false;\n        }\n\n        $parsed = date_parse_from_format($parameters[0], $value);\n\n        return checkdate($parsed['month'], 1, $parsed['year']);\n    }\n\n\n    protected function requireParameterCount($count, $parameters, $rule)\n    {\n        if (count($parameters) < $count) {\n            throw new InvalidArgumentException(\"Validation rule $rule requires at least $count parameters.\");\n        }\n    }\n}\n\n\n\u30a2\u30d7\u30ea\u306b\u767b\u9332\u3057\u307e\u3059\u3002\n\nAppServiceProvider.php\n<?php\n\nnamespace Myapp\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        \\Validator::extend(\n            'date_ym', 'Myapp\\Services\\Validator\\Validator@validateYearMonth'\n        );\n    }\n\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n    }\n}\n\n\n\nController\u3067\u691c\u8a3c\u5185\u5bb9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nExampleController.php\n$validator = Validator::make($input, [\n    'from' => 'bail|required|date_ym:Ym|before:\"now\"',\n    'to' => 'bail|required|date_ym:Ym|before:\"now\"|after:from',\n]);\nif ($validator->fails()) {\n    throw new MyValidatorException();\n}\n\n\n\u4ee5\u4e0a\u3067\u3001\u610f\u56f3\u3057\u305f\u901a\u308a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\"201520\"\u306e\u3088\u3046\u306a\u4e0d\u6b63\u306a\u5e74\u6708\u304c\u6307\u5b9a\u3055\u308c\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u307e\u3067\u3002\n\u8ffd\u8a18\uff09\n\u3061\u306a\u307f\u306b\u3001before:\"now\"\u304c\u671f\u5f85\u901a\u308a\u306b\u884c\u304d\u307e\u305b\u3093\u306d\u3002\u3002\u3002\u3002\n\n\u53c2\u8003\nhttps://readouble.com/laravel/5.2/ja/validation.html#available-validation-rules\nhttps://readouble.com/laravel/5.2/ja/validation.html#custom-validation-rules\nhttps://blog.e2info.co.jp/2016/06/05/laravel_custom_validation/\nLaravel5.2\u3067\u3001\u6b63\u3057\u3044\u5e74\u6708\u304b\uff1f\u3092validate\u3057\u3088\u3046\u3068\u3057\u3066\u7406\u4e0d\u5c3d\u306a\u3053\u3068\u306b\u306a\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n\n# \u3084\u308a\u305f\u3044\u3053\u3068\nLaravel5.2\u3067\u3001\u5e74\u6708\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3060\u3051\u3067\u306a\u304f\u3001\u5b58\u5728\u3059\u308b\u5e74\u6708\u304b\u3092Validate\u3059\u308b\u3002\n\n# \u3044\u304d\u3055\u3064\nLaravel5.2\u306e[\u4f7f\u7528\u53ef\u80fd\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30eb](https://readouble.com/laravel/5.2/ja/validation.html#available-validation-rules)\u306b\u3088\u308b\u3068\u3001\u300c\u65e5\u4ed8\u300d\u300c\u65e5\u4ed8\u5f62\u5f0f\u300d\u306e\uff12\u30d1\u30bf\u30fc\u30f3\u304c\u5229\u7528\u51fa\u6765\u308b\u3002\n\n\u304c\u3002\u3067\u3059\u3088\u3002\n\n```ExampleController.php\n$validator = Validator::make($input, [\n\t'from' => 'bail|required|date_format:Ym|before:\"now\"',\n\t'to' => 'bail|required|date_format:Ym|before:\"now\"|after:from',\n]);\nif ($validator->fails()) {\n\tthrow new MyValidatorException();\n}\n```\n\n\u306e\u3088\u3046\u306b\u65e5\u4ed8\u5f62\u5f0f\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3088\u3046\u66f8\u3044\u3066\u3084\u3063\u3066\u3001\n\n\nfrom=201514\nto=201520\n\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6e21\u3057\u3066\u30c6\u30b9\u30c8\u3057\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044\uff01\uff1f\n\n# \u4e2d\u3092\u898b\u3066\u307f\u308b\n\n```Illuminate\\Validation\\Validator.php\n\n    /**\n     * Validate that an attribute matches a date format.\n     *\n     * @param  string  $attribute\n     * @param  mixed   $value\n     * @param  array   $parameters\n     * @return bool\n     */\n    protected function validateDateFormat($attribute, $value, $parameters)\n    {\n        $this->requireParameterCount(1, $parameters, 'date_format');\n\n        if (! is_string($value) && ! is_numeric($value)) {\n            return false;\n        }\n\n        $parsed = date_parse_from_format($parameters[0], $value);\n\n        return $parsed['error_count'] === 0 && $parsed['warning_count'] === 0;\n    }\n```\n\n\u306e\u3088\u3046\u306b\u3001\u300c\u6307\u5b9a\u3055\u308c\u305f\u65e5\u4ed8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u300d\u3068\u3057\u3066\u5206\u5272\u3067\u304d\u308b\u304b\uff1f\u3060\u3051\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u6b63\u5f53\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u308c\u306a\u3044\u3002\n\u3055\u3063\u304d\u306e\u3001\"201520\"\u3092\u6e21\u3057\u3066\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u3068\u3001\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-09-13 17.01.28.png](https://qiita-image-store.s3.amazonaws.com/0/125918/0ee9e997-1e07-3ec1-9c24-ee05636dd2de.png)\n\u3063\u3066\u3044\u3046\u3042\u308a\u3055\u307e\u3067\u3042\u308b\u3002\n**month=20\u304c\u5b58\u5728\u3059\u308b\u304b\u306f\u30c1\u30a7\u30c3\u30af\u3055\u308c\u306a\u3044\u3002**\n\n\u53c2\u8003\u307e\u3067\u306b\u3001\u300c\u65e5\u4ed8\u300d\u306e\u5834\u5408\u3053\u3093\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u3002\n\n```Illuminate\\Validation\\Validator.php\n /**\n     * Validate that an attribute is a valid date.\n     *\n     * @param  string  $attribute\n     * @param  mixed   $value\n     * @return bool\n     */\n    protected function validateDate($attribute, $value)\n    {\n        if ($value instanceof DateTime) {\n            return true;\n        }\n\n        if ((! is_string($value) && ! is_numeric($value)) || strtotime($value) === false) {\n            return false;\n        }\n\n        $date = date_parse($value);\n\n        return checkdate($date['month'], $date['day'], $date['year']);\n    }\n```\n\n\n# \u30ab\u30b9\u30bf\u30e0\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\n\nValidator\u30af\u30e9\u30b9\u3092\u81ea\u4f5c\u3057\u307e\u3059\u3002\n\u203brequireParameterCount()\u306fIlluminate\\Validation\\Validator.php\u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u3060\u3051\u306a\u306e\u3067\u6d88\u3057\u3066\u3082\u30aaK\u3002\n\n```Validator.php\n<?php\n\nnamespace Myapp\\Services\\Validator;\n\n\nclass Validator {\n\t\n\t/**\n\t * Validate that an attribute is a valid year month.\n\t *\n\t * @param  string  $attribute\n\t * @param  string $parameters \u65e5\u4ed8\u30d1\u30e9\u30e1\u30fc\u30bf\n\t * @param  mixed  $value \u691c\u8a3c\u5024\n\t * @return bool\n\t */\n\tpublic function validateYearMonth($attribute, $value, $parameters)\n\t{\n\t\t$this->requireParameterCount(1, $parameters, 'date_ym');\n\n\t\tif (! is_string($value) && ! is_numeric($value)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$parsed = date_parse_from_format($parameters[0], $value);\n\n\t\treturn checkdate($parsed['month'], 1, $parsed['year']);\n\t}\n\n\n\tprotected function requireParameterCount($count, $parameters, $rule)\n\t{\n\t\tif (count($parameters) < $count) {\n\t\t\tthrow new InvalidArgumentException(\"Validation rule $rule requires at least $count parameters.\");\n\t\t}\n\t}\n}\n```\n\n\u30a2\u30d7\u30ea\u306b\u767b\u9332\u3057\u307e\u3059\u3002\n\n```AppServiceProvider.php\n<?php\n\nnamespace Myapp\\Providers;\n\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    {\n        \\Validator::extend(\n        \t'date_ym', 'Myapp\\Services\\Validator\\Validator@validateYearMonth'\n        );\n    }\n\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    {\n    }\n}\n\n```\n\nController\u3067\u691c\u8a3c\u5185\u5bb9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```ExampleController.php\n$validator = Validator::make($input, [\n\t'from' => 'bail|required|date_ym:Ym|before:\"now\"',\n\t'to' => 'bail|required|date_ym:Ym|before:\"now\"|after:from',\n]);\nif ($validator->fails()) {\n\tthrow new MyValidatorException();\n}\n```\n\n\u4ee5\u4e0a\u3067\u3001\u610f\u56f3\u3057\u305f\u901a\u308a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\"201520\"\u306e\u3088\u3046\u306a\u4e0d\u6b63\u306a\u5e74\u6708\u304c\u6307\u5b9a\u3055\u308c\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u307e\u3067\u3002\n\n\n\u8ffd\u8a18\uff09\n\u3061\u306a\u307f\u306b\u3001before:\"now\"\u304c\u671f\u5f85\u901a\u308a\u306b\u884c\u304d\u307e\u305b\u3093\u306d\u3002\u3002\u3002\u3002\n\n\n# \u53c2\u8003\nhttps://readouble.com/laravel/5.2/ja/validation.html#available-validation-rules\nhttps://readouble.com/laravel/5.2/ja/validation.html#custom-validation-rules\nhttps://blog.e2info.co.jp/2016/06/05/laravel_custom_validation/\n\n\n"}