{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u300c\u3069\u3046\u3057\u3066Android 6.0\u3067BLE\u3092\u4f7f\u3046\u306e\u306b\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u306a\u30ef\u30b1?\u300d\u3067\u3001Android 6.0\u3067BLE\u306e\u30b9\u30ad\u30e3\u30f3\u3092\u884c\u3046\u6642\u306b\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u306a\u3044\u3068 SecurityException \u304c\u767a\u751f\u3059\u308b\u7406\u7531\u306b\u3064\u3044\u3066\u8abf\u3079\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u969b\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306e\u3042\u308b\u30b3\u30e1\u30f3\u30c8\u304c\u5f15\u3063\u304b\u304b\u3063\u3066\u307e\u3057\u305f\u3002\n\n* An app must hold\n* {@link android.Manifest.permission#ACCESS_COARSE_LOCATION} or\n* {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission\n* in order to get results.\n\n\u306a\u305c\u3001\u300cin order to scan\u300d\u3067\u306f\u306a\u304f\u3001\u300cin order to get\u300d\u306a\u306e\u304b?\n\u305d\u3057\u3066\u3001Nexus5 + Android 6.0\u306e\u74b0\u5883\u3067\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u8a31\u53ef\u3057\u305f\u72b6\u614b\u3067\u3082\u3001\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u3092\u30aa\u30d5\u306b\u3057\u3066\u3044\u308b\u3068\u30b9\u30ad\u30e3\u30f3\u7d50\u679c\u304c\u5f97\u3089\u308c\u306a\u3044\u3068\u3044\u3046\u306e\u304c\u3042\u3063\u3066\u3001\u305d\u3053\u3082\u524d\u56de\u306e\u8abf\u67fb\u3067\u306f\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3053\u306e2\u70b9\u306b\u3064\u3044\u3066\u3001\u30bd\u30fc\u30b9\u3092\u3082\u3046\u5c11\u3057\u773a\u3081\u3066\u307f\u305f\u3089\u7406\u7531\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u307e\u3068\u3081\u307e\u3059\u3002\n\n\u767a\u751f\u6761\u4ef6\n\nBLE\u306e\u30b9\u30ad\u30e3\u30f3\u3092\u884c\u3046\u30a2\u30d7\u30ea\u306b\u5bfe\u3057\u3066\u3001\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3(ACCESS_COARSE_LOCATION \u307e\u305f\u306f ACCESS_FINE_LOCATION)\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u3002\n\u4f7f\u7528\u3057\u3066\u3044\u308bAndroid\u7aef\u672b\u3067\u300c\u4f4d\u7f6e\u60c5\u5831\u300d\u304c\u30aa\u30d5\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\n\u767a\u751f\u4e8b\u8c61\nBluetoothLeScanner.startScan(ScanCallback callback)\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u6307\u5b9a\u3057\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u306a\u3044\u3002\n\nGattService.java\n\u3044\u304d\u306a\u308a\u7d50\u8ad6\u3067\u3059\u304c\u3001GattService.java\u3067\u30b9\u30ad\u30e3\u30f3\u7d50\u679c\u3092\u8fd4\u3059\u969b\u306b\u3001\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306b\u52a0\u3048\u3001\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u306e\u30aa\u30f3/\u30aa\u30d5\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u308a\u3001\u3044\u305a\u308c\u304b\u304c\u6b20\u3051\u308b\u3068ScanCallback\u3092\u547c\u3073\u51fa\u3057\u307e\u305b\u3093\u3002\n/**************************************************************************\n* Callback functions - CLIENT\n*************************************************************************/\nvoid onScanResult(String address, int rssi, byte[] adv_data) {\n    if (VDBG) Log.d(TAG, \"onScanResult() - address=\" + address\n                + \", rssi=\" + rssi);\n    List<UUID> remoteUuids = parseUuids(adv_data);\n    for (ScanClient client : mScanManager.getRegularScanQueue()) {\n        if (client.uuids.length > 0) {\n            int matches = 0;\n            for (UUID search : client.uuids) {\n                for (UUID remote: remoteUuids) {\n                    if (remote.equals(search)) {\n                        ++matches;\n                        break; // Only count 1st match in case of duplicates\n                    }\n                }\n            }\n\n            if (matches < client.uuids.length) continue;\n        }\n\n        if (!client.isServer) {\n            ClientMap.App app = mClientMap.getById(client.clientIf);\n            if (app != null) {\n                BluetoothDevice device = BluetoothAdapter.getDefaultAdapter()\n                        .getRemoteDevice(address);\n                ScanResult result = new ScanResult(device, ScanRecord.parseFromBytes(adv_data),\n                        rssi, SystemClock.elapsedRealtimeNanos());\n                // Do no report if location mode is OFF or the client has no location permission\n                // PEERS_MAC_ADDRESS permission holders always get results\n                if (hasScanResultPermission(client) && matchesFilters(client, result)) {\n                    try {\n                        ScanSettings settings = client.settings;\n                        if ((settings.getCallbackType() &\n                                ScanSettings.CALLBACK_TYPE_ALL_MATCHES) != 0) {\n                            app.callback.onScanResult(result);\n                        }\n                    } catch (RemoteException e) {\n                        Log.e(TAG, \"Exception: \" + e);\n                        mClientMap.remove(client.clientIf);\n                        mScanManager.stopScan(client);\n                    }\n                }\n            }\n        } else {\n            ServerMap.App app = mServerMap.getById(client.clientIf);\n            if (app != null) {\n                try {\n                    app.callback.onScanResult(address, rssi, adv_data);\n                } catch (RemoteException e) {\n                    Log.e(TAG, \"Exception: \" + e);\n                    mServerMap.remove(client.clientIf);\n                    mScanManager.stopScan(client);\n                }\n            }\n        }\n    }\n}\n\n/** Determines if the given scan client has the appropriate permissions to receive callbacks. */\nprivate boolean hasScanResultPermission(final ScanClient client) {\n    final boolean requiresLocationEnabled =\n            getResources().getBoolean(R.bool.strict_location_check);\n    final boolean locationEnabledSetting = Settings.Secure.getInt(getContentResolver(),\n            Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF)\n            != Settings.Secure.LOCATION_MODE_OFF;\n    final boolean locationEnabled = !requiresLocationEnabled || locationEnabledSetting\n            || client.legacyForegroundApp;\n    return (client.hasPeersMacAddressPermission\n            || (client.hasLocationPermission && locationEnabled));\n}\n\n\u3057\u3063\u304b\u308a\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u300cin order to get\u300d\u306e\u8b0e\u306f\u89e3\u3051\u307e\u3057\u305f\u3002\n\n// Do no report if location mode is OFF or the client has no location permission\n\n\u305f\u3060\u3057\u3001\n\n// PEERS_MAC_ADDRESS permission holders always get results\n\n\u3068\u3042\u308a\u3001 PEERS_MAC_ADDRESS\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u6301\u3063\u3066\u3044\u308c\u3070\u5e38\u306b\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308c\u308b\u3001\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nPEERS_MAC_ADDRESS\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\n\u3042\u307e\u308a\u60c5\u5831\u304c\u306a\u3044(Android Developers\u306b\u3082)\u306e\u3067\u3059\u304c\u3001Android 6.0\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306e\u3088\u3046\u3067\u30591\u3002\n\u3053\u308c\u4ed8\u3051\u308c\u3070\u3044\u3044\u3093\u3067\u3057\u3087?\u306a\u3093\u3066\u601d\u3063\u305f\u3089\u3001\u7518\u3044\u3002\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u30ec\u30d9\u30eb\u304c \u300csignature\u300d\u3002\n\u3064\u307e\u308a\u306f\u3001\u666e\u901a\u306e\u30a2\u30d7\u30ea\u3067\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002\n\ntargetSdkVersion\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3001\u3082\u30461\u3064\u6c17\u306b\u306a\u308a\u307e\u3057\u305f\u3002\ntargetSdkVersion\u306e\u30c1\u30a7\u30c3\u30af\u3057\u3066\u306a\u3044\u306e?\n\nrequiresLocationEnabled\nR.bool.strict_location_check\u3092\u8abf\u3079\u3066\u307f\u308b\u3068 \u300ctrue\u300d \u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n<!-- If true, we will require location to be enabled on the device to\n    fire Bluetooth LE scan result callbacks in addition to having one\n    of the location permissions. -->\n<bool name=\"strict_location_check\">true</bool>\n\n\u3053\u3053\u306f\u30a4\u30e1\u30fc\u30b8\u4f5c\u308a\u306e\u969b\u306b\u8a2d\u5b9a\u3067\u304d\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\nlocationEnabledSetting\n\u3053\u308c\u306f\u7aef\u672b\u306e\u8a2d\u5b9a\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001targetSdkVersion\u306f\u95a2\u4fc2\u306a\u3044\u3067\u3059\u306d\u3002\n\nlocationEnabled\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001client.legacyForegroundApp\u304c \u300ctrue\u300d \u3092\u8fd4\u305b\u3070\u3001\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u304c\u30aa\u30d5\u3067\u3082\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u30cf\u30ba\u3067\u3059\u3002\nScanClient\u306f\u3001\u524d\u56de\u898b\u305f\u3088\u3046\u306b\u3001GattService.java\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nvoid startScan(int appIf, boolean isServer, ScanSettings settings,\n        List<ScanFilter> filters, List<List<ResultStorageDescriptor>> storages,\n        String callingPackage) {\n\n    (snip)\n\n    final ScanClient scanClient = new ScanClient(appIf, isServer, settings, filters, storages);\n    scanClient.hasLocationPermission = Utils.checkCallerHasLocationPermission(this, mAppOps,\n        callingPackage);\n    scanClient.hasPeersMacAddressPermission = Utils.checkCallerHasPeersMacAddressPermission(\n        this);\n    scanClient.legacyForegroundApp = Utils.isLegacyForegroundApp(this, callingPackage);\n    mScanManager.startScan(scanClient);\n}\n\nUtils.java\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001\npublic static boolean isLegacyForegroundApp(Context context, String pkgName) {\n    return !isMApp(context, pkgName) && isForegroundApp(context, pkgName);\n}\n\n\u3068\u306a\u3063\u3066\u304a\u308a\u3001targetSdkVersion\u304c22\u4ee5\u4e0b\u306e\u5834\u5408\u306f \u300ctrue\u300d \u304c\u8fd4\u308a\u3001\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u9006\u306b\u8a00\u3048\u3070\u300123\u4ee5\u4e0a\u306b\u3059\u308b\u3068\u3001\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u3092\u30aa\u30f3\u306b\u3057\u306a\u3044\u3068\u30c0\u30e1\u3067\u3059\u3002\n\n\u307e\u3068\u3081\nAndroid 6.0\u3067\u3001targetSdkVersion\u309223\u306b\u3057\u305f\u5834\u5408\u3001BLE\u30c7\u30d0\u30a4\u30b9\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u691c\u51fa\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u6b21\u306e\u6761\u4ef6\u3092\u3044\u305a\u308c\u3082\u6e80\u305f\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30b7\u30e7\u30f3( ACCESS_COARSE_LOCATION \u307e\u305f\u306f ACCESS_FINE_LOCATION )\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u3002\n\u7aef\u672b\u306e\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u304c\u30aa\u30f3\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u30e2\u30c7\u30eb\u306e\u5909\u66f4\u306f\u5f7c\u65b9\u6b64\u65b9\u3067\u53d6\u308a\u4e0a\u3052\u3089\u308c\u3066\u3044\u3066\u3001Context.requestPermissions()\u3067\u8a31\u53ef\u3092\u6c42\u3081\u308b\u3068\u3044\u3046\u610f\u8b58\u306f\u3042\u308a\u307e\u3059\u304c\u3001Bluetooth\u306b\u76f4\u63a5\u306f\u95a2\u4fc2\u306a\u3055\u305d\u3046\u306a\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u3068\u3044\u3046\u7f60\u306b\u52a0\u3048\u3066\u3001\u7aef\u672b\u306e\u8a2d\u5b9a\u307e\u3067\u5909\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u7f60\u306e\u4e8c\u6bb5\u69cb\u3048\u3067\u3057\u305f\u3002\n\n\n\n\nRiskFinder Blog\u00a0\u21a9\n\n\n\n\n# \u306f\u3058\u3081\u306b\n\n\u524d\u56de\u300c[\u3069\u3046\u3057\u3066Android 6.0\u3067BLE\u3092\u4f7f\u3046\u306e\u306b\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u306a\u30ef\u30b1?](http://qiita.com/hisanaka/items/c37d5ecb8fb520e6c9ec)\u300d\u3067\u3001Android 6.0\u3067BLE\u306e\u30b9\u30ad\u30e3\u30f3\u3092\u884c\u3046\u6642\u306b\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u306a\u3044\u3068 _SecurityException_ \u304c\u767a\u751f\u3059\u308b\u7406\u7531\u306b\u3064\u3044\u3066\u8abf\u3079\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u969b\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306e\u3042\u308b\u30b3\u30e1\u30f3\u30c8\u304c\u5f15\u3063\u304b\u304b\u3063\u3066\u307e\u3057\u305f\u3002\n\n> \\* An app must hold\n> \\* {@link android.Manifest.permission#ACCESS_COARSE_LOCATION} or\n> \\* {@link android.Manifest.permission#ACCESS_FINE_LOCATION} permission\n> \\* in order to get results.\n\n\u306a\u305c\u3001\u300cin order to _scan_\u300d\u3067\u306f\u306a\u304f\u3001\u300cin order to _get_\u300d\u306a\u306e\u304b?\n\n\u305d\u3057\u3066\u3001Nexus5 + Android 6.0\u306e\u74b0\u5883\u3067\u306f\u3001\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u8a31\u53ef\u3057\u305f\u72b6\u614b\u3067\u3082\u3001\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u3092\u30aa\u30d5\u306b\u3057\u3066\u3044\u308b\u3068\u30b9\u30ad\u30e3\u30f3\u7d50\u679c\u304c\u5f97\u3089\u308c\u306a\u3044\u3068\u3044\u3046\u306e\u304c\u3042\u3063\u3066\u3001\u305d\u3053\u3082\u524d\u56de\u306e\u8abf\u67fb\u3067\u306f\u78ba\u8a8d\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u3053\u306e2\u70b9\u306b\u3064\u3044\u3066\u3001\u30bd\u30fc\u30b9\u3092\u3082\u3046\u5c11\u3057\u773a\u3081\u3066\u307f\u305f\u3089\u7406\u7531\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u307e\u3068\u3081\u307e\u3059\u3002\n\n# \u767a\u751f\u6761\u4ef6\n\n+ BLE\u306e\u30b9\u30ad\u30e3\u30f3\u3092\u884c\u3046\u30a2\u30d7\u30ea\u306b\u5bfe\u3057\u3066\u3001\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3(*ACCESS_CO\bARSE_LOCATION* \u307e\u305f\u306f *ACCESS_FINE_LOCATION*)\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u3002\n+ \u4f7f\u7528\u3057\u3066\u3044\u308bAndroid\u7aef\u672b\u3067\u300c\u4f4d\u7f6e\u60c5\u5831\u300d\u304c\u30aa\u30d5\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n# \u767a\u751f\u4e8b\u8c61\n\n`BluetoothLeScanner.startScan(ScanCallback callback)`\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u6307\u5b9a\u3057\u305f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u306a\u3044\u3002\n\n# GattService.java\n\n\u3044\u304d\u306a\u308a\u7d50\u8ad6\u3067\u3059\u304c\u3001`GattService.java`\u3067\u30b9\u30ad\u30e3\u30f3\u7d50\u679c\u3092\u8fd4\u3059\u969b\u306b\u3001\u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306b\u52a0\u3048\u3001\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u306e\u30aa\u30f3/\u30aa\u30d5\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u308a\u3001\u3044\u305a\u308c\u304b\u304c\u6b20\u3051\u308b\u3068`ScanCallback`\u3092\u547c\u3073\u51fa\u3057\u307e\u305b\u3093\u3002\n\n```\n/**************************************************************************\n* Callback functions - CLIENT\n*************************************************************************/\nvoid onScanResult(String address, int rssi, byte[] adv_data) {\n\tif (VDBG) Log.d(TAG, \"onScanResult() - address=\" + address\n\t\t\t\t+ \", rssi=\" + rssi);\n\tList<UUID> remoteUuids = parseUuids(adv_data);\n\tfor (ScanClient client : mScanManager.getRegularScanQueue()) {\n\t\tif (client.uuids.length > 0) {\n\t\t\tint matches = 0;\n\t\t\tfor (UUID search : client.uuids) {\n\t\t\t\tfor (UUID remote: remoteUuids) {\n\t\t\t\t\tif (remote.equals(search)) {\n\t\t\t\t\t\t++matches;\n\t\t\t\t\t\tbreak; // Only count 1st match in case of duplicates\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (matches < client.uuids.length) continue;\n\t\t}\n\t\t\n\t\tif (!client.isServer) {\n\t\t\tClientMap.App app = mClientMap.getById(client.clientIf);\n\t\t\tif (app != null) {\n\t\t\t\tBluetoothDevice device = BluetoothAdapter.getDefaultAdapter()\n\t\t\t\t\t\t.getRemoteDevice(address);\n\t\t\t\tScanResult result = new ScanResult(device, ScanRecord.parseFromBytes(adv_data),\n\t\t\t\t\t\trssi, SystemClock.elapsedRealtimeNanos());\n\t\t\t\t// Do no report if location mode is OFF or the client has no location permission\n\t\t\t\t// PEERS_MAC_ADDRESS permission holders always get results\n\t\t\t\tif (hasScanResultPermission(client) && matchesFilters(client, result)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tScanSettings settings = client.settings;\n\t\t\t\t\t\tif ((settings.getCallbackType() &\n\t\t\t\t\t\t\t\tScanSettings.CALLBACK_TYPE_ALL_MATCHES) != 0) {\n\t\t\t\t\t\t\tapp.callback.onScanResult(result);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (RemoteException e) {\n\t\t\t\t\t\tLog.e(TAG, \"Exception: \" + e);\n\t\t\t\t\t\tmClientMap.remove(client.clientIf);\n\t\t\t\t\t\tmScanManager.stopScan(client);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tServerMap.App app = mServerMap.getById(client.clientIf);\n\t\t\tif (app != null) {\n\t\t\t\ttry {\n\t\t\t\t\tapp.callback.onScanResult(address, rssi, adv_data);\n\t\t\t\t} catch (RemoteException e) {\n\t\t\t\t\tLog.e(TAG, \"Exception: \" + e);\n\t\t\t\t\tmServerMap.remove(client.clientIf);\n\t\t\t\t\tmScanManager.stopScan(client);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** Determines if the given scan client has the appropriate permissions to receive callbacks. */\nprivate boolean hasScanResultPermission(final ScanClient client) {\n\tfinal boolean requiresLocationEnabled =\n\t\t\tgetResources().getBoolean(R.bool.strict_location_check);\n\tfinal boolean locationEnabledSetting = Settings.Secure.getInt(getContentResolver(),\n\t\t\tSettings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF)\n\t\t\t!= Settings.Secure.LOCATION_MODE_OFF;\n\tfinal boolean locationEnabled = !requiresLocationEnabled || locationEnabledSetting\n\t\t\t|| client.legacyForegroundApp;\n\treturn (client.hasPeersMacAddressPermission\n\t\t\t|| (client.hasLocationPermission && locationEnabled));\n}\n```\n\n\u3057\u3063\u304b\u308a\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u300cin order to _get_\u300d\u306e\u8b0e\u306f\u89e3\u3051\u307e\u3057\u305f\u3002\n\n> // Do no report if location mode is OFF or the client has no location permission\n\n\u305f\u3060\u3057\u3001\n\n> // PEERS_MAC_ADDRESS permission holders always get results\n\n\u3068\u3042\u308a\u3001 *PEERS_MAC_ADDRESS*\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u6301\u3063\u3066\u3044\u308c\u3070\u5e38\u306b\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308c\u308b\u3001\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n# PEERS_MAC_ADDRESS\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\n\n\u3042\u307e\u308a\u60c5\u5831\u304c\u306a\u3044(Android Developers\u306b\u3082)\u306e\u3067\u3059\u304c\u3001Android 6.0\u304b\u3089\u8ffd\u52a0\u3055\u308c\u305f\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u306e\u3088\u3046\u3067\u3059[^1]\u3002\n\n\u3053\u308c\u4ed8\u3051\u308c\u3070\u3044\u3044\u3093\u3067\u3057\u3087?\u306a\u3093\u3066\u601d\u3063\u305f\u3089\u3001\u7518\u3044\u3002\u30d7\u30ed\u30c6\u30af\u30b7\u30e7\u30f3\u30ec\u30d9\u30eb\u304c **\u300csignature\u300d**\u3002\n\n\u3064\u307e\u308a\u306f\u3001\u666e\u901a\u306e\u30a2\u30d7\u30ea\u3067\u306f\u4f7f\u3048\u307e\u305b\u3093\u3002\n\n[^1]: [RiskFinder Blog](http://blog.riskfinder.co.jp/2015/11/android60.html)\n\n# targetSdkVersion\n\n\u4e0a\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3001\u3082\u30461\u3064\u6c17\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n_targetSdkVersion_\u306e\u30c1\u30a7\u30c3\u30af\u3057\u3066\u306a\u3044\u306e?\n\n## requiresLocationEnabled\n\n`R.bool.strict_location_check`\u3092\u8abf\u3079\u3066\u307f\u308b\u3068 _\u300ctrue\u300d_ \u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\n```\n<!-- If true, we will require location to be enabled on the device to\n\tfire Bluetooth LE scan result callbacks in addition to having one\n\tof the location permissions. -->\n<bool name=\"strict_location_check\">true</bool>\n```\n\n\u3053\u3053\u306f\u30a4\u30e1\u30fc\u30b8\u4f5c\u308a\u306e\u969b\u306b\u8a2d\u5b9a\u3067\u304d\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n## locationEnabledSetting\n\n\u3053\u308c\u306f\u7aef\u672b\u306e\u8a2d\u5b9a\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001targetSdkVersion\u306f\u95a2\u4fc2\u306a\u3044\u3067\u3059\u306d\u3002\n\n## locationEnabled\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001`client.legacyForegroundApp`\u304c _\u300ctrue\u300d_ \u3092\u8fd4\u305b\u3070\u3001\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u304c\u30aa\u30d5\u3067\u3082\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u30cf\u30ba\u3067\u3059\u3002\n\n`ScanClient`\u306f\u3001[\u524d\u56de](http://qiita.com/hisanaka/items/c37d5ecb8fb520e6c9ec)\u898b\u305f\u3088\u3046\u306b\u3001`GattService.java`\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\nvoid startScan(int appIf, boolean isServer, ScanSettings settings,\n\t\tList<ScanFilter> filters, List<List<ResultStorageDescriptor>> storages,\n\t\tString callingPackage) {\n\t\n\t(snip)\n\t\n\tfinal ScanClient scanClient = new ScanClient(appIf, isServer, settings, filters, storages);\n\tscanClient.hasLocationPermission = Utils.checkCallerHasLocationPermission(this, mAppOps,\n\t\tcallingPackage);\n\tscanClient.hasPeersMacAddressPermission = Utils.checkCallerHasPeersMacAddressPermission(\n\t\tthis);\n\tscanClient.legacyForegroundApp = Utils.isLegacyForegroundApp(this, callingPackage);\n\tmScanManager.startScan(scanClient);\n}\n```\n\n`Utils.java`\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001\n\n```\npublic static boolean isLegacyForegroundApp(Context context, String pkgName) {\n\treturn !isMApp(context, pkgName) && isForegroundApp(context, pkgName);\n}\n```\n\n\u3068\u306a\u3063\u3066\u304a\u308a\u3001targetSdkVersion\u304c22\u4ee5\u4e0b\u306e\u5834\u5408\u306f _\u300ctrue\u300d_ \u304c\u8fd4\u308a\u3001\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u9006\u306b\u8a00\u3048\u3070\u300123\u4ee5\u4e0a\u306b\u3059\u308b\u3068\u3001\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u3092\u30aa\u30f3\u306b\u3057\u306a\u3044\u3068\u30c0\u30e1\u3067\u3059\u3002\n\n# \u307e\u3068\u3081\n\nAndroid 6.0\u3067\u3001targetSdkVersion\u309223\u306b\u3057\u305f\u5834\u5408\u3001BLE\u30c7\u30d0\u30a4\u30b9\u3092\u30b9\u30ad\u30e3\u30f3\u3057\u3066\u691c\u51fa\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u6b21\u306e\u6761\u4ef6\u3092\u3044\u305a\u308c\u3082\u6e80\u305f\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n1. \u4f4d\u7f6e\u60c5\u5831\u30d1\u30fc\u30df\u30b7\u30e7\u30f3( *ACCESS_COARSE_LOCATION* \u307e\u305f\u306f *ACCESS_FINE_LOCATION* )\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u3002\n1. \u7aef\u672b\u306e\u4f4d\u7f6e\u60c5\u5831\u30e2\u30fc\u30c9\u304c\u30aa\u30f3\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u30e2\u30c7\u30eb\u306e\u5909\u66f4\u306f\u5f7c\u65b9\u6b64\u65b9\u3067\u53d6\u308a\u4e0a\u3052\u3089\u308c\u3066\u3044\u3066\u3001`Context.requestPermissions()`\u3067\u8a31\u53ef\u3092\u6c42\u3081\u308b\u3068\u3044\u3046\u610f\u8b58\u306f\u3042\u308a\u307e\u3059\u304c\u3001Bluetooth\u306b\u76f4\u63a5\u306f\u95a2\u4fc2\u306a\u3055\u305d\u3046\u306a\u4f4d\u7f6e\u60c5\u5831\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u3068\u3044\u3046\u7f60\u306b\u52a0\u3048\u3066\u3001\u7aef\u672b\u306e\u8a2d\u5b9a\u307e\u3067\u5909\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u7f60\u306e\u4e8c\u6bb5\u69cb\u3048\u3067\u3057\u305f\u3002\n\n\n", "tags": ["Android", "bluetooth", "permission"]}