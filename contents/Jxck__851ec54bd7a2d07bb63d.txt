{"context": " More than 1 year has passed since last update.\u751f WebRTC API \u3067 dataChannel \u3067\u306e\u6587\u5b57\u5217\u30c1\u30e3\u30c3\u30c8\u306e\u63a5\u7d9a\u30d5\u30ed\u30fc\u3001\u4f55\u56de\u304b\u8abf\u3079\u3066\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u5f35\u3063\u3066\u304a\u304f\u3002\n\u6d41\u308c\u3092\u601d\u3044\u51fa\u3059\u305f\u3081\u306e\u3082\u306e\u306a\u306e\u3067\u3001\u9069\u5f53\u306b\u52d5\u304f\u3060\u3051\u3067\u7d30\u304b\u3044\u4f8b\u5916\u51e6\u7406\u3084\u3001\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u3066\u306a\u3044\u30a4\u30d9\u30f3\u30c8\u3084\u3001\u69cb\u9020\u5316\u306f\u3057\u3066\u306a\u3044\u3002\u3061\u3087\u3063\u3068\u3044\u3058\u308c\u3070 Video \u3082\u9001\u308c\u308b\u3002\u4e00\u5bfe\u4e00\u3057\u304b\u3067\u304d\u306a\u3044\u3002\n\u304b\u3051\u308b\u5074\u3068\u53d7\u3051\u308b\u5074\u306e peer \u306f\u5225\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3057\u3066\u308b\u306e\u3082\u3001\u6d41\u308c\u3092\u601d\u3044\u51fa\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3002\n\u30b5\u30fc\u30d0\u5074\u306f socket.io \u3067\u9069\u5f53\u306b\u8fd4\u3057\u3066\u3044\u308b\u3002\n\nclient.js\nfunction prittysdp(sdp) {\n  var text = 'type:' + sdp.type + '\\n';\n  text += sdp.sdp;\n  return text\n}\n\nfunction prittyice(ice) {\n  var text = JSON.stringify(ice, null, \"    \");\n  return text;\n}\n\nvar config = {\n  media: {\n    video: true,\n    audio: false\n  },\n  peer: {\n    iceServers: []\n  },\n  rtcoption: {\n    mandatory: {\n      OfferToReceiveAudio:true,\n      OfferToReceiveVideo:true\n    }\n  },\n  channel: {\n    ordered: false,\n    maxRetransmitTime: 3000\n  }\n}\n\n// \u30b5\u30fc\u30d0\u306b\u63a5\u7d9a(localhost)\nvar socket = io.connect();\n\nvar requester = null;\nvar responser = null;\nvar localStream = null;\n\nfunction chat(dataChannel) {\n  var $chatView = $('#chatView');\n  var $chatInput = $('#chatInput');\n  var $chatSubmit = $('#chatSubmit');\n\n  dataChannel.onopen = function () {\n    console.log('chat open');\n    $chatInput.prop('disabled', false);\n  };\n\n  dataChannel.onmessage = function (e) {\n    $chatView.val($chatView.val() + e.data + '\\n');\n    console.log(\"Got Data Channel Message:\", e.data);\n  };\n\n  dataChannel.onerror = function (error) {\n    $chatInput.prop('disabled', true);\n    console.log(\"Data Channel Error:\", error);\n  };\n\n  dataChannel.onclose = function () {\n    $chatInput.prop('disabled', true);\n    console.log(\"The Data Channel is Closed\");\n  };\n\n  $chatSubmit.click(function() {\n    var message = $chatInput.val();\n    dataChannel.send(message);\n    $chatView.val($chatView.val() + message + '\\n');\n  });\n}\n\n$(function() {\n  var $localVideo = $('#local-video').get(0);\n  var $remoteVideo = $('#remote-video').get(0);\n\n  socket.on('offer', function(offer) {\n    // create peer responser\n    responser = new webkitRTCPeerConnection(config.responser);\n    responser.setRemoteDescription(new RTCSessionDescription(offer));\n\n    // add stream\n    if(localStream) {\n      responser.addStream(localStream);\n    }\n    responser.onaddstream = function(e) {\n      $remoteVideo.src = URL.createObjectURL(e.stream);\n    }\n    responser.onremovestream = function(e) {\n      $remoteVideo.src = '';\n    }\n\n    // candidate\n    responser.onicecandidate = function(ice) {\n      if (ice.candidate) {\n        console.log(prittyice(ice.candidate));\n        socket.emit('ice', ice.candidate);\n      } else {\n        console.log('==END CANDIDATE==');\n      }\n    }\n\n    // answer\n    responser.createAnswer(function success(ans) {\n      responser.setLocalDescription(ans);\n\n      responser.ondatachannel = function(e) {\n        // data channel\n        var dataChannel = e.channel;\n        chat(dataChannel);\n\n      };\n      console.log(prittysdp(ans));\n      socket.emit('answer', ans);\n    }, console.error, config.rtcoption);\n  });\n\n  socket.on('answer', function(sdp) {\n    requester.setRemoteDescription(new RTCSessionDescription(sdp));\n  });\n\n  socket.on('ice', function(ice) {\n    var candidate = new RTCIceCandidate(ice);\n    if (requester) {\n      requester.addIceCandidate(candidate);\n    } else {\n      responser.addIceCandidate(candidate);\n    }\n  });\n\n  socket.on('stop', function() {\n    $('#stop').click();\n  });\n\n  $('#connect').click(function() {\n    // create peer requester\n    requester = new webkitRTCPeerConnection(config.requester);\n\n    // data channel\n    var dataChannel = requester.createDataChannel('RTCDataChannel', config.channel);\n    chat(dataChannel);\n\n    // add stream\n    if (localStream) {\n      requester.addStream(localStream);\n    }\n    requester.onaddstream = function(e) {\n      $remoteVideo.src = URL.createObjectURL(e.stream);\n    }\n    requester.onremovestream = function(e) {\n      $remoteVideo.src = '';\n    }\n\n    // candidate\n    requester.onicecandidate = function(ice) {\n      if (ice.candidate) {\n        console.log(prittyice(ice.candidate));\n        socket.emit('ice', ice.candidate);\n      } else {\n        console.log('==END CANDIDATE==');\n      }\n    }\n\n    // offer\n    requester.createOffer(function success(offer) {\n      console.log(prittysdp(offer));\n      requester.setLocalDescription(offer);\n      socket.emit('offer', offer);\n    }, console.error, config.rtcoption);\n  });\n\n  // stop\n  $('#stop').click(function() {\n    $localVideo.src = '';\n    $remoteVideo.src = '';\n    if (localStream) {\n      localStream.stop();\n    }\n    socket.disconnect();\n    if (requester) {\n      requester.close();\n      requester = null;\n    } else if (responser) {\n      responser.close();\n      responser = null;\n    }\n  });\n\n  $('#video').click(function() {\n    // start video\n    navigator.webkitGetUserMedia(config.media, function success(stream) {\n      localStream = stream;\n      $localVideo.src = URL.createObjectURL(stream);\n      $localVideo.play();\n      $localVideo.volume = 0;\n    }, console.error);\n  });\n});\n\n\nserver.js\n// Express\nvar express = require('express')\n  , http = require('http')\n  , app = express();\n\napp.use(express.static(__dirname + '/public'));\n\nvar server = http.createServer(app).listen(3000);\nconsole.log('server start:', 3000);\n\n// Socket.IO\nvar io = require('socket.io')\n  , io = io.listen(server);\n\nio.sockets.on('connection', function(socket) {\n  socket.on('offer', function(data) {\n    socket.broadcast.emit('offer', data);\n  });\n\n  socket.on('answer', function(data) {\n    socket.broadcast.emit('answer', data);\n  });\n\n  socket.on('ice', function(data) {\n    socket.broadcast.emit('ice', data);\n  });\n\n  socket.on('disconnect', function(data) {\n    socket.broadcast.emit('stop', true);\n  });\n});\n\n\u751f WebRTC API \u3067 dataChannel \u3067\u306e\u6587\u5b57\u5217\u30c1\u30e3\u30c3\u30c8\u306e\u63a5\u7d9a\u30d5\u30ed\u30fc\u3001\u4f55\u56de\u304b\u8abf\u3079\u3066\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u5f35\u3063\u3066\u304a\u304f\u3002\n\u6d41\u308c\u3092\u601d\u3044\u51fa\u3059\u305f\u3081\u306e\u3082\u306e\u306a\u306e\u3067\u3001\u9069\u5f53\u306b\u52d5\u304f\u3060\u3051\u3067\u7d30\u304b\u3044\u4f8b\u5916\u51e6\u7406\u3084\u3001\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u3066\u306a\u3044\u30a4\u30d9\u30f3\u30c8\u3084\u3001\u69cb\u9020\u5316\u306f\u3057\u3066\u306a\u3044\u3002\u3061\u3087\u3063\u3068\u3044\u3058\u308c\u3070 Video \u3082\u9001\u308c\u308b\u3002\u4e00\u5bfe\u4e00\u3057\u304b\u3067\u304d\u306a\u3044\u3002\n\n\u304b\u3051\u308b\u5074\u3068\u53d7\u3051\u308b\u5074\u306e peer \u306f\u5225\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3057\u3066\u308b\u306e\u3082\u3001\u6d41\u308c\u3092\u601d\u3044\u51fa\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u3002\n\n\u30b5\u30fc\u30d0\u5074\u306f socket.io \u3067\u9069\u5f53\u306b\u8fd4\u3057\u3066\u3044\u308b\u3002\n\n## client.js\n\n```js\nfunction prittysdp(sdp) {\n  var text = 'type:' + sdp.type + '\\n';\n  text += sdp.sdp;\n  return text\n}\n\nfunction prittyice(ice) {\n  var text = JSON.stringify(ice, null, \"    \");\n  return text;\n}\n\nvar config = {\n  media: {\n    video: true,\n    audio: false\n  },\n  peer: {\n    iceServers: []\n  },\n  rtcoption: {\n    mandatory: {\n      OfferToReceiveAudio:true,\n      OfferToReceiveVideo:true\n    }\n  },\n  channel: {\n    ordered: false,\n    maxRetransmitTime: 3000\n  }\n}\n\n// \u30b5\u30fc\u30d0\u306b\u63a5\u7d9a(localhost)\nvar socket = io.connect();\n\nvar requester = null;\nvar responser = null;\nvar localStream = null;\n\nfunction chat(dataChannel) {\n  var $chatView = $('#chatView');\n  var $chatInput = $('#chatInput');\n  var $chatSubmit = $('#chatSubmit');\n\n  dataChannel.onopen = function () {\n    console.log('chat open');\n    $chatInput.prop('disabled', false);\n  };\n\n  dataChannel.onmessage = function (e) {\n    $chatView.val($chatView.val() + e.data + '\\n');\n    console.log(\"Got Data Channel Message:\", e.data);\n  };\n\n  dataChannel.onerror = function (error) {\n    $chatInput.prop('disabled', true);\n    console.log(\"Data Channel Error:\", error);\n  };\n\n  dataChannel.onclose = function () {\n    $chatInput.prop('disabled', true);\n    console.log(\"The Data Channel is Closed\");\n  };\n\n  $chatSubmit.click(function() {\n    var message = $chatInput.val();\n    dataChannel.send(message);\n    $chatView.val($chatView.val() + message + '\\n');\n  });\n}\n\n$(function() {\n  var $localVideo = $('#local-video').get(0);\n  var $remoteVideo = $('#remote-video').get(0);\n\n  socket.on('offer', function(offer) {\n    // create peer responser\n    responser = new webkitRTCPeerConnection(config.responser);\n    responser.setRemoteDescription(new RTCSessionDescription(offer));\n\n    // add stream\n    if(localStream) {\n      responser.addStream(localStream);\n    }\n    responser.onaddstream = function(e) {\n      $remoteVideo.src = URL.createObjectURL(e.stream);\n    }\n    responser.onremovestream = function(e) {\n      $remoteVideo.src = '';\n    }\n\n    // candidate\n    responser.onicecandidate = function(ice) {\n      if (ice.candidate) {\n        console.log(prittyice(ice.candidate));\n        socket.emit('ice', ice.candidate);\n      } else {\n        console.log('==END CANDIDATE==');\n      }\n    }\n\n    // answer\n    responser.createAnswer(function success(ans) {\n      responser.setLocalDescription(ans);\n\n      responser.ondatachannel = function(e) {\n        // data channel\n        var dataChannel = e.channel;\n        chat(dataChannel);\n\n      };\n      console.log(prittysdp(ans));\n      socket.emit('answer', ans);\n    }, console.error, config.rtcoption);\n  });\n\n  socket.on('answer', function(sdp) {\n    requester.setRemoteDescription(new RTCSessionDescription(sdp));\n  });\n\n  socket.on('ice', function(ice) {\n    var candidate = new RTCIceCandidate(ice);\n    if (requester) {\n      requester.addIceCandidate(candidate);\n    } else {\n      responser.addIceCandidate(candidate);\n    }\n  });\n\n  socket.on('stop', function() {\n    $('#stop').click();\n  });\n\n  $('#connect').click(function() {\n    // create peer requester\n    requester = new webkitRTCPeerConnection(config.requester);\n\n    // data channel\n    var dataChannel = requester.createDataChannel('RTCDataChannel', config.channel);\n    chat(dataChannel);\n\n    // add stream\n    if (localStream) {\n      requester.addStream(localStream);\n    }\n    requester.onaddstream = function(e) {\n      $remoteVideo.src = URL.createObjectURL(e.stream);\n    }\n    requester.onremovestream = function(e) {\n      $remoteVideo.src = '';\n    }\n\n    // candidate\n    requester.onicecandidate = function(ice) {\n      if (ice.candidate) {\n        console.log(prittyice(ice.candidate));\n        socket.emit('ice', ice.candidate);\n      } else {\n        console.log('==END CANDIDATE==');\n      }\n    }\n\n    // offer\n    requester.createOffer(function success(offer) {\n      console.log(prittysdp(offer));\n      requester.setLocalDescription(offer);\n      socket.emit('offer', offer);\n    }, console.error, config.rtcoption);\n  });\n\n  // stop\n  $('#stop').click(function() {\n    $localVideo.src = '';\n    $remoteVideo.src = '';\n    if (localStream) {\n      localStream.stop();\n    }\n    socket.disconnect();\n    if (requester) {\n      requester.close();\n      requester = null;\n    } else if (responser) {\n      responser.close();\n      responser = null;\n    }\n  });\n\n  $('#video').click(function() {\n    // start video\n    navigator.webkitGetUserMedia(config.media, function success(stream) {\n      localStream = stream;\n      $localVideo.src = URL.createObjectURL(stream);\n      $localVideo.play();\n      $localVideo.volume = 0;\n    }, console.error);\n  });\n});\n```\n\n\n## server.js\n\n```js\n// Express\nvar express = require('express')\n  , http = require('http')\n  , app = express();\n\napp.use(express.static(__dirname + '/public'));\n\nvar server = http.createServer(app).listen(3000);\nconsole.log('server start:', 3000);\n\n// Socket.IO\nvar io = require('socket.io')\n  , io = io.listen(server);\n\nio.sockets.on('connection', function(socket) {\n  socket.on('offer', function(data) {\n    socket.broadcast.emit('offer', data);\n  });\n\n  socket.on('answer', function(data) {\n    socket.broadcast.emit('answer', data);\n  });\n\n  socket.on('ice', function(data) {\n    socket.broadcast.emit('ice', data);\n  });\n\n  socket.on('disconnect', function(data) {\n    socket.broadcast.emit('stop', true);\n  });\n});\n```\n", "tags": ["WebRTC"]}