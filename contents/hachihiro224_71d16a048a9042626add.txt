{"tags": ["AWS", "lambda", "RDS", "chatwork", "kms"], "context": "\u3053\u306e\u8a18\u4e8b\u306fWHITEPLUS Advent Calendar  2016 19\u65e5\u76ee\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3093\u306b\u3061\u306f\u3002\u682a\u5f0f\u4f1a\u793e\u30db\u30ef\u30a4\u30c8\u30d7\u30e9\u30b9\u3001\u30a8\u30f3\u30b8\u30cb\u30a2(\u30de\u30cd\u30fc\u30b8\u30e3\u30fc)\u306e @hachihiro224\u3067\u3059\u3002\n\u524d\u56de\u306fRDS\u306b\u63a5\u7d9a\u3067\u304d\u308bLambda\u306e\u74b0\u5883\u69cb\u7bc9\u307e\u3067\u3057\u307e\u3057\u305f\u304c\u3001\n\u4eca\u56de\u306f\u305d\u306e\u74b0\u5883\u3092\u5229\u7528\u3057\u3066\u3001RDS\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001Chatwork\u3078\u901a\u77e5\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u524d\u56de\u306e\u304a\u3055\u3089\u3044\n\u524d\u56de\u306e\u74b0\u5883\u3067KMS\u3067\u63a5\u7d9a\u60c5\u5831\u3092\u6697\u53f7\u5316\u3057\u3001VPC\u5185\u306eRDS\u306b\u63a5\u7d9a\u3067\u304d\u308b\u72b6\u614b\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nVPC\u5185\u30ea\u30bd\u30fc\u30b9\u306e\u30a2\u30af\u30bb\u30b9\u3068\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3078\u306e\u63a5\u7d9a\u304c\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\n\u3053\u306e\u307e\u307e\u4e00\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u6a5f\u80fd\u3092\u76db\u308a\u8fbc\u3093\u3067\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3001DB\u306e\u63a5\u7d9a\u3084\u5fa9\u53f7\u306f\u5171\u901a\u306a\u51e6\u7406\u306a\u306e\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5206\u3051\u3066\u3044\u304d\u307e\u3059\u3002\nsample_function\n\u251c\u2500\u2500 create-function.sh\n\u251c\u2500\u2500 require.txt\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 kms_client.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mysql_client.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rds_config.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sample_function.py\n\u2514\u2500\u2500 update-function.sh\n\n\nkms_client.py\n# -*- coding: utf-8 -*-\nimport base64\nimport boto3\n\nkms = boto3.client('kms')\n\n\ndef decrypt(encrypted):\n    return kms.decrypt(CiphertextBlob=base64.b64decode(encrypted))['Plaintext']\n\n\n\nrds_config.py\ndb_host = '\u6697\u53f7\u5316\u3057\u305fdb_host'\ndb_username = '\u6697\u53f7\u5316\u3057\u305fdb_user'\ndb_password = '\u6697\u53f7\u5316\u3057\u305fpassword'\ndb_name = 'db_name'\n\n\n\nmysql_client.py\n# -*- coding: utf-8 -*-\nimport pymysql\nimport rds_config\nfrom kms_client import decrypt\n\n# rds settings\nrds_host = decrypt(rds_config.db_host)\nname = decrypt(rds_config.db_username)\npassword = decrypt(rds_config.db_password)\ndb_name = rds_config.db_name\n\n\ndef connect():\n    return pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5, charset='utf8')\n\n\ndef fetch(conn, sql, param=None):\n    with conn.cursor() as cur:\n        num = cur.execute(sql, param)\n        return num, cur\n\n\n\nsample_function.py\n# -*- coding: utf-8 -*-\n\nimport sys\nimport logging\nfrom mysql_client import connect, fetch\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ntry:\n    conn = connect()\nexcept:\n    logger.error(\"ERROR: Unexpected error: Could not connect to MySql instance.\")\n    sys.exit()\n\n\ndef lambda_handler(event, context):\n    num, cur = fetch(conn, 'SELECT NOW()')\n    for row in cur:\n        logger.info('\u63a5\u7d9a\u78ba\u8a8d %s' % row[0])\n\n    return \"Got %d items from RDS MySQL table\" % num\n\n\n\u767b\u9332\u3057\u305fLambda Function\u3092\u66f4\u65b0\u3059\u308b\u305f\u3081\u306b\u3001shell\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nupdate_function.sh\n#!/bin/bash\n\n# TODO: update function_name\nFUNCTION_NAME=sample_function\n\ncd \"$(dirname \"$0\")\"/src\nmkdir bundle\ncp *.py bundle/\ncd bundle\n\npip freeze > require.txt\n[ -s require.txt ] && pip install -r require.txt -t .\n\nzip -r upload.zip .\n\naws lambda update-function-code \\\n    --function-name ${FUNCTION_NAME} \\\n    --zip-file fileb://upload.zip\n\ncd .. && rm -rf bundle\n\n\nLambda Function\u3092\u66f4\u65b0\u3057\u3066\u7d50\u679c\u304c\u540c\u3058\u3067\u3042\u308c\u3070\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u51fa\u6765\u307e\u3057\u305f\u3002\n\nChatWork\u3078\u901a\u77e5\u3059\u308b\nChatWork\u3078\u901a\u77e5\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nchatwork_config.py\nBASE_URL = 'https://api.chatwork.com/v1/rooms/{}/messages'\nDEFAULT_TOKEN = '\u6697\u53f7\u5316\u3055\u308c\u305ftoken'\nROOM = {\n    'test': 'room_id',\n    'prod': 'room_id'\n}\n\n\n\nchatwork.py\n# -*- coding: utf-8 -*-\nimport urllib\nimport logging\nfrom urllib2 import Request, urlopen, URLError, HTTPError\nfrom chatwork_config import BASE_URL, DEFAULT_TOKEN\nfrom kms_client import decrypt\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\ndef post(room_id, message):\n    logger.info(\"Message: \" + str(message))\n\n    url = BASE_URL.format(room_id)\n    token = decrypt(DEFAULT_TOKEN)\n    headers = {\n        'X-ChatWorkToken': token\n    }\n    payload = {\n        'body': message\n    }\n\n    req = Request(url, urllib.urlencode(payload), headers)\n    try:\n        response = urlopen(req)\n        response.read()\n        logger.info(\"Message posted to %s\", payload['body'])\n    except HTTPError as e:\n        logger.error(\"Request failed: %d %s\", e.code, e.reason)\n    except URLError as e:\n        logger.error(\"Server connection failed: %s\", e.reason)\n\n\n\u3053\u308c\u3092\u4f7f\u3063\u3066Chatwork\u3078\u901a\u77e5\u3059\u308b\u3088\u3046\u306bsample_function.py\u3092\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\n\nsample_function.py\n# -*- coding: utf-8 -*-\n\nimport sys\nimport logging\nimport chatwork\nfrom chatwork_config import ROOM\nfrom mysql_client import connect, fetch\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ntry:\n    conn = connect()\nexcept:\n    logger.error(\"ERROR: Unexpected error: Could not connect to MySql instance.\")\n    sys.exit()\n\n\ndef lambda_handler(event, context):\n    num, cur = fetch(conn, 'SELECT NOW()')\n    for row in cur:\n        logger.info('\u63a5\u7d9a\u78ba\u8a8d %s' % row[0])\n        chatwork.post(ROOM['prod'], '\u63a5\u7d9a\u78ba\u8a8d %s' % row[0])\n\n    return \"Got %d items from RDS MySQL table\" % num\n\n\nchatwork\u3067\u901a\u77e5\u3059\u308b\u90e8\u5c4b\u306b\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u3092\u8ffd\u52a0\u3059\u308b\u306e\u3092\u304a\u5fd8\u308c\u306a\u304f\u3002\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306f\u524d\u56de\u4f5c\u3063\u305f\u57fa\u76e4\u306e\u4e0a\u3067Chatwork\u3078\u3068\u901a\u77e5\u51fa\u6765\u308b\u3088\u3046\u306bLambda Function\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u3053\u306e\u8981\u9818\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5897\u3084\u3059\u3053\u3068\u3067\u3001Slack\u3078\u306e\u901a\u77e5\u3084Elasticsearch Service\u3078\u306e\u767b\u9332\u306a\u3069\u7528\u9014\u306f\u5e83\u304c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u4eca\u56de\u4f5c\u6210\u3057\u305f\u3082\u306e\u306f\u4ee5\u4e0b\u306b\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3054\u81ea\u7531\u306b\u5229\u7528\u304f\u3060\u3055\u3044\u3002(\u305f\u3060\u3057\u3001\u81ea\u5df1\u8cac\u4efb\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002)\nhttps://github.com/WHITEPLUS/lambda_vpc_rds\n\u660e\u65e5\u306f\u5f0a\u793e\u30a8\u30f3\u30b8\u30cb\u30a2 @kai-zoa \u306e\u300c\u7d9a\u30fbGo\u3067\u30ea\u30e2\u30fc\u30c8\u30c7\u30d0\u30c3\u30b0\u300d\u3067\u3059\u3002\n\n\u30db\u30ef\u30a4\u30c8\u30d7\u30e9\u30b9\u3067\u306f\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6\u3057\u3066\u3044\u307e\u3059\n\u30db\u30ef\u30a4\u30c8\u30d7\u30e9\u30b9\u3067\u306f\u3001\u65b0\u3057\u3044\u6280\u8853\u306b\u3069\u3093\u3069\u3093\u6311\u6226\u3057\u305f\u3044\uff01\u3068\u3044\u3046\u6280\u8853\u3067\u4e8b\u696d\u306b\u8ca2\u732e\u3057\u305f\u3044\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u306f[WHITEPLUS Advent Calendar](http://qiita.com/advent-calendar/2016/whiteplus \"\")  2016 19\u65e5\u76ee\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u3093\u306b\u3061\u306f\u3002\u682a\u5f0f\u4f1a\u793e\u30db\u30ef\u30a4\u30c8\u30d7\u30e9\u30b9\u3001\u30a8\u30f3\u30b8\u30cb\u30a2(\u30de\u30cd\u30fc\u30b8\u30e3\u30fc)\u306e @hachihiro224\u3067\u3059\u3002\n\n[\u524d\u56de](http://qiita.com/hachihiro224/items/6d778156c4ef2757cb6a)\u306fRDS\u306b\u63a5\u7d9a\u3067\u304d\u308bLambda\u306e\u74b0\u5883\u69cb\u7bc9\u307e\u3067\u3057\u307e\u3057\u305f\u304c\u3001\n\u4eca\u56de\u306f\u305d\u306e\u74b0\u5883\u3092\u5229\u7528\u3057\u3066\u3001RDS\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001Chatwork\u3078\u901a\u77e5\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\n## \u524d\u56de\u306e\u304a\u3055\u3089\u3044\n\u524d\u56de\u306e\u74b0\u5883\u3067KMS\u3067\u63a5\u7d9a\u60c5\u5831\u3092\u6697\u53f7\u5316\u3057\u3001VPC\u5185\u306eRDS\u306b\u63a5\u7d9a\u3067\u304d\u308b\u72b6\u614b\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nVPC\u5185\u30ea\u30bd\u30fc\u30b9\u306e\u30a2\u30af\u30bb\u30b9\u3068\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u3078\u306e\u63a5\u7d9a\u304c\u53ef\u80fd\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\u5316\n\u3053\u306e\u307e\u307e\u4e00\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u6a5f\u80fd\u3092\u76db\u308a\u8fbc\u3093\u3067\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3001DB\u306e\u63a5\u7d9a\u3084\u5fa9\u53f7\u306f\u5171\u901a\u306a\u51e6\u7406\u306a\u306e\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u5206\u3051\u3066\u3044\u304d\u307e\u3059\u3002\n\n``` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\nsample_function\n\u251c\u2500\u2500 create-function.sh\n\u251c\u2500\u2500 require.txt\n\u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 kms_client.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mysql_client.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 rds_config.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 sample_function.py\n\u2514\u2500\u2500 update-function.sh\n```\n``` kms_client.py\n# -*- coding: utf-8 -*-\nimport base64\nimport boto3\n\nkms = boto3.client('kms')\n\n\ndef decrypt(encrypted):\n    return kms.decrypt(CiphertextBlob=base64.b64decode(encrypted))['Plaintext']\n```\n``` rds_config.py\ndb_host = '\u6697\u53f7\u5316\u3057\u305fdb_host'\ndb_username = '\u6697\u53f7\u5316\u3057\u305fdb_user'\ndb_password = '\u6697\u53f7\u5316\u3057\u305fpassword'\ndb_name = 'db_name'\n```\n``` mysql_client.py\n# -*- coding: utf-8 -*-\nimport pymysql\nimport rds_config\nfrom kms_client import decrypt\n\n# rds settings\nrds_host = decrypt(rds_config.db_host)\nname = decrypt(rds_config.db_username)\npassword = decrypt(rds_config.db_password)\ndb_name = rds_config.db_name\n\n\ndef connect():\n    return pymysql.connect(rds_host, user=name, passwd=password, db=db_name, connect_timeout=5, charset='utf8')\n\n\ndef fetch(conn, sql, param=None):\n    with conn.cursor() as cur:\n        num = cur.execute(sql, param)\n        return num, cur\n```\n``` sample_function.py\n# -*- coding: utf-8 -*-\n\nimport sys\nimport logging\nfrom mysql_client import connect, fetch\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ntry:\n    conn = connect()\nexcept:\n    logger.error(\"ERROR: Unexpected error: Could not connect to MySql instance.\")\n    sys.exit()\n\n\ndef lambda_handler(event, context):\n    num, cur = fetch(conn, 'SELECT NOW()')\n    for row in cur:\n        logger.info('\u63a5\u7d9a\u78ba\u8a8d %s' % row[0])\n\n    return \"Got %d items from RDS MySQL table\" % num\n```\n\n\u767b\u9332\u3057\u305fLambda Function\u3092\u66f4\u65b0\u3059\u308b\u305f\u3081\u306b\u3001shell\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n``` update_function.sh\n#!/bin/bash\n\n# TODO: update function_name\nFUNCTION_NAME=sample_function\n\ncd \"$(dirname \"$0\")\"/src\nmkdir bundle\ncp *.py bundle/\ncd bundle\n\npip freeze > require.txt\n[ -s require.txt ] && pip install -r require.txt -t .\n\nzip -r upload.zip .\n\naws lambda update-function-code \\\n    --function-name ${FUNCTION_NAME} \\\n    --zip-file fileb://upload.zip\n\ncd .. && rm -rf bundle\n```\n\nLambda Function\u3092\u66f4\u65b0\u3057\u3066\u7d50\u679c\u304c\u540c\u3058\u3067\u3042\u308c\u3070\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u51fa\u6765\u307e\u3057\u305f\u3002\n\n## ChatWork\u3078\u901a\u77e5\u3059\u308b\nChatWork\u3078\u901a\u77e5\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n``` chatwork_config.py\nBASE_URL = 'https://api.chatwork.com/v1/rooms/{}/messages'\nDEFAULT_TOKEN = '\u6697\u53f7\u5316\u3055\u308c\u305ftoken'\nROOM = {\n    'test': 'room_id',\n    'prod': 'room_id'\n}\n```\n``` chatwork.py\n# -*- coding: utf-8 -*-\nimport urllib\nimport logging\nfrom urllib2 import Request, urlopen, URLError, HTTPError\nfrom chatwork_config import BASE_URL, DEFAULT_TOKEN\nfrom kms_client import decrypt\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\ndef post(room_id, message):\n    logger.info(\"Message: \" + str(message))\n\n    url = BASE_URL.format(room_id)\n    token = decrypt(DEFAULT_TOKEN)\n    headers = {\n        'X-ChatWorkToken': token\n    }\n    payload = {\n        'body': message\n    }\n\n    req = Request(url, urllib.urlencode(payload), headers)\n    try:\n        response = urlopen(req)\n        response.read()\n        logger.info(\"Message posted to %s\", payload['body'])\n    except HTTPError as e:\n        logger.error(\"Request failed: %d %s\", e.code, e.reason)\n    except URLError as e:\n        logger.error(\"Server connection failed: %s\", e.reason)\n```\n\u3053\u308c\u3092\u4f7f\u3063\u3066Chatwork\u3078\u901a\u77e5\u3059\u308b\u3088\u3046\u306bsample_function.py\u3092\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\n\n``` sample_function.py\n# -*- coding: utf-8 -*-\n\nimport sys\nimport logging\nimport chatwork\nfrom chatwork_config import ROOM\nfrom mysql_client import connect, fetch\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ntry:\n    conn = connect()\nexcept:\n    logger.error(\"ERROR: Unexpected error: Could not connect to MySql instance.\")\n    sys.exit()\n\n\ndef lambda_handler(event, context):\n    num, cur = fetch(conn, 'SELECT NOW()')\n    for row in cur:\n        logger.info('\u63a5\u7d9a\u78ba\u8a8d %s' % row[0])\n        chatwork.post(ROOM['prod'], '\u63a5\u7d9a\u78ba\u8a8d %s' % row[0])\n\n    return \"Got %d items from RDS MySQL table\" % num\n```\nchatwork\u3067\u901a\u77e5\u3059\u308b\u90e8\u5c4b\u306b\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u305f\u30e6\u30fc\u30b6\u30fc\u3092\u8ffd\u52a0\u3059\u308b\u306e\u3092\u304a\u5fd8\u308c\u306a\u304f\u3002\n\n## \u307e\u3068\u3081\n\u4eca\u56de\u306f\u524d\u56de\u4f5c\u3063\u305f\u57fa\u76e4\u306e\u4e0a\u3067Chatwork\u3078\u3068\u901a\u77e5\u51fa\u6765\u308b\u3088\u3046\u306bLambda Function\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u3053\u306e\u8981\u9818\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5897\u3084\u3059\u3053\u3068\u3067\u3001Slack\u3078\u306e\u901a\u77e5\u3084Elasticsearch Service\u3078\u306e\u767b\u9332\u306a\u3069\u7528\u9014\u306f\u5e83\u304c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u4eca\u56de\u4f5c\u6210\u3057\u305f\u3082\u306e\u306f\u4ee5\u4e0b\u306b\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3054\u81ea\u7531\u306b\u5229\u7528\u304f\u3060\u3055\u3044\u3002(\u305f\u3060\u3057\u3001\u81ea\u5df1\u8cac\u4efb\u3067\u304a\u9858\u3044\u3057\u307e\u3059\u3002)\nhttps://github.com/WHITEPLUS/lambda_vpc_rds\n\n\u660e\u65e5\u306f\u5f0a\u793e\u30a8\u30f3\u30b8\u30cb\u30a2 @kai-zoa \u306e\u300c\u7d9a\u30fbGo\u3067\u30ea\u30e2\u30fc\u30c8\u30c7\u30d0\u30c3\u30b0\u300d\u3067\u3059\u3002\n\n#\u30db\u30ef\u30a4\u30c8\u30d7\u30e9\u30b9\u3067\u306f\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6\u3057\u3066\u3044\u307e\u3059\n\u30db\u30ef\u30a4\u30c8\u30d7\u30e9\u30b9\u3067\u306f\u3001[\u65b0\u3057\u3044\u6280\u8853\u306b\u3069\u3093\u3069\u3093\u6311\u6226\u3057\u305f\u3044\uff01\u3068\u3044\u3046\u6280\u8853\u3067\u4e8b\u696d\u306b\u8ca2\u732e\u3057\u305f\u3044\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6](https://www.wantedly.com/projects/69257)\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\n\n"}