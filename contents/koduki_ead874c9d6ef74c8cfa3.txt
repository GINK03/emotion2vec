{"context": "\u524d\u56de\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u6e08\u307e\u305b\u305f\u3068\u601d\u3046\u306e\u3067\u3001HelloWrod\u7684\u306a\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092Spark\u4e0a\u3067\u5b9f\u884c\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5358\u7d14\u306aFizzBuzz\n\u307e\u305a\u306f\u591a\u5c11\u3001\u4eca\u3055\u3089\u611f\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u307f\u3093\u306a\u5927\u597d\u304dFizzBuzz\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\nSpark\u7248\n def main(args: Array[String]): Unit = {\n    val conf = new SparkConf()\n      .setMaster(\"local\")\n      .setAppName(\"Example01\")\n    val sc = new SparkContext(conf)\n\n    sc.parallelize(1 to 100).map(x => {\n      if (x % 15 == 0) {\n        \"FizzBuzz\"\n      } else if (x % 5 == 0) {\n        \"Fizz\"\n      } else if (x % 3 == 0) {\n        \"Buzz\"\n      } else {\n        x.toString\n      }\n    }).foreach(println)\n    sc.stop()\n  }\n\nJava\u7248\n    public static void main(String[] args) throws IOException {\n        SparkConf sparkConf = new SparkConf()\n                .setMaster(\"local\")\n                .setAppName(\"Example01\");\n        JavaSparkContext sc = new JavaSparkContext(sparkConf);\n        sc.parallelize(IntStream.range(1, 100).boxed().collect(Collectors.toList())).map(x -> {\n            if (x % 15 == 0) {\n                return \"FizzBuzz\";\n            } else if (x % 5 == 0) {\n                return \"Fizz\";\n            } else if (x % 3 == 0) {\n                return \"Buzz\";\n            } else {\n                return x.toString();\n            }\n        }).foreach(x -> System.out.println(x));\n        sc.stop();\n    }\n\nIDE\u304b\u3089\u5b9f\u884c\u3059\u308b\u3068\u3001\u6a19\u6e96\u51fa\u529b\u306bFizzBuzz\u306e\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u305f\u306f\u305a\u3067\u3059\u3002\nSparkContext\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001Spark\u304c\u8d77\u52d5\u3055\u308c\u307e\u3059\u3002\n\u4eca\u56de\u306f\u958b\u767a\u74b0\u5883\u306a\u306e\u3067SparkConf\u306esetMaster\u306b\u306f\"local\"\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u901a\u5e38\u306f\u30af\u30e9\u30b9\u30bf\u540d\u3068\u304b\u30c7\u30d7\u30ed\u30a4\u5148\u3092\u66f8\u304f\u307f\u305f\u3044\u3067\u3059\u3002\nsetAppName\u306b\u306fSpark\u4e0a\u3067\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\u79f0\u3092\u4ed8\u3051\u307e\u3059\u3002\nsc.parallelize\u306f\u5f15\u6570\u306b\u3068\u3063\u305f\u5024\u3092RDD\u3068\u3044\u3046Spark\u3067\u306e\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002RDD\u306b\u95a2\u3057\u3066\u306f\u5225\u9014\u89e3\u8aac\u3057\u307e\u3059\u304c\u3001\n\u7c21\u5358\u306b\u8a00\u3046\u3068\u30af\u30e9\u30b9\u30bf\u4e0a\u306e\u5404\u30ce\u30fc\u30c9\u306b\u69cb\u7bc9\u3055\u308c\u305f\u5206\u6563\u30e1\u30e2\u30ea\u3067\u3059\u3002API\u7684\u306b\u306f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u3088\u3046\u306b\u632f\u821e\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306a\u3069\u306e\u5de8\u5927\u306a\u30c7\u30fc\u30bf\u304c\u30a4\u30f3\u30d7\u30c3\u30c8\u306b\u306a\u308b\u306e\u3067\u3001\nSparkContext#parallelize\u3092\u4f7f\u3046\u3053\u3068\u306f\u3001\u307e\u305a\u7121\u3044\u3067\u3057\u3087\u3046\u304c\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u305f\u308a\u632f\u308b\u821e\u3044\u3092\u691c\u8a3c\u3059\u308b\u306e\u306b\u306f\u4fbf\u5229\u3067\u3059\u3002\n\u3067\u3001\u521d\u671f\u5316\u306e\u90e8\u5206\u3053\u305d\u72ec\u7279\u306a\u3082\u306e\u306e\u3001map\u3084foreach\u306a\u3069\u666e\u901a\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306eAPI\u3067\u3059\u306d\uff1f\nScala\u30e6\u30fc\u30b6\u306f\u3082\u3061\u308d\u3093\u3001Java8\u306eStreamAPI\u306b\u6163\u308c\u3066\u3044\u308b\u306a\u3089\u7279\u306b\u9055\u548c\u611f\u306a\u304f\u4f7f\u3048\u308b\u306f\u305a\u3067\u3059\u3002\u3053\u306e\u8fba\u306f\u8a18\u8ff0\u65b9\u5f0f\u304c\u7279\u6b8a\u306aMapReduce\u3068\u306f\u5927\u304d\u304f\u9055\u3046\u3068\u3053\u308d\u3067\u3059\u3002\n\n\u30e1\u30bd\u30c3\u30c9\u3084\u5909\u6570\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5229\u7528\n\u3069\u306e\u304f\u3089\u3044\u300c\u666e\u901a\u300d\u306b\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u304d\u308b\u304b\u3092\u3082\u3046\u5c11\u3057\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u3002\nScala\u7248\n  def main(args: Array[String]): Unit = {\n    val conf = new SparkConf()\n      .setMaster(\"local\")\n      .setAppName(\"Example01\")\n    val sc = new SparkContext(conf)\n\n    sc.parallelize(1 to 100)\n        .filter(x => x % 15 == 0)\n        .map(x => fizzBuzz(x))\n        .foreach(println)\n    sc.stop()\n  }\n\n  def fizzBuzz(x: Int): String = {\n    if (x % 15 == 0) {\n      \"FizzBuzz\"\n    } else if (x % 5 == 0) {\n      \"Fizz\"\n    } else if (x % 3 == 0) {\n      \"Buzz\"\n    } else {\n      x.toString\n    }\n  }\n\nJava\u7248\n    public static void main(String[] args) throws IOException {\n        SparkConf sparkConf = new SparkConf()\n                .setMaster(\"local\")\n                .setAppName(\"Example01\");\n        JavaSparkContext sc = new JavaSparkContext(sparkConf);\n        sc.parallelize(IntStream.range(1, 100).boxed().collect(Collectors.toList()))\n                .filter(x -> x % 15 == 0)\n                .map(x -> fizzBuzz(x))\n                .foreach(x -> System.out.println(x));\n        sc.stop();\n    }\n\n    static String fizzBuzz(Integer x) {\n        if (x % 15 == 0) {\n            return \"FizzBuzz\";\n        } else if (x % 5 == 0) {\n            return \"Fizz\";\n        } else if (x % 3 == 0) {\n            return \"Buzz\";\n        } else {\n            return x.toString();\n        }\n    }\n\n\u30d6\u30ed\u30c3\u30af\u306e\u5916\u306e\u5909\u6570\u3082\u5229\u7528\u3067\u304d\u307e\u3059\u3002Java\u306e\u5834\u5408\u306fLambda\u306a\u306e\u3067\u5f53\u7136final\u307e\u305f\u306f\u4e8b\u5b9f\u4e0a\u306efinal\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u306e\u5834\u5408\u306f\u3001\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u542b\u3080\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u3066Spark\u30af\u30e9\u30b9\u30bf\u306b\u5206\u6563\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001\n\u3044\u3063\u305f\u3093\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u4ee3\u5165\u3059\u308b\u306a\u3069\u3092\u3059\u308b\u3068\u826f\u3044\u3088\u3046\u3067\u3059\u3002\nScala\u7248\nval n = 3;\nsc.parallelize(1 to 100)\n    .filter(x => x % n == 0)\n    .map(x => fizzBuzz(x))\n    .foreach(println)\nsc.stop()\n\nJava\u7248\nint n = 3;\nsc.parallelize(IntStream.range(1, 100).boxed().collect(Collectors.toList()))\n        .filter(x -> x % n == 0)\n        .map(x -> fizzBuzz(x))\n        .foreach(x -> System.out.println(x));\nsc.stop();\n\n\u81ea\u5206\u3067\u4f5c\u6210\u3057\u305f\u30af\u30e9\u30b9\u3082\u5229\u7528\u3067\u304d\u307e\u3059\u304c\u3001\u5358\u4e00\u306eJVM\u4e0a\u3067\u306f\u306a\u304f\u3001\u4ed6\u306e\u30ce\u30fc\u30c9\u3067\u52d5\u4f5c\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3068\u3044\u3046\u304bJavaBean\u306fcase class\u306b\u6bd4\u3079\u3066\u3084\u306f\u308a\u5197\u9577\u3067\u3059\u306d\u3002\nScala\n  case class Person(val name:String)\n\n  def main(args: Array[String]): Unit = {\n    val conf = new SparkConf()\n      .setMaster(\"local\")\n      .setAppName(\"Example01\")\n    val sc = new SparkContext(conf)\n\n    sc.parallelize(Array(\"Nanoha\", \"Fate\", \"Vivio\"))\n      .map(x => Person(x))\n      .foreach(println)\n    sc.stop()\n  }\n\nJava\n    static class Person implements Serializable {\n\n        private String name;\n\n        public Person(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        @Override\n        public String toString() {\n            return \"Person(\" + name + \")\";\n        }\n\n    }\n\n    public static void main(String[] args) throws IOException {\n        SparkConf sparkConf = new SparkConf()\n                .setMaster(\"local\")\n                .setAppName(\"Example01\");\n        JavaSparkContext sc = new JavaSparkContext(sparkConf);\n\n        sc.parallelize(Arrays.asList(\"Nanoha\", \"Fate\", \"Vivio\"))\n                .map(x -> new Person(x))\n                .foreach(x -> System.out.println(x));\n        sc.stop();\n    }\n\n\n\u307e\u3068\u3081\n\u307e\u305a\u306f\u52d5\u304b\u3059\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5358\u306a\u308bmap/filter/reduce\u306a\u69cb\u6587\u306a\u306e\u3067\u95a2\u6570\u578b\u306f\u3082\u3061\u308d\u3093JS\u3084Ruby\u3084\u6700\u8fd1\u306a\u3089Java\u3084C#\u306a\u4eba\u306b\u3082\u9055\u548c\u611f\u306e\u7121\u3044\u69cb\u6587\u3067\u3059\u306d\u3002\n\u3053\u306e\u300c\u666e\u901a\u306b\u66f8\u3051\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u304cSpark\u306e\u5927\u304d\u306a\u7279\u5fb4\u306e\u4e00\u3064\u3060\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\u6b21\u56de\u306f\u3001\u3082\u3046\u5c11\u3057API\u7b49\u306e\u89e3\u8aac\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u305d\u308c\u3067\u306fHappy Hacking!\n[\u524d\u56de](http://qiita.com/koduki/items/6c67db665fb59ba94c13)\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u6e08\u307e\u305b\u305f\u3068\u601d\u3046\u306e\u3067\u3001HelloWrod\u7684\u306a\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092Spark\u4e0a\u3067\u5b9f\u884c\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5358\u7d14\u306aFizzBuzz\n=================\n\n\u307e\u305a\u306f\u591a\u5c11\u3001\u4eca\u3055\u3089\u611f\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u307f\u3093\u306a\u5927\u597d\u304dFizzBuzz\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\nSpark\u7248\n\n```scala\n def main(args: Array[String]): Unit = {\n    val conf = new SparkConf()\n      .setMaster(\"local\")\n      .setAppName(\"Example01\")\n    val sc = new SparkContext(conf)\n\n    sc.parallelize(1 to 100).map(x => {\n      if (x % 15 == 0) {\n        \"FizzBuzz\"\n      } else if (x % 5 == 0) {\n        \"Fizz\"\n      } else if (x % 3 == 0) {\n        \"Buzz\"\n      } else {\n        x.toString\n      }\n    }).foreach(println)\n    sc.stop()\n  }\n```\n\nJava\u7248\n\n```java\n    public static void main(String[] args) throws IOException {\n        SparkConf sparkConf = new SparkConf()\n                .setMaster(\"local\")\n                .setAppName(\"Example01\");\n        JavaSparkContext sc = new JavaSparkContext(sparkConf);\n        sc.parallelize(IntStream.range(1, 100).boxed().collect(Collectors.toList())).map(x -> {\n            if (x % 15 == 0) {\n                return \"FizzBuzz\";\n            } else if (x % 5 == 0) {\n                return \"Fizz\";\n            } else if (x % 3 == 0) {\n                return \"Buzz\";\n            } else {\n                return x.toString();\n            }\n        }).foreach(x -> System.out.println(x));\n        sc.stop();\n    }\n```\nIDE\u304b\u3089\u5b9f\u884c\u3059\u308b\u3068\u3001\u6a19\u6e96\u51fa\u529b\u306bFizzBuzz\u306e\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u305f\u306f\u305a\u3067\u3059\u3002\n\nSparkContext\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001Spark\u304c\u8d77\u52d5\u3055\u308c\u307e\u3059\u3002\n\u4eca\u56de\u306f\u958b\u767a\u74b0\u5883\u306a\u306e\u3067SparkConf\u306esetMaster\u306b\u306f\"local\"\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u901a\u5e38\u306f\u30af\u30e9\u30b9\u30bf\u540d\u3068\u304b\u30c7\u30d7\u30ed\u30a4\u5148\u3092\u66f8\u304f\u307f\u305f\u3044\u3067\u3059\u3002\nsetAppName\u306b\u306fSpark\u4e0a\u3067\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u540d\u79f0\u3092\u4ed8\u3051\u307e\u3059\u3002\n\nsc.parallelize\u306f\u5f15\u6570\u306b\u3068\u3063\u305f\u5024\u3092RDD\u3068\u3044\u3046Spark\u3067\u306e\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u683c\u7d0d\u3057\u307e\u3059\u3002RDD\u306b\u95a2\u3057\u3066\u306f\u5225\u9014\u89e3\u8aac\u3057\u307e\u3059\u304c\u3001\n\u7c21\u5358\u306b\u8a00\u3046\u3068\u30af\u30e9\u30b9\u30bf\u4e0a\u306e\u5404\u30ce\u30fc\u30c9\u306b\u69cb\u7bc9\u3055\u308c\u305f\u5206\u6563\u30e1\u30e2\u30ea\u3067\u3059\u3002API\u7684\u306b\u306f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u3088\u3046\u306b\u632f\u821e\u3044\u307e\u3059\u3002\n\n\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306a\u3069\u306e\u5de8\u5927\u306a\u30c7\u30fc\u30bf\u304c\u30a4\u30f3\u30d7\u30c3\u30c8\u306b\u306a\u308b\u306e\u3067\u3001\nSparkContext#parallelize\u3092\u4f7f\u3046\u3053\u3068\u306f\u3001\u307e\u305a\u7121\u3044\u3067\u3057\u3087\u3046\u304c\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u305f\u308a\u632f\u308b\u821e\u3044\u3092\u691c\u8a3c\u3059\u308b\u306e\u306b\u306f\u4fbf\u5229\u3067\u3059\u3002\n\n\u3067\u3001\u521d\u671f\u5316\u306e\u90e8\u5206\u3053\u305d\u72ec\u7279\u306a\u3082\u306e\u306e\u3001map\u3084foreach\u306a\u3069\u666e\u901a\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306eAPI\u3067\u3059\u306d\uff1f\nScala\u30e6\u30fc\u30b6\u306f\u3082\u3061\u308d\u3093\u3001Java8\u306eStreamAPI\u306b\u6163\u308c\u3066\u3044\u308b\u306a\u3089\u7279\u306b\u9055\u548c\u611f\u306a\u304f\u4f7f\u3048\u308b\u306f\u305a\u3067\u3059\u3002\u3053\u306e\u8fba\u306f\u8a18\u8ff0\u65b9\u5f0f\u304c\u7279\u6b8a\u306aMapReduce\u3068\u306f\u5927\u304d\u304f\u9055\u3046\u3068\u3053\u308d\u3067\u3059\u3002\n\n\u30e1\u30bd\u30c3\u30c9\u3084\u5909\u6570\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5229\u7528\n============================\n\n\u3069\u306e\u304f\u3089\u3044\u300c\u666e\u901a\u300d\u306b\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u304d\u308b\u304b\u3092\u3082\u3046\u5c11\u3057\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u3002\n\nScala\u7248\n\n```scala\n  def main(args: Array[String]): Unit = {\n    val conf = new SparkConf()\n      .setMaster(\"local\")\n      .setAppName(\"Example01\")\n    val sc = new SparkContext(conf)\n\n    sc.parallelize(1 to 100)\n        .filter(x => x % 15 == 0)\n        .map(x => fizzBuzz(x))\n        .foreach(println)\n    sc.stop()\n  }\n\n  def fizzBuzz(x: Int): String = {\n    if (x % 15 == 0) {\n      \"FizzBuzz\"\n    } else if (x % 5 == 0) {\n      \"Fizz\"\n    } else if (x % 3 == 0) {\n      \"Buzz\"\n    } else {\n      x.toString\n    }\n  }\n```\n\nJava\u7248\n\n```java\n    public static void main(String[] args) throws IOException {\n        SparkConf sparkConf = new SparkConf()\n                .setMaster(\"local\")\n                .setAppName(\"Example01\");\n        JavaSparkContext sc = new JavaSparkContext(sparkConf);\n        sc.parallelize(IntStream.range(1, 100).boxed().collect(Collectors.toList()))\n                .filter(x -> x % 15 == 0)\n                .map(x -> fizzBuzz(x))\n                .foreach(x -> System.out.println(x));\n        sc.stop();\n    }\n    \n    static String fizzBuzz(Integer x) {\n        if (x % 15 == 0) {\n            return \"FizzBuzz\";\n        } else if (x % 5 == 0) {\n            return \"Fizz\";\n        } else if (x % 3 == 0) {\n            return \"Buzz\";\n        } else {\n            return x.toString();\n        }\n    }\n```\n\n\u30d6\u30ed\u30c3\u30af\u306e\u5916\u306e\u5909\u6570\u3082\u5229\u7528\u3067\u304d\u307e\u3059\u3002Java\u306e\u5834\u5408\u306fLambda\u306a\u306e\u3067\u5f53\u7136final\u307e\u305f\u306f\u4e8b\u5b9f\u4e0a\u306efinal\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u5909\u6570\u306e\u5834\u5408\u306f\u3001\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u542b\u3080\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3054\u3068\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u3066Spark\u30af\u30e9\u30b9\u30bf\u306b\u5206\u6563\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001\n\u3044\u3063\u305f\u3093\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306b\u4ee3\u5165\u3059\u308b\u306a\u3069\u3092\u3059\u308b\u3068\u826f\u3044\u3088\u3046\u3067\u3059\u3002\n\nScala\u7248\n\n```scala\nval n = 3;\nsc.parallelize(1 to 100)\n    .filter(x => x % n == 0)\n    .map(x => fizzBuzz(x))\n    .foreach(println)\nsc.stop()\n```\n\nJava\u7248\n\n```java\nint n = 3;\nsc.parallelize(IntStream.range(1, 100).boxed().collect(Collectors.toList()))\n        .filter(x -> x % n == 0)\n        .map(x -> fizzBuzz(x))\n        .foreach(x -> System.out.println(x));\nsc.stop();\n```\n\n\u81ea\u5206\u3067\u4f5c\u6210\u3057\u305f\u30af\u30e9\u30b9\u3082\u5229\u7528\u3067\u304d\u307e\u3059\u304c\u3001\u5358\u4e00\u306eJVM\u4e0a\u3067\u306f\u306a\u304f\u3001\u4ed6\u306e\u30ce\u30fc\u30c9\u3067\u52d5\u4f5c\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u3067\u3001\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u53ef\u80fd\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3068\u3044\u3046\u304bJavaBean\u306fcase class\u306b\u6bd4\u3079\u3066\u3084\u306f\u308a\u5197\u9577\u3067\u3059\u306d\u3002\n\nScala\n\n```scala\n  case class Person(val name:String)\n\n  def main(args: Array[String]): Unit = {\n    val conf = new SparkConf()\n      .setMaster(\"local\")\n      .setAppName(\"Example01\")\n    val sc = new SparkContext(conf)\n\n    sc.parallelize(Array(\"Nanoha\", \"Fate\", \"Vivio\"))\n      .map(x => Person(x))\n      .foreach(println)\n    sc.stop()\n  }\n```\n\nJava\n\n```java\n    static class Person implements Serializable {\n\n        private String name;\n\n        public Person(String name) {\n            this.name = name;\n        }\n\n        public String getName() {\n            return name;\n        }\n\n        @Override\n        public String toString() {\n            return \"Person(\" + name + \")\";\n        }\n\n    }\n\n    public static void main(String[] args) throws IOException {\n        SparkConf sparkConf = new SparkConf()\n                .setMaster(\"local\")\n                .setAppName(\"Example01\");\n        JavaSparkContext sc = new JavaSparkContext(sparkConf);\n\n        sc.parallelize(Arrays.asList(\"Nanoha\", \"Fate\", \"Vivio\"))\n                .map(x -> new Person(x))\n                .foreach(x -> System.out.println(x));\n        sc.stop();\n    }\n```\n\n\n\u307e\u3068\u3081\n================\n\n\u307e\u305a\u306f\u52d5\u304b\u3059\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5358\u306a\u308bmap/filter/reduce\u306a\u69cb\u6587\u306a\u306e\u3067\u95a2\u6570\u578b\u306f\u3082\u3061\u308d\u3093JS\u3084Ruby\u3084\u6700\u8fd1\u306a\u3089Java\u3084C#\u306a\u4eba\u306b\u3082\u9055\u548c\u611f\u306e\u7121\u3044\u69cb\u6587\u3067\u3059\u306d\u3002\n\u3053\u306e\u300c\u666e\u901a\u306b\u66f8\u3051\u308b\u300d\u3068\u3044\u3046\u3053\u3068\u304cSpark\u306e\u5927\u304d\u306a\u7279\u5fb4\u306e\u4e00\u3064\u3060\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u6b21\u56de\u306f\u3001\u3082\u3046\u5c11\u3057API\u7b49\u306e\u89e3\u8aac\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u305d\u308c\u3067\u306fHappy Hacking!\n", "tags": ["Spark", "Scala", "Java", "java8"]}