{"context": " More than 1 year has passed since last update.\u672c\u5bb6\nhttps://doc.rust-lang.org/book/guessing-game.html\nGuessing Game \u3067\u3059\u3002\n\u30b2\u30fc\u30e0\u3068\u3057\u3066\u6210\u308a\u7acb\u305f\u305b\u308b\u305f\u3081\u306b\u3001Guess\u5931\u6557\u6642\uff08+\u6587\u5b57\u5217\u5165\u529b\u6642\uff09\u306b\u518d\u6311\u6226\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\u518d\u6311\u6226\u306e\u305f\u3081\u306b\u5fc5\u8981\u306a\u51e6\u7406\u306f\u3001\u30eb\u30fc\u30d7\u51e6\u7406\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u3066 break \u3067\u629c\u3051\u308b\u3088\u3046\u3067\u3059\u3002\nloop {\n  break;\n}\n\n\u3053\u306e\u30b2\u30fc\u30e0\u3067\u30eb\u30fc\u30d7\u51e6\u7406\u304b\u3089\u629c\u3051\u308b\u306e\u306f\u3001Guess\u6210\u529f\u6642\u306a\u306e\u3067\u3001\u8a72\u5f53\u7b87\u6240\u306b\u633f\u5165\u3057\u307e\u3059\u3002\n\u6b21\u306b\u3001\u6587\u5b57\u5217\u5165\u529b\u6642\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\n\nmain.rs\nlet guess: u32 = guess.trim().parse()\n    .ok()\n    .expect(\"Please type a number!\");\n\n\n\u73fe\u72b6\u306e\u4e0a\u8a18\u306e\u307e\u307e\u3060\u3068\u6587\u5b57\u5217\u5165\u529b\u6642\u306b panic \u304c\u8d77\u304d\u3066\u51e6\u7406\u304c\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067(*)\u3001\u6587\u5b57\u5217\u5165\u529b\u6642\u306b\u3082\u51e6\u7406\u304c\u7d9a\u304f\u3088\u3046\u306a\u4f8b\u5916\u51e6\u7406\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n(*)\nexpect\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3057\u305f\u3002\nEnum std::result::Result\n fn expect(self, msg: &str) -> T\n Panics if the value is an Err, with a panic message including the passed message, and the content of the Err.\n\nhttps://doc.rust-lang.org/std/result/enum.Result.html\n\nmain.rs\u306e\u8a72\u5f53\u7b87\u6240\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\nmain.rs\nlet guess: u32 = match guess.trim().parse() {\n    Ok(num) => num,\n    Err(_) => continue,\n};\n\n\n\u3057\u308c\u3063\u3068\u51fa\u3066\u304d\u307e\u3059\u304c\u3001match \u304c\u51fa\u3066\u304d\u3066\u3001 parse \u306e\u5024\u3092\u53d7\u3051\u3066\u3044\u308b\u306e\u304c\u3001\u79c1\u306b\u306f\u7d50\u69cb\u308f\u304b\u3089\u306a\u3044\u51e6\u7406\u3067\u3059\u3002\nPrimitive Type str\n fn parse<F>(&self) -> Result<F, F::Err> where F: FromStr\n\nhttps://doc.rust-lang.org/std/primitive.str.html#method.parse\n\npub enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n\nhttps://doc.rust-lang.org/std/result/enum.Result.html\n\n\u672c\u6587\u306b\u3088\u308b\u3068\u3001parse \u304c\u8fd4\u3059 Result \u306e Ok \u3068 Err \u306f\u3001\u305d\u308c\u305e\u308c\u3001\u30d1\u30fc\u30b9\u3055\u308c\u305f\u6570\u5b57\u3068\u30a8\u30e9\u30fc\u30bf\u30a4\u30d7\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3057\u305f\u51e6\u7406\u304c\u5fc5\u8981\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001Ok \u306e\u51e6\u7406\u3067\u306f Ok(num) => num \u3068\u3057\u3066\u30d1\u30fc\u30b9\u3055\u308c\u305f\u6570\u5b57\u3092\u5909\u6570num\u3067\u8fd4\u3057\u3001Err \u306e\u51e6\u7406\u3067\u306f Err(_) => continue \u3068\u3057\u3066\u30a8\u30e9\u30fc\u30bf\u30a4\u30d7\u3092\u53d7\u3051\u53d6\u3089\u305a\u51e6\u7406\u3092\u7d9a\u884c\u3055\u305b\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u305d\u3093\u306a\u304b\u3093\u3060\u3067\u3067\u304d\u308b\u306e\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nmain.ru\nextern crate rand;\n\nuse std::io;\nuse std::cmp::Ordering;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin().read_line(&mut guess)\n            .ok()\n            .expect(\"failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {}\", guess);\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less    => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal   => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n\n\ncargo run \u3059\u308b\u3068 Guessing Game \u3067\u904a\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3067 Guessing Game \u306f\u304a\u7d42\u3044\u3067\u3059\u3002\n\u3064\u3065\u304f\nhttp://qiita.com/pirarucu/items/ae981398dae781b887e0\n\u672c\u5bb6\nhttps://doc.rust-lang.org/book/guessing-game.html\n\nGuessing Game \u3067\u3059\u3002\n\n\u30b2\u30fc\u30e0\u3068\u3057\u3066\u6210\u308a\u7acb\u305f\u305b\u308b\u305f\u3081\u306b\u3001Guess\u5931\u6557\u6642\uff08+\u6587\u5b57\u5217\u5165\u529b\u6642\uff09\u306b\u518d\u6311\u6226\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u518d\u6311\u6226\u306e\u305f\u3081\u306b\u5fc5\u8981\u306a\u51e6\u7406\u306f\u3001\u30eb\u30fc\u30d7\u51e6\u7406\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u3066 ```break``` \u3067\u629c\u3051\u308b\u3088\u3046\u3067\u3059\u3002\n\n```rust:\nloop {\n  break;\n}\n```\n\n\u3053\u306e\u30b2\u30fc\u30e0\u3067\u30eb\u30fc\u30d7\u51e6\u7406\u304b\u3089\u629c\u3051\u308b\u306e\u306f\u3001Guess\u6210\u529f\u6642\u306a\u306e\u3067\u3001\u8a72\u5f53\u7b87\u6240\u306b\u633f\u5165\u3057\u307e\u3059\u3002\n\n\u6b21\u306b\u3001\u6587\u5b57\u5217\u5165\u529b\u6642\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\n\n```rust:main.rs\nlet guess: u32 = guess.trim().parse()\n    .ok()\n    .expect(\"Please type a number!\");\n```\n\n\u73fe\u72b6\u306e\u4e0a\u8a18\u306e\u307e\u307e\u3060\u3068\u6587\u5b57\u5217\u5165\u529b\u6642\u306b ```panic``` \u304c\u8d77\u304d\u3066\u51e6\u7406\u304c\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067(*)\u3001\u6587\u5b57\u5217\u5165\u529b\u6642\u306b\u3082\u51e6\u7406\u304c\u7d9a\u304f\u3088\u3046\u306a\u4f8b\u5916\u51e6\u7406\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n(*)\nexpect\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3057\u305f\u3002\n\n```rust:\nEnum std::result::Result\n fn expect(self, msg: &str) -> T\n Panics if the value is an Err, with a panic message including the passed message, and the content of the Err.\n\nhttps://doc.rust-lang.org/std/result/enum.Result.html\n```\n\nmain.rs\u306e\u8a72\u5f53\u7b87\u6240\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```rust:main.rs\nlet guess: u32 = match guess.trim().parse() {\n    Ok(num) => num,\n    Err(_) => continue,\n};\n```\n\n\u3057\u308c\u3063\u3068\u51fa\u3066\u304d\u307e\u3059\u304c\u3001```match``` \u304c\u51fa\u3066\u304d\u3066\u3001 ```parse``` \u306e\u5024\u3092\u53d7\u3051\u3066\u3044\u308b\u306e\u304c\u3001\u79c1\u306b\u306f\u7d50\u69cb\u308f\u304b\u3089\u306a\u3044\u51e6\u7406\u3067\u3059\u3002\n\n```rust:\nPrimitive Type str\n fn parse<F>(&self) -> Result<F, F::Err> where F: FromStr\n\nhttps://doc.rust-lang.org/std/primitive.str.html#method.parse\n```\n```rust:\npub enum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n\nhttps://doc.rust-lang.org/std/result/enum.Result.html\n```\n\n\u672c\u6587\u306b\u3088\u308b\u3068\u3001```parse``` \u304c\u8fd4\u3059 ```Result``` \u306e Ok \u3068 Err \u306f\u3001\u305d\u308c\u305e\u308c\u3001\u30d1\u30fc\u30b9\u3055\u308c\u305f\u6570\u5b57\u3068\u30a8\u30e9\u30fc\u30bf\u30a4\u30d7\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u306b\u5bfe\u5fdc\u3057\u305f\u51e6\u7406\u304c\u5fc5\u8981\u3068\u306e\u3053\u3068\u3067\u3059\u3002\n\n\u306a\u306e\u3067\u3001Ok \u306e\u51e6\u7406\u3067\u306f ```Ok(num) => num``` \u3068\u3057\u3066\u30d1\u30fc\u30b9\u3055\u308c\u305f\u6570\u5b57\u3092\u5909\u6570num\u3067\u8fd4\u3057\u3001Err \u306e\u51e6\u7406\u3067\u306f ```Err(_) => continue``` \u3068\u3057\u3066\u30a8\u30e9\u30fc\u30bf\u30a4\u30d7\u3092\u53d7\u3051\u53d6\u3089\u305a\u51e6\u7406\u3092\u7d9a\u884c\u3055\u305b\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u305d\u3093\u306a\u304b\u3093\u3060\u3067\u3067\u304d\u308b\u306e\u304c\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```rust:main.ru\nextern crate rand;\n\nuse std::io;\nuse std::cmp::Ordering;\nuse rand::Rng;\n\nfn main() {\n    println!(\"Guess the number!\");\n\n    let secret_number = rand::thread_rng().gen_range(1, 101);\n\n    loop {\n        println!(\"Please input your guess.\");\n\n        let mut guess = String::new();\n\n        io::stdin().read_line(&mut guess)\n            .ok()\n            .expect(\"failed to read line\");\n\n        let guess: u32 = match guess.trim().parse() {\n            Ok(num) => num,\n            Err(_) => continue,\n        };\n\n        println!(\"You guessed: {}\", guess);\n\n        match guess.cmp(&secret_number) {\n            Ordering::Less    => println!(\"Too small!\"),\n            Ordering::Greater => println!(\"Too big!\"),\n            Ordering::Equal   => {\n                println!(\"You win!\");\n                break;\n            }\n        }\n    }\n}\n```\n\ncargo run \u3059\u308b\u3068 Guessing Game \u3067\u904a\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3067 Guessing Game \u306f\u304a\u7d42\u3044\u3067\u3059\u3002\n\n\u3064\u3065\u304f\nhttp://qiita.com/pirarucu/items/ae981398dae781b887e0\n", "tags": ["rust"]}