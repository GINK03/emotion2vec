{"tags": ["C#\u5c0f\u54c1\u96c6\u30b7\u30ea\u30fc\u30b9", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "C#"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u300cC#:\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9(\u3075\u308b\u3044)\u518d\u3073\u300d\u3067\u7d20\u6570\u3092\u5217\u6319\u3059\u308b\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3057\u305f\u304c\u3001\u3042\u308b\u6b63\u306e\u6574\u6570\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u3092\u77e5\u308a\u305f\u3044\u3068\u3044\u3046\u6642\u306b\u306f\u3001\u3061\u3087\u3063\u3068\u4f7f\u3044\u52dd\u624b\u304c\u60aa\u3044\u3067\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u7d20\u6570\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u30e1\u30bd\u30c3\u30c9\u3082\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u3055\u3059\u304c\u306b\u30012,3,5,7,9,11,13,15,17\u3068\u8a66\u3057\u5272\u308a\u3059\u308b\u306e\u3067\u306f\u80fd\u304c\u7121\u3055\u3059\u304e\u308b\u306e\u3067\u3001\u8abf\u3079\u3066\u307f\u305f\u3068\u3053\u308d\u305f\u3001\u30df\u30e9\u30fc\u30fb\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3053\u3068\u3092\u77e5\u308a\u307e\u3057\u305f\u3002\n\n\u6700\u521d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3(\u30df\u30e9\u30fc\u30fb\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5)\n\u3044\u304f\u3064\u304b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u66f8\u3044\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\nIsPrimeMillarRrabin.cs\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Numerics;\n\nnamespace Gushwell.Etude {\n    public static class PrimeNumber {\n\n        static long[] seedPrimes = {\n          /*1,2,3,4, 5, 6, 7  8, 9,10,11,12,13,14,15,*/\n            2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97\n        };\n\n        public static bool IsPrimeMillarRrabin(long num) {\n            if (num <= 1)\n                return false;\n            if ((num & 1) == 0)\n                return num == 2;\n\n            if (num < 100 && seedPrimes.Contains((int)num))\n                return true;\n\n            var WitnessMax = GetWitnessMax(num);\n\n            long d = num - 1;\n            long s = 0;\n            while ((d & 1) == 0) {\n                s++;\n                d >>= 1;\n            }\n            foreach (var w in seedPrimes.Take(WitnessMax)) {\n                if (!MillarRrabin(num, s, d, w))\n                    return false;\n            }\n            return true;\n        }\n\n        private static int GetWitnessMax(long num) {\n            if (num < 2047)\n                return 1;\n            if (num < 1373653)\n                return 2;\n            if (num < 25326001)\n                return 3;\n            if (num < 3215031751)\n                return 4;\n            if (num < 2152302898747)\n                return 5;\n            if (num < 3474749660383)\n                return 6;\n            if (num < 341550071728321)\n                return 7;\n            if (num < 3825123056546413051)\n                return 9;\n            return 12;\n        }\n\n        private static bool MillarRrabin(long num, long s, long d, long witness) {\n            long x = ModPow(witness, d, num);\n            if (x == 1)\n                return true;\n            for (long r = 0; r < s; r++) {\n                if (x == num - 1)\n                    return true;\n                BigInteger rem;\n                BigInteger.DivRem(BigInteger.Multiply(x,x), num, out rem);\n                x = (long)(rem);\n            }\n            return false;\n        }\n\n        private static long ModPow(long baseValue, long exponent, long modulus) {\n            return (long)BigInteger.ModPow(baseValue, exponent, modulus);\n        }\n\n    }\n}\n\n\nModPow\u306e\u5e95\u306f\u30012,3,5,7,11,13,17,19,23,29,31,37\u307e\u3067\u8abf\u3079\u308c\u3070\u30012^64 \u307e\u3067\u306e\u7d20\u6570\u304c\u6c7a\u5b9a\u7684\u7d20\u6570\u5224\u5b9a\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\n\u3068\u3053\u308d\u3069\u3053\u308d\u3001BigInteger\u4f7f\u3063\u3066\u307e\u3059\u304c\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u3068\u3001long\u578b\u306eSqrt\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u306e\u82e6\u8089\u306e\u7b56\u3067\u3059\u3002\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u826f\u3044\u65b9\u6cd5\u304c\u601d\u3044\u6d6e\u304b\u3073\u307e\u305b\u3093...\n\n\u529b\u6280\u306e\u65b9\u6cd5\u3068\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\n\u3053\u306eIsPrimeMillarRrabin\u30e1\u30bd\u30c3\u30c9\u306e\u691c\u8a3c\u306e\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3082\u66f8\u304d\u307e\u3057\u305f\u3002\n\u5947\u6570\u3059\u3079\u3066\u3092\u8a66\u3057\u5272\u308a\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u3067\u304d\u308b\u3060\u3051\u8a66\u3057\u5272\u308a\u306e\u6570\u3092\u6e1b\u3089\u3059\u5de5\u592b\u3092\u3057\u3066\u901f\u5ea6\u3092\u4e0a\u3052\u3066\u3044\u307e\u3059\u3002\n\nIsPrimeBruteforce.cs\npublic static bool IsPrimeBruteforce(long num) {\n    if (num == 1)\n        return false;\n    if (num != 2 && num % 2 == 0)\n        return false;\n    if (num != 3 && num % 3 == 0)\n        return false;\n    if (num != 5 && num % 5 == 0)\n        return false;\n    long i = 0;\n    while (true) {\n        foreach (var p in seedPrimes.Skip(3).Take(8)) {\n            // 30m+2, 30m+3, 30m+4, 30m+5, 30m+6\u300130m+8\u300130m+9\u300130m+12... \u306f\u5272\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n            var primeCandidte = p + i;\n            if (primeCandidte > Math.Sqrt(num))\n                return true;\n            if (num % (primeCandidte) == 0)\n                return false;\n        }\n        i += 30;\n    }\n}\n\n\n\u3075\u305f\u3064\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u3092\u6bd4\u8f03\u3059\u308b\u30b3\u30fc\u30c9\u3067\u78ba\u8a8d\u3057\u305f\u3068\u3053\u308d\u3001\u554f\u984c\u306a\u304f\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001IsPrimeMillarRrabin\u30e1\u30bd\u30c3\u30c9\u306f\u672c\u5f53\u306b\u901f\u3044\u3093\u3060\u308d\u3046\u304b\u3068\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n1-100\u4e07\u307e\u3067\u306e\u6574\u6570\u3067\u7d20\u6570\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\u3042\u308c\u3001IsPrimeBruteforce\u306e\u65b9\u304c\u901f\u3044\u3067\u3059\u3002\n\n\n\n\u30e1\u30bd\u30c3\u30c9\n\u7d50\u679c\n\u901f\u5ea6\n\n\n\n\nIsPrimeBruteforce\n78498\n671 \u30df\u30ea\u79d2\n\n\nIsPrimeMillarRrabin\n78498\n921 \u30df\u30ea\u79d2\n\n\n\n\u3069\u3053\u304b\u3067\u901f\u3055\u304c\u9006\u8ee2\u3059\u308b\u306f\u305a\u3068\u601d\u3044\u8abf\u3079\u305f\u3089\u3001\u3060\u3044\u305f\u30442,000,000\u304f\u3089\u3044\u306e\u5024\u306e\u7d20\u6570\u5224\u5b9a\u3067\u901f\u5ea6\u304c\u9006\u8ee2\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u300150,000,000,000\u304b\u308950,000,100,000\u307e\u3067\u306e\u6574\u6570\u3067\u7d20\u6570\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\u50d5\u306ePC\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u3067\u5727\u5012\u7684\u306b\u30df\u30e9\u30fc\u30fb\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5\u306e\u65b9\u304c\u901f\u3044\u3068\u3044\u3046\u7d50\u679c\u304c\u3067\u307e\u3057\u305f\u3002\n\n\n\n\u30e1\u30bd\u30c3\u30c9\n\u7d50\u679c\n\u901f\u5ea6\n\n\n\n\nIsPrimeBruteforce\n4097\n115930 \u30df\u30ea\u79d2\n\n\nIsPrimeMillarRrabin\n4097\n665 \u30df\u30ea\u79d2\n\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u6700\u7d42\u7684\u306b\u306f\u3001IsPrime\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u578b\u3068\u3057\u307e\u3057\u305f\u3002\n\n\u6700\u7d42\u7248IsPrime\u30e1\u30bd\u30c3\u30c9\u3000(\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u7248)\n\nIsPrime.cs\npublic static class PrimeNumber {\n\n    static long[] seedPrimes = {\n      /*1,2,3,4, 5, 6, 7  8, 9,10,11,12,13,14,15,*/\n        2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97\n    };\n\n    public static bool IsPrime(long num) {\n        if (num == 1)\n            return false;\n        if (seedPrimes.Contains(num))\n            return true;\n        if (seedPrimes.Any(x => num % x == 0))\n            return false;\n\n        return (num < 2000000) ? IsPrimeBruteforce(num) : IsPrimeMillarRrabin(num);\n    }\n\n    private static bool IsPrimeBruteforce(long num) {\n        if (num == 1)\n            return false;\n        if (num != 2 && num % 2 == 0)\n            return false;\n        if (num != 3 && num % 3 == 0)\n            return false;\n        if (num != 5 && num % 5 == 0)\n            return false;\n        long i = 0;\n        while (true) {\n            foreach (var p in seedPrimes.Skip(3).Take(8)) {\n                // 30m+2, 30m+3, 30m+4, 30m+5, 30m+6\u300130m+8\u300130m+9\u300130m+12... \u306f\u5272\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n                var primeCandidte = p + i;\n                if (primeCandidte > Math.Sqrt(num))\n                    return true;\n                if (num % (primeCandidte) == 0)\n                    return false;\n            }\n            i += 30;\n        }\n    }\n\n    private static bool IsPrimeMillarRrabin(long num) {\n        if (num <= 1)\n            return false;\n        if ((num & 1) == 0)\n            return num == 2;\n\n        if (num < 100 && seedPrimes.Contains((int)num))\n            return true;\n\n        var WitnessMax = GetWitnessMax(num);\n\n        long d = num - 1;\n        long s = 0;\n        while ((d & 1) == 0) {\n            s++;\n            d >>= 1;\n        }\n        foreach (var w in seedPrimes.Take(WitnessMax)) {\n            if (!MillarRrabin(num, s, d, w))\n                return false;\n        }\n        return true;\n    }\n\n\n    private static int GetWitnessMax(long num) {\n        if (num < 2047)\n            return 1;\n        if (num < 1373653)\n            return 2;\n        if (num < 25326001)\n            return 3;\n        if (num < 3215031751)\n            return 4;\n        if (num < 2152302898747)\n            return 5;\n        if (num < 3474749660383)\n            return 6;\n        if (num < 341550071728321)\n            return 7;\n        if (num < 3825123056546413051)\n            return 9;\n        return 12;\n    }\n\n\n    private static bool MillarRrabin(long num, long s, long d, long witness) {\n        long x = ModPow(witness, d, num);\n        if (x == 1)\n            return true;\n        for (long r = 0; r < s; r++) {\n            if (x == num - 1)\n                return true;\n            BigInteger rem;\n            BigInteger.DivRem(BigInteger.Multiply(x, x), num, out rem);\n            x = (long)(rem);\n        }\n        return false;\n    }\n\n    private static long ModPow(long baseValue, long exponent, long modulus) {\n        return (long)BigInteger.ModPow(baseValue, exponent, modulus);\n    }\n\n}\n\n\nIsPrime\u306e\u524d\u534a\u3067\u3082\u7d20\u6570\u5224\u5b9a\u306e\u4e00\u90e8\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001IsPrimeBruteforce\u3001IsPrimeMillarRrabin\u3067\u306f\u4e00\u90e8\u4e0d\u8981\u306a\u5224\u65ad\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001IsPrimeBruteforce\u3001IsPrimeMillarRrabin\u306f\u3001\u305d\u308c\u5358\u72ec\u3067\u7d20\u6570\u5224\u5b9a\u304c\u6210\u308a\u7acb\u3064\u3088\u3046\u306b\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u306f\u3058\u3081\u306b\n\n\u300c[C#:\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9(\u3075\u308b\u3044)\u518d\u3073](http://qiita.com/gushwell/items/6370e32371e983358519)\u300d\u3067\u7d20\u6570\u3092\u5217\u6319\u3059\u308b\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3057\u305f\u304c\u3001\u3042\u308b\u6b63\u306e\u6574\u6570\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u3092\u77e5\u308a\u305f\u3044\u3068\u3044\u3046\u6642\u306b\u306f\u3001\u3061\u3087\u3063\u3068\u4f7f\u3044\u52dd\u624b\u304c\u60aa\u3044\u3067\u3059\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u7d20\u6570\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\u30e1\u30bd\u30c3\u30c9\u3082\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u3055\u3059\u304c\u306b\u30012,3,5,7,9,11,13,15,17\u3068\u8a66\u3057\u5272\u308a\u3059\u308b\u306e\u3067\u306f\u80fd\u304c\u7121\u3055\u3059\u304e\u308b\u306e\u3067\u3001\u8abf\u3079\u3066\u307f\u305f\u3068\u3053\u308d\u305f\u3001[\u30df\u30e9\u30fc\u30fb\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5](https://ja.wikipedia.org/wiki/\u30df\u30e9\u30fc\u2013\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5)\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3053\u3068\u3092\u77e5\u308a\u307e\u3057\u305f\u3002\n\n## \u6700\u521d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3(\u30df\u30e9\u30fc\u30fb\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5)\n\n\u3044\u304f\u3064\u304b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u66f8\u3044\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n\n```csharp:IsPrimeMillarRrabin.cs\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Numerics;\n\nnamespace Gushwell.Etude {\n    public static class PrimeNumber {\n\n        static long[] seedPrimes = {\n          /*1,2,3,4, 5, 6, 7  8, 9,10,11,12,13,14,15,*/\n            2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97\n        };\n\n        public static bool IsPrimeMillarRrabin(long num) {\n            if (num <= 1)\n                return false;\n            if ((num & 1) == 0)\n                return num == 2;\n\n            if (num < 100 && seedPrimes.Contains((int)num))\n                return true;\n\n            var WitnessMax = GetWitnessMax(num);\n\n            long d = num - 1;\n            long s = 0;\n            while ((d & 1) == 0) {\n                s++;\n                d >>= 1;\n            }\n            foreach (var w in seedPrimes.Take(WitnessMax)) {\n                if (!MillarRrabin(num, s, d, w))\n                    return false;\n            }\n            return true;\n        }\n\n        private static int GetWitnessMax(long num) {\n            if (num < 2047)\n                return 1;\n            if (num < 1373653)\n                return 2;\n            if (num < 25326001)\n                return 3;\n            if (num < 3215031751)\n                return 4;\n            if (num < 2152302898747)\n                return 5;\n            if (num < 3474749660383)\n                return 6;\n            if (num < 341550071728321)\n                return 7;\n            if (num < 3825123056546413051)\n                return 9;\n            return 12;\n        }\n\n        private static bool MillarRrabin(long num, long s, long d, long witness) {\n            long x = ModPow(witness, d, num);\n            if (x == 1)\n                return true;\n            for (long r = 0; r < s; r++) {\n                if (x == num - 1)\n                    return true;\n                BigInteger rem;\n                BigInteger.DivRem(BigInteger.Multiply(x,x), num, out rem);\n                x = (long)(rem);\n            }\n            return false;\n        }\n\n        private static long ModPow(long baseValue, long exponent, long modulus) {\n            return (long)BigInteger.ModPow(baseValue, exponent, modulus);\n        }\n\n    }\n}\n```\n\n\nModPow\u306e\u5e95\u306f\u30012,3,5,7,11,13,17,19,23,29,31,37\u307e\u3067\u8abf\u3079\u308c\u3070\u30012^64 \u307e\u3067\u306e\u7d20\u6570\u304c\u6c7a\u5b9a\u7684\u7d20\u6570\u5224\u5b9a\u3068\u3057\u3066\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3068\u3053\u308d\u3069\u3053\u308d\u3001BigInteger\u4f7f\u3063\u3066\u307e\u3059\u304c\u3001\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u3068\u3001long\u578b\u306eSqrt\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u306e\u82e6\u8089\u306e\u7b56\u3067\u3059\u3002\u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u826f\u3044\u65b9\u6cd5\u304c\u601d\u3044\u6d6e\u304b\u3073\u307e\u305b\u3093...\n\n## \u529b\u6280\u306e\u65b9\u6cd5\u3068\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\n\n\u3053\u306eIsPrimeMillarRrabin\u30e1\u30bd\u30c3\u30c9\u306e\u691c\u8a3c\u306e\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3082\u66f8\u304d\u307e\u3057\u305f\u3002\n\u5947\u6570\u3059\u3079\u3066\u3092\u8a66\u3057\u5272\u308a\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u3067\u304d\u308b\u3060\u3051\u8a66\u3057\u5272\u308a\u306e\u6570\u3092\u6e1b\u3089\u3059\u5de5\u592b\u3092\u3057\u3066\u901f\u5ea6\u3092\u4e0a\u3052\u3066\u3044\u307e\u3059\u3002\n\n```csharp:IsPrimeBruteforce.cs\npublic static bool IsPrimeBruteforce(long num) {\n    if (num == 1)\n        return false;\n    if (num != 2 && num % 2 == 0)\n        return false;\n    if (num != 3 && num % 3 == 0)\n        return false;\n    if (num != 5 && num % 5 == 0)\n        return false;\n    long i = 0;\n    while (true) {\n        foreach (var p in seedPrimes.Skip(3).Take(8)) {\n            // 30m+2, 30m+3, 30m+4, 30m+5, 30m+6\u300130m+8\u300130m+9\u300130m+12... \u306f\u5272\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n            var primeCandidte = p + i;\n            if (primeCandidte > Math.Sqrt(num))\n                return true;\n            if (num % (primeCandidte) == 0)\n                return false;\n        }\n        i += 30;\n    }\n}\n```\n\n\u3075\u305f\u3064\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u3092\u6bd4\u8f03\u3059\u308b\u30b3\u30fc\u30c9\u3067\u78ba\u8a8d\u3057\u305f\u3068\u3053\u308d\u3001\u554f\u984c\u306a\u304f\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001IsPrimeMillarRrabin\u30e1\u30bd\u30c3\u30c9\u306f\u672c\u5f53\u306b\u901f\u3044\u3093\u3060\u308d\u3046\u304b\u3068\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n1-100\u4e07\u307e\u3067\u306e\u6574\u6570\u3067\u7d20\u6570\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\u3042\u308c\u3001IsPrimeBruteforce\u306e\u65b9\u304c\u901f\u3044\u3067\u3059\u3002\n\n| \u30e1\u30bd\u30c3\u30c9             | \u7d50\u679c   | \u901f\u5ea6        | \n|----------------------|--------|------------:|\n| IsPrimeBruteforce    | 78498  | 671 \u30df\u30ea\u79d2  |\n| IsPrimeMillarRrabin  | 78498  | 921 \u30df\u30ea\u79d2  |\n\n\n\u3069\u3053\u304b\u3067\u901f\u3055\u304c\u9006\u8ee2\u3059\u308b\u306f\u305a\u3068\u601d\u3044\u8abf\u3079\u305f\u3089\u3001\u3060\u3044\u305f\u30442,000,000\u304f\u3089\u3044\u306e\u5024\u306e\u7d20\u6570\u5224\u5b9a\u3067\u901f\u5ea6\u304c\u9006\u8ee2\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u300150,000,000,000\u304b\u308950,000,100,000\u307e\u3067\u306e\u6574\u6570\u3067\u7d20\u6570\u304c\u3044\u304f\u3064\u3042\u308b\u304b\u3092\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u8abf\u3079\u305f\u3068\u3053\u308d\u3001\u50d5\u306ePC\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u3067\u5727\u5012\u7684\u306b\u30df\u30e9\u30fc\u30fb\u30e9\u30d3\u30f3\u7d20\u6570\u5224\u5b9a\u6cd5\u306e\u65b9\u304c\u901f\u3044\u3068\u3044\u3046\u7d50\u679c\u304c\u3067\u307e\u3057\u305f\u3002\n\n| \u30e1\u30bd\u30c3\u30c9             | \u7d50\u679c  | \u901f\u5ea6          |\n|----------------------|-------|--------------:|\n| IsPrimeBruteforce    | 4097  | 115930 \u30df\u30ea\u79d2 |\n| IsPrimeMillarRrabin  | 4097  |    665 \u30df\u30ea\u79d2 |\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u6700\u7d42\u7684\u306b\u306f\u3001IsPrime\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u578b\u3068\u3057\u307e\u3057\u305f\u3002\n\n\n## \u6700\u7d42\u7248IsPrime\u30e1\u30bd\u30c3\u30c9\u3000(\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u7248)\n\n```csharp:IsPrime.cs\npublic static class PrimeNumber {\n\n    static long[] seedPrimes = {\n      /*1,2,3,4, 5, 6, 7  8, 9,10,11,12,13,14,15,*/\n        2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97\n    };\n\n    public static bool IsPrime(long num) {\n        if (num == 1)\n            return false;\n        if (seedPrimes.Contains(num))\n            return true;\n        if (seedPrimes.Any(x => num % x == 0))\n            return false;\n\n        return (num < 2000000) ? IsPrimeBruteforce(num) : IsPrimeMillarRrabin(num);\n    }\n\n    private static bool IsPrimeBruteforce(long num) {\n        if (num == 1)\n            return false;\n        if (num != 2 && num % 2 == 0)\n            return false;\n        if (num != 3 && num % 3 == 0)\n            return false;\n        if (num != 5 && num % 5 == 0)\n            return false;\n        long i = 0;\n        while (true) {\n            foreach (var p in seedPrimes.Skip(3).Take(8)) {\n                // 30m+2, 30m+3, 30m+4, 30m+5, 30m+6\u300130m+8\u300130m+9\u300130m+12... \u306f\u5272\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n                var primeCandidte = p + i;\n                if (primeCandidte > Math.Sqrt(num))\n                    return true;\n                if (num % (primeCandidte) == 0)\n                    return false;\n            }\n            i += 30;\n        }\n    }\n\n    private static bool IsPrimeMillarRrabin(long num) {\n        if (num <= 1)\n            return false;\n        if ((num & 1) == 0)\n            return num == 2;\n\n        if (num < 100 && seedPrimes.Contains((int)num))\n            return true;\n\n        var WitnessMax = GetWitnessMax(num);\n\n        long d = num - 1;\n        long s = 0;\n        while ((d & 1) == 0) {\n            s++;\n            d >>= 1;\n        }\n        foreach (var w in seedPrimes.Take(WitnessMax)) {\n            if (!MillarRrabin(num, s, d, w))\n                return false;\n        }\n        return true;\n    }\n\n\n    private static int GetWitnessMax(long num) {\n        if (num < 2047)\n            return 1;\n        if (num < 1373653)\n            return 2;\n        if (num < 25326001)\n            return 3;\n        if (num < 3215031751)\n            return 4;\n        if (num < 2152302898747)\n            return 5;\n        if (num < 3474749660383)\n            return 6;\n        if (num < 341550071728321)\n            return 7;\n        if (num < 3825123056546413051)\n            return 9;\n        return 12;\n    }\n\n\n    private static bool MillarRrabin(long num, long s, long d, long witness) {\n        long x = ModPow(witness, d, num);\n        if (x == 1)\n            return true;\n        for (long r = 0; r < s; r++) {\n            if (x == num - 1)\n                return true;\n            BigInteger rem;\n            BigInteger.DivRem(BigInteger.Multiply(x, x), num, out rem);\n            x = (long)(rem);\n        }\n        return false;\n    }\n\n    private static long ModPow(long baseValue, long exponent, long modulus) {\n        return (long)BigInteger.ModPow(baseValue, exponent, modulus);\n    }\n\n}\n```\n\nIsPrime\u306e\u524d\u534a\u3067\u3082\u7d20\u6570\u5224\u5b9a\u306e\u4e00\u90e8\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001IsPrimeBruteforce\u3001IsPrimeMillarRrabin\u3067\u306f\u4e00\u90e8\u4e0d\u8981\u306a\u5224\u65ad\u3092\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001IsPrimeBruteforce\u3001IsPrimeMillarRrabin\u306f\u3001\u305d\u308c\u5358\u72ec\u3067\u7d20\u6570\u5224\u5b9a\u304c\u6210\u308a\u7acb\u3064\u3088\u3046\u306b\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n\n        \n                        \n        \n"}