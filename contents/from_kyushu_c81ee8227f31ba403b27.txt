{"tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u30d0\u30b9\u4ee3\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f15\u5206\u7a0b\u5ea6\u3002\n\u4eca\u56de\u306f\u7279\u306b\u8003\u3048\u308b\u3053\u3068\u3082\u306a\u304b\u3063\u305f\u306e\u3067\u3042\u3063\u3055\u308a\u3068\u89e3\u304f\u3053\u3068\u304c\u51fa\u6765\u305f\u3002\n\u5e7c\u51502\u540d\u307e\u3067\u3092\u7121\u6599\u3068\u3059\u308b\u90e8\u5206\u304c\u6c17\u306b\u98df\u308f\u306a\u3044\u304c\u3001\u30b3\u30fc\u30c9\u304c\u77ed\u304f\u306a\u308b\u4ee3\u308f\u308a\u306b\u30eb\u30fc\u30d7\u56de\u6570\u304c\u5897\u3048\u3066\u3057\u307e\u3046\u5b9f\u88c5\u3070\u304b\u308a\u304c\u601d\u3044\u6d6e\u304b\u3093\u3060\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u3053\u306e\u307e\u307e\u3068\u3059\u308b\u3002\nclass BusFare\n  attr_reader :fare\n  BASE_FARE_RATE_TABLE = {\n    A: 1,\n    C: 0.5,\n    I: 0.5\n  }\n  FARE_RATE_TABLE = {\n    n: 1,\n    w: 0.5,\n    p: 0\n  }\n\n  def initialize input\n    fare, passengers = input.split \":\"\n    @section_fare = fare.to_i\n    @passengers  = passengers.split \",\"\n    @fare = 0\n  end\n\n  def calc\n    passengers = @passengers.dup\n    passengers.select{|pas| pas[0] == \"A\"}.size.times{\n      2.times{\n        if index = passengers.index(\"In\")\n          passengers.delete_at index\n        elsif index = passengers.index(\"Iw\")\n          passengers.delete_at index\n        end\n      }\n    }\n    @fare = passengers.inject(0){|f, pas|\n      f + fraction_up(fraction_up(@section_fare * BASE_FARE_RATE_TABLE[pas[0].to_sym]) * FARE_RATE_TABLE[pas[1].to_sym])\n    }\n  end\n\n  private\n\n  def fraction_up n\n    ((n % 10 > 0) ? (n - (n % 10)) + 10 : n).to_i\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"210:Cn,In,Iw,Ap,Iw\", \"170\" );\n/*1*/ test( \"220:Cp,In\", \"110\" );\n/*2*/ test( \"230:Cw,In,Iw\", \"240\" );\n/*3*/ test( \"240:In,An,In\", \"240\" );\n/*4*/ test( \"250:In,In,Aw,In\", \"260\" );\n/*5*/ test( \"260:In,In,In,In,Ap\", \"260\" );\n/*6*/ test( \"270:In,An,In,In,Ip\", \"410\" );\n/*7*/ test( \"280:Aw,In,Iw,In\", \"210\" );\n/*8*/ test( \"200:An\", \"200\" );\n/*9*/ test( \"210:Iw\", \"60\" );\n/*10*/ test( \"220:Ap\", \"0\" );\n/*11*/ test( \"230:Cp\", \"0\" );\n/*12*/ test( \"240:Cw\", \"60\" );\n/*13*/ test( \"250:In\", \"130\" );\n/*14*/ test( \"260:Cn\", \"130\" );\n/*15*/ test( \"270:Ip\", \"0\" );\n/*16*/ test( \"280:Aw\", \"140\" );\n/*17*/ test( \"1480:In,An,In,In,In,Iw,Cp,Cw,In,Aw,In,In,Iw,Cn,Aw,Iw\", \"5920\" );\n/*18*/ test( \"630:Aw,Cw,Iw,An,An\", \"1740\" );\n/*19*/ test( \"340:Cn,Cn,Ip,Ap\", \"340\" );\n/*20*/ test( \"240:Iw,Ap,In,Iw,Aw\", \"120\" );\n/*21*/ test( \"800:Cw,An,Cn,Aw,Ap\", \"1800\" );\n/*22*/ test( \"1210:An,Ip,In,Iw,An,Iw,Iw,An,Iw,Iw\", \"3630\" );\n/*23*/ test( \"530:An,Cw,Cw\", \"810\" );\n/*24*/ test( \"170:Aw,Iw,Ip\", \"90\" );\n/*25*/ test( \"150:In,Ip,Ip,Iw,In,Iw,Iw,In,An,Iw,Aw,Cw,Iw,Cw,An,Cp,Iw\", \"580\" );\n/*26*/ test( \"420:Cn,Cw,Cp\", \"320\" );\n/*27*/ test( \"690:Cw,In,An,Cp,Cn,In\", \"1220\" );\n/*28*/ test( \"590:Iw,Iw,Cn,Iw,Aw,In,In,Ip,Iw,Ip,Aw\", \"1200\" );\n/*29*/ test( \"790:Cw,Cn,Cn\", \"1000\" );\n/*30*/ test( \"1220:In,In,An,An,In,Iw,Iw,In,In,Ip,In,An,Iw\", \"4590\" );\n/*31*/ test( \"570:Cw,Cn,Cp\", \"440\" );\n/*32*/ test( \"310:Cn,Cw,An,An,Iw,Cp,Cw,Cn,Iw\", \"1100\" );\n/*33*/ test( \"910:Aw,In,Iw,Iw,Iw,Iw,Iw,An,Cw,In\", \"2290\" );\n/*34*/ test( \"460:Iw,Cw,Cw,Cn\", \"590\" );\n/*35*/ test( \"240:Iw,Iw,In,Iw,In,In,Cn,In,An\", \"780\" );\n/*36*/ test( \"1240:In,In,In,Ap,In,Cw,Iw,Iw,Iw,Aw,Cw\", \"2170\" );\n/*37*/ test( \"1000:Iw,Ip,In,An,In,In,In,An,In,Iw,In,In,Iw,In,Iw,Iw,Iw,An\", \"5500\" );\n/*38*/ test( \"180:In,Aw,Ip,Iw,In,Aw,In,Iw,Iw,In\", \"330\" );\n/*39*/ test( \"440:In,Ip,Cp,Aw,Iw,In,An\", \"660\" );\n/*40*/ test( \"1270:Ap,In,An,Ip,In,Ip,Ip\", \"1270\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'BusFare' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);$/).to_a\n    bus = BusFare.new input\n    bus.calc\n    it input do\n      assert_equal expect, bus.fare.to_s\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u30d0\u30b9\u4ee3](http://nabetani.sakura.ne.jp/hena/ord9busfare/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f15\u5206\u7a0b\u5ea6\u3002\n\n\u4eca\u56de\u306f\u7279\u306b\u8003\u3048\u308b\u3053\u3068\u3082\u306a\u304b\u3063\u305f\u306e\u3067\u3042\u3063\u3055\u308a\u3068\u89e3\u304f\u3053\u3068\u304c\u51fa\u6765\u305f\u3002\n\u5e7c\u51502\u540d\u307e\u3067\u3092\u7121\u6599\u3068\u3059\u308b\u90e8\u5206\u304c\u6c17\u306b\u98df\u308f\u306a\u3044\u304c\u3001\u30b3\u30fc\u30c9\u304c\u77ed\u304f\u306a\u308b\u4ee3\u308f\u308a\u306b\u30eb\u30fc\u30d7\u56de\u6570\u304c\u5897\u3048\u3066\u3057\u307e\u3046\u5b9f\u88c5\u3070\u304b\u308a\u304c\u601d\u3044\u6d6e\u304b\u3093\u3060\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u3053\u306e\u307e\u307e\u3068\u3059\u308b\u3002\n\n```ruby\nclass BusFare\n  attr_reader :fare\n  BASE_FARE_RATE_TABLE = {\n    A: 1,\n    C: 0.5,\n    I: 0.5\n  }\n  FARE_RATE_TABLE = {\n    n: 1,\n    w: 0.5,\n    p: 0\n  }\n\n  def initialize input\n    fare, passengers = input.split \":\"\n    @section_fare = fare.to_i\n    @passengers  = passengers.split \",\"\n    @fare = 0\n  end\n\n  def calc\n    passengers = @passengers.dup\n    passengers.select{|pas| pas[0] == \"A\"}.size.times{\n      2.times{\n        if index = passengers.index(\"In\")\n          passengers.delete_at index\n        elsif index = passengers.index(\"Iw\")\n          passengers.delete_at index\n        end\n      }\n    }\n    @fare = passengers.inject(0){|f, pas|\n      f + fraction_up(fraction_up(@section_fare * BASE_FARE_RATE_TABLE[pas[0].to_sym]) * FARE_RATE_TABLE[pas[1].to_sym])\n    }\n  end\n\n  private\n\n  def fraction_up n\n    ((n % 10 > 0) ? (n - (n % 10)) + 10 : n).to_i\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"210:Cn,In,Iw,Ap,Iw\", \"170\" );\n/*1*/ test( \"220:Cp,In\", \"110\" );\n/*2*/ test( \"230:Cw,In,Iw\", \"240\" );\n/*3*/ test( \"240:In,An,In\", \"240\" );\n/*4*/ test( \"250:In,In,Aw,In\", \"260\" );\n/*5*/ test( \"260:In,In,In,In,Ap\", \"260\" );\n/*6*/ test( \"270:In,An,In,In,Ip\", \"410\" );\n/*7*/ test( \"280:Aw,In,Iw,In\", \"210\" );\n/*8*/ test( \"200:An\", \"200\" );\n/*9*/ test( \"210:Iw\", \"60\" );\n/*10*/ test( \"220:Ap\", \"0\" );\n/*11*/ test( \"230:Cp\", \"0\" );\n/*12*/ test( \"240:Cw\", \"60\" );\n/*13*/ test( \"250:In\", \"130\" );\n/*14*/ test( \"260:Cn\", \"130\" );\n/*15*/ test( \"270:Ip\", \"0\" );\n/*16*/ test( \"280:Aw\", \"140\" );\n/*17*/ test( \"1480:In,An,In,In,In,Iw,Cp,Cw,In,Aw,In,In,Iw,Cn,Aw,Iw\", \"5920\" );\n/*18*/ test( \"630:Aw,Cw,Iw,An,An\", \"1740\" );\n/*19*/ test( \"340:Cn,Cn,Ip,Ap\", \"340\" );\n/*20*/ test( \"240:Iw,Ap,In,Iw,Aw\", \"120\" );\n/*21*/ test( \"800:Cw,An,Cn,Aw,Ap\", \"1800\" );\n/*22*/ test( \"1210:An,Ip,In,Iw,An,Iw,Iw,An,Iw,Iw\", \"3630\" );\n/*23*/ test( \"530:An,Cw,Cw\", \"810\" );\n/*24*/ test( \"170:Aw,Iw,Ip\", \"90\" );\n/*25*/ test( \"150:In,Ip,Ip,Iw,In,Iw,Iw,In,An,Iw,Aw,Cw,Iw,Cw,An,Cp,Iw\", \"580\" );\n/*26*/ test( \"420:Cn,Cw,Cp\", \"320\" );\n/*27*/ test( \"690:Cw,In,An,Cp,Cn,In\", \"1220\" );\n/*28*/ test( \"590:Iw,Iw,Cn,Iw,Aw,In,In,Ip,Iw,Ip,Aw\", \"1200\" );\n/*29*/ test( \"790:Cw,Cn,Cn\", \"1000\" );\n/*30*/ test( \"1220:In,In,An,An,In,Iw,Iw,In,In,Ip,In,An,Iw\", \"4590\" );\n/*31*/ test( \"570:Cw,Cn,Cp\", \"440\" );\n/*32*/ test( \"310:Cn,Cw,An,An,Iw,Cp,Cw,Cn,Iw\", \"1100\" );\n/*33*/ test( \"910:Aw,In,Iw,Iw,Iw,Iw,Iw,An,Cw,In\", \"2290\" );\n/*34*/ test( \"460:Iw,Cw,Cw,Cn\", \"590\" );\n/*35*/ test( \"240:Iw,Iw,In,Iw,In,In,Cn,In,An\", \"780\" );\n/*36*/ test( \"1240:In,In,In,Ap,In,Cw,Iw,Iw,Iw,Aw,Cw\", \"2170\" );\n/*37*/ test( \"1000:Iw,Ip,In,An,In,In,In,An,In,Iw,In,In,Iw,In,Iw,Iw,Iw,An\", \"5500\" );\n/*38*/ test( \"180:In,Aw,Ip,Iw,In,Aw,In,Iw,Iw,In\", \"330\" );\n/*39*/ test( \"440:In,Ip,Cp,Aw,Iw,In,An\", \"660\" );\n/*40*/ test( \"1270:Ap,In,An,Ip,In,Ip,Ip\", \"1270\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'BusFare' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);$/).to_a\n    bus = BusFare.new input\n    bus.calc\n    it input do\n      assert_equal expect, bus.fare.to_s\n    end\n  end\nend\n```\n"}