{"context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\n\u3000http://atnd.org/events/47670\n\u306e\u554f\u984c\u300c\u4e0d\u826f\u30bb\u30af\u30bf\u306e\u96a3\u300d\n\u3000http://nabetani.sakura.ne.jp/hena/ord19nebasec/\n\u306e\u3001\u5b9f\u88c5\u4f8b\u3002\n\u4ed6\u306e\u65b9\u306e\u89e3\u7b54\u306f\nhttp://qiita.com/Nabetani/items/9810b301648099028bf0\n\u304b\u3089\u8fbf\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3067\u3002\ngroovy \u3067\u3002\nNEIBS=[\n  100:[101,107,200,201,215],\n  200:[100,201,215,300,301,323],\n  201:[100,101,200,202,301,302],\n  300:[200,301,323,400,401,431],\n  301:[200,201,300,302,401,402],\n  302:[201,202,301,303,402,403],\n  400:[300,401,431],\n  401:[300,301,400,402],\n  402:[301,302,401,403],\n  403:[302,303,402,404],\n]\n\ndef divmod(a,b){ \n  [(int)(a/b),a % b] /// comment to fix syntax hi-light \n}\n\ndef getNeibs(b){\n  (r,t)=divmod(b.toInteger(),100)\n  (s,d)=divmod(t,r)\n  NEIBS[r*100+d].collect{\n    (a,b)=divmod(it,100)\n    (a*100+(b+s*a) % (a*8)).toString()\n  }\n}\n\ndef solve( s ){\n  bads=s.split(\",\") as Set\n  neibs = bads.collect{ ( getNeibs(it) as Set )- bads }\n  r=((100..107)+(200..215)+(300..323)+(400..431)).findAll{ t->\n    1<neibs.count{ neib->\n      0<neib.count(t.toString())\n    }\n  }\n  r ? r.join(\",\") : \"none\"\n}\n\ndef test( src, expected )\n{\n  actual = solve( src )\n  if ( actual == expected ){\n    println \"ok\"\n  } else {\n    printf( \"%s->%s / %s\\n\", src, actual, expected )\n  }\n}\n\n/*0*/ test( \"400,401,302\", \"300,301,402\" );    \n/*1*/ test( \"105,100,306,414\", \"none\" );  \n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u51fa\u984c\u6642\u70b9\u3067\u60f3\u5b9a\u3057\u3066\u3044\u305f\u6226\u7565\u306a\u3093\u3060\u3051\u3069\u3001\u3060\u308c\u3082\u66f8\u3044\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u4ed5\u65b9\u306a\u304f\u81ea\u5206\u3067\u66f8\u3044\u305f\u3002\n8\u56de\u56de\u8ee2\u5bfe\u79f0\u306a\u306e\u3067\u3001\u5168\u4f53\u306e 1/8 \u306b\u3064\u3044\u3066\u96a3\u63a5\u95a2\u4fc2\u3092\u8a18\u8ff0\u3057\u3066\u3057\u307e\u3048\u3070\u826f\u3044\u3001\u3068\u3044\u3046\u3082\u306e\u3002\ngroovy \u306a\u306e\u3067\u3001\u7a7a\u306e\u914d\u5217\u304c false \u306b\u306a\u308b\u3068\u304b\u3001(1..10) \u306e\u3088\u3046\u306a\u3082\u306e\u3092\u52a0\u7b97\u3067\u304d\u308b\u3068\u304b\u3044\u3046\u8fba\u308a\u3067 ruby \u3089\u3057\u304f\u306a\u3055\u3092\u30a2\u30d4\u30fc\u30eb\u3057\u305f\u3064\u3082\u308a\u3002\n\u305d\u308c\u306b\u3057\u3066\u3082 groovy \u306b divmod \u304c\u306a\u3044\u306e\u304c\u7d0d\u5f97\u3044\u304b\u306a\u3044\u3002\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u300c\u3069\u3046\u66f8\u304f\u300d\n\u3000http://atnd.org/events/47670\n\u306e\u554f\u984c\u300c\u4e0d\u826f\u30bb\u30af\u30bf\u306e\u96a3\u300d\n\u3000http://nabetani.sakura.ne.jp/hena/ord19nebasec/\n\u306e\u3001\u5b9f\u88c5\u4f8b\u3002\n\n\u4ed6\u306e\u65b9\u306e\u89e3\u7b54\u306f\nhttp://qiita.com/Nabetani/items/9810b301648099028bf0\n\u304b\u3089\u8fbf\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3067\u3002\ngroovy \u3067\u3002\n\n```groovy\nNEIBS=[\n  100:[101,107,200,201,215],\n  200:[100,201,215,300,301,323],\n  201:[100,101,200,202,301,302],\n  300:[200,301,323,400,401,431],\n  301:[200,201,300,302,401,402],\n  302:[201,202,301,303,402,403],\n  400:[300,401,431],\n  401:[300,301,400,402],\n  402:[301,302,401,403],\n  403:[302,303,402,404],\n]\n\ndef divmod(a,b){ \n  [(int)(a/b),a % b] /// comment to fix syntax hi-light \n}\n\ndef getNeibs(b){\n  (r,t)=divmod(b.toInteger(),100)\n  (s,d)=divmod(t,r)\n  NEIBS[r*100+d].collect{\n    (a,b)=divmod(it,100)\n    (a*100+(b+s*a) % (a*8)).toString()\n  }\n}\n\ndef solve( s ){\n  bads=s.split(\",\") as Set\n  neibs = bads.collect{ ( getNeibs(it) as Set )- bads }\n  r=((100..107)+(200..215)+(300..323)+(400..431)).findAll{ t->\n    1<neibs.count{ neib->\n      0<neib.count(t.toString())\n    }\n  }\n  r ? r.join(\",\") : \"none\"\n}\n\ndef test( src, expected )\n{\n  actual = solve( src )\n  if ( actual == expected ){\n    println \"ok\"\n  } else {\n    printf( \"%s->%s / %s\\n\", src, actual, expected )\n  }\n}\n\n/*0*/ test( \"400,401,302\", \"300,301,402\" );    \n/*1*/ test( \"105,100,306,414\", \"none\" );  \n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u51fa\u984c\u6642\u70b9\u3067\u60f3\u5b9a\u3057\u3066\u3044\u305f\u6226\u7565\u306a\u3093\u3060\u3051\u3069\u3001\u3060\u308c\u3082\u66f8\u3044\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u4ed5\u65b9\u306a\u304f\u81ea\u5206\u3067\u66f8\u3044\u305f\u3002\n\n8\u56de\u56de\u8ee2\u5bfe\u79f0\u306a\u306e\u3067\u3001\u5168\u4f53\u306e 1/8 \u306b\u3064\u3044\u3066\u96a3\u63a5\u95a2\u4fc2\u3092\u8a18\u8ff0\u3057\u3066\u3057\u307e\u3048\u3070\u826f\u3044\u3001\u3068\u3044\u3046\u3082\u306e\u3002\n\ngroovy \u306a\u306e\u3067\u3001\u7a7a\u306e\u914d\u5217\u304c false \u306b\u306a\u308b\u3068\u304b\u3001(1..10) \u306e\u3088\u3046\u306a\u3082\u306e\u3092\u52a0\u7b97\u3067\u304d\u308b\u3068\u304b\u3044\u3046\u8fba\u308a\u3067 ruby \u3089\u3057\u304f\u306a\u3055\u3092\u30a2\u30d4\u30fc\u30eb\u3057\u305f\u3064\u3082\u308a\u3002\n\n\u305d\u308c\u306b\u3057\u3066\u3082 groovy \u306b divmod \u304c\u306a\u3044\u306e\u304c\u7d0d\u5f97\u3044\u304b\u306a\u3044\u3002", "tags": ["Groovy", "yhpg", "\u3069\u3046\u66f8\u304f"]}