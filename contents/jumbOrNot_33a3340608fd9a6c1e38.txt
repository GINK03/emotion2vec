{"context": "\n\nAndroid\u30a2\u30d7\u30ea\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\n\u6700\u8fd1\u30b0\u30c3\u30c9\u30d1\u30c3\u30c1\u3055\u3093\u304b\u3089\u826f\u3044\u611f\u3058\u306e\u30b5\u30fc\u30d3\u30b9\u304c\u51fa\u3066\u3044\u308b\u306e\u3092\u767a\u898b\u3057\u305f\u3002\nBalto\n\u30a2\u30d7\u30ea\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u7d20\u65e9\u304f\u6295\u7a3f\u3057\u3066\u3001\u30a8\u30f3\u30b8\u30cb\u30a2\u306b\u5171\u6709\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u307e\u305f\u6295\u7a3f\u306fgithub\u306b\u6295\u7a3f\u3055\u308cissue\u5316\u3055\u308c\u308b\u306e\u3067\u304b\u306a\u308a\u4fbf\u5229\u3002\u3067\u3082Android\u306f5.0\u4ee5\u4e0a\u3089\u3057\u3044\u30fb\u30fb\u30fb\uff08Balto\u3092\u5c11\u3057\u3060\u3051\u89e6\u3063\u3066\u307f\u305f\uff09\n\u304a\u3057\u3044\u30024\u7cfb\u306f\u307e\u3060\u30b7\u30a7\u30a2\u7684\u306b10%\u307b\u3069\u3044\u3066\u3001\u5207\u308c\u306a\u3044\u306e\u3067\u3068\u308a\u3042\u3048\u305aSlack\u306bpost\u3059\u308b\u306e\u3092\u4f5c\u3063\u305f\u3002\nActivity\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u3068\u3063\u3066\u3001post\u3059\u308b\u3084\u3064\u3060\u3002\n\n\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066Slack\u306b\u6295\u7a3f\u3059\u308b\n\n\u307e\u305a\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3002\n\nfun AppCompatActivity.captureScreen():Bitmap{\n    val rootView = window.decorView.rootView\n    val screenView = rootView.getRootView()\n    screenView.setDrawingCacheEnabled(true)\n    val bitmap = Bitmap.createBitmap(screenView.getDrawingCache())\n    screenView.setDrawingCacheEnabled(false)\n    return bitmap\n}\n\nActivity\u306eExtension\u3067\u3059\u3002\n\nFragment\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:background=\"@android:color/white\"\n    android:orientation=\"vertical\"\n    android:clickable=\"true\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n            <LinearLayout\n                android:orientation=\"vertical\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\">\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:padding=\"10dp\"\n                android:textSize=\"17dp\"\n                android:text=\"\uff0a\u3069\u3053\u304b\u3089\u3067\u3082\u9001\u4fe1\u3067\u304d\u307e\u3059\uff01\uff01\"/>\n            <RadioGroup\n                android:orientation=\"horizontal\"\n                android:id=\"@+id/buttongroup_feedback\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\">\n                <RadioButton\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"\u30d0\u30b0\"\n                    android:id=\"@+id/radioButton\" />\n\n                <RadioButton\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"\u6539\u5584\"\n                    android:layout_gravity=\"right\" />\n\n                <RadioButton\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"\u30a4\u30a4\u306d\uff01\"\n                    android:layout_gravity=\"center_horizontal\" />\n                <Button\n                    android:id=\"@+id/button_feedback\"\n                    android:layout_marginLeft=\"50dp\"\n                    android:layout_gravity=\"right\"\n                    android:text=\"\u9001\u4fe1\uff01\uff01\uff01\"\n                    android:layout_width=\"fill_parent\"\n                    android:layout_height=\"wrap_content\" />\n\n            </RadioGroup>\n\n            <EditText\n                android:padding=\"10dp\"\n                android:hint=\"\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"100dp\"\n                android:id=\"@+id/editText_feedback\" />\n\n            <ImageView\n                android:id=\"@+id/imageView_feedback\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"300dp\" />\n        </LinearLayout>\n\n    </ScrollView>\n</LinearLayout>\n\nimport android.graphics.Bitmap\nimport android.os.Bundle\nimport android.support.v4.app.Fragment\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.*\nimport com.google.repacked.apache.commons.io.FileUtils\nimport jp.co.rarejob.R\nimport jp.co.rarejob.lib.util.AlertDialogUtil\nimport okhttp3.*\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.Multipart\nimport retrofit2.http.POST\nimport retrofit2.http.Part\nimport java.io.ByteArrayOutputStream\nimport java.nio.ByteBuffer\n\n/**\n * Created by kentaro.haneda on 16/12/21.\n */\nclass FeedbackFragment(var bitmap:Bitmap) : Fragment() {\n\n    lateinit var categoryButtonGroup:RadioGroup\n    lateinit var feedbacEditText: EditText\n    lateinit var captureImage:ImageView\n\n    var selectedCategoryName = \"\u305d\u306e\u4ed6\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n    }\n\n    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,\n                              savedInstanceState: Bundle?): View? {\n        val view = inflater!!.inflate(R.layout.fragment_feedback, container, false)\n        captureImage = view.findViewById(R.id.imageView_feedback) as ImageView\n        captureImage.setImageBitmap(bitmap)\n\n        (view.findViewById(R.id.buttongroup_feedback) as RadioGroup).setOnCheckedChangeListener { radioGroup, i ->\n            when(i){\n                0 -> { selectedCategoryName = \"\u30d0\u30b0\" }\n                1 -> { selectedCategoryName = \"\u6539\u5584\" }\n                2 -> { selectedCategoryName = \"\u30a4\u30a4\u306d\" }\n            }\n        }\n        (view.findViewById(R.id.button_feedback) as Button).setOnClickListener {\n            postToSlack()\n        }\n        feedbacEditText = view.findViewById(R.id.editText_feedback) as EditText\n        feedbacEditText.addTextChangedListener(object : TextWatcher {\n            override fun afterTextChanged(s: Editable) {\n            }\n\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\n            }\n\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n                (view.findViewById(R.id.button_feedback) as Button).isEnabled = feedbacEditText.text.toString().count() > 0\n            }\n        })\n\n        return view\n    }\n\n    fun postToSlack(){\n\n        val byteArrayOutputStream = ByteArrayOutputStream()\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream)\n        val requestBodyBitmap = RequestBody.create(MediaType.parse(\"image/png\"), byteArrayOutputStream.toByteArray())\n\n        val service = SlackServiceGenerator.createService(SlackFeedbackAPI::class.java)\n\n        // set post file name\n        val body = MultipartBody.Part.createFormData(\"file\", \"feedback_image.png\", requestBodyBitmap)\n\n        // for slack\n        // get from here https://XXXXXXXX.slack.com/apps/new/\n        val token = RequestBody.create(\n                MediaType.parse(\"multipart/form-data\"), \"XXXXXXXXXXXXX\")\n        val channel = RequestBody.create(\n                MediaType.parse(\"multipart/form-data\"), \"feedback\")\n        val title = RequestBody.create(\n                MediaType.parse(\"multipart/form-data\"), selectedCategoryName)\n        val comment = RequestBody.create(\n                MediaType.parse(\"multipart/form-data\"), feedbacEditText.text.toString())\n        val pretty = RequestBody.create(\n                MediaType.parse(\"multipart/form-data\"), \"1\")\n\n        // finally, execute the request\n        val call = service.upload(token, channel, pretty, title, comment, body)\n        call.enqueue(object : Callback<ResponseBody> {\n            override fun onResponse(call: Call<ResponseBody>,\n                                    response: Response<ResponseBody>) {\n                Log.v(\"Upload\", \"success\")\n            }\n\n            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\n                Log.e(\"Upload error:\", t.message)\n            }\n        })\n    }\n}\n\ninterface SlackFeedbackAPI{\n    @Multipart\n    @POST(\"/api/files.upload\")\n    fun upload(@Part(\"token\") version:RequestBody,\n               @Part(\"channels\") name:RequestBody,\n               @Part(\"pretty\") category:RequestBody,\n               @Part(\"title\") title:RequestBody,\n               @Part(\"initial_comment\") comment:RequestBody,\n               @Part file: MultipartBody.Part ): Call<ResponseBody>\n}\n\nobject SlackServiceGenerator {\n\n    val API_BASE_URL = \"https://slack.com\"\n\n    private val httpClient = OkHttpClient.Builder()\n\n    private val builder = Retrofit.Builder().baseUrl(API_BASE_URL).addConverterFactory(GsonConverterFactory.create())\n\n    fun <S> createService(serviceClass: Class<S>): S {\n        val retrofit = builder.client(httpClient.build()).build()\n        return retrofit.create(serviceClass)\n    }\n}\n\n\nretrofit2\u3068okhttp\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u30c8\u30fc\u30af\u30f3\u306f https://XXXXXXXX.slack.com/apps/new/ \u3053\u3093\u306a\u611f\u3058\u306eURL\u3067\u767a\u884c\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nBalto\u304c4k\u5bfe\u5fdc\u3057\u305f\u3089\u3001iOS\u3082\u307e\u3068\u3081\u305f\u3044\uff01\n\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u3082\n# Android\u30a2\u30d7\u30ea\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\n\u6700\u8fd1\u30b0\u30c3\u30c9\u30d1\u30c3\u30c1\u3055\u3093\u304b\u3089\u826f\u3044\u611f\u3058\u306e\u30b5\u30fc\u30d3\u30b9\u304c\u51fa\u3066\u3044\u308b\u306e\u3092\u767a\u898b\u3057\u305f\u3002\n\n[Balto](https://www.balto.io/ja/)\n\n\u30a2\u30d7\u30ea\u306e\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u7d20\u65e9\u304f\u6295\u7a3f\u3057\u3066\u3001\u30a8\u30f3\u30b8\u30cb\u30a2\u306b\u5171\u6709\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u307e\u305f\u6295\u7a3f\u306fgithub\u306b\u6295\u7a3f\u3055\u308cissue\u5316\u3055\u308c\u308b\u306e\u3067\u304b\u306a\u308a\u4fbf\u5229\u3002\u3067\u3082**Android\u306f5.0**\u4ee5\u4e0a\u3089\u3057\u3044\u30fb\u30fb\u30fb\uff08[Balto\u3092\u5c11\u3057\u3060\u3051\u89e6\u3063\u3066\u307f\u305f](http://qiita.com/gupuru/items/4f3850b0a4780964676a)\uff09\n\n\u304a\u3057\u3044\u30024\u7cfb\u306f\u307e\u3060\u30b7\u30a7\u30a2\u7684\u306b10%\u307b\u3069\u3044\u3066\u3001\u5207\u308c\u306a\u3044\u306e\u3067\u3068\u308a\u3042\u3048\u305aSlack\u306bpost\u3059\u308b\u306e\u3092\u4f5c\u3063\u305f\u3002\nActivity\u306e\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u3068\u3063\u3066\u3001post\u3059\u308b\u3084\u3064\u3060\u3002\n\n\n\n## \u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066Slack\u306b\u6295\u7a3f\u3059\u308b\n\n### \u307e\u305a\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u3002\n\n```kotlin\n\nfun AppCompatActivity.captureScreen():Bitmap{\n    val rootView = window.decorView.rootView\n    val screenView = rootView.getRootView()\n    screenView.setDrawingCacheEnabled(true)\n    val bitmap = Bitmap.createBitmap(screenView.getDrawingCache())\n    screenView.setDrawingCacheEnabled(false)\n    return bitmap\n}\n```\n\nActivity\u306eExtension\u3067\u3059\u3002\n\n### Fragment\n\n```xml\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:background=\"@android:color/white\"\n    android:orientation=\"vertical\"\n    android:clickable=\"true\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n            <LinearLayout\n                android:orientation=\"vertical\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\">\n\n            <TextView\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:padding=\"10dp\"\n                android:textSize=\"17dp\"\n                android:text=\"\uff0a\u3069\u3053\u304b\u3089\u3067\u3082\u9001\u4fe1\u3067\u304d\u307e\u3059\uff01\uff01\"/>\n            <RadioGroup\n                android:orientation=\"horizontal\"\n                android:id=\"@+id/buttongroup_feedback\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\">\n                <RadioButton\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"\u30d0\u30b0\"\n                    android:id=\"@+id/radioButton\" />\n\n                <RadioButton\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"\u6539\u5584\"\n                    android:layout_gravity=\"right\" />\n\n                <RadioButton\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"\u30a4\u30a4\u306d\uff01\"\n                    android:layout_gravity=\"center_horizontal\" />\n                <Button\n                    android:id=\"@+id/button_feedback\"\n                    android:layout_marginLeft=\"50dp\"\n                    android:layout_gravity=\"right\"\n                    android:text=\"\u9001\u4fe1\uff01\uff01\uff01\"\n                    android:layout_width=\"fill_parent\"\n                    android:layout_height=\"wrap_content\" />\n\n            </RadioGroup>\n\n            <EditText\n                android:padding=\"10dp\"\n                android:hint=\"\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"100dp\"\n                android:id=\"@+id/editText_feedback\" />\n\n            <ImageView\n                android:id=\"@+id/imageView_feedback\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"300dp\" />\n        </LinearLayout>\n\n    </ScrollView>\n</LinearLayout>\n```\n\n```kotlin\nimport android.graphics.Bitmap\nimport android.os.Bundle\nimport android.support.v4.app.Fragment\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.util.Log\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.*\nimport com.google.repacked.apache.commons.io.FileUtils\nimport jp.co.rarejob.R\nimport jp.co.rarejob.lib.util.AlertDialogUtil\nimport okhttp3.*\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\nimport retrofit2.Retrofit\nimport retrofit2.converter.gson.GsonConverterFactory\nimport retrofit2.http.Multipart\nimport retrofit2.http.POST\nimport retrofit2.http.Part\nimport java.io.ByteArrayOutputStream\nimport java.nio.ByteBuffer\n\n/**\n * Created by kentaro.haneda on 16/12/21.\n */\nclass FeedbackFragment(var bitmap:Bitmap) : Fragment() {\n\n    lateinit var categoryButtonGroup:RadioGroup\n    lateinit var feedbacEditText: EditText\n    lateinit var captureImage:ImageView\n\n    var selectedCategoryName = \"\u305d\u306e\u4ed6\"\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n    }\n\n    override fun onCreateView(inflater: LayoutInflater?, container: ViewGroup?,\n                              savedInstanceState: Bundle?): View? {\n        val view = inflater!!.inflate(R.layout.fragment_feedback, container, false)\n        captureImage = view.findViewById(R.id.imageView_feedback) as ImageView\n        captureImage.setImageBitmap(bitmap)\n\n        (view.findViewById(R.id.buttongroup_feedback) as RadioGroup).setOnCheckedChangeListener { radioGroup, i ->\n            when(i){\n                0 -> { selectedCategoryName = \"\u30d0\u30b0\" }\n                1 -> { selectedCategoryName = \"\u6539\u5584\" }\n                2 -> { selectedCategoryName = \"\u30a4\u30a4\u306d\" }\n            }\n        }\n        (view.findViewById(R.id.button_feedback) as Button).setOnClickListener {\n            postToSlack()\n        }\n        feedbacEditText = view.findViewById(R.id.editText_feedback) as EditText\n        feedbacEditText.addTextChangedListener(object : TextWatcher {\n            override fun afterTextChanged(s: Editable) {\n            }\n\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\n            }\n\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n                (view.findViewById(R.id.button_feedback) as Button).isEnabled = feedbacEditText.text.toString().count() > 0\n            }\n        })\n\n        return view\n    }\n\n    fun postToSlack(){\n\n        val byteArrayOutputStream = ByteArrayOutputStream()\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream)\n        val requestBodyBitmap = RequestBody.create(MediaType.parse(\"image/png\"), byteArrayOutputStream.toByteArray())\n\n        val service = SlackServiceGenerator.createService(SlackFeedbackAPI::class.java)\n\n        // set post file name\n        val body = MultipartBody.Part.createFormData(\"file\", \"feedback_image.png\", requestBodyBitmap)\n\n        // for slack\n        // get from here https://XXXXXXXX.slack.com/apps/new/\n        val token = RequestBody.create(\n                MediaType.parse(\"multipart/form-data\"), \"XXXXXXXXXXXXX\")\n        val channel = RequestBody.create(\n                MediaType.parse(\"multipart/form-data\"), \"feedback\")\n        val title = RequestBody.create(\n                MediaType.parse(\"multipart/form-data\"), selectedCategoryName)\n        val comment = RequestBody.create(\n                MediaType.parse(\"multipart/form-data\"), feedbacEditText.text.toString())\n        val pretty = RequestBody.create(\n                MediaType.parse(\"multipart/form-data\"), \"1\")\n\n        // finally, execute the request\n        val call = service.upload(token, channel, pretty, title, comment, body)\n        call.enqueue(object : Callback<ResponseBody> {\n            override fun onResponse(call: Call<ResponseBody>,\n                                    response: Response<ResponseBody>) {\n                Log.v(\"Upload\", \"success\")\n            }\n\n            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\n                Log.e(\"Upload error:\", t.message)\n            }\n        })\n    }\n}\n\ninterface SlackFeedbackAPI{\n    @Multipart\n    @POST(\"/api/files.upload\")\n    fun upload(@Part(\"token\") version:RequestBody,\n               @Part(\"channels\") name:RequestBody,\n               @Part(\"pretty\") category:RequestBody,\n               @Part(\"title\") title:RequestBody,\n               @Part(\"initial_comment\") comment:RequestBody,\n               @Part file: MultipartBody.Part ): Call<ResponseBody>\n}\n\nobject SlackServiceGenerator {\n\n    val API_BASE_URL = \"https://slack.com\"\n\n    private val httpClient = OkHttpClient.Builder()\n\n    private val builder = Retrofit.Builder().baseUrl(API_BASE_URL).addConverterFactory(GsonConverterFactory.create())\n\n    fun <S> createService(serviceClass: Class<S>): S {\n        val retrofit = builder.client(httpClient.build()).build()\n        return retrofit.create(serviceClass)\n    }\n}\n\n```\n\nretrofit2\u3068okhttp\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\u30c8\u30fc\u30af\u30f3\u306f https://XXXXXXXX.slack.com/apps/new/ \u3053\u3093\u306a\u611f\u3058\u306eURL\u3067\u767a\u884c\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nBalto\u304c4k\u5bfe\u5fdc\u3057\u305f\u3089\u3001iOS\u3082\u307e\u3068\u3081\u305f\u3044\uff01\n\n[\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u3082](https://gist.github.com/jumbo-in-Jap/17f4e1d827a04a45c38eae17e6a1032f)\n", "tags": ["Balto", "Kotlin", "Android"]}