{"tags": ["\u5f62\u614b\u7d20\u89e3\u6790", "Python", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "mecab"], "context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 :: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\u3002\n\n\u7b2c4\u7ae0: \u5f62\u614b\u7d20\u89e3\u6790\n\n\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092MeCab\u3092\u4f7f\u3063\u3066\u5f62\u614b\u7d20\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.mecab\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\u306a\u304a\uff0c\u554f\u984c37, 38, 39\u306fmatplotlib\u3082\u3057\u304f\u306fGnuplot\u3092\u7528\u3044\u308b\u3068\u3088\u3044\uff0e\n\n\n33. \u30b5\u5909\u540d\u8a5e\n\n\u30b5\u5909\u63a5\u7d9a\u306e\u540d\u8a5e\u3092\u3059\u3079\u3066\u62bd\u51fa\u305b\u3088\uff0e\n\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\nmain.py\n# coding: utf-8\nimport MeCab\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.mecab'\n\n\ndef parse_neko():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u5f62\u614b\u7d20\u89e3\u6790\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066neko.txt.mecab\u306b\u4fdd\u5b58\u3059\u308b\n    '''\n\n    with open(fname) as data_file, \\\n            open(fname_parsed, mode='w') as out_file:\n\n        mecab = MeCab.Tagger()\n        out_file.write(mecab.parse(data_file.read()))\n\n\ndef neco_lines():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5404\u5f62\u614b\u7d20\u3092\n    \u30fb\u8868\u5c64\u5f62\uff08surface\uff09\n    \u30fb\u57fa\u672c\u5f62\uff08base\uff09\n    \u30fb\u54c1\u8a5e\uff08pos\uff09\n    \u30fb\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\n    \u306e4\u3064\u3092\u30ad\u30fc\u3068\u3059\u308b\u8f9e\u66f8\u306b\u683c\u7d0d\u3057\u30011\u6587\u305a\u3064\u3001\u3053\u306e\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3059\n\n    \u623b\u308a\u5024\uff1a\n    1\u6587\u306e\u5404\u5f62\u614b\u7d20\u3092\u8f9e\u66f8\u5316\u3057\u305f\u30ea\u30b9\u30c8\n    '''\n    with open(fname_parsed) as file_parsed:\n\n        morphemes = []\n        for line in file_parsed:\n\n            # \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n            cols = line.split('\\t')\n            if(len(cols) < 2):\n                raise StopIteration     # \u533a\u5207\u308a\u304c\u306a\u3051\u308c\u3070\u7d42\u4e86\n            res_cols = cols[1].split(',')\n\n            # \u8f9e\u66f8\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n            morpheme = {\n                'surface': cols[0],\n                'base': res_cols[6],\n                'pos': res_cols[0],\n                'pos1': res_cols[1]\n            }\n            morphemes.append(morpheme)\n\n            # \u54c1\u8a5e\u7d30\u5206\u985e1\u304c'\u53e5\u70b9'\u306a\u3089\u6587\u306e\u7d42\u308f\u308a\u3068\u5224\u5b9a\n            if res_cols[1] == '\u53e5\u70b9':\n                yield morphemes\n                morphemes = []\n\n\n# \u5f62\u614b\u7d20\u89e3\u6790\nparse_neko()\n\n# 1\u6587\u305a\u3064\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u30b5\u5909\u540d\u8a5e\u3092\u62bd\u51fa\nnouns = set()\nnouns_test = []     # \u78ba\u8a8d\u7528\u306e\u51fa\u73fe\u9806\u30ea\u30b9\u30c8\nlines = neco_lines()\nfor line in lines:\n    for morpheme in line:\n        if morpheme['pos'] == '\u540d\u8a5e' and morpheme['pos1'] == '\u30b5\u5909\u63a5\u7d9a':\n            nouns.add(morpheme['surface'])\n            nouns_test.append(morpheme['surface'])      # \u78ba\u8a8d\u7528\u306e\u51fa\u73fe\u9806\u30ea\u30b9\u30c8\u306b\u3082\u8ffd\u52a0\n\n# \u78ba\u8a8d\u3057\u3084\u3059\u3044\u3088\u3046nouns_test\u3092\u4f7f\u3063\u3066\u51fa\u73fe\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a\nprint(sorted(nouns, key=nouns_test.index))\n\n\n\n\u5b9f\u884c\u7d50\u679c\uff1a\n\u9577\u3044\u306e\u3067\u5148\u982d\u90e8\u5206\u306e\u307f\u3067\u3059\u3002\n\n\u7aef\u672b\uff08\u5148\u982d\u90e8\u5206\uff09\n['\u898b\u5f53', '\u8a18\u61b6', '\u8a71', '\u88c5\u98fe', '\u7a81\u8d77', '\u904b\u8ee2', '\u5206\u5225', '\u6c7a\u5fc3', '\u6211\u6162', '\u9913\u6b7b', '\u8a2a\u554f', '\u59cb\u672b', '\u7336\u4e88', '\u906d\u9047', '\u8fd4\u5831', '\u52c9\u5f37', '\u663c\u5bdd', '\u73cd\u91cd', '\u7d4c\u9a13', '\u4f9b', '\u2014\u2014', '\u540c\u5c45', '\u89b3\u5bdf', '\u65ad\u8a00', '\u540c\u887e', '\u8feb\u5bb3', '\u5c0a\u656c', '\u751f\u6d3b', '\u527f\u6ec5', '\u8b70\u8ad6', '\u6240\u6709', '\u61a4\u6168', '\u89b3\u5ff5', '\u5fa1\u99b3\u8d70', '\u63a0\u596a', '\u4ee3\u8a00', '\u5931\u6557', '\u6295\u66f8', '\u9451\u5b9a', '\u8ff0\u61d0', '\u51e6', '\u60f3\u50cf', '\u5199\u751f', '\u611f\u5fc3', '\u5931\u7b11', '\u63f6\u63c4', '\u6b20\u4f38', '\u81ea\u767d', '\u9020\u4f5c', '\u5f69\u8272', '\u5224\u7136', '\u5fc3\u4e2d', '\u611f\u670d', '\u5c0f\u4fbf', '\u5931\u656c', '\u4e88\u5b9a', '\u5931\u671b', '\u6f2b\u7f75', '\u5897\u9577', '\u5831\u9053', '\u9000\u5c48', '\u52a0\u6e1b', '\u4e00\u7761', '\u904b\u52d5', '\u5606\u8cde', '\u524d\u5f8c', '\u4f47\u7acb', '\u8eab\u52d5\u304d', '\u6328\u62f6', '\u9f13\u52d5', '\u8efd\u8511', '\u80a5\u6e80', '\u4e71\u66b4', '\u6559\u80b2', '\u4ea4\u969b',\n\n\n\u7d50\u679c\u5168\u4f53\u306fGitHub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b5\u5909\u63a5\u7d9a\u306e\u540d\u8a5e\u3068\u306f\n\u30b5\u5909\u63a5\u7d9a\u3068\u3044\u3046\u306e\u306f\u300c\u301c\u3059\u308b\u300d\u306e\u5f62\u304c\u53d6\u308c\u308b\u3082\u306e\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u54c1\u8a5e\u304c\u540d\u8a5e\u3067\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\u304c\u30b5\u5909\u63a5\u7d9a\u306e\u3082\u306e\u3092\u63a2\u305b\u3070\u826f\u3044\u3088\u3046\u3067\u3059\u3002\n\u305f\u3060\u3057MeCab\u306e\u7d50\u679c\u306b\u306f\u3001\u54c1\u8a5e\u304c\u540d\u8a5e\u3067\u54c1\u8a5e\u7d30\u5206\u985e1\u304c\u63a5\u5c3e\u3067\u54c1\u8a5e\u7d30\u5206\u985e2\u304c\u30b5\u5909\u63a5\u7d9a\u306e\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u540d\u8a5e\u306b\u7d9a\u304f\u540d\u8a5e\u3067\u300c\u301c\u3059\u308b\u300d\u306e\u5f62\u304c\u53d6\u308c\u308b\u3001\u4f8b\u3048\u3070\u300c\u5de8\u5927\u300e\u5316\u300f\u3059\u308b\u300d\u3068\u304b\u300c\u4e16\u9593\u300e\u8a71\u300f\u3059\u308b\u300d\u3068\u304b\u3092\u6307\u3059\u3088\u3046\u3067\u3059\u3002\u672c\u6765\u306f\u3053\u308c\u3089\u3082\u62bd\u51fa\u5bfe\u8c61\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u554f\u984c30\u3067\u54c1\u8a5e\u7d30\u5206\u985e2\u3092\u53d6\u308a\u8fbc\u3093\u3067\u3044\u306a\u3044\u306e\u3067\u5224\u5b9a\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u4ed5\u69d8\u3068\u3044\u3046\u3053\u3068\u3067\u3002\n\u57fa\u672c\u7684\u306b\u306f\u524d\u554f\u3067\u898b\u3066\u3044\u305f\u8f9e\u66f8\u306ekey\u3068\u53d6\u308a\u51fa\u3059\u5024\u306ekey\u3092\u5909\u3048\u305f\u3060\u3051\u3067\u3059\u3002\n\n2\u91cd\u30eb\u30fc\u30d7\u306e\u5185\u5305\u8868\u8a18\n2\u91cd\u30eb\u30fc\u30d7\u3067\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u306e\u90e8\u5206\u306e\u5185\u5305\u8868\u8a18\u306b\u6311\u6226\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nmain2.py\u306e\u5f8c\u534a\u90e8\u5206\n# \u5f62\u614b\u7d20\u89e3\u6790\nparse_neko()\n\n# 1\u6587\u305a\u3064\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u30b5\u5909\u540d\u8a5e\u3092\u62bd\u51fa\nlist_nouns = [morpheme['surface']\n        for line in neco_lines()\n        for morpheme in line\n        if morpheme['pos'] == '\u540d\u8a5e' and morpheme['pos1'] == '\u30b5\u5909\u63a5\u7d9a']\nnouns = set(list_nouns)     # \u91cd\u8907\u9664\u53bb\n\n# \u78ba\u8a8d\u3057\u3084\u3059\u3044\u3088\u3046list_nouns\u3092\u4f7f\u3063\u3066\u51fa\u73fe\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a\nprint(sorted(nouns, key=list_nouns.index))\n\n\n\u524d\u554f\u3067shiracamus\u3055\u3093\u306b\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3044\u305f\u5185\u5bb9\u307b\u307c\u307e\u3093\u307e\u3067\u3059^^;\n\u3000\n34\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c4\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u9752\u7a7a\u6587\u5eab\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 \\:\\: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f[\u3053\u3061\u3089](http://qiita.com/segavvy/items)\u304b\u3089\u3069\u3046\u305e\u3002\n\n## \u7b2c4\u7ae0: \u5f62\u614b\u7d20\u89e3\u6790\n>\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092MeCab\u3092\u4f7f\u3063\u3066\u5f62\u614b\u7d20\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.mecab\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n>\n>\u306a\u304a\uff0c\u554f\u984c37, 38, 39\u306fmatplotlib\u3082\u3057\u304f\u306fGnuplot\u3092\u7528\u3044\u308b\u3068\u3088\u3044\uff0e\n\n###33. \u30b5\u5909\u540d\u8a5e\n>\u30b5\u5909\u63a5\u7d9a\u306e\u540d\u8a5e\u3092\u3059\u3079\u3066\u62bd\u51fa\u305b\u3088\uff0e\n\n####\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\n```python:main.py\n# coding: utf-8\nimport MeCab\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.mecab'\n\n\ndef parse_neko():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u5f62\u614b\u7d20\u89e3\u6790\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u5f62\u614b\u7d20\u89e3\u6790\u3057\u3066neko.txt.mecab\u306b\u4fdd\u5b58\u3059\u308b\n\t'''\n\n\twith open(fname) as data_file, \\\n\t\t\topen(fname_parsed, mode='w') as out_file:\n\n\t\tmecab = MeCab.Tagger()\n\t\tout_file.write(mecab.parse(data_file.read()))\n\n\ndef neco_lines():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5404\u5f62\u614b\u7d20\u3092\n\t\u30fb\u8868\u5c64\u5f62\uff08surface\uff09\n\t\u30fb\u57fa\u672c\u5f62\uff08base\uff09\n\t\u30fb\u54c1\u8a5e\uff08pos\uff09\n\t\u30fb\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\n\t\u306e4\u3064\u3092\u30ad\u30fc\u3068\u3059\u308b\u8f9e\u66f8\u306b\u683c\u7d0d\u3057\u30011\u6587\u305a\u3064\u3001\u3053\u306e\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3059\n\n\t\u623b\u308a\u5024\uff1a\n\t1\u6587\u306e\u5404\u5f62\u614b\u7d20\u3092\u8f9e\u66f8\u5316\u3057\u305f\u30ea\u30b9\u30c8\n\t'''\n\twith open(fname_parsed) as file_parsed:\n\n\t\tmorphemes = []\n\t\tfor line in file_parsed:\n\n\t\t\t# \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n\t\t\tcols = line.split('\\t')\n\t\t\tif(len(cols) < 2):\n\t\t\t\traise StopIteration\t\t# \u533a\u5207\u308a\u304c\u306a\u3051\u308c\u3070\u7d42\u4e86\n\t\t\tres_cols = cols[1].split(',')\n\n\t\t\t# \u8f9e\u66f8\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\t\t\tmorpheme = {\n\t\t\t\t'surface': cols[0],\n\t\t\t\t'base': res_cols[6],\n\t\t\t\t'pos': res_cols[0],\n\t\t\t\t'pos1': res_cols[1]\n\t\t\t}\n\t\t\tmorphemes.append(morpheme)\n\n\t\t\t# \u54c1\u8a5e\u7d30\u5206\u985e1\u304c'\u53e5\u70b9'\u306a\u3089\u6587\u306e\u7d42\u308f\u308a\u3068\u5224\u5b9a\n\t\t\tif res_cols[1] == '\u53e5\u70b9':\n\t\t\t\tyield morphemes\n\t\t\t\tmorphemes = []\n\n\n# \u5f62\u614b\u7d20\u89e3\u6790\nparse_neko()\n\n# 1\u6587\u305a\u3064\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u30b5\u5909\u540d\u8a5e\u3092\u62bd\u51fa\nnouns = set()\nnouns_test = []\t\t# \u78ba\u8a8d\u7528\u306e\u51fa\u73fe\u9806\u30ea\u30b9\u30c8\nlines = neco_lines()\nfor line in lines:\n\tfor morpheme in line:\n\t\tif morpheme['pos'] == '\u540d\u8a5e' and morpheme['pos1'] == '\u30b5\u5909\u63a5\u7d9a':\n\t\t\tnouns.add(morpheme['surface'])\n\t\t\tnouns_test.append(morpheme['surface'])\t\t# \u78ba\u8a8d\u7528\u306e\u51fa\u73fe\u9806\u30ea\u30b9\u30c8\u306b\u3082\u8ffd\u52a0\n\n# \u78ba\u8a8d\u3057\u3084\u3059\u3044\u3088\u3046nouns_test\u3092\u4f7f\u3063\u3066\u51fa\u73fe\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a\nprint(sorted(nouns, key=nouns_test.index))\n```\n\n####\u5b9f\u884c\u7d50\u679c\uff1a\n\u9577\u3044\u306e\u3067\u5148\u982d\u90e8\u5206\u306e\u307f\u3067\u3059\u3002\n\n```console:\u7aef\u672b\uff08\u5148\u982d\u90e8\u5206\uff09\n['\u898b\u5f53', '\u8a18\u61b6', '\u8a71', '\u88c5\u98fe', '\u7a81\u8d77', '\u904b\u8ee2', '\u5206\u5225', '\u6c7a\u5fc3', '\u6211\u6162', '\u9913\u6b7b', '\u8a2a\u554f', '\u59cb\u672b', '\u7336\u4e88', '\u906d\u9047', '\u8fd4\u5831', '\u52c9\u5f37', '\u663c\u5bdd', '\u73cd\u91cd', '\u7d4c\u9a13', '\u4f9b', '\u2014\u2014', '\u540c\u5c45', '\u89b3\u5bdf', '\u65ad\u8a00', '\u540c\u887e', '\u8feb\u5bb3', '\u5c0a\u656c', '\u751f\u6d3b', '\u527f\u6ec5', '\u8b70\u8ad6', '\u6240\u6709', '\u61a4\u6168', '\u89b3\u5ff5', '\u5fa1\u99b3\u8d70', '\u63a0\u596a', '\u4ee3\u8a00', '\u5931\u6557', '\u6295\u66f8', '\u9451\u5b9a', '\u8ff0\u61d0', '\u51e6', '\u60f3\u50cf', '\u5199\u751f', '\u611f\u5fc3', '\u5931\u7b11', '\u63f6\u63c4', '\u6b20\u4f38', '\u81ea\u767d', '\u9020\u4f5c', '\u5f69\u8272', '\u5224\u7136', '\u5fc3\u4e2d', '\u611f\u670d', '\u5c0f\u4fbf', '\u5931\u656c', '\u4e88\u5b9a', '\u5931\u671b', '\u6f2b\u7f75', '\u5897\u9577', '\u5831\u9053', '\u9000\u5c48', '\u52a0\u6e1b', '\u4e00\u7761', '\u904b\u52d5', '\u5606\u8cde', '\u524d\u5f8c', '\u4f47\u7acb', '\u8eab\u52d5\u304d', '\u6328\u62f6', '\u9f13\u52d5', '\u8efd\u8511', '\u80a5\u6e80', '\u4e71\u66b4', '\u6559\u80b2', '\u4ea4\u969b',\n```\n\n\u7d50\u679c\u5168\u4f53\u306f[GitHub](https://github.com/segavvy/nlp100_Python/tree/master/33)\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n###\u30b5\u5909\u63a5\u7d9a\u306e\u540d\u8a5e\u3068\u306f\n\u30b5\u5909\u63a5\u7d9a\u3068\u3044\u3046\u306e\u306f\u300c\u301c\u3059\u308b\u300d\u306e\u5f62\u304c\u53d6\u308c\u308b\u3082\u306e\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u54c1\u8a5e\u304c`\u540d\u8a5e`\u3067\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\u304c`\u30b5\u5909\u63a5\u7d9a`\u306e\u3082\u306e\u3092\u63a2\u305b\u3070\u826f\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u305f\u3060\u3057MeCab\u306e\u7d50\u679c\u306b\u306f\u3001\u54c1\u8a5e\u304c`\u540d\u8a5e`\u3067\u54c1\u8a5e\u7d30\u5206\u985e1\u304c`\u63a5\u5c3e`\u3067\u54c1\u8a5e\u7d30\u5206\u985e2\u304c`\u30b5\u5909\u63a5\u7d9a`\u306e\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u540d\u8a5e\u306b\u7d9a\u304f\u540d\u8a5e\u3067\u300c\u301c\u3059\u308b\u300d\u306e\u5f62\u304c\u53d6\u308c\u308b\u3001\u4f8b\u3048\u3070\u300c\u5de8\u5927\u300e\u5316\u300f\u3059\u308b\u300d\u3068\u304b\u300c\u4e16\u9593\u300e\u8a71\u300f\u3059\u308b\u300d\u3068\u304b\u3092\u6307\u3059\u3088\u3046\u3067\u3059\u3002\u672c\u6765\u306f\u3053\u308c\u3089\u3082\u62bd\u51fa\u5bfe\u8c61\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001[\u554f\u984c30](http://qiita.com/segavvy/items/1f517e06aa3bc5fc2316)\u3067\u54c1\u8a5e\u7d30\u5206\u985e2\u3092\u53d6\u308a\u8fbc\u3093\u3067\u3044\u306a\u3044\u306e\u3067\u5224\u5b9a\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u4ed5\u69d8\u3068\u3044\u3046\u3053\u3068\u3067\u3002\n\n\u57fa\u672c\u7684\u306b\u306f[\u524d\u554f](http://qiita.com/segavvy/items/64920712cc4b12e8ce51)\u3067\u898b\u3066\u3044\u305f\u8f9e\u66f8\u306ekey\u3068\u53d6\u308a\u51fa\u3059\u5024\u306ekey\u3092\u5909\u3048\u305f\u3060\u3051\u3067\u3059\u3002\n\n###2\u91cd\u30eb\u30fc\u30d7\u306e\u5185\u5305\u8868\u8a18\n2\u91cd\u30eb\u30fc\u30d7\u3067\u30ea\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3053\u306e\u90e8\u5206\u306e\u5185\u5305\u8868\u8a18\u306b\u6311\u6226\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```python:main2.py\u306e\u5f8c\u534a\u90e8\u5206\n# \u5f62\u614b\u7d20\u89e3\u6790\nparse_neko()\n\n# 1\u6587\u305a\u3064\u8f9e\u66f8\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3057\u30b5\u5909\u540d\u8a5e\u3092\u62bd\u51fa\nlist_nouns = [morpheme['surface']\n\t\tfor line in neco_lines()\n\t\tfor morpheme in line\n\t\tif morpheme['pos'] == '\u540d\u8a5e' and morpheme['pos1'] == '\u30b5\u5909\u63a5\u7d9a']\nnouns = set(list_nouns)\t\t# \u91cd\u8907\u9664\u53bb\n\n# \u78ba\u8a8d\u3057\u3084\u3059\u3044\u3088\u3046list_nouns\u3092\u4f7f\u3063\u3066\u51fa\u73fe\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u8868\u793a\nprint(sorted(nouns, key=list_nouns.index))\n```\n\n[\u524d\u554f](http://qiita.com/segavvy/items/64920712cc4b12e8ce51)\u3067shiracamus\u3055\u3093\u306b\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3044\u305f\u5185\u5bb9\u307b\u307c\u307e\u3093\u307e\u3067\u3059^^;\n\n\u3000\n34\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n<hr>\n\n*\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001[100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf](http://www.cl.ecei.tohoku.ac.jp/nlp100/#data)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c4\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f[\u9752\u7a7a\u6587\u5eab](http://www.aozora.gr.jp)\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002*\n"}