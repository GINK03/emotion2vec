{"context": " More than 1 year has passed since last update.\u203bexception\u306f\u51e6\u7406\u3092\u884c\u308f\u306a\u3044\u3067\u4e0a\u306b\u6295\u3052\u3066\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u672c\u4f53\n\n[TestHTTP.cs]\nusing System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Net;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\n\nnamespace Test {\n  public partial class TestHTTP {\n    // \"http://proxy.foo.com:8080\"\n    public String proxyurl = null;\n\n    public TestHTTP () {;}\n\n    private Dictionary<String, String> defaultRequestHeaders =\n      new Dictionary<string, string> {\n        {@\"User-Agent\", @\"Mozilla/4.0 (compatible; MSIE 6.0; Windows XP)\"},\n        {@\"Accept-Language\", @\"ja-JP\"}\n      };\n    protected CookieContainer cookieContainer = null;\n\n    protected class SSHttpClientHandler : HttpClientHandler {\n      public SSHttpClientHandler (String proxyurl) {\n        if (proxyurl != null) {\n          Proxy = new WebProxy (proxyurl);\n          UseProxy = true;\n        } else {\n          Proxy = null;\n          UseProxy = false;\n        }\n        // CookieContainer =\n      }\n    }\n\n    protected class SendClientHandler : DelegatingHandler {\n      public SendClientHandler () : base (new HttpClientHandler ()) {;}\n      public SendClientHandler (HttpMessageHandler innerHandler) : base (innerHandler) {;}\n\n      protected override async Task<HttpResponseMessage> SendAsync (HttpRequestMessage request, CancellationToken cancellationToken) {\n        HttpResponseMessage response = await base.SendAsync (request, cancellationToken).ConfigureAwait (false);\n        return response;\n      }\n    }\n\n    private TimeSpan waittime = Timeout.InfiniteTimeSpan;\n    //TimeSpan.FromSeconds (800.0);\n\n    protected HttpResponseHeaders GetHead (Uri uri, Dictionary<string, string> send, CancellationTokenSource cancellationTokenSource) {\n      using (HttpClientHandler handler = new SSHttpClientHandler (proxyurl)) {\n        using (HttpClient client = new HttpClient (new SendClientHandler (handler))) {\n          foreach (KeyValuePair<String, String> h in defaultRequestHeaders)\n            client.DefaultRequestHeaders.Add (h.Key, h.Value);\n          client.Timeout = waittime;\n          client.MaxResponseContentBufferSize = 256000;\n\n          HttpRequestMessage request = new HttpRequestMessage ();\n          request.Method = HttpMethod.Head;\n          request.RequestUri = uri;\n\n          if (send != null)\n            request.Content = new FormUrlEncodedContent (send);\n\n          try {\n            Task<HttpResponseMessage> hTask = client.SendAsync (request, cancellationTokenSource.Token);\n            hTask.Wait ();\n            cookieContainer = handler.CookieContainer;\n            return hTask.Result.Headers;\n          } catch (HttpRequestException e) {\n            Exception ex = e;\n            while (ex != null) {\n              ex = ex.InnerException;\n            }\n            throw;\n          } catch (TaskCanceledException e) {\n            throw;\n          } catch (AggregateException e) {\n            Exception ex = e;\n            while (ex != null) {\n              ex = ex.InnerException;\n            }\n            throw;\n          }\n        }\n      }\n    }\n\n    protected async Task<String> WebAsync (Uri uri, HttpMethod method, Dictionary<string, string> send, CancellationTokenSource cancellationTokenSource) {\n      using (HttpClientHandler handler = new SSHttpClientHandler (proxyurl)) {\n        using (HttpClient client = new HttpClient (new SendClientHandler (handler))) {\n          foreach (KeyValuePair<String, String> h in defaultRequestHeaders)\n            client.DefaultRequestHeaders.Add (h.Key, h.Value);\n          client.Timeout = waittime;\n          client.MaxResponseContentBufferSize = 256000;\n\n          HttpRequestMessage request = new HttpRequestMessage ();\n          request.Method = method;\n          request.RequestUri = uri;\n\n          if (send != null)\n            request.Content = new FormUrlEncodedContent (send);\n\n          try {\n            Task<HttpResponseMessage> hTask = client.SendAsync (request, cancellationTokenSource.Token);\n            hTask.Wait ();\n            HttpResponseMessage response = hTask.Result;\n            cookieContainer = handler.CookieContainer;\n            if (response.IsSuccessStatusCode)\n              using (StreamReader reader = new StreamReader (await response.Content.ReadAsStreamAsync ()))\n                return reader.ReadToEndAsync ().Result;\n          } catch (HttpRequestException e) {\n            Exception ex = e;\n            while (ex != null) {\n              ex = ex.InnerException;\n            }\n            throw;\n          } catch (TaskCanceledException e) {\n            throw;\n          } catch (AggregateException e) {\n            Exception ex = e;\n            while (ex != null) {\n              ex = ex.InnerException;\n            }\n            throw;\n          }\n        }\n      }\n      return null;\n    }\n\n    public HttpResponseHeaders GetWebHead (Uri uri, Dictionary<string, string> send, CancellationTokenSource cancellationTokenSource) {\n      return GetHead (uri, send, cancellationTokenSource);\n    }\n\n    public async Task<String> GetWebAsync (Uri uri, Dictionary<string, string> send, CancellationTokenSource cancellationTokenSource) {\n      return await WebAsync (uri, HttpMethod.Get, send, cancellationTokenSource);\n    }\n\n    public async Task<String> PostWebAsync (Uri uri, Dictionary<string, string> send, CancellationTokenSource cancellationTokenSource) {\n      return await WebAsync (uri, HttpMethod.Post, send, cancellationTokenSource);\n    }\n  }\n}\n\n\n\u547c\u3073\u51fa\u3057\u5074\nprivate System.Windows.Forms.TextBox log;\nprivate System.Windows.Forms.Button getweb;\nprivate System.Windows.Forms.Button head;\n\n\n[Test.cs]\n    private void getweb_Click (Object sender, EventArgs e) {\n      TestHTTP http = new TestHTTP ();\n      // Uri uri = new Uri (@\"http://www.google.co.jp/\");\n      Uri uri = new Uri (@\"http://www.yahoo.co.jp/\");\n      String r = http.GetWebAsync (uri, null, new CancellationTokenSource ()).Result;\n      LogOut (r);\n    }\n\n    private void head_Click (Object sender, EventArgs e) {\n      TestHTTP http = new TestHTTP ();\n      Uri uri = new Uri (@\"http://www.yahoo.co.jp/\");\n      HttpResponseHeaders r = http.GetWebHead (uri, null, new CancellationTokenSource ());\n      LogOut (r.ToString ());\n    }\n\n\n\n\u203bexception\u306f\u51e6\u7406\u3092\u884c\u308f\u306a\u3044\u3067\u4e0a\u306b\u6295\u3052\u3066\u308b\u3060\u3051\u3067\u3059\u3002\n\n#\u672c\u4f53\n\n```csharp:[TestHTTP.cs]\nusing System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Net;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\n\nnamespace Test {\n  public partial class TestHTTP {\n    // \"http://proxy.foo.com:8080\"\n    public String proxyurl = null;\n\n    public TestHTTP () {;}\n\n    private Dictionary<String, String> defaultRequestHeaders =\n      new Dictionary<string, string> {\n        {@\"User-Agent\", @\"Mozilla/4.0 (compatible; MSIE 6.0; Windows XP)\"},\n        {@\"Accept-Language\", @\"ja-JP\"}\n      };\n    protected CookieContainer cookieContainer = null;\n\n    protected class SSHttpClientHandler : HttpClientHandler {\n      public SSHttpClientHandler (String proxyurl) {\n        if (proxyurl != null) {\n          Proxy = new WebProxy (proxyurl);\n          UseProxy = true;\n        } else {\n          Proxy = null;\n          UseProxy = false;\n        }\n        // CookieContainer =\n      }\n    }\n\n    protected class SendClientHandler : DelegatingHandler {\n      public SendClientHandler () : base (new HttpClientHandler ()) {;}\n      public SendClientHandler (HttpMessageHandler innerHandler) : base (innerHandler) {;}\n\n      protected override async Task<HttpResponseMessage> SendAsync (HttpRequestMessage request, CancellationToken cancellationToken) {\n        HttpResponseMessage response = await base.SendAsync (request, cancellationToken).ConfigureAwait (false);\n        return response;\n      }\n    }\n\n    private TimeSpan waittime = Timeout.InfiniteTimeSpan;\n    //TimeSpan.FromSeconds (800.0);\n\n    protected HttpResponseHeaders GetHead (Uri uri, Dictionary<string, string> send, CancellationTokenSource cancellationTokenSource) {\n      using (HttpClientHandler handler = new SSHttpClientHandler (proxyurl)) {\n        using (HttpClient client = new HttpClient (new SendClientHandler (handler))) {\n          foreach (KeyValuePair<String, String> h in defaultRequestHeaders)\n            client.DefaultRequestHeaders.Add (h.Key, h.Value);\n          client.Timeout = waittime;\n          client.MaxResponseContentBufferSize = 256000;\n\n          HttpRequestMessage request = new HttpRequestMessage ();\n          request.Method = HttpMethod.Head;\n          request.RequestUri = uri;\n\n          if (send != null)\n            request.Content = new FormUrlEncodedContent (send);\n\n          try {\n            Task<HttpResponseMessage> hTask = client.SendAsync (request, cancellationTokenSource.Token);\n            hTask.Wait ();\n            cookieContainer = handler.CookieContainer;\n            return hTask.Result.Headers;\n          } catch (HttpRequestException e) {\n            Exception ex = e;\n            while (ex != null) {\n              ex = ex.InnerException;\n            }\n            throw;\n          } catch (TaskCanceledException e) {\n            throw;\n          } catch (AggregateException e) {\n            Exception ex = e;\n            while (ex != null) {\n              ex = ex.InnerException;\n            }\n            throw;\n          }\n        }\n      }\n    }\n\n    protected async Task<String> WebAsync (Uri uri, HttpMethod method, Dictionary<string, string> send, CancellationTokenSource cancellationTokenSource) {\n      using (HttpClientHandler handler = new SSHttpClientHandler (proxyurl)) {\n        using (HttpClient client = new HttpClient (new SendClientHandler (handler))) {\n          foreach (KeyValuePair<String, String> h in defaultRequestHeaders)\n            client.DefaultRequestHeaders.Add (h.Key, h.Value);\n          client.Timeout = waittime;\n          client.MaxResponseContentBufferSize = 256000;\n\n          HttpRequestMessage request = new HttpRequestMessage ();\n          request.Method = method;\n          request.RequestUri = uri;\n\n          if (send != null)\n            request.Content = new FormUrlEncodedContent (send);\n\n          try {\n            Task<HttpResponseMessage> hTask = client.SendAsync (request, cancellationTokenSource.Token);\n            hTask.Wait ();\n            HttpResponseMessage response = hTask.Result;\n            cookieContainer = handler.CookieContainer;\n            if (response.IsSuccessStatusCode)\n              using (StreamReader reader = new StreamReader (await response.Content.ReadAsStreamAsync ()))\n                return reader.ReadToEndAsync ().Result;\n          } catch (HttpRequestException e) {\n            Exception ex = e;\n            while (ex != null) {\n              ex = ex.InnerException;\n            }\n            throw;\n          } catch (TaskCanceledException e) {\n            throw;\n          } catch (AggregateException e) {\n            Exception ex = e;\n            while (ex != null) {\n              ex = ex.InnerException;\n            }\n            throw;\n          }\n        }\n      }\n      return null;\n    }\n\n    public HttpResponseHeaders GetWebHead (Uri uri, Dictionary<string, string> send, CancellationTokenSource cancellationTokenSource) {\n      return GetHead (uri, send, cancellationTokenSource);\n    }\n\n    public async Task<String> GetWebAsync (Uri uri, Dictionary<string, string> send, CancellationTokenSource cancellationTokenSource) {\n      return await WebAsync (uri, HttpMethod.Get, send, cancellationTokenSource);\n    }\n\n    public async Task<String> PostWebAsync (Uri uri, Dictionary<string, string> send, CancellationTokenSource cancellationTokenSource) {\n      return await WebAsync (uri, HttpMethod.Post, send, cancellationTokenSource);\n    }\n  }\n}\n```\n\n\u547c\u3073\u51fa\u3057\u5074\n\n```\nprivate System.Windows.Forms.TextBox log;\nprivate System.Windows.Forms.Button getweb;\nprivate System.Windows.Forms.Button head;\n```\n\n```csharp:[Test.cs]\n    private void getweb_Click (Object sender, EventArgs e) {\n      TestHTTP http = new TestHTTP ();\n      // Uri uri = new Uri (@\"http://www.google.co.jp/\");\n      Uri uri = new Uri (@\"http://www.yahoo.co.jp/\");\n      String r = http.GetWebAsync (uri, null, new CancellationTokenSource ()).Result;\n      LogOut (r);\n    }\n\n    private void head_Click (Object sender, EventArgs e) {\n      TestHTTP http = new TestHTTP ();\n      Uri uri = new Uri (@\"http://www.yahoo.co.jp/\");\n      HttpResponseHeaders r = http.GetWebHead (uri, null, new CancellationTokenSource ());\n      LogOut (r.ToString ());\n    }\n```\n", "tags": ["C#", "HTTP"]}