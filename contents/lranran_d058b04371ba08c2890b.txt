{"context": "\uff08\u5909\u66f4\u5c65\u6b74\uff09\n2017/2/2\uff1ayu_ishikawa\u3055\u3093\u3001\u8868\u306e\u6574\u5f62\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff01\n\u304a\u3088\u3073\u3001f\u88dc\u5b8c\u5b50\u306e\u5c0f\u6570\u66f8\u5f0f\u3092\u8a02\u6b63\u3057\u307e\u3057\u305f\u3002\n\n\u5927\u4e0a\u6bb5\u306a\u30bf\u30a4\u30c8\u30eb\u3067\u3059\u304c\u3001paiza\u3084CodeIQ\u30bf\u30fc\u30b2\u30c3\u30c8\u306a\u306e\u3067\u7af6\u6280\u3068\u3044\u3046\u307b\u3069\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u304c\u2026\u2026\u3002\n\n\u6a19\u6e96\u5165\u51fa\u529b\n\u30ed\u30b8\u30c3\u30af\u306f\u5225\u3068\u3057\u3066\u7d50\u69cb\u9762\u5012\u306a\u306e\u304c\u6a19\u6e96\u5165\u51fa\u529b\u5468\u308a\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u3002\n\n\u5165\u529b\npaiza\u3067\u3088\u304f\u3042\u308b\u5165\u529b\u306e\u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u5f62\u5f0f\u304c\u3042\u308b\u3002\n\uff11\uff0e\u4e00\u884c\u76ee\u306f\u8a2d\u5b9a\n\uff12\uff0e\u4e8c\u884c\u76ee\u4ee5\u964d\u306b\u5b9f\u30c7\u30fc\u30bf\n\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5165\u529b\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n5 3\n123 456 789\n111 222 333\n1 2 3\n63 72 81\n100 200 300\n\n1\u884c\u76ee\u306e\u4e8c\u3064\u306e\u6570\u5b57\u306f\u3001\u305d\u308c\u305e\u308c\u5b9f\u30c7\u30fc\u30bf\u306e\u30ec\u30b3\u30fc\u30c9\u4ef6\u6570\u3001\u304a\u3088\u30731\u30ec\u30b3\u30fc\u30c9\u5185\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u6570\u3068\u306a\u308b\u3002\u4e8c\u884c\u76ee\u4ee5\u964d\u306b\u5b9f\u30c7\u30fc\u30bf\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306f5\u884c3\u5217\u306e\u30c7\u30fc\u30bf\uff09\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n\n\u4e00\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 - io.StdIn.readLine\n\u52d5\u304d\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u304c\u5229\u70b9\u3067\u3059\u3002\nobject Main extends App {\n  import scala.io.StdIn.readLine\n\n  val Array(rows, cols) = readLine split \" \" map(_.toInt)\n  val xss = for(i<- (1 to rows)) yield readLine split \" \" map(_.toInt) toList\n  println(xss.mkString(\" \"))\n\n// \u7d50\u679c\n// List(123, 456, 789) List(111, 222, 333) List(1, 2, 3) List(63, 72, 81) List(100, 200, 300)\n}\n\n\nScanner\u3092\u4f7f\u3046 - java.util.Scanner(System.in)\n\u304a\u305d\u3089\u304f\u3053\u308c\u304c\u6700\u3082\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u3067\u3059\u3002\nobject Main extends App {\n  val sc = new java.util.Scanner(System.in)\n  val rows, cols = sc.nextInt\n  val xss = List.fill(rows, cols)(sc.nextInt)\n  println(xss)\n\n// \u7d50\u679c\n// List(List(123, 456, 789), List(111, 222, 333), List(1, 2, 3), List(63, 72, 81), List(100, 200, 300))\n}\n\n\n\u8907\u6570\u884c\u8aad\u307f\u8fbc\u3080 - io.Source.stdin.getLines\nPaiza\u3067\u306f\u4f7f\u3048\u308b\u5834\u9762\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u304c\u3001\u4ed6\u3067\u306f\u4f7f\u3048\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u5165\u529b\u304c\u7d9a\u304f\u9650\u308a\u8aad\u307f\u8fbc\u3080\u30b1\u30fc\u30b9\nobject Main extends App {\n  val xss = for(l <- scala.io.Source.stdin.getLines) yield (l split \" \" map(_.toInt) toList)\n  println(xss.mkString(\" \"))\n\n// \u7d50\u679c\n// List(5, 3) List(123, 456, 789) List(111, 222, 333) List(1, 2, 3) List(63, 72, 81) List(100, 200, 300)\n}\n\n\n\u7279\u5b9a\u306e\u6570\u5024\u3092\u53d7\u3051\u53d6\u308b\u307e\u3067\u8aad\u307f\u8fbc\u3080\u30b1\u30fc\u30b9\n\u305f\u3068\u3048\u3070\u3001-1\u304c\u4e0e\u3048\u3089\u308c\u308b\u307e\u3067\u8aad\u307f\u8fbc\u3080\u5834\u5408\u3002\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n-1\n\nfor\u5f0f\u3068if\u30ac\u30fc\u30c9\u3092\u3064\u304b\u3063\u3066\"-1\"\u3068\u3044\u3046\u6587\u5b57\u5217\u304c\u6765\u308b\u307e\u3067yield\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\nobject Main extends App {\n  val xss = for (l <- scala.io.Source.stdin.getLines; if l != \"-1\") yield (l split \" \" map(_.toInt) toList)\n  println(xss.mkString(\" \"))\n// \u7d50\u679c\n// List(1, 2, 3) List(1, 2, 3) List(1, 2, 3) List(1, 2, 3) List(1, 2, 3)\n}\n\n\n\u7279\u5b9a\u306e\u66f8\u5f0f\u306b\u5f93\u3063\u3066\u8aad\u307f\u53d6\u308b\u3002\n\u7279\u5b9a\u306e\u66f8\u5f0f\uff08\u305f\u3068\u3048\u3070yyyy/mm/dd\u306a\u3069\uff09\u306b\u5f93\u3063\u3066\u5165\u529b\u304c\u4e0e\u3048\u3089\u308c\u308b\u30b1\u30fc\u30b9\u3067\u3059\u3002\u6b63\u898f\u8868\u73fe\u3068Iterator\u3067\u4e57\u308a\u5207\u308a\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u5165\u529b\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3057\u307e\u3059\u3002\n2017/01/31 10:09:32\n\n\u4e00\u4f8b\u3068\u3057\u3066\nobject Main extends App {\n  import scala.io.StdIn.readLine\n\n  val r = \"\"\"\\d{2,4}\"\"\".r\n  val dt = r.findAllIn(readLine)\n  val yyyy, mm, dd, hour, min, sec = dt.next.toInt\n  println(yyyy, mm, dd, hour, min, sec)\n\n// \u7d50\u679c\n// (2017, 1, 31, 10, 9, 32)\n}\n\n\n\u7d50\u8ad6\nPaiza\u3001CodeIQ\u3067\u306f\u4ee5\u4e0b\u3092\u307e\u305a\u30b3\u30d4\u30da\u3057\u3066\u304a\u304f\u3068\u6357\u308b\u306f\u305a\u3067\u3059\u3002\nobject Main extends App {\n  val sc = new java.util.Scanner(System.in)\n  /* Sample Code */\n  val rows, cols = sc.nextInt\n  val xss = List.fill(rows, cols)(sc.nextInt)\n  println(xss)\n}\n\n\n\u53c2\u8003\uff1a\nScala\u3067\u6a19\u6e96\u5165\u529b\u3092\u53d7\u3051\u53d6\u308b - Perl\u65e5\u8a18\nScala\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff08\u5165\u51fa\u529b\u7de8\uff09 - Qiita\nScala\u306e\u6a19\u6e96\u5165\u529b - Qiita\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3051\u308bScala\u306e\u6a19\u6e96\u5165\u529b\u3092\u697d\u306b\u3059\u308b - Qiita\n\u3010Scala\u3011 \u6b63\u898f\u8868\u73fe\u306b\u3088\u308b\u6587\u5b57\u5217\u691c\u7d22 - takafumi blog\nPython\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u6642\u306b\u77e5\u3063\u3066\u304a\u304d\u305f\u3044tips(\u5165\u51fa\u529b\u7de8) - Qiita\n\n\u51fa\u529b\n\u5165\u529b\u51e6\u7406\u306b\u6bd4\u3079\u3066\u30d1\u30bf\u30fc\u30f3\u306f\u5c11\u306a\u3044\u3067\u3059\u3002\n\n\u666e\u901a\u306eprintln\nprintln(\"Hello, World!\")\n// Hello, World!\nprintln(\"Hello,\\nWorld!\")\n// Hello,\n// World!\n\n\ns\u88dc\u5b8c\u5b50\n\u5909\u6570\u3001\u5f0f\u3092\u57cb\u3081\u8fbc\u3081\u308b\u3002\nval w = \"World\"\nprintln(s\"Hello, ${w}!\")\n// Hello, World!\nprintln(s\"1 + 1 = ${1+1}\")\n// 1 + 1 = 2\nprintln(s\"${for (i<-(1 to 10)) yield i}\")\n// Vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n\nf\u88dc\u5b8c\u5b50\ns\u88dc\u5b8c\u5b50\u306b\u66f8\u5f0f\u6307\u5b9a\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u305f\u3082\u306e\nval a = 12\nval b = \"aaa\"\nprintln(f\"${a}%03d\")\n// 012\nprintln(f\"${a}%04.2f\")\n// 12.00 (\u672c\u6765\u306f0012.00\u3068\u3044\u3046\u52d5\u304d\u3092\u671f\u5f85\u3057\u3066\u3044\u305f\u306e\u3060\u304c\u2026\u2026\uff09\nprintln(f\"${b}%10s\")\n// \"       aaa\"\n\n\n\u53c2\u8003\uff1a\nscala\u306e\u6587\u5b57\u5217\u3044\u308d\u3044\u308d\u3042\u308a\u3059\u304e\u3066\u7b11\u3063\u305f\u3051\u3069\u4fbf\u5229\u3060\u3063\u305f | KentaKomai Blog\nprintf\u3067\u6587\u5b57\u5217\u306e\u6700\u5927\u6587\u5b57\u6570\u3092\u6307\u5b9a\u3059\u308b - \u63ee\u767a\u6027\u306e\u30e1\u30e2\n\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u4e00\u89a7\nfprintf()\n\n\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\nPaiza\u3067\u306fInt\u3082\u3057\u304f\u306fLong\u3067\u5341\u5206\u3068\u601d\u308f\u308c\u307e\u3059\u304c\u3001\u5ff5\u306e\u305f\u3081\u3002\n\n\n\n\u578b\u540d\n\u8aac\u660e\n\u7bc4\u56f2\uff08\u6570\u5024\u578b\u306e\u5834\u5408\uff09\n\u4f8b\n\n\n\n\nBoolean\n\u771f\u507d\u5024\n\ntrue,false\n\n\nString\n\u6587\u5b57\u5217\n\n\"abcde\"\n\n\nChar\n2\u30d0\u30a4\u30c8Unicode\u6587\u5b57\n\n'A','\u3042'\n\n\nByte\n8\u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u6574\u6570\u5024\n-128\uff5e127\n\uff08\u7701\u7565\uff09\n\n\nShort\n16\u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u6574\u6570\u5024\n-32768\uff5e32767\n\uff08\u7701\u7565\uff09\n\n\nInt\n32\u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u6574\u6570\u5024\n-2147483648\uff5e2147483647\n\uff08\u7701\u7565\uff09\n\n\nLong\n64\u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u6574\u6570\u5024\n-9223372036854775808\uff5e9223372036854775807\n\uff08\u7701\u7565\uff09\n\n\nFloat\n32\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\n-3.4028235E38\uff5e3.4028235E38\n0.2f, 1e-2f\n\n\nDouble\n64\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\n-1.7976931348623157E308\uff5e1.7976931348623157E308\n0.2, 0.2d, 1e-2, 1e-2d\n\n\nBigInt\n\u4efb\u610f\u6841\u6570\u306e\u6574\u6570\n\u591a\u5206\u306a\u3044\nBigInt(10), BigInt(\"123179623176239716237619241\")\n\n\nBigDecimal\n\u4efb\u610f\u6841\u6570\u306e\u6570\u5024\uff08\u5c0f\u6570\u70b9\u6709\u308a\uff09\n\u3042\u308b\u7a0b\u5ea6\u6574\u6570\u90e8\u304c\u5927\u304d\u3044\u3068\u5c0f\u6570\u90e8\u304c\u4e38\u3081\u3089\u308c\u308b\nBigDecimal(10000.12345), BigDecimal(\"123719.1823761238\")\n\n\n\nScala\u306eLong\u578b\u306fc\u8a00\u8a9e\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u300clong long\u300d\u578b\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\nBigInt\u306f\u3053\u3093\u306a\u98a8\u306b\u4f7f\u3044\u307e\u3059\u3002\u3059\u3093\u3054\u3044\u5927\u304d\u306a\u6570\u5b57\u3092\u6271\u3046\u306e\u306b\u4fbf\u5229\u3067\u3059\uff08\u9045\u3044\u3051\u3069\uff09\u3002\nscala> val v = BigInt(1234567890)\nv: scala.math.BigInt = 1234567890\n\nscala> v + v\nres14: scala.math.BigInt = 2469135780\n\nscala> v * v\nres15: scala.math.BigInt = 1524157875019052100\n\nscala> v * v * v\nres16: scala.math.BigInt = 1881676371789154860897069000\n\nscala> v * v * v * v\nres17: scala.math.BigInt = 2323057227982592441500937982514410000\n\nscala> (v * v * v * v).toDouble\nres18: Double = 2.3230572279825926E36\n\nscala> val v2 = v * v * v * v\nv2: scala.math.BigInt = 2323057227982592441500937982514410000\n\nscala> v2\nres19: scala.math.BigInt = 2323057227982592441500937982514410000\n\nscala> val v3 = BigInt(23179871238719823798138927198)\n<console>:1: error: integer number too large\n       val v3 = BigInt(23179871238719823798138927198)\n                       ^\n\nscala> v2 * -1\nres20: scala.math.BigInt = -2323057227982592441500937982514410000\n\nscala> v2 * -1 + 10\nres21: scala.math.BigInt = -2323057227982592441500937982514409990\n\n\n\u53c2\u8003\uff1a\n\u7b2c6\u7ae0\uff1aScala\u306e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3092\u8a9e\u308b - Qiita\n\u733f\u3067\u3082\u5206\u304b\u308bScala!\uff1aScala\u306e\u578b - Qiita\n\n\u30a2\u30b9\u30ea\u30fc\u30c8\u306e\u7686\u69d8\n\u53c2\u8003\uff1a\nScala\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3057\u3066\u307f\u308b - Lizan's note\nscala\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 -ABC001- - scache's diary\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30e2\u30fc\u30c9\u306escala\u3092\u66f8\u3044\u3066\u307f\u305f\uff57\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7279\u6709\u306e\u5909\u306a\u5b9f\u88c5\u30c6\u30af // ichyo.jp \u2192 C++\u3060\u3051\u3069\u6709\u7528\u3067\u3059\nScala\u6b740\u65e5\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u554f\u984c\u306bScala\u3067\u89e3\u7b54\u3057\u3066\u307f\u305f - \u306f\u3080\u5409\uff08\u306e\u3093\u3073\u308a\uff09\u306e\u7df4\u7fd2\u30ce\u30fc\u30c8\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 in Scala - \u7d14\u7c8b\u95a2\u6570\u578b\u96d1\u8a18\u5e33\nScala\u3067Codeforces#97 Div2\u53c2\u52a0\u3057\u3066\u307f\u305f - \u304f\u3058\u3089\u306b\u3063\u304d++\nPython\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u6642\u306b\u77e5\u3063\u3066\u304a\u304d\u305f\u3044tips - Qiita \u2192 Python\u3060\u3051\u3069\u7d50\u69cbScala\u306b\u3082\u5fdc\u7528\u3067\u304d\u307e\u3059\u3002\n\n\u4e00\u822c\u8ad6\n\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3078\u306e\u5fc3\u69cb\u3048\u3001\u89e3\u304d\u65b9\n\u52d5\u7684\u8a08\u753b\u6cd5\u3001\u5e45\u512a\u5148\u63a2\u7d22\u3001\u6df1\u3055\u512a\u5148\u63a2\u7d22\u306a\u3069\u306a\u3069\u3002\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 | \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5de5\u623f\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 Wiki*\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u554f\u984c\u306e\u89e3\u304d\u65b9\u3001\u305d\u306e\u30de\u30cb\u30e5\u30a2\u30eb \u00b7 \u3046\u3055\u304e\u5c0f\u5c4b\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u983b\u51fa\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u653b\u7565\n\n\u6709\u540d\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b5\u30a4\u30c8\nyukicoder\nTopcoder | Deliver Faster through Crowdsourcing\nAtCoder\nAIZU ONLINE JUDGE: Programming Challenge\nWelcome To PKU JudgeOnline\n\n\u305d\u306e\u4ed6\nScala\u3092\u59cb\u3081\u3066\u65e95\u5e74\u3001\u4eca\u4e00\u5ea6\u51b7\u9759\u306bScala\u3068\u5411\u304d\u5408\u3063\u3066\u307f\u305f - tehepero note(\u30fb\u03c9<)\n\uff08\u5909\u66f4\u5c65\u6b74\uff09\n2017/2/2\uff1ayu_ishikawa\u3055\u3093\u3001\u8868\u306e\u6574\u5f62\u3069\u3046\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\uff01\n\u304a\u3088\u3073\u3001f\u88dc\u5b8c\u5b50\u306e\u5c0f\u6570\u66f8\u5f0f\u3092\u8a02\u6b63\u3057\u307e\u3057\u305f\u3002\n\n---\n\n\u5927\u4e0a\u6bb5\u306a\u30bf\u30a4\u30c8\u30eb\u3067\u3059\u304c\u3001paiza\u3084CodeIQ\u30bf\u30fc\u30b2\u30c3\u30c8\u306a\u306e\u3067\u7af6\u6280\u3068\u3044\u3046\u307b\u3069\u3067\u3082\u3042\u308a\u307e\u305b\u3093\u304c\u2026\u2026\u3002\n\n# \u6a19\u6e96\u5165\u51fa\u529b\n\u30ed\u30b8\u30c3\u30af\u306f\u5225\u3068\u3057\u3066\u7d50\u69cb\u9762\u5012\u306a\u306e\u304c\u6a19\u6e96\u5165\u51fa\u529b\u5468\u308a\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\u3002\n\n## \u5165\u529b\npaiza\u3067\u3088\u304f\u3042\u308b\u5165\u529b\u306e\u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u5f62\u5f0f\u304c\u3042\u308b\u3002\n\uff11\uff0e\u4e00\u884c\u76ee\u306f\u8a2d\u5b9a\n\uff12\uff0e\u4e8c\u884c\u76ee\u4ee5\u964d\u306b\u5b9f\u30c7\u30fc\u30bf\n\n\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5165\u529b\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n\n```bash\n5 3\n123 456 789\n111 222 333\n1 2 3\n63 72 81\n100 200 300\n```\n\n1\u884c\u76ee\u306e\u4e8c\u3064\u306e\u6570\u5b57\u306f\u3001\u305d\u308c\u305e\u308c\u5b9f\u30c7\u30fc\u30bf\u306e\u30ec\u30b3\u30fc\u30c9\u4ef6\u6570\u3001\u304a\u3088\u30731\u30ec\u30b3\u30fc\u30c9\u5185\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u6570\u3068\u306a\u308b\u3002\u4e8c\u884c\u76ee\u4ee5\u964d\u306b\u5b9f\u30c7\u30fc\u30bf\uff08\u4e0a\u8a18\u306e\u4f8b\u3067\u306f5\u884c3\u5217\u306e\u30c7\u30fc\u30bf\uff09\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\n\n### \u4e00\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 - io.StdIn.readLine\n\u52d5\u304d\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u306e\u304c\u5229\u70b9\u3067\u3059\u3002\n\n```scala\nobject Main extends App {\n  import scala.io.StdIn.readLine\n  \n  val Array(rows, cols) = readLine split \" \" map(_.toInt)\n  val xss = for(i<- (1 to rows)) yield readLine split \" \" map(_.toInt) toList\n  println(xss.mkString(\" \"))\n\n// \u7d50\u679c\n// List(123, 456, 789) List(111, 222, 333) List(1, 2, 3) List(63, 72, 81) List(100, 200, 300)\n}\n```\n\n### Scanner\u3092\u4f7f\u3046 - java.util.Scanner(System.in)\n\u304a\u305d\u3089\u304f\u3053\u308c\u304c\u6700\u3082\u4f7f\u3044\u52dd\u624b\u304c\u826f\u3044\u3067\u3059\u3002\n\n```scala\nobject Main extends App {\n  val sc = new java.util.Scanner(System.in)\n  val rows, cols = sc.nextInt\n  val xss = List.fill(rows, cols)(sc.nextInt)\n  println(xss)\n\n// \u7d50\u679c\n// List(List(123, 456, 789), List(111, 222, 333), List(1, 2, 3), List(63, 72, 81), List(100, 200, 300))\n}\n```\n\n### \u8907\u6570\u884c\u8aad\u307f\u8fbc\u3080 - io.Source.stdin.getLines\nPaiza\u3067\u306f\u4f7f\u3048\u308b\u5834\u9762\u304c\u601d\u3044\u3064\u304b\u306a\u3044\u304c\u3001\u4ed6\u3067\u306f\u4f7f\u3048\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n#### \u5165\u529b\u304c\u7d9a\u304f\u9650\u308a\u8aad\u307f\u8fbc\u3080\u30b1\u30fc\u30b9\n\n```scala\nobject Main extends App {\n  val xss = for(l <- scala.io.Source.stdin.getLines) yield (l split \" \" map(_.toInt) toList)\n  println(xss.mkString(\" \"))\n\n// \u7d50\u679c\n// List(5, 3) List(123, 456, 789) List(111, 222, 333) List(1, 2, 3) List(63, 72, 81) List(100, 200, 300)\n}\n```\n\n#### \u7279\u5b9a\u306e\u6570\u5024\u3092\u53d7\u3051\u53d6\u308b\u307e\u3067\u8aad\u307f\u8fbc\u3080\u30b1\u30fc\u30b9\n\u305f\u3068\u3048\u3070\u3001-1\u304c\u4e0e\u3048\u3089\u308c\u308b\u307e\u3067\u8aad\u307f\u8fbc\u3080\u5834\u5408\u3002\n\n```bash\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n1 2 3\n-1\n```\n\nfor\u5f0f\u3068if\u30ac\u30fc\u30c9\u3092\u3064\u304b\u3063\u3066\"-1\"\u3068\u3044\u3046\u6587\u5b57\u5217\u304c\u6765\u308b\u307e\u3067yield\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\n\n```scala\nobject Main extends App {\n  val xss = for (l <- scala.io.Source.stdin.getLines; if l != \"-1\") yield (l split \" \" map(_.toInt) toList)\n  println(xss.mkString(\" \"))\n// \u7d50\u679c\n// List(1, 2, 3) List(1, 2, 3) List(1, 2, 3) List(1, 2, 3) List(1, 2, 3)\n}\n```\n\n### \u7279\u5b9a\u306e\u66f8\u5f0f\u306b\u5f93\u3063\u3066\u8aad\u307f\u53d6\u308b\u3002\n\u7279\u5b9a\u306e\u66f8\u5f0f\uff08\u305f\u3068\u3048\u3070yyyy/mm/dd\u306a\u3069\uff09\u306b\u5f93\u3063\u3066\u5165\u529b\u304c\u4e0e\u3048\u3089\u308c\u308b\u30b1\u30fc\u30b9\u3067\u3059\u3002\u6b63\u898f\u8868\u73fe\u3068Iterator\u3067\u4e57\u308a\u5207\u308a\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u5165\u529b\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3057\u307e\u3059\u3002\n\n```bash\n2017/01/31 10:09:32\n```\n\n\u4e00\u4f8b\u3068\u3057\u3066\n\n```scala\nobject Main extends App {\n  import scala.io.StdIn.readLine\n  \n  val r = \"\"\"\\d{2,4}\"\"\".r\n  val dt = r.findAllIn(readLine)\n  val yyyy, mm, dd, hour, min, sec = dt.next.toInt\n  println(yyyy, mm, dd, hour, min, sec)\n\n// \u7d50\u679c\n// (2017, 1, 31, 10, 9, 32)\n}\n```\n\n### \n\n### \u7d50\u8ad6\nPaiza\u3001CodeIQ\u3067\u306f\u4ee5\u4e0b\u3092\u307e\u305a\u30b3\u30d4\u30da\u3057\u3066\u304a\u304f\u3068\u6357\u308b\u306f\u305a\u3067\u3059\u3002\n\n```scala\nobject Main extends App {\n  val sc = new java.util.Scanner(System.in)\n  /* Sample Code */\n  val rows, cols = sc.nextInt\n  val xss = List.fill(rows, cols)(sc.nextInt)\n  println(xss)\n}\n```\n\n#### \u53c2\u8003\uff1a\n[Scala\u3067\u6a19\u6e96\u5165\u529b\u3092\u53d7\u3051\u53d6\u308b \\- Perl\u65e5\u8a18](http://r9.hateblo.jp/entry/2016/01/05/232036)\n[Scala\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff08\u5165\u51fa\u529b\u7de8\uff09 \\- Qiita](http://qiita.com/nel215/items/2cc03daaac29b03af176)\n[Scala\u306e\u6a19\u6e96\u5165\u529b \\- Qiita](http://qiita.com/nesheep5/items/cd2e6113e6aada97112a)\n[\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3051\u308bScala\u306e\u6a19\u6e96\u5165\u529b\u3092\u697d\u306b\u3059\u308b \\- Qiita](http://qiita.com/cohalz/items/a54bfc70e4bbc33440cb)\n[\u3010Scala\u3011 \u6b63\u898f\u8868\u73fe\u306b\u3088\u308b\u6587\u5b57\u5217\u691c\u7d22 \\- takafumi blog](http://takafumi-s.hatenablog.com/entry/2015/08/19/130513)\n[Python\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u6642\u306b\u77e5\u3063\u3066\u304a\u304d\u305f\u3044tips\\(\u5165\u51fa\u529b\u7de8\\) \\- Qiita](http://qiita.com/lethe2211/items/6cbade2bc547649bc040)\n\n## \u51fa\u529b\n\u5165\u529b\u51e6\u7406\u306b\u6bd4\u3079\u3066\u30d1\u30bf\u30fc\u30f3\u306f\u5c11\u306a\u3044\u3067\u3059\u3002\n### \u666e\u901a\u306eprintln\n\n```scala\nprintln(\"Hello, World!\")\n// Hello, World!\nprintln(\"Hello,\\nWorld!\")\n// Hello,\n// World!\n```\n\n### s\u88dc\u5b8c\u5b50\n\u5909\u6570\u3001\u5f0f\u3092\u57cb\u3081\u8fbc\u3081\u308b\u3002\n\n```scala\nval w = \"World\"\nprintln(s\"Hello, ${w}!\")\n// Hello, World!\nprintln(s\"1 + 1 = ${1+1}\")\n// 1 + 1 = 2\nprintln(s\"${for (i<-(1 to 10)) yield i}\")\n// Vector(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n```\n\n### f\u88dc\u5b8c\u5b50\ns\u88dc\u5b8c\u5b50\u306b\u66f8\u5f0f\u6307\u5b9a\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u305f\u3082\u306e\n\n```scala\nval a = 12\nval b = \"aaa\"\nprintln(f\"${a}%03d\")\n// 012\nprintln(f\"${a}%04.2f\")\n// 12.00 (\u672c\u6765\u306f0012.00\u3068\u3044\u3046\u52d5\u304d\u3092\u671f\u5f85\u3057\u3066\u3044\u305f\u306e\u3060\u304c\u2026\u2026\uff09\nprintln(f\"${b}%10s\")\n// \"       aaa\"\n```\n\n#### \u53c2\u8003\uff1a\n[scala\u306e\u6587\u5b57\u5217\u3044\u308d\u3044\u308d\u3042\u308a\u3059\u304e\u3066\u7b11\u3063\u305f\u3051\u3069\u4fbf\u5229\u3060\u3063\u305f \\| KentaKomai Blog](http://komaken.me/blog/2014/10/18/scala%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D%E3%81%82%E3%82%8A%E3%81%99%E3%81%8E%E3%81%A6%E7%AC%91%E3%81%A3%E3%81%9F%E3%81%91%E3%81%A9%E4%BE%BF%E5%88%A9%E3%81%A0/)\n[printf\u3067\u6587\u5b57\u5217\u306e\u6700\u5927\u6587\u5b57\u6570\u3092\u6307\u5b9a\u3059\u308b \\- \u63ee\u767a\u6027\u306e\u30e1\u30e2](http://d.hatena.ne.jp/iww/20090701/printf)\n[\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6307\u5b9a\u5b50\u4e00\u89a7](http://www.k-cube.co.jp/wakaba/server/format.html)\n[fprintf\\(\\)](http://www.k-cube.co.jp/wakaba/server/func/fprintf.html)\n\n## \u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\nPaiza\u3067\u306fInt\u3082\u3057\u304f\u306fLong\u3067\u5341\u5206\u3068\u601d\u308f\u308c\u307e\u3059\u304c\u3001\u5ff5\u306e\u305f\u3081\u3002\n\n| \u578b\u540d       | \u8aac\u660e                         | \u7bc4\u56f2\uff08\u6570\u5024\u578b\u306e\u5834\u5408\uff09                            | \u4f8b                                                       |\n|------------|------------------------------|-------------------------------------------------|----------------------------------------------------------|\n| Boolean    | \u771f\u507d\u5024                       |                                                 | true,false                                               |\n| String     | \u6587\u5b57\u5217                       |                                                 | \"abcde\"                                                  |\n| Char       | 2\u30d0\u30a4\u30c8Unicode\u6587\u5b57           |                                                 | 'A','\u3042'                                                 |\n| Byte       | 8\u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u6574\u6570\u5024          | -128\uff5e127                                       | \uff08\u7701\u7565\uff09                                                 |\n| Short      | 16\u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u6574\u6570\u5024         | -32768\uff5e32767                                   | \uff08\u7701\u7565\uff09                                                 |\n| Int        | 32\u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u6574\u6570\u5024         | -2147483648\uff5e2147483647                         | \uff08\u7701\u7565\uff09                                                 |\n| Long       | 64\u30d3\u30c3\u30c8\u7b26\u53f7\u4ed8\u6574\u6570\u5024         | -9223372036854775808\uff5e9223372036854775807       | \uff08\u7701\u7565\uff09                                                 |\n| Float      | 32\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570         | -3.4028235E38\uff5e3.4028235E38                     | 0.2f, 1e-2f                                              |\n| Double     | 64\u30d3\u30c3\u30c8\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570         | -1.7976931348623157E308\uff5e1.7976931348623157E308 | 0.2, 0.2d, 1e-2, 1e-2d                                   |\n| BigInt     | \u4efb\u610f\u6841\u6570\u306e\u6574\u6570               | \u591a\u5206\u306a\u3044                                        | BigInt(10), BigInt(\"123179623176239716237619241\")        |\n| BigDecimal | \u4efb\u610f\u6841\u6570\u306e\u6570\u5024\uff08\u5c0f\u6570\u70b9\u6709\u308a\uff09 | \u3042\u308b\u7a0b\u5ea6\u6574\u6570\u90e8\u304c\u5927\u304d\u3044\u3068\u5c0f\u6570\u90e8\u304c\u4e38\u3081\u3089\u308c\u308b      | BigDecimal(10000.12345), BigDecimal(\"123719.1823761238\") |\n\nScala\u306eLong\u578b\u306fc\u8a00\u8a9e\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u300clong long\u300d\u578b\u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\nBigInt\u306f\u3053\u3093\u306a\u98a8\u306b\u4f7f\u3044\u307e\u3059\u3002\u3059\u3093\u3054\u3044\u5927\u304d\u306a\u6570\u5b57\u3092\u6271\u3046\u306e\u306b\u4fbf\u5229\u3067\u3059\uff08\u9045\u3044\u3051\u3069\uff09\u3002\n\n```scala\nscala> val v = BigInt(1234567890)\nv: scala.math.BigInt = 1234567890\n\nscala> v + v\nres14: scala.math.BigInt = 2469135780\n\nscala> v * v\nres15: scala.math.BigInt = 1524157875019052100\n\nscala> v * v * v\nres16: scala.math.BigInt = 1881676371789154860897069000\n\nscala> v * v * v * v\nres17: scala.math.BigInt = 2323057227982592441500937982514410000\n\nscala> (v * v * v * v).toDouble\nres18: Double = 2.3230572279825926E36\n\nscala> val v2 = v * v * v * v\nv2: scala.math.BigInt = 2323057227982592441500937982514410000\n\nscala> v2\nres19: scala.math.BigInt = 2323057227982592441500937982514410000\n\nscala> val v3 = BigInt(23179871238719823798138927198)\n<console>:1: error: integer number too large\n       val v3 = BigInt(23179871238719823798138927198)\n                       ^\n\nscala> v2 * -1\nres20: scala.math.BigInt = -2323057227982592441500937982514410000\n\nscala> v2 * -1 + 10\nres21: scala.math.BigInt = -2323057227982592441500937982514409990\n```\n\n#### \u53c2\u8003\uff1a\n[\u7b2c6\u7ae0\uff1aScala\u306e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3092\u8a9e\u308b \\- Qiita](http://qiita.com/f81@github/items/c43803f4a8da94615c9c)\n[\u733f\u3067\u3082\u5206\u304b\u308bScala\\!\uff1aScala\u306e\u578b \\- Qiita](http://qiita.com/msano/items/151a6402605df071a7de)\n\n## \u30a2\u30b9\u30ea\u30fc\u30c8\u306e\u7686\u69d8\n\u53c2\u8003\uff1a\n[Scala\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3057\u3066\u307f\u308b \\- Lizan's note](https://lizan.asia/blog/2012/12/11/scala-competitive/)\n[scala\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \\-ABC001\\- \\- scache's diary](http://scache.hatenablog.jp/entry/2014/09/17/130057)\n[\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30e2\u30fc\u30c9\u306escala\u3092\u66f8\u3044\u3066\u307f\u305f\uff57](https://gist.github.com/akihiro4chawon/898160)\n[\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7279\u6709\u306e\u5909\u306a\u5b9f\u88c5\u30c6\u30af // ichyo\\.jp](http://ichyo.jp/posts/2014-12-15-advent-calender/) \u2192 C++\u3060\u3051\u3069\u6709\u7528\u3067\u3059\n[Scala\u6b740\u65e5\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u554f\u984c\u306bScala\u3067\u89e3\u7b54\u3057\u3066\u307f\u305f \\- \u306f\u3080\u5409\uff08\u306e\u3093\u3073\u308a\uff09\u306e\u7df4\u7fd2\u30ce\u30fc\u30c8](http://hamukichi.hatenablog.jp/entry/2016/02/18/195019)\n[\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 in Scala \\- \u7d14\u7c8b\u95a2\u6570\u578b\u96d1\u8a18\u5e33](http://d.hatena.ne.jp/tanakh/20090908)\n[Scala\u3067Codeforces\\#97 Div2\u53c2\u52a0\u3057\u3066\u307f\u305f \\- \u304f\u3058\u3089\u306b\u3063\u304d\\+\\+](http://kujira16.hateblo.jp/entry/20111210/1323534495)\n[Python\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u6642\u306b\u77e5\u3063\u3066\u304a\u304d\u305f\u3044tips \\- Qiita](http://qiita.com/lethe2211/items/b91cc9e2b355ad32f1e6) \u2192 Python\u3060\u3051\u3069\u7d50\u69cbScala\u306b\u3082\u5fdc\u7528\u3067\u304d\u307e\u3059\u3002\n\n# \u4e00\u822c\u8ad6\n## \u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3078\u306e\u5fc3\u69cb\u3048\u3001\u89e3\u304d\u65b9\n\u52d5\u7684\u8a08\u753b\u6cd5\u3001\u5e45\u512a\u5148\u63a2\u7d22\u3001\u6df1\u3055\u512a\u5148\u63a2\u7d22\u306a\u3069\u306a\u3069\u3002\n[\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \\| \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u5de5\u623f](http://koubou.cs.kanagawa-it.ac.jp/procon/)\n[\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 Wiki\\*](http://wikiwiki.jp/kyopro/)\n[\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u554f\u984c\u306e\u89e3\u304d\u65b9\u3001\u305d\u306e\u30de\u30cb\u30e5\u30a2\u30eb \u00b7 \u3046\u3055\u304e\u5c0f\u5c4b](https://kimiyuki.net/blog/2016/06/21/how-to-solve-problems-in-competitive-programming/)\n[\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u983b\u51fa\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u653b\u7565](http://www.slideshare.net/MonetoK/ss-56993100)\n\n## \u6709\u540d\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b5\u30a4\u30c8\n[yukicoder](https://yukicoder.me/)\n[Topcoder \\| Deliver Faster through Crowdsourcing](https://www.topcoder.com/)\n[AtCoder](https://atcoder.jp/)\n[AIZU ONLINE JUDGE: Programming Challenge](http://judge.u-aizu.ac.jp/onlinejudge/)\n[Welcome To PKU JudgeOnline](http://poj.org/)\n\n## \u305d\u306e\u4ed6\n[Scala\u3092\u59cb\u3081\u3066\u65e95\u5e74\u3001\u4eca\u4e00\u5ea6\u51b7\u9759\u306bScala\u3068\u5411\u304d\u5408\u3063\u3066\u307f\u305f \\- tehepero note\\(\u30fb\u03c9<\\)](http://blog.stormcat.io/entry/2015/03/11/214212)\n", "tags": ["Scala", "\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}