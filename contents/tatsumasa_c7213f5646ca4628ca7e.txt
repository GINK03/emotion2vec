{"tags": ["Python", "python2.7", "pyserial"], "context": "pyserial\u3067\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3059\u308b\u305f\u3081\u306e\u30ea\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30c8\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u304c\u3001\n\u3069\u3046\u3082\u9045\u3044\u611f\u3058\u304c\u3057\u305f\u306e\u3067\u8abf\u3079\u305f\u7d50\u679c\u3092\u30e1\u30e2\u3002\n\n\u4eca\u307e\u3067\u306e\u5b9f\u88c5\n\u7279\u306b\u4f55\u3082\u8003\u3048\u305a\u3001\u3068\u308a\u3042\u3048\u305a\u30d0\u30a4\u30c8\u6587\u5b57\u5217\u304c\u4f5c\u308c\u308c\u3070\u3044\u3044\u3084\u3068\u3044\u3046\u5358\u7d14\u306a\u3082\u306e\u3002\n    data = [ _ for _ in xrange(0, 10) ]\n    byte_str = \"\".join([chr(x) for x in send_list])\n    # byte_str => '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t'\n\n\n\u51e6\u7406\u901f\u5ea6\u691c\u8a3c\n\u5225\u306e\u5b9f\u88c5\u65b9\u6cd5\u3092\u6a21\u7d22\u3057\u3066\u3044\u305f\u6240\u3001\u53c2\u8003\u30ea\u30f3\u30af\u306b\u3042\u308bstackoverflow\u306e\u8a18\u4e8b\u306b\u66f8\u304b\u308c\u3066\u3044\u305f\n\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u308b\u4e8b\u306b\u3057\u305f\u3002\n\u306a\u304a\u3001python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f2\u7cfb\u3067\u3059\u3002\nimport time\nimport array\nimport struct\n\ndef main():\n    # \u8a08\u6e2c\u7528\u30e1\u30bd\u30c3\u30c9\n    def measure_time(data, func):\n        post = time.time()\n        for _ in xrange(1000000):\n            func(data)\n        t = time.time() - post\n        return t\n\n    # \u30d0\u30a4\u30c8\u6587\u5b57\u5217\u5909\u63db\u30e1\u30bd\u30c3\u30c9(\u51e6\u7406\u7d50\u679c\u306f\u5168\u30d1\u30bf\u30fc\u30f3\u540c\u3058\u3067\u3059)\n    bytearray_pattern = lambda x : str(bytearray(x))            # \u30d1\u30bf\u30fc\u30f31\n    array_pattern = lambda x : array.array(b'B', x).tostring()  # \u30d1\u30bf\u30fc\u30f32\n    struct_pattern = lambda x : struct.pack(b'B' * len(x), *x)  # \u30d1\u30bf\u30fc\u30f33\n    join_pattern = lambda x : \"\".join([chr(_) for _ in x])      # \u30d1\u30bf\u30fc\u30f34(\u4eca\u307e\u3067\u306e\u51e6\u7406)\n\n    # \u30c6\u30b9\u30c8\u7528\u30ea\u30b9\u30c8\u30c7\u30fc\u30bf\n    small_data = [ _ for _ in xrange(0,10) ]    # len=10\n    huge_data = [ _ for _ in xrange(0,256) ]    # len=256\n\n    # \u30e1\u30a4\u30f3\u51e6\u7406\n    proc_time = measure_time(small_data, bytearray_pattern) # proc_time:1.18099999428\n    proc_time = measure_time(small_data, array_pattern)     # proc_time:0.874000072479\n    proc_time = measure_time(small_data, struct_pattern)    # proc_time:0.784999847412\n    proc_time = measure_time(small_data, join_pattern)      # proc_time:1.72000002861\n    proc_time = measure_time(huge_data, bytearray_pattern)  # proc_time:5.57999992371\n    proc_time = measure_time(huge_data, array_pattern)      # proc_time:11.3169999123\n    proc_time = measure_time(huge_data, struct_pattern)     # proc_time:11.0810000896\n    proc_time = measure_time(huge_data, join_pattern)       # proc_time:32.9349999428\n\nmain()\n\n\n\u7d50\u679c\n\u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u6570\u304c\u591a\u3044\u5834\u5408\u306f\u3001\u30d1\u30bf\u30fc\u30f31\u306estr(bytearray(list)\u3092\u4f7f\u3046\u306e\u304c\u826f\u3055\u305d\u3046\u3002\n\u307e\u305f\u3001\u30c7\u30fc\u30bf\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u306f\u3001\u30d1\u30bf\u30fc\u30f32\u3084\u30d1\u30bf\u30fc\u30f33\u306e\u307b\u3046\u304c\u901f\u304f\u306a\u308b\u5834\u5408\u3082\u3042\u308b\u6a21\u69d8\u3002(\u8aa4\u5dee\u3063\u307d\u3044\u3067\u3059\u304c)\n\u3068\u308a\u3042\u3048\u305a\u78ba\u5b9f\u306b\u8a00\u3048\u308b\u4e8b\u306f\u300c\u30d1\u30bf\u30fc\u30f34\u3060\u3051\u306f\u7121\u3044\u300d\u3068\u3044\u3046\u4e8b\u3067\u3059\u304b\u306d\u30fb\u30fb\u30fb(\u53cd\u7701)\n\n\u53c2\u8003\u30ea\u30f3\u30af\nhttp://stackoverflow.com/questions/3470398/list-of-integers-into-string-byte-array-python\npyserial\u3067\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3059\u308b\u305f\u3081\u306e\u30ea\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30c8\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u304c\u3001\n\u3069\u3046\u3082\u9045\u3044\u611f\u3058\u304c\u3057\u305f\u306e\u3067\u8abf\u3079\u305f\u7d50\u679c\u3092\u30e1\u30e2\u3002\n\n\n###\u4eca\u307e\u3067\u306e\u5b9f\u88c5\n\u7279\u306b\u4f55\u3082\u8003\u3048\u305a\u3001\u3068\u308a\u3042\u3048\u305a\u30d0\u30a4\u30c8\u6587\u5b57\u5217\u304c\u4f5c\u308c\u308c\u3070\u3044\u3044\u3084\u3068\u3044\u3046\u5358\u7d14\u306a\u3082\u306e\u3002\n\n```python\n    data = [ _ for _ in xrange(0, 10) ]\n    byte_str = \"\".join([chr(x) for x in send_list])\n    # byte_str => '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\t'\n```\n\n\n###\u51e6\u7406\u901f\u5ea6\u691c\u8a3c\n\u5225\u306e\u5b9f\u88c5\u65b9\u6cd5\u3092\u6a21\u7d22\u3057\u3066\u3044\u305f\u6240\u3001\u53c2\u8003\u30ea\u30f3\u30af\u306b\u3042\u308bstackoverflow\u306e\u8a18\u4e8b\u306b\u66f8\u304b\u308c\u3066\u3044\u305f\n\u51e6\u7406\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u308b\u4e8b\u306b\u3057\u305f\u3002\n\u306a\u304a\u3001python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f2\u7cfb\u3067\u3059\u3002\n\n```python\nimport time\nimport array\nimport struct\n\ndef main():\n    # \u8a08\u6e2c\u7528\u30e1\u30bd\u30c3\u30c9\n    def measure_time(data, func):\n        post = time.time()\n        for _ in xrange(1000000):\n            func(data)\n        t = time.time() - post\n        return t\n\n    # \u30d0\u30a4\u30c8\u6587\u5b57\u5217\u5909\u63db\u30e1\u30bd\u30c3\u30c9(\u51e6\u7406\u7d50\u679c\u306f\u5168\u30d1\u30bf\u30fc\u30f3\u540c\u3058\u3067\u3059)\n    bytearray_pattern = lambda x : str(bytearray(x))            # \u30d1\u30bf\u30fc\u30f31\n    array_pattern = lambda x : array.array(b'B', x).tostring()  # \u30d1\u30bf\u30fc\u30f32\n    struct_pattern = lambda x : struct.pack(b'B' * len(x), *x)  # \u30d1\u30bf\u30fc\u30f33\n    join_pattern = lambda x : \"\".join([chr(_) for _ in x])      # \u30d1\u30bf\u30fc\u30f34(\u4eca\u307e\u3067\u306e\u51e6\u7406)\n\n    # \u30c6\u30b9\u30c8\u7528\u30ea\u30b9\u30c8\u30c7\u30fc\u30bf\n    small_data = [ _ for _ in xrange(0,10) ]    # len=10\n    huge_data = [ _ for _ in xrange(0,256) ]    # len=256\n\n    # \u30e1\u30a4\u30f3\u51e6\u7406\n    proc_time = measure_time(small_data, bytearray_pattern) # proc_time:1.18099999428\n    proc_time = measure_time(small_data, array_pattern)     # proc_time:0.874000072479\n    proc_time = measure_time(small_data, struct_pattern)    # proc_time:0.784999847412\n    proc_time = measure_time(small_data, join_pattern)      # proc_time:1.72000002861\n    proc_time = measure_time(huge_data, bytearray_pattern)  # proc_time:5.57999992371\n    proc_time = measure_time(huge_data, array_pattern)      # proc_time:11.3169999123\n    proc_time = measure_time(huge_data, struct_pattern)     # proc_time:11.0810000896\n    proc_time = measure_time(huge_data, join_pattern)       # proc_time:32.9349999428\n\nmain()\n```\n\n###\u7d50\u679c\n\u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u6570\u304c\u591a\u3044\u5834\u5408\u306f\u3001\u30d1\u30bf\u30fc\u30f31\u306e`str(bytearray(list)`\u3092\u4f7f\u3046\u306e\u304c\u826f\u3055\u305d\u3046\u3002\n\u307e\u305f\u3001\u30c7\u30fc\u30bf\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u306f\u3001\u30d1\u30bf\u30fc\u30f32\u3084\u30d1\u30bf\u30fc\u30f33\u306e\u307b\u3046\u304c\u901f\u304f\u306a\u308b\u5834\u5408\u3082\u3042\u308b\u6a21\u69d8\u3002(\u8aa4\u5dee\u3063\u307d\u3044\u3067\u3059\u304c)\n\n\u3068\u308a\u3042\u3048\u305a\u78ba\u5b9f\u306b\u8a00\u3048\u308b\u4e8b\u306f\u300c\u30d1\u30bf\u30fc\u30f34\u3060\u3051\u306f\u7121\u3044\u300d\u3068\u3044\u3046\u4e8b\u3067\u3059\u304b\u306d\u30fb\u30fb\u30fb(\u53cd\u7701)\n\n\n\n###\u53c2\u8003\u30ea\u30f3\u30af\nhttp://stackoverflow.com/questions/3470398/list-of-integers-into-string-byte-array-python\n"}