{"context": "\n\n2016\u5e7411\u6708\u7248CUDA\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n0.\u30de\u30b7\u30f3\u30b9\u30da\u30c3\u30af\n\nCPU : i5-6600\nMB : H170 Pro (ASUS)\nRAM : DDR4 PC4-17000 8GB * 2 (Corsair)\nVGA : GTX 1080 (MSI)\nHDD : 1TB\nPSU : 650W (Corsair)\nOS : Ubuntu14.04 LTS\n\nOS\u306f\u4ee5\u4e0b\u3088\u308a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nhttps://www.ubuntulinux.jp/News/ubuntu1404-ja-remix\nOS\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306e\u624b\u98062\u304b\u3089\u5148\u3092\u53c2\u8003\u306b\nhttp://qiita.com/salty-vanilla/items/a1cddd365b4c106fd446\n\n1. Nvidia \u30c9\u30e9\u30a4\u30d0\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nsudo add-apt-repository ppa:xorg-edgers/ppa\nsudo add-apt-repository ppa:graphics-drivers/ppa\nsudo apt-get update\nsudo apt-cache search 'nvidia-[0-9]+$'\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u308b\nnvidia-173 - NVIDIA legacy binary driver - version 173.14.39\nnvidia-310 - Transitional package for nvidia-310\nnvidia-319 - Transitional package for nvidia-319\nnvidia-331 - Transitional package for nvidia-331\nnvidia-346 - Transitional package for nvidia-346\nnvidia-304 - NVIDIA legacy binary driver - version 304.132\nnvidia-340 - NVIDIA binary driver - version 340.98\nnvidia-352 - NVIDIA binary driver - version 352.79\nnvidia-355 - NVIDIA binary driver - version 355.11\nnvidia-358 - NVIDIA binary driver - version 358.16\nnvidia-361 - NVIDIA binary driver - version 361.45.18\nnvidia-364 - NVIDIA binary driver - version 364.19\nnvidia-367 - NVIDIA binary driver - version 367.57\nnvidia-370 - NVIDIA binary driver - version 370.28\n\n370.28\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nsudo apt-get install nvidia-370\nsudo apt-get install mesa-common-dev\nsudo apt-get install freeglut3-dev\n\n\n2. CUDA TOOLKIT\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nhttps://developer.nvidia.com/cuda-toolkit\u3000\u304b\u3089\nCUDA Toolkit 8.0\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\ncd ~/Downloads\nsudo sh cuda_8.0.44_linux.run\n\n\u9577\u3044\u6587\u7ae0\u304c\u51fa\u3066\u304d\u305f\u3089\u3001Q\u30ad\u30fc\u3092\u62bc\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u9032\u3081\u3066\u3044\u304f\naccept/decline/quit: accept\n\nInstall NVIDIA Accelerated Graphics Driver for Linux-x86_64 367.48?\n(y)es/(n)o/(q)uit: n\n\nInstall the CUDA 8.0 Toolkit?\n(y)es/(n)o/(q)uit: y\n\nEnter Toolkit Location\n [ default is /usr/local/cuda-8.0 ]: \n\nDo you want to install a symbolic link at /usr/local/cuda?\n(y)es/(n)o/(q)uit: y\n\nInstall the CUDA 8.0 Samples?\n(y)es/(n)o/(q)uit: y\n\nEnter CUDA Samples Location\n [ default is /home/gpu6 ]: \n\nInstalling the CUDA Toolkit in /usr/local/cuda-8.0 ...\nMissing recommended library: libXi.so\nMissing recommended library: libXmu.so\n\nInstalling the CUDA Samples in /home/gpu6 ...\nCopying samples to /home/gpu6/NVIDIA_CUDA-8.0_Samples now...\nFinished copying samples.\n\n===========\n= Summary =\n===========\n\nDriver:   Not Selected\nToolkit:  Installed in /usr/local/cuda-8.0\nSamples:  Installed in /home/gpu6, but missing recommended libraries\n\nPlease make sure that\n -   PATH includes /usr/local/cuda-8.0/bin\n -   LD_LIBRARY_PATH includes /usr/local/cuda-8.0/lib64, or, add /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf and run ldconfig as root\n\nTo uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-8.0/bin\n\nPlease see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-8.0/doc/pdf for detailed information on setting up CUDA.\n\n***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 361.00 is required for CUDA 8.0 functionality to work.\nTo install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this run file:\n    sudo <CudaInstaller>.run -silent -driver\n\nLogfile is /tmp/cuda_install_16037.log\n\n\u30d1\u30b9\u3092\u901a\u3059\necho export PATH=/usr/local/cuda/bin${PATH:+:${PATH}} >> ~/.bashrc\necho export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}} >> ~/.bashrc\necho export CUDA_HOME=/usr/local/cuda >> ~/.bashrc\n\ng++\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nsudo apt-get install g++\n\n\u4e00\u56de\u30ea\u30d6\u30fc\u30c8\u3057\u3066\u3001CUDA_TOOL_KIT\u306e\u52d5\u4f5c\u78ba\u8a8d\ncd ~/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery\nmake\n./deviceQuery\n\n./deviceQuery Starting...\n\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"GeForce GTX 1080\"\n  CUDA Driver Version / Runtime Version          8.0 / 8.0\n  CUDA Capability Major/Minor version number:    6.1\n  Total amount of global memory:                 8110 MBytes (8504279040 bytes)\n  (20) Multiprocessors, (128) CUDA Cores/MP:     2560 CUDA Cores\n  GPU Max Clock rate:                            1823 MHz (1.82 GHz)\n  Memory Clock rate:                             5005 Mhz\n  Memory Bus Width:                              256-bit\n  L2 Cache Size:                                 2097152 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 65536\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)\n  Run time limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            No\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  Device supports Unified Addressing (UVA):      Yes\n  Device PCI Domain ID / Bus ID / location ID:   0 / 4 / 0\n  Compute Mode:\n     < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 8.0, CUDA Runtime Version = 8.0, NumDevs = 1, Device0 = GeForce GTX 1080\nResult = PASS\n\n\n3. cuDNN\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nhttps://developer.nvidia.com/rdp/form/cudnn-download-survey\n\u304b\u3089\u30a2\u30f3\u30b1\u30fc\u30c8\u306b\u7b54\u3048\u3066\u3001cuDNN\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nDownload cuDNN v5.1 (August 10, 2016), for CUDA 8.0\n\u2520 cuDNN v5.1 Library for Linux\ncd ~/Downloads\ntar xvzf cudnn-8.0-linux-x64-v5.1.tgz\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\nsudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n\n\u4ee5\u4e0a\u3067\u3001CUDA\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306f\u5b8c\u4e86\u3067\u3059\u3002\n# 2016\u5e7411\u6708\u7248CUDA\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n## 0.\u30de\u30b7\u30f3\u30b9\u30da\u30c3\u30af\n* CPU : i5-6600\n* MB : H170 Pro (ASUS)\n* RAM : DDR4 PC4-17000 8GB * 2 (Corsair)\n* VGA : GTX 1080 (MSI)\n* HDD : 1TB\n* PSU : 650W (Corsair)\n* OS : Ubuntu14.04 LTS\n\nOS\u306f\u4ee5\u4e0b\u3088\u308a\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nhttps://www.ubuntulinux.jp/News/ubuntu1404-ja-remix\n\nOS\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306e\u624b\u98062\u304b\u3089\u5148\u3092\u53c2\u8003\u306b\nhttp://qiita.com/salty-vanilla/items/a1cddd365b4c106fd446\n\n## 1. Nvidia \u30c9\u30e9\u30a4\u30d0\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\nsudo add-apt-repository ppa:xorg-edgers/ppa\nsudo add-apt-repository ppa:graphics-drivers/ppa\nsudo apt-get update\nsudo apt-cache search 'nvidia-[0-9]+$'\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u308b\n\n```\nnvidia-173 - NVIDIA legacy binary driver - version 173.14.39\nnvidia-310 - Transitional package for nvidia-310\nnvidia-319 - Transitional package for nvidia-319\nnvidia-331 - Transitional package for nvidia-331\nnvidia-346 - Transitional package for nvidia-346\nnvidia-304 - NVIDIA legacy binary driver - version 304.132\nnvidia-340 - NVIDIA binary driver - version 340.98\nnvidia-352 - NVIDIA binary driver - version 352.79\nnvidia-355 - NVIDIA binary driver - version 355.11\nnvidia-358 - NVIDIA binary driver - version 358.16\nnvidia-361 - NVIDIA binary driver - version 361.45.18\nnvidia-364 - NVIDIA binary driver - version 364.19\nnvidia-367 - NVIDIA binary driver - version 367.57\nnvidia-370 - NVIDIA binary driver - version 370.28\n```\n\n370.28\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\nsudo apt-get install nvidia-370\nsudo apt-get install mesa-common-dev\nsudo apt-get install freeglut3-dev\n```\n\n## 2. CUDA TOOLKIT\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nhttps://developer.nvidia.com/cuda-toolkit\u3000\u304b\u3089\nCUDA Toolkit 8.0\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n![\u30af\u30ea\u30c3\u30d7\u30dc\u30fc\u30c901.jpg](https://qiita-image-store.s3.amazonaws.com/0/136317/4a514c3d-b747-8ed4-ff64-313e0ea9981f.jpeg)\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n```bash\ncd ~/Downloads\nsudo sh cuda_8.0.44_linux.run\n```\n\n\u9577\u3044\u6587\u7ae0\u304c\u51fa\u3066\u304d\u305f\u3089\u3001Q\u30ad\u30fc\u3092\u62bc\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u9032\u3081\u3066\u3044\u304f\n\n```\naccept/decline/quit: accept\n\nInstall NVIDIA Accelerated Graphics Driver for Linux-x86_64 367.48?\n(y)es/(n)o/(q)uit: n\n\nInstall the CUDA 8.0 Toolkit?\n(y)es/(n)o/(q)uit: y\n\nEnter Toolkit Location\n [ default is /usr/local/cuda-8.0 ]: \n\nDo you want to install a symbolic link at /usr/local/cuda?\n(y)es/(n)o/(q)uit: y\n\nInstall the CUDA 8.0 Samples?\n(y)es/(n)o/(q)uit: y\n\nEnter CUDA Samples Location\n [ default is /home/gpu6 ]: \n\nInstalling the CUDA Toolkit in /usr/local/cuda-8.0 ...\nMissing recommended library: libXi.so\nMissing recommended library: libXmu.so\n\nInstalling the CUDA Samples in /home/gpu6 ...\nCopying samples to /home/gpu6/NVIDIA_CUDA-8.0_Samples now...\nFinished copying samples.\n\n===========\n= Summary =\n===========\n\nDriver:   Not Selected\nToolkit:  Installed in /usr/local/cuda-8.0\nSamples:  Installed in /home/gpu6, but missing recommended libraries\n\nPlease make sure that\n -   PATH includes /usr/local/cuda-8.0/bin\n -   LD_LIBRARY_PATH includes /usr/local/cuda-8.0/lib64, or, add /usr/local/cuda-8.0/lib64 to /etc/ld.so.conf and run ldconfig as root\n\nTo uninstall the CUDA Toolkit, run the uninstall script in /usr/local/cuda-8.0/bin\n\nPlease see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-8.0/doc/pdf for detailed information on setting up CUDA.\n\n***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 361.00 is required for CUDA 8.0 functionality to work.\nTo install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this run file:\n    sudo <CudaInstaller>.run -silent -driver\n\nLogfile is /tmp/cuda_install_16037.log\n```\n\u30d1\u30b9\u3092\u901a\u3059\n\n```bash\necho export PATH=/usr/local/cuda/bin${PATH:+:${PATH}} >> ~/.bashrc\necho export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}} >> ~/.bashrc\necho export CUDA_HOME=/usr/local/cuda >> ~/.bashrc\n```\n\ng++\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\nsudo apt-get install g++\n```\n\n\u4e00\u56de\u30ea\u30d6\u30fc\u30c8\u3057\u3066\u3001CUDA_TOOL_KIT\u306e\u52d5\u4f5c\u78ba\u8a8d\n\n```bash\ncd ~/NVIDIA_CUDA-8.0_Samples/1_Utilities/deviceQuery\nmake\n./deviceQuery\n```\n\n```\n./deviceQuery Starting...\n\n CUDA Device Query (Runtime API) version (CUDART static linking)\n\nDetected 1 CUDA Capable device(s)\n\nDevice 0: \"GeForce GTX 1080\"\n  CUDA Driver Version / Runtime Version          8.0 / 8.0\n  CUDA Capability Major/Minor version number:    6.1\n  Total amount of global memory:                 8110 MBytes (8504279040 bytes)\n  (20) Multiprocessors, (128) CUDA Cores/MP:     2560 CUDA Cores\n  GPU Max Clock rate:                            1823 MHz (1.82 GHz)\n  Memory Clock rate:                             5005 Mhz\n  Memory Bus Width:                              256-bit\n  L2 Cache Size:                                 2097152 bytes\n  Maximum Texture Dimension Size (x,y,z)         1D=(131072), 2D=(131072, 65536), 3D=(16384, 16384, 16384)\n  Maximum Layered 1D Texture Size, (num) layers  1D=(32768), 2048 layers\n  Maximum Layered 2D Texture Size, (num) layers  2D=(32768, 32768), 2048 layers\n  Total amount of constant memory:               65536 bytes\n  Total amount of shared memory per block:       49152 bytes\n  Total number of registers available per block: 65536\n  Warp size:                                     32\n  Maximum number of threads per multiprocessor:  2048\n  Maximum number of threads per block:           1024\n  Max dimension size of a thread block (x,y,z): (1024, 1024, 64)\n  Max dimension size of a grid size    (x,y,z): (2147483647, 65535, 65535)\n  Maximum memory pitch:                          2147483647 bytes\n  Texture alignment:                             512 bytes\n  Concurrent copy and kernel execution:          Yes with 2 copy engine(s)\n  Run time limit on kernels:                     Yes\n  Integrated GPU sharing Host Memory:            No\n  Support host page-locked memory mapping:       Yes\n  Alignment requirement for Surfaces:            Yes\n  Device has ECC support:                        Disabled\n  Device supports Unified Addressing (UVA):      Yes\n  Device PCI Domain ID / Bus ID / location ID:   0 / 4 / 0\n  Compute Mode:\n     < Default (multiple host threads can use ::cudaSetDevice() with device simultaneously) >\n\ndeviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 8.0, CUDA Runtime Version = 8.0, NumDevs = 1, Device0 = GeForce GTX 1080\nResult = PASS\n```\n\n## 3. cuDNN\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nhttps://developer.nvidia.com/rdp/form/cudnn-download-survey\n\u304b\u3089\u30a2\u30f3\u30b1\u30fc\u30c8\u306b\u7b54\u3048\u3066\u3001cuDNN\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\nDownload cuDNN v5.1 (August 10, 2016), for CUDA 8.0\n\u2520 cuDNN v5.1 Library for Linux\n\n```bash\ncd ~/Downloads\ntar xvzf cudnn-8.0-linux-x64-v5.1.tgz\nsudo cp cuda/include/cudnn.h /usr/local/cuda/include\nsudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64\nsudo chmod a+r /usr/local/cuda/lib64/libcudnn*\n```\n\n\u4ee5\u4e0a\u3067\u3001CUDA\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n", "tags": ["Ubuntu", "gtx1080", "CUDA", "DeepLearning"]}