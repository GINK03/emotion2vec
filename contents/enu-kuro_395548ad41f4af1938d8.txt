{"context": " More than 1 year has passed since last update.\n\n\"Parse and React\"\u3068\u306f\nParse\u3082React\u3082Facebook\u88fd\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4e21\u8005\u3092\u3046\u307e\u304f\u9023\u643a\u3057\u3066\u304f\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\nParse and React, a Shared Chemistry\n\ngithub\u3067\u306e\u8aac\u660e\nhttps://github.com/ParsePlatform/ParseReact\n\nParse + React is an interface layer on top of the Parse JS SDK that provides simple access to the Parse API from React. It lets React components subscribe to Parse queries, and allows data mutations to be dispatched in a Flux-style manner. In the background, these subscriptions are managed in a way that lets these components automatically update as objects are created and modified, allowing user interfaces to be snappy and responsive.\n\n\n\u306a\u306b\u304c\u3046\u308c\u3057\u3044\u306e\uff1f\nobserve\u306b\u767b\u9332\u3057\u305f\u5909\u6570\u306fParse\u306eQuery\u3068\u7d10\u4ed8\u3051\u3089\u308c\u3001Component\u304cmount\u3057\u305f\u3068\u304d\u3068Query\u306b\u95a2\u4fc2\u3059\u308bObject\u3092\u5909\u66f4\u3057\u305f\u3068\u304d\u306bbackgroud\u3067Query\u304c\u518d\u5b9f\u884c\u3055\u308crender\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u5909\u66f4\u306e\u53cd\u6620\u3092\u81ea\u52d5\u3067\u3084\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\nParse+React\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u3068\u304d\u306fAction->APIUtil->Action->Store->Component\u3068\u3044\u3046\u6d41\u308c\u3067\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u3001\u53cd\u6620\u3055\u305b\u3066\u3044\u307e\u3057\u305f\u3002\nParse+React\u3092\u4f7f\u3046\u3068Component\u306e\u306a\u304b\u3060\u3051\u3067\u5b8c\u7d50\u3067\u304d\u308b\u306e\u3067\u3059\u3063\u304d\u308a\u3057\u307e\u3059\u3002\n\nES6\u30b9\u30bf\u30a4\u30eb\u3067\u66f8\u3044\u3066\u307f\u305f\nParse+React\u306fmixin\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001class\u30b9\u30bf\u30a4\u30eb\u3067React\u3092\u66f8\u304f\u3068mixin\u304c\u4f7f\u3048\u307e\u305b\u3093\u3002\n\u304c\u3001'react-mixin'\u3068\u3044\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3048\u3070class\u30b9\u30bf\u30a4\u30eb\u3067\u3082mixin\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n*\u6700\u521d\u306a\u304b\u306a\u304b\u5024\u304c\u53cd\u6620\u3055\u308c\u3066\u304f\u308c\u306a\u304f\u3066\u56f0\u3063\u305f\u306e\u3067\u3059\u304c\u3001'react-mixin'\u3068'parse-react'\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6700\u65b0\u306b\u3057\u305f\u3089\u6a5f\u80fd\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3002\n[\u8ffd\u8a18]\nparse-react\u306eversion0.3.1\u304b\u3089ES6\u3082\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u304d\u63db\u3048\u307e\u3057\u305f\u3002\nhttps://github.com/ParsePlatform/ParseReact/blob/master/docs/api/ES6.md\n\nsample code\nimport React from 'react/addons';\nimport QuestionListItem from './QuestionListItem.react';\nimport MessageComposer from './MessageComposer.react';\nimport { Parse } from 'parse';\nimport ParseReact from 'parse-react';\nimport ParseComponent from 'parse-react/class';\n//import ReactMixin from 'react-mixin';\nimport ActionCreators from '../../actions/ActionCreators';\nimport RouterContainer from '../../services/RouterContainer';\nimport QuestionStore from '../../stores/QuestionStore';\n\nclass QuestionSection extends ParseComponent {\n\n  constructor(props) {\n    super(props);\n    this.state = {error: null};\n    this.onClickQuestion = this.onClickQuestion.bind(this);\n  }\n\n  observe(props, state) {\n    return { questions: (new Parse.Query('Question')).descending('createdAt').limit(10) };\n  }\n\n  get questionListItems() {\n    return this.data.questions.map(function(question) {\n    //question\u4f5c\u6210\u76f4\u5f8c\u306e\u66f4\u65b0\u6642\u306fquestion.objectId\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u4eee\u306e\u5024\u3092\u5165\u308c\u3066\u304a\u304f\n      var key = question.objectId;\n      if (key == null) {\n        key = 'tempObjectId';\n      }\n      return (\n        <QuestionListItem\n          key={key}\n          question={question}\n          onClickQuestion={this.onClickQuestion}\n        />\n      );\n    }, this);\n  }\n\n  get content() {\n    if (this.data.questions.length) {\n      return <ul>{this.questionListItems}</ul>;\n    } else if (!(QuestionStore.getQuestions() == null)) {\n      //\u518d\u8aad\u307f\u8fbc\u307f\u3059\u308b\u524d\u306bStore\u306b\u3042\u308bquestions\u3092\u4f7f\u3046\u306e\u3067\u8868\u793a\u304c\u82e5\u5e72\u65e9\u304f\u306a\u308b\n      this.data.questions = QuestionStore.getQuestions();\n      return <ul>{this.questionListItems}</ul>;\n    } else if (this.pendingQueries().length) {\n      return <div className='loading' />;\n    }\n    return (\n      <div className='emptyTable'>\n        <h2>\u307e\u3060\u6295\u7a3f\u304c\u3042\u308a\u307e\u305b\u3093 (\u00b4\u30fb\u03c9\u30fb\uff40)</h2>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"questionSection\">\n        <MessageComposer submit={this.submitQuestion} />\n          {\n            this.state.error ?\n            <div className='row centered errors'>{this.state.error}</div> :\n            null\n          }\n        <div className=\"q-list\">\n          {this.content}\n        </div>\n      </div>\n    );\n  }\n\n  submitQuestion(message) {\n    ParseReact.Mutation.Create('Question',\n    {\n      message: message,\n      user: Parse.User.current()\n    })\n    .dispatch()\n    .then(() => {/*observe\u3057\u3066\u304a\u3051\u3070\u81ea\u52d5\u3067\u53cd\u6620\u3055\u308c\u308b\u306e\u3067\u6210\u529f\u6642\u306f\u4f55\u3082\u3057\u306a\u304f\u3066\u3044\u3044*/})\n    .fail((error) => this.setState({error: error.message}));//TODO:error handling\n  }\n\n  onClickQuestion(question) {\n    ActionCreators.setCurrentQuestion(question);\n    ActionCreators.setQuestions(this.data.questions);\n    RouterContainer.get().transitionTo('/answer/:id', {id:question.objectId}, {});\n  }\n\n}\n\n//ReactMixin(QuestionSection.prototype, ParseReact.Mixin);\nexport default QuestionSection;\n\n\n\n#\"Parse and React\"\u3068\u306f\nParse\u3082React\u3082Facebook\u88fd\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u4e21\u8005\u3092\u3046\u307e\u304f\u9023\u643a\u3057\u3066\u304f\u308c\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n[Parse and React, a Shared Chemistry](http://blog.parse.com/learn/parse-and-react-shared-chemistry/)\n\n##github\u3067\u306e\u8aac\u660e\nhttps://github.com/ParsePlatform/ParseReact\n>Parse + React is an interface layer on top of the Parse JS SDK that provides simple access to the Parse API from React. It lets React components subscribe to Parse queries, and allows data mutations to be dispatched in a Flux-style manner. In the background, these subscriptions are managed in a way that lets these components automatically update as objects are created and modified, allowing user interfaces to be snappy and responsive.\n\n##\u306a\u306b\u304c\u3046\u308c\u3057\u3044\u306e\uff1f\nobserve\u306b\u767b\u9332\u3057\u305f\u5909\u6570\u306fParse\u306eQuery\u3068\u7d10\u4ed8\u3051\u3089\u308c\u3001Component\u304cmount\u3057\u305f\u3068\u304d\u3068Query\u306b\u95a2\u4fc2\u3059\u308bObject\u3092\u5909\u66f4\u3057\u305f\u3068\u304d\u306bbackgroud\u3067Query\u304c\u518d\u5b9f\u884c\u3055\u308crender\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u5909\u66f4\u306e\u53cd\u6620\u3092\u81ea\u52d5\u3067\u3084\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\nParse+React\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u3068\u304d\u306fAction->APIUtil->Action->Store->Component\u3068\u3044\u3046\u6d41\u308c\u3067\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u3001\u53cd\u6620\u3055\u305b\u3066\u3044\u307e\u3057\u305f\u3002\nParse+React\u3092\u4f7f\u3046\u3068Component\u306e\u306a\u304b\u3060\u3051\u3067\u5b8c\u7d50\u3067\u304d\u308b\u306e\u3067\u3059\u3063\u304d\u308a\u3057\u307e\u3059\u3002\n\n#ES6\u30b9\u30bf\u30a4\u30eb\u3067\u66f8\u3044\u3066\u307f\u305f\nParse+React\u306fmixin\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001class\u30b9\u30bf\u30a4\u30eb\u3067React\u3092\u66f8\u304f\u3068mixin\u304c\u4f7f\u3048\u307e\u305b\u3093\u3002\n\u304c\u3001'react-mixin'\u3068\u3044\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3048\u3070class\u30b9\u30bf\u30a4\u30eb\u3067\u3082mixin\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n*\u6700\u521d\u306a\u304b\u306a\u304b\u5024\u304c\u53cd\u6620\u3055\u308c\u3066\u304f\u308c\u306a\u304f\u3066\u56f0\u3063\u305f\u306e\u3067\u3059\u304c\u3001'react-mixin'\u3068'parse-react'\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u6700\u65b0\u306b\u3057\u305f\u3089\u6a5f\u80fd\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3002\n\n[\u8ffd\u8a18]\nparse-react\u306eversion0.3.1\u304b\u3089ES6\u3082\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u304d\u63db\u3048\u307e\u3057\u305f\u3002\nhttps://github.com/ParsePlatform/ParseReact/blob/master/docs/api/ES6.md\n\n##sample code\n```js\nimport React from 'react/addons';\nimport QuestionListItem from './QuestionListItem.react';\nimport MessageComposer from './MessageComposer.react';\nimport { Parse } from 'parse';\nimport ParseReact from 'parse-react';\nimport ParseComponent from 'parse-react/class';\n//import ReactMixin from 'react-mixin';\nimport ActionCreators from '../../actions/ActionCreators';\nimport RouterContainer from '../../services/RouterContainer';\nimport QuestionStore from '../../stores/QuestionStore';\n\nclass QuestionSection extends ParseComponent {\n\n  constructor(props) {\n    super(props);\n    this.state = {error: null};\n    this.onClickQuestion = this.onClickQuestion.bind(this);\n  }\n\n  observe(props, state) {\n    return { questions: (new Parse.Query('Question')).descending('createdAt').limit(10) };\n  }\n  \n  get questionListItems() {\n    return this.data.questions.map(function(question) {\n    //question\u4f5c\u6210\u76f4\u5f8c\u306e\u66f4\u65b0\u6642\u306fquestion.objectId\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u4eee\u306e\u5024\u3092\u5165\u308c\u3066\u304a\u304f\n      var key = question.objectId;\n      if (key == null) {\n        key = 'tempObjectId';\n      }\n      return (\n        <QuestionListItem\n          key={key}\n          question={question}\n          onClickQuestion={this.onClickQuestion}\n        />\n      );\n    }, this);\n  }\n  \n  get content() {\n    if (this.data.questions.length) {\n      return <ul>{this.questionListItems}</ul>;\n    } else if (!(QuestionStore.getQuestions() == null)) {\n      //\u518d\u8aad\u307f\u8fbc\u307f\u3059\u308b\u524d\u306bStore\u306b\u3042\u308bquestions\u3092\u4f7f\u3046\u306e\u3067\u8868\u793a\u304c\u82e5\u5e72\u65e9\u304f\u306a\u308b\n      this.data.questions = QuestionStore.getQuestions();\n      return <ul>{this.questionListItems}</ul>;\n    } else if (this.pendingQueries().length) {\n      return <div className='loading' />;\n    }\n    return (\n      <div className='emptyTable'>\n        <h2>\u307e\u3060\u6295\u7a3f\u304c\u3042\u308a\u307e\u305b\u3093 (\u00b4\u30fb\u03c9\u30fb\uff40)</h2>\n      </div>\n    );\n  }\n  \n  render() {\n    return (\n      <div className=\"questionSection\">\n        <MessageComposer submit={this.submitQuestion} />\n          {\n            this.state.error ?\n            <div className='row centered errors'>{this.state.error}</div> :\n            null\n          }\n        <div className=\"q-list\">\n          {this.content}\n        </div>\n      </div>\n    );\n  }\n\n  submitQuestion(message) {\n    ParseReact.Mutation.Create('Question',\n    {\n      message: message,\n      user: Parse.User.current()\n    })\n    .dispatch()\n    .then(() => {/*observe\u3057\u3066\u304a\u3051\u3070\u81ea\u52d5\u3067\u53cd\u6620\u3055\u308c\u308b\u306e\u3067\u6210\u529f\u6642\u306f\u4f55\u3082\u3057\u306a\u304f\u3066\u3044\u3044*/})\n    .fail((error) => this.setState({error: error.message}));//TODO:error handling\n  }\n\n  onClickQuestion(question) {\n    ActionCreators.setCurrentQuestion(question);\n    ActionCreators.setQuestions(this.data.questions);\n    RouterContainer.get().transitionTo('/answer/:id', {id:question.objectId}, {});\n  }\n\n}\n\n//ReactMixin(QuestionSection.prototype, ParseReact.Mixin);\nexport default QuestionSection;\n\n```\n", "tags": ["Parse", "reactjs"]}