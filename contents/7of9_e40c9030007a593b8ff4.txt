{"context": "\n\u52d5\u4f5c\u74b0\u5883\nstdint.h\u304c\u4f7f\u3048\u306a\u3044\u7d44\u8fbc\u307fC\n\n\nhttp://qiita.com/7of9/items/c1e67a19efcfa7eed500\n\u3067C#\u5b9f\u88c5\u3057\u305fExcel\u306eTrend()\u95a2\u6570\u3092C\u3067\u5b9f\u88c5\u3057\u305f\u3002\nhttp://ideone.com/swhbCJ\n#include <stdio.h>\n#include <stdbool.h>\n#include <math.h>\n\ntypedef struct point {\n    float x, y; \n} point_t;\n\nfloat calcAverageValues(point_t *points, int size, bool isX)\n{\n    double sum = 0.0;\n    for(int idx=0; idx<size; idx++) {\n        if (isX) {\n            sum += points[idx].x;\n        } else {\n            sum += points[idx].y;\n        }\n    }\n    return sum / (float)size;\n}\n\nfloat calcSumDiffXDiffY(point_t *points, int size, float xBar, float yBar)\n{\n    double sum = 0.0;\n\n    for(int idx=0; idx<size; idx++) {\n        sum += (points[idx].x - xBar) * (points[idx].y - yBar);\n    }\n    return sum;\n}\nfloat calcSumDiffXSquared(point_t *points, int size, float xBar)\n{\n    double sum = 0.0;\n    double xdiff;\n\n    for(int idx=0; idx<size; idx++) {\n        xdiff = (points[idx].x - xBar);\n        sum += xdiff * xdiff;\n    }\n    return sum;\n}\n\nfloat SlopeOfPoints(point_t *points, int size)\n{\n    float xBar = calcAverageValues(points, size, /*isX=*/true);\n    float yBar = calcAverageValues(points, size, /*isX=*/false);\n\n    float dividend = calcSumDiffXDiffY(points, size, xBar, yBar);\n    float divisor = calcSumDiffXSquared(points, size, xBar);\n\n    return dividend / divisor;\n}\n\nfloat YInterceptOfPoints(point_t *points, int size, float slope)\n{\n    float xBar = calcAverageValues(points, size, /*isX=*/true);\n    float yBar = calcAverageValues(points, size, /*isX=*/false);\n\n    return yBar - (slope * xBar);   \n}\n\nfloat LeastSquaresValueAtX(point_t *points, int size, float x) {\n    float slope = SlopeOfPoints(points, size);\n    float yIntercept = YInterceptOfPoints(points, size, slope);\n\n    return (slope * x) + yIntercept;\n}\n\nint main(void) {\n    point_t P[] = {\n        { 600, 6 }, // X,Y\n        { 800, 7 },\n        { 1000, 10 },\n        { 1200, 12 },\n        { 1400, 14 },\n    };\n    int size = sizeof(P) / sizeof(P[0]);\n\n    float res = LeastSquaresValueAtX(P, size, 650.0);\n    printf(\"%.3f\\n\", res);\n    return 0;\n}\n\n\n\u7d50\u679c\nSuccess time: 0 memory: 2168 signal:0\n6.125\n\n\n\u540c\u3058\u7d50\u679c\u304c\u51fa\u305f\u3002\n\u5404\u6240\u306enaming\u304c\u826f\u304f\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u308c\u3067\u3002\n\u30a8\u30e9\u30fc\u51e6\u7406\u3082\u5165\u308c\u305f\u65b9\u304c\u3044\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3002\n\nExcel\u306eTrend()\u306e\u5f15\u6570\u306e\u9806\u756a\u306b\u6ce8\u610f\n(\u8ffd\u8a18 2016/09/06)\nExcel\u306e\u7d50\u679c\u3068C\u5b9f\u88c5\u3092\u6bd4\u3079\u3066\u3044\u3066\u3001\u5f15\u6570\u306e\u9806\u756a\u306b\u95a2\u3057\u3066\u306f\u307e\u3063\u305f\u3002\nOffice\u306e\u30b5\u30a4\u30c8\u306b\u304a\u3044\u3066\n\n\u66f8\u5f0f\nTREND(\u65e2\u77e5\u306e y, [\u65e2\u77e5\u306e x], [\u65b0\u3057\u3044 x], [\u5b9a\u6570])\n\u3068\u3042\u308b\u3002\n\n1\u3064\u76ee\u306e\u5f15\u6570(\u65e2\u77e5\u306ey)\u30682\u3064\u76ee\u306e\u5f15\u6570(\u65e2\u77e5\u306ex)\u3092\u52d8\u9055\u3044\u3057\u3066\u53cd\u5bfe\u306b\u6307\u5b9a\u3057\u3066\u3001\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066EXCEL\u7d50\u679c\u3068C\u5b9f\u88c5\u7d50\u679c\u3092\u6bd4\u8f03\u3059\u308b\u6642\u306b\u306f\u307e\u3063\u305f\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\nstdint.h\u304c\u4f7f\u3048\u306a\u3044\u7d44\u8fbc\u307fC\n```\n\nhttp://qiita.com/7of9/items/c1e67a19efcfa7eed500\n\u3067C#\u5b9f\u88c5\u3057\u305fExcel\u306eTrend()\u95a2\u6570\u3092C\u3067\u5b9f\u88c5\u3057\u305f\u3002\n\nhttp://ideone.com/swhbCJ\n\n```c\n#include <stdio.h>\n#include <stdbool.h>\n#include <math.h>\n\ntypedef struct point {\n\tfloat x, y;\t\n} point_t;\n\nfloat calcAverageValues(point_t *points, int size, bool isX)\n{\n\tdouble sum = 0.0;\n\tfor(int idx=0; idx<size; idx++) {\n\t\tif (isX) {\n\t\t\tsum += points[idx].x;\n\t\t} else {\n\t\t\tsum += points[idx].y;\n\t\t}\n\t}\n\treturn sum / (float)size;\n}\n\nfloat calcSumDiffXDiffY(point_t *points, int size, float xBar, float yBar)\n{\n\tdouble sum = 0.0;\n\t\n\tfor(int idx=0; idx<size; idx++) {\n\t\tsum += (points[idx].x - xBar) * (points[idx].y - yBar);\n\t}\n\treturn sum;\n}\nfloat calcSumDiffXSquared(point_t *points, int size, float xBar)\n{\n\tdouble sum = 0.0;\n\tdouble xdiff;\n\t\n\tfor(int idx=0; idx<size; idx++) {\n\t\txdiff = (points[idx].x - xBar);\n\t\tsum += xdiff * xdiff;\n\t}\n\treturn sum;\n}\n\nfloat SlopeOfPoints(point_t *points, int size)\n{\n\tfloat xBar = calcAverageValues(points, size, /*isX=*/true);\n\tfloat yBar = calcAverageValues(points, size, /*isX=*/false);\n\n\tfloat dividend = calcSumDiffXDiffY(points, size, xBar, yBar);\n\tfloat divisor = calcSumDiffXSquared(points, size, xBar);\n\t\n\treturn dividend / divisor;\n}\n\nfloat YInterceptOfPoints(point_t *points, int size, float slope)\n{\n\tfloat xBar = calcAverageValues(points, size, /*isX=*/true);\n\tfloat yBar = calcAverageValues(points, size, /*isX=*/false);\n\n\treturn yBar - (slope * xBar);\t\n}\n\nfloat LeastSquaresValueAtX(point_t *points, int size, float x) {\n\tfloat slope = SlopeOfPoints(points, size);\n\tfloat yIntercept = YInterceptOfPoints(points, size, slope);\n\n\treturn (slope * x) + yIntercept;\n}\n\nint main(void) {\n\tpoint_t P[] = {\n\t\t{ 600, 6 }, // X,Y\n\t\t{ 800, 7 },\n\t\t{ 1000, 10 },\n\t\t{ 1200, 12 },\n\t\t{ 1400, 14 },\n\t};\n\tint size = sizeof(P) / sizeof(P[0]);\n\t\n\tfloat res = LeastSquaresValueAtX(P, size, 650.0);\n\tprintf(\"%.3f\\n\", res);\n\treturn 0;\n}\n```\n\n```txt:\u7d50\u679c\nSuccess\ttime: 0 memory: 2168 signal:0\n6.125\n```\n\n\u540c\u3058\u7d50\u679c\u304c\u51fa\u305f\u3002\n\n\u5404\u6240\u306enaming\u304c\u826f\u304f\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u308c\u3067\u3002\n\n\u30a8\u30e9\u30fc\u51e6\u7406\u3082\u5165\u308c\u305f\u65b9\u304c\u3044\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3002\n\n## Excel\u306eTrend()\u306e\u5f15\u6570\u306e\u9806\u756a\u306b\u6ce8\u610f\n\n(\u8ffd\u8a18 2016/09/06)\n\nExcel\u306e\u7d50\u679c\u3068C\u5b9f\u88c5\u3092\u6bd4\u3079\u3066\u3044\u3066\u3001\u5f15\u6570\u306e\u9806\u756a\u306b\u95a2\u3057\u3066\u306f\u307e\u3063\u305f\u3002\n\n[Office\u306e\u30b5\u30a4\u30c8](https://support.office.com/ja-JP/article/TREND-%E9%96%A2%E6%95%B0-E2F135F0-8827-4096-9873-9A7CF7B51EF1)\u306b\u304a\u3044\u3066\n> \u66f8\u5f0f\n> TREND(\u65e2\u77e5\u306e y, [\u65e2\u77e5\u306e x], [\u65b0\u3057\u3044 x], [\u5b9a\u6570])\n\u3068\u3042\u308b\u3002\n\n1\u3064\u76ee\u306e\u5f15\u6570(\u65e2\u77e5\u306ey)\u30682\u3064\u76ee\u306e\u5f15\u6570(\u65e2\u77e5\u306ex)\u3092\u52d8\u9055\u3044\u3057\u3066\u53cd\u5bfe\u306b\u6307\u5b9a\u3057\u3066\u3001\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066EXCEL\u7d50\u679c\u3068C\u5b9f\u88c5\u7d50\u679c\u3092\u6bd4\u8f03\u3059\u308b\u6642\u306b\u306f\u307e\u3063\u305f\u3002\n\n\n", "tags": ["C", "Excel", "trap"]}