{"tags": ["algorithm", "acm", "prime"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u6700\u8fd1\u5728\u5199leetcode\u4e0a\u7684\u9898\u76ee\u7684\u65f6\u5019\u53d1\u73b0\u81ea\u5df1\u5199\u7684\u7b5b\u6cd5\u6c42\u7d20\u6570\u7684\u4e2a\u6570\u7684\u7a0b\u5e8f\u5e76\u4e0d\u591f\u5feb\u3002\n\u6211\u4e4b\u524d\u5199\u7684\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a\nmemset(is_prime, true, sizeof(is_prime));\nis_prime[0] = is_prime[1] = false;\nfor (int i = 2; i < N; ++i) {\n    if (is_prime[i]) {\n        for (int j = 2; j * i < N; ++j)\n            is_prime[j] = false;\n        ++cnt;\n    }\n}\n\n\u5176\u5b9e\u8fd9\u91cc\u6709\u4e00\u4e9b\u5730\u65b9\u53ef\u4ee5\u4f18\u5316\u7684\uff0c\u9996\u5148\u7b2c\u4e8c\u4e2a\u5faa\u73af\u91cc\uff0cj\u5e76\u4e0d\u9700\u8981\u4ece2\u5f00\u59cb\uff0c\u4ee5\u4e3a\u5728j\u5c0f\u4e8ei\u7684\u60c5\u51b5\u4e0b\u5176\u5b9ej*i\u91cc\u9762\u80af\u5b9a\u542b\u6709\u6bd4i\u5c0f\u7684\u7d20\u6570\uff0c\u56e0\u6b64\uff0c\u90fd\u5df2\u7ecf\u88ab\u7b5b\u6389\u4e86\u3002\u56e0\u6b64\u7b2c\u4e8c\u4e2a\u5faa\u73af\u53ef\u4ee5\u6539\u6210\u8fd9\u4e2a\u6837\u5b50\uff1a\nfor (int j = i; j * i < N; ++j)\n\n\u5176\u6b21\uff0c\u7b2c\u4e00\u4e2a\u5faa\u73af\u91cc\uff0c\u7531\u4e8e\u5927\u4e8eN\u2212\u2212\u221aN\\sqrt{N}\u7684\u7d20\u6570\u7684\u500d\u6570\u80af\u5b9a\u5c0f\u4e8eN\u2212\u2212\u221aN\\sqrt{N}\u3002\u56e0\u6b64\u7b2c\u4e00\u4e2a\u5faa\u73af\u53ea\u9700\u8981\u5230N\u2212\u2212\u221aN\\sqrt{N}\u5c31\u53ef\u4ee5\u4e86\u3002\n\u6700\u540e\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a\nis_prime[0] = is_prime[1] = false;\nfor (int i = 2; i * i < n; ++i) {\n    if (is_prime[i]) {\n        for (int j = i * i; j < n; j += i)\n            is_prime[j] = false;\n    }\n}\n\n\u6700\u8fd1\u5728\u5199leetcode\u4e0a\u7684[\u9898\u76ee](https://leetcode.com/problems/count-primes/)\u7684\u65f6\u5019\u53d1\u73b0\u81ea\u5df1\u5199\u7684\u7b5b\u6cd5\u6c42\u7d20\u6570\u7684\u4e2a\u6570\u7684\u7a0b\u5e8f\u5e76\u4e0d\u591f\u5feb\u3002\n\u6211\u4e4b\u524d\u5199\u7684\u4ee3\u7801\u662f\u8fd9\u6837\u7684\uff1a\n\n```cpp\nmemset(is_prime, true, sizeof(is_prime));\nis_prime[0] = is_prime[1] = false;\nfor (int i = 2; i < N; ++i) {\n    if (is_prime[i]) {\n        for (int j = 2; j * i < N; ++j)\n            is_prime[j] = false;\n        ++cnt;\n    }\n}\n```\n\n\u5176\u5b9e\u8fd9\u91cc\u6709\u4e00\u4e9b\u5730\u65b9\u53ef\u4ee5\u4f18\u5316\u7684\uff0c\u9996\u5148\u7b2c\u4e8c\u4e2a\u5faa\u73af\u91cc\uff0cj\u5e76\u4e0d\u9700\u8981\u4ece2\u5f00\u59cb\uff0c\u4ee5\u4e3a\u5728j\u5c0f\u4e8ei\u7684\u60c5\u51b5\u4e0b\u5176\u5b9ej*i\u91cc\u9762\u80af\u5b9a\u542b\u6709\u6bd4i\u5c0f\u7684\u7d20\u6570\uff0c\u56e0\u6b64\uff0c\u90fd\u5df2\u7ecf\u88ab\u7b5b\u6389\u4e86\u3002\u56e0\u6b64\u7b2c\u4e8c\u4e2a\u5faa\u73af\u53ef\u4ee5\u6539\u6210\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n```\nfor (int j = i; j * i < N; ++j)\n```\n\n\u5176\u6b21\uff0c\u7b2c\u4e00\u4e2a\u5faa\u73af\u91cc\uff0c\u7531\u4e8e\u5927\u4e8e$\\sqrt{N}$\u7684\u7d20\u6570\u7684\u500d\u6570\u80af\u5b9a\u5c0f\u4e8e$\\sqrt{N}$\u3002\u56e0\u6b64\u7b2c\u4e00\u4e2a\u5faa\u73af\u53ea\u9700\u8981\u5230$\\sqrt{N}$\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u6700\u540e\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n```cpp\nis_prime[0] = is_prime[1] = false;\nfor (int i = 2; i * i < n; ++i) {\n    if (is_prime[i]) {\n        for (int j = i * i; j < n; j += i)\n            is_prime[j] = false;\n    }\n}\n```\n\n"}