{"context": "\n\n\u6982\u8981\n\u7279\u5b9a\u306e\u30af\u30e9\u30b9\u53ca\u3073\u305d\u306e\u6d3e\u751f\u30af\u30e9\u30b9\u306b\u306f\u7279\u5b9a\u306eAttribute\u304c\u5fc5\u8981\u3060\u3068\u304b\u3001\n.Where(...).Any()\u306f.Any(...)\u3067\u3044\u3044\u3058\u3083\u3093\u3068\u304b\u3001\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306f\u3067\u306a\u3044\u3051\u3069\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u307b\u3057\u3044\u3088\u3046\u306a\u7b87\u6240\u3068\u3044\u3046\u306e\u304c\u591a\u3005\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001Roslyn\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3001\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u304cAnalyzer with Code Fix\u3067\u3059\uff01\n\u30fb\u30fb\u30fb\u304c\u3001\u65e5\u672c\u8a9e\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u308d\u304f\u306b\u306a\u3044\u3057\u3001\u3069\u3046\u624b\u3092\u51fa\u305b\u3070\u308f\u304b\u3089\u306a\u3044\u3068\u3044\u3063\u305f\u65b9\u306e\u9053\u3057\u308b\u3079\u306b\u306a\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f\u7279\u5b9a\u306e\u30af\u30e9\u30b9\u306b\u306f\u7279\u5b9a\u306eAttribute\u304c\u5fc5\u8981\u3068\u3044\u3046Analyzer\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u74b0\u5883\nVisual Studio Enterprise 2015 Version 14.0.24720.00 Update 1 \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u624b\u9806\n\nSDK\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\n.NET Compiler Platform SDK\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u3087\u3046\u3002\n\u3053\u308c\u306f\u3001Diagnostic with Code Fix\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3084Syntax Visualizer\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u308bSDK\u3067\u3059\u3002\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\n\n\u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u304b\u3089\u3001 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 - Visual C# - Extensibility - Analyzer with Code Fix (NuGet + VSIX)\u3092\u9078\u3073\u307e\u3057\u3087\u3046\u3002\n\n\n\n\n\u52d5\u4f5c\u30c6\u30b9\u30c8\u3092\u3057\u3066\u307f\u308b\n\n{\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u540d}.Vsix\u3068\u3044\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8)\nF5\u3092\u62bc\u3059\u3068\u3001\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u3068\u306a\u308bVisualStudio\u304c\u3082\u3046\u4e00\u3064\u8d77\u52d5\u3057\u3001\u305d\u3053\u3067\u5b9f\u969b\u306b\u52d5\u304b\u3057\u306a\u304c\u3089\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\u3082\u3061\u308d\u3093\u3001\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3082\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\n\n\nAnalyzer\u306e\u4f5c\u6210\n\n\u307e\u305a\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3053\u306e\u6642\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u540c\u68b1\u3055\u308c\u3066\u3044\u308bDiagnosticAnalyzer.cs\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u697d\u3067\u3059\u3002\n\nInitialize\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nAnalysisContext\u3092\u5f15\u6570\u306b\u53d6\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u3053\u3061\u3089\u306f\u3069\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067Analyze\u3092\u5b9f\u884c\u3059\u308b\u304b\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3001context.RegisterSyntaxNodeAction(AnalyzeSymbol, SyntaxKind.ClassDeclaration);\u3068\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u3042\u305f\u308a\u3082\u30b3\u30fc\u30c9\u88dc\u5b8c\u3092\u983c\u308a\u306b\u624b\u63a2\u308a\u72b6\u614b\u3067\u9032\u3081\u3066\u3044\u307e\u3059\u3002\u4f55\u304b\u3044\u3044\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\u7b2c\u4e00\u5f15\u6570\u306f\u30a2\u30ca\u30e9\u30a4\u30b6\u672c\u4f53\u3068\u306a\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u6e21\u3057\u307e\u3059\u3002\u304a\u597d\u307f\u306e\u540d\u524d\u3067\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n\n\nAnalyzeSymbol\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nInitialize\u3067\u6307\u5b9a\u3057\u305f\u306e\u306fRegisterSyntaxNodeAction\u306a\u306e\u3067\u3001SyntaxNodeAnalysisContext\u304c\u5f15\u6570\u3067\u3059\u3002\n\u3053\u306eContext\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u60c5\u5831\u304c\u8a70\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3053\u3053\u304b\u3089\u578b\u60c5\u5831\u3092\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u30a8\u30e9\u30fc\u3067\u306f\u306a\u3044\u5834\u5408\u3001\u7121\u8996\u3059\u308b\u5834\u5408\u306f\u305d\u306e\u307e\u307ereturn;\u3059\u308c\u3070\u554f\u984c\u306a\u3044\u3067\u3059\u3002\n\n\u307e\u305a\u3001SyntaxNodeAnalysisContext\u304b\u3089SemanticModel\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002  \u3053\u306e\u30af\u30e9\u30b9\u306b\u306f\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u4f55\u306f\u3068\u3082\u3042\u308c\u3053\u306e\u30af\u30e9\u30b9\u304b\u3089\u63a2\u3057\u3066\u3044\u304f\u3068\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u6b21\u306b\u3001ITypeSymbol\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002  \u3053\u306e\u30af\u30e9\u30b9\u306f\u4f55\u3089\u304b\u306e\u578b\u3092\u8868\u3059\u30b7\u30f3\u30dc\u30eb\u3092\u8868\u3059\u3082\u306e\u3067\u3059\u3002\n\n\nvar semanticModel = context.SemanticModel;\n\nvar classSyntax = context.Node as ClassDeclarationSyntax;\nif (null == classSyntax) return;\n\nvar type = semanticModel.GetDeclaredSymbol(classSyntax);\nif (null == type) return;\n\n\n\u6b63\u76f4\u3001ITypeSymbol\u3092\u53d6\u5f97\u3059\u308b\u307e\u3067\u304c\u308f\u304b\u308a\u3065\u3089\u3044\u3060\u3051\u3067\u3001\u3042\u3068\u306f\u3053\u3044\u3064\u304b\u3089\u597d\u304d\u306a\u60c5\u5831\u3092\u5f15\u304d\u51fa\u3059\u3060\u3051\u306a\u306e\u3067\u3001\n\u4ee5\u4e0b\u306f\u8aad\u307f\u98db\u3070\u3057\u3066\u3057\u307e\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\n\u6307\u5b9a\u306e\u30af\u30e9\u30b9\u307e\u305f\u306f\u3001\u305d\u306e\u6d3e\u751f\u30af\u30e9\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\nITypeSymbol\u306b\u306fBaseType\u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3042\u308a\u3001\u305d\u308c\u304c\u89aa\u30af\u30e9\u30b9\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u518d\u5e30\u7684\u306b\u3053\u306eITypeSymbol\u3092\u8fbf\u3063\u3066\u3044\u3051\u3070\u3001\u6d3e\u751f\u30af\u30e9\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u305d\u306e\u5224\u5b9a\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\nprivate static bool ExtendsClass(ITypeSymbol type, string targetName)\n{\n    while (type != null)\n    {\n        if (type.Name == targetName) return true;\n        type = type.BaseType;\n    }\n    return false;\n}\n\n\n\u6307\u5b9a\u306eAttribute\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\nITypeSymbol.GetAttributes()\u3067ImmutableArray<AttributeData>\u304c\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\u4ee5\u4e0b\u304c\u305d\u306e\u5224\u5b9a\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\nprivate static bool ContainsAttribute(ImmutableArray<AttributeData> attributes, string targetName)\n{\n    return attributes.Any(x => x.AttributeClass.Name == targetName);\n}\n\n\n\u30a8\u30e9\u30fc\u60c5\u5831\u3092\u51fa\u3059\n\u3053\u3053\u306f\u6c7a\u3081\u3046\u3061\u3067\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30a8\u30e9\u30fc\u3092\u51fa\u3059\u5834\u6240\u3068\u3001\u5185\u5bb9\u3092\u8a2d\u5b9a\u3057\u3001context\u3078\u5831\u544a\u3057\u307e\u3059\u3002\nDiagnostic.Create\u6642\u306bMessageFormat\u3078\u5f15\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3088\u308a\u8aac\u660e\u7684\u306a\u8868\u793a\u3092\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\nvar location = Location.Create(semanticModel.SyntaxTree, context.Node.Span);\nvar diagnostic = Diagnostic.Create(Rule, location, type.Name, \"TargetAttribute\");\ncontext.ReportDiagnostic(diagnostic);\n\n\n\u5b8c\u6210\n\u4ee5\u4e0b\u306bAnalyzer\u306e\u30b3\u30fc\u30c9\u5168\u6587\u3092\u8f09\u305b\u307e\u3059\u3002\nusing System.Linq;\nusing System.Collections.Immutable;\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.Diagnostics;\n\nnamespace Analyzer\n{\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    public class RequireAttributeAnalyzer : DiagnosticAnalyzer\n    {\n        public const string DiagnosticId = \"RequireAttributeAnalyzer\";\n\n        private static readonly LocalizableString Title = \"Attribute\u6f0f\u308c\u30c1\u30a7\u30c3\u30ab\u30fc\";\n        private static readonly LocalizableString MessageFormat = \"{0}\u306b\u306f{1}\u304c\u5fc5\u8981\u3067\u3059\";\n        private static readonly LocalizableString Description = Title;\n        private const string Category = \"Attribute\";\n\n        private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, Category, DiagnosticSeverity.Error, isEnabledByDefault: true, description: Description);\n\n        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }\n\n        public override void Initialize(AnalysisContext context)\n        {\n            context.RegisterSyntaxNodeAction(AnalyzeSymbol, SyntaxKind.ClassDeclaration);\n        }\n\n        private void AnalyzeSymbol(SyntaxNodeAnalysisContext context)\n        {\n            var semanticModel = context.SemanticModel;\n\n            var classSyntax = context.Node as ClassDeclarationSyntax;\n            if (null == classSyntax) return;\n\n            var type = semanticModel.GetDeclaredSymbol(classSyntax);\n            if (null == type) return;\n\n            if (!ContainsNamespace(type.ContainingNamespace, \"TargetNamespace\")) return;\n\n            if (!ExtendsClass(type, \"TargetClass\")) return;\n\n            // \u76ee\u7684\u306eAttribute\u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u30a8\u30e9\u30fc\u3067\u306f\u306a\u3044\n            if (ContainsAttribute(type.GetAttributes(), \"TargetAttribute\")) return;\n\n            var location = Location.Create(semanticModel.SyntaxTree, context.Node.Span);\n            var diagnostic = Diagnostic.Create(Rule, location, type.Name, \"TargetAttribute\");\n            context.ReportDiagnostic(diagnostic);\n        }\n\n        private static bool ContainsNamespace(INamespaceSymbol nameSpace, string targetName)\n        {\n            while (nameSpace != null)\n            {\n                if (nameSpace.Name == targetName) return true;\n                nameSpace = nameSpace.ContainingNamespace;\n            }\n            return false;\n        }\n\n        private static bool ExtendsClass(ITypeSymbol type, string targetName)\n        {\n            while (type != null)\n            {\n                if (type.Name == targetName) return true;\n                type = type.BaseType;\n            }\n            return false;\n        }\n\n        private static bool ContainsAttribute(ImmutableArray<AttributeData> attributes, string targetName)\n        {\n            return attributes.Any(x => x.AttributeClass.Name == targetName);\n        }\n    }\n}\n\n\n\u86c7\u8db3\u7684FAQ\n\n\u3069\u3093\u306a\u60c5\u5831\u3092\u3069\u3046\u8fbf\u3063\u305f\u3089\u3044\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\n\n\n\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u7f6e\u3044\u3066\u3001\u5909\u6570\u306e\u5185\u5bb9\u304b\u3089\u307f\u305f\u3044\u3082\u306e\u3092\u63a2\u3057\u307e\u3057\u3087\u3046\u3002\n\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u7f6e\u3044\u305f\u72b6\u614b\u3067\u3042\u308c\u3070\u3001\u30b3\u30fc\u30c9\u3082\u81ea\u7531\u306b\u7de8\u96c6\u3057\u3001\u5373\u6642\u53cd\u6620\u3067\u304d\u308b\u306e\u3067\u6d3b\u7528\u3057\u307e\u3057\u3087\u3046\u3002\n\n\n\u305f\u3060\u3057\u3001\u5927\u304d\u3059\u304e\u308b\u5909\u66f4\u306f\u9664\u304f\n\n\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u56fa\u6709\u306e\u8a2d\u5b9a\u3069\u304b\u3069\u3046\u3059\u308b\u306e\uff1f\n\n\n\u3064 Roslyn Analyzer\u3067\u30b3\u30f3\u30d5\u30a3\u30b0\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u6319\u52d5\u3092\u5909\u66f4\u3059\u308b\n\n\n\n\n\n\u53c2\u8003\u8a18\u4e8b\n\nVS2015\u306eRoslyn\u3067Code Analyzer\u3092\u81ea\u4f5c\u3059\u308b(\u3064\u3044\u3067\u306bUnity\u30b3\u30fc\u30c9\u3082\u89e3\u6790\u3059\u308b)\nVS2015+Roslyn\u306b\u3088\u308bCodeRefactoringProvider\u306e\u4f5c\u308a\u65b9\u3068\u6d3b\u7528\u6cd5\nUniRx\u3067\u306e\u7a7a\u547c\u3073\u51fa\u3057\u691c\u51fa\u3001\u6216\u3044\u306fRoslyn\u306b\u3088\u308bCode Aware Libraries\u6642\u4ee3\u306e\u5230\u6765\u306b\u3064\u3044\u3066\n\n# \u6982\u8981\n\u7279\u5b9a\u306e\u30af\u30e9\u30b9\u53ca\u3073\u305d\u306e\u6d3e\u751f\u30af\u30e9\u30b9\u306b\u306f\u7279\u5b9a\u306eAttribute\u304c\u5fc5\u8981\u3060\u3068\u304b\u3001\n`.Where(...).Any()`\u306f`.Any(...)`\u3067\u3044\u3044\u3058\u3083\u3093\u3068\u304b\u3001\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306f\u3067\u306a\u3044\u3051\u3069\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u307b\u3057\u3044\u3088\u3046\u306a\u7b87\u6240\u3068\u3044\u3046\u306e\u304c\u591a\u3005\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001Roslyn\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u3001\u30a8\u30e9\u30fc\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306e\u65b9\u6cd5\u304c`Analyzer with Code Fix`\u3067\u3059\uff01\n\u30fb\u30fb\u30fb\u304c\u3001\u65e5\u672c\u8a9e\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u308d\u304f\u306b\u306a\u3044\u3057\u3001\u3069\u3046\u624b\u3092\u51fa\u305b\u3070\u308f\u304b\u3089\u306a\u3044\u3068\u3044\u3063\u305f\u65b9\u306e\u9053\u3057\u308b\u3079\u306b\u306a\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f**\u7279\u5b9a\u306e\u30af\u30e9\u30b9\u306b\u306f\u7279\u5b9a\u306eAttribute\u304c\u5fc5\u8981**\u3068\u3044\u3046Analyzer\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u74b0\u5883\nVisual Studio Enterprise 2015 Version 14.0.24720.00 Update 1 \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u624b\u9806\n## SDK\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n- [.NET Compiler Platform SDK](https://visualstudiogallery.msdn.microsoft.com/2ddb7240-5249-4c8c-969e-5d05823bcb89)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u3087\u3046\u3002  \n  \u3053\u308c\u306f\u3001`Diagnostic with Code Fix`\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3084`Syntax Visualizer`\u304c\u540c\u68b1\u3055\u308c\u3066\u3044\u308bSDK\u3067\u3059\u3002\n\n## \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\n- \u65b0\u3057\u3044\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u304b\u3089\u3001 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 - Visual C# - Extensibility - `Analyzer with Code Fix (NuGet + VSIX)`\u3092\u9078\u3073\u307e\u3057\u3087\u3046\u3002\n![image](https://qiita-image-store.s3.amazonaws.com/0/47699/00dd9594-c76c-e343-153d-2385a565fbc0.png)\n\n## \u52d5\u4f5c\u30c6\u30b9\u30c8\u3092\u3057\u3066\u307f\u308b\n- {\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u540d}.Vsix\u3068\u3044\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002(\u30c7\u30d5\u30a9\u30eb\u30c8)\n- F5\u3092\u62bc\u3059\u3068\u3001\u30b5\u30f3\u30c9\u30dc\u30c3\u30af\u30b9\u3068\u306a\u308bVisualStudio\u304c\u3082\u3046\u4e00\u3064\u8d77\u52d5\u3057\u3001\u305d\u3053\u3067\u5b9f\u969b\u306b\u52d5\u304b\u3057\u306a\u304c\u3089\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n    - \u3082\u3061\u308d\u3093\u3001\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3082\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n## Analyzer\u306e\u4f5c\u6210\n### \u307e\u305a\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3053\u306e\u6642\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u540c\u68b1\u3055\u308c\u3066\u3044\u308b`DiagnosticAnalyzer.cs`\u3092\u53c2\u8003\u306b\u3059\u308b\u3068\u697d\u3067\u3059\u3002\n\n### Initialize\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n`AnalysisContext`\u3092\u5f15\u6570\u306b\u53d6\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002  \n\u3053\u3061\u3089\u306f\u3069\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067Analyze\u3092\u5b9f\u884c\u3059\u308b\u304b\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3001`context.RegisterSyntaxNodeAction(AnalyzeSymbol, SyntaxKind.ClassDeclaration);`\u3068\u3057\u3066\u307f\u307e\u3059\u3002\n\n- \u3061\u306a\u307f\u306b\u3001\u3053\u306e\u3042\u305f\u308a\u3082\u30b3\u30fc\u30c9\u88dc\u5b8c\u3092\u983c\u308a\u306b\u624b\u63a2\u308a\u72b6\u614b\u3067\u9032\u3081\u3066\u3044\u307e\u3059\u3002\u4f55\u304b\u3044\u3044\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u3042\u308c\u3070\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n- \u7b2c\u4e00\u5f15\u6570\u306f\u30a2\u30ca\u30e9\u30a4\u30b6\u672c\u4f53\u3068\u306a\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u6e21\u3057\u307e\u3059\u3002\u304a\u597d\u307f\u306e\u540d\u524d\u3067\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n\n### `AnalyzeSymbol`\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n`Initialize`\u3067\u6307\u5b9a\u3057\u305f\u306e\u306f`RegisterSyntaxNodeAction`\u306a\u306e\u3067\u3001`SyntaxNodeAnalysisContext`\u304c\u5f15\u6570\u3067\u3059\u3002\n\u3053\u306eContext\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u60c5\u5831\u304c\u8a70\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306e\u4f8b\u3067\u306f\u3053\u3053\u304b\u3089\u578b\u60c5\u5831\u3092\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u30a8\u30e9\u30fc\u3067\u306f\u306a\u3044\u5834\u5408\u3001\u7121\u8996\u3059\u308b\u5834\u5408\u306f\u305d\u306e\u307e\u307e`return;`\u3059\u308c\u3070\u554f\u984c\u306a\u3044\u3067\u3059\u3002\n\n- \u307e\u305a\u3001`SyntaxNodeAnalysisContext`\u304b\u3089`SemanticModel`\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002  \u3053\u306e\u30af\u30e9\u30b9\u306b\u306f\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u4f55\u306f\u3068\u3082\u3042\u308c\u3053\u306e\u30af\u30e9\u30b9\u304b\u3089\u63a2\u3057\u3066\u3044\u304f\u3068\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n- \u6b21\u306b\u3001`ITypeSymbol`\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002  \u3053\u306e\u30af\u30e9\u30b9\u306f\u4f55\u3089\u304b\u306e\u578b\u3092\u8868\u3059\u30b7\u30f3\u30dc\u30eb\u3092\u8868\u3059\u3082\u306e\u3067\u3059\u3002  \n\n```csharp\nvar semanticModel = context.SemanticModel;\n\nvar classSyntax = context.Node as ClassDeclarationSyntax;\nif (null == classSyntax) return;\n\nvar type = semanticModel.GetDeclaredSymbol(classSyntax);\nif (null == type) return;\n```\n\n> \u6b63\u76f4\u3001`ITypeSymbol`\u3092\u53d6\u5f97\u3059\u308b\u307e\u3067\u304c\u308f\u304b\u308a\u3065\u3089\u3044\u3060\u3051\u3067\u3001\u3042\u3068\u306f\u3053\u3044\u3064\u304b\u3089\u597d\u304d\u306a\u60c5\u5831\u3092\u5f15\u304d\u51fa\u3059\u3060\u3051\u306a\u306e\u3067\u3001\n> \u4ee5\u4e0b\u306f\u8aad\u307f\u98db\u3070\u3057\u3066\u3057\u307e\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\n### \u6307\u5b9a\u306e\u30af\u30e9\u30b9\u307e\u305f\u306f\u3001\u305d\u306e\u6d3e\u751f\u30af\u30e9\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n`ITypeSymbol`\u306b\u306f`BaseType`\u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3042\u308a\u3001\u305d\u308c\u304c\u89aa\u30af\u30e9\u30b9\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001\u518d\u5e30\u7684\u306b\u3053\u306e`ITypeSymbol`\u3092\u8fbf\u3063\u3066\u3044\u3051\u3070\u3001\u6d3e\u751f\u30af\u30e9\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u305d\u306e\u5224\u5b9a\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n```csharp\nprivate static bool ExtendsClass(ITypeSymbol type, string targetName)\n{\n    while (type != null)\n    {\n        if (type.Name == targetName) return true;\n        type = type.BaseType;\n    }\n    return false;\n}\n```\n\n### \u6307\u5b9a\u306eAttribute\u3092\u542b\u3093\u3067\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n`ITypeSymbol.GetAttributes()`\u3067`ImmutableArray<AttributeData>`\u304c\u53d6\u5f97\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\u4ee5\u4e0b\u304c\u305d\u306e\u5224\u5b9a\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n```csharp\nprivate static bool ContainsAttribute(ImmutableArray<AttributeData> attributes, string targetName)\n{\n    return attributes.Any(x => x.AttributeClass.Name == targetName);\n}\n```\n\n### \u30a8\u30e9\u30fc\u60c5\u5831\u3092\u51fa\u3059\n\u3053\u3053\u306f\u6c7a\u3081\u3046\u3061\u3067\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30a8\u30e9\u30fc\u3092\u51fa\u3059\u5834\u6240\u3068\u3001\u5185\u5bb9\u3092\u8a2d\u5b9a\u3057\u3001context\u3078\u5831\u544a\u3057\u307e\u3059\u3002\n`Diagnostic.Create`\u6642\u306b`MessageFormat`\u3078\u5f15\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3088\u308a\u8aac\u660e\u7684\u306a\u8868\u793a\u3092\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n```csharp\nvar location = Location.Create(semanticModel.SyntaxTree, context.Node.Span);\nvar diagnostic = Diagnostic.Create(Rule, location, type.Name, \"TargetAttribute\");\ncontext.ReportDiagnostic(diagnostic);\n```\n\n### \u5b8c\u6210\n\u4ee5\u4e0b\u306bAnalyzer\u306e\u30b3\u30fc\u30c9\u5168\u6587\u3092\u8f09\u305b\u307e\u3059\u3002\n\n```csharp\nusing System.Linq;\nusing System.Collections.Immutable;\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.CSharp;\nusing Microsoft.CodeAnalysis.CSharp.Syntax;\nusing Microsoft.CodeAnalysis.Diagnostics;\n\nnamespace Analyzer\n{\n    [DiagnosticAnalyzer(LanguageNames.CSharp)]\n    public class RequireAttributeAnalyzer : DiagnosticAnalyzer\n    {\n        public const string DiagnosticId = \"RequireAttributeAnalyzer\";\n\n        private static readonly LocalizableString Title = \"Attribute\u6f0f\u308c\u30c1\u30a7\u30c3\u30ab\u30fc\";\n        private static readonly LocalizableString MessageFormat = \"{0}\u306b\u306f{1}\u304c\u5fc5\u8981\u3067\u3059\";\n        private static readonly LocalizableString Description = Title;\n        private const string Category = \"Attribute\";\n\n        private static DiagnosticDescriptor Rule = new DiagnosticDescriptor(DiagnosticId, Title, MessageFormat, Category, DiagnosticSeverity.Error, isEnabledByDefault: true, description: Description);\n\n        public override ImmutableArray<DiagnosticDescriptor> SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }\n\n        public override void Initialize(AnalysisContext context)\n        {\n            context.RegisterSyntaxNodeAction(AnalyzeSymbol, SyntaxKind.ClassDeclaration);\n        }\n\n        private void AnalyzeSymbol(SyntaxNodeAnalysisContext context)\n        {\n            var semanticModel = context.SemanticModel;\n\n            var classSyntax = context.Node as ClassDeclarationSyntax;\n            if (null == classSyntax) return;\n\n            var type = semanticModel.GetDeclaredSymbol(classSyntax);\n            if (null == type) return;\n\n            if (!ContainsNamespace(type.ContainingNamespace, \"TargetNamespace\")) return;\n\n            if (!ExtendsClass(type, \"TargetClass\")) return;\n\n            // \u76ee\u7684\u306eAttribute\u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u30a8\u30e9\u30fc\u3067\u306f\u306a\u3044\n            if (ContainsAttribute(type.GetAttributes(), \"TargetAttribute\")) return;\n\n            var location = Location.Create(semanticModel.SyntaxTree, context.Node.Span);\n            var diagnostic = Diagnostic.Create(Rule, location, type.Name, \"TargetAttribute\");\n            context.ReportDiagnostic(diagnostic);\n        }\n\n        private static bool ContainsNamespace(INamespaceSymbol nameSpace, string targetName)\n        {\n            while (nameSpace != null)\n            {\n                if (nameSpace.Name == targetName) return true;\n                nameSpace = nameSpace.ContainingNamespace;\n            }\n            return false;\n        }\n\n        private static bool ExtendsClass(ITypeSymbol type, string targetName)\n        {\n            while (type != null)\n            {\n                if (type.Name == targetName) return true;\n                type = type.BaseType;\n            }\n            return false;\n        }\n\n        private static bool ContainsAttribute(ImmutableArray<AttributeData> attributes, string targetName)\n        {\n            return attributes.Any(x => x.AttributeClass.Name == targetName);\n        }\n    }\n}\n```\n\n# \u86c7\u8db3\u7684FAQ\n- \u3069\u3093\u306a\u60c5\u5831\u3092\u3069\u3046\u8fbf\u3063\u305f\u3089\u3044\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\n    - \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u7f6e\u3044\u3066\u3001\u5909\u6570\u306e\u5185\u5bb9\u304b\u3089\u307f\u305f\u3044\u3082\u306e\u3092\u63a2\u3057\u307e\u3057\u3087\u3046\u3002\n    - \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u7f6e\u3044\u305f\u72b6\u614b\u3067\u3042\u308c\u3070\u3001\u30b3\u30fc\u30c9\u3082\u81ea\u7531\u306b\u7de8\u96c6\u3057\u3001\u5373\u6642\u53cd\u6620\u3067\u304d\u308b\u306e\u3067\u6d3b\u7528\u3057\u307e\u3057\u3087\u3046\u3002\n        - \u305f\u3060\u3057\u3001\u5927\u304d\u3059\u304e\u308b\u5909\u66f4\u306f\u9664\u304f\n- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u56fa\u6709\u306e\u8a2d\u5b9a\u3069\u304b\u3069\u3046\u3059\u308b\u306e\uff1f\n    - \u3064 [Roslyn Analyzer\u3067\u30b3\u30f3\u30d5\u30a3\u30b0\u3092\u8aad\u307f\u8fbc\u307e\u305b\u3066\u6319\u52d5\u3092\u5909\u66f4\u3059\u308b](http://neue.cc/2016/03/30_527.html)\n\n# \u53c2\u8003\u8a18\u4e8b\n- [VS2015\u306eRoslyn\u3067Code Analyzer\u3092\u81ea\u4f5c\u3059\u308b(\u3064\u3044\u3067\u306bUnity\u30b3\u30fc\u30c9\u3082\u89e3\u6790\u3059\u308b)](http://neue.cc/2014/11/20_485.html)\n- [VS2015+Roslyn\u306b\u3088\u308bCodeRefactoringProvider\u306e\u4f5c\u308a\u65b9\u3068\u6d3b\u7528\u6cd5](http://neue.cc/2014/12/08_496.html)\n- [UniRx\u3067\u306e\u7a7a\u547c\u3073\u51fa\u3057\u691c\u51fa\u3001\u6216\u3044\u306fRoslyn\u306b\u3088\u308bCode Aware Libraries\u6642\u4ee3\u306e\u5230\u6765\u306b\u3064\u3044\u3066](http://neue.cc/2015/05/11_512.html)\n", "tags": ["VisualStudio2015", "Roslyn"]}