{"context": " More than 1 year has passed since last update.\u30a8\u30a4\u30c8\u30fb\u30af\u30a4\u30fc\u30f3\u554f\u984c(Wikipedia)\u3092Erlang\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u524d\u56de\u306f\u518d\u5e30\u306e\u5148\u7aef\u3067\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u3060\u3051\u3067\u3057\u305f(\u306e\u3067\u500b\u6570\u306f\u5225\u30d7\u30ed\u30bb\u30b9\u306e\u30a2\u30af\u30bf\u30fc\u306b\u6570\u3048\u3055\u305b\u3066\u3044\u307e\u3057\u305f)\u304c\u3001\u4eca\u56de\u306f\u3059\u3079\u3066\u306e\u89e3\u3092\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306e\u5148\u7aef\u304b\u3089\u89e3\u3092\u8fd4\u3059\u305f\u3081\u3001\u300c\u4e0b\u964d\u6642\u306b\u3082\u623b\u308a\u306e\u4e0a\u6607\u6642\u306b\u3082\u81ea\u5206\u81ea\u8eab\u3092\u547c\u3073\u51fa\u3057\u7d9a\u3051\u308b\u300d\u65b9\u5f0f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u95a2\u6570\u304c\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u306e\u306f\u3059\u3079\u3066\u306e\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u6642\u3060\u3051\u3067\u3059\u3002\n\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u95a2\u6570:\n\nsolve() \u2026 \u89e3\u3092\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3057\u307e\u3059\u3002\nsolve_count() \u2026 \u89e3\u306e\u500b\u6570(92)\u3092\u8fd4\u3057\u307e\u3059\u3002\nsolve_display() \u2026 \u524d\u56de\u3068\u540c\u69d8\u306b\u89e3\u3092\u30dc\u30fc\u30c9\u72b6\u614b\u306eAA\u3067\u8fd4\u3057\u307e\u3059\u3002\n\n\neq2.erl\n% solve 8-queens problem.\n\n-module(eq2).\n-export([solve/0, solve_count/0, solve_display/0]).\n\n% Solve and return answer as a list of lists.\nsolve() -> solve(1, [], []).\n\n% Solve and return count of answers.\nsolve_count() -> length(solve()).\n\n% Solve and display them in user friendly style.\nsolve_display() -> lists:foreach(fun display/1, solve()).\n\n% Found an answer of queens position.\nsolve(_, Queens, L) when length(Queens) == 8 ->\n  solve(hd(Queens) + 1, tl(Queens), [Queens|L]);\n\n% Finished searching all cell on the board.\nsolve(9, [], L) -> L;\n\n% Finished searching one line.\nsolve(9, [H|T], L) -> solve(H + 1, T, L);\n\n% Search.\nsolve(Col, Queens, L) ->\n  case not conflict(Col, Queens) of\n    true -> solve(1, [Col | Queens], L);\n    false -> solve(Col + 1, Queens, L)\n  end.\n\n% Check if a column conflicts with queens.\nconflict(Col, Queens) ->\n  Conflict = fun({N, QCol}) -> Col == QCol orelse abs(Col - QCol) == N end,\n  lists:any(Conflict, with_idx(Queens)).\n\n% [a,b,c] -> [{1,a},{2,b},{3,c}].\nwith_idx(L) -> lists:zip(lists:seq(1, length(L)), L).\n\n% Display board.\ndisplay(Queens) ->\n  Frame = \"**********\",\n  io:fwrite(\"~s~n\", [Frame]),\n  lists:foreach(fun(X) -> io:fwrite(\"*~s*~n\", [make_line(X)]) end, Queens),\n  io:fwrite(\"~s~n~n\", [Frame]).\n\n% Make a line of board.\nmake_line(X) -> string:chars($., X - 1) ++ \"Q\" ++ string:chars($., 8 - X).\n\n\n\u30a8\u30a4\u30c8\u30fb\u30af\u30a4\u30fc\u30f3\u554f\u984c([Wikipedia](http://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%A4%E3%83%88%E3%83%BB%E3%82%AF%E3%82%A4%E3%83%BC%E3%83%B3))\u3092Erlang\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n[\u524d\u56de](http://qiita.com/pazworld/items/2a50f208ca2e5c1b4098)\u306f\u518d\u5e30\u306e\u5148\u7aef\u3067\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u3060\u3051\u3067\u3057\u305f(\u306e\u3067\u500b\u6570\u306f\u5225\u30d7\u30ed\u30bb\u30b9\u306e\u30a2\u30af\u30bf\u30fc\u306b\u6570\u3048\u3055\u305b\u3066\u3044\u307e\u3057\u305f)\u304c\u3001\u4eca\u56de\u306f\u3059\u3079\u3066\u306e\u89e3\u3092\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30ad\u30f3\u30b0\u306e\u5148\u7aef\u304b\u3089\u89e3\u3092\u8fd4\u3059\u305f\u3081\u3001\u300c\u4e0b\u964d\u6642\u306b\u3082\u623b\u308a\u306e\u4e0a\u6607\u6642\u306b\u3082\u81ea\u5206\u81ea\u8eab\u3092\u547c\u3073\u51fa\u3057\u7d9a\u3051\u308b\u300d\u65b9\u5f0f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u95a2\u6570\u304c\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u306e\u306f\u3059\u3079\u3066\u306e\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u6642\u3060\u3051\u3067\u3059\u3002\n\n\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u95a2\u6570:\n\n- solve() \u2026 \u89e3\u3092\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3057\u307e\u3059\u3002\n- solve_count() \u2026 \u89e3\u306e\u500b\u6570(92)\u3092\u8fd4\u3057\u307e\u3059\u3002\n- solve_display() \u2026 \u524d\u56de\u3068\u540c\u69d8\u306b\u89e3\u3092\u30dc\u30fc\u30c9\u72b6\u614b\u306eAA\u3067\u8fd4\u3057\u307e\u3059\u3002\n\n```erlang:eq2.erl\n% solve 8-queens problem.\n\n-module(eq2).\n-export([solve/0, solve_count/0, solve_display/0]).\n\n% Solve and return answer as a list of lists.\nsolve() -> solve(1, [], []).\n\n% Solve and return count of answers.\nsolve_count() -> length(solve()).\n\n% Solve and display them in user friendly style.\nsolve_display() -> lists:foreach(fun display/1, solve()).\n\n% Found an answer of queens position.\nsolve(_, Queens, L) when length(Queens) == 8 ->\n  solve(hd(Queens) + 1, tl(Queens), [Queens|L]);\n\n% Finished searching all cell on the board.\nsolve(9, [], L) -> L;\n\n% Finished searching one line.\nsolve(9, [H|T], L) -> solve(H + 1, T, L);\n\n% Search.\nsolve(Col, Queens, L) ->\n  case not conflict(Col, Queens) of\n    true -> solve(1, [Col | Queens], L);\n    false -> solve(Col + 1, Queens, L)\n  end.\n\n% Check if a column conflicts with queens.\nconflict(Col, Queens) ->\n  Conflict = fun({N, QCol}) -> Col == QCol orelse abs(Col - QCol) == N end,\n  lists:any(Conflict, with_idx(Queens)).\n\n% [a,b,c] -> [{1,a},{2,b},{3,c}].\nwith_idx(L) -> lists:zip(lists:seq(1, length(L)), L).\n\n% Display board.\ndisplay(Queens) ->\n  Frame = \"**********\",\n  io:fwrite(\"~s~n\", [Frame]),\n  lists:foreach(fun(X) -> io:fwrite(\"*~s*~n\", [make_line(X)]) end, Queens),\n  io:fwrite(\"~s~n~n\", [Frame]).\n\n% Make a line of board.\nmake_line(X) -> string:chars($., X - 1) ++ \"Q\" ++ string:chars($., 8 - X).\n```\n", "tags": ["Erlang"]}