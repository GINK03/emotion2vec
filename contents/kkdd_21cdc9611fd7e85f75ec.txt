{"context": "\u3053\u3093\u306b\u3061\u306f\u3002\nA* search algorithm \u306e Javascript \u5b9f\u88c5\uff08\u4e0b\u8a18\uff09\u306e\u5229\u7528\u306b\u3088\u308b\u6700\u77ed\u7d4c\u8def\u63a2\u7d22\u30671 2\u3001\u4eca\u56de\u306f\u5730\u56f3\u8868\u793a\u306b Mapbox GL JS \u3092\u5229\u7528\u3057\u3001interactive \u98a8\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\nA* Search Algorithm in JavaScript (Updated) - Brian Grinstead\n\n\n\nhttps://github.com/bgrins/javascript-astar (astar.js)\n\n\n\n\u5730\u56f3\u4e0a\u306e\u4e8c\u7b87\u6240\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u7d4c\u8def\u63a2\u7d22\u304c\u8d70\u308a\u307e\u3059\uff08\u4e0b\u8a18\u4f8b\u3067\u59cb\u70b9 Paris\u3001\u7d42\u70b9 Cannes \u3092\u6307\u5b9a\uff09\u3002\n\n\nastar.html\n<!DOCTYPE html>\n<html>\n<meta charset=\"utf-8\">\n<script src=\"astar.js\"></script>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.29.0/mapbox-gl.js'></script>\n<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.29.0/mapbox-gl.css' rel='stylesheet' />\n<style>\nbody { margin:0; padding:0; }\n#map { position:absolute; top:0; bottom:0; width:100%; }\nsvg {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\ncircle {\n  stroke: #222;\n  stroke-width: 0.7px;\n}\n</style>\n</head>\n<body>\n<div id=\"map\"></div>\n<script>\nvar MILE=1609, KM=1000, RE=6371*KM, DEGREE=Math.PI/180;\nvar units = {mi: MILE, km: KM};\nvar mapCenter = [4.0, 46.0], mapScale = 4, unitDistance='km';\nvar nodes = [\n    {name: \"Paris\", lon: 2.3508, lat: 48.8567},\n    {name: \"Lyon\", lon: 4.84, lat: 45.76},\n    {name: \"Marseille\", lon: 5.37, lat: 43.2964},\n    {name: \"Bordeaux\", lon: -0.58, lat: 44.84},\n    {name: \"Cannes\", lon: 7.0128, lat: 43.5513},\n    {name: \"Toulouse\", lon: 1.444, lat: 43.6045},\n    {name: \"Reims\", lon: 4.0347, lat: 49.2628}\n  ];\nvar links = [\n    {source:\"Paris\", target:\"Lyon\", distance:464},\n    {source:\"Paris\", target:\"Bordeaux\", distance:582},\n    {source:\"Paris\", target:\"Reims\", distance:144},\n    {source:\"Lyon\", target:\"Marseille\", distance:314},\n    {source:\"Marseille\", target:\"Cannes\", distance:175},\n    {source:\"Marseille\", target:\"Toulouse\", distance:403},\n    {source:\"Bordeaux\", target:\"Toulouse\", distance:245}\n  ];\n\nmain(nodes, links);\n\nfunction main(nodes, links) {\n  links = setupNodesLinks(nodes, links);\n\n  mapboxgl.accessToken = '<your access token here>';\n\n  var map = new mapboxgl.Map({\n    container: 'map', // container id\n    style: \"mapbox://styles/mapbox/light-v9\",\n    center: mapCenter,\n    zoom: mapScale,  \n  })\n\n  map.addControl(new mapboxgl.NavigationControl());\n  var container = map.getCanvasContainer()\n  var svg = d3.select(container).append(\"svg\")\n\n  function markRoute(routePath) {\n    links.forEach(function(l) {delete l.route;});\n    routePath.forEach(function(i) {links[i.index][\"route\"]=true});\n  }\n\n  function midPoint(a,b) {\n    var n=7;\n    return [(a[0]*n+b[0])/(n+1),(a[1]*n+b[1])/(n+1)];\n  }\n\n  function mapboxProjection(lonlat) {\n    var p = map.project(new mapboxgl.LngLat(lonlat[0], lonlat[1]))\n    return [p.x, p.y];\n  }\n\n  function modName(name) {\n    return name.replace(/\\s/g,\"_\").replace(/\\./g,\"\");\n  }\n\n  function lngLat2coord(lngLat) {\n    return {coord:[lngLat.lng, lngLat.lat]};\n  }\n\n  function markNode(nodeName) {\n    if (nodeName==\"deselectAll\") {d3.selectAll('circle').style(\"fill\", defaultNodeColor);}\n    else {\n      var markNodeColor = 'blue';\n      d3.select('circle#'+modName(nodeName)).style(\"fill\", markNodeColor);\n    }\n  }\n\n  svg.append('defs').append('marker')\n      .attr({'id':'arrowhead',\n             'viewBox':'0 -5 10 10',\n             'refX':0,\n             'refY':0,\n             'orient':'auto',\n             'markerWidth':10,\n             'markerHeight':10,\n             'markerUnits':'userSpaceOnUse',\n             'xoverflow':'visible'})\n      .append('svg:path')\n      .attr('d', 'M 2,0 L 0,-3 L 10,0 L 0,3')\n      .attr('fill', '#2080f0');\n\n  var defaultWidth = 1, defaultLinkColor = \"#a0e0a0\";\n  var link = svg.append(\"g\").selectAll(\".link\")\n      .data(links)\n      .enter().append(\"path\")\n      .attr(\"class\", \"link\")\n      .style(\"stroke\", defaultLinkColor)\n      .style(\"stroke-width\", defaultWidth);\n\n  var defaultRadius = 3, defaultNodeColor = \"#ccc\";\n  var node = svg.append(\"g\").selectAll(\".node\")\n      .data(nodes)\n      .enter().append(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", defaultRadius)\n      .attr(\"id\", function(d) {return modName(d.name);})\n      .style(\"fill\", defaultNodeColor)\n\n  link.each(function(d) {\n      d.source.links.push(d);\n      d.selection = d3.select(this);\n  });\n\n  node.each(function(d) {\n      d.selection = d3.select(this);\n  });\n\n  node\n      .append(\"title\")\n      .text(function(d) { return d.name });\n\n  link.append(\"title\")\n      .text(function(d) { return d.source.name + \" \u2192 \" + d.target.name + \"\\n\" + d.distance + \" \" + unitDistance});\n\n  var query = {};\n\n  map.on('click', function(e) {\n    var q=lngLat2coord(e.lngLat);\n    var nodeDistance=nodes.map(function(p) {return GeoDistance(p,q)});\n    var imin = nodeDistance.indexOf(Math.min.apply(null,nodeDistance));    \n    if (query.start==undefined) {\n      query.start=nodes[imin].name;\n      markNode(\"deselectAll\");\n    }\n    else if (query.end==undefined) {\n      query.end=nodes[imin].name;\n      var result = astarRouting(nodes, links, query);\n      markRoute(result.path);\n      render();\n      query = {};\n    }\n    markNode(nodes[imin].name);\n  });\n\n\n  function render() {\n    node\n      .each(function(d) {d.proj = mapboxProjection(d.coord); })\n      .attr(\"transform\", function(d) { return \"translate(\" + d.proj + \")\" });\n    link\n      .attr(\"d\", function(d) {var a=mapboxProjection(d.source.coord), c=mapboxProjection(d.target.coord), b=midPoint(a,c); return \"M \"+a+\" L \"+b+\" L \"+c;})\n      .attr(\"marker-mid\", function(d) {return (d.route===true)?'url(#arrowhead)':'none';})\n  }\n\n  map.on(\"viewreset\", function() {\n    render()\n  })\n\n  map.on(\"move\", function() {\n    render()\n  })\n\n  render()\n\n}\n\n\nfunction GeoDistance(p, q) {\n  var x=p.coord[0]-q.coord[0], y=p.coord[1]-q.coord[1], t=p.coord[1]+q.coord[1];\n  x*=Math.cos(t/2*DEGREE);\n  return Math.sqrt(x*x+y*y)*DEGREE*RE;\n};\n\n\nfunction setupNodesLinks(nodes, links) {\n\n  function createReverseLinks(links) {\n    return links.map(function(d) {\n      return {\"source\":d.target, \"target\":d.source, \"distance\":d.distance}\n    })\n  }\n\n  links = links.concat(createReverseLinks(links));\n\n  var nodesByName = {};\n  nodes.forEach(function(d) {\n    d.coord = [+d.lon, +d.lat]\n    nodesByName[d.name] = d;\n    d.links = [];\n  });\n\n  links.forEach(function(d) {\n    d.source = nodesByName[d.source]  // overwrite\n    d.target = nodesByName[d.target]\n    d.distance = +d.distance;\n  });\n\n  return links;\n}\n\n\nfunction astarRouting(nodes, links, query) {\n\n  function GeoGraph(nodes, links) {\n    this.nodes = {};\n    this.links = links;\n    for (var i=nodes.length-1; i>=0; i--) {\n      var node = nodes[i];\n      this.nodes[node.name] = new GeoNode(node);\n    }\n    this.init();\n  }\n\n  GeoGraph.prototype.init = function() {\n    this.dirtyNodes = [];\n    for (var k in this.nodes) {\n      astar.cleanNode(this.nodes[k]);\n    }\n  };\n  GeoGraph.prototype.cleanDirty = Graph.prototype.cleanDirty;\n  GeoGraph.prototype.markDirty = Graph.prototype.markDirty;\n\n  GeoGraph.prototype.neighbors = function(node) {\n    var neighs=Object.keys(node.neighbors);\n    if (!neighs.length) {\n        neighs = createNeighbors(node, this.links);\n    }\n    return nodesByName(neighs, this.nodes);\n  };\n\n  function nodesByName(names, nodes) {\n      return names.map(function(n) {return nodes[n];});\n  }\n\n  function createNeighbors(node, links) {\n    var li, neighs = node.neighbors;\n    for (var i=links.length-1; i>=0; i--) {\n      if ((li = links[i]) && li.source.name==node.name) {\n        neighs[li.target.name] = new Link(i, li.distance*units[unitDistance]);\n      }\n    }\n    return Object.keys(neighs);\n  };\n\n  function Link(index, cost) {\n    this.index = index;\n    this.cost = cost;\n  }\n\n  function GeoNode(node) {\n    this.name = node.name;\n    this.coord = node.coord;\n    this.neighbors = {};\n  }\n\n  GeoNode.prototype.weight = 1;\n  GeoNode.prototype.isWall = function() {\n    return this.weight === 0;\n  };\n  GeoNode.prototype.getCost = function(nodeSource) {\n    return this.getNeighbor(nodeSource).cost;\n  };\n\n  GeoNode.prototype.getNeighbor = function(nodeSource) {\n    return nodeSource.neighbors[this.name];\n  }\n\n  function getLink(node) {\n    return node.getNeighbor(node.parent);\n  }\n\n  var graph = new GeoGraph(nodes, links);\n  var startEnd = [\"start\", \"end\"].map(function(x) {return graph.nodes[query[x]];});\n  var sTime = new Date();\n  var result = astar.search(graph, startEnd[0], startEnd[1], {heuristic: GeoDistance});\n  var deltaTime = new Date() - sTime;\n  var route = [query[\"start\"]].concat(result.map(function(x) {return x.name}));\n  var path = result.map(function(x) {return getLink(x);});\n  return {\"route\": route, \"path\": path, \"calculationTime\": deltaTime};\n}\n\n</script>\n</body>\n</html>\n\n\n\n\n\n\n\u524d\u56de\u306f\u5730\u56f3\u8868\u793a\u306b d3.mapzoom \u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\u00a0\u21a9\n\n\n\u306a\u304a Dijkstra \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u3001\"Putting Dijkstra's algorithm on the map (Simon Jacobs\u2019s Block)\" \u306e\u30b3\u30fc\u30c9\u304c\u307b\u307c\u540c\u69d8\u306b\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n\u3053\u3093\u306b\u3061\u306f\u3002\n[A* search algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm#Variants_of_A.2A) \u306e Javascript \u5b9f\u88c5\uff08\u4e0b\u8a18\uff09\u306e\u5229\u7528\u306b\u3088\u308b\u6700\u77ed[\u7d4c\u8def\u63a2\u7d22](https://en.wikipedia.org/wiki/Pathfinding)\u3067[^1] [^2]\u3001\u4eca\u56de\u306f\u5730\u56f3\u8868\u793a\u306b Mapbox GL JS \u3092\u5229\u7528\u3057\u3001interactive \u98a8\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n[^1]: [\u524d\u56de](http://qiita.com/kkdd/items/8e64869ebe5a1af0d053)\u306f\u5730\u56f3\u8868\u793a\u306b [d3.mapzoom](http://bl.ocks.org/sdjacobs) \u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n[^2]: \u306a\u304a Dijkstra \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u3001\"[Putting Dijkstra's algorithm on the map (Simon Jacobs\u2019s Block)](http://bl.ocks.org/sdjacobs/c2ee01307cdeceb19f9d)\" \u306e\u30b3\u30fc\u30c9\u304c\u307b\u307c\u540c\u69d8\u306b\u52d5\u304f\u3068\u601d\u3044\u307e\u3059\u3002\n\n* [A* Search Algorithm in JavaScript (Updated)](http://www.briangrinstead.com/blog/astar-search-algorithm-in-javascript-updated) - Brian Grinstead\n * https://github.com/bgrins/javascript-astar (astar.js)\n\n\u5730\u56f3\u4e0a\u306e\u4e8c\u7b87\u6240\u3092\u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u7d4c\u8def\u63a2\u7d22\u304c\u8d70\u308a\u307e\u3059\uff08\u4e0b\u8a18\u4f8b\u3067\u59cb\u70b9 Paris\u3001\u7d42\u70b9 Cannes \u3092\u6307\u5b9a\uff09\u3002\n\n<img width=\"475\" alt=\"astar.jpg\" src=\"https://qiita-image-store.s3.amazonaws.com/0/54617/ada01edd-4446-679c-e260-35c0d255b4b0.jpeg\">\n\n```astar.html\n<!DOCTYPE html>\n<html>\n<meta charset=\"utf-8\">\n<script src=\"astar.js\"></script>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.29.0/mapbox-gl.js'></script>\n<link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.29.0/mapbox-gl.css' rel='stylesheet' />\n<style>\nbody { margin:0; padding:0; }\n#map { position:absolute; top:0; bottom:0; width:100%; }\nsvg {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\ncircle {\n  stroke: #222;\n  stroke-width: 0.7px;\n}\n</style>\n</head>\n<body>\n<div id=\"map\"></div>\n<script>\nvar MILE=1609, KM=1000, RE=6371*KM, DEGREE=Math.PI/180;\nvar units = {mi: MILE, km: KM};\nvar mapCenter = [4.0, 46.0], mapScale = 4, unitDistance='km';\nvar nodes = [\n    {name: \"Paris\", lon: 2.3508, lat: 48.8567},\n    {name: \"Lyon\", lon: 4.84, lat: 45.76},\n    {name: \"Marseille\", lon: 5.37, lat: 43.2964},\n    {name: \"Bordeaux\", lon: -0.58, lat: 44.84},\n    {name: \"Cannes\", lon: 7.0128, lat: 43.5513},\n    {name: \"Toulouse\", lon: 1.444, lat: 43.6045},\n    {name: \"Reims\", lon: 4.0347, lat: 49.2628}\n  ];\nvar links = [\n    {source:\"Paris\", target:\"Lyon\", distance:464},\n    {source:\"Paris\", target:\"Bordeaux\", distance:582},\n    {source:\"Paris\", target:\"Reims\", distance:144},\n    {source:\"Lyon\", target:\"Marseille\", distance:314},\n    {source:\"Marseille\", target:\"Cannes\", distance:175},\n    {source:\"Marseille\", target:\"Toulouse\", distance:403},\n    {source:\"Bordeaux\", target:\"Toulouse\", distance:245}\n  ];\n\nmain(nodes, links);\n\nfunction main(nodes, links) {\n  links = setupNodesLinks(nodes, links);\n\n  mapboxgl.accessToken = '<your access token here>';\n\n  var map = new mapboxgl.Map({\n    container: 'map', // container id\n    style: \"mapbox://styles/mapbox/light-v9\",\n    center: mapCenter,\n    zoom: mapScale,  \n  })\n\n  map.addControl(new mapboxgl.NavigationControl());\n  var container = map.getCanvasContainer()\n  var svg = d3.select(container).append(\"svg\")\n \n  function markRoute(routePath) {\n    links.forEach(function(l) {delete l.route;});\n    routePath.forEach(function(i) {links[i.index][\"route\"]=true});\n  }\n\n  function midPoint(a,b) {\n    var n=7;\n    return [(a[0]*n+b[0])/(n+1),(a[1]*n+b[1])/(n+1)];\n  }\n\n  function mapboxProjection(lonlat) {\n    var p = map.project(new mapboxgl.LngLat(lonlat[0], lonlat[1]))\n    return [p.x, p.y];\n  }\n\n  function modName(name) {\n    return name.replace(/\\s/g,\"_\").replace(/\\./g,\"\");\n  }\n\n  function lngLat2coord(lngLat) {\n    return {coord:[lngLat.lng, lngLat.lat]};\n  }\n\n  function markNode(nodeName) {\n    if (nodeName==\"deselectAll\") {d3.selectAll('circle').style(\"fill\", defaultNodeColor);}\n    else {\n      var markNodeColor = 'blue';\n      d3.select('circle#'+modName(nodeName)).style(\"fill\", markNodeColor);\n    }\n  }\n\n  svg.append('defs').append('marker')\n      .attr({'id':'arrowhead',\n             'viewBox':'0 -5 10 10',\n             'refX':0,\n             'refY':0,\n             'orient':'auto',\n             'markerWidth':10,\n             'markerHeight':10,\n             'markerUnits':'userSpaceOnUse',\n             'xoverflow':'visible'})\n      .append('svg:path')\n      .attr('d', 'M 2,0 L 0,-3 L 10,0 L 0,3')\n      .attr('fill', '#2080f0');\n\n  var defaultWidth = 1, defaultLinkColor = \"#a0e0a0\";\n  var link = svg.append(\"g\").selectAll(\".link\")\n      .data(links)\n      .enter().append(\"path\")\n      .attr(\"class\", \"link\")\n      .style(\"stroke\", defaultLinkColor)\n      .style(\"stroke-width\", defaultWidth);\n\n  var defaultRadius = 3, defaultNodeColor = \"#ccc\";\n  var node = svg.append(\"g\").selectAll(\".node\")\n      .data(nodes)\n      .enter().append(\"circle\")\n      .attr(\"class\", \"node\")\n      .attr(\"r\", defaultRadius)\n      .attr(\"id\", function(d) {return modName(d.name);})\n      .style(\"fill\", defaultNodeColor)\n    \n  link.each(function(d) {\n      d.source.links.push(d);\n      d.selection = d3.select(this);\n  });\n\n  node.each(function(d) {\n      d.selection = d3.select(this);\n  });\n\n  node\n      .append(\"title\")\n      .text(function(d) { return d.name });\n\n  link.append(\"title\")\n      .text(function(d) { return d.source.name + \" \u2192 \" + d.target.name + \"\\n\" + d.distance + \" \" + unitDistance});\n  \n  var query = {};\n\n  map.on('click', function(e) {\n    var q=lngLat2coord(e.lngLat);\n    var nodeDistance=nodes.map(function(p) {return GeoDistance(p,q)});\n    var imin = nodeDistance.indexOf(Math.min.apply(null,nodeDistance));    \n    if (query.start==undefined) {\n      query.start=nodes[imin].name;\n      markNode(\"deselectAll\");\n    }\n    else if (query.end==undefined) {\n      query.end=nodes[imin].name;\n      var result = astarRouting(nodes, links, query);\n      markRoute(result.path);\n      render();\n      query = {};\n    }\n    markNode(nodes[imin].name);\n  });\n\n\n  function render() {\n    node\n      .each(function(d) {d.proj = mapboxProjection(d.coord); })\n      .attr(\"transform\", function(d) { return \"translate(\" + d.proj + \")\" });\n    link\n      .attr(\"d\", function(d) {var a=mapboxProjection(d.source.coord), c=mapboxProjection(d.target.coord), b=midPoint(a,c); return \"M \"+a+\" L \"+b+\" L \"+c;})\n      .attr(\"marker-mid\", function(d) {return (d.route===true)?'url(#arrowhead)':'none';})\n  }\n\n  map.on(\"viewreset\", function() {\n    render()\n  })\n\n  map.on(\"move\", function() {\n    render()\n  })\n\n  render()\n\n}\n\n\nfunction GeoDistance(p, q) {\n  var x=p.coord[0]-q.coord[0], y=p.coord[1]-q.coord[1], t=p.coord[1]+q.coord[1];\n  x*=Math.cos(t/2*DEGREE);\n  return Math.sqrt(x*x+y*y)*DEGREE*RE;\n};\n\n\nfunction setupNodesLinks(nodes, links) {\n\n  function createReverseLinks(links) {\n    return links.map(function(d) {\n      return {\"source\":d.target, \"target\":d.source, \"distance\":d.distance}\n    })\n  }\n\n  links = links.concat(createReverseLinks(links));\n\n  var nodesByName = {};\n  nodes.forEach(function(d) {\n    d.coord = [+d.lon, +d.lat]\n    nodesByName[d.name] = d;\n    d.links = [];\n  });\n\n  links.forEach(function(d) {\n    d.source = nodesByName[d.source]  // overwrite\n    d.target = nodesByName[d.target]\n    d.distance = +d.distance;\n  });\n\n  return links;\n}\n\n\nfunction astarRouting(nodes, links, query) {\n\n  function GeoGraph(nodes, links) {\n    this.nodes = {};\n    this.links = links;\n    for (var i=nodes.length-1; i>=0; i--) {\n      var node = nodes[i];\n      this.nodes[node.name] = new GeoNode(node);\n    }\n    this.init();\n  }\n\n  GeoGraph.prototype.init = function() {\n    this.dirtyNodes = [];\n    for (var k in this.nodes) {\n      astar.cleanNode(this.nodes[k]);\n    }\n  };\n  GeoGraph.prototype.cleanDirty = Graph.prototype.cleanDirty;\n  GeoGraph.prototype.markDirty = Graph.prototype.markDirty;\n\n  GeoGraph.prototype.neighbors = function(node) {\n    var neighs=Object.keys(node.neighbors);\n    if (!neighs.length) {\n        neighs = createNeighbors(node, this.links);\n    }\n    return nodesByName(neighs, this.nodes);\n  };\n\n  function nodesByName(names, nodes) {\n      return names.map(function(n) {return nodes[n];});\n  }\n\n  function createNeighbors(node, links) {\n    var li, neighs = node.neighbors;\n    for (var i=links.length-1; i>=0; i--) {\n      if ((li = links[i]) && li.source.name==node.name) {\n        neighs[li.target.name] = new Link(i, li.distance*units[unitDistance]);\n      }\n    }\n    return Object.keys(neighs);\n  };\n\n  function Link(index, cost) {\n    this.index = index;\n    this.cost = cost;\n  }\n\n  function GeoNode(node) {\n    this.name = node.name;\n    this.coord = node.coord;\n    this.neighbors = {};\n  }\n\n  GeoNode.prototype.weight = 1;\n  GeoNode.prototype.isWall = function() {\n    return this.weight === 0;\n  };\n  GeoNode.prototype.getCost = function(nodeSource) {\n    return this.getNeighbor(nodeSource).cost;\n  };\n\n  GeoNode.prototype.getNeighbor = function(nodeSource) {\n    return nodeSource.neighbors[this.name];\n  }\n\n  function getLink(node) {\n    return node.getNeighbor(node.parent);\n  }\n\n  var graph = new GeoGraph(nodes, links);\n  var startEnd = [\"start\", \"end\"].map(function(x) {return graph.nodes[query[x]];});\n  var sTime = new Date();\n  var result = astar.search(graph, startEnd[0], startEnd[1], {heuristic: GeoDistance});\n  var deltaTime = new Date() - sTime;\n  var route = [query[\"start\"]].concat(result.map(function(x) {return x.name}));\n  var path = result.map(function(x) {return getLink(x);});\n  return {\"route\": route, \"path\": path, \"calculationTime\": deltaTime};\n}\n\n</script>\n</body>\n</html>\n```\n", "tags": ["JavaScript", "d3.js", "\u30b0\u30e9\u30d5\u63a2\u7d22", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "mapbox"]}