{"context": " More than 1 year has passed since last update.\u300eETag\u7b49\u306e\u6bd4\u8f03\u3067\u66f4\u65b0\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3057\u305f\u3044\u300f\u3092inject\u30e1\u30bd\u30c3\u30c9\u3067\u66f8\u304d\u76f4\u3057\u305f\u3002\u4f9d\u7136\u3068\u3057\u3066\u30e2\u30e4\u30e2\u30e4\u306f\u6674\u308c\u306a\u3044\u3051\u3069\u3082\u3002\nrequire \"logger\"\nrequire \"open-uri\"\n\n$logger = Logger.new($stderr)\n$logger.level = Logger::DEBUG\n\nclass Crawler\n  def initialize(interval)\n    @interval = interval\n  end\n\n  def start\n    loop.inject(\"\") do |etag|\n      connection = Connection.new(@interval, etag)\n      yield response = connection.start\n      sleep @interval\n      response.meta[\"etag\"]\n    end\n    self\n  end\nend\n\nclass Connection\n  ENDPOINT = URI(\"https://example.com/index.rss\")\n  OPTION = {\n    read_timeout: 5,\n  }\n\n  def initialize(interval, etag = \"\")\n    @interval = interval\n    @etag = etag\n  end\n\n  def start\n    open(ENDPOINT, OPTION.merge(\"If-None-Match\" => @etag))\n  rescue OpenURI::HTTPError\n    sleep @interval\n    retry\n  rescue => e\n    $logger.warn(\"%s: %s\" % [e.class, e.message])\n    sleep @interval\n    retry\n  end\nend\n\nc = Crawler.new(3)\n\nc.start do |response|\n  $logger.info(response.meta[\"etag\"])\nend\n\n\u300e[ETag\u7b49\u306e\u6bd4\u8f03\u3067\u66f4\u65b0\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3057\u305f\u3044](http://qiita.com/hadzimme/items/57c79731b3f5b5471d74)\u300f\u3092`inject`\u30e1\u30bd\u30c3\u30c9\u3067\u66f8\u304d\u76f4\u3057\u305f\u3002\u4f9d\u7136\u3068\u3057\u3066\u30e2\u30e4\u30e2\u30e4\u306f\u6674\u308c\u306a\u3044\u3051\u3069\u3082\u3002\n\n```rb\nrequire \"logger\"\nrequire \"open-uri\"\n\n$logger = Logger.new($stderr)\n$logger.level = Logger::DEBUG\n\nclass Crawler\n  def initialize(interval)\n    @interval = interval\n  end\n\n  def start\n    loop.inject(\"\") do |etag|\n      connection = Connection.new(@interval, etag)\n      yield response = connection.start\n      sleep @interval\n      response.meta[\"etag\"]\n    end\n    self\n  end\nend\n\nclass Connection\n  ENDPOINT = URI(\"https://example.com/index.rss\")\n  OPTION = {\n    read_timeout: 5,\n  }\n\n  def initialize(interval, etag = \"\")\n    @interval = interval\n    @etag = etag\n  end\n\n  def start\n    open(ENDPOINT, OPTION.merge(\"If-None-Match\" => @etag))\n  rescue OpenURI::HTTPError\n    sleep @interval\n    retry\n  rescue => e\n    $logger.warn(\"%s: %s\" % [e.class, e.message])\n    sleep @interval\n    retry\n  end\nend\n\nc = Crawler.new(3)\n\nc.start do |response|\n  $logger.info(response.meta[\"etag\"])\nend\n```\n", "tags": ["Ruby", "RSS", "api"]}