{"context": "\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #30 (2.3.4)\n\u7df4\u7fd2\u554f\u984c 2.67 - 2.69\n\n2.3.4. \u4f8b: \u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u5316\u6728\n\u307e\u305a\u306f\u666e\u901a\u306b\u30cf\u30d5\u30de\u30f3\u7b26\u53f7.\n\u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u306f\u4e8c\u5206\u6728\u3067\u8868\u73fe\u3067\u304d\u3066\u305d\u308c\u304c\u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u5316\u6728\u306e\u6a21\u69d8.\n\n2.3.4 (a) \u30cf\u30d5\u30de\u30f3\u6728\u306e\u751f\u6210\n\u983b\u5ea6\u306e\u5c11\u306a\u3044\u30ce\u30fc\u30c92\u3064\u3092\u63a5\u5408\u3057\u3066\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u306b\u3059\u308b\u306e\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067, \u983b\u5ea6\u304c\u5c11\u306a\u3044\u307b\u3069\u9577\u3044\u679d\u306e\u5148\u3063\u307d\u306b\u306a\u308b.\n\u3064\u307e\u308a\u305d\u306e\u6587\u5b57\u3092\u8868\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u30d3\u30c3\u30c8\u5217\u304c\u9577\u304f\u306a\u308b.\n\n2.3.4 (b) \u30cf\u30d5\u30de\u30f3\u6728\u306e\u8868\u73fe\n\u8449\u3068\u7bc0\u306b\u5bfe\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30bb\u30ec\u30af\u30bf.\nsymbols \u3068 weight, tree \u306e\u5834\u5408\u3082 symbols-tree \u3068 weight-tree \u3064\u304f\u3063\u3066, \u305d\u308c\u3092\u4f7f\u3063\u3066\n(define (symbols object)\n    (if\n        (leaf? object)\n        (symbol-leaf object)\n        (symbols-tree object)))\n\n\u3068\u304b\u306e\u307b\u3046\u304c\u3059\u3063\u304d\u308a\u306a\u304d\u304c\u307b\u3093\u306e\u308a.\n\u4e00\u7dd2\u306b\u306a\u3063\u3066\u308b\u3068 caddr \u306e\u6570\u304c\u57cb\u3082\u308c\u3066\u3082\u306b\u3085\u3093\uff1d\u03c9\uff1d\uff1b\n\n2.3.4 (b) \u5b9f\u88c5\n; [sec-2.3.4-b.scm]\n;\n(define (sec-2.3.4-b)\n    (print \"leaf = (make-leaf 'A 8)\")\n    (let\n        (\n            (leaf (make-leaf 'A 8))\n        )\n        (print \";==> \" leaf)\n        (print \"(leaf? leaf)\")\n        (print \";==> \"(leaf? leaf))\n        (print \"(symbol-leaf leaf)\")\n        (print \";==> \" (symbol-leaf leaf))\n        (print \"(weight-leaf leaf)\")\n        (print \";==> \" (weight-leaf leaf))\n    )\n\n    (newline)\n    (print \"(make-code-tree (make-leaf 'B 8) (make-leaf 'C 1))\")\n    (let\n        (\n            (tree (make-code-tree (make-leaf 'B 8) (make-leaf 'C 1)))\n        )\n        (print \";==> \" tree)\n        (print \"(leaf? tree)\")\n        (print \";==> \" (leaf? tree))\n        (print \"(left-branch tree)\")\n        (print \";==> \" (left-branch tree))\n        (print \"(right-branch tree)\")\n        (print \";==> \" (right-branch tree))\n        (print \"(symbols tree)\")\n        (print \";==> \" (symbols tree))\n        (print \"(weight tree)\")\n        (print \";==> \" (weight tree))\n    )\n    #t)\n\n\n(define (make-leaf symbol weight)\n    (list 'leaf symbol weight))\n\n(define (leaf? object)\n    (eq? (car object) 'leaf))\n\n(define (symbol-leaf x) (cadr  x))\n(define (weight-leaf x) (caddr x))\n\n\n(define (make-code-tree left right)\n    (list\n        left\n        right\n        (append (symbols left) (symbols right))\n        (+ (weight left) (weight right))))\n\n(define (left-branch  tree) (car  tree))\n(define (right-branch tree) (cadr tree))\n\n(define (symbols tree)\n    (if\n        (leaf? tree)\n        (list (symbol-leaf tree))\n        (caddr tree)))\n\n(define (weight tree)\n    (if\n        (leaf? tree)\n        (weight-leaf tree)\n        (cadddr tree)))\n\n\n2.3.4 (b) \u5b9f\u884c\u7d50\u679c\ngosh> (sec-2.3.4-b)\nleaf = (make-leaf 'A 8)\n;==> (leaf A 8)\n(leaf? leaf)\n;==> #t\n(symbol-leaf leaf)\n;==> A\n(weight-leaf leaf)\n;==> 8\n\n(make-code-tree (make-leaf 'B 8) (make-leaf 'C 1))\n;==> ((leaf B 8) (leaf C 1) (B C) 9)\n(leaf? tree)\n;==> #f\n(left-branch tree)\n;==> (leaf B 8)\n(right-branch tree)\n;==> (leaf C 1)\n(symbols tree)\n;==> (B C)\n(weight tree)\n;==> 9\n#t\n\n\n2.3.4 (c) \u5fa9\u53f7\u5316\u624b\u7d9a\u304d\n(print \"TEST\" 1) \u306f TEST1 \u306b\u306a\u308b\u306e\u306b (error \"TEST\" 1) \u306f TEST 1 \u306b\u306a\u308b\u306e\u306d\u5fae\u5999\u306a\u9055\u3044\uff1d\u30ee\uff1d\uff1b\n\u679d\u9078\u3076 bit \u3067 0/1 \u4ee5\u5916\u306f\u30a8\u30e9\u30fc\u3063\u3066\u3057\u3066\u308b\u3051\u308c\u3069, \u5165\u529b\u306e bits \u304c\u4e2d\u9014\u534a\u7aef\u3067\u9014\u5207\u308c\u3066\u308b\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3067\u306a\u3044\u306e\u306d\u2026\n\u3068\u306f\u3044\u3063\u3066\u3082\u30a8\u30e9\u30fc\u306b\u3059\u308b\u306b\u306f (tree-eq? current-branch tree) \u304c\u771f\u3063\u3066\u3059\u308b\u304b, \u4eca\u3061\u3087\u3046\u3069\u533a\u5207\u308a\u306e\u3044\u3044\u3068\u3053\u308d\u304b\u306e\u5224\u5b9a\u7528\u306b\u5f15\u6570\u3092\u8ffd\u52a0\u3059\u308b\u304b\u304c\u5fc5\u8981\u307d\u305d\u3046.\n\u3068\u3044\u3046\u308f\u3051\u3067\u5224\u5b9a\u306e\u624b\u8efd\u306a\u5f8c\u8005\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3063\u30fb\u03c9\u30fb*\n\n2.3.4 (c) \u5b9f\u88c5\n; [sec-2.3.4-c.scm]\n;\n(define (sec-2.3.4-c)\n    (let\n        (\n            (tree (make-code-tree (make-leaf 'A 8) (make-code-tree (make-leaf 'B 3) (make-leaf 'C 1))))\n        )\n        (print \"tree = \" tree)\n        (print \"(decode (list 0) tree)\")\n        (print \";==> \" (decode (list 0) tree))\n        (print \"(decode (list 1 0) tree)\")\n        (print \";==> \" (decode (list 1 0) tree))\n        (print \"(decode (list 0 1 0 1 1 0) tree)\")\n        (print \";==> \" (decode (list 0 1 0 1 1 0) tree))\n        (print \"(decode (list 1) tree) ; raise error\")\n        (print \";==> \" (decode (list 1) tree))\n    )\n    #t)\n\n\n(load \"./sec-2.3.4-b\")\n\n\n(define (decode bits tree)\n    (define (decode-1 bits current-branch completed)\n        (if\n            (null? bits)\n            (if\n                completed\n                '()\n                (error \"unexpected end of bits\"))\n            (let\n                (\n                    (next-branch (choose-branch (car bits) current-branch))\n                )\n                (if\n                    (leaf? next-branch)\n                    (cons\n                        (symbol-leaf next-branch)\n                        (decode-1 (cdr bits) tree #t))\n                    (decode-1 (cdr bits) next-branch #f)))))\n\n    (decode-1 bits tree #t))\n\n\n(define (choose-branch bit branch)\n    (cond\n        ((= bit 0) (left-branch branch))\n        ((= bit 1) (right-branch branch))\n        (else (error \"bad bit: CHOOSE-BRANCH\" bit))))\n\n\n2.3.4 (c) \u5b9f\u884c\u7d50\u679c\ngosh> (sec-2.3.4-c)\ntree = ((leaf A 8) ((leaf B 3) (leaf C 1) (B C) 4) (A B C) 12)\n(decode (list 0) tree)\n;==> (A)\n(decode (list 1 0) tree)\n;==> (B)\n(decode (list 0 1 0 1 1 0) tree)\n;==> (A B C A)\n(decode (list 1) tree) ; raise error\n*** ERROR: unexpected end of bits\n\n\n2.3.4 (d) \u91cd\u307f\u4ed8\u304d\u8981\u7d20\u306e\u96c6\u5408\n\u5c0f\u3055\u3044\u65b9\u304b\u3089\u8449\u3092\u9078\u3073\u3068\u308b\u305f\u3081\u306b\u9806\u5e8f\u4ed8\u304d\u30ea\u30b9\u30c8\u3068\u3057\u3066\u306e adjoin-set \u3092 leaf \u306b\u5bfe\u3057\u3066\u518d\u5ea6\u5b9f\u88c5\u3059\u308b.\n\n2.3.4 (d) \u5b9f\u88c5\n; [sec-2.3.4-d.scm]\n;\n(define (sec-2.3.4-d)\n    (print \"(make-leaf-set '((A 4) (B 2) (C 1) (D 1)))\")\n    (print \";==> \" (make-leaf-set '((A 4) (B 2) (C 1) (D 1))))\n    #t)\n\n\n(load \"./sec-2.3.4-c\")\n\n\n(define (adjoin-set x set)\n    (cond\n        ; \u521d\u56de\u53ca\u3073\u4e00\u756a\u8efd\u3044\u5834\u5408.\n        ((null? set) (list x))\n        ; \u9014\u4e2d\u306b\u633f\u5165.\n        ((< (weight x) (weight (car set))) (cons x set))\n        ; \u6b21\u3092\u63a2\u7d22.\n        (else\n            (cons\n                (car set)\n                (adjoin-set x (cdr set))))))\n\n\n(define (make-leaf-set pairs)\n    (if\n        (null? pairs)\n        '()\n        (let\n            (\n                (pair (car pairs))\n            )\n            (adjoin-set\n                (make-leaf\n                    (car  pair)   ; symbol.\n                    (cadr pair))  ; frequency.\n                (make-leaf-set (cdr pairs))))))\n\n\n2.3.4 (d) \u5b9f\u884c\u7d50\u679c\ngosh> (sec-2.3.4-d)\n(make-leaf-set '((A 4) (B 2) (C 1) (D 1)))\n;==> ((leaf D 1) (leaf C 1) (leaf B 2) (leaf A 4))\n#t\n\n\nex-2.67. \u63d0\u793a\u3055\u308c\u305f\u6728\u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u306e decode\n\u305d\u306e\u307e\u3093\u307e\u30fb\u03c9\u30fb*\n\nex-2.67. \u5b9f\u88c5\n; [ex-2.67.scm]\n;\n(define (ex-2.67)\n    (print \"sample-tree\")\n    (print \";==> \" sample-tree)\n    (print \"sample-message\")\n    (print \";==> \" sample-message)\n    (print \"(decode sample-message sample-tree)\")\n    (print \";==> \" (decode sample-message sample-tree))\n    #t)\n\n\n(load \"./sec-2.3.4-d\")\n\n\n(define sample-tree\n    (make-code-tree\n        (make-leaf 'A 4)\n        (make-code-tree\n            (make-leaf 'B 2)\n            (make-code-tree\n                (make-leaf 'D 1)\n                (make-leaf 'C 1)))))\n\n\n(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))\n\n\nex-2.67. \u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.67)\nsample-tree\n;==> ((leaf A 4) ((leaf B 2) ((leaf D 1) (leaf C 1) (D C) 2) (B D C) 4) (A B D C) 8)\nsample-message\n;==> (0 1 1 0 0 1 0 1 0 1 1 1 0)\n(decode sample-message sample-tree)\n;==> (A D A B B C A)\n#t\n\n\nex-2.68. encode-symbol \u306e\u5b9f\u88c5\n1\u6587\u5b57\u5206\u3092\u7b26\u53f7\u5316\u3059\u308b encode-symbol \u306e\u5b9f\u88c5.\n\u7e70\u308a\u8fd4\u3057\u3066\u5e73\u6587\u5168\u4f53\u3092\u7b26\u53f7\u5316\u3059\u308b encode \u306f\u8a2d\u554f\u6587\u306b\u3066\u63d0\u793a\u3055\u308c\u3066\u3044\u308b.\n\u30ea\u30b9\u30c8\u306e\u4e2d\u306b\u6307\u5b9a\u306e\u8981\u7d20\u304c\u542b\u307e\u308c\u308b\u304b\u306e\u5224\u5b9a\u3059\u308b\u95a2\u6570\u306e\u540d\u524d\u3059\u3063\u3071\u308a\u308f\u3059\u308c\u3066\u3066\u3081\u3063\u3061\u3083\u3050\u3050\u3063\u3066\u3057\u307e\u3063\u305f\uff1d\u30ee\uff1d\uff1b\n\neq? \u3092\u4f7f\u3046\u3068\u3001memq \u3068\u3044\u3046\u4fbf\u5229\u306a\u624b\u7d9a\u304d\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n(p.155, 2.3.1 \u30af\u30a9\u30fc\u30c8\u3088\u308a)\n\n\u666e\u901a\u306b\u3057\u3070\u3089\u304f\u524d\u306b\u3064\u304f\u3063\u3066\u305f\uff1e\u30ee\uff1c\uff1b\n\u7bc0\u306f\u305d\u306e\u5de6\u53f3\u304b\u3089\u8fbf\u308c\u308b\u6587\u5b57\u306e\u4e00\u89a7\u3092\u6301\u3063\u3066\u308b\u306e\u3067\u305d\u306e\u4e2d\u306b\u542b\u307e\u308c\u308b\u304b\u3092\u307f\u3066, \u542b\u307e\u308c\u3066\u3044\u308b\u65b9\u306b\u305f\u3069\u308b\u3088\u3046\u306b.\n\u3067\u3082\u3053\u308c\u6700\u60aa\u30b1\u30fc\u30b9\u3067, \u5de6\u306e $n-1$ \u4ef6\u306b\u306a\u304b\u3063\u305f, \u5de6\u306e $n-2$ \u4ef6\u306b\u306a\u304b\u3063\u305f, \u2026\u3063\u3066\u3044\u3046\u611f\u3058\u3067 $\\Theta(n^2)$ \u306b\u306a\u3063\u3061\u3083\u3046\uff1f\uff1d\u03c9\uff1d\uff1b\n\nex-2.68. \u5b9f\u88c5\n; [ex-2.68.scm]\n;\n(define (ex-2.68)\n    (print \"sample-tree\")\n    (print \";==> \" sample-tree)\n    (print \"sample-text\")\n    (print \";==> \" sample-text)\n    (print \"(encode sample-text sample-tree)\")\n    (print \";==> \" (encode sample-text sample-tree))\n    (print \"(decode (encode sample-text sample-tree) sample-tree)\")\n    (print \";==> \" (decode (encode sample-text sample-tree) sample-tree))\n\n    (newline)\n    (print \"sample-message\")\n    (print \";==> \" sample-message)\n    (print \"(decode sample-message sample-tree)\")\n    (print \";==> \" (decode sample-message sample-tree))\n    (print \"(encode (decode sample-message sample-tree) sample-tree)\")\n    (print \";==> \" (encode (decode sample-message sample-tree) sample-tree))\n    #t)\n\n\n(load \"./ex-2.67\")\n\n\n(define sample-text '(A D A B B C A))\n\n\n(define (encode message tree)\n    (if\n        (null? message)\n        '()\n        (append\n            (encode-symbol (car message) tree)\n            (encode (cdr message) tree))))\n\n\n(define (encode-symbol char tree)\n    (define (iter current-tree)\n        (cond\n            ((leaf? current-tree)\n                '())\n            ((memq char (symbols (left-branch current-tree)))\n                (cons 0 (iter (left-branch current-tree))))\n            ((memq char (symbols (right-branch current-tree)))\n                (cons 1 (iter (right-branch current-tree))))\n            (else\n                (error \"NEVER REACH HERE\"))))\n\n    (if\n        (memq char (symbols tree))\n        (iter tree)\n        (error \"bad char:\" char \"not in tree\" tree)))\n\n\nex-2.68. \u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.68)\nsample-tree\n;==> ((leaf A 4) ((leaf B 2) ((leaf D 1) (leaf C 1) (D C) 2) (B D C) 4) (A B D C) 8)\nsample-text\n;==> (A D A B B C A)\n(encode sample-text sample-tree)\n;==> (0 1 1 0 0 1 0 1 0 1 1 1 0)\n(decode (encode sample-text sample-tree) sample-tree)\n;==> (A D A B B C A)\n\nsample-message\n;==> (0 1 1 0 0 1 0 1 0 1 1 1 0)\n(decode sample-message sample-tree)\n;==> (A D A B B C A)\n(encode (decode sample-message sample-tree) sample-tree)\n;==> (0 1 1 0 0 1 0 1 0 1 1 1 0)\n#t\n\n\nex-2.69. \u30cf\u30d5\u30de\u30f3\u6728\u306e\u751f\u6210\n\u3055\u3044\u3057\u3087\u306b\u3066\u3083\u3063\u3068\u4f5c\u3063\u3066\u307f\u305f\u3089\u305d\u3063\u3061\u306f\u8907\u96d1\u3063\u307d\u304f\u306a\u3063\u3066,\n\n\u3082\u3057\u624b\u7d9a\u304d\u306e\u8a2d\u8a08\u304c\u8907\u96d1\u306b\u306a\u3063\u305f\u3068\u3057\u305f\u3089\u3001\u307b\u307c\u78ba\u5b9f\u306b\u4f55\u304b\u3092\u9593\u9055\u3048\u3066\u3044\u308b\u3002\n(\u8a2d\u554f\u6587\u3088\u308a)\n\n\u3081\u3063\u3061\u3083\u3053\u308c\uff1d\u30ee\uff1d\uff1b\n\u3068\u3044\u3046\u308f\u3051\u3067\u305d\u3063\u3061\u306f\u305d\u3063\u3061\u3067\u66f8\u304d\u4e0a\u3052\u3066\u306f\u307f\u305f\u306e\u3067\u305d\u308c\u306f\u5f8c\u307b\u3069\u3002\n\u4f55\u3082\u8003\u3048\u305a\u306b\u5225\u306e\u65b9\u6cd5\u3067\u66f8\u3044\u3066\u307f\u305f\u3089\u306a\u308b\u307b\u3069\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3057\u305f\u3063\uff1e\u30ee\uff1c\uff1b\n\u5c0f\u3055\u3044\u65b9\u304b\u30892\u3064\u3068\u3063\u3066, \u65b0\u3057\u304f\u4f5c\u3063\u305f\u7bc0\u30923\u3064\u3081\u4ee5\u964d\u306b adjoin-set \u3067\u30bd\u30fc\u30c8\u633f\u5165\u3057\u3066, \u30bd\u30fc\u30c8\u3057\u305f\u7d50\u679c\u304b\u3089\u307e\u305f2\u3064\u3068\u3063\u3066\u2026, \u3063\u3066\u3053\u308c\u3082\u6700\u60aa\u30b1\u30fc\u30b9\u3067 $\\Theta(n^2)$ \uff1f\uff1d\u03c9\uff1d\uff1b\n\nex-2.69. \u5b9f\u88c5\n; [ex-2.69.scm]\n;\n(define (ex-2.69)\n    (print \"sample-pairs\")\n    (print \";==> \" sample-pairs)\n    (print \"(generate-huffman-tree sample-pairs)\")\n    (print \";==> \" (generate-huffman-tree sample-pairs))\n\n    (newline)\n    (let\n        (\n            (built-tree (generate-huffman-tree sample-pairs))\n        )\n        (print \"built-tree ;= (generate-huffman-tree sample-pairs)\")\n        (print \";==> \" built-tree)\n\n        (print \"sample-text\")\n        (print \";==> \" sample-text)\n        (print \"(encode sample-text built-tree)\")\n        (print \";==> \" (encode sample-text built-tree))\n        (print \"(decode (encode sample-text built-tree) built-tree)\")\n        (print \";==> \" (decode (encode sample-text built-tree) built-tree))\n    )\n\n    #t)\n\n\n(load \"./ex-2.68\")\n\n\n(define sample-pairs\n    '((A 4) (B 2) (C 1) (D 1)))\n\n\n(define (generate-huffman-tree pairs)\n    (successive-merge (make-leaf-set pairs)))\n\n\n(define (successive-merge leaves)\n    (cond\n        ; \u8981\u7d20\u6570 == 0:\n        ((null? leaves)\n            (error \"leaves must have at least one element\"))\n        ; \u8981\u7d20\u6570 == 1:\n        ((null? (cdr leaves))\n            (car leaves))\n        ; \u8981\u7d20\u6570 >= 2:\n        (else\n            (successive-merge\n                (adjoin-set\n                    (make-code-tree\n                        (car leaves)\n                        (cadr leaves))\n                    (cddr leaves))))))\n\n\nex-2.69. \u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.69)\nsample-pairs\n;==> ((A 4) (B 2) (C 1) (D 1))\n(generate-huffman-tree sample-pairs)\n;==> ((leaf A 4) ((leaf B 2) ((leaf D 1) (leaf C 1) (D C) 2) (B D C) 4) (A B D C) 8)\n\nbuilt-tree ;= (generate-huffman-tree sample-pairs)\n;==> ((leaf A 4) ((leaf B 2) ((leaf D 1) (leaf C 1) (D C) 2) (B D C) 4) (A B D C) 8)\nsample-text\n;==> (A D A B B C A)\n(encode sample-text built-tree)\n;==> (0 1 1 0 0 1 0 1 0 1 1 1 0)\n(decode (encode sample-text built-tree) built-tree)\n;==> (A D A B B C A)\n#t\n\n\nex-2.69. (b) \u30cf\u30d5\u30de\u30f3\u6728\u306e\u751f\u6210 (\u5931\u6557\u7de8)\n\u3055\u3044\u3057\u3087\u306b\u3066\u3083\u3063\u3068\u4f5c\u3063\u3066\u307f\u305f\u7248.\n\u3046\u3093. \u8907\u96d1\u306b\u306a\u3063\u3066\u308b\uff1d\u30ee\uff1d\uff1b\n\u305f\u3060\u3053\u3063\u3061\u306f\u51e6\u7406\u4e2d\u306b\u4f5c\u6210\u6e08\u307f\u90e8\u5206\u3092\u6df7\u305c\u8fbc\u3093\u3067\u306f\u306a\u3044\u306e\u3067\u30b9\u30c6\u30c3\u30d7\u6570\u7684\u306b\u306f\u6709\u5229\u306b\u306a\u308b\uff1f\n\nex-2.69. (b) \u5b9f\u88c5\n; [ex-2.69.scm]\n;\n(define (ex-2.69)\n    (print \"sample-pairs\")\n    (print \";==> \" sample-pairs)\n    (print \"(generate-huffman-tree sample-pairs)\")\n    (print \";==> \" (generate-huffman-tree sample-pairs))\n\n    (newline)\n    (let\n        (\n            (built-tree (generate-huffman-tree sample-pairs))\n        )\n        (print \"built-tree ;= (generate-huffman-tree sample-pairs)\")\n        (print \";==> \" built-tree)\n\n        (print \"sample-text\")\n        (print \";==> \" sample-text)\n        (print \"(encode sample-text built-tree)\")\n        (print \";==> \" (encode sample-text built-tree))\n        (print \"(decode (encode sample-text built-tree) built-tree)\")\n        (print \";==> \" (decode (encode sample-text built-tree) built-tree))\n    )\n\n    #t)\n\n\n(load \"./ex-2.68\")\n\n\n(define sample-pairs\n    '((A 4) (B 2) (C 1) (D 1)))\n\n\n(define (generate-huffman-tree pairs)\n    (successive-merge (make-leaf-set pairs)))\n\n(define (successive-merge leaves)\n    (define (iter last-node rest-leaves)\n        (if\n            (null? rest-leaves)\n            last-node\n            (let\n                (\n                    (next (take-next (weight last-node) rest-leaves))\n                )\n                (let\n                    (\n                        (next-node (car next))\n                        (new-rest  (cdr next))\n                    )\n                    (iter (make-code-tree last-node next-node) new-rest)))))\n\n    (define (take-next last-weight leaves)\n        (define (take-next-iter last-node leaves)\n            (cond\n                ((null? leaves)\n                    (cons last-node '()))\n                ((> (+ (weight last-node) (weight (car leaves))) last-weight)\n                    (cons last-node leaves))\n                (else\n                    (take-next-iter\n                        (make-code-tree\n                            last-node\n                            (car leaves))\n                        (cdr leaves)))))\n\n        (take-next-iter (car leaves) (cdr leaves)))\n\n    (if\n        (pair? leaves)\n        (iter (car leaves) (cdr leaves))\n        (error \"leaves must have at least one element\")))\n\n\nex-2.69. (b) \u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.69)\nsample-pairs\n;==> ((A 4) (B 2) (C 1) (D 1))\n(generate-huffman-tree sample-pairs)\n;==> ((((leaf D 1) (leaf C 1) (D C) 2) (leaf B 2) (D C B) 4) (leaf A 4) (D C B A) 8)\n\nbuilt-tree ;= (generate-huffman-tree sample-pairs)\n;==> ((((leaf D 1) (leaf C 1) (D C) 2) (leaf B 2) (D C B) 4) (leaf A 4) (D C B A) 8)\nsample-text\n;==> (A D A B B C A)\n(encode sample-text built-tree)\n;==> (1 0 0 0 1 0 1 0 1 0 0 1 1)\n(decode (encode sample-text built-tree) built-tree)\n;==> (A D A B B C A)\n#t\n\n[\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #30 (2.3.4)](https://ladiespp.connpass.com/event/49695/)\n\n\u7df4\u7fd2\u554f\u984c 2.67 - 2.69\n\n\n## 2.3.4. \u4f8b: \u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u5316\u6728\n\n\u307e\u305a\u306f\u666e\u901a\u306b\u30cf\u30d5\u30de\u30f3\u7b26\u53f7.\n\u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u306f\u4e8c\u5206\u6728\u3067\u8868\u73fe\u3067\u304d\u3066\u305d\u308c\u304c\u30cf\u30d5\u30de\u30f3\u7b26\u53f7\u5316\u6728\u306e\u6a21\u69d8.\n\n\n## 2.3.4 (a) \u30cf\u30d5\u30de\u30f3\u6728\u306e\u751f\u6210\n\n\u983b\u5ea6\u306e\u5c11\u306a\u3044\u30ce\u30fc\u30c92\u3064\u3092\u63a5\u5408\u3057\u3066\u65b0\u3057\u3044\u30ce\u30fc\u30c9\u306b\u3059\u308b\u306e\u3092\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067, \u983b\u5ea6\u304c\u5c11\u306a\u3044\u307b\u3069\u9577\u3044\u679d\u306e\u5148\u3063\u307d\u306b\u306a\u308b.\n\u3064\u307e\u308a\u305d\u306e\u6587\u5b57\u3092\u8868\u73fe\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u30d3\u30c3\u30c8\u5217\u304c\u9577\u304f\u306a\u308b.\n\n\n## 2.3.4 (b) \u30cf\u30d5\u30de\u30f3\u6728\u306e\u8868\u73fe\n\n\u8449\u3068\u7bc0\u306b\u5bfe\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30bb\u30ec\u30af\u30bf.\n\n`symbols` \u3068 `weight`, tree \u306e\u5834\u5408\u3082 `symbols-tree` \u3068 `weight-tree` \u3064\u304f\u3063\u3066, \u305d\u308c\u3092\u4f7f\u3063\u3066\n\n```scm\n(define (symbols object)\n\t(if\n\t\t(leaf? object)\n\t\t(symbol-leaf object)\n\t\t(symbols-tree object)))\n```\n\n\u3068\u304b\u306e\u307b\u3046\u304c\u3059\u3063\u304d\u308a\u306a\u304d\u304c\u307b\u3093\u306e\u308a.\n\u4e00\u7dd2\u306b\u306a\u3063\u3066\u308b\u3068 `caddr` \u306e\u6570\u304c\u57cb\u3082\u308c\u3066\u3082\u306b\u3085\u3093\uff1d\u03c9\uff1d\uff1b\n\n### 2.3.4 (b) \u5b9f\u88c5\n\n```scm\n; [sec-2.3.4-b.scm]\n;\n(define (sec-2.3.4-b)\n\t(print \"leaf = (make-leaf 'A 8)\")\n\t(let\n\t\t(\n\t\t\t(leaf (make-leaf 'A 8))\n\t\t)\n\t\t(print \";==> \" leaf)\n\t\t(print \"(leaf? leaf)\")\n\t\t(print \";==> \"(leaf? leaf))\n\t\t(print \"(symbol-leaf leaf)\")\n\t\t(print \";==> \" (symbol-leaf leaf))\n\t\t(print \"(weight-leaf leaf)\")\n\t\t(print \";==> \" (weight-leaf leaf))\n\t)\n\n\t(newline)\n\t(print \"(make-code-tree (make-leaf 'B 8) (make-leaf 'C 1))\")\n\t(let\n\t\t(\n\t\t\t(tree (make-code-tree (make-leaf 'B 8) (make-leaf 'C 1)))\n\t\t)\n\t\t(print \";==> \" tree)\n\t\t(print \"(leaf? tree)\")\n\t\t(print \";==> \" (leaf? tree))\n\t\t(print \"(left-branch tree)\")\n\t\t(print \";==> \" (left-branch tree))\n\t\t(print \"(right-branch tree)\")\n\t\t(print \";==> \" (right-branch tree))\n\t\t(print \"(symbols tree)\")\n\t\t(print \";==> \" (symbols tree))\n\t\t(print \"(weight tree)\")\n\t\t(print \";==> \" (weight tree))\n\t)\n\t#t)\n\n\n(define (make-leaf symbol weight)\n\t(list 'leaf symbol weight))\n\n(define (leaf? object)\n\t(eq? (car object) 'leaf))\n\n(define (symbol-leaf x) (cadr  x))\n(define (weight-leaf x) (caddr x))\n\n\n(define (make-code-tree left right)\n\t(list\n\t\tleft\n\t\tright\n\t\t(append (symbols left) (symbols right))\n\t\t(+ (weight left) (weight right))))\n\n(define (left-branch  tree) (car  tree))\n(define (right-branch tree) (cadr tree))\n\n(define (symbols tree)\n\t(if\n\t\t(leaf? tree)\n\t\t(list (symbol-leaf tree))\n\t\t(caddr tree)))\n\n(define (weight tree)\n\t(if\n\t\t(leaf? tree)\n\t\t(weight-leaf tree)\n\t\t(cadddr tree)))\n```\n\n### 2.3.4 (b) \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (sec-2.3.4-b)\nleaf = (make-leaf 'A 8)\n;==> (leaf A 8)\n(leaf? leaf)\n;==> #t\n(symbol-leaf leaf)\n;==> A\n(weight-leaf leaf)\n;==> 8\n\n(make-code-tree (make-leaf 'B 8) (make-leaf 'C 1))\n;==> ((leaf B 8) (leaf C 1) (B C) 9)\n(leaf? tree)\n;==> #f\n(left-branch tree)\n;==> (leaf B 8)\n(right-branch tree)\n;==> (leaf C 1)\n(symbols tree)\n;==> (B C)\n(weight tree)\n;==> 9\n#t\n```\n\n\n## 2.3.4 (c) \u5fa9\u53f7\u5316\u624b\u7d9a\u304d\n\n`(print \"TEST\" 1)` \u306f `TEST1` \u306b\u306a\u308b\u306e\u306b `(error \"TEST\" 1)` \u306f `TEST 1` \u306b\u306a\u308b\u306e\u306d\u5fae\u5999\u306a\u9055\u3044\uff1d\u30ee\uff1d\uff1b\n\n\u679d\u9078\u3076 `bit` \u3067 0/1 \u4ee5\u5916\u306f\u30a8\u30e9\u30fc\u3063\u3066\u3057\u3066\u308b\u3051\u308c\u3069, \u5165\u529b\u306e `bits` \u304c\u4e2d\u9014\u534a\u7aef\u3067\u9014\u5207\u308c\u3066\u308b\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3067\u306a\u3044\u306e\u306d\u2026\n\u3068\u306f\u3044\u3063\u3066\u3082\u30a8\u30e9\u30fc\u306b\u3059\u308b\u306b\u306f `(tree-eq? current-branch tree)` \u304c\u771f\u3063\u3066\u3059\u308b\u304b, \u4eca\u3061\u3087\u3046\u3069\u533a\u5207\u308a\u306e\u3044\u3044\u3068\u3053\u308d\u304b\u306e\u5224\u5b9a\u7528\u306b\u5f15\u6570\u3092\u8ffd\u52a0\u3059\u308b\u304b\u304c\u5fc5\u8981\u307d\u305d\u3046.\n\u3068\u3044\u3046\u308f\u3051\u3067\u5224\u5b9a\u306e\u624b\u8efd\u306a\u5f8c\u8005\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3063\u30fb\u03c9\u30fb*\n\n### 2.3.4 (c) \u5b9f\u88c5\n\n```scm\n; [sec-2.3.4-c.scm]\n;\n(define (sec-2.3.4-c)\n\t(let\n\t\t(\n\t\t\t(tree (make-code-tree (make-leaf 'A 8) (make-code-tree (make-leaf 'B 3) (make-leaf 'C 1))))\n\t\t)\n\t\t(print \"tree = \" tree)\n\t\t(print \"(decode (list 0) tree)\")\n\t\t(print \";==> \" (decode (list 0) tree))\n\t\t(print \"(decode (list 1 0) tree)\")\n\t\t(print \";==> \" (decode (list 1 0) tree))\n\t\t(print \"(decode (list 0 1 0 1 1 0) tree)\")\n\t\t(print \";==> \" (decode (list 0 1 0 1 1 0) tree))\n\t\t(print \"(decode (list 1) tree) ; raise error\")\n\t\t(print \";==> \" (decode (list 1) tree))\n\t)\n\t#t)\n\n\n(load \"./sec-2.3.4-b\")\n\n\n(define (decode bits tree)\n\t(define (decode-1 bits current-branch completed)\n\t\t(if\n\t\t\t(null? bits)\n\t\t\t(if\n\t\t\t\tcompleted\n\t\t\t\t'()\n\t\t\t\t(error \"unexpected end of bits\"))\n\t\t\t(let\n\t\t\t\t(\n\t\t\t\t\t(next-branch (choose-branch (car bits) current-branch))\n\t\t\t\t)\n\t\t\t\t(if\n\t\t\t\t\t(leaf? next-branch)\n\t\t\t\t\t(cons\n\t\t\t\t\t\t(symbol-leaf next-branch)\n\t\t\t\t\t\t(decode-1 (cdr bits) tree #t))\n\t\t\t\t\t(decode-1 (cdr bits) next-branch #f)))))\n\n\t(decode-1 bits tree #t))\n\n\n(define (choose-branch bit branch)\n\t(cond\n\t\t((= bit 0) (left-branch branch))\n\t\t((= bit 1) (right-branch branch))\n\t\t(else (error \"bad bit: CHOOSE-BRANCH\" bit))))\n```\n\n### 2.3.4 (c) \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (sec-2.3.4-c)\ntree = ((leaf A 8) ((leaf B 3) (leaf C 1) (B C) 4) (A B C) 12)\n(decode (list 0) tree)\n;==> (A)\n(decode (list 1 0) tree)\n;==> (B)\n(decode (list 0 1 0 1 1 0) tree)\n;==> (A B C A)\n(decode (list 1) tree) ; raise error\n*** ERROR: unexpected end of bits\n```\n\n## 2.3.4 (d) \u91cd\u307f\u4ed8\u304d\u8981\u7d20\u306e\u96c6\u5408\n\n\u5c0f\u3055\u3044\u65b9\u304b\u3089\u8449\u3092\u9078\u3073\u3068\u308b\u305f\u3081\u306b\u9806\u5e8f\u4ed8\u304d\u30ea\u30b9\u30c8\u3068\u3057\u3066\u306e `adjoin-set` \u3092 `leaf` \u306b\u5bfe\u3057\u3066\u518d\u5ea6\u5b9f\u88c5\u3059\u308b.\n\n### 2.3.4 (d) \u5b9f\u88c5\n\n```scm\n; [sec-2.3.4-d.scm]\n;\n(define (sec-2.3.4-d)\n\t(print \"(make-leaf-set '((A 4) (B 2) (C 1) (D 1)))\")\n\t(print \";==> \" (make-leaf-set '((A 4) (B 2) (C 1) (D 1))))\n\t#t)\n\n\n(load \"./sec-2.3.4-c\")\n\n\n(define (adjoin-set x set)\n\t(cond\n\t\t; \u521d\u56de\u53ca\u3073\u4e00\u756a\u8efd\u3044\u5834\u5408.\n\t\t((null? set) (list x))\n\t\t; \u9014\u4e2d\u306b\u633f\u5165.\n\t\t((< (weight x) (weight (car set))) (cons x set))\n\t\t; \u6b21\u3092\u63a2\u7d22.\n\t\t(else\n\t\t\t(cons\n\t\t\t\t(car set)\n\t\t\t\t(adjoin-set x (cdr set))))))\n\n\n(define (make-leaf-set pairs)\n\t(if\n\t\t(null? pairs)\n\t\t'()\n\t\t(let\n\t\t\t(\n\t\t\t\t(pair (car pairs))\n\t\t\t)\n\t\t\t(adjoin-set\n\t\t\t\t(make-leaf\n\t\t\t\t\t(car  pair)   ; symbol.\n\t\t\t\t\t(cadr pair))  ; frequency.\n\t\t\t\t(make-leaf-set (cdr pairs))))))\n```\n\n### 2.3.4 (d) \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (sec-2.3.4-d)\n(make-leaf-set '((A 4) (B 2) (C 1) (D 1)))\n;==> ((leaf D 1) (leaf C 1) (leaf B 2) (leaf A 4))\n#t\n```\n\n\n## ex-2.67. \u63d0\u793a\u3055\u308c\u305f\u6728\u3068\u30e1\u30c3\u30bb\u30fc\u30b8\u306e decode \n\n\u305d\u306e\u307e\u3093\u307e\u30fb\u03c9\u30fb*\n\n### ex-2.67. \u5b9f\u88c5\n\n```scm\n; [ex-2.67.scm]\n;\n(define (ex-2.67)\n\t(print \"sample-tree\")\n\t(print \";==> \" sample-tree)\n\t(print \"sample-message\")\n\t(print \";==> \" sample-message)\n\t(print \"(decode sample-message sample-tree)\")\n\t(print \";==> \" (decode sample-message sample-tree))\n\t#t)\n\n\n(load \"./sec-2.3.4-d\")\n\n\n(define sample-tree\n\t(make-code-tree\n\t\t(make-leaf 'A 4)\n\t\t(make-code-tree\n\t\t\t(make-leaf 'B 2)\n\t\t\t(make-code-tree\n\t\t\t\t(make-leaf 'D 1)\n\t\t\t\t(make-leaf 'C 1)))))\n\n\n(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))\n```\n\n### ex-2.67. \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.67)\nsample-tree\n;==> ((leaf A 4) ((leaf B 2) ((leaf D 1) (leaf C 1) (D C) 2) (B D C) 4) (A B D C) 8)\nsample-message\n;==> (0 1 1 0 0 1 0 1 0 1 1 1 0)\n(decode sample-message sample-tree)\n;==> (A D A B B C A)\n#t\n```\n\n\n## ex-2.68. encode-symbol \u306e\u5b9f\u88c5\n\n1\u6587\u5b57\u5206\u3092\u7b26\u53f7\u5316\u3059\u308b `encode-symbol` \u306e\u5b9f\u88c5.\n\u7e70\u308a\u8fd4\u3057\u3066\u5e73\u6587\u5168\u4f53\u3092\u7b26\u53f7\u5316\u3059\u308b `encode` \u306f\u8a2d\u554f\u6587\u306b\u3066\u63d0\u793a\u3055\u308c\u3066\u3044\u308b.\n\n\u30ea\u30b9\u30c8\u306e\u4e2d\u306b\u6307\u5b9a\u306e\u8981\u7d20\u304c\u542b\u307e\u308c\u308b\u304b\u306e\u5224\u5b9a\u3059\u308b\u95a2\u6570\u306e\u540d\u524d\u3059\u3063\u3071\u308a\u308f\u3059\u308c\u3066\u3066\u3081\u3063\u3061\u3083\u3050\u3050\u3063\u3066\u3057\u307e\u3063\u305f\uff1d\u30ee\uff1d\uff1b\n\n> eq? \u3092\u4f7f\u3046\u3068\u3001memq \u3068\u3044\u3046\u4fbf\u5229\u306a\u624b\u7d9a\u304d\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n> (p.155, 2.3.1 \u30af\u30a9\u30fc\u30c8\u3088\u308a)\n\n\u666e\u901a\u306b\u3057\u3070\u3089\u304f\u524d\u306b\u3064\u304f\u3063\u3066\u305f\uff1e\u30ee\uff1c\uff1b\n\n\u7bc0\u306f\u305d\u306e\u5de6\u53f3\u304b\u3089\u8fbf\u308c\u308b\u6587\u5b57\u306e\u4e00\u89a7\u3092\u6301\u3063\u3066\u308b\u306e\u3067\u305d\u306e\u4e2d\u306b\u542b\u307e\u308c\u308b\u304b\u3092\u307f\u3066, \u542b\u307e\u308c\u3066\u3044\u308b\u65b9\u306b\u305f\u3069\u308b\u3088\u3046\u306b.\n\u3067\u3082\u3053\u308c\u6700\u60aa\u30b1\u30fc\u30b9\u3067, \u5de6\u306e $n-1$ \u4ef6\u306b\u306a\u304b\u3063\u305f, \u5de6\u306e $n-2$ \u4ef6\u306b\u306a\u304b\u3063\u305f, \u2026\u3063\u3066\u3044\u3046\u611f\u3058\u3067 $\\Theta(n^2)$ \u306b\u306a\u3063\u3061\u3083\u3046\uff1f\uff1d\u03c9\uff1d\uff1b\n\n### ex-2.68. \u5b9f\u88c5\n\n```scm\n; [ex-2.68.scm]\n;\n(define (ex-2.68)\n\t(print \"sample-tree\")\n\t(print \";==> \" sample-tree)\n\t(print \"sample-text\")\n\t(print \";==> \" sample-text)\n\t(print \"(encode sample-text sample-tree)\")\n\t(print \";==> \" (encode sample-text sample-tree))\n\t(print \"(decode (encode sample-text sample-tree) sample-tree)\")\n\t(print \";==> \" (decode (encode sample-text sample-tree) sample-tree))\n\n\t(newline)\n\t(print \"sample-message\")\n\t(print \";==> \" sample-message)\n\t(print \"(decode sample-message sample-tree)\")\n\t(print \";==> \" (decode sample-message sample-tree))\n\t(print \"(encode (decode sample-message sample-tree) sample-tree)\")\n\t(print \";==> \" (encode (decode sample-message sample-tree) sample-tree))\n\t#t)\n\n\n(load \"./ex-2.67\")\n\n\n(define sample-text '(A D A B B C A))\n\n\n(define (encode message tree)\n\t(if\n\t\t(null? message)\n\t\t'()\n\t\t(append\n\t\t\t(encode-symbol (car message) tree)\n\t\t\t(encode (cdr message) tree))))\n\n\n(define (encode-symbol char tree)\n\t(define (iter current-tree)\n\t\t(cond\n\t\t\t((leaf? current-tree)\n\t\t\t\t'())\n\t\t\t((memq char (symbols (left-branch current-tree)))\n\t\t\t\t(cons 0 (iter (left-branch current-tree))))\n\t\t\t((memq char (symbols (right-branch current-tree)))\n\t\t\t\t(cons 1 (iter (right-branch current-tree))))\n\t\t\t(else\n\t\t\t\t(error \"NEVER REACH HERE\"))))\n\n\t(if\n\t\t(memq char (symbols tree))\n\t\t(iter tree)\n\t\t(error \"bad char:\" char \"not in tree\" tree)))\n```\n\n### ex-2.68. \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.68)\nsample-tree\n;==> ((leaf A 4) ((leaf B 2) ((leaf D 1) (leaf C 1) (D C) 2) (B D C) 4) (A B D C) 8)\nsample-text\n;==> (A D A B B C A)\n(encode sample-text sample-tree)\n;==> (0 1 1 0 0 1 0 1 0 1 1 1 0)\n(decode (encode sample-text sample-tree) sample-tree)\n;==> (A D A B B C A)\n\nsample-message\n;==> (0 1 1 0 0 1 0 1 0 1 1 1 0)\n(decode sample-message sample-tree)\n;==> (A D A B B C A)\n(encode (decode sample-message sample-tree) sample-tree)\n;==> (0 1 1 0 0 1 0 1 0 1 1 1 0)\n#t\n```\n\n\n## ex-2.69. \u30cf\u30d5\u30de\u30f3\u6728\u306e\u751f\u6210\n\n\u3055\u3044\u3057\u3087\u306b\u3066\u3083\u3063\u3068\u4f5c\u3063\u3066\u307f\u305f\u3089\u305d\u3063\u3061\u306f\u8907\u96d1\u3063\u307d\u304f\u306a\u3063\u3066,\n\n> \u3082\u3057\u624b\u7d9a\u304d\u306e\u8a2d\u8a08\u304c\u8907\u96d1\u306b\u306a\u3063\u305f\u3068\u3057\u305f\u3089\u3001\u307b\u307c\u78ba\u5b9f\u306b\u4f55\u304b\u3092\u9593\u9055\u3048\u3066\u3044\u308b\u3002\n> (\u8a2d\u554f\u6587\u3088\u308a)\n\n\u3081\u3063\u3061\u3083\u3053\u308c\uff1d\u30ee\uff1d\uff1b\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u305d\u3063\u3061\u306f\u305d\u3063\u3061\u3067\u66f8\u304d\u4e0a\u3052\u3066\u306f\u307f\u305f\u306e\u3067\u305d\u308c\u306f\u5f8c\u307b\u3069\u3002\n\n\u4f55\u3082\u8003\u3048\u305a\u306b\u5225\u306e\u65b9\u6cd5\u3067\u66f8\u3044\u3066\u307f\u305f\u3089\u306a\u308b\u307b\u3069\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3057\u305f\u3063\uff1e\u30ee\uff1c\uff1b\n\n\u5c0f\u3055\u3044\u65b9\u304b\u30892\u3064\u3068\u3063\u3066, \u65b0\u3057\u304f\u4f5c\u3063\u305f\u7bc0\u30923\u3064\u3081\u4ee5\u964d\u306b `adjoin-set` \u3067\u30bd\u30fc\u30c8\u633f\u5165\u3057\u3066, \u30bd\u30fc\u30c8\u3057\u305f\u7d50\u679c\u304b\u3089\u307e\u305f2\u3064\u3068\u3063\u3066\u2026, \u3063\u3066\u3053\u308c\u3082\u6700\u60aa\u30b1\u30fc\u30b9\u3067 $\\Theta(n^2)$ \uff1f\uff1d\u03c9\uff1d\uff1b\n\n### ex-2.69. \u5b9f\u88c5\n\n```scm\n; [ex-2.69.scm]\n;\n(define (ex-2.69)\n\t(print \"sample-pairs\")\n\t(print \";==> \" sample-pairs)\n\t(print \"(generate-huffman-tree sample-pairs)\")\n\t(print \";==> \" (generate-huffman-tree sample-pairs))\n\n\t(newline)\n\t(let\n\t\t(\n\t\t\t(built-tree (generate-huffman-tree sample-pairs))\n\t\t)\n\t\t(print \"built-tree ;= (generate-huffman-tree sample-pairs)\")\n\t\t(print \";==> \" built-tree)\n\n\t\t(print \"sample-text\")\n\t\t(print \";==> \" sample-text)\n\t\t(print \"(encode sample-text built-tree)\")\n\t\t(print \";==> \" (encode sample-text built-tree))\n\t\t(print \"(decode (encode sample-text built-tree) built-tree)\")\n\t\t(print \";==> \" (decode (encode sample-text built-tree) built-tree))\n\t)\n\n\t#t)\n\n\n(load \"./ex-2.68\")\n\n\n(define sample-pairs\n\t'((A 4) (B 2) (C 1) (D 1)))\n\n\n(define (generate-huffman-tree pairs)\n\t(successive-merge (make-leaf-set pairs)))\n\n\n(define (successive-merge leaves)\n\t(cond\n\t\t; \u8981\u7d20\u6570 == 0:\n\t\t((null? leaves)\n\t\t\t(error \"leaves must have at least one element\"))\n\t\t; \u8981\u7d20\u6570 == 1:\n\t\t((null? (cdr leaves))\n\t\t\t(car leaves))\n\t\t; \u8981\u7d20\u6570 >= 2:\n\t\t(else\n\t\t\t(successive-merge\n\t\t\t\t(adjoin-set\n\t\t\t\t\t(make-code-tree\n\t\t\t\t\t\t(car leaves)\n\t\t\t\t\t\t(cadr leaves))\n\t\t\t\t\t(cddr leaves))))))\n```\n\n### ex-2.69. \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.69)\nsample-pairs\n;==> ((A 4) (B 2) (C 1) (D 1))\n(generate-huffman-tree sample-pairs)\n;==> ((leaf A 4) ((leaf B 2) ((leaf D 1) (leaf C 1) (D C) 2) (B D C) 4) (A B D C) 8)\n\nbuilt-tree ;= (generate-huffman-tree sample-pairs)\n;==> ((leaf A 4) ((leaf B 2) ((leaf D 1) (leaf C 1) (D C) 2) (B D C) 4) (A B D C) 8)\nsample-text\n;==> (A D A B B C A)\n(encode sample-text built-tree)\n;==> (0 1 1 0 0 1 0 1 0 1 1 1 0)\n(decode (encode sample-text built-tree) built-tree)\n;==> (A D A B B C A)\n#t\n```\n\n## ex-2.69. (b) \u30cf\u30d5\u30de\u30f3\u6728\u306e\u751f\u6210 (\u5931\u6557\u7de8)\n\n\u3055\u3044\u3057\u3087\u306b\u3066\u3083\u3063\u3068\u4f5c\u3063\u3066\u307f\u305f\u7248.\n\u3046\u3093. \u8907\u96d1\u306b\u306a\u3063\u3066\u308b\uff1d\u30ee\uff1d\uff1b\n\n\u305f\u3060\u3053\u3063\u3061\u306f\u51e6\u7406\u4e2d\u306b\u4f5c\u6210\u6e08\u307f\u90e8\u5206\u3092\u6df7\u305c\u8fbc\u3093\u3067\u306f\u306a\u3044\u306e\u3067\u30b9\u30c6\u30c3\u30d7\u6570\u7684\u306b\u306f\u6709\u5229\u306b\u306a\u308b\uff1f\n\n### ex-2.69. (b) \u5b9f\u88c5\n\n```scm\n; [ex-2.69.scm]\n;\n(define (ex-2.69)\n\t(print \"sample-pairs\")\n\t(print \";==> \" sample-pairs)\n\t(print \"(generate-huffman-tree sample-pairs)\")\n\t(print \";==> \" (generate-huffman-tree sample-pairs))\n\n\t(newline)\n\t(let\n\t\t(\n\t\t\t(built-tree (generate-huffman-tree sample-pairs))\n\t\t)\n\t\t(print \"built-tree ;= (generate-huffman-tree sample-pairs)\")\n\t\t(print \";==> \" built-tree)\n\n\t\t(print \"sample-text\")\n\t\t(print \";==> \" sample-text)\n\t\t(print \"(encode sample-text built-tree)\")\n\t\t(print \";==> \" (encode sample-text built-tree))\n\t\t(print \"(decode (encode sample-text built-tree) built-tree)\")\n\t\t(print \";==> \" (decode (encode sample-text built-tree) built-tree))\n\t)\n\n\t#t)\n\n\n(load \"./ex-2.68\")\n\n\n(define sample-pairs\n\t'((A 4) (B 2) (C 1) (D 1)))\n\n\n(define (generate-huffman-tree pairs)\n\t(successive-merge (make-leaf-set pairs)))\n\n(define (successive-merge leaves)\n\t(define (iter last-node rest-leaves)\n\t\t(if\n\t\t\t(null? rest-leaves)\n\t\t\tlast-node\n\t\t\t(let\n\t\t\t\t(\n\t\t\t\t\t(next (take-next (weight last-node) rest-leaves))\n\t\t\t\t)\n\t\t\t\t(let\n\t\t\t\t\t(\n\t\t\t\t\t\t(next-node (car next))\n\t\t\t\t\t\t(new-rest  (cdr next))\n\t\t\t\t\t)\n\t\t\t\t\t(iter (make-code-tree last-node next-node) new-rest)))))\n\n\t(define (take-next last-weight leaves)\n\t\t(define (take-next-iter last-node leaves)\n\t\t\t(cond\n\t\t\t\t((null? leaves)\n\t\t\t\t\t(cons last-node '()))\n\t\t\t\t((> (+ (weight last-node) (weight (car leaves))) last-weight)\n\t\t\t\t\t(cons last-node leaves))\n\t\t\t\t(else\n\t\t\t\t\t(take-next-iter\n\t\t\t\t\t\t(make-code-tree\n\t\t\t\t\t\t\tlast-node\n\t\t\t\t\t\t\t(car leaves))\n\t\t\t\t\t\t(cdr leaves)))))\n\n\t\t(take-next-iter (car leaves) (cdr leaves)))\n\n\t(if\n\t\t(pair? leaves)\n\t\t(iter (car leaves) (cdr leaves))\n\t\t(error \"leaves must have at least one element\")))\n```\n\n### ex-2.69. (b) \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.69)\nsample-pairs\n;==> ((A 4) (B 2) (C 1) (D 1))\n(generate-huffman-tree sample-pairs)\n;==> ((((leaf D 1) (leaf C 1) (D C) 2) (leaf B 2) (D C B) 4) (leaf A 4) (D C B A) 8)\n\nbuilt-tree ;= (generate-huffman-tree sample-pairs)\n;==> ((((leaf D 1) (leaf C 1) (D C) 2) (leaf B 2) (D C B) 4) (leaf A 4) (D C B A) 8)\nsample-text\n;==> (A D A B B C A)\n(encode sample-text built-tree)\n;==> (1 0 0 0 1 0 1 0 1 0 0 1 1)\n(decode (encode sample-text built-tree) built-tree)\n;==> (A D A B B C A)\n#t\n```\n", "tags": ["SICP"]}