{"tags": ["Fortran2008", "JSON"], "context": " More than 1 year has passed since last update.Fortran \u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u66f8\u304f\u3068\u304d\u306b\u3044\u3064\u3082\u60a9\u3080\u306e\u306f\u30c7\u30fc\u30bf\u306e\u5165\u529b\u3092\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3053\u3068\u3002\u914d\u5217\u306e\u8981\u7d20\u6570\u306f\u53ef\u5909\u306b\u3057\u3066\u304a\u304d\u305f\u3044\u3057\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5897\u6e1b\u306b\u67d4\u8edf\u306b\u5bfe\u5fdc\u3057\u305f\u3044\u3001\u3067\u304d\u308c\u3070\u30bf\u30b0\u4ed8\u3051\u3057\u305f\u30c7\u30fc\u30bf\u3092\u9806\u5e8f\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3067\u8aad\u307f\u305f\u3044\u3002\n\u3068\u306a\u308b\u3068\u3001\u81ea\u524d\u306e\u30d1\u30fc\u30b5\u3092 Fortran \u3067\u9811\u5f35\u3063\u3066\u66f8\u304f\u304b\u3001\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u7528\u610f\u3059\u308b\u304b\u3001C \u3068\u30ea\u30f3\u30af\u3059\u308b\u304b\u2026\n\u305d\u3093\u306a\u3068\u304d Fortran \u3067 JSON \u3092\u53d6\u308a\u6271\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\u305f\u3060\u3057 Fortran 2008 \u4ee5\u4e0a\u9650\u5b9a\u3002\u4eca\u3084 GCC \u3067\u3082 4.9 \u306a\u3089 Fortran 2008 \u306b\u5bfe\u5fdc (\u3059\u3079\u3066\u3068\u306f\u8a00\u3063\u3066\u306a\u3044) \u3057\u3066\u308b\u306e\u3067\u554f\u984c\u306a\u3044\u3088\u306d?\n\u3067\u3001Fortran \u3067 JSON \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u6271\u3046 Cool \u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3053\u308c\u3002\u305d\u306e\u540d\u3082 json-fortran\u3002\u76f4\u7403\u3060\u306a\u3002\nhttps://github.com/jacobwilliams/json-fortran\n\u4f7f\u3044\u65b9\u306f\u4e0a\u8a18\u306e\u30ea\u30f3\u30af\u306b src/json_module.f90 \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u306e\u3067\u30ea\u30f3\u30af\u3059\u308b\u3002\u3053\u308c\u3060\u3051\u3002\u4ed8\u5c5e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f CMake \u3092\u4f7f\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u306e\u624b\u9806\u304c\u66f8\u3044\u3066\u3042\u308b\u3051\u308c\u3069\u3001\u5225\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3057\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u3002\n\u4f7f\u7528\u4f8b\u306f\u3054\u89a7\u306e\u3068\u304a\u308a\u3002\n\nsample.f90\nprogram main\n\n  use, intrinsic :: iso_fortran_env, wp => real64\n  use json_module\n  implicit none\n\n  character(len=256) :: prog, file\n\n  type(json_file) :: json\n  character(len=:), allocatable :: error_msg\n  logical :: status_ok, found\n  integer :: scalar_int\n  real(wp), allocatable :: array_real(:)\n\n  if (command_argument_count() /= 1) then\n     call get_command(prog)\n     write(error_unit, '(\"usage: \",a, \" file\")') trim(prog)\n     call exit(64)              ! EX_USAGE\n  end if\n  call get_command_argument(1, file)\n\n  call json_initialize()        ! json_module \u306e\u521d\u671f\u5316\n  call json%load_file(file)     ! JSON \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n  if (json_failed()) then\n     call json_check_for_errors(status_ok, error_msg)\n     write(error_unit, '(a)') error_msg\n     call exit(65)              ! EX_DATAERR\n  end if\n\n  ! JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u3080\n  call json%get('sample.data(2).int_value', scalar_int, found)\n  call json%get('sample.array_of_real', array_real, found)\n\n  call json%destroy()           ! clean up\n\n  write(output_unit, '(\"sample.data(2).int_value = \",g0)') scalar_int\n  write(output_unit, '(\"sample.array_of_real = \",/,*(4(f10.3),/))') array_real(:)\n\n  call exit(0)                  ! EX_OK\n\nend program main\n\n\n\ndata.json\n{\n    \"sample\": {\n        \"data\": [\n            { \"ID\": \"1\" },\n            {\n                \"ID\": \"2\",\n                \"int_value\": 5\n            },\n            { \"ID\": \"3\" }\n        ],\n        \"array_of_real\": [\n            0.16,  80.05,  49.58,  77.29,  25.34,  15.28,\n            77.23,  64.69,  87.58,  26.94, 53.08,  0.8\n        ]\n    }\n}\n\n\n\n\u5b9f\u884c\u4f8b\nF:\\> gfortran -o sample json_module.f90 sample.f90\nF:\\> sample.exe data.json\nsample.data(2).int_value = 5\nsample.array_of_real =\n     0.160    80.050    49.580    77.290\n    25.340    15.280    77.230    64.690\n    87.580    26.940    53.080     0.800\n\nF:\\>\n\n\n\u7c21\u5358\u3060\u306d\u3002\u3082\u3061\u308d\u3093 JSON \u5f62\u5f0f\u3067\u51fa\u529b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3068\u3069\u3046\u306a\u308b\u306e\u3060\u308d\u3046\u3068\u304b\u4e0d\u5b89\u8981\u7d20\u304c\u306a\u3044\u308f\u3051\u3067\u3082\u306a\u3044\u3051\u308c\u3069\u3001Fortran \u306e\u5f31\u70b9\u3092\u30d5\u30a9\u30ed\u30fc\u3067\u304d\u308b\u975e\u5e38\u306b\u4fbf\u5229\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306a\u3093\u3067\u306f\u306a\u3044\u304b\u306a\u3002\nFortran \u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u66f8\u304f\u3068\u304d\u306b\u3044\u3064\u3082\u60a9\u3080\u306e\u306f\u30c7\u30fc\u30bf\u306e\u5165\u529b\u3092\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3053\u3068\u3002\u914d\u5217\u306e\u8981\u7d20\u6570\u306f\u53ef\u5909\u306b\u3057\u3066\u304a\u304d\u305f\u3044\u3057\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5897\u6e1b\u306b\u67d4\u8edf\u306b\u5bfe\u5fdc\u3057\u305f\u3044\u3001\u3067\u304d\u308c\u3070\u30bf\u30b0\u4ed8\u3051\u3057\u305f\u30c7\u30fc\u30bf\u3092\u9806\u5e8f\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3067\u8aad\u307f\u305f\u3044\u3002\n\n\u3068\u306a\u308b\u3068\u3001\u81ea\u524d\u306e\u30d1\u30fc\u30b5\u3092 Fortran \u3067\u9811\u5f35\u3063\u3066\u66f8\u304f\u304b\u3001\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u7528\u610f\u3059\u308b\u304b\u3001C \u3068\u30ea\u30f3\u30af\u3059\u308b\u304b\u2026\n\n\u305d\u3093\u306a\u3068\u304d Fortran \u3067 JSON \u3092\u53d6\u308a\u6271\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\u305f\u3060\u3057 Fortran 2008 \u4ee5\u4e0a\u9650\u5b9a\u3002\u4eca\u3084 GCC \u3067\u3082 4.9 \u306a\u3089 Fortran 2008 \u306b\u5bfe\u5fdc (\u3059\u3079\u3066\u3068\u306f\u8a00\u3063\u3066\u306a\u3044) \u3057\u3066\u308b\u306e\u3067\u554f\u984c\u306a\u3044\u3088\u306d?\n\n\u3067\u3001Fortran \u3067 JSON \u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u6271\u3046 Cool \u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3053\u308c\u3002\u305d\u306e\u540d\u3082 json-fortran\u3002\u76f4\u7403\u3060\u306a\u3002\nhttps://github.com/jacobwilliams/json-fortran\n\n\u4f7f\u3044\u65b9\u306f\u4e0a\u8a18\u306e\u30ea\u30f3\u30af\u306b src/json_module.f90 \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u306e\u3067\u30ea\u30f3\u30af\u3059\u308b\u3002\u3053\u308c\u3060\u3051\u3002\u4ed8\u5c5e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f CMake \u3092\u4f7f\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u306e\u624b\u9806\u304c\u66f8\u3044\u3066\u3042\u308b\u3051\u308c\u3069\u3001\u5225\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3057\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u3002\n\n\u4f7f\u7528\u4f8b\u306f\u3054\u89a7\u306e\u3068\u304a\u308a\u3002\n\n```fortran:sample.f90\nprogram main\n\n  use, intrinsic :: iso_fortran_env, wp => real64\n  use json_module\n  implicit none\n\n  character(len=256) :: prog, file\n\n  type(json_file) :: json\n  character(len=:), allocatable :: error_msg\n  logical :: status_ok, found\n  integer :: scalar_int\n  real(wp), allocatable :: array_real(:)\n \n  if (command_argument_count() /= 1) then\n     call get_command(prog)\n     write(error_unit, '(\"usage: \",a, \" file\")') trim(prog)\n     call exit(64)              ! EX_USAGE\n  end if\n  call get_command_argument(1, file)\n\n  call json_initialize()        ! json_module \u306e\u521d\u671f\u5316\n  call json%load_file(file)     ! JSON \u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n  if (json_failed()) then\n     call json_check_for_errors(status_ok, error_msg)\n     write(error_unit, '(a)') error_msg\n     call exit(65)              ! EX_DATAERR\n  end if\n\n  ! JSON \u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u3080\n  call json%get('sample.data(2).int_value', scalar_int, found)\n  call json%get('sample.array_of_real', array_real, found)\n\n  call json%destroy()           ! clean up\n\n  write(output_unit, '(\"sample.data(2).int_value = \",g0)') scalar_int\n  write(output_unit, '(\"sample.array_of_real = \",/,*(4(f10.3),/))') array_real(:)\n\n  call exit(0)                  ! EX_OK\n\nend program main\n```\n\n```json:data.json\n{\n    \"sample\": {\n        \"data\": [\n            { \"ID\": \"1\" },\n            {\n                \"ID\": \"2\",\n                \"int_value\": 5\n            },\n            { \"ID\": \"3\" }\n        ],\n        \"array_of_real\": [\n            0.16,  80.05,  49.58,  77.29,  25.34,  15.28,\n            77.23,  64.69,  87.58,  26.94, 53.08,  0.8\n        ]\n    }\n}\n```\n\n```:\u5b9f\u884c\u4f8b\nF:\\> gfortran -o sample json_module.f90 sample.f90\nF:\\> sample.exe data.json\nsample.data(2).int_value = 5\nsample.array_of_real =\n     0.160    80.050    49.580    77.290\n    25.340    15.280    77.230    64.690\n    87.580    26.940    53.080     0.800\n\nF:\\>\n```\n\n\u7c21\u5358\u3060\u306d\u3002\u3082\u3061\u308d\u3093 JSON \u5f62\u5f0f\u3067\u51fa\u529b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3068\u3069\u3046\u306a\u308b\u306e\u3060\u308d\u3046\u3068\u304b\u4e0d\u5b89\u8981\u7d20\u304c\u306a\u3044\u308f\u3051\u3067\u3082\u306a\u3044\u3051\u308c\u3069\u3001Fortran \u306e\u5f31\u70b9\u3092\u30d5\u30a9\u30ed\u30fc\u3067\u304d\u308b\u975e\u5e38\u306b\u4fbf\u5229\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306a\u3093\u3067\u306f\u306a\u3044\u304b\u306a\u3002\n"}