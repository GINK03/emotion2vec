{"context": "\n\n\u306f\u3058\u3081\u306b\nRust Advent Calendar 12/8 \u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u8981\u6c42\u3055\u308c\u305f\u7a7a\u9593\u3084\u6642\u9593\u5185\u3067\u306e\u52d5\u4f5c\u3001 \u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u3084\u30aa\u30da\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0\u306e\u3088\u3046\u306a\u4f4e\u30ec\u30d9\u30eb\u306a\u30b3\u30fc\u30c9\u306a\u3069\u4ed6\u306e\u8a00\u8a9e\u304c\u82e6\u624b\u3068\u3059\u308b\u591a\u6570\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u5f97\u610f\u3068\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eRust \u3088\u308a\n\u3053\u306e\u3046\u305f\u3044\u6587\u53e5\u306b\u3084\u3089\u308c\u30019\u6708\u304f\u3089\u3044\u304b\u3089 Windows API \u3092 Rust \u3067\u547c\u3073\u51fa\u3057\u3066\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u3002\nROki1988/perf_client \nWindows API \u306e\u547c\u3073\u51fa\u3057\u306b\u3064\u3044\u3066\u306f\u3001\u3059\u3067\u306b\u3042\u3063\u305f retep998/winapi-rs \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3067\u3001winapi-rs \u306f unsafe \u306a\u95a2\u6570\u305f\u3061\u3067\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u305f\u3061\u3092\u3069\u3046 Rust \u306e\u4e16\u754c\u3078\u5f15\u304d\u8fbc\u3093\u3060\u3089\u3044\u3044\u3093\u3060\u308d\u3046\u3001\u3068\u8003\u3048\u305f\u308a\u3057\u305f\u306e\u3067\u3001\n\u305d\u3061\u3089\u306b\u3064\u3044\u3066\u89e6\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\nWrapper \u3092\u66f8\u304f\n\u7d50\u8ad6\u3068\u3057\u3066\u3001Wrapper \u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u3067\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002  \nfn pdh_open_query() -> Result<winapi::PDH_HQUERY, winapi::PDH_STATUS> {\n    use std::ptr;\n    let mut hquery = winapi::INVALID_HANDLE_VALUE;\n    let ret = unsafe { pdh::PdhOpenQueryW(ptr::null(), 0, &mut hquery) };\n\n    if winapi::winerror::SUCCEEDED(ret) {\n        Ok(hquery)\n    } else {\n        Err(ret)\n    }\n}\n\n\u4e0a\u8a18\u95a2\u6570\u306f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b PDH* \u95a2\u6570\u306e1\u3064\u306b\u306a\u308a\u307e\u3059\u3002\npdh::PdhOpenQueryW \u304c winapi-rs \u306b\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u3067\u3059\u3002\n\u66f8\u3044\u305f\u308a\u6d88\u3057\u305f\u308a\u3057\u306a\u304c\u3089\u3001\u4ee5\u4e0b\u306e\u65b9\u91dd\u304c\u5f62\u306b\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\nWrapper \u95a2\u6570\u5185\u3067 unsafe \u3092\u5b8c\u7d50\u3055\u305b\u308b\n\n\n\u304b\u3064 unsafe \u306e\u7bc4\u56f2\u3092\u306a\u308b\u3079\u304f\u5c0f\u3055\u304f\u3059\u308b\n\n\n\u7d50\u679c\u306f Result \u306e\u6587\u8108\u3067\u5305\u3080\n\n\n\u304b\u3064 Wrapper \u95a2\u6570\u306e\u30a8\u30e9\u30fc\u306e\u578b\u306f ERROR_CODE \u3067\u305d\u308d\u3048\u308b\n\n\n\n\u305f\u3076\u3093\u5f53\u305f\u308a\u524d\u306e\u3053\u3068\u66f8\u3044\u3066\u307e\u3059w \u3051\u3069\u305d\u308d\u3048\u308b\u3053\u3068\u304c\u5927\u4e8b\u3001\u3068\u3057\u307e\u3057\u305f\u3002\n\u3053\u308c\u3067 Wrapper \u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u5143\u3067\u306f Rust \u306e\u4e16\u754c\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u3051\u307e\u3059\u3002\nimpl<'a> Iterator for PdhControllerIterator<'a> {\n    type Item = PdhCollectValue;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.index == 0 {\n            pdh_collect_query_data(self.pdhc.hquery);\n        }\n\n        let item = self.pdhc\n            .items\n            .get(self.index)\n            .iter()\n            .flat_map(|c| {\n                pdh_get_formatted_counter_value(c.hcounter, PDH_FMT_DOUBLE)\n                    .map(|v| PdhCollectValue::new(&c.element, v))\n            })\n            .last();\n        self.index += 1;\n        item\n    }\n}\n\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f  pdh_collect_query_data \u3068 pdh_get_formatted_counter_value \u304c Wrapper \u95a2\u6570\u306b\u3042\u305f\u308a\u307e\u3059\u3002\nunsafe \u306f\u4e00\u5207\u898b\u5f53\u305f\u3089\u305a\u3001Rust \u306e\u4e16\u754c\u3067\u95a2\u6570\u3092\u3064\u306a\u3052\u306a\u304c\u3089\u3001\u30ac\u30b7\u30ac\u30b7\u66f8\u3044\u3066\u3044\u3051\u307e\u3057\u305f\u3002  \n\u5177\u4f53\u7684\u306b\u306f Drop \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u30cf\u30f3\u30c9\u30eb\u306e\u958b\u653e\u3092\u3057\u305f\u308a\u3001Iterator \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066 map \u3067\u5024\u3092\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u308a\u3057\u307e\u3057\u305f\u3002\n\u3044\u3084\u3041\u697d\u3057\u3044!\n\n\u304a\u308f\u308a\u306b\nWrapper \u95a2\u6570\u3092\u66f8\u304f\u306e\u306f\u5c11\u3057\u624b\u9593\u3067\u3059\u304c\u3001Rust \u306e\u4e16\u754c\u306e\u547c\u3073\u51fa\u3057\u5143\u3067\u306f\u5fc3\u5730\u3088\u304f\u30b3\u30fc\u30c9\u304c\u304b\u3051\u307e\u3057\u305f\u3002\n\u3046\u305f\u3044\u6587\u53e5\u306b\u3084\u3089\u308c\u3066\u3088\u304b\u3063\u305f\u3067\u3059\u3002\n# \u306f\u3058\u3081\u306b\n\nRust Advent Calendar 12/8 \u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n> \u8981\u6c42\u3055\u308c\u305f\u7a7a\u9593\u3084\u6642\u9593\u5185\u3067\u306e\u52d5\u4f5c\u3001 \u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u3084\u30aa\u30da\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0\u306e\u3088\u3046\u306a\u4f4e\u30ec\u30d9\u30eb\u306a\u30b3\u30fc\u30c9\u306a\u3069\u4ed6\u306e\u8a00\u8a9e\u304c\u82e6\u624b\u3068\u3059\u308b\u591a\u6570\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u5f97\u610f\u3068\u3057\u307e\u3059\u3002\n\n[\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eRust](https://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/) \u3088\u308a\n\n\u3053\u306e\u3046\u305f\u3044\u6587\u53e5\u306b\u3084\u3089\u308c\u30019\u6708\u304f\u3089\u3044\u304b\u3089 Windows API \u3092 Rust \u3067\u547c\u3073\u51fa\u3057\u3066\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u3002\n[ROki1988/perf_client](https://github.com/ROki1988/perf_client)  \n\nWindows API \u306e\u547c\u3073\u51fa\u3057\u306b\u3064\u3044\u3066\u306f\u3001\u3059\u3067\u306b\u3042\u3063\u305f [retep998/winapi-rs](https://github.com/retep998/winapi-rs) \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3067\u3001``winapi-rs`` \u306f unsafe \u306a\u95a2\u6570\u305f\u3061\u3067\u3059\u3002  \n\u3053\u306e\u30b3\u30fc\u30c9\u305f\u3061\u3092\u3069\u3046 Rust \u306e\u4e16\u754c\u3078\u5f15\u304d\u8fbc\u3093\u3060\u3089\u3044\u3044\u3093\u3060\u308d\u3046\u3001\u3068\u8003\u3048\u305f\u308a\u3057\u305f\u306e\u3067\u3001\n\u305d\u3061\u3089\u306b\u3064\u3044\u3066\u89e6\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\n# Wrapper \u3092\u66f8\u304f\n\n\u7d50\u8ad6\u3068\u3057\u3066\u3001Wrapper \u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u3067\u5bfe\u5fdc\u3057\u307e\u3057\u305f\u3002  \n\n```Rust\nfn pdh_open_query() -> Result<winapi::PDH_HQUERY, winapi::PDH_STATUS> {\n    use std::ptr;\n    let mut hquery = winapi::INVALID_HANDLE_VALUE;\n    let ret = unsafe { pdh::PdhOpenQueryW(ptr::null(), 0, &mut hquery) };\n\n    if winapi::winerror::SUCCEEDED(ret) {\n        Ok(hquery)\n    } else {\n        Err(ret)\n    }\n}\n```\n\n\u4e0a\u8a18\u95a2\u6570\u306f\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30ab\u30a6\u30f3\u30bf\u30fc\u306e\u5024\u3092\u53d6\u5f97\u3059\u308b PDH* \u95a2\u6570\u306e1\u3064\u306b\u306a\u308a\u307e\u3059\u3002\n``pdh::PdhOpenQueryW`` \u304c ``winapi-rs`` \u306b\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u3067\u3059\u3002\n\n\u66f8\u3044\u305f\u308a\u6d88\u3057\u305f\u308a\u3057\u306a\u304c\u3089\u3001\u4ee5\u4e0b\u306e\u65b9\u91dd\u304c\u5f62\u306b\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n\n* Wrapper \u95a2\u6570\u5185\u3067 ``unsafe`` \u3092\u5b8c\u7d50\u3055\u305b\u308b\n  * \u304b\u3064 ``unsafe`` \u306e\u7bc4\u56f2\u3092\u306a\u308b\u3079\u304f\u5c0f\u3055\u304f\u3059\u308b\n* \u7d50\u679c\u306f ``Result`` \u306e\u6587\u8108\u3067\u5305\u3080\n  * \u304b\u3064 Wrapper \u95a2\u6570\u306e\u30a8\u30e9\u30fc\u306e\u578b\u306f ERROR_CODE \u3067\u305d\u308d\u3048\u308b\n\n\u305f\u3076\u3093\u5f53\u305f\u308a\u524d\u306e\u3053\u3068\u66f8\u3044\u3066\u307e\u3059w \u3051\u3069\u305d\u308d\u3048\u308b\u3053\u3068\u304c\u5927\u4e8b\u3001\u3068\u3057\u307e\u3057\u305f\u3002\n\u3053\u308c\u3067 Wrapper \u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u5143\u3067\u306f Rust \u306e\u4e16\u754c\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u3051\u307e\u3059\u3002\n\n```Rust\nimpl<'a> Iterator for PdhControllerIterator<'a> {\n    type Item = PdhCollectValue;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        if self.index == 0 {\n            pdh_collect_query_data(self.pdhc.hquery);\n        }\n\n        let item = self.pdhc\n            .items\n            .get(self.index)\n            .iter()\n            .flat_map(|c| {\n                pdh_get_formatted_counter_value(c.hcounter, PDH_FMT_DOUBLE)\n                    .map(|v| PdhCollectValue::new(&c.element, v))\n            })\n            .last();\n        self.index += 1;\n        item\n    }\n}\n```\n\n\u4e0a\u8a18\u30b3\u30fc\u30c9\u3067\u306f  ``pdh_collect_query_data`` \u3068 ``pdh_get_formatted_counter_value`` \u304c Wrapper \u95a2\u6570\u306b\u3042\u305f\u308a\u307e\u3059\u3002  \n``unsafe`` \u306f\u4e00\u5207\u898b\u5f53\u305f\u3089\u305a\u3001Rust \u306e\u4e16\u754c\u3067\u95a2\u6570\u3092\u3064\u306a\u3052\u306a\u304c\u3089\u3001\u30ac\u30b7\u30ac\u30b7\u66f8\u3044\u3066\u3044\u3051\u307e\u3057\u305f\u3002  \n\n\u5177\u4f53\u7684\u306b\u306f Drop \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u30cf\u30f3\u30c9\u30eb\u306e\u958b\u653e\u3092\u3057\u305f\u308a\u3001Iterator \u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u3066 map \u3067\u5024\u3092\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u3057\u305f\u308a\u3057\u307e\u3057\u305f\u3002\n\u3044\u3084\u3041\u697d\u3057\u3044!\n\n# \u304a\u308f\u308a\u306b\n\nWrapper \u95a2\u6570\u3092\u66f8\u304f\u306e\u306f\u5c11\u3057\u624b\u9593\u3067\u3059\u304c\u3001Rust \u306e\u4e16\u754c\u306e\u547c\u3073\u51fa\u3057\u5143\u3067\u306f\u5fc3\u5730\u3088\u304f\u30b3\u30fc\u30c9\u304c\u304b\u3051\u307e\u3057\u305f\u3002\n\u3046\u305f\u3044\u6587\u53e5\u306b\u3084\u3089\u308c\u3066\u3088\u304b\u3063\u305f\u3067\u3059\u3002\n", "tags": ["rust", "Windows"]}