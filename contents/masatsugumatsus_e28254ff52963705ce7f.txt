{"tags": ["golang", "Mithril.js", "gin", "Go"], "context": " More than 1 year has passed since last update.mithril.js\u3067\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\n\u5229\u7528\u3059\u308bFW\n\nmithril.js\u3000https://lhorie.github.io/mithril/\n\nGin(golang) https://gin-gonic.github.io/gin/\n\ngenmai(go\u306edb\u30a2\u30af\u30bb\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea) https://github.com/naoina/genmai\n\ngolang\u7528sqlite\u30c9\u30e9\u30a4\u30d0 https://github.com/mattn/go-sqlite3\n\nHotReload\u7528 https://github.com/skelterjohn/rerun\n\n\n\n\u30a2\u30d7\u30ea\u8aac\u660e\n\nmithril\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u3042\u3063\u305fTodo\u304c\u30d9\u30fc\u30b9\nSPA\u3058\u3083\u306a\u304f\u3066\u3001\u52d5\u7684\u306a\u753b\u9762\u3092mithril\u3067\u4f5c\u308b\u3060\u3051\n\u30b5\u30fc\u30d0\u5074\u306fGin(golang)+genmai(orm)\n\n\n\u30b3\u30fc\u30c9\n\njson\u3068DB\u30a2\u30af\u30bb\u30b9\u3067\u4f7f\u3046\u69cb\u9020\u4f53 $GOPATH/src/app/model/todo.go\n\n\ntodo.go\npackage model\n\ntype Todo struct {\n    Id int64 `db:\"pk\" json:\"id\"`\n    Description string `json:\"description\"`\n    Done bool `json:\"done\"`\n}\n\n\n\n\ndb\u30a2\u30af\u30bb\u30b9 $GOPATH/src/app/db/db.go\n\n\ndb.go\npackage db\nimport (\n    _ \"github.com/mattn/go-sqlite3\"\n    \"github.com/naoina/genmai\"\n    \"app/model\"\n    \"github.com/gin-gonic/gin\"\n    \"fmt\"\n)\n\n\nvar DB *genmai.DB\n\nfunc InitDB() {\n\n    var err error\n    DB, err = genmai.New(&genmai.SQLite3Dialect{}, \":memory:\")\n    if err != nil {\n        panic(err)\n    }\n\n    if err := DB.CreateTable(&model.Todo{}); err != nil {\n        panic(err)\n    }\n\n    initData := []model.Todo{\n        {1, \"\u306a\u3093\u304b\u3084\u308b\", false},\n        {2, \"\u306a\u3093\u304b\u3084\u308b2\", true},\n    }\n    if _,err=DB.Insert(&initData);err != nil{\n        panic(err)\n    }\n\n\n}\n\n/**\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5236\u5fa1\u306e\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\n */\nfunc TransactionHandler() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        defer func() {\n            if err := recover(); err != nil {\n                fmt.Println(\"END TRANSACTION ROLLBACK\")\n                DB.Rollback()\n                panic(err)\n            } else {\n\n                DB.Commit()\n                fmt.Println(\"END TRANSACTION COMMIT\")\n            }\n        }()\n\n        fmt.Println(\"START TRANSACTION\")\n        if err := DB.Begin(); err != nil {\n            panic(err)\n        }\n\n        c.Next()\n\n\n\n    }\n}\n\n\n\n\nmain+\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0 $GOPATH/src/app/main/app.go\n\n\napp.go\npackage main\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"app/db\"\n    \"net/http\"\n    \"app/model\"\n)\n\nfunc main(){\n\n    db.InitDB()\n    r := gin.Default()\n    r.Static(\"/static\",\"static\")\n    r.LoadHTMLGlob(\"templates/*\")\n\n    r.Use(db.TransactionHandler())\n\n\n    r.GET(\"/\",Index)\n    r.GET(\"/todo\",GetTodo)\n    r.POST(\"/todo\",AddTodo)\n\n    r.Run(\":9000\")\n}\n\nfunc Index(c *gin.Context){\n\n    c.HTML(http.StatusOK,\"index.html\",nil)\n}\n\nfunc GetTodo(c *gin.Context){\n    db := db.DB\n\n    var todos []model.Todo\n    if err := db.Select(&todos,); err != nil {\n        panic(err)\n    }\n    c.JSON(http.StatusOK,todos)\n}\n\nfunc AddTodo(c *gin.Context){\n\n        var todo model.Todo\n        if c.BindJSON(&todo) == nil {\n\n        db := db.DB\n\n        if num, err := db.Update(&todo); err != nil {\n            panic(err)\n\n        }else if num == 0 {\n\n            if _, err := db.Insert(&todo); err != nil {\n                panic(err)\n            }\n        }\n\n        c.JSON(http.StatusOK, todo)\n\n    }else {\n        c.JSON(http.StatusBadRequest, nil)\n    }\n\n}\n\n\n\n\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30da\u30fc\u30b8\uff08html\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\uff09\n$GOPATH/templates/index.html\n\n\nindex.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"/static/js/mithril.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <title>Mithril TODO</title>\n</head>\n<body>\n<div id=\"$contents\"></div>\n\n<script type=\"text/javascript\">\n    //todo component\n    var todo = {};\n    //model\n    todo.Todo = function (data) {\n        this.description = m.prop(data.description);\n        this.done = m.prop(data.done);\n    };\n\n    todo.TodoList = Array;\n\n    //define the view-model\n    todo.vm = (function () {\n        var vm = {}\n        vm.init = function () {\n            //a running list of todos\n            vm.list = new todo.TodoList();\n\n            //a slot to store the name of a new todo before it is created\n            vm.description = m.prop(\"\");\n\n            //init\n            m.request({method: \"GET\", url: \"/todo\"}).then(function (todoList) {\n\n                todoList.forEach(function (v) {\n                    vm.list.push(new todo.Todo({description: v.description, done: v.done}));\n                });\n\n            });\n\n            vm.add = function () {\n                if (vm.description()) {\n\n                    m.request({\n                        method: \"POST\",\n                        url: \"/todo\",\n                        data: {id:t.id,description: vm.description()}\n                    }).then(function (t) {\n\n                        vm.list.push(new todo.Todo({id:t.id,description: t.description}));\n\n                        vm.description(\"\");\n\n                    },function(error){\n                        console.log(\"error \");\n                    });\n                }\n            };\n            vm.update = function (task) {\n\n                m.request({\n                    method: \"POST\",\n                    url: \"/todo\",\n                    data: {id: task.id(),\n                           description:task.description(),\n                           done:task.done()}\n                }).then(function () {\n                    console.log(\"updated\");\n                }, function (error) {\n                    console.log(\"error \");\n                });\n            };\n\n        }\n        return vm\n    }())\n\n    todo.controller = function () {\n        todo.vm.init()\n    }\n\n    todo.view = function () {\n        return m(\"div\", [\n            m(\"input\", {onchange: m.withAttr(\"value\", todo.vm.description), value: todo.vm.description(),}),\n            m(\"button\", {onclick: todo.vm.add}, \"Add\"),\n            m(\"table\", [\n                todo.vm.list.map(function (task, index) {\n                    return m(\"tr\", [\n                        m(\"td\", [\n                            m(\"input[type=checkbox]\",\n                               {\n                               onclick:function (e) {\n                                    task.done(e.target.checked)\n                                    todo.vm.update(task)\n                                }\n                               ,checked: task.done()\n                               })\n                        ]),\n                        m(\"td\", {style: {textDecoration: task.done() ? \"line-through\" : \"none\"}}, task.description()),\n                    ])\n                })\n            ])\n        ]);\n    };\n    m.mount($contents, {controller: todo.controller, view: todo.view});\n</script>\n</body>\n</html>\n\n\n\n\uff08\u3061\u3068\u4fee\u6b63\u3002\u4e0b\u8a18\u3092\u53c2\u8003\u306bdocument.getElementById\u3092id\u306e\u307f\u3067\u6307\u5b9a\u3057\u3066\u307f\u305f\u3002\u77e5\u3089\u3093\u304b\u3063\u305f\u3002\u3002\u3002\nhttp://qiita.com/LightSpeedC/items/a2c967928f9cc13e0ebc\uff09\n\nmithril\u306e\u7f6e\u304d\u5834\n$GOPATH/static/mithril.js\n\n\n\u5b9f\u884c\nrerun app/main\n\nmithril.js\u3067\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n##\u5229\u7528\u3059\u308bFW\n- mithril.js\u3000https://lhorie.github.io/mithril/\n- Gin(golang) https://gin-gonic.github.io/gin/\n- genmai(go\u306edb\u30a2\u30af\u30bb\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea) https://github.com/naoina/genmai\n- golang\u7528sqlite\u30c9\u30e9\u30a4\u30d0 https://github.com/mattn/go-sqlite3\n- HotReload\u7528 https://github.com/skelterjohn/rerun\n\n##\u30a2\u30d7\u30ea\u8aac\u660e\n- mithril\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u3042\u3063\u305fTodo\u304c\u30d9\u30fc\u30b9\n- SPA\u3058\u3083\u306a\u304f\u3066\u3001\u52d5\u7684\u306a\u753b\u9762\u3092mithril\u3067\u4f5c\u308b\u3060\u3051\n- \u30b5\u30fc\u30d0\u5074\u306fGin(golang)+genmai(orm)\n\n##\u30b3\u30fc\u30c9\n- json\u3068DB\u30a2\u30af\u30bb\u30b9\u3067\u4f7f\u3046\u69cb\u9020\u4f53 $GOPATH/src/app/model/todo.go\n\n```go:todo.go\npackage model\n\ntype Todo struct {\n\tId int64 `db:\"pk\" json:\"id\"`\n\tDescription string `json:\"description\"`\n\tDone bool `json:\"done\"`\n}\n\n```\n\n- db\u30a2\u30af\u30bb\u30b9 $GOPATH/src/app/db/db.go\n\n```go:db.go\npackage db\nimport (\n\t_ \"github.com/mattn/go-sqlite3\"\n\t\"github.com/naoina/genmai\"\n\t\"app/model\"\n\t\"github.com/gin-gonic/gin\"\n\t\"fmt\"\n)\n\n\nvar DB *genmai.DB\n\nfunc InitDB() {\n\n\tvar err error\n\tDB, err = genmai.New(&genmai.SQLite3Dialect{}, \":memory:\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tif err := DB.CreateTable(&model.Todo{}); err != nil {\n\t\tpanic(err)\n\t}\n\n\tinitData := []model.Todo{\n\t\t{1, \"\u306a\u3093\u304b\u3084\u308b\", false},\n\t\t{2, \"\u306a\u3093\u304b\u3084\u308b2\", true},\n\t}\n\tif _,err=DB.Insert(&initData);err != nil{\n\t\tpanic(err)\n\t}\n\n\n}\n\n/**\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5236\u5fa1\u306e\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\n */\nfunc TransactionHandler() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t\tfmt.Println(\"END TRANSACTION ROLLBACK\")\n\t\t\t\tDB.Rollback()\n\t\t\t\tpanic(err)\n\t\t\t} else {\n\n\t\t\t\tDB.Commit()\n\t\t\t\tfmt.Println(\"END TRANSACTION COMMIT\")\n\t\t\t}\n\t\t}()\n\n\t\tfmt.Println(\"START TRANSACTION\")\n\t\tif err := DB.Begin(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\n\t\tc.Next()\n\n\n\n\t}\n}\n\n```\n\n- main+\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0 $GOPATH/src/app/main/app.go\n\n```go:app.go\npackage main\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"app/db\"\n\t\"net/http\"\n\t\"app/model\"\n)\n\nfunc main(){\n\n\tdb.InitDB()\n\tr := gin.Default()\n\tr.Static(\"/static\",\"static\")\n\tr.LoadHTMLGlob(\"templates/*\")\n\n\tr.Use(db.TransactionHandler())\n\n\n\tr.GET(\"/\",Index)\n\tr.GET(\"/todo\",GetTodo)\n\tr.POST(\"/todo\",AddTodo)\n\n\tr.Run(\":9000\")\n}\n\nfunc Index(c *gin.Context){\n\n\tc.HTML(http.StatusOK,\"index.html\",nil)\n}\n\nfunc GetTodo(c *gin.Context){\n\tdb := db.DB\n\n\tvar todos []model.Todo\n\tif err := db.Select(&todos,); err != nil {\n\t\tpanic(err)\n\t}\n\tc.JSON(http.StatusOK,todos)\n}\n\nfunc AddTodo(c *gin.Context){\n\n        var todo model.Todo\n        if c.BindJSON(&todo) == nil {\n\n\t\tdb := db.DB\n\n\t\tif num, err := db.Update(&todo); err != nil {\n\t\t\tpanic(err)\n\n\t\t}else if num == 0 {\n\t\t\t\n\t\t\tif _, err := db.Insert(&todo); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\n\t\tc.JSON(http.StatusOK, todo)\n\n\t}else {\n\t\tc.JSON(http.StatusBadRequest, nil)\n\t}\n\n}\n\n```\n\n- \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30da\u30fc\u30b8\uff08html\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\uff09\n$GOPATH/templates/index.html\n\n```html:index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <script src=\"/static/js/mithril.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n    <title>Mithril TODO</title>\n</head>\n<body>\n<div id=\"$contents\"></div>\n\n<script type=\"text/javascript\">\n    //todo component\n    var todo = {};\n    //model\n    todo.Todo = function (data) {\n        this.description = m.prop(data.description);\n        this.done = m.prop(data.done);\n    };\n\n    todo.TodoList = Array;\n\n    //define the view-model\n    todo.vm = (function () {\n        var vm = {}\n        vm.init = function () {\n            //a running list of todos\n            vm.list = new todo.TodoList();\n\n            //a slot to store the name of a new todo before it is created\n            vm.description = m.prop(\"\");\n\n            //init\n            m.request({method: \"GET\", url: \"/todo\"}).then(function (todoList) {\n\n                todoList.forEach(function (v) {\n                    vm.list.push(new todo.Todo({description: v.description, done: v.done}));\n                });\n\n            });\n\n            vm.add = function () {\n                if (vm.description()) {\n\n                    m.request({\n                        method: \"POST\",\n                        url: \"/todo\",\n                        data: {id:t.id,description: vm.description()}\n                    }).then(function (t) {\n\n                        vm.list.push(new todo.Todo({id:t.id,description: t.description}));\n\n                        vm.description(\"\");\n\n                    },function(error){\n                        console.log(\"error \");\n                    });\n                }\n            };\n            vm.update = function (task) {\n\n                m.request({\n                    method: \"POST\",\n                    url: \"/todo\",\n                    data: {id: task.id(),\n                           description:task.description(),\n                           done:task.done()}\n                }).then(function () {\n                    console.log(\"updated\");\n                }, function (error) {\n                    console.log(\"error \");\n                });\n            };\n          \n        }\n        return vm\n    }())\n\n    todo.controller = function () {\n        todo.vm.init()\n    }\n\n    todo.view = function () {\n        return m(\"div\", [\n            m(\"input\", {onchange: m.withAttr(\"value\", todo.vm.description), value: todo.vm.description(),}),\n            m(\"button\", {onclick: todo.vm.add}, \"Add\"),\n            m(\"table\", [\n                todo.vm.list.map(function (task, index) {\n                    return m(\"tr\", [\n                        m(\"td\", [\n                            m(\"input[type=checkbox]\",\n                               {\n                               onclick:function (e) {\n                                    task.done(e.target.checked)\n                                    todo.vm.update(task)\n                                }\n                               ,checked: task.done()\n                               })\n                        ]),\n                        m(\"td\", {style: {textDecoration: task.done() ? \"line-through\" : \"none\"}}, task.description()),\n                    ])\n                })\n            ])\n        ]);\n    };\n    m.mount($contents, {controller: todo.controller, view: todo.view});\n</script>\n</body>\n</html>\n\n```\n\uff08\u3061\u3068\u4fee\u6b63\u3002\u4e0b\u8a18\u3092\u53c2\u8003\u306bdocument.getElementById\u3092id\u306e\u307f\u3067\u6307\u5b9a\u3057\u3066\u307f\u305f\u3002\u77e5\u3089\u3093\u304b\u3063\u305f\u3002\u3002\u3002\nhttp://qiita.com/LightSpeedC/items/a2c967928f9cc13e0ebc\uff09\n\n- mithril\u306e\u7f6e\u304d\u5834\n$GOPATH/static/mithril.js\n\n##\u5b9f\u884c\n```\nrerun app/main\n```\n"}