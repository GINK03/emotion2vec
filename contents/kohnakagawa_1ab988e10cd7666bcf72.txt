{"tags": ["CUDA", "GPGPU"], "context": "\n\n\u306f\u3058\u3081\u306b\n(2016/1/27\u8ffd\u8a18)\n\u81f4\u547d\u7684\u306a\u9593\u9055\u3044\u3092\u304a\u304b\u3057\u3066\u304a\u308a\u3001\u3053\u306e\u8a18\u4e8b\u306e\u7d50\u679c\u304c\u5909\u308f\u308a\u307e\u3057\u305f\u3002\u7d50\u5c40\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3068\u30ae\u30ea\u30ae\u30ea\u3067\u4f5c\u7528\u53cd\u4f5c\u7528\u4f7f\u308f\u306a\u3044\u307b\u3046\u304c\u9ad8\u901f\u5316\u3055\u308c\u307e\u3057\u305f\u3002\u5f8c\u65e5\u4fee\u6b63\u3057\u305f\u8a18\u4e8b\u3092\u66f8\u304f\u4e88\u5b9a\u3067\u3059\u3002\n\u3053\u308c\u307e\u3067LJ\u529b\u8a08\u7b97\u306eGPGPU\u5316\u3067\u306f\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u7121\u8996\u3057\u3066\u3001atomic\u3092\u4f7f\u308f\u306a\u3044\u3067\u3084\u308b\u306e\u304c\u6700\u901f\u3068\u81ea\u5206\u306f\u601d\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u904e\u53bb\u306e\u6587\u732e\u3092\u8abf\u3079\u3066\u307f\u3066\u3082\uff08\u304b\u306a\u308a\u524d\u306e\u8ad6\u6587\u3067\u3059\u304c\uff09\u3053\u306e\u8ad6\u6587\u3067\u306f\nIf such features (atomic\u306e\u3053\u3068) did exist, the increment of Fk (j\u7c92\u5b50\u306e\u529b) inside the inner\nloop still requires a scattered memory access pattern which would slow performance significantly.\n\n\u3068\u3001\u300cj\u7c92\u5b50\u3078\u306e\u529b\u306e\u66f8\u304d\u623b\u3057\u306f\u66f8\u304d\u8fbc\u307f\u30d1\u30bf\u30fc\u30f3\u304c\u4e0d\u9023\u7d9a\u306b\u306a\u308b\u306e\u3067\u3001\u4eee\u306batomic\u3042\u3063\u305f\u3068\u3057\u3066\u3082\u6027\u80fd\u51fa\u306a\u3044\u3068\u601d\u3046\u3088\u3002\u300d\u3068\u8a00\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u3053\u306e\u8ad6\u6587\u51fa\u305f\u3053\u308d\u306f\u307e\u3060\u6d6e\u52d5\u5c0f\u6570\u70b9\u306eatomicAdd\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\uff09\n\u305d\u306e\u3042\u3068\u306b\u51fa\u3066\u304d\u305f\u6563\u9038\u7c92\u5b50\u52d5\u529b\u5b66\u6cd5\u306eGPGPU\u5316\u306e\u8ad6\u6587\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u4e00\u751f\u61f8\u547d\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u3067\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u304c\u63d0\u6848\u3055\u308c\u3066\u3044\u307e\u3059\u3002\uff08\u6563\u9038\u7c92\u5b50\u52d5\u529b\u5b66\u306e\u8aac\u660e\u306f\u3057\u306a\u3044\u3067\u3059\u304c\u3001\u30e9\u30f3\u30c0\u30e0\u529b\u3092\u7c92\u5b50\u5bfe\u306b\u3064\u3044\u3066\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u6e80\u305f\u3059\u3088\u3046\u306b\u4e0e\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\u3067\u8a08\u7b97\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u975e\u5e38\u306b\u8907\u96d1\u306a\u624b\u7d9a\u304d\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001GPGPU\u5316\u3001MPI\u5316\u304c\u96e3\u3057\u3044\u3068\u3055\u308c\u3066\u304d\u307e\u3057\u305f\u3002\uff09\n\u9752\u6728\u5148\u751f\u3089\u306e\u8b1b\u7fa9\u8cc7\u6599\u3067\u3082\u4f7f\u7528\u306f\u6700\u5c11\u9650\u306b\u3068\u3069\u3081\u308b\u3079\u304d\u3068\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001GPU\u306f\u5909\u5316\u3057\u7d9a\u3051\u3066\u3044\u307e\u3059\u3002\u73fe\u5728\u306eGPU\u3067\u3082LJ\u529b\u8a08\u7b97\u3092\u884c\u3046\u969b\u306b\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u306e\u304c\u672c\u5f53\u306b\u30d9\u30b9\u30c8\u306a\u306e\u304b\u3069\u3046\u304b\u306f\u6b63\u76f4\u4e0d\u660e\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u3046\u5834\u5408\u3068\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u3068\u3067\u6027\u80fd\u304c\u3069\u306e\u7a0b\u5ea6\u9055\u3063\u3066\u304f\u308b\u306e\u304b\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u300c\u5b9f\u884c\u6642\u9593\u300d\u3068\u66f8\u3044\u305f\u3068\u304d\u306f\n1. GPU<->CPU\u306e\u8ee2\u9001\u306e\u6642\u9593\u8fbc\u307f\u3002\n2. \u95a2\u6570\u3092100\u56de\u7d9a\u3051\u3066\u5b9f\u884c\u3055\u305b\u3066\u3001\u5b9f\u884c\u6642\u9593\u306e\u7dcf\u548c\u3092\u3068\u3063\u305f\u3082\u306e\u3002\n\u306b\u306a\u308a\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\n\nLJ\u529b\u8a08\u7b97\u306eGPGPU\u5316\n\u7c21\u5358\u306bCPU\u306e\u30b3\u30fc\u30c9\u3092\u4f8b\u306b\u3068\u3063\u3066LJ\u529b\u8a08\u7b97\u306e\u51e6\u7406\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\nref.cpp\nvoid force_cpu_ref(void){\n  const int pn =particle_number;\n  for (int i=0; i<pn; i++) { // \u3059\u3079\u3066\u306e\u7c92\u5b50\u306b\u3064\u3044\u3066\n    const double qx_key = q[i][X];\n    const double qy_key = q[i][Y];\n    const double qz_key = q[i][Z];\n    const int np = number_of_partners[i]; // i\u7c92\u5b50\u306e\u5468\u308a\u306b\u3044\u308b\u7c92\u5b50\u306e\u6570\n    const int kp = pointer[i];\n    for (int k=0; k<np; k++) { // i\u7c92\u5b50\u306e\u5468\u308a\u306b\u3044\u308b\u3059\u3079\u3066\u306ej\u7c92\u5b50\u306b\u3064\u3044\u3066\n      const int j = sorted_list[kp + k];\n      double dx = q[j][X] - qx_key;\n      double dy = q[j][Y] - qy_key;\n      double dz = q[j][Z] - qz_key;\n      double r2 = (dx*dx + dy*dy + dz*dz); // \u8ddd\u96e2\u3092\u8a08\u7b97\u3057\n      if (r2 > CL2) continue; // cutoff \u8ddd\u96e2\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u4ee5\u964d\u306e\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7\n      double r6 = r2*r2*r2;\n      double df = ((24.0*r6-48.0)/(r6*r6*r2))*dt;\n      p[i][X] += df*dx; // \u4f5c\u7528\u53cd\u4f5c\u7528\u306e\u6cd5\u5247\u3092\u4f7f\u3044\u3001\u8a08\u7b97\u3057\u305f\u529b\u3092\u305f\u3057\u3053\u3080\u3002\n      p[i][Y] += df*dy;\n      p[i][Z] += df*dz;\n      p[j][X] -= df*dx;\n      p[j][Y] -= df*dy;\n      p[j][Z] -= df*dz;\n    }\n  }\n}\n\n\n\u4e8c\u91cd\u30eb\u30fc\u30d7\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u4e26\u5217\u306b\u51e6\u7406\u3067\u304d\u308b\u7b87\u6240\u304c\u4e8c\u3064\u3042\u308a\u307e\u3059\u3002 \n\u3053\u306e\u95a2\u6570\u306eGPGPU\u5316\u3067\u3088\u304f\u3084\u3089\u308c\u308b\u306e\u306fi\u7c92\u5b50\u306e\u6570\u3060\u3051GPU\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u52d5\u3055\u305b\u3066\u4e26\u5217\u51e6\u7406\u3059\u308b\u3084\u308a\u304b\u305f\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u30ca\u30a4\u30fc\u30d6\u306a\u5b9f\u88c5\u3067\u3059\u304catomicAdd\u3092\u7528\u3044\u3066\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u4f7f\u3046\nconst auto tid = threadIdx.x + blockIdx.x * blockDim.x; // \u30b9\u30ec\u30c3\u30c9\u304ci\u7c92\u5b50\u4e00\u3064\u306b\u5bfe\u5fdc\u3059\u308b\u3002\nif (tid < particle_number) {\n  const auto qi = q[tid];\n  const auto np = number_of_partners[tid];\n  const auto kp = pointer[tid];\n\n  for (int32_t k = 0; k < np; k++) { // i\u7c92\u5b50\u306e\u5468\u308a\u306b\u3044\u308bj\u7c92\u5b50\u306b\u3064\u3044\u3066\u306e\u30eb\u30fc\u30d7\n    const auto j = sorted_list[kp + k];\n    const auto dx = q[j].x - qi.x;\n    const auto dy = q[j].y - qi.y;\n    const auto dz = q[j].z - qi.z;\n    const auto r2 = dx * dx + dy * dy + dz * dz;\n    if (r2 > CL2) continue;\n    const auto r6 = r2 * r2 * r2;\n    const auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n    atomicAdd(&p[tid].x, df * dx);\n    atomicAdd(&p[tid].y, df * dy);\n    atomicAdd(&p[tid].z, df * dz);\n    atomicAdd(&p[j].x, -df * dx);\n    atomicAdd(&p[j].y, -df * dy);\n    atomicAdd(&p[j].z, -df * dz);\n  }\n}\n\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9\u306e\u5834\u5408\u306b\u306f\u3001j\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u306e\u66f8\u304d\u623b\u3057\u304c\u767a\u751f\u3057\u306a\u3044\u305f\u3081\u3001atomicAdd\u304c\u306a\u304f\u306a\u308a\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u4f7f\u308f\u306a\u3044\nconst auto tid = threadIdx.x + blockIdx.x * blockDim.x; // i\u7c92\u5b50\u4e00\u3064\u306b\u5bfe\u5fdc\u3059\u308b\u3002\nif (tid < particle_number) {\n  const auto qi = q[tid];\n  const auto np = number_of_partners[tid];\n  const auto kp = pointer[tid];\n\n  for (int32_t k = 0; k < np; k++) { // i\u7c92\u5b50\u306e\u5468\u308a\u306b\u3044\u308bj\u7c92\u5b50\u306b\u3064\u3044\u3066\u306e\u30eb\u30fc\u30d7\n    const auto j = sorted_list[kp + k];\n    const auto dx = q[j].x - qi.x;\n    const auto dy = q[j].y - qi.y;\n    const auto dz = q[j].z - qi.z;\n    const auto r2 = dx * dx + dy * dy + dz * dz;\n    if (r2 > CL2) continue;\n    const auto r6 = r2 * r2 * r2;\n    const auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n    p[tid].x += df * dx;\n    p[tid].y += df * dy;\n    p[tid].z += df * dz;\n  }                                                                           \n}\n\n\n\u5358\u7cbe\u5ea6\u306e\u5834\u5408\u3068\u500d\u7cbe\u5ea6\u306e\u5834\u5408\u3067\u4e0a\u8a18\u4e8c\u3064\u306e\u95a2\u6570\u306e\u5b9f\u884c\u6642\u9593\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nGPU: Tesla K40t\n\u7c92\u5b50\u6570:10\u4e07\n\u5bc6\u5ea6: 1\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a (\u5358\u7cbe\u5ea6)\n0.885239\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057 (\u5358\u7cbe\u5ea6)\n1.361835\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a (\u500d\u7cbe\u5ea6)\n2.450472\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057 (\u500d\u7cbe\u5ea6)\n1.996499\n\n\n\n\u5bc6\u5ea6\u304c0.5\u3067\u7c92\u5b50\u6570\u304c62500\u306e\u6642\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a (\u5358\u7cbe\u5ea6)\n0.224812\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057 (\u5358\u7cbe\u5ea6)\n0.379074\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a (\u500d\u7cbe\u5ea6)\n0.696441\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057 (\u500d\u7cbe\u5ea6)\n0.548830\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306e\u6cd5\u5247\u3092\u4f7f\u308f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u8a08\u7b97\u91cf\u304c\u500d\u306b\u306a\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u500d\u7cbe\u5ea6\u306e\u5834\u5408\u3001\u8a08\u7b97\u91cf\u304c\u500d\u306b\u306a\u3063\u305f\u3068\u3057\u3066\u3082\u4f5c\u7528\u53cd\u4f5c\u7528\u306e\u6cd5\u5247\u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9(atomicAdd\u3092\u4f7f\u308f\u306a\u3044)\u306e\u307b\u3046\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\u3002\u4e00\u65b9\u3067\u5358\u7cbe\u5ea6\u306e\u5834\u5408\u306b\u306fatomicAdd\u304c\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u3066\u3001atomicAdd\u3092\u4f7f\u3046\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u305d\u308c\u306a\u308a\u306b\u5c0f\u3055\u304f\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u306e\u6cd5\u5247\u3092\u4f7f\u308f\u306a\u3044\u3067\u8a08\u7b97\u91cf\u3092\u524a\u6e1b\u3059\u308b\u307b\u3046\u304c\u6709\u5229\u306b\u306a\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u3042\u307e\u308a\u306b\u30ca\u30a4\u30fc\u30d6\u306a\u5b9f\u88c5\u3067\u306e\u6bd4\u8f03\u3067\u3059\u306e\u3067\u3001\u3053\u3053\u304b\u3089\u4e8c\u3064\u306e\u30ab\u30fc\u30cd\u30eb\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3044\u304d\u306a\u304c\u3089\u518d\u5ea6\u6bd4\u8f03\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u305d\u306e\uff11\u3000i\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u66f8\u304d\u623b\u3057\u56de\u6570\u3092\u524a\u6e1b\n\u307e\u305a\u6c17\u306b\u306a\u308b\u306e\u306fi\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u306e\u66f8\u304d\u623b\u3057\u3092\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u7e70\u308a\u8fd4\u3057\u884c\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306f\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3057\u3066\u304a\u3044\u3066j\u7c92\u5b50\u306e\u30eb\u30fc\u30d7\u304c\u7d42\u308f\u3063\u3066\u4e00\u56de\u3060\u3051\u30b0\u30ed\u30fc\u30d0\u30eb\u30e1\u30e2\u30ea\u306b\u66f8\u304d\u623b\u3059\u3068\u3044\u3046\u3088\u3046\u306b\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\nif (tid < particle_number) {\n  const auto qi = q[tid];\n  const auto np = number_of_partners[tid];\n  const auto kp = pointer[tid];\n\n  Dtype pfx = 0.0, pfy = 0.0, pfz = 0.0; // i\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u306e\u7dcf\u548c\u3092\u30ec\u30b8\u30b9\u30bf\u306b\u7f6e\u3044\u3066\u304a\u304f\u3002\n  for (int32_t k = 0; k < np; k++) {\n    const auto j = sorted_list[kp + k];\n    const auto dx = q[j].x - qi.x;\n    const auto dy = q[j].y - qi.y;\n    const auto dz = q[j].z - qi.z;\n    const auto r2 = dx * dx + dy * dy + dz * dz;\n    const auto r6 = r2 * r2 * r2;\n    auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n    if (r2 > CL2) df = 0.0;\n    pfx += df * dx;\n    pfy += df * dy;\n    pfz += df * dz;\n  }\n  p[tid].x += pfx; // \u6700\u5f8c\u306b\u4e00\u5ea6\u3060\u3051\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3046\u3002\n  p[tid].y += pfy;\n  p[tid].z += pfz;\n}\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\nconst auto tid = threadIdx.x + blockIdx.x * blockDim.x;\nif (tid < particle_number) {\n  const auto qi = q[tid];\n  const auto np = number_of_partners[tid];\n  const auto kp = pointer[tid];\n\n  Dtype pfx = 0.0, pfy = 0.0, pfz = 0.0; // i\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u306e\u7dcf\u548c\u3092\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3057\u3066\u304a\u304f\u3002\n    for (int32_t k = 0; k < np; k++) {\n      const auto j = sorted_list[kp + k];\n      const auto dx = q[j].x - qi.x;\n      const auto dy = q[j].y - qi.y;\n      const auto dz = q[j].z - qi.z;\n      const auto r2 = dx * dx + dy * dy + dz * dz;\n      if (r2 > CL2) continue;\n      const auto r6 = r2 * r2 * r2;\n      const auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n      pfx += df * dx;\n      pfy += df * dy;\n      pfz += df * dz;\n      atomicAdd(&p[j].x, -df * dx);\n      atomicAdd(&p[j].y, -df * dy);\n      atomicAdd(&p[j].z, -df * dz);\n    }\n    atomicAdd(&p[tid].x, pfx); // \u6700\u5f8c\u306b\u4e00\u5ea6\u3060\u3051\u66f8\u304d\u623b\u3057\u3092\u884c\u3046\u3002\n    atomicAdd(&p[tid].y, pfy);\n    atomicAdd(&p[tid].z, pfz);\n  }\n\n\n\u3053\u308c\u3067\u3082\u500d\u7cbe\u5ea6\u306e\u5834\u5408\u3092\u307f\u3066\u307f\u308b\u3068\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9\u306e\u307b\u3046\u304c\u901f\u3044\u3067\u3059\u3002\nGPU: Tesla K40t\n\u5bc6\u5ea61\u306e\u6642\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\n1.345667\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\n1.189371\n\n\n\n\u5bc6\u5ea60.5\u306e\u6642\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\n0.351067\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\n0.315363\n\n\n\n\n\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u305d\u306e\uff12\u3000\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u306e\u30c7\u30fc\u30bf\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u5909\u66f4\n\u3055\u3089\u306b\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u9032\u3081\u3066\u307f\u307e\u3059\u3002\n\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u3092\u30e1\u30e2\u30ea\u304b\u3089\u3068\u3063\u3066\u304f\u308b\u3068\u304d\u3001warp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u30d0\u30e9\u30d0\u30e9\u306e\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u3068\u3063\u3066\u304f\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30a2\u30ec\u30b9\u30a2\u30af\u30bb\u30b9\u306b\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u8a72\u5f53\u7b87\u6240\u306e\u30b3\u30fc\u30c9\u3092\u629c\u7c8b\u3059\u308b\u3068\u3001\n...\n  const auto qi = q[tid];\n  const auto np = number_of_partners[tid];\n  const auto kp = pointer[tid];\n  Dtype pfx = 0.0, pfy = 0.0, pfz = 0.0;\n  for (int32_t k = 0; k < np; k++) { //j\u7c92\u5b50\u306b\u3064\u3044\u3066\u30eb\u30fc\u30d7\n    const auto j = sorted_list[kp + k]; // warp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u9023\u7d9a\u3057\u305f\u30e1\u30e2\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u3044\uff01\n...\n\n\u3067\u3059\u3002\u30b3\u30e1\u30f3\u30c8\u3067\u793a\u3057\u305fsorted_list\u3068\u3044\u3046\u914d\u5217\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306fwarp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u9023\u7d9a\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u3001sorted_list\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u5909\u66f4\u3057\u3066\u307f\u307e\u3059\u3002\n\u3069\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u306e\u304b\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u56f3\u3067\u793a\u3059\u3068\u3001\u5909\u66f4\u524d\u306f\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\n\n\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\u30b3\u30a2\u30ec\u30b9\u30a2\u30af\u30bb\u30b9\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u304c\u591a\u5c11\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3055\u3048\u30af\u30ea\u30a2\u3059\u308c\u3070\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\u7d50\u679c\u306f\nGPU: Tesla K40t\n\u5bc6\u5ea61\u306e\u5834\u5408\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\n1.331697\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\n0.236682\n\n\n\n\u5bc6\u5ea60.5\u306e\u5834\u5408\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\n0.361904\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\n0.087883\n\n\n\n\u3053\u308c\u3092\u3084\u308b\u3068\u305a\u3044\u3076\u3093\u5dee\u304c\u3064\u3044\u3066\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9\u304c\u30d9\u30b9\u30c8\u306a\u306e\u304b\u306a\u3068\u601d\u3048\u3066\u304d\u307e\u3059\u3002\n\n\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u305d\u306e3\u3000j\u7c92\u5b50\u30eb\u30fc\u30d7\u3092\u30a2\u30f3\u30ed\u30fc\u30eb\n\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u305d\u306e2\u3067\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u306e\u30c7\u30fc\u30bf\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u5909\u66f4\u3057\u307e\u3057\u305f\u304c\u3001\u3082\u3068\u306eCPU\u30b3\u30fc\u30c9\u3092GPGPU\u79fb\u690d\u3059\u308b\u3055\u3044\u306b\u306f\u3067\u304d\u308b\u3060\u3051\u907f\u3051\u305f\u3044\u3053\u3068\u3067\u3059\u3002\u305d\u3053\u3067\u3001j\u7c92\u5b50\u30eb\u30fc\u30d7\u3092\u30a2\u30f3\u30ed\u30fc\u30eb\u3057\u3066\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u306e\u30c7\u30fc\u30bf\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u5909\u66f4\u305b\u305a\u306b\u3001\u30b3\u30a2\u30ec\u30b9\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4f55\u3092\u3084\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001j\u7c92\u5b50\u306e\u30eb\u30fc\u30d7\u309232\u500d\u30a2\u30f3\u30ed\u30fc\u30eb\u3057\u3066\u3084\u308a\u3001\u3055\u3089\u306b\u8d77\u52d5\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u306e\u6570\u309232\u500d\u306b\u5897\u3084\u3057\u3066\u3084\u308a\u307e\u3059\u3002\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\nconst auto i_ptcl_id = (threadIdx.x + blockIdx.x * blockDim.x) / warpSize;\nif (i_ptcl_id < particle_number) {\n  const auto lid = lane_id(); // warp\u5185\u306e\u30ec\u30fc\u30f3\u306e\u756a\u53f7\n  const auto qi = q[i_ptcl_id];\n  const auto np = number_of_partners[i_ptcl_id];\n  const auto kp = pointer[i_ptcl_id] + lid;\n  const int32_t ini_loop = (np / warpSize) * warpSize;\n\n  Vec pf = {0.0};\n  if (lid == 0) pf = p[i_ptcl_id];\n  int32_t k = 0;\n  for (; k < ini_loop; k += warpSize) { // warpSize\u3067j\u7c92\u5b50\u306e\u30eb\u30fc\u30d7\u3092\u30a2\u30f3\u30ed\u30fc\u30eb\u3059\u308b\u3002\n    const auto j  = sorted_list[kp + k]; // \u3053\u3053\u306e\u30a2\u30af\u30bb\u30b9\u306fwarp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u9023\u7d9a\u3067\u30b3\u30a2\u30ec\u30b9\u30a2\u30af\u30bb\u30b9\n    const auto dx = q[j].x - qi.x;\n    const auto dy = q[j].y - qi.y;\n    const auto dz = q[j].z - qi.z;\n    const auto r2 = dx * dx + dy * dy + dz * dz;\n    const auto r6 = r2 * r2 * r2;\n    auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n    if (r2 > CL2) df = 0.0;\n    pf.x += df * dx;\n    pf.y += df * dy;\n    pf.z += df * dz;\n  }\n...\n}\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\nconst auto i_ptcl_id = (threadIdx.x + blockIdx.x * blockDim.x) / warpSize;\nif (i_ptcl_id < particle_number) {\n  const auto lid = lane_id();\n  const auto qi = q[i_ptcl_id];\n  const auto np = number_of_partners[i_ptcl_id];\n  const auto kp = pointer[i_ptcl_id] + lid;\n  const int32_t ini_loop = (np / warpSize) * warpSize;\n\n  Vec pf = {0.0};\n  int32_t k = 0;\n  for (; k < ini_loop; k += warpSize) { // warpSize\u3067j\u7c92\u5b50\u306e\u30eb\u30fc\u30d7\u3092\u30a2\u30f3\u30ed\u30fc\u30eb\u3059\u308b\u3002\n    const auto j = sorted_list[kp + k]; // \u3053\u3053\u306e\u30a2\u30af\u30bb\u30b9\u306fwarp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u9023\u7d9a\u3067\u30b3\u30a2\u30ec\u30b9\u30a2\u30af\u30bb\u30b9\n    const auto dx = q[j].x - qi.x;\n    const auto dy = q[j].y - qi.y;\n    const auto dz = q[j].z - qi.z;\n    const auto r2 = dx * dx + dy * dy + dz * dz;\n    if (r2 <= CL2) {\n      const auto r6 = r2 * r2 * r2;\n      const auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n      pf.x += df * dx;\n      pf.y += df * dy;\n      pf.z += df * dz;\n      atomicAdd(&p[j].x, -df * dx);\n      atomicAdd(&p[j].y, -df * dy);\n      atomicAdd(&p[j].z, -df * dz);\n    }\n  }\n...\n}\n\n\nj\u7c92\u5b50\u306e\u30eb\u30fc\u30d7\u3092\u30a2\u30f3\u30ed\u30fc\u30eb\u3057\u3066\u3084\u308b\u3068\u3001sorted_list\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306fwarp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u5fc5\u305a\u9023\u7d9a\u306b\u306a\u308a\u3001\u30ea\u30d7\u30ec\u30a4\u306f\u767a\u751f\u3057\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\u6700\u5f8c\u306bi\u7c92\u5b50\u306b\u304b\u304b\u308b\u529b\u306e\u7dcf\u548c\u3092\u53d6\u3063\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u306fKepler\u4e16\u4ee3\u3067\u5c0e\u5165\u3055\u308c\u305fshuffle\u547d\u4ee4\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n// warp\u518532\u30b9\u30ec\u30c3\u30c9\u304c\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3057\u3066\u3044\u308b\u5024\u3092\u4ea4\u63db\u3057\u3001\u7dcf\u548c\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3002\ntemplate <typename T>                                                           \n__device__ __forceinline__ T warp_segment_reduce(T var) {                       \n  for (int offset = (warpSize >> 1); offset > 0; offset >>= 1) {                \n    var += __shfl_down(var, offset);                                            \n  }                                                                             \n  return var;                                                                   \n}\n\n...\n\n// warp\u5185\u306epf.x\u306e\u5024\u306e\u7dcf\u548c\u3092\u8a08\u7b97\u3059\u308b\u3002\npf.x = warp_segment_reduce(pf.x);\npf.y = warp_segment_reduce(pf.y);\npf.z = warp_segment_reduce(pf.z);\n\n// \u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u3046\u5834\u5408\u306b\u306fatomicAdd\u306b\u7f6e\u304d\u63db\u3048\u308b\u5fc5\u8981\u3042\u308a\u3002\nif (lid == 0) p[i_ptcl_id] += pf;\n\n\u3053\u306e\u5834\u5408\u306e\u5b9f\u884c\u6642\u9593\u3092\u6bd4\u8f03\u3057\u3066\u3084\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nTesla K40t\u3067\u5b9f\u884c\n\u5bc6\u5ea61\u306e\u5834\u5408\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\n0.084759\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\n0.281980\n\n\n\n\u5bc6\u5ea60.5\u306e\u5834\u5408\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\n0.039636\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\n0.115553\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u901f\u304f\u3001\u306a\u304a\u304b\u3064\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u305d\u306e\uff12\u3068\u6bd4\u8f03\u3057\u3066\u500d\u304f\u3089\u3044\u901f\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002atomicAdd\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30b5\u30dd\u30fc\u30c8\u304c\u3055\u308c\u3066\u3044\u306a\u3044\u500d\u7cbe\u5ea6\u306e\u5834\u5408\u3067\u3042\u3063\u3066\u3082\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u3046\u3084\u308a\u65b9\u304c\u901f\u3044\u3067\u3059\u3002\natomicAdd\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30b5\u30dd\u30fc\u30c8\u304c\u3055\u308c\u3066\u3044\u308bPascal\u4e16\u4ee3\u306eGPU\u3067\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3082\nTesla P100\u3067\u5b9f\u884c\n\u5bc6\u5ea61\u306e\u5834\u5408\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\n0.021643\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\n0.080207\n\n\n\n\u5bc6\u5ea60.5\u306e\u5834\u5408\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\n0.019731\n\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\n0.041136\n\n\n\n\u3068\u306a\u308a\u307e\u3059\u3002\u300catomic\u4f7f\u308f\u306a\u3044\u4f5c\u7528\u53cd\u4f5c\u7528\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9\u304c\u3044\u3044\u300d\u3068\u306f\u3082\u3046\u8a00\u3048\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\u3072\u3068\u307e\u305a\u3053\u308c\u307e\u3067\u306e\u30b3\u30fc\u30c9\u3068CPU\u306e\u30b3\u30fc\u30c9\u3068\u3067\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3059\u3002\u6bd4\u8f03\u3059\u308b\u30b3\u30fc\u30c9\u3068\u3057\u3066AVX\u547d\u4ee4\u3067SIMD\u5316+\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d1\u30a4\u30d7\u30e9\u30a4\u30cb\u30f3\u30b0\u3057\u305fkaityo256\u5148\u751f\u306elj_simd\u3092\u7528\u3044\u307e\u3057\u305f\u3002\nCPU\u306f\u30b7\u30f3\u30b0\u30eb\u30b3\u30a2\u3067\u306e\u5b9f\u884c\u306b\u306a\u308a\u307e\u3059\u3002\u7c92\u5b50\u5bc6\u5ea6\u306f1\u3067\u7c92\u5b50\u6570\u306f10\u4e07\u3067\u3059\u3002\n(avx\u3068\u66f8\u3044\u3066\u3044\u308b\u306e\u304clj_simd\u306e\u6700\u901f\u30b3\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u305f\u3068\u304d\u3067\u3001\u305d\u308c\u4ee5\u5916\u306fGPU\u3067\u5b9f\u884c\u3057\u305f\u3068\u304d\u306e\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002)\nTesla K40t\u3068Xeon E5-2680 v3\n\nTesla P100\u3068Xeon E5-2680 v3\n\ntuning \u305d\u306e\uff13\u306e\u68d2\u30b0\u30e9\u30d5\u304c\u307b\u3068\u3093\u3069\u898b\u3048\u306a\u3044\u304f\u3089\u3044\u306b\u306a\u308a\u307e\u3057\u305f\u3002Xeon E5-2680 v3 \uff11\u30b3\u30a2\u306b\u5bfe\u3057\u3066\n\nTesla K40t\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306b\u306f35\u500d\u306e\u9ad8\u901f\u5316\n\nTesla P100\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306b\u306f138\u500d\u306e\u9ad8\u901f\u5316\n\n\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u30b9\u30ec\u30c3\u30c9\u4e26\u5217\u3057\u3066NUMA\u6700\u9069\u5316\u3082\u3061\u3083\u3093\u3068\u884c\u3063\u305f\u3068\u3057\u3066\u3001E5-2670 v3\u306f24\u30b3\u30a2\u306a\u306e\u3067\u3001K40t\u30671.5\u500d\u3001P100\u30676\u500d\u304f\u3089\u3044\u306e\u5dee\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u3072\u3068\u307e\u305alj_simd\u306e\u30de\u30eb\u30c1\u30b3\u30a2\u5bfe\u5fdc\u3084\u3063\u3066\u307f\u3066\u3082\u3046\u5c11\u3057\u771f\u9762\u76ee\u306a\u6bd4\u8f03\u3092\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\uff09\nP100\u3068K40t\u30674\u500d\u9055\u3046\u306e\u306fatomicAdd\u304c\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3068\u3001\u30d0\u30f3\u30c9\u5e45\u306e\u9055\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u306a\u305cj\u7c92\u5b50\u30eb\u30fc\u30d7\u30a2\u30f3\u30ed\u30fc\u30eb+\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\u304c\u6700\u3082\u901f\u3044\u306e\u304b\u3001\u79c1\u6c17\u306b\u306a\u308a\u307e\u3059\u3002\nPascal\u306f\u3068\u3082\u304b\u304f\u3001Kepler\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u3082\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\u306e\u307b\u3046\u304c\u901f\u3044\u3068\u3044\u3046\u306e\u306f\u7d50\u69cb\u9a5a\u304d\u3067\u3057\u305f\uff08\u6700\u521d\u6e2c\u5b9a\u30df\u30b9\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\uff09\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u73fe\u5728\u8abf\u67fb\u4e2d\u3067\u3059\u3002\n\n\u307e\u3068\u3081\nLJ\u529b\u8a08\u7b97\u306b\u9650\u3063\u3066\u8a00\u3048\u3070\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u7121\u8996\u3059\u308b\u5229\u70b9\u306f\u7121\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u307f\u305f\u3044\u3067\u3059\u3002Tesla P100\u306e\u7d50\u679c\u3092\u307f\u308b\u9650\u308a\u3001\u3082\u306e\u3059\u3054\u304f\u30ca\u30a4\u30fc\u30d6\u306b\u5b9f\u88c5\u3057\u305f\u3068\u3057\u3066\u3082\u666e\u901a\u306batomicAdd\u4f7f\u3046\u307b\u3046\u304c\u9ad8\u901f\u306b\u8a08\u7b97\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059(\u5358\u7cbe\u5ea6\u3001\u500d\u7cbe\u5ea6\u554f\u308f\u305a)\u3002\u3061\u3083\u3093\u3068\u5b9f\u88c5\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002\n\n\u8ffd\u8a18 (2016/1/26)\nOpenMP\u306b\u3088\u308b\u30b9\u30ec\u30c3\u30c9\u4e26\u5217\uff0bAVX\u547d\u4ee4\u3092\u7528\u3044\u305fSIMD\u5316\u3057\u305f\u3082\u306e\u3092\u4f5c\u6210\u3057\u3066\u3001GPU\u3068\u306e\u6027\u80fd\u6bd4\u8f03\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9\u3092\u63a1\u7528\u3057\u307e\u3057\u305f(#pragma omp atomic\u304c\u30b9\u30ab\u30e9\u30fc\u5909\u6570\u306b\u3064\u3044\u3066\u3057\u304b\u4f7f\u3048\u306a\u3044\u306e\u3068\u3001#pragma omp critical\u304c\u975e\u5e38\u306b\u9045\u304f\u3066\u4f7f\u3044\u7269\u306b\u306a\u3089\u306a\u304b\u3063\u305f\u305f\u3081\u3067\u3059)\u3002\n\u5b9f\u884c\u74b0\u5883 Intel(R) Xeon(R) CPU E5-2640 v4 @ 2.40GHz 10\u30b3\u30a2 x 2\u30bd\u30b1\u30c3\u30c8\n\u5b9f\u884c\u6642\u9593 0.296805 [s]\n\uff08\u30b9\u30ec\u30c3\u30c9\u4e26\u5217\u305b\u305a\u306b\uff11\u30b3\u30a2\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306e\u5b9f\u884c\u6642\u9593\u306f4.209338 [sec])\n\u6700\u5f8c\u306bGPU CPU\u306e\u5b9f\u884c\u6642\u9593\u3092\u5168\u3066\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u3001\n\u5bc6\u5ea61\u306e\u5834\u5408\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\nCPU\u306e\u5b9f\u884c\u6642\u9593\u304b\u3089\u306e\u9ad8\u901f\u5316\u5ea6\u5408\u3044\n\n\n\n\nTesla P100\n0.021643\n14\u500d\n\n\nTesla K40t\n0.084759\n3.5\u500d\n\n\nE5-2640 v4\n0.296805\n1\u500d\n\n\n\n\u5bc6\u5ea60.5\u306e\u5834\u5408\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\nCPU\u306e\u5b9f\u884c\u6642\u9593\u304b\u3089\u306e\u9ad8\u901f\u5316\u5ea6\u5408\u3044\n\n\n\n\nTesla P100\n0.019731\n4.8\u500d\n\n\nTesla K40t\n0.039636\n2.4\u500d\n\n\nE5-2640 v4\n0.094636\n1\u500d\n\n\n\nGPU\u3067\u3084\u308b\u3068100\u500d\u9ad8\u901f\u5316\u3055\u308c\u308b\u3068\u3044\u3046\u306e\u306f\u3055\u3059\u304c\u306b\u5e7b\u60f3\u3067\u3059\u304c\u3001CPU\u3068GPU\u3092\u3081\u3044\u3044\u3063\u3071\u3044\u9ad8\u901f\u5316\u3057\u305f\u4e0a\u3067\u6bd4\u8f03\u3059\u308b\u3068\u30015 ~ 10\u500d\u304f\u3089\u3044GPU\u306e\u307b\u3046\u304c\u306f\u3084\u305d\u3046\u3067\u3059\u3002\n\u5404CPU\u3001GPU\u306e\u7406\u8ad6\u6f14\u7b97\u6027\u80fd\u3001\u30e1\u30e2\u30ea\u30d0\u30f3\u30c9\u5e45\u3001B/F\u5024\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u307f\u308b\u3068\u3001\n\u7406\u8ad6\u6f14\u7b97\u6027\u80fd\n\n\n\n\nGFLOPS\nGB/s\nB/F\u5024\nF/B (B/F\u5024\u306e\u9006\u6570)\n\n\n\n\nTesla P100\n4036\n720\n0.18\n5.7\n\n\nTesla K40t\n1430\n288\n0.20\n5.0\n\n\nE5-2640 v4\n768\n136.6\n0.18\n5.6\n\n\n\n\u4eca\u56de\u306eLJ\u529b\u8a08\u7b97\u306e\u6f14\u7b97\u5f37\u5ea6\u3092\u8003\u3048\u3066\u307f\u308b\u3068\n\n\u6e1b\u7b973\u56de \uff08\u5909\u4f4d\u30d9\u30af\u30c8\u30eb\u8a08\u7b97\uff09\u3000drij=ri\u2212rjdr_{ij} = r_{i} - r_{j}\n\u4e57\u7b973\u56de + \u8db3\u7b972\u56de \uff08\u8ddd\u96e2\u8a08\u7b97\uff09 dr2ijdr^{2}_{ij}\n\u4e57\u7b972\u56de (dr6dr^{6}\u306e\u8a08\u7b97)\n\u4e57\u7b972\u56de (dr14dr^{14}\u306e\u8a08\u7b97)\n\u4e57\u7b971\u56de + \u6e1b\u7b971\u56de (\u529b\u306e\u5206\u6bcd\u8a08\u7b97) 24\u2217dr6ij\u22124824 * dr^{6}_{ij} - 48\n\u9664\u7b971\u56de dr14dr^{14}\u3068\u306e\u5272\u308a\u7b97\n\u4e57\u7b971\u56de \u529b\u7a4d\u306e\u30ce\u30eb\u30e0\u8a08\u7b97 df\u2217dtdf * dt\n\u4e57\u7b973\u56de + \u52a0\u7b973\u56de (\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u3046\u5834\u5408\u306b\u306f\u3053\u306e2\u500d\u306e\u8a08\u7b97) \u529b\u7a4d\u8a08\u7b97 df\u2217drijdf * dr_{ij}\n\n\u9664\u7b97\u309210FLOP\u3068\u3057\u3066\u8003\u3048\u305f\u6642\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u8003\u616e\u3057\u305f\u3068\u304d\u300137FLOP\u3067\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\u306734FLOP\u306b\u306a\u308b\u3002\n\u4e00\u65b9\u3067\u3001\u3053\u308c\u3089\u306e\u8a08\u7b97\u3092\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u306f(i\u7c92\u5b50\u306e\u5ea7\u6a19\u30c7\u30fc\u30bf\u3068\u904b\u52d5\u91cf\u30c7\u30fc\u30bf\u306f\u30ec\u30b8\u30b9\u30bf\u306b\u306e\u3063\u3066\u3044\u308b\u3068\u3057\u3066\u3001)\n* \u5ea7\u6a19\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9 3 (4) * 8 Byte = 24 (32) Byte\n* \u904b\u52d5\u91cf\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9 2 * 3 (4) * 8 Byte = 48 (64) Byte\n\u3068\u306a\u308b\u3002\uff08\u304b\u3063\u3053\u306fAVX\u306e_mm256_loadu_pd\u3068\u304b\u3092\u4f7f\u3063\u3066\u5ea7\u6a19\u3092\u4e00\u767a\u3067\u30ed\u30fc\u30c9\u3059\u308b\u5834\u5408\u306b\u3001\uff11\u6210\u5206\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u305f\u3081\u3001\u305d\u308c\u3092\u8003\u616e\u3057\u3066\u3044\u308b\u3002\uff09\u306a\u304a\u3001\u904b\u52d5\u91cf\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u306f\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u7121\u8996\u3059\u308b\u5834\u5408\u306b\u306f\u5165\u3089\u306a\u3044\u3002\n\u3088\u3063\u3066\u6f14\u7b97\u5f37\u5ea6\u306f\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u7121\u8996\u3057\u306a\u3044\u5834\u5408 37 FLOP / 72 (96) Byte ~ 0.51 (0.38)\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u7121\u8996\u3059\u308b\u5834\u5408 34 FLOP / 24 (32) Byte ~ 1.4 (1.1) \n\n\u306b\u306a\u308b\u3002\u30eb\u30fc\u30d5\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u3067\u8003\u3048\u308b\u3068\u3001\uff08\u30ed\u30fc\u30c9\u3059\u308bj\u7c92\u5b50\u306e\u30c7\u30fc\u30bf\u304c\u5168\u304f\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4e57\u3063\u3066\u3044\u306a\u3044\u3068\u4eee\u5b9a\u3059\u308b\u306e\u3067\u3042\u308c\u3070\uff09\u3001\u30e1\u30e2\u30ea\u30d0\u30f3\u30c9\u5e45\u5f8b\u901f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306a\u308a\u3001\u30d0\u30f3\u30c9\u5e45\u3067\u6027\u80fd\u304c\u6c7a\u307e\u308b\u3002\u305d\u3046\u3059\u308b\u3068\u3001\u4e8c\u3064\u306eGPU\u3067\u5b9f\u884c\u3057\u305f\u6642\u306e\u5b9f\u884c\u6642\u9593\u306e\u9055\u3044\u306f\u5927\u307e\u304b\u306b\u306f\u30d0\u30f3\u30c9\u5e45\u306e\u9055\u3044\u3068\u306a\u3063\u3066\u8868\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3001\u78ba\u304b\u306b\u305d\u3046\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u8ffd\u8a18 (2016/1/27)\n\u8ffd\u8a181/26\u306e\u8003\u5bdf\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u601d\u3048\u3066\u304d\u305f\u3002Tesla P100\u306e\u6027\u80fd\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306f\u5225\u306b\u3042\u308b\u6c17\u304c\u3057\u3066\u304d\u305f\u3002\n\u6700\u901f\u30ab\u30fc\u30cd\u30eb\u306e\u5b9f\u884c\u6642\u9593\u3092\u3088\u304f\u8abf\u3079\u3066\u307f\u308b\u3068\u3001double\u3068float\u3067\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u3002\nTesla P100\u3067\u5b9f\u884c\n\u5bc6\u5ea6\uff11\u306e\u6642\n\n\n\n\n\u5b9f\u884c\u6642\u9593 [s]\n\n\n\n\nfloat\n0.021128\n\n\ndouble\n0.021668\n\n\n\n\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u304cGPU\u3067\u306e\u8a08\u7b97\u4ee5\u5916\u306b\u3042\u308b\u6c17\u304c\u3057\u3066\u304d\u3066\u3001\u3082\u3046\u5c11\u3057\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\n\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u304cCPU<->GPU\u306e\u30c7\u30fc\u30bf\u8ee2\u9001\u306b\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\n\u4eca\u56de\u901a\u4fe1\u8fbc\u307f\u3067\u5b9f\u884c\u6642\u9593\u3092\u8a08\u7b97\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u901a\u4fe1\u306e\u6642\u9593\u3092\u898b\u7a4d\u3082\u3063\u3066\u307f\u305f\u3002\n\u30c7\u30fc\u30bf\u8ee2\u9001\u306e\u6642\u9593\u3092nvvp\u3067\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\u901a\u4fe1\u306e\u6642\u9593\u306e\u5408\u8a08\u304c0.018s\u3050\u3089\u3044\u306f\u3042\u3063\u3066\u3001\u5b9f\u969b\u306e\u8a08\u7b97\u304c0.003s\u3050\u3089\u3044\u3060\u3068\u5206\u304b\u3063\u305f\u3002\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u306e\u30c7\u30fc\u30bf\u304c96MB\u3082\u3042\u308b\u305f\u3081\u3001\u8ee2\u9001\u306b\u76f8\u5f53\u6642\u9593\u304c\u304b\u304b\u308b\u3088\u3046\u3060\u3002\n\u305d\u3046\u3059\u308b\u3068\u3001\u5b9f\u969b\u306bGPU\u3067\u8a08\u7b97\u3057\u3066\u3044\u308b\u6642\u9593\u3067\u6bd4\u8f03\u3059\u308c\u3070\u3001E5-2640 v4\u306e\u30de\u30eb\u30c1\u30b3\u30a2\u5b9f\u884c\u306b\u6bd4\u3079\u3066100\u500d\u3050\u3089\u3044\u9ad8\u901f\u5316\u3055\u308c\u3066\u3044\u308b\u3002\u304b\u306a\u308a\u7406\u60f3\u7684\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u30d2\u30c3\u30c8\u3057\u3066\u3044\u308b\u304b\u3089\u3053\u3053\u307e\u3067\u9055\u3044\u304c\u3067\u308b\u3068\u601d\u308f\u308c\u308b\u3002\nmetric\u3092nvprof\u3067\u3068\u3063\u3066\u307f\u308b\u3068\u3001cache hit rate\u306f80%\u3050\u3089\u3044\u3060\u3063\u305f\u3002\n\u3067\u3082CPU\u3082\u3001\u7c92\u5b50\u30c7\u30fc\u30bf\u304c\u9ad8\u30055MB\u304f\u3089\u3044\u3060\u304b\u3089\u3001\u307b\u3068\u3093\u3069\u306e\u30c7\u30fc\u30bf\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4e57\u3063\u3066\u3044\u308b\u3068\u8003\u3048\u3066\u3044\u3044\u3088\u3046\u306a\u3002\u306a\u305c\u3053\u3053\u307e\u3067\u5dee\u304c\u51fa\u308b\u306e\u304b\uff1f\n#\u306f\u3058\u3081\u306b\n\n(2016/1/27\u8ffd\u8a18)\n\u81f4\u547d\u7684\u306a\u9593\u9055\u3044\u3092\u304a\u304b\u3057\u3066\u304a\u308a\u3001\u3053\u306e\u8a18\u4e8b\u306e\u7d50\u679c\u304c\u5909\u308f\u308a\u307e\u3057\u305f\u3002\u7d50\u5c40\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3068\u30ae\u30ea\u30ae\u30ea\u3067\u4f5c\u7528\u53cd\u4f5c\u7528\u4f7f\u308f\u306a\u3044\u307b\u3046\u304c\u9ad8\u901f\u5316\u3055\u308c\u307e\u3057\u305f\u3002\u5f8c\u65e5\u4fee\u6b63\u3057\u305f\u8a18\u4e8b\u3092\u66f8\u304f\u4e88\u5b9a\u3067\u3059\u3002\n\n\n\n\u3053\u308c\u307e\u3067LJ\u529b\u8a08\u7b97\u306eGPGPU\u5316\u3067\u306f\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u7121\u8996\u3057\u3066\u3001atomic\u3092\u4f7f\u308f\u306a\u3044\u3067\u3084\u308b\u306e\u304c\u6700\u901f\u3068\u81ea\u5206\u306f\u601d\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u904e\u53bb\u306e\u6587\u732e\u3092\u8abf\u3079\u3066\u307f\u3066\u3082\uff08\u304b\u306a\u308a\u524d\u306e\u8ad6\u6587\u3067\u3059\u304c\uff09[\u3053\u306e\u8ad6\u6587](http://www.sciencedirect.com/science/article/pii/S0021999108000818)\u3067\u306f\n\n```\nIf such features (atomic\u306e\u3053\u3068) did exist, the increment of Fk (j\u7c92\u5b50\u306e\u529b) inside the inner\nloop still requires a scattered memory access pattern which would slow performance significantly.\n```\n\n\u3068\u3001\u300cj\u7c92\u5b50\u3078\u306e\u529b\u306e\u66f8\u304d\u623b\u3057\u306f\u66f8\u304d\u8fbc\u307f\u30d1\u30bf\u30fc\u30f3\u304c\u4e0d\u9023\u7d9a\u306b\u306a\u308b\u306e\u3067\u3001\u4eee\u306batomic\u3042\u3063\u305f\u3068\u3057\u3066\u3082\u6027\u80fd\u51fa\u306a\u3044\u3068\u601d\u3046\u3088\u3002\u300d\u3068\u8a00\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u3053\u306e\u8ad6\u6587\u51fa\u305f\u3053\u308d\u306f\u307e\u3060\u6d6e\u52d5\u5c0f\u6570\u70b9\u306eatomicAdd\u306f\u3042\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\uff09\n\n\u305d\u306e\u3042\u3068\u306b\u51fa\u3066\u304d\u305f[\u6563\u9038\u7c92\u5b50\u52d5\u529b\u5b66\u6cd5\u306eGPGPU\u5316\u306e\u8ad6\u6587](http://www.sciencedirect.com/science/article/pii/S0021999111003329)\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u4e00\u751f\u61f8\u547d\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u3067\u8a08\u7b97\u3059\u308b\u65b9\u6cd5\u304c\u63d0\u6848\u3055\u308c\u3066\u3044\u307e\u3059\u3002\uff08\u6563\u9038\u7c92\u5b50\u52d5\u529b\u5b66\u306e\u8aac\u660e\u306f\u3057\u306a\u3044\u3067\u3059\u304c\u3001\u30e9\u30f3\u30c0\u30e0\u529b\u3092\u7c92\u5b50\b\u5bfe\u306b\u3064\u3044\u3066\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u6e80\u305f\u3059\u3088\u3046\u306b\u4e0e\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\u3067\u8a08\u7b97\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u975e\u5e38\u306b\u8907\u96d1\u306a\u624b\u7d9a\u304d\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001GPGPU\u5316\u3001MPI\u5316\u304c\u96e3\u3057\u3044\u3068\u3055\u308c\u3066\u304d\u307e\u3057\u305f\u3002\uff09\n\n\u9752\u6728\u5148\u751f\u3089\u306e[\u8b1b\u7fa9\u8cc7\u6599\u3067\u3082](https://www.google.co.jp/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=0ahUKEwiRjJnbs9rRAhVBHpQKHY7oD8MQFggtMAM&url=http%3A%2F%2Fwww.ocw.titech.ac.jp%2Findex.php%3Fmodule%3DGeneral%26action%3DDownLoad%26file%3D20131226717065-476-0-35.pdf%26type%3Dcal%26JWC%3D20131226717065&usg=AFQjCNHP4FntsYNeThFgaMWsvaPo1kg_Tw&sig2=CU2x3GxNveATJZiUSspuQg)\u4f7f\u7528\u306f\u6700\u5c11\u9650\u306b\u3068\u3069\u3081\u308b\u3079\u304d\u3068\u3042\u308a\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001GPU\u306f\u5909\u5316\u3057\u7d9a\u3051\u3066\u3044\u307e\u3059\u3002\u73fe\u5728\u306eGPU\u3067\u3082LJ\u529b\u8a08\u7b97\u3092\u884c\u3046\u969b\u306b\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u306e\u304c\u672c\u5f53\u306b\u30d9\u30b9\u30c8\u306a\u306e\u304b\u3069\u3046\u304b\u306f\u6b63\u76f4\u4e0d\u660e\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u3046\u5834\u5408\u3068\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u3068\u3067\u6027\u80fd\u304c\u3069\u306e\u7a0b\u5ea6\u9055\u3063\u3066\u304f\u308b\u306e\u304b\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4ee5\u4e0b\u300c\u5b9f\u884c\u6642\u9593\u300d\u3068\u66f8\u3044\u305f\u3068\u304d\u306f\n1. GPU<->CPU\u306e\u8ee2\u9001\u306e\u6642\u9593\u8fbc\u307f\u3002\n2. \u95a2\u6570\u3092100\u56de\u7d9a\u3051\u3066\u5b9f\u884c\u3055\u305b\u3066\u3001\u5b9f\u884c\u6642\u9593\u306e\u7dcf\u548c\u3092\u3068\u3063\u305f\u3082\u306e\u3002\n\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://github.com/kohnakagawa/lj_gpu)\u306b\u3042\u308a\u307e\u3059\u3002\n\n#LJ\u529b\u8a08\u7b97\u306eGPGPU\u5316\n\u7c21\u5358\u306bCPU\u306e\u30b3\u30fc\u30c9\u3092\u4f8b\u306b\u3068\u3063\u3066LJ\u529b\u8a08\u7b97\u306e\u51e6\u7406\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n```c++:ref.cpp\nvoid force_cpu_ref(void){\n  const int pn =particle_number;\n  for (int i=0; i<pn; i++) { // \u3059\u3079\u3066\u306e\u7c92\u5b50\u306b\u3064\u3044\u3066\n    const double qx_key = q[i][X];\n    const double qy_key = q[i][Y];\n    const double qz_key = q[i][Z];\n    const int np = number_of_partners[i]; // i\u7c92\u5b50\u306e\u5468\u308a\u306b\u3044\u308b\u7c92\u5b50\u306e\u6570\n    const int kp = pointer[i];\n    for (int k=0; k<np; k++) { // i\u7c92\u5b50\u306e\u5468\u308a\u306b\u3044\u308b\u3059\u3079\u3066\u306ej\u7c92\u5b50\u306b\u3064\u3044\u3066\n      const int j = sorted_list[kp + k];\n      double dx = q[j][X] - qx_key;\n      double dy = q[j][Y] - qy_key;\n      double dz = q[j][Z] - qz_key;\n      double r2 = (dx*dx + dy*dy + dz*dz); // \u8ddd\u96e2\u3092\u8a08\u7b97\u3057\n      if (r2 > CL2) continue; // cutoff \u8ddd\u96e2\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u4ee5\u964d\u306e\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7\n      double r6 = r2*r2*r2;\n      double df = ((24.0*r6-48.0)/(r6*r6*r2))*dt;\n      p[i][X] += df*dx; // \u4f5c\u7528\u53cd\u4f5c\u7528\u306e\u6cd5\u5247\u3092\u4f7f\u3044\u3001\u8a08\u7b97\u3057\u305f\u529b\u3092\u305f\u3057\u3053\u3080\u3002\n      p[i][Y] += df*dy;\n      p[i][Z] += df*dz;\n      p[j][X] -= df*dx;\n      p[j][Y] -= df*dy;\n      p[j][Z] -= df*dz;\n    }\n  }\n}\n```\n\n\u4e8c\u91cd\u30eb\u30fc\u30d7\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u4e26\u5217\u306b\u51e6\u7406\u3067\u304d\u308b\u7b87\u6240\u304c\u4e8c\u3064\u3042\u308a\u307e\u3059\u3002 \n\n\u3053\u306e\u95a2\u6570\u306eGPGPU\u5316\u3067\u3088\u304f\u3084\u3089\u308c\u308b\u306e\u306fi\u7c92\u5b50\u306e\u6570\u3060\u3051GPU\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u52d5\u3055\u305b\u3066\u4e26\u5217\u51e6\u7406\u3059\u308b\u3084\u308a\u304b\u305f\u3060\u3068\u601d\u3044\u307e\u3059\u3002\u30ca\u30a4\u30fc\u30d6\u306a\u5b9f\u88c5\u3067\u3059\u304catomicAdd\u3092\u7528\u3044\u3066\n\n```cuda:\u4f5c\u7528\u53cd\u4f5c\u7528\u4f7f\u3046\nconst auto tid = threadIdx.x + blockIdx.x * blockDim.x; // \u30b9\u30ec\u30c3\u30c9\u304ci\u7c92\u5b50\u4e00\u3064\u306b\u5bfe\u5fdc\u3059\u308b\u3002\nif (tid < particle_number) {\n  const auto qi = q[tid];\n  const auto np = number_of_partners[tid];\n  const auto kp = pointer[tid];\n\n  for (int32_t k = 0; k < np; k++) { // i\u7c92\u5b50\u306e\u5468\u308a\u306b\u3044\u308bj\u7c92\u5b50\u306b\u3064\u3044\u3066\u306e\u30eb\u30fc\u30d7\n    const auto j = sorted_list[kp + k];\n    const auto dx = q[j].x - qi.x;\n    const auto dy = q[j].y - qi.y;\n    const auto dz = q[j].z - qi.z;\n    const auto r2 = dx * dx + dy * dy + dz * dz;\n    if (r2 > CL2) continue;\n    const auto r6 = r2 * r2 * r2;\n    const auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n    atomicAdd(&p[tid].x, df * dx);\n    atomicAdd(&p[tid].y, df * dy);\n    atomicAdd(&p[tid].z, df * dz);\n    atomicAdd(&p[j].x, -df * dx);\n    atomicAdd(&p[j].y, -df * dy);\n    atomicAdd(&p[j].z, -df * dz);\n  }\n}\n```\n\n\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9\u306e\u5834\u5408\u306b\u306f\u3001j\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u306e\u66f8\u304d\u623b\u3057\u304c\u767a\u751f\u3057\u306a\u3044\u305f\u3081\u3001atomicAdd\u304c\u306a\u304f\u306a\u308a\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cuda:\u4f5c\u7528\u53cd\u4f5c\u7528\u4f7f\u308f\u306a\u3044\nconst auto tid = threadIdx.x + blockIdx.x * blockDim.x; // i\u7c92\u5b50\u4e00\u3064\u306b\u5bfe\u5fdc\u3059\u308b\u3002\nif (tid < particle_number) {\n  const auto qi = q[tid];\n  const auto np = number_of_partners[tid];\n  const auto kp = pointer[tid];\n\n  for (int32_t k = 0; k < np; k++) { // i\u7c92\u5b50\u306e\u5468\u308a\u306b\u3044\u308bj\u7c92\u5b50\u306b\u3064\u3044\u3066\u306e\u30eb\u30fc\u30d7\n    const auto j = sorted_list[kp + k];\n    const auto dx = q[j].x - qi.x;\n    const auto dy = q[j].y - qi.y;\n    const auto dz = q[j].z - qi.z;\n    const auto r2 = dx * dx + dy * dy + dz * dz;\n    if (r2 > CL2) continue;\n    const auto r6 = r2 * r2 * r2;\n    const auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n    p[tid].x += df * dx;\n    p[tid].y += df * dy;\n    p[tid].z += df * dz;\n  }                                                                           \n}\n```\n\n\u5358\u7cbe\u5ea6\u306e\u5834\u5408\u3068\u500d\u7cbe\u5ea6\u306e\u5834\u5408\u3067\u4e0a\u8a18\u4e8c\u3064\u306e\u95a2\u6570\u306e\u5b9f\u884c\u6642\u9593\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nGPU: Tesla K40t\n\u7c92\u5b50\u6570:10\u4e07\n\u5bc6\u5ea6: 1\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a (\u5358\u7cbe\u5ea6)|0.885239|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057 (\u5358\u7cbe\u5ea6)|1.361835|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a (\u500d\u7cbe\u5ea6)|2.450472|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057 (\u500d\u7cbe\u5ea6)|1.996499|\n\n\u5bc6\u5ea6\u304c0.5\u3067\u7c92\u5b50\u6570\u304c62500\u306e\u6642\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a (\u5358\u7cbe\u5ea6)|0.224812|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057 (\u5358\u7cbe\u5ea6)|0.379074|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a (\u500d\u7cbe\u5ea6)|0.696441|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057 (\u500d\u7cbe\u5ea6)|0.548830|\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u306e\u6cd5\u5247\u3092\u4f7f\u308f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u8a08\u7b97\u91cf\u304c\u500d\u306b\u306a\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u500d\u7cbe\u5ea6\u306e\u5834\u5408\u3001\b\u8a08\u7b97\u91cf\u304c\u500d\u306b\u306a\u3063\u305f\u3068\u3057\u3066\u3082\u4f5c\u7528\u53cd\u4f5c\u7528\u306e\u6cd5\u5247\u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9(atomicAdd\u3092\u4f7f\u308f\u306a\u3044)\u306e\u307b\u3046\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\u3002\u4e00\u65b9\u3067\u5358\u7cbe\u5ea6\u306e\u5834\u5408\u306b\u306fatomicAdd\u304c\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u3066\u3001atomicAdd\u3092\u4f7f\u3046\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u305d\u308c\u306a\u308a\u306b\u5c0f\u3055\u304f\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u306e\u6cd5\u5247\u3092\u4f7f\u308f\u306a\u3044\u3067\u8a08\u7b97\u91cf\u3092\u524a\u6e1b\u3059\u308b\u307b\u3046\u304c\u6709\u5229\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u3001\u3042\u307e\u308a\u306b\u30ca\u30a4\u30fc\u30d6\u306a\u5b9f\u88c5\u3067\u306e\u6bd4\u8f03\u3067\u3059\u306e\u3067\u3001\u3053\u3053\u304b\u3089\u4e8c\u3064\u306e\u30ab\u30fc\u30cd\u30eb\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3066\u3044\u304d\u306a\u304c\u3089\u518d\u5ea6\u6bd4\u8f03\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n#\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u305d\u306e\uff11\u3000i\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u66f8\u304d\u623b\u3057\u56de\u6570\u3092\u524a\u6e1b\n\u307e\u305a\u6c17\u306b\u306a\u308b\u306e\u306fi\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u306e\u66f8\u304d\u623b\u3057\u3092\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u7e70\u308a\u8fd4\u3057\u884c\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u306f\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3057\u3066\u304a\u3044\u3066j\u7c92\u5b50\u306e\u30eb\u30fc\u30d7\u304c\u7d42\u308f\u3063\u3066\u4e00\u56de\u3060\u3051\u30b0\u30ed\u30fc\u30d0\u30eb\u30e1\u30e2\u30ea\u306b\u66f8\u304d\u623b\u3059\u3068\u3044\u3046\u3088\u3046\u306b\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n\n```cuda:\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\nif (tid < particle_number) {\n  const auto qi = q[tid];\n  const auto np = number_of_partners[tid];\n  const auto kp = pointer[tid];\n\n  Dtype pfx = 0.0, pfy = 0.0, pfz = 0.0; // i\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u306e\u7dcf\u548c\u3092\u30ec\u30b8\u30b9\u30bf\u306b\u7f6e\u3044\u3066\u304a\u304f\u3002\n  for (int32_t k = 0; k < np; k++) {\n    const auto j = sorted_list[kp + k];\n    const auto dx = q[j].x - qi.x;\n    const auto dy = q[j].y - qi.y;\n    const auto dz = q[j].z - qi.z;\n    const auto r2 = dx * dx + dy * dy + dz * dz;\n    const auto r6 = r2 * r2 * r2;\n    auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n    if (r2 > CL2) df = 0.0;\n    pfx += df * dx;\n    pfy += df * dy;\n    pfz += df * dz;\n  }\n  p[tid].x += pfx; // \u6700\u5f8c\u306b\u4e00\u5ea6\u3060\u3051\u66f8\u304d\u8fbc\u307f\u3092\u884c\u3046\u3002\n  p[tid].y += pfy;\n  p[tid].z += pfz;\n}\n```\n\n```cuda:\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\nconst auto tid = threadIdx.x + blockIdx.x * blockDim.x;\nif (tid < particle_number) {\n  const auto qi = q[tid];\n  const auto np = number_of_partners[tid];\n  const auto kp = pointer[tid];\n\n  Dtype pfx = 0.0, pfy = 0.0, pfz = 0.0; // i\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u306e\u7dcf\u548c\u3092\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3057\u3066\u304a\u304f\u3002\n    for (int32_t k = 0; k < np; k++) {\n      const auto j = sorted_list[kp + k];\n      const auto dx = q[j].x - qi.x;\n      const auto dy = q[j].y - qi.y;\n      const auto dz = q[j].z - qi.z;\n      const auto r2 = dx * dx + dy * dy + dz * dz;\n      if (r2 > CL2) continue;\n      const auto r6 = r2 * r2 * r2;\n      const auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n      pfx += df * dx;\n      pfy += df * dy;\n      pfz += df * dz;\n      atomicAdd(&p[j].x, -df * dx);\n      atomicAdd(&p[j].y, -df * dy);\n      atomicAdd(&p[j].z, -df * dz);\n    }\n    atomicAdd(&p[tid].x, pfx); // \u6700\u5f8c\u306b\u4e00\u5ea6\u3060\u3051\u66f8\u304d\u623b\u3057\u3092\u884c\u3046\u3002\n    atomicAdd(&p[tid].y, pfy);\n    atomicAdd(&p[tid].z, pfz);\n  }\n```\n\n\u3053\u308c\u3067\u3082\u500d\u7cbe\u5ea6\u306e\u5834\u5408\u3092\u307f\u3066\u307f\u308b\u3068\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9\u306e\u307b\u3046\u304c\u901f\u3044\u3067\u3059\u3002\n\nGPU: Tesla K40t\n\u5bc6\u5ea61\u306e\u6642\n\n| | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a|1.345667|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057|1.189371|\n\n\u5bc6\u5ea60.5\u306e\u6642\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a|0.351067|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057|0.315363|\n\n#\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u305d\u306e\uff12\u3000\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u306e\u30c7\u30fc\u30bf\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u5909\u66f4\n\u3055\u3089\u306b\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u9032\u3081\u3066\u307f\u307e\u3059\u3002\n\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u3092\u30e1\u30e2\u30ea\u304b\u3089\u3068\u3063\u3066\u304f\u308b\u3068\u304d\u3001warp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u30d0\u30e9\u30d0\u30e9\u306e\u30a2\u30c9\u30ec\u30b9\u304b\u3089\u3068\u3063\u3066\u304f\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u30b3\u30a2\u30ec\u30b9\u30a2\u30af\u30bb\u30b9\u306b\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u8a72\u5f53\u7b87\u6240\u306e\u30b3\u30fc\u30c9\u3092\u629c\u7c8b\u3059\u308b\u3068\u3001\n\n```cuda:\n...\n  const auto qi = q[tid];\n  const auto np = number_of_partners[tid];\n  const auto kp = pointer[tid];\n  Dtype pfx = 0.0, pfy = 0.0, pfz = 0.0;\n  for (int32_t k = 0; k < np; k++) { //j\u7c92\u5b50\u306b\u3064\u3044\u3066\u30eb\u30fc\u30d7\n    const auto j = sorted_list[kp + k]; // warp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u9023\u7d9a\u3057\u305f\u30e1\u30e2\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u308f\u3051\u3067\u306f\u306a\u3044\uff01\n...\n```\n\n\u3067\u3059\u3002\u30b3\u30e1\u30f3\u30c8\u3067\u793a\u3057\u305fsorted_list\u3068\u3044\u3046\u914d\u5217\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306fwarp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u9023\u7d9a\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u3001sorted_list\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u5909\u66f4\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3069\u306e\u3088\u3046\u306b\u5909\u66f4\u3059\u308b\u306e\u304b\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u56f3\u3067\u793a\u3059\u3068\u3001\u5909\u66f4\u524d\u306f\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/120342/12aa4de7-ca86-e02b-5523-516aa0bf5640.png)\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/120342/37a29a44-93cd-41f7-deb2-cfff228ff370.png)\n\n\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\u30b3\u30a2\u30ec\u30b9\u30a2\u30af\u30bb\u30b9\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u304c\u591a\u5c11\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u3055\u3048\u30af\u30ea\u30a2\u3059\u308c\u3070\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u7d50\u679c\u306f\n\nGPU: Tesla K40t\n\u5bc6\u5ea61\u306e\u5834\u5408\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a|1.331697|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057|0.236682|\n\n\u5bc6\u5ea60.5\u306e\u5834\u5408\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a|0.361904|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057|0.087883|\n\n\n\u3053\u308c\u3092\u3084\u308b\u3068\u305a\u3044\u3076\u3093\u5dee\u304c\u3064\u3044\u3066\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9\u304c\u30d9\u30b9\u30c8\u306a\u306e\u304b\u306a\u3068\u601d\u3048\u3066\u304d\u307e\u3059\u3002\n\n#\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u305d\u306e3\u3000j\u7c92\u5b50\u30eb\u30fc\u30d7\u3092\u30a2\u30f3\u30ed\u30fc\u30eb\n\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u305d\u306e2\u3067\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u306e\u30c7\u30fc\u30bf\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u5909\u66f4\u3057\u307e\u3057\u305f\u304c\u3001\u3082\u3068\u306eCPU\u30b3\u30fc\u30c9\u3092GPGPU\u79fb\u690d\u3059\u308b\u3055\u3044\u306b\u306f\u3067\u304d\u308b\u3060\u3051\u907f\u3051\u305f\u3044\u3053\u3068\u3067\u3059\u3002\u305d\u3053\u3067\u3001j\u7c92\u5b50\u30eb\u30fc\u30d7\u3092\u30a2\u30f3\u30ed\u30fc\u30eb\u3057\u3066\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u306e\u30c7\u30fc\u30bf\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u5909\u66f4\u305b\u305a\u306b\u3001\u30b3\u30a2\u30ec\u30b9\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f55\u3092\u3084\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001j\u7c92\u5b50\u306e\u30eb\u30fc\u30d7\u309232\u500d\u30a2\u30f3\u30ed\u30fc\u30eb\u3057\u3066\u3084\u308a\u3001\u3055\u3089\u306b\u8d77\u52d5\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u306e\u6570\u309232\u500d\u306b\u5897\u3084\u3057\u3066\u3084\u308a\u307e\u3059\u3002\n\n```cuda:\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\nconst auto i_ptcl_id = (threadIdx.x + blockIdx.x * blockDim.x) / warpSize;\nif (i_ptcl_id < particle_number) {\n  const auto lid = lane_id(); // warp\u5185\u306e\u30ec\u30fc\u30f3\u306e\u756a\u53f7\n  const auto qi = q[i_ptcl_id];\n  const auto np = number_of_partners[i_ptcl_id];\n  const auto kp = pointer[i_ptcl_id] + lid;\n  const int32_t ini_loop = (np / warpSize) * warpSize;\n\n  Vec pf = {0.0};\n  if (lid == 0) pf = p[i_ptcl_id];\n  int32_t k = 0;\n  for (; k < ini_loop; k += warpSize) { // warpSize\u3067j\u7c92\u5b50\u306e\u30eb\u30fc\u30d7\u3092\u30a2\u30f3\u30ed\u30fc\u30eb\u3059\u308b\u3002\n    const auto j  = sorted_list[kp + k]; // \u3053\u3053\u306e\u30a2\u30af\u30bb\u30b9\u306fwarp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u9023\u7d9a\u3067\u30b3\u30a2\u30ec\u30b9\u30a2\u30af\u30bb\u30b9\n    const auto dx = q[j].x - qi.x;\n    const auto dy = q[j].y - qi.y;\n    const auto dz = q[j].z - qi.z;\n    const auto r2 = dx * dx + dy * dy + dz * dz;\n    const auto r6 = r2 * r2 * r2;\n    auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n    if (r2 > CL2) df = 0.0;\n    pf.x += df * dx;\n    pf.y += df * dy;\n    pf.z += df * dz;\n  }\n...\n}\n```\n\n```cuda:\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\nconst auto i_ptcl_id = (threadIdx.x + blockIdx.x * blockDim.x) / warpSize;\nif (i_ptcl_id < particle_number) {\n  const auto lid = lane_id();\n  const auto qi = q[i_ptcl_id];\n  const auto np = number_of_partners[i_ptcl_id];\n  const auto kp = pointer[i_ptcl_id] + lid;\n  const int32_t ini_loop = (np / warpSize) * warpSize;\n\n  Vec pf = {0.0};\n  int32_t k = 0;\n  for (; k < ini_loop; k += warpSize) { // warpSize\u3067j\u7c92\u5b50\u306e\u30eb\u30fc\u30d7\u3092\u30a2\u30f3\u30ed\u30fc\u30eb\u3059\u308b\u3002\n    const auto j = sorted_list[kp + k]; // \u3053\u3053\u306e\u30a2\u30af\u30bb\u30b9\u306fwarp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u9023\u7d9a\u3067\u30b3\u30a2\u30ec\u30b9\u30a2\u30af\u30bb\u30b9\n    const auto dx = q[j].x - qi.x;\n    const auto dy = q[j].y - qi.y;\n    const auto dz = q[j].z - qi.z;\n    const auto r2 = dx * dx + dy * dy + dz * dz;\n    if (r2 <= CL2) {\n      const auto r6 = r2 * r2 * r2;\n      const auto df = ((24.0 * r6 - 48.0) / (r6 * r6 * r2)) * dt;\n      pf.x += df * dx;\n      pf.y += df * dy;\n      pf.z += df * dz;\n      atomicAdd(&p[j].x, -df * dx);\n      atomicAdd(&p[j].y, -df * dy);\n      atomicAdd(&p[j].z, -df * dz);\n    }\n  }\n...\n}\n```\n\nj\u7c92\u5b50\u306e\u30eb\u30fc\u30d7\u3092\u30a2\u30f3\u30ed\u30fc\u30eb\u3057\u3066\u3084\u308b\u3068\u3001sorted_list\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306fwarp\u518532\u30b9\u30ec\u30c3\u30c9\u3067\u5fc5\u305a\u9023\u7d9a\u306b\u306a\u308a\u3001\u30ea\u30d7\u30ec\u30a4\u306f\u767a\u751f\u3057\u306a\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u6700\u5f8c\u306bi\u7c92\u5b50\u306b\u304b\u304b\u308b\u529b\u306e\u7dcf\u548c\u3092\u53d6\u3063\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u306fKepler\u4e16\u4ee3\u3067\u5c0e\u5165\u3055\u308c\u305fshuffle\u547d\u4ee4\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\n```cuda\n// warp\u518532\u30b9\u30ec\u30c3\u30c9\u304c\u30ec\u30b8\u30b9\u30bf\u306b\u4fdd\u6301\u3057\u3066\u3044\u308b\u5024\u3092\u4ea4\u63db\u3057\u3001\u7dcf\u548c\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3002\ntemplate <typename T>                                                           \n__device__ __forceinline__ T warp_segment_reduce(T var) {                       \n  for (int offset = (warpSize >> 1); offset > 0; offset >>= 1) {                \n    var += __shfl_down(var, offset);                                            \n  }                                                                             \n  return var;                                                                   \n}\n\n...\n\n// warp\u5185\u306epf.x\u306e\u5024\u306e\u7dcf\u548c\u3092\u8a08\u7b97\u3059\u308b\u3002\npf.x = warp_segment_reduce(pf.x);\npf.y = warp_segment_reduce(pf.y);\npf.z = warp_segment_reduce(pf.z);\n\n// \u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u3046\u5834\u5408\u306b\u306fatomicAdd\u306b\u7f6e\u304d\u63db\u3048\u308b\u5fc5\u8981\u3042\u308a\u3002\nif (lid == 0) p[i_ptcl_id] += pf;\n```\n\n\u3053\u306e\u5834\u5408\u306e\u5b9f\u884c\u6642\u9593\u3092\u6bd4\u8f03\u3057\u3066\u3084\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nTesla K40t\u3067\u5b9f\u884c\n\u5bc6\u5ea61\u306e\u5834\u5408\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a| 0.084759  |\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057| 0.281980  |\n\n\u5bc6\u5ea60.5\u306e\u5834\u5408\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a| 0.039636   |\n|\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057| 0.115553  |\n\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u901f\u304f\u3001\u306a\u304a\u304b\u3064\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u305d\u306e\uff12\u3068\u6bd4\u8f03\u3057\u3066\u500d\u304f\u3089\u3044\u901f\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002atomicAdd\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30b5\u30dd\u30fc\u30c8\u304c\u3055\u308c\u3066\u3044\u306a\u3044\u500d\u7cbe\u5ea6\u306e\u5834\u5408\u3067\u3042\u3063\u3066\u3082\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u3046\u3084\u308a\u65b9\u304c\u901f\u3044\u3067\u3059\u3002\natomicAdd\u306e\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30b5\u30dd\u30fc\u30c8\u304c\u3055\u308c\u3066\u3044\u308bPascal\u4e16\u4ee3\u306eGPU\u3067\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3082\n\nTesla P100\u3067\u5b9f\u884c\n\u5bc6\u5ea61\u306e\u5834\u5408\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n| \u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a  | 0.021643  |\n| \u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057  | 0.080207  |\n\n\u5bc6\u5ea60.5\u306e\u5834\u5408\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n| \u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a| 0.019731  |\n| \u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057| 0.041136  |\n\n\u3068\u306a\u308a\u307e\u3059\u3002\u300catomic\u4f7f\u308f\u306a\u3044\u4f5c\u7528\u53cd\u4f5c\u7528\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9\u304c\u3044\u3044\u300d\u3068\u306f\u3082\u3046\u8a00\u3048\u306a\u3044\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\n\u3072\u3068\u307e\u305a\u3053\u308c\u307e\u3067\u306e\u30b3\u30fc\u30c9\u3068CPU\u306e\u30b3\u30fc\u30c9\u3068\u3067\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u3066\u307f\u307e\u3059\u3002\u6bd4\u8f03\u3059\u308b\u30b3\u30fc\u30c9\u3068\u3057\u3066AVX\u547d\u4ee4\u3067SIMD\u5316+\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30d1\u30a4\u30d7\u30e9\u30a4\u30cb\u30f3\u30b0\u3057\u305fkaityo256\u5148\u751f\u306e[lj_simd](https://github.com/kaityo256/lj_simdstep)\u3092\u7528\u3044\u307e\u3057\u305f\u3002\nCPU\u306f\u30b7\u30f3\u30b0\u30eb\u30b3\u30a2\u3067\u306e\u5b9f\u884c\u306b\u306a\u308a\u307e\u3059\u3002\u7c92\u5b50\u5bc6\u5ea6\u306f1\u3067\u7c92\u5b50\u6570\u306f10\u4e07\u3067\u3059\u3002\n\n(avx\u3068\u66f8\u3044\u3066\u3044\u308b\u306e\u304c[lj_simd](https://github.com/kaityo256/lj_simdstep)\u306e\u6700\u901f\u30b3\u30fc\u30c9\u3067\u5b9f\u884c\u3057\u305f\u3068\u304d\u3067\u3001\u305d\u308c\u4ee5\u5916\u306fGPU\u3067\u5b9f\u884c\u3057\u305f\u3068\u304d\u306e\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002)\n\nTesla K40t\u3068Xeon E5-2680 v3\n![image](https://qiita-image-store.s3.amazonaws.com/0/120342/ac3659ec-0d82-9378-fee2-4670efa2a1d0.png)\n\nTesla P100\u3068Xeon E5-2680 v3\n![image](https://qiita-image-store.s3.amazonaws.com/0/120342/ab3b78c0-f003-3f1b-c9d6-06d8f7f839e0.png)\n\ntuning \u305d\u306e\uff13\u306e\u68d2\u30b0\u30e9\u30d5\u304c\u307b\u3068\u3093\u3069\u898b\u3048\u306a\u3044\u304f\u3089\u3044\u306b\u306a\u308a\u307e\u3057\u305f\u3002Xeon E5-2680 v3 \uff11\u30b3\u30a2\u306b\u5bfe\u3057\u3066\n\n* Tesla K40t\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306b\u306f__35\u500d\u306e\u9ad8\u901f\u5316__\n* Tesla P100\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306b\u306f__138\u500d\u306e\u9ad8\u901f\u5316__\n\n\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u30b9\u30ec\u30c3\u30c9\u4e26\u5217\u3057\u3066NUMA\u6700\u9069\u5316\u3082\u3061\u3083\u3093\u3068\u884c\u3063\u305f\u3068\u3057\u3066\u3001E5-2670 v3\u306f24\u30b3\u30a2\u306a\u306e\u3067\u3001K40t\u30671.5\u500d\u3001P100\u30676\u500d\u304f\u3089\u3044\u306e\u5dee\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\uff08\u3072\u3068\u307e\u305a[lj_simd](https://github.com/kaityo256/lj_simdstep)\u306e\u30de\u30eb\u30c1\u30b3\u30a2\u5bfe\u5fdc\u3084\u3063\u3066\u307f\u3066\u3082\u3046\u5c11\u3057\u771f\u9762\u76ee\u306a\u6bd4\u8f03\u3092\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\uff09\n\nP100\u3068K40t\u30674\u500d\u9055\u3046\u306e\u306fatomicAdd\u304c\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3068\u3001\u30d0\u30f3\u30c9\u5e45\u306e\u9055\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n#\u306a\u305cj\u7c92\u5b50\u30eb\u30fc\u30d7\u30a2\u30f3\u30ed\u30fc\u30eb+\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\u304c\u6700\u3082\u901f\u3044\u306e\u304b\u3001\u79c1\u6c17\u306b\u306a\u308a\u307e\u3059\u3002\nPascal\u306f\u3068\u3082\u304b\u304f\u3001Kepler\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u3082\u4f5c\u7528\u53cd\u4f5c\u7528\u3042\u308a\u306e\u307b\u3046\u304c\u901f\u3044\u3068\u3044\u3046\u306e\u306f\u7d50\u69cb\u9a5a\u304d\u3067\u3057\u305f\uff08\u6700\u521d\u6e2c\u5b9a\u30df\u30b9\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\uff09\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u73fe\u5728\u8abf\u67fb\u4e2d\u3067\u3059\u3002\n\n#\u307e\u3068\u3081\nLJ\u529b\u8a08\u7b97\u306b\u9650\u3063\u3066\u8a00\u3048\u3070\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u7121\u8996\u3059\u308b\u5229\u70b9\u306f\u7121\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u307f\u305f\u3044\u3067\u3059\u3002Tesla P100\u306e\u7d50\u679c\u3092\u307f\u308b\u9650\u308a\u3001\u3082\u306e\u3059\u3054\u304f\u30ca\u30a4\u30fc\u30d6\u306b\u5b9f\u88c5\u3057\u305f\u3068\u3057\u3066\u3082\u666e\u901a\u306batomicAdd\u4f7f\u3046\u307b\u3046\u304c\u9ad8\u901f\u306b\u8a08\u7b97\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059(\u5358\u7cbe\u5ea6\u3001\u500d\u7cbe\u5ea6\u554f\u308f\u305a)\u3002\u3061\u3083\u3093\u3068\u5b9f\u88c5\u3057\u3066\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002\n\n#\u8ffd\u8a18 (2016/1/26)\nOpenMP\u306b\u3088\u308b\u30b9\u30ec\u30c3\u30c9\u4e26\u5217\uff0bAVX\u547d\u4ee4\u3092\u7528\u3044\u305fSIMD\u5316\u3057\u305f\u3082\u306e\u3092\u4f5c\u6210\u3057\u3066\u3001GPU\u3068\u306e\u6027\u80fd\u6bd4\u8f03\u3092\u884c\u3044\u307e\u3057\u305f\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://github.com/kohnakagawa/lj_simdstep/tree/master/step8)\u306b\u3042\u308a\u307e\u3059\u3002\n\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u308f\u306a\u3044\u3084\u308a\u65b9\u3092\u63a1\u7528\u3057\u307e\u3057\u305f(#pragma omp atomic\u304c\u30b9\u30ab\u30e9\u30fc\u5909\u6570\u306b\u3064\u3044\u3066\u3057\u304b\u4f7f\u3048\u306a\u3044\u306e\u3068\u3001#pragma omp critical\u304c\u975e\u5e38\u306b\u9045\u304f\u3066\u4f7f\u3044\u7269\u306b\u306a\u3089\u306a\u304b\u3063\u305f\u305f\u3081\u3067\u3059)\u3002\n\n\u5b9f\u884c\u74b0\u5883 Intel(R) Xeon(R) CPU E5-2640 v4 @ 2.40GHz 10\u30b3\u30a2 x 2\u30bd\u30b1\u30c3\u30c8\n\u5b9f\u884c\u6642\u9593 0.296805 [s]\n\n\uff08\u30b9\u30ec\u30c3\u30c9\u4e26\u5217\u305b\u305a\u306b\uff11\u30b3\u30a2\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306e\u5b9f\u884c\u6642\u9593\u306f4.209338 [sec])\n\n\u6700\u5f8c\u306bGPU CPU\u306e\u5b9f\u884c\u6642\u9593\u3092\u5168\u3066\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u3001\n\n\u5bc6\u5ea61\u306e\u5834\u5408\n\n|  | \u5b9f\u884c\u6642\u9593 [s] | CPU\u306e\u5b9f\u884c\u6642\u9593\u304b\u3089\u306e\u9ad8\u901f\u5316\u5ea6\u5408\u3044 |\n|:-:|:-:| :-: |\n| Tesla P100 | 0.021643  | 14\u500d |\n| Tesla K40t | 0.084759  | 3.5\u500d|\n| E5-2640 v4 | 0.296805  | 1\u500d |\n\n\u5bc6\u5ea60.5\u306e\u5834\u5408\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |CPU\u306e\u5b9f\u884c\u6642\u9593\u304b\u3089\u306e\u9ad8\u901f\u5316\u5ea6\u5408\u3044 |\n|:-:|:-:|:-:|\n| Tesla P100  |  0.019731 | 4.8\u500d |\n| Tesla K40t  |  0.039636 | 2.4\u500d |\n| E5-2640 v4  | 0.094636  | 1\u500d |\n\nGPU\u3067\u3084\u308b\u3068100\u500d\u9ad8\u901f\u5316\u3055\u308c\u308b\u3068\u3044\u3046\u306e\u306f\u3055\u3059\u304c\u306b\u5e7b\u60f3\u3067\u3059\u304c\u3001CPU\u3068GPU\u3092\u3081\u3044\u3044\u3063\u3071\u3044\u9ad8\u901f\u5316\u3057\u305f\u4e0a\u3067\u6bd4\u8f03\u3059\u308b\u3068\u30015 ~ 10\u500d\u304f\u3089\u3044GPU\u306e\u307b\u3046\u304c\u306f\u3084\u305d\u3046\u3067\u3059\u3002\n\n\u5404CPU\u3001GPU\u306e\u7406\u8ad6\u6f14\u7b97\u6027\u80fd\u3001\u30e1\u30e2\u30ea\u30d0\u30f3\u30c9\u5e45\u3001B/F\u5024\u3092\u30ea\u30b9\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u307f\u308b\u3068\u3001\n\n\u7406\u8ad6\u6f14\u7b97\u6027\u80fd\n\n|  | GFLOPS | GB/s | B/F\u5024 |F/B (B/F\u5024\u306e\u9006\u6570) |\n|:-:|:-:|:-: |:-: | :-:|\n| Tesla P100  | 4036  | 720 | 0.18 |5.7 |\n| Tesla K40t  | 1430  | 288 | 0.20 |5.0 |\n| E5-2640 v4  | 768  | 136.6 | 0.18 |5.6 |\n\n\u4eca\u56de\u306eLJ\u529b\u8a08\u7b97\u306e\u6f14\u7b97\u5f37\u5ea6\u3092\u8003\u3048\u3066\u307f\u308b\u3068\n\n* \u6e1b\u7b973\u56de \uff08\u5909\u4f4d\u30d9\u30af\u30c8\u30eb\u8a08\u7b97\uff09\u3000$dr_{ij} = r_{i} - r_{j}$\n* \u4e57\u7b973\u56de + \u8db3\u7b972\u56de \uff08\u8ddd\u96e2\u8a08\u7b97\uff09 $dr^{2}_{ij}$\n* \u4e57\u7b972\u56de ($dr^{6}$\u306e\u8a08\u7b97)\n* \u4e57\u7b972\u56de ($dr^{14}$\u306e\u8a08\u7b97)\n* \u4e57\u7b971\u56de + \u6e1b\u7b971\u56de (\u529b\u306e\u5206\u6bcd\u8a08\u7b97) $24 * dr^{6}_{ij} - 48$\n* \u9664\u7b971\u56de $dr^{14}$\u3068\u306e\u5272\u308a\u7b97\n* \u4e57\u7b971\u56de \u529b\u7a4d\u306e\u30ce\u30eb\u30e0\u8a08\u7b97 $df * dt$\n* \u4e57\u7b973\u56de + \u52a0\u7b973\u56de (\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u4f7f\u3046\u5834\u5408\u306b\u306f\u3053\u306e2\u500d\u306e\u8a08\u7b97) \u529b\u7a4d\u8a08\u7b97 $df * dr_{ij}$\n\n\u9664\u7b97\u309210FLOP\u3068\u3057\u3066\u8003\u3048\u305f\u6642\u3001\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u8003\u616e\u3057\u305f\u3068\u304d\u300137FLOP\u3067\u4f5c\u7528\u53cd\u4f5c\u7528\u306a\u3057\u306734FLOP\u306b\u306a\u308b\u3002\n\n\u4e00\u65b9\u3067\u3001\u3053\u308c\u3089\u306e\u8a08\u7b97\u3092\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u30c7\u30fc\u30bf\u306f(i\u7c92\u5b50\u306e\u5ea7\u6a19\u30c7\u30fc\u30bf\u3068\u904b\u52d5\u91cf\u30c7\u30fc\u30bf\u306f\u30ec\u30b8\u30b9\u30bf\u306b\u306e\u3063\u3066\u3044\u308b\u3068\u3057\u3066\u3001)\n* \u5ea7\u6a19\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9 3 (4) * 8 Byte = 24 (32) Byte\n* \u904b\u52d5\u91cf\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9 2 * 3 (4) * 8 Byte = 48 (64) Byte\n\u3068\u306a\u308b\u3002\uff08\u304b\u3063\u3053\u306fAVX\u306e_mm256_loadu_pd\u3068\u304b\u3092\u4f7f\u3063\u3066\u5ea7\u6a19\u3092\u4e00\u767a\u3067\u30ed\u30fc\u30c9\u3059\u308b\u5834\u5408\u306b\u3001\uff11\u6210\u5206\u30d1\u30c7\u30a3\u30f3\u30b0\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u305f\u3081\u3001\u305d\u308c\u3092\u8003\u616e\u3057\u3066\u3044\u308b\u3002\uff09\u306a\u304a\u3001\u904b\u52d5\u91cf\u30c7\u30fc\u30bf\u306e\u30ed\u30fc\u30c9\u306f\u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u7121\u8996\u3059\u308b\u5834\u5408\u306b\u306f\u5165\u3089\u306a\u3044\u3002\n\n\u3088\u3063\u3066\u6f14\u7b97\u5f37\u5ea6\u306f\n\n* \u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u7121\u8996\u3057\u306a\u3044\u5834\u5408 37 FLOP / 72 (96) Byte ~ 0.51 (0.38)\n* \u4f5c\u7528\u53cd\u4f5c\u7528\u3092\u7121\u8996\u3059\u308b\u5834\u5408 34 FLOP / 24 (32) Byte ~ 1.4 (1.1) \n\n\u306b\u306a\u308b\u3002\u30eb\u30fc\u30d5\u30e9\u30a4\u30f3\u30e2\u30c7\u30eb\u3067\u8003\u3048\u308b\u3068\u3001\uff08\u30ed\u30fc\u30c9\u3059\u308bj\u7c92\u5b50\u306e\u30c7\u30fc\u30bf\u304c\u5168\u304f\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4e57\u3063\u3066\u3044\u306a\u3044\u3068\u4eee\u5b9a\u3059\u308b\u306e\u3067\u3042\u308c\u3070\uff09\u3001\u30e1\u30e2\u30ea\u30d0\u30f3\u30c9\u5e45\u5f8b\u901f\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306a\u308a\u3001\u30d0\u30f3\u30c9\u5e45\u3067\u6027\u80fd\u304c\u6c7a\u307e\u308b\u3002\u305d\u3046\u3059\u308b\u3068\u3001\u4e8c\u3064\u306eGPU\u3067\u5b9f\u884c\u3057\u305f\u6642\u306e\u5b9f\u884c\u6642\u9593\u306e\u9055\u3044\u306f\u5927\u307e\u304b\u306b\u306f\u30d0\u30f3\u30c9\u5e45\u306e\u9055\u3044\u3068\u306a\u3063\u3066\u8868\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3001\u78ba\u304b\u306b\u305d\u3046\u306a\u3063\u3066\u3044\u308b\u3002\n\n#\u8ffd\u8a18 (2016/1/27)\n\u8ffd\u8a181/26\u306e\u8003\u5bdf\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u3068\u601d\u3048\u3066\u304d\u305f\u3002Tesla P100\u306e\u6027\u80fd\u306e\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306f\u5225\u306b\u3042\u308b\u6c17\u304c\u3057\u3066\u304d\u305f\u3002\n\u6700\u901f\u30ab\u30fc\u30cd\u30eb\u306e\u5b9f\u884c\u6642\u9593\u3092\u3088\u304f\u8abf\u3079\u3066\u307f\u308b\u3068\u3001double\u3068float\u3067\u307b\u3068\u3093\u3069\u5909\u308f\u3089\u306a\u3044\u3002\n\nTesla P100\u3067\u5b9f\u884c\n\u5bc6\u5ea6\uff11\u306e\u6642\n\n|  | \u5b9f\u884c\u6642\u9593 [s] |\n|:-:|:-:|\n| float  | 0.021128  |\n| double  | 0.021668  |\n\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u304cGPU\u3067\u306e\u8a08\u7b97\u4ee5\u5916\u306b\u3042\u308b\u6c17\u304c\u3057\u3066\u304d\u3066\u3001\u3082\u3046\u5c11\u3057\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\n\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u304cCPU<->GPU\u306e\u30c7\u30fc\u30bf\u8ee2\u9001\u306b\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\n\u4eca\u56de\u901a\u4fe1\u8fbc\u307f\u3067\u5b9f\u884c\u6642\u9593\u3092\u8a08\u7b97\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u901a\u4fe1\u306e\u6642\u9593\u3092\u898b\u7a4d\u3082\u3063\u3066\u307f\u305f\u3002\n\n\u30c7\u30fc\u30bf\u8ee2\u9001\u306e\u6642\u9593\u3092nvvp\u3067\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\u901a\u4fe1\u306e\u6642\u9593\u306e\u5408\u8a08\u304c0.018s\u3050\u3089\u3044\u306f\u3042\u3063\u3066\u3001\u5b9f\u969b\u306e\u8a08\u7b97\u304c0.003s\u3050\u3089\u3044\u3060\u3068\u5206\u304b\u3063\u305f\u3002\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8\u306e\u30c7\u30fc\u30bf\u304c96MB\u3082\u3042\u308b\u305f\u3081\u3001\u8ee2\u9001\u306b\u76f8\u5f53\u6642\u9593\u304c\u304b\u304b\u308b\u3088\u3046\u3060\u3002\n\u305d\u3046\u3059\u308b\u3068\u3001\u5b9f\u969b\u306bGPU\u3067\u8a08\u7b97\u3057\u3066\u3044\u308b\u6642\u9593\u3067\u6bd4\u8f03\u3059\u308c\u3070\u3001E5-2640 v4\u306e\u30de\u30eb\u30c1\u30b3\u30a2\u5b9f\u884c\u306b\u6bd4\u3079\u3066100\u500d\u3050\u3089\u3044\u9ad8\u901f\u5316\u3055\u308c\u3066\u3044\u308b\u3002\u304b\u306a\u308a\u7406\u60f3\u7684\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u30d2\u30c3\u30c8\u3057\u3066\u3044\u308b\u304b\u3089\u3053\u3053\u307e\u3067\u9055\u3044\u304c\u3067\u308b\u3068\u601d\u308f\u308c\u308b\u3002\n\nmetric\u3092nvprof\u3067\u3068\u3063\u3066\u307f\u308b\u3068\u3001cache hit rate\u306f80%\u3050\u3089\u3044\u3060\u3063\u305f\u3002\n\n\u3067\u3082CPU\u3082\u3001\u7c92\u5b50\u30c7\u30fc\u30bf\u304c\u9ad8\u30055MB\u304f\u3089\u3044\u3060\u304b\u3089\u3001\u307b\u3068\u3093\u3069\u306e\u30c7\u30fc\u30bf\u304c\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u4e57\u3063\u3066\u3044\u308b\u3068\u8003\u3048\u3066\u3044\u3044\u3088\u3046\u306a\u3002\u306a\u305c\u3053\u3053\u307e\u3067\u5dee\u304c\u51fa\u308b\u306e\u304b\uff1f\n"}