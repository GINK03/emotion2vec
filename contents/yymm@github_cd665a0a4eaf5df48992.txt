{"context": " More than 1 year has passed since last update.node-ffi\u304c\u5148\u65e5v1.3.0\u306b\u306a\u308a\u3001nodejs\u306ev0.11, v0.12\u306b\u5bfe\u5fdc\u3057\u3001nan\u30d1\u30c3\u30b1\u30fc\u30b8\u3082\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u8a73\u3057\u3044\u5185\u5bb9\u306f\u3001node-ffi\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306eHistory.md\u3092\u8aad\u3080\u3068\u3044\u3044\u3067\u3059\u3002\nnode-ffi/History.md at master \u00b7 node-ffi/node-ffi\n\u65e9\u901fatom-shell\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u74b0\u5883\nUbuntu 14.10\n\u74b0\u5883\u306b\u3088\u308b\u5dee\u7570\u306f\u3001\u4e3b\u306b\u30cd\u30a4\u30c6\u30a3\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30d3\u30eb\u30c9\u3060\u3068\u601d\u3046\u306e\u3067\u3001node-ffi\u306eexample\u3092\u53c2\u8003\u306bOS\u306b\u3042\u3063\u305f\u30d3\u30eb\u30c9\u65b9\u6cd5\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u591a\u5206\u4ed6\u306eOS\u3067\u3082\u8a66\u305b\u307e\u3059\u3002\nnode-ffi/example/factorial at master \u00b7 node-ffi/node-ffi\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u73fe\u884c\u306eatom-shell\u3067\u4f7f\u7528\u3057\u3066\u3044\u308bnodejs\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001iojs-v1.5.1\u3067\u3059\u3002\nnvm\u306a\u308a\u3001nodebrew\u3067\u74b0\u5883\u3092\u4f5c\u308a\u307e\u3059\u3002\n$ nvm install iojs-v1.5.1\n\natom-shell\u3068node-ffi\u3092\u5165\u308c\u307e\u3059\u3002\n$ npm init\n$ npm install atom-shell ffi -save\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 native\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 libSay.c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 libSay.h\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 libSay.so\n\u251c\u2500\u2500 node_modules/\n\u2514\u2500\u2500 package.json\n\natom-shell\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\n\nindex.js\nvar app = require('app');\nvar BrowserWindow = require('browser-window');\n\nrequire('crash-reporter').start();\n\nvar mainWindow = null;\n\napp.on('ready', function() {\n  mainWindow = new BrowserWindow({width: 800, height: 600});\n\n  mainWindow.loadUrl('file://' + __dirname + '/index.html');\n\n  mainWindow.on('closed', function() {\n    mainWindow = null;\n  }); \n});\n\n\nUI(html)\n\nindex.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello atom-shell with ffi!</title>\n  </head>\n  <body>\n    <h1>Hello atom-shell with ffi!</h1>\n    We are using io.js <script>document.write(process.version)</script><br />\n    and atom-shell <script>document.write(process.versions['atom-shell'])</script>.\n    <script>\n    var ffi = require('ffi');\n\n    document.write('<h2>Example: Readme</h2>');\n\n    var libm = ffi.Library('libm', {\n      'ceil': [ 'double', [ 'double' ] ]\n    });\n    document.write('<div>\"libm\" sample: ' + libm.ceil(1.5) + '</div>'); // 2\n\n    // You can also access just functions in the current process by passing a null\n    var current = ffi.Library(null, {\n      'atoi': [ 'int', [ 'string' ] ]\n    });\n    document.write('<div>\"atoi\" sample: ' + current.atoi('1234') + '</div>'); // 1234\n\n    document.write('<h2>Example native module(C language)</h2>');\n\n    var say = ffi.Library('./native/libSay.so', {\n      'hello': [ 'string', [ ] ],\n      'echo': [ 'string', [ 'string' ] ]\n    });\n    document.write('<div>' + say.hello() + '</div>'); // Hello!\n    document.write('<div>' + say.echo('World!') + '</div>'); // World!\n    </script>\n  </body>\n</html>\n\n\n\u30cd\u30a4\u30c6\u30a3\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb(C\u8a00\u8a9e)\n\nlibSay.h\n#ifndef __LIB_SAY_H\n#define __LIB_SAY_H\n\nchar* echo(char* word);\n\nchar* hello();\n\n#endif\n\n\n\nlibSay.c\n#include \"libSay.h\"\n\nchar* echo(char* word) {\n    return word;\n}\n\nchar* hello() {\n    return (char*)\"Hello!\";\n}\n\n\n\u30cd\u30a4\u30c6\u30a3\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30d3\u30eb\u30c9\u3067\u3059\u3002\n$ gcc -shared -fpic libSay.c -o libSay.co\n\n\n\u7d50\u679c\n\n\u7121\u4e8b\u52d5\u304d\u307e\u3057\u305f\u3002\nnode-ffi\u304c\u5148\u65e5v1.3.0\u306b\u306a\u308a\u3001nodejs\u306ev0.11, v0.12\u306b\u5bfe\u5fdc\u3057\u3001nan\u30d1\u30c3\u30b1\u30fc\u30b8\u3082\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u8a73\u3057\u3044\u5185\u5bb9\u306f\u3001node-ffi\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306eHistory.md\u3092\u8aad\u3080\u3068\u3044\u3044\u3067\u3059\u3002\n\n[node-ffi/History.md at master \u00b7 node-ffi/node-ffi](https://github.com/node-ffi/node-ffi/blob/master/History.md \"node-ffi/History.md at master \u00b7 node-ffi/node-ffi\")\n\n\u65e9\u901fatom-shell\u3067\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n# \u74b0\u5883\n\nUbuntu 14.10\n\n\u74b0\u5883\u306b\u3088\u308b\u5dee\u7570\u306f\u3001\u4e3b\u306b\u30cd\u30a4\u30c6\u30a3\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30d3\u30eb\u30c9\u3060\u3068\u601d\u3046\u306e\u3067\u3001node-ffi\u306eexample\u3092\u53c2\u8003\u306bOS\u306b\u3042\u3063\u305f\u30d3\u30eb\u30c9\u65b9\u6cd5\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u591a\u5206\u4ed6\u306eOS\u3067\u3082\u8a66\u305b\u307e\u3059\u3002\n\n[node-ffi/example/factorial at master \u00b7 node-ffi/node-ffi](https://github.com/node-ffi/node-ffi/tree/master/example/factorial \"node-ffi/example/factorial at master \u00b7 node-ffi/node-ffi\")\n\n# \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u73fe\u884c\u306eatom-shell\u3067\u4f7f\u7528\u3057\u3066\u3044\u308bnodejs\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001iojs-v1.5.1\u3067\u3059\u3002\n\nnvm\u306a\u308a\u3001nodebrew\u3067\u74b0\u5883\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```bash\n$ nvm install iojs-v1.5.1\n```\n\natom-shell\u3068node-ffi\u3092\u5165\u308c\u307e\u3059\u3002\n\n```bash\n$ npm init\n$ npm install atom-shell ffi -save\n```\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n\n```\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 index.js\n\u251c\u2500\u2500 native\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 libSay.c\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 libSay.h\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 libSay.so\n\u251c\u2500\u2500 node_modules/\n\u2514\u2500\u2500 package.json\n```\n\natom-shell\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\n\n```js:index.js\nvar app = require('app');\nvar BrowserWindow = require('browser-window');\n\nrequire('crash-reporter').start();\n\nvar mainWindow = null;\n\napp.on('ready', function() {\n  mainWindow = new BrowserWindow({width: 800, height: 600});\n\n  mainWindow.loadUrl('file://' + __dirname + '/index.html');\n\n  mainWindow.on('closed', function() {\n    mainWindow = null;\n  }); \n});\n```\n\nUI(html)\n\n```html:index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello atom-shell with ffi!</title>\n  </head>\n  <body>\n    <h1>Hello atom-shell with ffi!</h1>\n    We are using io.js <script>document.write(process.version)</script><br />\n    and atom-shell <script>document.write(process.versions['atom-shell'])</script>.\n    <script>\n    var ffi = require('ffi');\n    \n    document.write('<h2>Example: Readme</h2>');\n\n    var libm = ffi.Library('libm', {\n      'ceil': [ 'double', [ 'double' ] ]\n    });\n    document.write('<div>\"libm\" sample: ' + libm.ceil(1.5) + '</div>'); // 2\n    \n    // You can also access just functions in the current process by passing a null\n    var current = ffi.Library(null, {\n      'atoi': [ 'int', [ 'string' ] ]\n    });\n    document.write('<div>\"atoi\" sample: ' + current.atoi('1234') + '</div>'); // 1234\n\n    document.write('<h2>Example native module(C language)</h2>');\n\n    var say = ffi.Library('./native/libSay.so', {\n      'hello': [ 'string', [ ] ],\n      'echo': [ 'string', [ 'string' ] ]\n    });\n    document.write('<div>' + say.hello() + '</div>'); // Hello!\n    document.write('<div>' + say.echo('World!') + '</div>'); // World!\n    </script>\n  </body>\n</html>\n```\n\n\u30cd\u30a4\u30c6\u30a3\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb(C\u8a00\u8a9e)\n\n```c:libSay.h\n#ifndef __LIB_SAY_H\n#define __LIB_SAY_H\n\nchar* echo(char* word);\n\nchar* hello();\n\n#endif\n```\n\n```c:libSay.c\n#include \"libSay.h\"\n\nchar* echo(char* word) {\n    return word;\n}\n\nchar* hello() {\n    return (char*)\"Hello!\";\n}\n```\n\n\u30cd\u30a4\u30c6\u30a3\u30d6\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30d3\u30eb\u30c9\u3067\u3059\u3002\n\n```bash\n$ gcc -shared -fpic libSay.c -o libSay.co\n```\n\n# \u7d50\u679c\n\n![Screenshot from 2015-03-26 22:17:55.png](https://qiita-image-store.s3.amazonaws.com/0/24784/3e7385c5-4c9a-b437-99a9-ee544dac656d.png)\n\n\u7121\u4e8b\u52d5\u304d\u307e\u3057\u305f\u3002\n", "tags": ["atom-shell0.22.1", "node-ffi1.3.0"]}