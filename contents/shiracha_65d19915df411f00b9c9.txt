{"tags": ["Ruby", "C", "GCC", "cruby", "\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0"], "context": " More than 1 year has passed since last update.\n\nLIKELY / UNLIKELY\n\u7b46\u8005\u304cCRuby\u5b9f\u88c5\u3092\u8aad\u3093\u3067\u307f\u3088\u3046\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\u7b2c\u4e00\u56de\u3067\u3059\u3002\nruby\u306e\u30bd\u30fc\u30b9\u3092\u30b6\u30e9\u3063\u3068\u773a\u3081\u308b\u3068\u3001\u3088\u304f\u4ee5\u4e0b\u306e\u69d8\u306a\u300cLIKELY / UNLIKELY\u300d\u3068\u3044\u3046\u30de\u30af\u30ed\u304c\u898b\u5f53\u305f\u308a\u307e\u3059\u3002\nCRuby\u306evm_exec.c\u306evm_exec_core\u3092\u5f15\u7528\nstatic VALUE\nvm_exec_core(rb_thread_t *th, VALUE initial)\n{\n    register rb_control_frame_t *reg_cfp = th->cfp;\n\n    while (1) {\n    reg_cfp = ((rb_insn_func_t) (*GET_PC()))(th, reg_cfp);\n\n    if (UNLIKELY(reg_cfp == 0)) {\n        break;\n    }\n    }\n\n    if (th->retval != Qundef) {\n    VALUE ret = th->retval;\n    th->retval = Qundef;\n    return ret;\n    }\n    else {\n    VALUE err = th->errinfo;\n    th->errinfo = Qnil;\n    return err;\n    }\n}\n\n9\u884c\u76ee\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306eUNLIKELY\u3067\u3059\u3002\u3053\u308c\u306f\u3044\u3063\u305f\u3044\u306a\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3069\u3046\u3084\u3089\u3088\u304fif\u3068\u4e00\u7dd2\u306b\u4f7f\u308f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u305f\u3068\u3048\u3070\u3053\u3053\u3067\u3082if (UNLIKELY(reg_cfp == 0))\u306e\u3088\u3046\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\nLIKELY\u3092grep\n\u3068\u3044\u3046\u3053\u3068\u3067#define LIKELY\u3092ruby\u30bd\u30fc\u30b9\u4e2d\u304b\u3089grep\u3057\u3066\u307f\u307e\u3057\u305f\u3068\u3053\u308d\u3001internal.h\u306b\u30de\u30af\u30ed\u5b9a\u7fa9\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n/* likely */\n#if __GNUC__ >= 3\n#define LIKELY(x)   (__builtin_expect((x), 1))\n#define UNLIKELY(x) (__builtin_expect((x), 0))\n#else /* __GNUC__ >= 3 */\n#define LIKELY(x)   (x)\n#define UNLIKELY(x) (x)\n#endif /* __GNUC__ >= 3 */\n\n__GNUC__ >= 3\u3067\u306a\u3051\u308c\u3070\u5358\u306b\u305d\u306e\u307e\u307e\u306e\u5f0f\u304c\u63a1\u7528\u3055\u308c\u308b\u3088\u3046\u306a\u306e\u3067\u3001GCC\u306e\u72ec\u81ea\u62e1\u5f35\u3092\u3064\u304b\u3046\u305f\u3081\u306e\u30de\u30af\u30ed\u306e\u3088\u3046\u3067\u3059\u306d\u2026\u2026\u3002\n__builtin_expect\u3068\u306f\u306a\u3093\u3067\u3057\u3087\u3046\u304b\u2026\u2026\uff1f\n\n__builtin_expect\n\nGCC\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u6f01\u308b\u3068Other-Builtins\u3068\u3044\u3046\u8a18\u4e8b\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n\u30da\u30fc\u30b8\u4e2d\u307b\u3069\u306b__builtin_expect\u306b\u3064\u3044\u3066\u306e\u8a18\u8ff0\u304c\u898b\u5f53\u305f\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u304c\u305d\u306e\u5f15\u7528\u3067\u3059\u3002\n\n\u2014 Built-in Function: long __builtin_expect (long exp, long c)\nYou may use __builtin_expect to provide the compiler with branch prediction information. In general, you should prefer to use actual profile feedback for this (-fprofile-arcs), as programmers are notoriously bad at predicting how their programs actually perform. However, there are applications in which this data is hard to collect.\nThe return value is the value of exp, which should be an integral expression. The semantics of the built-in are that it is expected that exp == c. For example:\n      if (__builtin_expect (x, 0))\n        foo ();\n\nindicates that we do not expect to call foo, since we expect x to be zero. Since you are limited to integral expressions for exp, you should use constructions such as\n      if (__builtin_expect (ptr != NULL, 1))\n        foo (*ptr);\n\nwhen testing pointer or floating-point values.\n\nbranch prediction, \u5206\u5c90\u4e88\u6e2c\u3067\u3059\u306d\uff01\n\u3064\u307e\u308a__builtin_expect\u306f\u5206\u5c90\u4e88\u6e2c\u306e\u305f\u3081\u306b\u3001\u6307\u5b9a\u3055\u308c\u305fexp\u304c\u5b9f\u969b\u306b\u53d6\u308b\u300c\u3088\u304f\u3042\u308b\u5024\u300d\u3092\u793a\u3059\u305f\u3081\u306eGCC\u7d44\u8fbc\u307f\u95a2\u6570\u306e\u3088\u3046\u3067\u3059\u3002\n\u3053\u306eGCC\u7d44\u8fbc\u307f\u95a2\u6570\u3067\u826f\u304f\u3042\u308b\u5024\u3092\u793a\u3057\u3066\u304a\u304f\u3053\u3068\u3067GCC\u306f\u3088\u308a\u305d\u306e\u5206\u5c90\u3092\u884c\u3046\u6642\u306b\u9069\u5207\u306a\u30b3\u30fc\u30c9\u3092\u5410\u304d\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3042\u3089\u305f\u3081\u3066LIKELY, UNLIKELY\u3092\u8aad\u3080\nLIKELY, UNLIKELY\u306eGCC\u7248\u306e\u90e8\u5206\u3060\u3051\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n#define LIKELY(x)   (__builtin_expect((x), 1))\n#define UNLIKELY(x) (__builtin_expect((x), 0))\n\n__builtin_expect\u306f\u7b2c\u4e00\u5f15\u6570\u306e\u5f0f\u304c\u3001\u983b\u7e41\u306b\u7b2c\u4e8c\u5f15\u6570\u306e\u5024\u3092\u53d6\u308b\u3053\u3068\u3092\u793a\u3059\u7d44\u8fbc\u307f\u95a2\u6570\u3067\u3057\u305f\u3002\n\u3067\u3059\u304b\u3089\u3001LIKELY(x)\u306f\u5f0fx\u304c\u983b\u7e41\u306b1(\u5927\u62b5\u306e\u5834\u5408TRUE\u306e\u5024)\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u3001UNLIKELY(x)\u306fx\u304c\u983b\u7e41\u306b0(FALSE\u306e\u5024)\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\u3064\u307e\u308b\u3068\u3053\u308d\u9069\u5207\u306aLIKELY(x), UNLIKELY(x)\u3092\u5165\u308c\u308b\u3053\u3068\u3067cruby\u306fGCC\u30d3\u30eb\u30c9\u6642\u306e\u52d5\u4f5c\u901f\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u306a\u308b\u307b\u3069\u3002\n\n\u307e\u3068\u3081\n\nLIKELY, UNLIKELY\u306f\u5206\u5c90\u4e88\u6e2c\u306e\u305f\u3081\u306e\u88dc\u52a9\u60c5\u5831\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4e0e\u3048\u308b\u305f\u3081\u306e\u30de\u30af\u30ed\n\n\nLIKELY\u306f\u5927\u62b5TRUE\u306b\u306a\u308b\u5f0f\u3092\u76f8\u624b\u306b\u3064\u304b\u3046\nUNLIKELY\u306f\u5927\u62b5FALSE\u306b\u306a\u308b\u5f0f\u3092\u76f8\u624b\u306b\u3064\u304b\u3046\n\n\nCRuby\u306f\u5206\u5c90\u4e88\u6e2c\u306b\u3064\u3044\u3066\u72ec\u81ea\u62e1\u5f35\u3082\u542b\u3081\u3066\u7d30\u304b\u304f\u8abf\u7bc0\u3092\u884c\u3063\u3066\u3044\u308b\n\n\n\u3068\u3053\u308d\u3067\u3002\nLIKELY\u306e\u5024\u304c1\u3068\u3044\u3046\u6307\u5b9a\u306b\u306a\u3063\u3066\u308b\u306e\u3067\u3059\u304c\u3001\u6bd4\u8f03\u5f0f\u306e\u7d50\u679c\u304c0\u4ee5\u5916\u306b\u306a\u308b\u5834\u5408\u3068\u304b\u5927\u4e08\u592b\u306a\u3093\u3060\u308d\u3046\u304b\uff1f\n\u305f\u3076\u3093\u5426\u5b9a\u3092\u660e\u793a\u7684\u306b\u53d6\u3063\u305f!flag\u307f\u305f\u3044\u306a\u5834\u5408\u306f\u5927\u4e08\u592b\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001ptr\u306b\u5bfe\u3059\u308bNULL\u30c1\u30a7\u30c3\u30af\u3092LIKELY( ptr )\u3063\u3066\u3084\u308b\u3068\u5024\u306f1\u3067\u306f\u306a\u3044\u306f\u305a\u3002\u305d\u3046\u3044\u3046\u306e\u306f\u554f\u984c\u7121\u304f\u3053\u308c\u3067\u89e3\u6d88\u3055\u308c\u308b\u306e\u304b\u306a\uff1f\n\u8aad\u3093\u3060\u6642\u70b9\u3067\u306fruby\u306e\u30d1\u30d5\u30a9\u30de\u30f3\u30b9\u6e2c\u5b9a\u3092\u3069\u3046\u5b9f\u65bd\u3057\u305f\u3089\u3044\u3044\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3061\u3087\u3063\u3068\u5b9f\u9a13\u3057\u3066\u306a\u3044\u3067\u3059\u304c\u3001\n\u305f\u3068\u3048\u3070#define LIKELY(x) __builtin_expect(!!(x),1)\u307f\u305f\u3044\u306a\u5b9f\u88c5\u3068\u304b\u65e2\u306b\u904e\u53bb\u306b\u8a66\u3055\u308c\u3066\u3044\u308b\u306e\u3060\u308d\u3046\u304b\u2026\u2026\uff1f\n(\u3044\u3084\u52ff\u8ad6\u3053\u308c\u306f!!\u3092\u901a\u3057\u3061\u3083\u3046\u6642\u70b9\u3067\u9006\u306b\u91cd\u305f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u308f\u3051\u3067\u3001\u3042\u304f\u307e\u3067\u4e00\u4f8b\u3067\u3001\u3061\u3087\u3063\u3068\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u7d50\u679c\u306b\u306a\u308a\u305d\u3046\u3060\u3051\u3069\u3002)\nLIKELY / UNLIKELY\n-------------------------------\n\n\u7b46\u8005\u304cCRuby\u5b9f\u88c5\u3092\u8aad\u3093\u3067\u307f\u3088\u3046\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\u7b2c\u4e00\u56de\u3067\u3059\u3002\n\nruby\u306e\u30bd\u30fc\u30b9\u3092\u30b6\u30e9\u3063\u3068\u773a\u3081\u308b\u3068\u3001\u3088\u304f\u4ee5\u4e0b\u306e\u69d8\u306a\u300cLIKELY / UNLIKELY\u300d\u3068\u3044\u3046\u30de\u30af\u30ed\u304c\u898b\u5f53\u305f\u308a\u307e\u3059\u3002\n\nCRuby\u306evm_exec.c\u306evm_exec_core\u3092\u5f15\u7528\n\n```c\nstatic VALUE\nvm_exec_core(rb_thread_t *th, VALUE initial)\n{\n    register rb_control_frame_t *reg_cfp = th->cfp;\n\n    while (1) {\n\treg_cfp = ((rb_insn_func_t) (*GET_PC()))(th, reg_cfp);\n\n\tif (UNLIKELY(reg_cfp == 0)) {\n\t    break;\n\t}\n    }\n\n    if (th->retval != Qundef) {\n\tVALUE ret = th->retval;\n\tth->retval = Qundef;\n\treturn ret;\n    }\n    else {\n\tVALUE err = th->errinfo;\n\tth->errinfo = Qnil;\n\treturn err;\n    }\n}\n```\n\n9\u884c\u76ee\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306eUNLIKELY\u3067\u3059\u3002\u3053\u308c\u306f\u3044\u3063\u305f\u3044\u306a\u3093\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3069\u3046\u3084\u3089\u3088\u304fif\u3068\u4e00\u7dd2\u306b\u4f7f\u308f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u305f\u3068\u3048\u3070\u3053\u3053\u3067\u3082`if (UNLIKELY(reg_cfp == 0))`\u306e\u3088\u3046\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\n\nLIKELY\u3092grep\n-------------------\n\n\u3068\u3044\u3046\u3053\u3068\u3067`#define LIKELY`\u3092ruby\u30bd\u30fc\u30b9\u4e2d\u304b\u3089grep\u3057\u3066\u307f\u307e\u3057\u305f\u3068\u3053\u308d\u3001internal.h\u306b\u30de\u30af\u30ed\u5b9a\u7fa9\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n\n```c\n/* likely */\n#if __GNUC__ >= 3\n#define LIKELY(x)   (__builtin_expect((x), 1))\n#define UNLIKELY(x) (__builtin_expect((x), 0))\n#else /* __GNUC__ >= 3 */\n#define LIKELY(x)   (x)\n#define UNLIKELY(x) (x)\n#endif /* __GNUC__ >= 3 */\n```\n\n`__GNUC__ >= 3`\u3067\u306a\u3051\u308c\u3070\u5358\u306b\u305d\u306e\u307e\u307e\u306e\u5f0f\u304c\u63a1\u7528\u3055\u308c\u308b\u3088\u3046\u306a\u306e\u3067\u3001GCC\u306e\u72ec\u81ea\u62e1\u5f35\u3092\u3064\u304b\u3046\u305f\u3081\u306e\u30de\u30af\u30ed\u306e\u3088\u3046\u3067\u3059\u306d\u2026\u2026\u3002\n`__builtin_expect`\u3068\u306f\u306a\u3093\u3067\u3057\u3087\u3046\u304b\u2026\u2026\uff1f\n\n`__builtin_expect`\n-----------------------\n\nGCC\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u6f01\u308b\u3068[Other-Builtins](https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html)\u3068\u3044\u3046\u8a18\u4e8b\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f\u3002\n\u30da\u30fc\u30b8\u4e2d\u307b\u3069\u306b`__builtin_expect`\u306b\u3064\u3044\u3066\u306e\u8a18\u8ff0\u304c\u898b\u5f53\u305f\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u304c\u305d\u306e\u5f15\u7528\u3067\u3059\u3002\n\n> \u2014 Built-in Function: long __builtin_expect (long exp, long c)\n> You may use __builtin_expect to provide the compiler with branch prediction information. In general, you should prefer to use actual profile feedback for this (-fprofile-arcs), as programmers are notoriously bad at predicting how their programs actually perform. However, there are applications in which this data is hard to collect.\n> \n> The return value is the value of exp, which should be an integral expression. The semantics of the built-in are that it is expected that exp == c. For example:\n> \n>           if (__builtin_expect (x, 0))\n>             foo ();\n> indicates that we do not expect to call foo, since we expect x to be zero. Since you are limited to integral expressions for exp, you should use constructions such as\n> \n>           if (__builtin_expect (ptr != NULL, 1))\n>             foo (*ptr);\n> when testing pointer or floating-point values.\n\nbranch prediction, \u5206\u5c90\u4e88\u6e2c\u3067\u3059\u306d\uff01\n\u3064\u307e\u308a`__builtin_expect`\u306f\u5206\u5c90\u4e88\u6e2c\u306e\u305f\u3081\u306b\u3001\u6307\u5b9a\u3055\u308c\u305fexp\u304c\u5b9f\u969b\u306b\u53d6\u308b\u300c\u3088\u304f\u3042\u308b\u5024\u300d\u3092\u793a\u3059\u305f\u3081\u306eGCC\u7d44\u8fbc\u307f\u95a2\u6570\u306e\u3088\u3046\u3067\u3059\u3002\n\u3053\u306eGCC\u7d44\u8fbc\u307f\u95a2\u6570\u3067\u826f\u304f\u3042\u308b\u5024\u3092\u793a\u3057\u3066\u304a\u304f\u3053\u3068\u3067GCC\u306f\u3088\u308a\u305d\u306e\u5206\u5c90\u3092\u884c\u3046\u6642\u306b\u9069\u5207\u306a\u30b3\u30fc\u30c9\u3092\u5410\u304d\u51fa\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u3042\u3089\u305f\u3081\u3066LIKELY, UNLIKELY\u3092\u8aad\u3080\n---------------------------------\n\nLIKELY, UNLIKELY\u306eGCC\u7248\u306e\u90e8\u5206\u3060\u3051\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c\n#define LIKELY(x)   (__builtin_expect((x), 1))\n#define UNLIKELY(x) (__builtin_expect((x), 0))\n```\n\n`__builtin_expect`\u306f\u7b2c\u4e00\u5f15\u6570\u306e\u5f0f\u304c\u3001\u983b\u7e41\u306b\u7b2c\u4e8c\u5f15\u6570\u306e\u5024\u3092\u53d6\u308b\u3053\u3068\u3092\u793a\u3059\u7d44\u8fbc\u307f\u95a2\u6570\u3067\u3057\u305f\u3002\n\u3067\u3059\u304b\u3089\u3001LIKELY(x)\u306f\u5f0fx\u304c\u983b\u7e41\u306b1(\u5927\u62b5\u306e\u5834\u5408TRUE\u306e\u5024)\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u3001UNLIKELY(x)\u306fx\u304c\u983b\u7e41\u306b0(FALSE\u306e\u5024)\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n\n\u3064\u307e\u308b\u3068\u3053\u308d\u9069\u5207\u306aLIKELY(x), UNLIKELY(x)\u3092\u5165\u308c\u308b\u3053\u3068\u3067cruby\u306fGCC\u30d3\u30eb\u30c9\u6642\u306e\u52d5\u4f5c\u901f\u5ea6\u3092\u5411\u4e0a\u3055\u305b\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u306a\u308b\u307b\u3069\u3002\n\n\n\u307e\u3068\u3081\n---------------------------------\n\n- LIKELY, UNLIKELY\u306f\u5206\u5c90\u4e88\u6e2c\u306e\u305f\u3081\u306e\u88dc\u52a9\u60c5\u5831\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4e0e\u3048\u308b\u305f\u3081\u306e\u30de\u30af\u30ed\n\t- LIKELY\u306f\u5927\u62b5TRUE\u306b\u306a\u308b\u5f0f\u3092\u76f8\u624b\u306b\u3064\u304b\u3046\n\t- UNLIKELY\u306f\u5927\u62b5FALSE\u306b\u306a\u308b\u5f0f\u3092\u76f8\u624b\u306b\u3064\u304b\u3046\n- CRuby\u306f\u5206\u5c90\u4e88\u6e2c\u306b\u3064\u3044\u3066\u72ec\u81ea\u62e1\u5f35\u3082\u542b\u3081\u3066\u7d30\u304b\u304f\u8abf\u7bc0\u3092\u884c\u3063\u3066\u3044\u308b\n\n\n\u3068\u3053\u308d\u3067\u3002\n--------------------------------\n\nLIKELY\u306e\u5024\u304c1\u3068\u3044\u3046\u6307\u5b9a\u306b\u306a\u3063\u3066\u308b\u306e\u3067\u3059\u304c\u3001\u6bd4\u8f03\u5f0f\u306e\u7d50\u679c\u304c0\u4ee5\u5916\u306b\u306a\u308b\u5834\u5408\u3068\u304b\u5927\u4e08\u592b\u306a\u3093\u3060\u308d\u3046\u304b\uff1f\n\u305f\u3076\u3093\u5426\u5b9a\u3092\u660e\u793a\u7684\u306b\u53d6\u3063\u305f`!flag`\u307f\u305f\u3044\u306a\u5834\u5408\u306f\u5927\u4e08\u592b\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001`ptr`\u306b\u5bfe\u3059\u308bNULL\u30c1\u30a7\u30c3\u30af\u3092`LIKELY( ptr )`\u3063\u3066\u3084\u308b\u3068\u5024\u306f1\u3067\u306f\u306a\u3044\u306f\u305a\u3002\u305d\u3046\u3044\u3046\u306e\u306f\u554f\u984c\u7121\u304f\u3053\u308c\u3067\u89e3\u6d88\u3055\u308c\u308b\u306e\u304b\u306a\uff1f\n\u8aad\u3093\u3060\u6642\u70b9\u3067\u306fruby\u306e\u30d1\u30d5\u30a9\u30de\u30f3\u30b9\u6e2c\u5b9a\u3092\u3069\u3046\u5b9f\u65bd\u3057\u305f\u3089\u3044\u3044\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3061\u3087\u3063\u3068\u5b9f\u9a13\u3057\u3066\u306a\u3044\u3067\u3059\u304c\u3001\n\u305f\u3068\u3048\u3070`#define LIKELY(x) __builtin_expect(!!(x),1)`\u307f\u305f\u3044\u306a\u5b9f\u88c5\u3068\u304b\u65e2\u306b\u904e\u53bb\u306b\u8a66\u3055\u308c\u3066\u3044\u308b\u306e\u3060\u308d\u3046\u304b\u2026\u2026\uff1f\n(\u3044\u3084\u52ff\u8ad6\u3053\u308c\u306f`!!`\u3092\u901a\u3057\u3061\u3083\u3046\u6642\u70b9\u3067\u9006\u306b\u91cd\u305f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u308f\u3051\u3067\u3001\u3042\u304f\u307e\u3067\u4e00\u4f8b\u3067\u3001\u3061\u3087\u3063\u3068\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u7d50\u679c\u306b\u306a\u308a\u305d\u3046\u3060\u3051\u3069\u3002)\n"}