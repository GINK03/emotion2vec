{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nConnectathon test suite\u306eREADME\u3092markdown\u5f62\u5f0f\u306b\u6574\u5f62\u3057\u3066\u307f\u3084\u3059\u304f\u3059\u308b\u3002\n\nConnectathon test suite\u3068\u306f\nConnectathon test suite - Linux NFS\n\nThe Connectathon tests run on top of an NFS mount, and therefore test the behavior of a real (kernel) NFS client against a server. They can also be used for testing filesystems other than NFS. \n\nConnectathon, cthon04\u3068\u3057\u3066\u8a00\u53ca\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308b\u3002\n\u4ee5\u4e0b git.linux-nfs.org Git - steved/cthon04.git/summary\u3088\u308a\n#\n#   @(#)README  1.18 2003/12/30 Connectathon Testsuite\n#\nNFS and Connectathon are trademarks of Sun Microsystems, Inc.\n\n\nIntroduction to the Connectathon NFS Testsuites\nThese directories contain programs that can be used to test an\nimplementation of the NFS Protocol.  The tests run on a UNIX client and\ntest server and client functions.  (See READWIN.txt for information\nabout running on DOS and Windows.)  The tests are divided into three\ngroups:\nbasic   - basic file system operations tests\ngeneral - general file system tests\nspecial - tests that poke certain common problem areas\nlock    - tests that exercise network locking\n\nThis README is divided into five sections.  The first section is the\nintroduction, which you are reading now.  That is followed by a\ndescription of what you have to do before you run the testsuites on\nyour machine.  Then comes a description of how the testsuites are run\nin general followed by a description of how they are used at\nConnectathon.  The last section describes what each test does in\ndetail.\nThis testsuite should run on both BSD and System V based systems.  The\nSystem V Release 3 port of the Connectathon Testsuite is provided\ncourtesy of the Lachman Technology, Incorporated, 1901 N. Naper Blvd.,\nNaperville, IL.  60563.\n\nPreparing to run the Testsuites\nTo prepare to run the testsuites on your machine, change directories\nto the highest level testsuite directory (it should be the same one\nthat contains this README file), edit tests.init according to the\nplatform you are on, and type \"make\" to compile the test programs.  If\nyou are not sure you are in the correct directory, type \"ls -CF\" and\nyou should see the following files and directories:\nMakefile    basic/      lock/       tests.h\nREADME      domount.c   runtests    tests.init\nREADWIN.txt general/    server      tools/\nTestitems   getopt.c    special/    unixdos.h\n\nThe \"server\" script uses \"getopt\".  A source file of a public-domain\nversion of \"getopt\" is included in the directory.  The Makefile will\ncompile it for you.\nThe tests are configured according to parameters found in the script,\ntests.init.  It contains various definitions for commands and\nparameters used by the various Makefiles and shell scripts.  This file\nshould be checked and then perhaps modified to correctly match your\nsystem.  In particular, the values of \"MOUNTCMD\", \"UMOUNTCMD\", \"PATH\",\n\"CFLAGS\", and \"LIBS\" should be checked and set correctly.  There are\nseveral sets of suggested values which may be used as possible starting\nplaces.\nTwo special targets are included in the Makefiles: copy and dist. The\ncommand, \"make copy DESTDIR=\"path\"\", where \"path\" is the absolute name\nof a directory, will cause the compiled tests to be copied to \"path\".\nThe command, \"make dist DESTDIR=\"path\"\", where \"path\" is the absolute\nname of a directory, will copy the test sources to \"path\".  DESTDIR\nmust be specified on the make command line when making either of these\ntargets.\nModifications may be required so the programs compile on your machine.\nIf that is so, we would like to know what they are so that we can\nincorporate them into our distribution.\nWhen defaults are used, the test programs expect the directory,\n/server, to exist on the server.  The test driver will use the\ndirectory /mnt/'server_name' on the client, creating it first if\nnecessary (where 'server_name' is the name of the server you are\ntesting against).  These defaults can be overridden at run time.\nDirections for doing this are contained in the next section.\n\nHow to run the Testsuites\nThere are two ways to run the tests: use the server shell script or\nmount, run the tests yourself, and unmount.  We recommend you use the\nserver script to run the tests.\n\nThe server script:\nThe server script executes one or more of the test sets depending on\nwhat option is given (see below).  It is set up to mount, run tests\nusing the runtests program, and unmount.  It will attempt to unmount\nanything mounted on the mount point before attempting to mount the\nserver file system.  If a test fails, the run is aborted and the file\nsystem is left mounted to assist in troubleshooting the failure.\nThe server script uses the domount program to mount and unmount the\ntest file systems.  Since mount can only be executed by root, domount\nmust have root permission.  The Makefile will attempt to setuid the\ndomount program to root.  The server script can be run as a\nnonprivileged user.  Alternately, you may login as root before you run\nserver.\nserver [-a|-b|-g|-s|-l] [-f|-t] [-n] [-o mnt_options] [-p server_path] [-m mntpoint] [-N numpasses] server_name\n\n-a|-b|-g|-s|-l - will be passed on to the runtests scripts.  This argument\n          is optional.  The default is read from the initialization\n          file, tests.init.  The variable, TEST, contains this\n          argument.\n          This argument selects which tests to run:\n        -a  run basic, general, special, and lock tests\n        -b  run basic tests only\n        -g  run general tests only\n        -s  run special tests only\n        -l  run lock tests only\n-f|-t       - will be passed on to the runtests scripts.  This argument\n          is optional.  The default is read from the initialization\n          file, tests.init.  The variable, TESTARG, contains this\n          argument.\n          This argument selects how the basic tests are to be run:\n        -f  a quick functionality test\n        -t  extended test mode with timings\n-n      - Don't perform the mkdir and rmdir operations to create\n          and destroy the test directory.\n-o mnt_options - will be passed on to the mount command.  This argument is\n          optional.  The default is read from the initialization\n          file, tests.init.  The variable, MNTOPTIONS, contains this\n          argument.\n-p server_path - specifies a directory on the server to mount.  This\n          argument is optional.  The default is read from the\n          initialization file, tests.init.  The variable, SERVPATH,\n          contains this argument.\n-m mntpoint    - specifies a mount point on your client. This argument is\n          optional.  The default is read from the initialization\n          file, tests.init.  The variable, MNTPOINT, contains this\n          argument.\n-N numpasses - will be passed to the runtests script.  This argument\n          is optional.  It specifies the number of times to run\n          through the tests.\nserver_name - the server you want to exercise.  This is the only\n          required argument.\n\nThe test programs create a sub-directory in the mntpoint directory with\nthe name, 'hostname'.test, (where 'hostname' is the name of the machine\non which you run the tests).  This name can not be overridden if you\nuse the server script although it can be if you use runtests directly.\n\nExample:  (the client machine is eddie)\neddie% server -o hard,intr,rw slartibartfarst\nStart tests on path /mnt.slartibartfast/eddie.test [y/n]? y\n<output from tests>\n         :\n         :\nAll tests completed\neddie%\n\nSee the script for more details.\n\nRun tests yourself:\nThere is a runtest script in the highest level directory (the master\nruntests) which uses tests.init to set up the test environment and then\nexecutes the runtest scripts in the basic, general, and/or special\nsub-directories.\nruntests [-a|-b|-g|-s|-l] [-f|-n|-t] [-N numpasses] [test-directory]\n\n-a             - Run the basic, general, special, and lock tests.  This\n         is the default.\n-b         - Run the basic tests.\n-g         - Run the general tests.\n-s         - Run the special tests.\n-l         - Run the lock tests.\n-f         - Set parameters for a quick functional test.  It\n         applies only to basic tests.\n-n             - Suppress directory operations (mkdir and rmdir) on the\n         test-directory.  See descriptions of basic tests for\n         more details.\n-t             - Run full-length test with running time statistics. It\n         only applies to basic tests.  This is the default mode\n         for the basic tests.\n-N numpasses   - Run the tests \"numpasses\" times.\ntest-directory - The name of test directory that the test programs\n         create on the client.  runtests executes the basic\n         tests in place and they work on the test directory.\n         The general tests are copied over to the test\n         directory and executed there.  When the -n flag is\n         used, the test directory is assumed to already exist.\n\n         The default test-directory is\n         /mnt.'servername'/'hostname'.test (where 'servername'\n         is the name of the server being tested, and\n         'hostname' is the name of the machine on which you\n         are running the tests).  There are three ways to\n         override the default test directory name.  One it to\n         put the test_directory on the command line.  Another\n         way is to set the environment variable, NFSTESTDIR,\n         equal to the directory name.  The command line method\n         overrides setting the environment variable.  The\n         third way can only be used for the tests in the basic\n         sub-directory.  There you can set the TESTDIR\n         variable in tests.h.  The command line and\n         environment variable both override this method.\n\nRunning the tests without mounting your NFS server on /mnt will run the\ntests locally (if /mnt is local disk).  We recommend that you do this\nonce to make sure the testsuites run properly before you use them to\ntest NFS.\nThe runtests in the sub-directories, basic, general, and special, may\nbe invoked with the same arguments as the master runtests if you wish\nto run each suite separately.\n\nHow to run the Testsuites at Connectathon\nThe tests should be run in the following order: basic, general, and\nspecial.  The basic tests should be passed completely before other\ntests are attempted.\nThe NFS Test Suite should be run in three phases:\nPhase 1 - Run test programs locally.\nPhase 2 - Run the tests against a Sun.  Run them on your machine using\n      the Sun as the server and then run them on the Sun using your\n      machine as the server.\nPhase 3 - NxN Testing.  Run the tests on your machine using every other\n      machine as a server,  one at a time.  After the tests are\n      successfully completed using a particular server, log that\n      with the electronic board software provided.  Check the\n      electronic board to make sure that the tests run successfully\n      on every other machine that uses your machine as a server.\n\nTest Descriptions\nSystem and library calls that are used by the testsuites are included\nin parentheses.  Look at the source if you are interested in how time\nstatistics are recorded since that is not included in this description.\n\nBASIC TESTS:\nMany of the programs listed below have optional calling parameters that\ncan be used to override existing parameters.  These are not used at\nthis time so they are not described.\n\ntest1: File and Directory Creation Test\nThis program creates the test directory (mkdir) on the client and\nchanges directories (chdir) to it, unless the -n flag is used in which\ncase it simply changes directories to the test directory.  Then it\nbuilds a directory tree N levels deep, where each directory (including\nthe test directory) has M files and P directories (creat, close, chdir,\nand mkdir).  For the -f option, N = 2, M = 2, and P = 2 so a total of\nsix files and six directories are created.  For other options, N = 5,\nM = 5, and P = 2.  The files that are created are given names that\nbegin with \"file.\" and directories with names that begin with \"dir.\".\n\ntest2: File and directory removal test\nThis program changes directory to the test directory (chdir and/or\nmkdir) and removes the directory tree (unlink, chdir, and rmdir) that\nwas just created by test1.  The number of levels, files, and\ndirectories, and the name prefixes, are the same as in test1.\nThis routine will not remove a file or directory that was not created\nby test1 and will fail if it finds one.  It determines this by looking\nat the prefix on the name of the object it's trying to remove.\n\ntest3: Lookups across mount point\nThis program changes directory to the test directory (chdir and/or\nmkdir) and gets the file status of the working directory (getwd or\ngetcwd and stat).  For the -f option, the getwd or getcwd is done once.\nFor other options, 250 getcwds or getcwds are done.\n\ntest4: setattr, getattr, and lookup\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates ten files (creat).  Then the permissions are changed\n(chmod) and the file status is retrieved (stat) for each file.  For the\n-f option, one chmod and stat on each file is done.  For other options,\n50 getcwds or getcwds and stats on each file are done.\n\ntest4a:  getattr, and lookup\nThis test exists but is not called as part of the testsuite.  You can\nedit runtests in the basic directory so this test is called.\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates ten files (creat).  Then the file status is\nretrieved (stat) for each file.  For the -f option, the stat is done\nonce per file.  For other options, 50 stats are done per file.\n\ntest5: read and write\nThis program changes directory to the test directory (chdir and/or\nmkdir) and then:\n\nCreates a file (creat)\nGets status of file (fstat)\nChecks size of file\nWrites 1048576 bytes into the file (write) in 8192 byte buffers.\nCloses file (close)\nGets status of file (stat)\nChecks the size of the file\n\nFor the -f option, the file is created and written once.  For other\noptions, file is created and written 10 times.\nThen the file is opened (open) and read (read) in 8192 byte buffers.\nIt's contents are compared with what was written.  The file is then\nclosed (close).\nThen the file is then re-opened (open) and re-read (read) before it is\nremoved (unlink).  For the -f option, this sequence is done once.  For\nother options, this sequence is done 10 times.\n\ntest5a: write\nThis test exists but is not called as part of the testsuite.  You can\nedit runtests in the basic directory so this test is called.\nThis program changes directory to the test directory (chdir and/or\nmkdir) and then:\n\nCreates a file (creat)\nGets status of file (fstat)\nChecks size of file\nWrites 1048576 bytes into the file (write) in 8192 byte buffers.\nCloses file (close)\nGets status of file (stat)\nChecks the size of the file\n\nFor the -f option, the file is created and written once.  For other\noptions, file is created and written 10 times.\n\ntest5b: read\nThis test exists but is not called as part of the testsuite.  You can\nedit runtests in the basic directory so this test is called.\nThe file created in test5a is opened (open) and read (read) in 8192 byte\nbuffers.  It's contents are compared with what was written.  The file is\nthen closed (close) and removed (unlink).\nFor the -f option, the file is opened and read once.  For other\noptions, file is created and written 10 times.\n\ntest6: readdir\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates 200 files (creat).  The current directory is opened\n(opendir), the beginning is found (rewinddir), and the directory is\nread (readdir) in a loop until the end is found.  Errors flagged are:\n\nNo entry for \".\"\nNo entry for \"..\"\nDuplicate entry\nFilename that doesn't begin with \"file.\"\nThe suffix of the filename is out of range\nAn entry is returned for an unlinked file. (This error can only be\nfound when the test is run with an option other than -f.   For other\noptions the rewinddir/readdir loop is done 200 times and a file is\nunlinked each time).\n\nThe directory is then closed (closedir) and the files that were created\nare removed (unlink).\n\ntest7: link and rename\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates ten files.  For each of these files, the file is\nrenamed (rename) and file statistics are retrieved (stat) for both the\nnew and old names.  Errors that are flagged are:\n\nOld file still exists\nNew file doesn't exist (can't stat)\nThe new file's number of links doesn't equal one\n\nThen an attempt is made to link the new file to it's old name (link)\nand file stats are again retrieved (stat).  An error is flagged if:\n\nCan't link\nStats on new file can't be retrieved after link\nThe new file's number of links doesn't equal two\nStats on old file can't be retrieved after link\nThe old file's number of links doesn't equal two\n\nThen the new file is removed (unlink) and file stats are retrieved for\nthe old file (stat).  An error is flagged if:\n\nStats on old file can't be retrieved after unlink\nThe old file's number of links doesn't equal one\n\nFor the -f option, the rename/link/unlink loop is done once for each\nfile.  For other options, the rename/link/unlink loop is done 10 times\nfor each file.\nAny files that remain at the end of the test are removed (unlink).\n\ntest7a: rename\nThis test exists but is not called as part of the testsuite.  You can\nedit runtests in the basic directory so this test is called.\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates ten files.  For each of these files, the file is\nrenamed (rename) and file statistics are retrieved (stat) for both the\nnew and old names.  Errors that are flagged are:\n\nOld file still exists\nNew file doesn't exist (can't stat)\nThe new file's number of links doesn't equal one\n\nThe file is then renamed back to its original name and the same tests\nare applied.\nFor the -f option, the rename/rename loop is done once for each file.\nFor other options, the rename/rename loop is done 10 times for each\nfile.\nAny files that remain at the end of the test are removed (unlink).\n\ntest7b: link\nThis test exists but is not called as part of the testsuite.  You can\nedit runtests in the basic directory so this test is called.\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates ten files.  A link (link) is done for each of these\nfiles and file stats are retrieved for the old and new files (stat).\nAn error is flagged if:\n\nCan't link\nStats on either file can't be retrieved after link\nThe either file's number of links doesn't equal two\n\nThis is followed by an unlink (unlink) of the new file.  An error is\nflagged if:\n\nStats on the old file can't be retrieved after unlink\nThe old file's number of links doesn't equal one\n\nFor the -f option, the link/unlink loop is done once for each file.\nFor other options, the link/unlink loop is done 10 times for each file.\nAny files that remain at the end of the test are removed (unlink).\n\ntest8: symlink and readlink\nNOTE:   Not all operating systems support symlink and readlink.  If the\n    errno, EOPNOTSUPP, is returned during test8, the test will be\n    counted as passing.  For clients not supporting S_IFLNK, the\n    test will not be attempted.\nThis program changes directory to the test directory (chdir and/or\nmkdir) and makes 10 symlinks (symlink).  It reads (readlink), and gets\nstatistics for (lstat) each, and then removes them (unlink).  Errors\nflagged are:\n\nUnsupported function\nCan't get statistics (lstat failed)\nThe mode in the stats is not symlink\nThe value of the symlink is incorrect (returned from readlink)\nThe linkname is wrong\nThe unlink failed\n\nFor the -f option, the symlink/readlink/unlink loop is done for each\nsymlink.  For other options, the symlink/readlink/unlink loop is done\n20 times for each symlink.\n\ntest9: statfs\nThis program changes directory to the test directory (chdir and/or\nmkdir) and gets the file system status on the current directory\n(statfs).  For the -f option, the statfs is done once.  For other\noptions, the statfs is done 1500 times.\n\nGENERAL:  General tests to look at server loading.\nRuns a small compile, tbl, nroff, a large compile, four simultaneous\nlarge compiles, and make.\n\nSPECIAL:  Information specific to the special tests\nThe special directory is set up to test special problems that have come\nup in the past.  These tests are meant to be advisory, things to watch\nout for.  It is not required that you \"pass\" these tests but we\nstrongly suggest that you do.\nThe tests try to:\n  check for proper open/unlink operation\n  check for proper open/rename operation\n  check for proper open/chmod 0 operation\n  check for lost reply on non-idempotent requests\n  test exclusive create\n  test negative seek\n  test rename\n\n\nLOCK:\nThe lock directory contains a test program which can be used to test\nthe kernel file and record locking facilities.  This is done to test\nthe network lock manager.\nThe test program contains 13 sets of locking tests.  They test basic\nlocking functionality.\nBy default, mandatory locking is not tested.  Mandatory locking is\ngenerally not supported on NFS files.\n\nMISC:\n'Testitems' is a list of NFS functionality that can be used for\nreference.\nPrograms in 'tools' are provided for your use as you see fit.  Please\nfeel free to add to this (or any other) directory!  If you do, please\nmake sure that Mike Kupfer mike.kupfer@sun.com gets a copy so we can\nadd it to the master test distribution.\nThe code in this tree was checked August 1998 for Y2000 problems.\nNone were found.\nSee READWIN.txt for information about running the tests under DOS or\nWindows.\n\nChanges\n\nChanges for 2004 include the following:\n\nFix lock/tlock.c to be consistent about when to use stdarg and when\nto use varargs; reported by Samuel Sha sam@austin.ibm.com.\nChange \"make all\" so that the various \"runtests\" scripts have the\nexecute bit set; reported by Erik Deumens deumens@qtp.ufl.edu.\nRemoved some lint; from James Peach jpeach@sgi.com.\nIrix 6.5.19 support from James Peach jpeach@sgi.com.\nThe \"server\" script now exports MNTOPTIONS, so that options that\nare added to \"server\" can be detected by the rest of the suite.\nFrom Chuck Lever Charles.Lever@netapp.com.\nThe tests now correctly check for errors returns from mmap().  From\nDavid Robinson david.robinson@sun.com.\nMacOS X support from Mike Mackovitch macko@apple.com.\ntests.init now includes a CC= line for Linux, in case your\ndistribution doesn't include \"cc\".  Reported by Rodney Brown\nrodney@lehman.com.\nChanges for AIX, from Erik Deumens deumens@qtp.ufl.edu.\nChanges for the latest Tru64 Unix, from Eric Werme\nwerme@hp.com.\nThe general tests should be more robust in the face of errors from\nmake(1).  Based on comments from Chuck Lever\nCharles.Lever@netapp.com and a patch from Mike Mackovitch\nmacko@apple.com.\nThe \"make lint\" target for the basic tests now includes subr.c.\n\nImprovements to special/bigfile2:\n\nerror messages now print the complete low-order word (from Mike\nMackovitch macko@apple.com.\nthe test file is opened with O_SYNC, so that problems are\ndetected right away.\n\n\nFix to special/op_chmod so that it uses CHMOD_NONE instead\nof 0.  From Pascal Schmidt der.eremit@email.de.\n\n\nChanges for 2003 include the following:\n\nHPUX fixes from Brian Love blove@rlmsoftware.com and Brian\nMcEntire brianm@fsg1.nws.noaa.gov.\nAIX support, based on patches from saul@exanet.com.\ngcc command-line options for building 64-bit binaries, from\nSergey Klyushin sergey.klyushin@hummingbird.com.\nThe messages from the server script are now a little clearer about\nleaving the server mounted after a test failure.  Thanks to Vincent\nMcIntyre Vince.McIntyre@atnf.csiro.au for the suggestion.\nThe locking tests should now work with NFS Version 4 and servers\nthat enforce mandatory locking.  Thanks to Bill Baker\nbill.baker@sun.com for the test12 fix.\nThe general tests have been fixed to use the \"stat\" program that\ncomes with the tests, instead of any system \"stat\" program.\n\n\nChanges for 2002 include the following:\n\nThe special tests do a better job of recognizing when NFS version 2\nwas specified (based on a patch from Jay Weber\njweber@mail.thatnet.net).\nCompilation and runtime fixes for *BSD systems, based on patches\nfrom Marty Johnson martyj@traakan.com.\nThe default local mount point was changed from /mnt.'server_name'\nto /mnt/'server_name'.  This is so that if the server dies or\nhangs, it is less likely to cause operational problems on the\nclient.\nThe \"server\" script will try to use \"mkdir -p\" if it's available.\nThe general and special tests do a better job of checking for\nerrors during initialization.\nThe bigfile tests have been moved to the end of the special tests\nbecause they can take so long to run.\nFixed the definition of signal handlers for Tru64 UNIX.\nUpdated Linux configuration information from Jay Weber\njweber@mail.thatnet.net.\n\n\nChanges for 2001 include the following:\n\nAdded a \"-N numpasses\" option to the top-level \"server\" and\n\"runtests\" script.\nUpdated HPUX compilation flags for the benefit of the\nspecial/bigfile2 test (from Anand Paladugu ).\nMinor portability fixes to special/bigfile2.c.\nThe basic tests no longer assume that \".\" is in $PATH.\nThe basic and special tests should be easier to build under Windows\n(from Rick Hopkins rhopkins@ssc-corp.com).\n\n\n\u304a\u307e\u3051\n\nGitHub pages\u7248\n\n\nhttp://thombashi.github.io/Connectathon_README\n\n\n\u306f\u3066\u306a\u30d6\u30ed\u30b0\u7248\n\n\nhttp://vmmhypervisor.hatenablog.com/entry/2016/01/14/004828\n\n\n\n\u500b\u4eba\u7684\u306b\u306fQiita\u304c\u4e00\u756a\u898b\u3084\u3059\u3044\u3002\n\u9577\u3044\u6587\u3060\u3068\u753b\u9762\u6a2a\u306b\u51fa\u308b\u76ee\u6b21\u304c\u4fbf\u5229\u3002\n# \u6982\u8981\nConnectathon test suite\u306eREADME\u3092markdown\u5f62\u5f0f\u306b\u6574\u5f62\u3057\u3066\u307f\u3084\u3059\u304f\u3059\u308b\u3002\n\n\n# Connectathon test suite\u3068\u306f\n[Connectathon test suite - Linux NFS](http://wiki.linux-nfs.org/wiki/index.php/Connectathon_test_suite)\n\n>The Connectathon tests run on top of an NFS mount, and therefore test the behavior of a real (kernel) NFS client against a server. They can also be used for testing filesystems other than NFS. \n\n`Connectathon`, `cthon04`\u3068\u3057\u3066\u8a00\u53ca\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308b\u3002\n\n\u4ee5\u4e0b [git.linux-nfs.org Git - steved/cthon04.git/summary](http://git.linux-nfs.org/?p=steved/cthon04.git)\u3088\u308a\n\n```\n#\n#\t@(#)README\t1.18 2003/12/30 Connectathon Testsuite\n#\nNFS and Connectathon are trademarks of Sun Microsystems, Inc.\n```\n\n\n# Introduction to the Connectathon NFS Testsuites\nThese directories contain programs that can be used to test an\nimplementation of the NFS Protocol.  The tests run on a UNIX client and\ntest server and client functions.  (See READWIN.txt for information\nabout running on DOS and Windows.)  The tests are divided into three\ngroups:\n\n\tbasic   - basic file system operations tests\n\tgeneral - general file system tests\n\tspecial - tests that poke certain common problem areas\n\tlock    - tests that exercise network locking\n\nThis README is divided into five sections.  The first section is the\nintroduction, which you are reading now.  That is followed by a\ndescription of what you have to do before you run the testsuites on\nyour machine.  Then comes a description of how the testsuites are run\nin general followed by a description of how they are used at\nConnectathon.  The last section describes what each test does in\ndetail.\n\nThis testsuite should run on both BSD and System V based systems.  The\nSystem V Release 3 port of the Connectathon Testsuite is provided\ncourtesy of the Lachman Technology, Incorporated, 1901 N. Naper Blvd.,\nNaperville, IL.  60563.\n\n\n# Preparing to run the Testsuites\nTo prepare to run the testsuites on your machine, change directories\nto the highest level testsuite directory (it should be the same one\nthat contains this README file), edit tests.init according to the\nplatform you are on, and type \"make\" to compile the test programs.  If\nyou are not sure you are in the correct directory, type \"ls -CF\" and\nyou should see the following files and directories:\n\n```console\nMakefile\tbasic/\t\tlock/\t\ttests.h\nREADME\t\tdomount.c\truntests\ttests.init\nREADWIN.txt\tgeneral/\tserver\t\ttools/\nTestitems\tgetopt.c\tspecial/\tunixdos.h\n```\n\nThe \"server\" script uses \"getopt\".  A source file of a public-domain\nversion of \"getopt\" is included in the directory.  The Makefile will\ncompile it for you.\n\nThe tests are configured according to parameters found in the script,\ntests.init.  It contains various definitions for commands and\nparameters used by the various Makefiles and shell scripts.  This file\nshould be checked and then perhaps modified to correctly match your\nsystem.  In particular, the values of \"MOUNTCMD\", \"UMOUNTCMD\", \"PATH\",\n\"CFLAGS\", and \"LIBS\" should be checked and set correctly.  There are\nseveral sets of suggested values which may be used as possible starting\nplaces.\n\nTwo special targets are included in the Makefiles: copy and dist. The\ncommand, \"make copy DESTDIR=\"path\"\", where \"path\" is the absolute name\nof a directory, will cause the compiled tests to be copied to \"path\".\nThe command, \"make dist DESTDIR=\"path\"\", where \"path\" is the absolute\nname of a directory, will copy the test sources to \"path\".  DESTDIR\nmust be specified on the make command line when making either of these\ntargets.\n\nModifications may be required so the programs compile on your machine.\nIf that is so, we would like to know what they are so that we can\nincorporate them into our distribution.\n\nWhen defaults are used, the test programs expect the directory,\n/server, to exist on the server.  The test driver will use the\ndirectory /mnt/'server_name' on the client, creating it first if\nnecessary (where 'server_name' is the name of the server you are\ntesting against).  These defaults can be overridden at run time.\nDirections for doing this are contained in the next section.\n\n\n# How to run the Testsuites\nThere are two ways to run the tests: use the server shell script or\nmount, run the tests yourself, and unmount.  We recommend you use the\nserver script to run the tests.\n\n## The server script:\nThe server script executes one or more of the test sets depending on\nwhat option is given (see below).  It is set up to mount, run tests\nusing the runtests program, and unmount.  It will attempt to unmount\nanything mounted on the mount point before attempting to mount the\nserver file system.  If a test fails, the run is aborted and the file\nsystem is left mounted to assist in troubleshooting the failure.\n\nThe server script uses the domount program to mount and unmount the\ntest file systems.  Since mount can only be executed by root, domount\nmust have root permission.  The Makefile will attempt to setuid the\ndomount program to root.  The server script can be run as a\nnonprivileged user.  Alternately, you may login as root before you run\nserver.\n\n```\nserver [-a|-b|-g|-s|-l] [-f|-t] [-n] [-o mnt_options] [-p server_path] [-m mntpoint] [-N numpasses] server_name\n\n-a|-b|-g|-s|-l - will be passed on to the runtests scripts.  This argument\n\t      is optional.  The default is read from the initialization\n\t      file, tests.init.  The variable, TEST, contains this\n\t      argument.\n\t      This argument selects which tests to run:\n\t\t-a\trun basic, general, special, and lock tests\n\t\t-b\trun basic tests only\n\t\t-g\trun general tests only\n\t\t-s\trun special tests only\n\t\t-l\trun lock tests only\n-f|-t\t    - will be passed on to the runtests scripts.  This argument\n\t      is optional.  The default is read from the initialization\n\t      file, tests.init.  The variable, TESTARG, contains this\n\t      argument.\n\t      This argument selects how the basic tests are to be run:\n\t\t-f\ta quick functionality test\n\t\t-t\textended test mode with timings\n-n\t    - Don't perform the mkdir and rmdir operations to create\n\t      and destroy the test directory.\n-o mnt_options - will be passed on to the mount command.  This argument is\n\t      optional.  The default is read from the initialization\n\t      file, tests.init.  The variable, MNTOPTIONS, contains this\n\t      argument.\n-p server_path - specifies a directory on the server to mount.  This\n\t      argument is optional.  The default is read from the\n\t      initialization file, tests.init.  The variable, SERVPATH,\n\t      contains this argument.\n-m mntpoint    - specifies a mount point on your client. This argument is\n\t      optional.  The default is read from the initialization\n\t      file, tests.init.  The variable, MNTPOINT, contains this\n\t      argument.\n-N numpasses - will be passed to the runtests script.  This argument\n\t      is optional.  It specifies the number of times to run\n\t      through the tests.\nserver_name - the server you want to exercise.  This is the only\n\t      required argument.\n```\n\nThe test programs create a sub-directory in the mntpoint directory with\nthe name, 'hostname'.test, (where 'hostname' is the name of the machine\non which you run the tests).  This name can not be overridden if you\nuse the server script although it can be if you use runtests directly.\n\n### Example:  (the client machine is eddie)\n\n```console\neddie% server -o hard,intr,rw slartibartfarst\nStart tests on path /mnt.slartibartfast/eddie.test [y/n]? y\n<output from tests>\n         :\n         :\nAll tests completed\neddie%\n```\n\nSee the script for more details.\n\n\n## Run tests yourself:\nThere is a runtest script in the highest level directory (the master\nruntests) which uses tests.init to set up the test environment and then\nexecutes the runtest scripts in the basic, general, and/or special\nsub-directories.\n\n```\nruntests [-a|-b|-g|-s|-l] [-f|-n|-t] [-N numpasses] [test-directory]\n\n-a             - Run the basic, general, special, and lock tests.  This\n\t\t is the default.\n-b\t       - Run the basic tests.\n-g\t       - Run the general tests.\n-s\t       - Run the special tests.\n-l\t       - Run the lock tests.\n-f\t       - Set parameters for a quick functional test.  It\n\t\t applies only to basic tests.\n-n             - Suppress directory operations (mkdir and rmdir) on the\n\t\t test-directory.  See descriptions of basic tests for\n\t\t more details.\n-t             - Run full-length test with running time statistics. It\n\t\t only applies to basic tests.  This is the default mode\n\t\t for the basic tests.\n-N numpasses   - Run the tests \"numpasses\" times.\ntest-directory - The name of test directory that the test programs\n\t\t create on the client.  runtests executes the basic\n\t\t tests in place and they work on the test directory.\n\t\t The general tests are copied over to the test\n\t\t directory and executed there.  When the -n flag is\n\t\t used, the test directory is assumed to already exist.\n\n\t\t The default test-directory is\n\t\t /mnt.'servername'/'hostname'.test (where 'servername'\n\t\t is the name of the server being tested, and\n\t\t 'hostname' is the name of the machine on which you\n\t\t are running the tests).  There are three ways to\n\t\t override the default test directory name.  One it to\n\t\t put the test_directory on the command line.  Another\n\t\t way is to set the environment variable, NFSTESTDIR,\n\t\t equal to the directory name.  The command line method\n\t\t overrides setting the environment variable.  The\n\t\t third way can only be used for the tests in the basic\n\t\t sub-directory.  There you can set the TESTDIR\n\t\t variable in tests.h.  The command line and\n\t\t environment variable both override this method.\n```\n\nRunning the tests without mounting your NFS server on /mnt will run the\ntests locally (if /mnt is local disk).  We recommend that you do this\nonce to make sure the testsuites run properly before you use them to\ntest NFS.\n\nThe runtests in the sub-directories, basic, general, and special, may\nbe invoked with the same arguments as the master runtests if you wish\nto run each suite separately.\n\n\n# How to run the Testsuites at Connectathon\nThe tests should be run in the following order: basic, general, and\nspecial.  The basic tests should be passed completely before other\ntests are attempted.\n\nThe NFS Test Suite should be run in three phases:\n\nPhase 1 - Run test programs locally.\n\nPhase 2 - Run the tests against a Sun.  Run them on your machine using\n\t  the Sun as the server and then run them on the Sun using your\n\t  machine as the server.\n\nPhase 3 - NxN Testing.  Run the tests on your machine using every other\n\t  machine as a server,  one at a time.  After the tests are\n\t  successfully completed using a particular server, log that\n\t  with the electronic board software provided.  Check the\n\t  electronic board to make sure that the tests run successfully\n\t  on every other machine that uses your machine as a server.\n\n\n# Test Descriptions\nSystem and library calls that are used by the testsuites are included\nin parentheses.  Look at the source if you are interested in how time\nstatistics are recorded since that is not included in this description.\n\n## BASIC TESTS:\n\nMany of the programs listed below have optional calling parameters that\ncan be used to override existing parameters.  These are not used at\nthis time so they are not described.\n\n### test1: File and Directory Creation Test\nThis program creates the test directory (mkdir) on the client and\nchanges directories (chdir) to it, unless the -n flag is used in which\ncase it simply changes directories to the test directory.  Then it\nbuilds a directory tree N levels deep, where each directory (including\nthe test directory) has M files and P directories (creat, close, chdir,\nand mkdir).  For the -f option, N = 2, M = 2, and P = 2 so a total of\nsix files and six directories are created.  For other options, N = 5,\nM = 5, and P = 2.  The files that are created are given names that\nbegin with \"file.\" and directories with names that begin with \"dir.\".\n\n### test2: File and directory removal test\nThis program changes directory to the test directory (chdir and/or\nmkdir) and removes the directory tree (unlink, chdir, and rmdir) that\nwas just created by test1.  The number of levels, files, and\ndirectories, and the name prefixes, are the same as in test1.\n\nThis routine will not remove a file or directory that was not created\nby test1 and will fail if it finds one.  It determines this by looking\nat the prefix on the name of the object it's trying to remove.\n\n### test3: Lookups across mount point\nThis program changes directory to the test directory (chdir and/or\nmkdir) and gets the file status of the working directory (getwd or\ngetcwd and stat).  For the -f option, the getwd or getcwd is done once.\nFor other options, 250 getcwds or getcwds are done.\n\n### test4: setattr, getattr, and lookup\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates ten files (creat).  Then the permissions are changed\n(chmod) and the file status is retrieved (stat) for each file.  For the\n-f option, one chmod and stat on each file is done.  For other options,\n50 getcwds or getcwds and stats on each file are done.\n\n#### test4a:  getattr, and lookup\nThis test exists but is not called as part of the testsuite.  You can\nedit runtests in the basic directory so this test is called.\n\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates ten files (creat).  Then the file status is\nretrieved (stat) for each file.  For the -f option, the stat is done\nonce per file.  For other options, 50 stats are done per file.\n\n### test5: read and write\nThis program changes directory to the test directory (chdir and/or\nmkdir) and then:\n\n1. Creates a file (creat)\n2. Gets status of file (fstat)\n3. Checks size of file\n4. Writes 1048576 bytes into the file (write) in 8192 byte buffers.\n5. Closes file (close)\n6. Gets status of file (stat)\n7. Checks the size of the file\n\nFor the -f option, the file is created and written once.  For other\noptions, file is created and written 10 times.\n\nThen the file is opened (open) and read (read) in 8192 byte buffers.\nIt's contents are compared with what was written.  The file is then\nclosed (close).\n\nThen the file is then re-opened (open) and re-read (read) before it is\nremoved (unlink).  For the -f option, this sequence is done once.  For\nother options, this sequence is done 10 times.\n\n#### test5a: write\nThis test exists but is not called as part of the testsuite.  You can\nedit runtests in the basic directory so this test is called.\n\nThis program changes directory to the test directory (chdir and/or\nmkdir) and then:\n\n1. Creates a file (creat)\n2. Gets status of file (fstat)\n3. Checks size of file\n4. Writes 1048576 bytes into the file (write) in 8192 byte buffers.\n5. Closes file (close)\n6. Gets status of file (stat)\n7. Checks the size of the file\n\nFor the -f option, the file is created and written once.  For other\noptions, file is created and written 10 times.\n\n#### test5b: read\nThis test exists but is not called as part of the testsuite.  You can\nedit runtests in the basic directory so this test is called.\n\nThe file created in test5a is opened (open) and read (read) in 8192 byte\nbuffers.  It's contents are compared with what was written.  The file is\nthen closed (close) and removed (unlink).\n\nFor the -f option, the file is opened and read once.  For other\noptions, file is created and written 10 times.\n\n### test6: readdir\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates 200 files (creat).  The current directory is opened\n(opendir), the beginning is found (rewinddir), and the directory is\nread (readdir) in a loop until the end is found.  Errors flagged are:\n\n1. No entry for \".\"\n2. No entry for \"..\"\n3. Duplicate entry\n4. Filename that doesn't begin with \"file.\"\n5. The suffix of the filename is out of range\n6. An entry is returned for an unlinked file. (This error can only be\n   found when the test is run with an option other than -f.   For other\n   options the rewinddir/readdir loop is done 200 times and a file is\n   unlinked each time).\n\nThe directory is then closed (closedir) and the files that were created\nare removed (unlink).\n\n### test7: link and rename\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates ten files.  For each of these files, the file is\nrenamed (rename) and file statistics are retrieved (stat) for both the\nnew and old names.  Errors that are flagged are:\n\n1. Old file still exists\n2. New file doesn't exist (can't stat)\n3. The new file's number of links doesn't equal one\n\nThen an attempt is made to link the new file to it's old name (link)\nand file stats are again retrieved (stat).  An error is flagged if:\n\n1. Can't link\n2. Stats on new file can't be retrieved after link\n3. The new file's number of links doesn't equal two\n4. Stats on old file can't be retrieved after link\n5. The old file's number of links doesn't equal two\n\nThen the new file is removed (unlink) and file stats are retrieved for\nthe old file (stat).  An error is flagged if:\n\n1. Stats on old file can't be retrieved after unlink\n2. The old file's number of links doesn't equal one\n\nFor the -f option, the rename/link/unlink loop is done once for each\nfile.  For other options, the rename/link/unlink loop is done 10 times\nfor each file.\n\nAny files that remain at the end of the test are removed (unlink).\n\n#### test7a: rename\nThis test exists but is not called as part of the testsuite.  You can\nedit runtests in the basic directory so this test is called.\n\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates ten files.  For each of these files, the file is\nrenamed (rename) and file statistics are retrieved (stat) for both the\nnew and old names.  Errors that are flagged are:\n\n1. Old file still exists\n2. New file doesn't exist (can't stat)\n3. The new file's number of links doesn't equal one\n\nThe file is then renamed back to its original name and the same tests\nare applied.\n\nFor the -f option, the rename/rename loop is done once for each file.\nFor other options, the rename/rename loop is done 10 times for each\nfile.\n\nAny files that remain at the end of the test are removed (unlink).\n\n#### test7b: link\nThis test exists but is not called as part of the testsuite.  You can\nedit runtests in the basic directory so this test is called.\n\nThis program changes directory to the test directory (chdir and/or\nmkdir) and creates ten files.  A link (link) is done for each of these\nfiles and file stats are retrieved for the old and new files (stat).\nAn error is flagged if:\n\n1. Can't link\n2. Stats on either file can't be retrieved after link\n3. The either file's number of links doesn't equal two\n\nThis is followed by an unlink (unlink) of the new file.  An error is\nflagged if:\n\n1. Stats on the old file can't be retrieved after unlink\n2. The old file's number of links doesn't equal one\n\nFor the -f option, the link/unlink loop is done once for each file.\nFor other options, the link/unlink loop is done 10 times for each file.\n\nAny files that remain at the end of the test are removed (unlink).\n\n### test8: symlink and readlink\n\nNOTE:   Not all operating systems support symlink and readlink.  If the\n\terrno, EOPNOTSUPP, is returned during test8, the test will be\n\tcounted as passing.  For clients not supporting S_IFLNK, the\n\ttest will not be attempted.\n\nThis program changes directory to the test directory (chdir and/or\nmkdir) and makes 10 symlinks (symlink).  It reads (readlink), and gets\nstatistics for (lstat) each, and then removes them (unlink).  Errors\nflagged are:\n\n1. Unsupported function\n2. Can't get statistics (lstat failed)\n3. The mode in the stats is not symlink\n4. The value of the symlink is incorrect (returned from readlink)\n5. The linkname is wrong\n6. The unlink failed\n\nFor the -f option, the symlink/readlink/unlink loop is done for each\nsymlink.  For other options, the symlink/readlink/unlink loop is done\n20 times for each symlink.\n\n### test9: statfs\nThis program changes directory to the test directory (chdir and/or\nmkdir) and gets the file system status on the current directory\n(statfs).  For the -f option, the statfs is done once.  For other\noptions, the statfs is done 1500 times.\n\n\n## GENERAL:  General tests to look at server loading.\nRuns a small compile, tbl, nroff, a large compile, four simultaneous\nlarge compiles, and make.\n\n\n## SPECIAL:  Information specific to the special tests\nThe special directory is set up to test special problems that have come\nup in the past.  These tests are meant to be advisory, things to watch\nout for.  It is not required that you \"pass\" these tests but we\nstrongly suggest that you do.\n\nThe tests try to:\n\n      check for proper open/unlink operation\n      check for proper open/rename operation\n      check for proper open/chmod 0 operation\n      check for lost reply on non-idempotent requests\n      test exclusive create\n      test negative seek\n      test rename\n\n\n## LOCK:\nThe lock directory contains a test program which can be used to test\nthe kernel file and record locking facilities.  This is done to test\nthe network lock manager.\n\nThe test program contains 13 sets of locking tests.  They test basic\nlocking functionality.\n\nBy default, mandatory locking is not tested.  Mandatory locking is\ngenerally *not* supported on NFS files.\n\n\n## MISC:\n'Testitems' is a list of NFS functionality that can be used for\nreference.\n\nPrograms in 'tools' are provided for your use as you see fit.  Please\nfeel free to add to this (or any other) directory!  If you do, please\nmake sure that Mike Kupfer <mike.kupfer@sun.com> gets a copy so we can\nadd it to the master test distribution.\n\nThe code in this tree was checked August 1998 for Y2000 problems.\nNone were found.\n\nSee READWIN.txt for information about running the tests under DOS or\nWindows.\n\n\n# Changes\n## Changes for 2004 include the following:\n\n1. Fix lock/tlock.c to be consistent about when to use stdarg and when\n   to use varargs; reported by Samuel Sha <sam@austin.ibm.com>.\n\n2. Change \"make all\" so that the various \"runtests\" scripts have the\n   execute bit set; reported by Erik Deumens <deumens@qtp.ufl.edu>.\n\n3. Removed some lint; from James Peach <jpeach@sgi.com>.\n\n4. Irix 6.5.19 support from James Peach <jpeach@sgi.com>.\n\n5. The \"server\" script now exports MNTOPTIONS, so that options that\n   are added to \"server\" can be detected by the rest of the suite.\n   From Chuck Lever <Charles.Lever@netapp.com>.\n\n6. The tests now correctly check for errors returns from mmap().  From\n   David Robinson <david.robinson@sun.com>.\n\n7. MacOS X support from Mike Mackovitch <macko@apple.com>.\n\n8. tests.init now includes a CC= line for Linux, in case your\n   distribution doesn't include \"cc\".  Reported by Rodney Brown\n   <rodney@lehman.com>.\n\n9. Changes for AIX, from Erik Deumens <deumens@qtp.ufl.edu>.\n\n10. Changes for the latest Tru64 Unix, from Eric Werme\n    <werme@hp.com>.\n\n11. The general tests should be more robust in the face of errors from\n    make(1).  Based on comments from Chuck Lever\n    <Charles.Lever@netapp.com> and a patch from Mike Mackovitch\n    <macko@apple.com>.\n\n12. The \"make lint\" target for the basic tests now includes subr.c.\n\n13. Improvements to special/bigfile2:\n    - error messages now print the complete low-order word (from Mike\n      Mackovitch <macko@apple.com>.\n    - the test file is opened with O_SYNC, so that problems are\n      detected right away.\n\n14. Fix to special/op_chmod so that it uses CHMOD_NONE instead\n    of 0.  From Pascal Schmidt <der.eremit@email.de>.\n\n\n## Changes for 2003 include the following:\n\n1. HPUX fixes from Brian Love <blove@rlmsoftware.com> and Brian\n   McEntire <brianm@fsg1.nws.noaa.gov>.\n\n2. AIX support, based on patches from <saul@exanet.com>.\n\n3. gcc command-line options for building 64-bit binaries, from\n   Sergey Klyushin <sergey.klyushin@hummingbird.com>.\n\n4. The messages from the server script are now a little clearer about\n   leaving the server mounted after a test failure.  Thanks to Vincent\n   McIntyre <Vince.McIntyre@atnf.csiro.au> for the suggestion.\n\n5. The locking tests should now work with NFS Version 4 and servers\n   that enforce mandatory locking.  Thanks to Bill Baker\n   <bill.baker@sun.com> for the test12 fix.\n\n6. The general tests have been fixed to use the \"stat\" program that\n   comes with the tests, instead of any system \"stat\" program.\n\n\n## Changes for 2002 include the following:\n\n1. The special tests do a better job of recognizing when NFS version 2\n   was specified (based on a patch from Jay Weber\n   <jweber@mail.thatnet.net>).\n\n2. Compilation and runtime fixes for *BSD systems, based on patches\n   from Marty Johnson <martyj@traakan.com>.\n\n3. The default local mount point was changed from /mnt.'server_name'\n   to /mnt/'server_name'.  This is so that if the server dies or\n   hangs, it is less likely to cause operational problems on the\n   client.\n\n4. The \"server\" script will try to use \"mkdir -p\" if it's available.\n\n5. The general and special tests do a better job of checking for\n   errors during initialization.\n\n6. The bigfile tests have been moved to the end of the special tests\n   because they can take so long to run.\n\n7. Fixed the definition of signal handlers for Tru64 UNIX.\n\n8. Updated Linux configuration information from Jay Weber\n   <jweber@mail.thatnet.net>.\n\n\n## Changes for 2001 include the following:\n\n1. Added a \"-N numpasses\" option to the top-level \"server\" and\n\"runtests\" script.\n\n2. Updated HPUX compilation flags for the benefit of the\nspecial/bigfile2 test (from Anand Paladugu <paladugu_anand@emc.com>).\n\n3. Minor portability fixes to special/bigfile2.c.\n\n4. The basic tests no longer assume that \".\" is in $PATH.\n\n5. The basic and special tests should be easier to build under Windows\n(from Rick Hopkins <rhopkins@ssc-corp.com>).\n\n\n# \u304a\u307e\u3051\n- GitHub pages\u7248\n - http://thombashi.github.io/Connectathon_README\n- \u306f\u3066\u306a\u30d6\u30ed\u30b0\u7248\n - http://vmmhypervisor.hatenablog.com/entry/2016/01/14/004828\n\n\u500b\u4eba\u7684\u306b\u306fQiita\u304c\u4e00\u756a\u898b\u3084\u3059\u3044\u3002\n\u9577\u3044\u6587\u3060\u3068\u753b\u9762\u6a2a\u306b\u51fa\u308b\u76ee\u6b21\u304c\u4fbf\u5229\u3002\n", "tags": ["nfs", "test"]}