{"tags": ["openFrameworks"], "context": " More than 1 year has passed since last update.\n\u4efb\u610f\u306e\u51f8\u591a\u89d2\u5f62\u306e\u89d2\u3092\u4e38\u304f\u3059\u308b\u305f\u3081\u306b\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u9802\u70b9\u5217\u304c\u6642\u8a08\u56de\u308a\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u6761\u4ef6\u3067\u3059\u3002\n\nofApp.cpp\nvoid ofApp::getRoundedCornerPolygon(const vector<ofVec2f> &polygon, float r, ofPath &path) {\n    path.clear();\n    int n = polygon.size();\n    for (int i = 0; i < n; i++) {\n        // \u7dda\u5206AP, PB\u3067\u4f5c\u3089\u308c\u308b\u89d2\u3092\u4e38\u304f\u3059\u308b\n        ofVec2f a = polygon[(i - 1 + n) % n];\n        ofVec2f p = polygon[i];\n        ofVec2f b = polygon[(i + 1) % n];\n\n        // \u89d2APB\u306e\u306a\u3059\u89d2\u5ea6\n        float th = (b - p).angleRad(a - p);\n        // 2\u8fba\u306b\u63a5\u3059\u308b\u5186\u306e\u4e2d\u5fc3\u304b\u3089\u9802\u70b9P\u307e\u3067\u306e\u8ddd\u96e2\n        float d = r * tan(PI / 2.0 - th / 2.0);\n        // \u7dda\u5206AP\u306e\u9577\u3055\n        float paDist = a.distance(p);\n        // AP\u4e0a\u306b\u304a\u3051\u308b\u5186\u306e\u63a5\u70b9C1\n        ofVec2f c1 = a.getInterpolated(p, 1.0 - (d / paDist));\n        // \u5186\u306e\u4e2d\u5fc3C\n        ofVec2f c = c1 + (p - a).getPerpendicular() * r;\n        // \u5186\u5f27\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u7d42\u4e86\u89d2\u5ea6\n        float angleBegin = ofVec2f(1, 0).angle(p - a) - 90;\n        float angleEnd = ofVec2f(1, 0).angle(b - p) - 90;\n\n        if (i == 0) {\n            path.moveTo(c1);\n        } else {\n            path.lineTo(c1);\n        }\n        path.arc(c, r, r, angleBegin, angleEnd);\n    }\n}\n\n\n![Screen Shot 2015-12-15 at 15.49.47.png](https://qiita-image-store.s3.amazonaws.com/0/54852/17b86835-af7c-50f1-68e9-57615dfa1bd8.png)\n\n\u4efb\u610f\u306e\u51f8\u591a\u89d2\u5f62\u306e\u89d2\u3092\u4e38\u304f\u3059\u308b\u305f\u3081\u306b\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u9802\u70b9\u5217\u304c\u6642\u8a08\u56de\u308a\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u6761\u4ef6\u3067\u3059\u3002\n\n```cpp:ofApp.cpp\nvoid ofApp::getRoundedCornerPolygon(const vector<ofVec2f> &polygon, float r, ofPath &path) {\n    path.clear();\n    int n = polygon.size();\n    for (int i = 0; i < n; i++) {\n        // \u7dda\u5206AP, PB\u3067\u4f5c\u3089\u308c\u308b\u89d2\u3092\u4e38\u304f\u3059\u308b\n        ofVec2f a = polygon[(i - 1 + n) % n];\n        ofVec2f p = polygon[i];\n        ofVec2f b = polygon[(i + 1) % n];\n        \n        // \u89d2APB\u306e\u306a\u3059\u89d2\u5ea6\n        float th = (b - p).angleRad(a - p);\n        // 2\u8fba\u306b\u63a5\u3059\u308b\u5186\u306e\u4e2d\u5fc3\u304b\u3089\u9802\u70b9P\u307e\u3067\u306e\u8ddd\u96e2\n        float d = r * tan(PI / 2.0 - th / 2.0);\n        // \u7dda\u5206AP\u306e\u9577\u3055\n        float paDist = a.distance(p);\n        // AP\u4e0a\u306b\u304a\u3051\u308b\u5186\u306e\u63a5\u70b9C1\n        ofVec2f c1 = a.getInterpolated(p, 1.0 - (d / paDist));\n        // \u5186\u306e\u4e2d\u5fc3C\n        ofVec2f c = c1 + (p - a).getPerpendicular() * r;\n        // \u5186\u5f27\u306e\u958b\u59cb\u89d2\u5ea6\u3068\u7d42\u4e86\u89d2\u5ea6\n        float angleBegin = ofVec2f(1, 0).angle(p - a) - 90;\n        float angleEnd = ofVec2f(1, 0).angle(b - p) - 90;\n        \n        if (i == 0) {\n            path.moveTo(c1);\n        } else {\n            path.lineTo(c1);\n        }\n        path.arc(c, r, r, angleBegin, angleEnd);\n    }\n}\n"}