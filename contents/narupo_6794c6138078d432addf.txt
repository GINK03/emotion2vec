{"context": " More than 1 year has passed since last update.PHP\u306eWordPress(WP)\u306b\u306f\u30d5\u30a3\u30eb\u30bf\u30fc\u30d5\u30c3\u30af\u306a\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u7528\u306e\u95a2\u6570\u3092\u767b\u9332\u3057\u3066\u304a\u304f\u3068\u3001WP\u5074\u3067\u305d\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u9069\u7528\u3057\u3066\u304b\u3089\u51fa\u529b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nC\u3067\u771f\u4f3c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u914d\u5217\u306e\u7ba1\u7406\u3002\nDisplayFilter\u306f\u30d5\u30a3\u30eb\u30bf\u30fc\u7528\u95a2\u6570\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002\n\nmy-display-filter\n/* My display filter */\n\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\ntypedef char* (*DisplayFilter)(char*, size_t, char const*);\n\nenum { NFILTERS = 10, };\nstatic size_t filters_length;\nstatic DisplayFilter filters[NFILTERS];\n\nvoid\nmy_display_filters_push_back(DisplayFilter filter) {\n    if (filters_length >= NFILTERS) {\n        return;\n    }\n    filters[filters_length++] = filter;\n}\n\nsize_t\nmy_display_filters_length(void) {\n    return filters_length;\n}\n\nDisplayFilter\nmy_display_filters_get(size_t index) {\n    if (index < filters_length) {\n        return filters[index];\n    }\n    return NULL;\n}\n\n\n\n\u51fa\u529b\u7528\u3002\n\u30e6\u30fc\u30b6\u5b9a\u7fa9\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u7fa4\u3092\u9069\u7528\u3057\u3066\u304b\u3089\u51fa\u529b\u3002\n\nmy-display\n/* My display */\n\n#include <stdio.h>\n#include <string.h>\n\nenum { NDST = 256, };\n\nvoid\nmy_display(char const* src, FILE* stream) {\n    // Filter?\n    if (my_display_filters_length() == 0) {\n        // Display\n        fprintf(stream, \"[%s]\\n\", src);\n    } else {\n        // Filtering\n        char dst1[NDST];\n        char dst2[NDST];\n        char* a = dst1;\n        char const* b = src;\n\n        for (int i = 0, len = my_display_filters_length(); i < len; ++i) {\n            DisplayFilter filter = my_display_filters_get(i);\n            filter(a, NDST, b);\n\n            // \u30e6\u30fc\u30b6\u30fc\u306e\u70ba\u306b\u30b3\u30d4\u30fc\u9818\u57df\u304c\u91cd\u306a\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3002\n            b = a;\n            a = (a == dst1 ? dst2 : dst1);\n        }\n        a = (a == dst1 ? dst2 : dst1);\n\n        // Display\n        fprintf(stream, \"[%s]\\n\", a);\n    }\n}\n\n\n\u3053\u3053\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u30c6\u30b9\u30c8\u5185\u5bb9\u3002\n\u30b3\u30d4\u30fc\u306e\u307f\u3001\u82f1\u6587\u5b57\u3092\u5927\u6587\u5b57\u306b\u5909\u63db\u3001\u6539\u884c\u3068\u30bf\u30d6\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3059\u308b\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u5b9a\u7fa9\u3057\u3066\u767b\u9332\u3002\n\ntest\n\n/* My test */\n\n#include <stdio.h>\n\n// User's filter\nstatic char*\ntest_display_filter_toupper(char* dst, size_t dstsize, char const* src) {\n    char* dstcur = dst;\n    char* dstend = dst + dstsize - 1;\n\n    for (; dstcur < dstend && *src; ++dstcur, ++src) {\n        if (*src == '\\\\') {\n            *dstcur = *src;\n            if (*++src == '\\0') {\n                break;\n            }\n            if (++dstcur >= dstend) {\n                break;\n            }\n            *dstcur = *src;\n            continue;\n        }\n\n        if (islower(*src)) {\n            *dstcur = toupper(*src);\n        } else {\n            *dstcur = *src;\n        }\n    }\n\n    *dstcur = '\\0';\n    return dst;\n}\n\n// User's filter\nstatic char*\ntest_display_filter_escape(char* dst, size_t dstsize, char const* src) {\n    char* dstcur = dst;\n    char* dstend = dst + dstsize - 1;\n\n    for (; dstcur < dstend && *src; ++dstcur, ++src) {\n        switch (*src) {\n        default:\n            *dstcur = *src;\n            break;\n        case '\\n':\n            if (dstcur + 1 < dstend) {\n                *dstcur++ = '\\\\';\n                *dstcur = 'n';\n            }\n            break;\n        case '\\t':\n            if (dstcur + 1 < dstend) {\n                *dstcur++ = '\\\\';\n                *dstcur = 't';\n            }\n            break;\n        }\n    }\n\n    *dstcur = '\\0';\n    return dst;\n}\n\n// User's filter\nstatic char*\ntest_display_filter_nope(char* dst, size_t dstsize, char const* src) {\n    snprintf(dst, dstsize, \"%s\", src);\n    return dst;\n}\n\nint\nmain(int argc, char* argv[]) {\n    // Initialize program\n    my_display_filters_push_back(test_display_filter_nope);\n    my_display_filters_push_back(test_display_filter_toupper);\n    my_display_filters_push_back(test_display_filter_escape);\n\n    // Read and write with filtering\n    char buf[128];\n    for (; fgets(buf, sizeof buf, stdin); ) {\n        my_display(buf, stdout);\n    }\n\n    return 0;\n}\n\n\n\n\nresult\n$ ./a.out\n123 abc Def 456\n[123\\tABC\\tDEF\\t456\\n]\n\n\n\n\u9759\u7684\u306a\u914d\u5217\u3060\u3068\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3067\u5bb9\u91cf\u304c\u8db3\u308a\u306a\u304f\u306a\u3063\u305f\u308a\u306a\u3089\u306a\u304b\u3063\u305f\u308a\u3002\nPHP\u306eWordPress(WP)\u306b\u306f\u30d5\u30a3\u30eb\u30bf\u30fc\u30d5\u30c3\u30af\u306a\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u7528\u306e\u95a2\u6570\u3092\u767b\u9332\u3057\u3066\u304a\u304f\u3068\u3001WP\u5074\u3067\u305d\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u9069\u7528\u3057\u3066\u304b\u3089\u51fa\u529b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nC\u3067\u771f\u4f3c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u914d\u5217\u306e\u7ba1\u7406\u3002\nDisplayFilter\u306f\u30d5\u30a3\u30eb\u30bf\u30fc\u7528\u95a2\u6570\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3002\n\n```c:my-display-filter\n/* My display filter */\n\n#include <stdio.h>\n#include <string.h>\n#include <ctype.h>\n\ntypedef char* (*DisplayFilter)(char*, size_t, char const*);\n\nenum { NFILTERS = 10, };\nstatic size_t filters_length;\nstatic DisplayFilter filters[NFILTERS];\n\nvoid\nmy_display_filters_push_back(DisplayFilter filter) {\n\tif (filters_length >= NFILTERS) {\n\t\treturn;\n\t}\n\tfilters[filters_length++] = filter;\n}\n\nsize_t\nmy_display_filters_length(void) {\n\treturn filters_length;\n}\n\nDisplayFilter\nmy_display_filters_get(size_t index) {\n\tif (index < filters_length) {\n\t\treturn filters[index];\n\t}\n\treturn NULL;\n}\n\n```\n\n\u51fa\u529b\u7528\u3002\n\u30e6\u30fc\u30b6\u5b9a\u7fa9\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u7fa4\u3092\u9069\u7528\u3057\u3066\u304b\u3089\u51fa\u529b\u3002\n\n```c:my-display\n/* My display */\n\n#include <stdio.h>\n#include <string.h>\n\nenum { NDST = 256, };\n\nvoid\nmy_display(char const* src, FILE* stream) {\n\t// Filter?\n\tif (my_display_filters_length() == 0) {\n\t\t// Display\n\t\tfprintf(stream, \"[%s]\\n\", src);\n\t} else {\n\t\t// Filtering\n\t\tchar dst1[NDST];\n\t\tchar dst2[NDST];\n\t\tchar* a = dst1;\n\t\tchar const* b = src;\n\n\t\tfor (int i = 0, len = my_display_filters_length(); i < len; ++i) {\n\t\t\tDisplayFilter filter = my_display_filters_get(i);\n\t\t\tfilter(a, NDST, b);\n\n\t\t\t// \u30e6\u30fc\u30b6\u30fc\u306e\u70ba\u306b\u30b3\u30d4\u30fc\u9818\u57df\u304c\u91cd\u306a\u3063\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3002\n\t\t\tb = a;\n\t\t\ta = (a == dst1 ? dst2 : dst1);\n\t\t}\n\t\ta = (a == dst1 ? dst2 : dst1);\n\n\t\t// Display\n\t\tfprintf(stream, \"[%s]\\n\", a);\n\t}\n}\n```\n\n\u3053\u3053\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u3068\u30c6\u30b9\u30c8\u5185\u5bb9\u3002\n\u30b3\u30d4\u30fc\u306e\u307f\u3001\u82f1\u6587\u5b57\u3092\u5927\u6587\u5b57\u306b\u5909\u63db\u3001\u6539\u884c\u3068\u30bf\u30d6\u3092\u30a8\u30b9\u30b1\u30fc\u30d7\u3059\u308b\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u5b9a\u7fa9\u3057\u3066\u767b\u9332\u3002\n\n```c:test\n\n/* My test */\n\n#include <stdio.h>\n\n// User's filter\nstatic char*\ntest_display_filter_toupper(char* dst, size_t dstsize, char const* src) {\n\tchar* dstcur = dst;\n\tchar* dstend = dst + dstsize - 1;\n\n\tfor (; dstcur < dstend && *src; ++dstcur, ++src) {\n\t\tif (*src == '\\\\') {\n\t\t\t*dstcur = *src;\n\t\t\tif (*++src == '\\0') {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++dstcur >= dstend) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t*dstcur = *src;\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (islower(*src)) {\n\t\t\t*dstcur = toupper(*src);\n\t\t} else {\n\t\t\t*dstcur = *src;\n\t\t}\n\t}\n\n\t*dstcur = '\\0';\n\treturn dst;\n}\n\n// User's filter\nstatic char*\ntest_display_filter_escape(char* dst, size_t dstsize, char const* src) {\n\tchar* dstcur = dst;\n\tchar* dstend = dst + dstsize - 1;\n\n\tfor (; dstcur < dstend && *src; ++dstcur, ++src) {\n\t\tswitch (*src) {\n\t\tdefault:\n\t\t\t*dstcur = *src;\n\t\t\tbreak;\n\t\tcase '\\n':\n\t\t\tif (dstcur + 1 < dstend) {\n\t\t\t\t*dstcur++ = '\\\\';\n\t\t\t\t*dstcur = 'n';\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\\t':\n\t\t\tif (dstcur + 1 < dstend) {\n\t\t\t\t*dstcur++ = '\\\\';\n\t\t\t\t*dstcur = 't';\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t*dstcur = '\\0';\n\treturn dst;\n}\n\n// User's filter\nstatic char*\ntest_display_filter_nope(char* dst, size_t dstsize, char const* src) {\n\tsnprintf(dst, dstsize, \"%s\", src);\n\treturn dst;\n}\n\nint\nmain(int argc, char* argv[]) {\n\t// Initialize program\n\tmy_display_filters_push_back(test_display_filter_nope);\n\tmy_display_filters_push_back(test_display_filter_toupper);\n\tmy_display_filters_push_back(test_display_filter_escape);\n\t\n\t// Read and write with filtering\n\tchar buf[128];\n\tfor (; fgets(buf, sizeof buf, stdin); ) {\n\t\tmy_display(buf, stdout);\n\t}\n\n\treturn 0;\n}\n\n```\n\n```bash:result\n$ ./a.out\n123\tabc\tDef\t456\n[123\\tABC\\tDEF\\t456\\n]\n\n```\n\n\u9759\u7684\u306a\u914d\u5217\u3060\u3068\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3067\u5bb9\u91cf\u304c\u8db3\u308a\u306a\u304f\u306a\u3063\u305f\u308a\u306a\u3089\u306a\u304b\u3063\u305f\u308a\u3002\n", "tags": ["C", "WordPress", "\u8a2d\u8a08"]}