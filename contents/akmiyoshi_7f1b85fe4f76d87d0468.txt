{"tags": ["Julia", "Windows", "Mac", "Linux", "Python"], "context": " More than 1 year has passed since last update.\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f \u3067\u3068\u308a\u3042\u3048\u305a\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3059\u3053\u3068\u306b\u6210\u529f\u3057\u305f\u304c\u3001\u81ea\u5206\u306e(Julia\u8a00\u8a9e\u306e)\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n3D\u7a7a\u9593\u306b\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002(PyQtGraph\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53c2\u8003\u306b\u3057\u3066\u3001\u8a08\u7b97\u51e6\u7406\u90e8\u5206\u3092 Julia \u5074\u306b\u79fb\u690d\u3057\u307e\u3057\u305f)\n\u4f8b\u306b\u3088\u3063\u3066\u3001Julia \u3067\u6c42\u3081\u305f\u8a08\u7b97\u7d50\u679c\u3092 PyQtGraph \u3067\u30b0\u30e9\u30d5\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002(\u74b0\u5883\u3092\u4f5c\u3063\u3066\u662f\u975e\u52d5\u304b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044)\n\nGLLinePlot.jl (Julia \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u306f\u3001Python \u306e\u30bd\u30fc\u30b9\u5185\u306e graph_run() \u3068\u3044\u3046\u95a2\u6570\u306b\u914d\u5217\u3092\u6e21\u3059\u3002\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306f Python \u306b\u304a\u4efb\u305b\u3002\u3002\nGLLinePlot.py (Python \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u3067\u306f\u3001Julia \u304b\u3089\u6e21\u3055\u308c\u305f\u914d\u5217\u3092\u57fa\u306b3D\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b(51\u500b\u306e\u6298\u308c\u7dda\u30b0\u30e9\u30d5)\u3002\nPyCall \u3092\u7528\u3044\u3066 Python \u306e\u30b3\u30fc\u30c9\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u306f\u3001C:\\julia-0.2.1-win32\\bin \u304c\u30ed\u30fc\u30c9\u30d1\u30b9\u306b\u542b\u307e\u308c\u308b\u306e\u3067\u3001GLLinePlot.jl \u304a\u3088\u3073 GLLinePlot.py \u306e\u4e21\u65b9\u5171\u3092 C:\\julia-0.2.1-win32\\bin \u914d\u4e0b\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4fdd\u5b58\u3059\u308b\u969b\u306b\u306f\u6587\u5b57\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f utf-8 \u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n\u30b5\u30f3\u30d7\u30eb\u3092\u8d77\u52d5\u3059\u308b\u306b\u306f\u3001GLLinePlot.jl (Julia \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9) \u3092\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u304b\u3089\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3059\u308b\u3002\n\n\n\u6ce8\u8a18\uff1a\u74b0\u5883\u69cb\u7bc9\u306b\u3064\u3044\u3066\u306f\u3001\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u2191\u30de\u30a6\u30b9\u3067\u30c9\u30e9\u30c3\u30b0\u3057\u305f\u308a\u30ab\u30fc\u30bd\u30eb\u30ad\u30fc\u3092\u62bc\u3059\u30683D\u30b0\u30e9\u30d5\u304c\u56de\u8ee2\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3092\u56de\u3059\u3068\u62e1\u5927\u30fb\u7e2e\u5c0f\u304c\u3067\u304d\u307e\u3059\u3002\n\nGLLinePlot.jl(C\n# -*- coding: utf-8 -*-\n\nusing PyCall\n\nnx = 100\nny = 51\nx = linspace(-10, 10, nx)\ny = linspace(-10, 10, ny)\nz = zeros(Float64, length(x), length(y))\n\nfor iy = 1:length(y)\n    for ix = 1:length(x)\n        d = (x[ix]^2 + y[iy]^2)^0.5\n        z[ix, iy] = 10 * cos(d) / (d+1)\n    end\nend\n\n@pyimport GLLinePlot\nGLLinePlot.graph_run(x, y, z)\n\n\n\nGLLinePlot.py(C\n# -*- coding: utf-8 -*-\n\nfrom pyqtgraph.Qt import QtCore, QtGui\nimport pyqtgraph.opengl as gl\nimport pyqtgraph as pg\nimport numpy as np\n\ndef graph_run(plot_data_x, plot_data_y, plot_data_z):\n\n    app = QtGui.QApplication([])\n\n    w = gl.GLViewWidget()\n    w.resize(600,400)\n    w.opts['distance'] = 40\n    w.show()\n    w.setWindowTitle(u'Julia+PyQtGraph \u30b5\u30f3\u30d7\u30eb')\n\n    x = plot_data_x\n    y = plot_data_y\n    for i in range(len(y)):\n        yi = [y[i]]*len(x)\n        z = plot_data_z[:,i]\n        pts = np.vstack([x,yi,z]).transpose()\n        plt = gl.GLLinePlotItem(pos=pts, color=pg.glColor((i,len(y)*1.3)), width=(i+1)/10., antialias=True)\n        w.addItem(plt)\n\n    app.exec_()\n\n\n[\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f](http://qiita.com/akmiyoshi/items/a2aca5369c8e3c11ae59) \u3067\u3068\u308a\u3042\u3048\u305a\u30b5\u30f3\u30d7\u30eb\u3092\u52d5\u304b\u3059\u3053\u3068\u306b\u6210\u529f\u3057\u305f\u304c\u3001\u81ea\u5206\u306e(Julia\u8a00\u8a9e\u306e)\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u304b\u3092\u8abf\u3079\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n3D\u7a7a\u9593\u306b\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002(PyQtGraph\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53c2\u8003\u306b\u3057\u3066\u3001\u8a08\u7b97\u51e6\u7406\u90e8\u5206\u3092 Julia \u5074\u306b\u79fb\u690d\u3057\u307e\u3057\u305f)\n\u4f8b\u306b\u3088\u3063\u3066\u3001Julia \u3067\u6c42\u3081\u305f\u8a08\u7b97\u7d50\u679c\u3092 PyQtGraph \u3067\u30b0\u30e9\u30d5\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002(\u74b0\u5883\u3092\u4f5c\u3063\u3066\u662f\u975e\u52d5\u304b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044)\n\n* GLLinePlot.jl (Julia \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u306f\u3001Python \u306e\u30bd\u30fc\u30b9\u5185\u306e graph_run() \u3068\u3044\u3046\u95a2\u6570\u306b\u914d\u5217\u3092\u6e21\u3059\u3002\u30b0\u30e9\u30d5\u306e\u63cf\u753b\u306f Python \u306b\u304a\u4efb\u305b\u3002\u3002\n* GLLinePlot.py (Python \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9)\u3067\u306f\u3001Julia \u304b\u3089\u6e21\u3055\u308c\u305f\u914d\u5217\u3092\u57fa\u306b3D\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b(51\u500b\u306e\u6298\u308c\u7dda\u30b0\u30e9\u30d5)\u3002\n* PyCall \u3092\u7528\u3044\u3066 Python \u306e\u30b3\u30fc\u30c9\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u306f\u3001C:\\julia-0.2.1-win32\\bin \u304c\u30ed\u30fc\u30c9\u30d1\u30b9\u306b\u542b\u307e\u308c\u308b\u306e\u3067\u3001GLLinePlot.jl \u304a\u3088\u3073 GLLinePlot.py \u306e\u4e21\u65b9\u5171\u3092 C:\\julia-0.2.1-win32\\bin \u914d\u4e0b\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n* \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4fdd\u5b58\u3059\u308b\u969b\u306b\u306f\u6587\u5b57\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f utf-8 \u306b\u3057\u3066\u304a\u304f\u3053\u3068\u3002\n* \u30b5\u30f3\u30d7\u30eb\u3092\u8d77\u52d5\u3059\u308b\u306b\u306f\u3001GLLinePlot.jl (Julia \u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9) \u3092\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9\u30fc\u304b\u3089\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3059\u308b\u3002\n\n> \u6ce8\u8a18\uff1a\u74b0\u5883\u69cb\u7bc9\u306b\u3064\u3044\u3066\u306f\u3001[\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e Julia \u3067\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\u300f](http://qiita.com/akmiyoshi/items/a2aca5369c8e3c11ae59) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n![2014-0704-0623.png](https://qiita-image-store.s3.amazonaws.com/0/32879/5033012b-bec1-9b1b-2d2f-40f8d6c87830.png)\n\u2191\u30de\u30a6\u30b9\u3067\u30c9\u30e9\u30c3\u30b0\u3057\u305f\u308a\u30ab\u30fc\u30bd\u30eb\u30ad\u30fc\u3092\u62bc\u3059\u30683D\u30b0\u30e9\u30d5\u304c\u56de\u8ee2\u3057\u307e\u3059\u3002\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3092\u56de\u3059\u3068\u62e1\u5927\u30fb\u7e2e\u5c0f\u304c\u3067\u304d\u307e\u3059\u3002\n\n```jl:GLLinePlot.jl(C:\\julia-0.2.1-win32\\bin\u306b\u4fdd\u5b58\u3059\u308b\u3053\u3068)\n# -*- coding: utf-8 -*-\n\nusing PyCall\n\nnx = 100\nny = 51\nx = linspace(-10, 10, nx)\ny = linspace(-10, 10, ny)\nz = zeros(Float64, length(x), length(y))\n\nfor iy = 1:length(y)\n    for ix = 1:length(x)\n        d = (x[ix]^2 + y[iy]^2)^0.5\n        z[ix, iy] = 10 * cos(d) / (d+1)\n    end\nend\n\n@pyimport GLLinePlot\nGLLinePlot.graph_run(x, y, z)\n```\n\n```python:GLLinePlot.py(C:\\julia-0.2.1-win32\\bin\u306b\u4fdd\u5b58\u3059\u308b\u3053\u3068)\n# -*- coding: utf-8 -*-\n\nfrom pyqtgraph.Qt import QtCore, QtGui\nimport pyqtgraph.opengl as gl\nimport pyqtgraph as pg\nimport numpy as np\n\ndef graph_run(plot_data_x, plot_data_y, plot_data_z):\n\n    app = QtGui.QApplication([])\n\n    w = gl.GLViewWidget()\n    w.resize(600,400)\n    w.opts['distance'] = 40\n    w.show()\n    w.setWindowTitle(u'Julia+PyQtGraph \u30b5\u30f3\u30d7\u30eb')\n\n    x = plot_data_x\n    y = plot_data_y\n    for i in range(len(y)):\n        yi = [y[i]]*len(x)\n        z = plot_data_z[:,i]\n        pts = np.vstack([x,yi,z]).transpose()\n        plt = gl.GLLinePlotItem(pos=pts, color=pg.glColor((i,len(y)*1.3)), width=(i+1)/10., antialias=True)\n        w.addItem(plt)\n\n    app.exec_()\n```\n"}