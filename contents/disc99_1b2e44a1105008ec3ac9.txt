{"context": " More than 1 year has passed since last update.\n\n\u306a\u305cRxJava?\nRxJava\u306f\u69d8\u3005\u306a\u7279\u6027\u3092\u4f75\u305b\u6301\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u304c\u3001\u7c21\u5358\u306b\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6a5f\u80fd\u306b\u5206\u985e\u3055\u308c\u307e\u3059\u3002\n\n\nList\u51e6\u7406\u306e\u62bd\u8c61\u5316\u30fb\u30b9\u30c8\u30ea\u30fc\u30e0\u5316\nOptional\nFuture/Promise\nData Binding\nEvent Bus\n\n\nAndroid\u958b\u767a\u3067RxJava\u3092\u30c1\u30fc\u30e0\u306b\u5c0e\u5165\u3057\u305f\u8a71\nJava 8\u3067\u306fStream API\u3084Optional\u304c\u5c0e\u5165\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001Android\u3084\u696d\u52d9\u8981\u4ef6\u306a\u3069\u305d\u306eAPI\u3092\u4f7f\u3048\u306a\u3044\u74b0\u5883\u3082\u5b58\u5728\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u975e\u540c\u671f\u3084\u4e26\u5217\u306a\u3069\u305d\u3082\u305d\u3082Java\u3067\u6271\u3044\u306b\u304f\u3044\u51e6\u7406\u3092\u3001\u7d71\u4e00\u3055\u308c\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u7c21\u6f54\u306b\u8a18\u8ff0\u3067\u304d\u308b\u306a\u3069\u306e\u30e1\u30ea\u30c3\u30c8\u3082\u591a\u304f\u3001\u305d\u306e\u57fa\u672c\u7684\u306a\u6a5f\u80fd\u3092\u8a66\u3057\u3066\u307f\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u306a\u304a\u3001\u3053\u3053\u306b\u8a18\u8f09\u3059\u308b\u5185\u5bb9\u306fRxJava\u306e\u4f7f\u3044\u65b9\u304c\u4e2d\u5fc3\u3067\u3001RxJava\u81ea\u4f53\u306e\u6982\u5ff5\u3084FRP\u306a\u3069\u306b\u3064\u3044\u3066\u306f\u3001\u4ed6\u306b\u3082\u591a\u304f\u306e\u65b9\u3005\u7d39\u4ecb\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u3054\u89a7\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u5358\u7d14\u5316\u306e\u305f\u3081\u306bfrom\u3084just,range\u306a\u3069\u751f\u6210\u6e08\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u6765Rx\u306f\u6642\u9593\u7684\u306b\u5909\u5316\u3059\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u3082\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u5b9f\u904b\u7528\u3067\u4f7f\u7528\u3059\u308b\u3068\u304d\u306b\u306f\u305d\u306e\u8fba\u308a\u3082\u8003\u616e\u3057\u3066\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nUse Case\n\u7d30\u304b\u306a\u6a5f\u80fd\u304b\u3089\u3060\u3068\u3001\u30e1\u30ea\u30c3\u30c8\u304c\u308f\u304b\u308a\u306b\u304f\u304f\u306a\u308b\u306e\u3067\u3001\u307e\u305a\u306f\u3044\u304f\u3064\u304b\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nStream API\u306e\u3088\u3046\u306bCollection\u3092\u64cd\u4f5c\u3059\u308b\n\u611f\u899a\u7684\u306b\u7406\u89e3\u3057\u3084\u3059\u3044\u540c\u671f\u7684\u306bCollection\u306e\u64cd\u4f5c\u3092\u884c\u3046\u4f8b\u3002\nList<Integer> res = Observable.from(Arrays.asList(1, 2, 3, 4, 5, 6)) // Iterable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089Observable\u3092\u751f\u6210\n        .flatMap(Observable::just)        // Stream API\u306eflatMap\u76f8\u5f53\n        .filter(i -> i % 2 == 0)          // Stream API\u306efilter\u76f8\u5f53\n        .map(i -> i * 2)                  // Stream API\u306emap\u76f8\u5f53\n        .skip(1)                          // Stream API\u306eskip\u76f8\u5f53\n        .take(3)                          // Stream API\u306elimit\u76f8\u5f53 \u203b\u540c\u69d8\u306e\u51e6\u7406\u306elimit()\u3082\u5b58\u5728\u3059\u308b\n        .toList()                         // \u30b9\u30c8\u30ea\u30fc\u30e0\u3092List\u306b\u5909\u63db\n        .toBlocking()                     // \u540c\u671f\u51e6\u7406\u3067\u884c\u3046\n        .single();                        // \u8981\u7d20\u3092\u53d6\u5f97\n\nSystem.out.println(res); // [8, 12]\n\n\u30d5\u30a1\u30af\u30c8\u30ea\u3068\u306a\u308bfrom()\u3068\u540c\u671f\u7684\u306bList\u306e\u5909\u63db\u3092\u884c\u3046toList().toBlocking().single()\u90e8\u5206\u306e\u8a18\u8ff0\u306b\u9055\u3044\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u307b\u3068\u3093\u3069Java 8\u306eStream API\u3068\u540c\u3058\u3088\u3046\u306a\u611f\u899a\u3067\u64cd\u4f5c\u304c\u51fa\u6765\u307e\u3059\u3002\n\nOptional\u306e\u3088\u3046\u306b\u6271\u3046\nRxJava\u306e\u4e2d\u5fc3\u3068\u306a\u3063\u3066\u3044\u308bObservable\u306fOptional\u306b\u4f3c\u305f\u6027\u8cea\u3082\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u3066Optional\u306e\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n\u305d\u306e\u307e\u307e\u8a18\u8ff0\u3059\u308b\u3068\u5197\u9577\u306b\u306a\u308b\u306e\u3067\u3001\u4eca\u56de\u306fObservables\u3068\u3044\u3046\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n@Test\npublic void Optional\u306e\u3088\u3046\u306b\u6271\u3046() throws Exception {\n\n    Observable<String> exist = Observables.ofNullable(\"val\");\n    Observable<Object> empty = Observables.ofNullable(null);\n\n    // Optional#ifPresent\n    exist.subscribe(System.out::println); // val\n    empty.subscribe(System.out::println); // \u8868\u793a\u51e6\u7406\u81ea\u4f53\u3082\u547c\u3070\u308c\u306a\u3044\n\n    // Optional#flatMap, map, filter\n    Observables.ofNullable(\"1,2,3,4\")\n            .flatMap(str-> Observable.from(asList(str.split(\",\"))))\n            .map(Integer::parseInt)\n            .filter(i -> i % 2 == 0)\n            .subscribe(System.out::println);\n\n    // Optional#get\n    Observables.get(exist); // val\n    Observables.get(empty); // throw NoSuchElementException\n\n    // Optional#orElse\n    Observables.orElse(exist, \"default\"); // val\n    Observables.orElse(empty, \"default\"); // default\n\n    // Optional#isPresent\n    Observables.isPresent(exist); // true\n    Observables.isPresent(empty); // false\n}\n\nclass Observables {\n    static <T> Observable<T> of(T value){\n        if(value == null){\n            throw new NullPointerException();\n        }\n        else{\n            return Observable.just(value);\n        }\n    }\n\n    static <T> Observable<T> ofNullable(T value){\n        return value == null ? Observable.empty() : Observable.just(value);\n    }\n\n    static <T> T get(Observable<T> observable){\n        return observable.toBlocking().single();\n    }\n\n    static <T> T orElse(Observable<T> observable, T other){\n        return observable.defaultIfEmpty(other).toBlocking().single();\n    }\n\n    static <T> boolean isPresent(Observable<T> observable){\n        return !observable.isEmpty().toBlocking().single();\n    }\n\n    static <T> T orElseGet(Observable<T> observable, Func0<T> other) {\n        return isPresent(observable) ? get(observable) : other.call();\n    }\n\n    static <T, X extends Throwable> T orElseThrow(Observable<T> observable, Func0<? extends X> other) throws X {\n        if (isPresent(observable)) {\n            return get(observable);\n        } else {\n            throw other.call();\n        }\n    }\n}\n\n\nFuture/Promise\u306e\u3088\u3046\u306b\u6271\u3046\nObservable\u306f\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u5207\u308a\u66ff\u3048\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u306e\u3067\u3001Web API\u3084DB\u30a2\u30af\u30bb\u30b9\u306a\u3069\u91cd\u3044\u51e6\u7406\u3092\u975e\u540c\u671f\u5316\u3057\u5408\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nObservable\u3068Future/Promise\u3068\u306e\u9055\u3044\u306f\u3001Request/Response\u306e\u3088\u3046\u306a\u4e00\u3064\u306e\u8981\u7d20\u3060\u3051\u3067\u306f\u306a\u304f\u30a4\u30d9\u30f3\u30c8\u306e\u3088\u3046\u306a\u8907\u6570\u767a\u751f\u3059\u308b\u8981\u7d20\u3092\u3092\u6271\u3048\u308b\u3053\u3068\u3067\u3059\u3002\n\u4eca\u56de\u306fFuture/Promise\u3068\u540c\u69d8\u306bObservable\u306b\u5358\u4e00\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u3066\u6271\u3044\u307e\u3059\u3002\n@Test\npublic void FuturePromise\u306e\u3088\u3046\u306b\u6271\u3046() throws Exception {\n\n    // \u76f4\u5217+\u4e26\u5217\u306b\u51e6\u7406\u3059\u308b\u4f8b\n    // \u6700\u521d\u306b\u30e6\u30fc\u30b6\u306e\u8a8d\u8a3c\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3001\u305d\u306e\u8a8d\u8a3c\u60c5\u5831\u3092\u5143\u306b\u4e26\u5217\u306b\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u4f8b\n    Stopwatch sw = Stopwatch.createStarted();\n    getAuthId(\"id\", \"pass\")\n            .flatMap(id -> Observable.zip(getUserInfo(id), getUserItems(id),\n                    (info, items) -> info + \" has items = \" + items))\n            .subscribe(new Subscriber<String>() {\n                @Override\n                public void onCompleted() {\n                    System.out.println(\"All time: \" + sw.stop());\n                }\n                @Override\n                public void onError(Throwable e) {\n                }\n                @Override\n                public void onNext(String s) {\n                    System.out.println(s);\n                }\n            });\n\n    // Outpuot:\n    //\n    // getAuthId, ThreadName: RxCachedThreadScheduler-1, Params:id,pass\n    // getUserInfo, ThreadName: RxCachedThreadScheduler-2, Params: 123\n    // getUserItems, ThreadName: RxCachedThreadScheduler-3, Params: 123\n    // Tom has items = [Apple, Banana]\n    // All time: 4.191 s\n}\n\nObservable<Integer> getAuthId(String id, String pass) {\n    return Observable.create((Subscriber<? super Integer> subscriber) -> {\n   \u3000\u3000\u3000// \u672c\u6765\u4ee5\u4e0b\u306fWeb\u3084DB\u30a2\u30af\u30bb\u30b9\u306a\u3069\n        try {\n            System.out.println(String.format(\"getAuthId, ThreadName: %s, Params:%s,%s\", Thread.currentThread().getName(), id, pass));\n            Threads.sleep(1000);\n            subscriber.onNext(123);\n            subscriber.onCompleted();\n        } catch (Exception e) {\n            subscriber.onError(e);\n        }\n    }).subscribeOn(Schedulers.io());\n}\n\nObservable<String> getUserInfo(Integer authId) {\n    return Observable.create((Subscriber<? super String> subscriber) -> {\n   \u3000\u3000\u3000// \u672c\u6765\u4ee5\u4e0b\u306fWeb\u3084DB\u30a2\u30af\u30bb\u30b9\u306a\u3069\n        try {\n            System.out.println(String.format(\"getUserInfo, ThreadName: %s, Params: %d\", Thread.currentThread().getName(), authId));\n            Threads.sleep(2000);\n            subscriber.onNext(\"Tom\");\n            subscriber.onCompleted();\n        } catch (Exception e) {\n            subscriber.onError(e);\n        }\n    }).subscribeOn(Schedulers.io());\n}\n\nObservable<List<String>> getUserItems(Integer authId) {\n    return Observable.create((Subscriber<? super List<String>> subscriber) -> {\n   \u3000\u3000\u3000// \u672c\u6765\u4ee5\u4e0b\u306fWeb\u3084DB\u30a2\u30af\u30bb\u30b9\u306a\u3069\n        try {\n            System.out.println(String.format(\"getUserItems, ThreadName: %s, Params: %d\", Thread.currentThread().getName(), authId));\n            Threads.sleep(3000);\n            subscriber.onNext(asList(\"Apple\", \"Banana\"));\n            subscriber.onCompleted();\n        } catch (Exception e) {\n            subscriber.onError(e);\n        }\n    }).subscribeOn(Schedulers.io());\n}\n\n\u5404\u30e1\u30bd\u30c3\u30c9\u306e\u51e6\u7406\u6642\u9593\u304c1+2+3\u306a\u306e\u30676\u79d2\u304b\u304b\u308b\u306f\u305a\u306e\u51e6\u7406\u304c\u4e26\u5217\u306b\u547c\u3073\u51fa\u3057\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u30674\u79d2\u5f37\u3067\u5b8c\u4e86\u3057\u307e\u3059\u3002\n\u307e\u305f\u3053\u3046\u3044\u3063\u305f\u975e\u540c\u671f\u3001\u4e26\u5217\u51e6\u7406\u3092Http\u7d4c\u7531\u3067\u884c\u3046\u969b\u306b\u306f\u3001Retrofit\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3088\u308a\u7c21\u6f54\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u3060\u3068\u66f4\u306b\u3001Data Binding\u3084Event Bus\u306a\u3069\u306e\u6a5f\u80fd\u3082\u6709\u52b9\u306b\u6d3b\u7528\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nRxJava\u306eAPI\nRxJava\u306b\u306f\u975e\u5e38\u306b\u8c4a\u5bcc\u306aAPI\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u3053\u304b\u3089\u306f\u305d\u306eAPI\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nObservable\u306e\u751f\u6210\nRxJava\u306b\u306f\u591a\u304f\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u3089\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u304b\u3089Observable\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nCreating Observables\n\nfrom\nIterable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089Observable\u3092\u751f\u6210\u3002\n\u305d\u306e\u4ed6\u306b\u3082\u914d\u5217\u3084Future\u306a\u3069\u591a\u304f\u306e\u5f15\u6570\u304b\u3089Observable\u3092\u751f\u6210\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u3002\nObservable<List<Integer>> o = Observable.from(list);\n\n\ncreate\nOnSubscribe\u3092\u6307\u5b9a\u3057\u3066Observable\u3092\u751f\u6210\u3002\nObservable<String> o = Observable.create(subscriber -> {\n            subscriber.onNext(\"Hello\");\n            subscriber.onNext(\"world!\");\n            subscriber.onCompleted();\n        });\n\n\nrange\n\u8981\u7d20\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u3066Observable\u3092\u751f\u6210\u3002\nObservable<Integer> o = Observable.range(1, 5);\n\n\njust\n\u5f15\u6570\u3067\u76f4\u63a5Observable\u3092\u751f\u6210\n\nObservable<Integer> o = Observable.just(1, 2, 3);\n\n\nerror\n\u4f8b\u5916\u3092\u6301\u3063\u305fObservable\u3092\u751f\u6210\nObservable<Object> o = Observable.error(new RuntimeException(\"Error!\"));\n\n\nempty\n\u7a7a\u306eObservable\u3092\u751f\u6210\nObservable<Object> o = Observable.empty();\n\n\ninterval\n\u975e\u540c\u671f\u3067\u6307\u5b9a\u9593\u9694\u3054\u3068\u306bsubscribe\u3059\u308b\u3002\ntoBlocking\u306a\u3069\u3057\u3066\u3082\u30d6\u30ed\u30c3\u30af\u3055\u308c\u306a\u3044\u3002\ntake\u306a\u3069\u3067\u56de\u6570\u5236\u9650\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nObservable\n        .interval(1, TimeUnit.SECONDS)\n        .subscribe(System.out::print);\n\n// 12345...\n\n\nObservable\u306e\u64cd\u4f5c\n\u751f\u6210\u3057\u305fObservable\u306b\u306f\u69d8\u3005\u306a\u64cd\u4f5c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nStreamAPI\u306e\u3088\u3046\u306bCollection\u3092\u64cd\u4f5c\u3059\u308b\u3067\u8a18\u8ff0\u3057\u305f\u3001map\u3001flatMap\u3001fileter\u3001skip\u3001take\u306a\u3069\u3082\u305d\u306e\u4e00\u90e8\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u305d\u306e\u4e2d\u3067\u3088\u304f\u4f7f\u3044\u305d\u3046\u306a\u3082\u306e\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nmap\n\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u6d41\u308c\u3066\u304f\u308b\u30a2\u30a4\u30c6\u30e0\u3092\u5909\u63db\u3059\u308b\u3002\n\nObservable.range(1, 5)\n        .map(i -> i * 2)\n        .subscribe(System.out::print);\n\n// 246810\n\n\nflatMap\n\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u6d41\u308c\u3066\u304f\u308b\u30a2\u30a4\u30c6\u30e0\u3092\u5909\u63db\u3057\u3001\u5408\u6210\u3059\u308b\u3002\n\nObservable.just(1, 2)\n        .flatMap(i -> Observable.range(i, 3))\n        .subscribe(System.out::print);\n\n// 123234345\n\n\nfilter\n\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u3002\n\nObservable.range(1, 5)\n        .filter(i -> i % 2 == 0)\n        .subscribe(System.out::print);\n\n// 24\n\n\nskip\n\u6307\u5b9a\u3057\u305f\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3002\n\nObservable.range(1, 5)\n        .skip(3)\n        .subscribe(System.out::print);\n\n// 345\n\n\ntake\n\u5148\u982d\u304b\u3089\u6307\u5b9a\u3055\u308c\u305f\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u62bd\u51fa\u3059\u308b\u3002\n\u540c\u69d8\u306e\u51e6\u7406\u306elimit\u3082\u5b58\u5728\u3059\u308b\u3002\n\nObservable.range(1, 5)\n        .take(3)\n        .subscribe(System.out::print);\n\n// 123\n\n\nreduce\n\u30a2\u30a4\u30c6\u30e0\u306e\u96c6\u7d04\u3092\u884c\u3046\u3002\n\nObservable.range(1, 3)\n        .reduce((sum, value) -> sum + value)\n        .subscribe(System.out::print);\n\n// 6\n\n\nscan\n\u524d\u56de\u306e\u30a2\u30a4\u30c6\u30e0\u3082\u5f15\u6570\u306b\u53d6\u308bmap\u3002\u7573\u307f\u8fbc\u307e\u306a\u3044reduce\u3002\n\nObservable.range(1, 3)\n        .scan((sum, value) -> sum + value)\n        .subscribe(System.out::print);\n\n// 136\n\n\ncollect\n\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u96c6\u7d04\u3059\u308b\u3002\n\nObservable.range(1, 5).collect(new ArrayList<>(), (li, i) -> li.add(i));\n        .subscribe(System.out::println);\n\n// [1, 2, 3, 4, 5]\n\n\nmerge\n\u8907\u6570\u306eObservable\u3092\u5408\u6210\u3002flatMap\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u306a\u3044\u3002\n\nObservable.merge(Observable.from(list1), Observable.from(list2))\n\n\nconcat\n\u8907\u6570\u306eObservable\u3092\u5408\u6210\u3002\nmerge\u3068concat\u306e\u9055\u3044\u306fmerge\u306fObservable\u3092\u5408\u6210\u3059\u308b\u969b\u306b\u5168\u3066\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u9806\u3092\u8003\u616e\u3057\u3066\u5408\u6210\u306e\u306b\u5bfe\u3057\u3001concat\u306f\u5f15\u6570\u3067\u6e21\u3055\u308c\u305fObservable\u306e\u9806\u3067\u5408\u6210\u3059\u308b\u3053\u3068\u3002\n\nObservable.concat(Observable.from(list1), Observable.from(list2));\n\n\nzip\n\u6e21\u3055\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30a2\u30a4\u30c6\u30e0\u304c\u5168\u3066\u63c3\u3063\u305f\u6642\u70b9\u3067\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\nmerge\u3084concat\u3068\u306e\u9055\u3044\u306f\u3001\u7570\u306a\u308b\u578b\u306eObservable\u3092\u6271\u3048\u308b\u3053\u3068\u3002\n\nObservable<Integer> o1 = Observable.just(1, 3, 5);\nObservable<Integer> o2 = Observable.just(2, 4, 6);\nObservable\n        .zip(o1, o2, (d1, d2) -> d1 + \" + \" + d2 + \" = \" + (d1 + d2))\n        .subscribe(System.out::println);\n\n// 2 + 1 = 3\n// 4 + 3 = 7\n// 6 + 5 = 11\n\n\ncombineLatest\nzip\u540c\u69d8\u306b\u7570\u306a\u308b\u578b\u306eObservable\u3092\u6271\u3046\u304c\u3001\u5404\u30a2\u30a4\u30c6\u30e0\u306eonNext\u304c\u547c\u3070\u308c\u305f\u6642\u70b9\u3067\u3082\u3063\u3068\u3082\u8fd1\u3044\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u6271\u3046\u3002\n\n\ngroupBy\nObservable\u306e\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3092\u884c\u3046\u3002\n\nObservable.range(1, 5)\n        .groupBy(i -> i % 2)\n        .subscribe(grouped -> {\n            grouped.toList().subscribe(list -> System.out.println(format(\"key=%d,value=%s\", grouped.getKey(), list)));\n        });\n\n// key=0,value=[2, 4]\n// key=1,value=[1, 3, 5]\n\n\ndistinct\n\u91cd\u8907\u3092\u6392\u9664\u3059\u308b\u3002\n\u307e\u305f\u91cd\u8907\u65b9\u6cd5\u3092\u9078\u629e\u3059\u308b distinct(Func1 keySelector) \u3082\u5b58\u5728\u3059\u308b\u3002\n\nObservable.from(asList(1, 2, 3, 3, 4, 5, 5))\n        .distinct()\n        .subscribe(System.out::print);\n\n// 12345\n\n\nwindow\n\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u675f\u306d\u3066\u3001\u65b0\u305f\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3059\u308b\u3002\n\u675f\u306d\u65b9\u306b\u3088\u308a\u8907\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u3002\n\nObservable.range(1, 5)\n        .window(2)\n        .subscribe(i -> i.toList().subscribe(System.out::print));\n\n// [1, 2][3, 4][5]\n\n\nbuffer\n\u6307\u5b9a\u3057\u305f\u9593\u9694\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u5206\u5272\u3057\u305fObservable\u306eList\u3092\u751f\u6210\u3059\u308b\u3002\n\u6570\u5024\u306e\u4ed6\u306b\u6642\u9593\u3084\u95a2\u6570\u306a\u3069\u8907\u6570\u306e\u5f15\u6570\u3092\u3068\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u3002\n\nObservable.range(1, 5)\n        .buffer(2)\n        .subscribe(System.out::print);\n\n// [1, 2][3, 4][5]\n\n\nrepeat\nonCompleted\u3055\u308c\u305f\u3068\u304d\u306b\u518d\u5ea6subscribe\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u3002\nrepeat\u51e6\u7406\u3092\u6307\u5b9a\u3059\u308b\u3001repeatWhen\u3082\u5b58\u5728\u3059\u308b\u3002\n\nRandom r = new Random();\nObservable.create(s -> {\n            s.onNext(r.nextInt());\n            s.onCompleted();\n        })\n        .repeat(3)\n        .subscribe(System.out::println);\n\n// 1355134043\n// 1691330796\n// 1863470304\n\n\ntimeout\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\u3057\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u305f\u5834\u5408\u306b\u306fTimeoutException\u304c\u767a\u751f\u3059\u308b\nObservable.interval(3, TimeUnit.SECONDS)\n        .timeout(1, TimeUnit.SECONDS)\n        .onErrorReturn(e -> {\n            System.out.println(e);\n            return -1L;\n        })\n        .subscribe(System.out::println);\n\n// java.util.concurrent.TimeoutException\n// -1\n\n\n\u975e\u540c\u671f\u30fb\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30fbScheduler\n\u975e\u540c\u671f\u3001\u4e26\u5217\u51e6\u7406\u306a\u3069\u3067\u30b9\u30ec\u30c3\u30c9\u306e\u5207\u308a\u66ff\u3048\u3092\u884c\u3046\u969b\u306b\u306f\u3001Scheduler\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u6a19\u6e96\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308bScheduler\u3068\u305d\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u307e\u3059\u3002\nScheduler\n\n\u6a19\u6e96\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308bSchedulers\n\n\n\nScheduler\n\u52d5\u4f5c\n\n\n\n\ncomputation\nCPU\u30d0\u30a6\u30f3\u30c9\u7528\u30b9\u30ec\u30c3\u30c9\u3092\u751f\u6210\u3059\u308b\u3002\u30c7\u30fc\u30bf\u306e\u52a0\u5de5\u306a\u3069\u5411\u3051\u3002\u30b3\u30a2\u6570\u3068\u540c\u3058\u6570\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u305f\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u3092\u3059\u308b\u3002I/O\u51e6\u7406\u3063\u3066\u306f\u3044\u3051\u306a\u3044\u3002\n\n\nio\nI/O\u30d0\u30a6\u30f3\u30c9\u7528\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u751f\u6210\u3059\u308b\u3002DB\u30a2\u30af\u30bb\u30b9\u306a\u3069\u5411\u3051\u30021\u3064\u3060\u3051\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u3066\u3044\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u3092\u884c\u3046\u3002\n\n\ntrampoline\nThredLocal\u306b\u51e6\u7406\u3092\u30ad\u30e5\u30fc\u30a4\u30f3\u30b0\u3057\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u305f\u3089\u9010\u6b21\u5b9f\u884c\u3059\u308b\u3002\n\n\nimmediate\n\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3059\u308b\u3002\u51e6\u7406\u3092\u9045\u5ef6\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u308b\u304c\u30ad\u30e5\u30fc\u30a4\u30f3\u30b0\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n\n\nnewThread\n\u4f5c\u696d\u5358\u4f4d\u3054\u3068\u306b\u65b0\u3057\u3044\u30b9\u30ec\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3059\u308b\u3002\n\n\n\n\nsubscribeOn\nRxJava\u306e\u4e00\u9023\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3002\nObservable.range(1, 5)\n        .subscribeOn(Schedulers.newThread())\n        .subscribe(i -> System.out.print(Thread.currentThread().getName()));\n\n// RxNewThreadScheduler-1\n// RxNewThreadScheduler-1\n// RxNewThreadScheduler-1\n// RxNewThreadScheduler-1\n// RxNewThreadScheduler-1\n\n\nobserveOn\nObserver\u306e\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3002\nObservable.range(1, 3)\n        .subscribeOn(Schedulers.newThread())\n        .map(i -> {\n            System.out.println(\"map: (\" + Thread.currentThread().getName() + \")\");\n            return i * 2;\n        })\n        .observeOn(Schedulers.computation())\n        .subscribe(i -> System.out.println(\"subscribe: \" + i + \" (\" + Thread.currentThread().getName() + \")\"));\n\n// map: (RxNewThreadScheduler-1)\n// map: (RxNewThreadScheduler-1)\n// map: (RxNewThreadScheduler-1)\n// subscribe: 2 (RxComputationThreadPool-3)\n// subscribe: 4 (RxComputationThreadPool-3)\n// subscribe: 6 (RxComputationThreadPool-3)\n\n\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\nRxJava\u306e\u30e1\u30ea\u30c3\u30c8\u3068\u3057\u3066\u3001\u901a\u5e38\u51e6\u7406\u5358\u4f4d\u3067\u884c\u308f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3088\u3046\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4e2d\u306e\u51e6\u7406\u306b\u5bfe\u3057\u3066\u3001\u7d71\u4e00\u3057\u305f\u8a18\u6cd5\u3067\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\nonErrorReturn\n\u4f8b\u5916\u304c\u767a\u751f\u6642\u306e\u51e6\u7406\u3092\u884c\u3046\u3002\n\u540c\u3058\u578b\u306eObservable\u3092\u8fd4\u308a\u5024\u3068\u3059\u308bonErrorResumeNext\u3082\u5b58\u5728\u3059\u308b\u3002\nObservable.range(1, 5)\n        .doOnNext(i -> {\n            if (i == 2) {\n                throw new RuntimeException(\"Error!!\");\n            }\n        })\n        .onErrorReturn(e -> {\n            System.out.println(e.getMessage());\n            return -1;\n        })\n        .subscribe(System.out::println);\n\n// 1\n// Error!!\n// -1\n\n\nretry\n\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u3082\u6307\u5b9a\u306e\u56de\u6570\u30ea\u30c8\u30e9\u30a4\u3092\u884c\u3046\u3002\n\u30ea\u30c8\u30e9\u30a4\u51e6\u7406\u3092\u7d30\u304b\u304f\u6307\u5b9a\u3067\u304d\u308bObservable#retryWhen\u3082\u5b58\u5728\u3059\u308b\u3002\nObservable.range(1, 5)\n        .doOnNext(i -> {\n            if (new Random().nextInt(3) == 1) {\n                throw new RuntimeException(\"Error!\");\n            }\n        })\n        .retry(1)\n        .onErrorReturn(e -> {\n            System.out.println(e);\n            return -1;\n        })\n        .subscribe(System.out::println);\n\n// 1\n// 2\n// 1\n// 2\n// 3\n// java.lang.RuntimeException: Error!\n//  -1\n\n\n\u307e\u3068\u3081\n\u3053\u3053\u3067\u7d39\u4ecb\u3057\u305fAPI\u306f\u307b\u3093\u306e\u4e00\u90e8\u3067\u3001\u305d\u308c\u4ee5\u5916\u306b\u3082Hot/Cold\u306e\u6027\u8cea\u3084Data Binding\u3001Event Bus\u3001Reactive Streams\u5bfe\u5fdc\u306a\u3069\u591a\u304f\u306e\u6a5f\u80fd\u304c\u5b58\u5728\u3059\u308b\u306e\u3067\u3001\u305d\u306e\u8fba\u308a\u306f\u307e\u305f\u6642\u9593\u304c\u53d6\u308c\u305f\u6642\u306b\u8ffd\u52a0\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\nRxJava Github\nRxJava Javadoc\nWeb+DB Press val.81 Java\u306e\u9271\u8108\nRx\u306eHot\u3068Cold\u306b\u3064\u3044\u3066\nMastering observables\n\u3010\u7ffb\u8a33\u3011\u3042\u306a\u305f\u304c\u6c42\u3081\u3066\u3044\u305f\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580\nrxJava Schedulers Use Cases\nRx\u9006\u5f15\u304d\n# \u306a\u305cRxJava?\nRxJava\u306f\u69d8\u3005\u306a\u7279\u6027\u3092\u4f75\u305b\u6301\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u304c\u3001\u7c21\u5358\u306b\u307e\u3068\u3081\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6a5f\u80fd\u306b\u5206\u985e\u3055\u308c\u307e\u3059\u3002\n\n> - List\u51e6\u7406\u306e\u62bd\u8c61\u5316\u30fb\u30b9\u30c8\u30ea\u30fc\u30e0\u5316\n> - Optional\n> - Future/Promise\n> - Data Binding\n> - Event Bus\n\n[Android\u958b\u767a\u3067RxJava\u3092\u30c1\u30fc\u30e0\u306b\u5c0e\u5165\u3057\u305f\u8a71](http://techlife.cookpad.com/entry/2015/04/17/100000)\n\nJava 8\u3067\u306fStream API\u3084Optional\u304c\u5c0e\u5165\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001Android\u3084\u696d\u52d9\u8981\u4ef6\u306a\u3069\u305d\u306eAPI\u3092\u4f7f\u3048\u306a\u3044\u74b0\u5883\u3082\u5b58\u5728\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u975e\u540c\u671f\u3084\u4e26\u5217\u306a\u3069\u305d\u3082\u305d\u3082Java\u3067\u6271\u3044\u306b\u304f\u3044\u51e6\u7406\u3092\u3001\u7d71\u4e00\u3055\u308c\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u7c21\u6f54\u306b\u8a18\u8ff0\u3067\u304d\u308b\u306a\u3069\u306e\u30e1\u30ea\u30c3\u30c8\u3082\u591a\u304f\u3001\u305d\u306e\u57fa\u672c\u7684\u306a\u6a5f\u80fd\u3092\u8a66\u3057\u3066\u307f\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u3053\u3053\u306b\u8a18\u8f09\u3059\u308b\u5185\u5bb9\u306fRxJava\u306e\u4f7f\u3044\u65b9\u304c\u4e2d\u5fc3\u3067\u3001RxJava\u81ea\u4f53\u306e\u6982\u5ff5\u3084FRP\u306a\u3069\u306b\u3064\u3044\u3066\u306f\u3001\u4ed6\u306b\u3082\u591a\u304f\u306e\u65b9\u3005\u7d39\u4ecb\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u3054\u89a7\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u5358\u7d14\u5316\u306e\u305f\u3081\u306bfrom\u3084just,range\u306a\u3069\u751f\u6210\u6e08\u307f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u6765Rx\u306f\u6642\u9593\u7684\u306b\u5909\u5316\u3059\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u3082\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u5b9f\u904b\u7528\u3067\u4f7f\u7528\u3059\u308b\u3068\u304d\u306b\u306f\u305d\u306e\u8fba\u308a\u3082\u8003\u616e\u3057\u3066\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n# Use Case\n\u7d30\u304b\u306a\u6a5f\u80fd\u304b\u3089\u3060\u3068\u3001\u30e1\u30ea\u30c3\u30c8\u304c\u308f\u304b\u308a\u306b\u304f\u304f\u306a\u308b\u306e\u3067\u3001\u307e\u305a\u306f\u3044\u304f\u3064\u304b\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## Stream API\u306e\u3088\u3046\u306bCollection\u3092\u64cd\u4f5c\u3059\u308b\n\u611f\u899a\u7684\u306b\u7406\u89e3\u3057\u3084\u3059\u3044\u540c\u671f\u7684\u306bCollection\u306e\u64cd\u4f5c\u3092\u884c\u3046\u4f8b\u3002\n\n```Java:\nList<Integer> res = Observable.from(Arrays.asList(1, 2, 3, 4, 5, 6)) // Iterable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089Observable\u3092\u751f\u6210\n        .flatMap(Observable::just)        // Stream API\u306eflatMap\u76f8\u5f53\n        .filter(i -> i % 2 == 0)          // Stream API\u306efilter\u76f8\u5f53\n        .map(i -> i * 2)                  // Stream API\u306emap\u76f8\u5f53\n        .skip(1)                          // Stream API\u306eskip\u76f8\u5f53\n        .take(3)                          // Stream API\u306elimit\u76f8\u5f53 \u203b\u540c\u69d8\u306e\u51e6\u7406\u306elimit()\u3082\u5b58\u5728\u3059\u308b\n        .toList()                         // \u30b9\u30c8\u30ea\u30fc\u30e0\u3092List\u306b\u5909\u63db\n        .toBlocking()                     // \u540c\u671f\u51e6\u7406\u3067\u884c\u3046\n        .single();                        // \u8981\u7d20\u3092\u53d6\u5f97\n\nSystem.out.println(res); // [8, 12]\n```\n\u30d5\u30a1\u30af\u30c8\u30ea\u3068\u306a\u308bfrom()\u3068\u540c\u671f\u7684\u306bList\u306e\u5909\u63db\u3092\u884c\u3046toList().toBlocking().single()\u90e8\u5206\u306e\u8a18\u8ff0\u306b\u9055\u3044\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u307b\u3068\u3093\u3069Java 8\u306eStream API\u3068\u540c\u3058\u3088\u3046\u306a\u611f\u899a\u3067\u64cd\u4f5c\u304c\u51fa\u6765\u307e\u3059\u3002\n\n## Optional\u306e\u3088\u3046\u306b\u6271\u3046\nRxJava\u306e\u4e2d\u5fc3\u3068\u306a\u3063\u3066\u3044\u308bObservable\u306fOptional\u306b\u4f3c\u305f\u6027\u8cea\u3082\u6301\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u3066Optional\u306e\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n\u305d\u306e\u307e\u307e\u8a18\u8ff0\u3059\u308b\u3068\u5197\u9577\u306b\u306a\u308b\u306e\u3067\u3001\u4eca\u56de\u306fObservables\u3068\u3044\u3046\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\n```Java:\n@Test\npublic void Optional\u306e\u3088\u3046\u306b\u6271\u3046() throws Exception {\n\n    Observable<String> exist = Observables.ofNullable(\"val\");\n    Observable<Object> empty = Observables.ofNullable(null);\n\n    // Optional#ifPresent\n    exist.subscribe(System.out::println); // val\n    empty.subscribe(System.out::println); // \u8868\u793a\u51e6\u7406\u81ea\u4f53\u3082\u547c\u3070\u308c\u306a\u3044\n\n    // Optional#flatMap, map, filter\n    Observables.ofNullable(\"1,2,3,4\")\n            .flatMap(str-> Observable.from(asList(str.split(\",\"))))\n            .map(Integer::parseInt)\n            .filter(i -> i % 2 == 0)\n            .subscribe(System.out::println);\n\n    // Optional#get\n    Observables.get(exist); // val\n    Observables.get(empty); // throw NoSuchElementException\n\n    // Optional#orElse\n    Observables.orElse(exist, \"default\"); // val\n    Observables.orElse(empty, \"default\"); // default\n\n    // Optional#isPresent\n    Observables.isPresent(exist); // true\n    Observables.isPresent(empty); // false\n}\n\nclass Observables {\n    static <T> Observable<T> of(T value){\n        if(value == null){\n            throw new NullPointerException();\n        }\n        else{\n            return Observable.just(value);\n        }\n    }\n\n    static <T> Observable<T> ofNullable(T value){\n        return value == null ? Observable.empty() : Observable.just(value);\n    }\n\n    static <T> T get(Observable<T> observable){\n        return observable.toBlocking().single();\n    }\n\n    static <T> T orElse(Observable<T> observable, T other){\n        return observable.defaultIfEmpty(other).toBlocking().single();\n    }\n\n    static <T> boolean isPresent(Observable<T> observable){\n        return !observable.isEmpty().toBlocking().single();\n    }\n\n    static <T> T orElseGet(Observable<T> observable, Func0<T> other) {\n        return isPresent(observable) ? get(observable) : other.call();\n    }\n\n    static <T, X extends Throwable> T orElseThrow(Observable<T> observable, Func0<? extends X> other) throws X {\n        if (isPresent(observable)) {\n            return get(observable);\n        } else {\n            throw other.call();\n        }\n    }\n}\n```\n\n## Future/Promise\u306e\u3088\u3046\u306b\u6271\u3046\nObservable\u306f\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u5207\u308a\u66ff\u3048\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u306e\u3067\u3001Web API\u3084DB\u30a2\u30af\u30bb\u30b9\u306a\u3069\u91cd\u3044\u51e6\u7406\u3092\u975e\u540c\u671f\u5316\u3057\u5408\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nObservable\u3068Future/Promise\u3068\u306e\u9055\u3044\u306f\u3001Request/Response\u306e\u3088\u3046\u306a\u4e00\u3064\u306e\u8981\u7d20\u3060\u3051\u3067\u306f\u306a\u304f\u30a4\u30d9\u30f3\u30c8\u306e\u3088\u3046\u306a\u8907\u6570\u767a\u751f\u3059\u308b\u8981\u7d20\u3092\u3092\u6271\u3048\u308b\u3053\u3068\u3067\u3059\u3002\n\u4eca\u56de\u306fFuture/Promise\u3068\u540c\u69d8\u306bObservable\u306b\u5358\u4e00\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3057\u3066\u6271\u3044\u307e\u3059\u3002\n\n```Java:\n@Test\npublic void FuturePromise\u306e\u3088\u3046\u306b\u6271\u3046() throws Exception {\n\n    // \u76f4\u5217+\u4e26\u5217\u306b\u51e6\u7406\u3059\u308b\u4f8b\n    // \u6700\u521d\u306b\u30e6\u30fc\u30b6\u306e\u8a8d\u8a3c\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3001\u305d\u306e\u8a8d\u8a3c\u60c5\u5831\u3092\u5143\u306b\u4e26\u5217\u306b\u30e6\u30fc\u30b6\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u4f8b\n    Stopwatch sw = Stopwatch.createStarted();\n    getAuthId(\"id\", \"pass\")\n            .flatMap(id -> Observable.zip(getUserInfo(id), getUserItems(id),\n                    (info, items) -> info + \" has items = \" + items))\n            .subscribe(new Subscriber<String>() {\n                @Override\n                public void onCompleted() {\n                    System.out.println(\"All time: \" + sw.stop());\n                }\n                @Override\n                public void onError(Throwable e) {\n                }\n                @Override\n                public void onNext(String s) {\n                    System.out.println(s);\n                }\n            });\n\n    // Outpuot:\n    //\n    // getAuthId, ThreadName: RxCachedThreadScheduler-1, Params:id,pass\n    // getUserInfo, ThreadName: RxCachedThreadScheduler-2, Params: 123\n    // getUserItems, ThreadName: RxCachedThreadScheduler-3, Params: 123\n    // Tom has items = [Apple, Banana]\n    // All time: 4.191 s\n}\n\nObservable<Integer> getAuthId(String id, String pass) {\n    return Observable.create((Subscriber<? super Integer> subscriber) -> {\n   \u3000\u3000\u3000// \u672c\u6765\u4ee5\u4e0b\u306fWeb\u3084DB\u30a2\u30af\u30bb\u30b9\u306a\u3069\n        try {\n            System.out.println(String.format(\"getAuthId, ThreadName: %s, Params:%s,%s\", Thread.currentThread().getName(), id, pass));\n            Threads.sleep(1000);\n            subscriber.onNext(123);\n            subscriber.onCompleted();\n        } catch (Exception e) {\n            subscriber.onError(e);\n        }\n    }).subscribeOn(Schedulers.io());\n}\n\nObservable<String> getUserInfo(Integer authId) {\n    return Observable.create((Subscriber<? super String> subscriber) -> {\n   \u3000\u3000\u3000// \u672c\u6765\u4ee5\u4e0b\u306fWeb\u3084DB\u30a2\u30af\u30bb\u30b9\u306a\u3069\n        try {\n            System.out.println(String.format(\"getUserInfo, ThreadName: %s, Params: %d\", Thread.currentThread().getName(), authId));\n            Threads.sleep(2000);\n            subscriber.onNext(\"Tom\");\n            subscriber.onCompleted();\n        } catch (Exception e) {\n            subscriber.onError(e);\n        }\n    }).subscribeOn(Schedulers.io());\n}\n\nObservable<List<String>> getUserItems(Integer authId) {\n    return Observable.create((Subscriber<? super List<String>> subscriber) -> {\n   \u3000\u3000\u3000// \u672c\u6765\u4ee5\u4e0b\u306fWeb\u3084DB\u30a2\u30af\u30bb\u30b9\u306a\u3069\n        try {\n            System.out.println(String.format(\"getUserItems, ThreadName: %s, Params: %d\", Thread.currentThread().getName(), authId));\n            Threads.sleep(3000);\n            subscriber.onNext(asList(\"Apple\", \"Banana\"));\n            subscriber.onCompleted();\n        } catch (Exception e) {\n            subscriber.onError(e);\n        }\n    }).subscribeOn(Schedulers.io());\n}\n```\n\u5404\u30e1\u30bd\u30c3\u30c9\u306e\u51e6\u7406\u6642\u9593\u304c1+2+3\u306a\u306e\u30676\u79d2\u304b\u304b\u308b\u306f\u305a\u306e\u51e6\u7406\u304c\u4e26\u5217\u306b\u547c\u3073\u51fa\u3057\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u30674\u79d2\u5f37\u3067\u5b8c\u4e86\u3057\u307e\u3059\u3002\n\u307e\u305f\u3053\u3046\u3044\u3063\u305f\u975e\u540c\u671f\u3001\u4e26\u5217\u51e6\u7406\u3092Http\u7d4c\u7531\u3067\u884c\u3046\u969b\u306b\u306f\u3001Retrofit\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3088\u308a\u7c21\u6f54\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\u3002\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u3060\u3068\u66f4\u306b\u3001Data Binding\u3084Event Bus\u306a\u3069\u306e\u6a5f\u80fd\u3082\u6709\u52b9\u306b\u6d3b\u7528\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n# RxJava\u306eAPI\nRxJava\u306b\u306f\u975e\u5e38\u306b\u8c4a\u5bcc\u306aAPI\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u3053\u304b\u3089\u306f\u305d\u306eAPI\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n## Observable\u306e\u751f\u6210\nRxJava\u306b\u306f\u591a\u304f\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u3089\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u69d8\u3005\u306a\u30c7\u30fc\u30bf\u304b\u3089Observable\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n[Creating Observables](https://github.com/ReactiveX/RxJava/wiki/Creating-Observables)\n\n\n### from\nIterable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089Observable\u3092\u751f\u6210\u3002\n\u305d\u306e\u4ed6\u306b\u3082\u914d\u5217\u3084Future\u306a\u3069\u591a\u304f\u306e\u5f15\u6570\u304b\u3089Observable\u3092\u751f\u6210\u3059\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u3002\n\n```Java:\nObservable<List<Integer>> o = Observable.from(list);\n```\n\n### create\nOnSubscribe\u3092\u6307\u5b9a\u3057\u3066Observable\u3092\u751f\u6210\u3002\n\n```Java:\nObservable<String> o = Observable.create(subscriber -> {\n\t\t    subscriber.onNext(\"Hello\");\n\t\t    subscriber.onNext(\"world!\");\n\t\t    subscriber.onCompleted();\n\t\t});\n```\n\n### range\n\u8981\u7d20\u306e\u7bc4\u56f2\u3092\u6307\u5b9a\u3057\u3066Observable\u3092\u751f\u6210\u3002\n\n```Java:\nObservable<Integer> o = Observable.range(1, 5);\n```\n\n\n### just\n\u5f15\u6570\u3067\u76f4\u63a5Observable\u3092\u751f\u6210\n\n```Java:\n\nObservable<Integer> o = Observable.just(1, 2, 3);\n```\n\n\n### error\n\u4f8b\u5916\u3092\u6301\u3063\u305fObservable\u3092\u751f\u6210\n\n```Java:\nObservable<Object> o = Observable.error(new RuntimeException(\"Error!\"));\n```\n\n\n### empty\n\u7a7a\u306eObservable\u3092\u751f\u6210\n\n```Java:\nObservable<Object> o = Observable.empty();\n```\n\n### interval\n\u975e\u540c\u671f\u3067\u6307\u5b9a\u9593\u9694\u3054\u3068\u306bsubscribe\u3059\u308b\u3002\ntoBlocking\u306a\u3069\u3057\u3066\u3082\u30d6\u30ed\u30c3\u30af\u3055\u308c\u306a\u3044\u3002\ntake\u306a\u3069\u3067\u56de\u6570\u5236\u9650\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```Java:\nObservable\n        .interval(1, TimeUnit.SECONDS)\n        .subscribe(System.out::print);\n\n// 12345...\n```\n\n\n## Observable\u306e\u64cd\u4f5c\n\u751f\u6210\u3057\u305fObservable\u306b\u306f\u69d8\u3005\u306a\u64cd\u4f5c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nStreamAPI\u306e\u3088\u3046\u306bCollection\u3092\u64cd\u4f5c\u3059\u308b\u3067\u8a18\u8ff0\u3057\u305f\u3001map\u3001flatMap\u3001fileter\u3001skip\u3001take\u306a\u3069\u3082\u305d\u306e\u4e00\u90e8\u3067\u3059\u3002\n\u3053\u3053\u3067\u306f\u305d\u306e\u4e2d\u3067\u3088\u304f\u4f7f\u3044\u305d\u3046\u306a\u3082\u306e\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\n### map\n\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u6d41\u308c\u3066\u304f\u308b\u30a2\u30a4\u30c6\u30e0\u3092\u5909\u63db\u3059\u308b\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/map.png)\n\n```Java:\nObservable.range(1, 5)\n        .map(i -> i * 2)\n        .subscribe(System.out::print);\n\n// 246810\n```\n\n### flatMap\n\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u6d41\u308c\u3066\u304f\u308b\u30a2\u30a4\u30c6\u30e0\u3092\u5909\u63db\u3057\u3001\u5408\u6210\u3059\u308b\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flatMap.png)\n\n```Java:\nObservable.just(1, 2)\n        .flatMap(i -> Observable.range(i, 3))\n        .subscribe(System.out::print);\n\n// 123234345\n```\n\n### filter\n\u6761\u4ef6\u306b\u4e00\u81f4\u3057\u305f\u30a2\u30a4\u30c6\u30e0\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/filter.png)\n\n```Java:\nObservable.range(1, 5)\n        .filter(i -> i % 2 == 0)\n        .subscribe(System.out::print);\n\n// 24\n```\n\n### skip\n\u6307\u5b9a\u3057\u305f\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/skip.png)\n\n```Java:\nObservable.range(1, 5)\n        .skip(3)\n        .subscribe(System.out::print);\n\n// 345\n```\n\n### take\n\u5148\u982d\u304b\u3089\u6307\u5b9a\u3055\u308c\u305f\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u62bd\u51fa\u3059\u308b\u3002\n\u540c\u69d8\u306e\u51e6\u7406\u306elimit\u3082\u5b58\u5728\u3059\u308b\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/take.png)\n\n```Java:\nObservable.range(1, 5)\n        .take(3)\n        .subscribe(System.out::print);\n\n// 123\n```\n\n### reduce\n\u30a2\u30a4\u30c6\u30e0\u306e\u96c6\u7d04\u3092\u884c\u3046\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/reduce.png)\n\n```Java:\nObservable.range(1, 3)\n        .reduce((sum, value) -> sum + value)\n        .subscribe(System.out::print);\n\n// 6\n```\n\n### scan\n\u524d\u56de\u306e\u30a2\u30a4\u30c6\u30e0\u3082\u5f15\u6570\u306b\u53d6\u308bmap\u3002\u7573\u307f\u8fbc\u307e\u306a\u3044reduce\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/scan.png)\n\n```Java:\nObservable.range(1, 3)\n        .scan((sum, value) -> sum + value)\n        .subscribe(System.out::print);\n\n// 136\n```\n\n\n### collect\n\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u96c6\u7d04\u3059\u308b\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/collect.png)\n\n```Java:\nObservable.range(1, 5).collect(new ArrayList<>(), (li, i) -> li.add(i));\n        .subscribe(System.out::println);\n\n// [1, 2, 3, 4, 5]\n```\n\n\n\n### merge\n\u8907\u6570\u306eObservable\u3092\u5408\u6210\u3002flatMap\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u306a\u3044\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/merge.png)\n\n```Java:\nObservable.merge(Observable.from(list1), Observable.from(list2))\n```\n\n\n### concat\n\u8907\u6570\u306eObservable\u3092\u5408\u6210\u3002\nmerge\u3068concat\u306e\u9055\u3044\u306fmerge\u306fObservable\u3092\u5408\u6210\u3059\u308b\u969b\u306b\u5168\u3066\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u9806\u3092\u8003\u616e\u3057\u3066\u5408\u6210\u306e\u306b\u5bfe\u3057\u3001concat\u306f\u5f15\u6570\u3067\u6e21\u3055\u308c\u305fObservable\u306e\u9806\u3067\u5408\u6210\u3059\u308b\u3053\u3068\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concat.png)\n\n```Java:\nObservable.concat(Observable.from(list1), Observable.from(list2));\n```\n\n### zip\n\u6e21\u3055\u308c\u305f\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30a2\u30a4\u30c6\u30e0\u304c\u5168\u3066\u63c3\u3063\u305f\u6642\u70b9\u3067\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\nmerge\u3084concat\u3068\u306e\u9055\u3044\u306f\u3001\u7570\u306a\u308b\u578b\u306eObservable\u3092\u6271\u3048\u308b\u3053\u3068\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/zip.png)\n\n```Java:\nObservable<Integer> o1 = Observable.just(1, 3, 5);\nObservable<Integer> o2 = Observable.just(2, 4, 6);\nObservable\n        .zip(o1, o2, (d1, d2) -> d1 + \" + \" + d2 + \" = \" + (d1 + d2))\n        .subscribe(System.out::println);\n\n// 2 + 1 = 3\n// 4 + 3 = 7\n// 6 + 5 = 11\n```\n\n\n### combineLatest\nzip\u540c\u69d8\u306b\u7570\u306a\u308b\u578b\u306eObservable\u3092\u6271\u3046\u304c\u3001\u5404\u30a2\u30a4\u30c6\u30e0\u306eonNext\u304c\u547c\u3070\u308c\u305f\u6642\u70b9\u3067\u3082\u3063\u3068\u3082\u8fd1\u3044\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u6271\u3046\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatest.png)\n\n\n\n### groupBy\nObservable\u306e\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3092\u884c\u3046\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/groupBy.png)\n\n```Java:\nObservable.range(1, 5)\n        .groupBy(i -> i % 2)\n        .subscribe(grouped -> {\n            grouped.toList().subscribe(list -> System.out.println(format(\"key=%d,value=%s\", grouped.getKey(), list)));\n        });\n\n// key=0,value=[2, 4]\n// key=1,value=[1, 3, 5]\n```\n\n\n### distinct\n\u91cd\u8907\u3092\u6392\u9664\u3059\u308b\u3002\n\u307e\u305f\u91cd\u8907\u65b9\u6cd5\u3092\u9078\u629e\u3059\u308b distinct(Func1 keySelector) \u3082\u5b58\u5728\u3059\u308b\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/distinct.png)\n\n```Java:\nObservable.from(asList(1, 2, 3, 3, 4, 5, 5))\n        .distinct()\n        .subscribe(System.out::print);\n\n// 12345\n```\n\n\n### window\n\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u675f\u306d\u3066\u3001\u65b0\u305f\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3059\u308b\u3002\n\u675f\u306d\u65b9\u306b\u3088\u308a\u8907\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/window3.png)\n\n```Java:\nObservable.range(1, 5)\n        .window(2)\n        .subscribe(i -> i.toList().subscribe(System.out::print));\n\n// [1, 2][3, 4][5]\n```\n\n\n\n### buffer\n\n\u6307\u5b9a\u3057\u305f\u9593\u9694\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u5206\u5272\u3057\u305fObservable\u306eList\u3092\u751f\u6210\u3059\u308b\u3002\n\u6570\u5024\u306e\u4ed6\u306b\u6642\u9593\u3084\u95a2\u6570\u306a\u3069\u8907\u6570\u306e\u5f15\u6570\u3092\u3068\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u5b58\u5728\u3059\u308b\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/buffer3.png)\n\n```Java:\nObservable.range(1, 5)\n        .buffer(2)\n        .subscribe(System.out::print);\n\n// [1, 2][3, 4][5]\n```\n\n\n### repeat\nonCompleted\u3055\u308c\u305f\u3068\u304d\u306b\u518d\u5ea6subscribe\u3059\u308b\u30aa\u30da\u30ec\u30fc\u30bf\u3002\nrepeat\u51e6\u7406\u3092\u6307\u5b9a\u3059\u308b\u3001repeatWhen\u3082\u5b58\u5728\u3059\u308b\u3002\n![](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/repeat.on.png)\n\n```Java:\nRandom r = new Random();\nObservable.create(s -> {\n            s.onNext(r.nextInt());\n            s.onCompleted();\n        })\n        .repeat(3)\n        .subscribe(System.out::println);\n\n// 1355134043\n// 1691330796\n// 1863470304\n```\n\n### timeout\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\u3057\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u305f\u5834\u5408\u306b\u306fTimeoutException\u304c\u767a\u751f\u3059\u308b\n\n```Java:\nObservable.interval(3, TimeUnit.SECONDS)\n        .timeout(1, TimeUnit.SECONDS)\n        .onErrorReturn(e -> {\n            System.out.println(e);\n            return -1L;\n        })\n        .subscribe(System.out::println);\n\n// java.util.concurrent.TimeoutException\n// -1\n```\n\n\n## \u975e\u540c\u671f\u30fb\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30fbScheduler\n\u975e\u540c\u671f\u3001\u4e26\u5217\u51e6\u7406\u306a\u3069\u3067\u30b9\u30ec\u30c3\u30c9\u306e\u5207\u308a\u66ff\u3048\u3092\u884c\u3046\u969b\u306b\u306f\u3001Scheduler\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u6a19\u6e96\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308bScheduler\u3068\u305d\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u307e\u3059\u3002\n[Scheduler](https://github.com/ReactiveX/RxJava/wiki/Scheduler)\n\n\n### \u6a19\u6e96\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308bSchedulers\n| Scheduler |\u52d5\u4f5c|\n|:--|:--|\n|computation|CPU\u30d0\u30a6\u30f3\u30c9\u7528\u30b9\u30ec\u30c3\u30c9\u3092\u751f\u6210\u3059\u308b\u3002\u30c7\u30fc\u30bf\u306e\u52a0\u5de5\u306a\u3069\u5411\u3051\u3002\u30b3\u30a2\u6570\u3068\u540c\u3058\u6570\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u305f\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u3092\u3059\u308b\u3002I/O\u51e6\u7406\u3063\u3066\u306f\u3044\u3051\u306a\u3044\u3002|\n|io|I/O\u30d0\u30a6\u30f3\u30c9\u7528\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u751f\u6210\u3059\u308b\u3002DB\u30a2\u30af\u30bb\u30b9\u306a\u3069\u5411\u3051\u30021\u3064\u3060\u3051\u30ad\u30e3\u30c3\u30b7\u30e5\u3055\u308c\u3066\u3044\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u3092\u884c\u3046\u3002|\n|trampoline|ThredLocal\u306b\u51e6\u7406\u3092\u30ad\u30e5\u30fc\u30a4\u30f3\u30b0\u3057\u73fe\u5728\u5b9f\u884c\u4e2d\u306e\u51e6\u7406\u304c\u5b8c\u4e86\u3057\u305f\u3089\u9010\u6b21\u5b9f\u884c\u3059\u308b\u3002|\n|immediate|\u73fe\u5728\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3059\u308b\u3002\u51e6\u7406\u3092\u9045\u5ef6\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u308b\u304c\u30ad\u30e5\u30fc\u30a4\u30f3\u30b0\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002|\n|newThread|\u4f5c\u696d\u5358\u4f4d\u3054\u3068\u306b\u65b0\u3057\u3044\u30b9\u30ec\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3059\u308b\u3002|\n\n\n### subscribeOn\nRxJava\u306e\u4e00\u9023\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n```Java:\nObservable.range(1, 5)\n        .subscribeOn(Schedulers.newThread())\n        .subscribe(i -> System.out.print(Thread.currentThread().getName()));\n\n// RxNewThreadScheduler-1\n// RxNewThreadScheduler-1\n// RxNewThreadScheduler-1\n// RxNewThreadScheduler-1\n// RxNewThreadScheduler-1\n```\n\n\n### observeOn\nObserver\u306e\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n```Java:\nObservable.range(1, 3)\n        .subscribeOn(Schedulers.newThread())\n        .map(i -> {\n            System.out.println(\"map: (\" + Thread.currentThread().getName() + \")\");\n            return i * 2;\n        })\n        .observeOn(Schedulers.computation())\n        .subscribe(i -> System.out.println(\"subscribe: \" + i + \" (\" + Thread.currentThread().getName() + \")\"));\n\n// map: (RxNewThreadScheduler-1)\n// map: (RxNewThreadScheduler-1)\n// map: (RxNewThreadScheduler-1)\n// subscribe: 2 (RxComputationThreadPool-3)\n// subscribe: 4 (RxComputationThreadPool-3)\n// subscribe: 6 (RxComputationThreadPool-3)\n```\n\n## \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\nRxJava\u306e\u30e1\u30ea\u30c3\u30c8\u3068\u3057\u3066\u3001\u901a\u5e38\u51e6\u7406\u5358\u4f4d\u3067\u884c\u308f\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3088\u3046\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4e2d\u306e\u51e6\u7406\u306b\u5bfe\u3057\u3066\u3001\u7d71\u4e00\u3057\u305f\u8a18\u6cd5\u3067\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n### onErrorReturn\n\u4f8b\u5916\u304c\u767a\u751f\u6642\u306e\u51e6\u7406\u3092\u884c\u3046\u3002\n\u540c\u3058\u578b\u306eObservable\u3092\u8fd4\u308a\u5024\u3068\u3059\u308bonErrorResumeNext\u3082\u5b58\u5728\u3059\u308b\u3002\n\n```Java:\nObservable.range(1, 5)\n        .doOnNext(i -> {\n            if (i == 2) {\n                throw new RuntimeException(\"Error!!\");\n            }\n        })\n        .onErrorReturn(e -> {\n            System.out.println(e.getMessage());\n            return -1;\n        })\n        .subscribe(System.out::println);\n\n// 1\n// Error!!\n// -1\n```\n\n### retry\n\u4f8b\u5916\u304c\u767a\u751f\u3057\u3066\u3082\u6307\u5b9a\u306e\u56de\u6570\u30ea\u30c8\u30e9\u30a4\u3092\u884c\u3046\u3002\n\u30ea\u30c8\u30e9\u30a4\u51e6\u7406\u3092\u7d30\u304b\u304f\u6307\u5b9a\u3067\u304d\u308bObservable#retryWhen\u3082\u5b58\u5728\u3059\u308b\u3002\n\n```Java:\nObservable.range(1, 5)\n        .doOnNext(i -> {\n            if (new Random().nextInt(3) == 1) {\n                throw new RuntimeException(\"Error!\");\n            }\n        })\n        .retry(1)\n        .onErrorReturn(e -> {\n            System.out.println(e);\n            return -1;\n        })\n        .subscribe(System.out::println);\n\n// 1\n// 2\n// 1\n// 2\n// 3\n// java.lang.RuntimeException: Error!\n//  -1\n```\n\n\n\n\n# \u307e\u3068\u3081\n\u3053\u3053\u3067\u7d39\u4ecb\u3057\u305fAPI\u306f\u307b\u3093\u306e\u4e00\u90e8\u3067\u3001\u305d\u308c\u4ee5\u5916\u306b\u3082Hot/Cold\u306e\u6027\u8cea\u3084Data Binding\u3001Event Bus\u3001Reactive Streams\u5bfe\u5fdc\u306a\u3069\u591a\u304f\u306e\u6a5f\u80fd\u304c\u5b58\u5728\u3059\u308b\u306e\u3067\u3001\u305d\u306e\u8fba\u308a\u306f\u307e\u305f\u6642\u9593\u304c\u53d6\u308c\u305f\u6642\u306b\u8ffd\u52a0\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n# \u53c2\u8003\n[RxJava Github](https://github.com/ReactiveX/RxJava)\n[RxJava Javadoc](http://reactivex.io/RxJava/javadoc/)\nWeb+DB Press val.81 Java\u306e\u9271\u8108\n[Rx\u306eHot\u3068Cold\u306b\u3064\u3044\u3066](http://qiita.com/toRisouP/items/f6088963037bfda658d3)\n[Mastering observables](http://docs.couchbase.com/developer/java-2.0/observables.html)\n[\u3010\u7ffb\u8a33\u3011\u3042\u306a\u305f\u304c\u6c42\u3081\u3066\u3044\u305f\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580](http://ninjinkun.hatenablog.com/entry/introrxja)\n[rxJava Schedulers Use Cases](http://stackoverflow.com/questions/31276164/rxjava-schedulers-use-cases)\n[Rx\u9006\u5f15\u304d](http://wilfrem.github.io/learn_rx/operators.html)\n", "tags": ["Java", "RxJava"]}