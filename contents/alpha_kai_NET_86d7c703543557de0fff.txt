{"context": "\u4ee5\u524dD\u8a00\u8a9e\u3092\u66f8\u3044\u3066\u3044\u308b\u6642\u306b\u3001\u4efb\u610f\u306e\u95a2\u6570\u3092\u30ab\u30ea\u30fc\u5316\u3057\u305f\u304f\u306a\u3063\u3066\u3001\u6b21\u306e\u3088\u3046\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n// \u30ab\u30ea\u30fc\u5316\u7528\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\ntemplate curry(alias func){\n  import std.algorithm, std.conv, std.range, std.traits;\n  alias argsintuple = ParameterTypeTuple!func;\n\n  immutable lambdaStr = (lamArgs =>\n    (temp){\n      foreach(i, e; argsintuple)\n        temp ~= \"(\" ~ e.stringof ~ \" \" ~ lamArgs[i] ~ \") => \";\n\n      return temp ~ \"func(\" ~ lamArgs.join(\", \") ~ \")\";\n    }(\"\")\n  )(argsintuple.length.iota.map!(i => \"arg\" ~ i.to!string));\n\n  enum curry = mixin(lambdaStr);\n}\n\n\u305d\u308c\u3067\u3001\u5148\u307b\u3069TypeScript\u3092\u66f8\u3044\u3066\u3044\u308b\u6642\u306b\u540c\u69d8\u306e\u30ab\u30ea\u30fc\u5316\u3059\u308b\u95a2\u6570\u304c\u307b\u3057\u3044\u306a\u3041\u3068\u601d\u3063\u3066\u4e0a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092TypeScript\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nD\u3067\u306e\u5b9f\u88c5\u3082TypeScript\u3067\u306e\u5b9f\u88c5\u3082\u5358\u7d14\u3067\u3001\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\n\u5f15\u6570\u306e\u6570\u3060\u3051 \"(arg0) => (arg1) => (arg2) => .... (argN) => \"\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u3064\u304f\u308a\u3001\u6700\u5f8c\u306b \"func(\" + args.join(\", \") + \")\"\u3068\u3057\u3066\u308b\u3060\u3051\u3067\u3059(\u5f15\u6570\u306e\u6570\u3060\u3051\u5c55\u958b\u3057\u3066\u3001\u4e00\u5f15\u6570\u306e\u30e9\u30e0\u30c0\u5f0f\u3092\u3064\u304f\u308a\u3001\u305d\u308c\u3092\u30cd\u30b9\u30c8\u3055\u305b\u3066\u3044\u308b\u3060\u3051\u3067\u3059)\u3002\n\u50d5\u306fTypeScript(JavaScript\u3082)\u307e\u3063\u305f\u304f\u306e\u7d20\u4eba\u3086\u3048\u3001\u3053\u308c\u304cTypeScript(/JavaScript)\u3068\u3057\u3066\u59a5\u5f53\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u306a\u306e\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c...\n\u3068\u308a\u3042\u3048\u305a\u3001TypeScript\u306b\u4e0a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u66f8\u304d\u63db\u3048\u305f\u3082\u306e\u304c\u3053\u3061\u3089\u3067\u3059:\nfunction isFunction(obj: any): boolean {\n  return typeof(obj) == \"function\";\n}\n\nfunction iota(cnt, init = 0, inc = 1) { \n  var ret = []; \n\n  for (var i = 0, j = init; j < cnt; i++, (j = j + inc))\n    ret[i] = j; \n\n  return ret; \n}\n\nfunction curry(func: any) {\n  if (!isFunction(func)) {\n    console.log(\"Fatal Error. An invalid value was given. It was not a function\");\n    return;\n  }\n\n  const lamdbdaStr = (lamArgs =>\n    ((temp) => {\n      for (var i = 0; i < lamArgs.length; i++) \n        temp += \"(\" + lamArgs[i] + \") => \";\n\n      return temp + \"func(\" + lamArgs.join(\", \") + \")\";\n    })(\"\")\n  )(iota(func.length).map(x => \"arg\" + x));\n\n  return eval(lamdbdaStr);\n}\n\nD\u8a00\u8a9e\u3067\u306f\u30ab\u30ea\u30fc\u5316\u3059\u308b\u5bfe\u8c61\u304c\u95a2\u6570(\u3082\u3057\u304f\u306fdelegate/function)\u3067\u3042\u308b\u304b\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5224\u5b9a\u3055\u308c\u308b\u306e\u3067\u5909\u306a\u5f15\u6570\u304c\u6e21\u3055\u308c\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5f3e\u3051\u307e\u3059\u304c\u3001TypeScript\u3067\u306f\u305d\u3046\u306f\u3044\u304b\u306a\u3044\u306e\u3067(\u305f\u3060\u5358\u306b\u50d5\u304c\u3057\u3089\u306a\u3044\u3060\u3051\u3067\u3001TypeScript\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u95a2\u6570\u3067\u3042\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u578b\u3067\u8868\u305b\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u30c8\u30e9\u30f3\u30b9\u30d1\u30a4\u30eb\u6642\u306b\u5f3e\u3051\u308b\u3068\u601d\u3044\u307e\u3059)\u9069\u5f53\u306a\u5224\u5b9a\u95a2\u6570\u3092\u565b\u307e\u305b\u3066\u3044\u307e\u3059\u3002\n\u8a66\u3057\u306b\u6b21\u306e\u30b3\u30fc\u30c9\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\u3068\u3001\u304d\u3061\u3093\u3068\u30ab\u30ea\u30fc\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nfunction add3(a: number, b: number, c: number) {\n  return a + b + c;\n}\n\nconsole.log(\"isFunction(curry(add3))          : \" + isFunction(curry(add3)));//true\nconsole.log(\"isFunction(curry(add3)(1))       : \" + isFunction(curry(add3)(1)));//true\nconsole.log(\"isFunction(curry(add3)(1)(2))    : \" + isFunction(curry(add3)(1)(2)));//true\nconsole.log(\"isFunction(curry(add3)(1)(2)(3)) : \" + isFunction(curry(add3)(1)(2)(3)));//false\n\nconsole.log(curry(add3)(1)(2)(3) == 6);\n\n\u4ee5\u524dD\u8a00\u8a9e\u3092\u66f8\u3044\u3066\u3044\u308b\u6642\u306b\u3001\u4efb\u610f\u306e\u95a2\u6570\u3092\u30ab\u30ea\u30fc\u5316\u3057\u305f\u304f\u306a\u3063\u3066\u3001\u6b21\u306e\u3088\u3046\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\n```d\n// \u30ab\u30ea\u30fc\u5316\u7528\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\ntemplate curry(alias func){\n  import std.algorithm, std.conv, std.range, std.traits;\n  alias argsintuple = ParameterTypeTuple!func;\n \n  immutable lambdaStr = (lamArgs =>\n    (temp){\n      foreach(i, e; argsintuple)\n        temp ~= \"(\" ~ e.stringof ~ \" \" ~ lamArgs[i] ~ \") => \";\n \n      return temp ~ \"func(\" ~ lamArgs.join(\", \") ~ \")\";\n    }(\"\")\n  )(argsintuple.length.iota.map!(i => \"arg\" ~ i.to!string));\n \n  enum curry = mixin(lambdaStr);\n}\n```\n\n\u305d\u308c\u3067\u3001\u5148\u307b\u3069TypeScript\u3092\u66f8\u3044\u3066\u3044\u308b\u6642\u306b\u540c\u69d8\u306e\u30ab\u30ea\u30fc\u5316\u3059\u308b\u95a2\u6570\u304c\u307b\u3057\u3044\u306a\u3041\u3068\u601d\u3063\u3066\u4e0a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092TypeScript\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\nD\u3067\u306e\u5b9f\u88c5\u3082TypeScript\u3067\u306e\u5b9f\u88c5\u3082\u5358\u7d14\u3067\u3001\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\n\u5f15\u6570\u306e\u6570\u3060\u3051 `\"(arg0) => (arg1) => (arg2) => .... (argN) => \"`\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u3064\u304f\u308a\u3001\u6700\u5f8c\u306b `\"func(\" + args.join(\", \") + \")\"`\u3068\u3057\u3066\u308b\u3060\u3051\u3067\u3059(\u5f15\u6570\u306e\u6570\u3060\u3051\u5c55\u958b\u3057\u3066\u3001\u4e00\u5f15\u6570\u306e\u30e9\u30e0\u30c0\u5f0f\u3092\u3064\u304f\u308a\u3001\u305d\u308c\u3092\u30cd\u30b9\u30c8\u3055\u305b\u3066\u3044\u308b\u3060\u3051\u3067\u3059)\u3002\n\u50d5\u306fTypeScript(JavaScript\u3082)\u307e\u3063\u305f\u304f\u306e\u7d20\u4eba\u3086\u3048\u3001\u3053\u308c\u304cTypeScript(/JavaScript)\u3068\u3057\u3066\u59a5\u5f53\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\u306a\u306e\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c...\n\n\u3068\u308a\u3042\u3048\u305a\u3001TypeScript\u306b\u4e0a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u66f8\u304d\u63db\u3048\u305f\u3082\u306e\u304c\u3053\u3061\u3089\u3067\u3059:\n\n```ts\nfunction isFunction(obj: any): boolean {\n  return typeof(obj) == \"function\";\n}\n\nfunction iota(cnt, init = 0, inc = 1) { \n  var ret = []; \n\n  for (var i = 0, j = init; j < cnt; i++, (j = j + inc))\n    ret[i] = j; \n\n  return ret; \n}\n\nfunction curry(func: any) {\n  if (!isFunction(func)) {\n    console.log(\"Fatal Error. An invalid value was given. It was not a function\");\n    return;\n  }\n\n  const lamdbdaStr = (lamArgs =>\n    ((temp) => {\n      for (var i = 0; i < lamArgs.length; i++) \n        temp += \"(\" + lamArgs[i] + \") => \";\n\n      return temp + \"func(\" + lamArgs.join(\", \") + \")\";\n    })(\"\")\n  )(iota(func.length).map(x => \"arg\" + x));\n\n  return eval(lamdbdaStr);\n}\n```\n\nD\u8a00\u8a9e\u3067\u306f\u30ab\u30ea\u30fc\u5316\u3059\u308b\u5bfe\u8c61\u304c\u95a2\u6570(\u3082\u3057\u304f\u306fdelegate/function)\u3067\u3042\u308b\u304b\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5224\u5b9a\u3055\u308c\u308b\u306e\u3067\u5909\u306a\u5f15\u6570\u304c\u6e21\u3055\u308c\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5f3e\u3051\u307e\u3059\u304c\u3001TypeScript\u3067\u306f\u305d\u3046\u306f\u3044\u304b\u306a\u3044\u306e\u3067(\u305f\u3060\u5358\u306b\u50d5\u304c\u3057\u3089\u306a\u3044\u3060\u3051\u3067\u3001TypeScript\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c`\u95a2\u6570\u3067\u3042\u308b`\u3068\u3044\u3046\u3053\u3068\u3092\u578b\u3067\u8868\u305b\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u30c8\u30e9\u30f3\u30b9\u30d1\u30a4\u30eb\u6642\u306b\u5f3e\u3051\u308b\u3068\u601d\u3044\u307e\u3059)\u9069\u5f53\u306a\u5224\u5b9a\u95a2\u6570\u3092\u565b\u307e\u305b\u3066\u3044\u307e\u3059\u3002\n\n\u8a66\u3057\u306b\u6b21\u306e\u30b3\u30fc\u30c9\u3092\u52d5\u304b\u3057\u3066\u307f\u308b\u3068\u3001\u304d\u3061\u3093\u3068\u30ab\u30ea\u30fc\u5316\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```ts\nfunction add3(a: number, b: number, c: number) {\n  return a + b + c;\n}\n\nconsole.log(\"isFunction(curry(add3))          : \" + isFunction(curry(add3)));//true\nconsole.log(\"isFunction(curry(add3)(1))       : \" + isFunction(curry(add3)(1)));//true\nconsole.log(\"isFunction(curry(add3)(1)(2))    : \" + isFunction(curry(add3)(1)(2)));//true\nconsole.log(\"isFunction(curry(add3)(1)(2)(3)) : \" + isFunction(curry(add3)(1)(2)(3)));//false\n\nconsole.log(curry(add3)(1)(2)(3) == 6);\n```\n", "tags": ["TypeScript", "JavaScript", "D\u8a00\u8a9e", "dlang"]}