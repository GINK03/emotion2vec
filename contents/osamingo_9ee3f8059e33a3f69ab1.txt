{"context": " More than 1 year has passed since last update.\u8272\u3005\u306a\u65b9\u6cd5\u304c\u3042\u308b\u3068\u601d\u3046\u3051\u3069\u3001\u7c21\u5358\u306a3\u7a2e\u985e\u3092\u307e\u3068\u3081\u3066\u304a\u304f\u3002\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\npackage main\n\nimport (\n    \"net/http\"\n\n    \"github.com/facebookgo/grace/gracehttp\"\n    \"github.com/sebest/xff\"\n    \"goji.io\"\n    \"goji.io/pat\"\n    \"golang.org/x/net/context\"\n)\n\nfunc main() {\n\n    mux := goji.NewMux()\n\n    mux.HandleC(pat.New(\"/*\"), NewMux())\n\n    err := gracehttp.Serve(&http.Server{Addr: \":8080\", Handler: mux})\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc NewMux() *goji.Mux {\n\n    mux := goji.NewMux()\n\n    mux.Use(xff.Handler)\n    mux.HandleFuncC(pat.Get(\"/:name\"), Hello)\n\n    return mux\n}\n\nfunc Hello(ctx context.Context, w http.ResponseWriter, r *http.Request) {\n\n    w.Write([]byte(\"Hello, \" + pat.Param(ctx, \"name\") + \"\\nRemote Address: \" + r.RemoteAddr))\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n\u305d\u306e1: \u95a2\u6570\u306b\u5bfe\u3057\u3066\u30c6\u30b9\u30c8\n\u666e\u901a\u306b\u95a2\u6570\u306b\u5bfe\u3057\u3066\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3002\n\u7279\u306b\u96e3\u3057\u3044\u3053\u3068\u306f\u3001\u3057\u3066\u3044\u306a\u3044\u3002\nfunc TestHello(t *testing.T) {\n\n    t.Parallel()\n\n    ctx := context.WithValue(context.Background(), pattern.Variable(\"name\"), \"john\")\n\n    req, err := http.NewRequest(\"\", \"\", nil)\n    require.NoError(t, err)\n\n    resp := httptest.NewRecorder()\n    Hello(ctx, resp, req)\n\n    require.Equal(t, http.StatusOK, resp.Code)\n    require.Contains(t, resp.Body.String(), \"Hello, john\")\n    require.NotContains(t, resp.Body.String(), \"127.0.0.1\")\n}\n\n\n\u305d\u306e2: Multiplexer \u306b\u5bfe\u3057\u3066\u30c6\u30b9\u30c8\nRouting \u3068\u304b\u3001 Middleware \u3068\u304b\u30c6\u30b9\u30c8\u3057\u305f\u3044\u6642\u306f\u3001\u3053\u3063\u3061\u306e\u65b9\u304c\u9069\u5207\u3060\u3068\u601d\u3046\u3002\nfunc TestUsersMultiplexer(t *testing.T) {\n\n    t.Parallel()\n\n    mux := NewMux()\n\n    req, err := http.NewRequest(\"GET\", \"/john\", nil)\n    require.NoError(t, err)\n\n    resp := httptest.NewRecorder()\n    mux.ServeHTTP(resp, req)\n\n    require.Equal(t, http.StatusOK, resp.Code)\n    require.Contains(t, resp.Body.String(), \"Hello, john\")\n    require.NotContains(t, resp.Body.String(), \"127.0.0.1\")\n}\n\n\n\u305d\u306e3: Server \u3092\u7acb\u3061\u4e0a\u3052\u3066\u306e\u30c6\u30b9\u30c8\nE2E \u7684\u306a\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3044\u6642\u3084\u3001 RemoteAddr \u3092\u7528\u3044\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u3053\u3061\u3089\u306e\u65b9\u6cd5\u304c\u826f\u3044\u3002\nfunc TestServer(t *testing.T) {\n\n    t.Parallel()\n\n    ts := httptest.NewServer(NewMux())\n    defer ts.Close()\n\n    resp, err := http.Get(ts.URL + \"/john\")\n    require.NoError(t, err)\n\n    defer resp.Body.Close()\n\n    body, err := ioutil.ReadAll(resp.Body)\n    require.NoError(t, err)\n\n    bodyStr := string(body)\n\n    require.Equal(t, http.StatusOK, resp.StatusCode)\n    require.Contains(t, bodyStr, \"Hello, john\")\n    require.Contains(t, bodyStr, \"127.0.0.1\")\n}\n\n\u4ed6\u306b\u3082\u826f\u3044\u65b9\u6cd5\u3042\u3063\u305f\u3089\u3001\u30b3\u30e1\u30f3\u30c8\u4e0b\u3055\u3044\u3002\n\u8272\u3005\u306a\u65b9\u6cd5\u304c\u3042\u308b\u3068\u601d\u3046\u3051\u3069\u3001\u7c21\u5358\u306a3\u7a2e\u985e\u3092\u307e\u3068\u3081\u3066\u304a\u304f\u3002\n\n## \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/facebookgo/grace/gracehttp\"\n\t\"github.com/sebest/xff\"\n\t\"goji.io\"\n\t\"goji.io/pat\"\n\t\"golang.org/x/net/context\"\n)\n\nfunc main() {\n\n\tmux := goji.NewMux()\n\n\tmux.HandleC(pat.New(\"/*\"), NewMux())\n\n\terr := gracehttp.Serve(&http.Server{Addr: \":8080\", Handler: mux})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc NewMux() *goji.Mux {\n\n\tmux := goji.NewMux()\n\n\tmux.Use(xff.Handler)\n\tmux.HandleFuncC(pat.Get(\"/:name\"), Hello)\n\n\treturn mux\n}\n\nfunc Hello(ctx context.Context, w http.ResponseWriter, r *http.Request) {\n\n\tw.Write([]byte(\"Hello, \" + pat.Param(ctx, \"name\") + \"\\nRemote Address: \" + r.RemoteAddr))\n}\n```\n\n## \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\n### \u305d\u306e1: \u95a2\u6570\u306b\u5bfe\u3057\u3066\u30c6\u30b9\u30c8\n\n\u666e\u901a\u306b\u95a2\u6570\u306b\u5bfe\u3057\u3066\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3002\n\u7279\u306b\u96e3\u3057\u3044\u3053\u3068\u306f\u3001\u3057\u3066\u3044\u306a\u3044\u3002\n\n```go\nfunc TestHello(t *testing.T) {\n\n\tt.Parallel()\n\n\tctx := context.WithValue(context.Background(), pattern.Variable(\"name\"), \"john\")\n\n\treq, err := http.NewRequest(\"\", \"\", nil)\n\trequire.NoError(t, err)\n\n\tresp := httptest.NewRecorder()\n\tHello(ctx, resp, req)\n\n\trequire.Equal(t, http.StatusOK, resp.Code)\n\trequire.Contains(t, resp.Body.String(), \"Hello, john\")\n\trequire.NotContains(t, resp.Body.String(), \"127.0.0.1\")\n}\n```\n\n### \u305d\u306e2: Multiplexer \u306b\u5bfe\u3057\u3066\u30c6\u30b9\u30c8\n\nRouting \u3068\u304b\u3001 Middleware \u3068\u304b\u30c6\u30b9\u30c8\u3057\u305f\u3044\u6642\u306f\u3001\u3053\u3063\u3061\u306e\u65b9\u304c\u9069\u5207\u3060\u3068\u601d\u3046\u3002\n\n```go\nfunc TestUsersMultiplexer(t *testing.T) {\n\n\tt.Parallel()\n\n\tmux := NewMux()\n\n\treq, err := http.NewRequest(\"GET\", \"/john\", nil)\n\trequire.NoError(t, err)\n\n\tresp := httptest.NewRecorder()\n\tmux.ServeHTTP(resp, req)\n\n\trequire.Equal(t, http.StatusOK, resp.Code)\n\trequire.Contains(t, resp.Body.String(), \"Hello, john\")\n\trequire.NotContains(t, resp.Body.String(), \"127.0.0.1\")\n}\n```\n\n### \u305d\u306e3: Server \u3092\u7acb\u3061\u4e0a\u3052\u3066\u306e\u30c6\u30b9\u30c8\n\nE2E \u7684\u306a\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3044\u6642\u3084\u3001 RemoteAddr \u3092\u7528\u3044\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u3053\u3061\u3089\u306e\u65b9\u6cd5\u304c\u826f\u3044\u3002\n\n```go\nfunc TestServer(t *testing.T) {\n\n\tt.Parallel()\n\n\tts := httptest.NewServer(NewMux())\n\tdefer ts.Close()\n\n\tresp, err := http.Get(ts.URL + \"/john\")\n\trequire.NoError(t, err)\n\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\trequire.NoError(t, err)\n\n\tbodyStr := string(body)\n\n\trequire.Equal(t, http.StatusOK, resp.StatusCode)\n\trequire.Contains(t, bodyStr, \"Hello, john\")\n\trequire.Contains(t, bodyStr, \"127.0.0.1\")\n}\n```\n\n\u4ed6\u306b\u3082\u826f\u3044\u65b9\u6cd5\u3042\u3063\u305f\u3089\u3001\u30b3\u30e1\u30f3\u30c8\u4e0b\u3055\u3044\u3002\n", "tags": ["Go", "golang", "test", "testing"]}