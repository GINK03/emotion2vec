{"context": "\n\nchibi:bit\u306bCoreBluetooth\u3067\u63a5\u7d9a\u3059\u308b\nchibi:bit\u304c\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u304b\u3089\u6b63\u5f0f\u306b\u767a\u58f2\u3055\u308c\u305f\u306e\u3067\niOS\u306eCoreBluetooth\u3092\u4f7f\u3063\u3066\u9023\u643a\u3092\u8a66\u307f\u3066\u307f\u307e\u3057\u305f\u3002\n\nchibi:bit\u3068\u306f\uff1f\n\u4ee5\u4e0b\u306f\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u30da\u30fc\u30b8\u304b\u3089\u306e\u629c\u7c8b\u3067\u3059\u3002\n\n//mag.switch-science.com/2016/12/19/chibibit_release/\u3088\u308a\u629c\u7c8b\nchibi:bit\u306f\u3001\u30a4\u30ae\u30ea\u30b9\u306e\u6559\u80b2\u5411\u3051\u30de\u30a4\u30b3\u30f3\u30dc\u30fc\u30c9\u300cBBC micro:bit\u300d\u306e\u4e92\u63db\u6a5f\u3067\u3059\u3002\nchibi:bit\u306b\u306f\u5de5\u4e8b\u8a2d\u8a08\u8a8d\u8a3c\uff08\u3044\u308f\u3086\u308b\u6280\u9069\uff09\u4ed8\u304d\u306eBLE\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u642d\u8f09\u3057\u3066\u304a\u308a\u3001\u65e5\u672c\u56fd\u5185\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\uff08BBC micro:bit\u306b\u306f\u6280\u9069\u304c\u7121\u3044\u305f\u3081\u3001\u65e5\u672c\u56fd\u5185\u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\uff09\n\n\n\nmicro:bit\u3068\u306f\uff1f\nBBC\u304c\u5b50\u4f9b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6559\u80b2\u7528\u306e\u30dc\u30fc\u30c9\u3067\u3059\u3002\nScratch\u306e\u3088\u3046\u306aGUI\u306e\u307b\u304b\u3001python\u3084js\u3001C++\u3067\u306e\u958b\u767a\u304c\u53ef\u80fd\u3067\u3059\u3002\nC++\u306e\u5834\u5408\u306fchibi:bit\u3084micro:bit\u306eIDE\u3067\u306f\u306a\u304f\u3001mbed\u306eIDE\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u5199\u771f\u306e\u5de6\u304b\u3089\u672c\u5bb6BBC micro:bit\u3001chibi:bit\u3001chibi:bit\u30c6\u30b9\u30c8\u7248\u3067\u3059\u3002\n\nhttp://microbit.org\nhttps://www.infoq.com/jp/news/2015/07/bbc-microbit\n\nBluetooth Button Service\u3092\u691c\u77e5\u3059\u308b\nchibi:bit\u306b\u306f\u5c02\u7528\u306eIDE\u74b0\u5883\u304c\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\n\u305d\u308c\u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://chibibit.io/ide/\n\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u30e1\u30cb\u30e5\u30fc\u306bBluetooth\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u30e1\u30cb\u30e5\u30fc\u306e\u4e0b\u306e+\u30dc\u30bf\u30f3\u304b\u3089Bluetooth\u3092\u9078\u629e\u3057\u3066\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u306e\u6642\u3001Bluetooth\u3068Radio\u306e\u3069\u3061\u3089\u304b\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067Radio\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u305d\u3057\u3066\u3001\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u8d77\u52d5\u6642\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u63a5\u7d9a\u6642\u306e\u8868\u793a\u3001\u63a5\u7d9a\u6642\u306eButtonService\u306e\u958b\u59cb\u3001\u5207\u65ad\u6642\u306e\u8868\u793a\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n\nchibi:bit\u3078\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nchibi:bit\u306fPC\u306b\u63a5\u7d9a\u3059\u308b\u3068\u5916\u90e8\u30b9\u30c8\u30ec\u30fc\u30b8\u3068\u3057\u3066\u8a8d\u8b58\u3055\u308c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002IDE\u306e\u300cDownload\u300d\u30dc\u30bf\u30f3\u3067\u843d\u3061\u3066\u304f\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3067\u30b3\u30d4\u30fc\u3057\u3066\u3082\u3089\u3048\u3070\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\niOS\u5074\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\niOS\u5074\u306f\u30bb\u30f3\u30c8\u30e9\u30eb\u3068\u3057\u3066\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3067\u3042\u308bchibi:bit\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306aUUID\u306e\u60c5\u5831\u306fMicroBitService\u306bEnum\u3067\u307e\u3068\u3081\u3066\u5b9a\u7fa9\u3057\u3066\u8d77\u304d\u307e\u3057\u305f\u3002\nimport Foundation\nimport CoreBluetooth\n\nenum MicroBitService {\n    case button\n    case accelerometer\n    case ioPin\n    case led\n    case magnetometer\n    case temperature\n    case uart\n    case eventService\n\n\n    func uuid() -> CBUUID {\n        switch self {\n        case .button:\n            return CBUUID(string: \"E95D9882-251D-470A-A062-FA1922DFA9A8\")\n        case .accelerometer:\n            return CBUUID(string: \"E95D0753-251D-470A-A062-FA1922DFA9A8\")\n        case .ioPin:\n            return CBUUID(string: \"E95D127B-251D-470A-A062-FA1922DFA9A8\")\n        case .led:\n            return CBUUID(string: \"E95Dd91D-251D-470A-A062-FA1922DFA9A8\")\n        case .magnetometer:\n            return CBUUID(string: \"E95DF2D8-251D-470A-A062-FA1922DFA9A8\")\n        case .temperature:\n            return CBUUID(string: \"E95D6100-251D-470A-A062-FA1922DFA9A8\")\n        case .uart:\n            return CBUUID(string: \"6E400001-B5A3-F393-E0A9-E50E24DCCA9E\")\n        case .eventService:\n            return CBUUID(string: \"\")\n        }\n    }\n\n    func characteristics() -> [CBUUID] {\n        switch self {\n        case .button:\n            return [\n                ButtonCharacteristic.button1State.uuid(),\n                ButtonCharacteristic.button2State.uuid()\n            ]\n        case .accelerometer:\n            return [\n                AccelerometerCharacteristic.data.uuid(),\n                AccelerometerCharacteristic.period.uuid(),\n            ]\n        case .ioPin:\n            return [\n                IoPinCharacteristic.pinData.uuid(),\n                IoPinCharacteristic.pinAdConfiguration.uuid(),\n                IoPinCharacteristic.pinIoConfiguration.uuid()\n            ]\n        case .led:\n            return [\n                LedCharacteristic.matrixState.uuid(),\n                LedCharacteristic.text.uuid(),\n                LedCharacteristic.scrollingDelay.uuid()\n            ]\n        case .magnetometer:\n            return [\n                MagnetometerCharacteristic.data.uuid(),\n                MagnetometerCharacteristic.period.uuid(),\n                MagnetometerCharacteristic.bearing.uuid()\n            ]\n        case .temperature:\n            return [\n                TemperatureCharacteristic.temperature.uuid()\n            ]\n        case .uart:\n            return [\n                UartCharacteristic.rx.uuid(),\n                UartCharacteristic.tx.uuid()\n            ]\n        case .eventService:\n            return [\n            ]\n        }\n    }\n\n    private enum AccelerometerCharacteristic: String {\n        case data   = \"E95DCA4B-251D-470A-A062-FA1922DFA9A8\"\n        case period = \"E95DFB24-251D-470A-A062-FA1922DFA9A8\"\n\n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n\n    private enum ButtonCharacteristic: String {\n        case button1State = \"E95DDA90-251D-470A-A062-FA1922DFA9A8\"\n        case button2State = \"E95DDA91-251D-470A-A062-FA1922DFA9A8\"\n\n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n\n    private enum IoPinCharacteristic: String {\n        case pinData            = \"E95D8D00-251D-470A-A062-FA1922DFA9A8\"\n        case pinAdConfiguration = \"E95DDA90-251D-470A-A062-FA1922DFA9A8\"\n        case pinIoConfiguration = \"E95DDA91-251D-470A-A062-FA1922DFA9A8\"\n\n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n\n    private enum LedCharacteristic: String {\n        case matrixState    = \"E95D7b77-251D-470A-A062-FA1922DFA9A8\"\n        case text           = \"E95D93EE-251D-470A-A062-FA1922DFA9A8\"\n        case scrollingDelay = \"E95D0d2d-251D-470A-A062-FA1922DFA9A8\"\n\n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n\n    private enum MagnetometerCharacteristic: String {\n        case data    = \"E95Dfb11-251D-470A-A062-FA1922DFA9A8\"\n        case period  = \"E95D386C-251D-470A-A062-FA1922DFA9A8\"\n        case bearing = \"E95D9715-251D-470A-A062-FA1922DFA9A8\"\n\n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n\n    private enum TemperatureCharacteristic: String {\n        case temperature = \"E95D9250-251D-470A-A062-FA1922DFA9A8\"\n\n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n\n    private enum UartCharacteristic: String {\n        case rx = \"6E400002-B5A3-F393-E0A9-E50E24DCCA9E\"\n        case tx = \"6E400003-B5A3-F393-E0A9-E50E24DCCA9E\"\n\n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n\n    private enum EventServiceCharacteristic: String {\n        case microbitRequirements = \"E95DB84C-251D-470A-A062-FA1922DFA9A8\";\n        case microbitEvent        = \"E95D9775-251D-470A-A062-FA1922DFA9A8\";\n        case clientRequirements   = \"E95D23C4-251D-470A-A062-FA1922DFA9A8\";\n        case clientEvent          = \"E95D5404-251D-470A-A062-FA1922DFA9A8\";\n\n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n}\n\n\n\u4eca\u56de\u306f\u30b5\u30f3\u30d7\u30eb\u306a\u306e\u3067\u96d1\u306b\u5404\u7a2e\u30c7\u30ea\u30b2\u30fc\u30c8\u3092ViewController\u306b\u3064\u3051\u307e\u3057\u305f\u3002\nimport UIKit\nimport CoreBluetooth\n\nclass ViewController: UIViewController, CBCentralManagerDelegate, CBPeripheralDelegate {\n    let manager: CBCentralManager = CBCentralManager()\n    var peripherals: [CBPeripheral] = []\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        manager.delegate = self\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n\n    @IBAction func tappedScan(_ sender: Any) {\n        if manager.isScanning {\n            debugPrint(\"stop scan\")\n            manager.stopScan()\n        } else {\n            debugPrint(\"scan start\")\n            manager.scanForPeripherals(withServices: nil, options: nil)\n        }\n    }\n\n    @IBAction func tappedDisconnect(_ sender: Any) {\n        peripherals.forEach { (peripheral) in\n            manager.cancelPeripheralConnection(peripheral)\n        }\n    }\n\n    // MARK: - CBCentralManagerDelegate\n    func centralManagerDidUpdateState(_ central: CBCentralManager) {\n        debugPrint(#function)\n        var stateString = \"\"\n        switch central.state {\n        case .poweredOff:\n            stateString = \"powerOff\"\n        case .poweredOn:\n            stateString = \"powerOn\"\n        case .resetting:\n            stateString = \"resetting\"\n        case .unauthorized:\n            stateString = \"unauthorized\"\n        case .unknown:\n            stateString = \"unknown\"\n        case .unsupported:\n            stateString = \"unsupported\"\n        }\n        debugPrint(\"central state: \\(stateString)\")\n    }\n    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {\n        debugPrint(\"\\(#function), peripheral: \\(peripheral.name)\")\n        peripheral.discoverServices([MicroBitService.button.uuid()])\n//        peripheral.discoverServices(nil)\n    }\n    func centralManager(_ central: CBCentralManager, willRestoreState dict: [String : Any]) {\n        debugPrint(#function)\n    }\n    func centralManager(_ central: CBCentralManager, didFailToConnect peripheral: CBPeripheral, error: Error?) {\n        debugPrint(\"\\(#function), pripheral: \\(peripheral.name)\")\n    }\n    func centralManager(_ central: CBCentralManager, didDisconnectPeripheral peripheral: CBPeripheral, error: Error?) {\n        debugPrint(\"\\(#function), peripheral: \\(peripheral.name)\")\n    }\n    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {\n//        debugPrint(#function)\n        if peripheral.name?.range(of: \"micro:bit\") != nil{\n            debugPrint(\"didDiscover, peripheral: \\(peripheral.name)\")\n            if peripherals.filter({ (keepedPeripheral) -> Bool in\n                return keepedPeripheral.identifier == peripheral.identifier ? true : false\n            }).count == 0 {\n                peripherals.append(peripheral)\n                peripheral.delegate = self\n            }\n            manager.connect(peripheral, options: nil)\n        }\n    }\n\n    // MARK: - CBPeripheralDelegate\n    func peripheralDidUpdateName(_ peripheral: CBPeripheral) {\n        debugPrint(#function)\n    }\n\n    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {\n        debugPrint(#function)\n        peripheral.services?.forEach({ (service) in\n            debugPrint(\"ServiceUUID: \\(service.uuid)\")\n            peripheral.discoverCharacteristics(MicroBitService.button.characteristics(), for: service)\n//            peripheral.discoverCharacteristics(nil, for: service)\n        })\n    }\n\n    func peripheral(_ peripheral: CBPeripheral, didReadRSSI RSSI: NSNumber, error: Error?) {\n        debugPrint(#function)\n    }\n\n    func peripheral(_ peripheral: CBPeripheral, didModifyServices invalidatedServices: [CBService]) {\n        debugPrint(#function)\n    }\n\n    func peripheral(_ peripheral: CBPeripheral, didWriteValueFor descriptor: CBDescriptor, error: Error?) {\n        debugPrint(#function)\n    }\n    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor descriptor: CBDescriptor, error: Error?) {\n        debugPrint(#function)\n    }\n    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {\n        debugPrint(#function)\n        service.characteristics?.forEach({ (characteristic) in\n            debugPrint(\"CharacteristicUUID: \\(characteristic.uuid)\")\n            peripheral.setNotifyValue(true, for: characteristic)\n//            peripheral.readValue(for: characteristic)\n        })\n    }\n    func peripheral(_ peripheral: CBPeripheral, didDiscoverIncludedServicesFor service: CBService, error: Error?) {\n        debugPrint(#function)\n    }\n    func peripheral(_ peripheral: CBPeripheral, didWriteValueFor characteristic: CBCharacteristic, error: Error?) {\n        debugPrint(#function)\n    }\n    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {\n        debugPrint(\"\\(#function): \\(characteristic.value)\")\n    }\n    func peripheral(_ peripheral: CBPeripheral, didDiscoverDescriptorsFor characteristic: CBCharacteristic, error: Error?) {\n        debugPrint(#function)\n    }\n    func peripheral(_ peripheral: CBPeripheral, didUpdateNotificationStateFor characteristic: CBCharacteristic, error: Error?) {\n        debugPrint(#function)\n    }\n}\n\n\u30b5\u30f3\u30d7\u30eb\u306a\u306e\u3067\u753b\u9762\u306f\u304b\u306a\u308a\u624b\u629c\u304d\u3067\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nScan\u3092\u958b\u59cb\u3059\u308b\u3068ButtonService\u304b\u3089ButtonCharacteristic\u3092\u691c\u7d22\u3057\u3001\u5909\u66f4\u691c\u77e5\u3059\u308b\u305f\u3081\u306bsetNotifyValue\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u7121\u4e8b\u63a5\u7d9a\u304c\u5b8c\u4e86\u3057\u305f\u3089A\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066Xcode\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u30ed\u30b0\u306b\u5909\u66f4\u691c\u77e5\u306e\u30ed\u30b0\u304c\u51fa\u3066\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u203b\u79c1\u306e\u74b0\u5883\u3067\u306fB\u30dc\u30bf\u30f3\u306eCharacteristic\u304c\u691c\u51fa\u3055\u308c\u305a\u3001B\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u691c\u77e5\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u539f\u56e0\u3092\u8abf\u67fb\u4e2d\u3067\u3059\u3002\n\nTips?\n\u7a00\u306bchibi:bit\u304c\u3044\u304f\u3089Scan\u3057\u3066\u3082\u898b\u3064\u304b\u3089\u306a\u3044\u306a\u3069\u306e\u73fe\u8c61\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u4eca\u306e\u3068\u3053\u308d\u79c1\u306e\u65b9\u3067\u308f\u304b\u3063\u3066\u308b\u65b9\u6cd5\u3068\u3057\u3066cibhi:bit\u3092\u30da\u30a2\u30ea\u30f3\u30b0\u30e2\u30fc\u30c9\u306b\u3057\u3001micro:bit\u30a2\u30d7\u30ea\u3067\u30da\u30a2\u30ea\u30f3\u30b0\u3092\u8a66\u307f\u308b\u3053\u3068\u3067\u3059\u3002\niOS\u306eBluetooth\u304b\u3089chibi:bit\u306f\u30c7\u30d0\u30a4\u30b9\u767b\u9332\u304b\u3089\u89e3\u9664\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u6700\u5f8c\u306b\n\u4eca\u56de\u306fButtonService\u306e\u691c\u77e5\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\n\u540c\u69d8\u306bAccelerometer\u3084LED,Temperature\u306a\u3069\u306e\u5024\u3082\u540c\u69d8\u306e\u65b9\u6cd5\u3067\u8aad\u3081\u308b\u304b\u3068\u601d\u3044\u307e\u3059(\u307e\u3060\u8a66\u3057\u3066\u306a\u3044...\uff09\niOS\u3067CoreBluetooth\u3092\u8a66\u3059\u969b\u3001iOS\u540c\u58eb\u306e\u307b\u304b\u3001Konashi\u306e\u3088\u3046\u306a\u30dc\u30fc\u30c9\u304c\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3092\u76ee\u306b\u3057\u307e\u3059\u304c\u3001cibhi:bit\u306fKonashi\u3088\u308a\u3082\u82e5\u5e72\u5b89\u3044\u305f\u3081\u4eca\u5f8cCoreBluetooth\u3092\u52c9\u5f37\u3059\u308b\u306b\u306f\u30aa\u30b9\u30b9\u30e1\u306e\u30c4\u30fc\u30eb\u304b\u3082\u3057\u308c\u307e\u305b\u3093\nhttps://www.switch-science.com/catalog/2900/\n# chibi:bit\u306bCoreBluetooth\u3067\u63a5\u7d9a\u3059\u308b\nchibi:bit\u304c\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u304b\u3089\u6b63\u5f0f\u306b\u767a\u58f2\u3055\u308c\u305f\u306e\u3067\niOS\u306eCoreBluetooth\u3092\u4f7f\u3063\u3066\u9023\u643a\u3092\u8a66\u307f\u3066\u307f\u307e\u3057\u305f\u3002\n\n#chibi:bit\u3068\u306f\uff1f\n\u4ee5\u4e0b\u306f\u30b9\u30a4\u30c3\u30c1\u30b5\u30a4\u30a8\u30f3\u30b9\u306e\u30da\u30fc\u30b8\u304b\u3089\u306e\u629c\u7c8b\u3067\u3059\u3002\n\n```http://mag.switch-science.com/2016/12/19/chibibit_release/\u3088\u308a\u629c\u7c8b\nchibi:bit\u306f\u3001\u30a4\u30ae\u30ea\u30b9\u306e\u6559\u80b2\u5411\u3051\u30de\u30a4\u30b3\u30f3\u30dc\u30fc\u30c9\u300cBBC micro:bit\u300d\u306e\u4e92\u63db\u6a5f\u3067\u3059\u3002\nchibi:bit\u306b\u306f\u5de5\u4e8b\u8a2d\u8a08\u8a8d\u8a3c\uff08\u3044\u308f\u3086\u308b\u6280\u9069\uff09\u4ed8\u304d\u306eBLE\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u642d\u8f09\u3057\u3066\u304a\u308a\u3001\u65e5\u672c\u56fd\u5185\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\uff08BBC micro:bit\u306b\u306f\u6280\u9069\u304c\u7121\u3044\u305f\u3081\u3001\u65e5\u672c\u56fd\u5185\u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\uff09\n```\n\n## micro:bit\u3068\u306f\uff1f\nBBC\u304c\u5b50\u4f9b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6559\u80b2\u7528\u306e\u30dc\u30fc\u30c9\u3067\u3059\u3002\nScratch\u306e\u3088\u3046\u306aGUI\u306e\u307b\u304b\u3001python\u3084js\u3001C++\u3067\u306e\u958b\u767a\u304c\u53ef\u80fd\u3067\u3059\u3002\nC++\u306e\u5834\u5408\u306fchibi:bit\u3084micro:bit\u306eIDE\u3067\u306f\u306a\u304f\u3001mbed\u306eIDE\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u5199\u771f\u306e\u5de6\u304b\u3089\u672c\u5bb6BBC micro:bit\u3001chibi:bit\u3001chibi:bit\u30c6\u30b9\u30c8\u7248\u3067\u3059\u3002\n![IMG_1680.JPG](https://qiita-image-store.s3.amazonaws.com/0/11776/b454e372-78d2-99f4-1ce3-b0807c1b4866.jpeg \"IMG_1680.JPG\")\n\nhttp://microbit.org\nhttps://www.infoq.com/jp/news/2015/07/bbc-microbit\n\n\n# Bluetooth Button Service\u3092\u691c\u77e5\u3059\u308b\nchibi:bit\u306b\u306f\u5c02\u7528\u306eIDE\u74b0\u5883\u304c\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\n\u305d\u308c\u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://chibibit.io/ide/\n\n\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f\u30e1\u30cb\u30e5\u30fc\u306bBluetooth\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u3001\u30e1\u30cb\u30e5\u30fc\u306e\u4e0b\u306e+\u30dc\u30bf\u30f3\u304b\u3089Bluetooth\u3092\u9078\u629e\u3057\u3066\u8ffd\u52a0\u3057\u307e\u3057\u3087\u3046\u3002\n![out 2.png](https://qiita-image-store.s3.amazonaws.com/0/11776/ac171bf9-2514-99a9-ae5e-a24a2674549f.png \"out 2.png\")\n\n\u3053\u306e\u6642\u3001Bluetooth\u3068Radio\u306e\u3069\u3061\u3089\u304b\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067Radio\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n![Screen Shot 2016-12-25 at 19.29.06.png](https://qiita-image-store.s3.amazonaws.com/0/11776/f51e5c69-4ffa-a28c-2dac-cc8128b8e548.png \"Screen Shot 2016-12-25 at 19.29.06.png\")\n\n\u305d\u3057\u3066\u3001\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u63cf\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u8d77\u52d5\u6642\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u63a5\u7d9a\u6642\u306e\u8868\u793a\u3001\u63a5\u7d9a\u6642\u306eButtonService\u306e\u958b\u59cb\u3001\u5207\u65ad\u6642\u306e\u8868\u793a\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n![Screen Shot 2016-12-25 at 19.16.26.png](https://qiita-image-store.s3.amazonaws.com/0/11776/2ec1adf4-024d-dfe1-b7ac-1d85b1a01d50.png \"Screen Shot 2016-12-25 at 19.16.26.png\")\n\n##chibi:bit\u3078\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nchibi:bit\u306fPC\u306b\u63a5\u7d9a\u3059\u308b\u3068\u5916\u90e8\u30b9\u30c8\u30ec\u30fc\u30b8\u3068\u3057\u3066\u8a8d\u8b58\u3055\u308c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002IDE\u306e\u300cDownload\u300d\u30dc\u30bf\u30f3\u3067\u843d\u3061\u3066\u304f\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u30c9\u30e9\u30c3\u30b0\uff06\u30c9\u30ed\u30c3\u30d7\u3067\u30b3\u30d4\u30fc\u3057\u3066\u3082\u3089\u3048\u3070\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n# iOS\u5074\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\niOS\u5074\u306f\u30bb\u30f3\u30c8\u30e9\u30eb\u3068\u3057\u3066\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3067\u3042\u308bchibi:bit\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\n\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306aUUID\u306e\u60c5\u5831\u306f`MicroBitService`\u306bEnum\u3067\u307e\u3068\u3081\u3066\u5b9a\u7fa9\u3057\u3066\u8d77\u304d\u307e\u3057\u305f\u3002\n\n```MicroBitService\nimport Foundation\nimport CoreBluetooth\n\nenum MicroBitService {\n    case button\n    case accelerometer\n    case ioPin\n    case led\n    case magnetometer\n    case temperature\n    case uart\n    case eventService\n    \n    \n    func uuid() -> CBUUID {\n        switch self {\n        case .button:\n            return CBUUID(string: \"E95D9882-251D-470A-A062-FA1922DFA9A8\")\n        case .accelerometer:\n            return CBUUID(string: \"E95D0753-251D-470A-A062-FA1922DFA9A8\")\n        case .ioPin:\n            return CBUUID(string: \"E95D127B-251D-470A-A062-FA1922DFA9A8\")\n        case .led:\n            return CBUUID(string: \"E95Dd91D-251D-470A-A062-FA1922DFA9A8\")\n        case .magnetometer:\n            return CBUUID(string: \"E95DF2D8-251D-470A-A062-FA1922DFA9A8\")\n        case .temperature:\n            return CBUUID(string: \"E95D6100-251D-470A-A062-FA1922DFA9A8\")\n        case .uart:\n            return CBUUID(string: \"6E400001-B5A3-F393-E0A9-E50E24DCCA9E\")\n        case .eventService:\n            return CBUUID(string: \"\")\n        }\n    }\n    \n    func characteristics() -> [CBUUID] {\n        switch self {\n        case .button:\n            return [\n                ButtonCharacteristic.button1State.uuid(),\n                ButtonCharacteristic.button2State.uuid()\n            ]\n        case .accelerometer:\n            return [\n                AccelerometerCharacteristic.data.uuid(),\n                AccelerometerCharacteristic.period.uuid(),\n            ]\n        case .ioPin:\n            return [\n                IoPinCharacteristic.pinData.uuid(),\n                IoPinCharacteristic.pinAdConfiguration.uuid(),\n                IoPinCharacteristic.pinIoConfiguration.uuid()\n            ]\n        case .led:\n            return [\n                LedCharacteristic.matrixState.uuid(),\n                LedCharacteristic.text.uuid(),\n                LedCharacteristic.scrollingDelay.uuid()\n            ]\n        case .magnetometer:\n            return [\n                MagnetometerCharacteristic.data.uuid(),\n                MagnetometerCharacteristic.period.uuid(),\n                MagnetometerCharacteristic.bearing.uuid()\n            ]\n        case .temperature:\n            return [\n                TemperatureCharacteristic.temperature.uuid()\n            ]\n        case .uart:\n            return [\n                UartCharacteristic.rx.uuid(),\n                UartCharacteristic.tx.uuid()\n            ]\n        case .eventService:\n            return [\n            ]\n        }\n    }\n    \n    private enum AccelerometerCharacteristic: String {\n        case data   = \"E95DCA4B-251D-470A-A062-FA1922DFA9A8\"\n        case period = \"E95DFB24-251D-470A-A062-FA1922DFA9A8\"\n        \n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n    \n    private enum ButtonCharacteristic: String {\n        case button1State = \"E95DDA90-251D-470A-A062-FA1922DFA9A8\"\n        case button2State = \"E95DDA91-251D-470A-A062-FA1922DFA9A8\"\n        \n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n    \n    private enum IoPinCharacteristic: String {\n        case pinData            = \"E95D8D00-251D-470A-A062-FA1922DFA9A8\"\n        case pinAdConfiguration = \"E95DDA90-251D-470A-A062-FA1922DFA9A8\"\n        case pinIoConfiguration = \"E95DDA91-251D-470A-A062-FA1922DFA9A8\"\n        \n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n\n    private enum LedCharacteristic: String {\n        case matrixState    = \"E95D7b77-251D-470A-A062-FA1922DFA9A8\"\n        case text           = \"E95D93EE-251D-470A-A062-FA1922DFA9A8\"\n        case scrollingDelay = \"E95D0d2d-251D-470A-A062-FA1922DFA9A8\"\n        \n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n\n    private enum MagnetometerCharacteristic: String {\n        case data    = \"E95Dfb11-251D-470A-A062-FA1922DFA9A8\"\n        case period  = \"E95D386C-251D-470A-A062-FA1922DFA9A8\"\n        case bearing = \"E95D9715-251D-470A-A062-FA1922DFA9A8\"\n        \n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n\n    private enum TemperatureCharacteristic: String {\n        case temperature = \"E95D9250-251D-470A-A062-FA1922DFA9A8\"\n        \n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n    \n    private enum UartCharacteristic: String {\n        case rx = \"6E400002-B5A3-F393-E0A9-E50E24DCCA9E\"\n        case tx = \"6E400003-B5A3-F393-E0A9-E50E24DCCA9E\"\n        \n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n    \n    private enum EventServiceCharacteristic: String {\n        case microbitRequirements = \"E95DB84C-251D-470A-A062-FA1922DFA9A8\";\n        case microbitEvent        = \"E95D9775-251D-470A-A062-FA1922DFA9A8\";\n        case clientRequirements   = \"E95D23C4-251D-470A-A062-FA1922DFA9A8\";\n        case clientEvent          = \"E95D5404-251D-470A-A062-FA1922DFA9A8\";\n\n        func uuid() -> CBUUID {\n            return CBUUID(string: self.rawValue)\n        }\n    }\n}\n\n```\n\n\u4eca\u56de\u306f\u30b5\u30f3\u30d7\u30eb\u306a\u306e\u3067\u96d1\u306b\u5404\u7a2e\u30c7\u30ea\u30b2\u30fc\u30c8\u3092ViewController\u306b\u3064\u3051\u307e\u3057\u305f\u3002\n\n```ViewController\nimport UIKit\nimport CoreBluetooth\n\nclass ViewController: UIViewController, CBCentralManagerDelegate, CBPeripheralDelegate {\n    let manager: CBCentralManager = CBCentralManager()\n    var peripherals: [CBPeripheral] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        manager.delegate = self\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n    \n    @IBAction func tappedScan(_ sender: Any) {\n        if manager.isScanning {\n            debugPrint(\"stop scan\")\n            manager.stopScan()\n        } else {\n            debugPrint(\"scan start\")\n            manager.scanForPeripherals(withServices: nil, options: nil)\n        }\n    }\n\n    @IBAction func tappedDisconnect(_ sender: Any) {\n        peripherals.forEach { (peripheral) in\n            manager.cancelPeripheralConnection(peripheral)\n        }\n    }\n    \n    // MARK: - CBCentralManagerDelegate\n    func centralManagerDidUpdateState(_ central: CBCentralManager) {\n        debugPrint(#function)\n        var stateString = \"\"\n        switch central.state {\n        case .poweredOff:\n            stateString = \"powerOff\"\n        case .poweredOn:\n            stateString = \"powerOn\"\n        case .resetting:\n            stateString = \"resetting\"\n        case .unauthorized:\n            stateString = \"unauthorized\"\n        case .unknown:\n            stateString = \"unknown\"\n        case .unsupported:\n            stateString = \"unsupported\"\n        }\n        debugPrint(\"central state: \\(stateString)\")\n    }\n    func centralManager(_ central: CBCentralManager, didConnect peripheral: CBPeripheral) {\n        debugPrint(\"\\(#function), peripheral: \\(peripheral.name)\")\n        peripheral.discoverServices([MicroBitService.button.uuid()])\n//        peripheral.discoverServices(nil)\n    }\n    func centralManager(_ central: CBCentralManager, willRestoreState dict: [String : Any]) {\n        debugPrint(#function)\n    }\n    func centralManager(_ central: CBCentralManager, didFailToConnect peripheral: CBPeripheral, error: Error?) {\n        debugPrint(\"\\(#function), pripheral: \\(peripheral.name)\")\n    }\n    func centralManager(_ central: CBCentralManager, didDisconnectPeripheral peripheral: CBPeripheral, error: Error?) {\n        debugPrint(\"\\(#function), peripheral: \\(peripheral.name)\")\n    }\n    func centralManager(_ central: CBCentralManager, didDiscover peripheral: CBPeripheral, advertisementData: [String : Any], rssi RSSI: NSNumber) {\n//        debugPrint(#function)\n        if peripheral.name?.range(of: \"micro:bit\") != nil{\n            debugPrint(\"didDiscover, peripheral: \\(peripheral.name)\")\n            if peripherals.filter({ (keepedPeripheral) -> Bool in\n                return keepedPeripheral.identifier == peripheral.identifier ? true : false\n            }).count == 0 {\n                peripherals.append(peripheral)\n                peripheral.delegate = self\n            }\n            manager.connect(peripheral, options: nil)\n        }\n    }\n    \n    // MARK: - CBPeripheralDelegate\n    func peripheralDidUpdateName(_ peripheral: CBPeripheral) {\n        debugPrint(#function)\n    }\n\n    func peripheral(_ peripheral: CBPeripheral, didDiscoverServices error: Error?) {\n        debugPrint(#function)\n        peripheral.services?.forEach({ (service) in\n            debugPrint(\"ServiceUUID: \\(service.uuid)\")\n            peripheral.discoverCharacteristics(MicroBitService.button.characteristics(), for: service)\n//            peripheral.discoverCharacteristics(nil, for: service)\n        })\n    }\n    \n    func peripheral(_ peripheral: CBPeripheral, didReadRSSI RSSI: NSNumber, error: Error?) {\n        debugPrint(#function)\n    }\n    \n    func peripheral(_ peripheral: CBPeripheral, didModifyServices invalidatedServices: [CBService]) {\n        debugPrint(#function)\n    }\n    \n    func peripheral(_ peripheral: CBPeripheral, didWriteValueFor descriptor: CBDescriptor, error: Error?) {\n        debugPrint(#function)\n    }\n    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor descriptor: CBDescriptor, error: Error?) {\n        debugPrint(#function)\n    }\n    func peripheral(_ peripheral: CBPeripheral, didDiscoverCharacteristicsFor service: CBService, error: Error?) {\n        debugPrint(#function)\n        service.characteristics?.forEach({ (characteristic) in\n            debugPrint(\"CharacteristicUUID: \\(characteristic.uuid)\")\n            peripheral.setNotifyValue(true, for: characteristic)\n//            peripheral.readValue(for: characteristic)\n        })\n    }\n    func peripheral(_ peripheral: CBPeripheral, didDiscoverIncludedServicesFor service: CBService, error: Error?) {\n        debugPrint(#function)\n    }\n    func peripheral(_ peripheral: CBPeripheral, didWriteValueFor characteristic: CBCharacteristic, error: Error?) {\n        debugPrint(#function)\n    }\n    func peripheral(_ peripheral: CBPeripheral, didUpdateValueFor characteristic: CBCharacteristic, error: Error?) {\n        debugPrint(\"\\(#function): \\(characteristic.value)\")\n    }\n    func peripheral(_ peripheral: CBPeripheral, didDiscoverDescriptorsFor characteristic: CBCharacteristic, error: Error?) {\n        debugPrint(#function)\n    }\n    func peripheral(_ peripheral: CBPeripheral, didUpdateNotificationStateFor characteristic: CBCharacteristic, error: Error?) {\n        debugPrint(#function)\n    }\n}\n```\n\n\u30b5\u30f3\u30d7\u30eb\u306a\u306e\u3067\u753b\u9762\u306f\u304b\u306a\u308a\u624b\u629c\u304d\u3067\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n![Screen Shot 2016-12-25 at 19.42.54.png](https://qiita-image-store.s3.amazonaws.com/0/11776/b4bdeab0-3b73-a9d0-7c34-8ba3674f546c.png \"Screen Shot 2016-12-25 at 19.42.54.png\")\n\nScan\u3092\u958b\u59cb\u3059\u308b\u3068ButtonService\u304b\u3089ButtonCharacteristic\u3092\u691c\u7d22\u3057\u3001\u5909\u66f4\u691c\u77e5\u3059\u308b\u305f\u3081\u306b`setNotifyValue`\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u7121\u4e8b\u63a5\u7d9a\u304c\u5b8c\u4e86\u3057\u305f\u3089A\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066Xcode\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u30ed\u30b0\u306b\u5909\u66f4\u691c\u77e5\u306e\u30ed\u30b0\u304c\u51fa\u3066\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u203b\u79c1\u306e\u74b0\u5883\u3067\u306fB\u30dc\u30bf\u30f3\u306eCharacteristic\u304c\u691c\u51fa\u3055\u308c\u305a\u3001B\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u6642\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u691c\u77e5\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u539f\u56e0\u3092\u8abf\u67fb\u4e2d\u3067\u3059\u3002\n\n#Tips?\n\u7a00\u306bchibi:bit\u304c\u3044\u304f\u3089Scan\u3057\u3066\u3082\u898b\u3064\u304b\u3089\u306a\u3044\u306a\u3069\u306e\u73fe\u8c61\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u4eca\u306e\u3068\u3053\u308d\u79c1\u306e\u65b9\u3067\u308f\u304b\u3063\u3066\u308b\u65b9\u6cd5\u3068\u3057\u3066cibhi:bit\u3092\u30da\u30a2\u30ea\u30f3\u30b0\u30e2\u30fc\u30c9\u306b\u3057\u3001micro:bit\u30a2\u30d7\u30ea\u3067\u30da\u30a2\u30ea\u30f3\u30b0\u3092\u8a66\u307f\u308b\u3053\u3068\u3067\u3059\u3002\niOS\u306eBluetooth\u304b\u3089chibi:bit\u306f\u30c7\u30d0\u30a4\u30b9\u767b\u9332\u304b\u3089\u89e3\u9664\u3057\u3066\u304a\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n#\u6700\u5f8c\u306b\n\u4eca\u56de\u306fButtonService\u306e\u691c\u77e5\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\n\u540c\u69d8\u306bAccelerometer\u3084LED,Temperature\u306a\u3069\u306e\u5024\u3082\u540c\u69d8\u306e\u65b9\u6cd5\u3067\u8aad\u3081\u308b\u304b\u3068\u601d\u3044\u307e\u3059(\u307e\u3060\u8a66\u3057\u3066\u306a\u3044...\uff09\niOS\u3067CoreBluetooth\u3092\u8a66\u3059\u969b\u3001iOS\u540c\u58eb\u306e\u307b\u304b\u3001Konashi\u306e\u3088\u3046\u306a\u30dc\u30fc\u30c9\u304c\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u306e\u3092\u76ee\u306b\u3057\u307e\u3059\u304c\u3001cibhi:bit\u306fKonashi\u3088\u308a\u3082\u82e5\u5e72\u5b89\u3044\u305f\u3081\u4eca\u5f8cCoreBluetooth\u3092\u52c9\u5f37\u3059\u308b\u306b\u306f\u30aa\u30b9\u30b9\u30e1\u306e\u30c4\u30fc\u30eb\u304b\u3082\u3057\u308c\u307e\u305b\u3093\nhttps://www.switch-science.com/catalog/2900/\n", "tags": ["iOS", "bluetooth", "CoreBluetooth", "microbit", "chibibit"]}