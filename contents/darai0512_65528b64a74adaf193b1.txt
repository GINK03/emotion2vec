{"context": "\n\n\u6982\u8981\nnode.js\u521d\u5fc3\u8005\u306a\u304c\u3089\u3001\u6700\u8fd1express v4 + sequelize v3 + node-fetch (isomorphic-fetch)\u3067\u958b\u767a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\nUI\u5074\u304cisomorphic-fetch\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001request\u3067\u306f\u306a\u304fnode-fetch\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\n\u305d\u306e\u969b\u3001\u30e9\u30c3\u30d1\u30fc\u3068\u305d\u306e\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u30c6\u30b9\u30c8\u306b\u306fnock\u3068generator function\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3054\u81ea\u7531\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044 or \u30a2\u30c9\u30d0\u30a4\u30b9\u3042\u308c\u3070\u304a\u9858\u3044\u3057\u307e\u3059m(_ _)m\n\u203b\u5168\u3066node 6\u7cfb\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\nfetch wrapper\n\ncode\n\u4e8b\u524d\u6e96\u5099\u3002\nisomorphic-fetch\u3067\u306f\u306a\u304fnode-fetch\u3067\u3082\u826f\u3044\u3002\n\n$npm install isomorphic-fetch string\n\n\nfetch_wrap.js\nconst fetch = require('isomorphic-fetch'); // node-fetch\nconst S = require('string');\nconst querystring = require('querystring');\n\n/**\n * wraps node-fetch\n *\n * @param {string} url        - URL\n * @param {object} query      - object of query parameter or body\n * @param {object} body       - object of query parameter or body\n * @param {object} additional - added to headers option, etc\n * @return {promise}\n * @example\n * // require\n * let fetch = require('./lib/fetch_wrap');\n *\n * // get\n * let res = yield fetch.get.json(url, null, body);\n * fetch.get.text(url, query).then(res => res);\n *\n * // add headers\n * let res = yield fetch.put.json(url, null, body, {\n *   headers: {\n *     'X-HTTP-Method-Override': 'PUT',  // DELETE, PATCH\n *     'Content-Type' : 'text/html'\n *   }\n * });\n *\n */\nmodule.exports = {\n  get: {\n    text: (url, query = {}, body = {}, additional = {}) => _fetch('GET', 'text', url, query, body, additional),\n    json: (url, query = {}, body = {}, additional = {}) => _fetch('GET', 'json', url, query, body, additional),\n  },\n  post: {\n    json: (url, query = {}, body = {}, additional = {}) => _fetch('POST', 'json', url, query, body, additional),\n  },\n  put: {\n    json: (url, query = {}, body = {}, additional = {}) => _fetch('PUT', 'json', url, query, body, additional),\n  },\n  delete: {\n    json: (url, query = {}, body = {}, additional = {}) => _fetch('DELETE', 'json', url, query, body, additional),\n  },\n}\n\n/**\n * executes node-fetch\n *\n * @param {string} method     - method of {GET,POST,PUT,DELETE,PATCH}\n * @param {string} type       - json or text\n * @param {string} url        - URL\n * @param {object} query      - object of query parameter or body\n * @param {object} body       - object of query parameter or body\n * @param {object} additional - added to headers option, etc\n * @return {promise}\n */\nfunction _fetch(method, type, url, query, body, additional) {\n  const accept = {};\n  if (type === 'json') {\n    accept['headers'] = {Accept: 'application/json'};\n  } else if (type === 'text') {\n    accept['headers'] = {Accept: 'text/plain,text/html'};\n  }\n  additional = Object.assign(accept, additional);\n  return fetch(_addUrl(url, query), _getOption(method, body, additional)).then(res => {\n    if (type === 'json') {\n      return res.json();\n    } else if (type === 'text') {\n      return res.text();\n    }\n  });\n}\n\n/**\n * adds query parameter to url\n *\n * @param {string} url   - url without query parameter\n * @param {object} query - query parameter\n * @return {string} url\n */\nfunction _addUrl(url, query = {}) {\n  let queryStr = querystring.stringify(query, null, null, {encodeURIComponent: querystring.unescape});\n  queryStr = S(queryStr).isEmpty() ? '' : '?' + queryStr;\n  return url + queryStr;\n}\n\n/**\n * makes option object for node-fetch\n *\n * @param {string} method     - request method\n * @param {object} body       - request body in JSON format\n * @param {object} additional - added to headers option, etc\n * @return {object} option\n */\nfunction _getOption(method, body = {}, additional = {}) {\n  let option = {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    // ...additional // spread-operator: es7 or --harmony\n  };\n\n  // instead of spread-operator\n  Object.keys(additional).forEach(key => {\n    option[key] = Object.assign(additional[key], option[key]);\n  }, this);\n\n  option['method'] = method;\n  if (!S(body).isEmpty()) {\n    option['body'] = JSON.stringify(body);\n  }\n\n  return option;\n}\n\n\n\ntest\n\u4e8b\u524d\u6e96\u5099\u3002\ngenerator\u3092coroutine\u3067\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u3001bluebird\u3068\u3044\u3046Promise\u7cfb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3002\nbluebird\u306fsequelize\u3067\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u305d\u3053\u304b\u3089\u53d6\u5f97\u3057\u305f\u304c\u3001bluebird\u3084co\u3092install\u3057\u3066\u3082\u826f\u3044\u3002\n\n$npm install nock sequelize\n\n\nfetch_wrap.test.js\nconst nock = require('nock');\nconst bluebird = require('sequelize').Promise;\nconst fetch = require('./fetch_wrap');\n\nlet baseURL = 'http://test.co.jp';\nlet testURL = 'http://test.co.jp/';\n\nlet resText = 'text/plain'\nlet reqJson = {req: 'json'};\nlet resJson = {res: 'application/json'};\n\nnock(baseURL)\n  .get('/')\n  .reply(200, resText)\n  .get('/?req=text')\n  .reply(200, Object.assign({method: 'GET'}, resJson))\n  .post('/', reqJson)\n  .reply(200, Object.assign({method: 'POST'}, resJson))\n  .put('/', reqJson)\n  .reply(200, Object.assign({method: 'PUT'}, resJson))\n  .delete('/', reqJson)\n  .reply(200, Object.assign({method: 'DELETE'}, resJson))\n\nconst exec = function*() {\n  let res = yield fetch.get.text(testURL);\n  console.log(res);\n  res = yield fetch.get.json(testURL, {req: 'text'});\n  console.log(res);\n  res = yield fetch.post.json(testURL, null, reqJson);\n  console.log(res);\n  res = yield fetch.put.json(testURL, null, reqJson);\n  console.log(res);\n  res = yield fetch.delete.json(testURL, null, reqJson);\n  console.log(res);\n}\n\nbluebird.coroutine(exec)().catch((err) => {\n  console.log(err);\n});\n\n\n$node fetch_wrap.test.js\ntext/plain\n{ method: 'GET', res: 'application/json' }\n{ method: 'POST', res: 'application/json' }\n{ method: 'PUT', res: 'application/json' }\n{ method: 'DELETE', res: 'application/json' }\n\n\nbody\u4ed8\u304dget\u306e\u4f7f\u3044\u65b9\nget/delete\u3067\u306fcontent-length: 0\u304c\u63a8\u5968\u3060\u3057\u3001\u4e0b\u8a18\u306e\u901a\u308anode-fetch\u5185\u3067\u3082get\u4ee5\u5916\u306econtent-length\u3057\u304b\u751f\u6210\u3057\u3066\u304f\u308c\u3066\u3044\u306a\u3044\u3002\nhttps://github.com/bitinn/node-fetch/blob/master/index.js#L93\n\u3053\u308c\u3060\u3068\u30b5\u30fc\u30d0\u30fc\u5074\u3067body\u304cnull\u3068\u5224\u65ad\u3055\u308c\u3066\u3057\u307e\u3046\u304c\u3001\u81ea\u5206\u3067headers\u306bcontent-length\u3092\u4ed8\u3051\u52a0\u3048\u308c\u3070\u304a\uff4b\nconst fetch = require('./fetch_wrap');\n\nconst body = {test: 'get-with-body'};\nconst bodyLen = Buffer.byteLength(JSON.stringify(body));\n\nfetch.get.json('url', null, body, {\n  headers: {\n    'content-length': bodyLen\n  }\n}).then(res => console.log(res));\n\n\nAppendix: generator function\njxck\u3055\u3093\u306e\u52d5\u753b\u304c\u6700\u5f37\u306b\u308f\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\uff01\n\u3059\u3054\u304f\u5358\u7d14\u306b\u307e\u3068\u3081\u308b\u3068\u3001\n\u4e0b\u8a18\u306e\u3088\u3046\u306aexec\u95a2\u6570\u3060\u3068\u3001fetch\u306fpromise\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u307e\u3059\u304c\u3001\npromise\u306f\u975e\u540c\u671f\u306a\u306e\u3067fetch\u306e\u7d50\u679c\u304c\u8fd4\u308b\u524d\u306bconsole.log\u304c\u5b9f\u884c\u3055\u308cundefined\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n$cat fetch_wrap.test.js\n// exec\u95a2\u6570\u4ee5\u4e0b\u3092\u4e0b\u8a18\u306b\u5909\u66f4\nconst exec = function() {\n  let res;\n  fetch.get.text(testURL).then(r => {res = r;});\n  console.log(res);\n}\nexec();\n$node fetch_wrap.test.js\nundefined\n\n\u3053\u308c\u3092\u5143\u3005\u306efetch_wrap.test.js\u306e\u3088\u3046\u306bgenerator\u3067\u66f8\u3051\u3070\u3001yield\u5358\u4f4d\u3067\u5b9f\u884c\u3092\u5236\u5fa1\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u4ed6\u3001promise\u306e\u5916\u306e\u4e16\u754c\u306b\u5024\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\nfunction*\u306fgenerator function\u5ba3\u8a00\n\nfunction* exec()\u3067let g = exec();\u3068\u3059\u308b\u3068\u3001g\u306b\u306fgenerator\u304c\u5165\u308b\n\ng.next();\u3067exec()\u5185\u306e\u6700\u521d\u306eyield\u306e\u53f3\u5074\u307e\u3067\u3092\u8a55\u4fa1\uff08\u5b9f\u884c\uff09\nnext\u3092\u7d9a\u3051\u308c\u3070\u6b21\u306eyield\u307e\u3067\u5b9f\u884c\u3001\u3092\u7e70\u308a\u8fd4\u305b\u308b\n\u7d42\u308f\u308a\u306f\u95a2\u6570\u3092\u629c\u3051\u308b(return)\u307e\u3067\n\ng.next('value');\u3068\u3059\u308c\u3070yield\u306e\u5de6\u5074\u306b\u5024\u3092\u6e21\u305b\u308b\n\nco(routine)\u3068\u306f\u3001callback\u3084promise\u306ethen(res => res)\u306e\u5024\u3092\u5916\u306e\u4e16\u754c\u306b\u8fd4\u3057\u306a\u304c\u3089\u3001\u518d\u5e30\u7684\u306bg.next(res)\u3092\u7e70\u308a\u8fd4\u3057\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u7e70\u308a\u8fd4\u3057\u306f\u3001generator function\u5185\u306ereturn\u307e\u3067(={value: return, done: true})\u3067\u3059\u3002\nreturn\u306evalue\u306fcoroutine(exec)().then(value => console.log(value));\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\nyield\u306f\u4e26\u5217\u5b9f\u884c(Promise.all)\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002\nES6\u6642\u4ee3\u306eNode.js\nco(routine)\u81ea\u4f53\u306fpromise\u7cfb\u306a\u306e\u3067\u975e\u540c\u671f\u3067\u3059\u3002\n\u307e\u305f\u3001\u52d5\u753b\u306b\u3042\u308b\u901a\u308a\u3001\u975epromise\u7cfb\u306e\u975e\u540c\u671f\u95a2\u6570\u306f\u3001promise\u3067\u5305\u3080\u304bthunkify\u3092\u4f7f\u3046\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\nAppendix: promise\n\u4e0b\u8a18\u3067\u5b66\u3073\u307e\u3057\u305f\n\nPromise\u306f\u3069\u3046\u52d5\u4f5c\u3059\u308b\u306e\u304b \u2013 Promise\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b\nJavaScript Promise\u306e\u672c\n\n## \u6982\u8981\n\nnode.js\u521d\u5fc3\u8005\u306a\u304c\u3089\u3001\u6700\u8fd1express v4 + sequelize v3 + [node-fetch](https://github.com/bitinn/node-fetch) (isomorphic-fetch)\u3067\u958b\u767a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\nUI\u5074\u304cisomorphic-fetch\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3001request\u3067\u306f\u306a\u304fnode-fetch\u3092\u63a1\u7528\u3057\u307e\u3057\u305f\u3002\n\u305d\u306e\u969b\u3001\u30e9\u30c3\u30d1\u30fc\u3068\u305d\u306e\u30c6\u30b9\u30c8\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u30c6\u30b9\u30c8\u306b\u306f[nock](https://github.com/node-nock/nock)\u3068generator function\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3054\u81ea\u7531\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044 or \u30a2\u30c9\u30d0\u30a4\u30b9\u3042\u308c\u3070\u304a\u9858\u3044\u3057\u307e\u3059m(_ _)m\n\n\u203b\u5168\u3066node 6\u7cfb\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n## fetch wrapper\n### code\n\n\u4e8b\u524d\u6e96\u5099\u3002\nisomorphic-fetch\u3067\u306f\u306a\u304fnode-fetch\u3067\u3082\u826f\u3044\u3002\n```\n$npm install isomorphic-fetch string\n```\n\n```js:fetch_wrap.js\nconst fetch = require('isomorphic-fetch'); // node-fetch\nconst S = require('string');\nconst querystring = require('querystring');\n\n/**\n * wraps node-fetch\n *\n * @param {string} url        - URL\n * @param {object} query      - object of query parameter or body\n * @param {object} body       - object of query parameter or body\n * @param {object} additional - added to headers option, etc\n * @return {promise}\n * @example\n * // require\n * let fetch = require('./lib/fetch_wrap');\n *\n * // get\n * let res = yield fetch.get.json(url, null, body);\n * fetch.get.text(url, query).then(res => res);\n *\n * // add headers\n * let res = yield fetch.put.json(url, null, body, {\n *   headers: {\n *     'X-HTTP-Method-Override': 'PUT',  // DELETE, PATCH\n *     'Content-Type' : 'text/html'\n *   }\n * });\n *\n */\nmodule.exports = {\n  get: {\n    text: (url, query = {}, body = {}, additional = {}) => _fetch('GET', 'text', url, query, body, additional),\n    json: (url, query = {}, body = {}, additional = {}) => _fetch('GET', 'json', url, query, body, additional),\n  },\n  post: {\n    json: (url, query = {}, body = {}, additional = {}) => _fetch('POST', 'json', url, query, body, additional),\n  },\n  put: {\n    json: (url, query = {}, body = {}, additional = {}) => _fetch('PUT', 'json', url, query, body, additional),\n  },\n  delete: {\n    json: (url, query = {}, body = {}, additional = {}) => _fetch('DELETE', 'json', url, query, body, additional),\n  },\n}\n\n/**\n * executes node-fetch\n *\n * @param {string} method     - method of {GET,POST,PUT,DELETE,PATCH}\n * @param {string} type       - json or text\n * @param {string} url        - URL\n * @param {object} query      - object of query parameter or body\n * @param {object} body       - object of query parameter or body\n * @param {object} additional - added to headers option, etc\n * @return {promise}\n */\nfunction _fetch(method, type, url, query, body, additional) {\n  const accept = {};\n  if (type === 'json') {\n    accept['headers'] = {Accept: 'application/json'};\n  } else if (type === 'text') {\n    accept['headers'] = {Accept: 'text/plain,text/html'};\n  }\n  additional = Object.assign(accept, additional);\n  return fetch(_addUrl(url, query), _getOption(method, body, additional)).then(res => {\n    if (type === 'json') {\n      return res.json();\n    } else if (type === 'text') {\n      return res.text();\n    }\n  });\n}\n\n/**\n * adds query parameter to url\n *\n * @param {string} url   - url without query parameter\n * @param {object} query - query parameter\n * @return {string} url\n */\nfunction _addUrl(url, query = {}) {\n  let queryStr = querystring.stringify(query, null, null, {encodeURIComponent: querystring.unescape});\n  queryStr = S(queryStr).isEmpty() ? '' : '?' + queryStr;\n  return url + queryStr;\n}\n\n/**\n * makes option object for node-fetch\n *\n * @param {string} method     - request method\n * @param {object} body       - request body in JSON format\n * @param {object} additional - added to headers option, etc\n * @return {object} option\n */\nfunction _getOption(method, body = {}, additional = {}) {\n  let option = {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    // ...additional // spread-operator: es7 or --harmony\n  };\n\n  // instead of spread-operator\n  Object.keys(additional).forEach(key => {\n    option[key] = Object.assign(additional[key], option[key]);\n  }, this);\n\n  option['method'] = method;\n  if (!S(body).isEmpty()) {\n    option['body'] = JSON.stringify(body);\n  }\n\n  return option;\n}\n```\n\n### test\n\n\u4e8b\u524d\u6e96\u5099\u3002\ngenerator\u3092coroutine\u3067\u5b9f\u884c\u3055\u305b\u308b\u305f\u3081\u3001bluebird\u3068\u3044\u3046Promise\u7cfb\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3002\nbluebird\u306fsequelize\u3067\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u305d\u3053\u304b\u3089\u53d6\u5f97\u3057\u305f\u304c\u3001bluebird\u3084co\u3092install\u3057\u3066\u3082\u826f\u3044\u3002\n```\n$npm install nock sequelize\n```\n\n```js:fetch_wrap.test.js\nconst nock = require('nock');\nconst bluebird = require('sequelize').Promise;\nconst fetch = require('./fetch_wrap');\n\nlet baseURL = 'http://test.co.jp';\nlet testURL = 'http://test.co.jp/';\n\nlet resText = 'text/plain'\nlet reqJson = {req: 'json'};\nlet resJson = {res: 'application/json'};\n\nnock(baseURL)\n  .get('/')\n  .reply(200, resText)\n  .get('/?req=text')\n  .reply(200, Object.assign({method: 'GET'}, resJson))\n  .post('/', reqJson)\n  .reply(200, Object.assign({method: 'POST'}, resJson))\n  .put('/', reqJson)\n  .reply(200, Object.assign({method: 'PUT'}, resJson))\n  .delete('/', reqJson)\n  .reply(200, Object.assign({method: 'DELETE'}, resJson))\n\nconst exec = function*() {\n  let res = yield fetch.get.text(testURL);\n  console.log(res);\n  res = yield fetch.get.json(testURL, {req: 'text'});\n  console.log(res);\n  res = yield fetch.post.json(testURL, null, reqJson);\n  console.log(res);\n  res = yield fetch.put.json(testURL, null, reqJson);\n  console.log(res);\n  res = yield fetch.delete.json(testURL, null, reqJson);\n  console.log(res);\n}\n\nbluebird.coroutine(exec)().catch((err) => {\n  console.log(err);\n});\n```\n\n```\n$node fetch_wrap.test.js\ntext/plain\n{ method: 'GET', res: 'application/json' }\n{ method: 'POST', res: 'application/json' }\n{ method: 'PUT', res: 'application/json' }\n{ method: 'DELETE', res: 'application/json' }\n```\n\n## body\u4ed8\u304dget\u306e\u4f7f\u3044\u65b9\n\nget/delete\u3067\u306f`content-length: 0`\u304c\u63a8\u5968\u3060\u3057\u3001\u4e0b\u8a18\u306e\u901a\u308anode-fetch\u5185\u3067\u3082get\u4ee5\u5916\u306econtent-length\u3057\u304b\u751f\u6210\u3057\u3066\u304f\u308c\u3066\u3044\u306a\u3044\u3002\nhttps://github.com/bitinn/node-fetch/blob/master/index.js#L93\n\n\u3053\u308c\u3060\u3068\u30b5\u30fc\u30d0\u30fc\u5074\u3067body\u304cnull\u3068\u5224\u65ad\u3055\u308c\u3066\u3057\u307e\u3046\u304c\u3001\u81ea\u5206\u3067headers\u306bcontent-length\u3092\u4ed8\u3051\u52a0\u3048\u308c\u3070\u304a\uff4b\n\n```\nconst fetch = require('./fetch_wrap');\n\nconst body = {test: 'get-with-body'};\nconst bodyLen = Buffer.byteLength(JSON.stringify(body));\n\nfetch.get.json('url', null, body, {\n  headers: {\n    'content-length': bodyLen\n  }\n}).then(res => console.log(res));\n```\n\n### Appendix: generator function\n\n[jxck\u3055\u3093\u306e\u52d5\u753b](http://jxck.hatenablog.com/entry/2014-01-12/generator-screencaset\n)\u304c\u6700\u5f37\u306b\u308f\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\uff01\n\n\u3059\u3054\u304f\u5358\u7d14\u306b\u307e\u3068\u3081\u308b\u3068\u3001\n\u4e0b\u8a18\u306e\u3088\u3046\u306aexec\u95a2\u6570\u3060\u3068\u3001fetch\u306fpromise\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u307e\u3059\u304c\u3001\npromise\u306f\u975e\u540c\u671f\u306a\u306e\u3067fetch\u306e\u7d50\u679c\u304c\u8fd4\u308b\u524d\u306bconsole.log\u304c\u5b9f\u884c\u3055\u308cundefined\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```\n$cat fetch_wrap.test.js\n// exec\u95a2\u6570\u4ee5\u4e0b\u3092\u4e0b\u8a18\u306b\u5909\u66f4\nconst exec = function() {\n  let res;\n  fetch.get.text(testURL).then(r => {res = r;});\n  console.log(res);\n}\nexec();\n$node fetch_wrap.test.js\nundefined\n```\n\n\u3053\u308c\u3092\u5143\u3005\u306efetch_wrap.test.js\u306e\u3088\u3046\u306bgenerator\u3067\u66f8\u3051\u3070\u3001yield\u5358\u4f4d\u3067\u5b9f\u884c\u3092\u5236\u5fa1\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u4ed6\u3001promise\u306e\u5916\u306e\u4e16\u754c\u306b\u5024\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n- `function*`\u306fgenerator function\u5ba3\u8a00\n- `function* exec()`\u3067`let g = exec();`\u3068\u3059\u308b\u3068\u3001g\u306b\u306fgenerator\u304c\u5165\u308b\n- `g.next();`\u3067exec()\u5185\u306e\u6700\u521d\u306eyield\u306e\u53f3\u5074\u307e\u3067\u3092\u8a55\u4fa1\uff08\u5b9f\u884c\uff09\n- next\u3092\u7d9a\u3051\u308c\u3070\u6b21\u306eyield\u307e\u3067\u5b9f\u884c\u3001\u3092\u7e70\u308a\u8fd4\u305b\u308b\n- \u7d42\u308f\u308a\u306f\u95a2\u6570\u3092\u629c\u3051\u308b(return)\u307e\u3067\n- `g.next('value');`\u3068\u3059\u308c\u3070yield\u306e\u5de6\u5074\u306b\u5024\u3092\u6e21\u305b\u308b\n\nco(routine)\u3068\u306f\u3001callback\u3084promise\u306ethen(res => res)\u306e\u5024\u3092\u5916\u306e\u4e16\u754c\u306b\u8fd4\u3057\u306a\u304c\u3089\u3001\u518d\u5e30\u7684\u306b`g.next(res)`\u3092\u7e70\u308a\u8fd4\u3057\u3066\u304f\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u7e70\u308a\u8fd4\u3057\u306f\u3001generator function\u5185\u306ereturn\u307e\u3067(=`{value: return, done: true}`)\u3067\u3059\u3002\nreturn\u306evalue\u306f`coroutine(exec)().then(value => console.log(value));`\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\nyield\u306f\u4e26\u5217\u5b9f\u884c(Promise.all)\u306b\u3082\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002\n[ES6\u6642\u4ee3\u306eNode.js](http://techblog.yahoo.co.jp/javascript/nodejs/Node-es6/)\n\n**co(routine)\u81ea\u4f53\u306fpromise\u7cfb\u306a\u306e\u3067\u975e\u540c\u671f\u3067\u3059\u3002**\n\n\u307e\u305f\u3001\u52d5\u753b\u306b\u3042\u308b\u901a\u308a\u3001\u975epromise\u7cfb\u306e\u975e\u540c\u671f\u95a2\u6570\u306f\u3001promise\u3067\u5305\u3080\u304b[thunkify](https://github.com/tj/node-thunkify)\u3092\u4f7f\u3046\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n### Appendix: promise\n\n\u4e0b\u8a18\u3067\u5b66\u3073\u307e\u3057\u305f\n\n- [Promise\u306f\u3069\u3046\u52d5\u4f5c\u3059\u308b\u306e\u304b \u2013 Promise\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b](http://postd.cc/how-do-promises-work/#a-closer-look-into-then)\n- [JavaScript Promise\u306e\u672c](http://azu.github.io/promises-book/#what-is-promise)\n", "tags": ["Node.js", "sequelize", "api", "generator", "fetch"]}