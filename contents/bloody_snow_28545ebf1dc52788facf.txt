{"tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "algorithm", "topcoder", "JavaScript"], "context": " More than 1 year has passed since last update.TopCoder problem \"KiwiJuiceEasy\" used in Member SRM 478 (Division II Level One)\nhttp://topcoder.bgcoder.com/print.php?id=2714\n\nTaro has prepared delicious kiwi fruit juice. He poured it into N bottles numbered from 0 to N-1. The capacity of the i-th bottle is capacities[i] liters, and he poured bottles[i] liters of kiwi juice into this bottle. \nNow he wants to redistribute juice in the bottles. In order to do this, he will perform M operations numbered from 0 to M-1 in the order in which he will perform them. For the i-th operation, he will pour kiwi juice from bottle fromId[i] to bottle toId[i]. He will stop pouring when bottle fromId[i] becomes empty or bottle toId[i] becomes full, whichever happens earlier. \nReturn an int[] that contains exactly N elements and whose i-th element is the amount of kiwi juice in the i-th bottle after all pouring operations are finished.\n\n\u6700\u521d\u306bN\u672c\u306e\u30dc\u30c8\u30eb\u304c\u7528\u610f\u3055\u308c\u3001\u5bb9\u91cf\u304ccapcities[i]\u3001\u5b9f\u969b\u306b\u5165\u3063\u3066\u3044\u308b\u30b8\u30e5\u30fc\u30b9\u306e\u91cf\u304cbottles[i]\u3068\u3059\u308b\u3002\u305d\u308c\u306b\u5bfe\u3057\u3066\u3001fromId\u306e\u30dc\u30c8\u30eb\u304b\u3089toId\u306e\u30dc\u30c8\u30eb\u306b\u6ce8\u3050(\u6ce8\u3052\u306a\u304f\u306a\u308b\u307e\u3067(fromId\u306e\u30dc\u30c8\u30eb\u304c\u7a7a\u306b\u306a\u308b\u304b\u3001toId\u306e\u30dc\u30c8\u30eb\u304c\u3044\u3063\u3071\u3044\u306b\u306a\u308b\u307e\u3067))\u3068\u3044\u3046\u64cd\u4f5c\u306e\u6307\u793a\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\u64cd\u4f5c\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306e\u5404\u30dc\u30c8\u30eb\u306b\u5165\u3063\u3066\u3044\u308b\u30b8\u30e5\u30fc\u30b9\u306e\u91cf\u3092\u6c42\u3081\u3088\u3002\n\u3068\u3044\u3046\u554f\u984c\u3092\u8003\u3048\u3066\u307f\u308b\u3002\n\nfromId\u3068toId\u3067\u6307\u5b9a\u3055\u308c\u305f\u30dc\u30c8\u30eb\u3092\u53d6\u5f97\u3059\u308b\n\u7a7a\u306b\u306a\u308b\u3001\u307e\u305f\u306f\u3001\u6e80\u676f\u306b\u306a\u308b\u307e\u3067\u6ce8\u3050\n1-2\u3092\u9806\u756a\u306b\u7e70\u308a\u8fd4\u3059\n\n\u3067\u89e3\u3051\u305d\u3046\u3067\u3042\u308b\u3002\u3088\u3063\u3066\u3001\u30b3\u30fc\u30c9\u306f\n\nPourJuice.js\nvar Solver = { \n    solve: function(capacities, bottles, fromId, toId) {\n        for(var i = 0; i < fromId.length; ++i)\n        {\n            var result = this.pour(bottles[fromId[i]], bottles[toId[i]], capacities[toId[i]]);\n            bottles[fromId[i]] = result[0];\n            bottles[toId[i]] = result[1];\n        }\n        return bottles;\n    }, \n    pour: function(fromAmount, toAmount, toCapacity) {\n        return fromAmount + toAmount <= toCapacity ? [0, fromAmount + toAmount] : [fromAmount + toAmount - toCapacity, toCapacity];\n    }\n};\n\n\n\u5358\u4f53\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\n\nPourJuiceTest.js\nTestCase(\"PourJuiceTest\", {\n    setUp: function() {\n        this.solver = Object.create(Solver);\n    },\n\n    \"test ([20, 20], [5, 8], [0], [1]) should return [0, 13]\": function() {\n        assertEquals([0, 13], this.solver.solve([20, 20], [5, 8], [0], [1]));\n    },  \n    \"test ([10, 10], [5, 8], [0], [1]) should return [3, 10]\": function() {\n        assertEquals([3, 10], this.solver.solve([10, 10], [5, 8], [0], [1]));\n    },  \n    \"test ([14, 35, 86, 58, 25, 62], [6, 34, 27, 38, 9, 60], [1, 2, 4, 5, 3, 3, 1, 0], [0, 1, 2, 4, 2, 5, 3, 1]) should return [0, 14, 65, 35, 25, 35]\": function() {\n        assertEquals([0, 14, 65, 35, 25, 35], this.solver.solve([14, 35, 86, 58, 25, 62], [6, 34, 27, 38, 9, 60], [1, 2, 4, 5, 3, 3, 1, 0], [0, 1, 2, 4, 2, 5, 3, 1]));\n    },  \n    \"test ([700000, 800000, 900000, 1000000], [478478, 478478, 478478, 478478], [2, 3, 2, 0, 1], [0, 1, 1, 3, 2]) should return [0, 156956, 900000, 856956]\": function() {\n        assertEquals([0, 156956, 900000, 856956], this.solver.solve([700000, 800000, 900000, 1000000], [478478, 478478, 478478, 478478], [2, 3, 2, 0, 1], [0, 1, 1, 3, 2]));\n    }\n });\n\n\n\u4e00\u5fdcgithub\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/bloodysnowx/ProgramContest/tree/master/js/PourJuice\nTopCoder problem \"KiwiJuiceEasy\" used in Member SRM 478 (Division II Level One)\nhttp://topcoder.bgcoder.com/print.php?id=2714\n\n> Taro has prepared delicious kiwi fruit juice. He poured it into N bottles numbered from 0 to N-1. The capacity of the i-th bottle is capacities[i] liters, and he poured bottles[i] liters of kiwi juice into this bottle. \n> Now he wants to redistribute juice in the bottles. In order to do this, he will perform M operations numbered from 0 to M-1 in the order in which he will perform them. For the i-th operation, he will pour kiwi juice from bottle fromId[i] to bottle toId[i]. He will stop pouring when bottle fromId[i] becomes empty or bottle toId[i] becomes full, whichever happens earlier. \n> Return an int[] that contains exactly N elements and whose i-th element is the amount of kiwi juice in the i-th bottle after all pouring operations are finished.\n\n\u6700\u521d\u306bN\u672c\u306e\u30dc\u30c8\u30eb\u304c\u7528\u610f\u3055\u308c\u3001\u5bb9\u91cf\u304ccapcities[i]\u3001\u5b9f\u969b\u306b\u5165\u3063\u3066\u3044\u308b\u30b8\u30e5\u30fc\u30b9\u306e\u91cf\u304cbottles[i]\u3068\u3059\u308b\u3002\u305d\u308c\u306b\u5bfe\u3057\u3066\u3001fromId\u306e\u30dc\u30c8\u30eb\u304b\u3089toId\u306e\u30dc\u30c8\u30eb\u306b\u6ce8\u3050(\u6ce8\u3052\u306a\u304f\u306a\u308b\u307e\u3067(fromId\u306e\u30dc\u30c8\u30eb\u304c\u7a7a\u306b\u306a\u308b\u304b\u3001toId\u306e\u30dc\u30c8\u30eb\u304c\u3044\u3063\u3071\u3044\u306b\u306a\u308b\u307e\u3067))\u3068\u3044\u3046\u64cd\u4f5c\u306e\u6307\u793a\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\u64cd\u4f5c\u304c\u7d42\u308f\u3063\u305f\u5f8c\u306e\u5404\u30dc\u30c8\u30eb\u306b\u5165\u3063\u3066\u3044\u308b\u30b8\u30e5\u30fc\u30b9\u306e\u91cf\u3092\u6c42\u3081\u3088\u3002\n\n\u3068\u3044\u3046\u554f\u984c\u3092\u8003\u3048\u3066\u307f\u308b\u3002\n\n1. fromId\u3068toId\u3067\u6307\u5b9a\u3055\u308c\u305f\u30dc\u30c8\u30eb\u3092\u53d6\u5f97\u3059\u308b\n2. \u7a7a\u306b\u306a\u308b\u3001\u307e\u305f\u306f\u3001\u6e80\u676f\u306b\u306a\u308b\u307e\u3067\u6ce8\u3050\n3. 1-2\u3092\u9806\u756a\u306b\u7e70\u308a\u8fd4\u3059\n\n\u3067\u89e3\u3051\u305d\u3046\u3067\u3042\u308b\u3002\u3088\u3063\u3066\u3001\u30b3\u30fc\u30c9\u306f\n\n```js:PourJuice.js\nvar Solver = { \n    solve: function(capacities, bottles, fromId, toId) {\n        for(var i = 0; i < fromId.length; ++i)\n        {\n            var result = this.pour(bottles[fromId[i]], bottles[toId[i]], capacities[toId[i]]);\n            bottles[fromId[i]] = result[0];\n            bottles[toId[i]] = result[1];\n        }\n        return bottles;\n    }, \n    pour: function(fromAmount, toAmount, toCapacity) {\n        return fromAmount + toAmount <= toCapacity ? [0, fromAmount + toAmount] : [fromAmount + toAmount - toCapacity, toCapacity];\n    }\n};\n```\n\u5358\u4f53\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\n\n```js:PourJuiceTest.js\nTestCase(\"PourJuiceTest\", {\n    setUp: function() {\n        this.solver = Object.create(Solver);\n    },\n\n    \"test ([20, 20], [5, 8], [0], [1]) should return [0, 13]\": function() {\n        assertEquals([0, 13], this.solver.solve([20, 20], [5, 8], [0], [1]));\n    },  \n    \"test ([10, 10], [5, 8], [0], [1]) should return [3, 10]\": function() {\n        assertEquals([3, 10], this.solver.solve([10, 10], [5, 8], [0], [1]));\n    },  \n    \"test ([14, 35, 86, 58, 25, 62], [6, 34, 27, 38, 9, 60], [1, 2, 4, 5, 3, 3, 1, 0], [0, 1, 2, 4, 2, 5, 3, 1]) should return [0, 14, 65, 35, 25, 35]\": function() {\n        assertEquals([0, 14, 65, 35, 25, 35], this.solver.solve([14, 35, 86, 58, 25, 62], [6, 34, 27, 38, 9, 60], [1, 2, 4, 5, 3, 3, 1, 0], [0, 1, 2, 4, 2, 5, 3, 1]));\n    },  \n    \"test ([700000, 800000, 900000, 1000000], [478478, 478478, 478478, 478478], [2, 3, 2, 0, 1], [0, 1, 1, 3, 2]) should return [0, 156956, 900000, 856956]\": function() {\n        assertEquals([0, 156956, 900000, 856956], this.solver.solve([700000, 800000, 900000, 1000000], [478478, 478478, 478478, 478478], [2, 3, 2, 0, 1], [0, 1, 1, 3, 2]));\n    }\n });\n```\n\n\u4e00\u5fdcgithub\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u4fdd\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/bloodysnowx/ProgramContest/tree/master/js/PourJuice\n"}