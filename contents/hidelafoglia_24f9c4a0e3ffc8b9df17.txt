{"context": " More than 1 year has passed since last update.\n\nnmqtt \u3092\u3055\u308f\u3063\u3066\u307f\u305f\n\u30d7\u30ed\u30c8\u30b3\u30eb\u30ec\u30d9\u30eb = 3 \u3067\u3061\u3087\u3063\u3068\u53e4\u3044\u3088\u3046\u3067\u3059\n\n\nMqttConnectMessage\n10-11-00-06-4D-51-49-73-64-70-03-02-00-1E-00-03-61-6E-79\n\n\n10: 0x10 == CONNECT\n11: 17\u30d0\u30a4\u30c8\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n00-06 : 6\u30d0\u30a4\u30c8\u306e Protocol Name \u304c\u7d9a\u304f(UTF-8 encoding string\u9577)\n4D-51-49-73-64-70 : \n\n    >>> binascii.unhexlify('4D-51-49-73-64-70'.replace('-',''))\n    'MQIsdp\n\n\n03: MQIsdp \u306a\u306e\u3067\u3001 Protocol Level = 3\n02: Clean Session(0x02)\u3060\u3051\u304c Connect Flags\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\n00-1E: Keep Alive = 30\u79d2\n00-03: Payload \u30b5\u30a4\u30ba = 3\u30d0\u30a4\u30c8 (UTF-8 encoding string \u9577)\n61-6E-79: Payload \u306fClientId(=any)\u3060\u3051\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b(\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u305f)\n\n    >>> binascii.unhexlify('61-6E-79'.replace('-',''))\n    'any'\n\n\u554f\u984c\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3002\n\nMqttSubscribeMessage\n80-14-00-01-00-0F-6D-79-2F-74-6F-70-69-63-2F-73-74-72-69-6E-67-00\n\n\n80: 0x80 == SUBSCRIBE\n14: 20\u30d0\u30a4\u30c8\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n00-01: \u30d1\u30b1\u30c3\u30c8\u8b58\u5225\u5b50\n00-0F: UTF-8 encoding string\u9577\n\n0F-6D-79-2F-74-6F-70-69-63-2F-73-74-72-69-6E-67: \u30c8\u30d4\u30c3\u30af(my/topic/string)\n00 : Topic QoS \u30d0\u30a4\u30c8\n\n>>> binascii.unhexlify('6D-79-2F-74-6F-70-69-63-2F-73-74-72-69-6E-67'.replace('-',''))\n'my/topic/string'\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d1\u30b1\u30c3\u30c8\u30bf\u30a4\u30d7\u304c 0x82 \u3058\u3083\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3088\u3046\u306a(0x02\u306fControl Packet Type Flag)\n\nControl Packet Type Flag\n2.2.2. Flags \u3092\u53c2\u8003\u306b\u3068\u308a\u3042\u3048\u305a\u3001Flag\u3092\u8ffd\u52a0\u3057\u3066\u307f\u305f\u3002\nNmqtt.MqttHeader:\n\nMqttHeader.cs\n\n        static byte[] ControlPacketFlag = new byte[16]{\n            0,0,0,0,0,0,2,0,2,0,2,0,0,0,0,0\n        };\n\n        /// <summary>\n        ///     Gets the value of the Mqtt header as a byte array\n        /// </summary>\n        private List<byte> HeaderBytes {\n            get {\n                var headerBytes = new List<byte>();\n\n                // build the bytes that make up the header. The first byte is a combination of message type, dup,\n                // qos and retain, and the follow bytes (up to 4 of them) are the size of the payload + variable header.\n                headerBytes.Add(\n                    (byte)\n                    ((((int) MessageType) << 4) \n                        + ControlPacketFlag [(int)MessageType]          // ADD by HDKNR\n                        + ((Duplicate ? 1 : 0) << 3) + (((int) Qos) << 1) + (Retain ? 1 : 0)));\n                headerBytes.AddRange(GetRemainingLengthBytes());\n                return headerBytes;\n            }\n        }\n\n\n\n\u3053\u308c\u3067rabbitmq-mqtt\u306b\u63a5\u7d9a\u5f8c\u3001Python\u306ePaho\u306e\u30d1\u30d6\u30ea\u30c3\u30b7\u30e3\u30fc\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3082\u3089\u3048\u305f\n\u30d5\u30a9\u30fc\u30af\u3057\u3066\u30d7\u30ed\u30c8\u30b3\u30eb\u30ec\u30d9\u30eb4\u3067\u52d5\u4f5c\u78ba\u8a8d\u5fc5\u8981\n\n\n- [nmqtt](https://github.com/markallanson/nmqtt) \u3092\u3055\u308f\u3063\u3066\u307f\u305f\n- \u30d7\u30ed\u30c8\u30b3\u30eb\u30ec\u30d9\u30eb = 3 \u3067\u3061\u3087\u3063\u3068\u53e4\u3044\u3088\u3046\u3067\u3059\n\n\n# MqttConnectMessage\n\n~~~\n10-11-00-06-4D-51-49-73-64-70-03-02-00-1E-00-03-61-6E-79\n~~~\n\n- 10: 0x10 == CONNECT\n- 11: 17\u30d0\u30a4\u30c8\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n- 00-06 : 6\u30d0\u30a4\u30c8\u306e Protocol Name \u304c\u7d9a\u304f([UTF-8 encoding string\u9577](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/cos02/mqtt-v3.1.1-cos02.html#_Toc398718016))\n- 4D-51-49-73-64-70 : \n\n~~~\n    >>> binascii.unhexlify('4D-51-49-73-64-70'.replace('-',''))\n    'MQIsdp\n~~~\n\n- 03: MQIsdp \u306a\u306e\u3067\u3001 Protocol Level = 3\n- 02: Clean Session(0x02)\u3060\u3051\u304c Connect Flags\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\n- 00-1E: Keep Alive = 30\u79d2\n- 00-03: Payload \u30b5\u30a4\u30ba = 3\u30d0\u30a4\u30c8 (UTF-8 encoding string \u9577)\n- 61-6E-79: Payload \u306fClientId(=any)\u3060\u3051\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b(\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u305f)\n\n~~~\n    >>> binascii.unhexlify('61-6E-79'.replace('-',''))\n    'any'\n~~~    \n\n\u554f\u984c\u306a\u3044\u3088\u3046\u306a\u6c17\u304c\u3002\n\n# MqttSubscribeMessage\n\n~~~\n80-14-00-01-00-0F-6D-79-2F-74-6F-70-69-63-2F-73-74-72-69-6E-67-00\n~~~\n\n- 80: 0x80 == SUBSCRIBE\n- 14: 20\u30d0\u30a4\u30c8\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n- 00-01: \u30d1\u30b1\u30c3\u30c8\u8b58\u5225\u5b50\n- 00-0F: [UTF-8 encoding string\u9577](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/cos02/mqtt-v3.1.1-cos02.html#_Toc398718016)\n- 0F-6D-79-2F-74-6F-70-69-63-2F-73-74-72-69-6E-67: \u30c8\u30d4\u30c3\u30af(my/topic/string)\n- 00 : Topic QoS \u30d0\u30a4\u30c8\n\n~~~\n>>> binascii.unhexlify('6D-79-2F-74-6F-70-69-63-2F-73-74-72-69-6E-67'.replace('-',''))\n'my/topic/string'\n~~~\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30d1\u30b1\u30c3\u30c8\u30bf\u30a4\u30d7\u304c 0x82 \u3058\u3083\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3088\u3046\u306a(0x02\u306fControl Packet Type Flag)\n\n# Control Packet Type Flag\n\n[2.2.2. Flags](http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/cos02/mqtt-v3.1.1-cos02.html#_Toc398718022) \u3092\u53c2\u8003\u306b\u3068\u308a\u3042\u3048\u305a\u3001Flag\u3092\u8ffd\u52a0\u3057\u3066\u307f\u305f\u3002\n\nNmqtt.MqttHeader:\n\n~~~csharp:MqttHeader.cs\n\n\t\tstatic byte[] ControlPacketFlag = new byte[16]{\n\t\t\t0,0,0,0,0,0,2,0,2,0,2,0,0,0,0,0\n\t\t};\n\t\t\t\n        /// <summary>\n        ///     Gets the value of the Mqtt header as a byte array\n        /// </summary>\n        private List<byte> HeaderBytes {\n            get {\n                var headerBytes = new List<byte>();\n\n                // build the bytes that make up the header. The first byte is a combination of message type, dup,\n                // qos and retain, and the follow bytes (up to 4 of them) are the size of the payload + variable header.\n                headerBytes.Add(\n                    (byte)\n\t\t\t\t\t((((int) MessageType) << 4) \n\t\t\t\t\t\t+ ControlPacketFlag [(int)MessageType]\t\t\t// ADD by HDKNR\n\t\t\t\t\t\t+ ((Duplicate ? 1 : 0) << 3) + (((int) Qos) << 1) + (Retain ? 1 : 0)));\n                headerBytes.AddRange(GetRemainingLengthBytes());\n                return headerBytes;\n            }\n        }\n~~~        \n\n- \u3053\u308c\u3067rabbitmq-mqtt\u306b\u63a5\u7d9a\u5f8c\u3001Python\u306ePaho\u306e\u30d1\u30d6\u30ea\u30c3\u30b7\u30e3\u30fc\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3082\u3089\u3048\u305f\n- \u30d5\u30a9\u30fc\u30af\u3057\u3066\u30d7\u30ed\u30c8\u30b3\u30eb\u30ec\u30d9\u30eb4\u3067\u52d5\u4f5c\u78ba\u8a8d\u5fc5\u8981\n", "tags": ["mqtt"]}