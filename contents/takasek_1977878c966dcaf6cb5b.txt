{"tags": ["Swift", "swift3"], "context": "\u3053\u3093\u3070\u3093\u306f\u3001\u30af\u30ea\u30b9\u30de\u30b9\u307e\u3067\u3042\u30683\u65e5\u3067\u3059\u306d\u3002\n\u2026\u3002\n\u3059\u307f\u307e\u305b\u3093\u3001\u5927\u9045\u523b\u3057\u307e\u3057\u305f\u3002Swift\u611b\u597d\u4f1a Advent Calendar 201622\u65e5\u76ee\u306e\u6295\u7a3f\u3067\u3059\u3002\n\n\u524d\u7f6e\u304d: SE-0116(id-as-any)\u3068\u306f\nSwift2\u2192Swift3\u306b\u79fb\u884c\u3057\u3066\u3001\u7279\u306bFoundation\u3092\u5229\u7528\u3059\u308b\u969b\u306b\u5927\u304d\u306a\u5909\u66f4\u3092\u611f\u3058\u308b\u306e\u304c\u3001\u5f15\u6570\u306e\u578b\u304c AnyObject \u304b\u3089 Any \u306b\u5909\u308f\u3063\u305f\u70b9\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3053\u306e\u5909\u66f4\u304c\u4f55\u6545\u5fc5\u8981\u3060\u3063\u305f\u306e\u304b\n\u3069\u3046\u3044\u3046\u4ed5\u69d8\u306a\u306e\u304b\n\n\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306eSwift Evolution\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\nswift-evolution/0116-id-as-any.md at master \u00b7 apple/swift-evolution\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md\n\u4ee5\u524d\u3001\u81ea\u5206\u306f\u3053\u3053\u3089\u3078\u3093\u3092\u8aad\u307f\u89e3\u3044\u3066\u65e5\u672c\u8a9e\u30b9\u30e9\u30a4\u30c9\u306b\u3057\u307e\u3057\u305f\u3002\n5\u5206\u3067\u308f\u304b\u308bSE-0116(id-as-any) // Speaker Deck\nhttps://speakerdeck.com/takasek/5fen-dewakaruse-0116-id-as-any\n\u306a\u304a\u3001\u3053\u306e\u30b9\u30e9\u30a4\u30c9\u306fSwift\u611b\u597d\u4f1a vol12\u3067\u3082\u98db\u3073\u5165\u308a\u3067\u767a\u8868\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u8a71\u306e\u6d41\u308c\u6b21\u7b2c\u3067\u3001\u98db\u3073\u5165\u308a\u3067\u305d\u3046\u3044\u3046\u3053\u3068\u3082\u3067\u304d\u3061\u3083\u3046\u306e\u304c\u3001\u3053\u306e\u52c9\u5f37\u4f1a\u306e\u9b45\u529b\u3067\u3059\u306d\uff01\n\u3068Advent Calendar\u4e3b\u50ac\u306b\u3061\u306a\u3093\u3060\u30c0\u30a4\u30de\u3092\u3057\u3064\u3064\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001 as AnyObject \u306e\u6642\u306b\u4f55\u304c\u8d77\u3053\u308b\u306e\u304b\u3092\u3001\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u3068\u3068\u3082\u306b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\nas AnyObject \u306f\u5024\u578b\u3092boxing\u3059\u308b\n\u307e\u305a\u57fa\u672c\u306ebridge\u306e\u6a5f\u80fd\u3002\n\u5024\u578b\u5909\u6570\u306f\u3001 as AnyObject \u306e\u6642\u70b9\u3067class\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092boxing\u3068\u3044\u3044\u307e\u3059\u3002\ndo {\n    let value = 1\n    let a = value as AnyObject\n    let b = a\n\n    a === b //true\n    //as AnyObject\u3059\u308b\u3068\u3001class\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306bboxing\u3055\u308c\u308b\u306e\u3067\u3001 === \u306b\u3088\u308b\u540c\u4e00\u6027\u6bd4\u8f03\u304c\u53ef\u80fd\n}\n\n\u306a\u304a\u3001 as AnyObject \u306e\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u7570\u306a\u308c\u3070\u3001boxing\u3055\u308c\u308bclass\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u5225\u7269\u306b\u306a\u308a\u307e\u3059\u3002\ndo {\n    let value = 1\n    let a = value as AnyObject\n    let b = value as AnyObject\n\n    a === b //false\n}\n\n\n\u3082\u3046\u3061\u3087\u3044\u7d30\u304b\u3044 as AnyObject \u306e\u8a73\u7d30\u8a2d\u8a08\nas AnyObject \u306f\u3001Swift Evolution\u306b\u3088\u308c\u3070\u3001\n\n\n\u30af\u30e9\u30b9\u578b \u306e\u5834\u5408\u3001\u4f55\u3082\u3057\u306a\u3044\u3002\n\nBridged value types (String, Array, Dictionary, Set, etc\u306e\u3053\u3068)\u306e\u5834\u5408\u3001\n\n\n\u65e2\u5b58\u306e _ObjectiveCBridgeable \u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u6d41\u7528\nSE-0116\u3067\u306f\u30ce\u30fc\u30bf\u30c3\u30c1\n\n\n\uff08\u3051\u3069\u3001\u5c06\u6765\u7684\u306b\u306f\u3082\u3063\u3068\u591a\u304f\u306e\u578b\u3092bridgeable\u306b\u3057\u305f\u3044\uff09\n\n\n\n\n\n\u305d\u306e\u4ed6\u306e\u5024\u578b\u306e\u5834\u5408\u3001immutable\u306aclass\u3067boxing\u3059\u308b\n\n\n\u5143\u306e\u5024\u578b\u306b\u623b\u305b\u308b\u306a\u3089\u3001\u5185\u90e8\u5b9f\u88c5\u3092\u5916\u306b\u898b\u305b\u308b\u5fc5\u8981\u306f\u306a\u3044\n\n\n\n\u3068\u3044\u3046\u6319\u52d5\u306b\u306a\u3063\u3066\u3044\u308b\u305d\u3046\u3067\u3059\u3002\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u30af\u30e9\u30b9\u578b \u306e\u5834\u5408\u3001\u4f55\u3082\u3057\u306a\u3044\u3002\ndo {\n    class C {}\n    let c = C() // (C #1)\n    let bridgedC = c as AnyObject // (C #1)\n\n    c === bridgedC //true\n}\n\n\u5143\u306e c \u3068\u3001\u305d\u308c\u3092 as AnyObject \u306b\u3057\u305f bridgedC \u304c\u540c\u4e00\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u306d\u3002\n\nBridged value types\u306e\u30d6\u30ea\u30c3\u30b8\u306f\u3001\u65e2\u5b58\u306e _ObjectiveCBridgeable \u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u6d41\u7528\n_ObjectiveCBridgeable \u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u3064\u3044\u3066\u306f\u3001@es_kumagai\u3055\u3093\u306b\u3088\u308b\u4ee5\u4e0b\u306eQiita\u8a18\u4e8b\u304c\u8a73\u3057\u3044\u3067\u3059\u3002\nObjective-C Bridge \u306e\u4ed5\u7d44\u3068\u305d\u3053\u304b\u3089\u611f\u3058\u305f\u3053\u3068 - Qiita\nhttp://qiita.com/es_kumagai/items/bc154ee0a8a842e3b3ca\n\u8a18\u4e8b\u4e2d\u306b\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u306e\u306fSwift2\u6642\u4ee3\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u3001\u6700\u65b0\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\nhttps://github.com/apple/swift/blob/master/stdlib/public/core/BridgeObjectiveC.swift\npublic protocol _ObjectiveCBridgeable {\n  associatedtype _ObjectiveCType : AnyObject\n\n  func _bridgeToObjectiveC() -> _ObjectiveCType\n\n  static func _forceBridgeFromObjectiveC(\n    _ source: _ObjectiveCType,\n    result: inout Self?\n  )\n\n  @discardableResult\n  static func _conditionallyBridgeFromObjectiveC(\n    _ source: _ObjectiveCType,\n    result: inout Self?\n  ) -> Bool\n\n  static func _unconditionallyBridgeFromObjectiveC(_ source: _ObjectiveCType?)\n      -> Self\n}\n\n\u3053\u308c\u3089\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u5834\u5408\u3001 as AnyObject \u3057\u305f\u5834\u5408\u306b\u3001\u9069\u5207\u306a\u578b\u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002\ndo {\n    let anyNum = 1 as AnyObject\n\n    type(of: anyNum) //_SwiftTypePreservingNSNumber.Type\n}\n\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001\u4e00\u5ea6\u5024\u578b\u3078\u3068\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u305f\u5834\u5408\u306f\u3001boxing\u306f\u89e3\u9664\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\ndo {\n    let value = 1 as AnyObject\n    let a = value\n    let b = value as Any as AnyObject // Any\u306a\u3089NSNumber\u306e\u307e\u307e\u306a\u3093\u3060\u3051\u3069\u3001\n\n    a === b //true\n}\n\ndo {\n    let value = 1 as AnyObject\n    let a = value\n    let b = value as Int as AnyObject // as Int\u3060\u3068boxing\u304c\u89e3\u9664\u3055\u308c\u3066Int\u578b\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u2026\n\n    a === b //false\n}\n\n\n\u3068\u3053\u308d\u3067\u3001 _SwiftTypePreservingNSNumber \u3063\u3066\uff1f\nNSNumber\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3060\u305d\u3046\u3067\u3059\u3002\nNSNumber\u3060\u3068\u5b9f\u969b\u306e\u6570\u5024\u578b\u3092\u899a\u3048\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3061\u3083\u3093\u3068\u30d6\u30ea\u30c3\u30b8\u3067\u304d\u308b\u3088\u3046\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u578b\u3092\u4fdd\u6301\u3057\u3066dynamic cast\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3082\u306e \u2026\u3089\u3057\u3044\u3002\nproposal:\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md\nimplementation:\nhttps://github.com/apple/swift/blob/master/stdlib/public/SDK/Foundation/TypePreservingNSNumber.mm\ndo {\n    let anyNum = 1 as AnyObject\n    let nsNumFromLiteral = 1 as NSNumber\n\n    type(of: anyNum) //_SwiftTypePreservingNSNumber.Type\n    type(of: nsNumFromLiteral) //__NSCFNumber.Type\n}\n\n\n\u3055\u3089\u306b\u8131\u7dda\u3002\n\u3061\u306a\u307f\u306b\u3001NSNumber\u3078\u306e\u5909\u63db\u6642\u306b\u3001\u305d\u308c\u304cInt\u578b\u304b\u3001\u30ea\u30c6\u30e9\u30eb\u304b\u3001\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3092\u901a\u3057\u3066\u3044\u308b\u304b\u3001\u306a\u3069\u3067\u578b\u304c\u5fae\u5999\u306b\u9055\u3063\u305f\u308a\u3082\u3057\u307e\u3059\u3002\ndo {\n    let nsNumFromLiteral = 1 as NSNumber\n    let nsNumFromIntLiteralInitializer = NSNumber(integerLiteral: 1)\n\n    let intOne: Int = 1\n    let nsNumFromInt = intOne as NSNumber\n\n    let anyNum = 1 as AnyObject\n\n    type(of: nsNumFromLiteral) //__NSCFNumber.Type\n    type(of: nsNumFromIntLiteralInitializer) //__NSCFNumber.Type\n\n    type(of: nsNumFromInt) //_SwiftTypePreservingNSNumber.Type\n    type(of: anyNum) //_SwiftTypePreservingNSNumber.Type\n}\n\n__NSCFNumber \u306f\u6570\u5024\u30ea\u30c6\u30e9\u30eb\u304b\u3089\u306e\u30d6\u30ea\u30c3\u30b8\u3001\u3042\u308b\u3044\u306fNSNumber.init\u3092\u901a\u3057\u305f\u5834\u5408\u306b\u4f7f\u308f\u308c\u308b\u578b\u3002\n\u3042\u3068\u3001 __NSCFBoolean \u306f\u771f\u507d\u5024\u306e\u8868\u73fe\u3067\u3001 Swift.Bool \u3092 as AnyObject \u3057\u305f\u3068\u304d\u306b\u306f _SwiftTypePreservingNSNumber \u3067\u306f\u306a\u304f\u3066\u3053\u3063\u3061\u304c\u4f7f\u308f\u308c\u305f\u308a\u3059\u308b\u2026\u307f\u305f\u3044\u306a\u8a71\u3082\u3042\u308b\u3093\u3060\u3051\u3069\u3001\u305d\u3053\u3089\u3078\u3093\u306e\u6df1\u6398\u308a\u306f\u3001\u307e\u3042\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3002\n\u2026\u8131\u7dda\u3057\u3059\u304e\u307e\u3057\u305f\u3002\u305d\u308d\u305d\u308d\u672c\u7b4b\u306b\u623b\u308a\u307e\u3057\u3087\u3046\u3002\n\n\u305d\u306e\u4ed6\u306e\u5024\u578b\u306e\u5834\u5408\u3001immutable\u306aclass\u3067boxing\u3059\u308b\n\u3053\u3053\u307e\u3067\u3001\u30af\u30e9\u30b9\u578b \u3068 Bridged value types \u306b\u3064\u3044\u3066\u3001 as AnyObject \u3057\u305f\u3068\u304d\u306b\u4f55\u304c\u8d77\u3053\u308b\u304b\u3092\u78ba\u8a8d\u3057\u305f\u3068\u3053\u308d\u3067\u3057\u305f\u306d\u3002\u6700\u5f8c\u306b\u3001 \u305d\u306e\u4ed6\u306e\u5024\u578b\u306b\u3064\u3044\u3066\u78ba\u8a8d\u3057\u307e\u3059\u3002\ndo {\n    struct S {}\n    let s = S() //(S #1)\n    let bridgesS = s as AnyObject //(S #1)()\n\n    type(of: s) //(S #1).Type\n    type(of: bridgesS) //_SwiftValue.Type\n}\n\n_SwiftValue \u3068\u304b\u3044\u3046\u5974\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\nhttps://github.com/apple/swift/blob/master/stdlib/public/runtime/SwiftValue.h\n\n// _SwiftValue is an Objective-C class, but we shouldn't interface with it\n// directly as such. Keep the type opaque.\n#if __OBJC__\n@class _SwiftValue;\n#else\ntypedef struct _SwiftValue _SwiftValue;\n#endif\n\nnamespace swift {\n\n/// Bridge a Swift value to an Objective-C object by boxing it as a _SwiftValue.\n_SwiftValue *bridgeAnythingToSwiftValueObject(OpaqueValue *src,\n                                              const Metadata *srcType,\n                                              bool consume);\n\n/// Get the type metadata for a value in a Swift box.\nconst Metadata *getSwiftValueTypeMetadata(_SwiftValue *v);\n\n/// Get the value out of a Swift box along with its type metadata. The value\n/// inside the box is immutable and must not be modified or taken from the box.\nstd::pair<const Metadata *, const OpaqueValue *>\ngetValueFromSwiftValue(_SwiftValue *v);\n\n/// Return the object reference as a _SwiftValue* if it is a _SwiftValue instance,\n/// or nil if it is not.\n_SwiftValue *getAsSwiftValue(id object);\n\n/// Find conformances for SwiftValue to the given list of protocols.\n///\n/// Returns true if SwiftValue does conform to all the protocols.\nbool findSwiftValueConformances(const ProtocolDescriptorList &protocols,\n                                const WitnessTable **tablesBuffer);\n\n} // namespace swift\n\n\u30b3\u30e1\u30f3\u30c8\u306b\u3081\u3063\u3061\u3083\u66f8\u304b\u308c\u3066\u3044\u308b\u901a\u308a\u3001 _SwiftValue \u306f\u76f4\u63a5\u53d6\u308a\u6271\u3046\u3079\u304d\u3082\u306e\u3067\u306f\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\u307e\u3042\u3001Swift\u306e\u4e16\u754c\u3060\u3051\u3067\u5b8c\u7d50\u3067\u304d\u308b\u306a\u3089Obj-C\u3067\u306e\u5b9f\u88c5\u306e\u8a73\u7d30\u306a\u3093\u3066\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306a\u3044\u3057\u3001\u3082\u3057\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306a\u3089 _ObjectiveCBridgeable \u306b\u9069\u5408\u3055\u305b\u308c\u3070\u3044\u3044\u3002\n\u3068\u306a\u308c\u3070\u3001 _SwiftValue \u306f\u672c\u5f53\u306b\u305f\u3060\u306eboxing\u306e\u4ed5\u7d44\u307f\u3055\u3048\u63d0\u4f9b\u3057\u3066\u3044\u308c\u3070\u3044\u3044\u3063\u3066\u308f\u3051\u3067\u3059\u306d\u3002\n\n\u307e\u3068\u3081\n\u4ee5\u4e0a\u3001 as AnyObject \u3067\u3069\u306e\u3088\u3046\u306bboxing\u304c\u8d77\u3053\u308b\u304b\u306b\u3064\u3044\u3066\u898b\u3066\u304d\u307e\u3057\u305f\u3002\nXcode8 Release Note\u3092\u898b\u308b\u3068\u3001 AnyObject\u5468\u308a\u306e\u5b9f\u88c5\u306f\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u305f\u3073\u306b\u3061\u3087\u304f\u3061\u3087\u304f\u8abf\u6574\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u4eca\u5f8c\u306e\u52d5\u5411\u306b\u3082\u6ce8\u76ee\u3067\u3059\u3002\n\u3053\u3093\u3070\u3093\u306f\u3001\u30af\u30ea\u30b9\u30de\u30b9\u307e\u3067\u3042\u30683\u65e5\u3067\u3059\u306d\u3002\n\u2026\u3002\n\n\u3059\u307f\u307e\u305b\u3093\u3001\u5927\u9045\u523b\u3057\u307e\u3057\u305f\u3002[Swift\u611b\u597d\u4f1a Advent Calendar 2016](http://qiita.com/advent-calendar/2016/love_swift)22\u65e5\u76ee\u306e\u6295\u7a3f\u3067\u3059\u3002\n\n\n# \u524d\u7f6e\u304d: SE-0116(id-as-any)\u3068\u306f\n\nSwift2\u2192Swift3\u306b\u79fb\u884c\u3057\u3066\u3001\u7279\u306bFoundation\u3092\u5229\u7528\u3059\u308b\u969b\u306b\u5927\u304d\u306a\u5909\u66f4\u3092\u611f\u3058\u308b\u306e\u304c\u3001\u5f15\u6570\u306e\u578b\u304c `AnyObject` \u304b\u3089 `Any` \u306b\u5909\u308f\u3063\u305f\u70b9\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n- \u3053\u306e\u5909\u66f4\u304c\u4f55\u6545\u5fc5\u8981\u3060\u3063\u305f\u306e\u304b\n- \u3069\u3046\u3044\u3046\u4ed5\u69d8\u306a\u306e\u304b\n\n\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306eSwift Evolution\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\nswift-evolution/0116-id-as-any.md at master \u00b7 apple/swift-evolution\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0116-id-as-any.md\n\n\u4ee5\u524d\u3001\u81ea\u5206\u306f\u3053\u3053\u3089\u3078\u3093\u3092\u8aad\u307f\u89e3\u3044\u3066\u65e5\u672c\u8a9e\u30b9\u30e9\u30a4\u30c9\u306b\u3057\u307e\u3057\u305f\u3002\n\n5\u5206\u3067\u308f\u304b\u308bSE-0116(id-as-any) // Speaker Deck\nhttps://speakerdeck.com/takasek/5fen-dewakaruse-0116-id-as-any\n\n\u306a\u304a\u3001\u3053\u306e\u30b9\u30e9\u30a4\u30c9\u306f[Swift\u611b\u597d\u4f1a vol12](https://love-swift.connpass.com/event/41463/)\u3067\u3082\u98db\u3073\u5165\u308a\u3067\u767a\u8868\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u8a71\u306e\u6d41\u308c\u6b21\u7b2c\u3067\u3001\u98db\u3073\u5165\u308a\u3067\u305d\u3046\u3044\u3046\u3053\u3068\u3082\u3067\u304d\u3061\u3083\u3046\u306e\u304c\u3001\u3053\u306e\u52c9\u5f37\u4f1a\u306e\u9b45\u529b\u3067\u3059\u306d\uff01\n\u3068Advent Calendar\u4e3b\u50ac\u306b\u3061\u306a\u3093\u3060\u30c0\u30a4\u30de\u3092\u3057\u3064\u3064\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001 `as AnyObject` \u306e\u6642\u306b\u4f55\u304c\u8d77\u3053\u308b\u306e\u304b\u3092\u3001\u5177\u4f53\u7684\u306a\u30b3\u30fc\u30c9\u3068\u3068\u3082\u306b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\n# `as AnyObject` \u306f\u5024\u578b\u3092boxing\u3059\u308b\n\n\u307e\u305a\u57fa\u672c\u306ebridge\u306e\u6a5f\u80fd\u3002\n\u5024\u578b\u5909\u6570\u306f\u3001 `as AnyObject` \u306e\u6642\u70b9\u3067class\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u3092boxing\u3068\u3044\u3044\u307e\u3059\u3002\n\n```swift\ndo {\n    let value = 1\n    let a = value as AnyObject\n    let b = a\n\n    a === b //true\n    //as AnyObject\u3059\u308b\u3068\u3001class\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306bboxing\u3055\u308c\u308b\u306e\u3067\u3001 === \u306b\u3088\u308b\u540c\u4e00\u6027\u6bd4\u8f03\u304c\u53ef\u80fd\n}\n```\n\n\u306a\u304a\u3001 `as AnyObject` \u306e\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u7570\u306a\u308c\u3070\u3001boxing\u3055\u308c\u308bclass\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u5225\u7269\u306b\u306a\u308a\u307e\u3059\u3002\n\n```swift\ndo {\n    let value = 1\n    let a = value as AnyObject\n    let b = value as AnyObject\n\n    a === b //false\n}\n```\n\n# \u3082\u3046\u3061\u3087\u3044\u7d30\u304b\u3044 `as AnyObject` \u306e\u8a73\u7d30\u8a2d\u8a08\n\n`as AnyObject` \u306f\u3001Swift Evolution\u306b\u3088\u308c\u3070\u3001\n\n- **\u30af\u30e9\u30b9\u578b** \u306e\u5834\u5408\u3001\u4f55\u3082\u3057\u306a\u3044\u3002\n- **Bridged value types** <sub>(String, Array, Dictionary, Set, etc\u306e\u3053\u3068)</sub>\u306e\u5834\u5408\u3001\n    - \u65e2\u5b58\u306e `_ObjectiveCBridgeable` \u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u6d41\u7528\n    - SE-0116\u3067\u306f\u30ce\u30fc\u30bf\u30c3\u30c1\n        - \uff08\u3051\u3069\u3001\u5c06\u6765\u7684\u306b\u306f\u3082\u3063\u3068\u591a\u304f\u306e\u578b\u3092bridgeable\u306b\u3057\u305f\u3044\uff09\n- **\u305d\u306e\u4ed6\u306e\u5024\u578b**\u306e\u5834\u5408\u3001immutable\u306aclass\u3067boxing\u3059\u308b\n    - \u5143\u306e\u5024\u578b\u306b\u623b\u305b\u308b\u306a\u3089\u3001\u5185\u90e8\u5b9f\u88c5\u3092\u5916\u306b\u898b\u305b\u308b\u5fc5\u8981\u306f\u306a\u3044\n\n\u3068\u3044\u3046\u6319\u52d5\u306b\u306a\u3063\u3066\u3044\u308b\u305d\u3046\u3067\u3059\u3002\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n## **\u30af\u30e9\u30b9\u578b** \u306e\u5834\u5408\u3001\u4f55\u3082\u3057\u306a\u3044\u3002\n\n```swift\ndo {\n    class C {}\n    let c = C() // (C #1)\n    let bridgedC = c as AnyObject // (C #1)\n\n    c === bridgedC //true\n}\n```\n\n\u5143\u306e `c` \u3068\u3001\u305d\u308c\u3092 `as AnyObject` \u306b\u3057\u305f `bridgedC` \u304c\u540c\u4e00\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306a\u306e\u304c\u5206\u304b\u308a\u307e\u3059\u306d\u3002\n\n## **Bridged value types**\u306e\u30d6\u30ea\u30c3\u30b8\u306f\u3001\u65e2\u5b58\u306e `_ObjectiveCBridgeable` \u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u6d41\u7528\n\n`_ObjectiveCBridgeable` \u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u3064\u3044\u3066\u306f\u3001@es_kumagai\u3055\u3093\u306b\u3088\u308b\u4ee5\u4e0b\u306eQiita\u8a18\u4e8b\u304c\u8a73\u3057\u3044\u3067\u3059\u3002\n\nObjective-C Bridge \u306e\u4ed5\u7d44\u3068\u305d\u3053\u304b\u3089\u611f\u3058\u305f\u3053\u3068 - Qiita\nhttp://qiita.com/es_kumagai/items/bc154ee0a8a842e3b3ca\n\n\u8a18\u4e8b\u4e2d\u306b\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u306e\u306fSwift2\u6642\u4ee3\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u3001\u6700\u65b0\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\nhttps://github.com/apple/swift/blob/master/stdlib/public/core/BridgeObjectiveC.swift\n\n```swift\npublic protocol _ObjectiveCBridgeable {\n  associatedtype _ObjectiveCType : AnyObject\n\n  func _bridgeToObjectiveC() -> _ObjectiveCType\n\n  static func _forceBridgeFromObjectiveC(\n    _ source: _ObjectiveCType,\n    result: inout Self?\n  )\n\n  @discardableResult\n  static func _conditionallyBridgeFromObjectiveC(\n    _ source: _ObjectiveCType,\n    result: inout Self?\n  ) -> Bool\n\n  static func _unconditionallyBridgeFromObjectiveC(_ source: _ObjectiveCType?)\n      -> Self\n}\n```\n\n\u3053\u308c\u3089\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u5834\u5408\u3001 `as AnyObject` \u3057\u305f\u5834\u5408\u306b\u3001\u9069\u5207\u306a\u578b\u304c\u9078\u629e\u3055\u308c\u307e\u3059\u3002\n\n\n```swift\ndo {\n    let anyNum = 1 as AnyObject\n\n    type(of: anyNum) //_SwiftTypePreservingNSNumber.Type\n}\n```\n\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001\u4e00\u5ea6\u5024\u578b\u3078\u3068\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u305f\u5834\u5408\u306f\u3001boxing\u306f\u89e3\u9664\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n```swift\ndo {\n    let value = 1 as AnyObject\n    let a = value\n    let b = value as Any as AnyObject // Any\u306a\u3089NSNumber\u306e\u307e\u307e\u306a\u3093\u3060\u3051\u3069\u3001\n\n    a === b //true\n}\n\ndo {\n    let value = 1 as AnyObject\n    let a = value\n    let b = value as Int as AnyObject // as Int\u3060\u3068boxing\u304c\u89e3\u9664\u3055\u308c\u3066Int\u578b\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u2026\n\n    a === b //false\n}\n```\n\n\n### \u3068\u3053\u308d\u3067\u3001 `_SwiftTypePreservingNSNumber` \u3063\u3066\uff1f\n\nNSNumber\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3060\u305d\u3046\u3067\u3059\u3002\nNSNumber\u3060\u3068\u5b9f\u969b\u306e\u6570\u5024\u578b\u3092\u899a\u3048\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3061\u3083\u3093\u3068\u30d6\u30ea\u30c3\u30b8\u3067\u304d\u308b\u3088\u3046\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u578b\u3092\u4fdd\u6301\u3057\u3066dynamic cast\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3082\u306e \u2026\u3089\u3057\u3044\u3002\n\nproposal:\nhttps://github.com/apple/swift-evolution/blob/master/proposals/0139-bridge-nsnumber-and-nsvalue.md\n\nimplementation:\nhttps://github.com/apple/swift/blob/master/stdlib/public/SDK/Foundation/TypePreservingNSNumber.mm\n\n\n\n```swift\ndo {\n    let anyNum = 1 as AnyObject\n    let nsNumFromLiteral = 1 as NSNumber\n\n    type(of: anyNum) //_SwiftTypePreservingNSNumber.Type\n    type(of: nsNumFromLiteral) //__NSCFNumber.Type\n}\n```\n\n#### \u3055\u3089\u306b\u8131\u7dda\u3002\n\n\u3061\u306a\u307f\u306b\u3001NSNumber\u3078\u306e\u5909\u63db\u6642\u306b\u3001\u305d\u308c\u304cInt\u578b\u304b\u3001\u30ea\u30c6\u30e9\u30eb\u304b\u3001\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3092\u901a\u3057\u3066\u3044\u308b\u304b\u3001\u306a\u3069\u3067\u578b\u304c\u5fae\u5999\u306b\u9055\u3063\u305f\u308a\u3082\u3057\u307e\u3059\u3002\n\n```swift\ndo {\n    let nsNumFromLiteral = 1 as NSNumber\n    let nsNumFromIntLiteralInitializer = NSNumber(integerLiteral: 1)\n\n    let intOne: Int = 1\n    let nsNumFromInt = intOne as NSNumber\n\n    let anyNum = 1 as AnyObject\n\n    type(of: nsNumFromLiteral) //__NSCFNumber.Type\n    type(of: nsNumFromIntLiteralInitializer) //__NSCFNumber.Type\n\n    type(of: nsNumFromInt) //_SwiftTypePreservingNSNumber.Type\n    type(of: anyNum) //_SwiftTypePreservingNSNumber.Type\n}\n```\n\n`__NSCFNumber` \u306f\u6570\u5024\u30ea\u30c6\u30e9\u30eb\u304b\u3089\u306e\u30d6\u30ea\u30c3\u30b8\u3001\u3042\u308b\u3044\u306fNSNumber.init\u3092\u901a\u3057\u305f\u5834\u5408\u306b\u4f7f\u308f\u308c\u308b\u578b\u3002\n\u3042\u3068\u3001 `__NSCFBoolean` \u306f\u771f\u507d\u5024\u306e\u8868\u73fe\u3067\u3001 `Swift.Bool` \u3092 `as AnyObject` \u3057\u305f\u3068\u304d\u306b\u306f `_SwiftTypePreservingNSNumber` \u3067\u306f\u306a\u304f\u3066\u3053\u3063\u3061\u304c\u4f7f\u308f\u308c\u305f\u308a\u3059\u308b\u2026\u307f\u305f\u3044\u306a\u8a71\u3082\u3042\u308b\u3093\u3060\u3051\u3069\u3001\u305d\u3053\u3089\u3078\u3093\u306e\u6df1\u6398\u308a\u306f\u3001\u307e\u3042\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3002\n\n\u2026\u8131\u7dda\u3057\u3059\u304e\u307e\u3057\u305f\u3002\u305d\u308d\u305d\u308d\u672c\u7b4b\u306b\u623b\u308a\u307e\u3057\u3087\u3046\u3002\n\n## **\u305d\u306e\u4ed6\u306e\u5024\u578b**\u306e\u5834\u5408\u3001immutable\u306aclass\u3067boxing\u3059\u308b\n\n\u3053\u3053\u307e\u3067\u3001**\u30af\u30e9\u30b9\u578b** \u3068 **Bridged value types** \u306b\u3064\u3044\u3066\u3001 `as AnyObject` \u3057\u305f\u3068\u304d\u306b\u4f55\u304c\u8d77\u3053\u308b\u304b\u3092\u78ba\u8a8d\u3057\u305f\u3068\u3053\u308d\u3067\u3057\u305f\u306d\u3002\u6700\u5f8c\u306b\u3001 **\u305d\u306e\u4ed6\u306e\u5024\u578b**\u306b\u3064\u3044\u3066\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```swift\ndo {\n    struct S {}\n    let s = S() //(S #1)\n    let bridgesS = s as AnyObject //(S #1)()\n\n    type(of: s) //(S #1).Type\n    type(of: bridgesS) //_SwiftValue.Type\n}\n```\n\n`_SwiftValue` \u3068\u304b\u3044\u3046\u5974\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\nhttps://github.com/apple/swift/blob/master/stdlib/public/runtime/SwiftValue.h\n\n```objc\n\n// _SwiftValue is an Objective-C class, but we shouldn't interface with it\n// directly as such. Keep the type opaque.\n#if __OBJC__\n@class _SwiftValue;\n#else\ntypedef struct _SwiftValue _SwiftValue;\n#endif\n\nnamespace swift {\n\n/// Bridge a Swift value to an Objective-C object by boxing it as a _SwiftValue.\n_SwiftValue *bridgeAnythingToSwiftValueObject(OpaqueValue *src,\n                                              const Metadata *srcType,\n                                              bool consume);\n\n/// Get the type metadata for a value in a Swift box.\nconst Metadata *getSwiftValueTypeMetadata(_SwiftValue *v);\n\n/// Get the value out of a Swift box along with its type metadata. The value\n/// inside the box is immutable and must not be modified or taken from the box.\nstd::pair<const Metadata *, const OpaqueValue *>\ngetValueFromSwiftValue(_SwiftValue *v);\n\n/// Return the object reference as a _SwiftValue* if it is a _SwiftValue instance,\n/// or nil if it is not.\n_SwiftValue *getAsSwiftValue(id object);\n\n/// Find conformances for SwiftValue to the given list of protocols.\n///\n/// Returns true if SwiftValue does conform to all the protocols.\nbool findSwiftValueConformances(const ProtocolDescriptorList &protocols,\n                                const WitnessTable **tablesBuffer);\n\n} // namespace swift\n```\n\n\u30b3\u30e1\u30f3\u30c8\u306b\u3081\u3063\u3061\u3083\u66f8\u304b\u308c\u3066\u3044\u308b\u901a\u308a\u3001 `_SwiftValue` \u306f\u76f4\u63a5\u0010\u0010\u0010\u0010\u0010\u53d6\u308a\u6271\u3046\u3079\u304d\u3082\u306e\u3067\u306f\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n\u307e\u3042\u3001Swift\u306e\u4e16\u754c\u3060\u3051\u3067\u5b8c\u7d50\u3067\u304d\u308b\u306a\u3089Obj-C\u3067\u306e\u5b9f\u88c5\u306e\u8a73\u7d30\u306a\u3093\u3066\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306a\u3044\u3057\u3001\u3082\u3057\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306a\u3089 `_ObjectiveCBridgeable` \u306b\u9069\u5408\u3055\u305b\u308c\u3070\u3044\u3044\u3002\n\u3068\u306a\u308c\u3070\u3001 `_SwiftValue` \u306f\u672c\u5f53\u306b\u305f\u3060\u306eboxing\u306e\u4ed5\u7d44\u307f\u3055\u3048\u63d0\u4f9b\u3057\u3066\u3044\u308c\u3070\u3044\u3044\u3063\u3066\u308f\u3051\u3067\u3059\u306d\u3002\n\n# \u307e\u3068\u3081\n\n\u4ee5\u4e0a\u3001 `as AnyObject` \u3067\u3069\u306e\u3088\u3046\u306bboxing\u304c\u8d77\u3053\u308b\u304b\u306b\u3064\u3044\u3066\u898b\u3066\u304d\u307e\u3057\u305f\u3002\n[Xcode8 Release Note](https://developer.apple.com/library/content/releasenotes/DeveloperTools/RN-Xcode/Introduction.html)\u3092\u898b\u308b\u3068\u3001 AnyObject\u5468\u308a\u306e\u5b9f\u88c5\u306f\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306e\u305f\u3073\u306b\u3061\u3087\u304f\u3061\u3087\u304f\u8abf\u6574\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u4eca\u5f8c\u306e\u52d5\u5411\u306b\u3082\u6ce8\u76ee\u3067\u3059\u3002\n"}