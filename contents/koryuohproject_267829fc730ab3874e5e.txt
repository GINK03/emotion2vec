{"context": " More than 1 year has passed since last update.\u30b5\u30a4\u30b3\u30ed\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\n\u307e\u3060\u52d5\u4f5c\u306f\u672a\u78ba\u8a8d\u3001\u52d5\u304f\u304b\u306a\uff1f\nclass srd::ostream;\u8fba\u308a\u304c\u602a\u3057\u3044\u30fb\u30fb\u30fb\n\u5f8c\u51fa\u6765\u308c\u3070mEngine\u3092random_device\u3067\u521d\u671f\u5316\u3057\u305f\u3044\u3093\u3060\u3051\u3069\u3044\u3044\u6848\u306f\u7121\u3044\u304b\u30fb\u30fb\u30fb\n\u51fa\u6765\u308c\u3070\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30ba\u30ea\u30b9\u30c8\u3067\u3084\u308a\u305f\u3044\u306a\u30fc\u306a\u3093\u3066\n\u8ffd\u8a18\u3000\u521d\u671f\u5316\u3067\u304d\u305f\u306e\u3067\u305d\u306e\u3088\u3046\u306b\u4fee\u6b63\n\u30d8\u30c3\u30c0\u30fc\n\nDice.h\n#ifndef _DICE_H_\n#define _DICE_H_\n\n#include <random>\n#include <vector>\n\nnamespace std{\n    template<typename _Ty>\n    class  basic_ostream<_Ty>;\n}\n\nclass Dice{\npublic:\n    typedef typename std::vector<int> rollData_t;\n    Dice();\n    Dice(int num,int surface);\n    virtual ~Dice(){}\n\n    int roll();\n    int roll(std::ostream& ost);\n    int roll(int num,int surface);\n    rollData_t getRollData()const;\n    void setDice(int num,int surface);\nprivate:\n    int generate();\nprivate:\n    std::mt19937 mEngine;\n    std::uniform_int_distribution<int> mDistribution;\n    rollData_t mData;\n};\n#endif\n\n\ncpp\u30d5\u30a1\u30a4\u30eb\n\nDice.cpp\n#include \"Dice.h\"\n\n#include <algorithm>\n\nDice::Dice():\n    mEngine(std::random_device()),\n    mDistribution(1,6),\n    mData(1)\n{}\n\n\nDice::Dice(int num,int surface):\n    mEngine(std::random_device()),\n    mDistribution(1,surface),\n    mData(num)\n{}\n\n\nint Dice::generate(){\n    return mDistribution(mEngine);\n}\n\nint Dice::roll(){\n    std::for_each(mData.begin(),mData.end(),[&](int& elem){ return elem = generate();});\n    int sum=0;\n    std::for_each(mData.begin(),mData.end(),[&](const int elem){return sum+=elem;});\n    return sum;\n}\n\nint Dice::roll(std::ostream& ost){\n    int res = roll();\n    std::for_each(\n        mData.begin(),\n        mData.end(),\n        [&](int elem){ost<<\"[\"<<elem<<\"]\";});\n    return res;\n}\nint Dice::roll(int num,int surface){\n    int result = 0;\n    std::uniform_int_distribution<int> dist(1,surface);\n    for(int i=0;i<num;i++)\n        result+=dist(engine);\n    return result;\n}\n\n\nvoid Dice::setDice(int num,int surface){\n    mDistribution = std::uniform_int_distribution<int>(1,surface);\n    mData = rollData_t(num);\n}\n\n\nDice::rollData_t Dice::getRollData()const{\n    return mData;\n}\n\n\n\n\n\u30b5\u30a4\u30b3\u30ed\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\n\u307e\u3060\u52d5\u4f5c\u306f\u672a\u78ba\u8a8d\u3001\u52d5\u304f\u304b\u306a\uff1f\n\nclass srd::ostream;\u8fba\u308a\u304c\u602a\u3057\u3044\u30fb\u30fb\u30fb\n\n\u5f8c\u51fa\u6765\u308c\u3070mEngine\u3092random_device\u3067\u521d\u671f\u5316\u3057\u305f\u3044\u3093\u3060\u3051\u3069\u3044\u3044\u6848\u306f\u7121\u3044\u304b\u30fb\u30fb\u30fb\n\u51fa\u6765\u308c\u3070\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30ba\u30ea\u30b9\u30c8\u3067\u3084\u308a\u305f\u3044\u306a\u30fc\u306a\u3093\u3066\n\n\u8ffd\u8a18\u3000\u521d\u671f\u5316\u3067\u304d\u305f\u306e\u3067\u305d\u306e\u3088\u3046\u306b\u4fee\u6b63\n\n\u30d8\u30c3\u30c0\u30fc\n\n```cpp:Dice.h\n#ifndef _DICE_H_\n#define _DICE_H_\n\n#include <random>\n#include <vector>\n\nnamespace std{\n\ttemplate<typename _Ty>\n\tclass  basic_ostream<_Ty>;\n}\n\nclass Dice{\npublic:\n\ttypedef typename std::vector<int> rollData_t;\n\tDice();\n\tDice(int num,int surface);\n\tvirtual ~Dice(){}\n\t\n\tint roll();\n\tint roll(std::ostream& ost);\n\tint roll(int num,int surface);\n\trollData_t getRollData()const;\n\tvoid setDice(int num,int surface);\nprivate:\n\tint generate();\nprivate:\n\tstd::mt19937 mEngine;\n\tstd::uniform_int_distribution<int> mDistribution;\n\trollData_t mData;\n};\n#endif\n```\n\ncpp\u30d5\u30a1\u30a4\u30eb\n\n```cpp:Dice.cpp\n#include \"Dice.h\"\n\n#include <algorithm>\n\nDice::Dice():\n\tmEngine(std::random_device()),\n\tmDistribution(1,6),\n\tmData(1)\n{}\n\n\nDice::Dice(int num,int surface):\n\tmEngine(std::random_device()),\n\tmDistribution(1,surface),\n\tmData(num)\n{}\n\n\nint Dice::generate(){\n\treturn mDistribution(mEngine);\n}\n\nint Dice::roll(){\n\tstd::for_each(mData.begin(),mData.end(),[&](int& elem){ return elem = generate();});\n\tint sum=0;\n\tstd::for_each(mData.begin(),mData.end(),[&](const int elem){return sum+=elem;});\n\treturn sum;\n}\n\nint Dice::roll(std::ostream& ost){\n\tint res = roll();\n\tstd::for_each(\n\t\tmData.begin(),\n\t\tmData.end(),\n\t\t[&](int elem){ost<<\"[\"<<elem<<\"]\";});\n\treturn res;\n}\nint Dice::roll(int num,int surface){\n\tint result = 0;\n\tstd::uniform_int_distribution<int> dist(1,surface);\n\tfor(int i=0;i<num;i++)\n\t\tresult+=dist(engine);\n\treturn result;\n}\n\n\nvoid Dice::setDice(int num,int surface){\n\tmDistribution = std::uniform_int_distribution<int>(1,surface);\n\tmData = rollData_t(num);\n}\n\n\nDice::rollData_t Dice::getRollData()const{\n\treturn mData;\n}\n\n\n```\n\n", "tags": ["C++11", "C++"]}