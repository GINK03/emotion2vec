{"context": " More than 1 year has passed since last update.pandas \u306e to_excel \u3092\u4f7f\u3063\u3066\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u30a8\u30af\u30bb\u30eb\u306b\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\npandas.DataFrame.to_excel \u2014 pandas 0.15.1\ndocumentation\n\n\u307e\u305a\u306f\u3001\u5fc5\u8981\u306a Python \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30a4\u30f3\u30dd\u30fc\u30c8\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pandas.io import wb\nimport xlsxwriter\n\n\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\u4e16\u754c\u9280\u884c\u306e API \u3092\u4f7f\u3063\u3066\u3001\u30a2\u30e1\u30ea\u30ab\u3068\u65e5\u672c\u306e\u4eba\u53e3\u3068GDP\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002indicator \u6587\u5b57\u5217\u306f\u4e16\u754c\u9280\u884c\u306e API \u304b\u3089\u53d6\u5f97\u3057\u307e\u3059\u3002\ndf_gdp = wb.download(indicator='NY.GDP.PCAP.KD', country=['US', 'JP'], start=1960, end=2013)\ndf_population = wb.download(indicator='SP.POP.TOTL', country=['US', 'JP'], start=1960, end=2013)\n\n\n\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\ndf_gdp.head(3)\n\n\n\n\n\n\n\nNY.GDP.PCAP.KD\n\n\ncountry\nyear\n\n\n\n\n\nJapan\n2013\n 37432.840747\n\n\n2012\n 36800.922307\n\n\n2011\n 36203.430066\n\n\n\n\ndf_gdp.dtypes\n\nNY.GDP.PCAP.KD    float64\ndtype: object\ndf_gdp.index\n\nMultiIndex(levels=[['Japan', 'United States'], ['1960', '1961', '1962', '1963', '1964', '1965', '1966', '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975', '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993', '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013']],\n           labels=[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...], [53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, ...]],\n           names=['country', 'year'])\n\ndf_gdp.describe()\n\n\n\n\n\n\nNY.GDP.PCAP.KD\n\n\n\n\ncount\n   108.000000\n\n\nmean\n 28015.188967\n\n\nstd\n 10061.123534\n\n\nmin\n  7079.439251\n\n\n25%\n 20152.131354\n\n\n50%\n 28858.039661\n\n\n75%\n 35165.327764\n\n\nmax\n 45863.019564\n\n\n\n\nGDP \u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306f\uff1a\n\n\"country\" \u3068 \"year\" \u306e\u30de\u30eb\u30c1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\n108\u500b\u306e\u8981\u7d20\u304c\u3042\u308b\n\u6700\u5c0f\u5024\u306f 7079.439251\u3001\u6700\u5927\u5024\u306f 45863.019564 \u306b\u306a\u3063\u3066\u3044\u308b\n\u30c7\u30fc\u30bf\u306f\u6700\u65b0\u306e\u3082\u306e\u304b\u3089\u964d\u9806\u306b\u306a\u3063\u3066\u3044\u308b\n\n\u4eba\u53e3\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3082\u540c\u3058\u3088\u3046\u306a\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u3092\u6574\u5f62\n\u3053\u306e\u307e\u307e\u3067\u306f\u4f7f\u3044\u306b\u304f\u3044\u306e\u3067\u30c7\u30fc\u30bf\u3092\u6574\u5f62\u3057\u307e\u3059\u3002\ndf_gdp.unstack(level=0).head(3)\n\n\n\n\n\n\nNY.GDP.PCAP.KD\n\n\ncountry\nJapan\nUnited States\n\n\nyear\n\n\n\n\n\n\n1960\n 7079.439251\n 15469.072967\n\n\n1961\n 7728.000388\n 15564.690585\n\n\n1962\n 8338.409056\n 16262.092906\n\n\n\n\ndf_gdp.unstack(level=0).describe()\n\n\n\n\n\n\nNY.GDP.PCAP.KD\n\n\n\nJapan\nUnited States\n\n\n\n\ncount\n    54.000000\n    54.000000\n\n\nmean\n 25134.970999\n 30895.406935\n\n\nstd\n  9716.583553\n  9646.035006\n\n\nmin\n  7079.439251\n 15469.072967\n\n\n25%\n 17457.921985\n 22981.450242\n\n\n50%\n 26005.632842\n 30462.082595\n\n\n75%\n 33991.192095\n 40658.654684\n\n\nmax\n 37432.840747\n 45863.019564\n\n\n\n\ndf_gdp.unstack(level=0).plot(figsize=(16, 4), colormap='seismic')\n\n\n\u4eba\u53e3\u306e\u30c7\u30fc\u30bf\u3082\u540c\u69d8\u306b\u5909\u63db\u3057\u307e\u3059\u3002\ndf_population.unstack(level=0).head(3)\n\n\n\n\n\n\nSP.POP.TOTL\n\n\ncountry\nJapan\nUnited States\n\n\nyear\n\n\n\n\n\n\n1960\n 92500572\n 180671000\n\n\n1961\n 94943000\n 183691000\n\n\n1962\n 95832000\n 186538000\n\n\n\n\nax = df_population.unstack(level=0).plot(figsize=(16, 4), colormap='seismic')\n\n\n\uff15\u5e74\u306e\u79fb\u52d5\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u307f\u308b\u3068\u3001\u30a2\u30e1\u30ea\u30ab\u306f\u4eba\u53e3\u5897\u52a0\u3001\u65e5\u672c\u306f\u4eba\u53e3\u6a2a\u3070\u3044\u3067\u3042\u308b\u50be\u5411\u304c\u5c11\u3057\u30cf\u30c3\u30ad\u30ea\u3057\u307e\u3059\u3002\nax = pd.stats.moments.rolling_mean(df_population.unstack(level=0), 5).plot(figsize=(16, 4), colormap='seismic')\n\n\nax = pd.stats.moments.rolling_std(df_population.unstack(level=0)['SP.POP.TOTL'], 5).plot(figsize=(16, 4), colormap='seismic')\n\n\n\n\u30c7\u30fc\u30bf\u306e\u7d50\u5408\n\uff12\u3064\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7d50\u5408\u3057\u307e\u3059\u3002\npd.concat([df_gdp, df_population], axis=1).unstack(level=0).head(3)\n\n\n\n\n\n\nNY.GDP.PCAP.KD\nSP.POP.TOTL\n\n\ncountry\nJapan\nUnited States\nJapan\nUnited States\n\n\nyear\n\n\n\n\n\n\n\n\n1960\n 7079.439251\n 15469.072967\n 92500572\n 180671000\n\n\n1961\n 7728.000388\n 15564.690585\n 94943000\n 183691000\n\n\n1962\n 8338.409056\n 16262.092906\n 95832000\n 186538000\n\n\n\n\ndf = pd.concat([df_gdp, df_population], axis=1).unstack(level=0)\ndf.describe()\n\n\n\n\n\n\nNY.GDP.PCAP.KD\nSP.POP.TOTL\n\n\n\nJapan\nUnited States\nJapan\nUnited States\n\n\n\n\ncount\n    54.000000\n    54.000000\n 5.400000e+01\n 5.400000e+01\n\n\nmean\n 25134.970999\n 30895.406935\n 1.171442e+08\n 2.460156e+08\n\n\nstd\n  9716.583553\n  9646.035006\n 1.115320e+07\n 4.038823e+07\n\n\nmin\n  7079.439251\n 15469.072967\n 9.250057e+07\n 1.806710e+08\n\n\n25%\n 17457.921985\n 22981.450242\n 1.085998e+08\n 2.123952e+08\n\n\n50%\n 26005.632842\n 30462.082595\n 1.217915e+08\n 2.412110e+08\n\n\n75%\n 33991.192095\n 40658.654684\n 1.268150e+08\n 2.813818e+08\n\n\nmax\n 37432.840747\n 45863.019564\n 1.278173e+08\n 3.161288e+08\n\n\n\n\nGDP\u3092\u5de6\u8ef8\u3001\u4eba\u53e3\u3092\u53f3\u8ef8\u306b\u3057\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u3066\u307f\u307e\u3059\u3002\nax = df.plot(figsize=(16, 6), colormap='seismic',\n                 secondary_y=[('SP.POP.TOTL', 'Japan'), ('SP.POP.TOTL', 'United States')])\n    ax.set_ylabel('GDP')\n    _ = ax.right_ax.set_ylabel('Population')\n\n\n\u5358\u4e00\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\uff15\u5e74\u5358\u4f4d\u3067\u306e\u5206\u6563\u3092\u8a08\u7b97\u3059\u308b\u3068\u3001\u65e5\u672c\u306e\u4eba\u53e3\u306f1980\u5e74\u3054\u308d\u304b\u3089\u4f38\u3073\u60a9\u307f\u3001GDP\u306f1995\u5e74\u3054\u308d\u304b\u3089\u6a2a\u3070\u3044\u3068\u8a00\u3048\u307e\u3059\u3002\n\u30a2\u30e1\u30ea\u30ab\u306e\u5834\u5408\u306f\u30011990\u5e74\u3054\u308d\u306b\u4eba\u53e3\u5897\u52a0\u306e\u6ce2\u304c\u3042\u308a\u30012000\u5e74\u3054\u308d\u306bGDP\u306e\u5897\u52a0\u304c\u30d4\u30fc\u30af\u3092\u8fce\u3048\u3001\u5b9a\u671f\u7684\u306b\u6ce2\u304c\u3042\u308b\u3068\u8a00\u3048\u307e\u3059\u3002\nax = pd.stats.moments.rolling_var(df, 5).plot(subplots=True, layout=(2, 2), figsize=(16, 6))\n\n\n\n\u30c7\u30fc\u30bf\u306e\u51fa\u529b\n\u30a8\u30af\u30bb\u30eb\u306b\u51fa\u529b\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u304c\u3001xlsxwriter\n\u306a\u3069\u306e\u30a8\u30af\u30bb\u30eb\u66f8\u304d\u51fa\u3057\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\ndf.to_excel('/data/sample.xlsx', sheet_name='Japan_US')\n%ls /data\n\nsample.xlsx\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u30a8\u30af\u30bb\u30eb\u3067\u958b\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002LibreOffice \u306a\u3069\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u500b\u5225\u306e\u30b7\u30fc\u30c8\u306b\u66f8\u304d\u51fa\u3059\u5834\u5408\u306f\u3001\u5f15\u6570\u306b\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u306f\u306a\u304f\u30e9\u30a4\u30bf\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (ExcelWriter)\n\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u4f8b\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u8a73\u3057\u304f\u306f Stack Overflow \u306a\u3069\u3067\u63a2\u3057\u307e\u3057\u3087\u3046\u3002\n\npandas.DataFrame.to_excel \u2014 pandas 0.15.1\ndocumentation\ncreating multiple excel worksheets using data in a pandas dataframe - Stack\nOverflow\n\n\n\u52d5\u4f5c\u74b0\u5883\nversion_information \u62e1\u5f35\u3092\u6709\u52b9\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u52d5\u4f5c\u74b0\u5883\u306f\u4ee5\u4e0b\u306e\u3082\u306e\u3067\u3059\u3002\n%version_information numpy, pandas, matplotlib, xlsxwriter\n\n\n\nSoftware\nVersion\n\n\nPython\n3.4.2 64bit [GCC 4.9.1]\n\n\nIPython\n2.3.1\n\n\nOS\nLinux 3.13.0 24 generic x86_64 with debian 8.0\n\n\nnumpy\n1.9.1\n\n\npandas\n0.15.1\n\n\nmatplotlib\n1.4.2\n\n\nxlsxwriter\n0.6.4\n\nMon Dec 08 15:50:50 2014 UTC\n\n\u203b \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f IPython Notebook \u3092 Markdown \u306b\u5909\u63db\u3057\u3066\u5fae\u8abf\u6574\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n$ ipython nbconvert --to markdown /data/worldbank_to_excel.ipynb\n\n\npandas \u306e `to_excel` \u3092\u4f7f\u3063\u3066\u3001\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u30a8\u30af\u30bb\u30eb\u306b\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\n* [pandas.DataFrame.to_excel \u2014 pandas 0.15.1\ndocumentation](http://pandas.pydata.org/pandas-\ndocs/version/0.15.1/generated/pandas.DataFrame.to_excel.html)\n\n\u307e\u305a\u306f\u3001\u5fc5\u8981\u306a Python \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30a4\u30f3\u30dd\u30fc\u30c8\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pandas.io import wb\nimport xlsxwriter\n```\n\n# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\n\u4e16\u754c\u9280\u884c\u306e API \u3092\u4f7f\u3063\u3066\u3001\u30a2\u30e1\u30ea\u30ab\u3068\u65e5\u672c\u306e\u4eba\u53e3\u3068GDP\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002indicator \u6587\u5b57\u5217\u306f\u4e16\u754c\u9280\u884c\u306e API \u304b\u3089\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n```python\ndf_gdp = wb.download(indicator='NY.GDP.PCAP.KD', country=['US', 'JP'], start=1960, end=2013)\ndf_population = wb.download(indicator='SP.POP.TOTL', country=['US', 'JP'], start=1960, end=2013)\n```\n\n## \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\n\n```python\ndf_gdp.head(3)\n```\n\n<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th></th>\n      <th>NY.GDP.PCAP.KD</th>\n    </tr>\n    <tr>\n      <th>country</th>\n      <th>year</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th rowspan=\"3\" valign=\"top\">Japan</th>\n      <th>2013</th>\n      <td> 37432.840747</td>\n    </tr>\n    <tr>\n      <th>2012</th>\n      <td> 36800.922307</td>\n    </tr>\n    <tr>\n      <th>2011</th>\n      <td> 36203.430066</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n```python\ndf_gdp.dtypes\n```\n\n    NY.GDP.PCAP.KD    float64\n    dtype: object\n    df_gdp.index\n\n    MultiIndex(levels=[['Japan', 'United States'], ['1960', '1961', '1962', '1963', '1964', '1965', '1966', '1967', '1968', '1969', '1970', '1971', '1972', '1973', '1974', '1975', '1976', '1977', '1978', '1979', '1980', '1981', '1982', '1983', '1984', '1985', '1986', '1987', '1988', '1989', '1990', '1991', '1992', '1993', '1994', '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013']],\n               labels=[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ...], [53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, ...]],\n               names=['country', 'year'])\n\n```python\ndf_gdp.describe()\n```\n\n<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>NY.GDP.PCAP.KD</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>   108.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td> 28015.188967</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td> 10061.123534</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>  7079.439251</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td> 20152.131354</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td> 28858.039661</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td> 35165.327764</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td> 45863.019564</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nGDP \u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306f\uff1a\n\n* \"country\" \u3068 \"year\" \u306e\u30de\u30eb\u30c1\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\n* 108\u500b\u306e\u8981\u7d20\u304c\u3042\u308b\n* \u6700\u5c0f\u5024\u306f 7079.439251\u3001\u6700\u5927\u5024\u306f 45863.019564 \u306b\u306a\u3063\u3066\u3044\u308b\n* \u30c7\u30fc\u30bf\u306f\u6700\u65b0\u306e\u3082\u306e\u304b\u3089\u964d\u9806\u306b\u306a\u3063\u3066\u3044\u308b\n\n\u4eba\u53e3\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3082\u540c\u3058\u3088\u3046\u306a\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n## \u30c7\u30fc\u30bf\u3092\u6574\u5f62\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u4f7f\u3044\u306b\u304f\u3044\u306e\u3067\u30c7\u30fc\u30bf\u3092\u6574\u5f62\u3057\u307e\u3059\u3002\n\n```python\ndf_gdp.unstack(level=0).head(3)\n```\n\n<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">NY.GDP.PCAP.KD</th>\n    </tr>\n    <tr>\n      <th>country</th>\n      <th>Japan</th>\n      <th>United States</th>\n    </tr>\n    <tr>\n      <th>year</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1960</th>\n      <td> 7079.439251</td>\n      <td> 15469.072967</td>\n    </tr>\n    <tr>\n      <th>1961</th>\n      <td> 7728.000388</td>\n      <td> 15564.690585</td>\n    </tr>\n    <tr>\n      <th>1962</th>\n      <td> 8338.409056</td>\n      <td> 16262.092906</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n```python\ndf_gdp.unstack(level=0).describe()\n```\n\n<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">NY.GDP.PCAP.KD</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>Japan</th>\n      <th>United States</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>    54.000000</td>\n      <td>    54.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td> 25134.970999</td>\n      <td> 30895.406935</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>  9716.583553</td>\n      <td>  9646.035006</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>  7079.439251</td>\n      <td> 15469.072967</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td> 17457.921985</td>\n      <td> 22981.450242</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td> 26005.632842</td>\n      <td> 30462.082595</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td> 33991.192095</td>\n      <td> 40658.654684</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td> 37432.840747</td>\n      <td> 45863.019564</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n```python\ndf_gdp.unstack(level=0).plot(figsize=(16, 4), colormap='seismic')\n```\n\n![worldbank_to_excel_16_1.png](https://qiita-image-store.s3.amazonaws.com/0/37996/0c24b38b-2fa5-43aa-3239-a73b336f7d39.png \"worldbank_to_excel_16_1.png\")\n\n\u4eba\u53e3\u306e\u30c7\u30fc\u30bf\u3082\u540c\u69d8\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n```python\ndf_population.unstack(level=0).head(3)\n```\n\n<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">SP.POP.TOTL</th>\n    </tr>\n    <tr>\n      <th>country</th>\n      <th>Japan</th>\n      <th>United States</th>\n    </tr>\n    <tr>\n      <th>year</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1960</th>\n      <td> 92500572</td>\n      <td> 180671000</td>\n    </tr>\n    <tr>\n      <th>1961</th>\n      <td> 94943000</td>\n      <td> 183691000</td>\n    </tr>\n    <tr>\n      <th>1962</th>\n      <td> 95832000</td>\n      <td> 186538000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n```python\nax = df_population.unstack(level=0).plot(figsize=(16, 4), colormap='seismic')\n```\n\n![worldbank_to_excel_19_0.png](https://qiita-image-store.s3.amazonaws.com/0/37996/ea26bfa3-685e-00d8-e859-c60fdf9a3c0d.png \"worldbank_to_excel_19_0.png\")\n\n\n\uff15\u5e74\u306e\u79fb\u52d5\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u307f\u308b\u3068\u3001\u30a2\u30e1\u30ea\u30ab\u306f\u4eba\u53e3\u5897\u52a0\u3001\u65e5\u672c\u306f\u4eba\u53e3\u6a2a\u3070\u3044\u3067\u3042\u308b\u50be\u5411\u304c\u5c11\u3057\u30cf\u30c3\u30ad\u30ea\u3057\u307e\u3059\u3002\n\n```python\nax = pd.stats.moments.rolling_mean(df_population.unstack(level=0), 5).plot(figsize=(16, 4), colormap='seismic')\n```\n\n![worldbank_to_excel_21_0.png](https://qiita-image-store.s3.amazonaws.com/0/37996/4235e9e1-3604-1496-f326-d8518fd9c7da.png \"worldbank_to_excel_21_0.png\")\n\n\n```python\nax = pd.stats.moments.rolling_std(df_population.unstack(level=0)['SP.POP.TOTL'], 5).plot(figsize=(16, 4), colormap='seismic')\n```\n\n![worldbank_to_excel_22_0.png](https://qiita-image-store.s3.amazonaws.com/0/37996/0d24aae7-0f75-879e-de1c-3db1986ef605.png \"worldbank_to_excel_22_0.png\")\n\n\n## \u30c7\u30fc\u30bf\u306e\u7d50\u5408\n\n\uff12\u3064\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u7d50\u5408\u3057\u307e\u3059\u3002\n\n```python\npd.concat([df_gdp, df_population], axis=1).unstack(level=0).head(3)\n```\n\n<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">NY.GDP.PCAP.KD</th>\n      <th colspan=\"2\" halign=\"left\">SP.POP.TOTL</th>\n    </tr>\n    <tr>\n      <th>country</th>\n      <th>Japan</th>\n      <th>United States</th>\n      <th>Japan</th>\n      <th>United States</th>\n    </tr>\n    <tr>\n      <th>year</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1960</th>\n      <td> 7079.439251</td>\n      <td> 15469.072967</td>\n      <td> 92500572</td>\n      <td> 180671000</td>\n    </tr>\n    <tr>\n      <th>1961</th>\n      <td> 7728.000388</td>\n      <td> 15564.690585</td>\n      <td> 94943000</td>\n      <td> 183691000</td>\n    </tr>\n    <tr>\n      <th>1962</th>\n      <td> 8338.409056</td>\n      <td> 16262.092906</td>\n      <td> 95832000</td>\n      <td> 186538000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n```python\ndf = pd.concat([df_gdp, df_population], axis=1).unstack(level=0)\ndf.describe()\n```\n\n<div style=\"max-height:1000px;max-width:1500px;overflow:auto;\">\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"2\" halign=\"left\">NY.GDP.PCAP.KD</th>\n      <th colspan=\"2\" halign=\"left\">SP.POP.TOTL</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>Japan</th>\n      <th>United States</th>\n      <th>Japan</th>\n      <th>United States</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>    54.000000</td>\n      <td>    54.000000</td>\n      <td> 5.400000e+01</td>\n      <td> 5.400000e+01</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td> 25134.970999</td>\n      <td> 30895.406935</td>\n      <td> 1.171442e+08</td>\n      <td> 2.460156e+08</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>  9716.583553</td>\n      <td>  9646.035006</td>\n      <td> 1.115320e+07</td>\n      <td> 4.038823e+07</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>  7079.439251</td>\n      <td> 15469.072967</td>\n      <td> 9.250057e+07</td>\n      <td> 1.806710e+08</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td> 17457.921985</td>\n      <td> 22981.450242</td>\n      <td> 1.085998e+08</td>\n      <td> 2.123952e+08</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td> 26005.632842</td>\n      <td> 30462.082595</td>\n      <td> 1.217915e+08</td>\n      <td> 2.412110e+08</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td> 33991.192095</td>\n      <td> 40658.654684</td>\n      <td> 1.268150e+08</td>\n      <td> 2.813818e+08</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td> 37432.840747</td>\n      <td> 45863.019564</td>\n      <td> 1.278173e+08</td>\n      <td> 3.161288e+08</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\nGDP\u3092\u5de6\u8ef8\u3001\u4eba\u53e3\u3092\u53f3\u8ef8\u306b\u3057\u3066\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u3066\u307f\u307e\u3059\u3002\n\n```python\nax = df.plot(figsize=(16, 6), colormap='seismic',\n                 secondary_y=[('SP.POP.TOTL', 'Japan'), ('SP.POP.TOTL', 'United States')])\n    ax.set_ylabel('GDP')\n    _ = ax.right_ax.set_ylabel('Population')\n```\n\n![worldbank_to_excel_28_0.png](https://qiita-image-store.s3.amazonaws.com/0/37996/f694fa03-2fa2-525f-7ce0-6fcf3846e04b.png \"worldbank_to_excel_28_0.png\")\n\n\u5358\u4e00\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\uff15\u5e74\u5358\u4f4d\u3067\u306e\u5206\u6563\u3092\u8a08\u7b97\u3059\u308b\u3068\u3001\u65e5\u672c\u306e\u4eba\u53e3\u306f1980\u5e74\u3054\u308d\u304b\u3089\u4f38\u3073\u60a9\u307f\u3001GDP\u306f1995\u5e74\u3054\u308d\u304b\u3089\u6a2a\u3070\u3044\u3068\u8a00\u3048\u307e\u3059\u3002\n\u30a2\u30e1\u30ea\u30ab\u306e\u5834\u5408\u306f\u30011990\u5e74\u3054\u308d\u306b\u4eba\u53e3\u5897\u52a0\u306e\u6ce2\u304c\u3042\u308a\u30012000\u5e74\u3054\u308d\u306bGDP\u306e\u5897\u52a0\u304c\u30d4\u30fc\u30af\u3092\u8fce\u3048\u3001\u5b9a\u671f\u7684\u306b\u6ce2\u304c\u3042\u308b\u3068\u8a00\u3048\u307e\u3059\u3002\n\n```python\nax = pd.stats.moments.rolling_var(df, 5).plot(subplots=True, layout=(2, 2), figsize=(16, 6))\n```\n\n![worldbank_to_excel_31_0.png](https://qiita-image-store.s3.amazonaws.com/0/37996/c3e7206d-b9be-4322-e65e-3527941ed737.png \"worldbank_to_excel_31_0.png\")\n\n## \u30c7\u30fc\u30bf\u306e\u51fa\u529b\n\n\u30a8\u30af\u30bb\u30eb\u306b\u51fa\u529b\u3057\u307e\u3059\u3002\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u304c\u3001`xlsxwriter`\n\u306a\u3069\u306e\u30a8\u30af\u30bb\u30eb\u66f8\u304d\u51fa\u3057\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```python\ndf.to_excel('/data/sample.xlsx', sheet_name='Japan_US')\n%ls /data\n```\n\n    sample.xlsx\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u30a8\u30af\u30bb\u30eb\u3067\u958b\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002LibreOffice \u306a\u3069\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n\n\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3092\u500b\u5225\u306e\u30b7\u30fc\u30c8\u306b\u66f8\u304d\u51fa\u3059\u5834\u5408\u306f\u3001\u5f15\u6570\u306b\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u306f\u306a\u304f\u30e9\u30a4\u30bf\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (`ExcelWriter `)\n\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u4f8b\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u8a73\u3057\u304f\u306f Stack Overflow \u306a\u3069\u3067\u63a2\u3057\u307e\u3057\u3087\u3046\u3002\n\n* [pandas.DataFrame.to_excel \u2014 pandas 0.15.1\ndocumentation](http://pandas.pydata.org/pandas-\ndocs/stable/generated/pandas.DataFrame.to_excel.html)\n* [creating multiple excel worksheets using data in a pandas dataframe - Stack\nOverflow](http://stackoverflow.com/questions/21981820/creating-multiple-excel-\nworksheets-using-data-in-a-pandas-dataframe)\n\n# \u52d5\u4f5c\u74b0\u5883\n\n*version_information* \u62e1\u5f35\u3092\u6709\u52b9\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u30ce\u30fc\u30c8\u30d6\u30c3\u30af\u306e\u52d5\u4f5c\u74b0\u5883\u306f\u4ee5\u4e0b\u306e\u3082\u306e\u3067\u3059\u3002\n\n    %version_information numpy, pandas, matplotlib, xlsxwriter\n\n<table><tr><th>Software</th><th>Version</th></tr><tr><td>Python</td><td>3.4.2 64bit [GCC 4.9.1]</td></tr><tr><td>IPython</td><td>2.3.1</td></tr><tr><td>OS</td><td>Linux 3.13.0 24 generic x86_64 with debian 8.0</td></tr><tr><td>numpy</td><td>1.9.1</td></tr><tr><td>pandas</td><td>0.15.1</td></tr><tr><td>matplotlib</td><td>1.4.2</td></tr><tr><td>xlsxwriter</td><td>0.6.4</td></tr><tr><td colspan='2'>Mon Dec 08 15:50:50 2014 UTC</td></tr></table>\n\n\u203b \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f IPython Notebook \u3092 Markdown \u306b\u5909\u63db\u3057\u3066\u5fae\u8abf\u6574\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n```bash\n$ ipython nbconvert --to markdown /data/worldbank_to_excel.ipynb\n```\n", "tags": ["Python", "pandas"]}