{"tags": ["Java", "spring", "spring-boot", "download", "zip"], "context": "\u4eca\u643a\u308f\u3063\u3066\u3044\u308b\u6848\u4ef6\u3067\u3001\u8907\u6570\u30d5\u30a1\u30a4\u30eb\uff08\u5b9f\u969b\u306fDB\u306b\u4fdd\u6301\u3057\u3066\u3044\u308bBLOB\u30c7\u30fc\u30bf\uff09\u3092\uff11\u56de\u306eAPI\u547c\u3073\u51fa\u3057\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u3044\uff01\uff01\u3068\u3044\u3046\u8981\u671b\u304c\u3042\u3063\u3066\u3001\u601d\u3044\u3064\u3044\u305f\u6848\u306f\u30fb\u30fb\u30fb\u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u3068JDK\u6a19\u6e96\u306eZIP API\u3067\u3057\u305f\u3002\u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u30ec\u30b9\u30dd\u30f3\u30b9\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u7cfb\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u307b\u3068\u3093\u3067\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u611f\u3058\u3060\u3063\u305f\u306e\u3067\u30dc\u30c4\u306b\u3057\u3001JDK\u6a19\u6e96\u306eZip API\uff08ZipOutputStream / ZipInputStream\uff09\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u305d\u3093\u306a\u3082\u3093\u3067\u3001\u672c\u65e5\u306fJDK\u6a19\u6e96\u306eZip API\u3092\u4f7f\u3063\u305f\u8907\u6570\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u30fb\u30fb\u30fbSpring Boot\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u3082Spring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n\u52d5\u4f5c\u691c\u8a3c\u30d0\u30fc\u30b8\u30e7\u30f3\n\nSpring Boot 1.3.5.RELEASE\nJava SE 8\nMac\n\n\n\u691c\u8a3c\u30b3\u30fc\u30c9\n\nhttps://github.com/kazuki43zoo/qiita-materials/tree/master/spring-mvc/zip-demo\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\nSPRING INITIALIZR\u306b\u3066\u3001Artifact\u3092\u300czip-demo\u300d\u3001Dependencies\u306b\u300cWeb\u300d\u3092\u6307\u5b9a\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u4efb\u610f\u306e\u5834\u6240\u306b\u89e3\u51cd\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u3001Apache Http Client\u3092\u4f7f\u3063\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u884c\u3046\u306e\u3067\u30fb\u30fb\u30fbApache Http Client\u3092\u4f9d\u5b58\u30ea\u30d6\u30e9\u30ea\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\npom.xml\n<dependency>\n    <groupId>org.apache.httpcomponents</groupId>\n    <artifactId>httpmime</artifactId>\n</dependency>\n\n\n\u4eca\u56de\u7d39\u4ecb\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092Zip\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u69cb\u6210\u306b\u3059\u308b\u305f\u3081\u3001org.apache.httpcomponents:httpmime\u3092\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\u306a\u304a\u3001org.apache.httpcomponents:httpclient\u306f\u63a8\u79fb\u7684\u4f9d\u5b58\u6027\u306b\u3088\u3063\u3066\u89e3\u6c7a\u3055\u308c\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u307e\u305b\u3093\u3002\n\nHandler\u30e1\u30bd\u30c3\u30c9\u306e\u4f5c\u6210\n\u672c\u6765\u306fController\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u3079\u304d\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u8d77\u52d5\u30af\u30e9\u30b9\u306b\u76f4\u63a5Handler\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3061\u3083\u3044\u307e\u3059\u3002\n\nsrc/main/java/com/example/ZipDemoApplication.java\npackage com.example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.util.StreamUtils;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.multipart.MultipartResolver;\nimport org.springframework.web.multipart.support.StandardServletMultipartResolver;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.Paths;\nimport java.util.List;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\n@Controller // @Controller\u3092\u8ffd\u52a0\u3059\u308b\n@SpringBootApplication\npublic class ZipDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ZipDemoApplication.class, args);\n    }\n\n    @Bean // \u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6a5f\u80fd\u3092\u6709\u52b9\u5316\u3059\u308b\n    public MultipartResolver multipartResolver() {\n        return new StandardServletMultipartResolver();\n    }\n\n    @RequestMapping(path = \"/files\") // Handler\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\n    public void zipDownload(@RequestParam List<MultipartFile> files, HttpServletResponse response) throws IOException {\n\n        response.setHeader(HttpHeaders.CONTENT_TYPE,\n                MediaType.APPLICATION_OCTET_STREAM_VALUE);\n        response.setHeader(HttpHeaders.CONTENT_DISPOSITION,\n                \"attachment; filename=download.zip\");\n\n        try (ZipOutputStream zipOutputStream = new ZipOutputStream(response.getOutputStream())) {\n            for (MultipartFile file : files) {\n                String fileName = Paths.get(file.getOriginalFilename()).getFileName().toString();\n                try (InputStream input = file.getInputStream()) {\n                    zipOutputStream.putNextEntry(new ZipEntry(fileName));\n                    StreamUtils.copy(input, zipOutputStream); // write per 4KB\n                }\n            }\n        }\n\n    }\n\n}\n\n\n\u4e0a\u8a18\u306eAPI\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u6307\u5b9a\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\ndata/a.txt\naaaaa\n\n\n\ndata/b.txt\nbbbbb\n\n\n\ncurl\u3092\u5229\u7528\u3057\u305fAPI\u306e\u547c\u3073\u51fa\u3057\nAPI\u3092\u547c\u3073\u51fa\u3059\u524d\u306bSpring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n./mvnw spring-boot:run\n...\n2016-06-23 06:03:24.080  INFO 75579 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup\n2016-06-23 06:03:24.135  INFO 75579 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)\n2016-06-23 06:03:24.141  INFO 75579 --- [           main] com.example.ZipDemoApplication           : Started ZipDemoApplication in 1.699 seconds (JVM running for 3.812)\n\nSpring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u6b63\u5e38\u306b\u8d77\u52d5\u3057\u305f\u3089\u3001curl\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092Zip\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n$ curl -X POST -F files=@data/a.txt -F files=@data/b.txt -O http://localhost:8080/files\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   568    0   236  100   332   7772  10934 --:--:-- --:--:-- --:--:-- 11066\n\nfiles\u3068\u3044\u3046\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Zip\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n$ jar -tvf files\n     5 Thu Jun 23 05:59:22 JST 2016 a.txt\n     5 Thu Jun 23 05:59:22 JST 2016 b.txt \n\n\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u3066\u3044\u305d\u3046\u3067\u3059\u306d  \n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u305fAPI\u306e\u547c\u3073\u51fa\u3057\n\u3053\u3053\u3067\u306f\u3001Spring\u306eRestTemplate\u3068Apache Http Client\u3092\u4f7f\u7528\u3057\u3066API\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001SPRING INITIALIZR\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3042\u3089\u304b\u3058\u3081\u540c\u5c01\u3055\u308c\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\nsrc/main/test/com/example/ZipDemoApplicationTests.java\npackage com.example;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.mime.MultipartEntityBuilder;\nimport org.apache.http.entity.mime.content.FileBody;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.StreamUtils;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.charset.StandardCharsets;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\nimport static org.hamcrest.core.Is.is;\nimport static org.junit.Assert.assertThat;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = ZipDemoApplication.class)\n@WebIntegrationTest(randomPort = true) // Junit\u5185\u3067\u7a7a\u304d\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u7d44\u307f\u8fbc\u307fTomcat\u3092\u8d77\u52d5\npublic class ZipDemoApplicationTests {\n\n    @Value(\"http://localhost:${local.server.port}/files\") // \u7d44\u307f\u8fbc\u307fTomcat\u4e0a\u306eURL\u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\n    private String url;\n\n    /**\n     * Spring\u304c\u63d0\u4f9b\u3059\u308bRestTemplate\u3092\u4f7f\u7528\u3057\u305f\u6642\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4f8b\n     */\n    @Test\n    public void zipDownloadUsingSpringRestTemplate() throws IOException {\n\n        RestTemplate restOperations = new RestTemplate();\n        MultiValueMap<String, Object> form = new LinkedMultiValueMap<>();\n        form.add(\"files\", new FileSystemResource(\"data/a.txt\"));\n        form.add(\"files\", new FileSystemResource(\"data/b.txt\"));\n        RequestEntity<MultiValueMap<String, Object>> requestEntity =\n                RequestEntity.post(URI.create(url)).body(form);\n\n        // \u2605\u2605\u2605 \u3053\u306e\u5b9f\u88c5\u3060\u3068ByteArrayInputStream\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u306e\u3067\u5927\u91cf\u30c7\u30fc\u30bf\u3092\u6271\u3046\u5834\u5408\u306f\u6ce8\u610f\u304c\u5fc5\u8981\uff01\uff01 \u2605\u2605\u2605\n        ResponseEntity<Resource> responseEntity = restOperations.exchange(requestEntity, Resource.class);\n\n        try (ZipInputStream zipInputStream = new ZipInputStream(responseEntity.getBody().getInputStream())) {\n            {\n                ZipEntry entry = zipInputStream.getNextEntry();\n                assertThat(entry.getName(), is(\"a.txt\"));\n                assertThat(StreamUtils.copyToString(zipInputStream, StandardCharsets.UTF_8), is(\"aaaaa\"));\n            }\n            {\n                ZipEntry entry = zipInputStream.getNextEntry();\n                assertThat(entry.getName(), is(\"b.txt\"));\n                assertThat(StreamUtils.copyToString(zipInputStream, StandardCharsets.UTF_8), is(\"bbbbb\"));\n            }\n           assertNull(zipInputStream.getNextEntry());\n        }\n    }\n\n\n    /**\n     * Apache Http Client\u304c\u63d0\u4f9b\u3059\u308bJava API\u3092\u4f7f\u7528\u3057\u305f\u6642\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4f8b\n     */\n    @Test\n    public void zipDownloadUsingApacheHttpClient() throws IOException {\n\n        try (CloseableHttpClient httpClient = HttpClientBuilder.create().build()) {\n\n            HttpPost request = new HttpPost(url);\n            request.setEntity(MultipartEntityBuilder.create()\n                    .addPart(\"files\", new FileBody(new File(\"data/a.txt\")))\n                    .addPart(\"files\", new FileBody(new File(\"data/b.txt\")))\n                    .build());\n\n            HttpResponse response = httpClient.execute(request);\n\n            try (ZipInputStream zipInputStream = new ZipInputStream(response.getEntity().getContent())) {\n                {\n                    ZipEntry entry = zipInputStream.getNextEntry();\n                    assertThat(entry.getName(), is(\"a.txt\"));\n                    assertThat(StreamUtils.copyToString(zipInputStream, StandardCharsets.UTF_8), is(\"aaaaa\"));\n                }\n                {\n                    ZipEntry entry = zipInputStream.getNextEntry();\n                    assertThat(entry.getName(), is(\"b.txt\"));\n                    assertThat(StreamUtils.copyToString(zipInputStream, StandardCharsets.UTF_8), is(\"bbbbb\"));\n                }\n                assertNull(zipInputStream.getNextEntry());\n            }\n\n        }\n\n    }\n\n}\n\n\n\u3053\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u7d44\u307f\u8fbc\u307fTomcat\u4e0a\u306eAPI\u3092\u547c\u3073\u51fa\u3057\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092Zip\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u30b5\u30fc\u30d0\u30fc\u3082\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3082\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u5185\u306b\u3082\u8a18\u8f09\u3057\u307e\u3057\u305f\u304c\u3001RestTemplate\u3092\u5229\u7528\u3057\u3066\u5bb9\u91cf\u304c\u5927\u304d\u3044\u30c7\u30fc\u30bf\u3092\u6271\u3046\u5834\u5408\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u7d39\u4ecb\u3057\u3066\u3044\u308b\u5b9f\u88c5\u3092\u4f7f\u3046\u3068\u30e1\u30e2\u30ea\u304c\u3084\u3070\u3044\u3053\u3068\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5bb9\u91cf\u304c\u5927\u304d\u3044\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5834\u5408\u306f\u3001\u3053\u3061\u3089\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53c2\u8003\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8981\u4ef6\u306b\u3042\u3063\u305f\u5b9f\u88c5\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\nhttp://www.ne.jp/asahi/hishidama/home/tech/java/zip.html\nhttp://terasolunaorg.github.io/guideline/5.1.0.RELEASE/ja/ArchitectureInDetail/RestClient.html#restclienthowtousefiledownload\n\n\u4eca\u643a\u308f\u3063\u3066\u3044\u308b\u6848\u4ef6\u3067\u3001\u8907\u6570\u30d5\u30a1\u30a4\u30eb\uff08\u5b9f\u969b\u306fDB\u306b\u4fdd\u6301\u3057\u3066\u3044\u308bBLOB\u30c7\u30fc\u30bf\uff09\u3092\uff11\u56de\u306eAPI\u547c\u3073\u51fa\u3057\u3067\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u3044\uff01\uff01\u3068\u3044\u3046\u8981\u671b\u304c\u3042\u3063\u3066\u3001\u601d\u3044\u3064\u3044\u305f\u6848\u306f\u30fb\u30fb\u30fb\u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u3068JDK\u6a19\u6e96\u306eZIP API\u3067\u3057\u305f\u3002\u30de\u30eb\u30c1\u30d1\u30fc\u30c8\u30ec\u30b9\u30dd\u30f3\u30b9\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u7cfb\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u307b\u3068\u3093\u3067\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u611f\u3058\u3060\u3063\u305f\u306e\u3067\u30dc\u30c4\u306b\u3057\u3001JDK\u6a19\u6e96\u306eZip API\uff08`ZipOutputStream` / `ZipInputStream`\uff09\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u305d\u3093\u306a\u3082\u3093\u3067\u3001\u672c\u65e5\u306fJDK\u6a19\u6e96\u306eZip API\u3092\u4f7f\u3063\u305f\u8907\u6570\u30d5\u30a1\u30a4\u30eb\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306e\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u30fb\u30fb\u30fbSpring Boot\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u3082Spring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\u3002\n\n# \u52d5\u4f5c\u691c\u8a3c\u30d0\u30fc\u30b8\u30e7\u30f3\n\n* Spring Boot 1.3.5.RELEASE\n* Java SE 8\n* Mac\n\n# \u691c\u8a3c\u30b3\u30fc\u30c9\n\n* https://github.com/kazuki43zoo/qiita-materials/tree/master/spring-mvc/zip-demo\n\n# \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n\n[SPRING INITIALIZR](https://start.spring.io/)\u306b\u3066\u3001Artifact\u3092\u300czip-demo\u300d\u3001Dependencies\u306b\u300cWeb\u300d\u3092\u6307\u5b9a\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u4efb\u610f\u306e\u5834\u6240\u306b\u89e3\u51cd\u3057\u307e\u3059\u3002\u4eca\u56de\u306f\u3001Apache Http Client\u3092\u4f7f\u3063\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3092\u884c\u3046\u306e\u3067\u30fb\u30fb\u30fbApache Http Client\u3092\u4f9d\u5b58\u30ea\u30d6\u30e9\u30ea\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```xml:pom.xml\n<dependency>\n    <groupId>org.apache.httpcomponents</groupId>\n    <artifactId>httpmime</artifactId>\n</dependency>\n```\n\n\u4eca\u56de\u7d39\u4ecb\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092Zip\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u69cb\u6210\u306b\u3059\u308b\u305f\u3081\u3001`org.apache.httpcomponents:httpmime`\u3092\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\u306a\u304a\u3001`org.apache.httpcomponents:httpclient`\u306f\u63a8\u79fb\u7684\u4f9d\u5b58\u6027\u306b\u3088\u3063\u3066\u89e3\u6c7a\u3055\u308c\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u307e\u305b\u3093\u3002\n\n\n# Handler\u30e1\u30bd\u30c3\u30c9\u306e\u4f5c\u6210\n\n\u672c\u6765\u306fController\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u3079\u304d\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u8d77\u52d5\u30af\u30e9\u30b9\u306b\u76f4\u63a5Handler\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3061\u3083\u3044\u307e\u3059\u3002\n\n```java:src/main/java/com/example/ZipDemoApplication.java\npackage com.example;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.MediaType;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.util.StreamUtils;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.multipart.MultipartResolver;\nimport org.springframework.web.multipart.support.StandardServletMultipartResolver;\n\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.Paths;\nimport java.util.List;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\n@Controller // @Controller\u3092\u8ffd\u52a0\u3059\u308b\n@SpringBootApplication\npublic class ZipDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ZipDemoApplication.class, args);\n    }\n\n    @Bean // \u30d5\u30a1\u30a4\u30eb\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u6a5f\u80fd\u3092\u6709\u52b9\u5316\u3059\u308b\n    public MultipartResolver multipartResolver() {\n        return new StandardServletMultipartResolver();\n    }\n\n    @RequestMapping(path = \"/files\") // Handler\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3059\u308b\n    public void zipDownload(@RequestParam List<MultipartFile> files, HttpServletResponse response) throws IOException {\n\n        response.setHeader(HttpHeaders.CONTENT_TYPE,\n                MediaType.APPLICATION_OCTET_STREAM_VALUE);\n        response.setHeader(HttpHeaders.CONTENT_DISPOSITION,\n                \"attachment; filename=download.zip\");\n\n        try (ZipOutputStream zipOutputStream = new ZipOutputStream(response.getOutputStream())) {\n            for (MultipartFile file : files) {\n                String fileName = Paths.get(file.getOriginalFilename()).getFileName().toString();\n                try (InputStream input = file.getInputStream()) {\n                    zipOutputStream.putNextEntry(new ZipEntry(fileName));\n                    StreamUtils.copy(input, zipOutputStream); // write per 4KB\n                }\n            }\n        }\n\n    }\n\n}\n```\n\n\u4e0a\u8a18\u306eAPI\u3092\u547c\u3073\u51fa\u3059\u969b\u306b\u6307\u5b9a\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```text:data/a.txt\naaaaa\n```\n```text:data/b.txt\nbbbbb\n```\n\n# curl\u3092\u5229\u7528\u3057\u305fAPI\u306e\u547c\u3073\u51fa\u3057\n\nAPI\u3092\u547c\u3073\u51fa\u3059\u524d\u306bSpring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n```text\n./mvnw spring-boot:run\n...\n2016-06-23 06:03:24.080  INFO 75579 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup\n2016-06-23 06:03:24.135  INFO 75579 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)\n2016-06-23 06:03:24.141  INFO 75579 --- [           main] com.example.ZipDemoApplication           : Started ZipDemoApplication in 1.699 seconds (JVM running for 3.812)\n```\n\nSpring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u6b63\u5e38\u306b\u8d77\u52d5\u3057\u305f\u3089\u3001curl\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092Zip\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002\n\n\n```text\n$ curl -X POST -F files=@data/a.txt -F files=@data/b.txt -O http://localhost:8080/files\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   568    0   236  100   332   7772  10934 --:--:-- --:--:-- --:--:-- 11066\n```\n\nfiles\u3068\u3044\u3046\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001Zip\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```text\n$ jar -tvf files\n     5 Thu Jun 23 05:59:22 JST 2016 a.txt\n     5 Thu Jun 23 05:59:22 JST 2016 b.txt \n```\n\n\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u30c0\u30a6\u30f3\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u3066\u3044\u305d\u3046\u3067\u3059\u306d :v: \n\n# \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u305fAPI\u306e\u547c\u3073\u51fa\u3057\n\n\u3053\u3053\u3067\u306f\u3001Spring\u306e`RestTemplate`\u3068Apache Http Client\u3092\u4f7f\u7528\u3057\u3066API\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001SPRING INITIALIZR\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3042\u3089\u304b\u3058\u3081\u540c\u5c01\u3055\u308c\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```java:src/main/test/com/example/ZipDemoApplicationTests.java\npackage com.example;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.methods.HttpPost;\nimport org.apache.http.entity.mime.MultipartEntityBuilder;\nimport org.apache.http.entity.mime.content.FileBody;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClientBuilder;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.util.LinkedMultiValueMap;\nimport org.springframework.util.MultiValueMap;\nimport org.springframework.util.StreamUtils;\nimport org.springframework.web.client.RestTemplate;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URI;\nimport java.nio.charset.StandardCharsets;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipInputStream;\n\nimport static org.hamcrest.core.Is.is;\nimport static org.junit.Assert.assertThat;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = ZipDemoApplication.class)\n@WebIntegrationTest(randomPort = true) // Junit\u5185\u3067\u7a7a\u304d\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u7d44\u307f\u8fbc\u307fTomcat\u3092\u8d77\u52d5\npublic class ZipDemoApplicationTests {\n\n    @Value(\"http://localhost:${local.server.port}/files\") // \u7d44\u307f\u8fbc\u307fTomcat\u4e0a\u306eURL\u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\n    private String url;\n\n    /**\n     * Spring\u304c\u63d0\u4f9b\u3059\u308bRestTemplate\u3092\u4f7f\u7528\u3057\u305f\u6642\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4f8b\n     */\n    @Test\n    public void zipDownloadUsingSpringRestTemplate() throws IOException {\n\n        RestTemplate restOperations = new RestTemplate();\n        MultiValueMap<String, Object> form = new LinkedMultiValueMap<>();\n        form.add(\"files\", new FileSystemResource(\"data/a.txt\"));\n        form.add(\"files\", new FileSystemResource(\"data/b.txt\"));\n        RequestEntity<MultiValueMap<String, Object>> requestEntity =\n                RequestEntity.post(URI.create(url)).body(form);\n\n        // \u2605\u2605\u2605 \u3053\u306e\u5b9f\u88c5\u3060\u3068ByteArrayInputStream\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u306e\u3067\u5927\u91cf\u30c7\u30fc\u30bf\u3092\u6271\u3046\u5834\u5408\u306f\u6ce8\u610f\u304c\u5fc5\u8981\uff01\uff01 \u2605\u2605\u2605\n        ResponseEntity<Resource> responseEntity = restOperations.exchange(requestEntity, Resource.class);\n\n        try (ZipInputStream zipInputStream = new ZipInputStream(responseEntity.getBody().getInputStream())) {\n            {\n                ZipEntry entry = zipInputStream.getNextEntry();\n                assertThat(entry.getName(), is(\"a.txt\"));\n                assertThat(StreamUtils.copyToString(zipInputStream, StandardCharsets.UTF_8), is(\"aaaaa\"));\n            }\n            {\n                ZipEntry entry = zipInputStream.getNextEntry();\n                assertThat(entry.getName(), is(\"b.txt\"));\n                assertThat(StreamUtils.copyToString(zipInputStream, StandardCharsets.UTF_8), is(\"bbbbb\"));\n            }\n           assertNull(zipInputStream.getNextEntry());\n        }\n    }\n\n\n    /**\n     * Apache Http Client\u304c\u63d0\u4f9b\u3059\u308bJava API\u3092\u4f7f\u7528\u3057\u305f\u6642\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u4f8b\n     */\n    @Test\n    public void zipDownloadUsingApacheHttpClient() throws IOException {\n\n        try (CloseableHttpClient httpClient = HttpClientBuilder.create().build()) {\n\n            HttpPost request = new HttpPost(url);\n            request.setEntity(MultipartEntityBuilder.create()\n                    .addPart(\"files\", new FileBody(new File(\"data/a.txt\")))\n                    .addPart(\"files\", new FileBody(new File(\"data/b.txt\")))\n                    .build());\n\n            HttpResponse response = httpClient.execute(request);\n\n            try (ZipInputStream zipInputStream = new ZipInputStream(response.getEntity().getContent())) {\n                {\n                    ZipEntry entry = zipInputStream.getNextEntry();\n                    assertThat(entry.getName(), is(\"a.txt\"));\n                    assertThat(StreamUtils.copyToString(zipInputStream, StandardCharsets.UTF_8), is(\"aaaaa\"));\n                }\n                {\n                    ZipEntry entry = zipInputStream.getNextEntry();\n                    assertThat(entry.getName(), is(\"b.txt\"));\n                    assertThat(StreamUtils.copyToString(zipInputStream, StandardCharsets.UTF_8), is(\"bbbbb\"));\n                }\n                assertNull(zipInputStream.getNextEntry());\n            }\n\n        }\n\n    }\n\n}\n```\n\n\u3053\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u7d44\u307f\u8fbc\u307fTomcat\u4e0a\u306eAPI\u3092\u547c\u3073\u51fa\u3057\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092Zip\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\n\u30b5\u30fc\u30d0\u30fc\u3082\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3082\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u5185\u306b\u3082\u8a18\u8f09\u3057\u307e\u3057\u305f\u304c\u3001`RestTemplate`\u3092\u5229\u7528\u3057\u3066\u5bb9\u91cf\u304c\u5927\u304d\u3044\u30c7\u30fc\u30bf\u3092\u6271\u3046\u5834\u5408\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u7d39\u4ecb\u3057\u3066\u3044\u308b\u5b9f\u88c5\u3092\u4f7f\u3046\u3068\u30e1\u30e2\u30ea\u304c\u3084\u3070\u3044\u3053\u3068\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5bb9\u91cf\u304c\u5927\u304d\u3044\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u5834\u5408\u306f\u3001[\u3053\u3061\u3089](http://terasolunaorg.github.io/guideline/5.1.0.RELEASE/ja/ArchitectureInDetail/RestClient.html#restclienthowtousefiledownload)\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53c2\u8003\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8981\u4ef6\u306b\u3042\u3063\u305f\u5b9f\u88c5\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n# \u53c2\u8003\u30b5\u30a4\u30c8\n\n* http://www.ne.jp/asahi/hishidama/home/tech/java/zip.html\n* http://terasolunaorg.github.io/guideline/5.1.0.RELEASE/ja/ArchitectureInDetail/RestClient.html#restclienthowtousefiledownload\n"}