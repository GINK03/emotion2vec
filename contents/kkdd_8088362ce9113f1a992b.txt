{"context": " More than 1 year has passed since last update.\u3053\u3093\u306b\u3061\u306f\u3002\n\u4e00\u62ec\u3067\u30b3\u30de\u30f3\u30c9\uff08\u8907\u6570\uff09\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8868\u793a\u3055\u305b\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\uff08MacOSX\u5411\u3051\uff09\u3002\u4ed6\u306e\u6b32\u3057\u3044\u4e00\u89a7\u3082\u8868\u793a\u3055\u305b\u308b\u305f\u3081\u306b\u51e6\u7406\u304c\u81a8\u3089\u3093\u3067\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n$ ./checkv.rb\n:\n:\n% /usr/bin/ruby -v\n/usr/bin/ruby: Mach-O universal binary with 2 architectures\n/usr/bin/ruby (for architecture x86_64):        Mach-O 64-bit executable x86_64\n/usr/bin/ruby (for architecture i386):  Mach-O executable i386\nruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin13]\n:\n:\n\n$ ./checkv.rb |grep \"not\\ found\\|No\\ such\"\nsh: R: command not found\nsh: macgem: command not found\n% mdls -name kMDItemVersion /Applications/Utilities/X11.app: No such file or directory\n% cat /etc/redhat-release: No such file or directory\n% lua: command not found\n% sage: command not found\n:\n:\n\n\ncheckv.rb\n#!/usr/bin/ruby\nrequire 'yaml'\n\n$prompt = \"% \"\n$commands_to_be_checked_yml = <<EOS\n\"\":\n    - \"uname -a\"\n    - \"sw_vers\"\n    - \"hostinfo\"\n    - \"mdimport -L\"\n    - \"mdutil -sa |grep -B 1 disabled\"\n    - \"qlmanage -m | sed -E 's/^.* -> \\(.*\\)$/\\\\\\\\1/' | grep -E ^/ |sort |uniq\"\n    - \"ioreg -l -p IODeviceTree \\| grep firmware\"\n    - \"ifconfig en0 \\|grep 'inet '\"\n    - \"ifconfig en1 \\|grep 'inet '\"\n    - \"getconf LONG_BIT\"\n    - \"file /mach_kernel\"\n    - \"xcode-select -print-path\"\n    - \"brew --config\"\n    - \"brew list --versions \\| awk '{printf(\\\\\"%-18s %s\\\\\\\\n\\\\\",$1,$2)}'\"\n    - \"R CMD config --ldflags\"\n    - \"echo 'cat(.Library)' | R --vanilla --slave \"\n    - \"echo 'system(paste(\\\\\"ls\\\\\", .Library))' | R --vanilla --slave \"\n\"ls\":\n    - ~/Library/QuickLook /Library/QuickLook /System/Library/QuickLook\n    - ~/Library/QuickTime /Library/QuickTime /System/Library/QuickTime\n\"list\":\n    - gem\n    - macgem\n\"plist\":\n    - /Library/Preferences/SystemConfiguration/com.apple.Boot.plist\n\"CFBundleShortVersionString\":\n    - /Applications/Utilities/XQuartz.app/Contents/Info.plist\n    - /Applications/Xcode.app/Contents/version.plist\n    - /Applications/Safari.app/Contents/version.plist\n\"kMDItemVersion\":\n    - /Applications/Utilities/X11.app\n    - /Applications/Utilities/XQuartz.app\n    - /Applications/Xcode.app\n    - /Applications/Safari.app\n\"cat\":\n    - /etc/redhat-release\n    - ~/.bash_profile\n\"echo\":\n    - CC\n    - SHELL\n    - PATH\n    - MANPATH\n    - ARCHFLAGS\n    - SAGE_ROOT\n    - PGDATA\n    - GOPATH\n\"ps\":\n    - httpd\n    - postgres\n\"-l\":\n    - apachectl\n\"-v\":\n    - lua\n    - sage\n    - perl\n    - ruby\n    - php\n    - httpd\n    - gem\n    - macgem\n    - cvs\n    - unzip\n    - gs\n    - pdftotext\n    - macruby\n    - apachectl\n\"-V\":\n    - sudo\n    - ssh\n    - smbd\n    - grep\n    - /usr/bin/grep\n    - nano\n    - dot\n    - less\n    - lv\n    - nkf\n    - gzip\n    - zcat\n    - lzma\n    - curl\n    - wget\n    - clamscan\n    - clamdscan\n    - freshclam\n\"-version\":\n    - emacs\n    - sqlite3\n    - X\n    - /usr/X11R6/bin/X\n    - Xquartz\n    - lynx\n    - scala\n\"--version\":\n    - bash\n    - tcsh\n    - zsh\n    - gcc\n    - llvm-gcc\n    - clang\n    - gcc-4.2\n    - cc\n    - CC\n    - nvcc\n    - gdb\n    - lldb\n    - gfortran\n    - gfortran-4.2\n    - vim\n    - awk\n    - sed\n    - /usr/bin/sed # Darwin sed bundled in MacOSX\n    - tar\n    - /usr/bin/tar # bsdtar bundled in MacOSX\n    - rails\n    - brew\n    - pip\n    - python\n    - ipython\n    - pip3\n    - python3\n    - ipython3\n    - /usr/bin/python # python bundled in MacOSX\n    - R\n    - r\n    - svn\n    - /Applications/Xcode.app/Contents/Developer/usr/bin/svn\n    - git\n    - /usr/bin/git\n    - doxygen\n    - m4\n    - autoconf\n    - automake\n    - iconv\n    - glibtool\n    - platex\n    - uplatex\n    - xz\n    - psql\n    - julia\n\"version\":\n    - go\n    - openssl\n...\nEOS\n\ndef run_cmd(cmd, opt=\"\")\n    return `#{cmd + \" \" + opt + \" 2>&1\"}`  # for sh/bash\nend\n\ndef execute_cmd(cmd, checkfile=false)\n    print $prompt + cmd\n    cmdfile = cmd.split()[-1]\n    if !checkfile || File.exist?(File.expand_path(cmdfile))\n        puts \"\\n\" + run_cmd(cmd)\n    else\n        print \": No such file or directory\\n\"\n    end\nend\n\ndef execute_plistbuddy(cmd, pentry=\"\")\n    pr = \"'Print \" + pentry + \"'\"\n    execute_cmd(\"/usr/libexec/PlistBuddy -c #{pr} \" + cmd, true)\nend\n\ndef main(argv)\n    YAML.load($commands_to_be_checked_yml).each {|opt, cmds|\n        for cmd in cmds\n            case opt\n            when ''\n                execute_cmd(cmd)\n            when 'cat'\n                execute_cmd(\"cat \" + cmd, true)\n            when 'echo'\n                execute_cmd(\"echo $\" + cmd)\n            when 'list'\n                execute_cmd(cmd + \" list\")\n            when 'ps'\n                execute_cmd(\"ps aux |grep \" + cmd + \" |grep -v grep\")\n            when 'ls'\n                execute_cmd(\"ls \" + cmd)\n            when 'plist'\n                execute_plistbuddy(cmd)\n            when 'CFBundleShortVersionString'\n                execute_plistbuddy(cmd, opt)\n            when 'kMDItemVersion'\n                execute_cmd(\"mdls -name kMDItemVersion \" + cmd, true)\n            else\n                path = `#{\"which \" + cmd}`.chomp\n                if path == '' \n                    print $prompt + cmd + \": command not found\\n\"\n                else\n                    print $prompt + path + \" \" + opt + \"\\n\"\n                    lsl = `#{\"ls -l \" + path}`\n                    if lsl.include?(\" -> \")\n                        puts lsl.scan(/(\\/.*)/)[0]\n                    end\n                    puts `#{\"file \" + path}`\n                    puts run_cmd(cmd, opt)\n                end\n            end\n            print \"\\n\"\n        end\n    }\nend\n\nif $0 == __FILE__\n  main(ARGV)\n  exit(0)\nend\n\n\n\u3053\u3093\u306b\u3061\u306f\u3002\n\u4e00\u62ec\u3067\u30b3\u30de\u30f3\u30c9\uff08\u8907\u6570\uff09\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8868\u793a\u3055\u305b\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\uff08MacOSX\u5411\u3051\uff09\u3002\u4ed6\u306e\u6b32\u3057\u3044\u4e00\u89a7\u3082\u8868\u793a\u3055\u305b\u308b\u305f\u3081\u306b\u51e6\u7406\u304c\u81a8\u3089\u3093\u3067\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n```\n$ ./checkv.rb\n:\n:\n% /usr/bin/ruby -v\n/usr/bin/ruby: Mach-O universal binary with 2 architectures\n/usr/bin/ruby (for architecture x86_64):        Mach-O 64-bit executable x86_64\n/usr/bin/ruby (for architecture i386):  Mach-O executable i386\nruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin13]\n:\n:\n```\n\n```\n$ ./checkv.rb |grep \"not\\ found\\|No\\ such\"\nsh: R: command not found\nsh: macgem: command not found\n% mdls -name kMDItemVersion /Applications/Utilities/X11.app: No such file or directory\n% cat /etc/redhat-release: No such file or directory\n% lua: command not found\n% sage: command not found\n:\n:\n```\n\n```checkv.rb\n#!/usr/bin/ruby\nrequire 'yaml'\n\n$prompt = \"% \"\n$commands_to_be_checked_yml = <<EOS\n\"\":\n    - \"uname -a\"\n    - \"sw_vers\"\n    - \"hostinfo\"\n    - \"mdimport -L\"\n    - \"mdutil -sa |grep -B 1 disabled\"\n    - \"qlmanage -m | sed -E 's/^.* -> \\(.*\\)$/\\\\\\\\1/' | grep -E ^/ |sort |uniq\"\n    - \"ioreg -l -p IODeviceTree \\| grep firmware\"\n    - \"ifconfig en0 \\|grep 'inet '\"\n    - \"ifconfig en1 \\|grep 'inet '\"\n    - \"getconf LONG_BIT\"\n    - \"file /mach_kernel\"\n    - \"xcode-select -print-path\"\n    - \"brew --config\"\n    - \"brew list --versions \\| awk '{printf(\\\\\"%-18s %s\\\\\\\\n\\\\\",$1,$2)}'\"\n    - \"R CMD config --ldflags\"\n    - \"echo 'cat(.Library)' | R --vanilla --slave \"\n    - \"echo 'system(paste(\\\\\"ls\\\\\", .Library))' | R --vanilla --slave \"\n\"ls\":\n    - ~/Library/QuickLook /Library/QuickLook /System/Library/QuickLook\n    - ~/Library/QuickTime /Library/QuickTime /System/Library/QuickTime\n\"list\":\n    - gem\n    - macgem\n\"plist\":\n    - /Library/Preferences/SystemConfiguration/com.apple.Boot.plist\n\"CFBundleShortVersionString\":\n    - /Applications/Utilities/XQuartz.app/Contents/Info.plist\n    - /Applications/Xcode.app/Contents/version.plist\n    - /Applications/Safari.app/Contents/version.plist\n\"kMDItemVersion\":\n    - /Applications/Utilities/X11.app\n    - /Applications/Utilities/XQuartz.app\n    - /Applications/Xcode.app\n    - /Applications/Safari.app\n\"cat\":\n    - /etc/redhat-release\n    - ~/.bash_profile\n\"echo\":\n    - CC\n    - SHELL\n    - PATH\n    - MANPATH\n    - ARCHFLAGS\n    - SAGE_ROOT\n    - PGDATA\n    - GOPATH\n\"ps\":\n    - httpd\n    - postgres\n\"-l\":\n    - apachectl\n\"-v\":\n    - lua\n    - sage\n    - perl\n    - ruby\n    - php\n    - httpd\n    - gem\n    - macgem\n    - cvs\n    - unzip\n    - gs\n    - pdftotext\n    - macruby\n    - apachectl\n\"-V\":\n    - sudo\n    - ssh\n    - smbd\n    - grep\n    - /usr/bin/grep\n    - nano\n    - dot\n    - less\n    - lv\n    - nkf\n    - gzip\n    - zcat\n    - lzma\n    - curl\n    - wget\n    - clamscan\n    - clamdscan\n    - freshclam\n\"-version\":\n    - emacs\n    - sqlite3\n    - X\n    - /usr/X11R6/bin/X\n    - Xquartz\n    - lynx\n    - scala\n\"--version\":\n    - bash\n    - tcsh\n    - zsh\n    - gcc\n    - llvm-gcc\n    - clang\n    - gcc-4.2\n    - cc\n    - CC\n    - nvcc\n    - gdb\n    - lldb\n    - gfortran\n    - gfortran-4.2\n    - vim\n    - awk\n    - sed\n    - /usr/bin/sed # Darwin sed bundled in MacOSX\n    - tar\n    - /usr/bin/tar # bsdtar bundled in MacOSX\n    - rails\n    - brew\n    - pip\n    - python\n    - ipython\n    - pip3\n    - python3\n    - ipython3\n    - /usr/bin/python # python bundled in MacOSX\n    - R\n    - r\n    - svn\n    - /Applications/Xcode.app/Contents/Developer/usr/bin/svn\n    - git\n    - /usr/bin/git\n    - doxygen\n    - m4\n    - autoconf\n    - automake\n    - iconv\n    - glibtool\n    - platex\n    - uplatex\n    - xz\n    - psql\n    - julia\n\"version\":\n    - go\n    - openssl\n...\nEOS\n\ndef run_cmd(cmd, opt=\"\")\n    return `#{cmd + \" \" + opt + \" 2>&1\"}`  # for sh/bash\nend\n\ndef execute_cmd(cmd, checkfile=false)\n    print $prompt + cmd\n    cmdfile = cmd.split()[-1]\n    if !checkfile || File.exist?(File.expand_path(cmdfile))\n        puts \"\\n\" + run_cmd(cmd)\n    else\n        print \": No such file or directory\\n\"\n    end\nend\n\ndef execute_plistbuddy(cmd, pentry=\"\")\n    pr = \"'Print \" + pentry + \"'\"\n    execute_cmd(\"/usr/libexec/PlistBuddy -c #{pr} \" + cmd, true)\nend\n\ndef main(argv)\n    YAML.load($commands_to_be_checked_yml).each {|opt, cmds|\n        for cmd in cmds\n            case opt\n            when ''\n                execute_cmd(cmd)\n            when 'cat'\n                execute_cmd(\"cat \" + cmd, true)\n            when 'echo'\n                execute_cmd(\"echo $\" + cmd)\n            when 'list'\n                execute_cmd(cmd + \" list\")\n            when 'ps'\n                execute_cmd(\"ps aux |grep \" + cmd + \" |grep -v grep\")\n            when 'ls'\n                execute_cmd(\"ls \" + cmd)\n            when 'plist'\n                execute_plistbuddy(cmd)\n            when 'CFBundleShortVersionString'\n                execute_plistbuddy(cmd, opt)\n            when 'kMDItemVersion'\n                execute_cmd(\"mdls -name kMDItemVersion \" + cmd, true)\n            else\n                path = `#{\"which \" + cmd}`.chomp\n                if path == '' \n                    print $prompt + cmd + \": command not found\\n\"\n                else\n                    print $prompt + path + \" \" + opt + \"\\n\"\n                    lsl = `#{\"ls -l \" + path}`\n                    if lsl.include?(\" -> \")\n                        puts lsl.scan(/(\\/.*)/)[0]\n                    end\n                    puts `#{\"file \" + path}`\n                    puts run_cmd(cmd, opt)\n                end\n            end\n            print \"\\n\"\n        end\n    }\nend\n\nif $0 == __FILE__\n  main(ARGV)\n  exit(0)\nend\n```\n", "tags": ["Ruby", "UNIX", "MacOSX"]}