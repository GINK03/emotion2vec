{"context": "\n\n\u306f\u3058\u3081\u306b\nHot\u306aObservable\u3068\u306f\u4f55\u306a\u306e\u304b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u7406\u89e3\u3057\u3066\u307f\u308b\n\u66f8\u3044\u3066\u308b\u9593\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u8aad\u3093\u3067\u3044\u305f\u3089\u5272\u3068Cold\u306e\u6319\u52d5\u3082\u3061\u3083\u3093\u3068\u628a\u63e1\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3053\u3068\u306b\u6c17\u304c\u3064\u3044\u305f\u306e\u3067\u3053\u308c\u306b\u3064\u3044\u3066\u306e\u8aad\u89e3\u8a18\u4e8b\u3067\u3059\u3002\nUniRx\u306e\u307b\u3046\u304c\u672c\u5bb6\u3088\u308a\u7406\u89e3\u3057\u3084\u3059\u3044\u306e\u3067\u3053\u3063\u3061\u3092\u8aad\u307f\u306a\u304c\u3089\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n2\u7a2e\u985e\u306eCold\u306aIObservable\nCold\u306aIObservable\u306f\u4eca\u56de\u6b21\u306e\u4e8c\u7a2e\u985e\u306b\u5206\u3051\u3066\u7d10\u89e3\u3044\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u81ea\u5206\u81ea\u8eab\u304c\u5024\u3092\u4f5c\u6210\u3057\u3066\u3044\u304f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30bf\u30a4\u30d7\n\n\nReturn\u3084Range,\u305d\u308c\u304b\u3089Create\u306bTimer\u7b49\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30a4\u30f3\u306e\u5148\u982d\u306b\u6765\u308bIObservable\n\n\n\u6d41\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u3066\u4e0b\u6d41\u306b\u6d41\u3057\u3066\u3044\u304f\u30aa\u30da\u30ec\u30fc\u30bf\u30bf\u30a4\u30d7\n\n\nSelect,Where\u306a\u3069\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u3084\u6f14\u7b97\u5b50\u3068\u547c\u3070\u308c\u308bIObservable\n\n\n\n\u4eca\u56de\u3053\u306e\u4e8c\u7a2e\u985e\u306b\u3064\u3044\u3066\u89e3\u8aac\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u81ea\u5206\u81ea\u8eab\u304c\u5024\u3092\u4f5c\u6210\u3057\u3066\u3044\u304f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30bf\u30a4\u30d7\n\u307e\u305a\u3001\u3068\u3066\u3082\u7406\u89e3\u3057\u3084\u3059\u3044\u306e\u3067\u3053\u3061\u3089\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\u4e00\u756a\u7c21\u5358\u306aReturn\u30e1\u30bd\u30c3\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u3063\u3066\u3069\u3046\u3044\u3046\u51e6\u7406\u304c\u3055\u308c\u308b\u306e\uff1f\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\nObservable.Return(1).Subscribe( Foo );\n\n\u4ee5\u4e0bReturn\u30e1\u30bd\u30c3\u30c9\u306e\u629c\u7c8b\u3067\u3059\n\nAssets\\Plugins\\UniRx\\Scripts\\Observable.Creation.cs\n        public static IObservable<T> Return<T>(T value)\n        {\n            return Return<T>(value, Scheduler.DefaultSchedulers.ConstantTimeOperations);\n        }\n\n        public static IObservable<T> Return<T>(T value, IScheduler scheduler)\n        {\n            if (scheduler == Scheduler.Immediate)\n            {\n                return new ImmediateReturnObservable<T>(value);\n            }\n            else\n            {\n                return new ReturnObservable<T>(value, scheduler);\n            }\n        }\n\n\nScheduler.DefaultSchedulers.ConstantTimeOperations\u3068Scheduler.Immediate\u306f\u57fa\u672c\u7684\u306b\u540c\u3058\u3082\u306e\u3092\u6307\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u307e\u305f\u4eca\u56deScheduler\u306e\u8aac\u660e\u306f\u3057\u306a\u3044\u306e\u3067\u3053\u3053\u3067\u306f\u4ee5\u4e0b\u306eImmediateReturnObservable\u304c\u8fd4\u3055\u308c\u308b\u3068\u3057\u3066\u8a71\u3092\u3059\u3059\u3081\u307e\u3059\u3002\nreturn new ImmediateReturnObservable<T>(value);\n\n\u3053\u306e\u30af\u30e9\u30b9\u306e\u629c\u7c8b\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\nAssets\\Plugins\\UniRx\\Scripts\\Operators\\Return.cs\n    internal class ImmediateReturnObservable<T> : IObservable<T>, IOptimizedObservable<T>\n    {\n        readonly T value;\n\n        public ImmediateReturnObservable(T value)\n        {\n            this.value = value;\n        }\n\n        /* \u4eca\u56de\u306e\u89e3\u8aac\u3067\u4f7f\u7528\u3057\u306a\u30441\u30e1\u30bd\u30c3\u30c9\u306a\u306e\u3067\u7565 */\n\n        public IDisposable Subscribe(IObserver<T> observer)\n        {\n            observer.OnNext(value);\n            observer.OnCompleted();\n            return Disposable.Empty;\n        }\n    }\n\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\nSubscribe\u30e1\u30bd\u30c3\u30c9\u3092\u307f\u3066\u307f\u308b\u3068observer\u306bOnNext\u3067\u5024\u3092\u5165\u308c\u3066OnCompleted\u3067\u5b8c\u4e86\u901a\u77e5\u3057\u3066\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u3067\u304d\u306a\u3044\u306e\u3067Disposable.Empty\u3068\u3044\u3046\u7121\u610f\u5473\u306aDisposable\u3092\u5165\u308c\u307e\u3059\u3002\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u305f\u3073\u306b\u5f15\u6570\u306b\u6bce\u56de\u540c\u3058\u3088\u3046\u306bOnNext\u306a\u3069\u306e\u64cd\u4f5c\u3092\u3059\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\u3055\u3066\u3001\u3088\u304f\u898b\u308b\u3068\u5f15\u6570\u304cFunc<T>\u3068\u304b\u3067\u306f\u306a\u304fIObserver<T>\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u306f\u3053\u3053\u306f\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066IObservable<T>\u306b\u306fSubscribe(IObserver<T> observer)\u3057\u304b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u305d\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u898b\u306b\u884c\u304d\u307e\u3059\u3002\n\nAssets\\Plugins\\UniRx\\Scripts\\Observer.cs\n\n        public static IDisposable Subscribe<T>(this IObservable<T> source, Action<T> onNext)\n        {\n            return source.Subscribe(Observer.CreateSubscribeObserver(onNext, Stubs.Throw, Stubs.Nop));\n        }\n\n        internal static IObserver<T> CreateSubscribeObserver<T>(Action<T> onNext, Action<Exception> onError, Action onCompleted)\n        {\n            /* \u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u30b3\u30fc\u30c9\u3092\u7701\u7565\u3057\u307e\u3057\u305f */\n            return new Subscribe<T>(onNext, onError, onCompleted);\n        }\n\n\n\n\u3053\u306e\u5ba3\u8a00\u3092\u89c0\u3066\u3082\u3089\u3048\u3070\u5206\u304b\u308b\u901a\u308aSubscribe(this IObservable source, Action onNext)\u306fSubscribe\u3068\u3044\u3046Observer\u3092\u6e21\u3055\u308c\u305f\u5f15\u6570\u306eFunc<T>\u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3057\u3066\u305d\u308c\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\u3058\u3083\u3042\u3001\u3053\u3044\u3064\u306a\u3093\u306a\u306e\uff1f\u3068\u8a00\u3046\u3068\u4ee5\u4e0b\u3067\u3059\u3002\n\nAssets\\Plugins\\UniRx\\Scripts\\Observer.cs\n        class Subscribe<T> : IObserver<T>\n        {\n            readonly Action<T> onNext;\n            readonly Action<Exception> onError;\n            readonly Action onCompleted;\n\n            int isStopped = 0;\n\n            public Subscribe(Action<T> onNext, Action<Exception> onError, Action onCompleted)\n            {\n                this.onNext = onNext;\n                this.onError = onError;\n                this.onCompleted = onCompleted;\n            }\n\n            public void OnNext(T value)\n            {\n                if (isStopped == 0)\n                {\n                    onNext(value);\n                }\n            }\n\n            public void OnError(Exception error)\n            {\n                if (Interlocked.Increment(ref isStopped) == 1)\n                {\n                    onError(error);\n                }\n            }\n\n\n            public void OnCompleted()\n            {\n                if (Interlocked.Increment(ref isStopped) == 1)\n                {\n                    onCompleted();\n                }\n            }\n        }\n\n\nInterlocked.Increment\u306f\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u306a\u306e\u3067\u3001\u8981\u3059\u308b\u306bOnNext,OnError,OnCompleted\u304c\u547c\u3070\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u547c\u3093\u3067\u308b\u3060\u3051\u3067\u3059\u3002\n\u7d50\u5c40Observable.Return(1).Subscribe(Foo)\u306f\n\nFoo\u304c\u767b\u9332\u3055\u308c\u305fSubscribe<T>\u304c\u4f5c\u3089\u308c\u308b\n\u305d\u306eSubscribe<T>\u304cObservable.Return(1)\u306eSubscribe\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3055\u308c\u308b\n\u3053\u306eSubscribe\u306fSubscribe<T>.OnNext(1)\u3092\u547c\u3073\u51fa\u3059\u3002\nOnNext\u306f\u767b\u9332\u3055\u308c\u305fonNext\u3067\u3042\u308bFoo(1)\u3092\u547c\u3073\u51fa\u3059\u3002\n\n\u3068\u3044\u3046\u306a\u304c\u308c\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u308c\u3067Return\u306e\u6d41\u308c\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u57fa\u672c\u7684\u306a\u6d41\u308c\u304c\u3064\u304b\u3081\u305f\u3068\u3053\u308d\u3067\u3082\u3046\u4e00\u3064Timer\u3092\u8aad\u3093\u3067\u307f\u307e\u3059\u3002\n\n\\Assets\\Plugins\\UniRx\\Scripts\\Observable.Time.cs\n\n        public static IObservable<long> Timer(TimeSpan dueTime)\n        {\n            return new TimerObservable(dueTime, null, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n\n\n\n\\Assets\\Plugins\\UniRx\\Scripts\\Operators\\Timer.cs\n    internal class TimerObservable : OperatorObservableBase<long>\n    {\n        readonly DateTimeOffset? dueTimeA;\n        readonly TimeSpan? dueTimeB;\n        readonly TimeSpan? period;\n        readonly IScheduler scheduler;\n\n       /* DateTimeOffset\u306f\u4eca\u56de\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067\u4e2d\u7565 */\n\n        public TimerObservable(TimeSpan dueTime, TimeSpan? period, IScheduler scheduler)\n            : base(scheduler == Scheduler.CurrentThread)\n        {\n            this.dueTimeB = dueTime;\n            this.period = period;\n            this.scheduler = scheduler;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<long> observer, IDisposable cancel)\n        {\n            var timerObserver = new Timer(observer, cancel);\n\n            var dueTime = (dueTimeA != null)\n                ? dueTimeA.Value - scheduler.Now\n                : dueTimeB.Value;\n\n            // one-shot\n            if (period == null)\n            {\n                return scheduler.Schedule(Scheduler.Normalize(dueTime), () =>\n                {\n                    timerObserver.OnNext();\n                    timerObserver.OnCompleted();\n                });\n            }\n            /* \u4ee5\u4e0bInterval\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u3067\u306e\u5229\u7528\u306a\u306e\u3067\u7565 */\n         }\n\n\nSubscribeCore\u306fOperatorObservableBase\u306eSubscribe\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u3068\u304d\u306e\u30e1\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u57fa\u672c\u7684\u306bSubscribe\u30e1\u30bd\u30c3\u30c9\u3060\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\u3002( cancel\u306f\u4eca\u56de\u7121\u8996\u3067\u3044\u3044\u3067\u3059)\n\u3053\u308c\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nTimer\u30af\u30e9\u30b9\u306fOnNext\u3055\u308c\u308b\u305f\u3073\u306b\u5f15\u6570\u306eobserver\u306bobserver.OnNext(onNext\u3057\u305f\u56de\u6570);\u3092\u3059\u308bObserver\u3067\u3059\u3002\u96e3\u3057\u304f\u306a\u3044\u306e\u3067\u6c17\u306b\u306a\u308b\u306a\u3089\u8aad\u307f\u306b\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u6b21\u306e\u90e8\u5206\u306fdueTime\u5f8c\u306btimerObserver.OnNext();\u3068timerObserver.OnCompleted();\u3092\u5b9f\u884c\u3059\u308b\u3088\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\u623b\u308a\u5024\u306f\u304a\u306a\u3058\u307f\u306eDispose\u3055\u308c\u305f\u3089\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u3084\u3064\u3067\u3059\u3002\n return scheduler.Schedule(Scheduler.Normalize(dueTime), () =>\n                {\n                    timerObserver.OnNext();\n                    timerObserver.OnCompleted();\n                });\n\n\u307e\u3068\u3081\u308b\u3068Timer\u30e1\u30bd\u30c3\u30c9\u306eSubscribe\u306f\n\nTimer\u3068\u3044\u3046observer\u3092\u4f5c\u308b\n\u6642\u9593\u306b\u306a\u3063\u305f\u3089Timer\u306eOnNext\u3068OnComplete\u3092\u547c\u3076\n\u7d50\u5c40\u5f15\u6570\u3067\u6e21\u3055\u308c\u305fobserver\u306eOnNext\u304c\u547c\u3070\u308c\u308b\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\u3053\u3053\u307e\u3067\u898b\u308b\u3068\u308f\u304b\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u30af\u30e9\u30b9\u306fSubscribe\u30e1\u30bd\u30c3\u30c9\u3067\u6e21\u3055\u308c\u305fobserver\u3092\u8a18\u61b6\u3057\u307e\u305b\u3093\u3002\n\u623b\u308a\u5024\u306eIDisposable\u3082timerObserver\u3082\u8a18\u61b6\u3057\u307e\u305b\u3093\u3002\n\u3064\u307e\u308a\u4e8c\u56de\u4ee5\u4e0a\u547c\u3070\u308c\u305f\u3089\u4f55\u5ea6\u3082\u4f5c\u308a\u76f4\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306d\u3002\u526f\u4f5c\u7528\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u4e00\u56de\u76ee\u306eobserver\u3067\u306e\u623b\u308a\u5024\u3068\u4e8c\u56de\u76ee\u306eobserver'\u3067\u306e\u623b\u308a\u5024\u306b\u4e00\u5207\u95a2\u4fc2\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u7121\u95a2\u4fc2\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305fCold\u306e\u6027\u8cea\u3067\u3042\u308b\u306eSubscribe\u3055\u308c\u308b\u307e\u3067\u78ba\u304b\u306b\u4f55\u3082\u3057\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3075\u3080\u306a\u308b\u307b\u3069\u3053\u308c\u304cCold\u304b\n\u3068\u3044\u3046\u308f\u3051\u3067\u6b21\u306f\u30aa\u30da\u30ec\u30fc\u30bf\u30bf\u30a4\u30d7\u3092\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u6d41\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u3066\u4e0b\u6d41\u306b\u6d41\u3057\u3066\u3044\u304f\u30aa\u30da\u30ec\u30fc\u30bf\u30bf\u30a4\u30d7\n\u4eca\u56de\u306f\u7c21\u5358\u306aWhere\u306b\u767b\u5834\u3057\u3066\u3082\u3089\u3044\u307e\u3059\u3002\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u307e\u3059\n\n\\Assets\\Plugins\\UniRx\\Scripts\\Observable.cs\n\n        public static IObservable<T> Where<T>(this IObservable<T> source, Func<T, bool> predicate)\n        {\n            /* \u6700\u9069\u5316\u306e\u305f\u3081\u306e\u90e8\u5206\u306a\u306e\u3067\u4e2d\u7565 */\n\n            return new WhereObservable<T>(source, predicate);\n        }\n\n\n\n\n    internal class WhereObservable<T> : OperatorObservableBase<T>\n    {\n        readonly IObservable<T> source;\n        readonly Func<T, bool> predicate;\n        readonly Func<T, int, bool> predicateWithIndex;\n\n        public WhereObservable(IObservable<T> source, Func<T, bool> predicate)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.predicate = predicate;\n        }\n\n        /* \u6700\u9069\u5316\u90e8\u5206\u306a\u306e\u3067\u4e2d\u7565 */\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            /* \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4ed8\u304d\u8ff0\u8a9e\u306e\u305f\u3081\u306eif\u304c\u3042\u308b\u306e\u3067\u524a\u9664 */\n            return source.Subscribe(new Where(this, observer, cancel));\n\n        }\n    }\n\n        class Where : OperatorObserverBase<T, T>\n        {\n            readonly WhereObservable<T> parent;\n\n            public Where(WhereObservable<T> parent, IObserver<T> observer, IDisposable cancel)\n                : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public override void OnNext(T value)\n            {\n                var isPassed = false;\n                try\n                {\n                    isPassed = parent.predicate(value);\n                }\n                catch (Exception ex)\n                {\n                    try { observer.OnError(ex); } finally { Dispose(); }\n                    return;\n                }\n\n                if (isPassed)\n                {\n                    observer.OnNext(value);\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); } finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                try { observer.OnCompleted(); } finally { Dispose(); }\n            }\n        }\n\n\n\u3053\u3061\u3089\u306e\u30bf\u30a4\u30d7\u3068\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u578b\u3068\u3067\u552f\u4e00\u306e\u9055\u3044\u306fIObservable source\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u8981\u6c42\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u3059\u3002\n\u3053\u3061\u3089\u306f\u5165\u529b\u3092\u524d\u306e\u30c7\u30fc\u30bf\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u4ee5\u5916\u306f\u307b\u3068\u3093\u3069\u540c\u3058\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nSubscribeCore\u306fsource\u306bWhere\u3068\u3044\u3046Observer\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\nWhere\u306fOnNext\u3055\u308c\u308b\u3068\u30d5\u30a3\u30eb\u30bf\u95a2\u6570\u3067\u3042\u308bpredicate\u306e\u7d50\u679c\u3092\u307f\u3066observer\u306eOnNext\u3059\u308b\u304b\u6368\u3066\u308b\u304b\u3092\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3060\u3051\uff01\n\u7d50\u5c40\u3084\u3063\u3071\u308aSubscribe\u3059\u308b\u307e\u3067\u306fsource\u306b\u4f55\u304b\u5024\u304c\u5165\u3063\u3066\u304d\u3066\u3082\u4f55\u3082\u3057\u3066\u307e\u305b\u3093\u306d\u3002source\u304cHot\u306a\u30fb\u30fb\u30fb\u4f8b\u3048\u3070ReactiveProperty\u3067\u3042\u3063\u3066\u3082\u305f\u308c\u306a\u304c\u3057\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u308c\u3082Subscribe\u3057\u305f\u3068\u304d\u306e\u60c5\u5831\u3092\u4fdd\u6301\u3057\u307e\u305b\u3093\u3002\n\u3053\u3053\u307e\u3067\u307f\u3066\u3044\u304f\u3068\nvar observable = Observable.Return(1).Where()\u306eobservable\u306b\u306fWhere\u30af\u30e9\u30b9(source=Return)\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067observable.Subscribe(observer)\u3068\u3059\u308b\u3068\u3001Where\u306eSubscribe\u304c\u547c\u3070\u308c\u308b->source\u306fReturn\u3060\u304b\u3089Return\u306eSubscribe\u304c\u547c\u3070\u308c\u308b->Return\u306fWhere\u306eOnNext\u3092\u547c\u3076->Where\u306fobserver\u306eOnNext\u3092\u547c\u3076\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\u3053\u308c\u306a\u3093\u304b\u3044\u3044\u4f8b\u3048\u306a\u3044\u304b\u306a\u30fc\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u3051\u3069\nSubscribe\u3059\u308b\u305f\u3073\u306b\u5c02\u7528\u306e\u30c7\u30fc\u30bf\u306e\u901a\u308a\u9053\u304c\u4e00\u672c\u4e00\u672c\u3067\u304d\u308b\u611f\u3058\u304b\u306a\u3041\u3068\u601d\u3044\u307e\u3059\u3002\n\u3042\u3068\u4e00\u672c\u3046\u3069\u3093\u60f3\u50cf\u3057\u307e\u3057\u305f\u3002\n\u3053\u308c\u3067\u57fa\u672c\u7684\u306aRx\u306e\u6d41\u308c\u306f\u3059\u3079\u3066\u8ffd\u3046\u3053\u3068\u304c\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u7d50\u8ad6\nCold\u306aIObservable\u3068\u3044\u3046\u306e\u306f\u63a5\u7d9a\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u306f\u4f55\u3082\u3057\u306a\u3044\u3002\n\u4e0a\u6d41\u306eIObservable\u3084\u5fc5\u8981\u306a\u5024\u3092\u4fdd\u6301\u3059\u308b\u3060\u3051\u3002\nSubscribe\u3055\u308c\u305f\u3068\u304d\u306b\u5f15\u6570\u306eobserver\u306b\u5024\u3092\u6d41\u3057\u305f\u308a\u6d41\u3059\u4e88\u7d04\u3092\u3057\u305f\u308a\u4e0a\u6d41\u3068Subscribe\u3067\u3064\u306a\u3052\u305f\u308a\u3059\u308b\u3002\n\u3053\u306e\u3068\u304d\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u305b\u305aSubscribe\u304c\u547c\u3070\u308c\u308b\u305f\u3073\u306b\u65b0\u3057\u304f\u3064\u306a\u304e\u76f4\u3057\u3066\u4f7f\u3044\u56de\u3057\u306f\u3057\u306a\u3044\u3002\n# \u306f\u3058\u3081\u306b #\n\n[Hot\u306aObservable\u3068\u306f\u4f55\u306a\u306e\u304b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u7406\u89e3\u3057\u3066\u307f\u308b](http://qiita.com/Marimoiro/items/6e2b2b6944075d72c18f)\n\n\u66f8\u3044\u3066\u308b\u9593\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u8aad\u3093\u3067\u3044\u305f\u3089\u5272\u3068Cold\u306e\u6319\u52d5\u3082\u3061\u3083\u3093\u3068\u628a\u63e1\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3053\u3068\u306b\u6c17\u304c\u3064\u3044\u305f\u306e\u3067\u3053\u308c\u306b\u3064\u3044\u3066\u306e\u8aad\u89e3\u8a18\u4e8b\u3067\u3059\u3002\n\n[UniRx](https://github.com/neuecc/UniRx/tree/master/Assets/Plugins/UniRx/Scripts)\u306e\u307b\u3046\u304c\u672c\u5bb6\u3088\u308a\u7406\u89e3\u3057\u3084\u3059\u3044\u306e\u3067\u3053\u3063\u3061\u3092\u8aad\u307f\u306a\u304c\u3089\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n# 2\u7a2e\u985e\u306eCold\u306aIObservable #\n\nCold\u306aIObservable\u306f\u4eca\u56de\u6b21\u306e\u4e8c\u7a2e\u985e\u306b\u5206\u3051\u3066\u7d10\u89e3\u3044\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n1. \u81ea\u5206\u81ea\u8eab\u304c\u5024\u3092\u4f5c\u6210\u3057\u3066\u3044\u304f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30bf\u30a4\u30d7\n   * Return\u3084Range,\u305d\u308c\u304b\u3089Create\u306bTimer\u7b49\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30a4\u30f3\u306e\u5148\u982d\u306b\u6765\u308bIObservable\n2. \u6d41\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u3066\u4e0b\u6d41\u306b\u6d41\u3057\u3066\u3044\u304f\u30aa\u30da\u30ec\u30fc\u30bf\u30bf\u30a4\u30d7\n   * Select,Where\u306a\u3069\u306e\u30aa\u30da\u30ec\u30fc\u30bf\u3084\u6f14\u7b97\u5b50\u3068\u547c\u3070\u308c\u308bIObservable\n\n\u4eca\u56de\u3053\u306e\u4e8c\u7a2e\u985e\u306b\u3064\u3044\u3066\u89e3\u8aac\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u81ea\u5206\u81ea\u8eab\u304c\u5024\u3092\u4f5c\u6210\u3057\u3066\u3044\u304f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30bf\u30a4\u30d7 #\n\n\u307e\u305a\u3001\u3068\u3066\u3082\u7406\u89e3\u3057\u3084\u3059\u3044\u306e\u3067\u3053\u3061\u3089\u3092\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\u4e00\u756a\u7c21\u5358\u306aReturn\u30e1\u30bd\u30c3\u30c9\u3092\u8aad\u3093\u3067\u3044\u304d\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u3063\u3066\u3069\u3046\u3044\u3046\u51e6\u7406\u304c\u3055\u308c\u308b\u306e\uff1f\u3068\u3044\u3046\u8a71\u3067\u3059\u3002\n\n```csharp\nObservable.Return(1).Subscribe( Foo );\n```\n\n\u4ee5\u4e0bReturn\u30e1\u30bd\u30c3\u30c9\u306e\u629c\u7c8b\u3067\u3059\n\n```csharp:Assets\\Plugins\\UniRx\\Scripts\\Observable.Creation.cs\n        public static IObservable<T> Return<T>(T value)\n        {\n            return Return<T>(value, Scheduler.DefaultSchedulers.ConstantTimeOperations);\n        }\n\n        public static IObservable<T> Return<T>(T value, IScheduler scheduler)\n        {\n            if (scheduler == Scheduler.Immediate)\n            {\n                return new ImmediateReturnObservable<T>(value);\n            }\n            else\n            {\n                return new ReturnObservable<T>(value, scheduler);\n            }\n        }\n```\n\nScheduler.DefaultSchedulers.ConstantTimeOperations\u3068Scheduler.Immediate\u306f\u57fa\u672c\u7684\u306b\u540c\u3058\u3082\u306e\u3092\u6307\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u307e\u305f\u4eca\u56deScheduler\u306e\u8aac\u660e\u306f\u3057\u306a\u3044\u306e\u3067\u3053\u3053\u3067\u306f\u4ee5\u4e0b\u306eImmediateReturnObservable\u304c\u8fd4\u3055\u308c\u308b\u3068\u3057\u3066\u8a71\u3092\u3059\u3059\u3081\u307e\u3059\u3002\n\n```\nreturn new ImmediateReturnObservable<T>(value);\n```\n\n\u3053\u306e\u30af\u30e9\u30b9\u306e\u629c\u7c8b\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp:Assets\\Plugins\\UniRx\\Scripts\\Operators\\Return.cs\n    internal class ImmediateReturnObservable<T> : IObservable<T>, IOptimizedObservable<T>\n    {\n        readonly T value;\n\n        public ImmediateReturnObservable(T value)\n        {\n            this.value = value;\n        }\n\n        /* \u4eca\u56de\u306e\u89e3\u8aac\u3067\u4f7f\u7528\u3057\u306a\u30441\u30e1\u30bd\u30c3\u30c9\u306a\u306e\u3067\u7565 */\n\n        public IDisposable Subscribe(IObserver<T> observer)\n        {\n            observer.OnNext(value);\n            observer.OnCompleted();\n            return Disposable.Empty;\n        }\n    }\n```\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\nSubscribe\u30e1\u30bd\u30c3\u30c9\u3092\u307f\u3066\u307f\u308b\u3068observer\u306bOnNext\u3067\u5024\u3092\u5165\u308c\u3066OnCompleted\u3067\u5b8c\u4e86\u901a\u77e5\u3057\u3066\u3001\u30ad\u30e3\u30f3\u30bb\u30eb\u3067\u304d\u306a\u3044\u306e\u3067Disposable.Empty\u3068\u3044\u3046\u7121\u610f\u5473\u306aDisposable\u3092\u5165\u308c\u307e\u3059\u3002\n\n\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u305f\u3073\u306b\u5f15\u6570\u306b\u6bce\u56de\u540c\u3058\u3088\u3046\u306bOnNext\u306a\u3069\u306e\u64cd\u4f5c\u3092\u3059\u308b\u308f\u3051\u3067\u3059\u306d\u3002\n\n\u3055\u3066\u3001\u3088\u304f\u898b\u308b\u3068\u5f15\u6570\u304cFunc&lt;T&gt;\u3068\u304b\u3067\u306f\u306a\u304fIObserver&lt;T&gt;\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u306f\u3053\u3053\u306f\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066IObservable&lt;T&gt;\u306b\u306fSubscribe(IObserver&lt;T&gt; observer)\u3057\u304b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u305d\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u898b\u306b\u884c\u304d\u307e\u3059\u3002\n\n```Assets\\Plugins\\UniRx\\Scripts\\Observer.cs\n\n        public static IDisposable Subscribe<T>(this IObservable<T> source, Action<T> onNext)\n        {\n            return source.Subscribe(Observer.CreateSubscribeObserver(onNext, Stubs.Throw, Stubs.Nop));\n        }\n\n        internal static IObserver<T> CreateSubscribeObserver<T>(Action<T> onNext, Action<Exception> onError, Action onCompleted)\n        {\n            /* \u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u30b3\u30fc\u30c9\u3092\u7701\u7565\u3057\u307e\u3057\u305f */\n            return new Subscribe<T>(onNext, onError, onCompleted);\n        }\n\n```\n\n\u3053\u306e\u5ba3\u8a00\u3092\u89c0\u3066\u3082\u3089\u3048\u3070\u5206\u304b\u308b\u901a\u308aSubscribe<T>(this IObservable<T> source, Action<T> onNext)\u306fSubscribe\u3068\u3044\u3046Observer\u3092\u6e21\u3055\u308c\u305f\u5f15\u6570\u306eFunc&lt;T&gt;\u3092\u4f7f\u3063\u3066\u4f5c\u6210\u3057\u3066\u305d\u308c\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3058\u3083\u3042\u3001\u3053\u3044\u3064\u306a\u3093\u306a\u306e\uff1f\u3068\u8a00\u3046\u3068\u4ee5\u4e0b\u3067\u3059\u3002\n\n```cshap:Assets\\Plugins\\UniRx\\Scripts\\Observer.cs\n        class Subscribe<T> : IObserver<T>\n        {\n            readonly Action<T> onNext;\n            readonly Action<Exception> onError;\n            readonly Action onCompleted;\n\n            int isStopped = 0;\n\n            public Subscribe(Action<T> onNext, Action<Exception> onError, Action onCompleted)\n            {\n                this.onNext = onNext;\n                this.onError = onError;\n                this.onCompleted = onCompleted;\n            }\n\n            public void OnNext(T value)\n            {\n                if (isStopped == 0)\n                {\n                    onNext(value);\n                }\n            }\n\n            public void OnError(Exception error)\n            {\n                if (Interlocked.Increment(ref isStopped) == 1)\n                {\n                    onError(error);\n                }\n            }\n\n\n            public void OnCompleted()\n            {\n                if (Interlocked.Increment(ref isStopped) == 1)\n                {\n                    onCompleted();\n                }\n            }\n        }\n```\n\nInterlocked.Increment\u306f\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u306a\u306e\u3067\u3001\u8981\u3059\u308b\u306bOnNext,OnError,OnCompleted\u304c\u547c\u3070\u308c\u305f\u3089\u5bfe\u5fdc\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u547c\u3093\u3067\u308b\u3060\u3051\u3067\u3059\u3002\n\n\n\u7d50\u5c40Observable.Return(1).Subscribe(Foo)\u306f\n\n1. Foo\u304c\u767b\u9332\u3055\u308c\u305fSubscribe&lt;T&gt;\u304c\u4f5c\u3089\u308c\u308b\n2. \u305d\u306eSubscribe&lt;T&gt;\u304cObservable.Return(1)\u306eSubscribe\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3055\u308c\u308b\n3. \u3053\u306eSubscribe\u306fSubscribe&lt;T&gt;.OnNext(1)\u3092\u547c\u3073\u51fa\u3059\u3002\n4. OnNext\u306f\u767b\u9332\u3055\u308c\u305fonNext\u3067\u3042\u308bFoo(1)\u3092\u547c\u3073\u51fa\u3059\u3002\n\n\u3068\u3044\u3046\u306a\u304c\u308c\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u3067Return\u306e\u6d41\u308c\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\n\n\u57fa\u672c\u7684\u306a\u6d41\u308c\u304c\u3064\u304b\u3081\u305f\u3068\u3053\u308d\u3067\u3082\u3046\u4e00\u3064Timer\u3092\u8aad\u3093\u3067\u307f\u307e\u3059\u3002\n\n```csharp:\\Assets\\Plugins\\UniRx\\Scripts\\Observable.Time.cs\n\n        public static IObservable<long> Timer(TimeSpan dueTime)\n        {\n            return new TimerObservable(dueTime, null, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n```\n\n```csharp:\\Assets\\Plugins\\UniRx\\Scripts\\Operators\\Timer.cs\n    internal class TimerObservable : OperatorObservableBase<long>\n    {\n        readonly DateTimeOffset? dueTimeA;\n        readonly TimeSpan? dueTimeB;\n        readonly TimeSpan? period;\n        readonly IScheduler scheduler;\n\n       /* DateTimeOffset\u306f\u4eca\u56de\u4f7f\u7528\u3057\u306a\u3044\u306e\u3067\u4e2d\u7565 */\n\n        public TimerObservable(TimeSpan dueTime, TimeSpan? period, IScheduler scheduler)\n            : base(scheduler == Scheduler.CurrentThread)\n        {\n            this.dueTimeB = dueTime;\n            this.period = period;\n            this.scheduler = scheduler;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<long> observer, IDisposable cancel)\n        {\n            var timerObserver = new Timer(observer, cancel);\n\n            var dueTime = (dueTimeA != null)\n                ? dueTimeA.Value - scheduler.Now\n                : dueTimeB.Value;\n\n            // one-shot\n            if (period == null)\n            {\n                return scheduler.Schedule(Scheduler.Normalize(dueTime), () =>\n                {\n                    timerObserver.OnNext();\n                    timerObserver.OnCompleted();\n                });\n            }\n            /* \u4ee5\u4e0bInterval\u30e1\u30bd\u30c3\u30c9\u306a\u3069\u3067\u306e\u5229\u7528\u306a\u306e\u3067\u7565 */\n         }\n```\n\nSubscribeCore\u306fOperatorObservableBase\u306eSubscribe\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u3068\u304d\u306e\u30e1\u30a4\u30f3\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\u57fa\u672c\u7684\u306bSubscribe\u30e1\u30bd\u30c3\u30c9\u3060\u3068\u601d\u3063\u3066\u304f\u3060\u3055\u3044\u3002( cancel\u306f\u4eca\u56de\u7121\u8996\u3067\u3044\u3044\u3067\u3059)\n\u3053\u308c\u3092\u307f\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nTimer\u30af\u30e9\u30b9\u306fOnNext\u3055\u308c\u308b\u305f\u3073\u306b\u5f15\u6570\u306eobserver\u306bobserver.OnNext(onNext\u3057\u305f\u56de\u6570);\u3092\u3059\u308bObserver\u3067\u3059\u3002\u96e3\u3057\u304f\u306a\u3044\u306e\u3067\u6c17\u306b\u306a\u308b\u306a\u3089\u8aad\u307f\u306b\u884c\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u6b21\u306e\u90e8\u5206\u306fdueTime\u5f8c\u306btimerObserver.OnNext();\u3068timerObserver.OnCompleted();\u3092\u5b9f\u884c\u3059\u308b\u3088\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\u623b\u308a\u5024\u306f\u304a\u306a\u3058\u307f\u306eDispose\u3055\u308c\u305f\u3089\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u3084\u3064\u3067\u3059\u3002\n\n```\n return scheduler.Schedule(Scheduler.Normalize(dueTime), () =>\n                {\n                    timerObserver.OnNext();\n                    timerObserver.OnCompleted();\n                });\n```\n\n\u307e\u3068\u3081\u308b\u3068Timer\u30e1\u30bd\u30c3\u30c9\u306eSubscribe\u306f\n\n1. Timer\u3068\u3044\u3046observer\u3092\u4f5c\u308b\n2. \u6642\u9593\u306b\u306a\u3063\u305f\u3089Timer\u306eOnNext\u3068OnComplete\u3092\u547c\u3076\n3. \u7d50\u5c40\u5f15\u6570\u3067\u6e21\u3055\u308c\u305fobserver\u306eOnNext\u304c\u547c\u3070\u308c\u308b\n\n\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\u3053\u3053\u307e\u3067\u898b\u308b\u3068\u308f\u304b\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u30af\u30e9\u30b9\u306fSubscribe\u30e1\u30bd\u30c3\u30c9\u3067\u6e21\u3055\u308c\u305fobserver\u3092\u8a18\u61b6\u3057\u307e\u305b\u3093\u3002\n\u623b\u308a\u5024\u306eIDisposable\u3082timerObserver\u3082\u8a18\u61b6\u3057\u307e\u305b\u3093\u3002\n\u3064\u307e\u308a**\u4e8c\u56de\u4ee5\u4e0a\u547c\u3070\u308c\u305f\u3089\u4f55\u5ea6\u3082\u4f5c\u308a\u76f4\u3059**\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u306d\u3002\u526f\u4f5c\u7528\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u4e00\u56de\u76ee\u306eobserver\u3067\u306e\u623b\u308a\u5024\u3068\u4e8c\u56de\u76ee\u306eobserver'\u3067\u306e\u623b\u308a\u5024\u306b\u4e00\u5207\u95a2\u4fc2\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u7121\u95a2\u4fc2\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u305fCold\u306e\u6027\u8cea\u3067\u3042\u308b\u306e**Subscribe\u3055\u308c\u308b\u307e\u3067\u78ba\u304b\u306b\u4f55\u3082\u3057\u3066\u3044\u306a\u3044**\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3075\u3080\u306a\u308b\u307b\u3069\u3053\u308c\u304cCold\u304b\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u6b21\u306f\u30aa\u30da\u30ec\u30fc\u30bf\u30bf\u30a4\u30d7\u3092\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n# \u6d41\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u3066\u4e0b\u6d41\u306b\u6d41\u3057\u3066\u3044\u304f\u30aa\u30da\u30ec\u30fc\u30bf\u30bf\u30a4\u30d7 #\n\n\u4eca\u56de\u306f\u7c21\u5358\u306aWhere\u306b\u767b\u5834\u3057\u3066\u3082\u3089\u3044\u307e\u3059\u3002\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u3063\u3066\u307e\u3059\n\n```csharp:\\Assets\\Plugins\\UniRx\\Scripts\\Observable.cs\n\n        public static IObservable<T> Where<T>(this IObservable<T> source, Func<T, bool> predicate)\n        {\n            /* \u6700\u9069\u5316\u306e\u305f\u3081\u306e\u90e8\u5206\u306a\u306e\u3067\u4e2d\u7565 */\n\n            return new WhereObservable<T>(source, predicate);\n        }\n\n```\n\n```\n\n    internal class WhereObservable<T> : OperatorObservableBase<T>\n    {\n        readonly IObservable<T> source;\n        readonly Func<T, bool> predicate;\n        readonly Func<T, int, bool> predicateWithIndex;\n\n        public WhereObservable(IObservable<T> source, Func<T, bool> predicate)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.predicate = predicate;\n        }\n\n        /* \u6700\u9069\u5316\u90e8\u5206\u306a\u306e\u3067\u4e2d\u7565 */\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            /* \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4ed8\u304d\u8ff0\u8a9e\u306e\u305f\u3081\u306eif\u304c\u3042\u308b\u306e\u3067\u524a\u9664 */\n            return source.Subscribe(new Where(this, observer, cancel));\n\n        }\n    }\n\n        class Where : OperatorObserverBase<T, T>\n        {\n            readonly WhereObservable<T> parent;\n\n            public Where(WhereObservable<T> parent, IObserver<T> observer, IDisposable cancel)\n                : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public override void OnNext(T value)\n            {\n                var isPassed = false;\n                try\n                {\n                    isPassed = parent.predicate(value);\n                }\n                catch (Exception ex)\n                {\n                    try { observer.OnError(ex); } finally { Dispose(); }\n                    return;\n                }\n\n                if (isPassed)\n                {\n                    observer.OnNext(value);\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); } finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                try { observer.OnCompleted(); } finally { Dispose(); }\n            }\n        }\n\n```\n\n\u3053\u3061\u3089\u306e\u30bf\u30a4\u30d7\u3068\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u578b\u3068\u3067\u552f\u4e00\u306e\u9055\u3044\u306fIObservable<T> source\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u8981\u6c42\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u3059\u3002\n\u3053\u3061\u3089\u306f\u5165\u529b\u3092\u524d\u306e\u30c7\u30fc\u30bf\u306b\u4f9d\u5b58\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u308c\u4ee5\u5916\u306f\u307b\u3068\u3093\u3069\u540c\u3058\u3053\u3068\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nSubscribeCore\u306fsource\u306bWhere\u3068\u3044\u3046Observer\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\nWhere\u306fOnNext\u3055\u308c\u308b\u3068\u30d5\u30a3\u30eb\u30bf\u95a2\u6570\u3067\u3042\u308bpredicate\u306e\u7d50\u679c\u3092\u307f\u3066observer\u306eOnNext\u3059\u308b\u304b\u6368\u3066\u308b\u304b\u3092\u6c7a\u3081\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3060\u3051\uff01\n\n\u7d50\u5c40\u3084\u3063\u3071\u308aSubscribe\u3059\u308b\u307e\u3067\u306fsource\u306b\u4f55\u304b\u5024\u304c\u5165\u3063\u3066\u304d\u3066\u3082\u4f55\u3082\u3057\u3066\u307e\u305b\u3093\u306d\u3002source\u304cHot\u306a\u30fb\u30fb\u30fb\u4f8b\u3048\u3070ReactiveProperty\u3067\u3042\u3063\u3066\u3082\u305f\u308c\u306a\u304c\u3057\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u3053\u308c\u3082Subscribe\u3057\u305f\u3068\u304d\u306e\u60c5\u5831\u3092\u4fdd\u6301\u3057\u307e\u305b\u3093\u3002\n\n\u3053\u3053\u307e\u3067\u307f\u3066\u3044\u304f\u3068\nvar observable = Observable.Return(1).Where()\u306eobservable\u306b\u306fWhere\u30af\u30e9\u30b9(source=Return)\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067observable.Subscribe(observer)\u3068\u3059\u308b\u3068\u3001Where\u306eSubscribe\u304c\u547c\u3070\u308c\u308b->source\u306fReturn\u3060\u304b\u3089Return\u306eSubscribe\u304c\u547c\u3070\u308c\u308b->Return\u306fWhere\u306eOnNext\u3092\u547c\u3076->Where\u306fobserver\u306eOnNext\u3092\u547c\u3076\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u306d\u3002\n\n\u3053\u308c\u306a\u3093\u304b\u3044\u3044\u4f8b\u3048\u306a\u3044\u304b\u306a\u30fc\u3068\u601d\u3063\u305f\u3093\u3067\u3059\u3051\u3069\nSubscribe\u3059\u308b\u305f\u3073\u306b\u5c02\u7528\u306e\u30c7\u30fc\u30bf\u306e\u901a\u308a\u9053\u304c\u4e00\u672c\u4e00\u672c\u3067\u304d\u308b\u611f\u3058\u304b\u306a\u3041\u3068\u601d\u3044\u307e\u3059\u3002\n\u3042\u3068\u4e00\u672c\u3046\u3069\u3093\u60f3\u50cf\u3057\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u3067\u57fa\u672c\u7684\u306aRx\u306e\u6d41\u308c\u306f\u3059\u3079\u3066\u8ffd\u3046\u3053\u3068\u304c\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u7d50\u8ad6 #\n\nCold\u306aIObservable\u3068\u3044\u3046\u306e\u306f\u63a5\u7d9a\u3055\u308c\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u306f\u4f55\u3082\u3057\u306a\u3044\u3002\n\u4e0a\u6d41\u306eIObservable\u3084\u5fc5\u8981\u306a\u5024\u3092\u4fdd\u6301\u3059\u308b\u3060\u3051\u3002\n\nSubscribe\u3055\u308c\u305f\u3068\u304d\u306b\u5f15\u6570\u306eobserver\u306b\u5024\u3092\u6d41\u3057\u305f\u308a\u6d41\u3059\u4e88\u7d04\u3092\u3057\u305f\u308a\u4e0a\u6d41\u3068Subscribe\u3067\u3064\u306a\u3052\u305f\u308a\u3059\u308b\u3002\n\u3053\u306e\u3068\u304d\u30c7\u30fc\u30bf\u3092\u4fdd\u6301\u305b\u305aSubscribe\u304c\u547c\u3070\u308c\u308b\u305f\u3073\u306b\u65b0\u3057\u304f\u3064\u306a\u304e\u76f4\u3057\u3066\u4f7f\u3044\u56de\u3057\u306f\u3057\u306a\u3044\u3002\n\n", "tags": ["ReactiveExtensions", "Rx", "UniRx", "C#"]}