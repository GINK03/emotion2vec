{"context": "\u3053\u3093\u306b\u3061\u306f\u3002\n\u4e0e\u3048\u3089\u308c\u305f\u70b9\u3068\u591a\u89d2\u5f62\uff08polygon\uff09\u306e\u8fba\uff08\u7dda\u5206\uff09\u3068\u306e\u6700\u77ed\u8ddd\u96e2\u3092\u6c42\u3081\u3066\u307f\u307e\u3057\u305f1\u3002\n\u5404\u8fba\u4e0a\u306e\u6700\u77ed\u8ddd\u96e2\u70b9\u3092\u6c42\u3081\u3001\u305d\u306e\u70b9\u30fb\u8ddd\u96e2\u3092\u4e2d\u5fc3\u30fb\u534a\u5f84\u3068\u3059\u308b\u5186\u3092\u63cf\u3044\u3066\u304a\u308a\u3001\u5404\u5186\u5468\u7dda\u306f\u4e0e\u3048\u3089\u308c\u305f\u70b9\u3092\u901a\u308a\u307e\u3059\u3002\u6700\u8fd1\u508d\u8fba\u304c\u6700\u5c0f\u534a\u5f84\u5186\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n\npointToPolygon.html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title></title>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n</head>\n<body>\n<div id=\"canvas\"></div>\n<script type=\"text/javascript\">\n\nfunction dotTo(a, b, dest) {\n  for (var z=0, i=a.length-1; i>=0; i--) {\n    z += (a[i]-dest[i])*(b[i]-dest[i])\n  }\n  return z;\n}\n\nfunction distanceSquared(a, b) {\n  return dotTo(a, a, b);\n}\n\nfunction linearCombination(a, b, s, t) {\n  for (var c=[], i=0, len=a.length; i<len; i++) {\n    c.push(a[i]*s+b[i]*t);\n  }\n  return c;\n}\n\nfunction pointToPolyline(point, poly) {\n  for (var i=0, z=[], len=poly.length, j=len-1; i<len; j=i++) {\n    z.push(pointToLineSegment(point, poly[i], poly[j]));\n  }\n  return z;\n}\n\n// pointToLineSegment\n//   inputs: point, pointStart_LineSegment, pointEnd_LineSegment\n//   output: [foot.x, foot.y, distance**2]\nfunction pointToLineSegment(point, pointStart, pointEnd) {\n  var foot, dotToStart = dotTo(point, pointEnd, pointStart);\n  if (dotToStart<=0) {\n    foot = pointStart;\n  } else {\n    var dotToEnd = dotTo(point, pointStart, pointEnd);\n    if (dotToEnd<=0) {\n      foot = pointEnd;\n    } else {\n      var t = dotToStart/(dotToStart+dotToEnd);\n      foot = linearCombination(pointStart, pointEnd, 1-t, t);\n    }\n  }\n  return foot.concat(distanceSquared(point, foot));\n}\n\nfunction indexOfApply(func, arr) {\n    return arr.indexOf(func.apply(null,arr));\n}\n\nfunction mytransform(p) {\n    var scale = 24, offset = 160;\n    q = [p[0]*scale+offset, (7-p[1])*scale+offset];\n    if (p.length>2) {q.push(p[2]*scale)} \n    return q;\n}\n\nvar point = [6,5], poly = [[0,0], [7,0], [7,1], [1,7], [0,7]];\nvar circles = pointToPolyline(point, poly).map(function(p){return [p[0], p[1], Math.sqrt(p[2])]});\nvar imin = indexOfApply(Math.min, circles.map(function(p){return p[2]}));\npoint = mytransform(point);\npoly = poly.map(mytransform);\ncircles = circles.map(mytransform);\n\nvar svg = d3.select(\"#canvas\")\n    .append(\"svg\")\n    .attr(\"width\",450)\n    .attr(\"height\",450);\n\nsvg.append(\"polygon\")\n    .data([poly])\n    .attr(\"points\", function(d){return d.join(\" \")})\n    .attr(\"stroke\", \"gray\")\n    .attr(\"fill\", \"#e0fff0\")\n    .attr(\"stroke-width\", 1.5);\n\nsvg.selectAll('circle').data(circles).enter().append('circle').attr({\n      'cx': function(d) {return d[0];},\n      'cy': function(d) {return d[1];},\n      'r': function(d) {return d[2];}\n    }).attr(\"stroke\", \"orange\").attr(\"stroke-width\", \"1.5\").attr(\"fill\",\"yellow\").attr(\"fill-opacity\", 0.04);\n\nsvg.selectAll(\"points\")\n    .data([point])\n    .enter().append(\"circle\")\n    .attr(\"fill\", \"#4040ff\")\n    .attr(\"r\", 3)\n    .attr(\"transform\", function(d){return `translate(${d})`});\n\nsvg.selectAll(\"points\")\n    .data(circles.map(function(d){return d.slice(0,2)}))\n    .enter().append(\"circle\")\n    .attr(\"fill\", \"#b0b0b0\")\n    .attr(\"r\", 2)\n    .attr(\"transform\", function(d){return `translate(${d})`});\n\n// the minimum distance point on a polygon\nsvg.selectAll(\"points\")\n    .data([circles[imin].slice(0,2)])\n    .enter().append(\"circle\")\n    .attr(\"fill\", \"#40a040\")\n    .attr(\"r\", 2.5)\n    .attr(\"transform\", function(d){return `translate(${d})`});\n\n</script>\n</body>\n</html>\n\n\n\n\n\n\nref: \"Distance from a point to a line\" (Wikipedia)\uff09\u00a0\u21a9\n\n\n\n\n\u3053\u3093\u306b\u3061\u306f\u3002\n\u4e0e\u3048\u3089\u308c\u305f\u70b9\u3068\u591a\u89d2\u5f62\uff08polygon\uff09\u306e\u8fba\uff08\u7dda\u5206\uff09\u3068\u306e\u6700\u77ed\u8ddd\u96e2\u3092\u6c42\u3081\u3066\u307f\u307e\u3057\u305f[^1]\u3002\n\n[^1]: ref: \"[Distance from a point to a line](https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line)\" (Wikipedia)\uff09\n\n\u5404\u8fba\u4e0a\u306e\u6700\u77ed\u8ddd\u96e2\u70b9\u3092\u6c42\u3081\u3001\u305d\u306e\u70b9\u30fb\u8ddd\u96e2\u3092\u4e2d\u5fc3\u30fb\u534a\u5f84\u3068\u3059\u308b\u5186\u3092\u63cf\u3044\u3066\u304a\u308a\u3001\u5404\u5186\u5468\u7dda\u306f\u4e0e\u3048\u3089\u308c\u305f\u70b9\u3092\u901a\u308a\u307e\u3059\u3002\u6700\u8fd1\u508d\u8fba\u304c\u6700\u5c0f\u534a\u5f84\u5186\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n\n<img width=\"445\" alt=\"pointToPolygon.jpg\" src=\"https://qiita-image-store.s3.amazonaws.com/0/54617/18132e2e-5615-462a-2132-28437e1bc1f6.jpeg\">\n\n\n```pointToPolygon.html\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\">\n<title></title>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n</head>\n<body>\n<div id=\"canvas\"></div>\n<script type=\"text/javascript\">\n\nfunction dotTo(a, b, dest) {\n  for (var z=0, i=a.length-1; i>=0; i--) {\n    z += (a[i]-dest[i])*(b[i]-dest[i])\n  }\n  return z;\n}\n\nfunction distanceSquared(a, b) {\n  return dotTo(a, a, b);\n}\n\nfunction linearCombination(a, b, s, t) {\n  for (var c=[], i=0, len=a.length; i<len; i++) {\n    c.push(a[i]*s+b[i]*t);\n  }\n  return c;\n}\n\nfunction pointToPolyline(point, poly) {\n  for (var i=0, z=[], len=poly.length, j=len-1; i<len; j=i++) {\n    z.push(pointToLineSegment(point, poly[i], poly[j]));\n  }\n  return z;\n}\n\n// pointToLineSegment\n//   inputs: point, pointStart_LineSegment, pointEnd_LineSegment\n//   output: [foot.x, foot.y, distance**2]\nfunction pointToLineSegment(point, pointStart, pointEnd) {\n  var foot, dotToStart = dotTo(point, pointEnd, pointStart);\n  if (dotToStart<=0) {\n    foot = pointStart;\n  } else {\n    var dotToEnd = dotTo(point, pointStart, pointEnd);\n    if (dotToEnd<=0) {\n      foot = pointEnd;\n    } else {\n      var t = dotToStart/(dotToStart+dotToEnd);\n      foot = linearCombination(pointStart, pointEnd, 1-t, t);\n    }\n  }\n  return foot.concat(distanceSquared(point, foot));\n}\n\nfunction indexOfApply(func, arr) {\n    return arr.indexOf(func.apply(null,arr));\n}\n\nfunction mytransform(p) {\n    var scale = 24, offset = 160;\n    q = [p[0]*scale+offset, (7-p[1])*scale+offset];\n    if (p.length>2) {q.push(p[2]*scale)} \n    return q;\n}\n\nvar point = [6,5], poly = [[0,0], [7,0], [7,1], [1,7], [0,7]];\nvar circles = pointToPolyline(point, poly).map(function(p){return [p[0], p[1], Math.sqrt(p[2])]});\nvar imin = indexOfApply(Math.min, circles.map(function(p){return p[2]}));\npoint = mytransform(point);\npoly = poly.map(mytransform);\ncircles = circles.map(mytransform);\n\nvar svg = d3.select(\"#canvas\")\n    .append(\"svg\")\n    .attr(\"width\",450)\n    .attr(\"height\",450);\n\nsvg.append(\"polygon\")\n    .data([poly])\n    .attr(\"points\", function(d){return d.join(\" \")})\n    .attr(\"stroke\", \"gray\")\n    .attr(\"fill\", \"#e0fff0\")\n    .attr(\"stroke-width\", 1.5);\n\nsvg.selectAll('circle').data(circles).enter().append('circle').attr({\n      'cx': function(d) {return d[0];},\n      'cy': function(d) {return d[1];},\n      'r': function(d) {return d[2];}\n    }).attr(\"stroke\", \"orange\").attr(\"stroke-width\", \"1.5\").attr(\"fill\",\"yellow\").attr(\"fill-opacity\", 0.04);\n\nsvg.selectAll(\"points\")\n    .data([point])\n    .enter().append(\"circle\")\n    .attr(\"fill\", \"#4040ff\")\n    .attr(\"r\", 3)\n    .attr(\"transform\", function(d){return `translate(${d})`});\n\nsvg.selectAll(\"points\")\n    .data(circles.map(function(d){return d.slice(0,2)}))\n    .enter().append(\"circle\")\n    .attr(\"fill\", \"#b0b0b0\")\n    .attr(\"r\", 2)\n    .attr(\"transform\", function(d){return `translate(${d})`});\n\n// the minimum distance point on a polygon\nsvg.selectAll(\"points\")\n    .data([circles[imin].slice(0,2)])\n    .enter().append(\"circle\")\n    .attr(\"fill\", \"#40a040\")\n    .attr(\"r\", 2.5)\n    .attr(\"transform\", function(d){return `translate(${d})`});\n\n</script>\n</body>\n</html>\n```\n", "tags": ["JavaScript", "d3.js", "GIS", "\u8a08\u7b97\u5e7e\u4f55\u5b66"]}