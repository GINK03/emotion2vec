{"tags": ["Python", "OpenCV"], "context": "\n\nlaplacian\ncv2.Laplacian(src, ddepth[, dst[, ksize[, scale[, delta[, borderType]]]]]) \n\npython\nimg = cv2.imread('./data/SIDBA/Lenna.bmp')\nimgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nimgYUV = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)\nimgY = imgYUV[:,:,0]\n\n\nresult = cv2.Laplacian(imgY, cv2.CV_64F)\n\n\n\n\npython\nfig, axes = plt.subplots(ncols=2, figsize=(10,5))\naxes[0].imshow(imgY, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[0].set_title('Y')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)   \naxes[1].imshow(result, cmap=cm.Greys_r, vmin=-128, vmax=128)\naxes[1].set_title('Laplacian')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)   \n\n\n\nSobel\ncv2.Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]])\n\npython\ndx = cv2.Sobel(imgY, cv2.CV_64F, 1, 0, ksize=3)\ndy = cv2.Sobel(imgY, cv2.CV_64F, 0, 1, ksize=3)\ngrad = np.sqrt(dx ** 2 + dy ** 2)\n\n\n\n\npython\nfig, axes = plt.subplots(ncols=4, figsize=(20,5))\naxes[0].imshow(imgY, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[0].set_title('Y')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)   \naxes[1].imshow(dx, cmap=cm.Greys_r, vmin=-128, vmax=128)\naxes[1].set_title('dx')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)   \naxes[2].imshow(dy, cmap=cm.Greys_r, vmin=-128, vmax=128)\naxes[2].set_title('dy')\naxes[2].get_xaxis().set_visible(False)\naxes[2].get_yaxis().set_visible(False)   \naxes[3].imshow(grad, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[3].set_title('gradient')\naxes[3].get_xaxis().set_visible(False)\naxes[3].get_yaxis().set_visible(False)   \n\n\n\nCanny\ncv2.Canny(image, threshold1, threshold2[, edges[, apertureSize[, L2gradient]]])\nCanny\u306e\u7279\u5fb4\u306f\u3001Non-maximum Suppression\u3068Hysteresis Thresholding\u3067\u3059\u3002\nNon-maximum Suppression\u306f\u3001\u52fe\u914d\u65b9\u5411\u306e\u6700\u5927\u5024\u3060\u3051\u6b8b\u3057\u3066\u6b8b\u308a\u306f\u6d88\u3059\u3068\u3044\u3046\u3082\u306e\u3067\u3001\u3053\u308c\u306b\u3088\u308a\u7d30\u7dda\u5316\u3055\u308c\u307e\u3059\u3002\n\u51e6\u7406\u3068\u3057\u3066\u306f\u52fe\u914d\u65b9\u5411\u306b\uff13\u753b\u7d20\u307f\u3066\u4e2d\u5fc3\u304c\u6700\u5927\u5024\u3060\u3063\u305f\u3089\u6b8b\u3059\u3068\u3044\u3046\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\nHysteresis Thresholding\u306f\u3001High Threshold\u3068Low Threshold\u3092\u7528\u3044\u307e\u3059\u3002High Threshold\u4ee5\u4e0a\u306f\u6587\u53e5\u306a\u304fEdge\u306b\u3057\u307e\u3059\u3002Low Threshold\u4ee5\u4e0b\u306f\u975eEdge\u306b\u3057\u307e\u3059\u3002High Threshold \u3068 Low Threshold\u306e\u9593\u306e\u753b\u50cf\u3067\u3059\u304c\u3001Edge\u753b\u7d20\u3068\u5224\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306b\u7e4b\u304c\u3063\u3066\u3044\u308c\u3070Edge\u306b\u3057\u307e\u3059\u3002High Threshold\u3068Low Threshold\u306e\u9593\u3067\u30a6\u30ed\u30a6\u30ed\u3057\u3066\u9014\u5207\u308c\u305f\u7dda\u306fEdge\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u304c\u3001High Threshold\u4ee5\u4e0a\u306eEdge\u753b\u7d20\u304b\u3089\u3064\u306a\u304c\u3063\u3066\u3044\u3066High Threshold\u3068Low Threshold\u306e\u9593\u3067\u30a6\u30ed\u30a6\u30ed\u3057\u3066\u3044\u308b\u7dda\u306fEdge\u306b\u306a\u308a\u307e\u3059\u3002\nhttp://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html\n\npython\nresult = cv2.Canny(imgY, 100, 200)\n\n\n\n\npython\nfig, axes = plt.subplots(ncols=2, figsize=(10,5))\naxes[0].imshow(imgY, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[0].set_title('Y')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)   \naxes[1].imshow(result, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[1].set_title('Canny')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)  \n\n\nHysteresis Thresholding\n\u6a2a\uff11Line\u306e\u76f4\u7dda\u753b\u50cf\u3092\u4f5c\u3063\u3066\u3001\u95be\u5024\u3092\u5909\u3048\u3066\u7d50\u679c\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f100x100\u306e\u753b\u50cf\u306e\u4e2d\u5fc3\u306b\u502430\u306e\u76f4\u7dda\u3092\u5f15\u3044\u305f\u3082\u306e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u5de6\u304b\u3089\uff11\u756a\u76ee\uff1a\u539f\u753b\u50cf\n\u5de6\u304b\u3089\uff12\u756a\u76ee\uff1aLow/High Threshold\u3092119\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\n\u5de6\u304b\u3089\uff13\u756a\u76ee\uff1aLow Threshold\u3092119\u3001High Threshold\u3092120\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\n\u5de6\u304b\u3089\uff14\u756a\u76ee\uff1a\u771f\u3093\u4e2d\u306e\u753b\u50cf\u309231\u306b\u3057\u3066Low Threshold\u3092119\u3001High Threshold\u3092120\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\n\u5de6\u304b\u3089\uff15\u756a\u76ee\uff1a\u5de6\u304b\u30891/4\u3042\u305f\u308a\u306e\u753b\u7d20\u309229\u306b\u3057\u3066Low Threshold\u3092119\u3001High Threshold\u3092120\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\n\u5de6\u304b\u3089\uff12\u756a\u76ee\u306e\u753b\u50cf\u306f\u3001High Threshold\u306e\u5024\u3092Edge\u304c\u8d85\u3048\u305f\u306e\u3067\u3059\u3079\u3066\u691c\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u5de6\u304b\u3089\uff13\u756a\u76ee\u306e\u753b\u50cf\u306f\u3001High Threshold\u3092\u4e0a\u3052\u305f\u306e\u3067\u3059\u3079\u3066\u691c\u51fa\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u5de6\u304b\u3089\uff14\u756a\u76ee\u306e\u753b\u50cf\u306f\u3001\u771f\u3093\u4e2d\u306e\u5024\u3092\u5c11\u3057\u5927\u304d\u304f\u3057\u3066\u3001High Threshold\u3092\u8d85\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u305f\u3081\u5168\u90e8Edge\u3068\u3057\u3066\u691c\u51fa\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5de6\u304b\u3089\uff15\u756a\u76ee\u306e\u753b\u50cf\u306f\u3001\u5de6\u304b\u30891/4\u3042\u305f\u308a\u306e\u753b\u7d20\u309229\u306b\u3057\u3066Low Threshold\u4ee5\u4e0b\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u305f\u306e\u3067\u3001\u6700\u521d\u306e1/4\u306fEdge\u3068\u3057\u3066\u691c\u51fa\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u3053\u306e\u5b9f\u9a13\u304b\u3089Hysteresis Thresholding\u51e6\u7406\u304c\u3069\u3093\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u304b\u3001\u306a\u3093\u3068\u306a\u304f\u7406\u89e3\u3067\u304d\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\npython\nL = np.tile(30, 100)\nP = np.zeros((100,100), dtype=np.uint8)\nP[50,:] = L\n\nresult_L119_H119 = cv2.Canny(P,119,119)\nresult_L119_H120 = cv2.Canny(P,119,120)\nP[50, 50] = 31\nresult_L119_H120_new = cv2.Canny(P,119,120)\nP[50, 25] = 29\nresult_L119_H120_new2 = cv2.Canny(P,119,120)\n\nfig, axes = plt.subplots(ncols=5, figsize=(20,5))\naxes[0].imshow(P, cmap=cm.Greys_r, vmin=0, vmax=32)\naxes[0].set_title('Y')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)   \naxes[1].imshow(result_H119_L119, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[1].set_title('Canny L119,H119')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)  \naxes[2].imshow(result_H120_L120, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[2].set_title('Canny L119, H120')\naxes[2].get_xaxis().set_visible(False)\naxes[2].get_yaxis().set_visible(False)  \naxes[3].imshow(result_H120_L120_new, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[3].set_title('Canny L119, H120 new1')\naxes[3].get_xaxis().set_visible(False)\naxes[3].get_yaxis().set_visible(False)  \naxes[4].imshow(result_H120_L120_new2, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[4].set_title('Canny L119 H120 new2')\naxes[4].get_xaxis().set_visible(False)\naxes[4].get_yaxis().set_visible(False)  \n\n\n\nPyramid\ncv2.pyrUp(src[, dst[, dstsize[, borderType]]]\ncv2.pyrDown(src[, dst[, dstsize[, borderType]]]\npyramid \u753b\u50cf\u3092\u4f5c\u308b\u306b\u306fpyrUp, pyrDown\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\npyrUp\u306f\u62e1\u5927\u3067\u3001pyrDown\u306f\u7e2e\u5c0f\u3067\u3059\u3002\n\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c\u00d72\u3001\u00d712\u00d72\u3001\u00d712\\times 2\u3001\\times \\frac{1}{2}\u306b\u306a\u308a\u307e\u3059\u3002\npyrUp, pyrDown\u3067\u306f\u753b\u50cf\u62e1\u5927\u3001\u7e2e\u5c0f\u6642\u306bfilter\u304cconvolution\u3055\u308c\u307e\u3059\u3002\nfilter\u306f5\u00d755\u00d755\\times 5\u306eGaussian filter\u3067\u3059\u3002\nfilter\u306e\u5024\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\\begin{equation}\n\\frac{1}{256}\n\\begin{bmatrix}\n1 & 4 & 6 & 4 & 1 \\\\\n4 & 16 & 24 & 16 & 4 \\\\\n6 & 24 & 36 & 24 & 6 \\\\\n4 & 16 & 24 & 16 & 4 \\\\\n1 & 4 & 6 & 4 & 1 \\\\\n\\end{bmatrix}\n\\end{equation}\n1256[1464141624164624362464162416414641]1256\u23a1\u23a3\u23a2\u23a2\u23a2\u23a2\u23a2\u23a21464141624164624362464162416414641\u23a4\u23a6\u23a5\u23a5\u23a5\u23a5\u23a5\u23a5{\\begin{equation}\n\\frac{1}{256}\n\\begin{bmatrix}\n1 & 4 & 6 & 4 & 1 \\\\\n4 & 16 & 24 & 16 & 4 \\\\\n6 & 24 & 36 & 24 & 6 \\\\\n4 & 16 & 24 & 16 & 4 \\\\\n1 & 4 & 6 & 4 & 1 \\\\\n\\end{bmatrix}\n\\end{equation}\n}\n\npython\nL = 3\ntmp = imgY.copy()\npyImg = [tmp]\npyEdge = [cv2.Canny(tmp.astype(np.uint8),100,200 )]\nfor idx in xrange(L-1):\n    tmp = cv2.pyrDown(tmp)\n    pyImg.append(tmp)\n    pyEdge.append(cv2.Canny(tmp.astype(np.uint8),100,200 ))\n\n\n\n\npython\nheight = np.sum([img.shape[0] for img in pyImg])\nwidth  = np.max([img.shape[1] for img in pyImg])\ncon_img = np.zeros((height, width), dtype=pyImg[0].dtype)\ny = 0\nfor Y in pyImg:\n    con_img[y:y+Y.shape[0],0:Y.shape[1]] = Y\n    y += Y.shape[0]\n\nfig,axes = plt.subplots(nrows=1, figsize=(8,8))\naxes.imshow(con_img, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes.get_xaxis().set_visible(False)\naxes.get_yaxis().set_visible(False)\n\n\n\n\npython\nfig, axes = plt.subplots(ncols = 3,nrows=2, figsize=(10,8))\nfor idx, (Y, E) in enumerate(zip(pyImg, pyEdge)):\n    axes[0,idx].imshow(Y, cmap=cm.Greys_r, vmin=0, vmax=255)\n    axes[0,idx].set_title('Level %d Image' % idx)\n    axes[0,idx].get_xaxis().set_visible(False)\n    axes[0,idx].get_yaxis().set_visible(False)  \n    axes[1,idx].imshow(E, cmap=cm.Greys_r)\n    axes[1,idx].set_title('Level %d Edge' % idx)\n    axes[1,idx].get_xaxis().set_visible(False)\n    axes[1,idx].get_yaxis().set_visible(False)  \n\n\n# laplacian\n[cv2.Laplacian(src, ddepth[, dst[, ksize[, scale[, delta[, borderType]]]]]) ](http://docs.opencv.org/3.0-last-rst/modules/imgproc/doc/filtering.html?highlight=laplacian#laplacian)\n\n```lang:python\nimg = cv2.imread('./data/SIDBA/Lenna.bmp')\nimgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nimgYUV = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)\nimgY = imgYUV[:,:,0]\n\n\nresult = cv2.Laplacian(imgY, cv2.CV_64F)\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/100523/7a5405b9-9a82-e4fb-39de-2c5e6c9e0567.png)\n\n```lang:python\nfig, axes = plt.subplots(ncols=2, figsize=(10,5))\naxes[0].imshow(imgY, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[0].set_title('Y')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)   \naxes[1].imshow(result, cmap=cm.Greys_r, vmin=-128, vmax=128)\naxes[1].set_title('Laplacian')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)   \n```\n\n# Sobel\n[cv2.Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]])](http://docs.opencv.org/3.0-last-rst/modules/imgproc/doc/filtering.html?highlight=laplacian#sobel)\n\n\n```lang:python\ndx = cv2.Sobel(imgY, cv2.CV_64F, 1, 0, ksize=3)\ndy = cv2.Sobel(imgY, cv2.CV_64F, 0, 1, ksize=3)\ngrad = np.sqrt(dx ** 2 + dy ** 2)\n```\n![image](https://qiita-image-store.s3.amazonaws.com/0/100523/be79a4b4-1c53-219a-ee18-269638ff2577.png)\n\n```lang:python\nfig, axes = plt.subplots(ncols=4, figsize=(20,5))\naxes[0].imshow(imgY, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[0].set_title('Y')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)   \naxes[1].imshow(dx, cmap=cm.Greys_r, vmin=-128, vmax=128)\naxes[1].set_title('dx')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)   \naxes[2].imshow(dy, cmap=cm.Greys_r, vmin=-128, vmax=128)\naxes[2].set_title('dy')\naxes[2].get_xaxis().set_visible(False)\naxes[2].get_yaxis().set_visible(False)   \naxes[3].imshow(grad, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[3].set_title('gradient')\naxes[3].get_xaxis().set_visible(False)\naxes[3].get_yaxis().set_visible(False)   \n```\n\n# Canny\n[cv2.Canny(image, threshold1, threshold2[, edges[, apertureSize[, L2gradient]]])](http://docs.opencv.org/3.0-last-rst/modules/imgproc/doc/feature_detection.html#canny)\n\nCanny\u306e\u7279\u5fb4\u306f\u3001**Non-maximum Suppression**\u3068**Hysteresis Thresholding**\u3067\u3059\u3002\n**Non-maximum Suppression\u306f**\u3001\u52fe\u914d\u65b9\u5411\u306e\u6700\u5927\u5024\u3060\u3051\u6b8b\u3057\u3066\u6b8b\u308a\u306f\u6d88\u3059\u3068\u3044\u3046\u3082\u306e\u3067\u3001\u3053\u308c\u306b\u3088\u308a\u7d30\u7dda\u5316\u3055\u308c\u307e\u3059\u3002\n\u51e6\u7406\u3068\u3057\u3066\u306f\u52fe\u914d\u65b9\u5411\u306b\uff13\u753b\u7d20\u307f\u3066\u4e2d\u5fc3\u304c\u6700\u5927\u5024\u3060\u3063\u305f\u3089\u6b8b\u3059\u3068\u3044\u3046\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n**Hysteresis Thresholding**\u306f\u3001**High Threshold**\u3068**Low Threshold**\u3092\u7528\u3044\u307e\u3059\u3002High Threshold\u4ee5\u4e0a\u306f\u6587\u53e5\u306a\u304fEdge\u306b\u3057\u307e\u3059\u3002Low Threshold\u4ee5\u4e0b\u306f\u975eEdge\u306b\u3057\u307e\u3059\u3002High Threshold \u3068 Low Threshold\u306e\u9593\u306e\u753b\u50cf\u3067\u3059\u304c\u3001Edge\u753b\u7d20\u3068\u5224\u5b9a\u3055\u308c\u305f\u753b\u50cf\u306b\u7e4b\u304c\u3063\u3066\u3044\u308c\u3070Edge\u306b\u3057\u307e\u3059\u3002High Threshold\u3068Low Threshold\u306e\u9593\u3067\u30a6\u30ed\u30a6\u30ed\u3057\u3066\u9014\u5207\u308c\u305f\u7dda\u306fEdge\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u304c\u3001High Threshold\u4ee5\u4e0a\u306eEdge\u753b\u7d20\u304b\u3089\u3064\u306a\u304c\u3063\u3066\u3044\u3066High Threshold\u3068Low Threshold\u306e\u9593\u3067\u30a6\u30ed\u30a6\u30ed\u3057\u3066\u3044\u308b\u7dda\u306fEdge\u306b\u306a\u308a\u307e\u3059\u3002\n\nhttp://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html\n\n\n```lang:python\nresult = cv2.Canny(imgY, 100, 200)\n```\n![image](https://qiita-image-store.s3.amazonaws.com/0/100523/6f1d088f-ec5e-7832-2900-56cace85aaba.png)\n\n```lang:python\nfig, axes = plt.subplots(ncols=2, figsize=(10,5))\naxes[0].imshow(imgY, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[0].set_title('Y')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)   \naxes[1].imshow(result, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[1].set_title('Canny')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)  \n```\n\n**Hysteresis Thresholding**\n\u6a2a\uff11Line\u306e\u76f4\u7dda\u753b\u50cf\u3092\u4f5c\u3063\u3066\u3001\u95be\u5024\u3092\u5909\u3048\u3066\u7d50\u679c\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f100x100\u306e\u753b\u50cf\u306e\u4e2d\u5fc3\u306b\u502430\u306e\u76f4\u7dda\u3092\u5f15\u3044\u305f\u3082\u306e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n**\u5de6\u304b\u3089\uff11\u756a\u76ee\uff1a**\u539f\u753b\u50cf\n**\u5de6\u304b\u3089\uff12\u756a\u76ee\uff1a**Low/High Threshold\u3092119\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\n**\u5de6\u304b\u3089\uff13\u756a\u76ee\uff1a**Low Threshold\u3092119\u3001High Threshold\u3092120\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\n**\u5de6\u304b\u3089\uff14\u756a\u76ee\uff1a**\u771f\u3093\u4e2d\u306e\u753b\u50cf\u309231\u306b\u3057\u3066Low Threshold\u3092119\u3001High Threshold\u3092120\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\n**\u5de6\u304b\u3089\uff15\u756a\u76ee\uff1a**\u5de6\u304b\u30891/4\u3042\u305f\u308a\u306e\u753b\u7d20\u309229\u306b\u3057\u3066Low Threshold\u3092119\u3001High Threshold\u3092120\u306b\u8a2d\u5b9a\u3057\u305f\u3082\u306e\n\n\u5de6\u304b\u3089\uff12\u756a\u76ee\u306e\u753b\u50cf\u306f\u3001High Threshold\u306e\u5024\u3092Edge\u304c\u8d85\u3048\u305f\u306e\u3067\u3059\u3079\u3066\u691c\u51fa\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u5de6\u304b\u3089\uff13\u756a\u76ee\u306e\u753b\u50cf\u306f\u3001High Threshold\u3092\u4e0a\u3052\u305f\u306e\u3067\u3059\u3079\u3066\u691c\u51fa\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u5de6\u304b\u3089\uff14\u756a\u76ee\u306e\u753b\u50cf\u306f\u3001\u771f\u3093\u4e2d\u306e\u5024\u3092\u5c11\u3057\u5927\u304d\u304f\u3057\u3066\u3001High Threshold\u3092\u8d85\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u305f\u3081\u5168\u90e8Edge\u3068\u3057\u3066\u691c\u51fa\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5de6\u304b\u3089\uff15\u756a\u76ee\u306e\u753b\u50cf\u306f\u3001\u5de6\u304b\u30891/4\u3042\u305f\u308a\u306e\u753b\u7d20\u309229\u306b\u3057\u3066Low Threshold\u4ee5\u4e0b\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u305f\u306e\u3067\u3001\u6700\u521d\u306e1/4\u306fEdge\u3068\u3057\u3066\u691c\u51fa\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u5b9f\u9a13\u304b\u3089Hysteresis Thresholding\u51e6\u7406\u304c\u3069\u3093\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u304b\u3001\u306a\u3093\u3068\u306a\u304f\u7406\u89e3\u3067\u304d\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/100523/88111a3a-83e0-a999-e66f-40750f04e668.png)\n\n```lang:python\nL = np.tile(30, 100)\nP = np.zeros((100,100), dtype=np.uint8)\nP[50,:] = L\n\nresult_L119_H119 = cv2.Canny(P,119,119)\nresult_L119_H120 = cv2.Canny(P,119,120)\nP[50, 50] = 31\nresult_L119_H120_new = cv2.Canny(P,119,120)\nP[50, 25] = 29\nresult_L119_H120_new2 = cv2.Canny(P,119,120)\n\nfig, axes = plt.subplots(ncols=5, figsize=(20,5))\naxes[0].imshow(P, cmap=cm.Greys_r, vmin=0, vmax=32)\naxes[0].set_title('Y')\naxes[0].get_xaxis().set_visible(False)\naxes[0].get_yaxis().set_visible(False)   \naxes[1].imshow(result_H119_L119, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[1].set_title('Canny L119,H119')\naxes[1].get_xaxis().set_visible(False)\naxes[1].get_yaxis().set_visible(False)  \naxes[2].imshow(result_H120_L120, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[2].set_title('Canny L119, H120')\naxes[2].get_xaxis().set_visible(False)\naxes[2].get_yaxis().set_visible(False)  \naxes[3].imshow(result_H120_L120_new, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[3].set_title('Canny L119, H120 new1')\naxes[3].get_xaxis().set_visible(False)\naxes[3].get_yaxis().set_visible(False)  \naxes[4].imshow(result_H120_L120_new2, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes[4].set_title('Canny L119 H120 new2')\naxes[4].get_xaxis().set_visible(False)\naxes[4].get_yaxis().set_visible(False)  \n```\n\n# Pyramid\n\n[cv2.pyrUp(src[, dst[, dstsize[, borderType]]]](http://docs.opencv.org/3.0-last-rst/modules/imgproc/doc/filtering.html#pyrup)\n[cv2.pyrDown(src[, dst[, dstsize[, borderType]]]](http://docs.opencv.org/3.0-last-rst/modules/imgproc/doc/filtering.html#pyrdown)\n\npyramid \u753b\u50cf\u3092\u4f5c\u308b\u306b\u306fpyrUp, pyrDown\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\npyrUp\u306f\u62e1\u5927\u3067\u3001pyrDown\u306f\u7e2e\u5c0f\u3067\u3059\u3002\n\u30b5\u30a4\u30ba\u306f\u305d\u308c\u305e\u308c$\\times 2\u3001\\times \\frac{1}{2}$\u306b\u306a\u308a\u307e\u3059\u3002\npyrUp, pyrDown\u3067\u306f\u753b\u50cf\u62e1\u5927\u3001\u7e2e\u5c0f\u6642\u306bfilter\u304cconvolution\u3055\u308c\u307e\u3059\u3002\nfilter\u306f$5\\times 5$\u306eGaussian filter\u3067\u3059\u3002\nfilter\u306e\u5024\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\n```math\n\\begin{equation}\n\\frac{1}{256}\n\\begin{bmatrix}\n1 & 4 & 6 & 4 & 1 \\\\\n4 & 16 & 24 & 16 & 4 \\\\\n6 & 24 & 36 & 24 & 6 \\\\\n4 & 16 & 24 & 16 & 4 \\\\\n1 & 4 & 6 & 4 & 1 \\\\\n\\end{bmatrix}\n\\end{equation}\n```\n\n\n```lang:python\nL = 3\ntmp = imgY.copy()\npyImg = [tmp]\npyEdge = [cv2.Canny(tmp.astype(np.uint8),100,200 )]\nfor idx in xrange(L-1):\n    tmp = cv2.pyrDown(tmp)\n    pyImg.append(tmp)\n    pyEdge.append(cv2.Canny(tmp.astype(np.uint8),100,200 ))\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/100523/fbb36aae-2dfb-a557-3f33-d50edc728176.png)\n\n\n\n```lang:python\nheight = np.sum([img.shape[0] for img in pyImg])\nwidth  = np.max([img.shape[1] for img in pyImg])\ncon_img = np.zeros((height, width), dtype=pyImg[0].dtype)\ny = 0\nfor Y in pyImg:\n    con_img[y:y+Y.shape[0],0:Y.shape[1]] = Y\n    y += Y.shape[0]\n    \nfig,axes = plt.subplots(nrows=1, figsize=(8,8))\naxes.imshow(con_img, cmap=cm.Greys_r, vmin=0, vmax=255)\naxes.get_xaxis().set_visible(False)\naxes.get_yaxis().set_visible(False)\n```\n![image](https://qiita-image-store.s3.amazonaws.com/0/100523/1633cc94-2683-a21a-b346-949698c00c4f.png)\n\n\n```lang:python\nfig, axes = plt.subplots(ncols = 3,nrows=2, figsize=(10,8))\nfor idx, (Y, E) in enumerate(zip(pyImg, pyEdge)):\n    axes[0,idx].imshow(Y, cmap=cm.Greys_r, vmin=0, vmax=255)\n    axes[0,idx].set_title('Level %d Image' % idx)\n    axes[0,idx].get_xaxis().set_visible(False)\n    axes[0,idx].get_yaxis().set_visible(False)  \n    axes[1,idx].imshow(E, cmap=cm.Greys_r)\n    axes[1,idx].set_title('Level %d Edge' % idx)\n    axes[1,idx].get_xaxis().set_visible(False)\n    axes[1,idx].get_yaxis().set_visible(False)  \n```\n"}