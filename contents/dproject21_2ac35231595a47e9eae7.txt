{"context": " More than 1 year has passed since last update.\u89e3\u7b54\u767a\u8868\u76f4\u524d\u3067\u30c6\u30b9\u30c8\u304c\u901a\u308a\u307e\u3057\u305f\uff08\u307b\u3063\uff09\u3002\npublic class Register\n{\n    public int CustomerCount;\n    public List<string> CustomerGroups;\n    public bool IsStop;\n    public int Minus;\n\n    public Register(int minus)\n    {\n        CustomerCount = 0;\n        CustomerGroups = new List<string>();\n        IsStop = false;\n        Minus = minus;\n    }\n\n    public void Shori()\n    {\n        int customerIndex = 0;\n        int last = Minus;\n        for (int i = 0; i < CustomerGroups.Count(); i++)\n        {\n            string customer = CustomerGroups[i];\n            if (IsStop) break;\n\n            if (customer == \"x\")\n            {\n                IsStop = true;\n                break;\n            }\n            else\n            {\n                int customerNumber = int.Parse(customer);\n                if (customerNumber <= last)\n                {\n                    CustomerCount -= customerNumber;\n                    last -= customerNumber;\n                    customerIndex++;\n                }\n                else\n                {\n                    CustomerCount -= last;\n                    CustomerGroups[customerIndex] = (customerNumber - last).ToString();\n                    break;\n                }\n            }\n        }\n        if (CustomerCount < 0)\n        {\n            CustomerCount = 0;\n        }\n        CustomerGroups.RemoveRange(0, customerIndex);\n    }\n}\n\npublic string Solve(string input) {\n    List<Register> registers = new List<Register> { new Register(2), new Register(7), new Register(3), new Register(5), new Register(2) };\n\n    char[] chars = input.ToCharArray();\n    foreach (char c in chars) {\n        string s = c.ToString();\n        if (s == \".\") {\n            foreach(var register in registers) {\n                register.Shori();\n            }\n        }\n        else if (s == \"x\")\n        {\n            registers[registers.FindIndex(x => x.CustomerCount == registers.Min<Register>(y => y.CustomerCount))].CustomerGroups.Add(s);\n            registers[registers.FindIndex(x => x.CustomerCount == registers.Min<Register>(y => y.CustomerCount))].CustomerCount += 1;\n        }\n        else\n        {\n            registers[registers.FindIndex(x => x.CustomerCount == registers.Min<Register>(y => y.CustomerCount))].CustomerGroups.Add(s);\n            registers[registers.FindIndex(x => x.CustomerCount == registers.Min<Register>(y => y.CustomerCount))].CustomerCount += int.Parse(s);\n        }\n    }\n    string result = null;\n    registers.ForEach(x => result = result + x.CustomerCount.ToString() + \",\");\n    return result.Remove(result.Length - 1);\n}\n\n\u89e3\u7b54\u767a\u8868\u76f4\u524d\u3067\u30c6\u30b9\u30c8\u304c\u901a\u308a\u307e\u3057\u305f\uff08\u307b\u3063\uff09\u3002\n\n```csharp\npublic class Register\n{\n    public int CustomerCount;\n    public List<string> CustomerGroups;\n    public bool IsStop;\n    public int Minus;\n\n    public Register(int minus)\n    {\n        CustomerCount = 0;\n        CustomerGroups = new List<string>();\n        IsStop = false;\n        Minus = minus;\n    }\n\n    public void Shori()\n    {\n        int customerIndex = 0;\n        int last = Minus;\n        for (int i = 0; i < CustomerGroups.Count(); i++)\n        {\n            string customer = CustomerGroups[i];\n            if (IsStop) break;\n\n            if (customer == \"x\")\n            {\n                IsStop = true;\n                break;\n            }\n            else\n            {\n                int customerNumber = int.Parse(customer);\n                if (customerNumber <= last)\n                {\n                    CustomerCount -= customerNumber;\n                    last -= customerNumber;\n                    customerIndex++;\n                }\n                else\n                {\n                    CustomerCount -= last;\n                    CustomerGroups[customerIndex] = (customerNumber - last).ToString();\n                    break;\n                }\n            }\n        }\n        if (CustomerCount < 0)\n        {\n            CustomerCount = 0;\n        }\n        CustomerGroups.RemoveRange(0, customerIndex);\n    }\n}\n```\n\n```csharp\npublic string Solve(string input) {\n    List<Register> registers = new List<Register> { new Register(2), new Register(7), new Register(3), new Register(5), new Register(2) };\n\n    char[] chars = input.ToCharArray();\n    foreach (char c in chars) {\n        string s = c.ToString();\n        if (s == \".\") {\n            foreach(var register in registers) {\n                register.Shori();\n            }\n        }\n        else if (s == \"x\")\n        {\n            registers[registers.FindIndex(x => x.CustomerCount == registers.Min<Register>(y => y.CustomerCount))].CustomerGroups.Add(s);\n            registers[registers.FindIndex(x => x.CustomerCount == registers.Min<Register>(y => y.CustomerCount))].CustomerCount += 1;\n        }\n        else\n        {\n            registers[registers.FindIndex(x => x.CustomerCount == registers.Min<Register>(y => y.CustomerCount))].CustomerGroups.Add(s);\n            registers[registers.FindIndex(x => x.CustomerCount == registers.Min<Register>(y => y.CustomerCount))].CustomerCount += int.Parse(s);\n        }\n    }\n    string result = null;\n    registers.ForEach(x => result = result + x.CustomerCount.ToString() + \",\");\n    return result.Remove(result.Length - 1);\n}\n```", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "C#"]}