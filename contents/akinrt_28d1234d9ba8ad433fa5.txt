{"tags": ["omise", "Ruby", "Gem", "\u6c7a\u6e08", "\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9"], "context": "Omise\u306e\u30c6\u30b9\u30c8\u30ab\u30fc\u30c9\u3092\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u8abf\u3079\u308b\u624b\u9593\u3092\u7701\u304f\u65b9\u6cd5\u3068\u3057\u3066Gem\uff08omise_test_cards\uff09\u3092\u516c\u958b\u3057\u307e\u3057\u305f\u3002\n\n\nomise_test_cards \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ngem install omise_test_cards\n\n\nPry\u3067\u3061\u3087\u3063\u3068\u52d5\u304b\u3057\u3066\u307f\u308b\ncards = OmiseTestCards.test_cards\n\ncards.successful_charge.code\n# => \"successful_charge\"\n\ncards.successful_charge.description\n# => \"these credit card numbers can be used in test mode\"\n\ncards.successful_charge.cards\n# => <Hashie::Array [#<Hashie::Mash brand=\"Visa\" number=\"4242424242424242\">, #<Hashie::Mash brand=\"Visa\" number=\"4111111111111111\">, #<Hashie::Mash brand=\"MasterCard\" number=\"5555555555554444\">, #<Hashie::Mash brand=\"MasterCard\" number=\"5454545454545454\">, #<Hashie::Mash brand=\"JCB\" number=\"3530111333300000\">, #<Hashie::Mash brand=\"JCB\" number=\"3566111111111113\">]>\n\ncards.successful_charge.cards.first.brand\n# => \"Visa\"\n\ncards.successful_charge.cards.first.number\n# => \"4242424242424242\"\n\n\u3061\u306a\u307f\u306b\u3001Omise\u306e\u30c6\u30b9\u30c8\u30ab\u30fc\u30c9\u306f10\u7a2e\u985e\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u5225\u306e\u30ab\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\ncards = OmiseTestCards.test_cards\n\ncards.successful_charge\ncards.invalid_security_code\ncards.fail_3ds_card_enrollment\ncards.fail_3ds_card_validation\ncards.insufficient_fund\ncards.stolen_or_lost_card\ncards.failed_processing\ncards.payment_rejected\ncards.failed_fraud_check\ncards.invalid_account_number\n\n\u3053\u306e\u3046\u3061\u306e cards.successful_charge \u306b\u542b\u307e\u308c\u308b\u30ab\u30fc\u30c9\u306e\u3044\u305a\u308c\u3082\u3001\u6b63\u5e38\u306b\u30c6\u30b9\u30c8\u3067Charge\u304c\u3067\u304d\u308b\u30ab\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u308c\u4ee5\u5916\u306e\u30ab\u30fc\u30c9\u306f\u3001\u5229\u7528\u3067\u304d\u306a\u3044\u30b9\u30c6\u30fc\u30bf\u30b9\u306a\u306e\u3067\u3001charge.paid? \u3067Charge\u306b\u5931\u6557\u3057\u3066\u5165\u308c\u3070\u3001 charge.failure_code \u3092\u898b\u3066\u3001\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u5165\u308c\u3066\u3042\u3052\u308b\u3068\u3044\u3044\u3067\u3057\u3087\u3046\uff01\nOmise Ruby\u30e9\u30a4\u30d6\u30e9\u30ea\u306fOmiseError\u3092raise\u3059\u308b\u306e\u3067\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u30c6\u30b9\u30c8\u3059\u308b\u3068\u3044\u3044\u3067\u3059\u306d\u3002\nrequire \"omise\"\nrequire \"omise_test_cards\"\n\nOmise.api_key = \"SET_YOUR_TEST_SECRET_KEY\"\nOmise.vault_key = \"SET_YOUR_TEST_PUBLIC_KEY\"\n\n# get sampla card\nsampel_card = OmiseTestCards.test_cards.successful_charge.cards.first\n\nbegin\n  # create token\n  token = Omise::Token.create(card: {\n    name: \"TARO OMISE\",\n    number: sampel_card.number,\n    expiration_month: 3,\n    expiration_year: 2019,\n    city: \"Tokyo\",\n    postal_code: \"1510051\",\n    security_code: 123\n  })\n\n  # Charge 100000 JPY\n  charge = Omise::Charge.create({\n    amount: 100_000,\n    currency: \"jpy\",\n    card: token.id\n  })\n\n  if charge.paid\n    # handle success\n    puts \"thanks\"\n  else\n    # handle failure\n    raise charge.failure_code\n  end\nrescue OmiseError => e\n  # handle OmiseError raised by omise library\n  raise e.message\nend\n\n\n\u30ea\u30f3\u30af\n\nhttps://github.com/akinrt/omise_test_cards\nhttps://rubygems.org/gems/omise_test_cards\n\nOmise\u306e\u30c6\u30b9\u30c8\u30ab\u30fc\u30c9\u3092\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u8abf\u3079\u308b\u624b\u9593\u3092\u7701\u304f\u65b9\u6cd5\u3068\u3057\u3066Gem\uff08[omise_test_cards](https://rubygems.org/gems/omise_test_cards)\uff09\u3092\u516c\u958b\u3057\u307e\u3057\u305f\u3002\n\n![](https://cdn-ak.f.st-hatena.com/images/fotolife/a/akinrt/20170310/20170310170758.png)\n\n## omise_test_cards \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\ngem install omise_test_cards\n```\n\n## Pry\u3067\u3061\u3087\u3063\u3068\u52d5\u304b\u3057\u3066\u307f\u308b\n\n```\ncards = OmiseTestCards.test_cards\n\ncards.successful_charge.code\n# => \"successful_charge\"\n\ncards.successful_charge.description\n# => \"these credit card numbers can be used in test mode\"\n\ncards.successful_charge.cards\n# => <Hashie::Array [#<Hashie::Mash brand=\"Visa\" number=\"4242424242424242\">, #<Hashie::Mash brand=\"Visa\" number=\"4111111111111111\">, #<Hashie::Mash brand=\"MasterCard\" number=\"5555555555554444\">, #<Hashie::Mash brand=\"MasterCard\" number=\"5454545454545454\">, #<Hashie::Mash brand=\"JCB\" number=\"3530111333300000\">, #<Hashie::Mash brand=\"JCB\" number=\"3566111111111113\">]>\n\ncards.successful_charge.cards.first.brand\n# => \"Visa\"\n\ncards.successful_charge.cards.first.number\n# => \"4242424242424242\"\n```\n\n\u3061\u306a\u307f\u306b\u3001Omise\u306e\u30c6\u30b9\u30c8\u30ab\u30fc\u30c9\u306f10\u7a2e\u985e\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u5225\u306e\u30ab\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\ncards = OmiseTestCards.test_cards\n\ncards.successful_charge\ncards.invalid_security_code\ncards.fail_3ds_card_enrollment\ncards.fail_3ds_card_validation\ncards.insufficient_fund\ncards.stolen_or_lost_card\ncards.failed_processing\ncards.payment_rejected\ncards.failed_fraud_check\ncards.invalid_account_number\n```\n\n\u3053\u306e\u3046\u3061\u306e `cards.successful_charge` \u306b\u542b\u307e\u308c\u308b\u30ab\u30fc\u30c9\u306e\u3044\u305a\u308c\u3082\u3001\u6b63\u5e38\u306b\u30c6\u30b9\u30c8\u3067Charge\u304c\u3067\u304d\u308b\u30ab\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u308c\u4ee5\u5916\u306e\u30ab\u30fc\u30c9\u306f\u3001\u5229\u7528\u3067\u304d\u306a\u3044\u30b9\u30c6\u30fc\u30bf\u30b9\u306a\u306e\u3067\u3001`charge.paid?` \u3067Charge\u306b\u5931\u6557\u3057\u3066\u5165\u308c\u3070\u3001 `charge.failure_code` \u3092\u898b\u3066\u3001\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u5165\u308c\u3066\u3042\u3052\u308b\u3068\u3044\u3044\u3067\u3057\u3087\u3046\uff01\n\nOmise Ruby\u30e9\u30a4\u30d6\u30e9\u30ea\u306fOmiseError\u3092raise\u3059\u308b\u306e\u3067\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u30c6\u30b9\u30c8\u3059\u308b\u3068\u3044\u3044\u3067\u3059\u306d\u3002\n\n```\nrequire \"omise\"\nrequire \"omise_test_cards\"\n\nOmise.api_key = \"SET_YOUR_TEST_SECRET_KEY\"\nOmise.vault_key = \"SET_YOUR_TEST_PUBLIC_KEY\"\n\n# get sampla card\nsampel_card = OmiseTestCards.test_cards.successful_charge.cards.first\n\nbegin\n  # create token\n  token = Omise::Token.create(card: {\n    name: \"TARO OMISE\",\n    number: sampel_card.number,\n    expiration_month: 3,\n    expiration_year: 2019,\n    city: \"Tokyo\",\n    postal_code: \"1510051\",\n    security_code: 123\n  })\n\n  # Charge 100000 JPY\n  charge = Omise::Charge.create({\n    amount: 100_000,\n    currency: \"jpy\",\n    card: token.id\n  })\n\n  if charge.paid\n    # handle success\n    puts \"thanks\"\n  else\n    # handle failure\n    raise charge.failure_code\n  end\nrescue OmiseError => e\n  # handle OmiseError raised by omise library\n  raise e.message\nend\n```\n\n\n## \u30ea\u30f3\u30af\n\n- [https://github.com/akinrt/omise_test_cards](https://github.com/akinrt/omise_test_cards)\n- [https://rubygems.org/gems/omise_test_cards](https://rubygems.org/gems/omise_test_cards)\n\n"}