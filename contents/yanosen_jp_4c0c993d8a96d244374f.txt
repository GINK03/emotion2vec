{"tags": ["F#", "Unity"], "context": "\n\n\u306f\u3058\u3081\u306b\n\"F# for Machine Learning Essentials\" (Sudipta Mukherjee \u8457\u3000\u4ee5\u4e0b\u300c\u539f\u8457\u300d)\u3000\u306e\u7b2c3\u7ae0 \"Classification Techniques\"\uff08\u5206\u985e\u6cd5\uff09\u3067\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u5206\u985e\u6cd5\u3092F#\u3067\u8a18\u8ff0\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306b\u51fa\u3066\u304f\u308b\u306e\u304c\u3001\u4ee5\u524d\u306b\u3082\u7d39\u4ecb\u3057\u305f k-nearest neighbour(k\u8fd1\u508d\u6cd5\uff09\u3092\u7528\u3044\u305f\u5206\u985e\u6cd5\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001Kaggle\u306b\u3042\u308b\u72ac\u3068\u732b\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u3001\u72ac\u3068\u732b\u306e\u5206\u985e\u3092\u884c\u3044\u307e\u3059\u3002\u5206\u985e\u6cd5\u306f\u5358\u7d14\u3067\u3001\u72ac\u3068\u732b\u3067\u306f\u6bdb\u306e\u8272\u306e\u611f\u3058\u304c\u9055\u3046\u306e\u3067\u3001\u5199\u771f\u306e\u8272\u306e\u5206\u5e03\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u3057\u3066\u3001\u305d\u306e\u5f62\u304b\u3089\u5206\u985e\u3059\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\u9854\u306e\u5f62\u3068\u304b\u306f\u5168\u304f\u8003\u616e\u3057\u307e\u305b\u3093\u3002\n\n\u53c2\u8003\u8cc7\u6599\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001\u4eca\u56de\u306f\u539f\u8457\u306e\u30b3\u30fc\u30c9\u304c\u30cd\u30c3\u30c8\u306b\u898b\u5f53\u305f\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u30d5\u30eb\u30b3\u30fc\u30c9\u3092\u3054\u89a7\u306b\u306a\u308a\u305f\u3044\u65b9\u306f\u3001\u539f\u8457\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n\u539f\u8457\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\nLibrary1.fs\n\n    let getHist(values: float[]) = \n        values |> Seq.groupBy(fun color -> color)\n               |> Map.ofSeq\n               |> Map.map(fun t colors -> Seq.length colors)\n               |> Map.toArray\n               |> Array.map(fun colorCount -> float (snd colorCount))\n\n\n\nSeq.groupBy(fun color -> color)\u306b\u304a\u3044\u3066\u3001fun\u306f\u30e9\u30e0\u30c0\u5f0f\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u3059\u3002fun parameter-list -> expression\u3068\u3044\u3046\u5f62\u5f0f\u3092\u3068\u308a\u307e\u3059\u3002Seq.groupBy\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u3067\u3064\u304f\u3089\u308c\u308bkey\u3092\u3082\u3068\u306b\u3001\u914d\u5217\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3059\u3002MSDN\u306e\u4f8b\u3092\u6319\u3052\u3066\u304a\u304f\u3068\u3002\n    let sequence = seq { 1 .. 100 }\n    let sequences3 = Seq.groupBy (fun index ->\n                                    if (index % 3 = 0) then 0\n                                      elif (index % 3 = 1) then 1\n                                      else 2) sequence\n\n\u3053\u306e\u8a08\u7b97\u7d50\u679c\u306f\u3001(1, seq [1; 4; 7; 10; ...]) (2, seq [2; 5; 8; 11; ...]) (0, seq [3; 6; 9; 12; ...])\u306b\u306a\u308a\u307e\u3059\u3002\nSeq.groupBy\u306e\u3042\u3068\u306f\u3001Map.ofSeq\u3067\u914d\u5217\u304b\u3089map\u3092\u751f\u6210\u3057\u3001Map.map...\u3067map\u306ecolors\u306b\u5bfe\u3057\u3066\u914d\u5217\u306e\u9577\u3055\u306e\u8a08\u7b97\u3092\u9069\u7528\u3057\u3001Map.toArray\u3067\u914d\u5217\u306b\u623b\u3057\u305f\u3042\u3068\u3001snd \u3067\u30bf\u30d7\u30eb\u306e\u4e8c\u756a\u76ee\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\nUnity\u3067\u306e\u5b9f\u884c\nUnity\u3067F#\u3092\u5b9f\u884c\u3059\u308b\u969b\u306e\u57fa\u672c\u7684\u306a\u624b\u9806\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001System.Drawing\u3068\u3044\u3046\u540d\u524d\u7a7a\u9593\u3092\u4f7f\u3046\u306e\u3067\u3001\u305d\u3061\u3089\u3082Solution Explorer\u306eReference\u30d5\u30a9\u30eb\u30c0\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\n\nAdd Reference\u3092\u9078\u3093\u3067\u3001\u4e0b\u56f3\u306e\u901a\u308a\u3001Assemblies/Framework\u30bf\u30d6\u306eSystem.Drawing\u3092\u9078\u3093\u3067OK\u3002\n\n\u3053\u308c\u3067\u3001Image\u30af\u30e9\u30b9\u306a\u3069\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u3044\u3064\u3082\u901a\u308a\u3001namespace\u3068module\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nLibrary1.fs\n\n  namespace kNNDogCat\n\n  open System\n  open System.IO\n  open System.Drawing\n  module kNNDogCatEntry = \n    type Entry = {Label:string;Values:float[]}\n\n  \\\\ \u4ee5\u4e0b\u7565\n\n\n\n\u3042\u3068\u3001Unity\u3067\u3064\u304b\u3048\u308bF#3.0\u3067\u306fList.item\u304c\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001List.nth\u3067\u4ee3\u7528\u3057\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\n\nLibrary1.fs\n \\\\ \u7565\n\n  let guess1 = fst (List.nth labels1 0)\n\n \\\\ \u7565\n\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001\u539f\u8457\u3067\u306f\u8a08\u7b97\u7d50\u679c\u306e\u8868\u793a\u306fprintfn\u3092\u4f7f\u3063\u3066\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3001Unity\u5074\u306b\u51fa\u529b\u3057\u307e\u3057\u3087\u3046\u3002Unity C#\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\nReadFSharp.cs\nusing UnityEngine;\nusing kNNDogCat;\n\npublic class ReadFSharp : MonoBehaviour\n{\n    void Start()\n    {\n        Debug.Log(kNNDogCatEntry.labels1);\n        Debug.Log(\"The known dog is identified as a \"+kNNDogCatEntry.guess1);\n        Debug.Log(kNNDogCatEntry.labels2);\n        Debug.Log(\"The known dog is identified as a \"+kNNDogCatEntry.guess2);\n    }\n}\n\n\n# \u306f\u3058\u3081\u306b\n\"F# for Machine Learning Essentials\" (Sudipta Mukherjee \u8457\u3000\u4ee5\u4e0b\u300c\u539f\u8457\u300d)\u3000\u306e\u7b2c3\u7ae0 \"Classification Techniques\"\uff08\u5206\u985e\u6cd5\uff09\u3067\u306f\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u3088\u304f\u7528\u3044\u3089\u308c\u308b\u5206\u985e\u6cd5\u3092F#\u3067\u8a18\u8ff0\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306b\u51fa\u3066\u304f\u308b\u306e\u304c\u3001[\u4ee5\u524d\u306b\u3082\u7d39\u4ecb\u3057\u305f](http://qiita.com/yanosen_jp/items/5cfbb0d3950c46ec9283) k-nearest neighbour(k\u8fd1\u508d\u6cd5\uff09\u3092\u7528\u3044\u305f\u5206\u985e\u6cd5\u3067\u3059\u3002\n\n\u4eca\u56de\u306f\u3001[Kaggle\u306b\u3042\u308b\u72ac\u3068\u732b\u306e\u753b\u50cf\u30c7\u30fc\u30bf](https://www.kaggle.com/c/dogs-vs-cats/data)\u3092\u7528\u3044\u3066\u3001\u72ac\u3068\u732b\u306e\u5206\u985e\u3092\u884c\u3044\u307e\u3059\u3002\u5206\u985e\u6cd5\u306f\u5358\u7d14\u3067\u3001\u72ac\u3068\u732b\u3067\u306f\u6bdb\u306e\u8272\u306e\u611f\u3058\u304c\u9055\u3046\u306e\u3067\u3001\u5199\u771f\u306e\u8272\u306e\u5206\u5e03\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u3057\u3066\u3001\u305d\u306e\u5f62\u304b\u3089\u5206\u985e\u3059\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\u9854\u306e\u5f62\u3068\u304b\u306f\u5168\u304f\u8003\u616e\u3057\u307e\u305b\u3093\u3002\n\n# \u53c2\u8003\u8cc7\u6599\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001\u4eca\u56de\u306f\u539f\u8457\u306e\u30b3\u30fc\u30c9\u304c\u30cd\u30c3\u30c8\u306b\u898b\u5f53\u305f\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u30d5\u30eb\u30b3\u30fc\u30c9\u3092\u3054\u89a7\u306b\u306a\u308a\u305f\u3044\u65b9\u306f\u3001\u539f\u8457\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\n\n\u539f\u8457\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\n\n```fsharp:Library1.fs\n\n    let getHist(values: float[]) = \n        values |> Seq.groupBy(fun color -> color)\n               |> Map.ofSeq\n               |> Map.map(fun t colors -> Seq.length colors)\n               |> Map.toArray\n               |> Array.map(fun colorCount -> float (snd colorCount))\n\n```\n`Seq.groupBy(fun color -> color)`\u306b\u304a\u3044\u3066\u3001`fun`\u306f\u30e9\u30e0\u30c0\u5f0f\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u3059\u3002`fun parameter-list -> expression`\u3068\u3044\u3046\u5f62\u5f0f\u3092\u3068\u308a\u307e\u3059\u3002`Seq.groupBy`\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u3067\u3064\u304f\u3089\u308c\u308bkey\u3092\u3082\u3068\u306b\u3001\u914d\u5217\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u307e\u3059\u3002[MSDN\u306e\u4f8b](https://msdn.microsoft.com/visualfsharpdocs/conceptual/sequences-%5bfsharp%5d)\u3092\u6319\u3052\u3066\u304a\u304f\u3068\u3002\n\n```\n    let sequence = seq { 1 .. 100 }\n    let sequences3 = Seq.groupBy (fun index ->\n                                    if (index % 3 = 0) then 0\n                                      elif (index % 3 = 1) then 1\n                                      else 2) sequence\n```\n\u3053\u306e\u8a08\u7b97\u7d50\u679c\u306f\u3001`(1, seq [1; 4; 7; 10; ...]) (2, seq [2; 5; 8; 11; ...]) (0, seq [3; 6; 9; 12; ...])`\u306b\u306a\u308a\u307e\u3059\u3002\n\nSeq.groupBy\u306e\u3042\u3068\u306f\u3001Map.ofSeq\u3067\u914d\u5217\u304b\u3089map\u3092\u751f\u6210\u3057\u3001Map.map...\u3067map\u306ecolors\u306b\u5bfe\u3057\u3066\u914d\u5217\u306e\u9577\u3055\u306e\u8a08\u7b97\u3092\u9069\u7528\u3057\u3001Map.toArray\u3067\u914d\u5217\u306b\u623b\u3057\u305f\u3042\u3068\u3001snd \u3067\u30bf\u30d7\u30eb\u306e\u4e8c\u756a\u76ee\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n# Unity\u3067\u306e\u5b9f\u884c\n[Unity\u3067F#\u3092\u5b9f\u884c\u3059\u308b\u969b\u306e\u57fa\u672c\u7684\u306a\u624b\u9806](http://qiita.com/yanosen_jp/items/74fe2b279aa2ff51858a)\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001System.Drawing\u3068\u3044\u3046\u540d\u524d\u7a7a\u9593\u3092\u4f7f\u3046\u306e\u3067\u3001\u305d\u3061\u3089\u3082Solution Explorer\u306eReference\u30d5\u30a9\u30eb\u30c0\u3092\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3001\n![image](https://qiita-image-store.s3.amazonaws.com/0/58503/c1e1adc8-d053-06e9-e7f0-0886ab5b3bae.png)\n\nAdd Reference\u3092\u9078\u3093\u3067\u3001\u4e0b\u56f3\u306e\u901a\u308a\u3001Assemblies/Framework\u30bf\u30d6\u306eSystem.Drawing\u3092\u9078\u3093\u3067OK\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/58503/f310290a-fc32-b21e-03f1-cde54b606607.png)\n\n\u3053\u308c\u3067\u3001Image\u30af\u30e9\u30b9\u306a\u3069\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u3044\u3064\u3082\u901a\u308a\u3001namespace\u3068module\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```fsharp:Library1.fs\n\n  namespace kNNDogCat\n\n  open System\n  open System.IO\n  open System.Drawing\n  module kNNDogCatEntry = \n    type Entry = {Label:string;Values:float[]}\n\n  \\\\ \u4ee5\u4e0b\u7565\n\n```\n\n\u3042\u3068\u3001Unity\u3067\u3064\u304b\u3048\u308bF#3.0\u3067\u306fList.item\u304c\u4f7f\u3048\u306a\u3044\u306e\u3067\u3001List.nth\u3067\u4ee3\u7528\u3057\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\n\n```fsharp:Library1.fs\n \\\\ \u7565\n\n  let guess1 = fst (List.nth labels1 0)\n\n \\\\ \u7565\n```\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u539f\u8457\u3067\u306f\u8a08\u7b97\u7d50\u679c\u306e\u8868\u793a\u306fprintfn\u3092\u4f7f\u3063\u3066\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u3001Unity\u5074\u306b\u51fa\u529b\u3057\u307e\u3057\u3087\u3046\u3002Unity C#\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\n\n```csharp:ReadFSharp.cs\nusing UnityEngine;\nusing kNNDogCat;\n\npublic class ReadFSharp : MonoBehaviour\n{\n    void Start()\n    {\n        Debug.Log(kNNDogCatEntry.labels1);\n        Debug.Log(\"The known dog is identified as a \"+kNNDogCatEntry.guess1);\n        Debug.Log(kNNDogCatEntry.labels2);\n        Debug.Log(\"The known dog is identified as a \"+kNNDogCatEntry.guess2);\n    }\n}\n```\n"}