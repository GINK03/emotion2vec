{"context": "ES2015\u662f\u57282015\u5e746\u6708\u6b63\u5f0f\u6279\u51c6\u7684\u6700\u65b0 javascript\u6807\u51c6,\u81ea\u4ece es5\u57282009\u5e74\u88ab\u6279\u51c6\u4e4b\u540e, \u8fd9\u662f\u4e00\u6b21\u8f83\u5927\u7684\u66f4\u65b0.\u521a\u5f00\u59cb\u8fd8\u53ebes6\u6765\u7740\u540e\u6765\u6539\u540d\u5b57\u4e86.\n\nhttps://github.com/lukehoban/es6features\n\u6765\u81ea https://babeljs.io/docs/learn-es2015/\n\n\nfeatures:\n\nArrow\u548c Lexical this\n\u901a\u8fc7=>\u8bed\u6cd5\u662f\u4e00\u79cd\u51fd\u6570\u7684\u7b80\u5199. \u7c7b\u4f3c C#, Java8\u8fd8\u6709 CoffeeScript. \u4ed6\u4eec\u90fd\u652f\u6301\u8868\u8fbe\u5f0f\u6216\u8005\u58f0\u660e. \u4e0d\u540c\u4e8e\u51fd\u6570\u7684\u5c31\u662f, \u526a\u5934\u5171\u4eab\u540c\u4e00\u4e2a\u8bed\u4e49\u7684this\n// Expression bodies\nvar odds = evens.map(v => v + 1);\nvar nums = evens.map((v, i) => v + i);\n\n// Statement bodies\nnums.forEach(v => {\n  if (v % 5 === 0)\n    fives.push(v);\n});\n\n// Lexical this\nvar bob = {\n  _name: \"Bob\",\n  _friends: [],\n  printFriends() {\n    this._friends.forEach(f =>\n      console.log(this._name + \" knows \" + f));\n  }\n};\n\n\n\n\u7c7b\nES2015\u91cc\u7684\u7c7b\u5c31\u662f\u4e00\u4e2a\u57fa\u4e8eprototype\u7684\u9762\u5411\u5bf9\u8c61\u6a21\u578b\u7b80\u5355\u7684\u8bed\u6cd5\u7cd6, \u6709\u4e00\u4e2a\u7b80\u5355\u7684\u7ea6\u675f\u58f0\u660e, \u53ef\u4ee5\u8ba9\u5b9a\u4e49\u7c7b\u66f4\u52a0\u65b9\u4fbf. \u5b83\u652f\u6301\u539f\u578b\u7c7b\u578b\u7684\u7ee7\u627f,\u8c03\u7528\u7236\u7c7b, \u5b9e\u4f8b, \u9759\u6001\u65b9\u6cd5\u8fd8\u6709\u6784\u9020\u51fd\u6570.\nclass SkinnedMesh extends THREE.Mesh {\n  constructor(geometry, materials) {\n    super(geometry, materials);\n\n    this.idMatrix = SkinnedMesh.defaultMatrix();\n    this.bones = [];\n    this.boneMatrices = [];\n    //...\n  }\n  update(camera) {\n    //...\n    super.update();\n  }\n  static defaultMatrix() {\n    return new THREE.Matrix4();\n  }\n}\n\n\n\u589e\u5f3a\u5bf9\u8c61\u8868\u8ff0\n\u5bf9\u8c61\u8868\u8ff0\u662f\u7528\u6765\u5728\u6784\u5efa\u51fd\u6570\u7684\u65f6\u5019\u8bbe\u7f6e\u539f\u578b\u7528\u7684. \u7b80\u5199\u6210foo:foo, \u8fd9\u6837\u7684\u8d4b\u503c, \u5b9a\u4e49\u65b9\u6cd5\u6216\u8005\u8c03\u7528\u7236\u7c7b,\u53e6\u5916\u8fd9\u6837\u4e5f\u66f4\u52a0\u62c9\u8fdb\u6765\u4e86\u5bf9\u8c61\u8868\u8ff0\u548c\u7c7b\u5b9a\u4e49\u95f4\u7684\u8ddd\u79bb. \u8ba9\u5927\u5bb6\u611f\u89c9\u5230\u8fd9\u6837\u7684\u4fbf\u5229\u6027,\u5728\u5b9a\u4e49\u5bf9\u8c61\u7684\u65f6\u5019.\nvar obj = {\n    // Sets the prototype. \"__proto__\" or '__proto__' would also work.\n    __proto__: theProtoObj,\n    // Computed property name does not set prototype or trigger early error for\n    // duplicate __proto__ properties.\n    ['__proto__']: somethingElse,\n    // Shorthand for \u2018handler: handler\u2019\n    handler,\n    // Methods\n    toString() {\n     // Super calls\n     return \"d \" + super.toString();\n    },\n    // Computed (dynamic) property names\n    [ \"prop_\" + (() => 42)() ]: 42\n};\n\n\n\u8fd9\u4e2a__ proto__ \u5c5e\u6027\u9700\u8981\u539f\u751f\u7684\u652f\u6301.\u6709\u4e9b\u6d4f\u89c8\u5668\u5e76\u4e0d\u652f\u6301.\n\n\n\u6a21\u677f\u5b57\u7b26\u4e32\n\u6a21\u677f\u5b57\u7b26\u4e32\u63d0\u4f9b\u7ed9\u6784\u9020\u5b57\u7b26\u4e32\u65f6\u4e00\u79cd\u8bed\u6cd5\u7cd6. \u8fd9\u4e2a\u7c7b\u4f3c\u4e8e perl\u6216\u8005 python \u91cc\u5bf9\u4e8e string \u7684\u89e3\u6790\u529f\u80fd. \u53e6\u5916\u4e00\u4e2a tag \u6dfb\u52a0\u5230\u91cc\u9762\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b83. \u907f\u514d\u88ab\u6ce8\u5165.\n// Basic literal string creation\n`This is a pretty little template string.`\n\n// Multiline strings\n`In ES5 this is\n not legal.`\n\n// Interpolate variable bindings\nvar name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n\n// Unescaped template strings\nString.raw`In ES5 \"\\n\" is a line-feed.`\n\n// Construct an HTTP request prefix is used to interpret the replacements and construction\nGET`http://foo.org/bar?a=${a}&b=${b}\n    Content-Type: application/json\n    X-Credentials: ${credentials}\n    { \"foo\": ${foo},\n      \"bar\": ${bar}}`(myOnReadyStateChangeHandler);\n\n\n\u89e3\u6790\u8d4b\u503c\n\u6790\u6784\u662f\u548c\u6a21\u5f0f\u5339\u914d\u7ed1\u5b9a\u4f7f\u7528. \u652f\u6301\u6570\u7ec4\u548c\u5bf9\u8c61\u7684\u5339\u914d. \u5339\u914d\u4e0d\u5230\u8fd4\u56deundefined\n// list matching\nvar [a, ,b] = [1,2,3];\na === 1;\nb === 3;\n\n// object matching\nvar { op: a, lhs: { op: b }, rhs: c }\n       = getASTNode()\n\n// object matching shorthand\n// binds `op`, `lhs` and `rhs` in scope\nvar {op, lhs, rhs} = getASTNode()\n\n// Can be used in parameter position\nfunction g({name: x}) {\n  console.log(x);\n}\ng({name: 5})\n\n// Fail-soft destructuring\nvar [a] = [];\na === undefined;\n\n// Fail-soft destructuring with defaults\nvar [a = 1] = [];\na === 1;\n\n// Destructuring + defaults arguments\nfunction r({x, y, w = 10, h = 10}) {\n  return x + y + w + h;\n}\nr({x:1, y:2}) === 23\n\n\n\u9ed8\u8ba4\u503c\n\u51fd\u6570\u9ed8\u8ba4\u503c,\u6570\u7ec4\u4f5c\u4e3a\u8fde\u7eed\u53c2\u6570, \u8f6c\u5316 trailing \u7684\u53c2\u6570\u4e3a\u6570\u7ec4.\n\nspread\u8fd0\u7b97\u7b26\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\nhttp://jsbin.com/riyokow/edit?js,console\n\nfunction f(x, y=12) {\n  // y is 12 if not passed (or passed as undefined)\n  return x + y;\n}\nf(3) == 15\nfunction f(x, ...y) {\n  // y is an Array\n  return x * y.length;\n}\nf(3, \"hello\", true) == 6\nfunction f(x, y, z) {\n  return x + y + z;\n}\n// Pass each elem of array as argument\nf(...[1,2,3]) == 6\n\n\n\nlet \u548c const \u8d4b\u503c\n\u5757\u6784\u9020, \u7528let\u6765\u5b9a\u4e49 new var, const\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u7684\u58f0\u660e\u8d4b\u503c.\u7981\u6b62\u6ca1\u6709\u58f0\u660e\u5c31\u8d4b\u503c.\nfunction f() {\n  {\n    let x;\n    {\n      // okay, block scoped name\n      const x = \"sneaky\";\n      // error, const\n      x = \"foo\";\n    }\n    // okay, declared with `let`\n    x = \"bar\";\n    // error, already declared in block\n    let x = \"inner\";\n  }\n}\n\n\n\u8fd9\u4e2a\u4f8b\u5b50\u5199\u7684\u4e71\u4e03\u516b\u7cdf\n\n\n\u904d\u5386\u5668 + \u65b0\u7684\u5faa\u73af\u8bed\u6cd5 for..of\n\u904d\u5386\u5bf9\u8c61\u53ef\u4ee5\u5141\u8bb8\u81ea\u5b9a\u4e49\u7684\u904d\u5386\u5982 CLR \u6216\u8005 Java \u7684 iterable, \u901a\u8fc7for..of\u6765\u904d\u5386.\n\u904d\u5386\u5bf9\u8c61\u4e0d\u4e00\u5b9a\u5f0f\u4e00\u4e2a\u58f0\u660e\u7684\u6570\u7ec4. \u53ef\u4ee5\u662f\u4e00\u4e2a\u53ef\u904d\u5386\u5bf9\u8c61.\n\nlet fibonacci = {\n  [Symbol.iterator]() {\n    let pre = 0, cur = 1;\n    return {\n      next() {\n        [pre, cur] = [cur, pre + cur];\n        return { done: false, value: cur }\n      }\n    }\n  }\n}\n\nfor (var n of fibonacci) {\n  // truncate the sequence at 1000\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n\n\n\u751f\u6210\u5668\n\u901a\u8fc7function* \u6216\u8005yield \u6765\u5b9e\u884c\u751f\u6210\u5668, \u5b83\u4e0d\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u4ee3\u66ff\u7684\u662f\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668.\nvar fibonacci = {\n  [Symbol.iterator]: function*() {\n    var pre = 0, cur = 1;\n    for (;;) {\n      var temp = pre;\n      pre = cur;\n      cur += temp;\n      yield cur;\n    }\n  }\n}\n\nfor (var n of fibonacci) {\n  // truncate the sequence at 1000\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n\n\nunicode\n\u652f\u6301\u5168 unicode,\n// same as ES5.1\n\"\ud842\udfb7\".length == 2\n\n// new RegExp behaviour, opt-in \u2018u\u2019\n\"\ud842\udfb7\".match(/./u)[0].length == 2\n\n// new form\n\"\\u{20BB7}\" == \"\ud842\udfb7\" == \"\\uD842\\uDFB7\"\n\n// new String ops\n\"\ud842\udfb7\".codePointAt(0) == 0x20BB7\n\n// for-of iterates code points\nfor(var c of \"\ud842\udfb7\") {\n  console.log(c);\n}\n\n\n\n\u6a21\u5757\u7684\u652f\u6301\n\u8bed\u8a00\u7ea7\u7684 module \u652f\u6301. \u4ece AMD CommonJS \u90a3\u91cc\u6d41\u884c\u7684 javascript module \u7684\u5199\u6cd5\u7ed9\u5f52\u7eb3\u5230\u8bed\u6cd5\u4e2d\n// lib/math.js\nexport function sum(x, y) {\n  return x + y;\n}\nexport var pi = 3.141593;\n// app.js\nimport * as math from \"lib/math\";\nconsole.log(\"2\u03c0 = \" + math.sum(math.pi, math.pi));\n// otherApp.js\nimport {sum, pi} from \"lib/math\";\nconsole.log(\"2\u03c0 = \" + sum(pi, pi));\nSome additional features include export default and export *:\n\n// lib/mathplusplus.js\nexport * from \"lib/math\";\nexport var e = 2.71828182846;\nexport default function(x) {\n    return Math.exp(x);\n}\n// app.js\nimport exp, {pi, e} from \"lib/mathplusplus\";\nconsole.log(\"e^\u03c0 = \" + exp(pi));\n\n\n\n\u6a21\u5757\u52a0\u8f7d\n\nMap Set WeakMap WeakSet\n// Sets\nvar s = new Set();\ns.add(\"hello\").add(\"goodbye\").add(\"hello\");\ns.size === 2;\ns.has(\"hello\") === true;\n\n// Maps\nvar m = new Map();\nm.set(\"hello\", 42);\nm.set(s, 34);\nm.get(s) == 34;\n\n// Weak Maps\nvar wm = new WeakMap();\nwm.set(s, { extra: 42 });\nwm.size === undefined\n\n// Weak Sets\nvar ws = new WeakSet();\nws.add({ data: 42 });\n// Because the added object has no other references, it will not be held in the set\n\n\nProxies\n// Proxying a normal object\nvar target = {};\nvar handler = {\n  get: function (receiver, name) {\n    return `Hello, ${name}!`;\n  }\n};\n\nvar p = new Proxy(target, handler);\np.world === \"Hello, world!\";\n// Proxying a function object\nvar target = function () { return \"I am the target\"; };\nvar handler = {\n  apply: function (receiver, ...args) {\n    return \"I am the proxy\";\n  }\n};\n\nvar p = new Proxy(target, handler);\np() === \"I am the proxy\";\n\n\nSymbols\nSymbol \u53ef\u4ee5\u63a7\u5236\u5bf9\u8c61\u72b6\u6001\u7684\u8bbf\u95ee, Symbol \u53ef\u4ee5\u8ba9\u5bf9\u8c61\u5c5e\u6027\u7684 key \u662f\u5b57\u7b26\u4e32\u8fd8\u662f symbol, Symbol \u662f\u4e00\u4e2a\u65b0\u7684\u9884\u5b9a\u4e8e\u7c7b\u578b.\n(function() {\n\n  // module scoped symbol\n  var key = Symbol(\"key\");\n\n  function MyClass(privateData) {\n    this[key] = privateData;\n  }\n\n  MyClass.prototype = {\n    doStuff: function() {\n      ... this[key] ...\n    }\n  };\n\n  // Limited support from Babel, full support requires native implementation.\n  typeof key === \"symbol\"\n})();\n\nvar c = new MyClass(\"hello\")\nc[\"key\"] === undefined\n\n\n\u4e00\u4e9b\u5185\u7f6e\u7c7b\u53ef\u4ee5\u88ab\u7ee7\u627f\n\u5982 Array Date DOM \u7684 Element \u7b49\n// User code of Array subclass\nclass MyArray extends Array {\n    constructor(...args) { super(...args); }\n}\n\nvar arr = new MyArray();\narr[1] = 12;\narr.length == 2\n\n\nMath + Number + String + Object APIs\n\u5185\u7f6e\u4e86 core \u7684 Math \u5e93, \u8fd8\u6709\u5f88\u591a API, Array \u7684\u76f8\u5173\u64cd\u4f5c\u5e2e\u52a9\u7c7b, Object.assign \u7684\u76f8\u5173\u590d\u5236\u529f\u80fd.\nNumber.EPSILON\nNumber.isInteger(Infinity) // false\nNumber.isNaN(\"NaN\") // false\n\nMath.acosh(3) // 1.762747174039086\nMath.hypot(3, 4) // 5\nMath.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2\n\n\"abcde\".includes(\"cd\") // true\n\"abc\".repeat(3) // \"abcabcabc\"\n\nArray.from(document.querySelectorAll(\"*\")) // Returns a real Array\nArray.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior\n[0, 0, 0].fill(7, 1) // [0,7,7]\n[1,2,3].findIndex(x => x == 2) // 1\n[\"a\", \"b\", \"c\"].entries() // iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]\n[\"a\", \"b\", \"c\"].keys() // iterator 0, 1, 2\n[\"a\", \"b\", \"c\"].values() // iterator \"a\", \"b\", \"c\"\n\nObject.assign(Point, { origin: new Point(0,0) })\n\n\nBinary and Octal Literals\n\u65b0\u589e\u4e24\u79cd\u6570\u636e\u7c7b\u578b\n\nPromise\n\u5b83\u662f\u4e00\u4e2a\u5f02\u6b65\u7f16\u7a0b\u7684\u5e93,\nfunction timeout(duration = 0) {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, duration);\n    })\n}\n\nvar p = timeout(1000).then(() => {\n    return timeout(2000);\n}).then(() => {\n    throw new Error(\"hmm\");\n}).catch(err => {\n    return Promise.all([timeout(100), timeout(200)]);\n})\n\n\nReflect API\n\u53cd\u5c04 API, \u53ef\u4ee5\u63d0\u4f9b\u8fd0\u884c\u65f6object\u7684\u5143\u6570\u636e\nvar O = {a: 1};\nObject.defineProperty(O, 'b', {value: 2});\nO[Symbol('c')] = 3;\n\nReflect.ownKeys(O); // ['a', 'b', Symbol(c)]\n\nfunction C(a, b){\n  this.c = a + b;\n}\nvar instance = Reflect.construct(C, [20, 22]);\ninstance.c; // 42\n\n\n\nTail Calls\n\u4fdd\u8bc1\u9012\u5f52\u8fd0\u884c\u66f4\u52a0\u5b89\u5168?\nfunction factorial(n, acc = 1) {\n    \"use strict\";\n    if (n <= 1) return acc;\n    return factorial(n - 1, n * acc);\n}\n\n// Stack overflow in most implementations today,\n// but safe on arbitrary inputs in ES2015\nfactorial(100000)\n\n\nES2015\u662f\u57282015\u5e746\u6708\u6b63\u5f0f\u6279\u51c6\u7684\u6700\u65b0 `javascript`\u6807\u51c6,\u81ea\u4ece `es5`\u57282009\u5e74\u88ab\u6279\u51c6\u4e4b\u540e, \u8fd9\u662f\u4e00\u6b21\u8f83\u5927\u7684\u66f4\u65b0.\u521a\u5f00\u59cb\u8fd8\u53eb` es6`\u6765\u7740\u540e\u6765\u6539\u540d\u5b57\u4e86.\n\n\n> https://github.com/lukehoban/es6features\t\n> \u6765\u81ea https://babeljs.io/docs/learn-es2015/\n\n#features:\n\n## Arrow\u548c Lexical this\n\n\u901a\u8fc7`=>`\u8bed\u6cd5\u662f\u4e00\u79cd\u51fd\u6570\u7684\u7b80\u5199. \u7c7b\u4f3c C#, Java8\u8fd8\u6709 CoffeeScript. \u4ed6\u4eec\u90fd\u652f\u6301\u8868\u8fbe\u5f0f\u6216\u8005\u58f0\u660e. \u4e0d\u540c\u4e8e\u51fd\u6570\u7684\u5c31\u662f, \u526a\u5934\u5171\u4eab\u540c\u4e00\u4e2a\u8bed\u4e49\u7684` this`\n\n```js\n// Expression bodies\nvar odds = evens.map(v => v + 1);\nvar nums = evens.map((v, i) => v + i);\n\n// Statement bodies\nnums.forEach(v => {\n  if (v % 5 === 0)\n    fives.push(v);\n});\n\n// Lexical this\nvar bob = {\n  _name: \"Bob\",\n  _friends: [],\n  printFriends() {\n    this._friends.forEach(f =>\n      console.log(this._name + \" knows \" + f));\n  }\n};\n\n```\n\n\n## \u7c7b\n\nES2015\u91cc\u7684\u7c7b\u5c31\u662f\u4e00\u4e2a\u57fa\u4e8e` prototype`\u7684\u9762\u5411\u5bf9\u8c61\u6a21\u578b\u7b80\u5355\u7684\u8bed\u6cd5\u7cd6, \u6709\u4e00\u4e2a\u7b80\u5355\u7684\u7ea6\u675f\u58f0\u660e, \u53ef\u4ee5\u8ba9\u5b9a\u4e49\u7c7b\u66f4\u52a0\u65b9\u4fbf. \u5b83\u652f\u6301\u539f\u578b\u7c7b\u578b\u7684\u7ee7\u627f,\u8c03\u7528\u7236\u7c7b, \u5b9e\u4f8b, \u9759\u6001\u65b9\u6cd5\u8fd8\u6709\u6784\u9020\u51fd\u6570.\n\n```\nclass SkinnedMesh extends THREE.Mesh {\n  constructor(geometry, materials) {\n    super(geometry, materials);\n\n    this.idMatrix = SkinnedMesh.defaultMatrix();\n    this.bones = [];\n    this.boneMatrices = [];\n    //...\n  }\n  update(camera) {\n    //...\n    super.update();\n  }\n  static defaultMatrix() {\n    return new THREE.Matrix4();\n  }\n}\n```\n\n\n## \u589e\u5f3a\u5bf9\u8c61\u8868\u8ff0\n\n\u5bf9\u8c61\u8868\u8ff0\u662f\u7528\u6765\u5728\u6784\u5efa\u51fd\u6570\u7684\u65f6\u5019\u8bbe\u7f6e\u539f\u578b\u7528\u7684. \u7b80\u5199\u6210` foo:foo`, \u8fd9\u6837\u7684\u8d4b\u503c, \u5b9a\u4e49\u65b9\u6cd5\u6216\u8005\u8c03\u7528\u7236\u7c7b,\u53e6\u5916\u8fd9\u6837\u4e5f\u66f4\u52a0\u62c9\u8fdb\u6765\u4e86\u5bf9\u8c61\u8868\u8ff0\u548c\u7c7b\u5b9a\u4e49\u95f4\u7684\u8ddd\u79bb. \u8ba9\u5927\u5bb6\u611f\u89c9\u5230\u8fd9\u6837\u7684\u4fbf\u5229\u6027,\u5728\u5b9a\u4e49\u5bf9\u8c61\u7684\u65f6\u5019.\n\n```js\nvar obj = {\n    // Sets the prototype. \"__proto__\" or '__proto__' would also work.\n    __proto__: theProtoObj,\n    // Computed property name does not set prototype or trigger early error for\n    // duplicate __proto__ properties.\n    ['__proto__']: somethingElse,\n    // Shorthand for \u2018handler: handler\u2019\n    handler,\n    // Methods\n    toString() {\n     // Super calls\n     return \"d \" + super.toString();\n    },\n    // Computed (dynamic) property names\n    [ \"prop_\" + (() => 42)() ]: 42\n};\n```\n\n\n> \u8fd9\u4e2a__ proto__ \u5c5e\u6027\u9700\u8981\u539f\u751f\u7684\u652f\u6301.\u6709\u4e9b\u6d4f\u89c8\u5668\u5e76\u4e0d\u652f\u6301.\n\n## \u6a21\u677f\u5b57\u7b26\u4e32\n\n\u6a21\u677f\u5b57\u7b26\u4e32\u63d0\u4f9b\u7ed9\u6784\u9020\u5b57\u7b26\u4e32\u65f6\u4e00\u79cd\u8bed\u6cd5\u7cd6. \u8fd9\u4e2a\u7c7b\u4f3c\u4e8e perl\u6216\u8005 python \u91cc\u5bf9\u4e8e string \u7684\u89e3\u6790\u529f\u80fd. \u53e6\u5916\u4e00\u4e2a tag \u6dfb\u52a0\u5230\u91cc\u9762\u53ef\u4ee5\u81ea\u5b9a\u4e49\u5b83. \u907f\u514d\u88ab\u6ce8\u5165.\n\n\n```\n// Basic literal string creation\n`This is a pretty little template string.`\n\n// Multiline strings\n`In ES5 this is\n not legal.`\n\n// Interpolate variable bindings\nvar name = \"Bob\", time = \"today\";\n`Hello ${name}, how are you ${time}?`\n\n// Unescaped template strings\nString.raw`In ES5 \"\\n\" is a line-feed.`\n\n// Construct an HTTP request prefix is used to interpret the replacements and construction\nGET`http://foo.org/bar?a=${a}&b=${b}\n    Content-Type: application/json\n    X-Credentials: ${credentials}\n    { \"foo\": ${foo},\n      \"bar\": ${bar}}`(myOnReadyStateChangeHandler);\n```\n\n\n## \u89e3\u6790\u8d4b\u503c\n\n\u6790\u6784\u662f\u548c\u6a21\u5f0f\u5339\u914d\u7ed1\u5b9a\u4f7f\u7528. \u652f\u6301\u6570\u7ec4\u548c\u5bf9\u8c61\u7684\u5339\u914d. \u5339\u914d\u4e0d\u5230\u8fd4\u56de` undefined`\n\n```\n// list matching\nvar [a, ,b] = [1,2,3];\na === 1;\nb === 3;\n\n// object matching\nvar { op: a, lhs: { op: b }, rhs: c }\n       = getASTNode()\n\n// object matching shorthand\n// binds `op`, `lhs` and `rhs` in scope\nvar {op, lhs, rhs} = getASTNode()\n\n// Can be used in parameter position\nfunction g({name: x}) {\n  console.log(x);\n}\ng({name: 5})\n\n// Fail-soft destructuring\nvar [a] = [];\na === undefined;\n\n// Fail-soft destructuring with defaults\nvar [a = 1] = [];\na === 1;\n\n// Destructuring + defaults arguments\nfunction r({x, y, w = 10, h = 10}) {\n  return x + y + w + h;\n}\nr({x:1, y:2}) === 23\n```\n\n\n## \u9ed8\u8ba4\u503c\n\n\u51fd\u6570\u9ed8\u8ba4\u503c,\u6570\u7ec4\u4f5c\u4e3a\u8fde\u7eed\u53c2\u6570, \u8f6c\u5316 trailing \u7684\u53c2\u6570\u4e3a\u6570\u7ec4.\n###spread\u8fd0\u7b97\u7b26\n\n> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\n> http://jsbin.com/riyokow/edit?js,console\n\n\n```\nfunction f(x, y=12) {\n  // y is 12 if not passed (or passed as undefined)\n  return x + y;\n}\nf(3) == 15\nfunction f(x, ...y) {\n  // y is an Array\n  return x * y.length;\n}\nf(3, \"hello\", true) == 6\nfunction f(x, y, z) {\n  return x + y + z;\n}\n// Pass each elem of array as argument\nf(...[1,2,3]) == 6\n\n```\n\n## let \u548c const \u8d4b\u503c\n\n\u5757\u6784\u9020, \u7528`let`\u6765\u5b9a\u4e49 new var, `const `\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u7684\u58f0\u660e\u8d4b\u503c.\u7981\u6b62\u6ca1\u6709\u58f0\u660e\u5c31\u8d4b\u503c.\n\n```\nfunction f() {\n  {\n    let x;\n    {\n      // okay, block scoped name\n      const x = \"sneaky\";\n      // error, const\n      x = \"foo\";\n    }\n    // okay, declared with `let`\n    x = \"bar\";\n    // error, already declared in block\n    let x = \"inner\";\n  }\n}\n```\n\n> \u8fd9\u4e2a\u4f8b\u5b50\u5199\u7684\u4e71\u4e03\u516b\u7cdf\n\n## \u904d\u5386\u5668 + \u65b0\u7684\u5faa\u73af\u8bed\u6cd5 for..of\n\n\u904d\u5386\u5bf9\u8c61\u53ef\u4ee5\u5141\u8bb8\u81ea\u5b9a\u4e49\u7684\u904d\u5386\u5982 CLR \u6216\u8005 Java \u7684 iterable, \u901a\u8fc7` for..of`\u6765\u904d\u5386.\n\u904d\u5386\u5bf9\u8c61\u4e0d\u4e00\u5b9a\u5f0f\u4e00\u4e2a\u58f0\u660e\u7684\u6570\u7ec4. \u53ef\u4ee5\u662f\u4e00\u4e2a\u53ef\u904d\u5386\u5bf9\u8c61.\n\n```\n\nlet fibonacci = {\n  [Symbol.iterator]() {\n    let pre = 0, cur = 1;\n    return {\n      next() {\n        [pre, cur] = [cur, pre + cur];\n        return { done: false, value: cur }\n      }\n    }\n  }\n}\n\nfor (var n of fibonacci) {\n  // truncate the sequence at 1000\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n```\n\n## \u751f\u6210\u5668\n\n\u901a\u8fc7` function*` \u6216\u8005` yield` \u6765\u5b9e\u884c\u751f\u6210\u5668, \u5b83\u4e0d\u4f1a\u8fd4\u56de\u4e00\u4e2a\u503c\u4ee3\u66ff\u7684\u662f\u8fd4\u56de\u4e00\u4e2a\u751f\u6210\u5668.\n\n```\nvar fibonacci = {\n  [Symbol.iterator]: function*() {\n    var pre = 0, cur = 1;\n    for (;;) {\n      var temp = pre;\n      pre = cur;\n      cur += temp;\n      yield cur;\n    }\n  }\n}\n\nfor (var n of fibonacci) {\n  // truncate the sequence at 1000\n  if (n > 1000)\n    break;\n  console.log(n);\n}\n```\n\n\n## unicode\n\n\u652f\u6301\u5168 unicode,\n\n```\n// same as ES5.1\n\"\ud842\udfb7\".length == 2\n\n// new RegExp behaviour, opt-in \u2018u\u2019\n\"\ud842\udfb7\".match(/./u)[0].length == 2\n\n// new form\n\"\\u{20BB7}\" == \"\ud842\udfb7\" == \"\\uD842\\uDFB7\"\n\n// new String ops\n\"\ud842\udfb7\".codePointAt(0) == 0x20BB7\n\n// for-of iterates code points\nfor(var c of \"\ud842\udfb7\") {\n  console.log(c);\n}\n\n```\n\n## \u6a21\u5757\u7684\u652f\u6301\n\n\u8bed\u8a00\u7ea7\u7684 module \u652f\u6301. \u4ece AMD CommonJS \u90a3\u91cc\u6d41\u884c\u7684 javascript module \u7684\u5199\u6cd5\u7ed9\u5f52\u7eb3\u5230\u8bed\u6cd5\u4e2d\n\n```\n// lib/math.js\nexport function sum(x, y) {\n  return x + y;\n}\nexport var pi = 3.141593;\n// app.js\nimport * as math from \"lib/math\";\nconsole.log(\"2\u03c0 = \" + math.sum(math.pi, math.pi));\n// otherApp.js\nimport {sum, pi} from \"lib/math\";\nconsole.log(\"2\u03c0 = \" + sum(pi, pi));\nSome additional features include export default and export *:\n\n// lib/mathplusplus.js\nexport * from \"lib/math\";\nexport var e = 2.71828182846;\nexport default function(x) {\n    return Math.exp(x);\n}\n// app.js\nimport exp, {pi, e} from \"lib/mathplusplus\";\nconsole.log(\"e^\u03c0 = \" + exp(pi));\n\n```\n\n#### \u6a21\u5757\u52a0\u8f7d\n\n\n## Map Set WeakMap WeakSet\n\n```\n// Sets\nvar s = new Set();\ns.add(\"hello\").add(\"goodbye\").add(\"hello\");\ns.size === 2;\ns.has(\"hello\") === true;\n\n// Maps\nvar m = new Map();\nm.set(\"hello\", 42);\nm.set(s, 34);\nm.get(s) == 34;\n\n// Weak Maps\nvar wm = new WeakMap();\nwm.set(s, { extra: 42 });\nwm.size === undefined\n\n// Weak Sets\nvar ws = new WeakSet();\nws.add({ data: 42 });\n// Because the added object has no other references, it will not be held in the set\n```\n\n## Proxies\n\n\n```\n// Proxying a normal object\nvar target = {};\nvar handler = {\n  get: function (receiver, name) {\n    return `Hello, ${name}!`;\n  }\n};\n\nvar p = new Proxy(target, handler);\np.world === \"Hello, world!\";\n// Proxying a function object\nvar target = function () { return \"I am the target\"; };\nvar handler = {\n  apply: function (receiver, ...args) {\n    return \"I am the proxy\";\n  }\n};\n\nvar p = new Proxy(target, handler);\np() === \"I am the proxy\";\n```\n\n## Symbols\n\nSymbol \u53ef\u4ee5\u63a7\u5236\u5bf9\u8c61\u72b6\u6001\u7684\u8bbf\u95ee, Symbol \u53ef\u4ee5\u8ba9\u5bf9\u8c61\u5c5e\u6027\u7684 key \u662f\u5b57\u7b26\u4e32\u8fd8\u662f symbol, `Symbol` \u662f\u4e00\u4e2a\u65b0\u7684\u9884\u5b9a\u4e8e\u7c7b\u578b.\n\n```\n(function() {\n\n  // module scoped symbol\n  var key = Symbol(\"key\");\n\n  function MyClass(privateData) {\n    this[key] = privateData;\n  }\n\n  MyClass.prototype = {\n    doStuff: function() {\n      ... this[key] ...\n    }\n  };\n\n  // Limited support from Babel, full support requires native implementation.\n  typeof key === \"symbol\"\n})();\n\nvar c = new MyClass(\"hello\")\nc[\"key\"] === undefined\n```\n\n\n## \u4e00\u4e9b\u5185\u7f6e\u7c7b\u53ef\u4ee5\u88ab\u7ee7\u627f\n\n\u5982 Array Date DOM \u7684 Element \u7b49\n\n```\n// User code of Array subclass\nclass MyArray extends Array {\n    constructor(...args) { super(...args); }\n}\n\nvar arr = new MyArray();\narr[1] = 12;\narr.length == 2\n```\n\n## Math + Number + String + Object APIs\n\n\n\u5185\u7f6e\u4e86 core \u7684 Math \u5e93, \u8fd8\u6709\u5f88\u591a API, Array \u7684\u76f8\u5173\u64cd\u4f5c\u5e2e\u52a9\u7c7b, Object.assign \u7684\u76f8\u5173\u590d\u5236\u529f\u80fd.\n\n```\nNumber.EPSILON\nNumber.isInteger(Infinity) // false\nNumber.isNaN(\"NaN\") // false\n\nMath.acosh(3) // 1.762747174039086\nMath.hypot(3, 4) // 5\nMath.imul(Math.pow(2, 32) - 1, Math.pow(2, 32) - 2) // 2\n\n\"abcde\".includes(\"cd\") // true\n\"abc\".repeat(3) // \"abcabcabc\"\n\nArray.from(document.querySelectorAll(\"*\")) // Returns a real Array\nArray.of(1, 2, 3) // Similar to new Array(...), but without special one-arg behavior\n[0, 0, 0].fill(7, 1) // [0,7,7]\n[1,2,3].findIndex(x => x == 2) // 1\n[\"a\", \"b\", \"c\"].entries() // iterator [0, \"a\"], [1,\"b\"], [2,\"c\"]\n[\"a\", \"b\", \"c\"].keys() // iterator 0, 1, 2\n[\"a\", \"b\", \"c\"].values() // iterator \"a\", \"b\", \"c\"\n\nObject.assign(Point, { origin: new Point(0,0) })\n```\n\n## Binary and Octal Literals\n\n\u65b0\u589e\u4e24\u79cd\u6570\u636e\u7c7b\u578b\n\n\n## Promise\n\n\u5b83\u662f\u4e00\u4e2a\u5f02\u6b65\u7f16\u7a0b\u7684\u5e93,\n\n```\nfunction timeout(duration = 0) {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, duration);\n    })\n}\n\nvar p = timeout(1000).then(() => {\n    return timeout(2000);\n}).then(() => {\n    throw new Error(\"hmm\");\n}).catch(err => {\n    return Promise.all([timeout(100), timeout(200)]);\n})\n```\n\n\n## Reflect API\n\n\u53cd\u5c04 API, \u53ef\u4ee5\u63d0\u4f9b\u8fd0\u884c\u65f6object\u7684\u5143\u6570\u636e\n\n\n```\nvar O = {a: 1};\nObject.defineProperty(O, 'b', {value: 2});\nO[Symbol('c')] = 3;\n\nReflect.ownKeys(O); // ['a', 'b', Symbol(c)]\n\nfunction C(a, b){\n  this.c = a + b;\n}\nvar instance = Reflect.construct(C, [20, 22]);\ninstance.c; // 42\n\n```\n\n##  Tail Calls\n\n\u4fdd\u8bc1\u9012\u5f52\u8fd0\u884c\u66f4\u52a0\u5b89\u5168?\n\n```\nfunction factorial(n, acc = 1) {\n    \"use strict\";\n    if (n <= 1) return acc;\n    return factorial(n - 1, n * acc);\n}\n\n// Stack overflow in most implementations today,\n// but safe on arbitrary inputs in ES2015\nfactorial(100000)\n```\n", "tags": ["JavaScript", "es2015"]}