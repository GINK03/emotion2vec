{"context": " More than 1 year has passed since last update.\u6a19\u6e96\u554f\u984c\u3068\u5b9f\u884c\u65b9\u6cd5\n\n\u6700\u5927\u30de\u30c3\u30c1\u30f3\u30b0\u554f\u984c\n\u7121\u5411\u30b0\u30e9\u30d5G=(V,E)G=(V,E)G=(V,E)\u306b\u5bfe\u3057\u8fba\u306e\u672c\u6570\u304c\u6700\u5927\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u6c42\u3081\u3088\u3002\n\n\u5b9f\u884c\u65b9\u6cd5\n\nusage\nSignature: nx.max_weight_matching(G, maxcardinality=False)\nDocstring:\nCompute a maximum-weighted matching of G.\n\nA matching is a subset of edges in which no node occurs more than once.\nThe cardinality of a matching is the number of matched edges.\nThe weight of a matching is the sum of the weights of its edges.\n\n\n\npython\n# CSV\u30c7\u30fc\u30bf\nimport networkx as nx, matplotlib.pyplot as plt\nfrom ortoolpy import graph_from_table, networkx_draw\ntbn = pd.read_csv('data/node0.csv')\ntbe = pd.read_csv('data/edge0.csv')\ng = graph_from_table(tbn, tbe)\nfor i, j in g.edges():\n    del g.adj[i][j]['weight']\nd = nx.max_weight_matching(g)\npos = networkx_draw(g)\nnx.draw_networkx_edges(g, pos, width=3, edgelist=[(i, j) for i, j in d.items()])\nplt.show()\nprint(d)\n\n\n\n\u7d50\u679c\n{0: 2, 1: 5, 2: 0, 3: 4, 4: 3, 5: 1}\n\n\n\n\npython\n# \u4e71\u6570\u30c7\u30fc\u30bf\nimport networkx as nx, matplotlib.pyplot as plt\nfrom ortoolpy import networkx_draw\ng = nx.random_graphs.fast_gnp_random_graph(10, 0.3, 1)\nd = nx.max_weight_matching(g)\npos = networkx_draw(g, nx.spring_layout(g))\nnx.draw_networkx_edges(g, pos, width=3, edgelist=[(i, j) for i, j in d.items()])\nplt.show()\n\n\n\n\n\u30c7\u30fc\u30bf\n\ndata/node0.csv\ndata/edge0.csv\n\n[\u6a19\u6e96\u554f\u984c\u3068\u5b9f\u884c\u65b9\u6cd5](0f6c1a4415d196e64314)\n##\u6700\u5927\u30de\u30c3\u30c1\u30f3\u30b0\u554f\u984c\n\u7121\u5411\u30b0\u30e9\u30d5$G=(V,E)$\u306b\u5bfe\u3057\u8fba\u306e\u672c\u6570\u304c\u6700\u5927\u306e\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u6c42\u3081\u3088\u3002\n\n##\u5b9f\u884c\u65b9\u6cd5\n```text:usage\nSignature: nx.max_weight_matching(G, maxcardinality=False)\nDocstring:\nCompute a maximum-weighted matching of G.\n\nA matching is a subset of edges in which no node occurs more than once.\nThe cardinality of a matching is the number of matched edges.\nThe weight of a matching is the sum of the weights of its edges.\n```\n```python:python\n# CSV\u30c7\u30fc\u30bf\nimport networkx as nx, matplotlib.pyplot as plt\nfrom ortoolpy import graph_from_table, networkx_draw\ntbn = pd.read_csv('data/node0.csv')\ntbe = pd.read_csv('data/edge0.csv')\ng = graph_from_table(tbn, tbe)\nfor i, j in g.edges():\n    del g.adj[i][j]['weight']\nd = nx.max_weight_matching(g)\npos = networkx_draw(g)\nnx.draw_networkx_edges(g, pos, width=3, edgelist=[(i, j) for i, j in d.items()])\nplt.show()\nprint(d)\n```\n```text:\u7d50\u679c\n{0: 2, 1: 5, 2: 0, 3: 4, 4: 3, 5: 1}\n```\n![mwm2.png](https://qiita-image-store.s3.amazonaws.com/0/13955/68ac3c74-9fbd-7ce1-8b3c-5d200c25b6b4.png)\n\n\n```python:python\n# \u4e71\u6570\u30c7\u30fc\u30bf\nimport networkx as nx, matplotlib.pyplot as plt\nfrom ortoolpy import networkx_draw\ng = nx.random_graphs.fast_gnp_random_graph(10, 0.3, 1)\nd = nx.max_weight_matching(g)\npos = networkx_draw(g, nx.spring_layout(g))\nnx.draw_networkx_edges(g, pos, width=3, edgelist=[(i, j) for i, j in d.items()])\nplt.show()\n```\n![mwm.png](https://qiita-image-store.s3.amazonaws.com/0/13955/3669538d-0084-6407-112d-28d3807aaea4.png)\n\n##\u30c7\u30fc\u30bf\n- [data/node0.csv](https://dl.dropboxusercontent.com/u/35689878/data/node0.csv)\n- [data/edge0.csv](https://dl.dropboxusercontent.com/u/35689878/data/edge0.csv)\n", "tags": ["\u6700\u9069\u5316", "Python"]}