{"tags": ["Spark", "\u6a5f\u68b0\u5b66\u7fd2", "Python", "MLlib", "MachineLearning"], "context": "Spark\u3092\u89e6\u308b\u6a5f\u4f1a\u304c\u5897\u3048\u3066\u304d\u3066\u308b\u306e\u3067\u3001\u77e5\u8b58\u306e\u68da\u5378\u3057\u3092\u517c\u306d\u3066MLlib\u4f7f\u3063\u3066\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002SparkSamit2014\u306a\u3069MLlib\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u7684\u306b\u8272\u3005\u4f7f\u308f\u308c\u3066\u3044\u308bSpark\u306eMovie Recommendation\u3067\u3059\u304c\u3001edX\u306eIntroduction to Big Data with Apache Spar\u304c\u5185\u5bb9\u7684\u306b\u3082\u826f\u3055\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u984c\u6750\u306b\u3057\u306a\u304c\u3089\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u672c\u8b1b\u5ea7\u306fSpark 1.3.1\u3067\u306e\u5b9f\u88c5\u3067\u3059\u304c\u5c11\u3057\u53e4\u3059\u304e\u308b\u306e\u3067\u30011.6.1\u3067\u4f7f\u3048\u308b\u6a5f\u80fd\u306f\u4f7f\u3046\u5f62\u3067\u30b3\u30fc\u30c9\u5909\u3048\u3066\u307e\u3059\u3002\n\n\u304a\u304a\u307e\u304b\u306a\u624b\u9806\n\u2460\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n \u5143\u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u3001\u8a55\u4fa1\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u305d\u308c\u305e\u308c\u5206\u5272\n\u2461\u8a55\u4fa1\u6570500\u4ee5\u4e0a\u306e\u6620\u753b\u306e\u4e2d\u304b\u3089\u5e73\u5747\u8a55\u4fa1\u70b9\u304c\u9ad8\u3044\u3082\u306e\u3092\u8868\u793a\n\u2462\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u88c5\n\u2463\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u81ea\u5206\u3092userID\"0\"\u3068\u3057\u3066\u52a0\u3048\u3001\u597d\u304d\u306a\u6620\u753b\u3092\u8a55\u4fa1\n\u2464\u81ea\u5206\u306e\u8a55\u4fa1\u3092\u3082\u3068\u306b\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u6620\u753b\u3092\u63a8\u85a6\u3055\u305b\u308b\n\n\u30b3\u30fc\u30c9\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u5206\u5272\u3001\u773a\u3081\u3066\u307f\u307e\u3059\u3002\n\u4f7f\u3046\u30c7\u30fc\u30bf\u306fUserID::MovieID::Rating::Timestamp\u3067\u69cb\u6210\u3055\u308c\u308bmovie\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3001MovieID::Title::Genres\u3067\u69cb\u6210\u3055\u308c\u308bRating\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\nnumPartitions = 2\n\nratingFileName = \"ratings.txt\"\nrawRatings = sc.textFile(ratingFileName, numPartitions)\n\nmoviesFileName = \"movies.txt\"\nrawMovies = sc.textFile(moviesFileName, numPartitions)\n\ndef get_ratings_tuple(entry):\n    items = entry.split('::')\n    return int(items[0]), int(items[1]), float(items[2])\n\ndef get_movie_tuple(entry):\n    items = entry.split('::')\n    return int(items[0]), items[1]\n\nratingsRDD = rawRatings.map(get_ratings_tuple).cache()\nmoviesRDD = rawMovies.map(get_movie_tuple).cache()\n\nratingsCount = ratingsRDD.count()\nmoviesCount = moviesRDD.count()\n\nprint 'There are %s ratings and %s movies in the datasets' % (ratingsCount, moviesCount)\nprint 'Ratings: %s' % ratingsRDD.take(3)\nprint 'Movies: %s' % moviesRDD.take(3)\n\nThere are 1000209 ratings and 3883 movies in the datasets\nRatings: [(1, 1193, 5.0), (1, 661, 3.0), (1, 914, 3.0)]\nMovies: [(1, u'Toy Story (1995)'), (2, u'Jumanji (1995)'), (3, u'Grumpier Old Men (1995)')]\n\n\u3069\u306e\u3088\u3046\u306a\u6620\u753b\u304c\u4eba\u6c17\u304b\u8abf\u3079\u308b\u305f\u3081500\u4ee5\u4e0a\u306eReview\u304c\u3042\u308b\u4e2d\u3067\u3001\u4eba\u6c17\u306e\u9ad8\u3044\u3082\u306e\u309220\u500b\u9078\u3073\u51fa\u3057\u307e\u3059\u3002\nMovieID\u3068\u8a55\u4fa1\u306e\u6570\u3001\u5e73\u5747\u8a55\u4fa1\u70b9\u3092\u542b\u3080RDD\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3068movieRDD\u3092join\u3055\u305b\u308b\u3053\u3068\u3067\u3001\uff08\u5e73\u5747\u8a55\u4fa1\u70b9\u3001\u6620\u753b\u306e\u30bf\u30a4\u30c8\u30eb\u3001\u8a55\u4fa1\u6570\uff09\u3092\u6301\u3064\u30bf\u30d7\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001\u8a55\u4fa1\u6570\u304c500\u500b\u4ee5\u4e0a\u3042\u308b\u30bf\u30a4\u30c8\u30eb\u306e\u307f\u9078\u3073\u51fa\u3057\u3001\u5e73\u5747\u8a55\u4fa1\u70b9\u3067\u30bd\u30fc\u30c8\u3057\u305f\u3082\u306e\u3092\u6c42\u3081\u307e\u3059\u3002\n\u8a55\u4fa1\u70b9\u3068\u6620\u753b\u306e\u30bf\u30a4\u30c8\u30eb\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u3067\u306e\u30bd\u30fc\u30c8\u306e\u305f\u3081\u306bsortFunction()\u3068\u3044\u3046\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307e\u3059\u3002\ndef getCountsAndAverages(IDandRatingsTuple):\n    aggr_result = (IDandRatingsTuple[0], (len(IDandRatingsTuple[1]), float(sum(IDandRatingsTuple[1])) / len(IDandRatingsTuple[1])))\n    return aggr_result\n\n\nmovieNameWithAvgRatingsRDD = (ratingsRDD\n                          .map(lambda x:(x[1], x[2]))\n                          .groupByKey()\n                          .map(getCountsAndAverages)\n                          .join(moviesRDD)\n                          .map(lambda x:(x[1][0][1], x[1][1], x[0])))\n\n\nprint 'movieNameWithAvgRatingsRDD: %s\\n' % movieNameWithAvgRatingsRDD.take(3)\n\n\n\ndef sortFunction(tuple):\n    key = unicode('%.3f' % tuple[0])\n    value = tuple[1]\n    return (key + ' ' + value)\n\nmovieLimitedAndSortedByRatingRDD = (movieNameWithAvgRatingsRDD\n                                    .filter(lambda x: (x[2] > 500))\n                                    .sortBy(sortFunction, False))\n\nprint 'Movies with highest ratings:'\nprint '(average rating, movie name, number of reviews)'\nfor ratingsTuple in movieLimitedAndSortedByRatingRDD.take(10):\n    print ratingsTuple\n\n\nmovieNameWithAvgRatingsRDD: [(3.49618320610687, u'Great Mouse Detective, The (1986)', 2048), (3.7871690427698574, u'Moonstruck (1987)', 3072), (2.7294117647058824, u'Waiting to Exhale (1995)', 4)]\n\n\nMovies with highest ratings:\n(average rating, movie name, number of reviews)\n(5.0, u'Ulysses (Ulisse) (1954)', 3172)\n(5.0, u'Song of Freedom (1936)', 3382)\n(5.0, u'Smashing Time (1967)', 3233)\n(5.0, u'Schlafes Bruder (Brother of Sleep) (1995)', 989)\n(5.0, u'One Little Indian (1973)', 3607)\n(5.0, u'Lured (1947)', 3656)\n(5.0, u'Gate of Heavenly Peace, The (1995)', 787)\n(5.0, u'Follow the Bitch (1998)', 1830)\n(5.0, u'Bittersweet Motel (2000)', 3881)\n(5.0, u'Baby, The (1973)', 3280)\n\n\u6b21\u306b\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u305f\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\nMLlib\u306b\u306fALS\u3092\u4f7f\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u306e\u3067\u305d\u306e\u307e\u3093\u307e\u6d3b\u7528\u3057\u307e\u3059\u3002\n\u3072\u3068\u307e\u305a\u30e2\u30c7\u30eb\u69cb\u7bc9\u306e\u305f\u3081\u306b\u8a13\u7df4\u3001\u8a55\u4fa1\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5206\u5272\u3057\u307e\u3059\u3002\ntrainingRDD, validationRDD, testRDD = ratingsRDD.randomSplit([6, 2, 2], seed=0)\n\nprint 'Training: %s, validation: %s, test: %s\\n' % (trainingRDD.count(),\n                                                    validationRDD.count(),\n                                                    testRDD.count())\nprint trainingRDD.take(3)\nprint validationRDD.take(3)\nprint testRDD.take(3)\n\nvalidationForPredictRDD = validationRDD.map(lambda x: (x[0], x[1]))\nprint validationForPredictRDD.take(3)\n\nactualReformattedRDD = validationRDD.map(lambda x: ((x[0], x[1]), x[2]))\nprint actualReformattedRDD.take(3)\n\n\nTraining: 600364, validation: 199815, test: 200030\n\n[(1, 661, 3.0), (1, 914, 3.0), (1, 1197, 3.0)]\n[(1, 3408, 4.0), (1, 2355, 5.0), (1, 938, 4.0)]\n[(1, 1193, 5.0), (1, 1287, 5.0), (1, 2804, 5.0)]\n[(1, 3408), (1, 2355), (1, 938)]\n[((1, 3408), 4.0), ((1, 2355), 5.0), ((1, 938), 4.0)]\n\n\u30e2\u30c7\u30eb\u69cb\u7bc9\u3067\u3059\u304c\u3001\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3088\u3063\u3066\u3088\u308a\u826f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u63a2\u3057\u307e\u3059\u3002\n\u307e\u305f\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u306b\u306fMLlib\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u6307\u6a19\u306e\u4e2d\u3067\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\u306e\u5e73\u65b9\u6839(RMSE)\u3092\u4f7f\u3044\u307e\u3059\u3002\nfrom pyspark.mllib.recommendation import ALS\nfrom pyspark.mllib.evaluation import RegressionMetrics\n\nseed = 5L\niterations = [5,7,10]\nregularizationParameter = 0.1\nranks = [4, 8, 12]\nRMSEs = [0, 0, 0, 0, 0, 0, 0, 0, 0]\nerr = 0\ntolerance = 0.03\n\nminRMSE = float('inf')\nbestRank = -1\nbestIteration = -1\nfor rank in ranks:\n    for iteration in iterations:\n        model = ALS.train(trainingRDD,\n                          rank,\n                          seed=seed,\n                          iteration,\n                          lambda_=regularizationParameter)\n        predictedRatingsRDD = model.predictAll(validationForPredictRDD)\n        predictedReformattedRDD = predictedRatingsRDD.map(lambda x: ((x[0], x[1]), x[2]))\n\n        predictionAndObservations = (predictedReformattedRDD\n                                     .join(actualReformattedRDD)\n                                     .map(lambda x: x[1]))\n\n        metrics = RegressionMetrics(predictionAndObservations)\n        RMSE = metrics.rootMeanSquaredError\n        RMSEs[err] = RMSE\n        err += 1\n\n        print 'For rank %s and itereation %s, the RMSE is %s' % (rank, iteration, RMSE)\n        if RMSE < minRMSE:\n            minRMSE = RMSE\n            bestIteretioin = iteretaion\n            bestRank = rank\n\nprint 'The best model was trained with rank %s and iteratin %s'  % (bestRank, bestIteretion)\n\n\nFor rank 4 and itereation 5, the RMSE is 0.903719946201\nFor rank 4 and itereation 7, the RMSE is 0.893408395534\nFor rank 4 and itereation 10, the RMSE is 0.886260195446\nFor rank 8 and itereation 5, the RMSE is 0.89365207233\nFor rank 8 and itereation 7, the RMSE is 0.883901283207\nFor rank 8 and itereation 10, the RMSE is 0.876701840863\nFor rank 12 and itereation 5, the RMSE is 0.887127524585\nFor rank 12 and itereation 7, the RMSE is 0.87863327159\nFor rank 12 and itereation 10, the RMSE is 0.872532683651\nThe best model was trained with rank 12 and iteratin 10\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002RMSE\u306b\u554f\u984c\u306a\u3044\u306e\u3067\u904e\u5b66\u7fd2\u306f\u8d77\u3053\u3057\u3066\u306a\u3055\u305d\u3046\u3067\u3059\u3002\nbestModel = ALS.train(trainingRDD,\n                      bestRank,\n                      seed=seed,\n                      iterations=bestIteretion,\n                      lambda_=regularizationParameter)\n\ntestForPredictingRDD = testRDD.map(lambda x: (x[0], x[1]))\ntestReformattedRDD = testRDD.map(lambda x: ((x[0], x[1]), x[2]))\n\npredictedTestRDD = bestModel.predictAll(testForPredictingRDD)\npredictedTestReformattedRDD = predictedTestRDD.map(lambda x: ((x[0], x[1]), x[2]))\n\npredictionAndObservationsTest = (predictedTestReformattedRDD\n                             .join(testReformattedRDD)\n                             .map(lambda x: x[1]))\n\nmetrics = RegressionMetrics(predictionAndObservationsTest)\ntestRMSE = metrics.rootMeanSquaredError\n\nprint 'The model had a RMSE on the test set of %s' % testRMSE\n\n\nThe model had a RMSE on the test set of 0.87447554868\n\n\u6700\u5f8c\u306b\u81ea\u5206\u306e\u597d\u304d\u306a\u6620\u753b\u3092\u8a55\u4fa1\u3057\u3001userID\"0\"\u3068\u3057\u3066\u30c7\u30fc\u30bf\u306b\u8ffd\u52a0\u3002\u305d\u306e\u8a55\u4fa1\u306b\u57fa\u3065\u3044\u3066\u6620\u753b\u3092\u63a8\u85a6\u3057\u3066\u3082\u3089\u3044\u307e\u3059\u3002\nmovieRDD\u304b\u3089\u81ea\u5206\u306e\u597d\u304d\u306a\u6620\u753b\u3092\u53d6\u308a\u51fa\u3057\u3066\u8a55\u4fa1\u3057\u3066\u52a0\u3048\u3001\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001userID\"0\"\u5411\u3051\u306e\u4e88\u6e2c\u3092\u5f97\u3066\u3001\u8a55\u4fa1\u70b9\u306e\u9ad8\u3044\u3082\u306e\u304b\u3089\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\nmyUserID = 0\nmyRatedMovies = [(myUserID, 1, 5), #Toy Story\n                 (myUserID, 648, 3), # Mission Impossible\n                 (myUserID, 1580, 4), # Men In Black\n                 (myUserID, 1097, 3), # ET\n                 (myUserID, 3247, 5)] #Sister Act\n\nmyRatingsRDD = sc.parallelize(myRatedMovies)\ntrainingWithMyRatingsRDD = trainingRDD.union(myRatingsRDD)\n\nmyRatingsModel = ALS.train(trainingWithMyRatingsRDD,\n                           bestRank, \n                           seed=seed,\n                           iterations=bestIteretion,\n                           lambda_=regularizationParameter)\n\n\nmyUnratedMoviesRDD = (moviesRDD\n                      .filter(lambda x: x[0] not in [x[1] for x in myRatedMovies])\n                      .map(lambda x: (myUserID, x[0])))\n\npredictedRatingsRDD = myRatingsModel.predictAll(myUnratedMoviesRDD)\npredictedRDD = predictedRatingsRDD.map(lambda x: (x[1], x[2]))\n\nmovieCountsRDD = (ratingsRDD\n                  .map(lambda x:(x[1], x[2]))\n                  .groupByKey()\n                  .map(getCountsAndAverages)\n                  .map(lambda x: (x[0], x[1][0])))\n\n\n#Marge PredictedRDD and CountsRDD\npredictedWithCountsRDD  = (predictedRDD\n                           .join(movieCountsRDD))\n\n\nratingsWithNamesRDD = (predictedWithCountsRDD\n                       .filter(lambda x: x[1][1] > 75)\n                       .join(moviesRDD)\n                       .map(lambda x: (x[1][0][0], x[1][1], x[1][0][1])))\n\npredictedHighestRatedMovies = ratingsWithNamesRDD.takeOrdered(10, key=lambda x: -x[0])\nprint ('My highest rated movies as predicted (for movies with more than 75 reviews):\\n%s' %\n        '\\n'.join(map(str, predictedHighestRatedMovies)))\n\nMy highest rated movies as predicted (for movies with more than 75 reviews):\n(4.74482593848827, u'Sound of Music, The (1965)', 882)\n(4.580669496447569, u'Mary Poppins (1964)', 1011)\n(4.486424714752521, u'Beauty and the Beast (1991)', 1060)\n(4.478042748281928, u'Mulan (1998)', 490)\n(4.477453571213953, u'Toy Story 2 (1999)', 1585)\n(4.439390718632932, u'Fantasia 2000 (1999)', 453)\n(4.405894101045507, u'FairyTale: A True Story (1997)', 87)\n(4.4030583744108425, u\"Singin' in the Rain (1952)\", 751)\n(4.390333274084924, u'Top Hat (1935)', 251)\n(4.347757079374581, u'Gone with the Wind (1939)', 1156)\n\n\u30d9\u30bf\u306a\u6620\u753b\u3092\u8a55\u4fa1\u3057\u3066\u308b\u306e\u3067\u3001\u30d9\u30bf\u306a\u6620\u753b\u304c\u63a8\u85a6\u3055\u308c\u3066\u307e\u3059\u306d\u7b11\nSpark\u3092\u89e6\u308b\u6a5f\u4f1a\u304c\u5897\u3048\u3066\u304d\u3066\u308b\u306e\u3067\u3001\u77e5\u8b58\u306e\u68da\u5378\u3057\u3092\u517c\u306d\u3066MLlib\u4f7f\u3063\u3066\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002[SparkSamit2014](https://databricks-training.s3.amazonaws.com/movie-recommendation-with-mllib.html)\u306a\u3069MLlib\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u7684\u306b\u8272\u3005\u4f7f\u308f\u308c\u3066\u3044\u308bSpark\u306eMovie Recommendation\u3067\u3059\u304c\u3001[edX\u306eIntroduction to Big Data with Apache Spar](https://courses.edx.org/courses/BerkeleyX/CS100.1x/1T2015//)\u304c\u5185\u5bb9\u7684\u306b\u3082\u826f\u3055\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u984c\u6750\u306b\u3057\u306a\u304c\u3089\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u672c\u8b1b\u5ea7\u306fSpark 1.3.1\u3067\u306e\u5b9f\u88c5\u3067\u3059\u304c\u5c11\u3057\u53e4\u3059\u304e\u308b\u306e\u3067\u30011.6.1\u3067\u4f7f\u3048\u308b\u6a5f\u80fd\u306f\u4f7f\u3046\u5f62\u3067\u30b3\u30fc\u30c9\u5909\u3048\u3066\u307e\u3059\u3002\n\n####\u304a\u304a\u307e\u304b\u306a\u624b\u9806\n\u2460\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n \u5143\u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u3001\u8a55\u4fa1\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u305d\u308c\u305e\u308c\u5206\u5272\n\u2461\u8a55\u4fa1\u6570500\u4ee5\u4e0a\u306e\u6620\u753b\u306e\u4e2d\u304b\u3089\u5e73\u5747\u8a55\u4fa1\u70b9\u304c\u9ad8\u3044\u3082\u306e\u3092\u8868\u793a\n\u2462\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u88c5\n\u2463\u8a13\u7df4\u30c7\u30fc\u30bf\u306b\u81ea\u5206\u3092userID\"0\"\u3068\u3057\u3066\u52a0\u3048\u3001\u597d\u304d\u306a\u6620\u753b\u3092\u8a55\u4fa1\n\u2464\u81ea\u5206\u306e\u8a55\u4fa1\u3092\u3082\u3068\u306b\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u6620\u753b\u3092\u63a8\u85a6\u3055\u305b\u308b\n\n####\u30b3\u30fc\u30c9\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u5206\u5272\u3001\u773a\u3081\u3066\u307f\u307e\u3059\u3002\n\u4f7f\u3046\u30c7\u30fc\u30bf\u306fUserID::MovieID::Rating::Timestamp\u3067\u69cb\u6210\u3055\u308c\u308bmovie\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3001MovieID::Title::Genres\u3067\u69cb\u6210\u3055\u308c\u308bRating\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\n\n```python\nnumPartitions = 2\n\nratingFileName = \"ratings.txt\"\nrawRatings = sc.textFile(ratingFileName, numPartitions)\n\nmoviesFileName = \"movies.txt\"\nrawMovies = sc.textFile(moviesFileName, numPartitions)\n\ndef get_ratings_tuple(entry):\n    items = entry.split('::')\n    return int(items[0]), int(items[1]), float(items[2])\n\ndef get_movie_tuple(entry):\n    items = entry.split('::')\n    return int(items[0]), items[1]\n\nratingsRDD = rawRatings.map(get_ratings_tuple).cache()\nmoviesRDD = rawMovies.map(get_movie_tuple).cache()\n\nratingsCount = ratingsRDD.count()\nmoviesCount = moviesRDD.count()\n\nprint 'There are %s ratings and %s movies in the datasets' % (ratingsCount, moviesCount)\nprint 'Ratings: %s' % ratingsRDD.take(3)\nprint 'Movies: %s' % moviesRDD.take(3)\n\nThere are 1000209 ratings and 3883 movies in the datasets\nRatings: [(1, 1193, 5.0), (1, 661, 3.0), (1, 914, 3.0)]\nMovies: [(1, u'Toy Story (1995)'), (2, u'Jumanji (1995)'), (3, u'Grumpier Old Men (1995)')]\n```\n\n\u3069\u306e\u3088\u3046\u306a\u6620\u753b\u304c\u4eba\u6c17\u304b\u8abf\u3079\u308b\u305f\u3081500\u4ee5\u4e0a\u306eReview\u304c\u3042\u308b\u4e2d\u3067\u3001\u4eba\u6c17\u306e\u9ad8\u3044\u3082\u306e\u309220\u500b\u9078\u3073\u51fa\u3057\u307e\u3059\u3002\nMovieID\u3068\u8a55\u4fa1\u306e\u6570\u3001\u5e73\u5747\u8a55\u4fa1\u70b9\u3092\u542b\u3080RDD\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3068movieRDD\u3092join\u3055\u305b\u308b\u3053\u3068\u3067\u3001\uff08\u5e73\u5747\u8a55\u4fa1\u70b9\u3001\u6620\u753b\u306e\u30bf\u30a4\u30c8\u30eb\u3001\u8a55\u4fa1\u6570\uff09\u3092\u6301\u3064\u30bf\u30d7\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u3001\u8a55\u4fa1\u6570\u304c500\u500b\u4ee5\u4e0a\u3042\u308b\u30bf\u30a4\u30c8\u30eb\u306e\u307f\u9078\u3073\u51fa\u3057\u3001\u5e73\u5747\u8a55\u4fa1\u70b9\u3067\u30bd\u30fc\u30c8\u3057\u305f\u3082\u306e\u3092\u6c42\u3081\u307e\u3059\u3002\n\u8a55\u4fa1\u70b9\u3068\u6620\u753b\u306e\u30bf\u30a4\u30c8\u30eb\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u3067\u306e\u30bd\u30fc\u30c8\u306e\u305f\u3081\u306bsortFunction()\u3068\u3044\u3046\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307e\u3059\u3002\n\n```python\ndef getCountsAndAverages(IDandRatingsTuple):\n    aggr_result = (IDandRatingsTuple[0], (len(IDandRatingsTuple[1]), float(sum(IDandRatingsTuple[1])) / len(IDandRatingsTuple[1])))\n    return aggr_result\n\n\nmovieNameWithAvgRatingsRDD = (ratingsRDD\n                          .map(lambda x:(x[1], x[2]))\n                          .groupByKey()\n                          .map(getCountsAndAverages)\n                          .join(moviesRDD)\n                          .map(lambda x:(x[1][0][1], x[1][1], x[0])))\n\n\nprint 'movieNameWithAvgRatingsRDD: %s\\n' % movieNameWithAvgRatingsRDD.take(3)\n\n\n\ndef sortFunction(tuple):\n    key = unicode('%.3f' % tuple[0])\n    value = tuple[1]\n    return (key + ' ' + value)\n\nmovieLimitedAndSortedByRatingRDD = (movieNameWithAvgRatingsRDD\n                                    .filter(lambda x: (x[2] > 500))\n                                    .sortBy(sortFunction, False))\n\nprint 'Movies with highest ratings:'\nprint '(average rating, movie name, number of reviews)'\nfor ratingsTuple in movieLimitedAndSortedByRatingRDD.take(10):\n    print ratingsTuple\n\n\nmovieNameWithAvgRatingsRDD: [(3.49618320610687, u'Great Mouse Detective, The (1986)', 2048), (3.7871690427698574, u'Moonstruck (1987)', 3072), (2.7294117647058824, u'Waiting to Exhale (1995)', 4)]\n\n\nMovies with highest ratings:\n(average rating, movie name, number of reviews)\n(5.0, u'Ulysses (Ulisse) (1954)', 3172)\n(5.0, u'Song of Freedom (1936)', 3382)\n(5.0, u'Smashing Time (1967)', 3233)\n(5.0, u'Schlafes Bruder (Brother of Sleep) (1995)', 989)\n(5.0, u'One Little Indian (1973)', 3607)\n(5.0, u'Lured (1947)', 3656)\n(5.0, u'Gate of Heavenly Peace, The (1995)', 787)\n(5.0, u'Follow the Bitch (1998)', 1830)\n(5.0, u'Bittersweet Motel (2000)', 3881)\n(5.0, u'Baby, The (1973)', 3280)\n```\n\n\u6b21\u306b\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u4f7f\u7528\u3057\u305f\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\nMLlib\u306b\u306f[ALS](http://spark.apache.org/docs/latest/mllib-collaborative-filtering.html)\u3092\u4f7f\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\u306e\u3067\u305d\u306e\u307e\u3093\u307e\u6d3b\u7528\u3057\u307e\u3059\u3002\n\n\u3072\u3068\u307e\u305a\u30e2\u30c7\u30eb\u69cb\u7bc9\u306e\u305f\u3081\u306b\u8a13\u7df4\u3001\u8a55\u4fa1\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u5206\u5272\u3057\u307e\u3059\u3002\n\n```python\ntrainingRDD, validationRDD, testRDD = ratingsRDD.randomSplit([6, 2, 2], seed=0)\n\nprint 'Training: %s, validation: %s, test: %s\\n' % (trainingRDD.count(),\n                                                    validationRDD.count(),\n                                                    testRDD.count())\nprint trainingRDD.take(3)\nprint validationRDD.take(3)\nprint testRDD.take(3)\n\nvalidationForPredictRDD = validationRDD.map(lambda x: (x[0], x[1]))\nprint validationForPredictRDD.take(3)\n\nactualReformattedRDD = validationRDD.map(lambda x: ((x[0], x[1]), x[2]))\nprint actualReformattedRDD.take(3)\n\n\nTraining: 600364, validation: 199815, test: 200030\n\n[(1, 661, 3.0), (1, 914, 3.0), (1, 1197, 3.0)]\n[(1, 3408, 4.0), (1, 2355, 5.0), (1, 938, 4.0)]\n[(1, 1193, 5.0), (1, 1287, 5.0), (1, 2804, 5.0)]\n[(1, 3408), (1, 2355), (1, 938)]\n[((1, 3408), 4.0), ((1, 2355), 5.0), ((1, 938), 4.0)]\n```\n\n\u30e2\u30c7\u30eb\u69cb\u7bc9\u3067\u3059\u304c\u3001\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306b\u3088\u3063\u3066\u3088\u308a\u826f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u63a2\u3057\u307e\u3059\u3002\n\u307e\u305f\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u306b\u306f[MLlib\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u6307\u6a19\u306e\u4e2d\u3067\u5e73\u5747\u4e8c\u4e57\u8aa4\u5dee\u306e\u5e73\u65b9\u6839(RMSE)](https://spark.apache.org/docs/latest/api/python/pyspark.mllib.html#pyspark.mllib.evaluation.RegressionMetrics)\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\n```python\nfrom pyspark.mllib.recommendation import ALS\nfrom pyspark.mllib.evaluation import RegressionMetrics\n\nseed = 5L\niterations = [5,7,10]\nregularizationParameter = 0.1\nranks = [4, 8, 12]\nRMSEs = [0, 0, 0, 0, 0, 0, 0, 0, 0]\nerr = 0\ntolerance = 0.03\n\nminRMSE = float('inf')\nbestRank = -1\nbestIteration = -1\nfor rank in ranks:\n    for iteration in iterations:\n        model = ALS.train(trainingRDD,\n                          rank,\n                          seed=seed,\n                          iteration,\n                          lambda_=regularizationParameter)\n        predictedRatingsRDD = model.predictAll(validationForPredictRDD)\n        predictedReformattedRDD = predictedRatingsRDD.map(lambda x: ((x[0], x[1]), x[2]))\n    \n        predictionAndObservations = (predictedReformattedRDD\n                                     .join(actualReformattedRDD)\n                                     .map(lambda x: x[1]))\n    \n        metrics = RegressionMetrics(predictionAndObservations)\n        RMSE = metrics.rootMeanSquaredError\n        RMSEs[err] = RMSE\n        err += 1\n        \n        print 'For rank %s and itereation %s, the RMSE is %s' % (rank, iteration, RMSE)\n        if RMSE < minRMSE:\n            minRMSE = RMSE\n            bestIteretioin = iteretaion\n            bestRank = rank\n\nprint 'The best model was trained with rank %s and iteratin %s'  % (bestRank, bestIteretion)\n            \n\nFor rank 4 and itereation 5, the RMSE is 0.903719946201\nFor rank 4 and itereation 7, the RMSE is 0.893408395534\nFor rank 4 and itereation 10, the RMSE is 0.886260195446\nFor rank 8 and itereation 5, the RMSE is 0.89365207233\nFor rank 8 and itereation 7, the RMSE is 0.883901283207\nFor rank 8 and itereation 10, the RMSE is 0.876701840863\nFor rank 12 and itereation 5, the RMSE is 0.887127524585\nFor rank 12 and itereation 7, the RMSE is 0.87863327159\nFor rank 12 and itereation 10, the RMSE is 0.872532683651\nThe best model was trained with rank 12 and iteratin 10\n```\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002RMSE\u306b\u554f\u984c\u306a\u3044\u306e\u3067\u904e\u5b66\u7fd2\u306f\u8d77\u3053\u3057\u3066\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n```python\nbestModel = ALS.train(trainingRDD,\n                      bestRank,\n                      seed=seed,\n                      iterations=bestIteretion,\n                      lambda_=regularizationParameter)\n\ntestForPredictingRDD = testRDD.map(lambda x: (x[0], x[1]))\ntestReformattedRDD = testRDD.map(lambda x: ((x[0], x[1]), x[2]))\n\npredictedTestRDD = bestModel.predictAll(testForPredictingRDD)\npredictedTestReformattedRDD = predictedTestRDD.map(lambda x: ((x[0], x[1]), x[2]))\n\npredictionAndObservationsTest = (predictedTestReformattedRDD\n                             .join(testReformattedRDD)\n                             .map(lambda x: x[1]))\n\nmetrics = RegressionMetrics(predictionAndObservationsTest)\ntestRMSE = metrics.rootMeanSquaredError\n\nprint 'The model had a RMSE on the test set of %s' % testRMSE\n\n\nThe model had a RMSE on the test set of 0.87447554868\n```\n\n\u6700\u5f8c\u306b\u81ea\u5206\u306e\u597d\u304d\u306a\u6620\u753b\u3092\u8a55\u4fa1\u3057\u3001userID\"0\"\u3068\u3057\u3066\u30c7\u30fc\u30bf\u306b\u8ffd\u52a0\u3002\u305d\u306e\u8a55\u4fa1\u306b\u57fa\u3065\u3044\u3066\u6620\u753b\u3092\u63a8\u85a6\u3057\u3066\u3082\u3089\u3044\u307e\u3059\u3002\nmovieRDD\u304b\u3089\u81ea\u5206\u306e\u597d\u304d\u306a\u6620\u753b\u3092\u53d6\u308a\u51fa\u3057\u3066\u8a55\u4fa1\u3057\u3066\u52a0\u3048\u3001\u30e2\u30c7\u30eb\u306e\u8a13\u7df4\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001userID\"0\"\u5411\u3051\u306e\u4e88\u6e2c\u3092\u5f97\u3066\u3001\u8a55\u4fa1\u70b9\u306e\u9ad8\u3044\u3082\u306e\u304b\u3089\u8868\u793a\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```python\nmyUserID = 0\nmyRatedMovies = [(myUserID, 1, 5), #Toy Story\n                 (myUserID, 648, 3), # Mission Impossible\n                 (myUserID, 1580, 4), # Men In Black\n                 (myUserID, 1097, 3), # ET\n                 (myUserID, 3247, 5)] #Sister Act\n\nmyRatingsRDD = sc.parallelize(myRatedMovies)\ntrainingWithMyRatingsRDD = trainingRDD.union(myRatingsRDD)\n\nmyRatingsModel = ALS.train(trainingWithMyRatingsRDD,\n                           bestRank, \n                           seed=seed,\n                           iterations=bestIteretion,\n                           lambda_=regularizationParameter)\n\n\nmyUnratedMoviesRDD = (moviesRDD\n                      .filter(lambda x: x[0] not in [x[1] for x in myRatedMovies])\n                      .map(lambda x: (myUserID, x[0])))\n\npredictedRatingsRDD = myRatingsModel.predictAll(myUnratedMoviesRDD)\npredictedRDD = predictedRatingsRDD.map(lambda x: (x[1], x[2]))\n\nmovieCountsRDD = (ratingsRDD\n                  .map(lambda x:(x[1], x[2]))\n                  .groupByKey()\n                  .map(getCountsAndAverages)\n                  .map(lambda x: (x[0], x[1][0])))\n\n\n#Marge PredictedRDD and CountsRDD\npredictedWithCountsRDD  = (predictedRDD\n                           .join(movieCountsRDD))\n\n\nratingsWithNamesRDD = (predictedWithCountsRDD\n                       .filter(lambda x: x[1][1] > 75)\n                       .join(moviesRDD)\n                       .map(lambda x: (x[1][0][0], x[1][1], x[1][0][1])))\n\npredictedHighestRatedMovies = ratingsWithNamesRDD.takeOrdered(10, key=lambda x: -x[0])\nprint ('My highest rated movies as predicted (for movies with more than 75 reviews):\\n%s' %\n        '\\n'.join(map(str, predictedHighestRatedMovies)))\n\nMy highest rated movies as predicted (for movies with more than 75 reviews):\n(4.74482593848827, u'Sound of Music, The (1965)', 882)\n(4.580669496447569, u'Mary Poppins (1964)', 1011)\n(4.486424714752521, u'Beauty and the Beast (1991)', 1060)\n(4.478042748281928, u'Mulan (1998)', 490)\n(4.477453571213953, u'Toy Story 2 (1999)', 1585)\n(4.439390718632932, u'Fantasia 2000 (1999)', 453)\n(4.405894101045507, u'FairyTale: A True Story (1997)', 87)\n(4.4030583744108425, u\"Singin' in the Rain (1952)\", 751)\n(4.390333274084924, u'Top Hat (1935)', 251)\n(4.347757079374581, u'Gone with the Wind (1939)', 1156)\n```\n\n\u30d9\u30bf\u306a\u6620\u753b\u3092\u8a55\u4fa1\u3057\u3066\u308b\u306e\u3067\u3001\u30d9\u30bf\u306a\u6620\u753b\u304c\u63a8\u85a6\u3055\u308c\u3066\u307e\u3059\u306d\u7b11\n"}