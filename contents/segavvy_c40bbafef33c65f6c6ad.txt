{"context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 :: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\u3002\n\n\u7b2c5\u7ae0: \u4fc2\u308a\u53d7\u3051\u89e3\u6790\n\n\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092CaboCha\u3092\u4f7f\u3063\u3066\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.cabocha\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n\n47. \u6a5f\u80fd\u52d5\u8a5e\u69cb\u6587\u306e\u30de\u30a4\u30cb\u30f3\u30b0\n\n\u52d5\u8a5e\u306e\u30f2\u683c\u306b\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\u304c\u5165\u3063\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u306b\u7740\u76ee\u3057\u305f\u3044\uff0e46\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3092\u6e80\u305f\u3059\u3088\u3046\u306b\u6539\u5909\u305b\u3088\uff0e\n\n\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092\uff08\u52a9\u8a5e\uff09\u300d\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u7bc0\u304c\u52d5\u8a5e\u306b\u4fc2\u308b\u5834\u5408\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3059\u308b\n\u8ff0\u8a9e\u306f\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092+\u52d5\u8a5e\u306e\u57fa\u672c\u5f62\u300d\u3068\u3057\uff0c\u6587\u7bc0\u4e2d\u306b\u8907\u6570\u306e\u52d5\u8a5e\u304c\u3042\u308b\u3068\u304d\u306f\uff0c\u6700\u5de6\u306e\u52d5\u8a5e\u3092\u7528\u3044\u308b\n\u8ff0\u8a9e\u306b\u4fc2\u308b\u52a9\u8a5e\uff08\u6587\u7bc0\uff09\u304c\u8907\u6570\u3042\u308b\u3068\u304d\u306f\uff0c\u3059\u3079\u3066\u306e\u52a9\u8a5e\u3092\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8f9e\u66f8\u9806\u306b\u4e26\u3079\u308b\n\u8ff0\u8a9e\u306b\u4fc2\u308b\u6587\u7bc0\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\uff0c\u3059\u3079\u3066\u306e\u9805\u3092\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u4e26\u3079\u308b\uff08\u52a9\u8a5e\u306e\u4e26\u3073\u9806\u3068\u63c3\u3048\u3088\uff09\n\n\u4f8b\u3048\u3070\u300c\u5225\u6bb5\u304f\u308b\u306b\u3082\u53ca\u3070\u3093\u3055\u3068\u3001\u4e3b\u4eba\u306f\u624b\u7d19\u306b\u8fd4\u4e8b\u3092\u3059\u308b\u3002\u300d\u3068\u3044\u3046\u6587\u304b\u3089\uff0c\u4ee5\u4e0b\u306e\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\n\u8fd4\u4e8b\u3092\u3059\u308b      \u3068 \u306b \u306f        \u53ca\u3070\u3093\u3055\u3068 \u624b\u7d19\u306b \u4e3b\u4eba\u306f\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51fa\u529b\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\uff0c\u4ee5\u4e0b\u306e\u4e8b\u9805\u3092UNIX\u30b3\u30de\u30f3\u30c9\u3092\u7528\u3044\u3066\u78ba\u8a8d\u305b\u3088\uff0e\n\n\u30b3\u30fc\u30d1\u30b9\u4e2d\u3067\u983b\u51fa\u3059\u308b\u8ff0\u8a9e\uff08\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092+\u52d5\u8a5e\uff09\n\u30b3\u30fc\u30d1\u30b9\u4e2d\u3067\u983b\u51fa\u3059\u308b\u8ff0\u8a9e\u3068\u52a9\u8a5e\u30d1\u30bf\u30fc\u30f3\n\n\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\nmain.py\n# coding: utf-8\nimport CaboCha\nimport re\n\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.cabocha'\nfname_result = 'result.txt'\n\n\ndef parse_neko():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\u3066neko.txt.cabocha\u306b\u4fdd\u5b58\u3059\u308b\n    '''\n    with open(fname) as data_file, \\\n            open(fname_parsed, mode='w') as out_file:\n\n        cabocha = CaboCha.Parser()\n        for line in data_file:\n            out_file.write(\n                cabocha.parse(line).toString(CaboCha.FORMAT_LATTICE)\n            )\n\n\nclass Morph:\n    '''\n    \u5f62\u614b\u7d20\u30af\u30e9\u30b9\n    \u8868\u5c64\u5f62\uff08surface\uff09\u3001\u57fa\u672c\u5f62\uff08base\uff09\u3001\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u3092\n    \u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n    '''\n    def __init__(self, surface, base, pos, pos1):\n        '''\u521d\u671f\u5316'''\n        self.surface = surface\n        self.base = base\n        self.pos = pos\n        self.pos1 = pos1\n\n    def __str__(self):\n        '''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n        return 'surface[{}]\\tbase[{}]\\tpos[{}]\\tpos1[{}]'\\\n            .format(self.surface, self.base, self.pos, self.pos1)\n\n\nclass Chunk:\n    '''\n    \u6587\u7bc0\u30af\u30e9\u30b9\n    \u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\u3001\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\u3001\n    \u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n    '''\n\n    def __init__(self):\n        '''\u521d\u671f\u5316'''\n        self.morphs = []\n        self.srcs = []\n        self.dst = -1\n\n    def __str__(self):\n        '''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n        surface = ''\n        for morph in self.morphs:\n            surface += morph.surface\n        return '{}\\tsrcs{}\\tdst[{}]'.format(surface, self.srcs, self.dst)\n\n    def normalized_surface(self):\n        '''\u53e5\u8aad\u70b9\u306a\u3069\u306e\u8a18\u53f7\u3092\u9664\u3044\u305f\u8868\u5c64\u5f62'''\n        result = ''\n        for morph in self.morphs:\n            if morph.pos != '\u8a18\u53f7':\n                result += morph.surface\n        return result\n\n    def chk_pos(self, pos):\n        '''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n        \u623b\u308a\u5024\uff1a\n        \u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u5834\u5408\u306fTrue\n        '''\n        for morph in self.morphs:\n            if morph.pos == pos:\n                return True\n        return False\n\n    def get_morphs_by_pos(self, pos, pos1=''):\n        '''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u306e\u5f62\u614b\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n        pos1\u306e\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306fpos\u306e\u307f\u3067\u5224\u5b9a\u3059\u308b\n\n        \u623b\u308a\u5024\uff1a\n        \u5f62\u614b\u7d20\uff08morph\uff09\u306e\u30ea\u30b9\u30c8\u3001\u8a72\u5f53\u5f62\u614b\u7d20\u304c\u306a\u3044\u5834\u5408\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\n        '''\n        if len(pos1) > 0:\n            return [res for res in self.morphs\n                    if (res.pos == pos) and (res.pos1 == pos1)]\n        else:\n            return [res for res in self.morphs if res.pos == pos]\n\n    def get_kaku_prt(self):\n        '''\u52a9\u8a5e\u30921\u3064\u8fd4\u3059\n        \u8907\u6570\u3042\u308b\u5834\u5408\u306f\u683c\u52a9\u8a5e\u3092\u512a\u5148\u3057\u3001\u6700\u5f8c\u306e\u52a9\u8a5e\u3092\u8fd4\u3059\u3002\n\n        \u623b\u308a\u5024\uff1a\n        \u52a9\u8a5e\u3001\u306a\u3044\u5834\u5408\u306f\u7a7a\u6587\u5b57\u5217\n        '''\n        prts = self.get_morphs_by_pos('\u52a9\u8a5e')\n        if len(prts) > 1:\n\n            # 2\u3064\u4ee5\u4e0a\u52a9\u8a5e\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u683c\u52a9\u8a5e\u3092\u512a\u5148\n            kaku_prts = self.get_morphs_by_pos('\u52a9\u8a5e', '\u683c\u52a9\u8a5e')\n            if len(kaku_prts) > 0:\n                prts = kaku_prts\n\n        if len(prts) > 0:\n            return prts[-1].surface     # \u6700\u5f8c\u3092\u8fd4\u3059\n        else:\n            return ''\n\n    def get_sahen_wo(self):\n        '''\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\u300d\u3092\u542b\u7121\u5834\u5408\u306f\u3001\u305d\u306e\u90e8\u5206\u306e\u8868\u5c64\u5f62\u3092\u8fd4\u3059\n\n        \u623b\u308a\u5024\uff1a\n        \u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\u300d\u306e\u6587\u5b57\u5217\u3001\u306a\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\n        '''\n        for i, morph in enumerate(self.morphs[0:-1]):\n\n            if (morph.pos == '\u540d\u8a5e') \\\n                    and (morph.pos1 == '\u30b5\u5909\u63a5\u7d9a') \\\n                    and (self.morphs[i + 1].pos == '\u52a9\u8a5e') \\\n                    and (self.morphs[i + 1].surface == '\u3092'):\n                return morph.surface + self.morphs[i + 1].surface\n\n        return ''\n\n\ndef neco_lines():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\n    1\u6587\u305a\u3064Chunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n    \u623b\u308a\u5024\uff1a\n    1\u6587\u306eChunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\n    '''\n    with open(fname_parsed) as file_parsed:\n\n        chunks = dict()     # idx\u3092key\u306bChunk\u3092\u683c\u7d0d\n        idx = -1\n\n        for line in file_parsed:\n\n            # 1\u6587\u306e\u7d42\u4e86\u5224\u5b9a\n            if line == 'EOS\\n':\n\n                # Chunk\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n                if len(chunks) > 0:\n\n                    # chunks\u3092key\u3067\u30bd\u30fc\u30c8\u3057\u3001value\u306e\u307f\u53d6\u308a\u51fa\u3057\n                    sorted_tuple = sorted(chunks.items(), key=lambda x: x[0])\n                    yield list(zip(*sorted_tuple))[1]\n                    chunks.clear()\n\n                else:\n                    yield []\n\n            # \u5148\u982d\u304c*\u306e\u884c\u306f\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Chunk\u3092\u4f5c\u6210\n            elif line[0] == '*':\n\n                # Chunk\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3068\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u53d6\u5f97\n                cols = line.split(' ')\n                idx = int(cols[1])\n                dst = int(re.search(r'(.*?)D', cols[2]).group(1))\n\n                # Chunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u30bb\u30c3\u30c8\n                if idx not in chunks:\n                    chunks[idx] = Chunk()\n                chunks[idx].dst = dst\n\n                # \u4fc2\u308a\u5148\u306eChunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5143\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u8ffd\u52a0\n                if dst != -1:\n                    if dst not in chunks:\n                        chunks[dst] = Chunk()\n                    chunks[dst].srcs.append(idx)\n\n            # \u305d\u308c\u4ee5\u5916\u306e\u884c\u306f\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Morph\u3092\u4f5c\u308aChunk\u306b\u8ffd\u52a0\n            else:\n\n                # \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n                cols = line.split('\\t')\n                res_cols = cols[1].split(',')\n\n                # Morph\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n                chunks[idx].morphs.append(\n                    Morph(\n                        cols[0],        # surface\n                        res_cols[6],    # base\n                        res_cols[0],    # pos\n                        res_cols[1]     # pos1\n                    )\n                )\n\n        raise StopIteration\n\n\n# \u4fc2\u308a\u53d7\u3051\u89e3\u6790\nparse_neko()\n\n# \u7d50\u679c\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\nwith open(fname_result, mode='w') as out_file:\n\n    # 1\u6587\u305a\u3064\u30ea\u30b9\u30c8\u4f5c\u6210\n    for chunks in neco_lines():\n\n        # chunk\u3092\u5217\u6319\n        for chunk in chunks:\n\n            # \u52d5\u8a5e\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\n            verbs = chunk.get_morphs_by_pos('\u52d5\u8a5e')\n            if len(verbs) < 1:\n                continue\n\n            # \u4fc2\u308a\u5143\u306b\u52a9\u8a5e\u3092\u542b\u3080chunk\u3092\u5217\u6319\n            chunks_include_prt = []\n            for src in chunk.srcs:\n                if len(chunks[src].get_kaku_prt()) > 0:\n                    chunks_include_prt.append(chunks[src])\n            if len(chunks_include_prt) < 1:\n                continue\n\n            # \u4fc2\u308a\u5143\u306b\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\uff08\u52a9\u8a5e\uff09\u300d\u304c\u3042\u308b\u304b\u30c1\u30a7\u30c3\u30af\n            sahen_wo = ''\n            for chunk_src in chunks_include_prt:\n                sahen_wo = chunk_src.get_sahen_wo()\n                if len(sahen_wo) > 0:\n                    chunk_remove = chunk_src\n                    break\n            if len(sahen_wo) < 1:\n                continue\n\n            # \u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\uff08\u52a9\u8a5e\uff09\u300d\u306f\u8ff0\u8a9e\u3068\u3057\u3066\u52d5\u8a5e\u3068\u4e00\u7dd2\u306b\u51fa\u529b\u3059\u308b\u306e\u3067\u4fc2\u308a\u5143\u304b\u3089\u306f\u9664\u5916\n            chunks_include_prt.remove(chunk_remove)\n\n            # chunk\u3092\u52a9\u8a5e\u306e\u8f9e\u66f8\u9806\u3067\u30bd\u30fc\u30c8\n            chunks_include_prt.sort(key=lambda x: x.get_kaku_prt())\n\n            # \u51fa\u529b\n            out_file.write('{}\\t{}\\t{}\\n'.format(\n                sahen_wo + verbs[0].base,   # \u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092+\u6700\u5de6\u306e\u52d5\u8a5e\u306e\u57fa\u672c\u7cfb\n                ' '.join([chunk.get_kaku_prt() \\\n                        for chunk in chunks_include_prt]),      # \u52a9\u8a5e\n                ' '.join([chunk.normalized_surface() \\\n                        for chunk in chunks_include_prt])       # \u9805\n            ))\n\n\n\n\u5b9f\u884c\u7d50\u679c\uff1a\n\u4ee5\u4e0b\u3001\u7d50\u679c\u306e\u5148\u982d\u90e8\u5206\u3067\u3059\u3002\n\nresult.txt\uff08\u5148\u982d\u90e8\u5206\uff09\n\u6c7a\u5fc3\u3092\u3059\u308b \u3068 \u3042\u308b\u3053\u3046\u3068\n\u8fd4\u5831\u3092\u3057\u3066\u3084\u308b   \u3093\u3067  \u5078\u3093\u3067\n\u663c\u5bdd\u3092\u3059\u308b     \n\u663c\u5bdd\u3092\u3059\u308b \u304c \u5f7c\u304c\n\u8feb\u5bb3\u3092\u52a0\u3048\u308b  \u3066 \u8ffd\u3044\u5efb\u3057\u3066\n\u751f\u6d3b\u3092\u3059\u308b \u304c \u3066 \u3092 \u7b49\u732b\u65cf\u304c \u5b8c\u304f\u3057\u3066 \u611b\u3092\n\u8a71\u3092\u3059\u308b        \n\u6295\u66f8\u3092\u3059\u308b \u3066 \u3078 \u3084\u3063\u3066 \u307b\u3068\u3068\u304e\u3059\u3078\n\u8a71\u3092\u3059\u308b    \u306b \u6642\u306b\n\u5199\u751f\u3092\u3059\u308b     \n\u663c\u5bdd\u3092\u3059\u308b \u3066 \u51fa\u3066\n\u5f69\u8272\u3092\u898b\u308b     \n\u6b20\u4f38\u3092\u3059\u308b \u304b\u3089 \u3066 \u3066  \u306a\u3063\u305f\u304b\u3089 \u3057\u3066 \u62bc\u3057\u51fa\u3057\u3066\n\u5831\u9053\u3092\u3059\u308b \u306b \u8033\u306b\n\u524d\u5f8c\u3092\u5fd8\u308c\u308b  \u306b \u5fc3\u306b\n\u6328\u62f6\u3092\u3059\u308b     \n\u5fa1\u99b3\u8d70\u3092\u98df\u3046  \u3068 \u898b\u308b\u3068\n\u554f\u7b54\u3092\u3059\u308b     \n\u96d1\u8ac7\u3092\u3059\u308b \u306a\u304c\u3089 \u306f   \u5bdd\u8ee2\u3073\u306a\u304c\u3089 \u9ed2\u306f\n\u81ea\u6162\u3092\u3059\u308b     \n\u547c\u5438\u3092\u98f2\u307f\u8fbc\u3080   \u304b\u3089  \u306a\u3063\u3066\u304b\u3089\n\u601d\u6848\u3092\u5b9a\u3081\u308b  \u3068 \u306f \u82e5\u304f\u306f\u306a\u3044\u3068 \u543e\u8f29\u306f\n\u5fa1\u99b3\u8d70\u3092\u3042\u308b\u304f   \u3063\u3066 \u3066  \u731f\u3063\u3066 \u306a\u3063\u3066\n\u5fa1\u99b3\u8d70\u3092\u98df\u3046      \n\u653e\u8569\u3092\u3059\u308b     \n\u653e\u8569\u3092\u3059\u308b \u304c \u3082\u306e\u3060\u304b\u3089\u304c\n\u653e\u8569\u3092\u3059\u308b \u3088\u308a  \u4e91\u3046\u3088\u308a\u3082\n\u653e\u8569\u3092\u3059\u308b     \n\u5199\u751f\u3092\u529b\u3080 \u306b\u5f93\u3063\u3066    \u5fe0\u544a\u306b\u5f93\u3063\u3066\n\u5199\u751f\u3092\u3059\u308b     \n\n\n\u7d50\u679c\u5168\u4f53\u306fGitHub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\nUNIX\u30b3\u30de\u30f3\u30c9\u78ba\u8a8d\u7528\u306e\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\n\ntest.sh\n#!/bin/sh\n\n# \u8ff0\u8a9e\u3067\u30bd\u30fc\u30c8\u3057\u3066\u91cd\u8907\u9664\u53bb\u3057\u3001\u305d\u306e\u4ef6\u6570\u3067\u30bd\u30fc\u30c8\ncut --fields=1 result.txt | sort | uniq --count | sort --numeric-sort --reverse > \"predicate.txt\"\n\n# \u8ff0\u8a9e\u3068\u52a9\u8a5e\u3067\u30bd\u30fc\u30c8\u3057\u3066\u91cd\u8907\u9664\u53bb\u3057\u3001\u305d\u306e\u4ef6\u6570\u3067\u30bd\u30fc\u30c8\ncut --fields=1,2 result.txt | sort | uniq --count | sort --numeric-sort --reverse > \"predicate_Particle.txt\"\n\n\ncut\u3067\u5207\u308a\u51fa\u3057\u3066uniq\u3068sort\u3067\u96c6\u8a08\u3001\u30bd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u3044\u305a\u308c\u306e\u30b3\u30de\u30f3\u30c9\u3082\u554f\u984c19\u306a\u3069\u3067\u51fa\u3066\u304d\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u7d50\u679c\u306e\u78ba\u8a8d\uff1a\n\u30b3\u30fc\u30d1\u30b9\u4e2d\u3067\u983b\u51fa\u3059\u308b\u8ff0\u8a9e\uff08\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092+\u52d5\u8a5e\uff09\u306e\u5148\u982d\u90e8\u5206\u3067\u3059\u3002\n\npredicate.txt\uff08\u5148\u982d\u90e8\u5206\uff09\n     30 \u8fd4\u4e8b\u3092\u3059\u308b\n     21 \u6328\u62f6\u3092\u3059\u308b\n     15 \u8a71\u3092\u3059\u308b\n     14 \u771f\u4f3c\u3092\u3059\u308b\n     12 \u55a7\u5629\u3092\u3059\u308b\n      8 \u8cea\u554f\u3092\u3059\u308b\n      7 \u904b\u52d5\u3092\u3059\u308b\n      6 \u6ce8\u610f\u3092\u3059\u308b\n      6 \u663c\u5bdd\u3092\u3059\u308b\n      6 \u90aa\u9b54\u3092\u3059\u308b\n      5 \u8a71\u3092\u805e\u304f\n      5 \u554f\u7b54\u3092\u3059\u308b\n      5 \u75c5\u6c17\u3092\u3059\u308b\n      5 \u76f8\u8ac7\u3092\u3059\u308b\n      5 \u8cea\u554f\u3092\u304b\u3051\u308b\n      5 \u8f9e\u5100\u3092\u3059\u308b\n      4 \u653e\u8569\u3092\u3059\u308b\n      4 \u6226\u4e89\u3092\u3059\u308b\n      4 \u6563\u6b69\u3092\u3059\u308b\n      4 \u964d\u53c2\u3092\u3059\u308b\n      4 \u6b20\u4f38\u3092\u3059\u308b\n      4 \u4f11\u990a\u3092\u8981\u3059\u308b\n      4 \u6f14\u8aac\u3092\u3059\u308b\n      4 \u3044\u305f\u305a\u3089\u3092\u3059\u308b\n\n\n\u30b3\u30fc\u30d1\u30b9\u4e2d\u3067\u983b\u51fa\u3059\u308b\u8ff0\u8a9e\u3068\u52a9\u8a5e\u30d1\u30bf\u30fc\u30f3\u306e\u5148\u982d\u90e8\u5206\u3067\u3059\u3002\n\npredicate_particle.txt\uff08\u5148\u982d\u90e8\u5206\uff09\n      8 \u771f\u4f3c\u3092\u3059\u308b \n      7 \u8fd4\u4e8b\u3092\u3059\u308b \u3068\n      6 \u904b\u52d5\u3092\u3059\u308b \n      5 \u55a7\u5629\u3092\u3059\u308b \n      4 \u8a71\u3092\u805e\u304f    \n      4 \u8a71\u3092\u3059\u308b    \n      4 \u8fd4\u4e8b\u3092\u3059\u308b \u3068 \u306f\n      4 \u6328\u62f6\u3092\u3059\u308b \u3068\n      4 \u6328\u62f6\u3092\u3059\u308b \u304b\u3089\n      3 \u8fd4\u4e8b\u3092\u3059\u308b \n      3 \u8cea\u554f\u3092\u304b\u3051\u308b  \u3068 \u306f\n      3 \u55a7\u5629\u3092\u3059\u308b \u3068\n      2 \u554f\u7b54\u3092\u3059\u308b \n      2 \u653e\u8569\u3092\u3059\u308b \n      2 \u8fd4\u4e8b\u3092\u3059\u308b \u304b\u3089 \u3068\n      2 \u5e73\u5747\u3092\u7834\u308b \n      2 \u75c5\u6c17\u3092\u3059\u308b \n      2 \u540c\u60c5\u3092\u8868\u3059 \u306b\n      2 \u6ce8\u610f\u3092\u60f9\u304f \n      2 \u6ce8\u610f\u3092\u3059\u308b \n      2 \u6df1\u5165\u308a\u3092\u3059\u308b  \n      2 \u5199\u751f\u3092\u3059\u308b \n      2 \u6563\u6b69\u3092\u3059\u308b \n      2 \u8b1b\u7fa9\u3092\u3059\u308b \n      2 \u884c\u52d5\u3092\u3068\u308b \n      2 \u5de5\u592b\u3092\u3059\u308b \n      2 \u4ea4\u969b\u3092\u3059\u308b \n      2 \u5fa1\u7121\u6c99\u6c70\u3092\u3059\u308b   \n      2 \u4f11\u990a\u3092\u8981\u3059\u308b  \u306f\n      2 \u8b70\u8ad6\u3092\u3059\u308b \u3066\n      2 \u5b66\u554f\u3092\u3059\u308b \n      2 \u899a\u609f\u3092\u3059\u308b \u3068\n      2 \u904b\u52d5\u3092\u3084\u308b \n      2 \u5b89\u5fc3\u3092\u5f97\u308b \u304c\n      2 \u6328\u62f6\u3092\u3059\u308b \u3068 \u3082\n      2 \u6328\u62f6\u3092\u3059\u308b \u3067\n      2 \u6328\u62f6\u3092\u3059\u308b \n      2 \u3044\u305f\u305a\u3089\u3092\u3059\u308b   \n\n\n\u7d50\u679c\u5168\u4f53\u306fGitHub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u8ff0\u8a9e\u306b\u4fc2\u308b\u52a9\u8a5e\u304c1\u3064\u3057\u304b\u306a\u3044\u5834\u5408\u306e\u6271\u3044\nChunk\u30af\u30e9\u30b9\u306bget_sahen_wo()\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u6587\u7bc0\u306e\u4e2d\u306b\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092\uff08\u52a9\u8a5e\uff09\u300d\u304c\u3042\u308b\u5834\u5408\u306b\u3001\u305d\u306e\u8868\u5c64\u5f62\u3092\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u306f\u524d\u554f\u306e\u307e\u307e\u3067\u3059\u3002\n\u3053\u306e\u554f\u984c\u3067\u60a9\u3093\u3060\u306e\u306f\u3001\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092\uff08\u52a9\u8a5e\uff09\u300d\u306e\u6587\u7bc0\u4ee5\u5916\u306b\u3001\u52d5\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u306b\u4fc2\u308b\u6587\u7bc0\u304c\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u6271\u3044\u3067\u3059\u3002\u9664\u53bb\u3059\u3079\u304d\u306a\u306e\u304b\u826f\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092\uff08\u52a9\u8a5e\uff09\u300d\u306e\u6587\u7bc0\u3057\u304b\u52d5\u8a5e\u306b\u4fc2\u308b\u6587\u7bc0\u304c\u306a\u3044\u3082\u306e\u3082\u6b8b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u30bf\u30d6\u533a\u5207\u308a\u306e2\u30ab\u30e9\u30e0\u76ee\u30683\u30ab\u30e9\u30e0\u76ee\u304c\u7a7a\u6587\u5b57\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n\u6a5f\u80fd\u52d5\u8a5e\u3068\u306f\n\u52d5\u8a5e\u3060\u3051\u3067\u306f\u5185\u5bb9\u304c\u308f\u304b\u3089\u305a\u3001\u540d\u8a5e\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u5185\u5bb9\u304c\u308f\u304b\u308b\u3088\u3046\u306b\u306a\u308b\u52d5\u8a5e\u3060\u305d\u3046\u3067\u3059\u3002\u78ba\u304b\u306b\u300c\u3059\u308b\u300d\u3060\u3051\u3067\u306f\u5185\u5bb9\u304c\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u300c\u8fd4\u4e8b\u3092\u300d\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u5185\u5bb9\u304c\u5206\u304b\u308a\u307e\u3059\u306d\u3002\u3053\u306e\u3088\u3046\u306a\u52d5\u8a5e\u306e\u3053\u3068\u3067\u3059\u3002\n\u3000\n48\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c5\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u9752\u7a7a\u6587\u5eab\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 \\:\\: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f[\u3053\u3061\u3089](http://qiita.com/segavvy/items)\u304b\u3089\u3069\u3046\u305e\u3002\n\n## \u7b2c5\u7ae0: \u4fc2\u308a\u53d7\u3051\u89e3\u6790\n>\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092CaboCha\u3092\u4f7f\u3063\u3066\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.cabocha\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n###47. \u6a5f\u80fd\u52d5\u8a5e\u69cb\u6587\u306e\u30de\u30a4\u30cb\u30f3\u30b0\n>\u52d5\u8a5e\u306e\u30f2\u683c\u306b\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\u304c\u5165\u3063\u3066\u3044\u308b\u5834\u5408\u306e\u307f\u306b\u7740\u76ee\u3057\u305f\u3044\uff0e46\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3092\u6e80\u305f\u3059\u3088\u3046\u306b\u6539\u5909\u305b\u3088\uff0e\n>\n> - \u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092\uff08\u52a9\u8a5e\uff09\u300d\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u7bc0\u304c\u52d5\u8a5e\u306b\u4fc2\u308b\u5834\u5408\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3059\u308b\n> - \u8ff0\u8a9e\u306f\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092+\u52d5\u8a5e\u306e\u57fa\u672c\u5f62\u300d\u3068\u3057\uff0c\u6587\u7bc0\u4e2d\u306b\u8907\u6570\u306e\u52d5\u8a5e\u304c\u3042\u308b\u3068\u304d\u306f\uff0c\u6700\u5de6\u306e\u52d5\u8a5e\u3092\u7528\u3044\u308b\n> - \u8ff0\u8a9e\u306b\u4fc2\u308b\u52a9\u8a5e\uff08\u6587\u7bc0\uff09\u304c\u8907\u6570\u3042\u308b\u3068\u304d\u306f\uff0c\u3059\u3079\u3066\u306e\u52a9\u8a5e\u3092\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8f9e\u66f8\u9806\u306b\u4e26\u3079\u308b\n> - \u8ff0\u8a9e\u306b\u4fc2\u308b\u6587\u7bc0\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\uff0c\u3059\u3079\u3066\u306e\u9805\u3092\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u4e26\u3079\u308b\uff08\u52a9\u8a5e\u306e\u4e26\u3073\u9806\u3068\u63c3\u3048\u3088\uff09\n>\n>\u4f8b\u3048\u3070\u300c\u5225\u6bb5\u304f\u308b\u306b\u3082\u53ca\u3070\u3093\u3055\u3068\u3001\u4e3b\u4eba\u306f\u624b\u7d19\u306b\u8fd4\u4e8b\u3092\u3059\u308b\u3002\u300d\u3068\u3044\u3046\u6587\u304b\u3089\uff0c\u4ee5\u4e0b\u306e\u51fa\u529b\u304c\u5f97\u3089\u308c\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\n>\n>```\n>\u8fd4\u4e8b\u3092\u3059\u308b      \u3068 \u306b \u306f        \u53ca\u3070\u3093\u3055\u3068 \u624b\u7d19\u306b \u4e3b\u4eba\u306f\n>```\n>\n>\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51fa\u529b\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3057\uff0c\u4ee5\u4e0b\u306e\u4e8b\u9805\u3092UNIX\u30b3\u30de\u30f3\u30c9\u3092\u7528\u3044\u3066\u78ba\u8a8d\u305b\u3088\uff0e\n>\n> - \u30b3\u30fc\u30d1\u30b9\u4e2d\u3067\u983b\u51fa\u3059\u308b\u8ff0\u8a9e\uff08\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092+\u52d5\u8a5e\uff09\n> - \u30b3\u30fc\u30d1\u30b9\u4e2d\u3067\u983b\u51fa\u3059\u308b\u8ff0\u8a9e\u3068\u52a9\u8a5e\u30d1\u30bf\u30fc\u30f3\n\n####\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\n```python:main.py\n# coding: utf-8\nimport CaboCha\nimport re\n\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.cabocha'\nfname_result = 'result.txt'\n\n\ndef parse_neko():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\u3066neko.txt.cabocha\u306b\u4fdd\u5b58\u3059\u308b\n\t'''\n\twith open(fname) as data_file, \\\n\t\t\topen(fname_parsed, mode='w') as out_file:\n\n\t\tcabocha = CaboCha.Parser()\n\t\tfor line in data_file:\n\t\t\tout_file.write(\n\t\t\t\tcabocha.parse(line).toString(CaboCha.FORMAT_LATTICE)\n\t\t\t)\n\n\nclass Morph:\n\t'''\n\t\u5f62\u614b\u7d20\u30af\u30e9\u30b9\n\t\u8868\u5c64\u5f62\uff08surface\uff09\u3001\u57fa\u672c\u5f62\uff08base\uff09\u3001\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u3092\n\t\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n\t'''\n\tdef __init__(self, surface, base, pos, pos1):\n\t\t'''\u521d\u671f\u5316'''\n\t\tself.surface = surface\n\t\tself.base = base\n\t\tself.pos = pos\n\t\tself.pos1 = pos1\n\n\tdef __str__(self):\n\t\t'''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n\t\treturn 'surface[{}]\\tbase[{}]\\tpos[{}]\\tpos1[{}]'\\\n\t\t\t.format(self.surface, self.base, self.pos, self.pos1)\n\n\nclass Chunk:\n\t'''\n\t\u6587\u7bc0\u30af\u30e9\u30b9\n\t\u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\u3001\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\u3001\n\t\u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n\t'''\n\n\tdef __init__(self):\n\t\t'''\u521d\u671f\u5316'''\n\t\tself.morphs = []\n\t\tself.srcs = []\n\t\tself.dst = -1\n\n\tdef __str__(self):\n\t\t'''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n\t\tsurface = ''\n\t\tfor morph in self.morphs:\n\t\t\tsurface += morph.surface\n\t\treturn '{}\\tsrcs{}\\tdst[{}]'.format(surface, self.srcs, self.dst)\n\n\tdef normalized_surface(self):\n\t\t'''\u53e5\u8aad\u70b9\u306a\u3069\u306e\u8a18\u53f7\u3092\u9664\u3044\u305f\u8868\u5c64\u5f62'''\n\t\tresult = ''\n\t\tfor morph in self.morphs:\n\t\t\tif morph.pos != '\u8a18\u53f7':\n\t\t\t\tresult += morph.surface\n\t\treturn result\n\n\tdef chk_pos(self, pos):\n\t\t'''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u5834\u5408\u306fTrue\n\t\t'''\n\t\tfor morph in self.morphs:\n\t\t\tif morph.pos == pos:\n\t\t\t\treturn True\n\t\treturn False\n\n\tdef get_morphs_by_pos(self, pos, pos1=''):\n\t\t'''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u306e\u5f62\u614b\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\t\tpos1\u306e\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306fpos\u306e\u307f\u3067\u5224\u5b9a\u3059\u308b\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u5f62\u614b\u7d20\uff08morph\uff09\u306e\u30ea\u30b9\u30c8\u3001\u8a72\u5f53\u5f62\u614b\u7d20\u304c\u306a\u3044\u5834\u5408\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\n\t\t'''\n\t\tif len(pos1) > 0:\n\t\t\treturn [res for res in self.morphs\n\t\t\t\t\tif (res.pos == pos) and (res.pos1 == pos1)]\n\t\telse:\n\t\t\treturn [res for res in self.morphs if res.pos == pos]\n\n\tdef get_kaku_prt(self):\n\t\t'''\u52a9\u8a5e\u30921\u3064\u8fd4\u3059\n\t\t\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u683c\u52a9\u8a5e\u3092\u512a\u5148\u3057\u3001\u6700\u5f8c\u306e\u52a9\u8a5e\u3092\u8fd4\u3059\u3002\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u52a9\u8a5e\u3001\u306a\u3044\u5834\u5408\u306f\u7a7a\u6587\u5b57\u5217\n\t\t'''\n\t\tprts = self.get_morphs_by_pos('\u52a9\u8a5e')\n\t\tif len(prts) > 1:\n\n\t\t\t# 2\u3064\u4ee5\u4e0a\u52a9\u8a5e\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u683c\u52a9\u8a5e\u3092\u512a\u5148\n\t\t\tkaku_prts = self.get_morphs_by_pos('\u52a9\u8a5e', '\u683c\u52a9\u8a5e')\n\t\t\tif len(kaku_prts) > 0:\n\t\t\t\tprts = kaku_prts\n\n\t\tif len(prts) > 0:\n\t\t\treturn prts[-1].surface\t\t# \u6700\u5f8c\u3092\u8fd4\u3059\n\t\telse:\n\t\t\treturn ''\n\n\tdef get_sahen_wo(self):\n\t\t'''\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\u300d\u3092\u542b\u7121\u5834\u5408\u306f\u3001\u305d\u306e\u90e8\u5206\u306e\u8868\u5c64\u5f62\u3092\u8fd4\u3059\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\u300d\u306e\u6587\u5b57\u5217\u3001\u306a\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\n\t\t'''\n\t\tfor i, morph in enumerate(self.morphs[0:-1]):\n\n\t\t\tif (morph.pos == '\u540d\u8a5e') \\\n\t\t\t\t\tand (morph.pos1 == '\u30b5\u5909\u63a5\u7d9a') \\\n\t\t\t\t\tand (self.morphs[i + 1].pos == '\u52a9\u8a5e') \\\n\t\t\t\t\tand (self.morphs[i + 1].surface == '\u3092'):\n\t\t\t\treturn morph.surface + self.morphs[i + 1].surface\n\n\t\treturn ''\n\n\ndef neco_lines():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\n\t1\u6587\u305a\u3064Chunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n\t\u623b\u308a\u5024\uff1a\n\t1\u6587\u306eChunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\n\t'''\n\twith open(fname_parsed) as file_parsed:\n\n\t\tchunks = dict()\t\t# idx\u3092key\u306bChunk\u3092\u683c\u7d0d\n\t\tidx = -1\n\n\t\tfor line in file_parsed:\n\n\t\t\t# 1\u6587\u306e\u7d42\u4e86\u5224\u5b9a\n\t\t\tif line == 'EOS\\n':\n\n\t\t\t\t# Chunk\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\t\t\t\tif len(chunks) > 0:\n\n\t\t\t\t\t# chunks\u3092key\u3067\u30bd\u30fc\u30c8\u3057\u3001value\u306e\u307f\u53d6\u308a\u51fa\u3057\n\t\t\t\t\tsorted_tuple = sorted(chunks.items(), key=lambda x: x[0])\n\t\t\t\t\tyield list(zip(*sorted_tuple))[1]\n\t\t\t\t\tchunks.clear()\n\n\t\t\t\telse:\n\t\t\t\t\tyield []\n\n\t\t\t# \u5148\u982d\u304c*\u306e\u884c\u306f\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Chunk\u3092\u4f5c\u6210\n\t\t\telif line[0] == '*':\n\n\t\t\t\t# Chunk\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3068\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u53d6\u5f97\n\t\t\t\tcols = line.split(' ')\n\t\t\t\tidx = int(cols[1])\n\t\t\t\tdst = int(re.search(r'(.*?)D', cols[2]).group(1))\n\n\t\t\t\t# Chunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u30bb\u30c3\u30c8\n\t\t\t\tif idx not in chunks:\n\t\t\t\t\tchunks[idx] = Chunk()\n\t\t\t\tchunks[idx].dst = dst\n\n\t\t\t\t# \u4fc2\u308a\u5148\u306eChunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5143\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u8ffd\u52a0\n\t\t\t\tif dst != -1:\n\t\t\t\t\tif dst not in chunks:\n\t\t\t\t\t\tchunks[dst] = Chunk()\n\t\t\t\t\tchunks[dst].srcs.append(idx)\n\n\t\t\t# \u305d\u308c\u4ee5\u5916\u306e\u884c\u306f\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Morph\u3092\u4f5c\u308aChunk\u306b\u8ffd\u52a0\n\t\t\telse:\n\n\t\t\t\t# \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n\t\t\t\tcols = line.split('\\t')\n\t\t\t\tres_cols = cols[1].split(',')\n\n\t\t\t\t# Morph\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\t\t\t\tchunks[idx].morphs.append(\n\t\t\t\t\tMorph(\n\t\t\t\t\t\tcols[0],\t\t# surface\n\t\t\t\t\t\tres_cols[6],\t# base\n\t\t\t\t\t\tres_cols[0],\t# pos\n\t\t\t\t\t\tres_cols[1]\t\t# pos1\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\traise StopIteration\n\n\n# \u4fc2\u308a\u53d7\u3051\u89e3\u6790\nparse_neko()\n\n# \u7d50\u679c\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\nwith open(fname_result, mode='w') as out_file:\n\n\t# 1\u6587\u305a\u3064\u30ea\u30b9\u30c8\u4f5c\u6210\n\tfor chunks in neco_lines():\n\n\t\t# chunk\u3092\u5217\u6319\n\t\tfor chunk in chunks:\n\n\t\t\t# \u52d5\u8a5e\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\n\t\t\tverbs = chunk.get_morphs_by_pos('\u52d5\u8a5e')\n\t\t\tif len(verbs) < 1:\n\t\t\t\tcontinue\n\n\t\t\t# \u4fc2\u308a\u5143\u306b\u52a9\u8a5e\u3092\u542b\u3080chunk\u3092\u5217\u6319\n\t\t\tchunks_include_prt = []\n\t\t\tfor src in chunk.srcs:\n\t\t\t\tif len(chunks[src].get_kaku_prt()) > 0:\n\t\t\t\t\tchunks_include_prt.append(chunks[src])\n\t\t\tif len(chunks_include_prt) < 1:\n\t\t\t\tcontinue\n\n\t\t\t# \u4fc2\u308a\u5143\u306b\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\uff08\u52a9\u8a5e\uff09\u300d\u304c\u3042\u308b\u304b\u30c1\u30a7\u30c3\u30af\n\t\t\tsahen_wo = ''\n\t\t\tfor chunk_src in chunks_include_prt:\n\t\t\t\tsahen_wo = chunk_src.get_sahen_wo()\n\t\t\t\tif len(sahen_wo) > 0:\n\t\t\t\t\tchunk_remove = chunk_src\n\t\t\t\t\tbreak\n\t\t\tif len(sahen_wo) < 1:\n\t\t\t\tcontinue\n\n\t\t\t# \u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e\uff0b\u3092\uff08\u52a9\u8a5e\uff09\u300d\u306f\u8ff0\u8a9e\u3068\u3057\u3066\u52d5\u8a5e\u3068\u4e00\u7dd2\u306b\u51fa\u529b\u3059\u308b\u306e\u3067\u4fc2\u308a\u5143\u304b\u3089\u306f\u9664\u5916\n\t\t\tchunks_include_prt.remove(chunk_remove)\n\n\t\t\t# chunk\u3092\u52a9\u8a5e\u306e\u8f9e\u66f8\u9806\u3067\u30bd\u30fc\u30c8\n\t\t\tchunks_include_prt.sort(key=lambda x: x.get_kaku_prt())\n\n\t\t\t# \u51fa\u529b\n\t\t\tout_file.write('{}\\t{}\\t{}\\n'.format(\n\t\t\t\tsahen_wo + verbs[0].base,\t# \u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092+\u6700\u5de6\u306e\u52d5\u8a5e\u306e\u57fa\u672c\u7cfb\n\t\t\t\t' '.join([chunk.get_kaku_prt() \\\n\t\t\t\t\t\tfor chunk in chunks_include_prt]),\t\t# \u52a9\u8a5e\n\t\t\t\t' '.join([chunk.normalized_surface() \\\n\t\t\t\t\t\tfor chunk in chunks_include_prt])\t\t# \u9805\n\t\t\t))\n```\n\n####\u5b9f\u884c\u7d50\u679c\uff1a\n\n\u4ee5\u4e0b\u3001\u7d50\u679c\u306e\u5148\u982d\u90e8\u5206\u3067\u3059\u3002\n\n```console:result.txt\uff08\u5148\u982d\u90e8\u5206\uff09\n\u6c7a\u5fc3\u3092\u3059\u308b\t\u3068\t\u3042\u308b\u3053\u3046\u3068\n\u8fd4\u5831\u3092\u3057\u3066\u3084\u308b\t\u3093\u3067\t\u5078\u3093\u3067\n\u663c\u5bdd\u3092\u3059\u308b\t\t\n\u663c\u5bdd\u3092\u3059\u308b\t\u304c\t\u5f7c\u304c\n\u8feb\u5bb3\u3092\u52a0\u3048\u308b\t\u3066\t\u8ffd\u3044\u5efb\u3057\u3066\n\u751f\u6d3b\u3092\u3059\u308b\t\u304c \u3066 \u3092\t\u7b49\u732b\u65cf\u304c \u5b8c\u304f\u3057\u3066 \u611b\u3092\n\u8a71\u3092\u3059\u308b\t\t\n\u6295\u66f8\u3092\u3059\u308b\t\u3066 \u3078\t\u3084\u3063\u3066 \u307b\u3068\u3068\u304e\u3059\u3078\n\u8a71\u3092\u3059\u308b\t\u306b\t\u6642\u306b\n\u5199\u751f\u3092\u3059\u308b\t\t\n\u663c\u5bdd\u3092\u3059\u308b\t\u3066\t\u51fa\u3066\n\u5f69\u8272\u3092\u898b\u308b\t\t\n\u6b20\u4f38\u3092\u3059\u308b\t\u304b\u3089 \u3066 \u3066\t\u306a\u3063\u305f\u304b\u3089 \u3057\u3066 \u62bc\u3057\u51fa\u3057\u3066\n\u5831\u9053\u3092\u3059\u308b\t\u306b\t\u8033\u306b\n\u524d\u5f8c\u3092\u5fd8\u308c\u308b\t\u306b\t\u5fc3\u306b\n\u6328\u62f6\u3092\u3059\u308b\t\t\n\u5fa1\u99b3\u8d70\u3092\u98df\u3046\t\u3068\t\u898b\u308b\u3068\n\u554f\u7b54\u3092\u3059\u308b\t\t\n\u96d1\u8ac7\u3092\u3059\u308b\t\u306a\u304c\u3089 \u306f\t\u5bdd\u8ee2\u3073\u306a\u304c\u3089 \u9ed2\u306f\n\u81ea\u6162\u3092\u3059\u308b\t\t\n\u547c\u5438\u3092\u98f2\u307f\u8fbc\u3080\t\u304b\u3089\t\u306a\u3063\u3066\u304b\u3089\n\u601d\u6848\u3092\u5b9a\u3081\u308b\t\u3068 \u306f\t\u82e5\u304f\u306f\u306a\u3044\u3068 \u543e\u8f29\u306f\n\u5fa1\u99b3\u8d70\u3092\u3042\u308b\u304f\t\u3063\u3066 \u3066\t\u731f\u3063\u3066 \u306a\u3063\u3066\n\u5fa1\u99b3\u8d70\u3092\u98df\u3046\t\t\n\u653e\u8569\u3092\u3059\u308b\t\t\n\u653e\u8569\u3092\u3059\u308b\t\u304c\t\u3082\u306e\u3060\u304b\u3089\u304c\n\u653e\u8569\u3092\u3059\u308b\t\u3088\u308a\t\u4e91\u3046\u3088\u308a\u3082\n\u653e\u8569\u3092\u3059\u308b\t\t\n\u5199\u751f\u3092\u529b\u3080\t\u306b\u5f93\u3063\u3066\t\u5fe0\u544a\u306b\u5f93\u3063\u3066\n\u5199\u751f\u3092\u3059\u308b\t\t\n```\n\n\u7d50\u679c\u5168\u4f53\u306f[GitHub](https://github.com/segavvy/nlp100_Python/tree/master/47)\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n####UNIX\u30b3\u30de\u30f3\u30c9\u78ba\u8a8d\u7528\u306e\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\n```bash:test.sh\n#!/bin/sh\n\n# \u8ff0\u8a9e\u3067\u30bd\u30fc\u30c8\u3057\u3066\u91cd\u8907\u9664\u53bb\u3057\u3001\u305d\u306e\u4ef6\u6570\u3067\u30bd\u30fc\u30c8\ncut --fields=1 result.txt | sort | uniq --count | sort --numeric-sort --reverse > \"predicate.txt\"\n\n# \u8ff0\u8a9e\u3068\u52a9\u8a5e\u3067\u30bd\u30fc\u30c8\u3057\u3066\u91cd\u8907\u9664\u53bb\u3057\u3001\u305d\u306e\u4ef6\u6570\u3067\u30bd\u30fc\u30c8\ncut --fields=1,2 result.txt | sort | uniq --count | sort --numeric-sort --reverse > \"predicate_Particle.txt\"\n```\n\n`cut`\u3067\u5207\u308a\u51fa\u3057\u3066`uniq`\u3068`sort`\u3067\u96c6\u8a08\u3001\u30bd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u3044\u305a\u308c\u306e\u30b3\u30de\u30f3\u30c9\u3082[\u554f\u984c19](http://qiita.com/segavvy/items/58f11bce5f786e590d98)\u306a\u3069\u3067\u51fa\u3066\u304d\u305f\u3082\u306e\u3067\u3059\u3002\n\n####\u7d50\u679c\u306e\u78ba\u8a8d\uff1a\n\n\u30b3\u30fc\u30d1\u30b9\u4e2d\u3067\u983b\u51fa\u3059\u308b\u8ff0\u8a9e\uff08\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092+\u52d5\u8a5e\uff09\u306e\u5148\u982d\u90e8\u5206\u3067\u3059\u3002\n\n```console:predicate.txt\uff08\u5148\u982d\u90e8\u5206\uff09\n     30 \u8fd4\u4e8b\u3092\u3059\u308b\n     21 \u6328\u62f6\u3092\u3059\u308b\n     15 \u8a71\u3092\u3059\u308b\n     14 \u771f\u4f3c\u3092\u3059\u308b\n     12 \u55a7\u5629\u3092\u3059\u308b\n      8 \u8cea\u554f\u3092\u3059\u308b\n      7 \u904b\u52d5\u3092\u3059\u308b\n      6 \u6ce8\u610f\u3092\u3059\u308b\n      6 \u663c\u5bdd\u3092\u3059\u308b\n      6 \u90aa\u9b54\u3092\u3059\u308b\n      5 \u8a71\u3092\u805e\u304f\n      5 \u554f\u7b54\u3092\u3059\u308b\n      5 \u75c5\u6c17\u3092\u3059\u308b\n      5 \u76f8\u8ac7\u3092\u3059\u308b\n      5 \u8cea\u554f\u3092\u304b\u3051\u308b\n      5 \u8f9e\u5100\u3092\u3059\u308b\n      4 \u653e\u8569\u3092\u3059\u308b\n      4 \u6226\u4e89\u3092\u3059\u308b\n      4 \u6563\u6b69\u3092\u3059\u308b\n      4 \u964d\u53c2\u3092\u3059\u308b\n      4 \u6b20\u4f38\u3092\u3059\u308b\n      4 \u4f11\u990a\u3092\u8981\u3059\u308b\n      4 \u6f14\u8aac\u3092\u3059\u308b\n      4 \u3044\u305f\u305a\u3089\u3092\u3059\u308b\n```\n\n\u30b3\u30fc\u30d1\u30b9\u4e2d\u3067\u983b\u51fa\u3059\u308b\u8ff0\u8a9e\u3068\u52a9\u8a5e\u30d1\u30bf\u30fc\u30f3\u306e\u5148\u982d\u90e8\u5206\u3067\u3059\u3002\n\n```console:predicate_particle.txt\uff08\u5148\u982d\u90e8\u5206\uff09\n      8 \u771f\u4f3c\u3092\u3059\u308b\t\n      7 \u8fd4\u4e8b\u3092\u3059\u308b\t\u3068\n      6 \u904b\u52d5\u3092\u3059\u308b\t\n      5 \u55a7\u5629\u3092\u3059\u308b\t\n      4 \u8a71\u3092\u805e\u304f\t\n      4 \u8a71\u3092\u3059\u308b\t\n      4 \u8fd4\u4e8b\u3092\u3059\u308b\t\u3068 \u306f\n      4 \u6328\u62f6\u3092\u3059\u308b\t\u3068\n      4 \u6328\u62f6\u3092\u3059\u308b\t\u304b\u3089\n      3 \u8fd4\u4e8b\u3092\u3059\u308b\t\n      3 \u8cea\u554f\u3092\u304b\u3051\u308b\t\u3068 \u306f\n      3 \u55a7\u5629\u3092\u3059\u308b\t\u3068\n      2 \u554f\u7b54\u3092\u3059\u308b\t\n      2 \u653e\u8569\u3092\u3059\u308b\t\n      2 \u8fd4\u4e8b\u3092\u3059\u308b\t\u304b\u3089 \u3068\n      2 \u5e73\u5747\u3092\u7834\u308b\t\n      2 \u75c5\u6c17\u3092\u3059\u308b\t\n      2 \u540c\u60c5\u3092\u8868\u3059\t\u306b\n      2 \u6ce8\u610f\u3092\u60f9\u304f\t\n      2 \u6ce8\u610f\u3092\u3059\u308b\t\n      2 \u6df1\u5165\u308a\u3092\u3059\u308b\t\n      2 \u5199\u751f\u3092\u3059\u308b\t\n      2 \u6563\u6b69\u3092\u3059\u308b\t\n      2 \u8b1b\u7fa9\u3092\u3059\u308b\t\n      2 \u884c\u52d5\u3092\u3068\u308b\t\n      2 \u5de5\u592b\u3092\u3059\u308b\t\n      2 \u4ea4\u969b\u3092\u3059\u308b\t\n      2 \u5fa1\u7121\u6c99\u6c70\u3092\u3059\u308b\t\n      2 \u4f11\u990a\u3092\u8981\u3059\u308b\t\u306f\n      2 \u8b70\u8ad6\u3092\u3059\u308b\t\u3066\n      2 \u5b66\u554f\u3092\u3059\u308b\t\n      2 \u899a\u609f\u3092\u3059\u308b\t\u3068\n      2 \u904b\u52d5\u3092\u3084\u308b\t\n      2 \u5b89\u5fc3\u3092\u5f97\u308b\t\u304c\n      2 \u6328\u62f6\u3092\u3059\u308b\t\u3068 \u3082\n      2 \u6328\u62f6\u3092\u3059\u308b\t\u3067\n      2 \u6328\u62f6\u3092\u3059\u308b\t\n      2 \u3044\u305f\u305a\u3089\u3092\u3059\u308b\t\n```\n\n\u7d50\u679c\u5168\u4f53\u306f[GitHub](https://github.com/segavvy/nlp100_Python/tree/master/47)\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n###\u8ff0\u8a9e\u306b\u4fc2\u308b\u52a9\u8a5e\u304c1\u3064\u3057\u304b\u306a\u3044\u5834\u5408\u306e\u6271\u3044\n\nChunk\u30af\u30e9\u30b9\u306b`get_sahen_wo()`\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u6587\u7bc0\u306e\u4e2d\u306b\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092\uff08\u52a9\u8a5e\uff09\u300d\u304c\u3042\u308b\u5834\u5408\u306b\u3001\u305d\u306e\u8868\u5c64\u5f62\u3092\u8fd4\u3057\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u306f[\u524d\u554f](http://qiita.com/segavvy/items/25511a18ad7928e3982f)\u306e\u307e\u307e\u3067\u3059\u3002\n\n\u3053\u306e\u554f\u984c\u3067\u60a9\u3093\u3060\u306e\u306f\u3001\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092\uff08\u52a9\u8a5e\uff09\u300d\u306e\u6587\u7bc0\u4ee5\u5916\u306b\u3001\u52d5\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u306b\u4fc2\u308b\u6587\u7bc0\u304c\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u6271\u3044\u3067\u3059\u3002\u9664\u53bb\u3059\u3079\u304d\u306a\u306e\u304b\u826f\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u300c\u30b5\u5909\u63a5\u7d9a\u540d\u8a5e+\u3092\uff08\u52a9\u8a5e\uff09\u300d\u306e\u6587\u7bc0\u3057\u304b\u52d5\u8a5e\u306b\u4fc2\u308b\u6587\u7bc0\u304c\u306a\u3044\u3082\u306e\u3082\u6b8b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u30bf\u30d6\u533a\u5207\u308a\u306e2\u30ab\u30e9\u30e0\u76ee\u30683\u30ab\u30e9\u30e0\u76ee\u304c\u7a7a\u6587\u5b57\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n\n###\u6a5f\u80fd\u52d5\u8a5e\u3068\u306f\n\n\u52d5\u8a5e\u3060\u3051\u3067\u306f\u5185\u5bb9\u304c\u308f\u304b\u3089\u305a\u3001\u540d\u8a5e\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u5185\u5bb9\u304c\u308f\u304b\u308b\u3088\u3046\u306b\u306a\u308b\u52d5\u8a5e\u3060\u305d\u3046\u3067\u3059\u3002\u78ba\u304b\u306b\u300c\u3059\u308b\u300d\u3060\u3051\u3067\u306f\u5185\u5bb9\u304c\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u300c\u8fd4\u4e8b\u3092\u300d\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u5185\u5bb9\u304c\u5206\u304b\u308a\u307e\u3059\u306d\u3002\u3053\u306e\u3088\u3046\u306a\u52d5\u8a5e\u306e\u3053\u3068\u3067\u3059\u3002\n\n\u3000\n48\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n<hr>\n\n*\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001[100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf](http://www.cl.ecei.tohoku.ac.jp/nlp100/#data)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c5\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f[\u9752\u7a7a\u6587\u5eab](http://www.aozora.gr.jp)\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002*\n", "tags": ["Python", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "Cabocha", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406"]}