{"tags": ["C++", "STL"], "context": " More than 1 year has passed since last update.C++\u3067\u958b\u767a\u3092\u884c\u3046\u4e0a\u3067STL\u306f\u975e\u5e38\u306b\u5f37\u529b\u306a\u6a5f\u80fd\u3067\u3059\u3002\n\u4eca\u56de\u306f\u5b9f\u969b\u306e\u30b2\u30fc\u30e0\u958b\u767a\u306b\u304a\u3051\u308bSTL\u306e\u4f7f\u7528\u4f8b\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\nSTL\u3068\u306f\nC++\u8a00\u8a9e\u306b\u6a19\u6e96\u3067\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u3064\u3067\u3001C++\u8a00\u8a9e\u306b\u3088\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u983b\u7e41\u306b\u7528\u3044\u3089\u308c\u308b\u6c4e\u7528\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3084\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u3067\u3042\u308b\u3002\n\u203bIT\u7528\u8a9e\u8f9e\u5178 Weblio\u8f9e\u66f8\u3088\u308a\u629c\u7c8b\n\u4eca\u56de\u306f\u81ea\u5206\u304c\u30b2\u30fc\u30e0\u958b\u767a\u3067\u3088\u304f\u4f7f\u3046\u9805\u76ee\u3092\u629c\u7c8b\u3057\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\narray\nvector\nlist\nunordered_map\nunordered_set\n\n\narray\n\u56fa\u5b9a\u9577\u914d\u5217\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u305f\u3081\u3001\u901a\u5e38\u306e\u914d\u5217\u3092\u4f7f\u3046\u3088\u308a\u306f\u4f7f\u3044\u3084\u3059\u3044\u3002\n\narray.cpp\n\n#include <iostream>\n#include <array>\n\nint main()\n{\n    std::array<int, 5> n = { 5, 3, 1, 4, 7 };\n    for (size_t i = 0; i < n.size(); ++i) {\n        std::cout << n[i] << std::endl;\n    }\n\n    for (auto i : n) {\n        std::cout << i << std::endl;\n    }\n\n    for (auto it = std::begin(n); it != std::end(n); ++it) {\n        std::cout << *it << std::endl;\n    }\n}\n\n\n\n\nvector\n\u53ef\u5909\u9577\u914d\u5217\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u9023\u7d9a\u3055\u308c\u305f\u9818\u57df\u3092\u7d04\u675f\u3055\u308c\u3066\u304a\u308a\u3001\u30b2\u30fc\u30e0\u3067\u306f\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3084\u30c6\u30ad\u30b9\u30c8\u3092\u884c\u5358\u4f4d\u3067\u8aad\u307f\u8fbc\u307f\u306a\u3069\u3067\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u3002\n\u30fb\u5f97\u610f\n\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u304c\u9ad8\u901f\n\u4e8b\u524d\u306b\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3066\u3042\u308b\u306e\u3067\u3042\u308c\u3070\u5f8c\u65b9\u8ffd\u52a0\u304c\u9ad8\u901f\n\u30fb\u4e0d\u5f97\u610f\n\u524d\u65b9\u633f\u5165\u3001\u9014\u4e2d\u633f\u5165\u306e\u30b3\u30b9\u30c8\u304c\u5927\u304d\u3044\n\u4f7f\u7528\u4f8b\n\nvector.cpp\n\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n\nclass File\n{\npublic :\n    // \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n    static std::vector<char> ReadAllBytes(const std::string& path)\n    {\n        FILE* fp = std::fopen(path.c_str(), \"rb\");\n        if (fp == nullptr) return std::vector<char>();\n        std::fseek(fp, 0, SEEK_END);\n        std::vector<char> buffer(ftell(fp));\n        std::fseek(fp, 0, SEEK_SET);\n        std::fread(&buffer[0], sizeof(char), buffer.size(), fp);\n        std::fclose(fp);\n\n        return buffer;\n    }\n\n    // \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n    static std::string ReadAllText(const std::string& path)\n    {\n        FILE* fp = std::fopen(path.c_str(), \"rb\");\n        if (fp == nullptr) return std::string();\n        std::fseek(fp, 0, SEEK_END);\n        std::string ret;\n        size_t length = ftell(fp);\n        ret.resize(ftell(fp));\n        std::fseek(fp, 0, SEEK_SET);\n        std::fread(&ret[0], sizeof(char), ret.length(), fp);\n        std::fclose(fp);\n\n        return ret;\n    }\n\n    // \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30e9\u30a4\u30f3\u5206\u89e3\u3057\u3066\u8aad\u307f\u8fbc\u3080\n    static std::vector<std::string> ReadAllLines(const std::string& path)\n    {\n        // \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n        auto str = File::ReadAllText(path);\n        if (str.empty()) return std::vector<std::string>();\n\n        // \u6539\u884c\u6570\u3092\u53d6\u5f97\n        size_t count = std::count(std::begin(str), std::end(str), '\\n');\n        if (str[str.length() - 1] != '\\n') ++count;\n\n        // \u623b\u3059\u5909\u6570\u3092\u8a2d\u5b9a\n        std::vector<std::string> ret;\n        ret.reserve(count);\n\n        // \u74b0\u5883\u306b\u3088\u3063\u3066\u6539\u884c\u30b3\u30fc\u30c9\u5909\u66f4\n        static const std::string token = \"\\r\\n\";\n\n        // \u5206\u89e3\u51e6\u7406\n        const char* src = str.c_str();\n        const char* end = str.c_str() + str.length();\n        while (src < end) {\n            const char* pp = std::strstr(src, token.c_str());\n            if (pp == nullptr) {\n                ret.push_back(std::string(src, end));\n                break;\n            }\n            ret.push_back(std::string(src, pp - src));\n            src = pp + token.length();\n        }\n\n        return ret;\n    }\n};\n\nint main()\n{\n    auto png_buffer = File::ReadAllBytes(\"test.png\");\n    auto text= File::ReadAllText(\"test.txt\");\n    auto lines = File::ReadAllLines(\"test.txt\");\n}\n\n\n\n\nlist\n\u53cc\u65b9\u5411\u30ea\u30b9\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u3067\u6575\u3084\u5f3e\u306e\u7ba1\u7406\u306a\u3069\u3001\u8ffd\u52a0\u3001\u524a\u9664\u304c\u591a\u3005\u884c\u308f\u308c\u308b\u5185\u5bb9\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002\n\u30fb\u5f97\u610f\n\u8ffd\u52a0\u3001\u524a\u9664\n\u30fb\u4e0d\u5f97\u610f\n\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u304c\u82e6\u624b\n\u4f7f\u7528\u4f8b\n\nlist.cpp\n\n#include <list>\n\n/*!\n * @brief \u5f3e\n */\nclass Bullet\n{\npublic :\n    /*!\n     * @brief \u7a2e\u985e\n     */\n    enum class Type\n    {\n    };\n\n    /*!\n     * @brief \u30d2\u30c3\u30c8\u306e\u7a2e\u985e\n     */\n    enum class HitType\n    {\n        Player,\n        Enemy,\n    };\n\n    Bullet(Type type, HitType hit_type, int x, int y)\n        : type_(type), hit_type_(hit_type), x_(x), y_(y)\n    {\n    }\n\n    bool Update()\n    {\n        // \u30bf\u30a4\u30d7\u306b\u3088\u3063\u3066\u98db\u3070\u3057\u65b9\u3092\u5909\u66f4\n\n\n        // \u5f3e\u3092\u524a\u9664\u3057\u305f\u5834\u5408\u306ffalse\u3092\u8fd4\u3059\n        if (end_) {\n            return false;\n        }\n\n        return true;\n    }\n\nprivate :\n    Type type_;\n    HitType hit_type_;\n    int x_;\n    int y_;\n    bool end_ = false;\n};\n\n/*!\n* @brief \u5f3e\u306e\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\n*/\nclass BulletManager\n{\npublic :\n    /*!\n    * @brief \u5f3e\u306e\u4f5c\u6210\n    */\n    void Create(Bullet::Type type, Bullet::HitType hit_type, int x, int y)\n    {\n        Bullet bullet(type, hit_type, x, y);\n        bullet_.push_back(bullet);\n    }\n\n    /*!\n    * @brief \u66f4\u65b0\n    */\n    void Update()\n    {\n        // \u66f4\u65b0\u3057\u3001\u5f3e\u304c\u524a\u9664\u3055\u308c\u305f\u5834\u5408\u306f\u30ea\u30b9\u30c8\u304b\u3089\u6d88\u3059\n        for (auto it = std::begin(bullet_); it != std::end(bullet_);) {\n            if (!it->Update()) {\n                it = bullet_.erase(it);\n            } else {\n                ++it;\n            }\n        }\n    }\n\nprivate :\n    std::list<Bullet> bullet_;\n};\n\n\n\nC++\u3067\u958b\u767a\u3092\u884c\u3046\u4e0a\u3067STL\u306f\u975e\u5e38\u306b\u5f37\u529b\u306a\u6a5f\u80fd\u3067\u3059\u3002\n\u4eca\u56de\u306f\u5b9f\u969b\u306e\u30b2\u30fc\u30e0\u958b\u767a\u306b\u304a\u3051\u308bSTL\u306e\u4f7f\u7528\u4f8b\u3092\u8aac\u660e\u3057\u307e\u3059\u3002\n\n##STL\u3068\u306f\nC++\u8a00\u8a9e\u306b\u6a19\u6e96\u3067\u4ed8\u5c5e\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e00\u3064\u3067\u3001C++\u8a00\u8a9e\u306b\u3088\u308b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u983b\u7e41\u306b\u7528\u3044\u3089\u308c\u308b\u6c4e\u7528\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3084\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u3067\u3042\u308b\u3002\n\u203bIT\u7528\u8a9e\u8f9e\u5178 Weblio\u8f9e\u66f8\u3088\u308a\u629c\u7c8b\n\n\u4eca\u56de\u306f\u81ea\u5206\u304c\u30b2\u30fc\u30e0\u958b\u767a\u3067\u3088\u304f\u4f7f\u3046\u9805\u76ee\u3092\u629c\u7c8b\u3057\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n- array\n- vector\n- list\n- unordered_map\n- unordered_set\n\n###array\n\u56fa\u5b9a\u9577\u914d\u5217\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u305f\u3081\u3001\u901a\u5e38\u306e\u914d\u5217\u3092\u4f7f\u3046\u3088\u308a\u306f\u4f7f\u3044\u3084\u3059\u3044\u3002\n\n```cpp:array.cpp\n\n#include <iostream>\n#include <array>\n\nint main()\n{\n\tstd::array<int, 5> n = { 5, 3, 1, 4, 7 };\n\tfor (size_t i = 0; i < n.size(); ++i) {\n\t\tstd::cout << n[i] << std::endl;\n\t}\n\n\tfor (auto i : n) {\n\t\tstd::cout << i << std::endl;\n\t}\n\n\tfor (auto it = std::begin(n); it != std::end(n); ++it) {\n\t\tstd::cout << *it << std::endl;\n\t}\n}\n\n```\n\n###vector\n\u53ef\u5909\u9577\u914d\u5217\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u9023\u7d9a\u3055\u308c\u305f\u9818\u57df\u3092\u7d04\u675f\u3055\u308c\u3066\u304a\u308a\u3001\u30b2\u30fc\u30e0\u3067\u306f\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3084\u30c6\u30ad\u30b9\u30c8\u3092\u884c\u5358\u4f4d\u3067\u8aad\u307f\u8fbc\u307f\u306a\u3069\u3067\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u3002\n\n\u30fb\u5f97\u610f\n\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u304c\u9ad8\u901f\n\u4e8b\u524d\u306b\u9818\u57df\u3092\u78ba\u4fdd\u3057\u3066\u3042\u308b\u306e\u3067\u3042\u308c\u3070\u5f8c\u65b9\u8ffd\u52a0\u304c\u9ad8\u901f\n\n\u30fb\u4e0d\u5f97\u610f\n\u524d\u65b9\u633f\u5165\u3001\u9014\u4e2d\u633f\u5165\u306e\u30b3\u30b9\u30c8\u304c\u5927\u304d\u3044\n\n\u4f7f\u7528\u4f8b\n\n```cpp:vector.cpp\n\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <algorithm>\n\nclass File\n{\npublic :\n\t// \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n\tstatic std::vector<char> ReadAllBytes(const std::string& path)\n\t{\n\t\tFILE* fp = std::fopen(path.c_str(), \"rb\");\n\t\tif (fp == nullptr) return std::vector<char>();\n\t\tstd::fseek(fp, 0, SEEK_END);\n\t\tstd::vector<char> buffer(ftell(fp));\n\t\tstd::fseek(fp, 0, SEEK_SET);\n\t\tstd::fread(&buffer[0], sizeof(char), buffer.size(), fp);\n\t\tstd::fclose(fp);\n\n\t\treturn buffer;\n\t}\n\n\t// \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n\tstatic std::string ReadAllText(const std::string& path)\n\t{\n\t\tFILE* fp = std::fopen(path.c_str(), \"rb\");\n\t\tif (fp == nullptr) return std::string();\n\t\tstd::fseek(fp, 0, SEEK_END);\n\t\tstd::string ret;\n\t\tsize_t length = ftell(fp);\n\t\tret.resize(ftell(fp));\n\t\tstd::fseek(fp, 0, SEEK_SET);\n\t\tstd::fread(&ret[0], sizeof(char), ret.length(), fp);\n\t\tstd::fclose(fp);\n\n\t\treturn ret;\n\t}\n\n\t// \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30e9\u30a4\u30f3\u5206\u89e3\u3057\u3066\u8aad\u307f\u8fbc\u3080\n\tstatic std::vector<std::string> ReadAllLines(const std::string& path)\n\t{\n\t\t// \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n\t\tauto str = File::ReadAllText(path);\n\t\tif (str.empty()) return std::vector<std::string>();\n\n\t\t// \u6539\u884c\u6570\u3092\u53d6\u5f97\n\t\tsize_t count = std::count(std::begin(str), std::end(str), '\\n');\n\t\tif (str[str.length() - 1] != '\\n') ++count;\n\n\t\t// \u623b\u3059\u5909\u6570\u3092\u8a2d\u5b9a\n\t\tstd::vector<std::string> ret;\n\t\tret.reserve(count);\n\n\t\t// \u74b0\u5883\u306b\u3088\u3063\u3066\u6539\u884c\u30b3\u30fc\u30c9\u5909\u66f4\n\t\tstatic const std::string token = \"\\r\\n\";\n\n\t\t// \u5206\u89e3\u51e6\u7406\n\t\tconst char* src = str.c_str();\n\t\tconst char* end = str.c_str() + str.length();\n\t\twhile (src < end) {\n\t\t\tconst char* pp = std::strstr(src, token.c_str());\n\t\t\tif (pp == nullptr) {\n\t\t\t\tret.push_back(std::string(src, end));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tret.push_back(std::string(src, pp - src));\n\t\t\tsrc = pp + token.length();\n\t\t}\n\n\t\treturn ret;\n\t}\n};\n\nint main()\n{\n\tauto png_buffer = File::ReadAllBytes(\"test.png\");\n\tauto text= File::ReadAllText(\"test.txt\");\n\tauto lines = File::ReadAllLines(\"test.txt\");\n}\n\n```\n\n\n###list\n\u53cc\u65b9\u5411\u30ea\u30b9\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u3067\u6575\u3084\u5f3e\u306e\u7ba1\u7406\u306a\u3069\u3001\u8ffd\u52a0\u3001\u524a\u9664\u304c\u591a\u3005\u884c\u308f\u308c\u308b\u5185\u5bb9\u306b\u9069\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30fb\u5f97\u610f\n\u8ffd\u52a0\u3001\u524a\u9664\n\n\u30fb\u4e0d\u5f97\u610f\n\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u304c\u82e6\u624b\n\n\u4f7f\u7528\u4f8b\n\n```cpp:list.cpp\n\n#include <list>\n\n/*!\n * @brief \u5f3e\n */\nclass Bullet\n{\npublic :\n\t/*!\n\t * @brief \u7a2e\u985e\n\t */\n\tenum class Type\n\t{\n\t};\n\n\t/*!\n\t * @brief \u30d2\u30c3\u30c8\u306e\u7a2e\u985e\n\t */\n\tenum class HitType\n\t{\n\t\tPlayer,\n\t\tEnemy,\n\t};\n\n\tBullet(Type type, HitType hit_type, int x, int y)\n\t\t: type_(type), hit_type_(hit_type), x_(x), y_(y)\n\t{\n\t}\n\n\tbool Update()\n\t{\n\t\t// \u30bf\u30a4\u30d7\u306b\u3088\u3063\u3066\u98db\u3070\u3057\u65b9\u3092\u5909\u66f4\n\n\n\t\t// \u5f3e\u3092\u524a\u9664\u3057\u305f\u5834\u5408\u306ffalse\u3092\u8fd4\u3059\n\t\tif (end_) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\nprivate :\n\tType type_;\n\tHitType hit_type_;\n\tint x_;\n\tint y_;\n\tbool end_ = false;\n};\n\n/*!\n* @brief \u5f3e\u306e\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\n*/\nclass BulletManager\n{\npublic :\n\t/*!\n\t* @brief \u5f3e\u306e\u4f5c\u6210\n\t*/\n\tvoid Create(Bullet::Type type, Bullet::HitType hit_type, int x, int y)\n\t{\n\t\tBullet bullet(type, hit_type, x, y);\n\t\tbullet_.push_back(bullet);\n\t}\n\n\t/*!\n\t* @brief \u66f4\u65b0\n\t*/\n\tvoid Update()\n\t{\n\t\t// \u66f4\u65b0\u3057\u3001\u5f3e\u304c\u524a\u9664\u3055\u308c\u305f\u5834\u5408\u306f\u30ea\u30b9\u30c8\u304b\u3089\u6d88\u3059\n\t\tfor (auto it = std::begin(bullet_); it != std::end(bullet_);) {\n\t\t\tif (!it->Update()) {\n\t\t\t\tit = bullet_.erase(it);\n\t\t\t} else {\n\t\t\t\t++it;\n\t\t\t}\n\t\t}\n\t}\n\nprivate :\n\tstd::list<Bullet> bullet_;\n};\n\n```\n"}