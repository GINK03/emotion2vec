{"context": "RealmDB\u3092\u6697\u53f7\u5316\u3057\u5229\u7528\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001iPhone\u304c\u30b9\u30ea\u30fc\u30d7\u72b6\u614b\u306e\u6642\u306b\u30ad\u30fc\u30c1\u30a7\u30fc\u30f3\u304c\u8aad\u307f\u8fbc\u3081\u305a\u30b3\u30b1\u3066\u304a\u308a\u307e\u3057\u305f\u3002\n\u89e3\u6c7a\u65b9\u6cd5\u304c\u308f\u304b\u3063\u305f\u306e\u3067\u8a18\u8f09\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u7c21\u5358\u306b\u8a00\u3046\u3068Keychain Services\u5185\u306b\u683c\u7d0d\u3057\u305f\u60c5\u5831\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30ed\u30c3\u30af\u72b6\u614b\uff08\u30b9\u30ea\u30fc\u30d7\u6642\uff09\u306b\u306f\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u306a\u3044\u305f\u3081\u3001kSecAttrAccessibleAfterFirstUnlock \u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u306e\u3053\u3068\u3002\n\u5177\u4f53\u7684\u306a\u65b9\u6cd5\u306f\u3001\u30ad\u30fc\u30c1\u30a7\u30fc\u30f3\u4f5c\u6210\u6642\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u300ckSecAttrAccessible: kSecAttrAccessibleAfterFirstUnlock\u300d\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3002\n\nEncryptionClass\nimport Security\n\n\nclass EncryptionClass {\n\n    class func getKey() -> NSData {\n        // Identifier for our keychain entry - should be unique for your application\n        let keychainIdentifier = \"io.Realm.EncryptionExampleKey\"\n        let keychainIdentifierData = keychainIdentifier.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!\n\n        // First check in the keychain for an existing key\n        var query: [NSString: AnyObject] = [\n            kSecClass: kSecClassKey,\n            kSecAttrApplicationTag: keychainIdentifierData,\n            kSecAttrKeySizeInBits: 512,\n            kSecReturnData: true,\n        ]\n\n        // To avoid Swift optimization bug, should use withUnsafeMutablePointer() function to retrieve the keychain item\n        // See also: http://stackoverflow.com/questions/24145838/querying-ios-keychain-using-swift/27721328#27721328\n        var dataTypeRef: AnyObject?\n        var status = withUnsafeMutablePointer(&dataTypeRef) { SecItemCopyMatching(query, UnsafeMutablePointer($0)) }\n        if status == errSecSuccess {\n            return dataTypeRef as! NSData\n        }\n\n        // No pre-existing key from this application, so generate a new one\n        let keyData = NSMutableData(length: 64)!\n        let result = SecRandomCopyBytes(kSecRandomDefault, 64, UnsafeMutablePointer<UInt8>(keyData.mutableBytes))\n        assert(result == 0, \"Failed to get random bytes\")\n        print(keyData)\n\n        // Store the key in the keychain\n        query = [\n            kSecClass: kSecClassKey,\n            kSecAttrApplicationTag: keychainIdentifierData,\n            kSecAttrKeySizeInBits: 512,\n            kSecValueData: keyData,\n            kSecAttrAccessible: kSecAttrAccessibleAfterFirstUnlock  // \u3053\u308c\u3092\u8ffd\u52a0\n        ]\n\n        status = SecItemAdd(query, nil)\n        assert(status == errSecSuccess, \"Failed to insert the new key in the keychain\")\n\n        return keyData\n    }\n}\n\n\n\u3053\u3046\u3044\u3046\u554f\u984c\u306f\u89e3\u6c7a\u3057\u3066\u307f\u308b\u3068\u306a\u3093\u3066\u4e8b\u306a\u3044\u4e8b\u304c\u591a\u3044\u3067\u3059\u3002\n\u53c2\u8003\u30b5\u30a4\u30c8\n[iOS] Keychain Services \u3068\u306f\nKeychain Services Reference\nRealmDB\u3092\u6697\u53f7\u5316\u3057\u5229\u7528\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001iPhone\u304c\u30b9\u30ea\u30fc\u30d7\u72b6\u614b\u306e\u6642\u306b\u30ad\u30fc\u30c1\u30a7\u30fc\u30f3\u304c\u8aad\u307f\u8fbc\u3081\u305a\u30b3\u30b1\u3066\u304a\u308a\u307e\u3057\u305f\u3002\n\u89e3\u6c7a\u65b9\u6cd5\u304c\u308f\u304b\u3063\u305f\u306e\u3067\u8a18\u8f09\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u7c21\u5358\u306b\u8a00\u3046\u3068Keychain Services\u5185\u306b\u683c\u7d0d\u3057\u305f\u60c5\u5831\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30ed\u30c3\u30af\u72b6\u614b\uff08\u30b9\u30ea\u30fc\u30d7\u6642\uff09\u306b\u306f\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u306a\u3044\u305f\u3081\u3001kSecAttrAccessibleAfterFirstUnlock \u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u306e\u3053\u3068\u3002\n\n\u5177\u4f53\u7684\u306a\u65b9\u6cd5\u306f\u3001\u30ad\u30fc\u30c1\u30a7\u30fc\u30f3\u4f5c\u6210\u6642\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u300ckSecAttrAccessible: kSecAttrAccessibleAfterFirstUnlock\u300d\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3002\n\n```lang:EncryptionClass\nimport Security\n\n\nclass EncryptionClass {\n\n\tclass func getKey() -> NSData {\n\t\t// Identifier for our keychain entry - should be unique for your application\n\t\tlet keychainIdentifier = \"io.Realm.EncryptionExampleKey\"\n\t\tlet keychainIdentifierData = keychainIdentifier.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)!\n\n\t\t// First check in the keychain for an existing key\n\t\tvar query: [NSString: AnyObject] = [\n\t\t\tkSecClass: kSecClassKey,\n\t\t\tkSecAttrApplicationTag: keychainIdentifierData,\n\t\t\tkSecAttrKeySizeInBits: 512,\n\t\t\tkSecReturnData: true,\n\t\t]\n\n\t\t// To avoid Swift optimization bug, should use withUnsafeMutablePointer() function to retrieve the keychain item\n\t\t// See also: http://stackoverflow.com/questions/24145838/querying-ios-keychain-using-swift/27721328#27721328\n\t\tvar dataTypeRef: AnyObject?\n\t\tvar status = withUnsafeMutablePointer(&dataTypeRef) { SecItemCopyMatching(query, UnsafeMutablePointer($0)) }\n\t\tif status == errSecSuccess {\n\t\t\treturn dataTypeRef as! NSData\n\t\t}\n\n\t\t// No pre-existing key from this application, so generate a new one\n\t\tlet keyData = NSMutableData(length: 64)!\n\t\tlet result = SecRandomCopyBytes(kSecRandomDefault, 64, UnsafeMutablePointer<UInt8>(keyData.mutableBytes))\n\t\tassert(result == 0, \"Failed to get random bytes\")\n\t\tprint(keyData)\n\n\t\t// Store the key in the keychain\n\t\tquery = [\n\t\t\tkSecClass: kSecClassKey,\n\t\t\tkSecAttrApplicationTag: keychainIdentifierData,\n\t\t\tkSecAttrKeySizeInBits: 512,\n\t\t\tkSecValueData: keyData,\n\t\t\tkSecAttrAccessible: kSecAttrAccessibleAfterFirstUnlock  // \u3053\u308c\u3092\u8ffd\u52a0\n\t\t]\n\n\t\tstatus = SecItemAdd(query, nil)\n\t\tassert(status == errSecSuccess, \"Failed to insert the new key in the keychain\")\n\n\t\treturn keyData\n\t}\n}\n```\n\n\u3053\u3046\u3044\u3046\u554f\u984c\u306f\u89e3\u6c7a\u3057\u3066\u307f\u308b\u3068\u306a\u3093\u3066\u4e8b\u306a\u3044\u4e8b\u304c\u591a\u3044\u3067\u3059\u3002\n\n*\u53c2\u8003\u30b5\u30a4\u30c8*\n[[iOS] Keychain Services \u3068\u306f](http://cocoadays.blogspot.jp/2011/02/ios-keychain-services.html)\n[Keychain Services Reference](https://developer.apple.com/library/ios/documentation/Security/Reference/keychainservices/index.html#//apple_ref/doc/constant_group/Keychain_Item_Accessibility_Constants)\n", "tags": ["Swift2.2", "Realm", "Swift", "iOS"]}