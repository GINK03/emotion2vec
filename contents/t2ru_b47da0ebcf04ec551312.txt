{"tags": ["Clojure1.5.1"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\nsmm/core.clj\n(ns smm.core\n  (:refer-clojure :exclude [==])\n  (:use [clojure.core.logic])\n  (:require [clojure.core.logic.fd :as fd]))\n\n;;;   S E N D\n;;; + M O R E\n;;; ---------\n;;; M O N E Y\n\n(defn digitso [nums n]\n  (fresh [h t]\n    (conso h t nums)\n    (conde\n      [(emptyo t) (== h n)]\n      [(fresh [n0 nn]\n         (fd/* nn 10 n0)\n         (fd/+ n0 h n)\n         (digitso t nn))])))\n\n(defn solve []\n  (run 2 [q]\n    (fresh [s e n d m o r y send more money]\n      (fd/in s e n d m o r y (fd/domain 0 1 2 3 4 5 6 7 8 9))\n      (fd/!= s 0) (fd/!= m 0)\n      (fd/distinct [s e n d m o r y])\n      (digitso [d n e s] send)\n      (digitso [e r o m] more)\n      (digitso [y e n o m] money)\n      (fd/+ send more money)\n      (== q [s e n d '+ m o r e '=  m o n e y]))))\n\n\nuser=> (use 'smm.core)\nuser=> (solve)\n([9 5 6 7 + 1 0 8 5 = 1 0 6 5 2])\n\n```clojure:smm/core.clj\n(ns smm.core\n  (:refer-clojure :exclude [==])\n  (:use [clojure.core.logic])\n  (:require [clojure.core.logic.fd :as fd]))\n\n;;;   S E N D\n;;; + M O R E\n;;; ---------\n;;; M O N E Y\n\n(defn digitso [nums n]\n  (fresh [h t]\n    (conso h t nums)\n    (conde\n      [(emptyo t) (== h n)]\n      [(fresh [n0 nn]\n         (fd/* nn 10 n0)\n         (fd/+ n0 h n)\n         (digitso t nn))])))\n\n(defn solve []\n  (run 2 [q]\n    (fresh [s e n d m o r y send more money]\n      (fd/in s e n d m o r y (fd/domain 0 1 2 3 4 5 6 7 8 9))\n      (fd/!= s 0) (fd/!= m 0)\n      (fd/distinct [s e n d m o r y])\n      (digitso [d n e s] send)\n      (digitso [e r o m] more)\n      (digitso [y e n o m] money)\n      (fd/+ send more money)\n      (== q [s e n d '+ m o r e '=  m o n e y]))))\n```\n\n```\nuser=> (use 'smm.core)\nuser=> (solve)\n([9 5 6 7 + 1 0 8 5 = 1 0 6 5 2])\n```"}