{"context": "\n\n\u521d\u5fc3\u8005C++Advent Calendar 2016\n\u3053\u306e\u8a18\u4e8b\u306f\u521d\u5fc3\u8005C++Advent Calendar 2016 15\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\n<< 14\u65e5\u76ee | \u30dd\u30a4\u30f3\u30bf\u3068\u4ef2\u826f\u304f\u306a\u308b\u8a71 \u3010\u521d\u5fc3\u8005C++er Advent Calendar 2016 - 14\u65e5\u76ee\u3011 - \u3092\u308b\u3075\u3061\u3083\u3093\u306e\u30d6\u30ed\u30b0 || 16\u65e5\u76ee | C++\u306e\u4e71\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f7f\u3044\u306b\u304f\u3044\u8a71 >>\n\u9045\u523b\u3057\u3066\u3059\u307f\u307e\u305b\u3093\u3002\nDxLib\u89e3\u5256\u5b66LoadSoundMem\u3068LoadBGM - DxLibEx Research Notes\n\u3092\u66f8\u304f\u305f\u3081\u306e\u8abf\u67fb\u3092\u3057\u3066\u3044\u305f\u3089\u3001\u76f8\u5f53\u6642\u9593\u3092\u53d6\u3089\u308c\u307e\u3057\u305f\u3002\n\u4eca\u56de\u521d\u5fc3\u8005AdC\u306f\u306a\u3093\u304b\u904e\u758e\u3063\u3066\u307e\u3059\u306d\u3047\u30fb\u30fb\u30fb\u3002\u307b\u3093\u308f\u304b\u3057\u305f\u8a18\u4e8b\u304c\u591a\u3044\u4e2d\u3001\u30cf\u30ed\u30fc\u30ef\u30fc\u30eb\u30c9\u5fb9\u5e95\u89e3\u8aac\u3068\u3044\u3046\u30e4\u30d0\u305d\u3046\u306a\u8a18\u4e8b\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u3001\u3044\u3064\u3082\u306e\u3053\u3068\u304b\u3002\n\u53bb\u5e74\u307b\u3069\u521d\u5fc3\u8005\u8a50\u6b3a\u306a\u8a18\u4e8b\u304c\u306a\u3044\u306e\u3067\u3001C++er\u3092\u7c21\u6613\u7684\u306b\u30ec\u30d9\u30eb\u5206\u3051\u3059\u308b\u3053\u3068\u3067\u521d\u5fc3\u8005\u8a50\u6b3a\u3092\u6e1b\u3089\u305d\u3046\u3068\u3044\u3046\u8a66\u307f\u304c\u529f\u3092\u594f\u3057\u305f\u306e\u304b\u306a\u3041\uff1f\u3068\u3053\u3058\u3064\u3051\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u306f\u3058\u3081\u306b\n\u7686\u69d8\u3001\u30ca\u30de\u30b9\u30c6\u3002\n\u4eca\u56de\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u3048\uff1f\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u89e3\u8aac\u3092\u3059\u308b\u306a\u3093\u3066\u4eca\u66f4\u4f73\u4ee3\u3060\u3063\u3066\uff1f\u305d\u308c\u3092\u8a00\u3063\u305f\u3089\u30cd\u30bf\u304c\u306a\u3044\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\u306a\u306b\u3082C++\u306b\u56fa\u6709\u306a\u6982\u5ff5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf - Wikipedia\nhttps://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF\n\u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u82f1\u8a9e: Iterator\uff09\u3068\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306b\u304a\u3044\u3066\u914d\u5217\u3084\u305d\u308c\u306b\u985e\u4f3c\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u7e70\u8fd4\u3057\u51e6\u7406\u306e\u62bd\u8c61\u5316\u3067\u3042\u308b\u3002\u5b9f\u969b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f\u6587\u6cd5\u306a\u3069\u3068\u3057\u3066\u73fe\u308c\u308b\u3002\u53cd\u5fa9\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u306e\u610f\u5473\u3067\u53cd\u5fa9\u5b50\uff08\u306f\u3093\u3077\u304f\u3057\uff09\u3068\u8a33\u3055\u308c\u308b\u3002\u7e70\u8fd4\u5b50\uff08\u304f\u308a\u304b\u3048\u3057\uff09\u3068\u3044\u3046\u4e00\u822c\u7684\u3067\u306f\u306a\u3044\u8a33\u8a9e\u3082\u3042\u308b\u3002\n\n\u4e00\u822c\u306b\u306f\u914d\u5217\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u9806\u756a\u306b\u305f\u3069\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\nC++\u306b\u304a\u3051\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\n\u307e\u3042\u305d\u306e\u6c17\u306b\u306a\u308c\u3070\u306a\u3093\u3067\u3082\u4f5c\u308c\u307e\u3059\u304c\u3001\u4e00\u822c\u7684\u306b\u898b\u304b\u3051\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u305f\u3061\u3092\u3002\n\n\u30b3\u30f3\u30c6\u30ca\u306b\u5bfe\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\n#include <iostream>\n\nstd::array<int, 5> arr{{ 1, 3, 9, 4 }};\nfor(auto it = std::begin(arr); it != std::end(arr); ++it){\n    std::cout << *it << std::endl;\n}\n\nstd::array\u3084std::vector\u3001std::unordered_map\u306b\u4ee3\u8868\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u306f\u30e1\u30f3\u30d0\u95a2\u6570begin()\u3068end()\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e2\u3064\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306fstd::begin()/std::end()\u3092\u4ecb\u3057\u3066\u547c\u3073\u51fa\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u3059\u3059\u3081\u308b\u306b\u306foperator++\u3092\u547c\u3076\u304b\u3001std::next()\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\nC\u5f62\u5f0f\u306e\u914d\u5217\u306b\u5bfe\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\n\u3064\u307e\u308a\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002\n#include <iostream>\n\nint arr[] = { 1, 3, 9, 4 };\nfor(int* it = std::begin(arr); it != std::end(arr); ++it){\n    std::cout << *it << std::endl;\n}\n\n\u914d\u5217\u306e\u9577\u3055\u3092\u6c42\u3081\u3066\u8db3\u3057\u7b97\u3057\u3066\u30fb\u30fb\u30fb\u3068\u3044\u3046\u30b3\u30fc\u30c9\u3092\u81ea\u5206\u3067\u66f8\u304f\u306e\u306f\u3060\u308b\u3044\u306e\u3067\u3001std::begin()/std::end()\u304c\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u540c\u3058\u304f\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\nstream\u306b\u5bfe\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\n\u3053\u308c\u306f\u3042\u307e\u308a\u99b4\u67d3\u307f\u304c\u7121\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306fcpprefjp\u306e\u3082\u306e\u3067\u3059\nistream_iterator - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n\ncpprefjp\u3088\u308a\n#include <iostream>\n#include <iterator>\n#include <sstream>\n#include <algorithm> // for_each\n\nint main()\n{\n  // \u6587\u5b57\u5217\u306e\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\n  std::stringstream ss;\n  ss << 1 << std::endl\n     << 2 << std::endl\n     << 3;\n\n  // \u6587\u5b57\u5217\u306e\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\n  std::istream_iterator<int> it(ss);\n  std::istream_iterator<int> last;\n\n  // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u30c7\u30fc\u30bf\u3092\u9806\u306b\u8aad\u307f\u53d6\u308b\n  std::for_each(it, last, [](int x) {\n    std::cout << x << std::endl;\n  });\n}\n\n\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7a2e\u985e\nEZ-NET: \u72ec\u81ea\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5b9f\u88c5\u3059\u308b - C++ \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\nhttp://program.station.ez-net.jp/special/handbook/cpp/stl/iterator-make.asp\n\u306b\u30ad\u30ec\u30a4\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\ncpprefjp CC-BY\n\u3064\u3044\u3067\u306b\niterator - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\nhttps://cpprefjp.github.io/reference/iterator.html\n\u3082\u898b\u308b\u3068\u3044\u3044\u3067\u3059\u3002\n\nRange-based for\u3068\u30a4\u30c6\u30ec\u30fc\u30bf\n\u30e1\u30f3\u30d0\u95a2\u6570begin()/end()\u3068\u3044\u3046\u306f\u3058\u3081\u3068\u7d42\u308f\u308a\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u3042\u308b\u30af\u30e9\u30b9\u3092\u3001\u7bc4\u56f2\u3092\u6301\u3064\u30af\u30e9\u30b9\u3068\u304bRange Concept\u3092\u6e80\u305f\u3057\u305f\u30af\u30e9\u30b9\u3068\u304b\u8a00\u3044\u307e\u3059\u304c\u3001\u3053\u3046\u3044\u3063\u305f\u30af\u30e9\u30b9\u3084C\u5f62\u5f0f\u306e\u914d\u5217\u306a\u3069\u306fRange-based for\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3064\u307e\u308a\n\nRange-based_for\u4e0d\u4f7f\u7528\n#include <iostream>\n#include <array>\nint main()\n{\n    std::array<int, 3> arr = { 3, 4, 2 };\n    for(auto it = arr.begin(); it != end(); ++it) std::cout << *it << \", \";\n    return 0;\n}\n\n\n\u3053\u308c\u304c\n\nRange-based_for\u4f7f\u7528\n#include <iostream>\n#include <array>\nint main()\n{\n    std::array<int, 3> arr = { 3, 4, 2 };\n    for(auto&& e : arr) std::cout << e << \", \";\n    return 0;\n}\n\n\n\u3053\u3046\u66f8\u3051\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3061\u306a\u307f\u306bauto&&\u306fRange-based for\u3092\u4f7f\u3046\u3068\u304d\u306e\u304a\u307e\u3058\u306a\u3044\u306a\u306e\u3067\u3001\u304a\u307e\u3058\u306a\u3044\u306e\u539f\u7406\u306b\u3064\u3044\u3066\u306f\n\nrange-based for loops\u306e\u8981\u7d20\u306e\u578b\u306b\u3064\u3044\u3066\nC99\u304b\u3089C++14\u3092\u99c6\u3051\u629c\u3051\u308bC++\u8b1b\u5ea7 - Qiita\n\n\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\u3061\u306a\u307f\u306b\u7d30\u5de5\u306a\u3057\u3067\u66f8\u3051\u308b\u30c8\u30ea\u30c3\u30ad\u30fc\u306aRange-based for\u306e\u4f7f\u3044\u65b9\u3068\u3057\u3066\u306f\n\n\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306fC\u5f62\u5f0f\u306e\u914d\u5217\u578b\n#include <iostream>\nint main()\n{\n    for(auto&& c : \"arikitari\") std::cout << c << std::endl;\n}\n\n\nhttp://melpon.org/wandbox/permlink/eqnh68PPOp4Qh1Am\n\ninitizer_list\u306fRangeConcept\u3092\u6e80\u305f\u3059\n#include <iostream>\nint main()\n{\n    for(auto&& n : { 13, 32 }) std::cout << n << std::endl;\n}\n\n\nhttp://melpon.org/wandbox/permlink/8e1sxPN3Kq5I2Zg2\n\u306a\u3093\u304b\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30e9\u30c3\u30d7\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\n\nstruct Circle {  Vec2f pos;  float size;}vector<Circle> circles;\u3053\u306ecircles\u304b\u3089Vec2f* (pos\u306e\u307f\u306e\u914d\u5217\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u307b\u3061\u3044\u2014 Yanai\uff20\u3075\u3061\u3083\u304d\u3061Love (@Lost206) 2016\u5e7411\u67084\u65e5\n\n\u4f8b\u3048\u3070openFrameworks\u307f\u305f\u3044\u306b\nstruct Vec2f{\n    float x; float y;\n};\nstruct Circle {\n    Vec2f pos;\n    float size;\n};\n\n\u3053\u3093\u306a\u30af\u30e9\u30b9\u304c\u3042\u308b\u3068\u3057\u307e\u3059\u3002\u3055\u3066\u3001\nstd::vector<Circle> circles;\n\n\u3053\u3093\u306a\u3075\u3046\u306bvector\u306b\u5165\u308c\u3066\u7ba1\u7406\u3057\u3066\u3044\u305f\u3068\u3057\u3066\u3001pos\u3092\u53d6\u3063\u3066\u304f\u308b\u306e\u306b\nstd::vector<Circle> circles;\nfor(auto& c : circles){\n    auto& p = c.pos;\n    std::cout << p.x << p.y << std::endl;\n}\n\n\u306e\u3088\u3046\u306b\u3059\u308b\u306e\u306f\u3060\u308b\u3044\u3001\u3069\u306e\u304f\u3089\u3044\u3060\u308b\u3044\u304b\u3068\u3044\u3046\u3068(ry\u3002\n\u6700\u521d\u304b\u3089Circle::size\u306a\u3093\u304b\u7121\u8996\u3057\u3066Circle::pos\u3060\u3051\u307b\u3057\u3044\u3002\n\u3064\u307e\u308a\u305d\u306e\u3088\u3046\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u81ea\u4f5c\u3059\u308c\u3070\u3044\u3044\u3093\u3067\u3059\u306d\u3002\n\nstd::iterator\u306f\u975e\u63a8\u5968\u306b\u306a\u3063\u305f\u304b\u3089\u7d99\u627f\u3057\u3066\u306f\u3044\u3051\u306a\u3044\n\u3053\u3053\u3067\u6ce8\u610f\u70b9\u304c\u3042\u308a\u307e\u3059\n\nC++1z \u53e4\u304f\u306a\u3063\u305f\u6a5f\u80fd\u3092\u975e\u63a8\u5968\u5316 - Faith and Brave - C++\u3067\u904a\u307c\u3046\nC++1z\u304b\u3089\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u304c\u975e\u63a8\u5968\u3068\u306a\u308a\u307e\u3059\u3002\u975e\u63a8\u5968\u3068\u306a\u3063\u305f\u6a5f\u80fd\u306f\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u524a\u9664\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\nstd::iterator\u30af\u30e9\u30b9\n\u81ea\u4f5c\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\u3068\u304d\u306b\u57fa\u672c\u30af\u30e9\u30b9\u3068\u3057\u3066\u4f7f\u7528\u3059\u308bstd::iterator\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u3082\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u3042\u307e\u308a\u7c21\u5358\u306b\u306a\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u554f\u984c\u304c\u3088\u308a\u8907\u96d1\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u30b1\u30fc\u30b9\u3082\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u975e\u63a8\u5968\u3068\u306a\u308a\u307e\u3059\u3002\nBoost.Iterator\u306e\u3088\u3046\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u7c21\u5358\u306b\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u65b0\u305f\u306a\u4ed5\u7d44\u307f\u306f\u63d0\u4f9b\u3055\u308c\u307e\u305b\u3093\u306e\u3067\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7bc4\u56f2\u3067\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u6700\u521d\u304b\u3089\u6700\u5f8c\u307e\u3067\u81ea\u5206\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u306f\u3044\u3002\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u81ea\u4f5c\u3059\u308b\u3068\u304d\u306fstd::iterator\u3092\u7d99\u627f\u3059\u308b\u3001\u3068\u3044\u3046\u5e38\u8b58\u306f\u904e\u53bb\u306e\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\uff01\u307f\u305f\u3044\u306a\u89e3\u8aac\u30b5\u30a4\u30c8\u306f\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u70b9\u306b\u5341\u5206\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4f5c\u3063\u3066\u307f\u305f\n\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u3092\u30e9\u30c3\u30d7\u3057\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\u7df4\u7fd2\nhttps://gist.github.com/yumetodo/b0f82fc44e0e4d842c45f7596a6a0b49\n\u3061\u3087\u3063\u3068\u629c\u7c8b\u3057\u307e\u3059\n\n\u307e\u305a\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\ntemplate<typename Iterator, std::enable_if_t<std::is_same<Circle, typename std::iterator_traits<Iterator>::value_type>::value, std::nullptr_t> = nullptr>\nclass circle_pos_iterator\n#if __cplusplus < 201500 //C++17\u3067\u306fstd::iterator\u306f\u6d88\u3048\u308b\n    : std::iterator<typename std::iterator_traits<Iterator>::iterator_category, Vec2f>\n#endif\n{\nprivate:\n    using ref_iterator_type = Iterator;\n    ref_iterator_type it_;\n#if __cplusplus < 201500\n    using base_type = std::iterator<typename std::iterator_traits<Iterator>::iterator_category, Vec2f>;\n#endif\npublic:\n    circle_pos_iterator() = default;\n    circle_pos_iterator(Iterator it) noexcept : it_(it) {}\n    circle_pos_iterator(const circle_pos_iterator&) = default;\n    circle_pos_iterator(circle_pos_iterator&&) = default;\n    circle_pos_iterator& operator=(const circle_pos_iterator&) = default;\n    circle_pos_iterator& operator=(circle_pos_iterator&&) = default;\n    ref_iterator_type get_raw_iterator() const { return it_; }\n#if __cplusplus < 201500  \n    using iterator_category = typename base_type::iterator_category;\n    using value_type = typename base_type::value_type;\n    using difference_type = typename base_type::difference_type;\n    using pointer = typename base_type::pointer;\n    using reference = typename base_type::reference;\n#else\n    using iterator_category = typename std::iterator_traits<Iterator>::iterator_category;\n    using value_type = Vec2f;\n    using difference_type = std::ptrdiff_t;\n    using pointer = Vec2f*;\n    using reference = Vec2f&;\n#endif\n    Vec2f& operator*() noexcept { return it_->pos; }\n    Vec2f operator*() const noexcept { return it_->pos; }\n\n\u3082\u3068\u3068\u306a\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5f62\u304ctemplate\u5f15\u6570\u306eIterator\u3067\u3059\u3002\u3055\u3063\u304d\u3082\u8a00\u3063\u305f\u3088\u3046\u306bstd::iterator\u306f\u975e\u63a8\u5968\u306b\u306a\u308b\u306e\u3067#ifdef\u3067\u5206\u3051\u3066\u3044\u307e\u3059\u3002\n\u3082\u3068\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30af\u30e9\u30b9\u5185\u90e8\u306b\u6301\u3063\u3066\u304a\u3044\u3066\u3053\u3044\u3064\u3092\u64cd\u4f5c\u3057\u3064\u3064\u3001\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u30a4\u30c6\u30ec\u30fc\u30bf\u30af\u30e9\u30b9\u3068\u3057\u3066public\u306b\u578b\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3079\u304d\u306a\u306e\u306f\u3001iterator_category, value_type, difference_type, pointer, reference\u3042\u305f\u308a\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u306e\u8fba\u306f\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002\u7279\u306biterator_category\u306f\u3055\u3063\u304d\u8a00\u3063\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7a2e\u985e\u306b\u5f53\u305f\u308b\u3082\u306e\u3067\u3001SFINAE\u306a\u3093\u304b\u3067\u5229\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u5fd8\u308c\u305a\u306b\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\u3002\n\u3042\u3068\u306f\u3072\u305f\u3059\u3089operator overload\u3092\u66f8\u3044\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u304c\u3001\u3082\u3068\u3068\u306a\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u306f\u5b9a\u7fa9\u3067\u304d\u306a\u3044operator\u3082\u3042\u308b\u306e\u3067\n    template<std::enable_if_t<std::is_base_of<std::bidirectional_iterator_tag, iterator_category>::value, std::nullptr_t> = nullptr>\n    circle_pos_iterator& operator--() noexcept{\n        --this->it_;\n        return *this;\n    }\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u5f3e\u3044\u3066\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306bstd::enable_if_t\u306fC++14\u304b\u3089\u306a\u306e\u3067\u3001C++11\u3067\u4f7f\u3046\u3068\u304d\u306f\u81ea\u5206\u3067alias template\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u6b21\u306bRange\n\u6b21\u306b\u3001\u3053\u308c\u3092Range-based for\u306b\u6e21\u3059\u305f\u3081\u306bRange\u3092\u4f5c\u308a\u307e\u3059\u3002\ntemplate<typename It>\nclass circle_pos_iterator_range{\npublic:\n    using iterator = circle_pos_iterator<It>;\nprivate:\n    iterator begin_; iterator end_;\npublic:\n    circle_pos_iterator_range() = delete;\n    circle_pos_iterator_range(It begin, It end) : begin_(begin), end_(end) {}\n    circle_pos_iterator_range(const circle_pos_iterator_range&) = default;\n    circle_pos_iterator_range(circle_pos_iterator_range&&) = default;\n    circle_pos_iterator_range& operator=(const circle_pos_iterator_range&) = default;\n    circle_pos_iterator_range& operator=(circle_pos_iterator_range&&) = default;\n    iterator& begin() noexcept { return this->begin_; }\n    const iterator& begin() const noexcept { return this->begin_; }\n    iterator& end() noexcept { return this->end_; }\n    const iterator& end() const noexcept { return this->end_; }\n};\n\nbegin()/end()\u304c\u3042\u308b\u3060\u3051\u3067\u3068\u304f\u306b\u4f55\u3082\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\nFactory\u95a2\u6570\n\u6700\u5f8c\u306b\u3053\u306eRange\u30af\u30e9\u30b9\u306eFactory\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\u3044\u308f\u3086\u308bmake_xxx\u7cfb\u95a2\u6570\u3067\u3059\u306d\u3002\n\u306a\u3093\u3067\u5fc5\u8981\u304b\u3068\u3044\u3046\u3068\u3001C++14\u307e\u3067\u306f\u30af\u30e9\u30b9\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u63a8\u5b9a\u304c\u3067\u304d\u306a\u3044\u306e\u3067\nint main(void){\n    std::vector<Circle> v(10);\n    Circle arr[10] = {};\n    for(auto&& p : circle_pos_iterator_range<Circle*>(v)){\n        std::cout << p.x << p.y << std::endl;\n    }\n    for(auto&& p : circle_pos_iterator_range<std::vector<Circle>::iterator>(arr)){\n        std::cout << p.x << p.y << std::endl;\n    }\n\n    return 0;\n}\n\n\u306e\u3088\u3046\u306btemplate\u5b9f\u5f15\u6570\u3092\u66f8\u304f\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3093\u3067\u3059\u306d\u3001\u30c0\u30b5\u3044\u3002\n\u305d\u3053\u3067\ntemplate<typename It, std::enable_if_t<std::is_same<Circle, typename std::iterator_traits<It>::value_type>::value, std::nullptr_t> = nullptr>\ncircle_pos_iterator_range<It> make_circle_pos_iterator_range(It begin, It end){\n    return {begin, end};\n}\ntemplate<typename Container>\ncircle_pos_iterator_range<typename Container::iterator> make_circle_pos_iterator_range(Container c)\n{\n    return make_circle_pos_iterator_range(c.begin(), c.end());\n}\ntemplate<std::size_t N>\ncircle_pos_iterator_range<Circle*> make_circle_pos_iterator_range(Circle (&arr)[N]){\n    return make_circle_pos_iterator_range(std::begin(arr), std::end(arr));\n}\n\n\u306e\u3088\u3046\u306b\u30e9\u30c3\u30d1\u30fc\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\u3002\u3053\u308c\u3067\nint main(void){\n    std::vector<Circle> v(10);\n    Circle arr[10] = {};\n    for(auto&& p : make_circle_pos_iterator_range(v)){\n        std::cout << p.x << p.y << std::endl;\n    }\n    for(auto&& p : make_circle_pos_iterator_range(arr)){\n        std::cout << p.x << p.y << std::endl;\n    }\n\n    return 0;\n}\n\n\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n\u3061\u306a\u307f\u306bC++17\u3067\u306f\n\u672c\u306e\u866b: C++17\u306e\u30af\u30e9\u30b9\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u63a8\u5b9a\nhttps://cpplover.blogspot.jp/2016/10/blog-post_11.html\n\u30af\u30e9\u30b9\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u63a8\u5b9a\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u306f\u3044\u3089\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\n\u30b3\u30eb\u30fc\u30c1\u30f3\u3082yield\u6587\u3082\u306a\u3044\u3051\u3069pyhton\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u304c\u6b32\u3057\u3044\u306e\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u9811\u5f35\u308b\n\u3054\u3081\u3093\u306a\u3055\u3044\u3001python\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u524d\u306bpython\u66f8\u3044\u305f\u4e8b\u81ea\u4f53\u304c\u3042\u3093\u307e\u7121\u3044\u3067\u3059\u3002\n\u305d\u308c\u306f\u305d\u3046\u3068\u3057\u3066\u3001Range-based for\u3067\u5ef6\u3005\u3068\u4e71\u6570\u3092\u53d6\u3063\u3066\u304f\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\npython\u3067\u8a00\u3048\u3070\nhttps://paiza.io/projects/hKd6EzaazTyo1z00ObSegA\nfrom random import randint\ndef random_generator_range(n, min_, max_):\n    while True:\n        yield randint(min_, max_)\n\ndef random_generator_range_with_count(n, min_, max_):\n    i = 0\n    while i < n:\n        yield randint(min_, max_)\n        i += 1\n\nprint(\"generate: random_generator_range\")\nfor n in random_generator_range(10, 0, 10):\n    print(n)\n    if 0 == n:\n        break\nprint(\"generate: random_generator_range_with_count\")\nfor n in random_generator_range_with_count(10, 0, 10):\n    print(n)\n\n\u3053\u3093\u306a\u304b\u3093\u3058\u304b\u306a\uff1f\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3063\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3060\u3088\u306d\uff1f(\u7121\u77e5)\npython\u8a73\u3057\u304f\u306a\u3044\u306e\u3067(2\u56de\u76ee)\u3088\u304f\u77e5\u308a\u307e\u305b\u3093\u304c\u3001\u30b3\u30fc\u30c9\u4f8b\u898b\u3066\u3044\u308b\u611f\u3058\u3053\u308c\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3088\u306d\uff1f(\u7121\u77e5)\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3082yield\u3082C++\u306b\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3089\u3042\u308a\u307e\u3059\u3002\u306a\u3089\u3070\u4f5c\u308c\u305d\u3046\u3067\u3059\u3002\n\n\u5b9f\u88c5\u3057\u305f\n\u3068\u3044\u3046\u308f\u3051\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u30af\u30e9\u30b9\ntemplate<typename T>\nclass random_generator_iterator\n    : public random_generator_iterator_base\n#if __cplusplus < 201500 //C++17\u3067\u306fstd::iterator\u306f\u6d88\u3048\u308b\n    , public std::iterator<std::input_iterator_tag, T>\n#endif\n{\n    //\u4e2d\u7565\n    using distribution = uniform_normal_distribution<value_type>;\nprivate:\n    struct impl {\n        distribution dist;\n        std::reference_wrapper<std::mt19937> engine;\n        bool next_is_end;\n        impl() = default;\n        impl(const impl&) = delete;\n        impl(impl&&) = default;\n        impl& operator=(const impl&) = delete;\n        impl& operator=(impl&&) = default;\n        impl(value_type min, value_type max, std::mt19937& mt) : dist(min, max), engine(mt), next_is_end(false) {}\n        value_type generate() { return this->dist(this->engine.get()); }\n    };\n    std::unique_ptr<impl> pimpl_;\n    bool is_end_iterator_;\npublic:\n    constexpr random_generator_iterator() noexcept : pimpl_(), is_end_iterator_(true) {};\n    random_generator_iterator(const random_generator_iterator&) = delete;\n    random_generator_iterator(random_generator_iterator&&) = default;\n    random_generator_iterator& operator=(const random_generator_iterator&) = delete;\n    random_generator_iterator& operator=(random_generator_iterator&&) = default;\n\n    random_generator_iterator(value_type min, value_type max, std::mt19937& mt)\n        : pimpl_(std::make_unique<impl>(min, max, mt)), is_end_iterator_(false)\n    {}\n    void stop() noexcept { this->pimpl_->next_is_end = true; }\n    value_type operator*() { return this->pimpl_->generate(); }\n    random_generator_iterator& operator++() noexcept\n    { \n        if (this->pimpl_->next_is_end) this->is_end_iterator_ = true;\n        return *this;\n    }\n    random_generator_iterator operator++(int) noexcept\n    {\n        const auto re = *this;\n        if (this->pimpl_->next_is_end) this->is_end_iterator_ = true;\n        return re;\n    }\n    constexpr bool operator==(const random_generator_iterator& r) const noexcept { return this->is_end_iterator_ == r.is_end_iterator_; }\n    constexpr bool operator!=(const random_generator_iterator& r) const noexcept { return !(*this == r); }\n};\n\n\u307e\u305a\u3001\u4e71\u6570\u751f\u6210\u5668\u3092\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\nC++\u306e\u4e71\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\n\n\u4e71\u6570\u751f\u6210\u5668\nDistribution(\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3)\n\n\u3092\u5206\u96e2\u3057\u305f\u8a2d\u8a08\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067\u4e71\u6570\u751f\u6210\u5668\u306f\u57fa\u672c\u7684\u306b\u306f\u5404\u30b9\u30ec\u30c3\u30c9\u3067\u4e00\u500b\u6301\u3063\u3066\u4f7f\u3044\u307e\u308f\u3059\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3064\u307e\u308a\u4e71\u6570\u751f\u6210\u3092\u884c\u3046\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u4e71\u6570\u751f\u6210\u5668\u3078\u306e\u53c2\u7167\u3092\u4fdd\u6301\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u306fstd::reference_wrapper\u306e\u51fa\u756a\u3067\u3059\u306d\uff01\n\nrange-based for\u306e\u6ce8\u610f\u70b9\nC++14\u307e\u3067\u306f\u3001range-based for\u306f\n\nC++14\n{\n    auto && __range = range_expression ; \n    for (auto __begin = begin_expr, __end = end_expr; __begin != __end; ++__begin) { \n        range_declaration = *__begin; \n        loop_statement \n    } \n} \n\n\n\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u3064\u307e\u308a\u3001begin\u30a4\u30c6\u30ec\u30fc\u30bf\u3068end\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u540c\u3058\u578b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\nC++17\u304b\u3089\u306f\n\nC++17\n{\n    auto && __range = range_expression ; \n    auto __begin = begin_expr ;\n    auto __end = end_expr ;\n    for ( ; __begin != __end; ++__begin) { \n        range_declaration = *__begin; \n        loop_statement \n    } \n} \n\n\n\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3068\u306a\u308b\u306e\u3067\u3001\u9055\u3046\u578b\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\nForward \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u6ce8\u610f\u70b9\nForward \u30a4\u30c6\u30ec\u30fc\u30bf\u306fDefaultConstructible \u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3064\u307e\u308aDefaultConstructible\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\nC++14\u307e\u3067\u3067\u306f\u3001end\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5b9f\u88c5\u306e\u305f\u3081\u306b\u3001DefaultConstructible\u306b\u3057\u305f\u307b\u3046\u304c\u697d\u3068\u3044\u3046\u4e8b\u60c5\u3068\u3001Forward \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8981\u4ef6\u3067DefaultConstructible\u3092\u8981\u6c42\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u7406\u7531\u304b\u3089\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001std::reference_wrapper\u306fDefaultConstructible\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001pimpl\u30a4\u30c7\u30aa\u30e0\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3010c++\u3011\u6fc0\u9707\u304c\u8d70\u3063\u305f\u3001Pimpl\u30a4\u30c7\u30a3\u30aa\u30e0 - Qiita\nhttp://qiita.com/ashdik/items/b6b9924113f7e8d531cf\n\nRange\u30af\u30e9\u30b9\ntemplate<typename T>\nclass random_generator_range {\npublic:\n    using value_type = T;\n    using iterator = random_generator_iterator<value_type>;\nprivate:\n    value_type min_;\n    value_type max_;\n    std::reference_wrapper<std::mt19937> mt_;\npublic:\n    random_generator_range() = delete;\n    random_generator_range(const random_generator_range&) = delete;\n    random_generator_range(random_generator_range&&) = default;\n    random_generator_range& operator=(const random_generator_range&) = delete;\n    random_generator_range& operator=(random_generator_range&&) = delete;\n    random_generator_range(value_type min, value_type max, std::mt19937& mt)\n        : min_(min), max_(max), mt_(mt) {}\n    iterator begin() noexcept { return{ min_, max_, mt_.get() }; }\n    iterator end() noexcept { return{}; }\n};\n\n\u307e\u3042\u3068\u304f\u306b\u96e3\u3057\u3044\u3053\u3068\u306f\u3057\u3066\u3044\u306a\u3044\u3067\u3059\u306d\u3002\n\n\u3067\u304d\u305f\u3082\u306e\nstatic auto engine = create_engine();\nint main()\n{\n    static_assert(is_random_generator_iterator_v<random_generator_iterator<int>>, \"err\");\n    std::cout << \"generate: random_generator_iterator\" << std::endl;\n    for (auto ri = random_generator_iterator<int>(0, 10, engine); ri != random_generator_iterator<int>{}; ++ri) {\n        const auto n = *ri;\n        std::cout << n << std::endl;\n        if (0 == n) ri.stop();\n    }\n    std::cout << \"generate: random_generator_range\" << std::endl;\n    for (auto&& n : random_generator_range<int>(0, 10, engine)) {\n        std::cout << n << std::endl;\n        if (0 == n) break;\n    }\n    static_assert(is_random_generator_iterator_v<random_generator_iterator_with_count<int>>, \"err\");\n    std::cout << \"generate: random_generator_iterator_with_count\" << std::endl;\n    for (auto ri = random_generator_iterator_with_count<int>(0, 10, engine); ri != random_generator_iterator_with_count<int>(10); ++ri) {\n        std::cout << *ri << std::endl;\n    }\n    std::cout << \"generate: random_generator_range_with_count\" << std::endl;\n    for (auto&& n : random_generator_range_with_count<int>(10, 0, 10, engine)) {\n        std::cout << n << std::endl;\n    }\n\n    return 0;\n}\n\n\u540c\u69d8\u306b\u3057\u3066\u3001random_generator_iterator_with_count\u3068random_generator_range_with_count\u3082\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\ncreate_engine\u306f\u4e71\u6570\u751f\u6210\u5668\u3092\u521d\u671f\u5316\u3057\u3066\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u4e2d\u3067\u306f\nhttps://github.com/yumetodo/random_generator_iterator/blob/master/random.hpp\n\u76f8\u5f53\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u3044\u307e\u3059\u3002\u6b63\u76f4\u3053\u3053\u307e\u3067\u51dd\u3063\u305fseed\u751f\u6210\u306f\u5fc5\u8981\u306a\u3044\u30fb\u30fb\u30fb\u3002\n\nint.TryParse\u304c\u6b32\u3057\u3044\n\nC++ \u3067int.tryParse\u307f\u305f\u3044\u306a\u306e\u3063\u3066\u3042\u308b\u306e\u304b\u306a(\u00b4\u30fb\u03c9\u30fb\uff40)\u3044\u307e\u3044\u3061\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u30fb\u30fb\u2014 \u30a4\u30ed\u30cf\u3320 (@iroha_thesleepy) 2016\u5e7412\u670824\u65e5\n\nint.TryParse\u3068\u3044\u3046\u306e\u306fC#\u3068\u3044\u3046\u304b.NET\u306b\u3042\u308b\u3084\u3064\u3067\u3059\u306d\u3002\n\nInt32.TryParse \u30e1\u30bd\u30c3\u30c9 (String, Int32) (System) | MSDN\npublic static bool TryParse(\n    string s,\n    out int result\n)\n\n\nint value;\nint.TryParse( \"100\" , out value );//value\u306f100\n\n\u3082\u3061\u308d\u3093C++\u306b\u3082C++11\u3067std::stoi\u304c\u8ffd\u52a0\u3055\u308c\u305f\u306e\u3067\u3001\nconst int value = std::stoi(\"100\");//100\n\n\u306e\u3088\u3046\u306b\u304b\u3051\u307e\u3059\u3002\n\n@azaika_ \u306a\u308b\u307b\u3069\u3002\u4f8b\u5916\u3067\u3059\u304b\u3002\u3002\u3002\u3067\u304d\u308c\u3070false\u8fd4\u3057\u3066\u307b\u3057\u304b\u3063\u305f\uff57\u2014 \u30a4\u30ed\u30cf\u3320 (@iroha_thesleepy) 2016\u5e7412\u670824\u65e5\n\n\u3057\u304b\u3057\u3001\u4f8b\u5916\u3092\u4f7f\u3046\u3068\u3044\u3046\u306e\u3068\u3001c\u5f62\u5f0f\u306e\u6587\u5b57\u5217\u3067\u3082\u4e00\u5ea6std::string\u3092\u69cb\u7bc9\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\nint.TryParse\u3092\u81ea\u4f5c\u3057\u3088\u3046\n\u3064\u307e\u308a\u3001std::stoi\u306e\u5b9f\u88c5\u306b\u3082\u4f7f\u308f\u308c\u308bstrtol\u7cfb\u95a2\u6570\u3092\u547c\u3073\u51fa\u305b\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\n\nstrtol\u7cfb\u95a2\u6570\u3092\u4f7f\u3046\u3068\u304d\u306e\u6ce8\u610f\u70b9\n\u3068\u3053\u308d\u304c\u3053\u306e\u95a2\u6570\u3001\u6b63\u3057\u304f\u4f7f\u3046\u306e\u306f\u306a\u304b\u306a\u304b\u5927\u5909\u3060\u3063\u305f\u308a\u3057\u307e\u3059\u3002\nC\u8a00\u8a9e\u3067\u5b89\u5168\u306b\u6a19\u6e96\u5165\u529b\u304b\u3089\u6570\u5024\u3092\u53d6\u5f97 - Qiita\nhttp://qiita.com/yumetodo/items/238751b879c09b56234b\n\u3067\u3082\u89e6\u308c\u307e\u3057\u305f\u304c\u3001\u6539\u3081\u3066\u66f8\u3044\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\nC11\u898f\u683c\u66f8\u306b\u3088\u308c\u3070\nhttp://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n\n7.22.1.4 The strtol, strtoll, strtoul, and strtoull functions\nSynopsis\n1 \n#include <stdlib.h>\nlong int strtol(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\nlong long int strtoll(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\nunsigned long int strtoul(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\nunsigned long long int strtoull(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\n\n7 If the subject sequence is empty or does not have the expected form, no conversion is\nperformed; the value of nptr is stored in the object pointed to by endptr, provided\nthat endptr is not a null pointer.\nReturns\n8 The strtol, strtoll, strtoul, and strtoull functions return the converted\nvalue, if any. If no conversion could be performed, zero is returned. If the correct value\nis outside the range of representable values, LONG_MIN, LONG_MAX, LLONG_MIN,\nLLONG_MAX, ULONG_MAX, or ULLONG_MAX is returned (according to the return type\nand sign of the value, if any), and the value of the macro ERANGE is stored in errno.\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30a8\u30e9\u30fc\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u306b\u306f\u3001\u623b\u308a\u5024\u3084errno\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u3060\u3051\u3067\u306f\u4e0d\u5145\u5206\u3067endptr\u3082\u6e21\u3057\u3066\u78ba\u8a8d\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\u86c7\u8db3\u3067\u3059\u304c\u3001C\u3067scanf\u7cfb\u95a2\u6570\u3084stoi\u7cfb\u95a2\u6570\u3092\u4f7f\u3063\u3066\u306f\u3044\u3051\u306a\u3044\u7406\u7531\u306f\u3053\u308c\u3060\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\n\u5b9f\u88c5\u3057\u305f\nyumetodo / integer_parse_iterator / \u30bd\u30fc\u30b9 / try_integer_parse.hpp \u2014 Bitbucket\ntemplate<typename T, concept_t<\n    std::is_signed<T>::value && (sizeof(T) <= sizeof(long))\n> = nullptr>\ninline bool try_parse(const char* s, T& result, T min = std::numeric_limits<T>::min(), T max = std::numeric_limits<T>::max()) noexcept\n{\n    errno = 0;\n    char* endptr;\n    const long t = strtol(s, &endptr, 10);\n    if (0 != errno || (0 == t && endptr == s) || t < min || max < t) {\n        return false;\n    }\n    else {\n        result = static_cast<T>(t);\n        return true;\n    }\n}\n\n\u3053\u3093\u306a\u611f\u3058\u3002\u5b9f\u969b\u306b\u306f\u3059\u3079\u3066\u306e\u6574\u6570\u578b\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306b\u3001\u3082\u3046\u3059\u3053\u3057\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u30ea\u30f3\u30af\u5148\u53c2\u7167\u3002\n\nint.TryParse\u306e\u554f\u984c\u70b9\n\nTryParse\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u4e00\u6642\u5909\u6570\u3092\u7528\u610f\u3057\u305f\u304f\u306a\u3044\u2026 - Qiita\nhttp://qiita.com/Temarin/items/9aac6c1f569fc2113e0d\nTryParse\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001out\u3084ref\u3092\u4f7f\u3046\u306e\u3067\u3001\u4e00\u6642\u5909\u6570\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nC# 6.0\u3067\u3053\u3093\u306a\u306e\u304c\u4e88\u5b9a\u3055\u308c\u3066\u3044\u305f\u304c\u3001\u6b8b\u5ff5\u306a\u304c\u3089\u5374\u4e0b\u3055\u308c\u305f\u3088\u3046\u3060\u3002\nint.TryParse( \"100\" , out int value );\n\n\n\u306a\u3093\u3060\u305d\u306e\u69cb\u6587\u30fb\u30fb\u30fb\u3001\u307e\u3042\u305d\u308c\u306f\u3055\u3066\u304a\u304d\u3001\u30d1\u30fc\u30b9\u7d50\u679c\u304c\u623b\u308a\u5024\u3068\u3057\u3066\u307b\u3057\u3044\u3067\u3059\u3088\u306d\u3002const\u306b\u3067\u304d\u306a\u3044\u3057\u3002\n\n\u305d\u3053\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3088\n\nC++\u306eoptional\u3068\u304bC#\u306eNullable\u3068\u304b\u3001\u6700\u8fd1\u306b\u306a\u3063\u30660\u307e\u305f\u306f1\u8981\u7d20\u306e\u30b3\u30f3\u30c6\u30ca\u306b\u898b\u3048\u3066\u304d\u305f\u3002foreach\u306b\u7a81\u3063\u8fbc\u3081\u3066\u3082\u3044\u3044\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3001\u73fe\u5b9f\u306f\u306a\u305c\u304b\u7a81\u3063\u8fbc\u3081\u306a\u3044\u3002\u4e0d\u601d\u8b70\u3060\u3002\u2014 \u30d7\u30d7\u30d7\u30e9\u30f3\u30c9\u306e\u30d7\u30ea\u30f3\u30b9 RiSK (@sscrisk) 2016\u5e742\u670825\u65e5\n\n\nsprout::optional \u306b\u30b3\u30f3\u30c6\u30ca\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002https://t.co/CgbXSNpl5Dhttps://t.co/DFw7i4Nby2\u2014 \u72c2\u3048\u308b\u4e2d\uff13\u5973\u5b50\u30dc\u30ec\u30ed\u6751\u4e0a\uff0f\u9676\u82b8C++er (@bolero_MURAKAMI) 2016\u5e742\u670825\u65e5\n\n\u3053\u308c\u3092\u307f\u3066\u601d\u3046\u3093\u3067\u3059\u306d\u3002\nfor (int n : integer_parse<int>(s)) {\n    std::cout << n << std::endl;\n}\n\n\u3053\u3093\u306a\u98a8\u306b\u304b\u3051\u308c\u3070\u3044\u3044\u3093\u3058\u3083\u306d\uff1f\u3068\u3002\nsprout::optional\u306f\u305d\u308c\u81ea\u8eab\u3092\u30b3\u30f3\u30c6\u30ca\u306b\u3057\u3066\u3001range-based for\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u7121\u52b9\u306a\u3068\u304d\u306f\u4f55\u3082\u305b\u305a\u3001\u6709\u52b9\u306a\u3068\u304d\u306f\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u305b\u308b\u3068\u3044\u3046\u7d20\u6674\u3089\u3057\u3044\u6a5f\u80fd\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\u540c\u3058\u3088\u3046\u306b\u3001\u30d1\u30fc\u30b5\u30fc\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3001range-based for\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5909\u63db\u3067\u304d\u306a\u3044\u3068\u304d\u306f\u4f55\u3082\u305b\u305a\u3001\u5909\u63db\u3057\u305f\u3068\u304d\u306f\u5909\u63db\u7d50\u679c\u3092\u53d6\u308c\u308c\u3070\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u3064\u307e\u308a\u305d\u3046\u3044\u3046\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u304b\u3051\u3070\u3044\u3044\u3093\u3067\u3059\u306d\n\n\u5b9f\u88c5\u3057\u305f\nyumetodo / integer_parse_iterator / \u30bd\u30fc\u30b9 / integer_parse_iterator.hpp \u2014 Bitbucket\n\n\u307e\u305a\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u5909\u63db\u3092\u5148\u306etry_parse\u3092\u547c\u3073\u51fa\u3057\u3066\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\ntemplate<typename T>\nclass integer_parse_iterator\n{\n    //\u4e2d\u7565\nprivate:\n    using lim = std::numeric_limits<value_type>;\n    value_type re_;\n    bool is_not_end_iterator_;\npublic:\n    constexpr integer_parse_iterator() noexcept : re_(), is_not_end_iterator_(false) {}\n    integer_parse_iterator& operator=(integer_parse_iterator&&) = default;\n    integer_parse_iterator(const std::string& s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n    {\n        this->is_not_end_iterator_ = try_parse(s, this->re_, min, max);\n    }\n    integer_parse_iterator(const char* s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n    {\n        this->is_not_end_iterator_ = try_parse(s, this->re_, min, max);\n    }\n    value_type operator*() const noexcept { return this->re_; }\n    integer_parse_iterator& operator++() noexcept\n    {\n        this->re_ = 0;\n        this->is_not_end_iterator_ = false;\n        return *this;\n    }\n    integer_parse_iterator operator++(int) noexcept\n    {\n        const auto re = *this;\n        this->re_ = 0;\n        this->is_not_end_iterator_ = false;\n        return re;\n    }\n    //\u4ee5\u4e0b\u7565\n}\n\noperator*\u306f\u4fdd\u5b58\u3057\u305f\u7d50\u679c\u3092\u53d6\u308b\u3060\u3051\u306b\u3057\u3066\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u305f\u6642\u306f\u554f\u7b54\u7121\u7528\u3067end iterator\u306b\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n\u6b21\u306bRange\n\u5909\u63db\u3092\u4f55\u5ea6\u3082\u884c\u308f\u306a\u3044\u3088\u3046\u306b\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30e1\u30f3\u30d0\u30fc\u306b\u6301\u3064\u3053\u3068\u306b\u3057\u307e\u3059\u3002\ntemplate<typename T>\nclass integer_parse_range {\npublic:\n    using value_type = T;\n    using iterator = integer_parse_iterator<value_type>;\nprivate:\n    using lim = std::numeric_limits<value_type>;\n    iterator it_;\npublic:\n    integer_parse_range() = delete;\n    integer_parse_range(const integer_parse_range&) = delete;\n    integer_parse_range(integer_parse_range&&) = default;\n    integer_parse_range& operator=(const integer_parse_range&) = delete;\n    integer_parse_range& operator=(integer_parse_range&&) = delete;\n    integer_parse_range(const std::string& s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n        :it_(s, min, max)\n    {}\n    integer_parse_range(const char* s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n        :it_(s, min, max)\n    {}\n    iterator begin() noexcept { return it_; }\n    constexpr iterator end() const noexcept { return{}; }\n};\n\n\n\u6700\u5f8c\u306bFactory\u95a2\u6570\u3092\ntemplate<typename T>\ninline integer_parse_range<T> integer_parse(const std::string& s, T min = std::numeric_limits<T>::min(), T max = std::numeric_limits<T>::max()) noexcept\n{\n    return{ s, min, max };\n}\ntemplate<typename T>\ninline integer_parse_range<T> integer_parse(const char* s, T min = std::numeric_limits<T>::min(), T max = std::numeric_limits<T>::max()) noexcept\n{\n    return{ s, min, max };\n}\n\n\n\u3067\u304d\u305f\u3082\u306e\nyumetodo / integer_parse_iterator / \u30bd\u30fc\u30b9 / main.cpp \u2014 Bitbucket\nint main()\n{\n    using std::string;\n    std::cout << \"try_parse\" << std::endl;\n    string s = \"1123\";\n    {\n        std::uint16_t re;\n        if (try_parse(s, re)) {\n            std::cout << re << std::endl;\n        }\n    }\n    std::cout << \"integer_parse_iterator(expect no output)\" << std::endl;\n    for (integer_parse_iterator<std::int8_t> it; it != integer_parse_iterator<std::int8_t>{}; ++it) {\n        std::cout << *it << std::endl;\n    }\n    std::cout << \"integer_parse\" << std::endl;\n    for (int n : integer_parse<int>(s)) {\n        std::cout << n << std::endl;\n    }\n}\n\n1123\u306fstd::int8_t\u3067\u8868\u305b\u306a\u3044\u7bc4\u56f2\u306a\u306e\u30671\u3064\u76ee\u306erange-based for\u306e\u4e2d\u8eab\u306f\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002\n1123\u306f\u591a\u304f\u306e\u51e6\u7406\u7cfb\u3067\u306fint\u578b\u3067\u8868\u305b\u308b\u306e\u3067\u30012\u3064\u76ee\u306erange-based for\u306e\u4e2d\u8eab\u306f\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\u7cfb\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u5909\u63db\u7d50\u679c\u306e\u5909\u6570\u306frange-based for\u306e\u4e2d\u3067\u306e\u307f\u6709\u52b9\u306b\u306a\u308b\u306e\u3067\u3001\u30b9\u30b3\u30fc\u30d7\u304c\u5927\u304d\u304f\u306a\u3089\u305a\u306b\u6e08\u307f\u307e\u3059\u3002\n\n\u7d50\u8ad6\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u308f\u308a\u3068\u306a\u3093\u3067\u3082\u3067\u304d\u308b\u3002\u304c\u3001\u4f5c\u308b\u306e\u306b\u66f8\u304f\u30b3\u30fc\u30c9\u304c\u3082\u306e\u3059\u3054\u304f\u591a\u3044\u3002\u3082\u3046\u5c11\u3057\u304b\u3093\u305f\u3093\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u6b32\u3057\u3044\u3002\n\u9006\u306b\u8a00\u3048\u3070\u884c\u6570\u3067\u30b3\u30fc\u30c9\u304c\u8a55\u4fa1\u3055\u308c\u308b\u3088\u3046\u306a\u8077\u5834\u3067\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5897\u7523\u3057\u307e\u3057\u3087\u3046\n\u3084\u3063\u3071\u308aC++17\u3067\u306f\u5165\u3089\u306a\u304b\u3063\u305f\u3051\u3069\u3001\u975e\u540c\u671f\u5468\u308a(co_async/co_await)\u3068\u304b\u30b3\u30eb\u30fc\u30c1\u30f3\u307b\u3057\u3044\u3088\u306d\u3002\n\nVisual Studio 2015 Update 1 \u3067 C++  \u3092\u8a66\u3057\u3066\u307f\u308b - espresso3389\u306e\u65e5\u8a18\n#include <cstdio>\n#include <random>\n#include <experimental/generator>\nauto random()\n{\n  std::mt19937 r;\n  for (;;)\n    yield r();\n}\nint main()\n{\n  for (auto r : random())\n    std::printf(\"%d\\n\", r);\n}\n\n\n\u30b9\u30c3\u30ad\u30ea\u3059\u308b\u3057\u3002\n\n\u30fb\u30fb\u30fb\u3042\u3001\u3053\u308c\u521d\u5fc3\u8005C++Advent Calendar\u306e\u8a18\u4e8b\u306a\u306e\u306b\u3001SFINAE\u3068\u304b\u5168\u304f\u8aac\u660e\u306a\u3057\u306b\u66f8\u3044\u3066\u3057\u307e\u3063\u305f\u3002\n\n\u521d\u5fc3\u8005C++Advent Calendar 2016\n\u660e\u65e5\u306f\u3044\u306a\u3080\u5148\u751f\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n@yumetodo @Lost206 \u306f\u3088\uff01\u2014 \u3044\u306a\u3080\u306e\u307f\u305f\u307e\uff5c\u8d85\u30a6\u30a3\u30b6\u30fc\u30c9\u7d1aC++er (@enum_hack) 2016\u5e7412\u670815\u65e5\n\n\u3042\u3089\u305f\u3081\u3066\u9045\u523b\u3059\u307f\u307e\u305b\u3093\u3002\n<< 14\u65e5\u76ee | \u30dd\u30a4\u30f3\u30bf\u3068\u4ef2\u826f\u304f\u306a\u308b\u8a71 \u3010\u521d\u5fc3\u8005C++er Advent Calendar 2016 - 14\u65e5\u76ee\u3011 - \u3092\u308b\u3075\u3061\u3083\u3093\u306e\u30d6\u30ed\u30b0 || 16\u65e5\u76ee | C++\u306e\u4e71\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f7f\u3044\u306b\u304f\u3044\u8a71 >>\n# \u521d\u5fc3\u8005C++Advent Calendar 2016\n\n\u3053\u306e\u8a18\u4e8b\u306f\u521d\u5fc3\u8005C++Advent Calendar 2016 15\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\n[<< 14\u65e5\u76ee | \u30dd\u30a4\u30f3\u30bf\u3068\u4ef2\u826f\u304f\u306a\u308b\u8a71 \u3010\u521d\u5fc3\u8005C++er Advent Calendar 2016 - 14\u65e5\u76ee\u3011 - \u3092\u308b\u3075\u3061\u3083\u3093\u306e\u30d6\u30ed\u30b0](http://wolf-cpp.hateblo.jp/entry/2016/12/20/063530) || [16\u65e5\u76ee | C++\u306e\u4e71\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f7f\u3044\u306b\u304f\u3044\u8a71 >>](http://qiita.com/_EnumHack/items/25fc998873d1bc7d2276)\n\n\u9045\u523b\u3057\u3066\u3059\u307f\u307e\u305b\u3093\u3002\n[DxLib\u89e3\u5256\u5b66LoadSoundMem\u3068LoadBGM - DxLibEx Research Notes](http://nagarei.github.io/DxLibEx/research_note/DxLib%E8%A7%A3%E5%89%96%E5%AD%A6LoadSoundMem%E3%81%A8LoadBGM.html)\n\u3092\u66f8\u304f\u305f\u3081\u306e\u8abf\u67fb\u3092\u3057\u3066\u3044\u305f\u3089\u3001\u76f8\u5f53\u6642\u9593\u3092\u53d6\u3089\u308c\u307e\u3057\u305f\u3002\n\n\u4eca\u56de\u521d\u5fc3\u8005AdC\u306f\u306a\u3093\u304b\u904e\u758e\u3063\u3066\u307e\u3059\u306d\u3047\u30fb\u30fb\u30fb\u3002\u307b\u3093\u308f\u304b\u3057\u305f\u8a18\u4e8b\u304c\u591a\u3044\u4e2d\u3001[\u30cf\u30ed\u30fc\u30ef\u30fc\u30eb\u30c9\u5fb9\u5e95\u89e3\u8aac](http://qiita.com/kazatsuyu/items/478c55de0f75ea5904bd)\u3068\u3044\u3046\u30e4\u30d0\u305d\u3046\u306a\u8a18\u4e8b\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u3001\u3044\u3064\u3082\u306e\u3053\u3068\u304b\u3002\n\n\u53bb\u5e74\u307b\u3069\u521d\u5fc3\u8005\u8a50\u6b3a\u306a\u8a18\u4e8b\u304c\u306a\u3044\u306e\u3067\u3001[C++er\u3092\u7c21\u6613\u7684\u306b\u30ec\u30d9\u30eb\u5206\u3051\u3059\u308b\u3053\u3068\u3067\u521d\u5fc3\u8005\u8a50\u6b3a\u3092\u6e1b\u3089\u305d\u3046\u3068\u3044\u3046\u8a66\u307f](http://qiita.com/yumetodo/items/a843bd542106215bbc84)\u304c\u529f\u3092\u594f\u3057\u305f\u306e\u304b\u306a\u3041\uff1f\u3068**\u3053\u3058\u3064\u3051\u3066\u304a\u304d\u307e\u3059**\u3002\n\n# \u306f\u3058\u3081\u306b\n\n\u7686\u69d8\u3001[\u30ca\u30de\u30b9\u30c6](http://www.nicovideo.jp/watch/sm25261912)\u3002\n\n\u4eca\u56de\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\u3048\uff1f\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u89e3\u8aac\u3092\u3059\u308b\u306a\u3093\u3066[\u4eca\u66f4\u4f73\u4ee3](http://www.nicovideo.jp/watch/sm26588134)\u3060\u3063\u3066\uff1f~~\u305d\u308c\u3092\u8a00\u3063\u305f\u3089\u30cd\u30bf\u304c\u306a\u3044~~\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\u306a\u306b\u3082C++\u306b\u56fa\u6709\u306a\u6982\u5ff5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n>\u30a4\u30c6\u30ec\u30fc\u30bf - Wikipedia\nhttps://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%86%E3%83%AC%E3%83%BC%E3%82%BF\n>\u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u82f1\u8a9e: Iterator\uff09\u3068\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306b\u304a\u3044\u3066\u914d\u5217\u3084\u305d\u308c\u306b\u985e\u4f3c\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u5404\u8981\u7d20\u306b\u5bfe\u3059\u308b\u7e70\u8fd4\u3057\u51e6\u7406\u306e\u62bd\u8c61\u5316\u3067\u3042\u308b\u3002\u5b9f\u969b\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u306f\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f\u6587\u6cd5\u306a\u3069\u3068\u3057\u3066\u73fe\u308c\u308b\u3002\u53cd\u5fa9\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u306e\u610f\u5473\u3067\u53cd\u5fa9\u5b50\uff08\u306f\u3093\u3077\u304f\u3057\uff09\u3068\u8a33\u3055\u308c\u308b\u3002\u7e70\u8fd4\u5b50\uff08\u304f\u308a\u304b\u3048\u3057\uff09\u3068\u3044\u3046\u4e00\u822c\u7684\u3067\u306f\u306a\u3044\u8a33\u8a9e\u3082\u3042\u308b\u3002\n\n\u4e00\u822c\u306b\u306f\u914d\u5217\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u9806\u756a\u306b\u305f\u3069\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\n# C++\u306b\u304a\u3051\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\n\n\u307e\u3042\u305d\u306e\u6c17\u306b\u306a\u308c\u3070\u306a\u3093\u3067\u3082\u4f5c\u308c\u307e\u3059\u304c\u3001\u4e00\u822c\u7684\u306b\u898b\u304b\u3051\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u305f\u3061\u3092\u3002\n\n## \u30b3\u30f3\u30c6\u30ca\u306b\u5bfe\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\n\n```cpp\n#include <iostream>\n\nstd::array<int, 5> arr{{ 1, 3, 9, 4 }};\nfor(auto it = std::begin(arr); it != std::end(arr); ++it){\n    std::cout << *it << std::endl;\n}\n```\n\n``std::array``\u3084``std::vector``\u3001``std::unordered_map``\u306b\u4ee3\u8868\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u306f\u30e1\u30f3\u30d0\u95a2\u6570``begin()``\u3068``end()``\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e2\u3064\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306f[``std::begin()``](https://cpprefjp.github.io/reference/iterator/begin.html)/[``std::end()``](https://cpprefjp.github.io/reference/iterator/end.html)\u3092\u4ecb\u3057\u3066\u547c\u3073\u51fa\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u3059\u3059\u3081\u308b\u306b\u306f``operator++``\u3092\u547c\u3076\u304b\u3001[``std::next()``](https://cpprefjp.github.io/reference/iterator/next.html)\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n## C\u5f62\u5f0f\u306e\u914d\u5217\u306b\u5bfe\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\n\n\u3064\u307e\u308a\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002\n\n```cpp\n#include <iostream>\n\nint arr[] = { 1, 3, 9, 4 };\nfor(int* it = std::begin(arr); it != std::end(arr); ++it){\n    std::cout << *it << std::endl;\n}\n```\n\n\u914d\u5217\u306e\u9577\u3055\u3092\u6c42\u3081\u3066\u8db3\u3057\u7b97\u3057\u3066\u30fb\u30fb\u30fb\u3068\u3044\u3046\u30b3\u30fc\u30c9\u3092\u81ea\u5206\u3067\u66f8\u304f\u306e\u306f\u3060\u308b\u3044\u306e\u3067\u3001[``std::begin()``](https://cpprefjp.github.io/reference/iterator/begin.html)/[``std::end()``](https://cpprefjp.github.io/reference/iterator/end.html)\u304c\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u540c\u3058\u304f\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n## stream\u306b\u5bfe\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\n\n\u3053\u308c\u306f\u3042\u307e\u308a\u99b4\u67d3\u307f\u304c\u7121\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306fcpprefjp\u306e\u3082\u306e\u3067\u3059\n\n[istream_iterator - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](https://cpprefjp.github.io/reference/iterator/istream_iterator.html)\n\n```cpp:cpprefjp\u3088\u308a\n#include <iostream>\n#include <iterator>\n#include <sstream>\n#include <algorithm> // for_each\n\nint main()\n{\n  // \u6587\u5b57\u5217\u306e\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\n  std::stringstream ss;\n  ss << 1 << std::endl\n     << 2 << std::endl\n     << 3;\n\n  // \u6587\u5b57\u5217\u306e\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\n  std::istream_iterator<int> it(ss);\n  std::istream_iterator<int> last;\n\n  // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9032\u3081\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u30c7\u30fc\u30bf\u3092\u9806\u306b\u8aad\u307f\u53d6\u308b\n  std::for_each(it, last, [](int x) {\n    std::cout << x << std::endl;\n  });\n}\n```\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7a2e\u985e\n\nEZ-NET: \u72ec\u81ea\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5b9f\u88c5\u3059\u308b - C++ \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\nhttp://program.station.ez-net.jp/special/handbook/cpp/stl/iterator-make.asp\n\n\u306b\u30ad\u30ec\u30a4\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\n![cpprefjp](https://raw.github.com/cpprefjp/image/master/reference/iterator/iterators.png)\ncpprefjp CC-BY\n\n\u3064\u3044\u3067\u306b\niterator - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\nhttps://cpprefjp.github.io/reference/iterator.html\n\n\u3082\u898b\u308b\u3068\u3044\u3044\u3067\u3059\u3002\n\n# Range-based for\u3068\u30a4\u30c6\u30ec\u30fc\u30bf\n\n\u30e1\u30f3\u30d0\u95a2\u6570``begin()``/``end()``\u3068\u3044\u3046\u306f\u3058\u3081\u3068\u7d42\u308f\u308a\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u3042\u308b\u30af\u30e9\u30b9\u3092\u3001\u7bc4\u56f2\u3092\u6301\u3064\u30af\u30e9\u30b9\u3068\u304bRange Concept\u3092\u6e80\u305f\u3057\u305f\u30af\u30e9\u30b9\u3068\u304b\u8a00\u3044\u307e\u3059\u304c\u3001\u3053\u3046\u3044\u3063\u305f\u30af\u30e9\u30b9\u3084C\u5f62\u5f0f\u306e\u914d\u5217\u306a\u3069\u306fRange-based for\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3064\u307e\u308a\n\n```cpp:Range-based_for\u4e0d\u4f7f\u7528\n#include <iostream>\n#include <array>\nint main()\n{\n    std::array<int, 3> arr = { 3, 4, 2 };\n    for(auto it = arr.begin(); it != end(); ++it) std::cout << *it << \", \";\n    return 0;\n}\n```\n\n\u3053\u308c\u304c\n\n```cpp:Range-based_for\u4f7f\u7528\n#include <iostream>\n#include <array>\nint main()\n{\n    std::array<int, 3> arr = { 3, 4, 2 };\n    for(auto&& e : arr) std::cout << e << \", \";\n    return 0;\n}\n```\n\n\u3053\u3046\u66f8\u3051\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3061\u306a\u307f\u306b``auto&&``\u306fRange-based for\u3092\u4f7f\u3046\u3068\u304d\u306e\u304a\u307e\u3058\u306a\u3044\u306a\u306e\u3067\u3001\u304a\u307e\u3058\u306a\u3044\u306e\u539f\u7406\u306b\u3064\u3044\u3066\u306f\n\n- [range-based for loops\u306e\u8981\u7d20\u306e\u578b\u306b\u3064\u3044\u3066](http://qiita.com/rinse_/items/cdfce8aa6a685a8ebe0c)\n- [C99\u304b\u3089C++14\u3092\u99c6\u3051\u629c\u3051\u308bC++\u8b1b\u5ea7 - Qiita](http://qiita.com/yumetodo/items/e49a673afd9a3ecb81a8#range-based-for)\n\n\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3061\u306a\u307f\u306b\u7d30\u5de5\u306a\u3057\u3067\u66f8\u3051\u308b\u30c8\u30ea\u30c3\u30ad\u30fc\u306aRange-based for\u306e\u4f7f\u3044\u65b9\u3068\u3057\u3066\u306f\n\n```cpp:\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306fC\u5f62\u5f0f\u306e\u914d\u5217\u578b\n#include <iostream>\nint main()\n{\n    for(auto&& c : \"arikitari\") std::cout << c << std::endl;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/eqnh68PPOp4Qh1Am\n\n```cpp:initizer_list\u306fRangeConcept\u3092\u6e80\u305f\u3059\n#include <iostream>\nint main()\n{\n    for(auto&& n : { 13, 32 }) std::cout << n << std::endl;\n}\n```\n\nhttp://melpon.org/wandbox/permlink/8e1sxPN3Kq5I2Zg2\n\n\u306a\u3093\u304b\u304c\u3042\u308a\u307e\u3059\u3002\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30e9\u30c3\u30d7\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">struct Circle {<br>  Vec2f pos;<br>  float size;<br>}<br>vector&lt;Circle&gt; circles;<br>\u3053\u306ecircles\u304b\u3089Vec2f* (pos\u306e\u307f\u306e\u914d\u5217\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u307b\u3061\u3044</p>&mdash; Yanai\uff20\u3075\u3061\u3083\u304d\u3061Love (@Lost206) <a href=\"https://twitter.com/Lost206/status/794347773428580352\">2016\u5e7411\u67084\u65e5</a></blockquote>\n\n\n\u4f8b\u3048\u3070openFrameworks\u307f\u305f\u3044\u306b\n\n```cpp\nstruct Vec2f{\n    float x; float y;\n};\nstruct Circle {\n    Vec2f pos;\n    float size;\n};\n```\n\n\u3053\u3093\u306a\u30af\u30e9\u30b9\u304c\u3042\u308b\u3068\u3057\u307e\u3059\u3002\u3055\u3066\u3001\n\n```cpp\nstd::vector<Circle> circles;\n```\n\n\u3053\u3093\u306a\u3075\u3046\u306bvector\u306b\u5165\u308c\u3066\u7ba1\u7406\u3057\u3066\u3044\u305f\u3068\u3057\u3066\u3001pos\u3092\u53d6\u3063\u3066\u304f\u308b\u306e\u306b\n\n```cpp\nstd::vector<Circle> circles;\nfor(auto& c : circles){\n    auto& p = c.pos;\n    std::cout << p.x << p.y << std::endl;\n}\n```\n\n\u306e\u3088\u3046\u306b\u3059\u308b\u306e\u306f\u3060\u308b\u3044\u3001\u3069\u306e\u304f\u3089\u3044\u3060\u308b\u3044\u304b\u3068\u3044\u3046\u3068(ry\u3002\n\u6700\u521d\u304b\u3089``Circle::size``\u306a\u3093\u304b\u7121\u8996\u3057\u3066``Circle::pos``\u3060\u3051\u307b\u3057\u3044\u3002\n\u3064\u307e\u308a\u305d\u306e\u3088\u3046\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u81ea\u4f5c\u3059\u308c\u3070\u3044\u3044\u3093\u3067\u3059\u306d\u3002\n\n## ``std::iterator``\u306f\u975e\u63a8\u5968\u306b\u306a\u3063\u305f\u304b\u3089\u7d99\u627f\u3057\u3066\u306f\u3044\u3051\u306a\u3044\n\u3053\u3053\u3067\u6ce8\u610f\u70b9\u304c\u3042\u308a\u307e\u3059\n\n>[C++1z \u53e4\u304f\u306a\u3063\u305f\u6a5f\u80fd\u3092\u975e\u63a8\u5968\u5316 - Faith and Brave - C++\u3067\u904a\u307c\u3046](http://faithandbrave.hateblo.jp/entry/2016/09/12/145923)\n>C++1z\u304b\u3089\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3044\u304f\u3064\u304b\u306e\u6a5f\u80fd\u304c\u975e\u63a8\u5968\u3068\u306a\u308a\u307e\u3059\u3002**\u975e\u63a8\u5968\u3068\u306a\u3063\u305f\u6a5f\u80fd\u306f\u5c06\u6765\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u524a\u9664\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059**\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\n># std::iterator\u30af\u30e9\u30b9\n\n>\u81ea\u4f5c\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\u3068\u304d\u306b\u57fa\u672c\u30af\u30e9\u30b9\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b**std::iterator\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001\u3053\u308c\u3092\u4f7f\u3063\u3066\u3082\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u3042\u307e\u308a\u7c21\u5358\u306b\u306a\u308a\u307e\u305b\u3093\u3067\u3057\u305f**\u3002\n\n>\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u554f\u984c\u304c\u3088\u308a\u8907\u96d1\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u30b1\u30fc\u30b9\u3082\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u3001**\u975e\u63a8\u5968\u3068\u306a\u308a\u307e\u3059**\u3002\n\n>Boost.Iterator\u306e\u3088\u3046\u306a**\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u7c21\u5358\u306b\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u65b0\u305f\u306a\u4ed5\u7d44\u307f\u306f\u63d0\u4f9b\u3055\u308c\u307e\u305b\u3093\u306e\u3067**\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7bc4\u56f2\u3067\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u6700\u521d\u304b\u3089\u6700\u5f8c\u307e\u3067\u81ea\u5206\u3067\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u306f\u3044\u3002**\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u81ea\u4f5c\u3059\u308b\u3068\u304d\u306f``std::iterator``\u3092\u7d99\u627f\u3059\u308b\u3001\u3068\u3044\u3046\u5e38\u8b58\u306f\u904e\u53bb\u306e\u3082\u306e\u306b\u306a\u308a\u307e\u3059**\u3002\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\uff01\u307f\u305f\u3044\u306a\u89e3\u8aac\u30b5\u30a4\u30c8\u306f\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u70b9\u306b\u5341\u5206\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u4f5c\u3063\u3066\u307f\u305f\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u30fc\u3092\u30e9\u30c3\u30d7\u3057\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\u7df4\u7fd2\nhttps://gist.github.com/yumetodo/b0f82fc44e0e4d842c45f7596a6a0b49\n\n\u3061\u3087\u3063\u3068\u629c\u7c8b\u3057\u307e\u3059\n\n### \u307e\u305a\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\n\n```cpp\ntemplate<typename Iterator, std::enable_if_t<std::is_same<Circle, typename std::iterator_traits<Iterator>::value_type>::value, std::nullptr_t> = nullptr>\nclass circle_pos_iterator\n#if __cplusplus < 201500 //C++17\u3067\u306fstd::iterator\u306f\u6d88\u3048\u308b\n    : std::iterator<typename std::iterator_traits<Iterator>::iterator_category, Vec2f>\n#endif\n{\nprivate:\n    using ref_iterator_type = Iterator;\n    ref_iterator_type it_;\n#if __cplusplus < 201500\n    using base_type = std::iterator<typename std::iterator_traits<Iterator>::iterator_category, Vec2f>;\n#endif\npublic:\n    circle_pos_iterator() = default;\n    circle_pos_iterator(Iterator it) noexcept : it_(it) {}\n    circle_pos_iterator(const circle_pos_iterator&) = default;\n    circle_pos_iterator(circle_pos_iterator&&) = default;\n    circle_pos_iterator& operator=(const circle_pos_iterator&) = default;\n    circle_pos_iterator& operator=(circle_pos_iterator&&) = default;\n    ref_iterator_type get_raw_iterator() const { return it_; }\n#if __cplusplus < 201500  \n    using iterator_category = typename base_type::iterator_category;\n    using value_type = typename base_type::value_type;\n    using difference_type = typename base_type::difference_type;\n    using pointer = typename base_type::pointer;\n    using reference = typename base_type::reference;\n#else\n    using iterator_category = typename std::iterator_traits<Iterator>::iterator_category;\n    using value_type = Vec2f;\n    using difference_type = std::ptrdiff_t;\n    using pointer = Vec2f*;\n    using reference = Vec2f&;\n#endif\n    Vec2f& operator*() noexcept { return it_->pos; }\n    Vec2f operator*() const noexcept { return it_->pos; }\n```\n\n\u3082\u3068\u3068\u306a\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5f62\u304ctemplate\u5f15\u6570\u306e``Iterator``\u3067\u3059\u3002\u3055\u3063\u304d\u3082\u8a00\u3063\u305f\u3088\u3046\u306b``std::iterator``\u306f\u975e\u63a8\u5968\u306b\u306a\u308b\u306e\u3067``#ifdef``\u3067\u5206\u3051\u3066\u3044\u307e\u3059\u3002\n\n\u3082\u3068\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30af\u30e9\u30b9\u5185\u90e8\u306b\u6301\u3063\u3066\u304a\u3044\u3066\u3053\u3044\u3064\u3092\u64cd\u4f5c\u3057\u3064\u3064\u3001\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u30af\u30e9\u30b9\u3068\u3057\u3066public\u306b\u578b\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3079\u304d\u306a\u306e\u306f\u3001``iterator_category``, ``value_type``, ``difference_type``, ``pointer``, ``reference``\u3042\u305f\u308a\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u306e\u8fba\u306f\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002\u7279\u306b``iterator_category``\u306f\u3055\u3063\u304d\u8a00\u3063\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7a2e\u985e\u306b\u5f53\u305f\u308b\u3082\u306e\u3067\u3001SFINAE\u306a\u3093\u304b\u3067\u5229\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u5fd8\u308c\u305a\u306b\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\u3002\n\n\u3042\u3068\u306f\u3072\u305f\u3059\u3089operator overload\u3092\u66f8\u3044\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u304c\u3001\u3082\u3068\u3068\u306a\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7a2e\u985e\u306b\u3088\u3063\u3066\u306f\u5b9a\u7fa9\u3067\u304d\u306a\u3044operator\u3082\u3042\u308b\u306e\u3067\n\n```cpp\n    template<std::enable_if_t<std::is_base_of<std::bidirectional_iterator_tag, iterator_category>::value, std::nullptr_t> = nullptr>\n    circle_pos_iterator& operator--() noexcept{\n        --this->it_;\n        return *this;\n    }\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u5f3e\u3044\u3066\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b``std::enable_if_t``\u306fC++14\u304b\u3089\u306a\u306e\u3067\u3001C++11\u3067\u4f7f\u3046\u3068\u304d\u306f\u81ea\u5206\u3067alias template\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002\n\n### \u6b21\u306bRange\n\n\u6b21\u306b\u3001\u3053\u308c\u3092Range-based for\u306b\u6e21\u3059\u305f\u3081\u306bRange\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```cpp\ntemplate<typename It>\nclass circle_pos_iterator_range{\npublic:\n    using iterator = circle_pos_iterator<It>;\nprivate:\n    iterator begin_; iterator end_;\npublic:\n    circle_pos_iterator_range() = delete;\n    circle_pos_iterator_range(It begin, It end) : begin_(begin), end_(end) {}\n    circle_pos_iterator_range(const circle_pos_iterator_range&) = default;\n    circle_pos_iterator_range(circle_pos_iterator_range&&) = default;\n    circle_pos_iterator_range& operator=(const circle_pos_iterator_range&) = default;\n    circle_pos_iterator_range& operator=(circle_pos_iterator_range&&) = default;\n    iterator& begin() noexcept { return this->begin_; }\n    const iterator& begin() const noexcept { return this->begin_; }\n    iterator& end() noexcept { return this->end_; }\n    const iterator& end() const noexcept { return this->end_; }\n};\n```\n\n``begin()``/``end()``\u304c\u3042\u308b\u3060\u3051\u3067\u3068\u304f\u306b\u4f55\u3082\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n### Factory\u95a2\u6570\n\n\u6700\u5f8c\u306b\u3053\u306eRange\u30af\u30e9\u30b9\u306eFactory\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\u3044\u308f\u3086\u308bmake_xxx\u7cfb\u95a2\u6570\u3067\u3059\u306d\u3002\n\n\u306a\u3093\u3067\u5fc5\u8981\u304b\u3068\u3044\u3046\u3068\u3001C++14\u307e\u3067\u306f\u30af\u30e9\u30b9\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u63a8\u5b9a\u304c\u3067\u304d\u306a\u3044\u306e\u3067\n\n```cpp\nint main(void){\n    std::vector<Circle> v(10);\n    Circle arr[10] = {};\n    for(auto&& p : circle_pos_iterator_range<Circle*>(v)){\n        std::cout << p.x << p.y << std::endl;\n    }\n    for(auto&& p : circle_pos_iterator_range<std::vector<Circle>::iterator>(arr)){\n        std::cout << p.x << p.y << std::endl;\n    }\n\n    return 0;\n}\n```\n\n\u306e\u3088\u3046\u306btemplate\u5b9f\u5f15\u6570\u3092\u66f8\u304f\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3093\u3067\u3059\u306d\u3001\u30c0\u30b5\u3044\u3002\n\n\u305d\u3053\u3067\n\n```cpp\ntemplate<typename It, std::enable_if_t<std::is_same<Circle, typename std::iterator_traits<It>::value_type>::value, std::nullptr_t> = nullptr>\ncircle_pos_iterator_range<It> make_circle_pos_iterator_range(It begin, It end){\n    return {begin, end};\n}\ntemplate<typename Container>\ncircle_pos_iterator_range<typename Container::iterator> make_circle_pos_iterator_range(Container c)\n{\n    return make_circle_pos_iterator_range(c.begin(), c.end());\n}\ntemplate<std::size_t N>\ncircle_pos_iterator_range<Circle*> make_circle_pos_iterator_range(Circle (&arr)[N]){\n    return make_circle_pos_iterator_range(std::begin(arr), std::end(arr));\n}\n```\n\n\u306e\u3088\u3046\u306b\u30e9\u30c3\u30d1\u30fc\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\u3002\u3053\u308c\u3067\n\n```cpp\nint main(void){\n    std::vector<Circle> v(10);\n    Circle arr[10] = {};\n    for(auto&& p : make_circle_pos_iterator_range(v)){\n        std::cout << p.x << p.y << std::endl;\n    }\n    for(auto&& p : make_circle_pos_iterator_range(arr)){\n        std::cout << p.x << p.y << std::endl;\n    }\n\n    return 0;\n}\n```\n\n\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306bC++17\u3067\u306f\n\n\u672c\u306e\u866b: C++17\u306e\u30af\u30e9\u30b9\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u63a8\u5b9a\nhttps://cpplover.blogspot.jp/2016/10/blog-post_11.html\n\n\u30af\u30e9\u30b9\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u63a8\u5b9a\u304c\u3042\u308b\u306e\u3067\u3053\u308c\u306f\u3044\u3089\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\n# \u30b3\u30eb\u30fc\u30c1\u30f3\u3082yield\u6587\u3082\u306a\u3044\u3051\u3069pyhton\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u304c\u6b32\u3057\u3044\u306e\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u9811\u5f35\u308b\n\n\u3054\u3081\u3093\u306a\u3055\u3044\u3001python\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u306e\u524d\u306bpython\u66f8\u3044\u305f\u4e8b\u81ea\u4f53\u304c\u3042\u3093\u307e\u7121\u3044\u3067\u3059\u3002\n\n\u305d\u308c\u306f\u305d\u3046\u3068\u3057\u3066\u3001Range-based for\u3067\u5ef6\u3005\u3068\u4e71\u6570\u3092\u53d6\u3063\u3066\u304f\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\npython\u3067\u8a00\u3048\u3070\n\nhttps://paiza.io/projects/hKd6EzaazTyo1z00ObSegA\n\n```python\nfrom random import randint\ndef random_generator_range(n, min_, max_):\n    while True:\n        yield randint(min_, max_)\n\ndef random_generator_range_with_count(n, min_, max_):\n    i = 0\n    while i < n:\n        yield randint(min_, max_)\n        i += 1\n\nprint(\"generate: random_generator_range\")\nfor n in random_generator_range(10, 0, 10):\n    print(n)\n    if 0 == n:\n        break\nprint(\"generate: random_generator_range_with_count\")\nfor n in random_generator_range_with_count(10, 0, 10):\n    print(n)\n```\n\n\u3053\u3093\u306a\u304b\u3093\u3058\u304b\u306a\uff1f\n\n## \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3063\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3060\u3088\u306d\uff1f(\u7121\u77e5)\n\npython\u8a73\u3057\u304f\u306a\u3044\u306e\u3067(2\u56de\u76ee)\u3088\u304f\u77e5\u308a\u307e\u305b\u3093\u304c\u3001\u30b3\u30fc\u30c9\u4f8b\u898b\u3066\u3044\u308b\u611f\u3058\u3053\u308c\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3088\u306d\uff1f(\u7121\u77e5)\n\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3082``yield``\u3082C++\u306b\u306f\u306a\u3044\u3067\u3059\u304c\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3089\u3042\u308a\u307e\u3059\u3002\u306a\u3089\u3070\u4f5c\u308c\u305d\u3046\u3067\u3059\u3002\n\n## \u5b9f\u88c5\u3057\u305f\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n### \u30a4\u30c6\u30ec\u30fc\u30bf\u30af\u30e9\u30b9\n\n```cpp\ntemplate<typename T>\nclass random_generator_iterator\n\t: public random_generator_iterator_base\n#if __cplusplus < 201500 //C++17\u3067\u306fstd::iterator\u306f\u6d88\u3048\u308b\n\t, public std::iterator<std::input_iterator_tag, T>\n#endif\n{\n\t//\u4e2d\u7565\n\tusing distribution = uniform_normal_distribution<value_type>;\nprivate:\n\tstruct impl {\n\t\tdistribution dist;\n\t\tstd::reference_wrapper<std::mt19937> engine;\n\t\tbool next_is_end;\n\t\timpl() = default;\n\t\timpl(const impl&) = delete;\n\t\timpl(impl&&) = default;\n\t\timpl& operator=(const impl&) = delete;\n\t\timpl& operator=(impl&&) = default;\n\t\timpl(value_type min, value_type max, std::mt19937& mt) : dist(min, max), engine(mt), next_is_end(false) {}\n\t\tvalue_type generate() { return this->dist(this->engine.get()); }\n\t};\n\tstd::unique_ptr<impl> pimpl_;\n\tbool is_end_iterator_;\npublic:\n\tconstexpr random_generator_iterator() noexcept : pimpl_(), is_end_iterator_(true) {};\n\trandom_generator_iterator(const random_generator_iterator&) = delete;\n\trandom_generator_iterator(random_generator_iterator&&) = default;\n\trandom_generator_iterator& operator=(const random_generator_iterator&) = delete;\n\trandom_generator_iterator& operator=(random_generator_iterator&&) = default;\n\n\trandom_generator_iterator(value_type min, value_type max, std::mt19937& mt)\n\t\t: pimpl_(std::make_unique<impl>(min, max, mt)), is_end_iterator_(false)\n\t{}\n\tvoid stop() noexcept { this->pimpl_->next_is_end = true; }\n\tvalue_type operator*() { return this->pimpl_->generate(); }\n\trandom_generator_iterator& operator++() noexcept\n\t{ \n\t\tif (this->pimpl_->next_is_end) this->is_end_iterator_ = true;\n\t\treturn *this;\n\t}\n\trandom_generator_iterator operator++(int) noexcept\n\t{\n\t\tconst auto re = *this;\n\t\tif (this->pimpl_->next_is_end) this->is_end_iterator_ = true;\n\t\treturn re;\n\t}\n\tconstexpr bool operator==(const random_generator_iterator& r) const noexcept { return this->is_end_iterator_ == r.is_end_iterator_; }\n\tconstexpr bool operator!=(const random_generator_iterator& r) const noexcept { return !(*this == r); }\n};\n```\n\n\u307e\u305a\u3001\u4e71\u6570\u751f\u6210\u5668\u3092\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\nC++\u306e\u4e71\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\n\n- \u4e71\u6570\u751f\u6210\u5668\n- Distribution(\u30c7\u30a3\u30b9\u30c8\u30ea\u30d3\u30e5\u30fc\u30b7\u30e7\u30f3)\n\n\u3092\u5206\u96e2\u3057\u305f\u8a2d\u8a08\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3053\u3067**\u4e71\u6570\u751f\u6210\u5668\u306f\u57fa\u672c\u7684\u306b\u306f\u5404\u30b9\u30ec\u30c3\u30c9\u3067\u4e00\u500b\u6301\u3063\u3066\u4f7f\u3044\u307e\u308f\u3059\u3053\u3068\u3092\u60f3\u5b9a\u3057\u3066\u3044\u307e\u3059**\u3002\n\u3064\u307e\u308a\u4e71\u6570\u751f\u6210\u3092\u884c\u3046\u30a4\u30c6\u30ec\u30fc\u30bf\u306f**\u4e71\u6570\u751f\u6210\u5668\u3078\u306e\u53c2\u7167\u3092\u4fdd\u6301\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059**\u3002\n\u3068\u3044\u3046\u3053\u3068\u306f``std::reference_wrapper``\u306e\u51fa\u756a\u3067\u3059\u306d\uff01\n\n#### range-based for\u306e\u6ce8\u610f\u70b9\n\nC++14\u307e\u3067\u306f\u3001range-based for\u306f\n\n```cpp:C++14\n{\n    auto && __range = range_expression ; \n    for (auto __begin = begin_expr, __end = end_expr; __begin != __end; ++__begin) { \n        range_declaration = *__begin; \n        loop_statement \n    } \n} \n```\n\n\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002**\u3064\u307e\u308a\u3001begin\u30a4\u30c6\u30ec\u30fc\u30bf\u3068end\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u540c\u3058\u578b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002**\n\nC++17\u304b\u3089\u306f\n\n```cpp:C++17\n{\n    auto && __range = range_expression ; \n    auto __begin = begin_expr ;\n    auto __end = end_expr ;\n    for ( ; __begin != __end; ++__begin) { \n        range_declaration = *__begin; \n        loop_statement \n    } \n} \n```\n\n\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30b7\u30e5\u30ac\u30fc\u3068\u306a\u308b\u306e\u3067\u3001\u9055\u3046\u578b\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n#### Forward \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u6ce8\u610f\u70b9\n\nForward \u30a4\u30c6\u30ec\u30fc\u30bf\u306fDefaultConstructible \u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n#### \u3064\u307e\u308aDefaultConstructible\u306b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n\nC++14\u307e\u3067\u3067\u306f\u3001end\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5b9f\u88c5\u306e\u305f\u3081\u306b\u3001DefaultConstructible\u306b\u3057\u305f\u307b\u3046\u304c\u697d\u3068\u3044\u3046\u4e8b\u60c5\u3068\u3001Forward \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8981\u4ef6\u3067DefaultConstructible\u3092\u8981\u6c42\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u7406\u7531\u304b\u3089\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001``std::reference_wrapper``\u306fDefaultConstructible\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u305d\u3053\u3067\u3001pimpl\u30a4\u30c7\u30aa\u30e0\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3010c++\u3011\u6fc0\u9707\u304c\u8d70\u3063\u305f\u3001Pimpl\u30a4\u30c7\u30a3\u30aa\u30e0 - Qiita\nhttp://qiita.com/ashdik/items/b6b9924113f7e8d531cf\n\n### Range\u30af\u30e9\u30b9\n\n```cpp\ntemplate<typename T>\nclass random_generator_range {\npublic:\n\tusing value_type = T;\n\tusing iterator = random_generator_iterator<value_type>;\nprivate:\n\tvalue_type min_;\n\tvalue_type max_;\n\tstd::reference_wrapper<std::mt19937> mt_;\npublic:\n\trandom_generator_range() = delete;\n\trandom_generator_range(const random_generator_range&) = delete;\n\trandom_generator_range(random_generator_range&&) = default;\n\trandom_generator_range& operator=(const random_generator_range&) = delete;\n\trandom_generator_range& operator=(random_generator_range&&) = delete;\n\trandom_generator_range(value_type min, value_type max, std::mt19937& mt)\n\t\t: min_(min), max_(max), mt_(mt) {}\n\titerator begin() noexcept { return{ min_, max_, mt_.get() }; }\n\titerator end() noexcept { return{}; }\n};\n```\n\n\u307e\u3042\u3068\u304f\u306b\u96e3\u3057\u3044\u3053\u3068\u306f\u3057\u3066\u3044\u306a\u3044\u3067\u3059\u306d\u3002\n\n### \u3067\u304d\u305f\u3082\u306e\n\n```cpp\nstatic auto engine = create_engine();\nint main()\n{\n\tstatic_assert(is_random_generator_iterator_v<random_generator_iterator<int>>, \"err\");\n\tstd::cout << \"generate: random_generator_iterator\" << std::endl;\n\tfor (auto ri = random_generator_iterator<int>(0, 10, engine); ri != random_generator_iterator<int>{}; ++ri) {\n\t\tconst auto n = *ri;\n\t\tstd::cout << n << std::endl;\n\t\tif (0 == n) ri.stop();\n\t}\n\tstd::cout << \"generate: random_generator_range\" << std::endl;\n\tfor (auto&& n : random_generator_range<int>(0, 10, engine)) {\n\t\tstd::cout << n << std::endl;\n\t\tif (0 == n) break;\n\t}\n\tstatic_assert(is_random_generator_iterator_v<random_generator_iterator_with_count<int>>, \"err\");\n\tstd::cout << \"generate: random_generator_iterator_with_count\" << std::endl;\n\tfor (auto ri = random_generator_iterator_with_count<int>(0, 10, engine); ri != random_generator_iterator_with_count<int>(10); ++ri) {\n\t\tstd::cout << *ri << std::endl;\n\t}\n\tstd::cout << \"generate: random_generator_range_with_count\" << std::endl;\n\tfor (auto&& n : random_generator_range_with_count<int>(10, 0, 10, engine)) {\n\t\tstd::cout << n << std::endl;\n\t}\n\n\treturn 0;\n}\n```\n\n\u540c\u69d8\u306b\u3057\u3066\u3001``random_generator_iterator_with_count``\u3068``random_generator_range_with_count``\u3082\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\n``create_engine``\u306f\u4e71\u6570\u751f\u6210\u5668\u3092\u521d\u671f\u5316\u3057\u3066\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\u4e2d\u3067\u306f\nhttps://github.com/yumetodo/random_generator_iterator/blob/master/random.hpp\n\u76f8\u5f53\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u3044\u307e\u3059\u3002\u6b63\u76f4\u3053\u3053\u307e\u3067\u51dd\u3063\u305fseed\u751f\u6210\u306f\u5fc5\u8981\u306a\u3044\u30fb\u30fb\u30fb\u3002\n\n# ``int.TryParse``\u304c\u6b32\u3057\u3044\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">C++ \u3067int.tryParse\u307f\u305f\u3044\u306a\u306e\u3063\u3066\u3042\u308b\u306e\u304b\u306a(\u00b4\u30fb\u03c9\u30fb\uff40)\u3044\u307e\u3044\u3061\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u30fb\u30fb</p>&mdash; \u30a4\u30ed\u30cf\u3320 (@iroha_thesleepy) <a href=\"https://twitter.com/iroha_thesleepy/status/812567873029750784\">2016\u5e7412\u670824\u65e5</a></blockquote>\n\n``int.TryParse``\u3068\u3044\u3046\u306e\u306fC#\u3068\u3044\u3046\u304b.NET\u306b\u3042\u308b\u3084\u3064\u3067\u3059\u306d\u3002\n\n>[Int32.TryParse \u30e1\u30bd\u30c3\u30c9 (String, Int32) (System) | MSDN](https://msdn.microsoft.com/ja-jp/library/f02979c7(v=vs.110).aspx?cs-save-lang=1&cs-lang=csharp#code-snippet-1)\n\n>```csharp\npublic static bool TryParse(\n\tstring s,\n\tout int result\n)\n```\n\n```csharp\nint value;\nint.TryParse( \"100\" , out value );//value\u306f100\n```\n\n\u3082\u3061\u308d\u3093C++\u306b\u3082C++11\u3067``std::stoi``\u304c\u8ffd\u52a0\u3055\u308c\u305f\u306e\u3067\u3001\n\n```cpp\nconst int value = std::stoi(\"100\");//100\n```\n\n\u306e\u3088\u3046\u306b\u304b\u3051\u307e\u3059\u3002\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/azaika_\">@azaika_</a> \u306a\u308b\u307b\u3069\u3002\u4f8b\u5916\u3067\u3059\u304b\u3002\u3002\u3002\u3067\u304d\u308c\u3070false\u8fd4\u3057\u3066\u307b\u3057\u304b\u3063\u305f\uff57</p>&mdash; \u30a4\u30ed\u30cf\u3320 (@iroha_thesleepy) <a href=\"https://twitter.com/iroha_thesleepy/status/812569523505098752\">2016\u5e7412\u670824\u65e5</a></blockquote>\n\n\u3057\u304b\u3057\u3001\u4f8b\u5916\u3092\u4f7f\u3046\u3068\u3044\u3046\u306e\u3068\u3001c\u5f62\u5f0f\u306e\u6587\u5b57\u5217\u3067\u3082\u4e00\u5ea6``std::string``\u3092\u69cb\u7bc9\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\n## ``int.TryParse``\u3092\u81ea\u4f5c\u3057\u3088\u3046\n\n\u3064\u307e\u308a\u3001``std::stoi``\u306e\u5b9f\u88c5\u306b\u3082\u4f7f\u308f\u308c\u308b``strtol``\u7cfb\u95a2\u6570\u3092\u547c\u3073\u51fa\u305b\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\n\n### ``strtol``\u7cfb\u95a2\u6570\u3092\u4f7f\u3046\u3068\u304d\u306e\u6ce8\u610f\u70b9\n\n\u3068\u3053\u308d\u304c\u3053\u306e\u95a2\u6570\u3001\u6b63\u3057\u304f\u4f7f\u3046\u306e\u306f\u306a\u304b\u306a\u304b\u5927\u5909\u3060\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\nC\u8a00\u8a9e\u3067\u5b89\u5168\u306b\u6a19\u6e96\u5165\u529b\u304b\u3089\u6570\u5024\u3092\u53d6\u5f97 - Qiita\nhttp://qiita.com/yumetodo/items/238751b879c09b56234b\n\n\u3067\u3082\u89e6\u308c\u307e\u3057\u305f\u304c\u3001\u6539\u3081\u3066\u66f8\u3044\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\nC11\u898f\u683c\u66f8\u306b\u3088\u308c\u3070\nhttp://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n\n\n>7.22.1.4 The strtol, strtoll, strtoul, and strtoull functions\nSynopsis\n\n>1 \n\n>```c\n#include <stdlib.h>\nlong int strtol(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\nlong long int strtoll(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\nunsigned long int strtoul(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\nunsigned long long int strtoull(\nconst char * restrict nptr,\nchar ** restrict endptr,\nint base);\n```\n\n>7 If the subject sequence is empty or does not have the expected form, **no conversion is\nperformed; the value of nptr is stored in the object pointed to by endptr**, provided\nthat endptr is not a null pointer.\nReturns\n\n>8 The strtol, strtoll, strtoul, and strtoull functions return the converted\nvalue, if any. **If no conversion could be performed, zero is returned.** If the correct value\nis outside the range of representable values, LONG_MIN, LONG_MAX, LLONG_MIN,\nLLONG_MAX, ULONG_MAX, or ULLONG_MAX is returned (according to the return type\nand sign of the value, if any), and the value of the macro ERANGE is stored in errno.\n\n\u3068\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30a8\u30e9\u30fc\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u306b\u306f\u3001**\u623b\u308a\u5024\u3084``errno``\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u3060\u3051\u3067\u306f\u4e0d\u5145\u5206**\u3067``endptr``\u3082\u6e21\u3057\u3066\u78ba\u8a8d\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\n\u86c7\u8db3\u3067\u3059\u304c\u3001C\u3067``scanf``\u7cfb\u95a2\u6570\u3084``stoi``\u7cfb\u95a2\u6570\u3092\u4f7f\u3063\u3066\u306f\u3044\u3051\u306a\u3044\u7406\u7531\u306f\u3053\u308c\u3060\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\n### \u5b9f\u88c5\u3057\u305f\n\n[yumetodo / integer_parse_iterator / \u30bd\u30fc\u30b9 / try_integer_parse.hpp \u2014 Bitbucket](https://bitbucket.org/yumetodo/integer_parse_iterator/src/f99b31e98997fe524e1a0b884c94cded37303218/try_integer_parse.hpp?at=master&fileviewer=file-view-default)\n\n```cpp\ntemplate<typename T, concept_t<\n\tstd::is_signed<T>::value && (sizeof(T) <= sizeof(long))\n> = nullptr>\ninline bool try_parse(const char* s, T& result, T min = std::numeric_limits<T>::min(), T max = std::numeric_limits<T>::max()) noexcept\n{\n\terrno = 0;\n\tchar* endptr;\n\tconst long t = strtol(s, &endptr, 10);\n\tif (0 != errno || (0 == t && endptr == s) || t < min || max < t) {\n\t\treturn false;\n\t}\n\telse {\n\t\tresult = static_cast<T>(t);\n\t\treturn true;\n\t}\n}\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3002\u5b9f\u969b\u306b\u306f\u3059\u3079\u3066\u306e\u6574\u6570\u578b\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306b\u3001\u3082\u3046\u3059\u3053\u3057\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u30ea\u30f3\u30af\u5148\u53c2\u7167\u3002\n\n## ``int.TryParse``\u306e\u554f\u984c\u70b9\n\n>TryParse\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u4e00\u6642\u5909\u6570\u3092\u7528\u610f\u3057\u305f\u304f\u306a\u3044\u2026 - Qiita\n>http://qiita.com/Temarin/items/9aac6c1f569fc2113e0d\n\n>TryParse\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3001out\u3084ref\u3092\u4f7f\u3046\u306e\u3067\u3001\u4e00\u6642\u5909\u6570\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n>C# 6.0\u3067\u3053\u3093\u306a\u306e\u304c\u4e88\u5b9a\u3055\u308c\u3066\u3044\u305f\u304c\u3001\u6b8b\u5ff5\u306a\u304c\u3089\u5374\u4e0b\u3055\u308c\u305f\u3088\u3046\u3060\u3002\n\n>```csharp\nint.TryParse( \"100\" , out int value );\n```\n\n\u306a\u3093\u3060\u305d\u306e\u69cb\u6587\u30fb\u30fb\u30fb\u3001\u307e\u3042\u305d\u308c\u306f\u3055\u3066\u304a\u304d\u3001\u30d1\u30fc\u30b9\u7d50\u679c\u304c\u623b\u308a\u5024\u3068\u3057\u3066\u307b\u3057\u3044\u3067\u3059\u3088\u306d\u3002const\u306b\u3067\u304d\u306a\u3044\u3057\u3002\n\n## \u305d\u3053\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3059\u3088\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">C++\u306eoptional\u3068\u304bC#\u306eNullable\u3068\u304b\u3001\u6700\u8fd1\u306b\u306a\u3063\u30660\u307e\u305f\u306f1\u8981\u7d20\u306e\u30b3\u30f3\u30c6\u30ca\u306b\u898b\u3048\u3066\u304d\u305f\u3002foreach\u306b\u7a81\u3063\u8fbc\u3081\u3066\u3082\u3044\u3044\u3068\u601d\u3046\u3093\u3060\u3051\u3069\u3001\u73fe\u5b9f\u306f\u306a\u305c\u304b\u7a81\u3063\u8fbc\u3081\u306a\u3044\u3002\u4e0d\u601d\u8b70\u3060\u3002</p>&mdash; \u30d7\u30d7\u30d7\u30e9\u30f3\u30c9\u306e\u30d7\u30ea\u30f3\u30b9 RiSK (@sscrisk) <a href=\"https://twitter.com/sscrisk/status/702699311050588160\">2016\u5e742\u670825\u65e5</a></blockquote>\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">sprout::optional \u306b\u30b3\u30f3\u30c6\u30ca\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002<a href=\"https://t.co/CgbXSNpl5D\">https://t.co/CgbXSNpl5D</a><a href=\"https://t.co/DFw7i4Nby2\">https://t.co/DFw7i4Nby2</a></p>&mdash; \u72c2\u3048\u308b\u4e2d\uff13\u5973\u5b50\u30dc\u30ec\u30ed\u6751\u4e0a\uff0f\u9676\u82b8C++er (@bolero_MURAKAMI) <a href=\"https://twitter.com/bolero_MURAKAMI/status/702792883791749120\">2016\u5e742\u670825\u65e5</a></blockquote>\n\n\u3053\u308c\u3092\u307f\u3066\u601d\u3046\u3093\u3067\u3059\u306d\u3002\n\n```cpp\nfor (int n : integer_parse<int>(s)) {\n\tstd::cout << n << std::endl;\n}\n```\n\n\u3053\u3093\u306a\u98a8\u306b\u304b\u3051\u308c\u3070\u3044\u3044\u3093\u3058\u3083\u306d\uff1f\u3068\u3002\n\n``sprout::optional``\u306f\u305d\u308c\u81ea\u8eab\u3092\u30b3\u30f3\u30c6\u30ca\u306b\u3057\u3066\u3001range-based for\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u7121\u52b9\u306a\u3068\u304d\u306f\u4f55\u3082\u305b\u305a\u3001\u6709\u52b9\u306a\u3068\u304d\u306f\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u305b\u308b\u3068\u3044\u3046\u7d20\u6674\u3089\u3057\u3044\u6a5f\u80fd\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u540c\u3058\u3088\u3046\u306b\u3001\u30d1\u30fc\u30b5\u30fc\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3001range-based for\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u5909\u63db\u3067\u304d\u306a\u3044\u3068\u304d\u306f\u4f55\u3082\u305b\u305a\u3001\u5909\u63db\u3057\u305f\u3068\u304d\u306f\u5909\u63db\u7d50\u679c\u3092\u53d6\u308c\u308c\u3070\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n**\u3064\u307e\u308a\u305d\u3046\u3044\u3046\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u304b\u3051\u3070\u3044\u3044\u3093\u3067\u3059\u306d**\n\n## \u5b9f\u88c5\u3057\u305f\n\n[yumetodo / integer_parse_iterator / \u30bd\u30fc\u30b9 / integer_parse_iterator.hpp \u2014 Bitbucket](https://bitbucket.org/yumetodo/integer_parse_iterator/src/f99b31e98997fe524e1a0b884c94cded37303218/integer_parse_iterator.hpp?at=master&fileviewer=file-view-default)\n\n### \u307e\u305a\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u5909\u63db\u3092\u5148\u306e``try_parse``\u3092\u547c\u3073\u51fa\u3057\u3066\u7d50\u679c\u3092\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```cpp\ntemplate<typename T>\nclass integer_parse_iterator\n{\n\t//\u4e2d\u7565\nprivate:\n\tusing lim = std::numeric_limits<value_type>;\n\tvalue_type re_;\n\tbool is_not_end_iterator_;\npublic:\n\tconstexpr integer_parse_iterator() noexcept : re_(), is_not_end_iterator_(false) {}\n\tinteger_parse_iterator& operator=(integer_parse_iterator&&) = default;\n\tinteger_parse_iterator(const std::string& s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n\t{\n\t\tthis->is_not_end_iterator_ = try_parse(s, this->re_, min, max);\n\t}\n\tinteger_parse_iterator(const char* s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n\t{\n\t\tthis->is_not_end_iterator_ = try_parse(s, this->re_, min, max);\n\t}\n\tvalue_type operator*() const noexcept { return this->re_; }\n\tinteger_parse_iterator& operator++() noexcept\n\t{\n\t\tthis->re_ = 0;\n\t\tthis->is_not_end_iterator_ = false;\n\t\treturn *this;\n\t}\n\tinteger_parse_iterator operator++(int) noexcept\n\t{\n\t\tconst auto re = *this;\n\t\tthis->re_ = 0;\n\t\tthis->is_not_end_iterator_ = false;\n\t\treturn re;\n\t}\n\t//\u4ee5\u4e0b\u7565\n}\n```\n\n``operator*``\u306f\u4fdd\u5b58\u3057\u305f\u7d50\u679c\u3092\u53d6\u308b\u3060\u3051\u306b\u3057\u3066\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u305f\u6642\u306f\u554f\u7b54\u7121\u7528\u3067end iterator\u306b\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n### \u6b21\u306bRange\n\n\u5909\u63db\u3092\u4f55\u5ea6\u3082\u884c\u308f\u306a\u3044\u3088\u3046\u306b\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30e1\u30f3\u30d0\u30fc\u306b\u6301\u3064\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```cpp\ntemplate<typename T>\nclass integer_parse_range {\npublic:\n\tusing value_type = T;\n\tusing iterator = integer_parse_iterator<value_type>;\nprivate:\n\tusing lim = std::numeric_limits<value_type>;\n\titerator it_;\npublic:\n\tinteger_parse_range() = delete;\n\tinteger_parse_range(const integer_parse_range&) = delete;\n\tinteger_parse_range(integer_parse_range&&) = default;\n\tinteger_parse_range& operator=(const integer_parse_range&) = delete;\n\tinteger_parse_range& operator=(integer_parse_range&&) = delete;\n\tinteger_parse_range(const std::string& s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n\t\t:it_(s, min, max)\n\t{}\n\tinteger_parse_range(const char* s, value_type min = lim::min(), value_type max = lim::min()) noexcept\n\t\t:it_(s, min, max)\n\t{}\n\titerator begin() noexcept { return it_; }\n\tconstexpr iterator end() const noexcept { return{}; }\n};\n```\n\n### \u6700\u5f8c\u306bFactory\u95a2\u6570\u3092\n\n```cpp\ntemplate<typename T>\ninline integer_parse_range<T> integer_parse(const std::string& s, T min = std::numeric_limits<T>::min(), T max = std::numeric_limits<T>::max()) noexcept\n{\n\treturn{ s, min, max };\n}\ntemplate<typename T>\ninline integer_parse_range<T> integer_parse(const char* s, T min = std::numeric_limits<T>::min(), T max = std::numeric_limits<T>::max()) noexcept\n{\n\treturn{ s, min, max };\n}\n```\n\n## \u3067\u304d\u305f\u3082\u306e\n\n[yumetodo / integer_parse_iterator / \u30bd\u30fc\u30b9 / main.cpp \u2014 Bitbucket](https://bitbucket.org/yumetodo/integer_parse_iterator/src/f99b31e98997fe524e1a0b884c94cded37303218/main.cpp?at=master&fileviewer=file-view-default)\n\n```cpp\nint main()\n{\n\tusing std::string;\n\tstd::cout << \"try_parse\" << std::endl;\n\tstring s = \"1123\";\n\t{\n\t\tstd::uint16_t re;\n\t\tif (try_parse(s, re)) {\n\t\t\tstd::cout << re << std::endl;\n\t\t}\n\t}\n\tstd::cout << \"integer_parse_iterator(expect no output)\" << std::endl;\n\tfor (integer_parse_iterator<std::int8_t> it; it != integer_parse_iterator<std::int8_t>{}; ++it) {\n\t\tstd::cout << *it << std::endl;\n\t}\n\tstd::cout << \"integer_parse\" << std::endl;\n\tfor (int n : integer_parse<int>(s)) {\n\t\tstd::cout << n << std::endl;\n\t}\n}\n```\n\n1123\u306f``std::int8_t``\u3067\u8868\u305b\u306a\u3044\u7bc4\u56f2\u306a\u306e\u30671\u3064\u76ee\u306erange-based for\u306e\u4e2d\u8eab\u306f\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\u3002\n1123\u306f\u591a\u304f\u306e\u51e6\u7406\u7cfb\u3067\u306fint\u578b\u3067\u8868\u305b\u308b\u306e\u3067\u30012\u3064\u76ee\u306erange-based for\u306e\u4e2d\u8eab\u306f\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\u7cfb\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5909\u63db\u7d50\u679c\u306e\u5909\u6570\u306frange-based for\u306e\u4e2d\u3067\u306e\u307f\u6709\u52b9\u306b\u306a\u308b\u306e\u3067\u3001\u30b9\u30b3\u30fc\u30d7\u304c\u5927\u304d\u304f\u306a\u3089\u305a\u306b\u6e08\u307f\u307e\u3059\u3002\n\n# \u7d50\u8ad6\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u308f\u308a\u3068\u306a\u3093\u3067\u3082\u3067\u304d\u308b\u3002**\u304c\u3001\u4f5c\u308b\u306e\u306b\u66f8\u304f\u30b3\u30fc\u30c9\u304c\u3082\u306e\u3059\u3054\u304f\u591a\u3044\u3002\u3082\u3046\u5c11\u3057\u304b\u3093\u305f\u3093\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u6b32\u3057\u3044\u3002**\n~~\u9006\u306b\u8a00\u3048\u3070\u884c\u6570\u3067\u30b3\u30fc\u30c9\u304c\u8a55\u4fa1\u3055\u308c\u308b\u3088\u3046\u306a\u8077\u5834\u3067\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5897\u7523\u3057\u307e\u3057\u3087\u3046~~\n\n\u3084\u3063\u3071\u308aC++17\u3067\u306f\u5165\u3089\u306a\u304b\u3063\u305f\u3051\u3069\u3001\u975e\u540c\u671f\u5468\u308a(``co_async``/``co_await``)\u3068\u304b\u30b3\u30eb\u30fc\u30c1\u30f3\u307b\u3057\u3044\u3088\u306d\u3002\n\n>[Visual Studio 2015 Update 1 \u3067 C++ <experimental/generator> \u3092\u8a66\u3057\u3066\u307f\u308b - espresso3389\u306e\u65e5\u8a18](http://espresso3389.hatenablog.com/entry/2015/12/03/015157)\n\n>```cpp\n#include <cstdio>\n#include <random>\n#include <experimental/generator>\nauto random()\n{\n  std::mt19937 r;\n  for (;;)\n    yield r();\n}\nint main()\n{\n  for (auto r : random())\n    std::printf(\"%d\\n\", r);\n}\n```\n\n\u30b9\u30c3\u30ad\u30ea\u3059\u308b\u3057\u3002\n\n---\n\n\u30fb\u30fb\u30fb\u3042\u3001\u3053\u308c\u521d\u5fc3\u8005C++Advent Calendar\u306e\u8a18\u4e8b\u306a\u306e\u306b\u3001SFINAE\u3068\u304b\u5168\u304f\u8aac\u660e\u306a\u3057\u306b\u66f8\u3044\u3066\u3057\u307e\u3063\u305f\u3002\n\n# \u521d\u5fc3\u8005C++Advent Calendar 2016\n\n\u660e\u65e5\u306f\u3044\u306a\u3080\u5148\u751f\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/yumetodo\">@yumetodo</a> <a href=\"https://twitter.com/Lost206\">@Lost206</a> \u306f\u3088\uff01</p>&mdash; \u3044\u306a\u3080\u306e\u307f\u305f\u307e\uff5c\u8d85\u30a6\u30a3\u30b6\u30fc\u30c9\u7d1aC++er (@enum_hack) <a href=\"https://twitter.com/enum_hack/status/809394764214743040\">2016\u5e7412\u670815\u65e5</a></blockquote>\n\n\u3042\u3089\u305f\u3081\u3066\u9045\u523b\u3059\u307f\u307e\u305b\u3093\u3002\n\n[<< 14\u65e5\u76ee | \u30dd\u30a4\u30f3\u30bf\u3068\u4ef2\u826f\u304f\u306a\u308b\u8a71 \u3010\u521d\u5fc3\u8005C++er Advent Calendar 2016 - 14\u65e5\u76ee\u3011 - \u3092\u308b\u3075\u3061\u3083\u3093\u306e\u30d6\u30ed\u30b0](http://wolf-cpp.hateblo.jp/entry/2016/12/20/063530) || [16\u65e5\u76ee | C++\u306e\u4e71\u6570\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4f7f\u3044\u306b\u304f\u3044\u8a71 >>](http://qiita.com/_EnumHack/items/25fc998873d1bc7d2276)\n", "tags": ["C++", "C++11", "C++14", "C++17"]}