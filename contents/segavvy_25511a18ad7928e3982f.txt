{"context": "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 :: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\u3002\n\n\u7b2c5\u7ae0: \u4fc2\u308a\u53d7\u3051\u89e3\u6790\n\n\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092CaboCha\u3092\u4f7f\u3063\u3066\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.cabocha\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n\n46. \u52d5\u8a5e\u306e\u683c\u30d5\u30ec\u30fc\u30e0\u60c5\u5831\u306e\u62bd\u51fa\n\n45\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6539\u5909\u3057\uff0c\u8ff0\u8a9e\u3068\u683c\u30d1\u30bf\u30fc\u30f3\u306b\u7d9a\u3051\u3066\u9805\uff08\u8ff0\u8a9e\u306b\u4fc2\u3063\u3066\u3044\u308b\u6587\u7bc0\u305d\u306e\u3082\u306e\uff09\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u51fa\u529b\u305b\u3088\uff0e45\u306e\u4ed5\u69d8\u306b\u52a0\u3048\u3066\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3092\u6e80\u305f\u3059\u3088\u3046\u306b\u305b\u3088\uff0e\n\n\u9805\u306f\u8ff0\u8a9e\u306b\u4fc2\u3063\u3066\u3044\u308b\u6587\u7bc0\u306e\u5358\u8a9e\u5217\u3068\u3059\u308b\uff08\u672b\u5c3e\u306e\u52a9\u8a5e\u3092\u53d6\u308a\u9664\u304f\u5fc5\u8981\u306f\u306a\u3044\uff09\n\u8ff0\u8a9e\u306b\u4fc2\u308b\u6587\u7bc0\u304c\u8907\u6570\u3042\u308b\u3068\u304d\u306f\uff0c\u52a9\u8a5e\u3068\u540c\u4e00\u306e\u57fa\u6e96\u30fb\u9806\u5e8f\u3067\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u4e26\u3079\u308b\n\n\u300c\u543e\u8f29\u306f\u3053\u3053\u3067\u59cb\u3081\u3066\u4eba\u9593\u3068\u3044\u3046\u3082\u306e\u3092\u898b\u305f\u300d\u3068\u3044\u3046\u4f8b\u6587\uff08neko.txt.cabocha\u306e8\u6587\u76ee\uff09\u3092\u8003\u3048\u308b\uff0e \u3053\u306e\u6587\u306f\u300c\u59cb\u3081\u308b\u300d\u3068\u300c\u898b\u308b\u300d\u306e\uff12\u3064\u306e\u52d5\u8a5e\u3092\u542b\u307f\uff0c\u300c\u59cb\u3081\u308b\u300d\u306b\u4fc2\u308b\u6587\u7bc0\u306f\u300c\u3053\u3053\u3067\u300d\uff0c\u300c\u898b\u308b\u300d\u306b\u4fc2\u308b\u6587\u7bc0\u306f\u300c\u543e\u8f29\u306f\u300d\u3068\u300c\u3082\u306e\u3092\u300d\u3068\u89e3\u6790\u3055\u308c\u305f\u5834\u5408\u306f\uff0c\u6b21\u306e\u3088\u3046\u306a\u51fa\u529b\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\n\u59cb\u3081\u308b  \u3067      \u3053\u3053\u3067\n\u898b\u308b    \u306f \u3092   \u543e\u8f29\u306f \u3082\u306e\u3092\n\n\n\n\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\nmain.py\n# coding: utf-8\nimport CaboCha\nimport re\n\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.cabocha'\nfname_result = 'result.txt'\n\n\ndef parse_neko():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\u3066neko.txt.cabocha\u306b\u4fdd\u5b58\u3059\u308b\n    '''\n    with open(fname) as data_file, \\\n            open(fname_parsed, mode='w') as out_file:\n\n        cabocha = CaboCha.Parser()\n        for line in data_file:\n            out_file.write(\n                cabocha.parse(line).toString(CaboCha.FORMAT_LATTICE)\n            )\n\n\nclass Morph:\n    '''\n    \u5f62\u614b\u7d20\u30af\u30e9\u30b9\n    \u8868\u5c64\u5f62\uff08surface\uff09\u3001\u57fa\u672c\u5f62\uff08base\uff09\u3001\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u3092\n    \u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n    '''\n    def __init__(self, surface, base, pos, pos1):\n        '''\u521d\u671f\u5316'''\n        self.surface = surface\n        self.base = base\n        self.pos = pos\n        self.pos1 = pos1\n\n    def __str__(self):\n        '''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n        return 'surface[{}]\\tbase[{}]\\tpos[{}]\\tpos1[{}]'\\\n            .format(self.surface, self.base, self.pos, self.pos1)\n\n\nclass Chunk:\n    '''\n    \u6587\u7bc0\u30af\u30e9\u30b9\n    \u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\u3001\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\u3001\n    \u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n    '''\n\n    def __init__(self):\n        '''\u521d\u671f\u5316'''\n        self.morphs = []\n        self.srcs = []\n        self.dst = -1\n\n    def __str__(self):\n        '''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n        surface = ''\n        for morph in self.morphs:\n            surface += morph.surface\n        return '{}\\tsrcs{}\\tdst[{}]'.format(surface, self.srcs, self.dst)\n\n    def normalized_surface(self):\n        '''\u53e5\u8aad\u70b9\u306a\u3069\u306e\u8a18\u53f7\u3092\u9664\u3044\u305f\u8868\u5c64\u5f62'''\n        result = ''\n        for morph in self.morphs:\n            if morph.pos != '\u8a18\u53f7':\n                result += morph.surface\n        return result\n\n    def chk_pos(self, pos):\n        '''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n        \u623b\u308a\u5024\uff1a\n        \u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u5834\u5408\u306fTrue\n        '''\n        for morph in self.morphs:\n            if morph.pos == pos:\n                return True\n        return False\n\n    def get_morphs_by_pos(self, pos, pos1=''):\n        '''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u306e\u5f62\u614b\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n        pos1\u306e\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306fpos\u306e\u307f\u3067\u5224\u5b9a\u3059\u308b\n\n        \u623b\u308a\u5024\uff1a\n        \u5f62\u614b\u7d20\uff08morph\uff09\u306e\u30ea\u30b9\u30c8\u3001\u8a72\u5f53\u5f62\u614b\u7d20\u304c\u306a\u3044\u5834\u5408\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\n        '''\n        if len(pos1) > 0:\n            return [res for res in self.morphs\n                    if (res.pos == pos) and (res.pos1 == pos1)]\n        else:\n            return [res for res in self.morphs if res.pos == pos]\n\n    def get_kaku_prt(self):\n        '''\u52a9\u8a5e\u30921\u3064\u8fd4\u3059\n        \u8907\u6570\u3042\u308b\u5834\u5408\u306f\u683c\u52a9\u8a5e\u3092\u512a\u5148\u3057\u3001\u6700\u5f8c\u306e\u52a9\u8a5e\u3092\u8fd4\u3059\u3002\n\n        \u623b\u308a\u5024\uff1a\n        \u52a9\u8a5e\u3001\u306a\u3044\u5834\u5408\u306f\u7a7a\u6587\u5b57\u5217\n        '''\n        prts = self.get_morphs_by_pos('\u52a9\u8a5e')\n        if len(prts) > 1:\n\n            # 2\u3064\u4ee5\u4e0a\u52a9\u8a5e\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u683c\u52a9\u8a5e\u3092\u512a\u5148\n            kaku_prts = self.get_morphs_by_pos('\u52a9\u8a5e', '\u683c\u52a9\u8a5e')\n            if len(kaku_prts) > 0:\n                prts = kaku_prts\n\n        if len(prts) > 0:\n            return prts[-1].surface     # \u6700\u5f8c\u3092\u8fd4\u3059\n        else:\n            return ''\n\n\ndef neco_lines():\n    '''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n    \u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\n    1\u6587\u305a\u3064Chunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n    \u623b\u308a\u5024\uff1a\n    1\u6587\u306eChunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\n    '''\n    with open(fname_parsed) as file_parsed:\n\n        chunks = dict()     # idx\u3092key\u306bChunk\u3092\u683c\u7d0d\n        idx = -1\n\n        for line in file_parsed:\n\n            # 1\u6587\u306e\u7d42\u4e86\u5224\u5b9a\n            if line == 'EOS\\n':\n\n                # Chunk\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n                if len(chunks) > 0:\n\n                    # chunks\u3092key\u3067\u30bd\u30fc\u30c8\u3057\u3001value\u306e\u307f\u53d6\u308a\u51fa\u3057\n                    sorted_tuple = sorted(chunks.items(), key=lambda x: x[0])\n                    yield list(zip(*sorted_tuple))[1]\n                    chunks.clear()\n\n                else:\n                    yield []\n\n            # \u5148\u982d\u304c*\u306e\u884c\u306f\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Chunk\u3092\u4f5c\u6210\n            elif line[0] == '*':\n\n                # Chunk\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3068\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u53d6\u5f97\n                cols = line.split(' ')\n                idx = int(cols[1])\n                dst = int(re.search(r'(.*?)D', cols[2]).group(1))\n\n                # Chunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u30bb\u30c3\u30c8\n                if idx not in chunks:\n                    chunks[idx] = Chunk()\n                chunks[idx].dst = dst\n\n                # \u4fc2\u308a\u5148\u306eChunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5143\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u8ffd\u52a0\n                if dst != -1:\n                    if dst not in chunks:\n                        chunks[dst] = Chunk()\n                    chunks[dst].srcs.append(idx)\n\n            # \u305d\u308c\u4ee5\u5916\u306e\u884c\u306f\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Morph\u3092\u4f5c\u308aChunk\u306b\u8ffd\u52a0\n            else:\n\n                # \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n                cols = line.split('\\t')\n                res_cols = cols[1].split(',')\n\n                # Morph\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n                chunks[idx].morphs.append(\n                    Morph(\n                        cols[0],        # surface\n                        res_cols[6],    # base\n                        res_cols[0],    # pos\n                        res_cols[1]     # pos1\n                    )\n                )\n\n        raise StopIteration\n\n\n# \u4fc2\u308a\u53d7\u3051\u89e3\u6790\nparse_neko()\n\n# \u7d50\u679c\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\nwith open(fname_result, mode='w') as out_file:\n\n    # 1\u6587\u305a\u3064\u30ea\u30b9\u30c8\u4f5c\u6210\n    for chunks in neco_lines():\n\n        # chunk\u3092\u5217\u6319\n        for chunk in chunks:\n\n            # \u52d5\u8a5e\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\n            verbs = chunk.get_morphs_by_pos('\u52d5\u8a5e')\n            if len(verbs) < 1:\n                continue\n\n            # \u4fc2\u308a\u5143\u306b\u52a9\u8a5e\u3092\u542b\u3080chunk\u3092\u5217\u6319\n            chunks_include_prt = []\n            for src in chunk.srcs:\n                if len(chunks[src].get_kaku_prt()) > 0:\n                    chunks_include_prt.append(chunks[src])\n            if len(chunks_include_prt) < 1:\n                continue\n\n            # chunk\u3092\u52a9\u8a5e\u306e\u8f9e\u66f8\u9806\u3067\u30bd\u30fc\u30c8\n            chunks_include_prt.sort(\n                key=lambda x: x.get_kaku_prt()\n            )\n\n            # \u51fa\u529b\n            out_file.write('{}\\t{}\\t{}\\n'.format(\n                verbs[0].base,      # \u6700\u5de6\u306e\u52d5\u8a5e\u306e\u57fa\u672c\u7cfb\n                ' '.join([chunk.get_kaku_prt() \\\n                        for chunk in chunks_include_prt]),      # \u52a9\u8a5e\n                ' '.join([chunk.normalized_surface() \\\n                        for chunk in chunks_include_prt])       # \u9805\n            ))\n\n\n\n\u5b9f\u884c\u7d50\u679c\uff1a\n\u4ee5\u4e0b\u3001\u7d50\u679c\u306e\u5148\u982d\u90e8\u5206\u3067\u3059\u3002\n\nresult.txt\uff08\u5148\u982d\u90e8\u5206\uff09\n\u751f\u308c\u308b   \u3067 \u3069\u3053\u3067\n\u3064\u304f  \u304b \u304c \u751f\u308c\u305f\u304b \u898b\u5f53\u304c\n\u6ce3\u304f  \u3067 \u6240\u3067\n\u3059\u308b  \u306f \u4e8b\u3060\u3051\u306f\n\u59cb\u3081\u308b   \u3067 \u3053\u3053\u3067\n\u898b\u308b  \u306f \u3092 \u543e\u8f29\u306f \u3082\u306e\u3092\n\u6355\u3048\u308b   \u3092 \u6211\u3005\u3092\n\u716e\u308b  \u3066 \u6355\u3048\u3066\n\u98df\u3046  \u3066 \u716e\u3066\n\u601d\u3046  \u304b\u3089  \u306a\u304b\u3063\u305f\u304b\u3089\n\u8f09\u305b\u308b   \u306b \u638c\u306b\n\u6301\u3061\u4e0a\u3052\u308b \u3066 \u3068 \u8f09\u305b\u3089\u308c\u3066 \u30b9\u30fc\u3068\n\u3042\u308b  \u304c \u611f\u3058\u304c\n\u843d\u3061\u3064\u304f    \u3067 \u4e0a\u3067\n\u898b\u308b  \u3066 \u3092 \u843d\u3061\u3064\u3044\u3066 \u9854\u3092\n\u3044\u3046  \u3068 \u4eba\u9593\u3068\n\u898b\u308b  \u3082\u306e\u306e   \u3082\u306e\u306e\n\u601d\u3046  \u3068 \u3082\u306e\u3060\u3068\n\u6b8b\u308b  \u304c \u3067\u3082  \u611f\u3058\u304c \u4eca\u3067\u3082\n\n\n\u7d50\u679c\u5168\u4f53\u306fGitHub\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u9805\uff08\u6587\u7bc0\u305d\u306e\u3082\u306e\uff09\u306e\u5217\u6319\nChunk\u30af\u30e9\u30b9\u306bget_kaku_prt()\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u6587\u7bc0\u306e\u4e2d\u306e\u52a9\u8a5e\u3092\u53d6\u5f97\u3059\u308b\u3082\u306e\u3067\u3001\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u683c\u52a9\u8a5e\u3092\u512a\u5148\u3057\u3001\u305d\u308c\u3067\u3082\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u4e00\u756a\u6700\u5f8c\u306e\u52a9\u8a5e\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u305d\u308c\u4ee5\u5916\u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u306f\u524d\u554f\u306e\u307e\u307e\u3067\u3059\u3002\n\u4eca\u56de\u306f\u6587\u7bc0\u305d\u306e\u3082\u306e\u3092\u5217\u6319\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u8a72\u5f53\u3059\u308bchunk\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308a\u3001\u305d\u308c\u3092\u5148\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u683c\u30d5\u30ec\u30fc\u30e0\u3068\u306f\n\u8abf\u3079\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u8efd\u304f\u30b0\u30b0\u3063\u305f\u3060\u3051\u3067\u306f\u6df1\u304f\u306f\u7406\u89e3\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f^^;\n\u3069\u3046\u3084\u3089\u3001\u6587\u3092\u5206\u6790\u3059\u308b\u305f\u3081\u306e\u300c\u683c\u6587\u6cd5\u300d\u3068\u3044\u3046\u6587\u6cd5\u7406\u8ad6\u306b\u304a\u3044\u3066\u3001\u52d5\u8a5e\u3068\u3001\u305d\u308c\u306b\u95a2\u308f\u308b\u6587\u7bc0\u3068\u306e\u30eb\u30fc\u30eb\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u683c\u30d5\u30ec\u30fc\u30e0\u3068\u547c\u3076\u3088\u3046\u3067\u3059\u3002\n\u8a73\u3057\u304f\u306f\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u300c\u683c\u6587\u6cd5\u300d\u306a\u3069\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3000\n47\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c5\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f\u9752\u7a7a\u6587\u5eab\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af 2015](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306e\u6311\u6226\u8a18\u9332\u3067\u3059\u3002\u74b0\u5883\u306fUbuntu 16.04 LTS \uff0b Python 3.5.2 \\:\\: Anaconda 4.1.1 (64-bit)\u3067\u3059\u3002\u904e\u53bb\u306e\u30ce\u30c3\u30af\u306e\u4e00\u89a7\u306f[\u3053\u3061\u3089](http://qiita.com/segavvy/items)\u304b\u3089\u3069\u3046\u305e\u3002\n\n## \u7b2c5\u7ae0: \u4fc2\u308a\u53d7\u3051\u89e3\u6790\n>\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092CaboCha\u3092\u4f7f\u3063\u3066\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.cabocha\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n###46. \u52d5\u8a5e\u306e\u683c\u30d5\u30ec\u30fc\u30e0\u60c5\u5831\u306e\u62bd\u51fa\n>45\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6539\u5909\u3057\uff0c\u8ff0\u8a9e\u3068\u683c\u30d1\u30bf\u30fc\u30f3\u306b\u7d9a\u3051\u3066\u9805\uff08\u8ff0\u8a9e\u306b\u4fc2\u3063\u3066\u3044\u308b\u6587\u7bc0\u305d\u306e\u3082\u306e\uff09\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u51fa\u529b\u305b\u3088\uff0e45\u306e\u4ed5\u69d8\u306b\u52a0\u3048\u3066\uff0c\u4ee5\u4e0b\u306e\u4ed5\u69d8\u3092\u6e80\u305f\u3059\u3088\u3046\u306b\u305b\u3088\uff0e\n>\n> - \u9805\u306f\u8ff0\u8a9e\u306b\u4fc2\u3063\u3066\u3044\u308b\u6587\u7bc0\u306e\u5358\u8a9e\u5217\u3068\u3059\u308b\uff08\u672b\u5c3e\u306e\u52a9\u8a5e\u3092\u53d6\u308a\u9664\u304f\u5fc5\u8981\u306f\u306a\u3044\uff09\n> - \u8ff0\u8a9e\u306b\u4fc2\u308b\u6587\u7bc0\u304c\u8907\u6570\u3042\u308b\u3068\u304d\u306f\uff0c\u52a9\u8a5e\u3068\u540c\u4e00\u306e\u57fa\u6e96\u30fb\u9806\u5e8f\u3067\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u4e26\u3079\u308b\n>\n>\u300c\u543e\u8f29\u306f\u3053\u3053\u3067\u59cb\u3081\u3066\u4eba\u9593\u3068\u3044\u3046\u3082\u306e\u3092\u898b\u305f\u300d\u3068\u3044\u3046\u4f8b\u6587\uff08neko.txt.cabocha\u306e8\u6587\u76ee\uff09\u3092\u8003\u3048\u308b\uff0e \u3053\u306e\u6587\u306f\u300c\u59cb\u3081\u308b\u300d\u3068\u300c\u898b\u308b\u300d\u306e\uff12\u3064\u306e\u52d5\u8a5e\u3092\u542b\u307f\uff0c\u300c\u59cb\u3081\u308b\u300d\u306b\u4fc2\u308b\u6587\u7bc0\u306f\u300c\u3053\u3053\u3067\u300d\uff0c\u300c\u898b\u308b\u300d\u306b\u4fc2\u308b\u6587\u7bc0\u306f\u300c\u543e\u8f29\u306f\u300d\u3068\u300c\u3082\u306e\u3092\u300d\u3068\u89e3\u6790\u3055\u308c\u305f\u5834\u5408\u306f\uff0c\u6b21\u306e\u3088\u3046\u306a\u51fa\u529b\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\n>\n>```\n>\u59cb\u3081\u308b  \u3067      \u3053\u3053\u3067\n>\u898b\u308b    \u306f \u3092   \u543e\u8f29\u306f \u3082\u306e\u3092\n>```\n\n####\u51fa\u6765\u4e0a\u304c\u3063\u305f\u30b3\u30fc\u30c9\uff1a\n\n```python:main.py\n# coding: utf-8\nimport CaboCha\nimport re\n\nfname = 'neko.txt'\nfname_parsed = 'neko.txt.cabocha'\nfname_result = 'result.txt'\n\n\ndef parse_neko():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d(neko.txt)\u3092\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\u3066neko.txt.cabocha\u306b\u4fdd\u5b58\u3059\u308b\n\t'''\n\twith open(fname) as data_file, \\\n\t\t\topen(fname_parsed, mode='w') as out_file:\n\n\t\tcabocha = CaboCha.Parser()\n\t\tfor line in data_file:\n\t\t\tout_file.write(\n\t\t\t\tcabocha.parse(line).toString(CaboCha.FORMAT_LATTICE)\n\t\t\t)\n\n\nclass Morph:\n\t'''\n\t\u5f62\u614b\u7d20\u30af\u30e9\u30b9\n\t\u8868\u5c64\u5f62\uff08surface\uff09\u3001\u57fa\u672c\u5f62\uff08base\uff09\u3001\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u3092\n\t\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n\t'''\n\tdef __init__(self, surface, base, pos, pos1):\n\t\t'''\u521d\u671f\u5316'''\n\t\tself.surface = surface\n\t\tself.base = base\n\t\tself.pos = pos\n\t\tself.pos1 = pos1\n\n\tdef __str__(self):\n\t\t'''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n\t\treturn 'surface[{}]\\tbase[{}]\\tpos[{}]\\tpos1[{}]'\\\n\t\t\t.format(self.surface, self.base, self.pos, self.pos1)\n\n\nclass Chunk:\n\t'''\n\t\u6587\u7bc0\u30af\u30e9\u30b9\n\t\u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\u3001\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\u3001\n\t\u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u30fc\u5909\u6570\u306b\u6301\u3064\n\t'''\n\n\tdef __init__(self):\n\t\t'''\u521d\u671f\u5316'''\n\t\tself.morphs = []\n\t\tself.srcs = []\n\t\tself.dst = -1\n\n\tdef __str__(self):\n\t\t'''\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6587\u5b57\u5217\u8868\u73fe'''\n\t\tsurface = ''\n\t\tfor morph in self.morphs:\n\t\t\tsurface += morph.surface\n\t\treturn '{}\\tsrcs{}\\tdst[{}]'.format(surface, self.srcs, self.dst)\n\n\tdef normalized_surface(self):\n\t\t'''\u53e5\u8aad\u70b9\u306a\u3069\u306e\u8a18\u53f7\u3092\u9664\u3044\u305f\u8868\u5c64\u5f62'''\n\t\tresult = ''\n\t\tfor morph in self.morphs:\n\t\t\tif morph.pos != '\u8a18\u53f7':\n\t\t\t\tresult += morph.surface\n\t\treturn result\n\n\tdef chk_pos(self, pos):\n\t\t'''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u54c1\u8a5e\uff08pos\uff09\u3092\u542b\u3080\u5834\u5408\u306fTrue\n\t\t'''\n\t\tfor morph in self.morphs:\n\t\t\tif morph.pos == pos:\n\t\t\t\treturn True\n\t\treturn False\n\n\tdef get_morphs_by_pos(self, pos, pos1=''):\n\t\t'''\u6307\u5b9a\u3057\u305f\u54c1\u8a5e\uff08pos\uff09\u3001\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u306e\u5f62\u614b\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\t\tpos1\u306e\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306fpos\u306e\u307f\u3067\u5224\u5b9a\u3059\u308b\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u5f62\u614b\u7d20\uff08morph\uff09\u306e\u30ea\u30b9\u30c8\u3001\u8a72\u5f53\u5f62\u614b\u7d20\u304c\u306a\u3044\u5834\u5408\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\n\t\t'''\n\t\tif len(pos1) > 0:\n\t\t\treturn [res for res in self.morphs\n\t\t\t\t\tif (res.pos == pos) and (res.pos1 == pos1)]\n\t\telse:\n\t\t\treturn [res for res in self.morphs if res.pos == pos]\n\n\tdef get_kaku_prt(self):\n\t\t'''\u52a9\u8a5e\u30921\u3064\u8fd4\u3059\n\t\t\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u683c\u52a9\u8a5e\u3092\u512a\u5148\u3057\u3001\u6700\u5f8c\u306e\u52a9\u8a5e\u3092\u8fd4\u3059\u3002\n\n\t\t\u623b\u308a\u5024\uff1a\n\t\t\u52a9\u8a5e\u3001\u306a\u3044\u5834\u5408\u306f\u7a7a\u6587\u5b57\u5217\n\t\t'''\n\t\tprts = self.get_morphs_by_pos('\u52a9\u8a5e')\n\t\tif len(prts) > 1:\n\n\t\t\t# 2\u3064\u4ee5\u4e0a\u52a9\u8a5e\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u683c\u52a9\u8a5e\u3092\u512a\u5148\n\t\t\tkaku_prts = self.get_morphs_by_pos('\u52a9\u8a5e', '\u683c\u52a9\u8a5e')\n\t\t\tif len(kaku_prts) > 0:\n\t\t\t\tprts = kaku_prts\n\n\t\tif len(prts) > 0:\n\t\t\treturn prts[-1].surface\t\t# \u6700\u5f8c\u3092\u8fd4\u3059\n\t\telse:\n\t\t\treturn ''\n\n\ndef neco_lines():\n\t'''\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\t\u300c\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300d\u306e\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u3092\u9806\u6b21\u8aad\u307f\u8fbc\u3093\u3067\u3001\n\t1\u6587\u305a\u3064Chunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n\t\u623b\u308a\u5024\uff1a\n\t1\u6587\u306eChunk\u30af\u30e9\u30b9\u306e\u30ea\u30b9\u30c8\n\t'''\n\twith open(fname_parsed) as file_parsed:\n\n\t\tchunks = dict()\t\t# idx\u3092key\u306bChunk\u3092\u683c\u7d0d\n\t\tidx = -1\n\n\t\tfor line in file_parsed:\n\n\t\t\t# 1\u6587\u306e\u7d42\u4e86\u5224\u5b9a\n\t\t\tif line == 'EOS\\n':\n\n\t\t\t\t# Chunk\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\t\t\t\tif len(chunks) > 0:\n\n\t\t\t\t\t# chunks\u3092key\u3067\u30bd\u30fc\u30c8\u3057\u3001value\u306e\u307f\u53d6\u308a\u51fa\u3057\n\t\t\t\t\tsorted_tuple = sorted(chunks.items(), key=lambda x: x[0])\n\t\t\t\t\tyield list(zip(*sorted_tuple))[1]\n\t\t\t\t\tchunks.clear()\n\n\t\t\t\telse:\n\t\t\t\t\tyield []\n\n\t\t\t# \u5148\u982d\u304c*\u306e\u884c\u306f\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Chunk\u3092\u4f5c\u6210\n\t\t\telif line[0] == '*':\n\n\t\t\t\t# Chunk\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u3068\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u53d6\u5f97\n\t\t\t\tcols = line.split(' ')\n\t\t\t\tidx = int(cols[1])\n\t\t\t\tdst = int(re.search(r'(.*?)D', cols[2]).group(1))\n\n\t\t\t\t# Chunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5148\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u30bb\u30c3\u30c8\n\t\t\t\tif idx not in chunks:\n\t\t\t\t\tchunks[idx] = Chunk()\n\t\t\t\tchunks[idx].dst = dst\n\n\t\t\t\t# \u4fc2\u308a\u5148\u306eChunk\u3092\u751f\u6210\uff08\u306a\u3051\u308c\u3070\uff09\u3057\u3001\u4fc2\u308a\u5143\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u8ffd\u52a0\n\t\t\t\tif dst != -1:\n\t\t\t\t\tif dst not in chunks:\n\t\t\t\t\t\tchunks[dst] = Chunk()\n\t\t\t\t\tchunks[dst].srcs.append(idx)\n\n\t\t\t# \u305d\u308c\u4ee5\u5916\u306e\u884c\u306f\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u306a\u306e\u3067\u3001Morph\u3092\u4f5c\u308aChunk\u306b\u8ffd\u52a0\n\t\t\telse:\n\n\t\t\t\t# \u8868\u5c64\u5f62\u306ftab\u533a\u5207\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f','\u533a\u5207\u308a\u3067\u30d0\u30e9\u3059\n\t\t\t\tcols = line.split('\\t')\n\t\t\t\tres_cols = cols[1].split(',')\n\n\t\t\t\t# Morph\u4f5c\u6210\u3001\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\t\t\t\tchunks[idx].morphs.append(\n\t\t\t\t\tMorph(\n\t\t\t\t\t\tcols[0],\t\t# surface\n\t\t\t\t\t\tres_cols[6],\t# base\n\t\t\t\t\t\tres_cols[0],\t# pos\n\t\t\t\t\t\tres_cols[1]\t\t# pos1\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\traise StopIteration\n\n\n# \u4fc2\u308a\u53d7\u3051\u89e3\u6790\nparse_neko()\n\n# \u7d50\u679c\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\nwith open(fname_result, mode='w') as out_file:\n\n\t# 1\u6587\u305a\u3064\u30ea\u30b9\u30c8\u4f5c\u6210\n\tfor chunks in neco_lines():\n\n\t\t# chunk\u3092\u5217\u6319\n\t\tfor chunk in chunks:\n\n\t\t\t# \u52d5\u8a5e\u3092\u542b\u3080\u304b\u30c1\u30a7\u30c3\u30af\n\t\t\tverbs = chunk.get_morphs_by_pos('\u52d5\u8a5e')\n\t\t\tif len(verbs) < 1:\n\t\t\t\tcontinue\n\n\t\t\t# \u4fc2\u308a\u5143\u306b\u52a9\u8a5e\u3092\u542b\u3080chunk\u3092\u5217\u6319\n\t\t\tchunks_include_prt = []\n\t\t\tfor src in chunk.srcs:\n\t\t\t\tif len(chunks[src].get_kaku_prt()) > 0:\n\t\t\t\t\tchunks_include_prt.append(chunks[src])\n\t\t\tif len(chunks_include_prt) < 1:\n\t\t\t\tcontinue\n\n\t\t\t# chunk\u3092\u52a9\u8a5e\u306e\u8f9e\u66f8\u9806\u3067\u30bd\u30fc\u30c8\n\t\t\tchunks_include_prt.sort(\n\t\t\t\tkey=lambda x: x.get_kaku_prt()\n\t\t\t)\n\n\t\t\t# \u51fa\u529b\n\t\t\tout_file.write('{}\\t{}\\t{}\\n'.format(\n\t\t\t\tverbs[0].base,\t\t# \u6700\u5de6\u306e\u52d5\u8a5e\u306e\u57fa\u672c\u7cfb\n\t\t\t\t' '.join([chunk.get_kaku_prt() \\\n\t\t\t\t\t\tfor chunk in chunks_include_prt]),\t\t# \u52a9\u8a5e\n\t\t\t\t' '.join([chunk.normalized_surface() \\\n\t\t\t\t\t\tfor chunk in chunks_include_prt])\t\t# \u9805\n\t\t\t))\n```\n\n####\u5b9f\u884c\u7d50\u679c\uff1a\n\n\u4ee5\u4e0b\u3001\u7d50\u679c\u306e\u5148\u982d\u90e8\u5206\u3067\u3059\u3002\n\n```console:result.txt\uff08\u5148\u982d\u90e8\u5206\uff09\n\u751f\u308c\u308b\t\u3067\t\u3069\u3053\u3067\n\u3064\u304f\t\u304b \u304c\t\u751f\u308c\u305f\u304b \u898b\u5f53\u304c\n\u6ce3\u304f\t\u3067\t\u6240\u3067\n\u3059\u308b\t\u306f\t\u4e8b\u3060\u3051\u306f\n\u59cb\u3081\u308b\t\u3067\t\u3053\u3053\u3067\n\u898b\u308b\t\u306f \u3092\t\u543e\u8f29\u306f \u3082\u306e\u3092\n\u6355\u3048\u308b\t\u3092\t\u6211\u3005\u3092\n\u716e\u308b\t\u3066\t\u6355\u3048\u3066\n\u98df\u3046\t\u3066\t\u716e\u3066\n\u601d\u3046\t\u304b\u3089\t\u306a\u304b\u3063\u305f\u304b\u3089\n\u8f09\u305b\u308b\t\u306b\t\u638c\u306b\n\u6301\u3061\u4e0a\u3052\u308b\t\u3066 \u3068\t\u8f09\u305b\u3089\u308c\u3066 \u30b9\u30fc\u3068\n\u3042\u308b\t\u304c\t\u611f\u3058\u304c\n\u843d\u3061\u3064\u304f\t\u3067\t\u4e0a\u3067\n\u898b\u308b\t\u3066 \u3092\t\u843d\u3061\u3064\u3044\u3066 \u9854\u3092\n\u3044\u3046\t\u3068\t\u4eba\u9593\u3068\n\u898b\u308b\t\u3082\u306e\u306e\t\u3082\u306e\u306e\n\u601d\u3046\t\u3068\t\u3082\u306e\u3060\u3068\n\u6b8b\u308b\t\u304c \u3067\u3082\t\u611f\u3058\u304c \u4eca\u3067\u3082\n```\n\n\u7d50\u679c\u5168\u4f53\u306f[GitHub](https://github.com/segavvy/nlp100_Python/tree/master/46)\u306b\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u3059\u3002\n\n###\u9805\uff08\u6587\u7bc0\u305d\u306e\u3082\u306e\uff09\u306e\u5217\u6319\nChunk\u30af\u30e9\u30b9\u306b`get_kaku_prt()`\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\u6587\u7bc0\u306e\u4e2d\u306e\u52a9\u8a5e\u3092\u53d6\u5f97\u3059\u308b\u3082\u306e\u3067\u3001\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u683c\u52a9\u8a5e\u3092\u512a\u5148\u3057\u3001\u305d\u308c\u3067\u3082\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u4e00\u756a\u6700\u5f8c\u306e\u52a9\u8a5e\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u305d\u308c\u4ee5\u5916\u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u306f[\u524d\u554f](http://qiita.com/segavvy/items/2f8387a5973a9966a12d)\u306e\u307e\u307e\u3067\u3059\u3002\n\u4eca\u56de\u306f\u6587\u7bc0\u305d\u306e\u3082\u306e\u3092\u5217\u6319\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u8a72\u5f53\u3059\u308bchunk\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308a\u3001\u305d\u308c\u3092\u5148\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n###\u683c\u30d5\u30ec\u30fc\u30e0\u3068\u306f\n\u8abf\u3079\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u8efd\u304f\u30b0\u30b0\u3063\u305f\u3060\u3051\u3067\u306f\u6df1\u304f\u306f\u7406\u89e3\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f^^;\n\u3069\u3046\u3084\u3089\u3001\u6587\u3092\u5206\u6790\u3059\u308b\u305f\u3081\u306e\u300c\u683c\u6587\u6cd5\u300d\u3068\u3044\u3046\u6587\u6cd5\u7406\u8ad6\u306b\u304a\u3044\u3066\u3001\u52d5\u8a5e\u3068\u3001\u305d\u308c\u306b\u95a2\u308f\u308b\u6587\u7bc0\u3068\u306e\u30eb\u30fc\u30eb\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u683c\u30d5\u30ec\u30fc\u30e0\u3068\u547c\u3076\u3088\u3046\u3067\u3059\u3002\n\u8a73\u3057\u304f\u306f[\u30a6\u30a3\u30ad\u30da\u30c7\u30a3\u30a2\u300c\u683c\u6587\u6cd5\u300d](https://ja.wikipedia.org/wiki/%E6%A0%BC%E6%96%87%E6%B3%95)\u306a\u3069\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3000\n47\u672c\u76ee\u306e\u30ce\u30c3\u30af\u306f\u4ee5\u4e0a\u3067\u3059\u3002\u8aa4\u308a\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n<hr>\n\n*\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3001[100\u672c\u30ce\u30c3\u30af\u3067\u7528\u3044\u308b\u30b3\u30fc\u30d1\u30b9\u30fb\u30c7\u30fc\u30bf](http://www.cl.ecei.tohoku.ac.jp/nlp100/#data)\u3067\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306e\u4e00\u90e8\u304c\u542b\u307e\u308c\u307e\u3059\u3002\u3053\u306e\u7b2c5\u7ae0\u3067\u7528\u3044\u3066\u3044\u308b\u30c7\u30fc\u30bf\u306f[\u9752\u7a7a\u6587\u5eab](http://www.aozora.gr.jp)\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u590f\u76ee\u6f31\u77f3\u306e\u9577\u7de8\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u304c\u5143\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002*\n", "tags": ["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "Cabocha", "Python"]}