{"context": " More than 1 year has passed since last update.Docker Machine\u3092\u4f7f\u7528\u3059\u308b\u3068\u7c21\u5358\u306b\u69d8\u3005\u306a\u74b0\u5883\u306bDocker\u30db\u30b9\u30c8\u30fbSwarm\u30af\u30e9\u30b9\u30bf\u3092\u4f5c\u6210\u3057\u3001\u30ed\u30fc\u30ab\u30eb\u306eDocker\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nDocker Machine\u5358\u4f53\u3067\u3082\u4f7f\u3048\u307e\u3059\u304cVagrant\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067Docker Machine\u304c\u672a\u5bfe\u5fdc\u306e\u74b0\u5883\u306b\u30db\u30b9\u30c8\u3084Swarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nTL;DR\nVagrant\u3068Docker Machine\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\n\nDocker Machine\u304c\u672a\u5bfe\u5fdc\u306e\u74b0\u5883\u306bDocker\u74b0\u5883\u3092\u69cb\u7bc9\u3067\u304d\u308b\n\nvagrant up\u30b3\u30de\u30f3\u30c9\u3067\u8907\u6570\u30ce\u30fc\u30c9\u306eDocker\u30db\u30b9\u30c8\u30fbSwarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u30fb\u524a\u9664\u3067\u304d\u308b\nVagrant\u306eSynced Folder\u3067\u30ea\u30e2\u30fc\u30c8\u306e\u30db\u30b9\u30c8\u3068\u30d5\u30a1\u30a4\u30eb\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u540c\u671f\u3057\u3066\u304f\u308c\u308b\n\n\n\u74b0\u5883\n\u52d5\u4f5c\u78ba\u8a8d\u306f\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u884c\u3044\u307e\u3057\u305f\u3002\n\nMac OSX 10.10.1\nVagrant 1.7.4\ndocker-machine 0.4.1\nvagrant-triggers 0.5.1\nvagrant-cloudstack 1.2.0\n\n\n\u6e96\u5099\nVagrant, Docker, Docker Machine\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nMac, Windows\u3067\u3042\u308c\u3070Docker Toolbox\u3092\u4f7f\u3046\u3068\u95a2\u9023\u30c4\u30fc\u30eb\u3092\u307e\u3068\u3081\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\u4eee\u60f3\u30de\u30b7\u30f3\u4f5c\u6210\u30fb\u524a\u9664\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067Docker Machine\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081vagrant-triggers\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n$ vagrant plugin install vagrant-triggers\n\n\nVirtualBox\u306bDocker\u30db\u30b9\u30c8\u3092\u69cb\u7bc9\n\u307e\u305aVirtualBox\u306bDocker\u30db\u30b9\u30c8\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3059\u3002\nVagrantfile\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nVagrantfile\nVagrant.configure(2) do |config|\n  # vagrant-triggers\u3092Provisioner\u3068\u3057\u3066\u4f7f\u7528\u3057\u3001\n  # \u4f5c\u6210\u3057\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u5bfe\u3057\u3066docker-machine create\u3092\u5b9f\u884c\n  config.vm.provision \"trigger\" do |trigger|\n    trigger.fire do\n      # docker-machine status\u306eexitstatus\u304c0\u306e\u5834\u5408\u306fdocker-machine create\u5b9f\u884c\u6e08\u307f\n      `docker-machine status #{@machine.name}`\n      if $?.exitstatus != 0\n        # \u4f7f\u7528\u3059\u308bIP\u3068\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\n        # VirtualBox\u306e\u5834\u5408\u306b\u306f\u4e00\u5ea6\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eIP\u3092\u53d6\u5f97\n        # \u305d\u306e\u4ed6\u306eProvider\u3067\u306f@machine.ssh_info\u304b\u3089IP\u3001\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\u3067\u304d\u308b\n        if @machine.provider_name == :virtualbox\n          ip = `vagrant ssh #{@machine.name} -c \"ip addr show dev eth1 | grep -w inet\"`\n               .match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)[0]\n          port = 22\n        else\n          ip = @machine.ssh_info[:host]\n          port = @machine.ssh_info[:port]\n        end\n\n        # docker-machine create\u3092\u5b9f\u884c\n        # SWARM_DISCOVERY_TOKEN\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408Swarm\u30af\u30e9\u30b9\u30bf\u7528\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\n        run \"docker-machine create -d generic \\\n            --generic-ip-address #{ip} \\\n            --generic-ssh-key #{@machine.ssh_info[:private_key_path][0]} \\\n            --generic-ssh-port #{port} \\\n            --generic-ssh-user #{@machine.ssh_info[:username]} \\\n            #{\"--swarm\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{\"--swarm-master\" if !ENV[\"SWARM_DISCOVERY_TOKEN\"].nil? && @machine.name.to_s.include?(\"master\")} \\\n            #{\"--swarm-discovery token://#{ENV[\"SWARM_DISCOVERY_TOKEN\"]}\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{@machine.name}\"\n      end\n    end\n  end\n\n  # \u4eee\u60f3\u30de\u30b7\u30f3\u524a\u9664\u6642\u306b\u306fdocker-machine rm\u3092\u5b9f\u884c\u3057docker-machine\u304b\u3089\u3082\u524a\u9664\u3059\u308b\n  config.trigger.before :destroy do\n    # docker-machine status\u306e\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9\u304c0\u3067\u306a\u3044\u5834\u5408\u306f\n    # docker-machine\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u7570\u5e38\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u305f\u3081\u524a\u9664\u3092\u30b9\u30ad\u30c3\u30d7\n    `docker-machine status #{@machine.name}`\n    if $?.exitstatus == 0\n      run \"docker-machine rm #{@machine.name}\"\n    end\n  end\n\n  # VirtualBox\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u8a2d\u5b9a\n  config.vm.provider :virtualbox do |virtualbox, override|\n    # Box\u306f\u73fe\u72b6Ubuntu 14.04\u304c\u3046\u307e\u304f\u3044\u304d\u3084\u3059\u3044\n    override.vm.box = \"boxcutter/ubuntu1404\"\n    # VirtualBox\u306e\u5834\u5408\u306fDocker\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u306b\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u7528\n    override.vm.network \"private_network\", type: \"dhcp\"\n  end\n\n  # \u4f5c\u6210\u3059\u308b\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u5b9a\u7fa9\n  config.vm.define \"docker01\" do |d|\n  end\nend\n\n\nvagrant up \u3067\u4eee\u60f3\u30de\u30b7\u30f3\u304c\u4f5c\u6210\u3055\u308c\u3001Docker Machine\u306b\u767b\u9332\u3055\u308c\u307e\u3059\u3002\n$ vagrant up\n\n\u767b\u9332\u3055\u308c\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u306fdocker-machine ls \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n$ docker-machine ls\nNAME      ACTIVE   DRIVER       STATE     URL                         SWARM   \ndocker01              generic      Running   tcp://172.28.128.19:2376 \n\ndocker-machine env \u306e\u51fa\u529b\u3092eval \u3059\u308b\u3068Docker\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n$ eval \"$(docker-machine env docker01)\"\n$ docker run --rm hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n535020c3e8ad: Pull complete \naf340544ed62: Pull complete \nDigest: sha256:a68868bfe696c00866942e8f5ca39e3e31b79c1e50feaee4ce5e28df2f051d5c\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker.\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker Hub account:\n https://hub.docker.com\n\nFor more examples and ideas, visit:\n https://docs.docker.com/userguide/\n\n\nvagrant destroy \u3067\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u524a\u9664\u3059\u308b\u3068\u3001docker-machine\u304b\u3089\u3082\u524a\u9664\u3055\u308c\u307e\u3059\u3002\n$ vagrant destroy\n$ docker-machine ls\n\n\nVirtualBox\u306bSwarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\n\u4e0a\u8a18\u306eVagrantfile\u3092\u4f7f\u3063\u3066Swarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u4eca\u56de\u306fmaster1\u53f0\u3001agent2\u53f0\u306e\u30af\u30e9\u30b9\u30bf\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\u6b21\u306e\u3088\u3046\u306bVagrantfile\u306e\u4eee\u60f3\u30de\u30b7\u30f3\u306e\u5b9a\u7fa9\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\uff08\u540d\u524d\u306b\u300cmaster\u300d\u3092\u542b\u3080\u4eee\u60f3\u30de\u30b7\u30f3\u3092master\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\uff09\n\nVagrantfile\nVagrant.configure(2) do |config|\n  # vagrant-triggers\u3092Provisioner\u3068\u3057\u3066\u4f7f\u7528\u3057\u3001\n  # \u4f5c\u6210\u3057\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u5bfe\u3057\u3066docker-machine create\u3092\u5b9f\u884c\n  config.vm.provision \"trigger\" do |trigger|\n    trigger.fire do\n      # docker-machine status\u306eexitstatus\u304c0\u306e\u5834\u5408\u306fdocker-machine create\u5b9f\u884c\u6e08\u307f\n      `docker-machine status #{@machine.name}`\n      if $?.exitstatus != 0\n        # \u4f7f\u7528\u3059\u308bIP\u3068\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\n        # VirtualBox\u306e\u5834\u5408\u306b\u306f\u4e00\u5ea6\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eIP\u3092\u53d6\u5f97\n        # \u305d\u306e\u4ed6\u306eProvider\u3067\u306f@machine.ssh_info\u304b\u3089IP\u3001\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\u3067\u304d\u308b\n        if @machine.provider_name == :virtualbox\n          ip = `vagrant ssh #{@machine.name} -c \"ip addr show dev eth1 | grep -w inet\"`\n               .match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)[0]\n          port = 22\n        else\n          ip = @machine.ssh_info[:host]\n          port = @machine.ssh_info[:port]\n        end\n\n        # docker-machine create\u3092\u5b9f\u884c\n        # SWARM_DISCOVERY_TOKEN\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408Swarm\u30af\u30e9\u30b9\u30bf\u7528\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\n        run \"docker-machine create -d generic \\\n            --generic-ip-address #{ip} \\\n            --generic-ssh-key #{@machine.ssh_info[:private_key_path][0]} \\\n            --generic-ssh-port #{port} \\\n            --generic-ssh-user #{@machine.ssh_info[:username]} \\\n            #{\"--swarm\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{\"--swarm-master\" if !ENV[\"SWARM_DISCOVERY_TOKEN\"].nil? && @machine.name.to_s.include?(\"master\")} \\\n            #{\"--swarm-discovery token://#{ENV[\"SWARM_DISCOVERY_TOKEN\"]}\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{@machine.name}\"\n      end\n    end\n  end\n\n  # \u4eee\u60f3\u30de\u30b7\u30f3\u524a\u9664\u6642\u306b\u306fdocker-machine rm\u3092\u5b9f\u884c\u3057docker-machine\u304b\u3089\u3082\u524a\u9664\u3059\u308b\n  config.trigger.before :destroy do\n    # docker-machine status\u306e\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9\u304c0\u3067\u306a\u3044\u5834\u5408\u306f\n    # docker-machine\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u7570\u5e38\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u305f\u3081\u524a\u9664\u3092\u30b9\u30ad\u30c3\u30d7\n    `docker-machine status #{@machine.name}`\n    if $?.exitstatus == 0\n      run \"docker-machine rm #{@machine.name}\"\n    end\n  end\n\n  # VirtualBox\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u8a2d\u5b9a\n  config.vm.provider :virtualbox do |virtualbox, override|\n    # Box\u306f\u73fe\u72b6Ubuntu 14.04\u304c\u3046\u307e\u304f\u3044\u304d\u3084\u3059\u3044\n    override.vm.box = \"boxcutter/ubuntu1404\"\n    # VirtualBox\u306e\u5834\u5408\u306fDocker\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u306b\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u7528\n    override.vm.network \"private_network\", type: \"dhcp\"\n  end\n\n  # \u4f5c\u6210\u3059\u308b\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u5b9a\u7fa9\n  config.vm.define \"master01\" do |d|\n  end\n\n  config.vm.define \"agent01\" do |d|\n  end\n\n  config.vm.define \"agent02\" do |d|\n  end\nend\n\n\n\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u524d\u306bSwarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n$ SWARM_DISCOVERY_TOKEN=$(curl -s -X POST https://discovery.hub.docker.com/v1/clusters)\n\n\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u6b21\u306e\u3088\u3046\u306bvagrant up\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068Swarm\u30af\u30e9\u30b9\u30bf\u304c\u69cb\u7bc9\u3055\u308c\u307e\u3059\u3002\n$ SWARM_DISCOVERY_TOKEN=$SWARM_DISCOVERY_TOKEN vagrant up\n$ docker-machine ls\nNAME       ACTIVE   DRIVER       STATE     URL                         SWARM\nagent01             generic      Running   tcp://172.28.128.21:2376    master01\nagent02             generic      Running   tcp://172.28.128.22:2376    master01  \nmaster01   *        generic      Running   tcp://172.28.128.20:2376    master01 (master)\n\ndocker-machine env --swarm \u3092\u4f7f\u3063\u3066\u74b0\u5883\u5909\u6570\u3092\u53d6\u5f97\u30fb\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n$ eval \"$(docker-machine env --swarm master01)\"\n\n\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308c\u3070docker info \u30b3\u30de\u30f3\u30c9\u30673\u30ce\u30fc\u30c9\u3042\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n$ docker info\nContainers: 4\nImages: 3\nRole: primary\nStrategy: spread\nFilters: affinity, health, constraint, port, dependency\nNodes: 3\n agent01: 172.28.128.24:2376\n  \u2514 Containers: 1\n  \u2514 Reserved CPUs: 0 / 1\n  \u2514 Reserved Memory: 0 B / 514.2 MiB\n  \u2514 Labels: executiondriver=native-0.2, kernelversion=3.16.0-30-generic, operatingsystem=Ubuntu 14.04.2 LTS, provider=generic, storagedriver=aufs\n agent02: 172.28.128.25:2376\n  \u2514 Containers: 1\n  \u2514 Reserved CPUs: 0 / 1\n  \u2514 Reserved Memory: 0 B / 514.2 MiB\n  \u2514 Labels: executiondriver=native-0.2, kernelversion=3.16.0-30-generic, operatingsystem=Ubuntu 14.04.2 LTS, provider=generic, storagedriver=aufs\n master01: 172.28.128.23:2376\n  \u2514 Containers: 2\n  \u2514 Reserved CPUs: 0 / 1\n  \u2514 Reserved Memory: 0 B / 514.2 MiB\n  \u2514 Labels: executiondriver=native-0.2, kernelversion=3.16.0-30-generic, operatingsystem=Ubuntu 14.04.2 LTS, provider=generic, storagedriver=aufs\nCPUs: 3\nTotal Memory: 1.507 GiB\nName: a4fbe0415d5f\n\ndocker ps -a\u3067swarm\u7528\u306e\u30b3\u30f3\u30c6\u30ca\u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS                                    NAMES\n9d3924175431        swarm:latest        \"/swarm join --advert\"   5 minutes ago       Up 5 minutes                2375/tcp                                 master01/swarm-agent\na4fbe0415d5f        swarm:latest        \"/swarm manage --tlsv\"   5 minutes ago       Up 5 minutes                2375/tcp, 172.28.128.23:3376->3376/tcp   master01/swarm-agent-master\n056fbce9741c        swarm:latest        \"/swarm join --advert\"   16 minutes ago      Up 16 minutes               2375/tcp                                 agent02/swarm-agent\n3da76b011711        swarm:latest        \"/swarm join --advert\"   18 minutes ago      Up 18 minutes               2375/tcp                                 agent01/swarm-agent \n\nSwarm\u30af\u30e9\u30b9\u30bf\u3067\u3082docker run \u30b3\u30de\u30f3\u30c9\u3067\u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002        \n$ docker run --rm hello-world\n\nHello from Docker.\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker Hub account:\n https://hub.docker.com\n\nFor more examples and ideas, visit:\n https://docs.docker.com/userguide/\n\n\nCloudStack/IDCF\u30af\u30e9\u30a6\u30c9\u306e\u5834\u5408\nVagrant\u3092\u4eee\u60f3\u30de\u30b7\u30f3\u4f5c\u6210\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u3067Docker Machine\u304c\u672a\u5bfe\u5fdc\u306e\u74b0\u5883\u306b\u3082Docker\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066IDCF\u30af\u30e9\u30a6\u30c9\u306eCloudStack\u4e0a\u306bSwarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3059\u3002\n2015/12/04 \u8ffd\u8a18: CloudStack\u30c9\u30e9\u30a4\u30d0\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002Synced Folder\u304c\u4e0d\u8981\u3067\u3042\u308c\u3070CloudStack\u30c9\u30e9\u30a4\u30d0\u3092\u4f7f\u7528\u3057\u305f\u307b\u3046\u304c\u624b\u8efd\u3067\u3059\u3002(Docker Machine CloudStack Driver\u3092\u4f7f\u3063\u3066Docker\u30db\u30b9\u30c8\u30fbSwarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u3059\u308b - Qiita)\nCloudStack\u3092\u4f7f\u3046\u305f\u3081\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n$ vagrant plugin install vagrant-cloudstack\n\nDocker Machine Generic Driver\u306fDocker\u7528\u306e\u30dd\u30fc\u30c8\u3068\u3057\u30662376\u3092\u56fa\u5b9a\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u30db\u30b9\u30c8\u3054\u3068\u306b\u7570\u306a\u308b\u30d1\u30d6\u30ea\u30c3\u30afIP\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u8ffd\u52a0IP\u306e\u6599\u91d1\u3092\u7bc0\u7d04\u3059\u308b\u305f\u30813\u53f0\u306e\u4eee\u60f3\u30de\u30b7\u30f3\u3092tesla, henry, pascal\u30be\u30fc\u30f3\u306b\u4f5c\u6210\u3057\u30bd\u30fc\u30b9IP\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\nVagrantfile\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u74b0\u5883\u5909\u6570\u306f\u304a\u4f7f\u3044\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u9069\u5207\u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nVagrantfile\nVagrant.configure(2) do |config|\n  # vagrant-triggers\u3092Provisioner\u3068\u3057\u3066\u4f7f\u7528\u3057\u3001\n  # \u4f5c\u6210\u3057\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u5bfe\u3057\u3066docker-machine create\u3092\u5b9f\u884c\n  config.vm.provision \"trigger\" do |trigger|\n    trigger.fire do\n      # docker-machine status\u306eexitstatus\u304c0\u306e\u5834\u5408\u306fdocker-machine create\u5b9f\u884c\u6e08\u307f\n      `docker-machine status #{@machine.name}`\n      if $?.exitstatus != 0\n        # \u4f7f\u7528\u3059\u308bIP\u3068\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\n        # VirtualBox\u306e\u5834\u5408\u306b\u306f\u4e00\u5ea6\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eIP\u3092\u53d6\u5f97\n        # \u305d\u306e\u4ed6\u306eProvider\u3067\u306f@machine.ssh_info\u304b\u3089IP\u3001\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\u3067\u304d\u308b\n        if @machine.provider_name == :virtualbox\n          ip = `vagrant ssh #{@machine.name} -c \"ip addr show dev eth1 | grep -w inet\"`\n               .match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)[0]\n          port = 22\n        else\n          ip = @machine.ssh_info[:host]\n          port = @machine.ssh_info[:port]\n        end\n\n        # docker-machine create\u3092\u5b9f\u884c\n        # SWARM_DISCOVERY_TOKEN\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408Swarm\u30af\u30e9\u30b9\u30bf\u7528\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\n        run \"docker-machine create -d generic \\\n            --generic-ip-address #{ip} \\\n            --generic-ssh-key #{@machine.ssh_info[:private_key_path][0]} \\\n            --generic-ssh-port #{port} \\\n            --generic-ssh-user #{@machine.ssh_info[:username]} \\\n            #{\"--swarm\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{\"--swarm-master\" if !ENV[\"SWARM_DISCOVERY_TOKEN\"].nil? && @machine.name.to_s.include?(\"master\")} \\\n            #{\"--swarm-discovery token://#{ENV[\"SWARM_DISCOVERY_TOKEN\"]}\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{@machine.name}\"\n      end\n    end\n  end\n\n  # \u4eee\u60f3\u30de\u30b7\u30f3\u524a\u9664\u6642\u306b\u306fdocker-machine rm\u3092\u5b9f\u884c\u3057docker-machine\u304b\u3089\u3082\u524a\u9664\u3059\u308b\n  config.trigger.before :destroy do\n    # docker-machine status\u306e\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9\u304c0\u3067\u306a\u3044\u5834\u5408\u306f\n    # docker-machine\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u7570\u5e38\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u305f\u3081\u524a\u9664\u3092\u30b9\u30ad\u30c3\u30d7\n    `docker-machine status #{@machine.name}`\n    if $?.exitstatus == 0\n      run \"docker-machine rm #{@machine.name}\"\n    end\n  end\n\n  # VirtualBox\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u8a2d\u5b9a\n  config.vm.provider :virtualbox do |virtualbox, override|\n    # Box\u306f\u73fe\u72b6Ubuntu 14.04\u304c\u3046\u307e\u304f\u3044\u304d\u3084\u3059\u3044\n    override.vm.box = \"boxcutter/ubuntu1404\"\n    # VirtualBox\u306e\u5834\u5408\u306fDocker\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u306b\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u7528\n    override.vm.network \"private_network\", type: \"dhcp\"\n  end\n\n  # IDCF\u30af\u30e9\u30a6\u30c9\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u8a2d\u5b9a\n  config.vm.provider :cloudstack do |cloudstack, override|\n    # Ubuntu 14.04\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\n    override.vm.box  = \"Ubuntu Server 14.04 LTS 64-bit\"\n\n    cloudstack.host    = \"compute.jp-east.idcfcloud.com\"\n    cloudstack.path    = \"/client/api\"\n    cloudstack.port    = \"443\"\n    cloudstack.scheme  = \"https\"\n\n    cloudstack.api_key    = \"#{ENV['CLOUDSTACK_API_KEY']}\"\n    cloudstack.secret_key = \"#{ENV['CLOUDSTACK_SECRET_KEY']}\"\n\n    cloudstack.service_offering_name = \"light.S1\"\n\n    # Firewall\u3092\u958b\u653e\u3059\u308b\u969b\u306b\u8a31\u53ef\u3059\u308bCIDR\n    # vagrant-cloudstack 1.2.0\u304b\u3089openfirewall\u3067\u958b\u653e\u3055\u308c\u308b\u30eb\u30fc\u30eb\u306b\u81ea\u52d5\u3067\u8a2d\u5b9a\u3055\u308c\u308b\n    cloudstack.pf_trusted_networks = \"#{ENV['CLOUDSTACK_PF_TRUSTED_NETWORKS'] || \"0.0.0.0/0\"}\"\n\n    cloudstack.keypair            = \"#{ENV['CLOUDSTACK_SSH_KEYPAIR']}\"\n    override.ssh.private_key_path = \"#{ENV['VAGRANT_SSH_PRIVATE_KEY']}\"\n\n    # requiretty\u304c\u6709\u52b9\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3046\u969b\u306e\u8a2d\u5b9a\n    # http://qiita.com/atsaki/items/467ce1569fbc2cb11cb8\n    override.ssh.username         = \"root\"\n    override.ssh.pty              = true \n    config.vm.synced_folder \".\", \"/vagrant\", disabled: true\n  end\n\n  # \u4f5c\u6210\u3059\u308b\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u5b9a\u7fa9\n  config.vm.define \"master01\" do |vm|\n    vm.vm.provider :cloudstack do |cloudstack|\n      cloudstack.zone_name = \"#{ENV['MASTER01_ZONE']}\"\n      # SSH\u7528\u306e\u30dd\u30fc\u30c8\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8a2d\u5b9a\n      # vagrant-cloudstack 1.2.0\u304b\u3089\u81ea\u52d5\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n      cloudstack.pf_ip_address   = \"#{ENV['MASTER01_PUBLIC_IP_ADDRESS']}\"\n      # Docker, Swarm\u7528\u306e\u30dd\u30fc\u30c8\u306e\u30dd\u30fc\u30c8\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8a2d\u5b9a\n      cloudstack.port_forwarding_rules = [2376, 3376].map { |port|\n        {\n          :ipaddress => \"#{ENV['MASTER01_PUBLIC_IP_ADDRESS']}\",\n          :protocol => \"tcp\",\n          :publicport => port,\n          :privateport  => port,\n          :openfirewall => true\n        }\n      }\n    end\n  end\n\n  config.vm.define \"agent01\" do |vm|\n    vm.vm.provider :cloudstack do |cloudstack|\n      cloudstack.zone_name = \"#{ENV['AGENT01_ZONE']}\"\n      cloudstack.pf_ip_address   = \"#{ENV['AGENT01_PUBLIC_IP_ADDRESS']}\"\n      cloudstack.port_forwarding_rules = [2376].map { |port|\n        {\n          :ipaddress => \"#{ENV['AGENT01_PUBLIC_IP_ADDRESS']}\",\n          :protocol => \"tcp\",\n          :publicport => port,\n          :privateport  => port,\n          :openfirewall => true\n        }\n      }\n    end\n  end\n\n  config.vm.define \"agent02\" do |vm|\n    vm.vm.provider :cloudstack do |cloudstack|\n      cloudstack.zone_name = \"#{ENV['AGENT02_ZONE']}\"\n      cloudstack.pf_ip_address   = \"#{ENV['AGENT02_PUBLIC_IP_ADDRESS']}\"\n      cloudstack.port_forwarding_rules = [2376].map { |port|\n        {\n          :ipaddress => \"#{ENV['AGENT02_PUBLIC_IP_ADDRESS']}\",\n          :protocol => \"tcp\",\n          :publicport => port,\n          :privateport  => port,\n          :openfirewall => true\n        }\n      }\n    end\n  end\nend\n\n\n\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u306a\u304a\u3057\u3066vagrant up\u3092\u5b9f\u884c\u3059\u308b\u3068IDCF\u30af\u30e9\u30a6\u30c9\u4e0a\u306bSwarm\u30af\u30e9\u30b9\u30bf\u304c\u69cb\u7bc9\u3055\u308c\u307e\u3059\u3002\n\uff08--no-parallel \u3092\u3064\u3051\u306a\u3044\u3068docker-machine create\u304c\u5168\u3066\u306e\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3055\u308c\u305a\u6b63\u3057\u304f\u30af\u30e9\u30b9\u30bf\u304c\u69cb\u7bc9\u3067\u304d\u306a\u304b\u3063\u305f\u3002\uff09\n$ SWARM_DISCOVERY_TOKEN=$(curl -s -X POST https://discovery.hub.docker.com/v1/clusters)\n$ SWARM_DISCOVERY_TOKEN=$SWARM_DISCOVERY_TOKEN vagrant up --provider=cloudstack --no-parallel\n\n\nSynced Folder\u3068\u30dc\u30ea\u30e5\u30fc\u30e0\u30de\u30a6\u30f3\u30c8\nVagrant\u306f\u4f5c\u6210\u3057\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u3068Synced Folder\u3067\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fb\u30d5\u30a1\u30a4\u30eb\u3092\u540c\u671f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30ed\u30fc\u30ab\u30eb\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30ea\u30e2\u30fc\u30c8\u306e/vagrant\u3068\u540c\u671f\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306b-v \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u30ed\u30fc\u30ab\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30e2\u30fc\u30c8\u306e\u4eee\u60f3\u30de\u30b7\u30f3\u4e0a\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n$ docker run  --rm -v /vagrant:/data  ubuntu head /data/Vagrantfile\nVagrant.configure(2) do |config|\n  # vagrant-triggers\u3092Provisioner\u3068\u3057\u3066\u4f7f\u7528\u3057\u3001\n  # \u4f5c\u6210\u3057\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u5bfe\u3057\u3066docker-machine create\u3092\u5b9f\u884c\n  config.vm.provision \"trigger\" do |trigger|\n    trigger.fire do\n      # docker-machine status\u306eexitstatus\u304c0\u306e\u5834\u5408\u306fdocker-machine create\u5b9f\u884c\u6e08\u307f\n      `docker-machine status #{@machine.name}`\n      if $?.exitstatus != 0\n        # \u4f7f\u7528\u3059\u308bIP\u3068\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\n        # VirtualBox\u306e\u5834\u5408\u306b\u306f\u4e00\u5ea6\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eIP\u3092\u53d6\u5f97\n\nrsync\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u540c\u671f\u306f\u30ed\u30fc\u30ab\u30eb\u304b\u3089\u30ea\u30e2\u30fc\u30c8\u3078\u306e\u4e00\u65b9\u5411\u3067\u3059\u3002Swarm\u30af\u30e9\u30b9\u30bf\u306e\u30db\u30b9\u30c8\u9593\u306e\u540c\u671f\u306f\u884c\u308f\u308c\u306a\u3044\u306e\u3067\u3001\u4f55\u308c\u304b\u306e\u30db\u30b9\u30c8\u3067\u5909\u66f4\u3092\u52a0\u3048\u308b\u3068\u30db\u30b9\u30c8\u3054\u3068\u306b\u4e2d\u8eab\u304c\u7570\u306a\u308b\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\u3002\n[Docker Machine](https://docs.docker.com/machine/)\u3092\u4f7f\u7528\u3059\u308b\u3068\u7c21\u5358\u306b\u69d8\u3005\u306a\u74b0\u5883\u306bDocker\u30db\u30b9\u30c8\u30fbSwarm\u30af\u30e9\u30b9\u30bf\u3092\u4f5c\u6210\u3057\u3001\u30ed\u30fc\u30ab\u30eb\u306eDocker\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nDocker Machine\u5358\u4f53\u3067\u3082\u4f7f\u3048\u307e\u3059\u304c[Vagrant](https://www.vagrantup.com/)\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067Docker Machine\u304c\u672a\u5bfe\u5fdc\u306e\u74b0\u5883\u306b\u30db\u30b9\u30c8\u3084Swarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# TL;DR\n\nVagrant\u3068Docker Machine\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002\n\n* \bDocker Machine\u304c\u672a\u5bfe\u5fdc\u306e\u74b0\u5883\u306bDocker\u74b0\u5883\u3092\u69cb\u7bc9\u3067\u304d\u308b\n* ```vagrant up```\u30b3\u30de\u30f3\u30c9\u3067\u8907\u6570\u30ce\u30fc\u30c9\u306eDocker\u30db\u30b9\u30c8\u30fbSwarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u30fb\u524a\u9664\u3067\u304d\u308b\n* Vagrant\u306eSynced Folder\u3067\u30ea\u30e2\u30fc\u30c8\u306e\u30db\u30b9\u30c8\u3068\u30d5\u30a1\u30a4\u30eb\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u540c\u671f\u3057\u3066\u304f\u308c\u308b\n\n# \u74b0\u5883\n\n\u52d5\u4f5c\u78ba\u8a8d\u306f\u4ee5\u4e0b\u306e\u74b0\u5883\u3067\u884c\u3044\u307e\u3057\u305f\u3002\n\n* Mac OSX 10.10.1\n* Vagrant 1.7.4\n* docker-machine 0.4.1\n* vagrant-triggers 0.5.1\n* vagrant-cloudstack 1.2.0\n\n# \u6e96\u5099\n\nVagrant, Docker, Docker Machine\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nMac, Windows\u3067\u3042\u308c\u3070[Docker Toolbox](https://www.docker.com/toolbox)\u3092\u4f7f\u3046\u3068\u95a2\u9023\u30c4\u30fc\u30eb\u3092\u307e\u3068\u3081\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002\n\n\u4eee\u60f3\u30de\u30b7\u30f3\u4f5c\u6210\u30fb\u524a\u9664\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067Docker Machine\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081[vagrant-triggers](https://github.com/emyl/vagrant-triggers)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```bash\n$ vagrant plugin install vagrant-triggers\n```\n\n# VirtualBox\u306bDocker\u30db\u30b9\u30c8\u3092\u69cb\u7bc9\n\n\u307e\u305aVirtualBox\u306bDocker\u30db\u30b9\u30c8\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3059\u3002\n\nVagrantfile\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```rb:Vagrantfile\nVagrant.configure(2) do |config|\n  # vagrant-triggers\u3092Provisioner\u3068\u3057\u3066\u4f7f\u7528\u3057\u3001\n  # \u4f5c\u6210\u3057\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u5bfe\u3057\u3066docker-machine create\u3092\u5b9f\u884c\n  config.vm.provision \"trigger\" do |trigger|\n    trigger.fire do\n      # docker-machine status\u306eexitstatus\u304c0\u306e\u5834\u5408\u306fdocker-machine create\u5b9f\u884c\u6e08\u307f\n      `docker-machine status #{@machine.name}`\n      if $?.exitstatus != 0\n        # \u4f7f\u7528\u3059\u308bIP\u3068\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\n        # VirtualBox\u306e\u5834\u5408\u306b\u306f\u4e00\u5ea6\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eIP\u3092\u53d6\u5f97\n        # \u305d\u306e\u4ed6\u306eProvider\u3067\u306f@machine.ssh_info\u304b\u3089IP\u3001\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\u3067\u304d\u308b\n        if @machine.provider_name == :virtualbox\n          ip = `vagrant ssh #{@machine.name} -c \"ip addr show dev eth1 | grep -w inet\"`\n               .match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)[0]\n          port = 22\n        else\n          ip = @machine.ssh_info[:host]\n          port = @machine.ssh_info[:port]\n        end\n\n        # docker-machine create\u3092\u5b9f\u884c\n        # SWARM_DISCOVERY_TOKEN\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408Swarm\u30af\u30e9\u30b9\u30bf\u7528\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\n        run \"docker-machine create -d generic \\\n            --generic-ip-address #{ip} \\\n            --generic-ssh-key #{@machine.ssh_info[:private_key_path][0]} \\\n            --generic-ssh-port #{port} \\\n            --generic-ssh-user #{@machine.ssh_info[:username]} \\\n            #{\"--swarm\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{\"--swarm-master\" if !ENV[\"SWARM_DISCOVERY_TOKEN\"].nil? && @machine.name.to_s.include?(\"master\")} \\\n            #{\"--swarm-discovery token://#{ENV[\"SWARM_DISCOVERY_TOKEN\"]}\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{@machine.name}\"\n      end\n    end\n  end\n\n  # \u4eee\u60f3\u30de\u30b7\u30f3\u524a\u9664\u6642\u306b\u306fdocker-machine rm\u3092\u5b9f\u884c\u3057docker-machine\u304b\u3089\u3082\u524a\u9664\u3059\u308b\n  config.trigger.before :destroy do\n    # docker-machine status\u306e\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9\u304c0\u3067\u306a\u3044\u5834\u5408\u306f\n    # docker-machine\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u7570\u5e38\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u305f\u3081\u524a\u9664\u3092\u30b9\u30ad\u30c3\u30d7\n    `docker-machine status #{@machine.name}`\n    if $?.exitstatus == 0\n      run \"docker-machine rm #{@machine.name}\"\n    end\n  end\n\n  # VirtualBox\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u8a2d\u5b9a\n  config.vm.provider :virtualbox do |virtualbox, override|\n    # Box\u306f\u73fe\u72b6Ubuntu 14.04\u304c\u3046\u307e\u304f\u3044\u304d\u3084\u3059\u3044\n    override.vm.box = \"boxcutter/ubuntu1404\"\n    # VirtualBox\u306e\u5834\u5408\u306fDocker\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u306b\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u7528\n    override.vm.network \"private_network\", type: \"dhcp\"\n  end\n\n  # \u4f5c\u6210\u3059\u308b\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u5b9a\u7fa9\n  config.vm.define \"docker01\" do |d|\n  end\nend\n```\n\n```vagrant up``` \u3067\u4eee\u60f3\u30de\u30b7\u30f3\u304c\u4f5c\u6210\u3055\u308c\u3001Docker Machine\u306b\u767b\u9332\u3055\u308c\u307e\u3059\u3002\n\n```bash\n$ vagrant up\n```\n\n\u767b\u9332\u3055\u308c\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u306f```docker-machine ls``` \u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```bash\n$ docker-machine ls\nNAME      ACTIVE   DRIVER       STATE     URL                         SWARM   \ndocker01              generic      Running   tcp://172.28.128.19:2376 \n```\n\n```docker-machine env``` \u306e\u51fa\u529b\u3092```eval``` \u3059\u308b\u3068Docker\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```bash\n$ eval \"$(docker-machine env docker01)\"\n$ docker run --rm hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n535020c3e8ad: Pull complete \naf340544ed62: Pull complete \nDigest: sha256:a68868bfe696c00866942e8f5ca39e3e31b79c1e50feaee4ce5e28df2f051d5c\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker.\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker Hub account:\n https://hub.docker.com\n\nFor more examples and ideas, visit:\n https://docs.docker.com/userguide/\n\n```\n\n```vagrant destroy``` \u3067\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u524a\u9664\u3059\u308b\u3068\u3001docker-machine\u304b\u3089\u3082\u524a\u9664\u3055\u308c\u307e\u3059\u3002\n\n```bash\n$ vagrant destroy\n$ docker-machine ls\n```\n\n\n# VirtualBox\u306bSwarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\n\n\u4e0a\u8a18\u306eVagrantfile\u3092\u4f7f\u3063\u3066Swarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n\u4eca\u56de\u306fmaster1\u53f0\u3001agent2\u53f0\u306e\u30af\u30e9\u30b9\u30bf\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\u6b21\u306e\u3088\u3046\u306bVagrantfile\u306e\u4eee\u60f3\u30de\u30b7\u30f3\u306e\u5b9a\u7fa9\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\uff08\u540d\u524d\u306b\u300cmaster\u300d\u3092\u542b\u3080\u4eee\u60f3\u30de\u30b7\u30f3\u3092master\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\uff09\n\n```rb:Vagrantfile\nVagrant.configure(2) do |config|\n  # vagrant-triggers\u3092Provisioner\u3068\u3057\u3066\u4f7f\u7528\u3057\u3001\n  # \u4f5c\u6210\u3057\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u5bfe\u3057\u3066docker-machine create\u3092\u5b9f\u884c\n  config.vm.provision \"trigger\" do |trigger|\n    trigger.fire do\n      # docker-machine status\u306eexitstatus\u304c0\u306e\u5834\u5408\u306fdocker-machine create\u5b9f\u884c\u6e08\u307f\n      `docker-machine status #{@machine.name}`\n      if $?.exitstatus != 0\n        # \u4f7f\u7528\u3059\u308bIP\u3068\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\n        # VirtualBox\u306e\u5834\u5408\u306b\u306f\u4e00\u5ea6\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eIP\u3092\u53d6\u5f97\n        # \u305d\u306e\u4ed6\u306eProvider\u3067\u306f@machine.ssh_info\u304b\u3089IP\u3001\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\u3067\u304d\u308b\n        if @machine.provider_name == :virtualbox\n          ip = `vagrant ssh #{@machine.name} -c \"ip addr show dev eth1 | grep -w inet\"`\n               .match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)[0]\n          port = 22\n        else\n          ip = @machine.ssh_info[:host]\n          port = @machine.ssh_info[:port]\n        end\n\n        # docker-machine create\u3092\u5b9f\u884c\n        # SWARM_DISCOVERY_TOKEN\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408Swarm\u30af\u30e9\u30b9\u30bf\u7528\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\n        run \"docker-machine create -d generic \\\n            --generic-ip-address #{ip} \\\n            --generic-ssh-key #{@machine.ssh_info[:private_key_path][0]} \\\n            --generic-ssh-port #{port} \\\n            --generic-ssh-user #{@machine.ssh_info[:username]} \\\n            #{\"--swarm\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{\"--swarm-master\" if !ENV[\"SWARM_DISCOVERY_TOKEN\"].nil? && @machine.name.to_s.include?(\"master\")} \\\n            #{\"--swarm-discovery token://#{ENV[\"SWARM_DISCOVERY_TOKEN\"]}\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{@machine.name}\"\n      end\n    end\n  end\n\n  # \u4eee\u60f3\u30de\u30b7\u30f3\u524a\u9664\u6642\u306b\u306fdocker-machine rm\u3092\u5b9f\u884c\u3057docker-machine\u304b\u3089\u3082\u524a\u9664\u3059\u308b\n  config.trigger.before :destroy do\n    # docker-machine status\u306e\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9\u304c0\u3067\u306a\u3044\u5834\u5408\u306f\n    # docker-machine\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u7570\u5e38\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u305f\u3081\u524a\u9664\u3092\u30b9\u30ad\u30c3\u30d7\n    `docker-machine status #{@machine.name}`\n    if $?.exitstatus == 0\n      run \"docker-machine rm #{@machine.name}\"\n    end\n  end\n\n  # VirtualBox\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u8a2d\u5b9a\n  config.vm.provider :virtualbox do |virtualbox, override|\n    # Box\u306f\u73fe\u72b6Ubuntu 14.04\u304c\u3046\u307e\u304f\u3044\u304d\u3084\u3059\u3044\n    override.vm.box = \"boxcutter/ubuntu1404\"\n    # VirtualBox\u306e\u5834\u5408\u306fDocker\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u306b\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u7528\n    override.vm.network \"private_network\", type: \"dhcp\"\n  end\n\n  # \u4f5c\u6210\u3059\u308b\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u5b9a\u7fa9\n  config.vm.define \"master01\" do |d|\n  end\n\n  config.vm.define \"agent01\" do |d|\n  end\n\n  config.vm.define \"agent02\" do |d|\n  end\nend\n```\n\n\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u4f5c\u6210\u3059\u308b\u524d\u306bSwarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```bash\n$ SWARM_DISCOVERY_TOKEN=$(curl -s -X POST https://discovery.hub.docker.com/v1/clusters)\n```\n\n\u3053\u306e\u5024\u3092\u4f7f\u3063\u3066\u6b21\u306e\u3088\u3046\u306b```vagrant up```\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068Swarm\u30af\u30e9\u30b9\u30bf\u304c\u69cb\u7bc9\u3055\u308c\u307e\u3059\u3002\n\n```bash\n$ SWARM_DISCOVERY_TOKEN=$SWARM_DISCOVERY_TOKEN vagrant up\n$ docker-machine ls\nNAME       ACTIVE   DRIVER       STATE     URL                         SWARM\nagent01             generic      Running   tcp://172.28.128.21:2376    master01\nagent02             generic      Running   tcp://172.28.128.22:2376    master01  \nmaster01   *        generic      Running   tcp://172.28.128.20:2376    master01 (master)\n```\n\n```docker-machine env --swarm``` \u3092\u4f7f\u3063\u3066\u74b0\u5883\u5909\u6570\u3092\u53d6\u5f97\u30fb\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```bash\n$ eval \"$(docker-machine env --swarm master01)\"\n```\n\n\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308c\u3070```docker info``` \u30b3\u30de\u30f3\u30c9\u30673\u30ce\u30fc\u30c9\u3042\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```bash\n$ docker info\nContainers: 4\nImages: 3\nRole: primary\nStrategy: spread\nFilters: affinity, health, constraint, port, dependency\nNodes: 3\n agent01: 172.28.128.24:2376\n  \u2514 Containers: 1\n  \u2514 Reserved CPUs: 0 / 1\n  \u2514 Reserved Memory: 0 B / 514.2 MiB\n  \u2514 Labels: executiondriver=native-0.2, kernelversion=3.16.0-30-generic, operatingsystem=Ubuntu 14.04.2 LTS, provider=generic, storagedriver=aufs\n agent02: 172.28.128.25:2376\n  \u2514 Containers: 1\n  \u2514 Reserved CPUs: 0 / 1\n  \u2514 Reserved Memory: 0 B / 514.2 MiB\n  \u2514 Labels: executiondriver=native-0.2, kernelversion=3.16.0-30-generic, operatingsystem=Ubuntu 14.04.2 LTS, provider=generic, storagedriver=aufs\n master01: 172.28.128.23:2376\n  \u2514 Containers: 2\n  \u2514 Reserved CPUs: 0 / 1\n  \u2514 Reserved Memory: 0 B / 514.2 MiB\n  \u2514 Labels: executiondriver=native-0.2, kernelversion=3.16.0-30-generic, operatingsystem=Ubuntu 14.04.2 LTS, provider=generic, storagedriver=aufs\nCPUs: 3\nTotal Memory: 1.507 GiB\nName: a4fbe0415d5f\n```\n\n```docker ps -a```\u3067swarm\u7528\u306e\u30b3\u30f3\u30c6\u30ca\u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```bash\n$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                      PORTS                                    NAMES\n9d3924175431        swarm:latest        \"/swarm join --advert\"   5 minutes ago       Up 5 minutes                2375/tcp                                 master01/swarm-agent\na4fbe0415d5f        swarm:latest        \"/swarm manage --tlsv\"   5 minutes ago       Up 5 minutes                2375/tcp, 172.28.128.23:3376->3376/tcp   master01/swarm-agent-master\n056fbce9741c        swarm:latest        \"/swarm join --advert\"   16 minutes ago      Up 16 minutes               2375/tcp                                 agent02/swarm-agent\n3da76b011711        swarm:latest        \"/swarm join --advert\"   18 minutes ago      Up 18 minutes               2375/tcp                                 agent01/swarm-agent \n```    \n\nSwarm\u30af\u30e9\u30b9\u30bf\u3067\u3082```docker run``` \u30b3\u30de\u30f3\u30c9\u3067\u30b3\u30f3\u30c6\u30ca\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002        \n\n```bash\n$ docker run --rm hello-world\n\nHello from Docker.\nThis message shows that your installation appears to be working correctly.\n\nTo generate this message, Docker took the following steps:\n 1. The Docker client contacted the Docker daemon.\n 2. The Docker daemon pulled the \"hello-world\" image from the Docker Hub.\n 3. The Docker daemon created a new container from that image which runs the\n    executable that produces the output you are currently reading.\n 4. The Docker daemon streamed that output to the Docker client, which sent it\n    to your terminal.\n\nTo try something more ambitious, you can run an Ubuntu container with:\n $ docker run -it ubuntu bash\n\nShare images, automate workflows, and more with a free Docker Hub account:\n https://hub.docker.com\n\nFor more examples and ideas, visit:\n https://docs.docker.com/userguide/\n```\n\n\n# CloudStack/IDCF\u30af\u30e9\u30a6\u30c9\u306e\u5834\u5408\n\nVagrant\u3092\u4eee\u60f3\u30de\u30b7\u30f3\u4f5c\u6210\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u3067Docker Machine\u304c\u672a\u5bfe\u5fdc\u306e\u74b0\u5883\u306b\u3082Docker\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4f8b\u3068\u3057\u3066IDCF\u30af\u30e9\u30a6\u30c9\u306eCloudStack\u4e0a\u306bSwarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u3057\u3066\u307f\u307e\u3059\u3002\n\n**2015/12/04 \u8ffd\u8a18:** CloudStack\u30c9\u30e9\u30a4\u30d0\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002Synced Folder\u304c\u4e0d\u8981\u3067\u3042\u308c\u3070CloudStack\u30c9\u30e9\u30a4\u30d0\u3092\u4f7f\u7528\u3057\u305f\u307b\u3046\u304c\u624b\u8efd\u3067\u3059\u3002([Docker Machine CloudStack Driver\u3092\u4f7f\u3063\u3066Docker\u30db\u30b9\u30c8\u30fbSwarm\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u7bc9\u3059\u308b - Qiita](http://qiita.com/atsaki/items/b3064d3f68f8b84acd3d))\n\nCloudStack\u3092\u4f7f\u3046\u305f\u3081\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```bash\n$ vagrant plugin install vagrant-cloudstack\n```\n\nDocker Machine Generic Driver\u306fDocker\u7528\u306e\u30dd\u30fc\u30c8\u3068\u3057\u30662376\u3092\u56fa\u5b9a\u3067\u4f7f\u7528\u3059\u308b\u305f\u3081\u30db\u30b9\u30c8\u3054\u3068\u306b\u7570\u306a\u308b\u30d1\u30d6\u30ea\u30c3\u30afIP\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u8ffd\u52a0IP\u306e\u6599\u91d1\u3092\u7bc0\u7d04\u3059\u308b\u305f\u30813\u53f0\u306e\u4eee\u60f3\u30de\u30b7\u30f3\u3092tesla, henry, pascal\u30be\u30fc\u30f3\u306b\u4f5c\u6210\u3057\u30bd\u30fc\u30b9IP\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nVagrantfile\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u74b0\u5883\u5909\u6570\u306f\u304a\u4f7f\u3044\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u9069\u5207\u306b\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```rb:Vagrantfile\nVagrant.configure(2) do |config|\n  # vagrant-triggers\u3092Provisioner\u3068\u3057\u3066\u4f7f\u7528\u3057\u3001\n  # \u4f5c\u6210\u3057\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u5bfe\u3057\u3066docker-machine create\u3092\u5b9f\u884c\n  config.vm.provision \"trigger\" do |trigger|\n    trigger.fire do\n      # docker-machine status\u306eexitstatus\u304c0\u306e\u5834\u5408\u306fdocker-machine create\u5b9f\u884c\u6e08\u307f\n      `docker-machine status #{@machine.name}`\n      if $?.exitstatus != 0\n        # \u4f7f\u7528\u3059\u308bIP\u3068\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\n        # VirtualBox\u306e\u5834\u5408\u306b\u306f\u4e00\u5ea6\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eIP\u3092\u53d6\u5f97\n        # \u305d\u306e\u4ed6\u306eProvider\u3067\u306f@machine.ssh_info\u304b\u3089IP\u3001\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\u3067\u304d\u308b\n        if @machine.provider_name == :virtualbox\n          ip = `vagrant ssh #{@machine.name} -c \"ip addr show dev eth1 | grep -w inet\"`\n               .match(/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}/)[0]\n          port = 22\n        else\n          ip = @machine.ssh_info[:host]\n          port = @machine.ssh_info[:port]\n        end\n\n        # docker-machine create\u3092\u5b9f\u884c\n        # SWARM_DISCOVERY_TOKEN\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408Swarm\u30af\u30e9\u30b9\u30bf\u7528\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\n        run \"docker-machine create -d generic \\\n            --generic-ip-address #{ip} \\\n            --generic-ssh-key #{@machine.ssh_info[:private_key_path][0]} \\\n            --generic-ssh-port #{port} \\\n            --generic-ssh-user #{@machine.ssh_info[:username]} \\\n            #{\"--swarm\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{\"--swarm-master\" if !ENV[\"SWARM_DISCOVERY_TOKEN\"].nil? && @machine.name.to_s.include?(\"master\")} \\\n            #{\"--swarm-discovery token://#{ENV[\"SWARM_DISCOVERY_TOKEN\"]}\" unless ENV[\"SWARM_DISCOVERY_TOKEN\"].nil?} \\\n            #{@machine.name}\"\n      end\n    end\n  end\n\n  # \u4eee\u60f3\u30de\u30b7\u30f3\u524a\u9664\u6642\u306b\u306fdocker-machine rm\u3092\u5b9f\u884c\u3057docker-machine\u304b\u3089\u3082\u524a\u9664\u3059\u308b\n  config.trigger.before :destroy do\n    # docker-machine status\u306e\u30ea\u30bf\u30fc\u30f3\u30b3\u30fc\u30c9\u304c0\u3067\u306a\u3044\u5834\u5408\u306f\n    # docker-machine\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u7570\u5e38\u304c\u767a\u751f\u3057\u3066\u3044\u308b\u305f\u3081\u524a\u9664\u3092\u30b9\u30ad\u30c3\u30d7\n    `docker-machine status #{@machine.name}`\n    if $?.exitstatus == 0\n      run \"docker-machine rm #{@machine.name}\"\n    end\n  end\n\n  # VirtualBox\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u8a2d\u5b9a\n  config.vm.provider :virtualbox do |virtualbox, override|\n    # Box\u306f\u73fe\u72b6Ubuntu 14.04\u304c\u3046\u307e\u304f\u3044\u304d\u3084\u3059\u3044\n    override.vm.box = \"boxcutter/ubuntu1404\"\n    # VirtualBox\u306e\u5834\u5408\u306fDocker\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u63a5\u7d9a\u306b\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u4f7f\u7528\n    override.vm.network \"private_network\", type: \"dhcp\"\n  end\n\n  # IDCF\u30af\u30e9\u30a6\u30c9\u3092\u4f7f\u7528\u3059\u308b\u969b\u306e\u8a2d\u5b9a\n  config.vm.provider :cloudstack do |cloudstack, override|\n    # Ubuntu 14.04\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\n    override.vm.box  = \"Ubuntu Server 14.04 LTS 64-bit\"\n\n    cloudstack.host    = \"compute.jp-east.idcfcloud.com\"\n    cloudstack.path    = \"/client/api\"\n    cloudstack.port    = \"443\"\n    cloudstack.scheme  = \"https\"\n\n    cloudstack.api_key    = \"#{ENV['CLOUDSTACK_API_KEY']}\"\n    cloudstack.secret_key = \"#{ENV['CLOUDSTACK_SECRET_KEY']}\"\n\n    cloudstack.service_offering_name = \"light.S1\"\n\n    # Firewall\u3092\u958b\u653e\u3059\u308b\u969b\u306b\u8a31\u53ef\u3059\u308bCIDR\n    # vagrant-cloudstack 1.2.0\u304b\u3089openfirewall\u3067\u958b\u653e\u3055\u308c\u308b\u30eb\u30fc\u30eb\u306b\u81ea\u52d5\u3067\u8a2d\u5b9a\u3055\u308c\u308b\n    cloudstack.pf_trusted_networks = \"#{ENV['CLOUDSTACK_PF_TRUSTED_NETWORKS'] || \"0.0.0.0/0\"}\"\n\n    cloudstack.keypair            = \"#{ENV['CLOUDSTACK_SSH_KEYPAIR']}\"\n    override.ssh.private_key_path = \"#{ENV['VAGRANT_SSH_PRIVATE_KEY']}\"\n\n    # requiretty\u304c\u6709\u52b9\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3046\u969b\u306e\u8a2d\u5b9a\n    # http://qiita.com/atsaki/items/467ce1569fbc2cb11cb8\n    override.ssh.username         = \"root\"\n    override.ssh.pty              = true \n    config.vm.synced_folder \".\", \"/vagrant\", disabled: true\n  end\n\n  # \u4f5c\u6210\u3059\u308b\u4eee\u60f3\u30de\u30b7\u30f3\u3092\u5b9a\u7fa9\n  config.vm.define \"master01\" do |vm|\n    vm.vm.provider :cloudstack do |cloudstack|\n      cloudstack.zone_name = \"#{ENV['MASTER01_ZONE']}\"\n      # SSH\u7528\u306e\u30dd\u30fc\u30c8\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8a2d\u5b9a\n      # vagrant-cloudstack 1.2.0\u304b\u3089\u81ea\u52d5\u3067\u30e9\u30f3\u30c0\u30e0\u306a\u30dd\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\n      cloudstack.pf_ip_address   = \"#{ENV['MASTER01_PUBLIC_IP_ADDRESS']}\"\n      # Docker, Swarm\u7528\u306e\u30dd\u30fc\u30c8\u306e\u30dd\u30fc\u30c8\u30d5\u30a9\u30ef\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8a2d\u5b9a\n      cloudstack.port_forwarding_rules = [2376, 3376].map { |port|\n        {\n          :ipaddress => \"#{ENV['MASTER01_PUBLIC_IP_ADDRESS']}\",\n          :protocol => \"tcp\",\n          :publicport => port,\n          :privateport  => port,\n          :openfirewall => true\n        }\n      }\n    end\n  end\n\n  config.vm.define \"agent01\" do |vm|\n    vm.vm.provider :cloudstack do |cloudstack|\n      cloudstack.zone_name = \"#{ENV['AGENT01_ZONE']}\"\n      cloudstack.pf_ip_address   = \"#{ENV['AGENT01_PUBLIC_IP_ADDRESS']}\"\n      cloudstack.port_forwarding_rules = [2376].map { |port|\n        {\n          :ipaddress => \"#{ENV['AGENT01_PUBLIC_IP_ADDRESS']}\",\n          :protocol => \"tcp\",\n          :publicport => port,\n          :privateport  => port,\n          :openfirewall => true\n        }\n      }\n    end\n  end\n\n  config.vm.define \"agent02\" do |vm|\n    vm.vm.provider :cloudstack do |cloudstack|\n      cloudstack.zone_name = \"#{ENV['AGENT02_ZONE']}\"\n      cloudstack.pf_ip_address   = \"#{ENV['AGENT02_PUBLIC_IP_ADDRESS']}\"\n      cloudstack.port_forwarding_rules = [2376].map { |port|\n        {\n          :ipaddress => \"#{ENV['AGENT02_PUBLIC_IP_ADDRESS']}\",\n          :protocol => \"tcp\",\n          :publicport => port,\n          :privateport  => port,\n          :openfirewall => true\n        }\n      }\n    end\n  end\nend\n```\n\n\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u306a\u304a\u3057\u3066```vagrant up```\u3092\u5b9f\u884c\u3059\u308b\u3068IDCF\u30af\u30e9\u30a6\u30c9\u4e0a\u306bSwarm\u30af\u30e9\u30b9\u30bf\u304c\u69cb\u7bc9\u3055\u308c\u307e\u3059\u3002\n\uff08```--no-parallel``` \u3092\u3064\u3051\u306a\u3044\u3068```docker-machine create```\u304c\u5168\u3066\u306e\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u5bfe\u3057\u3066\u5b9f\u884c\u3055\u308c\u305a\u6b63\u3057\u304f\u30af\u30e9\u30b9\u30bf\u304c\u69cb\u7bc9\u3067\u304d\u306a\u304b\u3063\u305f\u3002\uff09\n\n```bash\n$ SWARM_DISCOVERY_TOKEN=$(curl -s -X POST https://discovery.hub.docker.com/v1/clusters)\n$ SWARM_DISCOVERY_TOKEN=$SWARM_DISCOVERY_TOKEN vagrant up --provider=cloudstack --no-parallel\n```\n\n# Synced Folder\u3068\u30dc\u30ea\u30e5\u30fc\u30e0\u30de\u30a6\u30f3\u30c8\n\nVagrant\u306f\u4f5c\u6210\u3057\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u3068[Synced Folder](https://docs.vagrantup.com/v2/synced-folders/)\u3067\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30fb\u30d5\u30a1\u30a4\u30eb\u3092\u540c\u671f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30ed\u30fc\u30ab\u30eb\u306e\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u30ea\u30e2\u30fc\u30c8\u306e/vagrant\u3068\u540c\u671f\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306b```-v``` \u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u30ed\u30fc\u30ab\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30e2\u30fc\u30c8\u306e\u4eee\u60f3\u30de\u30b7\u30f3\u4e0a\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```bash\n$ docker run  --rm -v /vagrant:/data  ubuntu head /data/Vagrantfile\nVagrant.configure(2) do |config|\n  # vagrant-triggers\u3092Provisioner\u3068\u3057\u3066\u4f7f\u7528\u3057\u3001\n  # \u4f5c\u6210\u3057\u305f\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u5bfe\u3057\u3066docker-machine create\u3092\u5b9f\u884c\n  config.vm.provision \"trigger\" do |trigger|\n    trigger.fire do\n      # docker-machine status\u306eexitstatus\u304c0\u306e\u5834\u5408\u306fdocker-machine create\u5b9f\u884c\u6e08\u307f\n      `docker-machine status #{@machine.name}`\n      if $?.exitstatus != 0\n        # \u4f7f\u7528\u3059\u308bIP\u3068\u30dd\u30fc\u30c8\u3092\u53d6\u5f97\n        # VirtualBox\u306e\u5834\u5408\u306b\u306f\u4e00\u5ea6\u4eee\u60f3\u30de\u30b7\u30f3\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306eIP\u3092\u53d6\u5f97\n```\n\nrsync\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u540c\u671f\u306f\u30ed\u30fc\u30ab\u30eb\u304b\u3089\u30ea\u30e2\u30fc\u30c8\u3078\u306e\u4e00\u65b9\u5411\u3067\u3059\u3002Swarm\u30af\u30e9\u30b9\u30bf\u306e\u30db\u30b9\u30c8\u9593\u306e\u540c\u671f\u306f\u884c\u308f\u308c\u306a\u3044\u306e\u3067\u3001\u4f55\u308c\u304b\u306e\u30db\u30b9\u30c8\u3067\u5909\u66f4\u3092\u52a0\u3048\u308b\u3068\u30db\u30b9\u30c8\u3054\u3068\u306b\u4e2d\u8eab\u304c\u7570\u306a\u308b\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\u3002\n\n", "tags": ["docker", "docker-machine", "vagrant", "CloudStack", "IDCF\u30af\u30e9\u30a6\u30c9"]}