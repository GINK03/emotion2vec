{"context": "\n\u52d5\u4f5c\u74b0\u5883\nProcessing 3.1.1\nControlP5\u30e9\u30a4\u30d6\u30e9\u30ea\nWindows 8.1 pro (64bit)\n\n\nhttp://qiita.com/7of9/items/c5d29901c52ec57cbd80\n\u3092\u30d9\u30fc\u30b9\u306b\u30b0\u30e9\u30d5\u306e\u62e1\u5927\u7e2e\u5c0f\u6a5f\u80fd\u3092\u691c\u8a0e\u3057\u305f\u3002\n\n\u30b0\u30e9\u30d5\u306e\u62e1\u5927\u7e2e\u5c0f\u3001\u4e0a\u4e0b\u79fb\u52d5\n\n\u30dc\u30bf\u30f3\n\n[*] : \u5024\u306e\u62e1\u5927\n[/] : \u5024\u306e\u7e2e\u5c0f\n[+] : \u5024\u306e\u5897\u52a0\n[-] : \u5024\u306e\u6e1b\u5c11\n\n\u5024\u304c\u62e1\u5927\u3059\u308b\u3068\u3001\u30b0\u30e9\u30d5\u5185\u306e\u8868\u793a\u7bc4\u56f2\u304c\u62e1\u5927\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\n\u5b9f\u969b\u306e\u5b9f\u88c5\nmap()\u95a2\u6570\u3067\u30de\u30c3\u30d7\u3092\u3059\u308b\u6642\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4fc2\u6570(multi1)\u3068\u30d0\u30a4\u30a2\u30b9(bias1)\u3092\u4f7f\u3046\u3002\n\u305d\u308c\u3089\u306e\u5024\u3092\u5148\u307b\u3069\u306e\u30dc\u30bf\u30f3\u3067\u5909\u66f4\u3059\u308c\u3070\u3001\u30b0\u30e9\u30d5\u63cf\u753b\u304c\u62e1\u5927\u7e2e\u5c0f\u3001\u4e0a\u4e0b\u79fb\u52d5\u3067\u304d\u308b\u3002\n    work = datavals[idx-1] * multi1 + bias1;\n    float sty = map(work, 0, 100, grheight + grstarty, grstarty);\n\nsty: \u958b\u59cby\u5024\n\ncode\nimport processing.serial.*;\nimport controlP5.*;\n\nSerial myPort;\n\nControlP5 slider;\nint sliderValue;\nint numSerial = 5;\nint curSerial = -1;\n\nint grstartx = 100;\nint grstarty = 100;\nint grwidth = 600;\nint grheight = 350;\n\nint numData = 300;\nfloat[] datavals = new float [numData];\n\nControlP5 btnOpen;\n// for series1\nControlP5 btnEnlarge1;\nControlP5 btnShrink1;\nControlP5 btnUpper1;\nControlP5 btnLower1;\nfloat multi1 = 1.0;\nfloat bias1 = 0.0;\n\nvoid data_setup() {\n   for(int idx=0; idx < numData; idx++) {\n     datavals[idx] = random(100);\n   }\n}\n\nvoid comm_setup() {\n  slider = new ControlP5(this);\n  slider.addSlider(\"COM\")\n    .setRange(-1, numSerial - 1)\n    .setValue(-1)\n    .setPosition(50,40)\n    .setSize(200, 20)\n    .setNumberOfTickMarks(numSerial + 1);\n\n  btnOpen = new ControlP5(this);\n  btnOpen.addButton(\"openPort\")\n    .setLabel(\"Open\")\n    .setPosition(275, 40)\n    .setSize(100, 30);       \n}\n\nvoid graph_setup() {\n  // for series1\n  btnEnlarge1 = new ControlP5(this);\n  btnEnlarge1.addButton(\"enlarge1\")\n    .setLabel(\"*\")\n    .setPosition(40, 150)\n    .setSize(20,20);\n\n  btnEnlarge1 = new ControlP5(this);\n  btnEnlarge1.addButton(\"shrink1\")\n    .setLabel(\"/\")\n    .setPosition(40, 180)\n    .setSize(20,20);\n\n  btnUpper1 = new ControlP5(this);\n  btnUpper1.addButton(\"upper1\")\n    .setLabel(\"+\")\n    .setPosition(40, 350)\n    .setSize(20,20);   \n\n  btnLower1 = new ControlP5(this);\n  btnLower1.addButton(\"lower1\")\n    .setLabel(\"-\")\n    .setPosition(40, 380)\n    .setSize(20,20);\n}\n\nvoid setup() {\n  size(800,500);\n  data_setup();\n  comm_setup();\n  graph_setup();\n}\n\nvoid enlarge1() {\n  multi1 *= 2.0;\n}\nvoid shrink1() {\n  multi1 *= 0.5; \n}\nvoid upper1() {\n  bias1 += 10;\n}  \nvoid lower1() {\n  bias1 -= 10;\n}  \n\nvoid controlEvent(ControlEvent theEvent) {\n  if (theEvent.isController() == false) {\n    return;\n  }\n  if (theEvent.getName() == \"COM\") {\n    if (curSerial != slider.getValue(\"COM\")) {\n       curSerial = (int)slider.getValue(\"COM\");\n    }\n  }\n}\n\nvoid serialEvent(Serial myPort) { \n   String mystr = myPort.readStringUntil('\\n');\n   mystr = trim(mystr);\n   println(mystr);\n}\n\nvoid openPort() {\n   println(\"Open Port\"); \n   if (myPort != null) {\n      myPort.stop(); \n   }\n   myPort = new Serial(this, Serial.list()[(int)curSerial], 9600);\n   myPort.bufferUntil('\\n');\n }\n\nvoid drawGraph() {\n  fill(255);\n  rect(grstartx, grstarty, grwidth, grheight);\n\n  float work;\n  for(int idx=1; idx < numData; idx++) {\n    float stx = map(idx-1, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals[idx-1] * multi1 + bias1;\n    float sty = map(work, 0, 100, grheight + grstarty, grstarty);\n    float etx = map(idx, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals[idx] * multi1 + bias1;\n    float ety = map(work, 0, 100, grheight + grstarty, grstarty);\n    line(stx, sty, etx, ety);\n  }\n}\n\nvoid draw() {\n  background(150);  \n  drawGraph();\n}\n\n\n\u5b9f\u884c\u4f8b\n\n\u521d\u671f\u72b6\u614b\n\n\n\u521d\u671f\u72b6\u614b\u304b\u3089[*]\u30921\u56de\u62bc\u3057\u305f\u6642\n\n\n\u521d\u671f\u72b6\u614b\u304b\u3089[/]\u30922\u56de\u62bc\u3057\u305f\u6642\n\n\n\u521d\u671f\u72b6\u614b\u304b\u3089[/]\u30922\u56de\u62bc\u3057\u3066\u3001[+]\u30923\u56de\u62bc\u3057\u305f\u6642\n\n\n\u88dc\u8db3\n\n\u8868\u793a\u67a0\u304b\u3089\u306f\u307f\u51fa\u308b\u5206\u306f\u63cf\u753b\u3057\u306a\u3044\u306a\u3069\u306e\u51e6\u7406\u304c\u5fc5\u8981\n[+],[-]\u30dc\u30bf\u30f3\u3067\u5897\u6e1b\u3059\u308b\u5024\u306f\u56fa\u5b9a\u5024\u3088\u308a\u3082\u7269\u7406\u91cf\u306b\u5408\u308f\u305b\u305f\u65b9\u304c\u3044\u3044\u3060\u308d\u3046\u304c\u3001\u8981\u691c\u8a0e\n\n\n2\u30b7\u30ea\u30fc\u30ba\u5bfe\u5fdc\n\n\u5b9f\u884c\u4f8b\n\u305d\u308c\u305e\u308c\u306e\u30b7\u30ea\u30fc\u30ba\u306b\u5bfe\u3057\u3066\u62e1\u5927\u3001\u7e2e\u5c0f\u3001\u4e0a\u4e0b\u79fb\u52d5\u304c\u53ef\u80fd\u3002\n4\u30b7\u30ea\u30fc\u30ba\u5bfe\u5fdc\u304c\u5f53\u9762\u306e\u76ee\u6a19\u3002\n\n\ncode\n\u30b3\u30d4\u30da\u30b3\u30fc\u30c9\n\u69cb\u9020\u5316\u3057\u3066\u306a\u3044\u3002\n\u305d\u308d\u305d\u308dgithub\u306b\u5165\u308c\u305f\u65b9\u304c\u3044\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nimport processing.serial.*;\nimport controlP5.*;\n\nSerial myPort;\n\nControlP5 slider;\nint sliderValue;\nint numSerial = 5;\nint curSerial = -1;\n\nint grstartx = 100;\nint grstarty = 100;\nint grwidth = 600;\nint grheight = 350;\n\nint numData = 300;\nfloat[] datavals1 = new float [numData];\nfloat[] datavals2 = new float [numData];\n\nControlP5 btnOpen;\n// for series1\nControlP5 btnEnlarge1;\nControlP5 btnShrink1;\nControlP5 btnUpper1;\nControlP5 btnLower1;\nfloat multi1 = 1.0;\nfloat bias1 = 0.0;\n// for series2\nControlP5 btnEnlarge2;\nControlP5 btnShrink2;\nControlP5 btnUpper2;\nControlP5 btnLower2;\nfloat multi2 = 1.0;\nfloat bias2 = 0.0;\n\nint btnX1 = 40;\nint btnX2 = 70;\n\nvoid data_setup() {\n   for(int idx=0; idx < numData; idx++) {\n     datavals1[idx] = random(100);\n   }\n   for(int idx=0; idx < numData; idx++) {\n     datavals2[idx] = random(100);\n   }\n}\n\nvoid comm_setup() {\n  slider = new ControlP5(this);\n  slider.addSlider(\"COM\")\n    .setRange(-1, numSerial - 1)\n    .setValue(-1)\n    .setPosition(50,40)\n    .setSize(200, 20)\n    .setNumberOfTickMarks(numSerial + 1);\n\n  btnOpen = new ControlP5(this);\n  btnOpen.addButton(\"openPort\")\n    .setLabel(\"Open\")\n    .setPosition(275, 40)\n    .setSize(100, 30);       \n}\n\nvoid graph_setup() {\n  // for series1\n  btnEnlarge1 = new ControlP5(this);\n  btnEnlarge1.addButton(\"enlarge1\")\n    .setLabel(\"*\")\n    .setPosition(btnX1, 150)\n    .setSize(20,20);\n\n  btnEnlarge1 = new ControlP5(this);\n  btnEnlarge1.addButton(\"shrink1\")\n    .setLabel(\"/\")\n    .setPosition(btnX1, 180)\n    .setSize(20,20);\n\n  btnUpper1 = new ControlP5(this);\n  btnUpper1.addButton(\"upper1\")\n    .setLabel(\"+\")\n    .setPosition(btnX1, 350)\n    .setSize(20,20);   \n\n  btnLower1 = new ControlP5(this);\n  btnLower1.addButton(\"lower1\")\n    .setLabel(\"-\")\n    .setPosition(btnX1, 380)\n    .setSize(20,20);\n\n  // for series2\n  btnEnlarge2 = new ControlP5(this);\n  btnEnlarge2.addButton(\"enlarge2\")\n    .setLabel(\"*\")\n    .setPosition(btnX2, 150)\n    .setSize(20,20);\n\n  btnEnlarge2 = new ControlP5(this);\n  btnEnlarge2.addButton(\"shrink2\")\n    .setLabel(\"/\")\n    .setPosition(btnX2, 180)\n    .setSize(20,20);\n\n  btnUpper2 = new ControlP5(this);\n  btnUpper2.addButton(\"upper2\")\n    .setLabel(\"+\")\n    .setPosition(btnX2, 350)\n    .setSize(20,20);   \n\n  btnLower2 = new ControlP5(this);\n  btnLower2.addButton(\"lower2\")\n    .setLabel(\"-\")\n    .setPosition(btnX2, 380)\n    .setSize(20,20);\n}\n\nvoid setup() {\n  size(800,500);\n  data_setup();\n  comm_setup();\n  graph_setup();\n}\n\nvoid enlarge1() {\n  multi1 *= 2.0;\n}\nvoid shrink1() {\n  multi1 *= 0.5; \n}\nvoid upper1() {\n  bias1 += 10;\n}  \nvoid lower1() {\n  bias1 -= 10;\n}\n\nvoid enlarge2() {\n  multi2 *= 2.0;\n}\nvoid shrink2() {\n  multi2 *= 0.5; \n}\nvoid upper2() {\n  bias2 += 10;\n}  \nvoid lower2() {\n  bias2 -= 10;\n}\n\n\nvoid controlEvent(ControlEvent theEvent) {\n  if (theEvent.isController() == false) {\n    return;\n  }\n  if (theEvent.getName() == \"COM\") {\n    if (curSerial != slider.getValue(\"COM\")) {\n       curSerial = (int)slider.getValue(\"COM\");\n    }\n  }\n}\n\nvoid serialEvent(Serial myPort) { \n   String mystr = myPort.readStringUntil('\\n');\n   mystr = trim(mystr);\n   println(mystr);\n}\n\nvoid openPort() {\n   println(\"Open Port\"); \n   if (myPort != null) {\n      myPort.stop(); \n   }\n   myPort = new Serial(this, Serial.list()[(int)curSerial], 9600);\n   myPort.bufferUntil('\\n');\n }\n\nvoid drawGraph() {\n  stroke(0, 0, 0);\n  fill(255);\n  rect(grstartx, grstarty, grwidth, grheight);\n\n  float work;\n  stroke(0, 0, 0); // for series1  \n  for(int idx=1; idx < numData; idx++) {\n    float stx = map(idx-1, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals1[idx-1] * multi1 + bias1;\n    float sty = map(work, 0, 100, grheight + grstarty, grstarty);\n    float etx = map(idx, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals1[idx] * multi1 + bias1;\n    float ety = map(work, 0, 100, grheight + grstarty, grstarty);\n    line(stx, sty, etx, ety);\n  }\n\n  stroke(255, 0, 0); // for series2\n  for(int idx=1; idx < numData; idx++) {\n    float stx = map(idx-1, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals2[idx-1] * multi2 + bias2;\n    float sty = map(work, 0, 100, grheight + grstarty, grstarty);\n    float etx = map(idx, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals2[idx] * multi2 + bias2;\n    float ety = map(work, 0, 100, grheight + grstarty, grstarty);\n    line(stx, sty, etx, ety);\n  }\n}\n\nvoid draw() {\n  background(150);  \n  drawGraph();\n}\n\n```txt:\u52d5\u4f5c\u74b0\u5883\nProcessing 3.1.1\nControlP5\u30e9\u30a4\u30d6\u30e9\u30ea\nWindows 8.1 pro (64bit)\n```\n\nhttp://qiita.com/7of9/items/c5d29901c52ec57cbd80\n\u3092\u30d9\u30fc\u30b9\u306b\u30b0\u30e9\u30d5\u306e\u62e1\u5927\u7e2e\u5c0f\u6a5f\u80fd\u3092\u691c\u8a0e\u3057\u305f\u3002\n\n## \u30b0\u30e9\u30d5\u306e\u62e1\u5927\u7e2e\u5c0f\u3001\u4e0a\u4e0b\u79fb\u52d5\n\n### \u30dc\u30bf\u30f3\n\n- [*] : \u5024\u306e\u62e1\u5927\n- [/] : \u5024\u306e\u7e2e\u5c0f\n- [+] : \u5024\u306e\u5897\u52a0\n- [-] : \u5024\u306e\u6e1b\u5c11\n\n\u5024\u304c\u62e1\u5927\u3059\u308b\u3068\u3001\u30b0\u30e9\u30d5\u5185\u306e\u8868\u793a\u7bc4\u56f2\u304c\u62e1\u5927\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\n### \u5b9f\u969b\u306e\u5b9f\u88c5\n\nmap()\u95a2\u6570\u3067\u30de\u30c3\u30d7\u3092\u3059\u308b\u6642\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4fc2\u6570(multi1)\u3068\u30d0\u30a4\u30a2\u30b9(bias1)\u3092\u4f7f\u3046\u3002\n\u305d\u308c\u3089\u306e\u5024\u3092\u5148\u307b\u3069\u306e\u30dc\u30bf\u30f3\u3067\u5909\u66f4\u3059\u308c\u3070\u3001\u30b0\u30e9\u30d5\u63cf\u753b\u304c\u62e1\u5927\u7e2e\u5c0f\u3001\u4e0a\u4e0b\u79fb\u52d5\u3067\u304d\u308b\u3002\n\n```java\n    work = datavals[idx-1] * multi1 + bias1;\n    float sty = map(work, 0, 100, grheight + grstarty, grstarty);\n```\n\nsty: \u958b\u59cby\u5024\n\n\n## code\n\n```java\nimport processing.serial.*;\nimport controlP5.*;\n\nSerial myPort;\n\nControlP5 slider;\nint sliderValue;\nint numSerial = 5;\nint curSerial = -1;\n\nint grstartx = 100;\nint grstarty = 100;\nint grwidth = 600;\nint grheight = 350;\n\nint numData = 300;\nfloat[] datavals = new float [numData];\n\nControlP5 btnOpen;\n// for series1\nControlP5 btnEnlarge1;\nControlP5 btnShrink1;\nControlP5 btnUpper1;\nControlP5 btnLower1;\nfloat multi1 = 1.0;\nfloat bias1 = 0.0;\n\nvoid data_setup() {\n   for(int idx=0; idx < numData; idx++) {\n     datavals[idx] = random(100);\n   }\n}\n\nvoid comm_setup() {\n  slider = new ControlP5(this);\n  slider.addSlider(\"COM\")\n    .setRange(-1, numSerial - 1)\n    .setValue(-1)\n    .setPosition(50,40)\n    .setSize(200, 20)\n    .setNumberOfTickMarks(numSerial + 1);\n\n  btnOpen = new ControlP5(this);\n  btnOpen.addButton(\"openPort\")\n    .setLabel(\"Open\")\n    .setPosition(275, 40)\n    .setSize(100, 30);       \n}\n\nvoid graph_setup() {\n  // for series1\n  btnEnlarge1 = new ControlP5(this);\n  btnEnlarge1.addButton(\"enlarge1\")\n    .setLabel(\"*\")\n    .setPosition(40, 150)\n    .setSize(20,20);\n\n  btnEnlarge1 = new ControlP5(this);\n  btnEnlarge1.addButton(\"shrink1\")\n    .setLabel(\"/\")\n    .setPosition(40, 180)\n    .setSize(20,20);\n    \n  btnUpper1 = new ControlP5(this);\n  btnUpper1.addButton(\"upper1\")\n    .setLabel(\"+\")\n    .setPosition(40, 350)\n    .setSize(20,20);   \n\n  btnLower1 = new ControlP5(this);\n  btnLower1.addButton(\"lower1\")\n    .setLabel(\"-\")\n    .setPosition(40, 380)\n    .setSize(20,20);\n}\n\nvoid setup() {\n  size(800,500);\n  data_setup();\n  comm_setup();\n  graph_setup();\n}\n\nvoid enlarge1() {\n  multi1 *= 2.0;\n}\nvoid shrink1() {\n  multi1 *= 0.5; \n}\nvoid upper1() {\n  bias1 += 10;\n}  \nvoid lower1() {\n  bias1 -= 10;\n}  \n\nvoid controlEvent(ControlEvent theEvent) {\n  if (theEvent.isController() == false) {\n    return;\n  }\n  if (theEvent.getName() == \"COM\") {\n    if (curSerial != slider.getValue(\"COM\")) {\n       curSerial = (int)slider.getValue(\"COM\");\n    }\n  }\n}\n\nvoid serialEvent(Serial myPort) { \n   String mystr = myPort.readStringUntil('\\n');\n   mystr = trim(mystr);\n   println(mystr);\n}\n\nvoid openPort() {\n   println(\"Open Port\"); \n   if (myPort != null) {\n      myPort.stop(); \n   }\n   myPort = new Serial(this, Serial.list()[(int)curSerial], 9600);\n   myPort.bufferUntil('\\n');\n }\n\nvoid drawGraph() {\n  fill(255);\n  rect(grstartx, grstarty, grwidth, grheight);\n  \n  float work;\n  for(int idx=1; idx < numData; idx++) {\n    float stx = map(idx-1, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals[idx-1] * multi1 + bias1;\n    float sty = map(work, 0, 100, grheight + grstarty, grstarty);\n    float etx = map(idx, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals[idx] * multi1 + bias1;\n    float ety = map(work, 0, 100, grheight + grstarty, grstarty);\n    line(stx, sty, etx, ety);\n  }\n}\n\nvoid draw() {\n  background(150);  \n  drawGraph();\n}\n```\n\n## \u5b9f\u884c\u4f8b\n\n### \u521d\u671f\u72b6\u614b\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/eb402ca6-0885-0522-9049-3286c68581fc.png)\n\n### \u521d\u671f\u72b6\u614b\u304b\u3089[*]\u30921\u56de\u62bc\u3057\u305f\u6642\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/689823c6-78dd-88a5-9373-7feec58973f0.png)\n\n### \u521d\u671f\u72b6\u614b\u304b\u3089[/]\u30922\u56de\u62bc\u3057\u305f\u6642\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/af406056-e56f-dece-d6d2-43f185997fef.png)\n\n\n### \u521d\u671f\u72b6\u614b\u304b\u3089[/]\u30922\u56de\u62bc\u3057\u3066\u3001[+]\u30923\u56de\u62bc\u3057\u305f\u6642\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/7226825d-df43-5399-ad72-fe35f0a2198a.png)\n\n### \u88dc\u8db3\n\n- \u8868\u793a\u67a0\u304b\u3089\u306f\u307f\u51fa\u308b\u5206\u306f\u63cf\u753b\u3057\u306a\u3044\u306a\u3069\u306e\u51e6\u7406\u304c\u5fc5\u8981\n- [+],[-]\u30dc\u30bf\u30f3\u3067\u5897\u6e1b\u3059\u308b\u5024\u306f\u56fa\u5b9a\u5024\u3088\u308a\u3082\u7269\u7406\u91cf\u306b\u5408\u308f\u305b\u305f\u65b9\u304c\u3044\u3044\u3060\u308d\u3046\u304c\u3001\u8981\u691c\u8a0e\n\n\n## 2\u30b7\u30ea\u30fc\u30ba\u5bfe\u5fdc\n\n### \u5b9f\u884c\u4f8b\n\n\u305d\u308c\u305e\u308c\u306e\u30b7\u30ea\u30fc\u30ba\u306b\u5bfe\u3057\u3066\u62e1\u5927\u3001\u7e2e\u5c0f\u3001\u4e0a\u4e0b\u79fb\u52d5\u304c\u53ef\u80fd\u3002\n4\u30b7\u30ea\u30fc\u30ba\u5bfe\u5fdc\u304c\u5f53\u9762\u306e\u76ee\u6a19\u3002\n\n![qiita.png](https://qiita-image-store.s3.amazonaws.com/0/32870/3bc33a1d-4490-d6e1-1435-77afad3b750b.png)\n\n### code\n\n\u30b3\u30d4\u30da\u30b3\u30fc\u30c9\n\u69cb\u9020\u5316\u3057\u3066\u306a\u3044\u3002\n\u305d\u308d\u305d\u308dgithub\u306b\u5165\u308c\u305f\u65b9\u304c\u3044\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n```java\nimport processing.serial.*;\nimport controlP5.*;\n\nSerial myPort;\n\nControlP5 slider;\nint sliderValue;\nint numSerial = 5;\nint curSerial = -1;\n\nint grstartx = 100;\nint grstarty = 100;\nint grwidth = 600;\nint grheight = 350;\n\nint numData = 300;\nfloat[] datavals1 = new float [numData];\nfloat[] datavals2 = new float [numData];\n\nControlP5 btnOpen;\n// for series1\nControlP5 btnEnlarge1;\nControlP5 btnShrink1;\nControlP5 btnUpper1;\nControlP5 btnLower1;\nfloat multi1 = 1.0;\nfloat bias1 = 0.0;\n// for series2\nControlP5 btnEnlarge2;\nControlP5 btnShrink2;\nControlP5 btnUpper2;\nControlP5 btnLower2;\nfloat multi2 = 1.0;\nfloat bias2 = 0.0;\n\nint btnX1 = 40;\nint btnX2 = 70;\n\nvoid data_setup() {\n   for(int idx=0; idx < numData; idx++) {\n     datavals1[idx] = random(100);\n   }\n   for(int idx=0; idx < numData; idx++) {\n     datavals2[idx] = random(100);\n   }\n}\n\nvoid comm_setup() {\n  slider = new ControlP5(this);\n  slider.addSlider(\"COM\")\n    .setRange(-1, numSerial - 1)\n    .setValue(-1)\n    .setPosition(50,40)\n    .setSize(200, 20)\n    .setNumberOfTickMarks(numSerial + 1);\n\n  btnOpen = new ControlP5(this);\n  btnOpen.addButton(\"openPort\")\n    .setLabel(\"Open\")\n    .setPosition(275, 40)\n    .setSize(100, 30);       \n}\n\nvoid graph_setup() {\n  // for series1\n  btnEnlarge1 = new ControlP5(this);\n  btnEnlarge1.addButton(\"enlarge1\")\n    .setLabel(\"*\")\n    .setPosition(btnX1, 150)\n    .setSize(20,20);\n    \n  btnEnlarge1 = new ControlP5(this);\n  btnEnlarge1.addButton(\"shrink1\")\n    .setLabel(\"/\")\n    .setPosition(btnX1, 180)\n    .setSize(20,20);\n    \n  btnUpper1 = new ControlP5(this);\n  btnUpper1.addButton(\"upper1\")\n    .setLabel(\"+\")\n    .setPosition(btnX1, 350)\n    .setSize(20,20);   \n\n  btnLower1 = new ControlP5(this);\n  btnLower1.addButton(\"lower1\")\n    .setLabel(\"-\")\n    .setPosition(btnX1, 380)\n    .setSize(20,20);\n\n  // for series2\n  btnEnlarge2 = new ControlP5(this);\n  btnEnlarge2.addButton(\"enlarge2\")\n    .setLabel(\"*\")\n    .setPosition(btnX2, 150)\n    .setSize(20,20);\n    \n  btnEnlarge2 = new ControlP5(this);\n  btnEnlarge2.addButton(\"shrink2\")\n    .setLabel(\"/\")\n    .setPosition(btnX2, 180)\n    .setSize(20,20);\n    \n  btnUpper2 = new ControlP5(this);\n  btnUpper2.addButton(\"upper2\")\n    .setLabel(\"+\")\n    .setPosition(btnX2, 350)\n    .setSize(20,20);   \n\n  btnLower2 = new ControlP5(this);\n  btnLower2.addButton(\"lower2\")\n    .setLabel(\"-\")\n    .setPosition(btnX2, 380)\n    .setSize(20,20);\n}\n\nvoid setup() {\n  size(800,500);\n  data_setup();\n  comm_setup();\n  graph_setup();\n}\n\nvoid enlarge1() {\n  multi1 *= 2.0;\n}\nvoid shrink1() {\n  multi1 *= 0.5; \n}\nvoid upper1() {\n  bias1 += 10;\n}  \nvoid lower1() {\n  bias1 -= 10;\n}\n\nvoid enlarge2() {\n  multi2 *= 2.0;\n}\nvoid shrink2() {\n  multi2 *= 0.5; \n}\nvoid upper2() {\n  bias2 += 10;\n}  \nvoid lower2() {\n  bias2 -= 10;\n}\n\n\nvoid controlEvent(ControlEvent theEvent) {\n  if (theEvent.isController() == false) {\n    return;\n  }\n  if (theEvent.getName() == \"COM\") {\n    if (curSerial != slider.getValue(\"COM\")) {\n       curSerial = (int)slider.getValue(\"COM\");\n    }\n  }\n}\n\nvoid serialEvent(Serial myPort) { \n   String mystr = myPort.readStringUntil('\\n');\n   mystr = trim(mystr);\n   println(mystr);\n}\n\nvoid openPort() {\n   println(\"Open Port\"); \n   if (myPort != null) {\n      myPort.stop(); \n   }\n   myPort = new Serial(this, Serial.list()[(int)curSerial], 9600);\n   myPort.bufferUntil('\\n');\n }\n\nvoid drawGraph() {\n  stroke(0, 0, 0);\n  fill(255);\n  rect(grstartx, grstarty, grwidth, grheight);\n  \n  float work;\n  stroke(0, 0, 0); // for series1  \n  for(int idx=1; idx < numData; idx++) {\n    float stx = map(idx-1, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals1[idx-1] * multi1 + bias1;\n    float sty = map(work, 0, 100, grheight + grstarty, grstarty);\n    float etx = map(idx, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals1[idx] * multi1 + bias1;\n    float ety = map(work, 0, 100, grheight + grstarty, grstarty);\n    line(stx, sty, etx, ety);\n  }\n\n  stroke(255, 0, 0); // for series2\n  for(int idx=1; idx < numData; idx++) {\n    float stx = map(idx-1, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals2[idx-1] * multi2 + bias2;\n    float sty = map(work, 0, 100, grheight + grstarty, grstarty);\n    float etx = map(idx, 0, numData, grstartx, grstartx + grwidth);\n    work = datavals2[idx] * multi2 + bias2;\n    float ety = map(work, 0, 100, grheight + grstarty, grstarty);\n    line(stx, sty, etx, ety);\n  }\n}\n\nvoid draw() {\n  background(150);  \n  drawGraph();\n}\n```\n", "tags": ["processing", "borgSensorSystem1"]}