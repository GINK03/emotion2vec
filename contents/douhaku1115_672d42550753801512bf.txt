{"context": " More than 1 year has passed since last update.\u5165\u9580\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304b\u3089\n\nstack.c\n#include \"stdafx.h\"\n\n#include <iostream>\n#include \"stdafx.h\"\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nusing namespace std;\n#define MAXSIZE 10\n\nstruct ArrayStack {\n    int top;\n    int capacity;\n    int *array;\n};\ntypedef struct ArrayStack stack;\n\n\nstruct ArrayStack *CreateStack() {\n    struct ArrayStack *S = (struct ArrayStack * )malloc(sizeof(struct ArrayStack));\n    if (!S)return NULL;\n    S->capacity = MAXSIZE;\n    S->top = -1;\n    S->array = (int *)malloc(S->capacity*sizeof(int));\n    if (!S->array)return NULL;\n    return S;\n}\nint IsEmptyStack(struct ArrayStack *S) {\n    return (S->top == -1);\n}\nint IsFullStack(struct ArrayStack *S) {\n    return (S->top == S->capacity - 1);\n}\nvoid Push(stack *S,int data) {\n\n\n    if (IsFullStack(S)) cout << \"Stack Overflow!\" << endl;\n    else\n    {\n        S->array[++S->top] = data;\n        cout <<\"data \"<<data<< \" is added to \"<< S->top+1 <<endl;\n    }\n}\nint Pop(struct ArrayStack *S) {\n    if (IsEmptyStack(S)) {\n        cout << \"Stack is Enpty \";\n        return 0;\n    }\n    else {\n        cout << S->array[S->top] << \" is pop \" << endl;\n        return (S->array[S->top--]);\n    }\n}\n\nvoid DeleteStack(struct ArrayStack *S) {\n    if (S) {\n        if (S->array)free(S->array);\n        free(S);\n    }\n}\nvoid show(stack *S) {\n    if (IsEmptyStack(S)) \n        cout << \"Stack is Enpty \";\n    for (int i = 0; i < S->top+1; i++) {\n        cout << \"No: \" << i+1 << \" is \" << S->array[i] << endl;\n    }\n\n\n}\n\nint main() {\n    stack *st = CreateStack();\n    Push(st, 1);\n    Push(st, 2);\n    Push(st, 4);\n    Push(st, 3);\n\n    Pop(st);\n    //DeleteStack(array);\n    show(st);\n\n    return 0;\n}\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3002\n\ndata 1 is added to 1\ndata 2 is added to 2\ndata 4 is added to 3\ndata 3 is added to 4\n3 is pop\nNo: 1 is 1\nNo: 2 is 2\nNo: 3 is 4\n\n\u5165\u9580\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304b\u3089\n\n```lang:stack.c\n#include \"stdafx.h\"\n\n#include <iostream>\n#include \"stdafx.h\"\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nusing namespace std;\n#define MAXSIZE 10\n\nstruct ArrayStack {\n\tint top;\n\tint capacity;\n\tint *array;\n};\ntypedef struct ArrayStack stack;\n\n\nstruct ArrayStack *CreateStack() {\n\tstruct ArrayStack *S = (struct ArrayStack * )malloc(sizeof(struct ArrayStack));\n\tif (!S)return NULL;\n\tS->capacity = MAXSIZE;\n\tS->top = -1;\n\tS->array = (int *)malloc(S->capacity*sizeof(int));\n\tif (!S->array)return NULL;\n\treturn S;\n}\nint IsEmptyStack(struct ArrayStack *S) {\n\treturn (S->top == -1);\n}\nint IsFullStack(struct ArrayStack *S) {\n\treturn (S->top == S->capacity - 1);\n}\nvoid Push(stack *S,int data) {\n\t\n\t\n\tif (IsFullStack(S)) cout << \"Stack Overflow!\" << endl;\n\telse\n\t{\n\t\tS->array[++S->top] = data;\n\t\tcout <<\"data \"<<data<< \" is added to \"<< S->top+1 <<endl;\n\t}\n}\nint Pop(struct ArrayStack *S) {\n\tif (IsEmptyStack(S)) {\n\t\tcout << \"Stack is Enpty \";\n\t\treturn 0;\n\t}\n\telse {\n\t\tcout << S->array[S->top] << \" is pop \" << endl;\n\t\treturn (S->array[S->top--]);\n\t}\n}\n\nvoid DeleteStack(struct ArrayStack *S) {\n\tif (S) {\n\t\tif (S->array)free(S->array);\n\t\tfree(S);\n\t}\n}\nvoid show(stack *S) {\n\tif (IsEmptyStack(S)) \n\t\tcout << \"Stack is Enpty \";\n\tfor (int i = 0; i < S->top+1; i++) {\n\t\tcout << \"No: \" << i+1 << \" is \" << S->array[i] << endl;\n\t}\n\t\t\n\t\n}\n\nint main() {\n\tstack *st = CreateStack();\n\tPush(st, 1);\n\tPush(st, 2);\n\tPush(st, 4);\n\tPush(st, 3);\n\t\n\tPop(st);\n\t//DeleteStack(array);\n\tshow(st);\n\n\treturn 0;\n}\n```\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3002\n```\ndata 1 is added to 1\ndata 2 is added to 2\ndata 4 is added to 3\ndata 3 is added to 4\n3 is pop\nNo: 1 is 1\nNo: 2 is 2\nNo: 3 is 4\n```\n", "tags": ["C", "stack", "\u5165\u9580\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}