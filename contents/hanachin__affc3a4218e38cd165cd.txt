{"context": "\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304fE04 \u306e\u554f\u984c\u3092Ruby\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://qiita.com/mtsmfm/items/6d9112fcc568908caaba\nmodule DeadTrail\n  refine(Object) do\n    def dead_trail\n      def self.dead_trail; end\n    end\n\n    def dead_trail?\n      respond_to?(:dead_trail)\n    end\n  end\nend\n\nusing DeadTrail\n\ndef reach_the_top?(rock, trails, hiker)\n  return if hiker == rock\n\n  trails.reverse.each do |trail|\n    case [hiker, trail]\n    when %w(B 1), %w(H 8)\n      return if trail.dead_trail?\n      hiker = 'A'\n    when %w(C 2), %w(A 1)\n      return if trail.dead_trail?\n      hiker = 'B'\n    when %w(D 3), %w(B 2)\n      return if trail.dead_trail?\n      hiker = 'C'\n    when %w(E 4), %w(C 3)\n      return if trail.dead_trail?\n      hiker = 'D'\n    when %w(F 5), %w(D 4)\n      return if trail.dead_trail?\n      hiker = 'E'\n    when %w(G 6), %w(E 5)\n      return if trail.dead_trail?\n      hiker = 'F'\n    when %w(H 7), %w(F 6)\n      return if trail.dead_trail?\n      hiker = 'G'\n    when %w(A 8), %w(G 7)\n      return if trail.dead_trail?\n      hiker = 'H'\n    end\n  end\n\n  true\nend\n\ndef rock_rolling_down(rock, trails)\n  trails.each do |trail|\n    case [rock, trail]\n    when %w(B 1), %w(H 8)\n      rock = 'A'\n      trail.dead_trail\n    when %w(C 2), %w(A 1)\n      rock = 'B'\n      trail.dead_trail\n    when %w(D 3), %w(B 2)\n      rock = 'C'\n      trail.dead_trail\n    when %w(E 4), %w(C 3)\n      rock = 'D'\n      trail.dead_trail\n    when %w(F 5), %w(D 4)\n      rock = 'E'\n      trail.dead_trail\n    when %w(G 6), %w(E 5)\n      rock = 'F'\n      trail.dead_trail\n    when %w(H 7), %w(F 6)\n      rock = 'G'\n      trail.dead_trail\n    when %w(A 8), %w(G 7)\n      rock = 'H'\n      trail.dead_trail\n    end\n  end\n  rock\nend\n\ndef solve(input)\n  trails, rock = input.split(?:)\n  trails = trails.chars\n\n  rock = rock_rolling_down(rock, trails)\n\n  hikers = %w(A B C D E F G H)\n  hikers.select {|hiker| reach_the_top?(rock, trails, hiker) }.join\nend\n\ndef test(input, expected)\n  actual = solve(input)\n  unless actual == expected\n    puts \"test(#{input.inspect}) #=>\\n  expected: #{expected}\\n    actual: #{actual}\"\n  end\nend\n\ntest(\"2512:C\", \"DEFGH\")\ntest(\"1:A\", \"CDEFGH\")\ntest(\":C\", \"ABDEFGH\")\ntest(\"2345:B\", \"AGH\")\ntest(\"1256:E\", \"ABCDH\")\ntest(\"1228:A\", \"ADEFG\")\ntest(\"5623:B\", \"AEFGH\")\ntest(\"8157:C\", \"ABDEFGH\")\ntest(\"74767:E\", \"ABCFGH\")\ntest(\"88717:D\", \"ABCEFGH\")\ntest(\"148647:A\", \"ACDEFH\")\ntest(\"374258:H\", \"BCDEFH\")\ntest(\"6647768:F\", \"ABCDEH\")\ntest(\"4786317:E\", \"ABFGH\")\ntest(\"3456781:C\", \"\")\ntest(\"225721686547123:C\", \"CEF\")\ntest(\"2765356148824666:F\", \"ABCDEH\")\ntest(\"42318287535641783:F\", \"BDE\")\ntest(\"584423584751745261:D\", \"FGH\")\ntest(\"8811873415472513884:D\", \"CFG\")\ntest(\"74817442725737422451:H\", \"BCDEF\")\ntest(\"223188865746766511566:C\", \"ABGH\")\ntest(\"2763666483242552567747:F\", \"ABCG\")\ntest(\"76724442325377753577138:E\", \"EG\")\ntest(\"327328486656448784712618:B\", \"\")\ntest(\"4884637666662548114774288:D\", \"DGH\")\ntest(\"84226765313786654637511248:H\", \"DEF\")\ntest(\"486142154163288126476238756:A\", \"CDF\")\ntest(\"1836275732415226326155464567:F\", \"BCD\")\ntest(\"62544434452376661746517374245:G\", \"G\")\ntest(\"381352782758218463842725673473:B\", \"A\")\n\n\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304fE04 \u306e\u554f\u984c\u3092Ruby\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://qiita.com/mtsmfm/items/6d9112fcc568908caaba\n\n```rb\nmodule DeadTrail\n  refine(Object) do\n    def dead_trail\n      def self.dead_trail; end\n    end\n\n    def dead_trail?\n      respond_to?(:dead_trail)\n    end\n  end\nend\n\nusing DeadTrail\n\ndef reach_the_top?(rock, trails, hiker)\n  return if hiker == rock\n\n  trails.reverse.each do |trail|\n    case [hiker, trail]\n    when %w(B 1), %w(H 8)\n      return if trail.dead_trail?\n      hiker = 'A'\n    when %w(C 2), %w(A 1)\n      return if trail.dead_trail?\n      hiker = 'B'\n    when %w(D 3), %w(B 2)\n      return if trail.dead_trail?\n      hiker = 'C'\n    when %w(E 4), %w(C 3)\n      return if trail.dead_trail?\n      hiker = 'D'\n    when %w(F 5), %w(D 4)\n      return if trail.dead_trail?\n      hiker = 'E'\n    when %w(G 6), %w(E 5)\n      return if trail.dead_trail?\n      hiker = 'F'\n    when %w(H 7), %w(F 6)\n      return if trail.dead_trail?\n      hiker = 'G'\n    when %w(A 8), %w(G 7)\n      return if trail.dead_trail?\n      hiker = 'H'\n    end\n  end\n\n  true\nend\n\ndef rock_rolling_down(rock, trails)\n  trails.each do |trail|\n    case [rock, trail]\n    when %w(B 1), %w(H 8)\n      rock = 'A'\n      trail.dead_trail\n    when %w(C 2), %w(A 1)\n      rock = 'B'\n      trail.dead_trail\n    when %w(D 3), %w(B 2)\n      rock = 'C'\n      trail.dead_trail\n    when %w(E 4), %w(C 3)\n      rock = 'D'\n      trail.dead_trail\n    when %w(F 5), %w(D 4)\n      rock = 'E'\n      trail.dead_trail\n    when %w(G 6), %w(E 5)\n      rock = 'F'\n      trail.dead_trail\n    when %w(H 7), %w(F 6)\n      rock = 'G'\n      trail.dead_trail\n    when %w(A 8), %w(G 7)\n      rock = 'H'\n      trail.dead_trail\n    end\n  end\n  rock\nend\n\ndef solve(input)\n  trails, rock = input.split(?:)\n  trails = trails.chars\n\n  rock = rock_rolling_down(rock, trails)\n\n  hikers = %w(A B C D E F G H)\n  hikers.select {|hiker| reach_the_top?(rock, trails, hiker) }.join\nend\n\ndef test(input, expected)\n  actual = solve(input)\n  unless actual == expected\n    puts \"test(#{input.inspect}) #=>\\n  expected: #{expected}\\n    actual: #{actual}\"\n  end\nend\n\ntest(\"2512:C\", \"DEFGH\")\ntest(\"1:A\", \"CDEFGH\")\ntest(\":C\", \"ABDEFGH\")\ntest(\"2345:B\", \"AGH\")\ntest(\"1256:E\", \"ABCDH\")\ntest(\"1228:A\", \"ADEFG\")\ntest(\"5623:B\", \"AEFGH\")\ntest(\"8157:C\", \"ABDEFGH\")\ntest(\"74767:E\", \"ABCFGH\")\ntest(\"88717:D\", \"ABCEFGH\")\ntest(\"148647:A\", \"ACDEFH\")\ntest(\"374258:H\", \"BCDEFH\")\ntest(\"6647768:F\", \"ABCDEH\")\ntest(\"4786317:E\", \"ABFGH\")\ntest(\"3456781:C\", \"\")\ntest(\"225721686547123:C\", \"CEF\")\ntest(\"2765356148824666:F\", \"ABCDEH\")\ntest(\"42318287535641783:F\", \"BDE\")\ntest(\"584423584751745261:D\", \"FGH\")\ntest(\"8811873415472513884:D\", \"CFG\")\ntest(\"74817442725737422451:H\", \"BCDEF\")\ntest(\"223188865746766511566:C\", \"ABGH\")\ntest(\"2763666483242552567747:F\", \"ABCG\")\ntest(\"76724442325377753577138:E\", \"EG\")\ntest(\"327328486656448784712618:B\", \"\")\ntest(\"4884637666662548114774288:D\", \"DGH\")\ntest(\"84226765313786654637511248:H\", \"DEF\")\ntest(\"486142154163288126476238756:A\", \"CDF\")\ntest(\"1836275732415226326155464567:F\", \"BCD\")\ntest(\"62544434452376661746517374245:G\", \"G\")\ntest(\"381352782758218463842725673473:B\", \"A\")\n```\n", "tags": ["Ruby", "yhpg", "\u3069\u3046\u66f8\u304f"]}