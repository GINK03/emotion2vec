{"tags": ["mruby"], "context": " More than 1 year has passed since last update.[Ruby] \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u63a5\u7d9a\u3055\u308c\u305f\u30d7\u30ea\u30f3\u30bf\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u53d6\u5f97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0 \u3092 mruby \u3067\u52d5\u4f5c\u3059\u308b\u3088\u3046\u79fb\u690d\u3057\u307e\u3057\u305f\u3002\n\n1. mruby \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\n$ git clone https://github.com/mruby/mruby.git\n\n2. \u30d3\u30eb\u30c9\u8a2d\u5b9a\u3092\u7de8\u96c6\u3059\u308b\n\nbuild_config.rb\n############################\n# Start of your build_config\n\nMRuby::Build.new do |conf|\n  toolchain :clang # :gcc, :visualcpp\n\n  conf.bins = %w(mrbc)\n\n  # mruby's Core GEMs\n  conf.gem 'mrbgems/mruby-bin-mirb'\n  conf.gem 'mrbgems/mruby-bin-mruby'\n  conf.gem 'mrbgems/mruby-print'\n  conf.gem 'mrbgems/mruby-sprintf'\n\n  # user-defined GEMs\n  conf.gem :git => 'https://github.com/iij/mruby-io.git'\n  conf.gem :git => 'https://github.com/iij/mruby-mtest.git'\n  conf.gem :git => 'https://github.com/iij/mruby-socket.git'\n  conf.gem :git => 'https://github.com/iij/mruby-pack.git'\nend\n\n# End of your build_config\n############################\n\n\n\n3. \u30d3\u30eb\u30c9\u3059\u308b\n$ rake\nCC    tools/mrbc/mrbc.c -> build/host/tools/mrbc/mrbc.o\nCC    src/array.c -> build/host/src/array.o\n... \u4e2d\u7565 ...\nBuild summary:\n\n================================================\n      Config Name: host\n Output Directory: build/host\n         Binaries: mrbc\n    Included Gems:\n             mruby-bin-mirb - mirb command\n               - Binaries: mirb\n             mruby-bin-mruby - mruby command\n               - Binaries: mruby\n             mruby-print - standard print/puts/p\n             mruby-sprintf - standard Kernel#sprintf method\n             mruby-io\n             mruby-mtest\n             mruby-socket\n             mruby-pack\n================================================\n\n\n4. mruby\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\n\nprinter_status.rb\n# printer_status.rb\n# SNMP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0 (mruby 1.0.0)\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u308f\u305aSNMP\u30d1\u30b1\u30c3\u30c8\u3092\u81ea\u5206\u3067\u4f5c\u3063\u3066\u9001\u4fe1\u3057\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u4fe1\u3059\u308b\u3002\n# sysName,sysUpTime,hrDeviceStatus,hrPrinterStatus\u306e4\u3064\u3092\u53d6\u5f97\u3059\u308b\n# @see http://www.ietf.org/rfc/rfc1759.txt Printer MIB\n# @note \u4f7f\u3044\u65b9 ruby printer_status.rb \u30d7\u30ea\u30f3\u30bf\u306eIP\u30a2\u30c9\u30ec\u30b9\n# @author @saltheads\n# @version 1.0.0\n\n# Hex Dump \u30af\u30e9\u30b9\nclass HexDump\n  # 1\u884c\u30c0\u30f3\u30d7\n  # @param [String] data \u30c0\u30f3\u30d7\u3059\u308b\u5bfe\u8c61\u30c7\u30fc\u30bf\n  # @param [Integer] offset \u5148\u982d\u30a2\u30c9\u30ec\u30b9\n  # @param [Integer] step 1\u884c\u3042\u305f\u308a\u306e\u30c7\u30fc\u30bf\u6570\n    def self.dumpline(data,offset,step)\n      if (data.length > 0) then\n        line = sprintf(\"%08x  \",offset)\n        chars = \"\"\n        data.each_byte{ |c| \n          line << sprintf(\"%02x \",c)\n          chars << ((c >= 0x20 && c <= 0x7e) ? c : '.')\n        }\n        line << \"   \"*(step - data.size + 1)\n        line << chars\n        puts line\n      end\n    end\n  # \u30c7\u30fc\u30bf\u5168\u4f53\u3092\u30c0\u30f3\u30d7\n  # @param [String] fulldata \u30c0\u30f3\u30d7\u3059\u308b\u5bfe\u8c61\u30c7\u30fc\u30bf\n    def self.dump(fulldata)\n      offset = 0\n      step = 16\n      while data = fulldata[offset,step]\n        dumpline(data,offset,step)\n        offset += step\n      end\n    end\nend\n\n# Snmp Client \u30af\u30e9\u30b9\nclass SnmpClient\n  # \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n  # @param [String] host IP\u30a2\u30c9\u30ec\u30b9(\"1.2.3.4\")\n  # @param [Integer] port snmp \u30dd\u30fc\u30c8\u756a\u53f7\u3000\u901a\u5e38161\n  # @return [SnmpClient] \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n  def initialize(host,port=161)\n    @host = host\n    @port = port\n    @debug = true & false\n    printf \"host #{host}\\n\" if @debug\n  end\n  # \u30d1\u30b1\u30c3\u30c8\u30c0\u30f3\u30d7\n  # @param [String] title \u30bf\u30a4\u30c8\u30eb\u6587\u5b57\u5217\n  # @param [String] data \u30c0\u30f3\u30d7\u3059\u308b\u5bfe\u8c61\u30c7\u30fc\u30bf\n  def dump(title,data)\n    if @debug\n      printf \"#{title}\\n\"\n      HexDump.dump(data)\n    end\n  end\n  # UDP\u3067request\u3092\u9001\u4fe1\u3057\u3001\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\n  # @param [String] request \u9001\u4fe1\u30c7\u30fc\u30bf\n  # @return [String] \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\n  def sendReceive(request)\n    us = UDPSocket.open()\n    us.connect(@host,@port)\n    us.send(request, 0)\n    a = IO.select([us], nil, nil, 3)\n    if not a     # Timeout\n      us.close\n      return nil\n    end\n    response = us.recv(2000)\n    us.close\n    response\n  end\n  # sysName \u3092\u53d6\u5f97\u3059\u308b\n  # @return [String] \u53d7\u4fe1\u3057\u305fsysName\n  def sysName\n    request = [\n      0x30, 0x27, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xa0, 0x1a, 0x02,\n      0x02, 0x03, 0xe8, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x0e, 0x30, 0x0c, 0x06, 0x08, 0x2b,\n      0x06, 0x01, 0x02, 0x01, 0x01, 0x05, 0x00, 0x05, 0x00].pack('C*')    \n    dump('send',request)    \n    response = sendReceive(request)\n    return if response == nil\n    dump('recv',response)    \n\n    len = response[40].bytes.to_a[0]\n    len -= 1\n    value = response[41..(41+len)]\n    hexdumpdata(value) if @debug\n    printf(\"sysName [#{value}]\\n\") if @debug\n    return value\n  end\n\n  # sysUpTime \u3092\u53d6\u5f97\u3059\u308b\n  # @return [Integer] \u53d7\u4fe1\u3057\u305fsysUpTime\n  def sysUpTime\n    request = [\n      0x30, 0x27, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xa0, 0x1a, 0x02,\n      0x02, 0x03, 0xe9, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x0e, 0x30, 0x0c, 0x06, 0x08, 0x2b,\n      0x06, 0x01, 0x02, 0x01, 0x01, 0x03, 0x00, 0x05, 0x00].pack('C*')\n    dump('send',request)\n    response = sendReceive(request)\n    return if response == nil\n    dump('recv',response)    \n\n    time = response[41..43]\n    hexdumpdata(time) if @debug\n    t = 0\n    time.each_byte { |c|\n      # printf(\"%x\\n\",c)\n      t = t*256 + c\n    }\n    printf(\"sysUpTime %06x = %d\\n\",t,t) if @debug\n    return t\n  end\n\n  # hrDeviceStatus\u3092\u53d6\u5f97\u3059\u308b\n  # @return [String] \u53d7\u4fe1\u3057\u305fhrDeviceStatus\u306e\u610f\u5473\u3092\u8868\u3059\u6587\u5b57\u5217\n  def hrDeviceStatus\n    request = [\n      0x30, 0x2A, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xa0, 0x1d, 0x02,\n      0x02, 0x03, 0xea, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x11, 0x30, 0x0f, 0x06, 0x0b, 0x2b,\n      0x06, 0x01, 0x02, 0x01, 0x19, 0x03, 0x02, 0x01, 0x05, 0x01, 0x05, 0x00].pack('C*')\n    dump('send',request)    \n    response = sendReceive(request)\n    return if response == nil\n    dump('recv',response)    \n\n    status = response[44]\n    hexdumpdata(status) if @debug\n    val = status.bytes.to_a[0]\n    case val\n    when 1 then s = \"unknown(1)\"\n    when 2 then s = \"running(2)\"\n    when 3 then s = \"warning(3)\"\n    when 4 then s = \"testing(4)\"\n    when 5 then s = \"down(5)\"\n    else s = \"unknown(#{val})\"\n    end\n    return s\n  end\n\n  # hrPrinterStatus\u3092\u53d6\u5f97\u3059\u308b\n  # @return [String] \u53d7\u4fe1\u3057\u305fhrPrinterStatus\u306e\u610f\u5473\u3092\u8868\u3059\u6587\u5b57\u5217\n  def hrPrinterStatus\n    request = [\n      0x30, 0x2A, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xa0, 0x1d, 0x02,\n      0x02, 0x03, 0xeb, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x11, 0x30, 0x0f, 0x06, 0x0b, 0x2b,\n      0x06, 0x01, 0x02, 0x01, 0x19, 0x03, 0x05, 0x01, 0x01, 0x01, 0x05, 0x00].pack('C*')\n    dump('send',request)    \n    response = sendReceive(request)\n    return if response == nil\n    dump('recv',response)    \n\n    status = response[44]\n    hexdumpdata(status) if @debug\n    val = status.bytes.to_a[0]\n    case val\n    when 1 then s = \"other(1)\"\n    when 3 then s = \"idle(3)\"\n    when 4 then s = \"printing(4)\"\n    when 5 then s = \"warmup(5)\"\n    else s = \"unknown(#{val})\"\n    end\n    return s\n  end\nend\n\nif __FILE__ == $0\n  debug = false & true\n  host = \"192.168.1.40\"\n  if ARGV.size >= 1\n    host = ARGV[0]\n  end\n  snmp = SnmpClient.new(host)\n  name = snmp.sysName\n  puts sprintf \"sysName[#{name}]\\n\"\n  60.times { |i|\n    name = snmp.sysName\n    time = snmp.sysUpTime\n    deviceStatus = snmp.hrDeviceStatus\n    printerStatus = snmp.hrPrinterStatus\n    puts sprintf \"sysUpTime[#{time}] deviceStatus[#{deviceStatus}] printerStatus[#{printerStatus}]\\n\"\n    break if debug\n    #sleep 1\n  }\n  #exit\nend\n\n\n\nCRuby\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u306e\u4fee\u6b63\u70b9\n\n4.1 \u30d0\u30a4\u30c8\u5217\u306e\u751f\u6210\u65b9\u6cd5\u306e\u5909\u66f4\n\u5909\u66f4\u524d\n\nmruby-string-utf8 \u3092\u5229\u7528\nInteger#chr \u3067\u610f\u56f3\u305b\u306c\u30c7\u30fc\u30bf\u5316\u3051\u304c\u767a\u751f\n\n\u5909\u66f4\u5f8c\n\nmruby-pack \u3092\u5229\u7528\nArray#pack \u3067\u914d\u5217\u3092\u30d0\u30a4\u30c8\u5217\u306b\u5909\u63db\n\n\n4.2 \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306e\u524a\u9664\n\nsleep \u3068 exit \u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n\n\n4.3 select() \u306e\u547c\u3073\u51fa\u3057\u65b9\u6cd5\u5909\u66f4\n\nmruby \u3067\u306f I/O \u3082\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea(mrbgems)\u306b\u4f9d\u5b58\u3059\u308b\u305f\u3081 IO.select() \u3067\u547c\u3073\u51fa\u3057\u3002\n\n\n5. \u4e0a\u8a18\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\n$ cd bin\n$ ./mruby printer_status.rb\n\n[\\[Ruby\\] \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u63a5\u7d9a\u3055\u308c\u305f\u30d7\u30ea\u30f3\u30bf\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u53d6\u5f97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0](http://saltheads.blog134.fc2.com/blog-entry-146.html) \u3092 mruby \u3067\u52d5\u4f5c\u3059\u308b\u3088\u3046\u79fb\u690d\u3057\u307e\u3057\u305f\u3002\n\n# 1. mruby \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\n\n```$ git clone https://github.com/mruby/mruby.git```\n\n\n# 2. \u30d3\u30eb\u30c9\u8a2d\u5b9a\u3092\u7de8\u96c6\u3059\u308b\n\n\n```rb:build_config.rb\n############################\n# Start of your build_config\n\nMRuby::Build.new do |conf|\n  toolchain :clang # :gcc, :visualcpp\n\n  conf.bins = %w(mrbc)\n\n  # mruby's Core GEMs\n  conf.gem 'mrbgems/mruby-bin-mirb'\n  conf.gem 'mrbgems/mruby-bin-mruby'\n  conf.gem 'mrbgems/mruby-print'\n  conf.gem 'mrbgems/mruby-sprintf'\n\n  # user-defined GEMs\n  conf.gem :git => 'https://github.com/iij/mruby-io.git'\n  conf.gem :git => 'https://github.com/iij/mruby-mtest.git'\n  conf.gem :git => 'https://github.com/iij/mruby-socket.git'\n  conf.gem :git => 'https://github.com/iij/mruby-pack.git'\nend\n\n# End of your build_config\n############################\n```\n\n\n# 3. \u30d3\u30eb\u30c9\u3059\u308b\n\n```\n$ rake\nCC    tools/mrbc/mrbc.c -> build/host/tools/mrbc/mrbc.o\nCC    src/array.c -> build/host/src/array.o\n... \u4e2d\u7565 ...\nBuild summary:\n\n================================================\n      Config Name: host\n Output Directory: build/host\n         Binaries: mrbc\n    Included Gems:\n             mruby-bin-mirb - mirb command\n               - Binaries: mirb\n             mruby-bin-mruby - mruby command\n               - Binaries: mruby\n             mruby-print - standard print/puts/p\n             mruby-sprintf - standard Kernel#sprintf method\n             mruby-io\n             mruby-mtest\n             mruby-socket\n             mruby-pack\n================================================\n```\n\n\n# 4. mruby\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\n\n\n```rb:printer_status.rb\n# printer_status.rb\n# SNMP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0 (mruby 1.0.0)\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u308f\u305aSNMP\u30d1\u30b1\u30c3\u30c8\u3092\u81ea\u5206\u3067\u4f5c\u3063\u3066\u9001\u4fe1\u3057\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u4fe1\u3059\u308b\u3002\n# sysName,sysUpTime,hrDeviceStatus,hrPrinterStatus\u306e4\u3064\u3092\u53d6\u5f97\u3059\u308b\n# @see http://www.ietf.org/rfc/rfc1759.txt Printer MIB\n# @note \u4f7f\u3044\u65b9 ruby printer_status.rb \u30d7\u30ea\u30f3\u30bf\u306eIP\u30a2\u30c9\u30ec\u30b9\n# @author @saltheads\n# @version 1.0.0\n \n# Hex Dump \u30af\u30e9\u30b9\nclass HexDump\n  # 1\u884c\u30c0\u30f3\u30d7\n  # @param [String] data \u30c0\u30f3\u30d7\u3059\u308b\u5bfe\u8c61\u30c7\u30fc\u30bf\n  # @param [Integer] offset \u5148\u982d\u30a2\u30c9\u30ec\u30b9\n  # @param [Integer] step 1\u884c\u3042\u305f\u308a\u306e\u30c7\u30fc\u30bf\u6570\n    def self.dumpline(data,offset,step)\n      if (data.length > 0) then\n        line = sprintf(\"%08x  \",offset)\n        chars = \"\"\n        data.each_byte{ |c| \n          line << sprintf(\"%02x \",c)\n          chars << ((c >= 0x20 && c <= 0x7e) ? c : '.')\n        }\n        line << \"   \"*(step - data.size + 1)\n        line << chars\n        puts line\n      end\n    end\n  # \u30c7\u30fc\u30bf\u5168\u4f53\u3092\u30c0\u30f3\u30d7\n  # @param [String] fulldata \u30c0\u30f3\u30d7\u3059\u308b\u5bfe\u8c61\u30c7\u30fc\u30bf\n    def self.dump(fulldata)\n      offset = 0\n      step = 16\n      while data = fulldata[offset,step]\n        dumpline(data,offset,step)\n        offset += step\n      end\n    end\nend\n \n# Snmp Client \u30af\u30e9\u30b9\nclass SnmpClient\n  # \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n  # @param [String] host IP\u30a2\u30c9\u30ec\u30b9(\"1.2.3.4\")\n  # @param [Integer] port snmp \u30dd\u30fc\u30c8\u756a\u53f7\u3000\u901a\u5e38161\n  # @return [SnmpClient] \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n  def initialize(host,port=161)\n    @host = host\n    @port = port\n    @debug = true & false\n    printf \"host #{host}\\n\" if @debug\n  end\n  # \u30d1\u30b1\u30c3\u30c8\u30c0\u30f3\u30d7\n  # @param [String] title \u30bf\u30a4\u30c8\u30eb\u6587\u5b57\u5217\n  # @param [String] data \u30c0\u30f3\u30d7\u3059\u308b\u5bfe\u8c61\u30c7\u30fc\u30bf\n  def dump(title,data)\n    if @debug\n      printf \"#{title}\\n\"\n      HexDump.dump(data)\n    end\n  end\n  # UDP\u3067request\u3092\u9001\u4fe1\u3057\u3001\u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\n  # @param [String] request \u9001\u4fe1\u30c7\u30fc\u30bf\n  # @return [String] \u53d7\u4fe1\u3057\u305f\u30c7\u30fc\u30bf\n  def sendReceive(request)\n    us = UDPSocket.open()\n    us.connect(@host,@port)\n    us.send(request, 0)\n    a = IO.select([us], nil, nil, 3)\n    if not a     # Timeout\n      us.close\n      return nil\n    end\n    response = us.recv(2000)\n    us.close\n    response\n  end\n  # sysName \u3092\u53d6\u5f97\u3059\u308b\n  # @return [String] \u53d7\u4fe1\u3057\u305fsysName\n  def sysName\n    request = [\n      0x30, 0x27, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xa0, 0x1a, 0x02,\n      0x02, 0x03, 0xe8, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x0e, 0x30, 0x0c, 0x06, 0x08, 0x2b,\n      0x06, 0x01, 0x02, 0x01, 0x01, 0x05, 0x00, 0x05, 0x00].pack('C*')    \n    dump('send',request)    \n    response = sendReceive(request)\n    return if response == nil\n    dump('recv',response)    \n \n    len = response[40].bytes.to_a[0]\n    len -= 1\n    value = response[41..(41+len)]\n    hexdumpdata(value) if @debug\n    printf(\"sysName [#{value}]\\n\") if @debug\n    return value\n  end\n \n  # sysUpTime \u3092\u53d6\u5f97\u3059\u308b\n  # @return [Integer] \u53d7\u4fe1\u3057\u305fsysUpTime\n  def sysUpTime\n    request = [\n      0x30, 0x27, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xa0, 0x1a, 0x02,\n      0x02, 0x03, 0xe9, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x0e, 0x30, 0x0c, 0x06, 0x08, 0x2b,\n      0x06, 0x01, 0x02, 0x01, 0x01, 0x03, 0x00, 0x05, 0x00].pack('C*')\n    dump('send',request)\n    response = sendReceive(request)\n    return if response == nil\n    dump('recv',response)    \n \n    time = response[41..43]\n    hexdumpdata(time) if @debug\n    t = 0\n    time.each_byte { |c|\n      # printf(\"%x\\n\",c)\n      t = t*256 + c\n    }\n    printf(\"sysUpTime %06x = %d\\n\",t,t) if @debug\n    return t\n  end\n \n  # hrDeviceStatus\u3092\u53d6\u5f97\u3059\u308b\n  # @return [String] \u53d7\u4fe1\u3057\u305fhrDeviceStatus\u306e\u610f\u5473\u3092\u8868\u3059\u6587\u5b57\u5217\n  def hrDeviceStatus\n    request = [\n      0x30, 0x2A, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xa0, 0x1d, 0x02,\n      0x02, 0x03, 0xea, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x11, 0x30, 0x0f, 0x06, 0x0b, 0x2b,\n      0x06, 0x01, 0x02, 0x01, 0x19, 0x03, 0x02, 0x01, 0x05, 0x01, 0x05, 0x00].pack('C*')\n    dump('send',request)    \n    response = sendReceive(request)\n    return if response == nil\n    dump('recv',response)    \n \n    status = response[44]\n    hexdumpdata(status) if @debug\n    val = status.bytes.to_a[0]\n    case val\n    when 1 then s = \"unknown(1)\"\n    when 2 then s = \"running(2)\"\n    when 3 then s = \"warning(3)\"\n    when 4 then s = \"testing(4)\"\n    when 5 then s = \"down(5)\"\n    else s = \"unknown(#{val})\"\n    end\n    return s\n  end\n \n  # hrPrinterStatus\u3092\u53d6\u5f97\u3059\u308b\n  # @return [String] \u53d7\u4fe1\u3057\u305fhrPrinterStatus\u306e\u610f\u5473\u3092\u8868\u3059\u6587\u5b57\u5217\n  def hrPrinterStatus\n    request = [\n      0x30, 0x2A, 0x02, 0x01, 0x00, 0x04, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0xa0, 0x1d, 0x02,\n      0x02, 0x03, 0xeb, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x11, 0x30, 0x0f, 0x06, 0x0b, 0x2b,\n      0x06, 0x01, 0x02, 0x01, 0x19, 0x03, 0x05, 0x01, 0x01, 0x01, 0x05, 0x00].pack('C*')\n    dump('send',request)    \n    response = sendReceive(request)\n    return if response == nil\n    dump('recv',response)    \n \n    status = response[44]\n    hexdumpdata(status) if @debug\n    val = status.bytes.to_a[0]\n    case val\n    when 1 then s = \"other(1)\"\n    when 3 then s = \"idle(3)\"\n    when 4 then s = \"printing(4)\"\n    when 5 then s = \"warmup(5)\"\n    else s = \"unknown(#{val})\"\n    end\n    return s\n  end\nend\n \nif __FILE__ == $0\n  debug = false & true\n  host = \"192.168.1.40\"\n  if ARGV.size >= 1\n    host = ARGV[0]\n  end\n  snmp = SnmpClient.new(host)\n  name = snmp.sysName\n  puts sprintf \"sysName[#{name}]\\n\"\n  60.times { |i|\n    name = snmp.sysName\n    time = snmp.sysUpTime\n    deviceStatus = snmp.hrDeviceStatus\n    printerStatus = snmp.hrPrinterStatus\n    puts sprintf \"sysUpTime[#{time}] deviceStatus[#{deviceStatus}] printerStatus[#{printerStatus}]\\n\"\n    break if debug\n    #sleep 1\n  }\n  #exit\nend\n```\n\n## CRuby\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u306e\u4fee\u6b63\u70b9\n\n### 4.1 \u30d0\u30a4\u30c8\u5217\u306e\u751f\u6210\u65b9\u6cd5\u306e\u5909\u66f4\n\n\u5909\u66f4\u524d\n> mruby-string-utf8 \u3092\u5229\u7528\n> Integer#chr \u3067\u610f\u56f3\u305b\u306c\u30c7\u30fc\u30bf\u5316\u3051\u304c\u767a\u751f\n\n\u5909\u66f4\u5f8c\n\n> mruby-pack \u3092\u5229\u7528\n> Array#pack \u3067\u914d\u5217\u3092\u30d0\u30a4\u30c8\u5217\u306b\u5909\u63db\n\n### 4.2 \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306e\u524a\u9664\n\n> sleep \u3068 exit \u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n\n### 4.3 select() \u306e\u547c\u3073\u51fa\u3057\u65b9\u6cd5\u5909\u66f4\n\n> mruby \u3067\u306f I/O \u3082\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea(mrbgems)\u306b\u4f9d\u5b58\u3059\u308b\u305f\u3081 IO.select() \u3067\u547c\u3073\u51fa\u3057\u3002\n\n# 5. \u4e0a\u8a18\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\n\n```\n$ cd bin\n$ ./mruby printer_status.rb\n```\n\n"}