{"context": " More than 1 year has passed since last update.\n\n\u3053\u308c\u306f\u4f55\n\u3053\u308c\u306f Rust of Us - Chapter 3 \u3067\u4f7f\u3046\u8cc7\u6599\u3067\u3059\u3002\n2015/08/30 \u6642\u70b9TRPL \u306e cocurrency \u3092\u30d9\u30fc\u30b9\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u305d\u306e\u307e\u307e\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b\u306e\u306b\u5927\u4e8b\u306a Trait\nRust \u306e Concurrency \u3067\u5927\u4e8b\u306b\u306a\u308b Trait \u304c 2 \u3064\u3042\u308b\u3002\n\nSync\nSend\n\n\nSync\n\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3057\u3066\u3082\u554f\u984c\u7121\u3044\u3053\u3068\u3092\u6559\u3048\u307e\u3059\u3002\nSync \u3092\u5b9f\u88c5\u3057\u305f\u4f8b\u3060\u3068 Arc \u3068\u3044\u3046\u3001\u30a2\u30c8\u30df\u30c3\u30af\u306a\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ab\u30a6\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u3092\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u5b89\u5168\u306b\u5171\u6709\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u578b\u304c\u3042\u308b\u3002\n\nSend\n\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u5b89\u5168\u306b\u30aa\u30fc\u30ca\u30fc\u30b7\u30c3\u30d7\u3092\u53d7\u3051\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u306e\u3084\u308a\u3068\u308a\u3092\u3059\u308b\u3068\u304d\u306b\u3082\u3001\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u4f8b\u3048\u3070\u3001FFI \u306e\u30e9\u30c3\u30d4\u30f3\u30b0\u306e\u3088\u3046\u306a\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306a\u3044\u30c7\u30fc\u30bf\u3092\u306b\u306f\u3001Send \u3092\u5b9f\u88c5\u3059\u3079\u304d\u3067\u306a\u3044\u3002\n\u5b9f\u88c5\u3057\u306a\u3044\u3053\u3068\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u3001\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u79fb\u52d5\u3059\u3079\u304d\u3067\u306a\u3044\u3068\u30a8\u30e9\u30fc\u3092\u3060\u3057\u3066\u304f\u308c\u308b\u3002\n\n\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u52d5\u3059\u308b\nthread:spawn \u3092\u4f7f\u3046\u3068\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002Ruby \u3068\u540c\u3058\u3067\u3001\u6e21\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u304c\u5225\u30b9\u30ec\u30c3\u30c9\u3068\u3057\u3066\u5b9f\u884c\u3055\u308c\u308b\u3002\nuse std::thread;\n\nfn main() {\n    thread::spawn(|| {\n        println!(\"Hello from a thread!\");\n    });\n}\n\nspawn \u306f\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u8fd4\u3057\u3001\u30b9\u30ec\u30c3\u30c9\u3092 join \u3059\u308b\u3053\u3068\u3067\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u5024\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nuse std::thread;\n\nfn main() {\n    let handle = thread::spawn(|| {\n        \"Hello from a thread!\"\n    });\n\n    println!(\"{}\", handle.join().unwrap());\n}\n\n\n\u30b9\u30ec\u30c3\u30c9\u3068\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b\n\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b\u3068\u304d\u3001\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306a\u3044\u30c7\u30fc\u30bf\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\nuse std::thread;\n\nfn main() {\n    let mut data = vec![1, 2, 3];\n\n    for i in 0..3 {\n        thread::spawn(move || {\n            data[i] += 1;\n        });\n    }\n\n    thread::sleep_ms(50);\n}\n\n// \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n//\n// 8:17 error: capture of moved value: `data`\n//        data[i] += 1;\n//        ^~~~\n\n\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b\u306b\u306f\u3001\u524d\u8ff0\u306e 2 \u3064\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u307e\u305a\u3001Sync \u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b Arc \u3092\u4f7f\u3046\u3002Arc \u306f\u3001\u6a19\u6e96\u306e AtomicReferenceCount \u3092\u63d0\u4f9b\u3059\u308b\u578b\u3067\u3001\u8907\u6570\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u9593\u3067\u540c\u3058\u30c7\u30fc\u30bf\u306e\u30aa\u30fc\u30ca\u30fc\u30b7\u30c3\u30d7\u3092\n\u5171\u6709\u3092\u53ef\u80fd\u306b\u3059\u308b\u3002Arc \u306f\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u304f\u308c\u308b\u3002Arc \u306e\u30ab\u30a6\u30f3\u30c8\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u30a2\u30c8\u30df\u30c3\u30af\u306b\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u308c\u308b\u3002\nAtomic \u306a\u305f\u3081\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u3082\u5b89\u5168\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002Arc \u306e\u64cd\u4f5c\u306f\u3001\u30a2\u30c8\u30df\u30c3\u30af\u306b\u306a\u308b\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u51e6\u7406\u3092\u3057\u3066\u304f\u308c\u308b\u3002\nArc::clone() \u3092\u547c\u3073\u3060\u3059\u3068\u5185\u90e8\u30ab\u30a6\u30f3\u30c8\u304c\u5897\u3048\u308b\u3002\nuse std::sync::Arc;\n\nlet mut data = Arc::new(vec![1, 2, 3]);\nlet data = data.clone();\n\n\u305f\u3060\u3057\u3001Arc \u306f\u30e9\u30c3\u30d7\u3059\u308b\u30c7\u30fc\u30bf\u304c Sync \u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u3002\n\u305d\u306e\u305f\u3081\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n:11:24 error: cannot borrow immutable borrowed content as mutable\n:11                    data[i] += 1;\n                             ^~~~\n\n\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u5171\u6709\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306f\u3001\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3067\u3042\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u304c\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u3092\u6271\u3044\u305f\u3044\u3002\n\u3053\u3093\u306a\u3068\u304d\u306f\u3001Mutex \u3092\u4f7f\u3046\u3002Mutext \u3092\u4f7f\u3046\u3068\u3001\u305d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u4e00\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u3060\u3051\u304c\u5024\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\nMutext \u306e\u307f\u3092\u30b9\u30ec\u30c3\u30c9\u3067\u4f7f\u3046\u3068\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001Arc \u3067\u30e9\u30c3\u30d7\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nerror: the trait `core::marker::Send` is not implemented for the type `std::sync::mutex::MutexGuard>` [E0277]\n thread::spawn(move || {\n                  ^~~~~~~~~~~~~\nnote: `std::sync::mutex::MutexGuard>` cannot be sent between threads safely\n thread::spawn(move || {\n                  ^~~~~~~~~~~~~\n\nMutex \u306e\u5024\u3092\u4f7f\u3046\u3068\u304d\u306f\u3001Mutex::lock() \u3092\u4f7f\u3046\u3002lock() \u3092\u4f7f\u3046\u3068 LockResult> \u304c\u8fd4\u3063\u3066\u304f\u308b\n(MutexGuard\u304c Sync \u3092\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001Arc \u7121\u3057\u3067\u30b9\u30ec\u30c3\u30c9\u3067\u4f7f\u3048\u306a\u3044)\u3002\n\u30ed\u30c3\u30af\u3092\u53d6\u5f97\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u304c\u958b\u653e\u3055\u308c\u308b\u307e\u3067\u30ed\u30c3\u30af\u3092\u4fdd\u6301\u3057\u7d9a\u3051\u308b\u3002\n\u3053\u306e\u65b9\u6cd5\u3067\u306f\u3001\u89aa\u30b9\u30ec\u30c3\u30c9\u304c\u5b50\u30b9\u30ec\u30c3\u30c9\u306e\u60c5\u5831\u3092\u5f97\u308b\u306b\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u5c11\u3057\u5f85\u3064\u5fc5\u8981\u304c\u3042\u308b\u3002\nuse std::sync::Mutex;\n\nfn main() {\n    let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n\n    for i in 0..3 {\n        let data = data.clone();\n        thread::spawn(move || {\n            let mut data = data.lock().unwrap();\n            data[i] += 1;\n        });\n    }\n\n    thread::sleep_ms(50);\n}\n\nlock() \u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u30ed\u30c3\u30af\u3092\u7372\u5f97\u3057\u3066\u3044\u308b\u3068 wait \u3057\u3001\u5931\u6557\u3059\u308b\u3068 Result \u304c Error \u3068\u306a\u308b\u306e\u3067\u3001\u305d\u308c\u3067\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3059\u308b\u3002\n\n\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u3068\u308b\n\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u30c7\u30fc\u30bf\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u5225\u306e\u3084\u308a\u578b\u3068\u3057\u3066\u3001channels \u304c\u3042\u308b\u3002\u3053\u306e\u65b9\u6cd5\u3060\u3068\u3001\u5f85\u305f\u306a\u304f\u3066\u3088\u3044\u3002\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::sync::mpsc;\n\nfn main() {\n    let data = Arc::new(Mutex::new(0));\n\n    let (tx, rx) = mpsc::channel();\n\n    for _ in 0..10 {\n        let (data, tx) = (data.clone(), tx.clone());\n\n        thread::spawn(move || {\n            let mut data = data.lock().unwrap();\n            *data += 1;\n\n            tx.send(());\n        });\n    }\n\n    for _ in 0..10 {\n        rx.recv();\n    }\n}\n\nchannel \u306f Send \u3092\u6301\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002channel \u306f\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3068\u30b7\u30b0\u30ca\u30eb\u3082\u9001\u4fe1\u3059\u308b\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001channel \u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u3068\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nuse std::thread;\nuse std::sync::mpsc;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    for _ in 0..10 {\n        let tx = tx.clone();\n\n        thread::spawn(move || {\n            let answer = 42;\n\n            tx.send(answer);\n        });\n    }\n\n   rx.recv().ok().expect(\"Could not receive answer\");\n}\n\n\nPanic!\npanic! \u3092\u4f7f\u3046\u3068\u3001\u5b9f\u884c\u3057\u3066\u3044\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30d1\u30cb\u30c3\u30af\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u306f Result \u3092\u8fd4\u3059\u305f\u3081\u3001\u89aa\u30b9\u30ec\u30c3\u30c9\u306f\u5b50\u30b9\u30ec\u30c3\u30c9\u304c\u30d1\u30cb\u30c3\u30af\u3057\u305f\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nA panic! will crash the currently executing thread. You can use Rust's threads as a simple isolation mechanism:\nuse std::thread;\n\nlet result = thread::spawn(move || {\n    panic!(\"oops!\");\n}).join();\n\nassert!(result.is_err());\n\n\nmove \u30af\u30ed\u30fc\u30b8\u30e3\u3068\u306f\nmove \u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u3046\u3068\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u5185\u306e\u30c7\u30fc\u30bf\u306e\u30aa\u30fc\u30ca\u30fc\u30b7\u30c3\u30d7\u304c\u79fb\u52d5\u3059\u308b\u3002\n## \u3053\u308c\u306f\u4f55\n\n\u3053\u308c\u306f [Rust of Us - Chapter 3](https://rust-of-us.doorkeeper.jp/events/28471) \u3067\u4f7f\u3046\u8cc7\u6599\u3067\u3059\u3002\n2015/08/30 \u6642\u70b9[TRPL \u306e cocurrency](https://doc.rust-lang.org/nightly/book/concurrency.html) \u3092\u30d9\u30fc\u30b9\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3001\u305d\u306e\u307e\u307e\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b\u306e\u306b\u5927\u4e8b\u306a Trait\n\nRust \u306e Concurrency \u3067\u5927\u4e8b\u306b\u306a\u308b Trait \u304c 2 \u3064\u3042\u308b\u3002\n\n- Sync\n- Send\n\n### Sync\n\n\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3057\u3066\u3082\u554f\u984c\u7121\u3044\u3053\u3068\u3092\u6559\u3048\u307e\u3059\u3002\nSync \u3092\u5b9f\u88c5\u3057\u305f\u4f8b\u3060\u3068 Arc<T> \u3068\u3044\u3046\u3001\u30a2\u30c8\u30df\u30c3\u30af\u306a\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30ab\u30a6\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u3092\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u5b89\u5168\u306b\u5171\u6709\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u578b\u304c\u3042\u308b\u3002\n\n### Send\n\n\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u5b89\u5168\u306b\u30aa\u30fc\u30ca\u30fc\u30b7\u30c3\u30d7\u3092\u53d7\u3051\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u306e\u3084\u308a\u3068\u308a\u3092\u3059\u308b\u3068\u304d\u306b\u3082\u3001\u3053\u306e\u30c8\u30ec\u30a4\u30c8\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u4f8b\u3048\u3070\u3001FFI \u306e\u30e9\u30c3\u30d4\u30f3\u30b0\u306e\u3088\u3046\u306a\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306a\u3044\u30c7\u30fc\u30bf\u3092\u306b\u306f\u3001Send \u3092\u5b9f\u88c5\u3059\u3079\u304d\u3067\u306a\u3044\u3002\n\u5b9f\u88c5\u3057\u306a\u3044\u3053\u3068\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u3001\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u79fb\u52d5\u3059\u3079\u304d\u3067\u306a\u3044\u3068\u30a8\u30e9\u30fc\u3092\u3060\u3057\u3066\u304f\u308c\u308b\u3002\n\n## \u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u52d5\u3059\u308b\n\nthread:spawn \u3092\u4f7f\u3046\u3068\u30b9\u30ec\u30c3\u30c9\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002Ruby \u3068\u540c\u3058\u3067\u3001\u6e21\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u304c\u5225\u30b9\u30ec\u30c3\u30c9\u3068\u3057\u3066\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n<pre>\nuse std::thread;\n\nfn main() {\n    thread::spawn(|| {\n        println!(\"Hello from a thread!\");\n    });\n}\n</pre>\n\nspawn \u306f\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u8fd4\u3057\u3001\u30b9\u30ec\u30c3\u30c9\u3092 join \u3059\u308b\u3053\u3068\u3067\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u5024\u3092\u8fd4\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n<pre>\nuse std::thread;\n\nfn main() {\n    let handle = thread::spawn(|| {\n        \"Hello from a thread!\"\n    });\n\n    println!(\"{}\", handle.join().unwrap());\n}\n</pre>\n\n## \u30b9\u30ec\u30c3\u30c9\u3068\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b\n\n\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b\u3068\u304d\u3001\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306a\u3044\u30c7\u30fc\u30bf\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n\n<pre>\nuse std::thread;\n\nfn main() {\n    let mut data = vec![1, 2, 3];\n\n    for i in 0..3 {\n        thread::spawn(move || {\n            data[i] += 1;\n        });\n    }\n\n    thread::sleep_ms(50);\n}\n\n// \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n//\n// 8:17 error: capture of moved value: `data`\n//        data[i] += 1;\n//        ^~~~\n</pre>\n\n\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u30c7\u30fc\u30bf\u3092\u5171\u6709\u3059\u308b\u306b\u306f\u3001\u524d\u8ff0\u306e 2 \u3064\u306e\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u307e\u305a\u3001Sync \u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b Arc<T> \u3092\u4f7f\u3046\u3002Arc<T> \u306f\u3001\u6a19\u6e96\u306e AtomicReferenceCount \u3092\u63d0\u4f9b\u3059\u308b\u578b\u3067\u3001\u8907\u6570\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u9593\u3067\u540c\u3058\u30c7\u30fc\u30bf\u306e\u30aa\u30fc\u30ca\u30fc\u30b7\u30c3\u30d7\u3092\n\u5171\u6709\u3092\u53ef\u80fd\u306b\u3059\u308b\u3002Arc<T> \u306f\u3001\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3066\u304f\u308c\u308b\u3002Arc<T> \u306e\u30ab\u30a6\u30f3\u30c8\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u30a2\u30c8\u30df\u30c3\u30af\u306b\u51e6\u7406\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u308c\u308b\u3002\n\nAtomic \u306a\u305f\u3081\u8907\u6570\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u3082\u5b89\u5168\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3002Arc \u306e\u64cd\u4f5c\u306f\u3001\u30a2\u30c8\u30df\u30c3\u30af\u306b\u306a\u308b\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u51e6\u7406\u3092\u3057\u3066\u304f\u308c\u308b\u3002\nArc::clone() \u3092\u547c\u3073\u3060\u3059\u3068\u5185\u90e8\u30ab\u30a6\u30f3\u30c8\u304c\u5897\u3048\u308b\u3002\n\n<pre>\nuse std::sync::Arc;\n\nlet mut data = Arc::new(vec![1, 2, 3]);\nlet data = data.clone();\n</pre>\n\n\u305f\u3060\u3057\u3001Arc<T> \u306f\u30e9\u30c3\u30d7\u3059\u308b\u30c7\u30fc\u30bf\u304c Sync \u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u308b\u3002\n\u305d\u306e\u305f\u3081\u3001\u3053\u306e\u30b3\u30fc\u30c9\u306f\u30a8\u30e9\u30fc\u3068\u306a\u308b\u3002\n\n<pre>\n<anon>:11:24 error: cannot borrow immutable borrowed content as mutable\n<anon>:11                    data[i] += 1;\n                             ^~~~\n</pre>\n\n\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u5171\u6709\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306f\u3001\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3067\u3042\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u304c\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u3092\u6271\u3044\u305f\u3044\u3002\n\u3053\u3093\u306a\u3068\u304d\u306f\u3001Mutex<T> \u3092\u4f7f\u3046\u3002Mutext<T> \u3092\u4f7f\u3046\u3068\u3001\u305d\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u4e00\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u3060\u3051\u304c\u5024\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\n\nMutext<T> \u306e\u307f\u3092\u30b9\u30ec\u30c3\u30c9\u3067\u4f7f\u3046\u3068\u3001\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001Arc<T> \u3067\u30e9\u30c3\u30d7\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n<pre>\nerror: the trait `core::marker::Send` is not implemented for the type `std::sync::mutex::MutexGuard<'_, collections::vec::Vec<u32>>` [E0277]\n thread::spawn(move || {\n                  ^~~~~~~~~~~~~\nnote: `std::sync::mutex::MutexGuard<'_, collections::vec::Vec<u32>>` cannot be sent between threads safely\n thread::spawn(move || {\n                  ^~~~~~~~~~~~~\n</pre>\n\nMutex<T> \u306e\u5024\u3092\u4f7f\u3046\u3068\u304d\u306f\u3001Mutex::lock() \u3092\u4f7f\u3046\u3002lock() \u3092\u4f7f\u3046\u3068 LockResult<MutexGuard<T>> \u304c\u8fd4\u3063\u3066\u304f\u308b\n(MutexGuard<T>\u304c Sync \u3092\u5b9f\u88c5\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001Arc \u7121\u3057\u3067\u30b9\u30ec\u30c3\u30c9\u3067\u4f7f\u3048\u306a\u3044)\u3002\n\u30ed\u30c3\u30af\u3092\u53d6\u5f97\u3059\u308b\u3068\u3001\u30c7\u30fc\u30bf\u304c\u958b\u653e\u3055\u308c\u308b\u307e\u3067\u30ed\u30c3\u30af\u3092\u4fdd\u6301\u3057\u7d9a\u3051\u308b\u3002\n\u3053\u306e\u65b9\u6cd5\u3067\u306f\u3001\u89aa\u30b9\u30ec\u30c3\u30c9\u304c\u5b50\u30b9\u30ec\u30c3\u30c9\u306e\u60c5\u5831\u3092\u5f97\u308b\u306b\u306f\u3001\u30b9\u30ec\u30c3\u30c9\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u5c11\u3057\u5f85\u3064\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n<pre>\nuse std::sync::Mutex;\n\nfn main() {\n    let data = Arc::new(Mutex::new(vec![1, 2, 3]));\n\n    for i in 0..3 {\n        let data = data.clone();\n        thread::spawn(move || {\n            let mut data = data.lock().unwrap();\n            data[i] += 1;\n        });\n    }\n\n    thread::sleep_ms(50);\n}\n</pre>\n\nlock() \u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u30ed\u30c3\u30af\u3092\u7372\u5f97\u3057\u3066\u3044\u308b\u3068 wait \u3057\u3001\u5931\u6557\u3059\u308b\u3068 Result \u304c Error \u3068\u306a\u308b\u306e\u3067\u3001\u305d\u308c\u3067\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u3059\u308b\u3002\n\n## \u30b9\u30ec\u30c3\u30c9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u3068\u308b\n\n\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u30c7\u30fc\u30bf\u3092\u3084\u308a\u3068\u308a\u3059\u308b\u5225\u306e\u3084\u308a\u578b\u3068\u3057\u3066\u3001channels \u304c\u3042\u308b\u3002\u3053\u306e\u65b9\u6cd5\u3060\u3068\u3001\u5f85\u305f\u306a\u304f\u3066\u3088\u3044\u3002\n\n<pre>\nuse std::sync::{Arc, Mutex};\nuse std::thread;\nuse std::sync::mpsc;\n\nfn main() {\n    let data = Arc::new(Mutex::new(0));\n\n    let (tx, rx) = mpsc::channel();\n\n    for _ in 0..10 {\n        let (data, tx) = (data.clone(), tx.clone());\n\n        thread::spawn(move || {\n            let mut data = data.lock().unwrap();\n            *data += 1;\n\n            tx.send(());\n        });\n    }\n\n    for _ in 0..10 {\n        rx.recv();\n    }\n}\n</pre>\n\nchannel \u306f Send \u3092\u6301\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002channel \u306f\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3068\u30b7\u30b0\u30ca\u30eb\u3082\u9001\u4fe1\u3059\u308b\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001channel \u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u3068\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n<pre>\nuse std::thread;\nuse std::sync::mpsc;\n\nfn main() {\n    let (tx, rx) = mpsc::channel();\n\n    for _ in 0..10 {\n        let tx = tx.clone();\n\n        thread::spawn(move || {\n            let answer = 42;\n\n            tx.send(answer);\n        });\n    }\n\n   rx.recv().ok().expect(\"Could not receive answer\");\n}\n</pre>\n\n## Panic!\n\npanic! \u3092\u4f7f\u3046\u3068\u3001\u5b9f\u884c\u3057\u3066\u3044\u308b\u30b9\u30ec\u30c3\u30c9\u3092\u30af\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u30d1\u30cb\u30c3\u30af\u3057\u305f\u30b9\u30ec\u30c3\u30c9\u306f Result \u3092\u8fd4\u3059\u305f\u3081\u3001\u89aa\u30b9\u30ec\u30c3\u30c9\u306f\u5b50\u30b9\u30ec\u30c3\u30c9\u304c\u30d1\u30cb\u30c3\u30af\u3057\u305f\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nA panic! will crash the currently executing thread. You can use Rust's threads as a simple isolation mechanism:\n\n<pre>\nuse std::thread;\n\nlet result = thread::spawn(move || {\n    panic!(\"oops!\");\n}).join();\n\nassert!(result.is_err());\n</pre>\n\n## move \u30af\u30ed\u30fc\u30b8\u30e3\u3068\u306f\n\nmove \u30af\u30ed\u30fc\u30b8\u30e3\u3092\u4f7f\u3046\u3068\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u5185\u306e\u30c7\u30fc\u30bf\u306e\u30aa\u30fc\u30ca\u30fc\u30b7\u30c3\u30d7\u304c\u79fb\u52d5\u3059\u308b\u3002\n", "tags": ["rust"]}