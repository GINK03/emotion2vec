{"context": "\n\n\u74b0\u5883\n\nRadStudio XE8\nTurboPower Abbrevia 5.2\n\n\n\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\nTAbUnZipper.Items\u306e\u8fd4\u3059TAbZipItem\u306eIsEncrypted \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8abf\u3079\u308b\u3002\nfunction CheckEncryption(const AFileName: string): Boolean;\nvar\n  Zip: TAbUnZipper;\nbegin\n  Zip := TAbUnZipper.Create(Nil);\n  Zip.FileName := AFileName;\n  Zip.TempDirectory := TPath.GetTempPath;\n  Zip.ExtractOptions := [eoCreateDirs, eoRestorePath];\n\n  Result := False;\n  if Zip.Count > 0 then\n  begin\n    if Zip.Items[0].IsEncrypted then\n      Result := True;\n  end;\n  Zip.Free;\nend;\n\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\nTAbUnZipper.Password\u306b\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066TAbUnZipper.TestTaggedItems\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u304f\u7121\u304b\u3063\u305f\u5834\u5408\u306f\u4f8b\u5916\u3068\u3057\u3066EAbZipInvalidPassword\u304c\u6295\u3052\u3089\u308c\u308b\u306e\u3067\u305d\u308c\u3067\u78ba\u8a8d\u3059\u308b\u3002\nfunction CheckPassword(const AFileName, APassword: string): Boolean;\nvar\n  Zip: TAbUnZipper;\n  OutPutPath: String;\nbegin\n  Zip := TAbUnZipper.Create(Nil);\n  Zip.FileName := AFileName;\n  Zip.TempDirectory := TPath.GetTempPath;\n  Zip.ExtractOptions := [eoCreateDirs, eoRestorePath];\n\n  Zip.Password := APassword;\n  Zip.TagItems('*.*');\n  try\n    Zip.TestTaggedItems;\n    Result := True;\n  except\n    on EAbZipInvalidPassword do\n    begin\n      Result := False;\n    end;\n  end;\n  Zip.Free;\nend;\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u304a\u307e\u304b\u305b\nOnNeedPassword \u30a4\u30d9\u30f3\u30c8\u3067\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3059\u308b\u3002\nprocedure TForm1.OnNeedPassword(Sender: TObject; var NewPassword: AnsiString);\nvar\n  Val: String;\nbegin\n  if InputQuery('\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b', '\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044', Val) then\n    NewPassword := Val;\nend;\nprocedure TForm1.ExctractFile(const AFileName: string);\nvar\n  Zip: TAbUnZipper;\n  OutPutPath: String;\n  Pass: String;\nbegin\n  Zip := TAbUnZipper.Create(Nil);\n  Zip.FileName := AFileName;\n  Zip.TempDirectory := TPath.GetTempPath;\n  Zip.ExtractOptions := [eoCreateDirs, eoRestorePath];\n  Zip.BaseDirectory := 'C:\\';\n  Zip.OnNeedPassword := OnNeedPassword;\n  Zip.ExtractFiles('*.*');\n\n  FreeAndNil(Zip);\nend;\n\n# \u74b0\u5883\n- RadStudio XE8\n- TurboPower Abbrevia 5.2\n\n# \u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\nTAbUnZipper.Items\u306e\u8fd4\u3059TAbZipItem\u306eIsEncrypted \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8abf\u3079\u308b\u3002\n\n```delphi\nfunction CheckEncryption(const AFileName: string): Boolean;\nvar\n  Zip: TAbUnZipper;\nbegin\n  Zip := TAbUnZipper.Create(Nil);\n  Zip.FileName := AFileName;\n  Zip.TempDirectory := TPath.GetTempPath;\n  Zip.ExtractOptions := [eoCreateDirs, eoRestorePath];\n\n  Result := False;\n  if Zip.Count > 0 then\n  begin\n    if Zip.Items[0].IsEncrypted then\n      Result := True;\n  end;\n  Zip.Free;\nend;\n```\n\n# \u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\nTAbUnZipper.Password\u306b\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3057\u3066TAbUnZipper.TestTaggedItems\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u304f\u7121\u304b\u3063\u305f\u5834\u5408\u306f\u4f8b\u5916\u3068\u3057\u3066EAbZipInvalidPassword\u304c\u6295\u3052\u3089\u308c\u308b\u306e\u3067\u305d\u308c\u3067\u78ba\u8a8d\u3059\u308b\u3002\n\n```delphi\nfunction CheckPassword(const AFileName, APassword: string): Boolean;\nvar\n  Zip: TAbUnZipper;\n  OutPutPath: String;\nbegin\n  Zip := TAbUnZipper.Create(Nil);\n  Zip.FileName := AFileName;\n  Zip.TempDirectory := TPath.GetTempPath;\n  Zip.ExtractOptions := [eoCreateDirs, eoRestorePath];\n\n  Zip.Password := APassword;\n  Zip.TagItems('*.*');\n  try\n    Zip.TestTaggedItems;\n    Result := True;\n  except\n    on EAbZipInvalidPassword do\n    begin\n      Result := False;\n    end;\n  end;\n  Zip.Free;\nend;\n```\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u304a\u307e\u304b\u305b\nOnNeedPassword \u30a4\u30d9\u30f3\u30c8\u3067\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n```delphi\nprocedure TForm1.OnNeedPassword(Sender: TObject; var NewPassword: AnsiString);\nvar\n  Val: String;\nbegin\n  if InputQuery('\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b', '\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044', Val) then\n    NewPassword := Val;\nend;\nprocedure TForm1.ExctractFile(const AFileName: string);\nvar\n  Zip: TAbUnZipper;\n  OutPutPath: String;\n  Pass: String;\nbegin\n  Zip := TAbUnZipper.Create(Nil);\n  Zip.FileName := AFileName;\n  Zip.TempDirectory := TPath.GetTempPath;\n  Zip.ExtractOptions := [eoCreateDirs, eoRestorePath];\n  Zip.BaseDirectory := 'C:\\';\n  Zip.OnNeedPassword := OnNeedPassword;\n  Zip.ExtractFiles('*.*');\n\n  FreeAndNil(Zip);\nend;\n```\n", "tags": ["Delphi"]}