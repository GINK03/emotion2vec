{"context": "(\u8ee2\u8f09\u305d\u306e\uff12)\n\u524d\u56de\u306f\u57fa\u672c\u7684\u306a\u8ad6\u7406\u30b2\u30fc\u30c8\u3092\u4f5c\u3063\u305f\u3002\u4eca\u56de\u4f5c\u308d\u3046\u3068\u3057\u3066\u3044\u308bCPU (TD4)\u306f\u4ee5\u4e0b\u306e\u672c\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u8ad6\u7406\u56de\u8def\u306e\u672c\u683c\u7684\u306a\u3068\u3053\u308d\u306fROM\u306e\u5b9f\u88c5\u304b\u3089\u3060\u3002\n\u300cCPU\u306e\u5275\u308a\u304b\u305f\u300d(\u6e21\u6ce2 \u90c1 \u8457\u3001\u6bce\u65e5\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u30ba)\nROM\u306e\u5b9f\u88c5\u306b\u304a\u3044\u3066\u306f\u3001\u307e\u305a\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306bdecorder\u304c\u5fc5\u8981\u307f\u305f\u3044\u3060\u3002\u307e\u305f\u5f8c\u306e\u7ae0\u3067\u306f\u3001\u4fe1\u53f7\u3092\u7d71\u5408\u3059\u308b\u306e\u306bmultiplexer\u3092\u7528\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u5c11\u3057\u8907\u96d1\u306a\u8ad6\u7406\u56de\u8def\u3068\u3057\u3066decorder\u3068multiplexer\u3092\u4f5c\u308d\u3046\u3002\n\ndecorder\n\u30ac\u30c3\u30b3\u30a6\u3067\u7fd2\u3063\u305f\u306f\u305a\u3060\u304c\u3001\u3053\u306e\u672c\u3092\u8aad\u3080\u307e\u3067\u3059\u3063\u304b\u308a\u5fd8\u308c\u3066\u3044\u305f\u3002decorder\u306f nnn bit\u306e\u5165\u529b\u306b\u5bfe\u3057\u3001\u305d\u308c\u3092\u6570\u5b57\u3068\u898b\u3066\u6570\u5b57\u306b\u8a72\u5f53\u3059\u308b\u51fa\u529b\u306e\u307fON\u306b\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3060\u3002\u4eca\u56de\u4f5c\u308b\u306e\u306f\u8ca0\u8ad6\u7406\u306a\u306e\u3067\u4e00\u3064\u3060\u3051L\u3001\u6b8b\u308a\u306fH\u306b\u306a\u308b\u3002\u7c21\u5358\u306a 2 bit\u306e\u5834\u5408\u306e\u771f\u7406\u5024\u8868\u306f\u6b21\u306e\u901a\u308a\u3002\n\n\n\nA\nB\nC0\nC1\nC2\nC3\n\n\n\n\nL\nL\nL\nH\nH\nH\n\n\nH\nL\nH\nL\nH\nH\n\n\nL\nH\nH\nH\nL\nH\n\n\nH\nH\nH\nH\nH\nL\n\n\n\n\u3053\u308c\u3092\u8ad6\u7406\u56de\u8def\u306b\u3059\u308b\u3068\u30fb\u30fb\u30fb\u9762\u5012\u304f\u3055\u3044\u306e\u3067\u672c\u3092\u898b\u3066\u6b32\u3057\u3044\u3002\u4e0a\u8a18\u306e\u672c\u306ep.130\u306b\u8a18\u8f09\u3057\u3066\u3042\u308b\u3002\n\u771f\u7406\u5024\u8868\u3092\u305d\u306e\u307e\u307e\u306bhaskell\u306e\u30b3\u30fc\u30c9\u306b\u3057\u3066\u307f\u3088\u3046\u3002\u305d\u306e\u524d\u306b\u3001\u524d\u56de\u8ad6\u7406\u56de\u8def\u306e\u5165\u51fa\u529b\u306e\u65b9\u3092Bool\u306e\u5225\u540d\u3068\u3057\u3066Bin\u3068\u5b9a\u7fa9\u3057\u305f\u3002\u5b9f\u969b\u306e\u5024\u306fTrue\u3068False\u306b\u306a\u308b\u304c\u3001\u5c11\u3057\u9577\u304f\u3066\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067sHI\u3068sLO\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f(state HIGH\u3001state LOW\u306e\u3064\u3082\u308a\uff09\u3002\nsHI :: Bin\nsHI = True\nsLO :: Bin\nsLO = False\n\n-- version 1\n\nlc_decorder2 :: LogicCircuit\nlc_decorder2 (False:False:_) = [sLO, sHI, sHI, sHI]\nlc_decorder2 (True:False:_)  = [sHI, sLO, sHI, sHI]\nlc_decorder2 (False:True:_)  = [sHI, sHI, sLO, sHI]\nlc_decorder2 (True:True:_)   = [sHI, sHI, sHI, sLO]\n\n\u3067\u304d\u305f\u3002\u3068\u3066\u3082\u7c21\u5358\u3060\u3002\u4e0a\u306e\u771f\u7406\u5024\u8868\u3092\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3059\u3060\u3051\u3060\u30fb\u30fb\u30fb\u3002\u3057\u304b\u3057ROM\u3092\u4f5c\u308b\u3068\u304d\u306f 2 bit\u3067\u306f\u306a\u304f 4 bit\u304c\u5fc5\u8981\u3089\u3057\u3044\u3002\u3068\u306a\u308b\u306816\u500b\u306e\u8981\u7d20\u3092\u6301\u3064\u30ea\u30b9\u30c8\u306e\u5b9a\u7fa9\u304c16\u500b\u4e26\u3076\u308f\u3051\u3060\u3002\u90aa\u9b54\u304f\u3055\u304f\u3066\u3001\u304b\u3064\u898b\u306b\u304f\u304f\u306a\u308b\u3060\u308d\u3046\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u771f\u7406\u5024\u8868\u3092\u53c2\u8003\u306b\u3001\u540c\u7b49\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u30b3\u30fc\u30c9\u306b\u3057\u3066\u307f\u3088\u3046\u3002\n\u307e\u305a\u5165\u529b\u306e nnn bit\u3092\u6570\u5b57\u306b\u5909\u63db\u3057\u30012 bit\u306a\u30894\u500b\u30014 bit\u306a\u308916\u500b\u306eBin\u8981\u7d20\u3092\u6301\u3064\u30ea\u30b9\u30c8\u3092\u3001\u5909\u63db\u3057\u305f\u6570\u5b57\u306e\u3068\u3053\u308d\u3060\u3051L\u3001\u305d\u308c\u4ee5\u5916\u306fH\u306b\u306a\u308b\u3088\u3046\u4f5c\u308c\u3070\u3088\u3044\u3060\u308d\u3046\u3002\n\u5165\u529b\u3092\u6570\u5b57\u306b\u76f4\u3059\u95a2\u6570\u306f\u6b21\u306e\u901a\u308a\u3002\u6700\u521d\u306e\u65b9\u3092\u4e0b\u4f4d\u30d3\u30c3\u30c8\u3068\u3057\u3066\u3001\u4e0a\u4f4d\u30d3\u30c3\u30c8\u304b\u30891\u306a\u3089\u8db3\u3057\u5408\u308f\u305b\u3066\u4e8c\u500d\u3059\u308b\u3001\u3092\u7e70\u308a\u8fd4\u3059\u3002\nbin2int :: [Bin] -> Int\nbin2int [] = 0\nbin2int (x:xs) = a + 2 * bin2int xs\n  where\n    a = if x == sHI then 1 else 0\n\n\u3053\u308c\u3067\u5165\u529b\u3092\u6570\u5b57\u306b\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3002\u4eca\u5ea6\u306f\u305d\u306e\u6570\u5b57\u3092iii\u3068\u3059\u308b\u3068\u304d\u306biii\u756a\u76ee\u3060\u3051L\u306b\u306a\u308b\u3088\u3046\u306aBin\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308d\u3046\u3002\ndecorder' :: Int -> LogicCircuit\ndecorder' b xs = map (\\x -> if x == n then sLO else sHI) [0..mx]\n  where\n    mx = 2^b - 1\n    n = bin2int (take b xs)\n\n\u7b2c\u4e00\u5f15\u6570\u306f\u30d3\u30c3\u30c8\u6570\u3001\u305d\u306e\u3042\u3068\u306b\u6570\u5b57\u306e\u3082\u3068\u306b\u306a\u308b\u30d3\u30c3\u30c8\u5217\u3092\u4e0e\u3048\u308b\u3002\u305f\u3068\u3048\u3070\u3001b=2, xs=[sLO, sHI]\u3060\u3068\u30012\u3060\uff08\u5148\u982d\u304c\u4e0b\u4f4d\u30d3\u30c3\u30c8\uff09\u3002\u3042\u3068\u306f0\u304b\u30893\u307e\u3067\u306e\u6570\u306e\u30ea\u30b9\u30c8\u3092\u57fa\u306b\u3001\u5165\u529b\u3055\u308c\u305f\u6570\u3068\u4e00\u81f4\u3059\u308b\u3068\u304d\u306bL\u305d\u308c\u4ee5\u5916\u306fH\u306b\u5909\u63db\u3059\u308c\u3070\u3088\u3044\u3002\u51fa\u529b\u306f[sHI, sHI, sLO, sHI]\u306b\u306a\u308b\u306f\u305a\u3060\u3002\u3053\u308c\u3067\u4efb\u610f\u306e nnn bit\u306edecorder\u304c\u3067\u304d\u305f! 2 bit\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308b\u3060\u308d\u3046\u3002\n-- version 2\n\nlc_decorder2 :: LogicCircuit\nlc_decorder2 = decorder' 2\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3089\u3057\u304f\u306a\u3063\u3066\u304d\u305f\uff01\n\u30fb\u30fb\u30fb\u3044\u3084\u3044\u3084\u3001\u3053\u308c\u306f\u8da3\u65e8\u304c\u9055\u3046\u30fb\u30fb\u30fb\n\u4eca\u56de\u306e\u30cd\u30bf\u306f\u3001\u534a\u7530\u3054\u3066\u7b49\u3092\u4f7f\u3063\u305f\u96fb\u5b50\u5de5\u4f5c\u304c\u3067\u304d\u306a\u3044\u304b\u3089\u3001\u305b\u3081\u3066\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u8ad6\u7406\u56de\u8def\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u3088\u3046\u3068\u3057\u305f\u306e\u3060\u3002\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306b\u306f\u8ad6\u7406\u30b2\u30fc\u30c8\u304c\u3053\u308c\u3063\u307d\u3063\u3061\u3082\u5165\u3063\u3066\u3044\u306a\u3044\u3067\u306f\u306a\u3044\u304b! \u3084\u308a\u76f4\u3057\u3060\u3002\u3002\u3002\n\u5148\u306b2 bit\u306e\u5834\u5408\u306e\u56de\u8def\u56f3\u306f\u672c\u306b\u8f09\u3063\u3066\u3044\u308b\u3002\u3053\u308c\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3057\u3088\u3046\u3002\u524d\u56de\u306e\u8ad6\u7406\u30b2\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u3002\n-- version 3\n\nlc_decorder2 :: LogicCircuit\nlc_decorder2 (a:b:_) = [y0, y1, y2, y3]\n  where\n    [a', b'] = lc_not [a, b]\n    [y0] = lc_nand [a', b']\n    [y1] = lc_nand [a, b']\n    [y2] = lc_nand [a', b]\n    [y3] = lc_nand [a, b]\n\n\u56de\u8def\u56f3\u306e\u307e\u307e\u306a\u306e\u3067\u8aac\u660e\u306f\u4e0d\u8981\u3068\u601d\u3046\u3002\u3053\u308c\u3060\u3051\u3067\u3082\u8ad6\u7406\u56de\u8def\u3092\u4f5c\u3063\u3066\u3044\u308b\u6c17\u306b\u306a\u308b\u306e\u304c\u697d\u3057\u3044\u3068\u3053\u308d\u3060\uff08\u81ea\u5206\u3060\u3051\u304b\u3082\u3057\u308c\u306a\u3044\uff09\u3002\u672c\u5f53\u306b\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u3044\u308b\u306e\u304b\u30c6\u30b9\u30c8\u3057\u3088\u3046\u3002\u5148\u306eversion 2\u3068\u7d50\u679c\u3092\u6bd4\u8f03\u3059\u308b\u306e\u3060\u3002\u540c\u3058\u540d\u524d\u306b\u3067\u304d\u306a\u3044\u306e\u3067\u3001version 2\u306b\u306f\u30c0\u30c3\u30b7\u30e5\u3092\u4ed8\u3051\u305f\u3002\n>>> lc_decorder2 [sLO, sLO] == lc_decorder2' [sLO, sLO]\nTrue\n>>> lc_decorder2 [sHI, sLO] == lc_decorder2' [sHI, sLO]\nTrue\n>>> lc_decorder2 [sLO, sHI] == lc_decorder2' [sLO, sHI]\nTrue\n>>> lc_decorder2 [sHI, sHI] == lc_decorder2' [sHI, sHI]\nTrue\n\n\u3053\u308c\u3092doctest\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\u3061\u3083\u3093\u3068\u30c6\u30b9\u30c8\u304c\u901a\u308b\uff01\u5b09\u3057\u3044\uff01\n\u3055\u3066\u554f\u984c\u306f 4 bit\u3060\u3002\u56de\u8def\u56f3\u304c\u304b\u306a\u308a\u8907\u96d1\u306b\u306a\u308b\u304c\u4ed5\u65b9\u304c\u306a\u3044(\u540c\u3058\u304f\u672c\u306ep.129\u306b\u8f09\u3063\u3066\u3044\u308b\u3002\u305f\u3060\u3057IC\u306e\u4e2d\u8eab\u3068\u3057\u3066\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u4f59\u5206\u306a\u3082\u306e\u3082\u3044\u308d\u3044\u308d\u542b\u307e\u308c\u3066\u3044\u308b)\u3002\u3053\u308c\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3059\u308b\u3002\nlc_decorder4 :: LogicCircuit\nlc_decorder4 (a:b:c:d:_) = [y0, y1, y2 , y3 , y4 , y5 , y6 , y7\n                           ,y8, y9, y10, y11, y12, y13, y14, y15\n                           ]\n  where\n    [a', b', c', d'] = lc_not [a, b, c, d]\n    [a'_b'] = lc_and [a', b']\n    [a_b' ] = lc_and [a , b']\n    [a'_b ] = lc_and [a', b ]\n    [a_b  ] = lc_and [a , b ]\n    [c'_d'] = lc_and [c', d']\n    [c_d' ] = lc_and [c , d']\n    [c'_d ] = lc_and [c', d ]\n    [c_d  ] = lc_and [c , d ]\n    [y0]  = lc_nand [a'_b', c'_d']\n    [y1]  = lc_nand [a_b' , c'_d']\n    [y2]  = lc_nand [a'_b , c'_d']\n    [y3]  = lc_nand [a_b  , c'_d']\n    [y4]  = lc_nand [a'_b', c_d' ]\n    [y5]  = lc_nand [a_b' , c_d' ]\n    [y6]  = lc_nand [a'_b , c_d' ]\n    [y7]  = lc_nand [a_b  , c_d' ]\n    [y8]  = lc_nand [a'_b', c'_d]\n    [y9]  = lc_nand [a_b' , c'_d]\n    [y10] = lc_nand [a'_b , c'_d]\n    [y11] = lc_nand [a_b  , c'_d]\n    [y12] = lc_nand [a'_b', c_d]\n    [y13] = lc_nand [a_b' , c_d]\n    [y14] = lc_nand [a'_b , c_d]\n    [y15] = lc_nand [a_b  , c_d]\n\nlc_decorder4' :: LogicCircuit\nlc_decorder4' = decorder' 4\n\n\u5b9f\u306f\u771f\u7406\u5024\u8868\u3092\u305d\u306e\u307e\u307e\u66f8\u3044\u305f\u65b9\u304c\u77ed\u304f\u3066\u6e08\u3080\u6c17\u3082\u3059\u308b\u306e\u3060\u304c\u3001\u305d\u308c\u306f\u305d\u308c\u3001\u8ad6\u7406\u30b2\u30fc\u30c8\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u4f5c\u308b\u3053\u3068\u306b\u610f\u5473\u304c\u3042\u308b\u306e\u3067\u3002\u306a\u304a\u52d5\u4f5c\u78ba\u8a8d\u306e\u305f\u3081\u3001\u3053\u3061\u3089\u3082decorder'\u3092\u4f7f\u3063\u305fversion\u3092\u7528\u610f\u3057\u305f(lc_decorder4')\u3002\u5e7e\u3064\u304b\u30c6\u30b9\u30c8\u3057\u3066\u307f\u305f\u304c\u3001\u554f\u984c\u306a\u3055\u305d\u3046\u3060\u3002\n>>> lc_decorder4 [sLO, sLO, sLO, sLO] == lc_decorder4' [sLO, sLO, sLO, sLO]\nTrue\n>>> lc_decorder4 [sHI, sLO, sLO, sLO] == lc_decorder4' [sHI, sLO, sLO, sLO]\nTrue\n>>> lc_decorder4 [sHI, sHI, sHI, sHI] == lc_decorder4' [sHI, sHI, sHI, sHI]\nTrue\n\ndecorder\u306e\u51fa\u6765\u4e0a\u304c\u308a\u3060\uff01\n\nmultiplexer\nmultiplexer\u306f\u3001\u8907\u6570\u306e\u5165\u529b\u306e\u4e2d\u304b\u3089\u3069\u308c\u304b\u3092\u9078\u3093\u3067\u51fa\u529b\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3002decorder\u306e\u6642\u3082\u3084\u3063\u305f\u3088\u3046\u306b\u3001\u307e\u305a\u306f\u771f\u7406\u5024\u8868\u3068\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u30b3\u30fc\u30c9\u3092\u8003\u3048\u3066\u307f\u3088\u3046\u3002\n\u5165\u529b\u5024\u306e\u69cb\u9020\u306f\u6b21\u306e\u3068\u304a\u308a\u3068\u3059\u308b\u3002\n\n\u30c1\u30e3\u30f3\u30cd\u30eb\u6307\u5b9a\u306e\u60c5\u5831( nnn bit)\u30022\u30c1\u30e3\u30f3\u30cd\u30eb\u306a\u3089 1 bit\u30014\u30c1\u30e3\u30f3\u30cd\u30eb\u306a\u3089 2 bit\u3002\n\u5165\u529b\u5024\u30022\u30c1\u30e3\u30f3\u30cd\u30eb\u306a\u3089 2 bit\u3002\n\n\u306a\u306e\u3067\u30012\u30c1\u30e3\u30f3\u30cd\u30eb\u306a\u3089[A,C0,C1]\u307f\u305f\u3044\u306b\u306a\u308b\u3002A\u306e\u5024\u306b\u3088\u3063\u3066C0\u304bC1\u304c\u9078\u3070\u308c\u308b\u3002\n\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3060\u308d\u3046\u3002\nmultiplexer' :: Int -> LogicCircuit\nmultiplexer' c xs = [xs'!!n]\n  where\n    b = floor (logBase 2 (fromIntegral c))\n    n = bin2int $ take b xs\n    xs' = drop b xs\n\nlc_multiplexer2ch' :: LogicCircuit\nlc_multiplexer2ch' = multiplexer' 2\n\nlc_multiplexer4ch' :: LogicCircuit\nlc_multiplexer4ch' = multiplexer' 4\n\n\u7b2c\u4e00\u5f15\u6570\u304c\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u3001\u305d\u306e\u5f8c\u306f\u5165\u529b\u5024\uff08\u30ea\u30b9\u30c8\uff09\u3060\u3002\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u304b\u3089\u30c1\u30e3\u30f3\u30cd\u30eb\u6307\u5b9a\u306e\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3059\u305f\u3081logloglog\u3067\u30d3\u30c3\u30c8\u6570\u3092\u5f97\u308b\u3002\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089\u305d\u306e\u5206\u3092\u5207\u308a\u51fa\u3057\u3001\u6b8b\u308a\u306e\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089nnn\u756a\u76ee\u3092\u9078\u629e\u3057\u3066\u8fd4\u3057\u3066\u3044\u308b\u3002\n\u3067\u306f2\u30c1\u30e3\u30f3\u30cd\u30ebmultiplexer\u3092\u8ad6\u7406\u30b2\u30fc\u30c8\u3067\u69cb\u6210\u3057\u3066\u307f\u3088\u3046\u30024\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u56de\u8def\u56f3\u306f\u4f8b\u306b\u3088\u3063\u3066\u672c\u306ep.176\u306b\u3042\u308b\u30022\u30c1\u30e3\u30f3\u30cd\u30eb\u3082\u985e\u63a8\u3059\u308c\u3070\u96e3\u3057\u304f\u306a\u3044\u3060\u308d\u3046\u3002\u30b0\u30b0\u3063\u3066\u3082\u3088\u3044\u3002\u3053\u308c\u307e\u305f\u3001\u56de\u8def\u56f3\u3092\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u3057\u3066\u307f\u308b\u3002\nlc_multiplexer2ch :: LogicCircuit\nlc_multiplexer2ch (a:y0:y1:_) = lc_or (lc_and [a', y0] ++ lc_and [a, y1])\n  where\n    [a'] = lc_not [a]\n\n\u8ad6\u7406\u56de\u8def\u306e\u51fa\u529b\u304cBin\u306e\u30ea\u30b9\u30c8\u306a\u306e\u3067\u591a\u5c11\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u308b\u304c\u3001\u57fa\u672c\u7684\u306b\u306f\u56de\u8def\u56f3\u306e\u3068\u304a\u308a\u7d44\u307f\u5408\u308f\u305b\u3066\u3044\u3051\u3070\u826f\u3044\u3001\u3068\u3044\u3046\u306e\u304c\u30df\u30bd\u3067\u3042\u308b\u3002\u5148\u306e\u30b3\u30fc\u30c9\u3068\u51fa\u529b\u3092\u6bd4\u8f03\u30c6\u30b9\u30c8\u3057\u3066\u307f\u308b\u3002\n>>> lc_multiplexer2ch [sLO, sHI, sLO] == lc_multiplexer2ch' [sLO, sHI, sLO]\nTrue\n>>> lc_multiplexer2ch [sHI, sHI, sLO] == lc_multiplexer2ch' [sHI, sHI, sLO]\nTrue\n>>> lc_multiplexer2ch [sLO, sLO, sHI] == lc_multiplexer2ch' [sLO, sLO, sHI]\nTrue\n>>> lc_multiplexer2ch [sHI, sLO, sHI] == lc_multiplexer2ch' [sHI, sLO, sHI]\nTrue\n\n\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\u5f15\u304d\u7d9a\u304d4\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u9032\u3082\u3046\u3002\u3053\u308c\u3082\u56de\u8def\u56f3\u306e\n\u307e\u307e\u306b\u7d44\u307f\u5408\u308f\u305b\u3066\u3044\u304f\u3002\nlc_multiplexer4ch :: LogicCircuit\nlc_multiplexer4ch (a:b:c0:c1:c2:c3:_) = lc_or (y0 ++ y1 ++ y2 ++ y3)\n  where\n    [a', b'] = lc_not [a, b]\n    y0 = lc_and [c0, a', b']\n    y1 = lc_and [c1, a, b']\n    y2 = lc_and [c2, a', b]\n    y3 = lc_and [c3, a, b]\n\nmultiplexer\u306fdecorder\u306b\u6bd4\u3079\u3066\u56de\u8def\u304c\u7c21\u5358\u306a\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u3066\u3082\u7c21\u5358\u3060\u3002\u3053\u3053\u3067\u306f\u697d\u3059\u308b\u305f\u3081\u306b3\u5165\u529bAND\u3092\u4f7f\u3063\u3066\u3057\u307e\u3063\u305f\u304c\u3001\u307e\u3042\u5e02\u8ca9\u306eIC\u3067\u30823\u5165\u529b\u306f\u3042\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u8a31\u3057\u3066\u3082\u3089\u304a\u3046\u3002\n\uff08\u4eca\u56de\u4f5c\u3063\u305f\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\uff09\n\u203b\u8ffd\u8a18: \u8a18\u4e8b\u4f5c\u6210\u6642\u3068\u306f\u3060\u3044\u3076\u30b3\u30fc\u30c9\u304c\u5909\u308f\u3063\u3066\u3044\u308b\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306fdecorder\u3068multiplexer\u3092\u8ad6\u7406\u30b2\u30fc\u30c8\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f5c\u3063\u3066\u307f\u305f\u3002\u56de\u8def\u56f3\u304c\u308f\u304b\u3063\u3066\u3044\u308c\u3070\u3001\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u305b\u3070\u3044\u3044\u306e\u3067\u30ed\u30b8\u30c3\u30af\u3092\u60a9\u307e\u306a\u304f\u3066\u826f\u3044\u3002\ndecorder\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u6b21\u306fROM\u3092\u5b9f\u88c5\u3059\u308b\u304b\u306a\u3002\n(\u8ee2\u8f09\u305d\u306e\uff12)\n\n\u524d\u56de\u306f\u57fa\u672c\u7684\u306a\u8ad6\u7406\u30b2\u30fc\u30c8\u3092\u4f5c\u3063\u305f\u3002\u4eca\u56de\u4f5c\u308d\u3046\u3068\u3057\u3066\u3044\u308bCPU (TD4)\u306f\u4ee5\u4e0b\u306e\u672c\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u8ad6\u7406\u56de\u8def\u306e\u672c\u683c\u7684\u306a\u3068\u3053\u308d\u306fROM\u306e\u5b9f\u88c5\u304b\u3089\u3060\u3002\n\n  \u300cCPU\u306e\u5275\u308a\u304b\u305f\u300d(\u6e21\u6ce2 \u90c1 \u8457\u3001\u6bce\u65e5\u30b3\u30df\u30e5\u30cb\u30b1\u30fc\u30b7\u30e7\u30f3\u30ba)\n\nROM\u306e\u5b9f\u88c5\u306b\u304a\u3044\u3066\u306f\u3001\u307e\u305a\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306bdecorder\u304c\u5fc5\u8981\u307f\u305f\u3044\u3060\u3002\u307e\u305f\u5f8c\u306e\u7ae0\u3067\u306f\u3001\u4fe1\u53f7\u3092\u7d71\u5408\u3059\u308b\u306e\u306bmultiplexer\u3092\u7528\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u5c11\u3057\u8907\u96d1\u306a\u8ad6\u7406\u56de\u8def\u3068\u3057\u3066decorder\u3068multiplexer\u3092\u4f5c\u308d\u3046\u3002\n\n## decorder\n\n\u30ac\u30c3\u30b3\u30a6\u3067\u7fd2\u3063\u305f\u306f\u305a\u3060\u304c\u3001\u3053\u306e\u672c\u3092\u8aad\u3080\u307e\u3067\u3059\u3063\u304b\u308a\u5fd8\u308c\u3066\u3044\u305f\u3002decorder\u306f $n$ bit\u306e\u5165\u529b\u306b\u5bfe\u3057\u3001\u305d\u308c\u3092\u6570\u5b57\u3068\u898b\u3066\u6570\u5b57\u306b\u8a72\u5f53\u3059\u308b\u51fa\u529b\u306e\u307fON\u306b\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3060\u3002\u4eca\u56de\u4f5c\u308b\u306e\u306f\u8ca0\u8ad6\u7406\u306a\u306e\u3067\u4e00\u3064\u3060\u3051L\u3001\u6b8b\u308a\u306fH\u306b\u306a\u308b\u3002\u7c21\u5358\u306a 2 bit\u306e\u5834\u5408\u306e\u771f\u7406\u5024\u8868\u306f\u6b21\u306e\u901a\u308a\u3002\n\n|A |B |C0|C1|C2|C3|\n|:-:|:-:|:-:|:-:|:-:|:-:|\n|L|L|L |H |H |H |\n|H|L|H |L |H |H |\n|L|H|H |H |L |H |\n|H|H|H |H |H |L |\n\n\u3053\u308c\u3092\u8ad6\u7406\u56de\u8def\u306b\u3059\u308b\u3068\u30fb\u30fb\u30fb\u9762\u5012\u304f\u3055\u3044\u306e\u3067\u672c\u3092\u898b\u3066\u6b32\u3057\u3044\u3002\u4e0a\u8a18\u306e\u672c\u306ep.130\u306b\u8a18\u8f09\u3057\u3066\u3042\u308b\u3002\n\n\u771f\u7406\u5024\u8868\u3092\u305d\u306e\u307e\u307e\u306bhaskell\u306e\u30b3\u30fc\u30c9\u306b\u3057\u3066\u307f\u3088\u3046\u3002\u305d\u306e\u524d\u306b\u3001\u524d\u56de\u8ad6\u7406\u56de\u8def\u306e\u5165\u51fa\u529b\u306e\u65b9\u3092`Bool`\u306e\u5225\u540d\u3068\u3057\u3066`Bin`\u3068\u5b9a\u7fa9\u3057\u305f\u3002\u5b9f\u969b\u306e\u5024\u306f`True`\u3068`False`\u306b\u306a\u308b\u304c\u3001\u5c11\u3057\u9577\u304f\u3066\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067`sHI`\u3068`sLO`\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f(state HIGH\u3001state LOW\u306e\u3064\u3082\u308a\uff09\u3002\n\n```haskell\nsHI :: Bin\nsHI = True\nsLO :: Bin\nsLO = False\n\n-- version 1\n\nlc_decorder2 :: LogicCircuit\nlc_decorder2 (False:False:_) = [sLO, sHI, sHI, sHI]\nlc_decorder2 (True:False:_)  = [sHI, sLO, sHI, sHI]\nlc_decorder2 (False:True:_)  = [sHI, sHI, sLO, sHI]\nlc_decorder2 (True:True:_)   = [sHI, sHI, sHI, sLO]\n```\n\n\u3067\u304d\u305f\u3002\u3068\u3066\u3082\u7c21\u5358\u3060\u3002\u4e0a\u306e\u771f\u7406\u5024\u8868\u3092\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3059\u3060\u3051\u3060\u30fb\u30fb\u30fb\u3002\u3057\u304b\u3057ROM\u3092\u4f5c\u308b\u3068\u304d\u306f 2 bit\u3067\u306f\u306a\u304f 4 bit\u304c\u5fc5\u8981\u3089\u3057\u3044\u3002\u3068\u306a\u308b\u306816\u500b\u306e\u8981\u7d20\u3092\u6301\u3064\u30ea\u30b9\u30c8\u306e\u5b9a\u7fa9\u304c16\u500b\u4e26\u3076\u308f\u3051\u3060\u3002\u90aa\u9b54\u304f\u3055\u304f\u3066\u3001\u304b\u3064\u898b\u306b\u304f\u304f\u306a\u308b\u3060\u308d\u3046\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u771f\u7406\u5024\u8868\u3092\u53c2\u8003\u306b\u3001\u540c\u7b49\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u30b3\u30fc\u30c9\u306b\u3057\u3066\u307f\u3088\u3046\u3002\n\n\u307e\u305a\u5165\u529b\u306e $n$ bit\u3092\u6570\u5b57\u306b\u5909\u63db\u3057\u30012 bit\u306a\u30894\u500b\u30014 bit\u306a\u308916\u500b\u306e`Bin`\u8981\u7d20\u3092\u6301\u3064\u30ea\u30b9\u30c8\u3092\u3001\u5909\u63db\u3057\u305f\u6570\u5b57\u306e\u3068\u3053\u308d\u3060\u3051L\u3001\u305d\u308c\u4ee5\u5916\u306fH\u306b\u306a\u308b\u3088\u3046\u4f5c\u308c\u3070\u3088\u3044\u3060\u308d\u3046\u3002\n\n\u5165\u529b\u3092\u6570\u5b57\u306b\u76f4\u3059\u95a2\u6570\u306f\u6b21\u306e\u901a\u308a\u3002\u6700\u521d\u306e\u65b9\u3092\u4e0b\u4f4d\u30d3\u30c3\u30c8\u3068\u3057\u3066\u3001\u4e0a\u4f4d\u30d3\u30c3\u30c8\u304b\u30891\u306a\u3089\u8db3\u3057\u5408\u308f\u305b\u3066\u4e8c\u500d\u3059\u308b\u3001\u3092\u7e70\u308a\u8fd4\u3059\u3002\n\n\n```haskell\nbin2int :: [Bin] -> Int\nbin2int [] = 0\nbin2int (x:xs) = a + 2 * bin2int xs\n  where\n    a = if x == sHI then 1 else 0\n```\n\n\u3053\u308c\u3067\u5165\u529b\u3092\u6570\u5b57\u306b\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u305f\u3002\u4eca\u5ea6\u306f\u305d\u306e\u6570\u5b57\u3092$i$\u3068\u3059\u308b\u3068\u304d\u306b$i$\u756a\u76ee\u3060\u3051L\u306b\u306a\u308b\u3088\u3046\u306a`Bin`\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u308d\u3046\u3002\n\n```haskell\ndecorder' :: Int -> LogicCircuit\ndecorder' b xs = map (\\x -> if x == n then sLO else sHI) [0..mx]\n  where\n    mx = 2^b - 1\n    n = bin2int (take b xs)\n```\n\n\u7b2c\u4e00\u5f15\u6570\u306f\u30d3\u30c3\u30c8\u6570\u3001\u305d\u306e\u3042\u3068\u306b\u6570\u5b57\u306e\u3082\u3068\u306b\u306a\u308b\u30d3\u30c3\u30c8\u5217\u3092\u4e0e\u3048\u308b\u3002\u305f\u3068\u3048\u3070\u3001`b=2, xs=[sLO, sHI]`\u3060\u3068\u30012\u3060\uff08\u5148\u982d\u304c\u4e0b\u4f4d\u30d3\u30c3\u30c8\uff09\u3002\u3042\u3068\u306f0\u304b\u30893\u307e\u3067\u306e\u6570\u306e\u30ea\u30b9\u30c8\u3092\u57fa\u306b\u3001\u5165\u529b\u3055\u308c\u305f\u6570\u3068\u4e00\u81f4\u3059\u308b\u3068\u304d\u306bL\u305d\u308c\u4ee5\u5916\u306fH\u306b\u5909\u63db\u3059\u308c\u3070\u3088\u3044\u3002\u51fa\u529b\u306f`[sHI, sHI, sLO, sHI]`\u306b\u306a\u308b\u306f\u305a\u3060\u3002\u3053\u308c\u3067\u4efb\u610f\u306e $n$ bit\u306edecorder\u304c\u3067\u304d\u305f! 2 bit\u306e\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308b\u3060\u308d\u3046\u3002\n\n```haskell\n-- version 2\n\nlc_decorder2 :: LogicCircuit\nlc_decorder2 = decorder' 2\n```\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3089\u3057\u304f\u306a\u3063\u3066\u304d\u305f\uff01\n\n\u30fb\u30fb\u30fb\u3044\u3084\u3044\u3084\u3001\u3053\u308c\u306f\u8da3\u65e8\u304c\u9055\u3046\u30fb\u30fb\u30fb\n\n\u4eca\u56de\u306e\u30cd\u30bf\u306f\u3001\u534a\u7530\u3054\u3066\u7b49\u3092\u4f7f\u3063\u305f\u96fb\u5b50\u5de5\u4f5c\u304c\u3067\u304d\u306a\u3044\u304b\u3089\u3001\u305b\u3081\u3066\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u8ad6\u7406\u56de\u8def\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3057\u3088\u3046\u3068\u3057\u305f\u306e\u3060\u3002\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306b\u306f\u8ad6\u7406\u30b2\u30fc\u30c8\u304c\u3053\u308c\u3063\u307d\u3063\u3061\u3082\u5165\u3063\u3066\u3044\u306a\u3044\u3067\u306f\u306a\u3044\u304b! \u3084\u308a\u76f4\u3057\u3060\u3002\u3002\u3002\n\n\u5148\u306b2 bit\u306e\u5834\u5408\u306e\u56de\u8def\u56f3\u306f\u672c\u306b\u8f09\u3063\u3066\u3044\u308b\u3002\u3053\u308c\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3057\u3088\u3046\u3002\u524d\u56de\u306e\u8ad6\u7406\u30b2\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u3002\n\n```haskell\n-- version 3\n\nlc_decorder2 :: LogicCircuit\nlc_decorder2 (a:b:_) = [y0, y1, y2, y3]\n  where\n    [a', b'] = lc_not [a, b]\n    [y0] = lc_nand [a', b']\n    [y1] = lc_nand [a, b']\n    [y2] = lc_nand [a', b]\n    [y3] = lc_nand [a, b]\n```\n\n\u56de\u8def\u56f3\u306e\u307e\u307e\u306a\u306e\u3067\u8aac\u660e\u306f\u4e0d\u8981\u3068\u601d\u3046\u3002\u3053\u308c\u3060\u3051\u3067\u3082\u8ad6\u7406\u56de\u8def\u3092\u4f5c\u3063\u3066\u3044\u308b\u6c17\u306b\u306a\u308b\u306e\u304c\u697d\u3057\u3044\u3068\u3053\u308d\u3060\uff08\u81ea\u5206\u3060\u3051\u304b\u3082\u3057\u308c\u306a\u3044\uff09\u3002\u672c\u5f53\u306b\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u3044\u308b\u306e\u304b\u30c6\u30b9\u30c8\u3057\u3088\u3046\u3002\u5148\u306eversion 2\u3068\u7d50\u679c\u3092\u6bd4\u8f03\u3059\u308b\u306e\u3060\u3002\u540c\u3058\u540d\u524d\u306b\u3067\u304d\u306a\u3044\u306e\u3067\u3001version 2\u306b\u306f\u30c0\u30c3\u30b7\u30e5\u3092\u4ed8\u3051\u305f\u3002\n\n```haskell\n>>> lc_decorder2 [sLO, sLO] == lc_decorder2' [sLO, sLO]\nTrue\n>>> lc_decorder2 [sHI, sLO] == lc_decorder2' [sHI, sLO]\nTrue\n>>> lc_decorder2 [sLO, sHI] == lc_decorder2' [sLO, sHI]\nTrue\n>>> lc_decorder2 [sHI, sHI] == lc_decorder2' [sHI, sHI]\nTrue\n```\n\n\u3053\u308c\u3092doctest\u3067\u5b9f\u884c\u3057\u3066\u307f\u308b\u3068\u3061\u3083\u3093\u3068\u30c6\u30b9\u30c8\u304c\u901a\u308b\uff01\u5b09\u3057\u3044\uff01\n\n\u3055\u3066\u554f\u984c\u306f 4 bit\u3060\u3002\u56de\u8def\u56f3\u304c\u304b\u306a\u308a\u8907\u96d1\u306b\u306a\u308b\u304c\u4ed5\u65b9\u304c\u306a\u3044(\u540c\u3058\u304f\u672c\u306ep.129\u306b\u8f09\u3063\u3066\u3044\u308b\u3002\u305f\u3060\u3057IC\u306e\u4e2d\u8eab\u3068\u3057\u3066\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u4f59\u5206\u306a\u3082\u306e\u3082\u3044\u308d\u3044\u308d\u542b\u307e\u308c\u3066\u3044\u308b)\u3002\u3053\u308c\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3059\u308b\u3002\n\n```haskell\nlc_decorder4 :: LogicCircuit\nlc_decorder4 (a:b:c:d:_) = [y0, y1, y2 , y3 , y4 , y5 , y6 , y7\n                           ,y8, y9, y10, y11, y12, y13, y14, y15\n                           ]\n  where\n    [a', b', c', d'] = lc_not [a, b, c, d]\n    [a'_b'] = lc_and [a', b']\n    [a_b' ] = lc_and [a , b']\n    [a'_b ] = lc_and [a', b ]\n    [a_b  ] = lc_and [a , b ]\n    [c'_d'] = lc_and [c', d']\n    [c_d' ] = lc_and [c , d']\n    [c'_d ] = lc_and [c', d ]\n    [c_d  ] = lc_and [c , d ]\n    [y0]  = lc_nand [a'_b', c'_d']\n    [y1]  = lc_nand [a_b' , c'_d']\n    [y2]  = lc_nand [a'_b , c'_d']\n    [y3]  = lc_nand [a_b  , c'_d']\n    [y4]  = lc_nand [a'_b', c_d' ]\n    [y5]  = lc_nand [a_b' , c_d' ]\n    [y6]  = lc_nand [a'_b , c_d' ]\n    [y7]  = lc_nand [a_b  , c_d' ]\n    [y8]  = lc_nand [a'_b', c'_d]\n    [y9]  = lc_nand [a_b' , c'_d]\n    [y10] = lc_nand [a'_b , c'_d]\n    [y11] = lc_nand [a_b  , c'_d]\n    [y12] = lc_nand [a'_b', c_d]\n    [y13] = lc_nand [a_b' , c_d]\n    [y14] = lc_nand [a'_b , c_d]\n    [y15] = lc_nand [a_b  , c_d]\n\nlc_decorder4' :: LogicCircuit\nlc_decorder4' = decorder' 4\n```\n\n\u5b9f\u306f\u771f\u7406\u5024\u8868\u3092\u305d\u306e\u307e\u307e\u66f8\u3044\u305f\u65b9\u304c\u77ed\u304f\u3066\u6e08\u3080\u6c17\u3082\u3059\u308b\u306e\u3060\u304c\u3001\u305d\u308c\u306f\u305d\u308c\u3001\u8ad6\u7406\u30b2\u30fc\u30c8\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u4f5c\u308b\u3053\u3068\u306b\u610f\u5473\u304c\u3042\u308b\u306e\u3067\u3002\u306a\u304a\u52d5\u4f5c\u78ba\u8a8d\u306e\u305f\u3081\u3001\u3053\u3061\u3089\u3082`decorder'`\u3092\u4f7f\u3063\u305fversion\u3092\u7528\u610f\u3057\u305f(`lc_decorder4'`)\u3002\u5e7e\u3064\u304b\u30c6\u30b9\u30c8\u3057\u3066\u307f\u305f\u304c\u3001\u554f\u984c\u306a\u3055\u305d\u3046\u3060\u3002\n\n```haskell\n>>> lc_decorder4 [sLO, sLO, sLO, sLO] == lc_decorder4' [sLO, sLO, sLO, sLO]\nTrue\n>>> lc_decorder4 [sHI, sLO, sLO, sLO] == lc_decorder4' [sHI, sLO, sLO, sLO]\nTrue\n>>> lc_decorder4 [sHI, sHI, sHI, sHI] == lc_decorder4' [sHI, sHI, sHI, sHI]\nTrue\n```\n\ndecorder\u306e\u51fa\u6765\u4e0a\u304c\u308a\u3060\uff01\n\n## multiplexer\n\nmultiplexer\u306f\u3001\u8907\u6570\u306e\u5165\u529b\u306e\u4e2d\u304b\u3089\u3069\u308c\u304b\u3092\u9078\u3093\u3067\u51fa\u529b\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3002decorder\u306e\u6642\u3082\u3084\u3063\u305f\u3088\u3046\u306b\u3001\u307e\u305a\u306f\u771f\u7406\u5024\u8868\u3068\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u308b\u30b3\u30fc\u30c9\u3092\u8003\u3048\u3066\u307f\u3088\u3046\u3002\n\n\u5165\u529b\u5024\u306e\u69cb\u9020\u306f\u6b21\u306e\u3068\u304a\u308a\u3068\u3059\u308b\u3002\n\n* \u30c1\u30e3\u30f3\u30cd\u30eb\u6307\u5b9a\u306e\u60c5\u5831( $n$ bit)\u30022\u30c1\u30e3\u30f3\u30cd\u30eb\u306a\u3089 1 bit\u30014\u30c1\u30e3\u30f3\u30cd\u30eb\u306a\u3089 2 bit\u3002\n* \u5165\u529b\u5024\u30022\u30c1\u30e3\u30f3\u30cd\u30eb\u306a\u3089 2 bit\u3002\n\n\u306a\u306e\u3067\u30012\u30c1\u30e3\u30f3\u30cd\u30eb\u306a\u3089[A,C0,C1]\u307f\u305f\u3044\u306b\u306a\u308b\u3002A\u306e\u5024\u306b\u3088\u3063\u3066C0\u304bC1\u304c\u9078\u3070\u308c\u308b\u3002\n\u30b3\u30fc\u30c9\u306b\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3060\u308d\u3046\u3002\n\n```haskell\nmultiplexer' :: Int -> LogicCircuit\nmultiplexer' c xs = [xs'!!n]\n  where\n    b = floor (logBase 2 (fromIntegral c))\n    n = bin2int $ take b xs\n    xs' = drop b xs\n\nlc_multiplexer2ch' :: LogicCircuit\nlc_multiplexer2ch' = multiplexer' 2\n\nlc_multiplexer4ch' :: LogicCircuit\nlc_multiplexer4ch' = multiplexer' 4\n```\n\n\u7b2c\u4e00\u5f15\u6570\u304c\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u3001\u305d\u306e\u5f8c\u306f\u5165\u529b\u5024\uff08\u30ea\u30b9\u30c8\uff09\u3060\u3002\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\u304b\u3089\u30c1\u30e3\u30f3\u30cd\u30eb\u6307\u5b9a\u306e\u60c5\u5831\u3092\u53d6\u308a\u51fa\u3059\u305f\u3081$log$\u3067\u30d3\u30c3\u30c8\u6570\u3092\u5f97\u308b\u3002\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089\u305d\u306e\u5206\u3092\u5207\u308a\u51fa\u3057\u3001\u6b8b\u308a\u306e\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089$n$\u756a\u76ee\u3092\u9078\u629e\u3057\u3066\u8fd4\u3057\u3066\u3044\u308b\u3002\n\n\u3067\u306f2\u30c1\u30e3\u30f3\u30cd\u30ebmultiplexer\u3092\u8ad6\u7406\u30b2\u30fc\u30c8\u3067\u69cb\u6210\u3057\u3066\u307f\u3088\u3046\u30024\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u56de\u8def\u56f3\u306f\u4f8b\u306b\u3088\u3063\u3066\u672c\u306ep.176\u306b\u3042\u308b\u30022\u30c1\u30e3\u30f3\u30cd\u30eb\u3082\u985e\u63a8\u3059\u308c\u3070\u96e3\u3057\u304f\u306a\u3044\u3060\u308d\u3046\u3002\u30b0\u30b0\u3063\u3066\u3082\u3088\u3044\u3002\u3053\u308c\u307e\u305f\u3001\u56de\u8def\u56f3\u3092\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u3057\u3066\u307f\u308b\u3002\n\n```haskell\nlc_multiplexer2ch :: LogicCircuit\nlc_multiplexer2ch (a:y0:y1:_) = lc_or (lc_and [a', y0] ++ lc_and [a, y1])\n  where\n    [a'] = lc_not [a]\n```\n\n\u8ad6\u7406\u56de\u8def\u306e\u51fa\u529b\u304c`Bin`\u306e\u30ea\u30b9\u30c8\u306a\u306e\u3067\u591a\u5c11\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u3044\u308b\u304c\u3001\u57fa\u672c\u7684\u306b\u306f\u56de\u8def\u56f3\u306e\u3068\u304a\u308a\u7d44\u307f\u5408\u308f\u305b\u3066\u3044\u3051\u3070\u826f\u3044\u3001\u3068\u3044\u3046\u306e\u304c\u30df\u30bd\u3067\u3042\u308b\u3002\u5148\u306e\u30b3\u30fc\u30c9\u3068\u51fa\u529b\u3092\u6bd4\u8f03\u30c6\u30b9\u30c8\u3057\u3066\u307f\u308b\u3002\n\n```haskell\n>>> lc_multiplexer2ch [sLO, sHI, sLO] == lc_multiplexer2ch' [sLO, sHI, sLO]\nTrue\n>>> lc_multiplexer2ch [sHI, sHI, sLO] == lc_multiplexer2ch' [sHI, sHI, sLO]\nTrue\n>>> lc_multiplexer2ch [sLO, sLO, sHI] == lc_multiplexer2ch' [sLO, sLO, sHI]\nTrue\n>>> lc_multiplexer2ch [sHI, sLO, sHI] == lc_multiplexer2ch' [sHI, sLO, sHI]\nTrue\n```\n\n\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\u3088\u3046\u3060\u3002\u5f15\u304d\u7d9a\u304d4\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u9032\u3082\u3046\u3002\u3053\u308c\u3082\u56de\u8def\u56f3\u306e\n\u307e\u307e\u306b\u7d44\u307f\u5408\u308f\u305b\u3066\u3044\u304f\u3002\n\n```haskell\nlc_multiplexer4ch :: LogicCircuit\nlc_multiplexer4ch (a:b:c0:c1:c2:c3:_) = lc_or (y0 ++ y1 ++ y2 ++ y3)\n  where\n    [a', b'] = lc_not [a, b]\n    y0 = lc_and [c0, a', b']\n    y1 = lc_and [c1, a, b']\n    y2 = lc_and [c2, a', b]\n    y3 = lc_and [c3, a, b]\n```\n\nmultiplexer\u306fdecorder\u306b\u6bd4\u3079\u3066\u56de\u8def\u304c\u7c21\u5358\u306a\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u3066\u3082\u7c21\u5358\u3060\u3002\u3053\u3053\u3067\u306f\u697d\u3059\u308b\u305f\u3081\u306b3\u5165\u529bAND\u3092\u4f7f\u3063\u3066\u3057\u307e\u3063\u305f\u304c\u3001\u307e\u3042\u5e02\u8ca9\u306eIC\u3067\u30823\u5165\u529b\u306f\u3042\u308b\u307f\u305f\u3044\u306a\u306e\u3067\u8a31\u3057\u3066\u3082\u3089\u304a\u3046\u3002\n\n\uff08\u4eca\u56de\u4f5c\u3063\u305f\u30b3\u30fc\u30c9\u306f[\u3053\u3061\u3089](https://github.com/eijian/mkcpu)\uff09\n\n\u203b\u8ffd\u8a18: \u8a18\u4e8b\u4f5c\u6210\u6642\u3068\u306f\u3060\u3044\u3076\u30b3\u30fc\u30c9\u304c\u5909\u308f\u3063\u3066\u3044\u308b\n\n## \u307e\u3068\u3081\n\n\u4eca\u56de\u306fdecorder\u3068multiplexer\u3092\u8ad6\u7406\u30b2\u30fc\u30c8\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f5c\u3063\u3066\u307f\u305f\u3002\u56de\u8def\u56f3\u304c\u308f\u304b\u3063\u3066\u3044\u308c\u3070\u3001\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u30b3\u30fc\u30c9\u306b\u843d\u3068\u305b\u3070\u3044\u3044\u306e\u3067\u30ed\u30b8\u30c3\u30af\u3092\u60a9\u307e\u306a\u304f\u3066\u826f\u3044\u3002\n\ndecorder\u304c\u3067\u304d\u305f\u306e\u3067\u3001\u6b21\u306fROM\u3092\u5b9f\u88c5\u3059\u308b\u304b\u306a\u3002\n", "tags": ["Haskell", "CPU"]}