{"context": "\u7686\u3055\u3093\u3053\u3093\u306b\u3061\u306f\u3002\u30c9\u30ef\u30f3\u30b4\u65b0\u53521\u5e74\u76ee\u306edogwood008\u3068\u7533\u3057\u307e\u3059\u3002\u696d\u52d9\u3067Android\u30a2\u30d7\u30ea\u306e\u4f5c\u6210\u306b\u643a\u308f\u308b\u3053\u3068\u304c\u3042\u308a\u3001\u305d\u306e\u969b\u306bKotlin\u306b\u521d\u3081\u3066\u89e6\u308c\u3001\u305d\u306e\u53ef\u80fd\u6027\u306b\u60f9\u304b\u308c\u3066Kotlin\u3092\u597d\u304d\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u3001\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u65e5\u672c\u8a9e\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002Kotlin\u304c\u3069\u3093\u306a\u3082\u306e\u306a\u306e\u304b\u3001\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\uff08\u3061\u3087\u3063\u3068\u9577\u3044\u306e\u3067\u5206\u3051\u3066\u6295\u7a3f\u3057\u307e\u3059\uff08Kotlin\u306e\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u65e5\u672c\u8a9e\u5316\u3057\u3066\u307f\u305f[\u5f8c\u7de8]\uff09\u3002\u307e\u305f\u7ffb\u8a33\u306b\u7740\u624b\u4e2d\u306e\u30da\u30fc\u30b8\u3082\u3042\u308b\u306e\u3067\u3001\u307e\u3060\u82f1\u8a9e\u306e\u30da\u30fc\u30b8\u3082\u3042\u308a\u307e\u3059\uff09\u3002\n\u65e5\u672c\u8a9e\u7248Kotlin\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n\u57fa\u672c\u7684\u306b\u306f\u4e0a\u8a18\u30da\u30fc\u30b8\u306e\u5185\u5bb9\u3068\u3001\u672c\u30da\u30fc\u30b8\u306e\u5185\u5bb9\u306f\u540c\u3058\u3067\u3059\u3002\u500b\u5225\u306e\u30da\u30fc\u30b8\u3067\u898b\u305f\u3044\u4eba\u7528\u3068\u3001\u4e00\u89a7\u3067\u898b\u305f\u3044\u4eba\u7528\u3067\u3059\u3002\n\u4ed6\u306b\u3082\u3001\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u7b49\u3067Kotlin\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u53c2\u8003\u306b\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n\u4eca\u304b\u3089Kotlin\nAndroid\u958b\u767a\u3092\u53d7\u6ce8\u3057\u305f\u304b\u3089Kotlin\u3092\u30ac\u30c3\u30c4\u30ea\u4f7f\u3063\u3066\u307f\u305f\u3089\u6700\u9ad8\u3060\u3063\u305f\n\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eKotlin \u89e3\u8aac\n\n\u203b2016/12/14\u8ffd\u8a18\n\u6587\u4f53\u3092\u3067\u3059\u307e\u3059\u8abf\u306b\u5909\u66f4\u3057\u3001\u5168\u3066\u306e\u7ffb\u8a33\u3092\u898b\u76f4\u3057\u307e\u3057\u305f\u3002\n\n\n\u57fa\u672c\u7684\u306a\u69cb\u6587\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u5b9a\u7fa9\n\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u8a18\u8ff0\u306f\u3001\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u7f6e\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\npackage my.demo\n\nimport java.util.*\n\n// ...\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u4e00\u81f4\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5185\u306e\u4efb\u610f\u306e\u5834\u6240\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u95a2\u6570\u306e\u5b9a\u7fa9\n2\u3064\u306eInt\u578b\u306e\u5f15\u6570\u3092\u6301\u3061\u3001Int\u578b\u3092\u623b\u308a\u5024\u3068\u3059\u308b\u95a2\u6570\uff1a\nfun sum(a: Int, b: Int): Int {\n  return a + b\n}\n\n\u5f0f\u672c\u4f53\u3068\u63a8\u8ad6\u3055\u308c\u305f\u623b\u308a\u5024\u306e\u578b\u3092\u6301\u3064\u95a2\u6570\uff1a\nfun sum(a: Int, b: Int) = a + b\n\n\u610f\u5473\u306e\u3042\u308b\u5024\u3092\u8fd4\u3055\u306a\u3044\u95a2\u6570\uff1a\nfun printSum(a: Int, b: Int): Unit {\n  print(a + b)\n}\n\nUnit\u578b\u306e\u623b\u308a\u5024\u306f\u7701\u7565\u3067\u304d\u307e\u3059\uff1a\nfun printSum(a: Int, b: Int) {\n  print(a + b)\n}\n\n\u95a2\u6570\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306e\u5b9a\u7fa9\n1\u5ea6\u3060\u3051\u4ee3\u5165\u3067\u304d\u308b\uff08\u8aad\u307f\u53d6\u308a\u5c02\u7528\uff09\u30ed\u30fc\u30ab\u30eb\u5909\u6570\uff1a\nval a: Int = 1\nval b = 1   // `Int`\u578b\u304c\u63a8\u8ad6\u3055\u308c\u308b\nval c: Int  // \u521d\u671f\u5024\u304c\u4e0e\u3048\u3089\u308c\u306a\u3044\u5834\u5408\u3001\u578b\u6307\u5b9a\u304c\u5fc5\u8981\nc = 1       // \u660e\u78ba\u306a\u4ee3\u5165\n\n\u5909\u66f4\u53ef\u80fd (Mutable) \u306a\u5909\u6570\uff1a\nvar x = 5 // `Int`\u578b\u304c\u63a8\u8ad6\u3055\u308c\u308b\nx += 1\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30b3\u30e1\u30f3\u30c8\nJava\u3068JavaScript\u306e\u3088\u3046\u306b\u3001Kotlin\u306f\u884c\u672b\u30b3\u30e1\u30f3\u30c8\u3068\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n// \u3053\u308c\u306f\u884c\u672b\u30b3\u30e1\u30f3\u30c8\u3067\u3059\n\n/* \u3053\u308c\u306f\u8907\u6570\u884c\u306b\u308f\u305f\u308b\n   \u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 */\n\nJava\u3068\u306f\u7570\u306a\u308a\u3001Kotlin\u306e\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u306f\u5165\u308c\u5b50\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30b3\u30e1\u30f3\u30c8\u306e\u69cb\u6587\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001Kotlin\u30b3\u30fc\u30c9\u306e\u6587\u7ae0\u5316\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u6587\u5b57\u5217\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4f7f\u7528\nfun main(args: Array<String>) {\n  if (args.size == 0) return\n\n  print(\"First argument: ${args[0]}\")\n}\n\n\u6587\u5b57\u5217\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u6761\u4ef6\u5f0f\u306e\u4f7f\u7528\nfun max(a: Int, b: Int): Int {\n  if (a > b)\n    return a\n  else\n    return b\n}\n\nif{: .keyword }\u3092\u5f0f\u3068\u3057\u3066\u4f7f\u7528\uff1a\nfun max(a: Int, b: Int) = if (a > b) a else b\n\nif{: .keyword }\u5f0f\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nNULL\u53ef\u80fd\u5024\u3092\u4f7f\u7528\u3057\u305f\u3001null{: .keyword }\u306e\u30c1\u30a7\u30c3\u30af\nnull{: .keyword }\u5024\u3092\u53d6\u308a\u5f97\u308b\u5834\u5408\u3001\u53c2\u7167\u306f\u660e\u793a\u7684\u306bnull\u3068\u3057\u3066\u30de\u30fc\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nstr\u306f\u6574\u6570\u3092\u4fdd\u6301\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306fnull{: .keyword }\u3092\u8fd4\u3057\u307e\u3059\uff1a\nfun parseInt(str: String): Int? {\n  // ...\n}\n\nnull\u53ef\u80fd\u5024\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f7f\u7528\uff1a\nfun main(args: Array<String>) {\n  if (args.size < 2) {\n    print(\"Two integers expected\")\n    return\n  }\n\n  val x = parseInt(args[0])\n  val y = parseInt(args[1])\n\n  // `x`, `y`\u306fnull\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3001`x * y`\u306f\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059\n  if (x != null && y != null) {\n    // x\u3068y\u306f\u3001null\u30c1\u30a7\u30c3\u30af\u306e\u5f8c\u81ea\u52d5\u7684\u306b\u975enull\u8a31\u5bb9\u578b\u3078\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\n    print(x * y)\n  }\n}\n\n\u307e\u305f\u306f\n  // ...\n  if (x == null) {\n    print(\"Wrong number format in '${args[0]}'\")\n    return\n  }\n  if (y == null) {\n    print(\"Wrong number format in '${args[1]}'\")\n    return\n  }\n\n  // x and y are automatically cast to non-nullable after null check\n  print(x * y)\n\nnull\u5b89\u5168\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u578b\u30c1\u30a7\u30c3\u30af\u3068\u81ea\u52d5\u30ad\u30e3\u30b9\u30c8\u306e\u4f7f\u7528\nis{: .keyword }\u6f14\u7b97\u5b50\u306f\u3042\u308b\u5f0f\u304c\u3042\u308b\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\u3002\n\u4e0d\u5909\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u7279\u5b9a\u306e\u578b\u3067\u3042\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u660e\u793a\u7684\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff1a\nfun getStringLength(obj: Any): Int? {\n  if (obj is String) {\n    // `obj` \u306f\u3053\u306e\u30d6\u30e9\u30f3\u30c1\u5185\u3067\u306f\u81ea\u52d5\u7684\u306b`String`\u3078\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\n    return obj.length\n  }\n\n  // `obj` \u306f\u578b\u30c1\u30a7\u30c3\u30af\u304c\u884c\u308f\u308c\u305f\u30d6\u30e9\u30f3\u30c1\u5916\u3067\u306f\u3001\u307e\u3060`Any`\u578b\u3067\u3042\u308b\n  return null\n}\n\n\u307e\u305f\u306f\nfun getStringLength(obj: Any): Int? {\n  if (obj !is String)\n    return null\n\n  // `obj` \u306f\u3053\u306e\u30d6\u30e9\u30f3\u30c1\u5185\u3067\u306f\u81ea\u52d5\u7684\u306b`String`\u3078\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\n  return obj.length\n}\n\n\u3042\u308b\u3044\u306f\nfun getStringLength(obj: Any): Int? {\n  // `obj` \u306f`&&`\u306e\u53f3\u5074\u3067\u306f\u81ea\u52d5\u7684\u306b`String`\u3078\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\n  if (obj is String && obj.length > 0)\n    return obj.length\n\n  return null\n}\n\n\u30af\u30e9\u30b9\u3068\u578b\u306e\u30ad\u30e3\u30b9\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nfor\u30eb\u30fc\u30d7\u306e\u4f7f\u7528\nfun main(args: Array<String>) {\n  for (arg in args)\n    print(arg)\n}\n\n\u307e\u305f\u306f\nfor (i in args.indices)\n  print(args[i])\n\nfor\u30eb\u30fc\u30d7\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nwhile\u30eb\u30fc\u30d7\u306e\u4f7f\u7528\nfun main(args: Array<String>) {\n  var i = 0\n  while (i < args.size)\n    print(args[i++])\n}\n\nwhile\u30eb\u30fc\u30d7\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nwhen\u5f0f\u306e\u4f7f\u7528\nfun cases(obj: Any) {\n  when (obj) {\n    1          -> print(\"One\")\n    \"Hello\"    -> print(\"Greeting\")\n    is Long    -> print(\"Long\")\n    !is String -> print(\"Not a string\")\n    else       -> print(\"Unknown\")\n  }\n}\n\nwhen\u5f0f\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u7bc4\u56f2\u306e\u4f7f\u7528\nin{: .keyword }\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u6570\u304c\u7bc4\u56f2\u5185\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a\nif (x in 1..y-1)\n  print(\"OK\")\n\n\u6570\u304c\u7bc4\u56f2\u5916\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff1a\nif (x !in 0..array.lastIndex)\n  print(\"Out\")\n\n\u7bc4\u56f2\u5185\u3067\u53cd\u5fa9\u51e6\u7406\uff1a\nfor (x in 1..5)\n  print(x)\n\n\u7bc4\u56f2\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f7f\u7528\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u5185\u3067\u53cd\u5fa9\u51e6\u7406\uff1a\nfor (name in names)\n  println(name)\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u542b\u3080\u304b\u3092in{: .keyword }\u6f14\u7b97\u5b50\u3067\u8abf\u3079\u308b\uff1a\nif (text in names) // names.contains(text) \u304c\u547c\u3070\u308c\u308b\n  print(\"Yes\")\n\n\u30d5\u30a3\u30eb\u30bf\u3084\u30de\u30c3\u30d7\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a\nnames\n    .filter { it.startsWith(\"A\") }\n    .sortedBy { it }\n    .map { it.toUpperCase() }\n    .forEach { print(it) }\n\n\u9ad8\u968e\u95a2\u6570\u3068\u30e9\u30e0\u30c0\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30a4\u30c7\u30a3\u30aa\u30e0\nKotlin\u3067\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b\u30a4\u30c7\u30a3\u30aa\u30e0\u3092\u96c6\u3081\u307e\u3057\u305f\u3002\u3082\u3057\u597d\u307f\u306e\u30a4\u30c7\u30a3\u30aa\u30e0\u304c\u3042\u308c\u3070\u3001\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u3066\u8ca2\u732e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nDTO\u306e\u4f5c\u6210\uff08POJO/ POCO\uff09\ndata class Customer(val name: String, val email: String)\n\nCustomer\u30af\u30e9\u30b9\u306f\u6b21\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a\n\n\u5168\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30b2\u30c3\u30bf\u30fc\uff08\u3068var{: .keyword }\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u4f7f\u7528\u3055\u308c\u305f\u3068\u304d\u306f\u30bb\u30c3\u30bf\u30fc\u3082\uff09\nequals()\nhashCode()\ntoString()\ncopy()\n\u3059\u3079\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5bfe\u3057\u3066\u3001component1(), component2(), \u2026, \uff08Data classes\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\n\u95a2\u6570\u306e\u5f15\u6570\u306b\u5bfe\u3059\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n\n\n\u95a2\u6570\u306e\u5f15\u6570\u306b\u5bfe\u3059\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\nfun foo(a: Int = 0, b: String = \"\") { ... }\n\n\n\u30ea\u30b9\u30c8\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\nval positives = list.filter { x -> x > 0 }\n\n\u307e\u305f\u306f\u3001\u3053\u3046\u77ed\u304f\u3082\u66f8\u3051\u307e\u3059\uff1a\nval positives = list.filter { it > 0 }\n\n\n\u6587\u5b57\u5217\u88dc\u5b8c\nprintln(\"Name $name\")\n\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30c1\u30a7\u30c3\u30af\nwhen (x) {\n    is Foo -> ...\n    is Bar -> ...\n    else   -> ...\n}\n\n\nmap\u3084list\u306e\u30da\u30a2\u3092\u66f8\u304d\u4e0b\u3059\nfor ((k, v) in map) {\n    println(\"$k -> $v\")\n}\n\nk, v\u306f\u4f55\u304b\u3089\u3067\u3082\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u7bc4\u56f2\u306e\u4f7f\u7528\nfor (i in 1..100) { ... }\nfor (x in 2..10) { ... }\n\n\n\u8aad\u307f\u53d6\u308a\u5c02\u7528list\nval list = listOf(\"a\", \"b\", \"c\")\n\n\n\u8aad\u307f\u53d6\u308a\u5c02\u7528map\nval map = mapOf(\"a\" to 1, \"b\" to 2, \"c\" to 3)\n\n\nmap\u3078\u306e\u30a2\u30af\u30bb\u30b9\nprintln(map[\"key\"])\nmap[\"key\"] = value\n\n\n\u9045\u5ef6\u8a55\u4fa1\u30d7\u30ed\u30d1\u30c6\u30a3\nval p: String by lazy {\n    // \u6587\u5b57\u5217\u3092\u8a55\u4fa1\n}\n\n\n\u62e1\u5f35\u95a2\u6570\nfun String.spaceToCamelCase() { ... }\n\n\"Convert this to camelcase\".spaceToCamelCase()\n\n\n\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306e\u4f5c\u6210\nobject Resource {\n    val name = \"Name\"\n}\n\n\nif not null\u306e\u7701\u7565\u8a18\u6cd5\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size)\n\n\nif not null and else\u306e\u7701\u7565\u8a18\u6cd5\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size ?: \"empty\")\n\n\nif null\u6587\u306e\u5b9f\u884c\nval data = ...\nval email = data[\"email\"] ?: throw IllegalStateException(\"Email is missing!\")\n\n\nif not null\u6587\u306e\u5b9f\u884c\nval data = ...\n\ndata?.let {\n    ... // null\u3067\u306a\u3051\u308c\u3070\u3053\u306e\u30d6\u30ed\u30c3\u30af\u3092\u5b9f\u884c\u3059\u308b\n}\n\n\nwhen\u6587\u3067return\u3059\u308b\nfun transform(color: String): Int {\n    return when (color) {\n        \"Red\" -> 0\n        \"Green\" -> 1\n        \"Blue\" -> 2\n        else -> throw IllegalArgumentException(\"Invalid color param value\")\n    }\n}\n\n\n'try / catch'\u5f0f\nfun test() {\n    val result = try {\n        count()\n    } catch (e: ArithmeticException) {\n        throw IllegalStateException(e)\n    }\n\n    // result\u3092\u4f7f\u3063\u3066\u4f55\u304b\u3059\u308b\n}\n\n\n'if'\u5f0f\nfun foo(param: Int) {\n    val result = if (param == 1) {\n        \"one\"\n    } else if (param == 2) {\n        \"two\"\n    } else {\n        \"three\"\n    }\n}\n\n\nUnit\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u306e\u30d3\u30eb\u30c0\u30fc\u30b9\u30bf\u30a4\u30eb\u306e\u4f7f\u7528\nfun arrayOfMinusOnes(size: Int): IntArray {\n    return IntArray(size).apply { fill(-1) }\n}\n\n\n\u5358\u4e00\u5f0f\u95a2\u6570\nfun theAnswer() = 42\n\n\u3053\u308c\u306f\u6b21\u3068\u7b49\u4fa1\u3067\u3059\uff1a\nfun theAnswer(): Int {\n    return 42\n}\n\n\u3053\u308c\u306f\u4ed6\u306e\u30a4\u30c7\u30a3\u30aa\u30e0\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u3059\u308b\u3053\u3068\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002\u4f8b\uff09 when{: .keyword }-\u5f0f\uff1a\nfun transform(color: String): Int = when (color) {\n    \"Red\" -> 0\n    \"Green\" -> 1\n    \"Blue\" -> 2\n    else -> throw IllegalArgumentException(\"Invalid color param value\")\n}\n\n\n'with' \u3092\u4f7f\u3063\u3066\u3001\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u8907\u6570\u306e\u95a2\u6570\u3092\u547c\u3076\nclass Turtle {\n    fun penDown()\n    fun penUp()\n    fun turn(degrees: Double)\n    fun forward(pixels: Double)\n}\n\nval myTurtle = Turtle()\nwith(myTurtle) { // 100px\u306e\u56db\u89d2\u5f62\u3092\u63cf\u304f\n    penDown()\n    for(i in 1..4) {\n        forward(100.0)\n        turn(90.0)\n    }\n    penUp()\n}\n\n\nJava 7\u306etry-with-resources\nval stream = Files.newInputStream(Paths.get(\"/some/file.txt\"))\nstream.buffered().reader().use { reader ->\n    println(reader.readText())\n}\n\n\n\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\n\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001Kotlin\u8a00\u8a9e\u306e\u73fe\u5728\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u547d\u540d\u30b9\u30bf\u30a4\u30eb\n\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u5834\u5408\u306fJava \u306e\u30b3\u30fc\u30c9\u898f\u7d04\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\uff1a\n\n\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u306e\u4f7f\u7528\uff08\u305d\u3057\u3066\u547d\u540d\u3067\u306e\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u306e\u4f7f\u7528\u3092\u907f\u3051\u308b\uff09\n\u578b\u306f\u5927\u6587\u5b57\u3067\u59cb\u307e\u308b\n\u30e1\u30bd\u30c3\u30c9\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\n4\u30b9\u30da\u30fc\u30b9\u30a4\u30f3\u30c7\u30f3\u30c8\u306e\u4f7f\u7528\npublic\u95a2\u6570\u306fKotlin Doc\u306b\u767b\u5834\u3059\u308b\u3088\u3046\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n\n\n\u30b3\u30ed\u30f3\n\u30b3\u30ed\u30f3\u304c\u578b\u3068\u7d99\u627f\u5143\u306e\u30bb\u30d1\u30ec\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308b\u969b\u306f\u3001\u4e00\u3064\u524d\u306b\u30b9\u30da\u30fc\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u4e00\u65b9\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u578b\u306e\u30bb\u30d1\u30ec\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3068\u304d\u306b\u306f\u3001\u30b9\u30da\u30fc\u30b9\u306f\u4e0d\u8981\u3067\u3059\u3002\ninterface Foo<out T : Any> : Bar {\n    fun foo(a: Int): T\n}\n\n\n\u30e9\u30e0\u30c0\n\u30e9\u30e0\u30c0\u5f0f\u3067\u306f\u3001\u30b9\u30da\u30fc\u30b9\u304c\u6ce2\u62ec\u5f27\u306e\u5468\u308a\u306b\u5fc5\u8981\u3067\u3059\u3002\u307e\u305f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u672c\u4f53\u3068\u5206\u304b\u3064\u30a2\u30ed\u30fc\uff08->\uff09\u3082\u540c\u69d8\u3067\u3059\u3002 \u53ef\u80fd\u306a\u9650\u308a\u3001\u30e9\u30e0\u30c0\u3092\u62ec\u5f27\u306e\u5916\u306b\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nlist.filter { it > 10 }.map { element -> element * 2 }\n\n\u77ed\u304f\u3066\u30cd\u30b9\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\uff08\u5165\u308c\u5b50\u3067\u306a\u3044\uff09\u30e9\u30e0\u30c0\u5185\u3067\u306f\u3001 \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u660e\u793a\u7684\u306b\u5ba3\u8a00\u3059\u308b\u4ee3\u308f\u308a\u306b it \u898f\u7d04\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30e9\u30e0\u30c0\u3067\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5e38\u306b\u660e\u793a\u7684\u306b\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30e6\u30cb\u30c3\u30c8 (Unit)\n\u95a2\u6570\u304cUnit\u3092\u8fd4\u3059\u5834\u5408\u3001\u623b\u308a\u5024\u306e\u578b\u306f\u7701\u7565\u3055\u308c\u308b\u3079\u304d\u3067\u3059\uff1a\nfun foo() { // \": Unit\" \u304c\u7701\u7565\u3055\u308c\u3066\u3044\u308b\n\n}\n\n\n\u57fa\u672c\u306e\u578b\nKotlin\u3067\u306f\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u3069\u3093\u306a\u5909\u6570\u304b\u3089\u3067\u3082\u547c\u3073\u51fa\u305b\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3001\u5168\u3066\u306e\u3082\u306e\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 \u3044\u304f\u3064\u304b\u306e\u578b\u306f\u5b9f\u88c5\u304c\u6700\u9069\u5316\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u30d3\u30eb\u30c8\u30a4\u30f3\u3067\u3042\u308b\u304c\u3001\u30e6\u30fc\u30b6\u304b\u3089\u898b\u308b\u3068\u666e\u901a\u306e\u30af\u30e9\u30b9\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u6b21\u306e\u578b\u306e\u5927\u90e8\u5206\u3092\u8aac\u660e\u3057\u307e\u3059\uff1a\u6570\u5024\u3001\u6587\u5b57\u3001\u771f\u507d\u5024\uff08boolean\uff09\u3001\u914d\u5217\u3002\n\n\u6570\u5024\nKotlin\u306f\u3001Java\u306b\u8fd1\u3044\u65b9\u6cd5\u3067\u6570\u5b57\u3092\u6271\u3046\u304c\u3001\u5168\u304f\u540c\u3058\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001\u6570\u5024\u306e\u6697\u9ed9\u306e\u62e1\u5927\u5909\u63db\u304c\u5b58\u5728\u305b\u305a\u3001\u30ea\u30c6\u30e9\u30eb\u306f\u3044\u304f\u3064\u304b\u306e\u4e8b\u4f8b\u3067\u306f\u5c11\u3057\u7570\u306a\u308b\u3002\nKotlin\u306f\u6570\u5024\u306e\u8868\u73fe\u7528\u306b\u6b21\u306e\u30d3\u30eb\u30c8\u30a4\u30f3\u306e\u578b\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff08\u3053\u308c\u306fJava\u306b\u8fd1\u3044\uff09\uff1a\n\n\n\n\u578b\n\u30d3\u30c3\u30c8\u5e45\n\n\n\n\nDouble\n64\n\n\nFloat\n32\n\n\nLong\n64\n\n\nInt\n32\n\n\nShort\n16\n\n\nByte\n8\n\n\n\nKotlin\u3067\u306f\u6587\u5b57\u306f\u6570\u5024\u3067\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30ea\u30c6\u30e9\u30eb\u5b9a\u6570\n\u6574\u6570\u5024\u306e\u305f\u3081\u306e\u30ea\u30c6\u30e9\u30eb\u5b9a\u6570\u306f\u3001\u6b21\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u6570\u5024: 123\n\nLong\u578b\u306e\u6570\u3092\u8868\u3059\u306b\u306f\u5927\u6587\u5b57\u306eL\u3067\u30bf\u30b0\u4ed8\u3051\u3059\u308b: 123L\n\n\n\n16\u9032\u6570: 0x0F\n\n2\u9032\u6570: 0b00001011\n\n\n\u6ce8\uff1a8\u9032\u6570\u306e\u30ea\u30c6\u30e9\u30eb\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\nKotlin\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5f93\u6765\u306e\u8868\u8a18\u6cd5\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fdouble\u578b: 123.5, 123.5e10\n\nfloat\u578b\u3092\u8868\u3059\u306b\u306f f or F \u3067\u30bf\u30b0\u4ed8\u3051\u3059\u308b: 123.5f \n\n\n\u8868\u73fe\nJava\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u306f\u3001null\u8a31\u5bb9\u578b\u306a\u6570\u5024\u306e\u53c2\u7167\uff08\u4f8b\uff1aInt?\uff09\u3084\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u304c\u95a2\u4e0e\u3057\u3066\u3044\u308b\u5834\u5408\u3092\u9664\u3044\u3066\u3001JVM\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3068\u3057\u3066\u6570\u5024\u304c\u7269\u7406\u7684\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5f8c\u8005\u306e\u4f8b\u3067\u306f\u756a\u53f7\u304c\u30dc\u30af\u30b7\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u6570\u5024\u306e\u30dc\u30af\u30b7\u30f3\u30b0\u306f\u4e00\u69d8\u6027\u3092\u4fdd\u6301\u3057\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff1a\nval a: Int = 10000\nprint(a === a) // 'true'\u3092\u51fa\u529b\u3059\u308b\nval boxedA: Int? = a\nval anotherBoxedA: Int? = a\nprint(boxedA === anotherBoxedA) // !!! 'false'\u3092\u51fa\u529b\u3059\u308b !!!\n\n\u4e00\u65b9\u3001\u3053\u308c\u306f\u540c\u4e00\u6027\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\uff1a\nval a: Int = 10000\nprint(a == a) // 'true'\u3092\u51fa\u529b\u3059\u308b\nval boxedA: Int? = a\nval anotherBoxedA: Int? = a\nprint(boxedA == anotherBoxedA) // 'true'\u3092\u51fa\u529b\u3059\u308b\n\n\n\u660e\u793a\u7684\u306a\u5909\u63db\n\u7570\u306a\u308b\u8868\u73fe\u3067\u3042\u308b\u304c\u6545\u306b\u3001\u5c0f\u3055\u306a\u578b\u306f\u5927\u304d\u306a\u578b\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u3082\u3057\u4eee\u306b\u305d\u3046\u3067\u3042\u3063\u305f\u306a\u3089\u3070\u3001\u6b21\u306e\u7a2e\u985e\u306e\u60a9\u307f\u3092\u62b1\u3048\u305f\u3067\u3057\u3087\u3046\uff1a\n// \u4eee\u8aac\u306e\u30b3\u30fc\u30c9\u3067\u3042\u308a\u3001\u5b9f\u969b\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u305b\u3093\uff1a\nval a: Int? = 1 // \u30dc\u30af\u30b7\u30f3\u30b0\u3055\u308c\u305fInt\u578b (java.lang.Integer)\nval b: Long? = a // \u6697\u9ed9\u306e\u5909\u63db\u304cLong\u578b (java.lang.Long)\u3078\u306e\u30dc\u30af\u30b7\u30f3\u30b0\u3092\u5f15\u304d\u8d77\u3053\u3057\u307e\u3059\nprint(a == b) // \u4ef0\u5929\uff01\u3053\u308c\u306fLong\u578b\u306eequals()\u30c1\u30a7\u30c3\u30af\u3067\u4ed6\u306e\u90e8\u5206\u304cLong\u578b\u306b\u306a\u308b\u306e\u3068\u540c\u7b49\u306b \"false\" \u3092\u51fa\u529b\u3057\u307e\u3059\n\n\u3064\u307e\u308a\u3001\u540c\u4e00\u6027\u3060\u3051\u3067\u306a\u304f\u4e00\u69d8\u6027\u3067\u3055\u3048\u3082\u5168\u3066\u306e\u5834\u6240\u306b\u304a\u3044\u3066\u9759\u304b\u306b\u5931\u308f\u308c\u305f\u306e\u3067\u3059\u3002\n\u305d\u306e\u7d50\u679c\u3001\u5c0f\u3055\u306a\u578b\u306f\u3001\u6697\u9ed9\u7684\u306b\u5927\u304d\u306a\u578b\u306b\u5909\u63db\u3055\u308c\u308b\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u660e\u793a\u7684\u5909\u63db\u7121\u3057\u3067Byte\u578b\u306e\u5024\u3092Int\u578b\u3078\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\nval b: Byte = 1 // OK, \u30ea\u30c6\u30e9\u30eb\u306f\u9759\u7684\u306b\u30c1\u30a7\u30c3\u30af\u3055\u308c\u3066\u3044\u307e\u3059\nval i: Int = b // ERROR\n\n\u660e\u793a\u7684\u5909\u63db\u306f\u6570\u5b57\u3092\u62e1\u5f35\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nval i: Int = b.toInt() // OK: \u660e\u793a\u7684\u306b\u62e1\u5f35\u3055\u308c\u307e\u3057\u305f\n\n\u5168\u3066\u306e\u6570\u5024\u578b\u306f\u6b21\u306e\u5909\u63db\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\uff1a\n\ntoByte(): Byte\ntoShort(): Short\ntoInt(): Int\ntoLong(): Long\ntoFloat(): Float\ntoDouble(): Double\ntoChar(): Char\n\n\u660e\u793a\u7684\u5909\u63db\u304c\u306a\u3044\u3053\u3068\u306f\u6ec5\u591a\u306b\u76ee\u7acb\u3061\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u305d\u306e\u578b\u306f\u6587\u8108\u304b\u3089\u63a8\u6e2c\u3055\u308c\u3001\u7b97\u8853\u6f14\u7b97\u304c\u30aa\u30fc\u30d0\u30ed\u30fc\u30c9\u3055\u308c\u9069\u5207\u306b\u5909\u63db\u3055\u308c\u308b\u304b\u3089\u3067\u3059\u3002\u4f8b\u3048\u3070\uff1a\nval l = 1L + 3 // Long + Int => Long\n\n\n\u6f14\u7b97\nKotlin\u306f\u7b97\u8853\u8a08\u7b97\u306e\u6a19\u6e96\u30bb\u30c3\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306f\u9069\u5207\u306a\u30af\u30e9\u30b9\uff08\u305f\u3060\u3057\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u5bfe\u5fdc\u3059\u308b\u547d\u4ee4\u306e\u547c\u3073\u51fa\u3057\u3092\u6700\u9069\u5316\u3059\u308b\uff09\u306e\u30e1\u30f3\u30d0\u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30d3\u30c3\u30c8\u6f14\u7b97\u306b\u306f\u305d\u306e\u3088\u3046\u306a\u7279\u6b8a\u306a\u6587\u5b57\u5217\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u4e2d\u7f6e\u5f62\u3067\u547c\u3073\u51fa\u305b\u308b\u540d\u524d\u4ed8\u304d\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a\nval x = (1 shl 2) and 0x000FF000\n\n\u3053\u308c\u3089\u306f\u30d3\u30c3\u30c8\u5358\u4f4d\u306e\u64cd\u4f5c\u3092\u884c\u3046\u5168\u30ea\u30b9\u30c8\u3067\u3059\uff08Int\u3068Long\u306e\u307f\u5229\u7528\u53ef\u80fd\uff09\uff1a\n\n\nshl(bits) \u2013 \u7b26\u53f7\u4ed8\u304d\u5de6\u30b7\u30d5\u30c8 (Java\u306e <<)\n\nshr(bits) \u2013 \u7b26\u53f7\u4ed8\u304d\u53f3\u30b7\u30d5\u30c8 (Java\u306e >>)\n\nushr(bits) \u2013 \u7b26\u53f7\u7121\u3057\u53f3\u30b7\u30d5\u30c8 (Java\u306e >>>)\n\nand(bits) \u2013 \u30d3\u30c3\u30c8\u6f14\u7b97\u306eand\n\nor(bits) \u2013 \u30d3\u30c3\u30c8\u6f14\u7b97\u306eor\n\nxor(bits) \u2013 \u30d3\u30c3\u30c8\u6f14\u7b97\u306exor\n\ninv() \u2013 \u30d3\u30c3\u30c8\u6f14\u7b97\u306e\u53cd\u8ee2\n\n\n\u6587\u5b57\n\u6587\u5b57\u306f\u3001Char\u578b\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u6570\u5b57\u3068\u3057\u3066\u76f4\u63a5\u6271\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\nfun check(c: Char) {\n  if (c == 1) { // ERROR: \u975e\u4e92\u63db\u306e\u578b\n    // ...\n  }\n}\n\n[translation here]\n\u6587\u5b57\u30ea\u30c6\u30e9\u30eb\u3092\u8868\u73fe\u3059\u308b\u306b\u306f\u3001\u30b7\u30f3\u30b0\u30eb\u30af\u30a9\u30fc\u30c8\u3067\u56f2\u307f\u307e\u3059\uff1a '1'\n\u7279\u6b8a\u6587\u5b57\u306f\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u3092\u4f7f\u3063\u3066\u30a8\u30b9\u30b1\u30fc\u30d7\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\uff1a\\t, \\b, \\n, \\r, \\', \\\", \\\\, \\$\n\u4ed6\u306e\u6587\u5b57\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001Unicode\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u69cb\u6587\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a'\\uFF00'\n\u660e\u793a\u7684\u306b\u6587\u5b57\u3092Int\u578b\u306e\u6570\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nfun decimalDigitValue(c: Char): Int {\n  if (c !in '0'..'9')\n    throw IllegalArgumentException(\"Out of range\")\n  return c.toInt() - '0'.toInt() // \u6697\u9ed9\u7684\u306a\u6570\u5024\u3078\u306e\u5909\u63db\n}\n\n\u6570\u5024\u306e\u3088\u3046\u306b\u3001\u6587\u5b57\u306fnull\u8a31\u5bb9\u53c2\u7167\u304c\u5fc5\u8981\u306a\u3068\u304d\u306b\u30dc\u30af\u30b7\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002\u540c\u4e00\u6027\u306f\u306f\u30dc\u30af\u30b7\u30f3\u30b0\u64cd\u4f5c\u3055\u308c\u308b\u3068\u4fdd\u6301\u3055\u308c\u307e\u305b\u3093 \u3002\n\n\u771f\u507d\u5024 (Boolean)\n[translation here]\nBoolean\u578b\u306f\u771f\u507d\u5024\u3092\u8868\u3057\u3001true{: .keyword }\u3068false{: .keyword }\u306e2\u3064\u306e\u5024\u304c\u3042\u308a\u307e\u3059\u3002\nBoolean\u306fnull\u8a31\u5bb9\u53c2\u7167\u304c\u5fc5\u8981\u306a\u3068\u304d\u306b\u30dc\u30af\u30b7\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002\nBoolean\u306e\u30d3\u30eb\u30c8\u30a4\u30f3\u6f14\u7b97\u306f\u6b21\u3092\u542b\u307f\u307e\u3059\uff1a\n\n\n|| \u2013 \u9045\u5ef6\u8a55\u4fa1\u8ad6\u7406\u548c\n\n&& \u2013 \u9045\u5ef6\u8a55\u4fa1\u8ad6\u7406\u7a4d\n\n! - \u5426\u5b9a\n\n\n\u914d\u5217\nKotlin\u3067\u306e\u914d\u5217\u306f Array \u30af\u30e9\u30b9\u3067\u8868\u3055\u308c\u3001get\u3068set1\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\uff08[]\u306e\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3057\u3066\u3044\u308b\uff09\u3002\u307e\u305f\u3001size`\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3044\u304f\u3064\u304b\u306e\u6709\u7528\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u5171\u306b\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff1a\nclass Array<T> private constructor() {\n  val size: Int\n  fun get(index: Int): T\n  fun set(index: Int, value: T): Unit\n\n  fun iterator(): Iterator<T>\n  // ...\n}\n\n\u914d\u5217\u3092\u4f5c\u308b\u306b\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u306earrayOf()\u306b\u30a2\u30a4\u30c6\u30e0\u306e\u5024\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3064\u307e\u308a\u3001arrayOf(1, 2, 3)\u306f[1, 2, 3]\u306e\u914d\u5217\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3042\u308b\u3044\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u306earrayOfNulls()\u3067\u3001null\u8981\u7d20\u3067\u57cb\u3081\u3089\u308c\u305f\u6307\u5b9a\u30b5\u30a4\u30ba\u306e\u914d\u5217\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ed6\u306e\u3084\u308a\u65b9\u3068\u3057\u3066\u3001\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3068\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u3092\u4e0e\u3048\u308b\u3068\u5404\u8981\u7d20\u306e\u521d\u671f\u5024\u7528\u306b\u5024\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5f15\u6570\u306b\u3068\u308b\u30d5\u30a1\u30af\u30c8\u30ea\u95a2\u6570\u306e\u4f7f\u7528\u304c\u3042\u308a\u307e\u3059\u3002\n// Array<String>\u3092[\"0\", \"1\", \"4\", \"9\", \"16\"]\u306e\u5024\u3067\u4f5c\u6210\u3057\u307e\u3059\nval asc = Array(5, { i -> (i * i).toString() })\n\n\u524d\u8ff0\u3057\u305f\u3068\u304a\u308a\u3001[]\u6f14\u7b97\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u306eget()\u3068set()\u306e\u547c\u3073\u51fa\u3057\u3092\u8868\u3057\u307e\u3059\u3002\n\u6ce8\uff1aJava\u3068\u306f\u7570\u306a\u308a\u3001Kotlin\u306e\u914d\u5217\u306f\u4e0d\u5909\u3067\u3059\u3002\u3064\u307e\u308aKotlin\u3067\u306fArray<Any>\u3078Array<String>\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u3067\u3059\uff08\u3057\u304b\u3057\u3001Array<out Any>\u3092\u4f7f\u3048\u3070\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002\u578b\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\nKotlin\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\uff08ByteArray\u3001ShortArray\u3001IntArray\u7b49\uff09\u306e\u914d\u5217\u306b\u3064\u3044\u3066\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u7121\u3057\u3067\u30dc\u30af\u30b7\u30f3\u30b0\u304c\u3067\u304d\u308b\u7279\u5225\u306a\u30af\u30e9\u30b9\u3092\u6301\u3061\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u306fArray\u30af\u30e9\u30b9\u3068\u7d99\u627f\u95a2\u4fc2\u3092\u6301\u3061\u307e\u305b\u3093\u304c\u3001\u540c\u3058\u30e1\u30bd\u30c3\u30c9\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3061\u307e\u3059\u3002 \u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306b\u304a\u3044\u3066\u3001\u5bfe\u5fdc\u3059\u308b\u30d5\u30a1\u30af\u30c8\u30ea\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\uff1a\nval x: IntArray = intArrayOf(1, 2, 3)\nx[0] = x[1] + x[2]\n\n\n\u6587\u5b57\u5217\n\u6587\u5b57\u5217\u306f\u3001String\u578b\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u6587\u5b57\u5217\u306f\u4e0d\u5909\uff08\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff09\u3067\u3059\u3002\n\u6587\u5b57\u5217\u306e\u8981\u7d20\u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6f14\u7b97\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\uff1as[i]\n\u6587\u5b57\u5217\u306f for{: .keyword }\u30eb\u30fc\u30d7\u3067\u30a4\u30c6\u30ec\u30fc\u30c8\uff08\u7e70\u308a\u8fd4\u3057\u64cd\u4f5c\uff09\u3067\u304d\u307e\u3059\uff1a\nfor (c in str) {\n  println(c)\n}\n\n\n\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\nKotlin\u306f2\u3064\u306e\u7a2e\u985e\u306e\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3092\u6301\u3061\u307e\u3059\uff1a1\u3064\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u6301\u3061\u3046\u308b\u30a8\u30b9\u30b1\u30fc\u30d7\u6e08\u307f\u6587\u5b57\u5217\u3067\u3001\u3082\u30461\u3064\u306f\u6539\u884c\u3068\u4efb\u610f\u306e\u6587\u5b57\u3092\u542b\u3080\u751f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u6e08\u307f\u6587\u5b57\u5217\u306fJava\u306e\u6587\u5b57\u5217\u306b\u975e\u5e38\u306b\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\uff1a\nval s = \"Hello, world!\\n\"\n\n\u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u3001\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u3092\u7528\u3044\u3066\u5f93\u6765\u306e\u65b9\u6cd5\u3067\u884c\u308f\u308c\u307e\u3059\u3002\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\u306f\u3001\u6587\u5b57\u5217\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u751f\u6587\u5b57\u5217\u306f\u4e09\u9023\u30af\u30aa\u30fc\u30c8 (\"\"\") \u3067\u533a\u5207\u3089\u308c\u307e\u3059\u3002\u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u542b\u307e\u308c\u3066\u304a\u3089\u305a\u3001\u6539\u884c\u3084\u4ed6\u306e\u6587\u5b57\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nval text = \"\"\"\n  for (c in \"foo\")\n    print(c)\n\"\"\"\n\n\u5148\u982d\u306e\u7a7a\u767d\u3092trimMargin()\u95a2\u6570\u3067\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nval text = \"\"\"\n    |Tell me and I forget. \n    |Teach me and I remember. \n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    \"\"\".trimMargin()\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f|\u306f\u30de\u30fc\u30b8\u30f3\u306e\u63a5\u982d\u8f9e\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u304c\u3001trimMargin(\">\")\u306e\u3088\u3046\u306b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u5225\u306e\u6587\u5b57\u3092\u6e21\u3059\u3068\u305d\u308c\u3092\u63a5\u982d\u8f9e\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u6587\u5b57\u5217\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u6587\u5b57\u5217\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f0f\u3001\u3059\u306a\u308f\u3061\u3001\u8a55\u4fa1\u3055\u308c\u3001\u305d\u306e\u7d50\u679c\u304c\u6587\u5b57\u5217\u3068\u7d50\u5408\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306e\u65ad\u7247\u3092\u542b\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f0f\u306f\u3001\u30c9\u30eb\u8a18\u53f7\uff08$\uff09\u3067\u59cb\u307e\u308a\u3001\u7c21\u5358\u306a\u540d\u524d\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\uff1a\nval i = 10\nval s = \"i = $i\" // \"i = 10\"\u3068\u8a55\u4fa1\u3055\u308c\u308b\n\n\u307e\u305f\u306f\u3001\u6ce2\u62ec\u5f27\u3092\u4f7f\u3063\u305f\u5f93\u6765\u306e\u8a18\u6cd5\u3082\u3042\u308a\u307e\u3059\uff1a\nval s = \"abc\"\nval str = \"$s.length is ${s.length}\" // \"abc.length is 3\"\u3068\u8a55\u4fa1\u3055\u308c\u308b\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u751f\u6587\u5b57\u5217\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u6e08\u307f\u6587\u5b57\u5217\u306e\u3069\u3061\u3089\u306b\u542b\u307e\u308c\u3066\u3044\u3066\u3082\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\u3082\u3057$\u306e\u6587\u5b57\u30ea\u30c6\u30e9\u30eb\u3092\u751f\u6587\u5b57\u5217\u5185\uff08\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u3067\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\uff09\u3067\u8868\u73fe\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u6b21\u306e\u6587\u6cd5\u3092\u4f7f\u7528\u3067\u304d\u308b\uff1a\nval price = \"\"\"\n${'$'}9.99\n\"\"\"\n\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5ba3\u8a00\u3092\u3059\u308b\u3068\u304d\u306f\u3001\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\npackage foo.bar\n\nfun baz() {}\n\nclass Goo {}\n\n// ...\n\n\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\uff08\u3053\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3084\u95a2\u6570\u306a\u3069\uff09\u5168\u3066\u306e\u5185\u5bb9\u306f\u5ba3\u8a00\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u5f93\u3063\u3066\u3001\u6b21\u306e\u4f8b\u3067\u793a\u3059\u3068\u304a\u308a\u3001baz()\u306e\u5b8c\u5168\u540d\u306ffoo.bar.baz\u3067\u3042\u308a\u3001Goo\u306e\u5b8c\u5168\u540d\u306ffoo.bar.Goo\u3067\u3059\u3002\n\u3082\u3057\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u306f\u540d\u524d\u3092\u6301\u305f\u306a\u3044\u201ddefault\u201d\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5c5e\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n\u30a4\u30f3\u30dd\u30fc\u30c8\n\u6a19\u6e96\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u306f\u9055\u3044\u3001\u305d\u308c\u305e\u308c\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u72ec\u81ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3092\u542b\u3093\u3067\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n\u30a4\u30f3\u30dd\u30fc\u30c8\u306e\u6587\u6cd5\u306f\u3001\u6587\u6cd5\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u5358\u4e00\u306e\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u30a4\u30f3\u30dd\u30fc\u30c8\u3067\u304d\u307e\u3059\u3002\u4f8b\uff1a\nimport foo.Bar // Bar\u306f\u8a31\u53ef\u7121\u3057\u3067\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\n\n\u307e\u305f\u306f\u3001\u3042\u308b\u30b9\u30b3\u30fc\u30d7\uff08\u30d1\u30c3\u30b1\u30fc\u30b8\u3001\u30af\u30e9\u30b9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7b49\uff09\u5185\u306e\u5168\u3066\u306e\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u5834\u5408\uff1a\nimport foo.* // 'foo'\u5185\u306e\u5168\u3066\u304c\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\n\n\u540d\u524d\u306e\u885d\u7a81\u304c\u3042\u308b\u5834\u5408\u3001as{: .keyword }\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u885d\u7a81\u3059\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u5c40\u6240\u7684\u306b\u30ea\u30cd\u30fc\u30e0\u3059\u308b\u3053\u3068\u3067\u660e\u78ba\u306b\u3067\u304d\u307e\u3059\uff1a\nimport foo.Bar // Bar\u306f\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\nimport bar.Bar as bBar // bBar\u306f'bar.Bar'\u3092\u610f\u5473\u3059\u308b\n\nimport \u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\u9650\u5b9a\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u4ed6\u306e\u5ba3\u8a00\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u95a2\u6570\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\u3067\u5ba3\u8a00\u3055\u308c\u305f\u95a2\u6570\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\nenum\u5b9a\u6570\n\nJava\u3068\u306f\u9055\u3063\u3066\u3001Kotlin\u306f\u5225\u306e\"import static\"\u69cb\u6587\u3092\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u5168\u3066\u306e\u5ba3\u8a00\u306f\u666e\u901a\u306eimport\u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u3088\u3063\u3066\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3059\u3002\n\n\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u5ba3\u8a00\u306e\u53ef\u8996\u6027\n\u3082\u3057\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u5ba3\u8a00\u306bprivate{: .keyword }\u30de\u30fc\u30af\u304c\u3064\u3044\u3066\u3044\u308c\u3070\u3001\u305d\u308c\u304c\u5ba3\u8a00\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u5185\u306b\u5bfe\u3057\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u3067\u3059\u3002 \uff08\u53ef\u8996\u6027\u4fee\u98fe\u5b50 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09\n\n\u5236\u5fa1\u30d5\u30ed\u30fc\n\nif\u5f0f\nKotlin\u3067\u306f\u3001if{: .keyword }\u306f\u5f0f\u3067\u3042\u308a\u3001\u3059\u306a\u308f\u3061\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u5f93\u3063\u3066\u3001\u4e09\u9805\u6f14\u7b97\u5b50\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\uff08\u6761\u4ef6 ? \u771f\u306e\u6642 : \u507d\u306e\u6642\uff09\u3002\u306a\u305c\u306a\u3089\u666e\u901a\u306e if{: .keyword } \u304c\u305d\u306e\u5f79\u5272\u3092\u679c\u305f\u3059\u305f\u3081\u3067\u3059\u3002\n// \u4f1d\u7d71\u7684\u306a\u4f7f\u3044\u65b9\nvar max = a \nif (a < b) \n  max = b \n\n// else\u4ed8\u304d\nvar max: Int\nif (a > b) \n  max = a \nelse \n  max = b \n\n// \u8868\u73fe\u3068\u3057\u3066\nval max = if (a > b) a else b\n\nif{: .keyword } \u306e\u5206\u5c90\u306f\u30d6\u30ed\u30c3\u30af\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u6700\u5f8c\u306e\u5f0f\u304c\u305d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u5024\u3068\u306a\u308a\u307e\u3059\uff1a\nval max = if (a > b) { \n    print(\"Choose a\") \n    a \n  } \n  else { \n    print(\"Choose b\") \n    b \n  }\n\n\u3082\u3057if{: .keyword }\u3092\u6587\u3067\u306f\u306a\u304f\u5f0f\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\uff08\u4f8b\u3048\u3070\u5024\u3092\u8fd4\u3057\u305f\u308a\u5909\u6570\u306b\u4ee3\u5165\u3057\u305f\u308a\u3059\u308b\uff09\u306a\u3089\u3070\u3001\u305d\u306e\u5f0f\u306b\u306felse\u5206\u5c90\u304c\u5fc5\u8981\u3067\u3059\u3002 \nif{: .keyword }\u306e\u6587\u6cd5\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nwhen\u5f0f\nwhen{: .keyword } \u306fC\u8a00\u8a9e\u306e\u3088\u3046\u306a\u8a00\u8a9e\u306b\u304a\u3051\u308bswitch\u6f14\u7b97\u5b50\u306e\u7f6e\u304d\u63db\u3048\u3067\u3059\u3002\u6700\u3082\u7c21\u5358\u306a\u5f62\u5f0f\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\nwhen (x) {\n  1 -> print(\"x == 1\")\n  2 -> print(\"x == 2\")\n  else -> { // \u3053\u306e\u30d6\u30ed\u30c3\u30af\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\n    print(\"x is neither 1 nor 2\")\n  }\n}\n\nwhen{: .keyword } \u306f\u305d\u306e\u5f15\u6570\u3068\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u308b\u5206\u5c90\u304c\u73fe\u308c\u308b\u307e\u3067\u3001\u9806\u756a\u306b\u5168\u3066\u306e\u5206\u5c90\u306b\u5bfe\u3057\u3066\u6bd4\u8f03\u3055\u308c\u307e\u3059\u3002when{: .keyword } \u306f\u5f0f\u3068\u3057\u3066\u3082\u6587\u3068\u3057\u3066\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3082\u3057\u5f0f\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308c\u3070\u3001\u305d\u306e\u5024\u306f\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u305f\u5206\u5c90\u304c\u5168\u3066\u306e\u5f0f\u306e\u5024\u3068\u306a\u308a\u307e\u3059\u3002\u3082\u3057\u6587\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308c\u3070\u3001\u500b\u5225\u306e\u6761\u4ef6\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\uff08if{: .keyword }\u3068\u5168\u304f\u540c\u3058\u304f\u3001\u305d\u308c\u305e\u308c\u306e\u6761\u4ef6\u306f\u30d6\u30ed\u30c3\u30af\u306b\u306a\u308c\u308b\u305f\u3081\u3001\u305d\u306e\u5024\u306f\u30d6\u30ed\u30c3\u30af\u5185\u306e\u6700\u5f8c\u306e\u5f0f\u306e\u3082\u306e\u3068\u306a\u308b\u3002\uff09\nelse{: .keyword }\u6761\u4ef6\u306f\u4ed6\u306e\u6761\u4ef6\u304c\u5168\u3066\u6e80\u305f\u3055\u308c\u306a\u304b\u3063\u305f\u969b\u306b\u8a55\u4fa1\u3055\u308c\u307e\u3059\u3002 \u3082\u3057\u304c\u5f0f\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308c\u3070\u3001\u5168\u3066\u306e\u3042\u308a\u5f97\u308b\u5834\u5408\u3092\u5206\u5c90\u6761\u4ef6\u3067\u7db2\u7f85\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8a3c\u660e\u3067\u304d\u306a\u3044\u9650\u308a\u306f\u3001else{: .keyword }\u6761\u4ef6\u306f\u5fc5\u9808\u3067\u3059\u3002\n\u3082\u3057\u305f\u304f\u3055\u3093\u306e\u6761\u4ef6\u3092\u540c\u3058\u65b9\u6cd5\u3067\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5206\u5c90\u6761\u4ef6\u3092\u30b3\u30f3\u30de\u3067\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nwhen (x) {\n  0, 1 -> print(\"x == 0 or x == 1\")\n  else -> print(\"\u305d\u308c\u4ee5\u5916\")\n}\n\n\u5206\u5c90\u6761\u4ef6\u3068\u3057\u3066\u4efb\u610f\u306e\u5f0f\uff08\u5b9a\u6570\u306b\u9650\u3089\u306a\u3044\uff09\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nwhen (x) {\n  parseInt(s) -> print(\"s\u306fx\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\")\n  else -> print(\"s\u306fx\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u306a\u3044\")\n}\n\nin{: .keyword }\u307e\u305f\u306f!in{: .keyword }\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e \u7bc4\u56f2 (range) \u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a \nwhen (x) {\n  in 1..10 -> print(\"x\u306f\u7bc4\u56f2\u5185\")\n  in validNumbers -> print(\"x\u306f\u6709\u52b9\")\n  !in 10..20 -> print(\"x\u306f\u7bc4\u56f2\u5916\")\n  else -> print(\"\u3069\u308c\u306b\u3082\u8a72\u5f53\u305b\u305a\")\n}\n\n\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u4ed6\u306e\u65b9\u6cd5\u3068\u3057\u3066\u3001\u7279\u5b9a\u306e\u578b\u306eis{: .keyword }\u307e\u305f\u306f!is{: .keyword }\u304c\u3042\u308a\u307e\u3059\u3002\u30b9\u30de\u30fc\u30c8\u30ad\u30e3\u30b9\u30c8\u306e\u304a\u304b\u3052\u3067\u3001\u305d\u306e\u578b\u306e\u30e1\u30bd\u30c3\u30c9\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u8ffd\u52a0\u306e\u30c1\u30a7\u30c3\u30af\u7121\u3057\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nval hasPrefix = when(x) {\n  is String -> x.startsWith(\"prefix\")\n  else -> false\n}\n\nwhen{: .keyword }\u306f if{: .keyword}-else{: .keyword} if{: .keyword}\u9023\u9396\u3092\u4ee3\u66ff\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u5f15\u6570\u304c\u4e0e\u3048\u3089\u308c\u306a\u3044\u5834\u5408\u306f\u3001\u5206\u5c90\u6761\u4ef6\u306f\u5358\u7d14\u306aboolean\u306e\u5f0f\u3068\u306a\u308a\u3001\u5206\u5c90\u306f\u305d\u306e\u6761\u4ef6\u304ctrue\u306e\u5834\u5408\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\uff1a\nwhen {\n  x.isOdd() -> print(\"x is odd\")\n  x.isEven() -> print(\"x is even\")\n  else -> print(\"x is funny\")\n}\n\nwhen{: .keyword } \u306e\u6587\u6cd5\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nFor\u30eb\u30fc\u30d7\nfor{: .keyword }\u30eb\u30fc\u30d7\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3088\u3063\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3082\u306e\u3092\u4f55\u3067\u3082\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002\u69cb\u6587\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a\nfor (item in collection)\n  print(item)\n\n\u672c\u6587\u3092\u30d6\u30ed\u30c3\u30af\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nfor (item: Int in ints) {\n  // ...\n}\n\n\u524d\u8ff0\u3057\u305f\u3088\u3046\u306b\u3001 for{: .keyword} \u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3082\u306e\u3092\u4f55\u3067\u3082\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002\u3059\u306a\u308f\u3061\uff1a\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u3084\u62e1\u5f35\u95a2\u6570\u306e iterator() \u306f\u578b\u3092\u8fd4\u3057\u3001\n\n\n\u30e1\u30f3\u30d0\u95a2\u6570\u3084\u62e1\u5f35\u95a2\u6570\u306e next() \u3068\n\u30e1\u30f3\u30d0\u95a2\u6570\u3084\u62e1\u5f35\u95a2\u6570\u306e hasNext() \u306f Boolean \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n\n\u3053\u308c\u30893\u3064\u306e\u95a2\u6570\u306f\u5168\u3066 \u6f14\u7b97\u5b50 (operator) \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u914d\u5217\u306efor\u30eb\u30fc\u30d7\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u306a\u3044\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d9\u30fc\u30b9\u306e\u30eb\u30fc\u30d7\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u307e\u3059\u3002\n\u3082\u3057\u914d\u5217\u3084\u30ea\u30b9\u30c8\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4ed8\u304d\u3067\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3057\u305f\u3044\u306a\u3089\u3070\u3001\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u7528\u3067\u304d\u308b\uff1a \nfor (i in array.indices)\n  print(array[i])\n\n\u201c\u7bc4\u56f2\u306e\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u201d\u306f\u4f59\u5206\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u306a\u3044\u6700\u9069\u306a\u5b9f\u88c5\u3078\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3053\u3068\u3002\n\u5225\u65b9\u6cd5\u3068\u3057\u3066\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u306e withIndex \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a\nfor ((index, value) in array.withIndex()) {\n    println(\"$index\u306e\u8981\u7d20\u306f$value\")\n}\n\nfor{: .keyword }\u306e\u6587\u6cd5\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nwhile\u30eb\u30fc\u30d7\nwhile{: .keyword } \u3068 do{: .keyword }..while{: .keyword } \u306f\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u52d5\u304d\u307e\u3059\uff1a\nwhile (x > 0) {\n  x--\n}\n\ndo {\n  val y = retrieveData()\n} while (y != null) // y \u306f\u3053\u3053\u3067\u53ef\u8996(visible)\n\nwhile{: .keyword }\u306e\u6587\u6cd5\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30eb\u30fc\u30d7\u5185\u3067\u306ebreak\u3068continue\nKotlin\u306f\u30eb\u30fc\u30d7\u4e2d\u306e\u5f93\u6765\u306e break{: .keyword }\u3068continue{: .keyword } \u6f14\u7b97\u5b50\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002Return\u3068\u30b8\u30e3\u30f3\u30d7\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nreturn\u3068\u30b8\u30e3\u30f3\u30d7\nKotlin\u306b\u306f3\u3064\u306e\u69cb\u9020\u7684\u30b8\u30e3\u30f3\u30d7\u6f14\u7b97\u5b50\u304c\u3042\u308a\u307e\u3059\u3002\n\n\nreturn{: .keyword }. \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6700\u8fd1\u306e\u30af\u30ed\u30fc\u30b8\u30e3\uff08\u95a2\u6570\u9589\u5305\uff09\u3084\u533f\u540d\u95a2\u6570\u304b\u3089\u629c\u3051\u51fa\u3057\u307e\u3059\u3002\n\nbreak{: .keyword } \u6700\u3082\u8fd1\u3044\u5916\u5074\u306e\u30eb\u30fc\u30d7\u3092\u7d42\u308f\u3089\u305b\u307e\u3059\u3002\n\ncontinue{: .keyword }. \u6700\u3082\u8fd1\u3044\u5916\u5074\u306e\u30eb\u30fc\u30d7\u3067\u3042\u308b\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u9032\u307f\u307e\u3059\u3002\n\n\nbreak\u3068continue\u306e\u30e9\u30d9\u30eb\nKotlin\u306b\u304a\u3051\u308b\u4efb\u610f\u306e\u5f0f\u3092 label{: .keyword }\u3067\u30de\u30fc\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30e9\u30d9\u30eb\u306f\u3001\u305f\u3068\u3048\u3070\u3001 @ \u8a18\u53f7\u306b\u7d9a\u304f\u8b58\u5225\u5b50\u306e\u5f62\u5f0f\u3092\u6301\u3063\u3066\u3044\u307e\u3059\uff1a abc@ \u3001fooBar@\u304c\u6709\u52b9\u306a\u30e9\u30d9\u30eb\uff08\u6587\u6cd5\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3067\u3059\u3002\u5f0f\u306b\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u308b\u306b\u306f\u3001\u5f0f\u306e\u524d\u306b\u30e9\u30d9\u30eb\u3092\u7f6e\u304d\u307e\u3057\u3087\u3046\uff1a\nloop@ for (i in 1..100) {\n  // ...\n}\n\n\u3055\u3042\u3001\u3053\u308c\u3067\u79c1\u305f\u3061\u306f break{: .keyword } \u3084 continue{: .keyword } \u3092\u30e9\u30d9\u30eb\u4ed8\u3051\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff1a\nloop@ for (i in 1..100) {\n  for (j in 1..100) {\n    if (...)\n      break@loop\n  }\n}\n\n\u30e9\u30d9\u30eb\u4ed8\u304d break{: .keyword }  \u306f\u305d\u306e\u30e9\u30d9\u30eb\u304c\u4ed8\u3044\u305f\u30eb\u30fc\u30d7\u306e\u53f3\u5f8c\u306e\u5b9f\u884c\u30dd\u30a4\u30f3\u30c8\u3078\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002\ncontinue{: .keyword } \u306f\u305d\u306e\u30eb\u30fc\u30d7\u306e\u6b21\u306e\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\uff08\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\uff09\u307e\u3067\u9032\u307f\u307e\u3059\u3002\n\n\u30e9\u30d9\u30eb\u306b\u5fa9\u5e30\u3059\u308b\nKotlin\u3067\u306f\u3001\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3001\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u95a2\u6570\u3092\u5165\u308c\u5b50\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3042\u308b\u6761\u4ef6\u4ed8\u304d\u306e return{: .keyword }\u3092\u4f7f\u3046\u3068\u3001\u5916\u5074\u306e\u95a2\u6570\u304b\u3089\u5fa9\u5e30\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6700\u3082\u91cd\u8981\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u304b\u3089\u306ereturn\u3067\u3059\u3002\u3053\u308c\u3092\u66f8\u304f\u3068\u304d\u3001\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\uff1a\nfun foo() {\n  ints.forEach {\n    if (it == 0) return\n    print(it)\n  }\n}\n\nreturn{: .keyword } \u5f0f\u306f\u6700\u3082\u5185\u5074\u306e\u95a2\u6570\u3001\u3059\u306a\u308f\u3061 foo \u304b\u3089\u5fa9\u5e30\u3057\u307e\u3059\u3002\n\uff08\u3053\u306e\u3088\u3046\u306a\u975e\u5c40\u6240\u7684\u5fa9\u5e30\u304c\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u306b\u6e21\u3055\u308c\u305f\u30e9\u30e0\u30c0\u5f0f\u3067\u306e\u307f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09\n\u3082\u3057\u30e9\u30e0\u30c0\u5f0f\u304b\u3089\u5fa9\u5e30\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u306b\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3001 return{: .keyword } \u3092\u4fee\u98fe\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a\nfun foo() {\n  ints.forEach lit@ {\n    if (it == 0) return@lit\n    print(it)\n  }\n}\n\n\u3053\u308c\u306f\u30e9\u30e0\u30c0\u5f0f\u304b\u3089\u306e\u307f\u5fa9\u5e30\u3057\u307e\u3059\u3002\u591a\u304f\u306e\u5834\u5408\u3001\u6697\u9ed9\u306e\u30e9\u30d9\u30eb\u3092\u4f7f\u7528\u3059\u308b\u65b9\u304c\u4fbf\u5229\u3067\u3059\u3002\n\u305d\u306e\u3088\u3046\u306a\u30e9\u30d9\u30eb\u306f\u3001\u30e9\u30e0\u30c0\u304c\u6e21\u3055\u308c\u305f\u95a2\u6570\u3068\u540c\u3058\u540d\u524d\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\nfun foo() {\n  ints.forEach {\n    if (it == 0) return@forEach\n    print(it)\n  }\n}\n\n\u4ee3\u308f\u308a\u306e\u624b\u6cd5\u3068\u3057\u3066\u3001\u7121\u540d\u95a2\u6570\u3068\u30e9\u30e0\u30c0\u5f0f\u3092\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u7121\u540d\u95a2\u6570\u5185\u306e return{: .keyword } \u6587\u306f\u3001\u305d\u306e\u7121\u540d\u95a2\u6570\u81ea\u4f53\u304b\u3089\u5fa9\u5e30\u3057\u307e\u3059\u3002\nfun foo() {\n  ints.forEach(fun(value: Int) {\n    if (value == 0) return\n    print(value)\n  })\n}\n\n\u5024\u3092\u8fd4\u3059\u3068\u304d\u3001\u30d1\u30fc\u30b5\u306f\u8cc7\u683c\u3092\u6301\u3064return\u3092\u512a\u5148\u3057\u307e\u3059\u3002\u3059\u306a\u308f\u3061\u3001\nreturn@a 1\n\n\u4e0a\u8a18\u306f\u300c @a \u30e9\u30d9\u30eb\u306b\u304a\u3051\u308breturn 1 \u300d\u3092\u610f\u5473\u3057\u3001\u300c (@a 1) \u30e9\u30d9\u30eb\u304c\u4ed8\u3044\u305f\u5f0f\u304b\u3089\u306ereturn\u300d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u30af\u30e9\u30b9\u3068\u7d99\u627f\n\n\u30af\u30e9\u30b9\nKotlin\u3067\u306e\u30af\u30e9\u30b9\u306f\u3001class{: .keyword }\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u5ba3\u8a00\u3055\u308c\u307e\u3059\u3002\nclass Invoice {\n}\n\n\u30af\u30e9\u30b9\u5ba3\u8a00\u306f\u30af\u30e9\u30b9\u540d\u3001\u30af\u30e9\u30b9\u30d8\u30c3\u30c0\uff08\u305d\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u4e3b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u7b49\uff09\u3001\u305d\u3057\u3066\u6ce2\u62ec\u5f27\u3067\u62ec\u3089\u308c\u305f\u30af\u30e9\u30b9\u672c\u4f53\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\u30d8\u30c3\u30c0\u3068\u672c\u4f53\u306f\u4e21\u65b9\u3068\u3082\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30af\u30e9\u30b9\u306b\u672c\u4f53\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u6ce2\u62ec\u5f27\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nclass Empty\n\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\nKotlin\u5185\u306e\u30af\u30e9\u30b9\u306f\u3001 \u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30681\u3064\u307e\u305f\u306f\u8907\u6570\u306e \u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001\u30af\u30e9\u30b9\u306e\u30d8\u30c3\u30c0\u30fc\u306e\u4e00\u90e8\u3067\u3059\u3002\u30af\u30e9\u30b9\u540d\uff08\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3064\u3051\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff09\u306e\u5f8c\u306b\u7d9a\u304d\u307e\u3059\u3002\nclass Person constructor(firstName: String) {\n}\n\n\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u53ef\u8996\u6027\u4fee\u98fe\u5b50\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001 constructor{: .keyword }\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nclass Person(firstName: String) {\n}\n\n\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001\u3069\u3093\u306a\u30b3\u30fc\u30c9\u3082\u542b\u3081\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u521d\u671f\u5316\u30b3\u30fc\u30c9\u306f\u3001init{: .keyword }\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u4ed8\u3044\u3066\u3044\u308b \u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\u5185 \u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nclass Customer(name: String) {\n    init {\n        logger.info(\"Customer initialized with value ${name}\")\n    }\n}\n\n\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3092\u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\u306b\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30af\u30e9\u30b9\u672c\u4f53\u5185\u3067\u5ba3\u8a00\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u521d\u671f\u5316\u51e6\u7406\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nclass Customer(name: String) {\n    val customerKey = name.toUpperCase()\n}\n\n\u5b9f\u969b\u306b\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5ba3\u8a00\u3068\u521d\u671f\u5316\u3092\u4e3b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u884c\u3046\u305f\u3081\u306b\u3001Kotlin\u306f\u7c21\u6f54\u306a\u69cb\u6587\u304c\u3042\u308a\u307e\u3059\uff1a\nclass Person(val firstName: String, val lastName: String, var age: Int) {\n  // ...\n}\n\n\u901a\u5e38\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u65b9\u6cd5\u306e\u3088\u3046\u306b\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u4e3b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u4e2d\u3067\u53ef\u5909\u5024\uff08\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff09 ( var{: .keyword } ) \u307e\u305f\u306f\u56fa\u5b9a\u5024\uff08\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff09 ( val{: .keyword} ) \u3067\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3082\u3057\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u53ef\u8996\u6027\u4fee\u98fe\u5b50\u3092\u6301\u3064\u5834\u5408\u306f\u3001 constructor{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u4fee\u98fe\u5b50\u306f\u305d\u306e\u524d\u306b\u7f6e\u304b\u308c\u308b\uff1a\nclass Customer public @Inject constructor(name: String) { ... }\n\n\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u53ef\u8996\u6027\u4fee\u98fe\u5b50\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\u30af\u30e9\u30b9\u306f\u3001 constructor{: .keyword } \u30d7\u30ec\u30d5\u30a3\u30af\u30b9\u3068\u5171\u306b \u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nclass Person {\n    constructor(parent: Person) {\n        parent.children.add(this)\n    }\n}\n\n\u3082\u3057\u30af\u30e9\u30b9\u304c\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u306a\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u76f4\u63a5\u7684\u307e\u305f\u306f\u9593\u63a5\u7684\u306b\u3001\u4ed6\u306e\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4ecb\u3057\u3066\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3078\u59d4\u8b72\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u540c\u30af\u30e9\u30b9\u306e\u4ed6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3078\u306e\u59d4\u8b72\u306f this{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u7528\u3044\u3066\u884c\u3044\u307e\u3059\uff1a\nclass Person(val name: String) {\n    constructor(name: String, parent: Person) : this(name) {\n        parent.children.add(this)\n    }\n}\n\n\u3082\u3057\u975e\u62bd\u8c61\u30af\u30e9\u30b9\u304c\u4f55\u3082\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u30d7\u30e9\u30a4\u30de\u30ea\u3001\u30bb\u30ab\u30f3\u30c0\u30ea\u5171\u306b\uff09\u3092\u5ba3\u8a00\u3057\u306a\u3051\u308c\u3070\u3001\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5f15\u6570\u7121\u3057\u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u969b\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u53ef\u8996\u6027\u306fpublic\u306b\u306a\u308a\u307e\u3059\u3002\u3082\u3057public\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u671b\u307e\u306a\u3044\u306a\u3089\u3070\u3001\u7a7a\u306e\u4e3b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306a\u3044\u53ef\u8996\u6027\u3067\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nclass DontCreateMe private constructor () {\n}\n\n\n\u6ce8\u610f: JVM\u3067\u306f\u3001\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5168\u3066\u306e\u5f15\u6570\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u306a\u3089\u3001\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u5f15\u6570\u7121\u3057\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u8ffd\u52a0\u3067\u751f\u6210\u3057\u3001\u305d\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3053\u308c\u306b\u3088\u308a\u3001Jackson\u3084JPA\u306e\u3088\u3046\u306b\u5f15\u6570\u304c\u7121\u3044\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u901a\u3057\u3066\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3001\nKotlin\u3067\u4f7f\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\nclass Customer(val customerName: String = \"\")\n\n{:.info}\n\n\n\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\n\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u666e\u901a\u306e\u95a2\u6570\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u305b\u3070\u826f\u3044\u3067\u3059\uff1a\nval invoice = Invoice()\n\nval customer = Customer(\"Joe Smith\")\n\nKotlin\u306f new{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u6301\u305f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30af\u30e9\u30b9\u3001\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u3001\u305d\u3057\u3066\u533f\u540d\u306e\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306e\u751f\u6210\u306f\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30af\u30e9\u30b9\u306e\u4e2d\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30af\u30e9\u30b9\u30e1\u30f3\u30d0\n\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\n\u95a2\u6570\n\u30d7\u30ed\u30d1\u30c6\u30a3\n\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00\n\n\n\u7d99\u627f\nKotlin\u306e\u5168\u3066\u306e\u30af\u30e9\u30b9\u306f\u5171\u901a\u306e Any \u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u3082\u3061\u307e\u3059\u3002\u3053\u308c\u306f\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306e\u5ba3\u8a00\u304c\u306a\u3044\u30af\u30e9\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3067\u3059\u3002\nclass Example // Any\u304b\u3089\u6697\u9ed9\u306e\u7d99\u627f\n\nAny \u306f java.lang.Object \u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u7279\u306b\u6ce8\u610f\u3059\u3079\u304d\u306f\u3001 equals() \u3001 hashCode() \u3001 toString() \u4ee5\u5916\u306e\u30e1\u30f3\u30d0\u3092\u6301\u3061\u307e\u305b\u3093\u3002 \u8a73\u7d30\u306b\u3064\u3044\u3066\u306f Java\u3068\u306e\u76f8\u4e92\u904b\u7528\u6027 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30af\u30e9\u30b9\u30d8\u30c3\u30c0\u5185\u306e\u30b3\u30ed\u30f3\u306e\u5f8c\u306b\u578b\u3092\u66f8\u304f\u3068\u3001\u660e\u793a\u7684\u306b\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3092\u5ba3\u8a00\u3067\u304d\u307e\u3059\uff1a\nopen class Base(p: Int)\n\nclass Derived(p: Int) : Base(p)\n\n\u3082\u3057\u3053\u306e\u3088\u3046\u306a\uff08\u660e\u793a\u7684\u306b\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3092\u5ba3\u8a00\u3059\u308b\uff09\u30af\u30e9\u30b9\u304c\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u3082\u3064\u306a\u3089\u3001\u57fa\u5e95\u306e\u578b\u3092\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u305d\u3053\u3067\u521d\u671f\u5316\u3067\u304d\u308b\uff08\u3057\u3001\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\uff09\u3002\n\u3082\u3057\u3053\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u304c\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u306a\u3044\u306a\u3089\u3070\u3001\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u305d\u308c\u305e\u308c\u57fa\u5e95\u306e\u578b\u3092 super{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u3059\u308b\u304b\u3001\u4ed6\u306e\u521d\u671f\u5316\u3057\u3066\u304f\u308c\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u59d4\u8b72\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\u3053\u306e\u4e8b\u4f8b\u3067\u306f\u7570\u306a\u308b\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u7570\u306a\u308b\u57fa\u5e95\u306e\u578b\u3092\u6301\u3064\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3053\u3068\uff1a\nclass MyView : View {\n    constructor(ctx: Context) : super(ctx) {\n    }\n\n    constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs) {\n    }\n}\n\n\u30af\u30e9\u30b9\u306e open{: .keyword } \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u3001Java\u306e final{: .keyword } \u3068\u53cd\u5bfe\u3067\u3059\uff1a\u4ed6\u306e\u30af\u30e9\u30b9\u304c\u3053\u306e\u30af\u30e9\u30b9\u304b\u3089\u7d99\u627f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001Kotlin\u306e\u3059\u3079\u3066\u306e\u30af\u30e9\u30b9\u306f Effective Java \u306e\u30a2\u30a4\u30c6\u30e017\uff08 \u7d99\u627f\u307e\u305f\u306f\u305d\u308c\u306e\u7981\u6b62\u306e\u305f\u3081\u306e\u30c7\u30b6\u30a4\u30f3\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \uff09\u306b\u5408\u81f4\u3059\u308b final \u3067\u3059\u3002\n\n\u30e1\u30f3\u30d0\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\u524d\u8ff0\u306e\u901a\u308a\u3001\u79c1\u305f\u3061\u306fKotlin\u306b\u660e\u793a\u7684\u306b\u3059\u308b\u3053\u3068\u306b\u3053\u3060\u308f\u308a\u307e\u3059\u3002\u305d\u3057\u3066\u3001Java\u3068\u306f\u7570\u306a\u308a\u3001Kotlin\u306f\u30e1\u30f3\u30d0\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3067\u304d\u308b\u30e1\u30f3\u30d0\uff08\u79c1\u305f\u3061\u306f open \u3068\u547c\u3093\u3067\u3044\u307e\u3059\uff09\u3068\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u81ea\u4f53\u306b\u660e\u793a\u7684\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002\nopen class Base {\n  open fun v() {}\n  fun nv() {}\n}\nclass Derived() : Base() {\n  override fun v() {}\n}\n\noverride{: .keyword } \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f Derived.v() \u306e\u305f\u3081\u306b\u5fc5\u8981\u3067\u3059\u3002\u3082\u3057\u306a\u3051\u308c\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u6587\u53e5\u3092\u8a00\u3046\u3067\u3057\u3087\u3046\u3002\u3082\u3057 Base.nv() \u306e\u3088\u3046\u306b open{: .keyword } \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u95a2\u6570\u306b\u306a\u3051\u308c\u3070\u3001\u30e1\u30bd\u30c3\u30c9\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u5185\u3067\u540c\u3058\u8b58\u5225\u5b50\u3067\u5ba3\u8a00\u3059\u308b\u3053\u3068\u306f override{: .keyword } \u306e\u6709\u7121\u306b\u304b\u304b\u308f\u3089\u305a\u6587\u6cd5\u9055\u53cd\u3067\u3059\u3002\u30d5\u30a1\u30a4\u30ca\u30eb\u30af\u30e9\u30b9\uff08\u4f8b\u3048\u3070\u3001 open{: .keyword } \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u6301\u305f\u306a\u3044\u30af\u30e9\u30b9\uff09\u306e\u4e2d\u3067\u306f\u3001open\u30e1\u30f3\u30d0\u306f\u7981\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\u3002\noverride{: .keyword } \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u308b\u30e1\u30f3\u30d0\u306f\u3001\u305d\u308c\u81ea\u8eab\u304copen\u3067\u3059\u3002\u3059\u306a\u308f\u3061\u3001\u30b5\u30d6\u30af\u30e9\u30b9\u5185\u3067\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3082\u3057\u518d\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3092\u7981\u6b62\u3057\u305f\u3051\u308c\u3070\u3001 final{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\uff1a\nopen class AnotherDerived() : Base() {\n  final override fun v() {}\n}\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3082\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3068\u540c\u3058\u3088\u3046\u306b\u52d5\u304d\u307e\u3059\u3002\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u5ba3\u8a00\u306e\u4e00\u90e8\u3068\u3057\u3066\u3001override\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nopen class Foo {\n    open val x: Int get { ... }\n}\n\nclass Bar1(override val x: Int) : Foo() {\n\n}\n\nval \u30d7\u30ed\u30d1\u30c6\u30a3\u3092 var \u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u3001\u305d\u306e\u9006\u3082\u307e\u305f\u7136\u308a\u3067\u3059\uff08\u9006\u3082\u307e\u305f\u540c\u3058\u3067\u3059\uff09\u3002\u3053\u308c\u306f\u3001val \u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u672c\u8cea\u7684\u306bgetter\u30e1\u30bd\u30c3\u30c9\u3092\u5ba3\u8a00\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3042\u308a\u3001\u305d\u308c\u3092 var \u3068\u3057\u3066\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u306f\u3001\u3055\u3089\u306bsetter\u30e1\u30bd\u30c3\u30c9\u3092\u6d3e\u751f\u30af\u30e9\u30b9\u306b\u5ba3\u8a00\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n\u5f85\u3063\u3066\uff01\u3058\u3083\u3042\u3069\u3046\u3084\u3063\u3066\u81ea\u5206\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30cf\u30c3\u30af\u3059\u308c\u3070\u826f\u3044\u306e\uff1f\uff01\n\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u306eKotlin\u3067\u306e\u65b9\u6cd5\uff08\u30af\u30e9\u30b9\u3084\u30e1\u30f3\u30d0\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067final\uff09\u306b\u306f1\u3064\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u3042\u306a\u305f\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u4f55\u304b\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u5316\u3057\u3001 \u3044\u304f\u3064\u304b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3057\u3066\uff08\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8a2d\u8a08\u8005\u306f\u305d\u308c\u3092\u610f\u56f3\u3057\u3066\u3044\u306a\u3044\uff09 \u305d\u3053\u306b\u3044\u304f\u3064\u304b\u306e\u5384\u4ecb\u306a\u30cf\u30c3\u30af\u3092\u5c0e\u5165\u3059\u308b\u306e\u304c\u96e3\u3057\u304f\u306a\u308b\u3001\u3068\u3044\u3046\u554f\u984c\u3067\u3059\u3002\n\u79c1\u305f\u3061\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u7406\u7531\u304b\u3089\u3001\u3053\u308c\u306f\u6b20\u70b9\u3067\u306f\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\uff1a\n\n\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306f\u300c\u3068\u306b\u304b\u304f\u3053\u308c\u3089\u306e\u30cf\u30c3\u30af\u3092\u8a31\u53ef\u3059\u3079\u304d\u3067\u306f\u306a\u3044\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\n\u540c\u69d8\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u53d6\u3063\u3066\u3044\u308b\u4ed6\u306e\u8a00\u8a9e (C++, C#) \u306f\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\n\u3082\u3057\u672c\u5f53\u306b\u3053\u306e\u30cf\u30c3\u30af\u304c\u5fc5\u8981\u306a\u3089\u3070\u3001\u305d\u308c\u3067\u3082\u65b9\u6cd5\u306f\u6b8b\u3063\u3066\u3044\u308b\uff1a\u3044\u3064\u3067\u3082\u30cf\u30c3\u30af\u3092Java\u3067\u66f8\u304d\u3001Kotlin\u304b\u3089\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u308b\uff08 Java Interop\u3092\u53c2\u7167 \u3057\u3066\u304f\u3060\u3055\u3044 \uff09\u3057\u3001Aspect\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3044\u3064\u3082\u3053\u308c\u3089\u306e\u76ee\u7684\u306b\u304b\u306a\u3044\u307e\u3059\n\n\n\u30eb\u30fc\u30eb\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\nKotlin\u3067\u306f\u3001\u7d99\u627f\u306e\u5b9f\u88c5\u306f\u6b21\u306e\u30eb\u30fc\u30eb\u3067\u5b9a\u3081\u3089\u308c\u3066\u3044\u307e\u3059\uff1a\u3082\u3057\u30af\u30e9\u30b9\u304c\u76f4\u63a5\u306e\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u304b\u3089\u540c\u3058\u30e1\u30f3\u30d0\u306e\u591a\u304f\u306e\u5b9f\u88c5\u3092\u7d99\u627f\u3059\u308b\u5834\u5408\u3001\u30af\u30e9\u30b9\u306f\u3053\u306e\u30e1\u30f3\u30d0\u3092\u7d99\u627f\u3057\u3001\u305d\u306e\u72ec\u81ea\u306e\u5b9f\u88c5\uff08\u304a\u305d\u3089\u304f\u3001\u7d99\u627f\u3055\u308c\u305f\u3082\u306e\u306e\u4e00\u3064\u3092\u4f7f\u7528\u3057\u3066\uff09\u3092\u63d0\u4f9b\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306e\u540d\u524d\u3092\u89d2\u62ec\u5f27\u3067\u8a18\u8ff0\u3057\u3001 super \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u7d99\u627f\u3055\u308c\u305f\u5b9f\u88c5\u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4f8b\uff1a super<Base>\nopen class A {\n  open fun f() { print(\"A\") }\n  fun a() { print(\"a\") }\n}\n\ninterface B {\n  fun f() { print(\"B\") } // \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u30e1\u30f3\u30d0\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067'open'\n  fun b() { print(\"b\") }\n}\n\nclass C() : A(), B {\n  // \u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u305f\u3081\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u306f f() \u3092\u8981\u6c42\u3059\u308b\n  override fun f() {\n    super<A>.f() // A.f()\u306e\u547c\u3073\u51fa\u3057\n    super<B>.f() // B.f()\u306e\u547c\u3073\u51fa\u3057\n  }\n}\n\nA \u3068 B \u306e\u4e21\u65b9\u304b\u3089\u7d99\u627f\u3059\u308b\u306e\u306f\u554f\u984c\u306a\u304f\u3001 C \u306f\u305d\u308c\u3089\u306e\u95a2\u6570\u306e\u552f\u4e00\u306e\u5b9f\u88c5\u3067\u3042\u308b\u305f\u3081 a() \u3068 b() \u3082\u540c\u69d8\u3067\u3059\u3002\u3057\u304b\u3057 f() \u306b\u3064\u3044\u3066\u306f\u30012\u3064\u306e\u5b9f\u88c5\u304c C \u306b\u7d99\u627f\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001 C \u306b\u3042\u308b f() \u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3057\u3001\u66d6\u6627\u3055\u3092\u6392\u9664\u3059\u308b\u305f\u3081\u72ec\u81ea\u306e\u5b9f\u88c5\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u62bd\u8c61\u30af\u30e9\u30b9\n\u30af\u30e9\u30b9\u3068\u305d\u306e\u30e1\u30f3\u30d0\u306f abstract{: .keyword } \u3092\u4f7f\u7528\u3057\u3066\u62bd\u8c61\u30af\u30e9\u30b9\u30fb\u62bd\u8c61\u30e1\u30f3\u30d0\u3068\u3057\u3066\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u62bd\u8c61\u30e1\u30f3\u30d0\u306f\u305d\u306e\u30af\u30e9\u30b9\u5185\u306b\u5b9f\u88c5\u3092\u6301\u3061\u307e\u305b\u3093\u3002\u62bd\u8c61\u30af\u30e9\u30b9\u3084\u62bd\u8c61\u95a2\u6570\u306bopen\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u5fc5\u8981\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3082\u3063\u3068\u3082\u3001\u305d\u308c\u306f\u8a00\u3046\u307e\u3067\u3082\u306a\u3044\u3053\u3068\u3067\u3059\u304c\u3002\n\u975e\u62bd\u8c61\u30aa\u30fc\u30d7\u30f3\u30e1\u30f3\u30d0\u3092\u62bd\u8c61\u30e1\u30f3\u30d0\u3067\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nopen class Base {\n  open fun f() {}\n}\n\nabstract class Derived : Base() {\n  override abstract fun f()\n}\n\n\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (Companion Objects)\nKotlin\u3067\u306f\u3001Java\u3084C\uff03\u3068\u306f\u7570\u306a\u308a\u3001\u30af\u30e9\u30b9\u306fstatic\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3061\u307e\u305b\u3093\u3002\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u4ee3\u66ff\u3068\u3057\u3066\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u30ec\u30d9\u30eb\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3082\u3057\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6301\u305f\u305a\u306b\u547c\u3079\u308b\u304c\u30af\u30e9\u30b9\u5185\u90e8\uff08\u4f8b\u3048\u3070\u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\uff09\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u8981\u308b\u95a2\u6570\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308c\u3070\u3001\u305d\u306e\u30af\u30e9\u30b9\u306e\u4e2d\u3067 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5ba3\u8a00 \u306e\u30e1\u30f3\u30d0\u3068\u3057\u3066\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u7279\u306b\u3001\u3082\u3057 \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092\u30af\u30e9\u30b9\u5185\u3067\u5ba3\u8a00\u3057\u305f\u5834\u5408\u3067\u3042\u3063\u3066\u3082\u3001\u30af\u30e9\u30b9\u540d\u3092\u8b58\u5225\u5b50\u3068\u3057\u3066\u3001static\u95a2\u6570\u3092Java/C# \u3067\u547c\u3076\u306e\u3068\u540c\u3058\u69cb\u6587\u3067\u305d\u306e\u30e1\u30f3\u30d0\u3092\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30b7\u30fc\u30eb\u30af\u30e9\u30b9 (Sealed Classes)\n\u5024\u304c\u5236\u9650\u3055\u308c\u305f\u30bb\u30c3\u30c8\u306e1\u3064\u306e\u578b\u3092\u6301\u3064\u304c\u3001\u4ed6\u306e\u578b\u3092\u6301\u3066\u306a\u3044\u5834\u5408\u3001\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u304c\u5236\u9650\u3055\u308c\u305f\u30af\u30e9\u30b9\u968e\u5c64\u3092\u8868\u73fe\u3059\u308b\u969b\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\u305d\u308c\u3089\u306f\u3042\u308b\u610f\u5473\u3001enum\uff08\u5217\u6319\u578b\uff09\u30af\u30e9\u30b9\u306e\u62e1\u5f35\u3067\u3059\u3002enum\u578b\u306e\u5024\u306e\u30bb\u30c3\u30c8\u3082\u540c\u3058\u304f\u5236\u9650\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u305d\u308c\u305e\u308c\u306eenum\u5b9a\u6570\u306f\u30b7\u30f3\u30b0\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u306e\u307f\u5b58\u5728\u3057\u3001\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306f\u72b6\u614b\u3092\u4fdd\u6301\u3067\u304d\u308b\u8907\u6570\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3082\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nsealed \u4fee\u98fe\u5b50\u3092\u30af\u30e9\u30b9\u540d\u306e\u524d\u306b\u7f6e\u304f\u3068\u3001\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u3092\u5ba3\u8a00\u3067\u304d\u307e\u3059\u3002\u30eb\u30af\u30e9\u30b9\u306f\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u306f\u5168\u3066\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u81ea\u8eab\u306e\u5ba3\u8a00\u306e\u4e2d\u306b\u30cd\u30b9\u30c8\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\nsealed class Expr {\n    class Const(val number: Double) : Expr()\n    class Sum(val e1: Expr, val e2: Expr) : Expr()\n    object NotANumber : Expr()\n}\n\n\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\uff08\u9593\u63a5\u7684\u306a\u7d99\u627f\uff09\u3092\u62e1\u5f35\u3059\u308b\u30af\u30e9\u30b9\u306f\u3069\u3053\u306b\u3067\u3082\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u3001\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u306e\u4e2d\u306b\u66f8\u304f\u5fc5\u8981\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u306e\u4e3b\u306a\u5229\u70b9\u306f when\u5f0f \u306e\u4e2d\u3067\u4f7f\u7528\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u63ee\u3055\u308c\u307e\u3059\u3002\u3082\u3057\u6587\u304c\u5168\u3066\u306e\u4e8b\u8c61\u3092\u30ab\u30d0\u30fc\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u30fb\u8a3c\u660e\u3067\u304d\u308c\u3070\u3001 else \u53e5\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\nfun eval(expr: Expr): Double = when(expr) {\n    is Expr.Const -> expr.number\n    is Expr.Sum -> eval(expr.e1) + eval(expr.e2)\n    Expr.NotANumber -> Double.NaN\n    // \u5168\u3066\u306e\u4e8b\u4f8b\u3092\u5617\u3081\u305f\u305f\u3081\u3001`else` \u53e5\u306f\u4e0d\u8981\n}\n\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5ba3\u8a00\nKotlin\u306e\u30af\u30e9\u30b9\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3089\u306f\u3001 var{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u53ef\u5909\uff09\u3068\u3057\u3066\u5ba3\u8a00\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u3001 val{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3068\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u8aad\u307f\u53d6\u308a\u5c02\u7528\uff09\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\npublic class Address { \n  public var name: String = ...\n  public var street: String = ...\n  public var city: String = ...\n  public var state: String? = ...\n  public var zip: String = ...\n}\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u3046\u306b\u306fJava\u3067\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3084\u308b\u3088\u3046\u306b\u3001\u305f\u3060\u5358\u7d14\u306b\u540d\u524d\u3067\u53c2\u7167\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3067\u3059\uff1a\nfun copyAddress(address: Address): Address {\n  val result = Address() // 'new' \u30ad\u30fc\u30ef\u30fc\u30c9\u306f Kotlin \u306b\u3042\u308a\u307e\u305b\u3093\n  result.name = address.name // \u30a2\u30af\u30bb\u30b5\u304c\u547c\u3070\u308c\u308b\n  result.street = address.street\n  // ...\n  return result\n}\n\n\n\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\n\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5ba3\u8a00\u3059\u308b\u305f\u3081\u306e\u5b8c\u5168\u306a\u69cb\u6587\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\nvar <propertyName>: <PropertyType> [= <property_initializer>]\n  [<getter>]\n  [<setter>]\n\n\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3001\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u304b\u57fa\u672c\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u30fc\u304b\u3089\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3055\u308c\u308b\u3053\u3068\u304c\u63a8\u6e2c\u3055\u308c\u308b\u5834\u5408\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u578b\u3082\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \n\u4f8b\uff1a\nvar allByDefault: Int? // \u30a8\u30e9\u30fc\uff1a\u660e\u793a\u7684\u306a\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u304c\u5fc5\u8981\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u306f\u6697\u9ed9\nvar initialized = 1 // \u3053\u308c\u306f Int \u578b\u3092\u6301\u3061\u3001\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u3082\u6301\u3064\n\n\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u5ba3\u8a00\u306e\u5b8c\u5168\u306a\u69cb\u6587\u306f\u3001\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306e\u3082\u306e\u3068\u6bd4\u3079\u30662\u70b9\u7570\u306a\u308a\u307e\u3059\u3002var \u306e\u4ee3\u308f\u308a\u306b val \u3067\u59cb\u307e\u308b\u306e\u3068\u3001\u30bb\u30c3\u30bf\u30fc\u3092\u8a8d\u3081\u306a\u3044\u3053\u3068\u3067\u3067\u3059\uff1a\nval simple: Int? // Int \u578b\u3092\u6301\u3061\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30b2\u30c3\u30bf\u30fc\u3092\u6301\u3064\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067\u521d\u671f\u5316\u304c\u5fc5\u8981\nval inferredType = 1 // Int \u578b\u3092\u6301\u3061\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30b2\u30c3\u30bf\u30fc\u3092\u6301\u3064\n\n\u30ab\u30b9\u30bf\u30e0\u30a2\u30af\u30bb\u30b5\u306f\u666e\u901a\u306e\u95a2\u6570\u3068\u3068\u3066\u3082\u4f3c\u3066\u3044\u3066\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u4e2d\u306b\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30ab\u30b9\u30bf\u30e0\u30b2\u30c3\u30bf\u30fc\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\uff1a\nval isEmpty: Boolean\n  get() = this.size == 0\n\n\u30ab\u30b9\u30bf\u30e0\u30bb\u30c3\u30bf\u30fc\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\nvar stringRepresentation: String\n  get() = this.toString()\n  set(value) {\n    setDataFromString(value) // \u6587\u5b57\u5217\u3092\u30d1\u30fc\u30b9\u3057\u3066\u4ed6\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u5024\u3092\u4ee3\u5165\u3059\u308b\n  }\n\n\u6163\u4f8b\u306b\u3088\u308a\u3001\u30bb\u30c3\u30bf\u30fc\u306e\u5f15\u6570\u540d\u306f value \u3067\u3059\u304c\u3001\u5225\u306e\u540d\u524d\u304c\u826f\u3044\u306a\u3089\u305d\u3061\u3089\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u30a2\u30af\u30bb\u30b5\u306e\u53ef\u8996\u6027\u3092\u5909\u66f4\u3057\u305f\u308a\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b9f\u88c5\u3092\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u305d\u306e\u672c\u4f53\u3092\u5b9a\u7fa9\u305b\u305a\u306b\u30a2\u30af\u30bb\u30b5\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nvar setterVisibility: String = \"abc\"\n  private set // \u30bb\u30c3\u30bf\u30fc\u306f\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b9f\u88c5\u3092\u6301\u3064\n\nvar setterWithAnnotation: Any? = null\n  @Inject set // \u30bb\u30c3\u30bf\u30fc\u306b Inject \u3067\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\n\n\n\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9 (Backing Fields)\nKotlin\u306e\u30af\u30e9\u30b9\u306f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u30ab\u30b9\u30bf\u30e0\u30a2\u30af\u30bb\u30b5\u3092\u4f7f\u7528\u3059\u308b\u3068\u304d\u306b\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u76ee\u7684\u306e\u305f\u3081\u306b\u3001Kotlin\u306f\u81ea\u52d5\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001 field \u8b58\u5225\u5b50\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nvar counter = 0 // \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306e value \u306f\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u3078\u76f4\u306b\u66f8\u304d\u8fbc\u307e\u308c\u308b\n  set(value) {\n    if (value >= 0)\n      field = value\n  }\n\nfield \u8b58\u5225\u5b50\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30a2\u30af\u30bb\u30b5\u306b\u306e\u307f\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30a2\u30af\u30bb\u30b5\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b9f\u88c5\u306e\u3046\u3061\u5c11\u306a\u304f\u3068\u30821\u3064\u3092\u4f7f\u7528\u3059\u308b\u304b\u3001\u30ab\u30b9\u30bf\u30e0\u30a2\u30af\u30bb\u30b5\u304c field \u8b58\u5225\u5b50\u3092\u901a\u3057\u3066\u53c2\u7167\u3055\u308c\u305f\u5834\u5408\u306b\u3001\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\uff1a\nval isEmpty: Boolean\n  get() = this.size == 0\n\n\n\u30d0\u30c3\u30ad\u30f3\u30b0\u30d7\u30ed\u30d1\u30c6\u30a3\n\u300c\u6697\u9ed9\u306e\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u300d\u306b\u305d\u3050\u308f\u306a\u3044\u3053\u3068\u3092\u3084\u308a\u305f\u3044\u5834\u5408\u306b\u306f\u3001 \u30d0\u30c3\u30ad\u30f3\u30b0\u30d7\u30ed\u30d1\u30c6\u30a3 (backing property) \u3092\u6301\u3064\u3088\u3046\u306b\u5fc5\u305a\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u3055\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a\nprivate var _table: Map<String, Int>? = null\npublic val table: Map<String, Int>\n  get() {\n    if (_table == null)\n      _table = HashMap() // \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u63a8\u8ad6\u3055\u308c\u308b\n    return _table ?: throw AssertionError(\"\u4ed6\u30b9\u30ec\u30c3\u30c9\u306b\u3088\u3063\u3066null\u3092\u30bb\u30c3\u30c8\u3055\u308c\u305f\")\n  }\n\n\u5168\u3066\u306e\u70b9\u306b\u304a\u3044\u3066\u3001\u3053\u308c\u306f\u3061\u3087\u3046\u3069Java\u3068\u540c\u3058\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u3001private\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u30c7\u30d5\u30a9\u30eb\u30c8\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u3067\u306e\u30a2\u30af\u30bb\u30b9\u304c\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u30aa\u30fc\u30d0\u30d8\u30c3\u30c9\u304c\u7121\u3044\u3088\u3046\u306b\u6700\u9069\u5316\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\n\u5024\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u308f\u304b\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001 const \u4fee\u98fe\u5b50\u3092\u4f7f\u7528\u3057\u3066\u3001 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570 (compile time constants) \u3068\u3057\u3066\u30de\u30fc\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u6b21\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a\n\n\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u307e\u305f\u306f object \u306e\u30e1\u30f3\u30d0\nString \u578b\u306e\u5024\u307e\u305f\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u521d\u671f\u5316\u3055\u308c\u308b\n\u30ab\u30b9\u30bf\u30e0\u30b2\u30c3\u30bf\u30fc\u304c\u7121\u3044\n\n\u3053\u306e\u3088\u3046\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u306f\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nconst val SUBSYSTEM_DEPRECATED: String = \"This subsystem is deprecated\"\n\n@Deprecated(SUBSYSTEM_DEPRECATED) fun foo() { ... }\n\n\n\u9045\u5ef6\u521d\u671f\u5316\u30d7\u30ed\u30d1\u30c6\u30a3\n\u901a\u5e38\u3001\u975enull\u578b\u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067\u521d\u671f\u5316\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u304b\u306a\u308a\u591a\u304f\u306e\u5834\u5408\u306b\u304a\u3044\u3066\u3001\u3053\u308c\u306f\u4fbf\u5229\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u305f\u3068\u3048\u3070\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u4f9d\u5b58\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (DI; dependency injection; \u4f9d\u5b58\u6027\u6ce8\u5165, \u8a33\u6ce8\uff1a\u53c2\u8003)\u3092\u4ecb\u3057\u3066\u3001\u307e\u305f\u306f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30e1\u30bd\u30c3\u30c9\u3067\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u4e8b\u4f8b\u3067\u306f\u3001\u975enull\u306e\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u3067\u3082\u306a\u304a\u30af\u30e9\u30b9\u5185\u306e\u672c\u4f53\u306b\u3042\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53c2\u7167\u3059\u308b\u969b\u306bnull\u30c1\u30a7\u30c3\u30af\u3092\u907f\u3051\u305f\u3044\u3067\u3057\u3087\u3046\u3002\n\u3053\u306e\u3088\u3046\u306a\u4e8b\u4f8b\u3092\u6271\u3046\u306b\u306f\u3001lateinit \u4fee\u98fe\u5b50\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30de\u30fc\u30af\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\uff1a\npublic class MyTest {\n    lateinit var subject: TestSubject\n\n    @SetUp fun setup() {\n        subject = TestSubject()\n    }\n\n    @Test fun test() {\n        subject.method()  // \u53c2\u7167\u5148\u3092\u76f4\u306b\u898b\u306b\u884c\u304f(dereference directly)\n    }\n}\n\n\u3053\u306e\u8b58\u5225\u5b50\u306f\u30af\u30e9\u30b9\u672c\u4f53\uff08\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306a\u3044\uff09\u306e\u4e2d\u3067\u5ba3\u8a00\u3055\u308c\u3001\u30ab\u30b9\u30bf\u30e0\u30b2\u30c3\u30bf\u30fc\u3084\u30ab\u30b9\u30bf\u30e0\u30bb\u30c3\u30bf\u30fc\u3092\u6301\u305f\u306a\u3044 var \u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u306e\u307f\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u578b\u304c\u975enull\u304b\u3064\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u3042\u3063\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\nlateinit \u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u521d\u671f\u5316\u3055\u308c\u308b\u524d\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5834\u5408\u3001\u30a2\u30af\u30bb\u30b9\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3001\u305d\u308c\u304c\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306e\u7279\u5225\u306a\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u307e\u3059\u3002\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\n\u30e1\u30f3\u30d0\u306e\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u59d4\u4efb\u30d7\u30ed\u30d1\u30c6\u30a3 (Delegated Properties)\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u3046\u3061\u6700\u3082\u4e00\u822c\u7684\u306a\u306e\u306f\u3001\u5358\u7d14\u306b\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\uff08\u307e\u305f\u306f\u66f8\u304d\u8fbc\u307f\u304b\u3082\u3057\u308c\u306a\u3044\uff09\u3067\u3059\u3002\n\u4e00\u65b9\u3001\u30ab\u30b9\u30bf\u30e0\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u3092\u4f7f\u3048\u3070\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u632f\u308b\u821e\u3044\u3092\u5982\u4f55\u69d8\u306b\u3082\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\u3044\u308d\u3093\u306a\u3068\u3053\u308d\u306b\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u52d5\u4f5c\u306b\u3064\u3044\u3066\u3001\u78ba\u7acb\u3055\u308c\u305f\u5171\u901a\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u3044\u304f\u3064\u304b\u306e\u4f8b\u3092\u6319\u3052\u307e\u3059\uff1a\u9045\u5ef6\u8a55\u4fa1\u5024\u3001\u4e0e\u3048\u3089\u308c\u305f\u30ad\u30fc\u3067\u306emap\u306e\u8aad\u307f\u8fbc\u307f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3001\u30a2\u30af\u30bb\u30b9\u3092\u30c8\u30ea\u30ac\u3068\u3059\u308b\u30ea\u30b9\u30ca\u3078\u306e\u901a\u77e5\u7b49\u3002\n\u3053\u306e\u3088\u3046\u306a\u4e00\u822c\u7684\u306a\u632f\u308b\u821e\u3044\u306f\u3001\u59d4\u8b72\u30d7\u30ed\u30d1\u30c6\u30a3 (delegated properties) \u3092\u4f7f\u3063\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\nKotlin\u3067\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u3001Java 8\u3068\u975e\u5e38\u306b\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\u3002\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u306e\u5ba3\u8a00\u3068\u540c\u69d8\u306b\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u62bd\u8c61\u30af\u30e9\u30b9\u3068\u9055\u3063\u3066\u3001\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u72b6\u614b\u3092\u6301\u3066\u307e\u305b\u3093\u3002\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u308c\u3089\u306f abstract \u3067\u3042\u308b\u3053\u3068\u3001\u307e\u305f\u306f\u30a2\u30af\u30bb\u30b5\u306e\u5b9f\u88c5\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u3001 interface{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\ninterface MyInterface {\n    fun bar()\n    fun foo() {\n      // \u672c\u4f53\u306f\u4efb\u610f\n    }\n}\n\n\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\n\u30af\u30e9\u30b9\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30011\u3064\u307e\u305f\u306f\u8907\u6570\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\nclass Child : MyInterface {\n   override fun bar() {\n      // \u672c\u4f53\n   }\n}\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u5185\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u5185\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u5ba3\u8a00\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001 abstract \u306b\u3059\u308b\u3053\u3068\u3082\u3001\u30a2\u30af\u30bb\u30b5\u306e\u5b9f\u88c5\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u5185\u3067\u5ba3\u8a00\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u3053\u3068\u306f\u3067\u304d\u305a\u3001\u305d\u308c\u6545\u306b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u5185\u3067\u5ba3\u8a00\u3055\u308c\u305f\u30a2\u30af\u30bb\u30b5\u306f\u305d\u308c\u3089\u3092\u53c2\u7167\u3067\u304d\u307e\u305b\u3093\u3002\ninterface MyInterface {\n    val property: Int // abstract\n\n    val propertyWithImplementation: String\n        get() = \"foo\"\n\n    fun foo() {\n        print(property)\n    }\n}\n\nclass Child : MyInterface {\n    override val property: Int = 29\n}\n\n\n\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u306e\u7af6\u5408\u89e3\u6c7a\n\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306e\u30ea\u30b9\u30c8\u3067\u305f\u304f\u3055\u3093\u306e\u578b\u3092\u5ba3\u8a00\u3059\u308b\u3068\u3001\u540c\u30e1\u30bd\u30c3\u30c9\u306e\u8907\u6570\u306e\u5b9f\u88c5\u3092\u7d99\u627f\u3059\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a\ninterface A {\n  fun foo() { print(\"A\") }\n  fun bar()\n}\n\ninterface B {\n  fun foo() { print(\"B\") }\n  fun bar() { print(\"bar\") }\n}\n\nclass C : A {\n  override fun bar() { print(\"bar\") }\n}\n\nclass D : A, B {\n  override fun foo() {\n    super<A>.foo()\n    super<B>.foo()\n  }\n}\n\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 A \u3068 B \u306f\u3001\u4e21\u65b9\u3068\u3082\u95a2\u6570 foo() \u3068 bar() \u3092\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\u4e21\u65b9\u3068\u3082 foo() \u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u304c\u3001 B \u306e\u307f\u304c bar() \u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\uff08 bar() \u306f A \u3067\u306f abstract \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u95a2\u6570\u304c\u672c\u4f53\u3092\u6301\u305f\u306a\u3044\u3068\u304d\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u304b\u3089\u3067\u3059\u3002\uff09 \n\u3055\u3066\u3001\u3082\u3057\u5177\u4f53\u30af\u30e9\u30b9 C \u3092 A \u304b\u3089\u5f97\u308c\u3070\u3001 bar() \u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3057\u3001\u5b9f\u88c5\u3092\u63d0\u4f9b\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306f\u660e\u3089\u304b\u3067\u3059\u3002\u305d\u3057\u3066\u3082\u3057 D \u3092 A \u3068 B \u304b\u3089\u5f97\u308c\u3070\u3001 bar() \u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u30891\u3064\u306e\u5b9f\u88c5\u3092\u7d99\u627f\u3057\u305f\u304b\u3089\u3067\u3059\u3002\n\u3057\u304b\u3057 foo() \u306e\u5b9f\u88c5\u30922\u3064\u7d99\u627f\u3057\u3066\u3057\u307e\u3063\u305f\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3069\u3063\u3061\u3092\u9078\u3093\u3060\u3089\u826f\u3044\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066 foo() \u306e\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u304c\u5f37\u5236\u3055\u308c\u3001\u4f55\u304c\u6b32\u3057\u3044\u306e\u304b\u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u53ef\u8996\u6027\u4fee\u98fe\u5b50\n\u30af\u30e9\u30b9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001\u95a2\u6570\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u305d\u306e\u30bb\u30c3\u30bf\u30fc\u306f\u3001\u53ef\u8996\u6027\u4fee\u98fe\u5b50 (visibility modifiers) \u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff08\u30b2\u30c3\u30bf\u30fc\u306f\u5e38\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u540c\u3058\u53ef\u8996\u6027\u3092\u6301\u3061\u307e\u3059\u3002\uff09Kotlin\u306b\u306f4\u3064\u306e\u53ef\u8996\u6027\u4fee\u98fe\u5b50\u304c\u3042\u308a\u307e\u3059\uff1a private , protected , internal , public \u3002\u660e\u793a\u7684\u306a\u4fee\u98fe\u5b50\u304c\u306a\u3044\u5834\u5408\u306b\u4f7f\u7528\u3055\u308c\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u53ef\u8996\u6027\u306f\u3001public \u3067\u3059\u3002\n\u5ba3\u8a00\u30b9\u30b3\u30fc\u30d7\u306e\u9055\u3044\u306f\u3001\u5f8c\u8ff0\u306e\u4f8b\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\n\u95a2\u6570\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3084\u30af\u30e9\u30b9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f\u3001\u300c\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u300d\u3001\u3064\u307e\u308a\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u5185\u90e8\u3067\u76f4\u63a5\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n// \u30d5\u30a1\u30a4\u30eb\u540d: example.kt\npackage foo\n\nfun baz() {}\nclass Bar {}\n\n\n\u53ef\u8996\u6027\u4fee\u98fe\u5b50\u3092\u4f55\u3082\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u5ba3\u8a00\u304c\u3069\u3053\u3067\u3082\u898b\u3048\u308b public \u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\nprivate \u3068\u3057\u3066\u5ba3\u8a00\u3059\u308b\u3068\u3001\u305d\u306e\u5ba3\u8a00\u3092\u542b\u3080\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u3067\u306e\u307f\u898b\u3048\u307e\u3059\n\ninternal \u3068\u3057\u3066\u5ba3\u8a00\u3059\u308b\u3068\u3001\u540c\u3058\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e\u3069\u3053\u304b\u3089\u3067\u3082\u898b\u3048\u307e\u3059\n\nprotected \u306f\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u5ba3\u8a00\u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\n\n\u4f8b\uff1a\n// \u30d5\u30a1\u30a4\u30eb\u540d: example.kt\npackage foo\n\nprivate fun foo() {} // example.kt \u306e\u4e2d\u3067\u898b\u3048\u308b\n\npublic var bar: Int = 5 // \u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3069\u3053\u3067\u3082\u898b\u3048\u308b\n    private set         // \u30bb\u30c3\u30bf\u30fc\u306f example.kt \u306e\u4e2d\u3067\u306e\u307f\u898b\u3048\u308b\n\ninternal val baz = 6    // \u540c\u3058\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u3067\u306e\u307f\u898b\u3048\u308b\n\n\n\u30af\u30e9\u30b9\u3068\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\n\u30af\u30e9\u30b9\u5185\u3067\u5ba3\u8a00\u3057\u305f\u5834\u5408\uff1a\n\n\nprivate \u306f\u305d\u306e\u30af\u30e9\u30b9\u5185\uff08\u305d\u306e\u3059\u3079\u3066\u306e\u30e1\u30f3\u30d0\u30fc\u3092\u542b\u3080\uff09\u3067\u306e\u307f\u898b\u3048\u308b\n\nprotected -- private \u3068\u540c\u3058 + \u30b5\u30d6\u30af\u30e9\u30b9\u5185\u3067\u3082\u898b\u3048\u307e\u3059\n\ninternal -- internal \u5ba3\u8a00\u3059\u308b\u30af\u30e9\u30b9\u3092\u898b\u308b \u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e \u4efb\u610f\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u305d\u306e internal \u30e1\u30f3\u30d0\u304c\u898b\u3048\u307e\u3059\n\npublic -- public \u5ba3\u8a00\u3059\u308b\u30af\u30e9\u30b9\u3092\u898b\u3066\u3044\u308b\u4efb\u610f\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u3001public \u306e\u30e1\u30f3\u30d0\u304c\u898b\u3048\u307e\u3059\n\n\u6ce8\u610f Java\u306e\u30e6\u30fc\u30b6\u30fc\u3078\uff1aKotlin\u3067\u306f\u3001\u5916\u90e8\u30af\u30e9\u30b9\u306f\u305d\u306e\u5185\u90e8\u30af\u30e9\u30b9\u306eprivate \u30e1\u30f3\u30d0\u304c\u898b\u3048\u307e\u305b\u3093\u3002\nprotected \u306e\u30e1\u30f3\u30d0\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u3001\u660e\u793a\u7684\u306b\u53ef\u8996\u6027\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u30e1\u30f3\u30d0\u3082\u3001protected \u306e\u53ef\u8996\u6027\u306b\u306a\u308a\u307e\u3059\u3002\n\u4f8b\uff1a\nopen class Outer {\n    private val a = 1\n    protected open val b = 2\n    internal val c = 3\n    val d = 4  // \u30c7\u30d5\u30a9\u30eb\u30c8\u3067 public\n\n    protected class Nested {\n        public val e: Int = 5\n    }\n}\n\nclass Subclass : Outer() {\n    // a \u306f\u898b\u3048\u306a\u3044\n    // b, c, d \u306f\u898b\u3048\u308b\n    // Nested \u3068 e \u306f\u898b\u3048\u308b\n\n    override val b = 5   // 'b' \u306f protected\n}\n\nclass Unrelated(o: Outer) {\n    // o.a, o.b \u306f\u898b\u3048\u306a\u3044\n    // o.c and o.d \u306f\u898b\u3048\u308b\uff08\u540c\u3058\u30e2\u30b8\u30e5\u30fc\u30eb\uff09\n    // Outer.Nested, Nested::e \u306f\u898b\u3048\u306a\u3044\n}\n\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\u30af\u30e9\u30b9\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u53ef\u8996\u6027\u3092\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u6b21\u306e\u69cb\u6587\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\uff08\u660e\u793a\u7684\u306b constructor{: .keyword }* \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4ed8\u52a0\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\uff09\uff1a\nclass C private constructor(a: Int) { ... }\n\n\u3053\u3053\u3067\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f private \u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u3059\u3079\u3066\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c public \u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u305d\u306e\u30af\u30e9\u30b9\u304c\u898b\u3048\u308b\u5834\u6240\u3067\u3042\u308c\u3070\u3069\u3053\u304b\u3089\u3067\u3082\u305d\u306e\u30af\u30e9\u30b9\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff08\u3059\u306a\u308f\u3061\u3001 internal \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001\u540c\u3058\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u3067\u306e\u307f\u898b\u3048\u307e\u3059\uff09\n\n\u30ed\u30fc\u30ab\u30eb\u5ba3\u8a00\n\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3001\u95a2\u6570\u3084\u30af\u30e9\u30b9\u306f\u3001\u53ef\u8996\u6027\u4fee\u98fe\u5b50\u3092\u6301\u3064\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\ninternal \u53ef\u8996\u6027\u4fee\u98fe\u5b50\u306b\u306f\u3001\u30e1\u30f3\u30d0\u304c\u540c\u3058\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u898b\u3048\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306fKotlin\u306e\u30d5\u30a1\u30a4\u30eb\u30bb\u30c3\u30c8\u3067\u3042\u308a\u3001\u4e00\u7dd2\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u307e\u3059\u3002\n\nIntelliJ IDEA\u30e2\u30b8\u30e5\u30fc\u30eb\nMaven\u3084Gradle\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n<kotlinc>Ant\u30bf\u30b9\u30af\u306e1\u56de\u306e\u547c\u3073\u51fa\u3057\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30bb\u30c3\u30c8\n\n\n\u62e1\u5f35 (extension)\nKotlin\u306f\u3001C#\u3084Gosu\u3068\u4f3c\u3066\u3044\u3066\u3001\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u308aDecorator\u306e\u3088\u3046\u306a\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3092\u4f7f\u7528\u305b\u305a\u3068\u3082\u3001\u30af\u30e9\u30b9\u3092\u65b0\u3057\u3044\u6a5f\u80fd\u3067\u62e1\u5f35\u3059\u308b\u80fd\u529b\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001 \u62e1\u5f35 \u3068\u547c\u3070\u308c\u308b\u7279\u5225\u306a\u5ba3\u8a00\u3092\u4ecb\u3057\u3066\u884c\u308f\u308c\u307e\u3059\u3002Kotlin\u306f\u3001 \u62e1\u5f35\u95a2\u6570 \u3068 \u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3 \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u62e1\u5f35\u95a2\u6570\n\u62e1\u5f35\u95a2\u6570\u3092\u5ba3\u8a00\u3059\u308b\u306b\u306f \u30ec\u30b7\u30fc\u30d0\u30bf\u30a4\u30d7 (receiver type) \u3092\u95a2\u6570\u540d\u306e\u524d\u306b\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u6b21\u306e\u4f8b\u3067\u306f\u3001 swap \u95a2\u6570\u3092 MutableList<Int> \u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\uff1a\nfun MutableList<Int>.swap(index1: Int, index2: Int) {\n  val tmp = this[index1] // 'this' \u304c\u30ea\u30b9\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\n  this[index1] = this[index2]\n  this[index2] = tmp\n}\n\n\u62e1\u5f35\u95a2\u6570\u5185\u3067\u306e this{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u3001\u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u30c9\u30c3\u30c8\u306e\u524d\u306b\u6e21\u3055\u308c\u305f\u3082\u306e\uff09\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u3001\u3053\u306e\u95a2\u6570\u3092\u4efb\u610f\u306e MutableList<Int> \u304b\u3089\u3067\u3082\u547c\u3079\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff1a\nval l = mutableListOf(1, 2, 3)\nl.swap(0, 2) // 'swap()' \u4e2d\u306e 'this' \u306f\u5024 '1' \u3092\u4fdd\u6301\u3059\u308b\n\n\u3082\u3061\u308d\u3093\u3001\u4efb\u610f\u306e MutableList<T> \u306b\u3064\u3044\u3066\u3053\u306e\u95a2\u6570\u306f\u7406\u306b\u304b\u306a\u3063\u3066\u304a\u308a\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306b\u3082\u3067\u304d\u307e\u3059\uff1a\nfun <T> MutableList<T>.swap(index1: Int, index2: Int) {\n  val tmp = this[index1] // 'this' \u306f\u30ea\u30b9\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\n  this[index1] = this[index2]\n  this[index2] = tmp\n}\n\n\u95a2\u6570\u540d\u306e\u524d\u3067\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5ba3\u8a00\u3059\u308b\u3068\u3001\u30ec\u30b7\u30fc\u30d0\u578b\u306e\u5f0f\u3067\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u62e1\u5f35\u306f \u9759\u7684 \u306b\u89e3\u6c7a\u3055\u308c\u308b\n\u62e1\u5f35\u6a5f\u80fd\u306f\u62e1\u5f35\u3057\u305f\u30af\u30e9\u30b9\u3092\u5b9f\u969b\u306b\u5909\u66f4\u3059\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u62e1\u5f35\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u30af\u30e9\u30b9\u306b\u65b0\u305f\u306a\u30e1\u30f3\u30d0\u3092\u633f\u5165\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u305d\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u304a\u3044\u3066\u3001\u305f\u3060\u5358\u306b\u305d\u306e\u65b0\u3057\u3044\u95a2\u6570\u3092\u305f\u3060\u30c9\u30c3\u30c8\u4ed8\u304d\u3067\u547c\u3079\u308b\u3088\u3046\u306b\u306a\u308b\u3060\u3051\u3067\u3059\u3002\n\u62e1\u5f35\u95a2\u6570\u306f \u9759\u7684\u306b \u51e6\u7406\u3055\u308c\u308b\u3001\u3064\u307e\u308a\u3001\u305d\u308c\u3089\u306f\u30ec\u30b7\u30fc\u30d0\u306e\u578b\u306b\u3088\u308b\u4eee\u306e\u5b58\u5728\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3092\u5f37\u8abf\u3057\u3066\u304a\u304d\u305f\u3044\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u3068\u304d\u306e\u5f0f\u306e\u578b\u306b\u3088\u3063\u3066\u3001\u547c\u3073\u51fa\u3055\u308c\u308b\u62e1\u5f35\u95a2\u6570\u304c\u6c7a\u5b9a\u3055\u308c\u308b\u306e\u3067\u3042\u3063\u3066\u3001\u5b9f\u884c\u6642\u306e\u5f0f\u306e\u8a55\u4fa1\u306b\u3088\u308b\u306e\u3067\u306f\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a\nopen class C\n\nclass D: C()\n\nfun C.foo() = \"c\"\n\nfun D.foo() = \"d\"\n\nfun printFoo(c: C) {\n    println(c.foo())\n}\n\nprintFoo(D())\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001 \"c\"\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u62e1\u5f35\u95a2\u6570\u306f C \u30af\u30e9\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf c \u306e\u5ba3\u8a00\u578b\u306b\u306e\u307f\u4f9d\u5b58\u3059\u308b\u305f\u3081\u3067\u3059\u3002\n\u3082\u3057\u3001\u3042\u308b\u30af\u30e9\u30b9\u304c\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3064\u3046\u3048\u3001\u3055\u3089\u306b\u3001\u540c\u3058\u30ec\u30b7\u30fc\u30d0\u578b\u3001\u540c\u3058\u540d\u524d\u3092\u6709\u3057\u3001\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u3092\u53d7\u5bb9\u53ef\u80fd\u306a\u62e1\u5f35\u95a2\u6570\u304c\u5ba3\u8a00\u3055\u308c\u308b\u3068\u3001 \u5e38\u306b\u30e1\u30f3\u30d0\u304c\u512a\u5148\u3055\u308c\u307e\u3059 \u3002\u4f8b\u3048\u3070\uff1a\nclass C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo() { println(\"extension\") }\n\nC \u578b\u306e\u4efb\u610f\u306e c \u304b\u3089 c.foo() \u3092\u547c\u3079\u3070\u3001\"extension\" \u3067\u306f\u306a\u304f\u3001 \"member\" \u3068\u8868\u793a\u3057\u307e\u3059\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u7570\u306a\u308b\u7f72\u540d\u3092\u6301\u3064\u304c\u540c\u540d\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u62e1\u5f35\u95a2\u6570\u304c\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u306f\u5168\u304f\u554f\u984c\u3042\u308a\u307e\u305b\u3093\uff1a\nclass C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo(i: Int) { println(\"extension\") }\n\nC().foo(1) \u306e\u547c\u3073\u51fa\u3057\u3067 \"extension\" \u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\nNull\u8a31\u5bb9\u30ec\u30b7\u30fc\u30d0\u30fc\n\u62e1\u5f35\u306f\u3001null\u8a31\u5bb9\u306a\u30ec\u30b7\u30fc\u30d0\u306e\u578b\u3067\u5b9a\u7fa9\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u3088\u3046\u306a\u62e1\u5f35\u306f\u3001\u305d\u306e\u5024\u304cnull\u306e\u5834\u5408\u3067\u3082\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5909\u6570\u3067\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u304b\u3064\u305d\u306e\u672c\u4f53\u5185\u3067 this == null \u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001null \u3092\u30c1\u30a7\u30c3\u30af\u305b\u305a\u306b Kotlin \u3067 toString() \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c1\u30a7\u30c3\u30af\u306f\u62e1\u5f35\u95a2\u6570\u5185\u3067\u884c\u308f\u308c\u307e\u3059\u3002\nfun Any?.toString(): String {\n    if (this == null) return \"null\"\n    // null\u30c1\u30a7\u30c3\u30af\u306e\u5f8c\u3060\u3068\u3001 'this' \u306f\u975enull\u578b\u306b\u81ea\u52d5\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\u306e\u3067\u3001\n    // \u4e0b\u8a18\u306e toString() \u306f Any \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3067\u3042\u308b\u3068\u89e3\u6c7a\u3055\u308c\u308b\n    return toString()\n}\n\n\n\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\n\u95a2\u6570\u3068\u540c\u69d8\u3001Kotlin\u306f\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\nval <T> List<T>.lastIndex: Int\n  get() = size - 1\n\n\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044\u306e\u306f\u3001\u62e1\u5f35\u6a5f\u80fd\u306f\u3001\u5b9f\u969b\u306b\u306f\u30af\u30e9\u30b9\u306b\u30e1\u30f3\u30d0\u3092\u633f\u5165\u3057\u306a\u3044\u306e\u3067\u3001\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u52b9\u7387\u7684\u306a\u65b9\u6cd5\u304c\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u304c \u521d\u671f\u5316\u5b50\u304c\u3001\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044 \u7406\u7531\u3067\u3059\u3002\u3053\u306e\u6319\u52d5\u306f\u3001\u660e\u793a\u7684\u306b\u30b2\u30c3\u30bf\u30fc/\u30bb\u30c3\u30bf\u30fc\u3092\u4f5c\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306e\u307f\u304c\u3067\u304d\u307e\u3059\u3002\n\u4f8b\uff1a\nval Foo.bar = 1 // \u30a8\u30e9\u30fc\uff1a\u521d\u671f\u5316\u5b50\u306f\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044\n\n\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u62e1\u5f35\u6a5f\u80fd\n\u30af\u30e9\u30b9\u306b\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u62e1\u5f35\u95a2\u6570\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nclass MyClass {\n  companion object { }  // \"Companion\" \u3068\u547c\u3070\u308c\u308b\n}\n\nfun MyClass.Companion.foo() {\n  // ...\n}\n\n\u3061\u3087\u3046\u3069\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u666e\u901a\u306e\u30e1\u30f3\u30d0\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u305d\u308c\u3089\u306f\u4fee\u98fe\u5b50\u3068\u3057\u3066\u30af\u30e9\u30b9\u540d\u306e\u307f\u3092\u4f7f\u7528\u3057\u3066\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nMyClass.foo()\n\n\n\u62e1\u5f35\u95a2\u6570\u306e\u30b9\u30b3\u30fc\u30d7\n\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3001\u3059\u306a\u308f\u3061\u30d1\u30c3\u30b1\u30fc\u30b8\u76f4\u4e0b\u306b\u62e1\u5f35\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff1a\n-->\npackage foo.bar\n\nfun Baz.goo() { ... } \n\n\u305d\u306e\u3088\u3046\u306a\u62e1\u5f35\u3092\u5ba3\u8a00\u3057\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u5916\u3067\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u305d\u308c\u3092\u547c\u3073\u51fa\u3057\u7b87\u6240\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a\npackage com.example.usage\n\nimport foo.bar.goo // \"goo\" \u3068\u3044\u3046\u540d\u524d\u3067\u5168\u3066\u306e\u62e1\u5f35\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\n                   // \u307e\u305f\u306f\nimport foo.bar.*   // \"foo.bar\" \u304b\u3089\u5168\u3066\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\n\nfun usage(baz: Baz) {\n  baz.goo()\n)\n\n\n\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30e1\u30f3\u30d0\u3068\u3057\u3066\u62e1\u5f35\u95a2\u6570\u3092\u5ba3\u8a00\n\u30af\u30e9\u30b9\u5185\u3067\u306f\u3001\u5225\u306e\u30af\u30e9\u30b9\u306e\u62e1\u5f35\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u62e1\u5f35\u306e\u4e2d\u306b\u306f\u3001\u8907\u6570\u306e \u6697\u9ed9\u7684\u306a\u30ec\u30b7\u30fc\u30d0\u304c\u3042\u308a\u307e\u3059\u3002\u4fee\u98fe\u5b50\u306a\u3057\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u3067\u3059\u3002\u62e1\u5f35\u304c\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f \u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ec\u30b7\u30fc\u30d0 (dispatch receiver) \u3068\u547c\u3070\u308c\u3001\u62e1\u5f35\u95a2\u6570\u306e\u30ec\u30b7\u30fc\u30d0\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f \u62e1\u5f35\u30ec\u30b7\u30fc\u30d0 \u3068\u547c\u3070\u308c\u307e\u3059\u3002\nclass D {\n    fun bar() { ... }\n}\n\nclass C {\n    fun baz() { ... }\n\n    fun D.foo() {\n        bar()   // D.bar \u3092\u547c\u3076\n        baz()   // C.baz \u3092\u547c\u3076\n    }\n\n    fun caller(d: D) {\n        d.foo()   // \u62e1\u5f35\u95a2\u6570\u3092\u547c\u3076\n    }\n}\n\n\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ec\u30b7\u30fc\u30d0\u306e\u30e1\u30f3\u30d0\u30fc\u3068\u62e1\u5f35\u30ec\u30b7\u30fc\u30d0\u306e\u540d\u524d\u304c\u885d\u7a81\u3059\u308b\u5834\u5408\u306b\u306f\u3001\u62e1\u5f35\u30ec\u30b7\u30fc\u30d0\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ec\u30b7\u30fc\u30d0\u306e\u30e1\u30f3\u30d0\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u3001\u4fee\u98fe\u5b50\u4ed8\u304d this \u306e\u69cb\u6587\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nclass C {\n    fun D.foo() {\n        toString()         // D.toString() \u3092\u547c\u3076\n        this@C.toString()  // C.toString() \u3092\u547c\u3076\n    }\n\n\u30e1\u30f3\u30d0\u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u305f\u62e1\u5f35\u95a2\u6570\u306f\u3001 open \u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3001\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u305d\u306e\u3088\u3046\u306a\u95a2\u6570\u306e\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u306f\u3001\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ec\u30b7\u30fc\u30d0\u578b\u306b\u95a2\u3057\u3066\u306f\u4eee\u60f3\u7684\u3067\u3042\u308b\u304c\u3001\u62e1\u5f35\u30ec\u30b7\u30fc\u30d0\u578b\u306b\u95a2\u3057\u3066\u306f\u9759\u7684\u3067\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3002\nopen class D {\n}\n\nclass D1 : D() {\n}\n\nopen class C {\n    open fun D.foo() {\n        println(\"D.foo in C\")\n    }\n\n    open fun D1.foo() {\n        println(\"D1.foo in C\")\n    }\n\n    fun caller(d: D) {\n        d.foo()   // \u62e1\u5f35\u95a2\u6570\u3092\u547c\u3076\n    }\n}\n\nclass C1 : C() {\n    override fun D.foo() {\n        println(\"D.foo in C1\")\n    }\n\n    override fun D1.foo() {\n        println(\"D1.foo in C1\")\n    }\n}\n\nC().caller(D())   // \u51fa\u529b\uff1a \"D.foo in C\"\nC1().caller(D())  // \u51fa\u529b\uff1a \"D.foo in C1\" - \u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ec\u30b7\u30fc\u30d0\u306f\u4eee\u60f3\u7684\u306b\u89e3\u6c7a\u3055\u308c\u308b\nC().caller(D1())  // \u51fa\u529b\uff1a \"D.foo in C\" - \u62e1\u5f35\u30ec\u30b7\u30fc\u30d0\u306f\u9759\u7684\u306b\u89e3\u6c7a\u3055\u308c\u308b\n\n\n\u52d5\u6a5f\nJava\u3067\u306f\u3001 \"*Utils\" \u3068\u3044\u3046\u540d\u524d\u306e\u30af\u30e9\u30b9\uff08 FileUtils \u3001 StringUtils \u306a\u3069\uff09\u3092\u3088\u304f\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u6709\u540d\u306a java.util.Collections \u306f\u3001\u540c\u3058\u54c1\u7a2e\u306b\u5c5e\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u3053\u308c\u3089\u306eUtils-\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u306e\u4e0d\u5feb\u306a\u90e8\u5206\u306f\u3001\u305d\u308c\u3089\u3092\u4f7f\u7528\u3059\u308b\u30b3\u30fc\u30c9\u304c\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3053\u3068\u3067\u3059\uff1a\n// Java\nCollections.swap(list, Collections.binarySearch(list, Collections.max(otherList)), Collections.max(list))\n\n\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u540d\u306f\u5e38\u306b\u90aa\u9b54\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002static \u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u3053\u308c\u3092\u3053\u3046\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n// Java\nswap(list, binarySearch(list, max(otherList)), max(list))\n\n\u3053\u308c\u306f\u5c11\u3057\u3060\u3051\u30de\u30b7\u3067\u3059\u304c\u3001IDE\u306e\u5f37\u529b\u306a\u30b3\u30fc\u30c9\u88dc\u5b8c\u306e\u52a9\u3051\u3092\u5168\u304f\u307e\u305f\u306f\u307b\u3093\u306e\u5c11\u3057\u3057\u304b\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\u6b21\u306e\u3088\u3046\u306b\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u306f\u3068\u3066\u3082\u826f\u3044\u3067\u3057\u3087\u3046\uff1a\n// Java\nlist.swap(list.binarySearch(otherList.max()), list.max())\n\n\u3067\u3082\u3001 List \u30af\u30e9\u30b9\u306e\u4e2d\u306b\u8003\u3048\u3089\u308c\u308b\u3059\u3079\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u305f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3088\u306d\uff1f\u3053\u306e\u3088\u3046\u306a\u3068\u304d\u306b\u62e1\u5f35\u304c\u79c1\u305f\u3061\u3092\u52a9\u3051\u3066\u304f\u308c\u307e\u3059\u3002\n\n\n\u203b\u6a29\u5229\u95a2\u4fc2\u306b\u3064\u3044\u3066\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e\u30aa\u30ea\u30b8\u30ca\u30eb\u3092\u4f5c\u3063\u305fJetBrain\u793e\u306fContributing to Kotlin\u3067\u3001\u300c\u3042\u306a\u305f\u306e\u8a00\u8a9e\u306b\u7ffb\u8a33\u3057\u3001Web\u30b5\u30a4\u30c8\u4e0a\u3067\u95b2\u89a7\u53ef\u80fd\u306b\u3059\u308b\u3053\u3068\u3092\u6b53\u8fce\u3059\u308b\u3002\u300d ( You are welcome to translate the Kotlin documentation into your own language and to publish your translation on your Web site. ) \u3068\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306fgithub\u4e0a\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u7ba1\u7406\u3055\u308c\u3066\u304a\u308a\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u793a\u304cApache License ver. 2.0\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5f93\u3063\u3066\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u305d\u308c\u306b\u306a\u3089\u3063\u3066\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u3092Apache License ver. 2.0\u3068\u3057\u307e\u3059\u3002\n\u7686\u3055\u3093\u3053\u3093\u306b\u3061\u306f\u3002\u30c9\u30ef\u30f3\u30b4\u65b0\u53521\u5e74\u76ee\u306edogwood008\u3068\u7533\u3057\u307e\u3059\u3002\u696d\u52d9\u3067Android\u30a2\u30d7\u30ea\u306e\u4f5c\u6210\u306b\u643a\u308f\u308b\u3053\u3068\u304c\u3042\u308a\u3001\u305d\u306e\u969b\u306bKotlin\u306b\u521d\u3081\u3066\u89e6\u308c\u3001\u305d\u306e\u53ef\u80fd\u6027\u306b\u60f9\u304b\u308c\u3066Kotlin\u3092\u597d\u304d\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u305d\u3053\u3067\u3001\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u65e5\u672c\u8a9e\u5316\u3057\u3066\u307f\u307e\u3057\u305f\u3002Kotlin\u304c\u3069\u3093\u306a\u3082\u306e\u306a\u306e\u304b\u3001\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\uff08\u3061\u3087\u3063\u3068\u9577\u3044\u306e\u3067\u5206\u3051\u3066\u6295\u7a3f\u3057\u307e\u3059\uff08[Kotlin\u306e\u516c\u5f0f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u65e5\u672c\u8a9e\u5316\u3057\u3066\u307f\u305f[\u5f8c\u7de8]](http://qiita.com/dogwood008/items/f4ceabd0b0d801fb3a9f)\uff09\u3002\u307e\u305f\u7ffb\u8a33\u306b\u7740\u624b\u4e2d\u306e\u30da\u30fc\u30b8\u3082\u3042\u308b\u306e\u3067\u3001\u307e\u3060\u82f1\u8a9e\u306e\u30da\u30fc\u30b8\u3082\u3042\u308a\u307e\u3059\uff09\u3002\n\n**[\u65e5\u672c\u8a9e\u7248Kotlin\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](http://dogwood008.github.io/kotlin-web-site-ja/)**\n\n\u57fa\u672c\u7684\u306b\u306f\u4e0a\u8a18\u30da\u30fc\u30b8\u306e\u5185\u5bb9\u3068\u3001\u672c\u30da\u30fc\u30b8\u306e\u5185\u5bb9\u306f\u540c\u3058\u3067\u3059\u3002\u500b\u5225\u306e\u30da\u30fc\u30b8\u3067\u898b\u305f\u3044\u4eba\u7528\u3068\u3001\u4e00\u89a7\u3067\u898b\u305f\u3044\u4eba\u7528\u3067\u3059\u3002\n\n\u4ed6\u306b\u3082\u3001\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u7b49\u3067Kotlin\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u53c2\u8003\u306b\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n- [\u4eca\u304b\u3089Kotlin](http://qiita.com/koki_cheese/items/bc68a4c765cd1f00c0d9)\n- [Android\u958b\u767a\u3092\u53d7\u6ce8\u3057\u305f\u304b\u3089Kotlin\u3092\u30ac\u30c3\u30c4\u30ea\u4f7f\u3063\u3066\u307f\u305f\u3089\u6700\u9ad8\u3060\u3063\u305f](http://qiita.com/omochimetaru/items/98e015b0b694dd97f323)\n- [\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9eKotlin \u89e3\u8aac](https://sites.google.com/site/tarokotlin/home)\n\n\u203b2016/12/14\u8ffd\u8a18\n\u6587\u4f53\u3092\u3067\u3059\u307e\u3059\u8abf\u306b\u5909\u66f4\u3057\u3001\u5168\u3066\u306e\u7ffb\u8a33\u3092\u898b\u76f4\u3057\u307e\u3057\u305f\u3002\n\n---\n\n# \u57fa\u672c\u7684\u306a\u69cb\u6587\n\n<!--original\n# Basic Syntax\n-->\n\n## \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u5b9a\u7fa9\n\n<!--original\n## Defining packages\n-->\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u8a18\u8ff0\u306f\u3001\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u7f6e\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n<!--original\nPackage specification should be at the top of the source file:\n-->\n\n``` kotlin\npackage my.demo\n\nimport java.util.*\n\n// ...\n```\n\n<!--original\n``` kotlin\npackage my.demo\n\nimport java.util.*\n\n// ...\n```\n-->\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3068\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u4e00\u81f4\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5185\u306e\u4efb\u610f\u306e\u5834\u6240\u306b\u914d\u7f6e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nIt is not required to match directories and packages: source files can be placed arbitrarily in the file system.\n-->\n\n[\u30d1\u30c3\u30b1\u30fc\u30b8](packages.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [Packages](packages.html).\n-->\n\n## \u95a2\u6570\u306e\u5b9a\u7fa9\n\n<!--original\n## Defining functions\n-->\n\n2\u3064\u306e`Int`\u578b\u306e\u5f15\u6570\u3092\u6301\u3061\u3001`Int`\u578b\u3092\u623b\u308a\u5024\u3068\u3059\u308b\u95a2\u6570\uff1a\n\n<!--original\nFunction having two `Int` parameters with `Int` return type:\n-->\n\n``` kotlin\nfun sum(a: Int, b: Int): Int {\n  return a + b\n}\n```\n\n<!--original\n``` kotlin\nfun sum(a: Int, b: Int): Int {\n  return a + b\n}\n```\n-->\n\n\u5f0f\u672c\u4f53\u3068\u63a8\u8ad6\u3055\u308c\u305f\u623b\u308a\u5024\u306e\u578b\u3092\u6301\u3064\u95a2\u6570\uff1a\n\n<!--original\nFunction with an expression body and inferred return type:\n-->\n\n``` kotlin\nfun sum(a: Int, b: Int) = a + b\n```\n\n<!--original\n``` kotlin\nfun sum(a: Int, b: Int) = a + b\n```\n-->\n\n\u610f\u5473\u306e\u3042\u308b\u5024\u3092\u8fd4\u3055\u306a\u3044\u95a2\u6570\uff1a\n\n<!--original\nFunction returning no meaningful value:\n-->\n\n``` kotlin\nfun printSum(a: Int, b: Int): Unit {\n  print(a + b)\n}\n```\n\n<!--original\n``` kotlin\nfun printSum(a: Int, b: Int): Unit {\n  print(a + b)\n}\n```\n-->\n\n`Unit`\u578b\u306e\u623b\u308a\u5024\u306f\u7701\u7565\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\n`Unit` return type can be omitted:\n-->\n\n``` kotlin\nfun printSum(a: Int, b: Int) {\n  print(a + b)\n}\n```\n\n<!--original\n``` kotlin\nfun printSum(a: Int, b: Int) {\n  print(a + b)\n}\n```\n-->\n\n[\u95a2\u6570](functions.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [Functions](functions.html).\n-->\n\n## \u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306e\u5b9a\u7fa9\n\n<!--original\n## Defining local variables\n-->\n\n1\u5ea6\u3060\u3051\u4ee3\u5165\u3067\u304d\u308b\uff08\u8aad\u307f\u53d6\u308a\u5c02\u7528\uff09\u30ed\u30fc\u30ab\u30eb\u5909\u6570\uff1a\n\n<!--original\nAssign-once (read-only) local variable:\n-->\n\n``` kotlin\nval a: Int = 1\nval b = 1   // `Int`\u578b\u304c\u63a8\u8ad6\u3055\u308c\u308b\nval c: Int  // \u521d\u671f\u5024\u304c\u4e0e\u3048\u3089\u308c\u306a\u3044\u5834\u5408\u3001\u578b\u6307\u5b9a\u304c\u5fc5\u8981\nc = 1       // \u660e\u78ba\u306a\u4ee3\u5165\n```\n\n<!--original\n``` kotlin\nval a: Int = 1\nval b = 1   // `Int` type is inferred\nval c: Int  // Type required when no initializer is provided\nc = 1       // definite assignment\n```\n-->\n\n\u5909\u66f4\u53ef\u80fd (Mutable) \u306a\u5909\u6570\uff1a\n\n<!--original\nMutable variable:\n-->\n\n``` kotlin\nvar x = 5 // `Int`\u578b\u304c\u63a8\u8ad6\u3055\u308c\u308b\nx += 1\n```\n\n<!--original\n``` kotlin\nvar x = 5 // `Int` type is inferred\nx += 1\n```\n-->\n\n[\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u30d5\u30a3\u30fc\u30eb\u30c9](properties.html)\u3082\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee also [Properties And Fields](properties.html).\n-->\n\n\n## \u30b3\u30e1\u30f3\u30c8\n\n<!--original\n## Comments\n-->\n\nJava\u3068JavaScript\u306e\u3088\u3046\u306b\u3001Kotlin\u306f\u884c\u672b\u30b3\u30e1\u30f3\u30c8\u3068\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nJust like Java and JavaScript, Kotlin supports end-of-line and block comments.\n-->\n\n``` kotlin\n// \u3053\u308c\u306f\u884c\u672b\u30b3\u30e1\u30f3\u30c8\u3067\u3059\n\n/* \u3053\u308c\u306f\u8907\u6570\u884c\u306b\u308f\u305f\u308b\n   \u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002 */\n```\n\n<!--original\n``` kotlin\n// This is an end-of-line comment\n\n/* This is a block comment\n   on multiple lines. */\n```\n-->\n\nJava\u3068\u306f\u7570\u306a\u308a\u3001Kotlin\u306e\u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\u306f\u5165\u308c\u5b50\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nUnlike Java, block comments in Kotlin can be nested.\n-->\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30b3\u30e1\u30f3\u30c8\u306e\u69cb\u6587\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001[Kotlin\u30b3\u30fc\u30c9\u306e\u6587\u7ae0\u5316](kotlin-doc.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [Documenting Kotlin Code](kotlin-doc.html) for information on the documentation comment syntax.\n-->\n\n## \u6587\u5b57\u5217\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4f7f\u7528\n\n<!--original\n## Using string templates\n-->\n\n``` kotlin\nfun main(args: Array<String>) {\n  if (args.size == 0) return\n\n  print(\"First argument: ${args[0]}\")\n}\n```\n\n<!--original\n``` kotlin\nfun main(args: Array<String>) {\n  if (args.size == 0) return\n\n  print(\"First argument: ${args[0]}\")\n}\n```\n-->\n\n[\u6587\u5b57\u5217\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8](basic-types.html#string-templates)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [String templates](basic-types.html#string-templates).\n-->\n\n## \u6761\u4ef6\u5f0f\u306e\u4f7f\u7528\n\n<!--original\n## Using conditional expressions\n-->\n\n``` kotlin\nfun max(a: Int, b: Int): Int {\n  if (a > b)\n    return a\n  else\n    return b\n}\n```\n\n<!--original\n``` kotlin\nfun max(a: Int, b: Int): Int {\n  if (a > b)\n    return a\n  else\n    return b\n}\n```\n-->\n\n*if*{: .keyword }\u3092\u5f0f\u3068\u3057\u3066\u4f7f\u7528\uff1a\n\n<!--original\nUsing *if*{: .keyword } as an expression:\n-->\n\n``` kotlin\nfun max(a: Int, b: Int) = if (a > b) a else b\n```\n\n<!--original\n``` kotlin\nfun max(a: Int, b: Int) = if (a > b) a else b\n```\n-->\n\n[*if*{: .keyword }\u5f0f](control-flow.html#if-expression)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [*if*{: .keyword }-expressions](control-flow.html#if-expression).\n-->\n\n## NULL\u53ef\u80fd\u5024\u3092\u4f7f\u7528\u3057\u305f\u3001*null*{: .keyword }\u306e\u30c1\u30a7\u30c3\u30af\n\n<!--original\n## Using nullable values and checking for *null*{: .keyword }\n-->\n\n*null*{: .keyword }\u5024\u3092\u53d6\u308a\u5f97\u308b\u5834\u5408\u3001\u53c2\u7167\u306f\u660e\u793a\u7684\u306bnull\u3068\u3057\u3066\u30de\u30fc\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nA reference must be explicitly marked as nullable when *null*{: .keyword } value is possible.\n-->\n\n`str`\u306f\u6574\u6570\u3092\u4fdd\u6301\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f*null*{: .keyword }\u3092\u8fd4\u3057\u307e\u3059\uff1a\n\n<!--original\nReturn *null*{: .keyword } if `str` does not hold an integer:\n-->\n\n``` kotlin\nfun parseInt(str: String): Int? {\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nfun parseInt(str: String): Int? {\n  // ...\n}\n```\n-->\n\nnull\u53ef\u80fd\u5024\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f7f\u7528\uff1a\n\n<!--original\nUse a function returning nullable value:\n-->\n\n``` kotlin\nfun main(args: Array<String>) {\n  if (args.size < 2) {\n    print(\"Two integers expected\")\n    return\n  }\n\n  val x = parseInt(args[0])\n  val y = parseInt(args[1])\n\n  // `x`, `y`\u306fnull\u304c\u5165\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3001`x * y`\u306f\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059\n  if (x != null && y != null) {\n    // x\u3068y\u306f\u3001null\u30c1\u30a7\u30c3\u30af\u306e\u5f8c\u81ea\u52d5\u7684\u306b\u975enull\u8a31\u5bb9\u578b\u3078\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\n    print(x * y)\n  }\n}\n```\n\n<!--original\n``` kotlin\nfun main(args: Array<String>) {\n  if (args.size < 2) {\n    print(\"Two integers expected\")\n    return\n  }\n\n  val x = parseInt(args[0])\n  val y = parseInt(args[1])\n\n  // Using `x * y` yields error because they may hold nulls.\n  if (x != null && y != null) {\n    // x and y are automatically cast to non-nullable after null check\n    print(x * y)\n  }\n}\n```\n-->\n\n\u307e\u305f\u306f\n\n<!--original\nor\n-->\n\n``` kotlin\n  // ...\n  if (x == null) {\n    print(\"Wrong number format in '${args[0]}'\")\n    return\n  }\n  if (y == null) {\n    print(\"Wrong number format in '${args[1]}'\")\n    return\n  }\n\n  // x and y are automatically cast to non-nullable after null check\n  print(x * y)\n```\n\n<!--original\n``` kotlin\n  // ...\n  if (x == null) {\n    print(\"Wrong number format in '${args[0]}'\")\n    return\n  }\n  if (y == null) {\n    print(\"Wrong number format in '${args[1]}'\")\n    return\n  }\n\n  // x and y are automatically cast to non-nullable after null check\n  print(x * y)\n```\n-->\n\n[null\u5b89\u5168](null-safety.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [Null-safety](null-safety.html).\n-->\n\n## \u578b\u30c1\u30a7\u30c3\u30af\u3068\u81ea\u52d5\u30ad\u30e3\u30b9\u30c8\u306e\u4f7f\u7528\n\n<!--original\n## Using type checks and automatic casts\n-->\n\n*is*{: .keyword }\u6f14\u7b97\u5b50\u306f\u3042\u308b\u5f0f\u304c\u3042\u308b\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3042\u308b\u304b\u306e\u30c1\u30a7\u30c3\u30af\u3092\u884c\u3044\u307e\u3059\u3002\n\u4e0d\u5909\u306e\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u7279\u5b9a\u306e\u578b\u3067\u3042\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u660e\u793a\u7684\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff1a\n\n<!--original\nThe *is*{: .keyword } operator checks if an expression is an instance of a type.\nIf an immutable local variable or property is checked for a specific type, there's no need to cast it explicitly:\n-->\n\n``` kotlin\nfun getStringLength(obj: Any): Int? {\n  if (obj is String) {\n    // `obj` \u306f\u3053\u306e\u30d6\u30e9\u30f3\u30c1\u5185\u3067\u306f\u81ea\u52d5\u7684\u306b`String`\u3078\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\n    return obj.length\n  }\n\n  // `obj` \u306f\u578b\u30c1\u30a7\u30c3\u30af\u304c\u884c\u308f\u308c\u305f\u30d6\u30e9\u30f3\u30c1\u5916\u3067\u306f\u3001\u307e\u3060`Any`\u578b\u3067\u3042\u308b\n  return null\n}\n```\n\n<!--original\n``` kotlin\nfun getStringLength(obj: Any): Int? {\n  if (obj is String) {\n    // `obj` is automatically cast to `String` in this branch\n    return obj.length\n  }\n\n  // `obj` is still of type `Any` outside of the type-checked branch\n  return null\n}\n```\n-->\n\n\u307e\u305f\u306f\n\n<!--original\nor\n-->\n\n``` kotlin\nfun getStringLength(obj: Any): Int? {\n  if (obj !is String)\n    return null\n\n  // `obj` \u306f\u3053\u306e\u30d6\u30e9\u30f3\u30c1\u5185\u3067\u306f\u81ea\u52d5\u7684\u306b`String`\u3078\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\n  return obj.length\n}\n```\n\n<!--original\n``` kotlin\nfun getStringLength(obj: Any): Int? {\n  if (obj !is String)\n    return null\n\n  // `obj` is automatically cast to `String` in this branch\n  return obj.length\n}\n```\n-->\n\n\u3042\u308b\u3044\u306f\n\n<!--original\nor even\n-->\n\n``` kotlin\nfun getStringLength(obj: Any): Int? {\n  // `obj` \u306f`&&`\u306e\u53f3\u5074\u3067\u306f\u81ea\u52d5\u7684\u306b`String`\u3078\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\n  if (obj is String && obj.length > 0)\n    return obj.length\n\n  return null\n}\n```\n\n<!--original\n``` kotlin\nfun getStringLength(obj: Any): Int? {\n  // `obj` is automatically cast to `String` on the right-hand side of `&&`\n  if (obj is String && obj.length > 0)\n    return obj.length\n\n  return null\n}\n```\n-->\n\n[\u30af\u30e9\u30b9](classes.html)\u3068[\u578b\u306e\u30ad\u30e3\u30b9\u30c8](typecasts.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [Classes](classes.html) and [Type casts](typecasts.html).\n-->\n\n## `for`\u30eb\u30fc\u30d7\u306e\u4f7f\u7528\n\n<!--original\n## Using a `for` loop\n-->\n\n``` kotlin\nfun main(args: Array<String>) {\n  for (arg in args)\n    print(arg)\n}\n```\n\n<!--original\n``` kotlin\nfun main(args: Array<String>) {\n  for (arg in args)\n    print(arg)\n}\n```\n-->\n\n\u307e\u305f\u306f\n\n<!--original\nor\n-->\n\n``` kotlin\nfor (i in args.indices)\n  print(args[i])\n```\n\n<!--original\n``` kotlin\nfor (i in args.indices)\n  print(args[i])\n```\n-->\n\n[for\u30eb\u30fc\u30d7](control-flow.html#for-loops)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [for loop](control-flow.html#for-loops).\n-->\n\n## `while`\u30eb\u30fc\u30d7\u306e\u4f7f\u7528\n\n<!--original\n## Using a `while` loop\n-->\n\n``` kotlin\nfun main(args: Array<String>) {\n  var i = 0\n  while (i < args.size)\n    print(args[i++])\n}\n```\n\n<!--original\n``` kotlin\nfun main(args: Array<String>) {\n  var i = 0\n  while (i < args.size)\n    print(args[i++])\n}\n```\n-->\n\n[while\u30eb\u30fc\u30d7](control-flow.html#while-loops)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [while loop](control-flow.html#while-loops).\n-->\n\n## `when`\u5f0f\u306e\u4f7f\u7528\n\n<!--original\n## Using `when` expression\n-->\n\n``` kotlin\nfun cases(obj: Any) {\n  when (obj) {\n    1          -> print(\"One\")\n    \"Hello\"    -> print(\"Greeting\")\n    is Long    -> print(\"Long\")\n    !is String -> print(\"Not a string\")\n    else       -> print(\"Unknown\")\n  }\n}\n```\n\n<!--original\n``` kotlin\nfun cases(obj: Any) {\n  when (obj) {\n    1          -> print(\"One\")\n    \"Hello\"    -> print(\"Greeting\")\n    is Long    -> print(\"Long\")\n    !is String -> print(\"Not a string\")\n    else       -> print(\"Unknown\")\n  }\n}\n```\n-->\n\n[when\u5f0f](control-flow.html#when-expression)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [when expression](control-flow.html#when-expression).\n-->\n\n## \u7bc4\u56f2\u306e\u4f7f\u7528\n\n<!--original\n## Using ranges\n-->\n\n*in*{: .keyword }\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u6570\u304c\u7bc4\u56f2\u5185\u306b\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nCheck if a number is within a range using *in*{: .keyword } operator:\n-->\n\n``` kotlin\nif (x in 1..y-1)\n  print(\"OK\")\n```\n\n<!--original\n``` kotlin\nif (x in 1..y-1)\n  print(\"OK\")\n```\n-->\n\n\u6570\u304c\u7bc4\u56f2\u5916\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\uff1a\n\n<!--original\nCheck if a number is out of range:\n-->\n\n``` kotlin\nif (x !in 0..array.lastIndex)\n  print(\"Out\")\n```\n\n<!--original\n``` kotlin\nif (x !in 0..array.lastIndex)\n  print(\"Out\")\n```\n-->\n\n\u7bc4\u56f2\u5185\u3067\u53cd\u5fa9\u51e6\u7406\uff1a\n\n<!--original\nIterating over a range:\n-->\n\n``` kotlin\nfor (x in 1..5)\n  print(x)\n```\n\n<!--original\n``` kotlin\nfor (x in 1..5)\n  print(x)\n```\n-->\n\n[\u7bc4\u56f2](ranges.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [Ranges](ranges.html).\n-->\n\n## \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f7f\u7528\n\n<!--original\n## Using collections\n-->\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u5185\u3067\u53cd\u5fa9\u51e6\u7406\uff1a\n\n<!--original\nIterating over a collection:\n-->\n\n``` kotlin\nfor (name in names)\n  println(name)\n```\n\n<!--original\n``` kotlin\nfor (name in names)\n  println(name)\n```\n-->\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u542b\u3080\u304b\u3092*in*{: .keyword }\u6f14\u7b97\u5b50\u3067\u8abf\u3079\u308b\uff1a\n\n<!--original\nChecking if a collection contains an object using *in*{: .keyword } operator:\n-->\n\n``` kotlin\nif (text in names) // names.contains(text) \u304c\u547c\u3070\u308c\u308b\n  print(\"Yes\")\n```\n\n<!--original\n``` kotlin\nif (text in names) // names.contains(text) is called\n  print(\"Yes\")\n```\n-->\n\n\u30d5\u30a3\u30eb\u30bf\u3084\u30de\u30c3\u30d7\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u30e9\u30e0\u30c0\u5f0f\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a\n\n<!--original\nUsing lambda expressions to filter and map collections:\n-->\n\n``` kotlin\nnames\n    .filter { it.startsWith(\"A\") }\n    .sortedBy { it }\n    .map { it.toUpperCase() }\n    .forEach { print(it) }\n```\n\n<!--original\n``` kotlin\nnames\n    .filter { it.startsWith(\"A\") }\n    .sortedBy { it }\n    .map { it.toUpperCase() }\n    .forEach { print(it) }\n```\n-->\n\n[\u9ad8\u968e\u95a2\u6570\u3068\u30e9\u30e0\u30c0](lambdas.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [Higher-order functions and Lambdas](lambdas.html).\n-->\n\n# \u30a4\u30c7\u30a3\u30aa\u30e0\n\n<!--original\n# Idioms\n-->\n\nKotlin\u3067\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b\u30a4\u30c7\u30a3\u30aa\u30e0\u3092\u96c6\u3081\u307e\u3057\u305f\u3002\u3082\u3057\u597d\u307f\u306e\u30a4\u30c7\u30a3\u30aa\u30e0\u304c\u3042\u308c\u3070\u3001\u30d7\u30eb\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u6295\u3052\u3066\u8ca2\u732e\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nA collection of random and frequently used idioms in Kotlin. If you have a favorite idiom, contribute it. Do a pull request.\n-->\n\nDTO\u306e\u4f5c\u6210\uff08POJO/ POCO\uff09\n\n<!--original\n### Creating DTO's (POJO's/POCO's)\n-->\n\n``` kotlin\ndata class Customer(val name: String, val email: String)\n```\n\n<!--original\n``` kotlin\ndata class Customer(val name: String, val email: String)\n```\n-->\n\n`Customer`\u30af\u30e9\u30b9\u306f\u6b21\u306e\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff1a\n\n<!--original\nprovides a `Customer` class with the following functionality:\n-->\n\n* \u5168\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30b2\u30c3\u30bf\u30fc\uff08\u3068*var*{: .keyword }\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u4f7f\u7528\u3055\u308c\u305f\u3068\u304d\u306f\u30bb\u30c3\u30bf\u30fc\u3082\uff09\n* `equals()`\n* `hashCode()`\n* `toString()`\n* `copy()`\n* \u3059\u3079\u3066\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5bfe\u3057\u3066\u3001`component1()`, `component2()`, \u2026, \uff08[Data classes](data-classes.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\n\u95a2\u6570\u306e\u5f15\u6570\u306b\u5bfe\u3059\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n\n<!--original\n* getters (and setters in case of *var*{: .keyword }'s) for all properties\n* `equals()`\n* `hashCode()`\n* `toString()`\n* `copy()`\n* `component1()`, `component2()`, ..., for all properties (see [Data classes](data-classes.html))\n-->\n\n### \u95a2\u6570\u306e\u5f15\u6570\u306b\u5bfe\u3059\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n\n<!--original\n### Default values for function parameters\n-->\n\n``` kotlin\nfun foo(a: Int = 0, b: String = \"\") { ... }\n```\n\n<!--original\n``` kotlin\nfun foo(a: Int = 0, b: String = \"\") { ... }\n```\n-->\n\n### \u30ea\u30b9\u30c8\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n\n<!--original\n### Filtering a list\n-->\n\n``` kotlin\nval positives = list.filter { x -> x > 0 }\n```\n\n<!--original\n``` kotlin\nval positives = list.filter { x -> x > 0 }\n```\n-->\n\n\u307e\u305f\u306f\u3001\u3053\u3046\u77ed\u304f\u3082\u66f8\u3051\u307e\u3059\uff1a\n\n<!--original\nOr alternatively, even shorter:\n-->\n\n``` kotlin\nval positives = list.filter { it > 0 }\n```\n\n<!--original\n``` kotlin\nval positives = list.filter { it > 0 }\n```\n-->\n\n### \u6587\u5b57\u5217\u88dc\u5b8c\n\n<!--original\n### String Interpolation\n-->\n\n``` kotlin\nprintln(\"Name $name\")\n```\n\n<!--original\n``` kotlin\nprintln(\"Name $name\")\n```\n-->\n\n### \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30c1\u30a7\u30c3\u30af\n\n<!--original\n### Instance Checks\n-->\n\n``` kotlin\nwhen (x) {\n    is Foo -> ...\n    is Bar -> ...\n    else   -> ...\n}\n```\n\n<!--original\n``` kotlin\nwhen (x) {\n    is Foo -> ...\n    is Bar -> ...\n    else   -> ...\n}\n```\n-->\n\n### map\u3084list\u306e\u30da\u30a2\u3092\u66f8\u304d\u4e0b\u3059\n\n<!--original\n### Traversing a map/list of pairs\n-->\n\n``` kotlin\nfor ((k, v) in map) {\n    println(\"$k -> $v\")\n}\n```\n\n<!--original\n``` kotlin\nfor ((k, v) in map) {\n    println(\"$k -> $v\")\n}\n```\n-->\n\n`k`, `v`\u306f\u4f55\u304b\u3089\u3067\u3082\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\n`k`, `v` can be called anything.\n-->\n\n### \u7bc4\u56f2\u306e\u4f7f\u7528\n\n<!--original\n### Using ranges\n-->\n\n``` kotlin\nfor (i in 1..100) { ... }\nfor (x in 2..10) { ... }\n```\n\n<!--original\n``` kotlin\nfor (i in 1..100) { ... }\nfor (x in 2..10) { ... }\n```\n-->\n\n### \u8aad\u307f\u53d6\u308a\u5c02\u7528list\n\n<!--original\n### Read-only list\n-->\n\n``` kotlin\nval list = listOf(\"a\", \"b\", \"c\")\n```\n\n<!--original\n``` kotlin\nval list = listOf(\"a\", \"b\", \"c\")\n```\n-->\n\n### \u8aad\u307f\u53d6\u308a\u5c02\u7528map\n\n<!--original\n### Read-only map\n-->\n\n``` kotlin\nval map = mapOf(\"a\" to 1, \"b\" to 2, \"c\" to 3)\n```\n\n<!--original\n``` kotlin\nval map = mapOf(\"a\" to 1, \"b\" to 2, \"c\" to 3)\n```\n-->\n\n### map\u3078\u306e\u30a2\u30af\u30bb\u30b9\n\n<!--original\n### Accessing a map\n-->\n\n``` kotlin\nprintln(map[\"key\"])\nmap[\"key\"] = value\n```\n\n<!--original\n``` kotlin\nprintln(map[\"key\"])\nmap[\"key\"] = value\n```\n-->\n\n### \u9045\u5ef6\u8a55\u4fa1\u30d7\u30ed\u30d1\u30c6\u30a3\n\n<!--original\n### Lazy property\n-->\n\n``` kotlin\nval p: String by lazy {\n    // \u6587\u5b57\u5217\u3092\u8a55\u4fa1\n}\n```\n\n<!--original\n``` kotlin\nval p: String by lazy {\n    // compute the string\n}\n```\n-->\n\n### \u62e1\u5f35\u95a2\u6570\n\n<!--original\n### Extension Functions\n-->\n\n``` kotlin\nfun String.spaceToCamelCase() { ... }\n\n\"Convert this to camelcase\".spaceToCamelCase()\n```\n\n<!--original\n``` kotlin\nfun String.spaceToCamelCase() { ... }\n\n\"Convert this to camelcase\".spaceToCamelCase()\n```\n-->\n\n### \u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u306e\u4f5c\u6210\n\n<!--original\n### Creating a singleton\n-->\n\n``` kotlin\nobject Resource {\n    val name = \"Name\"\n}\n```\n\n<!--original\n``` kotlin\nobject Resource {\n    val name = \"Name\"\n}\n```\n-->\n\n### if not null\u306e\u7701\u7565\u8a18\u6cd5\n\n<!--original\n### If not null shorthand\n-->\n\n``` kotlin\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size)\n```\n\n<!--original\n``` kotlin\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size)\n```\n-->\n\n### if not null and else\u306e\u7701\u7565\u8a18\u6cd5\n\n<!--original\n### If not null and else shorthand\n-->\n\n``` kotlin\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size ?: \"empty\")\n```\n\n<!--original\n``` kotlin\nval files = File(\"Test\").listFiles()\n\nprintln(files?.size ?: \"empty\")\n```\n-->\n\n### if null\u6587\u306e\u5b9f\u884c\n\n<!--original\n### Executing a statement if null\n-->\n\n``` kotlin\nval data = ...\nval email = data[\"email\"] ?: throw IllegalStateException(\"Email is missing!\")\n```\n\n<!--original\n``` kotlin\nval data = ...\nval email = data[\"email\"] ?: throw IllegalStateException(\"Email is missing!\")\n```\n-->\n\n### if not null\u6587\u306e\u5b9f\u884c\n\n<!--original\n### Execute if not null\n-->\n\n``` kotlin\nval data = ...\n\ndata?.let {\n    ... // null\u3067\u306a\u3051\u308c\u3070\u3053\u306e\u30d6\u30ed\u30c3\u30af\u3092\u5b9f\u884c\u3059\u308b\n}\n```\n\n<!--original\n``` kotlin\nval data = ...\n\ndata?.let {\n    ... // execute this block if not null\n}\n```\n-->\n\n### when\u6587\u3067return\u3059\u308b\n\n<!--original\n### Return on when statement\n-->\n\n``` kotlin\nfun transform(color: String): Int {\n    return when (color) {\n        \"Red\" -> 0\n        \"Green\" -> 1\n        \"Blue\" -> 2\n        else -> throw IllegalArgumentException(\"Invalid color param value\")\n    }\n}\n```\n\n<!--original\n``` kotlin\nfun transform(color: String): Int {\n    return when (color) {\n        \"Red\" -> 0\n        \"Green\" -> 1\n        \"Blue\" -> 2\n        else -> throw IllegalArgumentException(\"Invalid color param value\")\n    }\n}\n```\n-->\n\n### 'try / catch'\u5f0f\n\n<!--original\n### 'try/catch' expression\n-->\n\n``` kotlin\nfun test() {\n    val result = try {\n        count()\n    } catch (e: ArithmeticException) {\n        throw IllegalStateException(e)\n    }\n\n    // result\u3092\u4f7f\u3063\u3066\u4f55\u304b\u3059\u308b\n}\n```\n\n<!--original\n``` kotlin\nfun test() {\n    val result = try {\n        count()\n    } catch (e: ArithmeticException) {\n        throw IllegalStateException(e)\n    }\n\n    // Working with result\n}\n```\n-->\n\n### 'if'\u5f0f\n\n<!--original\n### 'if' expression\n-->\n\n``` kotlin\nfun foo(param: Int) {\n    val result = if (param == 1) {\n        \"one\"\n    } else if (param == 2) {\n        \"two\"\n    } else {\n        \"three\"\n    }\n}\n```\n\n<!--original\n``` kotlin\nfun foo(param: Int) {\n    val result = if (param == 1) {\n        \"one\"\n    } else if (param == 2) {\n        \"two\"\n    } else {\n        \"three\"\n    }\n}\n```\n-->\n\n### Unit\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u306e\u30d3\u30eb\u30c0\u30fc\u30b9\u30bf\u30a4\u30eb\u306e\u4f7f\u7528\n\n<!--original\n### Builder-style usage of methods that return `Unit`\n-->\n\n``` kotlin\nfun arrayOfMinusOnes(size: Int): IntArray {\n    return IntArray(size).apply { fill(-1) }\n}\n```\n\n<!--original\n``` kotlin\nfun arrayOfMinusOnes(size: Int): IntArray {\n    return IntArray(size).apply { fill(-1) }\n}\n```\n-->\n\n\n### \u5358\u4e00\u5f0f\u95a2\u6570\n\n<!--original\n### Single-expression functions\n-->\n\n``` kotlin\nfun theAnswer() = 42\n```\n\n<!--original\n``` kotlin\nfun theAnswer() = 42\n```\n-->\n\n\u3053\u308c\u306f\u6b21\u3068\u7b49\u4fa1\u3067\u3059\uff1a\n\n<!--original\nThis is equivalent to\n-->\n\n``` kotlin\nfun theAnswer(): Int {\n    return 42\n}\n```\n\n<!--original\n``` kotlin\nfun theAnswer(): Int {\n    return 42\n}\n```\n-->\n\n\n\u3053\u308c\u306f\u4ed6\u306e\u30a4\u30c7\u30a3\u30aa\u30e0\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u30b3\u30fc\u30c9\u3092\u77ed\u304f\u3059\u308b\u3053\u3068\u306b\u3064\u306a\u304c\u308a\u307e\u3059\u3002\u4f8b\uff09 *when*{: .keyword }-\u5f0f\uff1a\n\n<!--original\nThis can be effectively combined with other idioms, leading to shorter code. E.g. with the *when*{: .keyword }-expression:\n-->\n\n``` kotlin\nfun transform(color: String): Int = when (color) {\n    \"Red\" -> 0\n    \"Green\" -> 1\n    \"Blue\" -> 2\n    else -> throw IllegalArgumentException(\"Invalid color param value\")\n}\n```\n\n<!--original\n``` kotlin\nfun transform(color: String): Int = when (color) {\n    \"Red\" -> 0\n    \"Green\" -> 1\n    \"Blue\" -> 2\n    else -> throw IllegalArgumentException(\"Invalid color param value\")\n}\n```\n-->\n\n### 'with' \u3092\u4f7f\u3063\u3066\u3001\u3042\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u8907\u6570\u306e\u95a2\u6570\u3092\u547c\u3076\n\n<!--original\n### Calling multiple methods on an object instance ('with')\n-->\n\n``` kotlin\nclass Turtle {\n    fun penDown()\n    fun penUp()\n    fun turn(degrees: Double)\n    fun forward(pixels: Double)\n}\n\nval myTurtle = Turtle()\nwith(myTurtle) { // 100px\u306e\u56db\u89d2\u5f62\u3092\u63cf\u304f\n    penDown()\n    for(i in 1..4) {\n        forward(100.0)\n        turn(90.0)\n    }\n    penUp()\n}\n```\n\n<!--original\n``` kotlin\nclass Turtle {\n    fun penDown()\n    fun penUp()\n    fun turn(degrees: Double)\n    fun forward(pixels: Double)\n}\n\nval myTurtle = Turtle()\nwith(myTurtle) { //draw a 100 pix square\n    penDown()\n    for(i in 1..4) {\n        forward(100.0)\n        turn(90.0)\n    }\n    penUp()\n}\n```\n-->\n\n### Java 7\u306etry-with-resources\n\n<!--original\n### Java 7's try with resources\n-->\n\n``` kotlin\nval stream = Files.newInputStream(Paths.get(\"/some/file.txt\"))\nstream.buffered().reader().use { reader ->\n    println(reader.readText())\n}\n```\n\n<!--original\n``` kotlin\nval stream = Files.newInputStream(Paths.get(\"/some/file.txt\"))\nstream.buffered().reader().use { reader ->\n    println(reader.readText())\n}\n```\n-->\n\n# \u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\n\n<!--original\n# Coding Conventions\n-->\n\n\u3053\u306e\u30da\u30fc\u30b8\u3067\u306f\u3001Kotlin\u8a00\u8a9e\u306e\u73fe\u5728\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30b9\u30bf\u30a4\u30eb\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n<!--original\nThis page contains the current coding style for the Kotlin language.\n-->\n\n## \u547d\u540d\u30b9\u30bf\u30a4\u30eb\n\n\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u5834\u5408\u306fJava \u306e\u30b3\u30fc\u30c9\u898f\u7d04\u306b\u5f93\u3063\u3066\u304f\u3060\u3055\u3044\uff1a\n\n\n<!--original\n## Naming Style\nIf in doubt default to the Java Coding Conventions such as:\n-->\n\n* \u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u306e\u4f7f\u7528\uff08\u305d\u3057\u3066\u547d\u540d\u3067\u306e\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u306e\u4f7f\u7528\u3092\u907f\u3051\u308b\uff09\n* \u578b\u306f\u5927\u6587\u5b57\u3067\u59cb\u307e\u308b\n* \u30e1\u30bd\u30c3\u30c9\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u5c0f\u6587\u5b57\u3067\u59cb\u307e\u308b\n* 4\u30b9\u30da\u30fc\u30b9\u30a4\u30f3\u30c7\u30f3\u30c8\u306e\u4f7f\u7528\n* public\u95a2\u6570\u306fKotlin Doc\u306b\u767b\u5834\u3059\u308b\u3088\u3046\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n\n<!--original\n* use of camelCase for names (and avoid underscore in names)\n* types start with upper case\n* methods and properties start with lower case\n* use 4 space indentation\n* public functions should have documentation such that it appears in Kotlin Doc\n-->\n\n## \u30b3\u30ed\u30f3\n\n<!--original\n## Colon\n-->\n\n\u30b3\u30ed\u30f3\u304c\u578b\u3068\u7d99\u627f\u5143\u306e\u30bb\u30d1\u30ec\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308b\u969b\u306f\u3001\u4e00\u3064\u524d\u306b\u30b9\u30da\u30fc\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u4e00\u65b9\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u578b\u306e\u30bb\u30d1\u30ec\u30fc\u30bf\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3068\u304d\u306b\u306f\u3001\u30b9\u30da\u30fc\u30b9\u306f\u4e0d\u8981\u3067\u3059\u3002\n\n<!--original\nThere is a space before colon where colon separates type and supertype and there's no space where colon separates instance and type:\n-->\n\n``` kotlin\ninterface Foo<out T : Any> : Bar {\n    fun foo(a: Int): T\n}\n```\n\n<!--original\n``` kotlin\ninterface Foo<out T : Any> : Bar {\n    fun foo(a: Int): T\n}\n```\n-->\n\n## \u30e9\u30e0\u30c0\n\n<!--original\n## Lambdas\n-->\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u306f\u3001\u30b9\u30da\u30fc\u30b9\u304c\u6ce2\u62ec\u5f27\u306e\u5468\u308a\u306b\u5fc5\u8981\u3067\u3059\u3002\u307e\u305f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u672c\u4f53\u3068\u5206\u304b\u3064\u30a2\u30ed\u30fc\uff08->\uff09\u3082\u540c\u69d8\u3067\u3059\u3002 \u53ef\u80fd\u306a\u9650\u308a\u3001\u30e9\u30e0\u30c0\u3092\u62ec\u5f27\u306e\u5916\u306b\u6e21\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nIn lambda expressions, spaces should be used around the curly braces, as well as around the arrow which separates the parameters\nfrom the body. Whenever possible, a lambda should be passed outside of parentheses.\n-->\n\n``` kotlin\nlist.filter { it > 10 }.map { element -> element * 2 }\n```\n\n<!--original\n``` kotlin\nlist.filter { it > 10 }.map { element -> element * 2 }\n```\n-->\n\n\u77ed\u304f\u3066\u30cd\u30b9\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\uff08\u5165\u308c\u5b50\u3067\u306a\u3044\uff09\u30e9\u30e0\u30c0\u5185\u3067\u306f\u3001 \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u660e\u793a\u7684\u306b\u5ba3\u8a00\u3059\u308b\u4ee3\u308f\u308a\u306b `it` \u898f\u7d04\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30e9\u30e0\u30c0\u3067\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5e38\u306b\u660e\u793a\u7684\u306b\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nIn lambdas which are short and not nested, it's recommended to use the `it` convention instead of declaring the parameter\nexplicitly. In nested lambdas with parameters, parameters should be always declared explicitly.\n-->\n\n## \u30e6\u30cb\u30c3\u30c8 (Unit)\n\n<!--original\n## Unit\n-->\n\n\u95a2\u6570\u304cUnit\u3092\u8fd4\u3059\u5834\u5408\u3001\u623b\u308a\u5024\u306e\u578b\u306f\u7701\u7565\u3055\u308c\u308b\u3079\u304d\u3067\u3059\uff1a\n\n<!--original\nIf a function returns Unit, the return type should be omitted:\n-->\n\n``` kotlin\nfun foo() { // \": Unit\" \u304c\u7701\u7565\u3055\u308c\u3066\u3044\u308b\n\n}\n```\n\n<!--original\n``` kotlin\nfun foo() { // \": Unit\" is omitted here\n\n}\n```\n-->\n\n# \u57fa\u672c\u306e\u578b\n\n<!--original\n# Basic Types\n-->\n\nKotlin\u3067\u306f\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u3069\u3093\u306a\u5909\u6570\u304b\u3089\u3067\u3082\u547c\u3073\u51fa\u305b\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3001\u5168\u3066\u306e\u3082\u306e\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002 \u3044\u304f\u3064\u304b\u306e\u578b\u306f\u5b9f\u88c5\u304c\u6700\u9069\u5316\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u30d3\u30eb\u30c8\u30a4\u30f3\u3067\u3042\u308b\u304c\u3001\u30e6\u30fc\u30b6\u304b\u3089\u898b\u308b\u3068\u666e\u901a\u306e\u30af\u30e9\u30b9\u306e\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3001\u6b21\u306e\u578b\u306e\u5927\u90e8\u5206\u3092\u8aac\u660e\u3057\u307e\u3059\uff1a\u6570\u5024\u3001\u6587\u5b57\u3001\u771f\u507d\u5024\uff08boolean\uff09\u3001\u914d\u5217\u3002\n\n<!--original\nIn Kotlin, everything is an object in the sense that we can call member functions and properties on any variable. Some types are built-in, because their implementation is optimized, but to the user they look like ordinary classes. In this section we describe most of these types: numbers, characters, booleans and arrays.\n-->\n\n## \u6570\u5024\n\n<!--original\n## Numbers\n-->\n\nKotlin\u306f\u3001Java\u306b\u8fd1\u3044\u65b9\u6cd5\u3067\u6570\u5b57\u3092\u6271\u3046\u304c\u3001\u5168\u304f\u540c\u3058\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u4f8b\u3048\u3070\u3001\u6570\u5024\u306e\u6697\u9ed9\u306e\u62e1\u5927\u5909\u63db\u304c\u5b58\u5728\u305b\u305a\u3001\u30ea\u30c6\u30e9\u30eb\u306f\u3044\u304f\u3064\u304b\u306e\u4e8b\u4f8b\u3067\u306f\u5c11\u3057\u7570\u306a\u308b\u3002\n\n<!--original\nKotlin handles numbers in a way close to Java, but not exactly the same. For example, there are no implicit widening conversions for numbers, and literals are slightly different in some cases.\n-->\n\nKotlin\u306f\u6570\u5024\u306e\u8868\u73fe\u7528\u306b\u6b21\u306e\u30d3\u30eb\u30c8\u30a4\u30f3\u306e\u578b\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff08\u3053\u308c\u306fJava\u306b\u8fd1\u3044\uff09\uff1a\n\n<!--original\nKotlin provides the following built-in types representing numbers (this is close to Java):\n-->\n\n| \u578b\t | \u30d3\u30c3\u30c8\u5e45 |\n|--------|----------|\n| Double | 64       |\n| Float\t | 32       |\n| Long\t | 64       |\n| Int\t | 32       |\n| Short\t | 16       |\n| Byte\t | 8        |\n\n<!--original\n| Type\t | Bit width|\n|--------|----------|\n| Double | 64       |\n| Float\t | 32       |\n| Long\t | 64       |\n| Int\t | 32       |\n| Short\t | 16       |\n| Byte\t | 8        |\n-->\n\nKotlin\u3067\u306f\u6587\u5b57\u306f\u6570\u5024\u3067\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nNote that characters are not numbers in Kotlin.\n-->\n\n### \u30ea\u30c6\u30e9\u30eb\u5b9a\u6570\n\n<!--original\n### Literal Constants\n-->\n\n\n\u6574\u6570\u5024\u306e\u305f\u3081\u306e\u30ea\u30c6\u30e9\u30eb\u5b9a\u6570\u306f\u3001\u6b21\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nThere are the following kinds of literal constants for integral values:\n-->\n\n* \u6570\u5024: `123`\n  * Long\u578b\u306e\u6570\u3092\u8868\u3059\u306b\u306f\u5927\u6587\u5b57\u306e`L`\u3067\u30bf\u30b0\u4ed8\u3051\u3059\u308b: `123L`\n* 16\u9032\u6570: `0x0F`\n* 2\u9032\u6570: `0b00001011`\n\n<!--original\n* Decimals: `123`\n  * Longs are tagged by a capital `L`: `123L`\n* Hexadecimals: `0x0F`\n* Binaries: `0b00001011`\n-->\n\n\u6ce8\uff1a8\u9032\u6570\u306e\u30ea\u30c6\u30e9\u30eb\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n<!--original\nNOTE: Octal literals are not supported.\n-->\n\nKotlin\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u5f93\u6765\u306e\u8868\u8a18\u6cd5\u3082\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nKotlin also supports a conventional notation for floating-point numbers:\n-->\n \n* \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fdouble\u578b: `123.5`, `123.5e10`\n* float\u578b\u3092\u8868\u3059\u306b\u306f `f` or `F` \u3067\u30bf\u30b0\u4ed8\u3051\u3059\u308b: `123.5f` \n\n<!--original\n* Doubles by default: `123.5`, `123.5e10`\n* Floats are tagged by `f` or `F`: `123.5f` \n-->\n\n### \u8868\u73fe\n\n<!--original\n### Representation\n-->\n\nJava\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u306f\u3001null\u8a31\u5bb9\u578b\u306a\u6570\u5024\u306e\u53c2\u7167\uff08\u4f8b\uff1a`Int?`\uff09\u3084\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u304c\u95a2\u4e0e\u3057\u3066\u3044\u308b\u5834\u5408\u3092\u9664\u3044\u3066\u3001JVM\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3068\u3057\u3066\u6570\u5024\u304c\u7269\u7406\u7684\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5f8c\u8005\u306e\u4f8b\u3067\u306f\u756a\u53f7\u304c\u30dc\u30af\u30b7\u30f3\u30b0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nOn the Java platform, numbers are physically stored as JVM primitive types, unless we need a nullable number reference (e.g. `Int?`) or generics are involved. \nIn the latter cases numbers are boxed.\n-->\n\n\u6570\u5024\u306e\u30dc\u30af\u30b7\u30f3\u30b0\u306f\u4e00\u69d8\u6027\u3092\u4fdd\u6301\u3057\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff1a\n\n<!--original\nNote that boxing of numbers does not preserve identity:\n-->\n\n``` kotlin\nval a: Int = 10000\nprint(a === a) // 'true'\u3092\u51fa\u529b\u3059\u308b\nval boxedA: Int? = a\nval anotherBoxedA: Int? = a\nprint(boxedA === anotherBoxedA) // !!! 'false'\u3092\u51fa\u529b\u3059\u308b !!!\n```\n\n<!--original\n``` kotlin\nval a: Int = 10000\nprint(a === a) // Prints 'true'\nval boxedA: Int? = a\nval anotherBoxedA: Int? = a\nprint(boxedA === anotherBoxedA) // !!!Prints 'false'!!!\n```\n-->\n\n\u4e00\u65b9\u3001\u3053\u308c\u306f\u540c\u4e00\u6027\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\uff1a\n\n<!--original\nOn the other hand, it preserves equality:\n-->\n\n``` kotlin\nval a: Int = 10000\nprint(a == a) // 'true'\u3092\u51fa\u529b\u3059\u308b\nval boxedA: Int? = a\nval anotherBoxedA: Int? = a\nprint(boxedA == anotherBoxedA) // 'true'\u3092\u51fa\u529b\u3059\u308b\n```\n\n<!--original\n``` kotlin\nval a: Int = 10000\nprint(a == a) // Prints 'true'\nval boxedA: Int? = a\nval anotherBoxedA: Int? = a\nprint(boxedA == anotherBoxedA) // Prints 'true'\n```\n-->\n\n### \u660e\u793a\u7684\u306a\u5909\u63db\n\n<!--original\n### Explicit Conversions\n-->\n\n\u7570\u306a\u308b\u8868\u73fe\u3067\u3042\u308b\u304c\u6545\u306b\u3001\u5c0f\u3055\u306a\u578b\u306f\u5927\u304d\u306a\u578b\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u3082\u3057\u4eee\u306b\u305d\u3046\u3067\u3042\u3063\u305f\u306a\u3089\u3070\u3001\u6b21\u306e\u7a2e\u985e\u306e\u60a9\u307f\u3092\u62b1\u3048\u305f\u3067\u3057\u3087\u3046\uff1a\n\n<!--original\nDue to different representations, smaller types are not subtypes of bigger ones.\nIf they were, we would have troubles of the following sort:\n-->\n\n``` kotlin\n// \u4eee\u8aac\u306e\u30b3\u30fc\u30c9\u3067\u3042\u308a\u3001\u5b9f\u969b\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u305b\u3093\uff1a\nval a: Int? = 1 // \u30dc\u30af\u30b7\u30f3\u30b0\u3055\u308c\u305fInt\u578b (java.lang.Integer)\nval b: Long? = a // \u6697\u9ed9\u306e\u5909\u63db\u304cLong\u578b (java.lang.Long)\u3078\u306e\u30dc\u30af\u30b7\u30f3\u30b0\u3092\u5f15\u304d\u8d77\u3053\u3057\u307e\u3059\nprint(a == b) // \u4ef0\u5929\uff01\u3053\u308c\u306fLong\u578b\u306eequals()\u30c1\u30a7\u30c3\u30af\u3067\u4ed6\u306e\u90e8\u5206\u304cLong\u578b\u306b\u306a\u308b\u306e\u3068\u540c\u7b49\u306b \"false\" \u3092\u51fa\u529b\u3057\u307e\u3059\n```\n\n<!--original\n``` kotlin\n// Hypothetical code, does not actually compile:\nval a: Int? = 1 // A boxed Int (java.lang.Integer)\nval b: Long? = a // implicit conversion yields a boxed Long (java.lang.Long)\nprint(a == b) // Surprise! This prints \"false\" as Long's equals() check for other part to be Long as well\n```\n-->\n\n\u3064\u307e\u308a\u3001\u540c\u4e00\u6027\u3060\u3051\u3067\u306a\u304f\u4e00\u69d8\u6027\u3067\u3055\u3048\u3082\u5168\u3066\u306e\u5834\u6240\u306b\u304a\u3044\u3066\u9759\u304b\u306b\u5931\u308f\u308c\u305f\u306e\u3067\u3059\u3002\n\n<!--original\nSo not only identity, but even equality would have been lost silently all over the place.\n-->\n\n\u305d\u306e\u7d50\u679c\u3001\u5c0f\u3055\u306a\u578b\u306f\u3001\u6697\u9ed9\u7684\u306b\u5927\u304d\u306a\u578b\u306b\u5909\u63db\u3055\u308c\u308b\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u660e\u793a\u7684\u5909\u63db\u7121\u3057\u3067`Byte`\u578b\u306e\u5024\u3092`Int`\u578b\u3078\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\n\n<!--original\nAs a consequence, smaller types are NOT implicitly converted to bigger types.\nThis means that we cannot assign a value of type `Byte` to an `Int` variable without an explicit conversion\n-->\n\n``` kotlin\nval b: Byte = 1 // OK, \u30ea\u30c6\u30e9\u30eb\u306f\u9759\u7684\u306b\u30c1\u30a7\u30c3\u30af\u3055\u308c\u3066\u3044\u307e\u3059\nval i: Int = b // ERROR\n```\n\n<!--original\n``` kotlin\nval b: Byte = 1 // OK, literals are checked statically\nval i: Int = b // ERROR\n```\n-->\n\n\u660e\u793a\u7684\u5909\u63db\u306f\u6570\u5b57\u3092\u62e1\u5f35\u3059\u308b\u969b\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nWe can use explicit conversions to widen numbers\n-->\n\n``` kotlin\nval i: Int = b.toInt() // OK: \u660e\u793a\u7684\u306b\u62e1\u5f35\u3055\u308c\u307e\u3057\u305f\n```\n\n<!--original\n``` kotlin\nval i: Int = b.toInt() // OK: explicitly widened\n```\n-->\n\n\u5168\u3066\u306e\u6570\u5024\u578b\u306f\u6b21\u306e\u5909\u63db\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\uff1a\n\n<!--original\nEvery number type supports the following conversions:\n-->\n\n* `toByte(): Byte`\n* `toShort(): Short`\n* `toInt(): Int`\n* `toLong(): Long`\n* `toFloat(): Float`\n* `toDouble(): Double`\n* `toChar(): Char`\n\n<!--original\n* `toByte(): Byte`\n* `toShort(): Short`\n* `toInt(): Int`\n* `toLong(): Long`\n* `toFloat(): Float`\n* `toDouble(): Double`\n* `toChar(): Char`\n-->\n\n\u660e\u793a\u7684\u5909\u63db\u304c\u306a\u3044\u3053\u3068\u306f\u6ec5\u591a\u306b\u76ee\u7acb\u3061\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u3089\u305d\u306e\u578b\u306f\u6587\u8108\u304b\u3089\u63a8\u6e2c\u3055\u308c\u3001\u7b97\u8853\u6f14\u7b97\u304c\u30aa\u30fc\u30d0\u30ed\u30fc\u30c9\u3055\u308c\u9069\u5207\u306b\u5909\u63db\u3055\u308c\u308b\u304b\u3089\u3067\u3059\u3002\u4f8b\u3048\u3070\uff1a\n\n<!--original\nAbsence of implicit conversions is rarely noticeable because the type is inferred from the context, and arithmetical operations are overloaded for appropriate conversions, for example\n-->\n\n``` kotlin\nval l = 1L + 3 // Long + Int => Long\n```\n\n<!--original\n``` kotlin\nval l = 1L + 3 // Long + Int => Long\n```\n-->\n\n### \u6f14\u7b97\n\n<!--original\n### Operations\n-->\n\nKotlin\u306f\u7b97\u8853\u8a08\u7b97\u306e\u6a19\u6e96\u30bb\u30c3\u30c8\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306f\u9069\u5207\u306a\u30af\u30e9\u30b9\uff08\u305f\u3060\u3057\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u5bfe\u5fdc\u3059\u308b\u547d\u4ee4\u306e\u547c\u3073\u51fa\u3057\u3092\u6700\u9069\u5316\u3059\u308b\uff09\u306e\u30e1\u30f3\u30d0\u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002[\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9](operator-overloading.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nKotlin supports the standard set of arithmetical operations over numbers, which are declared as members of appropriate classes (but the compiler optimizes the calls down to the corresponding instructions).\nSee [Operator overloading](operator-overloading.html).\n-->\n\n\u30d3\u30c3\u30c8\u6f14\u7b97\u306b\u306f\u305d\u306e\u3088\u3046\u306a\u7279\u6b8a\u306a\u6587\u5b57\u5217\u304c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u4e2d\u7f6e\u5f62\u3067\u547c\u3073\u51fa\u305b\u308b\u540d\u524d\u4ed8\u304d\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a\n\n<!--original\nAs of bitwise operations, there're no special characters for them, but just named functions that can be called in infix form, for example:\n-->\n\n``` kotlin\nval x = (1 shl 2) and 0x000FF000\n```\n\n<!--original\n``` kotlin\nval x = (1 shl 2) and 0x000FF000\n```\n-->\n\n\u3053\u308c\u3089\u306f\u30d3\u30c3\u30c8\u5358\u4f4d\u306e\u64cd\u4f5c\u3092\u884c\u3046\u5168\u30ea\u30b9\u30c8\u3067\u3059\uff08`Int`\u3068`Long`\u306e\u307f\u5229\u7528\u53ef\u80fd\uff09\uff1a\n\n<!--original\nHere is the complete list of bitwise operations (available for `Int` and `Long` only):\n-->\n\n* `shl(bits)` \u2013 \u7b26\u53f7\u4ed8\u304d\u5de6\u30b7\u30d5\u30c8 (Java\u306e `<<`)\n* `shr(bits)` \u2013 \u7b26\u53f7\u4ed8\u304d\u53f3\u30b7\u30d5\u30c8 (Java\u306e `>>`)\n* `ushr(bits)` \u2013 \u7b26\u53f7\u7121\u3057\u53f3\u30b7\u30d5\u30c8 (Java\u306e `>>>`)\n* `and(bits)` \u2013 \u30d3\u30c3\u30c8\u6f14\u7b97\u306eand\n* `or(bits)` \u2013 \u30d3\u30c3\u30c8\u6f14\u7b97\u306eor\n* `xor(bits)` \u2013 \u30d3\u30c3\u30c8\u6f14\u7b97\u306exor\n* `inv()` \u2013 \u30d3\u30c3\u30c8\u6f14\u7b97\u306e\u53cd\u8ee2\n\n<!--original\n* `shl(bits)` \u2013 signed shift left (Java's `<<`)\n* `shr(bits)` \u2013 signed shift right (Java's `>>`)\n* `ushr(bits)` \u2013 unsigned shift right (Java's `>>>`)\n* `and(bits)` \u2013 bitwise and\n* `or(bits)` \u2013 bitwise or\n* `xor(bits)` \u2013 bitwise xor\n* `inv()` \u2013 bitwise inversion\n-->\n\n## \u6587\u5b57\n\n<!--original\n## Characters\n-->\n\n\u6587\u5b57\u306f\u3001`Char`\u578b\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u6570\u5b57\u3068\u3057\u3066\u76f4\u63a5\u6271\u3046\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n<!--original\nCharacters are represented by the type `Char`. They can not be treated directly as numbers\n-->\n\n``` kotlin\nfun check(c: Char) {\n  if (c == 1) { // ERROR: \u975e\u4e92\u63db\u306e\u578b\n    // ...\n  }\n}\n```\n\n<!--original\n``` kotlin\nfun check(c: Char) {\n  if (c == 1) { // ERROR: incompatible types\n    // ...\n  }\n}\n```\n-->\n\n[translation here]\n\u6587\u5b57\u30ea\u30c6\u30e9\u30eb\u3092\u8868\u73fe\u3059\u308b\u306b\u306f\u3001\u30b7\u30f3\u30b0\u30eb\u30af\u30a9\u30fc\u30c8\u3067\u56f2\u307f\u307e\u3059\uff1a `'1'`\n\u7279\u6b8a\u6587\u5b57\u306f\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u3092\u4f7f\u3063\u3066\u30a8\u30b9\u30b1\u30fc\u30d7\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6b21\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\uff1a`\\t`, `\\b`, `\\n`, `\\r`, `\\'`, `\\\"`, `\\\\`, `\\$`\n\u4ed6\u306e\u6587\u5b57\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001Unicode\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u69cb\u6587\u3092\u4f7f\u7528\u3057\u307e\u3059\uff1a`'\\uFF00'`\n\n\n<!--original\nCharacter literals go in single quotes: `'1'`.\nSpecial characters can be escaped using a backslash.\nThe following escape sequences are supported: `\\t`, `\\b`, `\\n`, `\\r`, `\\'`, `\\\"`, `\\\\` and `\\$`.\nTo encode any other character, use the Unicode escape sequence syntax: `'\\uFF00'`.\n-->\n\n\u660e\u793a\u7684\u306b\u6587\u5b57\u3092`Int`\u578b\u306e\u6570\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nWe can explicitly convert a character to an `Int` number:\n-->\n\n``` kotlin\nfun decimalDigitValue(c: Char): Int {\n  if (c !in '0'..'9')\n    throw IllegalArgumentException(\"Out of range\")\n  return c.toInt() - '0'.toInt() // \u6697\u9ed9\u7684\u306a\u6570\u5024\u3078\u306e\u5909\u63db\n}\n```\n\n<!--original\n``` kotlin\nfun decimalDigitValue(c: Char): Int {\n  if (c !in '0'..'9')\n    throw IllegalArgumentException(\"Out of range\")\n  return c.toInt() - '0'.toInt() // Explicit conversions to numbers\n}\n```\n-->\n\n\u6570\u5024\u306e\u3088\u3046\u306b\u3001\u6587\u5b57\u306fnull\u8a31\u5bb9\u53c2\u7167\u304c\u5fc5\u8981\u306a\u3068\u304d\u306b\u30dc\u30af\u30b7\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002\u540c\u4e00\u6027\u306f\u306f\u30dc\u30af\u30b7\u30f3\u30b0\u64cd\u4f5c\u3055\u308c\u308b\u3068\u4fdd\u6301\u3055\u308c\u307e\u305b\u3093 \u3002\n\n<!--original\nLike numbers, characters are boxed when a nullable reference is needed. Identity is not preserved by the boxing operation.\n-->\n\n## \u771f\u507d\u5024 (Boolean)\n\n<!--original\n## Booleans\n-->\n\n[translation here]\n`Boolean`\u578b\u306f\u771f\u507d\u5024\u3092\u8868\u3057\u3001*true*{: .keyword }\u3068*false*{: .keyword }\u306e2\u3064\u306e\u5024\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nThe type `Boolean` represents booleans, and has two values: *true*{: .keyword } and *false*{: .keyword }.\n-->\n\nBoolean\u306fnull\u8a31\u5bb9\u53c2\u7167\u304c\u5fc5\u8981\u306a\u3068\u304d\u306b\u30dc\u30af\u30b7\u30f3\u30b0\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nBooleans are boxed if a nullable reference is needed.\n-->\n\nBoolean\u306e\u30d3\u30eb\u30c8\u30a4\u30f3\u6f14\u7b97\u306f\u6b21\u3092\u542b\u307f\u307e\u3059\uff1a\n\n<!--original\nBuilt-in operations on booleans include\n-->\n\n* `||` \u2013 \u9045\u5ef6\u8a55\u4fa1\u8ad6\u7406\u548c\n* `&&` \u2013 \u9045\u5ef6\u8a55\u4fa1\u8ad6\u7406\u7a4d\n* `!` - \u5426\u5b9a\n\n<!--original\n* `||` \u2013 lazy disjunction\n* `&&` \u2013 lazy conjunction\n* `!` - negation\n-->\n\n## \u914d\u5217\n\n<!--original\n## Arrays\n-->\n\nKotlin\u3067\u306e\u914d\u5217\u306f Array \u30af\u30e9\u30b9\u3067\u8868\u3055\u308c\u3001`get`\u3068`set1\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\uff08`[]`\u306e\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3057\u3066\u3044\u308b\uff09\u3002\u307e\u305f\u3001`size`\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3044\u304f\u3064\u304b\u306e\u6709\u7528\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u5171\u306b\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff1a\n\n<!--original\nArrays in Kotlin are represented by the `Array` class, that has `get` and `set` functions (that turn into `[]` by operator overloading conventions), and `size` property, along with a few other useful member functions:\n-->\n\n``` kotlin\nclass Array<T> private constructor() {\n  val size: Int\n  fun get(index: Int): T\n  fun set(index: Int, value: T): Unit\n\n  fun iterator(): Iterator<T>\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nclass Array<T> private constructor() {\n  val size: Int\n  fun get(index: Int): T\n  fun set(index: Int, value: T): Unit\n\n  fun iterator(): Iterator<T>\n  // ...\n}\n```\n-->\n\n\u914d\u5217\u3092\u4f5c\u308b\u306b\u306f\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u306e`arrayOf()`\u306b\u30a2\u30a4\u30c6\u30e0\u306e\u5024\u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3064\u307e\u308a\u3001`arrayOf(1, 2, 3)`\u306f[1, 2, 3]\u306e\u914d\u5217\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3042\u308b\u3044\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u306e`arrayOfNulls()`\u3067\u3001null\u8981\u7d20\u3067\u57cb\u3081\u3089\u308c\u305f\u6307\u5b9a\u30b5\u30a4\u30ba\u306e\u914d\u5217\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nTo create an array, we can use a library function `arrayOf()` and pass the item values to it, so that `arrayOf(1, 2, 3)` creates an array [1, 2, 3].\nAlternatively, the `arrayOfNulls()` library function can be used to create an array of a given size filled with null elements.\n-->\n\n\u4ed6\u306e\u3084\u308a\u65b9\u3068\u3057\u3066\u3001\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3068\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u3092\u4e0e\u3048\u308b\u3068\u5404\u8981\u7d20\u306e\u521d\u671f\u5024\u7528\u306b\u5024\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5f15\u6570\u306b\u3068\u308b\u30d5\u30a1\u30af\u30c8\u30ea\u95a2\u6570\u306e\u4f7f\u7528\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nAnother option is to use a factory function that takes the array size and the function that can return the initial value\nof each array element given its index:\n-->\n\n``` kotlin\n// Array<String>\u3092[\"0\", \"1\", \"4\", \"9\", \"16\"]\u306e\u5024\u3067\u4f5c\u6210\u3057\u307e\u3059\nval asc = Array(5, { i -> (i * i).toString() })\n```\n\n<!--original\n``` kotlin\n// Creates an Array<String> with values [\"0\", \"1\", \"4\", \"9\", \"16\"]\nval asc = Array(5, { i -> (i * i).toString() })\n```\n-->\n\n\u524d\u8ff0\u3057\u305f\u3068\u304a\u308a\u3001`[]`\u6f14\u7b97\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u306e`get()`\u3068`set()`\u306e\u547c\u3073\u51fa\u3057\u3092\u8868\u3057\u307e\u3059\u3002\n\n<!--original\nAs we said above, the `[]` operation stands for calls to member functions `get()` and `set()`.\n-->\n\n\u6ce8\uff1aJava\u3068\u306f\u7570\u306a\u308a\u3001Kotlin\u306e\u914d\u5217\u306f\u4e0d\u5909\u3067\u3059\u3002\u3064\u307e\u308aKotlin\u3067\u306f`Array<Any>`\u3078`Array<String>`\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3092\u8868\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u3067\u3059\uff08\u3057\u304b\u3057\u3001`Array<out Any>`\u3092\u4f7f\u3048\u3070\u4ee3\u5165\u3067\u304d\u307e\u3059\u3002\u578b\u30d7\u30ed\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3002\n\n<!--original\nNote: unlike Java, arrays in Kotlin are invariant. This means that Kotlin does not let us assign an `Array<String>`\nto an `Array<Any>`, which prevents a possible runtime failure (but you can use `Array<out Any>`, \nsee [Type Projections](generics.html#type-projections)).\n-->\n\nKotlin\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\uff08`ByteArray`\u3001`ShortArray`\u3001`IntArray`\u7b49\uff09\u306e\u914d\u5217\u306b\u3064\u3044\u3066\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u7121\u3057\u3067\u30dc\u30af\u30b7\u30f3\u30b0\u304c\u3067\u304d\u308b\u7279\u5225\u306a\u30af\u30e9\u30b9\u3092\u6301\u3061\u307e\u3059\u3002 \u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u306f`Array`\u30af\u30e9\u30b9\u3068\u7d99\u627f\u95a2\u4fc2\u3092\u6301\u3061\u307e\u305b\u3093\u304c\u3001\u540c\u3058\u30e1\u30bd\u30c3\u30c9\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3061\u307e\u3059\u3002 \u305d\u308c\u305e\u308c\u306e\u30af\u30e9\u30b9\u306b\u304a\u3044\u3066\u3001\u5bfe\u5fdc\u3059\u308b\u30d5\u30a1\u30af\u30c8\u30ea\u95a2\u6570\u3092\u6301\u3061\u307e\u3059\uff1a\n\n<!--original\nKotlin also has specialized classes to represent arrays of primitive types without boxing overhead: `ByteArray`,\n`ShortArray`, `IntArray` and so on. These classes have no inheritance relation to the `Array` class, but they\nhave the same set of methods and properties. Each of them also has a corresponding factory function:\n-->\n\n``` kotlin\nval x: IntArray = intArrayOf(1, 2, 3)\nx[0] = x[1] + x[2]\n```\n\n<!--original\n``` kotlin\nval x: IntArray = intArrayOf(1, 2, 3)\nx[0] = x[1] + x[2]\n```\n-->\n\n## \u6587\u5b57\u5217\n\n<!--original\n## Strings\n-->\n\n\u6587\u5b57\u5217\u306f\u3001`String`\u578b\u3067\u8868\u3055\u308c\u307e\u3059\u3002\u6587\u5b57\u5217\u306f\u4e0d\u5909\uff08\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff09\u3067\u3059\u3002\n\u6587\u5b57\u5217\u306e\u8981\u7d20\u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u6f14\u7b97\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\uff1a`s[i]`\n\u6587\u5b57\u5217\u306f *for*{: .keyword }\u30eb\u30fc\u30d7\u3067\u30a4\u30c6\u30ec\u30fc\u30c8\uff08\u7e70\u308a\u8fd4\u3057\u64cd\u4f5c\uff09\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nStrings are represented by the type `String`. Strings are immutable.\nElements of a string are characters that can be accessed by the indexing operation: `s[i]`.\nA string can be iterated over with a *for*{: .keyword }-loop:\n-->\n\n``` kotlin\nfor (c in str) {\n  println(c)\n}\n```\n\n<!--original\n``` kotlin\nfor (c in str) {\n  println(c)\n}\n```\n-->\n\n### \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\n\n<!--original\n### String Literals\n-->\n\nKotlin\u306f2\u3064\u306e\u7a2e\u985e\u306e\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3092\u6301\u3061\u307e\u3059\uff1a1\u3064\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u6301\u3061\u3046\u308b\u30a8\u30b9\u30b1\u30fc\u30d7\u6e08\u307f\u6587\u5b57\u5217\u3067\u3001\u3082\u30461\u3064\u306f\u6539\u884c\u3068\u4efb\u610f\u306e\u6587\u5b57\u3092\u542b\u3080\u751f\u6587\u5b57\u5217\u3067\u3059\u3002 \u30a8\u30b9\u30b1\u30fc\u30d7\u6e08\u307f\u6587\u5b57\u5217\u306fJava\u306e\u6587\u5b57\u5217\u306b\u975e\u5e38\u306b\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\uff1a\n\n<!--original\nKotlin has two types of string literals: escaped strings that may have escaped characters in them and raw strings that can contain newlines and arbitrary text. An escaped string is very much like a Java string:\n-->\n\n``` kotlin\nval s = \"Hello, world!\\n\"\n```\n\n<!--original\n``` kotlin\nval s = \"Hello, world!\\n\"\n```\n-->\n\n\u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u3001\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u3092\u7528\u3044\u3066\u5f93\u6765\u306e\u65b9\u6cd5\u3067\u884c\u308f\u308c\u307e\u3059\u3002\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\u306f\u3001[\u6587\u5b57\u5217](#characters)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nEscaping is done in the conventional way, with a backslash. See [Characters](#characters) above for the list of supported escape sequences.\n-->\n\n\u751f\u6587\u5b57\u5217\u306f\u4e09\u9023\u30af\u30aa\u30fc\u30c8 (`\"\"\"`) \u3067\u533a\u5207\u3089\u308c\u307e\u3059\u3002\u30a8\u30b9\u30b1\u30fc\u30d7\u306f\u542b\u307e\u308c\u3066\u304a\u3089\u305a\u3001\u6539\u884c\u3084\u4ed6\u306e\u6587\u5b57\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nA raw string is delimited by a triple quote (`\"\"\"`), contains no escaping and can contain newlines and any other characters:\n-->\n\n``` kotlin\nval text = \"\"\"\n  for (c in \"foo\")\n    print(c)\n\"\"\"\n```\n\n<!--original\n``` kotlin\nval text = \"\"\"\n  for (c in \"foo\")\n    print(c)\n\"\"\"\n```\n-->\n\n\u5148\u982d\u306e\u7a7a\u767d\u3092[`trimMargin()`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html)\u95a2\u6570\u3067\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nYou can remove leading whitespace with [`trimMargin()`](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html) function:\n-->\n\n``` kotlin\nval text = \"\"\"\n    |Tell me and I forget. \n    |Teach me and I remember. \n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    \"\"\".trimMargin()\n```\n\n<!--original\n``` kotlin\nval text = \"\"\"\n    |Tell me and I forget. \n    |Teach me and I remember. \n    |Involve me and I learn.\n    |(Benjamin Franklin)\n    \"\"\".trimMargin()\n```\n-->\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f`|`\u306f\u30de\u30fc\u30b8\u30f3\u306e\u63a5\u982d\u8f9e\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u304c\u3001`trimMargin(\">\")`\u306e\u3088\u3046\u306b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u5225\u306e\u6587\u5b57\u3092\u6e21\u3059\u3068\u305d\u308c\u3092\u63a5\u982d\u8f9e\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nBy default `|` is used as margin prefix, but you can choose another character and pass it as a parameter, like `trimMargin(\">\")`.\n-->\n\n### \u6587\u5b57\u5217\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n<!--original\n### String Templates\n-->\n\n\u6587\u5b57\u5217\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f0f\u3001\u3059\u306a\u308f\u3061\u3001\u8a55\u4fa1\u3055\u308c\u3001\u305d\u306e\u7d50\u679c\u304c\u6587\u5b57\u5217\u3068\u7d50\u5408\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306e\u65ad\u7247\u3092\u542b\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f0f\u306f\u3001\u30c9\u30eb\u8a18\u53f7\uff08$\uff09\u3067\u59cb\u307e\u308a\u3001\u7c21\u5358\u306a\u540d\u524d\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\uff1a\n\n<!--original\nStrings may contain template expressions, i.e. pieces of code that are evaluated and whose results are concatenated into the string.\nA template expression starts with a dollar sign ($) and consists of either a simple name:\n-->\n\n``` kotlin\nval i = 10\nval s = \"i = $i\" // \"i = 10\"\u3068\u8a55\u4fa1\u3055\u308c\u308b\n```\n\n<!--original\n``` kotlin\nval i = 10\nval s = \"i = $i\" // evaluates to \"i = 10\"\n```\n-->\n\n\u307e\u305f\u306f\u3001\u6ce2\u62ec\u5f27\u3092\u4f7f\u3063\u305f\u5f93\u6765\u306e\u8a18\u6cd5\u3082\u3042\u308a\u307e\u3059\uff1a\n\n<!--original\nor an arbitrary expression in curly braces:\n-->\n\n``` kotlin\nval s = \"abc\"\nval str = \"$s.length is ${s.length}\" // \"abc.length is 3\"\u3068\u8a55\u4fa1\u3055\u308c\u308b\n```\n\n<!--original\n``` kotlin\nval s = \"abc\"\nval str = \"$s.length is ${s.length}\" // evaluates to \"abc.length is 3\"\n```\n-->\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u751f\u6587\u5b57\u5217\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u6e08\u307f\u6587\u5b57\u5217\u306e\u3069\u3061\u3089\u306b\u542b\u307e\u308c\u3066\u3044\u3066\u3082\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\u3082\u3057`$`\u306e\u6587\u5b57\u30ea\u30c6\u30e9\u30eb\u3092\u751f\u6587\u5b57\u5217\u5185\uff08\u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\u3067\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u306a\u3044\uff09\u3067\u8868\u73fe\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u6b21\u306e\u6587\u6cd5\u3092\u4f7f\u7528\u3067\u304d\u308b\uff1a\n\n<!--original\nTemplates are supported both inside raw strings and inside escaped strings.\nIf you need to represent a literal `$` character in a raw string (which doesn't support backslash escaping), you can use the following syntax:\n-->\n\n``` kotlin\nval price = \"\"\"\n${'$'}9.99\n\"\"\"\n```\n\n<!--original\n``` kotlin\nval price = \"\"\"\n${'$'}9.99\n\"\"\"\n```\n-->\n\n# \u30d1\u30c3\u30b1\u30fc\u30b8\n\n<!--original\n# Packages\n-->\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u5ba3\u8a00\u3092\u3059\u308b\u3068\u304d\u306f\u3001\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306b\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nA source file may start with a package declaration:\n-->\n\n``` kotlin\npackage foo.bar\n\nfun baz() {}\n\nclass Goo {}\n\n// ...\n```\n\n<!--original\n``` kotlin\npackage foo.bar\n\nfun baz() {}\n\nclass Goo {}\n\n// ...\n```\n-->\n\n\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\uff08\u3053\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3084\u95a2\u6570\u306a\u3069\uff09\u5168\u3066\u306e\u5185\u5bb9\u306f\u5ba3\u8a00\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u5f93\u3063\u3066\u3001\u6b21\u306e\u4f8b\u3067\u793a\u3059\u3068\u304a\u308a\u3001`baz()`\u306e\u5b8c\u5168\u540d\u306f`foo.bar.baz`\u3067\u3042\u308a\u3001`Goo`\u306e\u5b8c\u5168\u540d\u306f`foo.bar.Goo`\u3067\u3059\u3002\n\n<!--original\nAll the contents (such as classes and functions) of the source file are contained by the package declared.\nSo, in the example above, the full name of `baz()` is `foo.bar.baz`, and the full name of `Goo` is `foo.bar.Goo`. \n-->\n \n\n\u3082\u3057\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u6307\u5b9a\u3055\u308c\u306a\u3044\u5834\u5408\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9\u306f\u540d\u524d\u3092\u6301\u305f\u306a\u3044\u201ddefault\u201d\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5c5e\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\n\n<!--original\nIf the package is not specified, the contents of such a file belong to \"default\" package that has no name.\n-->\n\n## \u30a4\u30f3\u30dd\u30fc\u30c8\n\n<!--original\n## Imports\n-->\n\n\u6a19\u6e96\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u306f\u9055\u3044\u3001\u305d\u308c\u305e\u308c\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u72ec\u81ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u3092\u542b\u3093\u3067\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n\u30a4\u30f3\u30dd\u30fc\u30c8\u306e\u6587\u6cd5\u306f\u3001[\u6587\u6cd5](grammar.html#import)\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nApart from the default imports, each file may contain its own import directives.\nSyntax for imports is described in the [grammar](grammar.html#import).\n-->\n\n\u5358\u4e00\u306e\u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u30a4\u30f3\u30dd\u30fc\u30c8\u3067\u304d\u307e\u3059\u3002\u4f8b\uff1a\n\n<!--original\nWe can import either a single name, e.g.\n-->\n\n``` kotlin\nimport foo.Bar // Bar\u306f\u8a31\u53ef\u7121\u3057\u3067\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\n```\n\n<!--original\n``` kotlin\nimport foo.Bar // Bar is now accessible without qualification\n```\n-->\n\n\u307e\u305f\u306f\u3001\u3042\u308b\u30b9\u30b3\u30fc\u30d7\uff08\u30d1\u30c3\u30b1\u30fc\u30b8\u3001\u30af\u30e9\u30b9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7b49\uff09\u5185\u306e\u5168\u3066\u306e\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306a\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u5834\u5408\uff1a\n\n<!--original\nor all the accessible contents of a scope (package, class, object etc):\n-->\n\n``` kotlin\nimport foo.* // 'foo'\u5185\u306e\u5168\u3066\u304c\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\n```\n\n<!--original\n``` kotlin\nimport foo.* // everything in 'foo' becomes accessible\n```\n-->\n\n\u540d\u524d\u306e\u885d\u7a81\u304c\u3042\u308b\u5834\u5408\u3001*as*{: .keyword }\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u885d\u7a81\u3059\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3092\u5c40\u6240\u7684\u306b\u30ea\u30cd\u30fc\u30e0\u3059\u308b\u3053\u3068\u3067\u660e\u78ba\u306b\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nIf there is a name clash, we can disambiguate by using *as*{: .keyword } keyword to locally rename the clashing entity:\n-->\n\n``` kotlin\nimport foo.Bar // Bar\u306f\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\nimport bar.Bar as bBar // bBar\u306f'bar.Bar'\u3092\u610f\u5473\u3059\u308b\n```\n\n<!--original\n``` kotlin\nimport foo.Bar // Bar is accessible\nimport bar.Bar as bBar // bBar stands for 'bar.Bar'\n```\n-->\n\nimport \u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\u9650\u5b9a\u3055\u308c\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u4ed6\u306e\u5ba3\u8a00\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nThe `import` keyword is not restricted to importing classes; you can also use it to import other declarations:\n-->\n\n* \u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u95a2\u6570\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\n* [\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00](object-declarations.html#object-declarations)\u3067\u5ba3\u8a00\u3055\u308c\u305f\u95a2\u6570\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\n* [enum\u5b9a\u6570](enum-classes.html)\n\n<!--original\n  * top-level functions and properties;\n  * functions and properties declared in [object declarations](object-declarations.html#object-declarations);\n  * [enum constants](enum-classes.html)\n-->\n\nJava\u3068\u306f\u9055\u3063\u3066\u3001Kotlin\u306f\u5225\u306e\"import static\"\u69cb\u6587\u3092\u6301\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u5168\u3066\u306e\u5ba3\u8a00\u306f\u666e\u901a\u306e`import`\u30ad\u30fc\u30ef\u30fc\u30c9\u306b\u3088\u3063\u3066\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nUnlike Java, Kotlin does not have a separate \"import static\" syntax; all of these declarations are imported using the regular `import` keyword.\n-->\n\n## \u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u5ba3\u8a00\u306e\u53ef\u8996\u6027\n\n<!--original\n## Visibility of Top-level Declarations\n-->\n\n\u3082\u3057\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u5ba3\u8a00\u306b*private*{: .keyword }\u30de\u30fc\u30af\u304c\u3064\u3044\u3066\u3044\u308c\u3070\u3001\u305d\u308c\u304c\u5ba3\u8a00\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u5185\u306b\u5bfe\u3057\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u3067\u3059\u3002 \uff08[\u53ef\u8996\u6027\u4fee\u98fe\u5b50](visibility-modifiers.html) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09\n\n<!--original\nIf a top-level declaration is marked *private*{: .keyword }, it is private to the file it's declared in (see [Visibility Modifiers](visibility-modifiers.html)).\n-->\n\n# \u5236\u5fa1\u30d5\u30ed\u30fc\n\n<!--original\n# Control Flow\n-->\n\n## if\u5f0f\n\n<!--original\n## If Expression\n-->\n\nKotlin\u3067\u306f\u3001*if*{: .keyword }\u306f\u5f0f\u3067\u3042\u308a\u3001\u3059\u306a\u308f\u3061\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u5f93\u3063\u3066\u3001\u4e09\u9805\u6f14\u7b97\u5b50\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\uff08\u6761\u4ef6 ? \u771f\u306e\u6642 : \u507d\u306e\u6642\uff09\u3002\u306a\u305c\u306a\u3089\u666e\u901a\u306e *if*{: .keyword } \u304c\u305d\u306e\u5f79\u5272\u3092\u679c\u305f\u3059\u305f\u3081\u3067\u3059\u3002\n\n<!--original\nIn Kotlin, *if*{: .keyword } is an expression, i.e. it returns a value.\nTherefore there is no ternary operator (condition ? then : else), because ordinary *if*{: .keyword } works fine in this role.\n-->\n\n``` kotlin\n// \u4f1d\u7d71\u7684\u306a\u4f7f\u3044\u65b9\nvar max = a \nif (a < b) \n  max = b \n \n// else\u4ed8\u304d\nvar max: Int\nif (a > b) \n  max = a \nelse \n  max = b \n \n// \u8868\u73fe\u3068\u3057\u3066\nval max = if (a > b) a else b\n```\n\n<!--original\n``` kotlin\n// Traditional usage \nvar max = a \nif (a < b) \n  max = b \n \n// With else \nvar max: Int\nif (a > b) \n  max = a \nelse \n  max = b \n \n// As expression \nval max = if (a > b) a else b\n```\n-->\n\n*if*{: .keyword } \u306e\u5206\u5c90\u306f\u30d6\u30ed\u30c3\u30af\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u6700\u5f8c\u306e\u5f0f\u304c\u305d\u306e\u30d6\u30ed\u30c3\u30af\u306e\u5024\u3068\u306a\u308a\u307e\u3059\uff1a\n\n<!--original\n*if*{: .keyword } branches can be blocks, and the last expression is the value of a block:\n-->\n\n``` kotlin\nval max = if (a > b) { \n    print(\"Choose a\") \n    a \n  } \n  else { \n    print(\"Choose b\") \n    b \n  }\n```\n\n<!--original\n``` kotlin\nval max = if (a > b) { \n    print(\"Choose a\") \n    a \n  } \n  else { \n    print(\"Choose b\") \n    b \n  }\n```\n-->\n\n\u3082\u3057*if*{: .keyword }\u3092\u6587\u3067\u306f\u306a\u304f\u5f0f\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\uff08\u4f8b\u3048\u3070\u5024\u3092\u8fd4\u3057\u305f\u308a\u5909\u6570\u306b\u4ee3\u5165\u3057\u305f\u308a\u3059\u308b\uff09\u306a\u3089\u3070\u3001\u305d\u306e\u5f0f\u306b\u306f`else`\u5206\u5c90\u304c\u5fc5\u8981\u3067\u3059\u3002 \n\n<!--original\nIf you're using *if*{: .keyword } as an expression rather than a statement (for example, returning its value or\nassigning it to a variable), the expression is required to have an `else` branch.\n-->\n\n[*if*{: .keyword }\u306e\u6587\u6cd5](grammar.html#if)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee the [grammar for *if*{: .keyword }](grammar.html#if).\n-->\n\n## when\u5f0f\n\n<!--original\n## When Expression\n-->\n\n*when*{: .keyword } \u306fC\u8a00\u8a9e\u306e\u3088\u3046\u306a\u8a00\u8a9e\u306b\u304a\u3051\u308bswitch\u6f14\u7b97\u5b50\u306e\u7f6e\u304d\u63db\u3048\u3067\u3059\u3002\u6700\u3082\u7c21\u5358\u306a\u5f62\u5f0f\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\n\n<!--original\n*when*{: .keyword } replaces the switch operator of C-like languages. In the simplest form it looks like this\n-->\n\n``` kotlin\nwhen (x) {\n  1 -> print(\"x == 1\")\n  2 -> print(\"x == 2\")\n  else -> { // \u3053\u306e\u30d6\u30ed\u30c3\u30af\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\n    print(\"x is neither 1 nor 2\")\n  }\n}\n```\n\n<!--original\n``` kotlin\nwhen (x) {\n  1 -> print(\"x == 1\")\n  2 -> print(\"x == 2\")\n  else -> { // Note the block\n    print(\"x is neither 1 nor 2\")\n  }\n}\n```\n-->\n\n*when*{: .keyword } \u306f\u305d\u306e\u5f15\u6570\u3068\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u308b\u5206\u5c90\u304c\u73fe\u308c\u308b\u307e\u3067\u3001\u9806\u756a\u306b\u5168\u3066\u306e\u5206\u5c90\u306b\u5bfe\u3057\u3066\u6bd4\u8f03\u3055\u308c\u307e\u3059\u3002*when*{: .keyword } \u306f\u5f0f\u3068\u3057\u3066\u3082\u6587\u3068\u3057\u3066\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3082\u3057\u5f0f\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308c\u3070\u3001\u305d\u306e\u5024\u306f\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u305f\u5206\u5c90\u304c\u5168\u3066\u306e\u5f0f\u306e\u5024\u3068\u306a\u308a\u307e\u3059\u3002\u3082\u3057\u6587\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308c\u3070\u3001\u500b\u5225\u306e\u6761\u4ef6\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\uff08*if*{: .keyword }\u3068\u5168\u304f\u540c\u3058\u304f\u3001\u305d\u308c\u305e\u308c\u306e\u6761\u4ef6\u306f\u30d6\u30ed\u30c3\u30af\u306b\u306a\u308c\u308b\u305f\u3081\u3001\u305d\u306e\u5024\u306f\u30d6\u30ed\u30c3\u30af\u5185\u306e\u6700\u5f8c\u306e\u5f0f\u306e\u3082\u306e\u3068\u306a\u308b\u3002\uff09\n\n<!--original\n*when*{: .keyword } matches its argument against all branches sequentially until some branch condition is satisfied.\n*when*{: .keyword } can be used either as an expression or as a statement. If it is used as an expression, the value\nof the satisfied branch becomes the value of the overall expression. If it is used as a statement, the values of\nindividual branches are ignored. (Just like with *if*{: .keyword }, each branch can be a block, and its value\nis the value of the last expression in the block.)\n-->\n\n*else*{: .keyword }\u6761\u4ef6\u306f\u4ed6\u306e\u6761\u4ef6\u304c\u5168\u3066\u6e80\u305f\u3055\u308c\u306a\u304b\u3063\u305f\u969b\u306b\u8a55\u4fa1\u3055\u308c\u307e\u3059\u3002 \u3082\u3057\u304c\u5f0f\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u308c\u3070\u3001\u5168\u3066\u306e\u3042\u308a\u5f97\u308b\u5834\u5408\u3092\u5206\u5c90\u6761\u4ef6\u3067\u7db2\u7f85\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8a3c\u660e\u3067\u304d\u306a\u3044\u9650\u308a\u306f\u3001*else*{: .keyword }\u6761\u4ef6\u306f\u5fc5\u9808\u3067\u3059\u3002\n\n<!--original\nThe *else*{: .keyword } branch is evaluated if none of the other branch conditions are satisfied.\nIf *when*{: .keyword } is used as an expression, the *else*{: .keyword } branch is mandatory,\nunless the compiler can prove that all possible cases are covered with branch conditions.\n-->\n\n\u3082\u3057\u305f\u304f\u3055\u3093\u306e\u6761\u4ef6\u3092\u540c\u3058\u65b9\u6cd5\u3067\u51e6\u7406\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306b\u306f\u3001\u5206\u5c90\u6761\u4ef6\u3092\u30b3\u30f3\u30de\u3067\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nIf many cases should be handled in the same way, the branch conditions may be combined with a comma:\n-->\n\n``` kotlin\nwhen (x) {\n  0, 1 -> print(\"x == 0 or x == 1\")\n  else -> print(\"\u305d\u308c\u4ee5\u5916\")\n}\n```\n\n<!--original\n``` kotlin\nwhen (x) {\n  0, 1 -> print(\"x == 0 or x == 1\")\n  else -> print(\"otherwise\")\n}\n```\n-->\n\n\u5206\u5c90\u6761\u4ef6\u3068\u3057\u3066\u4efb\u610f\u306e\u5f0f\uff08\u5b9a\u6570\u306b\u9650\u3089\u306a\u3044\uff09\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nWe can use arbitrary expressions (not only constants) as branch conditions\n-->\n\n``` kotlin\nwhen (x) {\n  parseInt(s) -> print(\"s\u306fx\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\")\n  else -> print(\"s\u306fx\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u306a\u3044\")\n}\n```\n\n<!--original\n``` kotlin\nwhen (x) {\n  parseInt(s) -> print(\"s encodes x\")\n  else -> print(\"s does not encode x\")\n}\n```\n-->\n\n*in*{: .keyword }\u307e\u305f\u306f*!in*{: .keyword }\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e [\u7bc4\u56f2 (range)](ranges.html) \u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a \n\n<!--original\nWe can also check a value for being *in*{: .keyword } or *!in*{: .keyword } a [range](ranges.html) or a collection:\n-->\n\n``` kotlin\nwhen (x) {\n  in 1..10 -> print(\"x\u306f\u7bc4\u56f2\u5185\")\n  in validNumbers -> print(\"x\u306f\u6709\u52b9\")\n  !in 10..20 -> print(\"x\u306f\u7bc4\u56f2\u5916\")\n  else -> print(\"\u3069\u308c\u306b\u3082\u8a72\u5f53\u305b\u305a\")\n}\n```\n\n<!--original\n``` kotlin\nwhen (x) {\n  in 1..10 -> print(\"x is in the range\")\n  in validNumbers -> print(\"x is valid\")\n  !in 10..20 -> print(\"x is outside the range\")\n  else -> print(\"none of the above\")\n}\n```\n-->\n\n\u5024\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u4ed6\u306e\u65b9\u6cd5\u3068\u3057\u3066\u3001\u7279\u5b9a\u306e\u578b\u306e*is*{: .keyword }\u307e\u305f\u306f*!is*{: .keyword }\u304c\u3042\u308a\u307e\u3059\u3002[\u30b9\u30de\u30fc\u30c8\u30ad\u30e3\u30b9\u30c8](typecasts.html#smart-casts)\u306e\u304a\u304b\u3052\u3067\u3001\u305d\u306e\u578b\u306e\u30e1\u30bd\u30c3\u30c9\u3084\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u8ffd\u52a0\u306e\u30c1\u30a7\u30c3\u30af\u7121\u3057\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nAnother possibility is to check that a value *is*{: .keyword } or *!is*{: .keyword } of a particular type. Note that,\ndue to [smart casts](typecasts.html#smart-casts), you can access the methods and properties of the type without\nany extra checks.\n-->\n\n```kotlin\nval hasPrefix = when(x) {\n  is String -> x.startsWith(\"prefix\")\n  else -> false\n}\n```\n\n<!--original\n```kotlin\nval hasPrefix = when(x) {\n  is String -> x.startsWith(\"prefix\")\n  else -> false\n}\n```\n-->\n\n*when*{: .keyword }\u306f *if*{: .keyword}-*else*{: .keyword} *if*{: .keyword}\u9023\u9396\u3092\u4ee3\u66ff\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u5f15\u6570\u304c\u4e0e\u3048\u3089\u308c\u306a\u3044\u5834\u5408\u306f\u3001\u5206\u5c90\u6761\u4ef6\u306f\u5358\u7d14\u306aboolean\u306e\u5f0f\u3068\u306a\u308a\u3001\u5206\u5c90\u306f\u305d\u306e\u6761\u4ef6\u304ctrue\u306e\u5834\u5408\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\uff1a\n\n<!--original\n*when*{: .keyword } can also be used as a replacement for an *if*{: .keyword }-*else*{: .keyword } *if*{: .keyword } chain.\nIf no argument is supplied, the branch conditions are simply boolean expressions, and a branch is executed when its condition is true:\n-->\n\n``` kotlin\nwhen {\n  x.isOdd() -> print(\"x is odd\")\n  x.isEven() -> print(\"x is even\")\n  else -> print(\"x is funny\")\n}\n```\n\n<!--original\n``` kotlin\nwhen {\n  x.isOdd() -> print(\"x is odd\")\n  x.isEven() -> print(\"x is even\")\n  else -> print(\"x is funny\")\n}\n```\n-->\n\n[*when*{: .keyword } \u306e\u6587\u6cd5](grammar.html#when)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee the [grammar for *when*{: .keyword }](grammar.html#when).\n\n-->\n\n## For\u30eb\u30fc\u30d7\n\n<!--original\n## For Loops\n-->\n\n*for*{: .keyword }\u30eb\u30fc\u30d7\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3088\u3063\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3082\u306e\u3092\u4f55\u3067\u3082\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002\u69cb\u6587\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\uff1a\n\n<!--original\n*for*{: .keyword } loop iterates through anything that provides an iterator. The syntax is as follows:\n-->\n\n``` kotlin\nfor (item in collection)\n  print(item)\n```\n\n<!--original\n``` kotlin\nfor (item in collection)\n  print(item)\n```\n-->\n\n\u672c\u6587\u3092\u30d6\u30ed\u30c3\u30af\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nThe body can be a block.\n-->\n\n``` kotlin\nfor (item: Int in ints) {\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nfor (item: Int in ints) {\n  // ...\n}\n```\n-->\n\n\u524d\u8ff0\u3057\u305f\u3088\u3046\u306b\u3001 *for*{: .keyword} \u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3082\u306e\u3092\u4f55\u3067\u3082\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u3057\u307e\u3059\u3002\u3059\u306a\u308f\u3061\uff1a\n\n<!--original\nAs mentioned before, *for*{: .keyword } iterates through anything that provides an iterator, i.e.\n-->\n\n* \u30e1\u30f3\u30d0\u95a2\u6570\u3084\u62e1\u5f35\u95a2\u6570\u306e `iterator()` \u306f\u578b\u3092\u8fd4\u3057\u3001\n  * \u30e1\u30f3\u30d0\u95a2\u6570\u3084\u62e1\u5f35\u95a2\u6570\u306e `next()` \u3068\n  * \u30e1\u30f3\u30d0\u95a2\u6570\u3084\u62e1\u5f35\u95a2\u6570\u306e `hasNext()` \u306f `Boolean` \u3092\u8fd4\u3057\u307e\u3059\u3002\n\n<!--original\n* has a member- or extension-function `iterator()`, whose return type\n  * has a member- or extension-function `next()`, and\n  * has a member- or extension-function `hasNext()` that returns `Boolean`.\n-->\n\n\u3053\u308c\u30893\u3064\u306e\u95a2\u6570\u306f\u5168\u3066 `\u6f14\u7b97\u5b50 (operator)` \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nAll of these three functions need to be marked as `operator`.\n-->\n\n\u914d\u5217\u306e`for`\u30eb\u30fc\u30d7\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u306a\u3044\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30d9\u30fc\u30b9\u306e\u30eb\u30fc\u30d7\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nA `for` loop over an array is compiled to an index-based loop that does not create an iterator object.\n-->\n\n\u3082\u3057\u914d\u5217\u3084\u30ea\u30b9\u30c8\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4ed8\u304d\u3067\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3057\u305f\u3044\u306a\u3089\u3070\u3001\u3053\u306e\u65b9\u6cd5\u3092\u4f7f\u7528\u3067\u304d\u308b\uff1a \n\n<!--original\nIf you want to iterate through an array or a list with an index, you can do it this way:\n-->\n\n``` kotlin\nfor (i in array.indices)\n  print(array[i])\n```\n\n<!--original\n``` kotlin\nfor (i in array.indices)\n  print(array[i])\n```\n-->\n\n\u201c\u7bc4\u56f2\u306e\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\u201d\u306f\u4f59\u5206\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u306a\u3044\u6700\u9069\u306a\u5b9f\u88c5\u3078\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3053\u3068\u3002\n\n<!--original\nNote that this \"iteration through a range\" is compiled down to optimal implementation with no extra objects created.\n-->\n\n\u5225\u65b9\u6cd5\u3068\u3057\u3066\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u306e withIndex \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nAlternatively, you can use the `withIndex` library function:\n-->\n\n``` kotlin\nfor ((index, value) in array.withIndex()) {\n    println(\"$index\u306e\u8981\u7d20\u306f$value\")\n}\n```\n\n<!--original\n``` kotlin\nfor ((index, value) in array.withIndex()) {\n    println(\"the element at $index is $value\")\n}\n```\n-->\n\n[*for*{: .keyword }\u306e\u6587\u6cd5](grammar.html#for)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee the [grammar for *for*{: .keyword }](grammar.html#for).\n-->\n\n## while\u30eb\u30fc\u30d7\n\n<!--original\n## While Loops\n-->\n\n*while*{: .keyword } \u3068 *do*{: .keyword }..*while*{: .keyword } \u306f\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u52d5\u304d\u307e\u3059\uff1a\n\n<!--original\n*while*{: .keyword } and *do*{: .keyword }..*while*{: .keyword } work as usual\n-->\n\n``` kotlin\nwhile (x > 0) {\n  x--\n}\n\ndo {\n  val y = retrieveData()\n} while (y != null) // y \u306f\u3053\u3053\u3067\u53ef\u8996(visible)\n```\n\n<!--original\n``` kotlin\nwhile (x > 0) {\n  x--\n}\n\ndo {\n  val y = retrieveData()\n} while (y != null) // y is visible here!\n```\n-->\n\n[*while*{: .keyword }\u306e\u6587\u6cd5](grammar.html#while)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee the [grammar for *while*{: .keyword }](grammar.html#while).\n-->\n\n## \u30eb\u30fc\u30d7\u5185\u3067\u306ebreak\u3068continue\n\n<!--original\n## Break and continue in loops\n-->\n\nKotlin\u306f\u30eb\u30fc\u30d7\u4e2d\u306e\u5f93\u6765\u306e *break*{: .keyword }\u3068*continue*{: .keyword } \u6f14\u7b97\u5b50\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002[Return\u3068\u30b8\u30e3\u30f3\u30d7](returns.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nKotlin supports traditional *break*{: .keyword } and *continue*{: .keyword } operators in loops. See [Returns and jumps](returns.html).\n-->\n\n# return\u3068\u30b8\u30e3\u30f3\u30d7\n\n<!--original\n# Returns and Jumps\n-->\n\nKotlin\u306b\u306f3\u3064\u306e\u69cb\u9020\u7684\u30b8\u30e3\u30f3\u30d7\u6f14\u7b97\u5b50\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nKotlin has three structural jump operators\n-->\n\n* *return*{: .keyword }. \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6700\u8fd1\u306e\u30af\u30ed\u30fc\u30b8\u30e3\uff08\u95a2\u6570\u9589\u5305\uff09\u3084[\u533f\u540d\u95a2\u6570](lambdas.html#anonymous-functions)\u304b\u3089\u629c\u3051\u51fa\u3057\u307e\u3059\u3002\n* *break*{: .keyword } \u6700\u3082\u8fd1\u3044\u5916\u5074\u306e\u30eb\u30fc\u30d7\u3092\u7d42\u308f\u3089\u305b\u307e\u3059\u3002\n* *continue*{: .keyword }. \u6700\u3082\u8fd1\u3044\u5916\u5074\u306e\u30eb\u30fc\u30d7\u3067\u3042\u308b\u6b21\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u9032\u307f\u307e\u3059\u3002\n\n<!--original\n* *return*{: .keyword }. By default returns from the nearest enclosing function or [anonymous function](lambdas.html#anonymous-functions).\n* *break*{: .keyword }. Terminates the nearest enclosing loop.\n* *continue*{: .keyword }. Proceeds to the next step of the nearest enclosing loop.\n-->\n\n\n## break\u3068continue\u306e\u30e9\u30d9\u30eb\n\n<!--original\n## Break and Continue Labels\n-->\n\nKotlin\u306b\u304a\u3051\u308b\u4efb\u610f\u306e\u5f0f\u3092 *label*{: .keyword }\u3067\u30de\u30fc\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30e9\u30d9\u30eb\u306f\u3001\u305f\u3068\u3048\u3070\u3001 `@` \u8a18\u53f7\u306b\u7d9a\u304f\u8b58\u5225\u5b50\u306e\u5f62\u5f0f\u3092\u6301\u3063\u3066\u3044\u307e\u3059\uff1a `abc@` \u3001`fooBar@`\u304c\u6709\u52b9\u306a\u30e9\u30d9\u30eb\uff08[\u6587\u6cd5](grammar.html#label)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff09\u3067\u3059\u3002\u5f0f\u306b\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u308b\u306b\u306f\u3001\u5f0f\u306e\u524d\u306b\u30e9\u30d9\u30eb\u3092\u7f6e\u304d\u307e\u3057\u3087\u3046\uff1a\n\n<!--original\nAny expression in Kotlin may be marked with a *label*{: .keyword }.\nLabels have the form of an identifier followed by the `@` sign, for example: `abc@`, `fooBar@` are valid labels (see the [grammar](grammar.html#label)).\nTo label an expression, we just put a label in front of it\n-->\n\n``` kotlin\nloop@ for (i in 1..100) {\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nloop@ for (i in 1..100) {\n  // ...\n}\n```\n-->\n\n\u3055\u3042\u3001\u3053\u308c\u3067\u79c1\u305f\u3061\u306f *break*{: .keyword } \u3084 *continue*{: .keyword } \u3092\u30e9\u30d9\u30eb\u4ed8\u3051\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff1a\n\n<!--original\nNow, we can qualify a *break*{: .keyword } or a *continue*{: .keyword } with a label:\n-->\n\n``` kotlin\nloop@ for (i in 1..100) {\n  for (j in 1..100) {\n    if (...)\n      break@loop\n  }\n}\n```\n\n<!--original\n``` kotlin\nloop@ for (i in 1..100) {\n  for (j in 1..100) {\n    if (...)\n      break@loop\n  }\n}\n```\n-->\n\n\u30e9\u30d9\u30eb\u4ed8\u304d *break*{: .keyword }  \u306f\u305d\u306e\u30e9\u30d9\u30eb\u304c\u4ed8\u3044\u305f\u30eb\u30fc\u30d7\u306e\u53f3\u5f8c\u306e\u5b9f\u884c\u30dd\u30a4\u30f3\u30c8\u3078\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002\n*continue*{: .keyword } \u306f\u305d\u306e\u30eb\u30fc\u30d7\u306e\u6b21\u306e\u7e70\u308a\u8fd4\u3057\u5b9f\u884c\uff08\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\uff09\u307e\u3067\u9032\u307f\u307e\u3059\u3002\n\n<!--original\nA *break*{: .keyword } qualified with a label jumps to the execution point right after the loop marked with that label.\nA *continue*{: .keyword } proceeds to the next iteration of that loop.\n\n-->\n\n## \u30e9\u30d9\u30eb\u306b\u5fa9\u5e30\u3059\u308b\n\n<!--original\n## Return at Labels\n-->\n\nKotlin\u3067\u306f\u3001\u95a2\u6570\u30ea\u30c6\u30e9\u30eb\u3001\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f0f\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u95a2\u6570\u3092\u5165\u308c\u5b50\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3042\u308b\u6761\u4ef6\u4ed8\u304d\u306e *return*{: .keyword }\u3092\u4f7f\u3046\u3068\u3001\u5916\u5074\u306e\u95a2\u6570\u304b\u3089\u5fa9\u5e30\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6700\u3082\u91cd\u8981\u306a\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u304b\u3089\u306ereturn\u3067\u3059\u3002\u3053\u308c\u3092\u66f8\u304f\u3068\u304d\u3001\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\uff1a\n\n<!--original\nWith function literals, local functions and object expression, functions can be nested in Kotlin. \nQualified *return*{: .keyword }s allow us to return from an outer function. \nThe most important use case is returning from a lambda expression. Recall that when we write this:\n-->\n\n``` kotlin\nfun foo() {\n  ints.forEach {\n    if (it == 0) return\n    print(it)\n  }\n}\n```\n\n<!--original\n``` kotlin\nfun foo() {\n  ints.forEach {\n    if (it == 0) return\n    print(it)\n  }\n}\n```\n-->\n\n*return*{: .keyword } \u5f0f\u306f\u6700\u3082\u5185\u5074\u306e\u95a2\u6570\u3001\u3059\u306a\u308f\u3061 `foo` \u304b\u3089\u5fa9\u5e30\u3057\u307e\u3059\u3002\n\uff08\u3053\u306e\u3088\u3046\u306a\u975e\u5c40\u6240\u7684\u5fa9\u5e30\u304c[\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570](inline-functions.html)\u306b\u6e21\u3055\u308c\u305f\u30e9\u30e0\u30c0\u5f0f\u3067\u306e\u307f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\uff09\n\u3082\u3057\u30e9\u30e0\u30c0\u5f0f\u304b\u3089\u5fa9\u5e30\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u305d\u308c\u306b\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3001 *return*{: .keyword } \u3092\u4fee\u98fe\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a\n\n<!--original\nThe *return*{: .keyword }-expression returns from the nearest enclosing function, i.e. `foo`.\n(Note that such non-local returns are supported only for lambda expressions passed to [inline functions](inline-functions.html).)\nIf we need to return from a lambda expression, we have to label it and qualify the *return*{: .keyword }:\n-->\n\n``` kotlin\nfun foo() {\n  ints.forEach lit@ {\n    if (it == 0) return@lit\n    print(it)\n  }\n}\n```\n\n<!--original\n``` kotlin\nfun foo() {\n  ints.forEach lit@ {\n    if (it == 0) return@lit\n    print(it)\n  }\n}\n```\n-->\n\n\u3053\u308c\u306f\u30e9\u30e0\u30c0\u5f0f\u304b\u3089\u306e\u307f\u5fa9\u5e30\u3057\u307e\u3059\u3002\u591a\u304f\u306e\u5834\u5408\u3001\u6697\u9ed9\u306e\u30e9\u30d9\u30eb\u3092\u4f7f\u7528\u3059\u308b\u65b9\u304c\u4fbf\u5229\u3067\u3059\u3002\n\u305d\u306e\u3088\u3046\u306a\u30e9\u30d9\u30eb\u306f\u3001\u30e9\u30e0\u30c0\u304c\u6e21\u3055\u308c\u305f\u95a2\u6570\u3068\u540c\u3058\u540d\u524d\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nNow, it returns only from the lambda expression. Oftentimes it is more convenient to use implicits labels:\nsuch a label has the same name as the function to which the lambda is passed.\n-->\n\n``` kotlin\nfun foo() {\n  ints.forEach {\n    if (it == 0) return@forEach\n    print(it)\n  }\n}\n```\n\n<!--original\n``` kotlin\nfun foo() {\n  ints.forEach {\n    if (it == 0) return@forEach\n    print(it)\n  }\n}\n```\n-->\n\n\u4ee3\u308f\u308a\u306e\u624b\u6cd5\u3068\u3057\u3066\u3001[\u7121\u540d\u95a2\u6570](lambdas.html#anonymous-functions)\u3068\u30e9\u30e0\u30c0\u5f0f\u3092\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u7121\u540d\u95a2\u6570\u5185\u306e *return*{: .keyword } \u6587\u306f\u3001\u305d\u306e\u7121\u540d\u95a2\u6570\u81ea\u4f53\u304b\u3089\u5fa9\u5e30\u3057\u307e\u3059\u3002\n\n<!--original\nAlternatively, we can replace the lambda expression with an [anonymous function](lambdas.html#anonymous-functions).\nA *return*{: .keyword } statement in an anomymous function will return from the anonymous function itself.\n-->\n\n``` kotlin\nfun foo() {\n  ints.forEach(fun(value: Int) {\n    if (value == 0) return\n    print(value)\n  })\n}\n```\n\n<!--original\n``` kotlin\nfun foo() {\n  ints.forEach(fun(value: Int) {\n    if (value == 0) return\n    print(value)\n  })\n}\n```\n-->\n\n\u5024\u3092\u8fd4\u3059\u3068\u304d\u3001\u30d1\u30fc\u30b5\u306f\u8cc7\u683c\u3092\u6301\u3064return\u3092\u512a\u5148\u3057\u307e\u3059\u3002\u3059\u306a\u308f\u3061\u3001\n\n<!--original\nWhen returning a value, the parser gives preference to the qualified return, i.e.\n-->\n\n``` kotlin\nreturn@a 1\n```\n\n<!--original\n``` kotlin\nreturn@a 1\n```\n-->\n\n\u4e0a\u8a18\u306f\u300c `@a` \u30e9\u30d9\u30eb\u306b\u304a\u3051\u308breturn `1` \u300d\u3092\u610f\u5473\u3057\u3001\u300c `(@a 1)` \u30e9\u30d9\u30eb\u304c\u4ed8\u3044\u305f\u5f0f\u304b\u3089\u306ereturn\u300d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n<!--original\nmeans \"return `1` at label `@a`\" and not \"return a labeled expression `(@a 1)`\".\n-->\n\n# \u30af\u30e9\u30b9\u3068\u7d99\u627f\n\n<!--original\n# Classes and Inheritance\n-->\n\n## \u30af\u30e9\u30b9\n\n<!--original\n## Classes\n-->\n\nKotlin\u3067\u306e\u30af\u30e9\u30b9\u306f\u3001*class*{: .keyword }\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u5ba3\u8a00\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nClasses in Kotlin are declared using the keyword *class*{: .keyword }:\n-->\n\n``` kotlin\nclass Invoice {\n}\n```\n\n<!--original\n``` kotlin\nclass Invoice {\n}\n```\n-->\n\n\u30af\u30e9\u30b9\u5ba3\u8a00\u306f\u30af\u30e9\u30b9\u540d\u3001\u30af\u30e9\u30b9\u30d8\u30c3\u30c0\uff08\u305d\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u4e3b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u7b49\uff09\u3001\u305d\u3057\u3066\u6ce2\u62ec\u5f27\u3067\u62ec\u3089\u308c\u305f\u30af\u30e9\u30b9\u672c\u4f53\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002\u30d8\u30c3\u30c0\u3068\u672c\u4f53\u306f\u4e21\u65b9\u3068\u3082\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30af\u30e9\u30b9\u306b\u672c\u4f53\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u6ce2\u62ec\u5f27\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nThe class declaration consists of the class name, the class header (specifying its type parameters, the primary\nconstructor etc.) and the class body, surrounded by curly braces. Both the header and the body are optional;\nif the class has no body, curly braces can be omitted.\n-->\n\n``` kotlin\nclass Empty\n```\n\n\n<!--original\n``` kotlin\nclass Empty\n```\n\n-->\n\n### \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n<!--original\n### Constructors\n-->\n\nKotlin\u5185\u306e\u30af\u30e9\u30b9\u306f\u3001 **\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf** \u30681\u3064\u307e\u305f\u306f\u8907\u6570\u306e **\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf** \u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001\u30af\u30e9\u30b9\u306e\u30d8\u30c3\u30c0\u30fc\u306e\u4e00\u90e8\u3067\u3059\u3002\u30af\u30e9\u30b9\u540d\uff08\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3064\u3051\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff09\u306e\u5f8c\u306b\u7d9a\u304d\u307e\u3059\u3002\n\n<!--original\nA class in Kotlin can have a **primary constructor** and one or more **secondary constructors**. The primary\nconstructor is part of the class header: it goes after the class name (and optional type parameters).\n-->\n\n``` kotlin\nclass Person constructor(firstName: String) {\n}\n```\n\n<!--original\n``` kotlin\nclass Person constructor(firstName: String) {\n}\n```\n-->\n\n\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u53ef\u8996\u6027\u4fee\u98fe\u5b50\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001 *constructor*{: .keyword }\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nIf the primary constructor does not have any annotations or visibility modifiers, the *constructor*{: .keyword }\nkeyword can be omitted:\n-->\n\n``` kotlin\nclass Person(firstName: String) {\n}\n```\n\n<!--original\n``` kotlin\nclass Person(firstName: String) {\n}\n```\n-->\n\n\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001\u3069\u3093\u306a\u30b3\u30fc\u30c9\u3082\u542b\u3081\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u521d\u671f\u5316\u30b3\u30fc\u30c9\u306f\u3001*init*{: .keyword }\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u4ed8\u3044\u3066\u3044\u308b **\u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\u5185** \u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nThe primary constructor cannot contain any code. Initialization code can be placed\nin **initializer blocks**, which are prefixed with the *init*{: .keyword } keyword:\n-->\n\n``` kotlin\nclass Customer(name: String) {\n    init {\n        logger.info(\"Customer initialized with value ${name}\")\n    }\n}\n```\n\n<!--original\n``` kotlin\nclass Customer(name: String) {\n    init {\n        logger.info(\"Customer initialized with value ${name}\")\n    }\n}\n```\n-->\n\n\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3092\u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\u306b\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u30af\u30e9\u30b9\u672c\u4f53\u5185\u3067\u5ba3\u8a00\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u521d\u671f\u5316\u51e6\u7406\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nNote that parameters of the primary constructor can be used in the initializer blocks. They can also be used in\nproperty initializers declared in the class body:\n-->\n\n``` kotlin\nclass Customer(name: String) {\n    val customerKey = name.toUpperCase()\n}\n```\n\n<!--original\n``` kotlin\nclass Customer(name: String) {\n    val customerKey = name.toUpperCase()\n}\n```\n-->\n\n\u5b9f\u969b\u306b\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5ba3\u8a00\u3068\u521d\u671f\u5316\u3092\u4e3b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u884c\u3046\u305f\u3081\u306b\u3001Kotlin\u306f\u7c21\u6f54\u306a\u69cb\u6587\u304c\u3042\u308a\u307e\u3059\uff1a\n\n<!--original\nIn fact, for declaring properties and initializing them from the primary constructor, Kotlin has a concise syntax:\n\n-->\n\n``` kotlin\nclass Person(val firstName: String, val lastName: String, var age: Int) {\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nclass Person(val firstName: String, val lastName: String, var age: Int) {\n  // ...\n}\n```\n-->\n\n\u901a\u5e38\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u65b9\u6cd5\u306e\u3088\u3046\u306b\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u4e3b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u4e2d\u3067\u53ef\u5909\u5024\uff08\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff09 ( *var*{: .keyword } ) \u307e\u305f\u306f\u56fa\u5b9a\u5024\uff08\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff09 ( *val*{: .keyword} ) \u3067\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nMuch the same way as regular properties, the properties declared in the primary constructor can be\nmutable (*var*{: .keyword }) or read-only (*val*{: .keyword }).\n-->\n\n\u3082\u3057\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084\u53ef\u8996\u6027\u4fee\u98fe\u5b50\u3092\u6301\u3064\u5834\u5408\u306f\u3001 *constructor*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u4fee\u98fe\u5b50\u306f\u305d\u306e\u524d\u306b\u7f6e\u304b\u308c\u308b\uff1a\n\n<!--original\nIf the constructor has annotations or visibility modifiers, the *constructor*{: .keyword } keyword is required, and\nthe modifiers go before it:\n-->\n\n``` kotlin\nclass Customer public @Inject constructor(name: String) { ... }\n```\n\n<!--original\n``` kotlin\nclass Customer public @Inject constructor(name: String) { ... }\n```\n-->\n\n\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001[\u53ef\u8996\u6027\u4fee\u98fe\u5b50](visibility-modifiers.html#constructors)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nFor more details, see [Visibility Modifiers](visibility-modifiers.html#constructors).\n\n-->\n\n#### \u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n<!--original\n#### Secondary Constructors\n-->\n\n\u30af\u30e9\u30b9\u306f\u3001 *constructor*{: .keyword } \u30d7\u30ec\u30d5\u30a3\u30af\u30b9\u3068\u5171\u306b **\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf** \u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nThe class can also declare **secondary constructors**, which are prefixed with *constructor*{: .keyword }:\n-->\n\n``` kotlin\nclass Person {\n    constructor(parent: Person) {\n        parent.children.add(this)\n    }\n}\n```\n\n<!--original\n``` kotlin\nclass Person {\n    constructor(parent: Person) {\n        parent.children.add(this)\n    }\n}\n```\n-->\n\n\u3082\u3057\u30af\u30e9\u30b9\u304c\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u306a\u3089\u3001\u305d\u308c\u305e\u308c\u306e\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u76f4\u63a5\u7684\u307e\u305f\u306f\u9593\u63a5\u7684\u306b\u3001\u4ed6\u306e\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4ecb\u3057\u3066\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3078\u59d4\u8b72\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u540c\u30af\u30e9\u30b9\u306e\u4ed6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3078\u306e\u59d4\u8b72\u306f *this*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u7528\u3044\u3066\u884c\u3044\u307e\u3059\uff1a\n\n<!--original\nIf the class has a primary constructor, each secondary constructor needs to delegate to the primary constructor, either\ndirectly or indirectly through another secondary constructor(s). Delegation to another constructor of the same class\nis done using the *this*{: .keyword } keyword:\n-->\n\n``` kotlin\nclass Person(val name: String) {\n    constructor(name: String, parent: Person) : this(name) {\n        parent.children.add(this)\n    }\n}\n```\n\n<!--original\n``` kotlin\nclass Person(val name: String) {\n    constructor(name: String, parent: Person) : this(name) {\n        parent.children.add(this)\n    }\n}\n```\n-->\n\n\u3082\u3057\u975e\u62bd\u8c61\u30af\u30e9\u30b9\u304c\u4f55\u3082\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff08\u30d7\u30e9\u30a4\u30de\u30ea\u3001\u30bb\u30ab\u30f3\u30c0\u30ea\u5171\u306b\uff09\u3092\u5ba3\u8a00\u3057\u306a\u3051\u308c\u3070\u3001\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5f15\u6570\u7121\u3057\u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u969b\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u53ef\u8996\u6027\u306fpublic\u306b\u306a\u308a\u307e\u3059\u3002\u3082\u3057public\u306a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u671b\u307e\u306a\u3044\u306a\u3089\u3070\u3001\u7a7a\u306e\u4e3b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306a\u3044\u53ef\u8996\u6027\u3067\u5ba3\u8a00\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nIf a non-abstract class does not declare any constructors (primary or secondary), it will have a generated primary\nconstructor with no arguments. The visibility of the constructor will be public. If you do not want your class\nto have a public constructor, you need to declare an empty primary constructor with non-default visibility:\n-->\n\n``` kotlin\nclass DontCreateMe private constructor () {\n}\n```\n\n<!--original\n``` kotlin\nclass DontCreateMe private constructor () {\n}\n```\n-->\n\n> **\u6ce8\u610f**: JVM\u3067\u306f\u3001\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5168\u3066\u306e\u5f15\u6570\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u306a\u3089\u3001\n> \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u5f15\u6570\u7121\u3057\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u8ffd\u52a0\u3067\u751f\u6210\u3057\u3001\u305d\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n> \u3053\u308c\u306b\u3088\u308a\u3001Jackson\u3084JPA\u306e\u3088\u3046\u306b\u5f15\u6570\u304c\u7121\u3044\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u901a\u3057\u3066\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u3001\n> Kotlin\u3067\u4f7f\u3044\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\n>\n> ``` kotlin\n> class Customer(val customerName: String = \"\")\n> ```\n{:.info}\n \n<!--original\n> **NOTE**: On the JVM, if all of the parameters of the primary constructor have default values, the compiler will\n> generate an additional parameterless constructor which will use the default values. This makes it easier to use\n> Kotlin with libraries such as Jackson or JPA that create class instances through parameterless constructors.\n>\n> ``` kotlin\n> class Customer(val customerName: String = \"\")\n> ```\n{:.info}\n-->\n\n### \u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\n\n<!--original\n### Creating instances of classes\n-->\n\n\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u666e\u901a\u306e\u95a2\u6570\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u305b\u3070\u826f\u3044\u3067\u3059\uff1a\n\n<!--original\nTo create an instance of a class, we call the constructor as if it were a regular function:\n-->\n\n``` kotlin\nval invoice = Invoice()\n\nval customer = Customer(\"Joe Smith\")\n```\n\n<!--original\n``` kotlin\nval invoice = Invoice()\n\nval customer = Customer(\"Joe Smith\")\n```\n-->\n\nKotlin\u306f *new*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u6301\u305f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nNote that Kotlin does not have a *new*{: .keyword } keyword.\n-->\n\n\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30af\u30e9\u30b9\u3001\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u3001\u305d\u3057\u3066\u533f\u540d\u306e\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306e\u751f\u6210\u306f[\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30af\u30e9\u30b9](nested-classes.html)\u306e\u4e2d\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nCreating instances of nested, inner and anonymous inner classes is described in [Nested classes](nested-classes.html).\n-->\n\n### \u30af\u30e9\u30b9\u30e1\u30f3\u30d0\n\n<!--original\n### Class Members\n-->\n\n\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nClasses can contain\n-->\n\n* \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u521d\u671f\u5316\u30d6\u30ed\u30c3\u30af\n* [\u95a2\u6570](functions.html)\n* [\u30d7\u30ed\u30d1\u30c6\u30a3](properties.html)\n* [\u30cd\u30b9\u30c8\u3055\u308c\u305f\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9](nested-classes.html)\n* [\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5ba3\u8a00](object-declarations.html)\n\n\n<!--original\n* Constructors and initializer blocks\n* [Functions](functions.html)\n* [Properties](properties.html)\n* [Nested and Inner Classes](nested-classes.html)\n* [Object Declarations](object-declarations.html)\n\n-->\n\n## \u7d99\u627f\n<!--original\n## Inheritance\n-->\n\nKotlin\u306e\u5168\u3066\u306e\u30af\u30e9\u30b9\u306f\u5171\u901a\u306e `Any` \u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u3082\u3061\u307e\u3059\u3002\u3053\u308c\u306f\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306e\u5ba3\u8a00\u304c\u306a\u3044\u30af\u30e9\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n<!--original\nAll classes in Kotlin have a common superclass `Any`, that is a default super for a class with no supertypes declared:\n-->\n\n``` kotlin\nclass Example // Any\u304b\u3089\u6697\u9ed9\u306e\u7d99\u627f\n```\n\n<!--original\n``` kotlin\nclass Example // Implicitly inherits from Any\n```\n-->\n\n`Any` \u306f `java.lang.Object` \u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u7279\u306b\u6ce8\u610f\u3059\u3079\u304d\u306f\u3001 `equals()` \u3001 `hashCode()` \u3001 `toString()` \u4ee5\u5916\u306e\u30e1\u30f3\u30d0\u3092\u6301\u3061\u307e\u305b\u3093\u3002 \u8a73\u7d30\u306b\u3064\u3044\u3066\u306f [Java\u3068\u306e\u76f8\u4e92\u904b\u7528\u6027](java-interop.html#object-methods) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\n`Any` is not `java.lang.Object`; in particular, it does not have any members other than `equals()`, `hashCode()` and `toString()`.\nPlease consult the [Java interoperability](java-interop.html#object-methods) section for more details.\n-->\n\n\u30af\u30e9\u30b9\u30d8\u30c3\u30c0\u5185\u306e\u30b3\u30ed\u30f3\u306e\u5f8c\u306b\u578b\u3092\u66f8\u304f\u3068\u3001\u660e\u793a\u7684\u306b\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3092\u5ba3\u8a00\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nTo declare an explicit supertype, we place the type after a colon in the class header:\n-->\n\n``` kotlin\nopen class Base(p: Int)\n\nclass Derived(p: Int) : Base(p)\n```\n\n<!--original\n``` kotlin\nopen class Base(p: Int)\n\nclass Derived(p: Int) : Base(p)\n```\n-->\n\n\u3082\u3057\u3053\u306e\u3088\u3046\u306a\uff08\u660e\u793a\u7684\u306b\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3092\u5ba3\u8a00\u3059\u308b\uff09\u30af\u30e9\u30b9\u304c\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u3082\u3064\u306a\u3089\u3001\u57fa\u5e95\u306e\u578b\u3092\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u3001\u305d\u3053\u3067\u521d\u671f\u5316\u3067\u304d\u308b\uff08\u3057\u3001\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\uff09\u3002\n\n<!--original\nIf the class has a primary constructor, the base type can (and must) be initialized right there,\nusing the parameters of the primary constructor.\n-->\n\n\u3082\u3057\u3053\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u304c\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u306a\u3044\u306a\u3089\u3070\u3001\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u305d\u308c\u305e\u308c\u57fa\u5e95\u306e\u578b\u3092 *super*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u521d\u671f\u5316\u3059\u308b\u304b\u3001\u4ed6\u306e\u521d\u671f\u5316\u3057\u3066\u304f\u308c\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u59d4\u8b72\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\u3053\u306e\u4e8b\u4f8b\u3067\u306f\u7570\u306a\u308b\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u7570\u306a\u308b\u57fa\u5e95\u306e\u578b\u3092\u6301\u3064\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3053\u3068\uff1a\n\n<!--original\nIf the class has no primary constructor, then each secondary constructor has to initialize the base type\nusing the *super*{: .keyword } keyword, or to delegate to another constructor which does that.\nNote that in this case different secondary constructors can call different constructors of the base type:\n-->\n\n``` kotlin\nclass MyView : View {\n    constructor(ctx: Context) : super(ctx) {\n    }\n\n    constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs) {\n    }\n}\n```\n\n<!--original\n``` kotlin\nclass MyView : View {\n    constructor(ctx: Context) : super(ctx) {\n    }\n\n    constructor(ctx: Context, attrs: AttributeSet) : super(ctx, attrs) {\n    }\n}\n```\n-->\n\n\u30af\u30e9\u30b9\u306e *open*{: .keyword } \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u3001Java\u306e *final*{: .keyword } \u3068\u53cd\u5bfe\u3067\u3059\uff1a\u4ed6\u306e\u30af\u30e9\u30b9\u304c\u3053\u306e\u30af\u30e9\u30b9\u304b\u3089\u7d99\u627f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001Kotlin\u306e\u3059\u3079\u3066\u306e\u30af\u30e9\u30b9\u306f [Effective Java](http://www.oracle.com/technetwork/java/effectivejava-136174.html) \u306e\u30a2\u30a4\u30c6\u30e017\uff08 *\u7d99\u627f\u307e\u305f\u306f\u305d\u308c\u306e\u7981\u6b62\u306e\u305f\u3081\u306e\u30c7\u30b6\u30a4\u30f3\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8* \uff09\u306b\u5408\u81f4\u3059\u308b final \u3067\u3059\u3002\n\n<!--original\nThe *open*{: .keyword } annotation on a class is the opposite of Java's *final*{: .keyword }: it allows others\nto inherit from this class. By default, all classes in Kotlin are final, which\ncorresponds to [Effective Java](http://www.oracle.com/technetwork/java/effectivejava-136174.html),\nItem 17: *Design and document for inheritance or else prohibit it*.\n-->\n\n### \u30e1\u30f3\u30d0\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n<!--original\n### Overriding Members\n-->\n\n\u524d\u8ff0\u306e\u901a\u308a\u3001\u79c1\u305f\u3061\u306fKotlin\u306b\u660e\u793a\u7684\u306b\u3059\u308b\u3053\u3068\u306b\u3053\u3060\u308f\u308a\u307e\u3059\u3002\u305d\u3057\u3066\u3001Java\u3068\u306f\u7570\u306a\u308a\u3001Kotlin\u306f\u30e1\u30f3\u30d0\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3067\u304d\u308b\u30e1\u30f3\u30d0\uff08\u79c1\u305f\u3061\u306f *open* \u3068\u547c\u3093\u3067\u3044\u307e\u3059\uff09\u3068\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u81ea\u4f53\u306b\u660e\u793a\u7684\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002\n\n<!--original\nAs we mentioned before, we stick to making things explicit in Kotlin. And unlike Java, Kotlin requires explicit\nannotations for overridable members (we call them *open*) and for overrides:\n-->\n\n``` kotlin\nopen class Base {\n  open fun v() {}\n  fun nv() {}\n}\nclass Derived() : Base() {\n  override fun v() {}\n}\n```\n\n<!--original\n``` kotlin\nopen class Base {\n  open fun v() {}\n  fun nv() {}\n}\nclass Derived() : Base() {\n  override fun v() {}\n}\n```\n-->\n\n*override*{: .keyword } \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f `Derived.v()` \u306e\u305f\u3081\u306b\u5fc5\u8981\u3067\u3059\u3002\u3082\u3057\u306a\u3051\u308c\u3070\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u6587\u53e5\u3092\u8a00\u3046\u3067\u3057\u3087\u3046\u3002\u3082\u3057 `Base.nv()` \u306e\u3088\u3046\u306b *open*{: .keyword } \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u95a2\u6570\u306b\u306a\u3051\u308c\u3070\u3001\u30e1\u30bd\u30c3\u30c9\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u5185\u3067\u540c\u3058\u8b58\u5225\u5b50\u3067\u5ba3\u8a00\u3059\u308b\u3053\u3068\u306f *override*{: .keyword } \u306e\u6709\u7121\u306b\u304b\u304b\u308f\u3089\u305a\u6587\u6cd5\u9055\u53cd\u3067\u3059\u3002\u30d5\u30a1\u30a4\u30ca\u30eb\u30af\u30e9\u30b9\uff08\u4f8b\u3048\u3070\u3001 *open*{: .keyword } \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u6301\u305f\u306a\u3044\u30af\u30e9\u30b9\uff09\u306e\u4e2d\u3067\u306f\u3001open\u30e1\u30f3\u30d0\u306f\u7981\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nThe *override*{: .keyword } annotation is required for `Derived.v()`. If it were missing, the compiler would complain.\nIf there is no *open*{: .keyword } annotation on a function, like `Base.nv()`, declaring a method with the same signature in a subclass is illegal,\neither with *override*{: .keyword } or without it. In a final class (e.g. a class with no *open*{: .keyword } annotation), open members are prohibited.\n-->\n\n*override*{: .keyword } \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u308b\u30e1\u30f3\u30d0\u306f\u3001\u305d\u308c\u81ea\u8eab\u304copen\u3067\u3059\u3002\u3059\u306a\u308f\u3061\u3001\u30b5\u30d6\u30af\u30e9\u30b9\u5185\u3067\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3082\u3057\u518d\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3092\u7981\u6b62\u3057\u305f\u3051\u308c\u3070\u3001 *final*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\uff1a\n\n<!--original\nA member marked *override*{: .keyword } is itself open, i.e. it may be overridden in subclasses. If you want to prohibit re-overriding, use *final*{: .keyword }:\n-->\n\n``` kotlin\nopen class AnotherDerived() : Base() {\n  final override fun v() {}\n}\n```\n\n<!--original\n``` kotlin\nopen class AnotherDerived() : Base() {\n  final override fun v() {}\n}\n```\n-->\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3082\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3068\u540c\u3058\u3088\u3046\u306b\u52d5\u304d\u307e\u3059\u3002\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u5ba3\u8a00\u306e\u4e00\u90e8\u3068\u3057\u3066\u3001override\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nOverriding properties works in a similar way to overriding methods.\nNote that you can use the `override` keyword as part of the property declaration in a primary constructor:\n-->\n\n``` kotlin\nopen class Foo {\n    open val x: Int get { ... }\n}\n\nclass Bar1(override val x: Int) : Foo() {\n\n}\n```\n\n<!--original\n``` kotlin\nopen class Foo {\n    open val x: Int get { ... }\n}\n\nclass Bar1(override val x: Int) : Foo() {\n\n}\n```\n-->\n\n`val` \u30d7\u30ed\u30d1\u30c6\u30a3\u3092 `var` \u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u3001\u305d\u306e\u9006\u3082\u307e\u305f\u7136\u308a\u3067\u3059\uff08\u9006\u3082\u307e\u305f\u540c\u3058\u3067\u3059\uff09\u3002\u3053\u308c\u306f\u3001`val` \u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u672c\u8cea\u7684\u306bgetter\u30e1\u30bd\u30c3\u30c9\u3092\u5ba3\u8a00\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3042\u308a\u3001\u305d\u308c\u3092 `var` \u3068\u3057\u3066\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u306f\u3001\u3055\u3089\u306bsetter\u30e1\u30bd\u30c3\u30c9\u3092\u6d3e\u751f\u30af\u30e9\u30b9\u306b\u5ba3\u8a00\u3057\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n<!--original\nYou can also override a `val` property with a `var` property, but not vice versa.\nThis is allowed because a `val` property essentially declares a getter method, and overriding it as a `var` additionally declares a setter method in the derived class.\n\n-->\n\n#### \u5f85\u3063\u3066\uff01\u3058\u3083\u3042\u3069\u3046\u3084\u3063\u3066\u81ea\u5206\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30cf\u30c3\u30af\u3059\u308c\u3070\u826f\u3044\u306e\uff1f\uff01\n\n<!--original\n#### Wait! How will I hack my libraries now?!\n-->\n\n\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u306eKotlin\u3067\u306e\u65b9\u6cd5\uff08\u30af\u30e9\u30b9\u3084\u30e1\u30f3\u30d0\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067final\uff09\u306b\u306f1\u3064\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u3042\u306a\u305f\u304c\u4f7f\u7528\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u4f55\u304b\u3092\u30b5\u30d6\u30af\u30e9\u30b9\u5316\u3057\u3001 \u3044\u304f\u3064\u304b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3057\u3066\uff08\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8a2d\u8a08\u8005\u306f\u305d\u308c\u3092\u610f\u56f3\u3057\u3066\u3044\u306a\u3044\uff09 \u305d\u3053\u306b\u3044\u304f\u3064\u304b\u306e\u5384\u4ecb\u306a\u30cf\u30c3\u30af\u3092\u5c0e\u5165\u3059\u308b\u306e\u304c\u96e3\u3057\u304f\u306a\u308b\u3001\u3068\u3044\u3046\u554f\u984c\u3067\u3059\u3002\n\n<!--original\nOne issue with our approach to overriding (classes and members final by default) is that it would be difficult to subclass something inside the libraries you use to override some method that was not intended for overriding by the library designer, and introduce some nasty hack there.\n-->\n\n\u79c1\u305f\u3061\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u7406\u7531\u304b\u3089\u3001\u3053\u308c\u306f\u6b20\u70b9\u3067\u306f\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\uff1a\n\n<!--original\nWe think that this is not a disadvantage, for the following reasons:\n-->\n\n* \u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306f\u300c\u3068\u306b\u304b\u304f\u3053\u308c\u3089\u306e\u30cf\u30c3\u30af\u3092\u8a31\u53ef\u3059\u3079\u304d\u3067\u306f\u306a\u3044\u300d\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\n* \u540c\u69d8\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u53d6\u3063\u3066\u3044\u308b\u4ed6\u306e\u8a00\u8a9e (C++, C#) \u306f\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\n* \u3082\u3057\u672c\u5f53\u306b\u3053\u306e\u30cf\u30c3\u30af\u304c\u5fc5\u8981\u306a\u3089\u3070\u3001\u305d\u308c\u3067\u3082\u65b9\u6cd5\u306f\u6b8b\u3063\u3066\u3044\u308b\uff1a\u3044\u3064\u3067\u3082\u30cf\u30c3\u30af\u3092Java\u3067\u66f8\u304d\u3001Kotlin\u304b\u3089\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u308b\uff08 *[Java Interop](java-interop.html)\u3092\u53c2\u7167* \u3057\u3066\u304f\u3060\u3055\u3044 \uff09\u3057\u3001Aspect\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3044\u3064\u3082\u3053\u308c\u3089\u306e\u76ee\u7684\u306b\u304b\u306a\u3044\u307e\u3059\n\n<!--original\n* Best practices say that you should not allow these hacks anyway\n* People successfully use other languages (C++, C#) that have similar approach\n* If people really want to hack, there still are ways: you can always write your hack in Java and call it from Kotlin (*see [Java Interop](java-interop.html)*), and Aspect frameworks always work for these purposes\n-->\n\n### \u30eb\u30fc\u30eb\u306e\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\n\n\n<!--original\n### Overriding Rules\n-->\n\nKotlin\u3067\u306f\u3001\u7d99\u627f\u306e\u5b9f\u88c5\u306f\u6b21\u306e\u30eb\u30fc\u30eb\u3067\u5b9a\u3081\u3089\u308c\u3066\u3044\u307e\u3059\uff1a\u3082\u3057\u30af\u30e9\u30b9\u304c\u76f4\u63a5\u306e\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u304b\u3089\u540c\u3058\u30e1\u30f3\u30d0\u306e\u591a\u304f\u306e\u5b9f\u88c5\u3092\u7d99\u627f\u3059\u308b\u5834\u5408\u3001\u30af\u30e9\u30b9\u306f\u3053\u306e\u30e1\u30f3\u30d0\u3092\u7d99\u627f\u3057\u3001\u305d\u306e\u72ec\u81ea\u306e\u5b9f\u88c5\uff08\u304a\u305d\u3089\u304f\u3001\u7d99\u627f\u3055\u308c\u305f\u3082\u306e\u306e\u4e00\u3064\u3092\u4f7f\u7528\u3057\u3066\uff09\u3092\u63d0\u4f9b\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306e\u540d\u524d\u3092\u89d2\u62ec\u5f27\u3067\u8a18\u8ff0\u3057\u3001 super \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u7d99\u627f\u3055\u308c\u305f\u5b9f\u88c5\u306e\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u4f8b\uff1a `super<Base>`\n\n<!--original\nIn Kotlin, implementation inheritance is regulated by the following rule: if a class inherits many implementations of the same member from its immediate superclasses,\nit must override this member and provide its own implementation (perhaps, using one of the inherited ones).\nTo denote the supertype from which the inherited implementation is taken, we use *super*{: .keyword } qualified by the supertype name in angle brackets, e.g. `super<Base>`:\n-->\n\n``` kotlin\nopen class A {\n  open fun f() { print(\"A\") }\n  fun a() { print(\"a\") }\n}\n\ninterface B {\n  fun f() { print(\"B\") } // \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u30e1\u30f3\u30d0\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067'open'\n  fun b() { print(\"b\") }\n}\n\nclass C() : A(), B {\n  // \u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u305f\u3081\u306b\u30b3\u30f3\u30d1\u30a4\u30e9\u306f f() \u3092\u8981\u6c42\u3059\u308b\n  override fun f() {\n    super<A>.f() // A.f()\u306e\u547c\u3073\u51fa\u3057\n    super<B>.f() // B.f()\u306e\u547c\u3073\u51fa\u3057\n  }\n}\n```\n\n<!--original\n``` kotlin\nopen class A {\n  open fun f() { print(\"A\") }\n  fun a() { print(\"a\") }\n}\n\ninterface B {\n  fun f() { print(\"B\") } // interface members are 'open' by default\n  fun b() { print(\"b\") }\n}\n\nclass C() : A(), B {\n  // The compiler requires f() to be overridden:\n  override fun f() {\n    super<A>.f() // call to A.f()\n    super<B>.f() // call to B.f()\n  }\n}\n```\n-->\n\n`A` \u3068 `B` \u306e\u4e21\u65b9\u304b\u3089\u7d99\u627f\u3059\u308b\u306e\u306f\u554f\u984c\u306a\u304f\u3001 `C` \u306f\u305d\u308c\u3089\u306e\u95a2\u6570\u306e\u552f\u4e00\u306e\u5b9f\u88c5\u3067\u3042\u308b\u305f\u3081 `a()` \u3068 `b()` \u3082\u540c\u69d8\u3067\u3059\u3002\u3057\u304b\u3057 `f()` \u306b\u3064\u3044\u3066\u306f\u30012\u3064\u306e\u5b9f\u88c5\u304c `C` \u306b\u7d99\u627f\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001 `C` \u306b\u3042\u308b `f()` \u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3057\u3001\u66d6\u6627\u3055\u3092\u6392\u9664\u3059\u308b\u305f\u3081\u72ec\u81ea\u306e\u5b9f\u88c5\u3092\u63d0\u4f9b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nIt's fine to inherit from both `A` and `B`, and we have no problems with `a()` and `b()` since `C` inherits only one implementation of each of these functions.\nBut for `f()` we have two implementations inherited by `C`, and thus we have to override `f()` in `C`\nand provide our own implementation that eliminates the ambiguity.\n-->\n\n## \u62bd\u8c61\u30af\u30e9\u30b9\n\n<!--original\n## Abstract Classes\n-->\n\n\u30af\u30e9\u30b9\u3068\u305d\u306e\u30e1\u30f3\u30d0\u306f *abstract*{: .keyword } \u3092\u4f7f\u7528\u3057\u3066\u62bd\u8c61\u30af\u30e9\u30b9\u30fb\u62bd\u8c61\u30e1\u30f3\u30d0\u3068\u3057\u3066\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u62bd\u8c61\u30e1\u30f3\u30d0\u306f\u305d\u306e\u30af\u30e9\u30b9\u5185\u306b\u5b9f\u88c5\u3092\u6301\u3061\u307e\u305b\u3093\u3002\u62bd\u8c61\u30af\u30e9\u30b9\u3084\u62bd\u8c61\u95a2\u6570\u306bopen\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u5fc5\u8981\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3082\u3063\u3068\u3082\u3001\u305d\u308c\u306f\u8a00\u3046\u307e\u3067\u3082\u306a\u3044\u3053\u3068\u3067\u3059\u304c\u3002\n\n<!--original\nA class and some of its members may be declared *abstract*{: .keyword }.\nAn abstract member does not have an implementation in its class.\nNote that we do not need to annotate an abstract class or function with open \u2013 it goes without saying.\n-->\n\n\u975e\u62bd\u8c61\u30aa\u30fc\u30d7\u30f3\u30e1\u30f3\u30d0\u3092\u62bd\u8c61\u30e1\u30f3\u30d0\u3067\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nWe can override a non-abstract open member with an abstract one\n-->\n\n``` kotlin\nopen class Base {\n  open fun f() {}\n}\n\nabstract class Derived : Base() {\n  override abstract fun f()\n}\n```\n\n<!--original\n``` kotlin\nopen class Base {\n  open fun f() {}\n}\n\nabstract class Derived : Base() {\n  override abstract fun f()\n}\n```\n-->\n\n## \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (Companion Objects)\n\n<!--original\n## Companion Objects\n-->\n\nKotlin\u3067\u306f\u3001Java\u3084C\uff03\u3068\u306f\u7570\u306a\u308a\u3001\u30af\u30e9\u30b9\u306fstatic\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3061\u307e\u305b\u3093\u3002\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u4ee3\u66ff\u3068\u3057\u3066\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u30ec\u30d9\u30eb\u306e\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nIn Kotlin, unlike Java or C#, classes do not have static methods. In most cases, it's recommended to simply use\npackage-level functions instead.\n-->\n\n\u3082\u3057\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u6301\u305f\u305a\u306b\u547c\u3079\u308b\u304c\u30af\u30e9\u30b9\u5185\u90e8\uff08\u4f8b\u3048\u3070\u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\uff09\u3078\u306e\u30a2\u30af\u30bb\u30b9\u304c\u8981\u308b\u95a2\u6570\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308c\u3070\u3001\u305d\u306e\u30af\u30e9\u30b9\u306e\u4e2d\u3067 [\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5ba3\u8a00](object-declaration.html) \u306e\u30e1\u30f3\u30d0\u3068\u3057\u3066\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nIf you need to write a function that can be called without having a class instance but needs access to the internals\nof a class (for example, a factory method), you can write it as a member of an [object declaration](object-declarations.html)\ninside that class.\n-->\n\n\u7279\u306b\u3001\u3082\u3057 [\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8](object-declarations.html#companion-objects) \u3092\u30af\u30e9\u30b9\u5185\u3067\u5ba3\u8a00\u3057\u305f\u5834\u5408\u3067\u3042\u3063\u3066\u3082\u3001\u30af\u30e9\u30b9\u540d\u3092\u8b58\u5225\u5b50\u3068\u3057\u3066\u3001static\u95a2\u6570\u3092Java/C# \u3067\u547c\u3076\u306e\u3068\u540c\u3058\u69cb\u6587\u3067\u305d\u306e\u30e1\u30f3\u30d0\u3092\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nEven more specifically, if you declare a [companion object](object-declarations.html#companion-objects) inside your class,\nyou'll be able to call its members with the same syntax as calling static methods in Java/C#, using only the class name\nas a qualifier.\n\n-->\n\n\u30b7\u30fc\u30eb\u30af\u30e9\u30b9 (Sealed Classes)\n\n<!--original\n## Sealed Classes\n-->\n\n\u5024\u304c\u5236\u9650\u3055\u308c\u305f\u30bb\u30c3\u30c8\u306e1\u3064\u306e\u578b\u3092\u6301\u3064\u304c\u3001\u4ed6\u306e\u578b\u3092\u6301\u3066\u306a\u3044\u5834\u5408\u3001\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u304c\u5236\u9650\u3055\u308c\u305f\u30af\u30e9\u30b9\u968e\u5c64\u3092\u8868\u73fe\u3059\u308b\u969b\u306b\u7528\u3044\u3089\u308c\u307e\u3059\u3002\u305d\u308c\u3089\u306f\u3042\u308b\u610f\u5473\u3001enum\uff08\u5217\u6319\u578b\uff09\u30af\u30e9\u30b9\u306e\u62e1\u5f35\u3067\u3059\u3002enum\u578b\u306e\u5024\u306e\u30bb\u30c3\u30c8\u3082\u540c\u3058\u304f\u5236\u9650\u3055\u308c\u3066\u3044\u308b\u304c\u3001\u305d\u308c\u305e\u308c\u306eenum\u5b9a\u6570\u306f\u30b7\u30f3\u30b0\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u306e\u307f\u5b58\u5728\u3057\u3001\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306f\u72b6\u614b\u3092\u4fdd\u6301\u3067\u304d\u308b\u8907\u6570\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3082\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nSealed classes are used for representing restricted class hierarchies, when a value can have one of the types from a\nlimited set, but cannot have any other type. They are, in a sense, an extension of enum classes: the set of values\nfor an enum type is also restricted, but each enum constant exists only as a single instance, whereas a subclass\nof a sealed class can have multiple instances which can contain state.\n-->\n\n`sealed` \u4fee\u98fe\u5b50\u3092\u30af\u30e9\u30b9\u540d\u306e\u524d\u306b\u7f6e\u304f\u3068\u3001\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u3092\u5ba3\u8a00\u3067\u304d\u307e\u3059\u3002\u30eb\u30af\u30e9\u30b9\u306f\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u306f\u5168\u3066\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u81ea\u8eab\u306e\u5ba3\u8a00\u306e\u4e2d\u306b\u30cd\u30b9\u30c8\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u3044\u3051\u307e\u305b\u3093\u3002\n\n<!--original\nTo declare a sealed class, you put the `sealed` modifier before the name of the class. A sealed class can have\nsubclasses, but all of them must be nested inside the declaration of the sealed class itself.\n-->\n\n``` kotlin\nsealed class Expr {\n    class Const(val number: Double) : Expr()\n    class Sum(val e1: Expr, val e2: Expr) : Expr()\n    object NotANumber : Expr()\n}\n```\n\n<!--original\n``` kotlin\nsealed class Expr {\n    class Const(val number: Double) : Expr()\n    class Sum(val e1: Expr, val e2: Expr) : Expr()\n    object NotANumber : Expr()\n}\n```\n-->\n\n\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\uff08\u9593\u63a5\u7684\u306a\u7d99\u627f\uff09\u3092\u62e1\u5f35\u3059\u308b\u30af\u30e9\u30b9\u306f\u3069\u3053\u306b\u3067\u3082\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u3001\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u306e\u4e2d\u306b\u66f8\u304f\u5fc5\u8981\u306f\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nNote that classes which extend subclasses of a sealed class (indirect inheritors) can be placed anywhere, not necessarily inside\nthe declaration of the sealed class.\n-->\n\n\u30b7\u30fc\u30eb\u30af\u30e9\u30b9\u306e\u4e3b\u306a\u5229\u70b9\u306f [`when`\u5f0f](control-flow.html#when-expression) \u306e\u4e2d\u3067\u4f7f\u7528\u3055\u308c\u305f\u3068\u304d\u306b\u767a\u63ee\u3055\u308c\u307e\u3059\u3002\u3082\u3057\u6587\u304c\u5168\u3066\u306e\u4e8b\u8c61\u3092\u30ab\u30d0\u30fc\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u30fb\u8a3c\u660e\u3067\u304d\u308c\u3070\u3001 `else` \u53e5\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n<!--original\nThe key benefit of using sealed classes comes into play when you use them in a [`when` expression](control-flow.html#when-expression). If it's possible\nto verify that the statement covers all cases, you don't need to add an `else` clause to the statement.\n-->\n\n``` kotlin\nfun eval(expr: Expr): Double = when(expr) {\n    is Expr.Const -> expr.number\n    is Expr.Sum -> eval(expr.e1) + eval(expr.e2)\n    Expr.NotANumber -> Double.NaN\n    // \u5168\u3066\u306e\u4e8b\u4f8b\u3092\u5617\u3081\u305f\u305f\u3081\u3001`else` \u53e5\u306f\u4e0d\u8981\n}\n```\n\n<!--original\n``` kotlin\nfun eval(expr: Expr): Double = when(expr) {\n    is Expr.Const -> expr.number\n    is Expr.Sum -> eval(expr.e1) + eval(expr.e2)\n    Expr.NotANumber -> Double.NaN\n    // the `else` clause is not required because we've covered all the cases\n}\n```\n-->\n\n# \u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\n\n<!--original\n# Properties and Fields\n-->\n\n## \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u5ba3\u8a00\n\n<!--original\n## Declaring Properties\n-->\n\nKotlin\u306e\u30af\u30e9\u30b9\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3089\u306f\u3001 *var*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u53ef\u5909\uff09\u3068\u3057\u3066\u5ba3\u8a00\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u3001 *val*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3068\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u8aad\u307f\u53d6\u308a\u5c02\u7528\uff09\u306b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nClasses in Kotlin can have properties.\nThese can be declared as mutable, using the *var*{: .keyword } keyword or read-only using the *val*{: .keyword } keyword.\n-->\n\n``` kotlin\npublic class Address { \n  public var name: String = ...\n  public var street: String = ...\n  public var city: String = ...\n  public var state: String? = ...\n  public var zip: String = ...\n}\n```\n\n<!--original\n``` kotlin\npublic class Address { \n  public var name: String = ...\n  public var street: String = ...\n  public var city: String = ...\n  public var state: String? = ...\n  public var zip: String = ...\n}\n```\n-->\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u3046\u306b\u306fJava\u3067\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3084\u308b\u3088\u3046\u306b\u3001\u305f\u3060\u5358\u7d14\u306b\u540d\u524d\u3067\u53c2\u7167\u3059\u308b\u3060\u3051\u3067\u826f\u3044\u3067\u3059\uff1a\n\n<!--original\nTo use a property, we simply refer to it by name, as if it were a field in Java:\n-->\n\n``` kotlin\nfun copyAddress(address: Address): Address {\n  val result = Address() // 'new' \u30ad\u30fc\u30ef\u30fc\u30c9\u306f Kotlin \u306b\u3042\u308a\u307e\u305b\u3093\n  result.name = address.name // \u30a2\u30af\u30bb\u30b5\u304c\u547c\u3070\u308c\u308b\n  result.street = address.street\n  // ...\n  return result\n}\n```\n\n<!--original\n``` kotlin\nfun copyAddress(address: Address): Address {\n  val result = Address() // there's no 'new' keyword in Kotlin\n  result.name = address.name // accessors are called\n  result.street = address.street\n  // ...\n  return result\n}\n```\n-->\n\n## \u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\n\n<!--original\n## Getters and Setters\n-->\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5ba3\u8a00\u3059\u308b\u305f\u3081\u306e\u5b8c\u5168\u306a\u69cb\u6587\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\n\n<!--original\nThe full syntax for declaring a property is\n-->\n\n``` kotlin\nvar <propertyName>: <PropertyType> [= <property_initializer>]\n  [<getter>]\n  [<setter>]\n```\n\n<!--original\n``` kotlin\nvar <propertyName>: <PropertyType> [= <property_initializer>]\n  [<getter>]\n  [<setter>]\n```\n-->\n\n\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3001\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u306f\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u304b\u57fa\u672c\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u30fc\u304b\u3089\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3055\u308c\u308b\u3053\u3068\u304c\u63a8\u6e2c\u3055\u308c\u308b\u5834\u5408\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u578b\u3082\u5fc5\u9808\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \n\n<!--original\nThe initializer, getter and setter are optional. Property type is optional if it can be inferred from the initializer or from the base class member being overridden.\n-->\n\n\u4f8b\uff1a\n\n<!--original\nExamples:\n-->\n\n``` kotlin\nvar allByDefault: Int? // \u30a8\u30e9\u30fc\uff1a\u660e\u793a\u7684\u306a\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u304c\u5fc5\u8981\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u306f\u6697\u9ed9\nvar initialized = 1 // \u3053\u308c\u306f Int \u578b\u3092\u6301\u3061\u3001\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u3082\u6301\u3064\n```\n\n<!--original\n``` kotlin\nvar allByDefault: Int? // error: explicit initializer required, default getter and setter implied\nvar initialized = 1 // has type Int, default getter and setter\n```\n-->\n\n\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u5ba3\u8a00\u306e\u5b8c\u5168\u306a\u69cb\u6587\u306f\u3001\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306e\u3082\u306e\u3068\u6bd4\u3079\u30662\u70b9\u7570\u306a\u308a\u307e\u3059\u3002`var` \u306e\u4ee3\u308f\u308a\u306b `val` \u3067\u59cb\u307e\u308b\u306e\u3068\u3001\u30bb\u30c3\u30bf\u30fc\u3092\u8a8d\u3081\u306a\u3044\u3053\u3068\u3067\u3067\u3059\uff1a\n\n<!--original\nThe full syntax of a read-only property declaration differs from a mutable one in two ways: it starts with `val` instead of `var` and does not allow a setter:\n-->\n\n``` kotlin\nval simple: Int? // Int \u578b\u3092\u6301\u3061\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30b2\u30c3\u30bf\u30fc\u3092\u6301\u3064\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067\u521d\u671f\u5316\u304c\u5fc5\u8981\nval inferredType = 1 // Int \u578b\u3092\u6301\u3061\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30b2\u30c3\u30bf\u30fc\u3092\u6301\u3064\n```\n\n<!--original\n``` kotlin\nval simple: Int? // has type Int, default getter, must be initialized in constructor\nval inferredType = 1 // has type Int and a default getter\n```\n-->\n\n\u30ab\u30b9\u30bf\u30e0\u30a2\u30af\u30bb\u30b5\u306f\u666e\u901a\u306e\u95a2\u6570\u3068\u3068\u3066\u3082\u4f3c\u3066\u3044\u3066\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u4e2d\u306b\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30ab\u30b9\u30bf\u30e0\u30b2\u30c3\u30bf\u30fc\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\uff1a\n\n<!--original\nWe can write custom accessors, very much like ordinary functions, right inside a property declaration. Here's an example of a custom getter:\n-->\n\n``` kotlin\nval isEmpty: Boolean\n  get() = this.size == 0\n```\n\n<!--original\n``` kotlin\nval isEmpty: Boolean\n  get() = this.size == 0\n```\n-->\n\n\u30ab\u30b9\u30bf\u30e0\u30bb\u30c3\u30bf\u30fc\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff1a\n\n<!--original\nA custom setter looks like this:\n-->\n\n``` kotlin\nvar stringRepresentation: String\n  get() = this.toString()\n  set(value) {\n    setDataFromString(value) // \u6587\u5b57\u5217\u3092\u30d1\u30fc\u30b9\u3057\u3066\u4ed6\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u5024\u3092\u4ee3\u5165\u3059\u308b\n  }\n```\n\n<!--original\n``` kotlin\nvar stringRepresentation: String\n  get() = this.toString()\n  set(value) {\n    setDataFromString(value) // parses the string and assigns values to other properties\n  }\n```\n-->\n\n\u6163\u4f8b\u306b\u3088\u308a\u3001\u30bb\u30c3\u30bf\u30fc\u306e\u5f15\u6570\u540d\u306f `value` \u3067\u3059\u304c\u3001\u5225\u306e\u540d\u524d\u304c\u826f\u3044\u306a\u3089\u305d\u3061\u3089\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nBy convention, the name of the setter parameter is `value`, but you can choose a different name if you prefer.\n-->\n\n\u30a2\u30af\u30bb\u30b5\u306e\u53ef\u8996\u6027\u3092\u5909\u66f4\u3057\u305f\u308a\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b9f\u88c5\u3092\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u305d\u306e\u672c\u4f53\u3092\u5b9a\u7fa9\u305b\u305a\u306b\u30a2\u30af\u30bb\u30b5\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nIf you need to change the visibility of an accessor or to annotate it, but don't need to change the default implementation,\nyou can define the accessor without defining its body:\n-->\n\n``` kotlin\nvar setterVisibility: String = \"abc\"\n  private set // \u30bb\u30c3\u30bf\u30fc\u306f\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b9f\u88c5\u3092\u6301\u3064\n\nvar setterWithAnnotation: Any? = null\n  @Inject set // \u30bb\u30c3\u30bf\u30fc\u306b Inject \u3067\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\n```\n\n<!--original\n``` kotlin\nvar setterVisibility: String = \"abc\"\n  private set // the setter is private and has the default implementation\n\nvar setterWithAnnotation: Any? = null\n  @Inject set // annotate the setter with Inject\n```\n-->\n\n### \u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9 (Backing Fields)\n\n<!--original\n### Backing Fields\n-->\n\nKotlin\u306e\u30af\u30e9\u30b9\u306f\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u30ab\u30b9\u30bf\u30e0\u30a2\u30af\u30bb\u30b5\u3092\u4f7f\u7528\u3059\u308b\u3068\u304d\u306b\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u76ee\u7684\u306e\u305f\u3081\u306b\u3001Kotlin\u306f\u81ea\u52d5\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001 `field` \u8b58\u5225\u5b50\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nClasses in Kotlin cannot have fields. However, sometimes it is necessary to have a backing field when using custom accessors. For these purposes, Kotlin provides\nan automatic backing field which can be accessed using the `field` identifier:\n-->\n\n``` kotlin\nvar counter = 0 // \u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306e value \u306f\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u3078\u76f4\u306b\u66f8\u304d\u8fbc\u307e\u308c\u308b\n  set(value) {\n    if (value >= 0)\n      field = value\n  }\n```\n\n<!--original\n``` kotlin\nvar counter = 0 // the initializer value is written directly to the backing field\n  set(value) {\n    if (value >= 0)\n      field = value\n  }\n```\n-->\n\n`field` \u8b58\u5225\u5b50\u306f\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30a2\u30af\u30bb\u30b5\u306b\u306e\u307f\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nThe `field` identifier can only be used in the accessors of the property.\n-->\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30a2\u30af\u30bb\u30b5\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b9f\u88c5\u306e\u3046\u3061\u5c11\u306a\u304f\u3068\u30821\u3064\u3092\u4f7f\u7528\u3059\u308b\u304b\u3001\u30ab\u30b9\u30bf\u30e0\u30a2\u30af\u30bb\u30b5\u304c `field` \u8b58\u5225\u5b50\u3092\u901a\u3057\u3066\u53c2\u7167\u3055\u308c\u305f\u5834\u5408\u306b\u3001\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nA backing field will be generated for a property if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the `field` identifier.\n-->\n\n\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\uff1a\n\n<!--original\nFor example, in the following case there will be no backing field:\n-->\n\n``` kotlin\nval isEmpty: Boolean\n  get() = this.size == 0\n```\n\n<!--original\n``` kotlin\nval isEmpty: Boolean\n  get() = this.size == 0\n```\n-->\n\n### \u30d0\u30c3\u30ad\u30f3\u30b0\u30d7\u30ed\u30d1\u30c6\u30a3\n\n<!--original\n### Backing Properties\n-->\n\n\u300c\u6697\u9ed9\u306e\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u300d\u306b\u305d\u3050\u308f\u306a\u3044\u3053\u3068\u3092\u3084\u308a\u305f\u3044\u5834\u5408\u306b\u306f\u3001 *\u30d0\u30c3\u30ad\u30f3\u30b0\u30d7\u30ed\u30d1\u30c6\u30a3 (backing property)* \u3092\u6301\u3064\u3088\u3046\u306b\u5fc5\u305a\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u3055\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nIf you want to do something that does not fit into this \"implicit backing field\" scheme, you can always fall back to having a *backing property*:\n-->\n\n``` kotlin\nprivate var _table: Map<String, Int>? = null\npublic val table: Map<String, Int>\n  get() {\n    if (_table == null)\n      _table = HashMap() // \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u63a8\u8ad6\u3055\u308c\u308b\n    return _table ?: throw AssertionError(\"\u4ed6\u30b9\u30ec\u30c3\u30c9\u306b\u3088\u3063\u3066null\u3092\u30bb\u30c3\u30c8\u3055\u308c\u305f\")\n  }\n```\n\n<!--original\n``` kotlin\nprivate var _table: Map<String, Int>? = null\npublic val table: Map<String, Int>\n  get() {\n    if (_table == null)\n      _table = HashMap() // Type parameters are inferred\n    return _table ?: throw AssertionError(\"Set to null by another thread\")\n  }\n```\n-->\n\n\u5168\u3066\u306e\u70b9\u306b\u304a\u3044\u3066\u3001\u3053\u308c\u306f\u3061\u3087\u3046\u3069Java\u3068\u540c\u3058\u3067\u3059\u3002\u306a\u305c\u306a\u3089\u3001private\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\u30c7\u30d5\u30a9\u30eb\u30c8\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u3067\u306e\u30a2\u30af\u30bb\u30b9\u304c\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u30aa\u30fc\u30d0\u30d8\u30c3\u30c9\u304c\u7121\u3044\u3088\u3046\u306b\u6700\u9069\u5316\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n<!--original\nIn all respects, this is just the same as in Java since access to private properties with default getters and setters is optimized so that no function call overhead is introduced.\n\n-->\n\n## \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\n\n<!--original\n## Compile-Time Constants\n-->\n\n\u5024\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u308f\u304b\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001 `const` \u4fee\u98fe\u5b50\u3092\u4f7f\u7528\u3057\u3066\u3001 _\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570 (compile time constants)_ \u3068\u3057\u3066\u30de\u30fc\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u6b21\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a\n\n<!--original\nProperties the value of which is known at compile time can be marked as _compile time constants_ using the `const` modifier.\nSuch properties need to fulfil the following requirements:\n-->\n\n  * \u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u307e\u305f\u306f object \u306e\u30e1\u30f3\u30d0\n  * String \u578b\u306e\u5024\u307e\u305f\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u521d\u671f\u5316\u3055\u308c\u308b\n  * \u30ab\u30b9\u30bf\u30e0\u30b2\u30c3\u30bf\u30fc\u304c\u7121\u3044\n\n<!--original\n  * Top-level or member of an `object`\n  * Initialized with a value of type `String` or a primitive type\n  * No custom getter\n-->\n\n\u3053\u306e\u3088\u3046\u306a\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u306f\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nSuch properties can be used in annotations:\n-->\n\n``` kotlin\nconst val SUBSYSTEM_DEPRECATED: String = \"This subsystem is deprecated\"\n\n@Deprecated(SUBSYSTEM_DEPRECATED) fun foo() { ... }\n```\n\n\n<!--original\n``` kotlin\nconst val SUBSYSTEM_DEPRECATED: String = \"This subsystem is deprecated\"\n\n@Deprecated(SUBSYSTEM_DEPRECATED) fun foo() { ... }\n```\n\n-->\n\n## \u9045\u5ef6\u521d\u671f\u5316\u30d7\u30ed\u30d1\u30c6\u30a3\n\n<!--original\n## Late-Initialized Properties\n-->\n\n\u901a\u5e38\u3001\u975enull\u578b\u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067\u521d\u671f\u5316\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u304b\u306a\u308a\u591a\u304f\u306e\u5834\u5408\u306b\u304a\u3044\u3066\u3001\u3053\u308c\u306f\u4fbf\u5229\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u305f\u3068\u3048\u3070\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001\u4f9d\u5b58\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (DI; dependency injection; \u4f9d\u5b58\u6027\u6ce8\u5165, \u8a33\u6ce8\uff1a[\u53c2\u8003](http://blog.a-way-out.net/blog/2015/08/31/your-dependency-injection-is-wrong-as-I-expected/))\u3092\u4ecb\u3057\u3066\u3001\u307e\u305f\u306f\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u30e1\u30bd\u30c3\u30c9\u3067\u521d\u671f\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u4e8b\u4f8b\u3067\u306f\u3001\u975enull\u306e\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u3067\u3082\u306a\u304a\u30af\u30e9\u30b9\u5185\u306e\u672c\u4f53\u306b\u3042\u308b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u53c2\u7167\u3059\u308b\u969b\u306bnull\u30c1\u30a7\u30c3\u30af\u3092\u907f\u3051\u305f\u3044\u3067\u3057\u3087\u3046\u3002\n\n<!--original\nNormally, properties declared as having a non-null type must be initialized in the constructor.\nHowever, fairly often this is not convenient. For example, properties can be initialized through dependency injection,\nor in the setup method of a unit test. In this case, you cannot supply a non-null initializer in the constructor,\nbut you still want to avoid null checks when referencing the property inside the body of a class.\n-->\n\n\u3053\u306e\u3088\u3046\u306a\u4e8b\u4f8b\u3092\u6271\u3046\u306b\u306f\u3001`lateinit` \u4fee\u98fe\u5b50\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30de\u30fc\u30af\u3059\u308b\u3068\u826f\u3044\u3067\u3057\u3087\u3046\uff1a\n\n<!--original\nTo handle this case, you can mark the property with the `lateinit` modifier:\n-->\n\n``` kotlin\npublic class MyTest {\n    lateinit var subject: TestSubject\n\n    @SetUp fun setup() {\n        subject = TestSubject()\n    }\n\n    @Test fun test() {\n        subject.method()  // \u53c2\u7167\u5148\u3092\u76f4\u306b\u898b\u306b\u884c\u304f(dereference directly)\n    }\n}\n```\n\n<!--original\n``` kotlin\npublic class MyTest {\n    lateinit var subject: TestSubject\n\n    @SetUp fun setup() {\n        subject = TestSubject()\n    }\n\n    @Test fun test() {\n        subject.method()  // dereference directly\n    }\n}\n```\n-->\n\n\u3053\u306e\u8b58\u5225\u5b50\u306f\u30af\u30e9\u30b9\u672c\u4f53\uff08\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u306a\u3044\uff09\u306e\u4e2d\u3067\u5ba3\u8a00\u3055\u308c\u3001\u30ab\u30b9\u30bf\u30e0\u30b2\u30c3\u30bf\u30fc\u3084\u30ab\u30b9\u30bf\u30e0\u30bb\u30c3\u30bf\u30fc\u3092\u6301\u305f\u306a\u3044 `var` \u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u306e\u307f\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u578b\u304c\u975enull\u304b\u3064\u3001\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\u3067\u3042\u3063\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n\n<!--original\nThe modifier can only be used on `var` properties declared inside the body of a class (not in the primary constructor), and only\nwhen the property does not have a custom getter or setter. The type of the property must be non-null, and it must not be\na primitive type.\n-->\n\n`lateinit` \u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u521d\u671f\u5316\u3055\u308c\u308b\u524d\u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u5834\u5408\u3001\u30a2\u30af\u30bb\u30b9\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3001\u305d\u308c\u304c\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306e\u7279\u5225\u306a\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u307e\u3059\u3002\n\n<!--original\nAccessing a `lateinit` property before it has been initialized throws a special exception that clearly identifies the property\nbeing accessed and the fact that it hasn't been initialized.\n-->\n\n## \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\n\n<!--original\n## Overriding Properties\n-->\n\n[\u30e1\u30f3\u30d0\u306e\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9](classes.html#overriding-members) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [Overriding Members](classes.html#overriding-members)\n-->\n\n## \u59d4\u4efb\u30d7\u30ed\u30d1\u30c6\u30a3 (Delegated Properties)\n\n<!--original\n## Delegated Properties\n-->\n  \n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u3046\u3061\u6700\u3082\u4e00\u822c\u7684\u306a\u306e\u306f\u3001\u5358\u7d14\u306b\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\uff08\u307e\u305f\u306f\u66f8\u304d\u8fbc\u307f\u304b\u3082\u3057\u308c\u306a\u3044\uff09\u3067\u3059\u3002\n\u4e00\u65b9\u3001\u30ab\u30b9\u30bf\u30e0\u30b2\u30c3\u30bf\u30fc\u3068\u30bb\u30c3\u30bf\u30fc\u3092\u4f7f\u3048\u3070\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u632f\u308b\u821e\u3044\u3092\u5982\u4f55\u69d8\u306b\u3082\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\u3044\u308d\u3093\u306a\u3068\u3053\u308d\u306b\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u52d5\u4f5c\u306b\u3064\u3044\u3066\u3001\u78ba\u7acb\u3055\u308c\u305f\u5171\u901a\u30d1\u30bf\u30fc\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u3044\u304f\u3064\u304b\u306e\u4f8b\u3092\u6319\u3052\u307e\u3059\uff1a\u9045\u5ef6\u8a55\u4fa1\u5024\u3001\u4e0e\u3048\u3089\u308c\u305f\u30ad\u30fc\u3067\u306emap\u306e\u8aad\u307f\u8fbc\u307f\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3001\u30a2\u30af\u30bb\u30b9\u3092\u30c8\u30ea\u30ac\u3068\u3059\u308b\u30ea\u30b9\u30ca\u3078\u306e\u901a\u77e5\u7b49\u3002\n\n<!--original\nThe most common kind of properties simply reads from (and maybe writes to) a backing field. \nOn the other hand, with custom getters and setters one can implement any behaviour of a property.\nSomewhere in between, there are certain common patterns of how a property may work. A few examples: lazy values,\nreading from a map by a given key, accessing a database, notifying listener on access, etc.\n-->\n\n\u3053\u306e\u3088\u3046\u306a\u4e00\u822c\u7684\u306a\u632f\u308b\u821e\u3044\u306f\u3001[_\u59d4\u8b72\u30d7\u30ed\u30d1\u30c6\u30a3 (delegated properties)_](delegated-properties.html) \u3092\u4f7f\u3063\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nSuch common behaviours can be implemented as libraries using [_delegated properties_](delegated-properties.html).\n\n-->\n\n# \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\n<!--original\n# Interfaces\n-->\n\nKotlin\u3067\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u3001Java 8\u3068\u975e\u5e38\u306b\u3088\u304f\u4f3c\u3066\u3044\u307e\u3059\u3002\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u306e\u5ba3\u8a00\u3068\u540c\u69d8\u306b\u3001\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u62bd\u8c61\u30af\u30e9\u30b9\u3068\u9055\u3063\u3066\u3001\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u72b6\u614b\u3092\u6301\u3066\u307e\u305b\u3093\u3002\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u3053\u308c\u3089\u306f abstract \u3067\u3042\u308b\u3053\u3068\u3001\u307e\u305f\u306f\u30a2\u30af\u30bb\u30b5\u306e\u5b9f\u88c5\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n<!--original\nInterfaces in Kotlin are very similar to Java 8. They can contain declarations of abstract methods, as well as method\nimplementations. What makes them different from abstract classes is that interfaces cannot store state. They can have\nproperties but these need to be abstract or to provide accessor implementations.\n-->\n\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306f\u3001 *interface*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4f7f\u7528\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nAn interface is defined using the keyword *interface*{: .keyword }\n-->\n\n``` kotlin\ninterface MyInterface {\n    fun bar()\n    fun foo() {\n      // \u672c\u4f53\u306f\u4efb\u610f\n    }\n}\n```\n\n<!--original\n``` kotlin\ninterface MyInterface {\n    fun bar()\n    fun foo() {\n      // optional body\n    }\n}\n```\n-->\n\n## \u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\n\n<!--original\n## Implementing Interfaces\n-->\n\n\u30af\u30e9\u30b9\u3084\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30011\u3064\u307e\u305f\u306f\u8907\u6570\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nA class or object can implement one or more interfaces\n-->\n\n``` kotlin\nclass Child : MyInterface {\n   override fun bar() {\n      // \u672c\u4f53\n   }\n}\n```\n\n<!--original\n``` kotlin\nclass Child : MyInterface {\n   override fun bar() {\n      // body\n   }\n}\n```\n-->\n\n## \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u5185\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\n\n<!--original\n## Properties in Interfaces\n-->\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u5185\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3067\u5ba3\u8a00\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3001 abstract \u306b\u3059\u308b\u3053\u3068\u3082\u3001\u30a2\u30af\u30bb\u30b5\u306e\u5b9f\u88c5\u3092\u63d0\u4f9b\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u5185\u3067\u5ba3\u8a00\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u3053\u3068\u306f\u3067\u304d\u305a\u3001\u305d\u308c\u6545\u306b\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u5185\u3067\u5ba3\u8a00\u3055\u308c\u305f\u30a2\u30af\u30bb\u30b5\u306f\u305d\u308c\u3089\u3092\u53c2\u7167\u3067\u304d\u307e\u305b\u3093\u3002\n\n<!--original\nYou can declare properties in interfaces. A property declared in an interface can either be abstract, or it can provide\nimplementations for accessors. Properties declared in interfaces can't have backing fields, and therefore accessors\ndeclared in interfaces can't reference them.\n-->\n\n``` kotlin\ninterface MyInterface {\n    val property: Int // abstract\n\n    val propertyWithImplementation: String\n        get() = \"foo\"\n\n    fun foo() {\n        print(property)\n    }\n}\n\nclass Child : MyInterface {\n    override val property: Int = 29\n}\n```\n\n<!--original\n``` kotlin\ninterface MyInterface {\n    val property: Int // abstract\n\n    val propertyWithImplementation: String\n        get() = \"foo\"\n\n    fun foo() {\n        print(property)\n    }\n}\n\nclass Child : MyInterface {\n    override val property: Int = 29\n}\n```\n-->\n\n## \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u306e\u7af6\u5408\u89e3\u6c7a\n\n<!--original\n## Resolving overriding conflicts\n-->\n\n\u30b9\u30fc\u30d1\u30fc\u30bf\u30a4\u30d7\u306e\u30ea\u30b9\u30c8\u3067\u305f\u304f\u3055\u3093\u306e\u578b\u3092\u5ba3\u8a00\u3059\u308b\u3068\u3001\u540c\u30e1\u30bd\u30c3\u30c9\u306e\u8907\u6570\u306e\u5b9f\u88c5\u3092\u7d99\u627f\u3059\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a\n\n<!--original\nWhen we declare many types in our supertype list, it may appear that we inherit more than one implementation of the same method. For example\n-->\n\n``` kotlin\ninterface A {\n  fun foo() { print(\"A\") }\n  fun bar()\n}\n\ninterface B {\n  fun foo() { print(\"B\") }\n  fun bar() { print(\"bar\") }\n}\n\nclass C : A {\n  override fun bar() { print(\"bar\") }\n}\n\nclass D : A, B {\n  override fun foo() {\n    super<A>.foo()\n    super<B>.foo()\n  }\n}\n```\n\n<!--original\n``` kotlin\ninterface A {\n  fun foo() { print(\"A\") }\n  fun bar()\n}\n\ninterface B {\n  fun foo() { print(\"B\") }\n  fun bar() { print(\"bar\") }\n}\n\nclass C : A {\n  override fun bar() { print(\"bar\") }\n}\n\nclass D : A, B {\n  override fun foo() {\n    super<A>.foo()\n    super<B>.foo()\n  }\n}\n```\n-->\n\n\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9 *A* \u3068 *B* \u306f\u3001\u4e21\u65b9\u3068\u3082\u95a2\u6570 *foo()* \u3068 *bar()* \u3092\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\u4e21\u65b9\u3068\u3082 *foo()* \u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u304c\u3001 *B* \u306e\u307f\u304c *bar()* \u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\uff08 *bar()* \u306f *A* \u3067\u306f abstract \u3068\u3057\u3066\u30de\u30fc\u30af\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u306f\u95a2\u6570\u304c\u672c\u4f53\u3092\u6301\u305f\u306a\u3044\u3068\u304d\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u304b\u3089\u3067\u3059\u3002\uff09 \n\u3055\u3066\u3001\u3082\u3057\u5177\u4f53\u30af\u30e9\u30b9 *C* \u3092 *A* \u304b\u3089\u5f97\u308c\u3070\u3001 *bar()* \u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3057\u3001\u5b9f\u88c5\u3092\u63d0\u4f9b\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306f\u660e\u3089\u304b\u3067\u3059\u3002\u305d\u3057\u3066\u3082\u3057 *D* \u3092 *A* \u3068 *B* \u304b\u3089\u5f97\u308c\u3070\u3001 *bar()* \u3092\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u306a\u305c\u306a\u30891\u3064\u306e\u5b9f\u88c5\u3092\u7d99\u627f\u3057\u305f\u304b\u3089\u3067\u3059\u3002\n\u3057\u304b\u3057 *foo()* \u306e\u5b9f\u88c5\u30922\u3064\u7d99\u627f\u3057\u3066\u3057\u307e\u3063\u305f\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3069\u3063\u3061\u3092\u9078\u3093\u3060\u3089\u826f\u3044\u304b\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066 *foo()* \u306e\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u304c\u5f37\u5236\u3055\u308c\u3001\u4f55\u304c\u6b32\u3057\u3044\u306e\u304b\u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n<!--original\nInterfaces *A* and *B* both declare functions *foo()* and *bar()*. Both of them implement *foo()*, but only *B* implements *bar()* (*bar()* is not marked abstract in *A*,\nbecause this is the default for interfaces, if the function has no body). Now, if we derive a concrete class *C* from *A*, we, obviously, have to override *bar()* and provide\nan implementation. And if we derive *D* from *A* and *B*, we don\u2019t have to override *bar()*, because we have inherited only one implementation of it.\nBut we have inherited two implementations of *foo()*, so the compiler does not know which one to choose, and forces us to override *foo()* and say what we want explicitly.\n-->\n\n\n# \u53ef\u8996\u6027\u4fee\u98fe\u5b50\n\n<!--original\n# Visibility Modifiers\n-->\n\n\u30af\u30e9\u30b9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3001\u95a2\u6570\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u305d\u306e\u30bb\u30c3\u30bf\u30fc\u306f\u3001_\u53ef\u8996\u6027\u4fee\u98fe\u5b50 (visibility modifiers)_ \u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff08\u30b2\u30c3\u30bf\u30fc\u306f\u5e38\u306b\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u540c\u3058\u53ef\u8996\u6027\u3092\u6301\u3061\u307e\u3059\u3002\uff09Kotlin\u306b\u306f4\u3064\u306e\u53ef\u8996\u6027\u4fee\u98fe\u5b50\u304c\u3042\u308a\u307e\u3059\uff1a `private` , `protected` , `internal` , `public` \u3002\u660e\u793a\u7684\u306a\u4fee\u98fe\u5b50\u304c\u306a\u3044\u5834\u5408\u306b\u4f7f\u7528\u3055\u308c\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u53ef\u8996\u6027\u306f\u3001`public` \u3067\u3059\u3002\n\n<!--original\nClasses, objects, interfaces, constructors, functions, properties and their setters can have _visibility modifiers_.\n(Getters always have the same visibility as the property.) \nThere are four visibility modifiers in Kotlin: `private`, `protected`, `internal` and `public`.\nThe default visibility, used if there is no explicit modifier, is `public`.\n-->\n\n\u5ba3\u8a00\u30b9\u30b3\u30fc\u30d7\u306e\u9055\u3044\u306f\u3001\u5f8c\u8ff0\u306e\u4f8b\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nBelow please find explanations of these for different type of declaring scopes.\n-->\n  \n## \u30d1\u30c3\u30b1\u30fc\u30b8\n\n<!--original\n## Packages\n-->\n  \n\n\u95a2\u6570\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3084\u30af\u30e9\u30b9\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f\u3001\u300c\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u300d\u3001\u3064\u307e\u308a\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u5185\u90e8\u3067\u76f4\u63a5\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nFunctions, properties and classes, objects and interfaces can be declared on the \"top-level\", i.e. directly inside a package:\n-->\n  \n``` kotlin\n// \u30d5\u30a1\u30a4\u30eb\u540d: example.kt\npackage foo\n\nfun baz() {}\nclass Bar {}\n```\n\n<!--original\n``` kotlin\n// file name: example.kt\npackage foo\n\nfun baz() {}\nclass Bar {}\n```\n-->\n\n* \u53ef\u8996\u6027\u4fee\u98fe\u5b50\u3092\u4f55\u3082\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u5ba3\u8a00\u304c\u3069\u3053\u3067\u3082\u898b\u3048\u308b `public` \u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n* `private` \u3068\u3057\u3066\u5ba3\u8a00\u3059\u308b\u3068\u3001\u305d\u306e\u5ba3\u8a00\u3092\u542b\u3080\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u3067\u306e\u307f\u898b\u3048\u307e\u3059\n* `internal` \u3068\u3057\u3066\u5ba3\u8a00\u3059\u308b\u3068\u3001\u540c\u3058\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e\u3069\u3053\u304b\u3089\u3067\u3082\u898b\u3048\u307e\u3059\n* `protected` \u306f\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u5ba3\u8a00\u3067\u306f\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\n\n<!--original\n* If you do not specify any visibility modifier, `public` is used by default, which means that your declarations will be\nvisible everywhere;\n* If you mark a declaration `private`, it will only be visible inside the file containing the declaration;\n* If you mark it `internal`, it is visible everywhere in the same module;\n* `protected` is not available for top-level declarations.\n-->\n\n\u4f8b\uff1a\n\n<!--original\nExamples:\n-->\n\n``` kotlin\n// \u30d5\u30a1\u30a4\u30eb\u540d: example.kt\npackage foo\n\nprivate fun foo() {} // example.kt \u306e\u4e2d\u3067\u898b\u3048\u308b\n\npublic var bar: Int = 5 // \u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u3069\u3053\u3067\u3082\u898b\u3048\u308b\n    private set         // \u30bb\u30c3\u30bf\u30fc\u306f example.kt \u306e\u4e2d\u3067\u306e\u307f\u898b\u3048\u308b\n    \ninternal val baz = 6    // \u540c\u3058\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u3067\u306e\u307f\u898b\u3048\u308b\n```\n\n<!--original\n``` kotlin\n// file name: example.kt\npackage foo\n\nprivate fun foo() {} // visible inside example.kt\n\npublic var bar: Int = 5 // property is visible everywhere\n    private set         // setter is visible only in example.kt\n    \ninternal val baz = 6    // visible inside the same module\n```\n-->\n\n## \u30af\u30e9\u30b9\u3068\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\n\n<!--original\n## Classes and Interfaces\n-->\n\n\u30af\u30e9\u30b9\u5185\u3067\u5ba3\u8a00\u3057\u305f\u5834\u5408\uff1a\n\n<!--original\nWhen declared inside a class:\n-->\n\n* `private` \u306f\u305d\u306e\u30af\u30e9\u30b9\u5185\uff08\u305d\u306e\u3059\u3079\u3066\u306e\u30e1\u30f3\u30d0\u30fc\u3092\u542b\u3080\uff09\u3067\u306e\u307f\u898b\u3048\u308b\n* `protected` -- `private` \u3068\u540c\u3058 + \u30b5\u30d6\u30af\u30e9\u30b9\u5185\u3067\u3082\u898b\u3048\u307e\u3059\n* `internal` -- `internal` \u5ba3\u8a00\u3059\u308b\u30af\u30e9\u30b9\u3092\u898b\u308b *\u305d\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u306e* \u4efb\u610f\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u305d\u306e `internal` \u30e1\u30f3\u30d0\u304c\u898b\u3048\u307e\u3059\n* `public` -- `public` \u5ba3\u8a00\u3059\u308b\u30af\u30e9\u30b9\u3092\u898b\u3066\u3044\u308b\u4efb\u610f\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u3001`public` \u306e\u30e1\u30f3\u30d0\u304c\u898b\u3048\u307e\u3059\n\n<!--original\n* `private` means visible inside this class only (including all its members);\n* `protected` --- same as `private` + visible in subclasses too;\n* `internal` --- any client *inside this module* who sees the declaring class sees its `internal` members;\n* `public` --- any client who sees the declaring class sees its `public` members.\n-->\n\n*\u6ce8\u610f* Java\u306e\u30e6\u30fc\u30b6\u30fc\u3078\uff1aKotlin\u3067\u306f\u3001\u5916\u90e8\u30af\u30e9\u30b9\u306f\u305d\u306e\u5185\u90e8\u30af\u30e9\u30b9\u306eprivate \u30e1\u30f3\u30d0\u304c\u898b\u3048\u307e\u305b\u3093\u3002\n\n<!--original\n*NOTE* for Java users: outer class does not see private members of its inner classes in Kotlin.\n-->\n\n`protected` \u306e\u30e1\u30f3\u30d0\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u3001\u660e\u793a\u7684\u306b\u53ef\u8996\u6027\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u3001\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u30e1\u30f3\u30d0\u3082\u3001`protected` \u306e\u53ef\u8996\u6027\u306b\u306a\u308a\u307e\u3059\u3002\n\n<!--original\nIf you override a `protected` member and do not specify the visibility explicitly, the overriding member will also have `protected` visibility.\n-->\n\n\u4f8b\uff1a\n\n<!--original\nExamples:\n-->\n\n``` kotlin\nopen class Outer {\n    private val a = 1\n    protected open val b = 2\n    internal val c = 3\n    val d = 4  // \u30c7\u30d5\u30a9\u30eb\u30c8\u3067 public\n    \n    protected class Nested {\n        public val e: Int = 5\n    }\n}\n\nclass Subclass : Outer() {\n    // a \u306f\u898b\u3048\u306a\u3044\n    // b, c, d \u306f\u898b\u3048\u308b\n    // Nested \u3068 e \u306f\u898b\u3048\u308b\n\n    override val b = 5   // 'b' \u306f protected\n}\n\nclass Unrelated(o: Outer) {\n    // o.a, o.b \u306f\u898b\u3048\u306a\u3044\n    // o.c and o.d \u306f\u898b\u3048\u308b\uff08\u540c\u3058\u30e2\u30b8\u30e5\u30fc\u30eb\uff09\n    // Outer.Nested, Nested::e \u306f\u898b\u3048\u306a\u3044\n}\n```\n\n<!--original\n``` kotlin\nopen class Outer {\n    private val a = 1\n    protected open val b = 2\n    internal val c = 3\n    val d = 4  // public by default\n    \n    protected class Nested {\n        public val e: Int = 5\n    }\n}\n\nclass Subclass : Outer() {\n    // a is not visible\n    // b, c and d are visible\n    // Nested and e are visible\n\n    override val b = 5   // 'b' is protected\n}\n\nclass Unrelated(o: Outer) {\n    // o.a, o.b are not visible\n    // o.c and o.d are visible (same module)\n    // Outer.Nested is not visible, and Nested::e is not visible either \n}\n```\n-->\n\n### \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\n<!--original\n### Constructors\n-->\n\n\u30af\u30e9\u30b9\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u53ef\u8996\u6027\u3092\u6307\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u6b21\u306e\u69cb\u6587\u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\uff08\u660e\u793a\u7684\u306b *constructor*{: .keyword }* \u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u4ed8\u52a0\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\uff09\uff1a\n\n<!--original\nTo specify a visibility of the primary constructor of a class, use the following syntax (note that you need to add an\nexplicit *constructor*{: .keyword } keyword):\n-->\n\n``` kotlin\nclass C private constructor(a: Int) { ... }\n```\n\n<!--original\n``` kotlin\nclass C private constructor(a: Int) { ... }\n```\n-->\n\n\u3053\u3053\u3067\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f `private` \u3067\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u3059\u3079\u3066\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c `public` \u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u305d\u306e\u30af\u30e9\u30b9\u304c\u898b\u3048\u308b\u5834\u6240\u3067\u3042\u308c\u3070\u3069\u3053\u304b\u3089\u3067\u3082\u305d\u306e\u30af\u30e9\u30b9\u3092\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff08\u3059\u306a\u308f\u3061\u3001 `internal` \u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001\u540c\u3058\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u3067\u306e\u307f\u898b\u3048\u307e\u3059\uff09\n\n<!--original\nHere the constructor is private. By default, all constructors are `public`, which effectively\namounts to them being visible everywhere where the class is visible (i.e. a constructor of an `internal` class is only \nvisible within the same module).\n-->\n     \n### \u30ed\u30fc\u30ab\u30eb\u5ba3\u8a00\n\n<!--original\n### Local declarations\n-->\n     \n\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3001\u95a2\u6570\u3084\u30af\u30e9\u30b9\u306f\u3001\u53ef\u8996\u6027\u4fee\u98fe\u5b50\u3092\u6301\u3064\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n<!--original\nLocal variables, functions and classes can not have visibility modifiers.\n-->\n\n## \u30e2\u30b8\u30e5\u30fc\u30eb\n\n<!--original\n## Modules\n-->\n\n`internal` \u53ef\u8996\u6027\u4fee\u98fe\u5b50\u306b\u306f\u3001\u30e1\u30f3\u30d0\u304c\u540c\u3058\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u898b\u3048\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u306fKotlin\u306e\u30d5\u30a1\u30a4\u30eb\u30bb\u30c3\u30c8\u3067\u3042\u308a\u3001\u4e00\u7dd2\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u307e\u3059\u3002\n\n<!--original\nThe `internal` visibility modifier means that the member is visible with the same module. More specifically,\na module is a set of Kotlin files compiled together:\n-->\n\n  * IntelliJ IDEA\u30e2\u30b8\u30e5\u30fc\u30eb\n  * Maven\u3084Gradle\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n  * &lt;kotlinc&gt;Ant\u30bf\u30b9\u30af\u306e1\u56de\u306e\u547c\u3073\u51fa\u3057\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u30bb\u30c3\u30c8\n\n<!--original\n  * an IntelliJ IDEA module;\n  * a Maven or Gradle project;\n  * a set of files compiled with one invocation of the <kotlinc> Ant task.\n-->\n\n# \u62e1\u5f35 (extension)\n\n<!--original\n# Extensions\n-->\n\nKotlin\u306f\u3001C#\u3084Gosu\u3068\u4f3c\u3066\u3044\u3066\u3001\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u308aDecorator\u306e\u3088\u3046\u306a\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u3092\u4f7f\u7528\u305b\u305a\u3068\u3082\u3001\u30af\u30e9\u30b9\u3092\u65b0\u3057\u3044\u6a5f\u80fd\u3067\u62e1\u5f35\u3059\u308b\u80fd\u529b\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001 _\u62e1\u5f35_ \u3068\u547c\u3070\u308c\u308b\u7279\u5225\u306a\u5ba3\u8a00\u3092\u4ecb\u3057\u3066\u884c\u308f\u308c\u307e\u3059\u3002Kotlin\u306f\u3001 _\u62e1\u5f35\u95a2\u6570_ \u3068 _\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3_ \u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nKotlin, similar to C# and Gosu, provides the ability to extend a class with new functionality without having to inherit from the class or use any type of design pattern such as Decorator.\nThis is done via special declarations called _extensions_. Kotlin supports _extension functions_ and _extension properties_.\n-->\n\n## \u62e1\u5f35\u95a2\u6570\n\n<!--original\n## Extension Functions\n-->\n\n\u62e1\u5f35\u95a2\u6570\u3092\u5ba3\u8a00\u3059\u308b\u306b\u306f _\u30ec\u30b7\u30fc\u30d0\u30bf\u30a4\u30d7 (receiver type)_ \u3092\u95a2\u6570\u540d\u306e\u524d\u306b\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u6b21\u306e\u4f8b\u3067\u306f\u3001 `swap` \u95a2\u6570\u3092 `MutableList<Int>` \u306b\u8ffd\u52a0\u3057\u3066\u3044\u307e\u3059\uff1a\n\n<!--original\nTo declare an extension function, we need to prefix its name with a _receiver type_, i.e. the type being extended.\nThe following adds a `swap` function to `MutableList<Int>`:\n-->\n\n``` kotlin\nfun MutableList<Int>.swap(index1: Int, index2: Int) {\n  val tmp = this[index1] // 'this' \u304c\u30ea\u30b9\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\n  this[index1] = this[index2]\n  this[index2] = tmp\n}\n```\n\n<!--original\n``` kotlin\nfun MutableList<Int>.swap(index1: Int, index2: Int) {\n  val tmp = this[index1] // 'this' corresponds to the list\n  this[index1] = this[index2]\n  this[index2] = tmp\n}\n```\n-->\n\n\u62e1\u5f35\u95a2\u6570\u5185\u3067\u306e *this*{: .keyword } \u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u3001\u30ec\u30b7\u30fc\u30d0\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u30c9\u30c3\u30c8\u306e\u524d\u306b\u6e21\u3055\u308c\u305f\u3082\u306e\uff09\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u3001\u3053\u306e\u95a2\u6570\u3092\u4efb\u610f\u306e `MutableList<Int>` \u304b\u3089\u3067\u3082\u547c\u3079\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff1a\n\n<!--original\nThe *this*{: .keyword } keyword inside an extension function corresponds to the receiver object (the one that is passed before the dot). \nNow, we can call such a function on any `MutableList<Int>`:\n-->\n\n``` kotlin\nval l = mutableListOf(1, 2, 3)\nl.swap(0, 2) // 'swap()' \u4e2d\u306e 'this' \u306f\u5024 '1' \u3092\u4fdd\u6301\u3059\u308b\n```\n\n<!--original\n``` kotlin\nval l = mutableListOf(1, 2, 3)\nl.swap(0, 2) // 'this' inside 'swap()' will hold the value of 'l'\n```\n-->\n\n\u3082\u3061\u308d\u3093\u3001\u4efb\u610f\u306e `MutableList<T>` \u306b\u3064\u3044\u3066\u3053\u306e\u95a2\u6570\u306f\u7406\u306b\u304b\u306a\u3063\u3066\u304a\u308a\u3001\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306b\u3082\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nOf course, this function makes sense for any `MutableList<T>`, and we can make it generic:\n-->\n\n``` kotlin\nfun <T> MutableList<T>.swap(index1: Int, index2: Int) {\n  val tmp = this[index1] // 'this' \u306f\u30ea\u30b9\u30c8\u306b\u5bfe\u5fdc\u3059\u308b\n  this[index1] = this[index2]\n  this[index2] = tmp\n}\n```\n\n<!--original\n``` kotlin\nfun <T> MutableList<T>.swap(index1: Int, index2: Int) {\n  val tmp = this[index1] // 'this' corresponds to the list\n  this[index1] = this[index2]\n  this[index2] = tmp\n}\n```\n-->\n\n\u95a2\u6570\u540d\u306e\u524d\u3067\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5ba3\u8a00\u3059\u308b\u3068\u3001\u30ec\u30b7\u30fc\u30d0\u578b\u306e\u5f0f\u3067\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002[\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570](generics.html)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nWe declare the generic type parameter before the function name for it to be available in the receiver type expression. \nSee [Generic functions](generics.html).\n-->\n\n## \u62e1\u5f35\u306f **\u9759\u7684** \u306b\u89e3\u6c7a\u3055\u308c\u308b\n\n<!--original\n## Extensions are resolved **statically**\n-->\n\n\u62e1\u5f35\u6a5f\u80fd\u306f\u62e1\u5f35\u3057\u305f\u30af\u30e9\u30b9\u3092\u5b9f\u969b\u306b\u5909\u66f4\u3059\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u62e1\u5f35\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u30af\u30e9\u30b9\u306b\u65b0\u305f\u306a\u30e1\u30f3\u30d0\u3092\u633f\u5165\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3001\u305d\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u304a\u3044\u3066\u3001\u305f\u3060\u5358\u306b\u305d\u306e\u65b0\u3057\u3044\u95a2\u6570\u3092\u305f\u3060\u30c9\u30c3\u30c8\u4ed8\u304d\u3067\u547c\u3079\u308b\u3088\u3046\u306b\u306a\u308b\u3060\u3051\u3067\u3059\u3002\n\n<!--original\nExtensions do not actually modify classes they extend. By defining an extension, you do not insert new members into a class,\nbut merely make new functions callable with the dot-notation on instances of this class.\n-->\n\n\u62e1\u5f35\u95a2\u6570\u306f **\u9759\u7684\u306b** \u51e6\u7406\u3055\u308c\u308b\u3001\u3064\u307e\u308a\u3001\u305d\u308c\u3089\u306f\u30ec\u30b7\u30fc\u30d0\u306e\u578b\u306b\u3088\u308b\u4eee\u306e\u5b58\u5728\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3092\u5f37\u8abf\u3057\u3066\u304a\u304d\u305f\u3044\u3067\u3059\u3002\u3053\u308c\u306f\u3001\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u3068\u304d\u306e\u5f0f\u306e\u578b\u306b\u3088\u3063\u3066\u3001\u547c\u3073\u51fa\u3055\u308c\u308b\u62e1\u5f35\u95a2\u6570\u304c\u6c7a\u5b9a\u3055\u308c\u308b\u306e\u3067\u3042\u3063\u3066\u3001\u5b9f\u884c\u6642\u306e\u5f0f\u306e\u8a55\u4fa1\u306b\u3088\u308b\u306e\u3067\u306f\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\uff1a\n\n<!--original\nWe would like to emphasize that extension functions are dispatched **statically**, i.e. they are not virtual by receiver type.\nThis means that the extension function being called is determined by the type of the expression on which the function is invoked,\nnot by the type of the result of evaluating that expression at runtime. For example:\n-->\n\n``` kotlin\nopen class C\n\nclass D: C()\n\nfun C.foo() = \"c\"\n\nfun D.foo() = \"d\"\n\nfun printFoo(c: C) {\n    println(c.foo())\n}\n\nprintFoo(D())\n```\n\n<!--original\n``` kotlin\nopen class C\n\nclass D: C()\n\nfun C.foo() = \"c\"\n\nfun D.foo() = \"d\"\n\nfun printFoo(c: C) {\n    println(c.foo())\n}\n\nprintFoo(D())\n```\n-->\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001 \"c\"\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b\u62e1\u5f35\u95a2\u6570\u306f `C` \u30af\u30e9\u30b9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf `c` \u306e\u5ba3\u8a00\u578b\u306b\u306e\u307f\u4f9d\u5b58\u3059\u308b\u305f\u3081\u3067\u3059\u3002\n\n<!--original\nThis example will print \"c\", because the extension function being called depends only on the declared type of the\nparameter `c`, which is the `C` class.\n-->\n\n\u3082\u3057\u3001\u3042\u308b\u30af\u30e9\u30b9\u304c\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3064\u3046\u3048\u3001\u3055\u3089\u306b\u3001\u540c\u3058\u30ec\u30b7\u30fc\u30d0\u578b\u3001\u540c\u3058\u540d\u524d\u3092\u6709\u3057\u3001\u4e0e\u3048\u3089\u308c\u305f\u5f15\u6570\u3092\u53d7\u5bb9\u53ef\u80fd\u306a\u62e1\u5f35\u95a2\u6570\u304c\u5ba3\u8a00\u3055\u308c\u308b\u3068\u3001 **\u5e38\u306b\u30e1\u30f3\u30d0\u304c\u512a\u5148\u3055\u308c\u307e\u3059** \u3002\u4f8b\u3048\u3070\uff1a\n\n<!--original\nIf a class has a member function, and an extension function is defined which has the same receiver type, the same name\nand is applicable to given arguments, the **member always wins**.\nFor example:\n-->\n\n``` kotlin\nclass C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo() { println(\"extension\") }\n```\n\n<!--original\n``` kotlin\nclass C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo() { println(\"extension\") }\n```\n-->\n\n`C` \u578b\u306e\u4efb\u610f\u306e `c` \u304b\u3089 `c.foo()` \u3092\u547c\u3079\u3070\u3001\"extension\" \u3067\u306f\u306a\u304f\u3001 \"member\" \u3068\u8868\u793a\u3057\u307e\u3059\u3002\n\n<!--original\nIf we call `c.foo()` of any `c` of type `C`, it will print \"member\", not \"extension\".\n-->\n\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001\u7570\u306a\u308b\u7f72\u540d\u3092\u6301\u3064\u304c\u540c\u540d\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u62e1\u5f35\u95a2\u6570\u304c\u30aa\u30fc\u30d0\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u306f\u5168\u304f\u554f\u984c\u3042\u308a\u307e\u305b\u3093\uff1a\n\n<!--original\nHowever, it's perfectly OK for extension functions to overload member functions which have the same name but a different signature:\n-->\n\n``` kotlin\nclass C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo(i: Int) { println(\"extension\") }\n```\n\n<!--original\n``` kotlin\nclass C {\n    fun foo() { println(\"member\") }\n}\n\nfun C.foo(i: Int) { println(\"extension\") }\n```\n-->\n\n`C().foo(1)` \u306e\u547c\u3073\u51fa\u3057\u3067 \"extension\" \u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\n<!--original\nThe call to `C().foo(1)` will print \"extension\".\n\n-->\n\n## Null\u8a31\u5bb9\u30ec\u30b7\u30fc\u30d0\u30fc\n\n<!--original\n## Nullable Receiver\n-->\n\n\u62e1\u5f35\u306f\u3001null\u8a31\u5bb9\u306a\u30ec\u30b7\u30fc\u30d0\u306e\u578b\u3067\u5b9a\u7fa9\u3067\u304d\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u3088\u3046\u306a\u62e1\u5f35\u306f\u3001\u305d\u306e\u5024\u304cnull\u306e\u5834\u5408\u3067\u3082\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5909\u6570\u3067\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u304b\u3064\u305d\u306e\u672c\u4f53\u5185\u3067 `this == null` \u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001null \u3092\u30c1\u30a7\u30c3\u30af\u305b\u305a\u306b Kotlin \u3067 toString() \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u30c1\u30a7\u30c3\u30af\u306f\u62e1\u5f35\u95a2\u6570\u5185\u3067\u884c\u308f\u308c\u307e\u3059\u3002\n\n<!--original\nNote that extensions can be defined with a nullable receiver type. Such extensions can be called on an object variable\neven if its value is null, and can check for `this == null` inside the body. This is what allows you\nto call toString() in Kotlin without checking for null: the check happens inside the extension function.\n-->\n\n``` kotlin\nfun Any?.toString(): String {\n    if (this == null) return \"null\"\n    // null\u30c1\u30a7\u30c3\u30af\u306e\u5f8c\u3060\u3068\u3001 'this' \u306f\u975enull\u578b\u306b\u81ea\u52d5\u30ad\u30e3\u30b9\u30c8\u3055\u308c\u308b\u306e\u3067\u3001\n    // \u4e0b\u8a18\u306e toString() \u306f Any \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3067\u3042\u308b\u3068\u89e3\u6c7a\u3055\u308c\u308b\n    return toString()\n}\n```\n\n<!--original\n``` kotlin\nfun Any?.toString(): String {\n    if (this == null) return \"null\"\n    // after the null check, 'this' is autocast to a non-null type, so the toString() below\n    // resolves to the member function of the Any class\n    return toString()\n}\n```\n-->\n\n## \u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\n\n<!--original\n## Extension Properties\n-->\n\n\u95a2\u6570\u3068\u540c\u69d8\u3001Kotlin\u306f\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n<!--original\nSimilarly to functions, Kotlin supports extension properties:\n-->\n\n``` kotlin\nval <T> List<T>.lastIndex: Int\n  get() = size - 1\n```\n\n<!--original\n``` kotlin\nval <T> List<T>.lastIndex: Int\n  get() = size - 1\n```\n-->\n\n\u6ce8\u610f\u3057\u3066\u307b\u3057\u3044\u306e\u306f\u3001\u62e1\u5f35\u6a5f\u80fd\u306f\u3001\u5b9f\u969b\u306b\u306f\u30af\u30e9\u30b9\u306b\u30e1\u30f3\u30d0\u3092\u633f\u5165\u3057\u306a\u3044\u306e\u3067\u3001\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u304c[\u30d0\u30c3\u30ad\u30f3\u30b0\u30d5\u30a3\u30fc\u30eb\u30c9](properties.html#backing-fields)\u3092\u6301\u3064\u52b9\u7387\u7684\u306a\u65b9\u6cd5\u304c\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u3053\u308c\u304c **\u521d\u671f\u5316\u5b50\u304c\u3001\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044** \u7406\u7531\u3067\u3059\u3002\u3053\u306e\u6319\u52d5\u306f\u3001\u660e\u793a\u7684\u306b\u30b2\u30c3\u30bf\u30fc/\u30bb\u30c3\u30bf\u30fc\u3092\u4f5c\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306e\u307f\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nNote that, since extensions do not actually insert members into classes, there's no efficient way for an extension \nproperty to have a [backing field](properties.html#backing-fields). This is why **initializers are not allowed for \nextension properties**. Their behavior can only be defined by explicitly providing getters/setters.\n-->\n\n\u4f8b\uff1a\n\n<!--original\nExample:\n-->\n\n``` kotlin\nval Foo.bar = 1 // \u30a8\u30e9\u30fc\uff1a\u521d\u671f\u5316\u5b50\u306f\u62e1\u5f35\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u306f\u8a31\u53ef\u3055\u308c\u3066\u3044\u306a\u3044\n```\n\n\n<!--original\n``` kotlin\nval Foo.bar = 1 // error: initializers are not allowed for extension properties\n```\n\n-->\n\n## \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u62e1\u5f35\u6a5f\u80fd\n\n<!--original\n## Companion Object Extensions\n-->\n\n\u30af\u30e9\u30b9\u306b[\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8](object-declarations.html#companion-objects)\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u62e1\u5f35\u95a2\u6570\u3068\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nIf a class has a [companion object](object-declarations.html#companion-objects) defined, you can also define extension\nfunctions and properties for the companion object:\n-->\n\n``` kotlin\nclass MyClass {\n  companion object { }  // \"Companion\" \u3068\u547c\u3070\u308c\u308b\n}\n\nfun MyClass.Companion.foo() {\n  // ...\n}\n```\n\n<!--original\n``` kotlin\nclass MyClass {\n  companion object { }  // will be called \"Companion\"\n}\n\nfun MyClass.Companion.foo() {\n  // ...\n}\n```\n-->\n\n\u3061\u3087\u3046\u3069\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u666e\u901a\u306e\u30e1\u30f3\u30d0\u3068\u540c\u3058\u3088\u3046\u306b\u3001\u305d\u308c\u3089\u306f\u4fee\u98fe\u5b50\u3068\u3057\u3066\u30af\u30e9\u30b9\u540d\u306e\u307f\u3092\u4f7f\u7528\u3057\u3066\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nJust like regular members of the companion object, they can be called using only the class name as the qualifier:\n-->\n\n``` kotlin\nMyClass.foo()\n```\n\n\n<!--original\n``` kotlin\nMyClass.foo()\n```\n\n-->\n\n## \u62e1\u5f35\u95a2\u6570\u306e\u30b9\u30b3\u30fc\u30d7\n\n<!--original\n## Scope of Extensions\n-->\n\n\u307b\u3068\u3093\u3069\u306e\u5834\u5408\u3001\u30c8\u30c3\u30d7\u30ec\u30d9\u30eb\u3001\u3059\u306a\u308f\u3061\u30d1\u30c3\u30b1\u30fc\u30b8\u76f4\u4e0b\u306b\u62e1\u5f35\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff1a\n\n<!--original\nMost of the time we define extensions on the top level, i.e. directly under packages:\n-->\n \n\n-->\n\n``` kotlin\npackage foo.bar\n \nfun Baz.goo() { ... } \n``` \n\n<!--original\n``` kotlin\npackage foo.bar\n \nfun Baz.goo() { ... } \n``` \n-->\n\n\u305d\u306e\u3088\u3046\u306a\u62e1\u5f35\u3092\u5ba3\u8a00\u3057\u3066\u3044\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u5916\u3067\u4f7f\u7528\u3059\u308b\u306b\u306f\u3001\u305d\u308c\u3092\u547c\u3073\u51fa\u3057\u7b87\u6240\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff1a\n\n<!--original\nTo use such an extension outside its declaring package, we need to import it at the call site:\n-->\n\n``` kotlin\npackage com.example.usage\n\nimport foo.bar.goo // \"goo\" \u3068\u3044\u3046\u540d\u524d\u3067\u5168\u3066\u306e\u62e1\u5f35\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\n                   // \u307e\u305f\u306f\nimport foo.bar.*   // \"foo.bar\" \u304b\u3089\u5168\u3066\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\n\nfun usage(baz: Baz) {\n  baz.goo()\n)\n\n```\n\n<!--original\n``` kotlin\npackage com.example.usage\n\nimport foo.bar.goo // importing all extensions by name \"goo\"\n                   // or\nimport foo.bar.*   // importing everything from \"foo.bar\"\n\nfun usage(baz: Baz) {\n  baz.goo()\n)\n\n```\n-->\n\n\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001[\u30a4\u30f3\u30dd\u30fc\u30c8](packages.html#imports)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n<!--original\nSee [Imports](packages.html#imports) for more information.\n-->\n\n## \u30e1\u30f3\u30d0\u3068\u3057\u3066\u62e1\u5f35\u95a2\u6570\u3092\u5ba3\u8a00\n\n<!--original\n## Declaring Extensions as Members\n-->\n\n\u30af\u30e9\u30b9\u5185\u3067\u306f\u3001\u5225\u306e\u30af\u30e9\u30b9\u306e\u62e1\u5f35\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u62e1\u5f35\u306e\u4e2d\u306b\u306f\u3001\u8907\u6570\u306e _\u6697\u9ed9\u7684\u306a\u30ec\u30b7\u30fc\u30d0_\u304c\u3042\u308a\u307e\u3059\u3002\u4fee\u98fe\u5b50\u306a\u3057\u3067\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30f3\u30d0\u3067\u3059\u3002\u62e1\u5f35\u304c\u5ba3\u8a00\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f _\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ec\u30b7\u30fc\u30d0 (dispatch receiver)_ \u3068\u547c\u3070\u308c\u3001\u62e1\u5f35\u95a2\u6570\u306e\u30ec\u30b7\u30fc\u30d0\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f _\u62e1\u5f35\u30ec\u30b7\u30fc\u30d0_ \u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\n<!--original\nInside a class, you can declare extensions for another class. Inside such an extension, there are multiple _implicit receivers_ -\nobjects members of which can be accessed without a qualifier. The instance of the class in which the extension is declared is called\n_dispatch receiver_, and the instance of the receiver type of the extension method is called _extension receiver_.\n-->\n\n``` kotlin\nclass D {\n    fun bar() { ... }\n}\n\nclass C {\n    fun baz() { ... }\n\n    fun D.foo() {\n        bar()   // D.bar \u3092\u547c\u3076\n        baz()   // C.baz \u3092\u547c\u3076\n    }\n\n    fun caller(d: D) {\n        d.foo()   // \u62e1\u5f35\u95a2\u6570\u3092\u547c\u3076\n    }\n}\n```\n\n<!--original\n``` kotlin\nclass D {\n    fun bar() { ... }\n}\n\nclass C {\n    fun baz() { ... }\n\n    fun D.foo() {\n        bar()   // calls D.bar\n        baz()   // calls C.baz\n    }\n\n    fun caller(d: D) {\n        d.foo()   // call the extension function\n    }\n}\n```\n-->\n\n\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ec\u30b7\u30fc\u30d0\u306e\u30e1\u30f3\u30d0\u30fc\u3068\u62e1\u5f35\u30ec\u30b7\u30fc\u30d0\u306e\u540d\u524d\u304c\u885d\u7a81\u3059\u308b\u5834\u5408\u306b\u306f\u3001\u62e1\u5f35\u30ec\u30b7\u30fc\u30d0\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ec\u30b7\u30fc\u30d0\u306e\u30e1\u30f3\u30d0\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u3001[\u4fee\u98fe\u5b50\u4ed8\u304d `this` \u306e\u69cb\u6587](this-expressions.html#qualified)\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n<!--original\nIn case of a name conflict between the members of the dispatch receiver and the extension receiver, the extension receiver takes\nprecedence. To refer to the member of the dispatch receiver you can use the [qualified `this` syntax](this-expressions.html#qualified).\n-->\n\n``` kotlin\nclass C {\n    fun D.foo() {\n        toString()         // D.toString() \u3092\u547c\u3076\n        this@C.toString()  // C.toString() \u3092\u547c\u3076\n    }\n```\n\n<!--original\n``` kotlin\nclass C {\n    fun D.foo() {\n        toString()         // calls D.toString()\n        this@C.toString()  // calls C.toString()\n    }\n```\n-->\n\n\u30e1\u30f3\u30d0\u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u305f\u62e1\u5f35\u95a2\u6570\u306f\u3001 `open` \u3068\u3057\u3066\u5ba3\u8a00\u3055\u308c\u3001\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u305d\u306e\u3088\u3046\u306a\u95a2\u6570\u306e\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u306f\u3001\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ec\u30b7\u30fc\u30d0\u578b\u306b\u95a2\u3057\u3066\u306f\u4eee\u60f3\u7684\u3067\u3042\u308b\u304c\u3001\u62e1\u5f35\u30ec\u30b7\u30fc\u30d0\u578b\u306b\u95a2\u3057\u3066\u306f\u9759\u7684\u3067\u3042\u308b\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3002\n\n<!--original\nExtensions declared as members can be declared as `open` and overridden in subclasses. This means that the dispatch of such\nfunctions is virtual with regard to the dispatch receiver type, but static with regard to the extension receiver type.\n-->\n\n``` kotlin\nopen class D {\n}\n\nclass D1 : D() {\n}\n\nopen class C {\n    open fun D.foo() {\n        println(\"D.foo in C\")\n    }\n\n    open fun D1.foo() {\n        println(\"D1.foo in C\")\n    }\n\n    fun caller(d: D) {\n        d.foo()   // \u62e1\u5f35\u95a2\u6570\u3092\u547c\u3076\n    }\n}\n\nclass C1 : C() {\n    override fun D.foo() {\n        println(\"D.foo in C1\")\n    }\n\n    override fun D1.foo() {\n        println(\"D1.foo in C1\")\n    }\n}\n\nC().caller(D())   // \u51fa\u529b\uff1a \"D.foo in C\"\nC1().caller(D())  // \u51fa\u529b\uff1a \"D.foo in C1\" - \u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u30ec\u30b7\u30fc\u30d0\u306f\u4eee\u60f3\u7684\u306b\u89e3\u6c7a\u3055\u308c\u308b\nC().caller(D1())  // \u51fa\u529b\uff1a \"D.foo in C\" - \u62e1\u5f35\u30ec\u30b7\u30fc\u30d0\u306f\u9759\u7684\u306b\u89e3\u6c7a\u3055\u308c\u308b\n``` \n\n\n<!--original\n``` kotlin\nopen class D {\n}\n\nclass D1 : D() {\n}\n\nopen class C {\n    open fun D.foo() {\n        println(\"D.foo in C\")\n    }\n\n    open fun D1.foo() {\n        println(\"D1.foo in C\")\n    }\n\n    fun caller(d: D) {\n        d.foo()   // call the extension function\n    }\n}\n\nclass C1 : C() {\n    override fun D.foo() {\n        println(\"D.foo in C1\")\n    }\n\n    override fun D1.foo() {\n        println(\"D1.foo in C1\")\n    }\n}\n\nC().caller(D())   // prints \"D.foo in C\"\nC1().caller(D())  // prints \"D.foo in C1\" - dispatch receiver is resolved virtually\nC().caller(D1())  // prints \"D.foo in C\" - extension receiver is resolved statically\n``` \n\n-->\n\n## \u52d5\u6a5f\n\n<!--original\n## Motivation\n-->\n\nJava\u3067\u306f\u3001 \"*Utils\" \u3068\u3044\u3046\u540d\u524d\u306e\u30af\u30e9\u30b9\uff08 `FileUtils` \u3001 `StringUtils` \u306a\u3069\uff09\u3092\u3088\u304f\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u6709\u540d\u306a `java.util.Collections` \u306f\u3001\u540c\u3058\u54c1\u7a2e\u306b\u5c5e\u3057\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u3053\u308c\u3089\u306eUtils-\u30af\u30e9\u30b9\u306b\u3064\u3044\u3066\u306e\u4e0d\u5feb\u306a\u90e8\u5206\u306f\u3001\u305d\u308c\u3089\u3092\u4f7f\u7528\u3059\u308b\u30b3\u30fc\u30c9\u304c\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3053\u3068\u3067\u3059\uff1a\n\n<!--original\nIn Java, we are used to classes named \"\\*Utils\": `FileUtils`, `StringUtils` and so on. The famous `java.util.Collections` belongs to the same breed.\nAnd the unpleasant part about these Utils-classes is that the code that uses them looks like this:\n-->\n\n``` java\n// Java\nCollections.swap(list, Collections.binarySearch(list, Collections.max(otherList)), Collections.max(list))\n```\n\n<!--original\n``` java\n// Java\nCollections.swap(list, Collections.binarySearch(list, Collections.max(otherList)), Collections.max(list))\n```\n-->\n\n\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u540d\u306f\u5e38\u306b\u90aa\u9b54\u306b\u306a\u3063\u3066\u304d\u307e\u3059\u3002static \u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001\u3053\u308c\u3092\u3053\u3046\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff1a\n\n<!--original\nThose class names are always getting in the way. We can use static imports and get this:\n-->\n\n``` java\n// Java\nswap(list, binarySearch(list, max(otherList)), max(list))\n```\n\n<!--original\n``` java\n// Java\nswap(list, binarySearch(list, max(otherList)), max(list))\n```\n-->\n\n\u3053\u308c\u306f\u5c11\u3057\u3060\u3051\u30de\u30b7\u3067\u3059\u304c\u3001IDE\u306e\u5f37\u529b\u306a\u30b3\u30fc\u30c9\u88dc\u5b8c\u306e\u52a9\u3051\u3092\u5168\u304f\u307e\u305f\u306f\u307b\u3093\u306e\u5c11\u3057\u3057\u304b\u5f97\u3089\u308c\u307e\u305b\u3093\u3002\u6b21\u306e\u3088\u3046\u306b\u3067\u304d\u308b\u306a\u3089\u3070\u3001\u305d\u308c\u306f\u3068\u3066\u3082\u826f\u3044\u3067\u3057\u3087\u3046\uff1a\n\n<!--original\nThis is a little better, but we have no or little help from the powerful code completion of the IDE. It would be so much better if we could say\n-->\n\n``` java\n// Java\nlist.swap(list.binarySearch(otherList.max()), list.max())\n```\n\n<!--original\n``` java\n// Java\nlist.swap(list.binarySearch(otherList.max()), list.max())\n```\n-->\n\n\u3067\u3082\u3001 `List` \u30af\u30e9\u30b9\u306e\u4e2d\u306b\u8003\u3048\u3089\u308c\u308b\u3059\u3079\u3066\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u305f\u3044\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3088\u306d\uff1f\u3053\u306e\u3088\u3046\u306a\u3068\u304d\u306b\u62e1\u5f35\u304c\u79c1\u305f\u3061\u3092\u52a9\u3051\u3066\u304f\u308c\u307e\u3059\u3002\n\n<!--original\nBut we don't want to implement all the possible methods inside the class `List`, right? This is where extensions help us.\n-->\n\n---\n\n# \u203b\u6a29\u5229\u95a2\u4fc2\u306b\u3064\u3044\u3066\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e\u30aa\u30ea\u30b8\u30ca\u30eb\u3092\u4f5c\u3063\u305fJetBrain\u793e\u306f[Contributing to Kotlin](http://dogwood008.github.io/kotlin-web-site-ja/https://kotlinlang.org/contribute.html#translations)\u3067\u3001\u300c\u3042\u306a\u305f\u306e\u8a00\u8a9e\u306b\u7ffb\u8a33\u3057\u3001Web\u30b5\u30a4\u30c8\u4e0a\u3067\u95b2\u89a7\u53ef\u80fd\u306b\u3059\u308b\u3053\u3068\u3092\u6b53\u8fce\u3059\u308b\u3002\u300d ( _You are welcome to translate the Kotlin documentation into your own language and to publish your translation on your Web site._ ) \u3068\u5ba3\u8a00\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306f[github\u4e0a\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8](https://github.com/JetBrains/kotlin-web-site)\u3067\u7ba1\u7406\u3055\u308c\u3066\u304a\u308a\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u8868\u793a\u304c[Apache License ver. 2.0](https://github.com/JetBrains/kotlin-web-site/blob/master/LICENSE)\u3067\u5ba3\u8a00\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5f93\u3063\u3066\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u305d\u308c\u306b\u306a\u3089\u3063\u3066\u3001\u30e9\u30a4\u30bb\u30f3\u30b9\u3092[Apache License ver. 2.0](https://github.com/dogwood008/kotlin-web-site-ja/blob/master/LICENSE)\u3068\u3057\u307e\u3059\u3002\n", "tags": ["Kotlin", "Android", "AndroidStudio", "android\u958b\u767a"]}