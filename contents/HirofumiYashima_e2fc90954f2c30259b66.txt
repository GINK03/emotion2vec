{"context": " More than 1 year has passed since last update.\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\n\nSiguniang's Blog \u300cPostgreSQL\u306ePL/Python\u3092\u4f7f\u3063\u3066\u307f\u308b\u300d\n\n\n\uff08\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u8ee2\u8f09\uff09\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001SQL\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3089\u3057\u3044\n\n\n\u3010 \u95a2\u6570\u5b9a\u7fa9 \u3011\n\n\npl/python\nCREATE OR REPLACE FUNCTION twitter(query text)\nRETURNS SETOF text\nAS $$\nimport json\nimport urllib\nimport requests\nurl = 'http://search.twitter.com/search.json?q=%s&rpp=5&include_entities=true&result_type=recent'\nresponse = requests.get(url%urllib.quote(query))\nresponse = json.loads(response.content)\nplpy.warning(response['completed_in']) # logging\nfor tweet in response['results']:\n    yield tweet['text']\n$$ LANGUAGE plpython2u;\n\n\n\n\u3010 \u95a2\u6570\u5229\u7528\u4f8b \u3011\n\ntest=# select twitter('\u9df9\u72e9');\n\n\n\u3010 \u30af\u30a8\u30ea\u8fd4\u308a\u5024\u7d50\u679c \u3011\n\nWARNING:  0.016\nCONTEXT:  PL/Python function \"twitter\"\n                                                                                          twitter\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n @26ap6 \u304a\uff01\u30a4\u30a4\u30cd\uff01\uff3c(^o^)\uff0f\u5c0f\u9df9\u72e9\u3055\u3093\u3067\u59cb\u307e\u308d\u3046\uff01\n \u30c1\u30ad\u30d1\u306e\u8863\u88c5\u304c\u8584\u624b\u3059\u304e\u308b\u3068\u95a2\u897f\u5f01\u3067\u3084\u304b\u308a\u59cb\u3081\u308b\u5c0f\u9df9\u72e9\n \u30c1\u30ad\u30d1\u306f\u58f2\u308c\u3066\u306a\u3044\u304b\u3089\u5e03\u304c\u8cb7\u3048\u306a\u3044\u304b\u3089\u8896\u304c\u306a\u304f\u3066\u5bd2\u3044\u3063\u3066\u5c0f\u9df9\u72e9\u3055\u3093\u304c\u304a\u6012\u308a\u3067\u3059\n \u5c0f\u9df9\u72e9\u9811\u5f35\u3063\u3066\u308b\u308f\uff01\u307b\u3093\u307e\u3002\n \u671d\u306e\u6563\u6b69\u7d42\u4e86\u3092\u30fc\u3000\u4eca\u65e5\u306f\u50d5\u306e\u6563\u6b69\u30a8\u30ea\u30a2\u306b\u9df9\u72e9\u306e\u65b9\u3005\u304c\u6765\u3066\u3044\u305f\u3088\u3000\u9ce5\u3055\u3093\u307f\u3093\u306a\u9003\u3052\u3066\u304a\u30fc\u3000\u5199\u771f\u306f\u4eca\u65e5\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3000\u767d\u83dc\u7551\u306e\u767d\u83dc\u306e\u4e0a\u306e\u30ab\u30e9\u30b9\u304f\u3093\uff08\u3055\u3093\u304b\u3082\uff1f\uff09\u3067\u3059 http://t.co/wuTdeij4\n(5 rows)\n\n\n\n\u3010 \u305d\u306e\u4ed6\u306e\u4e8b\u4f8b \u3011\n\n\nIT\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u30e1\u30bf\u30fb\u30ce\u30fc\u30c8 \u300c\u3010PostgreSQL\u3011PL/Python\u3067\u6a5f\u68b0\u5b66\u7fd2\u300d\n\n\nDB\u306b\u683c\u7d0d\u3057\u305f\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u6a5f\u68b0\u5b66\u7fd2\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3057\u305f\u304f\u306a\u3063\u305f\u3068\u3057\u307e\u3059\u3002\nDB\u304b\u3089\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3057\u3066\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u3067\u51e6\u7406\u3057\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001PostgreSQL\u3067\u51e6\u7406\u304c\u5b8c\u7d50\u3057\u305f\u65b9\u304c\u4fbf\u5229\u306a\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\n\u3057\u304b\u3057\u3001PostgreSQL\u3067\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u6a5f\u68b0\u5b66\u7fd2\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4e00\u304b\u3089\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u306e\u306f\u5927\u5909\u3067\u3059\u3002\nPL/Python\u3092\u4f7f\u3048\u3070\u3001python\u3067\u66f8\u304b\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u3066\u624b\u8efd\u306b\u6a5f\u68b0\u5b66\u7fd2\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001python\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u306fC\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001\u901f\u5ea6\u9762\u3067\u3082\u60aa\u304f\u306a\u3044\u3067\u3059\u3002\n\n\n\uff08\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u8ee2\u8f09\uff09\u30b3\u30fc\u30c9\u4f8b\u305d\u306e\uff12\n\n\n\u3010 \u95a2\u6570\u5b9a\u7fa9 \u3011\n\n\nkmeans\u95a2\u6570\u306e\u4f5c\u6210\n\u8907\u6570\u306e\u30d9\u30af\u30c8\u30eb(x, y)\u304b\u3089\u3001x\u3068y\u305d\u308c\u305e\u308c\u3092\u914d\u5217\u306b\u3057\u3066\u6e21\u3057\u3001\n\u5404\u30d9\u30af\u30c8\u30eb\u304c\u3069\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5c5e\u3059\u304b\u3092\u914d\u5217\u3067\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\npl/python\nCREATE FUNCTION kmeans(x float[], y float[]) RETURNS int[] AS $$\n from numpy import array\n from scipy.cluster.vq import vq, kmeans, whiten\n\n features = array(zip(x, y))\n\n whitened = whiten(features)\n book = array((whitened[0], whitened[2]))\n codebook, distortion = kmeans(whitened, book)\n\n code, dist = vq(whitened, codebook)\n\n return list(code)\n$$ LANGUAGE plpython2u;\n\n\n\n\u3010 \u95a2\u6570\u5229\u7528\u4f8b \u3011\n\n\npl/python\nSELECT kmeans(\n array[1.9,1.5,0.8,0.4,0.1,0.2,2.0,0.3,1.0],\n array[2.3,2.5,0.6,1.8,0.1,1.8,0.5,1.5,1.0])\n\n\n\n\u3010 \u30af\u30a8\u30ea\u8fd4\u308a\u5024\u7d50\u679c \u3011\n\n/*\n      kmeans       \n\n---------------------\n {0,0,1,1,1,1,1,1,1}\n(1 row)\n*/\n\n\n\u3010 select\u6587\u30d9\u30bf\u6253\u3061\u5b9f\u884c\u4f8b \u3011\n\n\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b\n\u30d9\u30af\u30c8\u30eb\u306e\u96c6\u5408\u3092kmeans\u95a2\u6570\u306b\u6e21\u305b\u308b\u3088\u3046\u306b\u914d\u5217\u306b\u96c6\u7d04\u3057\u3001kmeans\u3067\u5f97\u3089\u308c\u305f\u914d\u5217\u306en\u756a\u76ee\u304c\u96c6\u5408\u306en\u884c\u76ee\u306e\u30af\u30e9\u30b9\u30bf\u306e\u5024\u306b\u306a\u308a\u307e\u3059\u3002\n\n\npl/python\nSELECT\n x, y,\n (\n  kmeans(\n   array_agg(x) OVER(),\n   array_agg(y) OVER()\n  )\n )[row_number() OVER()] as kmeans_cluster\nFROM (VALUES\n (1.9::float,2.3::float),\n (1.5,2.5),\n (0.8,0.6),\n (0.4,1.8),\n (0.1,0.1),\n (0.2,1.8),\n (2.0,0.5),\n (0.3,1.5),\n (1.0,1.0)\n) t(x, y)\n\n\n/*\n  x  |  y  | kmeans_cluster\n-----+-----+----------------\n 1.9 | 2.3 |              0\n 1.5 | 2.5 |              0\n 0.8 | 0.6 |              1\n 0.4 | 1.8 |              1\n 0.1 | 0.1 |              1\n 0.2 | 1.8 |              1\n   2 | 0.5 |              1\n 0.3 | 1.5 |              1\n   1 |   1 |              1\n(9 rows)\n*/\n\n\n\n\n\u3010 \u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 \u3011\n\n\nPostgreSQL 9.1.5\u6587\u66f8 \u300c\u7b2c 42\u7ae0PL/Python - Python\u624b\u7d9a\u304d\u8a00\u8a9e\u300d\nMemo (2011/10/06) \u300c[Python] PostgreSQL \u306e PL/Python \u3092\u8a66\u3057\u3066\u307f\u308b\u300d\n\n\n\u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\n\nCREATE OR REPLACE FUNCTION urlpost(IN arg text) RETURNS boolean AS\n$$\n    import urllib\n    url = 'http://localhost:5000/sample/'\n    params = urllib.urlencode({'post': arg})\n    f = urllib.urlopen(url, params)\n    if f.read():\n        return True\n    return False\n$$\nLANGUAGE 'plpythonu' VOLATILE;\n\n\n\n__\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002__\n\n* [Siguniang's Blog \u300cPostgreSQL\u306ePL/Python\u3092\u4f7f\u3063\u3066\u307f\u308b\u300d](https://siguniang.wordpress.com/2013/01/05/notes-on-postgresql-pl-python/)\n\n\n#### __\uff08\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u8ee2\u8f09\uff09\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001SQL\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u3089\u3057\u3044__\n\n* __\u3010 \u95a2\u6570\u5b9a\u7fa9 \u3011__\n\n```{python:pl/python}\nCREATE OR REPLACE FUNCTION twitter(query text)\nRETURNS SETOF text\nAS $$\nimport json\nimport urllib\nimport requests\nurl = 'http://search.twitter.com/search.json?q=%s&rpp=5&include_entities=true&result_type=recent'\nresponse = requests.get(url%urllib.quote(query))\nresponse = json.loads(response.content)\nplpy.warning(response['completed_in']) # logging\nfor tweet in response['results']:\n    yield tweet['text']\n$$ LANGUAGE plpython2u;\n```\n\n* __\u3010 \u95a2\u6570\u5229\u7528\u4f8b \u3011__\n\n\n```\ntest=# select twitter('\u9df9\u72e9');\n```\n\n* __\u3010 \u30af\u30a8\u30ea\u8fd4\u308a\u5024\u7d50\u679c \u3011__\n\n```\nWARNING:  0.016\nCONTEXT:  PL/Python function \"twitter\"\n                                                                                          twitter\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n @26ap6 \u304a\uff01\u30a4\u30a4\u30cd\uff01\uff3c(^o^)\uff0f\u5c0f\u9df9\u72e9\u3055\u3093\u3067\u59cb\u307e\u308d\u3046\uff01\n \u30c1\u30ad\u30d1\u306e\u8863\u88c5\u304c\u8584\u624b\u3059\u304e\u308b\u3068\u95a2\u897f\u5f01\u3067\u3084\u304b\u308a\u59cb\u3081\u308b\u5c0f\u9df9\u72e9\n \u30c1\u30ad\u30d1\u306f\u58f2\u308c\u3066\u306a\u3044\u304b\u3089\u5e03\u304c\u8cb7\u3048\u306a\u3044\u304b\u3089\u8896\u304c\u306a\u304f\u3066\u5bd2\u3044\u3063\u3066\u5c0f\u9df9\u72e9\u3055\u3093\u304c\u304a\u6012\u308a\u3067\u3059\n \u5c0f\u9df9\u72e9\u9811\u5f35\u3063\u3066\u308b\u308f\uff01\u307b\u3093\u307e\u3002\n \u671d\u306e\u6563\u6b69\u7d42\u4e86\u3092\u30fc\u3000\u4eca\u65e5\u306f\u50d5\u306e\u6563\u6b69\u30a8\u30ea\u30a2\u306b\u9df9\u72e9\u306e\u65b9\u3005\u304c\u6765\u3066\u3044\u305f\u3088\u3000\u9ce5\u3055\u3093\u307f\u3093\u306a\u9003\u3052\u3066\u304a\u30fc\u3000\u5199\u771f\u306f\u4eca\u65e5\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3000\u767d\u83dc\u7551\u306e\u767d\u83dc\u306e\u4e0a\u306e\u30ab\u30e9\u30b9\u304f\u3093\uff08\u3055\u3093\u304b\u3082\uff1f\uff09\u3067\u3059 http://t.co/wuTdeij4\n(5 rows)\n```\n\n\n___\n\n#### __\u3010 \u305d\u306e\u4ed6\u306e\u4e8b\u4f8b \u3011__\n\n* [IT\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u30e1\u30bf\u30fb\u30ce\u30fc\u30c8 \u300c\u3010PostgreSQL\u3011PL/Python\u3067\u6a5f\u68b0\u5b66\u7fd2\u300d](http://engineer-metanote.blogspot.jp/2013/12/postgresqlplpython.html)\n\n> DB\u306b\u683c\u7d0d\u3057\u305f\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u6a5f\u68b0\u5b66\u7fd2\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3057\u305f\u304f\u306a\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n>\n>DB\u304b\u3089\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3057\u3066\u4ed6\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u3067\u51e6\u7406\u3057\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001PostgreSQL\u3067\u51e6\u7406\u304c\u5b8c\u7d50\u3057\u305f\u65b9\u304c\u4fbf\u5229\u306a\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\n>\n>\u3057\u304b\u3057\u3001PostgreSQL\u3067\u51e6\u7406\u3059\u308b\u305f\u3081\u306b\u6a5f\u68b0\u5b66\u7fd2\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4e00\u304b\u3089\u81ea\u5206\u3067\u5b9f\u88c5\u3059\u308b\u306e\u306f\u5927\u5909\u3067\u3059\u3002\n>\n>PL/Python\u3092\u4f7f\u3048\u3070\u3001python\u3067\u66f8\u304b\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u3066\u624b\u8efd\u306b\u6a5f\u68b0\u5b66\u7fd2\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u307e\u305f\u3001python\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30ea\u306fC\u8a00\u8a9e\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001\u901f\u5ea6\u9762\u3067\u3082\u60aa\u304f\u306a\u3044\u3067\u3059\u3002\n\n#### __\uff08\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u8ee2\u8f09\uff09\u30b3\u30fc\u30c9\u4f8b\u305d\u306e\uff12__\n\n* __\u3010 \u95a2\u6570\u5b9a\u7fa9 \u3011__\n\n> **kmeans\u95a2\u6570\u306e\u4f5c\u6210**\n>\n>\u8907\u6570\u306e\u30d9\u30af\u30c8\u30eb(x, y)\u304b\u3089\u3001x\u3068y\u305d\u308c\u305e\u308c\u3092\u914d\u5217\u306b\u3057\u3066\u6e21\u3057\u3001\n\u5404\u30d9\u30af\u30c8\u30eb\u304c\u3069\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5c5e\u3059\u304b\u3092\u914d\u5217\u3067\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\n```{python:pl/python}\nCREATE FUNCTION kmeans(x float[], y float[]) RETURNS int[] AS $$\n from numpy import array\n from scipy.cluster.vq import vq, kmeans, whiten\n\n features = array(zip(x, y))\n\n whitened = whiten(features)\n book = array((whitened[0], whitened[2]))\n codebook, distortion = kmeans(whitened, book)\n\n code, dist = vq(whitened, codebook)\n\n return list(code)\n$$ LANGUAGE plpython2u;\n```\n\n* __\u3010 \u95a2\u6570\u5229\u7528\u4f8b \u3011__\n\n```{SQL:pl/python}\nSELECT kmeans(\n array[1.9,1.5,0.8,0.4,0.1,0.2,2.0,0.3,1.0],\n array[2.3,2.5,0.6,1.8,0.1,1.8,0.5,1.5,1.0])\n```\n\n* __\u3010 \u30af\u30a8\u30ea\u8fd4\u308a\u5024\u7d50\u679c \u3011__\n\n```\n/*\n      kmeans       \n\n---------------------\n {0,0,1,1,1,1,1,1,1}\n(1 row)\n*/\n```\n\n\n* __\u3010 select\u6587\u30d9\u30bf\u6253\u3061\u5b9f\u884c\u4f8b \u3011__\n\n> **\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3059\u308b**\n>\n> \u30d9\u30af\u30c8\u30eb\u306e\u96c6\u5408\u3092kmeans\u95a2\u6570\u306b\u6e21\u305b\u308b\u3088\u3046\u306b\u914d\u5217\u306b\u96c6\u7d04\u3057\u3001kmeans\u3067\u5f97\u3089\u308c\u305f\u914d\u5217\u306en\u756a\u76ee\u304c\u96c6\u5408\u306en\u884c\u76ee\u306e\u30af\u30e9\u30b9\u30bf\u306e\u5024\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n```{python:pl/python}\nSELECT\n x, y,\n (\n  kmeans(\n   array_agg(x) OVER(),\n   array_agg(y) OVER()\n  )\n )[row_number() OVER()] as kmeans_cluster\nFROM (VALUES\n (1.9::float,2.3::float),\n (1.5,2.5),\n (0.8,0.6),\n (0.4,1.8),\n (0.1,0.1),\n (0.2,1.8),\n (2.0,0.5),\n (0.3,1.5),\n (1.0,1.0)\n) t(x, y)\n\n\n/*\n  x  |  y  | kmeans_cluster\n-----+-----+----------------\n 1.9 | 2.3 |              0\n 1.5 | 2.5 |              0\n 0.8 | 0.6 |              1\n 0.4 | 1.8 |              1\n 0.1 | 0.1 |              1\n 0.2 | 1.8 |              1\n   2 | 0.5 |              1\n 0.3 | 1.5 |              1\n   1 |   1 |              1\n(9 rows)\n*/\n```\n\n___\n\n\n### __\u3010 \u53c2\u8003\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8 \u3011__\n\n* [PostgreSQL 9.1.5\u6587\u66f8 \u300c\u7b2c 42\u7ae0PL/Python - Python\u624b\u7d9a\u304d\u8a00\u8a9e\u300d](https://www.postgresql.jp/document/9.1/html/plpython.html)\n\n* [Memo (2011/10/06) \u300c[Python] PostgreSQL \u306e PL/Python \u3092\u8a66\u3057\u3066\u307f\u308b\u300d](http://d.hatena.ne.jp/heavenshell/20111006/1317907527)\n\n> \u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\n\n```\nCREATE OR REPLACE FUNCTION urlpost(IN arg text) RETURNS boolean AS\n$$\n    import urllib\n    url = 'http://localhost:5000/sample/'\n    params = urllib.urlencode({'post': arg})\n    f = urllib.urlopen(url, params)\n    if f.read():\n        return True\n    return False\n$$\nLANGUAGE 'plpythonu' VOLATILE;\n```\n", "tags": ["Python", "PostgreSQL", "SQL", "PLpgSQL", "plsql"]}