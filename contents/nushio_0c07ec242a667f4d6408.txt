{"context": " More than 1 year has passed since last update.\u3053\u3093\u306b\u3061\u306f\u3002nushio\u3067\u3059\u3002\u5b9f\u306fRuby\u306f\u79c1\u306e2\u756a\u3081\u306b\u597d\u304d\u306a\u8a00\u8a9e\u3067\u3001\u3088\u304f\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u672c\u696d\u3067\u306f\u8a00\u8a9e\u51e6\u7406\u7cfb\u3092\u5b9f\u88c5\u3059\u308b\u306e\u304c\u4ed5\u4e8b\u306a\u306e\u3067\u3059\u304c\u3001\u8a00\u8a9e\u51e6\u7406\u7cfb\u3092\u4f5c\u3063\u3066\u3044\u308b\u3068\u62bd\u8c61\u30c7\u30fc\u30bf\u578b\uff08Abstract Data Type, ADT\uff09\u3092\u64cd\u4f5c\u3057\u305f\u308a\u8a55\u4fa1\u3057\u305f\u308a\u3059\u308b\u51e6\u7406\u3092\u3088\u304f\u66f8\u304f\u306e\u3067\u3001Haskell\u306e\u3088\u3046\u306a\u8a00\u8a9e\u306b\u5099\u308f\u3063\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306f\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u3002\u3068\u3066\u3082\u4fbf\u5229\u306a\u306e\u3067\u3001Python\u3084Ruby\u306b\u3082\u4f3c\u305f\u3088\u3046\u306a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u304c\u3042\u308c\u3070\u3046\u308c\u3057\u3044\u3088\u306d\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3044\u308d\u3093\u306a\u4eba\u304c\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\nRuby\u3060\u3068\u4f8b\u3048\u3070\n- https://github.com/whitequark/ast\n- http://qiita.com/egisatoshi/items/38f7f8aef32ac67ccd4b\nPython\u3060\u3068\u3001\u4f8b\u3048\u3070\n- http://www.grantjenks.com/docs/pypatt/ (and references therein)\n\u306a\u3069\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u3067\u3059\u304c\u3001\u3069\u3046\u3082\u3057\u3063\u304f\u308a\u304f\u308b\u3082\u306e\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u3067\u4f5c\u3063\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n#!/usr/bin/env ruby\n\nclass ADT\n  attr_accessor :constructor, :argv, :metadata\n  def =~(pattern)\n    pattern.match(self)\n  end\nend\n\nclass Pattern\n  attr_accessor :accept_continuation, :alternative\n  def match(x)\n    if self === x\n      return @accept_continuation.call(*x.argv)\n    elsif @alternative\n      return @alternative.match(x)\n    else\n      raise(\"unexpected constructor: \" + x.constructor.to_s)\n    end\n  end\n  def | (other)\n    @alternative=other\n    return self\n  end\nend\n\n\u30b3\u30a2\u3068\u306a\u308b\u90e8\u5206\u306f\u305f\u3063\u305f\u3053\u308c\u3060\u3051\u3067\u3059\u3002=~\u3067\u69cb\u6587\u6728\u306b\u30d1\u30bf\u30fc\u30f3\u3092\u30de\u30c3\u30c1\u3002\u5404\u30d1\u30bf\u30fc\u30f3\u306f===\u3067\u30de\u30c3\u30c1\u3057\u3066\u3044\u308b\u304b\u306e\u5224\u5b9a\u3092\u3057\u3001\u30de\u30c3\u30c1\u3057\u3066\u3044\u305f\u3089@accept_continuation\u30d6\u30ed\u30c3\u30af\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u30de\u30c3\u30c1\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089@alternative\u306b\u51e6\u7406\u3092\u6295\u3052\u307e\u3059\u3002\u3053\u306ealternative\u306f|\u6f14\u7b97\u5b50\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u500b\u3005\u306e\u62bd\u8c61\u69cb\u6587\u6728\u306e\u8981\u7d20\u306f\u3001\u30d6\u30ed\u30c3\u30af\u3092\u6e21\u3055\u308c\u305f\u3068\u304d\u306b\u306f\u30d1\u30bf\u30fc\u30f3\u3001\u305d\u3046\u3067\u306a\u3044\u3068\u304d\u306b\u306fADT\u3092\u4f5c\u3063\u3066\u8fd4\u3057\u307e\u3059\u3002\ndef Binop(*argv, &block)\n  if(block) # used as pattern\n    ret = Pattern.new()\n    ret.accept_continuation = block\n    def ret.===(x)\n      return x.constructor == :binop && String === x.argv[0]&&\n             ADT === x.argv[1] && ADT === x.argv[2]\n    end\n    return ret\n  else # used as constructor\n    ret = ADT.new()\n    ret.constructor = :binop\n    ret.argv = argv\n    return ret\n  end\nend\ndef Uniop(*argv, &block)\n  if(block) # used as pattern\n    ret = Pattern.new()\n    ret.accept_continuation = block\n    def ret.===(x)\n      return x.constructor == :uniop && String === x.argv[0] &&\n             ADT === x.argv[1]\n    end\n    return ret\n  else # used as constructor\n    ret = ADT.new()\n    ret.constructor = :uniop\n    ret.argv = argv\n    return ret\n  end\nend\n\ndef Imm(*argv, &block)\n  if(block) # used as pattern\n    ret = Pattern.new()\n    ret.accept_continuation = block\n    def ret.===(x)\n      return x.constructor == :imm\n    end\n    return ret\n  else # used as constructor\n    ret = ADT.new()\n    ret.constructor = :imm\n    ret.argv = argv\n    return ret\n  end\nend\n\n\u3053\u308c\u3067\u3001\u62bd\u8c61\u69cb\u6587\u6728\u3092\u69cb\u7bc9\u3059\u308b\u51e6\u7406\u306f\u666e\u901a\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3057\u3001\n\u9023\u7d9a\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306f\u6b21\u306e\u3088\u3046\u306b\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u3001\u675f\u7e1b\u5148\u306e\u5909\u6570\u3092\u5217\u6319\u3057\u305f\u30d6\u30ed\u30c3\u30af\u3092\u5f15\u6570\u306b\u53d6\u308b\u5f62\u3067\u66f8\u3051\u307e\u3059\u3002\nexpr = Binop('*', Imm(6), Binop('+', Imm(3), Imm(4)))\n\ndef evArith(expr)\n  expr =~ Imm {|x|\n    x\n  } | Binop {|op, x, y|\n    case op\n    when '+'\n      evArith(x) + evArith(y)\n    when '*'\n      evArith(x) * evArith(y)\n    else\n      raise( \"error: unknown operator \" + op + \" at position \" + expr.metadata)\n    end\n  }\nend\n\n\n\np evArith(expr)\n\n# eval\u304cUniop\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u65e8\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\np evArith(Uniop('-',expr))\n\n\u3068\u3001\u3053\u3053\u307e\u3067\u66f8\u3044\u305f\u3068\u3053\u308d\u3067\u3001\u5b9f\u306fegison\u306b\u306f\u62bd\u8c61\u69cb\u6587\u6728\u306b\u5bfe\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3082\u3042\u3063\u305f\uff01\u3068\u3044\u3046\u3053\u3068\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u8abf\u3079\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nhttps://github.com/egison/egison-ruby#algebraic-data-types\n_name \u3067\u675f\u7e1b\u3057\u305f\u5024\u304cname\u3067\u53c2\u7167\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059\u304c\u3001\u3053\u308c\u306fmethod_missing\u3092\u4f7f\u3063\u3066PatternVariable\u3092\u5c0e\u5165\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u306d\u3002\nhttps://github.com/egison/egison-ruby/blob/d0d50081fadb3aab8529e4a96e2e06706b1c28ac/lib/egison/core.rb#L335\nmethod_missing\u306f\u81ea\u5206\u3067\u7a4d\u6975\u7684\u306b\u4f7f\u3063\u305f\u3053\u3068\u306f\u306a\u304b\u3063\u305f\u3057\u3001Struct\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u306e\u3082\u77e5\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u52c9\u5f37\u306b\u306a\u308a\u307e\u3057\u305f\u3002egison\u3068\u3044\u3046\u5f37\u529b\u306a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3092\u3082\u3064\u8a00\u8a9e\u3082\u9762\u767d\u3044\u3067\u3059\u306d\u3002\n\u3053\u3053\u6570\u5e74\u306f\u9759\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\u3067\u3042\u308bHaskell\u3092\u3082\u3063\u3071\u3089\u4f7f\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u6700\u8fd1\u306f\u52d5\u7684\u578b\u4ed8\u3051\u3082\u3044\u3044\u306a\u3068\u601d\u3063\u3066\u304d\u3066\u3044\u3066\u3001Haskell\u3067\u3082Dynamic\u3092\u4ed5\u4e8b\u306b\u4f7f\u3063\u3066\u307f\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u52d5\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\u3067\u4ed6\u306b\u3082\u3053\u3093\u306a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306e\u5b9f\u88c5\u304c\u3042\u308b\u3088\uff01\u3068\u304b\u3001\u4e0a\u8a18\u306e\u5b9f\u88c5\u306f\u3082\u3063\u3068\u3053\u3046\u3057\u305f\u3089\u826f\u304f\u306a\u308b\u3088\uff01\u3068\u3044\u3046\u306e\u304c\u3042\u3063\u305f\u3089\u305c\u3072\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\u3053\u3093\u306b\u3061\u306f\u3002nushio\u3067\u3059\u3002\u5b9f\u306fRuby\u306f\u79c1\u306e2\u756a\u3081\u306b\u597d\u304d\u306a\u8a00\u8a9e\u3067\u3001\u3088\u304f\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u672c\u696d\u3067\u306f\u8a00\u8a9e\u51e6\u7406\u7cfb\u3092\u5b9f\u88c5\u3059\u308b\u306e\u304c\u4ed5\u4e8b\u306a\u306e\u3067\u3059\u304c\u3001\u8a00\u8a9e\u51e6\u7406\u7cfb\u3092\u4f5c\u3063\u3066\u3044\u308b\u3068\u62bd\u8c61\u30c7\u30fc\u30bf\u578b\uff08Abstract Data Type, ADT\uff09\u3092\u64cd\u4f5c\u3057\u305f\u308a\u8a55\u4fa1\u3057\u305f\u308a\u3059\u308b\u51e6\u7406\u3092\u3088\u304f\u66f8\u304f\u306e\u3067\u3001Haskell\u306e\u3088\u3046\u306a\u8a00\u8a9e\u306b\u5099\u308f\u3063\u3066\u3044\u308b\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306f\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u3002\u3068\u3066\u3082\u4fbf\u5229\u306a\u306e\u3067\u3001Python\u3084Ruby\u306b\u3082\u4f3c\u305f\u3088\u3046\u306a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u304c\u3042\u308c\u3070\u3046\u308c\u3057\u3044\u3088\u306d\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3044\u308d\u3093\u306a\u4eba\u304c\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\nRuby\u3060\u3068\u4f8b\u3048\u3070\n- https://github.com/whitequark/ast\n- http://qiita.com/egisatoshi/items/38f7f8aef32ac67ccd4b\n\nPython\u3060\u3068\u3001\u4f8b\u3048\u3070\n- http://www.grantjenks.com/docs/pypatt/ (and references therein)\n\n\u306a\u3069\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u3067\u3059\u304c\u3001\u3069\u3046\u3082\u3057\u3063\u304f\u308a\u304f\u308b\u3082\u306e\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u3067\u4f5c\u3063\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n```rb\n#!/usr/bin/env ruby\n\nclass ADT\n  attr_accessor :constructor, :argv, :metadata\n  def =~(pattern)\n    pattern.match(self)\n  end\nend\n\nclass Pattern\n  attr_accessor :accept_continuation, :alternative\n  def match(x)\n    if self === x\n      return @accept_continuation.call(*x.argv)\n    elsif @alternative\n      return @alternative.match(x)\n    else\n      raise(\"unexpected constructor: \" + x.constructor.to_s)\n    end\n  end\n  def | (other)\n    @alternative=other\n    return self\n  end\nend\n```\n\u30b3\u30a2\u3068\u306a\u308b\u90e8\u5206\u306f\u305f\u3063\u305f\u3053\u308c\u3060\u3051\u3067\u3059\u3002`=~`\u3067\u69cb\u6587\u6728\u306b\u30d1\u30bf\u30fc\u30f3\u3092\u30de\u30c3\u30c1\u3002\u5404\u30d1\u30bf\u30fc\u30f3\u306f`===`\u3067\u30de\u30c3\u30c1\u3057\u3066\u3044\u308b\u304b\u306e\u5224\u5b9a\u3092\u3057\u3001\u30de\u30c3\u30c1\u3057\u3066\u3044\u305f\u3089`@accept_continuation`\u30d6\u30ed\u30c3\u30af\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u30de\u30c3\u30c1\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3089`@alternative`\u306b\u51e6\u7406\u3092\u6295\u3052\u307e\u3059\u3002\u3053\u306ealternative\u306f`|`\u6f14\u7b97\u5b50\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\n\u500b\u3005\u306e\u62bd\u8c61\u69cb\u6587\u6728\u306e\u8981\u7d20\u306f\u3001\u30d6\u30ed\u30c3\u30af\u3092\u6e21\u3055\u308c\u305f\u3068\u304d\u306b\u306f\u30d1\u30bf\u30fc\u30f3\u3001\u305d\u3046\u3067\u306a\u3044\u3068\u304d\u306b\u306fADT\u3092\u4f5c\u3063\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n```rb\ndef Binop(*argv, &block)\n  if(block) # used as pattern\n    ret = Pattern.new()\n    ret.accept_continuation = block\n    def ret.===(x)\n      return x.constructor == :binop && String === x.argv[0]&&\n             ADT === x.argv[1] && ADT === x.argv[2]\n    end\n    return ret\n  else # used as constructor\n    ret = ADT.new()\n    ret.constructor = :binop\n    ret.argv = argv\n    return ret\n  end\nend\ndef Uniop(*argv, &block)\n  if(block) # used as pattern\n    ret = Pattern.new()\n    ret.accept_continuation = block\n    def ret.===(x)\n      return x.constructor == :uniop && String === x.argv[0] &&\n             ADT === x.argv[1]\n    end\n    return ret\n  else # used as constructor\n    ret = ADT.new()\n    ret.constructor = :uniop\n    ret.argv = argv\n    return ret\n  end\nend\n\ndef Imm(*argv, &block)\n  if(block) # used as pattern\n    ret = Pattern.new()\n    ret.accept_continuation = block\n    def ret.===(x)\n      return x.constructor == :imm\n    end\n    return ret\n  else # used as constructor\n    ret = ADT.new()\n    ret.constructor = :imm\n    ret.argv = argv\n    return ret\n  end\nend\n```\n\u3053\u308c\u3067\u3001\u62bd\u8c61\u69cb\u6587\u6728\u3092\u69cb\u7bc9\u3059\u308b\u51e6\u7406\u306f\u666e\u901a\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3057\u3001\n\u9023\u7d9a\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306f\u6b21\u306e\u3088\u3046\u306b\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u3001\u675f\u7e1b\u5148\u306e\u5909\u6570\u3092\u5217\u6319\u3057\u305f\u30d6\u30ed\u30c3\u30af\u3092\u5f15\u6570\u306b\u53d6\u308b\u5f62\u3067\u66f8\u3051\u307e\u3059\u3002\n\n```rb\nexpr = Binop('*', Imm(6), Binop('+', Imm(3), Imm(4)))\n\ndef evArith(expr)\n  expr =~ Imm {|x|\n    x\n  } | Binop {|op, x, y|\n    case op\n    when '+'\n      evArith(x) + evArith(y)\n    when '*'\n      evArith(x) * evArith(y)\n    else\n      raise( \"error: unknown operator \" + op + \" at position \" + expr.metadata)\n    end\n  }\nend\n\n\n\np evArith(expr)\n\n# eval\u304cUniop\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u65e8\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\np evArith(Uniop('-',expr))\n```\n\n\u3068\u3001\u3053\u3053\u307e\u3067\u66f8\u3044\u305f\u3068\u3053\u308d\u3067\u3001\u5b9f\u306fegison\u306b\u306f\u62bd\u8c61\u69cb\u6587\u6728\u306b\u5bfe\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3082\u3042\u3063\u305f\uff01\u3068\u3044\u3046\u3053\u3068\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u8abf\u3079\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\nhttps://github.com/egison/egison-ruby#algebraic-data-types\n`_name` \u3067\u675f\u7e1b\u3057\u305f\u5024\u304c`name`\u3067\u53c2\u7167\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059\u304c\u3001\u3053\u308c\u306f`method_missing`\u3092\u4f7f\u3063\u3066`PatternVariable`\u3092\u5c0e\u5165\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u306d\u3002\nhttps://github.com/egison/egison-ruby/blob/d0d50081fadb3aab8529e4a96e2e06706b1c28ac/lib/egison/core.rb#L335\n\n`method_missing`\u306f\u81ea\u5206\u3067\u7a4d\u6975\u7684\u306b\u4f7f\u3063\u305f\u3053\u3068\u306f\u306a\u304b\u3063\u305f\u3057\u3001`Struct`\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u306e\u3082\u77e5\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u52c9\u5f37\u306b\u306a\u308a\u307e\u3057\u305f\u3002`egison`\u3068\u3044\u3046\u5f37\u529b\u306a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3092\u3082\u3064\u8a00\u8a9e\u3082\u9762\u767d\u3044\u3067\u3059\u306d\u3002\n\n\u3053\u3053\u6570\u5e74\u306f\u9759\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\u3067\u3042\u308bHaskell\u3092\u3082\u3063\u3071\u3089\u4f7f\u3063\u3066\u304d\u307e\u3057\u305f\u304c\u3001\u6700\u8fd1\u306f\u52d5\u7684\u578b\u4ed8\u3051\u3082\u3044\u3044\u306a\u3068\u601d\u3063\u3066\u304d\u3066\u3044\u3066\u3001Haskell\u3067\u3082Dynamic\u3092\u4ed5\u4e8b\u306b\u4f7f\u3063\u3066\u307f\u305f\u308a\u3057\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067\u3001\u52d5\u7684\u578b\u4ed8\u3051\u8a00\u8a9e\u3067\u4ed6\u306b\u3082\u3053\u3093\u306a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306e\u5b9f\u88c5\u304c\u3042\u308b\u3088\uff01\u3068\u304b\u3001\u4e0a\u8a18\u306e\u5b9f\u88c5\u306f\u3082\u3063\u3068\u3053\u3046\u3057\u305f\u3089\u826f\u304f\u306a\u308b\u3088\uff01\u3068\u3044\u3046\u306e\u304c\u3042\u3063\u305f\u3089\u305c\u3072\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["Ruby", "\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1"]}