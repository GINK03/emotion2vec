{"tags": ["dlib", "C++", "Xcode", "OpenCV"], "context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nC++ \u306e\u3059\u3054\u3044\u30e9\u30a4\u30d6\u30e9\u30ea dlib \u306e\u30c7\u30e2 webcam_face_pose_ex.cpp \u3092\u53c2\u8003\u306b\u3001Xcode \u3067\u4f5c\u3063\u305f\u65e2\u5b58\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b dlib \u3092\u7d44\u307f\u8fbc\u3093\u3067\u9854\u8a8d\u8b58\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u80cc\u666f\nOpenCV \u306e CascadeClassifier \u3092\u4f7f\u3063\u305f\u5834\u5408\u306f\u9854\u306e\u30d1\u30fc\u30c4\u306e\u4f4d\u7f6e\u3092\u8a8d\u8b58\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u9854\u306e\u8f2a\u90ed\u3084\u7709\u306e\u4f4d\u7f6e\u306a\u3069\u306e\u7279\u5fb4\u70b9\u3092\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\ndlib \u306e get_frontal_face_detector \u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u3063\u3066\u304b\u306a\u308a\u8a73\u7d30\u306a\u30d1\u30fc\u30c4\u306e\u7279\u5fb4\u70b9\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u74b0\u5883\n\nOSX El Capitan (10.11.2)\nXcode 7.2\nMacBook Air (13-inch, Mid 2013)\n\n\n\u6e96\u5099\n\nOpenCV\nOpenCV \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\nbrew tap homebrew/science\nbrew install opencv\n\n/usr/local/Cellar/opencv/2.4.12/lib \u304b\u3089\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d5\u30a1\u30a4\u30eb\u3092 Link Binary With Libraries \u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\nOpenCV\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092 Header Search Paths \u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\n\u8ffd\u8a18 (2016/3/1)\nX11 \u306f\u8ffd\u52a0\u3057\u306a\u304f\u3066\u5927\u4e08\u592b\u3067\u3059\n\ndlib\ndlib \u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u307e\u308b\u3054\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3057\u3066\u3001 dlib/all/source.cpp \u3060\u3051\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\nHeader Search Paths \u306b dlib \u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3001source.cpp \u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u3068 \"_USER_ERROR__missing_dlib_all_source_cpp_file__OR__inconsistent_use_of_DEBUG_or_ENABLE_ASSERTS_preprocessor_directives_\" \u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\u79c1\u306f\u3053\u3053\u3067\u8a70\u307e\u3063\u3066\u3057\u3070\u3089\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001Qiita \u3067\u5171\u6709\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u306e\u52a9\u3051\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\u8ffd\u8a18 (2016/3/1)\ndlib \u3092 X11 \u306a\u3057\u3067\u4f7f\u3046\u305f\u3081\u3001\u30d5\u30e9\u30b0 DLIB_NO_GUI_SUPPORT \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u306e\u3088\u3046\u306b source.cpp \u306e\u5148\u982d\u306b\u66f8\u304d\u8fbc\u3080\u3068\u304b\u3001\n\nsource.cpp\n#define DLIB_NO_GUI_SUPPORT\n...\n\n\n\n\u30b3\u30fc\u30c9\n//\n//  main.cpp\n//  FaceTracker\n//\n//  Created by ryohey on 2015/12/11.\n//\n\n#include <iostream>\n#include <cv.h>\n#include <highgui.h>\n#include <ctype.h>\n\n#include \"dlib/opencv.h\"\n#include \"dlib/image_processing/frontal_face_detector.h\"\n#include \"dlib/image_processing.h\"\n\nvoid drawObjects(cv::Mat& image, std::vector<cv::Rect>& objects, cv::Scalar color, CvPoint offset = cvPoint(0, 0)) {\n\n    for (auto r : objects) {\n        cv::rectangle(image,\n                      cvPoint(r.x + offset.x,           r.y + offset.y),\n                      cvPoint(r.x + offset.x + r.width, r.y + offset.y + r.height),\n                      color);\n    }\n}\n\nint main(int argc, char **argv) {\n    std::string path(argv[0]);\n    const std::string RESOURCE_DIR = path.substr(0, path.find_last_of(\"\\\\/\") + 1);\n    const std::string FACE_LANDMARK_MODEL = \"shape_predictor_68_face_landmarks.dat\";\n\n    dlib::frontal_face_detector detector = dlib::get_frontal_face_detector();\n    dlib::shape_predictor pose_model;\n    dlib::deserialize(RESOURCE_DIR + FACE_LANDMARK_MODEL) >> pose_model;\n\n    const double w = 720, h = 480;\n\n    cv::VideoCapture capture(0);\n    capture.set(CV_CAP_PROP_FRAME_WIDTH, w);\n    capture.set(CV_CAP_PROP_FRAME_HEIGHT, h);\n\n    cvNamedWindow(\"Capture\", CV_WINDOW_AUTOSIZE);\n\n    while (1)\n    {\n        cv::Mat frame;\n        capture.read(frame);\n\n        // dlib\n        {\n            dlib::cv_image<dlib::bgr_pixel> cimg(frame);\n\n            // Detect faces\n            std::vector<dlib::rectangle> faces = detector(cimg);\n\n            // Find the pose of each face.\n            std::vector<dlib::full_object_detection> shapes;\n\n            for (auto face: faces) {\n                shapes.push_back(pose_model(cimg, face));\n            }\n\n            std::vector<cv::Rect> objects;\n\n            // \u70b9\u306e\u30b5\u30a4\u30ba\n            const int s = 2;\n\n            for (auto shape: shapes) {\n                auto rect = shape.get_rect();\n                objects.push_back((cv::Rect){\n                    (int)rect.left(), (int)rect.top(),\n                    (int)rect.width(), (int)rect.height()\n                });\n\n                for (auto i = 0; i < shape.num_parts(); i++) {\n                    auto part = shape.part(i);\n\n                    objects.push_back((cv::Rect){\n                        (int)part.x(), (int)part.y(),\n                        s, s\n                    });\n                }\n            }\n\n            if (objects.size() > 0) {\n                drawObjects(frame, objects, cv::Scalar(255, 255, 0));\n            }\n        }\n\n        IplImage frame_ = frame;\n        cvShowImage(\"Capture\", &frame_);\n\n        auto c = cvWaitKey(2);\n        if (c == '\\x1b') {\n            break;\n        }\n    }\n\n    cvDestroyWindow(\"Capture\");\n\n    return 0;\n}\n\n\n\u7d50\u679c\n\nDebug \u30d3\u30eb\u30c9\u3060\u3068\u304b\u306a\u308a\u9045\u304b\u3063\u305f\u306e\u3067 Release \u30d3\u30eb\u30c9\u306b\u3057\u305f\u3089\u3059\u3054\u3044\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002Macbook Air \u3067\u3059\u304c\u89e3\u50cf\u5ea6 720x480 \u3067\u30b9\u30e0\u30fc\u30ba\u306b\u52d5\u304d\u307e\u3057\u305f\u3002\n\u6700\u5c0f\u306e\u8a8d\u8b58\u30b5\u30a4\u30ba\u304c\u3042\u308b\u306e\u304b\u3001320x240 \u306e\u6642\u306f\u9854\u3092\u30ab\u30e1\u30e9\u306b\u8fd1\u3065\u3051\u306a\u3044\u3068\u8a8d\u8b58\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001720x480 \u306e\u5834\u5408\u3060\u3068\u5f8c\u308d\u306e\u65b9\u306e\u4eba\u3082\u3061\u3083\u3093\u3068\u8a8d\u8b58\u3055\u308c\u307e\u3057\u305f\u3002\n\u6a2a\u9854\u306f\u591a\u5c11\u5f31\u3044\u3088\u3046\u3067\u3059\u304c\u3001OpenCV \u306e Haar-Like \u7279\u5fb4\u3092\u4f7f\u3063\u305f\u5834\u5408\u3088\u308a\u3082\u3061\u3083\u3093\u3068\u8ffd\u5f93\u3057\u3001\u30d1\u30fc\u30c4\u3082\u304b\u306a\u308a\u8a73\u7d30\u306b\u53d6\u5f97\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n## \u6982\u8981\n\nC++ \u306e\u3059\u3054\u3044\u30e9\u30a4\u30d6\u30e9\u30ea dlib \u306e\u30c7\u30e2 webcam_face_pose_ex.cpp \u3092\u53c2\u8003\u306b\u3001Xcode \u3067\u4f5c\u3063\u305f\u65e2\u5b58\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b dlib \u3092\u7d44\u307f\u8fbc\u3093\u3067\u9854\u8a8d\u8b58\u3092\u884c\u3044\u307e\u3059\u3002\n\n## \u80cc\u666f\n\nOpenCV \u306e `CascadeClassifier` \u3092\u4f7f\u3063\u305f\u5834\u5408\u306f\u9854\u306e\u30d1\u30fc\u30c4\u306e\u4f4d\u7f6e\u3092\u8a8d\u8b58\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u9854\u306e\u8f2a\u90ed\u3084\u7709\u306e\u4f4d\u7f6e\u306a\u3069\u306e\u7279\u5fb4\u70b9\u3092\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\ndlib \u306e `get_frontal_face_detector` \u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u3063\u3066\u304b\u306a\u308a\u8a73\u7d30\u306a\u30d1\u30fc\u30c4\u306e\u7279\u5fb4\u70b9\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u74b0\u5883\n\n- OSX El Capitan (10.11.2)\n- Xcode 7.2\n- MacBook Air (13-inch, Mid 2013)\n\n## \u6e96\u5099\n\n### OpenCV\n\nOpenCV \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```bash\nbrew tap homebrew/science\nbrew install opencv\n```\n\n`/usr/local/Cellar/opencv/2.4.12/lib` \u304b\u3089\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d5\u30a1\u30a4\u30eb\u3092 `Link Binary With Libraries` \u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-18 14.04.23.png](https://qiita-image-store.s3.amazonaws.com/0/31477/8fd67e75-942a-bd56-6b4d-f4ef075f6f9a.png)\n\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\n\n### \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\n\nOpenCV\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092 `Header Search Paths` \u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-18 14.00.01.png](https://qiita-image-store.s3.amazonaws.com/0/31477/ae937f37-9842-53a0-d7ed-b98da729f1d7.png)\n\n#### \u8ffd\u8a18 (2016/3/1)\n\nX11 \u306f\u8ffd\u52a0\u3057\u306a\u304f\u3066\u5927\u4e08\u592b\u3067\u3059\n\n### dlib\n\ndlib \u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u307e\u308b\u3054\u3068\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u30b3\u30d4\u30fc\u3057\u3066\u3001 `dlib/all/source.cpp` \u3060\u3051\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n`Header Search Paths` \u306b dlib \u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8ffd\u52a0\u3057\u305f\u308a\u3001source.cpp \u3092\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u3068 `\"_USER_ERROR__missing_dlib_all_source_cpp_file__OR__inconsistent_use_of_DEBUG_or_ENABLE_ASSERTS_preprocessor_directives_\"` \u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\u79c1\u306f\u3053\u3053\u3067\u8a70\u307e\u3063\u3066\u3057\u3070\u3089\u304f\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001Qiita \u3067\u5171\u6709\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u306e\u52a9\u3051\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n#### \u8ffd\u8a18 (2016/3/1)\n\ndlib \u3092 X11 \u306a\u3057\u3067\u4f7f\u3046\u305f\u3081\u3001\u30d5\u30e9\u30b0 `DLIB_NO_GUI_SUPPORT` \u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\u4e0b\u8a18\u306e\u3088\u3046\u306b source.cpp \u306e\u5148\u982d\u306b\u66f8\u304d\u8fbc\u3080\u3068\u304b\u3001\n\n```cpp:source.cpp\n#define DLIB_NO_GUI_SUPPORT\n...\n```\n\n## \u30b3\u30fc\u30c9\n\n```cpp\n//\n//  main.cpp\n//  FaceTracker\n//\n//  Created by ryohey on 2015/12/11.\n//\n\n#include <iostream>\n#include <cv.h>\n#include <highgui.h>\n#include <ctype.h>\n\n#include \"dlib/opencv.h\"\n#include \"dlib/image_processing/frontal_face_detector.h\"\n#include \"dlib/image_processing.h\"\n\nvoid drawObjects(cv::Mat& image, std::vector<cv::Rect>& objects, cv::Scalar color, CvPoint offset = cvPoint(0, 0)) {\n    \n    for (auto r : objects) {\n        cv::rectangle(image,\n                      cvPoint(r.x + offset.x,           r.y + offset.y),\n                      cvPoint(r.x + offset.x + r.width, r.y + offset.y + r.height),\n                      color);\n    }\n}\n\nint main(int argc, char **argv) {\n    std::string path(argv[0]);\n    const std::string RESOURCE_DIR = path.substr(0, path.find_last_of(\"\\\\/\") + 1);\n    const std::string FACE_LANDMARK_MODEL = \"shape_predictor_68_face_landmarks.dat\";\n    \n    dlib::frontal_face_detector detector = dlib::get_frontal_face_detector();\n    dlib::shape_predictor pose_model;\n    dlib::deserialize(RESOURCE_DIR + FACE_LANDMARK_MODEL) >> pose_model;\n    \n    const double w = 720, h = 480;\n    \n    cv::VideoCapture capture(0);\n    capture.set(CV_CAP_PROP_FRAME_WIDTH, w);\n    capture.set(CV_CAP_PROP_FRAME_HEIGHT, h);\n    \n    cvNamedWindow(\"Capture\", CV_WINDOW_AUTOSIZE);\n    \n    while (1)\n    {\n        cv::Mat frame;\n        capture.read(frame);\n        \n        // dlib\n        {\n            dlib::cv_image<dlib::bgr_pixel> cimg(frame);\n            \n            // Detect faces\n            std::vector<dlib::rectangle> faces = detector(cimg);\n            \n            // Find the pose of each face.\n            std::vector<dlib::full_object_detection> shapes;\n            \n            for (auto face: faces) {\n                shapes.push_back(pose_model(cimg, face));\n            }\n            \n            std::vector<cv::Rect> objects;\n            \n            // \u70b9\u306e\u30b5\u30a4\u30ba\n            const int s = 2;\n            \n            for (auto shape: shapes) {\n                auto rect = shape.get_rect();\n                objects.push_back((cv::Rect){\n                    (int)rect.left(), (int)rect.top(),\n                    (int)rect.width(), (int)rect.height()\n                });\n                \n                for (auto i = 0; i < shape.num_parts(); i++) {\n                    auto part = shape.part(i);\n                    \n                    objects.push_back((cv::Rect){\n                        (int)part.x(), (int)part.y(),\n                        s, s\n                    });\n                }\n            }\n            \n            if (objects.size() > 0) {\n                drawObjects(frame, objects, cv::Scalar(255, 255, 0));\n            }\n        }\n        \n        IplImage frame_ = frame;\n        cvShowImage(\"Capture\", &frame_);\n        \n        auto c = cvWaitKey(2);\n        if (c == '\\x1b') {\n            break;\n        }\n    }\n    \n    cvDestroyWindow(\"Capture\");\n    \n    return 0;\n}\n```\n\n## \u7d50\u679c\n\n[![https://gyazo.com/86f0058c2345be238aaac9e0be496176](https://i.gyazo.com/86f0058c2345be238aaac9e0be496176.gif)](https://gyazo.com/86f0058c2345be238aaac9e0be496176)\n\nDebug \u30d3\u30eb\u30c9\u3060\u3068\u304b\u306a\u308a\u9045\u304b\u3063\u305f\u306e\u3067 Release \u30d3\u30eb\u30c9\u306b\u3057\u305f\u3089\u3059\u3054\u3044\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002Macbook Air \u3067\u3059\u304c\u89e3\u50cf\u5ea6 720x480 \u3067\u30b9\u30e0\u30fc\u30ba\u306b\u52d5\u304d\u307e\u3057\u305f\u3002\n\n\u6700\u5c0f\u306e\u8a8d\u8b58\u30b5\u30a4\u30ba\u304c\u3042\u308b\u306e\u304b\u3001320x240 \u306e\u6642\u306f\u9854\u3092\u30ab\u30e1\u30e9\u306b\u8fd1\u3065\u3051\u306a\u3044\u3068\u8a8d\u8b58\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u3001720x480 \u306e\u5834\u5408\u3060\u3068\u5f8c\u308d\u306e\u65b9\u306e\u4eba\u3082\u3061\u3083\u3093\u3068\u8a8d\u8b58\u3055\u308c\u307e\u3057\u305f\u3002\n\u6a2a\u9854\u306f\u591a\u5c11\u5f31\u3044\u3088\u3046\u3067\u3059\u304c\u3001OpenCV \u306e Haar-Like \u7279\u5fb4\u3092\u4f7f\u3063\u305f\u5834\u5408\u3088\u308a\u3082\u3061\u3083\u3093\u3068\u8ffd\u5f93\u3057\u3001\u30d1\u30fc\u30c4\u3082\u304b\u306a\u308a\u8a73\u7d30\u306b\u53d6\u5f97\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n"}