{"context": "\n\n\u6982\u8981\nRxSwift Advent Calendar 2016 \u306e11\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nLINE\u3084Evernote\u306a\u3069\u306e\u3088\u3046\u306bUI\u306e\u30c6\u30fc\u30de\u3092\u5909\u3048\u305f\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3088\u306d\uff1f\n\u30c6\u30fc\u30de\u3092\u30a2\u30d7\u30ea\u5168\u4f53\u306eView\u306b\u53cd\u6620\u3055\u305b\u308b\u3088\u3046\u306a\u5834\u5408\u306b\u3001RxCocoa\u306eUIBindingObserver\u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u8003\u3048\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\nRxSwift/UIBindingObserver.swift at master \u00b7 ReactiveX/RxSwift \u00b7 GitHub\n\n\u74b0\u5883\nRxSwift 3.0.1\nXcode 8.1(8B62)\nSwift 3.0\n\nUIBindingObserver\u3068\u306f\nUIKit\u306e\u5404\u30af\u30e9\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306eObserver\u3067\u3059\u3002UILabel\u3067\u306flabel.rx.text\u306e\u3088\u3046\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n// \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nObservable<String?>.just(\"text\").asDriver(onErrorJustReturn: nil)\n    .drive(label.rx.text)\n    .addDisposableTo(disposeBag)\n\n// RxCocoa\u5185\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\nextension Reactive where Base: UILabel {\n\n    /// Bindable sink for `text` property.\n    public var text: UIBindingObserver<Base, String?> {\n        return UIBindingObserver(UIElement: self.base) { label, text in\n            label.text = text\n        }\n    }\n}\n\nUIBindingObserver\u306fUIElement\u306bAnyObject\uff08\u5927\u4f53UIKit\u306e\u30af\u30e9\u30b9\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\uff09\u3092\u6e21\u3057\u3001binding\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u5185\u3067UIElement\u306b\u30a4\u30d9\u30f3\u30c8\u306e\u5024\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\u3002\u4e0a\u8a18UILabel\u306e\u4f8b\u3067\u3044\u3046\u3068\u3001\u6e21\u3063\u3066\u304d\u305fString?\u306e\u5024\u3092label.text\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u3044\u307e\u3059\u3002UIBindingObserver \u306eRxCocoa\u5185\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n/**\nObserver that enforces interface binding rules:\n * can't bind errors (in debug builds binding of errors causes `fatalError` in release builds errors are being logged)\n * ensures binding is performed on main thread\n\n`UIBindingObserver` doesn't retain target interface and in case owned interface element is released, element isn't bound.\n*/\npublic class UIBindingObserver<UIElementType, Value> : ObserverType where UIElementType: AnyObject {\n    public typealias E = Value\n\n    weak var UIElement: UIElementType?\n\n    let binding: (UIElementType, Value) -> Void\n\n    /// Initializes `ViewBindingObserver` using\n    public init(UIElement: UIElementType, binding: @escaping (UIElementType, Value) -> Void) {\n        self.UIElement = UIElement\n        self.binding = binding\n    }\n\n    /// Binds next element to owner view as described in `binding`.\n    public func on(_ event: Event<Value>) {\n        MainScheduler.ensureExecutingOnScheduler(errorMessage: \"Element can be bound to user interface only on MainThread.\")\n\n        switch event {\n        case .next(let element):\n            if let view = self.UIElement {\n                binding(view, element)\n            }\n        case .error(let error):\n            bindingErrorToInterface(error)\n        case .completed:\n            break\n        }\n    }\n\n    /// Erases type of observer.\n    ///\n    /// - returns: type erased observer.\n    public func asObserver() -> AnyObserver<Value> {\n        return AnyObserver(eventHandler: on)\n    }\n}\n\n\n\u30c6\u30fc\u30de\u306e\u6e96\u5099\nTheme\u3084ThemeService\u306f\u30a2\u30d7\u30ea\u3054\u3068\u3067\u9069\u5f53\u306b\u5b9a\u7fa9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4eca\u56de\u306f\u30e9\u30d9\u30eb\u3084\u30dc\u30bf\u30f3\u3054\u3068\u306b\u30c6\u30fc\u30de\u306e\u9069\u7528\u65b9\u6cd5\u3092\u6c7a\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u30cd\u30b9\u30c8\u3057\u305fstruct\u3067\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nstruct Theme {\n\n    struct Label {\n        let textColor: UIColor\n        static let `default` = Label(textColor: .black)\n    }\n\n    struct Button {\n        let textColor: UIColor\n        let backgroundColor: UIColor\n        static let `default` = Button(textColor: .white, backgroundColor: .blue)\n    }\n\n    let label: Label\n    let button: Button\n\n    static let `default` = Theme(\n        label: Label.default,\n        button: Button.default\n    )\n}\n\nfinal class ThemeService {\n\n    static let instance = ThemeService()\n\n    let theme: Driver<Theme>\n\n    init() {\n\n        self.theme = Observable.just(Theme.default).asDriver(onErrorJustReturn: Theme.default)\n    }\n}\n\n\n\u76ee\u6307\u3059\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bView1\u500b1\u500b\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u3044\u304f\u306e\u306f\u7c21\u5358\u306b\u66f8\u3051\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u9762\u5012\u306a\u306e\u3067\u907f\u3051\u305f\u3044\u3067\u3059\u3002\nThemeService.instance.theme\n    .drive(label.rx.driveTheme)\n    .addDisposableTo(disposeBag)\n\n\u30c6\u30fc\u30de\u3092\u9069\u7528\u3059\u308b\u30dc\u30bf\u30f3\u3084\u30e9\u30d9\u30eb\u306a\u3069\u306eView\u306e\u914d\u5217\u3092\u6e21\u3057\u3066\u3001\u30c6\u30fc\u30de\u304c\u5909\u308f\u308b\u3068\u3059\u3079\u3066\u306b\u9069\u7528\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u304c\u76ee\u6307\u3059\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var label: UILabel!\n    @IBOutlet weak var button1: UIButton!\n    @IBOutlet weak var button2: UIButton!\n\n    let disposeBag = DisposeBag()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        ThemeService.instance.theme\n            .drive([label, button1, button2].rx.driveTheme)\n            .addDisposableTo(disposeBag)\n    }\n}\n\n\nThemeApplicable\u30d7\u30ed\u30c8\u30b3\u30eb\nView\u305d\u308c\u305e\u308c\u3067\u30c6\u30fc\u30de\u306e\u9069\u7528\u65b9\u6cd5\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u304cThemeApplicable\u3067\u3059\u3002\nprotocol ThemeApplicable: NSObjectProtocol {\n\n    func applyTheme(_ theme: Theme)\n}\n\nUILabel\u3068UIButton\u306b\u30c6\u30fc\u30de\u3092\u9069\u7528\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nextension UILabel: ThemeApplicable {\n\n    func applyTheme(_ theme: Theme) {\n\n        textColor = theme.label.textColor\n    }\n}\n\nextension UIButton: ThemeApplicable {\n\n    func applyTheme(_ theme: Theme) {\n\n        setTitleColor(theme.button.textColor, for: .normal)\n        backgroundColor = theme.button.backgroundColor\n    }\n}\n\n\n\u30c6\u30fc\u30de\u3092\u9069\u7528\u3059\u308bUIBindingObserver\u3092\u66f8\u304f\nThemeApplicable\u3092\u914d\u5217\u3068\u3057\u3066\u6301\u3064ThemeApplicableCollection\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n// .rx\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306bReactiveCompatible\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u63a1\u7528\u3057\u307e\u3059\u3002\nfinal class ThemeApplicableCollection: ReactiveCompatible {\n\n    let items: [ThemeApplicable]\n\n    init(_ items: [ThemeApplicable]) {\n\n        self.items = items\n    }\n}\n\n\u3042\u3068\u306fUIBindingObserver\u306eextension\u3092\u66f8\u304f\u3060\u3051\u3067\u3059\u3002\n// .rx.driveTheme\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306bextension\u3092\u66f8\u304d\u307e\u3059\u3002\nextension Reactive where Base: ThemeApplicableCollection {\n\n    // \u5024\u306fTheme\u306b\u3057\u307e\u3059\u3002<, Theme>\u306e\u90e8\u5206\n    var driveTheme: UIBindingObserver<Base, Theme> {\n\n        return UIBindingObserver(UIElement: base) { collection, theme in\n            // Theme\u306e\u5024\u304c\u6e21\u3063\u3066\u304d\u305f\u3089\u3001\u3059\u3079\u3066\u306eView\u306b\u9069\u7528\u3057\u307e\u3059\u3002\n            collection.items.forEach {\n\n                $0.applyTheme(theme)\n            }\n        }\n    }\n}\n\n\n\u5b8c\u6210\u54c1\n\u3053\u308c\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u306f\u3001UIBindingObserver\u306eUIElement\uff08\u4eca\u56de\u3067\u3044\u3046ThemeApplicableCollection\uff09\u304cweak\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066Retain\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var label: UILabel!\n    @IBOutlet weak var button1: UIButton!\n    @IBOutlet weak var button2: UIButton!\n\n    let disposeBag = DisposeBag()\n    var themeApplicableCollection: ThemeApplicableCollection!\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        themeApplicableCollection = ThemeApplicableCollection([label, button1, button2])\n\n        ThemeService.instance.theme\n            .drive(themeApplicableCollection.rx.driveTheme)\n            .addDisposableTo(disposeBag)\n    }\n}\n\n\n\u6700\u5f8c\u306b\nextension\u3067\u72ec\u81ea\u306eUIBindingObserver\u3092\u3044\u304f\u3089\u3067\u3082\u66f8\u3051\u308b\u306e\u3067\u3001\n\u4ed6\u306b\u3082\u6d3b\u7528\u3067\u304d\u308b\u5834\u6240\u306f\u591a\u305d\u3046\u3067\u3059\u3002\n\u4eca\u56de\u7d39\u4ecb\u3057\u305f\u30b3\u30fc\u30c9\u3067\u6539\u5584\u3067\u304d\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\uff01\n## \u6982\u8981\n[RxSwift Advent Calendar 2016](http://qiita.com/advent-calendar/2016/rxswift) \u306e11\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nLINE\u3084Evernote\u306a\u3069\u306e\u3088\u3046\u306bUI\u306e\u30c6\u30fc\u30de\u3092\u5909\u3048\u305f\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3088\u306d\uff1f\n\u30c6\u30fc\u30de\u3092\u30a2\u30d7\u30ea\u5168\u4f53\u306eView\u306b\u53cd\u6620\u3055\u305b\u308b\u3088\u3046\u306a\u5834\u5408\u306b\u3001RxCocoa\u306eUIBindingObserver\u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u8003\u3048\u305f\u306e\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n[RxSwift/UIBindingObserver.swift at master \u00b7 ReactiveX/RxSwift \u00b7 GitHub](https://github.com/ReactiveX/RxSwift/blob/master/RxCocoa/CocoaUnits/UIBindingObserver.swift)\n\n## \u74b0\u5883\nRxSwift 3.0.1\nXcode 8.1(8B62)\nSwift 3.0\n\n## UIBindingObserver\u3068\u306f\nUIKit\u306e\u5404\u30af\u30e9\u30b9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306eObserver\u3067\u3059\u3002UILabel\u3067\u306f`label.rx.text`\u306e\u3088\u3046\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n\n```swift\n// \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nObservable<String?>.just(\"text\").asDriver(onErrorJustReturn: nil)\n    .drive(label.rx.text)\n    .addDisposableTo(disposeBag)\n\n// RxCocoa\u5185\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\nextension Reactive where Base: UILabel {\n    \n    /// Bindable sink for `text` property.\n    public var text: UIBindingObserver<Base, String?> {\n        return UIBindingObserver(UIElement: self.base) { label, text in\n            label.text = text\n        }\n    }\n}\n```\n\nUIBindingObserver\u306f`UIElement`\u306bAnyObject\uff08\u5927\u4f53UIKit\u306e\u30af\u30e9\u30b9\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\uff09\u3092\u6e21\u3057\u3001`binding`\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u5185\u3067`UIElement`\u306b\u30a4\u30d9\u30f3\u30c8\u306e\u5024\u3092\u30d0\u30a4\u30f3\u30c9\u3057\u307e\u3059\u3002\u4e0a\u8a18UILabel\u306e\u4f8b\u3067\u3044\u3046\u3068\u3001\u6e21\u3063\u3066\u304d\u305f`String?`\u306e\u5024\u3092`label.text`\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u3044\u307e\u3059\u3002UIBindingObserver \u306eRxCocoa\u5185\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```swift\n/**\nObserver that enforces interface binding rules:\n * can't bind errors (in debug builds binding of errors causes `fatalError` in release builds errors are being logged)\n * ensures binding is performed on main thread\n \n`UIBindingObserver` doesn't retain target interface and in case owned interface element is released, element isn't bound.\n*/\npublic class UIBindingObserver<UIElementType, Value> : ObserverType where UIElementType: AnyObject {\n    public typealias E = Value\n\n    weak var UIElement: UIElementType?\n\n    let binding: (UIElementType, Value) -> Void\n\n    /// Initializes `ViewBindingObserver` using\n    public init(UIElement: UIElementType, binding: @escaping (UIElementType, Value) -> Void) {\n        self.UIElement = UIElement\n        self.binding = binding\n    }\n\n    /// Binds next element to owner view as described in `binding`.\n    public func on(_ event: Event<Value>) {\n        MainScheduler.ensureExecutingOnScheduler(errorMessage: \"Element can be bound to user interface only on MainThread.\")\n\n        switch event {\n        case .next(let element):\n            if let view = self.UIElement {\n                binding(view, element)\n            }\n        case .error(let error):\n            bindingErrorToInterface(error)\n        case .completed:\n            break\n        }\n    }\n\n    /// Erases type of observer.\n    ///\n    /// - returns: type erased observer.\n    public func asObserver() -> AnyObserver<Value> {\n        return AnyObserver(eventHandler: on)\n    }\n}\n```\n\n\n## \u30c6\u30fc\u30de\u306e\u6e96\u5099\n`Theme`\u3084`ThemeService`\u306f\u30a2\u30d7\u30ea\u3054\u3068\u3067\u9069\u5f53\u306b\u5b9a\u7fa9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4eca\u56de\u306f\u30e9\u30d9\u30eb\u3084\u30dc\u30bf\u30f3\u3054\u3068\u306b\u30c6\u30fc\u30de\u306e\u9069\u7528\u65b9\u6cd5\u3092\u6c7a\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u30cd\u30b9\u30c8\u3057\u305fstruct\u3067\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```swift\nstruct Theme {\n    \n    struct Label {\n        let textColor: UIColor\n        static let `default` = Label(textColor: .black)\n    }\n    \n    struct Button {\n        let textColor: UIColor\n        let backgroundColor: UIColor\n        static let `default` = Button(textColor: .white, backgroundColor: .blue)\n    }\n    \n    let label: Label\n    let button: Button\n    \n    static let `default` = Theme(\n        label: Label.default,\n        button: Button.default\n    )\n}\n\nfinal class ThemeService {\n    \n    static let instance = ThemeService()\n    \n    let theme: Driver<Theme>\n    \n    init() {\n        \n        self.theme = Observable.just(Theme.default).asDriver(onErrorJustReturn: Theme.default)\n    }\n}\n```\n\n\n## \u76ee\u6307\u3059\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bView1\u500b1\u500b\u306b\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u3044\u304f\u306e\u306f\u7c21\u5358\u306b\u66f8\u3051\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u306f\u9762\u5012\u306a\u306e\u3067\u907f\u3051\u305f\u3044\u3067\u3059\u3002\n\n```swift\nThemeService.instance.theme\n    .drive(label.rx.driveTheme)\n    .addDisposableTo(disposeBag)\n```\n\n\u30c6\u30fc\u30de\u3092\u9069\u7528\u3059\u308b\u30dc\u30bf\u30f3\u3084\u30e9\u30d9\u30eb\u306a\u3069\u306eView\u306e**\u914d\u5217**\u3092\u6e21\u3057\u3066\u3001\u30c6\u30fc\u30de\u304c\u5909\u308f\u308b\u3068\u3059\u3079\u3066\u306b\u9069\u7528\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u304c\u76ee\u6307\u3059\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\n\n```swift\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var label: UILabel!\n    @IBOutlet weak var button1: UIButton!\n    @IBOutlet weak var button2: UIButton!\n    \n    let disposeBag = DisposeBag()\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        ThemeService.instance.theme\n            .drive([label, button1, button2].rx.driveTheme)\n            .addDisposableTo(disposeBag)\n    }\n}\n```\n\n\n## ThemeApplicable\u30d7\u30ed\u30c8\u30b3\u30eb\nView\u305d\u308c\u305e\u308c\u3067\u30c6\u30fc\u30de\u306e\u9069\u7528\u65b9\u6cd5\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u304c`ThemeApplicable`\u3067\u3059\u3002\n\n```swift\nprotocol ThemeApplicable: NSObjectProtocol {\n    \n    func applyTheme(_ theme: Theme)\n}\n```\n\nUILabel\u3068UIButton\u306b\u30c6\u30fc\u30de\u3092\u9069\u7528\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```swift\nextension UILabel: ThemeApplicable {\n    \n    func applyTheme(_ theme: Theme) {\n        \n        textColor = theme.label.textColor\n    }\n}\n\nextension UIButton: ThemeApplicable {\n    \n    func applyTheme(_ theme: Theme) {\n            \n        setTitleColor(theme.button.textColor, for: .normal)\n        backgroundColor = theme.button.backgroundColor\n    }\n}\n```\n\n## \u30c6\u30fc\u30de\u3092\u9069\u7528\u3059\u308bUIBindingObserver\u3092\u66f8\u304f\n`ThemeApplicable`\u3092\u914d\u5217\u3068\u3057\u3066\u6301\u3064`ThemeApplicableCollection`\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```swift\n// .rx\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306bReactiveCompatible\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u63a1\u7528\u3057\u307e\u3059\u3002\nfinal class ThemeApplicableCollection: ReactiveCompatible {\n    \n    let items: [ThemeApplicable]\n    \n    init(_ items: [ThemeApplicable]) {\n        \n        self.items = items\n    }\n}\n```\n\n\u3042\u3068\u306f`UIBindingObserver`\u306eextension\u3092\u66f8\u304f\u3060\u3051\u3067\u3059\u3002\n\n```swift\n// .rx.driveTheme\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306bextension\u3092\u66f8\u304d\u307e\u3059\u3002\nextension Reactive where Base: ThemeApplicableCollection {\n    \n    // \u5024\u306fTheme\u306b\u3057\u307e\u3059\u3002<, Theme>\u306e\u90e8\u5206\n    var driveTheme: UIBindingObserver<Base, Theme> {\n        \n        return UIBindingObserver(UIElement: base) { collection, theme in\n            // Theme\u306e\u5024\u304c\u6e21\u3063\u3066\u304d\u305f\u3089\u3001\u3059\u3079\u3066\u306eView\u306b\u9069\u7528\u3057\u307e\u3059\u3002\n            collection.items.forEach {\n                \n                $0.applyTheme(theme)\n            }\n        }\n    }\n}\n```\n\n## \u5b8c\u6210\u54c1\n\u3053\u308c\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6ce8\u610f\u70b9\u3068\u3057\u3066\u306f\u3001`UIBindingObserver`\u306e`UIElement`\uff08\u4eca\u56de\u3067\u3044\u3046ThemeApplicableCollection\uff09\u304cweak\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066Retain\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n```swift\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var label: UILabel!\n    @IBOutlet weak var button1: UIButton!\n    @IBOutlet weak var button2: UIButton!\n    \n    let disposeBag = DisposeBag()\n    var themeApplicableCollection: ThemeApplicableCollection!\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        themeApplicableCollection = ThemeApplicableCollection([label, button1, button2])\n        \n        ThemeService.instance.theme\n            .drive(themeApplicableCollection.rx.driveTheme)\n            .addDisposableTo(disposeBag)\n    }\n}\n```\n\n## \u6700\u5f8c\u306b\nextension\u3067\u72ec\u81ea\u306eUIBindingObserver\u3092\u3044\u304f\u3089\u3067\u3082\u66f8\u3051\u308b\u306e\u3067\u3001\n\u4ed6\u306b\u3082\u6d3b\u7528\u3067\u304d\u308b\u5834\u6240\u306f\u591a\u305d\u3046\u3067\u3059\u3002\n\u4eca\u56de\u7d39\u4ecb\u3057\u305f\u30b3\u30fc\u30c9\u3067\u6539\u5584\u3067\u304d\u308b\u7b87\u6240\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u30b3\u30e1\u30f3\u30c8\u3092\u3044\u305f\u3060\u3051\u308b\u3068\u5b09\u3057\u3044\u3067\u3059\uff01\n", "tags": ["Swift", "RxSwift", "iOS"]}