{"tags": ["RaspberryPi", "Linux", "kernel", "C\u8a00\u8a9e"], "context": "\n\n\u524d\u56de\nstart_kernel\u5185\u3067\u30b9\u30bf\u30c3\u30af\u306b\u30ab\u30ca\u30ea\u30a2\u30b3\u30fc\u30c9\u3092\u5c0e\u5165\u3059\u308b\u307e\u3067\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\u30da\u30fc\u30b8\u30a2\u30c9\u30ec\u30b9\u306e\u521d\u671f\u5316\u307e\u3067\u8aad\u307f\u89e3\u304d\u307e\u3059\u3002\n\n\u4eca\u56de\u306e\u5bfe\u8c61\u7bc4\u56f2\n\ninit/main.c\nasmlinkage __visible void __init start_kernel(void)\n{\n    (\u7701\u7565)\n\n    cgroup_init_early();  //\u5bfe\u8c61\u7bc4\u56f2\u3000\u3053\u3053\u304b\u3089\n\n    local_irq_disable();\n    early_boot_irqs_disabled = true;\n\n/*\n * Interrupts are still disabled. Do necessary setups, then\n * enable them\n */\n    boot_cpu_init();\n    page_address_init();\n    pr_notice(\"%s\", linux_banner);  //\u5bfe\u8c61\u7bc4\u56f2\u3000\u3053\u3053\u307e\u3067\n    setup_arch(&command_line);      //\u5927\u7269\u3060\u3063\u305f\u306e\u3067\u3001\u6b21\u56de\u306b\u8aac\u660e\n\n\n\ncgroup_init_early\n\u307e\u305a\u3001cgroups(control groups)\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\ncgroups\u306f\u30d7\u30ed\u30bb\u30b9\u3092\u7279\u5b9a\u306e\u57fa\u6e96\u306b\u3088\u3063\u3066\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3066\u3001\n\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306e\u30ea\u30bd\u30fc\u30b9\u4f7f\u7528\u91cf(CPU\u30b3\u30a2\u3001\u30e1\u30e2\u30ea\u3001IO\u306a\u3069\u306e\u4f7f\u7528\u91cf)\u3092\u5236\u9650\u30fb\u76e3\u8996\u3067\u304d\u308b\u6a5f\u80fd\u3067\u3059\u3002\nLXC(Linux Container)\u3084Docker\u306a\u3069\u306eOS\u30ec\u30d9\u30eb\u306e\u4eee\u60f3\u5316\u3067\u4f7f\u7528\u3055\u308c\u308b\u6280\u8853\u3067\u3042\u308a\u3001\n\u30a4\u30f3\u30d5\u30e9\u7cfb(\u30b5\u30fc\u30d0\u7ba1\u7406\u8005)\u306b\u3068\u3063\u3066\u99b4\u67d3\u307f\u306e\u3042\u308b\u6280\u8853\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001Docker\u306f\u66f8\u7c4d\u304c\u8c4a\u5bcc\u3067\u5b66\u7fd2\u3057\u3084\u3059\u3044\u74b0\u5883\u306a\u306e\u306b\u3001\nLXC\u306fRaspberry Pi\u3067\u8a66\u305d\u3046\u3068\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d5\u30a3\u30b0\u3092\u5909\u66f4\u3057\u3066image\u3092\u518d\u4f5c\u6210\u304c\u5fc5\u8981\u2026\u2026\u3053\u306e\u5dee\u306f\u4e00\u4f53\u3002\n\u4ee5\u4e0b\u304ccgroup_init_early()\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\nkernel/cgroup.c\nint __init cgroup_init_early(void)\n{\n    static struct cgroup_sb_opts __initdata opts;\n    struct cgroup_subsys *ss;\n    int i;\n\n    init_cgroup_root(&cgrp_dfl_root, &opts);\n    cgrp_dfl_root.cgrp.self.flags |= CSS_NO_REF;\n\n    RCU_INIT_POINTER(init_task.cgroups, &init_css_set);\n\n    for_each_subsys(ss, i) {\n        WARN(!ss->css_alloc || !ss->css_free || ss->name || ss->id,\n             \"invalid cgroup_subsys %d:%s css_alloc=%p css_free=%p name:id=%d:%s\\n\",\n             i, cgroup_subsys_name[i], ss->css_alloc, ss->css_free,\n             ss->id, ss->name);\n        WARN(strlen(cgroup_subsys_name[i]) > MAX_CGROUP_TYPE_NAMELEN,\n             \"cgroup_subsys_name %s too long\\n\", cgroup_subsys_name[i]);\n\n        ss->id = i;\n        ss->name = cgroup_subsys_name[i];\n\n        if (ss->early_init)\n            cgroup_init_subsys(ss, true);\n    }\n    return 0;\n}\n\n\ncgroup_sb_opts\u306fcgroup\u306e\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53\u3001\ncgroup_subsys\u306f\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0ID\u3068\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53\u3067\u3059\u3002\n\u4e0d\u601d\u8b70\u3067\u3059\u304c\u3001\u524d\u8005\u306fstatic\u3067\u9759\u7684\u5909\u6570\u3068\u3057\u3066\u5ba3\u8a00\u3057\u3066\u3044\u308b\u306e\u306b\u3001\n__initdata\u3067\u300c\u521d\u671f\u5316\u5f8c\u306b\u30e1\u30e2\u30ea\u304b\u3089\u30c7\u30fc\u30bf\u3092\u6d88\u53bb\u3059\u308b\u300d\u3068\u3082\u5ba3\u8a00\u3057\u3066\u3044\u308b\u3002\u6b8b\u3057\u305f\u3044\u306e\u304b\u6d88\u3057\u305f\u3044\u306e\u304b\u3002\n\u95a2\u6570init_cgroup_root()\u3067\u306f\u3001cgroup\u306eroot(\u6839\u3001\u89aa)\u3092\u8a2d\u5b9a\u3057\u3001\ncgroup_root\u69cb\u9020\u4f53\u304c\u6301\u3064\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316\u3084root\u304c\u6301\u3064\u60c5\u5831\u3092cgroup_sb_opts\u306b\u30b3\u30d4\u30fc\u3059\u308b\u4f5c\u696d\u3092\u884c\u3044\u307e\u3059\u3002\nfor_each_subsys\u4ee5\u4e0b\u3067\u306f\u3001cgroup_subsys\u69cb\u9020\u4f53\u306b\u5bfe\u3057\u3066\u3001\nid\u767b\u9332\u3001\u540d\u524d\u767b\u9332\u3092\u884c\u3044\u3001\u51e6\u7406\u304c\u5b58\u5728\u3059\u308c\u3070\u65e9\u671f\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\nfor_each_XXXX\u306ffor\u6587\u306b\u4f3c\u305f\u30de\u30af\u30ed\u3067\u3001\u4eca\u56de\u306f\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\u3053\u306e\u30de\u30af\u30ed\u306b\u985e\u4f3c\u3059\u308b\u30de\u30af\u30ed(\u307b\u307c\u540c\u3058\u6a5f\u80fd)\u306f\u591a\u6570\u5b58\u5728\u3057\u3001\n\u4f8b\u3048\u3070\u30c7\u30d0\u30a4\u30b9\u3092\u30b5\u30b9\u30da\u30f3\u30c9\u3055\u305b\u308b\u969b\u3001\u9806\u756a\u306b\u30c7\u30d0\u30a4\u30b9\u3092\u505c\u6b62\u3055\u305b\u308b\u305f\u3081\u306b\u985e\u4f3c\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nlocal_irq_disable()\n\ninclude/linux/irqflags.h\n#define local_irq_disable() \\\n    do { raw_local_irq_disable(); trace_hardirqs_off(); } while (0)\n\n\n\ninclude/linux/irqflags.h\n#define raw_local_irq_disable()     arch_local_irq_disable()\n\n\n\narch/arm/include/asm/irqflags.h\nstatic inline void arch_local_irq_disable(void)\n{\n    asm volatile(\n        \"   cpsid i         @ arch_local_irq_disable\"\n        :\n        :\n        : \"memory\", \"cc\");\n}\n\n\nlocal_irq_disable()\u306f\u3001CPU(\u30b3\u30a2)\u30ec\u30d9\u30eb\u3067\u5272\u308a\u8fbc\u307f\u3092\u7981\u6b62\u3057\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u306f\u3001arch_local_irq_disable()\u5185\u306e\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u3067CPU\u5272\u308a\u8fbc\u307f\u3092\u7981\u6b62\u3057\u3001\nraw_local_irq_disable()\u3067CPU\u6bce\u306e\u5dee\u7570\u3092\u5438\u53ce\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001disable_irq()\u306e\u5834\u5408\u306f\u3001\u6307\u5b9a\u3057\u305fIRQ(Interrupt ReQuest)\u306b\u5bfe\u5fdc\u3059\u308b\u5272\u308a\u8fbc\u307f\u3092\u7981\u6b62\u3057\u307e\u3059\u3002\n\u307e\u305f\u4f59\u8ac7\u3067\u3059\u304c\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u306fC\u8a00\u8a9e\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u51e6\u7406\u5185\u5bb9\u3092\u8003\u616e\u305b\u305a\u306b\u6700\u9069\u5316\u3092\u884c\u3046\u305f\u3081\u3001\n\u30d0\u30a4\u30ca\u30ea\u6bb5\u968e\u3067\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3068\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u52dd\u624b\u306b\u30ec\u30b8\u30b9\u30bf\u306e\u5185\u5bb9\u3092\u7834\u58ca\u3057\u307e\u3059\u3002\n\u305d\u306e\u969b\u306b\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u306e\u9006\u30a2\u30bb\u30f3\u30d6\u30eb\u306b\u3088\u3063\u3066\u3001\u6700\u9069\u5316\u5f8c\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u308a\u3001\n\u30ad\u30c1\u30f3\u3068\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u306a\u3089\u3067\u306f\u306e\u304a\u4f5c\u6cd5\u306b\u5247\u3063\u3066\u3001\u51e6\u7406\u3092\u66f8\u304d\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3055\u3089\u306b\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u306f\u3001\u30a2\u30bb\u30f3\u30d6\u30e9\u547d\u4ee4\u30bb\u30c3\u30c8\u306e\u4ed5\u69d8\u66f8\u306b\u5236\u7d04\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u4e8b\u3082\u3042\u308a\u307e\u3059\u3002\n\nboot_cpu_init\n\ninit/main.c\nstatic void __init boot_cpu_init(void)\n{\n    int cpu = smp_processor_id();\n    /* Mark the boot cpu \"present\", \"online\" etc for SMP and UP case */\n    set_cpu_online(cpu, true);\n    set_cpu_active(cpu, true);\n    set_cpu_present(cpu, true);\n    set_cpu_possible(cpu, true);\n}\n\n\nboot_cpu_init()\u306f\u3001CPU\u30b3\u30a2\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u307e\u305a\u3001smp_processor_id()\u3067\u306f\u3001\u73fe\u5728\u52d5\u4f5c\u3057\u3066\u3044\u308bCPU ID\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u306eset_cpu_XXX\u3068\u3044\u3046\u4e00\u9023\u306e\u51e6\u7406\u306f\u3001online\u3001active\u3001present\u3001possible\u306b\u30d3\u30c3\u30c8\u3092\u7acb\u3066\u307e\u3059\u3002\n\u3000online\uff1aCPU\u30b3\u30a2\u304c\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u5bfe\u8c61\u304b\u3069\u3046\u304b\n\u3000active\uff1aCPU\u30b3\u30a2\u9593\u3067\u30d7\u30ed\u30bb\u30b9\u306e\u79fb\u52d5\u3067\u304d\u308b\u304b\u3069\u3046\u304b\n\u3000present\uff1a\u73fe\u5728\u3001CPU\u30b3\u30a2\u304c\u4f7f\u7528\u3067\u304d\u308b\u304b\u3069\u3046\u304b\n\u3000possible\uff1a\u30b7\u30b9\u30c6\u30e0\u30d6\u30fc\u30c8\u6642\u306bCPU\u30b3\u30a2\u304c\u4f7f\u7528\u3067\u304d\u308b\u304b\u3069\u3046\u304b\n\npage_address_init\n\nmm/highmem.c\n#define PA_HASH_ORDER   7\n\nstatic struct page_address_slot {\n    struct list_head lh;            /* List of page_address_maps */\n    spinlock_t lock;            /* Protect this bucket's list */\n} ____cacheline_aligned_in_smp page_address_htable[1<<PA_HASH_ORDER];\n\nvoid __init page_address_init(void)\n{\n    int i;\n\n    for (i = 0; i < ARRAY_SIZE(page_address_htable); i++) {\n        INIT_LIST_HEAD(&page_address_htable[i].lh);\n        spin_lock_init(&page_address_htable[i].lock);\n    }\n}\n\n\npage_address_htable\u69cb\u9020\u4f53\u306f\u3001\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305fHigh Memory\u306e\n\u30da\u30fc\u30b8\u30d5\u30ec\u30fc\u30e0\u3092\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3067\u7ba1\u7406\u3057\u307e\u3059\u3002\n\u3053\u306e\u30da\u30fc\u30b8\u30d5\u30ec\u30fc\u30e0\u81ea\u4f53\u306fpage_address_map\u69cb\u9020\u4f53\u3067\u7ba1\u7406\u3055\u308c\u3001\n\u3053\u306e\u69cb\u9020\u4f53\u304c\u30da\u30fc\u30b8\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u304a\u3088\u3073\u30da\u30fc\u30b8\u30a2\u30c9\u30ec\u30b9\u306b\u5272\u308a\u5f53\u3066\u305f\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\n\nmm/highmem.c\nstruct page_address_map {\n    struct page *page;\n    void *virtual;\n    struct list_head list;\n};\n\n\nfor\u6587\u306f\u3001page_address_htable\u306e\u914d\u5217\u6570\u304c\"1<<PA_HASH_ORDER\"\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\n1\u00d72\u306e7\u4e57=128\u56de\u306e\u30eb\u30fc\u30d7\u3092\u884c\u3044\u307e\u3059\u3002\nINIT_LIST_HEAD()\u3067\u306fpage_address_htable[i].lh\u306eprev/next\u3092\u81ea\u8eab\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u8a2d\u5b9a\u3057\u3001\nspin_lock_init()\u3067\u306f\u30b9\u30d4\u30f3\u30ed\u30c3\u30af\u304c\u4f7f\u7528\u51fa\u6765\u308b\u72b6\u614b\u306b\u3057\u307e\u3059\u3002\n\npr_notice\n\ninclude/linux/printk.h\n#define pr_fmt(fmt) fmt\n#define pr_notice(fmt, ...) \\\n    printk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)\n\n\n\u30ed\u30b0\u30ec\u30d9\u30eb\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3060\u3051\u3060\u304c\u3001\u3053\u306e\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3059\u308b\u610f\u56f3\u304c\u8aad\u307f\u5207\u308c\u306a\u3044\u3002\n\u4ee5\u4e0b\u306b\u30ed\u30b0\u30ec\u30d9\u30eb\u3092\u793a\u3057\u307e\u3059\u3002\n\u3000KERN_EMERG\uff1a\u30b7\u30b9\u30c6\u30e0\u304c\u30c0\u30a6\u30f3\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u72b6\u614b\n\u3000KERN_ALERT\uff1a\u65e9\u6025\u306b\u5bfe\u5fdc\u304c\u5fc5\u8981\u306a\u72b6\u614b\n\u3000KERN_CRIT\uff1a\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u6df1\u523b\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u72b6\u614b\n\u3000KERN_ERR\uff1a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u72b6\u614b\u3002 \n\u3000KERN_WARNING\uff1a\u8b66\u544a\n\u3000KERN_NOTICE\uff1aINFO\u3088\u308a\u3082\u91cd\u8981\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\n\u3000KERN_INFO\uff1a\u30ed\u30b0\u7528\u30e1\u30c3\u30bb\u30fc\u30b8\n\u3000KERN_DEBUG\uff1a\u30c7\u30d0\u30c3\u30b0\u7528\u30e1\u30c3\u30bb\u30fc\u30b8\n\u4eca\u56de\u306epr_notice(\"%s\", linux_banner);\u3067\u51fa\u529b\u3055\u308c\u308b\u5185\u5bb9\u306f\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\ninit/version.c\nconst char linux_banner[] =\n    \"Linux version \" UTS_RELEASE \" (\" LINUX_COMPILE_BY \"@\"\n    LINUX_COMPILE_HOST \") (\" LINUX_COMPILER \") \" UTS_VERSION \"\\n\";\n\n\n\n\u6b21\u56de\nstart_kernel\u5185\u306esetup_arch()\u3092\u8aad\u307f\u89e3\u304d\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\nDocker \u3068 LXC\nCPU masks\n##\u524d\u56de\n[start_kernel\u5185\u3067\u30b9\u30bf\u30c3\u30af\u306b\u30ab\u30ca\u30ea\u30a2\u30b3\u30fc\u30c9\u3092\u5c0e\u5165\u3059\u308b\u307e\u3067](http://qiita.com/Mogura1215/items/f2ce8ebbc13bd06c9bb7)\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3001\u30da\u30fc\u30b8\u30a2\u30c9\u30ec\u30b9\u306e\u521d\u671f\u5316\u307e\u3067\u8aad\u307f\u89e3\u304d\u307e\u3059\u3002\n\n##\u4eca\u56de\u306e\u5bfe\u8c61\u7bc4\u56f2\n```init/main.c\nasmlinkage __visible void __init start_kernel(void)\n{\n    (\u7701\u7565)\n\n    cgroup_init_early();  //\u5bfe\u8c61\u7bc4\u56f2\u3000\u3053\u3053\u304b\u3089\n\n    local_irq_disable();\n    early_boot_irqs_disabled = true;\n\n/*\n * Interrupts are still disabled. Do necessary setups, then\n * enable them\n */\n    boot_cpu_init();\n    page_address_init();\n    pr_notice(\"%s\", linux_banner);  //\u5bfe\u8c61\u7bc4\u56f2\u3000\u3053\u3053\u307e\u3067\n    setup_arch(&command_line);      //\u5927\u7269\u3060\u3063\u305f\u306e\u3067\u3001\u6b21\u56de\u306b\u8aac\u660e\n```\n\n##cgroup_init_early\n\u307e\u305a\u3001cgroups(control groups)\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\ncgroups\u306f\u30d7\u30ed\u30bb\u30b9\u3092\u7279\u5b9a\u306e\u57fa\u6e96\u306b\u3088\u3063\u3066\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3066\u3001\n\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306e\u30ea\u30bd\u30fc\u30b9\u4f7f\u7528\u91cf(CPU\u30b3\u30a2\u3001\u30e1\u30e2\u30ea\u3001IO\u306a\u3069\u306e\u4f7f\u7528\u91cf)\u3092\u5236\u9650\u30fb\u76e3\u8996\u3067\u304d\u308b\u6a5f\u80fd\u3067\u3059\u3002\n[LXC(Linux Container)\u3084Docker](http://qiita.com/Surgo/items/709a07d68c6eafbad267)\u306a\u3069\u306eOS\u30ec\u30d9\u30eb\u306e\u4eee\u60f3\u5316\u3067\u4f7f\u7528\u3055\u308c\u308b\u6280\u8853\u3067\u3042\u308a\u3001\n\u30a4\u30f3\u30d5\u30e9\u7cfb(\u30b5\u30fc\u30d0\u7ba1\u7406\u8005)\u306b\u3068\u3063\u3066\u99b4\u67d3\u307f\u306e\u3042\u308b\u6280\u8853\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\u4f59\u8ac7\u3067\u3059\u304c\u3001Docker\u306f\u66f8\u7c4d\u304c\u8c4a\u5bcc\u3067\u5b66\u7fd2\u3057\u3084\u3059\u3044\u74b0\u5883\u306a\u306e\u306b\u3001\nLXC\u306fRaspberry Pi\u3067\u8a66\u305d\u3046\u3068\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d5\u30a3\u30b0\u3092\u5909\u66f4\u3057\u3066image\u3092\u518d\u4f5c\u6210\u304c\u5fc5\u8981\u2026\u2026\u3053\u306e\u5dee\u306f\u4e00\u4f53\u3002\n\n\u4ee5\u4e0b\u304ccgroup_init_early()\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\n```kernel/cgroup.c\nint __init cgroup_init_early(void)\n{\n\tstatic struct cgroup_sb_opts __initdata opts;\n\tstruct cgroup_subsys *ss;\n\tint i;\n\n\tinit_cgroup_root(&cgrp_dfl_root, &opts);\n\tcgrp_dfl_root.cgrp.self.flags |= CSS_NO_REF;\n\n\tRCU_INIT_POINTER(init_task.cgroups, &init_css_set);\n\n\tfor_each_subsys(ss, i) {\n\t\tWARN(!ss->css_alloc || !ss->css_free || ss->name || ss->id,\n\t\t     \"invalid cgroup_subsys %d:%s css_alloc=%p css_free=%p name:id=%d:%s\\n\",\n\t\t     i, cgroup_subsys_name[i], ss->css_alloc, ss->css_free,\n\t\t     ss->id, ss->name);\n\t\tWARN(strlen(cgroup_subsys_name[i]) > MAX_CGROUP_TYPE_NAMELEN,\n\t\t     \"cgroup_subsys_name %s too long\\n\", cgroup_subsys_name[i]);\n\n\t\tss->id = i;\n\t\tss->name = cgroup_subsys_name[i];\n\n\t\tif (ss->early_init)\n\t\t\tcgroup_init_subsys(ss, true);\n\t}\n\treturn 0;\n}\n```\n\n`cgroup_sb_opts`\u306fcgroup\u306e\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53\u3001\n`cgroup_subsys`\u306f\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0ID\u3068[\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570](http://d.hatena.ne.jp/iww/20111026/1319630656)\u3092\u7ba1\u7406\u3059\u308b\u69cb\u9020\u4f53\u3067\u3059\u3002\n\u4e0d\u601d\u8b70\u3067\u3059\u304c\u3001\u524d\u8005\u306fstatic\u3067\u9759\u7684\u5909\u6570\u3068\u3057\u3066\u5ba3\u8a00\u3057\u3066\u3044\u308b\u306e\u306b\u3001\n__initdata\u3067\u300c\u521d\u671f\u5316\u5f8c\u306b\u30e1\u30e2\u30ea\u304b\u3089\u30c7\u30fc\u30bf\u3092\u6d88\u53bb\u3059\u308b\u300d\u3068\u3082\u5ba3\u8a00\u3057\u3066\u3044\u308b\u3002\u6b8b\u3057\u305f\u3044\u306e\u304b\u6d88\u3057\u305f\u3044\u306e\u304b\u3002\n\n\u95a2\u6570`init_cgroup_root()`\u3067\u306f\u3001cgroup\u306eroot(\u6839\u3001\u89aa)\u3092\u8a2d\u5b9a\u3057\u3001\ncgroup_root\u69cb\u9020\u4f53\u304c\u6301\u3064\u30ea\u30b9\u30c8\u306e\u521d\u671f\u5316\u3084root\u304c\u6301\u3064\u60c5\u5831\u3092cgroup_sb_opts\u306b\u30b3\u30d4\u30fc\u3059\u308b\u4f5c\u696d\u3092\u884c\u3044\u307e\u3059\u3002\nfor_each_subsys\u4ee5\u4e0b\u3067\u306f\u3001cgroup_subsys\u69cb\u9020\u4f53\u306b\u5bfe\u3057\u3066\u3001\nid\u767b\u9332\u3001\u540d\u524d\u767b\u9332\u3092\u884c\u3044\u3001\u51e6\u7406\u304c\u5b58\u5728\u3059\u308c\u3070\u65e9\u671f\u306e\u521d\u671f\u5316\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\nfor_each_XXXX\u306ffor\u6587\u306b\u4f3c\u305f\u30de\u30af\u30ed\u3067\u3001\u4eca\u56de\u306f\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u306e\u6570\u3060\u3051\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002\n\u3053\u306e\u30de\u30af\u30ed\u306b\u985e\u4f3c\u3059\u308b\u30de\u30af\u30ed(\u307b\u307c\u540c\u3058\u6a5f\u80fd)\u306f\u591a\u6570\u5b58\u5728\u3057\u3001\n\u4f8b\u3048\u3070\u30c7\u30d0\u30a4\u30b9\u3092[\u30b5\u30b9\u30da\u30f3\u30c9](http://e-words.jp/w/%E3%82%B5%E3%82%B9%E3%83%9A%E3%83%B3%E3%83%89.html)\u3055\u305b\u308b\u969b\u3001\u9806\u756a\u306b\u30c7\u30d0\u30a4\u30b9\u3092\u505c\u6b62\u3055\u305b\u308b\u305f\u3081\u306b\u985e\u4f3c\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n##local_irq_disable()\n```include/linux/irqflags.h\n#define local_irq_disable() \\\n\tdo { raw_local_irq_disable(); trace_hardirqs_off(); } while (0)\n```\n```include/linux/irqflags.h\n#define raw_local_irq_disable()\t\tarch_local_irq_disable()\n```\n```arch/arm/include/asm/irqflags.h\nstatic inline void arch_local_irq_disable(void)\n{\n\tasm volatile(\n\t\t\"\tcpsid i\t\t\t@ arch_local_irq_disable\"\n\t\t:\n\t\t:\n\t\t: \"memory\", \"cc\");\n}\n```\nlocal_irq_disable()\u306f\u3001CPU(\u30b3\u30a2)\u30ec\u30d9\u30eb\u3067\u5272\u308a\u8fbc\u307f\u3092\u7981\u6b62\u3057\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u306f\u3001arch_local_irq_disable()\u5185\u306e[\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9](https://codezine.jp/article/detail/393)\u3067CPU\u5272\u308a\u8fbc\u307f\u3092\u7981\u6b62\u3057\u3001\nraw_local_irq_disable()\u3067CPU\u6bce\u306e\u5dee\u7570\u3092\u5438\u53ce\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001disable_irq()\u306e\u5834\u5408\u306f\u3001\u6307\u5b9a\u3057\u305f[IRQ(Interrupt ReQuest)](http://e-words.jp/w/IRQ.html)\u306b\u5bfe\u5fdc\u3059\u308b\u5272\u308a\u8fbc\u307f\u3092\u7981\u6b62\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u4f59\u8ac7\u3067\u3059\u304c\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u306fC\u8a00\u8a9e\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u51e6\u7406\u5185\u5bb9\u3092\u8003\u616e\u305b\u305a\u306b\u6700\u9069\u5316\u3092\u884c\u3046\u305f\u3081\u3001\n\u30d0\u30a4\u30ca\u30ea\u6bb5\u968e\u3067\u8a18\u8ff0\u3057\u305f\u30b3\u30fc\u30c9\u3068\u5909\u308f\u3063\u3066\u3057\u307e\u3046\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u52dd\u624b\u306b\u30ec\u30b8\u30b9\u30bf\u306e\u5185\u5bb9\u3092\u7834\u58ca\u3057\u307e\u3059\u3002\n\u305d\u306e\u969b\u306b\u306f\u3001\u30d0\u30a4\u30ca\u30ea\u306e\u9006\u30a2\u30bb\u30f3\u30d6\u30eb\u306b\u3088\u3063\u3066\u3001\u6700\u9069\u5316\u5f8c\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3060\u308a\u3001\n\u30ad\u30c1\u30f3\u3068\u30a4\u30f3\u30e9\u30a4\u30f3\u30a2\u30bb\u30f3\u30d6\u30e9\u306a\u3089\u3067\u306f\u306e\u304a\u4f5c\u6cd5\u306b\u5247\u3063\u3066\u3001\u51e6\u7406\u3092\u66f8\u304d\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3055\u3089\u306b\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001\u30a4\u30f3\u30e9\u30a4\u30f3\u306f\u3001\u30a2\u30bb\u30f3\u30d6\u30e9\u547d\u4ee4\u30bb\u30c3\u30c8\u306e\u4ed5\u69d8\u66f8\u306b\u5236\u7d04\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u4e8b\u3082\u3042\u308a\u307e\u3059\u3002\n\n##boot_cpu_init\n```init/main.c\nstatic void __init boot_cpu_init(void)\n{\n\tint cpu = smp_processor_id();\n\t/* Mark the boot cpu \"present\", \"online\" etc for SMP and UP case */\n\tset_cpu_online(cpu, true);\n\tset_cpu_active(cpu, true);\n\tset_cpu_present(cpu, true);\n\tset_cpu_possible(cpu, true);\n}\n```\nboot_cpu_init()\u306f\u3001CPU\u30b3\u30a2\u306b\u95a2\u3059\u308b\u60c5\u5831\u3092\u767b\u9332\u3057\u307e\u3059\u3002\n\u307e\u305a\u3001smp_processor_id()\u3067\u306f\u3001\u73fe\u5728\u52d5\u4f5c\u3057\u3066\u3044\u308bCPU ID\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u305d\u306e\u5f8c\u306eset_cpu_XXX\u3068\u3044\u3046\u4e00\u9023\u306e\u51e6\u7406\u306f\u3001online\u3001active\u3001present\u3001possible\u306b\u30d3\u30c3\u30c8\u3092\u7acb\u3066\u307e\u3059\u3002\n\u3000online\uff1aCPU\u30b3\u30a2\u304c\u30b9\u30b1\u30b8\u30e5\u30fc\u30ea\u30f3\u30b0\u5bfe\u8c61\u304b\u3069\u3046\u304b\n\u3000active\uff1aCPU\u30b3\u30a2\u9593\u3067\u30d7\u30ed\u30bb\u30b9\u306e\u79fb\u52d5\u3067\u304d\u308b\u304b\u3069\u3046\u304b\n\u3000present\uff1a\u73fe\u5728\u3001CPU\u30b3\u30a2\u304c\u4f7f\u7528\u3067\u304d\u308b\u304b\u3069\u3046\u304b\n\u3000possible\uff1a\u30b7\u30b9\u30c6\u30e0\u30d6\u30fc\u30c8\u6642\u306bCPU\u30b3\u30a2\u304c\u4f7f\u7528\u3067\u304d\u308b\u304b\u3069\u3046\u304b\n\n##page_address_init\n```mm/highmem.c\n#define PA_HASH_ORDER\t7\n\nstatic struct page_address_slot {\n\tstruct list_head lh;\t\t\t/* List of page_address_maps */\n\tspinlock_t lock;\t\t\t/* Protect this bucket's list */\n} ____cacheline_aligned_in_smp page_address_htable[1<<PA_HASH_ORDER];\n\nvoid __init page_address_init(void)\n{\n\tint i;\n\n\tfor (i = 0; i < ARRAY_SIZE(page_address_htable); i++) {\n\t\tINIT_LIST_HEAD(&page_address_htable[i].lh);\n\t\tspin_lock_init(&page_address_htable[i].lock);\n\t}\n}\n```\n\npage_address_htable\u69cb\u9020\u4f53\u306f\u3001\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f[High Memory](http://seijinoblog.blogspot.jp/2012/03/linux_29.html)\u306e\n\u30da\u30fc\u30b8\u30d5\u30ec\u30fc\u30e0\u3092\u30cf\u30c3\u30b7\u30e5\u30c6\u30fc\u30d6\u30eb\u3067\u7ba1\u7406\u3057\u307e\u3059\u3002\n\u3053\u306e\u30da\u30fc\u30b8\u30d5\u30ec\u30fc\u30e0\u81ea\u4f53\u306fpage_address_map\u69cb\u9020\u4f53\u3067\u7ba1\u7406\u3055\u308c\u3001\n\u3053\u306e\u69cb\u9020\u4f53\u304c\u30da\u30fc\u30b8\u30c7\u30a3\u30b9\u30af\u30ea\u30d7\u30bf\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u304a\u3088\u3073\u30da\u30fc\u30b8\u30a2\u30c9\u30ec\u30b9\u306b\u5272\u308a\u5f53\u3066\u305f\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\n\n```mm/highmem.c\nstruct page_address_map {\n\tstruct page *page;\n\tvoid *virtual;\n\tstruct list_head list;\n};\n```\n\nfor\u6587\u306f\u3001page_address_htable\u306e\u914d\u5217\u6570\u304c\"1<<PA_HASH_ORDER\"\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\n1\u00d72\u306e7\u4e57=128\u56de\u306e\u30eb\u30fc\u30d7\u3092\u884c\u3044\u307e\u3059\u3002\nINIT_LIST_HEAD()\u3067\u306fpage_address_htable[i].lh\u306eprev/next\u3092\u81ea\u8eab\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u8a2d\u5b9a\u3057\u3001\nspin_lock_init()\u3067\u306f[\u30b9\u30d4\u30f3\u30ed\u30c3\u30af](http://itpro.nikkeibp.co.jp/article/Keyword/20070207/261219/?rt=nocnt)\u304c\u4f7f\u7528\u51fa\u6765\u308b\u72b6\u614b\u306b\u3057\u307e\u3059\u3002\n\n##pr_notice\n```include/linux/printk.h\n#define pr_fmt(fmt) fmt\n#define pr_notice(fmt, ...) \\\n\tprintk(KERN_NOTICE pr_fmt(fmt), ##__VA_ARGS__)\n```\n\n\u30ed\u30b0\u30ec\u30d9\u30eb\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u3060\u3051\u3060\u304c\u3001\u3053\u306e\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3059\u308b\u610f\u56f3\u304c\u8aad\u307f\u5207\u308c\u306a\u3044\u3002\n\u4ee5\u4e0b\u306b\u30ed\u30b0\u30ec\u30d9\u30eb\u3092\u793a\u3057\u307e\u3059\u3002\n\u3000KERN_EMERG\uff1a\u30b7\u30b9\u30c6\u30e0\u304c\u30c0\u30a6\u30f3\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u72b6\u614b\n\u3000KERN_ALERT\uff1a\u65e9\u6025\u306b\u5bfe\u5fdc\u304c\u5fc5\u8981\u306a\u72b6\u614b\n\u3000KERN_CRIT\uff1a\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u6df1\u523b\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u72b6\u614b\n\u3000KERN_ERR\uff1a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u72b6\u614b\u3002 \n\u3000KERN_WARNING\uff1a\u8b66\u544a\n\u3000KERN_NOTICE\uff1aINFO\u3088\u308a\u3082\u91cd\u8981\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\n\u3000KERN_INFO\uff1a\u30ed\u30b0\u7528\u30e1\u30c3\u30bb\u30fc\u30b8\n\u3000KERN_DEBUG\uff1a\u30c7\u30d0\u30c3\u30b0\u7528\u30e1\u30c3\u30bb\u30fc\u30b8\n\n\u4eca\u56de\u306e`pr_notice(\"%s\", linux_banner);`\u3067\u51fa\u529b\u3055\u308c\u308b\u5185\u5bb9\u306f\u3001\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```init/version.c\nconst char linux_banner[] =\n\t\"Linux version \" UTS_RELEASE \" (\" LINUX_COMPILE_BY \"@\"\n\tLINUX_COMPILE_HOST \") (\" LINUX_COMPILER \") \" UTS_VERSION \"\\n\";\n```\n\n##\u6b21\u56de\n[start_kernel\u5185\u306esetup_arch()](http://qiita.com/Mogura1215/items/e5571f3019a16aea358c)\u3092\u8aad\u307f\u89e3\u304d\u307e\u3057\u305f\u3002\n\n##\u53c2\u8003\n[Docker \u3068 LXC](http://qiita.com/Surgo/items/709a07d68c6eafbad267)\n[CPU masks](https://0xax.gitbooks.io/linux-insides/content/Concepts/cpumask.html)\n"}