{"tags": ["hadoop"], "context": " More than 1 year has passed since last update.Hadoop 2.7.3/2.8.0 (\u3069\u3061\u3089\u3082\u307e\u3060\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u306a\u3044) \u4ee5\u964d\u3067\u306f\u3001mapreduce.fileoutputcommitter.algorithm.version\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001OutputCommitter\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5909\u66f4\u3067\u304d\u308b\u3002\u8a2d\u5b9a\u53ef\u80fd\u306a\u5024\u306f1(Hadoop 2\u7cfb\u306e\u30c7\u30d5\u30a9\u30eb\u30c8)\u3068\u30012(Hadoop 3\u7cfb\u306e\u30c7\u30d5\u30a9\u30eb\u30c8)\u306e\u307f\u3002\u4ee5\u4e0b\u3067\u3001\u8a73\u7d30\u306b\u3064\u3044\u3066\u89e3\u8aac\u3059\u308b\u3002\n\n\u65b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u89e3\u8aac\n\nFileOutputCommitter#isCommitJobRepeatable\n  @Override\n  public boolean isCommitJobRepeatable(JobContext context) throws IOException {\n    return algorithmVersion == 2;\n  }\n\n\n2\u3060\u3068\u3001commitJob\u304crepeatable\u3067\u3042\u308b\u3002\u306a\u3093\u3058\u3083\u305d\u308a\u3083\u3002\u672c\u6a5f\u80fd\u304c\u5c0e\u5165\u3055\u308c\u305f\u30c1\u30b1\u30c3\u30c8(MAPREDUCE-5485)\u3092\u8aad\u3082\u3046\u3002\n\nThere are chances MRAppMaster crush during job committing, or NodeManager restart cause the committing AM exit due to container expire. In these cases, the job will fail. However, some jobs can redo commit so failing the job becomes unnecessary. Let clients tell AM to allow redo commit or not is a better choice.\n\n\u3046\u30fc\u3093\u3002\u305d\u3082\u305d\u3082commitJob\u3063\u3066\u4f55\u3060\u308d\u3046\u3002\n\nFileOutputCommitter#commitJob\n  /**\n   * The job has completed, so do works in commitJobInternal().\n   * Could retry on failure if using algorithm 2.\n   * @param context the job's context\n   */\n  public void commitJob(JobContext context) throws IOException {\n\n\n\nFileOutputCommitter#commitJobInternal\n  /**\n   * The job has completed, so do following commit job, include:\n   * Move all committed tasks to the final output dir (algorithm 1 only).\n   * Delete the temporary directory, including all of the work directories.\n   * Create a _SUCCESS file to make it as successful.\n   * @param context the job's context\n   */\n  @VisibleForTesting\n  protected void commitJobInternal(JobContext context) throws IOException {\n\n\nMapReduce\u30b8\u30e7\u30d6\u3067\u306f\u3001\u30bf\u30b9\u30af\u306e\u51fa\u529b\u7d50\u679c\u3092\u4e00\u6642\u9818\u57df\u306b\u66f8\u304d\u8fbc\u307f\u3001\u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3059\u308b\u3068\u3001commitJobInternal\u3092\u5b9f\u884c\u3057\u3066\u3001\u6700\u7d42\u7684\u306a\u51fa\u529b\u5148\u306b\u79fb\u52d5\u3059\u308b\u3002\n\u3053\u3053\u307e\u3067\u8aad\u3093\u3067\u304a\u308f\u304b\u308a\u3044\u305f\u3060\u3051\u305f\u3060\u308d\u3046\u304b\u3002\u3064\u307e\u308a\u3001commitJob\u306e\u9014\u4e2d\u3067MRAppMaster\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u305f\u5834\u5408\u3001MapReduce\u30b8\u30e7\u30d6\u81ea\u4f53\u3092\u6700\u521d\u304b\u3089\u3084\u308a\u76f4\u3059\u306e\u3067\u306f\u306a\u304f\u3001commitJob\u306e\u51e6\u7406\u3060\u3051\u30ea\u30c8\u30e9\u30a4\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3001\u305d\u308c\u3092\u53ef\u80fd\u306b\u3057\u3088\u3046\u3068\u3044\u3046\u306e\u304cOutputCommitter\u306e\u65b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6982\u8981\u3067\u3042\u308b\u3002\n\nFileOutputCommitter#commitJob\n  public void commitJob(JobContext context) throws IOException {\n    int maxAttemptsOnFailure = isCommitJobRepeatable(context) ?\n        context.getConfiguration().getInt(FILEOUTPUTCOMMITTER_FAILURE_ATTEMPTS,\n            FILEOUTPUTCOMMITTER_FAILURE_ATTEMPTS_DEFAULT) : 1;\n    int attempt = 0;\n    boolean jobCommitNotFinished = true;\n    while (jobCommitNotFinished) {\n      try {\n        commitJobInternal(context);\n        jobCommitNotFinished = false;\n      } catch (Exception e) {\n        if (++attempt >= maxAttemptsOnFailure) {\n          throw e;\n        } else {\n          LOG.warn(\"Exception get thrown in job commit, retry (\" + attempt +\n              \") time.\", e);\n        }\n      }\n    }\n  }\n\n\n\u65b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63a1\u7528\u3059\u308b\u3068\u3001maxAttemptsOnFailure\u306b\u3001\u30d7\u30ed\u30d1\u30c6\u30a3mapreduce.fileoutputcommitter.failures.attempts\u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u5165\u308b\u3002\u3053\u3053\u306b2\u4ee5\u4e0a\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001commitJobInternal\u30e1\u30bd\u30c3\u30c9\u304c\u5931\u6557\u3057\u3066\u3082\u3001\u30ea\u30c8\u30e9\u30a4\u3055\u308c\u308b\u3002\n\u3082\u3063\u3068\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u4eba\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002FileOutputCommitter.java\n\nHadoop 2.7.3/2.8.0 (\u3069\u3061\u3089\u3082\u307e\u3060\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u3066\u3044\u306a\u3044) \u4ee5\u964d\u3067\u306f\u3001mapreduce.fileoutputcommitter.algorithm.version\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001OutputCommitter\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u5909\u66f4\u3067\u304d\u308b\u3002\u8a2d\u5b9a\u53ef\u80fd\u306a\u5024\u306f1(Hadoop 2\u7cfb\u306e\u30c7\u30d5\u30a9\u30eb\u30c8)\u3068\u30012(Hadoop 3\u7cfb\u306e\u30c7\u30d5\u30a9\u30eb\u30c8)\u306e\u307f\u3002\u4ee5\u4e0b\u3067\u3001\u8a73\u7d30\u306b\u3064\u3044\u3066\u89e3\u8aac\u3059\u308b\u3002\n\n## \u65b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u89e3\u8aac\n\n```java:FileOutputCommitter#isCommitJobRepeatable\n  @Override\n  public boolean isCommitJobRepeatable(JobContext context) throws IOException {\n    return algorithmVersion == 2;\n  }\n```\n\n2\u3060\u3068\u3001commitJob\u304crepeatable\u3067\u3042\u308b\u3002\u306a\u3093\u3058\u3083\u305d\u308a\u3083\u3002\u672c\u6a5f\u80fd\u304c\u5c0e\u5165\u3055\u308c\u305f\u30c1\u30b1\u30c3\u30c8([MAPREDUCE-5485](https://issues.apache.org/jira/browse/MAPREDUCE-5485))\u3092\u8aad\u3082\u3046\u3002\n\n> There are chances MRAppMaster crush during job committing, or NodeManager restart cause the committing AM exit due to container expire. In these cases, the job will fail. However, some jobs can redo commit so failing the job becomes unnecessary. Let clients tell AM to allow redo commit or not is a better choice.\n\n\u3046\u30fc\u3093\u3002\u305d\u3082\u305d\u3082commitJob\u3063\u3066\u4f55\u3060\u308d\u3046\u3002\n\n```java:FileOutputCommitter#commitJob\n  /**\n   * The job has completed, so do works in commitJobInternal().\n   * Could retry on failure if using algorithm 2.\n   * @param context the job's context\n   */\n  public void commitJob(JobContext context) throws IOException {\n```\n```java:FileOutputCommitter#commitJobInternal\n  /**\n   * The job has completed, so do following commit job, include:\n   * Move all committed tasks to the final output dir (algorithm 1 only).\n   * Delete the temporary directory, including all of the work directories.\n   * Create a _SUCCESS file to make it as successful.\n   * @param context the job's context\n   */\n  @VisibleForTesting\n  protected void commitJobInternal(JobContext context) throws IOException {\n```\n\nMapReduce\u30b8\u30e7\u30d6\u3067\u306f\u3001\u30bf\u30b9\u30af\u306e\u51fa\u529b\u7d50\u679c\u3092\u4e00\u6642\u9818\u57df\u306b\u66f8\u304d\u8fbc\u307f\u3001\u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3059\u308b\u3068\u3001`commitJobInternal`\u3092\u5b9f\u884c\u3057\u3066\u3001\u6700\u7d42\u7684\u306a\u51fa\u529b\u5148\u306b\u79fb\u52d5\u3059\u308b\u3002\n\n\u3053\u3053\u307e\u3067\u8aad\u3093\u3067\u304a\u308f\u304b\u308a\u3044\u305f\u3060\u3051\u305f\u3060\u308d\u3046\u304b\u3002\u3064\u307e\u308a\u3001commitJob\u306e\u9014\u4e2d\u3067MRAppMaster\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u305f\u5834\u5408\u3001MapReduce\u30b8\u30e7\u30d6\u81ea\u4f53\u3092\u6700\u521d\u304b\u3089\u3084\u308a\u76f4\u3059\u306e\u3067\u306f\u306a\u304f\u3001commitJob\u306e\u51e6\u7406\u3060\u3051\u30ea\u30c8\u30e9\u30a4\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3001\u305d\u308c\u3092\u53ef\u80fd\u306b\u3057\u3088\u3046\u3068\u3044\u3046\u306e\u304cOutputCommitter\u306e\u65b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u6982\u8981\u3067\u3042\u308b\u3002\n\n```java:FileOutputCommitter#commitJob\n  public void commitJob(JobContext context) throws IOException {\n    int maxAttemptsOnFailure = isCommitJobRepeatable(context) ?\n        context.getConfiguration().getInt(FILEOUTPUTCOMMITTER_FAILURE_ATTEMPTS,\n            FILEOUTPUTCOMMITTER_FAILURE_ATTEMPTS_DEFAULT) : 1;\n    int attempt = 0;\n    boolean jobCommitNotFinished = true;\n    while (jobCommitNotFinished) {\n      try {\n        commitJobInternal(context);\n        jobCommitNotFinished = false;\n      } catch (Exception e) {\n        if (++attempt >= maxAttemptsOnFailure) {\n          throw e;\n        } else {\n          LOG.warn(\"Exception get thrown in job commit, retry (\" + attempt +\n              \") time.\", e);\n        }\n      }\n    }\n  }\n```\n\n\u65b0\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u63a1\u7528\u3059\u308b\u3068\u3001`maxAttemptsOnFailure`\u306b\u3001\u30d7\u30ed\u30d1\u30c6\u30a3`mapreduce.fileoutputcommitter.failures.attempts`\u3067\u6307\u5b9a\u3057\u305f\u5024\u304c\u5165\u308b\u3002\u3053\u3053\u306b2\u4ee5\u4e0a\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001`commitJobInternal`\u30e1\u30bd\u30c3\u30c9\u304c\u5931\u6557\u3057\u3066\u3082\u3001\u30ea\u30c8\u30e9\u30a4\u3055\u308c\u308b\u3002\n\n\u3082\u3063\u3068\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u4eba\u306f\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002[FileOutputCommitter.java](https://github.com/apache/hadoop/blob/6502d59e73cd6f3f3a358fce58d398ca38a61fba/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/output/FileOutputCommitter.java)\n"}