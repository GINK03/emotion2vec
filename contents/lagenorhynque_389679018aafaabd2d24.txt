{"context": "\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0(polymorphism; \u591a\u614b, \u591a\u76f8)\u300d\u3068\u3044\u3046\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3051\u308b\u7d99\u627f(\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u7d99\u627f)\u306b\u3088\u308b\u5b9f\u73fe\u624b\u6cd5\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u3002\n\u3057\u304b\u3057\u3001\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u624b\u6cd5\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u7684\u306a\u578b\u968e\u5c64\u306b\u3088\u308b\u3082\u306e\u306b\u9650\u3089\u305a\u69d8\u3005\u306a\u3082\u306e\u304c\u3042\u308b\u3002\n\u3053\u3053\u3067\u306f\u3001Expression Problem\u306b\u5bfe\u3059\u308b\u89e3\u6c7a\u7b56\u3068\u3057\u3066\u6319\u3052\u3089\u308c\u308b\u3001\u7d99\u627f\u306b\u3088\u3089\u306a\u3044\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u306e\u4ee3\u8868\u7684\u306a\u5b9f\u73fe\u624b\u6cd5\u3068\u3057\u3066\u3001\n\n\n\u578b\u30af\u30e9\u30b9(type class)\n\n\u30d7\u30ed\u30c8\u30b3\u30eb(protocol)\n\n\u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9(multimethod)\n\n\u306b\u3088\u308b\u5b9f\u88c5\u3092\u8907\u6570\u8a00\u8a9e\u3067\u8a66\u3057\u3066\u307f\u305f\u3002\n\u3044\u305a\u308c\u306e\u65b9\u6cd5\u3082\u660e\u793a\u7684\u306a\u7d99\u627f\u95a2\u4fc2\u3092\u5fc5\u8981\u3068\u305b\u305a\u3001\u62e1\u5f35\u306b\u5bfe\u3057\u3066\u958b\u3044\u3066\u3044\u308b\u305f\u3081\u3001\u65e2\u5b58\u306e\u578b(\u4f8b\u3048\u3070\u8a00\u8a9e\u7d44\u307f\u8fbc\u307f\u578b)\u306b\u5bfe\u3057\u3066\u3082\u5bb9\u6613\u306b\u62e1\u5f35\u53ef\u80fd\u306a\u3053\u3068\u304c\u7279\u5fb4\u7684\u3067\u3001\u3042\u308b\u7a2e\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u3044\u3064\u3067\u3082\u9069\u7528\u7bc4\u56f2\u3092\u62e1\u5927\u3067\u304d\u308b\u3002\n\n0. \u7d99\u627f(inheritance; cf. subtyping)\n\nJava\ncf. Lesson: Interfaces and Inheritance (The Java\u2122 Tutorials > Learning the Java Language)\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\npublic interface WhoAmI {\n  String identify();\n}\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n// \u30af\u30e9\u30b9\u5b9a\u7fa9\npublic class Complex implements WhoAmI {\n  private final double real;\n  private final double imag;\n  public Complex(double real, double imag) {\n    this.real = real;\n    this.imag = imag;\n  }\n  public double getReal() {\n    return real;\n  }\n  public double getImag() {\n    return imag;\n  }\n  @Override\n  public String toString() {  // pretty print\u7528\u306b\u8a2d\u5b9a\n    return String.format(\"Complex(%s, %s)\", real, imag);\n  }\n  // \u65b0\u305f\u306b\u5b9a\u7fa9\u3059\u308b\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n  @Override\n  public String identify() {\n    return String.format(\"\u79c1\u306fComplex\u306e%s\u3067\u3059\u3002\", this);\n  }\n}\n\n// \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\u3059\u308b\u306e\u306f\u76f4\u63a5\u7684\u306b\u306f\u3067\u304d\u306a\u3044(Expression Problem)\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\npublic class Who {\n  public static void ask(WhoAmI who) {\n    System.out.println(\"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" + who.identify());\n  }\n}\n\n> Who.ask(new Complex(42.0, 0.0))\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306eComplex(42.0, 0.0)\u3067\u3059\u3002\n\n\n1. \u578b\u30af\u30e9\u30b9(type class)\n\nHaskell\ncf. A Gentle Introduction to Haskell: Classes\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\nclass WhoAmI a where\n    identify :: a -> String\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n-- \u30c7\u30fc\u30bf\u578b\u5b9a\u7fa9\ndata Complex = Complex\n    { real :: !Double\n    , imag :: !Double\n    } deriving Show\ncomplex :: Complex  -- \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u8a2d\u5b9a\ncomplex = Complex { real = 0.0, imag = 0.0 }\n\n-- \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\ninstance WhoAmI Complex where\n    identify x = \"\u79c1\u306fComplex\u306e\" ++ show x ++ \"\u3067\u3059\u3002\"\n\n-- \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\ninstance WhoAmI Integer where\n    identify x = \"\u3042\u305f\u3057\u306fInteger\u306e\" ++ show x ++ \"\u3060\u3088\u301c\u3002\"\ninstance WhoAmI Double where\n    identify x = \"\u3046\u3061\u306fDouble\u306e\" ++ show x ++ \"\u3063!\"\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\nask :: WhoAmI a => a -> IO ()\nask who = putStrLn $ \"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" ++ identify who\n\n> ask complex { real = 42.0 }\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306eComplex {real = 42.0, imag = 0.0}\u3067\u3059\u3002\n> ask 42\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306fInteger\u306e42\u3060\u3088\u301c\u3002\n> ask 42.0\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306fDouble\u306e42.0\u3063!\n\n\nScala\ncf. Faq - What are Scala context bounds? - Scala Documentation\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\ntrait WhoAmI[A] {\n  def identify(x: A): String\n}\nobject WhoAmI {\n  def identify[A: WhoAmI](x: A): String = implicitly[WhoAmI[A]].identify(x)\n  // \u307e\u305f\u306f\u3001\u660e\u793a\u7684\u306bimplicit parameter\u3092\u5229\u7528\u3057\u3066\n  // def identify[A](x: A)(implicit who: WhoAmI[A]): String = who.identify(x)\n}\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n// \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u5b9a\u7fa9\ncase class Complex(real: Double = 0.0, imag: Double = 0.0)\n\n// \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\nimplicit val complexWhoAmI: WhoAmI[Complex] = new WhoAmI[Complex] {\n  def identify(x: Complex): String = s\"\u79c1\u306fComplex\u306e${x}\u3067\u3059\u3002\"\n}\n\n// \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\nimplicit val intWhoAmI: WhoAmI[Int] = new WhoAmI[Int] {\n  def identify(x: Int): String = s\"\u3042\u305f\u3057\u306fInt\u306e${x}\u3060\u3088\u301c\u3002\"\n}\nimplicit val doubleWhoAmI: WhoAmI[Double] = new WhoAmI[Double] {\n  def identify(x: Double): String = s\"\u3046\u3061\u306fDouble\u306e${x}\u3063!\"\n}\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\ndef ask[A: WhoAmI](who: A): Unit = println(\"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" + WhoAmI.identify(who))\n\n> ask(Complex(real = 42.0))\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306eComplex(42.0,0.0)\u3067\u3059\u3002\n> ask(42)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306fInt\u306e42\u3060\u3088\u301c\u3002\n> ask(42.0)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306fDouble\u306e42.0\u3063!\n\n\n2. \u30d7\u30ed\u30c8\u30b3\u30eb(protocol)\n\nClojure\ncf. Clojure - Protocols\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\n(defprotocol WhoAmI\n  (identify [x]))\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n;; \u30ec\u30b3\u30fc\u30c9\u5b9a\u7fa9\n(defrecord Complex [real imag])\n(defn complex [& {:keys [real imag]  ; \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u8a2d\u5b9a\n                  :or {real 0.0, imag 0.0}}]\n  (->Complex real imag))\n\n;; \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(extend-protocol WhoAmI\n  Complex\n  (identify [x] (format \"\u79c1\u306fComplex\u306e%s\u3067\u3059\u3002\" (pr-str x))))\n\n;; \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(extend-protocol WhoAmI\n  Long\n  (identify [x] (format \"\u3042\u305f\u3057\u306fLong\u306e%s\u3060\u3088\u301c\u3002\" x))\n  Double\n  (identify [x] (format \"\u3046\u3061\u306fDouble\u306e%s\u3063!\" x)))\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n(defn ask [who]\n  (println (str \"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" (identify who))))\n\n> (ask (complex :real 42.0))\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306e#user.Complex{:real 42.0, :imag 0.0}\u3067\u3059\u3002\nnil\n> (ask 42)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306fLong\u306e42\u3060\u3088\u301c\u3002\nnil\n> (ask 42.0)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306fDouble\u306e42.0\u3063!\nnil\n\n\nElixir\ncf. Protocols - Elixir\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\ndefprotocol WhoAmI do\n  def identify(x)\nend\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n# \u69cb\u9020\u4f53\u5b9a\u7fa9\ndefmodule Complex do\n  defstruct real: 0.0, imag: 0.0\nend\n\n# \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\ndefimpl WhoAmI, for: Complex do\n  def identify(x), do: \"\u79c1\u306fComplex\u306e#{inspect(x)}\u3067\u3059\u3002\"\nend\n\n# \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\ndefimpl WhoAmI, for: Integer do\n  def identify(x), do: \"\u3042\u305f\u3057\u306fInteger\u306e#{x}\u3060\u3088\u301c\u3002\"\nend\ndefimpl WhoAmI, for: Float do\n  def identify(x), do: \"\u3046\u3061\u306fFloat\u306e#{x}\u3063!\"\nend\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n  defmodule Who do\n    def ask(who), do: IO.puts \"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" <> WhoAmI.identify(who)\n  end\n\n> Who.ask(%Complex{real: 42.0})\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306e%Complex{imag: 0.0, real: 42.0}\u3067\u3059\u3002\n:ok\n> Who.ask(42)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306fInteger\u306e42\u3060\u3088\u301c\u3002\n:ok\n> Who.ask(42.0)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306fFloat\u306e42.0\u3063!\n:ok\n\n\n3. \u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9(multimethod)/\u591a\u91cd\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1(multiple dispatch)\n\nClojure\ncf. Clojure - Multimethods and Hierarchies\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\n(defmulti identify class)\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n;; \u30ec\u30b3\u30fc\u30c9\u5b9a\u7fa9\n(defrecord Complex [real imag])\n(defn complex [& {:keys [real imag]  ; \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u8a2d\u5b9a\n                  :or {real 0.0, imag 0.0}}]\n  (->Complex real imag))\n\n;; \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(defmethod identify Complex [x]\n  (format \"\u79c1\u306fComplex\u306e%s\u3067\u3059\u3002\" (pr-str x)))\n\n;; \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(defmethod identify Long [x]\n  (format \"\u3042\u305f\u3057\u306fLong\u306e%s\u3060\u3088\u301c\u3002\" x))\n(defmethod identify Double [x]\n  (format \"\u3046\u3061\u306fDouble\u306e%s\u3063!\" x))\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n(defn ask [who]\n  (println (str \"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" (identify who))))\n\n> (ask (complex :real 42.0))\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306e#user.Complex{:real 42.0, :imag 0.0}\u3067\u3059\u3002\nnil\n> (ask 42)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306fLong\u306e42\u3060\u3088\u301c\u3002\nnil\n> (ask 42.0)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306fDouble\u306e42.0\u3063!\nnil\n\n\nCommon Lisp\ncf. generic function (\u7dcf\u79f0\u95a2\u6570)\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\n(defgeneric identify (x))\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n;; \u30af\u30e9\u30b9\u5b9a\u7fa9\n(defclass my-complex ()\n  ((real\n    :initarg :real\n    :initform 0.0\n    :reader re)\n   (imag\n    :initarg :imag\n    :initform 0.0\n    :reader im)))\n(defmethod print-object ((x my-complex) stream)  ; pretty print\u7528\u306b\u8a2d\u5b9a\n  (print-unreadable-object (x stream)\n    (format stream \"my-complex :real ~a :imag ~a\" (re x) (im x))))\n\n;; \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(defmethod identify ((x my-complex))\n  (format nil \"\u79c1\u306fmy-complex\u306e~a\u3067\u3059\u3002\" x))\n\n;; \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(defmethod identify ((x integer))\n  (format nil \"\u3042\u305f\u3057\u306finteger\u306e~a\u3060\u3088\u301c\u3002\" x))\n(defmethod identify ((x float))\n  (format nil \"\u3046\u3061\u306ffloat\u306e~a\u3063!\" x))\n\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n(defun ask (who)\n  (princ (concatenate 'string \"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" (identify who))))\n\n> (ask (make-instance 'my-complex :real 42.0))\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fmy-complex\u306e#<my-complex :real 42.0 :imag 0.0>\u3067\u3059\u3002\n\"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fmy-complex\u306e#<my-complex :real 42.0 :imag 0.0>\u3067\u3059\u3002\"\n> (ask 42)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306finteger\u306e42\u3060\u3088\u301c\u3002\n\"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306finteger\u306e42\u3060\u3088\u301c\u3002\"\n> (ask 42.0)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306ffloat\u306e42.0\u3063!\n\"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306ffloat\u306e42.0\u3063!\"\n\n\n\u307e\u3068\u3081\n\n\u578b\u30af\u30e9\u30b9\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9\u3068\u3044\u3063\u305f\u8a00\u8a9e\u6a5f\u80fd/\u624b\u6cd5\u306b\u3088\u3063\u3066\u3082\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u306f\u5b9f\u73fe\u3067\u304d\u308b\n\u3053\u308c\u3089\u306f\u62e1\u5f35\u306b\u5bfe\u3057\u3066\u958b\u3044\u3066\u3044\u308b\u3068\u3044\u3046\u70b9\u3067\u5f93\u6765\u306e\u7d99\u627f\u306b\u3088\u308b\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u3088\u308a\u3082\u81ea\u7531\u5ea6\u304c\u9ad8\u3044\n\n\nFurther Reading\n\n\n\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Haskell\u300f\n\n\u7b2c10\u7ae0 \u578b\u3068\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\n\n\n\n\u300eScala\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u7b2c3\u7248\u300f\n\n\u7b2c21\u7ae0 \u6697\u9ed9\u306e\u578b\u5909\u63db\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\n\n\n\n\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Clojure \u7b2c2\u7248\u300f\n\n\u7b2c6\u7ae0 \u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u30c7\u30fc\u30bf\u578b\n\u7b2c8\u7ae0 \u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9\n\n\n\n\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Elixir\u300f\n\n\u7b2c22\u7ae0 \u30d7\u30ed\u30c8\u30b3\u30eb\u2015\u2015\u2015\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30c3\u30af\u95a2\u6570\n\n\n\n\u300e\u5b9f\u8df5Common Lisp\u300f\n\n\u7b2c16\u7ae0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u518d\u5165\u9580\uff1a\u7dcf\u79f0\u95a2\u6570\n\n\n\n**\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0**([polymorphism](https://en.wikipedia.org/wiki/Polymorphism_(computer_science)); \u591a\u614b, \u591a\u76f8)\u300d\u3068\u3044\u3046\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3051\u308b**\u7d99\u627f**(\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u7d99\u627f)\u306b\u3088\u308b\u5b9f\u73fe\u624b\u6cd5\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u3002\n\u3057\u304b\u3057\u3001\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u624b\u6cd5\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u7684\u306a\u578b\u968e\u5c64\u306b\u3088\u308b\u3082\u306e\u306b\u9650\u3089\u305a\u69d8\u3005\u306a\u3082\u306e\u304c\u3042\u308b\u3002\n\u3053\u3053\u3067\u306f\u3001[Expression Problem](https://en.wikipedia.org/wiki/Expression_problem)\u306b\u5bfe\u3059\u308b\u89e3\u6c7a\u7b56\u3068\u3057\u3066\u6319\u3052\u3089\u308c\u308b\u3001\u7d99\u627f\u306b\u3088\u3089\u306a\u3044\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u306e\u4ee3\u8868\u7684\u306a\u5b9f\u73fe\u624b\u6cd5\u3068\u3057\u3066\u3001\n\n- **\u578b\u30af\u30e9\u30b9**(type class)\n- **\u30d7\u30ed\u30c8\u30b3\u30eb**(protocol)\n- **\u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9**(multimethod)\n\n\u306b\u3088\u308b\u5b9f\u88c5\u3092\u8907\u6570\u8a00\u8a9e\u3067\u8a66\u3057\u3066\u307f\u305f\u3002\n\u3044\u305a\u308c\u306e\u65b9\u6cd5\u3082\u660e\u793a\u7684\u306a\u7d99\u627f\u95a2\u4fc2\u3092\u5fc5\u8981\u3068\u305b\u305a\u3001\u62e1\u5f35\u306b\u5bfe\u3057\u3066\u958b\u3044\u3066\u3044\u308b\u305f\u3081\u3001\u65e2\u5b58\u306e\u578b(\u4f8b\u3048\u3070\u8a00\u8a9e\u7d44\u307f\u8fbc\u307f\u578b)\u306b\u5bfe\u3057\u3066\u3082\u5bb9\u6613\u306b\u62e1\u5f35\u53ef\u80fd\u306a\u3053\u3068\u304c\u7279\u5fb4\u7684\u3067\u3001\u3042\u308b\u7a2e\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\u306b\u5bfe\u3059\u308b\u5b9f\u88c5\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u3001\u3044\u3064\u3067\u3082\u9069\u7528\u7bc4\u56f2\u3092\u62e1\u5927\u3067\u304d\u308b\u3002\n\n# 0. \u7d99\u627f([inheritance](https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)); cf. [subtyping](https://en.wikipedia.org/wiki/Subtyping))\n\n## Java\n\ncf. [Lesson: Interfaces and Inheritance (The Java\u2122 Tutorials > Learning the Java Language)](https://docs.oracle.com/javase/tutorial/java/IandI/index.html)\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\n```java\npublic interface WhoAmI {\n  String identify();\n}\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n```java\n// \u30af\u30e9\u30b9\u5b9a\u7fa9\npublic class Complex implements WhoAmI {\n  private final double real;\n  private final double imag;\n  public Complex(double real, double imag) {\n    this.real = real;\n    this.imag = imag;\n  }\n  public double getReal() {\n    return real;\n  }\n  public double getImag() {\n    return imag;\n  }\n  @Override\n  public String toString() {  // pretty print\u7528\u306b\u8a2d\u5b9a\n    return String.format(\"Complex(%s, %s)\", real, imag);\n  }\n  // \u65b0\u305f\u306b\u5b9a\u7fa9\u3059\u308b\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n  @Override\n  public String identify() {\n    return String.format(\"\u79c1\u306fComplex\u306e%s\u3067\u3059\u3002\", this);\n  }\n}\n\n// \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\u3059\u308b\u306e\u306f\u76f4\u63a5\u7684\u306b\u306f\u3067\u304d\u306a\u3044(Expression Problem)\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n```java\npublic class Who {\n  public static void ask(WhoAmI who) {\n    System.out.println(\"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" + who.identify());\n  }\n}\n\n> Who.ask(new Complex(42.0, 0.0))\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306eComplex(42.0, 0.0)\u3067\u3059\u3002\n```\n\n# 1. \u578b\u30af\u30e9\u30b9([type class](https://en.wikipedia.org/wiki/Type_class))\n\n## Haskell\n\ncf. [A Gentle Introduction to Haskell: Classes](https://www.haskell.org/tutorial/classes.html)\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\n```haskell\nclass WhoAmI a where\n    identify :: a -> String\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n```haskell\n-- \u30c7\u30fc\u30bf\u578b\u5b9a\u7fa9\ndata Complex = Complex\n    { real :: !Double\n    , imag :: !Double\n    } deriving Show\ncomplex :: Complex  -- \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u8a2d\u5b9a\ncomplex = Complex { real = 0.0, imag = 0.0 }\n\n-- \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\ninstance WhoAmI Complex where\n    identify x = \"\u79c1\u306fComplex\u306e\" ++ show x ++ \"\u3067\u3059\u3002\"\n\n-- \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\ninstance WhoAmI Integer where\n    identify x = \"\u3042\u305f\u3057\u306fInteger\u306e\" ++ show x ++ \"\u3060\u3088\u301c\u3002\"\ninstance WhoAmI Double where\n    identify x = \"\u3046\u3061\u306fDouble\u306e\" ++ show x ++ \"\u3063!\"\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n```haskell\nask :: WhoAmI a => a -> IO ()\nask who = putStrLn $ \"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" ++ identify who\n\n> ask complex { real = 42.0 }\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306eComplex {real = 42.0, imag = 0.0}\u3067\u3059\u3002\n> ask 42\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306fInteger\u306e42\u3060\u3088\u301c\u3002\n> ask 42.0\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306fDouble\u306e42.0\u3063!\n```\n\n## Scala\n\ncf. [Faq - What are Scala context bounds? - Scala Documentation](http://docs.scala-lang.org/tutorials/FAQ/context-bounds)\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\n```scala\ntrait WhoAmI[A] {\n  def identify(x: A): String\n}\nobject WhoAmI {\n  def identify[A: WhoAmI](x: A): String = implicitly[WhoAmI[A]].identify(x)\n  // \u307e\u305f\u306f\u3001\u660e\u793a\u7684\u306bimplicit parameter\u3092\u5229\u7528\u3057\u3066\n  // def identify[A](x: A)(implicit who: WhoAmI[A]): String = who.identify(x)\n}\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n```scala\n// \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u5b9a\u7fa9\ncase class Complex(real: Double = 0.0, imag: Double = 0.0)\n\n// \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\nimplicit val complexWhoAmI: WhoAmI[Complex] = new WhoAmI[Complex] {\n  def identify(x: Complex): String = s\"\u79c1\u306fComplex\u306e${x}\u3067\u3059\u3002\"\n}\n\n// \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\nimplicit val intWhoAmI: WhoAmI[Int] = new WhoAmI[Int] {\n  def identify(x: Int): String = s\"\u3042\u305f\u3057\u306fInt\u306e${x}\u3060\u3088\u301c\u3002\"\n}\nimplicit val doubleWhoAmI: WhoAmI[Double] = new WhoAmI[Double] {\n  def identify(x: Double): String = s\"\u3046\u3061\u306fDouble\u306e${x}\u3063!\"\n}\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n```scala\ndef ask[A: WhoAmI](who: A): Unit = println(\"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" + WhoAmI.identify(who))\n\n> ask(Complex(real = 42.0))\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306eComplex(42.0,0.0)\u3067\u3059\u3002\n> ask(42)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306fInt\u306e42\u3060\u3088\u301c\u3002\n> ask(42.0)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306fDouble\u306e42.0\u3063!\n```\n\n# 2. \u30d7\u30ed\u30c8\u30b3\u30eb(protocol)\n\n## Clojure\n\ncf. [Clojure - Protocols](http://clojure.org/reference/protocols)\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\n```clojure\n(defprotocol WhoAmI\n  (identify [x]))\n```\n\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n```clojure\n;; \u30ec\u30b3\u30fc\u30c9\u5b9a\u7fa9\n(defrecord Complex [real imag])\n(defn complex [& {:keys [real imag]  ; \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u8a2d\u5b9a\n                  :or {real 0.0, imag 0.0}}]\n  (->Complex real imag))\n\n;; \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(extend-protocol WhoAmI\n  Complex\n  (identify [x] (format \"\u79c1\u306fComplex\u306e%s\u3067\u3059\u3002\" (pr-str x))))\n\n;; \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(extend-protocol WhoAmI\n  Long\n  (identify [x] (format \"\u3042\u305f\u3057\u306fLong\u306e%s\u3060\u3088\u301c\u3002\" x))\n  Double\n  (identify [x] (format \"\u3046\u3061\u306fDouble\u306e%s\u3063!\" x)))\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n```clojure\n(defn ask [who]\n  (println (str \"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" (identify who))))\n\n> (ask (complex :real 42.0))\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306e#user.Complex{:real 42.0, :imag 0.0}\u3067\u3059\u3002\nnil\n> (ask 42)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306fLong\u306e42\u3060\u3088\u301c\u3002\nnil\n> (ask 42.0)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306fDouble\u306e42.0\u3063!\nnil\n```\n\n## Elixir\n\ncf. [Protocols - Elixir](http://elixir-lang.org/getting-started/protocols.html)\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\n```elixir\ndefprotocol WhoAmI do\n  def identify(x)\nend\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n```elixir\n# \u69cb\u9020\u4f53\u5b9a\u7fa9\ndefmodule Complex do\n  defstruct real: 0.0, imag: 0.0\nend\n\n# \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\ndefimpl WhoAmI, for: Complex do\n  def identify(x), do: \"\u79c1\u306fComplex\u306e#{inspect(x)}\u3067\u3059\u3002\"\nend\n\n# \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\ndefimpl WhoAmI, for: Integer do\n  def identify(x), do: \"\u3042\u305f\u3057\u306fInteger\u306e#{x}\u3060\u3088\u301c\u3002\"\nend\ndefimpl WhoAmI, for: Float do\n  def identify(x), do: \"\u3046\u3061\u306fFloat\u306e#{x}\u3063!\"\nend\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n```elixir\n  defmodule Who do\n    def ask(who), do: IO.puts \"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" <> WhoAmI.identify(who)\n  end\n\n> Who.ask(%Complex{real: 42.0})\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306e%Complex{imag: 0.0, real: 42.0}\u3067\u3059\u3002\n:ok\n> Who.ask(42)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306fInteger\u306e42\u3060\u3088\u301c\u3002\n:ok\n> Who.ask(42.0)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306fFloat\u306e42.0\u3063!\n:ok\n```\n\n# 3. \u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9(multimethod)/\u591a\u91cd\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1([multiple dispatch](https://en.wikipedia.org/wiki/Multiple_dispatch))\n\n## Clojure\n\ncf. [Clojure - Multimethods and Hierarchies](http://clojure.org/reference/multimethods)\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\n```clojure\n(defmulti identify class)\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n```clojure\n;; \u30ec\u30b3\u30fc\u30c9\u5b9a\u7fa9\n(defrecord Complex [real imag])\n(defn complex [& {:keys [real imag]  ; \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u8a2d\u5b9a\n                  :or {real 0.0, imag 0.0}}]\n  (->Complex real imag))\n\n;; \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(defmethod identify Complex [x]\n  (format \"\u79c1\u306fComplex\u306e%s\u3067\u3059\u3002\" (pr-str x)))\n\n;; \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(defmethod identify Long [x]\n  (format \"\u3042\u305f\u3057\u306fLong\u306e%s\u3060\u3088\u301c\u3002\" x))\n(defmethod identify Double [x]\n  (format \"\u3046\u3061\u306fDouble\u306e%s\u3063!\" x))\n```\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n```clojure\n(defn ask [who]\n  (println (str \"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" (identify who))))\n\n> (ask (complex :real 42.0))\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fComplex\u306e#user.Complex{:real 42.0, :imag 0.0}\u3067\u3059\u3002\nnil\n> (ask 42)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306fLong\u306e42\u3060\u3088\u301c\u3002\nnil\n> (ask 42.0)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306fDouble\u306e42.0\u3063!\nnil\n```\n\n## Common Lisp\n\ncf. [generic function (\u7dcf\u79f0\u95a2\u6570)](https://en.wikipedia.org/wiki/Generic_function)\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9a\u7fa9\n```lisp\n(defgeneric identify (x))\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5b9f\u88c5\n```lisp\n;; \u30af\u30e9\u30b9\u5b9a\u7fa9\n(defclass my-complex ()\n  ((real\n    :initarg :real\n    :initform 0.0\n    :reader re)\n   (imag\n    :initarg :imag\n    :initform 0.0\n    :reader im)))\n(defmethod print-object ((x my-complex) stream)  ; pretty print\u7528\u306b\u8a2d\u5b9a\n  (print-unreadable-object (x stream)\n    (format stream \"my-complex :real ~a :imag ~a\" (re x) (im x))))\n\n;; \u65b0\u305f\u306b\u5b9a\u7fa9\u3057\u305f\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(defmethod identify ((x my-complex))\n  (format nil \"\u79c1\u306fmy-complex\u306e~a\u3067\u3059\u3002\" x))\n\n;; \u65e2\u5b58\u306e\u578b\u306b\u5bfe\u3057\u3066\u5b9f\u88c5\n(defmethod identify ((x integer))\n  (format nil \"\u3042\u305f\u3057\u306finteger\u306e~a\u3060\u3088\u301c\u3002\" x))\n(defmethod identify ((x float))\n  (format nil \"\u3046\u3061\u306ffloat\u306e~a\u3063!\" x))\n```\n\n### \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5229\u7528\n```lisp\n(defun ask (who)\n  (princ (concatenate 'string \"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \" (identify who))))\n\n> (ask (make-instance 'my-complex :real 42.0))\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fmy-complex\u306e#<my-complex :real 42.0 :imag 0.0>\u3067\u3059\u3002\n\"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u79c1\u306fmy-complex\u306e#<my-complex :real 42.0 :imag 0.0>\u3067\u3059\u3002\"\n> (ask 42)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306finteger\u306e42\u3060\u3088\u301c\u3002\n\"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3042\u305f\u3057\u306finteger\u306e42\u3060\u3088\u301c\u3002\"\n> (ask 42.0)\n\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306ffloat\u306e42.0\u3063!\n\"\u3042\u306a\u305f\u306f\u8ab0? \u2015\u2015 \u3046\u3061\u306ffloat\u306e42.0\u3063!\"\n```\n\n# \u307e\u3068\u3081\n\n- \u578b\u30af\u30e9\u30b9\u3001\u30d7\u30ed\u30c8\u30b3\u30eb\u3001\u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9\u3068\u3044\u3063\u305f\u8a00\u8a9e\u6a5f\u80fd/\u624b\u6cd5\u306b\u3088\u3063\u3066\u3082\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u306f\u5b9f\u73fe\u3067\u304d\u308b\n- \u3053\u308c\u3089\u306f\u62e1\u5f35\u306b\u5bfe\u3057\u3066\u958b\u3044\u3066\u3044\u308b\u3068\u3044\u3046\u70b9\u3067\u5f93\u6765\u306e\u7d99\u627f\u306b\u3088\u308b\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30ba\u30e0\u3088\u308a\u3082\u81ea\u7531\u5ea6\u304c\u9ad8\u3044\n\n# Further Reading\n\n- [\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Haskell\u300f](http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000000045)\n    - \u7b2c10\u7ae0 \u578b\u3068\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\n- [\u300eScala\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u7b2c3\u7248\u300f](http://book.impress.co.jp/books/1116101021)\n    - \u7b2c21\u7ae0 \u6697\u9ed9\u306e\u578b\u5909\u63db\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\n- [\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Clojure \u7b2c2\u7248\u300f](http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000001949)\n    - \u7b2c6\u7ae0 \u30d7\u30ed\u30c8\u30b3\u30eb\u3068\u30c7\u30fc\u30bf\u578b\n    - \u7b2c8\u7ae0 \u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9\n- [\u300e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0Elixir\u300f](http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000004675)\n    - \u7b2c22\u7ae0 \u30d7\u30ed\u30c8\u30b3\u30eb\u2015\u2015\u2015\u30dd\u30ea\u30e2\u30fc\u30d5\u30a3\u30c3\u30af\u95a2\u6570\n- [\u300e\u5b9f\u8df5Common Lisp\u300f](http://shop.ohmsha.co.jp/shop/shopdetail.html?brandcode=000000001789)\n    - \u7b2c16\u7ae0 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u518d\u5165\u9580\uff1a\u7dcf\u79f0\u95a2\u6570\n", "tags": ["Haskell", "Scala", "Clojure", "Elixir", "common-lisp"]}