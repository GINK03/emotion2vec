{"context": "\n\n\u306f\u3058\u3081\u306b\nReact\u3068Play\u3067\u8a8d\u8a3c\u306f\u3069\u306e\u3088\u3046\u306b\u3084\u308c\u3070\u3044\u3044\u304b\u3068\u601d\u3044\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u8a8d\u8a3c\u306e\u57fa\u672c\u7684\u306a\u6d41\u308c\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u8a8d\u8a3c\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066API\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7528\u610f\u3057\u3066\u3001React\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u8a8d\u8a3c\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\n\u8a8d\u8a3c\u306b\u306fJWT\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305fJWT\u5185\u306b\u30ed\u30fc\u30eb\u3092\u5165\u308c\u308b\u3053\u3068\u3067\u8a8d\u53ef\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u306fPlay\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a8d\u8a3c\u3068\u8a8d\u53ef\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306fSilhouette\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u4e00\u304b\u3089\u3060\u3068\u5206\u304b\u308a\u3065\u3089\u3044\u306e\u3067play-silhouette-seed\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u5c11\u3057\u5909\u3048\u3066JWT\u8a8d\u8a3c\u3092\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nSilhouette\u306e\u6982\u8981\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u7167\u3057\u307e\u3057\u305f\u3002\n\u4f7f\u7528\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002\n- Play 2.5.4\n- Silette 4.0\n\n\u521d\u671f\u8a2d\u5b9a\nSilhouette\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u4f7f\u7528\u3059\u308b Identity \u3068 Authenticator \u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\ncom.mohiva.play.silhouette.api.Identity\u306f\u540d\u524d\u3084\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306a\u3069\u306e\u8a8d\u8a3c\u3055\u308c\u308b\u30e6\u30fc\u30b6\u30fc\u306b\u3064\u3044\u3066\u306e\u60c5\u5831\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\ncom.mohiva.play.silhouette.api.Authenticator\u306fOAuth\u3084id\u3068password\u3092\u4f7f\u3063\u305f\u8a8d\u8a3c\u306a\u3069\u306e\u8a8d\u8a3c\u65b9\u6cd5\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092utils.auth.DefaultEnv\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\nJWT\u3092\u4f7f\u3046\u306e\u3067Authenticator\u306fJWTAuthenticator\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nutils.auth.Env\npackage utils.auth\n\nimport com.mohiva.play.silhouette.api.Env\nimport com.mohiva.play.silhouette.impl.authenticators.{ CookieAuthenticator, JWTAuthenticator }\nimport models.User\n\ntrait DefaultEnv extends Env {\n  type I = User\n  type A = JWTAuthenticator\n}\n\n\n\nCSRF\u3068CORS\u306e\u8a2d\u5b9a\nReact\u3068API\u306f\u7570\u306a\u308b\u30aa\u30ea\u30b8\u30f3\u306b\u306a\u308b\u306e\u3067CORS\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nCSRF\u306b\u3064\u3044\u3066\u3082\u30c1\u30a7\u30c3\u30af\u3092\u30d0\u30a4\u30d1\u30b9\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nhttps://www.playframework.com/documentation/2.5.x/ScalaCsrf\nhttps://www.playframework.com/documentation/2.5.x/CorsFilter#Enabling-the-CORS-filter\n\nJWTAuthenticator\u306e\u8a2d\u5b9a\n\u8a2d\u5b9a\u4f8b\u3092\u53c2\u8003\u306bconf/silhouette.conf\u306b\u8a2d\u5b9a\u3092\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\nsilhouette.conf\nsilhouette {\n\n  authenticator.fieldName = \"X-Auth-Token\"\n  authenticator.requestParts = [\"headers\"]\n  authenticator.issuerClaim = \"play-react-silhouette\"\n  authenticator.encryptSubject = true\n  authenticator.authenticatorExpiry = 12 hours\n  authenticator.sharedSecret = \"changeme\"\n\n\n\n\u8a8d\u8a3c\u306e\u6d41\u308c\nAPI\u304b\u3089JWT\u3092\u53d6\u5f97\u3057\u3066\u3001\u305d\u308c\u3092\u4f7f\u3044\u56de\u3059\u3053\u3068\u3067\u8a8d\u8a3c\u3055\u308c\u305fAPI\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u30b5\u30a4\u30f3\u30a2\u30c3\u30d7 (\u8a8d\u8a3c\u306b\u5fc5\u8981\u306a\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3084\u30e6\u30fc\u30b6\u30fc\u540d\u3092\u767b\u9332\u3057\u307e\u3059)\n\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8 (\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u6709\u52b9\u5316\u3057\u307e\u3059)\n\u30b5\u30a4\u30f3\u30a4\u30f3 (JWT\u3092\u53d6\u5f97\u3057\u307e\u3059)\nJWT\u3092\u4f7f\u3063\u305f\u8a8d\u8a3c\n\n\n\u30b5\u30a4\u30f3\u30a2\u30c3\u30d7\n\u30b5\u30a4\u30f3\u30a2\u30c3\u30d7\u306b\u4ee5\u4e0b\u306e4\u3064\u306e\u60c5\u5831\u3092JSON\u3068\u3057\u3066POST body\u306b\u5165\u308c\u3066\u9001\u308a\u307e\u3059\nfirstName, lastName, fullName, email\n\u307b\u3068\u3093\u3069\u5909\u3048\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306bHTML\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u3060\u3051\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nSignUpController.scala\ndef submit = silhouette.UnsecuredAction.async { implicit request =>\n    SignUpForm.form.bindFromRequest.fold(\n      form => Future.successful(BadRequest),\n      data => {\n        val result = Redirect(routes.SignUpController.view()).flashing(\"info\" -> Messages(\"sign.up.email.sent\", data.email))\n        val loginInfo = LoginInfo(CredentialsProvider.ID, data.email)\n        userService.retrieve(loginInfo).flatMap {\n          case Some(user) =>\n            val url = routes.SignInController.view().absoluteURL()\n            mailerClient.send(Email(\n              subject = Messages(\"email.already.signed.up.subject\"),\n              from = Messages(\"email.from\"),\n              to = Seq(data.email),\n              bodyText = Some(views.txt.emails.alreadySignedUp(user, url).body),\n              bodyHtml = Some(views.html.emails.alreadySignedUp(user, url).body)\n            ))\n\n            Future.successful(result)\n          case None =>\n            val authInfo = passwordHasherRegistry.current.hash(data.password)\n            val user = User(\n              userID = UUID.randomUUID(),\n              loginInfo = loginInfo,\n              firstName = Some(data.firstName),\n              lastName = Some(data.lastName),\n              fullName = Some(data.firstName + \" \" + data.lastName),\n              email = Some(data.email),\n              avatarURL = None,\n              activated = false\n            )\n            for {\n              avatar <- avatarService.retrieveURL(data.email)\n              user <- userService.save(user.copy(avatarURL = avatar))\n              authInfo <- authInfoRepository.add(loginInfo, authInfo)\n              authToken <- authTokenService.create(user.userID)\n            } yield {\n              val url = routes.ActivateAccountController.activate(authToken.id).absoluteURL()\n              mailerClient.send(Email(\n                subject = Messages(\"email.sign.up.subject\"),\n                from = Messages(\"email.from\"),\n                to = Seq(data.email),\n                bodyText = Some(views.txt.emails.signUp(user, url).body),\n                bodyHtml = Some(views.html.emails.signUp(user, url).body)\n              ))\n\n              silhouette.env.eventBus.publish(SignUpEvent(user, request))\n              Ok\n            }\n        }\n      }\n    )\n  }\n\n\n\n\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\n\u305d\u306e\u307e\u307e\u3060\u3068\u767b\u9332\u3057\u305femail\u30a2\u30c9\u30ec\u30b9\u5b9b\u306bemail\u306e\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u7528\u306e\u30ea\u30f3\u30af\u3092\u9001\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3065\u3089\u3044\u306e\u3067\u3001\u6a19\u6e96\u51fa\u529b\u306b\u30e1\u30fc\u30eb\u306e\u5185\u5bb9\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\napplication.conf\nplay.mailer {\n  mock = true\n  host = localhost\n}\n\n\nPOST\u3059\u308b\u3068\u6a19\u6e96\u51fa\u529b\u306b\u30e1\u30fc\u30eb\u5185\u5bb9\u304c\u51fa\u529b\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30ea\u30f3\u30af\u3092GET\u3059\u308b\u3068\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u3057\u307e\u3059\u3002\nActivateAccountController\u3067\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u51e6\u7406\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\nActivateAccountController.scala\ndef activate(token: UUID) = silhouette.UnsecuredAction.async { implicit request =>\n    authTokenService.validate(token).flatMap {\n      case Some(authToken) => userService.retrieve(authToken.userID).flatMap {\n        case Some(user) if user.loginInfo.providerID == CredentialsProvider.ID =>\n          userService.save(user.copy(activated = true)).map { _ =>\n            Ok\n          }\n        case _ => \n          Future.successful(BadRequest)\n      }\n      case None => \n        Future.successful(BadRequest)\n    }\n  }\n\n\n\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u3055\u308c\u305f\u3053\u3068\u3092models/User\u30af\u30e9\u30b9\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\nmodels/User\u306eactivated: Boolean\u3067\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306fOk, \u5931\u6557\u305f\u5834\u5408\u306fBadRequest\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nactivate\u306fHTML\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u5143\u306b\u8fd4\u3059\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u3001HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u3060\u3051\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b5\u30a4\u30f3\u30a4\u30f3\n\u4e00\u610f\u306aID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6e21\u3057\u3066\u8a8d\u8a3c\u3092\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306fID\u3068\u3057\u3066email\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nReact ---(email, password)---> API\n\u30b5\u30a4\u30f3\u30a4\u30f3\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306fHTML\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u5143\u306b\u8fd4\u3059\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u3001HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u3060\u3051\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\napp/controllers/SignInController.scala\ndef submit = silhouette.UnsecuredAction.async { implicit request =>\n    SignInForm.form.bindFromRequest.fold(\n      form => Future.successful(BadRequest(views.html.signIn(form))),\n      data => {\n        val credentials = Credentials(data.email, data.password)\n        credentialsProvider.authenticate(credentials).flatMap { loginInfo =>\n          val result = Redirect(routes.ApplicationController.index())\n          userService.retrieve(loginInfo).flatMap {\n            case Some(user) if !user.activated =>\n              Future.successful(BadRequest)\n            case Some(user) =>\n              val c = configuration.underlying\n              silhouette.env.authenticatorService.create(loginInfo).map {\n                case authenticator if data.rememberMe =>\n                  authenticator.copy(\n                    expirationDateTime = clock.now + c.as[FiniteDuration](\"silhouette.authenticator.rememberMe.authenticatorExpiry\"),\n                    idleTimeout = c.getAs[FiniteDuration](\"silhouette.authenticator.rememberMe.authenticatorIdleTimeout\"),\n                    customClaims = Some(JsObject(Seq(\"role\" -> JsString(\"operator\")))) //\u30ed\u30fc\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\n                  )\n                case authenticator => authenticator\n              }.flatMap { authenticator =>\n                silhouette.env.eventBus.publish(LoginEvent(user, request))\n                silhouette.env.authenticatorService.init(authenticator).flatMap { v =>\n                  silhouette.env.authenticatorService.embed(v, Ok)\n                }\n              }\n            case None => Future.failed(new IdentityNotFoundException(\"Couldn't find user\"))\n          }\n        }.recover {\n          case e: ProviderException =>\n            BadRequest\n        }\n      }\n    )\n  }\n\n\nJWT\u306b\u8a8d\u53ef\u7528\u306e\u30ed\u30fc\u30eb\u3092\u5165\u308c\u305f\u3044\u306e\u3067\u3001JWT\u306e Private claims \u306b\u5bfe\u3057\u3066\u5024\u3092\u5165\u308c\u3066\u3084\u308a\u307e\u3059\u3002\nAuthenticator\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u3001customClaims\u306e\u5f15\u6570\u306b\u5024\u3092\u6e21\u3057\u3066\u3084\u308a\u307e\u3059\u3002\ncustomClaims = Some(JsObject(Seq(\"role\" -> JsString(\"admin\"))))\n\u3053\u306e\u5834\u5408\u306f {\"role\": \"admin\"} \u3068\u3044\u3046\u5024\u304c\u5165\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e role \u3092\u4f7f\u3063\u3066API\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f\u6642\u306b\u8a8d\u53ef\u306e\u5224\u5b9a\u3092\u3057\u307e\u3059\u3002\n\n\u8a8d\u53ef\ncom.mohiva.play.silhouette.api.Authorization\u3092\u7d99\u627f\u3057\u305fWithProvider\u306bisAuthorized\u306e\u5b9f\u88c5\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u8a8d\u53ef\u306e\u5224\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\nutils.auth.WithProvider\ncase class WithProvider[A <: Authenticator](provider: String) extends Authorization[User, A] {\n  override def isAuthorized[B](user: User, authenticator: A)(implicit request: Request[B]): Future[Boolean] = {\n    val authorized = ??? // \u4f55\u304b\u8a8d\u53ef\u306e\u5224\u5b9a\u3092\u3057\u307e\u3059\n    Future.successful(authorized)\n  }\n}\n\n\n\u8a8d\u8a3c\u3068\u540c\u3058\u3088\u3046\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u3066\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8a8d\u53ef\u306e\u5224\u5b9a\u3092\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002silhouette.SecuredAction\u306bWithProvider\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u8a8d\u53ef\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002\ndef index = silhouette.SecuredAction(WithProvider[DefaultEnv#A](CredentialsProvider.ID)).async { implicit request =>\n    Future.successful(Ok)\n  }\n\n\nJWT\u30c8\u30fc\u30af\u30f3\u53d6\u5f97\n\u30ed\u30b0\u30a4\u30f3\u306b\u6210\u529f\u3059\u308b\u3068API\u304b\u3089X-Auth-Token\u30d8\u30c3\u30c0\u30fc\u306b\u30c8\u30fc\u30af\u30f3\u306e\u5024\u304c\u5165\u308a\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\nReact <---(JWT)--- API\nReact\u5074\u3067\u306fWeb Strage\u3092\u5229\u7528\u3057\u3066\u30c8\u30fc\u30af\u30f3\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\nJWT\u3092\u4f7f\u3063\u305f\u8a8d\u8a3c\n\u30b5\u30a4\u30f3\u30a4\u30f3\u5f8c\u306fJWT\u3092\u4f7f\u7528\u3057\u3066\u8a8d\u8a3c\u3092\u3057\u307e\u3059\u3002\n\u540c\u3058\u3088\u3046\u306bX-Auth-Token\u30d8\u30c3\u30c0\u30fc\u306bWeb Strage\u306b\u4fdd\u5b58\u3057\u3066\u304a\u3044\u305fJWT\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\u3053\u308c\u3067\u3001silhouette.SecuredAction\u3067\u8a8d\u8a3c\u3068\u8a8d\u53ef\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nReact -(JWT)-> API\n\nErrorHandler\n\u8a8d\u8a3c\u30a8\u30e9\u30fc\u3084\u8a8d\u53ef\u30a8\u30e9\u30fc\u306e\u6642\u306b\u8fd4\u3059\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002\nSecuredErrorHandler\u3068UnsecuredErrorHandler\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nutils.auth.CustomSecuredErrorHandler\u3068utils.auth.CustomUnsecuredErrorHandler\u306bonNotAuthorized\u306a\u3069\u306e\u30a8\u30e9\u30fc\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\u3002\n\nutils.auth.CustomSecuredErrorHandler\noverride def onNotAuthorized(implicit request: RequestHeader) = {\n    Future.successful(Forbidden)\n  }\n\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070 Forbidden \u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u306e\u4ed6\n\nCORS\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068CORS\u306e\u8a2d\u5b9a\u3067\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u30fc\u306f\u4f55\u3082\u306a\u3044\u306e\u3067\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u8003\u306b application.conf \u306bplay.filters.cors.exposedHeaders\u306e\u8a2d\u5b9a\u3092\u52a0\u3048\u307e\u3059\u3002\n\napplication.conf\nplay.filters.cors.exposedHeaders = [\"x-auth-token\"]\n\n\n\n\u30c7\u30d0\u30c3\u30b0\nIntelliJ IDEA\u3067\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u6642JVM\u3092fork\u3057\u3066\u3057\u307e\u3046\u3068\u30c7\u30d0\u30c3\u30b0\u3067\u304d\u306a\u3044\u306e\u3067\u3001fork\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nbuild.sbt\nfork in run := false\n\n\n\nJWT\u306e\u6709\u52b9\u6027\nSecuredAciton\u304b\u3089RequestHandler\u304c\u547c\u3070\u308c\u307e\u3059\u304c\u3001\u305d\u3053\u3067\u8a8d\u8a3c\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\nRequestHandler.scala\ncase Some(a) if a.isValid  => environment.identityService.retrieve(a.loginInfo).map(i => Some(Left(a)) -> i)\n\n\n\u3053\u306e\u90e8\u5206\u3067LoginInfo\u3092\u4f7f\u3063\u3066 Identity \u3092\u63a2\u3057\u3066\u3044\u307e\u3059\u3001\u3082\u3057\u3042\u308c\u3070\u8a8d\u8a3c\u304c\u901a\u308a\u307e\u3059\u3002\nJWT\u304c\u6b63\u3057\u3044\u3060\u3051\u3067\u306f\u306a\u304f\u3001 Identity \u304c\u5b58\u5728\u3059\u308b\u304b\u3082\u898b\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067 Identity \u3092\u6c38\u7d9a\u5316\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u306a\u3044\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u518d\u8d77\u52d5\u3057\u305f\u6642\u306b\u6709\u52b9\u306aJWT\u3067\u3082\u8a8d\u8a3c\u304c\u901a\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u6c38\u7d9a\u5316\u3059\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n\u5916\u90e8(DB\u306a\u3069)\u306b\u4fdd\u5b58\u3067\u304d\u308b\u306e\u306f\n1. Identity\u3092\u7d99\u627f\u3057\u305fUser\u30af\u30e9\u30b9\n2. PasswordInfo\n3. JWTAuthenticator\n\u306e3\u3064\u304c\u3042\u308a\u307e\u3059\u3002 \nplay-silhouette-seed\u3067\u306f\u5168\u3066\u30e1\u30e2\u30ea\u4f55\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306bDAO\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u5b9f\u969b\u306b\u306fDB\u306a\u3069\u306b\u6c38\u7d9a\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u304a\u308f\u308a\u306b\nSilhouette\u3092\u4f7f\u3063\u3066React\u306e\u8a8d\u8a3c/\u8a8d\u53ef\u5468\u308a\u3092\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u30d1\u30b9\u30ef\u30fc\u30c9\u5fd8\u308c\u305f\u6642\u306e\u30ea\u30bb\u30c3\u30c8\u5468\u308a\u3060\u3068\u304b\u3001\u81ea\u524d\u3067\u5b9f\u88c5\u3057\u306a\u304f\u3066\u3044\u3044\u306e\u3067\u4fbf\u5229\u3067\u3059\u306d\uff01\n\n# \u306f\u3058\u3081\u306b\n\nReact\u3068Play\u3067\u8a8d\u8a3c\u306f\u3069\u306e\u3088\u3046\u306b\u3084\u308c\u3070\u3044\u3044\u304b\u3068\u601d\u3044\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u8a8d\u8a3c\u306e\u57fa\u672c\u7684\u306a\u6d41\u308c\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089](https://github.com/joshgeller/react-redux-jwt-auth-example)\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u8a8d\u8a3c\u30b5\u30fc\u30d3\u30b9\u3068\u3057\u3066API\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7528\u610f\u3057\u3066\u3001React\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u8a8d\u8a3c\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\n\u8a8d\u8a3c\u306b\u306fJWT\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u307e\u305fJWT\u5185\u306b\u30ed\u30fc\u30eb\u3092\u5165\u308c\u308b\u3053\u3068\u3067\u8a8d\u53ef\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u306fPlay\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u8a8d\u8a3c\u3068\u8a8d\u53ef\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u306f[Silhouette](https://github.com/mohiva/play-silhouette)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u4e00\u304b\u3089\u3060\u3068\u5206\u304b\u308a\u3065\u3089\u3044\u306e\u3067[play-silhouette-seed](https://github.com/mohiva/play-silhouette-seed)\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u5c11\u3057\u5909\u3048\u3066JWT\u8a8d\u8a3c\u3092\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nSilhouette\u306e\u6982\u8981\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089](http://www.silhouette.rocks/docs)\u3092\u53c2\u7167\u3057\u307e\u3057\u305f\u3002\n\n\u4f7f\u7528\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002\n- Play 2.5.4\n- Silette 4.0\n\n# \u521d\u671f\u8a2d\u5b9a\n\nSilhouette\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u4f7f\u7528\u3059\u308b _Identity_ \u3068 _Authenticator_ \u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n`com.mohiva.play.silhouette.api.Identity`\u306f\u540d\u524d\u3084\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306a\u3069\u306e\u8a8d\u8a3c\u3055\u308c\u308b\u30e6\u30fc\u30b6\u30fc\u306b\u3064\u3044\u3066\u306e\u60c5\u5831\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n`com.mohiva.play.silhouette.api.Authenticator`\u306fOAuth\u3084id\u3068password\u3092\u4f7f\u3063\u305f\u8a8d\u8a3c\u306a\u3069\u306e\u8a8d\u8a3c\u65b9\u6cd5\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3092`utils.auth.DefaultEnv`\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\nJWT\u3092\u4f7f\u3046\u306e\u3067Authenticator\u306f`JWTAuthenticator`\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```scala:utils.auth.Env\npackage utils.auth\n\nimport com.mohiva.play.silhouette.api.Env\nimport com.mohiva.play.silhouette.impl.authenticators.{ CookieAuthenticator, JWTAuthenticator }\nimport models.User\n\ntrait DefaultEnv extends Env {\n  type I = User\n  type A = JWTAuthenticator\n}\n```\n\n## CSRF\u3068CORS\u306e\u8a2d\u5b9a\n\nReact\u3068API\u306f\u7570\u306a\u308b\u30aa\u30ea\u30b8\u30f3\u306b\u306a\u308b\u306e\u3067CORS\u306e\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nCSRF\u306b\u3064\u3044\u3066\u3082\u30c1\u30a7\u30c3\u30af\u3092\u30d0\u30a4\u30d1\u30b9\u3059\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nhttps://www.playframework.com/documentation/2.5.x/ScalaCsrf\nhttps://www.playframework.com/documentation/2.5.x/CorsFilter#Enabling-the-CORS-filter\n\n## JWTAuthenticator\u306e\u8a2d\u5b9a\n\n[\u8a2d\u5b9a\u4f8b](http://www.silhouette.rocks/v4.0/docs/config-authenticators#section-jwtauthenticator)\u3092\u53c2\u8003\u306b`conf/silhouette.conf`\u306b\u8a2d\u5b9a\u3092\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```yaml:silhouette.conf\nsilhouette {\n\n  authenticator.fieldName = \"X-Auth-Token\"\n  authenticator.requestParts = [\"headers\"]\n  authenticator.issuerClaim = \"play-react-silhouette\"\n  authenticator.encryptSubject = true\n  authenticator.authenticatorExpiry = 12 hours\n  authenticator.sharedSecret = \"changeme\"\n```\n\n# \u8a8d\u8a3c\u306e\u6d41\u308c\n\nAPI\u304b\u3089JWT\u3092\u53d6\u5f97\u3057\u3066\u3001\u305d\u308c\u3092\u4f7f\u3044\u56de\u3059\u3053\u3068\u3067\u8a8d\u8a3c\u3055\u308c\u305fAPI\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n1. \u30b5\u30a4\u30f3\u30a2\u30c3\u30d7 (\u8a8d\u8a3c\u306b\u5fc5\u8981\u306a\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3084\u30e6\u30fc\u30b6\u30fc\u540d\u3092\u767b\u9332\u3057\u307e\u3059)\n2. \u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8 (\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u6709\u52b9\u5316\u3057\u307e\u3059)\n3. \u30b5\u30a4\u30f3\u30a4\u30f3 (JWT\u3092\u53d6\u5f97\u3057\u307e\u3059)\n4. JWT\u3092\u4f7f\u3063\u305f\u8a8d\u8a3c\n\n## \u30b5\u30a4\u30f3\u30a2\u30c3\u30d7\n\n\u30b5\u30a4\u30f3\u30a2\u30c3\u30d7\u306b\u4ee5\u4e0b\u306e4\u3064\u306e\u60c5\u5831\u3092JSON\u3068\u3057\u3066POST body\u306b\u5165\u308c\u3066\u9001\u308a\u307e\u3059\nfirstName, lastName, fullName, email\n\n\u307b\u3068\u3093\u3069\u5909\u3048\u3066\u3044\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306bHTML\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u3060\u3051\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```scala:SignUpController.scala\ndef submit = silhouette.UnsecuredAction.async { implicit request =>\n    SignUpForm.form.bindFromRequest.fold(\n      form => Future.successful(BadRequest),\n      data => {\n        val result = Redirect(routes.SignUpController.view()).flashing(\"info\" -> Messages(\"sign.up.email.sent\", data.email))\n        val loginInfo = LoginInfo(CredentialsProvider.ID, data.email)\n        userService.retrieve(loginInfo).flatMap {\n          case Some(user) =>\n            val url = routes.SignInController.view().absoluteURL()\n            mailerClient.send(Email(\n              subject = Messages(\"email.already.signed.up.subject\"),\n              from = Messages(\"email.from\"),\n              to = Seq(data.email),\n              bodyText = Some(views.txt.emails.alreadySignedUp(user, url).body),\n              bodyHtml = Some(views.html.emails.alreadySignedUp(user, url).body)\n            ))\n\n            Future.successful(result)\n          case None =>\n            val authInfo = passwordHasherRegistry.current.hash(data.password)\n            val user = User(\n              userID = UUID.randomUUID(),\n              loginInfo = loginInfo,\n              firstName = Some(data.firstName),\n              lastName = Some(data.lastName),\n              fullName = Some(data.firstName + \" \" + data.lastName),\n              email = Some(data.email),\n              avatarURL = None,\n              activated = false\n            )\n            for {\n              avatar <- avatarService.retrieveURL(data.email)\n              user <- userService.save(user.copy(avatarURL = avatar))\n              authInfo <- authInfoRepository.add(loginInfo, authInfo)\n              authToken <- authTokenService.create(user.userID)\n            } yield {\n              val url = routes.ActivateAccountController.activate(authToken.id).absoluteURL()\n              mailerClient.send(Email(\n                subject = Messages(\"email.sign.up.subject\"),\n                from = Messages(\"email.from\"),\n                to = Seq(data.email),\n                bodyText = Some(views.txt.emails.signUp(user, url).body),\n                bodyHtml = Some(views.html.emails.signUp(user, url).body)\n              ))\n\n              silhouette.env.eventBus.publish(SignUpEvent(user, request))\n              Ok\n            }\n        }\n      }\n    )\n  }\n```\n\n## \u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\n\n\u305d\u306e\u307e\u307e\u3060\u3068\u767b\u9332\u3057\u305femail\u30a2\u30c9\u30ec\u30b9\u5b9b\u306bemail\u306e\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u7528\u306e\u30ea\u30f3\u30af\u3092\u9001\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3065\u3089\u3044\u306e\u3067\u3001\u6a19\u6e96\u51fa\u529b\u306b\u30e1\u30fc\u30eb\u306e\u5185\u5bb9\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```application.conf\nplay.mailer {\n  mock = true\n  host = localhost\n}\n```\n\nPOST\u3059\u308b\u3068\u6a19\u6e96\u51fa\u529b\u306b\u30e1\u30fc\u30eb\u5185\u5bb9\u304c\u51fa\u529b\u3055\u308c\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30ea\u30f3\u30af\u3092GET\u3059\u308b\u3068\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u3057\u307e\u3059\u3002\n\n`ActivateAccountController`\u3067\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u51e6\u7406\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```scala:ActivateAccountController.scala\ndef activate(token: UUID) = silhouette.UnsecuredAction.async { implicit request =>\n    authTokenService.validate(token).flatMap {\n      case Some(authToken) => userService.retrieve(authToken.userID).flatMap {\n        case Some(user) if user.loginInfo.providerID == CredentialsProvider.ID =>\n          userService.save(user.copy(activated = true)).map { _ =>\n            Ok\n          }\n        case _ => \n          Future.successful(BadRequest)\n      }\n      case None => \n        Future.successful(BadRequest)\n    }\n  }\n```\n\n\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u3055\u308c\u305f\u3053\u3068\u3092`models/User`\u30af\u30e9\u30b9\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\n`models/User`\u306e`activated: Boolean`\u3067\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306fOk, \u5931\u6557\u305f\u5834\u5408\u306fBadRequest\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n`activate`\u306fHTML\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u5143\u306b\u8fd4\u3059\u5fc5\u8981\u304c\u306a\u3044\u306e\u3067\u3001HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u3060\u3051\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u30b5\u30a4\u30f3\u30a4\u30f3\n\u4e00\u610f\u306aID\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6e21\u3057\u3066\u8a8d\u8a3c\u3092\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306fID\u3068\u3057\u3066email\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nReact ---(email, password)---> API\n\n\u30b5\u30a4\u30f3\u30a4\u30f3\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306fHTML\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u5143\u306b\u8fd4\u3059\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067\u3001HTTP\u30b9\u30c6\u30fc\u30bf\u30b9\u3060\u3051\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n```scala:app/controllers/SignInController.scala\ndef submit = silhouette.UnsecuredAction.async { implicit request =>\n    SignInForm.form.bindFromRequest.fold(\n      form => Future.successful(BadRequest(views.html.signIn(form))),\n      data => {\n        val credentials = Credentials(data.email, data.password)\n        credentialsProvider.authenticate(credentials).flatMap { loginInfo =>\n          val result = Redirect(routes.ApplicationController.index())\n          userService.retrieve(loginInfo).flatMap {\n            case Some(user) if !user.activated =>\n              Future.successful(BadRequest)\n            case Some(user) =>\n              val c = configuration.underlying\n              silhouette.env.authenticatorService.create(loginInfo).map {\n                case authenticator if data.rememberMe =>\n                  authenticator.copy(\n                    expirationDateTime = clock.now + c.as[FiniteDuration](\"silhouette.authenticator.rememberMe.authenticatorExpiry\"),\n                    idleTimeout = c.getAs[FiniteDuration](\"silhouette.authenticator.rememberMe.authenticatorIdleTimeout\"),\n                    customClaims = Some(JsObject(Seq(\"role\" -> JsString(\"operator\")))) //\u30ed\u30fc\u30eb\u3092\u8a2d\u5b9a\u3059\u308b\n                  )\n                case authenticator => authenticator\n              }.flatMap { authenticator =>\n                silhouette.env.eventBus.publish(LoginEvent(user, request))\n                silhouette.env.authenticatorService.init(authenticator).flatMap { v =>\n                  silhouette.env.authenticatorService.embed(v, Ok)\n                }\n              }\n            case None => Future.failed(new IdentityNotFoundException(\"Couldn't find user\"))\n          }\n        }.recover {\n          case e: ProviderException =>\n            BadRequest\n        }\n      }\n    )\n  }\n```\n\nJWT\u306b\u8a8d\u53ef\u7528\u306e\u30ed\u30fc\u30eb\u3092\u5165\u308c\u305f\u3044\u306e\u3067\u3001JWT\u306e _Private claims_ \u306b\u5bfe\u3057\u3066\u5024\u3092\u5165\u308c\u3066\u3084\u308a\u307e\u3059\u3002\n`Authenticator`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u3001`customClaims`\u306e\u5f15\u6570\u306b\u5024\u3092\u6e21\u3057\u3066\u3084\u308a\u307e\u3059\u3002\n\n`customClaims = Some(JsObject(Seq(\"role\" -> JsString(\"admin\"))))`\n\u3053\u306e\u5834\u5408\u306f _{\"role\": \"admin\"}_ \u3068\u3044\u3046\u5024\u304c\u5165\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e _role_ \u3092\u4f7f\u3063\u3066API\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f\u6642\u306b\u8a8d\u53ef\u306e\u5224\u5b9a\u3092\u3057\u307e\u3059\u3002\n\n### \u8a8d\u53ef\n\n`com.mohiva.play.silhouette.api.Authorization`\u3092\u7d99\u627f\u3057\u305f`WithProvider`\u306b`isAuthorized`\u306e\u5b9f\u88c5\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u8a8d\u53ef\u306e\u5224\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```scala:utils.auth.WithProvider\ncase class WithProvider[A <: Authenticator](provider: String) extends Authorization[User, A] {\n  override def isAuthorized[B](user: User, authenticator: A)(implicit request: Request[B]): Future[Boolean] = {\n  \tval authorized = ??? // \u4f55\u304b\u8a8d\u53ef\u306e\u5224\u5b9a\u3092\u3057\u307e\u3059\n    Future.successful(authorized)\n  }\n}\n```\n\n\u8a8d\u8a3c\u3068\u540c\u3058\u3088\u3046\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u3066\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u305f\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u8a8d\u53ef\u306e\u5224\u5b9a\u3092\u3057\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002`silhouette.SecuredAction`\u306b`WithProvider`\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u8a8d\u53ef\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n\n```scala\ndef index = silhouette.SecuredAction(WithProvider[DefaultEnv#A](CredentialsProvider.ID)).async { implicit request =>\n    Future.successful(Ok)\n  }\n```\n\n### JWT\u30c8\u30fc\u30af\u30f3\u53d6\u5f97\n\u30ed\u30b0\u30a4\u30f3\u306b\u6210\u529f\u3059\u308b\u3068API\u304b\u3089`X-Auth-Token`\u30d8\u30c3\u30c0\u30fc\u306b\u30c8\u30fc\u30af\u30f3\u306e\u5024\u304c\u5165\u308a\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\nReact <---(JWT)--- API\n\nReact\u5074\u3067\u306fWeb Strage\u3092\u5229\u7528\u3057\u3066\u30c8\u30fc\u30af\u30f3\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n## JWT\u3092\u4f7f\u3063\u305f\u8a8d\u8a3c\n\n\u30b5\u30a4\u30f3\u30a4\u30f3\u5f8c\u306fJWT\u3092\u4f7f\u7528\u3057\u3066\u8a8d\u8a3c\u3092\u3057\u307e\u3059\u3002\n\u540c\u3058\u3088\u3046\u306b`X-Auth-Token`\u30d8\u30c3\u30c0\u30fc\u306bWeb Strage\u306b\u4fdd\u5b58\u3057\u3066\u304a\u3044\u305fJWT\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\u3053\u308c\u3067\u3001`silhouette.SecuredAction`\u3067\u8a8d\u8a3c\u3068\u8a8d\u53ef\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nReact -(JWT)-> API\n\n### ErrorHandler\n\n\u8a8d\u8a3c\u30a8\u30e9\u30fc\u3084\u8a8d\u53ef\u30a8\u30e9\u30fc\u306e\u6642\u306b\u8fd4\u3059\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002\n`SecuredErrorHandler`\u3068`UnsecuredErrorHandler`\u3092\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n`utils.auth.CustomSecuredErrorHandler`\u3068`utils.auth.CustomUnsecuredErrorHandler`\u306b`onNotAuthorized`\u306a\u3069\u306e\u30a8\u30e9\u30fc\u95a2\u6570\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u307e\u3059\u3002\n\n```scala:utils.auth.CustomSecuredErrorHandler\noverride def onNotAuthorized(implicit request: RequestHeader) = {\n    Future.successful(Forbidden)\n  }\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070 _Forbidden_ \u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u305d\u306e\u4ed6\n\n## CORS\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068CORS\u306e\u8a2d\u5b9a\u3067\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u30fc\u306f\u4f55\u3082\u306a\u3044\u306e\u3067\u3001[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://www.playframework.com/documentation/2.5.x/CorsFilter)\u3092\u53c2\u8003\u306b _application.conf_ \u306bplay.filters.cors.exposedHeaders\u306e\u8a2d\u5b9a\u3092\u52a0\u3048\u307e\u3059\u3002\n\n```scala:application.conf\nplay.filters.cors.exposedHeaders = [\"x-auth-token\"]\n```\n\n## \u30c7\u30d0\u30c3\u30b0\n\nIntelliJ IDEA\u3067\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u6642JVM\u3092fork\u3057\u3066\u3057\u307e\u3046\u3068\u30c7\u30d0\u30c3\u30b0\u3067\u304d\u306a\u3044\u306e\u3067\u3001fork\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```scala:build.sbt\nfork in run := false\n```\n\n## JWT\u306e\u6709\u52b9\u6027\n\n`SecuredAciton`\u304b\u3089`RequestHandler`\u304c\u547c\u3070\u308c\u307e\u3059\u304c\u3001\u305d\u3053\u3067\u8a8d\u8a3c\u306e\u30c1\u30a7\u30c3\u30af\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n```scala:RequestHandler.scala\ncase Some(a) if a.isValid  => environment.identityService.retrieve(a.loginInfo).map(i => Some(Left(a)) -> i)\n```\n\u3053\u306e\u90e8\u5206\u3067LoginInfo\u3092\u4f7f\u3063\u3066 _Identity_ \u3092\u63a2\u3057\u3066\u3044\u307e\u3059\u3001\u3082\u3057\u3042\u308c\u3070\u8a8d\u8a3c\u304c\u901a\u308a\u307e\u3059\u3002\nJWT\u304c\u6b63\u3057\u3044\u3060\u3051\u3067\u306f\u306a\u304f\u3001 _Identity_ \u304c\u5b58\u5728\u3059\u308b\u304b\u3082\u898b\u3066\u3044\u307e\u3059\u3002\u306a\u306e\u3067 _Identity_ \u3092\u6c38\u7d9a\u5316\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u3046\u3057\u306a\u3044\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u518d\u8d77\u52d5\u3057\u305f\u6642\u306b\u6709\u52b9\u306aJWT\u3067\u3082\u8a8d\u8a3c\u304c\u901a\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n## \u6c38\u7d9a\u5316\u3059\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\n\n\u5916\u90e8(DB\u306a\u3069)\u306b\u4fdd\u5b58\u3067\u304d\u308b\u306e\u306f\n1. `Identity`\u3092\u7d99\u627f\u3057\u305f`User`\u30af\u30e9\u30b9\n2. `PasswordInfo`\n3. `JWTAuthenticator`\n\u306e3\u3064\u304c\u3042\u308a\u307e\u3059\u3002 \n\nplay-silhouette-seed\u3067\u306f\u5168\u3066\u30e1\u30e2\u30ea\u4f55\u4fdd\u5b58\u3059\u308b\u3088\u3046\u306bDAO\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u5b9f\u969b\u306b\u306fDB\u306a\u3069\u306b\u6c38\u7d9a\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n# \u304a\u308f\u308a\u306b\n\nSilhouette\u3092\u4f7f\u3063\u3066React\u306e\u8a8d\u8a3c/\u8a8d\u53ef\u5468\u308a\u3092\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\u30d1\u30b9\u30ef\u30fc\u30c9\u5fd8\u308c\u305f\u6642\u306e\u30ea\u30bb\u30c3\u30c8\u5468\u308a\u3060\u3068\u304b\u3001\u81ea\u524d\u3067\u5b9f\u88c5\u3057\u306a\u304f\u3066\u3044\u3044\u306e\u3067\u4fbf\u5229\u3067\u3059\u306d\uff01\n", "tags": ["Scala", "React"]}