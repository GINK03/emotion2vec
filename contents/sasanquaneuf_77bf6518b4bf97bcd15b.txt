{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u672c\u3092\u8aad\u3093\u3067\u8272\u3005\u306a\u3053\u3068\u3092\u52c9\u5f37\u3057\u306a\u304a\u3057\u3001\u6c17\u306b\u306a\u3063\u305f\u3053\u3068\u3092\u66f8\u304f\u30b7\u30ea\u30fc\u30ba\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30af\u30a4\u30c3\u30af\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff16\u7ae0\u306e\u300c\u30b0\u30e9\u30d5\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u300d\u304c\u30c6\u30fc\u30de\u3067\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001Python\u3067\u8ff7\u8def\u3092\u89e3\u304f\u7ae0\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3069\u3046\u3057\u3066\u3053\u3046\u306a\u3063\u305f\u3002\n\n\u8ff7\u8def\u3092\u89e3\u304f\u65b9\u6cd5\u306b\u3064\u3044\u3066\n\n\u307e\u3048\u304a\u304d\n\u5206\u5c90\u70b9\u3092\u7bc0\u70b9\u3068\u3059\u308b\u30b0\u30e9\u30d5\u306b\u5909\u63db\u3057\u3066\u89e3\u304f\u3001\u3068\u3044\u3046\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u306f\u78ba\u304b\u306b\u305d\u3046\u306a\u306e\u3067\u3059\u304c\u3001\u300c\u4e0e\u3048\u3089\u308c\u305f\u8ff7\u8def\u3092\u3069\u306e\u3088\u3046\u306b\u3057\u3066\u30b0\u30e9\u30d5\u306b\u9084\u5143\u3059\u308b\u304b\u300d\u3068\u3044\u3046\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001\u4eba\u9593\u304c\u3084\u308b\u65b9\u6cd5\u306e\u307f\u8a9e\u3089\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u306a\u306e\u3067\u3001\u8ff7\u8def\u3092\u3067\u304d\u308b\u9650\u308a\u66f8\u304d\u5199\u3057\u305f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u56f3\uff08\u6587\u5b57\u5217\uff09\u3092\u5165\u529b\u3068\u3057\u3066\u3001\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\n\nmaze_input.txt\n$$$$$$$$$$$$$$$$$\n$   $   $       $\n$ $ $ $ $ $$$$$ $\n$ $ $ $ $ $   $ $\n$ $ $ $$$ $ $ $ $\n$ $ $   $ $ $   $\n$ $ $ $ $ $ $$$$$\n$ $ $ $ $t$   $ $\n$ $$$ $ $$$ $ $ $\n$     $     $ $ $\n$ $$$ $ $$$ $ $ $\n$ $   $ $   $   $\n$$$ $$$$$ $$$ $ $\n$   $         $ $\n$ $$$ $$$$$$$$$ $\n$    s          $\n$$$$$$$$$$$$$$$$$\n\n\n\u975e\u5e38\u306b\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3059\u304c\u3001s\u3068t\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u3001\u3053\u308c\u304c\u30b9\u30bf\u30fc\u30c8\u3068\u76ee\u6a19\u5730\u70b9\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e0a\u306e\u56f3\u304b\u3089\u4e0b\u306e\u6587\u5b57\u5217\u3092\u4f5c\u308b\u65b9\u6cd5\u306f\u3001\u8ff7\u8def\u306e\u56f3\u306e\u5404\u30de\u30b9\u3068\u30de\u30b9\u306e\u9593\u306b\u306f\u3001\u5b9f\u306f\u30de\u30b9\u304c\u96a0\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u601d\u3063\u3066\u3001\u5ef6\u9577\u3057\u3066\u3064\u306a\u3050\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3059\u3002\u3064\u307e\u308a\u3001\n\n\u4e0b\u306e\u6587\u5b57\u5217\u3067\u3044\u3046\u3068\u3053\u308d\u306e2i\u884c\u76ee\u30fb2j\u5217\u76ee\u304c\u3001\u4e0a\u306e\u56f3\u3067\u3044\u3046\u3068\u3053\u308d\u306ei\u884c\u76ee\u30fbj\u5217\u76ee\u3068\u5bfe\u5fdc\u3059\u308b\n\u4e0b\u306e\u6587\u5b57\u5217\u306b\u304a\u3051\u308b\u305d\u308c\u4ee5\u5916\u306e\u4f4d\u7f6e\uff08\u305f\u3068\u3048\u30703\u884c3\u5217\u306e$\u8a18\u53f7\uff09\u306f\u3001\u4e0a\u306e\u56f3\u3067\u3044\u3046\u3068\u3053\u308d\u306e\u9ed2\u3044\u7dda\u3084\u3001\u58c1\u304c\u306a\u3044\u5834\u5408\u306f\u30de\u30b9\u3068\u30de\u30b9\u306e\u9593\u306b\u96a0\u308c\u3066\u3044\u308b\u300c\u901a\u8def\u300d\u3068\u5bfe\u5fdc\u3059\u308b\n\n\u3068\u3044\u3046\u3088\u3046\u306a\u5bfe\u5fdc\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5225\u306e\u8a00\u3044\u65b9\u3067\u8aac\u660e\u3059\u308b\u3068\u3001\u683c\u5b50\u72b6\u306e\u30de\u30b9\u76ee\u304c\u3042\u3063\u305f\u3068\u304d\u3001\u7881\u76e4\u306e\u77f3\u306e\u7f6e\u304d\u65b9\u3068\u3001\u5c06\u68cb\u76e4\u306e\u99d2\u306e\u7f6e\u304d\u65b9\u3068\u3001\u4e8c\u7a2e\u985e\u306e\u7f6e\u304d\u65b9\u3092\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001(1)\u30de\u30b9\u306e\u4e2d\u5fc3\u304b(2)\u8fba\u306e\u4e2d\u70b9\u304b(3)\u8fba\u306e\u4ea4\u70b9\u304b\u3001\u3044\u305a\u308c\u304b\u306e\u5834\u6240\u3092\u300c\u77f3\u3084\u99d2\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u6240\u300d\u3068\u8003\u3048\u308b\u3053\u3068\u306b\u3057\u3066\u3001\u3053\u306e\u300c\u77f3\u3084\u99d2\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u6240\u300d\u306b\u9ed2\u3044\u7dda\u304c\u3042\u308c\u3070\"$\"\u3001\u306a\u3051\u308c\u3070\" \"\u3001\u3068\u3044\u3046\u5bfe\u5fdc\u3092\u3055\u305b\u308b\u3053\u3068\u3067\u5f97\u3089\u308c\u307e\u3059\u3002\n\n\u30b0\u30e9\u30d5\u3092\u3064\u304f\u308b\n\u3055\u3066\u3001\u524d\u7f6e\u304d\u304c\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u8ff7\u8def\u304b\u3089\u30b0\u30e9\u30d5\u3092\u5f97\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092Python\u3067\u66f8\u304d\u307e\u3059\u3002\n\nCreateGraph.py\n# \u8ff7\u8def\u3092\u30b0\u30e9\u30d5\u306b\u3059\u308b\uff1a\u672c\u8cea\u7684\u306b\u6df1\u3055\u512a\u5148\u63a2\u7d22\nimport itertools as it\n\ndef isWall(s):\n    return 1 if s == '$' else 0\n\ndef getWalls(arr, i, j):\n    return isWall(arr[i+1][j]) + isWall(arr[i-1][j]) + isWall(arr[i][j+1]) + isWall(arr[i][j-1])\n\ndef getEdge(arr, i, j, edges, v, c):\n    for (a,b) in zip([1,-1,0,0], [0,0,1,-1]):\n        if isWall(arr[i+a][j+b]) == 0:\n            arr[i+a][j+b] = '$'\n            if arr[i+2*a][j+2*b] == 0:\n                vn = v\n                cn = c + 1\n            else:\n                vn = arr[i+2*a][j+2*b]\n                edges.append((v, vn, c))\n                cn = 1\n            getEdge(arr, i+2*a, j+2*b, edges, vn, cn)\n\nvs = 0\nedges = list()\narr = list()\nfor line in open('maze_input.txt', 'r'):\n    arr.append(list(line))\nheight = len(arr)\nwidth = len(arr[height - 1])\ncellidi = range(1,width,2)\ncellidj = range(1,height,2)\nfor i,j in it.product(cellidi, cellidj):\n    if getWalls(arr, i, j) == 2:\n        arr[i][j] = 0\n    elif arr[i][j] == ' ':\n        vs += 1\n        arr[i][j] = vs\n\n# \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u7528\u306e\u8a2d\u5b9a\ngetEdge(arr, 3, 7, edges, 1, 1)\n\n\ngetEdge\u3068\u3044\u3046\u95a2\u6570\u304c\u3001\u672c\u8cea\u7684\u306b\u306f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3063\u3066\u3044\u3066\u3001\u3072\u305f\u3059\u3089\u81ea\u5206\u3068\u96a3\u63a5\u3059\u308b\u30de\u30b9\u3092\u518d\u5e30\u7684\u306b\u51e6\u7406\u3057\u307e\u3059\u3002\u30de\u30b9\u304c\u65e2\u306b\u51e6\u7406\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u306f\u3001\u76e4\u9762\u304c\u5165\u3063\u3066\u3044\u308b\u30ea\u30b9\u30c8arr\u306b\u305d\u306e\u307e\u307e\u66f8\u304d\u8fbc\u3093\u3067\u3044\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u306e\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u3001\u3064\u3044\u3067\u306b\u300c\u8fba\u306e\u9577\u3055\u300d\uff1d\u300c\u6b21\u306e\u4ea4\u5dee\u70b9\u3084\u884c\u304d\u6b62\u307e\u308a\u306b\u884c\u304d\u3064\u304f\u307e\u3067\u306e\u30de\u30b9\u306e\u6570\u300d\u3082\u8a08\u7b97\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u8ff7\u8def\u306e\u30b0\u30e9\u30d5\u306e\u53ef\u8996\u5316\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\nVisualize.py\n# \u53ef\u8996\u5316\nimport networkx as nx\nimport matplotlib.pyplot as plt\nimport math\n\nG = nx.Graph()\nsrcs, dests = zip(* [(fr, to) for (fr, to, d) in edges])\nG.add_nodes_from(srcs + dests)\n\nfor (s,r,d) in edges:\n    G.add_edge(s, r, weight=20/math.sqrt(d))\n\npos = nx.spring_layout(G)\n\nedge_labels=dict([((u,v,),d)\n             for u,v,d in edges])\n\nplt.figure(1)\nnx.draw_networkx(G, pos, with_labels=True)\nnx.draw_networkx_edge_labels(G,pos,edge_labels=edge_labels)\n\nplt.axis('equal')\nplt.show()\n\n\n\n\u5143\u306e\u8ff7\u8def\u3068\u6bd4\u8f03\u3059\u308b\u3068\u3001\u4f4d\u7f6e\u95a2\u4fc2\u304c\u82e5\u5e72\u56de\u8ee2\u3057\u305f\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001s\u3068t\u306e\u4f4d\u7f6e\u95a2\u4fc2\u3092\u30d9\u30fc\u30b9\u306b\u3064\u304b\u3080\u3068\u3001\u305f\u3057\u304b\u306b\u5143\u306e\u8ff7\u8def\u3092\u66f8\u304d\u8d77\u3053\u3057\u305f\u30b0\u30e9\u30d5\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u5f53\u7136\u3067\u3059\u304c\u3001\u672c\u306e\u633f\u7d75\u306e\u56f3\u3068\u3082\u540c\u578b\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u9802\u70b9\u306e\u540d\u79f0\u3092\u9664\u3044\u3066\uff01\uff09\n\n\u3053\u306e\u30b0\u30e9\u30d5\u3067\u5e45\u512a\u5148\u63a2\u7d22\n\u305b\u3063\u304b\u304f\u30b0\u30e9\u30d5\u304c\u5f97\u3089\u308c\u305f\u306e\u3067\u3001\u3053\u306e\u30b0\u30e9\u30d5\u306e\u91cd\u307f\u3065\u3051\uff08\u5b9f\u969b\u306b\u304b\u304b\u308b\u8ddd\u96e2\uff09\u3092\u7121\u8996\u3057\u3066\u3001\u7bc0\u70b9\u306e\u6570\u3060\u3051\u3092\u30d9\u30fc\u30b9\u306b\u6df1\u3055\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059\u3002\n\nBreadthFirst.py\n# \u5e45\u512a\u5148\u63a2\u7d22\nimport copy\n\n# \u8fd1\u508d\u3001\u4f7f\u7528\u6e08\u307f\u30d5\u30e9\u30b0\uff08\u4e16\u4ee3\uff09\u306e\u5b9a\u7fa9\nverts = range(1,vs + 1)\nverts.append('s')\nverts.append('t')\nneighbor = {}\nused = {}\nused['t'] = 0\nfor v in verts:\n    neighbor[v] = {}\n    used[v] = 0\nused['s'] = 1\nfor (s, t, d) in edges:    \n    neighbor[s][t] = d\n    neighbor[t][s] = d\n\nqueue = list()\nqueue.append('s')\nwhile len(queue) > 0:\n    t = queue.pop(0)\n    for n in neighbor[t]:\n        if used[n] == 0:\n            used[n] = used[t] + 1\n            queue.append(n)\n\nused\n\n\n\u6b21\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\uff08\u6539\u884c\u3092\u7701\u7565\uff09\n\n\u7d50\u679c\n{1: 4, 2: 3, 3: 4, 4: 4, 5: 3, 6: 3, 7: 2, 8: 4, 9: 3, 10: 4, \n 11: 5, 12: 3, 13: 2, 14: 2, 's': 1, 't': 5}\n\n\n\u3053\u308c\u3067\u3001s\u3092\u7b2c1\u4e16\u4ee3\u3068\u3057\u305f\u3068\u304d\u306e\u3001\u5404\u7bc0\u70b9\uff1d\u4ea4\u5dee\u70b9\u306e\u300c\u4e16\u4ee3\u300d\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u300c\u305d\u3053\u306b\u884c\u304d\u3064\u304f\u307e\u3067\u306b\u3001\u6700\u4f4e\u4f55\u56de\u8ff7\u3048\u3070\u3088\u3044\u306e\u304b\u300d\u3068\u3044\u3046\u3053\u3068\u306e\u6307\u6a19\u306b\u306a\u308b\u5024\u3067\u3059\u306d\u3002\n\n\u3053\u306e\u30b0\u30e9\u30d5\u3067\u6700\u77ed\u7d4c\u8def\u306e\u63a2\u7d22\uff08\u30ca\u30a4\u30fc\u30d6\u306a\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff09\n\u5143\u306b\u3057\u3066\u3044\u308b\u672c\u3067\u306f\u3001\u6709\u5411\u30b0\u30e9\u30d5\u3067\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u7121\u5411\u30b0\u30e9\u30d5\u3092\u4e21\u65b9\u5411\u306e\u8fba\u306e\u3042\u308b\u30b0\u30e9\u30d5\u3068\u601d\u3046\u3068\u3001\u5168\u304f\u540c\u69d8\u306b\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u30ca\u30a4\u30fc\u30d6\u306a\u611f\u3058\u306e\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001s\u304b\u3089t\u307e\u3067\u306e\u6700\u77ed\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nDijkstra.py\n# \u6700\u77ed\u30b3\u30b9\u30c8\u306e\u7d4c\u8def\u306e\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5\u306b\u3088\u308b\u7b97\u51fa\ncosts = {}\n# costs[v] = (cost, prev, used)\u306e\u7d44\nfor v in verts:\n    costs[v] = (float(\"inf\"),0,0)\ncosts['s'] = (0,-1,0)\n\nqueue = list()\nqueue.append('s')\nwhile len(queue) > 0:\n    t = queue.pop(0)\n    costs[t] = (costs[t][0], costs[t][1], 1)\n    for n in neighbor[t]:\n        if costs[n][2] == 0 and costs[n][0] > neighbor[t][n] + costs[t][0]:\n            costs[n] = (neighbor[t][n] + costs[t][0], t, 0)\n    # queue\u3078\u306e\u5165\u308c\u65b9\u3092\u5de5\u592b\u3059\u308c\u3070\u3082\u3063\u3068\u65e9\u304f\u306a\u308b\u304c\u3001\u3053\u3053\u3067\u306fqueue\u306b\u306f\u6700\u4f4e\u306e\u5024\u3092\u4e00\u3064\u5165\u308c\u308b\u3060\u3051\u306b\u3059\u308b\n    mincost = float(\"inf\")\n    minv = 's'\n    for v in verts:\n        if mincost > costs[v][0] and costs[v][2] == 0:\n            mincost = costs[v][0] \n            minv = v\n    if minv != 's':\n        queue.append(minv)\n\n\n\n\u7d50\u679c\n{1: (13, 2, 1),\n 2: (9, 7, 1),\n 3: (17, 6, 1),\n 4: (7, 9, 1),\n 5: (9, 13, 1),\n 6: (9, 7, 1),\n 7: (7, 's', 1),\n 8: (8, 9, 1),\n 9: (6, 14, 1),\n 10: (10, 6, 1),\n 11: (9, 8, 1),\n 12: (6, 14, 1),\n 13: (7, 's', 1),\n 14: (3, 's', 1),\n 's': (0, -1, 1),\n 't': (20, 4, 1)}\n\n\nqueue\u306e\u3042\u305f\u308a\u304c\u76f8\u5f53\u9069\u5f53\u306a\u5b9f\u88c5\u3067\u3059\u304c\u3001\u51e6\u7406\u3059\u308b\u305f\u3073\u306b\u30b3\u30b9\u30c8\u304c\u6700\u4f4e\u306e\u9802\u70b9\u3092\u4e00\u3064\u3060\u3051append\u3059\u308b\u306e\u3067\u3001\u6b63\u3057\u3044\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\u51fa\u529b\u3055\u308c\u305f\u7d50\u679c\u306f\u3001\u4f8b\u3048\u3070't'\u306e\u884c\u3092\u898b\u308b\u3068(20, 4, 1)\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u30b4\u30fc\u30eb\u3059\u308b\u307e\u3067\u306e\u8ddd\u96e2\uff08\u6b69\u6570\uff09\u304c20\u3067\u3001\u3072\u3068\u3064\u524d\u306e\u4ea4\u5dee\u70b9\u304c\"4\"\u3067\u8868\u3055\u308c\u3066\u3044\u308b\u5834\u6240\u3067\u3042\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u305f\u3069\u308b\u3053\u3068\u3067\u3001\u8ddd\u96e2\u3060\u3051\u3067\u306f\u306a\u304f\u6700\u77ed\u7d4c\u8def\u305d\u306e\u3082\u306e\u3082\u308f\u304b\u308a\u307e\u3059\u3002\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u306b\u3042\u305f\u3063\u3066\u306f\u3058\u3081\u3066\u771f\u9762\u76ee\u306bPython\u3092\u4f7f\u3063\u3066\u307f\u3066\u3001\u6b21\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u30bf\u30d7\u30eb\u3092\u4f7f\u3048\u308b\u306e\u306f\u76f8\u5f53\u697d\n\u30bf\u30d7\u30eb\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092[0]\u3068\u304b[2]\u3068\u304b\u3067\u3084\u308b\u306e\u306f\u3068\u3066\u3082\u96d1\uff08Python\u304c\u60aa\u3044\u3068\u304b\u3044\u3046\u3053\u3068\u3067\u306f\u306a\u3044\uff09\n\nfor\u3067\u306e\u7d44\u307f\u5408\u308f\u305b\u3068\u304b\u3067\u306f\u306a\u304f\u3066\u3001\u9069\u5f53\u306a\u69cb\u9020\u4f53\u3082\u3069\u304d\u307f\u305f\u3044\u306a\u4f7f\u3044\u65b9\u3092\u3059\u308b\u3068\u304d\u306f\u3001\u3084\u306f\u308a\u69cb\u9020\u4f53\u7684\u306a\u4f55\u304b\u3068\u3057\u3066\u304d\u3061\u3093\u3068\u5b9a\u7fa9\u3059\u3079\u304d\u306a\u306e\u304b\u306a\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u304a\u3057\u307e\u3044\n\u305d\u306e\u4ed6\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u3001\u3068\u308a\u3042\u3048\u305a\u5272\u611b\u3057\u307e\u3059\u3002\u3053\u306e\u30b0\u30e9\u30d5\u306b\u3064\u3044\u3066\u30d5\u30ed\u30a4\u30c9\u30fb\u30ef\u30fc\u30b7\u30e3\u30eb\u6cd5\u3092\u9069\u7528\u3057\u305f\u308a\u3001\u30d7\u30ea\u30e0\u6cd5\u3092\u9069\u7528\u3057\u305f\u308a\u3001\u3068\u3044\u3046\u306e\u3082\u3067\u304d\u307e\u3059\u304c\u30017\u7ae0\u30848\u7ae0\u306b\u6642\u9593\u3092\u4f7f\u3063\u3066\u304b\u3089\u3001\u4f59\u88d5\u304c\u3042\u308c\u3070\u8003\u3048\u305f\u65b9\u304c\u3088\u3044\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u30b7\u30ea\u30fc\u30ba\u306b\u306f\u3001\u4ed6\u306b\u6b21\u306e\u3088\u3046\u306a\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\u30d0\u30b1\u30c4\u30bd\u30fc\u30c8\u3068n log n\u306e\u58c1 - \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30af\u30a4\u30c3\u30af\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff14\u7ae0\u306e\u88dc\u8db3 - \u203bRuby\n\u63a2\u7d22\u3068\u8a08\u7b97\u306e\u5206\u5272 - \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30af\u30a4\u30c3\u30af\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff15\u7ae0\u306e\u88dc\u8db3 - \u203bPython\n\u3010\u3053\u306e\u8a18\u4e8b\u2192\u3011Python\u3067\u8ff7\u8def\u3092\u89e3\u304f - \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30af\u30a4\u30c3\u30af\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff16\u7ae0\u306e\u88dc\u8db3 - \u203bPython\n\u30d5\u30a9\u30fc\u30c9\u30fb\u30d5\u30a1\u30eb\u30ab\u30fc\u30bd\u30f3\u6cd5\u3068\u305d\u306e\u5fdc\u7528 - \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30af\u30a4\u30c3\u30af\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff18\u7ae0\u306e\u88dc\u8db3 - \u203bPython\n# \u6982\u8981\n\u672c\u3092\u8aad\u3093\u3067\u8272\u3005\u306a\u3053\u3068\u3092\u52c9\u5f37\u3057\u306a\u304a\u3057\u3001\u6c17\u306b\u306a\u3063\u305f\u3053\u3068\u3092\u66f8\u304f\u30b7\u30ea\u30fc\u30ba\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3001[\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30af\u30a4\u30c3\u30af\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](http://www.amazon.co.jp/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%AF%E3%82%A4%E3%83%83%E3%82%AF%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9-George-T-Heineman/dp/4873114284)\uff16\u7ae0\u306e\u300c\u30b0\u30e9\u30d5\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u300d\u304c\u30c6\u30fc\u30de\u3067\u3059\u3002\n\u5177\u4f53\u7684\u306b\u306f\u3001Python\u3067\u8ff7\u8def\u3092\u89e3\u304f\u7ae0\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3069\u3046\u3057\u3066\u3053\u3046\u306a\u3063\u305f\u3002\n\n# \u8ff7\u8def\u3092\u89e3\u304f\u65b9\u6cd5\u306b\u3064\u3044\u3066\n## \u307e\u3048\u304a\u304d\n\u5206\u5c90\u70b9\u3092\u7bc0\u70b9\u3068\u3059\u308b\u30b0\u30e9\u30d5\u306b\u5909\u63db\u3057\u3066\u89e3\u304f\u3001\u3068\u3044\u3046\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u305d\u308c\u306f\u78ba\u304b\u306b\u305d\u3046\u306a\u306e\u3067\u3059\u304c\u3001\u300c\u4e0e\u3048\u3089\u308c\u305f\u8ff7\u8def\u3092\u3069\u306e\u3088\u3046\u306b\u3057\u3066\u30b0\u30e9\u30d5\u306b\u9084\u5143\u3059\u308b\u304b\u300d\u3068\u3044\u3046\u90e8\u5206\u306b\u3064\u3044\u3066\u306f\u3001\u4eba\u9593\u304c\u3084\u308b\u65b9\u6cd5\u306e\u307f\u8a9e\u3089\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n![python_6_0.PNG](https://qiita-image-store.s3.amazonaws.com/0/94255/7764070d-7bf3-f19e-2de5-18f9dbbbcfe3.png)\n\u306a\u306e\u3067\u3001\u8ff7\u8def\u3092\u3067\u304d\u308b\u9650\u308a\u66f8\u304d\u5199\u3057\u305f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u56f3\uff08\u6587\u5b57\u5217\uff09\u3092\u5165\u529b\u3068\u3057\u3066\u3001\u30b0\u30e9\u30d5\u3092\u4f5c\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059\u3002\n\n```text:maze_input.txt\n$$$$$$$$$$$$$$$$$\n$   $   $       $\n$ $ $ $ $ $$$$$ $\n$ $ $ $ $ $   $ $\n$ $ $ $$$ $ $ $ $\n$ $ $   $ $ $   $\n$ $ $ $ $ $ $$$$$\n$ $ $ $ $t$   $ $\n$ $$$ $ $$$ $ $ $\n$     $     $ $ $\n$ $$$ $ $$$ $ $ $\n$ $   $ $   $   $\n$$$ $$$$$ $$$ $ $\n$   $         $ $\n$ $$$ $$$$$$$$$ $\n$    s          $\n$$$$$$$$$$$$$$$$$\n```\n\u975e\u5e38\u306b\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3059\u304c\u3001s\u3068t\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u3001\u3053\u308c\u304c\u30b9\u30bf\u30fc\u30c8\u3068\u76ee\u6a19\u5730\u70b9\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e0a\u306e\u56f3\u304b\u3089\u4e0b\u306e\u6587\u5b57\u5217\u3092\u4f5c\u308b\u65b9\u6cd5\u306f\u3001**\u8ff7\u8def\u306e\u56f3\u306e\u5404\u30de\u30b9\u3068\u30de\u30b9\u306e\u9593\u306b\u306f\u3001\u5b9f\u306f\u30de\u30b9\u304c\u96a0\u308c\u3066\u3044\u308b\u3082\u306e\u3068\u601d\u3063\u3066\u3001\u5ef6\u9577\u3057\u3066\u3064\u306a\u3050**\u3068\u3044\u3046\u65b9\u6cd5\u3067\u3059\u3002\u3064\u307e\u308a\u3001\n\n- \u4e0b\u306e\u6587\u5b57\u5217\u3067\u3044\u3046\u3068\u3053\u308d\u306e2i\u884c\u76ee\u30fb2j\u5217\u76ee\u304c\u3001\u4e0a\u306e\u56f3\u3067\u3044\u3046\u3068\u3053\u308d\u306ei\u884c\u76ee\u30fbj\u5217\u76ee\u3068\u5bfe\u5fdc\u3059\u308b\n- \u4e0b\u306e\u6587\u5b57\u5217\u306b\u304a\u3051\u308b\u305d\u308c\u4ee5\u5916\u306e\u4f4d\u7f6e\uff08\u305f\u3068\u3048\u30703\u884c3\u5217\u306e$\u8a18\u53f7\uff09\u306f\u3001\u4e0a\u306e\u56f3\u3067\u3044\u3046\u3068\u3053\u308d\u306e\u9ed2\u3044\u7dda\u3084\u3001\u58c1\u304c\u306a\u3044\u5834\u5408\u306f\u30de\u30b9\u3068\u30de\u30b9\u306e\u9593\u306b\u96a0\u308c\u3066\u3044\u308b\u300c\u901a\u8def\u300d\u3068\u5bfe\u5fdc\u3059\u308b\n\n\u3068\u3044\u3046\u3088\u3046\u306a\u5bfe\u5fdc\u3092\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5225\u306e\u8a00\u3044\u65b9\u3067\u8aac\u660e\u3059\u308b\u3068\u3001\u683c\u5b50\u72b6\u306e\u30de\u30b9\u76ee\u304c\u3042\u3063\u305f\u3068\u304d\u3001\u7881\u76e4\u306e\u77f3\u306e\u7f6e\u304d\u65b9\u3068\u3001\u5c06\u68cb\u76e4\u306e\u99d2\u306e\u7f6e\u304d\u65b9\u3068\u3001\u4e8c\u7a2e\u985e\u306e\u7f6e\u304d\u65b9\u3092\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001(1)\u30de\u30b9\u306e\u4e2d\u5fc3\u304b(2)\u8fba\u306e\u4e2d\u70b9\u304b(3)\u8fba\u306e\u4ea4\u70b9\u304b\u3001\u3044\u305a\u308c\u304b\u306e\u5834\u6240\u3092\u300c\u77f3\u3084\u99d2\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u6240\u300d\u3068\u8003\u3048\u308b\u3053\u3068\u306b\u3057\u3066\u3001\u3053\u306e\u300c\u77f3\u3084\u99d2\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u5834\u6240\u300d\u306b\u9ed2\u3044\u7dda\u304c\u3042\u308c\u3070\"$\"\u3001\u306a\u3051\u308c\u3070\" \"\u3001\u3068\u3044\u3046\u5bfe\u5fdc\u3092\u3055\u305b\u308b\u3053\u3068\u3067\u5f97\u3089\u308c\u307e\u3059\u3002\n\n## \u30b0\u30e9\u30d5\u3092\u3064\u304f\u308b\n\u3055\u3066\u3001\u524d\u7f6e\u304d\u304c\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u8ff7\u8def\u304b\u3089\u30b0\u30e9\u30d5\u3092\u5f97\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092Python\u3067\u66f8\u304d\u307e\u3059\u3002\n\n```py:CreateGraph.py\n# \u8ff7\u8def\u3092\u30b0\u30e9\u30d5\u306b\u3059\u308b\uff1a\u672c\u8cea\u7684\u306b\u6df1\u3055\u512a\u5148\u63a2\u7d22\nimport itertools as it\n\ndef isWall(s):\n    return 1 if s == '$' else 0\n\ndef getWalls(arr, i, j):\n    return isWall(arr[i+1][j]) + isWall(arr[i-1][j]) + isWall(arr[i][j+1]) + isWall(arr[i][j-1])\n\ndef getEdge(arr, i, j, edges, v, c):\n    for (a,b) in zip([1,-1,0,0], [0,0,1,-1]):\n        if isWall(arr[i+a][j+b]) == 0:\n            arr[i+a][j+b] = '$'\n            if arr[i+2*a][j+2*b] == 0:\n                vn = v\n                cn = c + 1\n            else:\n                vn = arr[i+2*a][j+2*b]\n                edges.append((v, vn, c))\n                cn = 1\n            getEdge(arr, i+2*a, j+2*b, edges, vn, cn)\n\nvs = 0\nedges = list()\narr = list()\nfor line in open('maze_input.txt', 'r'):\n    arr.append(list(line))\nheight = len(arr)\nwidth = len(arr[height - 1])\ncellidi = range(1,width,2)\ncellidj = range(1,height,2)\nfor i,j in it.product(cellidi, cellidj):\n    if getWalls(arr, i, j) == 2:\n        arr[i][j] = 0\n    elif arr[i][j] == ' ':\n        vs += 1\n        arr[i][j] = vs\n\n# \u4eca\u56de\u306e\u30c7\u30fc\u30bf\u7528\u306e\u8a2d\u5b9a\ngetEdge(arr, 3, 7, edges, 1, 1)\n```\n\ngetEdge\u3068\u3044\u3046\u95a2\u6570\u304c\u3001\u672c\u8cea\u7684\u306b\u306f\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3092\u884c\u3063\u3066\u3044\u3066\u3001\u3072\u305f\u3059\u3089\u81ea\u5206\u3068\u96a3\u63a5\u3059\u308b\u30de\u30b9\u3092\u518d\u5e30\u7684\u306b\u51e6\u7406\u3057\u307e\u3059\u3002\u30de\u30b9\u304c\u65e2\u306b\u51e6\u7406\u3055\u308c\u305f\u304b\u3069\u3046\u304b\u306f\u3001\u76e4\u9762\u304c\u5165\u3063\u3066\u3044\u308b\u30ea\u30b9\u30c8arr\u306b\u305d\u306e\u307e\u307e\u66f8\u304d\u8fbc\u3093\u3067\u3044\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u3053\u306e\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306b\u3001\u3064\u3044\u3067\u306b\u300c\u8fba\u306e\u9577\u3055\u300d\uff1d\u300c\u6b21\u306e\u4ea4\u5dee\u70b9\u3084\u884c\u304d\u6b62\u307e\u308a\u306b\u884c\u304d\u3064\u304f\u307e\u3067\u306e\u30de\u30b9\u306e\u6570\u300d\u3082\u8a08\u7b97\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n## \u8ff7\u8def\u306e\u30b0\u30e9\u30d5\u306e\u53ef\u8996\u5316\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u53ef\u8996\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py:Visualize.py\n# \u53ef\u8996\u5316\nimport networkx as nx\nimport matplotlib.pyplot as plt\nimport math\n\nG = nx.Graph()\nsrcs, dests = zip(* [(fr, to) for (fr, to, d) in edges])\nG.add_nodes_from(srcs + dests)\n\nfor (s,r,d) in edges:\n    G.add_edge(s, r, weight=20/math.sqrt(d))\n\npos = nx.spring_layout(G)\n\nedge_labels=dict([((u,v,),d)\n             for u,v,d in edges])\n\nplt.figure(1)\nnx.draw_networkx(G, pos, with_labels=True)\nnx.draw_networkx_edge_labels(G,pos,edge_labels=edge_labels)\n\nplt.axis('equal')\nplt.show()\n```\n![python_6_3.PNG](https://qiita-image-store.s3.amazonaws.com/0/94255/a8a89d37-a9f7-99a3-dd53-ae8135201454.png)\n\n\u5143\u306e\u8ff7\u8def\u3068\u6bd4\u8f03\u3059\u308b\u3068\u3001\u4f4d\u7f6e\u95a2\u4fc2\u304c\u82e5\u5e72\u56de\u8ee2\u3057\u305f\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001s\u3068t\u306e\u4f4d\u7f6e\u95a2\u4fc2\u3092\u30d9\u30fc\u30b9\u306b\u3064\u304b\u3080\u3068\u3001\u305f\u3057\u304b\u306b\u5143\u306e\u8ff7\u8def\u3092\u66f8\u304d\u8d77\u3053\u3057\u305f\u30b0\u30e9\u30d5\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u5f53\u7136\u3067\u3059\u304c\u3001\u672c\u306e\u633f\u7d75\u306e\u56f3\u3068\u3082\u540c\u578b\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u9802\u70b9\u306e\u540d\u79f0\u3092\u9664\u3044\u3066\uff01\uff09\n\n## \u3053\u306e\u30b0\u30e9\u30d5\u3067\u5e45\u512a\u5148\u63a2\u7d22\n\u305b\u3063\u304b\u304f\u30b0\u30e9\u30d5\u304c\u5f97\u3089\u308c\u305f\u306e\u3067\u3001\u3053\u306e\u30b0\u30e9\u30d5\u306e\u91cd\u307f\u3065\u3051\uff08\u5b9f\u969b\u306b\u304b\u304b\u308b\u8ddd\u96e2\uff09\u3092\u7121\u8996\u3057\u3066\u3001\u7bc0\u70b9\u306e\u6570\u3060\u3051\u3092\u30d9\u30fc\u30b9\u306b\u6df1\u3055\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py:BreadthFirst.py\n# \u5e45\u512a\u5148\u63a2\u7d22\nimport copy\n\n# \u8fd1\u508d\u3001\u4f7f\u7528\u6e08\u307f\u30d5\u30e9\u30b0\uff08\u4e16\u4ee3\uff09\u306e\u5b9a\u7fa9\nverts = range(1,vs + 1)\nverts.append('s')\nverts.append('t')\nneighbor = {}\nused = {}\nused['t'] = 0\nfor v in verts:\n    neighbor[v] = {}\n    used[v] = 0\nused['s'] = 1\nfor (s, t, d) in edges:    \n    neighbor[s][t] = d\n    neighbor[t][s] = d\n\nqueue = list()\nqueue.append('s')\nwhile len(queue) > 0:\n    t = queue.pop(0)\n    for n in neighbor[t]:\n        if used[n] == 0:\n            used[n] = used[t] + 1\n            queue.append(n)\n\nused\n```\n\u6b21\u306e\u3088\u3046\u306a\u51fa\u529b\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\uff08\u6539\u884c\u3092\u7701\u7565\uff09\n\n```text:\u7d50\u679c\n{1: 4, 2: 3, 3: 4, 4: 4, 5: 3, 6: 3, 7: 2, 8: 4, 9: 3, 10: 4, \n 11: 5, 12: 3, 13: 2, 14: 2, 's': 1, 't': 5}\n```\n\u3053\u308c\u3067\u3001s\u3092\u7b2c1\u4e16\u4ee3\u3068\u3057\u305f\u3068\u304d\u306e\u3001\u5404\u7bc0\u70b9\uff1d\u4ea4\u5dee\u70b9\u306e\u300c\u4e16\u4ee3\u300d\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u300c\u305d\u3053\u306b\u884c\u304d\u3064\u304f\u307e\u3067\u306b\u3001\u6700\u4f4e\u4f55\u56de\u8ff7\u3048\u3070\u3088\u3044\u306e\u304b\u300d\u3068\u3044\u3046\u3053\u3068\u306e\u6307\u6a19\u306b\u306a\u308b\u5024\u3067\u3059\u306d\u3002\n\n## \u3053\u306e\u30b0\u30e9\u30d5\u3067\u6700\u77ed\u7d4c\u8def\u306e\u63a2\u7d22\uff08\u30ca\u30a4\u30fc\u30d6\u306a\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff09\n\u5143\u306b\u3057\u3066\u3044\u308b\u672c\u3067\u306f\u3001\u6709\u5411\u30b0\u30e9\u30d5\u3067\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u7121\u5411\u30b0\u30e9\u30d5\u3092\u4e21\u65b9\u5411\u306e\u8fba\u306e\u3042\u308b\u30b0\u30e9\u30d5\u3068\u601d\u3046\u3068\u3001\u5168\u304f\u540c\u69d8\u306b\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u9069\u7528\u3067\u304d\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u3001\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u30ca\u30a4\u30fc\u30d6\u306a\u611f\u3058\u306e\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001s\u304b\u3089t\u307e\u3067\u306e\u6700\u77ed\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```py:Dijkstra.py\n# \u6700\u77ed\u30b3\u30b9\u30c8\u306e\u7d4c\u8def\u306e\u30c0\u30a4\u30af\u30b9\u30c8\u30e9\u6cd5\u306b\u3088\u308b\u7b97\u51fa\ncosts = {}\n# costs[v] = (cost, prev, used)\u306e\u7d44\nfor v in verts:\n    costs[v] = (float(\"inf\"),0,0)\ncosts['s'] = (0,-1,0)\n\nqueue = list()\nqueue.append('s')\nwhile len(queue) > 0:\n    t = queue.pop(0)\n    costs[t] = (costs[t][0], costs[t][1], 1)\n    for n in neighbor[t]:\n        if costs[n][2] == 0 and costs[n][0] > neighbor[t][n] + costs[t][0]:\n            costs[n] = (neighbor[t][n] + costs[t][0], t, 0)\n    # queue\u3078\u306e\u5165\u308c\u65b9\u3092\u5de5\u592b\u3059\u308c\u3070\u3082\u3063\u3068\u65e9\u304f\u306a\u308b\u304c\u3001\u3053\u3053\u3067\u306fqueue\u306b\u306f\u6700\u4f4e\u306e\u5024\u3092\u4e00\u3064\u5165\u308c\u308b\u3060\u3051\u306b\u3059\u308b\n    mincost = float(\"inf\")\n    minv = 's'\n    for v in verts:\n        if mincost > costs[v][0] and costs[v][2] == 0:\n            mincost = costs[v][0] \n            minv = v\n    if minv != 's':\n        queue.append(minv)\n```\n\n```text:\u7d50\u679c\n{1: (13, 2, 1),\n 2: (9, 7, 1),\n 3: (17, 6, 1),\n 4: (7, 9, 1),\n 5: (9, 13, 1),\n 6: (9, 7, 1),\n 7: (7, 's', 1),\n 8: (8, 9, 1),\n 9: (6, 14, 1),\n 10: (10, 6, 1),\n 11: (9, 8, 1),\n 12: (6, 14, 1),\n 13: (7, 's', 1),\n 14: (3, 's', 1),\n 's': (0, -1, 1),\n 't': (20, 4, 1)}\n```\n\nqueue\u306e\u3042\u305f\u308a\u304c\u76f8\u5f53\u9069\u5f53\u306a\u5b9f\u88c5\u3067\u3059\u304c\u3001\u51e6\u7406\u3059\u308b\u305f\u3073\u306b\u30b3\u30b9\u30c8\u304c\u6700\u4f4e\u306e\u9802\u70b9\u3092\u4e00\u3064\u3060\u3051append\u3059\u308b\u306e\u3067\u3001\u6b63\u3057\u3044\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\u51fa\u529b\u3055\u308c\u305f\u7d50\u679c\u306f\u3001\u4f8b\u3048\u3070't'\u306e\u884c\u3092\u898b\u308b\u3068`(20, 4, 1)`\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u30b4\u30fc\u30eb\u3059\u308b\u307e\u3067\u306e\u8ddd\u96e2\uff08\u6b69\u6570\uff09\u304c20\u3067\u3001\u3072\u3068\u3064\u524d\u306e\u4ea4\u5dee\u70b9\u304c\"4\"\u3067\u8868\u3055\u308c\u3066\u3044\u308b\u5834\u6240\u3067\u3042\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u305f\u3069\u308b\u3053\u3068\u3067\u3001\u8ddd\u96e2\u3060\u3051\u3067\u306f\u306a\u304f\u6700\u77ed\u7d4c\u8def\u305d\u306e\u3082\u306e\u3082\u308f\u304b\u308a\u307e\u3059\u3002\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u306b\u3042\u305f\u3063\u3066\u306f\u3058\u3081\u3066\u771f\u9762\u76ee\u306bPython\u3092\u4f7f\u3063\u3066\u307f\u3066\u3001\u6b21\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u601d\u3044\u307e\u3057\u305f\u3002\n\n- \u30bf\u30d7\u30eb\u3092\u4f7f\u3048\u308b\u306e\u306f\u76f8\u5f53\u697d\n- \u30bf\u30d7\u30eb\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092[0]\u3068\u304b[2]\u3068\u304b\u3067\u3084\u308b\u306e\u306f\u3068\u3066\u3082\u96d1\uff08Python\u304c\u60aa\u3044\u3068\u304b\u3044\u3046\u3053\u3068\u3067\u306f\u306a\u3044\uff09\n\n`for`\u3067\u306e\u7d44\u307f\u5408\u308f\u305b\u3068\u304b\u3067\u306f\u306a\u304f\u3066\u3001\u9069\u5f53\u306a\u69cb\u9020\u4f53\u3082\u3069\u304d\u307f\u305f\u3044\u306a\u4f7f\u3044\u65b9\u3092\u3059\u308b\u3068\u304d\u306f\u3001\u3084\u306f\u308a\u69cb\u9020\u4f53\u7684\u306a\u4f55\u304b\u3068\u3057\u3066\u304d\u3061\u3093\u3068\u5b9a\u7fa9\u3059\u3079\u304d\u306a\u306e\u304b\u306a\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u601d\u3044\u307e\u3057\u305f\u3002\n\n# \u304a\u3057\u307e\u3044\n\u305d\u306e\u4ed6\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306f\u3001\u3068\u308a\u3042\u3048\u305a\u5272\u611b\u3057\u307e\u3059\u3002\u3053\u306e\u30b0\u30e9\u30d5\u306b\u3064\u3044\u3066\u30d5\u30ed\u30a4\u30c9\u30fb\u30ef\u30fc\u30b7\u30e3\u30eb\u6cd5\u3092\u9069\u7528\u3057\u305f\u308a\u3001\u30d7\u30ea\u30e0\u6cd5\u3092\u9069\u7528\u3057\u305f\u308a\u3001\u3068\u3044\u3046\u306e\u3082\u3067\u304d\u307e\u3059\u304c\u30017\u7ae0\u30848\u7ae0\u306b\u6642\u9593\u3092\u4f7f\u3063\u3066\u304b\u3089\u3001\u4f59\u88d5\u304c\u3042\u308c\u3070\u8003\u3048\u305f\u65b9\u304c\u3088\u3044\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u30b7\u30ea\u30fc\u30ba\u306b\u306f\u3001\u4ed6\u306b\u6b21\u306e\u3088\u3046\u306a\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n[\u30d0\u30b1\u30c4\u30bd\u30fc\u30c8\u3068n log n\u306e\u58c1 - \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30af\u30a4\u30c3\u30af\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff14\u7ae0\u306e\u88dc\u8db3 -](http://qiita.com/sasanquaneuf/items/39d00e6f49d87643d472) \u203bRuby\n[\u63a2\u7d22\u3068\u8a08\u7b97\u306e\u5206\u5272 - \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30af\u30a4\u30c3\u30af\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff15\u7ae0\u306e\u88dc\u8db3 -](http://qiita.com/sasanquaneuf/items/b59c0debd68e197694f8) \u203bPython\n\u3010\u3053\u306e\u8a18\u4e8b\u2192\u3011[Python\u3067\u8ff7\u8def\u3092\u89e3\u304f - \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30af\u30a4\u30c3\u30af\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff16\u7ae0\u306e\u88dc\u8db3 -](http://qiita.com/sasanquaneuf/items/77bf6518b4bf97bcd15b) \u203bPython\n[\u30d5\u30a9\u30fc\u30c9\u30fb\u30d5\u30a1\u30eb\u30ab\u30fc\u30bd\u30f3\u6cd5\u3068\u305d\u306e\u5fdc\u7528 - \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30af\u30a4\u30c3\u30af\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff18\u7ae0\u306e\u88dc\u8db3 -](http://qiita.com/sasanquaneuf/items/14a4c6459813abf6ccbd) \u203bPython\n", "tags": ["Python", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "\u63a2\u7d22", "\u30b0\u30e9\u30d5"]}