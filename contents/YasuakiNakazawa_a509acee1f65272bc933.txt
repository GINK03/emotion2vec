{"context": "Suica/PASUMO \u306e\u5238\u9762\u306b\u5370\u5b57\u3055\u308c\u305f\u60c5\u5831\u304c NFC \u306e\u6a5f\u80fd\u3067\u53d6\u5f97\u3067\u304d\u308b\u306e\u304b\u8abf\u67fb\u3057\u305f\u6642\u306e Android \u3067\u306e\u5b9f\u88c5\u3092\u307e\u3068\u3081\u305f\u3082\u306e \u3067\u3059\u3002\n\u4ee5\u524d\u66f8\u3044\u305f [PASUMO] FeliCa \u304b\u3089\u60c5\u5831\u3092\u5438\u3044\u51fa\u3057\u3066\u307f\u308b - FeliCa\u306e\u4ed5\u69d8\u7de8 [Android][Kotlin] \u306e\u5b9f\u88c5\u7de8\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u79c1\u306f PASUMO \u30e6\u30fc\u30b6\u306a\u306e\u3067\u3001PASUMO \u3067\u306e\u8abf\u67fb\u30ed\u30b0\u306b\u306a\u308a\u307e\u3059\u3053\u3068\u3092\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002\n\u6b21\u306e\u3053\u3068\u3092\u307e\u3068\u3081\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\nAndroid \u3067 FeliCa \u3092\u6271\u3046\u3068\u304d\u306b\u51fa\u3066\u304f\u308b\u30af\u30e9\u30b9\u9054\u306e\u7d39\u4ecb\n\u5b9f\u88c5\u306b\u3064\u3044\u3066\n\u60a9\u307f\u3069\u3053\u308d\n\u958b\u767a\u6642\u306b\u6c17\u3092\u3064\u3051\u308b\u3053\u3068\n\n\u203b NFC \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3044\u304f\u3064\u304b\u3042\u3063\u3066\u3001\u4ed5\u69d8\u7de8\u3067\u3082\u53c2\u8003\u5143\u30ea\u30f3\u30af\u3068\u3057\u3066\u8cbc\u3063\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u306f\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u3002Android\u6a19\u6e96\u30aa\u30f3\u30ea\u30fc\u3067\u3059\u3002\n\u203b Suica/PASUMO \u306a\u3069\u306e\u9244\u9053\u7cfb\u30ab\u30fc\u30c9\u306e\u5185\u90e8\u4ed5\u69d8\u306f \u975e\u516c\u958b \u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3001\u516c\u5f0f\u306a\u60c5\u5831\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u3084\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306a\u3069\u306e\u56fa\u5b9a\u5024\u304c\u51fa\u3066\u304d\u307e\u3059\u304c\u3001\u6709\u5fd7\u304c\u96c6\u3081\u305f\u60c5\u5831\u3092\u5143\u306b\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\nAndroid \u3067 FeliCa \u3092\u6271\u3046\u3068\u304d\u306b\u51fa\u3066\u304f\u308b\u30af\u30e9\u30b9\u9054\u306e\u7d39\u4ecb\nFeliCa \u7528\u3068\u3044\u3046\u304b\u3001NFC \u7528\u306e\u30af\u30e9\u30b9\u306f\u6b21\u306e3\u3064\u3067\u3059\u3002\n\nandroid.nfc.NfcAdapter\nandroid.nfc.Tag\nandroid.nfc.tech.NfcF\n\n\u305d\u308c\u305e\u308c\u306e\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002\n\nandroid.nfc.NfcAdapter\n\nNFC\u30c7\u30d0\u30a4\u30b9\uff08Suica \u3060\u3068\u304b\u306e\u30ab\u30fc\u30c9\uff09\u306e\u691c\u51fa\u3092\u958b\u59cb/\u505c\u6b62\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u5236\u5fa1\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u306a\u308b\u306e\u3067\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b Context \u3092\u8981\u6c42\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u305b\u305a\u3068\u3082 AndroidManifest.xml \u306b\u3066 Activity \u306a\u308a Receiver \u3092\u5b9a\u7fa9\u3057\u3066 intent-filter \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u4ee3\u66ff\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u4f7f\u3044\u5206\u3051\u3068\u3057\u3066\u306f\u3001\u30a2\u30d7\u30ea\u304c\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u306e\u72b6\u614b\u3067 NFC\u30c7\u30d0\u30a4\u30b9\u3092\u691c\u51fa\u3057\u305f\u3044\u6642 \u306b\u3001\u3053\u306e\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\u3002\n\u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306e\u72b6\u614b\u3067 NFC\u30c7\u30d0\u30a4\u30b9\u3092\u691c\u51fa\u3057\u305f\u3044\u6642 \u306f\u3001AndroidManifest.xml \u3078\u306e\u5b9a\u7fa9\u3092\u3057\u307e\u3059\u3002\n\u3044\u305a\u308c\u3082\u3001\u76ee\u7684\u306f Tag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\nandroid.nfc.Tag\n\n\u691c\u51fa\u3057\u305f NFC\u30c7\u30d0\u30a4\u30b9\u3092\u8868\u3059\u30e2\u30c7\u30eb\u3067\u3059\u3002\n\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3057\u3066\u3001NFC\u30c7\u30d0\u30a4\u30b9\u3068\u3084\u308a\u3068\u308a\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e Tag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f ID \u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\nAndroid \u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e getId() \u306e\u8aac\u660e\u306b\u3001\u6b21\u306e\u8a18\u8f09\u304c\u3042\u308a\u307e\u3059\u3002\nGet the Tag Identifier (if it has one).\n\nThe tag identifier is a low level serial number, used for anti-collision and identification.\n\nMost tags have a stable unique identifier (UID), but some tags will generate a random ID every time they are discovered (RID), and there are some tags with no ID at all (the byte array will be zero-sized).\n\nThe size and format of an ID is specific to the RF technology used by the tag.\n\nThis function retrieves the ID as determined at discovery time, and does not perform any further RF communication or block.\n\n\u771f\u3093\u4e2d\u3042\u305f\u308a\u306e\u6587\u304c\u3068\u3066\u3082\u4e0d\u5b89\u3092\u611f\u3058\u3055\u305b\u307e\u3059\u3002\nGoogle\u7ffb\u8a33\u306b\u304b\u3051\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u307b\u3068\u3093\u3069\u306e\u30bf\u30b0\u306f\u5b89\u5b9a\u3057\u305f\u30e6\u30cb\u30fc\u30af\u306a\u8b58\u5225\u5b50\uff08UID\uff09\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3044\u304f\u3064\u304b\u306e\u30bf\u30b0\u306f\u767a\u898b\u3055\u308c\u308b\u305f\u3073\u306b\u30e9\u30f3\u30c0\u30e0\u306aID\u3092\u751f\u6210\u3057\u3001ID\u306e\u306a\u3044\u30bf\u30b0\u3082\u3042\u308a\u307e\u3059\uff08\u30d0\u30a4\u30c8\u914d\u5217\u306f\u30bc\u30ed\u30b5\u30a4\u30ba\u306b\u306a\u308a\u307e\u3059\uff09\u3002\n\n\u3053\u308c\u306b\u95a2\u3057\u3066\u306f\u3001NFC-Developer.com: FeliCa IDm\u3068\u306f\uff1f \u306b\u3042\u308b\u3088\u3046\u306b\u3001\u516c\u5171\u306e\u96fb\u5b50\u30de\u30cd\u30fc\u30b5\u30fc\u30d3\u30b9\u3067\u306f\u3053\u306eIDm\u3084UID\u306f\u5229\u7528\u3055\u308c\u3066\u3044\u306a\u3044 \u3089\u3057\u3044\u3067\u3059\u3002\u304a\u305d\u3089\u304f\u3053\u308c\u3089\u306e\u3053\u3068\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u203b \u5b9f\u969b\u306b\u5229\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u30ab\u30fc\u30c9\u304c\u624b\u5143\u306b\u306a\u3055\u305d\u3046\u3067\u3001\u8a73\u7d30\u3092\u8ffd\u3048\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u30fb\u3002\n\nandroid.nfc.tech.NfcF\n\n\u3053\u306e\u30af\u30e9\u30b9\u306f NFC-F \u898f\u683c\u306e NFC\u30c7\u30d0\u30a4\u30b9\u306e\u8a73\u7d30\u3092\u6301\u3064\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u691c\u51fa\u5bfe\u8c61\u306e NFC\u30c7\u30d0\u30a4\u30b9\u306e\u898f\u683c\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u969b\u306b\u306f\u3001\u3053\u306e\u30af\u30e9\u30b9\u306e FQDN \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\u3053\u306e\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u306b\u306f\u3001\u524d\u8ff0\u306e Tag \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002\nNfcF \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5229\u7528\u3057\u3001NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e \u901a\u4fe1\u306e\u958b\u59cb/\u7d42\u4e86 \u3068 \u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4fe1 \u3092\u3057\u307e\u3059\u3002\n\n\u5b9f\u88c5\u306b\u3064\u3044\u3066\n\u6d41\u308c\u3068\u3057\u3066\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nTag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3059\u308b\nNFC \u30c7\u30d0\u30a4\u30b9\u306e\u691c\u51fa\u3092\u53d7\u3051\u53d6\u308b\n\n\nTag \u304b\u3089 NfcF \u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\nNfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u901a\u3057\u3066 NFC\u30c7\u30d0\u30a4\u30b9\u3068\u63a5\u7d9a\u3059\u308b\n\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u6b32\u3057\u3044\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\nNfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u901a\u3057\u3066 NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\n\n\n\n\u307e\u305a 2-3 \u306e\u8a73\u7d30\u4ee5\u5916\u306e\u5927\u67a0\u90e8\u5206\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\nTag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3059\u308b\n\u203b \u308f\u305f\u3057\u306f NFC\u30c7\u30d0\u30a4\u30b9\u306e\u691c\u51fa\u3092\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u884c\u3046\u5b9f\u88c5\u3092\u3057\u305f\u306e\u3067\u3001\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u691c\u77e5\u3057\u305f\u3044\u4eba\u306f It\u2019s now or never:\u3010Android\u3011NFC\u3092\u4f7f\u3063\u3066\u307f\u308b\u2460 (\u8aad\u307f\u8fbc\u307f\u51e6\u7406) \u306a\u3069\u3092\u53c2\u7167\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nTag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53d6\u5f97 \u306f\u3001NFC\u30c7\u30d0\u30a4\u30b9\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u5165\u308a\u53e3\u3067\u3059\u3002\n\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u3067 NFC\u30c7\u30d0\u30a4\u30b9\u3092\u691c\u51fa\u3059\u308b\u5834\u5408\u306f\u3001\u307e\u305a NfcAdapter \u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\u3002\nclass MainActivity : AppCompatActivity() {\n  private val nfcAdapter by lazy { NfcAdapter.getDefaultAdapter(this) }\n}\n\nNfcAdapter \u306e\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u691c\u51fa\u958b\u59cb\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\u691c\u51fa\u958b\u59cb\u306b\u306f\u3001\u691c\u51fa\u6642\u306b\u5b9f\u884c\u3055\u308c\u308b PendingIntent\u3001\u691c\u51fa\u30a4\u30d9\u30f3\u30c8\u3092\u8868\u3059 IntentFilter \u304c\u5fc5\u8981\u3067\u3059\u3002\n// PendingIntent \u8d77\u52d5\u6642\u306b\u5b9f\u884c\u3055\u308c\u308b intent \u306e\u751f\u6210\u3068 PendingIntent \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3092\u3059\u308b\u3002\nval intent = Intent(this, javaClass).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)\nval feliCaPendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n\n// NfcAdapter.ACTION_NDEF_DISCOVERED \u3092\u30a2\u30af\u30b7\u30e7\u30f3\u540d\u3068\u3059\u308b\u30d5\u30a3\u30eb\u30bf\u3092\u751f\u6210\u3059\u308b\u3002\nval filter = IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED).apply { this.addDataType(\"*/*\") }\n\n// NfcAdapter \u306e\u691c\u51fa\u958b\u59cb\u3092\u5b9f\u884c\u3059\u308b\u3002\nnfcAdapter.enableForegroundDispatch(this, feliCaPendingIntent, arrayOf(filter), arrayOf(NFC_TYPES))\n\nNFC_TYPES \u306f\u691c\u51fa\u5bfe\u8c61\u306e NFC\u30c7\u30d0\u30a4\u30b9\u306e\u898f\u683c\u3092\u8868\u3059\u30af\u30e9\u30b9\u306e FQDN \u306e\u914d\u5217\u3067\u3059\u3002\n\u56fa\u5b9a\u5024\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u691c\u51fa\u5bfe\u8c61\u304c\u4ed6\u306b\u3082\u3042\u308b\u5834\u5408\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u3068\u3057\u3066 NfcA \u306a\u308a NfcB \u306a\u308a NfcV \u306a\u308a\u306e\u30af\u30e9\u30b9\u540d\u3092\u5165\u308c\u3066\u3042\u3052\u307e\u3057\u3087\u3046\u3002\ncompanion object {\n  val NFC_TYPES = arrayOf(NfcF::class.java.name)\n}\n\n\nNFC \u30c7\u30d0\u30a4\u30b9\u306e\u691c\u51fa\u3092\u53d7\u3051\u53d6\u308b\n\u691c\u51fa\u30a4\u30d9\u30f3\u30c8\u306e\u53d7\u3051\u53e3\u306f onNewIntent(...) \u3067\u3059\u3002\noverride fun onNewIntent(intent: Intent?) {\n  if (intent == null) {\n    return\n  }\n  // intent \u304b\u3089 Tag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u308a\u51fa\u3059\u3002\n  val tag = intent.getParcelableExtra<Tag>(NfcAdapter.EXTRA_TAG) ?: return\n  Log.d(\"FeliCaSample\", \"tag: '$tag', id: '${tag.id.joinToString(\" \")}'\")\n\n  // NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u5b9f\u65bd\u3059\u308b\u3002\n  val result = NfcFReader().read(tag)\n  Toast.makeText(this, \"tag: '$tag', id: '${tag.id.joinToString(\" \")}'\", Toast.LENGTH_SHORT).show()\n}\n\nNfcFReader \u306f\u72ec\u81ea\u30af\u30e9\u30b9\u3067\u3059\u3002\nread(tag) \u306e\u4e2d\u8eab\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u6b21\u306b\u7d9a\u304f\u89e3\u8aac\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\nclass NfcFReader() {\n  /**\n   * NFC\u30c7\u30d0\u30a4\u30b9\u3068\u63a5\u7d9a\u3057\u3001\u901a\u4fe1\u3092\u3059\u308b\u3002\n   *\n   * @param tag \u691c\u51fa\u3057\u305f NFC\u30c7\u30d0\u30a4\u30b9\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f Read Without Encryption \u30b3\u30de\u30f3\u30c9\u306e\u7d50\u679c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f null \u3092\u8fd4\u3059\u3002\n   */\n  fun read(tag: Tag): ReadWithoutEncryptionResponse? {\n    // NfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53d6\u5f97\u3092\u3059\u308b\u3002\n    val nfc = NfcF.get(tag)\n    try {\n      // NFC\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3059\u308b\u3002\n      nfc.connect()\n\n      // \u3082\u308d\u3082\u308d\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3002\n      val result = read(nfc)\n      Log.d(\"FeliCaSample\", \"read without encryption: '$result'\")\n\n      if (result != null) {\n        // \u7d50\u679c\u306e\u809d\u3067\u3042\u308b block \u3092\u30ed\u30b0\u306b\u51fa\u529b\u3059\u308b\u3002\n        result.blocks.forEachIndexed { i, bytes -> Log.d(\"FeliCaSample\", \"block[$i] '${bytes.joinToString(\" \")}'\") }\n      }\n      // NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\u3002\n      nfc.close()\n\n      return result\n    } catch (e: Exception) {\n      Log.e(\"FeliCaSample\", \"cannot read nfc. '$e'\")\n      if (nfc.isConnected) {\n        nfc.close()\n      }\n    }\n    return null\n  }\n\n\nTag \u304b\u3089 NfcF \u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\nNFC\u30c7\u30d0\u30a4\u30b9\u3068\u3084\u308a\u53d6\u308a\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u9063\u308a\u53d6\u308a\u3092\u3059\u308b\u30af\u30e9\u30b9\u3068\u3057\u3066 NfcFReader \u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u5b9f\u8cea\u3001\u305f\u3060\u306e NFC\u30c7\u30d0\u30a4\u30b9\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u3060\u3051\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\nNfcF \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u53d6\u5f97\u306f\u3001\u524d\u8ff0\u306e NfcFReader.read(Tag) \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n// NfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53d6\u5f97\u3092\u3059\u308b\u3002\nval nfc = NfcF.get(tag)\n\n\nNfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u901a\u3057\u3066 NFC\u30c7\u30d0\u30a4\u30b9\u3068\u63a5\u7d9a\u3059\u308b\nNfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3067\u304d\u305f\u306e\u3067\u3001NFC\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\u524d\u8ff0\u306e NfcFReader.read(Tag) \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n// NFC\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3059\u308b\u3002\nnfc.connect()\n\n\n\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u6b32\u3057\u3044\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\nNFC\u30c7\u30d0\u30a4\u30b9\u3068\u63a5\u7d9a\u3067\u304d\u305f\u306e\u3067\u3001\u4e2d\u8eab\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\n\u524d\u8ff0\u306e NfcFReader.read(Tag) \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n// \u3082\u308d\u3082\u308d\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3002\nval result = read(nfc)\n\n\u809d\u306e\u90e8\u5206\u306a\u306e\u3067\u3001\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\nNfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u901a\u3057\u3066 NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\n\u3084\u308b\u3053\u3068\u304c\u7d42\u308f\u3063\u305f\u3089\u304a\u7247\u4ed8\u3051\u3092\u3057\u307e\u3059\u3002\n\u524d\u8ff0\u306e NfcFReader.read(Tag) \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n// NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\u3002\nnfc.close()\n\n\n\u809d\u306e\u90e8\u5206 - \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u6b32\u3057\u3044\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\u809d\u306e\u90e8\u5206\u3067\u3059\u3002\n\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3057\u3087\u3046\u3002\n\u5165\u308a\u53e3\u306f\u3053\u3053\u3067\u3059\u3002\n// \u3082\u308d\u3082\u308d\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3002\nval result = read(nfc)\nLog.d(\"FeliCaSample\", \"read without encryption: '$result'\")\n\n\u4e2d\u8eab\u306e\u8a18\u8ff0\u91cf\u306f\u591a\u3044\u3067\u3059\u304c\u3001\u3084\u308b\u3053\u3068\u306f3\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3060\u3051\u3067\u3059\u3002\n\nPolling \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066 IDm \u3092\u53d6\u5f97\u3059\u308b \u203b \u3064\u3044\u3067\u306b\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u306e\u691c\u8a3c\u3092\u884c\u3046\nRequest Service \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u6b63\u5f53\u6027\u3092\u78ba\u8a8d\u3059\u308b\nRead Without Encryption \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066 \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9, \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\n\u5404\u30b3\u30de\u30f3\u30c9\u3092\u9001\u4fe1\u3059\u308b\u90e8\u5206\u306f\u3059\u3079\u3066\u3001\u6b21\u306e3\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\nNfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e transceive(...) \u306b\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u6e21\u3059\n\ntransceive(...) \u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u89e3\u91c8\u3059\u308b\n\n\u4e2d\u8eab\u3092\u307e\u305a\u898b\u307e\u3057\u3087\u3046\u3002\n/**\n * NFC\u30c7\u30d0\u30a4\u30b9\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n *\n * @param nfc NFC-F \u898f\u683c\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f Read Without Encryption \u30b3\u30de\u30f3\u30c9\u306e\u7d50\u679c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f null \u3092\u8fd4\u3059\u3002\n */\nprivate fun read(nfc: NfcF): ReadWithoutEncryptionResponse {\n  // System 1\u306e\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9 -> 0x0003 (SUICA/PASUMO \u306a\u3069\u306e\u9244\u9053\u7cfb)\n  val targetSystemCode = byteArrayOf(0x00.toByte(), 0x03.toByte())\n\n  // [1]: Polling \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Polling \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\n  val pollingCommand = PollingCommand(targetSystemCode)\n  val pollingRequest = pollingCommand.requestPacket()\n  val rawPollingResponse = nfc.transceive(pollingRequest)\n  val pollingResponse = PollingResponse(rawPollingResponse)\n\n  // Polling \u3067\u5f97\u3089\u308c\u305f IDm \u3092\u53d6\u5f97\u3059\u308b\u3002\n  val targetIDm = pollingResponse.IDm()\n\n  // \u5b9f\u884c\u3057\u305f\u3044\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u3002\n  val serviceCode = byteArrayOf(0x00.toByte(), 0x8B.toByte())\n\n  // [2]: Request Service \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Request Service \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\n  val requestServiceCommand = RequestServiceCommand(targetIDm, serviceCode)\n  val requestServiceRequest = requestServiceCommand.requestPacket()\n  val rawRequestServiceResponse = nfc.transceive(requestServiceRequest)\n  val requestServiceResponse = RequestServiceResponse(rawRequestServiceResponse)\n\n  // [3]: Read Without Encryption \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Read Without Encryption \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\n  val readWithoutEncryptionCommand = ReadWithoutEncryptionCommand(IDm = targetIDm, serviceCode = serviceCode, blocks = arrayOf(BlockListElement2(BlockListElement.AccessMode.toNotParseService, 0, 0)))\n  val readWithoutEncryptionRequest = readWithoutEncryptionCommand.requestPacket()\n  val rawReadWithoutEncryptionResponse = nfc.transceive(readWithoutEncryptionRequest)\n  val readWithouEncryptionResponse = ReadWithoutEncryptionResponse(rawReadWithoutEncryptionResponse)\n\n  return readWithouEncryptionResponse\n}\n\n\u305d\u308c\u305e\u308c\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u8a73\u3057\u304f\u898b\u307e\u3057\u3087\u3046\u3002\n\u203b \u30ea\u30af\u30a8\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u89aa\u3067\u3042\u308b NfcCommand \u306f\u3001\u72ec\u81ea\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067 val commandCode: Byte \u3068 fun requestPacket(): ByteArray \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5c0f\u3055\u3044\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\u203b \u30ec\u30b9\u30dd\u30f3\u30b9\u30af\u30e9\u30b9\u306e\u89aa\u3067\u3042\u308b NfcResponse \u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067 ByteArray \u3092\u53d7\u3051\u53d6\u308a\u3001abstract \u306a getter \u30923\u3064 abstract fun responseSize(): Int , abstract fun responseCode(): Byte, abstract fun IDm(): ByteArray \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u5c0f\u3055\u3044\u306e\u3067\u5168\u8c8c\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\nPolling \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066 IDm \u3092\u53d6\u5f97\u3059\u308b\nPolling \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u306e\u306f\u3001\u524d\u8ff0\u306e NfcFReader.read(NfcF) \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n// [1]: Polling \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Polling \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\nval pollingCommand = PollingCommand(targetSystemCode)\nval pollingRequest = pollingCommand.requestPacket()\nval rawPollingResponse = nfc.transceive(pollingRequest)\nval pollingResponse = PollingResponse(rawPollingResponse)\n\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\nPolling \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u5024\u306f\u6b21\u306e\uff11\u3064\u3067\u3059\u3002\n\n\n\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\n\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u306f\u30b7\u30b9\u30c6\u30e0\u3092\u7279\u5b9a\u3059\u308b\u5024\u3067\u3059\u3002\nSuica/PASUMO \u306a\u3069\u306e\u9244\u9053\u7cfb\u306e\u30ab\u30fc\u30c9\u306f 00 03 \u3060\u305d\u3046\u3067\u3059\u3002\n\n\nPolling \u30b3\u30de\u30f3\u30c9\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u308b PollingCommand \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ndata class PollingCommand(private val systemCode: ByteArray, private val request: Request = PollingCommand.Request.systemCode) : NfcCommand {\n  /** Polling \u30b3\u30de\u30f3\u30c9\u3067\u53d6\u5f97\u3059\u308b\u60c5\u5831\u306e\u5217\u6319\u4f53\u3002 */\n  enum class Request(val value: Byte) {\n    none(0x00), systemCode(0x01), communicationAbility(0x02)\n  }\n\n  /** Polling \u30b3\u30de\u30f3\u30c9\u306e\u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u306f 0x00 */\n  override val commandCode: Byte\n    get() = 0x00\n\n  /** \u30bf\u30a4\u30e0\u30b9\u30ed\u30c3\u30c8\u306f 0F \u56fa\u5b9a\u3068\u3059\u308b\uff08\u307b\u3093\u3068\u306f\u3082\u3063\u3068\u3061\u3083\u3093\u3068\u6307\u5b9a\u3067\u304d\u308b\u3002\u4ed5\u69d8\u7de8\u53c2\u7167\uff09 */\n  val timeSlot: Byte\n    get() = 0x0f\n\n  /** \u30ea\u30af\u30a8\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u30d0\u30a4\u30c8\u5024 */\n  val requestCode: Byte\n    get() = request.value\n\n  /** \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun requestPacket(): ByteArray {\n    return ByteArray(6).apply {\n      var i = 0\n      this[i++] = 0x06              // [0] \u6700\u521d\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u304c\u5165\u308b\u30026byte\u56fa\u5b9a\u3002\n      this[i++] = commandCode       // [1] \u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u304c\u5165\u308b\u3002\n      this[i++] = systemCode[0]     // [2] \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u306e\u5148\u982dbyte\u304c\u5165\u308b\u3002\n      this[i++] = systemCode[1]     // [3] \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u306e\u672b\u5c3ebyte\u304c\u5165\u308b\u3002\n      this[i++] = requestCode       // [4] \u30ea\u30af\u30a8\u30b9\u30c8\u30b3\u30fc\u30c9\u304c\u5165\u308b\u3002\n      this[i++] = timeSlot          // [5] \u30bf\u30a4\u30e0\u30b9\u30ed\u30c3\u30c8\u304c\u5165\u308b\u3002\n    }\n  }\n}\n\n\u89e3\u8aac\u304c\u5fc5\u8981\u306a\u3068\u3053\u308d\u306f\u7279\u306b\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc.transceive(...) \u306b\u6e21\u3059\u3068\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002\n\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u89e3\u91c8\u3092\u3057\u3066\u3044\u308b PollingResponse \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nclass PollingResponse(response: ByteArray) : NfcResponse(response) {\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun responseSize(): Int {\n    return response[0].toInt()\n  }\n\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9\u306e\u53d6\u5f97\u3092\u3059\u308b\u3002 */\n  override fun responseCode(): Byte {\n    return response[1]\n  }\n\n  /** IDm \u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun IDm(): ByteArray {\n    return response.copyOfRange(2, 10)\n  }\n}\n\n\u3053\u3061\u3089\u3082\u7279\u306b\u89e3\u8aac\u306f\u5fc5\u8981\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u53d7\u3051\u53d6\u3063\u305f ByteArray \u3092\u305d\u308c\u305e\u308c getter \u3067\u30e9\u30c3\u30d7\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\nRequest Service \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u6b63\u5f53\u6027\u3092\u78ba\u8a8d\u3059\u308b\nRequest Service \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u306e\u306f\u3001\u524d\u8ff0\u306e NfcFReader.read(NfcF) \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n// [2]: Request Service \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Request Service \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\nval requestServiceCommand = RequestServiceCommand(targetIDm, serviceCode)\nval requestServiceRequest = requestServiceCommand.requestPacket()\nval rawRequestServiceResponse = nfc.transceive(requestServiceRequest)\nval requestServiceResponse = RequestServiceResponse(rawRequestServiceResponse)\n\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\nRequest Service \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u5024\u306f\u6b21\u306e2\u3064\u3067\u3059\u3002\n\nIDm\n\n\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\n\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306f\u30b7\u30b9\u30c6\u30e0\u304c\u63d0\u4f9b\u3059\u308b \u30b5\u30fc\u30d3\u30b9 \u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u4eca\u56de\u306e\u4f8b\u306e\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9 00 8B \u306f\u3001\u30ab\u30fc\u30c9\u60c5\u5831\u306e\u53d6\u5f97 \u3092\u8868\u3057\u307e\u3059\u3002\n\n\nRequest Service \u30b3\u30de\u30f3\u30c9\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u308b RequestServiceCommand \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ndata class RequestServiceCommand(private val IDm: ByteArray, private val nodeCodeList: Array<ByteArray>) : NfcCommand {\n  /** \u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u304c\uff11\u3064\u306e\u5834\u5408\u306e\u305f\u3081\u306e\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3002 */\n  constructor(IDm: ByteArray, nodeCode: ByteArray): this(IDm, arrayOf(nodeCode))\n\n  /** Request Service \u30b3\u30de\u30f3\u30c9\u306e\u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u306f 0x02 */\n  override val commandCode: Byte\n    get() = 0x2\n\n  /** \u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u306e\u4ef6\u6570 */\n  private val numberOfNodes = (nodeCodeList.size).toByte()\n\n  /** \u30d1\u30b1\u30c3\u30c8\u306e\u30b5\u30a4\u30ba */\n  private val packetSize = (11 + nodeCodeList.size * 2)\n\n  /** \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun requestPacket(): ByteArray {\n    return ByteArray(packetSize).apply {\n      var i = 0\n      this[i++] = packetSize.toByte()       // [0] \u6700\u521d\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u304c\u5165\u308b\u3002\n      this[i++] = commandCode               // [1] \u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u304c\u5165\u308b\u3002\n      IDm.forEach { this[i++] = it }        // [2..10] IDm (8byte) \u304c\u5165\u308b\u3002\n      this[i++] = numberOfNodes             // [11] \u30ce\u30fc\u30c9\u306e\u6570\u304c\u5165\u308b\u3002\n      nodeCodeList.forEach {\n        it.forEachIndexed { index, byte ->\n          if ((index % 2) == 0) {           // [12..] \u30ce\u30fc\u30c9\u30b3\u30fc\u30c9 (2byte) \u304c\u5165\u308b\u3002\n            this[i + 1] = byte              //        \u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u306f\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306a\u306e\u3067\n          } else {                          //        2byte \u304c\u53cd\u8ee2\u3059\u308b\u3088\u3046\u306b\u683c\u7d0d\u3059\u308b\u3002\n            this[i - 1] = byte\n          }\n          i++\n        }\n      }\n    }\n  }\n}\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u306e\u751f\u6210\u306e\u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u4e00\u89a7\u306e\u90e8\u5206\u306f\u3061\u3087\u3063\u3068\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u3002\n\u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3067\u3042\u308b\u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u306f 2byte \u3067\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u4f7f\u7528\u3059\u308b\u969b\u306f\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc.transceive(...) \u306b\u6e21\u3059\u3068\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002\n\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u89e3\u91c8\u3092\u3057\u3066\u3044\u308b RequestServiceResponse \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nclass RequestServiceResponse(response: ByteArray) : NfcResponse(response) {\n  /** \u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u30ce\u30fc\u30c9\u306e\u9375\u30d0\u30fc\u30b8\u30e7\u30f3\u30e2\u30c7\u30eb */\n  data class NodeKeyVersion(private val values: ByteArray) {\n    val value: ByteArray\n      get() {\n        return ByteArray(2).apply {\n          this[0] = values[1]\n          this[1] = values[0]\n        }\n      }\n  }\n\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun responseSize(): Int {\n    return response[0].toInt()\n  }\n\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun responseCode(): Byte {\n    return response[1]\n  }\n\n  /** IDm \u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun IDm(): ByteArray {\n    return response.copyOfRange(2, 10)\n  }\n\n  /** \u30ce\u30fc\u30c9\u306e\u6570\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  fun numberOfNodes(): Int {\n    return response[11].toInt()\n  }\n\n  /** \u30ce\u30fc\u30c9\u306e\u9375\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u914d\u5217\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  fun nodeKeyVersions(): Array<NodeKeyVersion> {\n    var i = 0\n    val results = arrayListOf<NodeKeyVersion>()\n    val rawNodeKeyVersions = response.copyOfRange(12, response.size)\n    while (i < numberOfNodes()) {\n      results += NodeKeyVersion(ByteArray(2).apply {\n        this[0] = rawNodeKeyVersions[i * 2]\n        this[1] = rawNodeKeyVersions[(i * 2) + 1]\n      })\n    }\n    return results.toTypedArray()\n  }\n}\n\n\u9811\u5f35\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u304c\u3001\u8907\u5408\u3057\u305f\u308a\u306f\u3057\u306a\u3044\u306e\u3067\u9375\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u4f8b\u5916\u304c\u51fa\u305a\u3001IDm \u304c\u53d6\u5f97\u3067\u304d\u308c\u3070\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u6b63\u5f53\u6027\u691c\u8a3c\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\nRead Without Encryption \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066 \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9, \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\nRead Without Encryption \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u306e\u306f\u3001\u524d\u8ff0\u306e NfcFReader.read(NfcF) \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n// [3]: Read Without Encryption \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Read Without Encryption \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\nval readWithoutEncryptionCommand = ReadWithoutEncryptionCommand(IDm = targetIDm, serviceCode = serviceCode, blocks = arrayOf(BlockListElement2(BlockListElement.AccessMode.toNotParseService, 0, 0)))\nval readWithoutEncryptionRequest = readWithoutEncryptionCommand.requestPacket()\nval rawReadWithoutEncryptionResponse = nfc.transceive(readWithoutEncryptionRequest)\nval readWithouEncryptionResponse = ReadWithoutEncryptionResponse(rawReadWithoutEncryptionResponse)\n\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\nRead Without Encryption \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u5024\u306f\u6b21\u306e3\u3064\u3067\u3059\u3002\n\nIDm\n\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\n\n\u8aad\u307f\u53d6\u308a\u5bfe\u8c61\u306e\u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217\n\u30d6\u30ed\u30c3\u30af\u306e\u8981\u7d20\u3068\u3057\u3066 BlockListElement \u3092\u89aa\u30af\u30e9\u30b9\u3068\u3059\u308b BlockListElement2, `BlockListElement3 \u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n\nRead Without Encryption \u30b3\u30de\u30f3\u30c9\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u308b ReadWithoutEncryptionCommand \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ndata class ReadWithoutEncryptionCommand(private val IDm: ByteArray, private val serviceList: Array<ByteArray>, val blocks: Array<BlockListElement>) : NfcCommand {\n  /** \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u304c 1\u7a2e\u985e\u306e\u5834\u5408\u306e\u305f\u3081\u306e\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3002 */\n  constructor(IDm: ByteArray, serviceCode: ByteArray, blocks: Array<BlockListElement>): this(IDm, arrayOf(serviceCode), blocks)\n\n  /** Read Without Encryption \u30b3\u30de\u30f3\u30c9\u306e\u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u306f 0x06 */\n  override val commandCode: Byte\n    get() = 0x06.toByte()\n\n  /** \u30b5\u30fc\u30d3\u30b9\u306e\u6570 */\n  private val numberOfServices = serviceList.size\n\n  /** \u30d6\u30ed\u30c3\u30af\u306e\u6570 */\n  private val numberOfBlocks: Int = blocks.size\n\n  /** \u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u5168\u4f53\u306e byte \u6570 */\n  private val blockSize = blocks.map { it.size() }.reduce { a, b -> a + b }\n\n  /** \u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba */\n  private val packetSize = 13 + (numberOfServices * 2) + blockSize\n\n  /** \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun requestPacket(): ByteArray {\n    return ByteArray(packetSize).apply {\n      var i = 0\n      this[i++] = packetSize.toByte()       // [0] \u6700\u521d\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u304c\u5165\u308b\u3002\n      this[i++] = commandCode               // [1] \u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u304c\u5165\u308b\u3002\n      IDm.forEach { this[i++] = it }        // [2..10] ID\uff4d (8byte) \u304c\u5165\u308b\u3002\n      this[i++] = numberOfServices.toByte() // [11] \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u306e\u6570\u304c\u5165\u308b\u3002\n      serviceList.forEach {\n        it.forEachIndexed { index, byte ->  // [12..] \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9 (2byte) \u304c\u5165\u308b\u3002\n          if ((index % 2) == 0) {           //        \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306f\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306a\u306e\u3067\n            this[i + 1] = byte              //        2byte \u304c\u53cd\u8ee2\u3059\u308b\u3088\u3046\u306b\u683c\u7d0d\u3059\u308b\u3002\n          } else {\n            this[i - 1] = byte\n          }\n          i++\n        }\n      }\n      this[i++] = numberOfBlocks.toByte()    // [12 + 2 * numberOfServices + 1] \u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u306e\u6570\u304c\u5165\u308b\u3002\n      blocks.forEach { it.toByteArray().forEach { this[i++] = it } }\n                                             // [...] \u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u30d1\u30b1\u30c3\u30c8\u304c\u9806\u7e70\u308a\u5165\u308b\u3002\n    }\n  }\n}\n\n\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u306b\u306f\u3001\u53d6\u5f97\u3057\u305f\u3044\u60c5\u5831\u306e\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u3092\u5165\u308c\u307e\u3059\u3002\n\u4eca\u56de\u306e\u5b9f\u88c5\u3067\u306f 00 8B\uff08\u30ab\u30fc\u30c9\u60c5\u5831\u306e\u53d6\u5f97\uff09\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3057\u307e\u3057\u305f\u3002\n\u30ab\u30fc\u30c9\u60c5\u5831\u306e\u53d6\u5f97\u3067\u5fc5\u8981\u306a\u30d6\u30ed\u30c3\u30af\u306f\u30012\u30d0\u30a4\u30c8\u306e\u30a8\u30ec\u30e1\u30f3\u30c8 1\u3064\u3067\u3059\u3002\n\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u89aa\u30af\u30e9\u30b9\u3068\u306a\u308b abstract \u306a\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u30af\u30e9\u30b9\u306b\u6700\u521d\u306e 1byte \u3092\u751f\u6210\u3059\u308b\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3001\u30d1\u30b1\u30c3\u30c8\u5168\u4f53\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3001\u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001\u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\u306f\u57fa\u672c 0 \u3067\u826f\u3044\u306e\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u30d1\u30fc\u30b9\u30b5\u30fc\u30d3\u30b9\u3063\u3066\u306a\u3093\u3060\uff1f\u3068\u3044\u3046\u65b9\u306f \u4ed5\u69d8\u7de8 \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\uff08\u79c1\u3082\u3088\u304f\u308f\u304b\u3063\u3066\u306a\u3044\u3067\u3059\u3002\uff09\nabstract class BlockListElement(val accessMode: AccessMode, val serviceCodeIndex: Int, val number: Int) {\n  /** \u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\u306e\u5217\u6319\u4f53 */\n  enum class AccessMode(val value: Int) {\n    toNotParseService(0), toParseService(1)\n  }\n\n  /** \u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u6700\u521d\u306e byte \u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  fun firstByte(): Byte {\n    // 1byte\n    //    [0] \u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u30b5\u30a4\u30ba (1bit) 0: 2byte\u30a8\u30ec\u30e1\u30f3\u30c8, 1: 3byte\u30a8\u30ec\u30e1\u30f3\u30c8\n    //    [1] \u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9 (1bit)\n    //    [2..7] \u30a8\u30ec\u30e1\u30f3\u30c8\u304c\u5bfe\u8c61\u3068\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u5185\u306e\u756a\u53f7 (6bit)\n    //    x 0 0 0 0 0 0 0 <- \u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\n    //    0 x 0 0 0 0 0 0 <- \u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\n    //  & 0 0 x x x x x x <- \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u5185\u306e\u9806\u756a\n    return ((0 shl 7) and (accessMode.value shl 6) and (serviceCodeIndex shl 3)).toByte()\n  }\n  abstract fun toByteArray(): ByteArray\n  abstract fun size(): Int\n}\n\n2byte\u306e\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nclass BlockListElement2(accessMode: AccessMode, serviceCodeIndex: Int, number: Int) : BlockListElement(accessMode, serviceCodeIndex, number) {\n  /** \u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u30d1\u30b1\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun toByteArray(): ByteArray {\n    return ByteArray(2).apply {\n      this[0] = firstByte()\n      this[1] = number.toByte()\n    }\n  }\n\n  /** \u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun size(): Int {\n    return 2\n  }\n}\n\n3byte\u306e\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u5834\u5408\u306e\u30d1\u30b1\u30c3\u30c8\u306e\u69cb\u6210\u306b\u95a2\u3057\u3066\u306f\u3001number \u3092 2byte \u306b\u3059\u308c\u3070\u3088\u3044\u3060\u3051\u306a\u306e\u3067\u3059\u304c\u3001\u76f4\u8fd1\u3067\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u624b\u3092\u629c\u304d\u307e\u3057\u305f\u3002\nclass BlockListElement3(accessMode: AccessMode, serviceCodeIndex: Int, number: Int) : BlockListElement(accessMode, serviceCodeIndex, number) {\n  /** \u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u30d1\u30b1\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun toByteArray(): ByteArray {\n    return ByteArray(3).apply {\n      this[0] = firstByte()\n\n      // FIXME: \u3053\u3046\u3058\u3083\u306a\u3044\n      this[2] = number.toByte()\n    }\n  }\n\n  /** \u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun size(): Int {\n    return 3\n  }\n}\n\nReadWithoutEncryptionCommand \u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc.transceive(...) \u306b\u6e21\u3059\u3068\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002\n\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u89e3\u91c8\u3092\u3057\u3066\u3044\u308b ReadWithoutEncryptionResponse \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nclass ReadWithoutEncryptionResponse : NfcResponse {\n  /** \u6307\u5b9a\u306e\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u308b\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8 16byte/\u30d6\u30ed\u30c3\u30af */\n  val blocks: Array<ByteArray>\n\n  constructor(response: ByteArray): super(response) {\n    // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30d6\u30ed\u30c3\u30af\u3092\u30d1\u30fc\u30b9\u3059\u308b\u3002\n    blocks = blocks()\n  }\n\n  /** \u51e6\u7406\u306e\u6210\u5426 */\n  val succeeded: Boolean\n    get() = statusFlag1().toInt() == 0x00 && statusFlag2().toInt() == 0x00\n\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun responseSize(): Int {\n    return response[0].toInt()\n  }\n\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun responseCode(): Byte {\n    return response[1]\n  }\n\n  /** IDm \u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun IDm(): ByteArray {\n    return response.copyOfRange(2, 10)\n  }\n\n  /** \u30b9\u30c6\u30fc\u30bf\u30b9\u30d5\u30e9\u30b01 \u3092\u53d6\u5f97\u3059\u308b\u3002\u8a73\u7d30\u306f\u4ed5\u69d8\u7de8\u53c2\u7167\u3002 */\n  fun statusFlag1(): Byte {\n    return response[10]\n  }\n\n  /** \u30b9\u30c6\u30fc\u30bf\u30b9\u30d5\u30e9\u30b02 \u3092\u53d6\u5f97\u3059\u308b\u3002\u8a73\u7d30\u306f\u4ed5\u69d8\u7de8\u53c2\u7167\u3002 */\n  fun statusFlag2(): Byte {\n    return response[11]\n  }\n\n  /** \u30d6\u30ed\u30c3\u30af\u306e\u6570\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  fun numberOfBlocks(): Int {\n    return response[12].toInt()\n  }\n\n  private fun blocks(): Array<ByteArray> {\n    var i = 0\n    val results = arrayListOf<ByteArray>()\n    val raw = response.copyOfRange(13, response.size)\n    while (i < numberOfBlocks()) {\n      // 16byte \u5358\u4f4d\u3067\u914d\u5217\u306b\u683c\u7d0d\u3057\u3066\u3044\u304f\u3002\n      results += raw.copyOfRange(i * 16, i * 16 + 16)\n      i++\n    }\n    return results.toTypedArray()\n  }\n}\n\n\u30b9\u30c6\u30fc\u30bf\u30b9\u30d5\u30e9\u30b0\u3067\u3001\u51e6\u7406\u306e\u6210\u5426\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002\n1, 2\u3068\u3082\u306b 00 \u3067\u3042\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n\u5931\u6557\u306e\u5834\u5408\u306f\u3001\u5931\u6557\u3057\u305f\u7b87\u6240\uff08\u30d0\u30a4\u30c8\u5217\u756a\u53f7\uff09\u304c\u5165\u308a\u307e\u3059\u3002\n\u30d6\u30ed\u30c3\u30af\u306e\u89e3\u91c8\u306e\u4ed5\u65b9\u306f\u3001\u30b5\u30fc\u30d3\u30b9\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\n\u5b9f\u88c5\u6642\u306f\u3001jennychan.web.fc2.com: \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9/\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u4e00\u89a7(NS\u306e\u307f) \u3092\u53c2\u7167\u3057\u307e\u3057\u305f\u3002\n\u308f\u305f\u3057\u306e PASUMO \u3067\u5b9f\u884c\u3057\u305f\u969b\u306e\u30d6\u30ed\u30c3\u30af\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n0  0  0  0  0  0  0  0 32  0  0 94  3  0  4 -39\n\n\u533a\u5206\u3051\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u3068 [[00 00 00 00 00 00 00 00] [20] [00 00] [5E 03] [00] [04  27]] \u3068\u306a\u308a\u307e\u3059\u3002\n\u5404\u90e8\u4f4d\u306e\u89e3\u8aac\u3092\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u305d\u3046\u3067\u3059\u3002\n\n\n\n\u5024\n\u89e3\u8aac\n\n\n\n\n[00 00 00 00 00 00 00 00]\n\u4e0d\u660e\n\n\n[20]\n\u30ab\u30fc\u30c9\u7a2e\u5225 (4bit), \u4f7f\u7528\u5730\u57df (4bit)\n\n\n[00 00]\n\u4e0d\u660e\n\n\n[5E 03]\n\u6b8b\u984d (LE) 03 5E -> 862\u5186 \u203b \u7fcc\u65e5\u51fa\u52e4\u6642\u306b\u6539\u672d\u901a\u308b\u3068\u305f\u3057\u304b\u306b\u3053\u306e\u984d\u3067\u3057\u305f\u3002\n\n\n[00]\n\u4e0d\u660e\n\n\n[04  27]\n\u53d6\u5f15\u901a\u756a\n\n\n\n\u30ab\u30fc\u30c9\u7a2e\u5225\u306f\u4e0a\u306e\u53c2\u7167\u3057\u305f\u30b5\u30a4\u30c8\u3067 20 \u3060\u3068 SUICA/PASUMO \u3067\u3042\u308b\u3068\u306e\u8a18\u8f09\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u60a9\u307f\u3069\u3053\u308d\n\u30b5\u30f3\u30d7\u30eb\u306e\u958b\u767a\u3092\u3057\u3001\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u3066\u3044\u3066\u3001\u3088\u304f\u51fa\u304f\u308f\u3059\u6b21\u306e\u30a8\u30e9\u30fc\u304c\u3042\u308a\u307e\u3057\u305f\u3002\nandroid.nfc.TagLostException: Tag was lost\n\n\u30b0\u30b0\u308b\u3068\u3001\u6b21\u306e\u30ea\u30f3\u30af\u306e\u3088\u3046\u306b\u89e3\u8aac\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u65b9\u304c\u3044\u307e\u3059\u3002\n\n\u3089\u3073\u30d6\u30ed\u30b0: [Android] NfcF : TagLostException\nhiro99ma blog: [n7]TagLostException (1)\n\n\u305f\u3057\u304b\u306b\u3001\u3053\u308c\u3089\u306e\u7406\u7531\u3067\u767a\u751f\u3059\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u5358\u7d14\u306b\u30b9\u30ad\u30e3\u30f3\u4e2d\u306b NFC\u30c7\u30d0\u30a4\u30b9\u3068\u30b9\u30de\u30db\u304c\u305a\u308c\u308b\u3068\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3059\u3002\n\u3044\u307e\u3044\u3061\u89e3\u6c7a\u65b9\u6cd5\u3082\u3001\u767a\u751f\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3082\u8aad\u3081\u306a\u3044\u306e\u3067\u6c17\u6301\u3061\u60aa\u3044\u3067\u3059\u3002\n\u6539\u5584\u7b56\u306f\u306a\u3044\u3082\u306e\u304b\u3057\u3089\u30fb\u30fb\u30fb\u3002\n\n\u958b\u767a\u6642\u306b\u6c17\u3092\u3064\u3051\u308b\u3053\u3068\n\u958b\u767a\u6642\u306f Galaxy 6s Edge \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u6c17\u3092\u3064\u3051\u308b\u3053\u3068\u306f\u7aef\u672b\u306b\u4f9d\u5b58\u3059\u308b\u3082\u306e\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002\n\nAndroid\u7aef\u672b\u306e\u8a2d\u5b9a\u3067\u3001FeliCa\u8aad\u307f\u53d6\u308a\u3092\u6709\u52b9\u306b\u3059\u308b\n\nAndroid\u7aef\u672b\u306b\u6a19\u6e96\u3067\u5165\u3063\u3066\u3044\u308b FeliCa\u30ea\u30fc\u30c0\u30fc\u7684\u306a\u30a2\u30d7\u30ea\u306b\u51e6\u7406\u3092\u596a\u308f\u308c\u308b\n\u8a2d\u5b9a\u304b\u3089\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u72ec\u81ea\u30a2\u30d7\u30ea\u304c\u51e6\u7406\u3092\u3059\u3059\u3081\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u30ab\u30fc\u30c9\u306b\u63a5\u7d9a\u3057\u3066\u30c7\u30d0\u30c3\u30b0\u3057\u3066\u3044\u308b\u6700\u4e2d\u3067\u30d7\u30ed\u30bb\u30b9\u3092\u5207\u308b\u3068\u30b9\u30de\u30db\u304c NFC\u30c7\u30d0\u30a4\u30b9\u3092\u691c\u77e5\u3057\u306a\u304f\u306a\u308b\u73fe\u8c61\n\u30b9\u30de\u30db\u3092\u518d\u8d77\u52d5\u3059\u308b\u3068\u3001\u307e\u305f\u5143\u6c17\u306b\u691c\u77e5\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3059\u304c\u30fb\u30fb\u30fb\u3002\n\u3061\u3083\u3093\u3068\u3001NfcAdapter \u306e disconnect() \u3092\u901a\u3057\u3066\u304b\u3089\u3001\u30d7\u30ed\u30bb\u30b9\u3092\u5207\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u304c\u3002\n\n\nSuica/PASUMO \u306e\u5238\u9762\u306b\u5370\u5b57\u3055\u308c\u305f\u60c5\u5831\u304c NFC \u306e\u6a5f\u80fd\u3067\u53d6\u5f97\u3067\u304d\u308b\u306e\u304b\u8abf\u67fb\u3057\u305f\u6642\u306e Android \u3067\u306e\u5b9f\u88c5\u3092\u307e\u3068\u3081\u305f\u3082\u306e \u3067\u3059\u3002\n\u4ee5\u524d\u66f8\u3044\u305f [[PASUMO] FeliCa \u304b\u3089\u60c5\u5831\u3092\u5438\u3044\u51fa\u3057\u3066\u307f\u308b - FeliCa\u306e\u4ed5\u69d8\u7de8 [Android][Kotlin]](http://qiita.com/YasuakiNakazawa/items/3109df682af2a7032f8d) \u306e\u5b9f\u88c5\u7de8\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u79c1\u306f PASUMO \u30e6\u30fc\u30b6\u306a\u306e\u3067\u3001PASUMO \u3067\u306e\u8abf\u67fb\u30ed\u30b0\u306b\u306a\u308a\u307e\u3059\u3053\u3068\u3092\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002\n\n\u6b21\u306e\u3053\u3068\u3092\u307e\u3068\u3081\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n1. Android \u3067 FeliCa \u3092\u6271\u3046\u3068\u304d\u306b\u51fa\u3066\u304f\u308b\u30af\u30e9\u30b9\u9054\u306e\u7d39\u4ecb\n2. \u5b9f\u88c5\u306b\u3064\u3044\u3066\n3. \u60a9\u307f\u3069\u3053\u308d\n4. \u958b\u767a\u6642\u306b\u6c17\u3092\u3064\u3051\u308b\u3053\u3068\n\n\u203b NFC \u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3044\u304f\u3064\u304b\u3042\u3063\u3066\u3001\u4ed5\u69d8\u7de8\u3067\u3082\u53c2\u8003\u5143\u30ea\u30f3\u30af\u3068\u3057\u3066\u8cbc\u3063\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u305d\u308c\u3089\u306f\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u3002Android\u6a19\u6e96\u30aa\u30f3\u30ea\u30fc\u3067\u3059\u3002\n\u203b Suica/PASUMO \u306a\u3069\u306e\u9244\u9053\u7cfb\u30ab\u30fc\u30c9\u306e\u5185\u90e8\u4ed5\u69d8\u306f **\u975e\u516c\u958b** \u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3001\u516c\u5f0f\u306a\u60c5\u5831\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u3084\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306a\u3069\u306e\u56fa\u5b9a\u5024\u304c\u51fa\u3066\u304d\u307e\u3059\u304c\u3001\u6709\u5fd7\u304c\u96c6\u3081\u305f\u60c5\u5831\u3092\u5143\u306b\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n# Android \u3067 FeliCa \u3092\u6271\u3046\u3068\u304d\u306b\u51fa\u3066\u304f\u308b\u30af\u30e9\u30b9\u9054\u306e\u7d39\u4ecb\n\nFeliCa \u7528\u3068\u3044\u3046\u304b\u3001NFC \u7528\u306e\u30af\u30e9\u30b9\u306f\u6b21\u306e3\u3064\u3067\u3059\u3002\n\n* [android.nfc.NfcAdapter](https://developer.android.com/reference/android/nfc/NfcAdapter.html)\n* [android.nfc.Tag](https://developer.android.com/reference/android/nfc/Tag.html)\n* [android.nfc.tech.NfcF](https://developer.android.com/reference/android/nfc/tech/NfcF.html)\n\n\u305d\u308c\u305e\u308c\u306e\u89e3\u8aac\u3092\u3057\u307e\u3059\u3002\n\n## [android.nfc.NfcAdapter](https://developer.android.com/reference/android/nfc/NfcAdapter.html)\n\nNFC\u30c7\u30d0\u30a4\u30b9\uff08Suica \u3060\u3068\u304b\u306e\u30ab\u30fc\u30c9\uff09\u306e\u691c\u51fa\u3092\u958b\u59cb/\u505c\u6b62\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u5236\u5fa1\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u306a\u308b\u306e\u3067\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b `Context` \u3092\u8981\u6c42\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u305b\u305a\u3068\u3082 AndroidManifest.xml \u306b\u3066 Activity \u306a\u308a Receiver \u3092\u5b9a\u7fa9\u3057\u3066 intent-filter \u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u4ee3\u66ff\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\u4f7f\u3044\u5206\u3051\u3068\u3057\u3066\u306f\u3001**\u30a2\u30d7\u30ea\u304c\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u306e\u72b6\u614b\u3067 NFC\u30c7\u30d0\u30a4\u30b9\u3092\u691c\u51fa\u3057\u305f\u3044\u6642** \u306b\u3001\u3053\u306e\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\u3002\n**\u30a2\u30d7\u30ea\u304c\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306e\u72b6\u614b\u3067 NFC\u30c7\u30d0\u30a4\u30b9\u3092\u691c\u51fa\u3057\u305f\u3044\u6642** \u306f\u3001AndroidManifest.xml \u3078\u306e\u5b9a\u7fa9\u3092\u3057\u307e\u3059\u3002\n\n\u3044\u305a\u308c\u3082\u3001\u76ee\u7684\u306f Tag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n## [android.nfc.Tag](https://developer.android.com/reference/android/nfc/Tag.html)\n\n\u691c\u51fa\u3057\u305f NFC\u30c7\u30d0\u30a4\u30b9\u3092\u8868\u3059\u30e2\u30c7\u30eb\u3067\u3059\u3002\n\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3057\u3066\u3001NFC\u30c7\u30d0\u30a4\u30b9\u3068\u3084\u308a\u3068\u308a\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u306e Tag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f `ID` \u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\nAndroid \u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e `getId()` \u306e\u8aac\u660e\u306b\u3001\u6b21\u306e\u8a18\u8f09\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\nGet the Tag Identifier (if it has one).\n\nThe tag identifier is a low level serial number, used for anti-collision and identification.\n\nMost tags have a stable unique identifier (UID), but some tags will generate a random ID every time they are discovered (RID), and there are some tags with no ID at all (the byte array will be zero-sized).\n\nThe size and format of an ID is specific to the RF technology used by the tag.\n\nThis function retrieves the ID as determined at discovery time, and does not perform any further RF communication or block.\n```\n\n\u771f\u3093\u4e2d\u3042\u305f\u308a\u306e\u6587\u304c\u3068\u3066\u3082\u4e0d\u5b89\u3092\u611f\u3058\u3055\u305b\u307e\u3059\u3002\nGoogle\u7ffb\u8a33\u306b\u304b\u3051\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\n\u307b\u3068\u3093\u3069\u306e\u30bf\u30b0\u306f\u5b89\u5b9a\u3057\u305f\u30e6\u30cb\u30fc\u30af\u306a\u8b58\u5225\u5b50\uff08UID\uff09\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3044\u304f\u3064\u304b\u306e\u30bf\u30b0\u306f\u767a\u898b\u3055\u308c\u308b\u305f\u3073\u306b\u30e9\u30f3\u30c0\u30e0\u306aID\u3092\u751f\u6210\u3057\u3001ID\u306e\u306a\u3044\u30bf\u30b0\u3082\u3042\u308a\u307e\u3059\uff08\u30d0\u30a4\u30c8\u914d\u5217\u306f\u30bc\u30ed\u30b5\u30a4\u30ba\u306b\u306a\u308a\u307e\u3059\uff09\u3002\n```\n\n\u3053\u308c\u306b\u95a2\u3057\u3066\u306f\u3001[NFC-Developer.com: FeliCa IDm\u3068\u306f\uff1f](http://developers.orangetags.jp/words/idm) \u306b\u3042\u308b\u3088\u3046\u306b\u3001**\u516c\u5171\u306e\u96fb\u5b50\u30de\u30cd\u30fc\u30b5\u30fc\u30d3\u30b9\u3067\u306f\u3053\u306eIDm\u3084UID\u306f\u5229\u7528\u3055\u308c\u3066\u3044\u306a\u3044** \u3089\u3057\u3044\u3067\u3059\u3002\u304a\u305d\u3089\u304f\u3053\u308c\u3089\u306e\u3053\u3068\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u203b \u5b9f\u969b\u306b\u5229\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u30ab\u30fc\u30c9\u304c\u624b\u5143\u306b\u306a\u3055\u305d\u3046\u3067\u3001\u8a73\u7d30\u3092\u8ffd\u3048\u307e\u305b\u3093\u3067\u3057\u305f\u30fb\u30fb\u30fb\u3002\n\n## [android.nfc.tech.NfcF](https://developer.android.com/reference/android/nfc/tech/NfcF.html)\n\n\u3053\u306e\u30af\u30e9\u30b9\u306f `NFC-F` \u898f\u683c\u306e NFC\u30c7\u30d0\u30a4\u30b9\u306e\u8a73\u7d30\u3092\u6301\u3064\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u691c\u51fa\u5bfe\u8c61\u306e NFC\u30c7\u30d0\u30a4\u30b9\u306e\u898f\u683c\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u969b\u306b\u306f\u3001\u3053\u306e\u30af\u30e9\u30b9\u306e FQDN \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u306b\u306f\u3001\u524d\u8ff0\u306e `Tag` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5fc5\u8981\u3067\u3059\u3002\nNfcF \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5229\u7528\u3057\u3001NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e **\u901a\u4fe1\u306e\u958b\u59cb/\u7d42\u4e86** \u3068 **\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u9001\u4fe1** \u3092\u3057\u307e\u3059\u3002\n\n# \u5b9f\u88c5\u306b\u3064\u3044\u3066\n\n\u6d41\u308c\u3068\u3057\u3066\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n1. Tag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3059\u308b\n2. NFC \u30c7\u30d0\u30a4\u30b9\u306e\u691c\u51fa\u3092\u53d7\u3051\u53d6\u308b\n\t1. Tag \u304b\u3089 NfcF \u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\n\t2. NfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u901a\u3057\u3066 NFC\u30c7\u30d0\u30a4\u30b9\u3068\u63a5\u7d9a\u3059\u308b\n\t3. \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u6b32\u3057\u3044\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\t4. NfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u901a\u3057\u3066 NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\n\n\u307e\u305a 2-3 \u306e\u8a73\u7d30\u4ee5\u5916\u306e\u5927\u67a0\u90e8\u5206\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n## Tag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3059\u308b\n\n\u203b \u308f\u305f\u3057\u306f NFC\u30c7\u30d0\u30a4\u30b9\u306e\u691c\u51fa\u3092\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u884c\u3046\u5b9f\u88c5\u3092\u3057\u305f\u306e\u3067\u3001\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u3067\u691c\u77e5\u3057\u305f\u3044\u4eba\u306f [It\u2019s now or never:\u3010Android\u3011NFC\u3092\u4f7f\u3063\u3066\u307f\u308b\u2460 (\u8aad\u307f\u8fbc\u307f\u51e6\u7406)](http://inon29.hateblo.jp/entry/2014/04/15/211656) \u306a\u3069\u3092\u53c2\u7167\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n**Tag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53d6\u5f97** \u306f\u3001NFC\u30c7\u30d0\u30a4\u30b9\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u5165\u308a\u53e3\u3067\u3059\u3002\n\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u3067 NFC\u30c7\u30d0\u30a4\u30b9\u3092\u691c\u51fa\u3059\u308b\u5834\u5408\u306f\u3001\u307e\u305a NfcAdapter \u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u307e\u3059\u3002\n\n```kotlin\nclass MainActivity : AppCompatActivity() {\n  private val nfcAdapter by lazy { NfcAdapter.getDefaultAdapter(this) }\n}\n```\n\nNfcAdapter \u306e\u30d5\u30a9\u30a2\u30b0\u30e9\u30a6\u30f3\u30c9\u691c\u51fa\u958b\u59cb\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\u691c\u51fa\u958b\u59cb\u306b\u306f\u3001\u691c\u51fa\u6642\u306b\u5b9f\u884c\u3055\u308c\u308b `PendingIntent`\u3001\u691c\u51fa\u30a4\u30d9\u30f3\u30c8\u3092\u8868\u3059 `IntentFilter` \u304c\u5fc5\u8981\u3067\u3059\u3002\n\n```kotlin\n// PendingIntent \u8d77\u52d5\u6642\u306b\u5b9f\u884c\u3055\u308c\u308b intent \u306e\u751f\u6210\u3068 PendingIntent \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3092\u3059\u308b\u3002\nval intent = Intent(this, javaClass).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)\nval feliCaPendingIntent = PendingIntent.getActivity(this, 0, intent, 0)\n\n// NfcAdapter.ACTION_NDEF_DISCOVERED \u3092\u30a2\u30af\u30b7\u30e7\u30f3\u540d\u3068\u3059\u308b\u30d5\u30a3\u30eb\u30bf\u3092\u751f\u6210\u3059\u308b\u3002\nval filter = IntentFilter(NfcAdapter.ACTION_NDEF_DISCOVERED).apply { this.addDataType(\"*/*\") }\n\n// NfcAdapter \u306e\u691c\u51fa\u958b\u59cb\u3092\u5b9f\u884c\u3059\u308b\u3002\nnfcAdapter.enableForegroundDispatch(this, feliCaPendingIntent, arrayOf(filter), arrayOf(NFC_TYPES))\n```\n\n`NFC_TYPES` \u306f\u691c\u51fa\u5bfe\u8c61\u306e NFC\u30c7\u30d0\u30a4\u30b9\u306e\u898f\u683c\u3092\u8868\u3059\u30af\u30e9\u30b9\u306e FQDN \u306e\u914d\u5217\u3067\u3059\u3002\n\u56fa\u5b9a\u5024\u306a\u306e\u3067\u3001\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u691c\u51fa\u5bfe\u8c61\u304c\u4ed6\u306b\u3082\u3042\u308b\u5834\u5408\u306f\u3001\u914d\u5217\u306e\u8981\u7d20\u3068\u3057\u3066 `NfcA` \u306a\u308a `NfcB` \u306a\u308a `NfcV` \u306a\u308a\u306e\u30af\u30e9\u30b9\u540d\u3092\u5165\u308c\u3066\u3042\u3052\u307e\u3057\u3087\u3046\u3002\n\n```kotlin\ncompanion object {\n  val NFC_TYPES = arrayOf(NfcF::class.java.name)\n}\n```\n\n## NFC \u30c7\u30d0\u30a4\u30b9\u306e\u691c\u51fa\u3092\u53d7\u3051\u53d6\u308b\n\n\u691c\u51fa\u30a4\u30d9\u30f3\u30c8\u306e\u53d7\u3051\u53e3\u306f `onNewIntent(...)` \u3067\u3059\u3002\n\n\n```kotlin\noverride fun onNewIntent(intent: Intent?) {\n  if (intent == null) {\n    return\n  }\n  // intent \u304b\u3089 Tag \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u308a\u51fa\u3059\u3002\n  val tag = intent.getParcelableExtra<Tag>(NfcAdapter.EXTRA_TAG) ?: return\n  Log.d(\"FeliCaSample\", \"tag: '$tag', id: '${tag.id.joinToString(\" \")}'\")\n\n  // NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e\u3084\u308a\u53d6\u308a\u3092\u5b9f\u65bd\u3059\u308b\u3002\n  val result = NfcFReader().read(tag)\n  Toast.makeText(this, \"tag: '$tag', id: '${tag.id.joinToString(\" \")}'\", Toast.LENGTH_SHORT).show()\n}\n```\n\nNfcFReader \u306f\u72ec\u81ea\u30af\u30e9\u30b9\u3067\u3059\u3002\n`read(tag)` \u306e\u4e2d\u8eab\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u8a73\u7d30\u306f\u6b21\u306b\u7d9a\u304f\u89e3\u8aac\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n```kotlin\nclass NfcFReader() {\n  /**\n   * NFC\u30c7\u30d0\u30a4\u30b9\u3068\u63a5\u7d9a\u3057\u3001\u901a\u4fe1\u3092\u3059\u308b\u3002\n   *\n   * @param tag \u691c\u51fa\u3057\u305f NFC\u30c7\u30d0\u30a4\u30b9\n   * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f Read Without Encryption \u30b3\u30de\u30f3\u30c9\u306e\u7d50\u679c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f null \u3092\u8fd4\u3059\u3002\n   */\n  fun read(tag: Tag): ReadWithoutEncryptionResponse? {\n    // NfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53d6\u5f97\u3092\u3059\u308b\u3002\n    val nfc = NfcF.get(tag)\n    try {\n      // NFC\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3059\u308b\u3002\n      nfc.connect()\n\n      // \u3082\u308d\u3082\u308d\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3002\n      val result = read(nfc)\n      Log.d(\"FeliCaSample\", \"read without encryption: '$result'\")\n\n      if (result != null) {\n        // \u7d50\u679c\u306e\u809d\u3067\u3042\u308b block \u3092\u30ed\u30b0\u306b\u51fa\u529b\u3059\u308b\u3002\n        result.blocks.forEachIndexed { i, bytes -> Log.d(\"FeliCaSample\", \"block[$i] '${bytes.joinToString(\" \")}'\") }\n      }\n      // NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\u3002\n      nfc.close()\n\n      return result\n    } catch (e: Exception) {\n      Log.e(\"FeliCaSample\", \"cannot read nfc. '$e'\")\n      if (nfc.isConnected) {\n        nfc.close()\n      }\n    }\n    return null\n  }\n```\n\n### Tag \u304b\u3089 NfcF \u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\n\nNFC\u30c7\u30d0\u30a4\u30b9\u3068\u3084\u308a\u53d6\u308a\u3092\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u9063\u308a\u53d6\u308a\u3092\u3059\u308b\u30af\u30e9\u30b9\u3068\u3057\u3066 `NfcFReader` \u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u5b9f\u8cea\u3001\u305f\u3060\u306e NFC\u30c7\u30d0\u30a4\u30b9\u3068\u3084\u308a\u53d6\u308a\u3059\u308b\u3060\u3051\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002\n\nNfcF \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u53d6\u5f97\u306f\u3001\u524d\u8ff0\u306e `NfcFReader.read(Tag)` \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```kotlin\n// NfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53d6\u5f97\u3092\u3059\u308b\u3002\nval nfc = NfcF.get(tag)\n```\n\n### NfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u901a\u3057\u3066 NFC\u30c7\u30d0\u30a4\u30b9\u3068\u63a5\u7d9a\u3059\u308b\n\nNfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d6\u5f97\u3067\u304d\u305f\u306e\u3067\u3001NFC\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3057\u307e\u3059\u3002\n\u524d\u8ff0\u306e `NfcFReader.read(Tag)` \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```kotlin\n// NFC\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3059\u308b\u3002\nnfc.connect()\n```\n\n### \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u6b32\u3057\u3044\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\nNFC\u30c7\u30d0\u30a4\u30b9\u3068\u63a5\u7d9a\u3067\u304d\u305f\u306e\u3067\u3001\u4e2d\u8eab\u3092\u8aad\u307f\u53d6\u308a\u307e\u3059\u3002\n\u524d\u8ff0\u306e `NfcFReader.read(Tag)` \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```kotlin\n// \u3082\u308d\u3082\u308d\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3002\nval result = read(nfc)\n```\n\n\u809d\u306e\u90e8\u5206\u306a\u306e\u3067\u3001\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n### NfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u901a\u3057\u3066 NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\n\n\u3084\u308b\u3053\u3068\u304c\u7d42\u308f\u3063\u305f\u3089\u304a\u7247\u4ed8\u3051\u3092\u3057\u307e\u3059\u3002\n\u524d\u8ff0\u306e `NfcFReader.read(Tag)` \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```kotlin\n// NFC\u30c7\u30d0\u30a4\u30b9\u3068\u306e\u63a5\u7d9a\u3092\u5207\u65ad\u3059\u308b\u3002\nnfc.close()\n```\n\n## \u809d\u306e\u90e8\u5206 - \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001\u6b32\u3057\u3044\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\n\u809d\u306e\u90e8\u5206\u3067\u3059\u3002\n\u60c5\u5831\u3092\u53d6\u5f97\u3057\u307e\u3057\u3087\u3046\u3002\n\u5165\u308a\u53e3\u306f\u3053\u3053\u3067\u3059\u3002\n\n```kotlin\n// \u3082\u308d\u3082\u308d\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u305f\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u3002\nval result = read(nfc)\nLog.d(\"FeliCaSample\", \"read without encryption: '$result'\")\n```\n\n\u4e2d\u8eab\u306e\u8a18\u8ff0\u91cf\u306f\u591a\u3044\u3067\u3059\u304c\u3001\u3084\u308b\u3053\u3068\u306f3\u3064\u306e\u30b9\u30c6\u30c3\u30d7\u3060\u3051\u3067\u3059\u3002\n\n1. Polling \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066 IDm \u3092\u53d6\u5f97\u3059\u308b \u203b \u3064\u3044\u3067\u306b\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u306e\u691c\u8a3c\u3092\u884c\u3046\n2. Request Service \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u6b63\u5f53\u6027\u3092\u78ba\u8a8d\u3059\u308b\n3. Read Without Encryption \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066 \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9, \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\n\u5404\u30b3\u30de\u30f3\u30c9\u3092\u9001\u4fe1\u3059\u308b\u90e8\u5206\u306f\u3059\u3079\u3066\u3001\u6b21\u306e3\u30b9\u30c6\u30c3\u30d7\u3067\u3059\u3002\n\n1. \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\n2. NfcF \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e `transceive(...)` \u306b\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u6e21\u3059\n3. `transceive(...)` \u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u89e3\u91c8\u3059\u308b\n\n\u4e2d\u8eab\u3092\u307e\u305a\u898b\u307e\u3057\u3087\u3046\u3002\n\n```kotlin\n/**\n * NFC\u30c7\u30d0\u30a4\u30b9\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n *\n * @param nfc NFC-F \u898f\u683c\u7528\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n * @return \u51e6\u7406\u306b\u6210\u529f\u3057\u305f\u5834\u5408\u306f Read Without Encryption \u30b3\u30de\u30f3\u30c9\u306e\u7d50\u679c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306f null \u3092\u8fd4\u3059\u3002\n */\nprivate fun read(nfc: NfcF): ReadWithoutEncryptionResponse {\n  // System 1\u306e\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9 -> 0x0003 (SUICA/PASUMO \u306a\u3069\u306e\u9244\u9053\u7cfb)\n  val targetSystemCode = byteArrayOf(0x00.toByte(), 0x03.toByte())\n\n  // [1]: Polling \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Polling \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\n  val pollingCommand = PollingCommand(targetSystemCode)\n  val pollingRequest = pollingCommand.requestPacket()\n  val rawPollingResponse = nfc.transceive(pollingRequest)\n  val pollingResponse = PollingResponse(rawPollingResponse)\n\n  // Polling \u3067\u5f97\u3089\u308c\u305f IDm \u3092\u53d6\u5f97\u3059\u308b\u3002\n  val targetIDm = pollingResponse.IDm()\n\n  // \u5b9f\u884c\u3057\u305f\u3044\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u3002\n  val serviceCode = byteArrayOf(0x00.toByte(), 0x8B.toByte())\n\n  // [2]: Request Service \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Request Service \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\n  val requestServiceCommand = RequestServiceCommand(targetIDm, serviceCode)\n  val requestServiceRequest = requestServiceCommand.requestPacket()\n  val rawRequestServiceResponse = nfc.transceive(requestServiceRequest)\n  val requestServiceResponse = RequestServiceResponse(rawRequestServiceResponse)\n\n  // [3]: Read Without Encryption \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Read Without Encryption \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\n  val readWithoutEncryptionCommand = ReadWithoutEncryptionCommand(IDm = targetIDm, serviceCode = serviceCode, blocks = arrayOf(BlockListElement2(BlockListElement.AccessMode.toNotParseService, 0, 0)))\n  val readWithoutEncryptionRequest = readWithoutEncryptionCommand.requestPacket()\n  val rawReadWithoutEncryptionResponse = nfc.transceive(readWithoutEncryptionRequest)\n  val readWithouEncryptionResponse = ReadWithoutEncryptionResponse(rawReadWithoutEncryptionResponse)\n\n  return readWithouEncryptionResponse\n}\n```\n\n\u305d\u308c\u305e\u308c\u306e\u30b9\u30c6\u30c3\u30d7\u3092\u8a73\u3057\u304f\u898b\u307e\u3057\u3087\u3046\u3002\n\n\u203b \u30ea\u30af\u30a8\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u89aa\u3067\u3042\u308b `NfcCommand` \u306f\u3001\u72ec\u81ea\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067 `val commandCode: Byte` \u3068 `fun requestPacket(): ByteArray` \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5c0f\u3055\u3044\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u203b \u30ec\u30b9\u30dd\u30f3\u30b9\u30af\u30e9\u30b9\u306e\u89aa\u3067\u3042\u308b `NfcResponse` \u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067 ByteArray \u3092\u53d7\u3051\u53d6\u308a\u3001abstract \u306a getter \u30923\u3064 `abstract fun responseSize(): Int` , `abstract fun responseCode(): Byte`, `abstract fun IDm(): ByteArray` \u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u5c0f\u3055\u3044\u306e\u3067\u5168\u8c8c\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n### Polling \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066 IDm \u3092\u53d6\u5f97\u3059\u308b\n\nPolling \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u306e\u306f\u3001\u524d\u8ff0\u306e `NfcFReader.read(NfcF)` \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```kotlin\n// [1]: Polling \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Polling \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\nval pollingCommand = PollingCommand(targetSystemCode)\nval pollingRequest = pollingCommand.requestPacket()\nval rawPollingResponse = nfc.transceive(pollingRequest)\nval pollingResponse = PollingResponse(rawPollingResponse)\n```\n\n#### \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\n\nPolling \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u5024\u306f\u6b21\u306e\uff11\u3064\u3067\u3059\u3002\n\n* \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\n\n\t\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u306f\u30b7\u30b9\u30c6\u30e0\u3092\u7279\u5b9a\u3059\u308b\u5024\u3067\u3059\u3002\n\tSuica/PASUMO \u306a\u3069\u306e\u9244\u9053\u7cfb\u306e\u30ab\u30fc\u30c9\u306f `00 03` \u3060\u305d\u3046\u3067\u3059\u3002\n\nPolling \u30b3\u30de\u30f3\u30c9\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u308b `PollingCommand` \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```kotlin\ndata class PollingCommand(private val systemCode: ByteArray, private val request: Request = PollingCommand.Request.systemCode) : NfcCommand {\n  /** Polling \u30b3\u30de\u30f3\u30c9\u3067\u53d6\u5f97\u3059\u308b\u60c5\u5831\u306e\u5217\u6319\u4f53\u3002 */\n  enum class Request(val value: Byte) {\n    none(0x00), systemCode(0x01), communicationAbility(0x02)\n  }\n\n  /** Polling \u30b3\u30de\u30f3\u30c9\u306e\u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u306f 0x00 */\n  override val commandCode: Byte\n    get() = 0x00\n\n  /** \u30bf\u30a4\u30e0\u30b9\u30ed\u30c3\u30c8\u306f 0F \u56fa\u5b9a\u3068\u3059\u308b\uff08\u307b\u3093\u3068\u306f\u3082\u3063\u3068\u3061\u3083\u3093\u3068\u6307\u5b9a\u3067\u304d\u308b\u3002\u4ed5\u69d8\u7de8\u53c2\u7167\uff09 */\n  val timeSlot: Byte\n    get() = 0x0f\n\n  /** \u30ea\u30af\u30a8\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u30d0\u30a4\u30c8\u5024 */\n  val requestCode: Byte\n    get() = request.value\n\n  /** \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun requestPacket(): ByteArray {\n    return ByteArray(6).apply {\n      var i = 0\n      this[i++] = 0x06              // [0] \u6700\u521d\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u304c\u5165\u308b\u30026byte\u56fa\u5b9a\u3002\n      this[i++] = commandCode       // [1] \u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u304c\u5165\u308b\u3002\n      this[i++] = systemCode[0]     // [2] \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u306e\u5148\u982dbyte\u304c\u5165\u308b\u3002\n      this[i++] = systemCode[1]     // [3] \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9\u306e\u672b\u5c3ebyte\u304c\u5165\u308b\u3002\n      this[i++] = requestCode       // [4] \u30ea\u30af\u30a8\u30b9\u30c8\u30b3\u30fc\u30c9\u304c\u5165\u308b\u3002\n      this[i++] = timeSlot          // [5] \u30bf\u30a4\u30e0\u30b9\u30ed\u30c3\u30c8\u304c\u5165\u308b\u3002\n    }\n  }\n}\n```\n\n\u89e3\u8aac\u304c\u5fc5\u8981\u306a\u3068\u3053\u308d\u306f\u7279\u306b\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 `nfc.transceive(...)` \u306b\u6e21\u3059\u3068\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002\n\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u89e3\u91c8\u3092\u3057\u3066\u3044\u308b `PollingResponse` \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```\nclass PollingResponse(response: ByteArray) : NfcResponse(response) {\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun responseSize(): Int {\n    return response[0].toInt()\n  }\n\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9\u306e\u53d6\u5f97\u3092\u3059\u308b\u3002 */\n  override fun responseCode(): Byte {\n    return response[1]\n  }\n\n  /** IDm \u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun IDm(): ByteArray {\n    return response.copyOfRange(2, 10)\n  }\n}\n```\n\n\u3053\u3061\u3089\u3082\u7279\u306b\u89e3\u8aac\u306f\u5fc5\u8981\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u53d7\u3051\u53d6\u3063\u305f ByteArray \u3092\u305d\u308c\u305e\u308c getter \u3067\u30e9\u30c3\u30d7\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n### Request Service \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u6b63\u5f53\u6027\u3092\u78ba\u8a8d\u3059\u308b\n\nRequest Service \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u306e\u306f\u3001\u524d\u8ff0\u306e `NfcFReader.read(NfcF)` \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```kotlin\n// [2]: Request Service \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Request Service \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\nval requestServiceCommand = RequestServiceCommand(targetIDm, serviceCode)\nval requestServiceRequest = requestServiceCommand.requestPacket()\nval rawRequestServiceResponse = nfc.transceive(requestServiceRequest)\nval requestServiceResponse = RequestServiceResponse(rawRequestServiceResponse)\n```\n\n#### \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\n\nRequest Service \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u5024\u306f\u6b21\u306e2\u3064\u3067\u3059\u3002\n\n* IDm\n* \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\n\n\t\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306f\u30b7\u30b9\u30c6\u30e0\u304c\u63d0\u4f9b\u3059\u308b **\u30b5\u30fc\u30d3\u30b9** \u3067\u3059\u3002\n\t\u4f8b\u3048\u3070\u3001\u4eca\u56de\u306e\u4f8b\u306e\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9 `00 8B` \u306f\u3001**\u30ab\u30fc\u30c9\u60c5\u5831\u306e\u53d6\u5f97** \u3092\u8868\u3057\u307e\u3059\u3002\n\nRequest Service \u30b3\u30de\u30f3\u30c9\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u308b `RequestServiceCommand` \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```kotlin\ndata class RequestServiceCommand(private val IDm: ByteArray, private val nodeCodeList: Array<ByteArray>) : NfcCommand {\n  /** \u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u304c\uff11\u3064\u306e\u5834\u5408\u306e\u305f\u3081\u306e\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3002 */\n  constructor(IDm: ByteArray, nodeCode: ByteArray): this(IDm, arrayOf(nodeCode))\n\n  /** Request Service \u30b3\u30de\u30f3\u30c9\u306e\u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u306f 0x02 */\n  override val commandCode: Byte\n    get() = 0x2\n\n  /** \u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u306e\u4ef6\u6570 */\n  private val numberOfNodes = (nodeCodeList.size).toByte()\n\n  /** \u30d1\u30b1\u30c3\u30c8\u306e\u30b5\u30a4\u30ba */\n  private val packetSize = (11 + nodeCodeList.size * 2)\n\n  /** \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun requestPacket(): ByteArray {\n    return ByteArray(packetSize).apply {\n      var i = 0\n      this[i++] = packetSize.toByte()       // [0] \u6700\u521d\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u304c\u5165\u308b\u3002\n      this[i++] = commandCode               // [1] \u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u304c\u5165\u308b\u3002\n      IDm.forEach { this[i++] = it }        // [2..10] IDm (8byte) \u304c\u5165\u308b\u3002\n      this[i++] = numberOfNodes             // [11] \u30ce\u30fc\u30c9\u306e\u6570\u304c\u5165\u308b\u3002\n      nodeCodeList.forEach {\n        it.forEachIndexed { index, byte ->\n          if ((index % 2) == 0) {           // [12..] \u30ce\u30fc\u30c9\u30b3\u30fc\u30c9 (2byte) \u304c\u5165\u308b\u3002\n            this[i + 1] = byte              //        \u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u306f\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306a\u306e\u3067\n          } else {                          //        2byte \u304c\u53cd\u8ee2\u3059\u308b\u3088\u3046\u306b\u683c\u7d0d\u3059\u308b\u3002\n            this[i - 1] = byte\n          }\n          i++\n        }\n      }\n    }\n  }\n}\n```\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u306e\u751f\u6210\u306e\u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u4e00\u89a7\u306e\u90e8\u5206\u306f\u3061\u3087\u3063\u3068\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u3002\n\u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3067\u3042\u308b\u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u306f 2byte \u3067\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u4f7f\u7528\u3059\u308b\u969b\u306f\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 `nfc.transceive(...)` \u306b\u6e21\u3059\u3068\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002\n\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u89e3\u91c8\u3092\u3057\u3066\u3044\u308b `RequestServiceResponse` \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```kotlin\nclass RequestServiceResponse(response: ByteArray) : NfcResponse(response) {\n  /** \u30ce\u30fc\u30c9\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u30ce\u30fc\u30c9\u306e\u9375\u30d0\u30fc\u30b8\u30e7\u30f3\u30e2\u30c7\u30eb */\n  data class NodeKeyVersion(private val values: ByteArray) {\n    val value: ByteArray\n      get() {\n        return ByteArray(2).apply {\n          this[0] = values[1]\n          this[1] = values[0]\n        }\n      }\n  }\n\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun responseSize(): Int {\n    return response[0].toInt()\n  }\n\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun responseCode(): Byte {\n    return response[1]\n  }\n\n  /** IDm \u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun IDm(): ByteArray {\n    return response.copyOfRange(2, 10)\n  }\n\n  /** \u30ce\u30fc\u30c9\u306e\u6570\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  fun numberOfNodes(): Int {\n    return response[11].toInt()\n  }\n\n  /** \u30ce\u30fc\u30c9\u306e\u9375\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u914d\u5217\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  fun nodeKeyVersions(): Array<NodeKeyVersion> {\n    var i = 0\n    val results = arrayListOf<NodeKeyVersion>()\n    val rawNodeKeyVersions = response.copyOfRange(12, response.size)\n    while (i < numberOfNodes()) {\n      results += NodeKeyVersion(ByteArray(2).apply {\n        this[0] = rawNodeKeyVersions[i * 2]\n        this[1] = rawNodeKeyVersions[(i * 2) + 1]\n      })\n    }\n    return results.toTypedArray()\n  }\n}\n```\n\n\u9811\u5f35\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u304c\u3001\u8907\u5408\u3057\u305f\u308a\u306f\u3057\u306a\u3044\u306e\u3067\u9375\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4f7f\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u4f8b\u5916\u304c\u51fa\u305a\u3001IDm \u304c\u53d6\u5f97\u3067\u304d\u308c\u3070\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u6b63\u5f53\u6027\u691c\u8a3c\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\n### Read Without Encryption \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3057\u3066 \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9, \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\nRead Without Encryption \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u306e\u306f\u3001\u524d\u8ff0\u306e `NfcFReader.read(NfcF)` \u306e\u4e2d\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```kotlin\n// [3]: Read Without Encryption \u30b3\u30de\u30f3\u30c9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 nfc \u306b\u9001\u4fe1\u3057\u3001Read Without Encryption \u306e\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\u3002\nval readWithoutEncryptionCommand = ReadWithoutEncryptionCommand(IDm = targetIDm, serviceCode = serviceCode, blocks = arrayOf(BlockListElement2(BlockListElement.AccessMode.toNotParseService, 0, 0)))\nval readWithoutEncryptionRequest = readWithoutEncryptionCommand.requestPacket()\nval rawReadWithoutEncryptionResponse = nfc.transceive(readWithoutEncryptionRequest)\nval readWithouEncryptionResponse = ReadWithoutEncryptionResponse(rawReadWithoutEncryptionResponse)\n```\n\n#### \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3059\u308b\n\nRead Without Encryption \u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u65bd\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u5024\u306f\u6b21\u306e3\u3064\u3067\u3059\u3002\n\n* IDm\n* \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\n* \u8aad\u307f\u53d6\u308a\u5bfe\u8c61\u306e\u30d6\u30ed\u30c3\u30af\u306e\u914d\u5217\n\n\t\u30d6\u30ed\u30c3\u30af\u306e\u8981\u7d20\u3068\u3057\u3066 `BlockListElement` \u3092\u89aa\u30af\u30e9\u30b9\u3068\u3059\u308b `BlockListElement2`, ``BlockListElement3` \u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\t\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\nRead Without Encryption \u30b3\u30de\u30f3\u30c9\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u751f\u6210\u3057\u3066\u3044\u308b `ReadWithoutEncryptionCommand` \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```kotlin\ndata class ReadWithoutEncryptionCommand(private val IDm: ByteArray, private val serviceList: Array<ByteArray>, val blocks: Array<BlockListElement>) : NfcCommand {\n  /** \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u304c 1\u7a2e\u985e\u306e\u5834\u5408\u306e\u305f\u3081\u306e\u30bb\u30ab\u30f3\u30c0\u30ea\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3002 */\n  constructor(IDm: ByteArray, serviceCode: ByteArray, blocks: Array<BlockListElement>): this(IDm, arrayOf(serviceCode), blocks)\n\n  /** Read Without Encryption \u30b3\u30de\u30f3\u30c9\u306e\u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u306f 0x06 */\n  override val commandCode: Byte\n    get() = 0x06.toByte()\n\n  /** \u30b5\u30fc\u30d3\u30b9\u306e\u6570 */\n  private val numberOfServices = serviceList.size\n\n  /** \u30d6\u30ed\u30c3\u30af\u306e\u6570 */\n  private val numberOfBlocks: Int = blocks.size\n\n  /** \u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u5168\u4f53\u306e byte \u6570 */\n  private val blockSize = blocks.map { it.size() }.reduce { a, b -> a + b }\n\n  /** \u30d1\u30b1\u30c3\u30c8\u30b5\u30a4\u30ba */\n  private val packetSize = 13 + (numberOfServices * 2) + blockSize\n\n  /** \u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun requestPacket(): ByteArray {\n    return ByteArray(packetSize).apply {\n      var i = 0\n      this[i++] = packetSize.toByte()       // [0] \u6700\u521d\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u306e\u30b5\u30a4\u30ba\u304c\u5165\u308b\u3002\n      this[i++] = commandCode               // [1] \u30b3\u30de\u30f3\u30c9\u30b3\u30fc\u30c9\u304c\u5165\u308b\u3002\n      IDm.forEach { this[i++] = it }        // [2..10] ID\uff4d (8byte) \u304c\u5165\u308b\u3002\n      this[i++] = numberOfServices.toByte() // [11] \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u306e\u6570\u304c\u5165\u308b\u3002\n      serviceList.forEach {\n        it.forEachIndexed { index, byte ->  // [12..] \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9 (2byte) \u304c\u5165\u308b\u3002\n          if ((index % 2) == 0) {           //        \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306f\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u306a\u306e\u3067\n            this[i + 1] = byte              //        2byte \u304c\u53cd\u8ee2\u3059\u308b\u3088\u3046\u306b\u683c\u7d0d\u3059\u308b\u3002\n          } else {\n            this[i - 1] = byte\n          }\n          i++\n        }\n      }\n      this[i++] = numberOfBlocks.toByte()    // [12 + 2 * numberOfServices + 1] \u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u306e\u6570\u304c\u5165\u308b\u3002\n      blocks.forEach { it.toByteArray().forEach { this[i++] = it } }\n                                             // [...] \u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u30d1\u30b1\u30c3\u30c8\u304c\u9806\u7e70\u308a\u5165\u308b\u3002\n    }\n  }\n}\n```\n\n\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u306b\u306f\u3001\u53d6\u5f97\u3057\u305f\u3044\u60c5\u5831\u306e\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u3092\u5165\u308c\u307e\u3059\u3002\n\u4eca\u56de\u306e\u5b9f\u88c5\u3067\u306f `00 8B`\uff08\u30ab\u30fc\u30c9\u60c5\u5831\u306e\u53d6\u5f97\uff09\u306e\u307f\u3092\u5bfe\u8c61\u3068\u3057\u307e\u3057\u305f\u3002\n\u30ab\u30fc\u30c9\u60c5\u5831\u306e\u53d6\u5f97\u3067\u5fc5\u8981\u306a\u30d6\u30ed\u30c3\u30af\u306f\u30012\u30d0\u30a4\u30c8\u306e\u30a8\u30ec\u30e1\u30f3\u30c8 1\u3064\u3067\u3059\u3002\n\n\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u89aa\u30af\u30e9\u30b9\u3068\u306a\u308b abstract \u306a\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u30af\u30e9\u30b9\u306b\u6700\u521d\u306e 1byte \u3092\u751f\u6210\u3059\u308b\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3001\u30d1\u30b1\u30c3\u30c8\u5168\u4f53\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3001\u30d6\u30ed\u30c3\u30af\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306b\u3001\u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\u306f\u57fa\u672c `0` \u3067\u826f\u3044\u306e\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u30d1\u30fc\u30b9\u30b5\u30fc\u30d3\u30b9\u3063\u3066\u306a\u3093\u3060\uff1f\u3068\u3044\u3046\u65b9\u306f **\u4ed5\u69d8\u7de8** \u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\uff08\u79c1\u3082\u3088\u304f\u308f\u304b\u3063\u3066\u306a\u3044\u3067\u3059\u3002\uff09\n\n```kotlin\nabstract class BlockListElement(val accessMode: AccessMode, val serviceCodeIndex: Int, val number: Int) {\n  /** \u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\u306e\u5217\u6319\u4f53 */\n  enum class AccessMode(val value: Int) {\n    toNotParseService(0), toParseService(1)\n  }\n\n  /** \u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u6700\u521d\u306e byte \u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  fun firstByte(): Byte {\n    // 1byte\n    //    [0] \u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u30b5\u30a4\u30ba (1bit) 0: 2byte\u30a8\u30ec\u30e1\u30f3\u30c8, 1: 3byte\u30a8\u30ec\u30e1\u30f3\u30c8\n    //    [1] \u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9 (1bit)\n    //    [2..7] \u30a8\u30ec\u30e1\u30f3\u30c8\u304c\u5bfe\u8c61\u3068\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u5185\u306e\u756a\u53f7 (6bit)\n    //    x 0 0 0 0 0 0 0 <- \u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u30b5\u30a4\u30ba\n    //    0 x 0 0 0 0 0 0 <- \u30a2\u30af\u30bb\u30b9\u30e2\u30fc\u30c9\n    //  & 0 0 x x x x x x <- \u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u30ea\u30b9\u30c8\u5185\u306e\u9806\u756a\n    return ((0 shl 7) and (accessMode.value shl 6) and (serviceCodeIndex shl 3)).toByte()\n  }\n  abstract fun toByteArray(): ByteArray\n  abstract fun size(): Int\n}\n```\n\n2byte\u306e\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\nclass BlockListElement2(accessMode: AccessMode, serviceCodeIndex: Int, number: Int) : BlockListElement(accessMode, serviceCodeIndex, number) {\n  /** \u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u30d1\u30b1\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun toByteArray(): ByteArray {\n    return ByteArray(2).apply {\n      this[0] = firstByte()\n      this[1] = number.toByte()\n    }\n  }\n\n  /** \u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun size(): Int {\n    return 2\n  }\n}\n```\n\n3byte\u306e\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8\u30a8\u30ec\u30e1\u30f3\u30c8\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u5834\u5408\u306e\u30d1\u30b1\u30c3\u30c8\u306e\u69cb\u6210\u306b\u95a2\u3057\u3066\u306f\u3001number \u3092 2byte \u306b\u3059\u308c\u3070\u3088\u3044\u3060\u3051\u306a\u306e\u3067\u3059\u304c\u3001\u76f4\u8fd1\u3067\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u624b\u3092\u629c\u304d\u307e\u3057\u305f\u3002\n\n```\nclass BlockListElement3(accessMode: AccessMode, serviceCodeIndex: Int, number: Int) : BlockListElement(accessMode, serviceCodeIndex, number) {\n  /** \u30a8\u30ec\u30e1\u30f3\u30c8\u306e\u30d1\u30b1\u30c3\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun toByteArray(): ByteArray {\n    return ByteArray(3).apply {\n      this[0] = firstByte()\n\n      // FIXME: \u3053\u3046\u3058\u3083\u306a\u3044\n      this[2] = number.toByte()\n    }\n  }\n\n  /** \u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun size(): Int {\n    return 3\n  }\n}\n```\n\nReadWithoutEncryptionCommand \u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b1\u30c3\u30c8\u3092 `nfc.transceive(...)` \u306b\u6e21\u3059\u3068\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002\n\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u89e3\u91c8\u3092\u3057\u3066\u3044\u308b `ReadWithoutEncryptionResponse` \u30af\u30e9\u30b9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```\nclass ReadWithoutEncryptionResponse : NfcResponse {\n  /** \u6307\u5b9a\u306e\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u306e\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u308b\u30d6\u30ed\u30c3\u30af\u30ea\u30b9\u30c8 16byte/\u30d6\u30ed\u30c3\u30af */\n  val blocks: Array<ByteArray>\n\n  constructor(response: ByteArray): super(response) {\n    // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30d6\u30ed\u30c3\u30af\u3092\u30d1\u30fc\u30b9\u3059\u308b\u3002\n    blocks = blocks()\n  }\n\n  /** \u51e6\u7406\u306e\u6210\u5426 */\n  val succeeded: Boolean\n    get() = statusFlag1().toInt() == 0x00 && statusFlag2().toInt() == 0x00\n\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun responseSize(): Int {\n    return response[0].toInt()\n  }\n\n  /** \u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun responseCode(): Byte {\n    return response[1]\n  }\n\n  /** IDm \u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  override fun IDm(): ByteArray {\n    return response.copyOfRange(2, 10)\n  }\n\n  /** \u30b9\u30c6\u30fc\u30bf\u30b9\u30d5\u30e9\u30b01 \u3092\u53d6\u5f97\u3059\u308b\u3002\u8a73\u7d30\u306f\u4ed5\u69d8\u7de8\u53c2\u7167\u3002 */\n  fun statusFlag1(): Byte {\n    return response[10]\n  }\n\n  /** \u30b9\u30c6\u30fc\u30bf\u30b9\u30d5\u30e9\u30b02 \u3092\u53d6\u5f97\u3059\u308b\u3002\u8a73\u7d30\u306f\u4ed5\u69d8\u7de8\u53c2\u7167\u3002 */\n  fun statusFlag2(): Byte {\n    return response[11]\n  }\n\n  /** \u30d6\u30ed\u30c3\u30af\u306e\u6570\u3092\u53d6\u5f97\u3059\u308b\u3002 */\n  fun numberOfBlocks(): Int {\n    return response[12].toInt()\n  }\n\n  private fun blocks(): Array<ByteArray> {\n    var i = 0\n    val results = arrayListOf<ByteArray>()\n    val raw = response.copyOfRange(13, response.size)\n    while (i < numberOfBlocks()) {\n      // 16byte \u5358\u4f4d\u3067\u914d\u5217\u306b\u683c\u7d0d\u3057\u3066\u3044\u304f\u3002\n      results += raw.copyOfRange(i * 16, i * 16 + 16)\n      i++\n    }\n    return results.toTypedArray()\n  }\n}\n```\n\n\u30b9\u30c6\u30fc\u30bf\u30b9\u30d5\u30e9\u30b0\u3067\u3001\u51e6\u7406\u306e\u6210\u5426\u3092\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002\n1, 2\u3068\u3082\u306b `00` \u3067\u3042\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n\u5931\u6557\u306e\u5834\u5408\u306f\u3001\u5931\u6557\u3057\u305f\u7b87\u6240\uff08\u30d0\u30a4\u30c8\u5217\u756a\u53f7\uff09\u304c\u5165\u308a\u307e\u3059\u3002\n\n\u30d6\u30ed\u30c3\u30af\u306e\u89e3\u91c8\u306e\u4ed5\u65b9\u306f\u3001\u30b5\u30fc\u30d3\u30b9\u306b\u4f9d\u5b58\u3057\u307e\u3059\u3002\n\u5b9f\u88c5\u6642\u306f\u3001[jennychan.web.fc2.com: \u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30c9/\u30b5\u30fc\u30d3\u30b9\u30b3\u30fc\u30c9\u4e00\u89a7(NS\u306e\u307f)](http://jennychan.web.fc2.com/format/suica.html#008B) \u3092\u53c2\u7167\u3057\u307e\u3057\u305f\u3002\n\n\u308f\u305f\u3057\u306e PASUMO \u3067\u5b9f\u884c\u3057\u305f\u969b\u306e\u30d6\u30ed\u30c3\u30af\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```\n0  0  0  0  0  0  0  0 32  0  0 94  3  0  4 -39\n```\n\n\u533a\u5206\u3051\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u3068 `[[00 00 00 00 00 00 00 00] [20] [00 00] [5E 03] [00] [04  27]]` \u3068\u306a\u308a\u307e\u3059\u3002\n\u5404\u90e8\u4f4d\u306e\u89e3\u8aac\u3092\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u305d\u3046\u3067\u3059\u3002\n\n| \u5024  | \u89e3\u8aac |\n|:--- |:--- |\n| `[00 00 00 00 00 00 00 00]` | \u4e0d\u660e |\n| `[20]` | \u30ab\u30fc\u30c9\u7a2e\u5225 (4bit), \u4f7f\u7528\u5730\u57df (4bit) |\n| `[00 00]` | \u4e0d\u660e |\n| `[5E 03]` | \u6b8b\u984d (LE) `03 5E` -> 862\u5186 \u203b \u7fcc\u65e5\u51fa\u52e4\u6642\u306b\u6539\u672d\u901a\u308b\u3068\u305f\u3057\u304b\u306b\u3053\u306e\u984d\u3067\u3057\u305f\u3002 |\n| `[00]` | \u4e0d\u660e |\n| `[04  27]` | \u53d6\u5f15\u901a\u756a |\n\n\u30ab\u30fc\u30c9\u7a2e\u5225\u306f\u4e0a\u306e\u53c2\u7167\u3057\u305f\u30b5\u30a4\u30c8\u3067 20 \u3060\u3068 SUICA/PASUMO \u3067\u3042\u308b\u3068\u306e\u8a18\u8f09\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n# \u60a9\u307f\u3069\u3053\u308d\n\n\u30b5\u30f3\u30d7\u30eb\u306e\u958b\u767a\u3092\u3057\u3001\u52d5\u4f5c\u78ba\u8a8d\u3092\u3057\u3066\u3044\u3066\u3001\u3088\u304f\u51fa\u304f\u308f\u3059\u6b21\u306e\u30a8\u30e9\u30fc\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n```\nandroid.nfc.TagLostException: Tag was lost\n```\n\n\u30b0\u30b0\u308b\u3068\u3001\u6b21\u306e\u30ea\u30f3\u30af\u306e\u3088\u3046\u306b\u89e3\u8aac\u3057\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u65b9\u304c\u3044\u307e\u3059\u3002\n\n* [\u3089\u3073\u30d6\u30ed\u30b0: [Android] NfcF : TagLostException](http://blog.rabisoft.com/?p=558)\n* [hiro99ma blog: [n7]TagLostException (1)](https://hiro99ma.blogspot.jp/2012/10/n7taglostexception-1.html)\n\n\u305f\u3057\u304b\u306b\u3001\u3053\u308c\u3089\u306e\u7406\u7531\u3067\u767a\u751f\u3059\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u5358\u7d14\u306b\u30b9\u30ad\u30e3\u30f3\u4e2d\u306b NFC\u30c7\u30d0\u30a4\u30b9\u3068\u30b9\u30de\u30db\u304c\u305a\u308c\u308b\u3068\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3059\u3002\n\u3044\u307e\u3044\u3061\u89e3\u6c7a\u65b9\u6cd5\u3082\u3001\u767a\u751f\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3082\u8aad\u3081\u306a\u3044\u306e\u3067\u6c17\u6301\u3061\u60aa\u3044\u3067\u3059\u3002\n\u6539\u5584\u7b56\u306f\u306a\u3044\u3082\u306e\u304b\u3057\u3089\u30fb\u30fb\u30fb\u3002\n\n# \u958b\u767a\u6642\u306b\u6c17\u3092\u3064\u3051\u308b\u3053\u3068\n\n\u958b\u767a\u6642\u306f `Galaxy 6s Edge` \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u6c17\u3092\u3064\u3051\u308b\u3053\u3068\u306f\u7aef\u672b\u306b\u4f9d\u5b58\u3059\u308b\u3082\u306e\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002\n\n* Android\u7aef\u672b\u306e\u8a2d\u5b9a\u3067\u3001FeliCa\u8aad\u307f\u53d6\u308a\u3092\u6709\u52b9\u306b\u3059\u308b\n* Android\u7aef\u672b\u306b\u6a19\u6e96\u3067\u5165\u3063\u3066\u3044\u308b FeliCa\u30ea\u30fc\u30c0\u30fc\u7684\u306a\u30a2\u30d7\u30ea\u306b\u51e6\u7406\u3092\u596a\u308f\u308c\u308b\n\n\t\u8a2d\u5b9a\u304b\u3089\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u72ec\u81ea\u30a2\u30d7\u30ea\u304c\u51e6\u7406\u3092\u3059\u3059\u3081\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n* \u30ab\u30fc\u30c9\u306b\u63a5\u7d9a\u3057\u3066\u30c7\u30d0\u30c3\u30b0\u3057\u3066\u3044\u308b\u6700\u4e2d\u3067\u30d7\u30ed\u30bb\u30b9\u3092\u5207\u308b\u3068\u30b9\u30de\u30db\u304c NFC\u30c7\u30d0\u30a4\u30b9\u3092\u691c\u77e5\u3057\u306a\u304f\u306a\u308b\u73fe\u8c61\n\n\t\u30b9\u30de\u30db\u3092\u518d\u8d77\u52d5\u3059\u308b\u3068\u3001\u307e\u305f\u5143\u6c17\u306b\u691c\u77e5\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3059\u304c\u30fb\u30fb\u30fb\u3002\n\t\u3061\u3083\u3093\u3068\u3001NfcAdapter \u306e `disconnect()` \u3092\u901a\u3057\u3066\u304b\u3089\u3001\u30d7\u30ed\u30bb\u30b9\u3092\u5207\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\t\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u304c\u3002\n\n", "tags": ["suica", "FeliCa", "NFC", "Android", "Kotlin"]}