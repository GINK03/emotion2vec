{"context": " More than 1 year has passed since last update.\u554f\u984c\u306f http://nabetani.sakura.ne.jp/hena/ord7selectchair/\n\u3067\u3002\nC++ \u306b\u3088\u308b\u5b9f\u88c5\u3002\n\u5f53\u65e5\u305d\u306e\u5834\u3067\u66f8\u3044\u305f\u3002\n#include <iostream>\n#include <string>\n#include <cstdlib>\n\nusing namespace std;\n\nconst char NOMAN = '-';\n\nbool is_empty( string const & c, size_t ix )\n{\n    return c.size() <= ix || c[ix]==NOMAN;\n}\n\nbool and_( bool a, bool b ){\n    return a&&b;\n}\n\nbool or_( bool a, bool b ){\n    return a||b;\n}\n\nbool t( bool a, bool b ){\n    return true;\n}\n\nsize_t sit_pos( string & c, char cmd )\n{\n    typedef bool ( *proc_t)( bool, bool );\n    proc_t procs[] = { and_, or_, t };\n    for( size_t px=0 ; px<3 ; ++px ){\n        for( size_t ix=0 ; ix<c.size() ; ++ix ){\n            if ( c[ix]!=NOMAN ){\n                continue;\n            }\n            if ( procs[ px ]( is_empty( c, ix-1 ), is_empty( c, ix+1 ) ) ){\n                return ix;\n            }\n        }\n    }\n}\n\nvoid add_member( string & c, char cmd )\n{\n    c[ sit_pos( c, cmd )] = cmd;\n}\n\nvoid remove_member( string & c, char cmd )\n{\n    size_t pos = c.find_first_of( cmd - 'a' + 'A' );\n    c[pos] = NOMAN;\n}\n\nstring solve( string const & input )\n{\n    size_t count = atoi( input.c_str() );\n    string seq = input.substr( input.find_first_of( ':' ) + 1 );\n    string chairs( count, NOMAN );\n    for( size_t ix=0 ; ix<seq.size() ; ++ix ){\n        char cmd = seq.at( ix );\n        if ( 'A'<=cmd && cmd<='Z' ){\n            add_member( chairs, cmd );\n        } else {\n            remove_member( chairs, cmd );\n        }\n    }\n    return chairs;\n}\n\nvoid test( string const & input, string const & expected )\n{\n    string actual = solve( input );\n    cout \n        << ( actual == expected ? \"ok\" : \"**NG**\" )\n        << input << \" -> \"\n        << actual << \" / \"\n        << expected << endl;\n}\n\nint main()\n{\n/*1*/ test( \"6:NABEbBZn\", \"-ZAB-E\" );\n/*2*/ test( \"1:A\", \"A\" );\n// \u3042\u3068\u306f\u7701\u7565\n}\n\n\u95a2\u6570\u540d\u3092 and, or \u306b\u3057\u305f\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3089\u306a\u304b\u3063\u305f\u306e\u3067 and_ \u3068 or_ \u306b\u3057\u305f\u3002\n\n\u554f\u984c\u306f http://nabetani.sakura.ne.jp/hena/ord7selectchair/\n\u3067\u3002\nC++ \u306b\u3088\u308b\u5b9f\u88c5\u3002\n\n\u5f53\u65e5\u305d\u306e\u5834\u3067\u66f8\u3044\u305f\u3002\n\n```c++\n#include <iostream>\n#include <string>\n#include <cstdlib>\n\nusing namespace std;\n\nconst char NOMAN = '-';\n\nbool is_empty( string const & c, size_t ix )\n{\n    return c.size() <= ix || c[ix]==NOMAN;\n}\n\nbool and_( bool a, bool b ){\n    return a&&b;\n}\n\nbool or_( bool a, bool b ){\n    return a||b;\n}\n\nbool t( bool a, bool b ){\n    return true;\n}\n\nsize_t sit_pos( string & c, char cmd )\n{\n    typedef bool ( *proc_t)( bool, bool );\n    proc_t procs[] = { and_, or_, t };\n    for( size_t px=0 ; px<3 ; ++px ){\n        for( size_t ix=0 ; ix<c.size() ; ++ix ){\n            if ( c[ix]!=NOMAN ){\n                continue;\n            }\n            if ( procs[ px ]( is_empty( c, ix-1 ), is_empty( c, ix+1 ) ) ){\n                return ix;\n            }\n        }\n    }\n}\n\nvoid add_member( string & c, char cmd )\n{\n    c[ sit_pos( c, cmd )] = cmd;\n}\n\nvoid remove_member( string & c, char cmd )\n{\n    size_t pos = c.find_first_of( cmd - 'a' + 'A' );\n    c[pos] = NOMAN;\n}\n\nstring solve( string const & input )\n{\n    size_t count = atoi( input.c_str() );\n    string seq = input.substr( input.find_first_of( ':' ) + 1 );\n    string chairs( count, NOMAN );\n    for( size_t ix=0 ; ix<seq.size() ; ++ix ){\n        char cmd = seq.at( ix );\n        if ( 'A'<=cmd && cmd<='Z' ){\n            add_member( chairs, cmd );\n        } else {\n            remove_member( chairs, cmd );\n        }\n    }\n    return chairs;\n}\n\nvoid test( string const & input, string const & expected )\n{\n    string actual = solve( input );\n    cout \n        << ( actual == expected ? \"ok\" : \"**NG**\" )\n        << input << \" -> \"\n        << actual << \" / \"\n        << expected << endl;\n}\n\nint main()\n{\n/*1*/ test( \"6:NABEbBZn\", \"-ZAB-E\" );\n/*2*/ test( \"1:A\", \"A\" );\n// \u3042\u3068\u306f\u7701\u7565\n}\n```\n\n\u95a2\u6570\u540d\u3092 and, or \u306b\u3057\u305f\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u3089\u306a\u304b\u3063\u305f\u306e\u3067 and_ \u3068 or_ \u306b\u3057\u305f\u3002\n\n\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "C++"]}